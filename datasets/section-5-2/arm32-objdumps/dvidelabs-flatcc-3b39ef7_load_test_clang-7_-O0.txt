
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/load_test:     file format elf32-littlearm


Disassembly of section .init:

00012390 <.init>:
   12390:	push	{r3, lr}
   12394:	bl	124dc <_start@@Base+0x3c>
   12398:	pop	{r3, pc}

Disassembly of section .plt:

0001239c <strcmp@plt-0x14>:
   1239c:	push	{lr}		; (str lr, [sp, #-4]!)
   123a0:	ldr	lr, [pc, #4]	; 123ac <strcmp@plt-0x4>
   123a4:	add	lr, pc, lr
   123a8:	ldr	pc, [lr, #8]!
   123ac:	andeq	sl, r1, r4, asr ip

000123b0 <strcmp@plt>:
   123b0:	add	ip, pc, #0, 12
   123b4:	add	ip, ip, #106496	; 0x1a000
   123b8:	ldr	pc, [ip, #3156]!	; 0xc54

000123bc <printf@plt>:
   123bc:	add	ip, pc, #0, 12
   123c0:	add	ip, ip, #106496	; 0x1a000
   123c4:	ldr	pc, [ip, #3148]!	; 0xc4c

000123c8 <fopen@plt>:
   123c8:	add	ip, pc, #0, 12
   123cc:	add	ip, ip, #106496	; 0x1a000
   123d0:	ldr	pc, [ip, #3140]!	; 0xc44

000123d4 <free@plt>:
   123d4:	add	ip, pc, #0, 12
   123d8:	add	ip, ip, #106496	; 0x1a000
   123dc:	ldr	pc, [ip, #3132]!	; 0xc3c

000123e0 <memcpy@plt>:
   123e0:	add	ip, pc, #0, 12
   123e4:	add	ip, ip, #106496	; 0x1a000
   123e8:	ldr	pc, [ip, #3124]!	; 0xc34

000123ec <memcmp@plt>:
   123ec:	add	ip, pc, #0, 12
   123f0:	add	ip, ip, #106496	; 0x1a000
   123f4:	ldr	pc, [ip, #3116]!	; 0xc2c

000123f8 <realloc@plt>:
   123f8:	add	ip, pc, #0, 12
   123fc:	add	ip, ip, #106496	; 0x1a000
   12400:	ldr	pc, [ip, #3108]!	; 0xc24

00012404 <fwrite@plt>:
   12404:	add	ip, pc, #0, 12
   12408:	add	ip, ip, #106496	; 0x1a000
   1240c:	ldr	pc, [ip, #3100]!	; 0xc1c

00012410 <gettimeofday@plt>:
   12410:	add	ip, pc, #0, 12
   12414:	add	ip, ip, #106496	; 0x1a000
   12418:	ldr	pc, [ip, #3092]!	; 0xc14

0001241c <malloc@plt>:
   1241c:	add	ip, pc, #0, 12
   12420:	add	ip, ip, #106496	; 0x1a000
   12424:	ldr	pc, [ip, #3084]!	; 0xc0c

00012428 <__libc_start_main@plt>:
   12428:	add	ip, pc, #0, 12
   1242c:	add	ip, ip, #106496	; 0x1a000
   12430:	ldr	pc, [ip, #3076]!	; 0xc04

00012434 <__gmon_start__@plt>:
   12434:	add	ip, pc, #0, 12
   12438:	add	ip, ip, #106496	; 0x1a000
   1243c:	ldr	pc, [ip, #3068]!	; 0xbfc

00012440 <strlen@plt>:
   12440:	add	ip, pc, #0, 12
   12444:	add	ip, ip, #106496	; 0x1a000
   12448:	ldr	pc, [ip, #3060]!	; 0xbf4

0001244c <posix_memalign@plt>:
   1244c:	add	ip, pc, #0, 12
   12450:	add	ip, ip, #106496	; 0x1a000
   12454:	ldr	pc, [ip, #3052]!	; 0xbec

00012458 <memset@plt>:
   12458:	add	ip, pc, #0, 12
   1245c:	add	ip, ip, #106496	; 0x1a000
   12460:	ldr	pc, [ip, #3044]!	; 0xbe4

00012464 <strncpy@plt>:
   12464:	add	ip, pc, #0, 12
   12468:	add	ip, ip, #106496	; 0x1a000
   1246c:	ldr	pc, [ip, #3036]!	; 0xbdc

00012470 <memchr@plt>:
   12470:	add	ip, pc, #0, 12
   12474:	add	ip, ip, #106496	; 0x1a000
   12478:	ldr	pc, [ip, #3028]!	; 0xbd4

0001247c <fclose@plt>:
   1247c:	add	ip, pc, #0, 12
   12480:	add	ip, ip, #106496	; 0x1a000
   12484:	ldr	pc, [ip, #3020]!	; 0xbcc

00012488 <abort@plt>:
   12488:	add	ip, pc, #0, 12
   1248c:	add	ip, ip, #106496	; 0x1a000
   12490:	ldr	pc, [ip, #3012]!	; 0xbc4

00012494 <__assert_fail@plt>:
   12494:	add	ip, pc, #0, 12
   12498:	add	ip, ip, #106496	; 0x1a000
   1249c:	ldr	pc, [ip, #3004]!	; 0xbbc

Disassembly of section .text:

000124a0 <_start@@Base>:
   124a0:	mov	fp, #0
   124a4:	mov	lr, #0
   124a8:	pop	{r1}		; (ldr r1, [sp], #4)
   124ac:	mov	r2, sp
   124b0:	push	{r2}		; (str r2, [sp, #-4]!)
   124b4:	push	{r0}		; (str r0, [sp, #-4]!)
   124b8:	ldr	ip, [pc, #16]	; 124d0 <_start@@Base+0x30>
   124bc:	push	{ip}		; (str ip, [sp, #-4]!)
   124c0:	ldr	r0, [pc, #12]	; 124d4 <_start@@Base+0x34>
   124c4:	ldr	r3, [pc, #12]	; 124d8 <_start@@Base+0x38>
   124c8:	bl	12428 <__libc_start_main@plt>
   124cc:	bl	12488 <abort@plt>
   124d0:	andeq	sl, r1, r4, lsl #16
   124d4:	muleq	r1, r0, r5
   124d8:	andeq	sl, r1, r4, lsr #15
   124dc:	ldr	r3, [pc, #20]	; 124f8 <_start@@Base+0x58>
   124e0:	ldr	r2, [pc, #20]	; 124fc <_start@@Base+0x5c>
   124e4:	add	r3, pc, r3
   124e8:	ldr	r2, [r3, r2]
   124ec:	cmp	r2, #0
   124f0:	bxeq	lr
   124f4:	b	12434 <__gmon_start__@plt>
   124f8:	andeq	sl, r1, r4, lsl fp
   124fc:	andeq	r0, r0, r0, rrx
   12500:	ldr	r0, [pc, #24]	; 12520 <_start@@Base+0x80>
   12504:	ldr	r3, [pc, #24]	; 12524 <_start@@Base+0x84>
   12508:	cmp	r3, r0
   1250c:	bxeq	lr
   12510:	ldr	r3, [pc, #16]	; 12528 <_start@@Base+0x88>
   12514:	cmp	r3, #0
   12518:	bxeq	lr
   1251c:	bx	r3
   12520:	andeq	sp, r2, r4, ror r0
   12524:	andeq	sp, r2, r4, ror r0
   12528:	andeq	r0, r0, r0
   1252c:	ldr	r0, [pc, #36]	; 12558 <_start@@Base+0xb8>
   12530:	ldr	r1, [pc, #36]	; 1255c <_start@@Base+0xbc>
   12534:	sub	r1, r1, r0
   12538:	asr	r1, r1, #2
   1253c:	add	r1, r1, r1, lsr #31
   12540:	asrs	r1, r1, #1
   12544:	bxeq	lr
   12548:	ldr	r3, [pc, #16]	; 12560 <_start@@Base+0xc0>
   1254c:	cmp	r3, #0
   12550:	bxeq	lr
   12554:	bx	r3
   12558:	andeq	sp, r2, r4, ror r0
   1255c:	andeq	sp, r2, r4, ror r0
   12560:	andeq	r0, r0, r0
   12564:	push	{r4, lr}
   12568:	ldr	r4, [pc, #24]	; 12588 <_start@@Base+0xe8>
   1256c:	ldrb	r3, [r4]
   12570:	cmp	r3, #0
   12574:	popne	{r4, pc}
   12578:	bl	12500 <_start@@Base+0x60>
   1257c:	mov	r3, #1
   12580:	strb	r3, [r4]
   12584:	pop	{r4, pc}
   12588:	andeq	sp, r2, r4, ror r0
   1258c:	b	1252c <_start@@Base+0x8c>

00012590 <main@@Base>:
   12590:	push	{r4, r5, fp, lr}
   12594:	add	fp, sp, #8
   12598:	sub	sp, sp, #352	; 0x160
   1259c:	movw	r2, #0
   125a0:	str	r2, [fp, #-12]
   125a4:	str	r0, [fp, #-16]
   125a8:	str	r1, [fp, #-20]	; 0xffffffec
   125ac:	movw	r0, #10
   125b0:	str	r0, [sp, #60]	; 0x3c
   125b4:	str	r2, [sp, #52]	; 0x34
   125b8:	add	r0, sp, #96	; 0x60
   125bc:	str	r0, [sp, #92]	; 0x5c
   125c0:	ldr	r0, [sp, #92]	; 0x5c
   125c4:	bl	14018 <flatcc_builder_init@@Base>
   125c8:	ldr	r1, [sp, #92]	; 0x5c
   125cc:	str	r0, [sp, #44]	; 0x2c
   125d0:	mov	r0, r1
   125d4:	bl	12910 <main@@Base+0x380>
   125d8:	ldr	r1, [sp, #92]	; 0x5c
   125dc:	str	r0, [sp, #40]	; 0x28
   125e0:	mov	r0, r1
   125e4:	sub	r1, fp, #32
   125e8:	bl	19628 <flatcc_builder_finalize_buffer@@Base>
   125ec:	ldr	r1, [pc, #732]	; 128d0 <main@@Base+0x340>
   125f0:	add	r1, pc, r1
   125f4:	ldr	r2, [pc, #728]	; 128d4 <main@@Base+0x344>
   125f8:	add	r2, pc, r2
   125fc:	str	r0, [fp, #-28]	; 0xffffffe4
   12600:	mov	r0, r1
   12604:	mov	r1, r2
   12608:	bl	123c8 <fopen@plt>
   1260c:	str	r0, [fp, #-24]	; 0xffffffe8
   12610:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12614:	movw	r1, #0
   12618:	cmp	r0, r1
   1261c:	bne	1262c <main@@Base+0x9c>
   12620:	mvn	r0, #0
   12624:	str	r0, [sp, #52]	; 0x34
   12628:	b	12898 <main@@Base+0x308>
   1262c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12630:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12634:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12638:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1263c:	str	r0, [sp, #36]	; 0x24
   12640:	mov	r0, r1
   12644:	movw	r1, #1
   12648:	bl	12404 <fwrite@plt>
   1264c:	ldr	r1, [sp, #36]	; 0x24
   12650:	cmp	r1, r0
   12654:	movw	r0, #0
   12658:	movne	r0, #1
   1265c:	and	r0, r0, #1
   12660:	ldr	r2, [sp, #52]	; 0x34
   12664:	orr	r0, r2, r0
   12668:	str	r0, [sp, #52]	; 0x34
   1266c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12670:	bl	1247c <fclose@plt>
   12674:	ldr	r1, [sp, #52]	; 0x34
   12678:	cmp	r1, #0
   1267c:	str	r0, [sp, #32]
   12680:	beq	12688 <main@@Base+0xf8>
   12684:	b	12898 <main@@Base+0x308>
   12688:	ldr	r0, [pc, #588]	; 128dc <main@@Base+0x34c>
   1268c:	add	r0, pc, r0
   12690:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12694:	bl	123bc <printf@plt>
   12698:	ldr	r1, [pc, #568]	; 128d8 <main@@Base+0x348>
   1269c:	add	r1, pc, r1
   126a0:	str	r0, [sp, #28]
   126a4:	mov	r0, r1
   126a8:	bl	123bc <printf@plt>
   126ac:	str	r0, [sp, #24]
   126b0:	bl	129d8 <main@@Base+0x448>
   126b4:	vstr	d0, [sp, #72]	; 0x48
   126b8:	movw	r0, #0
   126bc:	str	r0, [sp, #56]	; 0x38
   126c0:	ldr	r0, [sp, #56]	; 0x38
   126c4:	ldr	r1, [sp, #60]	; 0x3c
   126c8:	cmp	r0, r1
   126cc:	bge	1286c <main@@Base+0x2dc>
   126d0:	ldr	r0, [sp, #92]	; 0x5c
   126d4:	bl	12910 <main@@Base+0x380>
   126d8:	ldr	lr, [sp, #92]	; 0x5c
   126dc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   126e0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   126e4:	str	r0, [sp, #20]
   126e8:	mov	r0, lr
   126ec:	bl	19588 <flatcc_builder_copy_buffer@@Base>
   126f0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   126f4:	str	r0, [sp, #16]
   126f8:	mov	r0, r1
   126fc:	bl	12a7c <main@@Base+0x4ec>
   12700:	str	r0, [sp, #88]	; 0x58
   12704:	ldr	r0, [sp, #88]	; 0x58
   12708:	bl	12af8 <main@@Base+0x568>
   1270c:	ldr	r1, [pc, #504]	; 1290c <main@@Base+0x37c>
   12710:	add	r1, pc, r1
   12714:	bl	123b0 <strcmp@plt>
   12718:	ldr	r1, [sp, #52]	; 0x34
   1271c:	orr	r0, r1, r0
   12720:	str	r0, [sp, #52]	; 0x34
   12724:	ldr	r0, [sp, #52]	; 0x34
   12728:	cmp	r0, #0
   1272c:	bne	12734 <main@@Base+0x1a4>
   12730:	b	12754 <main@@Base+0x1c4>
   12734:	ldr	r0, [pc, #424]	; 128e4 <main@@Base+0x354>
   12738:	add	r0, pc, r0
   1273c:	ldr	r1, [pc, #420]	; 128e8 <main@@Base+0x358>
   12740:	add	r1, pc, r1
   12744:	ldr	r2, [pc, #416]	; 128ec <main@@Base+0x35c>
   12748:	add	r3, pc, r2
   1274c:	movw	r2, #139	; 0x8b
   12750:	bl	12494 <__assert_fail@plt>
   12754:	ldr	r0, [sp, #88]	; 0x58
   12758:	bl	12c18 <main@@Base+0x688>
   1275c:	str	r0, [sp, #84]	; 0x54
   12760:	ldr	r0, [sp, #84]	; 0x54
   12764:	bl	12d20 <main@@Base+0x790>
   12768:	cmp	r0, #1000	; 0x3e8
   1276c:	movw	r0, #0
   12770:	movne	r0, #1
   12774:	and	r0, r0, #1
   12778:	ldr	lr, [sp, #52]	; 0x34
   1277c:	orr	r0, lr, r0
   12780:	str	r0, [sp, #52]	; 0x34
   12784:	ldr	r0, [sp, #52]	; 0x34
   12788:	cmp	r0, #0
   1278c:	bne	12794 <main@@Base+0x204>
   12790:	b	127b4 <main@@Base+0x224>
   12794:	ldr	r0, [pc, #340]	; 128f0 <main@@Base+0x360>
   12798:	add	r0, pc, r0
   1279c:	ldr	r1, [pc, #336]	; 128f4 <main@@Base+0x364>
   127a0:	add	r1, pc, r1
   127a4:	ldr	r2, [pc, #332]	; 128f8 <main@@Base+0x368>
   127a8:	add	r3, pc, r2
   127ac:	movw	r2, #143	; 0x8f
   127b0:	bl	12494 <__assert_fail@plt>
   127b4:	movw	r0, #0
   127b8:	str	r0, [sp, #48]	; 0x30
   127bc:	ldr	r0, [sp, #48]	; 0x30
   127c0:	cmp	r0, #1000	; 0x3e8
   127c4:	bge	12848 <main@@Base+0x2b8>
   127c8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   127cc:	ldr	r1, [sp, #84]	; 0x54
   127d0:	ldr	r2, [sp, #48]	; 0x30
   127d4:	str	r0, [sp, #12]
   127d8:	mov	r0, r1
   127dc:	mov	r1, r2
   127e0:	bl	12fd0 <main@@Base+0xa40>
   127e4:	ldr	r1, [sp, #12]
   127e8:	str	r0, [sp, #8]
   127ec:	mov	r0, r1
   127f0:	ldr	r1, [sp, #8]
   127f4:	bl	12d70 <main@@Base+0x7e0>
   127f8:	ldr	r1, [sp, #52]	; 0x34
   127fc:	orr	r0, r1, r0
   12800:	str	r0, [sp, #52]	; 0x34
   12804:	ldr	r0, [sp, #52]	; 0x34
   12808:	cmp	r0, #0
   1280c:	bne	12814 <main@@Base+0x284>
   12810:	b	12834 <main@@Base+0x2a4>
   12814:	ldr	r0, [pc, #224]	; 128fc <main@@Base+0x36c>
   12818:	add	r0, pc, r0
   1281c:	ldr	r1, [pc, #220]	; 12900 <main@@Base+0x370>
   12820:	add	r1, pc, r1
   12824:	ldr	r2, [pc, #216]	; 12904 <main@@Base+0x374>
   12828:	add	r3, pc, r2
   1282c:	movw	r2, #147	; 0x93
   12830:	bl	12494 <__assert_fail@plt>
   12834:	b	12838 <main@@Base+0x2a8>
   12838:	ldr	r0, [sp, #48]	; 0x30
   1283c:	add	r0, r0, #1
   12840:	str	r0, [sp, #48]	; 0x30
   12844:	b	127bc <main@@Base+0x22c>
   12848:	ldr	r0, [sp, #52]	; 0x34
   1284c:	cmp	r0, #0
   12850:	beq	12858 <main@@Base+0x2c8>
   12854:	b	12898 <main@@Base+0x308>
   12858:	b	1285c <main@@Base+0x2cc>
   1285c:	ldr	r0, [sp, #56]	; 0x38
   12860:	add	r0, r0, #1
   12864:	str	r0, [sp, #56]	; 0x38
   12868:	b	126c0 <main@@Base+0x130>
   1286c:	bl	129d8 <main@@Base+0x448>
   12870:	ldr	lr, [pc, #104]	; 128e0 <main@@Base+0x350>
   12874:	add	r0, pc, lr
   12878:	vstr	d0, [sp, #64]	; 0x40
   1287c:	vldr	d0, [sp, #72]	; 0x48
   12880:	vldr	d1, [sp, #64]	; 0x40
   12884:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12888:	ldr	r2, [sp, #60]	; 0x3c
   1288c:	movw	r3, #0
   12890:	bl	13060 <main@@Base+0xad0>
   12894:	str	r0, [sp, #4]
   12898:	ldr	r0, [sp, #92]	; 0x5c
   1289c:	bl	142c4 <flatcc_builder_clear@@Base>
   128a0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   128a4:	bl	123d4 <free@plt>
   128a8:	ldr	r0, [sp, #52]	; 0x34
   128ac:	cmp	r0, #0
   128b0:	beq	128c4 <main@@Base+0x334>
   128b4:	ldr	r0, [pc, #76]	; 12908 <main@@Base+0x378>
   128b8:	add	r0, pc, r0
   128bc:	bl	123bc <printf@plt>
   128c0:	str	r0, [sp]
   128c4:	ldr	r0, [sp, #52]	; 0x34
   128c8:	sub	sp, fp, #8
   128cc:	pop	{r4, r5, fp, pc}
   128d0:	andeq	r8, r0, ip, lsl r2
   128d4:	andeq	r8, r0, sl, lsr #4
   128d8:	muleq	r0, fp, r1
   128dc:	muleq	r0, r9, r1
   128e0:	andeq	r8, r0, r4, rrx
   128e4:	andeq	r8, r0, lr, lsl r1
   128e8:	andeq	r8, r0, pc, lsl r1
   128ec:	andeq	r8, r0, r9, ror r1
   128f0:	strheq	r8, [r0], -lr
   128f4:	strheq	r8, [r0], -pc	; <UNPREDICTABLE>
   128f8:	andeq	r8, r0, r9, lsl r1
   128fc:	andeq	r8, r0, lr, lsr r0
   12900:	andeq	r8, r0, pc, lsr r0
   12904:	muleq	r0, r9, r0
   12908:	andeq	r8, r0, r9, asr #32
   1290c:	andeq	r8, r0, r9, lsr r1
   12910:	push	{fp, lr}
   12914:	mov	fp, sp
   12918:	sub	sp, sp, #32
   1291c:	str	r0, [fp, #-4]
   12920:	ldr	r0, [fp, #-4]
   12924:	bl	14298 <flatcc_builder_reset@@Base>
   12928:	ldr	lr, [fp, #-4]
   1292c:	str	r0, [fp, #-12]
   12930:	mov	r0, lr
   12934:	bl	132ec <main@@Base+0xd5c>
   12938:	ldr	lr, [pc, #132]	; 129c4 <main@@Base+0x434>
   1293c:	add	r1, pc, lr
   12940:	ldr	lr, [fp, #-4]
   12944:	str	r0, [sp, #16]
   12948:	mov	r0, lr
   1294c:	bl	1333c <main@@Base+0xdac>
   12950:	ldr	r1, [fp, #-4]
   12954:	str	r0, [sp, #12]
   12958:	mov	r0, r1
   1295c:	bl	13388 <main@@Base+0xdf8>
   12960:	str	r0, [fp, #-8]
   12964:	ldr	r0, [fp, #-8]
   12968:	cmp	r0, #0
   1296c:	beq	12974 <main@@Base+0x3e4>
   12970:	b	12994 <main@@Base+0x404>
   12974:	ldr	r0, [pc, #76]	; 129c8 <main@@Base+0x438>
   12978:	add	r0, pc, r0
   1297c:	ldr	r1, [pc, #72]	; 129cc <main@@Base+0x43c>
   12980:	add	r1, pc, r1
   12984:	ldr	r2, [pc, #68]	; 129d0 <main@@Base+0x440>
   12988:	add	r3, pc, r2
   1298c:	movw	r2, #56	; 0x38
   12990:	bl	12494 <__assert_fail@plt>
   12994:	ldr	r0, [fp, #-4]
   12998:	ldr	r1, [fp, #-8]
   1299c:	bl	13430 <main@@Base+0xea0>
   129a0:	ldr	r1, [fp, #-4]
   129a4:	str	r0, [sp, #8]
   129a8:	mov	r0, r1
   129ac:	bl	1349c <main@@Base+0xf0c>
   129b0:	movw	r1, #0
   129b4:	str	r0, [sp, #4]
   129b8:	mov	r0, r1
   129bc:	mov	sp, fp
   129c0:	pop	{fp, pc}
   129c4:	andeq	r7, r0, sp, lsl #30
   129c8:	muleq	r0, fp, pc	; <UNPREDICTABLE>
   129cc:	ldrdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   129d0:	andeq	r7, r0, lr, lsl #31
   129d4:	nop	{0}
   129d8:	push	{fp, lr}
   129dc:	mov	fp, sp
   129e0:	sub	sp, sp, #16
   129e4:	add	r0, sp, #8
   129e8:	movw	r1, #0
   129ec:	bl	12410 <gettimeofday@plt>
   129f0:	ldr	r1, [pc, #120]	; 12a70 <main@@Base+0x4e0>
   129f4:	add	r1, pc, r1
   129f8:	ldr	r1, [r1]
   129fc:	cmp	r1, #0
   12a00:	str	r0, [sp, #4]
   12a04:	bne	12a20 <main@@Base+0x490>
   12a08:	ldr	r0, [pc, #100]	; 12a74 <main@@Base+0x4e4>
   12a0c:	add	r0, pc, r0
   12a10:	ldr	r1, [sp, #8]
   12a14:	str	r1, [r0]
   12a18:	ldr	r1, [sp, #12]
   12a1c:	str	r1, [r0, #4]
   12a20:	vldr	d16, [pc, #64]	; 12a68 <main@@Base+0x4d8>
   12a24:	ldr	r0, [pc, #76]	; 12a78 <main@@Base+0x4e8>
   12a28:	add	r0, pc, r0
   12a2c:	ldr	r1, [sp, #8]
   12a30:	ldr	r2, [r0]
   12a34:	sub	r1, r1, r2
   12a38:	vmov	s0, r1
   12a3c:	vcvt.f64.s32	d17, s0
   12a40:	ldr	r1, [sp, #12]
   12a44:	ldr	r0, [r0, #4]
   12a48:	sub	r0, r1, r0
   12a4c:	vmov	s0, r0
   12a50:	vcvt.f64.s32	d18, s0
   12a54:	vdiv.f64	d16, d18, d16
   12a58:	vadd.f64	d0, d17, d16
   12a5c:	mov	sp, fp
   12a60:	pop	{fp, pc}
   12a64:	nop	{0}
   12a68:	andeq	r0, r0, r0
   12a6c:	smlawbmi	lr, r0, r4, r8
   12a70:	andeq	sl, r1, r4, ror #20
   12a74:	andeq	sl, r1, ip, asr #20
   12a78:	andeq	sl, r1, r0, lsr sl
   12a7c:	push	{fp, lr}
   12a80:	mov	fp, sp
   12a84:	sub	sp, sp, #16
   12a88:	ldr	r1, [pc, #100]	; 12af4 <main@@Base+0x564>
   12a8c:	add	r1, pc, r1
   12a90:	str	r0, [fp, #-4]
   12a94:	str	r1, [sp, #8]
   12a98:	ldr	r0, [fp, #-4]
   12a9c:	movw	r1, #0
   12aa0:	cmp	r0, r1
   12aa4:	beq	12abc <main@@Base+0x52c>
   12aa8:	ldr	r0, [fp, #-4]
   12aac:	ldr	r1, [sp, #8]
   12ab0:	bl	13988 <main@@Base+0x13f8>
   12ab4:	cmp	r0, #0
   12ab8:	bne	12ac8 <main@@Base+0x538>
   12abc:	movw	r0, #0
   12ac0:	str	r0, [sp, #4]
   12ac4:	b	12ae8 <main@@Base+0x558>
   12ac8:	ldr	r0, [fp, #-4]
   12acc:	ldr	r1, [fp, #-4]
   12ad0:	str	r0, [sp]
   12ad4:	mov	r0, r1
   12ad8:	bl	13a34 <main@@Base+0x14a4>
   12adc:	ldr	r1, [sp]
   12ae0:	add	r0, r1, r0
   12ae4:	str	r0, [sp, #4]
   12ae8:	ldr	r0, [sp, #4]
   12aec:	mov	sp, fp
   12af0:	pop	{fp, pc}
   12af4:			; <UNDEFINED> instruction: 0x00007eb6
   12af8:	push	{fp, lr}
   12afc:	mov	fp, sp
   12b00:	sub	sp, sp, #24
   12b04:	str	r0, [fp, #-4]
   12b08:	movw	r0, #0
   12b0c:	strh	r0, [fp, #-10]
   12b10:	ldr	r0, [fp, #-4]
   12b14:	movw	r1, #0
   12b18:	cmp	r0, r1
   12b1c:	beq	12b28 <main@@Base+0x598>
   12b20:	b	12b24 <main@@Base+0x594>
   12b24:	b	12b48 <main@@Base+0x5b8>
   12b28:	ldr	r0, [pc, #208]	; 12c00 <main@@Base+0x670>
   12b2c:	add	r0, pc, r0
   12b30:	ldr	r1, [pc, #204]	; 12c04 <main@@Base+0x674>
   12b34:	add	r1, pc, r1
   12b38:	ldr	r2, [pc, #200]	; 12c08 <main@@Base+0x678>
   12b3c:	add	r3, pc, r2
   12b40:	movw	r2, #699	; 0x2bb
   12b44:	bl	12494 <__assert_fail@plt>
   12b48:	mov	r0, #3
   12b4c:	strh	r0, [sp, #12]
   12b50:	ldr	r0, [fp, #-4]
   12b54:	str	r0, [sp, #4]
   12b58:	bl	13ab8 <main@@Base+0x1528>
   12b5c:	ldr	lr, [sp, #4]
   12b60:	sub	r0, lr, r0
   12b64:	str	r0, [sp, #8]
   12b68:	ldr	r0, [sp, #8]
   12b6c:	bl	13adc <main@@Base+0x154c>
   12b70:	ldrh	lr, [sp, #12]
   12b74:	add	lr, lr, #3
   12b78:	lsl	lr, lr, #1
   12b7c:	cmp	r0, lr
   12b80:	bcc	12b9c <main@@Base+0x60c>
   12b84:	ldr	r0, [sp, #8]
   12b88:	ldrh	r1, [sp, #12]
   12b8c:	add	r0, r0, r1, lsl #1
   12b90:	add	r0, r0, #4
   12b94:	bl	13adc <main@@Base+0x154c>
   12b98:	strh	r0, [fp, #-10]
   12b9c:	ldrsh	r0, [fp, #-10]
   12ba0:	cmp	r0, #0
   12ba4:	beq	12be0 <main@@Base+0x650>
   12ba8:	ldr	r0, [fp, #-4]
   12bac:	ldrh	r1, [fp, #-10]
   12bb0:	add	r0, r0, r1
   12bb4:	str	r0, [fp, #-8]
   12bb8:	ldr	r0, [fp, #-8]
   12bbc:	add	r0, r0, #4
   12bc0:	ldr	r1, [fp, #-8]
   12bc4:	str	r0, [sp]
   12bc8:	mov	r0, r1
   12bcc:	bl	13a34 <main@@Base+0x14a4>
   12bd0:	ldr	r1, [sp]
   12bd4:	add	r0, r1, r0
   12bd8:	mov	sp, fp
   12bdc:	pop	{fp, pc}
   12be0:	ldr	r0, [pc, #36]	; 12c0c <main@@Base+0x67c>
   12be4:	add	r0, pc, r0
   12be8:	ldr	r1, [pc, #32]	; 12c10 <main@@Base+0x680>
   12bec:	add	r1, pc, r1
   12bf0:	ldr	r2, [pc, #28]	; 12c14 <main@@Base+0x684>
   12bf4:	add	r3, pc, r2
   12bf8:	movw	r2, #699	; 0x2bb
   12bfc:	bl	12494 <__assert_fail@plt>
   12c00:	andeq	r7, r0, lr, ror #31
   12c04:	andeq	r8, r0, ip
   12c08:	andeq	r8, r0, sl, ror r0
   12c0c:	andeq	r8, r0, r3, lsr #32
   12c10:	andeq	r7, r0, r4, asr pc
   12c14:	andeq	r7, r0, r2, asr #31
   12c18:	push	{fp, lr}
   12c1c:	mov	fp, sp
   12c20:	sub	sp, sp, #32
   12c24:	str	r0, [fp, #-8]
   12c28:	movw	r0, #0
   12c2c:	strh	r0, [fp, #-14]
   12c30:	ldr	r0, [fp, #-8]
   12c34:	movw	r1, #0
   12c38:	cmp	r0, r1
   12c3c:	beq	12c48 <main@@Base+0x6b8>
   12c40:	b	12c44 <main@@Base+0x6b4>
   12c44:	b	12c68 <main@@Base+0x6d8>
   12c48:	ldr	r0, [pc, #196]	; 12d14 <main@@Base+0x784>
   12c4c:	add	r0, pc, r0
   12c50:	ldr	r1, [pc, #192]	; 12d18 <main@@Base+0x788>
   12c54:	add	r1, pc, r1
   12c58:	ldr	r2, [pc, #188]	; 12d1c <main@@Base+0x78c>
   12c5c:	add	r3, pc, r2
   12c60:	movw	r2, #711	; 0x2c7
   12c64:	bl	12494 <__assert_fail@plt>
   12c68:	mov	r0, #11
   12c6c:	strh	r0, [sp, #16]
   12c70:	ldr	r0, [fp, #-8]
   12c74:	str	r0, [sp, #8]
   12c78:	bl	13ab8 <main@@Base+0x1528>
   12c7c:	ldr	lr, [sp, #8]
   12c80:	sub	r0, lr, r0
   12c84:	str	r0, [sp, #12]
   12c88:	ldr	r0, [sp, #12]
   12c8c:	bl	13adc <main@@Base+0x154c>
   12c90:	ldrh	lr, [sp, #16]
   12c94:	add	lr, lr, #3
   12c98:	lsl	lr, lr, #1
   12c9c:	cmp	r0, lr
   12ca0:	bcc	12cbc <main@@Base+0x72c>
   12ca4:	ldr	r0, [sp, #12]
   12ca8:	ldrh	r1, [sp, #16]
   12cac:	add	r0, r0, r1, lsl #1
   12cb0:	add	r0, r0, #4
   12cb4:	bl	13adc <main@@Base+0x154c>
   12cb8:	strh	r0, [fp, #-14]
   12cbc:	ldrsh	r0, [fp, #-14]
   12cc0:	cmp	r0, #0
   12cc4:	beq	12d00 <main@@Base+0x770>
   12cc8:	ldr	r0, [fp, #-8]
   12ccc:	ldrh	r1, [fp, #-14]
   12cd0:	add	r0, r0, r1
   12cd4:	str	r0, [fp, #-12]
   12cd8:	ldr	r0, [fp, #-12]
   12cdc:	add	r0, r0, #4
   12ce0:	ldr	r1, [fp, #-12]
   12ce4:	str	r0, [sp, #4]
   12ce8:	mov	r0, r1
   12cec:	bl	13a34 <main@@Base+0x14a4>
   12cf0:	ldr	r1, [sp, #4]
   12cf4:	add	r0, r1, r0
   12cf8:	str	r0, [fp, #-4]
   12cfc:	b	12d08 <main@@Base+0x778>
   12d00:	movw	r0, #0
   12d04:	str	r0, [fp, #-4]
   12d08:	ldr	r0, [fp, #-4]
   12d0c:	mov	sp, fp
   12d10:	pop	{fp, pc}
   12d14:	andeq	r7, r0, lr, asr #29
   12d18:	andeq	r7, r0, ip, ror #29
   12d1c:	andeq	r7, r0, ip, asr #31
   12d20:	push	{fp, lr}
   12d24:	mov	fp, sp
   12d28:	sub	sp, sp, #8
   12d2c:	str	r0, [sp, #4]
   12d30:	ldr	r0, [sp, #4]
   12d34:	movw	r1, #0
   12d38:	cmp	r0, r1
   12d3c:	beq	12d58 <main@@Base+0x7c8>
   12d40:	ldr	r0, [sp, #4]
   12d44:	mvn	r1, #3
   12d48:	add	r0, r0, r1
   12d4c:	bl	13a34 <main@@Base+0x14a4>
   12d50:	str	r0, [sp]
   12d54:	b	12d64 <main@@Base+0x7d4>
   12d58:	movw	r0, #0
   12d5c:	str	r0, [sp]
   12d60:	b	12d64 <main@@Base+0x7d4>
   12d64:	ldr	r0, [sp]
   12d68:	mov	sp, fp
   12d6c:	pop	{fp, pc}
   12d70:	push	{fp, lr}
   12d74:	mov	fp, sp
   12d78:	sub	sp, sp, #40	; 0x28
   12d7c:	str	r0, [fp, #-4]
   12d80:	str	r1, [fp, #-8]
   12d84:	ldr	r0, [fp, #-8]
   12d88:	bl	12af8 <main@@Base+0x568>
   12d8c:	str	r0, [fp, #-16]
   12d90:	ldr	r0, [fp, #-8]
   12d94:	bl	13b2c <main@@Base+0x159c>
   12d98:	str	r0, [sp, #20]
   12d9c:	ldr	r0, [fp, #-16]
   12da0:	bl	13c34 <main@@Base+0x16a4>
   12da4:	cmp	r0, #700	; 0x2bc
   12da8:	beq	12dcc <main@@Base+0x83c>
   12dac:	ldr	r0, [pc, #520]	; 12fbc <main@@Base+0xa2c>
   12db0:	add	r0, pc, r0
   12db4:	ldr	r1, [pc, #516]	; 12fc0 <main@@Base+0xa30>
   12db8:	add	r1, pc, r1
   12dbc:	ldr	r2, [pc, #512]	; 12fc4 <main@@Base+0xa34>
   12dc0:	add	r3, pc, r2
   12dc4:	movw	r2, #74	; 0x4a
   12dc8:	bl	12494 <__assert_fail@plt>
   12dcc:	ldr	r0, [sp, #20]
   12dd0:	bl	13c84 <main@@Base+0x16f4>
   12dd4:	ldr	lr, [pc, #428]	; 12f88 <main@@Base+0x9f8>
   12dd8:	cmp	r0, lr
   12ddc:	beq	12e00 <main@@Base+0x870>
   12de0:	ldr	r0, [pc, #456]	; 12fb0 <main@@Base+0xa20>
   12de4:	add	r0, pc, r0
   12de8:	ldr	r1, [pc, #452]	; 12fb4 <main@@Base+0xa24>
   12dec:	add	r1, pc, r1
   12df0:	ldr	r2, [pc, #448]	; 12fb8 <main@@Base+0xa28>
   12df4:	add	r3, pc, r2
   12df8:	movw	r2, #78	; 0x4e
   12dfc:	bl	12494 <__assert_fail@plt>
   12e00:	movw	r0, #0
   12e04:	str	r0, [fp, #-12]
   12e08:	ldr	r0, [fp, #-12]
   12e0c:	cmp	r0, #100	; 0x64
   12e10:	bcs	12f08 <main@@Base+0x978>
   12e14:	ldr	r0, [fp, #-16]
   12e18:	ldr	r1, [fp, #-12]
   12e1c:	movw	r2, #7
   12e20:	mul	r1, r1, r2
   12e24:	add	r0, r0, r1
   12e28:	ldr	r1, [pc, #408]	; 12fc8 <main@@Base+0xa38>
   12e2c:	add	r1, pc, r1
   12e30:	mov	r2, #7
   12e34:	bl	123ec <memcmp@plt>
   12e38:	cmp	r0, #0
   12e3c:	beq	12ef4 <main@@Base+0x964>
   12e40:	ldr	r1, [fp, #-12]
   12e44:	ldr	r0, [fp, #-16]
   12e48:	movw	r2, #0
   12e4c:	cmp	r0, r2
   12e50:	str	r1, [sp, #16]
   12e54:	beq	12e64 <main@@Base+0x8d4>
   12e58:	ldr	r0, [fp, #-16]
   12e5c:	str	r0, [sp, #12]
   12e60:	b	12e74 <main@@Base+0x8e4>
   12e64:	ldr	r0, [pc, #300]	; 12f98 <main@@Base+0xa08>
   12e68:	add	r0, pc, r0
   12e6c:	str	r0, [sp, #12]
   12e70:	b	12e74 <main@@Base+0x8e4>
   12e74:	ldr	r0, [sp, #12]
   12e78:	ldr	r1, [pc, #300]	; 12fac <main@@Base+0xa1c>
   12e7c:	add	r1, pc, r1
   12e80:	str	r0, [sp, #8]
   12e84:	mov	r0, r1
   12e88:	ldr	r1, [sp, #16]
   12e8c:	ldr	r2, [sp, #8]
   12e90:	bl	123bc <printf@plt>
   12e94:	ldr	r1, [pc, #268]	; 12fa8 <main@@Base+0xa18>
   12e98:	add	r1, pc, r1
   12e9c:	ldr	r2, [fp, #-16]
   12ea0:	ldr	lr, [fp, #-12]
   12ea4:	movw	r3, #7
   12ea8:	mul	r3, lr, r3
   12eac:	add	r2, r2, r3
   12eb0:	ldr	r3, [fp, #-4]
   12eb4:	sub	r2, r2, r3
   12eb8:	str	r0, [sp, #4]
   12ebc:	mov	r0, r1
   12ec0:	mov	r1, r2
   12ec4:	bl	123bc <printf@plt>
   12ec8:	ldr	r1, [pc, #204]	; 12f9c <main@@Base+0xa0c>
   12ecc:	add	r1, pc, r1
   12ed0:	ldr	r2, [pc, #200]	; 12fa0 <main@@Base+0xa10>
   12ed4:	add	r2, pc, r2
   12ed8:	ldr	r3, [pc, #196]	; 12fa4 <main@@Base+0xa14>
   12edc:	add	r3, pc, r3
   12ee0:	str	r0, [sp]
   12ee4:	mov	r0, r1
   12ee8:	mov	r1, r2
   12eec:	movw	r2, #85	; 0x55
   12ef0:	bl	12494 <__assert_fail@plt>
   12ef4:	b	12ef8 <main@@Base+0x968>
   12ef8:	ldr	r0, [fp, #-12]
   12efc:	add	r0, r0, #1
   12f00:	str	r0, [fp, #-12]
   12f04:	b	12e08 <main@@Base+0x878>
   12f08:	movw	r0, #0
   12f0c:	str	r0, [fp, #-12]
   12f10:	ldr	r0, [fp, #-12]
   12f14:	cmp	r0, #100	; 0x64
   12f18:	bcs	12f7c <main@@Base+0x9ec>
   12f1c:	ldr	r0, [sp, #20]
   12f20:	ldr	r1, [fp, #-12]
   12f24:	movw	r2, #1000	; 0x3e8
   12f28:	mul	r1, r1, r2
   12f2c:	add	r0, r0, r1
   12f30:	ldr	r1, [pc, #148]	; 12fcc <main@@Base+0xa3c>
   12f34:	add	r1, pc, r1
   12f38:	mov	r2, #1000	; 0x3e8
   12f3c:	bl	123ec <memcmp@plt>
   12f40:	cmp	r0, #0
   12f44:	beq	12f68 <main@@Base+0x9d8>
   12f48:	ldr	r0, [pc, #60]	; 12f8c <main@@Base+0x9fc>
   12f4c:	add	r0, pc, r0
   12f50:	ldr	r1, [pc, #56]	; 12f90 <main@@Base+0xa00>
   12f54:	add	r1, pc, r1
   12f58:	ldr	r2, [pc, #52]	; 12f94 <main@@Base+0xa04>
   12f5c:	add	r3, pc, r2
   12f60:	movw	r2, #91	; 0x5b
   12f64:	bl	12494 <__assert_fail@plt>
   12f68:	b	12f6c <main@@Base+0x9dc>
   12f6c:	ldr	r0, [fp, #-12]
   12f70:	add	r0, r0, #1
   12f74:	str	r0, [fp, #-12]
   12f78:	b	12f10 <main@@Base+0x980>
   12f7c:	movw	r0, #0
   12f80:	mov	sp, fp
   12f84:	pop	{fp, pc}
   12f88:	andeq	r8, r1, r0, lsr #13
   12f8c:	muleq	r0, r5, r3
   12f90:	andeq	r7, r0, fp, lsl #18
   12f94:	andeq	r7, r0, r2, lsr sp
   12f98:	andeq	r7, r0, r7, lsl #29
   12f9c:	andeq	r9, r0, r5, lsl r4
   12fa0:	andeq	r7, r0, fp, lsl #19
   12fa4:			; <UNDEFINED> instruction: 0x00007db2
   12fa8:	andeq	r7, r0, ip, asr lr
   12fac:	andeq	r7, r0, r3, asr lr
   12fb0:	strdeq	r9, [r0], -sp
   12fb4:	andeq	r7, r0, r3, ror sl
   12fb8:	muleq	r0, sl, lr
   12fbc:	andeq	r9, r0, r1, lsr r5
   12fc0:	andeq	r7, r0, r7, lsr #21
   12fc4:	andeq	r7, r0, lr, asr #29
   12fc8:	andeq	r7, r0, r2, ror #22
   12fcc:	andeq	sl, r1, ip, lsr r1
   12fd0:	push	{fp, lr}
   12fd4:	mov	fp, sp
   12fd8:	sub	sp, sp, #16
   12fdc:	str	r0, [fp, #-4]
   12fe0:	str	r1, [sp, #8]
   12fe4:	ldr	r0, [fp, #-4]
   12fe8:	ldr	r1, [sp, #8]
   12fec:	add	r0, r0, r1, lsl #2
   12ff0:	str	r0, [sp, #4]
   12ff4:	ldr	r0, [fp, #-4]
   12ff8:	bl	13ca4 <main@@Base+0x1714>
   12ffc:	ldr	r1, [sp, #8]
   13000:	cmp	r0, r1
   13004:	bls	13010 <main@@Base+0xa80>
   13008:	b	1300c <main@@Base+0xa7c>
   1300c:	b	13030 <main@@Base+0xaa0>
   13010:	ldr	r0, [pc, #60]	; 13054 <main@@Base+0xac4>
   13014:	add	r0, pc, r0
   13018:	ldr	r1, [pc, #56]	; 13058 <main@@Base+0xac8>
   1301c:	add	r1, pc, r1
   13020:	ldr	r2, [pc, #52]	; 1305c <main@@Base+0xacc>
   13024:	add	r3, pc, r2
   13028:	movw	r2, #693	; 0x2b5
   1302c:	bl	12494 <__assert_fail@plt>
   13030:	ldr	r0, [sp, #4]
   13034:	ldr	r1, [sp, #4]
   13038:	str	r0, [sp]
   1303c:	mov	r0, r1
   13040:	bl	13a34 <main@@Base+0x14a4>
   13044:	ldr	r1, [sp]
   13048:	add	r0, r1, r0
   1304c:	mov	sp, fp
   13050:	pop	{fp, pc}
   13054:	andeq	r7, r0, r9, asr sp
   13058:	andeq	r7, r0, r4, lsr #22
   1305c:	andeq	r7, r0, r0, lsl #27
   13060:	push	{fp, lr}
   13064:	mov	fp, sp
   13068:	sub	sp, sp, #104	; 0x68
   1306c:	ldr	ip, [pc, #608]	; 132d4 <main@@Base+0xd44>
   13070:	add	ip, pc, ip
   13074:	str	r0, [fp, #-4]
   13078:	vstr	d0, [fp, #-16]
   1307c:	vstr	d1, [fp, #-24]	; 0xffffffe8
   13080:	str	r1, [fp, #-28]	; 0xffffffe4
   13084:	str	r2, [fp, #-32]	; 0xffffffe0
   13088:	str	r3, [fp, #-36]	; 0xffffffdc
   1308c:	vldr	d0, [fp, #-24]	; 0xffffffe8
   13090:	vldr	d1, [fp, #-16]
   13094:	vsub.f64	d0, d0, d1
   13098:	vstr	d0, [fp, #-48]	; 0xffffffd0
   1309c:	ldr	r1, [fp, #-4]
   130a0:	mov	r0, ip
   130a4:	bl	123bc <printf@plt>
   130a8:	ldr	r1, [pc, #544]	; 132d0 <main@@Base+0xd40>
   130ac:	add	r1, pc, r1
   130b0:	vldr	d0, [fp, #-48]	; 0xffffffd0
   130b4:	str	r0, [sp, #44]	; 0x2c
   130b8:	mov	r0, r1
   130bc:	vmov	r2, r3, d0
   130c0:	bl	123bc <printf@plt>
   130c4:	ldr	r1, [pc, #512]	; 132cc <main@@Base+0xd3c>
   130c8:	add	r1, pc, r1
   130cc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   130d0:	str	r0, [sp, #40]	; 0x28
   130d4:	mov	r0, r1
   130d8:	mov	r1, r2
   130dc:	bl	123bc <printf@plt>
   130e0:	ldr	r1, [pc, #480]	; 132c8 <main@@Base+0xd38>
   130e4:	add	r1, pc, r1
   130e8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   130ec:	str	r0, [sp, #36]	; 0x24
   130f0:	mov	r0, r1
   130f4:	mov	r1, r2
   130f8:	bl	123bc <printf@plt>
   130fc:	ldr	r1, [pc, #448]	; 132c4 <main@@Base+0xd34>
   13100:	add	r1, pc, r1
   13104:	vldr	d0, [pc, #412]	; 132a8 <main@@Base+0xd18>
   13108:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1310c:	vmov	s4, r2
   13110:	vcvt.f64.s32	d1, s4
   13114:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13118:	vmov	s4, r2
   1311c:	vcvt.f64.u32	d16, s4
   13120:	vmul.f64	d16, d1, d16
   13124:	vdiv.f64	d16, d16, d0
   13128:	vldr	d0, [fp, #-48]	; 0xffffffd0
   1312c:	vdiv.f64	d16, d16, d0
   13130:	str	r0, [sp, #32]
   13134:	mov	r0, r1
   13138:	vmov	r2, r3, d16
   1313c:	bl	123bc <printf@plt>
   13140:	ldr	r1, [pc, #376]	; 132c0 <main@@Base+0xd30>
   13144:	add	r1, pc, r1
   13148:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1314c:	vmov	s4, r2
   13150:	vcvt.f64.s32	d16, s4
   13154:	vldr	d0, [fp, #-48]	; 0xffffffd0
   13158:	vdiv.f64	d16, d16, d0
   1315c:	str	r0, [sp, #28]
   13160:	mov	r0, r1
   13164:	vmov	r2, r3, d16
   13168:	bl	123bc <printf@plt>
   1316c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13170:	movw	r2, #0
   13174:	cmp	r1, r2
   13178:	str	r0, [sp, #24]
   1317c:	beq	131b0 <main@@Base+0xc20>
   13180:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13184:	cmp	r0, #1
   13188:	beq	131b0 <main@@Base+0xc20>
   1318c:	ldr	r0, [pc, #324]	; 132d8 <main@@Base+0xd48>
   13190:	add	r0, pc, r0
   13194:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13198:	vldr	d16, [fp, #-48]	; 0xffffffd0
   1319c:	vmov.f64	d17, #112	; 0x3f800000  1.0
   131a0:	vdiv.f64	d16, d17, d16
   131a4:	vmov	r2, r3, d16
   131a8:	bl	123bc <printf@plt>
   131ac:	str	r0, [sp, #20]
   131b0:	vldr	d16, [pc, #248]	; 132b0 <main@@Base+0xd20>
   131b4:	vldr	d17, [pc, #252]	; 132b8 <main@@Base+0xd28>
   131b8:	vldr	d18, [fp, #-48]	; 0xffffffd0
   131bc:	vmul.f64	d17, d18, d17
   131c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   131c4:	vmov	s0, r0
   131c8:	vcvt.f64.s32	d18, s0
   131cc:	vdiv.f64	d17, d17, d18
   131d0:	vstr	d17, [sp, #48]	; 0x30
   131d4:	vldr	d17, [sp, #48]	; 0x30
   131d8:	vcmpe.f64	d17, d16
   131dc:	vmrs	APSR_nzcv, fpscr
   131e0:	bpl	13200 <main@@Base+0xc70>
   131e4:	ldr	r0, [pc, #252]	; 132e8 <main@@Base+0xd58>
   131e8:	add	r0, pc, r0
   131ec:	vldr	d16, [sp, #48]	; 0x30
   131f0:	vmov	r2, r3, d16
   131f4:	bl	123bc <printf@plt>
   131f8:	str	r0, [sp, #16]
   131fc:	b	13298 <main@@Base+0xd08>
   13200:	vldr	d16, [pc, #160]	; 132a8 <main@@Base+0xd18>
   13204:	vldr	d17, [sp, #48]	; 0x30
   13208:	vcmpe.f64	d17, d16
   1320c:	vmrs	APSR_nzcv, fpscr
   13210:	bpl	13238 <main@@Base+0xca8>
   13214:	ldr	r0, [pc, #200]	; 132e4 <main@@Base+0xd54>
   13218:	add	r0, pc, r0
   1321c:	vldr	d16, [pc, #140]	; 132b0 <main@@Base+0xd20>
   13220:	vldr	d17, [sp, #48]	; 0x30
   13224:	vdiv.f64	d16, d17, d16
   13228:	vmov	r2, r3, d16
   1322c:	bl	123bc <printf@plt>
   13230:	str	r0, [sp, #12]
   13234:	b	13294 <main@@Base+0xd04>
   13238:	vldr	d16, [pc, #120]	; 132b8 <main@@Base+0xd28>
   1323c:	vldr	d17, [sp, #48]	; 0x30
   13240:	vcmpe.f64	d17, d16
   13244:	vmrs	APSR_nzcv, fpscr
   13248:	bpl	13270 <main@@Base+0xce0>
   1324c:	ldr	r0, [pc, #140]	; 132e0 <main@@Base+0xd50>
   13250:	add	r0, pc, r0
   13254:	vldr	d16, [pc, #76]	; 132a8 <main@@Base+0xd18>
   13258:	vldr	d17, [sp, #48]	; 0x30
   1325c:	vdiv.f64	d16, d17, d16
   13260:	vmov	r2, r3, d16
   13264:	bl	123bc <printf@plt>
   13268:	str	r0, [sp, #8]
   1326c:	b	13290 <main@@Base+0xd00>
   13270:	ldr	r0, [pc, #100]	; 132dc <main@@Base+0xd4c>
   13274:	add	r0, pc, r0
   13278:	vldr	d16, [pc, #56]	; 132b8 <main@@Base+0xd28>
   1327c:	vldr	d17, [sp, #48]	; 0x30
   13280:	vdiv.f64	d16, d17, d16
   13284:	vmov	r2, r3, d16
   13288:	bl	123bc <printf@plt>
   1328c:	str	r0, [sp, #4]
   13290:	b	13294 <main@@Base+0xd04>
   13294:	b	13298 <main@@Base+0xd08>
   13298:	movw	r0, #0
   1329c:	mov	sp, fp
   132a0:	pop	{fp, pc}
   132a4:	nop	{0}
   132a8:	andeq	r0, r0, r0
   132ac:	smlawbmi	lr, r0, r4, r8
   132b0:	andeq	r0, r0, r0
   132b4:	addmi	r4, pc, r0
   132b8:	andeq	r0, r0, r0
   132bc:	bicmi	ip, sp, r5, ror #26
   132c0:	andeq	r7, r0, r5, lsr #26
   132c4:	andeq	r7, r0, r1, asr sp
   132c8:	andeq	r7, r0, sl, asr sp
   132cc:	andeq	r7, r0, r6, ror #26
   132d0:	andeq	r7, r0, sl, ror #26
   132d4:	muleq	r0, r7, sp
   132d8:	strdeq	r7, [r0], -sl
   132dc:	andeq	r7, r0, r2, lsl #25
   132e0:	andeq	r7, r0, lr, lsl #25
   132e4:	andeq	r7, r0, lr, lsr #25
   132e8:	andeq	r7, r0, r6, asr #25
   132ec:	push	{fp, lr}
   132f0:	mov	fp, sp
   132f4:	sub	sp, sp, #8
   132f8:	ldr	r1, [pc, #56]	; 13338 <main@@Base+0xda8>
   132fc:	add	r1, pc, r1
   13300:	str	r0, [sp, #4]
   13304:	ldr	r0, [sp, #4]
   13308:	bl	134dc <main@@Base+0xf4c>
   1330c:	cmp	r0, #0
   13310:	beq	13320 <main@@Base+0xd90>
   13314:	mvn	r0, #0
   13318:	str	r0, [sp]
   1331c:	b	1332c <main@@Base+0xd9c>
   13320:	ldr	r0, [sp, #4]
   13324:	bl	13510 <main@@Base+0xf80>
   13328:	str	r0, [sp]
   1332c:	ldr	r0, [sp]
   13330:	mov	sp, fp
   13334:	pop	{fp, pc}
   13338:	andeq	r7, r0, r6, asr #12
   1333c:	push	{fp, lr}
   13340:	mov	fp, sp
   13344:	sub	sp, sp, #16
   13348:	str	r0, [fp, #-4]
   1334c:	str	r1, [sp, #8]
   13350:	ldr	r0, [fp, #-4]
   13354:	ldr	r1, [fp, #-4]
   13358:	ldr	r2, [sp, #8]
   1335c:	str	r0, [sp, #4]
   13360:	mov	r0, r1
   13364:	mov	r1, r2
   13368:	bl	18d24 <flatcc_builder_create_string_str@@Base>
   1336c:	ldr	r1, [sp, #4]
   13370:	str	r0, [sp]
   13374:	mov	r0, r1
   13378:	ldr	r1, [sp]
   1337c:	bl	13534 <main@@Base+0xfa4>
   13380:	mov	sp, fp
   13384:	pop	{fp, pc}
   13388:	push	{fp, lr}
   1338c:	mov	fp, sp
   13390:	sub	sp, sp, #24
   13394:	str	r0, [fp, #-4]
   13398:	ldr	r0, [fp, #-4]
   1339c:	bl	135a0 <main@@Base+0x1010>
   133a0:	movw	lr, #0
   133a4:	str	lr, [fp, #-8]
   133a8:	str	r0, [sp, #8]
   133ac:	ldr	r0, [fp, #-8]
   133b0:	cmp	r0, #1000	; 0x3e8
   133b4:	bcs	13414 <main@@Base+0xe84>
   133b8:	ldr	r0, [fp, #-4]
   133bc:	bl	135c0 <main@@Base+0x1030>
   133c0:	str	r0, [sp, #12]
   133c4:	ldr	r0, [sp, #12]
   133c8:	cmp	r0, #0
   133cc:	beq	133d4 <main@@Base+0xe44>
   133d0:	b	133f4 <main@@Base+0xe64>
   133d4:	ldr	r0, [pc, #72]	; 13424 <main@@Base+0xe94>
   133d8:	add	r0, pc, r0
   133dc:	ldr	r1, [pc, #68]	; 13428 <main@@Base+0xe98>
   133e0:	add	r1, pc, r1
   133e4:	ldr	r2, [pc, #64]	; 1342c <main@@Base+0xe9c>
   133e8:	add	r3, pc, r2
   133ec:	movw	r2, #42	; 0x2a
   133f0:	bl	12494 <__assert_fail@plt>
   133f4:	ldr	r0, [fp, #-4]
   133f8:	ldr	r1, [sp, #12]
   133fc:	bl	136a8 <main@@Base+0x1118>
   13400:	str	r0, [sp, #4]
   13404:	ldr	r0, [fp, #-8]
   13408:	add	r0, r0, #1
   1340c:	str	r0, [fp, #-8]
   13410:	b	133ac <main@@Base+0xe1c>
   13414:	ldr	r0, [fp, #-4]
   13418:	bl	136f4 <main@@Base+0x1164>
   1341c:	mov	sp, fp
   13420:	pop	{fp, pc}
   13424:	andeq	r7, r0, pc, ror #10
   13428:	andeq	r7, r0, pc, ror r4
   1342c:	andeq	r7, r0, r1, ror #10
   13430:	push	{fp, lr}
   13434:	mov	fp, sp
   13438:	sub	sp, sp, #16
   1343c:	str	r0, [fp, #-4]
   13440:	str	r1, [sp, #8]
   13444:	ldr	r0, [sp, #8]
   13448:	cmp	r0, #0
   1344c:	beq	13484 <main@@Base+0xef4>
   13450:	ldr	r0, [fp, #-4]
   13454:	movw	r1, #11
   13458:	bl	18018 <flatcc_builder_table_add_offset@@Base>
   1345c:	str	r0, [sp, #4]
   13460:	movw	r1, #0
   13464:	cmp	r0, r1
   13468:	beq	13484 <main@@Base+0xef4>
   1346c:	ldr	r0, [sp, #8]
   13470:	ldr	r1, [sp, #4]
   13474:	str	r0, [r1]
   13478:	movw	r0, #0
   1347c:	str	r0, [sp]
   13480:	b	13490 <main@@Base+0xf00>
   13484:	mvn	r0, #0
   13488:	str	r0, [sp]
   1348c:	b	13490 <main@@Base+0xf00>
   13490:	ldr	r0, [sp]
   13494:	mov	sp, fp
   13498:	pop	{fp, pc}
   1349c:	push	{fp, lr}
   134a0:	mov	fp, sp
   134a4:	sub	sp, sp, #16
   134a8:	str	r0, [fp, #-4]
   134ac:	ldr	r0, [fp, #-4]
   134b0:	ldr	r1, [fp, #-4]
   134b4:	str	r0, [sp, #8]
   134b8:	mov	r0, r1
   134bc:	bl	13834 <main@@Base+0x12a4>
   134c0:	ldr	r1, [sp, #8]
   134c4:	str	r0, [sp, #4]
   134c8:	mov	r0, r1
   134cc:	ldr	r1, [sp, #4]
   134d0:	bl	13960 <main@@Base+0x13d0>
   134d4:	mov	sp, fp
   134d8:	pop	{fp, pc}
   134dc:	push	{fp, lr}
   134e0:	mov	fp, sp
   134e4:	sub	sp, sp, #8
   134e8:	str	r0, [sp, #4]
   134ec:	str	r1, [sp]
   134f0:	ldr	r0, [sp, #4]
   134f4:	ldr	r1, [sp]
   134f8:	movw	r2, #0
   134fc:	uxth	r2, r2
   13500:	movw	r3, #0
   13504:	bl	1515c <flatcc_builder_start_buffer@@Base>
   13508:	mov	sp, fp
   1350c:	pop	{fp, pc}
   13510:	push	{fp, lr}
   13514:	mov	fp, sp
   13518:	sub	sp, sp, #8
   1351c:	str	r0, [sp, #4]
   13520:	ldr	r0, [sp, #4]
   13524:	movw	r1, #36	; 0x24
   13528:	bl	16890 <flatcc_builder_start_table@@Base>
   1352c:	mov	sp, fp
   13530:	pop	{fp, pc}
   13534:	push	{fp, lr}
   13538:	mov	fp, sp
   1353c:	sub	sp, sp, #16
   13540:	str	r0, [fp, #-4]
   13544:	str	r1, [sp, #8]
   13548:	ldr	r0, [sp, #8]
   1354c:	cmp	r0, #0
   13550:	beq	13588 <main@@Base+0xff8>
   13554:	ldr	r0, [fp, #-4]
   13558:	movw	r1, #3
   1355c:	bl	18018 <flatcc_builder_table_add_offset@@Base>
   13560:	str	r0, [sp, #4]
   13564:	movw	r1, #0
   13568:	cmp	r0, r1
   1356c:	beq	13588 <main@@Base+0xff8>
   13570:	ldr	r0, [sp, #8]
   13574:	ldr	r1, [sp, #4]
   13578:	str	r0, [r1]
   1357c:	movw	r0, #0
   13580:	str	r0, [sp]
   13584:	b	13594 <main@@Base+0x1004>
   13588:	mvn	r0, #0
   1358c:	str	r0, [sp]
   13590:	b	13594 <main@@Base+0x1004>
   13594:	ldr	r0, [sp]
   13598:	mov	sp, fp
   1359c:	pop	{fp, pc}
   135a0:	push	{fp, lr}
   135a4:	mov	fp, sp
   135a8:	sub	sp, sp, #8
   135ac:	str	r0, [sp, #4]
   135b0:	ldr	r0, [sp, #4]
   135b4:	bl	164fc <flatcc_builder_start_offset_vector@@Base>
   135b8:	mov	sp, fp
   135bc:	pop	{fp, pc}
   135c0:	push	{fp, lr}
   135c4:	mov	fp, sp
   135c8:	sub	sp, sp, #40	; 0x28
   135cc:	str	r0, [fp, #-4]
   135d0:	ldr	r0, [fp, #-4]
   135d4:	bl	13510 <main@@Base+0xf80>
   135d8:	ldr	lr, [fp, #-4]
   135dc:	str	r0, [fp, #-12]
   135e0:	mov	r0, lr
   135e4:	bl	13714 <main@@Base+0x1184>
   135e8:	movw	lr, #0
   135ec:	str	lr, [fp, #-8]
   135f0:	str	r0, [fp, #-16]
   135f4:	ldr	r0, [fp, #-8]
   135f8:	cmp	r0, #100	; 0x64
   135fc:	bcs	13628 <main@@Base+0x1098>
   13600:	ldr	r0, [pc, #156]	; 136a4 <main@@Base+0x1114>
   13604:	add	r1, pc, r0
   13608:	ldr	r0, [fp, #-4]
   1360c:	movw	r2, #7
   13610:	bl	13734 <main@@Base+0x11a4>
   13614:	str	r0, [sp, #20]
   13618:	ldr	r0, [fp, #-8]
   1361c:	add	r0, r0, #1
   13620:	str	r0, [fp, #-8]
   13624:	b	135f4 <main@@Base+0x1064>
   13628:	ldr	r0, [fp, #-4]
   1362c:	bl	13764 <main@@Base+0x11d4>
   13630:	ldr	lr, [fp, #-4]
   13634:	str	r0, [sp, #16]
   13638:	mov	r0, lr
   1363c:	bl	137a4 <main@@Base+0x1214>
   13640:	movw	lr, #0
   13644:	str	lr, [fp, #-8]
   13648:	str	r0, [sp, #12]
   1364c:	ldr	r0, [fp, #-8]
   13650:	cmp	r0, #100	; 0x64
   13654:	bcs	13680 <main@@Base+0x10f0>
   13658:	ldr	r0, [pc, #64]	; 136a0 <main@@Base+0x1110>
   1365c:	add	r1, pc, r0
   13660:	ldr	r0, [fp, #-4]
   13664:	movw	r2, #1000	; 0x3e8
   13668:	bl	137c4 <main@@Base+0x1234>
   1366c:	str	r0, [sp, #8]
   13670:	ldr	r0, [fp, #-8]
   13674:	add	r0, r0, #1
   13678:	str	r0, [fp, #-8]
   1367c:	b	1364c <main@@Base+0x10bc>
   13680:	ldr	r0, [fp, #-4]
   13684:	bl	137f4 <main@@Base+0x1264>
   13688:	ldr	lr, [fp, #-4]
   1368c:	str	r0, [sp, #4]
   13690:	mov	r0, lr
   13694:	bl	13834 <main@@Base+0x12a4>
   13698:	mov	sp, fp
   1369c:	pop	{fp, pc}
   136a0:	andeq	r9, r1, r4, lsl sl
   136a4:	andeq	r7, r0, sl, lsl #7
   136a8:	push	{fp, lr}
   136ac:	mov	fp, sp
   136b0:	sub	sp, sp, #16
   136b4:	str	r0, [fp, #-4]
   136b8:	str	r1, [sp, #8]
   136bc:	ldr	r0, [sp, #8]
   136c0:	cmp	r0, #0
   136c4:	beq	136dc <main@@Base+0x114c>
   136c8:	ldr	r0, [fp, #-4]
   136cc:	ldr	r1, [sp, #8]
   136d0:	bl	15cec <flatcc_builder_offset_vector_push@@Base>
   136d4:	str	r0, [sp, #4]
   136d8:	b	136e8 <main@@Base+0x1158>
   136dc:	movw	r0, #0
   136e0:	str	r0, [sp, #4]
   136e4:	b	136e8 <main@@Base+0x1158>
   136e8:	ldr	r0, [sp, #4]
   136ec:	mov	sp, fp
   136f0:	pop	{fp, pc}
   136f4:	push	{fp, lr}
   136f8:	mov	fp, sp
   136fc:	sub	sp, sp, #8
   13700:	str	r0, [sp, #4]
   13704:	ldr	r0, [sp, #4]
   13708:	bl	16608 <flatcc_builder_end_offset_vector@@Base>
   1370c:	mov	sp, fp
   13710:	pop	{fp, pc}
   13714:	push	{fp, lr}
   13718:	mov	fp, sp
   1371c:	sub	sp, sp, #8
   13720:	str	r0, [sp, #4]
   13724:	ldr	r0, [sp, #4]
   13728:	bl	166b0 <flatcc_builder_start_string@@Base>
   1372c:	mov	sp, fp
   13730:	pop	{fp, pc}
   13734:	push	{fp, lr}
   13738:	mov	fp, sp
   1373c:	sub	sp, sp, #16
   13740:	str	r0, [fp, #-4]
   13744:	str	r1, [sp, #8]
   13748:	str	r2, [sp, #4]
   1374c:	ldr	r0, [fp, #-4]
   13750:	ldr	r1, [sp, #8]
   13754:	ldr	r2, [sp, #4]
   13758:	bl	15f08 <flatcc_builder_append_string@@Base>
   1375c:	mov	sp, fp
   13760:	pop	{fp, pc}
   13764:	push	{fp, lr}
   13768:	mov	fp, sp
   1376c:	sub	sp, sp, #16
   13770:	str	r0, [fp, #-4]
   13774:	ldr	r0, [fp, #-4]
   13778:	ldr	r1, [fp, #-4]
   1377c:	str	r0, [sp, #8]
   13780:	mov	r0, r1
   13784:	bl	18dd0 <flatcc_builder_end_string@@Base>
   13788:	ldr	r1, [sp, #8]
   1378c:	str	r0, [sp, #4]
   13790:	mov	r0, r1
   13794:	ldr	r1, [sp, #4]
   13798:	bl	13534 <main@@Base+0xfa4>
   1379c:	mov	sp, fp
   137a0:	pop	{fp, pc}
   137a4:	push	{fp, lr}
   137a8:	mov	fp, sp
   137ac:	sub	sp, sp, #8
   137b0:	str	r0, [sp, #4]
   137b4:	ldr	r0, [sp, #4]
   137b8:	bl	138a4 <main@@Base+0x1314>
   137bc:	mov	sp, fp
   137c0:	pop	{fp, pc}
   137c4:	push	{fp, lr}
   137c8:	mov	fp, sp
   137cc:	sub	sp, sp, #16
   137d0:	str	r0, [fp, #-4]
   137d4:	str	r1, [sp, #8]
   137d8:	str	r2, [sp, #4]
   137dc:	ldr	r0, [fp, #-4]
   137e0:	ldr	r1, [sp, #8]
   137e4:	ldr	r2, [sp, #4]
   137e8:	bl	15bd8 <flatcc_builder_append_vector@@Base>
   137ec:	mov	sp, fp
   137f0:	pop	{fp, pc}
   137f4:	push	{fp, lr}
   137f8:	mov	fp, sp
   137fc:	sub	sp, sp, #16
   13800:	str	r0, [fp, #-4]
   13804:	ldr	r0, [fp, #-4]
   13808:	ldr	r1, [fp, #-4]
   1380c:	str	r0, [sp, #8]
   13810:	mov	r0, r1
   13814:	bl	13940 <main@@Base+0x13b0>
   13818:	ldr	r1, [sp, #8]
   1381c:	str	r0, [sp, #4]
   13820:	mov	r0, r1
   13824:	ldr	r1, [sp, #4]
   13828:	bl	138d4 <main@@Base+0x1344>
   1382c:	mov	sp, fp
   13830:	pop	{fp, pc}
   13834:	push	{fp, lr}
   13838:	mov	fp, sp
   1383c:	sub	sp, sp, #8
   13840:	ldr	r1, [pc, #76]	; 13894 <main@@Base+0x1304>
   13844:	add	r1, pc, r1
   13848:	str	r0, [sp, #4]
   1384c:	ldr	r0, [sp, #4]
   13850:	movw	r2, #1
   13854:	bl	17418 <flatcc_builder_check_required@@Base>
   13858:	cmp	r0, #0
   1385c:	beq	13864 <main@@Base+0x12d4>
   13860:	b	13884 <main@@Base+0x12f4>
   13864:	ldr	r0, [pc, #44]	; 13898 <main@@Base+0x1308>
   13868:	add	r0, pc, r0
   1386c:	ldr	r1, [pc, #40]	; 1389c <main@@Base+0x130c>
   13870:	add	r1, pc, r1
   13874:	ldr	r2, [pc, #36]	; 138a0 <main@@Base+0x1310>
   13878:	add	r3, pc, r2
   1387c:	movw	r2, #235	; 0xeb
   13880:	bl	12494 <__assert_fail@plt>
   13884:	ldr	r0, [sp, #4]
   13888:	bl	17508 <flatcc_builder_end_table@@Base>
   1388c:	mov	sp, fp
   13890:	pop	{fp, pc}
   13894:	andeq	r7, r0, sl, asr #13
   13898:	andeq	r7, r0, lr, lsr #2
   1389c:	andeq	r7, r0, r8, asr #3
   138a0:	andeq	r7, r0, r7, lsr r2
   138a4:	push	{fp, lr}
   138a8:	mov	fp, sp
   138ac:	sub	sp, sp, #8
   138b0:	str	r0, [sp, #4]
   138b4:	ldr	r0, [sp, #4]
   138b8:	movw	r1, #1
   138bc:	movw	r2, #1
   138c0:	uxth	r2, r2
   138c4:	mvn	r3, #0
   138c8:	bl	1641c <flatcc_builder_start_vector@@Base>
   138cc:	mov	sp, fp
   138d0:	pop	{fp, pc}
   138d4:	push	{fp, lr}
   138d8:	mov	fp, sp
   138dc:	sub	sp, sp, #16
   138e0:	str	r0, [fp, #-4]
   138e4:	str	r1, [sp, #8]
   138e8:	ldr	r0, [sp, #8]
   138ec:	cmp	r0, #0
   138f0:	beq	13928 <main@@Base+0x1398>
   138f4:	ldr	r0, [fp, #-4]
   138f8:	movw	r1, #5
   138fc:	bl	18018 <flatcc_builder_table_add_offset@@Base>
   13900:	str	r0, [sp, #4]
   13904:	movw	r1, #0
   13908:	cmp	r0, r1
   1390c:	beq	13928 <main@@Base+0x1398>
   13910:	ldr	r0, [sp, #8]
   13914:	ldr	r1, [sp, #4]
   13918:	str	r0, [r1]
   1391c:	movw	r0, #0
   13920:	str	r0, [sp]
   13924:	b	13934 <main@@Base+0x13a4>
   13928:	mvn	r0, #0
   1392c:	str	r0, [sp]
   13930:	b	13934 <main@@Base+0x13a4>
   13934:	ldr	r0, [sp]
   13938:	mov	sp, fp
   1393c:	pop	{fp, pc}
   13940:	push	{fp, lr}
   13944:	mov	fp, sp
   13948:	sub	sp, sp, #8
   1394c:	str	r0, [sp, #4]
   13950:	ldr	r0, [sp, #4]
   13954:	bl	17910 <flatcc_builder_end_vector@@Base>
   13958:	mov	sp, fp
   1395c:	pop	{fp, pc}
   13960:	push	{fp, lr}
   13964:	mov	fp, sp
   13968:	sub	sp, sp, #8
   1396c:	str	r0, [sp, #4]
   13970:	str	r1, [sp]
   13974:	ldr	r0, [sp, #4]
   13978:	ldr	r1, [sp]
   1397c:	bl	154a0 <flatcc_builder_end_buffer@@Base>
   13980:	mov	sp, fp
   13984:	pop	{fp, pc}
   13988:	push	{fp, lr}
   1398c:	mov	fp, sp
   13990:	sub	sp, sp, #32
   13994:	str	r0, [fp, #-8]
   13998:	str	r1, [fp, #-12]
   1399c:	movw	r0, #0
   139a0:	str	r0, [sp, #12]
   139a4:	ldr	r1, [fp, #-12]
   139a8:	cmp	r1, r0
   139ac:	bne	139bc <main@@Base+0x142c>
   139b0:	movw	r0, #1
   139b4:	str	r0, [fp, #-4]
   139b8:	b	13a28 <main@@Base+0x1498>
   139bc:	add	r0, sp, #12
   139c0:	ldr	r1, [fp, #-12]
   139c4:	movw	r2, #4
   139c8:	bl	12464 <strncpy@plt>
   139cc:	ldr	r1, [sp, #12]
   139d0:	str	r0, [sp, #8]
   139d4:	mov	r0, r1
   139d8:	bl	13a58 <main@@Base+0x14c8>
   139dc:	str	r0, [sp, #12]
   139e0:	ldr	r0, [fp, #-8]
   139e4:	add	r0, r0, #4
   139e8:	bl	13a6c <main@@Base+0x14dc>
   139ec:	str	r0, [sp, #16]
   139f0:	ldr	r0, [sp, #12]
   139f4:	cmp	r0, #0
   139f8:	movw	r0, #1
   139fc:	str	r0, [sp, #4]
   13a00:	beq	13a1c <main@@Base+0x148c>
   13a04:	ldr	r0, [sp, #16]
   13a08:	ldr	r1, [sp, #12]
   13a0c:	cmp	r0, r1
   13a10:	movw	r0, #0
   13a14:	moveq	r0, #1
   13a18:	str	r0, [sp, #4]
   13a1c:	ldr	r0, [sp, #4]
   13a20:	and	r0, r0, #1
   13a24:	str	r0, [fp, #-4]
   13a28:	ldr	r0, [fp, #-4]
   13a2c:	mov	sp, fp
   13a30:	pop	{fp, pc}
   13a34:	push	{fp, lr}
   13a38:	mov	fp, sp
   13a3c:	sub	sp, sp, #8
   13a40:	str	r0, [sp, #4]
   13a44:	ldr	r0, [sp, #4]
   13a48:	ldr	r0, [r0]
   13a4c:	bl	13aa4 <main@@Base+0x1514>
   13a50:	mov	sp, fp
   13a54:	pop	{fp, pc}
   13a58:	sub	sp, sp, #4
   13a5c:	str	r0, [sp]
   13a60:	ldr	r0, [sp]
   13a64:	add	sp, sp, #4
   13a68:	bx	lr
   13a6c:	push	{fp, lr}
   13a70:	mov	fp, sp
   13a74:	sub	sp, sp, #8
   13a78:	str	r0, [sp, #4]
   13a7c:	ldr	r0, [sp, #4]
   13a80:	ldr	r0, [r0]
   13a84:	bl	13a90 <main@@Base+0x1500>
   13a88:	mov	sp, fp
   13a8c:	pop	{fp, pc}
   13a90:	sub	sp, sp, #4
   13a94:	str	r0, [sp]
   13a98:	ldr	r0, [sp]
   13a9c:	add	sp, sp, #4
   13aa0:	bx	lr
   13aa4:	sub	sp, sp, #4
   13aa8:	str	r0, [sp]
   13aac:	ldr	r0, [sp]
   13ab0:	add	sp, sp, #4
   13ab4:	bx	lr
   13ab8:	push	{fp, lr}
   13abc:	mov	fp, sp
   13ac0:	sub	sp, sp, #8
   13ac4:	str	r0, [sp, #4]
   13ac8:	ldr	r0, [sp, #4]
   13acc:	ldr	r0, [r0]
   13ad0:	bl	13b04 <main@@Base+0x1574>
   13ad4:	mov	sp, fp
   13ad8:	pop	{fp, pc}
   13adc:	push	{fp, lr}
   13ae0:	mov	fp, sp
   13ae4:	sub	sp, sp, #8
   13ae8:	str	r0, [sp, #4]
   13aec:	ldr	r0, [sp, #4]
   13af0:	ldrh	r0, [r0]
   13af4:	bl	13b18 <main@@Base+0x1588>
   13af8:	uxth	r0, r0
   13afc:	mov	sp, fp
   13b00:	pop	{fp, pc}
   13b04:	sub	sp, sp, #4
   13b08:	str	r0, [sp]
   13b0c:	ldr	r0, [sp]
   13b10:	add	sp, sp, #4
   13b14:	bx	lr
   13b18:	sub	sp, sp, #4
   13b1c:	strh	r0, [sp, #2]
   13b20:	ldrh	r0, [sp, #2]
   13b24:	add	sp, sp, #4
   13b28:	bx	lr
   13b2c:	push	{fp, lr}
   13b30:	mov	fp, sp
   13b34:	sub	sp, sp, #32
   13b38:	str	r0, [fp, #-8]
   13b3c:	movw	r0, #0
   13b40:	strh	r0, [fp, #-14]
   13b44:	ldr	r0, [fp, #-8]
   13b48:	movw	r1, #0
   13b4c:	cmp	r0, r1
   13b50:	beq	13b5c <main@@Base+0x15cc>
   13b54:	b	13b58 <main@@Base+0x15c8>
   13b58:	b	13b7c <main@@Base+0x15ec>
   13b5c:	ldr	r0, [pc, #196]	; 13c28 <main@@Base+0x1698>
   13b60:	add	r0, pc, r0
   13b64:	ldr	r1, [pc, #192]	; 13c2c <main@@Base+0x169c>
   13b68:	add	r1, pc, r1
   13b6c:	ldr	r2, [pc, #188]	; 13c30 <main@@Base+0x16a0>
   13b70:	add	r3, pc, r2
   13b74:	movw	r2, #706	; 0x2c2
   13b78:	bl	12494 <__assert_fail@plt>
   13b7c:	mov	r0, #5
   13b80:	strh	r0, [sp, #16]
   13b84:	ldr	r0, [fp, #-8]
   13b88:	str	r0, [sp, #8]
   13b8c:	bl	13ab8 <main@@Base+0x1528>
   13b90:	ldr	lr, [sp, #8]
   13b94:	sub	r0, lr, r0
   13b98:	str	r0, [sp, #12]
   13b9c:	ldr	r0, [sp, #12]
   13ba0:	bl	13adc <main@@Base+0x154c>
   13ba4:	ldrh	lr, [sp, #16]
   13ba8:	add	lr, lr, #3
   13bac:	lsl	lr, lr, #1
   13bb0:	cmp	r0, lr
   13bb4:	bcc	13bd0 <main@@Base+0x1640>
   13bb8:	ldr	r0, [sp, #12]
   13bbc:	ldrh	r1, [sp, #16]
   13bc0:	add	r0, r0, r1, lsl #1
   13bc4:	add	r0, r0, #4
   13bc8:	bl	13adc <main@@Base+0x154c>
   13bcc:	strh	r0, [fp, #-14]
   13bd0:	ldrsh	r0, [fp, #-14]
   13bd4:	cmp	r0, #0
   13bd8:	beq	13c14 <main@@Base+0x1684>
   13bdc:	ldr	r0, [fp, #-8]
   13be0:	ldrh	r1, [fp, #-14]
   13be4:	add	r0, r0, r1
   13be8:	str	r0, [fp, #-12]
   13bec:	ldr	r0, [fp, #-12]
   13bf0:	add	r0, r0, #4
   13bf4:	ldr	r1, [fp, #-12]
   13bf8:	str	r0, [sp, #4]
   13bfc:	mov	r0, r1
   13c00:	bl	13a34 <main@@Base+0x14a4>
   13c04:	ldr	r1, [sp, #4]
   13c08:	add	r0, r1, r0
   13c0c:	str	r0, [fp, #-4]
   13c10:	b	13c1c <main@@Base+0x168c>
   13c14:	movw	r0, #0
   13c18:	str	r0, [fp, #-4]
   13c1c:	ldr	r0, [fp, #-4]
   13c20:	mov	sp, fp
   13c24:	pop	{fp, pc}
   13c28:			; <UNDEFINED> instruction: 0x00006fba
   13c2c:	ldrdeq	r6, [r0], -r8
   13c30:	muleq	r0, r1, r1
   13c34:	push	{fp, lr}
   13c38:	mov	fp, sp
   13c3c:	sub	sp, sp, #8
   13c40:	str	r0, [sp, #4]
   13c44:	ldr	r0, [sp, #4]
   13c48:	movw	r1, #0
   13c4c:	cmp	r0, r1
   13c50:	beq	13c6c <main@@Base+0x16dc>
   13c54:	ldr	r0, [sp, #4]
   13c58:	mvn	r1, #3
   13c5c:	add	r0, r0, r1
   13c60:	bl	13a34 <main@@Base+0x14a4>
   13c64:	str	r0, [sp]
   13c68:	b	13c78 <main@@Base+0x16e8>
   13c6c:	movw	r0, #0
   13c70:	str	r0, [sp]
   13c74:	b	13c78 <main@@Base+0x16e8>
   13c78:	ldr	r0, [sp]
   13c7c:	mov	sp, fp
   13c80:	pop	{fp, pc}
   13c84:	push	{fp, lr}
   13c88:	mov	fp, sp
   13c8c:	sub	sp, sp, #8
   13c90:	str	r0, [sp, #4]
   13c94:	ldr	r0, [sp, #4]
   13c98:	bl	13ca4 <main@@Base+0x1714>
   13c9c:	mov	sp, fp
   13ca0:	pop	{fp, pc}
   13ca4:	push	{fp, lr}
   13ca8:	mov	fp, sp
   13cac:	sub	sp, sp, #8
   13cb0:	str	r0, [sp, #4]
   13cb4:	ldr	r0, [sp, #4]
   13cb8:	movw	r1, #0
   13cbc:	cmp	r0, r1
   13cc0:	beq	13cdc <main@@Base+0x174c>
   13cc4:	ldr	r0, [sp, #4]
   13cc8:	mvn	r1, #3
   13ccc:	add	r0, r0, r1
   13cd0:	bl	13a34 <main@@Base+0x14a4>
   13cd4:	str	r0, [sp]
   13cd8:	b	13ce8 <main@@Base+0x1758>
   13cdc:	movw	r0, #0
   13ce0:	str	r0, [sp]
   13ce4:	b	13ce8 <main@@Base+0x1758>
   13ce8:	ldr	r0, [sp]
   13cec:	mov	sp, fp
   13cf0:	pop	{fp, pc}

00013cf4 <flatcc_builder_default_alloc@@Base>:
   13cf4:	push	{fp, lr}
   13cf8:	mov	fp, sp
   13cfc:	sub	sp, sp, #40	; 0x28
   13d00:	ldr	ip, [fp, #8]
   13d04:	str	r0, [fp, #-8]
   13d08:	str	r1, [fp, #-12]
   13d0c:	str	r2, [fp, #-16]
   13d10:	str	r3, [sp, #20]
   13d14:	ldr	r0, [fp, #-16]
   13d18:	cmp	r0, #0
   13d1c:	str	ip, [sp, #8]
   13d20:	bne	13d64 <flatcc_builder_default_alloc@@Base+0x70>
   13d24:	ldr	r0, [fp, #-12]
   13d28:	ldr	r0, [r0]
   13d2c:	movw	r1, #0
   13d30:	cmp	r0, r1
   13d34:	beq	13d58 <flatcc_builder_default_alloc@@Base+0x64>
   13d38:	ldr	r0, [fp, #-12]
   13d3c:	ldr	r0, [r0]
   13d40:	bl	123d4 <free@plt>
   13d44:	ldr	r0, [fp, #-12]
   13d48:	movw	lr, #0
   13d4c:	str	lr, [r0]
   13d50:	ldr	r0, [fp, #-12]
   13d54:	str	lr, [r0, #4]
   13d58:	movw	r0, #0
   13d5c:	str	r0, [fp, #-4]
   13d60:	b	13ed0 <flatcc_builder_default_alloc@@Base+0x1dc>
   13d64:	ldr	r0, [fp, #8]
   13d68:	sub	r0, r0, #1
   13d6c:	cmp	r0, #6
   13d70:	str	r0, [sp, #4]
   13d74:	bhi	13dd4 <flatcc_builder_default_alloc@@Base+0xe0>
   13d78:	add	r0, pc, #8
   13d7c:	ldr	r1, [sp, #4]
   13d80:	ldr	r2, [r0, r1, lsl #2]
   13d84:	add	pc, r0, r2
   13d88:	andeq	r0, r0, ip, lsl r0
   13d8c:	andeq	r0, r0, ip, asr #32
   13d90:	andeq	r0, r0, ip, asr #32
   13d94:	andeq	r0, r0, r4, lsr r0
   13d98:	andeq	r0, r0, r8, lsr #32
   13d9c:	andeq	r0, r0, ip, asr #32
   13da0:	andeq	r0, r0, r0, asr #32
   13da4:	movw	r0, #256	; 0x100
   13da8:	str	r0, [sp, #12]
   13dac:	b	13ddc <flatcc_builder_default_alloc@@Base+0xe8>
   13db0:	ldr	r0, [fp, #-16]
   13db4:	str	r0, [sp, #12]
   13db8:	b	13ddc <flatcc_builder_default_alloc@@Base+0xe8>
   13dbc:	movw	r0, #288	; 0x120
   13dc0:	str	r0, [sp, #12]
   13dc4:	b	13ddc <flatcc_builder_default_alloc@@Base+0xe8>
   13dc8:	movw	r0, #64	; 0x40
   13dcc:	str	r0, [sp, #12]
   13dd0:	b	13ddc <flatcc_builder_default_alloc@@Base+0xe8>
   13dd4:	movw	r0, #32
   13dd8:	str	r0, [sp, #12]
   13ddc:	b	13de0 <flatcc_builder_default_alloc@@Base+0xec>
   13de0:	ldr	r0, [sp, #12]
   13de4:	ldr	r1, [fp, #-16]
   13de8:	cmp	r0, r1
   13dec:	bcs	13e00 <flatcc_builder_default_alloc@@Base+0x10c>
   13df0:	ldr	r0, [sp, #12]
   13df4:	lsl	r0, r0, #1
   13df8:	str	r0, [sp, #12]
   13dfc:	b	13de0 <flatcc_builder_default_alloc@@Base+0xec>
   13e00:	ldr	r0, [fp, #-16]
   13e04:	ldr	r1, [fp, #-12]
   13e08:	ldr	r1, [r1, #4]
   13e0c:	cmp	r0, r1
   13e10:	bhi	13e38 <flatcc_builder_default_alloc@@Base+0x144>
   13e14:	ldr	r0, [fp, #-12]
   13e18:	ldr	r0, [r0, #4]
   13e1c:	lsr	r0, r0, #1
   13e20:	ldr	r1, [sp, #12]
   13e24:	cmp	r0, r1
   13e28:	bcc	13e38 <flatcc_builder_default_alloc@@Base+0x144>
   13e2c:	movw	r0, #0
   13e30:	str	r0, [fp, #-4]
   13e34:	b	13ed0 <flatcc_builder_default_alloc@@Base+0x1dc>
   13e38:	ldr	r0, [fp, #-12]
   13e3c:	ldr	r0, [r0]
   13e40:	ldr	r1, [sp, #12]
   13e44:	bl	123f8 <realloc@plt>
   13e48:	str	r0, [sp, #16]
   13e4c:	movw	r1, #0
   13e50:	cmp	r0, r1
   13e54:	bne	13e64 <flatcc_builder_default_alloc@@Base+0x170>
   13e58:	mvn	r0, #0
   13e5c:	str	r0, [fp, #-4]
   13e60:	b	13ed0 <flatcc_builder_default_alloc@@Base+0x1dc>
   13e64:	ldr	r0, [sp, #20]
   13e68:	cmp	r0, #0
   13e6c:	beq	13eb0 <flatcc_builder_default_alloc@@Base+0x1bc>
   13e70:	ldr	r0, [fp, #-12]
   13e74:	ldr	r0, [r0, #4]
   13e78:	ldr	r1, [sp, #12]
   13e7c:	cmp	r0, r1
   13e80:	bcs	13eb0 <flatcc_builder_default_alloc@@Base+0x1bc>
   13e84:	ldr	r0, [sp, #16]
   13e88:	ldr	r1, [fp, #-12]
   13e8c:	ldr	r1, [r1, #4]
   13e90:	add	r0, r0, r1
   13e94:	ldr	r1, [sp, #12]
   13e98:	ldr	r2, [fp, #-12]
   13e9c:	ldr	r2, [r2, #4]
   13ea0:	sub	r2, r1, r2
   13ea4:	movw	r1, #0
   13ea8:	and	r1, r1, #255	; 0xff
   13eac:	bl	12458 <memset@plt>
   13eb0:	ldr	r0, [sp, #16]
   13eb4:	ldr	r1, [fp, #-12]
   13eb8:	str	r0, [r1]
   13ebc:	ldr	r0, [sp, #12]
   13ec0:	ldr	r1, [fp, #-12]
   13ec4:	str	r0, [r1, #4]
   13ec8:	movw	r0, #0
   13ecc:	str	r0, [fp, #-4]
   13ed0:	ldr	r0, [fp, #-4]
   13ed4:	mov	sp, fp
   13ed8:	pop	{fp, pc}

00013edc <flatcc_builder_flush_vtable_cache@@Base>:
   13edc:	push	{fp, lr}
   13ee0:	mov	fp, sp
   13ee4:	sub	sp, sp, #8
   13ee8:	str	r0, [sp, #4]
   13eec:	ldr	r0, [sp, #4]
   13ef0:	add	r0, r0, #52	; 0x34
   13ef4:	add	r0, r0, #40	; 0x28
   13ef8:	str	r0, [sp]
   13efc:	ldr	r0, [sp, #4]
   13f00:	ldr	r0, [r0, #116]	; 0x74
   13f04:	cmp	r0, #0
   13f08:	bne	13f10 <flatcc_builder_flush_vtable_cache@@Base+0x34>
   13f0c:	b	13f44 <flatcc_builder_flush_vtable_cache@@Base+0x68>
   13f10:	ldr	r0, [sp]
   13f14:	ldr	r0, [r0]
   13f18:	ldr	r1, [sp]
   13f1c:	ldr	r2, [r1, #4]
   13f20:	movw	r1, #0
   13f24:	and	r1, r1, #255	; 0xff
   13f28:	bl	12458 <memset@plt>
   13f2c:	ldr	r0, [sp, #4]
   13f30:	movw	r1, #16
   13f34:	str	r1, [r0, #124]	; 0x7c
   13f38:	ldr	r0, [sp, #4]
   13f3c:	movw	r1, #0
   13f40:	str	r1, [r0, #120]	; 0x78
   13f44:	mov	sp, fp
   13f48:	pop	{fp, pc}

00013f4c <flatcc_builder_custom_init@@Base>:
   13f4c:	push	{fp, lr}
   13f50:	mov	fp, sp
   13f54:	sub	sp, sp, #24
   13f58:	ldr	ip, [fp, #8]
   13f5c:	str	r0, [fp, #-4]
   13f60:	str	r1, [fp, #-8]
   13f64:	str	r2, [sp, #12]
   13f68:	str	r3, [sp, #8]
   13f6c:	ldr	r0, [fp, #-4]
   13f70:	movw	r1, #0
   13f74:	and	r1, r1, #255	; 0xff
   13f78:	movw	r2, #232	; 0xe8
   13f7c:	str	ip, [sp, #4]
   13f80:	bl	12458 <memset@plt>
   13f84:	ldr	r0, [fp, #-8]
   13f88:	movw	r1, #0
   13f8c:	cmp	r0, r1
   13f90:	bne	13fb8 <flatcc_builder_custom_init@@Base+0x6c>
   13f94:	ldr	r0, [pc, #116]	; 14010 <flatcc_builder_custom_init@@Base+0xc4>
   13f98:	ldr	r0, [pc, r0]
   13f9c:	ldr	r1, [fp, #-4]
   13fa0:	movw	r2, #1
   13fa4:	str	r2, [r1, #184]	; 0xb8
   13fa8:	str	r0, [fp, #-8]
   13fac:	ldr	r0, [fp, #-4]
   13fb0:	add	r0, r0, #188	; 0xbc
   13fb4:	str	r0, [sp, #12]
   13fb8:	ldr	r0, [sp, #8]
   13fbc:	movw	r1, #0
   13fc0:	cmp	r0, r1
   13fc4:	bne	13fd4 <flatcc_builder_custom_init@@Base+0x88>
   13fc8:	ldr	r0, [pc, #68]	; 14014 <flatcc_builder_custom_init@@Base+0xc8>
   13fcc:	ldr	r0, [pc, r0]
   13fd0:	str	r0, [sp, #8]
   13fd4:	ldr	r0, [fp, #8]
   13fd8:	ldr	r1, [fp, #-4]
   13fdc:	str	r0, [r1, #40]	; 0x28
   13fe0:	ldr	r0, [sp, #8]
   13fe4:	ldr	r1, [fp, #-4]
   13fe8:	str	r0, [r1, #48]	; 0x30
   13fec:	ldr	r0, [sp, #12]
   13ff0:	ldr	r1, [fp, #-4]
   13ff4:	str	r0, [r1, #36]	; 0x24
   13ff8:	ldr	r0, [fp, #-8]
   13ffc:	ldr	r1, [fp, #-4]
   14000:	str	r0, [r1, #44]	; 0x2c
   14004:	movw	r0, #0
   14008:	mov	sp, fp
   1400c:	pop	{fp, pc}
   14010:	andeq	r9, r1, r8, asr #1
   14014:	muleq	r1, r0, r0

00014018 <flatcc_builder_init@@Base>:
   14018:	push	{fp, lr}
   1401c:	mov	fp, sp
   14020:	sub	sp, sp, #16
   14024:	str	r0, [fp, #-4]
   14028:	ldr	r0, [fp, #-4]
   1402c:	movw	r1, #0
   14030:	str	r1, [sp, #8]
   14034:	ldr	r2, [sp, #8]
   14038:	ldr	r3, [sp, #8]
   1403c:	ldr	ip, [sp, #8]
   14040:	str	ip, [sp]
   14044:	bl	13f4c <flatcc_builder_custom_init@@Base>
   14048:	mov	sp, fp
   1404c:	pop	{fp, pc}

00014050 <flatcc_builder_custom_reset@@Base>:
   14050:	push	{r4, sl, fp, lr}
   14054:	add	fp, sp, #8
   14058:	sub	sp, sp, #40	; 0x28
   1405c:	str	r0, [fp, #-16]
   14060:	str	r1, [fp, #-20]	; 0xffffffec
   14064:	str	r2, [sp, #24]
   14068:	movw	r0, #0
   1406c:	str	r0, [sp, #16]
   14070:	ldr	r0, [sp, #16]
   14074:	cmp	r0, #8
   14078:	bge	14184 <flatcc_builder_custom_reset@@Base+0x134>
   1407c:	ldr	r0, [fp, #-16]
   14080:	add	r0, r0, #52	; 0x34
   14084:	ldr	r1, [sp, #16]
   14088:	add	r0, r0, r1, lsl #3
   1408c:	str	r0, [sp, #20]
   14090:	ldr	r0, [sp, #20]
   14094:	ldr	r0, [r0]
   14098:	movw	r1, #0
   1409c:	cmp	r0, r1
   140a0:	beq	14138 <flatcc_builder_custom_reset@@Base+0xe8>
   140a4:	ldr	r0, [sp, #16]
   140a8:	cmp	r0, #5
   140ac:	beq	14118 <flatcc_builder_custom_reset@@Base+0xc8>
   140b0:	ldr	r0, [sp, #24]
   140b4:	cmp	r0, #0
   140b8:	beq	14118 <flatcc_builder_custom_reset@@Base+0xc8>
   140bc:	ldr	r0, [fp, #-16]
   140c0:	ldr	r0, [r0, #48]	; 0x30
   140c4:	ldr	r1, [fp, #-16]
   140c8:	ldr	r1, [r1, #40]	; 0x28
   140cc:	ldr	r2, [sp, #20]
   140d0:	ldr	r3, [sp, #16]
   140d4:	str	r0, [sp, #12]
   140d8:	mov	r0, r1
   140dc:	mov	r1, r2
   140e0:	movw	r2, #1
   140e4:	str	r2, [sp, #8]
   140e8:	ldr	ip, [sp, #8]
   140ec:	str	r3, [sp, #4]
   140f0:	mov	r3, ip
   140f4:	ldr	lr, [sp, #4]
   140f8:	str	lr, [sp]
   140fc:	ldr	r4, [sp, #12]
   14100:	blx	r4
   14104:	cmp	r0, #0
   14108:	beq	14118 <flatcc_builder_custom_reset@@Base+0xc8>
   1410c:	mvn	r0, #0
   14110:	str	r0, [fp, #-12]
   14114:	b	14280 <flatcc_builder_custom_reset@@Base+0x230>
   14118:	ldr	r0, [sp, #20]
   1411c:	ldr	r0, [r0]
   14120:	ldr	r1, [sp, #20]
   14124:	ldr	r2, [r1, #4]
   14128:	movw	r1, #0
   1412c:	and	r1, r1, #255	; 0xff
   14130:	bl	12458 <memset@plt>
   14134:	b	14170 <flatcc_builder_custom_reset@@Base+0x120>
   14138:	ldr	r0, [sp, #20]
   1413c:	ldr	r0, [r0, #4]
   14140:	cmp	r0, #0
   14144:	bne	1414c <flatcc_builder_custom_reset@@Base+0xfc>
   14148:	b	1416c <flatcc_builder_custom_reset@@Base+0x11c>
   1414c:	ldr	r0, [pc, #312]	; 1428c <flatcc_builder_custom_reset@@Base+0x23c>
   14150:	add	r0, pc, r0
   14154:	ldr	r1, [pc, #308]	; 14290 <flatcc_builder_custom_reset@@Base+0x240>
   14158:	add	r1, pc, r1
   1415c:	ldr	r2, [pc, #304]	; 14294 <flatcc_builder_custom_reset@@Base+0x244>
   14160:	add	r3, pc, r2
   14164:	movw	r2, #434	; 0x1b2
   14168:	bl	12494 <__assert_fail@plt>
   1416c:	b	14170 <flatcc_builder_custom_reset@@Base+0x120>
   14170:	b	14174 <flatcc_builder_custom_reset@@Base+0x124>
   14174:	ldr	r0, [sp, #16]
   14178:	add	r0, r0, #1
   1417c:	str	r0, [sp, #16]
   14180:	b	14070 <flatcc_builder_custom_reset@@Base+0x20>
   14184:	ldr	r0, [fp, #-16]
   14188:	movw	r1, #0
   1418c:	str	r1, [r0, #120]	; 0x78
   14190:	ldr	r0, [fp, #-16]
   14194:	ldr	r0, [r0, #124]	; 0x7c
   14198:	cmp	r0, #0
   1419c:	bls	141ac <flatcc_builder_custom_reset@@Base+0x15c>
   141a0:	ldr	r0, [fp, #-16]
   141a4:	movw	r1, #16
   141a8:	str	r1, [r0, #124]	; 0x7c
   141ac:	ldr	r0, [fp, #-16]
   141b0:	movw	r1, #0
   141b4:	strh	r1, [r0, #128]	; 0x80
   141b8:	ldr	r0, [fp, #-16]
   141bc:	movw	r1, #0
   141c0:	str	r1, [r0, #136]	; 0x88
   141c4:	ldr	r0, [fp, #-16]
   141c8:	str	r1, [r0, #140]	; 0x8c
   141cc:	ldr	r0, [fp, #-16]
   141d0:	str	r1, [r0, #156]	; 0x9c
   141d4:	ldr	r0, [fp, #-16]
   141d8:	str	r1, [r0, #160]	; 0xa0
   141dc:	ldr	r0, [fp, #-16]
   141e0:	str	r1, [r0, #20]
   141e4:	ldr	r0, [fp, #-16]
   141e8:	str	r1, [r0, #24]
   141ec:	ldr	r0, [fp, #-16]
   141f0:	str	r1, [r0, #148]	; 0x94
   141f4:	ldr	r0, [fp, #-16]
   141f8:	str	r1, [r0, #152]	; 0x98
   141fc:	ldr	r0, [fp, #-16]
   14200:	ldr	r0, [r0, #60]	; 0x3c
   14204:	ldr	r2, [fp, #-16]
   14208:	str	r0, [r2, #16]
   1420c:	ldr	r0, [fp, #-16]
   14210:	ldr	r0, [r0, #76]	; 0x4c
   14214:	ldr	r2, [fp, #-16]
   14218:	str	r0, [r2]
   1421c:	ldr	r0, [fp, #-16]
   14220:	ldr	r0, [r0, #52]	; 0x34
   14224:	ldr	r2, [fp, #-16]
   14228:	str	r0, [r2, #4]
   1422c:	ldr	r0, [fp, #-16]
   14230:	str	r1, [r0, #32]
   14234:	ldr	r0, [fp, #-20]	; 0xffffffec
   14238:	cmp	r0, #0
   1423c:	beq	1425c <flatcc_builder_custom_reset@@Base+0x20c>
   14240:	ldr	r0, [fp, #-16]
   14244:	movw	r1, #0
   14248:	str	r1, [r0, #172]	; 0xac
   1424c:	ldr	r0, [fp, #-16]
   14250:	str	r1, [r0, #176]	; 0xb0
   14254:	ldr	r0, [fp, #-16]
   14258:	str	r1, [r0, #180]	; 0xb4
   1425c:	ldr	r0, [fp, #-16]
   14260:	ldr	r0, [r0, #184]	; 0xb8
   14264:	cmp	r0, #0
   14268:	beq	14278 <flatcc_builder_custom_reset@@Base+0x228>
   1426c:	ldr	r0, [fp, #-16]
   14270:	add	r0, r0, #188	; 0xbc
   14274:	bl	19c28 <flatcc_emitter_reset@@Base>
   14278:	movw	r0, #0
   1427c:	str	r0, [fp, #-12]
   14280:	ldr	r0, [fp, #-12]
   14284:	sub	sp, fp, #8
   14288:	pop	{r4, sl, fp, pc}
   1428c:	andeq	r6, r0, r2, asr #31
   14290:	andeq	r6, r0, ip, asr #31
   14294:	andeq	r7, r0, r1, lsr #32

00014298 <flatcc_builder_reset@@Base>:
   14298:	push	{fp, lr}
   1429c:	mov	fp, sp
   142a0:	sub	sp, sp, #8
   142a4:	str	r0, [sp, #4]
   142a8:	ldr	r0, [sp, #4]
   142ac:	movw	r1, #0
   142b0:	str	r1, [sp]
   142b4:	ldr	r2, [sp]
   142b8:	bl	14050 <flatcc_builder_custom_reset@@Base>
   142bc:	mov	sp, fp
   142c0:	pop	{fp, pc}

000142c4 <flatcc_builder_clear@@Base>:
   142c4:	push	{r4, sl, fp, lr}
   142c8:	add	fp, sp, #8
   142cc:	sub	sp, sp, #32
   142d0:	str	r0, [fp, #-12]
   142d4:	movw	r0, #0
   142d8:	str	r0, [sp, #20]
   142dc:	ldr	r0, [sp, #20]
   142e0:	cmp	r0, #8
   142e4:	bge	14358 <flatcc_builder_clear@@Base+0x94>
   142e8:	ldr	r0, [fp, #-12]
   142ec:	add	r0, r0, #52	; 0x34
   142f0:	ldr	r1, [sp, #20]
   142f4:	add	r0, r0, r1, lsl #3
   142f8:	str	r0, [fp, #-16]
   142fc:	ldr	r0, [fp, #-12]
   14300:	ldr	r0, [r0, #48]	; 0x30
   14304:	ldr	r1, [fp, #-12]
   14308:	ldr	r1, [r1, #40]	; 0x28
   1430c:	ldr	r2, [fp, #-16]
   14310:	ldr	r3, [sp, #20]
   14314:	str	r0, [sp, #16]
   14318:	mov	r0, r1
   1431c:	mov	r1, r2
   14320:	movw	r2, #0
   14324:	str	r2, [sp, #12]
   14328:	ldr	ip, [sp, #12]
   1432c:	str	r3, [sp, #8]
   14330:	mov	r3, ip
   14334:	ldr	lr, [sp, #8]
   14338:	str	lr, [sp]
   1433c:	ldr	r4, [sp, #16]
   14340:	blx	r4
   14344:	str	r0, [sp, #4]
   14348:	ldr	r0, [sp, #20]
   1434c:	add	r0, r0, #1
   14350:	str	r0, [sp, #20]
   14354:	b	142dc <flatcc_builder_clear@@Base+0x18>
   14358:	ldr	r0, [fp, #-12]
   1435c:	ldr	r0, [r0, #184]	; 0xb8
   14360:	cmp	r0, #0
   14364:	beq	14374 <flatcc_builder_clear@@Base+0xb0>
   14368:	ldr	r0, [fp, #-12]
   1436c:	add	r0, r0, #188	; 0xbc
   14370:	bl	19dc0 <flatcc_emitter_clear@@Base>
   14374:	ldr	r0, [fp, #-12]
   14378:	movw	r1, #0
   1437c:	and	r1, r1, #255	; 0xff
   14380:	movw	r2, #232	; 0xe8
   14384:	bl	12458 <memset@plt>
   14388:	sub	sp, fp, #8
   1438c:	pop	{r4, sl, fp, pc}

00014390 <flatcc_builder_enter_user_frame_ptr@@Base>:
   14390:	push	{fp, lr}
   14394:	mov	fp, sp
   14398:	sub	sp, sp, #24
   1439c:	str	r0, [fp, #-8]
   143a0:	str	r1, [sp, #12]
   143a4:	ldr	r0, [sp, #12]
   143a8:	add	r0, r0, #4
   143ac:	sub	r0, r0, #1
   143b0:	mvn	r1, #3
   143b4:	and	r0, r0, r1
   143b8:	add	r0, r0, #4
   143bc:	str	r0, [sp, #12]
   143c0:	ldr	r0, [fp, #-8]
   143c4:	ldr	r1, [fp, #-8]
   143c8:	ldr	r2, [r1, #228]	; 0xe4
   143cc:	ldr	r3, [sp, #12]
   143d0:	movw	r1, #7
   143d4:	movw	ip, #0
   143d8:	str	ip, [sp]
   143dc:	bl	14464 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   143e0:	str	r0, [sp, #8]
   143e4:	movw	r1, #0
   143e8:	cmp	r0, r1
   143ec:	bne	143fc <flatcc_builder_enter_user_frame_ptr@@Base+0x6c>
   143f0:	movw	r0, #0
   143f4:	str	r0, [fp, #-4]
   143f8:	b	14458 <flatcc_builder_enter_user_frame_ptr@@Base+0xc8>
   143fc:	ldr	r0, [sp, #8]
   14400:	ldr	r2, [sp, #12]
   14404:	movw	r1, #0
   14408:	and	r1, r1, #255	; 0xff
   1440c:	bl	12458 <memset@plt>
   14410:	ldr	r0, [fp, #-8]
   14414:	ldr	r0, [r0, #224]	; 0xe0
   14418:	ldr	r1, [sp, #8]
   1441c:	add	r2, r1, #4
   14420:	str	r2, [sp, #8]
   14424:	str	r0, [r1]
   14428:	ldr	r0, [fp, #-8]
   1442c:	ldr	r0, [r0, #228]	; 0xe4
   14430:	add	r0, r0, #4
   14434:	ldr	r1, [fp, #-8]
   14438:	str	r0, [r1, #224]	; 0xe0
   1443c:	ldr	r0, [sp, #12]
   14440:	ldr	r1, [fp, #-8]
   14444:	ldr	r2, [r1, #228]	; 0xe4
   14448:	add	r0, r2, r0
   1444c:	str	r0, [r1, #228]	; 0xe4
   14450:	ldr	r0, [sp, #8]
   14454:	str	r0, [fp, #-4]
   14458:	ldr	r0, [fp, #-4]
   1445c:	mov	sp, fp
   14460:	pop	{fp, pc}
   14464:	push	{fp, lr}
   14468:	mov	fp, sp
   1446c:	sub	sp, sp, #32
   14470:	ldr	ip, [fp, #8]
   14474:	str	r0, [fp, #-4]
   14478:	str	r1, [fp, #-8]
   1447c:	str	r2, [fp, #-12]
   14480:	str	r3, [sp, #16]
   14484:	ldr	r0, [fp, #-4]
   14488:	add	r0, r0, #52	; 0x34
   1448c:	ldr	r1, [fp, #-8]
   14490:	add	r0, r0, r1, lsl #3
   14494:	str	r0, [sp, #12]
   14498:	ldr	r0, [fp, #-12]
   1449c:	ldr	r1, [sp, #16]
   144a0:	add	r0, r0, r1
   144a4:	ldr	r1, [sp, #12]
   144a8:	ldr	r1, [r1, #4]
   144ac:	cmp	r0, r1
   144b0:	str	ip, [sp, #8]
   144b4:	bls	1452c <flatcc_builder_enter_user_frame_ptr@@Base+0x19c>
   144b8:	ldr	r0, [fp, #-4]
   144bc:	ldr	r0, [r0, #48]	; 0x30
   144c0:	ldr	r1, [fp, #-4]
   144c4:	ldr	r1, [r1, #40]	; 0x28
   144c8:	ldr	r2, [sp, #12]
   144cc:	ldr	r3, [fp, #-12]
   144d0:	ldr	ip, [sp, #16]
   144d4:	add	r3, r3, ip
   144d8:	ldr	ip, [fp, #8]
   144dc:	ldr	lr, [fp, #-8]
   144e0:	str	r0, [sp, #4]
   144e4:	mov	r0, r1
   144e8:	mov	r1, r2
   144ec:	mov	r2, r3
   144f0:	mov	r3, ip
   144f4:	str	lr, [sp]
   144f8:	ldr	ip, [sp, #4]
   144fc:	blx	ip
   14500:	cmp	r0, #0
   14504:	beq	14528 <flatcc_builder_enter_user_frame_ptr@@Base+0x198>
   14508:	ldr	r0, [pc, #52]	; 14544 <flatcc_builder_enter_user_frame_ptr@@Base+0x1b4>
   1450c:	add	r0, pc, r0
   14510:	ldr	r1, [pc, #48]	; 14548 <flatcc_builder_enter_user_frame_ptr@@Base+0x1b8>
   14514:	add	r1, pc, r1
   14518:	ldr	r2, [pc, #44]	; 1454c <flatcc_builder_enter_user_frame_ptr@@Base+0x1bc>
   1451c:	add	r3, pc, r2
   14520:	movw	r2, #308	; 0x134
   14524:	bl	12494 <__assert_fail@plt>
   14528:	b	1452c <flatcc_builder_enter_user_frame_ptr@@Base+0x19c>
   1452c:	ldr	r0, [sp, #12]
   14530:	ldr	r0, [r0]
   14534:	ldr	r1, [fp, #-12]
   14538:	add	r0, r0, r1
   1453c:	mov	sp, fp
   14540:	pop	{fp, pc}
   14544:	ldrdeq	r7, [r0], -r5
   14548:	andeq	r6, r0, r0, lsl ip
   1454c:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>

00014550 <flatcc_builder_enter_user_frame@@Base>:
   14550:	push	{fp, lr}
   14554:	mov	fp, sp
   14558:	sub	sp, sp, #24
   1455c:	str	r0, [fp, #-8]
   14560:	str	r1, [sp, #12]
   14564:	ldr	r0, [sp, #12]
   14568:	add	r0, r0, #4
   1456c:	sub	r0, r0, #1
   14570:	mvn	r1, #3
   14574:	and	r0, r0, r1
   14578:	add	r0, r0, #4
   1457c:	str	r0, [sp, #12]
   14580:	ldr	r0, [fp, #-8]
   14584:	ldr	r1, [fp, #-8]
   14588:	ldr	r2, [r1, #228]	; 0xe4
   1458c:	ldr	r3, [sp, #12]
   14590:	movw	r1, #7
   14594:	movw	ip, #0
   14598:	str	ip, [sp]
   1459c:	bl	14464 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   145a0:	str	r0, [sp, #8]
   145a4:	movw	r1, #0
   145a8:	cmp	r0, r1
   145ac:	bne	145bc <flatcc_builder_enter_user_frame@@Base+0x6c>
   145b0:	movw	r0, #0
   145b4:	str	r0, [fp, #-4]
   145b8:	b	1461c <flatcc_builder_enter_user_frame@@Base+0xcc>
   145bc:	ldr	r0, [sp, #8]
   145c0:	ldr	r2, [sp, #12]
   145c4:	movw	r1, #0
   145c8:	and	r1, r1, #255	; 0xff
   145cc:	bl	12458 <memset@plt>
   145d0:	ldr	r0, [fp, #-8]
   145d4:	ldr	r0, [r0, #224]	; 0xe0
   145d8:	ldr	r1, [sp, #8]
   145dc:	add	r2, r1, #4
   145e0:	str	r2, [sp, #8]
   145e4:	str	r0, [r1]
   145e8:	ldr	r0, [fp, #-8]
   145ec:	ldr	r0, [r0, #228]	; 0xe4
   145f0:	add	r0, r0, #4
   145f4:	ldr	r1, [fp, #-8]
   145f8:	str	r0, [r1, #224]	; 0xe0
   145fc:	ldr	r0, [sp, #12]
   14600:	ldr	r1, [fp, #-8]
   14604:	ldr	r2, [r1, #228]	; 0xe4
   14608:	add	r0, r2, r0
   1460c:	str	r0, [r1, #228]	; 0xe4
   14610:	ldr	r0, [fp, #-8]
   14614:	ldr	r0, [r0, #224]	; 0xe0
   14618:	str	r0, [fp, #-4]
   1461c:	ldr	r0, [fp, #-4]
   14620:	mov	sp, fp
   14624:	pop	{fp, pc}

00014628 <flatcc_builder_exit_user_frame@@Base>:
   14628:	push	{fp, lr}
   1462c:	mov	fp, sp
   14630:	sub	sp, sp, #8
   14634:	str	r0, [sp, #4]
   14638:	ldr	r0, [sp, #4]
   1463c:	ldr	r0, [r0, #224]	; 0xe0
   14640:	cmp	r0, #0
   14644:	bls	1464c <flatcc_builder_exit_user_frame@@Base+0x24>
   14648:	b	1466c <flatcc_builder_exit_user_frame@@Base+0x44>
   1464c:	ldr	r0, [pc, #100]	; 146b8 <flatcc_builder_exit_user_frame@@Base+0x90>
   14650:	add	r0, pc, r0
   14654:	ldr	r1, [pc, #96]	; 146bc <flatcc_builder_exit_user_frame@@Base+0x94>
   14658:	add	r1, pc, r1
   1465c:	ldr	r2, [pc, #92]	; 146c0 <flatcc_builder_exit_user_frame@@Base+0x98>
   14660:	add	r3, pc, r2
   14664:	movw	r2, #542	; 0x21e
   14668:	bl	12494 <__assert_fail@plt>
   1466c:	ldr	r0, [sp, #4]
   14670:	ldr	r0, [r0, #108]	; 0x6c
   14674:	ldr	r1, [sp, #4]
   14678:	ldr	r1, [r1, #224]	; 0xe0
   1467c:	add	r0, r0, r1
   14680:	str	r0, [sp]
   14684:	ldr	r0, [sp, #4]
   14688:	ldr	r0, [r0, #224]	; 0xe0
   1468c:	sub	r0, r0, #4
   14690:	ldr	r1, [sp, #4]
   14694:	str	r0, [r1, #228]	; 0xe4
   14698:	ldr	r0, [sp]
   1469c:	mvn	r1, #3
   146a0:	add	r0, r0, r1
   146a4:	ldr	r0, [r0]
   146a8:	ldr	r1, [sp, #4]
   146ac:	str	r0, [r1, #224]	; 0xe0
   146b0:	mov	sp, fp
   146b4:	pop	{fp, pc}
   146b8:	andeq	r6, r0, pc, ror #22
   146bc:	andeq	r6, r0, ip, asr #21
   146c0:	andeq	r6, r0, r8, ror fp

000146c4 <flatcc_builder_exit_user_frame_at@@Base>:
   146c4:	push	{fp, lr}
   146c8:	mov	fp, sp
   146cc:	sub	sp, sp, #8
   146d0:	str	r0, [sp, #4]
   146d4:	str	r1, [sp]
   146d8:	ldr	r0, [sp, #4]
   146dc:	ldr	r0, [r0, #224]	; 0xe0
   146e0:	ldr	r1, [sp]
   146e4:	cmp	r0, r1
   146e8:	bcc	146f0 <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   146ec:	b	14710 <flatcc_builder_exit_user_frame_at@@Base+0x4c>
   146f0:	ldr	r0, [pc, #52]	; 1472c <flatcc_builder_exit_user_frame_at@@Base+0x68>
   146f4:	add	r0, pc, r0
   146f8:	ldr	r1, [pc, #48]	; 14730 <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   146fc:	add	r1, pc, r1
   14700:	ldr	r2, [pc, #44]	; 14734 <flatcc_builder_exit_user_frame_at@@Base+0x70>
   14704:	add	r3, pc, r2
   14708:	movw	r2, #551	; 0x227
   1470c:	bl	12494 <__assert_fail@plt>
   14710:	ldr	r0, [sp]
   14714:	ldr	r1, [sp, #4]
   14718:	str	r0, [r1, #224]	; 0xe0
   1471c:	ldr	r0, [sp, #4]
   14720:	bl	14628 <flatcc_builder_exit_user_frame@@Base>
   14724:	mov	sp, fp
   14728:	pop	{fp, pc}
   1472c:	andeq	r6, r0, lr, lsl fp
   14730:	andeq	r6, r0, r8, lsr #20
   14734:	andeq	r6, r0, sp, lsr #22

00014738 <flatcc_builder_get_current_user_frame@@Base>:
   14738:	sub	sp, sp, #4
   1473c:	str	r0, [sp]
   14740:	ldr	r0, [sp]
   14744:	ldr	r0, [r0, #224]	; 0xe0
   14748:	add	sp, sp, #4
   1474c:	bx	lr

00014750 <flatcc_builder_get_user_frame_ptr@@Base>:
   14750:	sub	sp, sp, #8
   14754:	str	r0, [sp, #4]
   14758:	str	r1, [sp]
   1475c:	ldr	r0, [sp, #4]
   14760:	ldr	r0, [r0, #108]	; 0x6c
   14764:	ldr	r1, [sp]
   14768:	add	r0, r0, r1
   1476c:	add	sp, sp, #8
   14770:	bx	lr

00014774 <flatcc_builder_embed_buffer@@Base>:
   14774:	push	{fp, lr}
   14778:	mov	fp, sp
   1477c:	sub	sp, sp, #120	; 0x78
   14780:	ldr	ip, [fp, #12]
   14784:	ldr	lr, [fp, #8]
   14788:	str	r0, [fp, #-8]
   1478c:	strh	r1, [fp, #-10]
   14790:	str	r2, [fp, #-16]
   14794:	str	r3, [fp, #-20]	; 0xffffffec
   14798:	strh	lr, [fp, #-22]	; 0xffffffea
   1479c:	ldr	r0, [fp, #12]
   147a0:	and	r0, r0, #2
   147a4:	str	r0, [sp, #12]
   147a8:	ldr	r0, [fp, #-8]
   147ac:	ldrh	r1, [fp, #-10]
   147b0:	ldr	r2, [fp, #-8]
   147b4:	ldr	r2, [r2, #152]	; 0x98
   147b8:	cmp	r2, #0
   147bc:	movw	r2, #0
   147c0:	moveq	r2, #1
   147c4:	mvn	r3, #0
   147c8:	eor	r2, r2, r3
   147cc:	and	r3, r2, #1
   147d0:	sub	r2, fp, #22
   147d4:	str	r1, [sp, #8]
   147d8:	mov	r1, r2
   147dc:	ldr	r2, [sp, #8]
   147e0:	uxth	r2, r2
   147e4:	str	ip, [sp, #4]
   147e8:	bl	1495c <flatcc_builder_embed_buffer@@Base+0x1e8>
   147ec:	cmp	r0, #0
   147f0:	beq	14800 <flatcc_builder_embed_buffer@@Base+0x8c>
   147f4:	movw	r0, #0
   147f8:	str	r0, [fp, #-4]
   147fc:	b	1494c <flatcc_builder_embed_buffer@@Base+0x1d8>
   14800:	ldr	r0, [fp, #-8]
   14804:	ldr	r1, [fp, #-20]	; 0xffffffec
   14808:	ldr	r2, [sp, #12]
   1480c:	cmp	r2, #0
   14810:	movw	r2, #0
   14814:	movne	r2, #1
   14818:	tst	r2, #1
   1481c:	movw	r2, #4
   14820:	moveq	r2, #0
   14824:	add	r1, r1, r2
   14828:	ldrh	r2, [fp, #-22]	; 0xffffffea
   1482c:	bl	14ac8 <flatcc_builder_embed_buffer@@Base+0x354>
   14830:	str	r0, [fp, #-32]	; 0xffffffe0
   14834:	ldr	r0, [fp, #-20]	; 0xffffffec
   14838:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1483c:	add	r0, r0, r1
   14840:	bl	14afc <flatcc_builder_embed_buffer@@Base+0x388>
   14844:	str	r0, [fp, #-28]	; 0xffffffe4
   14848:	movw	r0, #0
   1484c:	str	r0, [sp, #16]
   14850:	str	r0, [sp, #20]
   14854:	ldr	r0, [fp, #-8]
   14858:	ldr	r0, [r0, #152]	; 0x98
   1485c:	cmp	r0, #0
   14860:	beq	148a0 <flatcc_builder_embed_buffer@@Base+0x12c>
   14864:	ldr	r0, [sp, #16]
   14868:	add	r0, r0, #4
   1486c:	str	r0, [sp, #16]
   14870:	add	r0, sp, #16
   14874:	add	r0, r0, #8
   14878:	ldr	r1, [sp, #20]
   1487c:	sub	r2, fp, #28
   14880:	str	r2, [r0, r1, lsl #3]
   14884:	ldr	r1, [sp, #20]
   14888:	add	r0, r0, r1, lsl #3
   1488c:	movw	r1, #4
   14890:	str	r1, [r0, #4]
   14894:	ldr	r0, [sp, #20]
   14898:	add	r0, r0, #1
   1489c:	str	r0, [sp, #20]
   148a0:	ldr	r0, [fp, #-20]	; 0xffffffec
   148a4:	cmp	r0, #0
   148a8:	bls	148ec <flatcc_builder_embed_buffer@@Base+0x178>
   148ac:	ldr	r0, [fp, #-20]	; 0xffffffec
   148b0:	ldr	r1, [sp, #16]
   148b4:	add	r0, r1, r0
   148b8:	str	r0, [sp, #16]
   148bc:	ldr	r0, [fp, #-16]
   148c0:	add	r1, sp, #16
   148c4:	add	r1, r1, #8
   148c8:	ldr	r2, [sp, #20]
   148cc:	str	r0, [r1, r2, lsl #3]
   148d0:	ldr	r0, [fp, #-20]	; 0xffffffec
   148d4:	ldr	r2, [sp, #20]
   148d8:	add	r1, r1, r2, lsl #3
   148dc:	str	r0, [r1, #4]
   148e0:	ldr	r0, [sp, #20]
   148e4:	add	r0, r0, #1
   148e8:	str	r0, [sp, #20]
   148ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   148f0:	cmp	r0, #0
   148f4:	bls	1493c <flatcc_builder_embed_buffer@@Base+0x1c8>
   148f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   148fc:	ldr	r1, [sp, #16]
   14900:	add	r0, r1, r0
   14904:	str	r0, [sp, #16]
   14908:	add	r0, sp, #16
   1490c:	add	r0, r0, #8
   14910:	ldr	r1, [sp, #20]
   14914:	ldr	r2, [pc, #60]	; 14958 <flatcc_builder_embed_buffer@@Base+0x1e4>
   14918:	ldr	r2, [pc, r2]
   1491c:	str	r2, [r0, r1, lsl #3]
   14920:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14924:	ldr	r2, [sp, #20]
   14928:	add	r0, r0, r2, lsl #3
   1492c:	str	r1, [r0, #4]
   14930:	ldr	r0, [sp, #20]
   14934:	add	r0, r0, #1
   14938:	str	r0, [sp, #20]
   1493c:	ldr	r0, [fp, #-8]
   14940:	add	r1, sp, #16
   14944:	bl	14b10 <flatcc_builder_embed_buffer@@Base+0x39c>
   14948:	str	r0, [fp, #-4]
   1494c:	ldr	r0, [fp, #-4]
   14950:	mov	sp, fp
   14954:	pop	{fp, pc}
   14958:	andeq	r8, r1, ip, lsr r7
   1495c:	push	{fp, lr}
   14960:	mov	fp, sp
   14964:	sub	sp, sp, #104	; 0x68
   14968:	str	r0, [fp, #-4]
   1496c:	str	r1, [fp, #-8]
   14970:	strh	r2, [fp, #-10]
   14974:	str	r3, [fp, #-16]
   14978:	ldrh	r0, [fp, #-10]
   1497c:	cmp	r0, #0
   14980:	beq	14990 <flatcc_builder_embed_buffer@@Base+0x21c>
   14984:	ldrh	r0, [fp, #-10]
   14988:	str	r0, [sp, #8]
   1498c:	b	149c4 <flatcc_builder_embed_buffer@@Base+0x250>
   14990:	ldr	r0, [fp, #-4]
   14994:	ldrh	r0, [r0, #132]	; 0x84
   14998:	cmp	r0, #0
   1499c:	beq	149b0 <flatcc_builder_embed_buffer@@Base+0x23c>
   149a0:	ldr	r0, [fp, #-4]
   149a4:	ldrh	r0, [r0, #132]	; 0x84
   149a8:	str	r0, [sp, #4]
   149ac:	b	149bc <flatcc_builder_embed_buffer@@Base+0x248>
   149b0:	movw	r0, #1
   149b4:	str	r0, [sp, #4]
   149b8:	b	149bc <flatcc_builder_embed_buffer@@Base+0x248>
   149bc:	ldr	r0, [sp, #4]
   149c0:	str	r0, [sp, #8]
   149c4:	ldr	r0, [sp, #8]
   149c8:	strh	r0, [fp, #-10]
   149cc:	ldr	r0, [fp, #-8]
   149d0:	movw	r1, #4
   149d4:	uxth	r1, r1
   149d8:	bl	164c8 <flatcc_builder_start_vector@@Base+0xac>
   149dc:	ldr	r0, [fp, #-8]
   149e0:	ldrh	r1, [fp, #-10]
   149e4:	bl	164c8 <flatcc_builder_start_vector@@Base+0xac>
   149e8:	ldr	r0, [fp, #-16]
   149ec:	cmp	r0, #0
   149f0:	bne	14aac <flatcc_builder_embed_buffer@@Base+0x338>
   149f4:	ldr	r0, [fp, #-4]
   149f8:	ldrh	r1, [fp, #-10]
   149fc:	bl	19910 <flatcc_builder_get_emit_context@@Base+0x18>
   14a00:	str	r0, [fp, #-20]	; 0xffffffec
   14a04:	ldr	r0, [fp, #-20]	; 0xffffffec
   14a08:	cmp	r0, #0
   14a0c:	beq	14aa8 <flatcc_builder_embed_buffer@@Base+0x334>
   14a10:	movw	r0, #0
   14a14:	str	r0, [sp, #12]
   14a18:	str	r0, [sp, #16]
   14a1c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14a20:	cmp	r0, #0
   14a24:	bls	14a6c <flatcc_builder_embed_buffer@@Base+0x2f8>
   14a28:	ldr	r0, [fp, #-20]	; 0xffffffec
   14a2c:	ldr	r1, [sp, #12]
   14a30:	add	r0, r1, r0
   14a34:	str	r0, [sp, #12]
   14a38:	add	r0, sp, #12
   14a3c:	add	r0, r0, #8
   14a40:	ldr	r1, [sp, #16]
   14a44:	ldr	r2, [pc, #120]	; 14ac4 <flatcc_builder_embed_buffer@@Base+0x350>
   14a48:	ldr	r2, [pc, r2]
   14a4c:	str	r2, [r0, r1, lsl #3]
   14a50:	ldr	r1, [fp, #-20]	; 0xffffffec
   14a54:	ldr	r2, [sp, #16]
   14a58:	add	r0, r0, r2, lsl #3
   14a5c:	str	r1, [r0, #4]
   14a60:	ldr	r0, [sp, #16]
   14a64:	add	r0, r0, #1
   14a68:	str	r0, [sp, #16]
   14a6c:	ldr	r0, [fp, #-4]
   14a70:	add	r1, sp, #12
   14a74:	bl	16aac <flatcc_builder_create_vtable@@Base+0x104>
   14a78:	movw	r1, #0
   14a7c:	cmp	r1, r0
   14a80:	bne	14aa4 <flatcc_builder_embed_buffer@@Base+0x330>
   14a84:	ldr	r0, [pc, #44]	; 14ab8 <flatcc_builder_embed_buffer@@Base+0x344>
   14a88:	add	r0, pc, r0
   14a8c:	ldr	r1, [pc, #40]	; 14abc <flatcc_builder_embed_buffer@@Base+0x348>
   14a90:	add	r1, pc, r1
   14a94:	ldr	r2, [pc, #36]	; 14ac0 <flatcc_builder_embed_buffer@@Base+0x34c>
   14a98:	add	r3, pc, r2
   14a9c:	movw	r2, #702	; 0x2be
   14aa0:	bl	12494 <__assert_fail@plt>
   14aa4:	b	14aa8 <flatcc_builder_embed_buffer@@Base+0x334>
   14aa8:	b	14aac <flatcc_builder_embed_buffer@@Base+0x338>
   14aac:	movw	r0, #0
   14ab0:	mov	sp, fp
   14ab4:	pop	{fp, pc}
   14ab8:	andeq	r7, r0, r9, asr r8
   14abc:	muleq	r0, r4, r6
   14ac0:	andeq	r7, r0, r6, asr #13
   14ac4:	andeq	r8, r1, ip, lsl #12
   14ac8:	sub	sp, sp, #12
   14acc:	str	r0, [sp, #8]
   14ad0:	str	r1, [sp, #4]
   14ad4:	strh	r2, [sp, #2]
   14ad8:	ldr	r0, [sp, #8]
   14adc:	ldr	r0, [r0, #136]	; 0x88
   14ae0:	ldr	r1, [sp, #4]
   14ae4:	sub	r0, r0, r1
   14ae8:	ldrh	r1, [sp, #2]
   14aec:	sub	r1, r1, #1
   14af0:	and	r0, r0, r1
   14af4:	add	sp, sp, #12
   14af8:	bx	lr
   14afc:	sub	sp, sp, #4
   14b00:	str	r0, [sp]
   14b04:	ldr	r0, [sp]
   14b08:	add	sp, sp, #4
   14b0c:	bx	lr
   14b10:	push	{fp, lr}
   14b14:	mov	fp, sp
   14b18:	sub	sp, sp, #24
   14b1c:	str	r0, [fp, #-4]
   14b20:	str	r1, [fp, #-8]
   14b24:	ldr	r0, [fp, #-4]
   14b28:	ldr	r0, [r0, #136]	; 0x88
   14b2c:	ldr	r1, [fp, #-8]
   14b30:	ldr	r1, [r1]
   14b34:	sub	r0, r0, r1
   14b38:	str	r0, [sp, #12]
   14b3c:	ldr	r0, [fp, #-8]
   14b40:	ldr	r0, [r0]
   14b44:	cmp	r0, #16
   14b48:	bls	14b60 <flatcc_builder_embed_buffer@@Base+0x3ec>
   14b4c:	ldr	r0, [fp, #-8]
   14b50:	ldr	r0, [r0]
   14b54:	sub	r0, r0, #16
   14b58:	cmn	r0, #1
   14b5c:	bhi	14b74 <flatcc_builder_embed_buffer@@Base+0x400>
   14b60:	ldr	r0, [sp, #12]
   14b64:	ldr	r1, [fp, #-4]
   14b68:	ldr	r1, [r1, #136]	; 0x88
   14b6c:	cmp	r0, r1
   14b70:	blt	14b94 <flatcc_builder_embed_buffer@@Base+0x420>
   14b74:	ldr	r0, [pc, #172]	; 14c28 <flatcc_builder_embed_buffer@@Base+0x4b4>
   14b78:	add	r0, pc, r0
   14b7c:	ldr	r1, [pc, #168]	; 14c2c <flatcc_builder_embed_buffer@@Base+0x4b8>
   14b80:	add	r1, pc, r1
   14b84:	ldr	r2, [pc, #164]	; 14c30 <flatcc_builder_embed_buffer@@Base+0x4bc>
   14b88:	add	r3, pc, r2
   14b8c:	movw	r2, #647	; 0x287
   14b90:	bl	12494 <__assert_fail@plt>
   14b94:	ldr	r0, [fp, #-4]
   14b98:	ldr	r0, [r0, #44]	; 0x2c
   14b9c:	ldr	r1, [fp, #-4]
   14ba0:	ldr	r1, [r1, #36]	; 0x24
   14ba4:	ldr	r2, [fp, #-8]
   14ba8:	add	r2, r2, #8
   14bac:	ldr	r3, [fp, #-8]
   14bb0:	ldr	r3, [r3, #4]
   14bb4:	ldr	ip, [sp, #12]
   14bb8:	ldr	lr, [fp, #-8]
   14bbc:	ldr	lr, [lr]
   14bc0:	str	r0, [sp, #8]
   14bc4:	mov	r0, r1
   14bc8:	mov	r1, r2
   14bcc:	mov	r2, r3
   14bd0:	mov	r3, ip
   14bd4:	str	lr, [sp]
   14bd8:	ldr	ip, [sp, #8]
   14bdc:	blx	ip
   14be0:	cmp	r0, #0
   14be4:	beq	14c08 <flatcc_builder_embed_buffer@@Base+0x494>
   14be8:	ldr	r0, [pc, #44]	; 14c1c <flatcc_builder_embed_buffer@@Base+0x4a8>
   14bec:	add	r0, pc, r0
   14bf0:	ldr	r1, [pc, #40]	; 14c20 <flatcc_builder_embed_buffer@@Base+0x4ac>
   14bf4:	add	r1, pc, r1
   14bf8:	ldr	r2, [pc, #36]	; 14c24 <flatcc_builder_embed_buffer@@Base+0x4b0>
   14bfc:	add	r3, pc, r2
   14c00:	movw	r2, #651	; 0x28b
   14c04:	bl	12494 <__assert_fail@plt>
   14c08:	ldr	r0, [sp, #12]
   14c0c:	ldr	r1, [fp, #-4]
   14c10:	str	r0, [r1, #136]	; 0x88
   14c14:	mov	sp, fp
   14c18:	pop	{fp, pc}
   14c1c:	strdeq	r7, [r0], -r5
   14c20:	andeq	r6, r0, r0, lsr r5
   14c24:	andeq	r7, r0, r4, lsr #11
   14c28:	andeq	r7, r0, r9, ror #14
   14c2c:	andeq	r6, r0, r4, lsr #11
   14c30:	andeq	r7, r0, r8, lsl r6

00014c34 <flatcc_builder_create_buffer@@Base>:
   14c34:	push	{fp, lr}
   14c38:	mov	fp, sp
   14c3c:	sub	sp, sp, #152	; 0x98
   14c40:	ldr	ip, [fp, #12]
   14c44:	ldr	lr, [fp, #8]
   14c48:	str	r0, [fp, #-8]
   14c4c:	str	r1, [fp, #-12]
   14c50:	strh	r2, [fp, #-14]
   14c54:	str	r3, [fp, #-20]	; 0xffffffec
   14c58:	strh	lr, [fp, #-22]	; 0xffffffea
   14c5c:	movw	r0, #0
   14c60:	str	r0, [fp, #-36]	; 0xffffffdc
   14c64:	str	r0, [sp, #28]
   14c68:	ldr	r0, [fp, #12]
   14c6c:	and	r0, r0, #1
   14c70:	cmp	r0, #0
   14c74:	movw	r0, #0
   14c78:	movne	r0, #1
   14c7c:	and	r0, r0, #1
   14c80:	str	r0, [sp, #24]
   14c84:	ldr	r0, [fp, #12]
   14c88:	and	r0, r0, #2
   14c8c:	cmp	r0, #0
   14c90:	movw	r0, #0
   14c94:	movne	r0, #1
   14c98:	and	r0, r0, #1
   14c9c:	str	r0, [sp, #20]
   14ca0:	ldr	r0, [fp, #-8]
   14ca4:	ldrh	r1, [fp, #-14]
   14ca8:	ldr	r3, [sp, #24]
   14cac:	sub	r2, fp, #22
   14cb0:	str	r1, [sp, #16]
   14cb4:	mov	r1, r2
   14cb8:	ldr	r2, [sp, #16]
   14cbc:	uxth	r2, r2
   14cc0:	str	ip, [sp, #12]
   14cc4:	bl	1495c <flatcc_builder_embed_buffer@@Base+0x1e8>
   14cc8:	cmp	r0, #0
   14ccc:	beq	14cdc <flatcc_builder_create_buffer@@Base+0xa8>
   14cd0:	movw	r0, #0
   14cd4:	str	r0, [fp, #-4]
   14cd8:	b	14fc0 <flatcc_builder_create_buffer@@Base+0x38c>
   14cdc:	ldr	r0, [fp, #-8]
   14ce0:	ldrh	r1, [fp, #-22]	; 0xffffffea
   14ce4:	bl	14fdc <flatcc_builder_create_buffer@@Base+0x3a8>
   14ce8:	ldr	r0, [fp, #-12]
   14cec:	movw	r1, #0
   14cf0:	cmp	r0, r1
   14cf4:	beq	14d34 <flatcc_builder_create_buffer@@Base+0x100>
   14cf8:	ldr	r0, [fp, #-12]
   14cfc:	ldrb	r1, [r0]
   14d00:	strb	r1, [sp, #28]
   14d04:	ldrb	r1, [r0, #1]
   14d08:	strb	r1, [sp, #29]
   14d0c:	ldrb	r1, [r0, #2]
   14d10:	strb	r1, [sp, #30]
   14d14:	ldrb	r0, [r0, #3]
   14d18:	strb	r0, [sp, #31]
   14d1c:	ldr	r0, [sp, #28]
   14d20:	bl	15010 <flatcc_builder_create_buffer@@Base+0x3dc>
   14d24:	str	r0, [sp, #28]
   14d28:	ldr	r0, [sp, #28]
   14d2c:	bl	14afc <flatcc_builder_embed_buffer@@Base+0x388>
   14d30:	str	r0, [sp, #28]
   14d34:	ldr	r0, [sp, #28]
   14d38:	cmp	r0, #0
   14d3c:	movw	r0, #0
   14d40:	movne	r0, #1
   14d44:	tst	r0, #1
   14d48:	movw	r0, #4
   14d4c:	mov	r1, r0
   14d50:	moveq	r1, #0
   14d54:	str	r1, [fp, #-36]	; 0xffffffdc
   14d58:	ldr	r1, [fp, #-8]
   14d5c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14d60:	add	r2, r2, #4
   14d64:	ldr	r3, [sp, #20]
   14d68:	cmp	r3, #0
   14d6c:	movw	r3, #0
   14d70:	movne	r3, #1
   14d74:	tst	r3, #1
   14d78:	moveq	r0, #0
   14d7c:	add	r0, r2, r0
   14d80:	str	r0, [sp, #8]
   14d84:	mov	r0, r1
   14d88:	ldr	r1, [sp, #8]
   14d8c:	ldrh	r2, [fp, #-22]	; 0xffffffea
   14d90:	bl	14ac8 <flatcc_builder_embed_buffer@@Base+0x354>
   14d94:	str	r0, [fp, #-32]	; 0xffffffe0
   14d98:	movw	r0, #0
   14d9c:	str	r0, [sp, #32]
   14da0:	str	r0, [sp, #36]	; 0x24
   14da4:	ldr	r0, [sp, #24]
   14da8:	cmp	r0, #0
   14dac:	bne	14dbc <flatcc_builder_create_buffer@@Base+0x188>
   14db0:	ldr	r0, [sp, #20]
   14db4:	cmp	r0, #0
   14db8:	beq	14df8 <flatcc_builder_create_buffer@@Base+0x1c4>
   14dbc:	ldr	r0, [sp, #32]
   14dc0:	add	r0, r0, #4
   14dc4:	str	r0, [sp, #32]
   14dc8:	add	r0, sp, #32
   14dcc:	add	r0, r0, #8
   14dd0:	ldr	r1, [sp, #36]	; 0x24
   14dd4:	sub	r2, fp, #44	; 0x2c
   14dd8:	str	r2, [r0, r1, lsl #3]
   14ddc:	ldr	r1, [sp, #36]	; 0x24
   14de0:	add	r0, r0, r1, lsl #3
   14de4:	movw	r1, #4
   14de8:	str	r1, [r0, #4]
   14dec:	ldr	r0, [sp, #36]	; 0x24
   14df0:	add	r0, r0, #1
   14df4:	str	r0, [sp, #36]	; 0x24
   14df8:	ldr	r0, [sp, #32]
   14dfc:	add	r0, r0, #4
   14e00:	str	r0, [sp, #32]
   14e04:	add	r0, sp, #32
   14e08:	add	r0, r0, #8
   14e0c:	ldr	r1, [sp, #36]	; 0x24
   14e10:	sub	r2, fp, #40	; 0x28
   14e14:	str	r2, [r0, r1, lsl #3]
   14e18:	ldr	r1, [sp, #36]	; 0x24
   14e1c:	add	r0, r0, r1, lsl #3
   14e20:	movw	r1, #4
   14e24:	str	r1, [r0, #4]
   14e28:	ldr	r0, [sp, #36]	; 0x24
   14e2c:	add	r0, r0, #1
   14e30:	str	r0, [sp, #36]	; 0x24
   14e34:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14e38:	cmp	r0, #0
   14e3c:	bls	14e80 <flatcc_builder_create_buffer@@Base+0x24c>
   14e40:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14e44:	ldr	r1, [sp, #32]
   14e48:	add	r0, r1, r0
   14e4c:	str	r0, [sp, #32]
   14e50:	add	r0, sp, #32
   14e54:	add	r0, r0, #8
   14e58:	ldr	r1, [sp, #36]	; 0x24
   14e5c:	add	r2, sp, #28
   14e60:	str	r2, [r0, r1, lsl #3]
   14e64:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14e68:	ldr	r2, [sp, #36]	; 0x24
   14e6c:	add	r0, r0, r2, lsl #3
   14e70:	str	r1, [r0, #4]
   14e74:	ldr	r0, [sp, #36]	; 0x24
   14e78:	add	r0, r0, #1
   14e7c:	str	r0, [sp, #36]	; 0x24
   14e80:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14e84:	cmp	r0, #0
   14e88:	bls	14ed0 <flatcc_builder_create_buffer@@Base+0x29c>
   14e8c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14e90:	ldr	r1, [sp, #32]
   14e94:	add	r0, r1, r0
   14e98:	str	r0, [sp, #32]
   14e9c:	add	r0, sp, #32
   14ea0:	add	r0, r0, #8
   14ea4:	ldr	r1, [sp, #36]	; 0x24
   14ea8:	ldr	r2, [pc, #296]	; 14fd8 <flatcc_builder_create_buffer@@Base+0x3a4>
   14eac:	ldr	r2, [pc, r2]
   14eb0:	str	r2, [r0, r1, lsl #3]
   14eb4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14eb8:	ldr	r2, [sp, #36]	; 0x24
   14ebc:	add	r0, r0, r2, lsl #3
   14ec0:	str	r1, [r0, #4]
   14ec4:	ldr	r0, [sp, #36]	; 0x24
   14ec8:	add	r0, r0, #1
   14ecc:	str	r0, [sp, #36]	; 0x24
   14ed0:	ldr	r0, [fp, #-8]
   14ed4:	ldr	r0, [r0, #136]	; 0x88
   14ed8:	ldr	r1, [sp, #32]
   14edc:	sub	r0, r0, r1
   14ee0:	ldr	r1, [sp, #24]
   14ee4:	cmp	r1, #0
   14ee8:	movw	r1, #1
   14eec:	str	r0, [sp, #4]
   14ef0:	str	r1, [sp]
   14ef4:	bne	14f0c <flatcc_builder_create_buffer@@Base+0x2d8>
   14ef8:	ldr	r0, [sp, #20]
   14efc:	cmp	r0, #0
   14f00:	movw	r0, #0
   14f04:	movne	r0, #1
   14f08:	str	r0, [sp]
   14f0c:	ldr	r0, [sp]
   14f10:	tst	r0, #1
   14f14:	movw	r0, #4
   14f18:	moveq	r0, #0
   14f1c:	ldr	r1, [sp, #4]
   14f20:	add	r0, r1, r0
   14f24:	str	r0, [fp, #-48]	; 0xffffffd0
   14f28:	ldr	r0, [sp, #24]
   14f2c:	cmp	r0, #0
   14f30:	beq	14f50 <flatcc_builder_create_buffer@@Base+0x31c>
   14f34:	ldr	r0, [fp, #-8]
   14f38:	ldr	r0, [r0, #144]	; 0x90
   14f3c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14f40:	sub	r0, r0, r1
   14f44:	bl	14afc <flatcc_builder_embed_buffer@@Base+0x388>
   14f48:	str	r0, [fp, #-44]	; 0xffffffd4
   14f4c:	b	14f68 <flatcc_builder_create_buffer@@Base+0x334>
   14f50:	ldr	r0, [fp, #-8]
   14f54:	ldr	r0, [r0, #140]	; 0x8c
   14f58:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14f5c:	sub	r0, r0, r1
   14f60:	bl	14afc <flatcc_builder_embed_buffer@@Base+0x388>
   14f64:	str	r0, [fp, #-44]	; 0xffffffd4
   14f68:	ldr	r0, [fp, #-20]	; 0xffffffec
   14f6c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14f70:	sub	r0, r0, r1
   14f74:	bl	14afc <flatcc_builder_embed_buffer@@Base+0x388>
   14f78:	str	r0, [fp, #-40]	; 0xffffffd8
   14f7c:	ldr	r0, [fp, #-8]
   14f80:	add	r1, sp, #32
   14f84:	bl	14b10 <flatcc_builder_embed_buffer@@Base+0x39c>
   14f88:	str	r0, [fp, #-28]	; 0xffffffe4
   14f8c:	movw	r1, #0
   14f90:	cmp	r1, r0
   14f94:	bne	14fb8 <flatcc_builder_create_buffer@@Base+0x384>
   14f98:	ldr	r0, [pc, #44]	; 14fcc <flatcc_builder_create_buffer@@Base+0x398>
   14f9c:	add	r0, pc, r0
   14fa0:	ldr	r1, [pc, #40]	; 14fd0 <flatcc_builder_create_buffer@@Base+0x39c>
   14fa4:	add	r1, pc, r1
   14fa8:	ldr	r2, [pc, #36]	; 14fd4 <flatcc_builder_create_buffer@@Base+0x3a0>
   14fac:	add	r3, pc, r2
   14fb0:	movw	r2, #772	; 0x304
   14fb4:	bl	12494 <__assert_fail@plt>
   14fb8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14fbc:	str	r0, [fp, #-4]
   14fc0:	ldr	r0, [fp, #-4]
   14fc4:	mov	sp, fp
   14fc8:	pop	{fp, pc}
   14fcc:	andeq	r7, r0, r5, asr #6
   14fd0:	andeq	r6, r0, r0, lsl #3
   14fd4:	andeq	r6, r0, sl, asr #5
   14fd8:	andeq	r8, r1, r8, lsr #3
   14fdc:	sub	sp, sp, #8
   14fe0:	str	r0, [sp, #4]
   14fe4:	strh	r1, [sp, #2]
   14fe8:	ldr	r0, [sp, #4]
   14fec:	ldrh	r0, [r0, #128]	; 0x80
   14ff0:	ldrh	r1, [sp, #2]
   14ff4:	cmp	r0, r1
   14ff8:	bge	15008 <flatcc_builder_create_buffer@@Base+0x3d4>
   14ffc:	ldrh	r0, [sp, #2]
   15000:	ldr	r1, [sp, #4]
   15004:	strh	r0, [r1, #128]	; 0x80
   15008:	add	sp, sp, #8
   1500c:	bx	lr
   15010:	sub	sp, sp, #4
   15014:	str	r0, [sp]
   15018:	ldr	r0, [sp]
   1501c:	add	sp, sp, #4
   15020:	bx	lr

00015024 <flatcc_builder_create_struct@@Base>:
   15024:	push	{fp, lr}
   15028:	mov	fp, sp
   1502c:	sub	sp, sp, #96	; 0x60
   15030:	str	r0, [fp, #-4]
   15034:	str	r1, [fp, #-8]
   15038:	str	r2, [fp, #-12]
   1503c:	strh	r3, [fp, #-14]
   15040:	ldrh	r0, [fp, #-14]
   15044:	cmp	r0, #1
   15048:	blt	15050 <flatcc_builder_create_struct@@Base+0x2c>
   1504c:	b	15070 <flatcc_builder_create_struct@@Base+0x4c>
   15050:	ldr	r0, [pc, #244]	; 1514c <flatcc_builder_create_struct@@Base+0x128>
   15054:	add	r0, pc, r0
   15058:	ldr	r1, [pc, #240]	; 15150 <flatcc_builder_create_struct@@Base+0x12c>
   1505c:	add	r1, pc, r1
   15060:	ldr	r2, [pc, #236]	; 15154 <flatcc_builder_create_struct@@Base+0x130>
   15064:	add	r3, pc, r2
   15068:	movw	r2, #783	; 0x30f
   1506c:	bl	12494 <__assert_fail@plt>
   15070:	ldr	r0, [fp, #-4]
   15074:	ldrh	r1, [fp, #-14]
   15078:	bl	14fdc <flatcc_builder_create_buffer@@Base+0x3a8>
   1507c:	ldr	r0, [fp, #-4]
   15080:	ldr	r1, [fp, #-12]
   15084:	ldrh	r2, [fp, #-14]
   15088:	bl	14ac8 <flatcc_builder_embed_buffer@@Base+0x354>
   1508c:	str	r0, [fp, #-20]	; 0xffffffec
   15090:	movw	r0, #0
   15094:	str	r0, [sp, #4]
   15098:	str	r0, [sp, #8]
   1509c:	ldr	r0, [fp, #-12]
   150a0:	cmp	r0, #0
   150a4:	bls	150e8 <flatcc_builder_create_struct@@Base+0xc4>
   150a8:	ldr	r0, [fp, #-12]
   150ac:	ldr	r1, [sp, #4]
   150b0:	add	r0, r1, r0
   150b4:	str	r0, [sp, #4]
   150b8:	ldr	r0, [fp, #-8]
   150bc:	add	r1, sp, #4
   150c0:	add	r1, r1, #8
   150c4:	ldr	r2, [sp, #8]
   150c8:	str	r0, [r1, r2, lsl #3]
   150cc:	ldr	r0, [fp, #-12]
   150d0:	ldr	r2, [sp, #8]
   150d4:	add	r1, r1, r2, lsl #3
   150d8:	str	r0, [r1, #4]
   150dc:	ldr	r0, [sp, #8]
   150e0:	add	r0, r0, #1
   150e4:	str	r0, [sp, #8]
   150e8:	ldr	r0, [fp, #-20]	; 0xffffffec
   150ec:	cmp	r0, #0
   150f0:	bls	15138 <flatcc_builder_create_struct@@Base+0x114>
   150f4:	ldr	r0, [fp, #-20]	; 0xffffffec
   150f8:	ldr	r1, [sp, #4]
   150fc:	add	r0, r1, r0
   15100:	str	r0, [sp, #4]
   15104:	add	r0, sp, #4
   15108:	add	r0, r0, #8
   1510c:	ldr	r1, [sp, #8]
   15110:	ldr	r2, [pc, #64]	; 15158 <flatcc_builder_create_struct@@Base+0x134>
   15114:	ldr	r2, [pc, r2]
   15118:	str	r2, [r0, r1, lsl #3]
   1511c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15120:	ldr	r2, [sp, #8]
   15124:	add	r0, r0, r2, lsl #3
   15128:	str	r1, [r0, #4]
   1512c:	ldr	r0, [sp, #8]
   15130:	add	r0, r0, #1
   15134:	str	r0, [sp, #8]
   15138:	ldr	r0, [fp, #-4]
   1513c:	add	r1, sp, #4
   15140:	bl	14b10 <flatcc_builder_embed_buffer@@Base+0x39c>
   15144:	mov	sp, fp
   15148:	pop	{fp, pc}
   1514c:	andeq	r6, r0, r5, lsr #5
   15150:	andeq	r6, r0, r8, asr #1
   15154:	andeq	r6, r0, r0, lsr #5
   15158:	andeq	r7, r1, r0, asr #30

0001515c <flatcc_builder_start_buffer@@Base>:
   1515c:	push	{fp, lr}
   15160:	mov	fp, sp
   15164:	sub	sp, sp, #32
   15168:	str	r0, [fp, #-8]
   1516c:	str	r1, [fp, #-12]
   15170:	strh	r2, [fp, #-14]
   15174:	str	r3, [sp, #12]
   15178:	ldr	r0, [fp, #-8]
   1517c:	ldr	r1, [fp, #-8]
   15180:	ldrh	r1, [r1, #128]	; 0x80
   15184:	bl	152d4 <flatcc_builder_start_buffer@@Base+0x178>
   15188:	cmp	r0, #0
   1518c:	beq	1519c <flatcc_builder_start_buffer@@Base+0x40>
   15190:	mvn	r0, #0
   15194:	str	r0, [fp, #-4]
   15198:	b	152c4 <flatcc_builder_start_buffer@@Base+0x168>
   1519c:	ldr	r0, [fp, #-8]
   151a0:	movw	r1, #1
   151a4:	strh	r1, [r0, #128]	; 0x80
   151a8:	ldr	r0, [fp, #-8]
   151ac:	ldrh	r0, [r0, #132]	; 0x84
   151b0:	ldr	r1, [fp, #-8]
   151b4:	ldr	r1, [r1, #32]
   151b8:	strh	r0, [r1, #34]	; 0x22
   151bc:	ldrh	r0, [fp, #-14]
   151c0:	ldr	r1, [fp, #-8]
   151c4:	strh	r0, [r1, #132]	; 0x84
   151c8:	ldr	r0, [fp, #-8]
   151cc:	ldrh	r0, [r0, #164]	; 0xa4
   151d0:	ldr	r1, [fp, #-8]
   151d4:	ldr	r1, [r1, #32]
   151d8:	strh	r0, [r1, #32]
   151dc:	ldr	r0, [sp, #12]
   151e0:	ldr	r1, [fp, #-8]
   151e4:	strh	r0, [r1, #164]	; 0xa4
   151e8:	ldr	r0, [fp, #-8]
   151ec:	ldr	r0, [r0, #144]	; 0x90
   151f0:	ldr	r1, [fp, #-8]
   151f4:	ldr	r1, [r1, #32]
   151f8:	str	r0, [r1, #20]
   151fc:	ldr	r0, [fp, #-8]
   15200:	ldr	r0, [r0, #152]	; 0x98
   15204:	ldr	r1, [fp, #-8]
   15208:	ldr	r1, [r1, #32]
   1520c:	str	r0, [r1, #28]
   15210:	ldr	r0, [fp, #-8]
   15214:	ldr	r0, [r0, #136]	; 0x88
   15218:	ldr	r1, [fp, #-8]
   1521c:	str	r0, [r1, #144]	; 0x90
   15220:	ldr	r0, [fp, #-8]
   15224:	ldr	r1, [r0, #148]	; 0x94
   15228:	add	r2, r1, #1
   1522c:	str	r2, [r0, #148]	; 0x94
   15230:	ldr	r0, [fp, #-8]
   15234:	str	r1, [r0, #152]	; 0x98
   15238:	ldr	r0, [fp, #-8]
   1523c:	ldr	r0, [r0, #168]	; 0xa8
   15240:	ldr	r1, [fp, #-8]
   15244:	ldr	r1, [r1, #32]
   15248:	str	r0, [r1, #16]
   1524c:	ldr	r0, [fp, #-8]
   15250:	add	r0, r0, #168	; 0xa8
   15254:	ldr	r1, [fp, #-12]
   15258:	movw	r2, #0
   1525c:	cmp	r1, r2
   15260:	str	r0, [sp, #8]
   15264:	beq	15274 <flatcc_builder_start_buffer@@Base+0x118>
   15268:	ldr	r0, [fp, #-12]
   1526c:	str	r0, [sp, #4]
   15270:	b	15284 <flatcc_builder_start_buffer@@Base+0x128>
   15274:	ldr	r0, [pc, #84]	; 152d0 <flatcc_builder_start_buffer@@Base+0x174>
   15278:	ldr	r0, [pc, r0]
   1527c:	str	r0, [sp, #4]
   15280:	b	15284 <flatcc_builder_start_buffer@@Base+0x128>
   15284:	ldr	r0, [sp, #4]
   15288:	ldrb	r1, [r0]
   1528c:	ldr	r2, [sp, #8]
   15290:	strb	r1, [r2]
   15294:	ldrb	r1, [r0, #1]
   15298:	strb	r1, [r2, #1]
   1529c:	ldrb	r1, [r0, #2]
   152a0:	strb	r1, [r2, #2]
   152a4:	ldrb	r0, [r0, #3]
   152a8:	strb	r0, [r2, #3]
   152ac:	ldr	r0, [fp, #-8]
   152b0:	ldr	r0, [r0, #32]
   152b4:	movw	r1, #1
   152b8:	strh	r1, [r0, #14]
   152bc:	movw	r0, #0
   152c0:	str	r0, [fp, #-4]
   152c4:	ldr	r0, [fp, #-4]
   152c8:	mov	sp, fp
   152cc:	pop	{fp, pc}
   152d0:	ldrdeq	r7, [r1], -ip
   152d4:	push	{fp, lr}
   152d8:	mov	fp, sp
   152dc:	sub	sp, sp, #24
   152e0:	str	r0, [fp, #-8]
   152e4:	strh	r1, [fp, #-10]
   152e8:	ldr	r0, [fp, #-8]
   152ec:	ldr	r1, [r0, #156]	; 0x9c
   152f0:	add	r1, r1, #1
   152f4:	str	r1, [r0, #156]	; 0x9c
   152f8:	ldr	r0, [fp, #-8]
   152fc:	ldr	r0, [r0, #160]	; 0xa0
   15300:	cmp	r1, r0
   15304:	ble	153f0 <flatcc_builder_start_buffer@@Base+0x294>
   15308:	ldr	r0, [fp, #-8]
   1530c:	ldr	r0, [r0, #176]	; 0xb0
   15310:	cmp	r0, #0
   15314:	ble	1533c <flatcc_builder_start_buffer@@Base+0x1e0>
   15318:	ldr	r0, [fp, #-8]
   1531c:	ldr	r0, [r0, #156]	; 0x9c
   15320:	ldr	r1, [fp, #-8]
   15324:	ldr	r1, [r1, #176]	; 0xb0
   15328:	cmp	r0, r1
   1532c:	ble	1533c <flatcc_builder_start_buffer@@Base+0x1e0>
   15330:	mvn	r0, #0
   15334:	str	r0, [fp, #-4]
   15338:	b	15494 <flatcc_builder_start_buffer@@Base+0x338>
   1533c:	ldr	r0, [fp, #-8]
   15340:	ldr	r1, [fp, #-8]
   15344:	ldr	r1, [r1, #156]	; 0x9c
   15348:	sub	r1, r1, #1
   1534c:	movw	r2, #36	; 0x24
   15350:	mul	r1, r1, r2
   15354:	movw	r3, #4
   15358:	str	r1, [sp, #8]
   1535c:	mov	r1, r3
   15360:	ldr	r3, [sp, #8]
   15364:	str	r2, [sp, #4]
   15368:	mov	r2, r3
   1536c:	ldr	r3, [sp, #4]
   15370:	movw	ip, #0
   15374:	str	ip, [sp]
   15378:	bl	14464 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   1537c:	ldr	r1, [fp, #-8]
   15380:	str	r0, [r1, #32]
   15384:	movw	r1, #0
   15388:	cmp	r0, r1
   1538c:	bne	1539c <flatcc_builder_start_buffer@@Base+0x240>
   15390:	mvn	r0, #0
   15394:	str	r0, [fp, #-4]
   15398:	b	15494 <flatcc_builder_start_buffer@@Base+0x338>
   1539c:	ldr	r0, [fp, #-8]
   153a0:	ldr	r0, [r0, #88]	; 0x58
   153a4:	movw	r1, #36	; 0x24
   153a8:	udiv	r0, r0, r1
   153ac:	ldr	r1, [fp, #-8]
   153b0:	str	r0, [r1, #160]	; 0xa0
   153b4:	ldr	r0, [fp, #-8]
   153b8:	ldr	r0, [r0, #176]	; 0xb0
   153bc:	cmp	r0, #0
   153c0:	ble	153ec <flatcc_builder_start_buffer@@Base+0x290>
   153c4:	ldr	r0, [fp, #-8]
   153c8:	ldr	r0, [r0, #176]	; 0xb0
   153cc:	ldr	r1, [fp, #-8]
   153d0:	ldr	r1, [r1, #160]	; 0xa0
   153d4:	cmp	r0, r1
   153d8:	bge	153ec <flatcc_builder_start_buffer@@Base+0x290>
   153dc:	ldr	r0, [fp, #-8]
   153e0:	ldr	r0, [r0, #176]	; 0xb0
   153e4:	ldr	r1, [fp, #-8]
   153e8:	str	r0, [r1, #160]	; 0xa0
   153ec:	b	15400 <flatcc_builder_start_buffer@@Base+0x2a4>
   153f0:	ldr	r0, [fp, #-8]
   153f4:	ldr	r1, [r0, #32]
   153f8:	add	r1, r1, #36	; 0x24
   153fc:	str	r1, [r0, #32]
   15400:	ldr	r0, [fp, #-8]
   15404:	ldr	r0, [r0, #20]
   15408:	ldr	r1, [fp, #-8]
   1540c:	ldr	r1, [r1, #32]
   15410:	str	r0, [r1, #8]
   15414:	ldr	r0, [fp, #-8]
   15418:	ldrh	r0, [r0, #130]	; 0x82
   1541c:	ldr	r1, [fp, #-8]
   15420:	ldr	r1, [r1, #32]
   15424:	strh	r0, [r1, #12]
   15428:	ldrh	r0, [fp, #-10]
   1542c:	ldr	r1, [fp, #-8]
   15430:	strh	r0, [r1, #130]	; 0x82
   15434:	ldr	r0, [fp, #-8]
   15438:	ldr	r0, [r0, #28]
   1543c:	ldr	r1, [fp, #-8]
   15440:	ldr	r1, [r1, #32]
   15444:	str	r0, [r1]
   15448:	ldr	r0, [fp, #-8]
   1544c:	ldr	r0, [r0, #32]
   15450:	mvn	r1, #3
   15454:	str	r1, [r0, #4]
   15458:	ldr	r0, [fp, #-8]
   1545c:	ldr	r0, [r0, #28]
   15460:	ldr	r1, [fp, #-8]
   15464:	ldr	r1, [r1, #20]
   15468:	add	r0, r0, r1
   1546c:	add	r0, r0, #8
   15470:	sub	r0, r0, #1
   15474:	mvn	r1, #7
   15478:	and	r0, r0, r1
   1547c:	ldr	r1, [fp, #-8]
   15480:	str	r0, [r1, #28]
   15484:	ldr	r0, [fp, #-8]
   15488:	movw	r1, #0
   1548c:	str	r1, [r0, #20]
   15490:	str	r1, [fp, #-4]
   15494:	ldr	r0, [fp, #-4]
   15498:	mov	sp, fp
   1549c:	pop	{fp, pc}

000154a0 <flatcc_builder_end_buffer@@Base>:
   154a0:	push	{r4, sl, fp, lr}
   154a4:	add	fp, sp, #8
   154a8:	sub	sp, sp, #32
   154ac:	str	r0, [fp, #-16]
   154b0:	str	r1, [sp, #20]
   154b4:	ldr	r0, [fp, #-16]
   154b8:	ldrh	r0, [r0, #164]	; 0xa4
   154bc:	and	r0, r0, #2
   154c0:	str	r0, [sp, #12]
   154c4:	ldr	r0, [fp, #-16]
   154c8:	ldr	r0, [r0, #152]	; 0x98
   154cc:	cmp	r0, #0
   154d0:	movw	r0, #0
   154d4:	moveq	r0, #1
   154d8:	tst	r0, #1
   154dc:	movw	r0, #0
   154e0:	moveq	r0, #1
   154e4:	ldr	r1, [sp, #12]
   154e8:	orr	r0, r1, r0
   154ec:	str	r0, [sp, #12]
   154f0:	ldr	r0, [fp, #-16]
   154f4:	ldr	r0, [r0, #32]
   154f8:	ldrh	r0, [r0, #14]
   154fc:	cmp	r0, #1
   15500:	bne	15508 <flatcc_builder_end_buffer@@Base+0x68>
   15504:	b	15528 <flatcc_builder_end_buffer@@Base+0x88>
   15508:	ldr	r0, [pc, #244]	; 15604 <flatcc_builder_end_buffer@@Base+0x164>
   1550c:	add	r0, pc, r0
   15510:	ldr	r1, [pc, #240]	; 15608 <flatcc_builder_end_buffer@@Base+0x168>
   15514:	add	r1, pc, r1
   15518:	ldr	r2, [pc, #236]	; 1560c <flatcc_builder_end_buffer@@Base+0x16c>
   1551c:	add	r3, pc, r2
   15520:	movw	r2, #838	; 0x346
   15524:	bl	12494 <__assert_fail@plt>
   15528:	ldr	r0, [fp, #-16]
   1552c:	ldr	r1, [fp, #-16]
   15530:	ldrh	r1, [r1, #132]	; 0x84
   15534:	bl	14fdc <flatcc_builder_create_buffer@@Base+0x3a8>
   15538:	ldr	r0, [fp, #-16]
   1553c:	ldr	r1, [fp, #-16]
   15540:	add	r1, r1, #168	; 0xa8
   15544:	ldr	lr, [fp, #-16]
   15548:	ldrh	lr, [lr, #132]	; 0x84
   1554c:	ldr	r3, [sp, #20]
   15550:	ldr	r2, [fp, #-16]
   15554:	ldrh	r2, [r2, #128]	; 0x80
   15558:	ldr	ip, [sp, #12]
   1555c:	uxth	lr, lr
   15560:	str	r2, [sp, #8]
   15564:	mov	r2, lr
   15568:	ldr	lr, [sp, #8]
   1556c:	uxth	r4, lr
   15570:	str	r4, [sp]
   15574:	str	ip, [sp, #4]
   15578:	bl	14c34 <flatcc_builder_create_buffer@@Base>
   1557c:	str	r0, [sp, #16]
   15580:	movw	r1, #0
   15584:	cmp	r1, r0
   15588:	bne	15598 <flatcc_builder_end_buffer@@Base+0xf8>
   1558c:	movw	r0, #0
   15590:	str	r0, [fp, #-12]
   15594:	b	155f8 <flatcc_builder_end_buffer@@Base+0x158>
   15598:	ldr	r0, [fp, #-16]
   1559c:	ldr	r0, [r0, #32]
   155a0:	ldr	r0, [r0, #20]
   155a4:	ldr	r1, [fp, #-16]
   155a8:	str	r0, [r1, #144]	; 0x90
   155ac:	ldr	r0, [fp, #-16]
   155b0:	ldr	r0, [r0, #32]
   155b4:	ldr	r0, [r0, #28]
   155b8:	ldr	r1, [fp, #-16]
   155bc:	str	r0, [r1, #152]	; 0x98
   155c0:	ldr	r0, [fp, #-16]
   155c4:	ldr	r0, [r0, #32]
   155c8:	ldr	r0, [r0, #16]
   155cc:	ldr	r1, [fp, #-16]
   155d0:	str	r0, [r1, #168]	; 0xa8
   155d4:	ldr	r0, [fp, #-16]
   155d8:	ldr	r0, [r0, #32]
   155dc:	ldrh	r0, [r0, #32]
   155e0:	ldr	r1, [fp, #-16]
   155e4:	strh	r0, [r1, #164]	; 0xa4
   155e8:	ldr	r0, [fp, #-16]
   155ec:	bl	15610 <flatcc_builder_end_buffer@@Base+0x170>
   155f0:	ldr	r0, [sp, #16]
   155f4:	str	r0, [fp, #-12]
   155f8:	ldr	r0, [fp, #-12]
   155fc:	sub	sp, fp, #8
   15600:	pop	{r4, sl, fp, pc}
   15604:	andeq	r5, r0, lr, asr lr
   15608:	andeq	r5, r0, r0, lsl ip
   1560c:	andeq	r5, r0, sl, ror lr
   15610:	push	{fp, lr}
   15614:	mov	fp, sp
   15618:	sub	sp, sp, #8
   1561c:	str	r0, [sp, #4]
   15620:	ldr	r0, [sp, #4]
   15624:	ldr	r0, [r0, #16]
   15628:	ldr	r1, [sp, #4]
   1562c:	ldr	r2, [r1, #20]
   15630:	movw	r1, #0
   15634:	and	r1, r1, #255	; 0xff
   15638:	bl	12458 <memset@plt>
   1563c:	ldr	r0, [sp, #4]
   15640:	ldr	r0, [r0, #32]
   15644:	ldr	r0, [r0, #8]
   15648:	ldr	r1, [sp, #4]
   1564c:	str	r0, [r1, #20]
   15650:	ldr	r0, [sp, #4]
   15654:	ldr	r0, [r0, #32]
   15658:	ldr	r0, [r0]
   1565c:	ldr	r1, [sp, #4]
   15660:	str	r0, [r1, #28]
   15664:	ldr	r0, [sp, #4]
   15668:	ldr	r1, [sp, #4]
   1566c:	ldr	r1, [r1, #32]
   15670:	ldr	r1, [r1, #4]
   15674:	bl	1573c <flatcc_builder_start_struct@@Base+0x70>
   15678:	ldr	r0, [sp, #4]
   1567c:	ldr	r1, [sp, #4]
   15680:	ldrh	r1, [r1, #130]	; 0x82
   15684:	bl	14fdc <flatcc_builder_create_buffer@@Base+0x3a8>
   15688:	ldr	r0, [sp, #4]
   1568c:	ldr	r0, [r0, #32]
   15690:	ldrh	r0, [r0, #12]
   15694:	ldr	r1, [sp, #4]
   15698:	strh	r0, [r1, #130]	; 0x82
   1569c:	ldr	r0, [sp, #4]
   156a0:	ldr	r1, [r0, #32]
   156a4:	mvn	r2, #35	; 0x23
   156a8:	add	r1, r1, r2
   156ac:	str	r1, [r0, #32]
   156b0:	ldr	r0, [sp, #4]
   156b4:	ldr	r1, [r0, #156]	; 0x9c
   156b8:	mvn	r2, #0
   156bc:	add	r1, r1, r2
   156c0:	str	r1, [r0, #156]	; 0x9c
   156c4:	mov	sp, fp
   156c8:	pop	{fp, pc}

000156cc <flatcc_builder_start_struct@@Base>:
   156cc:	push	{fp, lr}
   156d0:	mov	fp, sp
   156d4:	sub	sp, sp, #16
   156d8:	str	r0, [sp, #8]
   156dc:	str	r1, [sp, #4]
   156e0:	strh	r2, [sp, #2]
   156e4:	ldr	r0, [sp, #8]
   156e8:	ldrh	r1, [sp, #2]
   156ec:	bl	152d4 <flatcc_builder_start_buffer@@Base+0x178>
   156f0:	cmp	r0, #0
   156f4:	beq	15704 <flatcc_builder_start_struct@@Base+0x38>
   156f8:	movw	r0, #0
   156fc:	str	r0, [fp, #-4]
   15700:	b	15730 <flatcc_builder_start_struct@@Base+0x64>
   15704:	ldr	r0, [sp, #8]
   15708:	ldr	r0, [r0, #32]
   1570c:	movw	r1, #2
   15710:	strh	r1, [r0, #14]
   15714:	ldr	r0, [sp, #8]
   15718:	mvn	r1, #3
   1571c:	bl	1573c <flatcc_builder_start_struct@@Base+0x70>
   15720:	ldr	r0, [sp, #8]
   15724:	ldr	r1, [sp, #4]
   15728:	bl	157c8 <flatcc_builder_start_struct@@Base+0xfc>
   1572c:	str	r0, [fp, #-4]
   15730:	ldr	r0, [fp, #-4]
   15734:	mov	sp, fp
   15738:	pop	{fp, pc}
   1573c:	sub	sp, sp, #12
   15740:	str	r0, [sp, #8]
   15744:	str	r1, [sp, #4]
   15748:	ldr	r0, [sp, #8]
   1574c:	add	r0, r0, #52	; 0x34
   15750:	add	r0, r0, #8
   15754:	str	r0, [sp]
   15758:	ldr	r0, [sp, #8]
   1575c:	ldr	r0, [r0, #60]	; 0x3c
   15760:	ldr	r1, [sp, #8]
   15764:	ldr	r1, [r1, #28]
   15768:	add	r0, r0, r1
   1576c:	ldr	r1, [sp, #8]
   15770:	str	r0, [r1, #16]
   15774:	ldr	r0, [sp]
   15778:	ldr	r0, [r0, #4]
   1577c:	ldr	r1, [sp, #8]
   15780:	ldr	r1, [r1, #28]
   15784:	sub	r0, r0, r1
   15788:	ldr	r1, [sp, #8]
   1578c:	str	r0, [r1, #24]
   15790:	ldr	r0, [sp, #8]
   15794:	ldr	r0, [r0, #24]
   15798:	ldr	r1, [sp, #4]
   1579c:	cmp	r0, r1
   157a0:	bls	157b0 <flatcc_builder_start_struct@@Base+0xe4>
   157a4:	ldr	r0, [sp, #4]
   157a8:	ldr	r1, [sp, #8]
   157ac:	str	r0, [r1, #24]
   157b0:	ldr	r0, [sp, #4]
   157b4:	ldr	r1, [sp, #8]
   157b8:	ldr	r1, [r1, #32]
   157bc:	str	r0, [r1, #4]
   157c0:	add	sp, sp, #12
   157c4:	bx	lr
   157c8:	push	{fp, lr}
   157cc:	mov	fp, sp
   157d0:	sub	sp, sp, #16
   157d4:	str	r0, [sp, #8]
   157d8:	str	r1, [sp, #4]
   157dc:	ldr	r0, [sp, #8]
   157e0:	ldr	r0, [r0, #20]
   157e4:	str	r0, [sp]
   157e8:	ldr	r0, [sp, #4]
   157ec:	ldr	r1, [sp, #8]
   157f0:	ldr	r2, [r1, #20]
   157f4:	add	r0, r2, r0
   157f8:	str	r0, [r1, #20]
   157fc:	ldr	r1, [sp, #8]
   15800:	ldr	r1, [r1, #24]
   15804:	cmp	r0, r1
   15808:	bcc	1583c <flatcc_builder_start_struct@@Base+0x170>
   1580c:	ldr	r0, [sp, #8]
   15810:	ldr	r1, [sp, #8]
   15814:	ldr	r1, [r1, #20]
   15818:	add	r1, r1, #1
   1581c:	mvn	r2, #3
   15820:	bl	19938 <flatcc_builder_get_emit_context@@Base+0x40>
   15824:	cmp	r0, #0
   15828:	beq	15838 <flatcc_builder_start_struct@@Base+0x16c>
   1582c:	movw	r0, #0
   15830:	str	r0, [fp, #-4]
   15834:	b	15850 <flatcc_builder_start_struct@@Base+0x184>
   15838:	b	1583c <flatcc_builder_start_struct@@Base+0x170>
   1583c:	ldr	r0, [sp, #8]
   15840:	ldr	r0, [r0, #16]
   15844:	ldr	r1, [sp]
   15848:	add	r0, r0, r1
   1584c:	str	r0, [fp, #-4]
   15850:	ldr	r0, [fp, #-4]
   15854:	mov	sp, fp
   15858:	pop	{fp, pc}

0001585c <flatcc_builder_struct_edit@@Base>:
   1585c:	sub	sp, sp, #4
   15860:	str	r0, [sp]
   15864:	ldr	r0, [sp]
   15868:	ldr	r0, [r0, #16]
   1586c:	add	sp, sp, #4
   15870:	bx	lr

00015874 <flatcc_builder_end_struct@@Base>:
   15874:	push	{fp, lr}
   15878:	mov	fp, sp
   1587c:	sub	sp, sp, #16
   15880:	str	r0, [sp, #8]
   15884:	ldr	r0, [sp, #8]
   15888:	ldr	r0, [r0, #32]
   1588c:	ldrh	r0, [r0, #14]
   15890:	cmp	r0, #2
   15894:	bne	1589c <flatcc_builder_end_struct@@Base+0x28>
   15898:	b	158bc <flatcc_builder_end_struct@@Base+0x48>
   1589c:	ldr	r0, [pc, #112]	; 15914 <flatcc_builder_end_struct@@Base+0xa0>
   158a0:	add	r0, pc, r0
   158a4:	ldr	r1, [pc, #108]	; 15918 <flatcc_builder_end_struct@@Base+0xa4>
   158a8:	add	r1, pc, r1
   158ac:	ldr	r2, [pc, #104]	; 1591c <flatcc_builder_end_struct@@Base+0xa8>
   158b0:	add	r3, pc, r2
   158b4:	movw	r2, #872	; 0x368
   158b8:	bl	12494 <__assert_fail@plt>
   158bc:	ldr	r0, [sp, #8]
   158c0:	ldr	r1, [sp, #8]
   158c4:	ldr	r1, [r1, #16]
   158c8:	ldr	r2, [sp, #8]
   158cc:	ldr	r2, [r2, #20]
   158d0:	ldr	r3, [sp, #8]
   158d4:	ldrh	r3, [r3, #130]	; 0x82
   158d8:	bl	15024 <flatcc_builder_create_struct@@Base>
   158dc:	str	r0, [sp, #4]
   158e0:	movw	r1, #0
   158e4:	cmp	r1, r0
   158e8:	bne	158f8 <flatcc_builder_end_struct@@Base+0x84>
   158ec:	movw	r0, #0
   158f0:	str	r0, [fp, #-4]
   158f4:	b	15908 <flatcc_builder_end_struct@@Base+0x94>
   158f8:	ldr	r0, [sp, #8]
   158fc:	bl	15610 <flatcc_builder_end_buffer@@Base+0x170>
   15900:	ldr	r0, [sp, #4]
   15904:	str	r0, [fp, #-4]
   15908:	ldr	r0, [fp, #-4]
   1590c:	mov	sp, fp
   15910:	pop	{fp, pc}
   15914:	andeq	r5, r0, pc, asr #22
   15918:	andeq	r5, r0, ip, ror r8
   1591c:	andeq	r5, r0, fp, ror #22

00015920 <flatcc_builder_extend_vector@@Base>:
   15920:	push	{fp, lr}
   15924:	mov	fp, sp
   15928:	sub	sp, sp, #16
   1592c:	str	r0, [sp, #8]
   15930:	str	r1, [sp, #4]
   15934:	ldr	r0, [sp, #8]
   15938:	ldr	r1, [sp, #4]
   1593c:	ldr	r2, [sp, #8]
   15940:	ldr	r2, [r2, #32]
   15944:	ldr	r2, [r2, #24]
   15948:	bl	1598c <flatcc_builder_extend_vector@@Base+0x6c>
   1594c:	cmp	r0, #0
   15950:	beq	15960 <flatcc_builder_extend_vector@@Base+0x40>
   15954:	movw	r0, #0
   15958:	str	r0, [fp, #-4]
   1595c:	b	15980 <flatcc_builder_extend_vector@@Base+0x60>
   15960:	ldr	r0, [sp, #8]
   15964:	ldr	r1, [sp, #8]
   15968:	ldr	r1, [r1, #32]
   1596c:	ldr	r1, [r1, #16]
   15970:	ldr	r2, [sp, #4]
   15974:	mul	r1, r1, r2
   15978:	bl	157c8 <flatcc_builder_start_struct@@Base+0xfc>
   1597c:	str	r0, [fp, #-4]
   15980:	ldr	r0, [fp, #-4]
   15984:	mov	sp, fp
   15988:	pop	{fp, pc}
   1598c:	push	{fp, lr}
   15990:	mov	fp, sp
   15994:	sub	sp, sp, #24
   15998:	str	r0, [fp, #-8]
   1599c:	str	r1, [sp, #12]
   159a0:	str	r2, [sp, #8]
   159a4:	ldr	r0, [fp, #-8]
   159a8:	ldr	r0, [r0, #32]
   159ac:	ldr	r0, [r0, #20]
   159b0:	str	r0, [sp, #4]
   159b4:	ldr	r0, [sp, #4]
   159b8:	ldr	r1, [sp, #12]
   159bc:	add	r0, r0, r1
   159c0:	str	r0, [sp]
   159c4:	ldr	r0, [sp, #4]
   159c8:	ldr	r1, [sp]
   159cc:	cmp	r0, r1
   159d0:	bhi	159e4 <flatcc_builder_extend_vector@@Base+0xc4>
   159d4:	ldr	r0, [sp]
   159d8:	ldr	r1, [sp, #8]
   159dc:	cmp	r0, r1
   159e0:	bls	15a34 <flatcc_builder_extend_vector@@Base+0x114>
   159e4:	ldr	r0, [sp, #4]
   159e8:	ldr	r1, [sp]
   159ec:	cmp	r0, r1
   159f0:	bhi	15a08 <flatcc_builder_extend_vector@@Base+0xe8>
   159f4:	ldr	r0, [sp]
   159f8:	ldr	r1, [sp, #8]
   159fc:	cmp	r0, r1
   15a00:	bhi	15a08 <flatcc_builder_extend_vector@@Base+0xe8>
   15a04:	b	15a28 <flatcc_builder_extend_vector@@Base+0x108>
   15a08:	ldr	r0, [pc, #72]	; 15a58 <flatcc_builder_extend_vector@@Base+0x138>
   15a0c:	add	r0, pc, r0
   15a10:	ldr	r1, [pc, #68]	; 15a5c <flatcc_builder_extend_vector@@Base+0x13c>
   15a14:	add	r1, pc, r1
   15a18:	ldr	r2, [pc, #64]	; 15a60 <flatcc_builder_extend_vector@@Base+0x140>
   15a1c:	add	r3, pc, r2
   15a20:	movw	r2, #892	; 0x37c
   15a24:	bl	12494 <__assert_fail@plt>
   15a28:	mvn	r0, #0
   15a2c:	str	r0, [fp, #-4]
   15a30:	b	15a4c <flatcc_builder_extend_vector@@Base+0x12c>
   15a34:	ldr	r0, [sp]
   15a38:	ldr	r1, [fp, #-8]
   15a3c:	ldr	r1, [r1, #32]
   15a40:	str	r0, [r1, #20]
   15a44:	movw	r0, #0
   15a48:	str	r0, [fp, #-4]
   15a4c:	ldr	r0, [fp, #-4]
   15a50:	mov	sp, fp
   15a54:	pop	{fp, pc}
   15a58:	ldrdeq	r6, [r0], -lr
   15a5c:	andeq	r5, r0, r0, lsl r7
   15a60:	andeq	r6, r0, r9, ror #15

00015a64 <flatcc_builder_vector_push@@Base>:
   15a64:	push	{fp, lr}
   15a68:	mov	fp, sp
   15a6c:	sub	sp, sp, #16
   15a70:	str	r0, [sp, #8]
   15a74:	str	r1, [sp, #4]
   15a78:	ldr	r0, [sp, #8]
   15a7c:	ldr	r0, [r0, #32]
   15a80:	ldrh	r0, [r0, #14]
   15a84:	cmp	r0, #4
   15a88:	bne	15a90 <flatcc_builder_vector_push@@Base+0x2c>
   15a8c:	b	15ab0 <flatcc_builder_vector_push@@Base+0x4c>
   15a90:	ldr	r0, [pc, #196]	; 15b5c <flatcc_builder_vector_push@@Base+0xf8>
   15a94:	add	r0, pc, r0
   15a98:	ldr	r1, [pc, #192]	; 15b60 <flatcc_builder_vector_push@@Base+0xfc>
   15a9c:	add	r1, pc, r1
   15aa0:	ldr	r2, [pc, #188]	; 15b64 <flatcc_builder_vector_push@@Base+0x100>
   15aa4:	add	r3, pc, r2
   15aa8:	movw	r2, #907	; 0x38b
   15aac:	bl	12494 <__assert_fail@plt>
   15ab0:	ldr	r0, [sp, #8]
   15ab4:	ldr	r0, [r0, #32]
   15ab8:	ldr	r0, [r0, #20]
   15abc:	ldr	r1, [sp, #8]
   15ac0:	ldr	r1, [r1, #32]
   15ac4:	ldr	r1, [r1, #24]
   15ac8:	cmp	r0, r1
   15acc:	bls	15b20 <flatcc_builder_vector_push@@Base+0xbc>
   15ad0:	ldr	r0, [sp, #8]
   15ad4:	ldr	r0, [r0, #32]
   15ad8:	ldr	r0, [r0, #20]
   15adc:	ldr	r1, [sp, #8]
   15ae0:	ldr	r1, [r1, #32]
   15ae4:	ldr	r1, [r1, #24]
   15ae8:	cmp	r0, r1
   15aec:	bhi	15af4 <flatcc_builder_vector_push@@Base+0x90>
   15af0:	b	15b14 <flatcc_builder_vector_push@@Base+0xb0>
   15af4:	ldr	r0, [pc, #108]	; 15b68 <flatcc_builder_vector_push@@Base+0x104>
   15af8:	add	r0, pc, r0
   15afc:	ldr	r1, [pc, #104]	; 15b6c <flatcc_builder_vector_push@@Base+0x108>
   15b00:	add	r1, pc, r1
   15b04:	ldr	r2, [pc, #100]	; 15b70 <flatcc_builder_vector_push@@Base+0x10c>
   15b08:	add	r3, pc, r2
   15b0c:	movw	r2, #908	; 0x38c
   15b10:	bl	12494 <__assert_fail@plt>
   15b14:	movw	r0, #0
   15b18:	str	r0, [fp, #-4]
   15b1c:	b	15b50 <flatcc_builder_vector_push@@Base+0xec>
   15b20:	ldr	r0, [sp, #8]
   15b24:	ldr	r0, [r0, #32]
   15b28:	ldr	r1, [r0, #20]
   15b2c:	add	r1, r1, #1
   15b30:	str	r1, [r0, #20]
   15b34:	ldr	r0, [sp, #8]
   15b38:	ldr	r1, [sp, #4]
   15b3c:	ldr	r2, [sp, #8]
   15b40:	ldr	r2, [r2, #32]
   15b44:	ldr	r2, [r2, #16]
   15b48:	bl	15b74 <flatcc_builder_vector_push@@Base+0x110>
   15b4c:	str	r0, [fp, #-4]
   15b50:	ldr	r0, [fp, #-4]
   15b54:	mov	sp, fp
   15b58:	pop	{fp, pc}
   15b5c:	andeq	r5, r0, sl, asr #19
   15b60:	andeq	r5, r0, r8, lsl #13
   15b64:	andeq	r5, r0, r6, ror #19
   15b68:	ldrdeq	r5, [r0], -r5	; <UNPREDICTABLE>
   15b6c:	andeq	r5, r0, r4, lsr #12
   15b70:	andeq	r5, r0, r2, lsl #19
   15b74:	push	{fp, lr}
   15b78:	mov	fp, sp
   15b7c:	sub	sp, sp, #24
   15b80:	str	r0, [fp, #-8]
   15b84:	str	r1, [sp, #12]
   15b88:	str	r2, [sp, #8]
   15b8c:	ldr	r0, [fp, #-8]
   15b90:	ldr	r1, [sp, #8]
   15b94:	bl	157c8 <flatcc_builder_start_struct@@Base+0xfc>
   15b98:	str	r0, [sp, #4]
   15b9c:	movw	r1, #0
   15ba0:	cmp	r0, r1
   15ba4:	bne	15bb4 <flatcc_builder_vector_push@@Base+0x150>
   15ba8:	movw	r0, #0
   15bac:	str	r0, [fp, #-4]
   15bb0:	b	15bcc <flatcc_builder_vector_push@@Base+0x168>
   15bb4:	ldr	r0, [sp, #4]
   15bb8:	ldr	r1, [sp, #12]
   15bbc:	ldr	r2, [sp, #8]
   15bc0:	bl	123e0 <memcpy@plt>
   15bc4:	ldr	r0, [sp, #4]
   15bc8:	str	r0, [fp, #-4]
   15bcc:	ldr	r0, [fp, #-4]
   15bd0:	mov	sp, fp
   15bd4:	pop	{fp, pc}

00015bd8 <flatcc_builder_append_vector@@Base>:
   15bd8:	push	{fp, lr}
   15bdc:	mov	fp, sp
   15be0:	sub	sp, sp, #16
   15be4:	str	r0, [sp, #8]
   15be8:	str	r1, [sp, #4]
   15bec:	str	r2, [sp]
   15bf0:	ldr	r0, [sp, #8]
   15bf4:	ldr	r0, [r0, #32]
   15bf8:	ldrh	r0, [r0, #14]
   15bfc:	cmp	r0, #4
   15c00:	bne	15c08 <flatcc_builder_append_vector@@Base+0x30>
   15c04:	b	15c28 <flatcc_builder_append_vector@@Base+0x50>
   15c08:	ldr	r0, [pc, #116]	; 15c84 <flatcc_builder_append_vector@@Base+0xac>
   15c0c:	add	r0, pc, r0
   15c10:	ldr	r1, [pc, #112]	; 15c88 <flatcc_builder_append_vector@@Base+0xb0>
   15c14:	add	r1, pc, r1
   15c18:	ldr	r2, [pc, #108]	; 15c8c <flatcc_builder_append_vector@@Base+0xb4>
   15c1c:	add	r3, pc, r2
   15c20:	movw	r2, #915	; 0x393
   15c24:	bl	12494 <__assert_fail@plt>
   15c28:	ldr	r0, [sp, #8]
   15c2c:	ldr	r1, [sp]
   15c30:	ldr	r2, [sp, #8]
   15c34:	ldr	r2, [r2, #32]
   15c38:	ldr	r2, [r2, #24]
   15c3c:	bl	1598c <flatcc_builder_extend_vector@@Base+0x6c>
   15c40:	cmp	r0, #0
   15c44:	beq	15c54 <flatcc_builder_append_vector@@Base+0x7c>
   15c48:	movw	r0, #0
   15c4c:	str	r0, [fp, #-4]
   15c50:	b	15c78 <flatcc_builder_append_vector@@Base+0xa0>
   15c54:	ldr	r0, [sp, #8]
   15c58:	ldr	r1, [sp, #4]
   15c5c:	ldr	r2, [sp, #8]
   15c60:	ldr	r2, [r2, #32]
   15c64:	ldr	r2, [r2, #16]
   15c68:	ldr	r3, [sp]
   15c6c:	mul	r2, r2, r3
   15c70:	bl	15b74 <flatcc_builder_vector_push@@Base+0x110>
   15c74:	str	r0, [fp, #-4]
   15c78:	ldr	r0, [fp, #-4]
   15c7c:	mov	sp, fp
   15c80:	pop	{fp, pc}
   15c84:	andeq	r5, r0, r2, asr r8
   15c88:	andeq	r5, r0, r0, lsl r5
   15c8c:	andeq	r5, r0, lr, ror #17

00015c90 <flatcc_builder_extend_offset_vector@@Base>:
   15c90:	push	{fp, lr}
   15c94:	mov	fp, sp
   15c98:	sub	sp, sp, #16
   15c9c:	ldr	r2, [pc, #68]	; 15ce8 <flatcc_builder_extend_offset_vector@@Base+0x58>
   15ca0:	str	r0, [sp, #8]
   15ca4:	str	r1, [sp, #4]
   15ca8:	ldr	r0, [sp, #8]
   15cac:	ldr	r1, [sp, #4]
   15cb0:	bl	1598c <flatcc_builder_extend_vector@@Base+0x6c>
   15cb4:	cmp	r0, #0
   15cb8:	beq	15cc8 <flatcc_builder_extend_offset_vector@@Base+0x38>
   15cbc:	movw	r0, #0
   15cc0:	str	r0, [fp, #-4]
   15cc4:	b	15cdc <flatcc_builder_extend_offset_vector@@Base+0x4c>
   15cc8:	ldr	r0, [sp, #8]
   15ccc:	ldr	r1, [sp, #4]
   15cd0:	lsl	r1, r1, #2
   15cd4:	bl	157c8 <flatcc_builder_start_struct@@Base+0xfc>
   15cd8:	str	r0, [fp, #-4]
   15cdc:	ldr	r0, [fp, #-4]
   15ce0:	mov	sp, fp
   15ce4:	pop	{fp, pc}
   15ce8:	svccc	0x00ffffff

00015cec <flatcc_builder_offset_vector_push@@Base>:
   15cec:	push	{fp, lr}
   15cf0:	mov	fp, sp
   15cf4:	sub	sp, sp, #16
   15cf8:	str	r0, [sp, #8]
   15cfc:	str	r1, [sp, #4]
   15d00:	ldr	r0, [sp, #8]
   15d04:	ldr	r0, [r0, #32]
   15d08:	ldrh	r0, [r0, #14]
   15d0c:	cmp	r0, #5
   15d10:	bne	15d18 <flatcc_builder_offset_vector_push@@Base+0x2c>
   15d14:	b	15d38 <flatcc_builder_offset_vector_push@@Base+0x4c>
   15d18:	ldr	r0, [pc, #152]	; 15db8 <flatcc_builder_offset_vector_push@@Base+0xcc>
   15d1c:	add	r0, pc, r0
   15d20:	ldr	r1, [pc, #148]	; 15dbc <flatcc_builder_offset_vector_push@@Base+0xd0>
   15d24:	add	r1, pc, r1
   15d28:	ldr	r2, [pc, #144]	; 15dc0 <flatcc_builder_offset_vector_push@@Base+0xd4>
   15d2c:	add	r3, pc, r2
   15d30:	movw	r2, #934	; 0x3a6
   15d34:	bl	12494 <__assert_fail@plt>
   15d38:	ldr	r0, [pc, #132]	; 15dc4 <flatcc_builder_offset_vector_push@@Base+0xd8>
   15d3c:	ldr	r1, [sp, #8]
   15d40:	ldr	r1, [r1, #32]
   15d44:	ldr	r1, [r1, #20]
   15d48:	cmp	r1, r0
   15d4c:	bne	15d5c <flatcc_builder_offset_vector_push@@Base+0x70>
   15d50:	movw	r0, #0
   15d54:	str	r0, [fp, #-4]
   15d58:	b	15dac <flatcc_builder_offset_vector_push@@Base+0xc0>
   15d5c:	ldr	r0, [sp, #8]
   15d60:	ldr	r0, [r0, #32]
   15d64:	ldr	r1, [r0, #20]
   15d68:	add	r1, r1, #1
   15d6c:	str	r1, [r0, #20]
   15d70:	ldr	r0, [sp, #8]
   15d74:	movw	r1, #4
   15d78:	bl	157c8 <flatcc_builder_start_struct@@Base+0xfc>
   15d7c:	str	r0, [sp]
   15d80:	movw	r1, #0
   15d84:	cmp	r1, r0
   15d88:	bne	15d98 <flatcc_builder_offset_vector_push@@Base+0xac>
   15d8c:	movw	r0, #0
   15d90:	str	r0, [fp, #-4]
   15d94:	b	15dac <flatcc_builder_offset_vector_push@@Base+0xc0>
   15d98:	ldr	r0, [sp, #4]
   15d9c:	ldr	r1, [sp]
   15da0:	str	r0, [r1]
   15da4:	ldr	r0, [sp]
   15da8:	str	r0, [fp, #-4]
   15dac:	ldr	r0, [fp, #-4]
   15db0:	mov	sp, fp
   15db4:	pop	{fp, pc}
   15db8:	andeq	r5, r0, fp, lsr r8
   15dbc:	andeq	r5, r0, r0, lsl #8
   15dc0:	andeq	r5, r0, lr, asr r8
   15dc4:	svccc	0x00ffffff

00015dc8 <flatcc_builder_append_offset_vector@@Base>:
   15dc8:	push	{fp, lr}
   15dcc:	mov	fp, sp
   15dd0:	sub	sp, sp, #16
   15dd4:	str	r0, [sp, #8]
   15dd8:	str	r1, [sp, #4]
   15ddc:	str	r2, [sp]
   15de0:	ldr	r0, [sp, #8]
   15de4:	ldr	r0, [r0, #32]
   15de8:	ldrh	r0, [r0, #14]
   15dec:	cmp	r0, #5
   15df0:	bne	15df8 <flatcc_builder_append_offset_vector@@Base+0x30>
   15df4:	b	15e18 <flatcc_builder_append_offset_vector@@Base+0x50>
   15df8:	ldr	r0, [pc, #96]	; 15e60 <flatcc_builder_append_offset_vector@@Base+0x98>
   15dfc:	add	r0, pc, r0
   15e00:	ldr	r1, [pc, #92]	; 15e64 <flatcc_builder_append_offset_vector@@Base+0x9c>
   15e04:	add	r1, pc, r1
   15e08:	ldr	r2, [pc, #88]	; 15e68 <flatcc_builder_append_offset_vector@@Base+0xa0>
   15e0c:	add	r3, pc, r2
   15e10:	movw	r2, #948	; 0x3b4
   15e14:	bl	12494 <__assert_fail@plt>
   15e18:	ldr	r2, [pc, #76]	; 15e6c <flatcc_builder_append_offset_vector@@Base+0xa4>
   15e1c:	ldr	r0, [sp, #8]
   15e20:	ldr	r1, [sp]
   15e24:	bl	1598c <flatcc_builder_extend_vector@@Base+0x6c>
   15e28:	cmp	r0, #0
   15e2c:	beq	15e3c <flatcc_builder_append_offset_vector@@Base+0x74>
   15e30:	movw	r0, #0
   15e34:	str	r0, [fp, #-4]
   15e38:	b	15e54 <flatcc_builder_append_offset_vector@@Base+0x8c>
   15e3c:	ldr	r0, [sp, #8]
   15e40:	ldr	r1, [sp, #4]
   15e44:	ldr	r2, [sp]
   15e48:	lsl	r2, r2, #2
   15e4c:	bl	15b74 <flatcc_builder_vector_push@@Base+0x110>
   15e50:	str	r0, [fp, #-4]
   15e54:	ldr	r0, [fp, #-4]
   15e58:	mov	sp, fp
   15e5c:	pop	{fp, pc}
   15e60:	andeq	r5, r0, fp, asr r7
   15e64:	andeq	r5, r0, r0, lsr #6
   15e68:	andeq	r5, r0, r0, ror #15
   15e6c:	svccc	0x00ffffff

00015e70 <flatcc_builder_extend_string@@Base>:
   15e70:	push	{fp, lr}
   15e74:	mov	fp, sp
   15e78:	sub	sp, sp, #16
   15e7c:	str	r0, [sp, #8]
   15e80:	str	r1, [sp, #4]
   15e84:	ldr	r0, [sp, #8]
   15e88:	ldr	r0, [r0, #32]
   15e8c:	ldrh	r0, [r0, #14]
   15e90:	cmp	r0, #6
   15e94:	bne	15e9c <flatcc_builder_extend_string@@Base+0x2c>
   15e98:	b	15ebc <flatcc_builder_extend_string@@Base+0x4c>
   15e9c:	ldr	r0, [pc, #88]	; 15efc <flatcc_builder_extend_string@@Base+0x8c>
   15ea0:	add	r0, pc, r0
   15ea4:	ldr	r1, [pc, #84]	; 15f00 <flatcc_builder_extend_string@@Base+0x90>
   15ea8:	add	r1, pc, r1
   15eac:	ldr	r2, [pc, #80]	; 15f04 <flatcc_builder_extend_string@@Base+0x94>
   15eb0:	add	r3, pc, r2
   15eb4:	movw	r2, #957	; 0x3bd
   15eb8:	bl	12494 <__assert_fail@plt>
   15ebc:	ldr	r0, [sp, #8]
   15ec0:	ldr	r1, [sp, #4]
   15ec4:	mvn	r2, #0
   15ec8:	bl	1598c <flatcc_builder_extend_vector@@Base+0x6c>
   15ecc:	cmp	r0, #0
   15ed0:	beq	15ee0 <flatcc_builder_extend_string@@Base+0x70>
   15ed4:	movw	r0, #0
   15ed8:	str	r0, [fp, #-4]
   15edc:	b	15ef0 <flatcc_builder_extend_string@@Base+0x80>
   15ee0:	ldr	r0, [sp, #8]
   15ee4:	ldr	r1, [sp, #4]
   15ee8:	bl	157c8 <flatcc_builder_start_struct@@Base+0xfc>
   15eec:	str	r0, [fp, #-4]
   15ef0:	ldr	r0, [fp, #-4]
   15ef4:	mov	sp, fp
   15ef8:	pop	{fp, pc}
   15efc:	andeq	r5, r0, r0, asr #15
   15f00:	andeq	r5, r0, ip, ror r2
   15f04:	ldrdeq	r5, [r0], -ip

00015f08 <flatcc_builder_append_string@@Base>:
   15f08:	push	{fp, lr}
   15f0c:	mov	fp, sp
   15f10:	sub	sp, sp, #16
   15f14:	str	r0, [sp, #8]
   15f18:	str	r1, [sp, #4]
   15f1c:	str	r2, [sp]
   15f20:	ldr	r0, [sp, #8]
   15f24:	ldr	r0, [r0, #32]
   15f28:	ldrh	r0, [r0, #14]
   15f2c:	cmp	r0, #6
   15f30:	bne	15f38 <flatcc_builder_append_string@@Base+0x30>
   15f34:	b	15f58 <flatcc_builder_append_string@@Base+0x50>
   15f38:	ldr	r0, [pc, #92]	; 15f9c <flatcc_builder_append_string@@Base+0x94>
   15f3c:	add	r0, pc, r0
   15f40:	ldr	r1, [pc, #88]	; 15fa0 <flatcc_builder_append_string@@Base+0x98>
   15f44:	add	r1, pc, r1
   15f48:	ldr	r2, [pc, #84]	; 15fa4 <flatcc_builder_append_string@@Base+0x9c>
   15f4c:	add	r3, pc, r2
   15f50:	movw	r2, #966	; 0x3c6
   15f54:	bl	12494 <__assert_fail@plt>
   15f58:	ldr	r0, [sp, #8]
   15f5c:	ldr	r1, [sp]
   15f60:	mvn	r2, #0
   15f64:	bl	1598c <flatcc_builder_extend_vector@@Base+0x6c>
   15f68:	cmp	r0, #0
   15f6c:	beq	15f7c <flatcc_builder_append_string@@Base+0x74>
   15f70:	movw	r0, #0
   15f74:	str	r0, [fp, #-4]
   15f78:	b	15f90 <flatcc_builder_append_string@@Base+0x88>
   15f7c:	ldr	r0, [sp, #8]
   15f80:	ldr	r1, [sp, #4]
   15f84:	ldr	r2, [sp]
   15f88:	bl	15b74 <flatcc_builder_vector_push@@Base+0x110>
   15f8c:	str	r0, [fp, #-4]
   15f90:	ldr	r0, [fp, #-4]
   15f94:	mov	sp, fp
   15f98:	pop	{fp, pc}
   15f9c:	andeq	r5, r0, r4, lsr #14
   15fa0:	andeq	r5, r0, r0, ror #3
   15fa4:	andeq	r5, r0, pc, ror r7

00015fa8 <flatcc_builder_append_string_str@@Base>:
   15fa8:	push	{fp, lr}
   15fac:	mov	fp, sp
   15fb0:	sub	sp, sp, #24
   15fb4:	str	r0, [fp, #-4]
   15fb8:	str	r1, [fp, #-8]
   15fbc:	ldr	r0, [fp, #-4]
   15fc0:	ldr	r1, [fp, #-8]
   15fc4:	ldr	r2, [fp, #-8]
   15fc8:	str	r0, [sp, #12]
   15fcc:	mov	r0, r2
   15fd0:	str	r1, [sp, #8]
   15fd4:	bl	12440 <strlen@plt>
   15fd8:	ldr	r1, [sp, #12]
   15fdc:	str	r0, [sp, #4]
   15fe0:	mov	r0, r1
   15fe4:	ldr	r1, [sp, #8]
   15fe8:	ldr	r2, [sp, #4]
   15fec:	bl	15f08 <flatcc_builder_append_string@@Base>
   15ff0:	mov	sp, fp
   15ff4:	pop	{fp, pc}

00015ff8 <flatcc_builder_append_string_strn@@Base>:
   15ff8:	push	{fp, lr}
   15ffc:	mov	fp, sp
   16000:	sub	sp, sp, #24
   16004:	str	r0, [fp, #-4]
   16008:	str	r1, [fp, #-8]
   1600c:	str	r2, [sp, #12]
   16010:	ldr	r0, [fp, #-4]
   16014:	ldr	r1, [fp, #-8]
   16018:	ldr	r2, [fp, #-8]
   1601c:	ldr	r3, [sp, #12]
   16020:	str	r0, [sp, #8]
   16024:	mov	r0, r2
   16028:	str	r1, [sp, #4]
   1602c:	mov	r1, r3
   16030:	bl	16054 <flatcc_builder_append_string_strn@@Base+0x5c>
   16034:	ldr	r1, [sp, #8]
   16038:	str	r0, [sp]
   1603c:	mov	r0, r1
   16040:	ldr	r1, [sp, #4]
   16044:	ldr	r2, [sp]
   16048:	bl	15f08 <flatcc_builder_append_string@@Base>
   1604c:	mov	sp, fp
   16050:	pop	{fp, pc}
   16054:	push	{fp, lr}
   16058:	mov	fp, sp
   1605c:	sub	sp, sp, #16
   16060:	str	r0, [fp, #-4]
   16064:	str	r1, [sp, #8]
   16068:	ldr	r0, [fp, #-4]
   1606c:	ldr	r2, [sp, #8]
   16070:	mov	r1, #0
   16074:	bl	12470 <memchr@plt>
   16078:	str	r0, [sp, #4]
   1607c:	ldr	r0, [sp, #4]
   16080:	movw	r1, #0
   16084:	cmp	r0, r1
   16088:	beq	160a0 <flatcc_builder_append_string_strn@@Base+0xa8>
   1608c:	ldr	r0, [sp, #4]
   16090:	ldr	r1, [fp, #-4]
   16094:	sub	r0, r0, r1
   16098:	str	r0, [sp]
   1609c:	b	160a8 <flatcc_builder_append_string_strn@@Base+0xb0>
   160a0:	ldr	r0, [sp, #8]
   160a4:	str	r0, [sp]
   160a8:	ldr	r0, [sp]
   160ac:	mov	sp, fp
   160b0:	pop	{fp, pc}

000160b4 <flatcc_builder_truncate_vector@@Base>:
   160b4:	push	{fp, lr}
   160b8:	mov	fp, sp
   160bc:	sub	sp, sp, #16
   160c0:	str	r0, [sp, #8]
   160c4:	str	r1, [sp, #4]
   160c8:	ldr	r0, [sp, #8]
   160cc:	ldr	r0, [r0, #32]
   160d0:	ldrh	r0, [r0, #14]
   160d4:	cmp	r0, #4
   160d8:	bne	160e0 <flatcc_builder_truncate_vector@@Base+0x2c>
   160dc:	b	16100 <flatcc_builder_truncate_vector@@Base+0x4c>
   160e0:	ldr	r0, [pc, #192]	; 161a8 <flatcc_builder_truncate_vector@@Base+0xf4>
   160e4:	add	r0, pc, r0
   160e8:	ldr	r1, [pc, #188]	; 161ac <flatcc_builder_truncate_vector@@Base+0xf8>
   160ec:	add	r1, pc, r1
   160f0:	ldr	r2, [pc, #184]	; 161b0 <flatcc_builder_truncate_vector@@Base+0xfc>
   160f4:	add	r3, pc, r2
   160f8:	movw	r2, #985	; 0x3d9
   160fc:	bl	12494 <__assert_fail@plt>
   16100:	ldr	r0, [sp, #8]
   16104:	ldr	r0, [r0, #32]
   16108:	ldr	r0, [r0, #20]
   1610c:	ldr	r1, [sp, #4]
   16110:	cmp	r0, r1
   16114:	bcs	16160 <flatcc_builder_truncate_vector@@Base+0xac>
   16118:	ldr	r0, [sp, #8]
   1611c:	ldr	r0, [r0, #32]
   16120:	ldr	r0, [r0, #20]
   16124:	ldr	r1, [sp, #4]
   16128:	cmp	r0, r1
   1612c:	bcc	16134 <flatcc_builder_truncate_vector@@Base+0x80>
   16130:	b	16154 <flatcc_builder_truncate_vector@@Base+0xa0>
   16134:	ldr	r0, [pc, #120]	; 161b4 <flatcc_builder_truncate_vector@@Base+0x100>
   16138:	add	r0, pc, r0
   1613c:	ldr	r1, [pc, #116]	; 161b8 <flatcc_builder_truncate_vector@@Base+0x104>
   16140:	add	r1, pc, r1
   16144:	ldr	r2, [pc, #112]	; 161bc <flatcc_builder_truncate_vector@@Base+0x108>
   16148:	add	r3, pc, r2
   1614c:	movw	r2, #986	; 0x3da
   16150:	bl	12494 <__assert_fail@plt>
   16154:	mvn	r0, #0
   16158:	str	r0, [fp, #-4]
   1615c:	b	1619c <flatcc_builder_truncate_vector@@Base+0xe8>
   16160:	ldr	r0, [sp, #4]
   16164:	ldr	r1, [sp, #8]
   16168:	ldr	r1, [r1, #32]
   1616c:	ldr	r2, [r1, #20]
   16170:	sub	r0, r2, r0
   16174:	str	r0, [r1, #20]
   16178:	ldr	r0, [sp, #8]
   1617c:	ldr	r1, [sp, #8]
   16180:	ldr	r1, [r1, #32]
   16184:	ldr	r1, [r1, #16]
   16188:	ldr	r2, [sp, #4]
   1618c:	mul	r1, r1, r2
   16190:	bl	161c0 <flatcc_builder_truncate_vector@@Base+0x10c>
   16194:	movw	r0, #0
   16198:	str	r0, [fp, #-4]
   1619c:	ldr	r0, [fp, #-4]
   161a0:	mov	sp, fp
   161a4:	pop	{fp, pc}
   161a8:	andeq	r5, r0, sl, ror r3
   161ac:	andeq	r5, r0, r8, lsr r0
   161b0:	andeq	r5, r0, r4, lsr #12
   161b4:	andeq	r5, r0, pc, lsl r6
   161b8:	andeq	r4, r0, r4, ror #31
   161bc:	ldrdeq	r5, [r0], -r0
   161c0:	push	{fp, lr}
   161c4:	mov	fp, sp
   161c8:	sub	sp, sp, #8
   161cc:	str	r0, [sp, #4]
   161d0:	str	r1, [sp]
   161d4:	ldr	r0, [sp]
   161d8:	ldr	r1, [sp, #4]
   161dc:	ldr	r2, [r1, #20]
   161e0:	sub	r0, r2, r0
   161e4:	str	r0, [r1, #20]
   161e8:	ldr	r0, [sp, #4]
   161ec:	ldr	r0, [r0, #16]
   161f0:	ldr	r1, [sp, #4]
   161f4:	ldr	r1, [r1, #20]
   161f8:	add	r0, r0, r1
   161fc:	ldr	r2, [sp]
   16200:	movw	r1, #0
   16204:	and	r1, r1, #255	; 0xff
   16208:	bl	12458 <memset@plt>
   1620c:	mov	sp, fp
   16210:	pop	{fp, pc}

00016214 <flatcc_builder_truncate_offset_vector@@Base>:
   16214:	push	{fp, lr}
   16218:	mov	fp, sp
   1621c:	sub	sp, sp, #16
   16220:	str	r0, [sp, #8]
   16224:	str	r1, [sp, #4]
   16228:	ldr	r0, [sp, #8]
   1622c:	ldr	r0, [r0, #32]
   16230:	ldrh	r0, [r0, #14]
   16234:	cmp	r0, #5
   16238:	bne	16240 <flatcc_builder_truncate_offset_vector@@Base+0x2c>
   1623c:	b	16260 <flatcc_builder_truncate_offset_vector@@Base+0x4c>
   16240:	ldr	r0, [pc, #192]	; 16308 <flatcc_builder_truncate_offset_vector@@Base+0xf4>
   16244:	add	r0, pc, r0
   16248:	ldr	r1, [pc, #188]	; 1630c <flatcc_builder_truncate_offset_vector@@Base+0xf8>
   1624c:	add	r1, pc, r1
   16250:	ldr	r2, [pc, #184]	; 16310 <flatcc_builder_truncate_offset_vector@@Base+0xfc>
   16254:	add	r3, pc, r2
   16258:	movw	r2, #994	; 0x3e2
   1625c:	bl	12494 <__assert_fail@plt>
   16260:	ldr	r0, [sp, #8]
   16264:	ldr	r0, [r0, #32]
   16268:	ldr	r0, [r0, #20]
   1626c:	ldr	r1, [sp, #4]
   16270:	cmp	r0, r1
   16274:	bcs	162c0 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   16278:	ldr	r0, [sp, #8]
   1627c:	ldr	r0, [r0, #32]
   16280:	ldr	r0, [r0, #20]
   16284:	ldr	r1, [sp, #4]
   16288:	cmp	r0, r1
   1628c:	bcc	16294 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   16290:	b	162b4 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   16294:	ldr	r0, [pc, #120]	; 16314 <flatcc_builder_truncate_offset_vector@@Base+0x100>
   16298:	add	r0, pc, r0
   1629c:	ldr	r1, [pc, #116]	; 16318 <flatcc_builder_truncate_offset_vector@@Base+0x104>
   162a0:	add	r1, pc, r1
   162a4:	ldr	r2, [pc, #112]	; 1631c <flatcc_builder_truncate_offset_vector@@Base+0x108>
   162a8:	add	r3, pc, r2
   162ac:	movw	r2, #995	; 0x3e3
   162b0:	bl	12494 <__assert_fail@plt>
   162b4:	mvn	r0, #0
   162b8:	str	r0, [fp, #-4]
   162bc:	b	162fc <flatcc_builder_truncate_offset_vector@@Base+0xe8>
   162c0:	ldr	r0, [sp, #4]
   162c4:	ldr	r1, [sp, #8]
   162c8:	ldr	r1, [r1, #32]
   162cc:	ldr	r2, [r1, #20]
   162d0:	sub	r0, r2, r0
   162d4:	str	r0, [r1, #20]
   162d8:	ldr	r0, [sp, #8]
   162dc:	ldr	r1, [sp, #8]
   162e0:	ldr	r1, [r1, #32]
   162e4:	ldr	r1, [r1, #16]
   162e8:	ldr	r2, [sp, #4]
   162ec:	mul	r1, r1, r2
   162f0:	bl	161c0 <flatcc_builder_truncate_vector@@Base+0x10c>
   162f4:	movw	r0, #0
   162f8:	str	r0, [fp, #-4]
   162fc:	ldr	r0, [fp, #-4]
   16300:	mov	sp, fp
   16304:	pop	{fp, pc}
   16308:	andeq	r5, r0, r3, lsl r3
   1630c:	ldrdeq	r4, [r0], -r8
   16310:	andeq	r5, r0, r7, lsr #10
   16314:	andeq	r5, r0, r9, lsr #10
   16318:	andeq	r4, r0, r4, lsl #29
   1631c:	ldrdeq	r5, [r0], -r3

00016320 <flatcc_builder_truncate_string@@Base>:
   16320:	push	{fp, lr}
   16324:	mov	fp, sp
   16328:	sub	sp, sp, #16
   1632c:	str	r0, [sp, #8]
   16330:	str	r1, [sp, #4]
   16334:	ldr	r0, [sp, #8]
   16338:	ldr	r0, [r0, #32]
   1633c:	ldrh	r0, [r0, #14]
   16340:	cmp	r0, #6
   16344:	bne	1634c <flatcc_builder_truncate_string@@Base+0x2c>
   16348:	b	1636c <flatcc_builder_truncate_string@@Base+0x4c>
   1634c:	ldr	r0, [pc, #176]	; 16404 <flatcc_builder_truncate_string@@Base+0xe4>
   16350:	add	r0, pc, r0
   16354:	ldr	r1, [pc, #172]	; 16408 <flatcc_builder_truncate_string@@Base+0xe8>
   16358:	add	r1, pc, r1
   1635c:	ldr	r2, [pc, #168]	; 1640c <flatcc_builder_truncate_string@@Base+0xec>
   16360:	add	r3, pc, r2
   16364:	movw	r2, #1003	; 0x3eb
   16368:	bl	12494 <__assert_fail@plt>
   1636c:	ldr	r0, [sp, #8]
   16370:	ldr	r0, [r0, #32]
   16374:	ldr	r0, [r0, #20]
   16378:	ldr	r1, [sp, #4]
   1637c:	cmp	r0, r1
   16380:	bcs	163cc <flatcc_builder_truncate_string@@Base+0xac>
   16384:	ldr	r0, [sp, #8]
   16388:	ldr	r0, [r0, #32]
   1638c:	ldr	r0, [r0, #20]
   16390:	ldr	r1, [sp, #4]
   16394:	cmp	r0, r1
   16398:	bcc	163a0 <flatcc_builder_truncate_string@@Base+0x80>
   1639c:	b	163c0 <flatcc_builder_truncate_string@@Base+0xa0>
   163a0:	ldr	r0, [pc, #104]	; 16410 <flatcc_builder_truncate_string@@Base+0xf0>
   163a4:	add	r0, pc, r0
   163a8:	ldr	r1, [pc, #100]	; 16414 <flatcc_builder_truncate_string@@Base+0xf4>
   163ac:	add	r1, pc, r1
   163b0:	ldr	r2, [pc, #96]	; 16418 <flatcc_builder_truncate_string@@Base+0xf8>
   163b4:	add	r3, pc, r2
   163b8:	movw	r2, #1004	; 0x3ec
   163bc:	bl	12494 <__assert_fail@plt>
   163c0:	mvn	r0, #0
   163c4:	str	r0, [fp, #-4]
   163c8:	b	163f8 <flatcc_builder_truncate_string@@Base+0xd8>
   163cc:	ldr	r0, [sp, #4]
   163d0:	ldr	r1, [sp, #8]
   163d4:	ldr	r1, [r1, #32]
   163d8:	ldr	r2, [r1, #20]
   163dc:	sub	r0, r2, r0
   163e0:	str	r0, [r1, #20]
   163e4:	ldr	r0, [sp, #8]
   163e8:	ldr	r1, [sp, #4]
   163ec:	bl	161c0 <flatcc_builder_truncate_vector@@Base+0x10c>
   163f0:	movw	r0, #0
   163f4:	str	r0, [fp, #-4]
   163f8:	ldr	r0, [fp, #-4]
   163fc:	mov	sp, fp
   16400:	pop	{fp, pc}
   16404:	andeq	r5, r0, r0, lsl r3
   16408:	andeq	r4, r0, ip, asr #27
   1640c:	muleq	r0, ip, r4
   16410:	muleq	r0, r7, r4
   16414:	andeq	r4, r0, r8, ror sp
   16418:	andeq	r5, r0, r8, asr #8

0001641c <flatcc_builder_start_vector@@Base>:
   1641c:	push	{fp, lr}
   16420:	mov	fp, sp
   16424:	sub	sp, sp, #24
   16428:	str	r0, [fp, #-8]
   1642c:	str	r1, [sp, #12]
   16430:	strh	r2, [sp, #10]
   16434:	str	r3, [sp, #4]
   16438:	add	r0, sp, #10
   1643c:	movw	r1, #4
   16440:	uxth	r1, r1
   16444:	bl	164c8 <flatcc_builder_start_vector@@Base+0xac>
   16448:	ldr	r0, [fp, #-8]
   1644c:	ldrh	r1, [sp, #10]
   16450:	bl	152d4 <flatcc_builder_start_buffer@@Base+0x178>
   16454:	cmp	r0, #0
   16458:	beq	16468 <flatcc_builder_start_vector@@Base+0x4c>
   1645c:	mvn	r0, #0
   16460:	str	r0, [fp, #-4]
   16464:	b	164bc <flatcc_builder_start_vector@@Base+0xa0>
   16468:	ldr	r0, [sp, #12]
   1646c:	ldr	r1, [fp, #-8]
   16470:	ldr	r1, [r1, #32]
   16474:	str	r0, [r1, #16]
   16478:	ldr	r0, [fp, #-8]
   1647c:	ldr	r0, [r0, #32]
   16480:	movw	r1, #0
   16484:	str	r1, [r0, #20]
   16488:	ldr	r0, [sp, #4]
   1648c:	ldr	r1, [fp, #-8]
   16490:	ldr	r1, [r1, #32]
   16494:	str	r0, [r1, #24]
   16498:	ldr	r0, [fp, #-8]
   1649c:	ldr	r0, [r0, #32]
   164a0:	movw	r1, #4
   164a4:	strh	r1, [r0, #14]
   164a8:	ldr	r0, [fp, #-8]
   164ac:	mvn	r1, #3
   164b0:	bl	1573c <flatcc_builder_start_struct@@Base+0x70>
   164b4:	movw	r0, #0
   164b8:	str	r0, [fp, #-4]
   164bc:	ldr	r0, [fp, #-4]
   164c0:	mov	sp, fp
   164c4:	pop	{fp, pc}
   164c8:	sub	sp, sp, #8
   164cc:	str	r0, [sp, #4]
   164d0:	strh	r1, [sp, #2]
   164d4:	ldr	r0, [sp, #4]
   164d8:	ldrh	r0, [r0]
   164dc:	ldrh	r1, [sp, #2]
   164e0:	cmp	r0, r1
   164e4:	bge	164f4 <flatcc_builder_start_vector@@Base+0xd8>
   164e8:	ldrh	r0, [sp, #2]
   164ec:	ldr	r1, [sp, #4]
   164f0:	strh	r0, [r1]
   164f4:	add	sp, sp, #8
   164f8:	bx	lr

000164fc <flatcc_builder_start_offset_vector@@Base>:
   164fc:	push	{fp, lr}
   16500:	mov	fp, sp
   16504:	sub	sp, sp, #8
   16508:	str	r0, [sp]
   1650c:	ldr	r0, [sp]
   16510:	movw	r1, #4
   16514:	uxth	r1, r1
   16518:	bl	152d4 <flatcc_builder_start_buffer@@Base+0x178>
   1651c:	cmp	r0, #0
   16520:	beq	16530 <flatcc_builder_start_offset_vector@@Base+0x34>
   16524:	mvn	r0, #0
   16528:	str	r0, [sp, #4]
   1652c:	b	16574 <flatcc_builder_start_offset_vector@@Base+0x78>
   16530:	ldr	r0, [sp]
   16534:	ldr	r0, [r0, #32]
   16538:	movw	r1, #4
   1653c:	str	r1, [r0, #16]
   16540:	ldr	r0, [sp]
   16544:	ldr	r0, [r0, #32]
   16548:	movw	r1, #0
   1654c:	str	r1, [r0, #20]
   16550:	ldr	r0, [sp]
   16554:	ldr	r0, [r0, #32]
   16558:	movw	r1, #5
   1655c:	strh	r1, [r0, #14]
   16560:	ldr	r0, [sp]
   16564:	mvn	r1, #3
   16568:	bl	1573c <flatcc_builder_start_struct@@Base+0x70>
   1656c:	movw	r0, #0
   16570:	str	r0, [sp, #4]
   16574:	ldr	r0, [sp, #4]
   16578:	mov	sp, fp
   1657c:	pop	{fp, pc}

00016580 <flatcc_builder_create_offset_vector@@Base>:
   16580:	push	{fp, lr}
   16584:	mov	fp, sp
   16588:	sub	sp, sp, #24
   1658c:	str	r0, [fp, #-8]
   16590:	str	r1, [sp, #12]
   16594:	str	r2, [sp, #8]
   16598:	ldr	r0, [fp, #-8]
   1659c:	bl	164fc <flatcc_builder_start_offset_vector@@Base>
   165a0:	cmp	r0, #0
   165a4:	beq	165b4 <flatcc_builder_create_offset_vector@@Base+0x34>
   165a8:	movw	r0, #0
   165ac:	str	r0, [fp, #-4]
   165b0:	b	165fc <flatcc_builder_create_offset_vector@@Base+0x7c>
   165b4:	ldr	r0, [fp, #-8]
   165b8:	ldr	r1, [sp, #8]
   165bc:	bl	15c90 <flatcc_builder_extend_offset_vector@@Base>
   165c0:	str	r0, [sp, #4]
   165c4:	movw	r1, #0
   165c8:	cmp	r0, r1
   165cc:	bne	165dc <flatcc_builder_create_offset_vector@@Base+0x5c>
   165d0:	movw	r0, #0
   165d4:	str	r0, [fp, #-4]
   165d8:	b	165fc <flatcc_builder_create_offset_vector@@Base+0x7c>
   165dc:	ldr	r0, [sp, #4]
   165e0:	ldr	r1, [sp, #12]
   165e4:	ldr	r2, [sp, #8]
   165e8:	lsl	r2, r2, #2
   165ec:	bl	123e0 <memcpy@plt>
   165f0:	ldr	r0, [fp, #-8]
   165f4:	bl	16608 <flatcc_builder_end_offset_vector@@Base>
   165f8:	str	r0, [fp, #-4]
   165fc:	ldr	r0, [fp, #-4]
   16600:	mov	sp, fp
   16604:	pop	{fp, pc}

00016608 <flatcc_builder_end_offset_vector@@Base>:
   16608:	push	{fp, lr}
   1660c:	mov	fp, sp
   16610:	sub	sp, sp, #16
   16614:	str	r0, [sp, #8]
   16618:	ldr	r0, [sp, #8]
   1661c:	ldr	r0, [r0, #32]
   16620:	ldrh	r0, [r0, #14]
   16624:	cmp	r0, #5
   16628:	bne	16630 <flatcc_builder_end_offset_vector@@Base+0x28>
   1662c:	b	16650 <flatcc_builder_end_offset_vector@@Base+0x48>
   16630:	ldr	r0, [pc, #108]	; 166a4 <flatcc_builder_end_offset_vector@@Base+0x9c>
   16634:	add	r0, pc, r0
   16638:	ldr	r1, [pc, #104]	; 166a8 <flatcc_builder_end_offset_vector@@Base+0xa0>
   1663c:	add	r1, pc, r1
   16640:	ldr	r2, [pc, #100]	; 166ac <flatcc_builder_end_offset_vector@@Base+0xa4>
   16644:	add	r3, pc, r2
   16648:	movw	r2, #1480	; 0x5c8
   1664c:	bl	12494 <__assert_fail@plt>
   16650:	ldr	r0, [sp, #8]
   16654:	ldr	r1, [sp, #8]
   16658:	ldr	r1, [r1, #16]
   1665c:	ldr	r2, [sp, #8]
   16660:	ldr	r2, [r2, #32]
   16664:	ldr	r2, [r2, #20]
   16668:	bl	17a18 <flatcc_builder_create_offset_vector_direct@@Base>
   1666c:	str	r0, [sp, #4]
   16670:	movw	r1, #0
   16674:	cmp	r1, r0
   16678:	bne	16688 <flatcc_builder_end_offset_vector@@Base+0x80>
   1667c:	movw	r0, #0
   16680:	str	r0, [fp, #-4]
   16684:	b	16698 <flatcc_builder_end_offset_vector@@Base+0x90>
   16688:	ldr	r0, [sp, #8]
   1668c:	bl	15610 <flatcc_builder_end_buffer@@Base+0x170>
   16690:	ldr	r0, [sp, #4]
   16694:	str	r0, [fp, #-4]
   16698:	ldr	r0, [fp, #-4]
   1669c:	mov	sp, fp
   166a0:	pop	{fp, pc}
   166a4:	andeq	r4, r0, r3, lsr #30
   166a8:	andeq	r4, r0, r8, ror #21
   166ac:	andeq	r5, r0, r2, asr #10

000166b0 <flatcc_builder_start_string@@Base>:
   166b0:	push	{fp, lr}
   166b4:	mov	fp, sp
   166b8:	sub	sp, sp, #8
   166bc:	str	r0, [sp]
   166c0:	ldr	r0, [sp]
   166c4:	movw	r1, #1
   166c8:	uxth	r1, r1
   166cc:	bl	152d4 <flatcc_builder_start_buffer@@Base+0x178>
   166d0:	cmp	r0, #0
   166d4:	beq	166e4 <flatcc_builder_start_string@@Base+0x34>
   166d8:	mvn	r0, #0
   166dc:	str	r0, [sp, #4]
   166e0:	b	16728 <flatcc_builder_start_string@@Base+0x78>
   166e4:	ldr	r0, [sp]
   166e8:	ldr	r0, [r0, #32]
   166ec:	movw	r1, #1
   166f0:	str	r1, [r0, #16]
   166f4:	ldr	r0, [sp]
   166f8:	ldr	r0, [r0, #32]
   166fc:	movw	r1, #0
   16700:	str	r1, [r0, #20]
   16704:	ldr	r0, [sp]
   16708:	ldr	r0, [r0, #32]
   1670c:	movw	r1, #6
   16710:	strh	r1, [r0, #14]
   16714:	ldr	r0, [sp]
   16718:	mvn	r1, #3
   1671c:	bl	1573c <flatcc_builder_start_struct@@Base+0x70>
   16720:	movw	r0, #0
   16724:	str	r0, [sp, #4]
   16728:	ldr	r0, [sp, #4]
   1672c:	mov	sp, fp
   16730:	pop	{fp, pc}

00016734 <flatcc_builder_reserve_table@@Base>:
   16734:	push	{fp, lr}
   16738:	mov	fp, sp
   1673c:	sub	sp, sp, #8
   16740:	str	r0, [sp, #4]
   16744:	str	r1, [sp]
   16748:	ldr	r0, [sp]
   1674c:	cmp	r0, #0
   16750:	blt	16758 <flatcc_builder_reserve_table@@Base+0x24>
   16754:	b	16778 <flatcc_builder_reserve_table@@Base+0x44>
   16758:	ldr	r0, [pc, #44]	; 1678c <flatcc_builder_reserve_table@@Base+0x58>
   1675c:	add	r0, pc, r0
   16760:	ldr	r1, [pc, #40]	; 16790 <flatcc_builder_reserve_table@@Base+0x5c>
   16764:	add	r1, pc, r1
   16768:	ldr	r2, [pc, #36]	; 16794 <flatcc_builder_reserve_table@@Base+0x60>
   1676c:	add	r3, pc, r2
   16770:	movw	r2, #1065	; 0x429
   16774:	bl	12494 <__assert_fail@plt>
   16778:	ldr	r0, [sp, #4]
   1677c:	ldr	r1, [sp]
   16780:	bl	16798 <flatcc_builder_reserve_table@@Base+0x64>
   16784:	mov	sp, fp
   16788:	pop	{fp, pc}
   1678c:	andeq	r5, r0, r2, asr #2
   16790:	andeq	r4, r0, r0, asr #19
   16794:	strdeq	r5, [r0], -r1
   16798:	push	{fp, lr}
   1679c:	mov	fp, sp
   167a0:	sub	sp, sp, #24
   167a4:	str	r0, [fp, #-8]
   167a8:	str	r1, [sp, #12]
   167ac:	ldr	r0, [fp, #-8]
   167b0:	ldr	r0, [r0, #32]
   167b4:	ldr	r1, [r0, #16]
   167b8:	ldrh	r0, [r0, #28]
   167bc:	add	r0, r1, r0, lsl #1
   167c0:	str	r0, [sp, #8]
   167c4:	ldr	r0, [sp, #12]
   167c8:	add	r0, r0, #2
   167cc:	lsl	r0, r0, #1
   167d0:	str	r0, [sp, #4]
   167d4:	ldr	r0, [fp, #-8]
   167d8:	ldr	r2, [sp, #8]
   167dc:	ldr	r3, [sp, #4]
   167e0:	movw	r1, #0
   167e4:	movw	ip, #1
   167e8:	str	ip, [sp]
   167ec:	bl	14464 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   167f0:	ldr	r1, [fp, #-8]
   167f4:	str	r0, [r1, #4]
   167f8:	movw	r1, #0
   167fc:	cmp	r0, r1
   16800:	bne	16810 <flatcc_builder_reserve_table@@Base+0xdc>
   16804:	mvn	r0, #0
   16808:	str	r0, [fp, #-4]
   1680c:	b	16884 <flatcc_builder_reserve_table@@Base+0x150>
   16810:	ldr	r0, [fp, #-8]
   16814:	ldr	r1, [r0, #4]
   16818:	add	r1, r1, #4
   1681c:	str	r1, [r0, #4]
   16820:	ldr	r0, [fp, #-8]
   16824:	ldr	r0, [r0, #32]
   16828:	ldr	r0, [r0, #20]
   1682c:	str	r0, [sp, #8]
   16830:	ldr	r0, [sp, #12]
   16834:	lsl	r0, r0, #1
   16838:	add	r0, r0, #1
   1683c:	str	r0, [sp, #4]
   16840:	ldr	r0, [fp, #-8]
   16844:	ldr	r2, [sp, #8]
   16848:	ldr	r3, [sp, #4]
   1684c:	movw	r1, #3
   16850:	movw	ip, #0
   16854:	str	ip, [sp]
   16858:	bl	14464 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   1685c:	ldr	r1, [fp, #-8]
   16860:	str	r0, [r1]
   16864:	movw	r1, #0
   16868:	cmp	r0, r1
   1686c:	bne	1687c <flatcc_builder_reserve_table@@Base+0x148>
   16870:	mvn	r0, #0
   16874:	str	r0, [fp, #-4]
   16878:	b	16884 <flatcc_builder_reserve_table@@Base+0x150>
   1687c:	movw	r0, #0
   16880:	str	r0, [fp, #-4]
   16884:	ldr	r0, [fp, #-4]
   16888:	mov	sp, fp
   1688c:	pop	{fp, pc}

00016890 <flatcc_builder_start_table@@Base>:
   16890:	push	{fp, lr}
   16894:	mov	fp, sp
   16898:	sub	sp, sp, #16
   1689c:	str	r0, [sp, #8]
   168a0:	str	r1, [sp, #4]
   168a4:	ldr	r0, [sp, #8]
   168a8:	movw	r1, #4
   168ac:	uxth	r1, r1
   168b0:	bl	152d4 <flatcc_builder_start_buffer@@Base+0x178>
   168b4:	cmp	r0, #0
   168b8:	beq	168c8 <flatcc_builder_start_table@@Base+0x38>
   168bc:	mvn	r0, #0
   168c0:	str	r0, [fp, #-4]
   168c4:	b	16998 <flatcc_builder_start_table@@Base+0x108>
   168c8:	ldr	r0, [pc, #212]	; 169a4 <flatcc_builder_start_table@@Base+0x114>
   168cc:	ldr	r1, [sp, #8]
   168d0:	ldr	r1, [r1, #4]
   168d4:	ldr	r2, [sp, #8]
   168d8:	ldr	r2, [r2, #52]	; 0x34
   168dc:	sub	r1, r1, r2
   168e0:	ldr	r2, [sp, #8]
   168e4:	ldr	r2, [r2, #32]
   168e8:	str	r1, [r2, #16]
   168ec:	ldr	r1, [sp, #8]
   168f0:	ldr	r1, [r1]
   168f4:	ldr	r2, [sp, #8]
   168f8:	ldr	r2, [r2, #76]	; 0x4c
   168fc:	sub	r1, r1, r2
   16900:	ldr	r2, [sp, #8]
   16904:	ldr	r2, [r2, #32]
   16908:	str	r1, [r2, #20]
   1690c:	ldr	r1, [sp, #8]
   16910:	ldr	r1, [r1, #12]
   16914:	ldr	r2, [sp, #8]
   16918:	ldr	r2, [r2, #32]
   1691c:	str	r1, [r2, #24]
   16920:	ldr	r1, [sp, #8]
   16924:	ldrh	r1, [r1, #8]
   16928:	ldr	r2, [sp, #8]
   1692c:	ldr	r2, [r2, #32]
   16930:	strh	r1, [r2, #28]
   16934:	ldr	r1, [sp, #8]
   16938:	movw	r2, #0
   1693c:	str	r2, [r1, #12]
   16940:	ldr	r1, [sp, #8]
   16944:	str	r0, [r1, #12]
   16948:	ldr	r0, [sp, #8]
   1694c:	movw	r1, #0
   16950:	strh	r1, [r0, #8]
   16954:	ldr	r0, [sp, #8]
   16958:	ldr	r0, [r0, #32]
   1695c:	movw	r1, #3
   16960:	strh	r1, [r0, #14]
   16964:	ldr	r0, [sp, #8]
   16968:	ldr	r1, [sp, #4]
   1696c:	bl	16798 <flatcc_builder_reserve_table@@Base+0x64>
   16970:	cmp	r0, #0
   16974:	beq	16984 <flatcc_builder_start_table@@Base+0xf4>
   16978:	mvn	r0, #0
   1697c:	str	r0, [fp, #-4]
   16980:	b	16998 <flatcc_builder_start_table@@Base+0x108>
   16984:	ldr	r0, [sp, #8]
   16988:	movw	r1, #65532	; 0xfffc
   1698c:	bl	1573c <flatcc_builder_start_struct@@Base+0x70>
   16990:	movw	r0, #0
   16994:	str	r0, [fp, #-4]
   16998:	ldr	r0, [fp, #-4]
   1699c:	mov	sp, fp
   169a0:	pop	{fp, pc}
   169a4:	svccs	0x00693b52

000169a8 <flatcc_builder_create_vtable@@Base>:
   169a8:	push	{fp, lr}
   169ac:	mov	fp, sp
   169b0:	sub	sp, sp, #104	; 0x68
   169b4:	str	r0, [fp, #-8]
   169b8:	str	r1, [fp, #-12]
   169bc:	strh	r2, [fp, #-14]
   169c0:	movw	r0, #0
   169c4:	str	r0, [sp, #12]
   169c8:	str	r0, [sp, #16]
   169cc:	ldrh	r0, [fp, #-14]
   169d0:	cmp	r0, #0
   169d4:	ble	16a18 <flatcc_builder_create_vtable@@Base+0x70>
   169d8:	ldrh	r0, [fp, #-14]
   169dc:	ldr	r1, [sp, #12]
   169e0:	add	r0, r1, r0
   169e4:	str	r0, [sp, #12]
   169e8:	ldr	r0, [fp, #-12]
   169ec:	add	r1, sp, #12
   169f0:	add	r1, r1, #8
   169f4:	ldr	r2, [sp, #16]
   169f8:	str	r0, [r1, r2, lsl #3]
   169fc:	ldrh	r0, [fp, #-14]
   16a00:	ldr	r2, [sp, #16]
   16a04:	add	r1, r1, r2, lsl #3
   16a08:	str	r0, [r1, #4]
   16a0c:	ldr	r0, [sp, #16]
   16a10:	add	r0, r0, #1
   16a14:	str	r0, [sp, #16]
   16a18:	ldr	r0, [fp, #-8]
   16a1c:	ldr	r0, [r0, #152]	; 0x98
   16a20:	cmp	r0, #0
   16a24:	bne	16a64 <flatcc_builder_create_vtable@@Base+0xbc>
   16a28:	ldr	r0, [fp, #-8]
   16a2c:	ldr	r0, [r0, #180]	; 0xb4
   16a30:	cmp	r0, #0
   16a34:	bne	16a64 <flatcc_builder_create_vtable@@Base+0xbc>
   16a38:	ldr	r0, [fp, #-8]
   16a3c:	add	r1, sp, #12
   16a40:	bl	16aac <flatcc_builder_create_vtable@@Base+0x104>
   16a44:	str	r0, [fp, #-20]	; 0xffffffec
   16a48:	movw	r1, #0
   16a4c:	cmp	r1, r0
   16a50:	bne	16a60 <flatcc_builder_create_vtable@@Base+0xb8>
   16a54:	movw	r0, #0
   16a58:	str	r0, [fp, #-4]
   16a5c:	b	16aa0 <flatcc_builder_create_vtable@@Base+0xf8>
   16a60:	b	16a98 <flatcc_builder_create_vtable@@Base+0xf0>
   16a64:	ldr	r0, [fp, #-8]
   16a68:	add	r1, sp, #12
   16a6c:	bl	14b10 <flatcc_builder_embed_buffer@@Base+0x39c>
   16a70:	str	r0, [fp, #-20]	; 0xffffffec
   16a74:	movw	r1, #0
   16a78:	cmp	r1, r0
   16a7c:	bne	16a8c <flatcc_builder_create_vtable@@Base+0xe4>
   16a80:	movw	r0, #0
   16a84:	str	r0, [fp, #-4]
   16a88:	b	16aa0 <flatcc_builder_create_vtable@@Base+0xf8>
   16a8c:	ldr	r0, [fp, #-20]	; 0xffffffec
   16a90:	add	r0, r0, #1
   16a94:	str	r0, [fp, #-20]	; 0xffffffec
   16a98:	ldr	r0, [fp, #-20]	; 0xffffffec
   16a9c:	str	r0, [fp, #-4]
   16aa0:	ldr	r0, [fp, #-4]
   16aa4:	mov	sp, fp
   16aa8:	pop	{fp, pc}
   16aac:	push	{fp, lr}
   16ab0:	mov	fp, sp
   16ab4:	sub	sp, sp, #24
   16ab8:	str	r0, [fp, #-4]
   16abc:	str	r1, [fp, #-8]
   16ac0:	ldr	r0, [fp, #-4]
   16ac4:	ldr	r0, [r0, #140]	; 0x8c
   16ac8:	str	r0, [sp, #12]
   16acc:	ldr	r0, [sp, #12]
   16ad0:	ldr	r1, [fp, #-8]
   16ad4:	ldr	r1, [r1]
   16ad8:	add	r0, r0, r1
   16adc:	ldr	r1, [fp, #-4]
   16ae0:	str	r0, [r1, #140]	; 0x8c
   16ae4:	ldr	r0, [fp, #-4]
   16ae8:	ldr	r0, [r0, #140]	; 0x8c
   16aec:	ldr	r1, [sp, #12]
   16af0:	cmp	r0, r1
   16af4:	bge	16b18 <flatcc_builder_create_vtable@@Base+0x170>
   16af8:	ldr	r0, [pc, #168]	; 16ba8 <flatcc_builder_create_vtable@@Base+0x200>
   16afc:	add	r0, pc, r0
   16b00:	ldr	r1, [pc, #164]	; 16bac <flatcc_builder_create_vtable@@Base+0x204>
   16b04:	add	r1, pc, r1
   16b08:	ldr	r2, [pc, #160]	; 16bb0 <flatcc_builder_create_vtable@@Base+0x208>
   16b0c:	add	r3, pc, r2
   16b10:	movw	r2, #673	; 0x2a1
   16b14:	bl	12494 <__assert_fail@plt>
   16b18:	ldr	r0, [fp, #-4]
   16b1c:	ldr	r0, [r0, #44]	; 0x2c
   16b20:	ldr	r1, [fp, #-4]
   16b24:	ldr	r1, [r1, #36]	; 0x24
   16b28:	ldr	r2, [fp, #-8]
   16b2c:	add	r2, r2, #8
   16b30:	ldr	r3, [fp, #-8]
   16b34:	ldr	r3, [r3, #4]
   16b38:	ldr	ip, [sp, #12]
   16b3c:	ldr	lr, [fp, #-8]
   16b40:	ldr	lr, [lr]
   16b44:	str	r0, [sp, #8]
   16b48:	mov	r0, r1
   16b4c:	mov	r1, r2
   16b50:	mov	r2, r3
   16b54:	mov	r3, ip
   16b58:	str	lr, [sp]
   16b5c:	ldr	ip, [sp, #8]
   16b60:	blx	ip
   16b64:	cmp	r0, #0
   16b68:	beq	16b8c <flatcc_builder_create_vtable@@Base+0x1e4>
   16b6c:	ldr	r0, [pc, #40]	; 16b9c <flatcc_builder_create_vtable@@Base+0x1f4>
   16b70:	add	r0, pc, r0
   16b74:	ldr	r1, [pc, #36]	; 16ba0 <flatcc_builder_create_vtable@@Base+0x1f8>
   16b78:	add	r1, pc, r1
   16b7c:	ldr	r2, [pc, #32]	; 16ba4 <flatcc_builder_create_vtable@@Base+0x1fc>
   16b80:	add	r3, pc, r2
   16b84:	movw	r2, #677	; 0x2a5
   16b88:	bl	12494 <__assert_fail@plt>
   16b8c:	ldr	r0, [sp, #12]
   16b90:	add	r0, r0, #1
   16b94:	mov	sp, fp
   16b98:	pop	{fp, pc}
   16b9c:	andeq	r5, r0, r1, ror r7
   16ba0:	andeq	r4, r0, ip, lsr #11
   16ba4:	ldrdeq	r5, [r0], -ip
   16ba8:	andeq	r5, r0, r5, ror #15
   16bac:	andeq	r4, r0, r0, lsr #12
   16bb0:	andeq	r5, r0, r0, asr r7

00016bb4 <flatcc_builder_create_cached_vtable@@Base>:
   16bb4:	push	{fp, lr}
   16bb8:	mov	fp, sp
   16bbc:	sub	sp, sp, #48	; 0x30
   16bc0:	str	r0, [fp, #-8]
   16bc4:	str	r1, [fp, #-12]
   16bc8:	strh	r2, [fp, #-14]
   16bcc:	str	r3, [fp, #-20]	; 0xffffffec
   16bd0:	ldr	r0, [fp, #-8]
   16bd4:	ldr	r1, [fp, #-20]	; 0xffffffec
   16bd8:	bl	16ec0 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   16bdc:	str	r0, [sp, #12]
   16be0:	movw	r1, #0
   16be4:	cmp	r0, r1
   16be8:	bne	16bf8 <flatcc_builder_create_cached_vtable@@Base+0x44>
   16bec:	movw	r0, #0
   16bf0:	str	r0, [fp, #-4]
   16bf4:	b	16eb4 <flatcc_builder_create_cached_vtable@@Base+0x300>
   16bf8:	ldr	r0, [sp, #12]
   16bfc:	str	r0, [sp, #16]
   16c00:	ldr	r0, [sp, #16]
   16c04:	ldr	r0, [r0]
   16c08:	str	r0, [sp, #8]
   16c0c:	movw	r0, #0
   16c10:	str	r0, [sp, #20]
   16c14:	ldr	r0, [sp, #8]
   16c18:	cmp	r0, #0
   16c1c:	beq	16d20 <flatcc_builder_create_cached_vtable@@Base+0x16c>
   16c20:	ldr	r0, [fp, #-8]
   16c24:	ldr	r0, [r0, #100]	; 0x64
   16c28:	ldr	r1, [sp, #8]
   16c2c:	add	r0, r0, r1
   16c30:	str	r0, [sp, #24]
   16c34:	ldr	r0, [fp, #-8]
   16c38:	ldr	r0, [r0, #68]	; 0x44
   16c3c:	ldr	r1, [sp, #24]
   16c40:	ldr	r1, [r1, #8]
   16c44:	add	r0, r0, r1
   16c48:	str	r0, [sp, #4]
   16c4c:	ldr	r0, [sp, #4]
   16c50:	ldrh	r0, [r0]
   16c54:	ldrh	r1, [fp, #-14]
   16c58:	cmp	r0, r1
   16c5c:	bne	16c7c <flatcc_builder_create_cached_vtable@@Base+0xc8>
   16c60:	ldr	r0, [fp, #-12]
   16c64:	ldr	r1, [sp, #4]
   16c68:	ldrh	r2, [fp, #-14]
   16c6c:	bl	123ec <memcmp@plt>
   16c70:	movw	r1, #0
   16c74:	cmp	r1, r0
   16c78:	beq	16c98 <flatcc_builder_create_cached_vtable@@Base+0xe4>
   16c7c:	ldr	r0, [sp, #24]
   16c80:	add	r0, r0, #12
   16c84:	str	r0, [sp, #16]
   16c88:	ldr	r0, [sp, #24]
   16c8c:	ldr	r0, [r0, #12]
   16c90:	str	r0, [sp, #8]
   16c94:	b	16c14 <flatcc_builder_create_cached_vtable@@Base+0x60>
   16c98:	ldr	r0, [sp, #24]
   16c9c:	ldr	r0, [r0, #4]
   16ca0:	ldr	r1, [fp, #-8]
   16ca4:	ldr	r1, [r1, #152]	; 0x98
   16ca8:	cmp	r0, r1
   16cac:	beq	16cd4 <flatcc_builder_create_cached_vtable@@Base+0x120>
   16cb0:	ldr	r0, [sp, #24]
   16cb4:	str	r0, [sp, #20]
   16cb8:	ldr	r0, [sp, #24]
   16cbc:	add	r0, r0, #12
   16cc0:	str	r0, [sp, #16]
   16cc4:	ldr	r0, [sp, #24]
   16cc8:	ldr	r0, [r0, #12]
   16ccc:	str	r0, [sp, #8]
   16cd0:	b	16c14 <flatcc_builder_create_cached_vtable@@Base+0x60>
   16cd4:	ldr	r0, [sp, #16]
   16cd8:	ldr	r1, [sp, #12]
   16cdc:	cmp	r0, r1
   16ce0:	beq	16d10 <flatcc_builder_create_cached_vtable@@Base+0x15c>
   16ce4:	ldr	r0, [sp, #24]
   16ce8:	ldr	r0, [r0, #12]
   16cec:	ldr	r1, [sp, #16]
   16cf0:	str	r0, [r1]
   16cf4:	ldr	r0, [sp, #12]
   16cf8:	ldr	r0, [r0]
   16cfc:	ldr	r1, [sp, #24]
   16d00:	str	r0, [r1, #12]
   16d04:	ldr	r0, [sp, #8]
   16d08:	ldr	r1, [sp, #12]
   16d0c:	str	r0, [r1]
   16d10:	ldr	r0, [sp, #24]
   16d14:	ldr	r0, [r0]
   16d18:	str	r0, [fp, #-4]
   16d1c:	b	16eb4 <flatcc_builder_create_cached_vtable@@Base+0x300>
   16d20:	ldr	r0, [fp, #-8]
   16d24:	ldr	r1, [fp, #-8]
   16d28:	ldr	r2, [r1, #124]	; 0x7c
   16d2c:	movw	r1, #6
   16d30:	movw	r3, #16
   16d34:	movw	ip, #0
   16d38:	str	ip, [sp]
   16d3c:	bl	14464 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   16d40:	str	r0, [sp, #24]
   16d44:	movw	r1, #0
   16d48:	cmp	r0, r1
   16d4c:	bne	16d5c <flatcc_builder_create_cached_vtable@@Base+0x1a8>
   16d50:	movw	r0, #0
   16d54:	str	r0, [fp, #-4]
   16d58:	b	16eb4 <flatcc_builder_create_cached_vtable@@Base+0x300>
   16d5c:	ldr	r0, [fp, #-8]
   16d60:	ldr	r0, [r0, #124]	; 0x7c
   16d64:	str	r0, [sp, #8]
   16d68:	ldr	r0, [fp, #-8]
   16d6c:	ldr	r1, [r0, #124]	; 0x7c
   16d70:	add	r1, r1, #16
   16d74:	str	r1, [r0, #124]	; 0x7c
   16d78:	ldr	r0, [fp, #-8]
   16d7c:	ldr	r0, [r0, #152]	; 0x98
   16d80:	ldr	r1, [sp, #24]
   16d84:	str	r0, [r1, #4]
   16d88:	ldr	r0, [sp, #12]
   16d8c:	ldr	r0, [r0]
   16d90:	ldr	r1, [sp, #24]
   16d94:	str	r0, [r1, #12]
   16d98:	ldr	r0, [sp, #8]
   16d9c:	ldr	r1, [sp, #12]
   16da0:	str	r0, [r1]
   16da4:	ldr	r0, [fp, #-8]
   16da8:	ldr	r1, [fp, #-12]
   16dac:	ldrh	r2, [fp, #-14]
   16db0:	bl	169a8 <flatcc_builder_create_vtable@@Base>
   16db4:	ldr	r1, [sp, #24]
   16db8:	str	r0, [r1]
   16dbc:	movw	r1, #0
   16dc0:	cmp	r1, r0
   16dc4:	bne	16dd4 <flatcc_builder_create_cached_vtable@@Base+0x220>
   16dc8:	movw	r0, #0
   16dcc:	str	r0, [fp, #-4]
   16dd0:	b	16eb4 <flatcc_builder_create_cached_vtable@@Base+0x300>
   16dd4:	ldr	r0, [sp, #20]
   16dd8:	movw	r1, #0
   16ddc:	cmp	r0, r1
   16de0:	beq	16df8 <flatcc_builder_create_cached_vtable@@Base+0x244>
   16de4:	ldr	r0, [sp, #20]
   16de8:	ldr	r0, [r0, #8]
   16dec:	ldr	r1, [sp, #24]
   16df0:	str	r0, [r1, #8]
   16df4:	b	16ea8 <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   16df8:	ldr	r0, [fp, #-8]
   16dfc:	ldr	r0, [r0, #172]	; 0xac
   16e00:	cmp	r0, #0
   16e04:	beq	16e34 <flatcc_builder_create_cached_vtable@@Base+0x280>
   16e08:	ldr	r0, [fp, #-8]
   16e0c:	ldr	r0, [r0, #172]	; 0xac
   16e10:	ldr	r1, [fp, #-8]
   16e14:	ldr	r1, [r1, #120]	; 0x78
   16e18:	ldrh	r2, [fp, #-14]
   16e1c:	add	r1, r1, r2
   16e20:	cmp	r0, r1
   16e24:	bcs	16e34 <flatcc_builder_create_cached_vtable@@Base+0x280>
   16e28:	ldr	r0, [fp, #-8]
   16e2c:	bl	13edc <flatcc_builder_flush_vtable_cache@@Base>
   16e30:	b	16ea4 <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   16e34:	ldr	r0, [fp, #-8]
   16e38:	ldr	r1, [fp, #-8]
   16e3c:	ldr	r2, [r1, #120]	; 0x78
   16e40:	ldrh	r3, [fp, #-14]
   16e44:	movw	r1, #2
   16e48:	movw	ip, #0
   16e4c:	str	ip, [sp]
   16e50:	bl	14464 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   16e54:	str	r0, [sp, #4]
   16e58:	movw	r1, #0
   16e5c:	cmp	r0, r1
   16e60:	bne	16e70 <flatcc_builder_create_cached_vtable@@Base+0x2bc>
   16e64:	mvn	r0, #0
   16e68:	str	r0, [fp, #-4]
   16e6c:	b	16eb4 <flatcc_builder_create_cached_vtable@@Base+0x300>
   16e70:	ldr	r0, [fp, #-8]
   16e74:	ldr	r0, [r0, #120]	; 0x78
   16e78:	ldr	r1, [sp, #24]
   16e7c:	str	r0, [r1, #8]
   16e80:	ldrh	r0, [fp, #-14]
   16e84:	ldr	r1, [fp, #-8]
   16e88:	ldr	r2, [r1, #120]	; 0x78
   16e8c:	add	r0, r2, r0
   16e90:	str	r0, [r1, #120]	; 0x78
   16e94:	ldr	r0, [sp, #4]
   16e98:	ldr	r1, [fp, #-12]
   16e9c:	ldrh	r2, [fp, #-14]
   16ea0:	bl	123e0 <memcpy@plt>
   16ea4:	b	16ea8 <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   16ea8:	ldr	r0, [sp, #24]
   16eac:	ldr	r0, [r0]
   16eb0:	str	r0, [fp, #-4]
   16eb4:	ldr	r0, [fp, #-4]
   16eb8:	mov	sp, fp
   16ebc:	pop	{fp, pc}
   16ec0:	push	{fp, lr}
   16ec4:	mov	fp, sp
   16ec8:	sub	sp, sp, #24
   16ecc:	str	r0, [fp, #-8]
   16ed0:	str	r1, [sp, #12]
   16ed4:	ldr	r0, [fp, #-8]
   16ed8:	ldr	r0, [r0, #116]	; 0x74
   16edc:	cmp	r0, #0
   16ee0:	bne	16f04 <flatcc_builder_create_cached_vtable@@Base+0x350>
   16ee4:	ldr	r0, [fp, #-8]
   16ee8:	bl	199e0 <flatcc_builder_get_emit_context@@Base+0xe8>
   16eec:	cmp	r0, #0
   16ef0:	beq	16f00 <flatcc_builder_create_cached_vtable@@Base+0x34c>
   16ef4:	movw	r0, #0
   16ef8:	str	r0, [fp, #-4]
   16efc:	b	16f38 <flatcc_builder_create_cached_vtable@@Base+0x384>
   16f00:	b	16f04 <flatcc_builder_create_cached_vtable@@Base+0x350>
   16f04:	ldr	r0, [fp, #-8]
   16f08:	ldr	r0, [r0, #92]	; 0x5c
   16f0c:	str	r0, [sp, #8]
   16f10:	ldr	r0, [sp, #8]
   16f14:	ldr	r1, [sp, #12]
   16f18:	ldr	r2, [fp, #-8]
   16f1c:	ldr	r2, [r2, #116]	; 0x74
   16f20:	rsb	r2, r2, #32
   16f24:	lsr	r1, r1, r2
   16f28:	mov	r2, r1
   16f2c:	add	r0, r0, r1, lsl #2
   16f30:	str	r0, [fp, #-4]
   16f34:	str	r2, [sp, #4]
   16f38:	ldr	r0, [fp, #-4]
   16f3c:	mov	sp, fp
   16f40:	pop	{fp, pc}

00016f44 <flatcc_builder_create_table@@Base>:
   16f44:	push	{r4, sl, fp, lr}
   16f48:	add	fp, sp, #8
   16f4c:	sub	sp, sp, #136	; 0x88
   16f50:	ldr	ip, [fp, #16]
   16f54:	ldr	lr, [fp, #12]
   16f58:	ldr	r4, [fp, #8]
   16f5c:	str	r0, [fp, #-16]
   16f60:	str	r1, [fp, #-20]	; 0xffffffec
   16f64:	str	r2, [fp, #-24]	; 0xffffffe8
   16f68:	strh	r3, [fp, #-26]	; 0xffffffe6
   16f6c:	ldr	r0, [fp, #12]
   16f70:	cmp	r0, #0
   16f74:	str	r4, [sp, #8]
   16f78:	str	lr, [sp, #4]
   16f7c:	str	ip, [sp]
   16f80:	blt	16f88 <flatcc_builder_create_table@@Base+0x44>
   16f84:	b	16fa8 <flatcc_builder_create_table@@Base+0x64>
   16f88:	ldr	r0, [pc, #616]	; 171f8 <flatcc_builder_create_table@@Base+0x2b4>
   16f8c:	add	r0, pc, r0
   16f90:	ldr	r1, [pc, #612]	; 171fc <flatcc_builder_create_table@@Base+0x2b8>
   16f94:	add	r1, pc, r1
   16f98:	ldr	r2, [pc, #608]	; 17200 <flatcc_builder_create_table@@Base+0x2bc>
   16f9c:	add	r3, pc, r2
   16fa0:	movw	r2, #1237	; 0x4d5
   16fa4:	bl	12494 <__assert_fail@plt>
   16fa8:	ldr	r0, [fp, #16]
   16fac:	and	r0, r0, #1
   16fb0:	cmp	r0, #0
   16fb4:	beq	16fbc <flatcc_builder_create_table@@Base+0x78>
   16fb8:	b	16fdc <flatcc_builder_create_table@@Base+0x98>
   16fbc:	ldr	r0, [pc, #576]	; 17204 <flatcc_builder_create_table@@Base+0x2c0>
   16fc0:	add	r0, pc, r0
   16fc4:	ldr	r1, [pc, #572]	; 17208 <flatcc_builder_create_table@@Base+0x2c4>
   16fc8:	add	r1, pc, r1
   16fcc:	ldr	r2, [pc, #568]	; 1720c <flatcc_builder_create_table@@Base+0x2c8>
   16fd0:	add	r3, pc, r2
   16fd4:	movw	r2, #1243	; 0x4db
   16fd8:	bl	12494 <__assert_fail@plt>
   16fdc:	sub	r0, fp, #26
   16fe0:	movw	r1, #4
   16fe4:	uxth	r1, r1
   16fe8:	bl	164c8 <flatcc_builder_start_vector@@Base+0xac>
   16fec:	ldr	r0, [fp, #-16]
   16ff0:	ldrh	r1, [fp, #-26]	; 0xffffffe6
   16ff4:	bl	14fdc <flatcc_builder_create_buffer@@Base+0x3a8>
   16ff8:	ldr	r0, [fp, #-16]
   16ffc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   17000:	ldrh	r2, [fp, #-26]	; 0xffffffe6
   17004:	bl	14ac8 <flatcc_builder_embed_buffer@@Base+0x354>
   17008:	str	r0, [fp, #-36]	; 0xffffffdc
   1700c:	ldr	r0, [fp, #-16]
   17010:	ldr	r0, [r0, #136]	; 0x88
   17014:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17018:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1701c:	add	r1, r1, r2
   17020:	add	r1, r1, #4
   17024:	sub	r0, r0, r1
   17028:	str	r0, [fp, #-52]	; 0xffffffcc
   1702c:	ldr	r0, [fp, #16]
   17030:	sub	r0, r0, #1
   17034:	str	r0, [fp, #-48]	; 0xffffffd0
   17038:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1703c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   17040:	sub	r0, r0, r1
   17044:	str	r0, [fp, #-40]	; 0xffffffd8
   17048:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1704c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   17050:	sub	r0, r0, r1
   17054:	ldr	r1, [fp, #-48]	; 0xffffffd0
   17058:	cmp	r0, r1
   1705c:	beq	1706c <flatcc_builder_create_table@@Base+0x128>
   17060:	mvn	r0, #0
   17064:	str	r0, [fp, #-12]
   17068:	b	171ec <flatcc_builder_create_table@@Base+0x2a8>
   1706c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17070:	bl	14afc <flatcc_builder_embed_buffer@@Base+0x388>
   17074:	str	r0, [fp, #-44]	; 0xffffffd4
   17078:	movw	r0, #0
   1707c:	str	r0, [fp, #-32]	; 0xffffffe0
   17080:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17084:	ldr	r1, [fp, #12]
   17088:	cmp	r0, r1
   1708c:	bge	170f8 <flatcc_builder_create_table@@Base+0x1b4>
   17090:	ldr	r0, [fp, #-20]	; 0xffffffec
   17094:	ldr	r1, [fp, #8]
   17098:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1709c:	add	r1, r1, r2, lsl #1
   170a0:	ldrh	r1, [r1]
   170a4:	add	r0, r0, r1
   170a8:	str	r0, [fp, #-60]	; 0xffffffc4
   170ac:	ldr	r0, [fp, #-60]	; 0xffffffc4
   170b0:	ldr	r0, [r0]
   170b4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   170b8:	sub	r0, r0, r1
   170bc:	ldr	r1, [fp, #8]
   170c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   170c4:	add	r1, r1, r2, lsl #1
   170c8:	ldrh	r1, [r1]
   170cc:	sub	r0, r0, r1
   170d0:	sub	r0, r0, #4
   170d4:	str	r0, [fp, #-56]	; 0xffffffc8
   170d8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   170dc:	bl	14afc <flatcc_builder_embed_buffer@@Base+0x388>
   170e0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   170e4:	str	r0, [r1]
   170e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   170ec:	add	r0, r0, #1
   170f0:	str	r0, [fp, #-32]	; 0xffffffe0
   170f4:	b	17080 <flatcc_builder_create_table@@Base+0x13c>
   170f8:	mov	r0, #0
   170fc:	str	r0, [sp, #12]
   17100:	str	r0, [sp, #16]
   17104:	ldr	r0, [sp, #12]
   17108:	add	r0, r0, #4
   1710c:	str	r0, [sp, #12]
   17110:	add	r0, sp, #12
   17114:	add	r0, r0, #8
   17118:	ldr	r1, [sp, #16]
   1711c:	sub	r2, fp, #44	; 0x2c
   17120:	str	r2, [r0, r1, lsl #3]
   17124:	ldr	r1, [sp, #16]
   17128:	add	r0, r0, r1, lsl #3
   1712c:	movw	r1, #4
   17130:	str	r1, [r0, #4]
   17134:	ldr	r0, [sp, #16]
   17138:	add	r0, r0, #1
   1713c:	str	r0, [sp, #16]
   17140:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17144:	cmp	r0, #0
   17148:	bls	1718c <flatcc_builder_create_table@@Base+0x248>
   1714c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17150:	ldr	r1, [sp, #12]
   17154:	add	r0, r1, r0
   17158:	str	r0, [sp, #12]
   1715c:	ldr	r0, [fp, #-20]	; 0xffffffec
   17160:	add	r1, sp, #12
   17164:	add	r1, r1, #8
   17168:	ldr	r2, [sp, #16]
   1716c:	str	r0, [r1, r2, lsl #3]
   17170:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17174:	ldr	r2, [sp, #16]
   17178:	add	r1, r1, r2, lsl #3
   1717c:	str	r0, [r1, #4]
   17180:	ldr	r0, [sp, #16]
   17184:	add	r0, r0, #1
   17188:	str	r0, [sp, #16]
   1718c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17190:	cmp	r0, #0
   17194:	bls	171dc <flatcc_builder_create_table@@Base+0x298>
   17198:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1719c:	ldr	r1, [sp, #12]
   171a0:	add	r0, r1, r0
   171a4:	str	r0, [sp, #12]
   171a8:	add	r0, sp, #12
   171ac:	add	r0, r0, #8
   171b0:	ldr	r1, [sp, #16]
   171b4:	ldr	r2, [pc, #84]	; 17210 <flatcc_builder_create_table@@Base+0x2cc>
   171b8:	ldr	r2, [pc, r2]
   171bc:	str	r2, [r0, r1, lsl #3]
   171c0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   171c4:	ldr	r2, [sp, #16]
   171c8:	add	r0, r0, r2, lsl #3
   171cc:	str	r1, [r0, #4]
   171d0:	ldr	r0, [sp, #16]
   171d4:	add	r0, r0, #1
   171d8:	str	r0, [sp, #16]
   171dc:	ldr	r0, [fp, #-16]
   171e0:	add	r1, sp, #12
   171e4:	bl	14b10 <flatcc_builder_embed_buffer@@Base+0x39c>
   171e8:	str	r0, [fp, #-12]
   171ec:	ldr	r0, [fp, #-12]
   171f0:	sub	sp, fp, #8
   171f4:	pop	{r4, sl, fp, pc}
   171f8:	andeq	r4, r0, fp, lsl #18
   171fc:	muleq	r0, r0, r1
   17200:	andeq	r4, r0, sp, lsl #18
   17204:	andeq	r4, r0, r5, lsl #19
   17208:	andeq	r4, r0, ip, asr r1
   1720c:	ldrdeq	r4, [r0], -r9
   17210:	muleq	r1, ip, lr

00017214 <flatcc_builder_check_required_field@@Base>:
   17214:	push	{fp, lr}
   17218:	mov	fp, sp
   1721c:	sub	sp, sp, #16
   17220:	str	r0, [fp, #-4]
   17224:	strh	r1, [fp, #-6]
   17228:	ldr	r0, [fp, #-4]
   1722c:	ldr	r0, [r0, #32]
   17230:	ldrh	r0, [r0, #14]
   17234:	cmp	r0, #3
   17238:	bne	17240 <flatcc_builder_check_required_field@@Base+0x2c>
   1723c:	b	17260 <flatcc_builder_check_required_field@@Base+0x4c>
   17240:	ldr	r0, [pc, #104]	; 172b0 <flatcc_builder_check_required_field@@Base+0x9c>
   17244:	add	r0, pc, r0
   17248:	ldr	r1, [pc, #100]	; 172b4 <flatcc_builder_check_required_field@@Base+0xa0>
   1724c:	add	r1, pc, r1
   17250:	ldr	r2, [pc, #96]	; 172b8 <flatcc_builder_check_required_field@@Base+0xa4>
   17254:	add	r3, pc, r2
   17258:	movw	r2, #1272	; 0x4f8
   1725c:	bl	12494 <__assert_fail@plt>
   17260:	ldrh	r0, [fp, #-6]
   17264:	ldr	r1, [fp, #-4]
   17268:	ldrh	r1, [r1, #8]
   1726c:	cmp	r0, r1
   17270:	movw	r0, #0
   17274:	str	r0, [sp, #4]
   17278:	bge	172a0 <flatcc_builder_check_required_field@@Base+0x8c>
   1727c:	ldr	r0, [fp, #-4]
   17280:	ldr	r0, [r0, #4]
   17284:	ldrh	r1, [fp, #-6]
   17288:	add	r0, r0, r1, lsl #1
   1728c:	ldrh	r0, [r0]
   17290:	cmp	r0, #0
   17294:	movw	r0, #0
   17298:	movne	r0, #1
   1729c:	str	r0, [sp, #4]
   172a0:	ldr	r0, [sp, #4]
   172a4:	and	r0, r0, #1
   172a8:	mov	sp, fp
   172ac:	pop	{fp, pc}
   172b0:	andeq	r4, r0, ip, lsl #14
   172b4:	ldrdeq	r3, [r0], -r8
   172b8:	andeq	r4, r0, r7, lsr #14

000172bc <flatcc_builder_check_union_field@@Base>:
   172bc:	push	{fp, lr}
   172c0:	mov	fp, sp
   172c4:	sub	sp, sp, #16
   172c8:	str	r0, [sp, #8]
   172cc:	strh	r1, [sp, #6]
   172d0:	ldr	r0, [sp, #8]
   172d4:	ldr	r0, [r0, #32]
   172d8:	ldrh	r0, [r0, #14]
   172dc:	cmp	r0, #3
   172e0:	bne	172e8 <flatcc_builder_check_union_field@@Base+0x2c>
   172e4:	b	17308 <flatcc_builder_check_union_field@@Base+0x4c>
   172e8:	ldr	r0, [pc, #284]	; 1740c <flatcc_builder_check_union_field@@Base+0x150>
   172ec:	add	r0, pc, r0
   172f0:	ldr	r1, [pc, #280]	; 17410 <flatcc_builder_check_union_field@@Base+0x154>
   172f4:	add	r1, pc, r1
   172f8:	ldr	r2, [pc, #276]	; 17414 <flatcc_builder_check_union_field@@Base+0x158>
   172fc:	add	r3, pc, r2
   17300:	movw	r2, #1279	; 0x4ff
   17304:	bl	12494 <__assert_fail@plt>
   17308:	ldrh	r0, [sp, #6]
   1730c:	cmp	r0, #0
   17310:	beq	17328 <flatcc_builder_check_union_field@@Base+0x6c>
   17314:	ldrh	r0, [sp, #6]
   17318:	ldr	r1, [sp, #8]
   1731c:	ldrh	r1, [r1, #8]
   17320:	cmp	r0, r1
   17324:	blt	17334 <flatcc_builder_check_union_field@@Base+0x78>
   17328:	movw	r0, #0
   1732c:	str	r0, [fp, #-4]
   17330:	b	17400 <flatcc_builder_check_union_field@@Base+0x144>
   17334:	ldr	r0, [sp, #8]
   17338:	ldr	r0, [r0, #4]
   1733c:	ldrh	r1, [sp, #6]
   17340:	sub	r1, r1, #1
   17344:	add	r0, r0, r1, lsl #1
   17348:	ldrh	r0, [r0]
   1734c:	cmp	r0, #0
   17350:	bne	17380 <flatcc_builder_check_union_field@@Base+0xc4>
   17354:	ldr	r0, [sp, #8]
   17358:	ldr	r0, [r0, #4]
   1735c:	ldrh	r1, [sp, #6]
   17360:	add	r0, r0, r1, lsl #1
   17364:	ldrh	r0, [r0]
   17368:	cmp	r0, #0
   1736c:	movw	r0, #0
   17370:	moveq	r0, #1
   17374:	and	r0, r0, #1
   17378:	str	r0, [fp, #-4]
   1737c:	b	17400 <flatcc_builder_check_union_field@@Base+0x144>
   17380:	ldr	r0, [sp, #8]
   17384:	ldr	r1, [r0, #4]
   17388:	ldr	r0, [r0, #16]
   1738c:	ldrh	r2, [sp, #6]
   17390:	sub	r2, r2, #1
   17394:	add	r1, r1, r2, lsl #1
   17398:	ldrh	r1, [r1]
   1739c:	add	r0, r0, r1
   173a0:	ldrsb	r0, [r0]
   173a4:	cmp	r0, #0
   173a8:	beq	173d8 <flatcc_builder_check_union_field@@Base+0x11c>
   173ac:	ldr	r0, [sp, #8]
   173b0:	ldr	r0, [r0, #4]
   173b4:	ldrh	r1, [sp, #6]
   173b8:	add	r0, r0, r1, lsl #1
   173bc:	ldrh	r0, [r0]
   173c0:	cmp	r0, #0
   173c4:	movw	r0, #0
   173c8:	movne	r0, #1
   173cc:	and	r0, r0, #1
   173d0:	str	r0, [fp, #-4]
   173d4:	b	17400 <flatcc_builder_check_union_field@@Base+0x144>
   173d8:	ldr	r0, [sp, #8]
   173dc:	ldr	r0, [r0, #4]
   173e0:	ldrh	r1, [sp, #6]
   173e4:	add	r0, r0, r1, lsl #1
   173e8:	ldrh	r0, [r0]
   173ec:	cmp	r0, #0
   173f0:	movw	r0, #0
   173f4:	moveq	r0, #1
   173f8:	and	r0, r0, #1
   173fc:	str	r0, [fp, #-4]
   17400:	ldr	r0, [fp, #-4]
   17404:	mov	sp, fp
   17408:	pop	{fp, pc}
   1740c:	andeq	r4, r0, r4, ror #12
   17410:	andeq	r3, r0, r0, lsr lr
   17414:	ldrdeq	r4, [r0], -r2

00017418 <flatcc_builder_check_required@@Base>:
   17418:	push	{fp, lr}
   1741c:	mov	fp, sp
   17420:	sub	sp, sp, #24
   17424:	str	r0, [fp, #-8]
   17428:	str	r1, [sp, #12]
   1742c:	str	r2, [sp, #8]
   17430:	ldr	r0, [fp, #-8]
   17434:	ldr	r0, [r0, #32]
   17438:	ldrh	r0, [r0, #14]
   1743c:	cmp	r0, #3
   17440:	bne	17448 <flatcc_builder_check_required@@Base+0x30>
   17444:	b	17468 <flatcc_builder_check_required@@Base+0x50>
   17448:	ldr	r0, [pc, #172]	; 174fc <flatcc_builder_check_required@@Base+0xe4>
   1744c:	add	r0, pc, r0
   17450:	ldr	r1, [pc, #168]	; 17500 <flatcc_builder_check_required@@Base+0xe8>
   17454:	add	r1, pc, r1
   17458:	ldr	r2, [pc, #164]	; 17504 <flatcc_builder_check_required@@Base+0xec>
   1745c:	add	r3, pc, r2
   17460:	movw	r2, #1297	; 0x511
   17464:	bl	12494 <__assert_fail@plt>
   17468:	ldr	r0, [fp, #-8]
   1746c:	ldrh	r0, [r0, #8]
   17470:	ldr	r1, [sp, #8]
   17474:	cmp	r0, r1
   17478:	bge	17488 <flatcc_builder_check_required@@Base+0x70>
   1747c:	movw	r0, #0
   17480:	str	r0, [fp, #-4]
   17484:	b	174f0 <flatcc_builder_check_required@@Base+0xd8>
   17488:	movw	r0, #0
   1748c:	str	r0, [sp, #4]
   17490:	ldr	r0, [sp, #4]
   17494:	ldr	r1, [sp, #8]
   17498:	cmp	r0, r1
   1749c:	bge	174e8 <flatcc_builder_check_required@@Base+0xd0>
   174a0:	ldr	r0, [fp, #-8]
   174a4:	ldr	r0, [r0, #4]
   174a8:	ldr	r1, [sp, #12]
   174ac:	ldr	r2, [sp, #4]
   174b0:	add	r1, r1, r2, lsl #1
   174b4:	ldrh	r1, [r1]
   174b8:	add	r0, r0, r1, lsl #1
   174bc:	ldrh	r0, [r0]
   174c0:	cmp	r0, #0
   174c4:	bne	174d4 <flatcc_builder_check_required@@Base+0xbc>
   174c8:	movw	r0, #0
   174cc:	str	r0, [fp, #-4]
   174d0:	b	174f0 <flatcc_builder_check_required@@Base+0xd8>
   174d4:	b	174d8 <flatcc_builder_check_required@@Base+0xc0>
   174d8:	ldr	r0, [sp, #4]
   174dc:	add	r0, r0, #1
   174e0:	str	r0, [sp, #4]
   174e4:	b	17490 <flatcc_builder_check_required@@Base+0x78>
   174e8:	movw	r0, #1
   174ec:	str	r0, [fp, #-4]
   174f0:	ldr	r0, [fp, #-4]
   174f4:	mov	sp, fp
   174f8:	pop	{fp, pc}
   174fc:	andeq	r4, r0, r4, lsl #10
   17500:	ldrdeq	r3, [r0], -r0
   17504:	andeq	r4, r0, r2, asr #11

00017508 <flatcc_builder_end_table@@Base>:
   17508:	push	{r4, r5, fp, lr}
   1750c:	add	fp, sp, #8
   17510:	sub	sp, sp, #48	; 0x30
   17514:	str	r0, [fp, #-16]
   17518:	ldr	r0, [fp, #-16]
   1751c:	ldr	r0, [r0, #32]
   17520:	ldrh	r0, [r0, #14]
   17524:	cmp	r0, #3
   17528:	bne	17530 <flatcc_builder_end_table@@Base+0x28>
   1752c:	b	17550 <flatcc_builder_end_table@@Base+0x48>
   17530:	ldr	r0, [pc, #500]	; 1772c <flatcc_builder_end_table@@Base+0x224>
   17534:	add	r0, pc, r0
   17538:	ldr	r1, [pc, #496]	; 17730 <flatcc_builder_end_table@@Base+0x228>
   1753c:	add	r1, pc, r1
   17540:	ldr	r2, [pc, #492]	; 17734 <flatcc_builder_end_table@@Base+0x22c>
   17544:	add	r3, pc, r2
   17548:	movw	r2, #1317	; 0x525
   1754c:	bl	12494 <__assert_fail@plt>
   17550:	ldr	r0, [pc, #480]	; 17738 <flatcc_builder_end_table@@Base+0x230>
   17554:	ldr	r1, [fp, #-16]
   17558:	ldr	r1, [r1, #4]
   1755c:	sub	r1, r1, #4
   17560:	str	r1, [fp, #-20]	; 0xffffffec
   17564:	ldr	r1, [fp, #-16]
   17568:	ldrh	r1, [r1, #8]
   1756c:	add	r1, r1, #2
   17570:	lsl	r1, r1, #1
   17574:	strh	r1, [fp, #-22]	; 0xffffffea
   17578:	ldrh	r1, [fp, #-22]	; 0xffffffea
   1757c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17580:	strh	r1, [r2]
   17584:	ldr	r1, [fp, #-16]
   17588:	ldr	r1, [r1, #20]
   1758c:	uxth	r1, r1
   17590:	add	r1, r1, #4
   17594:	ldr	r2, [fp, #-20]	; 0xffffffec
   17598:	strh	r1, [r2, #2]
   1759c:	ldr	r1, [fp, #-20]	; 0xffffffec
   175a0:	ldrh	r1, [r1]
   175a4:	ldr	r2, [fp, #-16]
   175a8:	ldr	r2, [r2, #12]
   175ac:	eor	r1, r1, r2
   175b0:	mul	r1, r1, r0
   175b4:	ldr	r2, [fp, #-20]	; 0xffffffec
   175b8:	ldrh	r2, [r2, #2]
   175bc:	eor	r1, r1, r2
   175c0:	mul	r0, r1, r0
   175c4:	ldr	r1, [fp, #-16]
   175c8:	str	r0, [r1, #12]
   175cc:	ldr	r0, [fp, #-16]
   175d0:	ldr	r1, [fp, #-20]	; 0xffffffec
   175d4:	ldrh	r2, [fp, #-22]	; 0xffffffea
   175d8:	ldr	r3, [fp, #-16]
   175dc:	ldr	r3, [r3, #12]
   175e0:	uxth	r2, r2
   175e4:	bl	16bb4 <flatcc_builder_create_cached_vtable@@Base>
   175e8:	str	r0, [sp, #24]
   175ec:	cmp	r0, #0
   175f0:	bne	17600 <flatcc_builder_end_table@@Base+0xf8>
   175f4:	movw	r0, #0
   175f8:	str	r0, [fp, #-12]
   175fc:	b	17720 <flatcc_builder_end_table@@Base+0x218>
   17600:	ldr	r0, [fp, #-20]	; 0xffffffec
   17604:	ldrh	r2, [fp, #-22]	; 0xffffffea
   17608:	mov	r1, #0
   1760c:	bl	12458 <memset@plt>
   17610:	ldr	r1, [fp, #-16]
   17614:	ldr	r2, [r1, #32]
   17618:	ldr	r1, [r1, #76]	; 0x4c
   1761c:	ldr	r2, [r2, #20]
   17620:	add	r1, r1, r2
   17624:	str	r1, [sp, #16]
   17628:	ldr	r1, [fp, #-16]
   1762c:	ldr	r1, [r1]
   17630:	ldr	r2, [sp, #16]
   17634:	sub	r1, r1, r2
   17638:	asr	r1, r1, #1
   1763c:	str	r1, [sp, #20]
   17640:	ldr	r1, [fp, #-16]
   17644:	ldr	r2, [fp, #-16]
   17648:	ldr	r2, [r2, #16]
   1764c:	ldr	lr, [fp, #-16]
   17650:	ldr	lr, [lr, #20]
   17654:	ldr	r3, [fp, #-16]
   17658:	ldrh	r3, [r3, #130]	; 0x82
   1765c:	ldr	ip, [sp, #16]
   17660:	ldr	r4, [sp, #20]
   17664:	ldr	r5, [sp, #24]
   17668:	str	r0, [sp, #12]
   1766c:	mov	r0, r1
   17670:	mov	r1, r2
   17674:	mov	r2, lr
   17678:	uxth	r3, r3
   1767c:	str	ip, [sp]
   17680:	str	r4, [sp, #4]
   17684:	str	r5, [sp, #8]
   17688:	bl	16f44 <flatcc_builder_create_table@@Base>
   1768c:	str	r0, [sp, #28]
   17690:	movw	r1, #0
   17694:	cmp	r1, r0
   17698:	bne	176a8 <flatcc_builder_end_table@@Base+0x1a0>
   1769c:	movw	r0, #0
   176a0:	str	r0, [fp, #-12]
   176a4:	b	17720 <flatcc_builder_end_table@@Base+0x218>
   176a8:	ldr	r0, [fp, #-16]
   176ac:	ldr	r0, [r0, #32]
   176b0:	ldr	r0, [r0, #24]
   176b4:	ldr	r1, [fp, #-16]
   176b8:	str	r0, [r1, #12]
   176bc:	ldr	r0, [fp, #-16]
   176c0:	ldr	r0, [r0, #32]
   176c4:	ldrh	r0, [r0, #28]
   176c8:	ldr	r1, [fp, #-16]
   176cc:	strh	r0, [r1, #8]
   176d0:	ldr	r0, [fp, #-16]
   176d4:	ldr	r0, [r0, #52]	; 0x34
   176d8:	ldr	r1, [fp, #-16]
   176dc:	ldr	r1, [r1, #32]
   176e0:	ldr	r1, [r1, #16]
   176e4:	add	r0, r0, r1
   176e8:	ldr	r1, [fp, #-16]
   176ec:	str	r0, [r1, #4]
   176f0:	ldr	r0, [fp, #-16]
   176f4:	ldr	r0, [r0, #76]	; 0x4c
   176f8:	ldr	r1, [fp, #-16]
   176fc:	ldr	r1, [r1, #32]
   17700:	ldr	r1, [r1, #20]
   17704:	add	r0, r0, r1
   17708:	ldr	r1, [fp, #-16]
   1770c:	str	r0, [r1]
   17710:	ldr	r0, [fp, #-16]
   17714:	bl	15610 <flatcc_builder_end_buffer@@Base+0x170>
   17718:	ldr	r0, [sp, #28]
   1771c:	str	r0, [fp, #-12]
   17720:	ldr	r0, [fp, #-12]
   17724:	sub	sp, fp, #8
   17728:	pop	{r4, r5, fp, pc}
   1772c:	andeq	r4, r0, ip, lsl r4
   17730:	andeq	r3, r0, r8, ror #23
   17734:	andeq	r4, r0, r4, lsr r5
   17738:			; <UNDEFINED> instruction: 0x9e3779b1

0001773c <flatcc_builder_create_vector@@Base>:
   1773c:	push	{fp, lr}
   17740:	mov	fp, sp
   17744:	sub	sp, sp, #112	; 0x70
   17748:	ldr	ip, [fp, #12]
   1774c:	ldr	lr, [fp, #8]
   17750:	str	r0, [fp, #-8]
   17754:	str	r1, [fp, #-12]
   17758:	str	r2, [fp, #-16]
   1775c:	str	r3, [fp, #-20]	; 0xffffffec
   17760:	strh	lr, [fp, #-22]	; 0xffffffea
   17764:	ldr	r0, [fp, #-16]
   17768:	ldr	r1, [fp, #12]
   1776c:	cmp	r0, r1
   17770:	str	ip, [sp]
   17774:	bls	177b8 <flatcc_builder_create_vector@@Base+0x7c>
   17778:	ldr	r0, [fp, #-16]
   1777c:	ldr	r1, [fp, #12]
   17780:	cmp	r0, r1
   17784:	bhi	1778c <flatcc_builder_create_vector@@Base+0x50>
   17788:	b	177ac <flatcc_builder_create_vector@@Base+0x70>
   1778c:	ldr	r0, [pc, #364]	; 17900 <flatcc_builder_create_vector@@Base+0x1c4>
   17790:	add	r0, pc, r0
   17794:	ldr	r1, [pc, #360]	; 17904 <flatcc_builder_create_vector@@Base+0x1c8>
   17798:	add	r1, pc, r1
   1779c:	ldr	r2, [pc, #356]	; 17908 <flatcc_builder_create_vector@@Base+0x1cc>
   177a0:	add	r3, pc, r2
   177a4:	movw	r2, #1365	; 0x555
   177a8:	bl	12494 <__assert_fail@plt>
   177ac:	movw	r0, #0
   177b0:	str	r0, [fp, #-4]
   177b4:	b	178f4 <flatcc_builder_create_vector@@Base+0x1b8>
   177b8:	sub	r0, fp, #22
   177bc:	mov	r1, #4
   177c0:	bl	164c8 <flatcc_builder_start_vector@@Base+0xac>
   177c4:	ldr	r0, [fp, #-8]
   177c8:	ldrh	r1, [fp, #-22]	; 0xffffffea
   177cc:	bl	14fdc <flatcc_builder_create_buffer@@Base+0x3a8>
   177d0:	ldr	r0, [fp, #-16]
   177d4:	ldr	r1, [fp, #-20]	; 0xffffffec
   177d8:	mul	r0, r0, r1
   177dc:	str	r0, [fp, #-28]	; 0xffffffe4
   177e0:	ldr	r0, [fp, #-16]
   177e4:	bl	14afc <flatcc_builder_embed_buffer@@Base+0x388>
   177e8:	str	r0, [fp, #-36]	; 0xffffffdc
   177ec:	ldr	r0, [fp, #-8]
   177f0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   177f4:	ldrh	r2, [fp, #-22]	; 0xffffffea
   177f8:	bl	14ac8 <flatcc_builder_embed_buffer@@Base+0x354>
   177fc:	str	r0, [fp, #-32]	; 0xffffffe0
   17800:	mov	r0, #0
   17804:	str	r0, [sp, #4]
   17808:	str	r0, [sp, #8]
   1780c:	ldr	r0, [sp, #4]
   17810:	add	r0, r0, #4
   17814:	str	r0, [sp, #4]
   17818:	add	r0, sp, #4
   1781c:	add	r0, r0, #8
   17820:	ldr	r1, [sp, #8]
   17824:	sub	r2, fp, #36	; 0x24
   17828:	str	r2, [r0, r1, lsl #3]
   1782c:	ldr	r1, [sp, #8]
   17830:	add	r0, r0, r1, lsl #3
   17834:	movw	r1, #4
   17838:	str	r1, [r0, #4]
   1783c:	ldr	r0, [sp, #8]
   17840:	add	r0, r0, #1
   17844:	str	r0, [sp, #8]
   17848:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1784c:	cmp	r0, #0
   17850:	bls	17894 <flatcc_builder_create_vector@@Base+0x158>
   17854:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17858:	ldr	r1, [sp, #4]
   1785c:	add	r0, r1, r0
   17860:	str	r0, [sp, #4]
   17864:	ldr	r0, [fp, #-12]
   17868:	add	r1, sp, #4
   1786c:	add	r1, r1, #8
   17870:	ldr	r2, [sp, #8]
   17874:	str	r0, [r1, r2, lsl #3]
   17878:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1787c:	ldr	r2, [sp, #8]
   17880:	add	r1, r1, r2, lsl #3
   17884:	str	r0, [r1, #4]
   17888:	ldr	r0, [sp, #8]
   1788c:	add	r0, r0, #1
   17890:	str	r0, [sp, #8]
   17894:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17898:	cmp	r0, #0
   1789c:	bls	178e4 <flatcc_builder_create_vector@@Base+0x1a8>
   178a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   178a4:	ldr	r1, [sp, #4]
   178a8:	add	r0, r1, r0
   178ac:	str	r0, [sp, #4]
   178b0:	add	r0, sp, #4
   178b4:	add	r0, r0, #8
   178b8:	ldr	r1, [sp, #8]
   178bc:	ldr	r2, [pc, #72]	; 1790c <flatcc_builder_create_vector@@Base+0x1d0>
   178c0:	ldr	r2, [pc, r2]
   178c4:	str	r2, [r0, r1, lsl #3]
   178c8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   178cc:	ldr	r2, [sp, #8]
   178d0:	add	r0, r0, r2, lsl #3
   178d4:	str	r1, [r0, #4]
   178d8:	ldr	r0, [sp, #8]
   178dc:	add	r0, r0, #1
   178e0:	str	r0, [sp, #8]
   178e4:	ldr	r0, [fp, #-8]
   178e8:	add	r1, sp, #4
   178ec:	bl	14b10 <flatcc_builder_embed_buffer@@Base+0x39c>
   178f0:	str	r0, [fp, #-4]
   178f4:	ldr	r0, [fp, #-4]
   178f8:	mov	sp, fp
   178fc:	pop	{fp, pc}
   17900:	andeq	r4, r0, sl, lsr #6
   17904:	andeq	r3, r0, ip, lsl #19
   17908:	andeq	r4, r0, sp, lsr #6
   1790c:	muleq	r1, r4, r7

00017910 <flatcc_builder_end_vector@@Base>:
   17910:	push	{fp, lr}
   17914:	mov	fp, sp
   17918:	sub	sp, sp, #24
   1791c:	str	r0, [fp, #-8]
   17920:	ldr	r0, [fp, #-8]
   17924:	ldr	r0, [r0, #32]
   17928:	ldrh	r0, [r0, #14]
   1792c:	cmp	r0, #4
   17930:	bne	17938 <flatcc_builder_end_vector@@Base+0x28>
   17934:	b	17958 <flatcc_builder_end_vector@@Base+0x48>
   17938:	ldr	r0, [pc, #152]	; 179d8 <flatcc_builder_end_vector@@Base+0xc8>
   1793c:	add	r0, pc, r0
   17940:	ldr	r1, [pc, #148]	; 179dc <flatcc_builder_end_vector@@Base+0xcc>
   17944:	add	r1, pc, r1
   17948:	ldr	r2, [pc, #144]	; 179e0 <flatcc_builder_end_vector@@Base+0xd0>
   1794c:	add	r3, pc, r2
   17950:	movw	r2, #1400	; 0x578
   17954:	bl	12494 <__assert_fail@plt>
   17958:	ldr	r0, [fp, #-8]
   1795c:	ldr	r1, [fp, #-8]
   17960:	ldr	r1, [r1, #16]
   17964:	ldr	r2, [fp, #-8]
   17968:	ldr	r2, [r2, #32]
   1796c:	ldr	r2, [r2, #20]
   17970:	ldr	r3, [fp, #-8]
   17974:	ldr	r3, [r3, #32]
   17978:	ldr	r3, [r3, #16]
   1797c:	ldr	ip, [fp, #-8]
   17980:	ldrh	ip, [ip, #130]	; 0x82
   17984:	ldr	lr, [fp, #-8]
   17988:	ldr	lr, [lr, #32]
   1798c:	ldr	lr, [lr, #24]
   17990:	uxth	ip, ip
   17994:	str	ip, [sp]
   17998:	str	lr, [sp, #4]
   1799c:	bl	1773c <flatcc_builder_create_vector@@Base>
   179a0:	str	r0, [sp, #12]
   179a4:	movw	r1, #0
   179a8:	cmp	r1, r0
   179ac:	bne	179bc <flatcc_builder_end_vector@@Base+0xac>
   179b0:	movw	r0, #0
   179b4:	str	r0, [fp, #-4]
   179b8:	b	179cc <flatcc_builder_end_vector@@Base+0xbc>
   179bc:	ldr	r0, [fp, #-8]
   179c0:	bl	15610 <flatcc_builder_end_buffer@@Base+0x170>
   179c4:	ldr	r0, [sp, #12]
   179c8:	str	r0, [fp, #-4]
   179cc:	ldr	r0, [fp, #-4]
   179d0:	mov	sp, fp
   179d4:	pop	{fp, pc}
   179d8:	andeq	r3, r0, r2, lsr #22
   179dc:	andeq	r3, r0, r0, ror #15
   179e0:	strdeq	r4, [r0], -r7

000179e4 <flatcc_builder_vector_count@@Base>:
   179e4:	sub	sp, sp, #4
   179e8:	str	r0, [sp]
   179ec:	ldr	r0, [sp]
   179f0:	ldr	r0, [r0, #32]
   179f4:	ldr	r0, [r0, #20]
   179f8:	add	sp, sp, #4
   179fc:	bx	lr

00017a00 <flatcc_builder_vector_edit@@Base>:
   17a00:	sub	sp, sp, #4
   17a04:	str	r0, [sp]
   17a08:	ldr	r0, [sp]
   17a0c:	ldr	r0, [r0, #16]
   17a10:	add	sp, sp, #4
   17a14:	bx	lr

00017a18 <flatcc_builder_create_offset_vector_direct@@Base>:
   17a18:	push	{fp, lr}
   17a1c:	mov	fp, sp
   17a20:	sub	sp, sp, #16
   17a24:	str	r0, [fp, #-4]
   17a28:	str	r1, [sp, #8]
   17a2c:	str	r2, [sp, #4]
   17a30:	ldr	r0, [fp, #-4]
   17a34:	ldr	r1, [sp, #8]
   17a38:	ldr	r2, [sp, #4]
   17a3c:	movw	r3, #0
   17a40:	bl	17a4c <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   17a44:	mov	sp, fp
   17a48:	pop	{fp, pc}
   17a4c:	push	{fp, lr}
   17a50:	mov	fp, sp
   17a54:	sub	sp, sp, #120	; 0x78
   17a58:	ldr	ip, [pc, #696]	; 17d18 <flatcc_builder_create_offset_vector_direct@@Base+0x300>
   17a5c:	str	r0, [fp, #-8]
   17a60:	str	r1, [fp, #-12]
   17a64:	str	r2, [fp, #-16]
   17a68:	str	r3, [fp, #-20]	; 0xffffffec
   17a6c:	ldr	r0, [fp, #-16]
   17a70:	cmp	r0, ip
   17a74:	bls	17a84 <flatcc_builder_create_offset_vector_direct@@Base+0x6c>
   17a78:	movw	r0, #0
   17a7c:	str	r0, [fp, #-4]
   17a80:	b	17d0c <flatcc_builder_create_offset_vector_direct@@Base+0x2f4>
   17a84:	ldr	r0, [fp, #-8]
   17a88:	mov	r1, #4
   17a8c:	str	r1, [sp]
   17a90:	bl	14fdc <flatcc_builder_create_buffer@@Base+0x3a8>
   17a94:	ldr	r0, [fp, #-16]
   17a98:	lsl	r0, r0, #2
   17a9c:	str	r0, [fp, #-24]	; 0xffffffe8
   17aa0:	ldr	r0, [fp, #-16]
   17aa4:	bl	14afc <flatcc_builder_embed_buffer@@Base+0x388>
   17aa8:	str	r0, [fp, #-32]	; 0xffffffe0
   17aac:	ldr	r0, [fp, #-8]
   17ab0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   17ab4:	ldr	r2, [sp]
   17ab8:	bl	14ac8 <flatcc_builder_embed_buffer@@Base+0x354>
   17abc:	str	r0, [fp, #-28]	; 0xffffffe4
   17ac0:	mov	r0, #0
   17ac4:	str	r0, [sp, #4]
   17ac8:	str	r0, [sp, #8]
   17acc:	ldr	r0, [sp, #4]
   17ad0:	add	r0, r0, #4
   17ad4:	str	r0, [sp, #4]
   17ad8:	add	r0, sp, #4
   17adc:	add	r0, r0, #8
   17ae0:	ldr	r1, [sp, #8]
   17ae4:	sub	r2, fp, #32
   17ae8:	str	r2, [r0, r1, lsl #3]
   17aec:	ldr	r1, [sp, #8]
   17af0:	add	r0, r0, r1, lsl #3
   17af4:	movw	r1, #4
   17af8:	str	r1, [r0, #4]
   17afc:	ldr	r0, [sp, #8]
   17b00:	add	r0, r0, #1
   17b04:	str	r0, [sp, #8]
   17b08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17b0c:	cmp	r0, #0
   17b10:	bls	17b54 <flatcc_builder_create_offset_vector_direct@@Base+0x13c>
   17b14:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17b18:	ldr	r1, [sp, #4]
   17b1c:	add	r0, r1, r0
   17b20:	str	r0, [sp, #4]
   17b24:	ldr	r0, [fp, #-12]
   17b28:	add	r1, sp, #4
   17b2c:	add	r1, r1, #8
   17b30:	ldr	r2, [sp, #8]
   17b34:	str	r0, [r1, r2, lsl #3]
   17b38:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17b3c:	ldr	r2, [sp, #8]
   17b40:	add	r1, r1, r2, lsl #3
   17b44:	str	r0, [r1, #4]
   17b48:	ldr	r0, [sp, #8]
   17b4c:	add	r0, r0, #1
   17b50:	str	r0, [sp, #8]
   17b54:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17b58:	cmp	r0, #0
   17b5c:	bls	17ba4 <flatcc_builder_create_offset_vector_direct@@Base+0x18c>
   17b60:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17b64:	ldr	r1, [sp, #4]
   17b68:	add	r0, r1, r0
   17b6c:	str	r0, [sp, #4]
   17b70:	add	r0, sp, #4
   17b74:	add	r0, r0, #8
   17b78:	ldr	r1, [sp, #8]
   17b7c:	ldr	r2, [pc, #444]	; 17d40 <flatcc_builder_create_offset_vector_direct@@Base+0x328>
   17b80:	ldr	r2, [pc, r2]
   17b84:	str	r2, [r0, r1, lsl #3]
   17b88:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17b8c:	ldr	r2, [sp, #8]
   17b90:	add	r0, r0, r2, lsl #3
   17b94:	str	r1, [r0, #4]
   17b98:	ldr	r0, [sp, #8]
   17b9c:	add	r0, r0, #1
   17ba0:	str	r0, [sp, #8]
   17ba4:	ldr	r0, [fp, #-8]
   17ba8:	ldr	r0, [r0, #136]	; 0x88
   17bac:	ldr	r1, [sp, #4]
   17bb0:	sub	r0, r0, r1
   17bb4:	str	r0, [fp, #-36]	; 0xffffffdc
   17bb8:	movw	r0, #0
   17bbc:	str	r0, [fp, #-44]	; 0xffffffd4
   17bc0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17bc4:	ldr	r1, [fp, #-16]
   17bc8:	cmp	r0, r1
   17bcc:	bcs	17cfc <flatcc_builder_create_offset_vector_direct@@Base+0x2e4>
   17bd0:	ldr	r0, [fp, #-12]
   17bd4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17bd8:	add	r0, r0, r1, lsl #2
   17bdc:	ldr	r0, [r0]
   17be0:	cmp	r0, #0
   17be4:	beq	17c74 <flatcc_builder_create_offset_vector_direct@@Base+0x25c>
   17be8:	ldr	r0, [fp, #-12]
   17bec:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17bf0:	ldr	r0, [r0, r1, lsl #2]
   17bf4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17bf8:	sub	r0, r0, r2
   17bfc:	sub	r0, r0, r1, lsl #2
   17c00:	sub	r0, r0, #4
   17c04:	str	r0, [fp, #-40]	; 0xffffffd8
   17c08:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17c0c:	bl	14afc <flatcc_builder_embed_buffer@@Base+0x388>
   17c10:	ldr	r1, [fp, #-12]
   17c14:	ldr	r2, [fp, #-44]	; 0xffffffd4
   17c18:	add	r1, r1, r2, lsl #2
   17c1c:	str	r0, [r1]
   17c20:	ldr	r0, [fp, #-20]	; 0xffffffec
   17c24:	movw	r1, #0
   17c28:	cmp	r0, r1
   17c2c:	beq	17c70 <flatcc_builder_create_offset_vector_direct@@Base+0x258>
   17c30:	ldr	r0, [fp, #-20]	; 0xffffffec
   17c34:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17c38:	add	r0, r0, r1
   17c3c:	ldrb	r0, [r0]
   17c40:	cmp	r0, #0
   17c44:	beq	17c4c <flatcc_builder_create_offset_vector_direct@@Base+0x234>
   17c48:	b	17c6c <flatcc_builder_create_offset_vector_direct@@Base+0x254>
   17c4c:	ldr	r0, [pc, #224]	; 17d34 <flatcc_builder_create_offset_vector_direct@@Base+0x31c>
   17c50:	add	r0, pc, r0
   17c54:	ldr	r1, [pc, #220]	; 17d38 <flatcc_builder_create_offset_vector_direct@@Base+0x320>
   17c58:	add	r1, pc, r1
   17c5c:	ldr	r2, [pc, #216]	; 17d3c <flatcc_builder_create_offset_vector_direct@@Base+0x324>
   17c60:	add	r3, pc, r2
   17c64:	movw	r2, #1457	; 0x5b1
   17c68:	bl	12494 <__assert_fail@plt>
   17c6c:	b	17c70 <flatcc_builder_create_offset_vector_direct@@Base+0x258>
   17c70:	b	17ce8 <flatcc_builder_create_offset_vector_direct@@Base+0x2d0>
   17c74:	ldr	r0, [fp, #-20]	; 0xffffffec
   17c78:	movw	r1, #0
   17c7c:	cmp	r0, r1
   17c80:	beq	17cc4 <flatcc_builder_create_offset_vector_direct@@Base+0x2ac>
   17c84:	ldr	r0, [fp, #-20]	; 0xffffffec
   17c88:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17c8c:	add	r0, r0, r1
   17c90:	ldrb	r0, [r0]
   17c94:	cmp	r0, #0
   17c98:	bne	17ca0 <flatcc_builder_create_offset_vector_direct@@Base+0x288>
   17c9c:	b	17cc0 <flatcc_builder_create_offset_vector_direct@@Base+0x2a8>
   17ca0:	ldr	r0, [pc, #128]	; 17d28 <flatcc_builder_create_offset_vector_direct@@Base+0x310>
   17ca4:	add	r0, pc, r0
   17ca8:	ldr	r1, [pc, #124]	; 17d2c <flatcc_builder_create_offset_vector_direct@@Base+0x314>
   17cac:	add	r1, pc, r1
   17cb0:	ldr	r2, [pc, #120]	; 17d30 <flatcc_builder_create_offset_vector_direct@@Base+0x318>
   17cb4:	add	r3, pc, r2
   17cb8:	movw	r2, #1461	; 0x5b5
   17cbc:	bl	12494 <__assert_fail@plt>
   17cc0:	b	17ce4 <flatcc_builder_create_offset_vector_direct@@Base+0x2cc>
   17cc4:	ldr	r0, [pc, #80]	; 17d1c <flatcc_builder_create_offset_vector_direct@@Base+0x304>
   17cc8:	add	r0, pc, r0
   17ccc:	ldr	r1, [pc, #76]	; 17d20 <flatcc_builder_create_offset_vector_direct@@Base+0x308>
   17cd0:	add	r1, pc, r1
   17cd4:	ldr	r2, [pc, #72]	; 17d24 <flatcc_builder_create_offset_vector_direct@@Base+0x30c>
   17cd8:	add	r3, pc, r2
   17cdc:	movw	r2, #1463	; 0x5b7
   17ce0:	bl	12494 <__assert_fail@plt>
   17ce4:	b	17ce8 <flatcc_builder_create_offset_vector_direct@@Base+0x2d0>
   17ce8:	b	17cec <flatcc_builder_create_offset_vector_direct@@Base+0x2d4>
   17cec:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17cf0:	add	r0, r0, #1
   17cf4:	str	r0, [fp, #-44]	; 0xffffffd4
   17cf8:	b	17bc0 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   17cfc:	ldr	r0, [fp, #-8]
   17d00:	add	r1, sp, #4
   17d04:	bl	14b10 <flatcc_builder_embed_buffer@@Base+0x39c>
   17d08:	str	r0, [fp, #-4]
   17d0c:	ldr	r0, [fp, #-4]
   17d10:	mov	sp, fp
   17d14:	pop	{fp, pc}
   17d18:	svccc	0x00ffffff
   17d1c:	andeq	r4, r0, r9, lsl r6
   17d20:	andeq	r3, r0, r4, asr r4
   17d24:	andeq	r4, r0, fp, lsl #12
   17d28:	andeq	r4, r0, r2, asr #13
   17d2c:	andeq	r3, r0, r8, ror r4
   17d30:	andeq	r4, r0, pc, lsr #12
   17d34:	andeq	r4, r0, r5, lsl #13
   17d38:	andeq	r3, r0, ip, asr #9
   17d3c:	andeq	r4, r0, r3, lsl #13
   17d40:	ldrdeq	r5, [r1], -r4

00017d44 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   17d44:	push	{fp, lr}
   17d48:	mov	fp, sp
   17d4c:	sub	sp, sp, #16
   17d50:	str	r0, [sp, #8]
   17d54:	str	r1, [sp, #4]
   17d58:	ldr	r0, [sp, #8]
   17d5c:	ldr	r0, [r0, #32]
   17d60:	ldrh	r0, [r0, #14]
   17d64:	cmp	r0, #5
   17d68:	bne	17d70 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   17d6c:	b	17d90 <flatcc_builder_end_offset_vector_for_unions@@Base+0x4c>
   17d70:	ldr	r0, [pc, #112]	; 17de8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa4>
   17d74:	add	r0, pc, r0
   17d78:	ldr	r1, [pc, #108]	; 17dec <flatcc_builder_end_offset_vector_for_unions@@Base+0xa8>
   17d7c:	add	r1, pc, r1
   17d80:	ldr	r2, [pc, #104]	; 17df0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xac>
   17d84:	add	r3, pc, r2
   17d88:	movw	r2, #1493	; 0x5d5
   17d8c:	bl	12494 <__assert_fail@plt>
   17d90:	ldr	r0, [sp, #8]
   17d94:	ldr	r1, [sp, #8]
   17d98:	ldr	r1, [r1, #16]
   17d9c:	ldr	r2, [sp, #8]
   17da0:	ldr	r2, [r2, #32]
   17da4:	ldr	r2, [r2, #20]
   17da8:	ldr	r3, [sp, #4]
   17dac:	bl	17a4c <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   17db0:	str	r0, [sp]
   17db4:	movw	r1, #0
   17db8:	cmp	r1, r0
   17dbc:	bne	17dcc <flatcc_builder_end_offset_vector_for_unions@@Base+0x88>
   17dc0:	movw	r0, #0
   17dc4:	str	r0, [fp, #-4]
   17dc8:	b	17ddc <flatcc_builder_end_offset_vector_for_unions@@Base+0x98>
   17dcc:	ldr	r0, [sp, #8]
   17dd0:	bl	15610 <flatcc_builder_end_buffer@@Base+0x170>
   17dd4:	ldr	r0, [sp]
   17dd8:	str	r0, [fp, #-4]
   17ddc:	ldr	r0, [fp, #-4]
   17de0:	mov	sp, fp
   17de4:	pop	{fp, pc}
   17de8:	andeq	r3, r0, r3, ror #15
   17dec:	andeq	r3, r0, r8, lsr #7
   17df0:	andeq	r3, r0, ip, asr #28

00017df4 <flatcc_builder_offset_vector_edit@@Base>:
   17df4:	sub	sp, sp, #4
   17df8:	str	r0, [sp]
   17dfc:	ldr	r0, [sp]
   17e00:	ldr	r0, [r0, #16]
   17e04:	add	sp, sp, #4
   17e08:	bx	lr

00017e0c <flatcc_builder_offset_vector_count@@Base>:
   17e0c:	sub	sp, sp, #4
   17e10:	str	r0, [sp]
   17e14:	ldr	r0, [sp]
   17e18:	ldr	r0, [r0, #32]
   17e1c:	ldr	r0, [r0, #20]
   17e20:	add	sp, sp, #4
   17e24:	bx	lr

00017e28 <flatcc_builder_table_add_union@@Base>:
   17e28:	push	{fp, lr}
   17e2c:	mov	fp, sp
   17e30:	sub	sp, sp, #32
   17e34:	str	r2, [fp, #-12]
   17e38:	str	r3, [fp, #-8]
   17e3c:	str	r0, [sp, #16]
   17e40:	str	r1, [sp, #12]
   17e44:	ldr	r0, [sp, #16]
   17e48:	ldr	r0, [r0, #32]
   17e4c:	ldrh	r0, [r0, #14]
   17e50:	cmp	r0, #3
   17e54:	bne	17e5c <flatcc_builder_table_add_union@@Base+0x34>
   17e58:	b	17e7c <flatcc_builder_table_add_union@@Base+0x54>
   17e5c:	ldr	r0, [pc, #388]	; 17fe8 <flatcc_builder_table_add_union@@Base+0x1c0>
   17e60:	add	r0, pc, r0
   17e64:	ldr	r1, [pc, #384]	; 17fec <flatcc_builder_table_add_union@@Base+0x1c4>
   17e68:	add	r1, pc, r1
   17e6c:	ldr	r2, [pc, #380]	; 17ff0 <flatcc_builder_table_add_union@@Base+0x1c8>
   17e70:	add	r3, pc, r2
   17e74:	movw	r2, #1518	; 0x5ee
   17e78:	bl	12494 <__assert_fail@plt>
   17e7c:	ldrb	r0, [fp, #-12]
   17e80:	cmp	r0, #0
   17e84:	bne	17edc <flatcc_builder_table_add_union@@Base+0xb4>
   17e88:	ldr	r0, [fp, #-8]
   17e8c:	cmp	r0, #0
   17e90:	beq	17edc <flatcc_builder_table_add_union@@Base+0xb4>
   17e94:	ldrb	r0, [fp, #-12]
   17e98:	cmp	r0, #0
   17e9c:	bne	17eac <flatcc_builder_table_add_union@@Base+0x84>
   17ea0:	ldr	r0, [fp, #-8]
   17ea4:	cmp	r0, #0
   17ea8:	bne	17eb0 <flatcc_builder_table_add_union@@Base+0x88>
   17eac:	b	17ed0 <flatcc_builder_table_add_union@@Base+0xa8>
   17eb0:	ldr	r0, [pc, #316]	; 17ff4 <flatcc_builder_table_add_union@@Base+0x1cc>
   17eb4:	add	r0, pc, r0
   17eb8:	ldr	r1, [pc, #312]	; 17ff8 <flatcc_builder_table_add_union@@Base+0x1d0>
   17ebc:	add	r1, pc, r1
   17ec0:	ldr	r2, [pc, #308]	; 17ffc <flatcc_builder_table_add_union@@Base+0x1d4>
   17ec4:	add	r3, pc, r2
   17ec8:	movw	r2, #1519	; 0x5ef
   17ecc:	bl	12494 <__assert_fail@plt>
   17ed0:	mvn	r0, #0
   17ed4:	str	r0, [fp, #-4]
   17ed8:	b	17fdc <flatcc_builder_table_add_union@@Base+0x1b4>
   17edc:	ldr	r0, [fp, #-8]
   17ee0:	cmp	r0, #0
   17ee4:	beq	17f54 <flatcc_builder_table_add_union@@Base+0x12c>
   17ee8:	ldr	r0, [sp, #16]
   17eec:	ldr	r1, [sp, #12]
   17ef0:	bl	18018 <flatcc_builder_table_add_offset@@Base>
   17ef4:	str	r0, [sp, #8]
   17ef8:	ldr	r0, [sp, #8]
   17efc:	movw	r1, #0
   17f00:	cmp	r0, r1
   17f04:	bne	17f48 <flatcc_builder_table_add_union@@Base+0x120>
   17f08:	ldr	r0, [sp, #8]
   17f0c:	movw	r1, #0
   17f10:	cmp	r0, r1
   17f14:	beq	17f1c <flatcc_builder_table_add_union@@Base+0xf4>
   17f18:	b	17f3c <flatcc_builder_table_add_union@@Base+0x114>
   17f1c:	ldr	r0, [pc, #220]	; 18000 <flatcc_builder_table_add_union@@Base+0x1d8>
   17f20:	add	r0, pc, r0
   17f24:	ldr	r1, [pc, #216]	; 18004 <flatcc_builder_table_add_union@@Base+0x1dc>
   17f28:	add	r1, pc, r1
   17f2c:	ldr	r2, [pc, #212]	; 18008 <flatcc_builder_table_add_union@@Base+0x1e0>
   17f30:	add	r3, pc, r2
   17f34:	movw	r2, #1522	; 0x5f2
   17f38:	bl	12494 <__assert_fail@plt>
   17f3c:	mvn	r0, #0
   17f40:	str	r0, [fp, #-4]
   17f44:	b	17fdc <flatcc_builder_table_add_union@@Base+0x1b4>
   17f48:	ldr	r0, [fp, #-8]
   17f4c:	ldr	r1, [sp, #8]
   17f50:	str	r0, [r1]
   17f54:	ldr	r0, [sp, #16]
   17f58:	ldr	r1, [sp, #12]
   17f5c:	sub	r1, r1, #1
   17f60:	movw	r2, #1
   17f64:	movw	r3, #1
   17f68:	uxth	r3, r3
   17f6c:	bl	18148 <flatcc_builder_table_add@@Base>
   17f70:	str	r0, [sp, #4]
   17f74:	ldr	r0, [sp, #4]
   17f78:	movw	r1, #0
   17f7c:	cmp	r0, r1
   17f80:	bne	17fc4 <flatcc_builder_table_add_union@@Base+0x19c>
   17f84:	ldr	r0, [sp, #4]
   17f88:	movw	r1, #0
   17f8c:	cmp	r0, r1
   17f90:	beq	17f98 <flatcc_builder_table_add_union@@Base+0x170>
   17f94:	b	17fb8 <flatcc_builder_table_add_union@@Base+0x190>
   17f98:	ldr	r0, [pc, #108]	; 1800c <flatcc_builder_table_add_union@@Base+0x1e4>
   17f9c:	add	r0, pc, r0
   17fa0:	ldr	r1, [pc, #104]	; 18010 <flatcc_builder_table_add_union@@Base+0x1e8>
   17fa4:	add	r1, pc, r1
   17fa8:	ldr	r2, [pc, #100]	; 18014 <flatcc_builder_table_add_union@@Base+0x1ec>
   17fac:	add	r3, pc, r2
   17fb0:	movw	r2, #1526	; 0x5f6
   17fb4:	bl	12494 <__assert_fail@plt>
   17fb8:	mvn	r0, #0
   17fbc:	str	r0, [fp, #-4]
   17fc0:	b	17fdc <flatcc_builder_table_add_union@@Base+0x1b4>
   17fc4:	ldrb	r0, [fp, #-12]
   17fc8:	bl	182b0 <flatcc_builder_table_add@@Base+0x168>
   17fcc:	ldr	lr, [sp, #4]
   17fd0:	strb	r0, [lr]
   17fd4:	movw	r0, #0
   17fd8:	str	r0, [fp, #-4]
   17fdc:	ldr	r0, [fp, #-4]
   17fe0:	mov	sp, fp
   17fe4:	pop	{fp, pc}
   17fe8:	strdeq	r3, [r0], -r0
   17fec:			; <UNDEFINED> instruction: 0x000032bc
   17ff0:	ldrdeq	r3, [r0], -r2
   17ff4:	andeq	r3, r0, r6, ror #27
   17ff8:	andeq	r3, r0, r8, ror #4
   17ffc:	andeq	r3, r0, lr, ror sp
   18000:	muleq	r0, ip, sp
   18004:	strdeq	r3, [r0], -ip
   18008:	andeq	r3, r0, r2, lsl sp
   1800c:	andeq	r3, r0, sl, lsr #26
   18010:	andeq	r3, r0, r0, lsl #3
   18014:	muleq	r0, r6, ip

00018018 <flatcc_builder_table_add_offset@@Base>:
   18018:	push	{fp, lr}
   1801c:	mov	fp, sp
   18020:	sub	sp, sp, #8
   18024:	str	r0, [sp, #4]
   18028:	str	r1, [sp]
   1802c:	ldr	r0, [sp, #4]
   18030:	ldr	r0, [r0, #32]
   18034:	ldrh	r0, [r0, #14]
   18038:	cmp	r0, #3
   1803c:	bne	18044 <flatcc_builder_table_add_offset@@Base+0x2c>
   18040:	b	18064 <flatcc_builder_table_add_offset@@Base+0x4c>
   18044:	ldr	r0, [pc, #212]	; 18120 <flatcc_builder_table_add_offset@@Base+0x108>
   18048:	add	r0, pc, r0
   1804c:	ldr	r1, [pc, #208]	; 18124 <flatcc_builder_table_add_offset@@Base+0x10c>
   18050:	add	r1, pc, r1
   18054:	ldr	r2, [pc, #204]	; 18128 <flatcc_builder_table_add_offset@@Base+0x110>
   18058:	add	r3, pc, r2
   1805c:	movw	r2, #1811	; 0x713
   18060:	bl	12494 <__assert_fail@plt>
   18064:	ldr	r0, [sp]
   18068:	cmp	r0, #0
   1806c:	blt	18084 <flatcc_builder_table_add_offset@@Base+0x6c>
   18070:	ldr	r0, [sp]
   18074:	movw	r1, #32764	; 0x7ffc
   18078:	cmp	r0, r1
   1807c:	bgt	18084 <flatcc_builder_table_add_offset@@Base+0x6c>
   18080:	b	180a4 <flatcc_builder_table_add_offset@@Base+0x8c>
   18084:	ldr	r0, [pc, #160]	; 1812c <flatcc_builder_table_add_offset@@Base+0x114>
   18088:	add	r0, pc, r0
   1808c:	ldr	r1, [pc, #156]	; 18130 <flatcc_builder_table_add_offset@@Base+0x118>
   18090:	add	r1, pc, r1
   18094:	ldr	r2, [pc, #152]	; 18134 <flatcc_builder_table_add_offset@@Base+0x11c>
   18098:	add	r3, pc, r2
   1809c:	movw	r2, #1812	; 0x714
   180a0:	bl	12494 <__assert_fail@plt>
   180a4:	ldr	r0, [sp, #4]
   180a8:	ldr	r0, [r0, #4]
   180ac:	ldr	r1, [sp]
   180b0:	add	r0, r0, r1, lsl #1
   180b4:	ldrh	r0, [r0]
   180b8:	cmp	r0, #0
   180bc:	beq	180e0 <flatcc_builder_table_add_offset@@Base+0xc8>
   180c0:	ldr	r0, [pc, #116]	; 1813c <flatcc_builder_table_add_offset@@Base+0x124>
   180c4:	add	r0, pc, r0
   180c8:	ldr	r1, [pc, #112]	; 18140 <flatcc_builder_table_add_offset@@Base+0x128>
   180cc:	add	r1, pc, r1
   180d0:	ldr	r2, [pc, #108]	; 18144 <flatcc_builder_table_add_offset@@Base+0x12c>
   180d4:	add	r3, pc, r2
   180d8:	movw	r2, #1819	; 0x71b
   180dc:	bl	12494 <__assert_fail@plt>
   180e0:	ldr	r0, [pc, #80]	; 18138 <flatcc_builder_table_add_offset@@Base+0x120>
   180e4:	ldr	r1, [sp]
   180e8:	ldr	r2, [sp, #4]
   180ec:	ldr	r2, [r2, #12]
   180f0:	eor	r1, r1, r2
   180f4:	mul	r1, r1, r0
   180f8:	eor	r1, r1, #4
   180fc:	mul	r0, r1, r0
   18100:	ldr	r1, [sp, #4]
   18104:	str	r0, [r1, #12]
   18108:	ldr	r0, [sp, #4]
   1810c:	ldr	r1, [sp]
   18110:	uxth	r1, r1
   18114:	bl	190d8 <flatcc_builder_table_add_copy@@Base+0x64>
   18118:	mov	sp, fp
   1811c:	pop	{fp, pc}
   18120:	andeq	r3, r0, r8, lsl #18
   18124:	ldrdeq	r3, [r0], -r4
   18128:	andeq	r3, r0, ip, ror #31
   1812c:	andeq	r3, r0, ip, lsr pc
   18130:	muleq	r0, r4, r0
   18134:	andeq	r3, r0, ip, lsr #31
   18138:			; <UNDEFINED> instruction: 0x9e3779b1
   1813c:	andeq	r4, r0, sp, lsl r2
   18140:	andeq	r3, r0, r8, asr r0
   18144:	andeq	r3, r0, r0, ror pc

00018148 <flatcc_builder_table_add@@Base>:
   18148:	push	{fp, lr}
   1814c:	mov	fp, sp
   18150:	sub	sp, sp, #16
   18154:	str	r0, [fp, #-4]
   18158:	str	r1, [sp, #8]
   1815c:	str	r2, [sp, #4]
   18160:	strh	r3, [sp, #2]
   18164:	ldr	r0, [fp, #-4]
   18168:	ldr	r0, [r0, #32]
   1816c:	ldrh	r0, [r0, #14]
   18170:	cmp	r0, #3
   18174:	bne	1817c <flatcc_builder_table_add@@Base+0x34>
   18178:	b	1819c <flatcc_builder_table_add@@Base+0x54>
   1817c:	ldr	r0, [pc, #260]	; 18288 <flatcc_builder_table_add@@Base+0x140>
   18180:	add	r0, pc, r0
   18184:	ldr	r1, [pc, #256]	; 1828c <flatcc_builder_table_add@@Base+0x144>
   18188:	add	r1, pc, r1
   1818c:	ldr	r2, [pc, #252]	; 18290 <flatcc_builder_table_add@@Base+0x148>
   18190:	add	r3, pc, r2
   18194:	movw	r2, #1773	; 0x6ed
   18198:	bl	12494 <__assert_fail@plt>
   1819c:	ldr	r0, [sp, #8]
   181a0:	cmp	r0, #0
   181a4:	blt	181bc <flatcc_builder_table_add@@Base+0x74>
   181a8:	ldr	r0, [sp, #8]
   181ac:	movw	r1, #32764	; 0x7ffc
   181b0:	cmp	r0, r1
   181b4:	bgt	181bc <flatcc_builder_table_add@@Base+0x74>
   181b8:	b	181dc <flatcc_builder_table_add@@Base+0x94>
   181bc:	ldr	r0, [pc, #208]	; 18294 <flatcc_builder_table_add@@Base+0x14c>
   181c0:	add	r0, pc, r0
   181c4:	ldr	r1, [pc, #204]	; 18298 <flatcc_builder_table_add@@Base+0x150>
   181c8:	add	r1, pc, r1
   181cc:	ldr	r2, [pc, #200]	; 1829c <flatcc_builder_table_add@@Base+0x154>
   181d0:	add	r3, pc, r2
   181d4:	movw	r2, #1774	; 0x6ee
   181d8:	bl	12494 <__assert_fail@plt>
   181dc:	ldrh	r0, [sp, #2]
   181e0:	ldr	r1, [fp, #-4]
   181e4:	ldrh	r1, [r1, #130]	; 0x82
   181e8:	cmp	r0, r1
   181ec:	ble	181fc <flatcc_builder_table_add@@Base+0xb4>
   181f0:	ldrh	r0, [sp, #2]
   181f4:	ldr	r1, [fp, #-4]
   181f8:	strh	r0, [r1, #130]	; 0x82
   181fc:	ldr	r0, [fp, #-4]
   18200:	ldr	r0, [r0, #4]
   18204:	ldr	r1, [sp, #8]
   18208:	add	r0, r0, r1, lsl #1
   1820c:	ldrh	r0, [r0]
   18210:	cmp	r0, #0
   18214:	beq	18238 <flatcc_builder_table_add@@Base+0xf0>
   18218:	ldr	r0, [pc, #132]	; 182a4 <flatcc_builder_table_add@@Base+0x15c>
   1821c:	add	r0, pc, r0
   18220:	ldr	r1, [pc, #128]	; 182a8 <flatcc_builder_table_add@@Base+0x160>
   18224:	add	r1, pc, r1
   18228:	ldr	r2, [pc, #124]	; 182ac <flatcc_builder_table_add@@Base+0x164>
   1822c:	add	r3, pc, r2
   18230:	movw	r2, #1784	; 0x6f8
   18234:	bl	12494 <__assert_fail@plt>
   18238:	ldr	r0, [pc, #96]	; 182a0 <flatcc_builder_table_add@@Base+0x158>
   1823c:	ldr	r1, [sp, #8]
   18240:	ldr	r2, [fp, #-4]
   18244:	ldr	r2, [r2, #12]
   18248:	eor	r1, r1, r2
   1824c:	mul	r1, r1, r0
   18250:	ldr	r2, [sp, #4]
   18254:	eor	r1, r1, r2
   18258:	mul	r0, r1, r0
   1825c:	ldr	r1, [fp, #-4]
   18260:	str	r0, [r1, #12]
   18264:	ldr	r0, [fp, #-4]
   18268:	ldr	r1, [sp, #4]
   1826c:	ldrh	r2, [sp, #2]
   18270:	ldr	r3, [sp, #8]
   18274:	uxth	r2, r2
   18278:	uxth	r3, r3
   1827c:	bl	18ef4 <flatcc_builder_string_len@@Base+0x1c>
   18280:	mov	sp, fp
   18284:	pop	{fp, pc}
   18288:	ldrdeq	r3, [r0], -r0
   1828c:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   18290:	andeq	r3, r0, sl, ror #27
   18294:	andeq	r3, r0, r4, lsl #28
   18298:	andeq	r2, r0, ip, asr pc
   1829c:	andeq	r3, r0, sl, lsr #27
   182a0:			; <UNDEFINED> instruction: 0x9e3779b1
   182a4:	andeq	r4, r0, r5, asr #1
   182a8:	andeq	r2, r0, r0, lsl #30
   182ac:	andeq	r3, r0, lr, asr #26
   182b0:	sub	sp, sp, #4
   182b4:	strb	r0, [sp, #3]
   182b8:	ldrb	r0, [sp, #3]
   182bc:	add	sp, sp, #4
   182c0:	bx	lr

000182c4 <flatcc_builder_table_add_union_vector@@Base>:
   182c4:	push	{fp, lr}
   182c8:	mov	fp, sp
   182cc:	sub	sp, sp, #24
   182d0:	str	r2, [sp, #12]
   182d4:	str	r3, [sp, #16]
   182d8:	str	r0, [sp, #8]
   182dc:	str	r1, [sp, #4]
   182e0:	ldr	r0, [sp, #8]
   182e4:	ldr	r0, [r0, #32]
   182e8:	ldrh	r0, [r0, #14]
   182ec:	cmp	r0, #3
   182f0:	bne	182f8 <flatcc_builder_table_add_union_vector@@Base+0x34>
   182f4:	b	18318 <flatcc_builder_table_add_union_vector@@Base+0x54>
   182f8:	ldr	r0, [pc, #420]	; 184a4 <flatcc_builder_table_add_union_vector@@Base+0x1e0>
   182fc:	add	r0, pc, r0
   18300:	ldr	r1, [pc, #416]	; 184a8 <flatcc_builder_table_add_union_vector@@Base+0x1e4>
   18304:	add	r1, pc, r1
   18308:	ldr	r2, [pc, #412]	; 184ac <flatcc_builder_table_add_union_vector@@Base+0x1e8>
   1830c:	add	r3, pc, r2
   18310:	movw	r2, #1536	; 0x600
   18314:	bl	12494 <__assert_fail@plt>
   18318:	ldr	r0, [sp, #12]
   1831c:	cmp	r0, #0
   18320:	movw	r0, #0
   18324:	moveq	r0, #1
   18328:	and	r0, r0, #1
   1832c:	ldr	r1, [sp, #16]
   18330:	cmp	r1, #0
   18334:	movw	r1, #0
   18338:	moveq	r1, #1
   1833c:	and	r1, r1, #1
   18340:	cmp	r0, r1
   18344:	beq	183a8 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   18348:	ldr	r0, [sp, #12]
   1834c:	cmp	r0, #0
   18350:	movw	r0, #0
   18354:	moveq	r0, #1
   18358:	and	r0, r0, #1
   1835c:	ldr	r1, [sp, #16]
   18360:	cmp	r1, #0
   18364:	movw	r1, #0
   18368:	moveq	r1, #1
   1836c:	and	r1, r1, #1
   18370:	cmp	r0, r1
   18374:	bne	1837c <flatcc_builder_table_add_union_vector@@Base+0xb8>
   18378:	b	1839c <flatcc_builder_table_add_union_vector@@Base+0xd8>
   1837c:	ldr	r0, [pc, #300]	; 184b0 <flatcc_builder_table_add_union_vector@@Base+0x1ec>
   18380:	add	r0, pc, r0
   18384:	ldr	r1, [pc, #296]	; 184b4 <flatcc_builder_table_add_union_vector@@Base+0x1f0>
   18388:	add	r1, pc, r1
   1838c:	ldr	r2, [pc, #292]	; 184b8 <flatcc_builder_table_add_union_vector@@Base+0x1f4>
   18390:	add	r3, pc, r2
   18394:	movw	r2, #1537	; 0x601
   18398:	bl	12494 <__assert_fail@plt>
   1839c:	mvn	r0, #0
   183a0:	str	r0, [fp, #-4]
   183a4:	b	18498 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   183a8:	ldr	r0, [sp, #12]
   183ac:	cmp	r0, #0
   183b0:	beq	18490 <flatcc_builder_table_add_union_vector@@Base+0x1cc>
   183b4:	ldr	r0, [sp, #8]
   183b8:	ldr	r1, [sp, #4]
   183bc:	sub	r1, r1, #1
   183c0:	bl	18018 <flatcc_builder_table_add_offset@@Base>
   183c4:	str	r0, [sp]
   183c8:	ldr	r0, [sp]
   183cc:	movw	r1, #0
   183d0:	cmp	r0, r1
   183d4:	bne	18418 <flatcc_builder_table_add_union_vector@@Base+0x154>
   183d8:	ldr	r0, [sp]
   183dc:	movw	r1, #0
   183e0:	cmp	r0, r1
   183e4:	beq	183ec <flatcc_builder_table_add_union_vector@@Base+0x128>
   183e8:	b	1840c <flatcc_builder_table_add_union_vector@@Base+0x148>
   183ec:	ldr	r0, [pc, #200]	; 184bc <flatcc_builder_table_add_union_vector@@Base+0x1f8>
   183f0:	add	r0, pc, r0
   183f4:	ldr	r1, [pc, #196]	; 184c0 <flatcc_builder_table_add_union_vector@@Base+0x1fc>
   183f8:	add	r1, pc, r1
   183fc:	ldr	r2, [pc, #192]	; 184c4 <flatcc_builder_table_add_union_vector@@Base+0x200>
   18400:	add	r3, pc, r2
   18404:	movw	r2, #1540	; 0x604
   18408:	bl	12494 <__assert_fail@plt>
   1840c:	mvn	r0, #0
   18410:	str	r0, [fp, #-4]
   18414:	b	18498 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   18418:	ldr	r0, [sp, #12]
   1841c:	ldr	r1, [sp]
   18420:	str	r0, [r1]
   18424:	ldr	r0, [sp, #8]
   18428:	ldr	r1, [sp, #4]
   1842c:	bl	18018 <flatcc_builder_table_add_offset@@Base>
   18430:	str	r0, [sp]
   18434:	ldr	r0, [sp]
   18438:	movw	r1, #0
   1843c:	cmp	r0, r1
   18440:	bne	18484 <flatcc_builder_table_add_union_vector@@Base+0x1c0>
   18444:	ldr	r0, [sp]
   18448:	movw	r1, #0
   1844c:	cmp	r0, r1
   18450:	beq	18458 <flatcc_builder_table_add_union_vector@@Base+0x194>
   18454:	b	18478 <flatcc_builder_table_add_union_vector@@Base+0x1b4>
   18458:	ldr	r0, [pc, #104]	; 184c8 <flatcc_builder_table_add_union_vector@@Base+0x204>
   1845c:	add	r0, pc, r0
   18460:	ldr	r1, [pc, #100]	; 184cc <flatcc_builder_table_add_union_vector@@Base+0x208>
   18464:	add	r1, pc, r1
   18468:	ldr	r2, [pc, #96]	; 184d0 <flatcc_builder_table_add_union_vector@@Base+0x20c>
   1846c:	add	r3, pc, r2
   18470:	movw	r2, #1544	; 0x608
   18474:	bl	12494 <__assert_fail@plt>
   18478:	mvn	r0, #0
   1847c:	str	r0, [fp, #-4]
   18480:	b	18498 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   18484:	ldr	r0, [sp, #16]
   18488:	ldr	r1, [sp]
   1848c:	str	r0, [r1]
   18490:	movw	r0, #0
   18494:	str	r0, [fp, #-4]
   18498:	ldr	r0, [fp, #-4]
   1849c:	mov	sp, fp
   184a0:	pop	{fp, pc}
   184a4:	andeq	r3, r0, r4, asr r6
   184a8:	andeq	r2, r0, r0, lsr #28
   184ac:	andeq	r3, r0, r6, asr #19
   184b0:			; <UNDEFINED> instruction: 0x000039b5
   184b4:	muleq	r0, ip, sp
   184b8:	andeq	r3, r0, r2, asr #18
   184bc:	andeq	r3, r0, ip, asr #17
   184c0:	andeq	r2, r0, ip, lsr #26
   184c4:	ldrdeq	r3, [r0], -r2
   184c8:	andeq	r3, r0, r0, ror #16
   184cc:	andeq	r2, r0, r0, asr #25
   184d0:	andeq	r3, r0, r6, ror #16

000184d4 <flatcc_builder_create_union_vector@@Base>:
   184d4:	push	{fp, lr}
   184d8:	mov	fp, sp
   184dc:	sub	sp, sp, #48	; 0x30
   184e0:	str	r1, [fp, #-4]
   184e4:	str	r2, [fp, #-8]
   184e8:	str	r3, [fp, #-12]
   184ec:	mov	r1, r0
   184f0:	str	r0, [sp, #12]
   184f4:	mov	r0, r1
   184f8:	movw	r1, #0
   184fc:	and	r1, r1, #255	; 0xff
   18500:	movw	r2, #8
   18504:	bl	12458 <memset@plt>
   18508:	ldr	r0, [fp, #-4]
   1850c:	bl	164fc <flatcc_builder_start_offset_vector@@Base>
   18510:	cmp	r0, #0
   18514:	beq	1851c <flatcc_builder_create_union_vector@@Base+0x48>
   18518:	b	18600 <flatcc_builder_create_union_vector@@Base+0x12c>
   1851c:	ldr	r0, [fp, #-4]
   18520:	ldr	r1, [fp, #-12]
   18524:	bl	15c90 <flatcc_builder_extend_offset_vector@@Base>
   18528:	movw	r1, #0
   1852c:	cmp	r1, r0
   18530:	bne	18538 <flatcc_builder_create_union_vector@@Base+0x64>
   18534:	b	18600 <flatcc_builder_create_union_vector@@Base+0x12c>
   18538:	ldr	r0, [fp, #-4]
   1853c:	ldr	r1, [fp, #-12]
   18540:	mov	r2, r1
   18544:	str	r2, [sp, #8]
   18548:	bl	157c8 <flatcc_builder_start_struct@@Base+0xfc>
   1854c:	str	r0, [fp, #-16]
   18550:	movw	r1, #0
   18554:	cmp	r1, r0
   18558:	bne	18560 <flatcc_builder_create_union_vector@@Base+0x8c>
   1855c:	b	18600 <flatcc_builder_create_union_vector@@Base+0x12c>
   18560:	ldr	r0, [fp, #-4]
   18564:	bl	17df4 <flatcc_builder_offset_vector_edit@@Base>
   18568:	str	r0, [fp, #-20]	; 0xffffffec
   1856c:	movw	r0, #0
   18570:	str	r0, [sp, #24]
   18574:	ldr	r0, [sp, #24]
   18578:	ldr	r1, [fp, #-12]
   1857c:	cmp	r0, r1
   18580:	bcs	185c4 <flatcc_builder_create_union_vector@@Base+0xf0>
   18584:	ldr	r0, [fp, #-8]
   18588:	ldr	r1, [sp, #24]
   1858c:	ldrb	r0, [r0, r1, lsl #3]
   18590:	ldr	r2, [fp, #-16]
   18594:	strb	r0, [r2, r1]
   18598:	ldr	r0, [fp, #-8]
   1859c:	ldr	r1, [sp, #24]
   185a0:	add	r0, r0, r1, lsl #3
   185a4:	ldr	r0, [r0, #4]
   185a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   185ac:	add	r1, r2, r1, lsl #2
   185b0:	str	r0, [r1]
   185b4:	ldr	r0, [sp, #24]
   185b8:	add	r0, r0, #1
   185bc:	str	r0, [sp, #24]
   185c0:	b	18574 <flatcc_builder_create_union_vector@@Base+0xa0>
   185c4:	ldr	r1, [fp, #-4]
   185c8:	ldr	r2, [fp, #-16]
   185cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   185d0:	ldr	r0, [fp, #-12]
   185d4:	mov	ip, sp
   185d8:	str	r0, [ip]
   185dc:	add	r0, sp, #16
   185e0:	bl	18608 <flatcc_builder_create_union_vector_direct@@Base>
   185e4:	ldr	r0, [sp, #16]
   185e8:	ldr	r1, [sp, #12]
   185ec:	str	r0, [r1]
   185f0:	ldr	r0, [sp, #20]
   185f4:	str	r0, [r1, #4]
   185f8:	ldr	r0, [fp, #-4]
   185fc:	bl	15610 <flatcc_builder_end_buffer@@Base+0x170>
   18600:	mov	sp, fp
   18604:	pop	{fp, pc}

00018608 <flatcc_builder_create_union_vector_direct@@Base>:
   18608:	push	{fp, lr}
   1860c:	mov	fp, sp
   18610:	sub	sp, sp, #32
   18614:	ldr	ip, [fp, #8]
   18618:	str	r1, [fp, #-4]
   1861c:	str	r2, [fp, #-8]
   18620:	str	r3, [fp, #-12]
   18624:	mov	r1, r0
   18628:	str	r0, [sp, #16]
   1862c:	mov	r0, r1
   18630:	movw	r1, #0
   18634:	and	r1, r1, #255	; 0xff
   18638:	movw	r2, #8
   1863c:	str	ip, [sp, #12]
   18640:	bl	12458 <memset@plt>
   18644:	ldr	r0, [fp, #-4]
   18648:	ldr	r1, [fp, #-12]
   1864c:	ldr	r2, [fp, #8]
   18650:	ldr	r3, [fp, #-8]
   18654:	bl	17a4c <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   18658:	ldr	r1, [sp, #16]
   1865c:	str	r0, [r1, #4]
   18660:	movw	r2, #0
   18664:	cmp	r2, r0
   18668:	bne	18670 <flatcc_builder_create_union_vector_direct@@Base+0x68>
   1866c:	b	186b4 <flatcc_builder_create_union_vector_direct@@Base+0xac>
   18670:	ldr	r0, [fp, #-4]
   18674:	ldr	r1, [fp, #-8]
   18678:	ldr	r2, [fp, #8]
   1867c:	movw	r3, #1
   18680:	movw	ip, #1
   18684:	uxth	ip, ip
   18688:	str	ip, [sp]
   1868c:	mvn	ip, #0
   18690:	str	ip, [sp, #4]
   18694:	bl	1773c <flatcc_builder_create_vector@@Base>
   18698:	ldr	r1, [sp, #16]
   1869c:	str	r0, [r1]
   186a0:	movw	r2, #0
   186a4:	cmp	r2, r0
   186a8:	bne	186b0 <flatcc_builder_create_union_vector_direct@@Base+0xa8>
   186ac:	b	186b4 <flatcc_builder_create_union_vector_direct@@Base+0xac>
   186b0:	b	186b4 <flatcc_builder_create_union_vector_direct@@Base+0xac>
   186b4:	mov	sp, fp
   186b8:	pop	{fp, pc}

000186bc <flatcc_builder_start_union_vector@@Base>:
   186bc:	push	{fp, lr}
   186c0:	mov	fp, sp
   186c4:	sub	sp, sp, #8
   186c8:	str	r0, [sp]
   186cc:	ldr	r0, [sp]
   186d0:	movw	r1, #4
   186d4:	uxth	r1, r1
   186d8:	bl	152d4 <flatcc_builder_start_buffer@@Base+0x178>
   186dc:	cmp	r0, #0
   186e0:	beq	186f0 <flatcc_builder_start_union_vector@@Base+0x34>
   186e4:	mvn	r0, #0
   186e8:	str	r0, [sp, #4]
   186ec:	b	18734 <flatcc_builder_start_union_vector@@Base+0x78>
   186f0:	ldr	r0, [sp]
   186f4:	ldr	r0, [r0, #32]
   186f8:	movw	r1, #8
   186fc:	str	r1, [r0, #16]
   18700:	ldr	r0, [sp]
   18704:	ldr	r0, [r0, #32]
   18708:	movw	r1, #0
   1870c:	str	r1, [r0, #20]
   18710:	ldr	r0, [sp]
   18714:	ldr	r0, [r0, #32]
   18718:	movw	r1, #7
   1871c:	strh	r1, [r0, #14]
   18720:	ldr	r0, [sp]
   18724:	mvn	r1, #3
   18728:	bl	1573c <flatcc_builder_start_struct@@Base+0x70>
   1872c:	movw	r0, #0
   18730:	str	r0, [sp, #4]
   18734:	ldr	r0, [sp, #4]
   18738:	mov	sp, fp
   1873c:	pop	{fp, pc}

00018740 <flatcc_builder_end_union_vector@@Base>:
   18740:	push	{fp, lr}
   18744:	mov	fp, sp
   18748:	sub	sp, sp, #40	; 0x28
   1874c:	str	r1, [fp, #-4]
   18750:	mov	r1, r0
   18754:	str	r0, [sp, #4]
   18758:	mov	r0, r1
   1875c:	movw	r1, #0
   18760:	and	r1, r1, #255	; 0xff
   18764:	movw	r2, #8
   18768:	bl	12458 <memset@plt>
   1876c:	ldr	r0, [fp, #-4]
   18770:	ldr	r0, [r0, #32]
   18774:	ldrh	r0, [r0, #14]
   18778:	cmp	r0, #7
   1877c:	bne	18784 <flatcc_builder_end_union_vector@@Base+0x44>
   18780:	b	187a4 <flatcc_builder_end_union_vector@@Base+0x64>
   18784:	ldr	r0, [pc, #260]	; 18890 <flatcc_builder_end_union_vector@@Base+0x150>
   18788:	add	r0, pc, r0
   1878c:	ldr	r1, [pc, #256]	; 18894 <flatcc_builder_end_union_vector@@Base+0x154>
   18790:	add	r1, pc, r1
   18794:	ldr	r2, [pc, #252]	; 18898 <flatcc_builder_end_union_vector@@Base+0x158>
   18798:	add	r3, pc, r2
   1879c:	movw	r2, #1617	; 0x651
   187a0:	bl	12494 <__assert_fail@plt>
   187a4:	ldr	r0, [fp, #-4]
   187a8:	bl	1889c <flatcc_builder_union_vector_count@@Base>
   187ac:	str	r0, [sp, #16]
   187b0:	ldr	r0, [fp, #-4]
   187b4:	ldr	lr, [sp, #16]
   187b8:	movw	r1, #5
   187bc:	mul	r1, lr, r1
   187c0:	bl	157c8 <flatcc_builder_start_struct@@Base+0xfc>
   187c4:	str	r0, [fp, #-16]
   187c8:	movw	r1, #0
   187cc:	cmp	r1, r0
   187d0:	bne	187d8 <flatcc_builder_end_union_vector@@Base+0x98>
   187d4:	b	18888 <flatcc_builder_end_union_vector@@Base+0x148>
   187d8:	ldr	r0, [fp, #-16]
   187dc:	ldr	r1, [sp, #16]
   187e0:	add	r0, r0, r1, lsl #2
   187e4:	str	r0, [fp, #-8]
   187e8:	ldr	r0, [fp, #-4]
   187ec:	bl	188b8 <flatcc_builder_union_vector_edit@@Base>
   187f0:	str	r0, [fp, #-12]
   187f4:	movw	r0, #0
   187f8:	str	r0, [sp, #20]
   187fc:	ldr	r0, [sp, #20]
   18800:	ldr	r1, [sp, #16]
   18804:	cmp	r0, r1
   18808:	bcs	1884c <flatcc_builder_end_union_vector@@Base+0x10c>
   1880c:	ldr	r0, [fp, #-12]
   18810:	ldr	r1, [sp, #20]
   18814:	ldrb	r0, [r0, r1, lsl #3]
   18818:	ldr	r2, [fp, #-8]
   1881c:	strb	r0, [r2, r1]
   18820:	ldr	r0, [fp, #-12]
   18824:	ldr	r1, [sp, #20]
   18828:	add	r0, r0, r1, lsl #3
   1882c:	ldr	r0, [r0, #4]
   18830:	ldr	r2, [fp, #-16]
   18834:	add	r1, r2, r1, lsl #2
   18838:	str	r0, [r1]
   1883c:	ldr	r0, [sp, #20]
   18840:	add	r0, r0, #1
   18844:	str	r0, [sp, #20]
   18848:	b	187fc <flatcc_builder_end_union_vector@@Base+0xbc>
   1884c:	ldr	r1, [fp, #-4]
   18850:	ldr	r2, [fp, #-8]
   18854:	ldr	r3, [fp, #-16]
   18858:	ldr	r0, [sp, #16]
   1885c:	mov	ip, sp
   18860:	str	r0, [ip]
   18864:	add	r0, sp, #8
   18868:	bl	18608 <flatcc_builder_create_union_vector_direct@@Base>
   1886c:	ldr	r0, [sp, #8]
   18870:	ldr	r1, [sp, #4]
   18874:	str	r0, [r1]
   18878:	ldr	r0, [sp, #12]
   1887c:	str	r0, [r1, #4]
   18880:	ldr	r0, [fp, #-4]
   18884:	bl	15610 <flatcc_builder_end_buffer@@Base+0x170>
   18888:	mov	sp, fp
   1888c:	pop	{fp, pc}
   18890:	ldrdeq	r3, [r0], -r5
   18894:	muleq	r0, r4, r9
   18898:	strdeq	r3, [r0], -r7

0001889c <flatcc_builder_union_vector_count@@Base>:
   1889c:	sub	sp, sp, #4
   188a0:	str	r0, [sp]
   188a4:	ldr	r0, [sp]
   188a8:	ldr	r0, [r0, #32]
   188ac:	ldr	r0, [r0, #20]
   188b0:	add	sp, sp, #4
   188b4:	bx	lr

000188b8 <flatcc_builder_union_vector_edit@@Base>:
   188b8:	sub	sp, sp, #4
   188bc:	str	r0, [sp]
   188c0:	ldr	r0, [sp]
   188c4:	ldr	r0, [r0, #16]
   188c8:	add	sp, sp, #4
   188cc:	bx	lr

000188d0 <flatcc_builder_extend_union_vector@@Base>:
   188d0:	push	{fp, lr}
   188d4:	mov	fp, sp
   188d8:	sub	sp, sp, #16
   188dc:	ldr	r2, [pc, #68]	; 18928 <flatcc_builder_extend_union_vector@@Base+0x58>
   188e0:	str	r0, [sp, #8]
   188e4:	str	r1, [sp, #4]
   188e8:	ldr	r0, [sp, #8]
   188ec:	ldr	r1, [sp, #4]
   188f0:	bl	1598c <flatcc_builder_extend_vector@@Base+0x6c>
   188f4:	cmp	r0, #0
   188f8:	beq	18908 <flatcc_builder_extend_union_vector@@Base+0x38>
   188fc:	movw	r0, #0
   18900:	str	r0, [fp, #-4]
   18904:	b	1891c <flatcc_builder_extend_union_vector@@Base+0x4c>
   18908:	ldr	r0, [sp, #8]
   1890c:	ldr	r1, [sp, #4]
   18910:	lsl	r1, r1, #3
   18914:	bl	157c8 <flatcc_builder_start_struct@@Base+0xfc>
   18918:	str	r0, [fp, #-4]
   1891c:	ldr	r0, [fp, #-4]
   18920:	mov	sp, fp
   18924:	pop	{fp, pc}
   18928:	svcne	0x00ffffff

0001892c <flatcc_builder_truncate_union_vector@@Base>:
   1892c:	push	{fp, lr}
   18930:	mov	fp, sp
   18934:	sub	sp, sp, #16
   18938:	str	r0, [sp, #8]
   1893c:	str	r1, [sp, #4]
   18940:	ldr	r0, [sp, #8]
   18944:	ldr	r0, [r0, #32]
   18948:	ldrh	r0, [r0, #14]
   1894c:	cmp	r0, #7
   18950:	bne	18958 <flatcc_builder_truncate_union_vector@@Base+0x2c>
   18954:	b	18978 <flatcc_builder_truncate_union_vector@@Base+0x4c>
   18958:	ldr	r0, [pc, #192]	; 18a20 <flatcc_builder_truncate_union_vector@@Base+0xf4>
   1895c:	add	r0, pc, r0
   18960:	ldr	r1, [pc, #188]	; 18a24 <flatcc_builder_truncate_union_vector@@Base+0xf8>
   18964:	add	r1, pc, r1
   18968:	ldr	r2, [pc, #184]	; 18a28 <flatcc_builder_truncate_union_vector@@Base+0xfc>
   1896c:	add	r3, pc, r2
   18970:	movw	r2, #1665	; 0x681
   18974:	bl	12494 <__assert_fail@plt>
   18978:	ldr	r0, [sp, #8]
   1897c:	ldr	r0, [r0, #32]
   18980:	ldr	r0, [r0, #20]
   18984:	ldr	r1, [sp, #4]
   18988:	cmp	r0, r1
   1898c:	bcs	189d8 <flatcc_builder_truncate_union_vector@@Base+0xac>
   18990:	ldr	r0, [sp, #8]
   18994:	ldr	r0, [r0, #32]
   18998:	ldr	r0, [r0, #20]
   1899c:	ldr	r1, [sp, #4]
   189a0:	cmp	r0, r1
   189a4:	bcc	189ac <flatcc_builder_truncate_union_vector@@Base+0x80>
   189a8:	b	189cc <flatcc_builder_truncate_union_vector@@Base+0xa0>
   189ac:	ldr	r0, [pc, #120]	; 18a2c <flatcc_builder_truncate_union_vector@@Base+0x100>
   189b0:	add	r0, pc, r0
   189b4:	ldr	r1, [pc, #116]	; 18a30 <flatcc_builder_truncate_union_vector@@Base+0x104>
   189b8:	add	r1, pc, r1
   189bc:	ldr	r2, [pc, #112]	; 18a34 <flatcc_builder_truncate_union_vector@@Base+0x108>
   189c0:	add	r3, pc, r2
   189c4:	movw	r2, #1666	; 0x682
   189c8:	bl	12494 <__assert_fail@plt>
   189cc:	mvn	r0, #0
   189d0:	str	r0, [fp, #-4]
   189d4:	b	18a14 <flatcc_builder_truncate_union_vector@@Base+0xe8>
   189d8:	ldr	r0, [sp, #4]
   189dc:	ldr	r1, [sp, #8]
   189e0:	ldr	r1, [r1, #32]
   189e4:	ldr	r2, [r1, #20]
   189e8:	sub	r0, r2, r0
   189ec:	str	r0, [r1, #20]
   189f0:	ldr	r0, [sp, #8]
   189f4:	ldr	r1, [sp, #8]
   189f8:	ldr	r1, [r1, #32]
   189fc:	ldr	r1, [r1, #16]
   18a00:	ldr	r2, [sp, #4]
   18a04:	mul	r1, r1, r2
   18a08:	bl	161c0 <flatcc_builder_truncate_vector@@Base+0x10c>
   18a0c:	movw	r0, #0
   18a10:	str	r0, [fp, #-4]
   18a14:	ldr	r0, [fp, #-4]
   18a18:	mov	sp, fp
   18a1c:	pop	{fp, pc}
   18a20:	andeq	r3, r0, r1, lsl #8
   18a24:	andeq	r2, r0, r0, asr #15
   18a28:	andeq	r3, r0, r6, ror r4
   18a2c:	andeq	r2, r0, r1, lsl lr
   18a30:	andeq	r2, r0, ip, ror #14
   18a34:	andeq	r3, r0, r2, lsr #8

00018a38 <flatcc_builder_union_vector_push@@Base>:
   18a38:	push	{fp, lr}
   18a3c:	mov	fp, sp
   18a40:	sub	sp, sp, #24
   18a44:	str	r1, [sp, #12]
   18a48:	str	r2, [sp, #16]
   18a4c:	str	r0, [sp, #8]
   18a50:	ldr	r0, [sp, #8]
   18a54:	ldr	r0, [r0, #32]
   18a58:	ldrh	r0, [r0, #14]
   18a5c:	cmp	r0, #7
   18a60:	bne	18a68 <flatcc_builder_union_vector_push@@Base+0x30>
   18a64:	b	18a88 <flatcc_builder_union_vector_push@@Base+0x50>
   18a68:	ldr	r0, [pc, #160]	; 18b10 <flatcc_builder_union_vector_push@@Base+0xd8>
   18a6c:	add	r0, pc, r0
   18a70:	ldr	r1, [pc, #156]	; 18b14 <flatcc_builder_union_vector_push@@Base+0xdc>
   18a74:	add	r1, pc, r1
   18a78:	ldr	r2, [pc, #152]	; 18b18 <flatcc_builder_union_vector_push@@Base+0xe0>
   18a7c:	add	r3, pc, r2
   18a80:	movw	r2, #1677	; 0x68d
   18a84:	bl	12494 <__assert_fail@plt>
   18a88:	ldr	r0, [pc, #140]	; 18b1c <flatcc_builder_union_vector_push@@Base+0xe4>
   18a8c:	ldr	r1, [sp, #8]
   18a90:	ldr	r1, [r1, #32]
   18a94:	ldr	r1, [r1, #20]
   18a98:	cmp	r1, r0
   18a9c:	bne	18aac <flatcc_builder_union_vector_push@@Base+0x74>
   18aa0:	movw	r0, #0
   18aa4:	str	r0, [fp, #-4]
   18aa8:	b	18b04 <flatcc_builder_union_vector_push@@Base+0xcc>
   18aac:	ldr	r0, [sp, #8]
   18ab0:	ldr	r0, [r0, #32]
   18ab4:	ldr	r1, [r0, #20]
   18ab8:	add	r1, r1, #1
   18abc:	str	r1, [r0, #20]
   18ac0:	ldr	r0, [sp, #8]
   18ac4:	movw	r1, #8
   18ac8:	bl	157c8 <flatcc_builder_start_struct@@Base+0xfc>
   18acc:	str	r0, [sp, #4]
   18ad0:	movw	r1, #0
   18ad4:	cmp	r1, r0
   18ad8:	bne	18ae8 <flatcc_builder_union_vector_push@@Base+0xb0>
   18adc:	movw	r0, #0
   18ae0:	str	r0, [fp, #-4]
   18ae4:	b	18b04 <flatcc_builder_union_vector_push@@Base+0xcc>
   18ae8:	ldr	r0, [sp, #4]
   18aec:	ldr	r1, [sp, #12]
   18af0:	str	r1, [r0]
   18af4:	ldr	r1, [sp, #16]
   18af8:	str	r1, [r0, #4]
   18afc:	ldr	r0, [sp, #4]
   18b00:	str	r0, [fp, #-4]
   18b04:	ldr	r0, [fp, #-4]
   18b08:	mov	sp, fp
   18b0c:	pop	{fp, pc}
   18b10:	strdeq	r3, [r0], -r1
   18b14:			; <UNDEFINED> instruction: 0x000026b0
   18b18:	andeq	r3, r0, fp, lsr #7
   18b1c:	svcne	0x00ffffff

00018b20 <flatcc_builder_append_union_vector@@Base>:
   18b20:	push	{fp, lr}
   18b24:	mov	fp, sp
   18b28:	sub	sp, sp, #16
   18b2c:	str	r0, [sp, #8]
   18b30:	str	r1, [sp, #4]
   18b34:	str	r2, [sp]
   18b38:	ldr	r0, [sp, #8]
   18b3c:	ldr	r0, [r0, #32]
   18b40:	ldrh	r0, [r0, #14]
   18b44:	cmp	r0, #7
   18b48:	bne	18b50 <flatcc_builder_append_union_vector@@Base+0x30>
   18b4c:	b	18b70 <flatcc_builder_append_union_vector@@Base+0x50>
   18b50:	ldr	r0, [pc, #96]	; 18bb8 <flatcc_builder_append_union_vector@@Base+0x98>
   18b54:	add	r0, pc, r0
   18b58:	ldr	r1, [pc, #92]	; 18bbc <flatcc_builder_append_union_vector@@Base+0x9c>
   18b5c:	add	r1, pc, r1
   18b60:	ldr	r2, [pc, #88]	; 18bc0 <flatcc_builder_append_union_vector@@Base+0xa0>
   18b64:	add	r3, pc, r2
   18b68:	movw	r2, #1692	; 0x69c
   18b6c:	bl	12494 <__assert_fail@plt>
   18b70:	ldr	r2, [pc, #76]	; 18bc4 <flatcc_builder_append_union_vector@@Base+0xa4>
   18b74:	ldr	r0, [sp, #8]
   18b78:	ldr	r1, [sp]
   18b7c:	bl	1598c <flatcc_builder_extend_vector@@Base+0x6c>
   18b80:	cmp	r0, #0
   18b84:	beq	18b94 <flatcc_builder_append_union_vector@@Base+0x74>
   18b88:	movw	r0, #0
   18b8c:	str	r0, [fp, #-4]
   18b90:	b	18bac <flatcc_builder_append_union_vector@@Base+0x8c>
   18b94:	ldr	r0, [sp, #8]
   18b98:	ldr	r1, [sp, #4]
   18b9c:	ldr	r2, [sp]
   18ba0:	lsl	r2, r2, #3
   18ba4:	bl	15b74 <flatcc_builder_vector_push@@Base+0x110>
   18ba8:	str	r0, [fp, #-4]
   18bac:	ldr	r0, [fp, #-4]
   18bb0:	mov	sp, fp
   18bb4:	pop	{fp, pc}
   18bb8:	andeq	r3, r0, r9, lsl #4
   18bbc:	andeq	r2, r0, r8, asr #11
   18bc0:	andeq	r3, r0, r0, lsr r3
   18bc4:	svcne	0x00ffffff

00018bc8 <flatcc_builder_create_string@@Base>:
   18bc8:	push	{fp, lr}
   18bcc:	mov	fp, sp
   18bd0:	sub	sp, sp, #96	; 0x60
   18bd4:	str	r0, [fp, #-8]
   18bd8:	str	r1, [fp, #-12]
   18bdc:	str	r2, [fp, #-16]
   18be0:	ldr	r0, [fp, #-16]
   18be4:	cmn	r0, #1
   18be8:	bls	18bf8 <flatcc_builder_create_string@@Base+0x30>
   18bec:	movw	r0, #0
   18bf0:	str	r0, [fp, #-4]
   18bf4:	b	18d14 <flatcc_builder_create_string@@Base+0x14c>
   18bf8:	ldr	r0, [fp, #-16]
   18bfc:	bl	14afc <flatcc_builder_embed_buffer@@Base+0x388>
   18c00:	str	r0, [fp, #-24]	; 0xffffffe8
   18c04:	ldr	r0, [fp, #-8]
   18c08:	ldr	lr, [fp, #-16]
   18c0c:	add	r1, lr, #1
   18c10:	mov	r2, #4
   18c14:	bl	14ac8 <flatcc_builder_embed_buffer@@Base+0x354>
   18c18:	add	r0, r0, #1
   18c1c:	str	r0, [fp, #-20]	; 0xffffffec
   18c20:	mov	r0, #0
   18c24:	str	r0, [sp]
   18c28:	str	r0, [sp, #4]
   18c2c:	ldr	r0, [sp]
   18c30:	add	r0, r0, #4
   18c34:	str	r0, [sp]
   18c38:	mov	r0, sp
   18c3c:	add	r0, r0, #8
   18c40:	ldr	r1, [sp, #4]
   18c44:	sub	r2, fp, #24
   18c48:	str	r2, [r0, r1, lsl #3]
   18c4c:	ldr	r1, [sp, #4]
   18c50:	add	r0, r0, r1, lsl #3
   18c54:	movw	r1, #4
   18c58:	str	r1, [r0, #4]
   18c5c:	ldr	r0, [sp, #4]
   18c60:	add	r0, r0, #1
   18c64:	str	r0, [sp, #4]
   18c68:	ldr	r0, [fp, #-16]
   18c6c:	cmp	r0, #0
   18c70:	bls	18cb4 <flatcc_builder_create_string@@Base+0xec>
   18c74:	ldr	r0, [fp, #-16]
   18c78:	ldr	r1, [sp]
   18c7c:	add	r0, r1, r0
   18c80:	str	r0, [sp]
   18c84:	ldr	r0, [fp, #-12]
   18c88:	mov	r1, sp
   18c8c:	add	r1, r1, #8
   18c90:	ldr	r2, [sp, #4]
   18c94:	str	r0, [r1, r2, lsl #3]
   18c98:	ldr	r0, [fp, #-16]
   18c9c:	ldr	r2, [sp, #4]
   18ca0:	add	r1, r1, r2, lsl #3
   18ca4:	str	r0, [r1, #4]
   18ca8:	ldr	r0, [sp, #4]
   18cac:	add	r0, r0, #1
   18cb0:	str	r0, [sp, #4]
   18cb4:	ldr	r0, [fp, #-20]	; 0xffffffec
   18cb8:	cmp	r0, #0
   18cbc:	bls	18d04 <flatcc_builder_create_string@@Base+0x13c>
   18cc0:	ldr	r0, [fp, #-20]	; 0xffffffec
   18cc4:	ldr	r1, [sp]
   18cc8:	add	r0, r1, r0
   18ccc:	str	r0, [sp]
   18cd0:	mov	r0, sp
   18cd4:	add	r0, r0, #8
   18cd8:	ldr	r1, [sp, #4]
   18cdc:	ldr	r2, [pc, #60]	; 18d20 <flatcc_builder_create_string@@Base+0x158>
   18ce0:	ldr	r2, [pc, r2]
   18ce4:	str	r2, [r0, r1, lsl #3]
   18ce8:	ldr	r1, [fp, #-20]	; 0xffffffec
   18cec:	ldr	r2, [sp, #4]
   18cf0:	add	r0, r0, r2, lsl #3
   18cf4:	str	r1, [r0, #4]
   18cf8:	ldr	r0, [sp, #4]
   18cfc:	add	r0, r0, #1
   18d00:	str	r0, [sp, #4]
   18d04:	ldr	r0, [fp, #-8]
   18d08:	mov	r1, sp
   18d0c:	bl	14b10 <flatcc_builder_embed_buffer@@Base+0x39c>
   18d10:	str	r0, [fp, #-4]
   18d14:	ldr	r0, [fp, #-4]
   18d18:	mov	sp, fp
   18d1c:	pop	{fp, pc}
   18d20:	andeq	r4, r1, r4, ror r3

00018d24 <flatcc_builder_create_string_str@@Base>:
   18d24:	push	{fp, lr}
   18d28:	mov	fp, sp
   18d2c:	sub	sp, sp, #24
   18d30:	str	r0, [fp, #-4]
   18d34:	str	r1, [fp, #-8]
   18d38:	ldr	r0, [fp, #-4]
   18d3c:	ldr	r1, [fp, #-8]
   18d40:	ldr	r2, [fp, #-8]
   18d44:	str	r0, [sp, #12]
   18d48:	mov	r0, r2
   18d4c:	str	r1, [sp, #8]
   18d50:	bl	12440 <strlen@plt>
   18d54:	ldr	r1, [sp, #12]
   18d58:	str	r0, [sp, #4]
   18d5c:	mov	r0, r1
   18d60:	ldr	r1, [sp, #8]
   18d64:	ldr	r2, [sp, #4]
   18d68:	bl	18bc8 <flatcc_builder_create_string@@Base>
   18d6c:	mov	sp, fp
   18d70:	pop	{fp, pc}

00018d74 <flatcc_builder_create_string_strn@@Base>:
   18d74:	push	{fp, lr}
   18d78:	mov	fp, sp
   18d7c:	sub	sp, sp, #24
   18d80:	str	r0, [fp, #-4]
   18d84:	str	r1, [fp, #-8]
   18d88:	str	r2, [sp, #12]
   18d8c:	ldr	r0, [fp, #-4]
   18d90:	ldr	r1, [fp, #-8]
   18d94:	ldr	r2, [fp, #-8]
   18d98:	ldr	r3, [sp, #12]
   18d9c:	str	r0, [sp, #8]
   18da0:	mov	r0, r2
   18da4:	str	r1, [sp, #4]
   18da8:	mov	r1, r3
   18dac:	bl	16054 <flatcc_builder_append_string_strn@@Base+0x5c>
   18db0:	ldr	r1, [sp, #8]
   18db4:	str	r0, [sp]
   18db8:	mov	r0, r1
   18dbc:	ldr	r1, [sp, #4]
   18dc0:	ldr	r2, [sp]
   18dc4:	bl	18bc8 <flatcc_builder_create_string@@Base>
   18dc8:	mov	sp, fp
   18dcc:	pop	{fp, pc}

00018dd0 <flatcc_builder_end_string@@Base>:
   18dd0:	push	{fp, lr}
   18dd4:	mov	fp, sp
   18dd8:	sub	sp, sp, #16
   18ddc:	str	r0, [sp, #8]
   18de0:	ldr	r0, [sp, #8]
   18de4:	ldr	r0, [r0, #32]
   18de8:	ldrh	r0, [r0, #14]
   18dec:	cmp	r0, #6
   18df0:	bne	18df8 <flatcc_builder_end_string@@Base+0x28>
   18df4:	b	18e18 <flatcc_builder_end_string@@Base+0x48>
   18df8:	ldr	r0, [pc, #168]	; 18ea8 <flatcc_builder_end_string@@Base+0xd8>
   18dfc:	add	r0, pc, r0
   18e00:	ldr	r1, [pc, #164]	; 18eac <flatcc_builder_end_string@@Base+0xdc>
   18e04:	add	r1, pc, r1
   18e08:	ldr	r2, [pc, #160]	; 18eb0 <flatcc_builder_end_string@@Base+0xe0>
   18e0c:	add	r3, pc, r2
   18e10:	movw	r2, #1732	; 0x6c4
   18e14:	bl	12494 <__assert_fail@plt>
   18e18:	ldr	r0, [sp, #8]
   18e1c:	ldr	r0, [r0, #32]
   18e20:	ldr	r0, [r0, #20]
   18e24:	ldr	r1, [sp, #8]
   18e28:	ldr	r1, [r1, #20]
   18e2c:	cmp	r0, r1
   18e30:	bne	18e38 <flatcc_builder_end_string@@Base+0x68>
   18e34:	b	18e58 <flatcc_builder_end_string@@Base+0x88>
   18e38:	ldr	r0, [pc, #116]	; 18eb4 <flatcc_builder_end_string@@Base+0xe4>
   18e3c:	add	r0, pc, r0
   18e40:	ldr	r1, [pc, #112]	; 18eb8 <flatcc_builder_end_string@@Base+0xe8>
   18e44:	add	r1, pc, r1
   18e48:	ldr	r2, [pc, #108]	; 18ebc <flatcc_builder_end_string@@Base+0xec>
   18e4c:	add	r3, pc, r2
   18e50:	movw	r2, #1733	; 0x6c5
   18e54:	bl	12494 <__assert_fail@plt>
   18e58:	ldr	r0, [sp, #8]
   18e5c:	ldr	r1, [sp, #8]
   18e60:	ldr	r1, [r1, #16]
   18e64:	ldr	r2, [sp, #8]
   18e68:	ldr	r2, [r2, #20]
   18e6c:	bl	18bc8 <flatcc_builder_create_string@@Base>
   18e70:	str	r0, [sp, #4]
   18e74:	movw	r1, #0
   18e78:	cmp	r1, r0
   18e7c:	bne	18e8c <flatcc_builder_end_string@@Base+0xbc>
   18e80:	movw	r0, #0
   18e84:	str	r0, [fp, #-4]
   18e88:	b	18e9c <flatcc_builder_end_string@@Base+0xcc>
   18e8c:	ldr	r0, [sp, #8]
   18e90:	bl	15610 <flatcc_builder_end_buffer@@Base+0x170>
   18e94:	ldr	r0, [sp, #4]
   18e98:	str	r0, [fp, #-4]
   18e9c:	ldr	r0, [fp, #-4]
   18ea0:	mov	sp, fp
   18ea4:	pop	{fp, pc}
   18ea8:	andeq	r2, r0, r4, ror #16
   18eac:	andeq	r2, r0, r0, lsr #6
   18eb0:	andeq	r3, r0, r7, lsl #2
   18eb4:	andeq	r3, r0, sl, lsl r1
   18eb8:	andeq	r2, r0, r0, ror #5
   18ebc:	andeq	r3, r0, r7, asr #1

00018ec0 <flatcc_builder_string_edit@@Base>:
   18ec0:	sub	sp, sp, #4
   18ec4:	str	r0, [sp]
   18ec8:	ldr	r0, [sp]
   18ecc:	ldr	r0, [r0, #16]
   18ed0:	add	sp, sp, #4
   18ed4:	bx	lr

00018ed8 <flatcc_builder_string_len@@Base>:
   18ed8:	sub	sp, sp, #4
   18edc:	str	r0, [sp]
   18ee0:	ldr	r0, [sp]
   18ee4:	ldr	r0, [r0, #32]
   18ee8:	ldr	r0, [r0, #20]
   18eec:	add	sp, sp, #4
   18ef0:	bx	lr
   18ef4:	push	{fp, lr}
   18ef8:	mov	fp, sp
   18efc:	sub	sp, sp, #24
   18f00:	str	r0, [fp, #-8]
   18f04:	str	r1, [sp, #12]
   18f08:	strh	r2, [sp, #10]
   18f0c:	strh	r3, [sp, #8]
   18f10:	ldr	r0, [fp, #-8]
   18f14:	ldr	r0, [r0, #20]
   18f18:	ldrh	r1, [sp, #10]
   18f1c:	add	r0, r0, r1
   18f20:	sub	r0, r0, #1
   18f24:	ldrh	r1, [sp, #10]
   18f28:	sub	r1, r1, #1
   18f2c:	mvn	r2, #0
   18f30:	eor	r1, r1, r2
   18f34:	and	r0, r0, r1
   18f38:	str	r0, [sp, #4]
   18f3c:	ldr	r0, [sp, #4]
   18f40:	ldr	r1, [sp, #12]
   18f44:	add	r0, r0, r1
   18f48:	ldr	r1, [fp, #-8]
   18f4c:	str	r0, [r1, #20]
   18f50:	ldr	r1, [fp, #-8]
   18f54:	ldr	r1, [r1, #24]
   18f58:	cmp	r0, r1
   18f5c:	bcc	18f90 <flatcc_builder_string_len@@Base+0xb8>
   18f60:	ldr	r0, [fp, #-8]
   18f64:	ldr	r1, [fp, #-8]
   18f68:	ldr	r1, [r1, #20]
   18f6c:	add	r1, r1, #1
   18f70:	movw	r2, #65532	; 0xfffc
   18f74:	bl	19938 <flatcc_builder_get_emit_context@@Base+0x40>
   18f78:	cmp	r0, #0
   18f7c:	beq	18f8c <flatcc_builder_string_len@@Base+0xb4>
   18f80:	movw	r0, #0
   18f84:	str	r0, [fp, #-4]
   18f88:	b	18fe4 <flatcc_builder_string_len@@Base+0x10c>
   18f8c:	b	18f90 <flatcc_builder_string_len@@Base+0xb8>
   18f90:	ldr	r0, [sp, #4]
   18f94:	add	r0, r0, #4
   18f98:	ldr	r1, [fp, #-8]
   18f9c:	ldr	r1, [r1, #4]
   18fa0:	ldrh	r2, [sp, #8]
   18fa4:	add	r1, r1, r2, lsl #1
   18fa8:	strh	r0, [r1]
   18fac:	ldrh	r0, [sp, #8]
   18fb0:	ldr	r1, [fp, #-8]
   18fb4:	ldrh	r1, [r1, #8]
   18fb8:	cmp	r0, r1
   18fbc:	blt	18fd0 <flatcc_builder_string_len@@Base+0xf8>
   18fc0:	ldrh	r0, [sp, #8]
   18fc4:	add	r0, r0, #1
   18fc8:	ldr	r1, [fp, #-8]
   18fcc:	strh	r0, [r1, #8]
   18fd0:	ldr	r0, [fp, #-8]
   18fd4:	ldr	r0, [r0, #16]
   18fd8:	ldr	r1, [sp, #4]
   18fdc:	add	r0, r0, r1
   18fe0:	str	r0, [fp, #-4]
   18fe4:	ldr	r0, [fp, #-4]
   18fe8:	mov	sp, fp
   18fec:	pop	{fp, pc}

00018ff0 <flatcc_builder_table_edit@@Base>:
   18ff0:	push	{fp, lr}
   18ff4:	mov	fp, sp
   18ff8:	sub	sp, sp, #8
   18ffc:	str	r0, [sp, #4]
   19000:	str	r1, [sp]
   19004:	ldr	r0, [sp, #4]
   19008:	ldr	r0, [r0, #32]
   1900c:	ldrh	r0, [r0, #14]
   19010:	cmp	r0, #3
   19014:	bne	1901c <flatcc_builder_table_edit@@Base+0x2c>
   19018:	b	1903c <flatcc_builder_table_edit@@Base+0x4c>
   1901c:	ldr	r0, [pc, #68]	; 19068 <flatcc_builder_table_edit@@Base+0x78>
   19020:	add	r0, pc, r0
   19024:	ldr	r1, [pc, #64]	; 1906c <flatcc_builder_table_edit@@Base+0x7c>
   19028:	add	r1, pc, r1
   1902c:	ldr	r2, [pc, #60]	; 19070 <flatcc_builder_table_edit@@Base+0x80>
   19030:	add	r3, pc, r2
   19034:	movw	r2, #1794	; 0x702
   19038:	bl	12494 <__assert_fail@plt>
   1903c:	ldr	r0, [sp, #4]
   19040:	ldr	r0, [r0, #16]
   19044:	ldr	r1, [sp, #4]
   19048:	ldr	r1, [r1, #20]
   1904c:	add	r0, r0, r1
   19050:	ldr	r1, [sp]
   19054:	movw	r2, #0
   19058:	sub	r1, r2, r1
   1905c:	add	r0, r0, r1
   19060:	mov	sp, fp
   19064:	pop	{fp, pc}
   19068:	andeq	r2, r0, r0, lsr r9
   1906c:	strdeq	r2, [r0], -ip
   19070:	ldrdeq	r2, [r0], -r8

00019074 <flatcc_builder_table_add_copy@@Base>:
   19074:	push	{fp, lr}
   19078:	mov	fp, sp
   1907c:	sub	sp, sp, #24
   19080:	ldr	ip, [fp, #8]
   19084:	str	r0, [fp, #-4]
   19088:	str	r1, [fp, #-8]
   1908c:	str	r2, [sp, #12]
   19090:	str	r3, [sp, #8]
   19094:	strh	ip, [sp, #6]
   19098:	ldr	r0, [fp, #-4]
   1909c:	ldr	r1, [fp, #-8]
   190a0:	ldr	r2, [sp, #8]
   190a4:	ldrh	r3, [sp, #6]
   190a8:	bl	18148 <flatcc_builder_table_add@@Base>
   190ac:	str	r0, [sp]
   190b0:	movw	r1, #0
   190b4:	cmp	r0, r1
   190b8:	beq	190cc <flatcc_builder_table_add_copy@@Base+0x58>
   190bc:	ldr	r0, [sp]
   190c0:	ldr	r1, [sp, #12]
   190c4:	ldr	r2, [sp, #8]
   190c8:	bl	123e0 <memcpy@plt>
   190cc:	ldr	r0, [sp]
   190d0:	mov	sp, fp
   190d4:	pop	{fp, pc}
   190d8:	push	{fp, lr}
   190dc:	mov	fp, sp
   190e0:	sub	sp, sp, #16
   190e4:	str	r0, [sp, #8]
   190e8:	strh	r1, [sp, #6]
   190ec:	ldr	r0, [sp, #8]
   190f0:	ldr	r0, [r0, #20]
   190f4:	add	r0, r0, #4
   190f8:	sub	r0, r0, #1
   190fc:	mvn	r1, #3
   19100:	and	r0, r0, r1
   19104:	str	r0, [sp]
   19108:	ldr	r0, [sp]
   1910c:	add	r0, r0, #4
   19110:	ldr	r1, [sp, #8]
   19114:	str	r0, [r1, #20]
   19118:	ldr	r1, [sp, #8]
   1911c:	ldr	r1, [r1, #24]
   19120:	cmp	r0, r1
   19124:	bls	19154 <flatcc_builder_table_add_copy@@Base+0xe0>
   19128:	ldr	r0, [sp, #8]
   1912c:	ldr	r1, [sp, #8]
   19130:	ldr	r1, [r1, #20]
   19134:	movw	r2, #65532	; 0xfffc
   19138:	bl	19938 <flatcc_builder_get_emit_context@@Base+0x40>
   1913c:	cmp	r0, #0
   19140:	beq	19150 <flatcc_builder_table_add_copy@@Base+0xdc>
   19144:	movw	r0, #0
   19148:	str	r0, [fp, #-4]
   1914c:	b	191c0 <flatcc_builder_table_add_copy@@Base+0x14c>
   19150:	b	19154 <flatcc_builder_table_add_copy@@Base+0xe0>
   19154:	ldr	r0, [sp]
   19158:	add	r0, r0, #4
   1915c:	ldr	r1, [sp, #8]
   19160:	ldr	r1, [r1, #4]
   19164:	ldrh	r2, [sp, #6]
   19168:	add	r1, r1, r2, lsl #1
   1916c:	strh	r0, [r1]
   19170:	ldrh	r0, [sp, #6]
   19174:	ldr	r1, [sp, #8]
   19178:	ldrh	r1, [r1, #8]
   1917c:	cmp	r0, r1
   19180:	blt	19194 <flatcc_builder_table_add_copy@@Base+0x120>
   19184:	ldrh	r0, [sp, #6]
   19188:	add	r0, r0, #1
   1918c:	ldr	r1, [sp, #8]
   19190:	strh	r0, [r1, #8]
   19194:	ldr	r0, [sp]
   19198:	ldr	r1, [sp, #8]
   1919c:	ldr	r2, [r1]
   191a0:	add	r3, r2, #2
   191a4:	str	r3, [r1]
   191a8:	strh	r0, [r2]
   191ac:	ldr	r0, [sp, #8]
   191b0:	ldr	r0, [r0, #16]
   191b4:	ldr	r1, [sp]
   191b8:	add	r0, r0, r1
   191bc:	str	r0, [fp, #-4]
   191c0:	ldr	r0, [fp, #-4]
   191c4:	mov	sp, fp
   191c8:	pop	{fp, pc}

000191cc <flatcc_builder_push_buffer_alignment@@Base>:
   191cc:	sub	sp, sp, #8
   191d0:	str	r0, [sp, #4]
   191d4:	ldr	r0, [sp, #4]
   191d8:	ldrh	r0, [r0, #128]	; 0x80
   191dc:	strh	r0, [sp, #2]
   191e0:	ldr	r0, [sp, #4]
   191e4:	movw	r1, #4
   191e8:	strh	r1, [r0, #128]	; 0x80
   191ec:	ldrh	r0, [sp, #2]
   191f0:	add	sp, sp, #8
   191f4:	bx	lr

000191f8 <flatcc_builder_pop_buffer_alignment@@Base>:
   191f8:	push	{fp, lr}
   191fc:	mov	fp, sp
   19200:	sub	sp, sp, #8
   19204:	str	r0, [sp, #4]
   19208:	strh	r1, [sp, #2]
   1920c:	ldr	r0, [sp, #4]
   19210:	ldrh	r1, [sp, #2]
   19214:	bl	14fdc <flatcc_builder_create_buffer@@Base+0x3a8>
   19218:	mov	sp, fp
   1921c:	pop	{fp, pc}

00019220 <flatcc_builder_get_buffer_alignment@@Base>:
   19220:	sub	sp, sp, #4
   19224:	str	r0, [sp]
   19228:	ldr	r0, [sp]
   1922c:	ldrh	r0, [r0, #128]	; 0x80
   19230:	add	sp, sp, #4
   19234:	bx	lr

00019238 <flatcc_builder_set_vtable_clustering@@Base>:
   19238:	sub	sp, sp, #8
   1923c:	str	r0, [sp, #4]
   19240:	str	r1, [sp]
   19244:	ldr	r0, [sp]
   19248:	cmp	r0, #0
   1924c:	movw	r0, #0
   19250:	movne	r0, #1
   19254:	mvn	r1, #0
   19258:	eor	r0, r0, r1
   1925c:	and	r0, r0, #1
   19260:	ldr	r1, [sp, #4]
   19264:	str	r0, [r1, #180]	; 0xb4
   19268:	add	sp, sp, #8
   1926c:	bx	lr

00019270 <flatcc_builder_set_block_align@@Base>:
   19270:	sub	sp, sp, #8
   19274:	str	r0, [sp, #4]
   19278:	strh	r1, [sp, #2]
   1927c:	ldrh	r0, [sp, #2]
   19280:	ldr	r1, [sp, #4]
   19284:	strh	r0, [r1, #132]	; 0x84
   19288:	add	sp, sp, #8
   1928c:	bx	lr

00019290 <flatcc_builder_get_level@@Base>:
   19290:	sub	sp, sp, #4
   19294:	str	r0, [sp]
   19298:	ldr	r0, [sp]
   1929c:	ldr	r0, [r0, #156]	; 0x9c
   192a0:	add	sp, sp, #4
   192a4:	bx	lr

000192a8 <flatcc_builder_set_max_level@@Base>:
   192a8:	sub	sp, sp, #8
   192ac:	str	r0, [sp, #4]
   192b0:	str	r1, [sp]
   192b4:	ldr	r0, [sp]
   192b8:	ldr	r1, [sp, #4]
   192bc:	str	r0, [r1, #176]	; 0xb0
   192c0:	ldr	r0, [sp, #4]
   192c4:	ldr	r0, [r0, #160]	; 0xa0
   192c8:	ldr	r1, [sp, #4]
   192cc:	ldr	r1, [r1, #176]	; 0xb0
   192d0:	cmp	r0, r1
   192d4:	bge	192e8 <flatcc_builder_set_max_level@@Base+0x40>
   192d8:	ldr	r0, [sp, #4]
   192dc:	ldr	r0, [r0, #176]	; 0xb0
   192e0:	ldr	r1, [sp, #4]
   192e4:	str	r0, [r1, #160]	; 0xa0
   192e8:	add	sp, sp, #8
   192ec:	bx	lr

000192f0 <flatcc_builder_get_buffer_size@@Base>:
   192f0:	sub	sp, sp, #4
   192f4:	str	r0, [sp]
   192f8:	ldr	r0, [sp]
   192fc:	ldr	r0, [r0, #140]	; 0x8c
   19300:	ldr	r1, [sp]
   19304:	ldr	r1, [r1, #136]	; 0x88
   19308:	sub	r0, r0, r1
   1930c:	add	sp, sp, #4
   19310:	bx	lr

00019314 <flatcc_builder_get_buffer_start@@Base>:
   19314:	sub	sp, sp, #4
   19318:	str	r0, [sp]
   1931c:	ldr	r0, [sp]
   19320:	ldr	r0, [r0, #136]	; 0x88
   19324:	add	sp, sp, #4
   19328:	bx	lr

0001932c <flatcc_builder_get_buffer_end@@Base>:
   1932c:	sub	sp, sp, #4
   19330:	str	r0, [sp]
   19334:	ldr	r0, [sp]
   19338:	ldr	r0, [r0, #140]	; 0x8c
   1933c:	add	sp, sp, #4
   19340:	bx	lr

00019344 <flatcc_builder_set_vtable_cache_limit@@Base>:
   19344:	sub	sp, sp, #8
   19348:	str	r0, [sp, #4]
   1934c:	str	r1, [sp]
   19350:	ldr	r0, [sp]
   19354:	ldr	r1, [sp, #4]
   19358:	str	r0, [r1, #172]	; 0xac
   1935c:	add	sp, sp, #8
   19360:	bx	lr

00019364 <flatcc_builder_set_identifier@@Base>:
   19364:	sub	sp, sp, #16
   19368:	str	r0, [sp, #12]
   1936c:	str	r1, [sp, #8]
   19370:	ldr	r0, [sp, #12]
   19374:	add	r0, r0, #168	; 0xa8
   19378:	ldr	r1, [sp, #8]
   1937c:	movw	r2, #0
   19380:	cmp	r1, r2
   19384:	str	r0, [sp, #4]
   19388:	beq	19398 <flatcc_builder_set_identifier@@Base+0x34>
   1938c:	ldr	r0, [sp, #8]
   19390:	str	r0, [sp]
   19394:	b	193a8 <flatcc_builder_set_identifier@@Base+0x44>
   19398:	ldr	r0, [pc, #56]	; 193d8 <flatcc_builder_set_identifier@@Base+0x74>
   1939c:	ldr	r0, [pc, r0]
   193a0:	str	r0, [sp]
   193a4:	b	193a8 <flatcc_builder_set_identifier@@Base+0x44>
   193a8:	ldr	r0, [sp]
   193ac:	ldrb	r1, [r0]
   193b0:	ldr	r2, [sp, #4]
   193b4:	strb	r1, [r2]
   193b8:	ldrb	r1, [r0, #1]
   193bc:	strb	r1, [r2, #1]
   193c0:	ldrb	r1, [r0, #2]
   193c4:	strb	r1, [r2, #2]
   193c8:	ldrb	r0, [r0, #3]
   193cc:	strb	r0, [r2, #3]
   193d0:	add	sp, sp, #16
   193d4:	bx	lr
   193d8:			; <UNDEFINED> instruction: 0x00013cb8

000193dc <flatcc_builder_get_type@@Base>:
   193dc:	sub	sp, sp, #8
   193e0:	str	r0, [sp, #4]
   193e4:	ldr	r0, [sp, #4]
   193e8:	ldr	r0, [r0, #32]
   193ec:	movw	r1, #0
   193f0:	cmp	r0, r1
   193f4:	beq	1940c <flatcc_builder_get_type@@Base+0x30>
   193f8:	ldr	r0, [sp, #4]
   193fc:	ldr	r0, [r0, #32]
   19400:	ldrh	r0, [r0, #14]
   19404:	str	r0, [sp]
   19408:	b	19418 <flatcc_builder_get_type@@Base+0x3c>
   1940c:	movw	r0, #0
   19410:	str	r0, [sp]
   19414:	b	19418 <flatcc_builder_get_type@@Base+0x3c>
   19418:	ldr	r0, [sp]
   1941c:	add	sp, sp, #8
   19420:	bx	lr

00019424 <flatcc_builder_get_type_at@@Base>:
   19424:	sub	sp, sp, #12
   19428:	str	r0, [sp, #4]
   1942c:	str	r1, [sp]
   19430:	ldr	r0, [sp]
   19434:	cmp	r0, #1
   19438:	blt	19450 <flatcc_builder_get_type_at@@Base+0x2c>
   1943c:	ldr	r0, [sp]
   19440:	ldr	r1, [sp, #4]
   19444:	ldr	r1, [r1, #156]	; 0x9c
   19448:	cmp	r0, r1
   1944c:	ble	1945c <flatcc_builder_get_type_at@@Base+0x38>
   19450:	movw	r0, #0
   19454:	str	r0, [sp, #8]
   19458:	b	19488 <flatcc_builder_get_type_at@@Base+0x64>
   1945c:	ldr	r0, [sp, #4]
   19460:	ldr	r0, [r0, #32]
   19464:	ldr	r1, [sp]
   19468:	ldr	r2, [sp, #4]
   1946c:	ldr	r2, [r2, #156]	; 0x9c
   19470:	sub	r1, r1, r2
   19474:	movw	r2, #36	; 0x24
   19478:	mul	r1, r1, r2
   1947c:	add	r0, r0, r1
   19480:	ldrh	r0, [r0, #14]
   19484:	str	r0, [sp, #8]
   19488:	ldr	r0, [sp, #8]
   1948c:	add	sp, sp, #12
   19490:	bx	lr

00019494 <flatcc_builder_get_direct_buffer@@Base>:
   19494:	push	{fp, lr}
   19498:	mov	fp, sp
   1949c:	sub	sp, sp, #16
   194a0:	str	r0, [sp, #8]
   194a4:	str	r1, [sp, #4]
   194a8:	ldr	r0, [sp, #8]
   194ac:	ldr	r0, [r0, #184]	; 0xb8
   194b0:	cmp	r0, #0
   194b4:	beq	194d0 <flatcc_builder_get_direct_buffer@@Base+0x3c>
   194b8:	ldr	r0, [sp, #8]
   194bc:	add	r0, r0, #188	; 0xbc
   194c0:	ldr	r1, [sp, #4]
   194c4:	bl	19504 <flatcc_builder_get_direct_buffer@@Base+0x70>
   194c8:	str	r0, [fp, #-4]
   194cc:	b	194f8 <flatcc_builder_get_direct_buffer@@Base+0x64>
   194d0:	ldr	r0, [sp, #4]
   194d4:	movw	r1, #0
   194d8:	cmp	r0, r1
   194dc:	beq	194ec <flatcc_builder_get_direct_buffer@@Base+0x58>
   194e0:	ldr	r0, [sp, #4]
   194e4:	movw	r1, #0
   194e8:	str	r1, [r0]
   194ec:	b	194f0 <flatcc_builder_get_direct_buffer@@Base+0x5c>
   194f0:	movw	r0, #0
   194f4:	str	r0, [fp, #-4]
   194f8:	ldr	r0, [fp, #-4]
   194fc:	mov	sp, fp
   19500:	pop	{fp, pc}
   19504:	sub	sp, sp, #12
   19508:	str	r0, [sp, #4]
   1950c:	str	r1, [sp]
   19510:	ldr	r0, [sp, #4]
   19514:	ldr	r0, [r0]
   19518:	ldr	r1, [sp, #4]
   1951c:	ldr	r1, [r1, #4]
   19520:	cmp	r0, r1
   19524:	bne	19558 <flatcc_builder_get_direct_buffer@@Base+0xc4>
   19528:	ldr	r0, [sp]
   1952c:	movw	r1, #0
   19530:	cmp	r0, r1
   19534:	beq	19548 <flatcc_builder_get_direct_buffer@@Base+0xb4>
   19538:	ldr	r0, [sp, #4]
   1953c:	ldr	r0, [r0, #24]
   19540:	ldr	r1, [sp]
   19544:	str	r0, [r1]
   19548:	ldr	r0, [sp, #4]
   1954c:	ldr	r0, [r0, #8]
   19550:	str	r0, [sp, #8]
   19554:	b	1957c <flatcc_builder_get_direct_buffer@@Base+0xe8>
   19558:	ldr	r0, [sp]
   1955c:	movw	r1, #0
   19560:	cmp	r0, r1
   19564:	beq	19574 <flatcc_builder_get_direct_buffer@@Base+0xe0>
   19568:	ldr	r0, [sp]
   1956c:	movw	r1, #0
   19570:	str	r1, [r0]
   19574:	movw	r0, #0
   19578:	str	r0, [sp, #8]
   1957c:	ldr	r0, [sp, #8]
   19580:	add	sp, sp, #12
   19584:	bx	lr

00019588 <flatcc_builder_copy_buffer@@Base>:
   19588:	push	{fp, lr}
   1958c:	mov	fp, sp
   19590:	sub	sp, sp, #16
   19594:	str	r0, [sp, #8]
   19598:	str	r1, [sp, #4]
   1959c:	str	r2, [sp]
   195a0:	ldr	r0, [sp, #8]
   195a4:	ldr	r0, [r0, #184]	; 0xb8
   195a8:	cmp	r0, #0
   195ac:	bne	195bc <flatcc_builder_copy_buffer@@Base+0x34>
   195b0:	movw	r0, #0
   195b4:	str	r0, [fp, #-4]
   195b8:	b	19610 <flatcc_builder_copy_buffer@@Base+0x88>
   195bc:	ldr	r0, [sp, #8]
   195c0:	add	r0, r0, #188	; 0xbc
   195c4:	ldr	r1, [sp, #4]
   195c8:	ldr	r2, [sp]
   195cc:	bl	1a27c <flatcc_emitter_copy_buffer@@Base>
   195d0:	str	r0, [sp, #4]
   195d4:	ldr	r0, [sp, #4]
   195d8:	movw	r1, #0
   195dc:	cmp	r0, r1
   195e0:	beq	195e8 <flatcc_builder_copy_buffer@@Base+0x60>
   195e4:	b	19608 <flatcc_builder_copy_buffer@@Base+0x80>
   195e8:	ldr	r0, [pc, #44]	; 1961c <flatcc_builder_copy_buffer@@Base+0x94>
   195ec:	add	r0, pc, r0
   195f0:	ldr	r1, [pc, #40]	; 19620 <flatcc_builder_copy_buffer@@Base+0x98>
   195f4:	add	r1, pc, r1
   195f8:	ldr	r2, [pc, #36]	; 19624 <flatcc_builder_copy_buffer@@Base+0x9c>
   195fc:	add	r3, pc, r2
   19600:	movw	r2, #1926	; 0x786
   19604:	bl	12494 <__assert_fail@plt>
   19608:	ldr	r0, [sp, #4]
   1960c:	str	r0, [fp, #-4]
   19610:	ldr	r0, [fp, #-4]
   19614:	mov	sp, fp
   19618:	pop	{fp, pc}
   1961c:	andeq	r1, r0, lr, lsl #6
   19620:	andeq	r1, r0, r0, lsr fp
   19624:	muleq	r0, r7, sl

00019628 <flatcc_builder_finalize_buffer@@Base>:
   19628:	push	{fp, lr}
   1962c:	mov	fp, sp
   19630:	sub	sp, sp, #16
   19634:	str	r0, [fp, #-4]
   19638:	str	r1, [sp, #8]
   1963c:	ldr	r0, [fp, #-4]
   19640:	bl	192f0 <flatcc_builder_get_buffer_size@@Base>
   19644:	str	r0, [sp]
   19648:	ldr	r0, [sp, #8]
   1964c:	movw	r1, #0
   19650:	cmp	r0, r1
   19654:	beq	19664 <flatcc_builder_finalize_buffer@@Base+0x3c>
   19658:	ldr	r0, [sp]
   1965c:	ldr	r1, [sp, #8]
   19660:	str	r0, [r1]
   19664:	ldr	r0, [sp]
   19668:	bl	1241c <malloc@plt>
   1966c:	str	r0, [sp, #4]
   19670:	ldr	r0, [sp, #4]
   19674:	movw	lr, #0
   19678:	cmp	r0, lr
   1967c:	bne	196a0 <flatcc_builder_finalize_buffer@@Base+0x78>
   19680:	ldr	r0, [pc, #144]	; 19718 <flatcc_builder_finalize_buffer@@Base+0xf0>
   19684:	add	r0, pc, r0
   19688:	ldr	r1, [pc, #140]	; 1971c <flatcc_builder_finalize_buffer@@Base+0xf4>
   1968c:	add	r1, pc, r1
   19690:	ldr	r2, [pc, #136]	; 19720 <flatcc_builder_finalize_buffer@@Base+0xf8>
   19694:	add	r3, pc, r2
   19698:	movw	r2, #1944	; 0x798
   1969c:	bl	12494 <__assert_fail@plt>
   196a0:	ldr	r0, [fp, #-4]
   196a4:	ldr	r1, [sp, #4]
   196a8:	ldr	r2, [sp]
   196ac:	bl	19588 <flatcc_builder_copy_buffer@@Base>
   196b0:	movw	r1, #0
   196b4:	cmp	r0, r1
   196b8:	bne	196dc <flatcc_builder_finalize_buffer@@Base+0xb4>
   196bc:	ldr	r0, [pc, #96]	; 19724 <flatcc_builder_finalize_buffer@@Base+0xfc>
   196c0:	add	r0, pc, r0
   196c4:	ldr	r1, [pc, #92]	; 19728 <flatcc_builder_finalize_buffer@@Base+0x100>
   196c8:	add	r1, pc, r1
   196cc:	ldr	r2, [pc, #88]	; 1972c <flatcc_builder_finalize_buffer@@Base+0x104>
   196d0:	add	r3, pc, r2
   196d4:	movw	r2, #1948	; 0x79c
   196d8:	bl	12494 <__assert_fail@plt>
   196dc:	b	196e0 <flatcc_builder_finalize_buffer@@Base+0xb8>
   196e0:	ldr	r0, [sp, #4]
   196e4:	movw	r1, #0
   196e8:	cmp	r0, r1
   196ec:	bne	1970c <flatcc_builder_finalize_buffer@@Base+0xe4>
   196f0:	ldr	r0, [sp, #8]
   196f4:	movw	r1, #0
   196f8:	cmp	r0, r1
   196fc:	beq	1970c <flatcc_builder_finalize_buffer@@Base+0xe4>
   19700:	ldr	r0, [sp, #8]
   19704:	movw	r1, #0
   19708:	str	r1, [r0]
   1970c:	ldr	r0, [sp, #4]
   19710:	mov	sp, fp
   19714:	pop	{fp, pc}
   19718:	andeq	r2, r0, sp, asr ip
   1971c:	muleq	r0, r8, sl
   19720:	andeq	r2, r0, r4, asr #20
   19724:	andeq	r2, r0, r1, lsr #24
   19728:	andeq	r1, r0, ip, asr sl
   1972c:	andeq	r2, r0, r8, lsl #20

00019730 <flatcc_builder_finalize_aligned_buffer@@Base>:
   19730:	push	{fp, lr}
   19734:	mov	fp, sp
   19738:	sub	sp, sp, #24
   1973c:	str	r0, [fp, #-4]
   19740:	str	r1, [fp, #-8]
   19744:	ldr	r0, [fp, #-4]
   19748:	bl	192f0 <flatcc_builder_get_buffer_size@@Base>
   1974c:	str	r0, [sp, #4]
   19750:	ldr	r0, [fp, #-8]
   19754:	movw	r1, #0
   19758:	cmp	r0, r1
   1975c:	beq	1976c <flatcc_builder_finalize_aligned_buffer@@Base+0x3c>
   19760:	ldr	r0, [sp, #4]
   19764:	ldr	r1, [fp, #-8]
   19768:	str	r0, [r1]
   1976c:	ldr	r0, [fp, #-4]
   19770:	bl	19220 <flatcc_builder_get_buffer_alignment@@Base>
   19774:	uxth	r0, r0
   19778:	str	r0, [sp, #8]
   1977c:	ldr	r0, [sp, #4]
   19780:	ldr	lr, [sp, #8]
   19784:	add	r0, r0, lr
   19788:	sub	r0, r0, #1
   1978c:	ldr	lr, [sp, #8]
   19790:	sub	lr, lr, #1
   19794:	mvn	r1, #0
   19798:	eor	r1, lr, r1
   1979c:	and	r0, r0, r1
   197a0:	str	r0, [sp, #4]
   197a4:	ldr	r0, [sp, #8]
   197a8:	ldr	r1, [sp, #4]
   197ac:	bl	19834 <flatcc_builder_finalize_aligned_buffer@@Base+0x104>
   197b0:	str	r0, [sp, #12]
   197b4:	ldr	r0, [sp, #12]
   197b8:	movw	r1, #0
   197bc:	cmp	r0, r1
   197c0:	bne	197c8 <flatcc_builder_finalize_aligned_buffer@@Base+0x98>
   197c4:	b	197fc <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   197c8:	ldr	r0, [fp, #-4]
   197cc:	ldr	r1, [sp, #12]
   197d0:	ldr	r2, [sp, #4]
   197d4:	bl	19588 <flatcc_builder_copy_buffer@@Base>
   197d8:	movw	r1, #0
   197dc:	cmp	r0, r1
   197e0:	bne	197f8 <flatcc_builder_finalize_aligned_buffer@@Base+0xc8>
   197e4:	ldr	r0, [sp, #12]
   197e8:	bl	123d4 <free@plt>
   197ec:	movw	r0, #0
   197f0:	str	r0, [sp, #12]
   197f4:	b	197fc <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   197f8:	b	197fc <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   197fc:	ldr	r0, [sp, #12]
   19800:	movw	r1, #0
   19804:	cmp	r0, r1
   19808:	bne	19828 <flatcc_builder_finalize_aligned_buffer@@Base+0xf8>
   1980c:	ldr	r0, [fp, #-8]
   19810:	movw	r1, #0
   19814:	cmp	r0, r1
   19818:	beq	19828 <flatcc_builder_finalize_aligned_buffer@@Base+0xf8>
   1981c:	ldr	r0, [fp, #-8]
   19820:	movw	r1, #0
   19824:	str	r1, [r0]
   19828:	ldr	r0, [sp, #12]
   1982c:	mov	sp, fp
   19830:	pop	{fp, pc}
   19834:	push	{fp, lr}
   19838:	mov	fp, sp
   1983c:	sub	sp, sp, #16
   19840:	str	r0, [fp, #-4]
   19844:	str	r1, [sp, #8]
   19848:	movw	r0, #0
   1984c:	str	r0, [sp]
   19850:	ldr	r0, [fp, #-4]
   19854:	cmp	r0, #4
   19858:	bcs	19864 <flatcc_builder_finalize_aligned_buffer@@Base+0x134>
   1985c:	movw	r0, #4
   19860:	str	r0, [fp, #-4]
   19864:	ldr	r1, [fp, #-4]
   19868:	ldr	r2, [sp, #8]
   1986c:	mov	r0, sp
   19870:	bl	1244c <posix_memalign@plt>
   19874:	str	r0, [sp, #4]
   19878:	ldr	r0, [sp, #4]
   1987c:	cmp	r0, #0
   19880:	beq	198a4 <flatcc_builder_finalize_aligned_buffer@@Base+0x174>
   19884:	ldr	r0, [sp]
   19888:	movw	r1, #0
   1988c:	cmp	r0, r1
   19890:	beq	198a4 <flatcc_builder_finalize_aligned_buffer@@Base+0x174>
   19894:	ldr	r0, [sp]
   19898:	bl	123d4 <free@plt>
   1989c:	movw	r0, #0
   198a0:	str	r0, [sp]
   198a4:	ldr	r0, [sp]
   198a8:	mov	sp, fp
   198ac:	pop	{fp, pc}

000198b0 <flatcc_builder_aligned_alloc@@Base>:
   198b0:	push	{fp, lr}
   198b4:	mov	fp, sp
   198b8:	sub	sp, sp, #8
   198bc:	str	r0, [sp, #4]
   198c0:	str	r1, [sp]
   198c4:	ldr	r0, [sp, #4]
   198c8:	ldr	r1, [sp]
   198cc:	bl	19834 <flatcc_builder_finalize_aligned_buffer@@Base+0x104>
   198d0:	mov	sp, fp
   198d4:	pop	{fp, pc}

000198d8 <flatcc_builder_aligned_free@@Base>:
   198d8:	push	{fp, lr}
   198dc:	mov	fp, sp
   198e0:	sub	sp, sp, #8
   198e4:	str	r0, [sp, #4]
   198e8:	ldr	r0, [sp, #4]
   198ec:	bl	123d4 <free@plt>
   198f0:	mov	sp, fp
   198f4:	pop	{fp, pc}

000198f8 <flatcc_builder_get_emit_context@@Base>:
   198f8:	sub	sp, sp, #4
   198fc:	str	r0, [sp]
   19900:	ldr	r0, [sp]
   19904:	ldr	r0, [r0, #36]	; 0x24
   19908:	add	sp, sp, #4
   1990c:	bx	lr
   19910:	sub	sp, sp, #8
   19914:	str	r0, [sp, #4]
   19918:	strh	r1, [sp, #2]
   1991c:	ldr	r0, [sp, #4]
   19920:	ldr	r0, [r0, #140]	; 0x8c
   19924:	ldrh	r1, [sp, #2]
   19928:	sub	r1, r1, #1
   1992c:	and	r0, r0, r1
   19930:	add	sp, sp, #8
   19934:	bx	lr
   19938:	push	{fp, lr}
   1993c:	mov	fp, sp
   19940:	sub	sp, sp, #32
   19944:	str	r0, [fp, #-8]
   19948:	str	r1, [fp, #-12]
   1994c:	str	r2, [sp, #16]
   19950:	ldr	r0, [fp, #-8]
   19954:	add	r0, r0, #52	; 0x34
   19958:	add	r0, r0, #8
   1995c:	str	r0, [sp, #12]
   19960:	ldr	r0, [fp, #-8]
   19964:	ldr	r0, [r0, #48]	; 0x30
   19968:	ldr	r1, [fp, #-8]
   1996c:	ldr	r1, [r1, #40]	; 0x28
   19970:	ldr	r2, [sp, #12]
   19974:	ldr	r3, [fp, #-8]
   19978:	ldr	r3, [r3, #28]
   1997c:	ldr	ip, [fp, #-12]
   19980:	add	r3, r3, ip
   19984:	str	r0, [sp, #8]
   19988:	mov	r0, r1
   1998c:	mov	r1, r2
   19990:	mov	r2, r3
   19994:	movw	r3, #1
   19998:	str	r3, [sp, #4]
   1999c:	ldr	ip, [sp, #4]
   199a0:	str	ip, [sp]
   199a4:	ldr	lr, [sp, #8]
   199a8:	blx	lr
   199ac:	cmp	r0, #0
   199b0:	beq	199c0 <flatcc_builder_get_emit_context@@Base+0xc8>
   199b4:	mvn	r0, #0
   199b8:	str	r0, [fp, #-4]
   199bc:	b	199d4 <flatcc_builder_get_emit_context@@Base+0xdc>
   199c0:	ldr	r0, [fp, #-8]
   199c4:	ldr	r1, [sp, #16]
   199c8:	bl	1573c <flatcc_builder_start_struct@@Base+0x70>
   199cc:	movw	r0, #0
   199d0:	str	r0, [fp, #-4]
   199d4:	ldr	r0, [fp, #-4]
   199d8:	mov	sp, fp
   199dc:	pop	{fp, pc}
   199e0:	push	{fp, lr}
   199e4:	mov	fp, sp
   199e8:	sub	sp, sp, #32
   199ec:	str	r0, [fp, #-8]
   199f0:	ldr	r0, [fp, #-8]
   199f4:	add	r0, r0, #52	; 0x34
   199f8:	add	r0, r0, #40	; 0x28
   199fc:	str	r0, [fp, #-12]
   19a00:	ldr	r0, [fp, #-8]
   19a04:	ldr	r0, [r0, #124]	; 0x7c
   19a08:	cmp	r0, #0
   19a0c:	bne	19a14 <flatcc_builder_get_emit_context@@Base+0x11c>
   19a10:	b	19a34 <flatcc_builder_get_emit_context@@Base+0x13c>
   19a14:	ldr	r0, [pc, #320]	; 19b5c <flatcc_builder_get_emit_context@@Base+0x264>
   19a18:	add	r0, pc, r0
   19a1c:	ldr	r1, [pc, #316]	; 19b60 <flatcc_builder_get_emit_context@@Base+0x268>
   19a20:	add	r1, pc, r1
   19a24:	ldr	r2, [pc, #312]	; 19b64 <flatcc_builder_get_emit_context@@Base+0x26c>
   19a28:	add	r3, pc, r2
   19a2c:	movw	r2, #342	; 0x156
   19a30:	bl	12494 <__assert_fail@plt>
   19a34:	ldr	r0, [fp, #-8]
   19a38:	ldr	r1, [fp, #-8]
   19a3c:	ldr	r2, [r1, #124]	; 0x7c
   19a40:	movw	r1, #6
   19a44:	movw	r3, #16
   19a48:	movw	ip, #0
   19a4c:	str	ip, [sp]
   19a50:	bl	14464 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   19a54:	movw	r1, #0
   19a58:	cmp	r0, r1
   19a5c:	bne	19a6c <flatcc_builder_get_emit_context@@Base+0x174>
   19a60:	mvn	r0, #0
   19a64:	str	r0, [fp, #-4]
   19a68:	b	19b50 <flatcc_builder_get_emit_context@@Base+0x258>
   19a6c:	ldr	r0, [fp, #-8]
   19a70:	movw	r1, #16
   19a74:	str	r1, [r0, #124]	; 0x7c
   19a78:	movw	r0, #256	; 0x100
   19a7c:	str	r0, [sp, #16]
   19a80:	ldr	r0, [fp, #-8]
   19a84:	ldr	r0, [r0, #48]	; 0x30
   19a88:	ldr	r1, [fp, #-8]
   19a8c:	ldr	r1, [r1, #40]	; 0x28
   19a90:	ldr	r2, [fp, #-12]
   19a94:	ldr	r3, [sp, #16]
   19a98:	str	r0, [sp, #8]
   19a9c:	mov	r0, r1
   19aa0:	mov	r1, r2
   19aa4:	mov	r2, r3
   19aa8:	movw	r3, #1
   19aac:	movw	ip, #5
   19ab0:	str	ip, [sp]
   19ab4:	ldr	ip, [sp, #8]
   19ab8:	blx	ip
   19abc:	cmp	r0, #0
   19ac0:	beq	19ad0 <flatcc_builder_get_emit_context@@Base+0x1d8>
   19ac4:	mvn	r0, #0
   19ac8:	str	r0, [fp, #-4]
   19acc:	b	19b50 <flatcc_builder_get_emit_context@@Base+0x258>
   19ad0:	b	19ad4 <flatcc_builder_get_emit_context@@Base+0x1dc>
   19ad4:	ldr	r0, [sp, #16]
   19ad8:	lsl	r0, r0, #1
   19adc:	ldr	r1, [fp, #-12]
   19ae0:	ldr	r1, [r1, #4]
   19ae4:	cmp	r0, r1
   19ae8:	bhi	19afc <flatcc_builder_get_emit_context@@Base+0x204>
   19aec:	ldr	r0, [sp, #16]
   19af0:	lsl	r0, r0, #1
   19af4:	str	r0, [sp, #16]
   19af8:	b	19ad4 <flatcc_builder_get_emit_context@@Base+0x1dc>
   19afc:	ldr	r0, [sp, #16]
   19b00:	lsr	r0, r0, #2
   19b04:	str	r0, [sp, #16]
   19b08:	movw	r0, #0
   19b0c:	str	r0, [sp, #12]
   19b10:	ldr	r0, [sp, #12]
   19b14:	movw	r1, #1
   19b18:	lsl	r0, r1, r0
   19b1c:	ldr	r1, [sp, #16]
   19b20:	cmp	r0, r1
   19b24:	bcs	19b3c <flatcc_builder_get_emit_context@@Base+0x244>
   19b28:	b	19b2c <flatcc_builder_get_emit_context@@Base+0x234>
   19b2c:	ldr	r0, [sp, #12]
   19b30:	add	r0, r0, #1
   19b34:	str	r0, [sp, #12]
   19b38:	b	19b10 <flatcc_builder_get_emit_context@@Base+0x218>
   19b3c:	ldr	r0, [sp, #12]
   19b40:	ldr	r1, [fp, #-8]
   19b44:	str	r0, [r1, #116]	; 0x74
   19b48:	movw	r0, #0
   19b4c:	str	r0, [fp, #-4]
   19b50:	ldr	r0, [fp, #-4]
   19b54:	mov	sp, fp
   19b58:	pop	{fp, pc}
   19b5c:	andeq	r2, r0, sp, lsl #17
   19b60:	andeq	r1, r0, r4, lsl #14
   19b64:	andeq	r2, r0, ip, lsl #17

00019b68 <flatcc_emitter_recycle_page@@Base>:
   19b68:	sub	sp, sp, #12
   19b6c:	str	r0, [sp, #4]
   19b70:	str	r1, [sp]
   19b74:	ldr	r0, [sp]
   19b78:	ldr	r1, [sp, #4]
   19b7c:	ldr	r1, [r1]
   19b80:	cmp	r0, r1
   19b84:	beq	19b9c <flatcc_emitter_recycle_page@@Base+0x34>
   19b88:	ldr	r0, [sp]
   19b8c:	ldr	r1, [sp, #4]
   19b90:	ldr	r1, [r1, #4]
   19b94:	cmp	r0, r1
   19b98:	bne	19ba8 <flatcc_emitter_recycle_page@@Base+0x40>
   19b9c:	mvn	r0, #0
   19ba0:	str	r0, [sp, #8]
   19ba4:	b	19c1c <flatcc_emitter_recycle_page@@Base+0xb4>
   19ba8:	ldr	r0, [sp]
   19bac:	ldr	r0, [r0, #2948]	; 0xb84
   19bb0:	ldr	r1, [sp]
   19bb4:	ldr	r1, [r1, #2944]	; 0xb80
   19bb8:	str	r0, [r1, #2948]	; 0xb84
   19bbc:	ldr	r0, [sp]
   19bc0:	ldr	r0, [r0, #2944]	; 0xb80
   19bc4:	ldr	r1, [sp]
   19bc8:	ldr	r1, [r1, #2948]	; 0xb84
   19bcc:	str	r0, [r1, #2944]	; 0xb80
   19bd0:	ldr	r0, [sp, #4]
   19bd4:	ldr	r0, [r0]
   19bd8:	ldr	r0, [r0, #2948]	; 0xb84
   19bdc:	ldr	r1, [sp]
   19be0:	str	r0, [r1, #2948]	; 0xb84
   19be4:	ldr	r0, [sp, #4]
   19be8:	ldr	r0, [r0]
   19bec:	ldr	r1, [sp]
   19bf0:	str	r0, [r1, #2944]	; 0xb80
   19bf4:	ldr	r0, [sp]
   19bf8:	ldr	r1, [sp]
   19bfc:	ldr	r1, [r1, #2948]	; 0xb84
   19c00:	str	r0, [r1, #2944]	; 0xb80
   19c04:	ldr	r0, [sp]
   19c08:	ldr	r1, [sp]
   19c0c:	ldr	r1, [r1, #2944]	; 0xb80
   19c10:	str	r0, [r1, #2948]	; 0xb84
   19c14:	movw	r0, #0
   19c18:	str	r0, [sp, #8]
   19c1c:	ldr	r0, [sp, #8]
   19c20:	add	sp, sp, #12
   19c24:	bx	lr

00019c28 <flatcc_emitter_reset@@Base>:
   19c28:	push	{fp, lr}
   19c2c:	mov	fp, sp
   19c30:	sub	sp, sp, #16
   19c34:	str	r0, [fp, #-4]
   19c38:	ldr	r0, [fp, #-4]
   19c3c:	ldr	r0, [r0]
   19c40:	str	r0, [sp, #8]
   19c44:	ldr	r0, [fp, #-4]
   19c48:	ldr	r0, [r0]
   19c4c:	movw	r1, #0
   19c50:	cmp	r0, r1
   19c54:	bne	19c5c <flatcc_emitter_reset@@Base+0x34>
   19c58:	b	19db8 <flatcc_emitter_reset@@Base+0x190>
   19c5c:	ldr	r0, [fp, #-4]
   19c60:	ldr	r0, [r0]
   19c64:	ldr	r1, [fp, #-4]
   19c68:	str	r0, [r1, #4]
   19c6c:	ldr	r0, [fp, #-4]
   19c70:	ldr	r0, [r0]
   19c74:	add	r0, r0, #1472	; 0x5c0
   19c78:	ldr	r1, [fp, #-4]
   19c7c:	str	r0, [r1, #8]
   19c80:	ldr	r0, [fp, #-4]
   19c84:	ldr	r0, [r0, #8]
   19c88:	ldr	r1, [fp, #-4]
   19c8c:	str	r0, [r1, #16]
   19c90:	ldr	r0, [fp, #-4]
   19c94:	movw	r1, #1472	; 0x5c0
   19c98:	str	r1, [r0, #12]
   19c9c:	ldr	r0, [fp, #-4]
   19ca0:	str	r1, [r0, #20]
   19ca4:	ldr	r0, [fp, #-4]
   19ca8:	ldr	r0, [r0, #12]
   19cac:	movw	r1, #0
   19cb0:	sub	r0, r1, r0
   19cb4:	ldr	r1, [fp, #-4]
   19cb8:	ldr	r1, [r1]
   19cbc:	str	r0, [r1, #2952]	; 0xb88
   19cc0:	ldr	r0, [fp, #-4]
   19cc4:	ldr	r0, [r0, #32]
   19cc8:	cmp	r0, #0
   19ccc:	bne	19ce0 <flatcc_emitter_reset@@Base+0xb8>
   19cd0:	ldr	r0, [fp, #-4]
   19cd4:	ldr	r0, [r0, #24]
   19cd8:	ldr	r1, [fp, #-4]
   19cdc:	str	r0, [r1, #32]
   19ce0:	ldr	r0, [fp, #-4]
   19ce4:	ldr	r1, [r0, #24]
   19ce8:	ldr	r0, [r0, #32]
   19cec:	add	r0, r0, r0, lsl #1
   19cf0:	lsr	r0, r0, #2
   19cf4:	lsr	r1, r1, #2
   19cf8:	add	r0, r0, r1
   19cfc:	ldr	r1, [fp, #-4]
   19d00:	str	r0, [r1, #32]
   19d04:	ldr	r0, [fp, #-4]
   19d08:	movw	r1, #0
   19d0c:	str	r1, [r0, #24]
   19d10:	ldr	r0, [fp, #-4]
   19d14:	ldr	r0, [r0, #32]
   19d18:	lsl	r0, r0, #1
   19d1c:	ldr	r1, [fp, #-4]
   19d20:	ldr	r1, [r1, #28]
   19d24:	cmp	r0, r1
   19d28:	movw	r0, #0
   19d2c:	str	r0, [sp, #4]
   19d30:	bcs	19d58 <flatcc_emitter_reset@@Base+0x130>
   19d34:	ldr	r0, [fp, #-4]
   19d38:	ldr	r0, [r0, #4]
   19d3c:	ldr	r0, [r0, #2944]	; 0xb80
   19d40:	ldr	r1, [fp, #-4]
   19d44:	ldr	r1, [r1]
   19d48:	cmp	r0, r1
   19d4c:	movw	r0, #0
   19d50:	movne	r0, #1
   19d54:	str	r0, [sp, #4]
   19d58:	ldr	r0, [sp, #4]
   19d5c:	tst	r0, #1
   19d60:	beq	19db8 <flatcc_emitter_reset@@Base+0x190>
   19d64:	ldr	r0, [fp, #-4]
   19d68:	ldr	r0, [r0, #4]
   19d6c:	ldr	r0, [r0, #2944]	; 0xb80
   19d70:	str	r0, [sp, #8]
   19d74:	ldr	r0, [sp, #8]
   19d78:	ldr	r0, [r0, #2944]	; 0xb80
   19d7c:	ldr	r1, [fp, #-4]
   19d80:	ldr	r1, [r1, #4]
   19d84:	str	r0, [r1, #2944]	; 0xb80
   19d88:	ldr	r0, [fp, #-4]
   19d8c:	ldr	r0, [r0, #4]
   19d90:	ldr	r1, [sp, #8]
   19d94:	ldr	r1, [r1, #2944]	; 0xb80
   19d98:	str	r0, [r1, #2948]	; 0xb84
   19d9c:	ldr	r0, [sp, #8]
   19da0:	bl	123d4 <free@plt>
   19da4:	ldr	r0, [fp, #-4]
   19da8:	ldr	r1, [r0, #28]
   19dac:	sub	r1, r1, #2944	; 0xb80
   19db0:	str	r1, [r0, #28]
   19db4:	b	19d10 <flatcc_emitter_reset@@Base+0xe8>
   19db8:	mov	sp, fp
   19dbc:	pop	{fp, pc}

00019dc0 <flatcc_emitter_clear@@Base>:
   19dc0:	push	{fp, lr}
   19dc4:	mov	fp, sp
   19dc8:	sub	sp, sp, #8
   19dcc:	str	r0, [sp, #4]
   19dd0:	ldr	r0, [sp, #4]
   19dd4:	ldr	r0, [r0]
   19dd8:	str	r0, [sp]
   19ddc:	ldr	r0, [sp]
   19de0:	movw	r1, #0
   19de4:	cmp	r0, r1
   19de8:	bne	19df0 <flatcc_emitter_clear@@Base+0x30>
   19dec:	b	19e4c <flatcc_emitter_clear@@Base+0x8c>
   19df0:	ldr	r0, [sp]
   19df4:	ldr	r0, [r0, #2948]	; 0xb84
   19df8:	movw	r1, #0
   19dfc:	str	r1, [r0, #2944]	; 0xb80
   19e00:	ldr	r0, [sp]
   19e04:	ldr	r0, [r0, #2944]	; 0xb80
   19e08:	movw	r1, #0
   19e0c:	cmp	r0, r1
   19e10:	beq	19e30 <flatcc_emitter_clear@@Base+0x70>
   19e14:	ldr	r0, [sp]
   19e18:	ldr	r0, [r0, #2944]	; 0xb80
   19e1c:	str	r0, [sp]
   19e20:	ldr	r0, [sp]
   19e24:	ldr	r0, [r0, #2948]	; 0xb84
   19e28:	bl	123d4 <free@plt>
   19e2c:	b	19e00 <flatcc_emitter_clear@@Base+0x40>
   19e30:	ldr	r0, [sp]
   19e34:	bl	123d4 <free@plt>
   19e38:	ldr	r0, [sp, #4]
   19e3c:	movw	lr, #0
   19e40:	and	r1, lr, #255	; 0xff
   19e44:	movw	r2, #36	; 0x24
   19e48:	bl	12458 <memset@plt>
   19e4c:	mov	sp, fp
   19e50:	pop	{fp, pc}

00019e54 <flatcc_emitter@@Base>:
   19e54:	push	{fp, lr}
   19e58:	mov	fp, sp
   19e5c:	sub	sp, sp, #32
   19e60:	ldr	ip, [fp, #8]
   19e64:	str	r0, [fp, #-8]
   19e68:	str	r1, [fp, #-12]
   19e6c:	str	r2, [sp, #16]
   19e70:	str	r3, [sp, #12]
   19e74:	ldr	r0, [fp, #-8]
   19e78:	str	r0, [sp, #8]
   19e7c:	ldr	r0, [fp, #8]
   19e80:	ldr	r1, [sp, #8]
   19e84:	ldr	r2, [r1, #24]
   19e88:	add	r0, r2, r0
   19e8c:	str	r0, [r1, #24]
   19e90:	ldr	r0, [sp, #12]
   19e94:	cmp	r0, #0
   19e98:	str	ip, [sp]
   19e9c:	bge	19f60 <flatcc_emitter@@Base+0x10c>
   19ea0:	ldr	r0, [fp, #8]
   19ea4:	ldr	r1, [sp, #8]
   19ea8:	ldr	r1, [r1, #12]
   19eac:	cmp	r0, r1
   19eb0:	bhi	19ef4 <flatcc_emitter@@Base+0xa0>
   19eb4:	ldr	r0, [fp, #8]
   19eb8:	ldr	r1, [sp, #8]
   19ebc:	ldr	r2, [r1, #8]
   19ec0:	movw	r3, #0
   19ec4:	sub	r0, r3, r0
   19ec8:	add	r0, r2, r0
   19ecc:	str	r0, [r1, #8]
   19ed0:	ldr	r0, [fp, #8]
   19ed4:	ldr	r1, [sp, #8]
   19ed8:	ldr	r2, [r1, #12]
   19edc:	sub	r0, r2, r0
   19ee0:	str	r0, [r1, #12]
   19ee4:	ldr	r0, [sp, #8]
   19ee8:	ldr	r0, [r0, #8]
   19eec:	str	r0, [sp, #4]
   19ef0:	b	1a014 <flatcc_emitter@@Base+0x1c0>
   19ef4:	ldr	r0, [sp, #16]
   19ef8:	ldr	r1, [fp, #-12]
   19efc:	add	r0, r1, r0, lsl #3
   19f00:	str	r0, [fp, #-12]
   19f04:	ldr	r0, [sp, #16]
   19f08:	mvn	r1, #0
   19f0c:	add	r1, r0, r1
   19f10:	str	r1, [sp, #16]
   19f14:	cmp	r0, #0
   19f18:	beq	19f5c <flatcc_emitter@@Base+0x108>
   19f1c:	ldr	r0, [fp, #-12]
   19f20:	mvn	r1, #7
   19f24:	add	r0, r0, r1
   19f28:	str	r0, [fp, #-12]
   19f2c:	ldr	r0, [sp, #8]
   19f30:	ldr	r1, [fp, #-12]
   19f34:	ldr	r1, [r1]
   19f38:	ldr	r2, [fp, #-12]
   19f3c:	ldr	r2, [r2, #4]
   19f40:	bl	1a080 <flatcc_emitter@@Base+0x22c>
   19f44:	cmp	r0, #0
   19f48:	beq	19f58 <flatcc_emitter@@Base+0x104>
   19f4c:	mvn	r0, #0
   19f50:	str	r0, [fp, #-4]
   19f54:	b	1a074 <flatcc_emitter@@Base+0x220>
   19f58:	b	19f04 <flatcc_emitter@@Base+0xb0>
   19f5c:	b	1a008 <flatcc_emitter@@Base+0x1b4>
   19f60:	ldr	r0, [fp, #8]
   19f64:	ldr	r1, [sp, #8]
   19f68:	ldr	r1, [r1, #20]
   19f6c:	cmp	r0, r1
   19f70:	bhi	19fac <flatcc_emitter@@Base+0x158>
   19f74:	ldr	r0, [sp, #8]
   19f78:	ldr	r0, [r0, #16]
   19f7c:	str	r0, [sp, #4]
   19f80:	ldr	r0, [fp, #8]
   19f84:	ldr	r1, [sp, #8]
   19f88:	ldr	r2, [r1, #16]
   19f8c:	add	r0, r2, r0
   19f90:	str	r0, [r1, #16]
   19f94:	ldr	r0, [fp, #8]
   19f98:	ldr	r1, [sp, #8]
   19f9c:	ldr	r2, [r1, #20]
   19fa0:	sub	r0, r2, r0
   19fa4:	str	r0, [r1, #20]
   19fa8:	b	1a014 <flatcc_emitter@@Base+0x1c0>
   19fac:	b	19fb0 <flatcc_emitter@@Base+0x15c>
   19fb0:	ldr	r0, [sp, #16]
   19fb4:	mvn	r1, #0
   19fb8:	add	r1, r0, r1
   19fbc:	str	r1, [sp, #16]
   19fc0:	cmp	r0, #0
   19fc4:	beq	1a004 <flatcc_emitter@@Base+0x1b0>
   19fc8:	ldr	r0, [sp, #8]
   19fcc:	ldr	r1, [fp, #-12]
   19fd0:	ldr	r1, [r1]
   19fd4:	ldr	r2, [fp, #-12]
   19fd8:	ldr	r2, [r2, #4]
   19fdc:	bl	1a18c <flatcc_emitter@@Base+0x338>
   19fe0:	cmp	r0, #0
   19fe4:	beq	19ff4 <flatcc_emitter@@Base+0x1a0>
   19fe8:	mvn	r0, #0
   19fec:	str	r0, [fp, #-4]
   19ff0:	b	1a074 <flatcc_emitter@@Base+0x220>
   19ff4:	ldr	r0, [fp, #-12]
   19ff8:	add	r0, r0, #8
   19ffc:	str	r0, [fp, #-12]
   1a000:	b	19fb0 <flatcc_emitter@@Base+0x15c>
   1a004:	b	1a008 <flatcc_emitter@@Base+0x1b4>
   1a008:	movw	r0, #0
   1a00c:	str	r0, [fp, #-4]
   1a010:	b	1a074 <flatcc_emitter@@Base+0x220>
   1a014:	b	1a018 <flatcc_emitter@@Base+0x1c4>
   1a018:	ldr	r0, [sp, #16]
   1a01c:	mvn	r1, #0
   1a020:	add	r1, r0, r1
   1a024:	str	r1, [sp, #16]
   1a028:	cmp	r0, #0
   1a02c:	beq	1a06c <flatcc_emitter@@Base+0x218>
   1a030:	ldr	r0, [sp, #4]
   1a034:	ldr	r1, [fp, #-12]
   1a038:	ldr	r1, [r1]
   1a03c:	ldr	r2, [fp, #-12]
   1a040:	ldr	r2, [r2, #4]
   1a044:	bl	123e0 <memcpy@plt>
   1a048:	ldr	r0, [fp, #-12]
   1a04c:	ldr	r0, [r0, #4]
   1a050:	ldr	r1, [sp, #4]
   1a054:	add	r0, r1, r0
   1a058:	str	r0, [sp, #4]
   1a05c:	ldr	r0, [fp, #-12]
   1a060:	add	r0, r0, #8
   1a064:	str	r0, [fp, #-12]
   1a068:	b	1a018 <flatcc_emitter@@Base+0x1c4>
   1a06c:	movw	r0, #0
   1a070:	str	r0, [fp, #-4]
   1a074:	ldr	r0, [fp, #-4]
   1a078:	mov	sp, fp
   1a07c:	pop	{fp, pc}
   1a080:	push	{fp, lr}
   1a084:	mov	fp, sp
   1a088:	sub	sp, sp, #24
   1a08c:	str	r0, [fp, #-8]
   1a090:	str	r1, [sp, #12]
   1a094:	str	r2, [sp, #8]
   1a098:	ldr	r0, [sp, #8]
   1a09c:	ldr	r1, [sp, #12]
   1a0a0:	add	r0, r1, r0
   1a0a4:	str	r0, [sp, #12]
   1a0a8:	ldr	r0, [sp, #8]
   1a0ac:	cmp	r0, #0
   1a0b0:	beq	1a178 <flatcc_emitter@@Base+0x324>
   1a0b4:	ldr	r0, [sp, #8]
   1a0b8:	str	r0, [sp, #4]
   1a0bc:	ldr	r0, [sp, #4]
   1a0c0:	ldr	r1, [fp, #-8]
   1a0c4:	ldr	r1, [r1, #12]
   1a0c8:	cmp	r0, r1
   1a0cc:	bls	1a10c <flatcc_emitter@@Base+0x2b8>
   1a0d0:	ldr	r0, [fp, #-8]
   1a0d4:	ldr	r0, [r0, #12]
   1a0d8:	str	r0, [sp, #4]
   1a0dc:	ldr	r0, [sp, #4]
   1a0e0:	cmp	r0, #0
   1a0e4:	bne	1a108 <flatcc_emitter@@Base+0x2b4>
   1a0e8:	ldr	r0, [fp, #-8]
   1a0ec:	bl	1a3c8 <flatcc_emitter_copy_buffer@@Base+0x14c>
   1a0f0:	cmp	r0, #0
   1a0f4:	beq	1a104 <flatcc_emitter@@Base+0x2b0>
   1a0f8:	mvn	r0, #0
   1a0fc:	str	r0, [fp, #-4]
   1a100:	b	1a180 <flatcc_emitter@@Base+0x32c>
   1a104:	b	1a0a8 <flatcc_emitter@@Base+0x254>
   1a108:	b	1a10c <flatcc_emitter@@Base+0x2b8>
   1a10c:	ldr	r0, [sp, #4]
   1a110:	ldr	r1, [fp, #-8]
   1a114:	ldr	r2, [r1, #8]
   1a118:	movw	r3, #0
   1a11c:	sub	r0, r3, r0
   1a120:	add	r0, r2, r0
   1a124:	str	r0, [r1, #8]
   1a128:	ldr	r0, [sp, #4]
   1a12c:	ldr	r1, [fp, #-8]
   1a130:	ldr	r2, [r1, #12]
   1a134:	sub	r0, r2, r0
   1a138:	str	r0, [r1, #12]
   1a13c:	ldr	r0, [sp, #4]
   1a140:	ldr	r1, [sp, #12]
   1a144:	sub	r0, r3, r0
   1a148:	add	r0, r1, r0
   1a14c:	str	r0, [sp, #12]
   1a150:	ldr	r0, [sp, #4]
   1a154:	ldr	r1, [sp, #8]
   1a158:	sub	r0, r1, r0
   1a15c:	str	r0, [sp, #8]
   1a160:	ldr	r0, [fp, #-8]
   1a164:	ldr	r0, [r0, #8]
   1a168:	ldr	r1, [sp, #12]
   1a16c:	ldr	r2, [sp, #4]
   1a170:	bl	123e0 <memcpy@plt>
   1a174:	b	1a0a8 <flatcc_emitter@@Base+0x254>
   1a178:	movw	r0, #0
   1a17c:	str	r0, [fp, #-4]
   1a180:	ldr	r0, [fp, #-4]
   1a184:	mov	sp, fp
   1a188:	pop	{fp, pc}
   1a18c:	push	{fp, lr}
   1a190:	mov	fp, sp
   1a194:	sub	sp, sp, #24
   1a198:	str	r0, [fp, #-8]
   1a19c:	str	r1, [sp, #12]
   1a1a0:	str	r2, [sp, #8]
   1a1a4:	ldr	r0, [sp, #8]
   1a1a8:	cmp	r0, #0
   1a1ac:	beq	1a268 <flatcc_emitter@@Base+0x414>
   1a1b0:	ldr	r0, [sp, #8]
   1a1b4:	str	r0, [sp, #4]
   1a1b8:	ldr	r0, [sp, #4]
   1a1bc:	ldr	r1, [fp, #-8]
   1a1c0:	ldr	r1, [r1, #20]
   1a1c4:	cmp	r0, r1
   1a1c8:	bls	1a208 <flatcc_emitter@@Base+0x3b4>
   1a1cc:	ldr	r0, [fp, #-8]
   1a1d0:	ldr	r0, [r0, #20]
   1a1d4:	str	r0, [sp, #4]
   1a1d8:	ldr	r0, [sp, #4]
   1a1dc:	cmp	r0, #0
   1a1e0:	bne	1a204 <flatcc_emitter@@Base+0x3b0>
   1a1e4:	ldr	r0, [fp, #-8]
   1a1e8:	bl	1a5c8 <flatcc_emitter_copy_buffer@@Base+0x34c>
   1a1ec:	cmp	r0, #0
   1a1f0:	beq	1a200 <flatcc_emitter@@Base+0x3ac>
   1a1f4:	mvn	r0, #0
   1a1f8:	str	r0, [fp, #-4]
   1a1fc:	b	1a270 <flatcc_emitter@@Base+0x41c>
   1a200:	b	1a1a4 <flatcc_emitter@@Base+0x350>
   1a204:	b	1a208 <flatcc_emitter@@Base+0x3b4>
   1a208:	ldr	r0, [fp, #-8]
   1a20c:	ldr	r0, [r0, #16]
   1a210:	ldr	r1, [sp, #12]
   1a214:	ldr	r2, [sp, #4]
   1a218:	bl	123e0 <memcpy@plt>
   1a21c:	ldr	r0, [sp, #4]
   1a220:	ldr	r1, [sp, #8]
   1a224:	sub	r0, r1, r0
   1a228:	str	r0, [sp, #8]
   1a22c:	ldr	r0, [sp, #4]
   1a230:	ldr	r1, [sp, #12]
   1a234:	add	r0, r1, r0
   1a238:	str	r0, [sp, #12]
   1a23c:	ldr	r0, [sp, #4]
   1a240:	ldr	r1, [fp, #-8]
   1a244:	ldr	r2, [r1, #16]
   1a248:	add	r0, r2, r0
   1a24c:	str	r0, [r1, #16]
   1a250:	ldr	r0, [sp, #4]
   1a254:	ldr	r1, [fp, #-8]
   1a258:	ldr	r2, [r1, #20]
   1a25c:	sub	r0, r2, r0
   1a260:	str	r0, [r1, #20]
   1a264:	b	1a1a4 <flatcc_emitter@@Base+0x350>
   1a268:	movw	r0, #0
   1a26c:	str	r0, [fp, #-4]
   1a270:	ldr	r0, [fp, #-4]
   1a274:	mov	sp, fp
   1a278:	pop	{fp, pc}

0001a27c <flatcc_emitter_copy_buffer@@Base>:
   1a27c:	push	{fp, lr}
   1a280:	mov	fp, sp
   1a284:	sub	sp, sp, #24
   1a288:	str	r0, [fp, #-8]
   1a28c:	str	r1, [sp, #12]
   1a290:	str	r2, [sp, #8]
   1a294:	ldr	r0, [sp, #8]
   1a298:	ldr	r1, [fp, #-8]
   1a29c:	ldr	r1, [r1, #24]
   1a2a0:	cmp	r0, r1
   1a2a4:	bcs	1a2b4 <flatcc_emitter_copy_buffer@@Base+0x38>
   1a2a8:	movw	r0, #0
   1a2ac:	str	r0, [fp, #-4]
   1a2b0:	b	1a3bc <flatcc_emitter_copy_buffer@@Base+0x140>
   1a2b4:	ldr	r0, [fp, #-8]
   1a2b8:	ldr	r0, [r0]
   1a2bc:	movw	r1, #0
   1a2c0:	cmp	r0, r1
   1a2c4:	bne	1a2d4 <flatcc_emitter_copy_buffer@@Base+0x58>
   1a2c8:	movw	r0, #0
   1a2cc:	str	r0, [fp, #-4]
   1a2d0:	b	1a3bc <flatcc_emitter_copy_buffer@@Base+0x140>
   1a2d4:	ldr	r0, [fp, #-8]
   1a2d8:	ldr	r0, [r0]
   1a2dc:	ldr	r1, [fp, #-8]
   1a2e0:	ldr	r1, [r1, #4]
   1a2e4:	cmp	r0, r1
   1a2e8:	bne	1a310 <flatcc_emitter_copy_buffer@@Base+0x94>
   1a2ec:	ldr	r0, [sp, #12]
   1a2f0:	ldr	r1, [fp, #-8]
   1a2f4:	ldr	r1, [r1, #8]
   1a2f8:	ldr	r2, [fp, #-8]
   1a2fc:	ldr	r2, [r2, #24]
   1a300:	bl	123e0 <memcpy@plt>
   1a304:	ldr	r0, [sp, #12]
   1a308:	str	r0, [fp, #-4]
   1a30c:	b	1a3bc <flatcc_emitter_copy_buffer@@Base+0x140>
   1a310:	ldr	r0, [fp, #-8]
   1a314:	ldr	r0, [r0, #12]
   1a318:	movw	r1, #2944	; 0xb80
   1a31c:	sub	r0, r1, r0
   1a320:	str	r0, [sp]
   1a324:	ldr	r0, [sp, #12]
   1a328:	ldr	r1, [fp, #-8]
   1a32c:	ldr	r1, [r1, #8]
   1a330:	ldr	r2, [sp]
   1a334:	bl	123e0 <memcpy@plt>
   1a338:	ldr	r0, [sp, #12]
   1a33c:	ldr	r1, [sp]
   1a340:	add	r0, r0, r1
   1a344:	str	r0, [sp, #12]
   1a348:	ldr	r0, [fp, #-8]
   1a34c:	ldr	r0, [r0]
   1a350:	ldr	r0, [r0, #2944]	; 0xb80
   1a354:	str	r0, [sp, #4]
   1a358:	ldr	r0, [sp, #4]
   1a35c:	ldr	r1, [fp, #-8]
   1a360:	ldr	r1, [r1, #4]
   1a364:	cmp	r0, r1
   1a368:	beq	1a398 <flatcc_emitter_copy_buffer@@Base+0x11c>
   1a36c:	ldr	r0, [sp, #12]
   1a370:	ldr	r1, [sp, #4]
   1a374:	movw	r2, #2944	; 0xb80
   1a378:	bl	123e0 <memcpy@plt>
   1a37c:	ldr	r0, [sp, #12]
   1a380:	add	r0, r0, #2944	; 0xb80
   1a384:	str	r0, [sp, #12]
   1a388:	ldr	r0, [sp, #4]
   1a38c:	ldr	r0, [r0, #2944]	; 0xb80
   1a390:	str	r0, [sp, #4]
   1a394:	b	1a358 <flatcc_emitter_copy_buffer@@Base+0xdc>
   1a398:	ldr	r0, [sp, #12]
   1a39c:	ldr	r1, [sp, #4]
   1a3a0:	ldr	r2, [fp, #-8]
   1a3a4:	ldr	r2, [r2, #20]
   1a3a8:	movw	r3, #2944	; 0xb80
   1a3ac:	sub	r2, r3, r2
   1a3b0:	bl	123e0 <memcpy@plt>
   1a3b4:	ldr	r0, [sp, #12]
   1a3b8:	str	r0, [fp, #-4]
   1a3bc:	ldr	r0, [fp, #-4]
   1a3c0:	mov	sp, fp
   1a3c4:	pop	{fp, pc}
   1a3c8:	push	{fp, lr}
   1a3cc:	mov	fp, sp
   1a3d0:	sub	sp, sp, #16
   1a3d4:	str	r0, [sp, #8]
   1a3d8:	movw	r0, #0
   1a3dc:	str	r0, [sp, #4]
   1a3e0:	ldr	r1, [sp, #8]
   1a3e4:	ldr	r1, [r1]
   1a3e8:	cmp	r1, r0
   1a3ec:	beq	1a444 <flatcc_emitter_copy_buffer@@Base+0x1c8>
   1a3f0:	ldr	r0, [sp, #8]
   1a3f4:	ldr	r0, [r0]
   1a3f8:	ldr	r0, [r0, #2948]	; 0xb84
   1a3fc:	ldr	r1, [sp, #8]
   1a400:	ldr	r1, [r1, #4]
   1a404:	cmp	r0, r1
   1a408:	beq	1a444 <flatcc_emitter_copy_buffer@@Base+0x1c8>
   1a40c:	ldr	r0, [sp, #8]
   1a410:	ldr	r0, [r0]
   1a414:	ldr	r0, [r0, #2952]	; 0xb88
   1a418:	sub	r0, r0, #2944	; 0xb80
   1a41c:	ldr	r1, [sp, #8]
   1a420:	ldr	r1, [r1]
   1a424:	ldr	r1, [r1, #2948]	; 0xb84
   1a428:	str	r0, [r1, #2952]	; 0xb88
   1a42c:	ldr	r0, [sp, #8]
   1a430:	ldr	r0, [r0]
   1a434:	ldr	r0, [r0, #2948]	; 0xb84
   1a438:	ldr	r1, [sp, #8]
   1a43c:	str	r0, [r1]
   1a440:	b	1a574 <flatcc_emitter_copy_buffer@@Base+0x2f8>
   1a444:	movw	r0, #2956	; 0xb8c
   1a448:	bl	1241c <malloc@plt>
   1a44c:	str	r0, [sp, #4]
   1a450:	movw	lr, #0
   1a454:	cmp	r0, lr
   1a458:	bne	1a468 <flatcc_emitter_copy_buffer@@Base+0x1ec>
   1a45c:	mvn	r0, #0
   1a460:	str	r0, [fp, #-4]
   1a464:	b	1a5bc <flatcc_emitter_copy_buffer@@Base+0x340>
   1a468:	ldr	r0, [sp, #8]
   1a46c:	ldr	r1, [r0, #28]
   1a470:	add	r1, r1, #2944	; 0xb80
   1a474:	str	r1, [r0, #28]
   1a478:	ldr	r0, [sp, #8]
   1a47c:	ldr	r0, [r0]
   1a480:	movw	r1, #0
   1a484:	cmp	r0, r1
   1a488:	beq	1a4dc <flatcc_emitter_copy_buffer@@Base+0x260>
   1a48c:	ldr	r0, [sp, #8]
   1a490:	ldr	r0, [r0, #4]
   1a494:	ldr	r1, [sp, #4]
   1a498:	str	r0, [r1, #2948]	; 0xb84
   1a49c:	ldr	r0, [sp, #8]
   1a4a0:	ldr	r0, [r0]
   1a4a4:	ldr	r1, [sp, #4]
   1a4a8:	str	r0, [r1, #2944]	; 0xb80
   1a4ac:	ldr	r0, [sp, #4]
   1a4b0:	ldr	r1, [sp, #8]
   1a4b4:	ldr	r1, [r1]
   1a4b8:	str	r0, [r1, #2948]	; 0xb84
   1a4bc:	ldr	r0, [sp, #4]
   1a4c0:	ldr	r1, [sp, #8]
   1a4c4:	ldr	r1, [r1, #4]
   1a4c8:	str	r0, [r1, #2944]	; 0xb80
   1a4cc:	ldr	r0, [sp, #4]
   1a4d0:	ldr	r1, [sp, #8]
   1a4d4:	str	r0, [r1]
   1a4d8:	b	1a574 <flatcc_emitter_copy_buffer@@Base+0x2f8>
   1a4dc:	ldr	r0, [sp, #4]
   1a4e0:	ldr	r1, [sp, #8]
   1a4e4:	str	r0, [r1]
   1a4e8:	ldr	r0, [sp, #4]
   1a4ec:	ldr	r1, [sp, #8]
   1a4f0:	str	r0, [r1, #4]
   1a4f4:	ldr	r0, [sp, #4]
   1a4f8:	ldr	r1, [sp, #4]
   1a4fc:	str	r0, [r1, #2944]	; 0xb80
   1a500:	ldr	r0, [sp, #4]
   1a504:	ldr	r1, [sp, #4]
   1a508:	str	r0, [r1, #2948]	; 0xb84
   1a50c:	ldr	r0, [sp, #8]
   1a510:	ldr	r0, [r0]
   1a514:	add	r0, r0, #1472	; 0x5c0
   1a518:	ldr	r1, [sp, #8]
   1a51c:	str	r0, [r1, #8]
   1a520:	ldr	r0, [sp, #8]
   1a524:	ldr	r0, [r0, #8]
   1a528:	ldr	r1, [sp, #8]
   1a52c:	str	r0, [r1, #16]
   1a530:	ldr	r0, [sp, #8]
   1a534:	movw	r1, #1472	; 0x5c0
   1a538:	str	r1, [r0, #12]
   1a53c:	ldr	r0, [sp, #8]
   1a540:	ldr	r0, [r0, #12]
   1a544:	movw	r1, #2944	; 0xb80
   1a548:	sub	r0, r1, r0
   1a54c:	ldr	r1, [sp, #8]
   1a550:	str	r0, [r1, #20]
   1a554:	ldr	r0, [sp, #8]
   1a558:	ldr	r0, [r0, #12]
   1a55c:	movw	r1, #0
   1a560:	sub	r0, r1, r0
   1a564:	ldr	r2, [sp, #4]
   1a568:	str	r0, [r2, #2952]	; 0xb88
   1a56c:	str	r1, [fp, #-4]
   1a570:	b	1a5bc <flatcc_emitter_copy_buffer@@Base+0x340>
   1a574:	ldr	r0, [sp, #8]
   1a578:	ldr	r0, [r0]
   1a57c:	add	r0, r0, #2944	; 0xb80
   1a580:	ldr	r1, [sp, #8]
   1a584:	str	r0, [r1, #8]
   1a588:	ldr	r0, [sp, #8]
   1a58c:	movw	r1, #2944	; 0xb80
   1a590:	str	r1, [r0, #12]
   1a594:	ldr	r0, [sp, #8]
   1a598:	ldr	r0, [r0]
   1a59c:	ldr	r0, [r0, #2944]	; 0xb80
   1a5a0:	ldr	r0, [r0, #2952]	; 0xb88
   1a5a4:	sub	r0, r0, #2944	; 0xb80
   1a5a8:	ldr	r1, [sp, #8]
   1a5ac:	ldr	r1, [r1]
   1a5b0:	str	r0, [r1, #2952]	; 0xb88
   1a5b4:	movw	r0, #0
   1a5b8:	str	r0, [fp, #-4]
   1a5bc:	ldr	r0, [fp, #-4]
   1a5c0:	mov	sp, fp
   1a5c4:	pop	{fp, pc}
   1a5c8:	push	{fp, lr}
   1a5cc:	mov	fp, sp
   1a5d0:	sub	sp, sp, #16
   1a5d4:	str	r0, [sp, #8]
   1a5d8:	movw	r0, #0
   1a5dc:	str	r0, [sp, #4]
   1a5e0:	ldr	r1, [sp, #8]
   1a5e4:	ldr	r1, [r1, #4]
   1a5e8:	cmp	r1, r0
   1a5ec:	beq	1a624 <flatcc_emitter_copy_buffer@@Base+0x3a8>
   1a5f0:	ldr	r0, [sp, #8]
   1a5f4:	ldr	r0, [r0, #4]
   1a5f8:	ldr	r0, [r0, #2944]	; 0xb80
   1a5fc:	ldr	r1, [sp, #8]
   1a600:	ldr	r1, [r1]
   1a604:	cmp	r0, r1
   1a608:	beq	1a624 <flatcc_emitter_copy_buffer@@Base+0x3a8>
   1a60c:	ldr	r0, [sp, #8]
   1a610:	ldr	r0, [r0, #4]
   1a614:	ldr	r0, [r0, #2944]	; 0xb80
   1a618:	ldr	r1, [sp, #8]
   1a61c:	str	r0, [r1, #4]
   1a620:	b	1a754 <flatcc_emitter_copy_buffer@@Base+0x4d8>
   1a624:	movw	r0, #2956	; 0xb8c
   1a628:	bl	1241c <malloc@plt>
   1a62c:	str	r0, [sp, #4]
   1a630:	movw	lr, #0
   1a634:	cmp	r0, lr
   1a638:	bne	1a648 <flatcc_emitter_copy_buffer@@Base+0x3cc>
   1a63c:	mvn	r0, #0
   1a640:	str	r0, [fp, #-4]
   1a644:	b	1a798 <flatcc_emitter_copy_buffer@@Base+0x51c>
   1a648:	ldr	r0, [sp, #8]
   1a64c:	ldr	r1, [r0, #28]
   1a650:	add	r1, r1, #2944	; 0xb80
   1a654:	str	r1, [r0, #28]
   1a658:	ldr	r0, [sp, #8]
   1a65c:	ldr	r0, [r0, #4]
   1a660:	movw	r1, #0
   1a664:	cmp	r0, r1
   1a668:	beq	1a6bc <flatcc_emitter_copy_buffer@@Base+0x440>
   1a66c:	ldr	r0, [sp, #8]
   1a670:	ldr	r0, [r0, #4]
   1a674:	ldr	r1, [sp, #4]
   1a678:	str	r0, [r1, #2948]	; 0xb84
   1a67c:	ldr	r0, [sp, #8]
   1a680:	ldr	r0, [r0]
   1a684:	ldr	r1, [sp, #4]
   1a688:	str	r0, [r1, #2944]	; 0xb80
   1a68c:	ldr	r0, [sp, #4]
   1a690:	ldr	r1, [sp, #8]
   1a694:	ldr	r1, [r1]
   1a698:	str	r0, [r1, #2948]	; 0xb84
   1a69c:	ldr	r0, [sp, #4]
   1a6a0:	ldr	r1, [sp, #8]
   1a6a4:	ldr	r1, [r1, #4]
   1a6a8:	str	r0, [r1, #2944]	; 0xb80
   1a6ac:	ldr	r0, [sp, #4]
   1a6b0:	ldr	r1, [sp, #8]
   1a6b4:	str	r0, [r1, #4]
   1a6b8:	b	1a754 <flatcc_emitter_copy_buffer@@Base+0x4d8>
   1a6bc:	ldr	r0, [sp, #4]
   1a6c0:	ldr	r1, [sp, #8]
   1a6c4:	str	r0, [r1]
   1a6c8:	ldr	r0, [sp, #4]
   1a6cc:	ldr	r1, [sp, #8]
   1a6d0:	str	r0, [r1, #4]
   1a6d4:	ldr	r0, [sp, #4]
   1a6d8:	ldr	r1, [sp, #4]
   1a6dc:	str	r0, [r1, #2944]	; 0xb80
   1a6e0:	ldr	r0, [sp, #4]
   1a6e4:	ldr	r1, [sp, #4]
   1a6e8:	str	r0, [r1, #2948]	; 0xb84
   1a6ec:	ldr	r0, [sp, #8]
   1a6f0:	ldr	r0, [r0]
   1a6f4:	add	r0, r0, #1472	; 0x5c0
   1a6f8:	ldr	r1, [sp, #8]
   1a6fc:	str	r0, [r1, #8]
   1a700:	ldr	r0, [sp, #8]
   1a704:	ldr	r0, [r0, #8]
   1a708:	ldr	r1, [sp, #8]
   1a70c:	str	r0, [r1, #16]
   1a710:	ldr	r0, [sp, #8]
   1a714:	movw	r1, #1472	; 0x5c0
   1a718:	str	r1, [r0, #12]
   1a71c:	ldr	r0, [sp, #8]
   1a720:	ldr	r0, [r0, #12]
   1a724:	movw	r1, #2944	; 0xb80
   1a728:	sub	r0, r1, r0
   1a72c:	ldr	r1, [sp, #8]
   1a730:	str	r0, [r1, #20]
   1a734:	ldr	r0, [sp, #8]
   1a738:	ldr	r0, [r0, #12]
   1a73c:	movw	r1, #0
   1a740:	sub	r0, r1, r0
   1a744:	ldr	r2, [sp, #4]
   1a748:	str	r0, [r2, #2952]	; 0xb88
   1a74c:	str	r1, [fp, #-4]
   1a750:	b	1a798 <flatcc_emitter_copy_buffer@@Base+0x51c>
   1a754:	ldr	r0, [sp, #8]
   1a758:	ldr	r0, [r0, #4]
   1a75c:	ldr	r1, [sp, #8]
   1a760:	str	r0, [r1, #16]
   1a764:	ldr	r0, [sp, #8]
   1a768:	movw	r1, #2944	; 0xb80
   1a76c:	str	r1, [r0, #20]
   1a770:	ldr	r0, [sp, #8]
   1a774:	ldr	r0, [r0, #4]
   1a778:	ldr	r0, [r0, #2948]	; 0xb84
   1a77c:	ldr	r0, [r0, #2952]	; 0xb88
   1a780:	add	r0, r0, #2944	; 0xb80
   1a784:	ldr	r1, [sp, #8]
   1a788:	ldr	r1, [r1, #4]
   1a78c:	str	r0, [r1, #2952]	; 0xb88
   1a790:	movw	r0, #0
   1a794:	str	r0, [fp, #-4]
   1a798:	ldr	r0, [fp, #-4]
   1a79c:	mov	sp, fp
   1a7a0:	pop	{fp, pc}

0001a7a4 <__libc_csu_init@@Base>:
   1a7a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a7a8:	mov	r7, r0
   1a7ac:	ldr	r6, [pc, #72]	; 1a7fc <__libc_csu_init@@Base+0x58>
   1a7b0:	ldr	r5, [pc, #72]	; 1a800 <__libc_csu_init@@Base+0x5c>
   1a7b4:	add	r6, pc, r6
   1a7b8:	add	r5, pc, r5
   1a7bc:	sub	r6, r6, r5
   1a7c0:	mov	r8, r1
   1a7c4:	mov	r9, r2
   1a7c8:	bl	12390 <strcmp@plt-0x20>
   1a7cc:	asrs	r6, r6, #2
   1a7d0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a7d4:	mov	r4, #0
   1a7d8:	add	r4, r4, #1
   1a7dc:	ldr	r3, [r5], #4
   1a7e0:	mov	r2, r9
   1a7e4:	mov	r1, r8
   1a7e8:	mov	r0, r7
   1a7ec:	blx	r3
   1a7f0:	cmp	r6, r4
   1a7f4:	bne	1a7d8 <__libc_csu_init@@Base+0x34>
   1a7f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a7fc:	andeq	r2, r1, r0, asr r7
   1a800:	andeq	r2, r1, r8, asr #14

0001a804 <__libc_csu_fini@@Base>:
   1a804:	bx	lr

Disassembly of section .fini:

0001a808 <.fini>:
   1a808:	push	{r3, lr}
   1a80c:	pop	{r3, pc}
