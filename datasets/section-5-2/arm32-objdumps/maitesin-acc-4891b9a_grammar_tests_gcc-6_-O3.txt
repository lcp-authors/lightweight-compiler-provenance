
../repos/maitesin-acc-4891b9a/bin/grammar_tests:     file format elf32-littlearm


Disassembly of section .init:

00011824 <.init>:
   11824:	push	{r3, lr}
   11828:	bl	12128 <_start@@Base+0x3c>
   1182c:	pop	{r3, pc}

Disassembly of section .plt:

00011830 <fdopen@plt-0x14>:
   11830:	push	{lr}		; (str lr, [sp, #-4]!)
   11834:	ldr	lr, [pc, #4]	; 11840 <fdopen@plt-0x4>
   11838:	add	lr, pc, lr
   1183c:	ldr	pc, [lr, #8]!
   11840:	andeq	r8, r1, r0, asr #15

00011844 <fdopen@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #24, 20	; 0x18000
   1184c:	ldr	pc, [ip, #1984]!	; 0x7c0

00011850 <raise@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #24, 20	; 0x18000
   11858:	ldr	pc, [ip, #1976]!	; 0x7b8

0001185c <setbuf@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #24, 20	; 0x18000
   11864:	ldr	pc, [ip, #1968]!	; 0x7b0

00011868 <printf@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #24, 20	; 0x18000
   11870:	ldr	pc, [ip, #1960]!	; 0x7a8

00011874 <fflush@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #24, 20	; 0x18000
   1187c:	ldr	pc, [ip, #1952]!	; 0x7a0

00011880 <free@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #24, 20	; 0x18000
   11888:	ldr	pc, [ip, #1944]!	; 0x798

0001188c <memcpy@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #24, 20	; 0x18000
   11894:	ldr	pc, [ip, #1936]!	; 0x790

00011898 <ftell@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #24, 20	; 0x18000
   118a0:	ldr	pc, [ip, #1928]!	; 0x788

000118a4 <fwrite@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #24, 20	; 0x18000
   118ac:	ldr	pc, [ip, #1920]!	; 0x780

000118b0 <strcpy@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #24, 20	; 0x18000
   118b8:	ldr	pc, [ip, #1912]!	; 0x778

000118bc <fread@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #24, 20	; 0x18000
   118c4:	ldr	pc, [ip, #1904]!	; 0x770

000118c8 <getenv@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #24, 20	; 0x18000
   118d0:	ldr	pc, [ip, #1896]!	; 0x768

000118d4 <puts@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #24, 20	; 0x18000
   118dc:	ldr	pc, [ip, #1888]!	; 0x760

000118e0 <malloc@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #24, 20	; 0x18000
   118e8:	ldr	pc, [ip, #1880]!	; 0x758

000118ec <__libc_start_main@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #24, 20	; 0x18000
   118f4:	ldr	pc, [ip, #1872]!	; 0x750

000118f8 <__fxstat@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #24, 20	; 0x18000
   11900:	ldr	pc, [ip, #1864]!	; 0x748

00011904 <__gmon_start__@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #24, 20	; 0x18000
   1190c:	ldr	pc, [ip, #1856]!	; 0x740

00011910 <open@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #24, 20	; 0x18000
   11918:	ldr	pc, [ip, #1848]!	; 0x738

0001191c <getpid@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #24, 20	; 0x18000
   11924:	ldr	pc, [ip, #1840]!	; 0x730

00011928 <exit@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #24, 20	; 0x18000
   11930:	ldr	pc, [ip, #1832]!	; 0x728

00011934 <strlen@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #24, 20	; 0x18000
   1193c:	ldr	pc, [ip, #1824]!	; 0x720

00011940 <fprintf@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #24, 20	; 0x18000
   11948:	ldr	pc, [ip, #1816]!	; 0x718

0001194c <__errno_location@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #24, 20	; 0x18000
   11954:	ldr	pc, [ip, #1808]!	; 0x710

00011958 <__cxa_atexit@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #24, 20	; 0x18000
   11960:	ldr	pc, [ip, #1800]!	; 0x708

00011964 <mkdir@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #24, 20	; 0x18000
   1196c:	ldr	pc, [ip, #1792]!	; 0x700

00011970 <fcntl@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #24, 20	; 0x18000
   11978:	ldr	pc, [ip, #1784]!	; 0x6f8

0001197c <memset@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #24, 20	; 0x18000
   11984:	ldr	pc, [ip, #1776]!	; 0x6f0

00011988 <access@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #24, 20	; 0x18000
   11990:	ldr	pc, [ip, #1768]!	; 0x6e8

00011994 <fclose@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #24, 20	; 0x18000
   1199c:	ldr	pc, [ip, #1760]!	; 0x6e0

000119a0 <strnlen@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #24, 20	; 0x18000
   119a8:	ldr	pc, [ip, #1752]!	; 0x6d8

000119ac <vfprintf@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #24, 20	; 0x18000
   119b4:	ldr	pc, [ip, #1744]!	; 0x6d0

000119b8 <atoi@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #24, 20	; 0x18000
   119c0:	ldr	pc, [ip, #1736]!	; 0x6c8

000119c4 <fseek@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #24, 20	; 0x18000
   119cc:	ldr	pc, [ip, #1728]!	; 0x6c0

000119d0 <strncmp@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #24, 20	; 0x18000
   119d8:	ldr	pc, [ip, #1720]!	; 0x6b8

000119dc <abort@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #24, 20	; 0x18000
   119e4:	ldr	pc, [ip, #1712]!	; 0x6b0

000119e8 <close@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #24, 20	; 0x18000
   119f0:	ldr	pc, [ip, #1704]!	; 0x6a8

000119f4 <__assert_fail@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #24, 20	; 0x18000
   119fc:	ldr	pc, [ip, #1696]!	; 0x6a0

Disassembly of section .text:

00011a00 <main@@Base>:
   11a00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a04:	mov	r1, #0
   11a08:	ldr	r4, [pc, #1620]	; 12064 <main@@Base+0x664>
   11a0c:	ldr	r5, [pc, #1620]	; 12068 <main@@Base+0x668>
   11a10:	add	r6, r4, #1504	; 0x5e0
   11a14:	sub	sp, sp, #12
   11a18:	ldrd	r2, [r6, #-8]
   11a1c:	ldr	r0, [r5]
   11a20:	adds	sl, r2, #1
   11a24:	adc	fp, r3, #0
   11a28:	strd	sl, [r6, #-8]
   11a2c:	bl	1185c <setbuf@plt>
   11a30:	ldrd	sl, [r6]
   11a34:	ldr	r3, [r5]
   11a38:	mov	r2, #14
   11a3c:	adds	r8, sl, #1
   11a40:	adc	r9, fp, #0
   11a44:	mov	sl, r8
   11a48:	mov	fp, r9
   11a4c:	mov	r1, #1
   11a50:	ldr	r0, [pc, #1556]	; 1206c <main@@Base+0x66c>
   11a54:	strd	sl, [r6]
   11a58:	bl	118a4 <fwrite@plt>
   11a5c:	ldrd	sl, [r6, #8]
   11a60:	ldr	r3, [r5]
   11a64:	mov	r2, #14
   11a68:	adds	r0, sl, #1
   11a6c:	adc	r1, fp, #0
   11a70:	mov	sl, r0
   11a74:	mov	fp, r1
   11a78:	ldr	r0, [pc, #1520]	; 12070 <main@@Base+0x670>
   11a7c:	mov	r1, #1
   11a80:	strd	sl, [r6, #8]
   11a84:	bl	118a4 <fwrite@plt>
   11a88:	ldrd	sl, [r6, #16]
   11a8c:	ldr	r3, [r5]
   11a90:	mov	r2, #15
   11a94:	adds	r0, sl, #1
   11a98:	adc	r1, fp, #0
   11a9c:	mov	sl, r0
   11aa0:	mov	fp, r1
   11aa4:	ldr	r0, [pc, #1480]	; 12074 <main@@Base+0x674>
   11aa8:	mov	r1, #1
   11aac:	strd	sl, [r6, #16]
   11ab0:	bl	118a4 <fwrite@plt>
   11ab4:	ldrd	r2, [r6, #24]
   11ab8:	mov	r0, #0
   11abc:	ldr	r9, [pc, #1460]	; 12078 <main@@Base+0x678>
   11ac0:	adds	sl, r2, #1
   11ac4:	adc	fp, r3, #0
   11ac8:	ldr	r5, [pc, #1452]	; 1207c <main@@Base+0x67c>
   11acc:	strd	sl, [r6, #24]
   11ad0:	bl	11874 <fflush@plt>
   11ad4:	ldrd	sl, [r6, #32]
   11ad8:	ldr	r1, [pc, #1440]	; 12080 <main@@Base+0x680>
   11adc:	mov	r0, r9
   11ae0:	adds	r2, sl, #1
   11ae4:	adc	r3, fp, #0
   11ae8:	mov	fp, r3
   11aec:	mov	sl, r2
   11af0:	ldr	r2, [pc, #1420]	; 12084 <main@@Base+0x684>
   11af4:	strd	sl, [r6, #32]
   11af8:	bl	11868 <printf@plt>
   11afc:	ldrd	r0, [r6, #40]	; 0x28
   11b00:	add	r3, r4, #1776	; 0x6f0
   11b04:	str	r3, [sp, #4]
   11b08:	adds	r2, r0, #1
   11b0c:	adc	r3, r1, #0
   11b10:	add	r8, r4, #1792	; 0x700
   11b14:	strd	r2, [r6, #40]	; 0x28
   11b18:	bl	124b4 <setup@@Base>
   11b1c:	ldrd	r0, [r6, #48]	; 0x30
   11b20:	adds	r2, r0, #1
   11b24:	adc	r3, r1, #0
   11b28:	strd	r2, [r6, #48]	; 0x30
   11b2c:	bl	12510 <no_int_as_first_stuff@@Base>
   11b30:	ldrd	sl, [r6, #56]	; 0x38
   11b34:	mov	r0, r5
   11b38:	adds	r2, sl, #1
   11b3c:	adc	r3, fp, #0
   11b40:	strd	r2, [r6, #56]	; 0x38
   11b44:	bl	118d4 <puts@plt>
   11b48:	ldrd	sl, [r6, #64]	; 0x40
   11b4c:	ldr	r1, [pc, #1324]	; 12080 <main@@Base+0x680>
   11b50:	mov	r0, r9
   11b54:	adds	r2, sl, #1
   11b58:	adc	r3, fp, #0
   11b5c:	strd	r2, [r6, #64]	; 0x40
   11b60:	ldr	r2, [pc, #1312]	; 12088 <main@@Base+0x688>
   11b64:	bl	11868 <printf@plt>
   11b68:	ldrd	r0, [r6, #72]	; 0x48
   11b6c:	adds	r2, r0, #1
   11b70:	adc	r3, r1, #0
   11b74:	strd	r2, [r6, #72]	; 0x48
   11b78:	bl	124b4 <setup@@Base>
   11b7c:	ldrd	r0, [r6, #80]	; 0x50
   11b80:	adds	r2, r0, #1
   11b84:	adc	r3, r1, #0
   11b88:	strd	r2, [r6, #80]	; 0x50
   11b8c:	bl	12604 <int_but_not_followed_by_function@@Base>
   11b90:	ldrd	sl, [r6, #88]	; 0x58
   11b94:	mov	r0, r5
   11b98:	adds	r2, sl, #1
   11b9c:	adc	r3, fp, #0
   11ba0:	strd	r2, [r6, #88]	; 0x58
   11ba4:	bl	118d4 <puts@plt>
   11ba8:	ldrd	sl, [r6, #96]	; 0x60
   11bac:	ldr	r1, [pc, #1228]	; 12080 <main@@Base+0x680>
   11bb0:	mov	r0, r9
   11bb4:	adds	r2, sl, #1
   11bb8:	adc	r3, fp, #0
   11bbc:	strd	r2, [r6, #96]	; 0x60
   11bc0:	ldr	r2, [pc, #1220]	; 1208c <main@@Base+0x68c>
   11bc4:	bl	11868 <printf@plt>
   11bc8:	ldrd	r0, [r6, #104]	; 0x68
   11bcc:	adds	r2, r0, #1
   11bd0:	adc	r3, r1, #0
   11bd4:	strd	r2, [r6, #104]	; 0x68
   11bd8:	bl	124b4 <setup@@Base>
   11bdc:	ldrd	r0, [r6, #112]	; 0x70
   11be0:	adds	r2, r0, #1
   11be4:	adc	r3, r1, #0
   11be8:	strd	r2, [r6, #112]	; 0x70
   11bec:	bl	12e04 <boolean_unary_operator_is_read_properly@@Base>
   11bf0:	ldrd	sl, [r6, #120]	; 0x78
   11bf4:	mov	r0, r5
   11bf8:	adds	r2, sl, #1
   11bfc:	adc	r3, fp, #0
   11c00:	strd	r2, [r6, #120]	; 0x78
   11c04:	bl	118d4 <puts@plt>
   11c08:	ldrd	sl, [r6, #128]	; 0x80
   11c0c:	ldr	r1, [pc, #1132]	; 12080 <main@@Base+0x680>
   11c10:	mov	r0, r9
   11c14:	adds	r2, sl, #1
   11c18:	adc	r3, fp, #0
   11c1c:	strd	r2, [r6, #128]	; 0x80
   11c20:	ldr	r2, [pc, #1128]	; 12090 <main@@Base+0x690>
   11c24:	bl	11868 <printf@plt>
   11c28:	ldrd	r0, [r6, #136]	; 0x88
   11c2c:	adds	r2, r0, #1
   11c30:	adc	r3, r1, #0
   11c34:	strd	r2, [r6, #136]	; 0x88
   11c38:	bl	124b4 <setup@@Base>
   11c3c:	ldrd	r0, [r6, #144]	; 0x90
   11c40:	adds	r2, r0, #1
   11c44:	adc	r3, r1, #0
   11c48:	strd	r2, [r6, #144]	; 0x90
   11c4c:	bl	12be4 <boolean_binary_operator_is_read_properly@@Base>
   11c50:	ldrd	sl, [r6, #152]	; 0x98
   11c54:	mov	r0, r5
   11c58:	adds	r2, sl, #1
   11c5c:	adc	r3, fp, #0
   11c60:	strd	r2, [r6, #152]	; 0x98
   11c64:	bl	118d4 <puts@plt>
   11c68:	ldrd	sl, [r6, #160]	; 0xa0
   11c6c:	ldr	r1, [pc, #1036]	; 12080 <main@@Base+0x680>
   11c70:	mov	r0, r9
   11c74:	adds	r2, sl, #1
   11c78:	adc	r3, fp, #0
   11c7c:	strd	r2, [r6, #160]	; 0xa0
   11c80:	ldr	r2, [pc, #1036]	; 12094 <main@@Base+0x694>
   11c84:	bl	11868 <printf@plt>
   11c88:	ldrd	r0, [r6, #168]	; 0xa8
   11c8c:	adds	r2, r0, #1
   11c90:	adc	r3, r1, #0
   11c94:	strd	r2, [r6, #168]	; 0xa8
   11c98:	bl	124b4 <setup@@Base>
   11c9c:	ldrd	r0, [r6, #176]	; 0xb0
   11ca0:	adds	r2, r0, #1
   11ca4:	adc	r3, r1, #0
   11ca8:	strd	r2, [r6, #176]	; 0xb0
   11cac:	bl	1272c <boolean_expression_is_read_properly@@Base>
   11cb0:	ldrd	sl, [r6, #184]	; 0xb8
   11cb4:	mov	r0, r5
   11cb8:	adds	r2, sl, #1
   11cbc:	adc	r3, fp, #0
   11cc0:	strd	r2, [r6, #184]	; 0xb8
   11cc4:	bl	118d4 <puts@plt>
   11cc8:	ldrd	sl, [r6, #192]	; 0xc0
   11ccc:	ldr	r1, [pc, #940]	; 12080 <main@@Base+0x680>
   11cd0:	mov	r0, r9
   11cd4:	adds	r2, sl, #1
   11cd8:	adc	r3, fp, #0
   11cdc:	strd	r2, [r6, #192]	; 0xc0
   11ce0:	ldr	r2, [pc, #944]	; 12098 <main@@Base+0x698>
   11ce4:	bl	11868 <printf@plt>
   11ce8:	ldrd	r0, [r6, #200]	; 0xc8
   11cec:	adds	r2, r0, #1
   11cf0:	adc	r3, r1, #0
   11cf4:	strd	r2, [r6, #200]	; 0xc8
   11cf8:	bl	124b4 <setup@@Base>
   11cfc:	ldrd	r0, [r6, #208]	; 0xd0
   11d00:	adds	r2, r0, #1
   11d04:	adc	r3, r1, #0
   11d08:	strd	r2, [r6, #208]	; 0xd0
   11d0c:	bl	1293c <boolean_expression_complex@@Base>
   11d10:	ldrd	sl, [r6, #216]	; 0xd8
   11d14:	mov	r0, r5
   11d18:	adds	r2, sl, #1
   11d1c:	adc	r3, fp, #0
   11d20:	strd	r2, [r6, #216]	; 0xd8
   11d24:	bl	118d4 <puts@plt>
   11d28:	ldrd	sl, [r6, #224]	; 0xe0
   11d2c:	ldr	r1, [pc, #844]	; 12080 <main@@Base+0x680>
   11d30:	mov	r0, r9
   11d34:	adds	r2, sl, #1
   11d38:	adc	r3, fp, #0
   11d3c:	strd	r2, [r6, #224]	; 0xe0
   11d40:	ldr	r2, [pc, #852]	; 1209c <main@@Base+0x69c>
   11d44:	bl	11868 <printf@plt>
   11d48:	ldrd	r0, [r6, #232]	; 0xe8
   11d4c:	adds	r2, r0, #1
   11d50:	adc	r3, r1, #0
   11d54:	strd	r2, [r6, #232]	; 0xe8
   11d58:	bl	124b4 <setup@@Base>
   11d5c:	ldrd	r0, [r6, #240]	; 0xf0
   11d60:	adds	r2, r0, #1
   11d64:	adc	r3, r1, #0
   11d68:	strd	r2, [r6, #240]	; 0xf0
   11d6c:	bl	12ff4 <if_statement_only@@Base>
   11d70:	ldrd	r2, [r6, #248]	; 0xf8
   11d74:	mov	r0, r5
   11d78:	adds	r2, r2, #1
   11d7c:	adc	r3, r3, #0
   11d80:	strd	r2, [r6, #248]	; 0xf8
   11d84:	bl	118d4 <puts@plt>
   11d88:	add	r2, r4, #1760	; 0x6e0
   11d8c:	ldr	r1, [pc, #748]	; 12080 <main@@Base+0x680>
   11d90:	ldrd	sl, [r2]
   11d94:	mov	r0, r9
   11d98:	adds	sl, sl, #1
   11d9c:	adc	fp, fp, #0
   11da0:	strd	sl, [r2]
   11da4:	ldr	r2, [pc, #756]	; 120a0 <main@@Base+0x6a0>
   11da8:	bl	11868 <printf@plt>
   11dac:	ldr	r3, [sp, #4]
   11db0:	add	sl, r4, #1824	; 0x720
   11db4:	add	fp, r4, #1856	; 0x740
   11db8:	ldrd	r0, [r3, #-8]
   11dbc:	adds	r6, r0, #1
   11dc0:	adc	r7, r1, #0
   11dc4:	mov	r0, r6
   11dc8:	mov	r1, r7
   11dcc:	strd	r0, [r3, #-8]
   11dd0:	bl	124b4 <setup@@Base>
   11dd4:	ldr	r3, [sp, #4]
   11dd8:	ldrd	r0, [r3]
   11ddc:	adds	r6, r0, #1
   11de0:	adc	r7, r1, #0
   11de4:	mov	r1, r7
   11de8:	mov	r0, r6
   11dec:	strd	r0, [r3]
   11df0:	bl	1326c <if_else_statements@@Base>
   11df4:	ldrd	r2, [r8, #-8]
   11df8:	mov	r0, r5
   11dfc:	adds	r6, r2, #1
   11e00:	adc	r7, r3, #0
   11e04:	mov	r2, r6
   11e08:	mov	r3, r7
   11e0c:	strd	r2, [r8, #-8]
   11e10:	bl	118d4 <puts@plt>
   11e14:	ldrd	r2, [r8]
   11e18:	ldr	r1, [pc, #608]	; 12080 <main@@Base+0x680>
   11e1c:	mov	r0, r9
   11e20:	adds	r6, r2, #1
   11e24:	adc	r7, r3, #0
   11e28:	mov	r3, r7
   11e2c:	mov	r2, r6
   11e30:	strd	r2, [r8]
   11e34:	ldr	r2, [pc, #616]	; 120a4 <main@@Base+0x6a4>
   11e38:	bl	11868 <printf@plt>
   11e3c:	add	r3, r4, #1808	; 0x710
   11e40:	add	r8, r4, #1840	; 0x730
   11e44:	ldrd	r2, [r3, #-8]
   11e48:	adds	r0, r2, #1
   11e4c:	adc	r1, r3, #0
   11e50:	add	r3, r4, #1808	; 0x710
   11e54:	strd	r0, [r3, #-8]
   11e58:	bl	124b4 <setup@@Base>
   11e5c:	add	r3, r4, #1808	; 0x710
   11e60:	ldrd	r2, [r3]
   11e64:	adds	r0, r2, #1
   11e68:	adc	r1, r3, #0
   11e6c:	add	r3, r4, #1808	; 0x710
   11e70:	strd	r0, [r3]
   11e74:	bl	139c4 <if_statement_inside_if_statement@@Base>
   11e78:	ldrd	r2, [sl, #-8]
   11e7c:	mov	r0, r5
   11e80:	adds	r6, r2, #1
   11e84:	adc	r7, r3, #0
   11e88:	mov	r2, r6
   11e8c:	mov	r3, r7
   11e90:	strd	r2, [sl, #-8]
   11e94:	bl	118d4 <puts@plt>
   11e98:	ldrd	r2, [sl]
   11e9c:	ldr	r1, [pc, #476]	; 12080 <main@@Base+0x680>
   11ea0:	mov	r0, r9
   11ea4:	adds	r6, r2, #1
   11ea8:	adc	r7, r3, #0
   11eac:	mov	r3, r7
   11eb0:	mov	r2, r6
   11eb4:	strd	r2, [sl]
   11eb8:	ldr	r2, [pc, #488]	; 120a8 <main@@Base+0x6a8>
   11ebc:	bl	11868 <printf@plt>
   11ec0:	ldrd	r2, [r8, #-8]
   11ec4:	add	sl, r4, #1872	; 0x750
   11ec8:	adds	r0, r2, #1
   11ecc:	adc	r1, r3, #0
   11ed0:	strd	r0, [r8, #-8]
   11ed4:	bl	124b4 <setup@@Base>
   11ed8:	ldrd	r0, [r8]
   11edc:	add	r3, r4, #1888	; 0x760
   11ee0:	str	r3, [sp, #4]
   11ee4:	adds	r2, r0, #1
   11ee8:	adc	r3, r1, #0
   11eec:	strd	r2, [r8]
   11ef0:	bl	13da4 <if_statement_inside_else_statement@@Base>
   11ef4:	ldrd	r2, [fp, #-8]
   11ef8:	mov	r0, r5
   11efc:	add	r8, r4, #1904	; 0x770
   11f00:	adds	r2, r2, #1
   11f04:	adc	r3, r3, #0
   11f08:	strd	r2, [fp, #-8]
   11f0c:	bl	118d4 <puts@plt>
   11f10:	ldrd	r2, [fp]
   11f14:	ldr	r1, [pc, #356]	; 12080 <main@@Base+0x680>
   11f18:	mov	r0, r9
   11f1c:	adds	r2, r2, #1
   11f20:	adc	r3, r3, #0
   11f24:	strd	r2, [fp]
   11f28:	ldr	r2, [pc, #380]	; 120ac <main@@Base+0x6ac>
   11f2c:	bl	11868 <printf@plt>
   11f30:	ldrd	r0, [sl, #-8]
   11f34:	adds	r2, r0, #1
   11f38:	adc	r3, r1, #0
   11f3c:	strd	r2, [sl, #-8]
   11f40:	bl	124b4 <setup@@Base>
   11f44:	ldrd	r0, [sl]
   11f48:	adds	r2, r0, #1
   11f4c:	adc	r3, r1, #0
   11f50:	strd	r2, [sl]
   11f54:	bl	137c4 <body_with_one_return@@Base>
   11f58:	ldr	r3, [sp, #4]
   11f5c:	mov	r0, r5
   11f60:	ldrd	sl, [r3, #-8]
   11f64:	adds	r6, sl, #1
   11f68:	adc	r7, fp, #0
   11f6c:	mov	sl, r6
   11f70:	mov	fp, r7
   11f74:	strd	sl, [r3, #-8]
   11f78:	bl	118d4 <puts@plt>
   11f7c:	ldr	r3, [sp, #4]
   11f80:	ldr	r1, [pc, #248]	; 12080 <main@@Base+0x680>
   11f84:	mov	r0, r9
   11f88:	ldrd	sl, [r3]
   11f8c:	ldr	r2, [pc, #284]	; 120b0 <main@@Base+0x6b0>
   11f90:	adds	r6, sl, #1
   11f94:	adc	r7, fp, #0
   11f98:	mov	sl, r6
   11f9c:	mov	fp, r7
   11fa0:	add	r7, r4, #1936	; 0x790
   11fa4:	strd	sl, [r3]
   11fa8:	bl	11868 <printf@plt>
   11fac:	ldrd	r2, [r8, #-8]
   11fb0:	adds	r0, r2, #1
   11fb4:	adc	r1, r3, #0
   11fb8:	strd	r0, [r8, #-8]
   11fbc:	bl	124b4 <setup@@Base>
   11fc0:	ldrd	r2, [r8]
   11fc4:	adds	r0, r2, #1
   11fc8:	adc	r1, r3, #0
   11fcc:	strd	r0, [r8]
   11fd0:	bl	13524 <body_with_two_returns@@Base>
   11fd4:	add	r3, r4, #1920	; 0x780
   11fd8:	mov	r0, r5
   11fdc:	ldrd	r2, [r3, #-8]
   11fe0:	adds	r8, r2, #1
   11fe4:	adc	r9, r3, #0
   11fe8:	add	r3, r4, #1920	; 0x780
   11fec:	strd	r8, [r3, #-8]
   11ff0:	bl	118d4 <puts@plt>
   11ff4:	add	r3, r4, #1920	; 0x780
   11ff8:	ldr	r0, [pc, #180]	; 120b4 <main@@Base+0x6b4>
   11ffc:	ldrd	r2, [r3]
   12000:	adds	r8, r2, #1
   12004:	adc	r9, r3, #0
   12008:	add	r3, r4, #1920	; 0x780
   1200c:	add	r4, r4, #1952	; 0x7a0
   12010:	strd	r8, [r3]
   12014:	bl	118d4 <puts@plt>
   12018:	ldrd	r2, [r7, #-8]
   1201c:	ldr	r0, [pc, #148]	; 120b8 <main@@Base+0x6b8>
   12020:	adds	r8, r2, #1
   12024:	adc	r9, r3, #0
   12028:	strd	r8, [r7, #-8]
   1202c:	bl	118d4 <puts@plt>
   12030:	ldrd	r2, [r7]
   12034:	ldr	r0, [pc, #48]	; 1206c <main@@Base+0x66c>
   12038:	adds	r8, r2, #1
   1203c:	adc	r9, r3, #0
   12040:	strd	r8, [r7]
   12044:	bl	118d4 <puts@plt>
   12048:	ldrd	r2, [r4, #-8]
   1204c:	mov	r0, #0
   12050:	adds	r6, r2, #1
   12054:	adc	r7, r3, #0
   12058:	strd	r6, [r4, #-8]
   1205c:	add	sp, sp, #12
   12060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12064:	muleq	r2, r8, r9
   12068:	andeq	sl, r2, ip, lsl #19
   1206c:	andeq	r9, r1, r0, asr r6
   12070:	andeq	r9, r1, r0, ror #12
   12074:	andeq	r9, r1, r0, ror r6
   12078:	andeq	r9, r1, r4, lsr #13
   1207c:			; <UNDEFINED> instruction: 0x000196b8
   12080:	muleq	r1, r8, r6
   12084:	andeq	r9, r1, r0, lsl #13
   12088:	andeq	r9, r1, r4, asr #13
   1208c:	andeq	r9, r1, r8, ror #13
   12090:	andeq	r9, r1, r0, lsl r7
   12094:	andeq	r9, r1, ip, lsr r7
   12098:	andeq	r9, r1, r0, ror #14
   1209c:	andeq	r9, r1, ip, ror r7
   120a0:	muleq	r1, r0, r7
   120a4:	andeq	r9, r1, r4, lsr #15
   120a8:	andeq	r9, r1, r8, asr #15
   120ac:	andeq	r9, r1, ip, ror #15
   120b0:	andeq	r9, r1, r4, lsl #16
   120b4:	andeq	r9, r1, ip, lsl r8
   120b8:	andeq	r9, r1, ip, lsr #16
   120bc:	ldr	r0, [pc]	; 120c4 <main@@Base+0x6c4>
   120c0:	b	18e74 <__gcov_sort_n_vals@@Base+0x458>
   120c4:	strheq	sl, [r2], -r8
   120c8:	ldr	r0, [pc]	; 120d0 <main@@Base+0x6d0>
   120cc:	b	18e74 <__gcov_sort_n_vals@@Base+0x458>
   120d0:	strdeq	sl, [r2], -r0
   120d4:	ldr	r0, [pc]	; 120dc <main@@Base+0x6dc>
   120d8:	b	18e74 <__gcov_sort_n_vals@@Base+0x458>
   120dc:	andeq	sl, r2, r8, lsl #12
   120e0:	ldr	r0, [pc]	; 120e8 <main@@Base+0x6e8>
   120e4:	b	18e74 <__gcov_sort_n_vals@@Base+0x458>
   120e8:	andeq	sl, r2, r8, lsl #16

000120ec <_start@@Base>:
   120ec:	mov	fp, #0
   120f0:	mov	lr, #0
   120f4:	pop	{r1}		; (ldr r1, [sp], #4)
   120f8:	mov	r2, sp
   120fc:	push	{r2}		; (str r2, [sp, #-4]!)
   12100:	push	{r0}		; (str r0, [sp, #-4]!)
   12104:	ldr	ip, [pc, #16]	; 1211c <_start@@Base+0x30>
   12108:	push	{ip}		; (str ip, [sp, #-4]!)
   1210c:	ldr	r0, [pc, #12]	; 12120 <_start@@Base+0x34>
   12110:	ldr	r3, [pc, #12]	; 12124 <_start@@Base+0x38>
   12114:	bl	118ec <__libc_start_main@plt>
   12118:	bl	119dc <abort@plt>
   1211c:	andeq	r9, r1, r0, lsl #4
   12120:	andeq	r1, r1, r0, lsl #20
   12124:	andeq	r9, r1, r0, lsr #3
   12128:	ldr	r3, [pc, #20]	; 12144 <_start@@Base+0x58>
   1212c:	ldr	r2, [pc, #20]	; 12148 <_start@@Base+0x5c>
   12130:	add	r3, pc, r3
   12134:	ldr	r2, [r3, r2]
   12138:	cmp	r2, #0
   1213c:	bxeq	lr
   12140:	b	11904 <__gmon_start__@plt>
   12144:	andeq	r7, r1, r8, asr #29
   12148:	andeq	r0, r0, r4, lsr #1
   1214c:	ldr	r3, [pc, #28]	; 12170 <_start@@Base+0x84>
   12150:	ldr	r0, [pc, #28]	; 12174 <_start@@Base+0x88>
   12154:	sub	r3, r3, r0
   12158:	cmp	r3, #6
   1215c:	bxls	lr
   12160:	ldr	r3, [pc, #16]	; 12178 <_start@@Base+0x8c>
   12164:	cmp	r3, #0
   12168:	bxeq	lr
   1216c:	bx	r3
   12170:	andeq	sl, r2, r7, lsl #19
   12174:	andeq	sl, r2, r4, lsl #19
   12178:	andeq	r0, r0, r0
   1217c:	ldr	r1, [pc, #36]	; 121a8 <_start@@Base+0xbc>
   12180:	ldr	r0, [pc, #36]	; 121ac <_start@@Base+0xc0>
   12184:	sub	r1, r1, r0
   12188:	asr	r1, r1, #2
   1218c:	add	r1, r1, r1, lsr #31
   12190:	asrs	r1, r1, #1
   12194:	bxeq	lr
   12198:	ldr	r3, [pc, #16]	; 121b0 <_start@@Base+0xc4>
   1219c:	cmp	r3, #0
   121a0:	bxeq	lr
   121a4:	bx	r3
   121a8:	andeq	sl, r2, r4, lsl #19
   121ac:	andeq	sl, r2, r4, lsl #19
   121b0:	andeq	r0, r0, r0
   121b4:	push	{r4, lr}
   121b8:	ldr	r4, [pc, #24]	; 121d8 <_start@@Base+0xec>
   121bc:	ldrb	r3, [r4]
   121c0:	cmp	r3, #0
   121c4:	popne	{r4, pc}
   121c8:	bl	1214c <_start@@Base+0x60>
   121cc:	mov	r3, #1
   121d0:	strb	r3, [r4]
   121d4:	pop	{r4, pc}
   121d8:	muleq	r2, r0, r9
   121dc:	ldr	r0, [pc, #40]	; 1220c <_start@@Base+0x120>
   121e0:	ldr	r3, [r0]
   121e4:	cmp	r3, #0
   121e8:	bne	121f0 <_start@@Base+0x104>
   121ec:	b	1217c <_start@@Base+0x90>
   121f0:	ldr	r3, [pc, #24]	; 12210 <_start@@Base+0x124>
   121f4:	cmp	r3, #0
   121f8:	beq	121ec <_start@@Base+0x100>
   121fc:	push	{r4, lr}
   12200:	blx	r3
   12204:	pop	{r4, lr}
   12208:	b	1217c <_start@@Base+0x90>
   1220c:	andeq	r9, r2, r4, lsl pc
   12210:	andeq	r0, r0, r0

00012214 <next@@Base>:
   12214:	ldr	r3, [pc, #292]	; 12340 <next@@Base+0x12c>
   12218:	push	{r4, r5, r6, lr}
   1221c:	ldr	r2, [r3, #204]	; 0xcc
   12220:	str	r0, [r3]
   12224:	cmp	r2, #49	; 0x31
   12228:	bhi	122a8 <next@@Base+0x94>
   1222c:	add	r2, r2, #1
   12230:	ldr	r6, [pc, #268]	; 12344 <next@@Base+0x130>
   12234:	str	r0, [r3, r2, lsl #2]
   12238:	ldr	r2, [r3, #204]	; 0xcc
   1223c:	ldr	r1, [pc, #260]	; 12348 <next@@Base+0x134>
   12240:	add	r2, r2, #1
   12244:	str	r2, [r3, #204]	; 0xcc
   12248:	ldr	r2, [r1, #200]	; 0xc8
   1224c:	cmp	r2, #49	; 0x31
   12250:	bhi	12274 <next@@Base+0x60>
   12254:	ldrd	r4, [r6, #8]
   12258:	ldr	ip, [pc, #236]	; 1234c <next@@Base+0x138>
   1225c:	adds	r4, r4, #1
   12260:	adc	r5, r5, #0
   12264:	str	ip, [r1, r2, lsl #2]
   12268:	add	r2, r2, #1
   1226c:	strd	r4, [r6, #8]
   12270:	str	r2, [r1, #200]	; 0xc8
   12274:	ldr	r1, [r3, #232]	; 0xe8
   12278:	cmp	r1, #0
   1227c:	beq	122cc <next@@Base+0xb8>
   12280:	ldrd	r2, [r6, #16]
   12284:	adds	r2, r2, #1
   12288:	adc	r3, r3, #0
   1228c:	strd	r2, [r6, #16]
   12290:	blx	r1
   12294:	ldrd	r2, [r6, #24]
   12298:	adds	r2, r2, #1
   1229c:	adc	r3, r3, #0
   122a0:	strd	r2, [r6, #24]
   122a4:	pop	{r4, r5, r6, pc}
   122a8:	ldr	r6, [pc, #148]	; 12344 <next@@Base+0x130>
   122ac:	ldr	r1, [r3, #212]	; 0xd4
   122b0:	ldrd	r4, [r6]
   122b4:	add	r1, r1, #1
   122b8:	str	r1, [r3, #212]	; 0xd4
   122bc:	adds	r4, r4, #1
   122c0:	adc	r5, r5, #0
   122c4:	strd	r4, [r6]
   122c8:	b	1223c <next@@Base+0x28>
   122cc:	ldr	r2, [r3, #220]	; 0xdc
   122d0:	cmp	r2, #0
   122d4:	beq	12308 <next@@Base+0xf4>
   122d8:	ldr	ip, [r3, #224]	; 0xe0
   122dc:	cmp	r2, ip
   122e0:	ble	12320 <next@@Base+0x10c>
   122e4:	ldrd	r4, [r6, #32]
   122e8:	ldr	lr, [r3, #228]	; 0xe4
   122ec:	add	r2, ip, #1
   122f0:	adds	r4, r4, #1
   122f4:	adc	r5, r5, #0
   122f8:	ldr	r0, [lr, ip, lsl #2]
   122fc:	strd	r4, [r6, #32]
   12300:	str	r2, [r3, #224]	; 0xe0
   12304:	pop	{r4, r5, r6, pc}
   12308:	ldrd	r4, [r6, #48]	; 0x30
   1230c:	ldr	r0, [r3, #216]	; 0xd8
   12310:	adds	r4, r4, #1
   12314:	adc	r5, r5, #0
   12318:	strd	r4, [r6, #48]	; 0x30
   1231c:	pop	{r4, r5, r6, pc}
   12320:	ldrd	r4, [r6, #40]	; 0x28
   12324:	ldr	r3, [r3, #228]	; 0xe4
   12328:	sub	r2, r2, #-1073741823	; 0xc0000001
   1232c:	adds	r4, r4, #1
   12330:	adc	r5, r5, #0
   12334:	ldr	r0, [r3, r2, lsl #2]
   12338:	strd	r4, [r6, #40]	; 0x28
   1233c:	pop	{r4, r5, r6, pc}
   12340:	strdeq	fp, [r2], -r0
   12344:	muleq	r2, r8, r9
   12348:	ldrdeq	fp, [r2], -ip
   1234c:	andeq	r2, r1, r4, lsl r2

00012350 <push_back@@Base>:
   12350:	ldr	r3, [pc, #204]	; 12424 <push_back@@Base+0xd4>
   12354:	push	{r4, r5, r6, r7, r8, lr}
   12358:	ldr	r2, [r3, #408]	; 0x198
   1235c:	str	r0, [r3]
   12360:	cmp	r2, #49	; 0x31
   12364:	ldr	r4, [pc, #188]	; 12428 <push_back@@Base+0xd8>
   12368:	str	r1, [r3, #204]	; 0xcc
   1236c:	bhi	12404 <push_back@@Base+0xb4>
   12370:	add	r2, r2, #1
   12374:	ldrd	r6, [r4, #56]	; 0x38
   12378:	str	r0, [r3, r2, lsl #2]
   1237c:	ldr	r2, [r3, #408]	; 0x198
   12380:	adds	r6, r6, #1
   12384:	add	r2, r2, #52	; 0x34
   12388:	adc	r7, r7, #0
   1238c:	str	r1, [r3, r2, lsl #2]
   12390:	ldr	r2, [r3, #408]	; 0x198
   12394:	strd	r6, [r4, #56]	; 0x38
   12398:	ldr	ip, [pc, #140]	; 1242c <push_back@@Base+0xdc>
   1239c:	add	r2, r2, #1
   123a0:	str	r2, [r3, #408]	; 0x198
   123a4:	ldr	r2, [ip, #200]	; 0xc8
   123a8:	cmp	r2, #49	; 0x31
   123ac:	bhi	123d0 <push_back@@Base+0x80>
   123b0:	ldrd	r6, [r4, #72]	; 0x48
   123b4:	ldr	lr, [pc, #116]	; 12430 <push_back@@Base+0xe0>
   123b8:	adds	r6, r6, #1
   123bc:	adc	r7, r7, #0
   123c0:	str	lr, [ip, r2, lsl #2]
   123c4:	add	r2, r2, #1
   123c8:	strd	r6, [r4, #72]	; 0x48
   123cc:	str	r2, [ip, #200]	; 0xc8
   123d0:	ldr	r5, [r3, #420]	; 0x1a4
   123d4:	cmp	r5, #0
   123d8:	popeq	{r4, r5, r6, r7, r8, pc}
   123dc:	ldrd	r2, [r4, #80]	; 0x50
   123e0:	adds	r2, r2, #1
   123e4:	adc	r3, r3, #0
   123e8:	strd	r2, [r4, #80]	; 0x50
   123ec:	blx	r5
   123f0:	ldrd	r2, [r4, #88]	; 0x58
   123f4:	adds	r2, r2, #1
   123f8:	adc	r3, r3, #0
   123fc:	strd	r2, [r4, #88]	; 0x58
   12400:	pop	{r4, r5, r6, r7, r8, pc}
   12404:	ldrd	r6, [r4, #64]	; 0x40
   12408:	ldr	ip, [r3, #416]	; 0x1a0
   1240c:	adds	r6, r6, #1
   12410:	adc	r7, r7, #0
   12414:	add	ip, ip, #1
   12418:	str	ip, [r3, #416]	; 0x1a0
   1241c:	strd	r6, [r4, #64]	; 0x40
   12420:	b	12398 <push_back@@Base+0x48>
   12424:	andeq	fp, r2, r8, asr #14
   12428:	muleq	r2, r8, r9
   1242c:	ldrdeq	fp, [r2], -ip
   12430:	andeq	r2, r1, r0, asr r3

00012434 <next_reset@@Base>:
   12434:	ldr	r3, [pc, #48]	; 1246c <next_reset@@Base+0x38>
   12438:	push	{r4, r5, r6, lr}
   1243c:	mov	r2, #236	; 0xec
   12440:	ldrd	r4, [r3, #96]	; 0x60
   12444:	ldr	r6, [pc, #36]	; 12470 <next_reset@@Base+0x3c>
   12448:	mov	r1, #0
   1244c:	adds	r4, r4, #1
   12450:	adc	r5, r5, #0
   12454:	mov	r0, r6
   12458:	strd	r4, [r3, #96]	; 0x60
   1245c:	bl	1197c <memset@plt>
   12460:	mov	r3, #50	; 0x32
   12464:	str	r3, [r6, #208]	; 0xd0
   12468:	pop	{r4, r5, r6, pc}
   1246c:	muleq	r2, r8, r9
   12470:	strdeq	fp, [r2], -r0

00012474 <push_back_reset@@Base>:
   12474:	ldr	r3, [pc, #48]	; 124ac <push_back_reset@@Base+0x38>
   12478:	push	{r4, r5, r6, lr}
   1247c:	mov	r2, #424	; 0x1a8
   12480:	ldrd	r4, [r3, #104]	; 0x68
   12484:	ldr	r6, [pc, #36]	; 124b0 <push_back_reset@@Base+0x3c>
   12488:	mov	r1, #0
   1248c:	adds	r4, r4, #1
   12490:	adc	r5, r5, #0
   12494:	mov	r0, r6
   12498:	strd	r4, [r3, #104]	; 0x68
   1249c:	bl	1197c <memset@plt>
   124a0:	mov	r3, #50	; 0x32
   124a4:	str	r3, [r6, #412]	; 0x19c
   124a8:	pop	{r4, r5, r6, pc}
   124ac:	muleq	r2, r8, r9
   124b0:	andeq	fp, r2, r8, asr #14

000124b4 <setup@@Base>:
   124b4:	ldr	r3, [pc, #72]	; 12504 <setup@@Base+0x50>
   124b8:	push	{r4, r5, r6, r7, r8, lr}
   124bc:	mov	r2, #236	; 0xec
   124c0:	ldrd	r4, [r3, #112]	; 0x70
   124c4:	ldr	r7, [pc, #60]	; 12508 <setup@@Base+0x54>
   124c8:	ldr	r6, [pc, #60]	; 1250c <setup@@Base+0x58>
   124cc:	adds	r4, r4, #1
   124d0:	adc	r5, r5, #0
   124d4:	mov	r1, #0
   124d8:	mov	r0, r7
   124dc:	strd	r4, [r3, #112]	; 0x70
   124e0:	bl	1197c <memset@plt>
   124e4:	mov	r4, #50	; 0x32
   124e8:	mov	r0, r6
   124ec:	mov	r2, #424	; 0x1a8
   124f0:	mov	r1, #0
   124f4:	str	r4, [r7, #208]	; 0xd0
   124f8:	bl	1197c <memset@plt>
   124fc:	str	r4, [r6, #412]	; 0x19c
   12500:	pop	{r4, r5, r6, r7, r8, pc}
   12504:	muleq	r2, r8, r9
   12508:	strdeq	fp, [r2], -r0
   1250c:	andeq	fp, r2, r8, asr #14

00012510 <no_int_as_first_stuff@@Base>:
   12510:	push	{r4, r5, r6, r7, lr}
   12514:	sub	sp, sp, #20
   12518:	ldr	r4, [pc, #204]	; 125ec <no_int_as_first_stuff@@Base+0xdc>
   1251c:	add	r1, sp, #4
   12520:	mov	r0, sp
   12524:	ldrd	r2, [r4, #120]	; 0x78
   12528:	ldr	r5, [pc, #192]	; 125f0 <no_int_as_first_stuff@@Base+0xe0>
   1252c:	adds	r2, r2, #1
   12530:	adc	r3, r3, #0
   12534:	strd	r2, [r4, #120]	; 0x78
   12538:	bl	15ea0 <init_grammar@@Base>
   1253c:	ldrd	r2, [r4, #128]	; 0x80
   12540:	mov	r0, #4
   12544:	adds	r2, r2, #1
   12548:	adc	r3, r3, #0
   1254c:	strd	r2, [r4, #128]	; 0x80
   12550:	bl	118e0 <malloc@plt>
   12554:	mov	r6, r0
   12558:	bl	14240 <init_token_opar@@Base>
   1255c:	ldrd	r2, [r4, #136]	; 0x88
   12560:	mov	r0, sp
   12564:	str	r6, [r5, #216]	; 0xd8
   12568:	adds	r2, r2, #1
   1256c:	adc	r3, r3, #0
   12570:	strd	r2, [r4, #136]	; 0x88
   12574:	bl	16be0 <read_function_ast_node@@Base>
   12578:	ldr	r3, [r5, #204]	; 0xcc
   1257c:	cmp	r3, #1
   12580:	bne	125a4 <no_int_as_first_stuff@@Base+0x94>
   12584:	cmp	r0, #0
   12588:	bne	125c8 <no_int_as_first_stuff@@Base+0xb8>
   1258c:	ldrd	r2, [r4, #152]	; 0x98
   12590:	adds	r2, r2, #1
   12594:	adc	r3, r3, #0
   12598:	strd	r2, [r4, #152]	; 0x98
   1259c:	add	sp, sp, #20
   125a0:	pop	{r4, r5, r6, r7, pc}
   125a4:	ldrd	r6, [r4, #144]	; 0x90
   125a8:	ldr	r3, [pc, #68]	; 125f4 <no_int_as_first_stuff@@Base+0xe4>
   125ac:	mov	r2, #41	; 0x29
   125b0:	adds	r6, r6, #1
   125b4:	adc	r7, r7, #0
   125b8:	ldr	r1, [pc, #56]	; 125f8 <no_int_as_first_stuff@@Base+0xe8>
   125bc:	ldr	r0, [pc, #56]	; 125fc <no_int_as_first_stuff@@Base+0xec>
   125c0:	strd	r6, [r4, #144]	; 0x90
   125c4:	bl	119f4 <__assert_fail@plt>
   125c8:	ldrd	r6, [r4, #160]	; 0xa0
   125cc:	ldr	r3, [pc, #32]	; 125f4 <no_int_as_first_stuff@@Base+0xe4>
   125d0:	mov	r2, #42	; 0x2a
   125d4:	adds	r6, r6, #1
   125d8:	adc	r7, r7, #0
   125dc:	ldr	r1, [pc, #20]	; 125f8 <no_int_as_first_stuff@@Base+0xe8>
   125e0:	ldr	r0, [pc, #24]	; 12600 <no_int_as_first_stuff@@Base+0xf0>
   125e4:	strd	r6, [r4, #160]	; 0xa0
   125e8:	bl	119f4 <__assert_fail@plt>
   125ec:	muleq	r2, r8, r9
   125f0:	strdeq	fp, [r2], -r0
   125f4:	andeq	r9, r1, r8, lsr r2
   125f8:	andeq	r9, r1, r8, lsr #7
   125fc:	andeq	r9, r1, ip, ror #7
   12600:	andeq	r9, r1, r8, lsl #8

00012604 <int_but_not_followed_by_function@@Base>:
   12604:	push	{r4, r5, r6, r7, lr}
   12608:	sub	sp, sp, #20
   1260c:	ldr	r4, [pc, #256]	; 12714 <int_but_not_followed_by_function@@Base+0x110>
   12610:	add	r1, sp, #4
   12614:	mov	r0, sp
   12618:	ldrd	r2, [r4, #168]	; 0xa8
   1261c:	ldr	r5, [pc, #244]	; 12718 <int_but_not_followed_by_function@@Base+0x114>
   12620:	adds	r2, r2, #1
   12624:	adc	r3, r3, #0
   12628:	strd	r2, [r4, #168]	; 0xa8
   1262c:	bl	15ea0 <init_grammar@@Base>
   12630:	ldrd	r2, [r4, #176]	; 0xb0
   12634:	mov	r0, #8
   12638:	adds	r2, r2, #1
   1263c:	adc	r3, r3, #0
   12640:	strd	r2, [r4, #176]	; 0xb0
   12644:	bl	118e0 <malloc@plt>
   12648:	mov	r6, r0
   1264c:	mov	r0, #4
   12650:	bl	118e0 <malloc@plt>
   12654:	str	r0, [r6]
   12658:	bl	141c4 <init_token_int_type@@Base>
   1265c:	ldrd	r2, [r4, #184]	; 0xb8
   12660:	mov	r0, #4
   12664:	adds	r2, r2, #1
   12668:	adc	r3, r3, #0
   1266c:	strd	r2, [r4, #184]	; 0xb8
   12670:	bl	118e0 <malloc@plt>
   12674:	str	r0, [r6, #4]
   12678:	bl	14240 <init_token_opar@@Base>
   1267c:	ldrd	r2, [r4, #192]	; 0xc0
   12680:	mov	r1, #2
   12684:	mov	r0, sp
   12688:	adds	r2, r2, #1
   1268c:	adc	r3, r3, #0
   12690:	str	r6, [r5, #228]	; 0xe4
   12694:	strd	r2, [r4, #192]	; 0xc0
   12698:	str	r1, [r5, #220]	; 0xdc
   1269c:	bl	16be0 <read_function_ast_node@@Base>
   126a0:	ldr	r3, [r5, #204]	; 0xcc
   126a4:	cmp	r3, #2
   126a8:	bne	126cc <int_but_not_followed_by_function@@Base+0xc8>
   126ac:	cmp	r0, #0
   126b0:	bne	126f0 <int_but_not_followed_by_function@@Base+0xec>
   126b4:	ldrd	r2, [r4, #208]	; 0xd0
   126b8:	adds	r2, r2, #1
   126bc:	adc	r3, r3, #0
   126c0:	strd	r2, [r4, #208]	; 0xd0
   126c4:	add	sp, sp, #20
   126c8:	pop	{r4, r5, r6, r7, pc}
   126cc:	ldrd	r6, [r4, #200]	; 0xc8
   126d0:	ldr	r3, [pc, #68]	; 1271c <int_but_not_followed_by_function@@Base+0x118>
   126d4:	mov	r2, #67	; 0x43
   126d8:	adds	r6, r6, #1
   126dc:	adc	r7, r7, #0
   126e0:	ldr	r1, [pc, #56]	; 12720 <int_but_not_followed_by_function@@Base+0x11c>
   126e4:	ldr	r0, [pc, #56]	; 12724 <int_but_not_followed_by_function@@Base+0x120>
   126e8:	strd	r6, [r4, #200]	; 0xc8
   126ec:	bl	119f4 <__assert_fail@plt>
   126f0:	ldrd	r6, [r4, #216]	; 0xd8
   126f4:	ldr	r3, [pc, #32]	; 1271c <int_but_not_followed_by_function@@Base+0x118>
   126f8:	mov	r2, #68	; 0x44
   126fc:	adds	r6, r6, #1
   12700:	adc	r7, r7, #0
   12704:	ldr	r1, [pc, #20]	; 12720 <int_but_not_followed_by_function@@Base+0x11c>
   12708:	ldr	r0, [pc, #24]	; 12728 <int_but_not_followed_by_function@@Base+0x124>
   1270c:	strd	r6, [r4, #216]	; 0xd8
   12710:	bl	119f4 <__assert_fail@plt>
   12714:	muleq	r2, r8, r9
   12718:	strdeq	fp, [r2], -r0
   1271c:	andeq	r9, r1, r0, asr r2
   12720:	andeq	r9, r1, r8, lsr #7
   12724:	andeq	r9, r1, r4, lsl r4
   12728:	andeq	r9, r1, r8, lsl #8

0001272c <boolean_expression_is_read_properly@@Base>:
   1272c:	push	{r4, r5, r6, r7, r8, lr}
   12730:	mov	r0, #3
   12734:	ldr	r4, [pc, #480]	; 1291c <boolean_expression_is_read_properly@@Base+0x1f0>
   12738:	sub	sp, sp, #16
   1273c:	add	r6, r4, #272	; 0x110
   12740:	ldrd	r2, [r4, #224]	; 0xe0
   12744:	ldr	r8, [pc, #468]	; 12920 <boolean_expression_is_read_properly@@Base+0x1f4>
   12748:	adds	r2, r2, #1
   1274c:	adc	r3, r3, #0
   12750:	strd	r2, [r4, #224]	; 0xe0
   12754:	bl	118e0 <malloc@plt>
   12758:	mov	r2, #61	; 0x3d
   1275c:	mov	r3, #0
   12760:	mov	r1, #33	; 0x21
   12764:	mov	r7, r0
   12768:	strb	r1, [r0]
   1276c:	add	r1, sp, #4
   12770:	mov	r0, sp
   12774:	strb	r2, [r7, #1]
   12778:	strb	r3, [r7, #2]
   1277c:	bl	15ea0 <init_grammar@@Base>
   12780:	ldrd	r2, [r4, #232]	; 0xe8
   12784:	mov	r0, #20
   12788:	adds	r2, r2, #1
   1278c:	adc	r3, r3, #0
   12790:	strd	r2, [r4, #232]	; 0xe8
   12794:	bl	118e0 <malloc@plt>
   12798:	mov	r5, r0
   1279c:	mov	r0, #8
   127a0:	bl	118e0 <malloc@plt>
   127a4:	mov	r1, #2
   127a8:	str	r0, [r5]
   127ac:	bl	141e8 <init_token_int_value@@Base>
   127b0:	ldrd	r2, [r4, #240]	; 0xf0
   127b4:	mov	r0, #8
   127b8:	adds	r2, r2, #1
   127bc:	adc	r3, r3, #0
   127c0:	strd	r2, [r4, #240]	; 0xf0
   127c4:	bl	118e0 <malloc@plt>
   127c8:	mov	r1, #2
   127cc:	str	r0, [r5, #4]
   127d0:	bl	141e8 <init_token_int_value@@Base>
   127d4:	ldrd	r2, [r4, #248]	; 0xf8
   127d8:	mov	r0, #8
   127dc:	adds	r2, r2, #1
   127e0:	adc	r3, r3, #0
   127e4:	strd	r2, [r4, #248]	; 0xf8
   127e8:	bl	118e0 <malloc@plt>
   127ec:	mov	r1, r7
   127f0:	str	r0, [r5, #8]
   127f4:	bl	14384 <init_token_boolean_op@@Base>
   127f8:	add	r1, r4, #256	; 0x100
   127fc:	mov	r0, #8
   12800:	ldrd	r2, [r1]
   12804:	adds	r2, r2, #1
   12808:	adc	r3, r3, #0
   1280c:	strd	r2, [r1]
   12810:	bl	118e0 <malloc@plt>
   12814:	mov	r1, #1
   12818:	str	r0, [r5, #12]
   1281c:	bl	141e8 <init_token_int_value@@Base>
   12820:	ldrd	r2, [r6, #-8]
   12824:	mov	r0, #4
   12828:	adds	r2, r2, #1
   1282c:	adc	r3, r3, #0
   12830:	strd	r2, [r6, #-8]
   12834:	bl	118e0 <malloc@plt>
   12838:	str	r0, [r5, #16]
   1283c:	bl	14264 <init_token_cpar@@Base>
   12840:	ldrd	r2, [r6]
   12844:	mov	r1, #5
   12848:	mov	r0, sp
   1284c:	adds	r2, r2, #1
   12850:	adc	r3, r3, #0
   12854:	str	r5, [r8, #228]	; 0xe4
   12858:	strd	r2, [r6]
   1285c:	str	r1, [r8, #220]	; 0xdc
   12860:	bl	166ec <read_boolean_expression@@Base>
   12864:	ldr	r3, [r8, #204]	; 0xcc
   12868:	cmp	r3, #5
   1286c:	bne	128a8 <boolean_expression_is_read_properly@@Base+0x17c>
   12870:	ldr	r3, [pc, #172]	; 12924 <boolean_expression_is_read_properly@@Base+0x1f8>
   12874:	ldr	r3, [r3, #408]	; 0x198
   12878:	cmp	r3, #1
   1287c:	bne	128f4 <boolean_expression_is_read_properly@@Base+0x1c8>
   12880:	ldr	r3, [r0]
   12884:	add	r4, r4, #304	; 0x130
   12888:	cmp	r3, #5
   1288c:	bne	128d0 <boolean_expression_is_read_properly@@Base+0x1a4>
   12890:	ldrd	r2, [r4, #-8]
   12894:	adds	r2, r2, #1
   12898:	adc	r3, r3, #0
   1289c:	strd	r2, [r4, #-8]
   128a0:	add	sp, sp, #16
   128a4:	pop	{r4, r5, r6, r7, r8, pc}
   128a8:	add	r4, r4, #288	; 0x120
   128ac:	ldr	r3, [pc, #116]	; 12928 <boolean_expression_is_read_properly@@Base+0x1fc>
   128b0:	ldrd	r6, [r4, #-8]
   128b4:	mov	r2, #105	; 0x69
   128b8:	ldr	r1, [pc, #108]	; 1292c <boolean_expression_is_read_properly@@Base+0x200>
   128bc:	adds	r6, r6, #1
   128c0:	adc	r7, r7, #0
   128c4:	ldr	r0, [pc, #100]	; 12930 <boolean_expression_is_read_properly@@Base+0x204>
   128c8:	strd	r6, [r4, #-8]
   128cc:	bl	119f4 <__assert_fail@plt>
   128d0:	ldrd	r6, [r4]
   128d4:	ldr	r3, [pc, #76]	; 12928 <boolean_expression_is_read_properly@@Base+0x1fc>
   128d8:	mov	r2, #107	; 0x6b
   128dc:	adds	r6, r6, #1
   128e0:	adc	r7, r7, #0
   128e4:	ldr	r1, [pc, #64]	; 1292c <boolean_expression_is_read_properly@@Base+0x200>
   128e8:	ldr	r0, [pc, #68]	; 12934 <boolean_expression_is_read_properly@@Base+0x208>
   128ec:	strd	r6, [r4]
   128f0:	bl	119f4 <__assert_fail@plt>
   128f4:	add	r4, r4, #288	; 0x120
   128f8:	ldr	r3, [pc, #40]	; 12928 <boolean_expression_is_read_properly@@Base+0x1fc>
   128fc:	ldrd	r6, [r4]
   12900:	mov	r2, #106	; 0x6a
   12904:	ldr	r1, [pc, #32]	; 1292c <boolean_expression_is_read_properly@@Base+0x200>
   12908:	adds	r6, r6, #1
   1290c:	adc	r7, r7, #0
   12910:	ldr	r0, [pc, #32]	; 12938 <boolean_expression_is_read_properly@@Base+0x20c>
   12914:	strd	r6, [r4]
   12918:	bl	119f4 <__assert_fail@plt>
   1291c:	muleq	r2, r8, r9
   12920:	strdeq	fp, [r2], -r0
   12924:	andeq	fp, r2, r8, asr #14
   12928:	andeq	r9, r1, r4, ror r2
   1292c:	andeq	r9, r1, r8, lsr #7
   12930:	andeq	r9, r1, r0, lsr r4
   12934:	andeq	r9, r1, ip, ror #8
   12938:	andeq	r9, r1, ip, asr #8

0001293c <boolean_expression_complex@@Base>:
   1293c:	push	{r4, r5, r6, r7, r8, r9, lr}
   12940:	mov	r0, #3
   12944:	ldr	r4, [pc, #640]	; 12bcc <boolean_expression_complex@@Base+0x290>
   12948:	sub	sp, sp, #20
   1294c:	ldr	r9, [pc, #636]	; 12bd0 <boolean_expression_complex@@Base+0x294>
   12950:	ldrd	r2, [r4, #-8]
   12954:	adds	r2, r2, #1
   12958:	adc	r3, r3, #0
   1295c:	strd	r2, [r4, #-8]
   12960:	bl	118e0 <malloc@plt>
   12964:	mov	r7, r0
   12968:	mov	r0, #3
   1296c:	bl	118e0 <malloc@plt>
   12970:	mov	r6, r0
   12974:	mov	r0, #3
   12978:	bl	118e0 <malloc@plt>
   1297c:	mov	ip, #38	; 0x26
   12980:	mov	r2, #61	; 0x3d
   12984:	mov	r3, #0
   12988:	mov	r1, #60	; 0x3c
   1298c:	strb	ip, [r6]
   12990:	strb	ip, [r6, #1]
   12994:	strb	r1, [r7]
   12998:	strb	r2, [r7, #1]
   1299c:	add	r1, sp, #4
   129a0:	strb	r3, [r7, #2]
   129a4:	strb	r3, [r6, #2]
   129a8:	mov	r8, r0
   129ac:	strb	r2, [r0]
   129b0:	strb	r2, [r0, #1]
   129b4:	mov	r0, sp
   129b8:	strb	r3, [r8, #2]
   129bc:	bl	15ea0 <init_grammar@@Base>
   129c0:	ldrd	r2, [r4]
   129c4:	mov	r0, #40	; 0x28
   129c8:	adds	r2, r2, #1
   129cc:	adc	r3, r3, #0
   129d0:	strd	r2, [r4]
   129d4:	bl	118e0 <malloc@plt>
   129d8:	mov	r5, r0
   129dc:	mov	r0, #8
   129e0:	bl	118e0 <malloc@plt>
   129e4:	mov	r1, #2
   129e8:	str	r0, [r5]
   129ec:	bl	141e8 <init_token_int_value@@Base>
   129f0:	ldrd	r2, [r4, #8]
   129f4:	mov	r0, #8
   129f8:	adds	r2, r2, #1
   129fc:	adc	r3, r3, #0
   12a00:	strd	r2, [r4, #8]
   12a04:	bl	118e0 <malloc@plt>
   12a08:	mov	r1, #2
   12a0c:	str	r0, [r5, #4]
   12a10:	bl	141e8 <init_token_int_value@@Base>
   12a14:	ldrd	r2, [r4, #16]
   12a18:	mov	r0, #8
   12a1c:	adds	r2, r2, #1
   12a20:	adc	r3, r3, #0
   12a24:	strd	r2, [r4, #16]
   12a28:	bl	118e0 <malloc@plt>
   12a2c:	mov	r1, r7
   12a30:	str	r0, [r5, #8]
   12a34:	bl	14384 <init_token_boolean_op@@Base>
   12a38:	ldrd	r2, [r4, #24]
   12a3c:	mov	r0, #8
   12a40:	adds	r2, r2, #1
   12a44:	adc	r3, r3, #0
   12a48:	strd	r2, [r4, #24]
   12a4c:	bl	118e0 <malloc@plt>
   12a50:	mov	r1, #1
   12a54:	str	r0, [r5, #12]
   12a58:	bl	141e8 <init_token_int_value@@Base>
   12a5c:	ldrd	r2, [r4, #32]
   12a60:	mov	r0, #8
   12a64:	adds	r2, r2, #1
   12a68:	adc	r3, r3, #0
   12a6c:	strd	r2, [r4, #32]
   12a70:	bl	118e0 <malloc@plt>
   12a74:	mov	r1, r6
   12a78:	str	r0, [r5, #16]
   12a7c:	bl	14384 <init_token_boolean_op@@Base>
   12a80:	ldrd	r2, [r4, #40]	; 0x28
   12a84:	mov	r0, #8
   12a88:	adds	r2, r2, #1
   12a8c:	adc	r3, r3, #0
   12a90:	strd	r2, [r4, #40]	; 0x28
   12a94:	bl	118e0 <malloc@plt>
   12a98:	mov	r1, #4
   12a9c:	str	r0, [r5, #20]
   12aa0:	bl	141e8 <init_token_int_value@@Base>
   12aa4:	ldrd	r2, [r4, #48]	; 0x30
   12aa8:	mov	r0, #8
   12aac:	adds	r2, r2, #1
   12ab0:	adc	r3, r3, #0
   12ab4:	strd	r2, [r4, #48]	; 0x30
   12ab8:	bl	118e0 <malloc@plt>
   12abc:	mov	r1, #4
   12ac0:	str	r0, [r5, #24]
   12ac4:	bl	141e8 <init_token_int_value@@Base>
   12ac8:	ldrd	r2, [r4, #56]	; 0x38
   12acc:	mov	r0, #8
   12ad0:	adds	r2, r2, #1
   12ad4:	adc	r3, r3, #0
   12ad8:	strd	r2, [r4, #56]	; 0x38
   12adc:	bl	118e0 <malloc@plt>
   12ae0:	mov	r1, r8
   12ae4:	str	r0, [r5, #28]
   12ae8:	bl	14384 <init_token_boolean_op@@Base>
   12aec:	ldrd	r2, [r4, #64]	; 0x40
   12af0:	mov	r0, #8
   12af4:	adds	r2, r2, #1
   12af8:	adc	r3, r3, #0
   12afc:	strd	r2, [r4, #64]	; 0x40
   12b00:	bl	118e0 <malloc@plt>
   12b04:	mov	r1, #4
   12b08:	str	r0, [r5, #32]
   12b0c:	bl	141e8 <init_token_int_value@@Base>
   12b10:	ldrd	r2, [r4, #72]	; 0x48
   12b14:	mov	r0, #4
   12b18:	adds	r2, r2, #1
   12b1c:	adc	r3, r3, #0
   12b20:	strd	r2, [r4, #72]	; 0x48
   12b24:	bl	118e0 <malloc@plt>
   12b28:	str	r0, [r5, #36]	; 0x24
   12b2c:	bl	14264 <init_token_cpar@@Base>
   12b30:	ldrd	r2, [r4, #80]	; 0x50
   12b34:	mov	r1, #10
   12b38:	mov	r0, sp
   12b3c:	adds	r2, r2, #1
   12b40:	adc	r3, r3, #0
   12b44:	str	r5, [r9, #228]	; 0xe4
   12b48:	strd	r2, [r4, #80]	; 0x50
   12b4c:	str	r1, [r9, #220]	; 0xdc
   12b50:	bl	166ec <read_boolean_expression@@Base>
   12b54:	ldr	r3, [r9, #204]	; 0xcc
   12b58:	cmp	r3, #10
   12b5c:	bne	12b84 <boolean_expression_complex@@Base+0x248>
   12b60:	ldr	r3, [r0]
   12b64:	cmp	r3, #5
   12b68:	bne	12ba8 <boolean_expression_complex@@Base+0x26c>
   12b6c:	ldrd	r2, [r4, #96]	; 0x60
   12b70:	adds	r2, r2, #1
   12b74:	adc	r3, r3, #0
   12b78:	strd	r2, [r4, #96]	; 0x60
   12b7c:	add	sp, sp, #20
   12b80:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12b84:	ldrd	r6, [r4, #88]	; 0x58
   12b88:	ldr	r3, [pc, #68]	; 12bd4 <boolean_expression_complex@@Base+0x298>
   12b8c:	mov	r2, #166	; 0xa6
   12b90:	adds	r6, r6, #1
   12b94:	adc	r7, r7, #0
   12b98:	ldr	r1, [pc, #56]	; 12bd8 <boolean_expression_complex@@Base+0x29c>
   12b9c:	ldr	r0, [pc, #56]	; 12bdc <boolean_expression_complex@@Base+0x2a0>
   12ba0:	strd	r6, [r4, #88]	; 0x58
   12ba4:	bl	119f4 <__assert_fail@plt>
   12ba8:	ldrd	r6, [r4, #104]	; 0x68
   12bac:	ldr	r3, [pc, #32]	; 12bd4 <boolean_expression_complex@@Base+0x298>
   12bb0:	mov	r2, #167	; 0xa7
   12bb4:	adds	r6, r6, #1
   12bb8:	adc	r7, r7, #0
   12bbc:	ldr	r1, [pc, #20]	; 12bd8 <boolean_expression_complex@@Base+0x29c>
   12bc0:	ldr	r0, [pc, #24]	; 12be0 <boolean_expression_complex@@Base+0x2a4>
   12bc4:	strd	r6, [r4, #104]	; 0x68
   12bc8:	bl	119f4 <__assert_fail@plt>
   12bcc:	ldrdeq	sl, [r2], -r8
   12bd0:	strdeq	fp, [r2], -r0
   12bd4:	muleq	r1, r8, r2
   12bd8:	andeq	r9, r1, r8, lsr #7
   12bdc:	andeq	r9, r1, ip, lsl #9
   12be0:	andeq	r9, r1, ip, ror #8

00012be4 <boolean_binary_operator_is_read_properly@@Base>:
   12be4:	push	{r4, r5, r6, r7, lr}
   12be8:	mov	r0, #3
   12bec:	ldr	r4, [pc, #492]	; 12de0 <boolean_binary_operator_is_read_properly@@Base+0x1fc>
   12bf0:	sub	sp, sp, #20
   12bf4:	ldr	r6, [pc, #488]	; 12de4 <boolean_binary_operator_is_read_properly@@Base+0x200>
   12bf8:	ldrd	r2, [r4]
   12bfc:	adds	r2, r2, #1
   12c00:	adc	r3, r3, #0
   12c04:	strd	r2, [r4]
   12c08:	bl	118e0 <malloc@plt>
   12c0c:	mov	r2, #61	; 0x3d
   12c10:	mov	r3, #0
   12c14:	mov	r1, #33	; 0x21
   12c18:	mov	r7, r0
   12c1c:	mov	r0, sp
   12c20:	strb	r1, [r7]
   12c24:	strb	r2, [r7, #1]
   12c28:	add	r1, sp, #4
   12c2c:	strb	r3, [r7, #2]
   12c30:	bl	15ea0 <init_grammar@@Base>
   12c34:	ldrd	r2, [r4, #8]
   12c38:	mov	r0, #12
   12c3c:	adds	r2, r2, #1
   12c40:	adc	r3, r3, #0
   12c44:	strd	r2, [r4, #8]
   12c48:	bl	118e0 <malloc@plt>
   12c4c:	mov	r5, r0
   12c50:	mov	r0, #8
   12c54:	bl	118e0 <malloc@plt>
   12c58:	mov	r1, #2
   12c5c:	str	r0, [r5]
   12c60:	bl	141e8 <init_token_int_value@@Base>
   12c64:	ldrd	r2, [r4, #16]
   12c68:	mov	r0, #8
   12c6c:	adds	r2, r2, #1
   12c70:	adc	r3, r3, #0
   12c74:	strd	r2, [r4, #16]
   12c78:	bl	118e0 <malloc@plt>
   12c7c:	mov	r1, r7
   12c80:	str	r0, [r5, #4]
   12c84:	bl	14384 <init_token_boolean_op@@Base>
   12c88:	ldrd	r2, [r4, #24]
   12c8c:	mov	r0, #8
   12c90:	adds	r2, r2, #1
   12c94:	adc	r3, r3, #0
   12c98:	strd	r2, [r4, #24]
   12c9c:	bl	118e0 <malloc@plt>
   12ca0:	mov	r1, #1
   12ca4:	str	r0, [r5, #8]
   12ca8:	bl	141e8 <init_token_int_value@@Base>
   12cac:	ldrd	r2, [r4, #32]
   12cb0:	mov	r1, #3
   12cb4:	mov	r0, sp
   12cb8:	adds	r2, r2, #1
   12cbc:	adc	r3, r3, #0
   12cc0:	str	r5, [r6, #228]	; 0xe4
   12cc4:	strd	r2, [r4, #32]
   12cc8:	str	r1, [r6, #220]	; 0xdc
   12ccc:	bl	1616c <read_boolean_binary_expression@@Base>
   12cd0:	ldr	r3, [r6, #204]	; 0xcc
   12cd4:	cmp	r3, #3
   12cd8:	bne	12d2c <boolean_binary_operator_is_read_properly@@Base+0x148>
   12cdc:	ldr	r3, [r0]
   12ce0:	cmp	r3, #5
   12ce4:	bne	12dbc <boolean_binary_operator_is_read_properly@@Base+0x1d8>
   12ce8:	ldr	r3, [r0, #8]
   12cec:	ldr	r3, [r3]
   12cf0:	cmp	r3, #1
   12cf4:	bne	12d98 <boolean_binary_operator_is_read_properly@@Base+0x1b4>
   12cf8:	ldr	r3, [r0, #16]
   12cfc:	cmp	r3, #1
   12d00:	bne	12d74 <boolean_binary_operator_is_read_properly@@Base+0x190>
   12d04:	ldr	r3, [r0, #12]
   12d08:	ldr	r3, [r3]
   12d0c:	cmp	r3, #1
   12d10:	bne	12d50 <boolean_binary_operator_is_read_properly@@Base+0x16c>
   12d14:	ldrd	r2, [r4, #72]	; 0x48
   12d18:	adds	r2, r2, #1
   12d1c:	adc	r3, r3, #0
   12d20:	strd	r2, [r4, #72]	; 0x48
   12d24:	add	sp, sp, #20
   12d28:	pop	{r4, r5, r6, r7, pc}
   12d2c:	ldrd	r6, [r4, #40]	; 0x28
   12d30:	ldr	r3, [pc, #176]	; 12de8 <boolean_binary_operator_is_read_properly@@Base+0x204>
   12d34:	mov	r2, #200	; 0xc8
   12d38:	adds	r6, r6, #1
   12d3c:	adc	r7, r7, #0
   12d40:	ldr	r1, [pc, #164]	; 12dec <boolean_binary_operator_is_read_properly@@Base+0x208>
   12d44:	ldr	r0, [pc, #164]	; 12df0 <boolean_binary_operator_is_read_properly@@Base+0x20c>
   12d48:	strd	r6, [r4, #40]	; 0x28
   12d4c:	bl	119f4 <__assert_fail@plt>
   12d50:	ldrd	r6, [r4, #80]	; 0x50
   12d54:	ldr	r3, [pc, #140]	; 12de8 <boolean_binary_operator_is_read_properly@@Base+0x204>
   12d58:	mov	r2, #205	; 0xcd
   12d5c:	adds	r6, r6, #1
   12d60:	adc	r7, r7, #0
   12d64:	ldr	r1, [pc, #128]	; 12dec <boolean_binary_operator_is_read_properly@@Base+0x208>
   12d68:	ldr	r0, [pc, #132]	; 12df4 <boolean_binary_operator_is_read_properly@@Base+0x210>
   12d6c:	strd	r6, [r4, #80]	; 0x50
   12d70:	bl	119f4 <__assert_fail@plt>
   12d74:	ldrd	r6, [r4, #64]	; 0x40
   12d78:	ldr	r3, [pc, #104]	; 12de8 <boolean_binary_operator_is_read_properly@@Base+0x204>
   12d7c:	mov	r2, #204	; 0xcc
   12d80:	adds	r6, r6, #1
   12d84:	adc	r7, r7, #0
   12d88:	ldr	r1, [pc, #92]	; 12dec <boolean_binary_operator_is_read_properly@@Base+0x208>
   12d8c:	ldr	r0, [pc, #100]	; 12df8 <boolean_binary_operator_is_read_properly@@Base+0x214>
   12d90:	strd	r6, [r4, #64]	; 0x40
   12d94:	bl	119f4 <__assert_fail@plt>
   12d98:	ldrd	r6, [r4, #56]	; 0x38
   12d9c:	ldr	r3, [pc, #68]	; 12de8 <boolean_binary_operator_is_read_properly@@Base+0x204>
   12da0:	mov	r2, #203	; 0xcb
   12da4:	adds	r6, r6, #1
   12da8:	adc	r7, r7, #0
   12dac:	ldr	r1, [pc, #56]	; 12dec <boolean_binary_operator_is_read_properly@@Base+0x208>
   12db0:	ldr	r0, [pc, #68]	; 12dfc <boolean_binary_operator_is_read_properly@@Base+0x218>
   12db4:	strd	r6, [r4, #56]	; 0x38
   12db8:	bl	119f4 <__assert_fail@plt>
   12dbc:	ldrd	r6, [r4, #48]	; 0x30
   12dc0:	ldr	r3, [pc, #32]	; 12de8 <boolean_binary_operator_is_read_properly@@Base+0x204>
   12dc4:	mov	r2, #201	; 0xc9
   12dc8:	adds	r6, r6, #1
   12dcc:	adc	r7, r7, #0
   12dd0:	ldr	r1, [pc, #20]	; 12dec <boolean_binary_operator_is_read_properly@@Base+0x208>
   12dd4:	ldr	r0, [pc, #36]	; 12e00 <boolean_binary_operator_is_read_properly@@Base+0x21c>
   12dd8:	strd	r6, [r4, #48]	; 0x30
   12ddc:	bl	119f4 <__assert_fail@plt>
   12de0:	andeq	sl, r2, r8, asr #22
   12de4:	strdeq	fp, [r2], -r0
   12de8:			; <UNDEFINED> instruction: 0x000192b4
   12dec:	andeq	r9, r1, r8, lsr #7
   12df0:	andeq	r9, r1, r8, lsr #9
   12df4:	strdeq	r9, [r1], -ip
   12df8:	andeq	r9, r1, r0, ror #9
   12dfc:	andeq	r9, r1, r4, asr #9
   12e00:	andeq	r9, r1, ip, ror #8

00012e04 <boolean_unary_operator_is_read_properly@@Base>:
   12e04:	push	{r4, r5, r6, r7, lr}
   12e08:	mov	r0, #2
   12e0c:	ldr	r4, [pc, #444]	; 12fd0 <boolean_unary_operator_is_read_properly@@Base+0x1cc>
   12e10:	sub	sp, sp, #20
   12e14:	ldr	r5, [pc, #440]	; 12fd4 <boolean_unary_operator_is_read_properly@@Base+0x1d0>
   12e18:	ldrd	r2, [r4, #-8]
   12e1c:	adds	r2, r2, #1
   12e20:	adc	r3, r3, #0
   12e24:	strd	r2, [r4, #-8]
   12e28:	bl	118e0 <malloc@plt>
   12e2c:	mov	r2, #33	; 0x21
   12e30:	mov	r3, #0
   12e34:	add	r1, sp, #4
   12e38:	mov	r7, r0
   12e3c:	mov	r0, sp
   12e40:	strb	r2, [r7]
   12e44:	strb	r3, [r7, #1]
   12e48:	bl	15ea0 <init_grammar@@Base>
   12e4c:	ldrd	r2, [r4]
   12e50:	mov	r0, #8
   12e54:	adds	r2, r2, #1
   12e58:	adc	r3, r3, #0
   12e5c:	strd	r2, [r4]
   12e60:	bl	118e0 <malloc@plt>
   12e64:	mov	r6, r0
   12e68:	mov	r0, #8
   12e6c:	bl	118e0 <malloc@plt>
   12e70:	mov	r1, r7
   12e74:	str	r0, [r6]
   12e78:	bl	14384 <init_token_boolean_op@@Base>
   12e7c:	ldrd	r2, [r4, #8]
   12e80:	mov	r0, #8
   12e84:	adds	r2, r2, #1
   12e88:	adc	r3, r3, #0
   12e8c:	strd	r2, [r4, #8]
   12e90:	bl	118e0 <malloc@plt>
   12e94:	mov	r1, #1
   12e98:	str	r0, [r6, #4]
   12e9c:	bl	141e8 <init_token_int_value@@Base>
   12ea0:	ldrd	r2, [r4, #16]
   12ea4:	mov	r1, #2
   12ea8:	mov	r0, sp
   12eac:	adds	r2, r2, #1
   12eb0:	adc	r3, r3, #0
   12eb4:	str	r6, [r5, #228]	; 0xe4
   12eb8:	strd	r2, [r4, #16]
   12ebc:	str	r1, [r5, #220]	; 0xdc
   12ec0:	bl	15ff0 <read_boolean_unary_expression@@Base>
   12ec4:	ldr	r3, [r5, #204]	; 0xcc
   12ec8:	cmp	r3, #2
   12ecc:	bne	12f1c <boolean_unary_operator_is_read_properly@@Base+0x118>
   12ed0:	ldr	r3, [r0]
   12ed4:	cmp	r3, #5
   12ed8:	bne	12fac <boolean_unary_operator_is_read_properly@@Base+0x1a8>
   12edc:	ldr	r3, [r0, #8]
   12ee0:	ldr	r3, [r3]
   12ee4:	cmp	r3, #1
   12ee8:	bne	12f88 <boolean_unary_operator_is_read_properly@@Base+0x184>
   12eec:	ldr	r3, [r0, #16]
   12ef0:	cmp	r3, #8
   12ef4:	bne	12f64 <boolean_unary_operator_is_read_properly@@Base+0x160>
   12ef8:	ldr	r3, [r0, #12]
   12efc:	cmp	r3, #0
   12f00:	bne	12f40 <boolean_unary_operator_is_read_properly@@Base+0x13c>
   12f04:	ldrd	r2, [r4, #56]	; 0x38
   12f08:	adds	r2, r2, #1
   12f0c:	adc	r3, r3, #0
   12f10:	strd	r2, [r4, #56]	; 0x38
   12f14:	add	sp, sp, #20
   12f18:	pop	{r4, r5, r6, r7, pc}
   12f1c:	ldrd	r6, [r4, #24]
   12f20:	ldr	r3, [pc, #176]	; 12fd8 <boolean_unary_operator_is_read_properly@@Base+0x1d4>
   12f24:	mov	r2, #235	; 0xeb
   12f28:	adds	r6, r6, #1
   12f2c:	adc	r7, r7, #0
   12f30:	ldr	r1, [pc, #164]	; 12fdc <boolean_unary_operator_is_read_properly@@Base+0x1d8>
   12f34:	ldr	r0, [pc, #164]	; 12fe0 <boolean_unary_operator_is_read_properly@@Base+0x1dc>
   12f38:	strd	r6, [r4, #24]
   12f3c:	bl	119f4 <__assert_fail@plt>
   12f40:	ldrd	r6, [r4, #64]	; 0x40
   12f44:	ldr	r3, [pc, #140]	; 12fd8 <boolean_unary_operator_is_read_properly@@Base+0x1d4>
   12f48:	mov	r2, #240	; 0xf0
   12f4c:	adds	r6, r6, #1
   12f50:	adc	r7, r7, #0
   12f54:	ldr	r1, [pc, #128]	; 12fdc <boolean_unary_operator_is_read_properly@@Base+0x1d8>
   12f58:	ldr	r0, [pc, #132]	; 12fe4 <boolean_unary_operator_is_read_properly@@Base+0x1e0>
   12f5c:	strd	r6, [r4, #64]	; 0x40
   12f60:	bl	119f4 <__assert_fail@plt>
   12f64:	ldrd	r6, [r4, #48]	; 0x30
   12f68:	ldr	r3, [pc, #104]	; 12fd8 <boolean_unary_operator_is_read_properly@@Base+0x1d4>
   12f6c:	mov	r2, #239	; 0xef
   12f70:	adds	r6, r6, #1
   12f74:	adc	r7, r7, #0
   12f78:	ldr	r1, [pc, #92]	; 12fdc <boolean_unary_operator_is_read_properly@@Base+0x1d8>
   12f7c:	ldr	r0, [pc, #100]	; 12fe8 <boolean_unary_operator_is_read_properly@@Base+0x1e4>
   12f80:	strd	r6, [r4, #48]	; 0x30
   12f84:	bl	119f4 <__assert_fail@plt>
   12f88:	ldrd	r6, [r4, #40]	; 0x28
   12f8c:	ldr	r3, [pc, #68]	; 12fd8 <boolean_unary_operator_is_read_properly@@Base+0x1d4>
   12f90:	mov	r2, #238	; 0xee
   12f94:	adds	r6, r6, #1
   12f98:	adc	r7, r7, #0
   12f9c:	ldr	r1, [pc, #56]	; 12fdc <boolean_unary_operator_is_read_properly@@Base+0x1d8>
   12fa0:	ldr	r0, [pc, #68]	; 12fec <boolean_unary_operator_is_read_properly@@Base+0x1e8>
   12fa4:	strd	r6, [r4, #40]	; 0x28
   12fa8:	bl	119f4 <__assert_fail@plt>
   12fac:	ldrd	r6, [r4, #32]
   12fb0:	ldr	r3, [pc, #32]	; 12fd8 <boolean_unary_operator_is_read_properly@@Base+0x1d4>
   12fb4:	mov	r2, #236	; 0xec
   12fb8:	adds	r6, r6, #1
   12fbc:	adc	r7, r7, #0
   12fc0:	ldr	r1, [pc, #20]	; 12fdc <boolean_unary_operator_is_read_properly@@Base+0x1d8>
   12fc4:	ldr	r0, [pc, #36]	; 12ff0 <boolean_unary_operator_is_read_properly@@Base+0x1ec>
   12fc8:	strd	r6, [r4, #32]
   12fcc:	bl	119f4 <__assert_fail@plt>
   12fd0:	andeq	sl, r2, r8, lsr #23
   12fd4:	strdeq	fp, [r2], -r0
   12fd8:	andeq	r9, r1, r0, ror #5
   12fdc:	andeq	r9, r1, r8, lsr #7
   12fe0:	andeq	r9, r1, r4, lsl r4
   12fe4:	andeq	r9, r1, ip, lsr #10
   12fe8:	andeq	r9, r1, r8, lsl r5
   12fec:	andeq	r9, r1, r4, asr #9
   12ff0:	andeq	r9, r1, ip, ror #8

00012ff4 <if_statement_only@@Base>:
   12ff4:	push	{r4, r5, r6, r7, lr}
   12ff8:	sub	sp, sp, #20
   12ffc:	ldr	r4, [pc, #580]	; 13248 <if_statement_only@@Base+0x254>
   13000:	add	r1, sp, #4
   13004:	mov	r0, sp
   13008:	ldrd	r2, [r4, #-8]
   1300c:	ldr	r6, [pc, #568]	; 1324c <if_statement_only@@Base+0x258>
   13010:	adds	r2, r2, #1
   13014:	adc	r3, r3, #0
   13018:	strd	r2, [r4, #-8]
   1301c:	bl	15ea0 <init_grammar@@Base>
   13020:	ldrd	r2, [r4]
   13024:	mov	r0, #3
   13028:	adds	r2, r2, #1
   1302c:	adc	r3, r3, #0
   13030:	strd	r2, [r4]
   13034:	bl	118e0 <malloc@plt>
   13038:	mov	r1, #33	; 0x21
   1303c:	mov	r2, #61	; 0x3d
   13040:	mov	r3, #0
   13044:	mov	r7, r0
   13048:	mov	r0, #36	; 0x24
   1304c:	strb	r1, [r7]
   13050:	strb	r2, [r7, #1]
   13054:	strb	r3, [r7, #2]
   13058:	bl	118e0 <malloc@plt>
   1305c:	mov	r5, r0
   13060:	mov	r0, #4
   13064:	bl	118e0 <malloc@plt>
   13068:	str	r0, [r5]
   1306c:	bl	14240 <init_token_opar@@Base>
   13070:	ldrd	r2, [r4, #8]
   13074:	mov	r0, #8
   13078:	adds	r2, r2, #1
   1307c:	adc	r3, r3, #0
   13080:	strd	r2, [r4, #8]
   13084:	bl	118e0 <malloc@plt>
   13088:	mov	r1, #1
   1308c:	str	r0, [r5, #4]
   13090:	bl	141e8 <init_token_int_value@@Base>
   13094:	ldrd	r2, [r4, #16]
   13098:	mov	r0, #8
   1309c:	adds	r2, r2, #1
   130a0:	adc	r3, r3, #0
   130a4:	strd	r2, [r4, #16]
   130a8:	bl	118e0 <malloc@plt>
   130ac:	mov	r1, #1
   130b0:	str	r0, [r5, #8]
   130b4:	bl	141e8 <init_token_int_value@@Base>
   130b8:	ldrd	r2, [r4, #24]
   130bc:	mov	r0, #8
   130c0:	adds	r2, r2, #1
   130c4:	adc	r3, r3, #0
   130c8:	strd	r2, [r4, #24]
   130cc:	bl	118e0 <malloc@plt>
   130d0:	mov	r1, r7
   130d4:	str	r0, [r5, #12]
   130d8:	bl	14384 <init_token_boolean_op@@Base>
   130dc:	ldrd	r2, [r4, #32]
   130e0:	mov	r0, #8
   130e4:	adds	r2, r2, #1
   130e8:	adc	r3, r3, #0
   130ec:	strd	r2, [r4, #32]
   130f0:	bl	118e0 <malloc@plt>
   130f4:	mov	r1, #1
   130f8:	str	r0, [r5, #16]
   130fc:	bl	141e8 <init_token_int_value@@Base>
   13100:	ldrd	r2, [r4, #40]	; 0x28
   13104:	mov	r0, #4
   13108:	adds	r2, r2, #1
   1310c:	adc	r3, r3, #0
   13110:	strd	r2, [r4, #40]	; 0x28
   13114:	bl	118e0 <malloc@plt>
   13118:	str	r0, [r5, #20]
   1311c:	bl	14264 <init_token_cpar@@Base>
   13120:	ldrd	r2, [r4, #48]	; 0x30
   13124:	mov	r0, #4
   13128:	adds	r2, r2, #1
   1312c:	adc	r3, r3, #0
   13130:	strd	r2, [r4, #48]	; 0x30
   13134:	bl	118e0 <malloc@plt>
   13138:	str	r0, [r5, #24]
   1313c:	bl	14288 <init_token_obra@@Base>
   13140:	ldrd	r2, [r4, #56]	; 0x38
   13144:	mov	r0, #4
   13148:	adds	r2, r2, #1
   1314c:	adc	r3, r3, #0
   13150:	strd	r2, [r4, #56]	; 0x38
   13154:	bl	118e0 <malloc@plt>
   13158:	str	r0, [r5, #28]
   1315c:	bl	142ac <init_token_cbra@@Base>
   13160:	ldrd	r2, [r4, #64]	; 0x40
   13164:	mov	r0, #4
   13168:	adds	r2, r2, #1
   1316c:	adc	r3, r3, #0
   13170:	strd	r2, [r4, #64]	; 0x40
   13174:	bl	118e0 <malloc@plt>
   13178:	str	r0, [r5, #32]
   1317c:	bl	14318 <init_token_eof@@Base>
   13180:	ldrd	r2, [r4, #72]	; 0x48
   13184:	mov	r1, #9
   13188:	mov	r0, sp
   1318c:	adds	r2, r2, #1
   13190:	adc	r3, r3, #0
   13194:	str	r5, [r6, #228]	; 0xe4
   13198:	strd	r2, [r4, #72]	; 0x48
   1319c:	str	r1, [r6, #220]	; 0xdc
   131a0:	bl	168a4 <read_if_statement@@Base>
   131a4:	ldr	r3, [r6, #204]	; 0xcc
   131a8:	cmp	r3, #9
   131ac:	bne	131dc <if_statement_only@@Base+0x1e8>
   131b0:	cmp	r0, #0
   131b4:	beq	13224 <if_statement_only@@Base+0x230>
   131b8:	ldr	r3, [r0]
   131bc:	cmp	r3, #4
   131c0:	bne	13200 <if_statement_only@@Base+0x20c>
   131c4:	ldrd	r2, [r4, #96]	; 0x60
   131c8:	adds	r2, r2, #1
   131cc:	adc	r3, r3, #0
   131d0:	strd	r2, [r4, #96]	; 0x60
   131d4:	add	sp, sp, #20
   131d8:	pop	{r4, r5, r6, r7, pc}
   131dc:	ldrd	r6, [r4, #80]	; 0x50
   131e0:	ldr	r3, [pc, #104]	; 13250 <if_statement_only@@Base+0x25c>
   131e4:	ldr	r2, [pc, #104]	; 13254 <if_statement_only@@Base+0x260>
   131e8:	adds	r6, r6, #1
   131ec:	adc	r7, r7, #0
   131f0:	ldr	r1, [pc, #96]	; 13258 <if_statement_only@@Base+0x264>
   131f4:	ldr	r0, [pc, #96]	; 1325c <if_statement_only@@Base+0x268>
   131f8:	strd	r6, [r4, #80]	; 0x50
   131fc:	bl	119f4 <__assert_fail@plt>
   13200:	ldrd	r6, [r4, #104]	; 0x68
   13204:	ldr	r3, [pc, #68]	; 13250 <if_statement_only@@Base+0x25c>
   13208:	ldr	r2, [pc, #80]	; 13260 <if_statement_only@@Base+0x26c>
   1320c:	adds	r6, r6, #1
   13210:	adc	r7, r7, #0
   13214:	ldr	r1, [pc, #60]	; 13258 <if_statement_only@@Base+0x264>
   13218:	ldr	r0, [pc, #68]	; 13264 <if_statement_only@@Base+0x270>
   1321c:	strd	r6, [r4, #104]	; 0x68
   13220:	bl	119f4 <__assert_fail@plt>
   13224:	ldrd	r6, [r4, #88]	; 0x58
   13228:	ldr	r3, [pc, #32]	; 13250 <if_statement_only@@Base+0x25c>
   1322c:	mov	r2, #284	; 0x11c
   13230:	adds	r6, r6, #1
   13234:	adc	r7, r7, #0
   13238:	ldr	r1, [pc, #24]	; 13258 <if_statement_only@@Base+0x264>
   1323c:	ldr	r0, [pc, #36]	; 13268 <if_statement_only@@Base+0x274>
   13240:	strd	r6, [r4, #88]	; 0x58
   13244:	bl	119f4 <__assert_fail@plt>
   13248:	strdeq	sl, [r2], -r8
   1324c:	strdeq	fp, [r2], -r0
   13250:	andeq	r9, r1, r8, lsl #6
   13254:	andeq	r0, r0, fp, lsl r1
   13258:	andeq	r9, r1, r8, lsr #7
   1325c:	andeq	r9, r1, r4, asr #10
   13260:	andeq	r0, r0, sp, lsl r1
   13264:	andeq	r9, r1, ip, ror #10
   13268:	andeq	r9, r1, r0, ror #10

0001326c <if_else_statements@@Base>:
   1326c:	push	{r4, r5, r6, r7, lr}
   13270:	sub	sp, sp, #20
   13274:	ldr	r4, [pc, #644]	; 13500 <if_else_statements@@Base+0x294>
   13278:	add	r1, sp, #4
   1327c:	mov	r0, sp
   13280:	ldrd	r2, [r4]
   13284:	ldr	r6, [pc, #632]	; 13504 <if_else_statements@@Base+0x298>
   13288:	adds	r2, r2, #1
   1328c:	adc	r3, r3, #0
   13290:	strd	r2, [r4]
   13294:	bl	15ea0 <init_grammar@@Base>
   13298:	ldrd	r2, [r4, #8]
   1329c:	mov	r0, #3
   132a0:	adds	r2, r2, #1
   132a4:	adc	r3, r3, #0
   132a8:	strd	r2, [r4, #8]
   132ac:	bl	118e0 <malloc@plt>
   132b0:	mov	r1, #33	; 0x21
   132b4:	mov	r2, #61	; 0x3d
   132b8:	mov	r3, #0
   132bc:	mov	r7, r0
   132c0:	mov	r0, #44	; 0x2c
   132c4:	strb	r1, [r7]
   132c8:	strb	r2, [r7, #1]
   132cc:	strb	r3, [r7, #2]
   132d0:	bl	118e0 <malloc@plt>
   132d4:	mov	r5, r0
   132d8:	mov	r0, #4
   132dc:	bl	118e0 <malloc@plt>
   132e0:	str	r0, [r5]
   132e4:	bl	14240 <init_token_opar@@Base>
   132e8:	ldrd	r2, [r4, #16]
   132ec:	mov	r0, #8
   132f0:	adds	r2, r2, #1
   132f4:	adc	r3, r3, #0
   132f8:	strd	r2, [r4, #16]
   132fc:	bl	118e0 <malloc@plt>
   13300:	mov	r1, #1
   13304:	str	r0, [r5, #4]
   13308:	bl	141e8 <init_token_int_value@@Base>
   1330c:	ldrd	r2, [r4, #24]
   13310:	mov	r0, #8
   13314:	adds	r2, r2, #1
   13318:	adc	r3, r3, #0
   1331c:	strd	r2, [r4, #24]
   13320:	bl	118e0 <malloc@plt>
   13324:	mov	r1, #1
   13328:	str	r0, [r5, #8]
   1332c:	bl	141e8 <init_token_int_value@@Base>
   13330:	ldrd	r2, [r4, #32]
   13334:	mov	r0, #8
   13338:	adds	r2, r2, #1
   1333c:	adc	r3, r3, #0
   13340:	strd	r2, [r4, #32]
   13344:	bl	118e0 <malloc@plt>
   13348:	mov	r1, r7
   1334c:	str	r0, [r5, #12]
   13350:	bl	14384 <init_token_boolean_op@@Base>
   13354:	ldrd	r2, [r4, #40]	; 0x28
   13358:	mov	r0, #8
   1335c:	adds	r2, r2, #1
   13360:	adc	r3, r3, #0
   13364:	strd	r2, [r4, #40]	; 0x28
   13368:	bl	118e0 <malloc@plt>
   1336c:	mov	r1, #1
   13370:	str	r0, [r5, #16]
   13374:	bl	141e8 <init_token_int_value@@Base>
   13378:	ldrd	r2, [r4, #48]	; 0x30
   1337c:	mov	r0, #4
   13380:	adds	r2, r2, #1
   13384:	adc	r3, r3, #0
   13388:	strd	r2, [r4, #48]	; 0x30
   1338c:	bl	118e0 <malloc@plt>
   13390:	str	r0, [r5, #20]
   13394:	bl	14264 <init_token_cpar@@Base>
   13398:	ldrd	r2, [r4, #56]	; 0x38
   1339c:	mov	r0, #4
   133a0:	adds	r2, r2, #1
   133a4:	adc	r3, r3, #0
   133a8:	strd	r2, [r4, #56]	; 0x38
   133ac:	bl	118e0 <malloc@plt>
   133b0:	str	r0, [r5, #24]
   133b4:	bl	14288 <init_token_obra@@Base>
   133b8:	ldrd	r2, [r4, #64]	; 0x40
   133bc:	mov	r0, #4
   133c0:	adds	r2, r2, #1
   133c4:	adc	r3, r3, #0
   133c8:	strd	r2, [r4, #64]	; 0x40
   133cc:	bl	118e0 <malloc@plt>
   133d0:	str	r0, [r5, #28]
   133d4:	bl	142ac <init_token_cbra@@Base>
   133d8:	ldrd	r2, [r4, #72]	; 0x48
   133dc:	mov	r0, #4
   133e0:	adds	r2, r2, #1
   133e4:	adc	r3, r3, #0
   133e8:	strd	r2, [r4, #72]	; 0x48
   133ec:	bl	118e0 <malloc@plt>
   133f0:	str	r0, [r5, #32]
   133f4:	bl	14360 <init_token_else@@Base>
   133f8:	ldrd	r2, [r4, #80]	; 0x50
   133fc:	mov	r0, #4
   13400:	adds	r2, r2, #1
   13404:	adc	r3, r3, #0
   13408:	strd	r2, [r4, #80]	; 0x50
   1340c:	bl	118e0 <malloc@plt>
   13410:	str	r0, [r5, #36]	; 0x24
   13414:	bl	14288 <init_token_obra@@Base>
   13418:	ldrd	r2, [r4, #88]	; 0x58
   1341c:	mov	r0, #4
   13420:	adds	r2, r2, #1
   13424:	adc	r3, r3, #0
   13428:	strd	r2, [r4, #88]	; 0x58
   1342c:	bl	118e0 <malloc@plt>
   13430:	str	r0, [r5, #40]	; 0x28
   13434:	bl	142ac <init_token_cbra@@Base>
   13438:	ldrd	r2, [r4, #96]	; 0x60
   1343c:	mov	r1, #11
   13440:	mov	r0, sp
   13444:	adds	r2, r2, #1
   13448:	adc	r3, r3, #0
   1344c:	str	r5, [r6, #228]	; 0xe4
   13450:	strd	r2, [r4, #96]	; 0x60
   13454:	str	r1, [r6, #220]	; 0xdc
   13458:	bl	168a4 <read_if_statement@@Base>
   1345c:	ldr	r3, [r6, #204]	; 0xcc
   13460:	cmp	r3, #11
   13464:	bne	13494 <if_else_statements@@Base+0x228>
   13468:	cmp	r0, #0
   1346c:	beq	134dc <if_else_statements@@Base+0x270>
   13470:	ldr	r3, [r0]
   13474:	cmp	r3, #4
   13478:	bne	134b8 <if_else_statements@@Base+0x24c>
   1347c:	ldrd	r2, [r4, #120]	; 0x78
   13480:	adds	r2, r2, #1
   13484:	adc	r3, r3, #0
   13488:	strd	r2, [r4, #120]	; 0x78
   1348c:	add	sp, sp, #20
   13490:	pop	{r4, r5, r6, r7, pc}
   13494:	ldrd	r6, [r4, #104]	; 0x68
   13498:	ldr	r3, [pc, #104]	; 13508 <if_else_statements@@Base+0x29c>
   1349c:	mov	r2, #332	; 0x14c
   134a0:	adds	r6, r6, #1
   134a4:	adc	r7, r7, #0
   134a8:	ldr	r1, [pc, #92]	; 1350c <if_else_statements@@Base+0x2a0>
   134ac:	ldr	r0, [pc, #92]	; 13510 <if_else_statements@@Base+0x2a4>
   134b0:	strd	r6, [r4, #104]	; 0x68
   134b4:	bl	119f4 <__assert_fail@plt>
   134b8:	ldrd	r6, [r4, #128]	; 0x80
   134bc:	ldr	r3, [pc, #68]	; 13508 <if_else_statements@@Base+0x29c>
   134c0:	ldr	r2, [pc, #76]	; 13514 <if_else_statements@@Base+0x2a8>
   134c4:	adds	r6, r6, #1
   134c8:	adc	r7, r7, #0
   134cc:	ldr	r1, [pc, #56]	; 1350c <if_else_statements@@Base+0x2a0>
   134d0:	ldr	r0, [pc, #64]	; 13518 <if_else_statements@@Base+0x2ac>
   134d4:	strd	r6, [r4, #128]	; 0x80
   134d8:	bl	119f4 <__assert_fail@plt>
   134dc:	ldrd	r6, [r4, #112]	; 0x70
   134e0:	ldr	r3, [pc, #32]	; 13508 <if_else_statements@@Base+0x29c>
   134e4:	ldr	r2, [pc, #48]	; 1351c <if_else_statements@@Base+0x2b0>
   134e8:	adds	r6, r6, #1
   134ec:	adc	r7, r7, #0
   134f0:	ldr	r1, [pc, #20]	; 1350c <if_else_statements@@Base+0x2a0>
   134f4:	ldr	r0, [pc, #36]	; 13520 <if_else_statements@@Base+0x2b4>
   134f8:	strd	r6, [r4, #112]	; 0x70
   134fc:	bl	119f4 <__assert_fail@plt>
   13500:	andeq	sl, r2, r8, ror #24
   13504:	strdeq	fp, [r2], -r0
   13508:	andeq	r9, r1, ip, lsl r3
   1350c:	andeq	r9, r1, r8, lsr #7
   13510:	andeq	r9, r1, r0, lsl #11
   13514:	andeq	r0, r0, lr, asr #2
   13518:	andeq	r9, r1, ip, ror #10
   1351c:	andeq	r0, r0, sp, asr #2
   13520:	andeq	r9, r1, r0, ror #10

00013524 <body_with_two_returns@@Base>:
   13524:	push	{r4, r5, r6, r7, lr}
   13528:	sub	sp, sp, #20
   1352c:	ldr	r4, [pc, #604]	; 13790 <body_with_two_returns@@Base+0x26c>
   13530:	add	r1, sp, #4
   13534:	mov	r0, sp
   13538:	ldrd	r2, [r4, #-8]
   1353c:	ldr	r6, [pc, #592]	; 13794 <body_with_two_returns@@Base+0x270>
   13540:	adds	r2, r2, #1
   13544:	adc	r3, r3, #0
   13548:	strd	r2, [r4, #-8]
   1354c:	bl	15ea0 <init_grammar@@Base>
   13550:	ldrd	r2, [r4]
   13554:	mov	r0, #32
   13558:	adds	r2, r2, #1
   1355c:	adc	r3, r3, #0
   13560:	strd	r2, [r4]
   13564:	bl	118e0 <malloc@plt>
   13568:	mov	r5, r0
   1356c:	mov	r0, #4
   13570:	bl	118e0 <malloc@plt>
   13574:	str	r0, [r5]
   13578:	bl	14288 <init_token_obra@@Base>
   1357c:	ldrd	r2, [r4, #8]
   13580:	mov	r0, #4
   13584:	adds	r2, r2, #1
   13588:	adc	r3, r3, #0
   1358c:	strd	r2, [r4, #8]
   13590:	bl	118e0 <malloc@plt>
   13594:	str	r0, [r5, #4]
   13598:	bl	142d0 <init_token_return@@Base>
   1359c:	ldrd	r2, [r4, #16]
   135a0:	mov	r0, #8
   135a4:	adds	r2, r2, #1
   135a8:	adc	r3, r3, #0
   135ac:	strd	r2, [r4, #16]
   135b0:	bl	118e0 <malloc@plt>
   135b4:	mov	r1, #1
   135b8:	str	r0, [r5, #8]
   135bc:	bl	141e8 <init_token_int_value@@Base>
   135c0:	ldrd	r2, [r4, #24]
   135c4:	mov	r0, #4
   135c8:	adds	r2, r2, #1
   135cc:	adc	r3, r3, #0
   135d0:	strd	r2, [r4, #24]
   135d4:	bl	118e0 <malloc@plt>
   135d8:	str	r0, [r5, #12]
   135dc:	bl	142f4 <init_token_semicolon@@Base>
   135e0:	ldrd	r2, [r4, #32]
   135e4:	mov	r0, #4
   135e8:	adds	r2, r2, #1
   135ec:	adc	r3, r3, #0
   135f0:	strd	r2, [r4, #32]
   135f4:	bl	118e0 <malloc@plt>
   135f8:	str	r0, [r5, #16]
   135fc:	bl	142d0 <init_token_return@@Base>
   13600:	ldrd	r2, [r4, #40]	; 0x28
   13604:	mov	r0, #8
   13608:	adds	r2, r2, #1
   1360c:	adc	r3, r3, #0
   13610:	strd	r2, [r4, #40]	; 0x28
   13614:	bl	118e0 <malloc@plt>
   13618:	mov	r1, #1
   1361c:	str	r0, [r5, #20]
   13620:	bl	141e8 <init_token_int_value@@Base>
   13624:	ldrd	r2, [r4, #48]	; 0x30
   13628:	mov	r0, #4
   1362c:	adds	r2, r2, #1
   13630:	adc	r3, r3, #0
   13634:	strd	r2, [r4, #48]	; 0x30
   13638:	bl	118e0 <malloc@plt>
   1363c:	str	r0, [r5, #24]
   13640:	bl	142f4 <init_token_semicolon@@Base>
   13644:	ldrd	r2, [r4, #56]	; 0x38
   13648:	mov	r0, #4
   1364c:	adds	r2, r2, #1
   13650:	adc	r3, r3, #0
   13654:	strd	r2, [r4, #56]	; 0x38
   13658:	bl	118e0 <malloc@plt>
   1365c:	str	r0, [r5, #28]
   13660:	bl	142ac <init_token_cbra@@Base>
   13664:	ldrd	r2, [r4, #64]	; 0x40
   13668:	mov	r1, #8
   1366c:	mov	r0, sp
   13670:	adds	r2, r2, #1
   13674:	adc	r3, r3, #0
   13678:	str	r5, [r6, #228]	; 0xe4
   1367c:	strd	r2, [r4, #64]	; 0x40
   13680:	str	r1, [r6, #220]	; 0xdc
   13684:	bl	16a04 <read_body@@Base>
   13688:	ldr	r3, [r6, #204]	; 0xcc
   1368c:	cmp	r3, #8
   13690:	bne	136dc <body_with_two_returns@@Base+0x1b8>
   13694:	cmp	r0, #0
   13698:	beq	1376c <body_with_two_returns@@Base+0x248>
   1369c:	ldr	r3, [r0]
   136a0:	cmp	r3, #3
   136a4:	bne	13748 <body_with_two_returns@@Base+0x224>
   136a8:	ldr	r3, [r0, #4]
   136ac:	ldr	r2, [r3]
   136b0:	cmp	r2, #3
   136b4:	bne	13724 <body_with_two_returns@@Base+0x200>
   136b8:	ldr	r3, [r3, #4]
   136bc:	cmp	r3, #0
   136c0:	bne	13700 <body_with_two_returns@@Base+0x1dc>
   136c4:	ldrd	r2, [r4, #104]	; 0x68
   136c8:	adds	r2, r2, #1
   136cc:	adc	r3, r3, #0
   136d0:	strd	r2, [r4, #104]	; 0x68
   136d4:	add	sp, sp, #20
   136d8:	pop	{r4, r5, r6, r7, pc}
   136dc:	ldrd	r6, [r4, #72]	; 0x48
   136e0:	ldr	r3, [pc, #176]	; 13798 <body_with_two_returns@@Base+0x274>
   136e4:	ldr	r2, [pc, #176]	; 1379c <body_with_two_returns@@Base+0x278>
   136e8:	adds	r6, r6, #1
   136ec:	adc	r7, r7, #0
   136f0:	ldr	r1, [pc, #168]	; 137a0 <body_with_two_returns@@Base+0x27c>
   136f4:	ldr	r0, [pc, #168]	; 137a4 <body_with_two_returns@@Base+0x280>
   136f8:	strd	r6, [r4, #72]	; 0x48
   136fc:	bl	119f4 <__assert_fail@plt>
   13700:	ldrd	r6, [r4, #112]	; 0x70
   13704:	ldr	r3, [pc, #140]	; 13798 <body_with_two_returns@@Base+0x274>
   13708:	ldr	r2, [pc, #152]	; 137a8 <body_with_two_returns@@Base+0x284>
   1370c:	adds	r6, r6, #1
   13710:	adc	r7, r7, #0
   13714:	ldr	r1, [pc, #132]	; 137a0 <body_with_two_returns@@Base+0x27c>
   13718:	ldr	r0, [pc, #140]	; 137ac <body_with_two_returns@@Base+0x288>
   1371c:	strd	r6, [r4, #112]	; 0x70
   13720:	bl	119f4 <__assert_fail@plt>
   13724:	ldrd	r6, [r4, #96]	; 0x60
   13728:	ldr	r3, [pc, #104]	; 13798 <body_with_two_returns@@Base+0x274>
   1372c:	ldr	r2, [pc, #124]	; 137b0 <body_with_two_returns@@Base+0x28c>
   13730:	adds	r6, r6, #1
   13734:	adc	r7, r7, #0
   13738:	ldr	r1, [pc, #96]	; 137a0 <body_with_two_returns@@Base+0x27c>
   1373c:	ldr	r0, [pc, #112]	; 137b4 <body_with_two_returns@@Base+0x290>
   13740:	strd	r6, [r4, #96]	; 0x60
   13744:	bl	119f4 <__assert_fail@plt>
   13748:	ldrd	r6, [r4, #88]	; 0x58
   1374c:	ldr	r3, [pc, #68]	; 13798 <body_with_two_returns@@Base+0x274>
   13750:	ldr	r2, [pc, #96]	; 137b8 <body_with_two_returns@@Base+0x294>
   13754:	adds	r6, r6, #1
   13758:	adc	r7, r7, #0
   1375c:	ldr	r1, [pc, #60]	; 137a0 <body_with_two_returns@@Base+0x27c>
   13760:	ldr	r0, [pc, #84]	; 137bc <body_with_two_returns@@Base+0x298>
   13764:	strd	r6, [r4, #88]	; 0x58
   13768:	bl	119f4 <__assert_fail@plt>
   1376c:	ldrd	r6, [r4, #80]	; 0x50
   13770:	ldr	r3, [pc, #32]	; 13798 <body_with_two_returns@@Base+0x274>
   13774:	mov	r2, #372	; 0x174
   13778:	adds	r6, r6, #1
   1377c:	adc	r7, r7, #0
   13780:	ldr	r1, [pc, #24]	; 137a0 <body_with_two_returns@@Base+0x27c>
   13784:	ldr	r0, [pc, #52]	; 137c0 <body_with_two_returns@@Base+0x29c>
   13788:	strd	r6, [r4, #80]	; 0x50
   1378c:	bl	119f4 <__assert_fail@plt>
   13790:	strdeq	sl, [r2], -r8
   13794:	strdeq	fp, [r2], -r0
   13798:	andeq	r9, r1, r0, lsr r3
   1379c:	andeq	r0, r0, r3, ror r1
   137a0:	andeq	r9, r1, r8, lsr #7
   137a4:	muleq	r1, ip, r5
   137a8:	andeq	r0, r0, r7, ror r1
   137ac:	andeq	r9, r1, ip, ror #11
   137b0:	andeq	r0, r0, r6, ror r1
   137b4:	ldrdeq	r9, [r1], -r0
   137b8:	andeq	r0, r0, r5, ror r1
   137bc:			; <UNDEFINED> instruction: 0x000195b8
   137c0:	andeq	r9, r1, r0, ror #10

000137c4 <body_with_one_return@@Base>:
   137c4:	push	{r4, r5, r6, r7, lr}
   137c8:	sub	sp, sp, #20
   137cc:	ldr	r4, [pc, #452]	; 13998 <body_with_one_return@@Base+0x1d4>
   137d0:	add	r1, sp, #4
   137d4:	mov	r0, sp
   137d8:	ldrd	r2, [r4, #-8]
   137dc:	ldr	r6, [pc, #440]	; 1399c <body_with_one_return@@Base+0x1d8>
   137e0:	adds	r2, r2, #1
   137e4:	adc	r3, r3, #0
   137e8:	strd	r2, [r4, #-8]
   137ec:	bl	15ea0 <init_grammar@@Base>
   137f0:	ldrd	r2, [r4]
   137f4:	mov	r0, #20
   137f8:	adds	r2, r2, #1
   137fc:	adc	r3, r3, #0
   13800:	strd	r2, [r4]
   13804:	bl	118e0 <malloc@plt>
   13808:	mov	r5, r0
   1380c:	mov	r0, #4
   13810:	bl	118e0 <malloc@plt>
   13814:	str	r0, [r5]
   13818:	bl	14288 <init_token_obra@@Base>
   1381c:	ldrd	r2, [r4, #8]
   13820:	mov	r0, #4
   13824:	adds	r2, r2, #1
   13828:	adc	r3, r3, #0
   1382c:	strd	r2, [r4, #8]
   13830:	bl	118e0 <malloc@plt>
   13834:	str	r0, [r5, #4]
   13838:	bl	142d0 <init_token_return@@Base>
   1383c:	ldrd	r2, [r4, #16]
   13840:	mov	r0, #8
   13844:	adds	r2, r2, #1
   13848:	adc	r3, r3, #0
   1384c:	strd	r2, [r4, #16]
   13850:	bl	118e0 <malloc@plt>
   13854:	mov	r1, #1
   13858:	str	r0, [r5, #8]
   1385c:	bl	141e8 <init_token_int_value@@Base>
   13860:	ldrd	r2, [r4, #24]
   13864:	mov	r0, #4
   13868:	adds	r2, r2, #1
   1386c:	adc	r3, r3, #0
   13870:	strd	r2, [r4, #24]
   13874:	bl	118e0 <malloc@plt>
   13878:	str	r0, [r5, #12]
   1387c:	bl	142f4 <init_token_semicolon@@Base>
   13880:	ldrd	r2, [r4, #32]
   13884:	mov	r0, #4
   13888:	adds	r2, r2, #1
   1388c:	adc	r3, r3, #0
   13890:	strd	r2, [r4, #32]
   13894:	bl	118e0 <malloc@plt>
   13898:	str	r0, [r5, #16]
   1389c:	bl	142ac <init_token_cbra@@Base>
   138a0:	ldrd	r2, [r4, #40]	; 0x28
   138a4:	mov	r1, #5
   138a8:	mov	r0, sp
   138ac:	adds	r2, r2, #1
   138b0:	adc	r3, r3, #0
   138b4:	str	r5, [r6, #228]	; 0xe4
   138b8:	strd	r2, [r4, #40]	; 0x28
   138bc:	str	r1, [r6, #220]	; 0xdc
   138c0:	bl	16a04 <read_body@@Base>
   138c4:	ldr	r3, [r6, #204]	; 0xcc
   138c8:	cmp	r3, #5
   138cc:	bne	13908 <body_with_one_return@@Base+0x144>
   138d0:	cmp	r0, #0
   138d4:	beq	13974 <body_with_one_return@@Base+0x1b0>
   138d8:	ldr	r3, [r0]
   138dc:	cmp	r3, #3
   138e0:	bne	13950 <body_with_one_return@@Base+0x18c>
   138e4:	ldr	r3, [r0, #4]
   138e8:	cmp	r3, #0
   138ec:	bne	1392c <body_with_one_return@@Base+0x168>
   138f0:	ldrd	r2, [r4, #72]	; 0x48
   138f4:	adds	r2, r2, #1
   138f8:	adc	r3, r3, #0
   138fc:	strd	r2, [r4, #72]	; 0x48
   13900:	add	sp, sp, #20
   13904:	pop	{r4, r5, r6, r7, pc}
   13908:	ldrd	r6, [r4, #48]	; 0x30
   1390c:	ldr	r3, [pc, #140]	; 139a0 <body_with_one_return@@Base+0x1dc>
   13910:	ldr	r2, [pc, #140]	; 139a4 <body_with_one_return@@Base+0x1e0>
   13914:	adds	r6, r6, #1
   13918:	adc	r7, r7, #0
   1391c:	ldr	r1, [pc, #132]	; 139a8 <body_with_one_return@@Base+0x1e4>
   13920:	ldr	r0, [pc, #132]	; 139ac <body_with_one_return@@Base+0x1e8>
   13924:	strd	r6, [r4, #48]	; 0x30
   13928:	bl	119f4 <__assert_fail@plt>
   1392c:	ldrd	r6, [r4, #80]	; 0x50
   13930:	ldr	r3, [pc, #104]	; 139a0 <body_with_one_return@@Base+0x1dc>
   13934:	ldr	r2, [pc, #116]	; 139b0 <body_with_one_return@@Base+0x1ec>
   13938:	adds	r6, r6, #1
   1393c:	adc	r7, r7, #0
   13940:	ldr	r1, [pc, #96]	; 139a8 <body_with_one_return@@Base+0x1e4>
   13944:	ldr	r0, [pc, #104]	; 139b4 <body_with_one_return@@Base+0x1f0>
   13948:	strd	r6, [r4, #80]	; 0x50
   1394c:	bl	119f4 <__assert_fail@plt>
   13950:	ldrd	r6, [r4, #64]	; 0x40
   13954:	ldr	r3, [pc, #68]	; 139a0 <body_with_one_return@@Base+0x1dc>
   13958:	mov	r2, #408	; 0x198
   1395c:	adds	r6, r6, #1
   13960:	adc	r7, r7, #0
   13964:	ldr	r1, [pc, #60]	; 139a8 <body_with_one_return@@Base+0x1e4>
   13968:	ldr	r0, [pc, #72]	; 139b8 <body_with_one_return@@Base+0x1f4>
   1396c:	strd	r6, [r4, #64]	; 0x40
   13970:	bl	119f4 <__assert_fail@plt>
   13974:	ldrd	r6, [r4, #56]	; 0x38
   13978:	ldr	r3, [pc, #32]	; 139a0 <body_with_one_return@@Base+0x1dc>
   1397c:	ldr	r2, [pc, #56]	; 139bc <body_with_one_return@@Base+0x1f8>
   13980:	adds	r6, r6, #1
   13984:	adc	r7, r7, #0
   13988:	ldr	r1, [pc, #24]	; 139a8 <body_with_one_return@@Base+0x1e4>
   1398c:	ldr	r0, [pc, #44]	; 139c0 <body_with_one_return@@Base+0x1fc>
   13990:	strd	r6, [r4, #56]	; 0x38
   13994:	bl	119f4 <__assert_fail@plt>
   13998:	andeq	sl, r2, r8, ror sp
   1399c:	strdeq	fp, [r2], -r0
   139a0:	andeq	r9, r1, r8, asr #6
   139a4:	muleq	r0, r6, r1
   139a8:	andeq	r9, r1, r8, lsr #7
   139ac:	andeq	r9, r1, r0, lsr r4
   139b0:	muleq	r0, r9, r1
   139b4:	andeq	r9, r1, r4, lsl #12
   139b8:			; <UNDEFINED> instruction: 0x000195b8
   139bc:	muleq	r0, r7, r1
   139c0:	andeq	r9, r1, r0, ror #10

000139c4 <if_statement_inside_if_statement@@Base>:
   139c4:	push	{r4, r5, r6, r7, r8, lr}
   139c8:	sub	sp, sp, #16
   139cc:	ldr	r4, [pc, #940]	; 13d80 <if_statement_inside_if_statement@@Base+0x3bc>
   139d0:	add	r1, sp, #4
   139d4:	mov	r0, sp
   139d8:	ldrd	r2, [r4, #-8]
   139dc:	ldr	r8, [pc, #928]	; 13d84 <if_statement_inside_if_statement@@Base+0x3c0>
   139e0:	adds	r2, r2, #1
   139e4:	adc	r3, r3, #0
   139e8:	strd	r2, [r4, #-8]
   139ec:	bl	15ea0 <init_grammar@@Base>
   139f0:	ldrd	r2, [r4]
   139f4:	mov	r0, #3
   139f8:	adds	r2, r2, #1
   139fc:	adc	r3, r3, #0
   13a00:	strd	r2, [r4]
   13a04:	bl	118e0 <malloc@plt>
   13a08:	mov	r7, r0
   13a0c:	mov	r0, #3
   13a10:	bl	118e0 <malloc@plt>
   13a14:	mov	r1, #33	; 0x21
   13a18:	mov	r2, #61	; 0x3d
   13a1c:	mov	r3, #0
   13a20:	strb	r1, [r7]
   13a24:	strb	r2, [r7, #1]
   13a28:	strb	r3, [r7, #2]
   13a2c:	mov	r6, r0
   13a30:	strb	r1, [r0]
   13a34:	strb	r2, [r6, #1]
   13a38:	strb	r3, [r6, #2]
   13a3c:	mov	r0, #76	; 0x4c
   13a40:	bl	118e0 <malloc@plt>
   13a44:	mov	r5, r0
   13a48:	mov	r0, #4
   13a4c:	bl	118e0 <malloc@plt>
   13a50:	str	r0, [r5]
   13a54:	bl	14240 <init_token_opar@@Base>
   13a58:	ldrd	r2, [r4, #8]
   13a5c:	mov	r0, #8
   13a60:	adds	r2, r2, #1
   13a64:	adc	r3, r3, #0
   13a68:	strd	r2, [r4, #8]
   13a6c:	bl	118e0 <malloc@plt>
   13a70:	mov	r1, #1
   13a74:	str	r0, [r5, #4]
   13a78:	bl	141e8 <init_token_int_value@@Base>
   13a7c:	ldrd	r2, [r4, #16]
   13a80:	mov	r0, #8
   13a84:	adds	r2, r2, #1
   13a88:	adc	r3, r3, #0
   13a8c:	strd	r2, [r4, #16]
   13a90:	bl	118e0 <malloc@plt>
   13a94:	mov	r1, #1
   13a98:	str	r0, [r5, #8]
   13a9c:	bl	141e8 <init_token_int_value@@Base>
   13aa0:	ldrd	r2, [r4, #24]
   13aa4:	mov	r0, #8
   13aa8:	adds	r2, r2, #1
   13aac:	adc	r3, r3, #0
   13ab0:	strd	r2, [r4, #24]
   13ab4:	bl	118e0 <malloc@plt>
   13ab8:	mov	r1, r7
   13abc:	str	r0, [r5, #12]
   13ac0:	bl	14384 <init_token_boolean_op@@Base>
   13ac4:	ldrd	r2, [r4, #32]
   13ac8:	mov	r0, #8
   13acc:	adds	r2, r2, #1
   13ad0:	adc	r3, r3, #0
   13ad4:	strd	r2, [r4, #32]
   13ad8:	bl	118e0 <malloc@plt>
   13adc:	mov	r1, #1
   13ae0:	str	r0, [r5, #16]
   13ae4:	bl	141e8 <init_token_int_value@@Base>
   13ae8:	ldrd	r2, [r4, #40]	; 0x28
   13aec:	mov	r0, #4
   13af0:	adds	r2, r2, #1
   13af4:	adc	r3, r3, #0
   13af8:	strd	r2, [r4, #40]	; 0x28
   13afc:	bl	118e0 <malloc@plt>
   13b00:	str	r0, [r5, #20]
   13b04:	bl	14264 <init_token_cpar@@Base>
   13b08:	ldrd	r2, [r4, #48]	; 0x30
   13b0c:	mov	r0, #4
   13b10:	adds	r2, r2, #1
   13b14:	adc	r3, r3, #0
   13b18:	strd	r2, [r4, #48]	; 0x30
   13b1c:	bl	118e0 <malloc@plt>
   13b20:	str	r0, [r5, #24]
   13b24:	bl	14288 <init_token_obra@@Base>
   13b28:	ldrd	r2, [r4, #56]	; 0x38
   13b2c:	mov	r0, #4
   13b30:	adds	r2, r2, #1
   13b34:	adc	r3, r3, #0
   13b38:	strd	r2, [r4, #56]	; 0x38
   13b3c:	bl	118e0 <malloc@plt>
   13b40:	str	r0, [r5, #28]
   13b44:	bl	1433c <init_token_if@@Base>
   13b48:	ldrd	r2, [r4, #64]	; 0x40
   13b4c:	mov	r0, #4
   13b50:	adds	r2, r2, #1
   13b54:	adc	r3, r3, #0
   13b58:	strd	r2, [r4, #64]	; 0x40
   13b5c:	bl	118e0 <malloc@plt>
   13b60:	str	r0, [r5, #32]
   13b64:	bl	14240 <init_token_opar@@Base>
   13b68:	ldrd	r2, [r4, #72]	; 0x48
   13b6c:	mov	r0, #8
   13b70:	adds	r2, r2, #1
   13b74:	adc	r3, r3, #0
   13b78:	strd	r2, [r4, #72]	; 0x48
   13b7c:	bl	118e0 <malloc@plt>
   13b80:	mov	r1, #1
   13b84:	str	r0, [r5, #36]	; 0x24
   13b88:	bl	141e8 <init_token_int_value@@Base>
   13b8c:	ldrd	r2, [r4, #80]	; 0x50
   13b90:	mov	r0, #8
   13b94:	adds	r2, r2, #1
   13b98:	adc	r3, r3, #0
   13b9c:	strd	r2, [r4, #80]	; 0x50
   13ba0:	bl	118e0 <malloc@plt>
   13ba4:	mov	r1, #1
   13ba8:	str	r0, [r5, #40]	; 0x28
   13bac:	bl	141e8 <init_token_int_value@@Base>
   13bb0:	ldrd	r2, [r4, #88]	; 0x58
   13bb4:	mov	r0, #8
   13bb8:	adds	r2, r2, #1
   13bbc:	adc	r3, r3, #0
   13bc0:	strd	r2, [r4, #88]	; 0x58
   13bc4:	bl	118e0 <malloc@plt>
   13bc8:	mov	r1, r6
   13bcc:	str	r0, [r5, #44]	; 0x2c
   13bd0:	bl	14384 <init_token_boolean_op@@Base>
   13bd4:	ldrd	r2, [r4, #96]	; 0x60
   13bd8:	mov	r0, #8
   13bdc:	adds	r2, r2, #1
   13be0:	adc	r3, r3, #0
   13be4:	strd	r2, [r4, #96]	; 0x60
   13be8:	bl	118e0 <malloc@plt>
   13bec:	mov	r1, #1
   13bf0:	str	r0, [r5, #48]	; 0x30
   13bf4:	bl	141e8 <init_token_int_value@@Base>
   13bf8:	ldrd	r2, [r4, #104]	; 0x68
   13bfc:	mov	r0, #4
   13c00:	adds	r2, r2, #1
   13c04:	adc	r3, r3, #0
   13c08:	strd	r2, [r4, #104]	; 0x68
   13c0c:	bl	118e0 <malloc@plt>
   13c10:	str	r0, [r5, #52]	; 0x34
   13c14:	bl	14264 <init_token_cpar@@Base>
   13c18:	ldrd	r2, [r4, #112]	; 0x70
   13c1c:	mov	r0, #4
   13c20:	adds	r2, r2, #1
   13c24:	adc	r3, r3, #0
   13c28:	strd	r2, [r4, #112]	; 0x70
   13c2c:	bl	118e0 <malloc@plt>
   13c30:	str	r0, [r5, #56]	; 0x38
   13c34:	bl	14288 <init_token_obra@@Base>
   13c38:	ldrd	r2, [r4, #120]	; 0x78
   13c3c:	mov	r0, #4
   13c40:	adds	r2, r2, #1
   13c44:	adc	r3, r3, #0
   13c48:	strd	r2, [r4, #120]	; 0x78
   13c4c:	bl	118e0 <malloc@plt>
   13c50:	str	r0, [r5, #60]	; 0x3c
   13c54:	bl	142ac <init_token_cbra@@Base>
   13c58:	ldrd	r2, [r4, #128]	; 0x80
   13c5c:	mov	r0, #4
   13c60:	adds	r2, r2, #1
   13c64:	adc	r3, r3, #0
   13c68:	strd	r2, [r4, #128]	; 0x80
   13c6c:	bl	118e0 <malloc@plt>
   13c70:	str	r0, [r5, #64]	; 0x40
   13c74:	bl	142ac <init_token_cbra@@Base>
   13c78:	ldrd	r2, [r4, #136]	; 0x88
   13c7c:	mov	r0, #4
   13c80:	adds	r2, r2, #1
   13c84:	adc	r3, r3, #0
   13c88:	strd	r2, [r4, #136]	; 0x88
   13c8c:	bl	118e0 <malloc@plt>
   13c90:	str	r0, [r5, #68]	; 0x44
   13c94:	bl	142ac <init_token_cbra@@Base>
   13c98:	ldrd	r2, [r4, #144]	; 0x90
   13c9c:	mov	r0, #4
   13ca0:	adds	r2, r2, #1
   13ca4:	adc	r3, r3, #0
   13ca8:	strd	r2, [r4, #144]	; 0x90
   13cac:	bl	118e0 <malloc@plt>
   13cb0:	str	r0, [r5, #72]	; 0x48
   13cb4:	bl	14318 <init_token_eof@@Base>
   13cb8:	ldrd	r2, [r4, #152]	; 0x98
   13cbc:	mov	r1, #19
   13cc0:	mov	r0, sp
   13cc4:	adds	r2, r2, #1
   13cc8:	adc	r3, r3, #0
   13ccc:	str	r5, [r8, #228]	; 0xe4
   13cd0:	strd	r2, [r4, #152]	; 0x98
   13cd4:	str	r1, [r8, #220]	; 0xdc
   13cd8:	bl	168a4 <read_if_statement@@Base>
   13cdc:	ldr	r3, [r8, #204]	; 0xcc
   13ce0:	cmp	r3, #19
   13ce4:	bne	13d14 <if_statement_inside_if_statement@@Base+0x350>
   13ce8:	cmp	r0, #0
   13cec:	beq	13d5c <if_statement_inside_if_statement@@Base+0x398>
   13cf0:	ldr	r3, [r0]
   13cf4:	cmp	r3, #4
   13cf8:	bne	13d38 <if_statement_inside_if_statement@@Base+0x374>
   13cfc:	ldrd	r2, [r4, #176]	; 0xb0
   13d00:	adds	r2, r2, #1
   13d04:	adc	r3, r3, #0
   13d08:	strd	r2, [r4, #176]	; 0xb0
   13d0c:	add	sp, sp, #16
   13d10:	pop	{r4, r5, r6, r7, r8, pc}
   13d14:	ldrd	r6, [r4, #160]	; 0xa0
   13d18:	ldr	r3, [pc, #104]	; 13d88 <if_statement_inside_if_statement@@Base+0x3c4>
   13d1c:	mov	r2, #480	; 0x1e0
   13d20:	adds	r6, r6, #1
   13d24:	adc	r7, r7, #0
   13d28:	ldr	r1, [pc, #92]	; 13d8c <if_statement_inside_if_statement@@Base+0x3c8>
   13d2c:	ldr	r0, [pc, #92]	; 13d90 <if_statement_inside_if_statement@@Base+0x3cc>
   13d30:	strd	r6, [r4, #160]	; 0xa0
   13d34:	bl	119f4 <__assert_fail@plt>
   13d38:	ldrd	r6, [r4, #184]	; 0xb8
   13d3c:	ldr	r3, [pc, #68]	; 13d88 <if_statement_inside_if_statement@@Base+0x3c4>
   13d40:	ldr	r2, [pc, #76]	; 13d94 <if_statement_inside_if_statement@@Base+0x3d0>
   13d44:	adds	r6, r6, #1
   13d48:	adc	r7, r7, #0
   13d4c:	ldr	r1, [pc, #56]	; 13d8c <if_statement_inside_if_statement@@Base+0x3c8>
   13d50:	ldr	r0, [pc, #64]	; 13d98 <if_statement_inside_if_statement@@Base+0x3d4>
   13d54:	strd	r6, [r4, #184]	; 0xb8
   13d58:	bl	119f4 <__assert_fail@plt>
   13d5c:	ldrd	r6, [r4, #168]	; 0xa8
   13d60:	ldr	r3, [pc, #32]	; 13d88 <if_statement_inside_if_statement@@Base+0x3c4>
   13d64:	ldr	r2, [pc, #48]	; 13d9c <if_statement_inside_if_statement@@Base+0x3d8>
   13d68:	adds	r6, r6, #1
   13d6c:	adc	r7, r7, #0
   13d70:	ldr	r1, [pc, #20]	; 13d8c <if_statement_inside_if_statement@@Base+0x3c8>
   13d74:	ldr	r0, [pc, #36]	; 13da0 <if_statement_inside_if_statement@@Base+0x3dc>
   13d78:	strd	r6, [r4, #168]	; 0xa8
   13d7c:	bl	119f4 <__assert_fail@plt>
   13d80:	ldrdeq	sl, [r2], -r8
   13d84:	strdeq	fp, [r2], -r0
   13d88:	andeq	r9, r1, r0, ror #6
   13d8c:	andeq	r9, r1, r8, lsr #7
   13d90:	andeq	r9, r1, r8, lsl r6
   13d94:	andeq	r0, r0, r2, ror #3
   13d98:	andeq	r9, r1, ip, ror #10
   13d9c:	andeq	r0, r0, r1, ror #3
   13da0:	andeq	r9, r1, r0, ror #10

00013da4 <if_statement_inside_else_statement@@Base>:
   13da4:	push	{r4, r5, r6, r7, r8, lr}
   13da8:	sub	sp, sp, #16
   13dac:	ldr	r4, [pc, #1004]	; 141a0 <if_statement_inside_else_statement@@Base+0x3fc>
   13db0:	add	r1, sp, #4
   13db4:	mov	r0, sp
   13db8:	ldrd	r2, [r4]
   13dbc:	ldr	r8, [pc, #992]	; 141a4 <if_statement_inside_else_statement@@Base+0x400>
   13dc0:	adds	r2, r2, #1
   13dc4:	adc	r3, r3, #0
   13dc8:	strd	r2, [r4]
   13dcc:	bl	15ea0 <init_grammar@@Base>
   13dd0:	ldrd	r2, [r4, #8]
   13dd4:	mov	r0, #3
   13dd8:	adds	r2, r2, #1
   13ddc:	adc	r3, r3, #0
   13de0:	strd	r2, [r4, #8]
   13de4:	bl	118e0 <malloc@plt>
   13de8:	mov	r7, r0
   13dec:	mov	r0, #3
   13df0:	bl	118e0 <malloc@plt>
   13df4:	mov	r1, #33	; 0x21
   13df8:	mov	r2, #61	; 0x3d
   13dfc:	mov	r3, #0
   13e00:	strb	r1, [r7]
   13e04:	strb	r2, [r7, #1]
   13e08:	strb	r3, [r7, #2]
   13e0c:	mov	r6, r0
   13e10:	strb	r1, [r0]
   13e14:	strb	r2, [r6, #1]
   13e18:	strb	r3, [r6, #2]
   13e1c:	mov	r0, #84	; 0x54
   13e20:	bl	118e0 <malloc@plt>
   13e24:	mov	r5, r0
   13e28:	mov	r0, #4
   13e2c:	bl	118e0 <malloc@plt>
   13e30:	str	r0, [r5]
   13e34:	bl	14240 <init_token_opar@@Base>
   13e38:	ldrd	r2, [r4, #16]
   13e3c:	mov	r0, #8
   13e40:	adds	r2, r2, #1
   13e44:	adc	r3, r3, #0
   13e48:	strd	r2, [r4, #16]
   13e4c:	bl	118e0 <malloc@plt>
   13e50:	mov	r1, #1
   13e54:	str	r0, [r5, #4]
   13e58:	bl	141e8 <init_token_int_value@@Base>
   13e5c:	ldrd	r2, [r4, #24]
   13e60:	mov	r0, #8
   13e64:	adds	r2, r2, #1
   13e68:	adc	r3, r3, #0
   13e6c:	strd	r2, [r4, #24]
   13e70:	bl	118e0 <malloc@plt>
   13e74:	mov	r1, #1
   13e78:	str	r0, [r5, #8]
   13e7c:	bl	141e8 <init_token_int_value@@Base>
   13e80:	ldrd	r2, [r4, #32]
   13e84:	mov	r0, #8
   13e88:	adds	r2, r2, #1
   13e8c:	adc	r3, r3, #0
   13e90:	strd	r2, [r4, #32]
   13e94:	bl	118e0 <malloc@plt>
   13e98:	mov	r1, r7
   13e9c:	str	r0, [r5, #12]
   13ea0:	bl	14384 <init_token_boolean_op@@Base>
   13ea4:	ldrd	r2, [r4, #40]	; 0x28
   13ea8:	mov	r0, #8
   13eac:	adds	r2, r2, #1
   13eb0:	adc	r3, r3, #0
   13eb4:	strd	r2, [r4, #40]	; 0x28
   13eb8:	bl	118e0 <malloc@plt>
   13ebc:	mov	r1, #1
   13ec0:	str	r0, [r5, #16]
   13ec4:	bl	141e8 <init_token_int_value@@Base>
   13ec8:	ldrd	r2, [r4, #48]	; 0x30
   13ecc:	mov	r0, #4
   13ed0:	adds	r2, r2, #1
   13ed4:	adc	r3, r3, #0
   13ed8:	strd	r2, [r4, #48]	; 0x30
   13edc:	bl	118e0 <malloc@plt>
   13ee0:	str	r0, [r5, #20]
   13ee4:	bl	14264 <init_token_cpar@@Base>
   13ee8:	ldrd	r2, [r4, #56]	; 0x38
   13eec:	mov	r0, #4
   13ef0:	adds	r2, r2, #1
   13ef4:	adc	r3, r3, #0
   13ef8:	strd	r2, [r4, #56]	; 0x38
   13efc:	bl	118e0 <malloc@plt>
   13f00:	str	r0, [r5, #24]
   13f04:	bl	14288 <init_token_obra@@Base>
   13f08:	ldrd	r2, [r4, #64]	; 0x40
   13f0c:	mov	r0, #4
   13f10:	adds	r2, r2, #1
   13f14:	adc	r3, r3, #0
   13f18:	strd	r2, [r4, #64]	; 0x40
   13f1c:	bl	118e0 <malloc@plt>
   13f20:	str	r0, [r5, #28]
   13f24:	bl	142ac <init_token_cbra@@Base>
   13f28:	ldrd	r2, [r4, #72]	; 0x48
   13f2c:	mov	r0, #4
   13f30:	adds	r2, r2, #1
   13f34:	adc	r3, r3, #0
   13f38:	strd	r2, [r4, #72]	; 0x48
   13f3c:	bl	118e0 <malloc@plt>
   13f40:	str	r0, [r5, #32]
   13f44:	bl	14360 <init_token_else@@Base>
   13f48:	ldrd	r2, [r4, #80]	; 0x50
   13f4c:	mov	r0, #4
   13f50:	adds	r2, r2, #1
   13f54:	adc	r3, r3, #0
   13f58:	strd	r2, [r4, #80]	; 0x50
   13f5c:	bl	118e0 <malloc@plt>
   13f60:	str	r0, [r5, #36]	; 0x24
   13f64:	bl	14288 <init_token_obra@@Base>
   13f68:	ldrd	r2, [r4, #88]	; 0x58
   13f6c:	mov	r0, #4
   13f70:	adds	r2, r2, #1
   13f74:	adc	r3, r3, #0
   13f78:	strd	r2, [r4, #88]	; 0x58
   13f7c:	bl	118e0 <malloc@plt>
   13f80:	str	r0, [r5, #40]	; 0x28
   13f84:	bl	1433c <init_token_if@@Base>
   13f88:	ldrd	r2, [r4, #96]	; 0x60
   13f8c:	mov	r0, #4
   13f90:	adds	r2, r2, #1
   13f94:	adc	r3, r3, #0
   13f98:	strd	r2, [r4, #96]	; 0x60
   13f9c:	bl	118e0 <malloc@plt>
   13fa0:	str	r0, [r5, #44]	; 0x2c
   13fa4:	bl	14240 <init_token_opar@@Base>
   13fa8:	ldrd	r2, [r4, #104]	; 0x68
   13fac:	mov	r0, #8
   13fb0:	adds	r2, r2, #1
   13fb4:	adc	r3, r3, #0
   13fb8:	strd	r2, [r4, #104]	; 0x68
   13fbc:	bl	118e0 <malloc@plt>
   13fc0:	mov	r1, #1
   13fc4:	str	r0, [r5, #48]	; 0x30
   13fc8:	bl	141e8 <init_token_int_value@@Base>
   13fcc:	ldrd	r2, [r4, #112]	; 0x70
   13fd0:	mov	r0, #8
   13fd4:	adds	r2, r2, #1
   13fd8:	adc	r3, r3, #0
   13fdc:	strd	r2, [r4, #112]	; 0x70
   13fe0:	bl	118e0 <malloc@plt>
   13fe4:	mov	r1, #1
   13fe8:	str	r0, [r5, #52]	; 0x34
   13fec:	bl	141e8 <init_token_int_value@@Base>
   13ff0:	ldrd	r2, [r4, #120]	; 0x78
   13ff4:	mov	r0, #8
   13ff8:	adds	r2, r2, #1
   13ffc:	adc	r3, r3, #0
   14000:	strd	r2, [r4, #120]	; 0x78
   14004:	bl	118e0 <malloc@plt>
   14008:	mov	r1, r6
   1400c:	str	r0, [r5, #56]	; 0x38
   14010:	bl	14384 <init_token_boolean_op@@Base>
   14014:	ldrd	r2, [r4, #128]	; 0x80
   14018:	mov	r0, #8
   1401c:	adds	r2, r2, #1
   14020:	adc	r3, r3, #0
   14024:	strd	r2, [r4, #128]	; 0x80
   14028:	bl	118e0 <malloc@plt>
   1402c:	mov	r1, #1
   14030:	str	r0, [r5, #60]	; 0x3c
   14034:	bl	141e8 <init_token_int_value@@Base>
   14038:	ldrd	r2, [r4, #136]	; 0x88
   1403c:	mov	r0, #4
   14040:	adds	r2, r2, #1
   14044:	adc	r3, r3, #0
   14048:	strd	r2, [r4, #136]	; 0x88
   1404c:	bl	118e0 <malloc@plt>
   14050:	str	r0, [r5, #64]	; 0x40
   14054:	bl	14264 <init_token_cpar@@Base>
   14058:	ldrd	r2, [r4, #144]	; 0x90
   1405c:	mov	r0, #4
   14060:	adds	r2, r2, #1
   14064:	adc	r3, r3, #0
   14068:	strd	r2, [r4, #144]	; 0x90
   1406c:	bl	118e0 <malloc@plt>
   14070:	str	r0, [r5, #68]	; 0x44
   14074:	bl	14288 <init_token_obra@@Base>
   14078:	ldrd	r2, [r4, #152]	; 0x98
   1407c:	mov	r0, #4
   14080:	adds	r2, r2, #1
   14084:	adc	r3, r3, #0
   14088:	strd	r2, [r4, #152]	; 0x98
   1408c:	bl	118e0 <malloc@plt>
   14090:	str	r0, [r5, #72]	; 0x48
   14094:	bl	142ac <init_token_cbra@@Base>
   14098:	ldrd	r2, [r4, #160]	; 0xa0
   1409c:	mov	r0, #4
   140a0:	adds	r2, r2, #1
   140a4:	adc	r3, r3, #0
   140a8:	strd	r2, [r4, #160]	; 0xa0
   140ac:	bl	118e0 <malloc@plt>
   140b0:	str	r0, [r5, #76]	; 0x4c
   140b4:	bl	142ac <init_token_cbra@@Base>
   140b8:	ldrd	r2, [r4, #168]	; 0xa8
   140bc:	mov	r0, #4
   140c0:	adds	r2, r2, #1
   140c4:	adc	r3, r3, #0
   140c8:	strd	r2, [r4, #168]	; 0xa8
   140cc:	bl	118e0 <malloc@plt>
   140d0:	str	r0, [r5, #80]	; 0x50
   140d4:	bl	142ac <init_token_cbra@@Base>
   140d8:	ldrd	r2, [r4, #176]	; 0xb0
   140dc:	mov	r1, #21
   140e0:	mov	r0, sp
   140e4:	adds	r2, r2, #1
   140e8:	adc	r3, r3, #0
   140ec:	str	r5, [r8, #228]	; 0xe4
   140f0:	strd	r2, [r4, #176]	; 0xb0
   140f4:	str	r1, [r8, #220]	; 0xdc
   140f8:	bl	168a4 <read_if_statement@@Base>
   140fc:	ldr	r3, [r8, #204]	; 0xcc
   14100:	cmp	r3, #21
   14104:	bne	14134 <if_statement_inside_else_statement@@Base+0x390>
   14108:	cmp	r0, #0
   1410c:	beq	1417c <if_statement_inside_else_statement@@Base+0x3d8>
   14110:	ldr	r3, [r0]
   14114:	cmp	r3, #4
   14118:	bne	14158 <if_statement_inside_else_statement@@Base+0x3b4>
   1411c:	ldrd	r2, [r4, #200]	; 0xc8
   14120:	adds	r2, r2, #1
   14124:	adc	r3, r3, #0
   14128:	strd	r2, [r4, #200]	; 0xc8
   1412c:	add	sp, sp, #16
   14130:	pop	{r4, r5, r6, r7, r8, pc}
   14134:	ldrd	r6, [r4, #184]	; 0xb8
   14138:	ldr	r3, [pc, #104]	; 141a8 <if_statement_inside_else_statement@@Base+0x404>
   1413c:	ldr	r2, [pc, #104]	; 141ac <if_statement_inside_else_statement@@Base+0x408>
   14140:	adds	r6, r6, #1
   14144:	adc	r7, r7, #0
   14148:	ldr	r1, [pc, #96]	; 141b0 <if_statement_inside_else_statement@@Base+0x40c>
   1414c:	ldr	r0, [pc, #96]	; 141b4 <if_statement_inside_else_statement@@Base+0x410>
   14150:	strd	r6, [r4, #184]	; 0xb8
   14154:	bl	119f4 <__assert_fail@plt>
   14158:	ldrd	r6, [r4, #208]	; 0xd0
   1415c:	ldr	r3, [pc, #68]	; 141a8 <if_statement_inside_else_statement@@Base+0x404>
   14160:	mov	r2, #560	; 0x230
   14164:	adds	r6, r6, #1
   14168:	adc	r7, r7, #0
   1416c:	ldr	r1, [pc, #60]	; 141b0 <if_statement_inside_else_statement@@Base+0x40c>
   14170:	ldr	r0, [pc, #64]	; 141b8 <if_statement_inside_else_statement@@Base+0x414>
   14174:	strd	r6, [r4, #208]	; 0xd0
   14178:	bl	119f4 <__assert_fail@plt>
   1417c:	ldrd	r6, [r4, #192]	; 0xc0
   14180:	ldr	r3, [pc, #32]	; 141a8 <if_statement_inside_else_statement@@Base+0x404>
   14184:	ldr	r2, [pc, #48]	; 141bc <if_statement_inside_else_statement@@Base+0x418>
   14188:	adds	r6, r6, #1
   1418c:	adc	r7, r7, #0
   14190:	ldr	r1, [pc, #24]	; 141b0 <if_statement_inside_else_statement@@Base+0x40c>
   14194:	ldr	r0, [pc, #36]	; 141c0 <if_statement_inside_else_statement@@Base+0x41c>
   14198:	strd	r6, [r4, #192]	; 0xc0
   1419c:	bl	119f4 <__assert_fail@plt>
   141a0:	muleq	r2, r8, lr
   141a4:	strdeq	fp, [r2], -r0
   141a8:	andeq	r9, r1, r4, lsl #7
   141ac:	andeq	r0, r0, lr, lsr #4
   141b0:	andeq	r9, r1, r8, lsr #7
   141b4:	andeq	r9, r1, r4, lsr r6
   141b8:	andeq	r9, r1, ip, ror #10
   141bc:	andeq	r0, r0, pc, lsr #4
   141c0:	andeq	r9, r1, r0, ror #10

000141c4 <init_token_int_type@@Base>:
   141c4:	ldr	r1, [pc, #24]	; 141e4 <init_token_int_type@@Base+0x20>
   141c8:	mov	ip, #0
   141cc:	str	ip, [r0]
   141d0:	ldrd	r2, [r1]
   141d4:	adds	r2, r2, #1
   141d8:	adc	r3, r3, #0
   141dc:	strd	r2, [r1]
   141e0:	bx	lr
   141e4:	andeq	fp, r2, r8, lsr r1

000141e8 <init_token_int_value@@Base>:
   141e8:	ldr	ip, [pc, #32]	; 14210 <init_token_int_value@@Base+0x28>
   141ec:	push	{lr}		; (str lr, [sp, #-4]!)
   141f0:	mov	lr, #1
   141f4:	ldrd	r2, [ip, #8]
   141f8:	str	r1, [r0, #4]
   141fc:	str	lr, [r0]
   14200:	adds	r2, r2, #1
   14204:	adc	r3, r3, #0
   14208:	strd	r2, [ip, #8]
   1420c:	pop	{pc}		; (ldr pc, [sp], #4)
   14210:	andeq	fp, r2, r8, lsr r1

00014214 <init_token_function@@Base>:
   14214:	ldr	ip, [pc, #32]	; 1423c <init_token_function@@Base+0x28>
   14218:	push	{lr}		; (str lr, [sp, #-4]!)
   1421c:	mov	lr, #2
   14220:	ldrd	r2, [ip, #16]
   14224:	str	r1, [r0, #4]
   14228:	str	lr, [r0]
   1422c:	adds	r2, r2, #1
   14230:	adc	r3, r3, #0
   14234:	strd	r2, [ip, #16]
   14238:	pop	{pc}		; (ldr pc, [sp], #4)
   1423c:	andeq	fp, r2, r8, lsr r1

00014240 <init_token_opar@@Base>:
   14240:	ldr	r1, [pc, #24]	; 14260 <init_token_opar@@Base+0x20>
   14244:	mov	r3, #3
   14248:	str	r3, [r0]
   1424c:	ldrd	r2, [r1, #24]
   14250:	adds	r2, r2, #1
   14254:	adc	r3, r3, #0
   14258:	strd	r2, [r1, #24]
   1425c:	bx	lr
   14260:	andeq	fp, r2, r8, lsr r1

00014264 <init_token_cpar@@Base>:
   14264:	ldr	r1, [pc, #24]	; 14284 <init_token_cpar@@Base+0x20>
   14268:	mov	r3, #4
   1426c:	str	r3, [r0]
   14270:	ldrd	r2, [r1, #32]
   14274:	adds	r2, r2, #1
   14278:	adc	r3, r3, #0
   1427c:	strd	r2, [r1, #32]
   14280:	bx	lr
   14284:	andeq	fp, r2, r8, lsr r1

00014288 <init_token_obra@@Base>:
   14288:	ldr	r1, [pc, #24]	; 142a8 <init_token_obra@@Base+0x20>
   1428c:	mov	r3, #5
   14290:	str	r3, [r0]
   14294:	ldrd	r2, [r1, #40]	; 0x28
   14298:	adds	r2, r2, #1
   1429c:	adc	r3, r3, #0
   142a0:	strd	r2, [r1, #40]	; 0x28
   142a4:	bx	lr
   142a8:	andeq	fp, r2, r8, lsr r1

000142ac <init_token_cbra@@Base>:
   142ac:	ldr	r1, [pc, #24]	; 142cc <init_token_cbra@@Base+0x20>
   142b0:	mov	r3, #6
   142b4:	str	r3, [r0]
   142b8:	ldrd	r2, [r1, #48]	; 0x30
   142bc:	adds	r2, r2, #1
   142c0:	adc	r3, r3, #0
   142c4:	strd	r2, [r1, #48]	; 0x30
   142c8:	bx	lr
   142cc:	andeq	fp, r2, r8, lsr r1

000142d0 <init_token_return@@Base>:
   142d0:	ldr	r1, [pc, #24]	; 142f0 <init_token_return@@Base+0x20>
   142d4:	mov	r3, #7
   142d8:	str	r3, [r0]
   142dc:	ldrd	r2, [r1, #56]	; 0x38
   142e0:	adds	r2, r2, #1
   142e4:	adc	r3, r3, #0
   142e8:	strd	r2, [r1, #56]	; 0x38
   142ec:	bx	lr
   142f0:	andeq	fp, r2, r8, lsr r1

000142f4 <init_token_semicolon@@Base>:
   142f4:	ldr	r1, [pc, #24]	; 14314 <init_token_semicolon@@Base+0x20>
   142f8:	mov	r3, #8
   142fc:	str	r3, [r0]
   14300:	ldrd	r2, [r1, #64]	; 0x40
   14304:	adds	r2, r2, #1
   14308:	adc	r3, r3, #0
   1430c:	strd	r2, [r1, #64]	; 0x40
   14310:	bx	lr
   14314:	andeq	fp, r2, r8, lsr r1

00014318 <init_token_eof@@Base>:
   14318:	ldr	r1, [pc, #24]	; 14338 <init_token_eof@@Base+0x20>
   1431c:	mov	r3, #9
   14320:	str	r3, [r0]
   14324:	ldrd	r2, [r1, #72]	; 0x48
   14328:	adds	r2, r2, #1
   1432c:	adc	r3, r3, #0
   14330:	strd	r2, [r1, #72]	; 0x48
   14334:	bx	lr
   14338:	andeq	fp, r2, r8, lsr r1

0001433c <init_token_if@@Base>:
   1433c:	ldr	r1, [pc, #24]	; 1435c <init_token_if@@Base+0x20>
   14340:	mov	r3, #10
   14344:	str	r3, [r0]
   14348:	ldrd	r2, [r1, #80]	; 0x50
   1434c:	adds	r2, r2, #1
   14350:	adc	r3, r3, #0
   14354:	strd	r2, [r1, #80]	; 0x50
   14358:	bx	lr
   1435c:	andeq	fp, r2, r8, lsr r1

00014360 <init_token_else@@Base>:
   14360:	ldr	r1, [pc, #24]	; 14380 <init_token_else@@Base+0x20>
   14364:	mov	r3, #11
   14368:	str	r3, [r0]
   1436c:	ldrd	r2, [r1, #88]	; 0x58
   14370:	adds	r2, r2, #1
   14374:	adc	r3, r3, #0
   14378:	strd	r2, [r1, #88]	; 0x58
   1437c:	bx	lr
   14380:	andeq	fp, r2, r8, lsr r1

00014384 <init_token_boolean_op@@Base>:
   14384:	ldr	ip, [pc, #32]	; 143ac <init_token_boolean_op@@Base+0x28>
   14388:	push	{lr}		; (str lr, [sp, #-4]!)
   1438c:	mov	lr, #12
   14390:	ldrd	r2, [ip, #96]	; 0x60
   14394:	str	r1, [r0, #4]
   14398:	str	lr, [r0]
   1439c:	adds	r2, r2, #1
   143a0:	adc	r3, r3, #0
   143a4:	strd	r2, [ip, #96]	; 0x60
   143a8:	pop	{pc}		; (ldr pc, [sp], #4)
   143ac:	andeq	fp, r2, r8, lsr r1

000143b0 <free_token_int_type@@Base>:
   143b0:	ldr	r1, [pc, #16]	; 143c8 <free_token_int_type@@Base+0x18>
   143b4:	ldrd	r2, [r1, #104]	; 0x68
   143b8:	adds	r2, r2, #1
   143bc:	adc	r3, r3, #0
   143c0:	strd	r2, [r1, #104]	; 0x68
   143c4:	b	11880 <free@plt>
   143c8:	andeq	fp, r2, r8, lsr r1

000143cc <free_token_int_value@@Base>:
   143cc:	ldr	r1, [pc, #16]	; 143e4 <free_token_int_value@@Base+0x18>
   143d0:	ldrd	r2, [r1, #112]	; 0x70
   143d4:	adds	r2, r2, #1
   143d8:	adc	r3, r3, #0
   143dc:	strd	r2, [r1, #112]	; 0x70
   143e0:	b	11880 <free@plt>
   143e4:	andeq	fp, r2, r8, lsr r1

000143e8 <free_token_function@@Base>:
   143e8:	ldr	r1, [pc, #16]	; 14400 <free_token_function@@Base+0x18>
   143ec:	ldrd	r2, [r1, #120]	; 0x78
   143f0:	adds	r2, r2, #1
   143f4:	adc	r3, r3, #0
   143f8:	strd	r2, [r1, #120]	; 0x78
   143fc:	b	11880 <free@plt>
   14400:	andeq	fp, r2, r8, lsr r1

00014404 <free_token_opar@@Base>:
   14404:	ldr	r1, [pc, #16]	; 1441c <free_token_opar@@Base+0x18>
   14408:	ldrd	r2, [r1, #128]	; 0x80
   1440c:	adds	r2, r2, #1
   14410:	adc	r3, r3, #0
   14414:	strd	r2, [r1, #128]	; 0x80
   14418:	b	11880 <free@plt>
   1441c:	andeq	fp, r2, r8, lsr r1

00014420 <free_token_cpar@@Base>:
   14420:	ldr	r1, [pc, #16]	; 14438 <free_token_cpar@@Base+0x18>
   14424:	ldrd	r2, [r1, #136]	; 0x88
   14428:	adds	r2, r2, #1
   1442c:	adc	r3, r3, #0
   14430:	strd	r2, [r1, #136]	; 0x88
   14434:	b	11880 <free@plt>
   14438:	andeq	fp, r2, r8, lsr r1

0001443c <free_token_obra@@Base>:
   1443c:	ldr	r1, [pc, #16]	; 14454 <free_token_obra@@Base+0x18>
   14440:	ldrd	r2, [r1, #144]	; 0x90
   14444:	adds	r2, r2, #1
   14448:	adc	r3, r3, #0
   1444c:	strd	r2, [r1, #144]	; 0x90
   14450:	b	11880 <free@plt>
   14454:	andeq	fp, r2, r8, lsr r1

00014458 <free_token_cbra@@Base>:
   14458:	ldr	r1, [pc, #16]	; 14470 <free_token_cbra@@Base+0x18>
   1445c:	ldrd	r2, [r1, #152]	; 0x98
   14460:	adds	r2, r2, #1
   14464:	adc	r3, r3, #0
   14468:	strd	r2, [r1, #152]	; 0x98
   1446c:	b	11880 <free@plt>
   14470:	andeq	fp, r2, r8, lsr r1

00014474 <free_token_return@@Base>:
   14474:	ldr	r1, [pc, #16]	; 1448c <free_token_return@@Base+0x18>
   14478:	ldrd	r2, [r1, #160]	; 0xa0
   1447c:	adds	r2, r2, #1
   14480:	adc	r3, r3, #0
   14484:	strd	r2, [r1, #160]	; 0xa0
   14488:	b	11880 <free@plt>
   1448c:	andeq	fp, r2, r8, lsr r1

00014490 <free_token_semicolon@@Base>:
   14490:	ldr	r1, [pc, #16]	; 144a8 <free_token_semicolon@@Base+0x18>
   14494:	ldrd	r2, [r1, #168]	; 0xa8
   14498:	adds	r2, r2, #1
   1449c:	adc	r3, r3, #0
   144a0:	strd	r2, [r1, #168]	; 0xa8
   144a4:	b	11880 <free@plt>
   144a8:	andeq	fp, r2, r8, lsr r1

000144ac <free_token_eof@@Base>:
   144ac:	ldr	r1, [pc, #16]	; 144c4 <free_token_eof@@Base+0x18>
   144b0:	ldrd	r2, [r1, #176]	; 0xb0
   144b4:	adds	r2, r2, #1
   144b8:	adc	r3, r3, #0
   144bc:	strd	r2, [r1, #176]	; 0xb0
   144c0:	b	11880 <free@plt>
   144c4:	andeq	fp, r2, r8, lsr r1

000144c8 <free_token_if@@Base>:
   144c8:	ldr	r1, [pc, #16]	; 144e0 <free_token_if@@Base+0x18>
   144cc:	ldrd	r2, [r1, #184]	; 0xb8
   144d0:	adds	r2, r2, #1
   144d4:	adc	r3, r3, #0
   144d8:	strd	r2, [r1, #184]	; 0xb8
   144dc:	b	11880 <free@plt>
   144e0:	andeq	fp, r2, r8, lsr r1

000144e4 <free_token_else@@Base>:
   144e4:	ldr	r1, [pc, #16]	; 144fc <free_token_else@@Base+0x18>
   144e8:	ldrd	r2, [r1, #192]	; 0xc0
   144ec:	adds	r2, r2, #1
   144f0:	adc	r3, r3, #0
   144f4:	strd	r2, [r1, #192]	; 0xc0
   144f8:	b	11880 <free@plt>
   144fc:	andeq	fp, r2, r8, lsr r1

00014500 <free_token_boolean_op@@Base>:
   14500:	push	{r4, r5, r6, lr}
   14504:	mov	r5, r0
   14508:	ldr	r4, [pc, #56]	; 14548 <free_token_boolean_op@@Base+0x48>
   1450c:	ldr	r0, [r0, #4]
   14510:	ldrd	r2, [r4, #200]	; 0xc8
   14514:	adds	r2, r2, #1
   14518:	adc	r3, r3, #0
   1451c:	cmp	r0, #0
   14520:	strd	r2, [r4, #200]	; 0xc8
   14524:	beq	1453c <free_token_boolean_op@@Base+0x3c>
   14528:	bl	11880 <free@plt>
   1452c:	ldrd	r2, [r4, #208]	; 0xd0
   14530:	adds	r2, r2, #1
   14534:	adc	r3, r3, #0
   14538:	strd	r2, [r4, #208]	; 0xd0
   1453c:	mov	r0, r5
   14540:	pop	{r4, r5, r6, lr}
   14544:	b	11880 <free@plt>
   14548:	andeq	fp, r2, r8, lsr r1

0001454c <init_ast_base@@Base>:
   1454c:	ldr	r3, [pc, #28]	; 14570 <init_ast_base@@Base+0x24>
   14550:	push	{r4, r5}
   14554:	ldrd	r4, [r3]
   14558:	stm	r0, {r1, r2}
   1455c:	adds	r4, r4, #1
   14560:	adc	r5, r5, #0
   14564:	strd	r4, [r3]
   14568:	pop	{r4, r5}
   1456c:	bx	lr
   14570:	andeq	fp, r2, r0, lsl r2

00014574 <init_ast_base_single@@Base>:
   14574:	ldr	ip, [pc, #28]	; 14598 <init_ast_base_single@@Base+0x24>
   14578:	push	{lr}		; (str lr, [sp, #-4]!)
   1457c:	mov	lr, #0
   14580:	ldrd	r2, [ip, #8]
   14584:	stm	r0, {r1, lr}
   14588:	adds	r2, r2, #1
   1458c:	adc	r3, r3, #0
   14590:	strd	r2, [ip, #8]
   14594:	pop	{pc}		; (ldr pc, [sp], #4)
   14598:	andeq	fp, r2, r0, lsl r2

0001459c <init_node_id@@Base>:
   1459c:	ldr	ip, [pc, #36]	; 145c8 <init_node_id@@Base+0x2c>
   145a0:	push	{lr}		; (str lr, [sp, #-4]!)
   145a4:	mov	lr, #0
   145a8:	ldrd	r2, [ip, #16]
   145ac:	str	r1, [r0, #8]
   145b0:	str	lr, [r0]
   145b4:	adds	r2, r2, #1
   145b8:	adc	r3, r3, #0
   145bc:	str	lr, [r0, #4]
   145c0:	strd	r2, [ip, #16]
   145c4:	pop	{pc}		; (ldr pc, [sp], #4)
   145c8:	andeq	fp, r2, r0, lsl r2

000145cc <init_node_int@@Base>:
   145cc:	ldr	ip, [pc, #36]	; 145f8 <init_node_int@@Base+0x2c>
   145d0:	push	{r4, lr}
   145d4:	mov	r4, #1
   145d8:	ldrd	r2, [ip, #24]
   145dc:	mov	lr, #0
   145e0:	str	r1, [r0, #8]
   145e4:	adds	r2, r2, #1
   145e8:	adc	r3, r3, #0
   145ec:	stm	r0, {r4, lr}
   145f0:	strd	r2, [ip, #24]
   145f4:	pop	{r4, pc}
   145f8:	andeq	fp, r2, r0, lsl r2

000145fc <init_node_function@@Base>:
   145fc:	ldr	r3, [pc, #44]	; 14630 <init_node_function@@Base+0x34>
   14600:	push	{r4, r5, lr}
   14604:	mov	ip, #0
   14608:	ldrd	r4, [r3, #32]
   1460c:	mov	lr, #2
   14610:	str	r1, [r0, #8]
   14614:	adds	r4, r4, #1
   14618:	adc	r5, r5, #0
   1461c:	str	r2, [r0, #12]
   14620:	str	lr, [r0]
   14624:	str	ip, [r0, #4]
   14628:	strd	r4, [r3, #32]
   1462c:	pop	{r4, r5, pc}
   14630:	andeq	fp, r2, r0, lsl r2

00014634 <init_node_return@@Base>:
   14634:	ldr	ip, [pc, #36]	; 14660 <init_node_return@@Base+0x2c>
   14638:	push	{r4, lr}
   1463c:	mov	r4, #3
   14640:	ldrd	r2, [ip, #40]	; 0x28
   14644:	mov	lr, #0
   14648:	str	r1, [r0, #8]
   1464c:	adds	r2, r2, #1
   14650:	adc	r3, r3, #0
   14654:	stm	r0, {r4, lr}
   14658:	strd	r2, [ip, #40]	; 0x28
   1465c:	pop	{r4, pc}
   14660:	andeq	fp, r2, r0, lsl r2

00014664 <init_node_if@@Base>:
   14664:	ldr	ip, [pc, #48]	; 1469c <init_node_if@@Base+0x38>
   14668:	push	{r4, r5, lr}
   1466c:	mov	lr, #4
   14670:	ldrd	r4, [ip, #48]	; 0x30
   14674:	str	r2, [r0, #12]
   14678:	mov	r2, #0
   1467c:	adds	r4, r4, #1
   14680:	adc	r5, r5, #0
   14684:	str	r1, [r0, #8]
   14688:	str	r3, [r0, #16]
   1468c:	str	lr, [r0]
   14690:	str	r2, [r0, #4]
   14694:	strd	r4, [ip, #48]	; 0x30
   14698:	pop	{r4, r5, pc}
   1469c:	andeq	fp, r2, r0, lsl r2

000146a0 <init_node_boolean_operator@@Base>:
   146a0:	ldr	ip, [pc, #44]	; 146d4 <init_node_boolean_operator@@Base+0x34>
   146a4:	push	{r4, r5, lr}
   146a8:	mov	lr, #0
   146ac:	ldrd	r4, [ip, #56]	; 0x38
   146b0:	str	r2, [r0, #8]
   146b4:	mov	r2, #5
   146b8:	adds	r4, r4, #1
   146bc:	adc	r5, r5, #0
   146c0:	str	r1, [r0, #16]
   146c4:	str	r3, [r0, #12]
   146c8:	stm	r0, {r2, lr}
   146cc:	strd	r4, [ip, #56]	; 0x38
   146d0:	pop	{r4, r5, pc}
   146d4:	andeq	fp, r2, r0, lsl r2

000146d8 <free_node_if@@Base>:
   146d8:	push	{r4, r5, r6, lr}
   146dc:	mov	r5, r0
   146e0:	ldr	r4, [pc, #144]	; 14778 <free_node_if@@Base+0xa0>
   146e4:	ldr	r0, [r0, #4]
   146e8:	ldrd	r2, [r4, #64]	; 0x40
   146ec:	adds	r2, r2, #1
   146f0:	adc	r3, r3, #0
   146f4:	cmp	r0, #0
   146f8:	strd	r2, [r4, #64]	; 0x40
   146fc:	beq	14724 <free_node_if@@Base+0x4c>
   14700:	ldrd	r2, [r4, #72]	; 0x48
   14704:	adds	r2, r2, #1
   14708:	adc	r3, r3, #0
   1470c:	strd	r2, [r4, #72]	; 0x48
   14710:	bl	1477c <free_node@@Base>
   14714:	ldrd	r2, [r4, #80]	; 0x50
   14718:	adds	r2, r2, #1
   1471c:	adc	r3, r3, #0
   14720:	strd	r2, [r4, #80]	; 0x50
   14724:	ldr	r0, [r5, #8]
   14728:	bl	1477c <free_node@@Base>
   1472c:	ldrd	r2, [r4, #88]	; 0x58
   14730:	ldr	r0, [r5, #12]
   14734:	adds	r2, r2, #1
   14738:	adc	r3, r3, #0
   1473c:	strd	r2, [r4, #88]	; 0x58
   14740:	bl	1477c <free_node@@Base>
   14744:	ldrd	r2, [r4, #96]	; 0x60
   14748:	ldr	r0, [r5, #16]
   1474c:	adds	r2, r2, #1
   14750:	adc	r3, r3, #0
   14754:	strd	r2, [r4, #96]	; 0x60
   14758:	bl	1477c <free_node@@Base>
   1475c:	ldrd	r2, [r4, #104]	; 0x68
   14760:	mov	r0, r5
   14764:	adds	r2, r2, #1
   14768:	adc	r3, r3, #0
   1476c:	strd	r2, [r4, #104]	; 0x68
   14770:	pop	{r4, r5, r6, lr}
   14774:	b	11880 <free@plt>
   14778:	andeq	fp, r2, r0, lsl r2

0001477c <free_node@@Base>:
   1477c:	ldr	r3, [r0]
   14780:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14784:	mov	r5, r0
   14788:	ldr	r4, [pc, #752]	; 14a80 <free_node@@Base+0x304>
   1478c:	cmp	r3, #5
   14790:	ldrls	pc, [pc, r3, lsl #2]
   14794:	b	14a40 <free_node@@Base+0x2c4>
   14798:	andeq	r4, r1, r0, asr r8
   1479c:			; <UNDEFINED> instruction: 0x000148bc
   147a0:	andeq	r4, r1, r0, lsr r9
   147a4:	andeq	r4, r1, r8, lsr #19
   147a8:	andeq	r4, r1, r8, lsl sl
   147ac:			; <UNDEFINED> instruction: 0x000147b0
   147b0:	add	r6, r4, #320	; 0x140
   147b4:	ldrd	r2, [r4, #160]	; 0xa0
   147b8:	ldrd	r8, [r6]
   147bc:	ldr	r0, [r0, #4]
   147c0:	adds	r2, r2, #1
   147c4:	adc	r3, r3, #0
   147c8:	adds	r8, r8, #1
   147cc:	adc	r9, r9, #0
   147d0:	cmp	r0, #0
   147d4:	strd	r2, [r4, #160]	; 0xa0
   147d8:	strd	r8, [r6]
   147dc:	beq	14804 <free_node@@Base+0x88>
   147e0:	ldrd	r2, [r6, #8]
   147e4:	adds	r2, r2, #1
   147e8:	adc	r3, r3, #0
   147ec:	strd	r2, [r6, #8]
   147f0:	bl	1477c <free_node@@Base>
   147f4:	ldrd	r2, [r6, #16]
   147f8:	adds	r2, r2, #1
   147fc:	adc	r3, r3, #0
   14800:	strd	r2, [r6, #16]
   14804:	ldr	r0, [r5, #8]
   14808:	bl	1477c <free_node@@Base>
   1480c:	ldrd	r2, [r6, #24]
   14810:	ldr	r0, [r5, #12]
   14814:	adds	r2, r2, #1
   14818:	adc	r3, r3, #0
   1481c:	strd	r2, [r6, #24]
   14820:	bl	1477c <free_node@@Base>
   14824:	ldrd	r2, [r6, #32]
   14828:	mov	r0, r5
   1482c:	adds	r2, r2, #1
   14830:	adc	r3, r3, #0
   14834:	strd	r2, [r6, #32]
   14838:	bl	11880 <free@plt>
   1483c:	ldrd	r2, [r4, #200]	; 0xc8
   14840:	adds	r2, r2, #1
   14844:	adc	r3, r3, #0
   14848:	strd	r2, [r4, #200]	; 0xc8
   1484c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14850:	ldrd	r6, [r4, #120]	; 0x78
   14854:	ldrd	r2, [r4, #224]	; 0xe0
   14858:	ldr	r0, [r0, #4]
   1485c:	adds	r6, r6, #1
   14860:	adc	r7, r7, #0
   14864:	adds	r2, r2, #1
   14868:	adc	r3, r3, #0
   1486c:	cmp	r0, #0
   14870:	strd	r6, [r4, #120]	; 0x78
   14874:	strd	r2, [r4, #224]	; 0xe0
   14878:	beq	148a0 <free_node@@Base+0x124>
   1487c:	ldrd	r2, [r4, #232]	; 0xe8
   14880:	adds	r2, r2, #1
   14884:	adc	r3, r3, #0
   14888:	strd	r2, [r4, #232]	; 0xe8
   1488c:	bl	1477c <free_node@@Base>
   14890:	ldrd	r2, [r4, #240]	; 0xf0
   14894:	adds	r2, r2, #1
   14898:	adc	r3, r3, #0
   1489c:	strd	r2, [r4, #240]	; 0xf0
   148a0:	mov	r0, r5
   148a4:	bl	11880 <free@plt>
   148a8:	ldrd	r2, [r4, #216]	; 0xd8
   148ac:	adds	r2, r2, #1
   148b0:	adc	r3, r3, #0
   148b4:	strd	r2, [r4, #216]	; 0xd8
   148b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   148bc:	ldrd	r6, [r4, #128]	; 0x80
   148c0:	ldrd	r2, [r4, #248]	; 0xf8
   148c4:	ldr	r0, [r0, #4]
   148c8:	adds	r6, r6, #1
   148cc:	adc	r7, r7, #0
   148d0:	adds	r2, r2, #1
   148d4:	adc	r3, r3, #0
   148d8:	cmp	r0, #0
   148dc:	strd	r6, [r4, #128]	; 0x80
   148e0:	strd	r2, [r4, #248]	; 0xf8
   148e4:	beq	14914 <free_node@@Base+0x198>
   148e8:	add	r1, r4, #256	; 0x100
   148ec:	ldrd	r2, [r1]
   148f0:	adds	r2, r2, #1
   148f4:	adc	r3, r3, #0
   148f8:	strd	r2, [r1]
   148fc:	bl	1477c <free_node@@Base>
   14900:	add	r1, r4, #272	; 0x110
   14904:	ldrd	r2, [r1, #-8]
   14908:	adds	r2, r2, #1
   1490c:	adc	r3, r3, #0
   14910:	strd	r2, [r1, #-8]
   14914:	mov	r0, r5
   14918:	bl	11880 <free@plt>
   1491c:	ldrd	r2, [r4, #168]	; 0xa8
   14920:	adds	r2, r2, #1
   14924:	adc	r3, r3, #0
   14928:	strd	r2, [r4, #168]	; 0xa8
   1492c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14930:	add	r8, r4, #272	; 0x110
   14934:	ldrd	r2, [r4, #136]	; 0x88
   14938:	ldrd	r6, [r8]
   1493c:	ldr	r0, [r0, #4]
   14940:	adds	r2, r2, #1
   14944:	adc	r3, r3, #0
   14948:	adds	r6, r6, #1
   1494c:	adc	r7, r7, #0
   14950:	cmp	r0, #0
   14954:	strd	r2, [r4, #136]	; 0x88
   14958:	strd	r6, [r8]
   1495c:	beq	14984 <free_node@@Base+0x208>
   14960:	ldrd	r2, [r8, #8]
   14964:	adds	r2, r2, #1
   14968:	adc	r3, r3, #0
   1496c:	strd	r2, [r8, #8]
   14970:	bl	1477c <free_node@@Base>
   14974:	ldrd	r2, [r8, #16]
   14978:	adds	r2, r2, #1
   1497c:	adc	r3, r3, #0
   14980:	strd	r2, [r8, #16]
   14984:	ldr	r0, [r5, #8]
   14988:	bl	11880 <free@plt>
   1498c:	mov	r0, r5
   14990:	bl	11880 <free@plt>
   14994:	ldrd	r2, [r4, #176]	; 0xb0
   14998:	adds	r2, r2, #1
   1499c:	adc	r3, r3, #0
   149a0:	strd	r2, [r4, #176]	; 0xb0
   149a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   149a8:	add	r8, r4, #304	; 0x130
   149ac:	ldrd	r2, [r4, #144]	; 0x90
   149b0:	ldrd	r6, [r8, #-8]
   149b4:	ldr	r0, [r0, #4]
   149b8:	adds	r2, r2, #1
   149bc:	adc	r3, r3, #0
   149c0:	adds	r6, r6, #1
   149c4:	adc	r7, r7, #0
   149c8:	cmp	r0, #0
   149cc:	strd	r2, [r4, #144]	; 0x90
   149d0:	strd	r6, [r8, #-8]
   149d4:	beq	149fc <free_node@@Base+0x280>
   149d8:	ldrd	r2, [r8]
   149dc:	adds	r2, r2, #1
   149e0:	adc	r3, r3, #0
   149e4:	strd	r2, [r8]
   149e8:	bl	1477c <free_node@@Base>
   149ec:	ldrd	r2, [r8, #8]
   149f0:	adds	r2, r2, #1
   149f4:	adc	r3, r3, #0
   149f8:	strd	r2, [r8, #8]
   149fc:	mov	r0, r5
   14a00:	bl	11880 <free@plt>
   14a04:	ldrd	r2, [r4, #184]	; 0xb8
   14a08:	adds	r2, r2, #1
   14a0c:	adc	r3, r3, #0
   14a10:	strd	r2, [r4, #184]	; 0xb8
   14a14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14a18:	ldrd	r2, [r4, #152]	; 0x98
   14a1c:	adds	r2, r2, #1
   14a20:	adc	r3, r3, #0
   14a24:	strd	r2, [r4, #152]	; 0x98
   14a28:	bl	146d8 <free_node_if@@Base>
   14a2c:	ldrd	r2, [r4, #192]	; 0xc0
   14a30:	adds	r2, r2, #1
   14a34:	adc	r3, r3, #0
   14a38:	strd	r2, [r4, #192]	; 0xc0
   14a3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14a40:	ldrd	r6, [r4, #112]	; 0x70
   14a44:	ldr	r3, [pc, #56]	; 14a84 <free_node@@Base+0x308>
   14a48:	mov	r2, #31
   14a4c:	adds	r6, r6, #1
   14a50:	adc	r7, r7, #0
   14a54:	ldr	r3, [r3]
   14a58:	mov	r1, #1
   14a5c:	ldr	r0, [pc, #36]	; 14a88 <free_node@@Base+0x30c>
   14a60:	strd	r6, [r4, #112]	; 0x70
   14a64:	bl	118a4 <fwrite@plt>
   14a68:	ldrd	r2, [r4, #208]	; 0xd0
   14a6c:	mov	r0, #1
   14a70:	adds	r2, r2, #1
   14a74:	adc	r3, r3, #0
   14a78:	strd	r2, [r4, #208]	; 0xd0
   14a7c:	bl	11928 <exit@plt>
   14a80:	andeq	fp, r2, r0, lsl r2
   14a84:	andeq	sl, r2, r8, lsl #19
   14a88:	strdeq	r9, [r1], -ip

00014a8c <free_node_int@@Base>:
   14a8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a90:	mov	r6, r0
   14a94:	ldr	r4, [pc, #880]	; 14e0c <free_node_int@@Base+0x380>
   14a98:	ldr	r5, [r0, #4]
   14a9c:	sub	sp, sp, #12
   14aa0:	ldrd	r2, [r4, #248]	; 0xf8
   14aa4:	adds	r0, r2, #1
   14aa8:	adc	r1, r3, #0
   14aac:	cmp	r5, #0
   14ab0:	strd	r0, [r4, #248]	; 0xf8
   14ab4:	beq	14bb4 <free_node_int@@Base+0x128>
   14ab8:	add	ip, r4, #256	; 0x100
   14abc:	ldr	lr, [r5]
   14ac0:	ldrd	r0, [ip]
   14ac4:	mov	r8, r0
   14ac8:	adds	r0, r0, #1
   14acc:	mov	r9, r1
   14ad0:	adc	r1, r1, #0
   14ad4:	strd	r0, [ip]
   14ad8:	cmp	lr, #5
   14adc:	ldrls	pc, [pc, lr, lsl #2]
   14ae0:	b	14dc4 <free_node_int@@Base+0x338>
   14ae4:	andeq	r4, r1, r4, asr #23
   14ae8:	andeq	r4, r1, r8, lsr ip
   14aec:	muleq	r1, ip, ip
   14af0:	andeq	r4, r1, r8, lsl sp
   14af4:	muleq	r1, r0, sp
   14af8:	strdeq	r4, [r1], -ip
   14afc:	ldr	r8, [pc, #780]	; 14e10 <free_node_int@@Base+0x384>
   14b00:	ldrd	r2, [r4, #160]	; 0xa0
   14b04:	ldrd	sl, [r8]
   14b08:	adds	r0, r2, #1
   14b0c:	adc	r1, r3, #0
   14b10:	adds	r2, sl, #1
   14b14:	adc	r3, fp, #0
   14b18:	strd	r0, [sp]
   14b1c:	strd	r2, [r8]
   14b20:	ldr	r0, [r5, #4]
   14b24:	ldrd	r2, [sp]
   14b28:	cmp	r0, #0
   14b2c:	strd	r2, [r4, #160]	; 0xa0
   14b30:	beq	14b58 <free_node_int@@Base+0xcc>
   14b34:	ldrd	r2, [r8, #8]
   14b38:	adds	sl, r2, #1
   14b3c:	adc	fp, r3, #0
   14b40:	strd	sl, [r8, #8]
   14b44:	bl	1477c <free_node@@Base>
   14b48:	ldrd	r2, [r8, #16]
   14b4c:	adds	r0, r2, #1
   14b50:	adc	r1, r3, #0
   14b54:	strd	r0, [r8, #16]
   14b58:	ldr	r0, [r5, #8]
   14b5c:	bl	1477c <free_node@@Base>
   14b60:	ldrd	r2, [r8, #24]
   14b64:	ldr	r0, [r5, #12]
   14b68:	ldr	r7, [pc, #676]	; 14e14 <free_node_int@@Base+0x388>
   14b6c:	adds	sl, r2, #1
   14b70:	adc	fp, r3, #0
   14b74:	strd	sl, [r8, #24]
   14b78:	bl	1477c <free_node@@Base>
   14b7c:	ldrd	r2, [r8, #32]
   14b80:	mov	r0, r5
   14b84:	adds	sl, r2, #1
   14b88:	adc	fp, r3, #0
   14b8c:	strd	sl, [r8, #32]
   14b90:	bl	11880 <free@plt>
   14b94:	ldrd	r2, [r4, #200]	; 0xc8
   14b98:	ldrd	sl, [r7, #-8]
   14b9c:	adds	r0, r2, #1
   14ba0:	adc	r1, r3, #0
   14ba4:	strd	r0, [r4, #200]	; 0xc8
   14ba8:	adds	r8, sl, #1
   14bac:	adc	r9, fp, #0
   14bb0:	strd	r8, [r7, #-8]
   14bb4:	mov	r0, r6
   14bb8:	add	sp, sp, #12
   14bbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bc0:	b	11880 <free@plt>
   14bc4:	ldrd	r2, [r4, #120]	; 0x78
   14bc8:	ldrd	r8, [r4, #224]	; 0xe0
   14bcc:	ldr	r0, [r5, #4]
   14bd0:	adds	sl, r2, #1
   14bd4:	adc	fp, r3, #0
   14bd8:	adds	r2, r8, #1
   14bdc:	adc	r3, r9, #0
   14be0:	cmp	r0, #0
   14be4:	strd	sl, [r4, #120]	; 0x78
   14be8:	strd	r2, [r4, #224]	; 0xe0
   14bec:	beq	14c14 <free_node_int@@Base+0x188>
   14bf0:	ldrd	r2, [r4, #232]	; 0xe8
   14bf4:	adds	r8, r2, #1
   14bf8:	adc	r9, r3, #0
   14bfc:	strd	r8, [r4, #232]	; 0xe8
   14c00:	bl	1477c <free_node@@Base>
   14c04:	ldrd	r2, [r4, #240]	; 0xf0
   14c08:	adds	r0, r2, #1
   14c0c:	adc	r1, r3, #0
   14c10:	strd	r0, [r4, #240]	; 0xf0
   14c14:	mov	r0, r5
   14c18:	bl	11880 <free@plt>
   14c1c:	ldrd	r2, [r4, #216]	; 0xd8
   14c20:	ldr	r7, [pc, #492]	; 14e14 <free_node_int@@Base+0x388>
   14c24:	adds	r0, r2, #1
   14c28:	adc	r1, r3, #0
   14c2c:	ldrd	sl, [r7, #-8]
   14c30:	strd	r0, [r4, #216]	; 0xd8
   14c34:	b	14ba8 <free_node_int@@Base+0x11c>
   14c38:	adds	sl, r2, #2
   14c3c:	adc	fp, r3, #0
   14c40:	ldrd	r2, [r4, #128]	; 0x80
   14c44:	ldr	r0, [r5, #4]
   14c48:	ldr	r7, [pc, #452]	; 14e14 <free_node_int@@Base+0x388>
   14c4c:	adds	r2, r2, #1
   14c50:	adc	r3, r3, #0
   14c54:	cmp	r0, #0
   14c58:	strd	sl, [r4, #248]	; 0xf8
   14c5c:	strd	r2, [r4, #128]	; 0x80
   14c60:	beq	14e04 <free_node_int@@Base+0x378>
   14c64:	adds	r8, r8, #2
   14c68:	adc	r9, r9, #0
   14c6c:	strd	r8, [ip]
   14c70:	bl	1477c <free_node@@Base>
   14c74:	ldrd	r8, [r7, #-8]
   14c78:	adds	sl, r8, #1
   14c7c:	adc	fp, r9, #0
   14c80:	mov	r0, r5
   14c84:	bl	11880 <free@plt>
   14c88:	ldrd	r2, [r4, #168]	; 0xa8
   14c8c:	adds	r0, r2, #1
   14c90:	adc	r1, r3, #0
   14c94:	strd	r0, [r4, #168]	; 0xa8
   14c98:	b	14ba8 <free_node_int@@Base+0x11c>
   14c9c:	ldr	r7, [pc, #368]	; 14e14 <free_node_int@@Base+0x388>
   14ca0:	ldrd	r2, [r4, #136]	; 0x88
   14ca4:	ldr	r0, [r5, #4]
   14ca8:	ldrd	r8, [r7]
   14cac:	adds	sl, r2, #1
   14cb0:	adc	fp, r3, #0
   14cb4:	adds	r2, r8, #1
   14cb8:	adc	r3, r9, #0
   14cbc:	cmp	r0, #0
   14cc0:	strd	r2, [r7]
   14cc4:	strd	sl, [r4, #136]	; 0x88
   14cc8:	beq	14cf0 <free_node_int@@Base+0x264>
   14ccc:	ldrd	r2, [r7, #8]
   14cd0:	adds	r8, r2, #1
   14cd4:	adc	r9, r3, #0
   14cd8:	strd	r8, [r7, #8]
   14cdc:	bl	1477c <free_node@@Base>
   14ce0:	ldrd	r2, [r7, #16]
   14ce4:	adds	r0, r2, #1
   14ce8:	adc	r1, r3, #0
   14cec:	strd	r0, [r7, #16]
   14cf0:	ldr	r0, [r5, #8]
   14cf4:	bl	11880 <free@plt>
   14cf8:	mov	r0, r5
   14cfc:	bl	11880 <free@plt>
   14d00:	ldrd	r2, [r4, #176]	; 0xb0
   14d04:	ldrd	sl, [r7, #-8]
   14d08:	adds	r0, r2, #1
   14d0c:	adc	r1, r3, #0
   14d10:	strd	r0, [r4, #176]	; 0xb0
   14d14:	b	14ba8 <free_node_int@@Base+0x11c>
   14d18:	ldr	r7, [pc, #248]	; 14e18 <free_node_int@@Base+0x38c>
   14d1c:	ldrd	r2, [r4, #144]	; 0x90
   14d20:	ldr	r0, [r5, #4]
   14d24:	ldrd	r8, [r7, #-8]
   14d28:	adds	sl, r2, #1
   14d2c:	adc	fp, r3, #0
   14d30:	adds	r2, r8, #1
   14d34:	adc	r3, r9, #0
   14d38:	cmp	r0, #0
   14d3c:	strd	r2, [r7, #-8]
   14d40:	strd	sl, [r4, #144]	; 0x90
   14d44:	beq	14d6c <free_node_int@@Base+0x2e0>
   14d48:	ldrd	r2, [r7]
   14d4c:	adds	r8, r2, #1
   14d50:	adc	r9, r3, #0
   14d54:	strd	r8, [r7]
   14d58:	bl	1477c <free_node@@Base>
   14d5c:	ldrd	r2, [r7, #8]
   14d60:	adds	r0, r2, #1
   14d64:	adc	r1, r3, #0
   14d68:	strd	r0, [r7, #8]
   14d6c:	mov	r0, r5
   14d70:	bl	11880 <free@plt>
   14d74:	ldrd	r2, [r4, #184]	; 0xb8
   14d78:	ldr	r7, [pc, #148]	; 14e14 <free_node_int@@Base+0x388>
   14d7c:	adds	r0, r2, #1
   14d80:	adc	r1, r3, #0
   14d84:	ldrd	sl, [r7, #-8]
   14d88:	strd	r0, [r4, #184]	; 0xb8
   14d8c:	b	14ba8 <free_node_int@@Base+0x11c>
   14d90:	ldrd	r2, [r4, #152]	; 0x98
   14d94:	mov	r0, r5
   14d98:	ldr	r7, [pc, #116]	; 14e14 <free_node_int@@Base+0x388>
   14d9c:	adds	r8, r2, #1
   14da0:	adc	r9, r3, #0
   14da4:	strd	r8, [r4, #152]	; 0x98
   14da8:	bl	146d8 <free_node_if@@Base>
   14dac:	ldrd	r2, [r4, #192]	; 0xc0
   14db0:	ldrd	sl, [r7, #-8]
   14db4:	adds	r0, r2, #1
   14db8:	adc	r1, r3, #0
   14dbc:	strd	r0, [r4, #192]	; 0xc0
   14dc0:	b	14ba8 <free_node_int@@Base+0x11c>
   14dc4:	ldrd	r6, [r4, #112]	; 0x70
   14dc8:	ldr	r3, [pc, #76]	; 14e1c <free_node_int@@Base+0x390>
   14dcc:	mov	r2, #31
   14dd0:	adds	r8, r6, #1
   14dd4:	adc	r9, r7, #0
   14dd8:	ldr	r3, [r3]
   14ddc:	mov	r1, #1
   14de0:	ldr	r0, [pc, #56]	; 14e20 <free_node_int@@Base+0x394>
   14de4:	strd	r8, [r4, #112]	; 0x70
   14de8:	bl	118a4 <fwrite@plt>
   14dec:	ldrd	r2, [r4, #208]	; 0xd0
   14df0:	mov	r0, #1
   14df4:	adds	r6, r2, #1
   14df8:	adc	r7, r3, #0
   14dfc:	strd	r6, [r4, #208]	; 0xd0
   14e00:	bl	11928 <exit@plt>
   14e04:	ldrd	sl, [r7, #-8]
   14e08:	b	14c80 <free_node_int@@Base+0x1f4>
   14e0c:	andeq	fp, r2, r0, lsl r2
   14e10:	andeq	fp, r2, r0, asr r3
   14e14:	andeq	fp, r2, r0, lsr #6
   14e18:	andeq	fp, r2, r0, asr #6
   14e1c:	andeq	sl, r2, r8, lsl #19
   14e20:	strdeq	r9, [r1], -ip

00014e24 <free_node_id@@Base>:
   14e24:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e28:	mov	r6, r0
   14e2c:	ldr	r4, [pc, #848]	; 15184 <free_node_id@@Base+0x360>
   14e30:	ldr	r5, [r0, #4]
   14e34:	ldrd	r2, [r4, #224]	; 0xe0
   14e38:	adds	r0, r2, #1
   14e3c:	adc	r1, r3, #0
   14e40:	cmp	r5, #0
   14e44:	strd	r0, [r4, #224]	; 0xe0
   14e48:	beq	14f38 <free_node_id@@Base+0x114>
   14e4c:	ldrd	r0, [r4, #232]	; 0xe8
   14e50:	ldr	ip, [r5]
   14e54:	mov	r8, r0
   14e58:	adds	r0, r0, #1
   14e5c:	mov	r9, r1
   14e60:	adc	r1, r1, #0
   14e64:	strd	r0, [r4, #232]	; 0xe8
   14e68:	cmp	ip, #5
   14e6c:	ldrls	pc, [pc, ip, lsl #2]
   14e70:	b	1513c <free_node_id@@Base+0x318>
   14e74:	andeq	r4, r1, r4, asr #30
   14e78:	andeq	r4, r1, r4, lsr #31
   14e7c:	andeq	r5, r1, ip, lsl r0
   14e80:	muleq	r1, r8, r0
   14e84:	andeq	r5, r1, ip, lsl #2
   14e88:	andeq	r4, r1, ip, lsl #29
   14e8c:	ldr	r7, [pc, #756]	; 15188 <free_node_id@@Base+0x364>
   14e90:	ldrd	r2, [r4, #160]	; 0xa0
   14e94:	ldr	r0, [r5, #4]
   14e98:	ldrd	r8, [r7]
   14e9c:	adds	sl, r2, #1
   14ea0:	adc	fp, r3, #0
   14ea4:	adds	r2, r8, #1
   14ea8:	adc	r3, r9, #0
   14eac:	cmp	r0, #0
   14eb0:	strd	r2, [r7]
   14eb4:	strd	sl, [r4, #160]	; 0xa0
   14eb8:	beq	14ee0 <free_node_id@@Base+0xbc>
   14ebc:	ldrd	r2, [r7, #8]
   14ec0:	adds	r8, r2, #1
   14ec4:	adc	r9, r3, #0
   14ec8:	strd	r8, [r7, #8]
   14ecc:	bl	1477c <free_node@@Base>
   14ed0:	ldrd	r2, [r7, #16]
   14ed4:	adds	r0, r2, #1
   14ed8:	adc	r1, r3, #0
   14edc:	strd	r0, [r7, #16]
   14ee0:	ldr	r0, [r5, #8]
   14ee4:	bl	1477c <free_node@@Base>
   14ee8:	ldrd	r2, [r7, #24]
   14eec:	ldr	r0, [r5, #12]
   14ef0:	adds	r8, r2, #1
   14ef4:	adc	r9, r3, #0
   14ef8:	strd	r8, [r7, #24]
   14efc:	bl	1477c <free_node@@Base>
   14f00:	ldrd	r2, [r7, #32]
   14f04:	mov	r0, r5
   14f08:	adds	r8, r2, #1
   14f0c:	adc	r9, r3, #0
   14f10:	strd	r8, [r7, #32]
   14f14:	bl	11880 <free@plt>
   14f18:	ldrd	r2, [r4, #200]	; 0xc8
   14f1c:	ldrd	sl, [r4, #240]	; 0xf0
   14f20:	adds	r0, r2, #1
   14f24:	adc	r1, r3, #0
   14f28:	strd	r0, [r4, #200]	; 0xc8
   14f2c:	adds	r8, sl, #1
   14f30:	adc	r9, fp, #0
   14f34:	strd	r8, [r4, #240]	; 0xf0
   14f38:	mov	r0, r6
   14f3c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f40:	b	11880 <free@plt>
   14f44:	adds	sl, r2, #2
   14f48:	adc	fp, r3, #0
   14f4c:	ldrd	r2, [r4, #120]	; 0x78
   14f50:	ldr	r0, [r5, #4]
   14f54:	strd	sl, [r4, #224]	; 0xe0
   14f58:	adds	r2, r2, #1
   14f5c:	adc	r3, r3, #0
   14f60:	cmp	r0, #0
   14f64:	strd	r2, [r4, #120]	; 0x78
   14f68:	beq	1517c <free_node_id@@Base+0x358>
   14f6c:	adds	r8, r8, #2
   14f70:	adc	r9, r9, #0
   14f74:	strd	r8, [r4, #232]	; 0xe8
   14f78:	bl	1477c <free_node@@Base>
   14f7c:	ldrd	r8, [r4, #240]	; 0xf0
   14f80:	adds	sl, r8, #1
   14f84:	adc	fp, r9, #0
   14f88:	mov	r0, r5
   14f8c:	bl	11880 <free@plt>
   14f90:	ldrd	r2, [r4, #216]	; 0xd8
   14f94:	adds	r0, r2, #1
   14f98:	adc	r1, r3, #0
   14f9c:	strd	r0, [r4, #216]	; 0xd8
   14fa0:	b	14f2c <free_node_id@@Base+0x108>
   14fa4:	ldrd	r2, [r4, #128]	; 0x80
   14fa8:	ldrd	r8, [r4, #248]	; 0xf8
   14fac:	ldr	r0, [r5, #4]
   14fb0:	adds	sl, r2, #1
   14fb4:	adc	fp, r3, #0
   14fb8:	adds	r2, r8, #1
   14fbc:	adc	r3, r9, #0
   14fc0:	cmp	r0, #0
   14fc4:	strd	sl, [r4, #128]	; 0x80
   14fc8:	strd	r2, [r4, #248]	; 0xf8
   14fcc:	beq	14ffc <free_node_id@@Base+0x1d8>
   14fd0:	ldr	r3, [pc, #436]	; 1518c <free_node_id@@Base+0x368>
   14fd4:	mov	r7, r3
   14fd8:	ldrd	r2, [r3]
   14fdc:	adds	r8, r2, #1
   14fe0:	adc	r9, r3, #0
   14fe4:	strd	r8, [r7], #16
   14fe8:	bl	1477c <free_node@@Base>
   14fec:	ldrd	r2, [r7, #-8]
   14ff0:	adds	r0, r2, #1
   14ff4:	adc	r1, r3, #0
   14ff8:	strd	r0, [r7, #-8]
   14ffc:	mov	r0, r5
   15000:	bl	11880 <free@plt>
   15004:	ldrd	r2, [r4, #168]	; 0xa8
   15008:	ldrd	sl, [r4, #240]	; 0xf0
   1500c:	adds	r0, r2, #1
   15010:	adc	r1, r3, #0
   15014:	strd	r0, [r4, #168]	; 0xa8
   15018:	b	14f2c <free_node_id@@Base+0x108>
   1501c:	ldr	r7, [pc, #364]	; 15190 <free_node_id@@Base+0x36c>
   15020:	ldrd	r2, [r4, #136]	; 0x88
   15024:	ldr	r0, [r5, #4]
   15028:	ldrd	r8, [r7]
   1502c:	adds	sl, r2, #1
   15030:	adc	fp, r3, #0
   15034:	adds	r2, r8, #1
   15038:	adc	r3, r9, #0
   1503c:	cmp	r0, #0
   15040:	strd	r2, [r7]
   15044:	strd	sl, [r4, #136]	; 0x88
   15048:	beq	15070 <free_node_id@@Base+0x24c>
   1504c:	ldrd	r2, [r7, #8]
   15050:	adds	r8, r2, #1
   15054:	adc	r9, r3, #0
   15058:	strd	r8, [r7, #8]
   1505c:	bl	1477c <free_node@@Base>
   15060:	ldrd	r2, [r7, #16]
   15064:	adds	r0, r2, #1
   15068:	adc	r1, r3, #0
   1506c:	strd	r0, [r7, #16]
   15070:	ldr	r0, [r5, #8]
   15074:	bl	11880 <free@plt>
   15078:	mov	r0, r5
   1507c:	bl	11880 <free@plt>
   15080:	ldrd	r2, [r4, #176]	; 0xb0
   15084:	ldrd	sl, [r4, #240]	; 0xf0
   15088:	adds	r0, r2, #1
   1508c:	adc	r1, r3, #0
   15090:	strd	r0, [r4, #176]	; 0xb0
   15094:	b	14f2c <free_node_id@@Base+0x108>
   15098:	ldr	r7, [pc, #244]	; 15194 <free_node_id@@Base+0x370>
   1509c:	ldrd	r2, [r4, #144]	; 0x90
   150a0:	ldr	r0, [r5, #4]
   150a4:	ldrd	r8, [r7, #-8]
   150a8:	adds	sl, r2, #1
   150ac:	adc	fp, r3, #0
   150b0:	adds	r2, r8, #1
   150b4:	adc	r3, r9, #0
   150b8:	cmp	r0, #0
   150bc:	strd	r2, [r7, #-8]
   150c0:	strd	sl, [r4, #144]	; 0x90
   150c4:	beq	150ec <free_node_id@@Base+0x2c8>
   150c8:	ldrd	r2, [r7]
   150cc:	adds	r8, r2, #1
   150d0:	adc	r9, r3, #0
   150d4:	strd	r8, [r7]
   150d8:	bl	1477c <free_node@@Base>
   150dc:	ldrd	r2, [r7, #8]
   150e0:	adds	r0, r2, #1
   150e4:	adc	r1, r3, #0
   150e8:	strd	r0, [r7, #8]
   150ec:	mov	r0, r5
   150f0:	bl	11880 <free@plt>
   150f4:	ldrd	r2, [r4, #184]	; 0xb8
   150f8:	ldrd	sl, [r4, #240]	; 0xf0
   150fc:	adds	r0, r2, #1
   15100:	adc	r1, r3, #0
   15104:	strd	r0, [r4, #184]	; 0xb8
   15108:	b	14f2c <free_node_id@@Base+0x108>
   1510c:	ldrd	r2, [r4, #152]	; 0x98
   15110:	mov	r0, r5
   15114:	adds	r8, r2, #1
   15118:	adc	r9, r3, #0
   1511c:	strd	r8, [r4, #152]	; 0x98
   15120:	bl	146d8 <free_node_if@@Base>
   15124:	ldrd	r2, [r4, #192]	; 0xc0
   15128:	ldrd	sl, [r4, #240]	; 0xf0
   1512c:	adds	r0, r2, #1
   15130:	adc	r1, r3, #0
   15134:	strd	r0, [r4, #192]	; 0xc0
   15138:	b	14f2c <free_node_id@@Base+0x108>
   1513c:	ldrd	r6, [r4, #112]	; 0x70
   15140:	ldr	r3, [pc, #80]	; 15198 <free_node_id@@Base+0x374>
   15144:	mov	r2, #31
   15148:	adds	r8, r6, #1
   1514c:	adc	r9, r7, #0
   15150:	ldr	r3, [r3]
   15154:	mov	r1, #1
   15158:	ldr	r0, [pc, #60]	; 1519c <free_node_id@@Base+0x378>
   1515c:	strd	r8, [r4, #112]	; 0x70
   15160:	bl	118a4 <fwrite@plt>
   15164:	ldrd	r2, [r4, #208]	; 0xd0
   15168:	mov	r0, #1
   1516c:	adds	r6, r2, #1
   15170:	adc	r7, r3, #0
   15174:	strd	r6, [r4, #208]	; 0xd0
   15178:	bl	11928 <exit@plt>
   1517c:	ldrd	sl, [r4, #240]	; 0xf0
   15180:	b	14f88 <free_node_id@@Base+0x164>
   15184:	andeq	fp, r2, r0, lsl r2
   15188:	andeq	fp, r2, r0, asr r3
   1518c:	andeq	fp, r2, r0, lsl r3
   15190:	andeq	fp, r2, r0, lsr #6
   15194:	andeq	fp, r2, r0, asr #6
   15198:	andeq	sl, r2, r8, lsl #19
   1519c:	strdeq	r9, [r1], -ip

000151a0 <free_node_return@@Base>:
   151a0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151a4:	mov	r7, r0
   151a8:	ldr	r4, [pc, #864]	; 15510 <free_node_return@@Base+0x370>
   151ac:	ldr	r6, [r0, #4]
   151b0:	ldrd	r2, [r4, #-8]
   151b4:	adds	r0, r2, #1
   151b8:	adc	r1, r3, #0
   151bc:	cmp	r6, #0
   151c0:	strd	r0, [r4, #-8]
   151c4:	beq	152b0 <free_node_return@@Base+0x110>
   151c8:	ldrd	sl, [r4]
   151cc:	ldr	ip, [r6]
   151d0:	adds	r0, sl, #1
   151d4:	adc	r1, fp, #0
   151d8:	strd	r0, [r4]
   151dc:	cmp	ip, #5
   151e0:	ldrls	pc, [pc, ip, lsl #2]
   151e4:	b	154c4 <free_node_return@@Base+0x324>
   151e8:			; <UNDEFINED> instruction: 0x000152bc
   151ec:	andeq	r5, r1, r0, lsr r3
   151f0:	andeq	r5, r1, ip, lsr #7
   151f4:	andeq	r5, r1, ip, lsr #8
   151f8:	muleq	r1, r0, r4
   151fc:	andeq	r5, r1, r0, lsl #4
   15200:	ldr	r5, [pc, #780]	; 15514 <free_node_return@@Base+0x374>
   15204:	ldr	r0, [r6, #4]
   15208:	add	r8, r5, #320	; 0x140
   1520c:	ldrd	sl, [r5, #160]	; 0xa0
   15210:	ldrd	r2, [r8]
   15214:	adds	sl, sl, #1
   15218:	adc	fp, fp, #0
   1521c:	adds	r2, r2, #1
   15220:	adc	r3, r3, #0
   15224:	cmp	r0, #0
   15228:	strd	sl, [r5, #160]	; 0xa0
   1522c:	strd	r2, [r8]
   15230:	beq	15258 <free_node_return@@Base+0xb8>
   15234:	ldrd	r2, [r8, #8]
   15238:	adds	r2, r2, #1
   1523c:	adc	r3, r3, #0
   15240:	strd	r2, [r8, #8]
   15244:	bl	1477c <free_node@@Base>
   15248:	ldrd	r2, [r8, #16]
   1524c:	adds	r2, r2, #1
   15250:	adc	r3, r3, #0
   15254:	strd	r2, [r8, #16]
   15258:	ldr	r0, [r6, #8]
   1525c:	bl	1477c <free_node@@Base>
   15260:	ldrd	r2, [r8, #24]
   15264:	ldr	r0, [r6, #12]
   15268:	adds	r2, r2, #1
   1526c:	adc	r3, r3, #0
   15270:	strd	r2, [r8, #24]
   15274:	bl	1477c <free_node@@Base>
   15278:	ldrd	r2, [r8, #32]
   1527c:	mov	r0, r6
   15280:	adds	r2, r2, #1
   15284:	adc	r3, r3, #0
   15288:	strd	r2, [r8, #32]
   1528c:	bl	11880 <free@plt>
   15290:	ldrd	r2, [r5, #200]	; 0xc8
   15294:	ldrd	r8, [r4, #8]
   15298:	adds	r2, r2, #1
   1529c:	adc	r3, r3, #0
   152a0:	strd	r2, [r5, #200]	; 0xc8
   152a4:	adds	r8, r8, #1
   152a8:	adc	r9, r9, #0
   152ac:	strd	r8, [r4, #8]
   152b0:	mov	r0, r7
   152b4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152b8:	b	11880 <free@plt>
   152bc:	ldr	r5, [pc, #592]	; 15514 <free_node_return@@Base+0x374>
   152c0:	ldr	r0, [r6, #4]
   152c4:	ldrd	r2, [r5, #120]	; 0x78
   152c8:	ldrd	r8, [r5, #224]	; 0xe0
   152cc:	adds	r2, r2, #1
   152d0:	adc	r3, r3, #0
   152d4:	adds	r8, r8, #1
   152d8:	adc	r9, r9, #0
   152dc:	cmp	r0, #0
   152e0:	strd	r2, [r5, #120]	; 0x78
   152e4:	strd	r8, [r5, #224]	; 0xe0
   152e8:	beq	15310 <free_node_return@@Base+0x170>
   152ec:	ldrd	r2, [r5, #232]	; 0xe8
   152f0:	adds	r2, r2, #1
   152f4:	adc	r3, r3, #0
   152f8:	strd	r2, [r5, #232]	; 0xe8
   152fc:	bl	1477c <free_node@@Base>
   15300:	ldrd	r2, [r5, #240]	; 0xf0
   15304:	adds	r2, r2, #1
   15308:	adc	r3, r3, #0
   1530c:	strd	r2, [r5, #240]	; 0xf0
   15310:	mov	r0, r6
   15314:	bl	11880 <free@plt>
   15318:	ldrd	r2, [r5, #216]	; 0xd8
   1531c:	ldrd	r8, [r4, #8]
   15320:	adds	r2, r2, #1
   15324:	adc	r3, r3, #0
   15328:	strd	r2, [r5, #216]	; 0xd8
   1532c:	b	152a4 <free_node_return@@Base+0x104>
   15330:	ldr	r5, [pc, #476]	; 15514 <free_node_return@@Base+0x374>
   15334:	ldr	r0, [r6, #4]
   15338:	ldrd	r2, [r5, #128]	; 0x80
   1533c:	ldrd	r8, [r5, #248]	; 0xf8
   15340:	adds	r2, r2, #1
   15344:	adc	r3, r3, #0
   15348:	adds	r8, r8, #1
   1534c:	adc	r9, r9, #0
   15350:	cmp	r0, #0
   15354:	strd	r2, [r5, #128]	; 0x80
   15358:	strd	r8, [r5, #248]	; 0xf8
   1535c:	beq	1538c <free_node_return@@Base+0x1ec>
   15360:	add	r1, r5, #256	; 0x100
   15364:	ldrd	r2, [r1]
   15368:	adds	r2, r2, #1
   1536c:	adc	r3, r3, #0
   15370:	strd	r2, [r1]
   15374:	bl	1477c <free_node@@Base>
   15378:	add	r1, r5, #272	; 0x110
   1537c:	ldrd	r2, [r1, #-8]
   15380:	adds	r2, r2, #1
   15384:	adc	r3, r3, #0
   15388:	strd	r2, [r1, #-8]
   1538c:	mov	r0, r6
   15390:	bl	11880 <free@plt>
   15394:	ldrd	r2, [r5, #168]	; 0xa8
   15398:	ldrd	r8, [r4, #8]
   1539c:	adds	r2, r2, #1
   153a0:	adc	r3, r3, #0
   153a4:	strd	r2, [r5, #168]	; 0xa8
   153a8:	b	152a4 <free_node_return@@Base+0x104>
   153ac:	ldr	r5, [pc, #352]	; 15514 <free_node_return@@Base+0x374>
   153b0:	ldr	r0, [r6, #4]
   153b4:	add	sl, r5, #272	; 0x110
   153b8:	ldrd	r2, [r5, #136]	; 0x88
   153bc:	ldrd	r8, [sl]
   153c0:	adds	r2, r2, #1
   153c4:	adc	r3, r3, #0
   153c8:	adds	r8, r8, #1
   153cc:	adc	r9, r9, #0
   153d0:	cmp	r0, #0
   153d4:	strd	r2, [r5, #136]	; 0x88
   153d8:	strd	r8, [sl]
   153dc:	beq	15404 <free_node_return@@Base+0x264>
   153e0:	ldrd	r2, [sl, #8]
   153e4:	adds	r2, r2, #1
   153e8:	adc	r3, r3, #0
   153ec:	strd	r2, [sl, #8]
   153f0:	bl	1477c <free_node@@Base>
   153f4:	ldrd	r2, [sl, #16]
   153f8:	adds	r2, r2, #1
   153fc:	adc	r3, r3, #0
   15400:	strd	r2, [sl, #16]
   15404:	ldr	r0, [r6, #8]
   15408:	bl	11880 <free@plt>
   1540c:	mov	r0, r6
   15410:	bl	11880 <free@plt>
   15414:	ldrd	r2, [r5, #176]	; 0xb0
   15418:	ldrd	r8, [r4, #8]
   1541c:	adds	r2, r2, #1
   15420:	adc	r3, r3, #0
   15424:	strd	r2, [r5, #176]	; 0xb0
   15428:	b	152a4 <free_node_return@@Base+0x104>
   1542c:	ldr	r5, [pc, #224]	; 15514 <free_node_return@@Base+0x374>
   15430:	adds	r2, r2, #2
   15434:	adc	r3, r3, #0
   15438:	ldrd	r8, [r5, #144]	; 0x90
   1543c:	ldr	r0, [r6, #4]
   15440:	strd	r2, [r4, #-8]
   15444:	adds	r8, r8, #1
   15448:	adc	r9, r9, #0
   1544c:	cmp	r0, #0
   15450:	strd	r8, [r5, #144]	; 0x90
   15454:	beq	15508 <free_node_return@@Base+0x368>
   15458:	adds	sl, sl, #2
   1545c:	adc	fp, fp, #0
   15460:	strd	sl, [r4]
   15464:	bl	1477c <free_node@@Base>
   15468:	ldrd	r8, [r4, #8]
   1546c:	adds	r8, r8, #1
   15470:	adc	r9, r9, #0
   15474:	mov	r0, r6
   15478:	bl	11880 <free@plt>
   1547c:	ldrd	r2, [r5, #184]	; 0xb8
   15480:	adds	r2, r2, #1
   15484:	adc	r3, r3, #0
   15488:	strd	r2, [r5, #184]	; 0xb8
   1548c:	b	152a4 <free_node_return@@Base+0x104>
   15490:	ldr	r5, [pc, #124]	; 15514 <free_node_return@@Base+0x374>
   15494:	mov	r0, r6
   15498:	ldrd	r2, [r5, #152]	; 0x98
   1549c:	adds	r2, r2, #1
   154a0:	adc	r3, r3, #0
   154a4:	strd	r2, [r5, #152]	; 0x98
   154a8:	bl	146d8 <free_node_if@@Base>
   154ac:	ldrd	r2, [r5, #192]	; 0xc0
   154b0:	ldrd	r8, [r4, #8]
   154b4:	adds	r2, r2, #1
   154b8:	adc	r3, r3, #0
   154bc:	strd	r2, [r5, #192]	; 0xc0
   154c0:	b	152a4 <free_node_return@@Base+0x104>
   154c4:	ldr	r4, [pc, #72]	; 15514 <free_node_return@@Base+0x374>
   154c8:	ldr	r3, [pc, #72]	; 15518 <free_node_return@@Base+0x378>
   154cc:	mov	r2, #31
   154d0:	ldrd	r6, [r4, #112]	; 0x70
   154d4:	ldr	r3, [r3]
   154d8:	mov	r1, #1
   154dc:	adds	r6, r6, #1
   154e0:	adc	r7, r7, #0
   154e4:	ldr	r0, [pc, #48]	; 1551c <free_node_return@@Base+0x37c>
   154e8:	strd	r6, [r4, #112]	; 0x70
   154ec:	bl	118a4 <fwrite@plt>
   154f0:	ldrd	r2, [r4, #208]	; 0xd0
   154f4:	mov	r0, #1
   154f8:	adds	r2, r2, #1
   154fc:	adc	r3, r3, #0
   15500:	strd	r2, [r4, #208]	; 0xd0
   15504:	bl	11928 <exit@plt>
   15508:	ldrd	r8, [r4, #8]
   1550c:	b	15474 <free_node_return@@Base+0x2d4>
   15510:	andeq	fp, r2, r0, asr #6
   15514:	andeq	fp, r2, r0, lsl r2
   15518:	andeq	sl, r2, r8, lsl #19
   1551c:	strdeq	r9, [r1], -ip

00015520 <free_node_function@@Base>:
   15520:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15524:	mov	r7, r0
   15528:	ldr	r4, [pc, #868]	; 15894 <free_node_function@@Base+0x374>
   1552c:	ldr	r6, [r0, #4]
   15530:	ldrd	r2, [r4]
   15534:	adds	r0, r2, #1
   15538:	adc	r1, r3, #0
   1553c:	cmp	r6, #0
   15540:	strd	r0, [r4]
   15544:	beq	15630 <free_node_function@@Base+0x110>
   15548:	ldrd	sl, [r4, #8]
   1554c:	ldr	ip, [r6]
   15550:	adds	r0, sl, #1
   15554:	adc	r1, fp, #0
   15558:	strd	r0, [r4, #8]
   1555c:	cmp	ip, #5
   15560:	ldrls	pc, [pc, ip, lsl #2]
   15564:	b	15848 <free_node_function@@Base+0x328>
   15568:	andeq	r5, r1, r4, asr #12
   1556c:			; <UNDEFINED> instruction: 0x000156b8
   15570:	andeq	r5, r1, r0, lsr r7
   15574:	muleq	r1, ip, r7
   15578:	andeq	r5, r1, r4, lsl r8
   1557c:	andeq	r5, r1, r0, lsl #11
   15580:	ldr	r5, [pc, #784]	; 15898 <free_node_function@@Base+0x378>
   15584:	ldr	r0, [r6, #4]
   15588:	add	r8, r5, #320	; 0x140
   1558c:	ldrd	sl, [r5, #160]	; 0xa0
   15590:	ldrd	r2, [r8]
   15594:	adds	sl, sl, #1
   15598:	adc	fp, fp, #0
   1559c:	adds	r2, r2, #1
   155a0:	adc	r3, r3, #0
   155a4:	cmp	r0, #0
   155a8:	strd	sl, [r5, #160]	; 0xa0
   155ac:	strd	r2, [r8]
   155b0:	beq	155d8 <free_node_function@@Base+0xb8>
   155b4:	ldrd	r2, [r8, #8]
   155b8:	adds	r2, r2, #1
   155bc:	adc	r3, r3, #0
   155c0:	strd	r2, [r8, #8]
   155c4:	bl	1477c <free_node@@Base>
   155c8:	ldrd	r2, [r8, #16]
   155cc:	adds	r2, r2, #1
   155d0:	adc	r3, r3, #0
   155d4:	strd	r2, [r8, #16]
   155d8:	ldr	r0, [r6, #8]
   155dc:	bl	1477c <free_node@@Base>
   155e0:	ldrd	r2, [r8, #24]
   155e4:	ldr	r0, [r6, #12]
   155e8:	adds	r2, r2, #1
   155ec:	adc	r3, r3, #0
   155f0:	strd	r2, [r8, #24]
   155f4:	bl	1477c <free_node@@Base>
   155f8:	ldrd	r2, [r8, #32]
   155fc:	mov	r0, r6
   15600:	adds	r2, r2, #1
   15604:	adc	r3, r3, #0
   15608:	strd	r2, [r8, #32]
   1560c:	bl	11880 <free@plt>
   15610:	ldrd	r2, [r5, #200]	; 0xc8
   15614:	ldrd	r8, [r4, #16]
   15618:	adds	r2, r2, #1
   1561c:	adc	r3, r3, #0
   15620:	strd	r2, [r5, #200]	; 0xc8
   15624:	adds	r8, r8, #1
   15628:	adc	r9, r9, #0
   1562c:	strd	r8, [r4, #16]
   15630:	ldr	r0, [r7, #8]
   15634:	bl	11880 <free@plt>
   15638:	mov	r0, r7
   1563c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15640:	b	11880 <free@plt>
   15644:	ldr	r5, [pc, #588]	; 15898 <free_node_function@@Base+0x378>
   15648:	ldr	r0, [r6, #4]
   1564c:	ldrd	r2, [r5, #120]	; 0x78
   15650:	ldrd	r8, [r5, #224]	; 0xe0
   15654:	adds	r2, r2, #1
   15658:	adc	r3, r3, #0
   1565c:	adds	r8, r8, #1
   15660:	adc	r9, r9, #0
   15664:	cmp	r0, #0
   15668:	strd	r2, [r5, #120]	; 0x78
   1566c:	strd	r8, [r5, #224]	; 0xe0
   15670:	beq	15698 <free_node_function@@Base+0x178>
   15674:	ldrd	r2, [r5, #232]	; 0xe8
   15678:	adds	r2, r2, #1
   1567c:	adc	r3, r3, #0
   15680:	strd	r2, [r5, #232]	; 0xe8
   15684:	bl	1477c <free_node@@Base>
   15688:	ldrd	r2, [r5, #240]	; 0xf0
   1568c:	adds	r2, r2, #1
   15690:	adc	r3, r3, #0
   15694:	strd	r2, [r5, #240]	; 0xf0
   15698:	mov	r0, r6
   1569c:	bl	11880 <free@plt>
   156a0:	ldrd	r2, [r5, #216]	; 0xd8
   156a4:	ldrd	r8, [r4, #16]
   156a8:	adds	r2, r2, #1
   156ac:	adc	r3, r3, #0
   156b0:	strd	r2, [r5, #216]	; 0xd8
   156b4:	b	15624 <free_node_function@@Base+0x104>
   156b8:	ldr	r5, [pc, #472]	; 15898 <free_node_function@@Base+0x378>
   156bc:	ldr	r0, [r6, #4]
   156c0:	ldrd	r2, [r5, #128]	; 0x80
   156c4:	ldrd	r8, [r5, #248]	; 0xf8
   156c8:	adds	r2, r2, #1
   156cc:	adc	r3, r3, #0
   156d0:	adds	r8, r8, #1
   156d4:	adc	r9, r9, #0
   156d8:	cmp	r0, #0
   156dc:	strd	r2, [r5, #128]	; 0x80
   156e0:	strd	r8, [r5, #248]	; 0xf8
   156e4:	beq	15710 <free_node_function@@Base+0x1f0>
   156e8:	add	r1, r5, #256	; 0x100
   156ec:	ldrd	r2, [r1]
   156f0:	adds	r2, r2, #1
   156f4:	adc	r3, r3, #0
   156f8:	strd	r2, [r1]
   156fc:	bl	1477c <free_node@@Base>
   15700:	ldrd	r2, [r4, #-8]
   15704:	adds	r2, r2, #1
   15708:	adc	r3, r3, #0
   1570c:	strd	r2, [r4, #-8]
   15710:	mov	r0, r6
   15714:	bl	11880 <free@plt>
   15718:	ldrd	r2, [r5, #168]	; 0xa8
   1571c:	ldrd	r8, [r4, #16]
   15720:	adds	r2, r2, #1
   15724:	adc	r3, r3, #0
   15728:	strd	r2, [r5, #168]	; 0xa8
   1572c:	b	15624 <free_node_function@@Base+0x104>
   15730:	ldr	r5, [pc, #352]	; 15898 <free_node_function@@Base+0x378>
   15734:	adds	r2, r2, #2
   15738:	adc	r3, r3, #0
   1573c:	ldrd	r8, [r5, #136]	; 0x88
   15740:	ldr	r0, [r6, #4]
   15744:	strd	r2, [r4]
   15748:	adds	r8, r8, #1
   1574c:	adc	r9, r9, #0
   15750:	cmp	r0, #0
   15754:	strd	r8, [r5, #136]	; 0x88
   15758:	beq	1588c <free_node_function@@Base+0x36c>
   1575c:	adds	sl, sl, #2
   15760:	adc	fp, fp, #0
   15764:	strd	sl, [r4, #8]
   15768:	bl	1477c <free_node@@Base>
   1576c:	ldrd	r8, [r4, #16]
   15770:	adds	r8, r8, #1
   15774:	adc	r9, r9, #0
   15778:	ldr	r0, [r6, #8]
   1577c:	bl	11880 <free@plt>
   15780:	mov	r0, r6
   15784:	bl	11880 <free@plt>
   15788:	ldrd	r2, [r5, #176]	; 0xb0
   1578c:	adds	r2, r2, #1
   15790:	adc	r3, r3, #0
   15794:	strd	r2, [r5, #176]	; 0xb0
   15798:	b	15624 <free_node_function@@Base+0x104>
   1579c:	ldr	r5, [pc, #244]	; 15898 <free_node_function@@Base+0x378>
   157a0:	ldr	r0, [r6, #4]
   157a4:	add	sl, r5, #304	; 0x130
   157a8:	ldrd	r2, [r5, #144]	; 0x90
   157ac:	ldrd	r8, [sl, #-8]
   157b0:	adds	r2, r2, #1
   157b4:	adc	r3, r3, #0
   157b8:	adds	r8, r8, #1
   157bc:	adc	r9, r9, #0
   157c0:	cmp	r0, #0
   157c4:	strd	r2, [r5, #144]	; 0x90
   157c8:	strd	r8, [sl, #-8]
   157cc:	beq	157f4 <free_node_function@@Base+0x2d4>
   157d0:	ldrd	r2, [sl]
   157d4:	adds	r2, r2, #1
   157d8:	adc	r3, r3, #0
   157dc:	strd	r2, [sl]
   157e0:	bl	1477c <free_node@@Base>
   157e4:	ldrd	r2, [sl, #8]
   157e8:	adds	r2, r2, #1
   157ec:	adc	r3, r3, #0
   157f0:	strd	r2, [sl, #8]
   157f4:	mov	r0, r6
   157f8:	bl	11880 <free@plt>
   157fc:	ldrd	r2, [r5, #184]	; 0xb8
   15800:	ldrd	r8, [r4, #16]
   15804:	adds	r2, r2, #1
   15808:	adc	r3, r3, #0
   1580c:	strd	r2, [r5, #184]	; 0xb8
   15810:	b	15624 <free_node_function@@Base+0x104>
   15814:	ldr	r5, [pc, #124]	; 15898 <free_node_function@@Base+0x378>
   15818:	mov	r0, r6
   1581c:	ldrd	r2, [r5, #152]	; 0x98
   15820:	adds	r2, r2, #1
   15824:	adc	r3, r3, #0
   15828:	strd	r2, [r5, #152]	; 0x98
   1582c:	bl	146d8 <free_node_if@@Base>
   15830:	ldrd	r2, [r5, #192]	; 0xc0
   15834:	ldrd	r8, [r4, #16]
   15838:	adds	r2, r2, #1
   1583c:	adc	r3, r3, #0
   15840:	strd	r2, [r5, #192]	; 0xc0
   15844:	b	15624 <free_node_function@@Base+0x104>
   15848:	ldr	r4, [pc, #72]	; 15898 <free_node_function@@Base+0x378>
   1584c:	ldr	r3, [pc, #72]	; 1589c <free_node_function@@Base+0x37c>
   15850:	mov	r2, #31
   15854:	ldrd	r6, [r4, #112]	; 0x70
   15858:	ldr	r3, [r3]
   1585c:	mov	r1, #1
   15860:	adds	r6, r6, #1
   15864:	adc	r7, r7, #0
   15868:	ldr	r0, [pc, #48]	; 158a0 <free_node_function@@Base+0x380>
   1586c:	strd	r6, [r4, #112]	; 0x70
   15870:	bl	118a4 <fwrite@plt>
   15874:	ldrd	r2, [r4, #208]	; 0xd0
   15878:	mov	r0, #1
   1587c:	adds	r2, r2, #1
   15880:	adc	r3, r3, #0
   15884:	strd	r2, [r4, #208]	; 0xd0
   15888:	bl	11928 <exit@plt>
   1588c:	ldrd	r8, [r4, #16]
   15890:	b	15778 <free_node_function@@Base+0x258>
   15894:	andeq	fp, r2, r0, lsr #6
   15898:	andeq	fp, r2, r0, lsl r2
   1589c:	andeq	sl, r2, r8, lsl #19
   158a0:	strdeq	r9, [r1], -ip

000158a4 <free_node_boolean_operator@@Base>:
   158a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   158a8:	mov	r6, r0
   158ac:	ldr	r4, [pc, #912]	; 15c44 <free_node_boolean_operator@@Base+0x3a0>
   158b0:	ldr	r0, [r0, #4]
   158b4:	ldrd	r2, [r4]
   158b8:	adds	r2, r2, #1
   158bc:	adc	r3, r3, #0
   158c0:	cmp	r0, #0
   158c4:	strd	r2, [r4]
   158c8:	beq	158f0 <free_node_boolean_operator@@Base+0x4c>
   158cc:	ldrd	r2, [r4, #8]
   158d0:	adds	r2, r2, #1
   158d4:	adc	r3, r3, #0
   158d8:	strd	r2, [r4, #8]
   158dc:	bl	1477c <free_node@@Base>
   158e0:	ldrd	r2, [r4, #16]
   158e4:	adds	r2, r2, #1
   158e8:	adc	r3, r3, #0
   158ec:	strd	r2, [r4, #16]
   158f0:	ldr	r0, [r6, #8]
   158f4:	bl	1477c <free_node@@Base>
   158f8:	ldrd	r2, [r4, #24]
   158fc:	ldr	r7, [r6, #12]
   15900:	adds	r2, r2, #1
   15904:	adc	r3, r3, #0
   15908:	ldr	r1, [r7]
   1590c:	strd	r2, [r4, #24]
   15910:	cmp	r1, #5
   15914:	ldrls	pc, [pc, r1, lsl #2]
   15918:	b	15c00 <free_node_boolean_operator@@Base+0x35c>
   1591c:	andeq	r5, r1, r4, ror #19
   15920:	andeq	r5, r1, r8, asr sl
   15924:	ldrdeq	r5, [r1], -r4
   15928:	andeq	r5, r1, r4, asr fp
   1592c:	andeq	r5, r1, ip, asr #23
   15930:	andeq	r5, r1, r4, lsr r9
   15934:	ldr	r5, [pc, #780]	; 15c48 <free_node_boolean_operator@@Base+0x3a4>
   15938:	ldrd	r2, [r4]
   1593c:	ldr	r0, [r7, #4]
   15940:	ldrd	r8, [r5, #160]	; 0xa0
   15944:	adds	r2, r2, #1
   15948:	adc	r3, r3, #0
   1594c:	adds	r8, r8, #1
   15950:	adc	r9, r9, #0
   15954:	cmp	r0, #0
   15958:	strd	r8, [r5, #160]	; 0xa0
   1595c:	strd	r2, [r4]
   15960:	beq	15988 <free_node_boolean_operator@@Base+0xe4>
   15964:	ldrd	r2, [r4, #8]
   15968:	adds	r2, r2, #1
   1596c:	adc	r3, r3, #0
   15970:	strd	r2, [r4, #8]
   15974:	bl	1477c <free_node@@Base>
   15978:	ldrd	r2, [r4, #16]
   1597c:	adds	r2, r2, #1
   15980:	adc	r3, r3, #0
   15984:	strd	r2, [r4, #16]
   15988:	ldr	r0, [r7, #8]
   1598c:	bl	1477c <free_node@@Base>
   15990:	ldrd	r2, [r4, #24]
   15994:	ldr	r0, [r7, #12]
   15998:	adds	r2, r2, #1
   1599c:	adc	r3, r3, #0
   159a0:	strd	r2, [r4, #24]
   159a4:	bl	1477c <free_node@@Base>
   159a8:	ldrd	r8, [r4, #32]
   159ac:	mov	r0, r7
   159b0:	adds	r8, r8, #1
   159b4:	adc	r9, r9, #0
   159b8:	bl	11880 <free@plt>
   159bc:	ldrd	r2, [r5, #200]	; 0xc8
   159c0:	adds	r2, r2, #1
   159c4:	adc	r3, r3, #0
   159c8:	strd	r2, [r5, #200]	; 0xc8
   159cc:	adds	r8, r8, #1
   159d0:	adc	r9, r9, #0
   159d4:	mov	r0, r6
   159d8:	strd	r8, [r4, #32]
   159dc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   159e0:	b	11880 <free@plt>
   159e4:	ldr	r5, [pc, #604]	; 15c48 <free_node_boolean_operator@@Base+0x3a4>
   159e8:	ldr	r0, [r7, #4]
   159ec:	ldrd	r2, [r5, #120]	; 0x78
   159f0:	ldrd	r8, [r5, #224]	; 0xe0
   159f4:	adds	r2, r2, #1
   159f8:	adc	r3, r3, #0
   159fc:	adds	r8, r8, #1
   15a00:	adc	r9, r9, #0
   15a04:	cmp	r0, #0
   15a08:	strd	r2, [r5, #120]	; 0x78
   15a0c:	strd	r8, [r5, #224]	; 0xe0
   15a10:	beq	15a38 <free_node_boolean_operator@@Base+0x194>
   15a14:	ldrd	r2, [r5, #232]	; 0xe8
   15a18:	adds	r2, r2, #1
   15a1c:	adc	r3, r3, #0
   15a20:	strd	r2, [r5, #232]	; 0xe8
   15a24:	bl	1477c <free_node@@Base>
   15a28:	ldrd	r2, [r5, #240]	; 0xf0
   15a2c:	adds	r2, r2, #1
   15a30:	adc	r3, r3, #0
   15a34:	strd	r2, [r5, #240]	; 0xf0
   15a38:	mov	r0, r7
   15a3c:	bl	11880 <free@plt>
   15a40:	ldrd	r2, [r5, #216]	; 0xd8
   15a44:	ldrd	r8, [r4, #32]
   15a48:	adds	r2, r2, #1
   15a4c:	adc	r3, r3, #0
   15a50:	strd	r2, [r5, #216]	; 0xd8
   15a54:	b	159cc <free_node_boolean_operator@@Base+0x128>
   15a58:	ldr	r5, [pc, #488]	; 15c48 <free_node_boolean_operator@@Base+0x3a4>
   15a5c:	ldr	r0, [r7, #4]
   15a60:	ldrd	r2, [r5, #128]	; 0x80
   15a64:	ldrd	r8, [r5, #248]	; 0xf8
   15a68:	adds	r2, r2, #1
   15a6c:	adc	r3, r3, #0
   15a70:	adds	r8, r8, #1
   15a74:	adc	r9, r9, #0
   15a78:	cmp	r0, #0
   15a7c:	strd	r2, [r5, #128]	; 0x80
   15a80:	strd	r8, [r5, #248]	; 0xf8
   15a84:	beq	15ab4 <free_node_boolean_operator@@Base+0x210>
   15a88:	add	r1, r5, #256	; 0x100
   15a8c:	ldrd	r2, [r1]
   15a90:	adds	r2, r2, #1
   15a94:	adc	r3, r3, #0
   15a98:	strd	r2, [r1]
   15a9c:	bl	1477c <free_node@@Base>
   15aa0:	add	r1, r5, #272	; 0x110
   15aa4:	ldrd	r2, [r1, #-8]
   15aa8:	adds	r2, r2, #1
   15aac:	adc	r3, r3, #0
   15ab0:	strd	r2, [r1, #-8]
   15ab4:	mov	r0, r7
   15ab8:	bl	11880 <free@plt>
   15abc:	ldrd	r2, [r5, #168]	; 0xa8
   15ac0:	ldrd	r8, [r4, #32]
   15ac4:	adds	r2, r2, #1
   15ac8:	adc	r3, r3, #0
   15acc:	strd	r2, [r5, #168]	; 0xa8
   15ad0:	b	159cc <free_node_boolean_operator@@Base+0x128>
   15ad4:	ldr	r5, [pc, #364]	; 15c48 <free_node_boolean_operator@@Base+0x3a4>
   15ad8:	ldr	r0, [r7, #4]
   15adc:	add	sl, r5, #272	; 0x110
   15ae0:	ldrd	r2, [r5, #136]	; 0x88
   15ae4:	ldrd	r8, [sl]
   15ae8:	adds	r2, r2, #1
   15aec:	adc	r3, r3, #0
   15af0:	adds	r8, r8, #1
   15af4:	adc	r9, r9, #0
   15af8:	cmp	r0, #0
   15afc:	strd	r2, [r5, #136]	; 0x88
   15b00:	strd	r8, [sl]
   15b04:	beq	15b2c <free_node_boolean_operator@@Base+0x288>
   15b08:	ldrd	r2, [sl, #8]
   15b0c:	adds	r2, r2, #1
   15b10:	adc	r3, r3, #0
   15b14:	strd	r2, [sl, #8]
   15b18:	bl	1477c <free_node@@Base>
   15b1c:	ldrd	r2, [sl, #16]
   15b20:	adds	r2, r2, #1
   15b24:	adc	r3, r3, #0
   15b28:	strd	r2, [sl, #16]
   15b2c:	ldr	r0, [r7, #8]
   15b30:	bl	11880 <free@plt>
   15b34:	mov	r0, r7
   15b38:	bl	11880 <free@plt>
   15b3c:	ldrd	r2, [r5, #176]	; 0xb0
   15b40:	ldrd	r8, [r4, #32]
   15b44:	adds	r2, r2, #1
   15b48:	adc	r3, r3, #0
   15b4c:	strd	r2, [r5, #176]	; 0xb0
   15b50:	b	159cc <free_node_boolean_operator@@Base+0x128>
   15b54:	ldr	r5, [pc, #236]	; 15c48 <free_node_boolean_operator@@Base+0x3a4>
   15b58:	ldr	r0, [r7, #4]
   15b5c:	add	sl, r5, #304	; 0x130
   15b60:	ldrd	r2, [r5, #144]	; 0x90
   15b64:	ldrd	r8, [sl, #-8]
   15b68:	adds	r2, r2, #1
   15b6c:	adc	r3, r3, #0
   15b70:	adds	r8, r8, #1
   15b74:	adc	r9, r9, #0
   15b78:	cmp	r0, #0
   15b7c:	strd	r2, [r5, #144]	; 0x90
   15b80:	strd	r8, [sl, #-8]
   15b84:	beq	15bac <free_node_boolean_operator@@Base+0x308>
   15b88:	ldrd	r2, [sl]
   15b8c:	adds	r2, r2, #1
   15b90:	adc	r3, r3, #0
   15b94:	strd	r2, [sl]
   15b98:	bl	1477c <free_node@@Base>
   15b9c:	ldrd	r2, [sl, #8]
   15ba0:	adds	r2, r2, #1
   15ba4:	adc	r3, r3, #0
   15ba8:	strd	r2, [sl, #8]
   15bac:	mov	r0, r7
   15bb0:	bl	11880 <free@plt>
   15bb4:	ldrd	r2, [r5, #184]	; 0xb8
   15bb8:	ldrd	r8, [r4, #32]
   15bbc:	adds	r2, r2, #1
   15bc0:	adc	r3, r3, #0
   15bc4:	strd	r2, [r5, #184]	; 0xb8
   15bc8:	b	159cc <free_node_boolean_operator@@Base+0x128>
   15bcc:	ldr	r5, [pc, #116]	; 15c48 <free_node_boolean_operator@@Base+0x3a4>
   15bd0:	mov	r0, r7
   15bd4:	ldrd	r2, [r5, #152]	; 0x98
   15bd8:	adds	r2, r2, #1
   15bdc:	adc	r3, r3, #0
   15be0:	strd	r2, [r5, #152]	; 0x98
   15be4:	bl	146d8 <free_node_if@@Base>
   15be8:	ldrd	r2, [r5, #192]	; 0xc0
   15bec:	ldrd	r8, [r4, #32]
   15bf0:	adds	r2, r2, #1
   15bf4:	adc	r3, r3, #0
   15bf8:	strd	r2, [r5, #192]	; 0xc0
   15bfc:	b	159cc <free_node_boolean_operator@@Base+0x128>
   15c00:	ldr	r4, [pc, #64]	; 15c48 <free_node_boolean_operator@@Base+0x3a4>
   15c04:	ldr	r3, [pc, #64]	; 15c4c <free_node_boolean_operator@@Base+0x3a8>
   15c08:	mov	r2, #31
   15c0c:	ldrd	r6, [r4, #112]	; 0x70
   15c10:	ldr	r3, [r3]
   15c14:	mov	r1, #1
   15c18:	adds	r6, r6, #1
   15c1c:	adc	r7, r7, #0
   15c20:	ldr	r0, [pc, #40]	; 15c50 <free_node_boolean_operator@@Base+0x3ac>
   15c24:	strd	r6, [r4, #112]	; 0x70
   15c28:	bl	118a4 <fwrite@plt>
   15c2c:	ldrd	r2, [r4, #208]	; 0xd0
   15c30:	mov	r0, #1
   15c34:	adds	r2, r2, #1
   15c38:	adc	r3, r3, #0
   15c3c:	strd	r2, [r4, #208]	; 0xd0
   15c40:	bl	11928 <exit@plt>
   15c44:	andeq	fp, r2, r0, asr r3
   15c48:	andeq	fp, r2, r0, lsl r2
   15c4c:	andeq	sl, r2, r8, lsl #19
   15c50:	strdeq	r9, [r1], -ip

00015c54 <get_boolean_op_value@@Base>:
   15c54:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15c58:	mov	r1, #2
   15c5c:	ldr	r4, [pc, #536]	; 15e7c <get_boolean_op_value@@Base+0x228>
   15c60:	ldr	r5, [r0, #4]
   15c64:	ldrd	r2, [r4, #-8]
   15c68:	mov	r0, r5
   15c6c:	adds	r2, r2, #1
   15c70:	adc	r3, r3, #0
   15c74:	strd	r2, [r4, #-8]
   15c78:	bl	119a0 <strnlen@plt>
   15c7c:	cmp	r0, #2
   15c80:	beq	15cec <get_boolean_op_value@@Base+0x98>
   15c84:	ldrd	r2, [r4, #8]
   15c88:	ldrb	r1, [r5]
   15c8c:	adds	r2, r2, #1
   15c90:	adc	r3, r3, #0
   15c94:	cmp	r1, #60	; 0x3c
   15c98:	strd	r2, [r4, #8]
   15c9c:	beq	15d90 <get_boolean_op_value@@Base+0x13c>
   15ca0:	cmp	r1, #62	; 0x3e
   15ca4:	beq	15d70 <get_boolean_op_value@@Base+0x11c>
   15ca8:	cmp	r1, #33	; 0x21
   15cac:	beq	15d88 <get_boolean_op_value@@Base+0x134>
   15cb0:	ldrd	r6, [r4, #72]	; 0x48
   15cb4:	ldr	r3, [pc, #452]	; 15e80 <get_boolean_op_value@@Base+0x22c>
   15cb8:	mov	r2, r5
   15cbc:	adds	r6, r6, #1
   15cc0:	adc	r7, r7, #0
   15cc4:	ldr	r0, [r3]
   15cc8:	ldr	r1, [pc, #436]	; 15e84 <get_boolean_op_value@@Base+0x230>
   15ccc:	strd	r6, [r4, #72]	; 0x48
   15cd0:	bl	11940 <fprintf@plt>
   15cd4:	ldrd	r2, [r4, #96]	; 0x60
   15cd8:	mov	r0, #1
   15cdc:	adds	r2, r2, #1
   15ce0:	adc	r3, r3, #0
   15ce4:	strd	r2, [r4, #96]	; 0x60
   15ce8:	bl	11928 <exit@plt>
   15cec:	ldrd	r8, [r4]
   15cf0:	mov	r2, r0
   15cf4:	mov	r6, r0
   15cf8:	adds	r8, r8, #1
   15cfc:	adc	r9, r9, #0
   15d00:	ldr	r1, [pc, #384]	; 15e88 <get_boolean_op_value@@Base+0x234>
   15d04:	mov	r0, r5
   15d08:	strd	r8, [r4]
   15d0c:	bl	119d0 <strncmp@plt>
   15d10:	cmp	r0, #0
   15d14:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15d18:	ldrd	r8, [r4, #16]
   15d1c:	mov	r2, r6
   15d20:	ldr	r1, [pc, #356]	; 15e8c <get_boolean_op_value@@Base+0x238>
   15d24:	adds	r8, r8, #1
   15d28:	adc	r9, r9, #0
   15d2c:	mov	r0, r5
   15d30:	strd	r8, [r4, #16]
   15d34:	bl	119d0 <strncmp@plt>
   15d38:	cmp	r0, #0
   15d3c:	beq	15da8 <get_boolean_op_value@@Base+0x154>
   15d40:	ldrd	r8, [r4, #24]
   15d44:	mov	r2, r6
   15d48:	ldr	r1, [pc, #320]	; 15e90 <get_boolean_op_value@@Base+0x23c>
   15d4c:	adds	r8, r8, #1
   15d50:	adc	r9, r9, #0
   15d54:	mov	r0, r5
   15d58:	strd	r8, [r4, #24]
   15d5c:	bl	119d0 <strncmp@plt>
   15d60:	cmp	r0, #0
   15d64:	bne	15db0 <get_boolean_op_value@@Base+0x15c>
   15d68:	mov	r0, r6
   15d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15d70:	ldrd	r2, [r4, #88]	; 0x58
   15d74:	mov	r0, #7
   15d78:	adds	r2, r2, #1
   15d7c:	adc	r3, r3, #0
   15d80:	strd	r2, [r4, #88]	; 0x58
   15d84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15d88:	mov	r0, #8
   15d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15d90:	ldrd	r2, [r4, #80]	; 0x50
   15d94:	mov	r0, #6
   15d98:	adds	r2, r2, #1
   15d9c:	adc	r3, r3, #0
   15da0:	strd	r2, [r4, #80]	; 0x50
   15da4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15da8:	mov	r0, #1
   15dac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15db0:	ldrd	r8, [r4, #32]
   15db4:	mov	r2, r6
   15db8:	ldr	r1, [pc, #212]	; 15e94 <get_boolean_op_value@@Base+0x240>
   15dbc:	adds	r8, r8, #1
   15dc0:	adc	r9, r9, #0
   15dc4:	mov	r0, r5
   15dc8:	strd	r8, [r4, #32]
   15dcc:	bl	119d0 <strncmp@plt>
   15dd0:	cmp	r0, #0
   15dd4:	bne	15de0 <get_boolean_op_value@@Base+0x18c>
   15dd8:	mov	r0, #3
   15ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15de0:	ldrd	r8, [r4, #40]	; 0x28
   15de4:	mov	r2, r6
   15de8:	ldr	r1, [pc, #168]	; 15e98 <get_boolean_op_value@@Base+0x244>
   15dec:	adds	r8, r8, #1
   15df0:	adc	r9, r9, #0
   15df4:	mov	r0, r5
   15df8:	strd	r8, [r4, #40]	; 0x28
   15dfc:	bl	119d0 <strncmp@plt>
   15e00:	cmp	r0, #0
   15e04:	bne	15e10 <get_boolean_op_value@@Base+0x1bc>
   15e08:	mov	r0, #4
   15e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15e10:	ldrd	r8, [r4, #48]	; 0x30
   15e14:	mov	r2, r6
   15e18:	ldr	r1, [pc, #124]	; 15e9c <get_boolean_op_value@@Base+0x248>
   15e1c:	adds	r8, r8, #1
   15e20:	adc	r9, r9, #0
   15e24:	mov	r0, r5
   15e28:	strd	r8, [r4, #48]	; 0x30
   15e2c:	bl	119d0 <strncmp@plt>
   15e30:	cmp	r0, #0
   15e34:	bne	15e40 <get_boolean_op_value@@Base+0x1ec>
   15e38:	mov	r0, #5
   15e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15e40:	ldrd	r6, [r4, #56]	; 0x38
   15e44:	ldr	r3, [pc, #52]	; 15e80 <get_boolean_op_value@@Base+0x22c>
   15e48:	mov	r2, r5
   15e4c:	adds	r6, r6, #1
   15e50:	adc	r7, r7, #0
   15e54:	ldr	r0, [r3]
   15e58:	ldr	r1, [pc, #36]	; 15e84 <get_boolean_op_value@@Base+0x230>
   15e5c:	strd	r6, [r4, #56]	; 0x38
   15e60:	bl	11940 <fprintf@plt>
   15e64:	ldrd	r2, [r4, #64]	; 0x40
   15e68:	mov	r0, #1
   15e6c:	adds	r2, r2, #1
   15e70:	adc	r3, r3, #0
   15e74:	strd	r2, [r4, #64]	; 0x40
   15e78:	bl	11928 <exit@plt>
   15e7c:	andeq	fp, r2, r0, lsl #7
   15e80:	andeq	sl, r2, r8, lsl #19
   15e84:	andeq	r9, r1, r4, lsr r9
   15e88:	andeq	r9, r1, ip, lsl r9
   15e8c:	andeq	r9, r1, r0, lsr #18
   15e90:	andeq	r9, r1, r4, lsr #18
   15e94:	andeq	r9, r1, r8, lsr #18
   15e98:	andeq	r9, r1, ip, lsr #18
   15e9c:	andeq	r9, r1, r0, lsr r9

00015ea0 <init_grammar@@Base>:
   15ea0:	ldr	ip, [pc, #20]	; 15ebc <init_grammar@@Base+0x1c>
   15ea4:	str	r1, [r0]
   15ea8:	ldrd	r2, [ip]
   15eac:	adds	r2, r2, #1
   15eb0:	adc	r3, r3, #0
   15eb4:	strd	r2, [ip]
   15eb8:	bx	lr
   15ebc:	andeq	fp, r2, r8, ror #7

00015ec0 <destroy_grammar@@Base>:
   15ec0:	ldr	r1, [pc, #16]	; 15ed8 <destroy_grammar@@Base+0x18>
   15ec4:	ldrd	r2, [r1, #8]
   15ec8:	adds	r2, r2, #1
   15ecc:	adc	r3, r3, #0
   15ed0:	strd	r2, [r1, #8]
   15ed4:	bx	lr
   15ed8:	andeq	fp, r2, r8, ror #7

00015edc <read_return_expression@@Base>:
   15edc:	push	{r4, r5, r6, r7, r8, lr}
   15ee0:	mov	r5, r0
   15ee4:	ldr	r4, [pc, #256]	; 15fec <read_return_expression@@Base+0x110>
   15ee8:	ldr	r0, [r0]
   15eec:	ldrd	r2, [r4, #16]
   15ef0:	adds	r2, r2, #1
   15ef4:	adc	r3, r3, #0
   15ef8:	strd	r2, [r4, #16]
   15efc:	bl	12214 <next@@Base>
   15f00:	ldrd	r2, [r4, #24]
   15f04:	adds	r2, r2, #1
   15f08:	adc	r3, r3, #0
   15f0c:	strd	r2, [r4, #24]
   15f10:	ldr	r1, [r0]
   15f14:	cmp	r1, #1
   15f18:	bne	15fe0 <read_return_expression@@Base+0x104>
   15f1c:	ldrd	r2, [r4, #32]
   15f20:	mov	r6, r0
   15f24:	mov	r0, #12
   15f28:	adds	r2, r2, #1
   15f2c:	adc	r3, r3, #0
   15f30:	strd	r2, [r4, #32]
   15f34:	bl	118e0 <malloc@plt>
   15f38:	ldr	r1, [r6, #4]
   15f3c:	mov	r7, r0
   15f40:	bl	145cc <init_node_int@@Base>
   15f44:	ldrd	r2, [r4, #40]	; 0x28
   15f48:	mov	r0, r6
   15f4c:	adds	r2, r2, #1
   15f50:	adc	r3, r3, #0
   15f54:	strd	r2, [r4, #40]	; 0x28
   15f58:	bl	143cc <free_token_int_value@@Base>
   15f5c:	ldrd	r2, [r4, #48]	; 0x30
   15f60:	mov	r0, #12
   15f64:	adds	r2, r2, #1
   15f68:	adc	r3, r3, #0
   15f6c:	strd	r2, [r4, #48]	; 0x30
   15f70:	bl	118e0 <malloc@plt>
   15f74:	mov	r1, r7
   15f78:	mov	r6, r0
   15f7c:	bl	14634 <init_node_return@@Base>
   15f80:	ldrd	r2, [r4, #56]	; 0x38
   15f84:	ldr	r0, [r5]
   15f88:	adds	r2, r2, #1
   15f8c:	adc	r3, r3, #0
   15f90:	strd	r2, [r4, #56]	; 0x38
   15f94:	bl	12214 <next@@Base>
   15f98:	ldrd	r2, [r4, #64]	; 0x40
   15f9c:	adds	r2, r2, #1
   15fa0:	adc	r3, r3, #0
   15fa4:	strd	r2, [r4, #64]	; 0x40
   15fa8:	ldr	r3, [r0]
   15fac:	cmp	r3, #8
   15fb0:	bne	15fe0 <read_return_expression@@Base+0x104>
   15fb4:	ldrd	r2, [r4, #72]	; 0x48
   15fb8:	adds	r2, r2, #1
   15fbc:	adc	r3, r3, #0
   15fc0:	strd	r2, [r4, #72]	; 0x48
   15fc4:	bl	14490 <free_token_semicolon@@Base>
   15fc8:	ldrd	r2, [r4, #80]	; 0x50
   15fcc:	mov	r0, r6
   15fd0:	adds	r2, r2, #1
   15fd4:	adc	r3, r3, #0
   15fd8:	strd	r2, [r4, #80]	; 0x50
   15fdc:	pop	{r4, r5, r6, r7, r8, pc}
   15fe0:	mov	r6, #0
   15fe4:	mov	r0, r6
   15fe8:	pop	{r4, r5, r6, r7, r8, pc}
   15fec:	andeq	fp, r2, r8, ror #7

00015ff0 <read_boolean_unary_expression@@Base>:
   15ff0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15ff4:	mov	r6, r0
   15ff8:	ldr	r4, [pc, #360]	; 16168 <read_boolean_unary_expression@@Base+0x178>
   15ffc:	mov	r0, #20
   16000:	ldrd	r2, [r4, #88]	; 0x58
   16004:	adds	r2, r2, #1
   16008:	adc	r3, r3, #0
   1600c:	strd	r2, [r4, #88]	; 0x58
   16010:	bl	118e0 <malloc@plt>
   16014:	mov	r5, r0
   16018:	ldr	r0, [r6]
   1601c:	bl	12214 <next@@Base>
   16020:	ldr	r7, [r0]
   16024:	cmp	r7, #12
   16028:	bne	16100 <read_boolean_unary_expression@@Base+0x110>
   1602c:	ldrd	r2, [r4, #104]	; 0x68
   16030:	mov	r9, r0
   16034:	adds	r2, r2, #1
   16038:	adc	r3, r3, #0
   1603c:	strd	r2, [r4, #104]	; 0x68
   16040:	bl	15c54 <get_boolean_op_value@@Base>
   16044:	ldrd	r2, [r4, #120]	; 0x78
   16048:	adds	r2, r2, #1
   1604c:	adc	r3, r3, #0
   16050:	strd	r2, [r4, #120]	; 0x78
   16054:	mov	r8, r0
   16058:	mov	r0, r9
   1605c:	bl	14500 <free_token_boolean_op@@Base>
   16060:	ldrd	r2, [r4, #128]	; 0x80
   16064:	ldr	r0, [r6]
   16068:	adds	r2, r2, #1
   1606c:	adc	r3, r3, #0
   16070:	strd	r2, [r4, #128]	; 0x80
   16074:	bl	12214 <next@@Base>
   16078:	ldr	r3, [r0]
   1607c:	mov	r9, r0
   16080:	cmp	r3, #1
   16084:	bne	16134 <read_boolean_unary_expression@@Base+0x144>
   16088:	ldrd	r2, [r4, #144]	; 0x90
   1608c:	mov	r0, r7
   16090:	adds	r2, r2, #1
   16094:	adc	r3, r3, #0
   16098:	strd	r2, [r4, #144]	; 0x90
   1609c:	bl	118e0 <malloc@plt>
   160a0:	ldr	r1, [r9, #4]
   160a4:	mov	sl, r0
   160a8:	bl	145cc <init_node_int@@Base>
   160ac:	ldrd	r6, [r4, #160]	; 0xa0
   160b0:	mov	r0, r9
   160b4:	adds	r6, r6, #1
   160b8:	adc	r7, r7, #0
   160bc:	strd	r6, [r4, #160]	; 0xa0
   160c0:	bl	143cc <free_token_int_value@@Base>
   160c4:	ldrd	r6, [r4, #168]	; 0xa8
   160c8:	mov	r2, sl
   160cc:	mov	r0, r5
   160d0:	adds	r6, r6, #1
   160d4:	adc	r7, r7, #0
   160d8:	mov	r1, r8
   160dc:	mov	r3, #0
   160e0:	strd	r6, [r4, #168]	; 0xa8
   160e4:	bl	146a0 <init_node_boolean_operator@@Base>
   160e8:	ldrd	r2, [r4, #176]	; 0xb0
   160ec:	mov	r0, r5
   160f0:	adds	r2, r2, #1
   160f4:	adc	r3, r3, #0
   160f8:	strd	r2, [r4, #176]	; 0xb0
   160fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16100:	ldrd	r2, [r4, #96]	; 0x60
   16104:	mov	r0, r5
   16108:	mov	r5, #0
   1610c:	adds	r2, r2, #1
   16110:	adc	r3, r3, #0
   16114:	strd	r2, [r4, #96]	; 0x60
   16118:	bl	158a4 <free_node_boolean_operator@@Base>
   1611c:	ldrd	r2, [r4, #112]	; 0x70
   16120:	mov	r0, r5
   16124:	adds	r2, r2, #1
   16128:	adc	r3, r3, #0
   1612c:	strd	r2, [r4, #112]	; 0x70
   16130:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16134:	ldrd	r2, [r4, #136]	; 0x88
   16138:	mov	r0, r5
   1613c:	mov	r5, #0
   16140:	adds	r2, r2, #1
   16144:	adc	r3, r3, #0
   16148:	strd	r2, [r4, #136]	; 0x88
   1614c:	bl	158a4 <free_node_boolean_operator@@Base>
   16150:	ldrd	r2, [r4, #152]	; 0x98
   16154:	mov	r0, r5
   16158:	adds	r2, r2, #1
   1615c:	adc	r3, r3, #0
   16160:	strd	r2, [r4, #152]	; 0x98
   16164:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16168:	andeq	fp, r2, r8, ror #7

0001616c <read_boolean_binary_expression@@Base>:
   1616c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16170:	mov	r5, r0
   16174:	ldr	r4, [pc, #584]	; 163c4 <read_boolean_binary_expression@@Base+0x258>
   16178:	ldr	r0, [r0]
   1617c:	ldrd	r2, [r4, #184]	; 0xb8
   16180:	adds	r2, r2, #1
   16184:	adc	r3, r3, #0
   16188:	strd	r2, [r4, #184]	; 0xb8
   1618c:	bl	12214 <next@@Base>
   16190:	ldr	r1, [r0]
   16194:	mov	r7, r0
   16198:	cmp	r1, #1
   1619c:	beq	1620c <read_boolean_binary_expression@@Base+0xa0>
   161a0:	ldrd	r2, [r4, #192]	; 0xc0
   161a4:	adds	r2, r2, #1
   161a8:	adc	r3, r3, #0
   161ac:	cmp	r1, #12
   161b0:	strd	r2, [r4, #192]	; 0xc0
   161b4:	movne	r5, #0
   161b8:	bne	16204 <read_boolean_binary_expression@@Base+0x98>
   161bc:	ldrd	r2, [r4, #208]	; 0xd0
   161c0:	mov	r1, r0
   161c4:	ldr	r0, [r5]
   161c8:	adds	r2, r2, #1
   161cc:	adc	r3, r3, #0
   161d0:	strd	r2, [r4, #208]	; 0xd0
   161d4:	bl	12350 <push_back@@Base>
   161d8:	ldrd	r2, [r4, #216]	; 0xd8
   161dc:	mov	r0, r5
   161e0:	adds	r2, r2, #1
   161e4:	adc	r3, r3, #0
   161e8:	strd	r2, [r4, #216]	; 0xd8
   161ec:	bl	15ff0 <read_boolean_unary_expression@@Base>
   161f0:	ldrd	r2, [r4, #224]	; 0xe0
   161f4:	adds	r2, r2, #1
   161f8:	adc	r3, r3, #0
   161fc:	strd	r2, [r4, #224]	; 0xe0
   16200:	mov	r5, r0
   16204:	mov	r0, r5
   16208:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1620c:	ldrd	r2, [r4, #200]	; 0xc8
   16210:	mov	r0, #12
   16214:	adds	r2, r2, #1
   16218:	adc	r3, r3, #0
   1621c:	strd	r2, [r4, #200]	; 0xc8
   16220:	bl	118e0 <malloc@plt>
   16224:	ldr	r1, [r7, #4]
   16228:	mov	r6, r0
   1622c:	bl	145cc <init_node_int@@Base>
   16230:	ldrd	r2, [r4, #232]	; 0xe8
   16234:	mov	r0, r7
   16238:	adds	r2, r2, #1
   1623c:	adc	r3, r3, #0
   16240:	strd	r2, [r4, #232]	; 0xe8
   16244:	bl	143cc <free_token_int_value@@Base>
   16248:	ldrd	r2, [r4, #240]	; 0xf0
   1624c:	ldr	r0, [r5]
   16250:	adds	r2, r2, #1
   16254:	adc	r3, r3, #0
   16258:	strd	r2, [r4, #240]	; 0xf0
   1625c:	bl	12214 <next@@Base>
   16260:	ldr	r8, [r0]
   16264:	mov	r9, r0
   16268:	cmp	r8, #12
   1626c:	bne	1635c <read_boolean_binary_expression@@Base+0x1f0>
   16270:	add	r1, r4, #256	; 0x100
   16274:	add	r7, r4, #288	; 0x120
   16278:	ldrd	r2, [r1]
   1627c:	adds	r2, r2, #1
   16280:	adc	r3, r3, #0
   16284:	strd	r2, [r1]
   16288:	bl	15c54 <get_boolean_op_value@@Base>
   1628c:	add	r1, r4, #272	; 0x110
   16290:	ldrd	r2, [r1]
   16294:	adds	r2, r2, #1
   16298:	adc	r3, r3, #0
   1629c:	strd	r2, [r1]
   162a0:	mov	sl, r0
   162a4:	mov	r0, r9
   162a8:	bl	14500 <free_token_boolean_op@@Base>
   162ac:	ldrd	r2, [r7, #-8]
   162b0:	ldr	r0, [r5]
   162b4:	adds	r2, r2, #1
   162b8:	adc	r3, r3, #0
   162bc:	strd	r2, [r7, #-8]
   162c0:	bl	12214 <next@@Base>
   162c4:	ldr	r3, [r0]
   162c8:	mov	r9, r0
   162cc:	cmp	r3, #1
   162d0:	bne	16390 <read_boolean_binary_expression@@Base+0x224>
   162d4:	add	r1, r4, #304	; 0x130
   162d8:	mov	r0, r8
   162dc:	ldrd	r2, [r1, #-8]
   162e0:	add	r5, r4, #320	; 0x140
   162e4:	add	r4, r4, #336	; 0x150
   162e8:	adds	r2, r2, #1
   162ec:	adc	r3, r3, #0
   162f0:	strd	r2, [r1, #-8]
   162f4:	bl	118e0 <malloc@plt>
   162f8:	ldr	r1, [r9, #4]
   162fc:	mov	r7, r0
   16300:	bl	145cc <init_node_int@@Base>
   16304:	ldrd	r2, [r5, #-8]
   16308:	mov	r0, r9
   1630c:	adds	r2, r2, #1
   16310:	adc	r3, r3, #0
   16314:	strd	r2, [r5, #-8]
   16318:	bl	143cc <free_token_int_value@@Base>
   1631c:	ldrd	r2, [r5]
   16320:	mov	r0, #20
   16324:	adds	r2, r2, #1
   16328:	adc	r3, r3, #0
   1632c:	strd	r2, [r5]
   16330:	bl	118e0 <malloc@plt>
   16334:	mov	r3, r7
   16338:	mov	r2, r6
   1633c:	mov	r1, sl
   16340:	mov	r5, r0
   16344:	bl	146a0 <init_node_boolean_operator@@Base>
   16348:	ldrd	r2, [r4, #-8]
   1634c:	adds	r2, r2, #1
   16350:	adc	r3, r3, #0
   16354:	strd	r2, [r4, #-8]
   16358:	b	16204 <read_boolean_binary_expression@@Base+0x98>
   1635c:	ldrd	r2, [r4, #248]	; 0xf8
   16360:	add	r4, r4, #272	; 0x110
   16364:	mov	r0, r6
   16368:	adds	r2, r2, #1
   1636c:	adc	r3, r3, #0
   16370:	mov	r5, #0
   16374:	strd	r2, [r4, #-24]	; 0xffffffe8
   16378:	bl	1477c <free_node@@Base>
   1637c:	ldrd	r2, [r4, #-8]
   16380:	adds	r2, r2, #1
   16384:	adc	r3, r3, #0
   16388:	strd	r2, [r4, #-8]
   1638c:	b	16204 <read_boolean_binary_expression@@Base+0x98>
   16390:	ldrd	r2, [r7]
   16394:	add	r4, r4, #304	; 0x130
   16398:	mov	r0, r6
   1639c:	adds	r2, r2, #1
   163a0:	adc	r3, r3, #0
   163a4:	mov	r5, #0
   163a8:	strd	r2, [r7]
   163ac:	bl	1477c <free_node@@Base>
   163b0:	ldrd	r2, [r4]
   163b4:	adds	r2, r2, #1
   163b8:	adc	r3, r3, #0
   163bc:	strd	r2, [r4]
   163c0:	b	16204 <read_boolean_binary_expression@@Base+0x98>
   163c4:	andeq	fp, r2, r8, ror #7

000163c8 <read_single_boolean_expression@@Base>:
   163c8:	cmp	r1, #0
   163cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163d0:	sub	sp, sp, #12
   163d4:	beq	16630 <read_single_boolean_expression@@Base+0x268>
   163d8:	mov	r9, r3
   163dc:	ldr	r3, [r2]
   163e0:	mov	r7, r2
   163e4:	cmp	r3, #0
   163e8:	beq	166c8 <read_single_boolean_expression@@Base+0x300>
   163ec:	ldr	r4, [pc, #752]	; 166e4 <read_single_boolean_expression@@Base+0x31c>
   163f0:	mov	r6, r0
   163f4:	add	r5, r4, #336	; 0x150
   163f8:	ldrd	sl, [r4, #184]	; 0xb8
   163fc:	ldrd	r2, [r5, #16]
   16400:	ldr	r0, [r0]
   16404:	adds	sl, sl, #1
   16408:	adc	fp, fp, #0
   1640c:	adds	r2, r2, #1
   16410:	adc	r3, r3, #0
   16414:	strd	sl, [r4, #184]	; 0xb8
   16418:	strd	r2, [r5, #16]
   1641c:	bl	12214 <next@@Base>
   16420:	ldr	r1, [r0]
   16424:	mov	r8, r0
   16428:	cmp	r1, #1
   1642c:	beq	164e4 <read_single_boolean_expression@@Base+0x11c>
   16430:	ldrd	r2, [r4, #192]	; 0xc0
   16434:	adds	r2, r2, #1
   16438:	adc	r3, r3, #0
   1643c:	cmp	r1, #12
   16440:	strd	r2, [r4, #192]	; 0xc0
   16444:	movne	r6, #0
   16448:	bne	16494 <read_single_boolean_expression@@Base+0xcc>
   1644c:	ldrd	r2, [r4, #208]	; 0xd0
   16450:	mov	r1, r0
   16454:	ldr	r0, [r6]
   16458:	adds	r2, r2, #1
   1645c:	adc	r3, r3, #0
   16460:	strd	r2, [r4, #208]	; 0xd0
   16464:	bl	12350 <push_back@@Base>
   16468:	ldrd	r2, [r4, #216]	; 0xd8
   1646c:	mov	r0, r6
   16470:	adds	r2, r2, #1
   16474:	adc	r3, r3, #0
   16478:	strd	r2, [r4, #216]	; 0xd8
   1647c:	bl	15ff0 <read_boolean_unary_expression@@Base>
   16480:	ldrd	r2, [r4, #224]	; 0xe0
   16484:	adds	r2, r2, #1
   16488:	adc	r3, r3, #0
   1648c:	strd	r2, [r4, #224]	; 0xe0
   16490:	mov	r6, r0
   16494:	ldrd	r2, [r5, #32]
   16498:	mov	r0, #20
   1649c:	adds	r2, r2, #1
   164a0:	adc	r3, r3, #0
   164a4:	strd	r2, [r5, #32]
   164a8:	bl	118e0 <malloc@plt>
   164ac:	mov	r3, r6
   164b0:	mov	r1, r9
   164b4:	mov	r2, #0
   164b8:	mov	r4, r0
   164bc:	bl	146a0 <init_node_boolean_operator@@Base>
   164c0:	ldrd	r2, [r5, #40]	; 0x28
   164c4:	mov	r1, #0
   164c8:	str	r1, [r7]
   164cc:	adds	r2, r2, #1
   164d0:	adc	r3, r3, #0
   164d4:	strd	r2, [r5, #40]	; 0x28
   164d8:	mov	r0, r4
   164dc:	add	sp, sp, #12
   164e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164e4:	ldrd	r2, [r4, #200]	; 0xc8
   164e8:	mov	r0, #12
   164ec:	adds	r2, r2, #1
   164f0:	adc	r3, r3, #0
   164f4:	strd	r2, [r4, #200]	; 0xc8
   164f8:	bl	118e0 <malloc@plt>
   164fc:	ldr	r1, [r8, #4]
   16500:	str	r0, [sp]
   16504:	bl	145cc <init_node_int@@Base>
   16508:	ldrd	r2, [r4, #232]	; 0xe8
   1650c:	mov	r0, r8
   16510:	adds	r2, r2, #1
   16514:	adc	r3, r3, #0
   16518:	strd	r2, [r4, #232]	; 0xe8
   1651c:	bl	143cc <free_token_int_value@@Base>
   16520:	ldrd	r2, [r4, #240]	; 0xf0
   16524:	ldr	r0, [r6]
   16528:	adds	r2, r2, #1
   1652c:	adc	r3, r3, #0
   16530:	strd	r2, [r4, #240]	; 0xf0
   16534:	bl	12214 <next@@Base>
   16538:	ldr	fp, [r0]
   1653c:	mov	sl, r0
   16540:	cmp	fp, #12
   16544:	bne	16660 <read_single_boolean_expression@@Base+0x298>
   16548:	add	r1, r4, #256	; 0x100
   1654c:	add	r8, r4, #288	; 0x120
   16550:	ldrd	r2, [r1]
   16554:	adds	r2, r2, #1
   16558:	adc	r3, r3, #0
   1655c:	strd	r2, [r1]
   16560:	bl	15c54 <get_boolean_op_value@@Base>
   16564:	add	r1, r4, #272	; 0x110
   16568:	ldrd	r2, [r1]
   1656c:	adds	r2, r2, #1
   16570:	adc	r3, r3, #0
   16574:	strd	r2, [r1]
   16578:	str	r0, [sp, #4]
   1657c:	mov	r0, sl
   16580:	bl	14500 <free_token_boolean_op@@Base>
   16584:	ldrd	r2, [r8, #-8]
   16588:	ldr	r0, [r6]
   1658c:	adds	r2, r2, #1
   16590:	adc	r3, r3, #0
   16594:	strd	r2, [r8, #-8]
   16598:	bl	12214 <next@@Base>
   1659c:	ldr	r3, [r0]
   165a0:	mov	r6, r0
   165a4:	cmp	r3, #1
   165a8:	bne	16694 <read_single_boolean_expression@@Base+0x2cc>
   165ac:	add	r1, r4, #304	; 0x130
   165b0:	mov	r0, fp
   165b4:	ldrd	r2, [r1, #-8]
   165b8:	add	r4, r4, #320	; 0x140
   165bc:	adds	r2, r2, #1
   165c0:	adc	r3, r3, #0
   165c4:	strd	r2, [r1, #-8]
   165c8:	bl	118e0 <malloc@plt>
   165cc:	ldr	r1, [r6, #4]
   165d0:	mov	r8, r0
   165d4:	bl	145cc <init_node_int@@Base>
   165d8:	ldrd	r2, [r4, #-8]
   165dc:	mov	r0, r6
   165e0:	adds	r2, r2, #1
   165e4:	adc	r3, r3, #0
   165e8:	strd	r2, [r4, #-8]
   165ec:	bl	143cc <free_token_int_value@@Base>
   165f0:	ldrd	r2, [r4]
   165f4:	mov	r0, #20
   165f8:	adds	r2, r2, #1
   165fc:	adc	r3, r3, #0
   16600:	strd	r2, [r4]
   16604:	bl	118e0 <malloc@plt>
   16608:	mov	r3, r8
   1660c:	ldr	r2, [sp]
   16610:	ldr	r1, [sp, #4]
   16614:	mov	r6, r0
   16618:	bl	146a0 <init_node_boolean_operator@@Base>
   1661c:	ldrd	r2, [r5, #-8]
   16620:	adds	r2, r2, #1
   16624:	adc	r3, r3, #0
   16628:	strd	r2, [r5, #-8]
   1662c:	b	16494 <read_single_boolean_expression@@Base+0xcc>
   16630:	ldr	r5, [pc, #176]	; 166e8 <read_single_boolean_expression@@Base+0x320>
   16634:	ldrd	r2, [r5]
   16638:	adds	r2, r2, #1
   1663c:	adc	r3, r3, #0
   16640:	strd	r2, [r5]
   16644:	bl	1616c <read_boolean_binary_expression@@Base>
   16648:	ldrd	r2, [r5, #8]
   1664c:	adds	r2, r2, #1
   16650:	adc	r3, r3, #0
   16654:	strd	r2, [r5, #8]
   16658:	mov	r4, r0
   1665c:	b	164d8 <read_single_boolean_expression@@Base+0x110>
   16660:	ldrd	r2, [r4, #248]	; 0xf8
   16664:	add	r4, r4, #272	; 0x110
   16668:	ldr	r0, [sp]
   1666c:	adds	r2, r2, #1
   16670:	adc	r3, r3, #0
   16674:	mov	r6, #0
   16678:	strd	r2, [r4, #-24]	; 0xffffffe8
   1667c:	bl	1477c <free_node@@Base>
   16680:	ldrd	r2, [r4, #-8]
   16684:	adds	r2, r2, #1
   16688:	adc	r3, r3, #0
   1668c:	strd	r2, [r4, #-8]
   16690:	b	16494 <read_single_boolean_expression@@Base+0xcc>
   16694:	ldrd	r2, [r8]
   16698:	add	r4, r4, #304	; 0x130
   1669c:	ldr	r0, [sp]
   166a0:	adds	r2, r2, #1
   166a4:	adc	r3, r3, #0
   166a8:	mov	r6, #0
   166ac:	strd	r2, [r8]
   166b0:	bl	1477c <free_node@@Base>
   166b4:	ldrd	r2, [r4]
   166b8:	adds	r2, r2, #1
   166bc:	adc	r3, r3, #0
   166c0:	strd	r2, [r4]
   166c4:	b	16494 <read_single_boolean_expression@@Base+0xcc>
   166c8:	ldr	r1, [pc, #24]	; 166e8 <read_single_boolean_expression@@Base+0x320>
   166cc:	ldr	r3, [r3, #4]
   166d0:	ldrd	r2, [r1, #24]
   166d4:	adds	r2, r2, #1
   166d8:	adc	r3, r3, #0
   166dc:	strd	r2, [r1, #24]
   166e0:	udf	#0
   166e4:	andeq	fp, r2, r8, ror #7
   166e8:	andeq	fp, r2, r8, lsr r5

000166ec <read_boolean_expression@@Base>:
   166ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   166f0:	sub	sp, sp, #8
   166f4:	ldr	r4, [pc, #412]	; 16898 <read_boolean_expression@@Base+0x1ac>
   166f8:	mov	r6, r0
   166fc:	mov	r5, #0
   16700:	ldrd	r2, [r4, #-8]
   16704:	ldr	r0, [r0]
   16708:	str	r5, [sp, #4]
   1670c:	adds	r2, r2, #1
   16710:	adc	r3, r3, #0
   16714:	strd	r2, [r4, #-8]
   16718:	bl	12214 <next@@Base>
   1671c:	ldrd	r2, [r4]
   16720:	adds	r2, r2, #1
   16724:	adc	r3, r3, #0
   16728:	strd	r2, [r4]
   1672c:	ldr	r1, [r0]
   16730:	cmp	r1, #4
   16734:	beq	167e0 <read_boolean_expression@@Base+0xf4>
   16738:	mov	r8, #1
   1673c:	ldrd	r2, [r4, #72]	; 0x48
   16740:	adds	r2, r2, #1
   16744:	adc	r3, r3, #0
   16748:	cmp	r1, #3
   1674c:	strd	r2, [r4, #72]	; 0x48
   16750:	beq	16794 <read_boolean_expression@@Base+0xa8>
   16754:	cmp	r1, #12
   16758:	beq	16868 <read_boolean_expression@@Base+0x17c>
   1675c:	cmp	r1, #1
   16760:	beq	16810 <read_boolean_expression@@Base+0x124>
   16764:	ldr	r3, [pc, #304]	; 1689c <read_boolean_expression@@Base+0x1b0>
   16768:	mov	r2, #33	; 0x21
   1676c:	mov	r1, #1
   16770:	ldr	r3, [r3]
   16774:	ldr	r0, [pc, #292]	; 168a0 <read_boolean_expression@@Base+0x1b4>
   16778:	bl	118a4 <fwrite@plt>
   1677c:	ldrd	r2, [r4, #56]	; 0x38
   16780:	mov	r0, #1
   16784:	adds	r2, r2, #1
   16788:	adc	r3, r3, #0
   1678c:	strd	r2, [r4, #56]	; 0x38
   16790:	bl	11928 <exit@plt>
   16794:	ldrd	sl, [r4, #16]
   16798:	mov	r1, r5
   1679c:	mov	r3, r7
   167a0:	adds	sl, sl, #1
   167a4:	adc	fp, fp, #0
   167a8:	add	r2, sp, #4
   167ac:	mov	r0, r6
   167b0:	strd	sl, [r4, #16]
   167b4:	bl	163c8 <read_single_boolean_expression@@Base>
   167b8:	ldrd	r2, [r4, #48]	; 0x30
   167bc:	adds	r2, r2, #1
   167c0:	adc	r3, r3, #0
   167c4:	strd	r2, [r4, #48]	; 0x30
   167c8:	mov	r5, r0
   167cc:	ldr	r0, [r6]
   167d0:	bl	12214 <next@@Base>
   167d4:	ldr	r1, [r0]
   167d8:	cmp	r1, #4
   167dc:	bne	1673c <read_boolean_expression@@Base+0x50>
   167e0:	ldrd	r2, [r4, #80]	; 0x50
   167e4:	adds	r2, r2, #1
   167e8:	adc	r3, r3, #0
   167ec:	strd	r2, [r4, #80]	; 0x50
   167f0:	bl	14420 <free_token_cpar@@Base>
   167f4:	ldrd	r2, [r4, #88]	; 0x58
   167f8:	mov	r0, r5
   167fc:	adds	r2, r2, #1
   16800:	adc	r3, r3, #0
   16804:	strd	r2, [r4, #88]	; 0x58
   16808:	add	sp, sp, #8
   1680c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16810:	ldrd	r2, [r4, #8]
   16814:	mov	r1, r0
   16818:	ldr	r0, [r6]
   1681c:	adds	r2, r2, #1
   16820:	adc	r3, r3, #0
   16824:	strd	r2, [r4, #8]
   16828:	bl	12350 <push_back@@Base>
   1682c:	ldrd	sl, [r4, #32]
   16830:	mov	r1, r5
   16834:	mov	r3, r7
   16838:	adds	sl, sl, #1
   1683c:	adc	fp, fp, #0
   16840:	add	r2, sp, #4
   16844:	mov	r0, r6
   16848:	strd	sl, [r4, #32]
   1684c:	bl	163c8 <read_single_boolean_expression@@Base>
   16850:	ldrd	r2, [r4, #64]	; 0x40
   16854:	adds	r2, r2, #1
   16858:	adc	r3, r3, #0
   1685c:	strd	r2, [r4, #64]	; 0x40
   16860:	mov	r5, r0
   16864:	b	167cc <read_boolean_expression@@Base+0xe0>
   16868:	ldrd	r2, [r4, #24]
   1686c:	adds	r2, r2, #1
   16870:	adc	r3, r3, #0
   16874:	strd	r2, [r4, #24]
   16878:	bl	15c54 <get_boolean_op_value@@Base>
   1687c:	ldrd	r2, [r4, #40]	; 0x28
   16880:	str	r8, [sp, #4]
   16884:	adds	r2, r2, #1
   16888:	adc	r3, r3, #0
   1688c:	strd	r2, [r4, #40]	; 0x28
   16890:	mov	r7, r0
   16894:	b	167cc <read_boolean_expression@@Base+0xe0>
   16898:	andeq	fp, r2, r8, ror r5
   1689c:	andeq	sl, r2, r8, lsl #19
   168a0:	andeq	r9, r1, r4, asr #19

000168a4 <read_if_statement@@Base>:
   168a4:	push	{r4, r5, r6, r7, r8, lr}
   168a8:	mov	r5, r0
   168ac:	ldr	r4, [pc, #332]	; 16a00 <read_if_statement@@Base+0x15c>
   168b0:	ldr	r0, [r0]
   168b4:	ldrd	r2, [r4]
   168b8:	adds	r2, r2, #1
   168bc:	adc	r3, r3, #0
   168c0:	strd	r2, [r4]
   168c4:	bl	12214 <next@@Base>
   168c8:	ldrd	r2, [r4, #8]
   168cc:	adds	r2, r2, #1
   168d0:	adc	r3, r3, #0
   168d4:	strd	r2, [r4, #8]
   168d8:	ldr	r3, [r0]
   168dc:	cmp	r3, #3
   168e0:	movne	r5, #0
   168e4:	bne	169b4 <read_if_statement@@Base+0x110>
   168e8:	ldrd	r2, [r4, #16]
   168ec:	adds	r2, r2, #1
   168f0:	adc	r3, r3, #0
   168f4:	strd	r2, [r4, #16]
   168f8:	bl	14404 <free_token_opar@@Base>
   168fc:	ldrd	r2, [r4, #24]
   16900:	mov	r0, r5
   16904:	adds	r2, r2, #1
   16908:	adc	r3, r3, #0
   1690c:	strd	r2, [r4, #24]
   16910:	bl	166ec <read_boolean_expression@@Base>
   16914:	ldrd	r2, [r4, #32]
   16918:	adds	r2, r2, #1
   1691c:	adc	r3, r3, #0
   16920:	strd	r2, [r4, #32]
   16924:	mov	r6, r0
   16928:	mov	r0, r5
   1692c:	bl	16a04 <read_body@@Base>
   16930:	ldrd	r2, [r4, #40]	; 0x28
   16934:	adds	r2, r2, #1
   16938:	adc	r3, r3, #0
   1693c:	strd	r2, [r4, #40]	; 0x28
   16940:	mov	r7, r0
   16944:	ldr	r0, [r5]
   16948:	bl	12214 <next@@Base>
   1694c:	ldr	r3, [r0]
   16950:	mov	r1, r0
   16954:	cmp	r3, #11
   16958:	beq	169bc <read_if_statement@@Base+0x118>
   1695c:	ldrd	r2, [r4, #56]	; 0x38
   16960:	ldr	r0, [r5]
   16964:	mov	r8, #0
   16968:	adds	r2, r2, #1
   1696c:	adc	r3, r3, #0
   16970:	strd	r2, [r4, #56]	; 0x38
   16974:	bl	12350 <push_back@@Base>
   16978:	ldrd	r2, [r4, #80]	; 0x50
   1697c:	adds	r2, r2, #1
   16980:	adc	r3, r3, #0
   16984:	strd	r2, [r4, #80]	; 0x50
   16988:	mov	r0, #20
   1698c:	bl	118e0 <malloc@plt>
   16990:	mov	r3, r8
   16994:	mov	r2, r7
   16998:	mov	r1, r6
   1699c:	mov	r5, r0
   169a0:	bl	14664 <init_node_if@@Base>
   169a4:	ldrd	r2, [r4, #88]	; 0x58
   169a8:	adds	r2, r2, #1
   169ac:	adc	r3, r3, #0
   169b0:	strd	r2, [r4, #88]	; 0x58
   169b4:	mov	r0, r5
   169b8:	pop	{r4, r5, r6, r7, r8, pc}
   169bc:	ldrd	r2, [r4, #48]	; 0x30
   169c0:	adds	r2, r2, #1
   169c4:	adc	r3, r3, #0
   169c8:	strd	r2, [r4, #48]	; 0x30
   169cc:	bl	144e4 <free_token_else@@Base>
   169d0:	ldrd	r2, [r4, #64]	; 0x40
   169d4:	mov	r0, r5
   169d8:	adds	r2, r2, #1
   169dc:	adc	r3, r3, #0
   169e0:	strd	r2, [r4, #64]	; 0x40
   169e4:	bl	16a04 <read_body@@Base>
   169e8:	ldrd	r2, [r4, #72]	; 0x48
   169ec:	adds	r2, r2, #1
   169f0:	adc	r3, r3, #0
   169f4:	strd	r2, [r4, #72]	; 0x48
   169f8:	mov	r8, r0
   169fc:	b	16988 <read_if_statement@@Base+0xe4>
   16a00:	ldrdeq	fp, [r2], -r8

00016a04 <read_body@@Base>:
   16a04:	push	{r4, r5, r6, r7, r8, lr}
   16a08:	mov	r5, r0
   16a0c:	ldr	r4, [pc, #456]	; 16bdc <read_body@@Base+0x1d8>
   16a10:	ldr	r0, [r0]
   16a14:	ldrd	r2, [r4]
   16a18:	adds	r2, r2, #1
   16a1c:	adc	r3, r3, #0
   16a20:	strd	r2, [r4]
   16a24:	bl	12214 <next@@Base>
   16a28:	ldrd	r2, [r4, #8]
   16a2c:	adds	r2, r2, #1
   16a30:	adc	r3, r3, #0
   16a34:	strd	r2, [r4, #8]
   16a38:	ldr	r3, [r0]
   16a3c:	cmp	r3, #5
   16a40:	movne	r6, #0
   16a44:	bne	16b64 <read_body@@Base+0x160>
   16a48:	ldrd	r2, [r4, #16]
   16a4c:	adds	r2, r2, #1
   16a50:	adc	r3, r3, #0
   16a54:	strd	r2, [r4, #16]
   16a58:	bl	1443c <free_token_obra@@Base>
   16a5c:	ldrd	r2, [r4, #24]
   16a60:	ldr	r0, [r5]
   16a64:	adds	r2, r2, #1
   16a68:	adc	r3, r3, #0
   16a6c:	strd	r2, [r4, #24]
   16a70:	bl	12214 <next@@Base>
   16a74:	ldrd	r2, [r4, #32]
   16a78:	adds	r2, r2, #1
   16a7c:	adc	r3, r3, #0
   16a80:	strd	r2, [r4, #32]
   16a84:	ldr	ip, [r0]
   16a88:	mov	r1, r0
   16a8c:	cmp	ip, #6
   16a90:	beq	16bd4 <read_body@@Base+0x1d0>
   16a94:	mov	r7, #0
   16a98:	mov	r6, r7
   16a9c:	ldrd	r2, [r4, #104]	; 0x68
   16aa0:	adds	r2, r2, #1
   16aa4:	adc	r3, r3, #0
   16aa8:	cmp	ip, #7
   16aac:	strd	r2, [r4, #104]	; 0x68
   16ab0:	beq	16b8c <read_body@@Base+0x188>
   16ab4:	cmp	ip, #10
   16ab8:	mov	r0, r1
   16abc:	bne	16b6c <read_body@@Base+0x168>
   16ac0:	ldrd	r2, [r4, #48]	; 0x30
   16ac4:	adds	r2, r2, #1
   16ac8:	adc	r3, r3, #0
   16acc:	strd	r2, [r4, #48]	; 0x30
   16ad0:	bl	144c8 <free_token_if@@Base>
   16ad4:	ldrd	r2, [r4, #64]	; 0x40
   16ad8:	mov	r0, r5
   16adc:	adds	r2, r2, #1
   16ae0:	adc	r3, r3, #0
   16ae4:	strd	r2, [r4, #64]	; 0x40
   16ae8:	bl	168a4 <read_if_statement@@Base>
   16aec:	ldrd	r2, [r4, #72]	; 0x48
   16af0:	adds	r2, r2, #1
   16af4:	adc	r3, r3, #0
   16af8:	strd	r2, [r4, #72]	; 0x48
   16afc:	mov	r8, r0
   16b00:	cmp	r6, #0
   16b04:	moveq	r6, r8
   16b08:	beq	16b20 <read_body@@Base+0x11c>
   16b0c:	ldrd	r2, [r4, #96]	; 0x60
   16b10:	str	r8, [r7, #4]
   16b14:	adds	r2, r2, #1
   16b18:	adc	r3, r3, #0
   16b1c:	strd	r2, [r4, #96]	; 0x60
   16b20:	ldr	r0, [r5]
   16b24:	bl	12214 <next@@Base>
   16b28:	mov	r7, r8
   16b2c:	ldr	ip, [r0]
   16b30:	mov	r1, r0
   16b34:	cmp	ip, #6
   16b38:	bne	16a9c <read_body@@Base+0x98>
   16b3c:	ldrd	r2, [r4, #112]	; 0x70
   16b40:	mov	r0, r1
   16b44:	adds	r2, r2, #1
   16b48:	adc	r3, r3, #0
   16b4c:	strd	r2, [r4, #112]	; 0x70
   16b50:	bl	14458 <free_token_cbra@@Base>
   16b54:	ldrd	r2, [r4, #120]	; 0x78
   16b58:	adds	r2, r2, #1
   16b5c:	adc	r3, r3, #0
   16b60:	strd	r2, [r4, #120]	; 0x78
   16b64:	mov	r0, r6
   16b68:	pop	{r4, r5, r6, r7, r8, pc}
   16b6c:	ldr	r0, [r5]
   16b70:	bl	12350 <push_back@@Base>
   16b74:	ldrd	r2, [r4, #80]	; 0x50
   16b78:	mov	r0, r6
   16b7c:	adds	r2, r2, #1
   16b80:	adc	r3, r3, #0
   16b84:	strd	r2, [r4, #80]	; 0x50
   16b88:	pop	{r4, r5, r6, r7, r8, pc}
   16b8c:	ldrd	r2, [r4, #40]	; 0x28
   16b90:	mov	r0, r1
   16b94:	adds	r2, r2, #1
   16b98:	adc	r3, r3, #0
   16b9c:	strd	r2, [r4, #40]	; 0x28
   16ba0:	bl	14474 <free_token_return@@Base>
   16ba4:	ldrd	r2, [r4, #56]	; 0x38
   16ba8:	mov	r0, r5
   16bac:	adds	r2, r2, #1
   16bb0:	adc	r3, r3, #0
   16bb4:	strd	r2, [r4, #56]	; 0x38
   16bb8:	bl	15edc <read_return_expression@@Base>
   16bbc:	ldrd	r2, [r4, #88]	; 0x58
   16bc0:	adds	r2, r2, #1
   16bc4:	adc	r3, r3, #0
   16bc8:	strd	r2, [r4, #88]	; 0x58
   16bcc:	mov	r8, r0
   16bd0:	b	16b00 <read_body@@Base+0xfc>
   16bd4:	mov	r6, #0
   16bd8:	b	16b3c <read_body@@Base+0x138>
   16bdc:	andeq	fp, r2, r8, lsr r6

00016be0 <read_function_ast_node@@Base>:
   16be0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16be4:	mov	r5, r0
   16be8:	ldr	r4, [pc, #396]	; 16d7c <read_function_ast_node@@Base+0x19c>
   16bec:	ldr	r0, [r0]
   16bf0:	ldrd	r2, [r4]
   16bf4:	adds	r2, r2, #1
   16bf8:	adc	r3, r3, #0
   16bfc:	strd	r2, [r4]
   16c00:	bl	12214 <next@@Base>
   16c04:	ldrd	r2, [r4, #8]
   16c08:	adds	r2, r2, #1
   16c0c:	adc	r3, r3, #0
   16c10:	strd	r2, [r4, #8]
   16c14:	ldr	r3, [r0]
   16c18:	cmp	r3, #0
   16c1c:	bne	16d70 <read_function_ast_node@@Base+0x190>
   16c20:	ldrd	r2, [r4, #16]
   16c24:	adds	r2, r2, #1
   16c28:	adc	r3, r3, #0
   16c2c:	strd	r2, [r4, #16]
   16c30:	bl	143b0 <free_token_int_type@@Base>
   16c34:	ldrd	r2, [r4, #24]
   16c38:	ldr	r0, [r5]
   16c3c:	adds	r2, r2, #1
   16c40:	adc	r3, r3, #0
   16c44:	strd	r2, [r4, #24]
   16c48:	bl	12214 <next@@Base>
   16c4c:	ldrd	r2, [r4, #32]
   16c50:	adds	r2, r2, #1
   16c54:	adc	r3, r3, #0
   16c58:	strd	r2, [r4, #32]
   16c5c:	ldr	r1, [r0]
   16c60:	mov	r6, r0
   16c64:	cmp	r1, #2
   16c68:	bne	16d70 <read_function_ast_node@@Base+0x190>
   16c6c:	ldrd	r2, [r4, #40]	; 0x28
   16c70:	ldr	r0, [r5]
   16c74:	adds	r2, r2, #1
   16c78:	adc	r3, r3, #0
   16c7c:	strd	r2, [r4, #40]	; 0x28
   16c80:	bl	12214 <next@@Base>
   16c84:	ldrd	r2, [r4, #48]	; 0x30
   16c88:	adds	r2, r2, #1
   16c8c:	adc	r3, r3, #0
   16c90:	strd	r2, [r4, #48]	; 0x30
   16c94:	ldr	r3, [r0]
   16c98:	cmp	r3, #3
   16c9c:	bne	16d70 <read_function_ast_node@@Base+0x190>
   16ca0:	ldrd	r2, [r4, #56]	; 0x38
   16ca4:	adds	r2, r2, #1
   16ca8:	adc	r3, r3, #0
   16cac:	strd	r2, [r4, #56]	; 0x38
   16cb0:	bl	14404 <free_token_opar@@Base>
   16cb4:	ldrd	r2, [r4, #64]	; 0x40
   16cb8:	ldr	r0, [r5]
   16cbc:	adds	r2, r2, #1
   16cc0:	adc	r3, r3, #0
   16cc4:	strd	r2, [r4, #64]	; 0x40
   16cc8:	bl	12214 <next@@Base>
   16ccc:	ldrd	r2, [r4, #72]	; 0x48
   16cd0:	adds	r2, r2, #1
   16cd4:	adc	r3, r3, #0
   16cd8:	strd	r2, [r4, #72]	; 0x48
   16cdc:	ldr	r3, [r0]
   16ce0:	cmp	r3, #4
   16ce4:	bne	16d70 <read_function_ast_node@@Base+0x190>
   16ce8:	ldrd	r2, [r4, #80]	; 0x50
   16cec:	adds	r2, r2, #1
   16cf0:	adc	r3, r3, #0
   16cf4:	strd	r2, [r4, #80]	; 0x50
   16cf8:	bl	14420 <free_token_cpar@@Base>
   16cfc:	ldrd	r2, [r4, #88]	; 0x58
   16d00:	mov	r0, r5
   16d04:	adds	r2, r2, #1
   16d08:	adc	r3, r3, #0
   16d0c:	strd	r2, [r4, #88]	; 0x58
   16d10:	bl	16a04 <read_body@@Base>
   16d14:	ldrd	r8, [r4, #96]	; 0x60
   16d18:	adds	r8, r8, #1
   16d1c:	adc	r9, r9, #0
   16d20:	strd	r8, [r4, #96]	; 0x60
   16d24:	mov	r7, r0
   16d28:	mov	r0, #16
   16d2c:	bl	118e0 <malloc@plt>
   16d30:	mov	r2, r7
   16d34:	ldr	r1, [r6, #4]
   16d38:	mov	r5, r0
   16d3c:	bl	145fc <init_node_function@@Base>
   16d40:	ldrd	r2, [r4, #104]	; 0x68
   16d44:	mov	r0, r6
   16d48:	adds	r2, r2, #1
   16d4c:	adc	r3, r3, #0
   16d50:	strd	r2, [r4, #104]	; 0x68
   16d54:	bl	143e8 <free_token_function@@Base>
   16d58:	ldrd	r2, [r4, #112]	; 0x70
   16d5c:	mov	r0, r5
   16d60:	adds	r2, r2, #1
   16d64:	adc	r3, r3, #0
   16d68:	strd	r2, [r4, #112]	; 0x70
   16d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16d70:	mov	r5, #0
   16d74:	mov	r0, r5
   16d78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16d7c:			; <UNDEFINED> instruction: 0x0002b6b8

00016d80 <build_ast@@Base>:
   16d80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16d84:	mov	r6, r0
   16d88:	ldr	r5, [pc, #428]	; 16f3c <build_ast@@Base+0x1bc>
   16d8c:	ldr	r0, [r0]
   16d90:	mov	r4, r5
   16d94:	ldrd	r2, [r5, #-8]
   16d98:	ldrd	r8, [r4, #-128]!	; 0xffffff80
   16d9c:	adds	r2, r2, #1
   16da0:	adc	r3, r3, #0
   16da4:	adds	r8, r8, #1
   16da8:	adc	r9, r9, #0
   16dac:	strd	r2, [r5, #-8]
   16db0:	strd	r8, [r4]
   16db4:	bl	12214 <next@@Base>
   16db8:	ldrd	r2, [r4, #8]
   16dbc:	adds	r2, r2, #1
   16dc0:	adc	r3, r3, #0
   16dc4:	strd	r2, [r4, #8]
   16dc8:	ldr	r3, [r0]
   16dcc:	cmp	r3, #0
   16dd0:	bne	16f20 <build_ast@@Base+0x1a0>
   16dd4:	ldrd	r2, [r4, #16]
   16dd8:	adds	r2, r2, #1
   16ddc:	adc	r3, r3, #0
   16de0:	strd	r2, [r4, #16]
   16de4:	bl	143b0 <free_token_int_type@@Base>
   16de8:	ldrd	r2, [r4, #24]
   16dec:	ldr	r0, [r6]
   16df0:	adds	r2, r2, #1
   16df4:	adc	r3, r3, #0
   16df8:	strd	r2, [r4, #24]
   16dfc:	bl	12214 <next@@Base>
   16e00:	ldrd	r2, [r4, #32]
   16e04:	adds	r2, r2, #1
   16e08:	adc	r3, r3, #0
   16e0c:	strd	r2, [r4, #32]
   16e10:	ldr	r1, [r0]
   16e14:	mov	r7, r0
   16e18:	cmp	r1, #2
   16e1c:	bne	16f20 <build_ast@@Base+0x1a0>
   16e20:	ldrd	r2, [r4, #40]	; 0x28
   16e24:	ldr	r0, [r6]
   16e28:	adds	r2, r2, #1
   16e2c:	adc	r3, r3, #0
   16e30:	strd	r2, [r4, #40]	; 0x28
   16e34:	bl	12214 <next@@Base>
   16e38:	ldrd	r2, [r4, #48]	; 0x30
   16e3c:	adds	r2, r2, #1
   16e40:	adc	r3, r3, #0
   16e44:	strd	r2, [r4, #48]	; 0x30
   16e48:	ldr	r3, [r0]
   16e4c:	cmp	r3, #3
   16e50:	bne	16f20 <build_ast@@Base+0x1a0>
   16e54:	ldrd	r2, [r4, #56]	; 0x38
   16e58:	adds	r2, r2, #1
   16e5c:	adc	r3, r3, #0
   16e60:	strd	r2, [r4, #56]	; 0x38
   16e64:	bl	14404 <free_token_opar@@Base>
   16e68:	ldrd	r2, [r4, #64]	; 0x40
   16e6c:	ldr	r0, [r6]
   16e70:	adds	r2, r2, #1
   16e74:	adc	r3, r3, #0
   16e78:	strd	r2, [r4, #64]	; 0x40
   16e7c:	bl	12214 <next@@Base>
   16e80:	ldrd	r2, [r4, #72]	; 0x48
   16e84:	adds	r2, r2, #1
   16e88:	adc	r3, r3, #0
   16e8c:	strd	r2, [r4, #72]	; 0x48
   16e90:	ldr	r3, [r0]
   16e94:	cmp	r3, #4
   16e98:	bne	16f20 <build_ast@@Base+0x1a0>
   16e9c:	ldrd	r2, [r4, #80]	; 0x50
   16ea0:	adds	r2, r2, #1
   16ea4:	adc	r3, r3, #0
   16ea8:	strd	r2, [r4, #80]	; 0x50
   16eac:	bl	14420 <free_token_cpar@@Base>
   16eb0:	ldrd	r2, [r4, #88]	; 0x58
   16eb4:	mov	r0, r6
   16eb8:	adds	r2, r2, #1
   16ebc:	adc	r3, r3, #0
   16ec0:	strd	r2, [r4, #88]	; 0x58
   16ec4:	bl	16a04 <read_body@@Base>
   16ec8:	ldrd	r8, [r4, #96]	; 0x60
   16ecc:	adds	r8, r8, #1
   16ed0:	adc	r9, r9, #0
   16ed4:	strd	r8, [r4, #96]	; 0x60
   16ed8:	mov	sl, r0
   16edc:	mov	r0, #16
   16ee0:	bl	118e0 <malloc@plt>
   16ee4:	mov	r2, sl
   16ee8:	ldr	r1, [r7, #4]
   16eec:	mov	r6, r0
   16ef0:	bl	145fc <init_node_function@@Base>
   16ef4:	ldrd	r2, [r4, #104]	; 0x68
   16ef8:	mov	r0, r7
   16efc:	adds	r2, r2, #1
   16f00:	adc	r3, r3, #0
   16f04:	strd	r2, [r4, #104]	; 0x68
   16f08:	bl	143e8 <free_token_function@@Base>
   16f0c:	ldrd	r2, [r4, #112]	; 0x70
   16f10:	adds	r2, r2, #1
   16f14:	adc	r3, r3, #0
   16f18:	strd	r2, [r4, #112]	; 0x70
   16f1c:	b	16f24 <build_ast@@Base+0x1a4>
   16f20:	mov	r6, #0
   16f24:	ldrd	r2, [r5]
   16f28:	mov	r0, r6
   16f2c:	adds	r2, r2, #1
   16f30:	adc	r3, r3, #0
   16f34:	strd	r2, [r5]
   16f38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16f3c:	andeq	fp, r2, r8, lsr r7
   16f40:	b	1816c <build_ast@@Base+0x13ec>
   16f44:	push	{r4, r5, r6, lr}
   16f48:	subs	r5, r1, #0
   16f4c:	popeq	{r4, r5, r6, pc}
   16f50:	mov	r4, r0
   16f54:	bl	16f40 <build_ast@@Base+0x1c0>
   16f58:	ldrd	r2, [r4]
   16f5c:	adds	r0, r0, r2
   16f60:	adc	r1, r1, r3
   16f64:	subs	r5, r5, #1
   16f68:	strd	r0, [r4], #8
   16f6c:	bne	16f54 <build_ast@@Base+0x1d4>
   16f70:	pop	{r4, r5, r6, pc}
   16f74:	ldr	r3, [pc, #20]	; 16f90 <build_ast@@Base+0x210>
   16f78:	ldr	r2, [pc, #20]	; 16f94 <build_ast@@Base+0x214>
   16f7c:	add	r3, pc, r3
   16f80:	ldr	r3, [r3, r2]
   16f84:	ldmib	r3, {r0, r3}
   16f88:	add	r0, r0, r3
   16f8c:	bx	lr
   16f90:	andeq	r3, r1, ip, ror r0
   16f94:	andeq	r0, r0, ip, lsr #1
   16f98:	ldr	r3, [pc, #28]	; 16fbc <build_ast@@Base+0x23c>
   16f9c:	ldr	r2, [pc, #28]	; 16fc0 <build_ast@@Base+0x240>
   16fa0:	add	r3, pc, r3
   16fa4:	ldr	r3, [r3, r2]
   16fa8:	ldr	r2, [r3]
   16fac:	cmp	r2, #0
   16fb0:	ldrne	r0, [r3, #20]
   16fb4:	moveq	r0, #1
   16fb8:	bx	lr
   16fbc:	andeq	r3, r1, r8, asr r0
   16fc0:	andeq	r0, r0, ip, lsr #1
   16fc4:	bx	lr
   16fc8:	ldr	ip, [pc, #32]	; 16ff0 <build_ast@@Base+0x270>
   16fcc:	mov	r3, #32
   16fd0:	teq	r0, r1
   16fd4:	movmi	r2, ip
   16fd8:	movpl	r2, #0
   16fdc:	subs	r3, r3, #1
   16fe0:	lsl	r1, r1, #1
   16fe4:	eor	r0, r2, r0, lsl #1
   16fe8:	bne	16fd0 <build_ast@@Base+0x250>
   16fec:	bx	lr
   16ff0:	strbeq	r1, [r1], #3511	; 0xdb7
   16ff4:	ldr	r3, [pc, #76]	; 17048 <build_ast@@Base+0x2c8>
   16ff8:	ldr	r1, [pc, #76]	; 1704c <build_ast@@Base+0x2cc>
   16ffc:	add	r3, pc, r3
   17000:	push	{r4, r5, r6, lr}
   17004:	mov	r5, r0
   17008:	ldr	r4, [r3, r1]
   1700c:	lsl	r1, r0, #2
   17010:	mov	r0, r4
   17014:	mov	r2, #1
   17018:	ldr	r3, [r0], #28
   1701c:	bl	118a4 <fwrite@plt>
   17020:	cmp	r0, #1
   17024:	movne	r3, #1
   17028:	ldr	r0, [r4, #8]
   1702c:	strne	r3, [r4, #20]
   17030:	ldr	r3, [r4, #4]
   17034:	sub	r0, r0, r5
   17038:	add	r3, r3, r5
   1703c:	str	r3, [r4, #4]
   17040:	str	r0, [r4, #8]
   17044:	pop	{r4, r5, r6, pc}
   17048:	strdeq	r2, [r1], -ip
   1704c:	andeq	r0, r0, ip, lsr #1
   17050:	ldr	r3, [pc, #76]	; 170a4 <build_ast@@Base+0x324>
   17054:	ldr	r2, [pc, #76]	; 170a8 <build_ast@@Base+0x328>
   17058:	add	r3, pc, r3
   1705c:	push	{r4, r5, r6, lr}
   17060:	mov	r5, r0
   17064:	ldr	r4, [r3, r2]
   17068:	ldr	r3, [r4, #8]
   1706c:	cmp	r3, #1024	; 0x400
   17070:	bcc	17090 <build_ast@@Base+0x310>
   17074:	mov	r0, #1024	; 0x400
   17078:	bl	16ff4 <build_ast@@Base+0x274>
   1707c:	ldr	r3, [r4, #8]
   17080:	cmp	r3, #0
   17084:	addne	r2, r4, #4096	; 0x1000
   17088:	ldrne	r2, [r2, #28]
   1708c:	strne	r2, [r4, #28]
   17090:	add	r0, r3, #7
   17094:	add	r3, r5, r3
   17098:	str	r3, [r4, #8]
   1709c:	add	r0, r4, r0, lsl #2
   170a0:	pop	{r4, r5, r6, pc}
   170a4:	andeq	r2, r1, r0, lsr #31
   170a8:	andeq	r0, r0, ip, lsr #1
   170ac:	ldr	r3, [pc, #172]	; 17160 <build_ast@@Base+0x3e0>
   170b0:	ldr	r2, [pc, #172]	; 17164 <build_ast@@Base+0x3e4>
   170b4:	add	r3, pc, r3
   170b8:	push	{r4, r5, r6, lr}
   170bc:	mov	r5, r0
   170c0:	ldr	r4, [r3, r2]
   170c4:	ldr	r3, [r4, #8]
   170c8:	ldr	ip, [r4, #12]
   170cc:	sub	ip, ip, r3
   170d0:	cmp	ip, r0
   170d4:	bcs	17130 <build_ast@@Base+0x3b0>
   170d8:	ldr	r2, [r4, #4]
   170dc:	cmp	ip, #0
   170e0:	add	r2, r2, r3
   170e4:	str	r2, [r4, #4]
   170e8:	addne	r2, r4, #28
   170ec:	mov	r0, r4
   170f0:	ldrne	r3, [r2, r3, lsl #2]
   170f4:	mov	r6, #0
   170f8:	strne	r3, [r4, #28]
   170fc:	ldr	r3, [r0], #28
   17100:	mov	r2, #4096	; 0x1000
   17104:	add	r0, r0, ip, lsl #2
   17108:	mov	r1, #1
   1710c:	str	ip, [r4, #12]
   17110:	str	r6, [r4, #8]
   17114:	bl	118bc <fread@plt>
   17118:	ldr	r3, [r4, #12]
   1711c:	add	r0, r3, r0, lsr #2
   17120:	cmp	r5, r0
   17124:	str	r0, [r4, #12]
   17128:	bhi	17144 <build_ast@@Base+0x3c4>
   1712c:	ldr	r3, [r4, #8]
   17130:	add	r0, r3, #7
   17134:	add	r5, r5, r3
   17138:	add	r0, r4, r0, lsl #2
   1713c:	str	r5, [r4, #8]
   17140:	pop	{r4, r5, r6, pc}
   17144:	ldr	r3, [r4, #16]
   17148:	str	r6, [r4, #12]
   1714c:	add	r5, r5, r3
   17150:	sub	r5, r5, r0
   17154:	str	r5, [r4, #16]
   17158:	mov	r0, r6
   1715c:	pop	{r4, r5, r6, pc}
   17160:	andeq	r2, r1, r4, asr #30
   17164:	andeq	r0, r0, ip, lsr #1
   17168:	push	{r0, r1, r2, r3}
   1716c:	ldr	r3, [pc, #52]	; 171a8 <build_ast@@Base+0x428>
   17170:	ldr	r1, [pc, #52]	; 171ac <build_ast@@Base+0x42c>
   17174:	push	{lr}		; (str lr, [sp, #-4]!)
   17178:	add	r3, pc, r3
   1717c:	sub	sp, sp, #12
   17180:	add	r2, sp, #20
   17184:	str	r2, [sp, #4]
   17188:	ldr	r0, [r3, r1]
   1718c:	ldr	r1, [sp, #16]
   17190:	ldr	r0, [r0]
   17194:	bl	119ac <vfprintf@plt>
   17198:	add	sp, sp, #12
   1719c:	pop	{lr}		; (ldr lr, [sp], #4)
   171a0:	add	sp, sp, #16
   171a4:	bx	lr
   171a8:	andeq	r2, r1, r0, lsl #29
   171ac:	andeq	r0, r0, r0, lsr #1
   171b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   171b4:	subs	r6, r1, #0
   171b8:	beq	17214 <build_ast@@Base+0x494>
   171bc:	cmp	r2, #0
   171c0:	movne	r3, #0
   171c4:	mov	r7, r2
   171c8:	ldr	r8, [r6]
   171cc:	addne	r5, r0, #12
   171d0:	movne	r4, r3
   171d4:	beq	17204 <build_ast@@Base+0x484>
   171d8:	ldr	r0, [r5, #4]!
   171dc:	add	r2, r6, r3, lsl #3
   171e0:	cmp	r0, #0
   171e4:	add	r9, r3, #1
   171e8:	add	r4, r4, #1
   171ec:	beq	171fc <build_ast@@Base+0x47c>
   171f0:	ldr	r0, [r2, #28]
   171f4:	bl	11880 <free@plt>
   171f8:	mov	r3, r9
   171fc:	cmp	r7, r4
   17200:	bne	171d8 <build_ast@@Base+0x458>
   17204:	mov	r0, r6
   17208:	bl	11880 <free@plt>
   1720c:	mov	r0, r8
   17210:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17214:	mov	r8, r6
   17218:	b	1720c <build_ast@@Base+0x48c>
   1721c:	push	{r4, r5}
   17220:	mov	r4, r0
   17224:	mov	r5, r1
   17228:	orrs	r3, r4, r5
   1722c:	beq	17270 <build_ast@@Base+0x4f0>
   17230:	cmp	r1, #0
   17234:	clzeq	r1, r0
   17238:	addeq	r1, r1, #32
   1723c:	clzne	r1, r1
   17240:	rsb	r3, r1, #63	; 0x3f
   17244:	cmp	r3, #1
   17248:	bls	17270 <build_ast@@Base+0x4f0>
   1724c:	rsb	r2, r1, #61	; 0x3d
   17250:	rsb	r0, r2, #32
   17254:	lsr	r3, r4, r2
   17258:	sub	r2, r2, #32
   1725c:	orr	r3, r3, r5, lsl r0
   17260:	orr	r3, r3, r5, lsr r2
   17264:	rsb	r1, r1, #1073741886	; 0x4000003e
   17268:	and	r0, r3, #3
   1726c:	add	r0, r0, r1, lsl #2
   17270:	pop	{r4, r5}
   17274:	bx	lr
   17278:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1727c:	mov	r1, r3
   17280:	mov	sl, r0
   17284:	mov	r0, r2
   17288:	mov	r8, r2
   1728c:	mov	r9, r3
   17290:	bl	1721c <build_ast@@Base+0x49c>
   17294:	add	r0, r0, r0, lsl #1
   17298:	lsl	r0, r0, #3
   1729c:	add	r3, sl, r0
   172a0:	ldr	r2, [sl, r0]
   172a4:	ldrd	r4, [r3, #16]
   172a8:	ldrd	r6, [r3, #8]
   172ac:	add	r2, r2, #1
   172b0:	adds	r4, r4, r8
   172b4:	adc	r5, r5, r9
   172b8:	cmp	r8, r6
   172bc:	sbcs	r1, r9, r7
   172c0:	str	r2, [sl, r0]
   172c4:	strd	r4, [r3, #16]
   172c8:	strdlt	r8, [r3, #8]
   172cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   172d0:	ldr	r3, [r1, #8]
   172d4:	cmp	r3, #0
   172d8:	bxeq	lr
   172dc:	push	{r4, r5, r6, r7, r8, lr}
   172e0:	add	r2, r1, #6016	; 0x1780
   172e4:	mov	r8, r1
   172e8:	mov	r7, r0
   172ec:	ldrd	r0, [r1, #24]
   172f0:	add	r2, r2, #32
   172f4:	mov	r3, r8
   172f8:	mov	ip, #0
   172fc:	mov	r4, #0
   17300:	mov	r5, #0
   17304:	str	ip, [r3, #40]	; 0x28
   17308:	strd	r0, [r3, #48]	; 0x30
   1730c:	strd	r4, [r3, #56]	; 0x38
   17310:	add	r3, r3, #24
   17314:	cmp	r2, r3
   17318:	bne	17304 <build_ast@@Base+0x584>
   1731c:	cmp	r7, #0
   17320:	popeq	{r4, r5, r6, r7, r8, pc}
   17324:	add	r8, r8, #40	; 0x28
   17328:	ldr	r3, [r7, #16]
   1732c:	cmp	r3, #0
   17330:	beq	173b8 <build_ast@@Base+0x638>
   17334:	ldr	r2, [r7, #56]	; 0x38
   17338:	cmp	r2, #0
   1733c:	beq	173b8 <build_ast@@Base+0x638>
   17340:	mov	r6, #0
   17344:	b	17354 <build_ast@@Base+0x5d4>
   17348:	add	r6, r6, #1
   1734c:	cmp	r2, r6
   17350:	beq	173b8 <build_ast@@Base+0x638>
   17354:	ldr	r3, [r7, #60]	; 0x3c
   17358:	ldr	r4, [r3, r6, lsl #2]
   1735c:	cmp	r4, #0
   17360:	beq	17348 <build_ast@@Base+0x5c8>
   17364:	ldr	r3, [r4]
   17368:	cmp	r3, r7
   1736c:	bne	17348 <build_ast@@Base+0x5c8>
   17370:	ldr	r3, [r4, #16]
   17374:	cmp	r3, #0
   17378:	beq	17348 <build_ast@@Base+0x5c8>
   1737c:	mov	r5, #0
   17380:	ldr	r2, [r4, #20]
   17384:	lsl	r3, r5, #3
   17388:	add	r2, r2, r3
   1738c:	mov	r0, r8
   17390:	ldrd	r2, [r2]
   17394:	bl	17278 <build_ast@@Base+0x4f8>
   17398:	ldr	r3, [r4, #16]
   1739c:	add	r5, r5, #1
   173a0:	cmp	r3, r5
   173a4:	bhi	17380 <build_ast@@Base+0x600>
   173a8:	ldr	r2, [r7, #56]	; 0x38
   173ac:	add	r6, r6, #1
   173b0:	cmp	r2, r6
   173b4:	bne	17354 <build_ast@@Base+0x5d4>
   173b8:	ldr	r7, [r7, #4]
   173bc:	cmp	r7, #0
   173c0:	bne	17328 <build_ast@@Base+0x5a8>
   173c4:	pop	{r4, r5, r6, r7, r8, pc}
   173c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173cc:	sub	sp, sp, #12
   173d0:	mov	r5, r0
   173d4:	str	r0, [sp, #4]
   173d8:	mov	r6, r2
   173dc:	str	r2, [sp]
   173e0:	mov	r0, r1
   173e4:	mov	r4, r1
   173e8:	ldr	r2, [pc, #344]	; 17548 <build_ast@@Base+0x7c8>
   173ec:	mov	r1, #0
   173f0:	bl	1197c <memset@plt>
   173f4:	subs	r3, r5, #0
   173f8:	mov	r5, #0
   173fc:	str	r5, [r6]
   17400:	beq	1752c <build_ast@@Base+0x7ac>
   17404:	mov	r7, r5
   17408:	mov	r9, r5
   1740c:	mov	r8, r3
   17410:	ldr	r0, [r8, #12]
   17414:	bl	11934 <strlen@plt>
   17418:	cmp	r5, r0
   1741c:	ldrcc	r3, [sp]
   17420:	strcc	r0, [r3]
   17424:	mov	r0, r7
   17428:	ldr	r1, [r8, #8]
   1742c:	bl	16fc8 <build_ast@@Base+0x248>
   17430:	ldr	r6, [r8, #56]	; 0x38
   17434:	mov	r1, r6
   17438:	bl	16fc8 <build_ast@@Base+0x248>
   1743c:	cmp	r6, #0
   17440:	mov	r7, r0
   17444:	beq	17514 <build_ast@@Base+0x794>
   17448:	ldr	r5, [r8, #60]	; 0x3c
   1744c:	add	r6, r5, r6, lsl #2
   17450:	b	17474 <build_ast@@Base+0x6f4>
   17454:	mov	r0, r7
   17458:	mov	r1, r9
   1745c:	bl	16fc8 <build_ast@@Base+0x248>
   17460:	mov	r1, r9
   17464:	bl	16fc8 <build_ast@@Base+0x248>
   17468:	mov	r7, r0
   1746c:	cmp	r6, r5
   17470:	beq	17514 <build_ast@@Base+0x794>
   17474:	ldr	fp, [r5], #4
   17478:	cmp	fp, #0
   1747c:	beq	17454 <build_ast@@Base+0x6d4>
   17480:	ldr	r3, [fp]
   17484:	cmp	r3, r8
   17488:	bne	17454 <build_ast@@Base+0x6d4>
   1748c:	mov	r0, r7
   17490:	ldr	r1, [fp, #12]
   17494:	bl	16fc8 <build_ast@@Base+0x248>
   17498:	ldr	r1, [fp, #8]
   1749c:	bl	16fc8 <build_ast@@Base+0x248>
   174a0:	ldr	r3, [r8, #16]
   174a4:	cmp	r3, #0
   174a8:	mov	r7, r0
   174ac:	beq	1746c <build_ast@@Base+0x6ec>
   174b0:	ldr	sl, [fp, #16]
   174b4:	ldr	r3, [r4, #8]
   174b8:	mov	r1, sl
   174bc:	add	r3, r3, sl
   174c0:	str	r3, [r4, #8]
   174c4:	bl	16fc8 <build_ast@@Base+0x248>
   174c8:	cmp	sl, #0
   174cc:	mov	r7, r0
   174d0:	beq	1746c <build_ast@@Base+0x6ec>
   174d4:	ldr	ip, [fp, #20]
   174d8:	ldrd	r2, [r4, #16]
   174dc:	add	lr, ip, sl, lsl #3
   174e0:	ldrd	r0, [ip]
   174e4:	ldrd	sl, [r4, #24]
   174e8:	adds	r2, r2, r0
   174ec:	adc	r3, r3, r1
   174f0:	strd	r2, [r4, #16]
   174f4:	ldrd	r0, [ip], #8
   174f8:	cmp	sl, r0
   174fc:	sbcs	sl, fp, r1
   17500:	strdlt	r0, [r4, #24]
   17504:	cmp	lr, ip
   17508:	bne	174e0 <build_ast@@Base+0x760>
   1750c:	cmp	r6, r5
   17510:	bne	17474 <build_ast@@Base+0x6f4>
   17514:	ldr	r8, [r8, #4]
   17518:	cmp	r8, #0
   1751c:	beq	17530 <build_ast@@Base+0x7b0>
   17520:	ldr	r3, [sp]
   17524:	ldr	r5, [r3]
   17528:	b	17410 <build_ast@@Base+0x690>
   1752c:	ldr	r7, [sp, #4]
   17530:	ldr	r0, [sp, #4]
   17534:	mov	r1, r4
   17538:	bl	172d0 <build_ast@@Base+0x550>
   1753c:	mov	r0, r7
   17540:	add	sp, sp, #12
   17544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17548:	andeq	r1, r0, r8, asr #15
   1754c:	push	{r4, r5, r6, lr}
   17550:	mov	r4, r0
   17554:	ldr	r0, [pc, #172]	; 17608 <build_ast@@Base+0x888>
   17558:	add	r0, pc, r0
   1755c:	bl	118c8 <getenv@plt>
   17560:	subs	r3, r0, #0
   17564:	beq	17570 <build_ast@@Base+0x7f0>
   17568:	bl	119b8 <atoi@plt>
   1756c:	bic	r3, r0, r0, asr #31
   17570:	ldr	r0, [pc, #148]	; 1760c <build_ast@@Base+0x88c>
   17574:	str	r3, [r4, #8]
   17578:	add	r0, pc, r0
   1757c:	bl	118c8 <getenv@plt>
   17580:	subs	r6, r0, #0
   17584:	beq	175d8 <build_ast@@Base+0x858>
   17588:	bl	11934 <strlen@plt>
   1758c:	subs	r5, r0, #0
   17590:	beq	175d8 <build_ast@@Base+0x858>
   17594:	sub	r3, r5, #1
   17598:	ldrb	r2, [r6, r3]
   1759c:	cmp	r2, #47	; 0x2f
   175a0:	beq	175cc <build_ast@@Base+0x84c>
   175a4:	ldr	r0, [r4, #4]
   175a8:	str	r5, [r4, #12]
   175ac:	add	r0, r0, #2
   175b0:	add	r0, r0, r5
   175b4:	bl	118e0 <malloc@plt>
   175b8:	mov	r2, r5
   175bc:	mov	r1, r6
   175c0:	str	r0, [r4]
   175c4:	pop	{r4, r5, r6, lr}
   175c8:	b	1188c <memcpy@plt>
   175cc:	cmp	r3, #0
   175d0:	movne	r5, r3
   175d4:	bne	175a4 <build_ast@@Base+0x824>
   175d8:	ldr	r3, [r4, #8]
   175dc:	cmp	r3, #0
   175e0:	ldrne	r6, [pc, #40]	; 17610 <build_ast@@Base+0x890>
   175e4:	movne	r5, #1
   175e8:	addne	r6, pc, r6
   175ec:	bne	175a4 <build_ast@@Base+0x824>
   175f0:	ldr	r0, [r4, #4]
   175f4:	str	r3, [r4, #12]
   175f8:	add	r0, r0, #2
   175fc:	bl	118e0 <malloc@plt>
   17600:	str	r0, [r4]
   17604:	pop	{r4, r5, r6, pc}
   17608:	andeq	r2, r0, r8, ror #9
   1760c:	ldrdeq	r2, [r0], -ip
   17610:	andeq	r2, r0, r4, asr r4
   17614:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17618:	sub	sp, sp, #6080	; 0x17c0
   1761c:	sub	sp, sp, #44	; 0x2c
   17620:	add	r3, sp, #72	; 0x48
   17624:	mov	r4, r0
   17628:	str	r0, [sp, #64]	; 0x40
   1762c:	str	r1, [sp, #60]	; 0x3c
   17630:	mov	r0, r3
   17634:	ldr	r2, [pc, #1068]	; 17a68 <build_ast@@Base+0xce8>
   17638:	mov	r1, #0
   1763c:	str	r3, [sp, #68]	; 0x44
   17640:	bl	1197c <memset@plt>
   17644:	add	r3, r4, #6016	; 0x1780
   17648:	add	r3, r3, #8
   1764c:	add	r2, sp, #2016	; 0x7e0
   17650:	mov	sl, #251	; 0xfb
   17654:	add	r2, r2, #8
   17658:	mov	fp, #0
   1765c:	str	r3, [sp, #56]	; 0x38
   17660:	add	r3, sp, #72	; 0x48
   17664:	str	r2, [sp, #44]	; 0x2c
   17668:	str	r3, [sp, #48]	; 0x30
   1766c:	mov	r2, #0
   17670:	mov	r3, #0
   17674:	mov	r5, sl
   17678:	mov	r0, fp
   1767c:	strd	r2, [sp, #24]
   17680:	str	sl, [sp, #52]	; 0x34
   17684:	ldr	r9, [sp, #56]	; 0x38
   17688:	str	r5, [sp, #40]	; 0x28
   1768c:	ldr	sl, [sp, #60]	; 0x3c
   17690:	ldrd	r2, [r9, #16]
   17694:	ldr	r4, [r9]
   17698:	str	r4, [sp, #4]
   1769c:	strd	r2, [sp, #8]
   176a0:	ldr	r3, [sp, #4]
   176a4:	cmp	r3, #0
   176a8:	beq	17954 <build_ast@@Base+0xbd4>
   176ac:	cmp	fp, #0
   176b0:	bne	17838 <build_ast@@Base+0xab8>
   176b4:	ldr	r5, [sp, #40]	; 0x28
   176b8:	cmp	r5, #0
   176bc:	blt	17a44 <build_ast@@Base+0xcc4>
   176c0:	add	ip, r5, r5, lsl #1
   176c4:	ldr	fp, [sl, ip, lsl #3]
   176c8:	add	ip, sl, ip, lsl #3
   176cc:	cmp	fp, #0
   176d0:	bne	17a38 <build_ast@@Base+0xcb8>
   176d4:	mov	r3, ip
   176d8:	ldr	r4, [sp, #4]
   176dc:	b	176f0 <build_ast@@Base+0x970>
   176e0:	ldr	fp, [r3]
   176e4:	mov	ip, r3
   176e8:	cmp	fp, #0
   176ec:	bne	17a30 <build_ast@@Base+0xcb0>
   176f0:	subs	r5, r5, #1
   176f4:	sub	r3, r3, #24
   176f8:	bcs	176e0 <build_ast@@Base+0x960>
   176fc:	ldr	sl, [sp, #52]	; 0x34
   17700:	mov	r8, r0
   17704:	mov	r5, r4
   17708:	lsl	r4, sl, #1
   1770c:	ldr	r3, [sp, #44]	; 0x2c
   17710:	add	lr, r4, sl
   17714:	sub	ip, r3, #1952	; 0x7a0
   17718:	lsl	lr, lr, #3
   1771c:	add	ip, ip, lr
   17720:	ldrd	r0, [sp, #8]
   17724:	add	lr, r3, lr
   17728:	ldrd	r2, [ip, #16]
   1772c:	ldr	r6, [lr, #-1952]	; 0xfffff860
   17730:	adds	r0, r0, r2
   17734:	adc	r1, r1, r3
   17738:	mov	r2, r0
   1773c:	mov	r3, r1
   17740:	ldrd	r0, [ip, #8]
   17744:	strd	r2, [ip, #16]
   17748:	ldr	r3, [sp, #56]	; 0x38
   1774c:	add	r5, r6, r5
   17750:	str	r5, [lr, #-1952]	; 0xfffff860
   17754:	orrs	lr, r0, r1
   17758:	ldrd	r2, [r3, #8]
   1775c:	beq	1776c <build_ast@@Base+0x9ec>
   17760:	cmp	r2, r0
   17764:	sbcs	r1, r3, r1
   17768:	bge	17780 <build_ast@@Base+0xa00>
   1776c:	ldr	r1, [sp, #44]	; 0x2c
   17770:	add	r0, r4, sl
   17774:	sub	r1, r1, #1952	; 0x7a0
   17778:	add	r1, r1, r0, lsl #3
   1777c:	strd	r2, [r1, #8]
   17780:	add	lr, r4, sl
   17784:	ldr	r3, [sp, #68]	; 0x44
   17788:	lsl	lr, lr, #3
   1778c:	add	ip, r3, lr
   17790:	ldr	r3, [sp, #64]	; 0x40
   17794:	add	lr, r3, lr
   17798:	b	177e8 <build_ast@@Base+0xa68>
   1779c:	ldrd	r0, [ip, #-8]
   177a0:	ldrd	r2, [lr, #-8]
   177a4:	ldrd	r4, [ip, #-16]
   177a8:	adds	r6, r0, r2
   177ac:	adc	r7, r1, r3
   177b0:	ldr	r2, [lr, #-24]	; 0xffffffe8
   177b4:	ldr	r3, [ip, #-24]	; 0xffffffe8
   177b8:	orrs	r1, r4, r5
   177bc:	add	r3, r3, r2
   177c0:	str	r3, [ip, #-24]	; 0xffffffe8
   177c4:	strd	r6, [ip, #-8]
   177c8:	ldrd	r2, [lr, #-16]
   177cc:	beq	177dc <build_ast@@Base+0xa5c>
   177d0:	cmp	r2, r4
   177d4:	sbcs	r1, r3, r5
   177d8:	bge	177e0 <build_ast@@Base+0xa60>
   177dc:	strd	r2, [ip, #-16]
   177e0:	sub	ip, ip, #24
   177e4:	sub	lr, lr, #24
   177e8:	subs	sl, sl, #1
   177ec:	bpl	1779c <build_ast@@Base+0xa1c>
   177f0:	ldr	r3, [sp, #44]	; 0x2c
   177f4:	add	r0, r8, r8, lsl #1
   177f8:	sub	r3, r3, #1952	; 0x7a0
   177fc:	add	r3, r3, r0, lsl #3
   17800:	ldrd	r6, [sp, #24]
   17804:	ldrd	r4, [r3, #16]
   17808:	ldr	r1, [sp, #68]	; 0x44
   1780c:	ldr	r0, [sp, #64]	; 0x40
   17810:	adds	r6, r6, r4
   17814:	adc	r7, r7, r5
   17818:	mov	r4, r6
   1781c:	mov	r5, r7
   17820:	ldr	r2, [pc, #576]	; 17a68 <build_ast@@Base+0xce8>
   17824:	strd	r4, [r3, #16]
   17828:	bl	1188c <memcpy@plt>
   1782c:	add	sp, sp, #6080	; 0x17c0
   17830:	add	sp, sp, #44	; 0x2c
   17834:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17838:	ldr	r3, [sp, #40]	; 0x28
   1783c:	add	ip, r3, r3, lsl #1
   17840:	add	ip, sl, ip, lsl #3
   17844:	ldr	lr, [sp, #4]
   17848:	cmp	fp, lr
   1784c:	bcc	179c4 <build_ast@@Base+0xc44>
   17850:	ldrd	r2, [r9, #8]
   17854:	ldrd	r0, [ip, #8]
   17858:	adds	r4, r2, r0
   1785c:	adc	r5, r3, r1
   17860:	cmp	fp, lr
   17864:	strd	r4, [sp, #16]
   17868:	bls	17a54 <build_ast@@Base+0xcd4>
   1786c:	ldrd	r6, [sp, #24]
   17870:	mov	r2, fp
   17874:	mov	r3, #0
   17878:	umull	r0, r1, lr, r6
   1787c:	mla	r1, lr, r7, r1
   17880:	bl	18f50 <__gcov_sort_n_vals@@Base+0x534>
   17884:	mov	r2, r0
   17888:	subs	r0, r6, r2
   1788c:	mov	r3, r1
   17890:	sbc	r1, r7, r3
   17894:	strd	r0, [sp, #24]
   17898:	ldr	r1, [sp, #4]
   1789c:	mov	r0, #0
   178a0:	sub	fp, fp, r1
   178a4:	mov	r8, r1
   178a8:	mov	r1, #0
   178ac:	str	r1, [sp, #4]
   178b0:	mov	r1, #0
   178b4:	ldrd	r6, [sp, #8]
   178b8:	strd	r0, [sp, #8]
   178bc:	adds	r4, r2, r6
   178c0:	adc	r5, r3, r7
   178c4:	ldrd	r0, [sp, #16]
   178c8:	strd	r4, [sp, #32]
   178cc:	bl	1721c <build_ast@@Base+0x49c>
   178d0:	ldr	r3, [sp, #48]	; 0x30
   178d4:	ldrd	r4, [sp, #32]
   178d8:	add	r1, r0, r0, lsl #1
   178dc:	lsl	r1, r1, #3
   178e0:	add	ip, r3, r1
   178e4:	ldr	r3, [sp, #44]	; 0x2c
   178e8:	ldrd	r6, [ip, #8]
   178ec:	add	r1, r3, r1
   178f0:	ldrd	r2, [ip, #16]
   178f4:	adds	r2, r2, r4
   178f8:	adc	r3, r3, r5
   178fc:	strd	r2, [sp, #32]
   17900:	ldrd	r2, [sp, #16]
   17904:	cmp	r2, r6
   17908:	sbcs	lr, r3, r7
   1790c:	movlt	lr, #1
   17910:	movge	lr, #0
   17914:	orrs	r4, r6, r7
   17918:	ldr	r4, [r1, #-1952]	; 0xfffff860
   1791c:	orreq	lr, lr, #1
   17920:	add	r8, r4, r8
   17924:	ldrd	r4, [sp, #32]
   17928:	cmp	lr, #0
   1792c:	str	r8, [r1, #-1952]	; 0xfffff860
   17930:	strd	r4, [ip, #16]
   17934:	strdne	r2, [ip, #8]
   17938:	cmp	fp, #0
   1793c:	ldreq	r3, [sp, #40]	; 0x28
   17940:	subeq	r3, r3, #1
   17944:	streq	r3, [sp, #40]	; 0x28
   17948:	ldr	r3, [sp, #4]
   1794c:	cmp	r3, #0
   17950:	bne	176ac <build_ast@@Base+0x92c>
   17954:	ldr	r3, [sp, #52]	; 0x34
   17958:	ldr	r5, [sp, #40]	; 0x28
   1795c:	sub	r3, r3, #1
   17960:	str	r3, [sp, #52]	; 0x34
   17964:	cmn	r3, #1
   17968:	ldr	r3, [sp, #56]	; 0x38
   1796c:	sub	r3, r3, #24
   17970:	str	r3, [sp, #56]	; 0x38
   17974:	bne	17684 <build_ast@@Base+0x904>
   17978:	cmp	fp, #0
   1797c:	mov	r9, r5
   17980:	subne	r9, r5, #1
   17984:	cmp	r9, #0
   17988:	mov	r8, r0
   1798c:	blt	177f0 <build_ast@@Base+0xa70>
   17990:	ldr	r2, [sp, #60]	; 0x3c
   17994:	add	r3, r9, r9, lsl #1
   17998:	sub	r0, r2, #24
   1799c:	add	r1, r2, r3, lsl #3
   179a0:	ldrd	r2, [sp, #24]
   179a4:	ldrd	r4, [r1, #16]
   179a8:	sub	r1, r1, #24
   179ac:	adds	r2, r2, r4
   179b0:	adc	r3, r3, r5
   179b4:	cmp	r0, r1
   179b8:	bne	179a4 <build_ast@@Base+0xc24>
   179bc:	strd	r2, [sp, #24]
   179c0:	b	177f0 <build_ast@@Base+0xa70>
   179c4:	ldrd	r2, [sp, #8]
   179c8:	ldrd	r6, [ip, #8]
   179cc:	ldrd	r4, [r9, #8]
   179d0:	umull	r0, r1, fp, r2
   179d4:	ldr	r8, [sp, #4]
   179d8:	adds	r4, r4, r6
   179dc:	adc	r5, r5, r7
   179e0:	mla	r1, fp, r3, r1
   179e4:	mov	r2, r8
   179e8:	mov	r3, #0
   179ec:	strd	r4, [sp, #16]
   179f0:	bl	18f50 <__gcov_sort_n_vals@@Base+0x534>
   179f4:	sub	r3, r8, fp
   179f8:	str	r3, [sp, #4]
   179fc:	ldrd	r2, [sp, #8]
   17a00:	mov	r8, fp
   17a04:	mov	fp, #0
   17a08:	subs	r2, r2, r0
   17a0c:	sbc	r3, r3, r1
   17a10:	mov	r6, r0
   17a14:	mov	r7, r1
   17a18:	mov	r0, #0
   17a1c:	mov	r1, #0
   17a20:	strd	r2, [sp, #8]
   17a24:	ldrd	r2, [sp, #24]
   17a28:	strd	r0, [sp, #24]
   17a2c:	b	178bc <build_ast@@Base+0xb3c>
   17a30:	str	r5, [sp, #40]	; 0x28
   17a34:	str	r4, [sp, #4]
   17a38:	ldrd	r2, [ip, #16]
   17a3c:	strd	r2, [sp, #24]
   17a40:	b	17844 <build_ast@@Base+0xac4>
   17a44:	ldr	sl, [sp, #52]	; 0x34
   17a48:	mov	r8, r0
   17a4c:	ldr	r5, [sp, #4]
   17a50:	b	17708 <build_ast@@Base+0x988>
   17a54:	mov	r0, #0
   17a58:	mov	r1, #0
   17a5c:	ldrd	r2, [sp, #24]
   17a60:	strd	r0, [sp, #24]
   17a64:	b	17898 <build_ast@@Base+0xb18>
   17a68:	andeq	r1, r0, r0, lsr #15
   17a6c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17a70:	ldrb	r4, [r0]
   17a74:	cmp	r4, #47	; 0x2f
   17a78:	addeq	r5, r0, #1
   17a7c:	ldrbeq	r4, [r0, #1]
   17a80:	movne	r5, r0
   17a84:	cmp	r4, #0
   17a88:	beq	17adc <build_ast@@Base+0xd5c>
   17a8c:	mov	r6, r0
   17a90:	ldr	sl, [pc, #144]	; 17b28 <build_ast@@Base+0xda8>
   17a94:	mov	r8, #0
   17a98:	mov	r7, #47	; 0x2f
   17a9c:	b	17aac <build_ast@@Base+0xd2c>
   17aa0:	ldrb	r4, [r5, #1]!
   17aa4:	cmp	r4, #0
   17aa8:	beq	17adc <build_ast@@Base+0xd5c>
   17aac:	cmp	r4, #47	; 0x2f
   17ab0:	bne	17aa0 <build_ast@@Base+0xd20>
   17ab4:	strb	r8, [r5]
   17ab8:	mov	r1, #0
   17abc:	mov	r0, r6
   17ac0:	bl	11988 <access@plt>
   17ac4:	cmn	r0, #1
   17ac8:	beq	17ae8 <build_ast@@Base+0xd68>
   17acc:	strb	r7, [r5]
   17ad0:	ldrb	r4, [r5, #1]!
   17ad4:	cmp	r4, #0
   17ad8:	bne	17aac <build_ast@@Base+0xd2c>
   17adc:	mov	r9, #0
   17ae0:	mov	r0, r9
   17ae4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17ae8:	mov	r1, sl
   17aec:	mov	r0, r6
   17af0:	bl	11964 <mkdir@plt>
   17af4:	cmn	r0, #1
   17af8:	mov	r9, r0
   17afc:	bne	17acc <build_ast@@Base+0xd4c>
   17b00:	bl	1194c <__errno_location@plt>
   17b04:	ldr	r3, [r0]
   17b08:	cmp	r3, #17
   17b0c:	beq	17acc <build_ast@@Base+0xd4c>
   17b10:	ldr	r0, [pc, #20]	; 17b2c <build_ast@@Base+0xdac>
   17b14:	mov	r1, r6
   17b18:	add	r0, pc, r0
   17b1c:	bl	17168 <build_ast@@Base+0x3e8>
   17b20:	strb	r4, [r5]
   17b24:	b	17ae0 <build_ast@@Base+0xd60>
   17b28:	andeq	r0, r0, sp, ror #3
   17b2c:	andeq	r1, r0, r8, asr #30
   17b30:	ldr	r3, [pc, #124]	; 17bb4 <build_ast@@Base+0xe34>
   17b34:	cmp	r1, r3
   17b38:	beq	17bac <build_ast@@Base+0xe2c>
   17b3c:	cmp	r2, #0
   17b40:	push	{r4, r5, lr}
   17b44:	sub	sp, sp, #12
   17b48:	ldreq	r2, [r0]
   17b4c:	lsr	r3, r1, #24
   17b50:	ldr	r0, [pc, #96]	; 17bb8 <build_ast@@Base+0xe38>
   17b54:	lsr	r5, r1, #16
   17b58:	lsr	r4, r1, #8
   17b5c:	strb	r1, [sp, #3]
   17b60:	strb	r3, [sp]
   17b64:	mov	r1, #53	; 0x35
   17b68:	mov	r3, #42	; 0x2a
   17b6c:	mov	lr, #54	; 0x36
   17b70:	mov	ip, #48	; 0x30
   17b74:	strb	r1, [sp, #6]
   17b78:	strb	r3, [sp, #7]
   17b7c:	mov	r1, r2
   17b80:	mov	r3, sp
   17b84:	add	r2, sp, #4
   17b88:	add	r0, pc, r0
   17b8c:	strb	r5, [sp, #1]
   17b90:	strb	r4, [sp, #2]
   17b94:	strb	lr, [sp, #4]
   17b98:	strb	ip, [sp, #5]
   17b9c:	bl	17168 <build_ast@@Base+0x3e8>
   17ba0:	mov	r0, #0
   17ba4:	add	sp, sp, #12
   17ba8:	pop	{r4, r5, pc}
   17bac:	mov	r0, #1
   17bb0:	bx	lr
   17bb4:	ldrtcc	r3, [r0], -sl, lsr #10
   17bb8:	andeq	r1, r0, r0, lsl #30
   17bbc:	ldr	r2, [r2, #16]
   17bc0:	push	{r4, r5, r6, lr}
   17bc4:	cmp	r2, #0
   17bc8:	mov	r6, r3
   17bcc:	ldr	ip, [sp, #16]
   17bd0:	beq	17c9c <build_ast@@Base+0xf1c>
   17bd4:	ldr	r3, [r3, #12]
   17bd8:	cmp	r1, #0
   17bdc:	addeq	r2, r3, #1
   17be0:	streq	r2, [r6, #12]
   17be4:	cmp	r3, #0
   17be8:	beq	17c40 <build_ast@@Base+0xec0>
   17bec:	ldrd	r0, [ip, #16]
   17bf0:	ldrd	r2, [r6, #16]
   17bf4:	ldrd	r4, [r6, #24]
   17bf8:	adds	r2, r2, r0
   17bfc:	adc	r3, r3, r1
   17c00:	strd	r2, [r6, #16]
   17c04:	ldrd	r0, [ip, #24]
   17c08:	cmp	r4, r0
   17c0c:	sbcs	r3, r5, r1
   17c10:	blt	17cc0 <build_ast@@Base+0xf40>
   17c14:	ldrd	r2, [r6, #32]
   17c18:	adds	r2, r2, r0
   17c1c:	adc	r3, r3, r1
   17c20:	strd	r2, [r6, #32]
   17c24:	add	r1, ip, #40	; 0x28
   17c28:	add	r0, r6, #40	; 0x28
   17c2c:	bl	17614 <build_ast@@Base+0x894>
   17c30:	ldr	r3, [sp, #20]
   17c34:	mov	r0, #0
   17c38:	str	r3, [r6]
   17c3c:	pop	{r4, r5, r6, pc}
   17c40:	ldr	r1, [ip, #8]
   17c44:	ldrd	r2, [r6, #16]
   17c48:	str	r1, [r6, #8]
   17c4c:	ldrd	r0, [ip, #16]
   17c50:	ldrd	r4, [r6, #24]
   17c54:	adds	r2, r2, r0
   17c58:	adc	r3, r3, r1
   17c5c:	strd	r2, [r6, #16]
   17c60:	ldrd	r0, [ip, #24]
   17c64:	cmp	r4, r0
   17c68:	sbcs	r3, r5, r1
   17c6c:	bge	17cdc <build_ast@@Base+0xf5c>
   17c70:	ldrd	r2, [r6, #32]
   17c74:	strd	r0, [r6, #24]
   17c78:	ldrd	r0, [ip, #24]
   17c7c:	adds	r2, r2, r0
   17c80:	adc	r3, r3, r1
   17c84:	strd	r2, [r6, #32]
   17c88:	add	r1, ip, #40	; 0x28
   17c8c:	ldr	r2, [pc, #92]	; 17cf0 <build_ast@@Base+0xf70>
   17c90:	add	r0, r6, #40	; 0x28
   17c94:	bl	1188c <memcpy@plt>
   17c98:	b	17c30 <build_ast@@Base+0xeb0>
   17c9c:	ldr	r3, [r3, #12]
   17ca0:	cmp	r3, #0
   17ca4:	beq	17c30 <build_ast@@Base+0xeb0>
   17ca8:	mov	r1, r0
   17cac:	ldr	r0, [pc, #64]	; 17cf4 <build_ast@@Base+0xf74>
   17cb0:	add	r0, pc, r0
   17cb4:	bl	17168 <build_ast@@Base+0x3e8>
   17cb8:	mvn	r0, #0
   17cbc:	pop	{r4, r5, r6, pc}
   17cc0:	ldrd	r2, [r6, #32]
   17cc4:	strd	r0, [r6, #24]
   17cc8:	ldrd	r0, [ip, #24]
   17ccc:	adds	r2, r2, r0
   17cd0:	adc	r3, r3, r1
   17cd4:	strd	r2, [r6, #32]
   17cd8:	b	17c24 <build_ast@@Base+0xea4>
   17cdc:	ldrd	r2, [r6, #32]
   17ce0:	adds	r2, r2, r0
   17ce4:	adc	r3, r3, r1
   17ce8:	strd	r2, [r6, #32]
   17cec:	b	17c88 <build_ast@@Base+0xf08>
   17cf0:	andeq	r1, r0, r0, lsr #15
   17cf4:	andeq	r1, r0, r0, lsl lr
   17cf8:	ldr	ip, [pc, #52]	; 17d34 <build_ast@@Base+0xfb4>
   17cfc:	ldr	r3, [pc, #52]	; 17d38 <build_ast@@Base+0xfb8>
   17d00:	add	ip, pc, ip
   17d04:	push	{r4, lr}
   17d08:	mov	lr, #0
   17d0c:	ldr	r3, [ip, r3]
   17d10:	mvn	r4, #0
   17d14:	mov	r2, lr
   17d18:	mov	r1, lr
   17d1c:	str	r4, [r3, #24]
   17d20:	str	lr, [r3, #4]
   17d24:	str	lr, [r3, #8]
   17d28:	ldr	r0, [r3]
   17d2c:	pop	{r4, lr}
   17d30:	b	119c4 <fseek@plt>
   17d34:	strdeq	r2, [r1], -r8
   17d38:	andeq	r0, r0, ip, lsr #1
   17d3c:	push	{r4, r5, r6, r7, lr}
   17d40:	sub	sp, sp, #108	; 0x6c
   17d44:	mov	r4, #0
   17d48:	mov	r7, r0
   17d4c:	strh	r4, [sp, #2]
   17d50:	str	r4, [sp, #4]
   17d54:	str	r4, [sp, #8]
   17d58:	bl	1191c <getpid@plt>
   17d5c:	ldr	r3, [pc, #240]	; 17e54 <build_ast@@Base+0x10d4>
   17d60:	ldr	ip, [pc, #240]	; 17e58 <build_ast@@Base+0x10d8>
   17d64:	add	r3, pc, r3
   17d68:	mvn	lr, #0
   17d6c:	mov	r6, #1
   17d70:	ldr	r2, [pc, #228]	; 17e5c <build_ast@@Base+0x10dc>
   17d74:	mov	r1, #66	; 0x42
   17d78:	str	r0, [sp, #12]
   17d7c:	ldr	r5, [r3, ip]
   17d80:	mov	r0, r7
   17d84:	strh	r6, [sp]
   17d88:	str	r4, [r5, #4]
   17d8c:	str	r4, [r5, #12]
   17d90:	str	r4, [r5, #8]
   17d94:	str	r4, [r5, #20]
   17d98:	str	lr, [r5, #16]
   17d9c:	bl	11910 <open@plt>
   17da0:	subs	r6, r0, #0
   17da4:	movlt	r0, r4
   17da8:	blt	17e28 <build_ast@@Base+0x10a8>
   17dac:	mov	r7, sp
   17db0:	mov	r4, #7
   17db4:	mov	r2, r7
   17db8:	mov	r1, r4
   17dbc:	mov	r0, r6
   17dc0:	bl	11970 <fcntl@plt>
   17dc4:	cmp	r0, #0
   17dc8:	beq	17ddc <build_ast@@Base+0x105c>
   17dcc:	bl	1194c <__errno_location@plt>
   17dd0:	ldr	r3, [r0]
   17dd4:	cmp	r3, #4
   17dd8:	beq	17db4 <build_ast@@Base+0x1034>
   17ddc:	ldr	r1, [pc, #124]	; 17e60 <build_ast@@Base+0x10e0>
   17de0:	mov	r0, r6
   17de4:	add	r1, pc, r1
   17de8:	bl	11844 <fdopen@plt>
   17dec:	mov	r4, r0
   17df0:	cmp	r4, #0
   17df4:	mov	r0, r6
   17df8:	str	r4, [r5]
   17dfc:	beq	17e30 <build_ast@@Base+0x10b0>
   17e00:	add	r1, sp, #16
   17e04:	bl	1921c <__libc_csu_fini@@Base+0x1c>
   17e08:	cmp	r0, #0
   17e0c:	blt	17e3c <build_ast@@Base+0x10bc>
   17e10:	mov	r4, #1
   17e14:	ldr	r0, [r5]
   17e18:	mov	r1, #0
   17e1c:	str	r4, [r5, #24]
   17e20:	bl	1185c <setbuf@plt>
   17e24:	mov	r0, r4
   17e28:	add	sp, sp, #108	; 0x6c
   17e2c:	pop	{r4, r5, r6, r7, pc}
   17e30:	bl	119e8 <close@plt>
   17e34:	mov	r0, r4
   17e38:	b	17e28 <build_ast@@Base+0x10a8>
   17e3c:	mov	r4, #0
   17e40:	ldr	r0, [r5]
   17e44:	bl	11994 <fclose@plt>
   17e48:	str	r4, [r5]
   17e4c:	mov	r0, r4
   17e50:	b	17e28 <build_ast@@Base+0x10a8>
   17e54:	muleq	r1, r4, r2
   17e58:	andeq	r0, r0, ip, lsr #1
   17e5c:			; <UNDEFINED> instruction: 0x000001b6
   17e60:	andeq	r1, r0, r8, lsl #26
   17e64:	push	{r4, r5, r6, lr}
   17e68:	mov	r4, r1
   17e6c:	ldr	r5, [pc, #244]	; 17f68 <build_ast@@Base+0x11e8>
   17e70:	ldr	ip, [r4, #8]
   17e74:	ldr	lr, [r4, #12]
   17e78:	ldr	r6, [r4]
   17e7c:	cmp	ip, #0
   17e80:	mov	r1, r0
   17e84:	add	r5, pc, r5
   17e88:	add	r0, r6, lr
   17e8c:	ble	17ec8 <build_ast@@Base+0x1148>
   17e90:	ldrb	r3, [r1]
   17e94:	cmp	r3, #47	; 0x2f
   17e98:	addeq	r2, r1, #1
   17e9c:	ldrbeq	r3, [r1, #1]
   17ea0:	movne	r2, r1
   17ea4:	cmp	r3, #0
   17ea8:	beq	17ec8 <build_ast@@Base+0x1148>
   17eac:	cmp	r3, #47	; 0x2f
   17eb0:	moveq	r1, r2
   17eb4:	ldrb	r3, [r2, #1]!
   17eb8:	subeq	ip, ip, #1
   17ebc:	cmp	r3, #0
   17ec0:	cmpne	ip, #0
   17ec4:	bne	17eac <build_ast@@Base+0x112c>
   17ec8:	cmp	lr, #0
   17ecc:	beq	17ee4 <build_ast@@Base+0x1164>
   17ed0:	ldrb	r3, [r1]
   17ed4:	cmp	r3, #47	; 0x2f
   17ed8:	addne	r0, r0, #1
   17edc:	movne	r3, #47	; 0x2f
   17ee0:	strbne	r3, [r6, lr]
   17ee4:	bl	118b0 <strcpy@plt>
   17ee8:	ldr	r0, [r4]
   17eec:	bl	17d3c <build_ast@@Base+0xfbc>
   17ef0:	cmp	r0, #0
   17ef4:	beq	17f00 <build_ast@@Base+0x1180>
   17ef8:	mov	r0, #0
   17efc:	pop	{r4, r5, r6, pc}
   17f00:	ldr	r0, [r4]
   17f04:	bl	17a6c <build_ast@@Base+0xcec>
   17f08:	cmp	r0, #0
   17f0c:	bne	17f44 <build_ast@@Base+0x11c4>
   17f10:	ldr	r0, [r4]
   17f14:	bl	17d3c <build_ast@@Base+0xfbc>
   17f18:	cmp	r0, #0
   17f1c:	bne	17ef8 <build_ast@@Base+0x1178>
   17f20:	ldr	r3, [pc, #68]	; 17f6c <build_ast@@Base+0x11ec>
   17f24:	ldr	r1, [pc, #68]	; 17f70 <build_ast@@Base+0x11f0>
   17f28:	ldr	r2, [r4]
   17f2c:	ldr	r3, [r5, r3]
   17f30:	add	r1, pc, r1
   17f34:	ldr	r0, [r3]
   17f38:	bl	11940 <fprintf@plt>
   17f3c:	mvn	r0, #0
   17f40:	pop	{r4, r5, r6, pc}
   17f44:	ldr	r3, [pc, #32]	; 17f6c <build_ast@@Base+0x11ec>
   17f48:	ldr	r1, [pc, #36]	; 17f74 <build_ast@@Base+0x11f4>
   17f4c:	ldr	r2, [r4]
   17f50:	ldr	r3, [r5, r3]
   17f54:	add	r1, pc, r1
   17f58:	ldr	r0, [r3]
   17f5c:	bl	11940 <fprintf@plt>
   17f60:	mvn	r0, #0
   17f64:	pop	{r4, r5, r6, pc}
   17f68:	andeq	r2, r1, r4, ror r1
   17f6c:	andeq	r0, r0, r0, lsr #1
   17f70:	ldrdeq	r1, [r0], -r4
   17f74:	muleq	r0, ip, fp
   17f78:	ldr	r3, [pc, #96]	; 17fe0 <build_ast@@Base+0x1260>
   17f7c:	ldr	r2, [pc, #96]	; 17fe4 <build_ast@@Base+0x1264>
   17f80:	add	r3, pc, r3
   17f84:	push	{r4, lr}
   17f88:	ldr	r4, [r3, r2]
   17f8c:	ldr	r0, [r4]
   17f90:	cmp	r0, #0
   17f94:	beq	17fb4 <build_ast@@Base+0x1234>
   17f98:	ldr	r3, [r4, #8]
   17f9c:	cmp	r3, #0
   17fa0:	bne	17fc4 <build_ast@@Base+0x1244>
   17fa4:	bl	11994 <fclose@plt>
   17fa8:	mov	r3, #0
   17fac:	str	r3, [r4]
   17fb0:	str	r3, [r4, #12]
   17fb4:	mov	r3, #0
   17fb8:	str	r3, [r4, #24]
   17fbc:	ldr	r0, [r4, #20]
   17fc0:	pop	{r4, pc}
   17fc4:	ldr	r2, [r4, #24]
   17fc8:	cmp	r2, #0
   17fcc:	bge	17fa4 <build_ast@@Base+0x1224>
   17fd0:	mov	r0, r3
   17fd4:	bl	16ff4 <build_ast@@Base+0x274>
   17fd8:	ldr	r0, [r4]
   17fdc:	b	17fa4 <build_ast@@Base+0x1224>
   17fe0:	andeq	r2, r1, r8, ror r0
   17fe4:	andeq	r0, r0, ip, lsr #1
   17fe8:	push	{r4, lr}
   17fec:	mov	r4, r0
   17ff0:	mov	r0, #1
   17ff4:	bl	17050 <build_ast@@Base+0x2d0>
   17ff8:	str	r4, [r0]
   17ffc:	pop	{r4, pc}
   18000:	push	{r4, r5, r6, lr}
   18004:	mov	r5, r0
   18008:	mov	r0, #2
   1800c:	mov	r4, r1
   18010:	bl	17050 <build_ast@@Base+0x2d0>
   18014:	str	r5, [r0]
   18018:	str	r4, [r0, #4]
   1801c:	pop	{r4, r5, r6, pc}
   18020:	push	{r4, r5, r6, lr}
   18024:	mov	r5, r0
   18028:	mov	r0, #2
   1802c:	mov	r4, r1
   18030:	bl	17050 <build_ast@@Base+0x2d0>
   18034:	str	r5, [r0]
   18038:	str	r4, [r0, #4]
   1803c:	pop	{r4, r5, r6, pc}
   18040:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18044:	sub	sp, sp, #32
   18048:	mov	r7, sp
   1804c:	mov	r5, r1
   18050:	mov	r6, sp
   18054:	add	r2, sp, #32
   18058:	mov	r3, #0
   1805c:	str	r3, [r6], #4
   18060:	cmp	r2, r6
   18064:	bne	1805c <build_ast@@Base+0x12dc>
   18068:	mov	r8, #0
   1806c:	mov	r3, r8
   18070:	mov	r4, r5
   18074:	mov	r1, r5
   18078:	mov	r9, #1
   1807c:	lsr	r2, r3, #5
   18080:	ldr	lr, [r1, #40]	; 0x28
   18084:	add	ip, sp, #32
   18088:	cmp	lr, #0
   1808c:	add	r2, ip, r2, lsl #2
   18090:	and	sl, r3, #31
   18094:	ldrne	ip, [r2, #-32]	; 0xffffffe0
   18098:	add	r3, r3, #1
   1809c:	orrne	ip, ip, r9, lsl sl
   180a0:	addne	r8, r8, #1
   180a4:	strne	ip, [r2, #-32]	; 0xffffffe0
   180a8:	cmp	r3, #252	; 0xfc
   180ac:	add	r1, r1, #24
   180b0:	bne	1807c <build_ast@@Base+0x12fc>
   180b4:	add	r8, r8, r8, lsl #2
   180b8:	add	r1, r8, #17
   180bc:	bl	18020 <build_ast@@Base+0x12a0>
   180c0:	ldr	r0, [r5]
   180c4:	bl	17fe8 <build_ast@@Base+0x1268>
   180c8:	ldr	r0, [r5, #8]
   180cc:	bl	17fe8 <build_ast@@Base+0x1268>
   180d0:	ldr	r0, [r5, #12]
   180d4:	bl	17fe8 <build_ast@@Base+0x1268>
   180d8:	ldrd	r0, [r5, #16]
   180dc:	bl	18000 <build_ast@@Base+0x1280>
   180e0:	ldrd	r0, [r5, #24]
   180e4:	bl	18000 <build_ast@@Base+0x1280>
   180e8:	ldrd	r0, [r5, #32]
   180ec:	bl	18000 <build_ast@@Base+0x1280>
   180f0:	ldr	r0, [r7], #4
   180f4:	bl	17fe8 <build_ast@@Base+0x1268>
   180f8:	cmp	r7, r6
   180fc:	bne	180f0 <build_ast@@Base+0x1370>
   18100:	add	r5, r5, #6016	; 0x1780
   18104:	add	r5, r5, #32
   18108:	b	18118 <build_ast@@Base+0x1398>
   1810c:	add	r4, r4, #24
   18110:	cmp	r4, r5
   18114:	beq	18144 <build_ast@@Base+0x13c4>
   18118:	ldr	r0, [r4, #40]	; 0x28
   1811c:	cmp	r0, #0
   18120:	beq	1810c <build_ast@@Base+0x138c>
   18124:	bl	17fe8 <build_ast@@Base+0x1268>
   18128:	ldrd	r0, [r4, #48]	; 0x30
   1812c:	bl	18000 <build_ast@@Base+0x1280>
   18130:	add	r4, r4, #24
   18134:	ldrd	r0, [r4, #32]
   18138:	bl	18000 <build_ast@@Base+0x1280>
   1813c:	cmp	r4, r5
   18140:	bne	18118 <build_ast@@Base+0x1398>
   18144:	add	sp, sp, #32
   18148:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1814c:	push	{r4, lr}
   18150:	mov	r0, #1
   18154:	bl	170ac <build_ast@@Base+0x32c>
   18158:	subs	r3, r0, #0
   1815c:	popeq	{r4, pc}
   18160:	ldr	r0, [r3]
   18164:	pop	{r4, lr}
   18168:	b	16fc4 <build_ast@@Base+0x244>
   1816c:	push	{r4, r5, r6, lr}
   18170:	mov	r0, #2
   18174:	bl	170ac <build_ast@@Base+0x32c>
   18178:	subs	r3, r0, #0
   1817c:	beq	181ac <build_ast@@Base+0x142c>
   18180:	ldr	r0, [r3]
   18184:	bl	16fc4 <build_ast@@Base+0x244>
   18188:	mov	r5, #0
   1818c:	mov	r4, r0
   18190:	ldr	r0, [r3, #4]
   18194:	bl	16fc4 <build_ast@@Base+0x244>
   18198:	mov	r2, #0
   1819c:	mov	r3, r0
   181a0:	orr	r1, r3, r5
   181a4:	orr	r0, r2, r4
   181a8:	pop	{r4, r5, r6, pc}
   181ac:	mov	r0, #0
   181b0:	mov	r1, #0
   181b4:	pop	{r4, r5, r6, pc}
   181b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181bc:	sub	sp, sp, #28
   181c0:	mov	r4, #0
   181c4:	str	r1, [sp, #8]
   181c8:	str	r3, [sp, #12]
   181cc:	add	r3, r1, #56	; 0x38
   181d0:	add	r1, r1, #16
   181d4:	str	r0, [sp, #16]
   181d8:	str	r2, [sp, #20]
   181dc:	ldr	r2, [r3, #-4]!
   181e0:	cmp	r2, #0
   181e4:	addne	r4, r4, #1
   181e8:	cmp	r3, r1
   181ec:	bne	181dc <build_ast@@Base+0x145c>
   181f0:	add	r4, r4, #4
   181f4:	lsl	r4, r4, #3
   181f8:	mov	r0, r4
   181fc:	bl	118e0 <malloc@plt>
   18200:	subs	r8, r0, #0
   18204:	beq	182c8 <build_ast@@Base+0x1548>
   18208:	ldr	r3, [sp, #12]
   1820c:	mov	r4, #0
   18210:	str	r3, [r8, #4]
   18214:	str	r4, [r8]
   18218:	bl	1814c <build_ast@@Base+0x13cc>
   1821c:	ldr	r3, [sp, #8]
   18220:	ldr	r5, [pc, #272]	; 18338 <build_ast@@Base+0x15b8>
   18224:	add	r6, r3, #12
   18228:	mov	r7, r4
   1822c:	str	r0, [r8, #12]
   18230:	bl	1814c <build_ast@@Base+0x13cc>
   18234:	str	r0, [r8, #16]
   18238:	bl	1814c <build_ast@@Base+0x13cc>
   1823c:	str	r0, [r8, #20]
   18240:	ldr	r3, [r6, #4]!
   18244:	cmp	r3, #0
   18248:	beq	182a4 <build_ast@@Base+0x1524>
   1824c:	bl	1814c <build_ast@@Base+0x13cc>
   18250:	cmp	r5, r0
   18254:	bne	1831c <build_ast@@Base+0x159c>
   18258:	bl	1814c <build_ast@@Base+0x13cc>
   1825c:	lsr	r9, r0, #1
   18260:	lsl	fp, r9, #3
   18264:	mov	r0, fp
   18268:	bl	118e0 <malloc@plt>
   1826c:	subs	sl, r0, #0
   18270:	beq	1832c <build_ast@@Base+0x15ac>
   18274:	add	r3, r8, r7, lsl #3
   18278:	cmp	r9, #0
   1827c:	str	r9, [r3, #24]
   18280:	str	sl, [r3, #28]
   18284:	sub	r9, r9, #1
   18288:	beq	182a0 <build_ast@@Base+0x1520>
   1828c:	bl	1816c <build_ast@@Base+0x13ec>
   18290:	sub	r9, r9, #1
   18294:	cmn	r9, #1
   18298:	strd	r0, [sl], #8
   1829c:	bne	1828c <build_ast@@Base+0x150c>
   182a0:	add	r7, r7, #1
   182a4:	add	r4, r4, #1
   182a8:	cmp	r4, #10
   182ac:	add	r5, r5, #131072	; 0x20000
   182b0:	bne	18240 <build_ast@@Base+0x14c0>
   182b4:	ldr	r3, [sp, #20]
   182b8:	mov	r0, r8
   182bc:	str	r8, [r3]
   182c0:	add	sp, sp, #28
   182c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182c8:	mvn	r5, #0
   182cc:	cmp	r4, #0
   182d0:	beq	1830c <build_ast@@Base+0x158c>
   182d4:	ldr	r3, [pc, #96]	; 1833c <build_ast@@Base+0x15bc>
   182d8:	add	r3, pc, r3
   182dc:	ldr	r0, [pc, #92]	; 18340 <build_ast@@Base+0x15c0>
   182e0:	ldr	r2, [sp, #12]
   182e4:	ldr	r1, [sp, #16]
   182e8:	str	r4, [sp]
   182ec:	add	r0, pc, r0
   182f0:	bl	17168 <build_ast@@Base+0x3e8>
   182f4:	mov	r2, r5
   182f8:	mov	r1, r8
   182fc:	ldr	r0, [sp, #8]
   18300:	add	sp, sp, #28
   18304:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18308:	b	171b0 <build_ast@@Base+0x430>
   1830c:	ldr	r3, [pc, #48]	; 18344 <build_ast@@Base+0x15c4>
   18310:	mov	r4, r5
   18314:	add	r3, pc, r3
   18318:	b	182dc <build_ast@@Base+0x155c>
   1831c:	ldr	r3, [pc, #36]	; 18348 <build_ast@@Base+0x15c8>
   18320:	mov	r5, r4
   18324:	add	r3, pc, r3
   18328:	b	182dc <build_ast@@Base+0x155c>
   1832c:	mov	r5, r4
   18330:	mov	r4, fp
   18334:	b	182cc <build_ast@@Base+0x154c>
   18338:			; <UNDEFINED> instruction: 0x01a10000
   1833c:	andeq	r1, r0, r8, asr #16
   18340:	andeq	r1, r0, r8, asr r8
   18344:	andeq	r1, r0, ip, lsl r8
   18348:	andeq	r1, r0, ip, lsl #16
   1834c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18350:	sub	sp, sp, #44	; 0x2c
   18354:	mov	r9, r0
   18358:	bl	1814c <build_ast@@Base+0x13cc>
   1835c:	mov	r7, #0
   18360:	add	sl, sp, #8
   18364:	mov	r4, sl
   18368:	add	r5, sp, #40	; 0x28
   1836c:	str	r0, [r9]
   18370:	bl	1814c <build_ast@@Base+0x13cc>
   18374:	str	r0, [r9, #8]
   18378:	bl	1814c <build_ast@@Base+0x13cc>
   1837c:	str	r0, [r9, #12]
   18380:	bl	1816c <build_ast@@Base+0x13ec>
   18384:	strd	r0, [r9, #16]
   18388:	bl	1816c <build_ast@@Base+0x13ec>
   1838c:	strd	r0, [r9, #24]
   18390:	bl	1816c <build_ast@@Base+0x13ec>
   18394:	ldr	r2, [pc, #244]	; 18490 <build_ast@@Base+0x1710>
   18398:	strd	r0, [r9, #32]
   1839c:	add	r0, r9, #40	; 0x28
   183a0:	mov	r1, r7
   183a4:	bl	1197c <memset@plt>
   183a8:	bl	1814c <build_ast@@Base+0x13cc>
   183ac:	str	r0, [r4], #4
   183b0:	bl	19034 <__gcov_sort_n_vals@@Base+0x618>
   183b4:	cmp	r5, r4
   183b8:	add	r7, r7, r0
   183bc:	bne	183a8 <build_ast@@Base+0x1628>
   183c0:	cmp	r7, #0
   183c4:	sub	r7, r7, #1
   183c8:	beq	1847c <build_ast@@Base+0x16fc>
   183cc:	ldr	r8, [pc, #192]	; 18494 <build_ast@@Base+0x1714>
   183d0:	mov	r4, #0
   183d4:	ldr	r3, [pc, #188]	; 18498 <build_ast@@Base+0x1718>
   183d8:	add	r8, pc, r8
   183dc:	mov	r5, r4
   183e0:	mov	r6, r4
   183e4:	add	r3, pc, r3
   183e8:	str	r3, [sp, #4]
   183ec:	cmp	r4, #0
   183f0:	addeq	r6, sl, r5, lsl #2
   183f4:	beq	18400 <build_ast@@Base+0x1680>
   183f8:	b	18428 <build_ast@@Base+0x16a8>
   183fc:	mov	r5, r3
   18400:	cmp	r5, #7
   18404:	bls	18410 <build_ast@@Base+0x1690>
   18408:	mov	r0, r8
   1840c:	bl	17168 <build_ast@@Base+0x3e8>
   18410:	ldr	r4, [r6], #4
   18414:	add	r3, r5, #1
   18418:	cmp	r4, #0
   1841c:	beq	183fc <build_ast@@Base+0x167c>
   18420:	lsl	r6, r5, #5
   18424:	mov	r5, r3
   18428:	tst	r4, #1
   1842c:	bne	18440 <build_ast@@Base+0x16c0>
   18430:	lsr	r4, r4, #1
   18434:	tst	r4, #1
   18438:	add	r6, r6, #1
   1843c:	beq	18430 <build_ast@@Base+0x16b0>
   18440:	cmp	r6, #251	; 0xfb
   18444:	bhi	18484 <build_ast@@Base+0x1704>
   18448:	bl	1814c <build_ast@@Base+0x13cc>
   1844c:	add	r3, r6, r6, lsl #1
   18450:	sub	r7, r7, #1
   18454:	add	fp, r9, r3, lsl #3
   18458:	lsr	r4, r4, #1
   1845c:	add	r6, r6, #1
   18460:	str	r0, [fp, #40]	; 0x28
   18464:	bl	1816c <build_ast@@Base+0x13ec>
   18468:	strd	r0, [fp, #48]	; 0x30
   1846c:	bl	1816c <build_ast@@Base+0x13ec>
   18470:	cmn	r7, #1
   18474:	strd	r0, [fp, #56]	; 0x38
   18478:	bne	183ec <build_ast@@Base+0x166c>
   1847c:	add	sp, sp, #44	; 0x2c
   18480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18484:	ldr	r0, [sp, #4]
   18488:	bl	17168 <build_ast@@Base+0x3e8>
   1848c:	b	18448 <build_ast@@Base+0x16c8>
   18490:	andeq	r1, r0, r0, lsr #15
   18494:	andeq	r1, r0, ip, asr #15
   18498:	andeq	r1, r0, r4, lsl #15
   1849c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184a0:	sub	sp, sp, #6080	; 0x17c0
   184a4:	sub	sp, sp, #28
   184a8:	mov	r4, r1
   184ac:	stmib	sp, {r2, r3}
   184b0:	add	r3, sp, #6144	; 0x1800
   184b4:	mov	sl, r0
   184b8:	ldr	r7, [r3]
   184bc:	add	r3, sp, #6144	; 0x1800
   184c0:	add	r3, r3, #4
   184c4:	ldr	r6, [r3]
   184c8:	bl	1814c <build_ast@@Base+0x13cc>
   184cc:	add	r3, r4, #12
   184d0:	mov	r2, sl
   184d4:	str	r3, [sp, #12]
   184d8:	mov	r1, r0
   184dc:	mov	r0, r3
   184e0:	bl	17b30 <build_ast@@Base+0xdb0>
   184e4:	cmp	r0, #0
   184e8:	beq	18768 <build_ast@@Base+0x19e8>
   184ec:	bl	1814c <build_ast@@Base+0x13cc>
   184f0:	ldr	r3, [r4, #8]
   184f4:	cmp	r0, r3
   184f8:	beq	1850c <build_ast@@Base+0x178c>
   184fc:	mov	r0, #0
   18500:	add	sp, sp, #6080	; 0x17c0
   18504:	add	sp, sp, #28
   18508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1850c:	ldr	fp, [pc, #628]	; 18788 <build_ast@@Base+0x1a08>
   18510:	add	r9, sp, #2000	; 0x7d0
   18514:	add	r5, sp, #16
   18518:	add	fp, pc, fp
   1851c:	add	r9, r9, #8
   18520:	bl	16f74 <build_ast@@Base+0x1f4>
   18524:	str	r0, [r6]
   18528:	bl	1814c <build_ast@@Base+0x13cc>
   1852c:	cmp	r0, #-1560281088	; 0xa3000000
   18530:	bne	185d4 <build_ast@@Base+0x1854>
   18534:	bl	1814c <build_ast@@Base+0x13cc>
   18538:	mov	r0, r5
   1853c:	bl	1834c <build_ast@@Base+0x15cc>
   18540:	bl	16f98 <build_ast@@Base+0x218>
   18544:	subs	r8, r0, #0
   18548:	bne	18708 <build_ast@@Base+0x1988>
   1854c:	ldr	r3, [r7]
   18550:	cmp	r3, #0
   18554:	bne	185a0 <build_ast@@Base+0x1820>
   18558:	add	r2, sp, #6144	; 0x1800
   1855c:	add	r2, r2, #8
   18560:	ldr	r3, [r9, #-1992]	; 0xfffff838
   18564:	ldr	r2, [r2]
   18568:	cmp	r3, r2
   1856c:	bne	18520 <build_ast@@Base+0x17a0>
   18570:	ldr	r3, [sp, #8]
   18574:	ldr	ip, [r9, #-1984]	; 0xfffff840
   18578:	ldr	r2, [pc, #524]	; 1878c <build_ast@@Base+0x1a0c>
   1857c:	ldr	r3, [r3, #8]
   18580:	mov	r1, r5
   18584:	cmp	ip, r3
   18588:	ldr	r0, [sp, #4]
   1858c:	bne	18520 <build_ast@@Base+0x17a0>
   18590:	bl	1188c <memcpy@plt>
   18594:	ldr	r3, [r6]
   18598:	str	r3, [r7]
   1859c:	b	18520 <build_ast@@Base+0x17a0>
   185a0:	ldr	r0, [pc, #488]	; 18790 <build_ast@@Base+0x1a10>
   185a4:	bl	118e0 <malloc@plt>
   185a8:	ldr	r2, [pc, #476]	; 1878c <build_ast@@Base+0x1a0c>
   185ac:	mov	r1, r5
   185b0:	mov	r3, r0
   185b4:	str	r0, [fp]
   185b8:	add	r0, r0, #8
   185bc:	str	r3, [sp]
   185c0:	bl	1188c <memcpy@plt>
   185c4:	ldr	r3, [sp]
   185c8:	str	r8, [r3]
   185cc:	ldr	fp, [fp]
   185d0:	b	18520 <build_ast@@Base+0x17a0>
   185d4:	ldr	r5, [r4, #56]	; 0x38
   185d8:	cmp	r5, #0
   185dc:	beq	18770 <build_ast@@Base+0x19f0>
   185e0:	ldr	r3, [r4, #60]	; 0x3c
   185e4:	cmp	r0, #16777216	; 0x1000000
   185e8:	ldr	r8, [r3]
   185ec:	bne	18738 <build_ast@@Base+0x19b8>
   185f0:	ldr	r6, [pc, #412]	; 18794 <build_ast@@Base+0x1a14>
   185f4:	mov	r5, #0
   185f8:	add	r6, pc, r6
   185fc:	add	r6, r6, #4
   18600:	b	18644 <build_ast@@Base+0x18c4>
   18604:	mov	r2, r6
   18608:	mov	r3, r5
   1860c:	mov	r1, r4
   18610:	mov	r0, sl
   18614:	bl	181b8 <build_ast@@Base+0x1438>
   18618:	subs	r6, r0, #0
   1861c:	beq	1873c <build_ast@@Base+0x19bc>
   18620:	bl	1814c <build_ast@@Base+0x13cc>
   18624:	ldr	r3, [r4, #56]	; 0x38
   18628:	add	r5, r5, #1
   1862c:	cmp	r3, r5
   18630:	beq	18770 <build_ast@@Base+0x19f0>
   18634:	ldr	r3, [r4, #60]	; 0x3c
   18638:	cmp	r0, #16777216	; 0x1000000
   1863c:	ldr	r8, [r3, r5, lsl #2]
   18640:	bne	1873c <build_ast@@Base+0x19bc>
   18644:	bl	1814c <build_ast@@Base+0x13cc>
   18648:	cmp	r0, #0
   1864c:	beq	18620 <build_ast@@Base+0x18a0>
   18650:	cmp	r0, #3
   18654:	bne	1873c <build_ast@@Base+0x19bc>
   18658:	cmp	r8, #0
   1865c:	beq	18604 <build_ast@@Base+0x1884>
   18660:	ldr	r3, [r8]
   18664:	cmp	r4, r3
   18668:	bne	18604 <build_ast@@Base+0x1884>
   1866c:	bl	1814c <build_ast@@Base+0x13cc>
   18670:	ldr	r3, [r8, #4]
   18674:	cmp	r0, r3
   18678:	bne	1873c <build_ast@@Base+0x19bc>
   1867c:	bl	1814c <build_ast@@Base+0x13cc>
   18680:	ldr	r3, [r8, #8]
   18684:	cmp	r0, r3
   18688:	bne	1873c <build_ast@@Base+0x19bc>
   1868c:	bl	1814c <build_ast@@Base+0x13cc>
   18690:	ldr	r3, [r8, #12]
   18694:	cmp	r0, r3
   18698:	bne	1873c <build_ast@@Base+0x19bc>
   1869c:	ldr	r7, [pc, #244]	; 18798 <build_ast@@Base+0x1a18>
   186a0:	ldr	fp, [sp, #12]
   186a4:	add	r8, r8, #16
   186a8:	ldr	r9, [fp, #4]!
   186ac:	cmp	r9, #0
   186b0:	beq	186e8 <build_ast@@Base+0x1968>
   186b4:	bl	1814c <build_ast@@Base+0x13cc>
   186b8:	str	r0, [sp]
   186bc:	bl	1814c <build_ast@@Base+0x13cc>
   186c0:	ldr	r3, [sp]
   186c4:	cmp	r3, r7
   186c8:	bne	1873c <build_ast@@Base+0x19bc>
   186cc:	ldr	r3, [r8]
   186d0:	mov	r1, r3
   186d4:	cmp	r0, r3, lsl #1
   186d8:	bne	1873c <build_ast@@Base+0x19bc>
   186dc:	ldr	r0, [r8, #4]
   186e0:	blx	r9
   186e4:	add	r8, r8, #8
   186e8:	ldr	r3, [pc, #172]	; 1879c <build_ast@@Base+0x1a1c>
   186ec:	add	r7, r7, #131072	; 0x20000
   186f0:	cmp	r7, r3
   186f4:	bne	186a8 <build_ast@@Base+0x1928>
   186f8:	bl	16f98 <build_ast@@Base+0x218>
   186fc:	cmp	r0, #0
   18700:	beq	18620 <build_ast@@Base+0x18a0>
   18704:	mov	r8, r0
   18708:	cmp	r8, #0
   1870c:	blt	1877c <build_ast@@Base+0x19fc>
   18710:	ldr	r2, [pc, #136]	; 187a0 <build_ast@@Base+0x1a20>
   18714:	add	r2, pc, r2
   18718:	ldr	r0, [pc, #132]	; 187a4 <build_ast@@Base+0x1a24>
   1871c:	mov	r1, sl
   18720:	add	r0, pc, r0
   18724:	bl	17168 <build_ast@@Base+0x3e8>
   18728:	mvn	r0, #0
   1872c:	add	sp, sp, #6080	; 0x17c0
   18730:	add	sp, sp, #28
   18734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18738:	mov	r5, #0
   1873c:	ldr	r2, [pc, #100]	; 187a8 <build_ast@@Base+0x1a28>
   18740:	ldr	r0, [pc, #100]	; 187ac <build_ast@@Base+0x1a2c>
   18744:	mov	r3, r5
   18748:	mov	r1, sl
   1874c:	add	r2, pc, r2
   18750:	add	r0, pc, r0
   18754:	bl	17168 <build_ast@@Base+0x3e8>
   18758:	mvn	r0, #0
   1875c:	add	sp, sp, #6080	; 0x17c0
   18760:	add	sp, sp, #28
   18764:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18768:	mvn	r0, #0
   1876c:	b	18500 <build_ast@@Base+0x1780>
   18770:	cmp	r0, #0
   18774:	beq	184fc <build_ast@@Base+0x177c>
   18778:	b	1873c <build_ast@@Base+0x19bc>
   1877c:	ldr	r2, [pc, #44]	; 187b0 <build_ast@@Base+0x1a30>
   18780:	add	r2, pc, r2
   18784:	b	18718 <build_ast@@Base+0x1998>
   18788:	andeq	r3, r1, r0, lsr #4
   1878c:	andeq	r1, r0, r8, asr #15
   18790:	ldrdeq	r1, [r0], -r0
   18794:	andeq	r3, r1, r0, asr #2
   18798:			; <UNDEFINED> instruction: 0x01a10000
   1879c:			; <UNDEFINED> instruction: 0x01b50000
   187a0:	ldrdeq	r1, [r0], -ip
   187a4:	andeq	r1, r0, r0, lsl #10
   187a8:	andeq	r0, r0, r8, lsl #31
   187ac:	andeq	r1, r0, r8, lsr #9
   187b0:	andeq	r1, r0, r4, ror #8
   187b4:	ldr	r3, [pc, #68]	; 18800 <build_ast@@Base+0x1a80>
   187b8:	ldr	r2, [pc, #68]	; 18804 <build_ast@@Base+0x1a84>
   187bc:	add	r3, pc, r3
   187c0:	push	{r4, r5, r6, lr}
   187c4:	mov	r5, r0
   187c8:	ldr	r4, [r3, r2]
   187cc:	ldr	r0, [r4, #8]
   187d0:	cmp	r0, #0
   187d4:	beq	187dc <build_ast@@Base+0x1a5c>
   187d8:	bl	16ff4 <build_ast@@Base+0x274>
   187dc:	lsl	r1, r5, #2
   187e0:	mov	r2, #0
   187e4:	ldr	r0, [r4]
   187e8:	bl	119c4 <fseek@plt>
   187ec:	ldr	r0, [r4]
   187f0:	bl	11898 <ftell@plt>
   187f4:	asr	r0, r0, #2
   187f8:	str	r0, [r4, #4]
   187fc:	pop	{r4, r5, r6, pc}
   18800:	andeq	r1, r1, ip, lsr r8
   18804:	andeq	r0, r0, ip, lsr #1
   18808:	cmp	r2, #0
   1880c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18810:	mov	r9, r0
   18814:	sub	sp, sp, #20
   18818:	mov	r5, r1
   1881c:	mov	r4, r3
   18820:	beq	189d8 <build_ast@@Base+0x1c58>
   18824:	cmp	r4, #0
   18828:	bne	189f4 <build_ast@@Base+0x1c74>
   1882c:	mov	r1, r5
   18830:	ldr	r5, [pc, #456]	; 18a00 <build_ast@@Base+0x1c80>
   18834:	mov	r0, #-1560281088	; 0xa3000000
   18838:	add	r5, pc, r5
   1883c:	bl	18040 <build_ast@@Base+0x12c0>
   18840:	ldr	r4, [r5]
   18844:	cmp	r4, #0
   18848:	movne	r6, #-1560281088	; 0xa3000000
   1884c:	beq	18878 <build_ast@@Base+0x1af8>
   18850:	add	r1, r4, #8
   18854:	mov	r0, r6
   18858:	bl	18040 <build_ast@@Base+0x12c0>
   1885c:	ldr	r3, [r5]
   18860:	mov	r0, r3
   18864:	ldr	r4, [r3]
   18868:	bl	11880 <free@plt>
   1886c:	cmp	r4, #0
   18870:	str	r4, [r5]
   18874:	bne	18850 <build_ast@@Base+0x1ad0>
   18878:	ldr	r3, [r9, #56]	; 0x38
   1887c:	cmp	r3, #0
   18880:	beq	189bc <build_ast@@Base+0x1c3c>
   18884:	ldr	r3, [pc, #376]	; 18a04 <build_ast@@Base+0x1c84>
   18888:	ldr	r8, [pc, #376]	; 18a08 <build_ast@@Base+0x1c88>
   1888c:	add	r3, pc, r3
   18890:	str	r3, [sp, #4]
   18894:	ldr	r3, [pc, #368]	; 18a0c <build_ast@@Base+0x1c8c>
   18898:	mov	r7, #0
   1889c:	add	r3, pc, r3
   188a0:	str	r3, [sp, #12]
   188a4:	b	188e0 <build_ast@@Base+0x1b60>
   188a8:	ldr	r3, [r9, #60]	; 0x3c
   188ac:	ldr	r4, [r3, r7, lsl #2]
   188b0:	cmp	r4, #0
   188b4:	beq	188c4 <build_ast@@Base+0x1b44>
   188b8:	ldr	r3, [r4]
   188bc:	cmp	r9, r3
   188c0:	beq	189cc <build_ast@@Base+0x1c4c>
   188c4:	mov	r1, #0
   188c8:	mov	r0, #16777216	; 0x1000000
   188cc:	bl	18020 <build_ast@@Base+0x12a0>
   188d0:	ldr	r3, [r9, #56]	; 0x38
   188d4:	add	r7, r7, #1
   188d8:	cmp	r3, r7
   188dc:	beq	189bc <build_ast@@Base+0x1c3c>
   188e0:	ldr	r3, [sp, #4]
   188e4:	ldr	r4, [r3, #4]
   188e8:	cmp	r4, #0
   188ec:	beq	188a8 <build_ast@@Base+0x1b28>
   188f0:	ldr	r3, [r4, #4]
   188f4:	cmp	r3, r7
   188f8:	moveq	r3, #1
   188fc:	addeq	r4, r4, #8
   18900:	streq	r3, [sp, #8]
   18904:	bne	188a8 <build_ast@@Base+0x1b28>
   18908:	mov	r1, #3
   1890c:	mov	r0, #16777216	; 0x1000000
   18910:	bl	18020 <build_ast@@Base+0x12a0>
   18914:	ldr	r0, [r4, #4]
   18918:	bl	17fe8 <build_ast@@Base+0x1268>
   1891c:	ldr	r0, [r4, #8]
   18920:	bl	17fe8 <build_ast@@Base+0x1268>
   18924:	ldr	r0, [r4, #12]
   18928:	bl	17fe8 <build_ast@@Base+0x1268>
   1892c:	ldr	r5, [pc, #220]	; 18a10 <build_ast@@Base+0x1c90>
   18930:	add	r4, r4, #16
   18934:	add	r6, r9, #12
   18938:	ldr	r3, [r6, #4]!
   1893c:	cmp	r3, #0
   18940:	beq	1897c <build_ast@@Base+0x1bfc>
   18944:	ldr	fp, [r4]
   18948:	mov	r0, r5
   1894c:	sub	sl, fp, #1
   18950:	lsl	r1, fp, #1
   18954:	bl	18020 <build_ast@@Base+0x12a0>
   18958:	cmp	fp, #0
   1895c:	ldr	fp, [r4, #4]
   18960:	beq	18978 <build_ast@@Base+0x1bf8>
   18964:	sub	sl, sl, #1
   18968:	ldrd	r0, [fp], #8
   1896c:	bl	18000 <build_ast@@Base+0x1280>
   18970:	cmn	sl, #1
   18974:	bne	18964 <build_ast@@Base+0x1be4>
   18978:	add	r4, r4, #8
   1897c:	add	r5, r5, #131072	; 0x20000
   18980:	cmp	r5, r8
   18984:	bne	18938 <build_ast@@Base+0x1bb8>
   18988:	ldr	r3, [sp, #8]
   1898c:	cmp	r3, #0
   18990:	beq	188d0 <build_ast@@Base+0x1b50>
   18994:	ldr	r4, [sp, #12]
   18998:	mov	r2, #10
   1899c:	mov	r0, r9
   189a0:	ldr	r1, [r4, #4]
   189a4:	bl	171b0 <build_ast@@Base+0x430>
   189a8:	ldr	r3, [r9, #56]	; 0x38
   189ac:	add	r7, r7, #1
   189b0:	cmp	r3, r7
   189b4:	str	r0, [r4, #4]
   189b8:	bne	188e0 <build_ast@@Base+0x1b60>
   189bc:	mov	r0, #0
   189c0:	add	sp, sp, #20
   189c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189c8:	b	17fe8 <build_ast@@Base+0x1268>
   189cc:	mov	r3, #0
   189d0:	str	r3, [sp, #8]
   189d4:	b	18908 <build_ast@@Base+0x1b88>
   189d8:	ldr	r1, [pc, #52]	; 18a14 <build_ast@@Base+0x1c94>
   189dc:	ldr	r0, [pc, #52]	; 18a18 <build_ast@@Base+0x1c98>
   189e0:	bl	18020 <build_ast@@Base+0x12a0>
   189e4:	ldr	r0, [r9, #8]
   189e8:	bl	17fe8 <build_ast@@Base+0x1268>
   189ec:	cmp	r4, #0
   189f0:	beq	1882c <build_ast@@Base+0x1aac>
   189f4:	mov	r0, r4
   189f8:	bl	187b4 <build_ast@@Base+0x1a34>
   189fc:	b	1882c <build_ast@@Base+0x1aac>
   18a00:	andeq	r2, r1, r0, lsl #30
   18a04:	andeq	r2, r1, ip, lsr #29
   18a08:			; <UNDEFINED> instruction: 0x01b50000
   18a0c:	muleq	r1, ip, lr
   18a10:			; <UNDEFINED> instruction: 0x01a10000
   18a14:	ldrtcc	r3, [r0], -sl, lsr #10
   18a18:	strbvs	r6, [r3, -r1, ror #8]!

00018a1c <__gcov_sort_n_vals@@Base>:
   18a1c:	cmp	r1, #2
   18a20:	bxle	lr
   18a24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a28:	sub	lr, r1, #3
   18a2c:	mov	ip, #0
   18a30:	lsr	lr, lr, #1
   18a34:	add	r1, r0, #8
   18a38:	add	lr, r0, lr, lsl #4
   18a3c:	add	lr, lr, #24
   18a40:	ldrd	r4, [r1, #16]
   18a44:	ldrd	r6, [r1]
   18a48:	ldrd	r8, [r1, #8]
   18a4c:	mov	r2, ip
   18a50:	cmp	r6, r4
   18a54:	sbcs	r3, r7, r5
   18a58:	mov	fp, ip
   18a5c:	bge	18aa4 <__gcov_sort_n_vals@@Base+0x88>
   18a60:	add	r3, r1, #8
   18a64:	mov	sl, #0
   18a68:	b	18a80 <__gcov_sort_n_vals@@Base+0x64>
   18a6c:	ldrd	r6, [r3, #-24]	; 0xffffffe8
   18a70:	sub	r3, r3, #16
   18a74:	cmp	r6, r4
   18a78:	sbcs	r6, r7, r5
   18a7c:	bge	18aa4 <__gcov_sort_n_vals@@Base+0x88>
   18a80:	ldrd	r6, [r3, #-16]
   18a84:	subs	r2, r2, #2
   18a88:	mov	fp, r2
   18a8c:	strd	r6, [r3]
   18a90:	ldrd	r6, [r1, sl]
   18a94:	sub	sl, sl, #16
   18a98:	strd	r6, [r3, #8]
   18a9c:	mov	r6, r3
   18aa0:	bpl	18a6c <__gcov_sort_n_vals@@Base+0x50>
   18aa4:	add	fp, fp, #2
   18aa8:	mov	r3, r0
   18aac:	add	r1, r1, #16
   18ab0:	lsl	fp, fp, #3
   18ab4:	cmp	lr, r1
   18ab8:	strd	r8, [r3, fp]!
   18abc:	add	ip, ip, #2
   18ac0:	strd	r4, [r3, #8]
   18ac4:	bne	18a40 <__gcov_sort_n_vals@@Base+0x24>
   18ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18acc:	push	{r4, r5, r6, r7, r8, lr}
   18ad0:	ldr	r6, [r0]
   18ad4:	ldr	r4, [pc, #76]	; 18b28 <__gcov_sort_n_vals@@Base+0x10c>
   18ad8:	smull	r2, r3, r4, r6
   18adc:	asr	r4, r6, #31
   18ae0:	rsb	r4, r4, r3, asr #1
   18ae4:	add	r4, r4, r4, lsl #3
   18ae8:	subs	r4, r6, r4
   18aec:	bne	18b24 <__gcov_sort_n_vals@@Base+0x108>
   18af0:	cmp	r6, #0
   18af4:	ldr	r5, [r0, #4]
   18af8:	pople	{r4, r5, r6, r7, r8, pc}
   18afc:	add	r5, r5, #8
   18b00:	mov	r7, #8
   18b04:	mov	r0, r5
   18b08:	add	r4, r4, #9
   18b0c:	mov	r1, r7
   18b10:	bl	18a1c <__gcov_sort_n_vals@@Base>
   18b14:	cmp	r6, r4
   18b18:	add	r5, r5, #72	; 0x48
   18b1c:	bgt	18b04 <__gcov_sort_n_vals@@Base+0xe8>
   18b20:	pop	{r4, r5, r6, r7, r8, pc}
   18b24:	bl	119dc <abort@plt>
   18b28:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   18b2c:	ldr	r3, [r0, #52]	; 0x34
   18b30:	cmp	r3, #0
   18b34:	bxeq	lr
   18b38:	ldr	ip, [r0, #56]	; 0x38
   18b3c:	cmp	ip, #0
   18b40:	bxeq	lr
   18b44:	push	{r4, r5, r6, lr}
   18b48:	mov	r5, r0
   18b4c:	mov	r4, #0
   18b50:	add	r6, r0, #12
   18b54:	ldr	r1, [r5, #60]	; 0x3c
   18b58:	mov	r2, r6
   18b5c:	mov	r3, #0
   18b60:	ldr	r0, [r1, r4, lsl #2]
   18b64:	add	r0, r0, #16
   18b68:	ldr	r1, [r2, #4]!
   18b6c:	cmp	r1, #0
   18b70:	beq	18b80 <__gcov_sort_n_vals@@Base+0x164>
   18b74:	cmp	r3, #9
   18b78:	beq	18b9c <__gcov_sort_n_vals@@Base+0x180>
   18b7c:	add	r0, r0, #8
   18b80:	add	r3, r3, #1
   18b84:	cmp	r3, #10
   18b88:	bne	18b68 <__gcov_sort_n_vals@@Base+0x14c>
   18b8c:	add	r4, r4, #1
   18b90:	cmp	ip, r4
   18b94:	bne	18b54 <__gcov_sort_n_vals@@Base+0x138>
   18b98:	pop	{r4, r5, r6, pc}
   18b9c:	bl	18acc <__gcov_sort_n_vals@@Base+0xb0>
   18ba0:	ldr	ip, [r5, #56]	; 0x38
   18ba4:	add	r4, r4, #1
   18ba8:	cmp	ip, r4
   18bac:	bne	18b54 <__gcov_sort_n_vals@@Base+0x138>
   18bb0:	b	18b98 <__gcov_sort_n_vals@@Base+0x17c>
   18bb4:	push	{r4, r5, r6, r7, r8, r9, lr}
   18bb8:	sub	sp, sp, #6080	; 0x17c0
   18bbc:	ldr	ip, [pc, #388]	; 18d48 <__gcov_sort_n_vals@@Base+0x32c>
   18bc0:	sub	sp, sp, #36	; 0x24
   18bc4:	add	ip, pc, ip
   18bc8:	add	r5, sp, #2016	; 0x7e0
   18bcc:	mov	r4, r0
   18bd0:	mov	r7, r1
   18bd4:	mov	r1, #0
   18bd8:	str	r1, [ip, #4]
   18bdc:	str	r1, [ip]
   18be0:	mov	r8, r2
   18be4:	mov	r6, r3
   18be8:	str	r1, [r5, #-2000]	; 0xfffff830
   18bec:	str	r1, [r5, #-1996]	; 0xfffff834
   18bf0:	bl	18b2c <__gcov_sort_n_vals@@Base+0x110>
   18bf4:	mov	r1, r7
   18bf8:	ldr	r0, [r4, #12]
   18bfc:	bl	17e64 <build_ast@@Base+0x10e4>
   18c00:	cmn	r0, #1
   18c04:	beq	18c84 <__gcov_sort_n_vals@@Base+0x268>
   18c08:	bl	1814c <build_ast@@Base+0x13cc>
   18c0c:	cmp	r0, #0
   18c10:	beq	18c90 <__gcov_sort_n_vals@@Base+0x274>
   18c14:	ldr	r3, [pc, #304]	; 18d4c <__gcov_sort_n_vals@@Base+0x330>
   18c18:	cmp	r0, r3
   18c1c:	beq	18ce8 <__gcov_sort_n_vals@@Base+0x2cc>
   18c20:	ldr	r0, [pc, #296]	; 18d50 <__gcov_sort_n_vals@@Base+0x334>
   18c24:	ldr	r1, [r7]
   18c28:	add	r0, pc, r0
   18c2c:	bl	17168 <build_ast@@Base+0x3e8>
   18c30:	ldr	r5, [pc, #284]	; 18d54 <__gcov_sort_n_vals@@Base+0x338>
   18c34:	add	r5, pc, r5
   18c38:	ldr	r1, [r5, #4]
   18c3c:	cmp	r1, #0
   18c40:	movne	r6, #10
   18c44:	beq	18c64 <__gcov_sort_n_vals@@Base+0x248>
   18c48:	mov	r2, r6
   18c4c:	mov	r0, r4
   18c50:	bl	171b0 <build_ast@@Base+0x430>
   18c54:	cmp	r0, #0
   18c58:	mov	r1, r0
   18c5c:	str	r0, [r5, #4]
   18c60:	bne	18c48 <__gcov_sort_n_vals@@Base+0x22c>
   18c64:	bl	17f78 <build_ast@@Base+0x11f8>
   18c68:	cmp	r0, #0
   18c6c:	beq	18c84 <__gcov_sort_n_vals@@Base+0x268>
   18c70:	blt	18d24 <__gcov_sort_n_vals@@Base+0x308>
   18c74:	ldr	r0, [pc, #220]	; 18d58 <__gcov_sort_n_vals@@Base+0x33c>
   18c78:	add	r0, pc, r0
   18c7c:	ldr	r1, [r7]
   18c80:	bl	17168 <build_ast@@Base+0x3e8>
   18c84:	add	sp, sp, #6080	; 0x17c0
   18c88:	add	sp, sp, #36	; 0x24
   18c8c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18c90:	add	r9, sp, #24
   18c94:	bl	17cf8 <build_ast@@Base+0xf78>
   18c98:	ldr	r1, [r5, #-2000]	; 0xfffff830
   18c9c:	cmp	r1, #0
   18ca0:	beq	18d30 <__gcov_sort_n_vals@@Base+0x314>
   18ca4:	add	r3, sp, #6144	; 0x1800
   18ca8:	ldr	r0, [r7]
   18cac:	str	r6, [sp, #4]
   18cb0:	ldr	r3, [r3]
   18cb4:	mov	r1, r8
   18cb8:	str	r3, [sp]
   18cbc:	mov	r2, r4
   18cc0:	mov	r3, r9
   18cc4:	bl	17bbc <build_ast@@Base+0xe3c>
   18cc8:	cmn	r0, #1
   18ccc:	beq	18c30 <__gcov_sort_n_vals@@Base+0x214>
   18cd0:	mov	r1, r9
   18cd4:	ldr	r3, [r5, #-2000]	; 0xfffff830
   18cd8:	ldr	r2, [r5, #-1996]	; 0xfffff834
   18cdc:	mov	r0, r4
   18ce0:	bl	18808 <build_ast@@Base+0x1a88>
   18ce4:	b	18c30 <__gcov_sort_n_vals@@Base+0x214>
   18ce8:	add	r3, sp, #16
   18cec:	ldr	r0, [r7]
   18cf0:	str	r3, [sp]
   18cf4:	add	r3, sp, #6144	; 0x1800
   18cf8:	add	r1, sp, #20
   18cfc:	add	r9, sp, #24
   18d00:	str	r1, [sp, #4]
   18d04:	str	r6, [sp, #8]
   18d08:	mov	r2, r9
   18d0c:	ldr	r3, [r3]
   18d10:	mov	r1, r4
   18d14:	bl	1849c <build_ast@@Base+0x171c>
   18d18:	cmn	r0, #1
   18d1c:	bne	18c94 <__gcov_sort_n_vals@@Base+0x278>
   18d20:	b	18c30 <__gcov_sort_n_vals@@Base+0x214>
   18d24:	ldr	r0, [pc, #48]	; 18d5c <__gcov_sort_n_vals@@Base+0x340>
   18d28:	add	r0, pc, r0
   18d2c:	b	18c7c <__gcov_sort_n_vals@@Base+0x260>
   18d30:	ldr	r2, [pc, #40]	; 18d60 <__gcov_sort_n_vals@@Base+0x344>
   18d34:	mov	r0, r9
   18d38:	bl	1197c <memset@plt>
   18d3c:	ldr	r3, [r5, #-1996]	; 0xfffff834
   18d40:	str	r3, [r5, #-2000]	; 0xfffff830
   18d44:	b	18ca4 <__gcov_sort_n_vals@@Base+0x288>
   18d48:	andeq	r2, r1, r4, ror fp
   18d4c:	strbvs	r6, [r3, -r1, ror #8]!
   18d50:	andeq	r1, r0, r0, asr r0
   18d54:	andeq	r2, r1, r4, lsl #22
   18d58:	andeq	r0, r0, r4, ror #31
   18d5c:	andeq	r0, r0, r4, lsl pc
   18d60:	andeq	r1, r0, r8, asr #15
   18d64:	push	{r4, r5, r6, r7, r8, lr}
   18d68:	sub	sp, sp, #6080	; 0x17c0
   18d6c:	sub	sp, sp, #32
   18d70:	add	r6, sp, #24
   18d74:	add	r2, sp, #12
   18d78:	mov	r8, r1
   18d7c:	mov	r1, r6
   18d80:	mov	r4, r0
   18d84:	bl	173c8 <build_ast@@Base+0x648>
   18d88:	add	r5, sp, #8
   18d8c:	mov	r7, r0
   18d90:	mov	r0, r5
   18d94:	bl	1754c <build_ast@@Base+0x7cc>
   18d98:	cmp	r4, #0
   18d9c:	beq	18dc4 <__gcov_sort_n_vals@@Base+0x3a8>
   18da0:	mov	r0, r4
   18da4:	str	r6, [sp]
   18da8:	mov	r3, r7
   18dac:	mov	r2, r8
   18db0:	mov	r1, r5
   18db4:	bl	18bb4 <__gcov_sort_n_vals@@Base+0x198>
   18db8:	ldr	r4, [r4, #4]
   18dbc:	cmp	r4, #0
   18dc0:	bne	18da0 <__gcov_sort_n_vals@@Base+0x384>
   18dc4:	ldr	r0, [sp, #8]
   18dc8:	bl	11880 <free@plt>
   18dcc:	add	sp, sp, #6080	; 0x17c0
   18dd0:	add	sp, sp, #32
   18dd4:	pop	{r4, r5, r6, r7, r8, pc}
   18dd8:	ldrb	r1, [r0, #4]
   18ddc:	tst	r1, #1
   18de0:	bxne	lr
   18de4:	push	{r4, lr}
   18de8:	lsr	r1, r1, #1
   18dec:	mov	r4, r0
   18df0:	and	r1, r1, #1
   18df4:	ldr	r0, [r0]
   18df8:	bl	18d64 <__gcov_sort_n_vals@@Base+0x348>
   18dfc:	ldrb	r3, [r4, #4]
   18e00:	orr	r3, r3, #3
   18e04:	strb	r3, [r4, #4]
   18e08:	pop	{r4, pc}
   18e0c:	push	{r4, r5, r6, lr}
   18e10:	ldr	r4, [pc, #76]	; 18e64 <__gcov_sort_n_vals@@Base+0x448>
   18e14:	ldr	r5, [pc, #76]	; 18e68 <__gcov_sort_n_vals@@Base+0x44c>
   18e18:	add	r4, pc, r4
   18e1c:	mov	r0, r4
   18e20:	bl	18dd8 <__gcov_sort_n_vals@@Base+0x3bc>
   18e24:	ldr	r3, [r4, #8]
   18e28:	add	r5, pc, r5
   18e2c:	cmp	r3, #0
   18e30:	ldrne	r2, [r4, #12]
   18e34:	strne	r2, [r3, #12]
   18e38:	ldr	r2, [pc, #44]	; 18e6c <__gcov_sort_n_vals@@Base+0x450>
   18e3c:	add	r2, pc, r2
   18e40:	ldr	r2, [r2, #12]
   18e44:	cmp	r2, #0
   18e48:	beq	18e54 <__gcov_sort_n_vals@@Base+0x438>
   18e4c:	str	r3, [r2, #8]
   18e50:	pop	{r4, r5, r6, pc}
   18e54:	ldr	r2, [pc, #20]	; 18e70 <__gcov_sort_n_vals@@Base+0x454>
   18e58:	ldr	r2, [r5, r2]
   18e5c:	str	r3, [r2, #4]
   18e60:	pop	{r4, r5, r6, pc}
   18e64:	andeq	r2, r1, r8, lsl #25
   18e68:	ldrdeq	r1, [r1], -r0
   18e6c:	andeq	r2, r1, r4, ror #24
   18e70:	andeq	r0, r0, r8, lsr #1
   18e74:	ldr	r1, [r0]
   18e78:	push	{r4, r5, r6, lr}
   18e7c:	cmp	r1, #0
   18e80:	ldr	r5, [pc, #168]	; 18f30 <__gcov_sort_n_vals@@Base+0x514>
   18e84:	add	r5, pc, r5
   18e88:	popeq	{r4, r5, r6, pc}
   18e8c:	ldr	r3, [r0, #56]	; 0x38
   18e90:	cmp	r3, #0
   18e94:	popeq	{r4, r5, r6, pc}
   18e98:	mov	r4, r0
   18e9c:	mov	r2, #0
   18ea0:	add	r0, r0, #12
   18ea4:	bl	17b30 <build_ast@@Base+0xdb0>
   18ea8:	cmp	r0, #0
   18eac:	popeq	{r4, r5, r6, pc}
   18eb0:	ldr	r6, [pc, #124]	; 18f34 <__gcov_sort_n_vals@@Base+0x518>
   18eb4:	add	r6, pc, r6
   18eb8:	ldr	r2, [r6]
   18ebc:	cmp	r2, #0
   18ec0:	beq	18ed8 <__gcov_sort_n_vals@@Base+0x4bc>
   18ec4:	ldr	r3, [pc, #108]	; 18f38 <__gcov_sort_n_vals@@Base+0x51c>
   18ec8:	str	r2, [r4, #4]
   18ecc:	add	r3, pc, r3
   18ed0:	str	r4, [r3]
   18ed4:	pop	{r4, r5, r6, pc}
   18ed8:	ldr	r3, [pc, #92]	; 18f3c <__gcov_sort_n_vals@@Base+0x520>
   18edc:	ldr	r2, [pc, #92]	; 18f40 <__gcov_sort_n_vals@@Base+0x524>
   18ee0:	mov	r0, #12
   18ee4:	ldr	r5, [r5, r3]
   18ee8:	add	r2, pc, r2
   18eec:	ldr	r1, [r5]
   18ef0:	bl	17b30 <build_ast@@Base+0xdb0>
   18ef4:	cmp	r0, #0
   18ef8:	beq	18f18 <__gcov_sort_n_vals@@Base+0x4fc>
   18efc:	ldr	r3, [r5, #4]
   18f00:	cmp	r3, #0
   18f04:	str	r3, [r6, #8]
   18f08:	strne	r6, [r3, #12]
   18f0c:	ldr	r3, [pc, #48]	; 18f44 <__gcov_sort_n_vals@@Base+0x528>
   18f10:	add	r3, pc, r3
   18f14:	str	r3, [r5, #4]
   18f18:	ldr	r0, [pc, #40]	; 18f48 <__gcov_sort_n_vals@@Base+0x52c>
   18f1c:	add	r0, pc, r0
   18f20:	bl	19204 <__libc_csu_fini@@Base+0x4>
   18f24:	ldr	r3, [pc, #32]	; 18f4c <__gcov_sort_n_vals@@Base+0x530>
   18f28:	ldr	r2, [pc, r3]
   18f2c:	b	18ec4 <__gcov_sort_n_vals@@Base+0x4a8>
   18f30:	andeq	r1, r1, r4, ror r1
   18f34:	andeq	r2, r1, ip, ror #23
   18f38:	ldrdeq	r2, [r1], -r4
   18f3c:	andeq	r0, r0, r8, lsr #1
   18f40:			; <UNDEFINED> instruction: 0x00000db4
   18f44:	muleq	r1, r0, fp
   18f48:			; <UNDEFINED> instruction: 0xfffffee8
   18f4c:	andeq	r2, r1, r8, ror fp
   18f50:	cmp	r3, #0
   18f54:	cmpeq	r2, #0
   18f58:	bne	18f7c <__gcov_sort_n_vals@@Base+0x560>
   18f5c:	cmp	r1, #0
   18f60:	movlt	r1, #-2147483648	; 0x80000000
   18f64:	movlt	r0, #0
   18f68:	blt	18f78 <__gcov_sort_n_vals@@Base+0x55c>
   18f6c:	cmpeq	r0, #0
   18f70:	mvnne	r1, #-2147483648	; 0x80000000
   18f74:	mvnne	r0, #0
   18f78:	b	19024 <__gcov_sort_n_vals@@Base+0x608>
   18f7c:	sub	sp, sp, #8
   18f80:	push	{sp, lr}
   18f84:	cmp	r1, #0
   18f88:	blt	18fa8 <__gcov_sort_n_vals@@Base+0x58c>
   18f8c:	cmp	r3, #0
   18f90:	blt	18fdc <__gcov_sort_n_vals@@Base+0x5c0>
   18f94:	bl	19078 <__gcov_sort_n_vals@@Base+0x65c>
   18f98:	ldr	lr, [sp, #4]
   18f9c:	add	sp, sp, #8
   18fa0:	pop	{r2, r3}
   18fa4:	bx	lr
   18fa8:	rsbs	r0, r0, #0
   18fac:	sbc	r1, r1, r1, lsl #1
   18fb0:	cmp	r3, #0
   18fb4:	blt	19000 <__gcov_sort_n_vals@@Base+0x5e4>
   18fb8:	bl	19078 <__gcov_sort_n_vals@@Base+0x65c>
   18fbc:	ldr	lr, [sp, #4]
   18fc0:	add	sp, sp, #8
   18fc4:	pop	{r2, r3}
   18fc8:	rsbs	r0, r0, #0
   18fcc:	sbc	r1, r1, r1, lsl #1
   18fd0:	rsbs	r2, r2, #0
   18fd4:	sbc	r3, r3, r3, lsl #1
   18fd8:	bx	lr
   18fdc:	rsbs	r2, r2, #0
   18fe0:	sbc	r3, r3, r3, lsl #1
   18fe4:	bl	19078 <__gcov_sort_n_vals@@Base+0x65c>
   18fe8:	ldr	lr, [sp, #4]
   18fec:	add	sp, sp, #8
   18ff0:	pop	{r2, r3}
   18ff4:	rsbs	r0, r0, #0
   18ff8:	sbc	r1, r1, r1, lsl #1
   18ffc:	bx	lr
   19000:	rsbs	r2, r2, #0
   19004:	sbc	r3, r3, r3, lsl #1
   19008:	bl	19078 <__gcov_sort_n_vals@@Base+0x65c>
   1900c:	ldr	lr, [sp, #4]
   19010:	add	sp, sp, #8
   19014:	pop	{r2, r3}
   19018:	rsbs	r2, r2, #0
   1901c:	sbc	r3, r3, r3, lsl #1
   19020:	bx	lr
   19024:	push	{r1, lr}
   19028:	mov	r0, #8
   1902c:	bl	11850 <raise@plt>
   19030:	pop	{r1, pc}
   19034:	ldr	r3, [pc, #48]	; 1906c <__gcov_sort_n_vals@@Base+0x650>
   19038:	ldr	r2, [pc, #48]	; 19070 <__gcov_sort_n_vals@@Base+0x654>
   1903c:	and	r3, r3, r0, lsr #1
   19040:	sub	r0, r0, r3
   19044:	and	r3, r0, r2
   19048:	and	r0, r2, r0, lsr #2
   1904c:	add	r3, r3, r0
   19050:	ldr	r0, [pc, #28]	; 19074 <__gcov_sort_n_vals@@Base+0x658>
   19054:	add	r3, r3, r3, lsr #4
   19058:	and	r0, r0, r3
   1905c:	add	r0, r0, r0, lsl #8
   19060:	add	r0, r0, r0, lsl #16
   19064:	lsr	r0, r0, #24
   19068:	bx	lr
   1906c:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   19070:	teqcc	r3, #-872415232	; 0xcc000000
   19074:	svceq	0x000f0f0f
   19078:	cmp	r1, r3
   1907c:	push	{r4, r5, r6, r7, r8, r9, lr}
   19080:	cmpeq	r0, r2
   19084:	mov	r4, r0
   19088:	mov	r5, r1
   1908c:	ldr	r9, [sp, #28]
   19090:	movcc	r0, #0
   19094:	movcc	r1, #0
   19098:	bcc	19190 <__gcov_sort_n_vals@@Base+0x774>
   1909c:	cmp	r3, #0
   190a0:	clzeq	ip, r2
   190a4:	clzne	ip, r3
   190a8:	addeq	ip, ip, #32
   190ac:	cmp	r5, #0
   190b0:	clzeq	r1, r4
   190b4:	addeq	r1, r1, #32
   190b8:	clzne	r1, r5
   190bc:	sub	ip, ip, r1
   190c0:	sub	lr, ip, #32
   190c4:	lsl	r7, r3, ip
   190c8:	rsb	r8, ip, #32
   190cc:	orr	r7, r7, r2, lsl lr
   190d0:	orr	r7, r7, r2, lsr r8
   190d4:	lsl	r6, r2, ip
   190d8:	cmp	r5, r7
   190dc:	cmpeq	r4, r6
   190e0:	movcc	r0, #0
   190e4:	movcc	r1, #0
   190e8:	bcc	19104 <__gcov_sort_n_vals@@Base+0x6e8>
   190ec:	mov	r3, #1
   190f0:	subs	r4, r4, r6
   190f4:	lsl	r1, r3, lr
   190f8:	lsl	r0, r3, ip
   190fc:	orr	r1, r1, r3, lsr r8
   19100:	sbc	r5, r5, r7
   19104:	cmp	ip, #0
   19108:	beq	19190 <__gcov_sort_n_vals@@Base+0x774>
   1910c:	lsrs	r3, r7, #1
   19110:	rrx	r2, r6
   19114:	mov	r6, ip
   19118:	b	1913c <__gcov_sort_n_vals@@Base+0x720>
   1911c:	subs	r4, r4, r2
   19120:	sbc	r5, r5, r3
   19124:	adds	r4, r4, r4
   19128:	adc	r5, r5, r5
   1912c:	adds	r4, r4, #1
   19130:	adc	r5, r5, #0
   19134:	subs	r6, r6, #1
   19138:	beq	19158 <__gcov_sort_n_vals@@Base+0x73c>
   1913c:	cmp	r5, r3
   19140:	cmpeq	r4, r2
   19144:	bcs	1911c <__gcov_sort_n_vals@@Base+0x700>
   19148:	adds	r4, r4, r4
   1914c:	adc	r5, r5, r5
   19150:	subs	r6, r6, #1
   19154:	bne	1913c <__gcov_sort_n_vals@@Base+0x720>
   19158:	lsr	r6, r4, ip
   1915c:	lsr	r7, r5, ip
   19160:	orr	r6, r6, r5, lsl r8
   19164:	adds	r2, r0, r4
   19168:	orr	r6, r6, r5, lsr lr
   1916c:	adc	r3, r1, r5
   19170:	lsl	r1, r7, ip
   19174:	orr	r1, r1, r6, lsl lr
   19178:	lsl	r0, r6, ip
   1917c:	orr	r1, r1, r6, lsr r8
   19180:	subs	r0, r2, r0
   19184:	mov	r4, r6
   19188:	mov	r5, r7
   1918c:	sbc	r1, r3, r1
   19190:	cmp	r9, #0
   19194:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   19198:	strd	r4, [r9]
   1919c:	pop	{r4, r5, r6, r7, r8, r9, pc}

000191a0 <__libc_csu_init@@Base>:
   191a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   191a4:	mov	r7, r0
   191a8:	ldr	r6, [pc, #72]	; 191f8 <__libc_csu_init@@Base+0x58>
   191ac:	ldr	r5, [pc, #72]	; 191fc <__libc_csu_init@@Base+0x5c>
   191b0:	add	r6, pc, r6
   191b4:	add	r5, pc, r5
   191b8:	sub	r6, r6, r5
   191bc:	mov	r8, r1
   191c0:	mov	r9, r2
   191c4:	bl	11824 <fdopen@plt-0x20>
   191c8:	asrs	r6, r6, #2
   191cc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   191d0:	mov	r4, #0
   191d4:	add	r4, r4, #1
   191d8:	ldr	r3, [r5], #4
   191dc:	mov	r2, r9
   191e0:	mov	r1, r8
   191e4:	mov	r0, r7
   191e8:	blx	r3
   191ec:	cmp	r6, r4
   191f0:	bne	191d4 <__libc_csu_init@@Base+0x34>
   191f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   191f8:	andeq	r0, r1, r8, asr sp
   191fc:	andeq	r0, r1, r0, asr #26

00019200 <__libc_csu_fini@@Base>:
   19200:	bx	lr
   19204:	ldr	r3, [pc, #12]	; 19218 <__libc_csu_fini@@Base+0x18>
   19208:	mov	r1, #0
   1920c:	add	r3, pc, r3
   19210:	ldr	r2, [r3]
   19214:	b	11958 <__cxa_atexit@plt>
   19218:	andeq	r0, r1, r0, lsr #29
   1921c:	mov	r2, r1
   19220:	mov	r1, r0
   19224:	mov	r0, #3
   19228:	b	118f8 <__fxstat@plt>

Disassembly of section .fini:

0001922c <.fini>:
   1922c:	push	{r3, lr}
   19230:	pop	{r3, pc}
