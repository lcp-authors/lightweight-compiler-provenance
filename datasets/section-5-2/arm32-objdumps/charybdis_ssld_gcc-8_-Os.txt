
../repos/charybdis/ssld/.libs/ssld:     file format elf32-littlearm


Disassembly of section .init:

00010f04 <.init>:
   10f04:	push	{r3, lr}
   10f08:	bl	115d4 <fputs@plt+0x398>
   10f0c:	pop	{r3, pc}

Disassembly of section .plt:

00010f10 <open@plt-0x14>:
   10f10:	push	{lr}		; (str lr, [sp, #-4]!)
   10f14:	ldr	lr, [pc, #4]	; 10f20 <open@plt-0x4>
   10f18:	add	lr, pc, lr
   10f1c:	ldr	pc, [lr, #8]!
   10f20:	andeq	r3, r1, r0, ror #1

00010f24 <open@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #77824	; 0x13000
   10f2c:	ldr	pc, [ip, #224]!	; 0xe0

00010f30 <sigemptyset@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #77824	; 0x13000
   10f38:	ldr	pc, [ip, #216]!	; 0xd8

00010f3c <strerror@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #77824	; 0x13000
   10f44:	ldr	pc, [ip, #208]!	; 0xd0

00010f48 <rb_get_type@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #77824	; 0x13000
   10f50:	ldr	pc, [ip, #200]!	; 0xc8

00010f54 <zError@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #77824	; 0x13000
   10f5c:	ldr	pc, [ip, #192]!	; 0xc0

00010f60 <abort@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #77824	; 0x13000
   10f68:	ldr	pc, [ip, #184]!	; 0xb8

00010f6c <rb_event_addish@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #77824	; 0x13000
   10f74:	ldr	pc, [ip, #176]!	; 0xb0

00010f78 <rb_ignore_errno@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #77824	; 0x13000
   10f80:	ldr	pc, [ip, #168]!	; 0xa8

00010f84 <rb_lib_version@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #77824	; 0x13000
   10f8c:	ldr	pc, [ip, #160]!	; 0xa0

00010f90 <inflateEnd@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #77824	; 0x13000
   10f98:	ldr	pc, [ip, #152]!	; 0x98

00010f9c <__libc_start_main@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #77824	; 0x13000
   10fa4:	ldr	pc, [ip, #144]!	; 0x90

00010fa8 <rb_setselect@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #77824	; 0x13000
   10fb0:	ldr	pc, [ip, #136]!	; 0x88

00010fb4 <__gmon_start__@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #77824	; 0x13000
   10fbc:	ldr	pc, [ip, #128]!	; 0x80

00010fc0 <rb_ssl_handshake_count@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #77824	; 0x13000
   10fc8:	ldr	pc, [ip, #120]!	; 0x78

00010fcc <rb_send_fd_buf@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #77824	; 0x13000
   10fd4:	ldr	pc, [ip, #112]!	; 0x70

00010fd8 <vsnprintf@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #77824	; 0x13000
   10fe0:	ldr	pc, [ip, #104]!	; 0x68

00010fe4 <strncpy@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #77824	; 0x13000
   10fec:	ldr	pc, [ip, #96]!	; 0x60

00010ff0 <getenv@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #77824	; 0x13000
   10ff8:	ldr	pc, [ip, #88]!	; 0x58

00010ffc <deflate@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #77824	; 0x13000
   11004:	ldr	pc, [ip, #80]!	; 0x50

00011008 <deflateInit_@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #77824	; 0x13000
   11010:	ldr	pc, [ip, #72]!	; 0x48

00011014 <calloc@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #77824	; 0x13000
   1101c:	ldr	pc, [ip, #64]!	; 0x40

00011020 <rb_set_nb@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #77824	; 0x13000
   11028:	ldr	pc, [ip, #56]!	; 0x38

0001102c <memset@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #77824	; 0x13000
   11034:	ldr	pc, [ip, #48]!	; 0x30

00011038 <__assert_fail@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #77824	; 0x13000
   11040:	ldr	pc, [ip, #40]!	; 0x28

00011044 <rb_strlcpy@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #77824	; 0x13000
   1104c:	ldr	pc, [ip, #32]!

00011050 <rb_get_ssl_certfp@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #77824	; 0x13000
   11058:	ldr	pc, [ip, #24]!

0001105c <inflate@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #77824	; 0x13000
   11064:	ldr	pc, [ip, #16]!

00011068 <rb_init_rawbuffers@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #77824	; 0x13000
   11070:	ldr	pc, [ip, #8]!

00011074 <free@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #77824	; 0x13000
   1107c:	ldr	pc, [ip, #0]!

00011080 <rb_lib_loop@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #73728	; 0x12000
   11088:	ldr	pc, [ip, #4088]!	; 0xff8

0001108c <deflateEnd@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #73728	; 0x12000
   11094:	ldr	pc, [ip, #4080]!	; 0xff0

00011098 <rb_read@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #73728	; 0x12000
   110a0:	ldr	pc, [ip, #4072]!	; 0xfe8

000110a4 <rb_set_type@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #73728	; 0x12000
   110ac:	ldr	pc, [ip, #4064]!	; 0xfe0

000110b0 <strlen@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #73728	; 0x12000
   110b8:	ldr	pc, [ip, #4056]!	; 0xfd8

000110bc <rb_ssl_get_cipher@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #73728	; 0x12000
   110c4:	ldr	pc, [ip, #4048]!	; 0xfd0

000110c8 <memcpy@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #73728	; 0x12000
   110d0:	ldr	pc, [ip, #4040]!	; 0xfc8

000110d4 <rb_close@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #73728	; 0x12000
   110dc:	ldr	pc, [ip, #4032]!	; 0xfc0

000110e0 <sigaddset@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #73728	; 0x12000
   110e8:	ldr	pc, [ip, #4024]!	; 0xfb8

000110ec <strcpy@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #73728	; 0x12000
   110f4:	ldr	pc, [ip, #4016]!	; 0xfb0

000110f8 <rb_ssl_clear_handshake_count@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #73728	; 0x12000
   11100:	ldr	pc, [ip, #4008]!	; 0xfa8

00011104 <atoi@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #73728	; 0x12000
   1110c:	ldr	pc, [ip, #4000]!	; 0xfa0

00011110 <rb_rawbuf_length@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #73728	; 0x12000
   11118:	ldr	pc, [ip, #3992]!	; 0xf98

0001111c <rb_free_rawbuffer@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #73728	; 0x12000
   11124:	ldr	pc, [ip, #3984]!	; 0xf90

00011128 <rb_get_ssl_strerror@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #73728	; 0x12000
   11130:	ldr	pc, [ip, #3976]!	; 0xf88

00011134 <close@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #73728	; 0x12000
   1113c:	ldr	pc, [ip, #3968]!	; 0xf80

00011140 <rb_init_prng@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #73728	; 0x12000
   11148:	ldr	pc, [ip, #3960]!	; 0xf78

0001114c <rb_outofmemory@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #73728	; 0x12000
   11154:	ldr	pc, [ip, #3952]!	; 0xf70

00011158 <rb_supports_ssl@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #73728	; 0x12000
   11160:	ldr	pc, [ip, #3944]!	; 0xf68

00011164 <sigaction@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #73728	; 0x12000
   1116c:	ldr	pc, [ip, #3936]!	; 0xf60

00011170 <rb_ssl_start_connected@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #73728	; 0x12000
   11178:	ldr	pc, [ip, #3928]!	; 0xf58

0001117c <rb_lib_init@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #73728	; 0x12000
   11184:	ldr	pc, [ip, #3920]!	; 0xf50

00011188 <rb_new_rawbuffer@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #73728	; 0x12000
   11190:	ldr	pc, [ip, #3912]!	; 0xf48

00011194 <rb_open@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #73728	; 0x12000
   1119c:	ldr	pc, [ip, #3904]!	; 0xf40

000111a0 <inflateInit_@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #73728	; 0x12000
   111a8:	ldr	pc, [ip, #3896]!	; 0xf38

000111ac <rb_recv_fd_buf@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #73728	; 0x12000
   111b4:	ldr	pc, [ip, #3888]!	; 0xf30

000111b8 <rb_ssl_start_accepted@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #73728	; 0x12000
   111c0:	ldr	pc, [ip, #3880]!	; 0xf28

000111c4 <dup2@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #73728	; 0x12000
   111cc:	ldr	pc, [ip, #3872]!	; 0xf20

000111d0 <rb_event_add@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #73728	; 0x12000
   111d8:	ldr	pc, [ip, #3864]!	; 0xf18

000111dc <snprintf@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #73728	; 0x12000
   111e4:	ldr	pc, [ip, #3856]!	; 0xf10

000111e8 <strncmp@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #73728	; 0x12000
   111f0:	ldr	pc, [ip, #3848]!	; 0xf08

000111f4 <getrlimit@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #73728	; 0x12000
   111fc:	ldr	pc, [ip, #3840]!	; 0xf00

00011200 <rb_rawbuf_append@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #73728	; 0x12000
   11208:	ldr	pc, [ip, #3832]!	; 0xef8

0001120c <rb_rawbuf_flush@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #73728	; 0x12000
   11214:	ldr	pc, [ip, #3824]!	; 0xef0

00011218 <rb_setup_ssl_server@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #73728	; 0x12000
   11220:	ldr	pc, [ip, #3816]!	; 0xee8

00011224 <exit@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #73728	; 0x12000
   1122c:	ldr	pc, [ip, #3808]!	; 0xee0

00011230 <__errno_location@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #73728	; 0x12000
   11238:	ldr	pc, [ip, #3800]!	; 0xed8

0001123c <fputs@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #73728	; 0x12000
   11244:	ldr	pc, [ip, #3792]!	; 0xed0

Disassembly of section .text:

00011248 <.text>:
   11248:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1124c:	sub	sp, sp, #272	; 0x110
   11250:	mov	r0, #7
   11254:	add	r1, sp, #16
   11258:	bl	111f4 <getrlimit@plt>
   1125c:	cmp	r0, #0
   11260:	ldr	r0, [pc, #756]	; 1155c <fputs@plt+0x320>
   11264:	movwne	r7, #65535	; 0xffff
   11268:	ldreq	r7, [sp, #16]
   1126c:	bl	10ff0 <getenv@plt>
   11270:	mov	r6, r0
   11274:	ldr	r0, [pc, #740]	; 11560 <fputs@plt+0x324>
   11278:	bl	10ff0 <getenv@plt>
   1127c:	mov	r5, r0
   11280:	ldr	r0, [pc, #732]	; 11564 <fputs@plt+0x328>
   11284:	bl	10ff0 <getenv@plt>
   11288:	cmp	r6, #0
   1128c:	clz	r3, r5
   11290:	lsr	r3, r3, #5
   11294:	moveq	r3, #1
   11298:	cmp	r0, #0
   1129c:	moveq	r3, #1
   112a0:	mov	r4, r0
   112a4:	cmp	r3, #0
   112a8:	beq	112d0 <fputs@plt+0x94>
   112ac:	ldr	r4, [pc, #692]	; 11568 <fputs@plt+0x32c>
   112b0:	ldr	r0, [pc, #692]	; 1156c <fputs@plt+0x330>
   112b4:	ldr	r1, [r4]
   112b8:	bl	1123c <fputs@plt>
   112bc:	ldr	r0, [pc, #684]	; 11570 <fputs@plt+0x334>
   112c0:	ldr	r1, [r4]
   112c4:	bl	1123c <fputs@plt>
   112c8:	mov	r0, #1
   112cc:	bl	11224 <exit@plt>
   112d0:	mov	r0, r6
   112d4:	bl	11104 <atoi@plt>
   112d8:	mov	r8, r0
   112dc:	mov	r0, r5
   112e0:	ldr	r5, [pc, #652]	; 11574 <fputs@plt+0x338>
   112e4:	bl	11104 <atoi@plt>
   112e8:	mov	r6, r0
   112ec:	mov	r0, r4
   112f0:	mov	r4, #3
   112f4:	bl	11104 <atoi@plt>
   112f8:	str	r0, [r5, #12]
   112fc:	cmp	r4, r7
   11300:	blt	11540 <fputs@plt+0x304>
   11304:	mov	r1, #2
   11308:	ldr	r0, [pc, #616]	; 11578 <fputs@plt+0x33c>
   1130c:	bl	10f24 <open@plt>
   11310:	subs	r4, r0, #0
   11314:	blt	1136c <fputs@plt+0x130>
   11318:	cmp	r8, #0
   1131c:	cmpne	r6, #0
   11320:	beq	1132c <fputs@plt+0xf0>
   11324:	mov	r1, #0
   11328:	bl	111c4 <dup2@plt>
   1132c:	cmp	r8, #1
   11330:	cmpne	r6, #1
   11334:	beq	11344 <fputs@plt+0x108>
   11338:	mov	r1, #1
   1133c:	mov	r0, r4
   11340:	bl	111c4 <dup2@plt>
   11344:	cmp	r8, #2
   11348:	cmpne	r6, #2
   1134c:	beq	1135c <fputs@plt+0x120>
   11350:	mov	r1, #2
   11354:	mov	r0, r4
   11358:	bl	111c4 <dup2@plt>
   1135c:	cmp	r4, #2
   11360:	ble	1136c <fputs@plt+0x130>
   11364:	mov	r0, r4
   11368:	bl	11134 <close@plt>
   1136c:	mov	r4, #0
   11370:	mov	r9, #1
   11374:	add	r0, sp, #20
   11378:	mov	sl, #1024	; 0x400
   1137c:	str	r9, [sp, #16]
   11380:	str	r4, [sp, #148]	; 0x94
   11384:	bl	10f30 <sigemptyset@plt>
   11388:	mov	r1, #13
   1138c:	add	r0, sp, #20
   11390:	bl	110e0 <sigaddset@plt>
   11394:	mov	r1, #14
   11398:	add	r0, sp, #20
   1139c:	bl	110e0 <sigaddset@plt>
   113a0:	mov	r1, #5
   113a4:	add	r0, sp, #20
   113a8:	bl	110e0 <sigaddset@plt>
   113ac:	mov	r1, #28
   113b0:	add	r0, sp, #20
   113b4:	bl	110e0 <sigaddset@plt>
   113b8:	mov	r2, r4
   113bc:	add	r1, sp, #16
   113c0:	mov	r0, #28
   113c4:	bl	11164 <sigaction@plt>
   113c8:	mov	r2, r4
   113cc:	add	r1, sp, #16
   113d0:	mov	r0, #13
   113d4:	bl	11164 <sigaction@plt>
   113d8:	mov	r2, r4
   113dc:	add	r1, sp, #16
   113e0:	mov	r0, #5
   113e4:	bl	11164 <sigaction@plt>
   113e8:	ldr	r3, [pc, #396]	; 1157c <fputs@plt+0x340>
   113ec:	mov	r2, r4
   113f0:	add	r1, sp, #16
   113f4:	mov	r0, #14
   113f8:	str	r3, [sp, #16]
   113fc:	bl	11164 <sigaction@plt>
   11400:	mov	r3, #4096	; 0x1000
   11404:	mov	r2, r4
   11408:	stm	sp, {r7, sl}
   1140c:	mov	r1, r4
   11410:	mov	r0, r4
   11414:	str	r3, [sp, #8]
   11418:	mov	r3, r4
   1141c:	bl	1117c <rb_lib_init@plt>
   11420:	mov	r0, sl
   11424:	bl	11068 <rb_init_rawbuffers@plt>
   11428:	mov	r1, r9
   1142c:	mov	r0, r4
   11430:	bl	11140 <rb_init_prng@plt>
   11434:	bl	11158 <rb_supports_ssl@plt>
   11438:	subs	r0, r0, r4
   1143c:	movne	r0, #1
   11440:	strb	r0, [r5, #20]
   11444:	mov	r0, #48	; 0x30
   11448:	bl	11724 <fputs@plt+0x4e8>
   1144c:	mov	r7, r0
   11450:	ldr	r2, [pc, #296]	; 11580 <fputs@plt+0x344>
   11454:	mov	r1, #4
   11458:	mov	r0, r8
   1145c:	str	r7, [r5, #24]
   11460:	bl	11194 <rb_open@plt>
   11464:	ldr	r2, [pc, #280]	; 11584 <fputs@plt+0x348>
   11468:	mov	r1, #8
   1146c:	str	r0, [r7, #16]
   11470:	mov	r0, r6
   11474:	ldr	r7, [r5, #24]
   11478:	bl	11194 <rb_open@plt>
   1147c:	ldr	r3, [r5, #24]
   11480:	str	r0, [r7, #20]
   11484:	ldr	r0, [r3, #16]
   11488:	bl	11020 <rb_set_nb@plt>
   1148c:	ldr	r3, [r5, #24]
   11490:	ldr	r0, [r3, #20]
   11494:	bl	11020 <rb_set_nb@plt>
   11498:	mov	r3, #10
   1149c:	mov	r2, r4
   114a0:	ldr	r1, [pc, #224]	; 11588 <fputs@plt+0x34c>
   114a4:	ldr	r0, [pc, #224]	; 1158c <fputs@plt+0x350>
   114a8:	bl	10f6c <rb_event_addish@plt>
   114ac:	mov	r2, r4
   114b0:	mov	r3, #10
   114b4:	ldr	r1, [pc, #212]	; 11590 <fputs@plt+0x354>
   114b8:	ldr	r0, [pc, #212]	; 11594 <fputs@plt+0x358>
   114bc:	bl	111d0 <rb_event_add@plt>
   114c0:	ldr	r3, [r5, #24]
   114c4:	mov	r1, r4
   114c8:	ldr	r0, [r3, #20]
   114cc:	bl	117d4 <fputs@plt+0x598>
   114d0:	ldr	r1, [r5, #24]
   114d4:	ldr	r0, [r1, #16]
   114d8:	bl	12788 <fputs@plt+0x154c>
   114dc:	mov	r2, #256	; 0x100
   114e0:	mov	r1, r4
   114e4:	ldr	r6, [r5, #24]
   114e8:	add	r0, sp, #16
   114ec:	bl	1102c <memset@plt>
   114f0:	mov	r3, #86	; 0x56
   114f4:	strb	r3, [sp, #16]
   114f8:	bl	10f84 <rb_lib_version@plt>
   114fc:	mov	r1, r0
   11500:	mov	r2, #254	; 0xfe
   11504:	add	r0, sp, #17
   11508:	bl	10fe4 <strncpy@plt>
   1150c:	add	r0, sp, #16
   11510:	bl	110b0 <strlen@plt>
   11514:	mov	r2, r0
   11518:	add	r1, sp, #16
   1151c:	mov	r0, r6
   11520:	bl	11b38 <fputs@plt+0x8fc>
   11524:	ldrb	r1, [r5, #20]
   11528:	cmp	r1, r4
   1152c:	bne	11538 <fputs@plt+0x2fc>
   11530:	ldr	r0, [r5, #24]
   11534:	bl	11e3c <fputs@plt+0xc00>
   11538:	mov	r0, #0
   1153c:	bl	11080 <rb_lib_loop@plt>
   11540:	cmp	r4, r8
   11544:	cmpne	r4, r6
   11548:	beq	11554 <fputs@plt+0x318>
   1154c:	mov	r0, r4
   11550:	bl	11134 <close@plt>
   11554:	add	r4, r4, #1
   11558:	b	112fc <fputs@plt+0xc0>
   1155c:	andeq	r2, r1, r7, lsr #29
   11560:	andeq	r2, r1, lr, lsr #29
   11564:			; <UNDEFINED> instruction: 0x00012eb7
   11568:	andeq	r4, r2, r8, lsr #2
   1156c:	andeq	r2, r1, r0, asr #29
   11570:	strdeq	r2, [r1], -r3
   11574:	andeq	r4, r2, r0, lsr r1
   11578:	andeq	r2, r1, r5, lsr #30
   1157c:	andeq	r1, r1, r8, lsl #13
   11580:	andeq	r2, r1, pc, lsr #30
   11584:	andeq	r2, r1, r3, asr #30
   11588:	andeq	r1, r1, r0, lsr #13
   1158c:	andeq	r2, r1, sp, asr #30
   11590:	ldrdeq	r1, [r1], -r8
   11594:	andeq	r2, r1, lr, asr pc
   11598:	mov	fp, #0
   1159c:	mov	lr, #0
   115a0:	pop	{r1}		; (ldr r1, [sp], #4)
   115a4:	mov	r2, sp
   115a8:	push	{r2}		; (str r2, [sp, #-4]!)
   115ac:	push	{r0}		; (str r0, [sp, #-4]!)
   115b0:	ldr	ip, [pc, #16]	; 115c8 <fputs@plt+0x38c>
   115b4:	push	{ip}		; (str ip, [sp, #-4]!)
   115b8:	ldr	r0, [pc, #12]	; 115cc <fputs@plt+0x390>
   115bc:	ldr	r3, [pc, #12]	; 115d0 <fputs@plt+0x394>
   115c0:	bl	10f9c <__libc_start_main@plt>
   115c4:	bl	10f60 <abort@plt>
   115c8:	andeq	r2, r1, ip, asr #25
   115cc:	andeq	r1, r1, r8, asr #4
   115d0:	andeq	r2, r1, ip, ror #24
   115d4:	ldr	r3, [pc, #20]	; 115f0 <fputs@plt+0x3b4>
   115d8:	ldr	r2, [pc, #20]	; 115f4 <fputs@plt+0x3b8>
   115dc:	add	r3, pc, r3
   115e0:	ldr	r2, [r3, r2]
   115e4:	cmp	r2, #0
   115e8:	bxeq	lr
   115ec:	b	10fb4 <__gmon_start__@plt>
   115f0:	andeq	r2, r1, ip, lsl sl
   115f4:	andeq	r0, r0, r8, lsl r1
   115f8:	ldr	r0, [pc, #24]	; 11618 <fputs@plt+0x3dc>
   115fc:	ldr	r3, [pc, #24]	; 1161c <fputs@plt+0x3e0>
   11600:	cmp	r3, r0
   11604:	bxeq	lr
   11608:	ldr	r3, [pc, #16]	; 11620 <fputs@plt+0x3e4>
   1160c:	cmp	r3, #0
   11610:	bxeq	lr
   11614:	bx	r3
   11618:	andeq	r4, r2, r4, lsr #2
   1161c:	andeq	r4, r2, r4, lsr #2
   11620:	andeq	r0, r0, r0
   11624:	ldr	r0, [pc, #36]	; 11650 <fputs@plt+0x414>
   11628:	ldr	r1, [pc, #36]	; 11654 <fputs@plt+0x418>
   1162c:	sub	r1, r1, r0
   11630:	asr	r1, r1, #2
   11634:	add	r1, r1, r1, lsr #31
   11638:	asrs	r1, r1, #1
   1163c:	bxeq	lr
   11640:	ldr	r3, [pc, #16]	; 11658 <fputs@plt+0x41c>
   11644:	cmp	r3, #0
   11648:	bxeq	lr
   1164c:	bx	r3
   11650:	andeq	r4, r2, r4, lsr #2
   11654:	andeq	r4, r2, r4, lsr #2
   11658:	andeq	r0, r0, r0
   1165c:	push	{r4, lr}
   11660:	ldr	r4, [pc, #24]	; 11680 <fputs@plt+0x444>
   11664:	ldrb	r3, [r4]
   11668:	cmp	r3, #0
   1166c:	popne	{r4, pc}
   11670:	bl	115f8 <fputs@plt+0x3bc>
   11674:	mov	r3, #1
   11678:	strb	r3, [r4]
   1167c:	pop	{r4, pc}
   11680:	andeq	r4, r2, ip, lsr #2
   11684:	b	11624 <fputs@plt+0x3e8>
   11688:	bx	lr
   1168c:	cmp	r0, #0
   11690:	bxeq	lr
   11694:	b	11074 <free@plt>
   11698:	mov	r0, r1
   1169c:	b	1168c <fputs@plt+0x450>
   116a0:	push	{r4, r5, r6, r7, r8, lr}
   116a4:	ldr	r4, [pc, #116]	; 11720 <fputs@plt+0x4e4>
   116a8:	ldr	r3, [r4]
   116ac:	cmp	r3, #0
   116b0:	ldrne	r6, [r3, #8]
   116b4:	bne	116c8 <fputs@plt+0x48c>
   116b8:	mov	r3, #0
   116bc:	str	r3, [r4]
   116c0:	str	r3, [r4, #4]
   116c4:	pop	{r4, r5, r6, r7, r8, pc}
   116c8:	ldr	r5, [r3]
   116cc:	ldr	r0, [r5, #16]
   116d0:	bl	1111c <rb_free_rawbuffer@plt>
   116d4:	ldr	r0, [r5, #20]
   116d8:	bl	1111c <rb_free_rawbuffer@plt>
   116dc:	ldrb	r3, [r5, #72]	; 0x48
   116e0:	tst	r3, #2
   116e4:	beq	11704 <fputs@plt+0x4c8>
   116e8:	ldr	r7, [r5, #76]	; 0x4c
   116ec:	mov	r0, r7
   116f0:	bl	10f90 <inflateEnd@plt>
   116f4:	add	r0, r7, #56	; 0x38
   116f8:	bl	1108c <deflateEnd@plt>
   116fc:	mov	r0, r7
   11700:	bl	1168c <fputs@plt+0x450>
   11704:	mov	r0, r5
   11708:	bl	1168c <fputs@plt+0x450>
   1170c:	cmp	r6, #0
   11710:	beq	116b8 <fputs@plt+0x47c>
   11714:	mov	r3, r6
   11718:	ldr	r6, [r6, #8]
   1171c:	b	116c8 <fputs@plt+0x48c>
   11720:	andeq	r4, r2, r0, lsr r1
   11724:	push	{r4, lr}
   11728:	mov	r1, r0
   1172c:	mov	r0, #1
   11730:	bl	11014 <calloc@plt>
   11734:	cmp	r0, #0
   11738:	popne	{r4, pc}
   1173c:	bl	1114c <rb_outofmemory@plt>
   11740:	mul	r0, r2, r1
   11744:	b	11724 <fputs@plt+0x4e8>
   11748:	push	{r4, r5, r6, r7, r8, lr}
   1174c:	mov	r7, r0
   11750:	mov	r0, #80	; 0x50
   11754:	mov	r6, r1
   11758:	mov	r5, r2
   1175c:	bl	11724 <fputs@plt+0x4e8>
   11760:	mov	r4, r0
   11764:	str	r7, [r0, #12]
   11768:	bl	11188 <rb_new_rawbuffer@plt>
   1176c:	str	r0, [r4, #16]
   11770:	bl	11188 <rb_new_rawbuffer@plt>
   11774:	mvn	r3, #0
   11778:	str	r0, [r4, #20]
   1177c:	mov	r0, r6
   11780:	str	r3, [r4, #24]
   11784:	mov	r3, #0
   11788:	str	r6, [r4, #28]
   1178c:	str	r5, [r4, #32]
   11790:	str	r3, [r4, #76]	; 0x4c
   11794:	bl	11020 <rb_set_nb@plt>
   11798:	mov	r0, r5
   1179c:	bl	11020 <rb_set_nb@plt>
   117a0:	mov	r0, r4
   117a4:	pop	{r4, r5, r6, r7, r8, pc}
   117a8:	push	{r4, r5, r6, lr}
   117ac:	mov	r5, r0
   117b0:	add	r6, r0, #20
   117b4:	mov	r4, #0
   117b8:	ldr	r3, [r5, #36]	; 0x24
   117bc:	cmp	r4, r3
   117c0:	popge	{r4, r5, r6, pc}
   117c4:	add	r4, r4, #1
   117c8:	ldr	r0, [r6], #4
   117cc:	bl	110d4 <rb_close@plt>
   117d0:	b	117b8 <fputs@plt+0x57c>
   117d4:	push	{r4, lr}
   117d8:	mov	r4, r0
   117dc:	sub	sp, sp, #16384	; 0x4000
   117e0:	mov	r2, #16384	; 0x4000
   117e4:	mov	r1, sp
   117e8:	mov	r0, r4
   117ec:	bl	11098 <rb_read@plt>
   117f0:	cmp	r0, #0
   117f4:	bgt	117e0 <fputs@plt+0x5a4>
   117f8:	bne	11804 <fputs@plt+0x5c8>
   117fc:	mov	r0, #0
   11800:	bl	11224 <exit@plt>
   11804:	bl	11230 <__errno_location@plt>
   11808:	ldr	r0, [r0]
   1180c:	bl	10f78 <rb_ignore_errno@plt>
   11810:	cmp	r0, #0
   11814:	beq	117fc <fputs@plt+0x5c0>
   11818:	ldr	r2, [pc, #20]	; 11834 <fputs@plt+0x5f8>
   1181c:	mov	r3, #0
   11820:	mov	r1, #1
   11824:	mov	r0, r4
   11828:	bl	10fa8 <rb_setselect@plt>
   1182c:	add	sp, sp, #16384	; 0x4000
   11830:	pop	{r4, pc}
   11834:	ldrdeq	r1, [r1], -r4
   11838:	cmp	r0, #0
   1183c:	bne	11858 <fputs@plt+0x61c>
   11840:	push	{r4, lr}
   11844:	mov	r2, #235	; 0xeb
   11848:	ldr	r3, [pc, #68]	; 11894 <fputs@plt+0x658>
   1184c:	ldr	r1, [pc, #68]	; 11898 <fputs@plt+0x65c>
   11850:	ldr	r0, [pc, #68]	; 1189c <fputs@plt+0x660>
   11854:	bl	11038 <__assert_fail@plt>
   11858:	ldrd	r2, [r0, #4]
   1185c:	cmp	r3, #0
   11860:	strne	r2, [r3, #4]
   11864:	streq	r2, [r1, #4]
   11868:	ldr	r2, [r0, #4]
   1186c:	cmp	r2, #0
   11870:	strne	r3, [r2, #8]
   11874:	streq	r3, [r1]
   11878:	mov	r3, #0
   1187c:	str	r3, [r0, #4]
   11880:	str	r3, [r0, #8]
   11884:	ldr	r3, [r1, #8]
   11888:	sub	r3, r3, #1
   1188c:	str	r3, [r1, #8]
   11890:	bx	lr
   11894:	ldrdeq	r2, [r1], -ip
   11898:	andeq	r2, r1, r7, lsl #26
   1189c:	andeq	r2, r1, r3, lsr #26
   118a0:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   118a4:	mov	r5, r1
   118a8:	ldr	r6, [r1, #36]	; 0x24
   118ac:	cmp	r6, #0
   118b0:	bne	118dc <fputs@plt+0x6a0>
   118b4:	ldr	r3, [r5, #44]	; 0x2c
   118b8:	cmp	r3, #0
   118bc:	beq	11990 <fputs@plt+0x754>
   118c0:	ldr	r2, [pc, #208]	; 11998 <fputs@plt+0x75c>
   118c4:	mov	r3, r5
   118c8:	mov	r1, #2
   118cc:	ldr	r0, [r5, #16]
   118d0:	add	sp, sp, #8
   118d4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   118d8:	b	10fa8 <rb_setselect@plt>
   118dc:	ldr	r9, [pc, #184]	; 1199c <fputs@plt+0x760>
   118e0:	add	sl, r1, #36	; 0x24
   118e4:	ldr	r8, [r6, #8]
   118e8:	ldr	r4, [r6]
   118ec:	ldr	r3, [r9, #12]
   118f0:	ldr	r0, [r5, #16]
   118f4:	add	r7, r4, #20
   118f8:	mov	r1, r7
   118fc:	str	r3, [sp, #4]
   11900:	ldr	r3, [r4, #16]
   11904:	str	r3, [sp]
   11908:	ldr	r3, [r4, #12]
   1190c:	ldr	r2, [r4, #36]	; 0x24
   11910:	bl	10fcc <rb_send_fd_buf@plt>
   11914:	cmp	r0, #0
   11918:	ble	1196c <fputs@plt+0x730>
   1191c:	mov	r0, r6
   11920:	mov	r1, sl
   11924:	mov	r6, #0
   11928:	bl	11838 <fputs@plt+0x5fc>
   1192c:	ldr	r3, [r4, #36]	; 0x24
   11930:	cmp	r3, r6
   11934:	bgt	1195c <fputs@plt+0x720>
   11938:	ldr	r0, [r4, #12]
   1193c:	bl	1168c <fputs@plt+0x450>
   11940:	mov	r0, r4
   11944:	bl	1168c <fputs@plt+0x450>
   11948:	cmp	r8, #0
   1194c:	beq	118b4 <fputs@plt+0x678>
   11950:	mov	r6, r8
   11954:	ldr	r8, [r8, #8]
   11958:	b	118e8 <fputs@plt+0x6ac>
   1195c:	ldr	r0, [r7], #4
   11960:	add	r6, r6, #1
   11964:	bl	110d4 <rb_close@plt>
   11968:	b	1192c <fputs@plt+0x6f0>
   1196c:	bne	11978 <fputs@plt+0x73c>
   11970:	mov	r0, #0
   11974:	bl	11224 <exit@plt>
   11978:	bl	11230 <__errno_location@plt>
   1197c:	ldr	r0, [r0]
   11980:	bl	10f78 <rb_ignore_errno@plt>
   11984:	cmp	r0, #0
   11988:	bne	11948 <fputs@plt+0x70c>
   1198c:	b	11970 <fputs@plt+0x734>
   11990:	add	sp, sp, #8
   11994:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11998:	andeq	r1, r1, r0, lsr #17
   1199c:	andeq	r4, r2, r0, lsr r1
   119a0:	cmp	r0, #0
   119a4:	bne	119c0 <fputs@plt+0x784>
   119a8:	push	{r4, lr}
   119ac:	mov	r2, #143	; 0x8f
   119b0:	ldr	r3, [pc, #68]	; 119fc <fputs@plt+0x7c0>
   119b4:	ldr	r1, [pc, #68]	; 11a00 <fputs@plt+0x7c4>
   119b8:	ldr	r0, [pc, #68]	; 11a04 <fputs@plt+0x7c8>
   119bc:	bl	11038 <__assert_fail@plt>
   119c0:	mov	r3, #0
   119c4:	stm	r1, {r0, r3}
   119c8:	ldr	r3, [r2]
   119cc:	cmp	r3, #0
   119d0:	str	r3, [r1, #8]
   119d4:	strne	r1, [r3, #4]
   119d8:	bne	119e8 <fputs@plt+0x7ac>
   119dc:	ldr	r3, [r2, #4]
   119e0:	cmp	r3, #0
   119e4:	streq	r1, [r2, #4]
   119e8:	ldr	r3, [r2, #8]
   119ec:	str	r1, [r2]
   119f0:	add	r3, r3, #1
   119f4:	str	r3, [r2, #8]
   119f8:	bx	lr
   119fc:	andeq	r2, r1, fp, ror #25
   11a00:	andeq	r2, r1, r7, lsl #26
   11a04:	andeq	r2, r1, sp, lsr #26
   11a08:	mov	ip, #2000	; 0x7d0
   11a0c:	str	r1, [r0, #24]
   11a10:	udiv	r2, r1, ip
   11a14:	mls	r1, ip, r2, r1
   11a18:	ldr	r2, [pc, #12]	; 11a2c <fputs@plt+0x7f0>
   11a1c:	mov	ip, #12
   11a20:	mla	r2, ip, r1, r2
   11a24:	mov	r1, r0
   11a28:	b	119a0 <fputs@plt+0x764>
   11a2c:	andeq	r4, r2, ip, asr #2
   11a30:	push	{r4, lr}
   11a34:	subs	r4, r1, #0
   11a38:	sub	sp, sp, #16384	; 0x4000
   11a3c:	beq	11a70 <fputs@plt+0x834>
   11a40:	mov	r2, #16384	; 0x4000
   11a44:	mov	r1, sp
   11a48:	ldr	r0, [r4, #32]
   11a4c:	bl	11098 <rb_read@plt>
   11a50:	cmp	r0, #0
   11a54:	bne	11a78 <fputs@plt+0x83c>
   11a58:	ldr	r0, [r4, #32]
   11a5c:	bl	110d4 <rb_close@plt>
   11a60:	ldr	r2, [pc, #64]	; 11aa8 <fputs@plt+0x86c>
   11a64:	mov	r1, r4
   11a68:	mov	r0, r4
   11a6c:	bl	119a0 <fputs@plt+0x764>
   11a70:	add	sp, sp, #16384	; 0x4000
   11a74:	pop	{r4, pc}
   11a78:	bge	11a40 <fputs@plt+0x804>
   11a7c:	bl	11230 <__errno_location@plt>
   11a80:	ldr	r0, [r0]
   11a84:	bl	10f78 <rb_ignore_errno@plt>
   11a88:	cmp	r0, #0
   11a8c:	beq	11a58 <fputs@plt+0x81c>
   11a90:	mov	r3, r4
   11a94:	ldr	r2, [pc, #16]	; 11aac <fputs@plt+0x870>
   11a98:	mov	r1, #1
   11a9c:	ldr	r0, [r4, #32]
   11aa0:	bl	10fa8 <rb_setselect@plt>
   11aa4:	b	11a70 <fputs@plt+0x834>
   11aa8:	andeq	r4, r2, r0, lsr r1
   11aac:	andeq	r1, r1, r0, lsr sl
   11ab0:	cmp	r2, #0
   11ab4:	push	{r4, lr}
   11ab8:	bne	11ad0 <fputs@plt+0x894>
   11abc:	ldr	r3, [pc, #100]	; 11b28 <fputs@plt+0x8ec>
   11ac0:	mov	r2, #212	; 0xd4
   11ac4:	ldr	r1, [pc, #96]	; 11b2c <fputs@plt+0x8f0>
   11ac8:	ldr	r0, [pc, #96]	; 11b30 <fputs@plt+0x8f4>
   11acc:	bl	11038 <__assert_fail@plt>
   11ad0:	cmp	r0, #0
   11ad4:	bne	11aec <fputs@plt+0x8b0>
   11ad8:	ldr	r3, [pc, #72]	; 11b28 <fputs@plt+0x8ec>
   11adc:	mov	r2, #213	; 0xd5
   11ae0:	ldr	r1, [pc, #68]	; 11b2c <fputs@plt+0x8f0>
   11ae4:	ldr	r0, [pc, #72]	; 11b34 <fputs@plt+0x8f8>
   11ae8:	b	11acc <fputs@plt+0x890>
   11aec:	mov	r3, #0
   11af0:	str	r0, [r1]
   11af4:	str	r3, [r1, #8]
   11af8:	ldr	r3, [r2, #4]
   11afc:	cmp	r3, #0
   11b00:	str	r3, [r1, #4]
   11b04:	strne	r1, [r3, #8]
   11b08:	bne	11b18 <fputs@plt+0x8dc>
   11b0c:	ldr	r3, [r2]
   11b10:	cmp	r3, #0
   11b14:	streq	r1, [r2]
   11b18:	ldr	r3, [r2, #8]
   11b1c:	add	r3, r3, #1
   11b20:	stmib	r2, {r1, r3}
   11b24:	pop	{r4, pc}
   11b28:	strdeq	r2, [r1], -r7
   11b2c:	andeq	r2, r1, r7, lsl #26
   11b30:	andeq	r2, r1, sl, lsr sp
   11b34:	andeq	r2, r1, sp, lsr #26
   11b38:	push	{r4, r5, r6, r7, r8, lr}
   11b3c:	mov	r6, r0
   11b40:	mov	r0, #40	; 0x28
   11b44:	mov	r5, r2
   11b48:	mov	r7, r1
   11b4c:	bl	11724 <fputs@plt+0x4e8>
   11b50:	mov	r4, r0
   11b54:	mov	r0, r5
   11b58:	bl	11724 <fputs@plt+0x4e8>
   11b5c:	mov	r2, r5
   11b60:	mov	r1, r7
   11b64:	str	r0, [r4, #12]
   11b68:	str	r5, [r4, #16]
   11b6c:	bl	110c8 <memcpy@plt>
   11b70:	mov	r3, #0
   11b74:	mov	r1, r4
   11b78:	mov	r0, r4
   11b7c:	add	r2, r6, #36	; 0x24
   11b80:	str	r3, [r4, #36]	; 0x24
   11b84:	bl	11ab0 <fputs@plt+0x874>
   11b88:	mov	r1, r6
   11b8c:	pop	{r4, r5, r6, r7, r8, lr}
   11b90:	ldr	r0, [r1, #16]
   11b94:	b	118a0 <fputs@plt+0x664>
   11b98:	push	{r2, r3}
   11b9c:	push	{r4, r5, r6, lr}
   11ba0:	sub	sp, sp, #392	; 0x188
   11ba4:	ldrb	r3, [r0, #72]	; 0x48
   11ba8:	ldr	r6, [sp, #408]	; 0x198
   11bac:	tst	r3, #8
   11bb0:	bne	11c44 <fputs@plt+0xa08>
   11bb4:	mov	r4, r0
   11bb8:	mov	r5, r1
   11bbc:	ldr	r0, [r0, #16]
   11bc0:	ldr	r1, [r4, #28]
   11bc4:	bl	1120c <rb_rawbuf_flush@plt>
   11bc8:	ldr	r0, [r4, #20]
   11bcc:	ldr	r1, [r4, #32]
   11bd0:	bl	1120c <rb_rawbuf_flush@plt>
   11bd4:	ldr	r0, [r4, #28]
   11bd8:	bl	110d4 <rb_close@plt>
   11bdc:	ldrb	r3, [r4, #72]	; 0x48
   11be0:	orr	r2, r3, #8
   11be4:	tst	r3, #64	; 0x40
   11be8:	strb	r2, [r4, #72]	; 0x48
   11bec:	bne	11c14 <fputs@plt+0x9d8>
   11bf0:	ldr	r2, [r4, #24]
   11bf4:	mov	r1, #2000	; 0x7d0
   11bf8:	mov	r0, r4
   11bfc:	udiv	r3, r2, r1
   11c00:	mls	r3, r1, r3, r2
   11c04:	ldr	r2, [pc, #192]	; 11ccc <fputs@plt+0xa90>
   11c08:	mov	r1, #12
   11c0c:	mla	r1, r1, r3, r2
   11c10:	bl	11838 <fputs@plt+0x5fc>
   11c14:	eor	r5, r5, #1
   11c18:	cmp	r6, #0
   11c1c:	ldr	r0, [r4, #32]
   11c20:	andne	r5, r5, #1
   11c24:	moveq	r5, #1
   11c28:	cmp	r5, #0
   11c2c:	beq	11c54 <fputs@plt+0xa18>
   11c30:	bl	110d4 <rb_close@plt>
   11c34:	ldr	r2, [pc, #148]	; 11cd0 <fputs@plt+0xa94>
   11c38:	mov	r1, r4
   11c3c:	mov	r0, r4
   11c40:	bl	119a0 <fputs@plt+0x764>
   11c44:	add	sp, sp, #392	; 0x188
   11c48:	pop	{r4, r5, r6, lr}
   11c4c:	add	sp, sp, #8
   11c50:	bx	lr
   11c54:	mov	r3, r4
   11c58:	ldr	r2, [pc, #116]	; 11cd4 <fputs@plt+0xa98>
   11c5c:	mov	r1, #1
   11c60:	bl	10fa8 <rb_setselect@plt>
   11c64:	mov	r3, r5
   11c68:	mov	r2, r5
   11c6c:	ldr	r0, [r4, #32]
   11c70:	mov	r1, #2
   11c74:	bl	10fa8 <rb_setselect@plt>
   11c78:	add	r3, sp, #412	; 0x19c
   11c7c:	mov	r2, r6
   11c80:	mov	r1, #128	; 0x80
   11c84:	add	r0, sp, #8
   11c88:	str	r3, [sp, #4]
   11c8c:	bl	10fd8 <vsnprintf@plt>
   11c90:	mov	r3, #68	; 0x44
   11c94:	add	r1, sp, #8
   11c98:	mov	r2, #251	; 0xfb
   11c9c:	add	r0, sp, #141	; 0x8d
   11ca0:	strb	r3, [sp, #136]	; 0x88
   11ca4:	ldr	r3, [r4, #24]
   11ca8:	str	r3, [sp, #137]	; 0x89
   11cac:	bl	11044 <rb_strlcpy@plt>
   11cb0:	add	r0, sp, #8
   11cb4:	bl	110b0 <strlen@plt>
   11cb8:	add	r2, r0, #6
   11cbc:	add	r1, sp, #136	; 0x88
   11cc0:	ldr	r0, [r4, #12]
   11cc4:	bl	11b38 <fputs@plt+0x8fc>
   11cc8:	b	11c44 <fputs@plt+0xa08>
   11ccc:	andeq	r4, r2, ip, asr #2
   11cd0:	andeq	r4, r2, r0, lsr r1
   11cd4:	andeq	r1, r1, r0, lsr sl
   11cd8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11cdc:	mov	r5, #0
   11ce0:	mov	r7, #12
   11ce4:	ldr	r8, [pc, #116]	; 11d60 <fputs@plt+0xb24>
   11ce8:	ldr	r9, [pc, #116]	; 11d64 <fputs@plt+0xb28>
   11cec:	mul	r3, r7, r5
   11cf0:	ldr	r3, [r3, r8]
   11cf4:	cmp	r3, #0
   11cf8:	ldrne	r4, [r3, #8]
   11cfc:	bne	11d10 <fputs@plt+0xad4>
   11d00:	add	r5, r5, #1
   11d04:	cmp	r5, #2000	; 0x7d0
   11d08:	bne	11cec <fputs@plt+0xab0>
   11d0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d10:	ldr	r6, [r3]
   11d14:	ldrb	r3, [r6, #72]	; 0x48
   11d18:	tst	r3, #1
   11d1c:	beq	11d40 <fputs@plt+0xb04>
   11d20:	ldr	r0, [r6, #28]
   11d24:	bl	10fc0 <rb_ssl_handshake_count@plt>
   11d28:	cmp	r0, #2
   11d2c:	bls	11d54 <fputs@plt+0xb18>
   11d30:	mov	r2, r9
   11d34:	mov	r1, #1
   11d38:	mov	r0, r6
   11d3c:	bl	11b98 <fputs@plt+0x95c>
   11d40:	cmp	r4, #0
   11d44:	beq	11d00 <fputs@plt+0xac4>
   11d48:	mov	r3, r4
   11d4c:	ldr	r4, [r4, #8]
   11d50:	b	11d10 <fputs@plt+0xad4>
   11d54:	ldr	r0, [r6, #28]
   11d58:	bl	110f8 <rb_ssl_clear_handshake_count@plt>
   11d5c:	b	11d40 <fputs@plt+0xb04>
   11d60:	andeq	r4, r2, ip, asr #2
   11d64:	andeq	r2, r1, r7, asr #26
   11d68:	ldrb	r3, [r0, #72]	; 0x48
   11d6c:	tst	r3, #1
   11d70:	bxeq	lr
   11d74:	push	{r4, lr}
   11d78:	mov	r4, r0
   11d7c:	sub	sp, sp, #768	; 0x300
   11d80:	ldr	r0, [r0, #28]
   11d84:	bl	110bc <rb_ssl_get_cipher@plt>
   11d88:	subs	r1, r0, #0
   11d8c:	beq	11dd4 <fputs@plt+0xb98>
   11d90:	mov	r2, #256	; 0x100
   11d94:	mov	r0, sp
   11d98:	bl	11044 <rb_strlcpy@plt>
   11d9c:	mov	r3, #67	; 0x43
   11da0:	mov	r1, sp
   11da4:	strb	r3, [sp, #256]	; 0x100
   11da8:	ldr	r3, [r4, #24]
   11dac:	str	r3, [sp, #257]	; 0x101
   11db0:	add	r3, sp, #256	; 0x100
   11db4:	add	r0, r3, #5
   11db8:	bl	110ec <strcpy@plt>
   11dbc:	mov	r0, sp
   11dc0:	bl	110b0 <strlen@plt>
   11dc4:	add	r2, r0, #6
   11dc8:	add	r1, sp, #256	; 0x100
   11dcc:	ldr	r0, [r4, #12]
   11dd0:	bl	11b38 <fputs@plt+0x8fc>
   11dd4:	add	sp, sp, #768	; 0x300
   11dd8:	pop	{r4, pc}
   11ddc:	push	{r4, r5, lr}
   11de0:	sub	sp, sp, #84	; 0x54
   11de4:	mov	r4, r0
   11de8:	add	r1, sp, #13
   11dec:	ldr	r5, [pc, #68]	; 11e38 <fputs@plt+0xbfc>
   11df0:	ldr	r0, [r0, #28]
   11df4:	ldr	r2, [r5, #16]
   11df8:	bl	11050 <rb_get_ssl_certfp@plt>
   11dfc:	subs	r2, r0, #0
   11e00:	beq	11e30 <fputs@plt+0xbf4>
   11e04:	mov	r3, #70	; 0x46
   11e08:	mov	r1, sp
   11e0c:	ldr	r0, [r4, #12]
   11e10:	strb	r3, [sp]
   11e14:	ldr	r3, [r4, #24]
   11e18:	str	r3, [sp, #1]
   11e1c:	ldr	r3, [r5, #16]
   11e20:	str	r2, [sp, #9]
   11e24:	add	r2, r2, #13
   11e28:	str	r3, [sp, #5]
   11e2c:	bl	11b38 <fputs@plt+0x8fc>
   11e30:	add	sp, sp, #84	; 0x54
   11e34:	pop	{r4, r5, pc}
   11e38:	andeq	r4, r2, r0, lsr r1
   11e3c:	push	{r4, r5, r6, lr}
   11e40:	subs	r4, r1, #0
   11e44:	mov	r5, r0
   11e48:	beq	11e78 <fputs@plt+0xc3c>
   11e4c:	ldr	r1, [r4, #20]
   11e50:	ldr	r2, [r4, #24]
   11e54:	bl	11748 <fputs@plt+0x50c>
   11e58:	ldr	r3, [r4, #12]
   11e5c:	mov	r6, r0
   11e60:	ldr	r1, [r3, #1]
   11e64:	bl	11a08 <fputs@plt+0x7cc>
   11e68:	ldr	r2, [pc, #28]	; 11e8c <fputs@plt+0xc50>
   11e6c:	mov	r1, #1
   11e70:	mov	r0, r6
   11e74:	bl	11b98 <fputs@plt+0x95c>
   11e78:	mov	r0, r5
   11e7c:	mov	r2, #1
   11e80:	ldr	r1, [pc, #8]	; 11e90 <fputs@plt+0xc54>
   11e84:	pop	{r4, r5, r6, lr}
   11e88:	b	11b38 <fputs@plt+0x8fc>
   11e8c:	andeq	r2, r1, sl, asr sp
   11e90:	andeq	r2, r1, pc, ror sp
   11e94:	ldrb	r3, [r1, #72]	; 0x48
   11e98:	tst	r3, #8
   11e9c:	bxne	lr
   11ea0:	push	{r4, r5, r6, r7, r8, lr}
   11ea4:	mov	r5, r0
   11ea8:	mov	r4, r1
   11eac:	b	11ec0 <fputs@plt+0xc84>
   11eb0:	ldrd	r2, [r4, #64]	; 0x40
   11eb4:	adds	r6, r2, r0
   11eb8:	adc	r7, r3, r0, asr #31
   11ebc:	strd	r6, [r4, #64]	; 0x40
   11ec0:	mov	r1, r5
   11ec4:	ldr	r0, [r4, #20]
   11ec8:	bl	1120c <rb_rawbuf_flush@plt>
   11ecc:	cmp	r0, #0
   11ed0:	bgt	11eb0 <fputs@plt+0xc74>
   11ed4:	bne	11eec <fputs@plt+0xcb0>
   11ed8:	mov	r2, #0
   11edc:	mov	r0, r4
   11ee0:	pop	{r4, r5, r6, r7, r8, lr}
   11ee4:	mov	r1, r2
   11ee8:	b	11b98 <fputs@plt+0x95c>
   11eec:	bl	11230 <__errno_location@plt>
   11ef0:	ldr	r0, [r0]
   11ef4:	bl	10f78 <rb_ignore_errno@plt>
   11ef8:	cmp	r0, #0
   11efc:	beq	11ed8 <fputs@plt+0xc9c>
   11f00:	ldr	r0, [r4, #20]
   11f04:	bl	11110 <rb_rawbuf_length@plt>
   11f08:	cmp	r0, #0
   11f0c:	movgt	r3, r4
   11f10:	movle	r3, #0
   11f14:	ldrle	r0, [r4, #32]
   11f18:	movgt	r1, #2
   11f1c:	movle	r2, r3
   11f20:	pop	{r4, r5, r6, r7, r8, lr}
   11f24:	movle	r1, #2
   11f28:	ldrgt	r2, [pc, #4]	; 11f34 <fputs@plt+0xcf8>
   11f2c:	ldrgt	r0, [r3, #32]
   11f30:	b	10fa8 <rb_setselect@plt>
   11f34:	muleq	r1, r4, lr
   11f38:	ldr	r2, [r1, #1]
   11f3c:	mov	ip, #2000	; 0x7d0
   11f40:	udiv	r3, r2, ip
   11f44:	mls	ip, ip, r3, r2
   11f48:	mov	r3, #12
   11f4c:	mul	r3, r3, ip
   11f50:	ldr	ip, [pc, #172]	; 12004 <fputs@plt+0xdc8>
   11f54:	ldr	r3, [ip, r3]
   11f58:	cmp	r3, #0
   11f5c:	bxeq	lr
   11f60:	push	{r4, r5, lr}
   11f64:	sub	sp, sp, #548	; 0x224
   11f68:	ldr	r4, [r3]
   11f6c:	ldr	ip, [r4, #24]
   11f70:	cmp	r2, ip
   11f74:	bne	11f84 <fputs@plt+0xd48>
   11f78:	ldrb	ip, [r4, #72]	; 0x48
   11f7c:	tst	ip, #8
   11f80:	beq	11f98 <fputs@plt+0xd5c>
   11f84:	ldr	r3, [r3, #8]
   11f88:	cmp	r3, #0
   11f8c:	bne	11f68 <fputs@plt+0xd2c>
   11f90:	add	sp, sp, #548	; 0x224
   11f94:	pop	{r4, r5, pc}
   11f98:	ldrd	r2, [r4, #40]	; 0x28
   11f9c:	mov	r5, r0
   11fa0:	add	r0, sp, #32
   11fa4:	strd	r2, [sp, #24]
   11fa8:	ldrd	r2, [r4, #56]	; 0x38
   11fac:	strd	r2, [sp, #16]
   11fb0:	ldrd	r2, [r4, #48]	; 0x30
   11fb4:	strd	r2, [sp, #8]
   11fb8:	ldrd	r2, [r4, #64]	; 0x40
   11fbc:	strd	r2, [sp]
   11fc0:	add	r3, r1, #5
   11fc4:	mov	r1, #512	; 0x200
   11fc8:	ldr	r2, [pc, #56]	; 12008 <fputs@plt+0xdcc>
   11fcc:	bl	111dc <snprintf@plt>
   11fd0:	mov	r2, #0
   11fd4:	mov	r3, #0
   11fd8:	add	r0, sp, #32
   11fdc:	strd	r2, [r4, #40]	; 0x28
   11fe0:	strd	r2, [r4, #48]	; 0x30
   11fe4:	strd	r2, [r4, #56]	; 0x38
   11fe8:	strd	r2, [r4, #64]	; 0x40
   11fec:	bl	110b0 <strlen@plt>
   11ff0:	add	r2, r0, #1
   11ff4:	add	r1, sp, #32
   11ff8:	mov	r0, r5
   11ffc:	bl	11b38 <fputs@plt+0x8fc>
   12000:	b	11f90 <fputs@plt+0xd54>
   12004:	andeq	r4, r2, ip, asr #2
   12008:	andeq	r2, r1, r1, lsl #27
   1200c:	ldr	r3, [r0, #76]	; 0x4c
   12010:	push	{r4, r5, r6, r7, lr}
   12014:	sub	sp, sp, #16384	; 0x4000
   12018:	mov	r4, r0
   1201c:	sub	sp, sp, #4
   12020:	mov	r5, r1
   12024:	stm	r3, {r1, r2}
   12028:	mov	r2, #16384	; 0x4000
   1202c:	mov	r6, r2
   12030:	str	sp, [r3, #12]
   12034:	str	r2, [r3, #16]
   12038:	mov	r2, #0
   1203c:	ldr	r0, [r4, #76]	; 0x4c
   12040:	ldr	r3, [r0, #4]
   12044:	cmp	r3, #0
   12048:	bne	12070 <fputs@plt+0xe34>
   1204c:	cmp	r2, #0
   12050:	beq	120a8 <fputs@plt+0xe6c>
   12054:	ldrb	r3, [r4, #72]	; 0x48
   12058:	tst	r3, #8
   1205c:	bne	120a8 <fputs@plt+0xe6c>
   12060:	mov	r1, sp
   12064:	ldr	r0, [r4, #20]
   12068:	bl	11200 <rb_rawbuf_append@plt>
   1206c:	b	120a8 <fputs@plt+0xe6c>
   12070:	mov	r1, #0
   12074:	bl	1105c <inflate@plt>
   12078:	subs	r7, r0, #0
   1207c:	beq	120d4 <fputs@plt+0xe98>
   12080:	mov	r2, #6
   12084:	mov	r1, r5
   12088:	ldr	r0, [pc, #132]	; 12114 <fputs@plt+0xed8>
   1208c:	bl	111e8 <strncmp@plt>
   12090:	cmp	r0, #0
   12094:	bne	120b4 <fputs@plt+0xe78>
   12098:	ldr	r2, [pc, #120]	; 12118 <fputs@plt+0xedc>
   1209c:	mov	r1, #1
   120a0:	mov	r0, r4
   120a4:	bl	11b98 <fputs@plt+0x95c>
   120a8:	add	sp, sp, #16384	; 0x4000
   120ac:	add	sp, sp, #4
   120b0:	pop	{r4, r5, r6, r7, pc}
   120b4:	mov	r0, r7
   120b8:	bl	10f54 <zError@plt>
   120bc:	mov	r3, r0
   120c0:	ldr	r2, [pc, #84]	; 1211c <fputs@plt+0xee0>
   120c4:	mov	r1, #1
   120c8:	mov	r0, r4
   120cc:	bl	11b98 <fputs@plt+0x95c>
   120d0:	b	120a8 <fputs@plt+0xe6c>
   120d4:	ldr	r3, [r4, #76]	; 0x4c
   120d8:	ldr	r2, [r3, #16]
   120dc:	ldr	r3, [r3, #4]
   120e0:	rsb	r2, r2, #16384	; 0x4000
   120e4:	cmp	r3, #0
   120e8:	beq	1203c <fputs@plt+0xe00>
   120ec:	ldrb	r3, [r4, #72]	; 0x48
   120f0:	tst	r3, #8
   120f4:	bne	12104 <fputs@plt+0xec8>
   120f8:	mov	r1, sp
   120fc:	ldr	r0, [r4, #20]
   12100:	bl	11200 <rb_rawbuf_append@plt>
   12104:	ldr	r3, [r4, #76]	; 0x4c
   12108:	str	sp, [r3, #12]
   1210c:	str	r6, [r3, #16]
   12110:	b	12038 <fputs@plt+0xdfc>
   12114:	muleq	r1, sl, sp
   12118:	andeq	r2, r1, r1, lsr #27
   1211c:			; <UNDEFINED> instruction: 0x00012dbd
   12120:	push	{r4, r5, r6, r7, lr}
   12124:	sub	sp, sp, #16384	; 0x4000
   12128:	mov	r4, r0
   1212c:	sub	sp, sp, #4
   12130:	ldrb	r3, [r4, #72]	; 0x48
   12134:	ands	r6, r3, #8
   12138:	bne	121d0 <fputs@plt+0xf94>
   1213c:	mov	r2, #16384	; 0x4000
   12140:	mov	r1, sp
   12144:	ldr	r0, [r4, #28]
   12148:	bl	11098 <rb_read@plt>
   1214c:	subs	r5, r0, #0
   12150:	beq	121f0 <fputs@plt+0xfb4>
   12154:	bge	121fc <fputs@plt+0xfc0>
   12158:	bl	11230 <__errno_location@plt>
   1215c:	mov	r7, r0
   12160:	ldr	r0, [r0]
   12164:	bl	10f78 <rb_ignore_errno@plt>
   12168:	cmp	r0, #0
   1216c:	bne	12234 <fputs@plt+0xff8>
   12170:	ldrb	r3, [r4, #72]	; 0x48
   12174:	cmn	r5, #2
   12178:	movne	r5, #0
   1217c:	moveq	r5, #1
   12180:	tst	r3, r5
   12184:	beq	121a8 <fputs@plt+0xf6c>
   12188:	ldr	r0, [r4, #28]
   1218c:	bl	11128 <rb_get_ssl_strerror@plt>
   12190:	ldr	r2, [pc, #220]	; 12274 <fputs@plt+0x1038>
   12194:	mov	r3, r0
   12198:	mov	r1, #1
   1219c:	mov	r0, r4
   121a0:	bl	11b98 <fputs@plt+0x95c>
   121a4:	b	121d0 <fputs@plt+0xf94>
   121a8:	ldr	r0, [r7]
   121ac:	bl	10f3c <strerror@plt>
   121b0:	b	12190 <fputs@plt+0xf54>
   121b4:	mov	r3, r4
   121b8:	ldr	r2, [pc, #184]	; 12278 <fputs@plt+0x103c>
   121bc:	mov	r1, #1
   121c0:	bl	10fa8 <rb_setselect@plt>
   121c4:	mov	r1, r4
   121c8:	ldr	r0, [r4, #32]
   121cc:	bl	11e94 <fputs@plt+0xc58>
   121d0:	add	sp, sp, #16384	; 0x4000
   121d4:	add	sp, sp, #4
   121d8:	pop	{r4, r5, r6, r7, pc}
   121dc:	mov	r2, r5
   121e0:	mov	r1, sp
   121e4:	mov	r0, r4
   121e8:	bl	1200c <fputs@plt+0xdd0>
   121ec:	b	12130 <fputs@plt+0xef4>
   121f0:	ldr	r3, [pc, #132]	; 1227c <fputs@plt+0x1040>
   121f4:	ldr	r2, [pc, #132]	; 12280 <fputs@plt+0x1044>
   121f8:	b	12198 <fputs@plt+0xf5c>
   121fc:	ldrd	r2, [r4, #48]	; 0x30
   12200:	adds	r0, r2, r5
   12204:	adc	r1, r3, r5, asr #31
   12208:	ldrb	r3, [r4, #72]	; 0x48
   1220c:	strd	r0, [r4, #48]	; 0x30
   12210:	tst	r3, #2
   12214:	bne	121dc <fputs@plt+0xfa0>
   12218:	tst	r3, #8
   1221c:	bne	12130 <fputs@plt+0xef4>
   12220:	mov	r2, r5
   12224:	mov	r1, sp
   12228:	ldr	r0, [r4, #20]
   1222c:	bl	11200 <rb_rawbuf_append@plt>
   12230:	b	12130 <fputs@plt+0xef4>
   12234:	cmn	r5, #4
   12238:	ldr	r0, [r4, #28]
   1223c:	bne	121b4 <fputs@plt+0xf78>
   12240:	mov	r3, r6
   12244:	mov	r2, r6
   12248:	mov	r1, #1
   1224c:	bl	10fa8 <rb_setselect@plt>
   12250:	mov	r3, r4
   12254:	ldr	r2, [pc, #28]	; 12278 <fputs@plt+0x103c>
   12258:	mov	r1, #2
   1225c:	ldr	r0, [r4, #28]
   12260:	bl	10fa8 <rb_setselect@plt>
   12264:	ldrb	r3, [r4, #72]	; 0x48
   12268:	orr	r3, r3, #32
   1226c:	strb	r3, [r4, #72]	; 0x48
   12270:	b	121c4 <fputs@plt+0xf88>
   12274:	ldrdeq	r2, [r1], -r0
   12278:	andeq	r2, r1, r4, lsl r6
   1227c:	ldrdeq	r2, [r1], -pc	; <UNPREDICTABLE>
   12280:	andeq	r2, r1, r1, lsl lr
   12284:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12288:	sub	sp, sp, #32768	; 0x8000
   1228c:	mov	r4, r0
   12290:	sub	sp, sp, #4
   12294:	ldr	r6, [pc, #376]	; 12414 <fputs@plt+0x11d8>
   12298:	ldr	r7, [pc, #376]	; 12418 <fputs@plt+0x11dc>
   1229c:	ldr	r8, [pc, #376]	; 1241c <fputs@plt+0x11e0>
   122a0:	ldrb	r3, [r4, #72]	; 0x48
   122a4:	tst	r3, #8
   122a8:	bne	122d4 <fputs@plt+0x1098>
   122ac:	mov	r2, #16384	; 0x4000
   122b0:	mov	r1, sp
   122b4:	ldr	r0, [r4, #32]
   122b8:	bl	11098 <rb_read@plt>
   122bc:	subs	r2, r0, #0
   122c0:	bne	122e0 <fputs@plt+0x10a4>
   122c4:	mov	r2, #0
   122c8:	mov	r0, r4
   122cc:	mov	r1, r2
   122d0:	bl	11b98 <fputs@plt+0x95c>
   122d4:	add	sp, sp, #32768	; 0x8000
   122d8:	add	sp, sp, #4
   122dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122e0:	bge	123e8 <fputs@plt+0x11ac>
   122e4:	bl	11230 <__errno_location@plt>
   122e8:	ldr	r0, [r0]
   122ec:	bl	10f78 <rb_ignore_errno@plt>
   122f0:	cmp	r0, #0
   122f4:	movne	r3, r4
   122f8:	ldrne	r2, [pc, #288]	; 12420 <fputs@plt+0x11e4>
   122fc:	beq	122c4 <fputs@plt+0x1088>
   12300:	mov	r1, #1
   12304:	ldr	r0, [r4, #32]
   12308:	bl	10fa8 <rb_setselect@plt>
   1230c:	mov	r1, r4
   12310:	ldr	r0, [r4, #28]
   12314:	bl	12488 <fputs@plt+0x124c>
   12318:	b	122d4 <fputs@plt+0x1098>
   1231c:	ldr	r5, [r4, #76]	; 0x4c
   12320:	mov	r3, #16384	; 0x4000
   12324:	add	r9, sp, #16384	; 0x4000
   12328:	mov	r1, #2
   1232c:	add	r0, r5, #56	; 0x38
   12330:	str	sp, [r5, #56]	; 0x38
   12334:	str	r2, [r5, #60]	; 0x3c
   12338:	str	r9, [r5, #68]	; 0x44
   1233c:	str	r3, [r5, #72]	; 0x48
   12340:	bl	10ffc <deflate@plt>
   12344:	cmp	r0, #0
   12348:	beq	12398 <fputs@plt+0x115c>
   1234c:	bl	10f54 <zError@plt>
   12350:	mov	r3, r0
   12354:	mov	r2, r8
   12358:	mov	r1, #1
   1235c:	mov	r0, r4
   12360:	bl	11b98 <fputs@plt+0x95c>
   12364:	ldrb	r3, [r4, #72]	; 0x48
   12368:	ands	r5, r3, #8
   1236c:	bne	122d4 <fputs@plt+0x1098>
   12370:	ldr	r0, [r4, #16]
   12374:	bl	11110 <rb_rawbuf_length@plt>
   12378:	cmp	r0, #4096	; 0x1000
   1237c:	blt	122a0 <fputs@plt+0x1064>
   12380:	ldrb	r3, [r4, #72]	; 0x48
   12384:	mov	r2, r5
   12388:	orr	r3, r3, #4
   1238c:	strb	r3, [r4, #72]	; 0x48
   12390:	mov	r3, r5
   12394:	b	12300 <fputs@plt+0x10c4>
   12398:	ldr	r2, [r5, #72]	; 0x48
   1239c:	cmp	r2, #0
   123a0:	moveq	r2, r7
   123a4:	beq	123b8 <fputs@plt+0x117c>
   123a8:	ldr	r3, [r5, #60]	; 0x3c
   123ac:	cmp	r3, #0
   123b0:	beq	123c8 <fputs@plt+0x118c>
   123b4:	mov	r2, r6
   123b8:	mov	r1, #1
   123bc:	mov	r0, r4
   123c0:	bl	11b98 <fputs@plt+0x95c>
   123c4:	b	12364 <fputs@plt+0x1128>
   123c8:	ldrb	r3, [r4, #72]	; 0x48
   123cc:	tst	r3, #8
   123d0:	rsbeq	r2, r2, #16384	; 0x4000
   123d4:	moveq	r1, r9
   123d8:	bne	12364 <fputs@plt+0x1128>
   123dc:	ldr	r0, [r4, #16]
   123e0:	bl	11200 <rb_rawbuf_append@plt>
   123e4:	b	12364 <fputs@plt+0x1128>
   123e8:	ldrd	sl, [r4, #56]	; 0x38
   123ec:	ldrb	r3, [r4, #72]	; 0x48
   123f0:	adds	r0, sl, r2
   123f4:	adc	r1, fp, r2, asr #31
   123f8:	tst	r3, #2
   123fc:	strd	r0, [r4, #56]	; 0x38
   12400:	bne	1231c <fputs@plt+0x10e0>
   12404:	tst	r3, #8
   12408:	bne	122d4 <fputs@plt+0x1098>
   1240c:	mov	r1, sp
   12410:	b	123dc <fputs@plt+0x11a0>
   12414:	andeq	r2, r1, fp, lsr lr
   12418:	andeq	r2, r1, r4, lsl lr
   1241c:	andeq	r2, r1, r1, lsl #28
   12420:	andeq	r2, r1, r4, lsr #8
   12424:	push	{r4, r5, r6, lr}
   12428:	subs	r4, r1, #0
   1242c:	popeq	{r4, r5, r6, pc}
   12430:	ldrb	r3, [r4, #72]	; 0x48
   12434:	ands	r5, r3, #8
   12438:	popne	{r4, r5, r6, pc}
   1243c:	ldr	r0, [r4, #16]
   12440:	bl	11110 <rb_rawbuf_length@plt>
   12444:	cmp	r0, #4096	; 0x1000
   12448:	bge	12458 <fputs@plt+0x121c>
   1244c:	mov	r0, r4
   12450:	pop	{r4, r5, r6, lr}
   12454:	b	12284 <fputs@plt+0x1048>
   12458:	ldrb	r3, [r4, #72]	; 0x48
   1245c:	mov	r1, #1
   12460:	mov	r2, r5
   12464:	ldr	r0, [r4, #32]
   12468:	orr	r3, r3, #4
   1246c:	strb	r3, [r4, #72]	; 0x48
   12470:	mov	r3, r5
   12474:	bl	10fa8 <rb_setselect@plt>
   12478:	mov	r1, r4
   1247c:	pop	{r4, r5, r6, lr}
   12480:	ldr	r0, [r1, #28]
   12484:	b	12488 <fputs@plt+0x124c>
   12488:	ldrb	r3, [r1, #72]	; 0x48
   1248c:	tst	r3, #8
   12490:	bxne	lr
   12494:	tst	r3, #16
   12498:	push	{r4, r5, r6, lr}
   1249c:	mov	r4, r1
   124a0:	mov	r6, r0
   124a4:	beq	124d8 <fputs@plt+0x129c>
   124a8:	bic	r3, r3, #16
   124ac:	ldr	r0, [r1, #28]
   124b0:	strb	r3, [r1, #72]	; 0x48
   124b4:	bl	12614 <fputs@plt+0x13d8>
   124b8:	ldrb	r3, [r4, #72]	; 0x48
   124bc:	tst	r3, #8
   124c0:	beq	124d8 <fputs@plt+0x129c>
   124c4:	pop	{r4, r5, r6, pc}
   124c8:	ldrd	r2, [r4, #40]	; 0x28
   124cc:	adds	r0, r2, r5
   124d0:	adc	r1, r3, r5, asr #31
   124d4:	strd	r0, [r4, #40]	; 0x28
   124d8:	mov	r1, r6
   124dc:	ldr	r0, [r4, #16]
   124e0:	bl	1120c <rb_rawbuf_flush@plt>
   124e4:	subs	r5, r0, #0
   124e8:	bgt	124c8 <fputs@plt+0x128c>
   124ec:	bl	11230 <__errno_location@plt>
   124f0:	cmp	r5, #0
   124f4:	mov	r6, r0
   124f8:	beq	125e4 <fputs@plt+0x13a8>
   124fc:	ldr	r0, [r0]
   12500:	bl	10f78 <rb_ignore_errno@plt>
   12504:	cmp	r0, #0
   12508:	bne	12544 <fputs@plt+0x1308>
   1250c:	ldrb	r3, [r4, #72]	; 0x48
   12510:	cmn	r5, #2
   12514:	movne	r5, #0
   12518:	moveq	r5, #1
   1251c:	tst	r3, r5
   12520:	beq	125f8 <fputs@plt+0x13bc>
   12524:	ldr	r0, [r4, #28]
   12528:	bl	11128 <rb_get_ssl_strerror@plt>
   1252c:	mov	r3, r0
   12530:	ldr	r2, [pc, #204]	; 12604 <fputs@plt+0x13c8>
   12534:	mov	r0, r4
   12538:	mov	r1, #1
   1253c:	pop	{r4, r5, r6, lr}
   12540:	b	11b98 <fputs@plt+0x95c>
   12544:	ldr	r0, [r4, #16]
   12548:	bl	11110 <rb_rawbuf_length@plt>
   1254c:	cmp	r0, #0
   12550:	ble	125cc <fputs@plt+0x1390>
   12554:	cmn	r5, #3
   12558:	mov	r3, r4
   1255c:	ldr	r2, [pc, #164]	; 12608 <fputs@plt+0x13cc>
   12560:	movne	r1, #2
   12564:	ldr	r0, [r4, #28]
   12568:	bne	125dc <fputs@plt+0x13a0>
   1256c:	mov	r1, #1
   12570:	bl	10fa8 <rb_setselect@plt>
   12574:	mov	r3, #0
   12578:	mov	r1, #2
   1257c:	ldr	r0, [r4, #28]
   12580:	mov	r2, r3
   12584:	bl	10fa8 <rb_setselect@plt>
   12588:	ldrb	r3, [r4, #72]	; 0x48
   1258c:	orr	r3, r3, #16
   12590:	strb	r3, [r4, #72]	; 0x48
   12594:	ldrb	r3, [r4, #72]	; 0x48
   12598:	tst	r3, #4
   1259c:	popeq	{r4, r5, r6, pc}
   125a0:	ldr	r0, [r4, #16]
   125a4:	bl	11110 <rb_rawbuf_length@plt>
   125a8:	cmp	r0, #0
   125ac:	popne	{r4, r5, r6, pc}
   125b0:	mov	r1, r4
   125b4:	ldrb	r3, [r4, #72]	; 0x48
   125b8:	bic	r3, r3, #4
   125bc:	strb	r3, [r4, #72]	; 0x48
   125c0:	pop	{r4, r5, r6, lr}
   125c4:	ldr	r0, [r1, #32]
   125c8:	b	12424 <fputs@plt+0x11e8>
   125cc:	ldr	r0, [r4, #28]
   125d0:	mov	r3, #0
   125d4:	mov	r1, #2
   125d8:	mov	r2, r3
   125dc:	bl	10fa8 <rb_setselect@plt>
   125e0:	b	12594 <fputs@plt+0x1358>
   125e4:	ldr	r3, [pc, #32]	; 1260c <fputs@plt+0x13d0>
   125e8:	mov	r1, #1
   125ec:	mov	r0, r4
   125f0:	ldr	r2, [pc, #24]	; 12610 <fputs@plt+0x13d4>
   125f4:	bl	11b98 <fputs@plt+0x95c>
   125f8:	ldr	r0, [r6]
   125fc:	bl	10f3c <strerror@plt>
   12600:	b	1252c <fputs@plt+0x12f0>
   12604:	andeq	r2, r1, r1, ror #28
   12608:	andeq	r2, r1, r8, lsl #9
   1260c:	ldrdeq	r2, [r1], -pc	; <UNPREDICTABLE>
   12610:	andeq	r2, r1, r1, lsl lr
   12614:	push	{r4, lr}
   12618:	subs	r4, r1, #0
   1261c:	popeq	{r4, pc}
   12620:	ldrb	r3, [r4, #72]	; 0x48
   12624:	tst	r3, #8
   12628:	popne	{r4, pc}
   1262c:	tst	r3, #32
   12630:	bne	12640 <fputs@plt+0x1404>
   12634:	mov	r0, r4
   12638:	pop	{r4, lr}
   1263c:	b	12120 <fputs@plt+0xee4>
   12640:	bic	r3, r3, #32
   12644:	ldr	r0, [r4, #28]
   12648:	strb	r3, [r4, #72]	; 0x48
   1264c:	bl	12488 <fputs@plt+0x124c>
   12650:	ldrb	r3, [r4, #72]	; 0x48
   12654:	tst	r3, #8
   12658:	beq	12634 <fputs@plt+0x13f8>
   1265c:	pop	{r4, pc}
   12660:	push	{r0, r1, r4, lr}
   12664:	cmp	r1, #0
   12668:	ldr	r4, [sp, #16]
   1266c:	bne	126c0 <fputs@plt+0x1484>
   12670:	mov	r0, r4
   12674:	bl	11d68 <fputs@plt+0xb2c>
   12678:	mov	r0, r4
   1267c:	bl	11ddc <fputs@plt+0xba0>
   12680:	mov	r3, #79	; 0x4f
   12684:	mov	r2, #5
   12688:	ldr	r0, [r4, #12]
   1268c:	mov	r1, sp
   12690:	strb	r3, [sp]
   12694:	ldr	r3, [r4, #24]
   12698:	str	r3, [sp, #1]
   1269c:	bl	11b38 <fputs@plt+0x8fc>
   126a0:	mov	r1, r4
   126a4:	ldr	r0, [r4, #28]
   126a8:	bl	12614 <fputs@plt+0x13d8>
   126ac:	mov	r1, r4
   126b0:	ldr	r0, [r4, #32]
   126b4:	bl	12424 <fputs@plt+0x11e8>
   126b8:	add	sp, sp, #8
   126bc:	pop	{r4, pc}
   126c0:	mov	r2, #0
   126c4:	mov	r0, r4
   126c8:	mov	r1, r2
   126cc:	bl	11b98 <fputs@plt+0x95c>
   126d0:	b	126b8 <fputs@plt+0x147c>
   126d4:	push	{r0, r1, r4, lr}
   126d8:	cmp	r1, #0
   126dc:	mov	r4, r2
   126e0:	bne	12734 <fputs@plt+0x14f8>
   126e4:	mov	r0, r2
   126e8:	bl	11d68 <fputs@plt+0xb2c>
   126ec:	mov	r0, r4
   126f0:	bl	11ddc <fputs@plt+0xba0>
   126f4:	mov	r3, #79	; 0x4f
   126f8:	mov	r2, #5
   126fc:	ldr	r0, [r4, #12]
   12700:	mov	r1, sp
   12704:	strb	r3, [sp]
   12708:	ldr	r3, [r4, #24]
   1270c:	str	r3, [sp, #1]
   12710:	bl	11b38 <fputs@plt+0x8fc>
   12714:	mov	r1, r4
   12718:	ldr	r0, [r4, #28]
   1271c:	bl	12614 <fputs@plt+0x13d8>
   12720:	mov	r1, r4
   12724:	ldr	r0, [r4, #32]
   12728:	bl	12424 <fputs@plt+0x11e8>
   1272c:	add	sp, sp, #8
   12730:	pop	{r4, pc}
   12734:	cmp	r1, #3
   12738:	ldreq	r2, [pc, #60]	; 1277c <fputs@plt+0x1540>
   1273c:	beq	1276c <fputs@plt+0x1530>
   12740:	cmp	r1, #6
   12744:	ldrne	r2, [pc, #52]	; 12780 <fputs@plt+0x1544>
   12748:	bne	1276c <fputs@plt+0x1530>
   1274c:	ldr	r0, [r4, #28]
   12750:	bl	11128 <rb_get_ssl_strerror@plt>
   12754:	mov	r3, r0
   12758:	ldr	r2, [pc, #36]	; 12784 <fputs@plt+0x1548>
   1275c:	mov	r1, #1
   12760:	mov	r0, r4
   12764:	bl	11b98 <fputs@plt+0x95c>
   12768:	b	1272c <fputs@plt+0x14f0>
   1276c:	mov	r1, #1
   12770:	mov	r0, r4
   12774:	bl	11b98 <fputs@plt+0x95c>
   12778:	b	1272c <fputs@plt+0x14f0>
   1277c:	andeq	r2, r1, r1, ror lr
   12780:	andeq	r2, r1, r9, lsl #29
   12784:	andeq	r2, r1, r1, lsl lr
   12788:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1278c:	mov	r5, r1
   12790:	sub	sp, sp, #20
   12794:	mov	r9, #16384	; 0x4000
   12798:	mov	r8, #4
   1279c:	mov	r0, #40	; 0x28
   127a0:	bl	11724 <fputs@plt+0x4e8>
   127a4:	mov	r4, r0
   127a8:	mov	r0, #16384	; 0x4000
   127ac:	bl	11724 <fputs@plt+0x4e8>
   127b0:	mov	r1, r0
   127b4:	add	r6, r4, #20
   127b8:	ldr	r0, [r5, #16]
   127bc:	mov	r3, r6
   127c0:	mov	r2, #16384	; 0x4000
   127c4:	str	r1, [r4, #12]
   127c8:	str	r9, [r4, #16]
   127cc:	str	r8, [sp]
   127d0:	bl	111ac <rb_recv_fd_buf@plt>
   127d4:	subs	r7, r0, #0
   127d8:	bgt	127fc <fputs@plt+0x15c0>
   127dc:	ldr	r0, [r4, #12]
   127e0:	bl	1168c <fputs@plt+0x450>
   127e4:	mov	r0, r4
   127e8:	bl	1168c <fputs@plt+0x450>
   127ec:	cmp	r7, #0
   127f0:	bne	12834 <fputs@plt+0x15f8>
   127f4:	mov	r0, #0
   127f8:	bl	11224 <exit@plt>
   127fc:	add	r2, r5, #24
   12800:	mov	r1, r4
   12804:	str	r7, [r4, #16]
   12808:	mov	r0, r4
   1280c:	bl	11ab0 <fputs@plt+0x874>
   12810:	mov	r3, #0
   12814:	ldr	r2, [r6], #4
   12818:	cmp	r2, #0
   1281c:	beq	1282c <fputs@plt+0x15f0>
   12820:	add	r3, r3, #1
   12824:	cmp	r3, #4
   12828:	bne	12814 <fputs@plt+0x15d8>
   1282c:	str	r3, [r4, #36]	; 0x24
   12830:	b	1279c <fputs@plt+0x1560>
   12834:	bl	11230 <__errno_location@plt>
   12838:	ldr	r0, [r0]
   1283c:	bl	10f78 <rb_ignore_errno@plt>
   12840:	cmp	r0, #0
   12844:	beq	127f4 <fputs@plt+0x15b8>
   12848:	ldr	r8, [r5, #24]
   1284c:	cmp	r8, #0
   12850:	ldrne	sl, [pc, #1012]	; 12c4c <fputs@plt+0x1a10>
   12854:	ldrne	r9, [r8, #8]
   12858:	bne	12878 <fputs@plt+0x163c>
   1285c:	mov	r3, r5
   12860:	mov	r1, #1
   12864:	ldr	r2, [pc, #996]	; 12c50 <fputs@plt+0x1a14>
   12868:	ldr	r0, [r5, #16]
   1286c:	add	sp, sp, #20
   12870:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12874:	b	10fa8 <rb_setselect@plt>
   12878:	ldr	r4, [r8]
   1287c:	ldr	r1, [r4, #12]
   12880:	ldrb	r3, [r1]
   12884:	cmp	r3, #70	; 0x46
   12888:	beq	12ad0 <fputs@plt+0x1894>
   1288c:	bhi	128d0 <fputs@plt+0x1694>
   12890:	cmp	r3, #65	; 0x41
   12894:	beq	12980 <fputs@plt+0x1744>
   12898:	cmp	r3, #67	; 0x43
   1289c:	beq	12a3c <fputs@plt+0x1800>
   128a0:	add	r1, r5, #24
   128a4:	mov	r0, r8
   128a8:	bl	11838 <fputs@plt+0x5fc>
   128ac:	ldr	r0, [r4, #12]
   128b0:	bl	1168c <fputs@plt+0x450>
   128b4:	mov	r0, r4
   128b8:	bl	1168c <fputs@plt+0x450>
   128bc:	cmp	r9, #0
   128c0:	beq	1285c <fputs@plt+0x1620>
   128c4:	mov	r8, r9
   128c8:	ldr	r9, [r9, #8]
   128cc:	b	12878 <fputs@plt+0x163c>
   128d0:	cmp	r3, #83	; 0x53
   128d4:	beq	12ae8 <fputs@plt+0x18ac>
   128d8:	cmp	r3, #90	; 0x5a
   128dc:	beq	12af4 <fputs@plt+0x18b8>
   128e0:	cmp	r3, #75	; 0x4b
   128e4:	bne	128a0 <fputs@plt+0x1664>
   128e8:	ldrb	r3, [sl, #20]
   128ec:	cmp	r3, #0
   128f0:	beq	129b0 <fputs@plt+0x1774>
   128f4:	add	r6, r1, #2
   128f8:	mov	r0, r6
   128fc:	bl	110b0 <strlen@plt>
   12900:	add	r1, r0, #1
   12904:	add	r7, r6, r1
   12908:	mov	r0, r7
   1290c:	str	r1, [sp, #8]
   12910:	bl	110b0 <strlen@plt>
   12914:	add	r0, r0, #1
   12918:	add	fp, r7, r0
   1291c:	mov	r0, fp
   12920:	bl	110b0 <strlen@plt>
   12924:	ldrb	r2, [fp]
   12928:	add	r3, r0, #1
   1292c:	mov	r0, r6
   12930:	add	r3, fp, r3
   12934:	ldr	r1, [sp, #8]
   12938:	cmp	r2, #0
   1293c:	ldrb	r2, [r3]
   12940:	moveq	fp, #0
   12944:	ldrb	r1, [r6, r1]
   12948:	cmp	r2, #0
   1294c:	mov	r2, fp
   12950:	moveq	r3, #0
   12954:	cmp	r1, #0
   12958:	movne	r1, r7
   1295c:	moveq	r1, r6
   12960:	bl	11218 <rb_setup_ssl_server@plt>
   12964:	cmp	r0, #0
   12968:	bne	128a0 <fputs@plt+0x1664>
   1296c:	mov	r2, #1
   12970:	ldr	r1, [pc, #732]	; 12c54 <fputs@plt+0x1a18>
   12974:	mov	r0, r5
   12978:	bl	11b38 <fputs@plt+0x8fc>
   1297c:	b	128a0 <fputs@plt+0x1664>
   12980:	ldr	r3, [r4, #36]	; 0x24
   12984:	cmp	r3, #2
   12988:	bne	12998 <fputs@plt+0x175c>
   1298c:	ldr	r3, [r4, #16]
   12990:	cmp	r3, #5
   12994:	beq	129a4 <fputs@plt+0x1768>
   12998:	mov	r0, r4
   1299c:	bl	117a8 <fputs@plt+0x56c>
   129a0:	b	128a0 <fputs@plt+0x1664>
   129a4:	ldrb	r3, [sl, #20]
   129a8:	cmp	r3, #0
   129ac:	bne	129c0 <fputs@plt+0x1784>
   129b0:	mov	r1, r4
   129b4:	mov	r0, r5
   129b8:	bl	11e3c <fputs@plt+0xc00>
   129bc:	b	128a0 <fputs@plt+0x1664>
   129c0:	mov	r0, r5
   129c4:	ldr	r1, [r4, #20]
   129c8:	ldr	r2, [r4, #24]
   129cc:	bl	11748 <fputs@plt+0x50c>
   129d0:	ldr	r3, [r4, #12]
   129d4:	mov	r6, r0
   129d8:	ldr	r1, [r3, #1]
   129dc:	bl	11a08 <fputs@plt+0x7cc>
   129e0:	ldrb	r3, [r6, #72]	; 0x48
   129e4:	ldr	r0, [r6, #28]
   129e8:	orr	r3, r3, #1
   129ec:	strb	r3, [r6, #72]	; 0x48
   129f0:	bl	10f48 <rb_get_type@plt>
   129f4:	tst	r0, #64	; 0x40
   129f8:	beq	12a08 <fputs@plt+0x17cc>
   129fc:	mov	r1, #4
   12a00:	ldr	r0, [r6, #28]
   12a04:	bl	110a4 <rb_set_type@plt>
   12a08:	ldr	r0, [r6, #32]
   12a0c:	bl	10f48 <rb_get_type@plt>
   12a10:	cmp	r0, #64	; 0x40
   12a14:	bne	12a24 <fputs@plt+0x17e8>
   12a18:	mov	r1, #4
   12a1c:	ldr	r0, [r6, #32]
   12a20:	bl	110a4 <rb_set_type@plt>
   12a24:	mov	r3, #10
   12a28:	mov	r2, r6
   12a2c:	ldr	r1, [pc, #548]	; 12c58 <fputs@plt+0x1a1c>
   12a30:	ldr	r0, [r4, #20]
   12a34:	bl	111b8 <rb_ssl_start_accepted@plt>
   12a38:	b	128a0 <fputs@plt+0x1664>
   12a3c:	ldr	r3, [r4, #16]
   12a40:	cmp	r3, #5
   12a44:	bne	12998 <fputs@plt+0x175c>
   12a48:	ldrb	r3, [sl, #20]
   12a4c:	cmp	r3, #0
   12a50:	beq	129b0 <fputs@plt+0x1774>
   12a54:	mov	r0, r5
   12a58:	ldr	r1, [r4, #20]
   12a5c:	ldr	r2, [r4, #24]
   12a60:	bl	11748 <fputs@plt+0x50c>
   12a64:	ldr	r3, [r4, #12]
   12a68:	mov	r6, r0
   12a6c:	ldr	r1, [r3, #1]
   12a70:	bl	11a08 <fputs@plt+0x7cc>
   12a74:	ldrb	r3, [r6, #72]	; 0x48
   12a78:	ldr	r0, [r6, #28]
   12a7c:	orr	r3, r3, #1
   12a80:	strb	r3, [r6, #72]	; 0x48
   12a84:	bl	10f48 <rb_get_type@plt>
   12a88:	cmp	r0, #64	; 0x40
   12a8c:	bne	12a9c <fputs@plt+0x1860>
   12a90:	mov	r1, #4
   12a94:	ldr	r0, [r6, #28]
   12a98:	bl	110a4 <rb_set_type@plt>
   12a9c:	ldr	r0, [r6, #32]
   12aa0:	bl	10f48 <rb_get_type@plt>
   12aa4:	cmp	r0, #64	; 0x40
   12aa8:	bne	12ab8 <fputs@plt+0x187c>
   12aac:	mov	r1, #4
   12ab0:	ldr	r0, [r6, #32]
   12ab4:	bl	110a4 <rb_set_type@plt>
   12ab8:	mov	r3, #10
   12abc:	mov	r2, r6
   12ac0:	ldr	r1, [pc, #404]	; 12c5c <fputs@plt+0x1a20>
   12ac4:	ldr	r0, [r4, #20]
   12ac8:	bl	11170 <rb_ssl_start_connected@plt>
   12acc:	b	128a0 <fputs@plt+0x1664>
   12ad0:	ldr	r3, [r4, #16]
   12ad4:	cmp	r3, #5
   12ad8:	ldreq	r3, [r1, #1]
   12adc:	streq	r3, [sl, #16]
   12ae0:	beq	128a0 <fputs@plt+0x1664>
   12ae4:	b	12998 <fputs@plt+0x175c>
   12ae8:	mov	r0, r5
   12aec:	bl	11f38 <fputs@plt+0xcfc>
   12af0:	b	128a0 <fputs@plt+0x1664>
   12af4:	ldr	r3, [r4, #36]	; 0x24
   12af8:	cmp	r3, #2
   12afc:	bne	12998 <fputs@plt+0x175c>
   12b00:	ldr	r3, [r4, #16]
   12b04:	cmp	r3, #5
   12b08:	bls	12998 <fputs@plt+0x175c>
   12b0c:	mov	r0, r5
   12b10:	ldr	r1, [r4, #20]
   12b14:	ldr	r2, [r4, #24]
   12b18:	bl	11748 <fputs@plt+0x50c>
   12b1c:	mov	r6, r0
   12b20:	ldr	r0, [r0, #28]
   12b24:	bl	10f48 <rb_get_type@plt>
   12b28:	cmp	r0, #64	; 0x40
   12b2c:	bne	12b3c <fputs@plt+0x1900>
   12b30:	mov	r1, #4
   12b34:	ldr	r0, [r6, #28]
   12b38:	bl	110a4 <rb_set_type@plt>
   12b3c:	ldr	r0, [r6, #32]
   12b40:	bl	10f48 <rb_get_type@plt>
   12b44:	cmp	r0, #64	; 0x40
   12b48:	bne	12b58 <fputs@plt+0x191c>
   12b4c:	mov	r1, #4
   12b50:	ldr	r0, [r6, #32]
   12b54:	bl	110a4 <rb_set_type@plt>
   12b58:	ldr	r3, [r4, #12]
   12b5c:	mov	r0, r6
   12b60:	ldr	r1, [r3, #1]
   12b64:	bl	11a08 <fputs@plt+0x7cc>
   12b68:	ldr	r3, [r4, #12]
   12b6c:	mov	r0, #112	; 0x70
   12b70:	ldr	fp, [r4, #16]
   12b74:	str	r3, [sp, #8]
   12b78:	ldrb	r3, [r3, #5]
   12b7c:	sub	fp, fp, #6
   12b80:	str	r3, [sp, #12]
   12b84:	ldrb	r3, [r6, #72]	; 0x48
   12b88:	orr	r3, r3, #2
   12b8c:	strb	r3, [r6, #72]	; 0x48
   12b90:	bl	11724 <fputs@plt+0x4e8>
   12b94:	mov	r3, #0
   12b98:	ldr	r2, [pc, #192]	; 12c60 <fputs@plt+0x1a24>
   12b9c:	mov	r1, #1
   12ba0:	str	r0, [r6, #76]	; 0x4c
   12ba4:	mov	r7, r0
   12ba8:	str	r3, [r0, #8]
   12bac:	str	r3, [r0, #20]
   12bb0:	ldr	r3, [pc, #172]	; 12c64 <fputs@plt+0x1a28>
   12bb4:	str	r3, [r0, #32]
   12bb8:	str	r2, [r0, #36]	; 0x24
   12bbc:	mov	r2, #56	; 0x38
   12bc0:	str	r1, [r0, #44]	; 0x2c
   12bc4:	ldr	r1, [pc, #156]	; 12c68 <fputs@plt+0x1a2c>
   12bc8:	bl	111a0 <inflateInit_@plt>
   12bcc:	mov	r3, #0
   12bd0:	ldr	r0, [r6, #76]	; 0x4c
   12bd4:	mov	r1, #1
   12bd8:	str	r3, [r7, #64]	; 0x40
   12bdc:	str	r3, [r7, #76]	; 0x4c
   12be0:	ldr	r3, [pc, #124]	; 12c64 <fputs@plt+0x1a28>
   12be4:	ldr	r2, [pc, #116]	; 12c60 <fputs@plt+0x1a24>
   12be8:	str	r3, [r7, #88]	; 0x58
   12bec:	ldr	r3, [sp, #12]
   12bf0:	str	r2, [r7, #92]	; 0x5c
   12bf4:	ldr	r2, [pc, #108]	; 12c68 <fputs@plt+0x1a2c>
   12bf8:	str	r1, [r7, #100]	; 0x64
   12bfc:	ldr	r1, [sp, #12]
   12c00:	cmp	r3, #10
   12c04:	mov	r3, #56	; 0x38
   12c08:	movcs	r1, #255	; 0xff
   12c0c:	add	r0, r0, r3
   12c10:	bl	11008 <deflateInit_@plt>
   12c14:	cmp	fp, #0
   12c18:	beq	12c30 <fputs@plt+0x19f4>
   12c1c:	ldr	r3, [sp, #8]
   12c20:	mov	r2, fp
   12c24:	mov	r0, r6
   12c28:	add	r1, r3, #6
   12c2c:	bl	1200c <fputs@plt+0xdd0>
   12c30:	mov	r1, r6
   12c34:	ldr	r0, [r6, #28]
   12c38:	bl	12614 <fputs@plt+0x13d8>
   12c3c:	mov	r1, r6
   12c40:	ldr	r0, [r6, #32]
   12c44:	bl	12424 <fputs@plt+0x11e8>
   12c48:	b	128a0 <fputs@plt+0x1664>
   12c4c:	andeq	r4, r2, r0, lsr r1
   12c50:	andeq	r2, r1, r8, lsl #15
   12c54:	muleq	r1, lr, lr
   12c58:	andeq	r2, r1, r0, ror #12
   12c5c:	ldrdeq	r2, [r1], -r4
   12c60:	muleq	r1, r8, r6
   12c64:	andeq	r1, r1, r0, asr #14
   12c68:	andeq	r2, r1, r0, lsr #29
   12c6c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12c70:	mov	r7, r0
   12c74:	ldr	r6, [pc, #72]	; 12cc4 <fputs@plt+0x1a88>
   12c78:	ldr	r5, [pc, #72]	; 12cc8 <fputs@plt+0x1a8c>
   12c7c:	add	r6, pc, r6
   12c80:	add	r5, pc, r5
   12c84:	sub	r6, r6, r5
   12c88:	mov	r8, r1
   12c8c:	mov	r9, r2
   12c90:	bl	10f04 <open@plt-0x20>
   12c94:	asrs	r6, r6, #2
   12c98:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12c9c:	mov	r4, #0
   12ca0:	add	r4, r4, #1
   12ca4:	ldr	r3, [r5], #4
   12ca8:	mov	r2, r9
   12cac:	mov	r1, r8
   12cb0:	mov	r0, r7
   12cb4:	blx	r3
   12cb8:	cmp	r6, r4
   12cbc:	bne	12ca0 <fputs@plt+0x1a64>
   12cc0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12cc4:	andeq	r1, r1, r0, ror r2
   12cc8:	andeq	r1, r1, r8, ror #4
   12ccc:	bx	lr

Disassembly of section .fini:

00012cd0 <.fini>:
   12cd0:	push	{r3, lr}
   12cd4:	pop	{r3, pc}
