
../repos/coreutils/src/shred:     file format elf32-littlearm


Disassembly of section .init:

000110fc <.init>:
   110fc:	push	{r3, lr}
   11100:	bl	11ef8 <__assert_fail@plt+0xa40>
   11104:	pop	{r3, pc}

Disassembly of section .plt:

00011108 <fdopen@plt-0x14>:
   11108:	push	{lr}		; (str lr, [sp, #-4]!)
   1110c:	ldr	lr, [pc, #4]	; 11118 <fdopen@plt-0x4>
   11110:	add	lr, pc, lr
   11114:	ldr	pc, [lr, #8]!
   11118:	andeq	ip, r1, r8, ror #29

0001111c <fdopen@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #28, 20	; 0x1c000
   11124:	ldr	pc, [ip, #3816]!	; 0xee8

00011128 <calloc@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #28, 20	; 0x1c000
   11130:	ldr	pc, [ip, #3808]!	; 0xee0

00011134 <fputs_unlocked@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #28, 20	; 0x1c000
   1113c:	ldr	pc, [ip, #3800]!	; 0xed8

00011140 <raise@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #28, 20	; 0x1c000
   11148:	ldr	pc, [ip, #3792]!	; 0xed0

0001114c <fsync@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #28, 20	; 0x1c000
   11154:	ldr	pc, [ip, #3784]!	; 0xec8

00011158 <strcmp@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #28, 20	; 0x1c000
   11160:	ldr	pc, [ip, #3776]!	; 0xec0

00011164 <fflush@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #28, 20	; 0x1c000
   1116c:	ldr	pc, [ip, #3768]!	; 0xeb8

00011170 <memmove@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #28, 20	; 0x1c000
   11178:	ldr	pc, [ip, #3760]!	; 0xeb0

0001117c <free@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #28, 20	; 0x1c000
   11184:	ldr	pc, [ip, #3752]!	; 0xea8

00011188 <_exit@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #28, 20	; 0x1c000
   11190:	ldr	pc, [ip, #3744]!	; 0xea0

00011194 <memcpy@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #28, 20	; 0x1c000
   1119c:	ldr	pc, [ip, #3736]!	; 0xe98

000111a0 <__strtoull_internal@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #28, 20	; 0x1c000
   111a8:	ldr	pc, [ip, #3728]!	; 0xe90

000111ac <mbsinit@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #28, 20	; 0x1c000
   111b4:	ldr	pc, [ip, #3720]!	; 0xe88

000111b8 <time@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #28, 20	; 0x1c000
   111c0:	ldr	pc, [ip, #3712]!	; 0xe80

000111c4 <ftruncate64@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #28, 20	; 0x1c000
   111cc:	ldr	pc, [ip, #3704]!	; 0xe78

000111d0 <memcmp@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #28, 20	; 0x1c000
   111d8:	ldr	pc, [ip, #3696]!	; 0xe70

000111dc <fputc_unlocked@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #28, 20	; 0x1c000
   111e4:	ldr	pc, [ip, #3688]!	; 0xe68

000111e8 <dcgettext@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #28, 20	; 0x1c000
   111f0:	ldr	pc, [ip, #3680]!	; 0xe60

000111f4 <unlink@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #28, 20	; 0x1c000
   111fc:	ldr	pc, [ip, #3672]!	; 0xe58

00011200 <realloc@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #28, 20	; 0x1c000
   11208:	ldr	pc, [ip, #3664]!	; 0xe50

0001120c <textdomain@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #28, 20	; 0x1c000
   11214:	ldr	pc, [ip, #3656]!	; 0xe48

00011218 <__fxstatat64@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #28, 20	; 0x1c000
   11220:	ldr	pc, [ip, #3648]!	; 0xe40

00011224 <iswprint@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #28, 20	; 0x1c000
   1122c:	ldr	pc, [ip, #3640]!	; 0xe38

00011230 <__fxstat64@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #28, 20	; 0x1c000
   11238:	ldr	pc, [ip, #3632]!	; 0xe30

0001123c <__memcpy_chk@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #28, 20	; 0x1c000
   11244:	ldr	pc, [ip, #3624]!	; 0xe28

00011248 <fwrite@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #28, 20	; 0x1c000
   11250:	ldr	pc, [ip, #3616]!	; 0xe20

00011254 <ioctl@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #28, 20	; 0x1c000
   1125c:	ldr	pc, [ip, #3608]!	; 0xe18

00011260 <lseek64@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #28, 20	; 0x1c000
   11268:	ldr	pc, [ip, #3600]!	; 0xe10

0001126c <__ctype_get_mb_cur_max@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #28, 20	; 0x1c000
   11274:	ldr	pc, [ip, #3592]!	; 0xe08

00011278 <__strcpy_chk@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #28, 20	; 0x1c000
   11280:	ldr	pc, [ip, #3584]!	; 0xe00

00011284 <__fpending@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #28, 20	; 0x1c000
   1128c:	ldr	pc, [ip, #3576]!	; 0xdf8

00011290 <mbrtowc@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #28, 20	; 0x1c000
   11298:	ldr	pc, [ip, #3568]!	; 0xdf0

0001129c <error@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #28, 20	; 0x1c000
   112a4:	ldr	pc, [ip, #3560]!	; 0xde8

000112a8 <open64@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #28, 20	; 0x1c000
   112b0:	ldr	pc, [ip, #3552]!	; 0xde0

000112b4 <getenv@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #28, 20	; 0x1c000
   112bc:	ldr	pc, [ip, #3544]!	; 0xdd8

000112c0 <malloc@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #28, 20	; 0x1c000
   112c8:	ldr	pc, [ip, #3536]!	; 0xdd0

000112cc <__libc_start_main@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #28, 20	; 0x1c000
   112d4:	ldr	pc, [ip, #3528]!	; 0xdc8

000112d8 <__freading@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #28, 20	; 0x1c000
   112e0:	ldr	pc, [ip, #3520]!	; 0xdc0

000112e4 <__gmon_start__@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #28, 20	; 0x1c000
   112ec:	ldr	pc, [ip, #3512]!	; 0xdb8

000112f0 <getopt_long@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #28, 20	; 0x1c000
   112f8:	ldr	pc, [ip, #3504]!	; 0xdb0

000112fc <__ctype_b_loc@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #28, 20	; 0x1c000
   11304:	ldr	pc, [ip, #3496]!	; 0xda8

00011308 <exit@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #28, 20	; 0x1c000
   11310:	ldr	pc, [ip, #3488]!	; 0xda0

00011314 <strlen@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #28, 20	; 0x1c000
   1131c:	ldr	pc, [ip, #3480]!	; 0xd98

00011320 <strchr@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #28, 20	; 0x1c000
   11328:	ldr	pc, [ip, #3472]!	; 0xd90

0001132c <getpagesize@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #28, 20	; 0x1c000
   11334:	ldr	pc, [ip, #3464]!	; 0xd88

00011338 <__errno_location@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #28, 20	; 0x1c000
   11340:	ldr	pc, [ip, #3456]!	; 0xd80

00011344 <__sprintf_chk@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #28, 20	; 0x1c000
   1134c:	ldr	pc, [ip, #3448]!	; 0xd78

00011350 <__cxa_atexit@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #28, 20	; 0x1c000
   11358:	ldr	pc, [ip, #3440]!	; 0xd70

0001135c <setvbuf@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #28, 20	; 0x1c000
   11364:	ldr	pc, [ip, #3432]!	; 0xd68

00011368 <memset@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #28, 20	; 0x1c000
   11370:	ldr	pc, [ip, #3424]!	; 0xd60

00011374 <renameat2@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #28, 20	; 0x1c000
   1137c:	ldr	pc, [ip, #3416]!	; 0xd58

00011380 <__printf_chk@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #28, 20	; 0x1c000
   11388:	ldr	pc, [ip, #3408]!	; 0xd50

0001138c <write@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #28, 20	; 0x1c000
   11394:	ldr	pc, [ip, #3400]!	; 0xd48

00011398 <fileno@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #28, 20	; 0x1c000
   113a0:	ldr	pc, [ip, #3392]!	; 0xd40

000113a4 <__fprintf_chk@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #28, 20	; 0x1c000
   113ac:	ldr	pc, [ip, #3384]!	; 0xd38

000113b0 <fclose@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #28, 20	; 0x1c000
   113b8:	ldr	pc, [ip, #3376]!	; 0xd30

000113bc <fseeko64@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #28, 20	; 0x1c000
   113c4:	ldr	pc, [ip, #3368]!	; 0xd28

000113c8 <fcntl64@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #28, 20	; 0x1c000
   113d0:	ldr	pc, [ip, #3360]!	; 0xd20

000113d4 <__overflow@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #28, 20	; 0x1c000
   113dc:	ldr	pc, [ip, #3352]!	; 0xd18

000113e0 <setlocale@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #28, 20	; 0x1c000
   113e8:	ldr	pc, [ip, #3344]!	; 0xd10

000113ec <__explicit_bzero_chk@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #28, 20	; 0x1c000
   113f4:	ldr	pc, [ip, #3336]!	; 0xd08

000113f8 <strrchr@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #28, 20	; 0x1c000
   11400:	ldr	pc, [ip, #3328]!	; 0xd00

00011404 <nl_langinfo@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #28, 20	; 0x1c000
   1140c:	ldr	pc, [ip, #3320]!	; 0xcf8

00011410 <localeconv@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #28, 20	; 0x1c000
   11418:	ldr	pc, [ip, #3312]!	; 0xcf0

0001141c <fopen64@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #28, 20	; 0x1c000
   11424:	ldr	pc, [ip, #3304]!	; 0xce8

00011428 <renameat@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #28, 20	; 0x1c000
   11430:	ldr	pc, [ip, #3296]!	; 0xce0

00011434 <bindtextdomain@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #28, 20	; 0x1c000
   1143c:	ldr	pc, [ip, #3288]!	; 0xcd8

00011440 <fread_unlocked@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #28, 20	; 0x1c000
   11448:	ldr	pc, [ip, #3280]!	; 0xcd0

0001144c <getrandom@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #28, 20	; 0x1c000
   11454:	ldr	pc, [ip, #3272]!	; 0xcc8

00011458 <aligned_alloc@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #28, 20	; 0x1c000
   11460:	ldr	pc, [ip, #3264]!	; 0xcc0

00011464 <sync@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #28, 20	; 0x1c000
   1146c:	ldr	pc, [ip, #3256]!	; 0xcb8

00011470 <chmod@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #28, 20	; 0x1c000
   11478:	ldr	pc, [ip, #3248]!	; 0xcb0

0001147c <isatty@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #28, 20	; 0x1c000
   11484:	ldr	pc, [ip, #3240]!	; 0xca8

00011488 <strncmp@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #28, 20	; 0x1c000
   11490:	ldr	pc, [ip, #3232]!	; 0xca0

00011494 <fdatasync@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #28, 20	; 0x1c000
   1149c:	ldr	pc, [ip, #3224]!	; 0xc98

000114a0 <abort@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #28, 20	; 0x1c000
   114a8:	ldr	pc, [ip, #3216]!	; 0xc90

000114ac <close@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #28, 20	; 0x1c000
   114b4:	ldr	pc, [ip, #3208]!	; 0xc88

000114b8 <__assert_fail@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #28, 20	; 0x1c000
   114c0:	ldr	pc, [ip, #3200]!	; 0xc80

Disassembly of section .text:

000114c8 <.text>:
   114c8:	mov	r2, #0
   114cc:	mov	r3, #0
   114d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   114d4:	strd	r6, [sp, #8]
   114d8:	mov	r7, r0
   114dc:	mov	r6, r1
   114e0:	strd	r8, [sp, #16]
   114e4:	movw	r5, #53756	; 0xd1fc
   114e8:	movt	r5, #1
   114ec:	strd	sl, [sp, #24]
   114f0:	movw	sl, #50616	; 0xc5b8
   114f4:	movt	sl, #1
   114f8:	str	lr, [sp, #32]
   114fc:	sub	sp, sp, #108	; 0x6c
   11500:	movw	r9, #57784	; 0xe1b8
   11504:	movt	r9, #2
   11508:	ldr	r0, [r1]
   1150c:	mov	fp, #0
   11510:	strd	r2, [sp, #80]	; 0x50
   11514:	add	r8, sl, #304	; 0x130
   11518:	strd	r2, [sp, #88]	; 0x58
   1151c:	strd	r2, [sp, #96]	; 0x60
   11520:	bl	151a0 <__assert_fail@plt+0x3ce8>
   11524:	movw	r1, #53068	; 0xcf4c
   11528:	movt	r1, #1
   1152c:	mov	r0, #6
   11530:	bl	113e0 <setlocale@plt>
   11534:	movw	r1, #53608	; 0xd168
   11538:	movt	r1, #1
   1153c:	movw	r0, #53428	; 0xd0b4
   11540:	movt	r0, #1
   11544:	bl	11434 <bindtextdomain@plt>
   11548:	movw	r0, #53428	; 0xd0b4
   1154c:	movt	r0, #1
   11550:	bl	1120c <textdomain@plt>
   11554:	movw	r0, #15096	; 0x3af8
   11558:	movt	r0, #1
   1155c:	bl	1c594 <__assert_fail@plt+0xb0dc>
   11560:	mov	r1, #3
   11564:	mvn	r2, #0
   11568:	str	fp, [sp, #28]
   1156c:	mvn	r3, #0
   11570:	str	sl, [sp, #36]	; 0x24
   11574:	str	r1, [sp, #84]	; 0x54
   11578:	strd	r2, [sp, #88]	; 0x58
   1157c:	mov	r4, #0
   11580:	mov	r3, r8
   11584:	mov	r2, r5
   11588:	mov	r1, r6
   1158c:	mov	r0, r7
   11590:	str	r4, [sp]
   11594:	bl	112f0 <getopt_long@plt>
   11598:	cmn	r0, #1
   1159c:	beq	117a4 <__assert_fail@plt+0x2ec>
   115a0:	cmp	r0, #115	; 0x73
   115a4:	beq	1173c <__assert_fail@plt+0x284>
   115a8:	ble	11618 <__assert_fail@plt+0x160>
   115ac:	cmp	r0, #120	; 0x78
   115b0:	beq	11798 <__assert_fail@plt+0x2e0>
   115b4:	bgt	1164c <__assert_fail@plt+0x194>
   115b8:	cmp	r0, #117	; 0x75
   115bc:	bne	11638 <__assert_fail@plt+0x180>
   115c0:	ldr	r1, [r9]
   115c4:	cmp	r1, #0
   115c8:	moveq	r3, #3
   115cc:	streq	r3, [sp, #96]	; 0x60
   115d0:	beq	1157c <__assert_fail@plt+0xc4>
   115d4:	movw	r2, #57684	; 0xe154
   115d8:	movt	r2, #2
   115dc:	ldr	r3, [pc, #2252]	; 11eb0 <__assert_fail@plt+0x9f8>
   115e0:	mov	r0, #1
   115e4:	ldr	ip, [r2]
   115e8:	mov	r2, #4
   115ec:	stm	sp, {r2, ip}
   115f0:	add	r2, r3, #12
   115f4:	str	r0, [sp, #8]
   115f8:	movw	r0, #53696	; 0xd1c0
   115fc:	movt	r0, #1
   11600:	bl	13864 <__assert_fail@plt+0x23ac>
   11604:	ldr	r3, [sp, #36]	; 0x24
   11608:	add	r0, r3, r0, lsl #2
   1160c:	ldr	r3, [r0, #276]	; 0x114
   11610:	str	r3, [sp, #96]	; 0x60
   11614:	b	1157c <__assert_fail@plt+0xc4>
   11618:	cmn	r0, #2
   1161c:	beq	11dec <__assert_fail@plt+0x934>
   11620:	ble	116bc <__assert_fail@plt+0x204>
   11624:	cmp	r0, #102	; 0x66
   11628:	bne	11660 <__assert_fail@plt+0x1a8>
   1162c:	mov	r3, #1
   11630:	strb	r3, [sp, #80]	; 0x50
   11634:	b	1157c <__assert_fail@plt+0xc4>
   11638:	cmp	r0, #118	; 0x76
   1163c:	bne	11de4 <__assert_fail@plt+0x92c>
   11640:	mov	r3, #1
   11644:	strb	r3, [sp, #100]	; 0x64
   11648:	b	1157c <__assert_fail@plt+0xc4>
   1164c:	cmp	r0, #122	; 0x7a
   11650:	bne	11704 <__assert_fail@plt+0x24c>
   11654:	mov	r3, #1
   11658:	strb	r3, [sp, #102]	; 0x66
   1165c:	b	1157c <__assert_fail@plt+0xc4>
   11660:	cmp	r0, #110	; 0x6e
   11664:	bne	11de4 <__assert_fail@plt+0x92c>
   11668:	ldr	r3, [r9]
   1166c:	mov	r2, #5
   11670:	movw	r1, #53632	; 0xd180
   11674:	movt	r1, #1
   11678:	mov	r0, r4
   1167c:	mov	fp, #0
   11680:	mov	sl, r3
   11684:	bl	111e8 <dcgettext@plt>
   11688:	movw	r1, #53068	; 0xcf4c
   1168c:	movt	r1, #1
   11690:	mov	r2, #0
   11694:	mov	r3, #0
   11698:	str	r0, [sp, #12]
   1169c:	mov	r0, sl
   116a0:	mvn	sl, #-1073741824	; 0xc0000000
   116a4:	str	r4, [sp, #16]
   116a8:	strd	sl, [sp]
   116ac:	str	r1, [sp, #8]
   116b0:	bl	1aa08 <__assert_fail@plt+0x9550>
   116b4:	str	r0, [sp, #84]	; 0x54
   116b8:	b	1157c <__assert_fail@plt+0xc4>
   116bc:	cmn	r0, #3
   116c0:	bne	11de4 <__assert_fail@plt+0x92c>
   116c4:	movw	r2, #53744	; 0xd1f0
   116c8:	movt	r2, #1
   116cc:	movw	r3, #57680	; 0xe150
   116d0:	movt	r3, #2
   116d4:	movw	r0, #57780	; 0xe1b4
   116d8:	movt	r0, #2
   116dc:	stm	sp, {r2, r4}
   116e0:	movw	r1, #51520	; 0xc940
   116e4:	movt	r1, #1
   116e8:	ldr	r0, [r0]
   116ec:	movw	r2, #53424	; 0xd0b0
   116f0:	movt	r2, #1
   116f4:	ldr	r3, [r3]
   116f8:	bl	1a094 <__assert_fail@plt+0x8bdc>
   116fc:	mov	r0, r4
   11700:	bl	11308 <exit@plt>
   11704:	cmp	r0, #256	; 0x100
   11708:	bne	11de4 <__assert_fail@plt+0x92c>
   1170c:	ldr	r0, [sp, #28]
   11710:	ldr	r3, [r9]
   11714:	cmp	r0, #0
   11718:	beq	11734 <__assert_fail@plt+0x27c>
   1171c:	mov	r1, r3
   11720:	str	r3, [sp, #28]
   11724:	bl	11158 <strcmp@plt>
   11728:	cmp	r0, #0
   1172c:	ldr	r3, [sp, #28]
   11730:	bne	11e8c <__assert_fail@plt+0x9d4>
   11734:	str	r3, [sp, #28]
   11738:	b	1157c <__assert_fail@plt+0xc4>
   1173c:	ldr	r3, [r9]
   11740:	mov	r2, #5
   11744:	movw	r1, #53708	; 0xd1cc
   11748:	movt	r1, #1
   1174c:	mov	r0, r4
   11750:	mvn	sl, #0
   11754:	mvn	fp, #-2147483648	; 0x80000000
   11758:	str	r3, [sp, #32]
   1175c:	bl	111e8 <dcgettext@plt>
   11760:	ldr	r3, [sp, #32]
   11764:	movw	r2, #53728	; 0xd1e0
   11768:	movt	r2, #1
   1176c:	mov	r1, r4
   11770:	strd	sl, [sp]
   11774:	str	r2, [sp, #8]
   11778:	mov	r2, #0
   1177c:	str	r0, [sp, #12]
   11780:	str	r4, [sp, #16]
   11784:	mov	r0, r3
   11788:	mov	r3, #0
   1178c:	bl	1a8c4 <__assert_fail@plt+0x940c>
   11790:	strd	r0, [sp, #88]	; 0x58
   11794:	b	1157c <__assert_fail@plt+0xc4>
   11798:	mov	r3, #1
   1179c:	strb	r3, [sp, #101]	; 0x65
   117a0:	b	1157c <__assert_fail@plt+0xc4>
   117a4:	movw	r3, #57768	; 0xe1a8
   117a8:	movt	r3, #2
   117ac:	ldr	fp, [sp, #28]
   117b0:	ldr	r9, [r3]
   117b4:	subs	r3, r7, r9
   117b8:	str	r3, [sp, #40]	; 0x28
   117bc:	beq	11dbc <__assert_fail@plt+0x904>
   117c0:	mov	r1, r0
   117c4:	mov	r0, fp
   117c8:	bl	18ce0 <__assert_fail@plt+0x7828>
   117cc:	movw	r3, #57792	; 0xe1c0
   117d0:	movt	r3, #2
   117d4:	cmp	r0, #0
   117d8:	mov	r7, r0
   117dc:	str	r0, [r3]
   117e0:	str	r3, [sp, #44]	; 0x2c
   117e4:	beq	11e44 <__assert_fail@plt+0x98c>
   117e8:	movw	r0, #8112	; 0x1fb0
   117ec:	movt	r0, #1
   117f0:	bl	1c594 <__assert_fail@plt+0xb0dc>
   117f4:	ldr	r3, [sp, #40]	; 0x28
   117f8:	cmp	r3, #0
   117fc:	ble	1199c <__assert_fail@plt+0x4e4>
   11800:	mov	r3, #1
   11804:	ldr	r8, [pc, #1704]	; 11eb4 <__assert_fail@plt+0x9fc>
   11808:	add	r9, r6, r9, lsl #2
   1180c:	str	r3, [sp, #28]
   11810:	str	r4, [sp, #32]
   11814:	b	11880 <__assert_fail@plt+0x3c8>
   11818:	ldr	r3, [sp, #44]	; 0x2c
   1181c:	mov	r1, #3
   11820:	mov	r0, #1
   11824:	ldr	r6, [r3]
   11828:	bl	13dc0 <__assert_fail@plt+0x2908>
   1182c:	cmp	r0, #0
   11830:	blt	119dc <__assert_fail@plt+0x524>
   11834:	tst	r0, #1024	; 0x400
   11838:	bne	1196c <__assert_fail@plt+0x4b4>
   1183c:	mov	r2, r6
   11840:	add	r3, sp, #80	; 0x50
   11844:	mov	r1, r5
   11848:	mov	r0, #1
   1184c:	bl	12aa0 <__assert_fail@plt+0x15e8>
   11850:	ldr	r3, [sp, #28]
   11854:	and	r3, r3, r0
   11858:	str	r3, [sp, #28]
   1185c:	ldr	r3, [sp, #32]
   11860:	mov	r0, r5
   11864:	add	r3, r3, #1
   11868:	mov	r4, r3
   1186c:	str	r3, [sp, #32]
   11870:	bl	13fe8 <__assert_fail@plt+0x2b30>
   11874:	ldr	r2, [sp, #40]	; 0x28
   11878:	cmp	r2, r4
   1187c:	beq	119a4 <__assert_fail@plt+0x4ec>
   11880:	mov	r1, #3
   11884:	mov	r0, #0
   11888:	ldr	r2, [r9]
   1188c:	bl	18364 <__assert_fail@plt+0x6eac>
   11890:	bl	1a834 <__assert_fail@plt+0x937c>
   11894:	ldr	r6, [r9], #4
   11898:	mov	r5, r0
   1189c:	movw	r1, #53792	; 0xd220
   118a0:	movt	r1, #1
   118a4:	mov	r0, r6
   118a8:	bl	11158 <strcmp@plt>
   118ac:	subs	r4, r0, #0
   118b0:	beq	11818 <__assert_fail@plt+0x360>
   118b4:	ldr	r3, [sp, #44]	; 0x2c
   118b8:	movw	r1, #257	; 0x101
   118bc:	mov	r0, r6
   118c0:	ldr	r7, [r3]
   118c4:	bl	13fa8 <__assert_fail@plt+0x2af0>
   118c8:	subs	r4, r0, #0
   118cc:	blt	11924 <__assert_fail@plt+0x46c>
   118d0:	mov	r2, r7
   118d4:	add	r3, sp, #80	; 0x50
   118d8:	mov	r1, r5
   118dc:	mov	r0, r4
   118e0:	bl	12aa0 <__assert_fail@plt+0x15e8>
   118e4:	str	r0, [sp, #36]	; 0x24
   118e8:	mov	r0, r4
   118ec:	bl	114ac <close@plt>
   118f0:	subs	r7, r0, #0
   118f4:	bne	119c8 <__assert_fail@plt+0x510>
   118f8:	ldr	r3, [sp, #36]	; 0x24
   118fc:	cmp	r3, #0
   11900:	beq	11910 <__assert_fail@plt+0x458>
   11904:	ldr	r3, [sp, #96]	; 0x60
   11908:	cmp	r3, #0
   1190c:	bne	11a3c <__assert_fail@plt+0x584>
   11910:	ldr	r2, [sp, #28]
   11914:	ldr	r3, [sp, #36]	; 0x24
   11918:	and	r3, r3, r2
   1191c:	str	r3, [sp, #28]
   11920:	b	1185c <__assert_fail@plt+0x3a4>
   11924:	bl	11338 <__errno_location@plt>
   11928:	ldr	r4, [r0]
   1192c:	mov	sl, r0
   11930:	cmp	r4, #13
   11934:	beq	11a14 <__assert_fail@plt+0x55c>
   11938:	movw	r1, #53864	; 0xd268
   1193c:	movt	r1, #1
   11940:	mov	r2, #5
   11944:	mov	r0, #0
   11948:	bl	111e8 <dcgettext@plt>
   1194c:	mov	r2, r0
   11950:	mov	r3, r5
   11954:	mov	r1, r4
   11958:	mov	r0, #0
   1195c:	bl	1129c <error@plt>
   11960:	mov	r3, #0
   11964:	str	r3, [sp, #36]	; 0x24
   11968:	b	11910 <__assert_fail@plt+0x458>
   1196c:	mov	r2, #5
   11970:	movw	r1, #53816	; 0xd238
   11974:	movt	r1, #1
   11978:	mov	r0, r4
   1197c:	bl	111e8 <dcgettext@plt>
   11980:	mov	r2, r0
   11984:	mov	r3, r5
   11988:	mov	r0, r4
   1198c:	mov	r1, r4
   11990:	bl	1129c <error@plt>
   11994:	mov	r0, r4
   11998:	b	11850 <__assert_fail@plt+0x398>
   1199c:	mov	r3, #1
   119a0:	str	r3, [sp, #28]
   119a4:	ldr	r3, [sp, #28]
   119a8:	eor	r0, r3, #1
   119ac:	add	sp, sp, #108	; 0x6c
   119b0:	ldrd	r4, [sp]
   119b4:	ldrd	r6, [sp, #8]
   119b8:	ldrd	r8, [sp, #16]
   119bc:	ldrd	sl, [sp, #24]
   119c0:	add	sp, sp, #32
   119c4:	pop	{pc}		; (ldr pc, [sp], #4)
   119c8:	bl	11338 <__errno_location@plt>
   119cc:	movw	r1, #53896	; 0xd288
   119d0:	movt	r1, #1
   119d4:	ldr	r4, [r0]
   119d8:	b	11940 <__assert_fail@plt+0x488>
   119dc:	bl	11338 <__errno_location@plt>
   119e0:	ldr	r6, [r0]
   119e4:	mov	r2, #5
   119e8:	movw	r1, #53796	; 0xd224
   119ec:	movt	r1, #1
   119f0:	mov	r0, r4
   119f4:	bl	111e8 <dcgettext@plt>
   119f8:	mov	r2, r0
   119fc:	mov	r3, r5
   11a00:	mov	r0, r4
   11a04:	mov	r1, r6
   11a08:	bl	1129c <error@plt>
   11a0c:	mov	r0, r4
   11a10:	b	11850 <__assert_fail@plt+0x398>
   11a14:	ldrb	r3, [sp, #80]	; 0x50
   11a18:	cmp	r3, #0
   11a1c:	beq	11938 <__assert_fail@plt+0x480>
   11a20:	mov	r1, #128	; 0x80
   11a24:	mov	r0, r6
   11a28:	bl	11470 <chmod@plt>
   11a2c:	cmp	r0, #0
   11a30:	beq	11cb0 <__assert_fail@plt+0x7f8>
   11a34:	ldr	r4, [sl]
   11a38:	b	11938 <__assert_fail@plt+0x480>
   11a3c:	mov	r0, r6
   11a40:	bl	1a834 <__assert_fail@plt+0x937c>
   11a44:	mov	sl, r0
   11a48:	str	r0, [sp, #48]	; 0x30
   11a4c:	bl	13a04 <__assert_fail@plt+0x254c>
   11a50:	mov	r4, r0
   11a54:	mov	r0, sl
   11a58:	bl	13be4 <__assert_fail@plt+0x272c>
   11a5c:	mov	r2, r0
   11a60:	mov	r1, #3
   11a64:	mov	r0, r7
   11a68:	str	r2, [sp, #68]	; 0x44
   11a6c:	bl	18364 <__assert_fail@plt+0x6eac>
   11a70:	bl	1a834 <__assert_fail@plt+0x937c>
   11a74:	ldr	r3, [sp, #96]	; 0x60
   11a78:	str	r0, [sp, #60]	; 0x3c
   11a7c:	cmp	r3, #3
   11a80:	mvnne	r3, #0
   11a84:	strne	r3, [sp, #52]	; 0x34
   11a88:	beq	11c24 <__assert_fail@plt+0x76c>
   11a8c:	ldrb	r3, [sp, #100]	; 0x64
   11a90:	cmp	r3, #0
   11a94:	bne	11bbc <__assert_fail@plt+0x704>
   11a98:	ldr	r3, [sp, #96]	; 0x60
   11a9c:	cmp	r3, #1
   11aa0:	beq	11b78 <__assert_fail@plt+0x6c0>
   11aa4:	movw	r3, #53948	; 0xd2bc
   11aa8:	movt	r3, #1
   11aac:	mov	r0, r4
   11ab0:	str	r3, [sp, #72]	; 0x48
   11ab4:	ldr	r3, [sp, #36]	; 0x24
   11ab8:	str	r3, [sp, #56]	; 0x38
   11abc:	bl	13a54 <__assert_fail@plt+0x259c>
   11ac0:	sub	r3, r0, #1
   11ac4:	add	r7, r4, r0
   11ac8:	str	r5, [sp, #64]	; 0x40
   11acc:	mov	r5, r3
   11ad0:	str	r9, [sp, #76]	; 0x4c
   11ad4:	cmn	r5, #1
   11ad8:	add	r2, r5, #1
   11adc:	beq	11b70 <__assert_fail@plt+0x6b8>
   11ae0:	mov	r1, #48	; 0x30
   11ae4:	mov	r0, r4
   11ae8:	mov	sl, r1
   11aec:	bl	11368 <memset@plt>
   11af0:	mov	r3, #0
   11af4:	strb	r3, [r7], #-1
   11af8:	mov	r1, #1
   11afc:	mvn	r2, #99	; 0x63
   11b00:	ldr	r3, [sp, #48]	; 0x30
   11b04:	mov	r0, r2
   11b08:	str	r1, [sp]
   11b0c:	mov	r1, r6
   11b10:	bl	198f4 <__assert_fail@plt+0x843c>
   11b14:	cmp	r0, #0
   11b18:	beq	11c38 <__assert_fail@plt+0x780>
   11b1c:	bl	11338 <__errno_location@plt>
   11b20:	ldr	r3, [r0]
   11b24:	cmp	r3, #17
   11b28:	bne	11ca8 <__assert_fail@plt+0x7f0>
   11b2c:	mov	fp, r7
   11b30:	b	11b44 <__assert_fail@plt+0x68c>
   11b34:	cmp	r4, fp
   11b38:	strb	sl, [r9, #1]
   11b3c:	beq	11ca8 <__assert_fail@plt+0x7f0>
   11b40:	mov	fp, r9
   11b44:	mov	r9, fp
   11b48:	mov	r0, r8
   11b4c:	ldrb	r1, [r9], #-1
   11b50:	bl	11320 <strchr@plt>
   11b54:	cmp	r0, #0
   11b58:	beq	11df4 <__assert_fail@plt+0x93c>
   11b5c:	ldrb	r3, [r0, #1]
   11b60:	cmp	r3, #0
   11b64:	beq	11b34 <__assert_fail@plt+0x67c>
   11b68:	strb	r3, [fp]
   11b6c:	b	11af8 <__assert_fail@plt+0x640>
   11b70:	ldr	r5, [sp, #64]	; 0x40
   11b74:	ldr	r9, [sp, #76]	; 0x4c
   11b78:	mov	r0, r6
   11b7c:	bl	111f4 <unlink@plt>
   11b80:	subs	r4, r0, #0
   11b84:	bne	11be8 <__assert_fail@plt+0x730>
   11b88:	ldrb	r3, [sp, #100]	; 0x64
   11b8c:	cmp	r3, #0
   11b90:	bne	11d94 <__assert_fail@plt+0x8dc>
   11b94:	ldr	r4, [sp, #52]	; 0x34
   11b98:	cmp	r4, #0
   11b9c:	bge	11d30 <__assert_fail@plt+0x878>
   11ba0:	ldr	r0, [sp, #48]	; 0x30
   11ba4:	bl	13fe8 <__assert_fail@plt+0x2b30>
   11ba8:	ldr	r0, [sp, #68]	; 0x44
   11bac:	bl	13fe8 <__assert_fail@plt+0x2b30>
   11bb0:	ldr	r0, [sp, #60]	; 0x3c
   11bb4:	bl	13fe8 <__assert_fail@plt+0x2b30>
   11bb8:	b	11910 <__assert_fail@plt+0x458>
   11bbc:	mov	r2, #5
   11bc0:	movw	r1, #53916	; 0xd29c
   11bc4:	movt	r1, #1
   11bc8:	mov	r0, #0
   11bcc:	bl	111e8 <dcgettext@plt>
   11bd0:	mov	r1, #0
   11bd4:	mov	r2, r0
   11bd8:	mov	r3, r5
   11bdc:	mov	r0, r1
   11be0:	bl	1129c <error@plt>
   11be4:	b	11a98 <__assert_fail@plt+0x5e0>
   11be8:	bl	11338 <__errno_location@plt>
   11bec:	ldr	r4, [r0]
   11bf0:	mov	r2, #5
   11bf4:	movw	r1, #53968	; 0xd2d0
   11bf8:	movt	r1, #1
   11bfc:	mov	r0, #0
   11c00:	bl	111e8 <dcgettext@plt>
   11c04:	mov	r2, r0
   11c08:	mov	r3, r5
   11c0c:	mov	r0, #0
   11c10:	mov	r1, r4
   11c14:	bl	1129c <error@plt>
   11c18:	mov	r3, #0
   11c1c:	str	r3, [sp, #36]	; 0x24
   11c20:	b	11b94 <__assert_fail@plt+0x6dc>
   11c24:	mov	r1, #18688	; 0x4900
   11c28:	ldr	r0, [sp, #68]	; 0x44
   11c2c:	bl	13fa8 <__assert_fail@plt+0x2af0>
   11c30:	str	r0, [sp, #52]	; 0x34
   11c34:	b	11a8c <__assert_fail@plt+0x5d4>
   11c38:	ldr	r3, [sp, #52]	; 0x34
   11c3c:	cmp	r3, #0
   11c40:	bge	11cc8 <__assert_fail@plt+0x810>
   11c44:	ldrb	r3, [sp, #100]	; 0x64
   11c48:	cmp	r3, #0
   11c4c:	beq	11c90 <__assert_fail@plt+0x7d8>
   11c50:	ldr	r3, [sp, #56]	; 0x38
   11c54:	mov	r0, #0
   11c58:	mov	r2, #5
   11c5c:	ldr	sl, [sp, #64]	; 0x40
   11c60:	ldr	r1, [sp, #72]	; 0x48
   11c64:	cmp	r3, r0
   11c68:	moveq	sl, r6
   11c6c:	bl	111e8 <dcgettext@plt>
   11c70:	ldr	r3, [sp, #48]	; 0x30
   11c74:	mov	r1, #0
   11c78:	mov	r2, r0
   11c7c:	mov	r0, r1
   11c80:	str	r3, [sp]
   11c84:	mov	r3, sl
   11c88:	str	r1, [sp, #56]	; 0x38
   11c8c:	bl	1129c <error@plt>
   11c90:	ldr	r3, [sp, #48]	; 0x30
   11c94:	add	r2, r5, #2
   11c98:	mov	r1, r4
   11c9c:	sub	r0, r4, r3
   11ca0:	add	r0, r6, r0
   11ca4:	bl	11194 <memcpy@plt>
   11ca8:	sub	r5, r5, #1
   11cac:	b	11ad4 <__assert_fail@plt+0x61c>
   11cb0:	movw	r1, #257	; 0x101
   11cb4:	mov	r0, r6
   11cb8:	bl	13fa8 <__assert_fail@plt+0x2af0>
   11cbc:	subs	r4, r0, #0
   11cc0:	bge	118d0 <__assert_fail@plt+0x418>
   11cc4:	b	11a34 <__assert_fail@plt+0x57c>
   11cc8:	ldr	r0, [sp, #52]	; 0x34
   11ccc:	bl	11494 <fdatasync@plt>
   11cd0:	cmp	r0, #0
   11cd4:	beq	11c44 <__assert_fail@plt+0x78c>
   11cd8:	bl	11338 <__errno_location@plt>
   11cdc:	ldr	fp, [r0]
   11ce0:	mov	r9, r0
   11ce4:	sub	sl, fp, #21
   11ce8:	cmp	fp, #9
   11cec:	cmpne	sl, #1
   11cf0:	movls	sl, #1
   11cf4:	movhi	sl, #0
   11cf8:	bhi	11e10 <__assert_fail@plt+0x958>
   11cfc:	ldr	r0, [sp, #52]	; 0x34
   11d00:	bl	1114c <fsync@plt>
   11d04:	cmp	r0, #0
   11d08:	beq	11c44 <__assert_fail@plt+0x78c>
   11d0c:	ldr	fp, [r9]
   11d10:	sub	sl, fp, #21
   11d14:	cmp	fp, #9
   11d18:	cmpne	sl, #1
   11d1c:	movls	sl, #1
   11d20:	movhi	sl, #0
   11d24:	bhi	11e80 <__assert_fail@plt+0x9c8>
   11d28:	bl	11464 <sync@plt>
   11d2c:	b	11c44 <__assert_fail@plt+0x78c>
   11d30:	mov	r0, r4
   11d34:	ldr	r1, [sp, #60]	; 0x3c
   11d38:	bl	11fc0 <__assert_fail@plt+0xb08>
   11d3c:	ldr	r3, [sp, #36]	; 0x24
   11d40:	cmp	r0, #0
   11d44:	mov	r0, r4
   11d48:	movne	r3, #0
   11d4c:	str	r3, [sp, #36]	; 0x24
   11d50:	bl	114ac <close@plt>
   11d54:	cmp	r0, #0
   11d58:	beq	11ba0 <__assert_fail@plt+0x6e8>
   11d5c:	bl	11338 <__errno_location@plt>
   11d60:	ldr	r4, [r0]
   11d64:	mov	r2, #5
   11d68:	movw	r1, #53896	; 0xd288
   11d6c:	movt	r1, #1
   11d70:	mov	r0, #0
   11d74:	bl	111e8 <dcgettext@plt>
   11d78:	mov	r2, r0
   11d7c:	mov	r0, #0
   11d80:	ldr	r3, [sp, #60]	; 0x3c
   11d84:	mov	r1, r4
   11d88:	str	r0, [sp, #36]	; 0x24
   11d8c:	bl	1129c <error@plt>
   11d90:	b	11ba0 <__assert_fail@plt+0x6e8>
   11d94:	mov	r2, #5
   11d98:	movw	r1, #53992	; 0xd2e8
   11d9c:	movt	r1, #1
   11da0:	bl	111e8 <dcgettext@plt>
   11da4:	mov	r2, r0
   11da8:	mov	r3, r5
   11dac:	mov	r1, r4
   11db0:	mov	r0, r4
   11db4:	bl	1129c <error@plt>
   11db8:	b	11b94 <__assert_fail@plt+0x6dc>
   11dbc:	mov	r2, #5
   11dc0:	movw	r1, #53768	; 0xd208
   11dc4:	movt	r1, #1
   11dc8:	mov	r0, r3
   11dcc:	mov	r4, r3
   11dd0:	bl	111e8 <dcgettext@plt>
   11dd4:	mov	r2, r0
   11dd8:	mov	r1, r4
   11ddc:	mov	r0, r4
   11de0:	bl	1129c <error@plt>
   11de4:	mov	r0, #1
   11de8:	bl	130f4 <__assert_fail@plt+0x1c3c>
   11dec:	mov	r0, r4
   11df0:	bl	130f4 <__assert_fail@plt+0x1c3c>
   11df4:	movw	r1, #53932	; 0xd2ac
   11df8:	movt	r1, #1
   11dfc:	ldr	r3, [pc, #180]	; 11eb8 <__assert_fail@plt+0xa00>
   11e00:	movw	r0, #53944	; 0xd2b8
   11e04:	movt	r0, #1
   11e08:	mov	r2, #1000	; 0x3e8
   11e0c:	bl	114b8 <__assert_fail@plt>
   11e10:	movw	r1, #51192	; 0xc7f8
   11e14:	movt	r1, #1
   11e18:	mov	r2, #5
   11e1c:	mov	r0, sl
   11e20:	bl	111e8 <dcgettext@plt>
   11e24:	mov	r2, r0
   11e28:	mov	r1, fp
   11e2c:	ldr	r3, [sp, #60]	; 0x3c
   11e30:	mov	r0, sl
   11e34:	bl	1129c <error@plt>
   11e38:	str	fp, [r9]
   11e3c:	str	sl, [sp, #36]	; 0x24
   11e40:	b	11c44 <__assert_fail@plt+0x78c>
   11e44:	bl	11338 <__errno_location@plt>
   11e48:	ldr	r4, [r0]
   11e4c:	cmp	fp, #0
   11e50:	mov	r1, #3
   11e54:	movw	r2, #53596	; 0xd15c
   11e58:	movt	r2, #1
   11e5c:	mov	r0, r7
   11e60:	movne	r2, fp
   11e64:	bl	18364 <__assert_fail@plt+0x6eac>
   11e68:	mov	r3, r0
   11e6c:	movw	r2, #54364	; 0xd45c
   11e70:	movt	r2, #1
   11e74:	mov	r1, r4
   11e78:	mov	r0, #1
   11e7c:	bl	1129c <error@plt>
   11e80:	movw	r1, #51172	; 0xc7e4
   11e84:	movt	r1, #1
   11e88:	b	11e18 <__assert_fail@plt+0x960>
   11e8c:	mov	r2, #5
   11e90:	movw	r1, #53660	; 0xd19c
   11e94:	movt	r1, #1
   11e98:	mov	r0, r4
   11e9c:	bl	111e8 <dcgettext@plt>
   11ea0:	mov	r2, r0
   11ea4:	mov	r1, r4
   11ea8:	mov	r0, #1
   11eac:	bl	1129c <error@plt>
   11eb0:	andeq	ip, r1, ip, asr #13
   11eb4:	muleq	r1, r8, r7
   11eb8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   11ebc:	mov	fp, #0
   11ec0:	mov	lr, #0
   11ec4:	pop	{r1}		; (ldr r1, [sp], #4)
   11ec8:	mov	r2, sp
   11ecc:	push	{r2}		; (str r2, [sp, #-4]!)
   11ed0:	push	{r0}		; (str r0, [sp, #-4]!)
   11ed4:	ldr	ip, [pc, #16]	; 11eec <__assert_fail@plt+0xa34>
   11ed8:	push	{ip}		; (str ip, [sp, #-4]!)
   11edc:	ldr	r0, [pc, #12]	; 11ef0 <__assert_fail@plt+0xa38>
   11ee0:	ldr	r3, [pc, #12]	; 11ef4 <__assert_fail@plt+0xa3c>
   11ee4:	bl	112cc <__libc_start_main@plt>
   11ee8:	bl	114a0 <abort@plt>
   11eec:	muleq	r1, r0, r5
   11ef0:	andeq	r1, r1, r8, asr #9
   11ef4:	andeq	ip, r1, r0, lsr r5
   11ef8:	ldr	r3, [pc, #20]	; 11f14 <__assert_fail@plt+0xa5c>
   11efc:	ldr	r2, [pc, #20]	; 11f18 <__assert_fail@plt+0xa60>
   11f00:	add	r3, pc, r3
   11f04:	ldr	r2, [r3, r2]
   11f08:	cmp	r2, #0
   11f0c:	bxeq	lr
   11f10:	b	112e4 <__gmon_start__@plt>
   11f14:	strdeq	ip, [r1], -r8
   11f18:	andeq	r0, r0, r4, asr #2
   11f1c:	ldr	r0, [pc, #24]	; 11f3c <__assert_fail@plt+0xa84>
   11f20:	ldr	r3, [pc, #24]	; 11f40 <__assert_fail@plt+0xa88>
   11f24:	cmp	r3, r0
   11f28:	bxeq	lr
   11f2c:	ldr	r3, [pc, #16]	; 11f44 <__assert_fail@plt+0xa8c>
   11f30:	cmp	r3, #0
   11f34:	bxeq	lr
   11f38:	bx	r3
   11f3c:	muleq	r2, ip, r1
   11f40:	muleq	r2, ip, r1
   11f44:	andeq	r0, r0, r0
   11f48:	ldr	r0, [pc, #36]	; 11f74 <__assert_fail@plt+0xabc>
   11f4c:	ldr	r1, [pc, #36]	; 11f78 <__assert_fail@plt+0xac0>
   11f50:	sub	r1, r1, r0
   11f54:	asr	r1, r1, #2
   11f58:	add	r1, r1, r1, lsr #31
   11f5c:	asrs	r1, r1, #1
   11f60:	bxeq	lr
   11f64:	ldr	r3, [pc, #16]	; 11f7c <__assert_fail@plt+0xac4>
   11f68:	cmp	r3, #0
   11f6c:	bxeq	lr
   11f70:	bx	r3
   11f74:	muleq	r2, ip, r1
   11f78:	muleq	r2, ip, r1
   11f7c:	andeq	r0, r0, r0
   11f80:	push	{r4, lr}
   11f84:	ldr	r4, [pc, #24]	; 11fa4 <__assert_fail@plt+0xaec>
   11f88:	ldrb	r3, [r4]
   11f8c:	cmp	r3, #0
   11f90:	popne	{r4, pc}
   11f94:	bl	11f1c <__assert_fail@plt+0xa64>
   11f98:	mov	r3, #1
   11f9c:	strb	r3, [r4]
   11fa0:	pop	{r4, pc}
   11fa4:			; <UNDEFINED> instruction: 0x0002e1bc
   11fa8:	b	11f48 <__assert_fail@plt+0xa90>
   11fac:	andeq	r0, r0, r0
   11fb0:	movw	r3, #57792	; 0xe1c0
   11fb4:	movt	r3, #2
   11fb8:	ldr	r0, [r3]
   11fbc:	b	190a0 <__assert_fail@plt+0x7be8>
   11fc0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11fc4:	strd	r6, [sp, #8]
   11fc8:	mov	r7, r1
   11fcc:	str	r8, [sp, #16]
   11fd0:	mov	r8, r0
   11fd4:	str	lr, [sp, #20]
   11fd8:	bl	11494 <fdatasync@plt>
   11fdc:	cmp	r0, #0
   11fe0:	beq	12038 <__assert_fail@plt+0xb80>
   11fe4:	bl	11338 <__errno_location@plt>
   11fe8:	ldr	r4, [r0]
   11fec:	mov	r6, r0
   11ff0:	sub	r0, r4, #21
   11ff4:	cmp	r4, #9
   11ff8:	cmpne	r0, #1
   11ffc:	movls	r5, #1
   12000:	movhi	r5, #0
   12004:	bhi	12050 <__assert_fail@plt+0xb98>
   12008:	mov	r0, r8
   1200c:	bl	1114c <fsync@plt>
   12010:	cmp	r0, #0
   12014:	beq	12038 <__assert_fail@plt+0xb80>
   12018:	ldr	r4, [r6]
   1201c:	sub	r3, r4, #21
   12020:	cmp	r4, #9
   12024:	cmpne	r3, #1
   12028:	movls	r5, #1
   1202c:	movhi	r5, #0
   12030:	bhi	12084 <__assert_fail@plt+0xbcc>
   12034:	bl	11464 <sync@plt>
   12038:	mov	r0, #0
   1203c:	ldrd	r4, [sp]
   12040:	ldrd	r6, [sp, #8]
   12044:	ldr	r8, [sp, #16]
   12048:	add	sp, sp, #20
   1204c:	pop	{pc}		; (ldr pc, [sp], #4)
   12050:	movw	r1, #51192	; 0xc7f8
   12054:	movt	r1, #1
   12058:	mov	r2, #5
   1205c:	mov	r0, r5
   12060:	bl	111e8 <dcgettext@plt>
   12064:	mov	r2, r0
   12068:	mov	r3, r7
   1206c:	mov	r0, r5
   12070:	mov	r1, r4
   12074:	bl	1129c <error@plt>
   12078:	mvn	r0, #0
   1207c:	str	r4, [r6]
   12080:	b	1203c <__assert_fail@plt+0xb84>
   12084:	movw	r1, #51172	; 0xc7e4
   12088:	movt	r1, #1
   1208c:	b	12058 <__assert_fail@plt+0xba0>
   12090:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12094:	mov	r4, r3
   12098:	strd	r6, [sp, #8]
   1209c:	mov	r7, r1
   120a0:	strd	r8, [sp, #16]
   120a4:	mov	r8, r0
   120a8:	strd	sl, [sp, #24]
   120ac:	str	lr, [sp, #32]
   120b0:	sub	sp, sp, #2080	; 0x820
   120b4:	sub	sp, sp, #4
   120b8:	str	r2, [sp, #40]	; 0x28
   120bc:	str	r3, [sp, #80]	; 0x50
   120c0:	bl	1132c <getpagesize@plt>
   120c4:	ldrd	r2, [r4]
   120c8:	strd	r2, [sp, #32]
   120cc:	ldr	r3, [sp, #2120]	; 0x848
   120d0:	cmp	r3, #0
   120d4:	ble	12758 <__assert_fail@plt+0x12a0>
   120d8:	ubfx	r3, r3, #0, #12
   120dc:	orr	r3, r3, r3, lsl #12
   120e0:	ubfx	r2, r3, #4, #8
   120e4:	uxtb	r1, r3
   120e8:	ubfx	r3, r3, #8, #8
   120ec:	cmp	r1, r2
   120f0:	cmpeq	r3, r2
   120f4:	beq	12758 <__assert_fail@plt+0x12a0>
   120f8:	mov	r1, #61440	; 0xf000
   120fc:	mov	sl, #61440	; 0xf000
   12100:	mov	fp, #0
   12104:	mov	r6, r1
   12108:	mov	r4, #30720	; 0x7800
   1210c:	strd	sl, [sp, #56]	; 0x38
   12110:	str	r1, [sp, #72]	; 0x48
   12114:	bl	1a258 <__assert_fail@plt+0x8da0>
   12118:	ldrd	r2, [sp, #32]
   1211c:	mov	r5, r0
   12120:	cmp	r2, #1
   12124:	sbcs	r1, r3, #0
   12128:	blt	12594 <__assert_fail@plt+0x10dc>
   1212c:	ldrd	r0, [sp, #56]	; 0x38
   12130:	cmp	r2, r0
   12134:	sbcs	r3, r3, r1
   12138:	movlt	r3, #1
   1213c:	strlt	r3, [sp, #44]	; 0x2c
   12140:	bge	12594 <__assert_fail@plt+0x10dc>
   12144:	ldr	r3, [r7, #16]
   12148:	and	r3, r3, #61440	; 0xf000
   1214c:	cmp	r3, #8192	; 0x2000
   12150:	beq	125e4 <__assert_fail@plt+0x112c>
   12154:	mov	r1, #0
   12158:	mov	r3, #0
   1215c:	mov	r2, #0
   12160:	mov	r0, r8
   12164:	str	r1, [sp]
   12168:	bl	11260 <lseek64@plt>
   1216c:	cmp	r0, #1
   12170:	sbcs	r3, r1, #0
   12174:	blt	121dc <__assert_fail@plt+0xd24>
   12178:	bl	11338 <__errno_location@plt>
   1217c:	mov	r3, #22
   12180:	mov	r4, r3
   12184:	str	r3, [r0]
   12188:	movw	r1, #51216	; 0xc810
   1218c:	movt	r1, #1
   12190:	mov	r2, #5
   12194:	mov	r0, #0
   12198:	bl	111e8 <dcgettext@plt>
   1219c:	ldr	r3, [sp, #40]	; 0x28
   121a0:	mov	r2, r0
   121a4:	mov	r1, r4
   121a8:	mov	r0, #0
   121ac:	bl	1129c <error@plt>
   121b0:	mov	r0, r5
   121b4:	bl	13fe8 <__assert_fail@plt+0x2b30>
   121b8:	mvn	r0, #0
   121bc:	add	sp, sp, #2080	; 0x820
   121c0:	add	sp, sp, #4
   121c4:	ldrd	r4, [sp]
   121c8:	ldrd	r6, [sp, #8]
   121cc:	ldrd	r8, [sp, #16]
   121d0:	ldrd	sl, [sp, #24]
   121d4:	add	sp, sp, #32
   121d8:	pop	{pc}		; (ldr pc, [sp], #4)
   121dc:	orrs	r3, r0, r1
   121e0:	bne	12a8c <__assert_fail@plt+0x15d4>
   121e4:	ldr	r3, [sp, #2120]	; 0x848
   121e8:	cmp	r3, #0
   121ec:	blt	12624 <__assert_fail@plt+0x116c>
   121f0:	mov	r1, r3
   121f4:	mov	r2, r3
   121f8:	mov	r3, #61440	; 0xf000
   121fc:	movt	r3, #255	; 0xff
   12200:	ubfx	r2, r2, #0, #12
   12204:	and	r3, r3, r1, lsl #12
   12208:	ldrd	r0, [sp, #32]
   1220c:	orr	r3, r3, r2
   12210:	uxtb	r2, r3
   12214:	cmp	fp, r1
   12218:	ubfx	r1, r3, #4, #8
   1221c:	cmpeq	sl, r0
   12220:	ubfx	r3, r3, #8, #8
   12224:	bhi	127b8 <__assert_fail@plt+0x1300>
   12228:	strb	r1, [r5]
   1222c:	strb	r3, [r5, #1]
   12230:	strb	r2, [r5, #2]
   12234:	mov	r7, #3
   12238:	mov	r2, r7
   1223c:	add	r0, r5, r7
   12240:	lsl	r7, r7, #1
   12244:	mov	r1, r5
   12248:	bl	11194 <memcpy@plt>
   1224c:	cmp	r7, r4
   12250:	bls	12238 <__assert_fail@plt+0xd80>
   12254:	ldr	r3, [sp, #2120]	; 0x848
   12258:	cmp	r7, r6
   1225c:	and	r4, r3, #4096	; 0x1000
   12260:	bcc	127e8 <__assert_fail@plt+0x1330>
   12264:	cmp	r4, #0
   12268:	bne	1278c <__assert_fail@plt+0x12d4>
   1226c:	ldrb	r4, [r5, #2]
   12270:	add	r3, sp, #128	; 0x80
   12274:	mov	r1, #1
   12278:	mov	r2, r3
   1227c:	movw	r3, #51400	; 0xc8c8
   12280:	movt	r3, #1
   12284:	ldrb	lr, [r5, #1]
   12288:	sub	r2, r2, #12
   1228c:	mov	r0, r2
   12290:	ldrb	ip, [r5]
   12294:	stm	sp, {ip, lr}
   12298:	str	r4, [sp, #8]
   1229c:	str	r2, [sp, #76]	; 0x4c
   122a0:	mov	r2, #7
   122a4:	bl	11344 <__sprintf_chk@plt>
   122a8:	ldr	r3, [sp, #2132]	; 0x854
   122ac:	cmp	r3, #0
   122b0:	streq	r3, [sp, #92]	; 0x5c
   122b4:	bne	1265c <__assert_fail@plt+0x11a4>
   122b8:	mov	r3, #0
   122bc:	movw	r2, #53068	; 0xcf4c
   122c0:	movt	r2, #1
   122c4:	str	r3, [sp, #48]	; 0x30
   122c8:	strd	r2, [sp, #84]	; 0x54
   122cc:	mov	r2, #0
   122d0:	mov	r3, #0
   122d4:	strd	r2, [sp, #24]
   122d8:	ldrd	r2, [sp, #32]
   122dc:	cmp	r2, #0
   122e0:	sbcs	r1, r3, #0
   122e4:	blt	12718 <__assert_fail@plt+0x1260>
   122e8:	ldrd	r0, [sp, #24]
   122ec:	ldrd	sl, [sp, #56]	; 0x38
   122f0:	subs	ip, r2, r0
   122f4:	str	ip, [sp, #64]	; 0x40
   122f8:	sbc	ip, r3, r1
   122fc:	str	ip, [sp, #68]	; 0x44
   12300:	ldrd	r6, [sp, #64]	; 0x40
   12304:	cmp	r6, sl
   12308:	sbcs	ip, r7, fp
   1230c:	bge	12718 <__assert_fail@plt+0x1260>
   12310:	cmp	r2, r0
   12314:	sbcs	ip, r3, r1
   12318:	blt	12a1c <__assert_fail@plt+0x1564>
   1231c:	mov	r3, r2
   12320:	subs	r7, r3, r0
   12324:	beq	12a1c <__assert_fail@plt+0x1564>
   12328:	ldr	r3, [sp, #2120]	; 0x848
   1232c:	cmp	r3, #0
   12330:	blt	12728 <__assert_fail@plt+0x1270>
   12334:	movw	sl, #51284	; 0xc854
   12338:	movt	sl, #1
   1233c:	mov	r4, #0
   12340:	b	1234c <__assert_fail@plt+0xe94>
   12344:	cmp	r7, r4
   12348:	bls	1243c <__assert_fail@plt+0xf84>
   1234c:	sub	r2, r7, r4
   12350:	add	r1, r5, r4
   12354:	mov	r0, r8
   12358:	bl	1138c <write@plt>
   1235c:	cmp	r0, #0
   12360:	addgt	r4, r4, r0
   12364:	bgt	12344 <__assert_fail@plt+0xe8c>
   12368:	ldrd	r2, [sp, #32]
   1236c:	cmp	r2, #0
   12370:	sbcs	r3, r3, #0
   12374:	blt	126ac <__assert_fail@plt+0x11f4>
   12378:	bl	11338 <__errno_location@plt>
   1237c:	ldr	r3, [sp, #44]	; 0x2c
   12380:	str	r0, [sp, #52]	; 0x34
   12384:	ldr	r9, [r0]
   12388:	eor	r6, r3, #1
   1238c:	cmp	r9, #22
   12390:	movne	r6, #0
   12394:	andeq	r6, r6, #1
   12398:	cmp	r6, #0
   1239c:	bne	126e0 <__assert_fail@plt+0x1228>
   123a0:	mov	r2, #5
   123a4:	mov	r1, sl
   123a8:	mov	r0, r6
   123ac:	bl	111e8 <dcgettext@plt>
   123b0:	mov	fp, r0
   123b4:	ldrd	r0, [sp, #24]
   123b8:	add	r2, sp, #1424	; 0x590
   123bc:	add	r2, r2, #4
   123c0:	adds	r0, r0, r4
   123c4:	adc	r1, r1, #0
   123c8:	bl	15128 <__assert_fail@plt+0x3c70>
   123cc:	mov	r2, fp
   123d0:	mov	r1, r9
   123d4:	str	r0, [sp]
   123d8:	mov	r0, r6
   123dc:	ldr	r3, [sp, #40]	; 0x28
   123e0:	bl	1129c <error@plt>
   123e4:	cmp	r9, #5
   123e8:	bne	121b0 <__assert_fail@plt+0xcf8>
   123ec:	mvn	r4, r4, lsr #9
   123f0:	mvn	r4, r4, lsl #9
   123f4:	cmp	r4, r7
   123f8:	bcs	121b0 <__assert_fail@plt+0xcf8>
   123fc:	ldrd	r2, [sp, #24]
   12400:	add	r4, r4, #1
   12404:	mov	r0, r8
   12408:	str	r6, [sp]
   1240c:	adds	r2, r2, r4
   12410:	adc	r3, r3, #0
   12414:	bl	11260 <lseek64@plt>
   12418:	mvn	r3, #0
   1241c:	mvn	r2, #0
   12420:	cmp	r1, r3
   12424:	cmpeq	r0, r2
   12428:	beq	1273c <__assert_fail@plt+0x1284>
   1242c:	mov	r3, #1
   12430:	cmp	r7, r4
   12434:	str	r3, [sp, #48]	; 0x30
   12438:	bhi	1234c <__assert_fail@plt+0xe94>
   1243c:	ldrd	r6, [sp, #24]
   12440:	mvn	r3, #0
   12444:	mvn	r1, #-2147483648	; 0x80000000
   12448:	subs	r3, r3, r6
   1244c:	sbc	r1, r1, r7
   12450:	str	r3, [sp, #96]	; 0x60
   12454:	mov	r3, #0
   12458:	str	r1, [sp, #100]	; 0x64
   1245c:	ldrd	r0, [sp, #96]	; 0x60
   12460:	cmp	r0, r4
   12464:	sbcs	r1, r1, r3
   12468:	blt	129ec <__assert_fail@plt+0x1534>
   1246c:	adds	r1, r6, r4
   12470:	str	r1, [sp, #24]
   12474:	ldr	r1, [sp, #28]
   12478:	adc	r3, r1, r3
   1247c:	str	r3, [sp, #28]
   12480:	ldr	r3, [sp, #2132]	; 0x854
   12484:	cmp	r3, #0
   12488:	beq	122d8 <__assert_fail@plt+0xe20>
   1248c:	ldrd	r0, [sp, #24]
   12490:	ldrd	r2, [sp, #32]
   12494:	cmp	r3, r1
   12498:	cmpeq	r2, r0
   1249c:	beq	128b4 <__assert_fail@plt+0x13fc>
   124a0:	mov	r0, #0
   124a4:	bl	111b8 <time@plt>
   124a8:	ldr	r2, [sp, #92]	; 0x5c
   124ac:	str	r0, [sp, #88]	; 0x58
   124b0:	cmp	r2, r0
   124b4:	bgt	122d8 <__assert_fail@plt+0xe20>
   124b8:	mov	r6, #1
   124bc:	mov	r7, #0
   124c0:	ldrd	r0, [sp, #24]
   124c4:	movw	r3, #434	; 0x1b2
   124c8:	add	r2, sp, #776	; 0x308
   124cc:	strd	r6, [sp]
   124d0:	strd	r6, [sp, #8]
   124d4:	bl	14048 <__assert_fail@plt+0x2b90>
   124d8:	mov	r1, r0
   124dc:	mov	r9, r0
   124e0:	ldr	r0, [sp, #84]	; 0x54
   124e4:	bl	11158 <strcmp@plt>
   124e8:	cmp	r0, #0
   124ec:	beq	122d8 <__assert_fail@plt+0xe20>
   124f0:	ldrd	r2, [sp, #32]
   124f4:	cmp	r2, #0
   124f8:	sbcs	r3, r3, #0
   124fc:	bge	128fc <__assert_fail@plt+0x1444>
   12500:	mov	r2, #5
   12504:	movw	r1, #51336	; 0xc888
   12508:	movt	r1, #1
   1250c:	mov	r0, #0
   12510:	bl	111e8 <dcgettext@plt>
   12514:	ldr	r3, [sp, #2128]	; 0x850
   12518:	mov	r1, #0
   1251c:	mov	r2, r0
   12520:	mov	r0, r1
   12524:	str	r9, [sp, #12]
   12528:	ldr	ip, [sp, #2132]	; 0x854
   1252c:	stm	sp, {r3, ip}
   12530:	ldr	r3, [sp, #40]	; 0x28
   12534:	ldr	ip, [sp, #76]	; 0x4c
   12538:	str	ip, [sp, #8]
   1253c:	bl	1129c <error@plt>
   12540:	mov	r1, r9
   12544:	mov	r2, #652	; 0x28c
   12548:	add	r0, sp, #124	; 0x7c
   1254c:	bl	11278 <__strcpy_chk@plt>
   12550:	mov	r0, r8
   12554:	ldr	r1, [sp, #40]	; 0x28
   12558:	bl	11fc0 <__assert_fail@plt+0xb08>
   1255c:	ldr	r3, [sp, #88]	; 0x58
   12560:	cmp	r0, #0
   12564:	add	r3, r3, #5
   12568:	str	r3, [sp, #92]	; 0x5c
   1256c:	beq	12a10 <__assert_fail@plt+0x1558>
   12570:	bl	11338 <__errno_location@plt>
   12574:	ldr	r3, [r0]
   12578:	cmp	r3, #5
   1257c:	bne	121b0 <__assert_fail@plt+0xcf8>
   12580:	add	r3, sp, #124	; 0x7c
   12584:	str	r3, [sp, #84]	; 0x54
   12588:	mov	r3, #1
   1258c:	str	r3, [sp, #48]	; 0x30
   12590:	b	122d8 <__assert_fail@plt+0xe20>
   12594:	mov	r1, #3
   12598:	mov	r0, r8
   1259c:	bl	13dc0 <__assert_fail@plt+0x2908>
   125a0:	cmp	r0, #0
   125a4:	ble	125cc <__assert_fail@plt+0x1114>
   125a8:	orr	r2, r0, #65536	; 0x10000
   125ac:	cmp	r0, r2
   125b0:	beq	125cc <__assert_fail@plt+0x1114>
   125b4:	mov	r3, #0
   125b8:	mov	r1, #4
   125bc:	mov	r0, r8
   125c0:	str	r3, [sp, #44]	; 0x2c
   125c4:	bl	13dc0 <__assert_fail@plt+0x2908>
   125c8:	b	12144 <__assert_fail@plt+0xc8c>
   125cc:	mov	r3, #0
   125d0:	str	r3, [sp, #44]	; 0x2c
   125d4:	ldr	r3, [r7, #16]
   125d8:	and	r3, r3, #61440	; 0xf000
   125dc:	cmp	r3, #8192	; 0x2000
   125e0:	bne	12154 <__assert_fail@plt+0xc9c>
   125e4:	add	r3, sp, #1424	; 0x590
   125e8:	mov	r1, #6
   125ec:	add	r3, r3, #4
   125f0:	mov	ip, #1
   125f4:	mov	r2, r3
   125f8:	mov	r0, r8
   125fc:	strh	r1, [r3]
   12600:	movw	r1, #27905	; 0x6d01
   12604:	movt	r1, #16392	; 0x4008
   12608:	str	ip, [sp, #1432]	; 0x598
   1260c:	bl	11254 <ioctl@plt>
   12610:	cmp	r0, #0
   12614:	bne	12154 <__assert_fail@plt+0xc9c>
   12618:	ldr	r3, [sp, #2120]	; 0x848
   1261c:	cmp	r3, #0
   12620:	bge	121f0 <__assert_fail@plt+0xd38>
   12624:	movw	r3, #51416	; 0xc8d8
   12628:	movt	r3, #1
   1262c:	ldrh	r2, [r3, #4]
   12630:	add	r0, sp, #116	; 0x74
   12634:	ldr	r1, [r3]
   12638:	str	r0, [sp, #76]	; 0x4c
   1263c:	ldrb	r3, [r3, #6]
   12640:	str	r1, [sp, #116]	; 0x74
   12644:	strh	r2, [r0, #4]
   12648:	strb	r3, [r0, #6]
   1264c:	ldr	r3, [sp, #2132]	; 0x854
   12650:	cmp	r3, #0
   12654:	streq	r3, [sp, #92]	; 0x5c
   12658:	beq	122b8 <__assert_fail@plt+0xe00>
   1265c:	mov	r2, #5
   12660:	movw	r1, #51236	; 0xc824
   12664:	movt	r1, #1
   12668:	mov	r0, #0
   1266c:	bl	111e8 <dcgettext@plt>
   12670:	ldr	r3, [sp, #2128]	; 0x850
   12674:	mov	r1, #0
   12678:	mov	r2, r0
   1267c:	mov	r0, r1
   12680:	ldr	ip, [sp, #2132]	; 0x854
   12684:	stm	sp, {r3, ip}
   12688:	ldr	r3, [sp, #40]	; 0x28
   1268c:	ldr	ip, [sp, #76]	; 0x4c
   12690:	str	ip, [sp, #8]
   12694:	bl	1129c <error@plt>
   12698:	mov	r0, #0
   1269c:	bl	111b8 <time@plt>
   126a0:	add	r3, r0, #5
   126a4:	str	r3, [sp, #92]	; 0x5c
   126a8:	b	122b8 <__assert_fail@plt+0xe00>
   126ac:	cmp	r0, #0
   126b0:	beq	12850 <__assert_fail@plt+0x1398>
   126b4:	bl	11338 <__errno_location@plt>
   126b8:	ldr	r9, [r0]
   126bc:	cmp	r9, #28
   126c0:	beq	12850 <__assert_fail@plt+0x1398>
   126c4:	ldr	r3, [sp, #44]	; 0x2c
   126c8:	eor	r6, r3, #1
   126cc:	cmp	r9, #22
   126d0:	movne	r6, #0
   126d4:	andeq	r6, r6, #1
   126d8:	cmp	r6, #0
   126dc:	beq	12804 <__assert_fail@plt+0x134c>
   126e0:	mov	r1, #3
   126e4:	mov	r0, r8
   126e8:	bl	13dc0 <__assert_fail@plt+0x2908>
   126ec:	cmp	r0, #0
   126f0:	ble	127dc <__assert_fail@plt+0x1324>
   126f4:	bic	r2, r0, #65536	; 0x10000
   126f8:	cmp	r0, r2
   126fc:	beq	127dc <__assert_fail@plt+0x1324>
   12700:	mov	r3, #1
   12704:	mov	r1, #4
   12708:	mov	r0, r8
   1270c:	str	r3, [sp, #44]	; 0x2c
   12710:	bl	13dc0 <__assert_fail@plt+0x2908>
   12714:	b	12344 <__assert_fail@plt+0xe8c>
   12718:	ldr	r7, [sp, #72]	; 0x48
   1271c:	ldr	r3, [sp, #2120]	; 0x848
   12720:	cmp	r3, #0
   12724:	bge	12334 <__assert_fail@plt+0xe7c>
   12728:	mov	r2, r7
   1272c:	mov	r1, r5
   12730:	ldr	r0, [sp, #2124]	; 0x84c
   12734:	bl	19304 <__assert_fail@plt+0x7e4c>
   12738:	b	12334 <__assert_fail@plt+0xe7c>
   1273c:	ldr	r3, [sp, #52]	; 0x34
   12740:	movw	r1, #51316	; 0xc874
   12744:	movt	r1, #1
   12748:	mov	r2, r9
   1274c:	mov	r0, r6
   12750:	ldr	r4, [r3]
   12754:	b	12198 <__assert_fail@plt+0xce0>
   12758:	mov	r3, #0
   1275c:	mov	r2, #65536	; 0x10000
   12760:	mov	r1, #2
   12764:	movt	r1, #1
   12768:	strd	r2, [sp, #56]	; 0x38
   1276c:	mov	r3, #65536	; 0x10000
   12770:	mov	sl, #2
   12774:	movt	sl, #1
   12778:	mov	r6, r1
   1277c:	movw	r4, #32769	; 0x8001
   12780:	mov	fp, #0
   12784:	str	r3, [sp, #72]	; 0x48
   12788:	b	12114 <__assert_fail@plt+0xc5c>
   1278c:	cmp	r6, #0
   12790:	beq	1226c <__assert_fail@plt+0xdb4>
   12794:	mov	r3, #0
   12798:	mvn	r1, #127	; 0x7f
   1279c:	ldrb	r2, [r5, r3]
   127a0:	eor	r2, r2, r1
   127a4:	strb	r2, [r5, r3]
   127a8:	add	r3, r3, #512	; 0x200
   127ac:	cmp	r3, r6
   127b0:	bcc	1279c <__assert_fail@plt+0x12e4>
   127b4:	b	1226c <__assert_fail@plt+0xdb4>
   127b8:	ldrd	r6, [sp, #32]
   127bc:	strb	r1, [r5]
   127c0:	strb	r3, [r5, #1]
   127c4:	strb	r2, [r5, #2]
   127c8:	lsr	r4, r6, #1
   127cc:	cmp	r4, #2
   127d0:	movls	r7, #3
   127d4:	bhi	12234 <__assert_fail@plt+0xd7c>
   127d8:	b	12254 <__assert_fail@plt+0xd9c>
   127dc:	mov	r3, #1
   127e0:	str	r3, [sp, #44]	; 0x2c
   127e4:	b	12344 <__assert_fail@plt+0xe8c>
   127e8:	sub	r2, r6, r7
   127ec:	add	r0, r5, r7
   127f0:	mov	r1, r5
   127f4:	bl	11194 <memcpy@plt>
   127f8:	cmp	r4, #0
   127fc:	bne	12794 <__assert_fail@plt+0x12dc>
   12800:	b	1226c <__assert_fail@plt+0xdb4>
   12804:	mov	r2, #5
   12808:	mov	r0, r6
   1280c:	movw	r1, #51284	; 0xc854
   12810:	movt	r1, #1
   12814:	bl	111e8 <dcgettext@plt>
   12818:	mov	r7, r0
   1281c:	ldrd	r0, [sp, #24]
   12820:	add	r2, sp, #1424	; 0x590
   12824:	add	r2, r2, #4
   12828:	adds	r0, r0, r4
   1282c:	adc	r1, r1, #0
   12830:	bl	15128 <__assert_fail@plt+0x3c70>
   12834:	mov	r2, r7
   12838:	mov	r1, r9
   1283c:	str	r0, [sp]
   12840:	mov	r0, r6
   12844:	ldr	r3, [sp, #40]	; 0x28
   12848:	bl	1129c <error@plt>
   1284c:	b	121b0 <__assert_fail@plt+0xcf8>
   12850:	ldrd	r6, [sp, #24]
   12854:	mvn	r3, #0
   12858:	mvn	r1, #-2147483648	; 0x80000000
   1285c:	subs	r3, r3, r6
   12860:	sbc	r1, r1, r7
   12864:	str	r3, [sp, #104]	; 0x68
   12868:	mov	r3, #0
   1286c:	str	r1, [sp, #108]	; 0x6c
   12870:	ldrd	r0, [sp, #104]	; 0x68
   12874:	cmp	r0, r4
   12878:	sbcs	r1, r1, r3
   1287c:	blt	129ec <__assert_fail@plt+0x1534>
   12880:	ldr	r1, [sp, #24]
   12884:	adds	r1, r1, r4
   12888:	str	r1, [sp, #24]
   1288c:	ldr	r1, [sp, #28]
   12890:	adc	r3, r1, r3
   12894:	ldr	r1, [sp, #80]	; 0x50
   12898:	str	r3, [sp, #28]
   1289c:	ldr	r3, [sp, #2132]	; 0x854
   128a0:	cmp	r3, #0
   128a4:	ldrd	r2, [sp, #24]
   128a8:	strd	r2, [r1]
   128ac:	strd	r2, [sp, #32]
   128b0:	beq	122d8 <__assert_fail@plt+0xe20>
   128b4:	ldr	r3, [sp, #84]	; 0x54
   128b8:	ldrb	r0, [r3]
   128bc:	cmp	r0, #0
   128c0:	bne	128d8 <__assert_fail@plt+0x1420>
   128c4:	bl	111b8 <time@plt>
   128c8:	ldr	r2, [sp, #92]	; 0x5c
   128cc:	str	r0, [sp, #88]	; 0x58
   128d0:	cmp	r2, r0
   128d4:	bgt	122d8 <__assert_fail@plt+0xe20>
   128d8:	mov	r6, #1
   128dc:	mov	r7, #0
   128e0:	ldrd	r0, [sp, #24]
   128e4:	movw	r3, #434	; 0x1b2
   128e8:	add	r2, sp, #776	; 0x308
   128ec:	strd	r6, [sp]
   128f0:	strd	r6, [sp, #8]
   128f4:	bl	14048 <__assert_fail@plt+0x2b90>
   128f8:	mov	r9, r0
   128fc:	ldrd	sl, [sp, #32]
   12900:	orrs	r3, sl, fp
   12904:	moveq	sl, #100	; 0x64
   12908:	beq	12960 <__assert_fail@plt+0x14a8>
   1290c:	add	r3, pc, #388	; 0x184
   12910:	ldrd	r2, [r3]
   12914:	ldrd	r6, [sp, #24]
   12918:	cmp	r2, r6
   1291c:	sbcs	r3, r3, r7
   12920:	blt	12a50 <__assert_fail@plt+0x1598>
   12924:	adds	r3, r6, r6
   12928:	mov	r2, sl
   1292c:	adc	r1, r7, r7
   12930:	adds	r3, r3, r6
   12934:	adc	r1, r1, r7
   12938:	lsl	r0, r3, #5
   1293c:	lsl	ip, r1, #5
   12940:	adds	r0, r3, r0
   12944:	orr	ip, ip, r3, lsr #27
   12948:	mov	r3, fp
   1294c:	adc	r1, r1, ip
   12950:	adds	r0, r0, r6
   12954:	adc	r1, r1, r7
   12958:	bl	1c378 <__assert_fail@plt+0xaec0>
   1295c:	mov	sl, r0
   12960:	mov	r6, #1
   12964:	mov	r7, #0
   12968:	ldrd	r0, [sp, #32]
   1296c:	add	r2, sp, #1424	; 0x590
   12970:	mov	r3, #432	; 0x1b0
   12974:	add	r2, r2, #4
   12978:	strd	r6, [sp]
   1297c:	strd	r6, [sp, #8]
   12980:	bl	14048 <__assert_fail@plt+0x2b90>
   12984:	mov	r4, r0
   12988:	ldrd	r0, [sp, #24]
   1298c:	ldrd	r2, [sp, #32]
   12990:	cmp	r1, r3
   12994:	movw	r1, #51364	; 0xc8a4
   12998:	movt	r1, #1
   1299c:	cmpeq	r0, r2
   129a0:	mov	r2, #5
   129a4:	mov	r0, #0
   129a8:	moveq	r9, r4
   129ac:	bl	111e8 <dcgettext@plt>
   129b0:	ldr	ip, [sp, #76]	; 0x4c
   129b4:	mov	r1, #0
   129b8:	mov	r2, r0
   129bc:	mov	r0, r1
   129c0:	ldr	r3, [sp, #2128]	; 0x850
   129c4:	str	r3, [sp]
   129c8:	ldr	r3, [sp, #2132]	; 0x854
   129cc:	str	ip, [sp, #8]
   129d0:	str	r9, [sp, #12]
   129d4:	str	r4, [sp, #16]
   129d8:	str	sl, [sp, #20]
   129dc:	str	r3, [sp, #4]
   129e0:	ldr	r3, [sp, #40]	; 0x28
   129e4:	bl	1129c <error@plt>
   129e8:	b	12540 <__assert_fail@plt+0x1088>
   129ec:	mov	r2, #5
   129f0:	movw	r1, #51264	; 0xc840
   129f4:	movt	r1, #1
   129f8:	mov	r0, #0
   129fc:	bl	111e8 <dcgettext@plt>
   12a00:	mov	r2, r0
   12a04:	mov	r1, #0
   12a08:	ldr	r3, [sp, #40]	; 0x28
   12a0c:	b	121a8 <__assert_fail@plt+0xcf0>
   12a10:	add	r3, sp, #124	; 0x7c
   12a14:	str	r3, [sp, #84]	; 0x54
   12a18:	b	122d8 <__assert_fail@plt+0xe20>
   12a1c:	mov	r0, r8
   12a20:	ldr	r1, [sp, #40]	; 0x28
   12a24:	bl	11fc0 <__assert_fail@plt+0xb08>
   12a28:	cmp	r0, #0
   12a2c:	beq	12a7c <__assert_fail@plt+0x15c4>
   12a30:	bl	11338 <__errno_location@plt>
   12a34:	ldr	r3, [r0]
   12a38:	mov	r0, r5
   12a3c:	cmp	r3, #5
   12a40:	bne	121b4 <__assert_fail@plt+0xcfc>
   12a44:	bl	13fe8 <__assert_fail@plt+0x2b30>
   12a48:	mov	r0, #1
   12a4c:	b	121bc <__assert_fail@plt+0xd04>
   12a50:	mov	r0, sl
   12a54:	mov	r2, #100	; 0x64
   12a58:	mov	r3, #0
   12a5c:	mov	r1, fp
   12a60:	bl	1c2a4 <__assert_fail@plt+0xadec>
   12a64:	mov	r2, r0
   12a68:	mov	r3, r1
   12a6c:	ldrd	r0, [sp, #24]
   12a70:	bl	1c378 <__assert_fail@plt+0xaec0>
   12a74:	mov	sl, r0
   12a78:	b	12960 <__assert_fail@plt+0x14a8>
   12a7c:	mov	r0, r5
   12a80:	bl	13fe8 <__assert_fail@plt+0x2b30>
   12a84:	ldr	r0, [sp, #48]	; 0x30
   12a88:	b	121bc <__assert_fail@plt+0xd04>
   12a8c:	bl	11338 <__errno_location@plt>
   12a90:	ldr	r4, [r0]
   12a94:	b	12188 <__assert_fail@plt+0xcd0>
   12a98:			; <UNDEFINED> instruction: 0xf5c28f5c
   12a9c:	addeq	r5, pc, #40, 24	; 0x2800
   12aa0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12aa4:	mov	r4, r3
   12aa8:	ldrb	r3, [r3, #20]
   12aac:	strd	r6, [sp, #8]
   12ab0:	strd	r8, [sp, #16]
   12ab4:	mov	r8, r0
   12ab8:	mov	r9, r1
   12abc:	strd	sl, [sp, #24]
   12ac0:	mov	r1, r0
   12ac4:	mov	r0, #3
   12ac8:	str	lr, [sp, #32]
   12acc:	sub	sp, sp, #188	; 0xbc
   12ad0:	cmp	r3, #0
   12ad4:	ldrne	r3, [r4, #4]
   12ad8:	str	r2, [sp, #36]	; 0x24
   12adc:	ldrbne	r2, [r4, #22]
   12ae0:	addne	r3, r2, r3
   12ae4:	add	r2, sp, #80	; 0x50
   12ae8:	str	r3, [sp, #56]	; 0x38
   12aec:	bl	11230 <__fxstat64@plt>
   12af0:	cmp	r0, #0
   12af4:	bne	12c68 <__assert_fail@plt+0x17b0>
   12af8:	ldr	r3, [sp, #96]	; 0x60
   12afc:	and	r3, r3, #61440	; 0xf000
   12b00:	cmp	r3, #8192	; 0x2000
   12b04:	beq	12f00 <__assert_fail@plt+0x1a48>
   12b08:	cmp	r3, #49152	; 0xc000
   12b0c:	cmpne	r3, #4096	; 0x1000
   12b10:	moveq	r2, #1
   12b14:	movne	r2, #0
   12b18:	str	r2, [sp, #32]
   12b1c:	beq	12c1c <__assert_fail@plt+0x1764>
   12b20:	cmp	r3, #32768	; 0x8000
   12b24:	bne	12b38 <__assert_fail@plt+0x1680>
   12b28:	ldrd	r2, [sp, #128]	; 0x80
   12b2c:	cmp	r2, #0
   12b30:	sbcs	r3, r3, #0
   12b34:	blt	13054 <__assert_fail@plt+0x1b9c>
   12b38:	mov	r1, #4
   12b3c:	ldr	r0, [r4, #4]
   12b40:	bl	1a42c <__assert_fail@plt+0x8f74>
   12b44:	ldrd	r2, [r4, #8]
   12b48:	mov	sl, r0
   12b4c:	mov	r1, r3
   12b50:	mvn	r3, #0
   12b54:	cmp	r1, r3
   12b58:	ldr	r3, [sp, #96]	; 0x60
   12b5c:	mov	r0, r2
   12b60:	mvn	r2, #0
   12b64:	cmpeq	r0, r2
   12b68:	strd	r0, [sp, #40]	; 0x28
   12b6c:	and	r3, r3, #61440	; 0xf000
   12b70:	beq	12f1c <__assert_fail@plt+0x1a64>
   12b74:	cmp	r3, #32768	; 0x8000
   12b78:	beq	12ca4 <__assert_fail@plt+0x17ec>
   12b7c:	ldr	r3, [r4, #4]
   12b80:	cmp	r3, #0
   12b84:	str	r3, [sp, #16]
   12b88:	beq	13018 <__assert_fail@plt+0x1b60>
   12b8c:	mov	r2, #0
   12b90:	mov	r3, #0
   12b94:	strd	r2, [sp, #48]	; 0x30
   12b98:	mov	r3, #0
   12b9c:	movw	r6, #50616	; 0xc5b8
   12ba0:	movt	r6, #1
   12ba4:	mvn	r5, #1
   12ba8:	str	sl, [sp, #24]
   12bac:	mov	fp, r3
   12bb0:	str	r4, [sp, #60]	; 0x3c
   12bb4:	mov	r4, sl
   12bb8:	ldr	r7, [sp, #16]
   12bbc:	b	12bd8 <__assert_fail@plt+0x1720>
   12bc0:	rsb	r2, r5, #0
   12bc4:	cmp	r2, r7
   12bc8:	bcs	13004 <__assert_fail@plt+0x1b4c>
   12bcc:	sub	fp, fp, r5
   12bd0:	add	r7, r7, r5
   12bd4:	ldr	r5, [r6]
   12bd8:	cmp	r5, #0
   12bdc:	ldreq	r6, [pc, #1292]	; 130f0 <__assert_fail@plt+0x1c38>
   12be0:	mvneq	r5, #1
   12be4:	beq	12bc0 <__assert_fail@plt+0x1708>
   12be8:	add	r6, r6, #4
   12bec:	lsl	sl, r5, #2
   12bf0:	mov	r0, r4
   12bf4:	mov	r1, r6
   12bf8:	blt	12bc0 <__assert_fail@plt+0x1708>
   12bfc:	cmp	r5, r7
   12c00:	mov	r2, sl
   12c04:	bhi	12da4 <__assert_fail@plt+0x18ec>
   12c08:	bl	11194 <memcpy@plt>
   12c0c:	add	r6, r6, sl
   12c10:	add	r4, r4, sl
   12c14:	sub	r7, r7, r5
   12c18:	b	12bd4 <__assert_fail@plt+0x171c>
   12c1c:	mov	r2, #5
   12c20:	movw	r1, #51444	; 0xc8f4
   12c24:	movt	r1, #1
   12c28:	mov	r0, #0
   12c2c:	bl	111e8 <dcgettext@plt>
   12c30:	mov	r1, #0
   12c34:	mov	r2, r0
   12c38:	mov	r3, r9
   12c3c:	mov	r0, r1
   12c40:	str	r1, [sp, #32]
   12c44:	bl	1129c <error@plt>
   12c48:	ldr	r0, [sp, #32]
   12c4c:	add	sp, sp, #188	; 0xbc
   12c50:	ldrd	r4, [sp]
   12c54:	ldrd	r6, [sp, #8]
   12c58:	ldrd	r8, [sp, #16]
   12c5c:	ldrd	sl, [sp, #24]
   12c60:	add	sp, sp, #32
   12c64:	pop	{pc}		; (ldr pc, [sp], #4)
   12c68:	bl	11338 <__errno_location@plt>
   12c6c:	ldr	r4, [r0]
   12c70:	mov	r2, #5
   12c74:	movw	r1, #51424	; 0xc8e0
   12c78:	movt	r1, #1
   12c7c:	mov	r0, #0
   12c80:	bl	111e8 <dcgettext@plt>
   12c84:	mov	r2, r0
   12c88:	mov	r3, r9
   12c8c:	mov	r0, #0
   12c90:	mov	r1, r4
   12c94:	bl	1129c <error@plt>
   12c98:	mov	r3, #0
   12c9c:	str	r3, [sp, #32]
   12ca0:	b	12c48 <__assert_fail@plt+0x1790>
   12ca4:	ldrd	r0, [sp, #128]	; 0x80
   12ca8:	ldr	r2, [sp, #136]	; 0x88
   12cac:	strd	r0, [sp, #48]	; 0x30
   12cb0:	ldrd	r0, [sp, #40]	; 0x28
   12cb4:	sub	r3, r2, #1
   12cb8:	cmp	r3, #536870912	; 0x20000000
   12cbc:	movcs	r2, #512	; 0x200
   12cc0:	asr	r3, r2, #31
   12cc4:	cmp	r0, r2
   12cc8:	sbcs	ip, r1, r3
   12ccc:	movlt	r3, r1
   12cd0:	movlt	r2, r0
   12cd4:	ldrd	r0, [sp, #48]	; 0x30
   12cd8:	cmp	r0, r2
   12cdc:	sbcs	r3, r1, r3
   12ce0:	bge	12b7c <__assert_fail@plt+0x16c4>
   12ce4:	ldr	r3, [r4, #4]
   12ce8:	cmp	r3, #0
   12cec:	str	r3, [sp, #16]
   12cf0:	bne	12b98 <__assert_fail@plt+0x16e0>
   12cf4:	ldr	r0, [sp, #36]	; 0x24
   12cf8:	bl	18d20 <__assert_fail@plt+0x7868>
   12cfc:	ldrd	r2, [sp, #48]	; 0x30
   12d00:	mov	r7, r0
   12d04:	orrs	r1, r2, r3
   12d08:	beq	12d7c <__assert_fail@plt+0x18c4>
   12d0c:	mov	fp, #1
   12d10:	mov	r6, #0
   12d14:	strd	r2, [sp, #72]	; 0x48
   12d18:	mov	r5, #0
   12d1c:	ldrb	r3, [r4, #22]
   12d20:	mov	r1, #0
   12d24:	ldr	r2, [r4, #4]
   12d28:	add	r3, r3, r2
   12d2c:	cmp	r3, r5
   12d30:	bls	12d80 <__assert_fail@plt+0x18c8>
   12d34:	cmp	r2, r5
   12d38:	add	r3, sp, #72	; 0x48
   12d3c:	ldrhi	r1, [sl, r5, lsl #2]
   12d40:	add	r5, r5, #1
   12d44:	mov	r2, r9
   12d48:	mov	r0, r8
   12d4c:	stm	sp, {r1, r7}
   12d50:	add	r1, sp, #80	; 0x50
   12d54:	str	r5, [sp, #8]
   12d58:	str	r6, [sp, #12]
   12d5c:	bl	12090 <__assert_fail@plt+0xbd8>
   12d60:	cmp	r0, #0
   12d64:	beq	12d1c <__assert_fail@plt+0x1864>
   12d68:	mov	fp, #0
   12d6c:	bge	12d1c <__assert_fail@plt+0x1864>
   12d70:	mov	r0, sl
   12d74:	bl	13fe8 <__assert_fail@plt+0x2b30>
   12d78:	b	12c48 <__assert_fail@plt+0x1790>
   12d7c:	mov	fp, #1
   12d80:	ldrd	r2, [sp, #40]	; 0x28
   12d84:	orrs	r1, r2, r3
   12d88:	beq	13084 <__assert_fail@plt+0x1bcc>
   12d8c:	strd	r2, [sp, #72]	; 0x48
   12d90:	mov	r2, #0
   12d94:	mov	r3, #0
   12d98:	ldr	r6, [sp, #56]	; 0x38
   12d9c:	strd	r2, [sp, #40]	; 0x28
   12da0:	b	12d18 <__assert_fail@plt+0x1860>
   12da4:	cmp	r7, #1
   12da8:	ldr	sl, [sp, #24]
   12dac:	str	fp, [sp, #24]
   12db0:	mov	fp, r4
   12db4:	ldr	r4, [sp, #60]	; 0x3c
   12db8:	bls	12e48 <__assert_fail@plt+0x1990>
   12dbc:	add	r3, r7, r7, lsl #1
   12dc0:	cmp	r5, r3
   12dc4:	bhi	12e48 <__assert_fail@plt+0x1990>
   12dc8:	asr	r3, r5, #31
   12dcc:	subs	r1, r5, #1
   12dd0:	str	sl, [sp, #60]	; 0x3c
   12dd4:	sub	r5, r5, r1
   12dd8:	strd	r8, [sp, #64]	; 0x40
   12ddc:	mov	r8, r1
   12de0:	sbc	r2, r3, #0
   12de4:	ldr	sl, [sp, #36]	; 0x24
   12de8:	mov	r9, r2
   12dec:	b	12df8 <__assert_fail@plt+0x1940>
   12df0:	subs	r8, r8, #1
   12df4:	sbc	r9, r9, #0
   12df8:	add	r1, r5, r8
   12dfc:	mov	r2, r8
   12e00:	cmp	r7, r1
   12e04:	mov	r3, r9
   12e08:	mov	r0, sl
   12e0c:	add	r6, r6, #4
   12e10:	beq	12e28 <__assert_fail@plt+0x1970>
   12e14:	bl	18d28 <__assert_fail@plt+0x7870>
   12e18:	mov	r3, #0
   12e1c:	cmp	r1, r3
   12e20:	cmpeq	r0, r7
   12e24:	bcs	12df0 <__assert_fail@plt+0x1938>
   12e28:	ldr	r3, [r6, #-4]
   12e2c:	subs	r7, r7, #1
   12e30:	str	r3, [fp], #4
   12e34:	bne	12df0 <__assert_fail@plt+0x1938>
   12e38:	ldr	r3, [sp, #24]
   12e3c:	ldr	sl, [sp, #60]	; 0x3c
   12e40:	ldrd	r8, [sp, #64]	; 0x40
   12e44:	b	12e54 <__assert_fail@plt+0x199c>
   12e48:	ldr	r3, [sp, #24]
   12e4c:	add	r3, r3, r7
   12e50:	str	r3, [sp, #24]
   12e54:	ldr	r2, [sp, #16]
   12e58:	sub	r7, r3, #1
   12e5c:	mov	r5, #0
   12e60:	mov	fp, r7
   12e64:	sub	r6, r2, r3
   12e68:	sub	r3, r2, #1
   12e6c:	str	r3, [sp, #24]
   12e70:	ldr	r3, [sp, #24]
   12e74:	cmp	fp, r7
   12e78:	add	r3, r3, fp
   12e7c:	bhi	12ebc <__assert_fail@plt+0x1a04>
   12e80:	ldr	r2, [sl, r5, lsl #2]
   12e84:	sub	fp, r3, r7
   12e88:	add	r3, r6, #1
   12e8c:	str	r2, [sl, r6, lsl #2]
   12e90:	mov	r6, r3
   12e94:	mvn	r3, #0
   12e98:	str	r3, [sl, r5, lsl #2]
   12e9c:	add	r5, r5, #1
   12ea0:	ldr	r3, [sp, #16]
   12ea4:	cmp	r5, r3
   12ea8:	beq	12cf4 <__assert_fail@plt+0x183c>
   12eac:	ldr	r3, [sp, #24]
   12eb0:	cmp	fp, r7
   12eb4:	add	r3, r3, fp
   12eb8:	bls	12e80 <__assert_fail@plt+0x19c8>
   12ebc:	sub	r2, r6, r5
   12ec0:	mov	r3, #0
   12ec4:	ldr	r0, [sp, #36]	; 0x24
   12ec8:	subs	r2, r2, #1
   12ecc:	sub	fp, fp, r7
   12ed0:	sbc	r3, r3, #0
   12ed4:	bl	18d28 <__assert_fail@plt+0x7870>
   12ed8:	add	r0, r5, r0
   12edc:	ldr	r3, [sl, r5, lsl #2]
   12ee0:	ldr	r2, [sl, r0, lsl #2]
   12ee4:	str	r2, [sl, r5, lsl #2]
   12ee8:	add	r5, r5, #1
   12eec:	ldr	r2, [sp, #16]
   12ef0:	str	r3, [sl, r0, lsl #2]
   12ef4:	cmp	r5, r2
   12ef8:	bne	12e70 <__assert_fail@plt+0x19b8>
   12efc:	b	12cf4 <__assert_fail@plt+0x183c>
   12f00:	mov	r0, r8
   12f04:	bl	1147c <isatty@plt>
   12f08:	cmp	r0, #0
   12f0c:	bne	12c1c <__assert_fail@plt+0x1764>
   12f10:	ldr	r3, [sp, #96]	; 0x60
   12f14:	and	r3, r3, #61440	; 0xf000
   12f18:	b	12b08 <__assert_fail@plt+0x1650>
   12f1c:	cmp	r3, #32768	; 0x8000
   12f20:	bne	1302c <__assert_fail@plt+0x1b74>
   12f24:	ldrb	r3, [r4, #21]
   12f28:	ldrd	r0, [sp, #128]	; 0x80
   12f2c:	cmp	r3, #0
   12f30:	strd	r0, [sp, #40]	; 0x28
   12f34:	bne	12b7c <__assert_fail@plt+0x16c4>
   12f38:	ldr	r6, [sp, #136]	; 0x88
   12f3c:	sub	r3, r6, #1
   12f40:	cmp	r3, #536870912	; 0x20000000
   12f44:	movcs	r6, #512	; 0x200
   12f48:	asr	r7, r6, #31
   12f4c:	mov	r2, r6
   12f50:	mov	r3, r7
   12f54:	bl	1c2a4 <__assert_fail@plt+0xadec>
   12f58:	mov	r0, r2
   12f5c:	mov	r1, r3
   12f60:	ldrd	r2, [sp, #40]	; 0x28
   12f64:	mov	ip, r2
   12f68:	orrs	r3, ip, r3
   12f6c:	ldrd	r2, [sp, #40]	; 0x28
   12f70:	movne	ip, #1
   12f74:	moveq	ip, #0
   12f78:	cmp	r2, r6
   12f7c:	sbcs	r3, r3, r7
   12f80:	movge	r3, #0
   12f84:	andlt	r3, ip, #1
   12f88:	cmp	r3, #0
   12f8c:	ldrdne	r2, [sp, #40]	; 0x28
   12f90:	moveq	r2, #0
   12f94:	moveq	r3, #0
   12f98:	strd	r2, [sp, #48]	; 0x30
   12f9c:	orrs	r3, r0, r1
   12fa0:	beq	12ce4 <__assert_fail@plt+0x182c>
   12fa4:	subs	r3, r6, r0
   12fa8:	sbc	r2, r7, r1
   12fac:	ldrd	r0, [sp, #40]	; 0x28
   12fb0:	str	r3, [sp, #24]
   12fb4:	mvn	r3, #0
   12fb8:	str	r2, [sp, #28]
   12fbc:	mvn	r2, #-2147483648	; 0x80000000
   12fc0:	subs	r3, r3, r0
   12fc4:	str	r3, [sp, #16]
   12fc8:	sbc	r3, r2, r1
   12fcc:	str	r3, [sp, #20]
   12fd0:	ldrd	r0, [sp, #16]
   12fd4:	ldrd	r2, [sp, #24]
   12fd8:	cmp	r2, r0
   12fdc:	sbcs	r1, r3, r1
   12fe0:	ldr	r1, [sp, #40]	; 0x28
   12fe4:	strdlt	r2, [sp, #16]
   12fe8:	ldrd	r2, [sp, #16]
   12fec:	adds	r1, r1, r2
   12ff0:	str	r1, [sp, #40]	; 0x28
   12ff4:	ldr	r1, [sp, #44]	; 0x2c
   12ff8:	adc	r3, r1, r3
   12ffc:	str	r3, [sp, #44]	; 0x2c
   13000:	b	12ce4 <__assert_fail@plt+0x182c>
   13004:	add	r3, fp, r7
   13008:	ldr	sl, [sp, #24]
   1300c:	str	r3, [sp, #24]
   13010:	ldr	r4, [sp, #60]	; 0x3c
   13014:	b	12e54 <__assert_fail@plt+0x199c>
   13018:	ldr	r0, [sp, #36]	; 0x24
   1301c:	mov	fp, #1
   13020:	bl	18d20 <__assert_fail@plt+0x7868>
   13024:	mov	r7, r0
   13028:	b	12d80 <__assert_fail@plt+0x18c8>
   1302c:	mov	r1, #2
   13030:	mov	r3, #0
   13034:	mov	r2, #0
   13038:	mov	r0, r8
   1303c:	str	r1, [sp]
   13040:	bl	11260 <lseek64@plt>
   13044:	cmp	r0, #1
   13048:	sbcs	r3, r1, #0
   1304c:	strdge	r0, [sp, #40]	; 0x28
   13050:	b	12b7c <__assert_fail@plt+0x16c4>
   13054:	ldr	r4, [sp, #32]
   13058:	mov	r2, #5
   1305c:	movw	r1, #51468	; 0xc90c
   13060:	movt	r1, #1
   13064:	mov	r0, r4
   13068:	bl	111e8 <dcgettext@plt>
   1306c:	mov	r2, r0
   13070:	mov	r3, r9
   13074:	mov	r1, r4
   13078:	mov	r0, r4
   1307c:	bl	1129c <error@plt>
   13080:	b	12c48 <__assert_fail@plt+0x1790>
   13084:	ldr	r3, [r4, #16]
   13088:	cmp	r3, #0
   1308c:	bne	13098 <__assert_fail@plt+0x1be0>
   13090:	str	fp, [sp, #32]
   13094:	b	12d70 <__assert_fail@plt+0x18b8>
   13098:	mov	r0, r8
   1309c:	ldrd	r2, [sp, #40]	; 0x28
   130a0:	bl	111c4 <ftruncate64@plt>
   130a4:	cmp	r0, #0
   130a8:	beq	13090 <__assert_fail@plt+0x1bd8>
   130ac:	ldr	r3, [sp, #96]	; 0x60
   130b0:	and	r3, r3, #61440	; 0xf000
   130b4:	cmp	r3, #32768	; 0x8000
   130b8:	bne	13090 <__assert_fail@plt+0x1bd8>
   130bc:	bl	11338 <__errno_location@plt>
   130c0:	ldr	r4, [r0]
   130c4:	mov	r2, #5
   130c8:	movw	r1, #51496	; 0xc928
   130cc:	movt	r1, #1
   130d0:	mov	r0, #0
   130d4:	bl	111e8 <dcgettext@plt>
   130d8:	mov	r2, r0
   130dc:	mov	r3, r9
   130e0:	mov	r0, #0
   130e4:	mov	r1, r4
   130e8:	bl	1129c <error@plt>
   130ec:	b	12d70 <__assert_fail@plt+0x18b8>
   130f0:			; <UNDEFINED> instruction: 0x0001c5bc
   130f4:	subs	r4, r0, #0
   130f8:	str	r7, [sp, #-8]!
   130fc:	str	lr, [sp, #4]
   13100:	sub	sp, sp, #56	; 0x38
   13104:	beq	1314c <__assert_fail@plt+0x1c94>
   13108:	movw	r3, #57776	; 0xe1b0
   1310c:	movt	r3, #2
   13110:	ldr	r5, [r3]
   13114:	mov	r2, #5
   13118:	movw	r1, #51528	; 0xc948
   1311c:	movt	r1, #1
   13120:	mov	r0, #0
   13124:	bl	111e8 <dcgettext@plt>
   13128:	movw	r3, #57808	; 0xe1d0
   1312c:	movt	r3, #2
   13130:	mov	r2, r0
   13134:	mov	r1, #1
   13138:	ldr	r3, [r3]
   1313c:	mov	r0, r5
   13140:	bl	113a4 <__fprintf_chk@plt>
   13144:	mov	r0, r4
   13148:	bl	11308 <exit@plt>
   1314c:	mov	r2, #5
   13150:	movw	r1, #51568	; 0xc970
   13154:	movt	r1, #1
   13158:	movw	r5, #57780	; 0xe1b4
   1315c:	movt	r5, #2
   13160:	bl	111e8 <dcgettext@plt>
   13164:	movw	r3, #57808	; 0xe1d0
   13168:	movt	r3, #2
   1316c:	mov	r1, r0
   13170:	mov	r0, #1
   13174:	ldr	r2, [r3]
   13178:	bl	11380 <__printf_chk@plt>
   1317c:	mov	r2, #5
   13180:	movw	r1, #51600	; 0xc990
   13184:	movt	r1, #1
   13188:	mov	r0, r4
   1318c:	bl	111e8 <dcgettext@plt>
   13190:	ldr	r1, [r5]
   13194:	bl	11134 <fputs_unlocked@plt>
   13198:	mov	r2, #5
   1319c:	movw	r1, #51736	; 0xca18
   131a0:	movt	r1, #1
   131a4:	mov	r0, r4
   131a8:	bl	111e8 <dcgettext@plt>
   131ac:	ldr	r1, [r5]
   131b0:	bl	11134 <fputs_unlocked@plt>
   131b4:	mov	r2, #5
   131b8:	movw	r1, #51776	; 0xca40
   131bc:	movt	r1, #1
   131c0:	mov	r0, r4
   131c4:	bl	111e8 <dcgettext@plt>
   131c8:	ldr	r1, [r5]
   131cc:	bl	11134 <fputs_unlocked@plt>
   131d0:	mov	r2, #5
   131d4:	movw	r1, #51852	; 0xca8c
   131d8:	movt	r1, #1
   131dc:	mov	r0, r4
   131e0:	bl	111e8 <dcgettext@plt>
   131e4:	mov	r1, r0
   131e8:	mov	r2, #3
   131ec:	mov	r0, #1
   131f0:	bl	11380 <__printf_chk@plt>
   131f4:	mov	r2, #5
   131f8:	movw	r1, #52116	; 0xcb94
   131fc:	movt	r1, #1
   13200:	mov	r0, r4
   13204:	bl	111e8 <dcgettext@plt>
   13208:	ldr	r1, [r5]
   1320c:	bl	11134 <fputs_unlocked@plt>
   13210:	mov	r2, #5
   13214:	movw	r1, #52484	; 0xcd04
   13218:	movt	r1, #1
   1321c:	mov	r0, r4
   13220:	bl	111e8 <dcgettext@plt>
   13224:	ldr	r1, [r5]
   13228:	bl	11134 <fputs_unlocked@plt>
   1322c:	mov	r2, #5
   13230:	movw	r1, #52532	; 0xcd34
   13234:	movt	r1, #1
   13238:	mov	r0, r4
   1323c:	bl	111e8 <dcgettext@plt>
   13240:	ldr	r1, [r5]
   13244:	bl	11134 <fputs_unlocked@plt>
   13248:	mov	r2, #5
   1324c:	movw	r1, #52588	; 0xcd6c
   13250:	movt	r1, #1
   13254:	mov	r0, r4
   13258:	bl	111e8 <dcgettext@plt>
   1325c:	ldr	r1, [r5]
   13260:	bl	11134 <fputs_unlocked@plt>
   13264:	mov	r2, #5
   13268:	movw	r1, #53072	; 0xcf50
   1326c:	movt	r1, #1
   13270:	mov	r0, r4
   13274:	bl	111e8 <dcgettext@plt>
   13278:	ldr	r1, [r5]
   1327c:	bl	11134 <fputs_unlocked@plt>
   13280:	movw	r0, #50616	; 0xc5b8
   13284:	movt	r0, #1
   13288:	ldr	ip, [r0, #220]	; 0xdc
   1328c:	add	lr, r0, #220	; 0xdc
   13290:	ldrd	r2, [r0, #228]	; 0xe4
   13294:	ldr	r6, [r0, #224]	; 0xe0
   13298:	subs	r1, ip, #0
   1329c:	str	ip, [sp]
   132a0:	ldrd	r8, [r0, #236]	; 0xec
   132a4:	strd	r2, [sp, #8]
   132a8:	ldrd	r2, [r0, #244]	; 0xf4
   132ac:	str	r6, [sp, #4]
   132b0:	ldrd	r6, [r0, #252]	; 0xfc
   132b4:	strd	r8, [sp, #16]
   132b8:	ldrd	r8, [lr, #40]	; 0x28
   132bc:	strd	r2, [sp, #24]
   132c0:	ldrd	r2, [lr, #48]	; 0x30
   132c4:	strd	r6, [sp, #32]
   132c8:	movwne	r7, #51520	; 0xc940
   132cc:	mov	r6, sp
   132d0:	movtne	r7, #1
   132d4:	strd	r8, [sp, #40]	; 0x28
   132d8:	strd	r2, [sp, #48]	; 0x30
   132dc:	bne	133d4 <__assert_fail@plt+0x1f1c>
   132e0:	ldr	r6, [r6, #4]
   132e4:	movw	r1, #53360	; 0xd070
   132e8:	movt	r1, #1
   132ec:	mov	r2, #5
   132f0:	cmp	r6, #0
   132f4:	beq	133e8 <__assert_fail@plt+0x1f30>
   132f8:	mov	r0, #0
   132fc:	bl	111e8 <dcgettext@plt>
   13300:	mov	r1, r0
   13304:	movw	r3, #53384	; 0xd088
   13308:	movt	r3, #1
   1330c:	movw	r2, #53424	; 0xd0b0
   13310:	movt	r2, #1
   13314:	mov	r0, #1
   13318:	bl	11380 <__printf_chk@plt>
   1331c:	mov	r1, #0
   13320:	mov	r0, #5
   13324:	bl	113e0 <setlocale@plt>
   13328:	cmp	r0, #0
   1332c:	movweq	r7, #51520	; 0xc940
   13330:	movteq	r7, #1
   13334:	beq	13358 <__assert_fail@plt+0x1ea0>
   13338:	movw	r1, #53440	; 0xd0c0
   1333c:	movt	r1, #1
   13340:	mov	r2, #3
   13344:	movw	r7, #51520	; 0xc940
   13348:	movt	r7, #1
   1334c:	bl	11488 <strncmp@plt>
   13350:	cmp	r0, #0
   13354:	bne	134a0 <__assert_fail@plt+0x1fe8>
   13358:	mov	r2, #5
   1335c:	movw	r1, #53516	; 0xd10c
   13360:	movt	r1, #1
   13364:	mov	r0, #0
   13368:	bl	111e8 <dcgettext@plt>
   1336c:	mov	r1, r0
   13370:	movw	r3, #51520	; 0xc940
   13374:	movt	r3, #1
   13378:	movw	r2, #53384	; 0xd088
   1337c:	movt	r2, #1
   13380:	mov	r0, #1
   13384:	bl	11380 <__printf_chk@plt>
   13388:	mov	r2, #5
   1338c:	movw	r1, #53544	; 0xd128
   13390:	movt	r1, #1
   13394:	mov	r0, #0
   13398:	bl	111e8 <dcgettext@plt>
   1339c:	movw	r2, #54012	; 0xd2fc
   133a0:	movt	r2, #1
   133a4:	cmp	r6, r7
   133a8:	movw	r3, #53068	; 0xcf4c
   133ac:	movt	r3, #1
   133b0:	mov	r1, r0
   133b4:	moveq	r3, r2
   133b8:	mov	r2, r6
   133bc:	mov	r0, #1
   133c0:	bl	11380 <__printf_chk@plt>
   133c4:	b	13144 <__assert_fail@plt+0x1c8c>
   133c8:	ldr	r1, [r6, #8]!
   133cc:	cmp	r1, #0
   133d0:	beq	132e0 <__assert_fail@plt+0x1e28>
   133d4:	mov	r0, r7
   133d8:	bl	11158 <strcmp@plt>
   133dc:	cmp	r0, #0
   133e0:	bne	133c8 <__assert_fail@plt+0x1f10>
   133e4:	b	132e0 <__assert_fail@plt+0x1e28>
   133e8:	mov	r0, r6
   133ec:	bl	111e8 <dcgettext@plt>
   133f0:	mov	r1, r0
   133f4:	movw	r3, #53384	; 0xd088
   133f8:	movt	r3, #1
   133fc:	movw	r2, #53424	; 0xd0b0
   13400:	movt	r2, #1
   13404:	mov	r0, #1
   13408:	bl	11380 <__printf_chk@plt>
   1340c:	mov	r1, r6
   13410:	mov	r0, #5
   13414:	bl	113e0 <setlocale@plt>
   13418:	cmp	r0, #0
   1341c:	beq	13438 <__assert_fail@plt+0x1f80>
   13420:	movw	r1, #53440	; 0xd0c0
   13424:	movt	r1, #1
   13428:	mov	r2, #3
   1342c:	bl	11488 <strncmp@plt>
   13430:	cmp	r0, #0
   13434:	bne	13494 <__assert_fail@plt+0x1fdc>
   13438:	mov	r2, #5
   1343c:	movw	r1, #53516	; 0xd10c
   13440:	movt	r1, #1
   13444:	mov	r0, #0
   13448:	bl	111e8 <dcgettext@plt>
   1344c:	mov	r1, r0
   13450:	movw	r3, #51520	; 0xc940
   13454:	movt	r3, #1
   13458:	movw	r2, #53384	; 0xd088
   1345c:	movt	r2, #1
   13460:	mov	r0, #1
   13464:	bl	11380 <__printf_chk@plt>
   13468:	movw	r1, #53544	; 0xd128
   1346c:	movt	r1, #1
   13470:	mov	r2, #5
   13474:	mov	r0, #0
   13478:	bl	111e8 <dcgettext@plt>
   1347c:	movw	r6, #51520	; 0xc940
   13480:	movt	r6, #1
   13484:	movw	r3, #54012	; 0xd2fc
   13488:	movt	r3, #1
   1348c:	mov	r1, r0
   13490:	b	133b8 <__assert_fail@plt+0x1f00>
   13494:	movw	r7, #51520	; 0xc940
   13498:	movt	r7, #1
   1349c:	mov	r6, r7
   134a0:	mov	r2, #5
   134a4:	movw	r1, #53444	; 0xd0c4
   134a8:	movt	r1, #1
   134ac:	mov	r0, #0
   134b0:	bl	111e8 <dcgettext@plt>
   134b4:	ldr	r1, [r5]
   134b8:	bl	11134 <fputs_unlocked@plt>
   134bc:	b	13358 <__assert_fail@plt+0x1ea0>
   134c0:	mov	r0, #1
   134c4:	b	130f4 <__assert_fail@plt+0x1c3c>
   134c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   134cc:	mov	r4, r1
   134d0:	strd	r6, [sp, #8]
   134d4:	mov	r6, r2
   134d8:	strd	r8, [sp, #16]
   134dc:	mov	r8, r3
   134e0:	strd	sl, [sp, #24]
   134e4:	mov	sl, r0
   134e8:	str	lr, [sp, #32]
   134ec:	sub	sp, sp, #12
   134f0:	str	r2, [sp]
   134f4:	bl	11314 <strlen@plt>
   134f8:	ldr	fp, [r4]
   134fc:	cmp	fp, #0
   13500:	beq	13610 <__assert_fail@plt+0x2158>
   13504:	cmp	r6, #0
   13508:	mov	r7, r0
   1350c:	beq	135bc <__assert_fail@plt+0x2104>
   13510:	mov	r5, #0
   13514:	mvn	r9, #0
   13518:	str	r5, [sp, #4]
   1351c:	mov	r2, r7
   13520:	mov	r1, sl
   13524:	mov	r0, fp
   13528:	bl	11488 <strncmp@plt>
   1352c:	cmp	r0, #0
   13530:	mov	r0, fp
   13534:	bne	13574 <__assert_fail@plt+0x20bc>
   13538:	bl	11314 <strlen@plt>
   1353c:	ldr	r3, [sp]
   13540:	cmp	r0, r7
   13544:	mov	r2, r8
   13548:	mov	r1, r6
   1354c:	mla	r0, r8, r9, r3
   13550:	beq	135b4 <__assert_fail@plt+0x20fc>
   13554:	cmn	r9, #1
   13558:	moveq	r9, r5
   1355c:	beq	13574 <__assert_fail@plt+0x20bc>
   13560:	bl	111d0 <memcmp@plt>
   13564:	ldr	r3, [sp, #4]
   13568:	cmp	r0, #0
   1356c:	movne	r3, #1
   13570:	str	r3, [sp, #4]
   13574:	ldr	fp, [r4, #4]!
   13578:	add	r5, r5, #1
   1357c:	add	r6, r6, r8
   13580:	cmp	fp, #0
   13584:	bne	1351c <__assert_fail@plt+0x2064>
   13588:	ldr	r3, [sp, #4]
   1358c:	cmp	r3, #0
   13590:	mvnne	r9, #1
   13594:	mov	r0, r9
   13598:	add	sp, sp, #12
   1359c:	ldrd	r4, [sp]
   135a0:	ldrd	r6, [sp, #8]
   135a4:	ldrd	r8, [sp, #16]
   135a8:	ldrd	sl, [sp, #24]
   135ac:	add	sp, sp, #32
   135b0:	pop	{pc}		; (ldr pc, [sp], #4)
   135b4:	mov	r9, r5
   135b8:	b	13594 <__assert_fail@plt+0x20dc>
   135bc:	mov	r5, r6
   135c0:	mvn	r9, #0
   135c4:	mov	r2, r7
   135c8:	mov	r1, sl
   135cc:	mov	r0, fp
   135d0:	bl	11488 <strncmp@plt>
   135d4:	cmp	r0, #0
   135d8:	mov	r0, fp
   135dc:	bne	135f8 <__assert_fail@plt+0x2140>
   135e0:	bl	11314 <strlen@plt>
   135e4:	cmp	r0, r7
   135e8:	beq	135b4 <__assert_fail@plt+0x20fc>
   135ec:	cmn	r9, #1
   135f0:	moveq	r9, r5
   135f4:	movne	r6, #1
   135f8:	ldr	fp, [r4, #4]!
   135fc:	add	r5, r5, #1
   13600:	cmp	fp, #0
   13604:	bne	135c4 <__assert_fail@plt+0x210c>
   13608:	str	r6, [sp, #4]
   1360c:	b	13588 <__assert_fail@plt+0x20d0>
   13610:	mvn	r9, #0
   13614:	b	13594 <__assert_fail@plt+0x20dc>
   13618:	strd	r4, [sp, #-16]!
   1361c:	str	r6, [sp, #8]
   13620:	mov	r6, r0
   13624:	ldr	r0, [r1]
   13628:	str	lr, [sp, #12]
   1362c:	cmp	r0, #0
   13630:	beq	13674 <__assert_fail@plt+0x21bc>
   13634:	mov	r4, r1
   13638:	mov	r5, #0
   1363c:	b	13650 <__assert_fail@plt+0x2198>
   13640:	ldr	r0, [r4, #4]!
   13644:	add	r5, r5, #1
   13648:	cmp	r0, #0
   1364c:	beq	13674 <__assert_fail@plt+0x21bc>
   13650:	mov	r1, r6
   13654:	bl	11158 <strcmp@plt>
   13658:	cmp	r0, #0
   1365c:	bne	13640 <__assert_fail@plt+0x2188>
   13660:	mov	r0, r5
   13664:	ldrd	r4, [sp]
   13668:	ldr	r6, [sp, #8]
   1366c:	add	sp, sp, #12
   13670:	pop	{pc}		; (ldr pc, [sp], #4)
   13674:	ldrd	r4, [sp]
   13678:	mvn	r0, #0
   1367c:	ldr	r6, [sp, #8]
   13680:	add	sp, sp, #12
   13684:	pop	{pc}		; (ldr pc, [sp], #4)
   13688:	cmn	r2, #1
   1368c:	strd	r4, [sp, #-16]!
   13690:	mov	r5, r1
   13694:	movweq	r1, #54248	; 0xd3e8
   13698:	movwne	r1, #54276	; 0xd404
   1369c:	str	r6, [sp, #8]
   136a0:	movteq	r1, #1
   136a4:	movtne	r1, #1
   136a8:	str	lr, [sp, #12]
   136ac:	mov	r6, r0
   136b0:	sub	sp, sp, #8
   136b4:	mov	r2, #5
   136b8:	mov	r0, #0
   136bc:	bl	111e8 <dcgettext@plt>
   136c0:	mov	r4, r0
   136c4:	mov	r2, r5
   136c8:	mov	r1, #8
   136cc:	mov	r0, #0
   136d0:	bl	17708 <__assert_fail@plt+0x6250>
   136d4:	mov	r5, r0
   136d8:	mov	r1, r6
   136dc:	mov	r0, #1
   136e0:	bl	18b00 <__assert_fail@plt+0x7648>
   136e4:	mov	r1, #0
   136e8:	mov	r3, r5
   136ec:	str	r0, [sp]
   136f0:	mov	r2, r4
   136f4:	mov	r0, r1
   136f8:	bl	1129c <error@plt>
   136fc:	add	sp, sp, #8
   13700:	ldrd	r4, [sp]
   13704:	ldr	r6, [sp, #8]
   13708:	add	sp, sp, #12
   1370c:	pop	{pc}		; (ldr pc, [sp], #4)
   13710:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13714:	mov	r4, r1
   13718:	movw	r1, #54308	; 0xd424
   1371c:	movt	r1, #1
   13720:	strd	r6, [sp, #8]
   13724:	mov	r6, r0
   13728:	mov	r7, r2
   1372c:	mov	r0, #0
   13730:	strd	r8, [sp, #16]
   13734:	mov	r2, #5
   13738:	strd	sl, [sp, #24]
   1373c:	movw	sl, #57776	; 0xe1b0
   13740:	movt	sl, #2
   13744:	str	lr, [sp, #32]
   13748:	sub	sp, sp, #12
   1374c:	bl	111e8 <dcgettext@plt>
   13750:	ldr	r1, [sl]
   13754:	bl	11134 <fputs_unlocked@plt>
   13758:	ldr	fp, [r6]
   1375c:	cmp	fp, #0
   13760:	beq	13800 <__assert_fail@plt+0x2348>
   13764:	movw	r3, #54332	; 0xd43c
   13768:	movt	r3, #1
   1376c:	mov	r9, #0
   13770:	str	r3, [sp]
   13774:	movw	r3, #54340	; 0xd444
   13778:	movt	r3, #1
   1377c:	mov	r5, r9
   13780:	str	r3, [sp, #4]
   13784:	b	137bc <__assert_fail@plt+0x2304>
   13788:	mov	r0, fp
   1378c:	mov	r9, r4
   13790:	bl	18b10 <__assert_fail@plt+0x7658>
   13794:	mov	r3, r0
   13798:	mov	r1, #1
   1379c:	ldr	r2, [sp]
   137a0:	mov	r0, r8
   137a4:	bl	113a4 <__fprintf_chk@plt>
   137a8:	ldr	fp, [r6, #4]!
   137ac:	add	r5, r5, #1
   137b0:	add	r4, r4, r7
   137b4:	cmp	fp, #0
   137b8:	beq	13800 <__assert_fail@plt+0x2348>
   137bc:	cmp	r5, #0
   137c0:	mov	r1, r4
   137c4:	ldr	r8, [sl]
   137c8:	mov	r2, r7
   137cc:	mov	r0, r9
   137d0:	beq	13788 <__assert_fail@plt+0x22d0>
   137d4:	bl	111d0 <memcmp@plt>
   137d8:	cmp	r0, #0
   137dc:	bne	13788 <__assert_fail@plt+0x22d0>
   137e0:	mov	r0, fp
   137e4:	bl	18b10 <__assert_fail@plt+0x7658>
   137e8:	mov	r3, r0
   137ec:	mov	r1, #1
   137f0:	ldr	r2, [sp, #4]
   137f4:	mov	r0, r8
   137f8:	bl	113a4 <__fprintf_chk@plt>
   137fc:	b	137a8 <__assert_fail@plt+0x22f0>
   13800:	ldr	r0, [sl]
   13804:	ldr	r3, [r0, #20]
   13808:	ldr	r2, [r0, #24]
   1380c:	cmp	r3, r2
   13810:	bcs	13840 <__assert_fail@plt+0x2388>
   13814:	add	r1, r3, #1
   13818:	mov	r2, #10
   1381c:	str	r1, [r0, #20]
   13820:	strb	r2, [r3]
   13824:	add	sp, sp, #12
   13828:	ldrd	r4, [sp]
   1382c:	ldrd	r6, [sp, #8]
   13830:	ldrd	r8, [sp, #16]
   13834:	ldrd	sl, [sp, #24]
   13838:	add	sp, sp, #32
   1383c:	pop	{pc}		; (ldr pc, [sp], #4)
   13840:	mov	r1, #10
   13844:	add	sp, sp, #12
   13848:	ldrd	r4, [sp]
   1384c:	ldrd	r6, [sp, #8]
   13850:	ldrd	r8, [sp, #16]
   13854:	ldrd	sl, [sp, #24]
   13858:	ldr	lr, [sp, #32]
   1385c:	add	sp, sp, #36	; 0x24
   13860:	b	113d4 <__overflow@plt>
   13864:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13868:	mov	r5, r1
   1386c:	strd	r6, [sp, #8]
   13870:	mov	r6, r2
   13874:	mov	r7, r3
   13878:	strd	r8, [sp, #16]
   1387c:	mov	r8, r0
   13880:	str	lr, [sp, #24]
   13884:	sub	sp, sp, #12
   13888:	ldrb	r4, [sp, #48]	; 0x30
   1388c:	cmp	r4, #0
   13890:	bne	1393c <__assert_fail@plt+0x2484>
   13894:	ldr	r0, [r2]
   13898:	cmp	r0, #0
   1389c:	movne	r9, r2
   138a0:	bne	13924 <__assert_fail@plt+0x246c>
   138a4:	movw	r1, #54248	; 0xd3e8
   138a8:	movt	r1, #1
   138ac:	mov	r2, #5
   138b0:	mov	r0, #0
   138b4:	bl	111e8 <dcgettext@plt>
   138b8:	mov	r9, r0
   138bc:	mov	r2, r5
   138c0:	mov	r1, #8
   138c4:	mov	r0, #0
   138c8:	bl	17708 <__assert_fail@plt+0x6250>
   138cc:	mov	r4, r0
   138d0:	mov	r1, r8
   138d4:	mov	r0, #1
   138d8:	bl	18b00 <__assert_fail@plt+0x7648>
   138dc:	mov	r1, #0
   138e0:	mov	r3, r4
   138e4:	str	r0, [sp]
   138e8:	mov	r2, r9
   138ec:	mov	r0, r1
   138f0:	bl	1129c <error@plt>
   138f4:	mov	r0, r6
   138f8:	mov	r1, r7
   138fc:	ldr	r2, [sp, #40]	; 0x28
   13900:	bl	13710 <__assert_fail@plt+0x2258>
   13904:	ldr	r3, [sp, #44]	; 0x2c
   13908:	blx	r3
   1390c:	mvn	r0, #0
   13910:	b	13958 <__assert_fail@plt+0x24a0>
   13914:	ldr	r0, [r9, #4]!
   13918:	add	r4, r4, #1
   1391c:	cmp	r0, #0
   13920:	beq	138a4 <__assert_fail@plt+0x23ec>
   13924:	mov	r1, r5
   13928:	bl	11158 <strcmp@plt>
   1392c:	cmp	r0, #0
   13930:	bne	13914 <__assert_fail@plt+0x245c>
   13934:	mov	r0, r4
   13938:	b	13958 <__assert_fail@plt+0x24a0>
   1393c:	mov	r2, r3
   13940:	mov	r1, r6
   13944:	ldr	r3, [sp, #40]	; 0x28
   13948:	mov	r0, r5
   1394c:	bl	134c8 <__assert_fail@plt+0x2010>
   13950:	cmp	r0, #0
   13954:	blt	13970 <__assert_fail@plt+0x24b8>
   13958:	add	sp, sp, #12
   1395c:	ldrd	r4, [sp]
   13960:	ldrd	r6, [sp, #8]
   13964:	ldrd	r8, [sp, #16]
   13968:	add	sp, sp, #24
   1396c:	pop	{pc}		; (ldr pc, [sp], #4)
   13970:	cmn	r0, #1
   13974:	beq	138a4 <__assert_fail@plt+0x23ec>
   13978:	movw	r1, #54276	; 0xd404
   1397c:	movt	r1, #1
   13980:	mov	r2, #5
   13984:	mov	r0, #0
   13988:	bl	111e8 <dcgettext@plt>
   1398c:	mov	r9, r0
   13990:	b	138bc <__assert_fail@plt+0x2404>
   13994:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13998:	strd	r6, [sp, #8]
   1399c:	ldr	r7, [r1]
   139a0:	str	r8, [sp, #16]
   139a4:	str	lr, [sp, #20]
   139a8:	cmp	r7, #0
   139ac:	beq	139ec <__assert_fail@plt+0x2534>
   139b0:	mov	r6, r3
   139b4:	mov	r8, r0
   139b8:	mov	r4, r2
   139bc:	mov	r5, r1
   139c0:	b	139d0 <__assert_fail@plt+0x2518>
   139c4:	ldr	r7, [r5, #4]!
   139c8:	cmp	r7, #0
   139cc:	beq	139ec <__assert_fail@plt+0x2534>
   139d0:	mov	r1, r4
   139d4:	mov	r2, r6
   139d8:	mov	r0, r8
   139dc:	add	r4, r4, r6
   139e0:	bl	111d0 <memcmp@plt>
   139e4:	cmp	r0, #0
   139e8:	bne	139c4 <__assert_fail@plt+0x250c>
   139ec:	mov	r0, r7
   139f0:	ldrd	r4, [sp]
   139f4:	ldrd	r6, [sp, #8]
   139f8:	ldr	r8, [sp, #16]
   139fc:	add	sp, sp, #20
   13a00:	pop	{pc}		; (ldr pc, [sp], #4)
   13a04:	ldrb	r3, [r0]
   13a08:	cmp	r3, #47	; 0x2f
   13a0c:	bne	13a1c <__assert_fail@plt+0x2564>
   13a10:	ldrb	r3, [r0, #1]!
   13a14:	cmp	r3, #47	; 0x2f
   13a18:	beq	13a10 <__assert_fail@plt+0x2558>
   13a1c:	cmp	r3, #0
   13a20:	beq	13a50 <__assert_fail@plt+0x2598>
   13a24:	mov	r2, r0
   13a28:	mov	r1, #0
   13a2c:	cmp	r3, #47	; 0x2f
   13a30:	moveq	r1, #1
   13a34:	beq	13a44 <__assert_fail@plt+0x258c>
   13a38:	cmp	r1, #0
   13a3c:	movne	r0, r2
   13a40:	movne	r1, #0
   13a44:	ldrb	r3, [r2, #1]!
   13a48:	cmp	r3, #0
   13a4c:	bne	13a2c <__assert_fail@plt+0x2574>
   13a50:	bx	lr
   13a54:	str	r4, [sp, #-8]!
   13a58:	mov	r4, r0
   13a5c:	str	lr, [sp, #4]
   13a60:	bl	11314 <strlen@plt>
   13a64:	cmp	r0, #1
   13a68:	bls	13a7c <__assert_fail@plt+0x25c4>
   13a6c:	sub	r2, r0, #1
   13a70:	ldrb	r1, [r4, r2]
   13a74:	cmp	r1, #47	; 0x2f
   13a78:	beq	13a88 <__assert_fail@plt+0x25d0>
   13a7c:	ldr	r4, [sp]
   13a80:	add	sp, sp, #4
   13a84:	pop	{pc}		; (ldr pc, [sp], #4)
   13a88:	cmp	r2, #1
   13a8c:	beq	13aa0 <__assert_fail@plt+0x25e8>
   13a90:	add	r1, r4, r0
   13a94:	ldrb	r1, [r1, #-2]
   13a98:	cmp	r1, #47	; 0x2f
   13a9c:	beq	13ab0 <__assert_fail@plt+0x25f8>
   13aa0:	ldr	r4, [sp]
   13aa4:	add	sp, sp, #4
   13aa8:	mov	r0, r2
   13aac:	pop	{pc}		; (ldr pc, [sp], #4)
   13ab0:	sub	r3, r0, #3
   13ab4:	rsb	r0, r4, #1
   13ab8:	add	r3, r4, r3
   13abc:	cmp	r3, r4
   13ac0:	add	r2, r0, r3
   13ac4:	beq	13aa0 <__assert_fail@plt+0x25e8>
   13ac8:	ldrb	r1, [r3], #-1
   13acc:	cmp	r1, #47	; 0x2f
   13ad0:	bne	13aa0 <__assert_fail@plt+0x25e8>
   13ad4:	b	13abc <__assert_fail@plt+0x2604>
   13ad8:	movw	r3, #57796	; 0xe1c4
   13adc:	movt	r3, #2
   13ae0:	str	r0, [r3]
   13ae4:	bx	lr
   13ae8:	movw	r3, #57796	; 0xe1c4
   13aec:	movt	r3, #2
   13af0:	strb	r0, [r3, #4]
   13af4:	bx	lr
   13af8:	movw	r3, #57780	; 0xe1b4
   13afc:	movt	r3, #2
   13b00:	strd	r4, [sp, #-16]!
   13b04:	ldr	r0, [r3]
   13b08:	str	r6, [sp, #8]
   13b0c:	str	lr, [sp, #12]
   13b10:	sub	sp, sp, #8
   13b14:	bl	1b9b0 <__assert_fail@plt+0xa4f8>
   13b18:	cmp	r0, #0
   13b1c:	beq	13b48 <__assert_fail@plt+0x2690>
   13b20:	movw	r4, #57796	; 0xe1c4
   13b24:	movt	r4, #2
   13b28:	ldrb	r6, [r4, #4]
   13b2c:	bl	11338 <__errno_location@plt>
   13b30:	mov	r5, r0
   13b34:	cmp	r6, #0
   13b38:	beq	13b74 <__assert_fail@plt+0x26bc>
   13b3c:	ldr	r3, [r0]
   13b40:	cmp	r3, #32
   13b44:	bne	13b74 <__assert_fail@plt+0x26bc>
   13b48:	movw	r3, #57776	; 0xe1b0
   13b4c:	movt	r3, #2
   13b50:	ldr	r0, [r3]
   13b54:	bl	1b9b0 <__assert_fail@plt+0xa4f8>
   13b58:	cmp	r0, #0
   13b5c:	bne	13bbc <__assert_fail@plt+0x2704>
   13b60:	add	sp, sp, #8
   13b64:	ldrd	r4, [sp]
   13b68:	ldr	r6, [sp, #8]
   13b6c:	add	sp, sp, #12
   13b70:	pop	{pc}		; (ldr pc, [sp], #4)
   13b74:	movw	r1, #54348	; 0xd44c
   13b78:	movt	r1, #1
   13b7c:	mov	r2, #5
   13b80:	mov	r0, #0
   13b84:	bl	111e8 <dcgettext@plt>
   13b88:	mov	r6, r0
   13b8c:	ldr	r0, [r4]
   13b90:	cmp	r0, #0
   13b94:	beq	13bcc <__assert_fail@plt+0x2714>
   13b98:	ldr	r4, [r5]
   13b9c:	bl	17f94 <__assert_fail@plt+0x6adc>
   13ba0:	mov	r3, r0
   13ba4:	movw	r2, #54360	; 0xd458
   13ba8:	movt	r2, #1
   13bac:	mov	r0, #0
   13bb0:	str	r6, [sp]
   13bb4:	mov	r1, r4
   13bb8:	bl	1129c <error@plt>
   13bbc:	movw	r3, #57688	; 0xe158
   13bc0:	movt	r3, #2
   13bc4:	ldr	r0, [r3]
   13bc8:	bl	11188 <_exit@plt>
   13bcc:	mov	r3, r6
   13bd0:	movw	r2, #54364	; 0xd45c
   13bd4:	movt	r2, #1
   13bd8:	ldr	r1, [r5]
   13bdc:	bl	1129c <error@plt>
   13be0:	b	13bbc <__assert_fail@plt+0x2704>
   13be4:	str	r4, [sp, #-8]!
   13be8:	str	lr, [sp, #4]
   13bec:	bl	13ca8 <__assert_fail@plt+0x27f0>
   13bf0:	cmp	r0, #0
   13bf4:	beq	13c04 <__assert_fail@plt+0x274c>
   13bf8:	ldr	r4, [sp]
   13bfc:	add	sp, sp, #4
   13c00:	pop	{pc}		; (ldr pc, [sp], #4)
   13c04:	bl	1a880 <__assert_fail@plt+0x93c8>
   13c08:	strd	r4, [sp, #-16]!
   13c0c:	mov	r4, r0
   13c10:	str	r6, [sp, #8]
   13c14:	str	lr, [sp, #12]
   13c18:	ldrb	ip, [r0]
   13c1c:	sub	r5, ip, #47	; 0x2f
   13c20:	clz	r5, r5
   13c24:	bl	13a04 <__assert_fail@plt+0x254c>
   13c28:	lsr	r5, r5, #5
   13c2c:	sub	r0, r0, r4
   13c30:	cmp	r0, r5
   13c34:	bls	13c90 <__assert_fail@plt+0x27d8>
   13c38:	sub	r3, r0, #1
   13c3c:	ldrb	r2, [r4, r3]
   13c40:	cmp	r2, #47	; 0x2f
   13c44:	bne	13c90 <__assert_fail@plt+0x27d8>
   13c48:	cmp	r3, r5
   13c4c:	bls	13ca0 <__assert_fail@plt+0x27e8>
   13c50:	add	r2, r4, r0
   13c54:	ldrb	r2, [r2, #-2]
   13c58:	cmp	r2, #47	; 0x2f
   13c5c:	bne	13ca0 <__assert_fail@plt+0x27e8>
   13c60:	sub	r0, r0, #3
   13c64:	sub	ip, r4, #1
   13c68:	add	r3, r4, r0
   13c6c:	add	ip, ip, r5
   13c70:	rsb	r2, r4, #1
   13c74:	b	13c84 <__assert_fail@plt+0x27cc>
   13c78:	ldrb	r1, [r3], #-1
   13c7c:	cmp	r1, #47	; 0x2f
   13c80:	bne	13c90 <__assert_fail@plt+0x27d8>
   13c84:	cmp	r3, ip
   13c88:	add	r0, r2, r3
   13c8c:	bne	13c78 <__assert_fail@plt+0x27c0>
   13c90:	ldrd	r4, [sp]
   13c94:	ldr	r6, [sp, #8]
   13c98:	add	sp, sp, #12
   13c9c:	pop	{pc}		; (ldr pc, [sp], #4)
   13ca0:	mov	r0, r3
   13ca4:	b	13c90 <__assert_fail@plt+0x27d8>
   13ca8:	strd	r4, [sp, #-16]!
   13cac:	mov	r5, r0
   13cb0:	str	r6, [sp, #8]
   13cb4:	str	lr, [sp, #12]
   13cb8:	ldrb	r6, [r0]
   13cbc:	bl	13a04 <__assert_fail@plt+0x254c>
   13cc0:	sub	r4, r0, r5
   13cc4:	sub	r6, r6, #47	; 0x2f
   13cc8:	clz	r6, r6
   13ccc:	lsr	r6, r6, #5
   13cd0:	cmp	r6, r4
   13cd4:	bcs	13d30 <__assert_fail@plt+0x2878>
   13cd8:	sub	r3, r4, #1
   13cdc:	ldrb	r2, [r5, r3]
   13ce0:	cmp	r2, #47	; 0x2f
   13ce4:	bne	13d88 <__assert_fail@plt+0x28d0>
   13ce8:	cmp	r6, r3
   13cec:	bcs	13db8 <__assert_fail@plt+0x2900>
   13cf0:	add	r2, r5, r4
   13cf4:	ldrb	r2, [r2, #-2]
   13cf8:	cmp	r2, #47	; 0x2f
   13cfc:	bne	13d84 <__assert_fail@plt+0x28cc>
   13d00:	sub	r4, r4, #3
   13d04:	sub	r2, r5, #1
   13d08:	add	r3, r5, r4
   13d0c:	add	r6, r2, r6
   13d10:	rsb	r1, r5, #1
   13d14:	b	13d24 <__assert_fail@plt+0x286c>
   13d18:	ldrb	r2, [r3], #-1
   13d1c:	cmp	r2, #47	; 0x2f
   13d20:	bne	13d88 <__assert_fail@plt+0x28d0>
   13d24:	cmp	r3, r6
   13d28:	add	r4, r1, r3
   13d2c:	bne	13d18 <__assert_fail@plt+0x2860>
   13d30:	add	r0, r4, #1
   13d34:	cmp	r4, #0
   13d38:	addeq	r0, r0, #1
   13d3c:	bl	1b91c <__assert_fail@plt+0xa464>
   13d40:	subs	r6, r0, #0
   13d44:	beq	13db0 <__assert_fail@plt+0x28f8>
   13d48:	mov	r1, r5
   13d4c:	mov	r2, r4
   13d50:	bl	11194 <memcpy@plt>
   13d54:	cmp	r4, #0
   13d58:	bne	13d68 <__assert_fail@plt+0x28b0>
   13d5c:	mov	r3, #46	; 0x2e
   13d60:	mov	r4, #1
   13d64:	strb	r3, [r6]
   13d68:	mov	r3, #0
   13d6c:	strb	r3, [r6, r4]
   13d70:	mov	r0, r6
   13d74:	ldrd	r4, [sp]
   13d78:	ldr	r6, [sp, #8]
   13d7c:	add	sp, sp, #12
   13d80:	pop	{pc}		; (ldr pc, [sp], #4)
   13d84:	mov	r4, r3
   13d88:	add	r0, r4, #1
   13d8c:	cmp	r4, #0
   13d90:	addeq	r0, r0, #1
   13d94:	bl	1b91c <__assert_fail@plt+0xa464>
   13d98:	subs	r6, r0, #0
   13d9c:	beq	13db0 <__assert_fail@plt+0x28f8>
   13da0:	mov	r1, r5
   13da4:	mov	r2, r4
   13da8:	bl	11194 <memcpy@plt>
   13dac:	b	13d68 <__assert_fail@plt+0x28b0>
   13db0:	mov	r6, #0
   13db4:	b	13d70 <__assert_fail@plt+0x28b8>
   13db8:	mov	r4, r3
   13dbc:	b	13d30 <__assert_fail@plt+0x2878>
   13dc0:	push	{r1, r2, r3}
   13dc4:	strd	r4, [sp, #-20]!	; 0xffffffec
   13dc8:	strd	r6, [sp, #8]
   13dcc:	str	lr, [sp, #16]
   13dd0:	sub	sp, sp, #8
   13dd4:	ldr	r1, [sp, #28]
   13dd8:	add	r2, sp, #32
   13ddc:	str	r2, [sp, #4]
   13de0:	cmp	r1, #0
   13de4:	beq	13ec0 <__assert_fail@plt+0x2a08>
   13de8:	movw	r3, #1030	; 0x406
   13dec:	mov	r6, r0
   13df0:	cmp	r1, r3
   13df4:	beq	13ed0 <__assert_fail@plt+0x2a18>
   13df8:	cmp	r1, #11
   13dfc:	beq	13e78 <__assert_fail@plt+0x29c0>
   13e00:	ble	13e58 <__assert_fail@plt+0x29a0>
   13e04:	movw	r2, #1031	; 0x407
   13e08:	cmp	r1, r2
   13e0c:	bgt	13e94 <__assert_fail@plt+0x29dc>
   13e10:	cmp	r1, r3
   13e14:	bge	13e24 <__assert_fail@plt+0x296c>
   13e18:	movw	r3, #1025	; 0x401
   13e1c:	cmp	r1, r3
   13e20:	beq	13e78 <__assert_fail@plt+0x29c0>
   13e24:	ldr	r3, [sp, #4]
   13e28:	mov	r0, r6
   13e2c:	ldr	r2, [r3]
   13e30:	bl	113c8 <fcntl64@plt>
   13e34:	mov	r4, r0
   13e38:	mov	r0, r4
   13e3c:	add	sp, sp, #8
   13e40:	ldrd	r4, [sp]
   13e44:	ldrd	r6, [sp, #8]
   13e48:	ldr	lr, [sp, #16]
   13e4c:	add	sp, sp, #20
   13e50:	add	sp, sp, #12
   13e54:	bx	lr
   13e58:	cmp	r1, #4
   13e5c:	beq	13e24 <__assert_fail@plt+0x296c>
   13e60:	bgt	13e88 <__assert_fail@plt+0x29d0>
   13e64:	cmp	r1, #2
   13e68:	beq	13e24 <__assert_fail@plt+0x296c>
   13e6c:	bgt	13e78 <__assert_fail@plt+0x29c0>
   13e70:	cmp	r1, #1
   13e74:	bne	13e24 <__assert_fail@plt+0x296c>
   13e78:	mov	r0, r6
   13e7c:	bl	113c8 <fcntl64@plt>
   13e80:	mov	r4, r0
   13e84:	b	13e38 <__assert_fail@plt+0x2980>
   13e88:	cmp	r1, #9
   13e8c:	bne	13e24 <__assert_fail@plt+0x296c>
   13e90:	b	13e78 <__assert_fail@plt+0x29c0>
   13e94:	movw	r3, #1033	; 0x409
   13e98:	cmp	r1, r3
   13e9c:	beq	13e24 <__assert_fail@plt+0x296c>
   13ea0:	blt	13e78 <__assert_fail@plt+0x29c0>
   13ea4:	movw	r3, #1034	; 0x40a
   13ea8:	cmp	r1, r3
   13eac:	bne	13e24 <__assert_fail@plt+0x296c>
   13eb0:	mov	r0, r6
   13eb4:	bl	113c8 <fcntl64@plt>
   13eb8:	mov	r4, r0
   13ebc:	b	13e38 <__assert_fail@plt+0x2980>
   13ec0:	ldr	r2, [sp, #32]
   13ec4:	bl	113c8 <fcntl64@plt>
   13ec8:	mov	r4, r0
   13ecc:	b	13e38 <__assert_fail@plt+0x2980>
   13ed0:	movw	r5, #57804	; 0xe1cc
   13ed4:	movt	r5, #2
   13ed8:	ldr	r7, [r2]
   13edc:	add	r2, sp, #36	; 0x24
   13ee0:	ldr	r3, [r5]
   13ee4:	str	r2, [sp, #4]
   13ee8:	mov	r2, r7
   13eec:	cmp	r3, #0
   13ef0:	blt	13f0c <__assert_fail@plt+0x2a54>
   13ef4:	bl	113c8 <fcntl64@plt>
   13ef8:	subs	r4, r0, #0
   13efc:	blt	13f74 <__assert_fail@plt+0x2abc>
   13f00:	mov	r3, #1
   13f04:	str	r3, [r5]
   13f08:	b	13e38 <__assert_fail@plt+0x2980>
   13f0c:	mov	r1, #0
   13f10:	bl	113c8 <fcntl64@plt>
   13f14:	subs	r4, r0, #0
   13f18:	blt	13e38 <__assert_fail@plt+0x2980>
   13f1c:	ldr	r3, [r5]
   13f20:	cmn	r3, #1
   13f24:	bne	13e38 <__assert_fail@plt+0x2980>
   13f28:	mov	r1, #1
   13f2c:	mov	r0, r4
   13f30:	bl	113c8 <fcntl64@plt>
   13f34:	subs	r2, r0, #0
   13f38:	blt	13f54 <__assert_fail@plt+0x2a9c>
   13f3c:	orr	r2, r2, #1
   13f40:	mov	r1, #2
   13f44:	mov	r0, r4
   13f48:	bl	113c8 <fcntl64@plt>
   13f4c:	cmn	r0, #1
   13f50:	bne	13e38 <__assert_fail@plt+0x2980>
   13f54:	bl	11338 <__errno_location@plt>
   13f58:	mov	r5, r0
   13f5c:	mov	r0, r4
   13f60:	ldr	r6, [r5]
   13f64:	mvn	r4, #0
   13f68:	bl	114ac <close@plt>
   13f6c:	str	r6, [r5]
   13f70:	b	13e38 <__assert_fail@plt+0x2980>
   13f74:	bl	11338 <__errno_location@plt>
   13f78:	ldr	r3, [r0]
   13f7c:	cmp	r3, #22
   13f80:	bne	13f00 <__assert_fail@plt+0x2a48>
   13f84:	mov	r2, r7
   13f88:	mov	r0, r6
   13f8c:	mov	r1, #0
   13f90:	bl	113c8 <fcntl64@plt>
   13f94:	subs	r4, r0, #0
   13f98:	mvnge	r3, #0
   13f9c:	strge	r3, [r5]
   13fa0:	bge	13f28 <__assert_fail@plt+0x2a70>
   13fa4:	b	13e38 <__assert_fail@plt+0x2980>
   13fa8:	push	{r1, r2, r3}
   13fac:	push	{lr}		; (str lr, [sp, #-4]!)
   13fb0:	sub	sp, sp, #8
   13fb4:	ldr	r1, [sp, #12]
   13fb8:	ands	r2, r1, #64	; 0x40
   13fbc:	bne	13fd8 <__assert_fail@plt+0x2b20>
   13fc0:	bl	112a8 <open64@plt>
   13fc4:	bl	19b08 <__assert_fail@plt+0x8650>
   13fc8:	add	sp, sp, #8
   13fcc:	pop	{lr}		; (ldr lr, [sp], #4)
   13fd0:	add	sp, sp, #12
   13fd4:	bx	lr
   13fd8:	add	r3, sp, #16
   13fdc:	ldr	r2, [sp, #16]
   13fe0:	str	r3, [sp, #4]
   13fe4:	b	13fc0 <__assert_fail@plt+0x2b08>
   13fe8:	strd	r4, [sp, #-12]!
   13fec:	mov	r5, r0
   13ff0:	str	lr, [sp, #8]
   13ff4:	sub	sp, sp, #12
   13ff8:	bl	11338 <__errno_location@plt>
   13ffc:	mov	r4, r0
   14000:	mov	r2, #0
   14004:	ldr	r3, [r4]
   14008:	mov	r0, r5
   1400c:	str	r2, [r4]
   14010:	str	r3, [sp]
   14014:	str	r3, [sp, #4]
   14018:	bl	1117c <free@plt>
   1401c:	ldr	r3, [r4]
   14020:	add	r2, sp, #8
   14024:	clz	r3, r3
   14028:	lsr	r3, r3, #5
   1402c:	add	r3, r2, r3, lsl #2
   14030:	ldr	r3, [r3, #-8]
   14034:	str	r3, [r4]
   14038:	add	sp, sp, #12
   1403c:	ldrd	r4, [sp]
   14040:	add	sp, sp, #8
   14044:	pop	{pc}		; (ldr pc, [sp], #4)
   14048:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1404c:	strd	r6, [sp, #8]
   14050:	mov	r6, r3
   14054:	ands	r3, r3, #32
   14058:	strd	r8, [sp, #16]
   1405c:	mov	r9, r1
   14060:	moveq	r1, #1000	; 0x3e8
   14064:	strd	sl, [sp, #24]
   14068:	movne	r1, #1024	; 0x400
   1406c:	mov	r8, r0
   14070:	str	lr, [sp, #32]
   14074:	vpush	{d8-d9}
   14078:	sub	sp, sp, #108	; 0x6c
   1407c:	str	r2, [sp, #12]
   14080:	moveq	r2, #1000	; 0x3e8
   14084:	movne	r2, #1024	; 0x400
   14088:	str	r3, [sp, #40]	; 0x28
   1408c:	and	r3, r6, #3
   14090:	str	r1, [sp, #16]
   14094:	str	r3, [sp, #32]
   14098:	mov	r3, #0
   1409c:	strd	r2, [sp, #24]
   140a0:	str	r1, [sp, #36]	; 0x24
   140a4:	bl	11410 <localeconv@plt>
   140a8:	ldr	r3, [sp, #12]
   140ac:	mov	r4, r0
   140b0:	add	r2, r3, #644	; 0x284
   140b4:	ldr	r3, [r0]
   140b8:	add	r2, r2, #3
   140bc:	str	r2, [sp, #32]
   140c0:	mov	r0, r3
   140c4:	mov	r5, r3
   140c8:	bl	11314 <strlen@plt>
   140cc:	ldmib	r4, {r7, sl}
   140d0:	sub	r2, r0, #1
   140d4:	movw	r3, #54400	; 0xd480
   140d8:	movt	r3, #1
   140dc:	cmp	r2, #16
   140e0:	movcc	r3, r5
   140e4:	mov	fp, r0
   140e8:	movcs	fp, #1
   140ec:	str	r3, [sp, #44]	; 0x2c
   140f0:	mov	r0, r7
   140f4:	bl	11314 <strlen@plt>
   140f8:	cmp	r0, #16
   140fc:	movw	r3, #53068	; 0xcf4c
   14100:	movt	r3, #1
   14104:	ldrd	r0, [sp, #160]	; 0xa0
   14108:	movhi	r7, r3
   1410c:	ldrd	r2, [sp, #168]	; 0xa8
   14110:	cmp	r3, r1
   14114:	cmpeq	r2, r0
   14118:	bhi	14430 <__assert_fail@plt+0x2f78>
   1411c:	bl	1c378 <__assert_fail@plt+0xaec0>
   14120:	orrs	r3, r2, r3
   14124:	bne	14158 <__assert_fail@plt+0x2ca0>
   14128:	mul	ip, r0, r9
   1412c:	mov	r3, r1
   14130:	mov	r2, r0
   14134:	umull	r4, r5, r0, r8
   14138:	mla	r1, r8, r1, ip
   1413c:	mov	r0, r4
   14140:	add	r5, r1, r5
   14144:	mov	r1, r5
   14148:	bl	1c378 <__assert_fail@plt+0xaec0>
   1414c:	cmp	r1, r9
   14150:	cmpeq	r0, r8
   14154:	beq	14a30 <__assert_fail@plt+0x3578>
   14158:	ldrd	r0, [sp, #160]	; 0xa0
   1415c:	bl	1c230 <__assert_fail@plt+0xad78>
   14160:	vmov	d9, r0, r1
   14164:	ldrd	r0, [sp, #168]	; 0xa8
   14168:	bl	1c230 <__assert_fail@plt+0xad78>
   1416c:	vmov	d7, r0, r1
   14170:	mov	r0, r8
   14174:	mov	r1, r9
   14178:	vdiv.f64	d8, d9, d7
   1417c:	bl	1c230 <__assert_fail@plt+0xad78>
   14180:	vmov	d7, r0, r1
   14184:	tst	r6, #16
   14188:	vmul.f64	d8, d8, d7
   1418c:	beq	14358 <__assert_fail@plt+0x2ea0>
   14190:	vldr	s15, [sp, #16]
   14194:	vcvt.f64.s32	d7, s15
   14198:	vmul.f64	d6, d7, d7
   1419c:	vcmpe.f64	d8, d6
   141a0:	vmrs	APSR_nzcv, fpscr
   141a4:	blt	14c8c <__assert_fail@plt+0x37d4>
   141a8:	vmul.f64	d5, d7, d6
   141ac:	vcmpe.f64	d8, d5
   141b0:	vmrs	APSR_nzcv, fpscr
   141b4:	blt	14c98 <__assert_fail@plt+0x37e0>
   141b8:	vmul.f64	d6, d7, d5
   141bc:	vcmpe.f64	d8, d6
   141c0:	vmrs	APSR_nzcv, fpscr
   141c4:	blt	14ca8 <__assert_fail@plt+0x37f0>
   141c8:	vmul.f64	d5, d7, d6
   141cc:	vcmpe.f64	d8, d5
   141d0:	vmrs	APSR_nzcv, fpscr
   141d4:	blt	14ccc <__assert_fail@plt+0x3814>
   141d8:	vmul.f64	d6, d7, d5
   141dc:	vcmpe.f64	d8, d6
   141e0:	vmrs	APSR_nzcv, fpscr
   141e4:	blt	14cdc <__assert_fail@plt+0x3824>
   141e8:	vmul.f64	d5, d7, d6
   141ec:	vcmpe.f64	d8, d5
   141f0:	vmrs	APSR_nzcv, fpscr
   141f4:	blt	14cec <__assert_fail@plt+0x3834>
   141f8:	vmul.f64	d7, d7, d5
   141fc:	vcmpe.f64	d8, d7
   14200:	vmrs	APSR_nzcv, fpscr
   14204:	movlt	r3, #7
   14208:	vmovlt.f64	d7, d5
   1420c:	strlt	r3, [sp, #16]
   14210:	blt	1421c <__assert_fail@plt+0x2d64>
   14214:	mov	r3, #8
   14218:	str	r3, [sp, #16]
   1421c:	ands	r3, r6, #32
   14220:	and	r9, r6, #3
   14224:	vdiv.f64	d9, d8, d7
   14228:	clz	r4, r3
   1422c:	add	fp, fp, #1
   14230:	lsr	r4, r4, #5
   14234:	cmp	r9, #1
   14238:	add	r4, r4, #1
   1423c:	add	r4, r4, fp
   14240:	beq	14ae8 <__assert_fail@plt+0x3630>
   14244:	vldr	d7, [pc, #468]	; 14420 <__assert_fail@plt+0x2f68>
   14248:	vcmpe.f64	d9, d7
   1424c:	vmrs	APSR_nzcv, fpscr
   14250:	vmovpl.f64	d7, d9
   14254:	bpl	14294 <__assert_fail@plt+0x2ddc>
   14258:	vmov	r0, r1, d9
   1425c:	bl	1c3c8 <__assert_fail@plt+0xaf10>
   14260:	mov	r5, r0
   14264:	mov	r8, r1
   14268:	bl	1c230 <__assert_fail@plt+0xad78>
   1426c:	cmp	r9, #0
   14270:	vmov	d7, r0, r1
   14274:	bne	14294 <__assert_fail@plt+0x2ddc>
   14278:	vcmp.f64	d9, d7
   1427c:	vmrs	APSR_nzcv, fpscr
   14280:	beq	14294 <__assert_fail@plt+0x2ddc>
   14284:	adds	r0, r5, #1
   14288:	adc	r1, r8, #0
   1428c:	bl	1c230 <__assert_fail@plt+0xad78>
   14290:	vmov	d7, r0, r1
   14294:	ldr	r5, [sp, #12]
   14298:	mvn	r2, #0
   1429c:	mov	r1, #1
   142a0:	movw	r3, #54412	; 0xd48c
   142a4:	movt	r3, #1
   142a8:	vstr	d7, [sp]
   142ac:	mov	r0, r5
   142b0:	bl	11344 <__sprintf_chk@plt>
   142b4:	mov	r0, r5
   142b8:	bl	11314 <strlen@plt>
   142bc:	cmp	r0, r4
   142c0:	bls	149c8 <__assert_fail@plt+0x3510>
   142c4:	vldr	d7, [pc, #348]	; 14428 <__assert_fail@plt+0x2f70>
   142c8:	vmul.f64	d9, d9, d7
   142cc:	vldr	d7, [pc, #332]	; 14420 <__assert_fail@plt+0x2f68>
   142d0:	vcmpe.f64	d9, d7
   142d4:	vmrs	APSR_nzcv, fpscr
   142d8:	bpl	14320 <__assert_fail@plt+0x2e68>
   142dc:	vmov	r0, r1, d9
   142e0:	bl	1c3c8 <__assert_fail@plt+0xaf10>
   142e4:	mov	r4, r0
   142e8:	mov	r5, r1
   142ec:	bl	1c230 <__assert_fail@plt+0xad78>
   142f0:	and	r3, r6, #3
   142f4:	vmov	d7, r0, r1
   142f8:	cmp	r3, #0
   142fc:	bne	1431c <__assert_fail@plt+0x2e64>
   14300:	vcmp.f64	d9, d7
   14304:	vmrs	APSR_nzcv, fpscr
   14308:	beq	1431c <__assert_fail@plt+0x2e64>
   1430c:	adds	r0, r4, #1
   14310:	adc	r1, r5, #0
   14314:	bl	1c230 <__assert_fail@plt+0xad78>
   14318:	vmov	d7, r0, r1
   1431c:	vmov.f64	d9, d7
   14320:	vldr	d6, [pc, #256]	; 14428 <__assert_fail@plt+0x2f70>
   14324:	mvn	r2, #0
   14328:	mov	r1, #1
   1432c:	movw	r3, #54404	; 0xd484
   14330:	movt	r3, #1
   14334:	ldr	r4, [sp, #12]
   14338:	vdiv.f64	d7, d9, d6
   1433c:	mov	r0, r4
   14340:	vstr	d7, [sp]
   14344:	bl	11344 <__sprintf_chk@plt>
   14348:	mov	r0, r4
   1434c:	bl	11314 <strlen@plt>
   14350:	mov	r9, r0
   14354:	b	143a4 <__assert_fail@plt+0x2eec>
   14358:	and	r8, r6, #3
   1435c:	cmp	r8, #1
   14360:	beq	14374 <__assert_fail@plt+0x2ebc>
   14364:	vldr	d7, [pc, #180]	; 14420 <__assert_fail@plt+0x2f68>
   14368:	vcmpe.f64	d8, d7
   1436c:	vmrs	APSR_nzcv, fpscr
   14370:	bmi	149ec <__assert_fail@plt+0x3534>
   14374:	ldr	r4, [sp, #12]
   14378:	mvn	r2, #0
   1437c:	mov	r1, #1
   14380:	movw	r3, #54404	; 0xd484
   14384:	movt	r3, #1
   14388:	vstr	d8, [sp]
   1438c:	str	r2, [sp, #16]
   14390:	mov	r0, r4
   14394:	bl	11344 <__sprintf_chk@plt>
   14398:	mov	r0, r4
   1439c:	bl	11314 <strlen@plt>
   143a0:	mov	r9, r0
   143a4:	mov	r2, r0
   143a8:	ldr	r1, [sp, #12]
   143ac:	ldr	r3, [sp, #32]
   143b0:	sub	r8, r3, r0
   143b4:	mov	r0, r8
   143b8:	add	r9, r8, r9
   143bc:	bl	11170 <memmove@plt>
   143c0:	tst	r6, #4
   143c4:	bne	147bc <__assert_fail@plt+0x3304>
   143c8:	tst	r6, #128	; 0x80
   143cc:	beq	143ec <__assert_fail@plt+0x2f34>
   143d0:	ldr	r3, [sp, #16]
   143d4:	cmn	r3, #1
   143d8:	beq	1485c <__assert_fail@plt+0x33a4>
   143dc:	ldr	r2, [sp, #16]
   143e0:	and	r3, r6, #256	; 0x100
   143e4:	orrs	r2, r3, r2
   143e8:	bne	14b60 <__assert_fail@plt+0x36a8>
   143ec:	ldr	r2, [sp, #32]
   143f0:	mov	r3, #0
   143f4:	mov	r0, r8
   143f8:	strb	r3, [r2]
   143fc:	add	sp, sp, #108	; 0x6c
   14400:	vpop	{d8-d9}
   14404:	ldrd	r4, [sp]
   14408:	ldrd	r6, [sp, #8]
   1440c:	ldrd	r8, [sp, #16]
   14410:	ldrd	sl, [sp, #24]
   14414:	add	sp, sp, #32
   14418:	pop	{pc}		; (ldr pc, [sp], #4)
   1441c:	nop	{0}
   14420:	andeq	r0, r0, r0
   14424:	mvnsmi	r0, #0
   14428:	andeq	r0, r0, r0
   1442c:	eormi	r0, r4, r0
   14430:	mov	r2, r0
   14434:	mov	r3, r1
   14438:	orrs	r3, r2, r3
   1443c:	beq	14158 <__assert_fail@plt+0x2ca0>
   14440:	ldrd	r2, [sp, #160]	; 0xa0
   14444:	ldrd	r0, [sp, #168]	; 0xa8
   14448:	bl	1c378 <__assert_fail@plt+0xaec0>
   1444c:	orrs	r3, r2, r3
   14450:	mov	r4, r0
   14454:	mov	r5, r1
   14458:	bne	14158 <__assert_fail@plt+0x2ca0>
   1445c:	mov	r0, r8
   14460:	mov	r1, r9
   14464:	mov	r2, r4
   14468:	mov	r3, r5
   1446c:	bl	1c378 <__assert_fail@plt+0xaec0>
   14470:	mov	lr, r2
   14474:	mov	r8, r1
   14478:	lsl	r1, r3, #2
   1447c:	mov	r9, r0
   14480:	lsl	r0, lr, #2
   14484:	mov	ip, r3
   14488:	orr	r1, r1, lr, lsr #30
   1448c:	mov	r2, r4
   14490:	mov	r3, r5
   14494:	adds	r0, r0, lr
   14498:	strd	r4, [sp, #16]
   1449c:	mov	r4, r9
   144a0:	adc	r1, r1, ip
   144a4:	adds	r0, r0, r0
   144a8:	adc	r1, r1, r1
   144ac:	mov	r5, r8
   144b0:	bl	1c378 <__assert_fail@plt+0xaec0>
   144b4:	adds	r1, r2, r2
   144b8:	adc	r3, r3, r3
   144bc:	str	r1, [sp, #48]	; 0x30
   144c0:	str	r3, [sp, #52]	; 0x34
   144c4:	ldrd	r2, [sp, #16]
   144c8:	ldrd	r8, [sp, #48]	; 0x30
   144cc:	str	r0, [sp, #48]	; 0x30
   144d0:	cmp	r3, r9
   144d4:	cmpeq	r2, r8
   144d8:	bls	14b54 <__assert_fail@plt+0x369c>
   144dc:	mov	r3, r8
   144e0:	orrs	r3, r3, r9
   144e4:	movne	r8, #1
   144e8:	moveq	r8, #0
   144ec:	ands	r3, r6, #16
   144f0:	str	r3, [sp, #16]
   144f4:	beq	14a44 <__assert_fail@plt+0x358c>
   144f8:	ldrd	r2, [sp, #24]
   144fc:	cmp	r5, r3
   14500:	cmpeq	r4, r2
   14504:	bcc	14bac <__assert_fail@plt+0x36f4>
   14508:	mov	r0, r4
   1450c:	mov	r1, r5
   14510:	bl	1c378 <__assert_fail@plt+0xaec0>
   14514:	ldr	ip, [sp, #48]	; 0x30
   14518:	add	r2, r2, r2, lsl #2
   1451c:	mov	r4, r0
   14520:	asr	r3, r8, #1
   14524:	mov	r5, r1
   14528:	add	r2, ip, r2, lsl #1
   1452c:	ldr	ip, [sp, #36]	; 0x24
   14530:	udiv	r9, r2, ip
   14534:	mls	r2, ip, r9, r2
   14538:	str	r9, [sp, #48]	; 0x30
   1453c:	add	r2, r3, r2, lsl #1
   14540:	cmp	ip, r2
   14544:	add	r2, r8, r2
   14548:	bhi	14be4 <__assert_fail@plt+0x372c>
   1454c:	cmp	ip, r2
   14550:	mov	ip, #1
   14554:	movcc	r8, #3
   14558:	movcs	r8, #2
   1455c:	ldrd	r2, [sp, #24]
   14560:	cmp	r1, r3
   14564:	cmpeq	r0, r2
   14568:	bcc	14e30 <__assert_fail@plt+0x3978>
   1456c:	bl	1c378 <__assert_fail@plt+0xaec0>
   14570:	add	r2, r2, r2, lsl #2
   14574:	ldr	ip, [sp, #36]	; 0x24
   14578:	mov	r4, r0
   1457c:	asr	r3, r8, #1
   14580:	mov	r5, r1
   14584:	add	r2, r9, r2, lsl #1
   14588:	udiv	r9, r2, ip
   1458c:	mls	r2, ip, r9, r2
   14590:	str	r9, [sp, #48]	; 0x30
   14594:	add	r3, r3, r2, lsl #1
   14598:	cmp	ip, r3
   1459c:	add	r3, r8, r3
   145a0:	bhi	14c24 <__assert_fail@plt+0x376c>
   145a4:	cmp	ip, r3
   145a8:	mov	ip, #1
   145ac:	movcc	r8, #3
   145b0:	movcs	r8, #2
   145b4:	ldrd	r2, [sp, #24]
   145b8:	cmp	r1, r3
   145bc:	cmpeq	r0, r2
   145c0:	bcc	14e48 <__assert_fail@plt+0x3990>
   145c4:	bl	1c378 <__assert_fail@plt+0xaec0>
   145c8:	add	r2, r2, r2, lsl #2
   145cc:	mov	r4, r0
   145d0:	mov	r5, r1
   145d4:	asr	r3, r8, #1
   145d8:	add	r9, r9, r2, lsl #1
   145dc:	ldr	r2, [sp, #36]	; 0x24
   145e0:	udiv	ip, r9, r2
   145e4:	mls	r9, r2, ip, r9
   145e8:	str	ip, [sp, #16]
   145ec:	str	ip, [sp, #48]	; 0x30
   145f0:	add	r3, r3, r9, lsl #1
   145f4:	cmp	r2, r3
   145f8:	add	r3, r8, r3
   145fc:	bhi	14c34 <__assert_fail@plt+0x377c>
   14600:	cmp	r2, r3
   14604:	mov	ip, #1
   14608:	movcc	r8, #3
   1460c:	movcs	r8, #2
   14610:	ldrd	r2, [sp, #24]
   14614:	cmp	r1, r3
   14618:	cmpeq	r0, r2
   1461c:	bcc	14e3c <__assert_fail@plt+0x3984>
   14620:	bl	1c378 <__assert_fail@plt+0xaec0>
   14624:	ldr	ip, [sp, #16]
   14628:	add	r2, r2, r2, lsl #2
   1462c:	mov	r4, r0
   14630:	asr	r3, r8, #1
   14634:	mov	r5, r1
   14638:	add	r2, ip, r2, lsl #1
   1463c:	ldr	ip, [sp, #36]	; 0x24
   14640:	udiv	r9, r2, ip
   14644:	mls	r2, ip, r9, r2
   14648:	str	r9, [sp, #48]	; 0x30
   1464c:	add	r3, r3, r2, lsl #1
   14650:	cmp	ip, r3
   14654:	add	r3, r8, r3
   14658:	bhi	14c5c <__assert_fail@plt+0x37a4>
   1465c:	cmp	r3, ip
   14660:	mov	ip, #1
   14664:	movhi	r8, #3
   14668:	movls	r8, #2
   1466c:	ldrd	r2, [sp, #24]
   14670:	cmp	r1, r3
   14674:	cmpeq	r0, r2
   14678:	bcc	14e54 <__assert_fail@plt+0x399c>
   1467c:	bl	1c378 <__assert_fail@plt+0xaec0>
   14680:	add	r2, r2, r2, lsl #2
   14684:	mov	r4, r0
   14688:	mov	r5, r1
   1468c:	asr	r3, r8, #1
   14690:	add	r9, r9, r2, lsl #1
   14694:	ldr	r2, [sp, #36]	; 0x24
   14698:	udiv	ip, r9, r2
   1469c:	mls	r9, r2, ip, r9
   146a0:	str	ip, [sp, #16]
   146a4:	str	ip, [sp, #48]	; 0x30
   146a8:	add	r3, r3, r9, lsl #1
   146ac:	cmp	r2, r3
   146b0:	add	r3, r8, r3
   146b4:	bhi	14c6c <__assert_fail@plt+0x37b4>
   146b8:	cmp	r2, r3
   146bc:	mov	ip, #1
   146c0:	movcc	r8, #3
   146c4:	movcs	r8, #2
   146c8:	ldrd	r2, [sp, #24]
   146cc:	cmp	r1, r3
   146d0:	cmpeq	r0, r2
   146d4:	bcc	14e6c <__assert_fail@plt+0x39b4>
   146d8:	bl	1c378 <__assert_fail@plt+0xaec0>
   146dc:	mov	r5, r1
   146e0:	ldr	r1, [sp, #16]
   146e4:	add	r2, r2, r2, lsl #2
   146e8:	mov	r4, r0
   146ec:	asr	r3, r8, #1
   146f0:	ldr	r0, [sp, #36]	; 0x24
   146f4:	add	r1, r1, r2, lsl #1
   146f8:	udiv	r2, r1, r0
   146fc:	mls	r1, r0, r2, r1
   14700:	str	r2, [sp, #48]	; 0x30
   14704:	add	r3, r3, r1, lsl #1
   14708:	cmp	r0, r3
   1470c:	add	r3, r8, r3
   14710:	bhi	14c7c <__assert_fail@plt+0x37c4>
   14714:	cmp	r0, r3
   14718:	mov	ip, #1
   1471c:	movcs	r8, #2
   14720:	movcc	r8, #3
   14724:	mov	r3, #6
   14728:	str	r3, [sp, #16]
   1472c:	cmp	r5, #0
   14730:	cmpeq	r4, #9
   14734:	bhi	14a4c <__assert_fail@plt+0x3594>
   14738:	and	r3, r6, #3
   1473c:	cmp	r3, #1
   14740:	beq	14cfc <__assert_fail@plt+0x3844>
   14744:	and	r3, r6, #3
   14748:	cmp	r3, #0
   1474c:	moveq	r3, ip
   14750:	movne	r3, #0
   14754:	cmp	r3, #0
   14758:	ldr	r3, [sp, #48]	; 0x30
   1475c:	bne	14cb8 <__assert_fail@plt+0x3800>
   14760:	cmp	r3, #0
   14764:	addne	r3, r3, #48	; 0x30
   14768:	uxtbne	r3, r3
   1476c:	bne	1477c <__assert_fail@plt+0x32c4>
   14770:	tst	r6, #8
   14774:	bne	14e04 <__assert_fail@plt+0x394c>
   14778:	mov	r3, #48	; 0x30
   1477c:	ldr	r1, [sp, #12]
   14780:	mov	r2, fp
   14784:	mov	r8, #0
   14788:	add	r9, r1, #644	; 0x284
   1478c:	strb	r3, [r1, #646]	; 0x286
   14790:	add	r9, r9, #2
   14794:	ldr	r1, [sp, #44]	; 0x2c
   14798:	sub	r9, r9, fp
   1479c:	mov	r0, r9
   147a0:	bl	11194 <memcpy@plt>
   147a4:	and	r3, r6, #3
   147a8:	cmp	r3, #1
   147ac:	beq	14a9c <__assert_fail@plt+0x35e4>
   147b0:	mov	r3, #0
   147b4:	str	r3, [sp, #48]	; 0x30
   147b8:	b	14a5c <__assert_fail@plt+0x35a4>
   147bc:	mov	r0, r7
   147c0:	sub	r4, r9, r8
   147c4:	bl	11314 <strlen@plt>
   147c8:	mov	fp, r0
   147cc:	mov	r1, r8
   147d0:	mov	r2, r4
   147d4:	add	r0, sp, #60	; 0x3c
   147d8:	mov	r3, #41	; 0x29
   147dc:	mvn	r5, #0
   147e0:	bl	1123c <__memcpy_chk@plt>
   147e4:	ldrb	r3, [sl]
   147e8:	cmp	r3, #0
   147ec:	beq	14800 <__assert_fail@plt+0x3348>
   147f0:	cmp	r3, #255	; 0xff
   147f4:	add	sl, sl, #1
   147f8:	movne	r5, r3
   147fc:	moveq	r5, r4
   14800:	sub	r8, r9, r5
   14804:	cmp	r5, r4
   14808:	mov	r2, r5
   1480c:	mov	r0, r8
   14810:	bls	1482c <__assert_fail@plt+0x3374>
   14814:	sub	r8, r9, r4
   14818:	mov	r2, r4
   1481c:	add	r1, sp, #60	; 0x3c
   14820:	mov	r0, r8
   14824:	bl	11194 <memcpy@plt>
   14828:	b	143c8 <__assert_fail@plt+0x2f10>
   1482c:	sub	r4, r4, r5
   14830:	add	r3, sp, #60	; 0x3c
   14834:	add	r1, r3, r4
   14838:	sub	r9, r8, fp
   1483c:	bl	11194 <memcpy@plt>
   14840:	cmp	r4, #0
   14844:	mov	r2, fp
   14848:	mov	r1, r7
   1484c:	mov	r0, r9
   14850:	beq	143c8 <__assert_fail@plt+0x2f10>
   14854:	bl	11194 <memcpy@plt>
   14858:	b	147e4 <__assert_fail@plt+0x332c>
   1485c:	ldrd	r2, [sp, #168]	; 0xa8
   14860:	cmp	r3, #0
   14864:	cmpeq	r2, #1
   14868:	bls	14c18 <__assert_fail@plt+0x3760>
   1486c:	mov	r0, r2
   14870:	mov	r1, r3
   14874:	ldrd	r2, [sp, #24]
   14878:	cmp	r1, r3
   1487c:	cmpeq	r0, r2
   14880:	bls	14eac <__assert_fail@plt+0x39f4>
   14884:	mul	r1, r2, r3
   14888:	mov	r4, r2
   1488c:	mov	r5, r3
   14890:	umull	sl, fp, r2, r2
   14894:	add	fp, fp, r1, lsl #1
   14898:	ldrd	r0, [sp, #168]	; 0xa8
   1489c:	cmp	r1, fp
   148a0:	cmpeq	r0, sl
   148a4:	bls	14d18 <__assert_fail@plt+0x3860>
   148a8:	mul	r3, r2, fp
   148ac:	umull	r0, r1, r4, sl
   148b0:	mla	r2, sl, r5, r3
   148b4:	strd	r0, [sp, #16]
   148b8:	add	r3, r2, r1
   148bc:	str	r3, [sp, #20]
   148c0:	ldrd	sl, [sp, #16]
   148c4:	ldrd	r2, [sp, #168]	; 0xa8
   148c8:	cmp	r3, fp
   148cc:	cmpeq	r2, sl
   148d0:	bls	14d4c <__assert_fail@plt+0x3894>
   148d4:	ldr	r2, [sp, #16]
   148d8:	mul	r1, r4, fp
   148dc:	umull	sl, fp, r4, sl
   148e0:	mla	r0, r2, r5, r1
   148e4:	ldrd	r2, [sp, #168]	; 0xa8
   148e8:	add	fp, r0, fp
   148ec:	cmp	r3, fp
   148f0:	cmpeq	r2, sl
   148f4:	bls	14e78 <__assert_fail@plt+0x39c0>
   148f8:	mul	r3, r4, fp
   148fc:	umull	r0, r1, r4, sl
   14900:	mla	r2, sl, r5, r3
   14904:	add	r1, r2, r1
   14908:	ldrd	r2, [sp, #168]	; 0xa8
   1490c:	cmp	r3, r1
   14910:	cmpeq	r2, r0
   14914:	bls	14d80 <__assert_fail@plt+0x38c8>
   14918:	mul	ip, r0, r5
   1491c:	mov	lr, r4
   14920:	umull	r2, r3, r0, r4
   14924:	mla	r1, r4, r1, ip
   14928:	add	r3, r1, r3
   1492c:	ldrd	r0, [sp, #168]	; 0xa8
   14930:	cmp	r1, r3
   14934:	cmpeq	r0, r2
   14938:	bls	14db4 <__assert_fail@plt+0x38fc>
   1493c:	mul	ip, r2, r5
   14940:	umull	r0, r1, r2, r4
   14944:	mla	r3, r4, r3, ip
   14948:	add	r1, r3, r1
   1494c:	ldrd	r2, [sp, #168]	; 0xa8
   14950:	cmp	r3, r1
   14954:	cmpeq	r2, r0
   14958:	bls	14ef8 <__assert_fail@plt+0x3a40>
   1495c:	tst	r6, #64	; 0x40
   14960:	and	r3, r6, #256	; 0x100
   14964:	beq	1497c <__assert_fail@plt+0x34c4>
   14968:	ldr	r1, [sp, #12]
   1496c:	mov	r2, #32
   14970:	add	r0, r1, #648	; 0x288
   14974:	strb	r2, [r1, #647]	; 0x287
   14978:	str	r0, [sp, #32]
   1497c:	mov	r2, #8
   14980:	str	r2, [sp, #16]
   14984:	ldr	r2, [sp, #40]	; 0x28
   14988:	adds	r1, r2, #0
   1498c:	movne	r1, #1
   14990:	ldr	r0, [sp, #16]
   14994:	movw	r2, #54368	; 0xd460
   14998:	movt	r2, #1
   1499c:	cmp	r3, #0
   149a0:	ldrb	r0, [r2, r0]
   149a4:	ldr	r2, [sp, #32]
   149a8:	strb	r0, [r2], #1
   149ac:	beq	14ba4 <__assert_fail@plt+0x36ec>
   149b0:	cmp	r1, #0
   149b4:	bne	14bb8 <__assert_fail@plt+0x3700>
   149b8:	mov	r3, #66	; 0x42
   149bc:	strb	r3, [r2], #1
   149c0:	str	r2, [sp, #32]
   149c4:	b	143ec <__assert_fail@plt+0x2f34>
   149c8:	tst	r6, #8
   149cc:	beq	149e4 <__assert_fail@plt+0x352c>
   149d0:	ldr	r3, [sp, #12]
   149d4:	add	r3, r3, r0
   149d8:	ldrb	r3, [r3, #-1]
   149dc:	cmp	r3, #48	; 0x30
   149e0:	beq	14c44 <__assert_fail@plt+0x378c>
   149e4:	sub	r9, r0, fp
   149e8:	b	143a4 <__assert_fail@plt+0x2eec>
   149ec:	vmov	r0, r1, d8
   149f0:	bl	1c3c8 <__assert_fail@plt+0xaf10>
   149f4:	mov	r4, r0
   149f8:	mov	r5, r1
   149fc:	bl	1c230 <__assert_fail@plt+0xad78>
   14a00:	cmp	r8, #0
   14a04:	vmov	d7, r0, r1
   14a08:	bne	14a28 <__assert_fail@plt+0x3570>
   14a0c:	vcmp.f64	d8, d7
   14a10:	vmrs	APSR_nzcv, fpscr
   14a14:	beq	14a28 <__assert_fail@plt+0x3570>
   14a18:	adds	r0, r4, #1
   14a1c:	adc	r1, r5, #0
   14a20:	bl	1c230 <__assert_fail@plt+0xad78>
   14a24:	vmov	d7, r0, r1
   14a28:	vmov.f64	d8, d7
   14a2c:	b	14374 <__assert_fail@plt+0x2ebc>
   14a30:	mov	r8, #0
   14a34:	ands	r3, r6, #16
   14a38:	str	r3, [sp, #16]
   14a3c:	str	r8, [sp, #48]	; 0x30
   14a40:	bne	144f8 <__assert_fail@plt+0x3040>
   14a44:	mvn	r3, #0
   14a48:	str	r3, [sp, #16]
   14a4c:	and	r3, r6, #3
   14a50:	cmp	r3, #1
   14a54:	beq	14b24 <__assert_fail@plt+0x366c>
   14a58:	ldr	r9, [sp, #32]
   14a5c:	and	r3, r6, #3
   14a60:	cmp	r3, #0
   14a64:	bne	14a9c <__assert_fail@plt+0x35e4>
   14a68:	ldr	r3, [sp, #48]	; 0x30
   14a6c:	add	r3, r8, r3
   14a70:	cmp	r3, #0
   14a74:	ble	14a9c <__assert_fail@plt+0x35e4>
   14a78:	adds	r4, r4, #1
   14a7c:	adc	r5, r5, #0
   14a80:	ands	r3, r6, #16
   14a84:	cmp	r3, #0
   14a88:	beq	14a9c <__assert_fail@plt+0x35e4>
   14a8c:	ldrd	r2, [sp, #24]
   14a90:	cmp	r5, r3
   14a94:	cmpeq	r4, r2
   14a98:	beq	14bf4 <__assert_fail@plt+0x373c>
   14a9c:	mov	r8, r9
   14aa0:	mov	r0, r4
   14aa4:	mov	r1, r5
   14aa8:	mov	r2, #10
   14aac:	mov	r3, #0
   14ab0:	bl	1c378 <__assert_fail@plt+0xaec0>
   14ab4:	add	r2, r2, #48	; 0x30
   14ab8:	mov	r0, r4
   14abc:	mov	r1, r5
   14ac0:	mov	r3, #0
   14ac4:	strb	r2, [r8, #-1]!
   14ac8:	mov	r2, #10
   14acc:	bl	1c378 <__assert_fail@plt+0xaec0>
   14ad0:	cmp	r5, #0
   14ad4:	mov	r5, r1
   14ad8:	cmpeq	r4, #9
   14adc:	mov	r4, r0
   14ae0:	bhi	14aa0 <__assert_fail@plt+0x35e8>
   14ae4:	b	143c0 <__assert_fail@plt+0x2f08>
   14ae8:	ldr	r5, [sp, #12]
   14aec:	mvn	r2, #0
   14af0:	and	r1, r6, #3
   14af4:	movw	r3, #54412	; 0xd48c
   14af8:	movt	r3, #1
   14afc:	vstr	d9, [sp]
   14b00:	mov	r0, r5
   14b04:	bl	11344 <__sprintf_chk@plt>
   14b08:	mov	r0, r5
   14b0c:	bl	11314 <strlen@plt>
   14b10:	cmp	r0, r4
   14b14:	bls	149c8 <__assert_fail@plt+0x3510>
   14b18:	vldr	d7, [pc, #976]	; 14ef0 <__assert_fail@plt+0x3a38>
   14b1c:	vmul.f64	d9, d9, d7
   14b20:	b	14320 <__assert_fail@plt+0x2e68>
   14b24:	and	r0, r4, #1
   14b28:	mov	r1, #0
   14b2c:	ldr	r9, [sp, #32]
   14b30:	adds	r2, r0, r8
   14b34:	adc	r3, r1, r8, asr #31
   14b38:	orr	r2, r2, r3
   14b3c:	ldr	r3, [sp, #48]	; 0x30
   14b40:	cmp	r2, r1
   14b44:	addne	r3, r3, #1
   14b48:	cmp	r3, #5
   14b4c:	bgt	14a78 <__assert_fail@plt+0x35c0>
   14b50:	b	14a9c <__assert_fail@plt+0x35e4>
   14b54:	movcs	r8, #2
   14b58:	movcc	r8, #3
   14b5c:	b	144ec <__assert_fail@plt+0x3034>
   14b60:	tst	r6, #64	; 0x40
   14b64:	bne	14bcc <__assert_fail@plt+0x3714>
   14b68:	ldr	r2, [sp, #16]
   14b6c:	cmp	r2, #0
   14b70:	beq	14ee0 <__assert_fail@plt+0x3a28>
   14b74:	ldr	r0, [sp, #16]
   14b78:	ldr	r2, [sp, #40]	; 0x28
   14b7c:	adds	r1, r2, #0
   14b80:	movne	r1, #1
   14b84:	cmp	r2, #0
   14b88:	cmpeq	r0, #1
   14b8c:	bne	14990 <__assert_fail@plt+0x34d8>
   14b90:	ldr	r2, [sp, #32]
   14b94:	mov	r1, #107	; 0x6b
   14b98:	cmp	r3, #0
   14b9c:	strb	r1, [r2], #1
   14ba0:	bne	149b8 <__assert_fail@plt+0x3500>
   14ba4:	str	r2, [sp, #32]
   14ba8:	b	143ec <__assert_fail@plt+0x2f34>
   14bac:	mov	r3, #0
   14bb0:	str	r3, [sp, #16]
   14bb4:	b	14a4c <__assert_fail@plt+0x3594>
   14bb8:	ldr	r1, [sp, #32]
   14bbc:	mov	r3, #105	; 0x69
   14bc0:	add	r2, r1, #2
   14bc4:	strb	r3, [r1, #1]
   14bc8:	b	149b8 <__assert_fail@plt+0x3500>
   14bcc:	ldr	r1, [sp, #12]
   14bd0:	mov	r2, #32
   14bd4:	add	r0, r1, #648	; 0x288
   14bd8:	strb	r2, [r1, #647]	; 0x287
   14bdc:	str	r0, [sp, #32]
   14be0:	b	14b68 <__assert_fail@plt+0x36b0>
   14be4:	adds	r8, r2, #0
   14be8:	movne	r8, #1
   14bec:	mov	ip, r8
   14bf0:	b	1455c <__assert_fail@plt+0x30a4>
   14bf4:	ldr	r3, [sp, #16]
   14bf8:	tst	r6, #8
   14bfc:	add	r3, r3, #1
   14c00:	str	r3, [sp, #16]
   14c04:	beq	14e0c <__assert_fail@plt+0x3954>
   14c08:	mov	r3, #49	; 0x31
   14c0c:	sub	r8, r9, #1
   14c10:	strb	r3, [r9, #-1]
   14c14:	b	143c0 <__assert_fail@plt+0x2f08>
   14c18:	mov	r3, #0
   14c1c:	str	r3, [sp, #16]
   14c20:	b	143dc <__assert_fail@plt+0x2f24>
   14c24:	adds	ip, r3, #0
   14c28:	movne	ip, #1
   14c2c:	mov	r8, ip
   14c30:	b	145b4 <__assert_fail@plt+0x30fc>
   14c34:	adds	ip, r3, #0
   14c38:	movne	ip, #1
   14c3c:	mov	r8, ip
   14c40:	b	14610 <__assert_fail@plt+0x3158>
   14c44:	vldr	d7, [pc, #676]	; 14ef0 <__assert_fail@plt+0x3a38>
   14c48:	and	r3, r6, #3
   14c4c:	cmp	r3, #1
   14c50:	vmul.f64	d9, d9, d7
   14c54:	bne	142cc <__assert_fail@plt+0x2e14>
   14c58:	b	14320 <__assert_fail@plt+0x2e68>
   14c5c:	adds	ip, r3, #0
   14c60:	movne	ip, #1
   14c64:	mov	r8, ip
   14c68:	b	1466c <__assert_fail@plt+0x31b4>
   14c6c:	adds	ip, r3, #0
   14c70:	movne	ip, #1
   14c74:	mov	r8, ip
   14c78:	b	146c8 <__assert_fail@plt+0x3210>
   14c7c:	adds	ip, r3, #0
   14c80:	movne	ip, #1
   14c84:	mov	r8, ip
   14c88:	b	14724 <__assert_fail@plt+0x326c>
   14c8c:	mov	r3, #1
   14c90:	str	r3, [sp, #16]
   14c94:	b	1421c <__assert_fail@plt+0x2d64>
   14c98:	mov	r3, #2
   14c9c:	vmov.f64	d7, d6
   14ca0:	str	r3, [sp, #16]
   14ca4:	b	1421c <__assert_fail@plt+0x2d64>
   14ca8:	mov	r3, #3
   14cac:	vmov.f64	d7, d5
   14cb0:	str	r3, [sp, #16]
   14cb4:	b	1421c <__assert_fail@plt+0x2d64>
   14cb8:	cmp	r3, #9
   14cbc:	beq	14de8 <__assert_fail@plt+0x3930>
   14cc0:	add	r3, r3, #49	; 0x31
   14cc4:	uxtb	r3, r3
   14cc8:	b	1477c <__assert_fail@plt+0x32c4>
   14ccc:	mov	r3, #4
   14cd0:	vmov.f64	d7, d6
   14cd4:	str	r3, [sp, #16]
   14cd8:	b	1421c <__assert_fail@plt+0x2d64>
   14cdc:	mov	r3, #5
   14ce0:	vmov.f64	d7, d5
   14ce4:	str	r3, [sp, #16]
   14ce8:	b	1421c <__assert_fail@plt+0x2d64>
   14cec:	mov	r3, #6
   14cf0:	vmov.f64	d7, d6
   14cf4:	str	r3, [sp, #16]
   14cf8:	b	1421c <__assert_fail@plt+0x2d64>
   14cfc:	ldr	r3, [sp, #48]	; 0x30
   14d00:	and	r3, r3, #1
   14d04:	add	r3, r3, r8
   14d08:	cmp	r3, #2
   14d0c:	movle	r3, #0
   14d10:	movgt	r3, #1
   14d14:	b	14754 <__assert_fail@plt+0x329c>
   14d18:	tst	r6, #64	; 0x40
   14d1c:	and	r3, r6, #256	; 0x100
   14d20:	moveq	r2, #2
   14d24:	streq	r2, [sp, #16]
   14d28:	beq	14984 <__assert_fail@plt+0x34cc>
   14d2c:	ldr	r1, [sp, #12]
   14d30:	mov	r2, #32
   14d34:	add	r0, r1, #648	; 0x288
   14d38:	strb	r2, [r1, #647]	; 0x287
   14d3c:	mov	r2, #2
   14d40:	str	r2, [sp, #16]
   14d44:	str	r0, [sp, #32]
   14d48:	b	14984 <__assert_fail@plt+0x34cc>
   14d4c:	tst	r6, #64	; 0x40
   14d50:	and	r3, r6, #256	; 0x100
   14d54:	moveq	r2, #3
   14d58:	streq	r2, [sp, #16]
   14d5c:	beq	14984 <__assert_fail@plt+0x34cc>
   14d60:	ldr	r1, [sp, #12]
   14d64:	mov	r2, #32
   14d68:	add	r0, r1, #648	; 0x288
   14d6c:	strb	r2, [r1, #647]	; 0x287
   14d70:	mov	r2, #3
   14d74:	str	r2, [sp, #16]
   14d78:	str	r0, [sp, #32]
   14d7c:	b	14984 <__assert_fail@plt+0x34cc>
   14d80:	tst	r6, #64	; 0x40
   14d84:	and	r3, r6, #256	; 0x100
   14d88:	moveq	r2, #5
   14d8c:	streq	r2, [sp, #16]
   14d90:	beq	14984 <__assert_fail@plt+0x34cc>
   14d94:	ldr	r1, [sp, #12]
   14d98:	mov	r2, #32
   14d9c:	add	r0, r1, #648	; 0x288
   14da0:	strb	r2, [r1, #647]	; 0x287
   14da4:	mov	r2, #5
   14da8:	str	r2, [sp, #16]
   14dac:	str	r0, [sp, #32]
   14db0:	b	14984 <__assert_fail@plt+0x34cc>
   14db4:	tst	r6, #64	; 0x40
   14db8:	and	r3, r6, #256	; 0x100
   14dbc:	moveq	r2, #6
   14dc0:	streq	r2, [sp, #16]
   14dc4:	beq	14984 <__assert_fail@plt+0x34cc>
   14dc8:	ldr	r1, [sp, #12]
   14dcc:	mov	r2, #32
   14dd0:	add	r0, r1, #648	; 0x288
   14dd4:	strb	r2, [r1, #647]	; 0x287
   14dd8:	mov	r2, #6
   14ddc:	str	r2, [sp, #16]
   14de0:	str	r0, [sp, #32]
   14de4:	b	14984 <__assert_fail@plt+0x34cc>
   14de8:	adds	r4, r4, #1
   14dec:	adc	r5, r5, #0
   14df0:	cmp	r5, #0
   14df4:	cmpeq	r4, #10
   14df8:	beq	14e60 <__assert_fail@plt+0x39a8>
   14dfc:	mov	r8, #0
   14e00:	b	14770 <__assert_fail@plt+0x32b8>
   14e04:	ldr	r9, [sp, #32]
   14e08:	b	147a4 <__assert_fail@plt+0x32ec>
   14e0c:	mov	r0, #48	; 0x30
   14e10:	mvn	r3, fp
   14e14:	ldr	r1, [sp, #44]	; 0x2c
   14e18:	mov	r2, fp
   14e1c:	strb	r0, [r9, #-1]
   14e20:	add	r9, r9, r3
   14e24:	mov	r0, r9
   14e28:	bl	11194 <memcpy@plt>
   14e2c:	b	14c08 <__assert_fail@plt+0x3750>
   14e30:	mov	r3, #1
   14e34:	str	r3, [sp, #16]
   14e38:	b	1472c <__assert_fail@plt+0x3274>
   14e3c:	mov	r3, #3
   14e40:	str	r3, [sp, #16]
   14e44:	b	1472c <__assert_fail@plt+0x3274>
   14e48:	mov	r3, #2
   14e4c:	str	r3, [sp, #16]
   14e50:	b	1472c <__assert_fail@plt+0x3274>
   14e54:	mov	r3, #4
   14e58:	str	r3, [sp, #16]
   14e5c:	b	1472c <__assert_fail@plt+0x3274>
   14e60:	mov	r8, #0
   14e64:	ldr	r9, [sp, #32]
   14e68:	b	147a4 <__assert_fail@plt+0x32ec>
   14e6c:	mov	r3, #5
   14e70:	str	r3, [sp, #16]
   14e74:	b	1472c <__assert_fail@plt+0x3274>
   14e78:	tst	r6, #64	; 0x40
   14e7c:	and	r3, r6, #256	; 0x100
   14e80:	moveq	r2, #4
   14e84:	streq	r2, [sp, #16]
   14e88:	beq	14984 <__assert_fail@plt+0x34cc>
   14e8c:	ldr	r1, [sp, #12]
   14e90:	mov	r2, #32
   14e94:	add	r0, r1, #648	; 0x288
   14e98:	strb	r2, [r1, #647]	; 0x287
   14e9c:	mov	r2, #4
   14ea0:	str	r2, [sp, #16]
   14ea4:	str	r0, [sp, #32]
   14ea8:	b	14984 <__assert_fail@plt+0x34cc>
   14eac:	tst	r6, #64	; 0x40
   14eb0:	and	r3, r6, #256	; 0x100
   14eb4:	moveq	r2, #1
   14eb8:	streq	r2, [sp, #16]
   14ebc:	beq	14b74 <__assert_fail@plt+0x36bc>
   14ec0:	ldr	r1, [sp, #12]
   14ec4:	mov	r2, #32
   14ec8:	add	r0, r1, #648	; 0x288
   14ecc:	strb	r2, [r1, #647]	; 0x287
   14ed0:	mov	r2, #1
   14ed4:	str	r2, [sp, #16]
   14ed8:	str	r0, [sp, #32]
   14edc:	b	14b74 <__assert_fail@plt+0x36bc>
   14ee0:	cmp	r3, #0
   14ee4:	ldrne	r2, [sp, #32]
   14ee8:	bne	149b8 <__assert_fail@plt+0x3500>
   14eec:	b	143ec <__assert_fail@plt+0x2f34>
   14ef0:	andeq	r0, r0, r0
   14ef4:	eormi	r0, r4, r0
   14ef8:	tst	r6, #64	; 0x40
   14efc:	and	r3, r6, #256	; 0x100
   14f00:	moveq	r2, #7
   14f04:	streq	r2, [sp, #16]
   14f08:	beq	14984 <__assert_fail@plt+0x34cc>
   14f0c:	ldr	r1, [sp, #12]
   14f10:	mov	r2, #32
   14f14:	add	r0, r1, #648	; 0x288
   14f18:	strb	r2, [r1, #647]	; 0x287
   14f1c:	mov	r2, #7
   14f20:	str	r2, [sp, #16]
   14f24:	str	r0, [sp, #32]
   14f28:	b	14984 <__assert_fail@plt+0x34cc>
   14f2c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14f30:	subs	r4, r0, #0
   14f34:	strd	r6, [sp, #8]
   14f38:	mov	r7, r1
   14f3c:	mov	r6, r2
   14f40:	strd	r8, [sp, #16]
   14f44:	strd	sl, [sp, #24]
   14f48:	str	lr, [sp, #32]
   14f4c:	sub	sp, sp, #20
   14f50:	beq	15090 <__assert_fail@plt+0x3bd8>
   14f54:	ldrb	r3, [r4]
   14f58:	cmp	r3, #39	; 0x27
   14f5c:	beq	14fd0 <__assert_fail@plt+0x3b18>
   14f60:	mov	r9, #160	; 0xa0
   14f64:	mov	fp, #416	; 0x1a0
   14f68:	mov	sl, #384	; 0x180
   14f6c:	mov	r8, #0
   14f70:	movw	r5, #54368	; 0xd460
   14f74:	movt	r5, #1
   14f78:	add	r2, r5, #12
   14f7c:	add	r1, r5, #20
   14f80:	mov	r3, #4
   14f84:	mov	r0, r4
   14f88:	bl	134c8 <__assert_fail@plt+0x2010>
   14f8c:	cmp	r0, #0
   14f90:	blt	14fe8 <__assert_fail@plt+0x3b30>
   14f94:	add	r5, r5, r0, lsl #2
   14f98:	mov	r2, #1
   14f9c:	mov	r3, #0
   14fa0:	mov	r0, #0
   14fa4:	ldr	r1, [r5, #12]
   14fa8:	strd	r2, [r6]
   14fac:	orr	r8, r8, r1
   14fb0:	str	r8, [r7]
   14fb4:	add	sp, sp, #20
   14fb8:	ldrd	r4, [sp]
   14fbc:	ldrd	r6, [sp, #8]
   14fc0:	ldrd	r8, [sp, #16]
   14fc4:	ldrd	sl, [sp, #24]
   14fc8:	add	sp, sp, #32
   14fcc:	pop	{pc}		; (ldr pc, [sp], #4)
   14fd0:	add	r4, r4, #1
   14fd4:	mov	r9, #164	; 0xa4
   14fd8:	mov	fp, #420	; 0x1a4
   14fdc:	mov	sl, #388	; 0x184
   14fe0:	mov	r8, #4
   14fe4:	b	14f70 <__assert_fail@plt+0x3ab8>
   14fe8:	movw	r0, #54460	; 0xd4bc
   14fec:	movt	r0, #1
   14ff0:	mov	r3, r6
   14ff4:	mov	r2, #0
   14ff8:	add	r1, sp, #12
   14ffc:	str	r0, [sp]
   15000:	mov	r0, r4
   15004:	bl	1ab4c <__assert_fail@plt+0x9694>
   15008:	cmp	r0, #0
   1500c:	bne	15054 <__assert_fail@plt+0x3b9c>
   15010:	ldrb	r3, [r4]
   15014:	sub	r3, r3, #48	; 0x30
   15018:	cmp	r3, #9
   1501c:	bls	15048 <__assert_fail@plt+0x3b90>
   15020:	ldr	r2, [sp, #12]
   15024:	cmp	r4, r2
   15028:	bne	15038 <__assert_fail@plt+0x3b80>
   1502c:	b	150e4 <__assert_fail@plt+0x3c2c>
   15030:	cmp	r2, r4
   15034:	beq	150e4 <__assert_fail@plt+0x3c2c>
   15038:	ldrb	r3, [r4, #1]!
   1503c:	sub	r3, r3, #48	; 0x30
   15040:	cmp	r3, #9
   15044:	bhi	15030 <__assert_fail@plt+0x3b78>
   15048:	ldrd	r2, [r6]
   1504c:	str	r8, [r7]
   15050:	b	15060 <__assert_fail@plt+0x3ba8>
   15054:	mov	r1, #0
   15058:	ldrd	r2, [r6]
   1505c:	str	r1, [r7]
   15060:	orrs	r3, r2, r3
   15064:	bne	14fb4 <__assert_fail@plt+0x3afc>
   15068:	movw	r0, #54444	; 0xd4ac
   1506c:	movt	r0, #1
   15070:	bl	112b4 <getenv@plt>
   15074:	cmp	r0, #0
   15078:	mov	r3, #0
   1507c:	moveq	r2, #1024	; 0x400
   15080:	movne	r2, #512	; 0x200
   15084:	mov	r0, #4
   15088:	strd	r2, [r6]
   1508c:	b	14fb4 <__assert_fail@plt+0x3afc>
   15090:	movw	r0, #54420	; 0xd494
   15094:	movt	r0, #1
   15098:	bl	112b4 <getenv@plt>
   1509c:	subs	r4, r0, #0
   150a0:	bne	14f54 <__assert_fail@plt+0x3a9c>
   150a4:	movw	r0, #54432	; 0xd4a0
   150a8:	movt	r0, #1
   150ac:	bl	112b4 <getenv@plt>
   150b0:	subs	r4, r0, #0
   150b4:	bne	14f54 <__assert_fail@plt+0x3a9c>
   150b8:	movw	r0, #54444	; 0xd4ac
   150bc:	movt	r0, #1
   150c0:	bl	112b4 <getenv@plt>
   150c4:	subs	r3, r0, #0
   150c8:	beq	15110 <__assert_fail@plt+0x3c58>
   150cc:	mov	r2, #512	; 0x200
   150d0:	mov	r3, #0
   150d4:	mov	r0, r4
   150d8:	strd	r2, [r6]
   150dc:	str	r4, [r7]
   150e0:	b	14fb4 <__assert_fail@plt+0x3afc>
   150e4:	ldrb	r3, [r2, #-1]
   150e8:	cmp	r3, #66	; 0x42
   150ec:	beq	150f8 <__assert_fail@plt+0x3c40>
   150f0:	mov	r8, r9
   150f4:	b	15048 <__assert_fail@plt+0x3b90>
   150f8:	ldrb	r3, [r2, #-2]
   150fc:	cmp	r3, #105	; 0x69
   15100:	movne	r8, sl
   15104:	bne	15048 <__assert_fail@plt+0x3b90>
   15108:	mov	r9, fp
   1510c:	b	150f0 <__assert_fail@plt+0x3c38>
   15110:	mov	r4, #1024	; 0x400
   15114:	mov	r5, #0
   15118:	mov	r0, r3
   1511c:	strd	r4, [r6]
   15120:	str	r3, [r7]
   15124:	b	14fb4 <__assert_fail@plt+0x3afc>
   15128:	mov	r3, #0
   1512c:	strd	r4, [sp, #-16]!
   15130:	mov	r4, r0
   15134:	mov	r5, r1
   15138:	str	r6, [sp, #8]
   1513c:	add	r6, r2, #20
   15140:	str	lr, [sp, #12]
   15144:	strb	r3, [r2, #20]
   15148:	mov	r0, r4
   1514c:	mov	r1, r5
   15150:	mov	r2, #10
   15154:	mov	r3, #0
   15158:	bl	1c378 <__assert_fail@plt+0xaec0>
   1515c:	add	ip, r2, #48	; 0x30
   15160:	mov	r0, r4
   15164:	mov	r1, r5
   15168:	mov	r2, #10
   1516c:	mov	r3, #0
   15170:	strb	ip, [r6, #-1]!
   15174:	bl	1c378 <__assert_fail@plt+0xaec0>
   15178:	cmp	r5, #0
   1517c:	mov	r5, r1
   15180:	cmpeq	r4, #9
   15184:	mov	r4, r0
   15188:	bhi	15148 <__assert_fail@plt+0x3c90>
   1518c:	mov	r0, r6
   15190:	ldrd	r4, [sp]
   15194:	ldr	r6, [sp, #8]
   15198:	add	sp, sp, #12
   1519c:	pop	{pc}		; (ldr pc, [sp], #4)
   151a0:	strd	r4, [sp, #-16]!
   151a4:	subs	r4, r0, #0
   151a8:	str	r6, [sp, #8]
   151ac:	str	lr, [sp, #12]
   151b0:	beq	15248 <__assert_fail@plt+0x3d90>
   151b4:	mov	r1, #47	; 0x2f
   151b8:	bl	113f8 <strrchr@plt>
   151bc:	subs	r5, r0, #0
   151c0:	beq	15220 <__assert_fail@plt+0x3d68>
   151c4:	add	r6, r5, #1
   151c8:	sub	r3, r6, r4
   151cc:	cmp	r3, #6
   151d0:	ble	15220 <__assert_fail@plt+0x3d68>
   151d4:	movw	r1, #54556	; 0xd51c
   151d8:	movt	r1, #1
   151dc:	mov	r2, #7
   151e0:	sub	r0, r5, #6
   151e4:	bl	11488 <strncmp@plt>
   151e8:	cmp	r0, #0
   151ec:	bne	15220 <__assert_fail@plt+0x3d68>
   151f0:	movw	r1, #54564	; 0xd524
   151f4:	movt	r1, #1
   151f8:	mov	r2, #3
   151fc:	mov	r0, r6
   15200:	bl	11488 <strncmp@plt>
   15204:	cmp	r0, #0
   15208:	movne	r4, r6
   1520c:	bne	15220 <__assert_fail@plt+0x3d68>
   15210:	add	r4, r5, #4
   15214:	movw	r3, #57760	; 0xe1a0
   15218:	movt	r3, #2
   1521c:	str	r4, [r3]
   15220:	movw	r2, #57808	; 0xe1d0
   15224:	movt	r2, #2
   15228:	ldr	r6, [sp, #8]
   1522c:	movw	r3, #57764	; 0xe1a4
   15230:	movt	r3, #2
   15234:	str	r4, [r2]
   15238:	str	r4, [r3]
   1523c:	ldrd	r4, [sp]
   15240:	add	sp, sp, #12
   15244:	pop	{pc}		; (ldr pc, [sp], #4)
   15248:	movw	r3, #57776	; 0xe1b0
   1524c:	movt	r3, #2
   15250:	movw	r0, #54500	; 0xd4e4
   15254:	movt	r0, #1
   15258:	ldr	r3, [r3]
   1525c:	mov	r2, #55	; 0x37
   15260:	mov	r1, #1
   15264:	bl	11248 <fwrite@plt>
   15268:	bl	114a0 <abort@plt>
   1526c:	mov	r2, #5
   15270:	strd	r4, [sp, #-16]!
   15274:	mov	r5, r0
   15278:	str	r6, [sp, #8]
   1527c:	mov	r6, r1
   15280:	mov	r1, r0
   15284:	mov	r0, #0
   15288:	str	lr, [sp, #12]
   1528c:	bl	111e8 <dcgettext@plt>
   15290:	cmp	r5, r0
   15294:	mov	r4, r0
   15298:	beq	152b0 <__assert_fail@plt+0x3df8>
   1529c:	mov	r0, r4
   152a0:	ldrd	r4, [sp]
   152a4:	ldr	r6, [sp, #8]
   152a8:	add	sp, sp, #12
   152ac:	pop	{pc}		; (ldr pc, [sp], #4)
   152b0:	bl	1bcc8 <__assert_fail@plt+0xa810>
   152b4:	ldrb	r3, [r0]
   152b8:	bic	r3, r3, #32
   152bc:	cmp	r3, #85	; 0x55
   152c0:	bne	15328 <__assert_fail@plt+0x3e70>
   152c4:	ldrb	r3, [r0, #1]
   152c8:	bic	r3, r3, #32
   152cc:	cmp	r3, #84	; 0x54
   152d0:	bne	153a8 <__assert_fail@plt+0x3ef0>
   152d4:	ldrb	r3, [r0, #2]
   152d8:	bic	r3, r3, #32
   152dc:	cmp	r3, #70	; 0x46
   152e0:	bne	153a8 <__assert_fail@plt+0x3ef0>
   152e4:	ldrb	r3, [r0, #3]
   152e8:	cmp	r3, #45	; 0x2d
   152ec:	bne	153a8 <__assert_fail@plt+0x3ef0>
   152f0:	ldrb	r3, [r0, #4]
   152f4:	cmp	r3, #56	; 0x38
   152f8:	bne	153a8 <__assert_fail@plt+0x3ef0>
   152fc:	ldrb	r3, [r0, #5]
   15300:	cmp	r3, #0
   15304:	bne	153a8 <__assert_fail@plt+0x3ef0>
   15308:	ldrb	r2, [r4]
   1530c:	movw	r3, #54656	; 0xd580
   15310:	movt	r3, #1
   15314:	movw	r4, #54668	; 0xd58c
   15318:	movt	r4, #1
   1531c:	cmp	r2, #96	; 0x60
   15320:	movne	r4, r3
   15324:	b	1529c <__assert_fail@plt+0x3de4>
   15328:	cmp	r3, #71	; 0x47
   1532c:	bne	153a8 <__assert_fail@plt+0x3ef0>
   15330:	ldrb	r3, [r0, #1]
   15334:	bic	r3, r3, #32
   15338:	cmp	r3, #66	; 0x42
   1533c:	bne	153a8 <__assert_fail@plt+0x3ef0>
   15340:	ldrb	r3, [r0, #2]
   15344:	cmp	r3, #49	; 0x31
   15348:	bne	153a8 <__assert_fail@plt+0x3ef0>
   1534c:	ldrb	r3, [r0, #3]
   15350:	cmp	r3, #56	; 0x38
   15354:	bne	153a8 <__assert_fail@plt+0x3ef0>
   15358:	ldrb	r3, [r0, #4]
   1535c:	cmp	r3, #48	; 0x30
   15360:	bne	153a8 <__assert_fail@plt+0x3ef0>
   15364:	ldrb	r3, [r0, #5]
   15368:	cmp	r3, #51	; 0x33
   1536c:	bne	153a8 <__assert_fail@plt+0x3ef0>
   15370:	ldrb	r3, [r0, #6]
   15374:	cmp	r3, #48	; 0x30
   15378:	bne	153a8 <__assert_fail@plt+0x3ef0>
   1537c:	ldrb	r3, [r0, #7]
   15380:	cmp	r3, #0
   15384:	bne	153a8 <__assert_fail@plt+0x3ef0>
   15388:	ldrb	r2, [r4]
   1538c:	movw	r3, #54660	; 0xd584
   15390:	movt	r3, #1
   15394:	movw	r4, #54664	; 0xd588
   15398:	movt	r4, #1
   1539c:	cmp	r2, #96	; 0x60
   153a0:	movne	r4, r3
   153a4:	b	1529c <__assert_fail@plt+0x3de4>
   153a8:	movw	r3, #54672	; 0xd590
   153ac:	movt	r3, #1
   153b0:	cmp	r6, #9
   153b4:	movw	r4, #54652	; 0xd57c
   153b8:	movt	r4, #1
   153bc:	movne	r4, r3
   153c0:	b	1529c <__assert_fail@plt+0x3de4>
   153c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   153c8:	strd	r6, [sp, #8]
   153cc:	strd	r8, [sp, #16]
   153d0:	mov	r8, r3
   153d4:	strd	sl, [sp, #24]
   153d8:	mov	fp, r0
   153dc:	mov	sl, r1
   153e0:	str	lr, [sp, #32]
   153e4:	sub	sp, sp, #140	; 0x8c
   153e8:	ldr	r3, [sp, #180]	; 0xb4
   153ec:	str	r2, [sp, #28]
   153f0:	and	r4, r3, #2
   153f4:	ubfx	r3, r3, #1, #1
   153f8:	str	r3, [sp, #44]	; 0x2c
   153fc:	bl	1126c <__ctype_get_mb_cur_max@plt>
   15400:	ldr	r3, [sp, #176]	; 0xb0
   15404:	str	r0, [sp, #76]	; 0x4c
   15408:	cmp	r3, #10
   1540c:	ldrls	pc, [pc, r3, lsl #2]
   15410:	b	16dac <__assert_fail@plt+0x58f4>
   15414:	muleq	r1, r4, r8
   15418:			; <UNDEFINED> instruction: 0x000159b0
   1541c:	andeq	r5, r1, ip, lsr #30
   15420:	andeq	r5, r1, ip, lsl sl
   15424:	muleq	r1, ip, r7
   15428:	andeq	r5, r1, r8, lsl r8
   1542c:	strdeq	r5, [r1], -r0
   15430:	andeq	r5, r1, r8, asr r9
   15434:	andeq	r5, r1, r0, asr #8
   15438:	andeq	r5, r1, r0, asr #8
   1543c:	andeq	r5, r1, r0, asr #8
   15440:	ldr	r3, [sp, #176]	; 0xb0
   15444:	cmp	r3, #10
   15448:	beq	15474 <__assert_fail@plt+0x3fbc>
   1544c:	mov	r1, r3
   15450:	movw	r0, #54676	; 0xd594
   15454:	movt	r0, #1
   15458:	bl	1526c <__assert_fail@plt+0x3db4>
   1545c:	str	r0, [sp, #188]	; 0xbc
   15460:	movw	r0, #54672	; 0xd590
   15464:	movt	r0, #1
   15468:	ldr	r1, [sp, #176]	; 0xb0
   1546c:	bl	1526c <__assert_fail@plt+0x3db4>
   15470:	str	r0, [sp, #192]	; 0xc0
   15474:	cmp	r4, #0
   15478:	movne	r4, #0
   1547c:	beq	16b38 <__assert_fail@plt+0x5680>
   15480:	mov	r5, #0
   15484:	ldr	r0, [sp, #192]	; 0xc0
   15488:	mov	r9, r5
   1548c:	str	r5, [sp, #64]	; 0x40
   15490:	bl	11314 <strlen@plt>
   15494:	mov	r3, #1
   15498:	ldr	r2, [sp, #44]	; 0x2c
   1549c:	cmp	r0, r5
   154a0:	moveq	r2, r5
   154a4:	str	r3, [sp, #32]
   154a8:	str	r3, [sp, #48]	; 0x30
   154ac:	str	r5, [sp, #52]	; 0x34
   154b0:	str	r3, [sp, #60]	; 0x3c
   154b4:	ldr	r3, [sp, #180]	; 0xb4
   154b8:	str	r0, [sp, #56]	; 0x38
   154bc:	str	r5, [sp, #68]	; 0x44
   154c0:	str	r5, [sp, #80]	; 0x50
   154c4:	str	r5, [sp, #84]	; 0x54
   154c8:	and	r3, r3, #1
   154cc:	str	r2, [sp, #88]	; 0x58
   154d0:	str	r3, [sp, #92]	; 0x5c
   154d4:	ldr	r3, [sp, #180]	; 0xb4
   154d8:	and	r3, r3, #4
   154dc:	str	r3, [sp, #96]	; 0x60
   154e0:	ldr	r3, [sp, #192]	; 0xc0
   154e4:	str	r3, [sp, #72]	; 0x48
   154e8:	mov	r3, fp
   154ec:	mov	r7, #0
   154f0:	mov	fp, r9
   154f4:	mov	r9, r3
   154f8:	cmn	r8, #1
   154fc:	beq	15b00 <__assert_fail@plt+0x4648>
   15500:	subs	r6, r8, r7
   15504:	movne	r6, #1
   15508:	cmp	r6, #0
   1550c:	beq	15b18 <__assert_fail@plt+0x4660>
   15510:	ldr	r0, [sp, #28]
   15514:	ldr	r3, [sp, #48]	; 0x30
   15518:	cmp	r3, #0
   1551c:	add	r3, r0, r7
   15520:	str	r3, [sp, #36]	; 0x24
   15524:	beq	15fa4 <__assert_fail@plt+0x4aec>
   15528:	ldr	r2, [sp, #56]	; 0x38
   1552c:	cmp	r2, #0
   15530:	beq	164a4 <__assert_fail@plt+0x4fec>
   15534:	cmp	r2, #1
   15538:	mov	r3, r2
   1553c:	movls	r3, #0
   15540:	movhi	r3, #1
   15544:	cmn	r8, #1
   15548:	add	r5, r7, r2
   1554c:	movne	r3, #0
   15550:	cmp	r3, #0
   15554:	beq	15560 <__assert_fail@plt+0x40a8>
   15558:	bl	11314 <strlen@plt>
   1555c:	mov	r8, r0
   15560:	cmp	r5, r8
   15564:	bhi	164a4 <__assert_fail@plt+0x4fec>
   15568:	ldr	r0, [sp, #36]	; 0x24
   1556c:	ldr	r2, [sp, #56]	; 0x38
   15570:	ldr	r1, [sp, #72]	; 0x48
   15574:	bl	111d0 <memcmp@plt>
   15578:	cmp	r0, #0
   1557c:	bne	164a4 <__assert_fail@plt+0x4fec>
   15580:	ldr	r3, [sp, #44]	; 0x2c
   15584:	cmp	r3, #0
   15588:	bne	16c50 <__assert_fail@plt+0x5798>
   1558c:	ldr	r3, [sp, #36]	; 0x24
   15590:	ldrb	r5, [r3]
   15594:	cmp	r5, #126	; 0x7e
   15598:	ldrls	pc, [pc, r5, lsl #2]
   1559c:	b	16a38 <__assert_fail@plt+0x5580>
   155a0:	andeq	r5, r1, r4, ror ip
   155a4:	andeq	r6, r1, r8, lsr sl
   155a8:	andeq	r6, r1, r8, lsr sl
   155ac:	andeq	r6, r1, r8, lsr sl
   155b0:	andeq	r6, r1, r8, lsr sl
   155b4:	andeq	r6, r1, r8, lsr sl
   155b8:	andeq	r6, r1, r8, lsr sl
   155bc:	andeq	r5, r1, ip, asr #23
   155c0:	andeq	r5, r1, r4, asr #23
   155c4:	ldrdeq	r5, [r1], -r4
   155c8:	andeq	r5, r1, r8, asr sp
   155cc:	andeq	r5, r1, r8, asr #26
   155d0:	andeq	r5, r1, r0, ror sl
   155d4:	andeq	r5, r1, r4, lsr #26
   155d8:	andeq	r6, r1, r8, lsr sl
   155dc:	andeq	r6, r1, r8, lsr sl
   155e0:	andeq	r6, r1, r8, lsr sl
   155e4:	andeq	r6, r1, r8, lsr sl
   155e8:	andeq	r6, r1, r8, lsr sl
   155ec:	andeq	r6, r1, r8, lsr sl
   155f0:	andeq	r6, r1, r8, lsr sl
   155f4:	andeq	r6, r1, r8, lsr sl
   155f8:	andeq	r6, r1, r8, lsr sl
   155fc:	andeq	r6, r1, r8, lsr sl
   15600:	andeq	r6, r1, r8, lsr sl
   15604:	andeq	r6, r1, r8, lsr sl
   15608:	andeq	r6, r1, r8, lsr sl
   1560c:	andeq	r6, r1, r8, lsr sl
   15610:	andeq	r6, r1, r8, lsr sl
   15614:	andeq	r6, r1, r8, lsr sl
   15618:	andeq	r6, r1, r8, lsr sl
   1561c:	andeq	r6, r1, r8, lsr sl
   15620:	ldrdeq	r5, [r1], -r0
   15624:	andeq	r5, r1, r4, asr #27
   15628:	andeq	r5, r1, r4, asr #27
   1562c:			; <UNDEFINED> instruction: 0x00015db8
   15630:	andeq	r5, r1, r4, asr #27
   15634:	muleq	r1, ip, lr
   15638:	andeq	r5, r1, r4, asr #27
   1563c:	andeq	r5, r1, ip, lsl #30
   15640:	andeq	r5, r1, r4, asr #27
   15644:	andeq	r5, r1, r4, asr #27
   15648:	andeq	r5, r1, r4, asr #27
   1564c:	muleq	r1, ip, lr
   15650:	muleq	r1, ip, lr
   15654:	muleq	r1, ip, lr
   15658:	muleq	r1, ip, lr
   1565c:	muleq	r1, ip, lr
   15660:	muleq	r1, ip, lr
   15664:	muleq	r1, ip, lr
   15668:	muleq	r1, ip, lr
   1566c:	muleq	r1, ip, lr
   15670:	muleq	r1, ip, lr
   15674:	muleq	r1, ip, lr
   15678:	muleq	r1, ip, lr
   1567c:	muleq	r1, ip, lr
   15680:	muleq	r1, ip, lr
   15684:	muleq	r1, ip, lr
   15688:	muleq	r1, ip, lr
   1568c:	andeq	r5, r1, r4, asr #27
   15690:	andeq	r5, r1, r4, asr #27
   15694:	andeq	r5, r1, r4, asr #27
   15698:	andeq	r5, r1, r4, asr #27
   1569c:			; <UNDEFINED> instruction: 0x00015ebc
   156a0:	andeq	r6, r1, r8, lsr sl
   156a4:	muleq	r1, ip, lr
   156a8:	muleq	r1, ip, lr
   156ac:	muleq	r1, ip, lr
   156b0:	muleq	r1, ip, lr
   156b4:	muleq	r1, ip, lr
   156b8:	muleq	r1, ip, lr
   156bc:	muleq	r1, ip, lr
   156c0:	muleq	r1, ip, lr
   156c4:	muleq	r1, ip, lr
   156c8:	muleq	r1, ip, lr
   156cc:	muleq	r1, ip, lr
   156d0:	muleq	r1, ip, lr
   156d4:	muleq	r1, ip, lr
   156d8:	muleq	r1, ip, lr
   156dc:	muleq	r1, ip, lr
   156e0:	muleq	r1, ip, lr
   156e4:	muleq	r1, ip, lr
   156e8:	muleq	r1, ip, lr
   156ec:	muleq	r1, ip, lr
   156f0:	muleq	r1, ip, lr
   156f4:	muleq	r1, ip, lr
   156f8:	muleq	r1, ip, lr
   156fc:	muleq	r1, ip, lr
   15700:	muleq	r1, ip, lr
   15704:	muleq	r1, ip, lr
   15708:	muleq	r1, ip, lr
   1570c:	andeq	r5, r1, r4, asr #27
   15710:	andeq	r5, r1, r0, ror #28
   15714:	muleq	r1, ip, lr
   15718:	andeq	r5, r1, r4, asr #27
   1571c:	muleq	r1, ip, lr
   15720:	andeq	r5, r1, r4, asr #27
   15724:	muleq	r1, ip, lr
   15728:	muleq	r1, ip, lr
   1572c:	muleq	r1, ip, lr
   15730:	muleq	r1, ip, lr
   15734:	muleq	r1, ip, lr
   15738:	muleq	r1, ip, lr
   1573c:	muleq	r1, ip, lr
   15740:	muleq	r1, ip, lr
   15744:	muleq	r1, ip, lr
   15748:	muleq	r1, ip, lr
   1574c:	muleq	r1, ip, lr
   15750:	muleq	r1, ip, lr
   15754:	muleq	r1, ip, lr
   15758:	muleq	r1, ip, lr
   1575c:	muleq	r1, ip, lr
   15760:	muleq	r1, ip, lr
   15764:	muleq	r1, ip, lr
   15768:	muleq	r1, ip, lr
   1576c:	muleq	r1, ip, lr
   15770:	muleq	r1, ip, lr
   15774:	muleq	r1, ip, lr
   15778:	muleq	r1, ip, lr
   1577c:	muleq	r1, ip, lr
   15780:	muleq	r1, ip, lr
   15784:	muleq	r1, ip, lr
   15788:	muleq	r1, ip, lr
   1578c:	andeq	r5, r1, ip, ror #26
   15790:	andeq	r5, r1, r4, asr #27
   15794:	andeq	r5, r1, ip, ror #26
   15798:			; <UNDEFINED> instruction: 0x00015db8
   1579c:	ldr	r3, [sp, #180]	; 0xb4
   157a0:	cmp	r4, #0
   157a4:	and	r3, r3, #1
   157a8:	str	r3, [sp, #92]	; 0x5c
   157ac:	ldr	r3, [sp, #180]	; 0xb4
   157b0:	and	r3, r3, #4
   157b4:	str	r3, [sp, #96]	; 0x60
   157b8:	moveq	r3, #1
   157bc:	streq	r3, [sp, #60]	; 0x3c
   157c0:	beq	15f50 <__assert_fail@plt+0x4a98>
   157c4:	mov	r3, #0
   157c8:	mov	r2, #1
   157cc:	mov	r4, r3
   157d0:	mov	r9, r3
   157d4:	str	r2, [sp, #32]
   157d8:	str	r2, [sp, #44]	; 0x2c
   157dc:	str	r3, [sp, #48]	; 0x30
   157e0:	str	r2, [sp, #52]	; 0x34
   157e4:	str	r2, [sp, #56]	; 0x38
   157e8:	str	r3, [sp, #60]	; 0x3c
   157ec:	str	r2, [sp, #64]	; 0x40
   157f0:	str	r2, [sp, #68]	; 0x44
   157f4:	str	r3, [sp, #80]	; 0x50
   157f8:	str	r3, [sp, #84]	; 0x54
   157fc:	str	r3, [sp, #88]	; 0x58
   15800:	movw	r3, #54672	; 0xd590
   15804:	movt	r3, #1
   15808:	str	r3, [sp, #72]	; 0x48
   1580c:	mov	r3, #2
   15810:	str	r3, [sp, #176]	; 0xb0
   15814:	b	154e8 <__assert_fail@plt+0x4030>
   15818:	ldr	r3, [sp, #180]	; 0xb4
   1581c:	cmp	r4, #0
   15820:	and	r3, r3, #1
   15824:	str	r3, [sp, #92]	; 0x5c
   15828:	ldr	r3, [sp, #180]	; 0xb4
   1582c:	and	r3, r3, #4
   15830:	str	r3, [sp, #96]	; 0x60
   15834:	bne	16c08 <__assert_fail@plt+0x5750>
   15838:	cmp	sl, #0
   1583c:	beq	169b4 <__assert_fail@plt+0x54fc>
   15840:	mov	r3, #34	; 0x22
   15844:	mov	r2, r4
   15848:	mov	r1, #1
   1584c:	mov	r9, r2
   15850:	strb	r3, [fp]
   15854:	movw	r3, #54652	; 0xd57c
   15858:	movt	r3, #1
   1585c:	mov	r4, r1
   15860:	str	r1, [sp, #32]
   15864:	str	r2, [sp, #44]	; 0x2c
   15868:	str	r1, [sp, #48]	; 0x30
   1586c:	str	r2, [sp, #52]	; 0x34
   15870:	str	r1, [sp, #56]	; 0x38
   15874:	str	r1, [sp, #60]	; 0x3c
   15878:	str	r2, [sp, #64]	; 0x40
   1587c:	str	r2, [sp, #68]	; 0x44
   15880:	str	r3, [sp, #72]	; 0x48
   15884:	str	r2, [sp, #80]	; 0x50
   15888:	str	r2, [sp, #84]	; 0x54
   1588c:	str	r2, [sp, #88]	; 0x58
   15890:	b	154e8 <__assert_fail@plt+0x4030>
   15894:	mov	r3, #0
   15898:	mov	r2, #1
   1589c:	mov	r9, r3
   158a0:	str	r2, [sp, #32]
   158a4:	str	r3, [sp, #44]	; 0x2c
   158a8:	str	r3, [sp, #48]	; 0x30
   158ac:	str	r3, [sp, #52]	; 0x34
   158b0:	str	r3, [sp, #60]	; 0x3c
   158b4:	strd	r2, [sp, #64]	; 0x40
   158b8:	str	r3, [sp, #72]	; 0x48
   158bc:	str	r3, [sp, #80]	; 0x50
   158c0:	str	r3, [sp, #88]	; 0x58
   158c4:	ldr	r3, [sp, #180]	; 0xb4
   158c8:	and	r3, r3, r2
   158cc:	str	r3, [sp, #92]	; 0x5c
   158d0:	ldr	r3, [sp, #180]	; 0xb4
   158d4:	and	r3, r3, #4
   158d8:	str	r3, [sp, #96]	; 0x60
   158dc:	ldr	r3, [sp, #176]	; 0xb0
   158e0:	mov	r4, r3
   158e4:	str	r3, [sp, #56]	; 0x38
   158e8:	str	r3, [sp, #84]	; 0x54
   158ec:	b	154e8 <__assert_fail@plt+0x4030>
   158f0:	mov	r3, #1
   158f4:	mov	r4, #0
   158f8:	mov	r9, r4
   158fc:	str	r3, [sp, #32]
   15900:	str	r3, [sp, #44]	; 0x2c
   15904:	str	r3, [sp, #48]	; 0x30
   15908:	str	r4, [sp, #52]	; 0x34
   1590c:	str	r3, [sp, #56]	; 0x38
   15910:	str	r3, [sp, #60]	; 0x3c
   15914:	str	r3, [sp, #88]	; 0x58
   15918:	movw	r3, #54652	; 0xd57c
   1591c:	movt	r3, #1
   15920:	str	r4, [sp, #64]	; 0x40
   15924:	str	r4, [sp, #68]	; 0x44
   15928:	str	r3, [sp, #72]	; 0x48
   1592c:	ldr	r3, [sp, #180]	; 0xb4
   15930:	str	r4, [sp, #80]	; 0x50
   15934:	str	r4, [sp, #84]	; 0x54
   15938:	and	r3, r3, #1
   1593c:	str	r3, [sp, #92]	; 0x5c
   15940:	ldr	r3, [sp, #180]	; 0xb4
   15944:	and	r3, r3, #4
   15948:	str	r3, [sp, #96]	; 0x60
   1594c:	mov	r3, #5
   15950:	str	r3, [sp, #176]	; 0xb0
   15954:	b	154e8 <__assert_fail@plt+0x4030>
   15958:	mov	r3, #1
   1595c:	mov	r4, #0
   15960:	mov	r9, r4
   15964:	str	r3, [sp, #32]
   15968:	str	r4, [sp, #44]	; 0x2c
   1596c:	str	r3, [sp, #48]	; 0x30
   15970:	str	r3, [sp, #60]	; 0x3c
   15974:	ldr	r3, [sp, #180]	; 0xb4
   15978:	str	r4, [sp, #52]	; 0x34
   1597c:	str	r4, [sp, #56]	; 0x38
   15980:	str	r4, [sp, #64]	; 0x40
   15984:	str	r4, [sp, #68]	; 0x44
   15988:	and	r3, r3, #1
   1598c:	str	r4, [sp, #72]	; 0x48
   15990:	str	r4, [sp, #80]	; 0x50
   15994:	str	r4, [sp, #84]	; 0x54
   15998:	str	r3, [sp, #92]	; 0x5c
   1599c:	ldr	r3, [sp, #180]	; 0xb4
   159a0:	str	r4, [sp, #88]	; 0x58
   159a4:	and	r3, r3, #4
   159a8:	str	r3, [sp, #96]	; 0x60
   159ac:	b	154e8 <__assert_fail@plt+0x4030>
   159b0:	mov	r3, #0
   159b4:	mov	r2, #1
   159b8:	ldr	r1, [sp, #176]	; 0xb0
   159bc:	mov	r4, r3
   159c0:	mov	r9, r3
   159c4:	movw	r3, #54672	; 0xd590
   159c8:	movt	r3, #1
   159cc:	str	r2, [sp, #32]
   159d0:	str	r2, [sp, #44]	; 0x2c
   159d4:	str	r4, [sp, #48]	; 0x30
   159d8:	strd	r2, [sp, #68]	; 0x44
   159dc:	ldr	r3, [sp, #180]	; 0xb4
   159e0:	str	r2, [sp, #52]	; 0x34
   159e4:	str	r1, [sp, #56]	; 0x38
   159e8:	str	r4, [sp, #60]	; 0x3c
   159ec:	str	r2, [sp, #64]	; 0x40
   159f0:	and	r3, r3, r2
   159f4:	str	r4, [sp, #80]	; 0x50
   159f8:	str	r4, [sp, #84]	; 0x54
   159fc:	str	r4, [sp, #88]	; 0x58
   15a00:	str	r3, [sp, #92]	; 0x5c
   15a04:	ldr	r3, [sp, #180]	; 0xb4
   15a08:	and	r3, r3, #4
   15a0c:	str	r3, [sp, #96]	; 0x60
   15a10:	mov	r3, #2
   15a14:	str	r3, [sp, #176]	; 0xb0
   15a18:	b	154e8 <__assert_fail@plt+0x4030>
   15a1c:	mov	r3, #1
   15a20:	mov	r2, #0
   15a24:	mov	r4, r2
   15a28:	mov	r9, r2
   15a2c:	str	r3, [sp, #32]
   15a30:	str	r3, [sp, #44]	; 0x2c
   15a34:	str	r2, [sp, #48]	; 0x30
   15a38:	str	r3, [sp, #52]	; 0x34
   15a3c:	str	r3, [sp, #56]	; 0x38
   15a40:	str	r3, [sp, #60]	; 0x3c
   15a44:	str	r3, [sp, #64]	; 0x40
   15a48:	str	r3, [sp, #68]	; 0x44
   15a4c:	str	r3, [sp, #88]	; 0x58
   15a50:	movw	r3, #54672	; 0xd590
   15a54:	movt	r3, #1
   15a58:	str	r3, [sp, #72]	; 0x48
   15a5c:	ldr	r3, [sp, #180]	; 0xb4
   15a60:	str	r2, [sp, #80]	; 0x50
   15a64:	str	r2, [sp, #84]	; 0x54
   15a68:	and	r3, r3, #1
   15a6c:	b	15a00 <__assert_fail@plt+0x4548>
   15a70:	mov	r5, #102	; 0x66
   15a74:	mov	r6, #0
   15a78:	ldr	r3, [sp, #44]	; 0x2c
   15a7c:	cmp	r3, #0
   15a80:	bne	16930 <__assert_fail@plt+0x5478>
   15a84:	ldr	r2, [sp, #52]	; 0x34
   15a88:	eor	r3, fp, #1
   15a8c:	ands	r3, r2, r3
   15a90:	beq	15ac8 <__assert_fail@plt+0x4610>
   15a94:	cmp	sl, r4
   15a98:	mov	fp, r3
   15a9c:	movhi	r2, #39	; 0x27
   15aa0:	strbhi	r2, [r9, r4]
   15aa4:	add	r2, r4, #1
   15aa8:	cmp	sl, r2
   15aac:	movhi	r1, #36	; 0x24
   15ab0:	strbhi	r1, [r9, r2]
   15ab4:	add	r2, r4, #2
   15ab8:	add	r4, r4, #3
   15abc:	cmp	sl, r2
   15ac0:	movhi	r1, #39	; 0x27
   15ac4:	strbhi	r1, [r9, r2]
   15ac8:	cmp	sl, r4
   15acc:	add	r7, r7, #1
   15ad0:	movhi	r3, #92	; 0x5c
   15ad4:	strbhi	r3, [r9, r4]
   15ad8:	add	r4, r4, #1
   15adc:	cmp	r4, sl
   15ae0:	ldr	r3, [sp, #32]
   15ae4:	strbcc	r5, [r9, r4]
   15ae8:	cmp	r6, #0
   15aec:	add	r4, r4, #1
   15af0:	moveq	r3, #0
   15af4:	cmn	r8, #1
   15af8:	str	r3, [sp, #32]
   15afc:	bne	15500 <__assert_fail@plt+0x4048>
   15b00:	ldr	r3, [sp, #28]
   15b04:	ldrb	r6, [r3, r7]
   15b08:	adds	r6, r6, #0
   15b0c:	movne	r6, #1
   15b10:	cmp	r6, #0
   15b14:	bne	15510 <__assert_fail@plt+0x4058>
   15b18:	mov	r3, r9
   15b1c:	mov	r9, fp
   15b20:	mov	fp, r3
   15b24:	ldr	r3, [sp, #68]	; 0x44
   15b28:	cmp	r4, #0
   15b2c:	movne	r3, #0
   15b30:	cmp	r3, #0
   15b34:	bne	16d28 <__assert_fail@plt+0x5870>
   15b38:	ldr	r3, [sp, #44]	; 0x2c
   15b3c:	ldr	r2, [sp, #52]	; 0x34
   15b40:	eor	r3, r3, #1
   15b44:	ands	r2, r3, r2
   15b48:	beq	16c60 <__assert_fail@plt+0x57a8>
   15b4c:	ldr	r3, [sp, #80]	; 0x50
   15b50:	cmp	r3, #0
   15b54:	beq	16c64 <__assert_fail@plt+0x57ac>
   15b58:	ldr	r3, [sp, #32]
   15b5c:	cmp	r3, #0
   15b60:	bne	16cd8 <__assert_fail@plt+0x5820>
   15b64:	ldr	r3, [sp, #84]	; 0x54
   15b68:	adds	r3, r3, #0
   15b6c:	movne	r3, #1
   15b70:	cmp	sl, #0
   15b74:	movne	r3, #0
   15b78:	cmp	r3, #0
   15b7c:	ldreq	r2, [sp, #80]	; 0x50
   15b80:	beq	16c64 <__assert_fail@plt+0x57ac>
   15b84:	ldr	r2, [sp, #84]	; 0x54
   15b88:	mov	sl, r2
   15b8c:	mov	r0, #0
   15b90:	mov	r4, #1
   15b94:	mov	r1, #39	; 0x27
   15b98:	str	r0, [sp, #44]	; 0x2c
   15b9c:	strb	r1, [fp]
   15ba0:	str	r0, [sp, #48]	; 0x30
   15ba4:	str	r4, [sp, #52]	; 0x34
   15ba8:	str	r4, [sp, #56]	; 0x38
   15bac:	str	r4, [sp, #64]	; 0x40
   15bb0:	str	r0, [sp, #68]	; 0x44
   15bb4:	str	r3, [sp, #80]	; 0x50
   15bb8:	str	r2, [sp, #84]	; 0x54
   15bbc:	str	r0, [sp, #88]	; 0x58
   15bc0:	b	15800 <__assert_fail@plt+0x4348>
   15bc4:	mov	r5, #98	; 0x62
   15bc8:	b	15a74 <__assert_fail@plt+0x45bc>
   15bcc:	mov	r5, #97	; 0x61
   15bd0:	b	15a74 <__assert_fail@plt+0x45bc>
   15bd4:	ldr	r3, [sp, #48]	; 0x30
   15bd8:	str	r3, [sp, #40]	; 0x28
   15bdc:	mov	r3, #116	; 0x74
   15be0:	ldr	r2, [sp, #68]	; 0x44
   15be4:	cmp	r2, #0
   15be8:	bne	15de4 <__assert_fail@plt+0x492c>
   15bec:	ldr	r2, [sp, #60]	; 0x3c
   15bf0:	cmp	r2, #0
   15bf4:	bne	15d40 <__assert_fail@plt+0x4888>
   15bf8:	ldr	r3, [sp, #44]	; 0x2c
   15bfc:	mov	r6, #0
   15c00:	cmp	r3, #0
   15c04:	beq	15db0 <__assert_fail@plt+0x48f8>
   15c08:	mov	r3, fp
   15c0c:	ldr	r2, [sp, #184]	; 0xb8
   15c10:	cmp	r2, #0
   15c14:	beq	15c34 <__assert_fail@plt+0x477c>
   15c18:	ubfx	r1, r5, #5, #8
   15c1c:	mov	r0, r2
   15c20:	and	r2, r5, #31
   15c24:	ldr	r1, [r0, r1, lsl #2]
   15c28:	lsr	r2, r1, r2
   15c2c:	tst	r2, #1
   15c30:	bne	15a78 <__assert_fail@plt+0x45c0>
   15c34:	ldr	r2, [sp, #40]	; 0x28
   15c38:	cmp	r2, #0
   15c3c:	addeq	r7, r7, #1
   15c40:	bne	15a78 <__assert_fail@plt+0x45c0>
   15c44:	cmp	r3, #0
   15c48:	beq	15adc <__assert_fail@plt+0x4624>
   15c4c:	cmp	sl, r4
   15c50:	mov	fp, #0
   15c54:	movhi	r3, #39	; 0x27
   15c58:	strbhi	r3, [r9, r4]
   15c5c:	add	r3, r4, #1
   15c60:	add	r4, r4, #2
   15c64:	cmp	sl, r3
   15c68:	movhi	r2, #39	; 0x27
   15c6c:	strbhi	r2, [r9, r3]
   15c70:	b	15adc <__assert_fail@plt+0x4624>
   15c74:	ldr	r3, [sp, #48]	; 0x30
   15c78:	str	r3, [sp, #40]	; 0x28
   15c7c:	eor	r3, fp, #1
   15c80:	ldr	r2, [sp, #52]	; 0x34
   15c84:	ands	r2, r2, r3
   15c88:	beq	16948 <__assert_fail@plt+0x5490>
   15c8c:	cmp	sl, r4
   15c90:	movhi	r3, #39	; 0x27
   15c94:	strbhi	r3, [r9, r4]
   15c98:	add	r3, r4, #1
   15c9c:	cmp	sl, r3
   15ca0:	movhi	r1, #36	; 0x24
   15ca4:	strbhi	r1, [r9, r3]
   15ca8:	add	r3, r4, #2
   15cac:	cmp	sl, r3
   15cb0:	movhi	r1, #39	; 0x27
   15cb4:	strbhi	r1, [r9, r3]
   15cb8:	add	r3, r4, #3
   15cbc:	cmp	sl, r3
   15cc0:	bls	16994 <__assert_fail@plt+0x54dc>
   15cc4:	mov	r4, r3
   15cc8:	mov	r3, #92	; 0x5c
   15ccc:	mov	fp, r2
   15cd0:	mov	r2, r4
   15cd4:	strb	r3, [r9, r4]
   15cd8:	ldr	r3, [sp, #176]	; 0xb0
   15cdc:	add	r4, r4, #1
   15ce0:	cmp	r3, #2
   15ce4:	beq	169fc <__assert_fail@plt+0x5544>
   15ce8:	add	r3, r7, #1
   15cec:	cmp	r3, r8
   15cf0:	bcs	15d08 <__assert_fail@plt+0x4850>
   15cf4:	ldr	r1, [sp, #28]
   15cf8:	ldrb	r3, [r1, r3]
   15cfc:	sub	r3, r3, #48	; 0x30
   15d00:	cmp	r3, #9
   15d04:	bls	16a0c <__assert_fail@plt+0x5554>
   15d08:	mov	r3, #0
   15d0c:	mov	r5, #48	; 0x30
   15d10:	ldr	r6, [sp, #64]	; 0x40
   15d14:	cmp	r6, #0
   15d18:	beq	15c0c <__assert_fail@plt+0x4754>
   15d1c:	mov	r6, #0
   15d20:	b	15c34 <__assert_fail@plt+0x477c>
   15d24:	ldr	r3, [sp, #48]	; 0x30
   15d28:	str	r3, [sp, #40]	; 0x28
   15d2c:	ldr	r2, [sp, #60]	; 0x3c
   15d30:	mov	r5, #13
   15d34:	mov	r3, #114	; 0x72
   15d38:	cmp	r2, #0
   15d3c:	beq	15bf8 <__assert_fail@plt+0x4740>
   15d40:	mov	r5, r3
   15d44:	b	15a74 <__assert_fail@plt+0x45bc>
   15d48:	ldr	r3, [sp, #48]	; 0x30
   15d4c:	str	r3, [sp, #40]	; 0x28
   15d50:	mov	r3, #118	; 0x76
   15d54:	b	15bec <__assert_fail@plt+0x4734>
   15d58:	ldr	r3, [sp, #48]	; 0x30
   15d5c:	str	r3, [sp, #40]	; 0x28
   15d60:	mov	r5, #10
   15d64:	mov	r3, #110	; 0x6e
   15d68:	b	15bec <__assert_fail@plt+0x4734>
   15d6c:	ldr	r3, [sp, #48]	; 0x30
   15d70:	cmn	r8, #1
   15d74:	str	r3, [sp, #40]	; 0x28
   15d78:	beq	161c0 <__assert_fail@plt+0x4d08>
   15d7c:	subs	r3, r8, #1
   15d80:	movne	r3, #1
   15d84:	cmp	r3, #0
   15d88:	bne	15d94 <__assert_fail@plt+0x48dc>
   15d8c:	cmp	r7, #0
   15d90:	beq	15dd8 <__assert_fail@plt+0x4920>
   15d94:	mov	r6, #0
   15d98:	ldr	r3, [sp, #64]	; 0x40
   15d9c:	cmp	r3, #0
   15da0:	beq	15c08 <__assert_fail@plt+0x4750>
   15da4:	ldr	r3, [sp, #44]	; 0x2c
   15da8:	cmp	r3, #0
   15dac:	bne	15c08 <__assert_fail@plt+0x4750>
   15db0:	mov	r3, fp
   15db4:	b	15c34 <__assert_fail@plt+0x477c>
   15db8:	ldr	r3, [sp, #48]	; 0x30
   15dbc:	str	r3, [sp, #40]	; 0x28
   15dc0:	b	15d8c <__assert_fail@plt+0x48d4>
   15dc4:	ldr	r3, [sp, #48]	; 0x30
   15dc8:	str	r3, [sp, #40]	; 0x28
   15dcc:	b	15d94 <__assert_fail@plt+0x48dc>
   15dd0:	ldr	r6, [sp, #48]	; 0x30
   15dd4:	str	r6, [sp, #40]	; 0x28
   15dd8:	ldr	r3, [sp, #68]	; 0x44
   15ddc:	cmp	r3, #0
   15de0:	beq	15d98 <__assert_fail@plt+0x48e0>
   15de4:	mov	r3, #2
   15de8:	mov	fp, r9
   15dec:	str	r3, [sp, #176]	; 0xb0
   15df0:	ldr	r3, [sp, #60]	; 0x3c
   15df4:	cmp	r3, #0
   15df8:	ldr	r3, [sp, #176]	; 0xb0
   15dfc:	movne	r3, #4
   15e00:	str	r3, [sp, #176]	; 0xb0
   15e04:	mov	lr, #0
   15e08:	mov	r0, fp
   15e0c:	ldr	r2, [sp, #28]
   15e10:	ldr	r3, [sp, #180]	; 0xb4
   15e14:	ldr	r1, [sp, #188]	; 0xbc
   15e18:	bic	ip, r3, #2
   15e1c:	ldr	r3, [sp, #176]	; 0xb0
   15e20:	stm	sp, {r3, ip, lr}
   15e24:	mov	r3, r8
   15e28:	ldr	ip, [sp, #192]	; 0xc0
   15e2c:	str	r1, [sp, #12]
   15e30:	mov	r1, sl
   15e34:	str	ip, [sp, #16]
   15e38:	bl	153c4 <__assert_fail@plt+0x3f0c>
   15e3c:	mov	r4, r0
   15e40:	mov	r0, r4
   15e44:	add	sp, sp, #140	; 0x8c
   15e48:	ldrd	r4, [sp]
   15e4c:	ldrd	r6, [sp, #8]
   15e50:	ldrd	r8, [sp, #16]
   15e54:	ldrd	sl, [sp, #24]
   15e58:	add	sp, sp, #32
   15e5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e60:	ldr	r3, [sp, #48]	; 0x30
   15e64:	str	r3, [sp, #40]	; 0x28
   15e68:	ldr	r3, [sp, #176]	; 0xb0
   15e6c:	cmp	r3, #2
   15e70:	beq	161e8 <__assert_fail@plt+0x4d30>
   15e74:	ldr	r3, [sp, #88]	; 0x58
   15e78:	cmp	r3, #0
   15e7c:	moveq	r5, #92	; 0x5c
   15e80:	moveq	r3, r5
   15e84:	beq	15bec <__assert_fail@plt+0x4734>
   15e88:	add	r7, r7, #1
   15e8c:	mov	r3, fp
   15e90:	mov	r6, #0
   15e94:	mov	r5, #92	; 0x5c
   15e98:	b	15c44 <__assert_fail@plt+0x478c>
   15e9c:	ldr	r3, [sp, #64]	; 0x40
   15ea0:	cmp	r3, #0
   15ea4:	bne	16d1c <__assert_fail@plt+0x5864>
   15ea8:	ldr	r2, [sp, #48]	; 0x30
   15eac:	mov	r3, fp
   15eb0:	mov	r6, r2
   15eb4:	str	r2, [sp, #40]	; 0x28
   15eb8:	b	15c0c <__assert_fail@plt+0x4754>
   15ebc:	ldr	r3, [sp, #176]	; 0xb0
   15ec0:	cmp	r3, #2
   15ec4:	beq	16c58 <__assert_fail@plt+0x57a0>
   15ec8:	cmp	r3, #5
   15ecc:	ldr	r3, [sp, #48]	; 0x30
   15ed0:	str	r3, [sp, #40]	; 0x28
   15ed4:	bne	15f00 <__assert_fail@plt+0x4a48>
   15ed8:	ldr	r3, [sp, #96]	; 0x60
   15edc:	cmp	r3, #0
   15ee0:	beq	1695c <__assert_fail@plt+0x54a4>
   15ee4:	add	r3, r7, #2
   15ee8:	cmp	r3, r8
   15eec:	bcs	15f00 <__assert_fail@plt+0x4a48>
   15ef0:	ldr	r2, [sp, #36]	; 0x24
   15ef4:	ldrb	r5, [r2, #1]
   15ef8:	cmp	r5, #63	; 0x3f
   15efc:	beq	16a44 <__assert_fail@plt+0x558c>
   15f00:	mov	r6, #0
   15f04:	mov	r5, #63	; 0x3f
   15f08:	b	15d98 <__assert_fail@plt+0x48e0>
   15f0c:	ldr	r3, [sp, #176]	; 0xb0
   15f10:	cmp	r3, #2
   15f14:	ldr	r3, [sp, #48]	; 0x30
   15f18:	beq	16700 <__assert_fail@plt+0x5248>
   15f1c:	mov	r5, #39	; 0x27
   15f20:	str	r3, [sp, #40]	; 0x28
   15f24:	str	r6, [sp, #80]	; 0x50
   15f28:	b	15d98 <__assert_fail@plt+0x48e0>
   15f2c:	ldr	r3, [sp, #180]	; 0xb4
   15f30:	cmp	r4, #0
   15f34:	and	r3, r3, #1
   15f38:	str	r3, [sp, #92]	; 0x5c
   15f3c:	ldr	r3, [sp, #180]	; 0xb4
   15f40:	and	r3, r3, #4
   15f44:	str	r3, [sp, #96]	; 0x60
   15f48:	bne	16d68 <__assert_fail@plt+0x58b0>
   15f4c:	str	r4, [sp, #60]	; 0x3c
   15f50:	cmp	sl, #0
   15f54:	bne	16d4c <__assert_fail@plt+0x5894>
   15f58:	mov	r3, #1
   15f5c:	movw	r2, #54672	; 0xd590
   15f60:	movt	r2, #1
   15f64:	mov	r4, r3
   15f68:	mov	r3, #2
   15f6c:	mov	r9, sl
   15f70:	str	r4, [sp, #32]
   15f74:	str	sl, [sp, #44]	; 0x2c
   15f78:	str	sl, [sp, #48]	; 0x30
   15f7c:	str	r4, [sp, #52]	; 0x34
   15f80:	str	r4, [sp, #56]	; 0x38
   15f84:	str	r4, [sp, #64]	; 0x40
   15f88:	str	sl, [sp, #68]	; 0x44
   15f8c:	str	r2, [sp, #72]	; 0x48
   15f90:	str	sl, [sp, #80]	; 0x50
   15f94:	str	sl, [sp, #84]	; 0x54
   15f98:	str	sl, [sp, #88]	; 0x58
   15f9c:	str	r3, [sp, #176]	; 0xb0
   15fa0:	b	154e8 <__assert_fail@plt+0x4030>
   15fa4:	ldrb	r5, [r0, r7]
   15fa8:	cmp	r5, #126	; 0x7e
   15fac:	ldrls	pc, [pc, r5, lsl #2]
   15fb0:	b	16314 <__assert_fail@plt+0x4e5c>
   15fb4:	andeq	r6, r1, r0, ror #5
   15fb8:	andeq	r6, r1, r4, lsl r3
   15fbc:	andeq	r6, r1, r4, lsl r3
   15fc0:	andeq	r6, r1, r4, lsl r3
   15fc4:	andeq	r6, r1, r4, lsl r3
   15fc8:	andeq	r6, r1, r4, lsl r3
   15fcc:	andeq	r6, r1, r4, lsl r3
   15fd0:	ldrdeq	r6, [r1], -r0
   15fd4:	andeq	r6, r1, r0, asr #5
   15fd8:	andeq	r6, r1, r4, asr #4
   15fdc:			; <UNDEFINED> instruction: 0x000162b0
   15fe0:	andeq	r6, r1, r4, lsr #4
   15fe4:	andeq	r6, r1, r4, lsl #6
   15fe8:	muleq	r1, r0, r2
   15fec:	andeq	r6, r1, r4, lsl r3
   15ff0:	andeq	r6, r1, r4, lsl r3
   15ff4:	andeq	r6, r1, r4, lsl r3
   15ff8:	andeq	r6, r1, r4, lsl r3
   15ffc:	andeq	r6, r1, r4, lsl r3
   16000:	andeq	r6, r1, r4, lsl r3
   16004:	andeq	r6, r1, r4, lsl r3
   16008:	andeq	r6, r1, r4, lsl r3
   1600c:	andeq	r6, r1, r4, lsl r3
   16010:	andeq	r6, r1, r4, lsl r3
   16014:	andeq	r6, r1, r4, lsl r3
   16018:	andeq	r6, r1, r4, lsl r3
   1601c:	andeq	r6, r1, r4, lsl r3
   16020:	andeq	r6, r1, r4, lsl r3
   16024:	andeq	r6, r1, r4, lsl r3
   16028:	andeq	r6, r1, r4, lsl r3
   1602c:	andeq	r6, r1, r4, lsl r3
   16030:	andeq	r6, r1, r4, lsl r3
   16034:	andeq	r6, r1, r8, lsr r2
   16038:	andeq	r6, r1, r0, lsr #5
   1603c:	andeq	r6, r1, r0, lsr #5
   16040:	andeq	r6, r1, r8, lsl r2
   16044:	andeq	r6, r1, r0, lsr #5
   16048:	andeq	r6, r1, ip, lsl #4
   1604c:	andeq	r6, r1, r0, lsr #5
   16050:	andeq	r6, r1, ip, ror r2
   16054:	andeq	r6, r1, r0, lsr #5
   16058:	andeq	r6, r1, r0, lsr #5
   1605c:	andeq	r6, r1, r0, lsr #5
   16060:	andeq	r6, r1, ip, lsl #4
   16064:	andeq	r6, r1, ip, lsl #4
   16068:	andeq	r6, r1, ip, lsl #4
   1606c:	andeq	r6, r1, ip, lsl #4
   16070:	andeq	r6, r1, ip, lsl #4
   16074:	andeq	r6, r1, ip, lsl #4
   16078:	andeq	r6, r1, ip, lsl #4
   1607c:	andeq	r6, r1, ip, lsl #4
   16080:	andeq	r6, r1, ip, lsl #4
   16084:	andeq	r6, r1, ip, lsl #4
   16088:	andeq	r6, r1, ip, lsl #4
   1608c:	andeq	r6, r1, ip, lsl #4
   16090:	andeq	r6, r1, ip, lsl #4
   16094:	andeq	r6, r1, ip, lsl #4
   16098:	andeq	r6, r1, ip, lsl #4
   1609c:	andeq	r6, r1, ip, lsl #4
   160a0:	andeq	r6, r1, r0, lsr #5
   160a4:	andeq	r6, r1, r0, lsr #5
   160a8:	andeq	r6, r1, r0, lsr #5
   160ac:	andeq	r6, r1, r0, lsr #5
   160b0:	andeq	r6, r1, r4, asr r2
   160b4:	andeq	r6, r1, r4, lsl r3
   160b8:	andeq	r6, r1, ip, lsl #4
   160bc:	andeq	r6, r1, ip, lsl #4
   160c0:	andeq	r6, r1, ip, lsl #4
   160c4:	andeq	r6, r1, ip, lsl #4
   160c8:	andeq	r6, r1, ip, lsl #4
   160cc:	andeq	r6, r1, ip, lsl #4
   160d0:	andeq	r6, r1, ip, lsl #4
   160d4:	andeq	r6, r1, ip, lsl #4
   160d8:	andeq	r6, r1, ip, lsl #4
   160dc:	andeq	r6, r1, ip, lsl #4
   160e0:	andeq	r6, r1, ip, lsl #4
   160e4:	andeq	r6, r1, ip, lsl #4
   160e8:	andeq	r6, r1, ip, lsl #4
   160ec:	andeq	r6, r1, ip, lsl #4
   160f0:	andeq	r6, r1, ip, lsl #4
   160f4:	andeq	r6, r1, ip, lsl #4
   160f8:	andeq	r6, r1, ip, lsl #4
   160fc:	andeq	r6, r1, ip, lsl #4
   16100:	andeq	r6, r1, ip, lsl #4
   16104:	andeq	r6, r1, ip, lsl #4
   16108:	andeq	r6, r1, ip, lsl #4
   1610c:	andeq	r6, r1, ip, lsl #4
   16110:	andeq	r6, r1, ip, lsl #4
   16114:	andeq	r6, r1, ip, lsl #4
   16118:	andeq	r6, r1, ip, lsl #4
   1611c:	andeq	r6, r1, ip, lsl #4
   16120:	andeq	r6, r1, r0, lsr #5
   16124:	ldrdeq	r6, [r1], -r4
   16128:	andeq	r6, r1, ip, lsl #4
   1612c:	andeq	r6, r1, r0, lsr #5
   16130:	andeq	r6, r1, ip, lsl #4
   16134:	andeq	r6, r1, r0, lsr #5
   16138:	andeq	r6, r1, ip, lsl #4
   1613c:	andeq	r6, r1, ip, lsl #4
   16140:	andeq	r6, r1, ip, lsl #4
   16144:	andeq	r6, r1, ip, lsl #4
   16148:	andeq	r6, r1, ip, lsl #4
   1614c:	andeq	r6, r1, ip, lsl #4
   16150:	andeq	r6, r1, ip, lsl #4
   16154:	andeq	r6, r1, ip, lsl #4
   16158:	andeq	r6, r1, ip, lsl #4
   1615c:	andeq	r6, r1, ip, lsl #4
   16160:	andeq	r6, r1, ip, lsl #4
   16164:	andeq	r6, r1, ip, lsl #4
   16168:	andeq	r6, r1, ip, lsl #4
   1616c:	andeq	r6, r1, ip, lsl #4
   16170:	andeq	r6, r1, ip, lsl #4
   16174:	andeq	r6, r1, ip, lsl #4
   16178:	andeq	r6, r1, ip, lsl #4
   1617c:	andeq	r6, r1, ip, lsl #4
   16180:	andeq	r6, r1, ip, lsl #4
   16184:	andeq	r6, r1, ip, lsl #4
   16188:	andeq	r6, r1, ip, lsl #4
   1618c:	andeq	r6, r1, ip, lsl #4
   16190:	andeq	r6, r1, ip, lsl #4
   16194:	andeq	r6, r1, ip, lsl #4
   16198:	andeq	r6, r1, ip, lsl #4
   1619c:	andeq	r6, r1, ip, lsl #4
   161a0:			; <UNDEFINED> instruction: 0x000161b0
   161a4:	andeq	r6, r1, r0, lsr #5
   161a8:			; <UNDEFINED> instruction: 0x000161b0
   161ac:	andeq	r6, r1, r8, lsl r2
   161b0:	mov	r3, #0
   161b4:	cmn	r8, #1
   161b8:	str	r3, [sp, #40]	; 0x28
   161bc:	bne	15d7c <__assert_fail@plt+0x48c4>
   161c0:	ldr	r3, [sp, #28]
   161c4:	ldrb	r3, [r3, #1]
   161c8:	adds	r3, r3, #0
   161cc:	movne	r3, #1
   161d0:	b	15d84 <__assert_fail@plt+0x48cc>
   161d4:	mov	r3, #0
   161d8:	str	r3, [sp, #40]	; 0x28
   161dc:	ldr	r3, [sp, #176]	; 0xb0
   161e0:	cmp	r3, #2
   161e4:	bne	15e74 <__assert_fail@plt+0x49bc>
   161e8:	ldr	r3, [sp, #44]	; 0x2c
   161ec:	cmp	r3, #0
   161f0:	bne	16b30 <__assert_fail@plt+0x5678>
   161f4:	mov	r6, r3
   161f8:	add	r7, r7, #1
   161fc:	mov	r3, fp
   16200:	mov	r5, #92	; 0x5c
   16204:	b	15c44 <__assert_fail@plt+0x478c>
   16208:	ldr	r6, [sp, #48]	; 0x30
   1620c:	mov	r3, #0
   16210:	str	r3, [sp, #40]	; 0x28
   16214:	b	15d98 <__assert_fail@plt+0x48e0>
   16218:	mov	r3, #0
   1621c:	str	r3, [sp, #40]	; 0x28
   16220:	b	15d8c <__assert_fail@plt+0x48d4>
   16224:	mov	r3, #0
   16228:	str	r3, [sp, #40]	; 0x28
   1622c:	mov	r3, #118	; 0x76
   16230:	b	15bec <__assert_fail@plt+0x4734>
   16234:	ldr	r6, [sp, #48]	; 0x30
   16238:	mov	r3, #0
   1623c:	str	r3, [sp, #40]	; 0x28
   16240:	b	15dd8 <__assert_fail@plt+0x4920>
   16244:	mov	r3, #0
   16248:	str	r3, [sp, #40]	; 0x28
   1624c:	mov	r3, #116	; 0x74
   16250:	b	15be0 <__assert_fail@plt+0x4728>
   16254:	ldr	r3, [sp, #176]	; 0xb0
   16258:	cmp	r3, #2
   1625c:	beq	1676c <__assert_fail@plt+0x52b4>
   16260:	cmp	r3, #5
   16264:	mov	r3, #0
   16268:	str	r3, [sp, #40]	; 0x28
   1626c:	beq	15ed8 <__assert_fail@plt+0x4a20>
   16270:	mov	r6, #0
   16274:	mov	r5, #63	; 0x3f
   16278:	b	15d98 <__assert_fail@plt+0x48e0>
   1627c:	ldr	r3, [sp, #176]	; 0xb0
   16280:	cmp	r3, #2
   16284:	beq	166f4 <__assert_fail@plt+0x523c>
   16288:	mov	r3, #0
   1628c:	b	15f1c <__assert_fail@plt+0x4a64>
   16290:	mov	r3, #0
   16294:	str	r3, [sp, #40]	; 0x28
   16298:	mov	r3, #114	; 0x72
   1629c:	b	15be0 <__assert_fail@plt+0x4728>
   162a0:	mov	r3, #0
   162a4:	mov	r6, r3
   162a8:	str	r3, [sp, #40]	; 0x28
   162ac:	b	15dd8 <__assert_fail@plt+0x4920>
   162b0:	mov	r3, #0
   162b4:	str	r3, [sp, #40]	; 0x28
   162b8:	mov	r3, #110	; 0x6e
   162bc:	b	15be0 <__assert_fail@plt+0x4728>
   162c0:	mov	r3, #0
   162c4:	str	r3, [sp, #40]	; 0x28
   162c8:	mov	r3, #98	; 0x62
   162cc:	b	15bec <__assert_fail@plt+0x4734>
   162d0:	mov	r3, #0
   162d4:	str	r3, [sp, #40]	; 0x28
   162d8:	mov	r3, #97	; 0x61
   162dc:	b	15bec <__assert_fail@plt+0x4734>
   162e0:	ldr	r3, [sp, #60]	; 0x3c
   162e4:	cmp	r3, #0
   162e8:	bne	166d8 <__assert_fail@plt+0x5220>
   162ec:	ldr	r3, [sp, #92]	; 0x5c
   162f0:	cmp	r3, #0
   162f4:	addne	r7, r7, #1
   162f8:	bne	154f8 <__assert_fail@plt+0x4040>
   162fc:	str	r3, [sp, #40]	; 0x28
   16300:	b	15bf8 <__assert_fail@plt+0x4740>
   16304:	mov	r3, #0
   16308:	str	r3, [sp, #40]	; 0x28
   1630c:	mov	r3, #102	; 0x66
   16310:	b	15bec <__assert_fail@plt+0x4734>
   16314:	mov	r3, #0
   16318:	str	r3, [sp, #40]	; 0x28
   1631c:	ldr	r3, [sp, #76]	; 0x4c
   16320:	cmp	r3, #1
   16324:	bne	1678c <__assert_fail@plt+0x52d4>
   16328:	bl	112fc <__ctype_b_loc@plt>
   1632c:	ldr	r2, [r0]
   16330:	sxth	r3, r5
   16334:	lsl	r3, r3, #1
   16338:	ldr	r1, [sp, #76]	; 0x4c
   1633c:	ldrh	r3, [r2, r3]
   16340:	mov	r0, r1
   16344:	and	r3, r3, #16384	; 0x4000
   16348:	cmp	r3, #0
   1634c:	ldr	r3, [sp, #60]	; 0x3c
   16350:	movne	r6, #1
   16354:	moveq	r6, #0
   16358:	movne	r2, #0
   1635c:	andeq	r2, r3, #1
   16360:	cmp	r2, #0
   16364:	beq	15d98 <__assert_fail@plt+0x48e0>
   16368:	ldr	r2, [sp, #60]	; 0x3c
   1636c:	mov	r6, #0
   16370:	add	r1, r0, r7
   16374:	mov	ip, #39	; 0x27
   16378:	str	r6, [sp, #100]	; 0x64
   1637c:	mov	r0, #0
   16380:	ldr	lr, [sp, #36]	; 0x24
   16384:	str	r8, [sp, #36]	; 0x24
   16388:	ldr	r6, [sp, #40]	; 0x28
   1638c:	ldr	r8, [sp, #44]	; 0x2c
   16390:	b	16440 <__assert_fail@plt+0x4f88>
   16394:	cmp	r8, #0
   16398:	bne	16974 <__assert_fail@plt+0x54bc>
   1639c:	ldr	r0, [sp, #52]	; 0x34
   163a0:	eor	r3, fp, #1
   163a4:	ands	r3, r0, r3
   163a8:	beq	163d8 <__assert_fail@plt+0x4f20>
   163ac:	cmp	sl, r4
   163b0:	add	r0, r4, #1
   163b4:	strbhi	ip, [r9, r4]
   163b8:	cmp	sl, r0
   163bc:	movhi	fp, #36	; 0x24
   163c0:	strbhi	fp, [r9, r0]
   163c4:	add	r0, r4, #2
   163c8:	mov	fp, r3
   163cc:	cmp	sl, r0
   163d0:	add	r4, r4, #3
   163d4:	strbhi	ip, [r9, r0]
   163d8:	cmp	sl, r4
   163dc:	movhi	r3, #92	; 0x5c
   163e0:	strbhi	r3, [r9, r4]
   163e4:	add	r3, r4, #1
   163e8:	cmp	sl, r3
   163ec:	bls	163fc <__assert_fail@plt+0x4f44>
   163f0:	lsr	r0, r5, #6
   163f4:	add	r0, r0, #48	; 0x30
   163f8:	strb	r0, [r9, r3]
   163fc:	add	r3, r4, #2
   16400:	cmp	sl, r3
   16404:	bls	16414 <__assert_fail@plt+0x4f5c>
   16408:	ubfx	r0, r5, #3, #3
   1640c:	add	r0, r0, #48	; 0x30
   16410:	strb	r0, [r9, r3]
   16414:	add	r7, r7, #1
   16418:	and	r5, r5, #7
   1641c:	cmp	r1, r7
   16420:	add	r5, r5, #48	; 0x30
   16424:	add	r4, r4, #3
   16428:	bls	16988 <__assert_fail@plt+0x54d0>
   1642c:	mov	r0, r2
   16430:	cmp	sl, r4
   16434:	strbhi	r5, [r9, r4]
   16438:	add	r4, r4, #1
   1643c:	ldrb	r5, [lr, #1]!
   16440:	cmp	r2, #0
   16444:	bne	16394 <__assert_fail@plt+0x4edc>
   16448:	eor	r3, r0, #1
   1644c:	cmp	r6, #0
   16450:	and	r3, r3, fp
   16454:	uxtb	r3, r3
   16458:	beq	1646c <__assert_fail@plt+0x4fb4>
   1645c:	cmp	sl, r4
   16460:	movhi	r6, #92	; 0x5c
   16464:	strbhi	r6, [r9, r4]
   16468:	add	r4, r4, #1
   1646c:	add	r7, r7, #1
   16470:	cmp	r7, r1
   16474:	bcs	16968 <__assert_fail@plt+0x54b0>
   16478:	cmp	r3, #0
   1647c:	beq	169ac <__assert_fail@plt+0x54f4>
   16480:	cmp	sl, r4
   16484:	add	r3, r4, #1
   16488:	mov	r6, #0
   1648c:	strbhi	ip, [r9, r4]
   16490:	cmp	sl, r3
   16494:	add	r4, r4, #2
   16498:	mov	fp, r6
   1649c:	strbhi	ip, [r9, r3]
   164a0:	b	16430 <__assert_fail@plt+0x4f78>
   164a4:	ldr	r3, [sp, #36]	; 0x24
   164a8:	ldrb	r5, [r3]
   164ac:	cmp	r5, #126	; 0x7e
   164b0:	ldrls	pc, [pc, r5, lsl #2]
   164b4:	b	16314 <__assert_fail@plt+0x4e5c>
   164b8:	ldrdeq	r6, [r1], -r8
   164bc:	andeq	r6, r1, r4, lsl r3
   164c0:	andeq	r6, r1, r4, lsl r3
   164c4:	andeq	r6, r1, r4, lsl r3
   164c8:	andeq	r6, r1, r4, lsl r3
   164cc:	andeq	r6, r1, r4, lsl r3
   164d0:	andeq	r6, r1, r4, lsl r3
   164d4:	andeq	r5, r1, ip, asr #23
   164d8:	andeq	r5, r1, r4, asr #23
   164dc:	andeq	r6, r1, r4, asr #4
   164e0:	andeq	r6, r1, ip, asr #13
   164e4:	andeq	r6, r1, r4, lsr #4
   164e8:	andeq	r5, r1, r0, ror sl
   164ec:	andeq	r6, r1, r0, asr #13
   164f0:	andeq	r6, r1, r4, lsl r3
   164f4:	andeq	r6, r1, r4, lsl r3
   164f8:	andeq	r6, r1, r4, lsl r3
   164fc:	andeq	r6, r1, r4, lsl r3
   16500:	andeq	r6, r1, r4, lsl r3
   16504:	andeq	r6, r1, r4, lsl r3
   16508:	andeq	r6, r1, r4, lsl r3
   1650c:	andeq	r6, r1, r4, lsl r3
   16510:	andeq	r6, r1, r4, lsl r3
   16514:	andeq	r6, r1, r4, lsl r3
   16518:	andeq	r6, r1, r4, lsl r3
   1651c:	andeq	r6, r1, r4, lsl r3
   16520:	andeq	r6, r1, r4, lsl r3
   16524:	andeq	r6, r1, r4, lsl r3
   16528:	andeq	r6, r1, r4, lsl r3
   1652c:	andeq	r6, r1, r4, lsl r3
   16530:	andeq	r6, r1, r4, lsl r3
   16534:	andeq	r6, r1, r4, lsl r3
   16538:	andeq	r6, r1, r4, lsr r2
   1653c:			; <UNDEFINED> instruction: 0x000166b4
   16540:			; <UNDEFINED> instruction: 0x000166b4
   16544:	andeq	r6, r1, r8, lsl r2
   16548:			; <UNDEFINED> instruction: 0x000166b4
   1654c:	andeq	r6, r1, r8, lsl #4
   16550:			; <UNDEFINED> instruction: 0x000166b4
   16554:	andeq	r6, r1, ip, ror r2
   16558:			; <UNDEFINED> instruction: 0x000166b4
   1655c:			; <UNDEFINED> instruction: 0x000166b4
   16560:			; <UNDEFINED> instruction: 0x000166b4
   16564:	andeq	r6, r1, r8, lsl #4
   16568:	andeq	r6, r1, r8, lsl #4
   1656c:	andeq	r6, r1, r8, lsl #4
   16570:	andeq	r6, r1, r8, lsl #4
   16574:	andeq	r6, r1, r8, lsl #4
   16578:	andeq	r6, r1, r8, lsl #4
   1657c:	andeq	r6, r1, r8, lsl #4
   16580:	andeq	r6, r1, r8, lsl #4
   16584:	andeq	r6, r1, r8, lsl #4
   16588:	andeq	r6, r1, r8, lsl #4
   1658c:	andeq	r6, r1, r8, lsl #4
   16590:	andeq	r6, r1, r8, lsl #4
   16594:	andeq	r6, r1, r8, lsl #4
   16598:	andeq	r6, r1, r8, lsl #4
   1659c:	andeq	r6, r1, r8, lsl #4
   165a0:	andeq	r6, r1, r8, lsl #4
   165a4:			; <UNDEFINED> instruction: 0x000166b4
   165a8:			; <UNDEFINED> instruction: 0x000166b4
   165ac:			; <UNDEFINED> instruction: 0x000166b4
   165b0:			; <UNDEFINED> instruction: 0x000166b4
   165b4:	andeq	r6, r1, r4, asr r2
   165b8:	andeq	r6, r1, r4, lsl r3
   165bc:	andeq	r6, r1, r8, lsl #4
   165c0:	andeq	r6, r1, r8, lsl #4
   165c4:	andeq	r6, r1, r8, lsl #4
   165c8:	andeq	r6, r1, r8, lsl #4
   165cc:	andeq	r6, r1, r8, lsl #4
   165d0:	andeq	r6, r1, r8, lsl #4
   165d4:	andeq	r6, r1, r8, lsl #4
   165d8:	andeq	r6, r1, r8, lsl #4
   165dc:	andeq	r6, r1, r8, lsl #4
   165e0:	andeq	r6, r1, r8, lsl #4
   165e4:	andeq	r6, r1, r8, lsl #4
   165e8:	andeq	r6, r1, r8, lsl #4
   165ec:	andeq	r6, r1, r8, lsl #4
   165f0:	andeq	r6, r1, r8, lsl #4
   165f4:	andeq	r6, r1, r8, lsl #4
   165f8:	andeq	r6, r1, r8, lsl #4
   165fc:	andeq	r6, r1, r8, lsl #4
   16600:	andeq	r6, r1, r8, lsl #4
   16604:	andeq	r6, r1, r8, lsl #4
   16608:	andeq	r6, r1, r8, lsl #4
   1660c:	andeq	r6, r1, r8, lsl #4
   16610:	andeq	r6, r1, r8, lsl #4
   16614:	andeq	r6, r1, r8, lsl #4
   16618:	andeq	r6, r1, r8, lsl #4
   1661c:	andeq	r6, r1, r8, lsl #4
   16620:	andeq	r6, r1, r8, lsl #4
   16624:			; <UNDEFINED> instruction: 0x000166b4
   16628:	ldrdeq	r6, [r1], -r4
   1662c:	andeq	r6, r1, r8, lsl #4
   16630:			; <UNDEFINED> instruction: 0x000166b4
   16634:	andeq	r6, r1, r8, lsl #4
   16638:			; <UNDEFINED> instruction: 0x000166b4
   1663c:	andeq	r6, r1, r8, lsl #4
   16640:	andeq	r6, r1, r8, lsl #4
   16644:	andeq	r6, r1, r8, lsl #4
   16648:	andeq	r6, r1, r8, lsl #4
   1664c:	andeq	r6, r1, r8, lsl #4
   16650:	andeq	r6, r1, r8, lsl #4
   16654:	andeq	r6, r1, r8, lsl #4
   16658:	andeq	r6, r1, r8, lsl #4
   1665c:	andeq	r6, r1, r8, lsl #4
   16660:	andeq	r6, r1, r8, lsl #4
   16664:	andeq	r6, r1, r8, lsl #4
   16668:	andeq	r6, r1, r8, lsl #4
   1666c:	andeq	r6, r1, r8, lsl #4
   16670:	andeq	r6, r1, r8, lsl #4
   16674:	andeq	r6, r1, r8, lsl #4
   16678:	andeq	r6, r1, r8, lsl #4
   1667c:	andeq	r6, r1, r8, lsl #4
   16680:	andeq	r6, r1, r8, lsl #4
   16684:	andeq	r6, r1, r8, lsl #4
   16688:	andeq	r6, r1, r8, lsl #4
   1668c:	andeq	r6, r1, r8, lsl #4
   16690:	andeq	r6, r1, r8, lsl #4
   16694:	andeq	r6, r1, r8, lsl #4
   16698:	andeq	r6, r1, r8, lsl #4
   1669c:	andeq	r6, r1, r8, lsl #4
   166a0:	andeq	r6, r1, r8, lsl #4
   166a4:			; <UNDEFINED> instruction: 0x000161b0
   166a8:			; <UNDEFINED> instruction: 0x000166b4
   166ac:			; <UNDEFINED> instruction: 0x000161b0
   166b0:	andeq	r6, r1, r8, lsl r2
   166b4:	mov	r3, #0
   166b8:	str	r3, [sp, #40]	; 0x28
   166bc:	b	15d94 <__assert_fail@plt+0x48dc>
   166c0:	mov	r3, #0
   166c4:	str	r3, [sp, #40]	; 0x28
   166c8:	b	15d2c <__assert_fail@plt+0x4874>
   166cc:	mov	r3, #0
   166d0:	str	r3, [sp, #40]	; 0x28
   166d4:	b	15d60 <__assert_fail@plt+0x48a8>
   166d8:	ldr	r3, [sp, #44]	; 0x2c
   166dc:	cmp	r3, #0
   166e0:	beq	15c78 <__assert_fail@plt+0x47c0>
   166e4:	ldr	r3, [sp, #52]	; 0x34
   166e8:	mov	fp, r9
   166ec:	str	r3, [sp, #60]	; 0x3c
   166f0:	b	15df0 <__assert_fail@plt+0x4938>
   166f4:	ldr	r3, [sp, #44]	; 0x2c
   166f8:	cmp	r3, #0
   166fc:	bne	16b30 <__assert_fail@plt+0x5678>
   16700:	str	r3, [sp, #40]	; 0x28
   16704:	cmp	sl, #0
   16708:	ldr	r3, [sp, #84]	; 0x54
   1670c:	clz	r3, r3
   16710:	lsr	r3, r3, #5
   16714:	moveq	r3, #0
   16718:	cmp	r3, #0
   1671c:	strne	sl, [sp, #84]	; 0x54
   16720:	movne	sl, #0
   16724:	bne	16754 <__assert_fail@plt+0x529c>
   16728:	cmp	sl, r4
   1672c:	movhi	r3, #39	; 0x27
   16730:	strbhi	r3, [r9, r4]
   16734:	add	r3, r4, #1
   16738:	cmp	sl, r3
   1673c:	movhi	r2, #92	; 0x5c
   16740:	strbhi	r2, [r9, r3]
   16744:	add	r3, r4, #2
   16748:	cmp	sl, r3
   1674c:	movhi	r2, #39	; 0x27
   16750:	strbhi	r2, [r9, r3]
   16754:	mov	r3, #0
   16758:	add	r4, r4, #3
   1675c:	str	r6, [sp, #80]	; 0x50
   16760:	mov	fp, r3
   16764:	mov	r5, #39	; 0x27
   16768:	b	15c34 <__assert_fail@plt+0x477c>
   1676c:	ldr	r3, [sp, #44]	; 0x2c
   16770:	cmp	r3, #0
   16774:	bne	16b30 <__assert_fail@plt+0x5678>
   16778:	mov	r6, #0
   1677c:	mov	r5, #63	; 0x3f
   16780:	str	r3, [sp, #40]	; 0x28
   16784:	mov	r3, fp
   16788:	b	15c34 <__assert_fail@plt+0x477c>
   1678c:	mov	r2, #0
   16790:	mov	r3, #0
   16794:	cmn	r8, #1
   16798:	strd	r2, [sp, #128]	; 0x80
   1679c:	bne	167ac <__assert_fail@plt+0x52f4>
   167a0:	ldr	r0, [sp, #28]
   167a4:	bl	11314 <strlen@plt>
   167a8:	mov	r8, r0
   167ac:	str	r9, [sp, #100]	; 0x64
   167b0:	mov	r3, #0
   167b4:	strd	sl, [sp, #104]	; 0x68
   167b8:	ldr	sl, [sp, #28]
   167bc:	str	r5, [sp, #112]	; 0x70
   167c0:	mov	r5, r3
   167c4:	ldr	r9, [sp, #68]	; 0x44
   167c8:	str	r4, [sp, #116]	; 0x74
   167cc:	add	r4, r7, r5
   167d0:	add	r3, sp, #128	; 0x80
   167d4:	add	fp, sl, r4
   167d8:	sub	r2, r8, r4
   167dc:	mov	r1, fp
   167e0:	add	r0, sp, #124	; 0x7c
   167e4:	bl	1bd14 <__assert_fail@plt+0xa85c>
   167e8:	subs	r1, r0, #0
   167ec:	beq	1682c <__assert_fail@plt+0x5374>
   167f0:	cmn	r1, #1
   167f4:	beq	16b84 <__assert_fail@plt+0x56cc>
   167f8:	cmn	r1, #2
   167fc:	beq	16ba4 <__assert_fail@plt+0x56ec>
   16800:	cmp	r9, #0
   16804:	bne	1685c <__assert_fail@plt+0x53a4>
   16808:	ldr	r0, [sp, #124]	; 0x7c
   1680c:	add	r5, r5, r1
   16810:	bl	11224 <iswprint@plt>
   16814:	cmp	r0, #0
   16818:	add	r0, sp, #128	; 0x80
   1681c:	moveq	r6, #0
   16820:	bl	111ac <mbsinit@plt>
   16824:	cmp	r0, #0
   16828:	beq	167cc <__assert_fail@plt+0x5314>
   1682c:	ldr	r3, [sp, #60]	; 0x3c
   16830:	add	r9, sp, #100	; 0x64
   16834:	mov	r0, r5
   16838:	ldm	r9, {r9, sl, fp}
   1683c:	eor	r2, r6, #1
   16840:	ldr	r5, [sp, #112]	; 0x70
   16844:	and	r2, r2, r3
   16848:	uxtb	r2, r2
   1684c:	ldr	r4, [sp, #116]	; 0x74
   16850:	cmp	r0, #1
   16854:	bhi	16370 <__assert_fail@plt+0x4eb8>
   16858:	b	16360 <__assert_fail@plt+0x4ea8>
   1685c:	cmp	r1, #1
   16860:	beq	16808 <__assert_fail@plt+0x5350>
   16864:	add	r2, r4, #1
   16868:	add	r3, sl, r1
   1686c:	add	r2, sl, r2
   16870:	add	r4, r3, r4
   16874:	ldrb	r3, [r2], #1
   16878:	sub	r3, r3, #91	; 0x5b
   1687c:	cmp	r3, #33	; 0x21
   16880:	ldrls	pc, [pc, r3, lsl #2]
   16884:	b	16910 <__assert_fail@plt+0x5458>
   16888:	andeq	r6, r1, ip, lsl r9
   1688c:	andeq	r6, r1, ip, lsl r9
   16890:	andeq	r6, r1, r0, lsl r9
   16894:	andeq	r6, r1, ip, lsl r9
   16898:	andeq	r6, r1, r0, lsl r9
   1689c:	andeq	r6, r1, ip, lsl r9
   168a0:	andeq	r6, r1, r0, lsl r9
   168a4:	andeq	r6, r1, r0, lsl r9
   168a8:	andeq	r6, r1, r0, lsl r9
   168ac:	andeq	r6, r1, r0, lsl r9
   168b0:	andeq	r6, r1, r0, lsl r9
   168b4:	andeq	r6, r1, r0, lsl r9
   168b8:	andeq	r6, r1, r0, lsl r9
   168bc:	andeq	r6, r1, r0, lsl r9
   168c0:	andeq	r6, r1, r0, lsl r9
   168c4:	andeq	r6, r1, r0, lsl r9
   168c8:	andeq	r6, r1, r0, lsl r9
   168cc:	andeq	r6, r1, r0, lsl r9
   168d0:	andeq	r6, r1, r0, lsl r9
   168d4:	andeq	r6, r1, r0, lsl r9
   168d8:	andeq	r6, r1, r0, lsl r9
   168dc:	andeq	r6, r1, r0, lsl r9
   168e0:	andeq	r6, r1, r0, lsl r9
   168e4:	andeq	r6, r1, r0, lsl r9
   168e8:	andeq	r6, r1, r0, lsl r9
   168ec:	andeq	r6, r1, r0, lsl r9
   168f0:	andeq	r6, r1, r0, lsl r9
   168f4:	andeq	r6, r1, r0, lsl r9
   168f8:	andeq	r6, r1, r0, lsl r9
   168fc:	andeq	r6, r1, r0, lsl r9
   16900:	andeq	r6, r1, r0, lsl r9
   16904:	andeq	r6, r1, r0, lsl r9
   16908:	andeq	r6, r1, r0, lsl r9
   1690c:	andeq	r6, r1, ip, lsl r9
   16910:	cmp	r4, r2
   16914:	bne	16874 <__assert_fail@plt+0x53bc>
   16918:	b	16808 <__assert_fail@plt+0x5350>
   1691c:	mov	r3, #2
   16920:	ldr	fp, [sp, #100]	; 0x64
   16924:	str	r3, [sp, #176]	; 0xb0
   16928:	ldr	sl, [sp, #104]	; 0x68
   1692c:	b	15df0 <__assert_fail@plt+0x4938>
   16930:	ldr	r2, [sp, #52]	; 0x34
   16934:	mov	fp, r9
   16938:	ldr	r3, [sp, #60]	; 0x3c
   1693c:	and	r3, r3, r2
   16940:	str	r3, [sp, #60]	; 0x3c
   16944:	b	15df0 <__assert_fail@plt+0x4938>
   16948:	cmp	sl, r4
   1694c:	movhi	r2, fp
   16950:	bhi	15cc8 <__assert_fail@plt+0x4810>
   16954:	mov	r2, r4
   16958:	b	15cd8 <__assert_fail@plt+0x4820>
   1695c:	mov	r6, r3
   16960:	mov	r5, #63	; 0x3f
   16964:	b	15d98 <__assert_fail@plt+0x48e0>
   16968:	ldr	r8, [sp, #36]	; 0x24
   1696c:	ldr	r6, [sp, #100]	; 0x64
   16970:	b	15c44 <__assert_fail@plt+0x478c>
   16974:	mov	fp, r9
   16978:	ldr	r8, [sp, #36]	; 0x24
   1697c:	ldr	r3, [sp, #52]	; 0x34
   16980:	str	r3, [sp, #60]	; 0x3c
   16984:	b	15df0 <__assert_fail@plt+0x4938>
   16988:	ldr	r8, [sp, #36]	; 0x24
   1698c:	ldr	r6, [sp, #100]	; 0x64
   16990:	b	15adc <__assert_fail@plt+0x4624>
   16994:	mov	r3, #0
   16998:	add	r4, r4, #4
   1699c:	mov	fp, r2
   169a0:	mov	r6, r3
   169a4:	mov	r5, #48	; 0x30
   169a8:	b	15c34 <__assert_fail@plt+0x477c>
   169ac:	mov	r6, r3
   169b0:	b	16430 <__assert_fail@plt+0x4f78>
   169b4:	mov	r3, #1
   169b8:	movw	r2, #54652	; 0xd57c
   169bc:	movt	r2, #1
   169c0:	mov	r4, r3
   169c4:	mov	r9, sl
   169c8:	str	r3, [sp, #32]
   169cc:	str	sl, [sp, #44]	; 0x2c
   169d0:	str	r3, [sp, #48]	; 0x30
   169d4:	str	sl, [sp, #52]	; 0x34
   169d8:	str	r3, [sp, #56]	; 0x38
   169dc:	str	r3, [sp, #60]	; 0x3c
   169e0:	str	sl, [sp, #64]	; 0x40
   169e4:	str	sl, [sp, #68]	; 0x44
   169e8:	str	r2, [sp, #72]	; 0x48
   169ec:	str	sl, [sp, #80]	; 0x50
   169f0:	str	sl, [sp, #84]	; 0x54
   169f4:	str	sl, [sp, #88]	; 0x58
   169f8:	b	154e8 <__assert_fail@plt+0x4030>
   169fc:	mov	r3, #0
   16a00:	mov	r5, #48	; 0x30
   16a04:	mov	r6, r3
   16a08:	b	15c34 <__assert_fail@plt+0x477c>
   16a0c:	cmp	sl, r4
   16a10:	mov	r5, #48	; 0x30
   16a14:	movhi	r3, #48	; 0x30
   16a18:	strbhi	r3, [r9, r4]
   16a1c:	add	r3, r2, #2
   16a20:	add	r4, r2, #3
   16a24:	cmp	sl, r3
   16a28:	movhi	r1, #48	; 0x30
   16a2c:	strbhi	r1, [r9, r3]
   16a30:	mov	r3, #0
   16a34:	b	15d10 <__assert_fail@plt+0x4858>
   16a38:	ldr	r3, [sp, #48]	; 0x30
   16a3c:	str	r3, [sp, #40]	; 0x28
   16a40:	b	1631c <__assert_fail@plt+0x4e64>
   16a44:	ldr	r2, [sp, #28]
   16a48:	ldrb	r2, [r2, r3]
   16a4c:	sub	r1, r2, #33	; 0x21
   16a50:	cmp	r1, #29
   16a54:	ldrls	pc, [pc, r1, lsl #2]
   16a58:	b	15d94 <__assert_fail@plt+0x48dc>
   16a5c:	ldrdeq	r6, [r1], -r4
   16a60:	muleq	r1, r4, sp
   16a64:	muleq	r1, r4, sp
   16a68:	muleq	r1, r4, sp
   16a6c:	muleq	r1, r4, sp
   16a70:	muleq	r1, r4, sp
   16a74:	ldrdeq	r6, [r1], -r4
   16a78:	ldrdeq	r6, [r1], -r4
   16a7c:	ldrdeq	r6, [r1], -r4
   16a80:	muleq	r1, r4, sp
   16a84:	muleq	r1, r4, sp
   16a88:	muleq	r1, r4, sp
   16a8c:	ldrdeq	r6, [r1], -r4
   16a90:	muleq	r1, r4, sp
   16a94:	ldrdeq	r6, [r1], -r4
   16a98:	muleq	r1, r4, sp
   16a9c:	muleq	r1, r4, sp
   16aa0:	muleq	r1, r4, sp
   16aa4:	muleq	r1, r4, sp
   16aa8:	muleq	r1, r4, sp
   16aac:	muleq	r1, r4, sp
   16ab0:	muleq	r1, r4, sp
   16ab4:	muleq	r1, r4, sp
   16ab8:	muleq	r1, r4, sp
   16abc:	muleq	r1, r4, sp
   16ac0:	muleq	r1, r4, sp
   16ac4:	muleq	r1, r4, sp
   16ac8:	ldrdeq	r6, [r1], -r4
   16acc:	ldrdeq	r6, [r1], -r4
   16ad0:	ldrdeq	r6, [r1], -r4
   16ad4:	ldr	r1, [sp, #44]	; 0x2c
   16ad8:	cmp	r1, #0
   16adc:	bne	16d3c <__assert_fail@plt+0x5884>
   16ae0:	cmp	sl, r4
   16ae4:	mov	r7, r3
   16ae8:	movhi	r1, #63	; 0x3f
   16aec:	mov	r5, r2
   16af0:	mov	r3, fp
   16af4:	strbhi	r1, [r9, r4]
   16af8:	add	r1, r4, #1
   16afc:	cmp	sl, r1
   16b00:	movhi	r0, #34	; 0x22
   16b04:	strbhi	r0, [r9, r1]
   16b08:	add	r1, r4, #2
   16b0c:	cmp	sl, r1
   16b10:	movhi	r0, #34	; 0x22
   16b14:	strbhi	r0, [r9, r1]
   16b18:	add	r1, r4, #3
   16b1c:	add	r4, r4, #4
   16b20:	cmp	sl, r1
   16b24:	movhi	r0, #63	; 0x3f
   16b28:	strbhi	r0, [r9, r1]
   16b2c:	b	15d10 <__assert_fail@plt+0x4858>
   16b30:	mov	fp, r9
   16b34:	b	15df0 <__assert_fail@plt+0x4938>
   16b38:	ldr	r3, [sp, #188]	; 0xbc
   16b3c:	ldrb	r3, [r3]
   16b40:	cmp	r3, #0
   16b44:	beq	15480 <__assert_fail@plt+0x3fc8>
   16b48:	ldr	r2, [sp, #188]	; 0xbc
   16b4c:	cmp	sl, r4
   16b50:	bls	16b70 <__assert_fail@plt+0x56b8>
   16b54:	strb	r3, [fp, r4]
   16b58:	add	r4, r4, #1
   16b5c:	ldrb	r3, [r2, #1]!
   16b60:	cmp	r3, #0
   16b64:	beq	15480 <__assert_fail@plt+0x3fc8>
   16b68:	cmp	sl, r4
   16b6c:	bhi	16b54 <__assert_fail@plt+0x569c>
   16b70:	ldrb	r3, [r2, #1]!
   16b74:	add	r4, r4, #1
   16b78:	cmp	r3, #0
   16b7c:	bne	16b4c <__assert_fail@plt+0x5694>
   16b80:	b	15480 <__assert_fail@plt+0x3fc8>
   16b84:	add	r9, sp, #100	; 0x64
   16b88:	mov	r0, r5
   16b8c:	ldr	r2, [sp, #60]	; 0x3c
   16b90:	mov	r6, #0
   16b94:	ldm	r9, {r9, sl, fp}
   16b98:	ldr	r5, [sp, #112]	; 0x70
   16b9c:	ldr	r4, [sp, #116]	; 0x74
   16ba0:	b	16850 <__assert_fail@plt+0x5398>
   16ba4:	cmp	r4, r8
   16ba8:	add	r9, sp, #100	; 0x64
   16bac:	mov	r1, r4
   16bb0:	mov	r2, fp
   16bb4:	ldm	r9, {r9, sl, fp}
   16bb8:	mov	r3, r5
   16bbc:	mov	r0, r5
   16bc0:	ldr	r5, [sp, #112]	; 0x70
   16bc4:	ldr	r4, [sp, #116]	; 0x74
   16bc8:	bcs	16bfc <__assert_fail@plt+0x5744>
   16bcc:	ldrb	r6, [r2]
   16bd0:	cmp	r6, #0
   16bd4:	bne	16be8 <__assert_fail@plt+0x5730>
   16bd8:	b	16d34 <__assert_fail@plt+0x587c>
   16bdc:	ldrb	r6, [r2, #1]!
   16be0:	cmp	r6, #0
   16be4:	beq	16ccc <__assert_fail@plt+0x5814>
   16be8:	add	r3, r3, #1
   16bec:	add	r1, r7, r3
   16bf0:	cmp	r8, r1
   16bf4:	bhi	16bdc <__assert_fail@plt+0x5724>
   16bf8:	mov	r0, r3
   16bfc:	mov	r6, #0
   16c00:	ldr	r2, [sp, #60]	; 0x3c
   16c04:	b	16850 <__assert_fail@plt+0x5398>
   16c08:	mov	r3, #1
   16c0c:	mov	r4, #0
   16c10:	mov	r9, r4
   16c14:	str	r3, [sp, #32]
   16c18:	str	r3, [sp, #44]	; 0x2c
   16c1c:	str	r3, [sp, #48]	; 0x30
   16c20:	str	r4, [sp, #52]	; 0x34
   16c24:	str	r3, [sp, #56]	; 0x38
   16c28:	str	r3, [sp, #60]	; 0x3c
   16c2c:	str	r3, [sp, #88]	; 0x58
   16c30:	movw	r3, #54652	; 0xd57c
   16c34:	movt	r3, #1
   16c38:	str	r4, [sp, #64]	; 0x40
   16c3c:	str	r4, [sp, #68]	; 0x44
   16c40:	str	r3, [sp, #72]	; 0x48
   16c44:	str	r4, [sp, #80]	; 0x50
   16c48:	str	r4, [sp, #84]	; 0x54
   16c4c:	b	154e8 <__assert_fail@plt+0x4030>
   16c50:	mov	fp, r9
   16c54:	b	15e04 <__assert_fail@plt+0x494c>
   16c58:	ldr	r3, [sp, #48]	; 0x30
   16c5c:	b	16778 <__assert_fail@plt+0x52c0>
   16c60:	mov	r2, r3
   16c64:	ldr	r3, [sp, #72]	; 0x48
   16c68:	cmp	r3, #0
   16c6c:	moveq	r2, #0
   16c70:	andne	r2, r2, #1
   16c74:	cmp	r2, #0
   16c78:	beq	16ca8 <__assert_fail@plt+0x57f0>
   16c7c:	mov	r2, r3
   16c80:	ldrb	r3, [r3]
   16c84:	cmp	r3, #0
   16c88:	beq	16ca8 <__assert_fail@plt+0x57f0>
   16c8c:	cmp	sl, r4
   16c90:	bls	16cb8 <__assert_fail@plt+0x5800>
   16c94:	strb	r3, [fp, r4]
   16c98:	add	r4, r4, #1
   16c9c:	ldrb	r3, [r2, #1]!
   16ca0:	cmp	r3, #0
   16ca4:	bne	16c8c <__assert_fail@plt+0x57d4>
   16ca8:	cmp	sl, r4
   16cac:	movhi	r3, #0
   16cb0:	strbhi	r3, [fp, r4]
   16cb4:	b	15e40 <__assert_fail@plt+0x4988>
   16cb8:	ldrb	r3, [r2, #1]!
   16cbc:	add	r4, r4, #1
   16cc0:	cmp	r3, #0
   16cc4:	bne	16c8c <__assert_fail@plt+0x57d4>
   16cc8:	b	16ca8 <__assert_fail@plt+0x57f0>
   16ccc:	mov	r0, r3
   16cd0:	ldr	r2, [sp, #60]	; 0x3c
   16cd4:	b	16850 <__assert_fail@plt+0x5398>
   16cd8:	mov	ip, #5
   16cdc:	mov	r3, r8
   16ce0:	ldr	r1, [sp, #84]	; 0x54
   16ce4:	str	ip, [sp]
   16ce8:	ldr	r2, [sp, #180]	; 0xb4
   16cec:	ldr	ip, [sp, #188]	; 0xbc
   16cf0:	ldr	r0, [sp, #184]	; 0xb8
   16cf4:	str	r2, [sp, #4]
   16cf8:	ldr	r2, [sp, #28]
   16cfc:	str	ip, [sp, #12]
   16d00:	ldr	ip, [sp, #192]	; 0xc0
   16d04:	str	r0, [sp, #8]
   16d08:	mov	r0, fp
   16d0c:	str	ip, [sp, #16]
   16d10:	bl	153c4 <__assert_fail@plt+0x3f0c>
   16d14:	mov	r4, r0
   16d18:	b	15e40 <__assert_fail@plt+0x4988>
   16d1c:	mov	r6, r3
   16d20:	str	r3, [sp, #40]	; 0x28
   16d24:	b	15db0 <__assert_fail@plt+0x48f8>
   16d28:	mov	r3, #2
   16d2c:	str	r3, [sp, #176]	; 0xb0
   16d30:	b	15df0 <__assert_fail@plt+0x4938>
   16d34:	ldr	r2, [sp, #60]	; 0x3c
   16d38:	b	16850 <__assert_fail@plt+0x5398>
   16d3c:	mov	r3, #5
   16d40:	mov	fp, r9
   16d44:	str	r3, [sp, #176]	; 0xb0
   16d48:	b	15e04 <__assert_fail@plt+0x494c>
   16d4c:	mov	r1, #1
   16d50:	mov	r9, #0
   16d54:	mov	r3, r9
   16d58:	mov	r2, r9
   16d5c:	str	r1, [sp, #32]
   16d60:	str	sl, [sp, #84]	; 0x54
   16d64:	b	15b8c <__assert_fail@plt+0x46d4>
   16d68:	mov	r3, #0
   16d6c:	mov	r2, #1
   16d70:	mov	r9, r3
   16d74:	mov	r4, r3
   16d78:	str	r2, [sp, #32]
   16d7c:	strd	r2, [sp, #44]	; 0x2c
   16d80:	strd	r2, [sp, #56]	; 0x38
   16d84:	str	r3, [sp, #80]	; 0x50
   16d88:	str	r3, [sp, #84]	; 0x54
   16d8c:	str	r3, [sp, #88]	; 0x58
   16d90:	movw	r3, #54672	; 0xd590
   16d94:	movt	r3, #1
   16d98:	str	r2, [sp, #52]	; 0x34
   16d9c:	str	r2, [sp, #64]	; 0x40
   16da0:	str	r2, [sp, #68]	; 0x44
   16da4:	str	r3, [sp, #72]	; 0x48
   16da8:	b	154e8 <__assert_fail@plt+0x4030>
   16dac:	bl	114a0 <abort@plt>
   16db0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16db4:	mov	r4, r0
   16db8:	mov	r5, r3
   16dbc:	strd	r6, [sp, #8]
   16dc0:	movw	r7, #57692	; 0xe15c
   16dc4:	movt	r7, #2
   16dc8:	strd	r8, [sp, #16]
   16dcc:	strd	sl, [sp, #24]
   16dd0:	mov	sl, r1
   16dd4:	mov	fp, r2
   16dd8:	str	lr, [sp, #32]
   16ddc:	sub	sp, sp, #60	; 0x3c
   16de0:	bl	11338 <__errno_location@plt>
   16de4:	mov	r8, r0
   16de8:	cmn	r4, #-2147483647	; 0x80000001
   16dec:	ldr	r6, [r7]
   16df0:	movne	r0, #0
   16df4:	moveq	r0, #1
   16df8:	ldr	r3, [r8]
   16dfc:	orrs	r0, r0, r4, lsr #31
   16e00:	str	r3, [sp, #28]
   16e04:	bne	16f94 <__assert_fail@plt+0x5adc>
   16e08:	ldr	r3, [r7, #4]
   16e0c:	cmp	r3, r4
   16e10:	bgt	16e70 <__assert_fail@plt+0x59b8>
   16e14:	add	r1, r7, #8
   16e18:	sub	r2, r4, r3
   16e1c:	str	r3, [sp, #52]	; 0x34
   16e20:	cmp	r6, r1
   16e24:	add	r2, r2, #1
   16e28:	beq	16f6c <__assert_fail@plt+0x5ab4>
   16e2c:	mov	r1, #8
   16e30:	mov	r0, r6
   16e34:	mvn	r3, #-2147483648	; 0x80000000
   16e38:	str	r1, [sp]
   16e3c:	add	r1, sp, #52	; 0x34
   16e40:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   16e44:	mov	r6, r0
   16e48:	str	r0, [r7]
   16e4c:	ldr	r0, [r7, #4]
   16e50:	mov	r1, #0
   16e54:	ldr	r2, [sp, #52]	; 0x34
   16e58:	sub	r2, r2, r0
   16e5c:	add	r0, r6, r0, lsl #3
   16e60:	lsl	r2, r2, #3
   16e64:	bl	11368 <memset@plt>
   16e68:	ldr	r3, [sp, #52]	; 0x34
   16e6c:	str	r3, [r7, #4]
   16e70:	ldr	r1, [r5, #4]
   16e74:	add	r0, r6, r4, lsl #3
   16e78:	add	ip, r5, #8
   16e7c:	mov	r3, fp
   16e80:	mov	r2, sl
   16e84:	ldr	r7, [r0, #4]
   16e88:	str	r0, [sp, #36]	; 0x24
   16e8c:	str	ip, [sp, #40]	; 0x28
   16e90:	orr	r0, r1, #1
   16e94:	ldr	r9, [r6, r4, lsl #3]
   16e98:	str	ip, [sp, #8]
   16e9c:	ldr	lr, [r5, #44]	; 0x2c
   16ea0:	str	r0, [sp, #4]
   16ea4:	ldr	ip, [r5]
   16ea8:	mov	r1, r9
   16eac:	str	ip, [sp, #32]
   16eb0:	ldr	ip, [r5, #40]	; 0x28
   16eb4:	str	ip, [sp, #12]
   16eb8:	ldr	ip, [sp, #32]
   16ebc:	str	lr, [sp, #16]
   16ec0:	str	r0, [sp, #44]	; 0x2c
   16ec4:	mov	r0, r7
   16ec8:	str	ip, [sp]
   16ecc:	bl	153c4 <__assert_fail@plt+0x3f0c>
   16ed0:	cmp	r9, r0
   16ed4:	bhi	16f44 <__assert_fail@plt+0x5a8c>
   16ed8:	add	r9, r0, #1
   16edc:	movw	r3, #57812	; 0xe1d4
   16ee0:	movt	r3, #2
   16ee4:	cmp	r7, r3
   16ee8:	str	r9, [r6, r4, lsl #3]
   16eec:	beq	16ef8 <__assert_fail@plt+0x5a40>
   16ef0:	mov	r0, r7
   16ef4:	bl	13fe8 <__assert_fail@plt+0x2b30>
   16ef8:	mov	r0, r9
   16efc:	bl	1a310 <__assert_fail@plt+0x8e58>
   16f00:	ldr	ip, [r5]
   16f04:	mov	r3, fp
   16f08:	mov	r2, sl
   16f0c:	mov	r1, r9
   16f10:	mov	r7, r0
   16f14:	ldr	lr, [sp, #36]	; 0x24
   16f18:	ldr	r4, [r5, #40]	; 0x28
   16f1c:	str	r0, [lr, #4]
   16f20:	ldr	lr, [r5, #44]	; 0x2c
   16f24:	str	ip, [sp]
   16f28:	ldr	ip, [sp, #44]	; 0x2c
   16f2c:	str	ip, [sp, #4]
   16f30:	ldr	ip, [sp, #40]	; 0x28
   16f34:	str	r4, [sp, #12]
   16f38:	str	lr, [sp, #16]
   16f3c:	str	ip, [sp, #8]
   16f40:	bl	153c4 <__assert_fail@plt+0x3f0c>
   16f44:	ldr	r3, [sp, #28]
   16f48:	mov	r0, r7
   16f4c:	str	r3, [r8]
   16f50:	add	sp, sp, #60	; 0x3c
   16f54:	ldrd	r4, [sp]
   16f58:	ldrd	r6, [sp, #8]
   16f5c:	ldrd	r8, [sp, #16]
   16f60:	ldrd	sl, [sp, #24]
   16f64:	add	sp, sp, #32
   16f68:	pop	{pc}		; (ldr pc, [sp], #4)
   16f6c:	mov	r1, #8
   16f70:	mvn	r3, #-2147483648	; 0x80000000
   16f74:	str	r1, [sp]
   16f78:	add	r1, sp, #52	; 0x34
   16f7c:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   16f80:	ldrd	r2, [r7, #8]
   16f84:	mov	r6, r0
   16f88:	str	r0, [r7]
   16f8c:	strd	r2, [r0]
   16f90:	b	16e4c <__assert_fail@plt+0x5994>
   16f94:	bl	114a0 <abort@plt>
   16f98:	strd	r4, [sp, #-16]!
   16f9c:	mov	r5, r0
   16fa0:	str	r6, [sp, #8]
   16fa4:	str	lr, [sp, #12]
   16fa8:	bl	11338 <__errno_location@plt>
   16fac:	mov	r4, r0
   16fb0:	cmp	r5, #0
   16fb4:	ldr	r0, [pc, #32]	; 16fdc <__assert_fail@plt+0x5b24>
   16fb8:	mov	r1, #48	; 0x30
   16fbc:	movne	r0, r5
   16fc0:	ldr	r6, [r4]
   16fc4:	bl	1a754 <__assert_fail@plt+0x929c>
   16fc8:	str	r6, [r4]
   16fcc:	ldrd	r4, [sp]
   16fd0:	ldr	r6, [sp, #8]
   16fd4:	add	sp, sp, #12
   16fd8:	pop	{pc}		; (ldr pc, [sp], #4)
   16fdc:	ldrdeq	lr, [r2], -r4
   16fe0:	ldr	r3, [pc, #12]	; 16ff4 <__assert_fail@plt+0x5b3c>
   16fe4:	cmp	r0, #0
   16fe8:	moveq	r0, r3
   16fec:	ldr	r0, [r0]
   16ff0:	bx	lr
   16ff4:	ldrdeq	lr, [r2], -r4
   16ff8:	ldr	r3, [pc, #12]	; 1700c <__assert_fail@plt+0x5b54>
   16ffc:	cmp	r0, #0
   17000:	moveq	r0, r3
   17004:	str	r1, [r0]
   17008:	bx	lr
   1700c:	ldrdeq	lr, [r2], -r4
   17010:	ldr	r3, [pc, #52]	; 1704c <__assert_fail@plt+0x5b94>
   17014:	cmp	r0, #0
   17018:	push	{lr}		; (str lr, [sp, #-4]!)
   1701c:	lsr	lr, r1, #5
   17020:	and	r1, r1, #31
   17024:	moveq	r0, r3
   17028:	add	r3, r0, #8
   1702c:	ldr	ip, [r3, lr, lsl #2]
   17030:	lsr	r0, ip, r1
   17034:	eor	r2, r2, r0
   17038:	and	r0, r0, #1
   1703c:	and	r2, r2, #1
   17040:	eor	r1, ip, r2, lsl r1
   17044:	str	r1, [r3, lr, lsl #2]
   17048:	pop	{pc}		; (ldr pc, [sp], #4)
   1704c:	ldrdeq	lr, [r2], -r4
   17050:	ldr	r3, [pc, #16]	; 17068 <__assert_fail@plt+0x5bb0>
   17054:	cmp	r0, #0
   17058:	movne	r3, r0
   1705c:	ldr	r0, [r3, #4]
   17060:	str	r1, [r3, #4]
   17064:	bx	lr
   17068:	ldrdeq	lr, [r2], -r4
   1706c:	ldr	r3, [pc, #48]	; 170a4 <__assert_fail@plt+0x5bec>
   17070:	cmp	r0, #0
   17074:	mov	ip, #10
   17078:	moveq	r0, r3
   1707c:	cmp	r2, #0
   17080:	cmpne	r1, #0
   17084:	str	ip, [r0]
   17088:	beq	17098 <__assert_fail@plt+0x5be0>
   1708c:	str	r1, [r0, #40]	; 0x28
   17090:	str	r2, [r0, #44]	; 0x2c
   17094:	bx	lr
   17098:	str	r4, [sp, #-8]!
   1709c:	str	lr, [sp, #4]
   170a0:	bl	114a0 <abort@plt>
   170a4:	ldrdeq	lr, [r2], -r4
   170a8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   170ac:	strd	r6, [sp, #8]
   170b0:	mov	r7, r0
   170b4:	mov	r6, r1
   170b8:	strd	r8, [sp, #16]
   170bc:	mov	r8, r2
   170c0:	mov	r9, r3
   170c4:	str	lr, [sp, #24]
   170c8:	sub	sp, sp, #28
   170cc:	ldr	r4, [sp, #56]	; 0x38
   170d0:	ldr	ip, [pc, #104]	; 17140 <__assert_fail@plt+0x5c88>
   170d4:	cmp	r4, #0
   170d8:	moveq	r4, ip
   170dc:	bl	11338 <__errno_location@plt>
   170e0:	ldr	ip, [r4, #44]	; 0x2c
   170e4:	mov	r5, r0
   170e8:	mov	r1, r6
   170ec:	add	lr, r4, #8
   170f0:	mov	r3, r9
   170f4:	ldr	r6, [r5]
   170f8:	mov	r2, r8
   170fc:	mov	r0, r7
   17100:	str	ip, [sp, #16]
   17104:	ldr	ip, [r4, #40]	; 0x28
   17108:	str	lr, [sp, #8]
   1710c:	str	ip, [sp, #12]
   17110:	ldr	ip, [r4, #4]
   17114:	str	ip, [sp, #4]
   17118:	ldr	ip, [r4]
   1711c:	str	ip, [sp]
   17120:	bl	153c4 <__assert_fail@plt+0x3f0c>
   17124:	str	r6, [r5]
   17128:	add	sp, sp, #28
   1712c:	ldrd	r4, [sp]
   17130:	ldrd	r6, [sp, #8]
   17134:	ldrd	r8, [sp, #16]
   17138:	add	sp, sp, #24
   1713c:	pop	{pc}		; (ldr pc, [sp], #4)
   17140:	ldrdeq	lr, [r2], -r4
   17144:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17148:	cmp	r2, #0
   1714c:	ldr	r4, [pc, #192]	; 17214 <__assert_fail@plt+0x5d5c>
   17150:	movne	r4, r2
   17154:	strd	r6, [sp, #8]
   17158:	strd	r8, [sp, #16]
   1715c:	mov	r9, r1
   17160:	mov	r8, r0
   17164:	strd	sl, [sp, #24]
   17168:	str	lr, [sp, #32]
   1716c:	sub	sp, sp, #36	; 0x24
   17170:	bl	11338 <__errno_location@plt>
   17174:	ldr	r5, [r4, #4]
   17178:	mov	r6, r0
   1717c:	add	r7, r4, #8
   17180:	mov	r1, #0
   17184:	mov	r3, r9
   17188:	ldr	ip, [r4, #44]	; 0x2c
   1718c:	mov	r2, r8
   17190:	mov	r0, r1
   17194:	ldr	sl, [r6]
   17198:	orr	r5, r5, #1
   1719c:	str	ip, [sp, #16]
   171a0:	ldr	ip, [r4, #40]	; 0x28
   171a4:	stmib	sp, {r5, r7, ip}
   171a8:	ldr	ip, [r4]
   171ac:	str	ip, [sp]
   171b0:	bl	153c4 <__assert_fail@plt+0x3f0c>
   171b4:	add	r1, r0, #1
   171b8:	mov	r0, r1
   171bc:	str	r1, [sp, #28]
   171c0:	bl	1a310 <__assert_fail@plt+0x8e58>
   171c4:	ldr	ip, [r4, #44]	; 0x2c
   171c8:	mov	fp, r0
   171cc:	mov	r3, r9
   171d0:	mov	r2, r8
   171d4:	ldr	r1, [sp, #28]
   171d8:	str	ip, [sp, #16]
   171dc:	ldr	ip, [r4, #40]	; 0x28
   171e0:	stmib	sp, {r5, r7, ip}
   171e4:	ldr	ip, [r4]
   171e8:	str	ip, [sp]
   171ec:	bl	153c4 <__assert_fail@plt+0x3f0c>
   171f0:	mov	r0, fp
   171f4:	str	sl, [r6]
   171f8:	add	sp, sp, #36	; 0x24
   171fc:	ldrd	r4, [sp]
   17200:	ldrd	r6, [sp, #8]
   17204:	ldrd	r8, [sp, #16]
   17208:	ldrd	sl, [sp, #24]
   1720c:	add	sp, sp, #32
   17210:	pop	{pc}		; (ldr pc, [sp], #4)
   17214:	ldrdeq	lr, [r2], -r4
   17218:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1721c:	cmp	r3, #0
   17220:	ldr	r4, [pc, #220]	; 17304 <__assert_fail@plt+0x5e4c>
   17224:	movne	r4, r3
   17228:	strd	r6, [sp, #8]
   1722c:	mov	r6, r2
   17230:	strd	r8, [sp, #16]
   17234:	mov	r9, r0
   17238:	strd	sl, [sp, #24]
   1723c:	mov	sl, r1
   17240:	str	lr, [sp, #32]
   17244:	sub	sp, sp, #44	; 0x2c
   17248:	bl	11338 <__errno_location@plt>
   1724c:	ldr	r5, [r4, #4]
   17250:	mov	r7, r0
   17254:	mov	r1, #0
   17258:	add	r8, r4, #8
   1725c:	mov	r3, sl
   17260:	ldr	ip, [r4, #44]	; 0x2c
   17264:	mov	r2, r9
   17268:	mov	r0, r1
   1726c:	ldr	lr, [r7]
   17270:	cmp	r6, r1
   17274:	orreq	r5, r5, #1
   17278:	str	ip, [sp, #16]
   1727c:	ldr	ip, [r4, #40]	; 0x28
   17280:	stmib	sp, {r5, r8, ip}
   17284:	ldr	ip, [r4]
   17288:	str	lr, [sp, #28]
   1728c:	str	ip, [sp]
   17290:	bl	153c4 <__assert_fail@plt+0x3f0c>
   17294:	add	r1, r0, #1
   17298:	mov	fp, r0
   1729c:	mov	r0, r1
   172a0:	str	r1, [sp, #36]	; 0x24
   172a4:	bl	1a310 <__assert_fail@plt+0x8e58>
   172a8:	ldr	ip, [r4, #44]	; 0x2c
   172ac:	mov	r3, sl
   172b0:	mov	r2, r9
   172b4:	ldr	r1, [sp, #36]	; 0x24
   172b8:	str	ip, [sp, #16]
   172bc:	ldr	ip, [r4, #40]	; 0x28
   172c0:	str	r0, [sp, #32]
   172c4:	stmib	sp, {r5, r8, ip}
   172c8:	ldr	ip, [r4]
   172cc:	str	ip, [sp]
   172d0:	bl	153c4 <__assert_fail@plt+0x3f0c>
   172d4:	ldr	lr, [sp, #28]
   172d8:	cmp	r6, #0
   172dc:	ldr	r0, [sp, #32]
   172e0:	str	lr, [r7]
   172e4:	strne	fp, [r6]
   172e8:	add	sp, sp, #44	; 0x2c
   172ec:	ldrd	r4, [sp]
   172f0:	ldrd	r6, [sp, #8]
   172f4:	ldrd	r8, [sp, #16]
   172f8:	ldrd	sl, [sp, #24]
   172fc:	add	sp, sp, #32
   17300:	pop	{pc}		; (ldr pc, [sp], #4)
   17304:	ldrdeq	lr, [r2], -r4
   17308:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1730c:	movw	r5, #57692	; 0xe15c
   17310:	movt	r5, #2
   17314:	ldr	r3, [r5, #4]
   17318:	strd	r6, [sp, #8]
   1731c:	str	r8, [sp, #16]
   17320:	str	lr, [sp, #20]
   17324:	ldr	r7, [r5]
   17328:	cmp	r3, #1
   1732c:	ble	17350 <__assert_fail@plt+0x5e98>
   17330:	mov	r4, #1
   17334:	add	r6, r7, #4
   17338:	ldr	r0, [r6, r4, lsl #3]
   1733c:	add	r4, r4, #1
   17340:	bl	13fe8 <__assert_fail@plt+0x2b30>
   17344:	ldr	r3, [r5, #4]
   17348:	cmp	r3, r4
   1734c:	bgt	17338 <__assert_fail@plt+0x5e80>
   17350:	ldr	r0, [r7, #4]
   17354:	movw	r4, #57812	; 0xe1d4
   17358:	movt	r4, #2
   1735c:	cmp	r0, r4
   17360:	beq	17374 <__assert_fail@plt+0x5ebc>
   17364:	bl	13fe8 <__assert_fail@plt+0x2b30>
   17368:	mov	r3, #256	; 0x100
   1736c:	str	r3, [r5, #8]
   17370:	str	r4, [r5, #12]
   17374:	ldr	r4, [pc, #44]	; 173a8 <__assert_fail@plt+0x5ef0>
   17378:	cmp	r7, r4
   1737c:	beq	1738c <__assert_fail@plt+0x5ed4>
   17380:	mov	r0, r7
   17384:	bl	13fe8 <__assert_fail@plt+0x2b30>
   17388:	str	r4, [r5]
   1738c:	mov	r3, #1
   17390:	ldrd	r6, [sp, #8]
   17394:	str	r3, [r5, #4]
   17398:	ldrd	r4, [sp]
   1739c:	ldr	r8, [sp, #16]
   173a0:	add	sp, sp, #20
   173a4:	pop	{pc}		; (ldr pc, [sp], #4)
   173a8:	andeq	lr, r2, r4, ror #2
   173ac:	ldr	r3, [pc, #4]	; 173b8 <__assert_fail@plt+0x5f00>
   173b0:	mvn	r2, #0
   173b4:	b	16db0 <__assert_fail@plt+0x58f8>
   173b8:	ldrdeq	lr, [r2], -r4
   173bc:	ldr	r3, [pc]	; 173c4 <__assert_fail@plt+0x5f0c>
   173c0:	b	16db0 <__assert_fail@plt+0x58f8>
   173c4:	ldrdeq	lr, [r2], -r4
   173c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   173cc:	movw	r4, #57692	; 0xe15c
   173d0:	movt	r4, #2
   173d4:	strd	r6, [sp, #8]
   173d8:	strd	r8, [sp, #16]
   173dc:	strd	sl, [sp, #24]
   173e0:	mov	sl, r0
   173e4:	str	lr, [sp, #32]
   173e8:	sub	sp, sp, #44	; 0x2c
   173ec:	bl	11338 <__errno_location@plt>
   173f0:	ldr	r3, [r0]
   173f4:	mov	r8, r0
   173f8:	ldr	r2, [r4, #4]
   173fc:	ldr	r5, [r4]
   17400:	str	r3, [sp, #28]
   17404:	cmp	r2, #0
   17408:	bgt	17464 <__assert_fail@plt+0x5fac>
   1740c:	add	r3, r4, #8
   17410:	str	r2, [sp, #36]	; 0x24
   17414:	rsb	r2, r2, #1
   17418:	cmp	r5, r3
   1741c:	beq	17530 <__assert_fail@plt+0x6078>
   17420:	mov	r1, #8
   17424:	mov	r0, r5
   17428:	mvn	r3, #-2147483648	; 0x80000000
   1742c:	str	r1, [sp]
   17430:	add	r1, sp, #36	; 0x24
   17434:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   17438:	mov	r5, r0
   1743c:	str	r0, [r4]
   17440:	ldr	r0, [r4, #4]
   17444:	mov	r1, #0
   17448:	ldr	r2, [sp, #36]	; 0x24
   1744c:	sub	r2, r2, r0
   17450:	add	r0, r5, r0, lsl #3
   17454:	lsl	r2, r2, #3
   17458:	bl	11368 <memset@plt>
   1745c:	ldr	r3, [sp, #36]	; 0x24
   17460:	str	r3, [r4, #4]
   17464:	movw	r4, #57812	; 0xe1d4
   17468:	movt	r4, #2
   1746c:	ldr	r9, [r5]
   17470:	add	fp, r4, #264	; 0x108
   17474:	mvn	r3, #0
   17478:	ldr	r7, [r4, #260]	; 0x104
   1747c:	mov	r2, sl
   17480:	ldr	r6, [r5, #4]
   17484:	str	fp, [sp, #8]
   17488:	mov	r1, r9
   1748c:	ldr	ip, [r4, #256]	; 0x100
   17490:	orr	r7, r7, #1
   17494:	ldr	lr, [r4, #300]	; 0x12c
   17498:	mov	r0, r6
   1749c:	str	ip, [sp]
   174a0:	str	r7, [sp, #4]
   174a4:	str	lr, [sp, #16]
   174a8:	ldr	ip, [r4, #296]	; 0x128
   174ac:	str	ip, [sp, #12]
   174b0:	bl	153c4 <__assert_fail@plt+0x3f0c>
   174b4:	cmp	r9, r0
   174b8:	bhi	17508 <__assert_fail@plt+0x6050>
   174bc:	add	r9, r0, #1
   174c0:	cmp	r6, r4
   174c4:	str	r9, [r5]
   174c8:	beq	174d4 <__assert_fail@plt+0x601c>
   174cc:	mov	r0, r6
   174d0:	bl	13fe8 <__assert_fail@plt+0x2b30>
   174d4:	mov	r0, r9
   174d8:	bl	1a310 <__assert_fail@plt+0x8e58>
   174dc:	ldr	r3, [r4, #256]	; 0x100
   174e0:	mov	r2, sl
   174e4:	mov	r1, r9
   174e8:	mov	r6, r0
   174ec:	ldr	lr, [r4, #296]	; 0x128
   174f0:	ldr	ip, [r4, #300]	; 0x12c
   174f4:	str	r0, [r5, #4]
   174f8:	stm	sp, {r3, r7, fp, lr}
   174fc:	mvn	r3, #0
   17500:	str	ip, [sp, #16]
   17504:	bl	153c4 <__assert_fail@plt+0x3f0c>
   17508:	ldr	r3, [sp, #28]
   1750c:	mov	r0, r6
   17510:	str	r3, [r8]
   17514:	add	sp, sp, #44	; 0x2c
   17518:	ldrd	r4, [sp]
   1751c:	ldrd	r6, [sp, #8]
   17520:	ldrd	r8, [sp, #16]
   17524:	ldrd	sl, [sp, #24]
   17528:	add	sp, sp, #32
   1752c:	pop	{pc}		; (ldr pc, [sp], #4)
   17530:	mov	r0, #8
   17534:	mvn	r3, #-2147483648	; 0x80000000
   17538:	add	r1, sp, #36	; 0x24
   1753c:	str	r0, [sp]
   17540:	mov	r0, #0
   17544:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   17548:	ldrd	r2, [r4, #8]
   1754c:	mov	r5, r0
   17550:	str	r0, [r4]
   17554:	strd	r2, [r0]
   17558:	b	17440 <__assert_fail@plt+0x5f88>
   1755c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17560:	movw	r4, #57692	; 0xe15c
   17564:	movt	r4, #2
   17568:	strd	r6, [sp, #8]
   1756c:	strd	r8, [sp, #16]
   17570:	strd	sl, [sp, #24]
   17574:	mov	sl, r0
   17578:	mov	fp, r1
   1757c:	str	lr, [sp, #32]
   17580:	sub	sp, sp, #44	; 0x2c
   17584:	bl	11338 <__errno_location@plt>
   17588:	ldr	r3, [r0]
   1758c:	mov	r8, r0
   17590:	ldr	r2, [r4, #4]
   17594:	ldr	r5, [r4]
   17598:	str	r3, [sp, #28]
   1759c:	cmp	r2, #0
   175a0:	bgt	175fc <__assert_fail@plt+0x6144>
   175a4:	add	r3, r4, #8
   175a8:	str	r2, [sp, #36]	; 0x24
   175ac:	rsb	r2, r2, #1
   175b0:	cmp	r5, r3
   175b4:	beq	176d8 <__assert_fail@plt+0x6220>
   175b8:	mov	r1, #8
   175bc:	mov	r0, r5
   175c0:	mvn	r3, #-2147483648	; 0x80000000
   175c4:	str	r1, [sp]
   175c8:	add	r1, sp, #36	; 0x24
   175cc:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   175d0:	mov	r5, r0
   175d4:	str	r0, [r4]
   175d8:	ldr	r0, [r4, #4]
   175dc:	mov	r1, #0
   175e0:	ldr	r2, [sp, #36]	; 0x24
   175e4:	sub	r2, r2, r0
   175e8:	add	r0, r5, r0, lsl #3
   175ec:	lsl	r2, r2, #3
   175f0:	bl	11368 <memset@plt>
   175f4:	ldr	r3, [sp, #36]	; 0x24
   175f8:	str	r3, [r4, #4]
   175fc:	movw	r4, #57812	; 0xe1d4
   17600:	movt	r4, #2
   17604:	ldr	r9, [r5]
   17608:	add	r0, r4, #264	; 0x108
   1760c:	mov	r3, fp
   17610:	ldr	r7, [r4, #260]	; 0x104
   17614:	mov	r2, sl
   17618:	ldr	r6, [r5, #4]
   1761c:	str	r0, [sp, #8]
   17620:	mov	r1, r9
   17624:	ldr	ip, [r4, #256]	; 0x100
   17628:	orr	r7, r7, #1
   1762c:	ldr	lr, [r4, #300]	; 0x12c
   17630:	mov	r0, r6
   17634:	str	ip, [sp]
   17638:	str	r7, [sp, #4]
   1763c:	str	lr, [sp, #16]
   17640:	ldr	ip, [r4, #296]	; 0x128
   17644:	str	ip, [sp, #12]
   17648:	bl	153c4 <__assert_fail@plt+0x3f0c>
   1764c:	cmp	r9, r0
   17650:	bhi	176b0 <__assert_fail@plt+0x61f8>
   17654:	add	r9, r0, #1
   17658:	cmp	r6, r4
   1765c:	str	r9, [r5]
   17660:	beq	1766c <__assert_fail@plt+0x61b4>
   17664:	mov	r0, r6
   17668:	bl	13fe8 <__assert_fail@plt+0x2b30>
   1766c:	mov	r0, r9
   17670:	bl	1a310 <__assert_fail@plt+0x8e58>
   17674:	ldr	ip, [r4, #256]	; 0x100
   17678:	mov	r1, r9
   1767c:	mov	r3, fp
   17680:	mov	r2, sl
   17684:	mov	r6, r0
   17688:	ldr	r9, [r4, #296]	; 0x128
   1768c:	ldr	lr, [r4, #300]	; 0x12c
   17690:	str	r0, [r5, #4]
   17694:	str	ip, [sp]
   17698:	ldr	ip, [pc, #100]	; 17704 <__assert_fail@plt+0x624c>
   1769c:	str	r7, [sp, #4]
   176a0:	str	ip, [sp, #8]
   176a4:	str	r9, [sp, #12]
   176a8:	str	lr, [sp, #16]
   176ac:	bl	153c4 <__assert_fail@plt+0x3f0c>
   176b0:	ldr	r3, [sp, #28]
   176b4:	mov	r0, r6
   176b8:	str	r3, [r8]
   176bc:	add	sp, sp, #44	; 0x2c
   176c0:	ldrd	r4, [sp]
   176c4:	ldrd	r6, [sp, #8]
   176c8:	ldrd	r8, [sp, #16]
   176cc:	ldrd	sl, [sp, #24]
   176d0:	add	sp, sp, #32
   176d4:	pop	{pc}		; (ldr pc, [sp], #4)
   176d8:	mov	r0, #8
   176dc:	mvn	r3, #-2147483648	; 0x80000000
   176e0:	add	r1, sp, #36	; 0x24
   176e4:	str	r0, [sp]
   176e8:	mov	r0, #0
   176ec:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   176f0:	ldrd	r2, [r4, #8]
   176f4:	mov	r5, r0
   176f8:	str	r0, [r4]
   176fc:	strd	r2, [r0]
   17700:	b	175d8 <__assert_fail@plt+0x6120>
   17704:	ldrdeq	lr, [r2], -ip
   17708:	strd	r4, [sp, #-20]!	; 0xffffffec
   1770c:	mov	r4, #0
   17710:	mov	r5, #0
   17714:	strd	r6, [sp, #8]
   17718:	cmp	r1, #10
   1771c:	str	lr, [sp, #16]
   17720:	sub	sp, sp, #100	; 0x64
   17724:	strd	r4, [sp, #48]	; 0x30
   17728:	beq	17770 <__assert_fail@plt+0x62b8>
   1772c:	mov	r3, sp
   17730:	strd	r4, [sp, #8]
   17734:	str	r1, [sp, #48]	; 0x30
   17738:	mov	r1, r2
   1773c:	mvn	r2, #0
   17740:	ldrd	r6, [sp, #48]	; 0x30
   17744:	strd	r6, [sp]
   17748:	strd	r4, [sp, #16]
   1774c:	strd	r4, [sp, #24]
   17750:	strd	r4, [sp, #32]
   17754:	strd	r4, [sp, #40]	; 0x28
   17758:	bl	16db0 <__assert_fail@plt+0x58f8>
   1775c:	add	sp, sp, #100	; 0x64
   17760:	ldrd	r4, [sp]
   17764:	ldrd	r6, [sp, #8]
   17768:	add	sp, sp, #16
   1776c:	pop	{pc}		; (ldr pc, [sp], #4)
   17770:	bl	114a0 <abort@plt>
   17774:	strd	r4, [sp, #-20]!	; 0xffffffec
   17778:	mov	r4, #0
   1777c:	mov	r5, #0
   17780:	strd	r6, [sp, #8]
   17784:	cmp	r1, #10
   17788:	str	lr, [sp, #16]
   1778c:	sub	sp, sp, #100	; 0x64
   17790:	strd	r4, [sp, #48]	; 0x30
   17794:	beq	177e0 <__assert_fail@plt+0x6328>
   17798:	mov	ip, r2
   1779c:	mov	r2, r3
   177a0:	strd	r4, [sp, #8]
   177a4:	str	r1, [sp, #48]	; 0x30
   177a8:	mov	r3, sp
   177ac:	mov	r1, ip
   177b0:	ldrd	r6, [sp, #48]	; 0x30
   177b4:	strd	r6, [sp]
   177b8:	strd	r4, [sp, #16]
   177bc:	strd	r4, [sp, #24]
   177c0:	strd	r4, [sp, #32]
   177c4:	strd	r4, [sp, #40]	; 0x28
   177c8:	bl	16db0 <__assert_fail@plt+0x58f8>
   177cc:	add	sp, sp, #100	; 0x64
   177d0:	ldrd	r4, [sp]
   177d4:	ldrd	r6, [sp, #8]
   177d8:	add	sp, sp, #16
   177dc:	pop	{pc}		; (ldr pc, [sp], #4)
   177e0:	bl	114a0 <abort@plt>
   177e4:	mov	r2, #0
   177e8:	mov	r3, #0
   177ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   177f0:	strd	r6, [sp, #8]
   177f4:	cmp	r0, #10
   177f8:	strd	r8, [sp, #16]
   177fc:	strd	sl, [sp, #24]
   17800:	str	lr, [sp, #32]
   17804:	sub	sp, sp, #124	; 0x7c
   17808:	strd	r2, [sp, #72]	; 0x48
   1780c:	strd	r2, [sp, #80]	; 0x50
   17810:	strd	r2, [sp, #88]	; 0x58
   17814:	strd	r2, [sp, #96]	; 0x60
   17818:	strd	r2, [sp, #104]	; 0x68
   1781c:	strd	r2, [sp, #112]	; 0x70
   17820:	beq	179c4 <__assert_fail@plt+0x650c>
   17824:	mov	r6, r1
   17828:	movw	r4, #57692	; 0xe15c
   1782c:	movt	r4, #2
   17830:	str	r0, [sp, #72]	; 0x48
   17834:	ldrd	r0, [sp, #72]	; 0x48
   17838:	strd	r0, [sp, #24]
   1783c:	strd	r2, [sp, #32]
   17840:	strd	r2, [sp, #40]	; 0x28
   17844:	strd	r2, [sp, #48]	; 0x30
   17848:	strd	r2, [sp, #56]	; 0x38
   1784c:	strd	r2, [sp, #64]	; 0x40
   17850:	bl	11338 <__errno_location@plt>
   17854:	mov	r8, r0
   17858:	ldr	r5, [r4]
   1785c:	ldr	r2, [r4, #4]
   17860:	ldr	r9, [r0]
   17864:	cmp	r2, #0
   17868:	bgt	178c4 <__assert_fail@plt+0x640c>
   1786c:	add	r3, r4, #8
   17870:	str	r2, [sp, #72]	; 0x48
   17874:	rsb	r2, r2, #1
   17878:	cmp	r5, r3
   1787c:	beq	17998 <__assert_fail@plt+0x64e0>
   17880:	mov	r3, #8
   17884:	mov	r0, r5
   17888:	add	r1, sp, #72	; 0x48
   1788c:	str	r3, [sp]
   17890:	mvn	r3, #-2147483648	; 0x80000000
   17894:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   17898:	mov	r5, r0
   1789c:	str	r0, [r4]
   178a0:	ldr	r0, [r4, #4]
   178a4:	mov	r1, #0
   178a8:	ldr	r2, [sp, #72]	; 0x48
   178ac:	sub	r2, r2, r0
   178b0:	add	r0, r5, r0, lsl #3
   178b4:	lsl	r2, r2, #3
   178b8:	bl	11368 <memset@plt>
   178bc:	ldr	r3, [sp, #72]	; 0x48
   178c0:	str	r3, [r4, #4]
   178c4:	ldr	sl, [r5]
   178c8:	add	r0, sp, #32
   178cc:	mvn	r3, #0
   178d0:	mov	r2, r6
   178d4:	ldr	r7, [sp, #28]
   178d8:	ldr	r4, [r5, #4]
   178dc:	mov	r1, sl
   178e0:	str	r0, [sp, #8]
   178e4:	ldr	lr, [sp, #24]
   178e8:	orr	r7, r7, #1
   178ec:	ldr	ip, [sp, #64]	; 0x40
   178f0:	mov	r0, r4
   178f4:	ldr	fp, [sp, #68]	; 0x44
   178f8:	str	lr, [sp]
   178fc:	str	r7, [sp, #4]
   17900:	str	ip, [sp, #12]
   17904:	str	fp, [sp, #16]
   17908:	bl	153c4 <__assert_fail@plt+0x3f0c>
   1790c:	cmp	sl, r0
   17910:	bhi	17974 <__assert_fail@plt+0x64bc>
   17914:	add	sl, r0, #1
   17918:	movw	r3, #57812	; 0xe1d4
   1791c:	movt	r3, #2
   17920:	cmp	r4, r3
   17924:	str	sl, [r5]
   17928:	beq	17934 <__assert_fail@plt+0x647c>
   1792c:	mov	r0, r4
   17930:	bl	13fe8 <__assert_fail@plt+0x2b30>
   17934:	mov	r0, sl
   17938:	bl	1a310 <__assert_fail@plt+0x8e58>
   1793c:	ldr	r3, [sp, #24]
   17940:	mov	r2, r6
   17944:	mov	r1, sl
   17948:	mov	r4, r0
   1794c:	ldr	lr, [sp, #64]	; 0x40
   17950:	ldr	ip, [sp, #68]	; 0x44
   17954:	str	r0, [r5, #4]
   17958:	add	r5, sp, #32
   1795c:	stm	sp, {r3, r7}
   17960:	mvn	r3, #0
   17964:	str	r5, [sp, #8]
   17968:	str	lr, [sp, #12]
   1796c:	str	ip, [sp, #16]
   17970:	bl	153c4 <__assert_fail@plt+0x3f0c>
   17974:	mov	r0, r4
   17978:	str	r9, [r8]
   1797c:	add	sp, sp, #124	; 0x7c
   17980:	ldrd	r4, [sp]
   17984:	ldrd	r6, [sp, #8]
   17988:	ldrd	r8, [sp, #16]
   1798c:	ldrd	sl, [sp, #24]
   17990:	add	sp, sp, #32
   17994:	pop	{pc}		; (ldr pc, [sp], #4)
   17998:	mov	r0, #8
   1799c:	mvn	r3, #-2147483648	; 0x80000000
   179a0:	add	r1, sp, #72	; 0x48
   179a4:	str	r0, [sp]
   179a8:	mov	r0, #0
   179ac:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   179b0:	ldrd	r2, [r4, #8]
   179b4:	mov	r5, r0
   179b8:	str	r0, [r4]
   179bc:	strd	r2, [r0]
   179c0:	b	178a0 <__assert_fail@plt+0x63e8>
   179c4:	bl	114a0 <abort@plt>
   179c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   179cc:	cmp	r0, #10
   179d0:	strd	r6, [sp, #8]
   179d4:	mov	r6, #0
   179d8:	mov	r7, #0
   179dc:	strd	r8, [sp, #16]
   179e0:	strd	sl, [sp, #24]
   179e4:	str	lr, [sp, #32]
   179e8:	sub	sp, sp, #124	; 0x7c
   179ec:	strd	r6, [sp, #72]	; 0x48
   179f0:	strd	r6, [sp, #80]	; 0x50
   179f4:	strd	r6, [sp, #88]	; 0x58
   179f8:	strd	r6, [sp, #96]	; 0x60
   179fc:	strd	r6, [sp, #104]	; 0x68
   17a00:	strd	r6, [sp, #112]	; 0x70
   17a04:	beq	17bb0 <__assert_fail@plt+0x66f8>
   17a08:	mov	sl, r2
   17a0c:	movw	r5, #57692	; 0xe15c
   17a10:	movt	r5, #2
   17a14:	str	r0, [sp, #72]	; 0x48
   17a18:	mov	r9, r1
   17a1c:	ldrd	r2, [sp, #72]	; 0x48
   17a20:	strd	r2, [sp, #24]
   17a24:	strd	r6, [sp, #32]
   17a28:	strd	r6, [sp, #40]	; 0x28
   17a2c:	strd	r6, [sp, #48]	; 0x30
   17a30:	strd	r6, [sp, #56]	; 0x38
   17a34:	strd	r6, [sp, #64]	; 0x40
   17a38:	bl	11338 <__errno_location@plt>
   17a3c:	mov	r7, r0
   17a40:	ldr	r4, [r5]
   17a44:	ldr	r2, [r5, #4]
   17a48:	ldr	fp, [r0]
   17a4c:	cmp	r2, #0
   17a50:	bgt	17aac <__assert_fail@plt+0x65f4>
   17a54:	add	r3, r5, #8
   17a58:	str	r2, [sp, #72]	; 0x48
   17a5c:	rsb	r2, r2, #1
   17a60:	cmp	r4, r3
   17a64:	beq	17b84 <__assert_fail@plt+0x66cc>
   17a68:	mov	r3, #8
   17a6c:	mov	r0, r4
   17a70:	add	r1, sp, #72	; 0x48
   17a74:	str	r3, [sp]
   17a78:	mvn	r3, #-2147483648	; 0x80000000
   17a7c:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   17a80:	mov	r4, r0
   17a84:	str	r0, [r5]
   17a88:	ldr	r0, [r5, #4]
   17a8c:	mov	r1, #0
   17a90:	ldr	r2, [sp, #72]	; 0x48
   17a94:	sub	r2, r2, r0
   17a98:	add	r0, r4, r0, lsl #3
   17a9c:	lsl	r2, r2, #3
   17aa0:	bl	11368 <memset@plt>
   17aa4:	ldr	r3, [sp, #72]	; 0x48
   17aa8:	str	r3, [r5, #4]
   17aac:	ldr	ip, [sp, #24]
   17ab0:	add	r0, sp, #32
   17ab4:	mov	r3, sl
   17ab8:	mov	r2, r9
   17abc:	ldr	r6, [sp, #28]
   17ac0:	ldr	r8, [r4]
   17ac4:	ldr	r5, [r4, #4]
   17ac8:	str	ip, [sp]
   17acc:	orr	r6, r6, #1
   17ad0:	ldr	ip, [sp, #64]	; 0x40
   17ad4:	mov	r1, r8
   17ad8:	str	r6, [sp, #4]
   17adc:	ldr	lr, [sp, #68]	; 0x44
   17ae0:	str	r0, [sp, #8]
   17ae4:	mov	r0, r5
   17ae8:	str	ip, [sp, #12]
   17aec:	str	lr, [sp, #16]
   17af0:	bl	153c4 <__assert_fail@plt+0x3f0c>
   17af4:	cmp	r8, r0
   17af8:	bhi	17b60 <__assert_fail@plt+0x66a8>
   17afc:	add	r8, r0, #1
   17b00:	movw	r3, #57812	; 0xe1d4
   17b04:	movt	r3, #2
   17b08:	cmp	r5, r3
   17b0c:	str	r8, [r4]
   17b10:	beq	17b1c <__assert_fail@plt+0x6664>
   17b14:	mov	r0, r5
   17b18:	bl	13fe8 <__assert_fail@plt+0x2b30>
   17b1c:	mov	r0, r8
   17b20:	bl	1a310 <__assert_fail@plt+0x8e58>
   17b24:	ldr	lr, [sp, #24]
   17b28:	mov	r1, r8
   17b2c:	mov	r3, sl
   17b30:	mov	r2, r9
   17b34:	mov	r5, r0
   17b38:	ldr	r8, [sp, #64]	; 0x40
   17b3c:	ldr	ip, [sp, #68]	; 0x44
   17b40:	str	r0, [r4, #4]
   17b44:	str	lr, [sp]
   17b48:	add	lr, sp, #32
   17b4c:	str	r6, [sp, #4]
   17b50:	str	lr, [sp, #8]
   17b54:	str	r8, [sp, #12]
   17b58:	str	ip, [sp, #16]
   17b5c:	bl	153c4 <__assert_fail@plt+0x3f0c>
   17b60:	mov	r0, r5
   17b64:	str	fp, [r7]
   17b68:	add	sp, sp, #124	; 0x7c
   17b6c:	ldrd	r4, [sp]
   17b70:	ldrd	r6, [sp, #8]
   17b74:	ldrd	r8, [sp, #16]
   17b78:	ldrd	sl, [sp, #24]
   17b7c:	add	sp, sp, #32
   17b80:	pop	{pc}		; (ldr pc, [sp], #4)
   17b84:	mov	r0, #8
   17b88:	mvn	r3, #-2147483648	; 0x80000000
   17b8c:	add	r1, sp, #72	; 0x48
   17b90:	str	r0, [sp]
   17b94:	mov	r0, #0
   17b98:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   17b9c:	ldrd	r2, [r5, #8]
   17ba0:	mov	r4, r0
   17ba4:	str	r0, [r5]
   17ba8:	strd	r2, [r0]
   17bac:	b	17a88 <__assert_fail@plt+0x65d0>
   17bb0:	bl	114a0 <abort@plt>
   17bb4:	ldr	r3, [pc, #492]	; 17da8 <__assert_fail@plt+0x68f0>
   17bb8:	lsr	ip, r2, #5
   17bbc:	and	r2, r2, #31
   17bc0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17bc4:	movw	r5, #57692	; 0xe15c
   17bc8:	movt	r5, #2
   17bcc:	strd	r6, [sp, #8]
   17bd0:	strd	r8, [sp, #16]
   17bd4:	strd	sl, [sp, #24]
   17bd8:	mov	sl, r0
   17bdc:	mov	fp, r1
   17be0:	ldrd	r0, [r3]
   17be4:	str	lr, [sp, #32]
   17be8:	sub	sp, sp, #92	; 0x5c
   17bec:	ldrd	r8, [r3, #8]
   17bf0:	add	r6, sp, #48	; 0x30
   17bf4:	strd	r0, [sp, #40]	; 0x28
   17bf8:	ldrd	r0, [r3, #16]
   17bfc:	strd	r8, [sp, #48]	; 0x30
   17c00:	ldrd	r8, [r3, #24]
   17c04:	strd	r0, [sp, #56]	; 0x38
   17c08:	ldrd	r0, [r3, #32]
   17c0c:	strd	r8, [sp, #64]	; 0x40
   17c10:	ldrd	r8, [r3, #40]	; 0x28
   17c14:	strd	r0, [sp, #72]	; 0x48
   17c18:	strd	r8, [sp, #80]	; 0x50
   17c1c:	ldr	r3, [r6, ip, lsl #2]
   17c20:	mvn	r1, r3, lsr r2
   17c24:	and	r1, r1, #1
   17c28:	eor	r2, r3, r1, lsl r2
   17c2c:	str	r2, [r6, ip, lsl #2]
   17c30:	bl	11338 <__errno_location@plt>
   17c34:	ldr	r3, [r0]
   17c38:	mov	r8, r0
   17c3c:	ldr	r2, [r5, #4]
   17c40:	ldr	r4, [r5]
   17c44:	str	r3, [sp, #28]
   17c48:	cmp	r2, #0
   17c4c:	bgt	17ca8 <__assert_fail@plt+0x67f0>
   17c50:	add	r3, r5, #8
   17c54:	str	r2, [sp, #36]	; 0x24
   17c58:	rsb	r2, r2, #1
   17c5c:	cmp	r4, r3
   17c60:	beq	17d7c <__assert_fail@plt+0x68c4>
   17c64:	mov	r1, #8
   17c68:	mov	r0, r4
   17c6c:	mvn	r3, #-2147483648	; 0x80000000
   17c70:	str	r1, [sp]
   17c74:	add	r1, sp, #36	; 0x24
   17c78:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   17c7c:	mov	r4, r0
   17c80:	str	r0, [r5]
   17c84:	ldr	r0, [r5, #4]
   17c88:	mov	r1, #0
   17c8c:	ldr	r2, [sp, #36]	; 0x24
   17c90:	sub	r2, r2, r0
   17c94:	add	r0, r4, r0, lsl #3
   17c98:	lsl	r2, r2, #3
   17c9c:	bl	11368 <memset@plt>
   17ca0:	ldr	r3, [sp, #36]	; 0x24
   17ca4:	str	r3, [r5, #4]
   17ca8:	ldr	ip, [sp, #40]	; 0x28
   17cac:	mov	r3, fp
   17cb0:	mov	r2, sl
   17cb4:	ldr	r7, [sp, #44]	; 0x2c
   17cb8:	ldr	r9, [r4]
   17cbc:	ldr	r5, [r4, #4]
   17cc0:	str	ip, [sp]
   17cc4:	orr	r7, r7, #1
   17cc8:	ldr	ip, [sp, #80]	; 0x50
   17ccc:	mov	r1, r9
   17cd0:	str	r7, [sp, #4]
   17cd4:	ldr	lr, [sp, #84]	; 0x54
   17cd8:	mov	r0, r5
   17cdc:	str	r6, [sp, #8]
   17ce0:	str	ip, [sp, #12]
   17ce4:	str	lr, [sp, #16]
   17ce8:	bl	153c4 <__assert_fail@plt+0x3f0c>
   17cec:	cmp	r9, r0
   17cf0:	bhi	17d54 <__assert_fail@plt+0x689c>
   17cf4:	add	r9, r0, #1
   17cf8:	movw	r3, #57812	; 0xe1d4
   17cfc:	movt	r3, #2
   17d00:	cmp	r5, r3
   17d04:	str	r9, [r4]
   17d08:	beq	17d14 <__assert_fail@plt+0x685c>
   17d0c:	mov	r0, r5
   17d10:	bl	13fe8 <__assert_fail@plt+0x2b30>
   17d14:	mov	r0, r9
   17d18:	bl	1a310 <__assert_fail@plt+0x8e58>
   17d1c:	mov	r1, r9
   17d20:	ldr	ip, [sp, #40]	; 0x28
   17d24:	mov	r3, fp
   17d28:	mov	r2, sl
   17d2c:	mov	r5, r0
   17d30:	ldr	r9, [sp, #80]	; 0x50
   17d34:	ldr	lr, [sp, #84]	; 0x54
   17d38:	str	r0, [r4, #4]
   17d3c:	str	ip, [sp]
   17d40:	str	r7, [sp, #4]
   17d44:	str	r6, [sp, #8]
   17d48:	str	r9, [sp, #12]
   17d4c:	str	lr, [sp, #16]
   17d50:	bl	153c4 <__assert_fail@plt+0x3f0c>
   17d54:	ldr	r3, [sp, #28]
   17d58:	mov	r0, r5
   17d5c:	str	r3, [r8]
   17d60:	add	sp, sp, #92	; 0x5c
   17d64:	ldrd	r4, [sp]
   17d68:	ldrd	r6, [sp, #8]
   17d6c:	ldrd	r8, [sp, #16]
   17d70:	ldrd	sl, [sp, #24]
   17d74:	add	sp, sp, #32
   17d78:	pop	{pc}		; (ldr pc, [sp], #4)
   17d7c:	mov	r0, #8
   17d80:	mvn	r3, #-2147483648	; 0x80000000
   17d84:	add	r1, sp, #36	; 0x24
   17d88:	str	r0, [sp]
   17d8c:	mov	r0, #0
   17d90:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   17d94:	ldrd	r2, [r5, #8]
   17d98:	mov	r4, r0
   17d9c:	str	r0, [r5]
   17da0:	strd	r2, [r0]
   17da4:	b	17c84 <__assert_fail@plt+0x67cc>
   17da8:	ldrdeq	lr, [r2], -r4
   17dac:	ldr	ip, [pc, #476]	; 17f90 <__assert_fail@plt+0x6ad8>
   17db0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17db4:	movw	r4, #57692	; 0xe15c
   17db8:	movt	r4, #2
   17dbc:	ldrd	r2, [ip, #8]
   17dc0:	strd	r6, [sp, #8]
   17dc4:	lsr	r7, r1, #5
   17dc8:	mov	r6, r0
   17dcc:	strd	r8, [sp, #16]
   17dd0:	str	lr, [sp, #32]
   17dd4:	and	lr, r1, #31
   17dd8:	ldrd	r0, [ip]
   17ddc:	strd	sl, [sp, #24]
   17de0:	sub	sp, sp, #84	; 0x54
   17de4:	add	r5, sp, #40	; 0x28
   17de8:	strd	r0, [sp, #32]
   17dec:	strd	r2, [sp, #40]	; 0x28
   17df0:	ldrd	r0, [ip, #16]
   17df4:	ldrd	r2, [ip, #24]
   17df8:	strd	r0, [sp, #48]	; 0x30
   17dfc:	ldrd	r0, [ip, #32]
   17e00:	strd	r2, [sp, #56]	; 0x38
   17e04:	ldrd	r2, [ip, #40]	; 0x28
   17e08:	strd	r0, [sp, #64]	; 0x40
   17e0c:	strd	r2, [sp, #72]	; 0x48
   17e10:	ldr	r1, [r5, r7, lsl #2]
   17e14:	mvn	r3, r1, lsr lr
   17e18:	and	r3, r3, #1
   17e1c:	eor	r1, r1, r3, lsl lr
   17e20:	str	r1, [r5, r7, lsl #2]
   17e24:	bl	11338 <__errno_location@plt>
   17e28:	mov	r9, r0
   17e2c:	ldr	sl, [r0]
   17e30:	ldr	r2, [r4, #4]
   17e34:	ldr	r7, [r4]
   17e38:	cmp	r2, #0
   17e3c:	bgt	17e98 <__assert_fail@plt+0x69e0>
   17e40:	add	r3, r4, #8
   17e44:	str	r2, [sp, #28]
   17e48:	rsb	r2, r2, #1
   17e4c:	cmp	r7, r3
   17e50:	beq	17f64 <__assert_fail@plt+0x6aac>
   17e54:	mov	r1, #8
   17e58:	mov	r0, r7
   17e5c:	mvn	r3, #-2147483648	; 0x80000000
   17e60:	str	r1, [sp]
   17e64:	add	r1, sp, #28
   17e68:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   17e6c:	mov	r7, r0
   17e70:	str	r0, [r4]
   17e74:	ldr	r0, [r4, #4]
   17e78:	mov	r1, #0
   17e7c:	ldr	r2, [sp, #28]
   17e80:	sub	r2, r2, r0
   17e84:	add	r0, r7, r0, lsl #3
   17e88:	lsl	r2, r2, #3
   17e8c:	bl	11368 <memset@plt>
   17e90:	ldr	r3, [sp, #28]
   17e94:	str	r3, [r4, #4]
   17e98:	ldr	ip, [sp, #32]
   17e9c:	mvn	r3, #0
   17ea0:	mov	r2, r6
   17ea4:	ldr	r8, [sp, #36]	; 0x24
   17ea8:	ldr	fp, [r7]
   17eac:	ldr	r4, [r7, #4]
   17eb0:	str	ip, [sp]
   17eb4:	orr	r8, r8, #1
   17eb8:	ldr	ip, [sp, #72]	; 0x48
   17ebc:	mov	r1, fp
   17ec0:	str	r8, [sp, #4]
   17ec4:	ldr	lr, [sp, #76]	; 0x4c
   17ec8:	mov	r0, r4
   17ecc:	str	r5, [sp, #8]
   17ed0:	str	ip, [sp, #12]
   17ed4:	str	lr, [sp, #16]
   17ed8:	bl	153c4 <__assert_fail@plt+0x3f0c>
   17edc:	cmp	fp, r0
   17ee0:	bhi	17f40 <__assert_fail@plt+0x6a88>
   17ee4:	add	fp, r0, #1
   17ee8:	movw	r3, #57812	; 0xe1d4
   17eec:	movt	r3, #2
   17ef0:	cmp	r4, r3
   17ef4:	str	fp, [r7]
   17ef8:	beq	17f04 <__assert_fail@plt+0x6a4c>
   17efc:	mov	r0, r4
   17f00:	bl	13fe8 <__assert_fail@plt+0x2b30>
   17f04:	mov	r0, fp
   17f08:	bl	1a310 <__assert_fail@plt+0x8e58>
   17f0c:	ldr	r3, [sp, #32]
   17f10:	mov	r2, r6
   17f14:	mov	r1, fp
   17f18:	mov	r4, r0
   17f1c:	ldr	lr, [sp, #72]	; 0x48
   17f20:	ldr	ip, [sp, #76]	; 0x4c
   17f24:	str	r0, [r7, #4]
   17f28:	stm	sp, {r3, r8}
   17f2c:	mvn	r3, #0
   17f30:	str	r5, [sp, #8]
   17f34:	str	lr, [sp, #12]
   17f38:	str	ip, [sp, #16]
   17f3c:	bl	153c4 <__assert_fail@plt+0x3f0c>
   17f40:	mov	r0, r4
   17f44:	str	sl, [r9]
   17f48:	add	sp, sp, #84	; 0x54
   17f4c:	ldrd	r4, [sp]
   17f50:	ldrd	r6, [sp, #8]
   17f54:	ldrd	r8, [sp, #16]
   17f58:	ldrd	sl, [sp, #24]
   17f5c:	add	sp, sp, #32
   17f60:	pop	{pc}		; (ldr pc, [sp], #4)
   17f64:	mov	r0, #8
   17f68:	mvn	r3, #-2147483648	; 0x80000000
   17f6c:	add	r1, sp, #28
   17f70:	str	r0, [sp]
   17f74:	mov	r0, #0
   17f78:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   17f7c:	ldrd	r2, [r4, #8]
   17f80:	mov	r7, r0
   17f84:	str	r0, [r4]
   17f88:	strd	r2, [r0]
   17f8c:	b	17e74 <__assert_fail@plt+0x69bc>
   17f90:	ldrdeq	lr, [r2], -r4
   17f94:	ldr	ip, [pc, #472]	; 18174 <__assert_fail@plt+0x6cbc>
   17f98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17f9c:	mov	r5, r0
   17fa0:	movw	r4, #57692	; 0xe15c
   17fa4:	movt	r4, #2
   17fa8:	ldrd	r2, [ip]
   17fac:	ldrd	r0, [ip, #8]
   17fb0:	strd	r6, [sp, #8]
   17fb4:	strd	r8, [sp, #16]
   17fb8:	strd	sl, [sp, #24]
   17fbc:	str	lr, [sp, #32]
   17fc0:	sub	sp, sp, #84	; 0x54
   17fc4:	strd	r2, [sp, #32]
   17fc8:	strd	r0, [sp, #40]	; 0x28
   17fcc:	ldr	r6, [sp, #44]	; 0x2c
   17fd0:	ldrd	r2, [ip, #16]
   17fd4:	ldrd	r0, [ip, #24]
   17fd8:	mvn	lr, r6
   17fdc:	and	lr, lr, #67108864	; 0x4000000
   17fe0:	eor	lr, lr, r6
   17fe4:	ldrd	r6, [ip, #40]	; 0x28
   17fe8:	strd	r2, [sp, #48]	; 0x30
   17fec:	ldrd	r2, [ip, #32]
   17ff0:	str	lr, [sp, #44]	; 0x2c
   17ff4:	strd	r0, [sp, #56]	; 0x38
   17ff8:	strd	r2, [sp, #64]	; 0x40
   17ffc:	strd	r6, [sp, #72]	; 0x48
   18000:	bl	11338 <__errno_location@plt>
   18004:	mov	r8, r0
   18008:	ldr	r9, [r0]
   1800c:	ldr	r2, [r4, #4]
   18010:	ldr	r6, [r4]
   18014:	cmp	r2, #0
   18018:	bgt	18074 <__assert_fail@plt+0x6bbc>
   1801c:	add	r3, r4, #8
   18020:	str	r2, [sp, #28]
   18024:	rsb	r2, r2, #1
   18028:	cmp	r6, r3
   1802c:	beq	18148 <__assert_fail@plt+0x6c90>
   18030:	mov	r1, #8
   18034:	mov	r0, r6
   18038:	mvn	r3, #-2147483648	; 0x80000000
   1803c:	str	r1, [sp]
   18040:	add	r1, sp, #28
   18044:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   18048:	mov	r6, r0
   1804c:	str	r0, [r4]
   18050:	ldr	r0, [r4, #4]
   18054:	mov	r1, #0
   18058:	ldr	r2, [sp, #28]
   1805c:	sub	r2, r2, r0
   18060:	add	r0, r6, r0, lsl #3
   18064:	lsl	r2, r2, #3
   18068:	bl	11368 <memset@plt>
   1806c:	ldr	r3, [sp, #28]
   18070:	str	r3, [r4, #4]
   18074:	ldr	sl, [r6]
   18078:	add	r0, sp, #40	; 0x28
   1807c:	mvn	r3, #0
   18080:	mov	r2, r5
   18084:	ldr	r7, [sp, #36]	; 0x24
   18088:	ldr	r4, [r6, #4]
   1808c:	mov	r1, sl
   18090:	str	r0, [sp, #8]
   18094:	ldr	lr, [sp, #32]
   18098:	orr	r7, r7, #1
   1809c:	ldr	ip, [sp, #72]	; 0x48
   180a0:	mov	r0, r4
   180a4:	ldr	fp, [sp, #76]	; 0x4c
   180a8:	str	lr, [sp]
   180ac:	str	r7, [sp, #4]
   180b0:	str	ip, [sp, #12]
   180b4:	str	fp, [sp, #16]
   180b8:	bl	153c4 <__assert_fail@plt+0x3f0c>
   180bc:	cmp	sl, r0
   180c0:	bhi	18124 <__assert_fail@plt+0x6c6c>
   180c4:	add	sl, r0, #1
   180c8:	movw	r3, #57812	; 0xe1d4
   180cc:	movt	r3, #2
   180d0:	cmp	r4, r3
   180d4:	str	sl, [r6]
   180d8:	beq	180e4 <__assert_fail@plt+0x6c2c>
   180dc:	mov	r0, r4
   180e0:	bl	13fe8 <__assert_fail@plt+0x2b30>
   180e4:	mov	r0, sl
   180e8:	bl	1a310 <__assert_fail@plt+0x8e58>
   180ec:	ldr	r3, [sp, #32]
   180f0:	mov	r2, r5
   180f4:	add	r5, sp, #40	; 0x28
   180f8:	mov	r1, sl
   180fc:	mov	r4, r0
   18100:	ldr	lr, [sp, #72]	; 0x48
   18104:	ldr	ip, [sp, #76]	; 0x4c
   18108:	str	r0, [r6, #4]
   1810c:	stm	sp, {r3, r7}
   18110:	mvn	r3, #0
   18114:	str	r5, [sp, #8]
   18118:	str	lr, [sp, #12]
   1811c:	str	ip, [sp, #16]
   18120:	bl	153c4 <__assert_fail@plt+0x3f0c>
   18124:	mov	r0, r4
   18128:	str	r9, [r8]
   1812c:	add	sp, sp, #84	; 0x54
   18130:	ldrd	r4, [sp]
   18134:	ldrd	r6, [sp, #8]
   18138:	ldrd	r8, [sp, #16]
   1813c:	ldrd	sl, [sp, #24]
   18140:	add	sp, sp, #32
   18144:	pop	{pc}		; (ldr pc, [sp], #4)
   18148:	mov	r0, #8
   1814c:	mvn	r3, #-2147483648	; 0x80000000
   18150:	add	r1, sp, #28
   18154:	str	r0, [sp]
   18158:	mov	r0, #0
   1815c:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   18160:	ldrd	r2, [r4, #8]
   18164:	mov	r6, r0
   18168:	str	r0, [r4]
   1816c:	strd	r2, [r0]
   18170:	b	18050 <__assert_fail@plt+0x6b98>
   18174:	ldrdeq	lr, [r2], -r4
   18178:	ldr	ip, [pc, #480]	; 18360 <__assert_fail@plt+0x6ea8>
   1817c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18180:	mov	r5, r0
   18184:	movw	r4, #57692	; 0xe15c
   18188:	movt	r4, #2
   1818c:	ldrd	r2, [ip]
   18190:	strd	r6, [sp, #8]
   18194:	mov	r6, r1
   18198:	ldrd	r0, [ip, #8]
   1819c:	strd	r8, [sp, #16]
   181a0:	strd	sl, [sp, #24]
   181a4:	str	lr, [sp, #32]
   181a8:	sub	sp, sp, #84	; 0x54
   181ac:	ldrd	r8, [ip, #40]	; 0x28
   181b0:	strd	r2, [sp, #32]
   181b4:	strd	r0, [sp, #40]	; 0x28
   181b8:	ldrd	r2, [ip, #16]
   181bc:	ldr	r7, [sp, #44]	; 0x2c
   181c0:	ldrd	r0, [ip, #24]
   181c4:	strd	r2, [sp, #48]	; 0x30
   181c8:	ldrd	r2, [ip, #32]
   181cc:	mvn	lr, r7
   181d0:	and	lr, lr, #67108864	; 0x4000000
   181d4:	eor	lr, lr, r7
   181d8:	str	lr, [sp, #44]	; 0x2c
   181dc:	strd	r0, [sp, #56]	; 0x38
   181e0:	strd	r2, [sp, #64]	; 0x40
   181e4:	strd	r8, [sp, #72]	; 0x48
   181e8:	bl	11338 <__errno_location@plt>
   181ec:	mov	r9, r0
   181f0:	ldr	sl, [r0]
   181f4:	ldr	r2, [r4, #4]
   181f8:	ldr	r7, [r4]
   181fc:	cmp	r2, #0
   18200:	bgt	1825c <__assert_fail@plt+0x6da4>
   18204:	add	r3, r4, #8
   18208:	str	r2, [sp, #28]
   1820c:	rsb	r2, r2, #1
   18210:	cmp	r7, r3
   18214:	beq	18334 <__assert_fail@plt+0x6e7c>
   18218:	mov	r1, #8
   1821c:	mov	r0, r7
   18220:	mvn	r3, #-2147483648	; 0x80000000
   18224:	str	r1, [sp]
   18228:	add	r1, sp, #28
   1822c:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   18230:	mov	r7, r0
   18234:	str	r0, [r4]
   18238:	ldr	r0, [r4, #4]
   1823c:	mov	r1, #0
   18240:	ldr	r2, [sp, #28]
   18244:	sub	r2, r2, r0
   18248:	add	r0, r7, r0, lsl #3
   1824c:	lsl	r2, r2, #3
   18250:	bl	11368 <memset@plt>
   18254:	ldr	r3, [sp, #28]
   18258:	str	r3, [r4, #4]
   1825c:	ldr	ip, [sp, #32]
   18260:	add	r0, sp, #40	; 0x28
   18264:	mov	r3, r6
   18268:	mov	r2, r5
   1826c:	ldr	r8, [sp, #36]	; 0x24
   18270:	ldr	fp, [r7]
   18274:	ldr	r4, [r7, #4]
   18278:	str	ip, [sp]
   1827c:	orr	r8, r8, #1
   18280:	ldr	ip, [sp, #72]	; 0x48
   18284:	mov	r1, fp
   18288:	str	r8, [sp, #4]
   1828c:	ldr	lr, [sp, #76]	; 0x4c
   18290:	str	r0, [sp, #8]
   18294:	mov	r0, r4
   18298:	str	ip, [sp, #12]
   1829c:	str	lr, [sp, #16]
   182a0:	bl	153c4 <__assert_fail@plt+0x3f0c>
   182a4:	cmp	fp, r0
   182a8:	bhi	18310 <__assert_fail@plt+0x6e58>
   182ac:	add	fp, r0, #1
   182b0:	movw	r3, #57812	; 0xe1d4
   182b4:	movt	r3, #2
   182b8:	cmp	r4, r3
   182bc:	str	fp, [r7]
   182c0:	beq	182cc <__assert_fail@plt+0x6e14>
   182c4:	mov	r0, r4
   182c8:	bl	13fe8 <__assert_fail@plt+0x2b30>
   182cc:	mov	r0, fp
   182d0:	bl	1a310 <__assert_fail@plt+0x8e58>
   182d4:	ldr	lr, [sp, #32]
   182d8:	mov	r2, r5
   182dc:	mov	r3, r6
   182e0:	mov	r1, fp
   182e4:	mov	r4, r0
   182e8:	ldr	r5, [sp, #72]	; 0x48
   182ec:	ldr	ip, [sp, #76]	; 0x4c
   182f0:	str	r0, [r7, #4]
   182f4:	str	lr, [sp]
   182f8:	add	lr, sp, #40	; 0x28
   182fc:	str	r8, [sp, #4]
   18300:	str	lr, [sp, #8]
   18304:	str	r5, [sp, #12]
   18308:	str	ip, [sp, #16]
   1830c:	bl	153c4 <__assert_fail@plt+0x3f0c>
   18310:	mov	r0, r4
   18314:	str	sl, [r9]
   18318:	add	sp, sp, #84	; 0x54
   1831c:	ldrd	r4, [sp]
   18320:	ldrd	r6, [sp, #8]
   18324:	ldrd	r8, [sp, #16]
   18328:	ldrd	sl, [sp, #24]
   1832c:	add	sp, sp, #32
   18330:	pop	{pc}		; (ldr pc, [sp], #4)
   18334:	mov	r0, #8
   18338:	mvn	r3, #-2147483648	; 0x80000000
   1833c:	add	r1, sp, #28
   18340:	str	r0, [sp]
   18344:	mov	r0, #0
   18348:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   1834c:	ldrd	r2, [r4, #8]
   18350:	mov	r7, r0
   18354:	str	r0, [r4]
   18358:	strd	r2, [r0]
   1835c:	b	18238 <__assert_fail@plt+0x6d80>
   18360:	ldrdeq	lr, [r2], -r4
   18364:	strd	r4, [sp, #-12]!
   18368:	mov	r4, #0
   1836c:	mov	r5, #0
   18370:	str	lr, [sp, #8]
   18374:	sub	sp, sp, #100	; 0x64
   18378:	cmp	r1, #10
   1837c:	strd	r4, [sp]
   18380:	strd	r4, [sp, #8]
   18384:	strd	r4, [sp, #16]
   18388:	strd	r4, [sp, #24]
   1838c:	strd	r4, [sp, #32]
   18390:	strd	r4, [sp, #40]	; 0x28
   18394:	beq	183c4 <__assert_fail@plt+0x6f0c>
   18398:	mov	ip, #67108864	; 0x4000000
   1839c:	mov	r3, sp
   183a0:	str	r1, [sp]
   183a4:	mov	r1, r2
   183a8:	mvn	r2, #0
   183ac:	str	ip, [sp, #12]
   183b0:	bl	16db0 <__assert_fail@plt+0x58f8>
   183b4:	add	sp, sp, #100	; 0x64
   183b8:	ldrd	r4, [sp]
   183bc:	add	sp, sp, #8
   183c0:	pop	{pc}		; (ldr pc, [sp], #4)
   183c4:	bl	114a0 <abort@plt>
   183c8:	ldr	ip, [pc, #156]	; 1846c <__assert_fail@plt+0x6fb4>
   183cc:	cmp	r2, #0
   183d0:	cmpne	r1, #0
   183d4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   183d8:	strd	r6, [sp, #8]
   183dc:	mov	r6, r2
   183e0:	str	r8, [sp, #16]
   183e4:	mov	r8, r3
   183e8:	strd	sl, [sp, #20]
   183ec:	ldrd	r4, [ip]
   183f0:	str	lr, [sp, #28]
   183f4:	sub	sp, sp, #48	; 0x30
   183f8:	mov	lr, #10
   183fc:	ldrd	r2, [ip, #8]
   18400:	ldrd	sl, [ip, #16]
   18404:	strd	r4, [sp]
   18408:	ldrd	r4, [ip, #32]
   1840c:	str	lr, [sp]
   18410:	strd	r2, [sp, #8]
   18414:	strd	sl, [sp, #16]
   18418:	ldrd	r2, [ip, #24]
   1841c:	ldrd	sl, [ip, #40]	; 0x28
   18420:	strd	r2, [sp, #24]
   18424:	strd	r4, [sp, #32]
   18428:	strd	sl, [sp, #40]	; 0x28
   1842c:	beq	18468 <__assert_fail@plt+0x6fb0>
   18430:	mov	r7, r1
   18434:	mov	r3, sp
   18438:	mov	r1, r8
   1843c:	mvn	r2, #0
   18440:	str	r7, [sp, #40]	; 0x28
   18444:	str	r6, [sp, #44]	; 0x2c
   18448:	bl	16db0 <__assert_fail@plt+0x58f8>
   1844c:	add	sp, sp, #48	; 0x30
   18450:	ldrd	r4, [sp]
   18454:	ldrd	r6, [sp, #8]
   18458:	ldr	r8, [sp, #16]
   1845c:	ldrd	sl, [sp, #20]
   18460:	add	sp, sp, #28
   18464:	pop	{pc}		; (ldr pc, [sp], #4)
   18468:	bl	114a0 <abort@plt>
   1846c:	ldrdeq	lr, [r2], -r4
   18470:	ldr	ip, [pc, #156]	; 18514 <__assert_fail@plt+0x705c>
   18474:	cmp	r2, #0
   18478:	cmpne	r1, #0
   1847c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18480:	strd	r6, [sp, #8]
   18484:	mov	r6, r2
   18488:	str	r8, [sp, #16]
   1848c:	mov	r8, r3
   18490:	strd	sl, [sp, #20]
   18494:	ldrd	r4, [ip]
   18498:	str	lr, [sp, #28]
   1849c:	sub	sp, sp, #48	; 0x30
   184a0:	mov	lr, #10
   184a4:	ldrd	r2, [ip, #8]
   184a8:	ldrd	sl, [ip, #16]
   184ac:	strd	r4, [sp]
   184b0:	ldrd	r4, [ip, #32]
   184b4:	str	lr, [sp]
   184b8:	strd	r2, [sp, #8]
   184bc:	strd	sl, [sp, #16]
   184c0:	ldrd	r2, [ip, #24]
   184c4:	ldrd	sl, [ip, #40]	; 0x28
   184c8:	strd	r2, [sp, #24]
   184cc:	strd	r4, [sp, #32]
   184d0:	strd	sl, [sp, #40]	; 0x28
   184d4:	beq	18510 <__assert_fail@plt+0x7058>
   184d8:	ldr	r2, [sp, #80]	; 0x50
   184dc:	mov	r7, r1
   184e0:	mov	r3, sp
   184e4:	mov	r1, r8
   184e8:	str	r7, [sp, #40]	; 0x28
   184ec:	str	r6, [sp, #44]	; 0x2c
   184f0:	bl	16db0 <__assert_fail@plt+0x58f8>
   184f4:	add	sp, sp, #48	; 0x30
   184f8:	ldrd	r4, [sp]
   184fc:	ldrd	r6, [sp, #8]
   18500:	ldr	r8, [sp, #16]
   18504:	ldrd	sl, [sp, #20]
   18508:	add	sp, sp, #28
   1850c:	pop	{pc}		; (ldr pc, [sp], #4)
   18510:	bl	114a0 <abort@plt>
   18514:	ldrdeq	lr, [r2], -r4
   18518:	ldr	ip, [pc, #512]	; 18720 <__assert_fail@plt+0x7268>
   1851c:	cmp	r0, #0
   18520:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18524:	ldrd	r4, [ip, #16]
   18528:	strd	r6, [sp, #8]
   1852c:	clz	r6, r1
   18530:	mov	r7, r1
   18534:	strd	r8, [sp, #16]
   18538:	mov	r8, r0
   1853c:	lsr	r6, r6, #5
   18540:	strd	sl, [sp, #24]
   18544:	mov	fp, r2
   18548:	mov	sl, #10
   1854c:	ldrd	r2, [ip]
   18550:	moveq	r6, #1
   18554:	str	lr, [sp, #32]
   18558:	sub	sp, sp, #92	; 0x5c
   1855c:	cmp	r6, #0
   18560:	ldrd	r0, [ip, #8]
   18564:	strd	r2, [sp, #40]	; 0x28
   18568:	strd	r4, [sp, #56]	; 0x38
   1856c:	ldrd	r2, [ip, #24]
   18570:	strd	r0, [sp, #48]	; 0x30
   18574:	ldrd	r0, [ip, #32]
   18578:	str	sl, [sp, #40]	; 0x28
   1857c:	ldrd	r4, [ip, #40]	; 0x28
   18580:	strd	r2, [sp, #64]	; 0x40
   18584:	strd	r0, [sp, #72]	; 0x48
   18588:	strd	r4, [sp, #80]	; 0x50
   1858c:	bne	1871c <__assert_fail@plt+0x7264>
   18590:	movw	r5, #57692	; 0xe15c
   18594:	movt	r5, #2
   18598:	str	r8, [sp, #80]	; 0x50
   1859c:	str	r7, [sp, #84]	; 0x54
   185a0:	bl	11338 <__errno_location@plt>
   185a4:	ldr	r3, [r0]
   185a8:	mov	r9, r0
   185ac:	ldr	r2, [r5, #4]
   185b0:	ldr	r4, [r5]
   185b4:	str	r3, [sp, #28]
   185b8:	cmp	r2, #0
   185bc:	movgt	r1, sl
   185c0:	bgt	18628 <__assert_fail@plt+0x7170>
   185c4:	add	r3, r5, #8
   185c8:	str	r2, [sp, #36]	; 0x24
   185cc:	rsb	r2, r2, #1
   185d0:	cmp	r4, r3
   185d4:	beq	186f0 <__assert_fail@plt+0x7238>
   185d8:	mov	r1, #8
   185dc:	mov	r0, r4
   185e0:	mvn	r3, #-2147483648	; 0x80000000
   185e4:	str	r1, [sp]
   185e8:	add	r1, sp, #36	; 0x24
   185ec:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   185f0:	mov	r4, r0
   185f4:	str	r0, [r5]
   185f8:	ldr	r0, [r5, #4]
   185fc:	mov	r1, #0
   18600:	ldr	r2, [sp, #36]	; 0x24
   18604:	sub	r2, r2, r0
   18608:	add	r0, r4, r0, lsl #3
   1860c:	lsl	r2, r2, #3
   18610:	bl	11368 <memset@plt>
   18614:	ldr	r3, [sp, #36]	; 0x24
   18618:	ldr	r1, [sp, #40]	; 0x28
   1861c:	ldr	r8, [sp, #80]	; 0x50
   18620:	str	r3, [r5, #4]
   18624:	ldr	r7, [sp, #84]	; 0x54
   18628:	mvn	r3, #0
   1862c:	mov	r2, fp
   18630:	ldr	r6, [sp, #44]	; 0x2c
   18634:	ldr	sl, [r4]
   18638:	ldr	r5, [r4, #4]
   1863c:	orr	r6, r6, #1
   18640:	stm	sp, {r1, r6}
   18644:	add	r1, sp, #48	; 0x30
   18648:	str	r8, [sp, #12]
   1864c:	mov	r0, r5
   18650:	str	r1, [sp, #8]
   18654:	mov	r1, sl
   18658:	str	r7, [sp, #16]
   1865c:	bl	153c4 <__assert_fail@plt+0x3f0c>
   18660:	cmp	sl, r0
   18664:	bhi	186c8 <__assert_fail@plt+0x7210>
   18668:	add	r7, r0, #1
   1866c:	movw	r3, #57812	; 0xe1d4
   18670:	movt	r3, #2
   18674:	cmp	r5, r3
   18678:	str	r7, [r4]
   1867c:	beq	18688 <__assert_fail@plt+0x71d0>
   18680:	mov	r0, r5
   18684:	bl	13fe8 <__assert_fail@plt+0x2b30>
   18688:	mov	r0, r7
   1868c:	bl	1a310 <__assert_fail@plt+0x8e58>
   18690:	ldr	r3, [sp, #40]	; 0x28
   18694:	mov	r2, fp
   18698:	mov	r1, r7
   1869c:	mov	r5, r0
   186a0:	ldr	lr, [sp, #80]	; 0x50
   186a4:	ldr	ip, [sp, #84]	; 0x54
   186a8:	str	r0, [r4, #4]
   186ac:	add	r4, sp, #48	; 0x30
   186b0:	stm	sp, {r3, r6}
   186b4:	mvn	r3, #0
   186b8:	str	r4, [sp, #8]
   186bc:	str	lr, [sp, #12]
   186c0:	str	ip, [sp, #16]
   186c4:	bl	153c4 <__assert_fail@plt+0x3f0c>
   186c8:	ldr	r3, [sp, #28]
   186cc:	mov	r0, r5
   186d0:	str	r3, [r9]
   186d4:	add	sp, sp, #92	; 0x5c
   186d8:	ldrd	r4, [sp]
   186dc:	ldrd	r6, [sp, #8]
   186e0:	ldrd	r8, [sp, #16]
   186e4:	ldrd	sl, [sp, #24]
   186e8:	add	sp, sp, #32
   186ec:	pop	{pc}		; (ldr pc, [sp], #4)
   186f0:	mov	r1, #8
   186f4:	mvn	r3, #-2147483648	; 0x80000000
   186f8:	mov	r0, r6
   186fc:	str	r1, [sp]
   18700:	add	r1, sp, #36	; 0x24
   18704:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   18708:	ldrd	r2, [r5, #8]
   1870c:	mov	r4, r0
   18710:	str	r0, [r5]
   18714:	strd	r2, [r0]
   18718:	b	185f8 <__assert_fail@plt+0x7140>
   1871c:	bl	114a0 <abort@plt>
   18720:	ldrdeq	lr, [r2], -r4
   18724:	ldr	ip, [pc, #536]	; 18944 <__assert_fail@plt+0x748c>
   18728:	cmp	r0, #0
   1872c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18730:	ldrd	r4, [ip, #16]
   18734:	strd	r6, [sp, #8]
   18738:	mov	r6, r1
   1873c:	mov	r7, r0
   18740:	strd	r8, [sp, #16]
   18744:	mov	r9, #10
   18748:	strd	sl, [sp, #24]
   1874c:	mov	sl, r2
   18750:	mov	fp, r3
   18754:	str	lr, [sp, #32]
   18758:	clz	lr, r1
   1875c:	sub	sp, sp, #92	; 0x5c
   18760:	ldrd	r2, [ip]
   18764:	lsr	lr, lr, #5
   18768:	moveq	lr, #1
   1876c:	ldrd	r0, [ip, #8]
   18770:	cmp	lr, #0
   18774:	strd	r4, [sp, #56]	; 0x38
   18778:	ldrd	r4, [ip, #40]	; 0x28
   1877c:	str	lr, [sp, #28]
   18780:	strd	r2, [sp, #40]	; 0x28
   18784:	ldrd	r2, [ip, #24]
   18788:	strd	r0, [sp, #48]	; 0x30
   1878c:	ldrd	r0, [ip, #32]
   18790:	str	r9, [sp, #40]	; 0x28
   18794:	strd	r2, [sp, #64]	; 0x40
   18798:	strd	r4, [sp, #80]	; 0x50
   1879c:	strd	r0, [sp, #72]	; 0x48
   187a0:	bne	18940 <__assert_fail@plt+0x7488>
   187a4:	movw	r5, #57692	; 0xe15c
   187a8:	movt	r5, #2
   187ac:	str	r7, [sp, #80]	; 0x50
   187b0:	str	r6, [sp, #84]	; 0x54
   187b4:	bl	11338 <__errno_location@plt>
   187b8:	ldr	r3, [r0]
   187bc:	mov	r8, r0
   187c0:	ldr	r2, [r5, #4]
   187c4:	ldr	r4, [r5]
   187c8:	str	r3, [sp, #24]
   187cc:	cmp	r2, #0
   187d0:	movgt	r1, r9
   187d4:	bgt	1883c <__assert_fail@plt+0x7384>
   187d8:	add	r3, r5, #8
   187dc:	str	r2, [sp, #36]	; 0x24
   187e0:	rsb	r2, r2, #1
   187e4:	cmp	r4, r3
   187e8:	beq	18914 <__assert_fail@plt+0x745c>
   187ec:	mov	r1, #8
   187f0:	mov	r0, r4
   187f4:	mvn	r3, #-2147483648	; 0x80000000
   187f8:	str	r1, [sp]
   187fc:	add	r1, sp, #36	; 0x24
   18800:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   18804:	mov	r4, r0
   18808:	str	r0, [r5]
   1880c:	ldr	r0, [r5, #4]
   18810:	mov	r1, #0
   18814:	ldr	r2, [sp, #36]	; 0x24
   18818:	sub	r2, r2, r0
   1881c:	add	r0, r4, r0, lsl #3
   18820:	lsl	r2, r2, #3
   18824:	bl	11368 <memset@plt>
   18828:	ldr	r3, [sp, #36]	; 0x24
   1882c:	ldr	r1, [sp, #40]	; 0x28
   18830:	ldr	r7, [sp, #80]	; 0x50
   18834:	str	r3, [r5, #4]
   18838:	ldr	r6, [sp, #84]	; 0x54
   1883c:	mov	r3, fp
   18840:	mov	r2, sl
   18844:	ldr	r0, [sp, #44]	; 0x2c
   18848:	ldr	r9, [r4]
   1884c:	ldr	r5, [r4, #4]
   18850:	orr	r0, r0, #1
   18854:	str	r1, [sp]
   18858:	add	r1, sp, #48	; 0x30
   1885c:	str	r0, [sp, #4]
   18860:	str	r1, [sp, #8]
   18864:	mov	r1, r9
   18868:	str	r7, [sp, #12]
   1886c:	str	r6, [sp, #16]
   18870:	str	r0, [sp, #28]
   18874:	mov	r0, r5
   18878:	bl	153c4 <__assert_fail@plt+0x3f0c>
   1887c:	cmp	r9, r0
   18880:	bhi	188ec <__assert_fail@plt+0x7434>
   18884:	add	r6, r0, #1
   18888:	movw	r3, #57812	; 0xe1d4
   1888c:	movt	r3, #2
   18890:	cmp	r5, r3
   18894:	str	r6, [r4]
   18898:	beq	188a4 <__assert_fail@plt+0x73ec>
   1889c:	mov	r0, r5
   188a0:	bl	13fe8 <__assert_fail@plt+0x2b30>
   188a4:	mov	r0, r6
   188a8:	bl	1a310 <__assert_fail@plt+0x8e58>
   188ac:	ldr	lr, [sp, #40]	; 0x28
   188b0:	mov	r1, r6
   188b4:	mov	r3, fp
   188b8:	mov	r2, sl
   188bc:	mov	r5, r0
   188c0:	ldr	r6, [sp, #80]	; 0x50
   188c4:	ldr	ip, [sp, #84]	; 0x54
   188c8:	str	r0, [r4, #4]
   188cc:	str	lr, [sp]
   188d0:	ldr	lr, [sp, #28]
   188d4:	str	lr, [sp, #4]
   188d8:	add	lr, sp, #48	; 0x30
   188dc:	str	r6, [sp, #12]
   188e0:	str	lr, [sp, #8]
   188e4:	str	ip, [sp, #16]
   188e8:	bl	153c4 <__assert_fail@plt+0x3f0c>
   188ec:	ldr	r3, [sp, #24]
   188f0:	mov	r0, r5
   188f4:	str	r3, [r8]
   188f8:	add	sp, sp, #92	; 0x5c
   188fc:	ldrd	r4, [sp]
   18900:	ldrd	r6, [sp, #8]
   18904:	ldrd	r8, [sp, #16]
   18908:	ldrd	sl, [sp, #24]
   1890c:	add	sp, sp, #32
   18910:	pop	{pc}		; (ldr pc, [sp], #4)
   18914:	mov	r1, #8
   18918:	mvn	r3, #-2147483648	; 0x80000000
   1891c:	ldr	r0, [sp, #28]
   18920:	str	r1, [sp]
   18924:	add	r1, sp, #36	; 0x24
   18928:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   1892c:	ldrd	r2, [r5, #8]
   18930:	mov	r4, r0
   18934:	str	r0, [r5]
   18938:	strd	r2, [r0]
   1893c:	b	1880c <__assert_fail@plt+0x7354>
   18940:	bl	114a0 <abort@plt>
   18944:	ldrdeq	lr, [r2], -r4
   18948:	ldr	r3, [pc]	; 18950 <__assert_fail@plt+0x7498>
   1894c:	b	16db0 <__assert_fail@plt+0x58f8>
   18950:	andeq	lr, r2, ip, ror #2
   18954:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18958:	movw	r4, #57692	; 0xe15c
   1895c:	movt	r4, #2
   18960:	strd	r6, [sp, #8]
   18964:	strd	r8, [sp, #16]
   18968:	strd	sl, [sp, #24]
   1896c:	mov	sl, r0
   18970:	mov	fp, r1
   18974:	str	lr, [sp, #32]
   18978:	sub	sp, sp, #44	; 0x2c
   1897c:	bl	11338 <__errno_location@plt>
   18980:	ldr	r3, [r0]
   18984:	mov	r8, r0
   18988:	ldr	r2, [r4, #4]
   1898c:	ldr	r5, [r4]
   18990:	str	r3, [sp, #28]
   18994:	cmp	r2, #0
   18998:	bgt	189f4 <__assert_fail@plt+0x753c>
   1899c:	add	r3, r4, #8
   189a0:	str	r2, [sp, #36]	; 0x24
   189a4:	rsb	r2, r2, #1
   189a8:	cmp	r5, r3
   189ac:	beq	18ad0 <__assert_fail@plt+0x7618>
   189b0:	mov	r1, #8
   189b4:	mov	r0, r5
   189b8:	mvn	r3, #-2147483648	; 0x80000000
   189bc:	str	r1, [sp]
   189c0:	add	r1, sp, #36	; 0x24
   189c4:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   189c8:	mov	r5, r0
   189cc:	str	r0, [r4]
   189d0:	ldr	r0, [r4, #4]
   189d4:	mov	r1, #0
   189d8:	ldr	r2, [sp, #36]	; 0x24
   189dc:	sub	r2, r2, r0
   189e0:	add	r0, r5, r0, lsl #3
   189e4:	lsl	r2, r2, #3
   189e8:	bl	11368 <memset@plt>
   189ec:	ldr	r3, [sp, #36]	; 0x24
   189f0:	str	r3, [r4, #4]
   189f4:	ldr	ip, [r4, #16]
   189f8:	mov	r3, fp
   189fc:	mov	r2, sl
   18a00:	ldr	r7, [r4, #20]
   18a04:	ldr	r0, [pc, #240]	; 18afc <__assert_fail@plt+0x7644>
   18a08:	ldr	r9, [r5]
   18a0c:	orr	r7, r7, #1
   18a10:	ldr	r6, [r5, #4]
   18a14:	str	ip, [sp]
   18a18:	ldr	ip, [r4, #56]	; 0x38
   18a1c:	mov	r1, r9
   18a20:	str	r7, [sp, #4]
   18a24:	ldr	lr, [r4, #60]	; 0x3c
   18a28:	str	r0, [sp, #8]
   18a2c:	mov	r0, r6
   18a30:	str	ip, [sp, #12]
   18a34:	str	lr, [sp, #16]
   18a38:	bl	153c4 <__assert_fail@plt+0x3f0c>
   18a3c:	cmp	r9, r0
   18a40:	bhi	18aa8 <__assert_fail@plt+0x75f0>
   18a44:	add	r9, r0, #1
   18a48:	movw	r3, #57812	; 0xe1d4
   18a4c:	movt	r3, #2
   18a50:	cmp	r6, r3
   18a54:	str	r9, [r5]
   18a58:	beq	18a64 <__assert_fail@plt+0x75ac>
   18a5c:	mov	r0, r6
   18a60:	bl	13fe8 <__assert_fail@plt+0x2b30>
   18a64:	mov	r0, r9
   18a68:	bl	1a310 <__assert_fail@plt+0x8e58>
   18a6c:	ldr	ip, [r4, #16]
   18a70:	mov	r1, r9
   18a74:	mov	r3, fp
   18a78:	mov	r2, sl
   18a7c:	mov	r6, r0
   18a80:	ldr	r9, [r4, #56]	; 0x38
   18a84:	ldr	lr, [r4, #60]	; 0x3c
   18a88:	str	r0, [r5, #4]
   18a8c:	str	ip, [sp]
   18a90:	ldr	ip, [pc, #100]	; 18afc <__assert_fail@plt+0x7644>
   18a94:	str	r7, [sp, #4]
   18a98:	str	ip, [sp, #8]
   18a9c:	str	r9, [sp, #12]
   18aa0:	str	lr, [sp, #16]
   18aa4:	bl	153c4 <__assert_fail@plt+0x3f0c>
   18aa8:	ldr	r3, [sp, #28]
   18aac:	mov	r0, r6
   18ab0:	str	r3, [r8]
   18ab4:	add	sp, sp, #44	; 0x2c
   18ab8:	ldrd	r4, [sp]
   18abc:	ldrd	r6, [sp, #8]
   18ac0:	ldrd	r8, [sp, #16]
   18ac4:	ldrd	sl, [sp, #24]
   18ac8:	add	sp, sp, #32
   18acc:	pop	{pc}		; (ldr pc, [sp], #4)
   18ad0:	mov	r0, #8
   18ad4:	mvn	r3, #-2147483648	; 0x80000000
   18ad8:	add	r1, sp, #36	; 0x24
   18adc:	str	r0, [sp]
   18ae0:	mov	r0, #0
   18ae4:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   18ae8:	ldrd	r2, [r4, #8]
   18aec:	mov	r5, r0
   18af0:	str	r0, [r4]
   18af4:	strd	r2, [r0]
   18af8:	b	189d0 <__assert_fail@plt+0x7518>
   18afc:	andeq	lr, r2, r4, ror r1
   18b00:	ldr	r3, [pc, #4]	; 18b0c <__assert_fail@plt+0x7654>
   18b04:	mvn	r2, #0
   18b08:	b	16db0 <__assert_fail@plt+0x58f8>
   18b0c:	andeq	lr, r2, ip, ror #2
   18b10:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18b14:	movw	r4, #57692	; 0xe15c
   18b18:	movt	r4, #2
   18b1c:	strd	r6, [sp, #8]
   18b20:	strd	r8, [sp, #16]
   18b24:	strd	sl, [sp, #24]
   18b28:	mov	sl, r0
   18b2c:	str	lr, [sp, #32]
   18b30:	sub	sp, sp, #44	; 0x2c
   18b34:	bl	11338 <__errno_location@plt>
   18b38:	ldr	r3, [r0]
   18b3c:	mov	r8, r0
   18b40:	ldr	r2, [r4, #4]
   18b44:	ldr	r5, [r4]
   18b48:	str	r3, [sp, #28]
   18b4c:	cmp	r2, #0
   18b50:	bgt	18bac <__assert_fail@plt+0x76f4>
   18b54:	add	r3, r4, #8
   18b58:	str	r2, [sp, #36]	; 0x24
   18b5c:	rsb	r2, r2, #1
   18b60:	cmp	r5, r3
   18b64:	beq	18c74 <__assert_fail@plt+0x77bc>
   18b68:	mov	r1, #8
   18b6c:	mov	r0, r5
   18b70:	mvn	r3, #-2147483648	; 0x80000000
   18b74:	str	r1, [sp]
   18b78:	add	r1, sp, #36	; 0x24
   18b7c:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   18b80:	mov	r5, r0
   18b84:	str	r0, [r4]
   18b88:	ldr	r0, [r4, #4]
   18b8c:	mov	r1, #0
   18b90:	ldr	r2, [sp, #36]	; 0x24
   18b94:	sub	r2, r2, r0
   18b98:	add	r0, r5, r0, lsl #3
   18b9c:	lsl	r2, r2, #3
   18ba0:	bl	11368 <memset@plt>
   18ba4:	ldr	r3, [sp, #36]	; 0x24
   18ba8:	str	r3, [r4, #4]
   18bac:	ldr	ip, [r4, #16]
   18bb0:	mvn	r3, #0
   18bb4:	mov	r2, sl
   18bb8:	ldr	r7, [r4, #20]
   18bbc:	ldr	fp, [pc, #220]	; 18ca0 <__assert_fail@plt+0x77e8>
   18bc0:	ldr	r9, [r5]
   18bc4:	orr	r7, r7, #1
   18bc8:	ldr	r6, [r5, #4]
   18bcc:	str	ip, [sp]
   18bd0:	ldr	ip, [r4, #56]	; 0x38
   18bd4:	mov	r1, r9
   18bd8:	stmib	sp, {r7, fp}
   18bdc:	ldr	lr, [r4, #60]	; 0x3c
   18be0:	mov	r0, r6
   18be4:	str	ip, [sp, #12]
   18be8:	str	lr, [sp, #16]
   18bec:	bl	153c4 <__assert_fail@plt+0x3f0c>
   18bf0:	cmp	r9, r0
   18bf4:	bhi	18c4c <__assert_fail@plt+0x7794>
   18bf8:	add	r9, r0, #1
   18bfc:	movw	r3, #57812	; 0xe1d4
   18c00:	movt	r3, #2
   18c04:	cmp	r6, r3
   18c08:	str	r9, [r5]
   18c0c:	beq	18c18 <__assert_fail@plt+0x7760>
   18c10:	mov	r0, r6
   18c14:	bl	13fe8 <__assert_fail@plt+0x2b30>
   18c18:	mov	r0, r9
   18c1c:	bl	1a310 <__assert_fail@plt+0x8e58>
   18c20:	ldr	r3, [r4, #16]
   18c24:	mov	r2, sl
   18c28:	mov	r1, r9
   18c2c:	mov	r6, r0
   18c30:	ldr	lr, [r4, #56]	; 0x38
   18c34:	ldr	ip, [r4, #60]	; 0x3c
   18c38:	str	r0, [r5, #4]
   18c3c:	stm	sp, {r3, r7, fp, lr}
   18c40:	mvn	r3, #0
   18c44:	str	ip, [sp, #16]
   18c48:	bl	153c4 <__assert_fail@plt+0x3f0c>
   18c4c:	ldr	r3, [sp, #28]
   18c50:	mov	r0, r6
   18c54:	str	r3, [r8]
   18c58:	add	sp, sp, #44	; 0x2c
   18c5c:	ldrd	r4, [sp]
   18c60:	ldrd	r6, [sp, #8]
   18c64:	ldrd	r8, [sp, #16]
   18c68:	ldrd	sl, [sp, #24]
   18c6c:	add	sp, sp, #32
   18c70:	pop	{pc}		; (ldr pc, [sp], #4)
   18c74:	mov	r0, #8
   18c78:	mvn	r3, #-2147483648	; 0x80000000
   18c7c:	add	r1, sp, #36	; 0x24
   18c80:	str	r0, [sp]
   18c84:	mov	r0, #0
   18c88:	bl	1a5b4 <__assert_fail@plt+0x90fc>
   18c8c:	ldrd	r2, [r4, #8]
   18c90:	mov	r5, r0
   18c94:	str	r0, [r4]
   18c98:	strd	r2, [r0]
   18c9c:	b	18b88 <__assert_fail@plt+0x76d0>
   18ca0:	andeq	lr, r2, r4, ror r1
   18ca4:	strd	r4, [sp, #-16]!
   18ca8:	mov	r4, #0
   18cac:	mov	r5, #0
   18cb0:	str	r6, [sp, #8]
   18cb4:	mov	r6, r0
   18cb8:	mov	r0, #24
   18cbc:	str	lr, [sp, #12]
   18cc0:	bl	1a2c8 <__assert_fail@plt+0x8e10>
   18cc4:	str	r6, [r0]
   18cc8:	strd	r4, [r0, #8]
   18ccc:	strd	r4, [r0, #16]
   18cd0:	ldrd	r4, [sp]
   18cd4:	ldr	r6, [sp, #8]
   18cd8:	add	sp, sp, #12
   18cdc:	pop	{pc}		; (ldr pc, [sp], #4)
   18ce0:	str	r4, [sp, #-8]!
   18ce4:	str	lr, [sp, #4]
   18ce8:	bl	19180 <__assert_fail@plt+0x7cc8>
   18cec:	subs	r4, r0, #0
   18cf0:	moveq	r0, r4
   18cf4:	beq	18d14 <__assert_fail@plt+0x785c>
   18cf8:	mov	r0, #24
   18cfc:	bl	1a2c8 <__assert_fail@plt+0x8e10>
   18d00:	mov	r2, #0
   18d04:	mov	r3, #0
   18d08:	str	r4, [r0]
   18d0c:	strd	r2, [r0, #8]
   18d10:	strd	r2, [r0, #16]
   18d14:	ldr	r4, [sp]
   18d18:	add	sp, sp, #4
   18d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   18d20:	ldr	r0, [r0]
   18d24:	bx	lr
   18d28:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18d2c:	strd	r6, [sp, #8]
   18d30:	strd	r8, [sp, #16]
   18d34:	mov	r8, r2
   18d38:	mov	r9, r3
   18d3c:	ldr	r2, [r0]
   18d40:	strd	sl, [sp, #24]
   18d44:	str	lr, [sp, #32]
   18d48:	sub	sp, sp, #52	; 0x34
   18d4c:	ldrd	r6, [r0, #8]
   18d50:	str	r2, [sp, #32]
   18d54:	adds	r2, r8, #1
   18d58:	str	r0, [sp, #36]	; 0x24
   18d5c:	str	r2, [sp, #16]
   18d60:	adc	r2, r9, #0
   18d64:	ldrd	r4, [r0, #16]
   18d68:	str	r2, [sp, #20]
   18d6c:	b	18df4 <__assert_fail@plt+0x793c>
   18d70:	cmp	r5, r9
   18d74:	cmpeq	r4, r8
   18d78:	beq	1901c <__assert_fail@plt+0x7b64>
   18d7c:	ldr	fp, [sp, #16]
   18d80:	subs	r0, r4, r8
   18d84:	sbc	r1, r5, r9
   18d88:	ldr	sl, [sp, #20]
   18d8c:	mov	r2, fp
   18d90:	mov	r3, sl
   18d94:	bl	1c378 <__assert_fail@plt+0xaec0>
   18d98:	str	r2, [sp, #8]
   18d9c:	strd	r0, [sp, #24]
   18da0:	mov	r1, r3
   18da4:	subs	r3, r4, r2
   18da8:	mov	r0, r6
   18dac:	mov	r2, fp
   18db0:	str	r3, [sp]
   18db4:	sbc	r3, r5, r1
   18db8:	str	r3, [sp, #4]
   18dbc:	mov	r3, sl
   18dc0:	str	r1, [sp, #12]
   18dc4:	mov	r1, r7
   18dc8:	bl	1c378 <__assert_fail@plt+0xaec0>
   18dcc:	ldrd	sl, [sp]
   18dd0:	cmp	r7, fp
   18dd4:	cmpeq	r6, sl
   18dd8:	bls	19054 <__assert_fail@plt+0x7b9c>
   18ddc:	ldr	r1, [sp, #8]
   18de0:	mov	r6, r2
   18de4:	mov	r7, r3
   18de8:	ldr	r2, [sp, #12]
   18dec:	subs	r4, r1, #1
   18df0:	sbc	r5, r2, #0
   18df4:	cmp	r5, r9
   18df8:	cmpeq	r4, r8
   18dfc:	bcs	18d70 <__assert_fail@plt+0x78b8>
   18e00:	mov	r0, r4
   18e04:	mov	r1, r5
   18e08:	mov	r2, #0
   18e0c:	lsl	r3, r1, #8
   18e10:	add	r2, r2, #1
   18e14:	lsl	ip, r0, #8
   18e18:	orr	r3, r3, r0, lsr #24
   18e1c:	adds	r0, ip, #255	; 0xff
   18e20:	adc	r1, r3, #0
   18e24:	cmp	r9, r1
   18e28:	cmpeq	r8, r0
   18e2c:	bhi	18e0c <__assert_fail@plt+0x7954>
   18e30:	add	r1, sp, #40	; 0x28
   18e34:	ldr	r0, [sp, #32]
   18e38:	mov	fp, #0
   18e3c:	bl	19304 <__assert_fail@plt+0x7e4c>
   18e40:	ldrb	sl, [sp, #40]	; 0x28
   18e44:	lsl	r0, r7, #8
   18e48:	lsl	r1, r5, #8
   18e4c:	lsl	ip, r6, #8
   18e50:	orr	r0, r0, r6, lsr #24
   18e54:	lsl	r2, r4, #8
   18e58:	adds	r6, sl, ip
   18e5c:	orr	r1, r1, r4, lsr #24
   18e60:	adc	r7, fp, r0
   18e64:	adds	r4, r2, #255	; 0xff
   18e68:	adc	r5, r1, #0
   18e6c:	cmp	r5, r9
   18e70:	cmpeq	r4, r8
   18e74:	bcs	18d70 <__assert_fail@plt+0x78b8>
   18e78:	ldrb	sl, [sp, #41]	; 0x29
   18e7c:	lsl	r0, r7, #8
   18e80:	mov	fp, #0
   18e84:	lsl	r1, r5, #8
   18e88:	lsl	ip, r6, #8
   18e8c:	orr	r0, r0, r6, lsr #24
   18e90:	lsl	r2, r4, #8
   18e94:	adds	r6, sl, ip
   18e98:	orr	r1, r1, r4, lsr #24
   18e9c:	adc	r7, fp, r0
   18ea0:	adds	r4, r2, #255	; 0xff
   18ea4:	adc	r5, r1, #0
   18ea8:	cmp	r9, r5
   18eac:	cmpeq	r8, r4
   18eb0:	bls	18d70 <__assert_fail@plt+0x78b8>
   18eb4:	ldrb	sl, [sp, #42]	; 0x2a
   18eb8:	lsl	r0, r7, #8
   18ebc:	mov	fp, #0
   18ec0:	lsl	r1, r5, #8
   18ec4:	lsl	ip, r6, #8
   18ec8:	orr	r0, r0, r6, lsr #24
   18ecc:	lsl	r2, r4, #8
   18ed0:	adds	r6, sl, ip
   18ed4:	orr	r1, r1, r4, lsr #24
   18ed8:	adc	r7, fp, r0
   18edc:	adds	r4, r2, #255	; 0xff
   18ee0:	adc	r5, r1, #0
   18ee4:	cmp	r9, r5
   18ee8:	cmpeq	r8, r4
   18eec:	bls	18d70 <__assert_fail@plt+0x78b8>
   18ef0:	ldrb	sl, [sp, #43]	; 0x2b
   18ef4:	lsl	r0, r7, #8
   18ef8:	mov	fp, #0
   18efc:	lsl	r1, r5, #8
   18f00:	lsl	ip, r6, #8
   18f04:	orr	r0, r0, r6, lsr #24
   18f08:	lsl	r2, r4, #8
   18f0c:	adds	r6, sl, ip
   18f10:	orr	r1, r1, r4, lsr #24
   18f14:	adc	r7, fp, r0
   18f18:	adds	r4, r2, #255	; 0xff
   18f1c:	adc	r5, r1, #0
   18f20:	cmp	r9, r5
   18f24:	cmpeq	r8, r4
   18f28:	bls	18d70 <__assert_fail@plt+0x78b8>
   18f2c:	ldrb	sl, [sp, #44]	; 0x2c
   18f30:	lsl	r0, r7, #8
   18f34:	mov	fp, #0
   18f38:	lsl	r1, r5, #8
   18f3c:	lsl	ip, r6, #8
   18f40:	orr	r0, r0, r6, lsr #24
   18f44:	lsl	r2, r4, #8
   18f48:	adds	r6, sl, ip
   18f4c:	orr	r1, r1, r4, lsr #24
   18f50:	adc	r7, fp, r0
   18f54:	adds	r4, r2, #255	; 0xff
   18f58:	adc	r5, r1, #0
   18f5c:	cmp	r9, r5
   18f60:	cmpeq	r8, r4
   18f64:	bls	18d70 <__assert_fail@plt+0x78b8>
   18f68:	ldrb	sl, [sp, #45]	; 0x2d
   18f6c:	lsl	r0, r7, #8
   18f70:	mov	fp, #0
   18f74:	lsl	r1, r5, #8
   18f78:	lsl	ip, r6, #8
   18f7c:	orr	r0, r0, r6, lsr #24
   18f80:	lsl	r2, r4, #8
   18f84:	adds	r6, sl, ip
   18f88:	orr	r1, r1, r4, lsr #24
   18f8c:	adc	r7, fp, r0
   18f90:	adds	r4, r2, #255	; 0xff
   18f94:	adc	r5, r1, #0
   18f98:	cmp	r9, r5
   18f9c:	cmpeq	r8, r4
   18fa0:	bls	18d70 <__assert_fail@plt+0x78b8>
   18fa4:	ldrb	sl, [sp, #46]	; 0x2e
   18fa8:	lsl	r0, r7, #8
   18fac:	mov	fp, #0
   18fb0:	lsl	r1, r5, #8
   18fb4:	lsl	ip, r6, #8
   18fb8:	orr	r0, r0, r6, lsr #24
   18fbc:	lsl	r2, r4, #8
   18fc0:	adds	r6, sl, ip
   18fc4:	orr	r1, r1, r4, lsr #24
   18fc8:	adc	r7, fp, r0
   18fcc:	adds	r4, r2, #255	; 0xff
   18fd0:	adc	r5, r1, #0
   18fd4:	cmp	r9, r5
   18fd8:	cmpeq	r8, r4
   18fdc:	bls	18d70 <__assert_fail@plt+0x78b8>
   18fe0:	ldrb	sl, [sp, #47]	; 0x2f
   18fe4:	lsl	r0, r7, #8
   18fe8:	mov	fp, #0
   18fec:	lsl	r1, r5, #8
   18ff0:	lsl	ip, r6, #8
   18ff4:	orr	r0, r0, r6, lsr #24
   18ff8:	lsl	r2, r4, #8
   18ffc:	adds	r6, sl, ip
   19000:	orr	r1, r1, r4, lsr #24
   19004:	adc	r7, fp, r0
   19008:	adds	r4, r2, #255	; 0xff
   1900c:	adc	r5, r1, #0
   19010:	cmp	r5, r9
   19014:	cmpeq	r4, r8
   19018:	bne	18d7c <__assert_fail@plt+0x78c4>
   1901c:	ldr	r1, [sp, #36]	; 0x24
   19020:	mov	r2, #0
   19024:	mov	r3, #0
   19028:	strd	r2, [r1, #8]
   1902c:	strd	r2, [r1, #16]
   19030:	mov	r0, r6
   19034:	mov	r1, r7
   19038:	add	sp, sp, #52	; 0x34
   1903c:	ldrd	r4, [sp]
   19040:	ldrd	r6, [sp, #8]
   19044:	ldrd	r8, [sp, #16]
   19048:	ldrd	sl, [sp, #24]
   1904c:	add	sp, sp, #32
   19050:	pop	{pc}		; (ldr pc, [sp], #4)
   19054:	mov	r6, r2
   19058:	ldr	r2, [sp, #36]	; 0x24
   1905c:	mov	r7, r3
   19060:	strd	r0, [r2, #8]
   19064:	mov	r1, r2
   19068:	ldrd	r2, [sp, #24]
   1906c:	strd	r2, [r1, #16]
   19070:	b	19030 <__assert_fail@plt+0x7b78>
   19074:	mvn	r2, #0
   19078:	mov	r1, #24
   1907c:	str	r4, [sp, #-8]!
   19080:	mov	r4, r0
   19084:	str	lr, [sp, #4]
   19088:	bl	113ec <__explicit_bzero_chk@plt>
   1908c:	mov	r0, r4
   19090:	ldr	r4, [sp]
   19094:	ldr	lr, [sp, #4]
   19098:	add	sp, sp, #8
   1909c:	b	13fe8 <__assert_fail@plt+0x2b30>
   190a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   190a4:	mov	r4, r0
   190a8:	ldr	r0, [r0]
   190ac:	strd	r6, [sp, #8]
   190b0:	str	r8, [sp, #16]
   190b4:	str	lr, [sp, #20]
   190b8:	bl	19450 <__assert_fail@plt+0x7f98>
   190bc:	mov	r7, r0
   190c0:	bl	11338 <__errno_location@plt>
   190c4:	mov	r5, r0
   190c8:	mvn	r2, #0
   190cc:	ldr	r6, [r5]
   190d0:	mov	r0, r4
   190d4:	mov	r1, #24
   190d8:	bl	113ec <__explicit_bzero_chk@plt>
   190dc:	mov	r0, r4
   190e0:	bl	13fe8 <__assert_fail@plt+0x2b30>
   190e4:	mov	r0, r7
   190e8:	ldr	r8, [sp, #16]
   190ec:	str	r6, [r5]
   190f0:	ldrd	r4, [sp]
   190f4:	ldrd	r6, [sp, #8]
   190f8:	add	sp, sp, #20
   190fc:	pop	{pc}		; (ldr pc, [sp], #4)
   19100:	subs	r5, r0, #0
   19104:	str	r7, [sp, #-8]!
   19108:	str	lr, [sp, #4]
   1910c:	beq	19160 <__assert_fail@plt+0x7ca8>
   19110:	movw	r3, #57688	; 0xe158
   19114:	movt	r3, #2
   19118:	ldr	r6, [r3]
   1911c:	bl	11338 <__errno_location@plt>
   19120:	ldr	r4, [r0]
   19124:	cmp	r4, #0
   19128:	beq	19164 <__assert_fail@plt+0x7cac>
   1912c:	movw	r1, #54796	; 0xd60c
   19130:	movt	r1, #1
   19134:	mov	r2, #5
   19138:	mov	r0, #0
   1913c:	bl	111e8 <dcgettext@plt>
   19140:	mov	r7, r0
   19144:	mov	r0, r5
   19148:	bl	18b10 <__assert_fail@plt+0x7658>
   1914c:	mov	r3, r0
   19150:	mov	r2, r7
   19154:	mov	r1, r4
   19158:	mov	r0, r6
   1915c:	bl	1129c <error@plt>
   19160:	bl	114a0 <abort@plt>
   19164:	movw	r1, #54780	; 0xd5fc
   19168:	movt	r1, #1
   1916c:	mov	r2, #5
   19170:	mov	r0, r4
   19174:	bl	111e8 <dcgettext@plt>
   19178:	mov	r7, r0
   1917c:	b	19144 <__assert_fail@plt+0x7c8c>
   19180:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19184:	strd	r6, [sp, #8]
   19188:	subs	r6, r1, #0
   1918c:	strd	r8, [sp, #16]
   19190:	str	sl, [sp, #24]
   19194:	str	lr, [sp, #28]
   19198:	beq	192cc <__assert_fail@plt+0x7e14>
   1919c:	cmp	r0, #0
   191a0:	mov	r5, r0
   191a4:	beq	19210 <__assert_fail@plt+0x7d58>
   191a8:	movw	r1, #54812	; 0xd61c
   191ac:	movt	r1, #1
   191b0:	bl	1bb4c <__assert_fail@plt+0xa694>
   191b4:	subs	r7, r0, #0
   191b8:	beq	192ec <__assert_fail@plt+0x7e34>
   191bc:	movw	r0, #2076	; 0x81c
   191c0:	bl	1a2c8 <__assert_fail@plt+0x8e10>
   191c4:	mov	r4, r0
   191c8:	movw	r2, #37120	; 0x9100
   191cc:	movt	r2, #1
   191d0:	cmp	r6, #2048	; 0x800
   191d4:	movcc	r3, r6
   191d8:	movcs	r3, #2048	; 0x800
   191dc:	str	r7, [r4]
   191e0:	mov	r0, r7
   191e4:	add	r1, r4, #12
   191e8:	stmib	r4, {r2, r5}
   191ec:	mov	r2, #0
   191f0:	bl	1135c <setvbuf@plt>
   191f4:	mov	r0, r4
   191f8:	ldrd	r4, [sp]
   191fc:	ldrd	r6, [sp, #8]
   19200:	ldrd	r8, [sp, #16]
   19204:	ldr	sl, [sp, #24]
   19208:	add	sp, sp, #28
   1920c:	pop	{pc}		; (ldr pc, [sp], #4)
   19210:	movw	r0, #2076	; 0x81c
   19214:	bl	1a2c8 <__assert_fail@plt+0x8e10>
   19218:	add	r9, r0, #16
   1921c:	movw	r3, #37120	; 0x9100
   19220:	movt	r3, #1
   19224:	cmp	r6, #1024	; 0x400
   19228:	addls	r6, r9, r6
   1922c:	addhi	r6, r9, #1024	; 0x400
   19230:	str	r5, [r0]
   19234:	cmp	r9, r6
   19238:	mov	r4, r0
   1923c:	stmib	r0, {r3, r5}
   19240:	str	r5, [r0, #12]
   19244:	movcc	r5, r9
   19248:	bcc	19258 <__assert_fail@plt+0x7da0>
   1924c:	b	192c0 <__assert_fail@plt+0x7e08>
   19250:	cmp	r6, r5
   19254:	bls	192c0 <__assert_fail@plt+0x7e08>
   19258:	sub	r1, r6, r5
   1925c:	mov	r0, r5
   19260:	mov	r2, #0
   19264:	bl	1144c <getrandom@plt>
   19268:	cmp	r0, #0
   1926c:	addge	r5, r5, r0
   19270:	bge	19250 <__assert_fail@plt+0x7d98>
   19274:	bl	11338 <__errno_location@plt>
   19278:	ldr	r8, [r0]
   1927c:	mov	r7, r0
   19280:	cmp	r8, #4
   19284:	beq	19250 <__assert_fail@plt+0x7d98>
   19288:	ldr	r5, [r4]
   1928c:	movw	r2, #2076	; 0x81c
   19290:	mov	r0, r4
   19294:	mov	r1, r2
   19298:	bl	113ec <__explicit_bzero_chk@plt>
   1929c:	mov	r0, r4
   192a0:	bl	13fe8 <__assert_fail@plt+0x2b30>
   192a4:	cmp	r5, #0
   192a8:	beq	192b4 <__assert_fail@plt+0x7dfc>
   192ac:	mov	r0, r5
   192b0:	bl	1ba38 <__assert_fail@plt+0xa580>
   192b4:	mov	r4, #0
   192b8:	str	r8, [r7]
   192bc:	b	191f4 <__assert_fail@plt+0x7d3c>
   192c0:	mov	r0, r9
   192c4:	bl	196dc <__assert_fail@plt+0x8224>
   192c8:	b	191f4 <__assert_fail@plt+0x7d3c>
   192cc:	movw	r0, #2076	; 0x81c
   192d0:	bl	1a2c8 <__assert_fail@plt+0x8e10>
   192d4:	movw	r3, #37120	; 0x9100
   192d8:	movt	r3, #1
   192dc:	str	r6, [r0]
   192e0:	mov	r4, r0
   192e4:	stmib	r0, {r3, r6}
   192e8:	b	191f4 <__assert_fail@plt+0x7d3c>
   192ec:	mov	r4, r7
   192f0:	b	191f4 <__assert_fail@plt+0x7d3c>
   192f4:	str	r1, [r0, #4]
   192f8:	bx	lr
   192fc:	str	r1, [r0, #8]
   19300:	bx	lr
   19304:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19308:	mov	r5, r1
   1930c:	mov	r4, r2
   19310:	strd	r6, [sp, #8]
   19314:	mov	r6, r0
   19318:	ldr	r7, [r0]
   1931c:	strd	r8, [sp, #16]
   19320:	str	sl, [sp, #24]
   19324:	str	lr, [sp, #28]
   19328:	cmp	r7, #0
   1932c:	beq	19398 <__assert_fail@plt+0x7ee0>
   19330:	bl	11338 <__errno_location@plt>
   19334:	mov	r8, r0
   19338:	b	1935c <__assert_fail@plt+0x7ea4>
   1933c:	ldm	r6, {r1, r2}
   19340:	ldr	r0, [r6, #8]
   19344:	ldr	r1, [r1]
   19348:	tst	r1, #32
   1934c:	moveq	r3, #0
   19350:	str	r3, [r8]
   19354:	blx	r2
   19358:	ldr	r7, [r6]
   1935c:	mov	r3, r7
   19360:	mov	r2, r4
   19364:	mov	r0, r5
   19368:	mov	r1, #1
   1936c:	bl	11440 <fread_unlocked@plt>
   19370:	subs	r4, r4, r0
   19374:	add	r5, r5, r0
   19378:	ldr	r3, [r8]
   1937c:	bne	1933c <__assert_fail@plt+0x7e84>
   19380:	ldrd	r4, [sp]
   19384:	ldrd	r6, [sp, #8]
   19388:	ldrd	r8, [sp, #16]
   1938c:	ldr	sl, [sp, #24]
   19390:	add	sp, sp, #28
   19394:	pop	{pc}		; (ldr pc, [sp], #4)
   19398:	mov	r8, r0
   1939c:	ldr	r7, [r8, #12]!
   193a0:	cmp	r2, r7
   193a4:	add	r8, r8, #1040	; 0x410
   193a8:	addhi	r9, r0, #16
   193ac:	bls	19444 <__assert_fail@plt+0x7f8c>
   193b0:	rsb	r1, r7, #1024	; 0x400
   193b4:	mov	r2, r7
   193b8:	add	r1, r8, r1
   193bc:	mov	r0, r5
   193c0:	add	r5, r5, r7
   193c4:	sub	r4, r4, r7
   193c8:	bl	11194 <memcpy@plt>
   193cc:	tst	r5, #3
   193d0:	mov	r1, r8
   193d4:	mov	r0, r9
   193d8:	mov	r7, #1024	; 0x400
   193dc:	beq	19408 <__assert_fail@plt+0x7f50>
   193e0:	bl	194a4 <__assert_fail@plt+0x7fec>
   193e4:	cmp	r4, #1024	; 0x400
   193e8:	bhi	193b0 <__assert_fail@plt+0x7ef8>
   193ec:	b	1941c <__assert_fail@plt+0x7f64>
   193f0:	mov	r1, r5
   193f4:	mov	r0, r9
   193f8:	bl	194a4 <__assert_fail@plt+0x7fec>
   193fc:	subs	r4, r4, #1024	; 0x400
   19400:	add	r5, r5, #1024	; 0x400
   19404:	beq	1943c <__assert_fail@plt+0x7f84>
   19408:	cmp	r4, #1024	; 0x400
   1940c:	bcs	193f0 <__assert_fail@plt+0x7f38>
   19410:	mov	r0, r9
   19414:	mov	r1, r8
   19418:	bl	194a4 <__assert_fail@plt+0x7fec>
   1941c:	mov	r7, #1024	; 0x400
   19420:	mov	r2, r4
   19424:	sub	r4, r7, r4
   19428:	mov	r1, r8
   1942c:	mov	r0, r5
   19430:	bl	11194 <memcpy@plt>
   19434:	str	r4, [r6, #12]
   19438:	b	19380 <__assert_fail@plt+0x7ec8>
   1943c:	str	r4, [r6, #12]
   19440:	b	19380 <__assert_fail@plt+0x7ec8>
   19444:	rsb	r3, r7, #1024	; 0x400
   19448:	add	r8, r8, r3
   1944c:	b	19420 <__assert_fail@plt+0x7f68>
   19450:	strd	r4, [sp, #-16]!
   19454:	mvn	r2, #0
   19458:	mov	r4, r0
   1945c:	ldr	r5, [r0]
   19460:	movw	r1, #2076	; 0x81c
   19464:	str	r6, [sp, #8]
   19468:	str	lr, [sp, #12]
   1946c:	bl	113ec <__explicit_bzero_chk@plt>
   19470:	mov	r0, r4
   19474:	bl	13fe8 <__assert_fail@plt+0x2b30>
   19478:	subs	r0, r5, #0
   1947c:	beq	19494 <__assert_fail@plt+0x7fdc>
   19480:	ldrd	r4, [sp]
   19484:	ldr	r6, [sp, #8]
   19488:	ldr	lr, [sp, #12]
   1948c:	add	sp, sp, #16
   19490:	b	1ba38 <__assert_fail@plt+0xa580>
   19494:	ldrd	r4, [sp]
   19498:	ldr	r6, [sp, #8]
   1949c:	add	sp, sp, #12
   194a0:	pop	{pc}		; (ldr pc, [sp], #4)
   194a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   194a8:	add	r2, r0, #16
   194ac:	add	r5, r1, #16
   194b0:	ldr	r3, [r0, #1024]	; 0x400
   194b4:	str	lr, [sp, #20]
   194b8:	ldr	ip, [r0, #1028]	; 0x404
   194bc:	strd	r6, [sp, #8]
   194c0:	add	r6, r1, #528	; 0x210
   194c4:	ldr	lr, [r0, #1032]	; 0x408
   194c8:	str	r8, [sp, #16]
   194cc:	add	lr, lr, #1
   194d0:	add	ip, ip, lr
   194d4:	str	lr, [r0, #1032]	; 0x408
   194d8:	ldr	lr, [r2, #-16]
   194dc:	eor	r3, r3, r3, lsl #13
   194e0:	add	r5, r5, #16
   194e4:	add	r2, r2, #16
   194e8:	ldr	r4, [r2, #480]	; 0x1e0
   194ec:	and	r7, lr, #1020	; 0x3fc
   194f0:	ldr	r7, [r0, r7]
   194f4:	add	r3, r3, r4
   194f8:	eor	r4, r3, r3, lsr #6
   194fc:	add	r3, r3, r7
   19500:	add	r3, r3, ip
   19504:	lsr	ip, r3, #8
   19508:	str	r3, [r2, #-32]	; 0xffffffe0
   1950c:	and	r3, ip, #1020	; 0x3fc
   19510:	ldr	r7, [r0, r3]
   19514:	add	r7, lr, r7
   19518:	str	r7, [r5, #-32]	; 0xffffffe0
   1951c:	ldr	ip, [r2, #-28]	; 0xffffffe4
   19520:	ldr	lr, [r2, #484]	; 0x1e4
   19524:	and	r3, ip, #1020	; 0x3fc
   19528:	ldr	r8, [r0, r3]
   1952c:	add	lr, r4, lr
   19530:	eor	r3, lr, lr, lsl #2
   19534:	add	lr, lr, r8
   19538:	add	lr, lr, r7
   1953c:	lsr	r4, lr, #8
   19540:	str	lr, [r2, #-28]	; 0xffffffe4
   19544:	and	lr, r4, #1020	; 0x3fc
   19548:	ldr	r4, [r0, lr]
   1954c:	add	r4, ip, r4
   19550:	str	r4, [r5, #-28]	; 0xffffffe4
   19554:	ldr	lr, [r2, #-24]	; 0xffffffe8
   19558:	ldr	ip, [r2, #488]	; 0x1e8
   1955c:	and	r7, lr, #1020	; 0x3fc
   19560:	ldr	r8, [r0, r7]
   19564:	add	ip, r3, ip
   19568:	eor	r7, ip, ip, lsr #16
   1956c:	add	ip, ip, r8
   19570:	add	ip, ip, r4
   19574:	lsr	r3, ip, #8
   19578:	str	ip, [r2, #-24]	; 0xffffffe8
   1957c:	and	ip, r3, #1020	; 0x3fc
   19580:	ldr	r4, [r0, ip]
   19584:	add	r4, lr, r4
   19588:	str	r4, [r5, #-24]	; 0xffffffe8
   1958c:	ldr	ip, [r2, #-20]	; 0xffffffec
   19590:	ldr	r3, [r2, #492]	; 0x1ec
   19594:	and	lr, ip, #1020	; 0x3fc
   19598:	ldr	lr, [r0, lr]
   1959c:	add	r3, r7, r3
   195a0:	add	lr, r3, lr
   195a4:	add	lr, lr, r4
   195a8:	lsr	r4, lr, #8
   195ac:	str	lr, [r2, #-20]	; 0xffffffec
   195b0:	and	lr, r4, #1020	; 0x3fc
   195b4:	ldr	lr, [r0, lr]
   195b8:	add	ip, ip, lr
   195bc:	str	ip, [r5, #-20]	; 0xffffffec
   195c0:	cmp	r6, r5
   195c4:	bne	194d8 <__assert_fail@plt+0x8020>
   195c8:	add	r1, r1, #1040	; 0x410
   195cc:	add	r2, r0, #528	; 0x210
   195d0:	ldr	r4, [r2, #-528]	; 0xfffffdf0
   195d4:	eor	r3, r3, r3, lsl #13
   195d8:	add	r6, r6, #16
   195dc:	add	r2, r2, #16
   195e0:	ldr	lr, [r2, #-32]	; 0xffffffe0
   195e4:	add	r3, r3, r4
   195e8:	eor	r4, r3, r3, lsr #6
   195ec:	and	r5, lr, #1020	; 0x3fc
   195f0:	ldr	r5, [r0, r5]
   195f4:	add	r3, r3, r5
   195f8:	add	r3, r3, ip
   195fc:	lsr	ip, r3, #8
   19600:	str	r3, [r2, #-32]	; 0xffffffe0
   19604:	and	r3, ip, #1020	; 0x3fc
   19608:	ldr	r5, [r0, r3]
   1960c:	add	r5, lr, r5
   19610:	str	r5, [r6, #-32]	; 0xffffffe0
   19614:	ldr	lr, [r2, #-540]	; 0xfffffde4
   19618:	ldr	ip, [r2, #-28]	; 0xffffffe4
   1961c:	add	lr, r4, lr
   19620:	and	r3, ip, #1020	; 0x3fc
   19624:	ldr	r7, [r0, r3]
   19628:	eor	r3, lr, lr, lsl #2
   1962c:	add	lr, lr, r7
   19630:	add	lr, lr, r5
   19634:	lsr	r4, lr, #8
   19638:	str	lr, [r2, #-28]	; 0xffffffe4
   1963c:	and	lr, r4, #1020	; 0x3fc
   19640:	ldr	r4, [r0, lr]
   19644:	add	r4, ip, r4
   19648:	str	r4, [r6, #-28]	; 0xffffffe4
   1964c:	ldr	ip, [r2, #-536]	; 0xfffffde8
   19650:	ldr	lr, [r2, #-24]	; 0xffffffe8
   19654:	add	ip, r3, ip
   19658:	and	r5, lr, #1020	; 0x3fc
   1965c:	ldr	r7, [r0, r5]
   19660:	eor	r5, ip, ip, lsr #16
   19664:	add	ip, ip, r7
   19668:	add	ip, ip, r4
   1966c:	lsr	r4, ip, #8
   19670:	str	ip, [r2, #-24]	; 0xffffffe8
   19674:	and	ip, r4, #1020	; 0x3fc
   19678:	ldr	r4, [r0, ip]
   1967c:	add	r4, lr, r4
   19680:	str	r4, [r6, #-24]	; 0xffffffe8
   19684:	ldr	r3, [r2, #-532]	; 0xfffffdec
   19688:	ldr	ip, [r2, #-20]	; 0xffffffec
   1968c:	add	r3, r5, r3
   19690:	and	lr, ip, #1020	; 0x3fc
   19694:	ldr	lr, [r0, lr]
   19698:	add	lr, r3, lr
   1969c:	add	lr, lr, r4
   196a0:	lsr	r4, lr, #8
   196a4:	str	lr, [r2, #-20]	; 0xffffffec
   196a8:	and	lr, r4, #1020	; 0x3fc
   196ac:	ldr	lr, [r0, lr]
   196b0:	add	ip, ip, lr
   196b4:	str	ip, [r6, #-20]	; 0xffffffec
   196b8:	cmp	r1, r6
   196bc:	bne	195d0 <__assert_fail@plt+0x8118>
   196c0:	ldrd	r4, [sp]
   196c4:	str	r3, [r0, #1024]	; 0x400
   196c8:	ldrd	r6, [sp, #8]
   196cc:	str	ip, [r0, #1028]	; 0x404
   196d0:	ldr	r8, [sp, #16]
   196d4:	add	sp, sp, #20
   196d8:	pop	{pc}		; (ldr pc, [sp], #4)
   196dc:	mov	r1, #89	; 0x59
   196e0:	movt	r1, #38361	; 0x95d9
   196e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   196e8:	movw	r3, #57178	; 0xdf5a
   196ec:	movt	r3, #4967	; 0x1367
   196f0:	strd	r6, [sp, #8]
   196f4:	movw	r5, #59931	; 0xea1b
   196f8:	movt	r5, #50415	; 0xc4ef
   196fc:	strd	r8, [sp, #16]
   19700:	movw	r4, #15433	; 0x3c49
   19704:	movt	r4, #42266	; 0xa51a
   19708:	strd	sl, [sp, #24]
   1970c:	movw	r6, #37145	; 0x9119
   19710:	movt	r6, #12384	; 0x3060
   19714:	str	lr, [sp, #32]
   19718:	movw	r8, #6872	; 0x1ad8
   1971c:	movt	r8, #3906	; 0xf42
   19720:	sub	sp, sp, #12
   19724:	movw	lr, #19064	; 0x4a78
   19728:	movt	lr, #55594	; 0xd92a
   1972c:	movw	r7, #15947	; 0x3e4b
   19730:	movt	r7, #49942	; 0xc316
   19734:	mov	sl, r0
   19738:	str	r0, [sp, #4]
   1973c:	add	fp, r0, #1024	; 0x400
   19740:	mov	r9, r0
   19744:	ldr	r2, [r9]
   19748:	ldr	r0, [r9, #8]
   1974c:	ldr	ip, [r9, #12]
   19750:	add	r2, r3, r2
   19754:	ldr	r3, [r9, #4]
   19758:	add	r7, r7, r0
   1975c:	ldr	r0, [r9, #20]
   19760:	add	r1, r1, r3
   19764:	ldr	r3, [r9, #16]
   19768:	eor	r2, r2, r1, lsl #11
   1976c:	add	r1, r1, r7
   19770:	eor	r1, r1, r7, lsr #2
   19774:	add	ip, r2, ip
   19778:	add	r8, ip, r8
   1977c:	ldr	ip, [r9, #24]
   19780:	add	r7, r7, r8
   19784:	add	r3, r1, r3
   19788:	eor	r7, r7, r8, lsl #8
   1978c:	add	r3, r3, lr
   19790:	add	r8, r8, r3
   19794:	add	lr, r7, r0
   19798:	eor	r8, r8, r3, lsr #16
   1979c:	add	r4, lr, r4
   197a0:	add	r3, r3, r4
   197a4:	add	ip, r8, ip
   197a8:	eor	lr, r3, r4, lsl #10
   197ac:	ldr	r3, [r9, #28]
   197b0:	add	ip, ip, r5
   197b4:	add	r4, r4, ip
   197b8:	eor	r4, r4, ip, lsr #4
   197bc:	add	r2, r2, r4
   197c0:	add	r3, lr, r3
   197c4:	add	r6, r3, r6
   197c8:	add	ip, ip, r6
   197cc:	eor	r5, ip, r6, lsl #8
   197d0:	add	r6, r6, r2
   197d4:	eor	r6, r6, r2, lsr #9
   197d8:	add	r1, r1, r5
   197dc:	add	r3, r2, r1
   197e0:	add	r7, r7, r6
   197e4:	str	r3, [r9]
   197e8:	stmib	r9, {r1, r7, r8, lr}
   197ec:	add	r9, r9, #32
   197f0:	strd	r4, [r9, #-12]
   197f4:	str	r6, [r9, #-4]
   197f8:	cmp	fp, r9
   197fc:	bne	19744 <__assert_fail@plt+0x828c>
   19800:	ldr	r0, [sp, #4]
   19804:	mov	r2, r1
   19808:	mov	ip, r8
   1980c:	mov	r1, r3
   19810:	mov	r3, r7
   19814:	ldrd	r8, [sl]
   19818:	ldr	r7, [sl, #8]
   1981c:	add	r2, r2, r9
   19820:	add	r1, r1, r8
   19824:	ldrd	r8, [sl, #12]
   19828:	eor	r1, r1, r2, lsl #11
   1982c:	add	r3, r3, r7
   19830:	ldr	r7, [sl, #20]
   19834:	add	r2, r2, r3
   19838:	eor	r2, r2, r3, lsr #2
   1983c:	add	r8, r1, r8
   19840:	add	ip, r8, ip
   19844:	add	r9, r2, r9
   19848:	ldr	r8, [sl, #24]
   1984c:	add	r3, r3, ip
   19850:	add	r9, r9, lr
   19854:	eor	r3, r3, ip, lsl #8
   19858:	add	ip, ip, r9
   1985c:	eor	ip, ip, r9, lsr #16
   19860:	add	r7, r3, r7
   19864:	add	r7, r7, r4
   19868:	ldr	r4, [sl, #28]
   1986c:	add	r8, ip, r8
   19870:	add	r9, r9, r7
   19874:	add	r5, r8, r5
   19878:	eor	lr, r9, r7, lsl #10
   1987c:	add	r7, r7, r5
   19880:	add	r8, lr, r4
   19884:	eor	r4, r7, r5, lsr #4
   19888:	str	lr, [sl, #16]
   1988c:	add	r6, r8, r6
   19890:	add	r1, r1, r4
   19894:	add	r5, r5, r6
   19898:	eor	r5, r5, r6, lsl #8
   1989c:	add	r6, r6, r1
   198a0:	eor	r6, r6, r1, lsr #9
   198a4:	add	r2, r2, r5
   198a8:	add	r1, r1, r2
   198ac:	add	r3, r3, r6
   198b0:	stm	sl, {r1, r2, r3, ip}
   198b4:	add	sl, sl, #32
   198b8:	strd	r4, [sl, #-12]
   198bc:	str	r6, [sl, #-4]
   198c0:	cmp	fp, sl
   198c4:	bne	19814 <__assert_fail@plt+0x835c>
   198c8:	mov	r3, #0
   198cc:	str	r3, [r0, #1024]	; 0x400
   198d0:	str	r3, [r0, #1028]	; 0x404
   198d4:	str	r3, [r0, #1032]	; 0x408
   198d8:	add	sp, sp, #12
   198dc:	ldrd	r4, [sp]
   198e0:	ldrd	r6, [sp, #8]
   198e4:	ldrd	r8, [sp, #16]
   198e8:	ldrd	sl, [sp, #24]
   198ec:	add	sp, sp, #32
   198f0:	pop	{pc}		; (ldr pc, [sp], #4)
   198f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   198f8:	mov	r5, r3
   198fc:	strd	r6, [sp, #8]
   19900:	mov	r6, r1
   19904:	strd	r8, [sp, #16]
   19908:	mov	r9, r0
   1990c:	mov	r8, r2
   19910:	strd	sl, [sp, #24]
   19914:	str	lr, [sp, #32]
   19918:	sub	sp, sp, #220	; 0xdc
   1991c:	ldr	r4, [sp, #256]	; 0x100
   19920:	str	r4, [sp]
   19924:	bl	11374 <renameat2@plt>
   19928:	subs	sl, r0, #0
   1992c:	bge	199a4 <__assert_fail@plt+0x84ec>
   19930:	bl	11338 <__errno_location@plt>
   19934:	ldr	r2, [r0]
   19938:	mov	r7, r0
   1993c:	sub	r3, r2, #22
   19940:	bic	r3, r3, #16
   19944:	cmp	r2, #95	; 0x5f
   19948:	cmpne	r3, #0
   1994c:	movne	fp, #1
   19950:	moveq	fp, #0
   19954:	bne	199a4 <__assert_fail@plt+0x84ec>
   19958:	cmp	r4, #0
   1995c:	beq	199d8 <__assert_fail@plt+0x8520>
   19960:	cmp	r4, #1
   19964:	bne	19a60 <__assert_fail@plt+0x85a8>
   19968:	mov	r0, #256	; 0x100
   1996c:	add	r3, sp, #112	; 0x70
   19970:	mov	r2, r5
   19974:	mov	r1, r8
   19978:	str	r0, [sp]
   1997c:	mov	r0, #3
   19980:	bl	11218 <__fxstatat64@plt>
   19984:	cmp	r0, #0
   19988:	beq	199c4 <__assert_fail@plt+0x850c>
   1998c:	ldr	r3, [r7]
   19990:	cmp	r3, #75	; 0x4b
   19994:	beq	199c4 <__assert_fail@plt+0x850c>
   19998:	cmp	r3, #2
   1999c:	beq	199d4 <__assert_fail@plt+0x851c>
   199a0:	mvn	sl, #0
   199a4:	mov	r0, sl
   199a8:	add	sp, sp, #220	; 0xdc
   199ac:	ldrd	r4, [sp]
   199b0:	ldrd	r6, [sp, #8]
   199b4:	ldrd	r8, [sp, #16]
   199b8:	ldrd	sl, [sp, #24]
   199bc:	add	sp, sp, #32
   199c0:	pop	{pc}		; (ldr pc, [sp], #4)
   199c4:	mov	r3, #17
   199c8:	mvn	sl, #0
   199cc:	str	r3, [r7]
   199d0:	b	199a4 <__assert_fail@plt+0x84ec>
   199d4:	mov	fp, r4
   199d8:	mov	r0, r6
   199dc:	bl	11314 <strlen@plt>
   199e0:	mov	r4, r0
   199e4:	mov	r0, r5
   199e8:	bl	11314 <strlen@plt>
   199ec:	cmp	r0, #0
   199f0:	cmpne	r4, #0
   199f4:	beq	19aac <__assert_fail@plt+0x85f4>
   199f8:	add	r4, r6, r4
   199fc:	add	r0, r5, r0
   19a00:	ldrb	r2, [r4, #-1]
   19a04:	ldrb	r3, [r0, #-1]
   19a08:	cmp	r2, #47	; 0x2f
   19a0c:	cmpne	r3, #47	; 0x2f
   19a10:	bne	19aac <__assert_fail@plt+0x85f4>
   19a14:	mov	r4, #256	; 0x100
   19a18:	add	r3, sp, #8
   19a1c:	mov	r2, r6
   19a20:	mov	r1, r9
   19a24:	mov	r0, #3
   19a28:	str	r4, [sp]
   19a2c:	bl	11218 <__fxstatat64@plt>
   19a30:	cmp	r0, #0
   19a34:	bne	199a0 <__assert_fail@plt+0x84e8>
   19a38:	cmp	fp, #0
   19a3c:	beq	19a70 <__assert_fail@plt+0x85b8>
   19a40:	ldr	r3, [sp, #24]
   19a44:	and	r3, r3, #61440	; 0xf000
   19a48:	cmp	r3, #16384	; 0x4000
   19a4c:	beq	19aac <__assert_fail@plt+0x85f4>
   19a50:	mov	r3, #2
   19a54:	mvn	sl, #0
   19a58:	str	r3, [r7]
   19a5c:	b	199a4 <__assert_fail@plt+0x84ec>
   19a60:	mov	r3, #95	; 0x5f
   19a64:	mvn	sl, #0
   19a68:	str	r3, [r0]
   19a6c:	b	199a4 <__assert_fail@plt+0x84ec>
   19a70:	add	r3, sp, #112	; 0x70
   19a74:	mov	r2, r5
   19a78:	str	r4, [sp]
   19a7c:	mov	r1, r8
   19a80:	mov	r0, #3
   19a84:	bl	11218 <__fxstatat64@plt>
   19a88:	cmp	r0, #0
   19a8c:	beq	19ac8 <__assert_fail@plt+0x8610>
   19a90:	ldr	r3, [r7]
   19a94:	cmp	r3, #2
   19a98:	bne	199a0 <__assert_fail@plt+0x84e8>
   19a9c:	ldr	r3, [sp, #24]
   19aa0:	and	r3, r3, #61440	; 0xf000
   19aa4:	cmp	r3, #16384	; 0x4000
   19aa8:	bne	199a0 <__assert_fail@plt+0x84e8>
   19aac:	mov	r3, r5
   19ab0:	mov	r2, r8
   19ab4:	mov	r1, r6
   19ab8:	mov	r0, r9
   19abc:	bl	11428 <renameat@plt>
   19ac0:	mov	sl, r0
   19ac4:	b	199a4 <__assert_fail@plt+0x84ec>
   19ac8:	ldr	r3, [sp, #128]	; 0x80
   19acc:	and	r3, r3, #61440	; 0xf000
   19ad0:	cmp	r3, #16384	; 0x4000
   19ad4:	beq	19ae8 <__assert_fail@plt+0x8630>
   19ad8:	mov	r3, #20
   19adc:	mvn	sl, #0
   19ae0:	str	r3, [r7]
   19ae4:	b	199a4 <__assert_fail@plt+0x84ec>
   19ae8:	ldr	r3, [sp, #24]
   19aec:	and	r3, r3, #61440	; 0xf000
   19af0:	cmp	r3, #16384	; 0x4000
   19af4:	beq	19aac <__assert_fail@plt+0x85f4>
   19af8:	mov	r3, #21
   19afc:	mvn	sl, #0
   19b00:	str	r3, [r7]
   19b04:	b	199a4 <__assert_fail@plt+0x84ec>
   19b08:	cmp	r0, #2
   19b0c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19b10:	mov	r4, r0
   19b14:	strd	r6, [sp, #8]
   19b18:	str	r8, [sp, #16]
   19b1c:	str	lr, [sp, #20]
   19b20:	bls	19b3c <__assert_fail@plt+0x8684>
   19b24:	mov	r0, r4
   19b28:	ldrd	r4, [sp]
   19b2c:	ldrd	r6, [sp, #8]
   19b30:	ldr	r8, [sp, #16]
   19b34:	add	sp, sp, #20
   19b38:	pop	{pc}		; (ldr pc, [sp], #4)
   19b3c:	bl	1bdbc <__assert_fail@plt+0xa904>
   19b40:	mov	r7, r0
   19b44:	bl	11338 <__errno_location@plt>
   19b48:	mov	r5, r0
   19b4c:	mov	r0, r4
   19b50:	ldr	r6, [r5]
   19b54:	mov	r4, r7
   19b58:	bl	114ac <close@plt>
   19b5c:	str	r6, [r5]
   19b60:	b	19b24 <__assert_fail@plt+0x866c>
   19b64:	cmp	r1, #0
   19b68:	strd	r4, [sp, #-16]!
   19b6c:	mov	ip, r3
   19b70:	str	r6, [sp, #8]
   19b74:	mov	r4, r0
   19b78:	str	lr, [sp, #12]
   19b7c:	sub	sp, sp, #32
   19b80:	ldr	r5, [sp, #48]	; 0x30
   19b84:	ldr	r6, [sp, #52]	; 0x34
   19b88:	beq	19ccc <__assert_fail@plt+0x8814>
   19b8c:	mov	r3, r1
   19b90:	mov	r1, #1
   19b94:	stm	sp, {r2, ip}
   19b98:	movw	r2, #54816	; 0xd620
   19b9c:	movt	r2, #1
   19ba0:	bl	113a4 <__fprintf_chk@plt>
   19ba4:	mov	r2, #5
   19ba8:	movw	r1, #54836	; 0xd634
   19bac:	movt	r1, #1
   19bb0:	mov	r0, #0
   19bb4:	bl	111e8 <dcgettext@plt>
   19bb8:	movw	ip, #2022	; 0x7e6
   19bbc:	mov	r3, r0
   19bc0:	mov	r1, #1
   19bc4:	movw	r2, #55564	; 0xd90c
   19bc8:	movt	r2, #1
   19bcc:	mov	r0, r4
   19bd0:	str	ip, [sp]
   19bd4:	bl	113a4 <__fprintf_chk@plt>
   19bd8:	mov	r1, r4
   19bdc:	mov	r0, #10
   19be0:	bl	111dc <fputc_unlocked@plt>
   19be4:	mov	r2, #5
   19be8:	movw	r1, #54840	; 0xd638
   19bec:	movt	r1, #1
   19bf0:	mov	r0, #0
   19bf4:	bl	111e8 <dcgettext@plt>
   19bf8:	mov	r2, r0
   19bfc:	mov	r1, #1
   19c00:	movw	r3, #55012	; 0xd6e4
   19c04:	movt	r3, #1
   19c08:	mov	r0, r4
   19c0c:	bl	113a4 <__fprintf_chk@plt>
   19c10:	mov	r1, r4
   19c14:	mov	r0, #10
   19c18:	bl	111dc <fputc_unlocked@plt>
   19c1c:	cmp	r6, #9
   19c20:	ldrls	pc, [pc, r6, lsl #2]
   19c24:	b	19f38 <__assert_fail@plt+0x8a80>
   19c28:			; <UNDEFINED> instruction: 0x00019cb8
   19c2c:	andeq	r9, r1, r8, ror #25
   19c30:	andeq	r9, r1, r4, lsr #26
   19c34:	andeq	r9, r1, r4, ror #26
   19c38:	andeq	r9, r1, ip, lsr #27
   19c3c:	andeq	r9, r1, r4, ror #27
   19c40:	andeq	r9, r1, ip, lsr #28
   19c44:	andeq	r9, r1, r0, lsl #29
   19c48:	ldrdeq	r9, [r1], -r8
   19c4c:	andeq	r9, r1, r0, asr ip
   19c50:	movw	r1, #55316	; 0xd814
   19c54:	movt	r1, #1
   19c58:	mov	r2, #5
   19c5c:	mov	r0, #0
   19c60:	bl	111e8 <dcgettext@plt>
   19c64:	ldr	lr, [r5, #4]
   19c68:	mov	r2, r0
   19c6c:	mov	r1, #1
   19c70:	mov	r0, r4
   19c74:	ldr	r3, [r5, #8]
   19c78:	ldr	ip, [r5, #32]
   19c7c:	str	lr, [sp]
   19c80:	ldr	lr, [r5, #12]
   19c84:	str	ip, [sp, #28]
   19c88:	ldr	ip, [r5, #28]
   19c8c:	str	r3, [sp, #4]
   19c90:	ldr	r3, [r5, #16]
   19c94:	str	lr, [sp, #8]
   19c98:	ldr	lr, [r5, #20]
   19c9c:	str	ip, [sp, #24]
   19ca0:	ldr	ip, [r5, #24]
   19ca4:	str	r3, [sp, #12]
   19ca8:	ldr	r3, [r5]
   19cac:	str	lr, [sp, #16]
   19cb0:	str	ip, [sp, #20]
   19cb4:	bl	113a4 <__fprintf_chk@plt>
   19cb8:	add	sp, sp, #32
   19cbc:	ldrd	r4, [sp]
   19cc0:	ldr	r6, [sp, #8]
   19cc4:	add	sp, sp, #12
   19cc8:	pop	{pc}		; (ldr pc, [sp], #4)
   19ccc:	mov	r3, r2
   19cd0:	mov	r1, #1
   19cd4:	str	ip, [sp]
   19cd8:	movw	r2, #54828	; 0xd62c
   19cdc:	movt	r2, #1
   19ce0:	bl	113a4 <__fprintf_chk@plt>
   19ce4:	b	19ba4 <__assert_fail@plt+0x86ec>
   19ce8:	mov	r2, #5
   19cec:	movw	r1, #55048	; 0xd708
   19cf0:	movt	r1, #1
   19cf4:	mov	r0, #0
   19cf8:	bl	111e8 <dcgettext@plt>
   19cfc:	ldr	r3, [r5]
   19d00:	mov	r2, r0
   19d04:	mov	r1, #1
   19d08:	mov	r0, r4
   19d0c:	add	sp, sp, #32
   19d10:	ldrd	r4, [sp]
   19d14:	ldr	r6, [sp, #8]
   19d18:	ldr	lr, [sp, #12]
   19d1c:	add	sp, sp, #16
   19d20:	b	113a4 <__fprintf_chk@plt>
   19d24:	mov	r2, #5
   19d28:	movw	r1, #55064	; 0xd718
   19d2c:	movt	r1, #1
   19d30:	mov	r0, #0
   19d34:	bl	111e8 <dcgettext@plt>
   19d38:	ldm	r5, {r3, ip}
   19d3c:	mov	r2, r0
   19d40:	mov	r1, #1
   19d44:	mov	r0, r4
   19d48:	str	ip, [sp, #48]	; 0x30
   19d4c:	add	sp, sp, #32
   19d50:	ldrd	r4, [sp]
   19d54:	ldr	r6, [sp, #8]
   19d58:	ldr	lr, [sp, #12]
   19d5c:	add	sp, sp, #16
   19d60:	b	113a4 <__fprintf_chk@plt>
   19d64:	mov	r2, #5
   19d68:	movw	r1, #55088	; 0xd730
   19d6c:	movt	r1, #1
   19d70:	mov	r0, #0
   19d74:	bl	111e8 <dcgettext@plt>
   19d78:	ldm	r5, {r3, lr}
   19d7c:	mov	r2, r0
   19d80:	mov	r1, #1
   19d84:	mov	r0, r4
   19d88:	ldr	ip, [r5, #8]
   19d8c:	str	lr, [sp, #48]	; 0x30
   19d90:	str	ip, [sp, #52]	; 0x34
   19d94:	add	sp, sp, #32
   19d98:	ldrd	r4, [sp]
   19d9c:	ldr	r6, [sp, #8]
   19da0:	ldr	lr, [sp, #12]
   19da4:	add	sp, sp, #16
   19da8:	b	113a4 <__fprintf_chk@plt>
   19dac:	mov	r2, #5
   19db0:	movw	r1, #55116	; 0xd74c
   19db4:	movt	r1, #1
   19db8:	mov	r0, #0
   19dbc:	bl	111e8 <dcgettext@plt>
   19dc0:	ldmib	r5, {r3, ip, lr}
   19dc4:	mov	r2, r0
   19dc8:	mov	r1, #1
   19dcc:	mov	r0, r4
   19dd0:	str	r3, [sp]
   19dd4:	ldr	r3, [r5]
   19dd8:	stmib	sp, {ip, lr}
   19ddc:	bl	113a4 <__fprintf_chk@plt>
   19de0:	b	19cb8 <__assert_fail@plt+0x8800>
   19de4:	mov	r2, #5
   19de8:	movw	r1, #55148	; 0xd76c
   19dec:	movt	r1, #1
   19df0:	mov	r0, #0
   19df4:	bl	111e8 <dcgettext@plt>
   19df8:	ldmib	r5, {ip, lr}
   19dfc:	mov	r2, r0
   19e00:	mov	r1, #1
   19e04:	mov	r0, r4
   19e08:	ldr	r3, [r5, #16]
   19e0c:	str	ip, [sp]
   19e10:	ldr	ip, [r5, #12]
   19e14:	str	r3, [sp, #12]
   19e18:	ldr	r3, [r5]
   19e1c:	str	lr, [sp, #4]
   19e20:	str	ip, [sp, #8]
   19e24:	bl	113a4 <__fprintf_chk@plt>
   19e28:	b	19cb8 <__assert_fail@plt+0x8800>
   19e2c:	mov	r2, #5
   19e30:	movw	r1, #55184	; 0xd790
   19e34:	movt	r1, #1
   19e38:	mov	r0, #0
   19e3c:	bl	111e8 <dcgettext@plt>
   19e40:	ldr	lr, [r5, #4]
   19e44:	mov	r2, r0
   19e48:	mov	r1, #1
   19e4c:	mov	r0, r4
   19e50:	ldr	r3, [r5, #8]
   19e54:	ldr	ip, [r5, #20]
   19e58:	str	lr, [sp]
   19e5c:	ldr	lr, [r5, #12]
   19e60:	str	ip, [sp, #16]
   19e64:	ldr	ip, [r5, #16]
   19e68:	str	r3, [sp, #4]
   19e6c:	ldr	r3, [r5]
   19e70:	str	lr, [sp, #8]
   19e74:	str	ip, [sp, #12]
   19e78:	bl	113a4 <__fprintf_chk@plt>
   19e7c:	b	19cb8 <__assert_fail@plt+0x8800>
   19e80:	mov	r2, #5
   19e84:	movw	r1, #55224	; 0xd7b8
   19e88:	movt	r1, #1
   19e8c:	mov	r0, #0
   19e90:	bl	111e8 <dcgettext@plt>
   19e94:	ldmib	r5, {r3, ip}
   19e98:	mov	r2, r0
   19e9c:	mov	r1, #1
   19ea0:	mov	r0, r4
   19ea4:	ldr	lr, [r5, #24]
   19ea8:	str	r3, [sp]
   19eac:	ldr	r3, [r5, #12]
   19eb0:	str	lr, [sp, #20]
   19eb4:	ldr	lr, [r5, #20]
   19eb8:	str	ip, [sp, #4]
   19ebc:	ldr	ip, [r5, #16]
   19ec0:	str	r3, [sp, #8]
   19ec4:	ldr	r3, [r5]
   19ec8:	str	ip, [sp, #12]
   19ecc:	str	lr, [sp, #16]
   19ed0:	bl	113a4 <__fprintf_chk@plt>
   19ed4:	b	19cb8 <__assert_fail@plt+0x8800>
   19ed8:	mov	r2, #5
   19edc:	movw	r1, #55268	; 0xd7e4
   19ee0:	movt	r1, #1
   19ee4:	mov	r0, #0
   19ee8:	bl	111e8 <dcgettext@plt>
   19eec:	ldmib	r5, {ip, lr}
   19ef0:	mov	r2, r0
   19ef4:	mov	r1, #1
   19ef8:	mov	r0, r4
   19efc:	ldr	r3, [r5, #28]
   19f00:	str	ip, [sp]
   19f04:	ldr	ip, [r5, #12]
   19f08:	str	r3, [sp, #24]
   19f0c:	ldr	r3, [r5, #24]
   19f10:	str	lr, [sp, #4]
   19f14:	ldr	lr, [r5, #16]
   19f18:	str	ip, [sp, #8]
   19f1c:	ldr	ip, [r5, #20]
   19f20:	str	r3, [sp, #20]
   19f24:	ldr	r3, [r5]
   19f28:	str	lr, [sp, #12]
   19f2c:	str	ip, [sp, #16]
   19f30:	bl	113a4 <__fprintf_chk@plt>
   19f34:	b	19cb8 <__assert_fail@plt+0x8800>
   19f38:	movw	r1, #55368	; 0xd848
   19f3c:	movt	r1, #1
   19f40:	b	19c58 <__assert_fail@plt+0x87a0>
   19f44:	strd	r4, [sp, #-12]!
   19f48:	str	lr, [sp, #8]
   19f4c:	sub	sp, sp, #12
   19f50:	ldr	r5, [sp, #24]
   19f54:	ldr	ip, [r5]
   19f58:	cmp	ip, #0
   19f5c:	beq	19f78 <__assert_fail@plt+0x8ac0>
   19f60:	mov	lr, r5
   19f64:	mov	ip, #0
   19f68:	ldr	r4, [lr, #4]!
   19f6c:	add	ip, ip, #1
   19f70:	cmp	r4, #0
   19f74:	bne	19f68 <__assert_fail@plt+0x8ab0>
   19f78:	stm	sp, {r5, ip}
   19f7c:	bl	19b64 <__assert_fail@plt+0x86ac>
   19f80:	add	sp, sp, #12
   19f84:	ldrd	r4, [sp]
   19f88:	add	sp, sp, #8
   19f8c:	pop	{pc}		; (ldr pc, [sp], #4)
   19f90:	push	{lr}		; (str lr, [sp, #-4]!)
   19f94:	sub	sp, sp, #52	; 0x34
   19f98:	ldr	ip, [sp, #56]	; 0x38
   19f9c:	ldr	lr, [ip]
   19fa0:	cmp	lr, #0
   19fa4:	str	lr, [sp, #8]
   19fa8:	beq	1a040 <__assert_fail@plt+0x8b88>
   19fac:	ldr	lr, [ip, #4]
   19fb0:	cmp	lr, #0
   19fb4:	str	lr, [sp, #12]
   19fb8:	beq	1a054 <__assert_fail@plt+0x8b9c>
   19fbc:	ldr	lr, [ip, #8]
   19fc0:	cmp	lr, #0
   19fc4:	str	lr, [sp, #16]
   19fc8:	beq	1a05c <__assert_fail@plt+0x8ba4>
   19fcc:	ldr	lr, [ip, #12]
   19fd0:	cmp	lr, #0
   19fd4:	str	lr, [sp, #20]
   19fd8:	beq	1a064 <__assert_fail@plt+0x8bac>
   19fdc:	ldr	lr, [ip, #16]
   19fe0:	cmp	lr, #0
   19fe4:	str	lr, [sp, #24]
   19fe8:	beq	1a06c <__assert_fail@plt+0x8bb4>
   19fec:	ldr	lr, [ip, #20]
   19ff0:	cmp	lr, #0
   19ff4:	str	lr, [sp, #28]
   19ff8:	beq	1a074 <__assert_fail@plt+0x8bbc>
   19ffc:	ldr	lr, [ip, #24]
   1a000:	cmp	lr, #0
   1a004:	str	lr, [sp, #32]
   1a008:	beq	1a07c <__assert_fail@plt+0x8bc4>
   1a00c:	ldr	lr, [ip, #28]
   1a010:	cmp	lr, #0
   1a014:	str	lr, [sp, #36]	; 0x24
   1a018:	beq	1a084 <__assert_fail@plt+0x8bcc>
   1a01c:	ldr	lr, [ip, #32]
   1a020:	cmp	lr, #0
   1a024:	str	lr, [sp, #40]	; 0x28
   1a028:	beq	1a08c <__assert_fail@plt+0x8bd4>
   1a02c:	ldr	ip, [ip, #36]	; 0x24
   1a030:	cmp	ip, #0
   1a034:	str	ip, [sp, #44]	; 0x2c
   1a038:	movne	lr, #10
   1a03c:	moveq	lr, #9
   1a040:	add	ip, sp, #8
   1a044:	stm	sp, {ip, lr}
   1a048:	bl	19b64 <__assert_fail@plt+0x86ac>
   1a04c:	add	sp, sp, #52	; 0x34
   1a050:	pop	{pc}		; (ldr pc, [sp], #4)
   1a054:	mov	lr, #1
   1a058:	b	1a040 <__assert_fail@plt+0x8b88>
   1a05c:	mov	lr, #2
   1a060:	b	1a040 <__assert_fail@plt+0x8b88>
   1a064:	mov	lr, #3
   1a068:	b	1a040 <__assert_fail@plt+0x8b88>
   1a06c:	mov	lr, #4
   1a070:	b	1a040 <__assert_fail@plt+0x8b88>
   1a074:	mov	lr, #5
   1a078:	b	1a040 <__assert_fail@plt+0x8b88>
   1a07c:	mov	lr, #6
   1a080:	b	1a040 <__assert_fail@plt+0x8b88>
   1a084:	mov	lr, #7
   1a088:	b	1a040 <__assert_fail@plt+0x8b88>
   1a08c:	mov	lr, #8
   1a090:	b	1a040 <__assert_fail@plt+0x8b88>
   1a094:	push	{r3}		; (str r3, [sp, #-4]!)
   1a098:	push	{lr}		; (str lr, [sp, #-4]!)
   1a09c:	sub	sp, sp, #56	; 0x38
   1a0a0:	ldr	ip, [sp, #64]	; 0x40
   1a0a4:	add	r3, sp, #64	; 0x40
   1a0a8:	str	r3, [sp, #12]
   1a0ac:	cmp	ip, #0
   1a0b0:	str	ip, [sp, #16]
   1a0b4:	beq	1a14c <__assert_fail@plt+0x8c94>
   1a0b8:	ldr	ip, [sp, #68]	; 0x44
   1a0bc:	cmp	ip, #0
   1a0c0:	str	ip, [sp, #20]
   1a0c4:	beq	1a170 <__assert_fail@plt+0x8cb8>
   1a0c8:	ldr	ip, [sp, #72]	; 0x48
   1a0cc:	cmp	ip, #0
   1a0d0:	str	ip, [sp, #24]
   1a0d4:	beq	1a178 <__assert_fail@plt+0x8cc0>
   1a0d8:	ldr	ip, [sp, #76]	; 0x4c
   1a0dc:	cmp	ip, #0
   1a0e0:	str	ip, [sp, #28]
   1a0e4:	beq	1a180 <__assert_fail@plt+0x8cc8>
   1a0e8:	ldr	ip, [sp, #80]	; 0x50
   1a0ec:	cmp	ip, #0
   1a0f0:	str	ip, [sp, #32]
   1a0f4:	beq	1a188 <__assert_fail@plt+0x8cd0>
   1a0f8:	ldr	ip, [sp, #84]	; 0x54
   1a0fc:	cmp	ip, #0
   1a100:	str	ip, [sp, #36]	; 0x24
   1a104:	beq	1a190 <__assert_fail@plt+0x8cd8>
   1a108:	ldr	ip, [sp, #88]	; 0x58
   1a10c:	cmp	ip, #0
   1a110:	str	ip, [sp, #40]	; 0x28
   1a114:	beq	1a198 <__assert_fail@plt+0x8ce0>
   1a118:	ldr	ip, [sp, #92]	; 0x5c
   1a11c:	cmp	ip, #0
   1a120:	str	ip, [sp, #44]	; 0x2c
   1a124:	beq	1a1a0 <__assert_fail@plt+0x8ce8>
   1a128:	ldr	ip, [sp, #96]	; 0x60
   1a12c:	cmp	ip, #0
   1a130:	str	ip, [sp, #48]	; 0x30
   1a134:	beq	1a1a8 <__assert_fail@plt+0x8cf0>
   1a138:	ldr	r3, [sp, #100]	; 0x64
   1a13c:	cmp	r3, #0
   1a140:	str	r3, [sp, #52]	; 0x34
   1a144:	movne	ip, #10
   1a148:	moveq	ip, #9
   1a14c:	ldr	r3, [sp, #60]	; 0x3c
   1a150:	add	lr, sp, #16
   1a154:	str	lr, [sp]
   1a158:	str	ip, [sp, #4]
   1a15c:	bl	19b64 <__assert_fail@plt+0x86ac>
   1a160:	add	sp, sp, #56	; 0x38
   1a164:	pop	{lr}		; (ldr lr, [sp], #4)
   1a168:	add	sp, sp, #4
   1a16c:	bx	lr
   1a170:	mov	ip, #1
   1a174:	b	1a14c <__assert_fail@plt+0x8c94>
   1a178:	mov	ip, #2
   1a17c:	b	1a14c <__assert_fail@plt+0x8c94>
   1a180:	mov	ip, #3
   1a184:	b	1a14c <__assert_fail@plt+0x8c94>
   1a188:	mov	ip, #4
   1a18c:	b	1a14c <__assert_fail@plt+0x8c94>
   1a190:	mov	ip, #5
   1a194:	b	1a14c <__assert_fail@plt+0x8c94>
   1a198:	mov	ip, #6
   1a19c:	b	1a14c <__assert_fail@plt+0x8c94>
   1a1a0:	mov	ip, #7
   1a1a4:	b	1a14c <__assert_fail@plt+0x8c94>
   1a1a8:	mov	ip, #8
   1a1ac:	b	1a14c <__assert_fail@plt+0x8c94>
   1a1b0:	movw	r3, #57780	; 0xe1b4
   1a1b4:	movt	r3, #2
   1a1b8:	str	r4, [sp, #-8]!
   1a1bc:	mov	r0, #10
   1a1c0:	ldr	r1, [r3]
   1a1c4:	str	lr, [sp, #4]
   1a1c8:	bl	111dc <fputc_unlocked@plt>
   1a1cc:	mov	r2, #5
   1a1d0:	movw	r1, #55428	; 0xd884
   1a1d4:	movt	r1, #1
   1a1d8:	mov	r0, #0
   1a1dc:	bl	111e8 <dcgettext@plt>
   1a1e0:	mov	r1, r0
   1a1e4:	movw	r2, #55448	; 0xd898
   1a1e8:	movt	r2, #1
   1a1ec:	mov	r0, #1
   1a1f0:	bl	11380 <__printf_chk@plt>
   1a1f4:	mov	r2, #5
   1a1f8:	movw	r1, #55472	; 0xd8b0
   1a1fc:	movt	r1, #1
   1a200:	mov	r0, #0
   1a204:	bl	111e8 <dcgettext@plt>
   1a208:	mov	r1, r0
   1a20c:	movw	r3, #53384	; 0xd088
   1a210:	movt	r3, #1
   1a214:	movw	r2, #53424	; 0xd0b0
   1a218:	movt	r2, #1
   1a21c:	mov	r0, #1
   1a220:	bl	11380 <__printf_chk@plt>
   1a224:	mov	r2, #5
   1a228:	movw	r1, #55492	; 0xd8c4
   1a22c:	movt	r1, #1
   1a230:	mov	r0, #0
   1a234:	bl	111e8 <dcgettext@plt>
   1a238:	mov	r1, r0
   1a23c:	movw	r2, #55532	; 0xd8ec
   1a240:	movt	r2, #1
   1a244:	mov	r0, #1
   1a248:	ldr	r4, [sp]
   1a24c:	ldr	lr, [sp, #4]
   1a250:	add	sp, sp, #8
   1a254:	b	11380 <__printf_chk@plt>
   1a258:	str	r4, [sp, #-8]!
   1a25c:	str	lr, [sp, #4]
   1a260:	bl	11458 <aligned_alloc@plt>
   1a264:	cmp	r0, #0
   1a268:	beq	1a278 <__assert_fail@plt+0x8dc0>
   1a26c:	ldr	r4, [sp]
   1a270:	add	sp, sp, #4
   1a274:	pop	{pc}		; (ldr pc, [sp], #4)
   1a278:	bl	1a880 <__assert_fail@plt+0x93c8>
   1a27c:	strd	r4, [sp, #-16]!
   1a280:	mov	r4, r0
   1a284:	mov	r5, r2
   1a288:	str	r6, [sp, #8]
   1a28c:	mov	r6, r1
   1a290:	str	lr, [sp, #12]
   1a294:	bl	1bd84 <__assert_fail@plt+0xa8cc>
   1a298:	cmp	r0, #0
   1a29c:	beq	1a2b0 <__assert_fail@plt+0x8df8>
   1a2a0:	ldrd	r4, [sp]
   1a2a4:	ldr	r6, [sp, #8]
   1a2a8:	add	sp, sp, #12
   1a2ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2b0:	cmp	r4, #0
   1a2b4:	beq	1a2c4 <__assert_fail@plt+0x8e0c>
   1a2b8:	cmp	r6, #0
   1a2bc:	cmpne	r5, #0
   1a2c0:	beq	1a2a0 <__assert_fail@plt+0x8de8>
   1a2c4:	bl	1a880 <__assert_fail@plt+0x93c8>
   1a2c8:	str	r4, [sp, #-8]!
   1a2cc:	str	lr, [sp, #4]
   1a2d0:	bl	1b91c <__assert_fail@plt+0xa464>
   1a2d4:	cmp	r0, #0
   1a2d8:	beq	1a2e8 <__assert_fail@plt+0x8e30>
   1a2dc:	ldr	r4, [sp]
   1a2e0:	add	sp, sp, #4
   1a2e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2e8:	bl	1a880 <__assert_fail@plt+0x93c8>
   1a2ec:	str	r4, [sp, #-8]!
   1a2f0:	str	lr, [sp, #4]
   1a2f4:	bl	1b91c <__assert_fail@plt+0xa464>
   1a2f8:	cmp	r0, #0
   1a2fc:	beq	1a30c <__assert_fail@plt+0x8e54>
   1a300:	ldr	r4, [sp]
   1a304:	add	sp, sp, #4
   1a308:	pop	{pc}		; (ldr pc, [sp], #4)
   1a30c:	bl	1a880 <__assert_fail@plt+0x93c8>
   1a310:	str	r4, [sp, #-8]!
   1a314:	str	lr, [sp, #4]
   1a318:	bl	1b91c <__assert_fail@plt+0xa464>
   1a31c:	cmp	r0, #0
   1a320:	beq	1a330 <__assert_fail@plt+0x8e78>
   1a324:	ldr	r4, [sp]
   1a328:	add	sp, sp, #4
   1a32c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a330:	bl	1a880 <__assert_fail@plt+0x93c8>
   1a334:	strd	r4, [sp, #-16]!
   1a338:	mov	r5, r0
   1a33c:	mov	r4, r1
   1a340:	str	r6, [sp, #8]
   1a344:	str	lr, [sp, #12]
   1a348:	bl	1b958 <__assert_fail@plt+0xa4a0>
   1a34c:	cmp	r0, #0
   1a350:	beq	1a364 <__assert_fail@plt+0x8eac>
   1a354:	ldrd	r4, [sp]
   1a358:	ldr	r6, [sp, #8]
   1a35c:	add	sp, sp, #12
   1a360:	pop	{pc}		; (ldr pc, [sp], #4)
   1a364:	adds	r4, r4, #0
   1a368:	movne	r4, #1
   1a36c:	cmp	r5, #0
   1a370:	moveq	r4, #1
   1a374:	cmp	r4, #0
   1a378:	beq	1a354 <__assert_fail@plt+0x8e9c>
   1a37c:	bl	1a880 <__assert_fail@plt+0x93c8>
   1a380:	cmp	r1, #0
   1a384:	orreq	r1, r1, #1
   1a388:	str	r4, [sp, #-8]!
   1a38c:	str	lr, [sp, #4]
   1a390:	bl	1b958 <__assert_fail@plt+0xa4a0>
   1a394:	cmp	r0, #0
   1a398:	beq	1a3a8 <__assert_fail@plt+0x8ef0>
   1a39c:	ldr	r4, [sp]
   1a3a0:	add	sp, sp, #4
   1a3a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3a8:	bl	1a880 <__assert_fail@plt+0x93c8>
   1a3ac:	strd	r4, [sp, #-16]!
   1a3b0:	mov	r4, r0
   1a3b4:	mov	r5, r2
   1a3b8:	str	r6, [sp, #8]
   1a3bc:	mov	r6, r1
   1a3c0:	str	lr, [sp, #12]
   1a3c4:	bl	1bd84 <__assert_fail@plt+0xa8cc>
   1a3c8:	cmp	r0, #0
   1a3cc:	beq	1a3e0 <__assert_fail@plt+0x8f28>
   1a3d0:	ldrd	r4, [sp]
   1a3d4:	ldr	r6, [sp, #8]
   1a3d8:	add	sp, sp, #12
   1a3dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3e0:	cmp	r4, #0
   1a3e4:	beq	1a3f4 <__assert_fail@plt+0x8f3c>
   1a3e8:	cmp	r6, #0
   1a3ec:	cmpne	r5, #0
   1a3f0:	beq	1a3d0 <__assert_fail@plt+0x8f18>
   1a3f4:	bl	1a880 <__assert_fail@plt+0x93c8>
   1a3f8:	cmp	r2, #0
   1a3fc:	cmpne	r1, #0
   1a400:	str	r4, [sp, #-8]!
   1a404:	moveq	r2, #1
   1a408:	str	lr, [sp, #4]
   1a40c:	moveq	r1, r2
   1a410:	bl	1bd84 <__assert_fail@plt+0xa8cc>
   1a414:	cmp	r0, #0
   1a418:	beq	1a428 <__assert_fail@plt+0x8f70>
   1a41c:	ldr	r4, [sp]
   1a420:	add	sp, sp, #4
   1a424:	pop	{pc}		; (ldr pc, [sp], #4)
   1a428:	bl	1a880 <__assert_fail@plt+0x93c8>
   1a42c:	mov	r2, r1
   1a430:	mov	r1, r0
   1a434:	str	r4, [sp, #-8]!
   1a438:	mov	r0, #0
   1a43c:	str	lr, [sp, #4]
   1a440:	bl	1bd84 <__assert_fail@plt+0xa8cc>
   1a444:	cmp	r0, #0
   1a448:	beq	1a458 <__assert_fail@plt+0x8fa0>
   1a44c:	ldr	r4, [sp]
   1a450:	add	sp, sp, #4
   1a454:	pop	{pc}		; (ldr pc, [sp], #4)
   1a458:	bl	1a880 <__assert_fail@plt+0x93c8>
   1a45c:	cmp	r1, #0
   1a460:	cmpne	r0, #0
   1a464:	str	r4, [sp, #-8]!
   1a468:	moveq	r2, #1
   1a46c:	movne	r2, r1
   1a470:	str	lr, [sp, #4]
   1a474:	movne	r1, r0
   1a478:	moveq	r1, r2
   1a47c:	mov	r0, #0
   1a480:	bl	1bd84 <__assert_fail@plt+0xa8cc>
   1a484:	cmp	r0, #0
   1a488:	beq	1a498 <__assert_fail@plt+0x8fe0>
   1a48c:	ldr	r4, [sp]
   1a490:	add	sp, sp, #4
   1a494:	pop	{pc}		; (ldr pc, [sp], #4)
   1a498:	bl	1a880 <__assert_fail@plt+0x93c8>
   1a49c:	cmp	r0, #0
   1a4a0:	strd	r4, [sp, #-16]!
   1a4a4:	mov	r5, r1
   1a4a8:	ldr	r4, [r1]
   1a4ac:	str	r6, [sp, #8]
   1a4b0:	str	lr, [sp, #12]
   1a4b4:	beq	1a4fc <__assert_fail@plt+0x9044>
   1a4b8:	lsr	r3, r4, #1
   1a4bc:	add	r3, r3, #1
   1a4c0:	adds	r4, r4, r3
   1a4c4:	bcs	1a4f8 <__assert_fail@plt+0x9040>
   1a4c8:	mov	r2, #1
   1a4cc:	mov	r1, r4
   1a4d0:	bl	1bd84 <__assert_fail@plt+0xa8cc>
   1a4d4:	cmp	r0, #0
   1a4d8:	beq	1a4f0 <__assert_fail@plt+0x9038>
   1a4dc:	ldr	r6, [sp, #8]
   1a4e0:	str	r4, [r5]
   1a4e4:	ldrd	r4, [sp]
   1a4e8:	add	sp, sp, #12
   1a4ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4f0:	cmp	r4, #0
   1a4f4:	beq	1a4dc <__assert_fail@plt+0x9024>
   1a4f8:	bl	1a880 <__assert_fail@plt+0x93c8>
   1a4fc:	cmp	r4, #0
   1a500:	mov	r2, #1
   1a504:	moveq	r4, #64	; 0x40
   1a508:	mov	r1, r4
   1a50c:	bl	1bd84 <__assert_fail@plt+0xa8cc>
   1a510:	cmp	r0, #0
   1a514:	bne	1a4dc <__assert_fail@plt+0x9024>
   1a518:	b	1a4f8 <__assert_fail@plt+0x9040>
   1a51c:	cmp	r0, #0
   1a520:	strd	r4, [sp, #-16]!
   1a524:	mov	r5, r1
   1a528:	ldr	r4, [r1]
   1a52c:	str	r6, [sp, #8]
   1a530:	mov	r6, r2
   1a534:	str	lr, [sp, #12]
   1a538:	beq	1a580 <__assert_fail@plt+0x90c8>
   1a53c:	lsr	r3, r4, #1
   1a540:	add	r3, r3, #1
   1a544:	adds	r4, r4, r3
   1a548:	bcs	1a57c <__assert_fail@plt+0x90c4>
   1a54c:	mov	r1, r4
   1a550:	bl	1bd84 <__assert_fail@plt+0xa8cc>
   1a554:	cmp	r0, #0
   1a558:	beq	1a570 <__assert_fail@plt+0x90b8>
   1a55c:	ldr	r6, [sp, #8]
   1a560:	str	r4, [r5]
   1a564:	ldrd	r4, [sp]
   1a568:	add	sp, sp, #12
   1a56c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a570:	cmp	r4, #0
   1a574:	cmpne	r6, #0
   1a578:	beq	1a55c <__assert_fail@plt+0x90a4>
   1a57c:	bl	1a880 <__assert_fail@plt+0x93c8>
   1a580:	cmp	r4, #0
   1a584:	bne	1a598 <__assert_fail@plt+0x90e0>
   1a588:	mov	r4, #64	; 0x40
   1a58c:	udiv	r4, r4, r2
   1a590:	cmp	r2, #64	; 0x40
   1a594:	addhi	r4, r4, #1
   1a598:	mov	r2, r6
   1a59c:	mov	r1, r4
   1a5a0:	mov	r0, #0
   1a5a4:	bl	1bd84 <__assert_fail@plt+0xa8cc>
   1a5a8:	cmp	r0, #0
   1a5ac:	bne	1a55c <__assert_fail@plt+0x90a4>
   1a5b0:	b	1a57c <__assert_fail@plt+0x90c4>
   1a5b4:	ldr	ip, [r1]
   1a5b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a5bc:	strd	r6, [sp, #8]
   1a5c0:	mov	r7, r1
   1a5c4:	mov	r6, r0
   1a5c8:	str	r8, [sp, #16]
   1a5cc:	mvn	r8, r3
   1a5d0:	lsr	r8, r8, #31
   1a5d4:	str	lr, [sp, #20]
   1a5d8:	asr	r1, ip, #1
   1a5dc:	ldr	lr, [sp, #24]
   1a5e0:	adds	r4, ip, r1
   1a5e4:	mvnvs	r4, #-2147483648	; 0x80000000
   1a5e8:	cmp	r3, r4
   1a5ec:	movge	r1, #0
   1a5f0:	andlt	r1, r8, #1
   1a5f4:	cmp	r1, #0
   1a5f8:	movne	r4, r3
   1a5fc:	smull	r0, r1, r4, lr
   1a600:	cmp	r1, r0, asr #31
   1a604:	bne	1a6b4 <__assert_fail@plt+0x91fc>
   1a608:	cmp	r0, #63	; 0x3f
   1a60c:	mov	r5, r0
   1a610:	ble	1a680 <__assert_fail@plt+0x91c8>
   1a614:	cmp	r6, #0
   1a618:	sub	r1, r4, ip
   1a61c:	streq	r6, [r7]
   1a620:	cmp	r1, r2
   1a624:	bge	1a654 <__assert_fail@plt+0x919c>
   1a628:	adds	r4, ip, r2
   1a62c:	bvs	1a6b0 <__assert_fail@plt+0x91f8>
   1a630:	cmp	r4, r3
   1a634:	movle	r3, #0
   1a638:	andgt	r3, r8, #1
   1a63c:	cmp	r3, #0
   1a640:	bne	1a6b0 <__assert_fail@plt+0x91f8>
   1a644:	smull	r0, r1, r4, lr
   1a648:	cmp	r1, r0, asr #31
   1a64c:	mov	r5, r0
   1a650:	bne	1a6b0 <__assert_fail@plt+0x91f8>
   1a654:	mov	r1, r5
   1a658:	mov	r0, r6
   1a65c:	bl	1b958 <__assert_fail@plt+0xa4a0>
   1a660:	cmp	r0, #0
   1a664:	beq	1a694 <__assert_fail@plt+0x91dc>
   1a668:	ldr	r8, [sp, #16]
   1a66c:	str	r4, [r7]
   1a670:	ldrd	r4, [sp]
   1a674:	ldrd	r6, [sp, #8]
   1a678:	add	sp, sp, #20
   1a67c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a680:	mov	r0, #64	; 0x40
   1a684:	sdiv	r4, r0, lr
   1a688:	mls	r5, lr, r4, r0
   1a68c:	sub	r5, r0, r5
   1a690:	b	1a614 <__assert_fail@plt+0x915c>
   1a694:	adds	r5, r5, #0
   1a698:	movne	r5, #1
   1a69c:	cmp	r6, #0
   1a6a0:	movne	r6, r5
   1a6a4:	moveq	r6, #1
   1a6a8:	cmp	r6, #0
   1a6ac:	beq	1a668 <__assert_fail@plt+0x91b0>
   1a6b0:	bl	1a880 <__assert_fail@plt+0x93c8>
   1a6b4:	mvn	r0, #-2147483648	; 0x80000000
   1a6b8:	b	1a684 <__assert_fail@plt+0x91cc>
   1a6bc:	mov	r1, #1
   1a6c0:	str	r4, [sp, #-8]!
   1a6c4:	str	lr, [sp, #4]
   1a6c8:	bl	1b8a8 <__assert_fail@plt+0xa3f0>
   1a6cc:	cmp	r0, #0
   1a6d0:	beq	1a6e0 <__assert_fail@plt+0x9228>
   1a6d4:	ldr	r4, [sp]
   1a6d8:	add	sp, sp, #4
   1a6dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6e0:	bl	1a880 <__assert_fail@plt+0x93c8>
   1a6e4:	mov	r1, #1
   1a6e8:	str	r4, [sp, #-8]!
   1a6ec:	str	lr, [sp, #4]
   1a6f0:	bl	1b8a8 <__assert_fail@plt+0xa3f0>
   1a6f4:	cmp	r0, #0
   1a6f8:	beq	1a708 <__assert_fail@plt+0x9250>
   1a6fc:	ldr	r4, [sp]
   1a700:	add	sp, sp, #4
   1a704:	pop	{pc}		; (ldr pc, [sp], #4)
   1a708:	bl	1a880 <__assert_fail@plt+0x93c8>
   1a70c:	str	r4, [sp, #-8]!
   1a710:	str	lr, [sp, #4]
   1a714:	bl	1b8a8 <__assert_fail@plt+0xa3f0>
   1a718:	cmp	r0, #0
   1a71c:	beq	1a72c <__assert_fail@plt+0x9274>
   1a720:	ldr	r4, [sp]
   1a724:	add	sp, sp, #4
   1a728:	pop	{pc}		; (ldr pc, [sp], #4)
   1a72c:	bl	1a880 <__assert_fail@plt+0x93c8>
   1a730:	str	r4, [sp, #-8]!
   1a734:	str	lr, [sp, #4]
   1a738:	bl	1b8a8 <__assert_fail@plt+0xa3f0>
   1a73c:	cmp	r0, #0
   1a740:	beq	1a750 <__assert_fail@plt+0x9298>
   1a744:	ldr	r4, [sp]
   1a748:	add	sp, sp, #4
   1a74c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a750:	bl	1a880 <__assert_fail@plt+0x93c8>
   1a754:	strd	r4, [sp, #-16]!
   1a758:	mov	r4, r1
   1a75c:	str	r6, [sp, #8]
   1a760:	mov	r6, r0
   1a764:	mov	r0, r1
   1a768:	str	lr, [sp, #12]
   1a76c:	bl	1b91c <__assert_fail@plt+0xa464>
   1a770:	subs	r5, r0, #0
   1a774:	beq	1a798 <__assert_fail@plt+0x92e0>
   1a778:	mov	r2, r4
   1a77c:	mov	r1, r6
   1a780:	bl	11194 <memcpy@plt>
   1a784:	mov	r0, r5
   1a788:	ldrd	r4, [sp]
   1a78c:	ldr	r6, [sp, #8]
   1a790:	add	sp, sp, #12
   1a794:	pop	{pc}		; (ldr pc, [sp], #4)
   1a798:	bl	1a880 <__assert_fail@plt+0x93c8>
   1a79c:	strd	r4, [sp, #-16]!
   1a7a0:	mov	r4, r1
   1a7a4:	str	r6, [sp, #8]
   1a7a8:	mov	r6, r0
   1a7ac:	mov	r0, r1
   1a7b0:	str	lr, [sp, #12]
   1a7b4:	bl	1b91c <__assert_fail@plt+0xa464>
   1a7b8:	subs	r5, r0, #0
   1a7bc:	beq	1a7e0 <__assert_fail@plt+0x9328>
   1a7c0:	mov	r2, r4
   1a7c4:	mov	r1, r6
   1a7c8:	bl	11194 <memcpy@plt>
   1a7cc:	mov	r0, r5
   1a7d0:	ldrd	r4, [sp]
   1a7d4:	ldr	r6, [sp, #8]
   1a7d8:	add	sp, sp, #12
   1a7dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7e0:	bl	1a880 <__assert_fail@plt+0x93c8>
   1a7e4:	strd	r4, [sp, #-16]!
   1a7e8:	mov	r4, r1
   1a7ec:	str	r6, [sp, #8]
   1a7f0:	mov	r6, r0
   1a7f4:	add	r0, r1, #1
   1a7f8:	str	lr, [sp, #12]
   1a7fc:	bl	1b91c <__assert_fail@plt+0xa464>
   1a800:	subs	r5, r0, #0
   1a804:	beq	1a830 <__assert_fail@plt+0x9378>
   1a808:	mov	r3, #0
   1a80c:	mov	r1, r6
   1a810:	mov	r2, r4
   1a814:	strb	r3, [r5, r4]
   1a818:	bl	11194 <memcpy@plt>
   1a81c:	mov	r0, r5
   1a820:	ldrd	r4, [sp]
   1a824:	ldr	r6, [sp, #8]
   1a828:	add	sp, sp, #12
   1a82c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a830:	bl	1a880 <__assert_fail@plt+0x93c8>
   1a834:	strd	r4, [sp, #-16]!
   1a838:	str	r6, [sp, #8]
   1a83c:	mov	r6, r0
   1a840:	str	lr, [sp, #12]
   1a844:	bl	11314 <strlen@plt>
   1a848:	add	r4, r0, #1
   1a84c:	mov	r0, r4
   1a850:	bl	1b91c <__assert_fail@plt+0xa464>
   1a854:	subs	r5, r0, #0
   1a858:	beq	1a87c <__assert_fail@plt+0x93c4>
   1a85c:	mov	r2, r4
   1a860:	mov	r1, r6
   1a864:	bl	11194 <memcpy@plt>
   1a868:	mov	r0, r5
   1a86c:	ldrd	r4, [sp]
   1a870:	ldr	r6, [sp, #8]
   1a874:	add	sp, sp, #12
   1a878:	pop	{pc}		; (ldr pc, [sp], #4)
   1a87c:	bl	1a880 <__assert_fail@plt+0x93c8>
   1a880:	movw	r3, #57688	; 0xe158
   1a884:	movt	r3, #2
   1a888:	str	r4, [sp, #-8]!
   1a88c:	ldr	r4, [r3]
   1a890:	mov	r2, #5
   1a894:	movw	r1, #55612	; 0xd93c
   1a898:	movt	r1, #1
   1a89c:	mov	r0, #0
   1a8a0:	str	lr, [sp, #4]
   1a8a4:	bl	111e8 <dcgettext@plt>
   1a8a8:	mov	r3, r0
   1a8ac:	movw	r2, #54364	; 0xd45c
   1a8b0:	movt	r2, #1
   1a8b4:	mov	r1, #0
   1a8b8:	mov	r0, r4
   1a8bc:	bl	1129c <error@plt>
   1a8c0:	bl	114a0 <abort@plt>
   1a8c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a8c8:	strd	r6, [sp, #8]
   1a8cc:	mov	r6, r2
   1a8d0:	mov	r7, r3
   1a8d4:	str	r8, [sp, #16]
   1a8d8:	mov	r2, r1
   1a8dc:	mov	r1, #0
   1a8e0:	str	lr, [sp, #20]
   1a8e4:	sub	sp, sp, #16
   1a8e8:	mov	r8, r0
   1a8ec:	ldr	ip, [sp, #48]	; 0x30
   1a8f0:	add	r3, sp, #8
   1a8f4:	str	ip, [sp]
   1a8f8:	bl	1ab4c <__assert_fail@plt+0x9694>
   1a8fc:	subs	r4, r0, #0
   1a900:	bne	1a950 <__assert_fail@plt+0x9498>
   1a904:	ldrd	r4, [sp, #8]
   1a908:	ldrd	r0, [sp, #40]	; 0x28
   1a90c:	cmp	r5, r7
   1a910:	cmpeq	r4, r6
   1a914:	movcc	r3, #1
   1a918:	movcs	r3, #0
   1a91c:	cmp	r5, r1
   1a920:	cmpeq	r4, r0
   1a924:	orrhi	r3, r3, #1
   1a928:	cmp	r3, #0
   1a92c:	bne	1a9d0 <__assert_fail@plt+0x9518>
   1a930:	mov	r0, r4
   1a934:	mov	r1, r5
   1a938:	add	sp, sp, #16
   1a93c:	ldrd	r4, [sp]
   1a940:	ldrd	r6, [sp, #8]
   1a944:	ldr	r8, [sp, #16]
   1a948:	add	sp, sp, #20
   1a94c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a950:	bl	11338 <__errno_location@plt>
   1a954:	cmp	r4, #1
   1a958:	moveq	r3, #75	; 0x4b
   1a95c:	moveq	r4, r3
   1a960:	streq	r3, [r0]
   1a964:	beq	1a9b8 <__assert_fail@plt+0x9500>
   1a968:	cmp	r4, #3
   1a96c:	beq	1a9ac <__assert_fail@plt+0x94f4>
   1a970:	ldr	r3, [sp, #56]	; 0x38
   1a974:	ldr	r4, [r0]
   1a978:	cmp	r3, #0
   1a97c:	beq	1a9c4 <__assert_fail@plt+0x950c>
   1a980:	cmp	r4, #22
   1a984:	moveq	r4, #0
   1a988:	mov	r0, r8
   1a98c:	bl	18b10 <__assert_fail@plt+0x7658>
   1a990:	movw	r2, #54360	; 0xd458
   1a994:	movt	r2, #1
   1a998:	str	r0, [sp]
   1a99c:	mov	r1, r4
   1a9a0:	ldr	r3, [sp, #52]	; 0x34
   1a9a4:	ldr	r0, [sp, #56]	; 0x38
   1a9a8:	bl	1129c <error@plt>
   1a9ac:	mov	r3, #0
   1a9b0:	mov	r4, r3
   1a9b4:	str	r3, [r0]
   1a9b8:	ldr	r3, [sp, #56]	; 0x38
   1a9bc:	cmp	r3, #0
   1a9c0:	bne	1a988 <__assert_fail@plt+0x94d0>
   1a9c4:	mov	r3, #1
   1a9c8:	str	r3, [sp, #56]	; 0x38
   1a9cc:	b	1a980 <__assert_fail@plt+0x94c8>
   1a9d0:	bl	11338 <__errno_location@plt>
   1a9d4:	mov	r3, #0
   1a9d8:	mvn	r2, #-1073741824	; 0xc0000000
   1a9dc:	cmp	r5, r3
   1a9e0:	cmpeq	r4, r2
   1a9e4:	movhi	r3, #75	; 0x4b
   1a9e8:	movls	r3, #34	; 0x22
   1a9ec:	mov	r4, r3
   1a9f0:	str	r3, [r0]
   1a9f4:	ldr	r3, [sp, #56]	; 0x38
   1a9f8:	cmp	r3, #0
   1a9fc:	moveq	r3, #1
   1aa00:	str	r3, [sp, #56]	; 0x38
   1aa04:	b	1a988 <__assert_fail@plt+0x94d0>
   1aa08:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1aa0c:	mov	r1, #0
   1aa10:	strd	r6, [sp, #8]
   1aa14:	mov	r6, r2
   1aa18:	mov	r7, r3
   1aa1c:	str	r8, [sp, #16]
   1aa20:	mov	r2, #10
   1aa24:	mov	r8, r0
   1aa28:	str	lr, [sp, #20]
   1aa2c:	sub	sp, sp, #16
   1aa30:	ldr	ip, [sp, #48]	; 0x30
   1aa34:	add	r3, sp, #8
   1aa38:	str	ip, [sp]
   1aa3c:	bl	1ab4c <__assert_fail@plt+0x9694>
   1aa40:	subs	r4, r0, #0
   1aa44:	bne	1aa94 <__assert_fail@plt+0x95dc>
   1aa48:	ldrd	r4, [sp, #8]
   1aa4c:	ldrd	r0, [sp, #40]	; 0x28
   1aa50:	cmp	r7, r5
   1aa54:	cmpeq	r6, r4
   1aa58:	movhi	r3, #1
   1aa5c:	movls	r3, #0
   1aa60:	cmp	r1, r5
   1aa64:	cmpeq	r0, r4
   1aa68:	orrcc	r3, r3, #1
   1aa6c:	cmp	r3, #0
   1aa70:	bne	1ab14 <__assert_fail@plt+0x965c>
   1aa74:	mov	r0, r4
   1aa78:	mov	r1, r5
   1aa7c:	add	sp, sp, #16
   1aa80:	ldrd	r4, [sp]
   1aa84:	ldrd	r6, [sp, #8]
   1aa88:	ldr	r8, [sp, #16]
   1aa8c:	add	sp, sp, #20
   1aa90:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa94:	bl	11338 <__errno_location@plt>
   1aa98:	cmp	r4, #1
   1aa9c:	moveq	r3, #75	; 0x4b
   1aaa0:	moveq	r4, r3
   1aaa4:	streq	r3, [r0]
   1aaa8:	beq	1ab04 <__assert_fail@plt+0x964c>
   1aaac:	cmp	r4, #3
   1aab0:	beq	1aaf8 <__assert_fail@plt+0x9640>
   1aab4:	ldr	r3, [sp, #56]	; 0x38
   1aab8:	ldr	r4, [r0]
   1aabc:	cmp	r3, #0
   1aac0:	bne	1aacc <__assert_fail@plt+0x9614>
   1aac4:	mov	r3, #1
   1aac8:	str	r3, [sp, #56]	; 0x38
   1aacc:	cmp	r4, #22
   1aad0:	moveq	r4, #0
   1aad4:	mov	r0, r8
   1aad8:	bl	18b10 <__assert_fail@plt+0x7658>
   1aadc:	movw	r2, #54360	; 0xd458
   1aae0:	movt	r2, #1
   1aae4:	str	r0, [sp]
   1aae8:	mov	r1, r4
   1aaec:	ldr	r3, [sp, #52]	; 0x34
   1aaf0:	ldr	r0, [sp, #56]	; 0x38
   1aaf4:	bl	1129c <error@plt>
   1aaf8:	mov	r3, #0
   1aafc:	mov	r4, r3
   1ab00:	str	r3, [r0]
   1ab04:	ldr	r3, [sp, #56]	; 0x38
   1ab08:	cmp	r3, #0
   1ab0c:	bne	1aad4 <__assert_fail@plt+0x961c>
   1ab10:	b	1aac4 <__assert_fail@plt+0x960c>
   1ab14:	bl	11338 <__errno_location@plt>
   1ab18:	mov	r3, #0
   1ab1c:	mvn	r2, #-1073741824	; 0xc0000000
   1ab20:	cmp	r5, r3
   1ab24:	cmpeq	r4, r2
   1ab28:	movhi	r3, #75	; 0x4b
   1ab2c:	movls	r3, #34	; 0x22
   1ab30:	mov	r4, r3
   1ab34:	str	r3, [r0]
   1ab38:	ldr	r3, [sp, #56]	; 0x38
   1ab3c:	cmp	r3, #0
   1ab40:	moveq	r3, #1
   1ab44:	str	r3, [sp, #56]	; 0x38
   1ab48:	b	1aad4 <__assert_fail@plt+0x961c>
   1ab4c:	cmp	r2, #36	; 0x24
   1ab50:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ab54:	strd	r6, [sp, #8]
   1ab58:	strd	r8, [sp, #16]
   1ab5c:	strd	sl, [sp, #24]
   1ab60:	str	lr, [sp, #32]
   1ab64:	sub	sp, sp, #36	; 0x24
   1ab68:	bhi	1b7e0 <__assert_fail@plt+0xa328>
   1ab6c:	cmp	r1, #0
   1ab70:	mov	r6, r2
   1ab74:	mov	r5, r1
   1ab78:	mov	sl, r0
   1ab7c:	addeq	r5, sp, #28
   1ab80:	mov	r9, r3
   1ab84:	bl	11338 <__errno_location@plt>
   1ab88:	mov	r3, #0
   1ab8c:	mov	fp, r0
   1ab90:	str	r3, [r0]
   1ab94:	ldrb	r4, [sl]
   1ab98:	bl	112fc <__ctype_b_loc@plt>
   1ab9c:	ldr	r2, [r0]
   1aba0:	lsl	r3, r4, #1
   1aba4:	ldrh	r3, [r2, r3]
   1aba8:	tst	r3, #8192	; 0x2000
   1abac:	beq	1abc8 <__assert_fail@plt+0x9710>
   1abb0:	mov	r3, sl
   1abb4:	ldrb	r4, [r3, #1]!
   1abb8:	lsl	r1, r4, #1
   1abbc:	ldrh	r1, [r2, r1]
   1abc0:	tst	r1, #8192	; 0x2000
   1abc4:	bne	1abb4 <__assert_fail@plt+0x96fc>
   1abc8:	cmp	r4, #45	; 0x2d
   1abcc:	beq	1ac68 <__assert_fail@plt+0x97b0>
   1abd0:	mov	r2, r6
   1abd4:	mov	r3, #0
   1abd8:	mov	r1, r5
   1abdc:	mov	r0, sl
   1abe0:	bl	111a0 <__strtoull_internal@plt>
   1abe4:	ldr	r8, [r5]
   1abe8:	mov	r6, r0
   1abec:	mov	r7, r1
   1abf0:	cmp	r8, sl
   1abf4:	beq	1ac50 <__assert_fail@plt+0x9798>
   1abf8:	ldr	r4, [fp]
   1abfc:	cmp	r4, #0
   1ac00:	bne	1ac40 <__assert_fail@plt+0x9788>
   1ac04:	ldr	r3, [sp, #72]	; 0x48
   1ac08:	cmp	r3, #0
   1ac0c:	beq	1ac1c <__assert_fail@plt+0x9764>
   1ac10:	ldrb	sl, [r8]
   1ac14:	cmp	sl, #0
   1ac18:	bne	1afd4 <__assert_fail@plt+0x9b1c>
   1ac1c:	strd	r6, [r9]
   1ac20:	mov	r0, r4
   1ac24:	add	sp, sp, #36	; 0x24
   1ac28:	ldrd	r4, [sp]
   1ac2c:	ldrd	r6, [sp, #8]
   1ac30:	ldrd	r8, [sp, #16]
   1ac34:	ldrd	sl, [sp, #24]
   1ac38:	add	sp, sp, #32
   1ac3c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac40:	cmp	r4, #34	; 0x22
   1ac44:	bne	1ac68 <__assert_fail@plt+0x97b0>
   1ac48:	mov	r4, #1
   1ac4c:	b	1ac04 <__assert_fail@plt+0x974c>
   1ac50:	ldr	r3, [sp, #72]	; 0x48
   1ac54:	cmp	r3, #0
   1ac58:	beq	1ac68 <__assert_fail@plt+0x97b0>
   1ac5c:	ldrb	sl, [sl]
   1ac60:	cmp	sl, #0
   1ac64:	bne	1ac70 <__assert_fail@plt+0x97b8>
   1ac68:	mov	r4, #4
   1ac6c:	b	1ac20 <__assert_fail@plt+0x9768>
   1ac70:	mov	r1, sl
   1ac74:	mov	r0, r3
   1ac78:	bl	11320 <strchr@plt>
   1ac7c:	cmp	r0, #0
   1ac80:	movne	r4, #0
   1ac84:	movne	r6, #1
   1ac88:	movne	r7, r4
   1ac8c:	beq	1ac68 <__assert_fail@plt+0x97b0>
   1ac90:	sub	r3, sl, #69	; 0x45
   1ac94:	cmp	r3, #47	; 0x2f
   1ac98:	ldrls	pc, [pc, r3, lsl #2]
   1ac9c:	b	1ada4 <__assert_fail@plt+0x98ec>
   1aca0:	andeq	sl, r1, r0, ror #26
   1aca4:	andeq	sl, r1, r4, lsr #27
   1aca8:	andeq	sl, r1, r0, ror #26
   1acac:	andeq	sl, r1, r4, lsr #27
   1acb0:	andeq	sl, r1, r4, lsr #27
   1acb4:	andeq	sl, r1, r4, lsr #27
   1acb8:	andeq	sl, r1, r0, ror #26
   1acbc:	andeq	sl, r1, r4, lsr #27
   1acc0:	andeq	sl, r1, r0, ror #26
   1acc4:	andeq	sl, r1, r4, lsr #27
   1acc8:	andeq	sl, r1, r4, lsr #27
   1accc:	andeq	sl, r1, r0, ror #26
   1acd0:	andeq	sl, r1, r4, lsr #27
   1acd4:	andeq	sl, r1, r4, lsr #27
   1acd8:	andeq	sl, r1, r4, lsr #27
   1acdc:	andeq	sl, r1, r0, ror #26
   1ace0:	andeq	sl, r1, r4, lsr #27
   1ace4:	andeq	sl, r1, r4, lsr #27
   1ace8:	andeq	sl, r1, r4, lsr #27
   1acec:	andeq	sl, r1, r4, lsr #27
   1acf0:	andeq	sl, r1, r0, ror #26
   1acf4:	andeq	sl, r1, r0, ror #26
   1acf8:	andeq	sl, r1, r4, lsr #27
   1acfc:	andeq	sl, r1, r4, lsr #27
   1ad00:	andeq	sl, r1, r4, lsr #27
   1ad04:	andeq	sl, r1, r4, lsr #27
   1ad08:	andeq	sl, r1, r4, lsr #27
   1ad0c:	andeq	sl, r1, r4, lsr #27
   1ad10:	andeq	sl, r1, r4, lsr #27
   1ad14:	andeq	sl, r1, r4, lsr #27
   1ad18:	andeq	sl, r1, r4, lsr #27
   1ad1c:	andeq	sl, r1, r4, lsr #27
   1ad20:	andeq	sl, r1, r4, lsr #27
   1ad24:	andeq	sl, r1, r4, lsr #27
   1ad28:	andeq	sl, r1, r0, ror #26
   1ad2c:	andeq	sl, r1, r4, lsr #27
   1ad30:	andeq	sl, r1, r4, lsr #27
   1ad34:	andeq	sl, r1, r4, lsr #27
   1ad38:	andeq	sl, r1, r0, ror #26
   1ad3c:	andeq	sl, r1, r4, lsr #27
   1ad40:	andeq	sl, r1, r0, ror #26
   1ad44:	andeq	sl, r1, r4, lsr #27
   1ad48:	andeq	sl, r1, r4, lsr #27
   1ad4c:	andeq	sl, r1, r4, lsr #27
   1ad50:	andeq	sl, r1, r4, lsr #27
   1ad54:	andeq	sl, r1, r4, lsr #27
   1ad58:	andeq	sl, r1, r4, lsr #27
   1ad5c:	andeq	sl, r1, r0, ror #26
   1ad60:	mov	r1, #48	; 0x30
   1ad64:	ldr	r0, [sp, #72]	; 0x48
   1ad68:	bl	11320 <strchr@plt>
   1ad6c:	cmp	r0, #0
   1ad70:	beq	1ada4 <__assert_fail@plt+0x98ec>
   1ad74:	ldrb	r3, [r8, #1]
   1ad78:	cmp	r3, #68	; 0x44
   1ad7c:	beq	1b334 <__assert_fail@plt+0x9e7c>
   1ad80:	cmp	r3, #105	; 0x69
   1ad84:	beq	1afec <__assert_fail@plt+0x9b34>
   1ad88:	cmp	r3, #66	; 0x42
   1ad8c:	moveq	r3, #2
   1ad90:	movne	r3, #1
   1ad94:	moveq	ip, #1000	; 0x3e8
   1ad98:	movne	ip, #1024	; 0x400
   1ad9c:	str	r3, [sp, #12]
   1ada0:	b	1adb0 <__assert_fail@plt+0x98f8>
   1ada4:	mov	r3, #1
   1ada8:	mov	ip, #1024	; 0x400
   1adac:	str	r3, [sp, #12]
   1adb0:	sub	sl, sl, #66	; 0x42
   1adb4:	cmp	sl, #53	; 0x35
   1adb8:	ldrls	pc, [pc, sl, lsl #2]
   1adbc:	b	1af98 <__assert_fail@plt+0x9ae0>
   1adc0:	andeq	fp, r1, r0, lsl #5
   1adc4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1adc8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1adcc:	andeq	fp, r1, r0, lsr #4
   1add0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1add4:	muleq	r1, ip, r2
   1add8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1addc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ade0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ade4:	andeq	sl, r1, r0, lsr #31
   1ade8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1adec:	andeq	fp, r1, r8, asr #3
   1adf0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1adf4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1adf8:	andeq	fp, r1, ip, ror #2
   1adfc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae00:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae04:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae08:	andeq	fp, r1, ip, lsl #2
   1ae0c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae10:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae14:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae18:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae1c:	andeq	fp, r1, r0, asr #32
   1ae20:	muleq	r1, r8, lr
   1ae24:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae28:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae2c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae30:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae34:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae38:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae3c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae40:	andeq	fp, r1, r0, lsr #32
   1ae44:	andeq	sl, r1, r0, lsl #31
   1ae48:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae4c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae50:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae54:	muleq	r1, ip, r2
   1ae58:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae5c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae60:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae64:	andeq	sl, r1, r0, lsr #31
   1ae68:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae6c:	andeq	fp, r1, r8, asr #3
   1ae70:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae74:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae78:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae7c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae80:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae84:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae88:	andeq	fp, r1, ip, lsl #2
   1ae8c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae90:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae94:	andeq	fp, r1, r8
   1ae98:	asr	r3, ip, #31
   1ae9c:	mov	r2, ip
   1aea0:	cmp	r7, #0
   1aea4:	mov	r1, #0
   1aea8:	strd	r2, [sp]
   1aeac:	bne	1b3ec <__assert_fail@plt+0x9f34>
   1aeb0:	umull	r6, r7, r6, ip
   1aeb4:	mov	r2, r6
   1aeb8:	mov	r3, r7
   1aebc:	cmp	r1, #0
   1aec0:	bne	1b300 <__assert_fail@plt+0x9e48>
   1aec4:	cmp	r3, #0
   1aec8:	mov	lr, r1
   1aecc:	bne	1b518 <__assert_fail@plt+0xa060>
   1aed0:	umull	r2, r3, r2, ip
   1aed4:	mov	r0, r2
   1aed8:	mov	r1, r3
   1aedc:	cmp	lr, #0
   1aee0:	bne	1b300 <__assert_fail@plt+0x9e48>
   1aee4:	cmp	r1, #0
   1aee8:	bne	1b4f4 <__assert_fail@plt+0xa03c>
   1aeec:	umull	r0, r1, r0, ip
   1aef0:	mov	r2, r0
   1aef4:	mov	r3, r1
   1aef8:	cmp	lr, #0
   1aefc:	bne	1b300 <__assert_fail@plt+0x9e48>
   1af00:	cmp	r3, #0
   1af04:	bne	1b1a4 <__assert_fail@plt+0x9cec>
   1af08:	umull	r2, r3, r2, ip
   1af0c:	mov	r0, r2
   1af10:	mov	r1, r3
   1af14:	cmp	lr, #0
   1af18:	bne	1b300 <__assert_fail@plt+0x9e48>
   1af1c:	cmp	r1, #0
   1af20:	bne	1b3a4 <__assert_fail@plt+0x9eec>
   1af24:	umull	r0, r1, r0, ip
   1af28:	mov	r2, r0
   1af2c:	mov	r3, r1
   1af30:	cmp	lr, #0
   1af34:	bne	1b300 <__assert_fail@plt+0x9e48>
   1af38:	cmp	r3, #0
   1af3c:	mov	r7, lr
   1af40:	bne	1b380 <__assert_fail@plt+0x9ec8>
   1af44:	umull	r2, r3, r2, ip
   1af48:	mov	r6, r2
   1af4c:	mov	lr, r3
   1af50:	cmp	r7, #0
   1af54:	bne	1b300 <__assert_fail@plt+0x9e48>
   1af58:	cmp	lr, #0
   1af5c:	bne	1b344 <__assert_fail@plt+0x9e8c>
   1af60:	umull	r2, r3, r6, ip
   1af64:	mov	r0, r2
   1af68:	mov	r2, r3
   1af6c:	subs	r3, r7, #0
   1af70:	bne	1b300 <__assert_fail@plt+0x9e48>
   1af74:	mov	r6, r0
   1af78:	mov	r7, r2
   1af7c:	orr	r4, r4, r3
   1af80:	ldr	r2, [sp, #12]
   1af84:	add	r3, r8, r2
   1af88:	str	r3, [r5]
   1af8c:	ldrb	r3, [r8, r2]
   1af90:	cmp	r3, #0
   1af94:	beq	1ac1c <__assert_fail@plt+0x9764>
   1af98:	orr	r4, r4, #2
   1af9c:	b	1ac1c <__assert_fail@plt+0x9764>
   1afa0:	cmp	r7, #0
   1afa4:	asr	r1, ip, #31
   1afa8:	mov	lr, #0
   1afac:	bne	1b310 <__assert_fail@plt+0x9e58>
   1afb0:	umull	r2, r3, r6, ip
   1afb4:	mov	r6, r2
   1afb8:	mov	r7, r3
   1afbc:	cmp	lr, #0
   1afc0:	beq	1af80 <__assert_fail@plt+0x9ac8>
   1afc4:	mvn	r6, #0
   1afc8:	mov	r4, #1
   1afcc:	mov	r7, r6
   1afd0:	b	1af80 <__assert_fail@plt+0x9ac8>
   1afd4:	mov	r0, r3
   1afd8:	mov	r1, sl
   1afdc:	bl	11320 <strchr@plt>
   1afe0:	cmp	r0, #0
   1afe4:	bne	1ac90 <__assert_fail@plt+0x97d8>
   1afe8:	b	1af98 <__assert_fail@plt+0x9ae0>
   1afec:	ldrb	r3, [r8, #2]
   1aff0:	mov	ip, #1024	; 0x400
   1aff4:	cmp	r3, #66	; 0x42
   1aff8:	movne	r3, #1
   1affc:	moveq	r3, #3
   1b000:	str	r3, [sp, #12]
   1b004:	b	1adb0 <__assert_fail@plt+0x98f8>
   1b008:	lsr	r3, r7, #31
   1b00c:	adds	r6, r6, r6
   1b010:	adc	r7, r7, r7
   1b014:	cmp	r3, #0
   1b018:	beq	1af80 <__assert_fail@plt+0x9ac8>
   1b01c:	b	1afc4 <__assert_fail@plt+0x9b0c>
   1b020:	lsr	r3, r7, #23
   1b024:	lsl	r7, r7, #9
   1b028:	cmp	r3, #0
   1b02c:	lsl	r3, r6, #9
   1b030:	orr	r7, r7, r6, lsr #23
   1b034:	bne	1afc4 <__assert_fail@plt+0x9b0c>
   1b038:	mov	r6, r3
   1b03c:	b	1af80 <__assert_fail@plt+0x9ac8>
   1b040:	asr	r3, ip, #31
   1b044:	mov	r2, ip
   1b048:	cmp	r7, #0
   1b04c:	mov	r1, #0
   1b050:	strd	r2, [sp]
   1b054:	bne	1b460 <__assert_fail@plt+0x9fa8>
   1b058:	umull	r6, r7, r6, ip
   1b05c:	mov	r0, r6
   1b060:	mov	fp, r7
   1b064:	cmp	r1, #0
   1b068:	bne	1b300 <__assert_fail@plt+0x9e48>
   1b06c:	cmp	fp, #0
   1b070:	mov	lr, r1
   1b074:	bne	1b5f0 <__assert_fail@plt+0xa138>
   1b078:	umull	r0, r1, r0, ip
   1b07c:	mov	r2, r0
   1b080:	mov	r3, r1
   1b084:	cmp	lr, #0
   1b088:	bne	1b300 <__assert_fail@plt+0x9e48>
   1b08c:	cmp	r3, #0
   1b090:	bne	1b618 <__assert_fail@plt+0xa160>
   1b094:	umull	r2, r3, r2, ip
   1b098:	mov	r0, r2
   1b09c:	mov	r1, r3
   1b0a0:	cmp	lr, #0
   1b0a4:	bne	1b300 <__assert_fail@plt+0x9e48>
   1b0a8:	cmp	r1, #0
   1b0ac:	bne	1b598 <__assert_fail@plt+0xa0e0>
   1b0b0:	umull	r0, r1, r0, ip
   1b0b4:	mov	r2, r0
   1b0b8:	mov	r3, r1
   1b0bc:	cmp	lr, #0
   1b0c0:	bne	1b300 <__assert_fail@plt+0x9e48>
   1b0c4:	cmp	r3, #0
   1b0c8:	bne	1b3c8 <__assert_fail@plt+0x9f10>
   1b0cc:	umull	r2, r3, r2, ip
   1b0d0:	mov	r0, r2
   1b0d4:	mov	r1, r3
   1b0d8:	cmp	lr, #0
   1b0dc:	bne	1b300 <__assert_fail@plt+0x9e48>
   1b0e0:	cmp	r1, #0
   1b0e4:	beq	1af24 <__assert_fail@plt+0x9a6c>
   1b0e8:	umull	r6, r7, r0, ip
   1b0ec:	mov	fp, lr
   1b0f0:	mov	sl, r7
   1b0f4:	umlal	sl, fp, r1, ip
   1b0f8:	cmp	fp, #0
   1b0fc:	bne	1b800 <__assert_fail@plt+0xa348>
   1b100:	mov	r2, r6
   1b104:	mov	r3, sl
   1b108:	b	1af30 <__assert_fail@plt+0x9a78>
   1b10c:	asr	r3, ip, #31
   1b110:	mov	r2, ip
   1b114:	cmp	r7, #0
   1b118:	mov	r1, #0
   1b11c:	strd	r2, [sp]
   1b120:	bne	1b484 <__assert_fail@plt+0x9fcc>
   1b124:	umull	r6, r7, r6, ip
   1b128:	mov	r0, r6
   1b12c:	mov	fp, r7
   1b130:	cmp	r1, #0
   1b134:	bne	1b300 <__assert_fail@plt+0x9e48>
   1b138:	cmp	fp, #0
   1b13c:	mov	lr, r1
   1b140:	beq	1af24 <__assert_fail@plt+0x9a6c>
   1b144:	umull	r6, r7, r0, ip
   1b148:	mov	r3, r1
   1b14c:	mov	r2, r7
   1b150:	umlal	r2, r3, fp, ip
   1b154:	cmp	r3, #0
   1b158:	strd	r2, [sp, #16]
   1b15c:	bne	1b6e4 <__assert_fail@plt+0xa22c>
   1b160:	mov	r2, r6
   1b164:	ldr	r3, [sp, #16]
   1b168:	b	1af30 <__assert_fail@plt+0x9a78>
   1b16c:	asr	r3, ip, #31
   1b170:	mov	r2, ip
   1b174:	cmp	r7, #0
   1b178:	mov	r1, #0
   1b17c:	strd	r2, [sp]
   1b180:	bne	1b4cc <__assert_fail@plt+0xa014>
   1b184:	umull	r6, r7, r6, ip
   1b188:	mov	r2, r6
   1b18c:	mov	r3, r7
   1b190:	cmp	r1, #0
   1b194:	bne	1b300 <__assert_fail@plt+0x9e48>
   1b198:	cmp	r3, #0
   1b19c:	mov	lr, r1
   1b1a0:	beq	1af08 <__assert_fail@plt+0x9a50>
   1b1a4:	umull	r6, r7, r2, ip
   1b1a8:	mov	fp, lr
   1b1ac:	mov	sl, r7
   1b1b0:	umlal	sl, fp, r3, ip
   1b1b4:	cmp	fp, #0
   1b1b8:	bne	1b7c4 <__assert_fail@plt+0xa30c>
   1b1bc:	mov	r0, r6
   1b1c0:	mov	r1, sl
   1b1c4:	b	1af14 <__assert_fail@plt+0x9a5c>
   1b1c8:	asr	r3, ip, #31
   1b1cc:	mov	r2, ip
   1b1d0:	cmp	r7, #0
   1b1d4:	mov	r1, #0
   1b1d8:	strd	r2, [sp]
   1b1dc:	bne	1b4a8 <__assert_fail@plt+0x9ff0>
   1b1e0:	umull	r6, r7, r6, ip
   1b1e4:	mov	sl, r6
   1b1e8:	mov	lr, r7
   1b1ec:	cmp	r1, #0
   1b1f0:	bne	1afc4 <__assert_fail@plt+0x9b0c>
   1b1f4:	cmp	lr, #0
   1b1f8:	mov	r7, r1
   1b1fc:	bne	1b5bc <__assert_fail@plt+0xa104>
   1b200:	umull	sl, fp, sl, ip
   1b204:	mov	r0, sl
   1b208:	mov	r2, fp
   1b20c:	cmp	r7, #0
   1b210:	mov	r6, r0
   1b214:	mov	r7, r2
   1b218:	beq	1af80 <__assert_fail@plt+0x9ac8>
   1b21c:	b	1afc4 <__assert_fail@plt+0x9b0c>
   1b220:	asr	r3, ip, #31
   1b224:	mov	r2, ip
   1b228:	cmp	r7, #0
   1b22c:	mov	r1, #0
   1b230:	strd	r2, [sp]
   1b234:	bne	1b43c <__assert_fail@plt+0x9f84>
   1b238:	umull	r6, r7, r6, ip
   1b23c:	mov	r0, r6
   1b240:	mov	fp, r7
   1b244:	cmp	r1, #0
   1b248:	bne	1b300 <__assert_fail@plt+0x9e48>
   1b24c:	cmp	fp, #0
   1b250:	mov	lr, r1
   1b254:	beq	1b0b0 <__assert_fail@plt+0x9bf8>
   1b258:	umull	r6, r7, r0, ip
   1b25c:	mov	r3, r1
   1b260:	mov	r2, r7
   1b264:	umlal	r2, r3, fp, ip
   1b268:	cmp	r3, #0
   1b26c:	strd	r2, [sp, #16]
   1b270:	bne	1b754 <__assert_fail@plt+0xa29c>
   1b274:	mov	r2, r6
   1b278:	ldr	r3, [sp, #16]
   1b27c:	b	1b0bc <__assert_fail@plt+0x9c04>
   1b280:	lsr	r3, r7, #22
   1b284:	lsl	r7, r7, #10
   1b288:	cmp	r3, #0
   1b28c:	lsl	r3, r6, #10
   1b290:	orr	r7, r7, r6, lsr #22
   1b294:	beq	1b038 <__assert_fail@plt+0x9b80>
   1b298:	b	1afc4 <__assert_fail@plt+0x9b0c>
   1b29c:	asr	r3, ip, #31
   1b2a0:	mov	r2, ip
   1b2a4:	cmp	r7, #0
   1b2a8:	mov	r1, #0
   1b2ac:	strd	r2, [sp]
   1b2b0:	bne	1b414 <__assert_fail@plt+0x9f5c>
   1b2b4:	umull	r6, r7, r6, ip
   1b2b8:	mov	r2, r6
   1b2bc:	mov	r3, r7
   1b2c0:	cmp	r1, #0
   1b2c4:	bne	1afc4 <__assert_fail@plt+0x9b0c>
   1b2c8:	cmp	r3, #0
   1b2cc:	mov	r7, r1
   1b2d0:	bne	1b578 <__assert_fail@plt+0xa0c0>
   1b2d4:	umull	r2, r3, r2, ip
   1b2d8:	mov	r6, r2
   1b2dc:	mov	lr, r3
   1b2e0:	cmp	r7, #0
   1b2e4:	bne	1afc4 <__assert_fail@plt+0x9b0c>
   1b2e8:	cmp	lr, #0
   1b2ec:	bne	1b53c <__assert_fail@plt+0xa084>
   1b2f0:	umull	r2, r3, r6, ip
   1b2f4:	mov	r0, r2
   1b2f8:	mov	r2, r3
   1b2fc:	b	1b20c <__assert_fail@plt+0x9d54>
   1b300:	mvn	r6, #0
   1b304:	mov	r3, #1
   1b308:	mov	r7, r6
   1b30c:	b	1af7c <__assert_fail@plt+0x9ac4>
   1b310:	umull	sl, fp, r6, ip
   1b314:	mov	r3, lr
   1b318:	mov	r2, fp
   1b31c:	umlal	r2, r3, r7, ip
   1b320:	cmp	r3, #0
   1b324:	bne	1b71c <__assert_fail@plt+0xa264>
   1b328:	mov	r6, sl
   1b32c:	mov	r7, r2
   1b330:	b	1afbc <__assert_fail@plt+0x9b04>
   1b334:	mov	r3, #2
   1b338:	mov	ip, #1000	; 0x3e8
   1b33c:	str	r3, [sp, #12]
   1b340:	b	1adb0 <__assert_fail@plt+0x98f8>
   1b344:	umull	r0, r1, r6, ip
   1b348:	mov	r3, r7
   1b34c:	mov	r2, r1
   1b350:	strd	r0, [sp, #16]
   1b354:	umlal	r2, r3, lr, ip
   1b358:	cmp	r3, #0
   1b35c:	beq	1af6c <__assert_fail@plt+0x9ab4>
   1b360:	ldrd	sl, [sp]
   1b364:	mov	r7, #1
   1b368:	ldr	r0, [sp, #16]
   1b36c:	ldr	r3, [sp, #20]
   1b370:	mul	r2, r6, fp
   1b374:	mla	r2, lr, sl, r2
   1b378:	add	r2, r2, r3
   1b37c:	b	1af6c <__assert_fail@plt+0x9ab4>
   1b380:	umull	sl, fp, r2, ip
   1b384:	mov	r1, lr
   1b388:	mov	r0, fp
   1b38c:	umlal	r0, r1, r3, ip
   1b390:	cmp	r1, #0
   1b394:	bne	1b674 <__assert_fail@plt+0xa1bc>
   1b398:	mov	r6, sl
   1b39c:	mov	lr, r0
   1b3a0:	b	1af50 <__assert_fail@plt+0x9a98>
   1b3a4:	umull	sl, fp, r0, ip
   1b3a8:	mov	r7, lr
   1b3ac:	mov	r6, fp
   1b3b0:	umlal	r6, r7, r1, ip
   1b3b4:	cmp	r7, #0
   1b3b8:	bne	1b81c <__assert_fail@plt+0xa364>
   1b3bc:	mov	r2, sl
   1b3c0:	mov	r3, r6
   1b3c4:	b	1af30 <__assert_fail@plt+0x9a78>
   1b3c8:	umull	sl, fp, r2, ip
   1b3cc:	mov	r7, lr
   1b3d0:	mov	r6, fp
   1b3d4:	umlal	r6, r7, r3, ip
   1b3d8:	cmp	r7, #0
   1b3dc:	bne	1b6ac <__assert_fail@plt+0xa1f4>
   1b3e0:	mov	r0, sl
   1b3e4:	mov	r1, r6
   1b3e8:	b	1b0d8 <__assert_fail@plt+0x9c20>
   1b3ec:	umull	sl, fp, r6, ip
   1b3f0:	mov	r3, r1
   1b3f4:	mov	r2, fp
   1b3f8:	umlal	r2, r3, r7, ip
   1b3fc:	cmp	r3, #0
   1b400:	strd	r2, [sp, #16]
   1b404:	bne	1b690 <__assert_fail@plt+0xa1d8>
   1b408:	mov	r2, sl
   1b40c:	ldr	r3, [sp, #16]
   1b410:	b	1aebc <__assert_fail@plt+0x9a04>
   1b414:	umull	sl, fp, r6, ip
   1b418:	mov	r3, r1
   1b41c:	mov	r2, fp
   1b420:	umlal	r2, r3, r7, ip
   1b424:	cmp	r3, #0
   1b428:	strd	r2, [sp, #16]
   1b42c:	bne	1b770 <__assert_fail@plt+0xa2b8>
   1b430:	mov	r2, sl
   1b434:	ldr	r3, [sp, #16]
   1b438:	b	1b2c0 <__assert_fail@plt+0x9e08>
   1b43c:	umull	sl, fp, r6, ip
   1b440:	mov	r3, r1
   1b444:	mov	r2, fp
   1b448:	umlal	r2, r3, r7, ip
   1b44c:	cmp	r3, #0
   1b450:	bne	1b63c <__assert_fail@plt+0xa184>
   1b454:	mov	r0, sl
   1b458:	mov	fp, r2
   1b45c:	b	1b244 <__assert_fail@plt+0x9d8c>
   1b460:	umull	sl, fp, r6, ip
   1b464:	mov	r3, r1
   1b468:	mov	r2, fp
   1b46c:	umlal	r2, r3, r7, ip
   1b470:	cmp	r3, #0
   1b474:	bne	1b700 <__assert_fail@plt+0xa248>
   1b478:	mov	r0, sl
   1b47c:	mov	fp, r2
   1b480:	b	1b064 <__assert_fail@plt+0x9bac>
   1b484:	umull	sl, fp, r6, ip
   1b488:	mov	r3, r1
   1b48c:	mov	r2, fp
   1b490:	umlal	r2, r3, r7, ip
   1b494:	cmp	r3, #0
   1b498:	bne	1b78c <__assert_fail@plt+0xa2d4>
   1b49c:	mov	r0, sl
   1b4a0:	mov	fp, r2
   1b4a4:	b	1b130 <__assert_fail@plt+0x9c78>
   1b4a8:	umull	sl, fp, r6, ip
   1b4ac:	mov	r3, r1
   1b4b0:	mov	r2, fp
   1b4b4:	strd	sl, [sp, #16]
   1b4b8:	umlal	r2, r3, r7, ip
   1b4bc:	cmp	r3, #0
   1b4c0:	bne	1b734 <__assert_fail@plt+0xa27c>
   1b4c4:	mov	lr, r2
   1b4c8:	b	1b1ec <__assert_fail@plt+0x9d34>
   1b4cc:	umull	sl, fp, r6, ip
   1b4d0:	mov	r3, r1
   1b4d4:	mov	r2, fp
   1b4d8:	umlal	r2, r3, r7, ip
   1b4dc:	cmp	r3, #0
   1b4e0:	strd	r2, [sp, #16]
   1b4e4:	bne	1b838 <__assert_fail@plt+0xa380>
   1b4e8:	mov	r2, sl
   1b4ec:	ldr	r3, [sp, #16]
   1b4f0:	b	1b190 <__assert_fail@plt+0x9cd8>
   1b4f4:	umull	sl, fp, r0, ip
   1b4f8:	mov	r7, lr
   1b4fc:	mov	r6, fp
   1b500:	umlal	r6, r7, r1, ip
   1b504:	cmp	r7, #0
   1b508:	bne	1b854 <__assert_fail@plt+0xa39c>
   1b50c:	mov	r2, sl
   1b510:	mov	r3, r6
   1b514:	b	1aef8 <__assert_fail@plt+0x9a40>
   1b518:	umull	r6, r7, r2, ip
   1b51c:	mov	fp, r1
   1b520:	mov	sl, r7
   1b524:	umlal	sl, fp, r3, ip
   1b528:	cmp	fp, #0
   1b52c:	bne	1b6c8 <__assert_fail@plt+0xa210>
   1b530:	mov	r0, r6
   1b534:	mov	r1, sl
   1b538:	b	1aedc <__assert_fail@plt+0x9a24>
   1b53c:	umull	r0, r1, r6, ip
   1b540:	mov	r3, r7
   1b544:	mov	r2, r1
   1b548:	strd	r0, [sp, #16]
   1b54c:	umlal	r2, r3, lr, ip
   1b550:	cmp	r3, #0
   1b554:	beq	1b20c <__assert_fail@plt+0x9d54>
   1b558:	ldrd	sl, [sp]
   1b55c:	mov	r7, #1
   1b560:	ldr	r0, [sp, #16]
   1b564:	ldr	r3, [sp, #20]
   1b568:	mul	r2, r6, fp
   1b56c:	mla	r2, lr, sl, r2
   1b570:	add	r2, r2, r3
   1b574:	b	1b20c <__assert_fail@plt+0x9d54>
   1b578:	umull	sl, fp, r2, ip
   1b57c:	mov	r0, fp
   1b580:	umlal	r0, r1, r3, ip
   1b584:	cmp	r1, #0
   1b588:	bne	1b870 <__assert_fail@plt+0xa3b8>
   1b58c:	mov	r6, sl
   1b590:	mov	lr, r0
   1b594:	b	1b2e0 <__assert_fail@plt+0x9e28>
   1b598:	umull	r6, r7, r0, ip
   1b59c:	mov	fp, lr
   1b5a0:	mov	sl, r7
   1b5a4:	umlal	sl, fp, r1, ip
   1b5a8:	cmp	fp, #0
   1b5ac:	bne	1b7a8 <__assert_fail@plt+0xa2f0>
   1b5b0:	mov	r2, r6
   1b5b4:	mov	r3, sl
   1b5b8:	b	1b0bc <__assert_fail@plt+0x9c04>
   1b5bc:	umull	r0, r1, sl, ip
   1b5c0:	mov	r3, r7
   1b5c4:	mov	r2, r1
   1b5c8:	umlal	r2, r3, lr, ip
   1b5cc:	cmp	r3, #0
   1b5d0:	beq	1b20c <__assert_fail@plt+0x9d54>
   1b5d4:	ldr	r3, [sp, #4]
   1b5d8:	mov	r7, #1
   1b5dc:	mul	r2, sl, r3
   1b5e0:	ldr	r3, [sp]
   1b5e4:	mla	r2, lr, r3, r2
   1b5e8:	add	r2, r2, r1
   1b5ec:	b	1b20c <__assert_fail@plt+0x9d54>
   1b5f0:	umull	r6, r7, r0, ip
   1b5f4:	mov	r3, r1
   1b5f8:	mov	r2, r7
   1b5fc:	umlal	r2, r3, fp, ip
   1b600:	cmp	r3, #0
   1b604:	strd	r2, [sp, #16]
   1b608:	bne	1b88c <__assert_fail@plt+0xa3d4>
   1b60c:	mov	r2, r6
   1b610:	ldr	r3, [sp, #16]
   1b614:	b	1b084 <__assert_fail@plt+0x9bcc>
   1b618:	umull	sl, fp, r2, ip
   1b61c:	mov	r7, lr
   1b620:	mov	r6, fp
   1b624:	umlal	r6, r7, r3, ip
   1b628:	cmp	r7, #0
   1b62c:	bne	1b658 <__assert_fail@plt+0xa1a0>
   1b630:	mov	r0, sl
   1b634:	mov	r1, r6
   1b638:	b	1b0a0 <__assert_fail@plt+0x9be8>
   1b63c:	ldrd	r2, [sp]
   1b640:	mov	r0, sl
   1b644:	mov	r1, #1
   1b648:	mul	r6, r6, r3
   1b64c:	mla	r7, r2, r7, r6
   1b650:	add	fp, r7, fp
   1b654:	b	1b244 <__assert_fail@plt+0x9d8c>
   1b658:	ldrd	r6, [sp]
   1b65c:	mov	r0, sl
   1b660:	mov	lr, #1
   1b664:	mul	r2, r2, r7
   1b668:	mla	r1, r3, r6, r2
   1b66c:	add	r1, r1, fp
   1b670:	b	1b0a0 <__assert_fail@plt+0x9be8>
   1b674:	ldrd	r0, [sp]
   1b678:	mov	r6, sl
   1b67c:	mov	r7, #1
   1b680:	mul	r2, r2, r1
   1b684:	mla	lr, r3, r0, r2
   1b688:	add	lr, lr, fp
   1b68c:	b	1af50 <__assert_fail@plt+0x9a98>
   1b690:	ldm	sp, {r0, r3}
   1b694:	mov	r2, sl
   1b698:	mov	r1, #1
   1b69c:	mul	r3, r6, r3
   1b6a0:	mla	r3, r0, r7, r3
   1b6a4:	add	r3, r3, fp
   1b6a8:	b	1aebc <__assert_fail@plt+0x9a04>
   1b6ac:	ldrd	r6, [sp]
   1b6b0:	mov	r0, sl
   1b6b4:	mov	lr, #1
   1b6b8:	mul	r2, r2, r7
   1b6bc:	mla	r1, r3, r6, r2
   1b6c0:	add	r1, r1, fp
   1b6c4:	b	1b0d8 <__assert_fail@plt+0x9c20>
   1b6c8:	ldrd	sl, [sp]
   1b6cc:	mov	r0, r6
   1b6d0:	mov	lr, #1
   1b6d4:	mul	r2, r2, fp
   1b6d8:	mla	r1, r3, sl, r2
   1b6dc:	add	r1, r1, r7
   1b6e0:	b	1aedc <__assert_fail@plt+0x9a24>
   1b6e4:	ldm	sp, {r1, r3}
   1b6e8:	mov	r2, r6
   1b6ec:	mov	lr, #1
   1b6f0:	mul	r3, r0, r3
   1b6f4:	mla	r3, fp, r1, r3
   1b6f8:	add	r3, r3, r7
   1b6fc:	b	1af30 <__assert_fail@plt+0x9a78>
   1b700:	ldrd	r2, [sp]
   1b704:	mov	r0, sl
   1b708:	mov	r1, #1
   1b70c:	mul	r6, r6, r3
   1b710:	mla	r7, r2, r7, r6
   1b714:	add	fp, r7, fp
   1b718:	b	1b064 <__assert_fail@plt+0x9bac>
   1b71c:	mul	r3, r6, r1
   1b720:	mov	lr, #1
   1b724:	mov	r6, sl
   1b728:	mla	r7, ip, r7, r3
   1b72c:	add	r7, r7, fp
   1b730:	b	1afbc <__assert_fail@plt+0x9b04>
   1b734:	ldrd	r2, [sp]
   1b738:	mov	r1, #1
   1b73c:	ldr	sl, [sp, #16]
   1b740:	mul	lr, r6, r3
   1b744:	ldr	r3, [sp, #20]
   1b748:	mla	lr, r2, r7, lr
   1b74c:	add	lr, lr, r3
   1b750:	b	1b1ec <__assert_fail@plt+0x9d34>
   1b754:	ldm	sp, {r1, r3}
   1b758:	mov	r2, r6
   1b75c:	mov	lr, #1
   1b760:	mul	r3, r0, r3
   1b764:	mla	r3, fp, r1, r3
   1b768:	add	r3, r3, r7
   1b76c:	b	1b0bc <__assert_fail@plt+0x9c04>
   1b770:	ldm	sp, {r0, r3}
   1b774:	mov	r2, sl
   1b778:	mov	r1, #1
   1b77c:	mul	r3, r6, r3
   1b780:	mla	r3, r0, r7, r3
   1b784:	add	r3, r3, fp
   1b788:	b	1b2c0 <__assert_fail@plt+0x9e08>
   1b78c:	ldrd	r2, [sp]
   1b790:	mov	r0, sl
   1b794:	mov	r1, #1
   1b798:	mul	r6, r6, r3
   1b79c:	mla	r7, r2, r7, r6
   1b7a0:	add	fp, r7, fp
   1b7a4:	b	1b130 <__assert_fail@plt+0x9c78>
   1b7a8:	ldrd	sl, [sp]
   1b7ac:	mov	r2, r6
   1b7b0:	mov	lr, #1
   1b7b4:	mul	r3, r0, fp
   1b7b8:	mla	r3, r1, sl, r3
   1b7bc:	add	r3, r3, r7
   1b7c0:	b	1b0bc <__assert_fail@plt+0x9c04>
   1b7c4:	ldrd	sl, [sp]
   1b7c8:	mov	r0, r6
   1b7cc:	mov	lr, #1
   1b7d0:	mul	r2, r2, fp
   1b7d4:	mla	r1, r3, sl, r2
   1b7d8:	add	r1, r1, r7
   1b7dc:	b	1af14 <__assert_fail@plt+0x9a5c>
   1b7e0:	movw	r3, #55632	; 0xd950
   1b7e4:	movt	r3, #1
   1b7e8:	movw	r1, #55644	; 0xd95c
   1b7ec:	movt	r1, #1
   1b7f0:	movw	r0, #55660	; 0xd96c
   1b7f4:	movt	r0, #1
   1b7f8:	mov	r2, #85	; 0x55
   1b7fc:	bl	114b8 <__assert_fail@plt>
   1b800:	ldrd	sl, [sp]
   1b804:	mov	r2, r6
   1b808:	mov	lr, #1
   1b80c:	mul	r3, r0, fp
   1b810:	mla	r3, r1, sl, r3
   1b814:	add	r3, r3, r7
   1b818:	b	1af30 <__assert_fail@plt+0x9a78>
   1b81c:	ldrd	r6, [sp]
   1b820:	mov	r2, sl
   1b824:	mov	lr, #1
   1b828:	mul	r3, r0, r7
   1b82c:	mla	r3, r1, r6, r3
   1b830:	add	r3, r3, fp
   1b834:	b	1af30 <__assert_fail@plt+0x9a78>
   1b838:	ldm	sp, {r0, r3}
   1b83c:	mov	r2, sl
   1b840:	mov	r1, #1
   1b844:	mul	r3, r6, r3
   1b848:	mla	r3, r0, r7, r3
   1b84c:	add	r3, r3, fp
   1b850:	b	1b190 <__assert_fail@plt+0x9cd8>
   1b854:	ldrd	r6, [sp]
   1b858:	mov	r2, sl
   1b85c:	mov	lr, #1
   1b860:	mul	r3, r0, r7
   1b864:	mla	r3, r1, r6, r3
   1b868:	add	r3, r3, fp
   1b86c:	b	1aef8 <__assert_fail@plt+0x9a40>
   1b870:	ldrd	r0, [sp]
   1b874:	mov	r6, sl
   1b878:	mov	r7, #1
   1b87c:	mul	r2, r2, r1
   1b880:	mla	lr, r3, r0, r2
   1b884:	add	lr, lr, fp
   1b888:	b	1b2e0 <__assert_fail@plt+0x9e28>
   1b88c:	ldm	sp, {r1, r3}
   1b890:	mov	r2, r6
   1b894:	mov	lr, #1
   1b898:	mul	r3, r0, r3
   1b89c:	mla	r3, fp, r1, r3
   1b8a0:	add	r3, r3, r7
   1b8a4:	b	1b084 <__assert_fail@plt+0x9bcc>
   1b8a8:	cmp	r1, #0
   1b8ac:	cmpne	r0, #0
   1b8b0:	beq	1b8fc <__assert_fail@plt+0xa444>
   1b8b4:	strd	r4, [sp, #-16]!
   1b8b8:	umull	r4, r5, r0, r1
   1b8bc:	str	r6, [sp, #8]
   1b8c0:	str	lr, [sp, #12]
   1b8c4:	adds	r3, r5, #0
   1b8c8:	movne	r3, #1
   1b8cc:	cmp	r4, #0
   1b8d0:	blt	1b8dc <__assert_fail@plt+0xa424>
   1b8d4:	cmp	r3, #0
   1b8d8:	beq	1b908 <__assert_fail@plt+0xa450>
   1b8dc:	bl	11338 <__errno_location@plt>
   1b8e0:	mov	r3, #12
   1b8e4:	ldrd	r4, [sp]
   1b8e8:	ldr	r6, [sp, #8]
   1b8ec:	add	sp, sp, #12
   1b8f0:	str	r3, [r0]
   1b8f4:	mov	r0, #0
   1b8f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b8fc:	mov	r1, #1
   1b900:	mov	r0, r1
   1b904:	b	11128 <calloc@plt>
   1b908:	ldrd	r4, [sp]
   1b90c:	ldr	r6, [sp, #8]
   1b910:	ldr	lr, [sp, #12]
   1b914:	add	sp, sp, #16
   1b918:	b	11128 <calloc@plt>
   1b91c:	cmp	r0, #0
   1b920:	beq	1b92c <__assert_fail@plt+0xa474>
   1b924:	blt	1b934 <__assert_fail@plt+0xa47c>
   1b928:	b	112c0 <malloc@plt>
   1b92c:	mov	r0, #1
   1b930:	b	112c0 <malloc@plt>
   1b934:	str	r4, [sp, #-8]!
   1b938:	str	lr, [sp, #4]
   1b93c:	bl	11338 <__errno_location@plt>
   1b940:	mov	r3, #12
   1b944:	ldr	r4, [sp]
   1b948:	add	sp, sp, #4
   1b94c:	str	r3, [r0]
   1b950:	mov	r0, #0
   1b954:	pop	{pc}		; (ldr pc, [sp], #4)
   1b958:	cmp	r0, #0
   1b95c:	beq	1b984 <__assert_fail@plt+0xa4cc>
   1b960:	cmp	r1, #0
   1b964:	str	r4, [sp, #-8]!
   1b968:	str	lr, [sp, #4]
   1b96c:	beq	1b98c <__assert_fail@plt+0xa4d4>
   1b970:	blt	1b9a0 <__assert_fail@plt+0xa4e8>
   1b974:	ldr	r4, [sp]
   1b978:	ldr	lr, [sp, #4]
   1b97c:	add	sp, sp, #8
   1b980:	b	11200 <realloc@plt>
   1b984:	mov	r0, r1
   1b988:	b	1b91c <__assert_fail@plt+0xa464>
   1b98c:	bl	13fe8 <__assert_fail@plt+0x2b30>
   1b990:	ldr	r4, [sp]
   1b994:	add	sp, sp, #4
   1b998:	mov	r0, #0
   1b99c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9a0:	bl	11338 <__errno_location@plt>
   1b9a4:	mov	r3, #12
   1b9a8:	str	r3, [r0]
   1b9ac:	b	1b990 <__assert_fail@plt+0xa4d8>
   1b9b0:	strd	r4, [sp, #-16]!
   1b9b4:	mov	r4, r0
   1b9b8:	str	r6, [sp, #8]
   1b9bc:	str	lr, [sp, #12]
   1b9c0:	bl	11284 <__fpending@plt>
   1b9c4:	ldr	r5, [r4]
   1b9c8:	mov	r6, r0
   1b9cc:	mov	r0, r4
   1b9d0:	bl	1ba38 <__assert_fail@plt+0xa580>
   1b9d4:	mov	r4, r0
   1b9d8:	and	r5, r5, #32
   1b9dc:	cmp	r5, #0
   1b9e0:	bne	1ba18 <__assert_fail@plt+0xa560>
   1b9e4:	cmp	r0, #0
   1b9e8:	beq	1ba04 <__assert_fail@plt+0xa54c>
   1b9ec:	cmp	r6, #0
   1b9f0:	bne	1ba30 <__assert_fail@plt+0xa578>
   1b9f4:	bl	11338 <__errno_location@plt>
   1b9f8:	ldr	r4, [r0]
   1b9fc:	subs	r4, r4, #9
   1ba00:	mvnne	r4, #0
   1ba04:	mov	r0, r4
   1ba08:	ldrd	r4, [sp]
   1ba0c:	ldr	r6, [sp, #8]
   1ba10:	add	sp, sp, #12
   1ba14:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba18:	cmp	r0, #0
   1ba1c:	bne	1ba30 <__assert_fail@plt+0xa578>
   1ba20:	bl	11338 <__errno_location@plt>
   1ba24:	str	r4, [r0]
   1ba28:	mvn	r4, #0
   1ba2c:	b	1ba04 <__assert_fail@plt+0xa54c>
   1ba30:	mvn	r4, #0
   1ba34:	b	1ba04 <__assert_fail@plt+0xa54c>
   1ba38:	strd	r4, [sp, #-12]!
   1ba3c:	mov	r4, r0
   1ba40:	str	lr, [sp, #8]
   1ba44:	sub	sp, sp, #12
   1ba48:	bl	11398 <fileno@plt>
   1ba4c:	cmp	r0, #0
   1ba50:	mov	r0, r4
   1ba54:	blt	1bad8 <__assert_fail@plt+0xa620>
   1ba58:	bl	112d8 <__freading@plt>
   1ba5c:	cmp	r0, #0
   1ba60:	bne	1baa4 <__assert_fail@plt+0xa5ec>
   1ba64:	mov	r0, r4
   1ba68:	bl	1baec <__assert_fail@plt+0xa634>
   1ba6c:	cmp	r0, #0
   1ba70:	beq	1bad4 <__assert_fail@plt+0xa61c>
   1ba74:	bl	11338 <__errno_location@plt>
   1ba78:	mov	r5, r0
   1ba7c:	mov	r0, r4
   1ba80:	ldr	r4, [r5]
   1ba84:	bl	113b0 <fclose@plt>
   1ba88:	cmp	r4, #0
   1ba8c:	mvnne	r0, #0
   1ba90:	strne	r4, [r5]
   1ba94:	add	sp, sp, #12
   1ba98:	ldrd	r4, [sp]
   1ba9c:	add	sp, sp, #8
   1baa0:	pop	{pc}		; (ldr pc, [sp], #4)
   1baa4:	mov	r0, r4
   1baa8:	bl	11398 <fileno@plt>
   1baac:	mov	r1, #1
   1bab0:	mov	r2, #0
   1bab4:	mov	r3, #0
   1bab8:	str	r1, [sp]
   1babc:	bl	11260 <lseek64@plt>
   1bac0:	mvn	r3, #0
   1bac4:	mvn	r2, #0
   1bac8:	cmp	r1, r3
   1bacc:	cmpeq	r0, r2
   1bad0:	bne	1ba64 <__assert_fail@plt+0xa5ac>
   1bad4:	mov	r0, r4
   1bad8:	add	sp, sp, #12
   1badc:	ldrd	r4, [sp]
   1bae0:	ldr	lr, [sp, #8]
   1bae4:	add	sp, sp, #12
   1bae8:	b	113b0 <fclose@plt>
   1baec:	str	r4, [sp, #-8]!
   1baf0:	subs	r4, r0, #0
   1baf4:	str	lr, [sp, #4]
   1baf8:	sub	sp, sp, #8
   1bafc:	beq	1bb18 <__assert_fail@plt+0xa660>
   1bb00:	bl	112d8 <__freading@plt>
   1bb04:	cmp	r0, #0
   1bb08:	beq	1bb18 <__assert_fail@plt+0xa660>
   1bb0c:	ldr	r3, [r4]
   1bb10:	tst	r3, #256	; 0x100
   1bb14:	bne	1bb30 <__assert_fail@plt+0xa678>
   1bb18:	mov	r0, r4
   1bb1c:	add	sp, sp, #8
   1bb20:	ldr	r4, [sp]
   1bb24:	ldr	lr, [sp, #4]
   1bb28:	add	sp, sp, #8
   1bb2c:	b	11164 <fflush@plt>
   1bb30:	mov	r1, #1
   1bb34:	mov	r2, #0
   1bb38:	mov	r3, #0
   1bb3c:	mov	r0, r4
   1bb40:	str	r1, [sp]
   1bb44:	bl	1bbf8 <__assert_fail@plt+0xa740>
   1bb48:	b	1bb18 <__assert_fail@plt+0xa660>
   1bb4c:	strd	r4, [sp, #-16]!
   1bb50:	mov	r5, r1
   1bb54:	str	r6, [sp, #8]
   1bb58:	str	lr, [sp, #12]
   1bb5c:	bl	1141c <fopen64@plt>
   1bb60:	subs	r4, r0, #0
   1bb64:	beq	1bb74 <__assert_fail@plt+0xa6bc>
   1bb68:	bl	11398 <fileno@plt>
   1bb6c:	cmp	r0, #2
   1bb70:	bls	1bb88 <__assert_fail@plt+0xa6d0>
   1bb74:	mov	r0, r4
   1bb78:	ldrd	r4, [sp]
   1bb7c:	ldr	r6, [sp, #8]
   1bb80:	add	sp, sp, #12
   1bb84:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb88:	bl	1bdbc <__assert_fail@plt+0xa904>
   1bb8c:	subs	r6, r0, #0
   1bb90:	blt	1bbd8 <__assert_fail@plt+0xa720>
   1bb94:	mov	r0, r4
   1bb98:	bl	1ba38 <__assert_fail@plt+0xa580>
   1bb9c:	cmp	r0, #0
   1bba0:	bne	1bbb8 <__assert_fail@plt+0xa700>
   1bba4:	mov	r1, r5
   1bba8:	mov	r0, r6
   1bbac:	bl	1111c <fdopen@plt>
   1bbb0:	subs	r4, r0, #0
   1bbb4:	bne	1bb74 <__assert_fail@plt+0xa6bc>
   1bbb8:	bl	11338 <__errno_location@plt>
   1bbbc:	mov	r5, r0
   1bbc0:	mov	r0, r6
   1bbc4:	ldr	r6, [r5]
   1bbc8:	mov	r4, #0
   1bbcc:	bl	114ac <close@plt>
   1bbd0:	str	r6, [r5]
   1bbd4:	b	1bb74 <__assert_fail@plt+0xa6bc>
   1bbd8:	bl	11338 <__errno_location@plt>
   1bbdc:	mov	r5, r0
   1bbe0:	mov	r0, r4
   1bbe4:	ldr	r6, [r5]
   1bbe8:	mov	r4, #0
   1bbec:	bl	1ba38 <__assert_fail@plt+0xa580>
   1bbf0:	str	r6, [r5]
   1bbf4:	b	1bb74 <__assert_fail@plt+0xa6bc>
   1bbf8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1bbfc:	mov	r4, r0
   1bc00:	ldr	ip, [r0, #4]
   1bc04:	strd	r6, [sp, #8]
   1bc08:	str	lr, [sp, #20]
   1bc0c:	ldr	lr, [r0, #8]
   1bc10:	str	r8, [sp, #16]
   1bc14:	sub	sp, sp, #8
   1bc18:	ldr	r5, [sp, #32]
   1bc1c:	cmp	lr, ip
   1bc20:	beq	1bc48 <__assert_fail@plt+0xa790>
   1bc24:	mov	r0, r4
   1bc28:	str	r5, [sp, #32]
   1bc2c:	add	sp, sp, #8
   1bc30:	ldrd	r4, [sp]
   1bc34:	ldrd	r6, [sp, #8]
   1bc38:	ldr	r8, [sp, #16]
   1bc3c:	ldr	lr, [sp, #20]
   1bc40:	add	sp, sp, #24
   1bc44:	b	113bc <fseeko64@plt>
   1bc48:	ldr	ip, [r0, #16]
   1bc4c:	ldr	lr, [r0, #20]
   1bc50:	cmp	lr, ip
   1bc54:	bne	1bc24 <__assert_fail@plt+0xa76c>
   1bc58:	ldr	r8, [r0, #36]	; 0x24
   1bc5c:	cmp	r8, #0
   1bc60:	bne	1bc24 <__assert_fail@plt+0xa76c>
   1bc64:	mov	r6, r2
   1bc68:	mov	r7, r3
   1bc6c:	bl	11398 <fileno@plt>
   1bc70:	mov	r2, r6
   1bc74:	mov	r3, r7
   1bc78:	str	r5, [sp]
   1bc7c:	bl	11260 <lseek64@plt>
   1bc80:	mvn	r3, #0
   1bc84:	mvn	r2, #0
   1bc88:	cmp	r1, r3
   1bc8c:	cmpeq	r0, r2
   1bc90:	beq	1bcc0 <__assert_fail@plt+0xa808>
   1bc94:	ldr	r3, [r4]
   1bc98:	strd	r0, [r4, #80]	; 0x50
   1bc9c:	bic	r3, r3, #16
   1bca0:	str	r3, [r4]
   1bca4:	mov	r0, r8
   1bca8:	add	sp, sp, #8
   1bcac:	ldrd	r4, [sp]
   1bcb0:	ldrd	r6, [sp, #8]
   1bcb4:	ldr	r8, [sp, #16]
   1bcb8:	add	sp, sp, #20
   1bcbc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bcc0:	mvn	r8, #0
   1bcc4:	b	1bca4 <__assert_fail@plt+0xa7ec>
   1bcc8:	mov	r0, #14
   1bccc:	str	r4, [sp, #-8]!
   1bcd0:	str	lr, [sp, #4]
   1bcd4:	bl	11404 <nl_langinfo@plt>
   1bcd8:	cmp	r0, #0
   1bcdc:	beq	1bd00 <__assert_fail@plt+0xa848>
   1bce0:	ldrb	r2, [r0]
   1bce4:	movw	r3, #55700	; 0xd994
   1bce8:	movt	r3, #1
   1bcec:	ldr	r4, [sp]
   1bcf0:	add	sp, sp, #4
   1bcf4:	cmp	r2, #0
   1bcf8:	moveq	r0, r3
   1bcfc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd00:	ldr	r4, [sp]
   1bd04:	add	sp, sp, #4
   1bd08:	movw	r0, #55700	; 0xd994
   1bd0c:	movt	r0, #1
   1bd10:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd14:	strd	r4, [sp, #-20]!	; 0xffffffec
   1bd18:	mov	r5, r2
   1bd1c:	strd	r6, [sp, #8]
   1bd20:	subs	r6, r0, #0
   1bd24:	mov	r7, r1
   1bd28:	str	lr, [sp, #16]
   1bd2c:	sub	sp, sp, #12
   1bd30:	addeq	r6, sp, #4
   1bd34:	mov	r0, r6
   1bd38:	bl	11290 <mbrtowc@plt>
   1bd3c:	cmp	r5, #0
   1bd40:	cmnne	r0, #3
   1bd44:	mov	r4, r0
   1bd48:	bhi	1bd64 <__assert_fail@plt+0xa8ac>
   1bd4c:	mov	r0, r4
   1bd50:	add	sp, sp, #12
   1bd54:	ldrd	r4, [sp]
   1bd58:	ldrd	r6, [sp, #8]
   1bd5c:	add	sp, sp, #16
   1bd60:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd64:	mov	r0, #0
   1bd68:	bl	1bdc8 <__assert_fail@plt+0xa910>
   1bd6c:	cmp	r0, #0
   1bd70:	bne	1bd4c <__assert_fail@plt+0xa894>
   1bd74:	ldrb	r3, [r7]
   1bd78:	mov	r4, #1
   1bd7c:	str	r3, [r6]
   1bd80:	b	1bd4c <__assert_fail@plt+0xa894>
   1bd84:	umull	r2, r3, r1, r2
   1bd88:	cmp	r3, #0
   1bd8c:	bne	1bd98 <__assert_fail@plt+0xa8e0>
   1bd90:	mov	r1, r2
   1bd94:	b	1b958 <__assert_fail@plt+0xa4a0>
   1bd98:	str	r4, [sp, #-8]!
   1bd9c:	str	lr, [sp, #4]
   1bda0:	bl	11338 <__errno_location@plt>
   1bda4:	mov	r3, #12
   1bda8:	ldr	r4, [sp]
   1bdac:	add	sp, sp, #4
   1bdb0:	str	r3, [r0]
   1bdb4:	mov	r0, #0
   1bdb8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdbc:	mov	r2, #3
   1bdc0:	mov	r1, #0
   1bdc4:	b	13dc0 <__assert_fail@plt+0x2908>
   1bdc8:	push	{lr}		; (str lr, [sp, #-4]!)
   1bdcc:	sub	sp, sp, #268	; 0x10c
   1bdd0:	movw	r2, #257	; 0x101
   1bdd4:	add	r1, sp, #4
   1bdd8:	bl	1be20 <__assert_fail@plt+0xa968>
   1bddc:	cmp	r0, #0
   1bde0:	movne	r0, #0
   1bde4:	bne	1be18 <__assert_fail@plt+0xa960>
   1bde8:	movw	r1, #55708	; 0xd99c
   1bdec:	movt	r1, #1
   1bdf0:	add	r0, sp, #4
   1bdf4:	bl	11158 <strcmp@plt>
   1bdf8:	cmp	r0, #0
   1bdfc:	beq	1be18 <__assert_fail@plt+0xa960>
   1be00:	add	r0, sp, #4
   1be04:	movw	r1, #55712	; 0xd9a0
   1be08:	movt	r1, #1
   1be0c:	bl	11158 <strcmp@plt>
   1be10:	adds	r0, r0, #0
   1be14:	movne	r0, #1
   1be18:	add	sp, sp, #268	; 0x10c
   1be1c:	pop	{pc}		; (ldr pc, [sp], #4)
   1be20:	strd	r4, [sp, #-16]!
   1be24:	mov	r5, r1
   1be28:	mov	r1, #0
   1be2c:	mov	r4, r2
   1be30:	str	r6, [sp, #8]
   1be34:	str	lr, [sp, #12]
   1be38:	bl	113e0 <setlocale@plt>
   1be3c:	subs	r6, r0, #0
   1be40:	beq	1bec0 <__assert_fail@plt+0xaa08>
   1be44:	bl	11314 <strlen@plt>
   1be48:	cmp	r4, r0
   1be4c:	bhi	1be6c <__assert_fail@plt+0xa9b4>
   1be50:	cmp	r4, #0
   1be54:	moveq	r0, #34	; 0x22
   1be58:	bne	1be90 <__assert_fail@plt+0xa9d8>
   1be5c:	ldrd	r4, [sp]
   1be60:	ldr	r6, [sp, #8]
   1be64:	add	sp, sp, #12
   1be68:	pop	{pc}		; (ldr pc, [sp], #4)
   1be6c:	add	r2, r0, #1
   1be70:	mov	r1, r6
   1be74:	mov	r0, r5
   1be78:	bl	11194 <memcpy@plt>
   1be7c:	ldrd	r4, [sp]
   1be80:	mov	r0, #0
   1be84:	ldr	r6, [sp, #8]
   1be88:	add	sp, sp, #12
   1be8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1be90:	sub	r4, r4, #1
   1be94:	mov	r1, r6
   1be98:	mov	r2, r4
   1be9c:	mov	r0, r5
   1bea0:	bl	11194 <memcpy@plt>
   1bea4:	mov	r3, #0
   1bea8:	mov	r0, #34	; 0x22
   1beac:	strb	r3, [r5, r4]
   1beb0:	ldrd	r4, [sp]
   1beb4:	ldr	r6, [sp, #8]
   1beb8:	add	sp, sp, #12
   1bebc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bec0:	cmp	r4, #0
   1bec4:	mov	r0, #22
   1bec8:	strbne	r6, [r5]
   1becc:	ldrd	r4, [sp]
   1bed0:	ldr	r6, [sp, #8]
   1bed4:	add	sp, sp, #12
   1bed8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bedc:	mov	r1, #0
   1bee0:	b	113e0 <setlocale@plt>
   1bee4:	eor	r1, r1, #-2147483648	; 0x80000000
   1bee8:	b	1bef0 <__assert_fail@plt+0xaa38>
   1beec:	eor	r3, r3, #-2147483648	; 0x80000000
   1bef0:	push	{r4, r5, lr}
   1bef4:	lsl	r4, r1, #1
   1bef8:	lsl	r5, r3, #1
   1befc:	teq	r4, r5
   1bf00:	teqeq	r0, r2
   1bf04:	orrsne	ip, r4, r0
   1bf08:	orrsne	ip, r5, r2
   1bf0c:	mvnsne	ip, r4, asr #21
   1bf10:	mvnsne	ip, r5, asr #21
   1bf14:	beq	1c100 <__assert_fail@plt+0xac48>
   1bf18:	lsr	r4, r4, #21
   1bf1c:	rsbs	r5, r4, r5, lsr #21
   1bf20:	rsblt	r5, r5, #0
   1bf24:	ble	1bf44 <__assert_fail@plt+0xaa8c>
   1bf28:	add	r4, r4, r5
   1bf2c:	eor	r2, r0, r2
   1bf30:	eor	r3, r1, r3
   1bf34:	eor	r0, r2, r0
   1bf38:	eor	r1, r3, r1
   1bf3c:	eor	r2, r0, r2
   1bf40:	eor	r3, r1, r3
   1bf44:	cmp	r5, #54	; 0x36
   1bf48:	pophi	{r4, r5, pc}
   1bf4c:	tst	r1, #-2147483648	; 0x80000000
   1bf50:	lsl	r1, r1, #12
   1bf54:	mov	ip, #1048576	; 0x100000
   1bf58:	orr	r1, ip, r1, lsr #12
   1bf5c:	beq	1bf68 <__assert_fail@plt+0xaab0>
   1bf60:	rsbs	r0, r0, #0
   1bf64:	rsc	r1, r1, #0
   1bf68:	tst	r3, #-2147483648	; 0x80000000
   1bf6c:	lsl	r3, r3, #12
   1bf70:	orr	r3, ip, r3, lsr #12
   1bf74:	beq	1bf80 <__assert_fail@plt+0xaac8>
   1bf78:	rsbs	r2, r2, #0
   1bf7c:	rsc	r3, r3, #0
   1bf80:	teq	r4, r5
   1bf84:	beq	1c0e8 <__assert_fail@plt+0xac30>
   1bf88:	sub	r4, r4, #1
   1bf8c:	rsbs	lr, r5, #32
   1bf90:	blt	1bfac <__assert_fail@plt+0xaaf4>
   1bf94:	lsl	ip, r2, lr
   1bf98:	adds	r0, r0, r2, lsr r5
   1bf9c:	adc	r1, r1, #0
   1bfa0:	adds	r0, r0, r3, lsl lr
   1bfa4:	adcs	r1, r1, r3, asr r5
   1bfa8:	b	1bfc8 <__assert_fail@plt+0xab10>
   1bfac:	sub	r5, r5, #32
   1bfb0:	add	lr, lr, #32
   1bfb4:	cmp	r2, #1
   1bfb8:	lsl	ip, r3, lr
   1bfbc:	orrcs	ip, ip, #2
   1bfc0:	adds	r0, r0, r3, asr r5
   1bfc4:	adcs	r1, r1, r3, asr #31
   1bfc8:	and	r5, r1, #-2147483648	; 0x80000000
   1bfcc:	bpl	1bfdc <__assert_fail@plt+0xab24>
   1bfd0:	rsbs	ip, ip, #0
   1bfd4:	rscs	r0, r0, #0
   1bfd8:	rsc	r1, r1, #0
   1bfdc:	cmp	r1, #1048576	; 0x100000
   1bfe0:	bcc	1c020 <__assert_fail@plt+0xab68>
   1bfe4:	cmp	r1, #2097152	; 0x200000
   1bfe8:	bcc	1c008 <__assert_fail@plt+0xab50>
   1bfec:	lsrs	r1, r1, #1
   1bff0:	rrxs	r0, r0
   1bff4:	rrx	ip, ip
   1bff8:	add	r4, r4, #1
   1bffc:	lsl	r2, r4, #21
   1c000:	cmn	r2, #4194304	; 0x400000
   1c004:	bcs	1c160 <__assert_fail@plt+0xaca8>
   1c008:	cmp	ip, #-2147483648	; 0x80000000
   1c00c:	lsrseq	ip, r0, #1
   1c010:	adcs	r0, r0, #0
   1c014:	adc	r1, r1, r4, lsl #20
   1c018:	orr	r1, r1, r5
   1c01c:	pop	{r4, r5, pc}
   1c020:	lsls	ip, ip, #1
   1c024:	adcs	r0, r0, r0
   1c028:	adc	r1, r1, r1
   1c02c:	tst	r1, #1048576	; 0x100000
   1c030:	sub	r4, r4, #1
   1c034:	bne	1c008 <__assert_fail@plt+0xab50>
   1c038:	teq	r1, #0
   1c03c:	moveq	r1, r0
   1c040:	moveq	r0, #0
   1c044:	clz	r3, r1
   1c048:	addeq	r3, r3, #32
   1c04c:	sub	r3, r3, #11
   1c050:	subs	r2, r3, #32
   1c054:	bge	1c078 <__assert_fail@plt+0xabc0>
   1c058:	adds	r2, r2, #12
   1c05c:	ble	1c074 <__assert_fail@plt+0xabbc>
   1c060:	add	ip, r2, #20
   1c064:	rsb	r2, r2, #12
   1c068:	lsl	r0, r1, ip
   1c06c:	lsr	r1, r1, r2
   1c070:	b	1c088 <__assert_fail@plt+0xabd0>
   1c074:	add	r2, r2, #20
   1c078:	rsble	ip, r2, #32
   1c07c:	lsl	r1, r1, r2
   1c080:	orrle	r1, r1, r0, lsr ip
   1c084:	lslle	r0, r0, r2
   1c088:	subs	r4, r4, r3
   1c08c:	addge	r1, r1, r4, lsl #20
   1c090:	orrge	r1, r1, r5
   1c094:	popge	{r4, r5, pc}
   1c098:	mvn	r4, r4
   1c09c:	subs	r4, r4, #31
   1c0a0:	bge	1c0dc <__assert_fail@plt+0xac24>
   1c0a4:	adds	r4, r4, #12
   1c0a8:	bgt	1c0c4 <__assert_fail@plt+0xac0c>
   1c0ac:	add	r4, r4, #20
   1c0b0:	rsb	r2, r4, #32
   1c0b4:	lsr	r0, r0, r4
   1c0b8:	orr	r0, r0, r1, lsl r2
   1c0bc:	orr	r1, r5, r1, lsr r4
   1c0c0:	pop	{r4, r5, pc}
   1c0c4:	rsb	r4, r4, #12
   1c0c8:	rsb	r2, r4, #32
   1c0cc:	lsr	r0, r0, r2
   1c0d0:	orr	r0, r0, r1, lsl r4
   1c0d4:	mov	r1, r5
   1c0d8:	pop	{r4, r5, pc}
   1c0dc:	lsr	r0, r1, r4
   1c0e0:	mov	r1, r5
   1c0e4:	pop	{r4, r5, pc}
   1c0e8:	teq	r4, #0
   1c0ec:	eor	r3, r3, #1048576	; 0x100000
   1c0f0:	eoreq	r1, r1, #1048576	; 0x100000
   1c0f4:	addeq	r4, r4, #1
   1c0f8:	subne	r5, r5, #1
   1c0fc:	b	1bf88 <__assert_fail@plt+0xaad0>
   1c100:	mvns	ip, r4, asr #21
   1c104:	mvnsne	ip, r5, asr #21
   1c108:	beq	1c170 <__assert_fail@plt+0xacb8>
   1c10c:	teq	r4, r5
   1c110:	teqeq	r0, r2
   1c114:	beq	1c128 <__assert_fail@plt+0xac70>
   1c118:	orrs	ip, r4, r0
   1c11c:	moveq	r1, r3
   1c120:	moveq	r0, r2
   1c124:	pop	{r4, r5, pc}
   1c128:	teq	r1, r3
   1c12c:	movne	r1, #0
   1c130:	movne	r0, #0
   1c134:	popne	{r4, r5, pc}
   1c138:	lsrs	ip, r4, #21
   1c13c:	bne	1c150 <__assert_fail@plt+0xac98>
   1c140:	lsls	r0, r0, #1
   1c144:	adcs	r1, r1, r1
   1c148:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1c14c:	pop	{r4, r5, pc}
   1c150:	adds	r4, r4, #4194304	; 0x400000
   1c154:	addcc	r1, r1, #1048576	; 0x100000
   1c158:	popcc	{r4, r5, pc}
   1c15c:	and	r5, r1, #-2147483648	; 0x80000000
   1c160:	orr	r1, r5, #2130706432	; 0x7f000000
   1c164:	orr	r1, r1, #15728640	; 0xf00000
   1c168:	mov	r0, #0
   1c16c:	pop	{r4, r5, pc}
   1c170:	mvns	ip, r4, asr #21
   1c174:	movne	r1, r3
   1c178:	movne	r0, r2
   1c17c:	mvnseq	ip, r5, asr #21
   1c180:	movne	r3, r1
   1c184:	movne	r2, r0
   1c188:	orrs	r4, r0, r1, lsl #12
   1c18c:	orrseq	r5, r2, r3, lsl #12
   1c190:	teqeq	r1, r3
   1c194:	orrne	r1, r1, #524288	; 0x80000
   1c198:	pop	{r4, r5, pc}
   1c19c:	teq	r0, #0
   1c1a0:	moveq	r1, #0
   1c1a4:	bxeq	lr
   1c1a8:	push	{r4, r5, lr}
   1c1ac:	mov	r4, #1024	; 0x400
   1c1b0:	add	r4, r4, #50	; 0x32
   1c1b4:	mov	r5, #0
   1c1b8:	mov	r1, #0
   1c1bc:	b	1c038 <__assert_fail@plt+0xab80>
   1c1c0:	teq	r0, #0
   1c1c4:	moveq	r1, #0
   1c1c8:	bxeq	lr
   1c1cc:	push	{r4, r5, lr}
   1c1d0:	mov	r4, #1024	; 0x400
   1c1d4:	add	r4, r4, #50	; 0x32
   1c1d8:	ands	r5, r0, #-2147483648	; 0x80000000
   1c1dc:	rsbmi	r0, r0, #0
   1c1e0:	mov	r1, #0
   1c1e4:	b	1c038 <__assert_fail@plt+0xab80>
   1c1e8:	lsls	r2, r0, #1
   1c1ec:	asr	r1, r2, #3
   1c1f0:	rrx	r1, r1
   1c1f4:	lsl	r0, r2, #28
   1c1f8:	andsne	r3, r2, #-16777216	; 0xff000000
   1c1fc:	teqne	r3, #-16777216	; 0xff000000
   1c200:	eorne	r1, r1, #939524096	; 0x38000000
   1c204:	bxne	lr
   1c208:	bics	r2, r2, #-16777216	; 0xff000000
   1c20c:	bxeq	lr
   1c210:	teq	r3, #-16777216	; 0xff000000
   1c214:	orreq	r1, r1, #524288	; 0x80000
   1c218:	bxeq	lr
   1c21c:	push	{r4, r5, lr}
   1c220:	mov	r4, #896	; 0x380
   1c224:	and	r5, r1, #-2147483648	; 0x80000000
   1c228:	bic	r1, r1, #-2147483648	; 0x80000000
   1c22c:	b	1c038 <__assert_fail@plt+0xab80>
   1c230:	orrs	r2, r0, r1
   1c234:	bxeq	lr
   1c238:	push	{r4, r5, lr}
   1c23c:	mov	r5, #0
   1c240:	b	1c260 <__assert_fail@plt+0xada8>
   1c244:	orrs	r2, r0, r1
   1c248:	bxeq	lr
   1c24c:	push	{r4, r5, lr}
   1c250:	ands	r5, r1, #-2147483648	; 0x80000000
   1c254:	bpl	1c260 <__assert_fail@plt+0xada8>
   1c258:	rsbs	r0, r0, #0
   1c25c:	rsc	r1, r1, #0
   1c260:	mov	r4, #1024	; 0x400
   1c264:	add	r4, r4, #50	; 0x32
   1c268:	lsrs	ip, r1, #22
   1c26c:	beq	1bfdc <__assert_fail@plt+0xab24>
   1c270:	mov	r2, #3
   1c274:	lsrs	ip, ip, #3
   1c278:	addne	r2, r2, #3
   1c27c:	lsrs	ip, ip, #3
   1c280:	addne	r2, r2, #3
   1c284:	add	r2, r2, ip, lsr #3
   1c288:	rsb	r3, r2, #32
   1c28c:	lsl	ip, r0, r3
   1c290:	lsr	r0, r0, r2
   1c294:	orr	r0, r0, r1, lsl r3
   1c298:	lsr	r1, r1, r2
   1c29c:	add	r4, r4, r2
   1c2a0:	b	1bfdc <__assert_fail@plt+0xab24>
   1c2a4:	cmp	r3, #0
   1c2a8:	cmpeq	r2, #0
   1c2ac:	bne	1c2d0 <__assert_fail@plt+0xae18>
   1c2b0:	cmp	r1, #0
   1c2b4:	movlt	r1, #-2147483648	; 0x80000000
   1c2b8:	movlt	r0, #0
   1c2bc:	blt	1c2cc <__assert_fail@plt+0xae14>
   1c2c0:	cmpeq	r0, #0
   1c2c4:	mvnne	r1, #-2147483648	; 0x80000000
   1c2c8:	mvnne	r0, #0
   1c2cc:	b	1c3b4 <__assert_fail@plt+0xaefc>
   1c2d0:	sub	sp, sp, #8
   1c2d4:	push	{sp, lr}
   1c2d8:	cmp	r1, #0
   1c2dc:	blt	1c2fc <__assert_fail@plt+0xae44>
   1c2e0:	cmp	r3, #0
   1c2e4:	blt	1c330 <__assert_fail@plt+0xae78>
   1c2e8:	bl	1c408 <__assert_fail@plt+0xaf50>
   1c2ec:	ldr	lr, [sp, #4]
   1c2f0:	add	sp, sp, #8
   1c2f4:	pop	{r2, r3}
   1c2f8:	bx	lr
   1c2fc:	rsbs	r0, r0, #0
   1c300:	sbc	r1, r1, r1, lsl #1
   1c304:	cmp	r3, #0
   1c308:	blt	1c354 <__assert_fail@plt+0xae9c>
   1c30c:	bl	1c408 <__assert_fail@plt+0xaf50>
   1c310:	ldr	lr, [sp, #4]
   1c314:	add	sp, sp, #8
   1c318:	pop	{r2, r3}
   1c31c:	rsbs	r0, r0, #0
   1c320:	sbc	r1, r1, r1, lsl #1
   1c324:	rsbs	r2, r2, #0
   1c328:	sbc	r3, r3, r3, lsl #1
   1c32c:	bx	lr
   1c330:	rsbs	r2, r2, #0
   1c334:	sbc	r3, r3, r3, lsl #1
   1c338:	bl	1c408 <__assert_fail@plt+0xaf50>
   1c33c:	ldr	lr, [sp, #4]
   1c340:	add	sp, sp, #8
   1c344:	pop	{r2, r3}
   1c348:	rsbs	r0, r0, #0
   1c34c:	sbc	r1, r1, r1, lsl #1
   1c350:	bx	lr
   1c354:	rsbs	r2, r2, #0
   1c358:	sbc	r3, r3, r3, lsl #1
   1c35c:	bl	1c408 <__assert_fail@plt+0xaf50>
   1c360:	ldr	lr, [sp, #4]
   1c364:	add	sp, sp, #8
   1c368:	pop	{r2, r3}
   1c36c:	rsbs	r2, r2, #0
   1c370:	sbc	r3, r3, r3, lsl #1
   1c374:	bx	lr
   1c378:	cmp	r3, #0
   1c37c:	cmpeq	r2, #0
   1c380:	bne	1c398 <__assert_fail@plt+0xaee0>
   1c384:	cmp	r1, #0
   1c388:	cmpeq	r0, #0
   1c38c:	mvnne	r1, #0
   1c390:	mvnne	r0, #0
   1c394:	b	1c3b4 <__assert_fail@plt+0xaefc>
   1c398:	sub	sp, sp, #8
   1c39c:	push	{sp, lr}
   1c3a0:	bl	1c408 <__assert_fail@plt+0xaf50>
   1c3a4:	ldr	lr, [sp, #4]
   1c3a8:	add	sp, sp, #8
   1c3ac:	pop	{r2, r3}
   1c3b0:	bx	lr
   1c3b4:	push	{r1, lr}
   1c3b8:	mov	r0, #8
   1c3bc:	bl	11140 <raise@plt>
   1c3c0:	pop	{r1, pc}
   1c3c4:	andeq	r0, r0, r0
   1c3c8:	vmov	d6, r0, r1
   1c3cc:	vldr	d7, [pc, #36]	; 1c3f8 <__assert_fail@plt+0xaf40>
   1c3d0:	vldr	d5, [pc, #40]	; 1c400 <__assert_fail@plt+0xaf48>
   1c3d4:	vmul.f64	d7, d6, d7
   1c3d8:	vcvt.u32.f64	s14, d7
   1c3dc:	vcvt.f64.u32	d4, s14
   1c3e0:	vmov	r1, s14
   1c3e4:	vmls.f64	d6, d4, d5
   1c3e8:	vcvt.u32.f64	s15, d6
   1c3ec:	vmov	r0, s15
   1c3f0:	bx	lr
   1c3f4:	nop			; (mov r0, r0)
   1c3f8:	andeq	r0, r0, r0
   1c3fc:	ldclcc	0, cr0, [r0]
   1c400:	andeq	r0, r0, r0
   1c404:	mvnsmi	r0, r0
   1c408:	cmp	r1, r3
   1c40c:	cmpeq	r0, r2
   1c410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c414:	mov	r4, r0
   1c418:	movcc	r0, #0
   1c41c:	mov	r5, r1
   1c420:	ldr	lr, [sp, #36]	; 0x24
   1c424:	movcc	r1, r0
   1c428:	bcc	1c524 <__assert_fail@plt+0xb06c>
   1c42c:	cmp	r3, #0
   1c430:	clzeq	ip, r2
   1c434:	clzne	ip, r3
   1c438:	addeq	ip, ip, #32
   1c43c:	cmp	r5, #0
   1c440:	clzeq	r1, r4
   1c444:	addeq	r1, r1, #32
   1c448:	clzne	r1, r5
   1c44c:	sub	ip, ip, r1
   1c450:	sub	sl, ip, #32
   1c454:	lsl	r9, r3, ip
   1c458:	rsb	fp, ip, #32
   1c45c:	orr	r9, r9, r2, lsl sl
   1c460:	orr	r9, r9, r2, lsr fp
   1c464:	lsl	r8, r2, ip
   1c468:	cmp	r5, r9
   1c46c:	cmpeq	r4, r8
   1c470:	movcc	r0, #0
   1c474:	movcc	r1, r0
   1c478:	bcc	1c494 <__assert_fail@plt+0xafdc>
   1c47c:	mov	r0, #1
   1c480:	subs	r4, r4, r8
   1c484:	lsl	r1, r0, sl
   1c488:	orr	r1, r1, r0, lsr fp
   1c48c:	lsl	r0, r0, ip
   1c490:	sbc	r5, r5, r9
   1c494:	cmp	ip, #0
   1c498:	beq	1c524 <__assert_fail@plt+0xb06c>
   1c49c:	lsr	r6, r8, #1
   1c4a0:	orr	r6, r6, r9, lsl #31
   1c4a4:	lsr	r7, r9, #1
   1c4a8:	mov	r2, ip
   1c4ac:	b	1c4d0 <__assert_fail@plt+0xb018>
   1c4b0:	subs	r3, r4, r6
   1c4b4:	sbc	r8, r5, r7
   1c4b8:	adds	r3, r3, r3
   1c4bc:	adc	r8, r8, r8
   1c4c0:	adds	r4, r3, #1
   1c4c4:	adc	r5, r8, #0
   1c4c8:	subs	r2, r2, #1
   1c4cc:	beq	1c4ec <__assert_fail@plt+0xb034>
   1c4d0:	cmp	r5, r7
   1c4d4:	cmpeq	r4, r6
   1c4d8:	bcs	1c4b0 <__assert_fail@plt+0xaff8>
   1c4dc:	adds	r4, r4, r4
   1c4e0:	adc	r5, r5, r5
   1c4e4:	subs	r2, r2, #1
   1c4e8:	bne	1c4d0 <__assert_fail@plt+0xb018>
   1c4ec:	lsr	r3, r4, ip
   1c4f0:	orr	r3, r3, r5, lsl fp
   1c4f4:	lsr	r2, r5, ip
   1c4f8:	orr	r3, r3, r5, lsr sl
   1c4fc:	adds	r0, r0, r4
   1c500:	mov	r4, r3
   1c504:	lsl	r3, r2, ip
   1c508:	orr	r3, r3, r4, lsl sl
   1c50c:	lsl	ip, r4, ip
   1c510:	orr	r3, r3, r4, lsr fp
   1c514:	adc	r1, r1, r5
   1c518:	subs	r0, r0, ip
   1c51c:	mov	r5, r2
   1c520:	sbc	r1, r1, r3
   1c524:	cmp	lr, #0
   1c528:	strdne	r4, [lr]
   1c52c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c530:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c534:	mov	r7, r0
   1c538:	ldr	r6, [pc, #72]	; 1c588 <__assert_fail@plt+0xb0d0>
   1c53c:	ldr	r5, [pc, #72]	; 1c58c <__assert_fail@plt+0xb0d4>
   1c540:	add	r6, pc, r6
   1c544:	add	r5, pc, r5
   1c548:	sub	r6, r6, r5
   1c54c:	mov	r8, r1
   1c550:	mov	r9, r2
   1c554:	bl	110fc <fdopen@plt-0x20>
   1c558:	asrs	r6, r6, #2
   1c55c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c560:	mov	r4, #0
   1c564:	add	r4, r4, #1
   1c568:	ldr	r3, [r5], #4
   1c56c:	mov	r2, r9
   1c570:	mov	r1, r8
   1c574:	mov	r0, r7
   1c578:	blx	r3
   1c57c:	cmp	r6, r4
   1c580:	bne	1c564 <__assert_fail@plt+0xb0ac>
   1c584:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c588:	andeq	r1, r1, ip, asr #19
   1c58c:	andeq	r1, r1, r4, asr #19
   1c590:	bx	lr
   1c594:	ldr	r3, [pc, #12]	; 1c5a8 <__assert_fail@plt+0xb0f0>
   1c598:	mov	r1, #0
   1c59c:	add	r3, pc, r3
   1c5a0:	ldr	r2, [r3]
   1c5a4:	b	11350 <__cxa_atexit@plt>
   1c5a8:	andeq	r1, r1, r8, lsr #23

Disassembly of section .fini:

0001c5ac <.fini>:
   1c5ac:	push	{r3, lr}
   1c5b0:	pop	{r3, pc}
