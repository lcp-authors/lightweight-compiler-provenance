
../repos/coreutils/src/basenc:     file format elf32-littlearm


Disassembly of section .init:

00010cb0 <.init>:
   10cb0:	push	{r3, lr}
   10cb4:	bl	10f94 <__assert_fail@plt+0x48>
   10cb8:	pop	{r3, pc}

Disassembly of section .plt:

00010cbc <calloc@plt-0x14>:
   10cbc:	push	{lr}		; (str lr, [sp, #-4]!)
   10cc0:	ldr	lr, [pc, #4]	; 10ccc <calloc@plt-0x4>
   10cc4:	add	lr, pc, lr
   10cc8:	ldr	pc, [lr, #8]!
   10ccc:	andeq	ip, r1, r4, lsr r3

00010cd0 <calloc@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #28, 20	; 0x1c000
   10cd8:	ldr	pc, [ip, #820]!	; 0x334

00010cdc <fputs_unlocked@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #28, 20	; 0x1c000
   10ce4:	ldr	pc, [ip, #812]!	; 0x32c

00010ce8 <raise@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #28, 20	; 0x1c000
   10cf0:	ldr	pc, [ip, #804]!	; 0x324

00010cf4 <strcmp@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #28, 20	; 0x1c000
   10cfc:	ldr	pc, [ip, #796]!	; 0x31c

00010d00 <posix_fadvise64@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #28, 20	; 0x1c000
   10d08:	ldr	pc, [ip, #788]!	; 0x314

00010d0c <printf@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #28, 20	; 0x1c000
   10d14:	ldr	pc, [ip, #780]!	; 0x30c

00010d18 <fflush@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #28, 20	; 0x1c000
   10d20:	ldr	pc, [ip, #772]!	; 0x304

00010d24 <memmove@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #28, 20	; 0x1c000
   10d2c:	ldr	pc, [ip, #764]!	; 0x2fc

00010d30 <free@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #28, 20	; 0x1c000
   10d38:	ldr	pc, [ip, #756]!	; 0x2f4

00010d3c <_exit@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #28, 20	; 0x1c000
   10d44:	ldr	pc, [ip, #748]!	; 0x2ec

00010d48 <memcpy@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #28, 20	; 0x1c000
   10d50:	ldr	pc, [ip, #740]!	; 0x2e4

00010d54 <mbsinit@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #28, 20	; 0x1c000
   10d5c:	ldr	pc, [ip, #732]!	; 0x2dc

00010d60 <fwrite_unlocked@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #28, 20	; 0x1c000
   10d68:	ldr	pc, [ip, #724]!	; 0x2d4

00010d6c <memcmp@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #28, 20	; 0x1c000
   10d74:	ldr	pc, [ip, #716]!	; 0x2cc

00010d78 <fputc_unlocked@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #28, 20	; 0x1c000
   10d80:	ldr	pc, [ip, #708]!	; 0x2c4

00010d84 <realloc@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #28, 20	; 0x1c000
   10d8c:	ldr	pc, [ip, #700]!	; 0x2bc

00010d90 <textdomain@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #28, 20	; 0x1c000
   10d98:	ldr	pc, [ip, #692]!	; 0x2b4

00010d9c <iswprint@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #28, 20	; 0x1c000
   10da4:	ldr	pc, [ip, #684]!	; 0x2ac

00010da8 <fwrite@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #28, 20	; 0x1c000
   10db0:	ldr	pc, [ip, #676]!	; 0x2a4

00010db4 <lseek64@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #28, 20	; 0x1c000
   10dbc:	ldr	pc, [ip, #668]!	; 0x29c

00010dc0 <__ctype_get_mb_cur_max@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #28, 20	; 0x1c000
   10dc8:	ldr	pc, [ip, #660]!	; 0x294

00010dcc <__fpending@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #28, 20	; 0x1c000
   10dd4:	ldr	pc, [ip, #652]!	; 0x28c

00010dd8 <ferror_unlocked@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #28, 20	; 0x1c000
   10de0:	ldr	pc, [ip, #644]!	; 0x284

00010de4 <mbrtowc@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #28, 20	; 0x1c000
   10dec:	ldr	pc, [ip, #636]!	; 0x27c

00010df0 <error@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #28, 20	; 0x1c000
   10df8:	ldr	pc, [ip, #628]!	; 0x274

00010dfc <malloc@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #28, 20	; 0x1c000
   10e04:	ldr	pc, [ip, #620]!	; 0x26c

00010e08 <__libc_start_main@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #28, 20	; 0x1c000
   10e10:	ldr	pc, [ip, #612]!	; 0x264

00010e14 <__freading@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #28, 20	; 0x1c000
   10e1c:	ldr	pc, [ip, #604]!	; 0x25c

00010e20 <__gmon_start__@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #28, 20	; 0x1c000
   10e28:	ldr	pc, [ip, #596]!	; 0x254

00010e2c <getopt_long@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #28, 20	; 0x1c000
   10e34:	ldr	pc, [ip, #588]!	; 0x24c

00010e38 <__ctype_b_loc@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #28, 20	; 0x1c000
   10e40:	ldr	pc, [ip, #580]!	; 0x244

00010e44 <exit@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #28, 20	; 0x1c000
   10e4c:	ldr	pc, [ip, #572]!	; 0x23c

00010e50 <gettext@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #28, 20	; 0x1c000
   10e58:	ldr	pc, [ip, #564]!	; 0x234

00010e5c <strlen@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #28, 20	; 0x1c000
   10e64:	ldr	pc, [ip, #556]!	; 0x22c

00010e68 <strchr@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #28, 20	; 0x1c000
   10e70:	ldr	pc, [ip, #548]!	; 0x224

00010e74 <fprintf@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #28, 20	; 0x1c000
   10e7c:	ldr	pc, [ip, #540]!	; 0x21c

00010e80 <__errno_location@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #28, 20	; 0x1c000
   10e88:	ldr	pc, [ip, #532]!	; 0x214

00010e8c <__cxa_atexit@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #28, 20	; 0x1c000
   10e94:	ldr	pc, [ip, #524]!	; 0x20c

00010e98 <memset@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #28, 20	; 0x1c000
   10ea0:	ldr	pc, [ip, #516]!	; 0x204

00010ea4 <fileno@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #28, 20	; 0x1c000
   10eac:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb0 <memchr@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #28, 20	; 0x1c000
   10eb8:	ldr	pc, [ip, #500]!	; 0x1f4

00010ebc <strtoimax@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #28, 20	; 0x1c000
   10ec4:	ldr	pc, [ip, #492]!	; 0x1ec

00010ec8 <fclose@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #28, 20	; 0x1c000
   10ed0:	ldr	pc, [ip, #484]!	; 0x1e4

00010ed4 <fseeko64@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #28, 20	; 0x1c000
   10edc:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee0 <setlocale@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #28, 20	; 0x1c000
   10ee8:	ldr	pc, [ip, #468]!	; 0x1d4

00010eec <strrchr@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #28, 20	; 0x1c000
   10ef4:	ldr	pc, [ip, #460]!	; 0x1cc

00010ef8 <nl_langinfo@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #28, 20	; 0x1c000
   10f00:	ldr	pc, [ip, #452]!	; 0x1c4

00010f04 <fopen64@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #28, 20	; 0x1c000
   10f0c:	ldr	pc, [ip, #444]!	; 0x1bc

00010f10 <bindtextdomain@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #28, 20	; 0x1c000
   10f18:	ldr	pc, [ip, #436]!	; 0x1b4

00010f1c <fread_unlocked@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #28, 20	; 0x1c000
   10f24:	ldr	pc, [ip, #428]!	; 0x1ac

00010f28 <strncmp@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #28, 20	; 0x1c000
   10f30:	ldr	pc, [ip, #420]!	; 0x1a4

00010f34 <abort@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #28, 20	; 0x1c000
   10f3c:	ldr	pc, [ip, #412]!	; 0x19c

00010f40 <feof_unlocked@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #28, 20	; 0x1c000
   10f48:	ldr	pc, [ip, #404]!	; 0x194

00010f4c <__assert_fail@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #28, 20	; 0x1c000
   10f54:	ldr	pc, [ip, #396]!	; 0x18c

Disassembly of section .text:

00010f58 <.text>:
   10f58:	mov	fp, #0
   10f5c:	mov	lr, #0
   10f60:	pop	{r1}		; (ldr r1, [sp], #4)
   10f64:	mov	r2, sp
   10f68:	push	{r2}		; (str r2, [sp, #-4]!)
   10f6c:	push	{r0}		; (str r0, [sp, #-4]!)
   10f70:	ldr	ip, [pc, #16]	; 10f88 <__assert_fail@plt+0x3c>
   10f74:	push	{ip}		; (str ip, [sp, #-4]!)
   10f78:	ldr	r0, [pc, #12]	; 10f8c <__assert_fail@plt+0x40>
   10f7c:	ldr	r3, [pc, #12]	; 10f90 <__assert_fail@plt+0x44>
   10f80:	bl	10e08 <__libc_start_main@plt>
   10f84:	bl	10f34 <abort@plt>
   10f88:	andeq	fp, r1, r0, lsl #18
   10f8c:	strdeq	r3, [r1], -r0
   10f90:	andeq	fp, r1, r0, lsr #17
   10f94:	ldr	r3, [pc, #20]	; 10fb0 <__assert_fail@plt+0x64>
   10f98:	ldr	r2, [pc, #20]	; 10fb4 <__assert_fail@plt+0x68>
   10f9c:	add	r3, pc, r3
   10fa0:	ldr	r2, [r3, r2]
   10fa4:	cmp	r2, #0
   10fa8:	bxeq	lr
   10fac:	b	10e20 <__gmon_start__@plt>
   10fb0:	andeq	ip, r1, ip, asr r0
   10fb4:	andeq	r0, r0, r4, ror #1
   10fb8:	ldr	r3, [pc, #28]	; 10fdc <__assert_fail@plt+0x90>
   10fbc:	ldr	r0, [pc, #28]	; 10fe0 <__assert_fail@plt+0x94>
   10fc0:	sub	r3, r3, r0
   10fc4:	cmp	r3, #6
   10fc8:	bxls	lr
   10fcc:	ldr	r3, [pc, #16]	; 10fe4 <__assert_fail@plt+0x98>
   10fd0:	cmp	r3, #0
   10fd4:	bxeq	lr
   10fd8:	bx	r3
   10fdc:	andeq	sp, r2, fp, lsr r1
   10fe0:	andeq	sp, r2, r8, lsr r1
   10fe4:	andeq	r0, r0, r0
   10fe8:	ldr	r1, [pc, #36]	; 11014 <__assert_fail@plt+0xc8>
   10fec:	ldr	r0, [pc, #36]	; 11018 <__assert_fail@plt+0xcc>
   10ff0:	sub	r1, r1, r0
   10ff4:	asr	r1, r1, #2
   10ff8:	add	r1, r1, r1, lsr #31
   10ffc:	asrs	r1, r1, #1
   11000:	bxeq	lr
   11004:	ldr	r3, [pc, #16]	; 1101c <__assert_fail@plt+0xd0>
   11008:	cmp	r3, #0
   1100c:	bxeq	lr
   11010:	bx	r3
   11014:	andeq	sp, r2, r8, lsr r1
   11018:	andeq	sp, r2, r8, lsr r1
   1101c:	andeq	r0, r0, r0
   11020:	push	{r4, lr}
   11024:	ldr	r4, [pc, #24]	; 11044 <__assert_fail@plt+0xf8>
   11028:	ldrb	r3, [r4]
   1102c:	cmp	r3, #0
   11030:	popne	{r4, pc}
   11034:	bl	10fb8 <__assert_fail@plt+0x6c>
   11038:	mov	r3, #1
   1103c:	strb	r3, [r4]
   11040:	pop	{r4, pc}
   11044:	andeq	sp, r2, ip, asr r1
   11048:	ldr	r0, [pc, #40]	; 11078 <__assert_fail@plt+0x12c>
   1104c:	ldr	r3, [r0]
   11050:	cmp	r3, #0
   11054:	bne	1105c <__assert_fail@plt+0x110>
   11058:	b	10fe8 <__assert_fail@plt+0x9c>
   1105c:	ldr	r3, [pc, #24]	; 1107c <__assert_fail@plt+0x130>
   11060:	cmp	r3, #0
   11064:	beq	11058 <__assert_fail@plt+0x10c>
   11068:	push	{r4, lr}
   1106c:	blx	r3
   11070:	pop	{r4, lr}
   11074:	b	10fe8 <__assert_fail@plt+0x9c>
   11078:	andeq	ip, r2, r4, lsl pc
   1107c:	andeq	r0, r0, r0
   11080:	push	{fp, lr}
   11084:	add	fp, sp, #4
   11088:	ldr	r0, [pc, #32]	; 110b0 <__assert_fail@plt+0x164>
   1108c:	bl	10e50 <gettext@plt>
   11090:	mov	r2, r0
   11094:	ldr	r3, [pc, #24]	; 110b4 <__assert_fail@plt+0x168>
   11098:	ldr	r3, [r3]
   1109c:	mov	r1, r3
   110a0:	mov	r0, r2
   110a4:	bl	10cdc <fputs_unlocked@plt>
   110a8:	nop			; (mov r0, r0)
   110ac:	pop	{fp, pc}
   110b0:	andeq	fp, r1, r8, lsr #18
   110b4:	andeq	sp, r2, r4, asr r1
   110b8:	push	{fp, lr}
   110bc:	add	fp, sp, #4
   110c0:	ldr	r0, [pc, #32]	; 110e8 <__assert_fail@plt+0x19c>
   110c4:	bl	10e50 <gettext@plt>
   110c8:	mov	r2, r0
   110cc:	ldr	r3, [pc, #24]	; 110ec <__assert_fail@plt+0x1a0>
   110d0:	ldr	r3, [r3]
   110d4:	mov	r1, r3
   110d8:	mov	r0, r2
   110dc:	bl	10cdc <fputs_unlocked@plt>
   110e0:	nop			; (mov r0, r0)
   110e4:	pop	{fp, pc}
   110e8:	andeq	fp, r1, r0, ror #18
   110ec:	andeq	sp, r2, r4, asr r1
   110f0:	push	{fp, lr}
   110f4:	add	fp, sp, #4
   110f8:	sub	sp, sp, #80	; 0x50
   110fc:	str	r0, [fp, #-80]	; 0xffffffb0
   11100:	ldr	r3, [pc, #348]	; 11264 <__assert_fail@plt+0x318>
   11104:	sub	ip, fp, #72	; 0x48
   11108:	mov	lr, r3
   1110c:	ldm	lr!, {r0, r1, r2, r3}
   11110:	stmia	ip!, {r0, r1, r2, r3}
   11114:	ldm	lr!, {r0, r1, r2, r3}
   11118:	stmia	ip!, {r0, r1, r2, r3}
   1111c:	ldm	lr!, {r0, r1, r2, r3}
   11120:	stmia	ip!, {r0, r1, r2, r3}
   11124:	ldm	lr, {r0, r1}
   11128:	stm	ip, {r0, r1}
   1112c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11130:	str	r3, [fp, #-8]
   11134:	sub	r3, fp, #72	; 0x48
   11138:	str	r3, [fp, #-12]
   1113c:	b	1114c <__assert_fail@plt+0x200>
   11140:	ldr	r3, [fp, #-12]
   11144:	add	r3, r3, #8
   11148:	str	r3, [fp, #-12]
   1114c:	ldr	r3, [fp, #-12]
   11150:	ldr	r3, [r3]
   11154:	cmp	r3, #0
   11158:	beq	1117c <__assert_fail@plt+0x230>
   1115c:	ldr	r3, [fp, #-12]
   11160:	ldr	r3, [r3]
   11164:	mov	r1, r3
   11168:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1116c:	bl	10cf4 <strcmp@plt>
   11170:	mov	r3, r0
   11174:	cmp	r3, #0
   11178:	bne	11140 <__assert_fail@plt+0x1f4>
   1117c:	ldr	r3, [fp, #-12]
   11180:	ldr	r3, [r3, #4]
   11184:	cmp	r3, #0
   11188:	beq	11198 <__assert_fail@plt+0x24c>
   1118c:	ldr	r3, [fp, #-12]
   11190:	ldr	r3, [r3, #4]
   11194:	str	r3, [fp, #-8]
   11198:	ldr	r0, [pc, #200]	; 11268 <__assert_fail@plt+0x31c>
   1119c:	bl	10e50 <gettext@plt>
   111a0:	mov	r3, r0
   111a4:	ldr	r2, [pc, #192]	; 1126c <__assert_fail@plt+0x320>
   111a8:	ldr	r1, [pc, #192]	; 11270 <__assert_fail@plt+0x324>
   111ac:	mov	r0, r3
   111b0:	bl	10d0c <printf@plt>
   111b4:	mov	r1, #0
   111b8:	mov	r0, #5
   111bc:	bl	10ee0 <setlocale@plt>
   111c0:	str	r0, [fp, #-16]
   111c4:	ldr	r3, [fp, #-16]
   111c8:	cmp	r3, #0
   111cc:	beq	1120c <__assert_fail@plt+0x2c0>
   111d0:	mov	r2, #3
   111d4:	ldr	r1, [pc, #152]	; 11274 <__assert_fail@plt+0x328>
   111d8:	ldr	r0, [fp, #-16]
   111dc:	bl	10f28 <strncmp@plt>
   111e0:	mov	r3, r0
   111e4:	cmp	r3, #0
   111e8:	beq	1120c <__assert_fail@plt+0x2c0>
   111ec:	ldr	r0, [pc, #132]	; 11278 <__assert_fail@plt+0x32c>
   111f0:	bl	10e50 <gettext@plt>
   111f4:	mov	r2, r0
   111f8:	ldr	r3, [pc, #124]	; 1127c <__assert_fail@plt+0x330>
   111fc:	ldr	r3, [r3]
   11200:	mov	r1, r3
   11204:	mov	r0, r2
   11208:	bl	10cdc <fputs_unlocked@plt>
   1120c:	ldr	r0, [pc, #108]	; 11280 <__assert_fail@plt+0x334>
   11210:	bl	10e50 <gettext@plt>
   11214:	mov	r3, r0
   11218:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1121c:	ldr	r1, [pc, #72]	; 1126c <__assert_fail@plt+0x320>
   11220:	mov	r0, r3
   11224:	bl	10d0c <printf@plt>
   11228:	ldr	r0, [pc, #84]	; 11284 <__assert_fail@plt+0x338>
   1122c:	bl	10e50 <gettext@plt>
   11230:	ldr	r2, [fp, #-8]
   11234:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11238:	cmp	r2, r3
   1123c:	bne	11248 <__assert_fail@plt+0x2fc>
   11240:	ldr	r3, [pc, #64]	; 11288 <__assert_fail@plt+0x33c>
   11244:	b	1124c <__assert_fail@plt+0x300>
   11248:	ldr	r3, [pc, #60]	; 1128c <__assert_fail@plt+0x340>
   1124c:	mov	r2, r3
   11250:	ldr	r1, [fp, #-8]
   11254:	bl	10d0c <printf@plt>
   11258:	nop			; (mov r0, r0)
   1125c:	sub	sp, fp, #4
   11260:	pop	{fp, pc}
   11264:	andeq	fp, r1, r0, lsr #22
   11268:	andeq	fp, r1, ip, lsr #19
   1126c:	andeq	fp, r1, r4, asr #19
   11270:	andeq	fp, r1, ip, ror #19
   11274:	strdeq	fp, [r1], -ip
   11278:	andeq	fp, r1, r0, lsl #20
   1127c:	andeq	sp, r2, r4, asr r1
   11280:	andeq	fp, r1, r8, asr #20
   11284:	andeq	fp, r1, r4, ror #20
   11288:	muleq	r1, r8, sl
   1128c:	andeq	fp, r1, r4, lsr #21
   11290:	push	{r4, fp, lr}
   11294:	add	fp, sp, #8
   11298:	sub	sp, sp, #12
   1129c:	str	r0, [fp, #-16]
   112a0:	ldr	r3, [fp, #-16]
   112a4:	cmp	r3, #0
   112a8:	beq	112d8 <__assert_fail@plt+0x38c>
   112ac:	ldr	r3, [pc, #508]	; 114b0 <__assert_fail@plt+0x564>
   112b0:	ldr	r4, [r3]
   112b4:	ldr	r0, [pc, #504]	; 114b4 <__assert_fail@plt+0x568>
   112b8:	bl	10e50 <gettext@plt>
   112bc:	mov	r1, r0
   112c0:	ldr	r3, [pc, #496]	; 114b8 <__assert_fail@plt+0x56c>
   112c4:	ldr	r3, [r3]
   112c8:	mov	r2, r3
   112cc:	mov	r0, r4
   112d0:	bl	10e74 <fprintf@plt>
   112d4:	b	114a8 <__assert_fail@plt+0x55c>
   112d8:	ldr	r0, [pc, #476]	; 114bc <__assert_fail@plt+0x570>
   112dc:	bl	10e50 <gettext@plt>
   112e0:	mov	r2, r0
   112e4:	ldr	r3, [pc, #460]	; 114b8 <__assert_fail@plt+0x56c>
   112e8:	ldr	r3, [r3]
   112ec:	mov	r1, r3
   112f0:	mov	r0, r2
   112f4:	bl	10d0c <printf@plt>
   112f8:	ldr	r0, [pc, #448]	; 114c0 <__assert_fail@plt+0x574>
   112fc:	bl	10e50 <gettext@plt>
   11300:	mov	r2, r0
   11304:	ldr	r3, [pc, #440]	; 114c4 <__assert_fail@plt+0x578>
   11308:	ldr	r3, [r3]
   1130c:	mov	r1, r3
   11310:	mov	r0, r2
   11314:	bl	10cdc <fputs_unlocked@plt>
   11318:	bl	11080 <__assert_fail@plt+0x134>
   1131c:	bl	110b8 <__assert_fail@plt+0x16c>
   11320:	ldr	r0, [pc, #416]	; 114c8 <__assert_fail@plt+0x57c>
   11324:	bl	10e50 <gettext@plt>
   11328:	mov	r2, r0
   1132c:	ldr	r3, [pc, #400]	; 114c4 <__assert_fail@plt+0x578>
   11330:	ldr	r3, [r3]
   11334:	mov	r1, r3
   11338:	mov	r0, r2
   1133c:	bl	10cdc <fputs_unlocked@plt>
   11340:	ldr	r0, [pc, #388]	; 114cc <__assert_fail@plt+0x580>
   11344:	bl	10e50 <gettext@plt>
   11348:	mov	r2, r0
   1134c:	ldr	r3, [pc, #368]	; 114c4 <__assert_fail@plt+0x578>
   11350:	ldr	r3, [r3]
   11354:	mov	r1, r3
   11358:	mov	r0, r2
   1135c:	bl	10cdc <fputs_unlocked@plt>
   11360:	ldr	r0, [pc, #360]	; 114d0 <__assert_fail@plt+0x584>
   11364:	bl	10e50 <gettext@plt>
   11368:	mov	r2, r0
   1136c:	ldr	r3, [pc, #336]	; 114c4 <__assert_fail@plt+0x578>
   11370:	ldr	r3, [r3]
   11374:	mov	r1, r3
   11378:	mov	r0, r2
   1137c:	bl	10cdc <fputs_unlocked@plt>
   11380:	ldr	r0, [pc, #332]	; 114d4 <__assert_fail@plt+0x588>
   11384:	bl	10e50 <gettext@plt>
   11388:	mov	r2, r0
   1138c:	ldr	r3, [pc, #304]	; 114c4 <__assert_fail@plt+0x578>
   11390:	ldr	r3, [r3]
   11394:	mov	r1, r3
   11398:	mov	r0, r2
   1139c:	bl	10cdc <fputs_unlocked@plt>
   113a0:	ldr	r0, [pc, #304]	; 114d8 <__assert_fail@plt+0x58c>
   113a4:	bl	10e50 <gettext@plt>
   113a8:	mov	r2, r0
   113ac:	ldr	r3, [pc, #272]	; 114c4 <__assert_fail@plt+0x578>
   113b0:	ldr	r3, [r3]
   113b4:	mov	r1, r3
   113b8:	mov	r0, r2
   113bc:	bl	10cdc <fputs_unlocked@plt>
   113c0:	ldr	r0, [pc, #276]	; 114dc <__assert_fail@plt+0x590>
   113c4:	bl	10e50 <gettext@plt>
   113c8:	mov	r2, r0
   113cc:	ldr	r3, [pc, #240]	; 114c4 <__assert_fail@plt+0x578>
   113d0:	ldr	r3, [r3]
   113d4:	mov	r1, r3
   113d8:	mov	r0, r2
   113dc:	bl	10cdc <fputs_unlocked@plt>
   113e0:	ldr	r0, [pc, #248]	; 114e0 <__assert_fail@plt+0x594>
   113e4:	bl	10e50 <gettext@plt>
   113e8:	mov	r2, r0
   113ec:	ldr	r3, [pc, #208]	; 114c4 <__assert_fail@plt+0x578>
   113f0:	ldr	r3, [r3]
   113f4:	mov	r1, r3
   113f8:	mov	r0, r2
   113fc:	bl	10cdc <fputs_unlocked@plt>
   11400:	ldr	r0, [pc, #220]	; 114e4 <__assert_fail@plt+0x598>
   11404:	bl	10e50 <gettext@plt>
   11408:	mov	r2, r0
   1140c:	ldr	r3, [pc, #176]	; 114c4 <__assert_fail@plt+0x578>
   11410:	ldr	r3, [r3]
   11414:	mov	r1, r3
   11418:	mov	r0, r2
   1141c:	bl	10cdc <fputs_unlocked@plt>
   11420:	ldr	r0, [pc, #192]	; 114e8 <__assert_fail@plt+0x59c>
   11424:	bl	10e50 <gettext@plt>
   11428:	mov	r2, r0
   1142c:	ldr	r3, [pc, #144]	; 114c4 <__assert_fail@plt+0x578>
   11430:	ldr	r3, [r3]
   11434:	mov	r1, r3
   11438:	mov	r0, r2
   1143c:	bl	10cdc <fputs_unlocked@plt>
   11440:	ldr	r0, [pc, #164]	; 114ec <__assert_fail@plt+0x5a0>
   11444:	bl	10e50 <gettext@plt>
   11448:	mov	r2, r0
   1144c:	ldr	r3, [pc, #112]	; 114c4 <__assert_fail@plt+0x578>
   11450:	ldr	r3, [r3]
   11454:	mov	r1, r3
   11458:	mov	r0, r2
   1145c:	bl	10cdc <fputs_unlocked@plt>
   11460:	ldr	r0, [pc, #136]	; 114f0 <__assert_fail@plt+0x5a4>
   11464:	bl	10e50 <gettext@plt>
   11468:	mov	r2, r0
   1146c:	ldr	r3, [pc, #80]	; 114c4 <__assert_fail@plt+0x578>
   11470:	ldr	r3, [r3]
   11474:	mov	r1, r3
   11478:	mov	r0, r2
   1147c:	bl	10cdc <fputs_unlocked@plt>
   11480:	ldr	r0, [pc, #108]	; 114f4 <__assert_fail@plt+0x5a8>
   11484:	bl	10e50 <gettext@plt>
   11488:	mov	r2, r0
   1148c:	ldr	r3, [pc, #48]	; 114c4 <__assert_fail@plt+0x578>
   11490:	ldr	r3, [r3]
   11494:	mov	r1, r3
   11498:	mov	r0, r2
   1149c:	bl	10cdc <fputs_unlocked@plt>
   114a0:	ldr	r0, [pc, #80]	; 114f8 <__assert_fail@plt+0x5ac>
   114a4:	bl	110f0 <__assert_fail@plt+0x1a4>
   114a8:	ldr	r0, [fp, #-16]
   114ac:	bl	10e44 <exit@plt>
   114b0:	andeq	sp, r2, r8, asr #2
   114b4:			; <UNDEFINED> instruction: 0x0001bcb4
   114b8:	andeq	sp, r2, ip, ror r1
   114bc:	ldrdeq	fp, [r1], -ip
   114c0:	strdeq	fp, [r1], -ip
   114c4:	andeq	sp, r2, r4, asr r1
   114c8:	andeq	fp, r1, r4, asr #26
   114cc:	andeq	fp, r1, ip, lsl #27
   114d0:	ldrdeq	fp, [r1], -r4
   114d4:	andeq	fp, r1, ip, lsl lr
   114d8:	andeq	fp, r1, r8, ror #28
   114dc:	andeq	fp, r1, r4, lsr #29
   114e0:	strdeq	fp, [r1], -r0
   114e4:	andeq	fp, r1, ip, lsr pc
   114e8:	andeq	ip, r1, r0, lsr r0
   114ec:	andeq	ip, r1, r0, lsl r1
   114f0:	andeq	ip, r1, r0, asr #2
   114f4:	andeq	ip, r1, r8, ror r1
   114f8:	andeq	ip, r1, r0, asr #4
   114fc:	push	{fp}		; (str fp, [sp, #-4]!)
   11500:	add	fp, sp, #0
   11504:	sub	sp, sp, #12
   11508:	str	r0, [fp, #-8]
   1150c:	ldr	r3, [fp, #-8]
   11510:	add	r3, r3, #2
   11514:	ldr	r2, [pc, #28]	; 11538 <__assert_fail@plt+0x5ec>
   11518:	smull	r1, r2, r2, r3
   1151c:	asr	r3, r3, #31
   11520:	sub	r3, r2, r3
   11524:	lsl	r3, r3, #2
   11528:	mov	r0, r3
   1152c:	add	sp, fp, #0
   11530:	pop	{fp}		; (ldr fp, [sp], #4)
   11534:	bx	lr
   11538:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   1153c:	push	{fp, lr}
   11540:	add	fp, sp, #4
   11544:	sub	sp, sp, #8
   11548:	str	r0, [fp, #-8]
   1154c:	ldr	r3, [fp, #-8]
   11550:	add	r3, r3, #4
   11554:	mov	r0, r3
   11558:	bl	15264 <__assert_fail@plt+0x4318>
   1155c:	nop			; (mov r0, r0)
   11560:	sub	sp, fp, #4
   11564:	pop	{fp, pc}
   11568:	push	{fp, lr}
   1156c:	add	fp, sp, #4
   11570:	sub	sp, sp, #32
   11574:	str	r0, [fp, #-16]
   11578:	str	r1, [fp, #-20]	; 0xffffffec
   1157c:	str	r2, [fp, #-24]	; 0xffffffe8
   11580:	str	r3, [fp, #-28]	; 0xffffffe4
   11584:	ldr	r3, [fp, #-16]
   11588:	add	r0, r3, #4
   1158c:	ldr	r3, [fp, #4]
   11590:	str	r3, [sp]
   11594:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11598:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1159c:	ldr	r1, [fp, #-20]	; 0xffffffec
   115a0:	bl	157b0 <__assert_fail@plt+0x4864>
   115a4:	mov	r3, r0
   115a8:	strb	r3, [fp, #-5]
   115ac:	ldr	r3, [fp, #-16]
   115b0:	ldr	r2, [r3, #4]
   115b4:	ldr	r3, [fp, #-16]
   115b8:	str	r2, [r3]
   115bc:	ldrb	r3, [fp, #-5]
   115c0:	mov	r0, r3
   115c4:	sub	sp, fp, #4
   115c8:	pop	{fp, pc}
   115cc:	push	{fp, lr}
   115d0:	add	fp, sp, #4
   115d4:	sub	sp, sp, #8
   115d8:	str	r0, [fp, #-8]
   115dc:	ldr	r3, [fp, #-8]
   115e0:	ldr	r2, [pc, #44]	; 11614 <__assert_fail@plt+0x6c8>
   115e4:	str	r2, [r3, #20]
   115e8:	ldr	r3, [fp, #-8]
   115ec:	ldr	r3, [r3, #20]
   115f0:	mov	r0, r3
   115f4:	bl	196f0 <__assert_fail@plt+0x87a4>
   115f8:	mov	r3, r0
   115fc:	mov	r2, r3
   11600:	ldr	r3, [fp, #-8]
   11604:	str	r2, [r3, #16]
   11608:	nop			; (mov r0, r0)
   1160c:	sub	sp, fp, #4
   11610:	pop	{fp, pc}
   11614:	andeq	r1, r0, r8, rrx
   11618:	push	{fp, lr}
   1161c:	add	fp, sp, #4
   11620:	sub	sp, sp, #8
   11624:	str	r0, [fp, #-8]
   11628:	str	r1, [fp, #-12]
   1162c:	ldr	r3, [fp, #-8]
   11630:	ldr	r2, [r3, #20]
   11634:	ldr	r3, [fp, #-12]
   11638:	cmp	r2, r3
   1163c:	bge	11678 <__assert_fail@plt+0x72c>
   11640:	ldr	r3, [fp, #-12]
   11644:	lsl	r2, r3, #1
   11648:	ldr	r3, [fp, #-8]
   1164c:	str	r2, [r3, #20]
   11650:	ldr	r3, [fp, #-8]
   11654:	ldr	r0, [r3, #16]
   11658:	ldr	r3, [fp, #-8]
   1165c:	ldr	r3, [r3, #20]
   11660:	mov	r2, #1
   11664:	mov	r1, r3
   11668:	bl	19620 <__assert_fail@plt+0x86d4>
   1166c:	mov	r2, r0
   11670:	ldr	r3, [fp, #-8]
   11674:	str	r2, [r3, #16]
   11678:	nop			; (mov r0, r0)
   1167c:	sub	sp, fp, #4
   11680:	pop	{fp, pc}
   11684:	push	{fp, lr}
   11688:	add	fp, sp, #4
   1168c:	sub	sp, sp, #24
   11690:	str	r0, [fp, #-16]
   11694:	str	r1, [fp, #-20]	; 0xffffffec
   11698:	str	r2, [fp, #-24]	; 0xffffffe8
   1169c:	str	r3, [fp, #-28]	; 0xffffffe4
   116a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   116a4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   116a8:	ldr	r1, [fp, #-20]	; 0xffffffec
   116ac:	ldr	r0, [fp, #-16]
   116b0:	bl	14dc8 <__assert_fail@plt+0x3e7c>
   116b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   116b8:	str	r3, [fp, #-8]
   116bc:	b	11708 <__assert_fail@plt+0x7bc>
   116c0:	ldr	r3, [fp, #-8]
   116c4:	ldrb	r3, [r3]
   116c8:	cmp	r3, #43	; 0x2b
   116cc:	bne	116e0 <__assert_fail@plt+0x794>
   116d0:	ldr	r3, [fp, #-8]
   116d4:	mov	r2, #45	; 0x2d
   116d8:	strb	r2, [r3]
   116dc:	b	116fc <__assert_fail@plt+0x7b0>
   116e0:	ldr	r3, [fp, #-8]
   116e4:	ldrb	r3, [r3]
   116e8:	cmp	r3, #47	; 0x2f
   116ec:	bne	116fc <__assert_fail@plt+0x7b0>
   116f0:	ldr	r3, [fp, #-8]
   116f4:	mov	r2, #95	; 0x5f
   116f8:	strb	r2, [r3]
   116fc:	ldr	r3, [fp, #-8]
   11700:	add	r3, r3, #1
   11704:	str	r3, [fp, #-8]
   11708:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1170c:	sub	r2, r3, #1
   11710:	str	r2, [fp, #-28]	; 0xffffffe4
   11714:	cmp	r3, #0
   11718:	bne	116c0 <__assert_fail@plt+0x774>
   1171c:	nop			; (mov r0, r0)
   11720:	sub	sp, fp, #4
   11724:	pop	{fp, pc}
   11728:	push	{fp, lr}
   1172c:	add	fp, sp, #4
   11730:	sub	sp, sp, #8
   11734:	mov	r3, r0
   11738:	strb	r3, [fp, #-5]
   1173c:	ldrb	r3, [fp, #-5]
   11740:	cmp	r3, #45	; 0x2d
   11744:	beq	11784 <__assert_fail@plt+0x838>
   11748:	ldrb	r3, [fp, #-5]
   1174c:	cmp	r3, #95	; 0x5f
   11750:	beq	11784 <__assert_fail@plt+0x838>
   11754:	ldrb	r3, [fp, #-5]
   11758:	cmp	r3, #43	; 0x2b
   1175c:	beq	1178c <__assert_fail@plt+0x840>
   11760:	ldrb	r3, [fp, #-5]
   11764:	cmp	r3, #47	; 0x2f
   11768:	beq	1178c <__assert_fail@plt+0x840>
   1176c:	ldrb	r3, [fp, #-5]
   11770:	mov	r0, r3
   11774:	bl	15214 <__assert_fail@plt+0x42c8>
   11778:	mov	r3, r0
   1177c:	cmp	r3, #0
   11780:	beq	1178c <__assert_fail@plt+0x840>
   11784:	mov	r3, #1
   11788:	b	11790 <__assert_fail@plt+0x844>
   1178c:	mov	r3, #0
   11790:	and	r3, r3, #1
   11794:	uxtb	r3, r3
   11798:	mov	r0, r3
   1179c:	sub	sp, fp, #4
   117a0:	pop	{fp, pc}
   117a4:	push	{fp, lr}
   117a8:	add	fp, sp, #4
   117ac:	sub	sp, sp, #8
   117b0:	str	r0, [fp, #-8]
   117b4:	ldr	r3, [fp, #-8]
   117b8:	add	r3, r3, #4
   117bc:	mov	r0, r3
   117c0:	bl	15264 <__assert_fail@plt+0x4318>
   117c4:	ldr	r0, [fp, #-8]
   117c8:	bl	115cc <__assert_fail@plt+0x680>
   117cc:	nop			; (mov r0, r0)
   117d0:	sub	sp, fp, #4
   117d4:	pop	{fp, pc}
   117d8:	push	{fp, lr}
   117dc:	add	fp, sp, #4
   117e0:	sub	sp, sp, #40	; 0x28
   117e4:	str	r0, [fp, #-24]	; 0xffffffe8
   117e8:	str	r1, [fp, #-28]	; 0xffffffe4
   117ec:	str	r2, [fp, #-32]	; 0xffffffe0
   117f0:	str	r3, [fp, #-36]	; 0xffffffdc
   117f4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   117f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   117fc:	bl	11618 <__assert_fail@plt+0x6cc>
   11800:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11804:	ldr	r3, [r3, #16]
   11808:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1180c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   11810:	mov	r0, r3
   11814:	bl	10d48 <memcpy@plt>
   11818:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1181c:	str	r3, [fp, #-8]
   11820:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11824:	ldr	r3, [r3, #16]
   11828:	str	r3, [fp, #-12]
   1182c:	b	118ac <__assert_fail@plt+0x960>
   11830:	ldr	r3, [fp, #-12]
   11834:	ldrb	r3, [r3]
   11838:	cmp	r3, #43	; 0x2b
   1183c:	beq	11850 <__assert_fail@plt+0x904>
   11840:	ldr	r3, [fp, #-12]
   11844:	ldrb	r3, [r3]
   11848:	cmp	r3, #47	; 0x2f
   1184c:	bne	11864 <__assert_fail@plt+0x918>
   11850:	ldr	r3, [fp, #4]
   11854:	mov	r2, #0
   11858:	str	r2, [r3]
   1185c:	mov	r3, #0
   11860:	b	11900 <__assert_fail@plt+0x9b4>
   11864:	ldr	r3, [fp, #-12]
   11868:	ldrb	r3, [r3]
   1186c:	cmp	r3, #45	; 0x2d
   11870:	bne	11884 <__assert_fail@plt+0x938>
   11874:	ldr	r3, [fp, #-12]
   11878:	mov	r2, #43	; 0x2b
   1187c:	strb	r2, [r3]
   11880:	b	118a0 <__assert_fail@plt+0x954>
   11884:	ldr	r3, [fp, #-12]
   11888:	ldrb	r3, [r3]
   1188c:	cmp	r3, #95	; 0x5f
   11890:	bne	118a0 <__assert_fail@plt+0x954>
   11894:	ldr	r3, [fp, #-12]
   11898:	mov	r2, #47	; 0x2f
   1189c:	strb	r2, [r3]
   118a0:	ldr	r3, [fp, #-12]
   118a4:	add	r3, r3, #1
   118a8:	str	r3, [fp, #-12]
   118ac:	ldr	r3, [fp, #-8]
   118b0:	sub	r2, r3, #1
   118b4:	str	r2, [fp, #-8]
   118b8:	cmp	r3, #0
   118bc:	bne	11830 <__assert_fail@plt+0x8e4>
   118c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   118c4:	add	r0, r3, #4
   118c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   118cc:	ldr	r1, [r3, #16]
   118d0:	ldr	r3, [fp, #4]
   118d4:	str	r3, [sp]
   118d8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   118dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   118e0:	bl	157b0 <__assert_fail@plt+0x4864>
   118e4:	mov	r3, r0
   118e8:	strb	r3, [fp, #-13]
   118ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   118f0:	ldr	r2, [r3, #4]
   118f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   118f8:	str	r2, [r3]
   118fc:	ldrb	r3, [fp, #-13]
   11900:	mov	r0, r3
   11904:	sub	sp, fp, #4
   11908:	pop	{fp, pc}
   1190c:	push	{fp}		; (str fp, [sp, #-4]!)
   11910:	add	fp, sp, #0
   11914:	sub	sp, sp, #12
   11918:	str	r0, [fp, #-8]
   1191c:	ldr	r3, [fp, #-8]
   11920:	add	r3, r3, #4
   11924:	ldr	r2, [pc, #32]	; 1194c <__assert_fail@plt+0xa00>
   11928:	smull	r1, r2, r2, r3
   1192c:	asr	r2, r2, #1
   11930:	asr	r3, r3, #31
   11934:	sub	r3, r2, r3
   11938:	lsl	r3, r3, #3
   1193c:	mov	r0, r3
   11940:	add	sp, fp, #0
   11944:	pop	{fp}		; (ldr fp, [sp], #4)
   11948:	bx	lr
   1194c:	strbtvs	r6, [r6], -r7, ror #12
   11950:	push	{fp, lr}
   11954:	add	fp, sp, #4
   11958:	sub	sp, sp, #8
   1195c:	str	r0, [fp, #-8]
   11960:	ldr	r3, [fp, #-8]
   11964:	add	r3, r3, #4
   11968:	mov	r0, r3
   1196c:	bl	140a4 <__assert_fail@plt+0x3158>
   11970:	nop			; (mov r0, r0)
   11974:	sub	sp, fp, #4
   11978:	pop	{fp, pc}
   1197c:	push	{fp, lr}
   11980:	add	fp, sp, #4
   11984:	sub	sp, sp, #32
   11988:	str	r0, [fp, #-16]
   1198c:	str	r1, [fp, #-20]	; 0xffffffec
   11990:	str	r2, [fp, #-24]	; 0xffffffe8
   11994:	str	r3, [fp, #-28]	; 0xffffffe4
   11998:	ldr	r3, [fp, #-16]
   1199c:	add	r0, r3, #4
   119a0:	ldr	r3, [fp, #4]
   119a4:	str	r3, [sp]
   119a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   119ac:	ldr	r2, [fp, #-24]	; 0xffffffe8
   119b0:	ldr	r1, [fp, #-20]	; 0xffffffec
   119b4:	bl	148c4 <__assert_fail@plt+0x3978>
   119b8:	mov	r3, r0
   119bc:	strb	r3, [fp, #-5]
   119c0:	ldr	r3, [fp, #-16]
   119c4:	ldr	r2, [r3, #4]
   119c8:	ldr	r3, [fp, #-16]
   119cc:	str	r2, [r3]
   119d0:	ldrb	r3, [fp, #-5]
   119d4:	mov	r0, r3
   119d8:	sub	sp, fp, #4
   119dc:	pop	{fp, pc}
   119e0:	push	{fp}		; (str fp, [sp, #-4]!)
   119e4:	add	fp, sp, #0
   119e8:	sub	sp, sp, #12
   119ec:	mov	r3, r0
   119f0:	strb	r3, [fp, #-5]
   119f4:	ldrb	r3, [fp, #-5]
   119f8:	cmp	r3, #47	; 0x2f
   119fc:	bls	11a0c <__assert_fail@plt+0xac0>
   11a00:	ldrb	r3, [fp, #-5]
   11a04:	cmp	r3, #57	; 0x39
   11a08:	bls	11a24 <__assert_fail@plt+0xad8>
   11a0c:	ldrb	r3, [fp, #-5]
   11a10:	cmp	r3, #64	; 0x40
   11a14:	bls	11a2c <__assert_fail@plt+0xae0>
   11a18:	ldrb	r3, [fp, #-5]
   11a1c:	cmp	r3, #86	; 0x56
   11a20:	bhi	11a2c <__assert_fail@plt+0xae0>
   11a24:	mov	r3, #1
   11a28:	b	11a30 <__assert_fail@plt+0xae4>
   11a2c:	mov	r3, #0
   11a30:	and	r3, r3, #1
   11a34:	uxtb	r3, r3
   11a38:	mov	r0, r3
   11a3c:	add	sp, fp, #0
   11a40:	pop	{fp}		; (ldr fp, [sp], #4)
   11a44:	bx	lr
   11a48:	push	{fp, lr}
   11a4c:	add	fp, sp, #4
   11a50:	sub	sp, sp, #24
   11a54:	str	r0, [fp, #-16]
   11a58:	str	r1, [fp, #-20]	; 0xffffffec
   11a5c:	str	r2, [fp, #-24]	; 0xffffffe8
   11a60:	str	r3, [fp, #-28]	; 0xffffffe4
   11a64:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11a68:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11a6c:	ldr	r1, [fp, #-20]	; 0xffffffec
   11a70:	ldr	r0, [fp, #-16]
   11a74:	bl	139fc <__assert_fail@plt+0x2ab0>
   11a78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11a7c:	str	r3, [fp, #-8]
   11a80:	b	11ae0 <__assert_fail@plt+0xb94>
   11a84:	ldr	r3, [fp, #-8]
   11a88:	ldrb	r3, [r3]
   11a8c:	cmp	r3, #49	; 0x31
   11a90:	bls	11aa4 <__assert_fail@plt+0xb58>
   11a94:	ldr	r3, [fp, #-8]
   11a98:	ldrb	r3, [r3]
   11a9c:	cmp	r3, #90	; 0x5a
   11aa0:	bls	11ab8 <__assert_fail@plt+0xb6c>
   11aa4:	ldr	r3, [pc, #84]	; 11b00 <__assert_fail@plt+0xbb4>
   11aa8:	mov	r2, #452	; 0x1c4
   11aac:	ldr	r1, [pc, #80]	; 11b04 <__assert_fail@plt+0xbb8>
   11ab0:	ldr	r0, [pc, #80]	; 11b08 <__assert_fail@plt+0xbbc>
   11ab4:	bl	10f4c <__assert_fail@plt>
   11ab8:	ldr	r3, [fp, #-8]
   11abc:	ldrb	r3, [r3]
   11ac0:	sub	r3, r3, #50	; 0x32
   11ac4:	ldr	r2, [pc, #64]	; 11b0c <__assert_fail@plt+0xbc0>
   11ac8:	ldrb	r2, [r2, r3]
   11acc:	ldr	r3, [fp, #-8]
   11ad0:	strb	r2, [r3]
   11ad4:	ldr	r3, [fp, #-8]
   11ad8:	add	r3, r3, #1
   11adc:	str	r3, [fp, #-8]
   11ae0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11ae4:	sub	r2, r3, #1
   11ae8:	str	r2, [fp, #-28]	; 0xffffffe4
   11aec:	cmp	r3, #0
   11af0:	bne	11a84 <__assert_fail@plt+0xb38>
   11af4:	nop			; (mov r0, r0)
   11af8:	sub	sp, fp, #4
   11afc:	pop	{fp, pc}
   11b00:			; <UNDEFINED> instruction: 0x0001c4b8
   11b04:	andeq	ip, r1, r0, lsr #5
   11b08:			; <UNDEFINED> instruction: 0x0001c2b0
   11b0c:	andeq	ip, r1, r8, asr #4
   11b10:	push	{fp, lr}
   11b14:	add	fp, sp, #4
   11b18:	sub	sp, sp, #8
   11b1c:	str	r0, [fp, #-8]
   11b20:	ldr	r3, [fp, #-8]
   11b24:	add	r3, r3, #4
   11b28:	mov	r0, r3
   11b2c:	bl	140a4 <__assert_fail@plt+0x3158>
   11b30:	ldr	r0, [fp, #-8]
   11b34:	bl	115cc <__assert_fail@plt+0x680>
   11b38:	nop			; (mov r0, r0)
   11b3c:	sub	sp, fp, #4
   11b40:	pop	{fp, pc}
   11b44:	push	{fp, lr}
   11b48:	add	fp, sp, #4
   11b4c:	sub	sp, sp, #40	; 0x28
   11b50:	str	r0, [fp, #-24]	; 0xffffffe8
   11b54:	str	r1, [fp, #-28]	; 0xffffffe4
   11b58:	str	r2, [fp, #-32]	; 0xffffffe0
   11b5c:	str	r3, [fp, #-36]	; 0xffffffdc
   11b60:	ldr	r1, [fp, #-32]	; 0xffffffe0
   11b64:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11b68:	bl	11618 <__assert_fail@plt+0x6cc>
   11b6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11b70:	str	r3, [fp, #-8]
   11b74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b78:	ldr	r3, [r3, #16]
   11b7c:	str	r3, [fp, #-12]
   11b80:	b	11be8 <__assert_fail@plt+0xc9c>
   11b84:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11b88:	ldrb	r3, [r3]
   11b8c:	mov	r0, r3
   11b90:	bl	119e0 <__assert_fail@plt+0xa94>
   11b94:	mov	r3, r0
   11b98:	cmp	r3, #0
   11b9c:	beq	11bc0 <__assert_fail@plt+0xc74>
   11ba0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11ba4:	ldrb	r3, [r3]
   11ba8:	sub	r3, r3, #48	; 0x30
   11bac:	ldr	r2, [pc, #148]	; 11c48 <__assert_fail@plt+0xcfc>
   11bb0:	ldrb	r2, [r2, r3]
   11bb4:	ldr	r3, [fp, #-12]
   11bb8:	strb	r2, [r3]
   11bbc:	b	11bd0 <__assert_fail@plt+0xc84>
   11bc0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11bc4:	ldrb	r2, [r3]
   11bc8:	ldr	r3, [fp, #-12]
   11bcc:	strb	r2, [r3]
   11bd0:	ldr	r3, [fp, #-12]
   11bd4:	add	r3, r3, #1
   11bd8:	str	r3, [fp, #-12]
   11bdc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11be0:	add	r3, r3, #1
   11be4:	str	r3, [fp, #-28]	; 0xffffffe4
   11be8:	ldr	r3, [fp, #-8]
   11bec:	sub	r2, r3, #1
   11bf0:	str	r2, [fp, #-8]
   11bf4:	cmp	r3, #0
   11bf8:	bne	11b84 <__assert_fail@plt+0xc38>
   11bfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11c00:	add	r0, r3, #4
   11c04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11c08:	ldr	r1, [r3, #16]
   11c0c:	ldr	r3, [fp, #4]
   11c10:	str	r3, [sp]
   11c14:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11c18:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11c1c:	bl	148c4 <__assert_fail@plt+0x3978>
   11c20:	mov	r3, r0
   11c24:	strb	r3, [fp, #-13]
   11c28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11c2c:	ldr	r2, [r3, #4]
   11c30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11c34:	str	r2, [r3]
   11c38:	ldrb	r3, [fp, #-13]
   11c3c:	mov	r0, r3
   11c40:	sub	sp, fp, #4
   11c44:	pop	{fp, pc}
   11c48:	andeq	ip, r1, r4, ror r2
   11c4c:	push	{fp}		; (str fp, [sp, #-4]!)
   11c50:	add	fp, sp, #0
   11c54:	sub	sp, sp, #12
   11c58:	mov	r3, r0
   11c5c:	strb	r3, [fp, #-5]
   11c60:	ldrb	r3, [fp, #-5]
   11c64:	cmp	r3, #47	; 0x2f
   11c68:	bls	11c78 <__assert_fail@plt+0xd2c>
   11c6c:	ldrb	r3, [fp, #-5]
   11c70:	cmp	r3, #57	; 0x39
   11c74:	bls	11c90 <__assert_fail@plt+0xd44>
   11c78:	ldrb	r3, [fp, #-5]
   11c7c:	cmp	r3, #64	; 0x40
   11c80:	bls	11c98 <__assert_fail@plt+0xd4c>
   11c84:	ldrb	r3, [fp, #-5]
   11c88:	cmp	r3, #70	; 0x46
   11c8c:	bhi	11c98 <__assert_fail@plt+0xd4c>
   11c90:	mov	r3, #1
   11c94:	b	11c9c <__assert_fail@plt+0xd50>
   11c98:	mov	r3, #0
   11c9c:	and	r3, r3, #1
   11ca0:	uxtb	r3, r3
   11ca4:	mov	r0, r3
   11ca8:	add	sp, fp, #0
   11cac:	pop	{fp}		; (ldr fp, [sp], #4)
   11cb0:	bx	lr
   11cb4:	push	{fp}		; (str fp, [sp, #-4]!)
   11cb8:	add	fp, sp, #0
   11cbc:	sub	sp, sp, #12
   11cc0:	str	r0, [fp, #-8]
   11cc4:	ldr	r3, [fp, #-8]
   11cc8:	lsl	r3, r3, #1
   11ccc:	mov	r0, r3
   11cd0:	add	sp, fp, #0
   11cd4:	pop	{fp}		; (ldr fp, [sp], #4)
   11cd8:	bx	lr
   11cdc:	push	{fp}		; (str fp, [sp, #-4]!)
   11ce0:	add	fp, sp, #0
   11ce4:	sub	sp, sp, #28
   11ce8:	str	r0, [fp, #-16]
   11cec:	str	r1, [fp, #-20]	; 0xffffffec
   11cf0:	str	r2, [fp, #-24]	; 0xffffffe8
   11cf4:	str	r3, [fp, #-28]	; 0xffffffe4
   11cf8:	b	11d5c <__assert_fail@plt+0xe10>
   11cfc:	ldr	r3, [fp, #-16]
   11d00:	ldrb	r3, [r3]
   11d04:	strb	r3, [fp, #-5]
   11d08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11d0c:	add	r2, r3, #1
   11d10:	str	r2, [fp, #-24]	; 0xffffffe8
   11d14:	ldrb	r2, [fp, #-5]
   11d18:	lsr	r2, r2, #4
   11d1c:	uxtb	r2, r2
   11d20:	mov	r1, r2
   11d24:	ldr	r2, [pc, #84]	; 11d80 <__assert_fail@plt+0xe34>
   11d28:	ldrb	r2, [r2, r1]
   11d2c:	strb	r2, [r3]
   11d30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11d34:	add	r2, r3, #1
   11d38:	str	r2, [fp, #-24]	; 0xffffffe8
   11d3c:	ldrb	r2, [fp, #-5]
   11d40:	and	r2, r2, #15
   11d44:	ldr	r1, [pc, #52]	; 11d80 <__assert_fail@plt+0xe34>
   11d48:	ldrb	r2, [r1, r2]
   11d4c:	strb	r2, [r3]
   11d50:	ldr	r3, [fp, #-16]
   11d54:	add	r3, r3, #1
   11d58:	str	r3, [fp, #-16]
   11d5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11d60:	sub	r2, r3, #1
   11d64:	str	r2, [fp, #-20]	; 0xffffffec
   11d68:	cmp	r3, #0
   11d6c:	bne	11cfc <__assert_fail@plt+0xdb0>
   11d70:	nop			; (mov r0, r0)
   11d74:	add	sp, fp, #0
   11d78:	pop	{fp}		; (ldr fp, [sp], #4)
   11d7c:	bx	lr
   11d80:	andeq	ip, r1, ip, asr #5
   11d84:	push	{fp, lr}
   11d88:	add	fp, sp, #4
   11d8c:	sub	sp, sp, #8
   11d90:	str	r0, [fp, #-8]
   11d94:	ldr	r0, [fp, #-8]
   11d98:	bl	115cc <__assert_fail@plt+0x680>
   11d9c:	ldr	r3, [fp, #-8]
   11da0:	mov	r2, #0
   11da4:	strb	r2, [r3, #5]
   11da8:	ldr	r3, [fp, #-8]
   11dac:	mov	r2, #1
   11db0:	str	r2, [r3]
   11db4:	nop			; (mov r0, r0)
   11db8:	sub	sp, fp, #4
   11dbc:	pop	{fp, pc}
   11dc0:	push	{fp}		; (str fp, [sp, #-4]!)
   11dc4:	add	fp, sp, #0
   11dc8:	sub	sp, sp, #28
   11dcc:	str	r0, [fp, #-16]
   11dd0:	str	r1, [fp, #-20]	; 0xffffffec
   11dd4:	str	r2, [fp, #-24]	; 0xffffffe8
   11dd8:	str	r3, [fp, #-28]	; 0xffffffe4
   11ddc:	mov	r3, #1
   11de0:	strb	r3, [fp, #-9]
   11de4:	ldr	r3, [fp, #4]
   11de8:	mov	r2, #0
   11dec:	str	r2, [r3]
   11df0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11df4:	cmp	r3, #0
   11df8:	bne	11f58 <__assert_fail@plt+0x100c>
   11dfc:	ldr	r3, [fp, #-16]
   11e00:	ldrb	r3, [r3, #5]
   11e04:	cmp	r3, #0
   11e08:	movne	r3, #1
   11e0c:	moveq	r3, #0
   11e10:	uxtb	r3, r3
   11e14:	eor	r3, r3, #1
   11e18:	uxtb	r3, r3
   11e1c:	and	r3, r3, #1
   11e20:	uxtb	r3, r3
   11e24:	b	11f70 <__assert_fail@plt+0x1024>
   11e28:	ldrb	r3, [fp, #-9]
   11e2c:	cmp	r3, #0
   11e30:	beq	11e54 <__assert_fail@plt+0xf08>
   11e34:	ldr	r3, [fp, #-20]	; 0xffffffec
   11e38:	ldrb	r3, [r3]
   11e3c:	cmp	r3, #10
   11e40:	bne	11e54 <__assert_fail@plt+0xf08>
   11e44:	ldr	r3, [fp, #-20]	; 0xffffffec
   11e48:	add	r3, r3, #1
   11e4c:	str	r3, [fp, #-20]	; 0xffffffec
   11e50:	b	11f58 <__assert_fail@plt+0x100c>
   11e54:	ldr	r3, [fp, #-20]	; 0xffffffec
   11e58:	add	r2, r3, #1
   11e5c:	str	r2, [fp, #-20]	; 0xffffffec
   11e60:	ldrb	r3, [r3]
   11e64:	str	r3, [fp, #-8]
   11e68:	ldr	r3, [fp, #-8]
   11e6c:	cmp	r3, #47	; 0x2f
   11e70:	ble	11e90 <__assert_fail@plt+0xf44>
   11e74:	ldr	r3, [fp, #-8]
   11e78:	cmp	r3, #57	; 0x39
   11e7c:	bgt	11e90 <__assert_fail@plt+0xf44>
   11e80:	ldr	r3, [fp, #-8]
   11e84:	sub	r3, r3, #48	; 0x30
   11e88:	str	r3, [fp, #-8]
   11e8c:	b	11ec0 <__assert_fail@plt+0xf74>
   11e90:	ldr	r3, [fp, #-8]
   11e94:	cmp	r3, #64	; 0x40
   11e98:	ble	11eb8 <__assert_fail@plt+0xf6c>
   11e9c:	ldr	r3, [fp, #-8]
   11ea0:	cmp	r3, #70	; 0x46
   11ea4:	bgt	11eb8 <__assert_fail@plt+0xf6c>
   11ea8:	ldr	r3, [fp, #-8]
   11eac:	sub	r3, r3, #55	; 0x37
   11eb0:	str	r3, [fp, #-8]
   11eb4:	b	11ec0 <__assert_fail@plt+0xf74>
   11eb8:	mov	r3, #0
   11ebc:	b	11f70 <__assert_fail@plt+0x1024>
   11ec0:	ldr	r3, [fp, #-16]
   11ec4:	ldrb	r3, [r3, #5]
   11ec8:	cmp	r3, #0
   11ecc:	beq	11f18 <__assert_fail@plt+0xfcc>
   11ed0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11ed4:	add	r2, r3, #1
   11ed8:	str	r2, [fp, #-28]	; 0xffffffe4
   11edc:	ldr	r2, [fp, #-16]
   11ee0:	ldrb	r2, [r2, #4]
   11ee4:	lsl	r2, r2, #4
   11ee8:	uxtb	r1, r2
   11eec:	ldr	r2, [fp, #-8]
   11ef0:	uxtb	r2, r2
   11ef4:	add	r2, r1, r2
   11ef8:	uxtb	r2, r2
   11efc:	strb	r2, [r3]
   11f00:	ldr	r3, [fp, #4]
   11f04:	ldr	r3, [r3]
   11f08:	add	r2, r3, #1
   11f0c:	ldr	r3, [fp, #4]
   11f10:	str	r2, [r3]
   11f14:	b	11f28 <__assert_fail@plt+0xfdc>
   11f18:	ldr	r3, [fp, #-8]
   11f1c:	uxtb	r2, r3
   11f20:	ldr	r3, [fp, #-16]
   11f24:	strb	r2, [r3, #4]
   11f28:	ldr	r3, [fp, #-16]
   11f2c:	ldrb	r3, [r3, #5]
   11f30:	cmp	r3, #0
   11f34:	movne	r3, #1
   11f38:	moveq	r3, #0
   11f3c:	uxtb	r3, r3
   11f40:	eor	r3, r3, #1
   11f44:	uxtb	r3, r3
   11f48:	and	r3, r3, #1
   11f4c:	uxtb	r2, r3
   11f50:	ldr	r3, [fp, #-16]
   11f54:	strb	r2, [r3, #5]
   11f58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f5c:	sub	r2, r3, #1
   11f60:	str	r2, [fp, #-24]	; 0xffffffe8
   11f64:	cmp	r3, #0
   11f68:	bne	11e28 <__assert_fail@plt+0xedc>
   11f6c:	mov	r3, #1
   11f70:	mov	r0, r3
   11f74:	add	sp, fp, #0
   11f78:	pop	{fp}		; (ldr fp, [sp], #4)
   11f7c:	bx	lr
   11f80:	push	{fp}		; (str fp, [sp, #-4]!)
   11f84:	add	fp, sp, #0
   11f88:	sub	sp, sp, #20
   11f8c:	str	r0, [fp, #-16]
   11f90:	ldr	r2, [fp, #-16]
   11f94:	mov	r3, r2
   11f98:	lsl	r3, r3, #2
   11f9c:	add	r3, r3, r2
   11fa0:	add	r2, r3, #3
   11fa4:	cmp	r3, #0
   11fa8:	movlt	r3, r2
   11fac:	movge	r3, r3
   11fb0:	asr	r3, r3, #2
   11fb4:	str	r3, [fp, #-8]
   11fb8:	ldr	r3, [fp, #-8]
   11fbc:	mov	r0, r3
   11fc0:	add	sp, fp, #0
   11fc4:	pop	{fp}		; (ldr fp, [sp], #4)
   11fc8:	bx	lr
   11fcc:	push	{fp, lr}
   11fd0:	add	fp, sp, #4
   11fd4:	sub	sp, sp, #8
   11fd8:	mov	r3, r0
   11fdc:	strb	r3, [fp, #-5]
   11fe0:	ldrb	r3, [fp, #-5]
   11fe4:	mov	r0, r3
   11fe8:	bl	15b1c <__assert_fail@plt+0x4bd0>
   11fec:	mov	r3, r0
   11ff0:	cmp	r3, #0
   11ff4:	bne	12014 <__assert_fail@plt+0x10c8>
   11ff8:	ldrb	r3, [fp, #-5]
   11ffc:	mov	r1, r3
   12000:	ldr	r0, [pc, #44]	; 12034 <__assert_fail@plt+0x10e8>
   12004:	bl	10e68 <strchr@plt>
   12008:	mov	r3, r0
   1200c:	cmp	r3, #0
   12010:	beq	1201c <__assert_fail@plt+0x10d0>
   12014:	mov	r3, #1
   12018:	b	12020 <__assert_fail@plt+0x10d4>
   1201c:	mov	r3, #0
   12020:	and	r3, r3, #1
   12024:	uxtb	r3, r3
   12028:	mov	r0, r3
   1202c:	sub	sp, fp, #4
   12030:	pop	{fp, pc}
   12034:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   12038:	push	{r4, r5, fp, lr}
   1203c:	add	fp, sp, #12
   12040:	sub	sp, sp, #48	; 0x30
   12044:	str	r0, [fp, #-48]	; 0xffffffd0
   12048:	str	r1, [fp, #-52]	; 0xffffffcc
   1204c:	str	r2, [fp, #-56]	; 0xffffffc8
   12050:	str	r3, [fp, #-60]	; 0xffffffc4
   12054:	mov	r3, #0
   12058:	str	r3, [fp, #-16]
   1205c:	mov	r3, #0
   12060:	str	r3, [fp, #-20]	; 0xffffffec
   12064:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12068:	cmp	r3, #0
   1206c:	bne	12098 <__assert_fail@plt+0x114c>
   12070:	ldr	r3, [fp, #-16]
   12074:	cmp	r3, #0
   12078:	beq	121f4 <__assert_fail@plt+0x12a8>
   1207c:	ldr	r0, [pc, #380]	; 12200 <__assert_fail@plt+0x12b4>
   12080:	bl	10e50 <gettext@plt>
   12084:	mov	r3, r0
   12088:	mov	r2, r3
   1208c:	mov	r1, #0
   12090:	mov	r0, #1
   12094:	bl	10df0 <error@plt>
   12098:	ldr	r3, [fp, #-16]
   1209c:	add	r2, r3, #1
   120a0:	str	r2, [fp, #-16]
   120a4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   120a8:	add	r1, r2, #1
   120ac:	str	r1, [fp, #-48]	; 0xffffffd0
   120b0:	ldrb	r2, [r2]
   120b4:	sub	r1, fp, #12
   120b8:	add	r3, r1, r3
   120bc:	strb	r2, [r3, #-28]	; 0xffffffe4
   120c0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   120c4:	sub	r3, r3, #1
   120c8:	str	r3, [fp, #-52]	; 0xffffffcc
   120cc:	ldr	r3, [fp, #-16]
   120d0:	cmp	r3, #4
   120d4:	bne	12064 <__assert_fail@plt+0x1118>
   120d8:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   120dc:	uxtb	r2, r3
   120e0:	mov	r3, #0
   120e4:	strd	r2, [fp, #-28]	; 0xffffffe4
   120e8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   120ec:	lsl	r5, r3, #24
   120f0:	orr	r5, r5, r2, lsr #8
   120f4:	lsl	r4, r2, #24
   120f8:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   120fc:	lsl	r3, r3, #16
   12100:	mov	r2, r3
   12104:	asr	r3, r2, #31
   12108:	adds	r0, r4, r2
   1210c:	adc	r1, r5, r3
   12110:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12114:	lsl	r3, r3, #8
   12118:	mov	r2, r3
   1211c:	asr	r3, r2, #31
   12120:	adds	r0, r0, r2
   12124:	adc	r1, r1, r3
   12128:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   1212c:	uxtb	r2, r3
   12130:	mov	r3, #0
   12134:	adds	r2, r2, r0
   12138:	adc	r3, r3, r1
   1213c:	strd	r2, [fp, #-28]	; 0xffffffe4
   12140:	mov	r3, #4
   12144:	str	r3, [fp, #-32]	; 0xffffffe0
   12148:	b	121c4 <__assert_fail@plt+0x1278>
   1214c:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   12150:	mov	r2, #85	; 0x55
   12154:	mov	r3, #0
   12158:	bl	1b694 <__assert_fail@plt+0xa748>
   1215c:	mov	r3, r2
   12160:	str	r3, [fp, #-36]	; 0xffffffdc
   12164:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   12168:	mov	r2, #85	; 0x55
   1216c:	mov	r3, #0
   12170:	bl	1b694 <__assert_fail@plt+0xa748>
   12174:	mov	r2, r0
   12178:	mov	r3, r1
   1217c:	strd	r2, [fp, #-28]	; 0xffffffe4
   12180:	ldr	r2, [fp, #-20]	; 0xffffffec
   12184:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12188:	add	r2, r2, r3
   1218c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12190:	cmp	r2, r3
   12194:	bge	121b8 <__assert_fail@plt+0x126c>
   12198:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1219c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   121a0:	add	r3, r2, r3
   121a4:	ldr	r1, [pc, #88]	; 12204 <__assert_fail@plt+0x12b8>
   121a8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   121ac:	add	r2, r1, r2
   121b0:	ldrb	r2, [r2]
   121b4:	strb	r2, [r3]
   121b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   121bc:	sub	r3, r3, #1
   121c0:	str	r3, [fp, #-32]	; 0xffffffe0
   121c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   121c8:	cmp	r3, #0
   121cc:	bge	1214c <__assert_fail@plt+0x1200>
   121d0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   121d4:	add	r3, r3, #5
   121d8:	str	r3, [fp, #-56]	; 0xffffffc8
   121dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   121e0:	add	r3, r3, #5
   121e4:	str	r3, [fp, #-20]	; 0xffffffec
   121e8:	mov	r3, #0
   121ec:	str	r3, [fp, #-16]
   121f0:	b	12064 <__assert_fail@plt+0x1118>
   121f4:	nop			; (mov r0, r0)
   121f8:	sub	sp, fp, #12
   121fc:	pop	{r4, r5, fp, pc}
   12200:	andeq	ip, r1, ip, asr #6
   12204:	strdeq	ip, [r1], -r4
   12208:	push	{fp, lr}
   1220c:	add	fp, sp, #4
   12210:	sub	sp, sp, #8
   12214:	str	r0, [fp, #-8]
   12218:	ldr	r0, [fp, #-8]
   1221c:	bl	115cc <__assert_fail@plt+0x680>
   12220:	ldr	r3, [fp, #-8]
   12224:	mov	r2, #0
   12228:	str	r2, [r3, #4]
   1222c:	ldr	r3, [fp, #-8]
   12230:	mov	r2, #1
   12234:	str	r2, [r3]
   12238:	nop			; (mov r0, r0)
   1223c:	sub	sp, fp, #4
   12240:	pop	{fp, pc}
   12244:	push	{r4, r5, r6, r7, r8, r9, fp}
   12248:	add	fp, sp, #24
   1224c:	sub	sp, sp, #44	; 0x2c
   12250:	str	r0, [fp, #-48]	; 0xffffffd0
   12254:	str	r1, [fp, #-52]	; 0xffffffcc
   12258:	str	r2, [fp, #-56]	; 0xffffffc8
   1225c:	str	r3, [fp, #-60]	; 0xffffffc4
   12260:	mov	r3, #1
   12264:	strb	r3, [fp, #-29]	; 0xffffffe3
   12268:	ldr	r3, [fp, #4]
   1226c:	mov	r2, #0
   12270:	str	r2, [r3]
   12274:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12278:	cmp	r3, #0
   1227c:	bne	12510 <__assert_fail@plt+0x15c4>
   12280:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12284:	ldr	r3, [r3, #4]
   12288:	cmp	r3, #0
   1228c:	ble	12298 <__assert_fail@plt+0x134c>
   12290:	mov	r3, #0
   12294:	b	12538 <__assert_fail@plt+0x15ec>
   12298:	mov	r3, #1
   1229c:	b	12538 <__assert_fail@plt+0x15ec>
   122a0:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   122a4:	cmp	r3, #0
   122a8:	beq	122cc <__assert_fail@plt+0x1380>
   122ac:	ldr	r3, [fp, #-52]	; 0xffffffcc
   122b0:	ldrb	r3, [r3]
   122b4:	cmp	r3, #10
   122b8:	bne	122cc <__assert_fail@plt+0x1380>
   122bc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   122c0:	add	r3, r3, #1
   122c4:	str	r3, [fp, #-52]	; 0xffffffcc
   122c8:	b	12510 <__assert_fail@plt+0x15c4>
   122cc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   122d0:	ldrb	r3, [r3]
   122d4:	strb	r3, [fp, #-30]	; 0xffffffe2
   122d8:	ldrb	r3, [fp, #-30]	; 0xffffffe2
   122dc:	cmp	r3, #32
   122e0:	bls	12368 <__assert_fail@plt+0x141c>
   122e4:	ldrb	r3, [fp, #-30]	; 0xffffffe2
   122e8:	cmp	r3, #125	; 0x7d
   122ec:	bhi	12368 <__assert_fail@plt+0x141c>
   122f0:	ldrb	r3, [fp, #-30]	; 0xffffffe2
   122f4:	sub	r3, r3, #33	; 0x21
   122f8:	ldr	r2, [pc, #584]	; 12548 <__assert_fail@plt+0x15fc>
   122fc:	ldrb	r3, [r2, r3]
   12300:	strb	r3, [fp, #-31]	; 0xffffffe1
   12304:	ldrsb	r3, [fp, #-31]	; 0xffffffe1
   12308:	cmp	r3, #0
   1230c:	bge	12318 <__assert_fail@plt+0x13cc>
   12310:	mov	r3, #0
   12314:	b	12538 <__assert_fail@plt+0x15ec>
   12318:	ldrb	r3, [fp, #-31]	; 0xffffffe1
   1231c:	strb	r3, [fp, #-30]	; 0xffffffe2
   12320:	nop			; (mov r0, r0)
   12324:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12328:	add	r3, r3, #1
   1232c:	str	r3, [fp, #-52]	; 0xffffffcc
   12330:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12334:	ldr	r3, [r3, #4]
   12338:	add	r1, r3, #1
   1233c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12340:	str	r1, [r2, #4]
   12344:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12348:	add	r3, r2, r3
   1234c:	ldrb	r2, [fp, #-30]	; 0xffffffe2
   12350:	strb	r2, [r3, #8]
   12354:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12358:	ldr	r3, [r3, #4]
   1235c:	cmp	r3, #5
   12360:	bne	12510 <__assert_fail@plt+0x15c4>
   12364:	b	12370 <__assert_fail@plt+0x1424>
   12368:	mov	r3, #0
   1236c:	b	12538 <__assert_fail@plt+0x15ec>
   12370:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12374:	ldrb	r3, [r3, #9]
   12378:	mov	r2, r3
   1237c:	ldr	r3, [pc, #456]	; 1254c <__assert_fail@plt+0x1600>
   12380:	mul	r1, r3, r2
   12384:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12388:	ldrb	r3, [r3, #10]
   1238c:	mov	r2, r3
   12390:	mov	r3, r2
   12394:	lsl	r3, r3, #3
   12398:	sub	r3, r3, r2
   1239c:	lsl	r0, r3, #7
   123a0:	add	r3, r3, r0
   123a4:	lsl	r3, r3, #3
   123a8:	add	r3, r3, r2
   123ac:	add	r2, r1, r3
   123b0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   123b4:	ldrb	r3, [r3, #11]
   123b8:	mov	r1, r3
   123bc:	mov	r3, r1
   123c0:	lsl	r3, r3, #2
   123c4:	add	r3, r3, r1
   123c8:	lsl	r1, r3, #4
   123cc:	add	r3, r3, r1
   123d0:	add	r3, r2, r3
   123d4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   123d8:	ldrb	r2, [r2, #12]
   123dc:	add	r3, r3, r2
   123e0:	mov	r2, r3
   123e4:	asr	r3, r2, #31
   123e8:	strd	r2, [fp, #-44]	; 0xffffffd4
   123ec:	ldr	r3, [fp, #-48]	; 0xffffffd0
   123f0:	ldrb	r3, [r3, #8]
   123f4:	uxtb	r2, r3
   123f8:	mov	r3, #0
   123fc:	ldr	r1, [pc, #332]	; 12550 <__assert_fail@plt+0x1604>
   12400:	mul	r0, r1, r3
   12404:	mov	r1, #0
   12408:	mul	r1, r1, r2
   1240c:	add	r1, r0, r1
   12410:	ldr	r0, [pc, #312]	; 12550 <__assert_fail@plt+0x1604>
   12414:	umull	r2, r3, r2, r0
   12418:	add	r1, r1, r3
   1241c:	mov	r3, r1
   12420:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   12424:	adds	r2, r2, r0
   12428:	adc	r3, r3, r1
   1242c:	strd	r2, [fp, #-44]	; 0xffffffd4
   12430:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   12434:	lsr	r4, r2, #24
   12438:	orr	r4, r4, r3, lsl #8
   1243c:	asr	r5, r3, #24
   12440:	mvn	r2, #255	; 0xff
   12444:	mvn	r3, #0
   12448:	and	r2, r2, r4
   1244c:	and	r3, r3, r5
   12450:	orrs	r3, r2, r3
   12454:	beq	12460 <__assert_fail@plt+0x1514>
   12458:	mov	r3, #0
   1245c:	b	12538 <__assert_fail@plt+0x15ec>
   12460:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12464:	add	r3, r1, #1
   12468:	str	r3, [fp, #-60]	; 0xffffffc4
   1246c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   12470:	lsr	r6, r2, #24
   12474:	orr	r6, r6, r3, lsl #8
   12478:	asr	r7, r3, #24
   1247c:	uxtb	r3, r6
   12480:	strb	r3, [r1]
   12484:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12488:	add	r3, r1, #1
   1248c:	str	r3, [fp, #-60]	; 0xffffffc4
   12490:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   12494:	lsr	r8, r2, #16
   12498:	orr	r8, r8, r3, lsl #16
   1249c:	asr	r9, r3, #16
   124a0:	uxtb	r3, r8
   124a4:	strb	r3, [r1]
   124a8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   124ac:	add	r3, r1, #1
   124b0:	str	r3, [fp, #-60]	; 0xffffffc4
   124b4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   124b8:	lsr	r0, r2, #8
   124bc:	str	r0, [fp, #-68]	; 0xffffffbc
   124c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   124c4:	orr	r0, r0, r3, lsl #24
   124c8:	str	r0, [fp, #-68]	; 0xffffffbc
   124cc:	asr	r3, r3, #8
   124d0:	str	r3, [fp, #-64]	; 0xffffffc0
   124d4:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   124d8:	strb	r3, [r1]
   124dc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   124e0:	add	r2, r3, #1
   124e4:	str	r2, [fp, #-60]	; 0xffffffc4
   124e8:	ldrb	r2, [fp, #-44]	; 0xffffffd4
   124ec:	strb	r2, [r3]
   124f0:	ldr	r3, [fp, #4]
   124f4:	ldr	r3, [r3]
   124f8:	add	r2, r3, #4
   124fc:	ldr	r3, [fp, #4]
   12500:	str	r2, [r3]
   12504:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12508:	mov	r2, #0
   1250c:	str	r2, [r3, #4]
   12510:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12514:	sub	r2, r3, #1
   12518:	str	r2, [fp, #-56]	; 0xffffffc8
   1251c:	cmp	r3, #0
   12520:	bne	122a0 <__assert_fail@plt+0x1354>
   12524:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12528:	ldr	r2, [r3, #4]
   1252c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12530:	str	r2, [r3]
   12534:	mov	r3, #1
   12538:	mov	r0, r3
   1253c:	sub	sp, fp, #24
   12540:	pop	{r4, r5, r6, r7, r8, r9, fp}
   12544:	bx	lr
   12548:	andeq	ip, r1, r4, lsl #7
   1254c:	andeq	r5, r9, sp, ror #29
   12550:	tsteq	ip, #-1325400064	; 0xb1000000
   12554:	push	{fp}		; (str fp, [sp, #-4]!)
   12558:	add	fp, sp, #0
   1255c:	sub	sp, sp, #12
   12560:	mov	r3, r0
   12564:	strb	r3, [fp, #-5]
   12568:	ldrb	r3, [fp, #-5]
   1256c:	cmp	r3, #48	; 0x30
   12570:	beq	12580 <__assert_fail@plt+0x1634>
   12574:	ldrb	r3, [fp, #-5]
   12578:	cmp	r3, #49	; 0x31
   1257c:	bne	12588 <__assert_fail@plt+0x163c>
   12580:	mov	r3, #1
   12584:	b	1258c <__assert_fail@plt+0x1640>
   12588:	mov	r3, #0
   1258c:	and	r3, r3, #1
   12590:	uxtb	r3, r3
   12594:	mov	r0, r3
   12598:	add	sp, fp, #0
   1259c:	pop	{fp}		; (ldr fp, [sp], #4)
   125a0:	bx	lr
   125a4:	push	{fp}		; (str fp, [sp, #-4]!)
   125a8:	add	fp, sp, #0
   125ac:	sub	sp, sp, #12
   125b0:	str	r0, [fp, #-8]
   125b4:	ldr	r3, [fp, #-8]
   125b8:	lsl	r3, r3, #3
   125bc:	mov	r0, r3
   125c0:	add	sp, fp, #0
   125c4:	pop	{fp}		; (ldr fp, [sp], #4)
   125c8:	bx	lr
   125cc:	push	{fp}		; (str fp, [sp, #-4]!)
   125d0:	add	fp, sp, #0
   125d4:	sub	sp, sp, #28
   125d8:	str	r0, [fp, #-16]
   125dc:	str	r1, [fp, #-20]	; 0xffffffec
   125e0:	str	r2, [fp, #-24]	; 0xffffffe8
   125e4:	str	r3, [fp, #-28]	; 0xffffffe4
   125e8:	b	12668 <__assert_fail@plt+0x171c>
   125ec:	ldr	r3, [fp, #-16]
   125f0:	ldrb	r3, [r3]
   125f4:	strb	r3, [fp, #-5]
   125f8:	mov	r3, #0
   125fc:	str	r3, [fp, #-12]
   12600:	b	12644 <__assert_fail@plt+0x16f8>
   12604:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12608:	add	r2, r3, #1
   1260c:	str	r2, [fp, #-24]	; 0xffffffe8
   12610:	ldrsb	r2, [fp, #-5]
   12614:	cmp	r2, #0
   12618:	bge	12624 <__assert_fail@plt+0x16d8>
   1261c:	mov	r2, #49	; 0x31
   12620:	b	12628 <__assert_fail@plt+0x16dc>
   12624:	mov	r2, #48	; 0x30
   12628:	strb	r2, [r3]
   1262c:	ldrb	r3, [fp, #-5]
   12630:	lsl	r3, r3, #1
   12634:	strb	r3, [fp, #-5]
   12638:	ldr	r3, [fp, #-12]
   1263c:	add	r3, r3, #1
   12640:	str	r3, [fp, #-12]
   12644:	ldr	r3, [fp, #-12]
   12648:	cmp	r3, #7
   1264c:	ble	12604 <__assert_fail@plt+0x16b8>
   12650:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12654:	sub	r3, r3, #8
   12658:	str	r3, [fp, #-28]	; 0xffffffe4
   1265c:	ldr	r3, [fp, #-16]
   12660:	add	r3, r3, #1
   12664:	str	r3, [fp, #-16]
   12668:	ldr	r3, [fp, #-20]	; 0xffffffec
   1266c:	sub	r2, r3, #1
   12670:	str	r2, [fp, #-20]	; 0xffffffec
   12674:	cmp	r3, #0
   12678:	bne	125ec <__assert_fail@plt+0x16a0>
   1267c:	nop			; (mov r0, r0)
   12680:	add	sp, fp, #0
   12684:	pop	{fp}		; (ldr fp, [sp], #4)
   12688:	bx	lr
   1268c:	push	{fp}		; (str fp, [sp, #-4]!)
   12690:	add	fp, sp, #0
   12694:	sub	sp, sp, #28
   12698:	str	r0, [fp, #-16]
   1269c:	str	r1, [fp, #-20]	; 0xffffffec
   126a0:	str	r2, [fp, #-24]	; 0xffffffe8
   126a4:	str	r3, [fp, #-28]	; 0xffffffe4
   126a8:	b	1272c <__assert_fail@plt+0x17e0>
   126ac:	ldr	r3, [fp, #-16]
   126b0:	ldrb	r3, [r3]
   126b4:	strb	r3, [fp, #-5]
   126b8:	mov	r3, #0
   126bc:	str	r3, [fp, #-12]
   126c0:	b	12708 <__assert_fail@plt+0x17bc>
   126c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   126c8:	add	r2, r3, #1
   126cc:	str	r2, [fp, #-24]	; 0xffffffe8
   126d0:	ldrb	r2, [fp, #-5]
   126d4:	and	r2, r2, #1
   126d8:	cmp	r2, #0
   126dc:	beq	126e8 <__assert_fail@plt+0x179c>
   126e0:	mov	r2, #49	; 0x31
   126e4:	b	126ec <__assert_fail@plt+0x17a0>
   126e8:	mov	r2, #48	; 0x30
   126ec:	strb	r2, [r3]
   126f0:	ldrb	r3, [fp, #-5]
   126f4:	lsr	r3, r3, #1
   126f8:	strb	r3, [fp, #-5]
   126fc:	ldr	r3, [fp, #-12]
   12700:	add	r3, r3, #1
   12704:	str	r3, [fp, #-12]
   12708:	ldr	r3, [fp, #-12]
   1270c:	cmp	r3, #7
   12710:	ble	126c4 <__assert_fail@plt+0x1778>
   12714:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12718:	sub	r3, r3, #8
   1271c:	str	r3, [fp, #-28]	; 0xffffffe4
   12720:	ldr	r3, [fp, #-16]
   12724:	add	r3, r3, #1
   12728:	str	r3, [fp, #-16]
   1272c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12730:	sub	r2, r3, #1
   12734:	str	r2, [fp, #-20]	; 0xffffffec
   12738:	cmp	r3, #0
   1273c:	bne	126ac <__assert_fail@plt+0x1760>
   12740:	nop			; (mov r0, r0)
   12744:	add	sp, fp, #0
   12748:	pop	{fp}		; (ldr fp, [sp], #4)
   1274c:	bx	lr
   12750:	push	{fp, lr}
   12754:	add	fp, sp, #4
   12758:	sub	sp, sp, #8
   1275c:	str	r0, [fp, #-8]
   12760:	ldr	r0, [fp, #-8]
   12764:	bl	115cc <__assert_fail@plt+0x680>
   12768:	ldr	r3, [fp, #-8]
   1276c:	mov	r2, #0
   12770:	strb	r2, [r3, #4]
   12774:	ldr	r3, [fp, #-8]
   12778:	mov	r2, #0
   1277c:	str	r2, [r3]
   12780:	nop			; (mov r0, r0)
   12784:	sub	sp, fp, #4
   12788:	pop	{fp, pc}
   1278c:	push	{fp, lr}
   12790:	add	fp, sp, #4
   12794:	sub	sp, sp, #24
   12798:	str	r0, [fp, #-16]
   1279c:	str	r1, [fp, #-20]	; 0xffffffec
   127a0:	str	r2, [fp, #-24]	; 0xffffffe8
   127a4:	str	r3, [fp, #-28]	; 0xffffffe4
   127a8:	mov	r3, #1
   127ac:	strb	r3, [fp, #-5]
   127b0:	ldr	r3, [fp, #4]
   127b4:	mov	r2, #0
   127b8:	str	r2, [r3]
   127bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   127c0:	cmp	r3, #0
   127c4:	bne	128fc <__assert_fail@plt+0x19b0>
   127c8:	ldr	r3, [fp, #-16]
   127cc:	ldr	r3, [r3]
   127d0:	cmp	r3, #0
   127d4:	moveq	r3, #1
   127d8:	movne	r3, #0
   127dc:	uxtb	r3, r3
   127e0:	b	12914 <__assert_fail@plt+0x19c8>
   127e4:	ldrb	r3, [fp, #-5]
   127e8:	cmp	r3, #0
   127ec:	beq	12810 <__assert_fail@plt+0x18c4>
   127f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   127f4:	ldrb	r3, [r3]
   127f8:	cmp	r3, #10
   127fc:	bne	12810 <__assert_fail@plt+0x18c4>
   12800:	ldr	r3, [fp, #-20]	; 0xffffffec
   12804:	add	r3, r3, #1
   12808:	str	r3, [fp, #-20]	; 0xffffffec
   1280c:	b	128fc <__assert_fail@plt+0x19b0>
   12810:	ldr	r3, [fp, #-20]	; 0xffffffec
   12814:	ldrb	r3, [r3]
   12818:	mov	r0, r3
   1281c:	bl	12554 <__assert_fail@plt+0x1608>
   12820:	mov	r3, r0
   12824:	eor	r3, r3, #1
   12828:	uxtb	r3, r3
   1282c:	cmp	r3, #0
   12830:	beq	1283c <__assert_fail@plt+0x18f0>
   12834:	mov	r3, #0
   12838:	b	12914 <__assert_fail@plt+0x19c8>
   1283c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12840:	ldrb	r3, [r3]
   12844:	cmp	r3, #49	; 0x31
   12848:	moveq	r3, #1
   1284c:	movne	r3, #0
   12850:	strb	r3, [fp, #-6]
   12854:	ldr	r3, [fp, #-16]
   12858:	ldrb	r3, [r3, #4]
   1285c:	sxtb	r2, r3
   12860:	ldrb	r1, [fp, #-6]
   12864:	ldr	r3, [fp, #-16]
   12868:	ldr	r3, [r3]
   1286c:	lsl	r3, r1, r3
   12870:	sxtb	r3, r3
   12874:	orr	r3, r2, r3
   12878:	sxtb	r3, r3
   1287c:	uxtb	r2, r3
   12880:	ldr	r3, [fp, #-16]
   12884:	strb	r2, [r3, #4]
   12888:	ldr	r3, [fp, #-16]
   1288c:	ldr	r3, [r3]
   12890:	add	r2, r3, #1
   12894:	ldr	r3, [fp, #-16]
   12898:	str	r2, [r3]
   1289c:	ldr	r3, [fp, #-16]
   128a0:	ldr	r3, [r3]
   128a4:	cmp	r3, #8
   128a8:	bne	128f0 <__assert_fail@plt+0x19a4>
   128ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   128b0:	add	r2, r3, #1
   128b4:	str	r2, [fp, #-28]	; 0xffffffe4
   128b8:	ldr	r2, [fp, #-16]
   128bc:	ldrb	r2, [r2, #4]
   128c0:	strb	r2, [r3]
   128c4:	ldr	r3, [fp, #-16]
   128c8:	mov	r2, #0
   128cc:	strb	r2, [r3, #4]
   128d0:	ldr	r3, [fp, #4]
   128d4:	ldr	r3, [r3]
   128d8:	add	r2, r3, #1
   128dc:	ldr	r3, [fp, #4]
   128e0:	str	r2, [r3]
   128e4:	ldr	r3, [fp, #-16]
   128e8:	mov	r2, #0
   128ec:	str	r2, [r3]
   128f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   128f4:	add	r3, r3, #1
   128f8:	str	r3, [fp, #-20]	; 0xffffffec
   128fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12900:	sub	r2, r3, #1
   12904:	str	r2, [fp, #-24]	; 0xffffffe8
   12908:	cmp	r3, #0
   1290c:	bne	127e4 <__assert_fail@plt+0x1898>
   12910:	mov	r3, #1
   12914:	mov	r0, r3
   12918:	sub	sp, fp, #4
   1291c:	pop	{fp, pc}
   12920:	push	{fp, lr}
   12924:	add	fp, sp, #4
   12928:	sub	sp, sp, #24
   1292c:	str	r0, [fp, #-16]
   12930:	str	r1, [fp, #-20]	; 0xffffffec
   12934:	str	r2, [fp, #-24]	; 0xffffffe8
   12938:	str	r3, [fp, #-28]	; 0xffffffe4
   1293c:	mov	r3, #1
   12940:	strb	r3, [fp, #-5]
   12944:	ldr	r3, [fp, #4]
   12948:	mov	r2, #0
   1294c:	str	r2, [r3]
   12950:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12954:	cmp	r3, #0
   12958:	bne	12aac <__assert_fail@plt+0x1b60>
   1295c:	ldr	r3, [fp, #-16]
   12960:	ldr	r3, [r3]
   12964:	cmp	r3, #0
   12968:	moveq	r3, #1
   1296c:	movne	r3, #0
   12970:	uxtb	r3, r3
   12974:	b	12ac4 <__assert_fail@plt+0x1b78>
   12978:	ldrb	r3, [fp, #-5]
   1297c:	cmp	r3, #0
   12980:	beq	129a4 <__assert_fail@plt+0x1a58>
   12984:	ldr	r3, [fp, #-20]	; 0xffffffec
   12988:	ldrb	r3, [r3]
   1298c:	cmp	r3, #10
   12990:	bne	129a4 <__assert_fail@plt+0x1a58>
   12994:	ldr	r3, [fp, #-20]	; 0xffffffec
   12998:	add	r3, r3, #1
   1299c:	str	r3, [fp, #-20]	; 0xffffffec
   129a0:	b	12aac <__assert_fail@plt+0x1b60>
   129a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   129a8:	ldrb	r3, [r3]
   129ac:	mov	r0, r3
   129b0:	bl	12554 <__assert_fail@plt+0x1608>
   129b4:	mov	r3, r0
   129b8:	eor	r3, r3, #1
   129bc:	uxtb	r3, r3
   129c0:	cmp	r3, #0
   129c4:	beq	129d0 <__assert_fail@plt+0x1a84>
   129c8:	mov	r3, #0
   129cc:	b	12ac4 <__assert_fail@plt+0x1b78>
   129d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   129d4:	ldrb	r3, [r3]
   129d8:	cmp	r3, #49	; 0x31
   129dc:	moveq	r3, #1
   129e0:	movne	r3, #0
   129e4:	strb	r3, [fp, #-6]
   129e8:	ldr	r3, [fp, #-16]
   129ec:	ldr	r3, [r3]
   129f0:	cmp	r3, #0
   129f4:	bne	12a04 <__assert_fail@plt+0x1ab8>
   129f8:	ldr	r3, [fp, #-16]
   129fc:	mov	r2, #8
   12a00:	str	r2, [r3]
   12a04:	ldr	r3, [fp, #-16]
   12a08:	ldr	r3, [r3]
   12a0c:	sub	r2, r3, #1
   12a10:	ldr	r3, [fp, #-16]
   12a14:	str	r2, [r3]
   12a18:	ldr	r3, [fp, #-16]
   12a1c:	ldrb	r3, [r3, #4]
   12a20:	sxtb	r2, r3
   12a24:	ldrb	r1, [fp, #-6]
   12a28:	ldr	r3, [fp, #-16]
   12a2c:	ldr	r3, [r3]
   12a30:	lsl	r3, r1, r3
   12a34:	sxtb	r3, r3
   12a38:	orr	r3, r2, r3
   12a3c:	sxtb	r3, r3
   12a40:	uxtb	r2, r3
   12a44:	ldr	r3, [fp, #-16]
   12a48:	strb	r2, [r3, #4]
   12a4c:	ldr	r3, [fp, #-16]
   12a50:	ldr	r3, [r3]
   12a54:	cmp	r3, #0
   12a58:	bne	12aa0 <__assert_fail@plt+0x1b54>
   12a5c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12a60:	add	r2, r3, #1
   12a64:	str	r2, [fp, #-28]	; 0xffffffe4
   12a68:	ldr	r2, [fp, #-16]
   12a6c:	ldrb	r2, [r2, #4]
   12a70:	strb	r2, [r3]
   12a74:	ldr	r3, [fp, #-16]
   12a78:	mov	r2, #0
   12a7c:	strb	r2, [r3, #4]
   12a80:	ldr	r3, [fp, #4]
   12a84:	ldr	r3, [r3]
   12a88:	add	r2, r3, #1
   12a8c:	ldr	r3, [fp, #4]
   12a90:	str	r2, [r3]
   12a94:	ldr	r3, [fp, #-16]
   12a98:	mov	r2, #0
   12a9c:	str	r2, [r3]
   12aa0:	ldr	r3, [fp, #-20]	; 0xffffffec
   12aa4:	add	r3, r3, #1
   12aa8:	str	r3, [fp, #-20]	; 0xffffffec
   12aac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12ab0:	sub	r2, r3, #1
   12ab4:	str	r2, [fp, #-24]	; 0xffffffe8
   12ab8:	cmp	r3, #0
   12abc:	bne	12978 <__assert_fail@plt+0x1a2c>
   12ac0:	mov	r3, #1
   12ac4:	mov	r0, r3
   12ac8:	sub	sp, fp, #4
   12acc:	pop	{fp, pc}
   12ad0:	push	{r4, fp, lr}
   12ad4:	add	fp, sp, #8
   12ad8:	sub	sp, sp, #28
   12adc:	str	r0, [fp, #-24]	; 0xffffffe8
   12ae0:	str	r1, [fp, #-28]	; 0xffffffe4
   12ae4:	str	r2, [fp, #-32]	; 0xffffffe0
   12ae8:	str	r3, [fp, #-36]	; 0xffffffdc
   12aec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12af0:	cmp	r3, #0
   12af4:	bne	12b48 <__assert_fail@plt+0x1bfc>
   12af8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12afc:	ldr	r3, [pc, #372]	; 12c78 <__assert_fail@plt+0x1d2c>
   12b00:	ldr	r3, [r3]
   12b04:	mov	r1, #1
   12b08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12b0c:	bl	10d60 <fwrite_unlocked@plt>
   12b10:	mov	r2, r0
   12b14:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12b18:	cmp	r2, r3
   12b1c:	bcs	12c6c <__assert_fail@plt+0x1d20>
   12b20:	bl	10e80 <__errno_location@plt>
   12b24:	mov	r3, r0
   12b28:	ldr	r4, [r3]
   12b2c:	ldr	r0, [pc, #328]	; 12c7c <__assert_fail@plt+0x1d30>
   12b30:	bl	10e50 <gettext@plt>
   12b34:	mov	r3, r0
   12b38:	mov	r2, r3
   12b3c:	mov	r1, r4
   12b40:	mov	r0, #1
   12b44:	bl	10df0 <error@plt>
   12b48:	mov	r3, #0
   12b4c:	str	r3, [fp, #-16]
   12b50:	b	12c5c <__assert_fail@plt+0x1d10>
   12b54:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12b58:	ldr	r3, [fp, #-16]
   12b5c:	sub	r2, r2, r3
   12b60:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12b64:	ldr	r3, [r3]
   12b68:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12b6c:	sub	r3, r1, r3
   12b70:	cmp	r2, r3
   12b74:	movlt	r3, r2
   12b78:	movge	r3, r3
   12b7c:	str	r3, [fp, #-20]	; 0xffffffec
   12b80:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b84:	cmp	r3, #0
   12b88:	bne	12bdc <__assert_fail@plt+0x1c90>
   12b8c:	ldr	r1, [fp, #4]
   12b90:	mov	r0, #10
   12b94:	bl	10d78 <fputc_unlocked@plt>
   12b98:	mov	r3, r0
   12b9c:	cmn	r3, #1
   12ba0:	bne	12bcc <__assert_fail@plt+0x1c80>
   12ba4:	bl	10e80 <__errno_location@plt>
   12ba8:	mov	r3, r0
   12bac:	ldr	r4, [r3]
   12bb0:	ldr	r0, [pc, #196]	; 12c7c <__assert_fail@plt+0x1d30>
   12bb4:	bl	10e50 <gettext@plt>
   12bb8:	mov	r3, r0
   12bbc:	mov	r2, r3
   12bc0:	mov	r1, r4
   12bc4:	mov	r0, #1
   12bc8:	bl	10df0 <error@plt>
   12bcc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12bd0:	mov	r2, #0
   12bd4:	str	r2, [r3]
   12bd8:	b	12c5c <__assert_fail@plt+0x1d10>
   12bdc:	ldr	r3, [fp, #-16]
   12be0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12be4:	add	r0, r2, r3
   12be8:	ldr	r2, [fp, #-20]	; 0xffffffec
   12bec:	ldr	r3, [pc, #132]	; 12c78 <__assert_fail@plt+0x1d2c>
   12bf0:	ldr	r3, [r3]
   12bf4:	mov	r1, #1
   12bf8:	bl	10d60 <fwrite_unlocked@plt>
   12bfc:	mov	r2, r0
   12c00:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c04:	cmp	r2, r3
   12c08:	bcs	12c34 <__assert_fail@plt+0x1ce8>
   12c0c:	bl	10e80 <__errno_location@plt>
   12c10:	mov	r3, r0
   12c14:	ldr	r4, [r3]
   12c18:	ldr	r0, [pc, #92]	; 12c7c <__assert_fail@plt+0x1d30>
   12c1c:	bl	10e50 <gettext@plt>
   12c20:	mov	r3, r0
   12c24:	mov	r2, r3
   12c28:	mov	r1, r4
   12c2c:	mov	r0, #1
   12c30:	bl	10df0 <error@plt>
   12c34:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12c38:	ldr	r2, [r3]
   12c3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c40:	add	r2, r2, r3
   12c44:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12c48:	str	r2, [r3]
   12c4c:	ldr	r2, [fp, #-16]
   12c50:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c54:	add	r3, r2, r3
   12c58:	str	r3, [fp, #-16]
   12c5c:	ldr	r2, [fp, #-16]
   12c60:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12c64:	cmp	r2, r3
   12c68:	blt	12b54 <__assert_fail@plt+0x1c08>
   12c6c:	nop			; (mov r0, r0)
   12c70:	sub	sp, fp, #8
   12c74:	pop	{r4, fp, pc}
   12c78:	andeq	sp, r2, r4, asr r1
   12c7c:	andeq	ip, r1, r4, ror #7
   12c80:	push	{r4, fp, lr}
   12c84:	add	fp, sp, #8
   12c88:	sub	sp, sp, #12
   12c8c:	str	r0, [fp, #-16]
   12c90:	str	r1, [fp, #-20]	; 0xffffffec
   12c94:	ldr	r0, [fp, #-16]
   12c98:	bl	16244 <__assert_fail@plt+0x52f8>
   12c9c:	mov	r3, r0
   12ca0:	cmp	r3, #0
   12ca4:	beq	12d18 <__assert_fail@plt+0x1dcc>
   12ca8:	ldr	r1, [pc, #112]	; 12d20 <__assert_fail@plt+0x1dd4>
   12cac:	ldr	r0, [fp, #-20]	; 0xffffffec
   12cb0:	bl	10cf4 <strcmp@plt>
   12cb4:	mov	r3, r0
   12cb8:	cmp	r3, #0
   12cbc:	bne	12ce8 <__assert_fail@plt+0x1d9c>
   12cc0:	bl	10e80 <__errno_location@plt>
   12cc4:	mov	r3, r0
   12cc8:	ldr	r4, [r3]
   12ccc:	ldr	r0, [pc, #80]	; 12d24 <__assert_fail@plt+0x1dd8>
   12cd0:	bl	10e50 <gettext@plt>
   12cd4:	mov	r3, r0
   12cd8:	mov	r2, r3
   12cdc:	mov	r1, r4
   12ce0:	mov	r0, #1
   12ce4:	bl	10df0 <error@plt>
   12ce8:	bl	10e80 <__errno_location@plt>
   12cec:	mov	r3, r0
   12cf0:	ldr	r4, [r3]
   12cf4:	ldr	r2, [fp, #-20]	; 0xffffffec
   12cf8:	mov	r1, #3
   12cfc:	mov	r0, #0
   12d00:	bl	18b50 <__assert_fail@plt+0x7c04>
   12d04:	mov	r3, r0
   12d08:	ldr	r2, [pc, #24]	; 12d28 <__assert_fail@plt+0x1ddc>
   12d0c:	mov	r1, r4
   12d10:	mov	r0, #1
   12d14:	bl	10df0 <error@plt>
   12d18:	mov	r0, #0
   12d1c:	bl	10e44 <exit@plt>
   12d20:	strdeq	ip, [r1], -r0
   12d24:	strdeq	ip, [r1], -r4
   12d28:	andeq	ip, r1, ip, lsl #8
   12d2c:	push	{r4, fp, lr}
   12d30:	add	fp, sp, #8
   12d34:	sub	sp, sp, #52	; 0x34
   12d38:	str	r0, [fp, #-40]	; 0xffffffd8
   12d3c:	str	r1, [fp, #-44]	; 0xffffffd4
   12d40:	str	r2, [fp, #-48]	; 0xffffffd0
   12d44:	str	r3, [fp, #-52]	; 0xffffffcc
   12d48:	mov	r3, #0
   12d4c:	str	r3, [fp, #-32]	; 0xffffffe0
   12d50:	mov	r0, #30720	; 0x7800
   12d54:	bl	19688 <__assert_fail@plt+0x873c>
   12d58:	mov	r3, r0
   12d5c:	str	r3, [fp, #-20]	; 0xffffffec
   12d60:	ldr	r3, [pc, #476]	; 12f44 <__assert_fail@plt+0x1ff8>
   12d64:	ldr	r3, [r3]
   12d68:	mov	r0, #30720	; 0x7800
   12d6c:	blx	r3
   12d70:	mov	r3, r0
   12d74:	mov	r0, r3
   12d78:	bl	19688 <__assert_fail@plt+0x873c>
   12d7c:	mov	r3, r0
   12d80:	str	r3, [fp, #-24]	; 0xffffffe8
   12d84:	mov	r3, #0
   12d88:	str	r3, [fp, #-16]
   12d8c:	ldr	r3, [fp, #-16]
   12d90:	ldr	r2, [fp, #-20]	; 0xffffffec
   12d94:	add	r0, r2, r3
   12d98:	ldr	r3, [fp, #-16]
   12d9c:	rsb	r3, r3, #30720	; 0x7800
   12da0:	mov	r2, r3
   12da4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12da8:	mov	r1, #1
   12dac:	bl	10f1c <fread_unlocked@plt>
   12db0:	mov	r3, r0
   12db4:	str	r3, [fp, #-28]	; 0xffffffe4
   12db8:	ldr	r2, [fp, #-16]
   12dbc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12dc0:	add	r3, r2, r3
   12dc4:	str	r3, [fp, #-16]
   12dc8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12dcc:	bl	10f40 <feof_unlocked@plt>
   12dd0:	mov	r3, r0
   12dd4:	cmp	r3, #0
   12dd8:	bne	12dfc <__assert_fail@plt+0x1eb0>
   12ddc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12de0:	bl	10dd8 <ferror_unlocked@plt>
   12de4:	mov	r3, r0
   12de8:	cmp	r3, #0
   12dec:	bne	12dfc <__assert_fail@plt+0x1eb0>
   12df0:	ldr	r3, [fp, #-16]
   12df4:	cmp	r3, #30720	; 0x7800
   12df8:	blt	12d8c <__assert_fail@plt+0x1e40>
   12dfc:	ldr	r3, [fp, #-16]
   12e00:	cmp	r3, #0
   12e04:	ble	12e64 <__assert_fail@plt+0x1f18>
   12e08:	ldr	r3, [pc, #312]	; 12f48 <__assert_fail@plt+0x1ffc>
   12e0c:	ldr	r4, [r3]
   12e10:	ldr	r3, [pc, #300]	; 12f44 <__assert_fail@plt+0x1ff8>
   12e14:	ldr	r3, [r3]
   12e18:	ldr	r0, [fp, #-16]
   12e1c:	blx	r3
   12e20:	mov	r3, r0
   12e24:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12e28:	ldr	r1, [fp, #-16]
   12e2c:	ldr	r0, [fp, #-20]	; 0xffffffec
   12e30:	blx	r4
   12e34:	ldr	r3, [pc, #264]	; 12f44 <__assert_fail@plt+0x1ff8>
   12e38:	ldr	r3, [r3]
   12e3c:	ldr	r0, [fp, #-16]
   12e40:	blx	r3
   12e44:	mov	r1, r0
   12e48:	sub	r2, fp, #32
   12e4c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12e50:	str	r3, [sp]
   12e54:	mov	r3, r2
   12e58:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12e5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12e60:	bl	12ad0 <__assert_fail@plt+0x1b84>
   12e64:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12e68:	bl	10f40 <feof_unlocked@plt>
   12e6c:	mov	r3, r0
   12e70:	cmp	r3, #0
   12e74:	bne	12e98 <__assert_fail@plt+0x1f4c>
   12e78:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12e7c:	bl	10dd8 <ferror_unlocked@plt>
   12e80:	mov	r3, r0
   12e84:	cmp	r3, #0
   12e88:	bne	12e98 <__assert_fail@plt+0x1f4c>
   12e8c:	ldr	r3, [fp, #-16]
   12e90:	cmp	r3, #30720	; 0x7800
   12e94:	beq	12d84 <__assert_fail@plt+0x1e38>
   12e98:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12e9c:	cmp	r3, #0
   12ea0:	beq	12ef0 <__assert_fail@plt+0x1fa4>
   12ea4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12ea8:	cmp	r3, #0
   12eac:	ble	12ef0 <__assert_fail@plt+0x1fa4>
   12eb0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12eb4:	mov	r0, #10
   12eb8:	bl	10d78 <fputc_unlocked@plt>
   12ebc:	mov	r3, r0
   12ec0:	cmn	r3, #1
   12ec4:	bne	12ef0 <__assert_fail@plt+0x1fa4>
   12ec8:	bl	10e80 <__errno_location@plt>
   12ecc:	mov	r3, r0
   12ed0:	ldr	r4, [r3]
   12ed4:	ldr	r0, [pc, #112]	; 12f4c <__assert_fail@plt+0x2000>
   12ed8:	bl	10e50 <gettext@plt>
   12edc:	mov	r3, r0
   12ee0:	mov	r2, r3
   12ee4:	mov	r1, r4
   12ee8:	mov	r0, #1
   12eec:	bl	10df0 <error@plt>
   12ef0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12ef4:	bl	10dd8 <ferror_unlocked@plt>
   12ef8:	mov	r3, r0
   12efc:	cmp	r3, #0
   12f00:	beq	12f2c <__assert_fail@plt+0x1fe0>
   12f04:	bl	10e80 <__errno_location@plt>
   12f08:	mov	r3, r0
   12f0c:	ldr	r4, [r3]
   12f10:	ldr	r0, [pc, #56]	; 12f50 <__assert_fail@plt+0x2004>
   12f14:	bl	10e50 <gettext@plt>
   12f18:	mov	r3, r0
   12f1c:	mov	r2, r3
   12f20:	mov	r1, r4
   12f24:	mov	r0, #1
   12f28:	bl	10df0 <error@plt>
   12f2c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12f30:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12f34:	bl	12c80 <__assert_fail@plt+0x1d34>
   12f38:	nop			; (mov r0, r0)
   12f3c:	sub	sp, fp, #8
   12f40:	pop	{r4, fp, pc}
   12f44:	andeq	sp, r2, r0, ror #2
   12f48:	andeq	sp, r2, r8, ror #2
   12f4c:	andeq	ip, r1, r4, ror #7
   12f50:	andeq	ip, r1, r0, lsl r4
   12f54:	push	{r4, fp, lr}
   12f58:	add	fp, sp, #8
   12f5c:	sub	sp, sp, #84	; 0x54
   12f60:	str	r0, [fp, #-72]	; 0xffffffb8
   12f64:	str	r1, [fp, #-76]	; 0xffffffb4
   12f68:	str	r2, [fp, #-80]	; 0xffffffb0
   12f6c:	strb	r3, [fp, #-81]	; 0xffffffaf
   12f70:	ldr	r3, [pc, #856]	; 132d0 <__assert_fail@plt+0x2384>
   12f74:	ldr	r3, [r3]
   12f78:	ldr	r0, [pc, #852]	; 132d4 <__assert_fail@plt+0x2388>
   12f7c:	blx	r3
   12f80:	mov	r3, r0
   12f84:	mov	r0, r3
   12f88:	bl	19688 <__assert_fail@plt+0x873c>
   12f8c:	mov	r3, r0
   12f90:	str	r3, [fp, #-32]	; 0xffffffe0
   12f94:	ldr	r0, [pc, #824]	; 132d4 <__assert_fail@plt+0x2388>
   12f98:	bl	19688 <__assert_fail@plt+0x873c>
   12f9c:	mov	r3, r0
   12fa0:	str	r3, [fp, #-36]	; 0xffffffdc
   12fa4:	mov	r3, #0
   12fa8:	str	r3, [fp, #-48]	; 0xffffffd0
   12fac:	ldr	r3, [pc, #804]	; 132d8 <__assert_fail@plt+0x238c>
   12fb0:	ldr	r3, [r3]
   12fb4:	sub	r2, fp, #64	; 0x40
   12fb8:	mov	r0, r2
   12fbc:	blx	r3
   12fc0:	mov	r3, #0
   12fc4:	str	r3, [fp, #-16]
   12fc8:	ldr	r3, [fp, #-16]
   12fcc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12fd0:	add	r4, r2, r3
   12fd4:	ldr	r3, [pc, #756]	; 132d0 <__assert_fail@plt+0x2384>
   12fd8:	ldr	r3, [r3]
   12fdc:	ldr	r0, [pc, #752]	; 132d4 <__assert_fail@plt+0x2388>
   12fe0:	blx	r3
   12fe4:	mov	r2, r0
   12fe8:	ldr	r3, [fp, #-16]
   12fec:	sub	r3, r2, r3
   12ff0:	mov	r2, r3
   12ff4:	ldr	r3, [fp, #-72]	; 0xffffffb8
   12ff8:	mov	r1, #1
   12ffc:	mov	r0, r4
   13000:	bl	10f1c <fread_unlocked@plt>
   13004:	mov	r3, r0
   13008:	str	r3, [fp, #-20]	; 0xffffffec
   1300c:	ldrb	r3, [fp, #-81]	; 0xffffffaf
   13010:	cmp	r3, #0
   13014:	beq	130f8 <__assert_fail@plt+0x21ac>
   13018:	mov	r3, #0
   1301c:	str	r3, [fp, #-24]	; 0xffffffe8
   13020:	b	130dc <__assert_fail@plt+0x2190>
   13024:	ldr	r3, [pc, #688]	; 132dc <__assert_fail@plt+0x2390>
   13028:	ldr	r3, [r3]
   1302c:	ldr	r1, [fp, #-16]
   13030:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13034:	add	r2, r1, r2
   13038:	mov	r1, r2
   1303c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13040:	add	r2, r2, r1
   13044:	ldrb	r2, [r2]
   13048:	mov	r0, r2
   1304c:	blx	r3
   13050:	mov	r3, r0
   13054:	cmp	r3, #0
   13058:	bne	13080 <__assert_fail@plt+0x2134>
   1305c:	ldr	r2, [fp, #-16]
   13060:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13064:	add	r3, r2, r3
   13068:	mov	r2, r3
   1306c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13070:	add	r3, r3, r2
   13074:	ldrb	r3, [r3]
   13078:	cmp	r3, #61	; 0x3d
   1307c:	bne	13090 <__assert_fail@plt+0x2144>
   13080:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13084:	add	r3, r3, #1
   13088:	str	r3, [fp, #-24]	; 0xffffffe8
   1308c:	b	130dc <__assert_fail@plt+0x2190>
   13090:	ldr	r2, [fp, #-16]
   13094:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13098:	add	r3, r2, r3
   1309c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   130a0:	add	r0, r2, r3
   130a4:	ldr	r2, [fp, #-16]
   130a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   130ac:	add	r3, r2, r3
   130b0:	add	r3, r3, #1
   130b4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   130b8:	add	r1, r2, r3
   130bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   130c0:	sub	r3, r3, #1
   130c4:	str	r3, [fp, #-20]	; 0xffffffec
   130c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   130cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   130d0:	sub	r3, r2, r3
   130d4:	mov	r2, r3
   130d8:	bl	10d24 <memmove@plt>
   130dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   130e0:	cmp	r3, #0
   130e4:	ble	130f8 <__assert_fail@plt+0x21ac>
   130e8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   130ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   130f0:	cmp	r2, r3
   130f4:	blt	13024 <__assert_fail@plt+0x20d8>
   130f8:	ldr	r2, [fp, #-16]
   130fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13100:	add	r3, r2, r3
   13104:	str	r3, [fp, #-16]
   13108:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1310c:	bl	10dd8 <ferror_unlocked@plt>
   13110:	mov	r3, r0
   13114:	cmp	r3, #0
   13118:	beq	13144 <__assert_fail@plt+0x21f8>
   1311c:	bl	10e80 <__errno_location@plt>
   13120:	mov	r3, r0
   13124:	ldr	r4, [r3]
   13128:	ldr	r0, [pc, #432]	; 132e0 <__assert_fail@plt+0x2394>
   1312c:	bl	10e50 <gettext@plt>
   13130:	mov	r3, r0
   13134:	mov	r2, r3
   13138:	mov	r1, r4
   1313c:	mov	r0, #1
   13140:	bl	10df0 <error@plt>
   13144:	ldr	r3, [pc, #388]	; 132d0 <__assert_fail@plt+0x2384>
   13148:	ldr	r3, [r3]
   1314c:	ldr	r0, [pc, #384]	; 132d4 <__assert_fail@plt+0x2388>
   13150:	blx	r3
   13154:	mov	r2, r0
   13158:	ldr	r3, [fp, #-16]
   1315c:	cmp	r2, r3
   13160:	ble	13178 <__assert_fail@plt+0x222c>
   13164:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13168:	bl	10f40 <feof_unlocked@plt>
   1316c:	mov	r3, r0
   13170:	cmp	r3, #0
   13174:	beq	12fc8 <__assert_fail@plt+0x207c>
   13178:	mov	r3, #0
   1317c:	str	r3, [fp, #-28]	; 0xffffffe4
   13180:	b	13270 <__assert_fail@plt+0x2324>
   13184:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13188:	cmp	r3, #1
   1318c:	bne	1319c <__assert_fail@plt+0x2250>
   13190:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13194:	cmp	r3, #0
   13198:	beq	132a0 <__assert_fail@plt+0x2354>
   1319c:	ldr	r3, [pc, #304]	; 132d4 <__assert_fail@plt+0x2388>
   131a0:	str	r3, [fp, #-68]	; 0xffffffbc
   131a4:	ldr	r3, [pc, #312]	; 132e4 <__assert_fail@plt+0x2398>
   131a8:	ldr	r4, [r3]
   131ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   131b0:	cmp	r3, #0
   131b4:	bne	131c0 <__assert_fail@plt+0x2274>
   131b8:	ldr	r2, [fp, #-16]
   131bc:	b	131c4 <__assert_fail@plt+0x2278>
   131c0:	mov	r2, #0
   131c4:	sub	r0, fp, #64	; 0x40
   131c8:	sub	r3, fp, #68	; 0x44
   131cc:	str	r3, [sp]
   131d0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   131d4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   131d8:	blx	r4
   131dc:	mov	r3, r0
   131e0:	strb	r3, [fp, #-37]	; 0xffffffdb
   131e4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   131e8:	mov	r2, r3
   131ec:	ldr	r3, [fp, #-80]	; 0xffffffb0
   131f0:	mov	r1, #1
   131f4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   131f8:	bl	10d60 <fwrite_unlocked@plt>
   131fc:	mov	r2, r0
   13200:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13204:	cmp	r2, r3
   13208:	bcs	13234 <__assert_fail@plt+0x22e8>
   1320c:	bl	10e80 <__errno_location@plt>
   13210:	mov	r3, r0
   13214:	ldr	r4, [r3]
   13218:	ldr	r0, [pc, #200]	; 132e8 <__assert_fail@plt+0x239c>
   1321c:	bl	10e50 <gettext@plt>
   13220:	mov	r3, r0
   13224:	mov	r2, r3
   13228:	mov	r1, r4
   1322c:	mov	r0, #1
   13230:	bl	10df0 <error@plt>
   13234:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   13238:	eor	r3, r3, #1
   1323c:	uxtb	r3, r3
   13240:	cmp	r3, #0
   13244:	beq	13264 <__assert_fail@plt+0x2318>
   13248:	ldr	r0, [pc, #156]	; 132ec <__assert_fail@plt+0x23a0>
   1324c:	bl	10e50 <gettext@plt>
   13250:	mov	r3, r0
   13254:	mov	r2, r3
   13258:	mov	r1, #0
   1325c:	mov	r0, #1
   13260:	bl	10df0 <error@plt>
   13264:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13268:	add	r3, r3, #1
   1326c:	str	r3, [fp, #-28]	; 0xffffffe4
   13270:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13274:	bl	10f40 <feof_unlocked@plt>
   13278:	mov	r3, r0
   1327c:	cmp	r3, #0
   13280:	beq	1328c <__assert_fail@plt+0x2340>
   13284:	mov	r2, #2
   13288:	b	13290 <__assert_fail@plt+0x2344>
   1328c:	mov	r2, #1
   13290:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13294:	cmp	r2, r3
   13298:	bgt	13184 <__assert_fail@plt+0x2238>
   1329c:	b	132a4 <__assert_fail@plt+0x2358>
   132a0:	nop			; (mov r0, r0)
   132a4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   132a8:	bl	10f40 <feof_unlocked@plt>
   132ac:	mov	r3, r0
   132b0:	cmp	r3, #0
   132b4:	beq	12fc0 <__assert_fail@plt+0x2074>
   132b8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   132bc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   132c0:	bl	12c80 <__assert_fail@plt+0x1d34>
   132c4:	nop			; (mov r0, r0)
   132c8:	sub	sp, fp, #8
   132cc:	pop	{r4, fp, pc}
   132d0:	andeq	sp, r2, r0, ror #2
   132d4:	andeq	r1, r0, r8, rrx
   132d8:	andeq	sp, r2, ip, ror #2
   132dc:	andeq	sp, r2, r4, ror #2
   132e0:	andeq	ip, r1, r0, lsl r4
   132e4:	andeq	sp, r2, r0, ror r1
   132e8:	andeq	ip, r1, r4, ror #7
   132ec:	andeq	ip, r1, ip, lsl r4
   132f0:	push	{r4, fp, lr}
   132f4:	add	fp, sp, #8
   132f8:	sub	sp, sp, #68	; 0x44
   132fc:	str	r0, [fp, #-56]	; 0xffffffc8
   13300:	str	r1, [fp, #-60]	; 0xffffffc4
   13304:	mov	r3, #0
   13308:	strb	r3, [fp, #-21]	; 0xffffffeb
   1330c:	mov	r3, #0
   13310:	strb	r3, [fp, #-22]	; 0xffffffea
   13314:	mov	r3, #76	; 0x4c
   13318:	str	r3, [fp, #-28]	; 0xffffffe4
   1331c:	mov	r3, #0
   13320:	str	r3, [fp, #-32]	; 0xffffffe0
   13324:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13328:	ldr	r3, [r3]
   1332c:	mov	r0, r3
   13330:	bl	16690 <__assert_fail@plt+0x5744>
   13334:	ldr	r1, [pc, #1440]	; 138dc <__assert_fail@plt+0x2990>
   13338:	mov	r0, #6
   1333c:	bl	10ee0 <setlocale@plt>
   13340:	ldr	r1, [pc, #1432]	; 138e0 <__assert_fail@plt+0x2994>
   13344:	ldr	r0, [pc, #1432]	; 138e4 <__assert_fail@plt+0x2998>
   13348:	bl	10f10 <bindtextdomain@plt>
   1334c:	ldr	r0, [pc, #1424]	; 138e4 <__assert_fail@plt+0x2998>
   13350:	bl	10d90 <textdomain@plt>
   13354:	ldr	r0, [pc, #1420]	; 138e8 <__assert_fail@plt+0x299c>
   13358:	bl	1b904 <__assert_fail@plt+0xa9b8>
   1335c:	b	134dc <__assert_fail@plt+0x2590>
   13360:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13364:	cmp	r3, #105	; 0x69
   13368:	beq	13474 <__assert_fail@plt+0x2528>
   1336c:	cmp	r3, #105	; 0x69
   13370:	bgt	13390 <__assert_fail@plt+0x2444>
   13374:	cmn	r3, #2
   13378:	beq	1348c <__assert_fail@plt+0x2540>
   1337c:	cmp	r3, #100	; 0x64
   13380:	beq	133b0 <__assert_fail@plt+0x2464>
   13384:	cmn	r3, #3
   13388:	beq	13494 <__assert_fail@plt+0x2548>
   1338c:	b	134d4 <__assert_fail@plt+0x2588>
   13390:	cmp	r3, #119	; 0x77
   13394:	beq	133bc <__assert_fail@plt+0x2470>
   13398:	cmp	r3, #119	; 0x77
   1339c:	blt	134d4 <__assert_fail@plt+0x2588>
   133a0:	sub	r3, r3, #256	; 0x100
   133a4:	cmp	r3, #7
   133a8:	bhi	134d4 <__assert_fail@plt+0x2588>
   133ac:	b	13480 <__assert_fail@plt+0x2534>
   133b0:	mov	r3, #1
   133b4:	strb	r3, [fp, #-21]	; 0xffffffeb
   133b8:	b	134dc <__assert_fail@plt+0x2590>
   133bc:	ldr	r3, [pc, #1320]	; 138ec <__assert_fail@plt+0x29a0>
   133c0:	ldr	r0, [r3]
   133c4:	sub	r2, fp, #52	; 0x34
   133c8:	ldr	r3, [pc, #1292]	; 138dc <__assert_fail@plt+0x2990>
   133cc:	str	r3, [sp]
   133d0:	mov	r3, r2
   133d4:	mov	r2, #10
   133d8:	mov	r1, #0
   133dc:	bl	1a564 <__assert_fail@plt+0x9618>
   133e0:	str	r0, [fp, #-40]	; 0xffffffd8
   133e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   133e8:	cmp	r3, #1
   133ec:	bhi	13400 <__assert_fail@plt+0x24b4>
   133f0:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   133f4:	cmp	r2, #0
   133f8:	sbcs	r3, r3, #0
   133fc:	bge	13438 <__assert_fail@plt+0x24ec>
   13400:	ldr	r0, [pc, #1256]	; 138f0 <__assert_fail@plt+0x29a4>
   13404:	bl	10e50 <gettext@plt>
   13408:	mov	r4, r0
   1340c:	ldr	r3, [pc, #1240]	; 138ec <__assert_fail@plt+0x29a0>
   13410:	ldr	r3, [r3]
   13414:	mov	r0, r3
   13418:	bl	18dc0 <__assert_fail@plt+0x7e74>
   1341c:	mov	r3, r0
   13420:	str	r3, [sp]
   13424:	mov	r3, r4
   13428:	ldr	r2, [pc, #1220]	; 138f4 <__assert_fail@plt+0x29a8>
   1342c:	mov	r1, #0
   13430:	mov	r0, #1
   13434:	bl	10df0 <error@plt>
   13438:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1343c:	cmp	r3, #1
   13440:	beq	13468 <__assert_fail@plt+0x251c>
   13444:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   13448:	mvn	r0, #-2147483648	; 0x80000000
   1344c:	mov	r1, #0
   13450:	cmp	r0, r2
   13454:	sbcs	r3, r1, r3
   13458:	blt	13468 <__assert_fail@plt+0x251c>
   1345c:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   13460:	mov	r3, r2
   13464:	b	1346c <__assert_fail@plt+0x2520>
   13468:	mov	r3, #0
   1346c:	str	r3, [fp, #-28]	; 0xffffffe4
   13470:	b	134dc <__assert_fail@plt+0x2590>
   13474:	mov	r3, #1
   13478:	strb	r3, [fp, #-22]	; 0xffffffea
   1347c:	b	134dc <__assert_fail@plt+0x2590>
   13480:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13484:	str	r3, [fp, #-32]	; 0xffffffe0
   13488:	b	134dc <__assert_fail@plt+0x2590>
   1348c:	mov	r0, #0
   13490:	bl	11290 <__assert_fail@plt+0x344>
   13494:	ldr	r3, [pc, #1116]	; 138f8 <__assert_fail@plt+0x29ac>
   13498:	ldr	r0, [r3]
   1349c:	ldr	r3, [pc, #1112]	; 138fc <__assert_fail@plt+0x29b0>
   134a0:	ldr	r2, [r3]
   134a4:	mov	r3, #0
   134a8:	str	r3, [sp, #8]
   134ac:	ldr	r3, [pc, #1100]	; 13900 <__assert_fail@plt+0x29b4>
   134b0:	str	r3, [sp, #4]
   134b4:	ldr	r3, [pc, #1096]	; 13904 <__assert_fail@plt+0x29b8>
   134b8:	str	r3, [sp]
   134bc:	mov	r3, r2
   134c0:	ldr	r2, [pc, #1088]	; 13908 <__assert_fail@plt+0x29bc>
   134c4:	ldr	r1, [pc, #1088]	; 1390c <__assert_fail@plt+0x29c0>
   134c8:	bl	1953c <__assert_fail@plt+0x85f0>
   134cc:	mov	r0, #0
   134d0:	bl	10e44 <exit@plt>
   134d4:	mov	r0, #1
   134d8:	bl	11290 <__assert_fail@plt+0x344>
   134dc:	mov	r3, #0
   134e0:	str	r3, [sp]
   134e4:	ldr	r3, [pc, #1060]	; 13910 <__assert_fail@plt+0x29c4>
   134e8:	ldr	r2, [pc, #1060]	; 13914 <__assert_fail@plt+0x29c8>
   134ec:	ldr	r1, [fp, #-60]	; 0xffffffc4
   134f0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   134f4:	bl	10e2c <getopt_long@plt>
   134f8:	str	r0, [fp, #-36]	; 0xffffffdc
   134fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13500:	cmn	r3, #1
   13504:	bne	13360 <__assert_fail@plt+0x2414>
   13508:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1350c:	sub	r3, r3, #256	; 0x100
   13510:	cmp	r3, #7
   13514:	ldrls	pc, [pc, r3, lsl #2]
   13518:	b	1373c <__assert_fail@plt+0x27f0>
   1351c:	andeq	r3, r1, ip, lsr r5
   13520:	andeq	r3, r1, ip, ror r5
   13524:			; <UNDEFINED> instruction: 0x000135bc
   13528:	strdeq	r3, [r1], -ip
   1352c:	andeq	r3, r1, ip, lsr r6
   13530:	andeq	r3, r1, ip, ror r6
   13534:			; <UNDEFINED> instruction: 0x000136bc
   13538:	strdeq	r3, [r1], -ip
   1353c:	ldr	r3, [pc, #980]	; 13918 <__assert_fail@plt+0x29cc>
   13540:	ldr	r2, [pc, #980]	; 1391c <__assert_fail@plt+0x29d0>
   13544:	str	r2, [r3]
   13548:	ldr	r3, [pc, #976]	; 13920 <__assert_fail@plt+0x29d4>
   1354c:	ldr	r2, [pc, #976]	; 13924 <__assert_fail@plt+0x29d8>
   13550:	str	r2, [r3]
   13554:	ldr	r3, [pc, #972]	; 13928 <__assert_fail@plt+0x29dc>
   13558:	ldr	r2, [pc, #972]	; 1392c <__assert_fail@plt+0x29e0>
   1355c:	str	r2, [r3]
   13560:	ldr	r3, [pc, #968]	; 13930 <__assert_fail@plt+0x29e4>
   13564:	ldr	r2, [pc, #968]	; 13934 <__assert_fail@plt+0x29e8>
   13568:	str	r2, [r3]
   1356c:	ldr	r3, [pc, #964]	; 13938 <__assert_fail@plt+0x29ec>
   13570:	ldr	r2, [pc, #964]	; 1393c <__assert_fail@plt+0x29f0>
   13574:	str	r2, [r3]
   13578:	b	13760 <__assert_fail@plt+0x2814>
   1357c:	ldr	r3, [pc, #916]	; 13918 <__assert_fail@plt+0x29cc>
   13580:	ldr	r2, [pc, #916]	; 1391c <__assert_fail@plt+0x29d0>
   13584:	str	r2, [r3]
   13588:	ldr	r3, [pc, #912]	; 13920 <__assert_fail@plt+0x29d4>
   1358c:	ldr	r2, [pc, #940]	; 13940 <__assert_fail@plt+0x29f4>
   13590:	str	r2, [r3]
   13594:	ldr	r3, [pc, #908]	; 13928 <__assert_fail@plt+0x29dc>
   13598:	ldr	r2, [pc, #932]	; 13944 <__assert_fail@plt+0x29f8>
   1359c:	str	r2, [r3]
   135a0:	ldr	r3, [pc, #904]	; 13930 <__assert_fail@plt+0x29e4>
   135a4:	ldr	r2, [pc, #924]	; 13948 <__assert_fail@plt+0x29fc>
   135a8:	str	r2, [r3]
   135ac:	ldr	r3, [pc, #900]	; 13938 <__assert_fail@plt+0x29ec>
   135b0:	ldr	r2, [pc, #916]	; 1394c <__assert_fail@plt+0x2a00>
   135b4:	str	r2, [r3]
   135b8:	b	13760 <__assert_fail@plt+0x2814>
   135bc:	ldr	r3, [pc, #852]	; 13918 <__assert_fail@plt+0x29cc>
   135c0:	ldr	r2, [pc, #904]	; 13950 <__assert_fail@plt+0x2a04>
   135c4:	str	r2, [r3]
   135c8:	ldr	r3, [pc, #848]	; 13920 <__assert_fail@plt+0x29d4>
   135cc:	ldr	r2, [pc, #896]	; 13954 <__assert_fail@plt+0x2a08>
   135d0:	str	r2, [r3]
   135d4:	ldr	r3, [pc, #844]	; 13928 <__assert_fail@plt+0x29dc>
   135d8:	ldr	r2, [pc, #888]	; 13958 <__assert_fail@plt+0x2a0c>
   135dc:	str	r2, [r3]
   135e0:	ldr	r3, [pc, #840]	; 13930 <__assert_fail@plt+0x29e4>
   135e4:	ldr	r2, [pc, #880]	; 1395c <__assert_fail@plt+0x2a10>
   135e8:	str	r2, [r3]
   135ec:	ldr	r3, [pc, #836]	; 13938 <__assert_fail@plt+0x29ec>
   135f0:	ldr	r2, [pc, #872]	; 13960 <__assert_fail@plt+0x2a14>
   135f4:	str	r2, [r3]
   135f8:	b	13760 <__assert_fail@plt+0x2814>
   135fc:	ldr	r3, [pc, #788]	; 13918 <__assert_fail@plt+0x29cc>
   13600:	ldr	r2, [pc, #840]	; 13950 <__assert_fail@plt+0x2a04>
   13604:	str	r2, [r3]
   13608:	ldr	r3, [pc, #784]	; 13920 <__assert_fail@plt+0x29d4>
   1360c:	ldr	r2, [pc, #848]	; 13964 <__assert_fail@plt+0x2a18>
   13610:	str	r2, [r3]
   13614:	ldr	r3, [pc, #780]	; 13928 <__assert_fail@plt+0x29dc>
   13618:	ldr	r2, [pc, #840]	; 13968 <__assert_fail@plt+0x2a1c>
   1361c:	str	r2, [r3]
   13620:	ldr	r3, [pc, #776]	; 13930 <__assert_fail@plt+0x29e4>
   13624:	ldr	r2, [pc, #832]	; 1396c <__assert_fail@plt+0x2a20>
   13628:	str	r2, [r3]
   1362c:	ldr	r3, [pc, #772]	; 13938 <__assert_fail@plt+0x29ec>
   13630:	ldr	r2, [pc, #824]	; 13970 <__assert_fail@plt+0x2a24>
   13634:	str	r2, [r3]
   13638:	b	13760 <__assert_fail@plt+0x2814>
   1363c:	ldr	r3, [pc, #724]	; 13918 <__assert_fail@plt+0x29cc>
   13640:	ldr	r2, [pc, #812]	; 13974 <__assert_fail@plt+0x2a28>
   13644:	str	r2, [r3]
   13648:	ldr	r3, [pc, #720]	; 13920 <__assert_fail@plt+0x29d4>
   1364c:	ldr	r2, [pc, #804]	; 13978 <__assert_fail@plt+0x2a2c>
   13650:	str	r2, [r3]
   13654:	ldr	r3, [pc, #716]	; 13928 <__assert_fail@plt+0x29dc>
   13658:	ldr	r2, [pc, #796]	; 1397c <__assert_fail@plt+0x2a30>
   1365c:	str	r2, [r3]
   13660:	ldr	r3, [pc, #712]	; 13930 <__assert_fail@plt+0x29e4>
   13664:	ldr	r2, [pc, #788]	; 13980 <__assert_fail@plt+0x2a34>
   13668:	str	r2, [r3]
   1366c:	ldr	r3, [pc, #708]	; 13938 <__assert_fail@plt+0x29ec>
   13670:	ldr	r2, [pc, #780]	; 13984 <__assert_fail@plt+0x2a38>
   13674:	str	r2, [r3]
   13678:	b	13760 <__assert_fail@plt+0x2814>
   1367c:	ldr	r3, [pc, #660]	; 13918 <__assert_fail@plt+0x29cc>
   13680:	ldr	r2, [pc, #768]	; 13988 <__assert_fail@plt+0x2a3c>
   13684:	str	r2, [r3]
   13688:	ldr	r3, [pc, #656]	; 13920 <__assert_fail@plt+0x29d4>
   1368c:	ldr	r2, [pc, #760]	; 1398c <__assert_fail@plt+0x2a40>
   13690:	str	r2, [r3]
   13694:	ldr	r3, [pc, #652]	; 13928 <__assert_fail@plt+0x29dc>
   13698:	ldr	r2, [pc, #752]	; 13990 <__assert_fail@plt+0x2a44>
   1369c:	str	r2, [r3]
   136a0:	ldr	r3, [pc, #648]	; 13930 <__assert_fail@plt+0x29e4>
   136a4:	ldr	r2, [pc, #744]	; 13994 <__assert_fail@plt+0x2a48>
   136a8:	str	r2, [r3]
   136ac:	ldr	r3, [pc, #644]	; 13938 <__assert_fail@plt+0x29ec>
   136b0:	ldr	r2, [pc, #736]	; 13998 <__assert_fail@plt+0x2a4c>
   136b4:	str	r2, [r3]
   136b8:	b	13760 <__assert_fail@plt+0x2814>
   136bc:	ldr	r3, [pc, #596]	; 13918 <__assert_fail@plt+0x29cc>
   136c0:	ldr	r2, [pc, #704]	; 13988 <__assert_fail@plt+0x2a3c>
   136c4:	str	r2, [r3]
   136c8:	ldr	r3, [pc, #592]	; 13920 <__assert_fail@plt+0x29d4>
   136cc:	ldr	r2, [pc, #696]	; 1398c <__assert_fail@plt+0x2a40>
   136d0:	str	r2, [r3]
   136d4:	ldr	r3, [pc, #588]	; 13928 <__assert_fail@plt+0x29dc>
   136d8:	ldr	r2, [pc, #700]	; 1399c <__assert_fail@plt+0x2a50>
   136dc:	str	r2, [r3]
   136e0:	ldr	r3, [pc, #584]	; 13930 <__assert_fail@plt+0x29e4>
   136e4:	ldr	r2, [pc, #680]	; 13994 <__assert_fail@plt+0x2a48>
   136e8:	str	r2, [r3]
   136ec:	ldr	r3, [pc, #580]	; 13938 <__assert_fail@plt+0x29ec>
   136f0:	ldr	r2, [pc, #680]	; 139a0 <__assert_fail@plt+0x2a54>
   136f4:	str	r2, [r3]
   136f8:	b	13760 <__assert_fail@plt+0x2814>
   136fc:	ldr	r3, [pc, #532]	; 13918 <__assert_fail@plt+0x29cc>
   13700:	ldr	r2, [pc, #668]	; 139a4 <__assert_fail@plt+0x2a58>
   13704:	str	r2, [r3]
   13708:	ldr	r3, [pc, #528]	; 13920 <__assert_fail@plt+0x29d4>
   1370c:	ldr	r2, [pc, #660]	; 139a8 <__assert_fail@plt+0x2a5c>
   13710:	str	r2, [r3]
   13714:	ldr	r3, [pc, #524]	; 13928 <__assert_fail@plt+0x29dc>
   13718:	ldr	r2, [pc, #652]	; 139ac <__assert_fail@plt+0x2a60>
   1371c:	str	r2, [r3]
   13720:	ldr	r3, [pc, #520]	; 13930 <__assert_fail@plt+0x29e4>
   13724:	ldr	r2, [pc, #644]	; 139b0 <__assert_fail@plt+0x2a64>
   13728:	str	r2, [r3]
   1372c:	ldr	r3, [pc, #516]	; 13938 <__assert_fail@plt+0x29ec>
   13730:	ldr	r2, [pc, #636]	; 139b4 <__assert_fail@plt+0x2a68>
   13734:	str	r2, [r3]
   13738:	b	13760 <__assert_fail@plt+0x2814>
   1373c:	ldr	r0, [pc, #628]	; 139b8 <__assert_fail@plt+0x2a6c>
   13740:	bl	10e50 <gettext@plt>
   13744:	mov	r3, r0
   13748:	mov	r2, r3
   1374c:	mov	r1, #0
   13750:	mov	r0, #0
   13754:	bl	10df0 <error@plt>
   13758:	mov	r0, #1
   1375c:	bl	11290 <__assert_fail@plt+0x344>
   13760:	ldr	r3, [pc, #596]	; 139bc <__assert_fail@plt+0x2a70>
   13764:	ldr	r3, [r3]
   13768:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1376c:	sub	r3, r2, r3
   13770:	cmp	r3, #1
   13774:	ble	137c4 <__assert_fail@plt+0x2878>
   13778:	ldr	r0, [pc, #576]	; 139c0 <__assert_fail@plt+0x2a74>
   1377c:	bl	10e50 <gettext@plt>
   13780:	mov	r4, r0
   13784:	ldr	r3, [pc, #560]	; 139bc <__assert_fail@plt+0x2a70>
   13788:	ldr	r3, [r3]
   1378c:	add	r3, r3, #1
   13790:	lsl	r3, r3, #2
   13794:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13798:	add	r3, r2, r3
   1379c:	ldr	r3, [r3]
   137a0:	mov	r0, r3
   137a4:	bl	18dc0 <__assert_fail@plt+0x7e74>
   137a8:	mov	r3, r0
   137ac:	mov	r2, r4
   137b0:	mov	r1, #0
   137b4:	mov	r0, #0
   137b8:	bl	10df0 <error@plt>
   137bc:	mov	r0, #1
   137c0:	bl	11290 <__assert_fail@plt+0x344>
   137c4:	ldr	r3, [pc, #496]	; 139bc <__assert_fail@plt+0x2a70>
   137c8:	ldr	r2, [r3]
   137cc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   137d0:	cmp	r2, r3
   137d4:	bge	137f8 <__assert_fail@plt+0x28ac>
   137d8:	ldr	r3, [pc, #476]	; 139bc <__assert_fail@plt+0x2a70>
   137dc:	ldr	r3, [r3]
   137e0:	lsl	r3, r3, #2
   137e4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   137e8:	add	r3, r2, r3
   137ec:	ldr	r3, [r3]
   137f0:	str	r3, [fp, #-20]	; 0xffffffec
   137f4:	b	13800 <__assert_fail@plt+0x28b4>
   137f8:	ldr	r3, [pc, #452]	; 139c4 <__assert_fail@plt+0x2a78>
   137fc:	str	r3, [fp, #-20]	; 0xffffffec
   13800:	ldr	r1, [pc, #444]	; 139c4 <__assert_fail@plt+0x2a78>
   13804:	ldr	r0, [fp, #-20]	; 0xffffffec
   13808:	bl	10cf4 <strcmp@plt>
   1380c:	mov	r3, r0
   13810:	cmp	r3, #0
   13814:	bne	13834 <__assert_fail@plt+0x28e8>
   13818:	mov	r1, #0
   1381c:	mov	r0, #0
   13820:	bl	1a1f8 <__assert_fail@plt+0x92ac>
   13824:	ldr	r3, [pc, #412]	; 139c8 <__assert_fail@plt+0x2a7c>
   13828:	ldr	r3, [r3]
   1382c:	str	r3, [fp, #-16]
   13830:	b	13880 <__assert_fail@plt+0x2934>
   13834:	ldr	r1, [pc, #400]	; 139cc <__assert_fail@plt+0x2a80>
   13838:	ldr	r0, [fp, #-20]	; 0xffffffec
   1383c:	bl	10f04 <fopen64@plt>
   13840:	str	r0, [fp, #-16]
   13844:	ldr	r3, [fp, #-16]
   13848:	cmp	r3, #0
   1384c:	bne	13880 <__assert_fail@plt+0x2934>
   13850:	bl	10e80 <__errno_location@plt>
   13854:	mov	r3, r0
   13858:	ldr	r4, [r3]
   1385c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13860:	mov	r1, #3
   13864:	mov	r0, #0
   13868:	bl	18b50 <__assert_fail@plt+0x7c04>
   1386c:	mov	r3, r0
   13870:	ldr	r2, [pc, #344]	; 139d0 <__assert_fail@plt+0x2a84>
   13874:	mov	r1, r4
   13878:	mov	r0, #1
   1387c:	bl	10df0 <error@plt>
   13880:	mov	r1, #2
   13884:	ldr	r0, [fp, #-16]
   13888:	bl	161e8 <__assert_fail@plt+0x529c>
   1388c:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   13890:	cmp	r3, #0
   13894:	beq	138b4 <__assert_fail@plt+0x2968>
   13898:	ldr	r3, [pc, #88]	; 138f8 <__assert_fail@plt+0x29ac>
   1389c:	ldr	r2, [r3]
   138a0:	ldrb	r3, [fp, #-22]	; 0xffffffea
   138a4:	ldr	r1, [fp, #-20]	; 0xffffffec
   138a8:	ldr	r0, [fp, #-16]
   138ac:	bl	12f54 <__assert_fail@plt+0x2008>
   138b0:	b	138cc <__assert_fail@plt+0x2980>
   138b4:	ldr	r3, [pc, #60]	; 138f8 <__assert_fail@plt+0x29ac>
   138b8:	ldr	r2, [r3]
   138bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   138c0:	ldr	r1, [fp, #-20]	; 0xffffffec
   138c4:	ldr	r0, [fp, #-16]
   138c8:	bl	12d2c <__assert_fail@plt+0x1de0>
   138cc:	mov	r3, #0
   138d0:	mov	r0, r3
   138d4:	sub	sp, fp, #8
   138d8:	pop	{r4, fp, pc}
   138dc:	andeq	fp, r1, r4, lsr #21
   138e0:	andeq	ip, r1, ip, lsr #8
   138e4:			; <UNDEFINED> instruction: 0x0001babc
   138e8:	andeq	r6, r1, r4, ror r0
   138ec:	andeq	sp, r2, r8, asr r1
   138f0:	andeq	ip, r1, r4, asr #8
   138f4:	andeq	ip, r1, r8, asr r4
   138f8:	andeq	sp, r2, r4, asr r1
   138fc:	strdeq	sp, [r2], -r0
   13900:	andeq	ip, r1, r0, ror #8
   13904:	andeq	ip, r1, r0, ror r4
   13908:	andeq	fp, r1, ip, ror #19
   1390c:	andeq	ip, r1, r0, asr #4
   13910:	ldrdeq	fp, [r1], -r4
   13914:	andeq	ip, r1, r0, lsl #9
   13918:	andeq	sp, r2, r0, ror #2
   1391c:	strdeq	r1, [r1], -ip
   13920:	andeq	sp, r2, r4, ror #2
   13924:	andeq	r5, r1, r4, lsl r2
   13928:	andeq	sp, r2, r8, ror #2
   1392c:	andeq	r4, r1, r8, asr #27
   13930:	andeq	sp, r2, ip, ror #2
   13934:	andeq	r1, r1, ip, lsr r5
   13938:	andeq	sp, r2, r0, ror r1
   1393c:	andeq	r1, r1, r8, ror #10
   13940:	andeq	r1, r1, r8, lsr #14
   13944:	andeq	r1, r1, r4, lsl #13
   13948:	andeq	r1, r1, r4, lsr #15
   1394c:	ldrdeq	r1, [r1], -r8
   13950:	andeq	r1, r1, ip, lsl #18
   13954:	andeq	r4, r1, r4, asr r0
   13958:	strdeq	r3, [r1], -ip
   1395c:	andeq	r1, r1, r0, asr r9
   13960:	andeq	r1, r1, ip, ror r9
   13964:	andeq	r1, r1, r0, ror #19
   13968:	andeq	r1, r1, r8, asr #20
   1396c:	andeq	r1, r1, r0, lsl fp
   13970:	andeq	r1, r1, r4, asr #22
   13974:			; <UNDEFINED> instruction: 0x00011cb4
   13978:	andeq	r1, r1, ip, asr #24
   1397c:	ldrdeq	r1, [r1], -ip
   13980:	andeq	r1, r1, r4, lsl #27
   13984:	andeq	r1, r1, r0, asr #27
   13988:	andeq	r2, r1, r4, lsr #11
   1398c:	andeq	r2, r1, r4, asr r5
   13990:	andeq	r2, r1, ip, asr #11
   13994:	andeq	r2, r1, r0, asr r7
   13998:	andeq	r2, r1, r0, lsr #18
   1399c:	andeq	r2, r1, ip, lsl #13
   139a0:	andeq	r2, r1, ip, lsl #15
   139a4:	andeq	r1, r1, r0, lsl #31
   139a8:	andeq	r1, r1, ip, asr #31
   139ac:	andeq	r2, r1, r8, lsr r0
   139b0:	andeq	r2, r1, r8, lsl #4
   139b4:	andeq	r2, r1, r4, asr #4
   139b8:	andeq	ip, r1, r8, lsl #9
   139bc:	andeq	sp, r2, r0, asr #2
   139c0:	andeq	ip, r1, r0, lsr #9
   139c4:	strdeq	ip, [r1], -r0
   139c8:	andeq	sp, r2, r0, asr r1
   139cc:			; <UNDEFINED> instruction: 0x0001c4b4
   139d0:	andeq	ip, r1, ip, lsl #8
   139d4:	push	{fp}		; (str fp, [sp, #-4]!)
   139d8:	add	fp, sp, #0
   139dc:	sub	sp, sp, #12
   139e0:	mov	r3, r0
   139e4:	strb	r3, [fp, #-5]
   139e8:	ldrb	r3, [fp, #-5]
   139ec:	mov	r0, r3
   139f0:	add	sp, fp, #0
   139f4:	pop	{fp}		; (ldr fp, [sp], #4)
   139f8:	bx	lr
   139fc:	push	{r4, r5, fp, lr}
   13a00:	add	fp, sp, #12
   13a04:	sub	sp, sp, #16
   13a08:	str	r0, [fp, #-16]
   13a0c:	str	r1, [fp, #-20]	; 0xffffffec
   13a10:	str	r2, [fp, #-24]	; 0xffffffe8
   13a14:	str	r3, [fp, #-28]	; 0xffffffe4
   13a18:	b	13e54 <__assert_fail@plt+0x2f08>
   13a1c:	ldr	r4, [fp, #-24]	; 0xffffffe8
   13a20:	add	r3, r4, #1
   13a24:	str	r3, [fp, #-24]	; 0xffffffe8
   13a28:	ldr	r3, [fp, #-16]
   13a2c:	ldrb	r3, [r3]
   13a30:	mov	r0, r3
   13a34:	bl	139d4 <__assert_fail@plt+0x2a88>
   13a38:	mov	r3, r0
   13a3c:	lsr	r3, r3, #3
   13a40:	uxtb	r3, r3
   13a44:	and	r3, r3, #31
   13a48:	ldr	r2, [pc, #1152]	; 13ed0 <__assert_fail@plt+0x2f84>
   13a4c:	ldrb	r3, [r2, r3]
   13a50:	strb	r3, [r4]
   13a54:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13a58:	sub	r3, r3, #1
   13a5c:	str	r3, [fp, #-28]	; 0xffffffe4
   13a60:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13a64:	cmp	r3, #0
   13a68:	beq	13e70 <__assert_fail@plt+0x2f24>
   13a6c:	ldr	r4, [fp, #-24]	; 0xffffffe8
   13a70:	add	r3, r4, #1
   13a74:	str	r3, [fp, #-24]	; 0xffffffe8
   13a78:	ldr	r3, [fp, #-16]
   13a7c:	ldrb	r3, [r3]
   13a80:	mov	r0, r3
   13a84:	bl	139d4 <__assert_fail@plt+0x2a88>
   13a88:	mov	r3, r0
   13a8c:	lsl	r5, r3, #2
   13a90:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a94:	sub	r3, r3, #1
   13a98:	str	r3, [fp, #-20]	; 0xffffffec
   13a9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13aa0:	cmp	r3, #0
   13aa4:	beq	13acc <__assert_fail@plt+0x2b80>
   13aa8:	ldr	r3, [fp, #-16]
   13aac:	add	r3, r3, #1
   13ab0:	ldrb	r3, [r3]
   13ab4:	mov	r0, r3
   13ab8:	bl	139d4 <__assert_fail@plt+0x2a88>
   13abc:	mov	r3, r0
   13ac0:	lsr	r3, r3, #6
   13ac4:	uxtb	r3, r3
   13ac8:	b	13ad0 <__assert_fail@plt+0x2b84>
   13acc:	mov	r3, #0
   13ad0:	add	r3, r5, r3
   13ad4:	and	r3, r3, #31
   13ad8:	ldr	r2, [pc, #1008]	; 13ed0 <__assert_fail@plt+0x2f84>
   13adc:	ldrb	r3, [r2, r3]
   13ae0:	strb	r3, [r4]
   13ae4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13ae8:	sub	r3, r3, #1
   13aec:	str	r3, [fp, #-28]	; 0xffffffe4
   13af0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13af4:	cmp	r3, #0
   13af8:	beq	13e78 <__assert_fail@plt+0x2f2c>
   13afc:	ldr	r4, [fp, #-24]	; 0xffffffe8
   13b00:	add	r3, r4, #1
   13b04:	str	r3, [fp, #-24]	; 0xffffffe8
   13b08:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b0c:	cmp	r3, #0
   13b10:	beq	13b44 <__assert_fail@plt+0x2bf8>
   13b14:	ldr	r3, [fp, #-16]
   13b18:	add	r3, r3, #1
   13b1c:	ldrb	r3, [r3]
   13b20:	mov	r0, r3
   13b24:	bl	139d4 <__assert_fail@plt+0x2a88>
   13b28:	mov	r3, r0
   13b2c:	lsr	r3, r3, #1
   13b30:	uxtb	r3, r3
   13b34:	and	r3, r3, #31
   13b38:	ldr	r2, [pc, #912]	; 13ed0 <__assert_fail@plt+0x2f84>
   13b3c:	ldrb	r3, [r2, r3]
   13b40:	b	13b48 <__assert_fail@plt+0x2bfc>
   13b44:	mov	r3, #61	; 0x3d
   13b48:	strb	r3, [r4]
   13b4c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13b50:	sub	r3, r3, #1
   13b54:	str	r3, [fp, #-28]	; 0xffffffe4
   13b58:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13b5c:	cmp	r3, #0
   13b60:	beq	13e80 <__assert_fail@plt+0x2f34>
   13b64:	ldr	r4, [fp, #-24]	; 0xffffffe8
   13b68:	add	r3, r4, #1
   13b6c:	str	r3, [fp, #-24]	; 0xffffffe8
   13b70:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b74:	cmp	r3, #0
   13b78:	beq	13bec <__assert_fail@plt+0x2ca0>
   13b7c:	ldr	r3, [fp, #-16]
   13b80:	add	r3, r3, #1
   13b84:	ldrb	r3, [r3]
   13b88:	mov	r0, r3
   13b8c:	bl	139d4 <__assert_fail@plt+0x2a88>
   13b90:	mov	r3, r0
   13b94:	lsl	r5, r3, #4
   13b98:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b9c:	sub	r3, r3, #1
   13ba0:	str	r3, [fp, #-20]	; 0xffffffec
   13ba4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ba8:	cmp	r3, #0
   13bac:	beq	13bd4 <__assert_fail@plt+0x2c88>
   13bb0:	ldr	r3, [fp, #-16]
   13bb4:	add	r3, r3, #2
   13bb8:	ldrb	r3, [r3]
   13bbc:	mov	r0, r3
   13bc0:	bl	139d4 <__assert_fail@plt+0x2a88>
   13bc4:	mov	r3, r0
   13bc8:	lsr	r3, r3, #4
   13bcc:	uxtb	r3, r3
   13bd0:	b	13bd8 <__assert_fail@plt+0x2c8c>
   13bd4:	mov	r3, #0
   13bd8:	add	r3, r5, r3
   13bdc:	and	r3, r3, #31
   13be0:	ldr	r2, [pc, #744]	; 13ed0 <__assert_fail@plt+0x2f84>
   13be4:	ldrb	r3, [r2, r3]
   13be8:	b	13bf0 <__assert_fail@plt+0x2ca4>
   13bec:	mov	r3, #61	; 0x3d
   13bf0:	strb	r3, [r4]
   13bf4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13bf8:	sub	r3, r3, #1
   13bfc:	str	r3, [fp, #-28]	; 0xffffffe4
   13c00:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13c04:	cmp	r3, #0
   13c08:	beq	13e88 <__assert_fail@plt+0x2f3c>
   13c0c:	ldr	r4, [fp, #-24]	; 0xffffffe8
   13c10:	add	r3, r4, #1
   13c14:	str	r3, [fp, #-24]	; 0xffffffe8
   13c18:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c1c:	cmp	r3, #0
   13c20:	beq	13c94 <__assert_fail@plt+0x2d48>
   13c24:	ldr	r3, [fp, #-16]
   13c28:	add	r3, r3, #2
   13c2c:	ldrb	r3, [r3]
   13c30:	mov	r0, r3
   13c34:	bl	139d4 <__assert_fail@plt+0x2a88>
   13c38:	mov	r3, r0
   13c3c:	lsl	r5, r3, #1
   13c40:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c44:	sub	r3, r3, #1
   13c48:	str	r3, [fp, #-20]	; 0xffffffec
   13c4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c50:	cmp	r3, #0
   13c54:	beq	13c7c <__assert_fail@plt+0x2d30>
   13c58:	ldr	r3, [fp, #-16]
   13c5c:	add	r3, r3, #3
   13c60:	ldrb	r3, [r3]
   13c64:	mov	r0, r3
   13c68:	bl	139d4 <__assert_fail@plt+0x2a88>
   13c6c:	mov	r3, r0
   13c70:	lsr	r3, r3, #7
   13c74:	uxtb	r3, r3
   13c78:	b	13c80 <__assert_fail@plt+0x2d34>
   13c7c:	mov	r3, #0
   13c80:	add	r3, r5, r3
   13c84:	and	r3, r3, #31
   13c88:	ldr	r2, [pc, #576]	; 13ed0 <__assert_fail@plt+0x2f84>
   13c8c:	ldrb	r3, [r2, r3]
   13c90:	b	13c98 <__assert_fail@plt+0x2d4c>
   13c94:	mov	r3, #61	; 0x3d
   13c98:	strb	r3, [r4]
   13c9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13ca0:	sub	r3, r3, #1
   13ca4:	str	r3, [fp, #-28]	; 0xffffffe4
   13ca8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13cac:	cmp	r3, #0
   13cb0:	beq	13e90 <__assert_fail@plt+0x2f44>
   13cb4:	ldr	r4, [fp, #-24]	; 0xffffffe8
   13cb8:	add	r3, r4, #1
   13cbc:	str	r3, [fp, #-24]	; 0xffffffe8
   13cc0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cc4:	cmp	r3, #0
   13cc8:	beq	13cfc <__assert_fail@plt+0x2db0>
   13ccc:	ldr	r3, [fp, #-16]
   13cd0:	add	r3, r3, #3
   13cd4:	ldrb	r3, [r3]
   13cd8:	mov	r0, r3
   13cdc:	bl	139d4 <__assert_fail@plt+0x2a88>
   13ce0:	mov	r3, r0
   13ce4:	lsr	r3, r3, #2
   13ce8:	uxtb	r3, r3
   13cec:	and	r3, r3, #31
   13cf0:	ldr	r2, [pc, #472]	; 13ed0 <__assert_fail@plt+0x2f84>
   13cf4:	ldrb	r3, [r2, r3]
   13cf8:	b	13d00 <__assert_fail@plt+0x2db4>
   13cfc:	mov	r3, #61	; 0x3d
   13d00:	strb	r3, [r4]
   13d04:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13d08:	sub	r3, r3, #1
   13d0c:	str	r3, [fp, #-28]	; 0xffffffe4
   13d10:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13d14:	cmp	r3, #0
   13d18:	beq	13e98 <__assert_fail@plt+0x2f4c>
   13d1c:	ldr	r4, [fp, #-24]	; 0xffffffe8
   13d20:	add	r3, r4, #1
   13d24:	str	r3, [fp, #-24]	; 0xffffffe8
   13d28:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d2c:	cmp	r3, #0
   13d30:	beq	13da4 <__assert_fail@plt+0x2e58>
   13d34:	ldr	r3, [fp, #-16]
   13d38:	add	r3, r3, #3
   13d3c:	ldrb	r3, [r3]
   13d40:	mov	r0, r3
   13d44:	bl	139d4 <__assert_fail@plt+0x2a88>
   13d48:	mov	r3, r0
   13d4c:	lsl	r5, r3, #3
   13d50:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d54:	sub	r3, r3, #1
   13d58:	str	r3, [fp, #-20]	; 0xffffffec
   13d5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d60:	cmp	r3, #0
   13d64:	beq	13d8c <__assert_fail@plt+0x2e40>
   13d68:	ldr	r3, [fp, #-16]
   13d6c:	add	r3, r3, #4
   13d70:	ldrb	r3, [r3]
   13d74:	mov	r0, r3
   13d78:	bl	139d4 <__assert_fail@plt+0x2a88>
   13d7c:	mov	r3, r0
   13d80:	lsr	r3, r3, #5
   13d84:	uxtb	r3, r3
   13d88:	b	13d90 <__assert_fail@plt+0x2e44>
   13d8c:	mov	r3, #0
   13d90:	add	r3, r5, r3
   13d94:	and	r3, r3, #31
   13d98:	ldr	r2, [pc, #304]	; 13ed0 <__assert_fail@plt+0x2f84>
   13d9c:	ldrb	r3, [r2, r3]
   13da0:	b	13da8 <__assert_fail@plt+0x2e5c>
   13da4:	mov	r3, #61	; 0x3d
   13da8:	strb	r3, [r4]
   13dac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13db0:	sub	r3, r3, #1
   13db4:	str	r3, [fp, #-28]	; 0xffffffe4
   13db8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13dbc:	cmp	r3, #0
   13dc0:	beq	13ea0 <__assert_fail@plt+0x2f54>
   13dc4:	ldr	r4, [fp, #-24]	; 0xffffffe8
   13dc8:	add	r3, r4, #1
   13dcc:	str	r3, [fp, #-24]	; 0xffffffe8
   13dd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13dd4:	cmp	r3, #0
   13dd8:	beq	13e04 <__assert_fail@plt+0x2eb8>
   13ddc:	ldr	r3, [fp, #-16]
   13de0:	add	r3, r3, #4
   13de4:	ldrb	r3, [r3]
   13de8:	mov	r0, r3
   13dec:	bl	139d4 <__assert_fail@plt+0x2a88>
   13df0:	mov	r3, r0
   13df4:	and	r3, r3, #31
   13df8:	ldr	r2, [pc, #208]	; 13ed0 <__assert_fail@plt+0x2f84>
   13dfc:	ldrb	r3, [r2, r3]
   13e00:	b	13e08 <__assert_fail@plt+0x2ebc>
   13e04:	mov	r3, #61	; 0x3d
   13e08:	strb	r3, [r4]
   13e0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13e10:	sub	r3, r3, #1
   13e14:	str	r3, [fp, #-28]	; 0xffffffe4
   13e18:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13e1c:	cmp	r3, #0
   13e20:	beq	13ea8 <__assert_fail@plt+0x2f5c>
   13e24:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e28:	cmp	r3, #0
   13e2c:	beq	13e3c <__assert_fail@plt+0x2ef0>
   13e30:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e34:	sub	r3, r3, #1
   13e38:	str	r3, [fp, #-20]	; 0xffffffec
   13e3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e40:	cmp	r3, #0
   13e44:	beq	13e54 <__assert_fail@plt+0x2f08>
   13e48:	ldr	r3, [fp, #-16]
   13e4c:	add	r3, r3, #5
   13e50:	str	r3, [fp, #-16]
   13e54:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e58:	cmp	r3, #0
   13e5c:	beq	13eac <__assert_fail@plt+0x2f60>
   13e60:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13e64:	cmp	r3, #0
   13e68:	bne	13a1c <__assert_fail@plt+0x2ad0>
   13e6c:	b	13eac <__assert_fail@plt+0x2f60>
   13e70:	nop			; (mov r0, r0)
   13e74:	b	13eac <__assert_fail@plt+0x2f60>
   13e78:	nop			; (mov r0, r0)
   13e7c:	b	13eac <__assert_fail@plt+0x2f60>
   13e80:	nop			; (mov r0, r0)
   13e84:	b	13eac <__assert_fail@plt+0x2f60>
   13e88:	nop			; (mov r0, r0)
   13e8c:	b	13eac <__assert_fail@plt+0x2f60>
   13e90:	nop			; (mov r0, r0)
   13e94:	b	13eac <__assert_fail@plt+0x2f60>
   13e98:	nop			; (mov r0, r0)
   13e9c:	b	13eac <__assert_fail@plt+0x2f60>
   13ea0:	nop			; (mov r0, r0)
   13ea4:	b	13eac <__assert_fail@plt+0x2f60>
   13ea8:	nop			; (mov r0, r0)
   13eac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13eb0:	cmp	r3, #0
   13eb4:	beq	13ec4 <__assert_fail@plt+0x2f78>
   13eb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ebc:	mov	r2, #0
   13ec0:	strb	r2, [r3]
   13ec4:	nop			; (mov r0, r0)
   13ec8:	sub	sp, fp, #12
   13ecc:	pop	{r4, r5, fp, pc}
   13ed0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   13ed4:	push	{fp, lr}
   13ed8:	add	fp, sp, #4
   13edc:	sub	sp, sp, #24
   13ee0:	str	r0, [fp, #-16]
   13ee4:	str	r1, [fp, #-20]	; 0xffffffec
   13ee8:	str	r2, [fp, #-24]	; 0xffffffe8
   13eec:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ef0:	ldr	r2, [pc, #344]	; 14050 <__assert_fail@plt+0x3104>
   13ef4:	smull	r1, r2, r2, r3
   13ef8:	asr	r2, r2, #1
   13efc:	asr	r3, r3, #31
   13f00:	sub	r0, r2, r3
   13f04:	ldr	r1, [fp, #-20]	; 0xffffffec
   13f08:	ldr	r3, [pc, #320]	; 14050 <__assert_fail@plt+0x3104>
   13f0c:	smull	r2, r3, r3, r1
   13f10:	asr	r2, r3, #1
   13f14:	asr	r3, r1, #31
   13f18:	sub	r2, r2, r3
   13f1c:	mov	r3, r2
   13f20:	lsl	r3, r3, #2
   13f24:	add	r3, r3, r2
   13f28:	sub	r2, r1, r3
   13f2c:	cmp	r2, #0
   13f30:	movne	r3, #1
   13f34:	moveq	r3, #0
   13f38:	uxtb	r3, r3
   13f3c:	add	r3, r0, r3
   13f40:	str	r3, [fp, #-8]
   13f44:	ldr	r3, [fp, #-8]
   13f48:	cmp	r3, #0
   13f4c:	bge	13f8c <__assert_fail@plt+0x3040>
   13f50:	ldr	r3, [fp, #-8]
   13f54:	cmn	r3, #1
   13f58:	beq	13f7c <__assert_fail@plt+0x3030>
   13f5c:	ldr	r1, [fp, #-8]
   13f60:	mov	r0, #-2147483648	; 0x80000000
   13f64:	bl	1b454 <__assert_fail@plt+0xa508>
   13f68:	mov	r3, r0
   13f6c:	cmp	r3, #7
   13f70:	bgt	13f7c <__assert_fail@plt+0x3030>
   13f74:	mov	r3, #1
   13f78:	b	13f80 <__assert_fail@plt+0x3034>
   13f7c:	mov	r3, #0
   13f80:	and	r3, r3, #1
   13f84:	uxtb	r3, r3
   13f88:	b	13fa0 <__assert_fail@plt+0x3054>
   13f8c:	ldr	r3, [fp, #-8]
   13f90:	cmn	r3, #-268435455	; 0xf0000001
   13f94:	movgt	r3, #1
   13f98:	movle	r3, #0
   13f9c:	uxtb	r3, r3
   13fa0:	cmp	r3, #0
   13fa4:	beq	13fb8 <__assert_fail@plt+0x306c>
   13fa8:	ldr	r3, [fp, #-8]
   13fac:	lsl	r3, r3, #3
   13fb0:	str	r3, [fp, #-12]
   13fb4:	b	13fd0 <__assert_fail@plt+0x3084>
   13fb8:	ldr	r3, [fp, #-8]
   13fbc:	lsl	r3, r3, #3
   13fc0:	str	r3, [fp, #-12]
   13fc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fc8:	cmp	r3, #0
   13fcc:	bge	13fe4 <__assert_fail@plt+0x3098>
   13fd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13fd4:	mov	r2, #0
   13fd8:	str	r2, [r3]
   13fdc:	mov	r3, #0
   13fe0:	b	14044 <__assert_fail@plt+0x30f8>
   13fe4:	ldr	r3, [fp, #-12]
   13fe8:	add	r3, r3, #1
   13fec:	str	r3, [fp, #-12]
   13ff0:	ldr	r3, [fp, #-12]
   13ff4:	mov	r0, r3
   13ff8:	bl	16578 <__assert_fail@plt+0x562c>
   13ffc:	mov	r3, r0
   14000:	mov	r2, r3
   14004:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14008:	str	r2, [r3]
   1400c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14010:	ldr	r3, [r3]
   14014:	cmp	r3, #0
   14018:	bne	14024 <__assert_fail@plt+0x30d8>
   1401c:	ldr	r3, [fp, #-12]
   14020:	b	14044 <__assert_fail@plt+0x30f8>
   14024:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14028:	ldr	r2, [r3]
   1402c:	ldr	r3, [fp, #-12]
   14030:	ldr	r1, [fp, #-20]	; 0xffffffec
   14034:	ldr	r0, [fp, #-16]
   14038:	bl	139fc <__assert_fail@plt+0x2ab0>
   1403c:	ldr	r3, [fp, #-12]
   14040:	sub	r3, r3, #1
   14044:	mov	r0, r3
   14048:	sub	sp, fp, #4
   1404c:	pop	{fp, pc}
   14050:	strbtvs	r6, [r6], -r7, ror #12
   14054:	push	{fp, lr}
   14058:	add	fp, sp, #4
   1405c:	sub	sp, sp, #8
   14060:	mov	r3, r0
   14064:	strb	r3, [fp, #-5]
   14068:	ldrb	r3, [fp, #-5]
   1406c:	mov	r0, r3
   14070:	bl	139d4 <__assert_fail@plt+0x2a88>
   14074:	mov	r3, r0
   14078:	mov	r2, r3
   1407c:	ldr	r3, [pc, #28]	; 140a0 <__assert_fail@plt+0x3154>
   14080:	ldrsb	r3, [r3, r2]
   14084:	mvn	r3, r3
   14088:	uxtb	r3, r3
   1408c:	lsr	r3, r3, #7
   14090:	uxtb	r3, r3
   14094:	mov	r0, r3
   14098:	sub	sp, fp, #4
   1409c:	pop	{fp, pc}
   140a0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   140a4:	push	{fp}		; (str fp, [sp, #-4]!)
   140a8:	add	fp, sp, #0
   140ac:	sub	sp, sp, #12
   140b0:	str	r0, [fp, #-8]
   140b4:	ldr	r3, [fp, #-8]
   140b8:	mov	r2, #0
   140bc:	str	r2, [r3]
   140c0:	nop			; (mov r0, r0)
   140c4:	add	sp, fp, #0
   140c8:	pop	{fp}		; (ldr fp, [sp], #4)
   140cc:	bx	lr
   140d0:	push	{fp, lr}
   140d4:	add	fp, sp, #4
   140d8:	sub	sp, sp, #32
   140dc:	str	r0, [fp, #-24]	; 0xffffffe8
   140e0:	str	r1, [fp, #-28]	; 0xffffffe4
   140e4:	str	r2, [fp, #-32]	; 0xffffffe0
   140e8:	str	r3, [fp, #-36]	; 0xffffffdc
   140ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   140f0:	ldr	r3, [r3]
   140f4:	cmp	r3, #8
   140f8:	bne	14108 <__assert_fail@plt+0x31bc>
   140fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14100:	mov	r2, #0
   14104:	str	r2, [r3]
   14108:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1410c:	ldr	r3, [r3]
   14110:	cmp	r3, #0
   14114:	bne	14180 <__assert_fail@plt+0x3234>
   14118:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1411c:	ldr	r3, [r3]
   14120:	str	r3, [fp, #-12]
   14124:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14128:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1412c:	ldr	r2, [r2]
   14130:	sub	r3, r3, r2
   14134:	cmp	r3, #7
   14138:	ble	14180 <__assert_fail@plt+0x3234>
   1413c:	mov	r2, #8
   14140:	mov	r1, #10
   14144:	ldr	r0, [fp, #-12]
   14148:	bl	10eb0 <memchr@plt>
   1414c:	mov	r3, r0
   14150:	cmp	r3, #0
   14154:	bne	14180 <__assert_fail@plt+0x3234>
   14158:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1415c:	ldr	r3, [r3]
   14160:	add	r2, r3, #8
   14164:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14168:	str	r2, [r3]
   1416c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14170:	mov	r2, #8
   14174:	str	r2, [r3]
   14178:	ldr	r3, [fp, #-12]
   1417c:	b	14220 <__assert_fail@plt+0x32d4>
   14180:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14184:	ldr	r3, [r3]
   14188:	str	r3, [fp, #-8]
   1418c:	b	141e4 <__assert_fail@plt+0x3298>
   14190:	ldr	r3, [fp, #-8]
   14194:	add	r2, r3, #1
   14198:	str	r2, [fp, #-8]
   1419c:	ldrb	r3, [r3]
   141a0:	strb	r3, [fp, #-13]
   141a4:	ldrb	r3, [fp, #-13]
   141a8:	cmp	r3, #10
   141ac:	beq	141e4 <__assert_fail@plt+0x3298>
   141b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   141b4:	ldr	r3, [r3]
   141b8:	add	r1, r3, #1
   141bc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   141c0:	str	r1, [r2]
   141c4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   141c8:	add	r3, r2, r3
   141cc:	ldrb	r2, [fp, #-13]
   141d0:	strb	r2, [r3, #4]
   141d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   141d8:	ldr	r3, [r3]
   141dc:	cmp	r3, #8
   141e0:	beq	141f8 <__assert_fail@plt+0x32ac>
   141e4:	ldr	r2, [fp, #-8]
   141e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   141ec:	cmp	r2, r3
   141f0:	bcc	14190 <__assert_fail@plt+0x3244>
   141f4:	b	141fc <__assert_fail@plt+0x32b0>
   141f8:	nop			; (mov r0, r0)
   141fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14200:	ldr	r2, [fp, #-8]
   14204:	str	r2, [r3]
   14208:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1420c:	ldr	r2, [r3]
   14210:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14214:	str	r2, [r3]
   14218:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1421c:	add	r3, r3, #4
   14220:	mov	r0, r3
   14224:	sub	sp, fp, #4
   14228:	pop	{fp, pc}
   1422c:	push	{r4, r5, fp, lr}
   14230:	add	fp, sp, #12
   14234:	sub	sp, sp, #24
   14238:	str	r0, [fp, #-24]	; 0xffffffe8
   1423c:	str	r1, [fp, #-28]	; 0xffffffe4
   14240:	str	r2, [fp, #-32]	; 0xffffffe0
   14244:	str	r3, [fp, #-36]	; 0xffffffdc
   14248:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1424c:	ldr	r3, [r3]
   14250:	str	r3, [fp, #-16]
   14254:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14258:	cmp	r3, #7
   1425c:	bgt	14268 <__assert_fail@plt+0x331c>
   14260:	mov	r3, #0
   14264:	b	148b4 <__assert_fail@plt+0x3968>
   14268:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1426c:	ldrb	r3, [r3]
   14270:	mov	r0, r3
   14274:	bl	14054 <__assert_fail@plt+0x3108>
   14278:	mov	r3, r0
   1427c:	eor	r3, r3, #1
   14280:	uxtb	r3, r3
   14284:	cmp	r3, #0
   14288:	bne	142b4 <__assert_fail@plt+0x3368>
   1428c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14290:	add	r3, r3, #1
   14294:	ldrb	r3, [r3]
   14298:	mov	r0, r3
   1429c:	bl	14054 <__assert_fail@plt+0x3108>
   142a0:	mov	r3, r0
   142a4:	eor	r3, r3, #1
   142a8:	uxtb	r3, r3
   142ac:	cmp	r3, #0
   142b0:	beq	142bc <__assert_fail@plt+0x3370>
   142b4:	mov	r3, #0
   142b8:	b	148b4 <__assert_fail@plt+0x3968>
   142bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   142c0:	ldr	r3, [r3]
   142c4:	cmp	r3, #0
   142c8:	beq	14350 <__assert_fail@plt+0x3404>
   142cc:	ldr	r4, [fp, #-16]
   142d0:	add	r3, r4, #1
   142d4:	str	r3, [fp, #-16]
   142d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   142dc:	ldrb	r3, [r3]
   142e0:	mov	r0, r3
   142e4:	bl	139d4 <__assert_fail@plt+0x2a88>
   142e8:	mov	r3, r0
   142ec:	mov	r2, r3
   142f0:	ldr	r3, [pc, #1480]	; 148c0 <__assert_fail@plt+0x3974>
   142f4:	ldrsb	r3, [r3, r2]
   142f8:	lsl	r3, r3, #3
   142fc:	sxtb	r5, r3
   14300:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14304:	add	r3, r3, #1
   14308:	ldrb	r3, [r3]
   1430c:	mov	r0, r3
   14310:	bl	139d4 <__assert_fail@plt+0x2a88>
   14314:	mov	r3, r0
   14318:	mov	r2, r3
   1431c:	ldr	r3, [pc, #1436]	; 148c0 <__assert_fail@plt+0x3974>
   14320:	ldrsb	r3, [r3, r2]
   14324:	asr	r3, r3, #2
   14328:	sxtb	r3, r3
   1432c:	orr	r3, r5, r3
   14330:	sxtb	r3, r3
   14334:	uxtb	r3, r3
   14338:	strb	r3, [r4]
   1433c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14340:	ldr	r3, [r3]
   14344:	sub	r2, r3, #1
   14348:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1434c:	str	r2, [r3]
   14350:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14354:	add	r3, r3, #2
   14358:	ldrb	r3, [r3]
   1435c:	cmp	r3, #61	; 0x3d
   14360:	bne	143dc <__assert_fail@plt+0x3490>
   14364:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14368:	add	r3, r3, #3
   1436c:	ldrb	r3, [r3]
   14370:	cmp	r3, #61	; 0x3d
   14374:	bne	143c8 <__assert_fail@plt+0x347c>
   14378:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1437c:	add	r3, r3, #4
   14380:	ldrb	r3, [r3]
   14384:	cmp	r3, #61	; 0x3d
   14388:	bne	143c8 <__assert_fail@plt+0x347c>
   1438c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14390:	add	r3, r3, #5
   14394:	ldrb	r3, [r3]
   14398:	cmp	r3, #61	; 0x3d
   1439c:	bne	143c8 <__assert_fail@plt+0x347c>
   143a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   143a4:	add	r3, r3, #6
   143a8:	ldrb	r3, [r3]
   143ac:	cmp	r3, #61	; 0x3d
   143b0:	bne	143c8 <__assert_fail@plt+0x347c>
   143b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   143b8:	add	r3, r3, #7
   143bc:	ldrb	r3, [r3]
   143c0:	cmp	r3, #61	; 0x3d
   143c4:	beq	148a4 <__assert_fail@plt+0x3958>
   143c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   143cc:	ldr	r2, [fp, #-16]
   143d0:	str	r2, [r3]
   143d4:	mov	r3, #0
   143d8:	b	148b4 <__assert_fail@plt+0x3968>
   143dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   143e0:	add	r3, r3, #2
   143e4:	ldrb	r3, [r3]
   143e8:	mov	r0, r3
   143ec:	bl	14054 <__assert_fail@plt+0x3108>
   143f0:	mov	r3, r0
   143f4:	eor	r3, r3, #1
   143f8:	uxtb	r3, r3
   143fc:	cmp	r3, #0
   14400:	bne	1442c <__assert_fail@plt+0x34e0>
   14404:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14408:	add	r3, r3, #3
   1440c:	ldrb	r3, [r3]
   14410:	mov	r0, r3
   14414:	bl	14054 <__assert_fail@plt+0x3108>
   14418:	mov	r3, r0
   1441c:	eor	r3, r3, #1
   14420:	uxtb	r3, r3
   14424:	cmp	r3, #0
   14428:	beq	14440 <__assert_fail@plt+0x34f4>
   1442c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14430:	ldr	r2, [fp, #-16]
   14434:	str	r2, [r3]
   14438:	mov	r3, #0
   1443c:	b	148b4 <__assert_fail@plt+0x3968>
   14440:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14444:	ldr	r3, [r3]
   14448:	cmp	r3, #0
   1444c:	beq	1450c <__assert_fail@plt+0x35c0>
   14450:	ldr	r4, [fp, #-16]
   14454:	add	r3, r4, #1
   14458:	str	r3, [fp, #-16]
   1445c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14460:	add	r3, r3, #1
   14464:	ldrb	r3, [r3]
   14468:	mov	r0, r3
   1446c:	bl	139d4 <__assert_fail@plt+0x2a88>
   14470:	mov	r3, r0
   14474:	mov	r2, r3
   14478:	ldr	r3, [pc, #1088]	; 148c0 <__assert_fail@plt+0x3974>
   1447c:	ldrsb	r3, [r3, r2]
   14480:	lsl	r3, r3, #6
   14484:	sxtb	r5, r3
   14488:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1448c:	add	r3, r3, #2
   14490:	ldrb	r3, [r3]
   14494:	mov	r0, r3
   14498:	bl	139d4 <__assert_fail@plt+0x2a88>
   1449c:	mov	r3, r0
   144a0:	mov	r2, r3
   144a4:	ldr	r3, [pc, #1044]	; 148c0 <__assert_fail@plt+0x3974>
   144a8:	ldrsb	r3, [r3, r2]
   144ac:	lsl	r3, r3, #1
   144b0:	sxtb	r3, r3
   144b4:	orr	r3, r5, r3
   144b8:	sxtb	r5, r3
   144bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   144c0:	add	r3, r3, #3
   144c4:	ldrb	r3, [r3]
   144c8:	mov	r0, r3
   144cc:	bl	139d4 <__assert_fail@plt+0x2a88>
   144d0:	mov	r3, r0
   144d4:	mov	r2, r3
   144d8:	ldr	r3, [pc, #992]	; 148c0 <__assert_fail@plt+0x3974>
   144dc:	ldrsb	r3, [r3, r2]
   144e0:	asr	r3, r3, #4
   144e4:	sxtb	r3, r3
   144e8:	orr	r3, r5, r3
   144ec:	sxtb	r3, r3
   144f0:	uxtb	r3, r3
   144f4:	strb	r3, [r4]
   144f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   144fc:	ldr	r3, [r3]
   14500:	sub	r2, r3, #1
   14504:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14508:	str	r2, [r3]
   1450c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14510:	add	r3, r3, #4
   14514:	ldrb	r3, [r3]
   14518:	cmp	r3, #61	; 0x3d
   1451c:	bne	14570 <__assert_fail@plt+0x3624>
   14520:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14524:	add	r3, r3, #5
   14528:	ldrb	r3, [r3]
   1452c:	cmp	r3, #61	; 0x3d
   14530:	bne	1455c <__assert_fail@plt+0x3610>
   14534:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14538:	add	r3, r3, #6
   1453c:	ldrb	r3, [r3]
   14540:	cmp	r3, #61	; 0x3d
   14544:	bne	1455c <__assert_fail@plt+0x3610>
   14548:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1454c:	add	r3, r3, #7
   14550:	ldrb	r3, [r3]
   14554:	cmp	r3, #61	; 0x3d
   14558:	beq	148a4 <__assert_fail@plt+0x3958>
   1455c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14560:	ldr	r2, [fp, #-16]
   14564:	str	r2, [r3]
   14568:	mov	r3, #0
   1456c:	b	148b4 <__assert_fail@plt+0x3968>
   14570:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14574:	add	r3, r3, #4
   14578:	ldrb	r3, [r3]
   1457c:	mov	r0, r3
   14580:	bl	14054 <__assert_fail@plt+0x3108>
   14584:	mov	r3, r0
   14588:	eor	r3, r3, #1
   1458c:	uxtb	r3, r3
   14590:	cmp	r3, #0
   14594:	beq	145ac <__assert_fail@plt+0x3660>
   14598:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1459c:	ldr	r2, [fp, #-16]
   145a0:	str	r2, [r3]
   145a4:	mov	r3, #0
   145a8:	b	148b4 <__assert_fail@plt+0x3968>
   145ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   145b0:	ldr	r3, [r3]
   145b4:	cmp	r3, #0
   145b8:	beq	14644 <__assert_fail@plt+0x36f8>
   145bc:	ldr	r4, [fp, #-16]
   145c0:	add	r3, r4, #1
   145c4:	str	r3, [fp, #-16]
   145c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   145cc:	add	r3, r3, #3
   145d0:	ldrb	r3, [r3]
   145d4:	mov	r0, r3
   145d8:	bl	139d4 <__assert_fail@plt+0x2a88>
   145dc:	mov	r3, r0
   145e0:	mov	r2, r3
   145e4:	ldr	r3, [pc, #724]	; 148c0 <__assert_fail@plt+0x3974>
   145e8:	ldrsb	r3, [r3, r2]
   145ec:	lsl	r3, r3, #4
   145f0:	sxtb	r5, r3
   145f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   145f8:	add	r3, r3, #4
   145fc:	ldrb	r3, [r3]
   14600:	mov	r0, r3
   14604:	bl	139d4 <__assert_fail@plt+0x2a88>
   14608:	mov	r3, r0
   1460c:	mov	r2, r3
   14610:	ldr	r3, [pc, #680]	; 148c0 <__assert_fail@plt+0x3974>
   14614:	ldrsb	r3, [r3, r2]
   14618:	asr	r3, r3, #1
   1461c:	sxtb	r3, r3
   14620:	orr	r3, r5, r3
   14624:	sxtb	r3, r3
   14628:	uxtb	r3, r3
   1462c:	strb	r3, [r4]
   14630:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14634:	ldr	r3, [r3]
   14638:	sub	r2, r3, #1
   1463c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14640:	str	r2, [r3]
   14644:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14648:	add	r3, r3, #5
   1464c:	ldrb	r3, [r3]
   14650:	cmp	r3, #61	; 0x3d
   14654:	bne	14694 <__assert_fail@plt+0x3748>
   14658:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1465c:	add	r3, r3, #6
   14660:	ldrb	r3, [r3]
   14664:	cmp	r3, #61	; 0x3d
   14668:	bne	14680 <__assert_fail@plt+0x3734>
   1466c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14670:	add	r3, r3, #7
   14674:	ldrb	r3, [r3]
   14678:	cmp	r3, #61	; 0x3d
   1467c:	beq	148a4 <__assert_fail@plt+0x3958>
   14680:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14684:	ldr	r2, [fp, #-16]
   14688:	str	r2, [r3]
   1468c:	mov	r3, #0
   14690:	b	148b4 <__assert_fail@plt+0x3968>
   14694:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14698:	add	r3, r3, #5
   1469c:	ldrb	r3, [r3]
   146a0:	mov	r0, r3
   146a4:	bl	14054 <__assert_fail@plt+0x3108>
   146a8:	mov	r3, r0
   146ac:	eor	r3, r3, #1
   146b0:	uxtb	r3, r3
   146b4:	cmp	r3, #0
   146b8:	bne	146e4 <__assert_fail@plt+0x3798>
   146bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   146c0:	add	r3, r3, #6
   146c4:	ldrb	r3, [r3]
   146c8:	mov	r0, r3
   146cc:	bl	14054 <__assert_fail@plt+0x3108>
   146d0:	mov	r3, r0
   146d4:	eor	r3, r3, #1
   146d8:	uxtb	r3, r3
   146dc:	cmp	r3, #0
   146e0:	beq	146f8 <__assert_fail@plt+0x37ac>
   146e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   146e8:	ldr	r2, [fp, #-16]
   146ec:	str	r2, [r3]
   146f0:	mov	r3, #0
   146f4:	b	148b4 <__assert_fail@plt+0x3968>
   146f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   146fc:	ldr	r3, [r3]
   14700:	cmp	r3, #0
   14704:	beq	147c4 <__assert_fail@plt+0x3878>
   14708:	ldr	r4, [fp, #-16]
   1470c:	add	r3, r4, #1
   14710:	str	r3, [fp, #-16]
   14714:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14718:	add	r3, r3, #4
   1471c:	ldrb	r3, [r3]
   14720:	mov	r0, r3
   14724:	bl	139d4 <__assert_fail@plt+0x2a88>
   14728:	mov	r3, r0
   1472c:	mov	r2, r3
   14730:	ldr	r3, [pc, #392]	; 148c0 <__assert_fail@plt+0x3974>
   14734:	ldrsb	r3, [r3, r2]
   14738:	lsl	r3, r3, #7
   1473c:	sxtb	r5, r3
   14740:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14744:	add	r3, r3, #5
   14748:	ldrb	r3, [r3]
   1474c:	mov	r0, r3
   14750:	bl	139d4 <__assert_fail@plt+0x2a88>
   14754:	mov	r3, r0
   14758:	mov	r2, r3
   1475c:	ldr	r3, [pc, #348]	; 148c0 <__assert_fail@plt+0x3974>
   14760:	ldrsb	r3, [r3, r2]
   14764:	lsl	r3, r3, #2
   14768:	sxtb	r3, r3
   1476c:	orr	r3, r5, r3
   14770:	sxtb	r5, r3
   14774:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14778:	add	r3, r3, #6
   1477c:	ldrb	r3, [r3]
   14780:	mov	r0, r3
   14784:	bl	139d4 <__assert_fail@plt+0x2a88>
   14788:	mov	r3, r0
   1478c:	mov	r2, r3
   14790:	ldr	r3, [pc, #296]	; 148c0 <__assert_fail@plt+0x3974>
   14794:	ldrsb	r3, [r3, r2]
   14798:	asr	r3, r3, #3
   1479c:	sxtb	r3, r3
   147a0:	orr	r3, r5, r3
   147a4:	sxtb	r3, r3
   147a8:	uxtb	r3, r3
   147ac:	strb	r3, [r4]
   147b0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   147b4:	ldr	r3, [r3]
   147b8:	sub	r2, r3, #1
   147bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   147c0:	str	r2, [r3]
   147c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   147c8:	add	r3, r3, #7
   147cc:	ldrb	r3, [r3]
   147d0:	cmp	r3, #61	; 0x3d
   147d4:	beq	148a4 <__assert_fail@plt+0x3958>
   147d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   147dc:	add	r3, r3, #7
   147e0:	ldrb	r3, [r3]
   147e4:	mov	r0, r3
   147e8:	bl	14054 <__assert_fail@plt+0x3108>
   147ec:	mov	r3, r0
   147f0:	eor	r3, r3, #1
   147f4:	uxtb	r3, r3
   147f8:	cmp	r3, #0
   147fc:	beq	14814 <__assert_fail@plt+0x38c8>
   14800:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14804:	ldr	r2, [fp, #-16]
   14808:	str	r2, [r3]
   1480c:	mov	r3, #0
   14810:	b	148b4 <__assert_fail@plt+0x3968>
   14814:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14818:	ldr	r3, [r3]
   1481c:	cmp	r3, #0
   14820:	beq	148a4 <__assert_fail@plt+0x3958>
   14824:	ldr	r4, [fp, #-16]
   14828:	add	r3, r4, #1
   1482c:	str	r3, [fp, #-16]
   14830:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14834:	add	r3, r3, #6
   14838:	ldrb	r3, [r3]
   1483c:	mov	r0, r3
   14840:	bl	139d4 <__assert_fail@plt+0x2a88>
   14844:	mov	r3, r0
   14848:	mov	r2, r3
   1484c:	ldr	r3, [pc, #108]	; 148c0 <__assert_fail@plt+0x3974>
   14850:	ldrsb	r3, [r3, r2]
   14854:	lsl	r3, r3, #5
   14858:	sxtb	r5, r3
   1485c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14860:	add	r3, r3, #7
   14864:	ldrb	r3, [r3]
   14868:	mov	r0, r3
   1486c:	bl	139d4 <__assert_fail@plt+0x2a88>
   14870:	mov	r3, r0
   14874:	mov	r2, r3
   14878:	ldr	r3, [pc, #64]	; 148c0 <__assert_fail@plt+0x3974>
   1487c:	ldrsb	r3, [r3, r2]
   14880:	orr	r3, r5, r3
   14884:	sxtb	r3, r3
   14888:	uxtb	r3, r3
   1488c:	strb	r3, [r4]
   14890:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14894:	ldr	r3, [r3]
   14898:	sub	r2, r3, #1
   1489c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   148a0:	str	r2, [r3]
   148a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   148a8:	ldr	r2, [fp, #-16]
   148ac:	str	r2, [r3]
   148b0:	mov	r3, #1
   148b4:	mov	r0, r3
   148b8:	sub	sp, fp, #12
   148bc:	pop	{r4, r5, fp, pc}
   148c0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   148c4:	push	{fp, lr}
   148c8:	add	fp, sp, #4
   148cc:	sub	sp, sp, #48	; 0x30
   148d0:	str	r0, [fp, #-40]	; 0xffffffd8
   148d4:	str	r1, [fp, #-44]	; 0xffffffd4
   148d8:	str	r2, [fp, #-48]	; 0xffffffd0
   148dc:	str	r3, [fp, #-52]	; 0xffffffcc
   148e0:	ldr	r3, [fp, #4]
   148e4:	ldr	r3, [r3]
   148e8:	str	r3, [fp, #-32]	; 0xffffffe0
   148ec:	ldr	r3, [fp, #-40]	; 0xffffffd8
   148f0:	cmp	r3, #0
   148f4:	movne	r3, #1
   148f8:	moveq	r3, #0
   148fc:	strb	r3, [fp, #-21]	; 0xffffffeb
   14900:	mov	r3, #0
   14904:	strb	r3, [fp, #-5]
   14908:	mov	r3, #0
   1490c:	str	r3, [fp, #-12]
   14910:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   14914:	cmp	r3, #0
   14918:	beq	1493c <__assert_fail@plt+0x39f0>
   1491c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14920:	ldr	r3, [r3]
   14924:	str	r3, [fp, #-12]
   14928:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1492c:	cmp	r3, #0
   14930:	moveq	r3, #1
   14934:	movne	r3, #0
   14938:	strb	r3, [fp, #-5]
   1493c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14940:	str	r3, [fp, #-16]
   14944:	ldr	r3, [fp, #-12]
   14948:	cmp	r3, #0
   1494c:	bne	149b4 <__assert_fail@plt+0x3a68>
   14950:	ldrb	r3, [fp, #-5]
   14954:	eor	r3, r3, #1
   14958:	uxtb	r3, r3
   1495c:	cmp	r3, #0
   14960:	beq	149b4 <__assert_fail@plt+0x3a68>
   14964:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14968:	str	r3, [fp, #-16]
   1496c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14970:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14974:	sub	r3, fp, #32
   14978:	sub	r2, fp, #52	; 0x34
   1497c:	bl	1422c <__assert_fail@plt+0x32e0>
   14980:	mov	r3, r0
   14984:	eor	r3, r3, #1
   14988:	uxtb	r3, r3
   1498c:	cmp	r3, #0
   14990:	bne	149b0 <__assert_fail@plt+0x3a64>
   14994:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14998:	add	r3, r3, #8
   1499c:	str	r3, [fp, #-44]	; 0xffffffd4
   149a0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   149a4:	sub	r3, r3, #8
   149a8:	str	r3, [fp, #-48]	; 0xffffffd0
   149ac:	b	14964 <__assert_fail@plt+0x3a18>
   149b0:	nop			; (mov r0, r0)
   149b4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   149b8:	cmp	r3, #0
   149bc:	bne	149d4 <__assert_fail@plt+0x3a88>
   149c0:	ldrb	r3, [fp, #-5]
   149c4:	eor	r3, r3, #1
   149c8:	uxtb	r3, r3
   149cc:	cmp	r3, #0
   149d0:	bne	14afc <__assert_fail@plt+0x3bb0>
   149d4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   149d8:	cmp	r3, #0
   149dc:	beq	14a18 <__assert_fail@plt+0x3acc>
   149e0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   149e4:	ldrb	r3, [r3]
   149e8:	cmp	r3, #10
   149ec:	bne	14a18 <__assert_fail@plt+0x3acc>
   149f0:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   149f4:	cmp	r3, #0
   149f8:	beq	14a18 <__assert_fail@plt+0x3acc>
   149fc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14a00:	add	r3, r3, #1
   14a04:	str	r3, [fp, #-44]	; 0xffffffd4
   14a08:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14a0c:	sub	r3, r3, #1
   14a10:	str	r3, [fp, #-48]	; 0xffffffd0
   14a14:	b	14af8 <__assert_fail@plt+0x3bac>
   14a18:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14a1c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14a20:	ldr	r1, [fp, #-16]
   14a24:	sub	r3, r1, r3
   14a28:	rsb	r3, r3, #0
   14a2c:	add	r3, r2, r3
   14a30:	str	r3, [fp, #-52]	; 0xffffffcc
   14a34:	ldr	r3, [fp, #-16]
   14a38:	str	r3, [fp, #-32]	; 0xffffffe0
   14a3c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14a40:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14a44:	add	r3, r3, r2
   14a48:	str	r3, [fp, #-28]	; 0xffffffe4
   14a4c:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   14a50:	cmp	r3, #0
   14a54:	beq	14a74 <__assert_fail@plt+0x3b28>
   14a58:	sub	r3, fp, #48	; 0x30
   14a5c:	sub	r1, fp, #44	; 0x2c
   14a60:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14a64:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14a68:	bl	140d0 <__assert_fail@plt+0x3184>
   14a6c:	str	r0, [fp, #-20]	; 0xffffffec
   14a70:	b	14a7c <__assert_fail@plt+0x3b30>
   14a74:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14a78:	str	r3, [fp, #-20]	; 0xffffffec
   14a7c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14a80:	cmp	r3, #0
   14a84:	beq	14ab4 <__assert_fail@plt+0x3b68>
   14a88:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14a8c:	cmp	r3, #7
   14a90:	bgt	14ac0 <__assert_fail@plt+0x3b74>
   14a94:	ldrb	r3, [fp, #-5]
   14a98:	eor	r3, r3, #1
   14a9c:	uxtb	r3, r3
   14aa0:	cmp	r3, #0
   14aa4:	beq	14ac0 <__assert_fail@plt+0x3b74>
   14aa8:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   14aac:	cmp	r3, #0
   14ab0:	beq	14ac0 <__assert_fail@plt+0x3b74>
   14ab4:	mov	r3, #0
   14ab8:	str	r3, [fp, #-48]	; 0xffffffd0
   14abc:	b	14b08 <__assert_fail@plt+0x3bbc>
   14ac0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14ac4:	sub	r3, fp, #32
   14ac8:	sub	r2, fp, #52	; 0x34
   14acc:	ldr	r0, [fp, #-20]	; 0xffffffec
   14ad0:	bl	1422c <__assert_fail@plt+0x32e0>
   14ad4:	mov	r3, r0
   14ad8:	eor	r3, r3, #1
   14adc:	uxtb	r3, r3
   14ae0:	cmp	r3, #0
   14ae4:	bne	14b04 <__assert_fail@plt+0x3bb8>
   14ae8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14aec:	ldr	r2, [fp, #-44]	; 0xffffffd4
   14af0:	sub	r3, r3, r2
   14af4:	str	r3, [fp, #-48]	; 0xffffffd0
   14af8:	b	1493c <__assert_fail@plt+0x39f0>
   14afc:	nop			; (mov r0, r0)
   14b00:	b	14b08 <__assert_fail@plt+0x3bbc>
   14b04:	nop			; (mov r0, r0)
   14b08:	ldr	r3, [fp, #4]
   14b0c:	ldr	r2, [r3]
   14b10:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14b14:	sub	r2, r2, r3
   14b18:	ldr	r3, [fp, #4]
   14b1c:	str	r2, [r3]
   14b20:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14b24:	cmp	r3, #0
   14b28:	moveq	r3, #1
   14b2c:	movne	r3, #0
   14b30:	uxtb	r3, r3
   14b34:	mov	r0, r3
   14b38:	sub	sp, fp, #4
   14b3c:	pop	{fp, pc}
   14b40:	push	{fp, lr}
   14b44:	add	fp, sp, #4
   14b48:	sub	sp, sp, #32
   14b4c:	str	r0, [fp, #-16]
   14b50:	str	r1, [fp, #-20]	; 0xffffffec
   14b54:	str	r2, [fp, #-24]	; 0xffffffe8
   14b58:	str	r3, [fp, #-28]	; 0xffffffe4
   14b5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b60:	asr	r3, r3, #3
   14b64:	add	r2, r3, #1
   14b68:	mov	r3, r2
   14b6c:	lsl	r3, r3, #2
   14b70:	add	r3, r3, r2
   14b74:	str	r3, [fp, #-8]
   14b78:	ldr	r3, [fp, #-8]
   14b7c:	mov	r0, r3
   14b80:	bl	16578 <__assert_fail@plt+0x562c>
   14b84:	mov	r3, r0
   14b88:	mov	r2, r3
   14b8c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14b90:	str	r2, [r3]
   14b94:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14b98:	ldr	r3, [r3]
   14b9c:	cmp	r3, #0
   14ba0:	bne	14bac <__assert_fail@plt+0x3c60>
   14ba4:	mov	r3, #1
   14ba8:	b	14c24 <__assert_fail@plt+0x3cd8>
   14bac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14bb0:	ldr	r2, [r3]
   14bb4:	sub	r3, fp, #8
   14bb8:	str	r3, [sp]
   14bbc:	mov	r3, r2
   14bc0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14bc4:	ldr	r1, [fp, #-20]	; 0xffffffec
   14bc8:	ldr	r0, [fp, #-16]
   14bcc:	bl	148c4 <__assert_fail@plt+0x3978>
   14bd0:	mov	r3, r0
   14bd4:	eor	r3, r3, #1
   14bd8:	uxtb	r3, r3
   14bdc:	cmp	r3, #0
   14be0:	beq	14c08 <__assert_fail@plt+0x3cbc>
   14be4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14be8:	ldr	r3, [r3]
   14bec:	mov	r0, r3
   14bf0:	bl	163e4 <__assert_fail@plt+0x5498>
   14bf4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14bf8:	mov	r2, #0
   14bfc:	str	r2, [r3]
   14c00:	mov	r3, #0
   14c04:	b	14c24 <__assert_fail@plt+0x3cd8>
   14c08:	ldr	r3, [fp, #4]
   14c0c:	cmp	r3, #0
   14c10:	beq	14c20 <__assert_fail@plt+0x3cd4>
   14c14:	ldr	r2, [fp, #-8]
   14c18:	ldr	r3, [fp, #4]
   14c1c:	str	r2, [r3]
   14c20:	mov	r3, #1
   14c24:	mov	r0, r3
   14c28:	sub	sp, fp, #4
   14c2c:	pop	{fp, pc}
   14c30:	push	{fp}		; (str fp, [sp, #-4]!)
   14c34:	add	fp, sp, #0
   14c38:	sub	sp, sp, #12
   14c3c:	mov	r3, r0
   14c40:	strb	r3, [fp, #-5]
   14c44:	ldrb	r3, [fp, #-5]
   14c48:	mov	r0, r3
   14c4c:	add	sp, fp, #0
   14c50:	pop	{fp}		; (ldr fp, [sp], #4)
   14c54:	bx	lr
   14c58:	push	{r4, r5, fp, lr}
   14c5c:	add	fp, sp, #12
   14c60:	sub	sp, sp, #16
   14c64:	str	r0, [fp, #-16]
   14c68:	str	r1, [fp, #-20]	; 0xffffffec
   14c6c:	str	r2, [fp, #-24]	; 0xffffffe8
   14c70:	b	14dac <__assert_fail@plt+0x3e60>
   14c74:	ldr	r4, [fp, #-24]	; 0xffffffe8
   14c78:	add	r3, r4, #1
   14c7c:	str	r3, [fp, #-24]	; 0xffffffe8
   14c80:	ldr	r3, [fp, #-16]
   14c84:	ldrb	r3, [r3]
   14c88:	mov	r0, r3
   14c8c:	bl	14c30 <__assert_fail@plt+0x3ce4>
   14c90:	mov	r3, r0
   14c94:	lsr	r3, r3, #2
   14c98:	uxtb	r3, r3
   14c9c:	and	r3, r3, #63	; 0x3f
   14ca0:	ldr	r2, [pc, #284]	; 14dc4 <__assert_fail@plt+0x3e78>
   14ca4:	ldrb	r3, [r2, r3]
   14ca8:	strb	r3, [r4]
   14cac:	ldr	r4, [fp, #-24]	; 0xffffffe8
   14cb0:	add	r3, r4, #1
   14cb4:	str	r3, [fp, #-24]	; 0xffffffe8
   14cb8:	ldr	r3, [fp, #-16]
   14cbc:	ldrb	r3, [r3]
   14cc0:	mov	r0, r3
   14cc4:	bl	14c30 <__assert_fail@plt+0x3ce4>
   14cc8:	mov	r3, r0
   14ccc:	lsl	r5, r3, #4
   14cd0:	ldr	r3, [fp, #-16]
   14cd4:	add	r3, r3, #1
   14cd8:	ldrb	r3, [r3]
   14cdc:	mov	r0, r3
   14ce0:	bl	14c30 <__assert_fail@plt+0x3ce4>
   14ce4:	mov	r3, r0
   14ce8:	lsr	r3, r3, #4
   14cec:	uxtb	r3, r3
   14cf0:	add	r3, r5, r3
   14cf4:	and	r3, r3, #63	; 0x3f
   14cf8:	ldr	r2, [pc, #196]	; 14dc4 <__assert_fail@plt+0x3e78>
   14cfc:	ldrb	r3, [r2, r3]
   14d00:	strb	r3, [r4]
   14d04:	ldr	r4, [fp, #-24]	; 0xffffffe8
   14d08:	add	r3, r4, #1
   14d0c:	str	r3, [fp, #-24]	; 0xffffffe8
   14d10:	ldr	r3, [fp, #-16]
   14d14:	add	r3, r3, #1
   14d18:	ldrb	r3, [r3]
   14d1c:	mov	r0, r3
   14d20:	bl	14c30 <__assert_fail@plt+0x3ce4>
   14d24:	mov	r3, r0
   14d28:	lsl	r5, r3, #2
   14d2c:	ldr	r3, [fp, #-16]
   14d30:	add	r3, r3, #2
   14d34:	ldrb	r3, [r3]
   14d38:	mov	r0, r3
   14d3c:	bl	14c30 <__assert_fail@plt+0x3ce4>
   14d40:	mov	r3, r0
   14d44:	lsr	r3, r3, #6
   14d48:	uxtb	r3, r3
   14d4c:	add	r3, r5, r3
   14d50:	and	r3, r3, #63	; 0x3f
   14d54:	ldr	r2, [pc, #104]	; 14dc4 <__assert_fail@plt+0x3e78>
   14d58:	ldrb	r3, [r2, r3]
   14d5c:	strb	r3, [r4]
   14d60:	ldr	r4, [fp, #-24]	; 0xffffffe8
   14d64:	add	r3, r4, #1
   14d68:	str	r3, [fp, #-24]	; 0xffffffe8
   14d6c:	ldr	r3, [fp, #-16]
   14d70:	add	r3, r3, #2
   14d74:	ldrb	r3, [r3]
   14d78:	mov	r0, r3
   14d7c:	bl	14c30 <__assert_fail@plt+0x3ce4>
   14d80:	mov	r3, r0
   14d84:	and	r3, r3, #63	; 0x3f
   14d88:	ldr	r2, [pc, #52]	; 14dc4 <__assert_fail@plt+0x3e78>
   14d8c:	ldrb	r3, [r2, r3]
   14d90:	strb	r3, [r4]
   14d94:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d98:	sub	r3, r3, #3
   14d9c:	str	r3, [fp, #-20]	; 0xffffffec
   14da0:	ldr	r3, [fp, #-16]
   14da4:	add	r3, r3, #3
   14da8:	str	r3, [fp, #-16]
   14dac:	ldr	r3, [fp, #-20]	; 0xffffffec
   14db0:	cmp	r3, #0
   14db4:	bne	14c74 <__assert_fail@plt+0x3d28>
   14db8:	nop			; (mov r0, r0)
   14dbc:	sub	sp, fp, #12
   14dc0:	pop	{r4, r5, fp, pc}
   14dc4:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   14dc8:	push	{r4, r5, fp, lr}
   14dcc:	add	fp, sp, #12
   14dd0:	sub	sp, sp, #16
   14dd4:	str	r0, [fp, #-16]
   14dd8:	str	r1, [fp, #-20]	; 0xffffffec
   14ddc:	str	r2, [fp, #-24]	; 0xffffffe8
   14de0:	str	r3, [fp, #-28]	; 0xffffffe4
   14de4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14de8:	and	r3, r3, #3
   14dec:	cmp	r3, #0
   14df0:	bne	15040 <__assert_fail@plt+0x40f4>
   14df4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14df8:	asr	r2, r3, #2
   14dfc:	mov	r3, r2
   14e00:	lsl	r3, r3, #1
   14e04:	add	r2, r3, r2
   14e08:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e0c:	cmp	r2, r3
   14e10:	bne	15040 <__assert_fail@plt+0x40f4>
   14e14:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14e18:	ldr	r1, [fp, #-20]	; 0xffffffec
   14e1c:	ldr	r0, [fp, #-16]
   14e20:	bl	14c58 <__assert_fail@plt+0x3d0c>
   14e24:	b	15090 <__assert_fail@plt+0x4144>
   14e28:	ldr	r4, [fp, #-24]	; 0xffffffe8
   14e2c:	add	r3, r4, #1
   14e30:	str	r3, [fp, #-24]	; 0xffffffe8
   14e34:	ldr	r3, [fp, #-16]
   14e38:	ldrb	r3, [r3]
   14e3c:	mov	r0, r3
   14e40:	bl	14c30 <__assert_fail@plt+0x3ce4>
   14e44:	mov	r3, r0
   14e48:	lsr	r3, r3, #2
   14e4c:	uxtb	r3, r3
   14e50:	and	r3, r3, #63	; 0x3f
   14e54:	ldr	r2, [pc, #572]	; 15098 <__assert_fail@plt+0x414c>
   14e58:	ldrb	r3, [r2, r3]
   14e5c:	strb	r3, [r4]
   14e60:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14e64:	sub	r3, r3, #1
   14e68:	str	r3, [fp, #-28]	; 0xffffffe4
   14e6c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14e70:	cmp	r3, #0
   14e74:	beq	1505c <__assert_fail@plt+0x4110>
   14e78:	ldr	r4, [fp, #-24]	; 0xffffffe8
   14e7c:	add	r3, r4, #1
   14e80:	str	r3, [fp, #-24]	; 0xffffffe8
   14e84:	ldr	r3, [fp, #-16]
   14e88:	ldrb	r3, [r3]
   14e8c:	mov	r0, r3
   14e90:	bl	14c30 <__assert_fail@plt+0x3ce4>
   14e94:	mov	r3, r0
   14e98:	lsl	r5, r3, #4
   14e9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ea0:	sub	r3, r3, #1
   14ea4:	str	r3, [fp, #-20]	; 0xffffffec
   14ea8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14eac:	cmp	r3, #0
   14eb0:	beq	14ed8 <__assert_fail@plt+0x3f8c>
   14eb4:	ldr	r3, [fp, #-16]
   14eb8:	add	r3, r3, #1
   14ebc:	ldrb	r3, [r3]
   14ec0:	mov	r0, r3
   14ec4:	bl	14c30 <__assert_fail@plt+0x3ce4>
   14ec8:	mov	r3, r0
   14ecc:	lsr	r3, r3, #4
   14ed0:	uxtb	r3, r3
   14ed4:	b	14edc <__assert_fail@plt+0x3f90>
   14ed8:	mov	r3, #0
   14edc:	add	r3, r5, r3
   14ee0:	and	r3, r3, #63	; 0x3f
   14ee4:	ldr	r2, [pc, #428]	; 15098 <__assert_fail@plt+0x414c>
   14ee8:	ldrb	r3, [r2, r3]
   14eec:	strb	r3, [r4]
   14ef0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14ef4:	sub	r3, r3, #1
   14ef8:	str	r3, [fp, #-28]	; 0xffffffe4
   14efc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14f00:	cmp	r3, #0
   14f04:	beq	15064 <__assert_fail@plt+0x4118>
   14f08:	ldr	r4, [fp, #-24]	; 0xffffffe8
   14f0c:	add	r3, r4, #1
   14f10:	str	r3, [fp, #-24]	; 0xffffffe8
   14f14:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f18:	cmp	r3, #0
   14f1c:	beq	14f90 <__assert_fail@plt+0x4044>
   14f20:	ldr	r3, [fp, #-16]
   14f24:	add	r3, r3, #1
   14f28:	ldrb	r3, [r3]
   14f2c:	mov	r0, r3
   14f30:	bl	14c30 <__assert_fail@plt+0x3ce4>
   14f34:	mov	r3, r0
   14f38:	lsl	r5, r3, #2
   14f3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f40:	sub	r3, r3, #1
   14f44:	str	r3, [fp, #-20]	; 0xffffffec
   14f48:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f4c:	cmp	r3, #0
   14f50:	beq	14f78 <__assert_fail@plt+0x402c>
   14f54:	ldr	r3, [fp, #-16]
   14f58:	add	r3, r3, #2
   14f5c:	ldrb	r3, [r3]
   14f60:	mov	r0, r3
   14f64:	bl	14c30 <__assert_fail@plt+0x3ce4>
   14f68:	mov	r3, r0
   14f6c:	lsr	r3, r3, #6
   14f70:	uxtb	r3, r3
   14f74:	b	14f7c <__assert_fail@plt+0x4030>
   14f78:	mov	r3, #0
   14f7c:	add	r3, r5, r3
   14f80:	and	r3, r3, #63	; 0x3f
   14f84:	ldr	r2, [pc, #268]	; 15098 <__assert_fail@plt+0x414c>
   14f88:	ldrb	r3, [r2, r3]
   14f8c:	b	14f94 <__assert_fail@plt+0x4048>
   14f90:	mov	r3, #61	; 0x3d
   14f94:	strb	r3, [r4]
   14f98:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14f9c:	sub	r3, r3, #1
   14fa0:	str	r3, [fp, #-28]	; 0xffffffe4
   14fa4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14fa8:	cmp	r3, #0
   14fac:	beq	1506c <__assert_fail@plt+0x4120>
   14fb0:	ldr	r4, [fp, #-24]	; 0xffffffe8
   14fb4:	add	r3, r4, #1
   14fb8:	str	r3, [fp, #-24]	; 0xffffffe8
   14fbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fc0:	cmp	r3, #0
   14fc4:	beq	14ff0 <__assert_fail@plt+0x40a4>
   14fc8:	ldr	r3, [fp, #-16]
   14fcc:	add	r3, r3, #2
   14fd0:	ldrb	r3, [r3]
   14fd4:	mov	r0, r3
   14fd8:	bl	14c30 <__assert_fail@plt+0x3ce4>
   14fdc:	mov	r3, r0
   14fe0:	and	r3, r3, #63	; 0x3f
   14fe4:	ldr	r2, [pc, #172]	; 15098 <__assert_fail@plt+0x414c>
   14fe8:	ldrb	r3, [r2, r3]
   14fec:	b	14ff4 <__assert_fail@plt+0x40a8>
   14ff0:	mov	r3, #61	; 0x3d
   14ff4:	strb	r3, [r4]
   14ff8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14ffc:	sub	r3, r3, #1
   15000:	str	r3, [fp, #-28]	; 0xffffffe4
   15004:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15008:	cmp	r3, #0
   1500c:	beq	15074 <__assert_fail@plt+0x4128>
   15010:	ldr	r3, [fp, #-20]	; 0xffffffec
   15014:	cmp	r3, #0
   15018:	beq	15028 <__assert_fail@plt+0x40dc>
   1501c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15020:	sub	r3, r3, #1
   15024:	str	r3, [fp, #-20]	; 0xffffffec
   15028:	ldr	r3, [fp, #-20]	; 0xffffffec
   1502c:	cmp	r3, #0
   15030:	beq	15040 <__assert_fail@plt+0x40f4>
   15034:	ldr	r3, [fp, #-16]
   15038:	add	r3, r3, #3
   1503c:	str	r3, [fp, #-16]
   15040:	ldr	r3, [fp, #-20]	; 0xffffffec
   15044:	cmp	r3, #0
   15048:	beq	15078 <__assert_fail@plt+0x412c>
   1504c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15050:	cmp	r3, #0
   15054:	bne	14e28 <__assert_fail@plt+0x3edc>
   15058:	b	15078 <__assert_fail@plt+0x412c>
   1505c:	nop			; (mov r0, r0)
   15060:	b	15078 <__assert_fail@plt+0x412c>
   15064:	nop			; (mov r0, r0)
   15068:	b	15078 <__assert_fail@plt+0x412c>
   1506c:	nop			; (mov r0, r0)
   15070:	b	15078 <__assert_fail@plt+0x412c>
   15074:	nop			; (mov r0, r0)
   15078:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1507c:	cmp	r3, #0
   15080:	beq	15090 <__assert_fail@plt+0x4144>
   15084:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15088:	mov	r2, #0
   1508c:	strb	r2, [r3]
   15090:	sub	sp, fp, #12
   15094:	pop	{r4, r5, fp, pc}
   15098:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1509c:	push	{fp, lr}
   150a0:	add	fp, sp, #4
   150a4:	sub	sp, sp, #24
   150a8:	str	r0, [fp, #-16]
   150ac:	str	r1, [fp, #-20]	; 0xffffffec
   150b0:	str	r2, [fp, #-24]	; 0xffffffe8
   150b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   150b8:	ldr	r2, [pc, #336]	; 15210 <__assert_fail@plt+0x42c4>
   150bc:	smull	r1, r2, r2, r3
   150c0:	asr	r3, r3, #31
   150c4:	sub	r0, r2, r3
   150c8:	ldr	r1, [fp, #-20]	; 0xffffffec
   150cc:	ldr	r3, [pc, #316]	; 15210 <__assert_fail@plt+0x42c4>
   150d0:	smull	r3, r2, r3, r1
   150d4:	asr	r3, r1, #31
   150d8:	sub	r2, r2, r3
   150dc:	mov	r3, r2
   150e0:	lsl	r3, r3, #1
   150e4:	add	r3, r3, r2
   150e8:	sub	r2, r1, r3
   150ec:	cmp	r2, #0
   150f0:	movne	r3, #1
   150f4:	moveq	r3, #0
   150f8:	uxtb	r3, r3
   150fc:	add	r3, r0, r3
   15100:	str	r3, [fp, #-8]
   15104:	ldr	r3, [fp, #-8]
   15108:	cmp	r3, #0
   1510c:	bge	1514c <__assert_fail@plt+0x4200>
   15110:	ldr	r3, [fp, #-8]
   15114:	cmn	r3, #1
   15118:	beq	1513c <__assert_fail@plt+0x41f0>
   1511c:	ldr	r1, [fp, #-8]
   15120:	mov	r0, #-2147483648	; 0x80000000
   15124:	bl	1b454 <__assert_fail@plt+0xa508>
   15128:	mov	r3, r0
   1512c:	cmp	r3, #3
   15130:	bgt	1513c <__assert_fail@plt+0x41f0>
   15134:	mov	r3, #1
   15138:	b	15140 <__assert_fail@plt+0x41f4>
   1513c:	mov	r3, #0
   15140:	and	r3, r3, #1
   15144:	uxtb	r3, r3
   15148:	b	15160 <__assert_fail@plt+0x4214>
   1514c:	ldr	r3, [fp, #-8]
   15150:	cmn	r3, #-536870911	; 0xe0000001
   15154:	movgt	r3, #1
   15158:	movle	r3, #0
   1515c:	uxtb	r3, r3
   15160:	cmp	r3, #0
   15164:	beq	15178 <__assert_fail@plt+0x422c>
   15168:	ldr	r3, [fp, #-8]
   1516c:	lsl	r3, r3, #2
   15170:	str	r3, [fp, #-12]
   15174:	b	15190 <__assert_fail@plt+0x4244>
   15178:	ldr	r3, [fp, #-8]
   1517c:	lsl	r3, r3, #2
   15180:	str	r3, [fp, #-12]
   15184:	ldr	r3, [fp, #-20]	; 0xffffffec
   15188:	cmp	r3, #0
   1518c:	bge	151a4 <__assert_fail@plt+0x4258>
   15190:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15194:	mov	r2, #0
   15198:	str	r2, [r3]
   1519c:	mov	r3, #0
   151a0:	b	15204 <__assert_fail@plt+0x42b8>
   151a4:	ldr	r3, [fp, #-12]
   151a8:	add	r3, r3, #1
   151ac:	str	r3, [fp, #-12]
   151b0:	ldr	r3, [fp, #-12]
   151b4:	mov	r0, r3
   151b8:	bl	16578 <__assert_fail@plt+0x562c>
   151bc:	mov	r3, r0
   151c0:	mov	r2, r3
   151c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   151c8:	str	r2, [r3]
   151cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   151d0:	ldr	r3, [r3]
   151d4:	cmp	r3, #0
   151d8:	bne	151e4 <__assert_fail@plt+0x4298>
   151dc:	ldr	r3, [fp, #-12]
   151e0:	b	15204 <__assert_fail@plt+0x42b8>
   151e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   151e8:	ldr	r2, [r3]
   151ec:	ldr	r3, [fp, #-12]
   151f0:	ldr	r1, [fp, #-20]	; 0xffffffec
   151f4:	ldr	r0, [fp, #-16]
   151f8:	bl	14dc8 <__assert_fail@plt+0x3e7c>
   151fc:	ldr	r3, [fp, #-12]
   15200:	sub	r3, r3, #1
   15204:	mov	r0, r3
   15208:	sub	sp, fp, #4
   1520c:	pop	{fp, pc}
   15210:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   15214:	push	{fp, lr}
   15218:	add	fp, sp, #4
   1521c:	sub	sp, sp, #8
   15220:	mov	r3, r0
   15224:	strb	r3, [fp, #-5]
   15228:	ldrb	r3, [fp, #-5]
   1522c:	mov	r0, r3
   15230:	bl	14c30 <__assert_fail@plt+0x3ce4>
   15234:	mov	r3, r0
   15238:	mov	r2, r3
   1523c:	ldr	r3, [pc, #28]	; 15260 <__assert_fail@plt+0x4314>
   15240:	ldrsb	r3, [r3, r2]
   15244:	mvn	r3, r3
   15248:	uxtb	r3, r3
   1524c:	lsr	r3, r3, #7
   15250:	uxtb	r3, r3
   15254:	mov	r0, r3
   15258:	sub	sp, fp, #4
   1525c:	pop	{fp, pc}
   15260:	andeq	ip, r1, ip, lsr r6
   15264:	push	{fp}		; (str fp, [sp, #-4]!)
   15268:	add	fp, sp, #0
   1526c:	sub	sp, sp, #12
   15270:	str	r0, [fp, #-8]
   15274:	ldr	r3, [fp, #-8]
   15278:	mov	r2, #0
   1527c:	str	r2, [r3]
   15280:	nop			; (mov r0, r0)
   15284:	add	sp, fp, #0
   15288:	pop	{fp}		; (ldr fp, [sp], #4)
   1528c:	bx	lr
   15290:	push	{fp, lr}
   15294:	add	fp, sp, #4
   15298:	sub	sp, sp, #32
   1529c:	str	r0, [fp, #-24]	; 0xffffffe8
   152a0:	str	r1, [fp, #-28]	; 0xffffffe4
   152a4:	str	r2, [fp, #-32]	; 0xffffffe0
   152a8:	str	r3, [fp, #-36]	; 0xffffffdc
   152ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   152b0:	ldr	r3, [r3]
   152b4:	cmp	r3, #4
   152b8:	bne	152c8 <__assert_fail@plt+0x437c>
   152bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   152c0:	mov	r2, #0
   152c4:	str	r2, [r3]
   152c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   152cc:	ldr	r3, [r3]
   152d0:	cmp	r3, #0
   152d4:	bne	15340 <__assert_fail@plt+0x43f4>
   152d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   152dc:	ldr	r3, [r3]
   152e0:	str	r3, [fp, #-12]
   152e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   152e8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   152ec:	ldr	r2, [r2]
   152f0:	sub	r3, r3, r2
   152f4:	cmp	r3, #3
   152f8:	ble	15340 <__assert_fail@plt+0x43f4>
   152fc:	mov	r2, #4
   15300:	mov	r1, #10
   15304:	ldr	r0, [fp, #-12]
   15308:	bl	10eb0 <memchr@plt>
   1530c:	mov	r3, r0
   15310:	cmp	r3, #0
   15314:	bne	15340 <__assert_fail@plt+0x43f4>
   15318:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1531c:	ldr	r3, [r3]
   15320:	add	r2, r3, #4
   15324:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15328:	str	r2, [r3]
   1532c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15330:	mov	r2, #4
   15334:	str	r2, [r3]
   15338:	ldr	r3, [fp, #-12]
   1533c:	b	153e0 <__assert_fail@plt+0x4494>
   15340:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15344:	ldr	r3, [r3]
   15348:	str	r3, [fp, #-8]
   1534c:	b	153a4 <__assert_fail@plt+0x4458>
   15350:	ldr	r3, [fp, #-8]
   15354:	add	r2, r3, #1
   15358:	str	r2, [fp, #-8]
   1535c:	ldrb	r3, [r3]
   15360:	strb	r3, [fp, #-13]
   15364:	ldrb	r3, [fp, #-13]
   15368:	cmp	r3, #10
   1536c:	beq	153a4 <__assert_fail@plt+0x4458>
   15370:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15374:	ldr	r3, [r3]
   15378:	add	r1, r3, #1
   1537c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15380:	str	r1, [r2]
   15384:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15388:	add	r3, r2, r3
   1538c:	ldrb	r2, [fp, #-13]
   15390:	strb	r2, [r3, #4]
   15394:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15398:	ldr	r3, [r3]
   1539c:	cmp	r3, #4
   153a0:	beq	153b8 <__assert_fail@plt+0x446c>
   153a4:	ldr	r2, [fp, #-8]
   153a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   153ac:	cmp	r2, r3
   153b0:	bcc	15350 <__assert_fail@plt+0x4404>
   153b4:	b	153bc <__assert_fail@plt+0x4470>
   153b8:	nop			; (mov r0, r0)
   153bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   153c0:	ldr	r2, [fp, #-8]
   153c4:	str	r2, [r3]
   153c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   153cc:	ldr	r2, [r3]
   153d0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   153d4:	str	r2, [r3]
   153d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   153dc:	add	r3, r3, #4
   153e0:	mov	r0, r3
   153e4:	sub	sp, fp, #4
   153e8:	pop	{fp, pc}
   153ec:	push	{r4, r5, fp, lr}
   153f0:	add	fp, sp, #12
   153f4:	sub	sp, sp, #24
   153f8:	str	r0, [fp, #-24]	; 0xffffffe8
   153fc:	str	r1, [fp, #-28]	; 0xffffffe4
   15400:	str	r2, [fp, #-32]	; 0xffffffe0
   15404:	str	r3, [fp, #-36]	; 0xffffffdc
   15408:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1540c:	ldr	r3, [r3]
   15410:	str	r3, [fp, #-16]
   15414:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15418:	cmp	r3, #1
   1541c:	bgt	15428 <__assert_fail@plt+0x44dc>
   15420:	mov	r3, #0
   15424:	b	157a0 <__assert_fail@plt+0x4854>
   15428:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1542c:	ldrb	r3, [r3]
   15430:	mov	r0, r3
   15434:	bl	15214 <__assert_fail@plt+0x42c8>
   15438:	mov	r3, r0
   1543c:	eor	r3, r3, #1
   15440:	uxtb	r3, r3
   15444:	cmp	r3, #0
   15448:	bne	15474 <__assert_fail@plt+0x4528>
   1544c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15450:	add	r3, r3, #1
   15454:	ldrb	r3, [r3]
   15458:	mov	r0, r3
   1545c:	bl	15214 <__assert_fail@plt+0x42c8>
   15460:	mov	r3, r0
   15464:	eor	r3, r3, #1
   15468:	uxtb	r3, r3
   1546c:	cmp	r3, #0
   15470:	beq	1547c <__assert_fail@plt+0x4530>
   15474:	mov	r3, #0
   15478:	b	157a0 <__assert_fail@plt+0x4854>
   1547c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15480:	ldr	r3, [r3]
   15484:	cmp	r3, #0
   15488:	beq	15510 <__assert_fail@plt+0x45c4>
   1548c:	ldr	r4, [fp, #-16]
   15490:	add	r3, r4, #1
   15494:	str	r3, [fp, #-16]
   15498:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1549c:	ldrb	r3, [r3]
   154a0:	mov	r0, r3
   154a4:	bl	14c30 <__assert_fail@plt+0x3ce4>
   154a8:	mov	r3, r0
   154ac:	mov	r2, r3
   154b0:	ldr	r3, [pc, #756]	; 157ac <__assert_fail@plt+0x4860>
   154b4:	ldrsb	r3, [r3, r2]
   154b8:	lsl	r3, r3, #2
   154bc:	sxtb	r5, r3
   154c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   154c4:	add	r3, r3, #1
   154c8:	ldrb	r3, [r3]
   154cc:	mov	r0, r3
   154d0:	bl	14c30 <__assert_fail@plt+0x3ce4>
   154d4:	mov	r3, r0
   154d8:	mov	r2, r3
   154dc:	ldr	r3, [pc, #712]	; 157ac <__assert_fail@plt+0x4860>
   154e0:	ldrsb	r3, [r3, r2]
   154e4:	asr	r3, r3, #4
   154e8:	sxtb	r3, r3
   154ec:	orr	r3, r5, r3
   154f0:	sxtb	r3, r3
   154f4:	uxtb	r3, r3
   154f8:	strb	r3, [r4]
   154fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15500:	ldr	r3, [r3]
   15504:	sub	r2, r3, #1
   15508:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1550c:	str	r2, [r3]
   15510:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15514:	cmp	r3, #2
   15518:	bne	15530 <__assert_fail@plt+0x45e4>
   1551c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15520:	ldr	r2, [fp, #-16]
   15524:	str	r2, [r3]
   15528:	mov	r3, #0
   1552c:	b	157a0 <__assert_fail@plt+0x4854>
   15530:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15534:	add	r3, r3, #2
   15538:	ldrb	r3, [r3]
   1553c:	cmp	r3, #61	; 0x3d
   15540:	bne	1558c <__assert_fail@plt+0x4640>
   15544:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15548:	cmp	r3, #4
   1554c:	beq	15564 <__assert_fail@plt+0x4618>
   15550:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15554:	ldr	r2, [fp, #-16]
   15558:	str	r2, [r3]
   1555c:	mov	r3, #0
   15560:	b	157a0 <__assert_fail@plt+0x4854>
   15564:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15568:	add	r3, r3, #3
   1556c:	ldrb	r3, [r3]
   15570:	cmp	r3, #61	; 0x3d
   15574:	beq	15790 <__assert_fail@plt+0x4844>
   15578:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1557c:	ldr	r2, [fp, #-16]
   15580:	str	r2, [r3]
   15584:	mov	r3, #0
   15588:	b	157a0 <__assert_fail@plt+0x4854>
   1558c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15590:	add	r3, r3, #2
   15594:	ldrb	r3, [r3]
   15598:	mov	r0, r3
   1559c:	bl	15214 <__assert_fail@plt+0x42c8>
   155a0:	mov	r3, r0
   155a4:	eor	r3, r3, #1
   155a8:	uxtb	r3, r3
   155ac:	cmp	r3, #0
   155b0:	beq	155c8 <__assert_fail@plt+0x467c>
   155b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   155b8:	ldr	r2, [fp, #-16]
   155bc:	str	r2, [r3]
   155c0:	mov	r3, #0
   155c4:	b	157a0 <__assert_fail@plt+0x4854>
   155c8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   155cc:	ldr	r3, [r3]
   155d0:	cmp	r3, #0
   155d4:	beq	15668 <__assert_fail@plt+0x471c>
   155d8:	ldr	r4, [fp, #-16]
   155dc:	add	r3, r4, #1
   155e0:	str	r3, [fp, #-16]
   155e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   155e8:	add	r3, r3, #1
   155ec:	ldrb	r3, [r3]
   155f0:	mov	r0, r3
   155f4:	bl	14c30 <__assert_fail@plt+0x3ce4>
   155f8:	mov	r3, r0
   155fc:	mov	r2, r3
   15600:	ldr	r3, [pc, #420]	; 157ac <__assert_fail@plt+0x4860>
   15604:	ldrsb	r3, [r3, r2]
   15608:	lsl	r3, r3, #4
   1560c:	sxtb	r3, r3
   15610:	bic	r3, r3, #15
   15614:	sxtb	r5, r3
   15618:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1561c:	add	r3, r3, #2
   15620:	ldrb	r3, [r3]
   15624:	mov	r0, r3
   15628:	bl	14c30 <__assert_fail@plt+0x3ce4>
   1562c:	mov	r3, r0
   15630:	mov	r2, r3
   15634:	ldr	r3, [pc, #368]	; 157ac <__assert_fail@plt+0x4860>
   15638:	ldrsb	r3, [r3, r2]
   1563c:	asr	r3, r3, #2
   15640:	sxtb	r3, r3
   15644:	orr	r3, r5, r3
   15648:	sxtb	r3, r3
   1564c:	uxtb	r3, r3
   15650:	strb	r3, [r4]
   15654:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15658:	ldr	r3, [r3]
   1565c:	sub	r2, r3, #1
   15660:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15664:	str	r2, [r3]
   15668:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1566c:	cmp	r3, #3
   15670:	bne	15688 <__assert_fail@plt+0x473c>
   15674:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15678:	ldr	r2, [fp, #-16]
   1567c:	str	r2, [r3]
   15680:	mov	r3, #0
   15684:	b	157a0 <__assert_fail@plt+0x4854>
   15688:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1568c:	add	r3, r3, #3
   15690:	ldrb	r3, [r3]
   15694:	cmp	r3, #61	; 0x3d
   15698:	bne	156bc <__assert_fail@plt+0x4770>
   1569c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   156a0:	cmp	r3, #4
   156a4:	beq	15790 <__assert_fail@plt+0x4844>
   156a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   156ac:	ldr	r2, [fp, #-16]
   156b0:	str	r2, [r3]
   156b4:	mov	r3, #0
   156b8:	b	157a0 <__assert_fail@plt+0x4854>
   156bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   156c0:	add	r3, r3, #3
   156c4:	ldrb	r3, [r3]
   156c8:	mov	r0, r3
   156cc:	bl	15214 <__assert_fail@plt+0x42c8>
   156d0:	mov	r3, r0
   156d4:	eor	r3, r3, #1
   156d8:	uxtb	r3, r3
   156dc:	cmp	r3, #0
   156e0:	beq	156f8 <__assert_fail@plt+0x47ac>
   156e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   156e8:	ldr	r2, [fp, #-16]
   156ec:	str	r2, [r3]
   156f0:	mov	r3, #0
   156f4:	b	157a0 <__assert_fail@plt+0x4854>
   156f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   156fc:	ldr	r3, [r3]
   15700:	cmp	r3, #0
   15704:	beq	15790 <__assert_fail@plt+0x4844>
   15708:	ldr	r4, [fp, #-16]
   1570c:	add	r3, r4, #1
   15710:	str	r3, [fp, #-16]
   15714:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15718:	add	r3, r3, #2
   1571c:	ldrb	r3, [r3]
   15720:	mov	r0, r3
   15724:	bl	14c30 <__assert_fail@plt+0x3ce4>
   15728:	mov	r3, r0
   1572c:	mov	r2, r3
   15730:	ldr	r3, [pc, #116]	; 157ac <__assert_fail@plt+0x4860>
   15734:	ldrsb	r3, [r3, r2]
   15738:	lsl	r3, r3, #6
   1573c:	sxtb	r3, r3
   15740:	bic	r3, r3, #63	; 0x3f
   15744:	sxtb	r5, r3
   15748:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1574c:	add	r3, r3, #3
   15750:	ldrb	r3, [r3]
   15754:	mov	r0, r3
   15758:	bl	14c30 <__assert_fail@plt+0x3ce4>
   1575c:	mov	r3, r0
   15760:	mov	r2, r3
   15764:	ldr	r3, [pc, #64]	; 157ac <__assert_fail@plt+0x4860>
   15768:	ldrsb	r3, [r3, r2]
   1576c:	orr	r3, r5, r3
   15770:	sxtb	r3, r3
   15774:	uxtb	r3, r3
   15778:	strb	r3, [r4]
   1577c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15780:	ldr	r3, [r3]
   15784:	sub	r2, r3, #1
   15788:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1578c:	str	r2, [r3]
   15790:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15794:	ldr	r2, [fp, #-16]
   15798:	str	r2, [r3]
   1579c:	mov	r3, #1
   157a0:	mov	r0, r3
   157a4:	sub	sp, fp, #12
   157a8:	pop	{r4, r5, fp, pc}
   157ac:	andeq	ip, r1, ip, lsr r6
   157b0:	push	{fp, lr}
   157b4:	add	fp, sp, #4
   157b8:	sub	sp, sp, #48	; 0x30
   157bc:	str	r0, [fp, #-40]	; 0xffffffd8
   157c0:	str	r1, [fp, #-44]	; 0xffffffd4
   157c4:	str	r2, [fp, #-48]	; 0xffffffd0
   157c8:	str	r3, [fp, #-52]	; 0xffffffcc
   157cc:	ldr	r3, [fp, #4]
   157d0:	ldr	r3, [r3]
   157d4:	str	r3, [fp, #-32]	; 0xffffffe0
   157d8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   157dc:	cmp	r3, #0
   157e0:	movne	r3, #1
   157e4:	moveq	r3, #0
   157e8:	strb	r3, [fp, #-21]	; 0xffffffeb
   157ec:	mov	r3, #0
   157f0:	strb	r3, [fp, #-5]
   157f4:	mov	r3, #0
   157f8:	str	r3, [fp, #-12]
   157fc:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   15800:	cmp	r3, #0
   15804:	beq	15828 <__assert_fail@plt+0x48dc>
   15808:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1580c:	ldr	r3, [r3]
   15810:	str	r3, [fp, #-12]
   15814:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15818:	cmp	r3, #0
   1581c:	moveq	r3, #1
   15820:	movne	r3, #0
   15824:	strb	r3, [fp, #-5]
   15828:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1582c:	str	r3, [fp, #-16]
   15830:	ldr	r3, [fp, #-12]
   15834:	cmp	r3, #0
   15838:	bne	158a0 <__assert_fail@plt+0x4954>
   1583c:	ldrb	r3, [fp, #-5]
   15840:	eor	r3, r3, #1
   15844:	uxtb	r3, r3
   15848:	cmp	r3, #0
   1584c:	beq	158a0 <__assert_fail@plt+0x4954>
   15850:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15854:	str	r3, [fp, #-16]
   15858:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1585c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   15860:	sub	r3, fp, #32
   15864:	sub	r2, fp, #52	; 0x34
   15868:	bl	153ec <__assert_fail@plt+0x44a0>
   1586c:	mov	r3, r0
   15870:	eor	r3, r3, #1
   15874:	uxtb	r3, r3
   15878:	cmp	r3, #0
   1587c:	bne	1589c <__assert_fail@plt+0x4950>
   15880:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15884:	add	r3, r3, #4
   15888:	str	r3, [fp, #-44]	; 0xffffffd4
   1588c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15890:	sub	r3, r3, #4
   15894:	str	r3, [fp, #-48]	; 0xffffffd0
   15898:	b	15850 <__assert_fail@plt+0x4904>
   1589c:	nop			; (mov r0, r0)
   158a0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   158a4:	cmp	r3, #0
   158a8:	bne	158c0 <__assert_fail@plt+0x4974>
   158ac:	ldrb	r3, [fp, #-5]
   158b0:	eor	r3, r3, #1
   158b4:	uxtb	r3, r3
   158b8:	cmp	r3, #0
   158bc:	bne	159e8 <__assert_fail@plt+0x4a9c>
   158c0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   158c4:	cmp	r3, #0
   158c8:	beq	15904 <__assert_fail@plt+0x49b8>
   158cc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   158d0:	ldrb	r3, [r3]
   158d4:	cmp	r3, #10
   158d8:	bne	15904 <__assert_fail@plt+0x49b8>
   158dc:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   158e0:	cmp	r3, #0
   158e4:	beq	15904 <__assert_fail@plt+0x49b8>
   158e8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   158ec:	add	r3, r3, #1
   158f0:	str	r3, [fp, #-44]	; 0xffffffd4
   158f4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   158f8:	sub	r3, r3, #1
   158fc:	str	r3, [fp, #-48]	; 0xffffffd0
   15900:	b	159e4 <__assert_fail@plt+0x4a98>
   15904:	ldr	r2, [fp, #-52]	; 0xffffffcc
   15908:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1590c:	ldr	r1, [fp, #-16]
   15910:	sub	r3, r1, r3
   15914:	rsb	r3, r3, #0
   15918:	add	r3, r2, r3
   1591c:	str	r3, [fp, #-52]	; 0xffffffcc
   15920:	ldr	r3, [fp, #-16]
   15924:	str	r3, [fp, #-32]	; 0xffffffe0
   15928:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1592c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15930:	add	r3, r3, r2
   15934:	str	r3, [fp, #-28]	; 0xffffffe4
   15938:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   1593c:	cmp	r3, #0
   15940:	beq	15960 <__assert_fail@plt+0x4a14>
   15944:	sub	r3, fp, #48	; 0x30
   15948:	sub	r1, fp, #44	; 0x2c
   1594c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15950:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15954:	bl	15290 <__assert_fail@plt+0x4344>
   15958:	str	r0, [fp, #-20]	; 0xffffffec
   1595c:	b	15968 <__assert_fail@plt+0x4a1c>
   15960:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15964:	str	r3, [fp, #-20]	; 0xffffffec
   15968:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1596c:	cmp	r3, #0
   15970:	beq	159a0 <__assert_fail@plt+0x4a54>
   15974:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15978:	cmp	r3, #3
   1597c:	bgt	159ac <__assert_fail@plt+0x4a60>
   15980:	ldrb	r3, [fp, #-5]
   15984:	eor	r3, r3, #1
   15988:	uxtb	r3, r3
   1598c:	cmp	r3, #0
   15990:	beq	159ac <__assert_fail@plt+0x4a60>
   15994:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   15998:	cmp	r3, #0
   1599c:	beq	159ac <__assert_fail@plt+0x4a60>
   159a0:	mov	r3, #0
   159a4:	str	r3, [fp, #-48]	; 0xffffffd0
   159a8:	b	159f4 <__assert_fail@plt+0x4aa8>
   159ac:	ldr	r1, [fp, #-48]	; 0xffffffd0
   159b0:	sub	r3, fp, #32
   159b4:	sub	r2, fp, #52	; 0x34
   159b8:	ldr	r0, [fp, #-20]	; 0xffffffec
   159bc:	bl	153ec <__assert_fail@plt+0x44a0>
   159c0:	mov	r3, r0
   159c4:	eor	r3, r3, #1
   159c8:	uxtb	r3, r3
   159cc:	cmp	r3, #0
   159d0:	bne	159f0 <__assert_fail@plt+0x4aa4>
   159d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   159d8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   159dc:	sub	r3, r3, r2
   159e0:	str	r3, [fp, #-48]	; 0xffffffd0
   159e4:	b	15828 <__assert_fail@plt+0x48dc>
   159e8:	nop			; (mov r0, r0)
   159ec:	b	159f4 <__assert_fail@plt+0x4aa8>
   159f0:	nop			; (mov r0, r0)
   159f4:	ldr	r3, [fp, #4]
   159f8:	ldr	r2, [r3]
   159fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15a00:	sub	r2, r2, r3
   15a04:	ldr	r3, [fp, #4]
   15a08:	str	r2, [r3]
   15a0c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15a10:	cmp	r3, #0
   15a14:	moveq	r3, #1
   15a18:	movne	r3, #0
   15a1c:	uxtb	r3, r3
   15a20:	mov	r0, r3
   15a24:	sub	sp, fp, #4
   15a28:	pop	{fp, pc}
   15a2c:	push	{fp, lr}
   15a30:	add	fp, sp, #4
   15a34:	sub	sp, sp, #32
   15a38:	str	r0, [fp, #-16]
   15a3c:	str	r1, [fp, #-20]	; 0xffffffec
   15a40:	str	r2, [fp, #-24]	; 0xffffffe8
   15a44:	str	r3, [fp, #-28]	; 0xffffffe4
   15a48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15a4c:	asr	r3, r3, #2
   15a50:	add	r2, r3, #1
   15a54:	mov	r3, r2
   15a58:	lsl	r3, r3, #1
   15a5c:	add	r3, r3, r2
   15a60:	str	r3, [fp, #-8]
   15a64:	ldr	r3, [fp, #-8]
   15a68:	mov	r0, r3
   15a6c:	bl	16578 <__assert_fail@plt+0x562c>
   15a70:	mov	r3, r0
   15a74:	mov	r2, r3
   15a78:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15a7c:	str	r2, [r3]
   15a80:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15a84:	ldr	r3, [r3]
   15a88:	cmp	r3, #0
   15a8c:	bne	15a98 <__assert_fail@plt+0x4b4c>
   15a90:	mov	r3, #1
   15a94:	b	15b10 <__assert_fail@plt+0x4bc4>
   15a98:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15a9c:	ldr	r2, [r3]
   15aa0:	sub	r3, fp, #8
   15aa4:	str	r3, [sp]
   15aa8:	mov	r3, r2
   15aac:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15ab0:	ldr	r1, [fp, #-20]	; 0xffffffec
   15ab4:	ldr	r0, [fp, #-16]
   15ab8:	bl	157b0 <__assert_fail@plt+0x4864>
   15abc:	mov	r3, r0
   15ac0:	eor	r3, r3, #1
   15ac4:	uxtb	r3, r3
   15ac8:	cmp	r3, #0
   15acc:	beq	15af4 <__assert_fail@plt+0x4ba8>
   15ad0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15ad4:	ldr	r3, [r3]
   15ad8:	mov	r0, r3
   15adc:	bl	163e4 <__assert_fail@plt+0x5498>
   15ae0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15ae4:	mov	r2, #0
   15ae8:	str	r2, [r3]
   15aec:	mov	r3, #0
   15af0:	b	15b10 <__assert_fail@plt+0x4bc4>
   15af4:	ldr	r3, [fp, #4]
   15af8:	cmp	r3, #0
   15afc:	beq	15b0c <__assert_fail@plt+0x4bc0>
   15b00:	ldr	r2, [fp, #-8]
   15b04:	ldr	r3, [fp, #4]
   15b08:	str	r2, [r3]
   15b0c:	mov	r3, #1
   15b10:	mov	r0, r3
   15b14:	sub	sp, fp, #4
   15b18:	pop	{fp, pc}
   15b1c:	push	{fp}		; (str fp, [sp, #-4]!)
   15b20:	add	fp, sp, #0
   15b24:	sub	sp, sp, #12
   15b28:	str	r0, [fp, #-8]
   15b2c:	ldr	r3, [fp, #-8]
   15b30:	cmp	r3, #90	; 0x5a
   15b34:	bgt	15b50 <__assert_fail@plt+0x4c04>
   15b38:	cmp	r3, #65	; 0x41
   15b3c:	bge	15b5c <__assert_fail@plt+0x4c10>
   15b40:	sub	r3, r3, #48	; 0x30
   15b44:	cmp	r3, #9
   15b48:	bhi	15b64 <__assert_fail@plt+0x4c18>
   15b4c:	b	15b5c <__assert_fail@plt+0x4c10>
   15b50:	sub	r3, r3, #97	; 0x61
   15b54:	cmp	r3, #25
   15b58:	bhi	15b64 <__assert_fail@plt+0x4c18>
   15b5c:	mov	r3, #1
   15b60:	b	15b68 <__assert_fail@plt+0x4c1c>
   15b64:	mov	r3, #0
   15b68:	mov	r0, r3
   15b6c:	add	sp, fp, #0
   15b70:	pop	{fp}		; (ldr fp, [sp], #4)
   15b74:	bx	lr
   15b78:	push	{fp}		; (str fp, [sp, #-4]!)
   15b7c:	add	fp, sp, #0
   15b80:	sub	sp, sp, #12
   15b84:	str	r0, [fp, #-8]
   15b88:	ldr	r3, [fp, #-8]
   15b8c:	cmp	r3, #65	; 0x41
   15b90:	blt	15bb0 <__assert_fail@plt+0x4c64>
   15b94:	cmp	r3, #90	; 0x5a
   15b98:	ble	15ba8 <__assert_fail@plt+0x4c5c>
   15b9c:	sub	r3, r3, #97	; 0x61
   15ba0:	cmp	r3, #25
   15ba4:	bhi	15bb0 <__assert_fail@plt+0x4c64>
   15ba8:	mov	r3, #1
   15bac:	b	15bb4 <__assert_fail@plt+0x4c68>
   15bb0:	mov	r3, #0
   15bb4:	mov	r0, r3
   15bb8:	add	sp, fp, #0
   15bbc:	pop	{fp}		; (ldr fp, [sp], #4)
   15bc0:	bx	lr
   15bc4:	push	{fp}		; (str fp, [sp, #-4]!)
   15bc8:	add	fp, sp, #0
   15bcc:	sub	sp, sp, #12
   15bd0:	str	r0, [fp, #-8]
   15bd4:	ldr	r3, [fp, #-8]
   15bd8:	add	r3, r3, #0
   15bdc:	cmp	r3, #127	; 0x7f
   15be0:	bhi	15bec <__assert_fail@plt+0x4ca0>
   15be4:	mov	r3, #1
   15be8:	b	15bf0 <__assert_fail@plt+0x4ca4>
   15bec:	mov	r3, #0
   15bf0:	mov	r0, r3
   15bf4:	add	sp, fp, #0
   15bf8:	pop	{fp}		; (ldr fp, [sp], #4)
   15bfc:	bx	lr
   15c00:	push	{fp}		; (str fp, [sp, #-4]!)
   15c04:	add	fp, sp, #0
   15c08:	sub	sp, sp, #12
   15c0c:	str	r0, [fp, #-8]
   15c10:	ldr	r3, [fp, #-8]
   15c14:	cmp	r3, #32
   15c18:	beq	15c28 <__assert_fail@plt+0x4cdc>
   15c1c:	ldr	r3, [fp, #-8]
   15c20:	cmp	r3, #9
   15c24:	bne	15c30 <__assert_fail@plt+0x4ce4>
   15c28:	mov	r3, #1
   15c2c:	b	15c34 <__assert_fail@plt+0x4ce8>
   15c30:	mov	r3, #0
   15c34:	and	r3, r3, #1
   15c38:	uxtb	r3, r3
   15c3c:	mov	r0, r3
   15c40:	add	sp, fp, #0
   15c44:	pop	{fp}		; (ldr fp, [sp], #4)
   15c48:	bx	lr
   15c4c:	push	{fp}		; (str fp, [sp, #-4]!)
   15c50:	add	fp, sp, #0
   15c54:	sub	sp, sp, #12
   15c58:	str	r0, [fp, #-8]
   15c5c:	ldr	r3, [fp, #-8]
   15c60:	cmp	r3, #0
   15c64:	blt	15c80 <__assert_fail@plt+0x4d34>
   15c68:	cmp	r3, #31
   15c6c:	ble	15c78 <__assert_fail@plt+0x4d2c>
   15c70:	cmp	r3, #127	; 0x7f
   15c74:	bne	15c80 <__assert_fail@plt+0x4d34>
   15c78:	mov	r3, #1
   15c7c:	b	15c84 <__assert_fail@plt+0x4d38>
   15c80:	mov	r3, #0
   15c84:	mov	r0, r3
   15c88:	add	sp, fp, #0
   15c8c:	pop	{fp}		; (ldr fp, [sp], #4)
   15c90:	bx	lr
   15c94:	push	{fp}		; (str fp, [sp, #-4]!)
   15c98:	add	fp, sp, #0
   15c9c:	sub	sp, sp, #12
   15ca0:	str	r0, [fp, #-8]
   15ca4:	ldr	r3, [fp, #-8]
   15ca8:	sub	r3, r3, #48	; 0x30
   15cac:	cmp	r3, #9
   15cb0:	bhi	15cbc <__assert_fail@plt+0x4d70>
   15cb4:	mov	r3, #1
   15cb8:	b	15cc0 <__assert_fail@plt+0x4d74>
   15cbc:	mov	r3, #0
   15cc0:	mov	r0, r3
   15cc4:	add	sp, fp, #0
   15cc8:	pop	{fp}		; (ldr fp, [sp], #4)
   15ccc:	bx	lr
   15cd0:	push	{fp}		; (str fp, [sp, #-4]!)
   15cd4:	add	fp, sp, #0
   15cd8:	sub	sp, sp, #12
   15cdc:	str	r0, [fp, #-8]
   15ce0:	ldr	r3, [fp, #-8]
   15ce4:	sub	r3, r3, #33	; 0x21
   15ce8:	cmp	r3, #93	; 0x5d
   15cec:	bhi	15cf8 <__assert_fail@plt+0x4dac>
   15cf0:	mov	r3, #1
   15cf4:	b	15cfc <__assert_fail@plt+0x4db0>
   15cf8:	mov	r3, #0
   15cfc:	mov	r0, r3
   15d00:	add	sp, fp, #0
   15d04:	pop	{fp}		; (ldr fp, [sp], #4)
   15d08:	bx	lr
   15d0c:	push	{fp}		; (str fp, [sp, #-4]!)
   15d10:	add	fp, sp, #0
   15d14:	sub	sp, sp, #12
   15d18:	str	r0, [fp, #-8]
   15d1c:	ldr	r3, [fp, #-8]
   15d20:	sub	r3, r3, #97	; 0x61
   15d24:	cmp	r3, #25
   15d28:	bhi	15d34 <__assert_fail@plt+0x4de8>
   15d2c:	mov	r3, #1
   15d30:	b	15d38 <__assert_fail@plt+0x4dec>
   15d34:	mov	r3, #0
   15d38:	mov	r0, r3
   15d3c:	add	sp, fp, #0
   15d40:	pop	{fp}		; (ldr fp, [sp], #4)
   15d44:	bx	lr
   15d48:	push	{fp}		; (str fp, [sp, #-4]!)
   15d4c:	add	fp, sp, #0
   15d50:	sub	sp, sp, #12
   15d54:	str	r0, [fp, #-8]
   15d58:	ldr	r3, [fp, #-8]
   15d5c:	sub	r3, r3, #32
   15d60:	cmp	r3, #94	; 0x5e
   15d64:	bhi	15d70 <__assert_fail@plt+0x4e24>
   15d68:	mov	r3, #1
   15d6c:	b	15d74 <__assert_fail@plt+0x4e28>
   15d70:	mov	r3, #0
   15d74:	mov	r0, r3
   15d78:	add	sp, fp, #0
   15d7c:	pop	{fp}		; (ldr fp, [sp], #4)
   15d80:	bx	lr
   15d84:	push	{fp}		; (str fp, [sp, #-4]!)
   15d88:	add	fp, sp, #0
   15d8c:	sub	sp, sp, #12
   15d90:	str	r0, [fp, #-8]
   15d94:	ldr	r3, [fp, #-8]
   15d98:	cmp	r3, #64	; 0x40
   15d9c:	bgt	15db8 <__assert_fail@plt+0x4e6c>
   15da0:	cmp	r3, #58	; 0x3a
   15da4:	bge	15dd4 <__assert_fail@plt+0x4e88>
   15da8:	sub	r3, r3, #33	; 0x21
   15dac:	cmp	r3, #14
   15db0:	bhi	15ddc <__assert_fail@plt+0x4e90>
   15db4:	b	15dd4 <__assert_fail@plt+0x4e88>
   15db8:	cmp	r3, #91	; 0x5b
   15dbc:	blt	15ddc <__assert_fail@plt+0x4e90>
   15dc0:	cmp	r3, #96	; 0x60
   15dc4:	ble	15dd4 <__assert_fail@plt+0x4e88>
   15dc8:	sub	r3, r3, #123	; 0x7b
   15dcc:	cmp	r3, #3
   15dd0:	bhi	15ddc <__assert_fail@plt+0x4e90>
   15dd4:	mov	r3, #1
   15dd8:	b	15de0 <__assert_fail@plt+0x4e94>
   15ddc:	mov	r3, #0
   15de0:	mov	r0, r3
   15de4:	add	sp, fp, #0
   15de8:	pop	{fp}		; (ldr fp, [sp], #4)
   15dec:	bx	lr
   15df0:	push	{fp}		; (str fp, [sp, #-4]!)
   15df4:	add	fp, sp, #0
   15df8:	sub	sp, sp, #12
   15dfc:	str	r0, [fp, #-8]
   15e00:	ldr	r3, [fp, #-8]
   15e04:	cmp	r3, #9
   15e08:	blt	15e24 <__assert_fail@plt+0x4ed8>
   15e0c:	cmp	r3, #13
   15e10:	ble	15e1c <__assert_fail@plt+0x4ed0>
   15e14:	cmp	r3, #32
   15e18:	bne	15e24 <__assert_fail@plt+0x4ed8>
   15e1c:	mov	r3, #1
   15e20:	b	15e28 <__assert_fail@plt+0x4edc>
   15e24:	mov	r3, #0
   15e28:	mov	r0, r3
   15e2c:	add	sp, fp, #0
   15e30:	pop	{fp}		; (ldr fp, [sp], #4)
   15e34:	bx	lr
   15e38:	push	{fp}		; (str fp, [sp, #-4]!)
   15e3c:	add	fp, sp, #0
   15e40:	sub	sp, sp, #12
   15e44:	str	r0, [fp, #-8]
   15e48:	ldr	r3, [fp, #-8]
   15e4c:	sub	r3, r3, #65	; 0x41
   15e50:	cmp	r3, #25
   15e54:	bhi	15e60 <__assert_fail@plt+0x4f14>
   15e58:	mov	r3, #1
   15e5c:	b	15e64 <__assert_fail@plt+0x4f18>
   15e60:	mov	r3, #0
   15e64:	mov	r0, r3
   15e68:	add	sp, fp, #0
   15e6c:	pop	{fp}		; (ldr fp, [sp], #4)
   15e70:	bx	lr
   15e74:	push	{fp}		; (str fp, [sp, #-4]!)
   15e78:	add	fp, sp, #0
   15e7c:	sub	sp, sp, #12
   15e80:	str	r0, [fp, #-8]
   15e84:	ldr	r3, [fp, #-8]
   15e88:	sub	r3, r3, #48	; 0x30
   15e8c:	cmp	r3, #54	; 0x36
   15e90:	addls	pc, pc, r3, lsl #2
   15e94:	b	15f7c <__assert_fail@plt+0x5030>
   15e98:	b	15f74 <__assert_fail@plt+0x5028>
   15e9c:	b	15f74 <__assert_fail@plt+0x5028>
   15ea0:	b	15f74 <__assert_fail@plt+0x5028>
   15ea4:	b	15f74 <__assert_fail@plt+0x5028>
   15ea8:	b	15f74 <__assert_fail@plt+0x5028>
   15eac:	b	15f74 <__assert_fail@plt+0x5028>
   15eb0:	b	15f74 <__assert_fail@plt+0x5028>
   15eb4:	b	15f74 <__assert_fail@plt+0x5028>
   15eb8:	b	15f74 <__assert_fail@plt+0x5028>
   15ebc:	b	15f74 <__assert_fail@plt+0x5028>
   15ec0:	b	15f7c <__assert_fail@plt+0x5030>
   15ec4:	b	15f7c <__assert_fail@plt+0x5030>
   15ec8:	b	15f7c <__assert_fail@plt+0x5030>
   15ecc:	b	15f7c <__assert_fail@plt+0x5030>
   15ed0:	b	15f7c <__assert_fail@plt+0x5030>
   15ed4:	b	15f7c <__assert_fail@plt+0x5030>
   15ed8:	b	15f7c <__assert_fail@plt+0x5030>
   15edc:	b	15f74 <__assert_fail@plt+0x5028>
   15ee0:	b	15f74 <__assert_fail@plt+0x5028>
   15ee4:	b	15f74 <__assert_fail@plt+0x5028>
   15ee8:	b	15f74 <__assert_fail@plt+0x5028>
   15eec:	b	15f74 <__assert_fail@plt+0x5028>
   15ef0:	b	15f74 <__assert_fail@plt+0x5028>
   15ef4:	b	15f7c <__assert_fail@plt+0x5030>
   15ef8:	b	15f7c <__assert_fail@plt+0x5030>
   15efc:	b	15f7c <__assert_fail@plt+0x5030>
   15f00:	b	15f7c <__assert_fail@plt+0x5030>
   15f04:	b	15f7c <__assert_fail@plt+0x5030>
   15f08:	b	15f7c <__assert_fail@plt+0x5030>
   15f0c:	b	15f7c <__assert_fail@plt+0x5030>
   15f10:	b	15f7c <__assert_fail@plt+0x5030>
   15f14:	b	15f7c <__assert_fail@plt+0x5030>
   15f18:	b	15f7c <__assert_fail@plt+0x5030>
   15f1c:	b	15f7c <__assert_fail@plt+0x5030>
   15f20:	b	15f7c <__assert_fail@plt+0x5030>
   15f24:	b	15f7c <__assert_fail@plt+0x5030>
   15f28:	b	15f7c <__assert_fail@plt+0x5030>
   15f2c:	b	15f7c <__assert_fail@plt+0x5030>
   15f30:	b	15f7c <__assert_fail@plt+0x5030>
   15f34:	b	15f7c <__assert_fail@plt+0x5030>
   15f38:	b	15f7c <__assert_fail@plt+0x5030>
   15f3c:	b	15f7c <__assert_fail@plt+0x5030>
   15f40:	b	15f7c <__assert_fail@plt+0x5030>
   15f44:	b	15f7c <__assert_fail@plt+0x5030>
   15f48:	b	15f7c <__assert_fail@plt+0x5030>
   15f4c:	b	15f7c <__assert_fail@plt+0x5030>
   15f50:	b	15f7c <__assert_fail@plt+0x5030>
   15f54:	b	15f7c <__assert_fail@plt+0x5030>
   15f58:	b	15f7c <__assert_fail@plt+0x5030>
   15f5c:	b	15f74 <__assert_fail@plt+0x5028>
   15f60:	b	15f74 <__assert_fail@plt+0x5028>
   15f64:	b	15f74 <__assert_fail@plt+0x5028>
   15f68:	b	15f74 <__assert_fail@plt+0x5028>
   15f6c:	b	15f74 <__assert_fail@plt+0x5028>
   15f70:	b	15f74 <__assert_fail@plt+0x5028>
   15f74:	mov	r3, #1
   15f78:	b	15f80 <__assert_fail@plt+0x5034>
   15f7c:	mov	r3, #0
   15f80:	mov	r0, r3
   15f84:	add	sp, fp, #0
   15f88:	pop	{fp}		; (ldr fp, [sp], #4)
   15f8c:	bx	lr
   15f90:	push	{fp}		; (str fp, [sp, #-4]!)
   15f94:	add	fp, sp, #0
   15f98:	sub	sp, sp, #12
   15f9c:	str	r0, [fp, #-8]
   15fa0:	ldr	r3, [fp, #-8]
   15fa4:	sub	r3, r3, #65	; 0x41
   15fa8:	cmp	r3, #25
   15fac:	bhi	15fbc <__assert_fail@plt+0x5070>
   15fb0:	ldr	r3, [fp, #-8]
   15fb4:	add	r3, r3, #32
   15fb8:	b	15fc0 <__assert_fail@plt+0x5074>
   15fbc:	ldr	r3, [fp, #-8]
   15fc0:	mov	r0, r3
   15fc4:	add	sp, fp, #0
   15fc8:	pop	{fp}		; (ldr fp, [sp], #4)
   15fcc:	bx	lr
   15fd0:	push	{fp}		; (str fp, [sp, #-4]!)
   15fd4:	add	fp, sp, #0
   15fd8:	sub	sp, sp, #12
   15fdc:	str	r0, [fp, #-8]
   15fe0:	ldr	r3, [fp, #-8]
   15fe4:	sub	r3, r3, #97	; 0x61
   15fe8:	cmp	r3, #25
   15fec:	bhi	15ffc <__assert_fail@plt+0x50b0>
   15ff0:	ldr	r3, [fp, #-8]
   15ff4:	sub	r3, r3, #32
   15ff8:	b	16000 <__assert_fail@plt+0x50b4>
   15ffc:	ldr	r3, [fp, #-8]
   16000:	mov	r0, r3
   16004:	add	sp, fp, #0
   16008:	pop	{fp}		; (ldr fp, [sp], #4)
   1600c:	bx	lr
   16010:	push	{fp}		; (str fp, [sp, #-4]!)
   16014:	add	fp, sp, #0
   16018:	sub	sp, sp, #12
   1601c:	str	r0, [fp, #-8]
   16020:	ldr	r2, [pc, #20]	; 1603c <__assert_fail@plt+0x50f0>
   16024:	ldr	r3, [fp, #-8]
   16028:	str	r3, [r2]
   1602c:	nop			; (mov r0, r0)
   16030:	add	sp, fp, #0
   16034:	pop	{fp}		; (ldr fp, [sp], #4)
   16038:	bx	lr
   1603c:	andeq	sp, r2, r4, ror r1
   16040:	push	{fp}		; (str fp, [sp, #-4]!)
   16044:	add	fp, sp, #0
   16048:	sub	sp, sp, #12
   1604c:	mov	r3, r0
   16050:	strb	r3, [fp, #-5]
   16054:	ldr	r2, [pc, #20]	; 16070 <__assert_fail@plt+0x5124>
   16058:	ldrb	r3, [fp, #-5]
   1605c:	strb	r3, [r2]
   16060:	nop			; (mov r0, r0)
   16064:	add	sp, fp, #0
   16068:	pop	{fp}		; (ldr fp, [sp], #4)
   1606c:	bx	lr
   16070:	andeq	sp, r2, r8, ror r1
   16074:	push	{r4, fp, lr}
   16078:	add	fp, sp, #8
   1607c:	sub	sp, sp, #20
   16080:	ldr	r3, [pc, #256]	; 16188 <__assert_fail@plt+0x523c>
   16084:	ldr	r3, [r3]
   16088:	mov	r0, r3
   1608c:	bl	1ae64 <__assert_fail@plt+0x9f18>
   16090:	mov	r3, r0
   16094:	cmp	r3, #0
   16098:	beq	16150 <__assert_fail@plt+0x5204>
   1609c:	ldr	r3, [pc, #232]	; 1618c <__assert_fail@plt+0x5240>
   160a0:	ldrb	r3, [r3]
   160a4:	eor	r3, r3, #1
   160a8:	uxtb	r3, r3
   160ac:	cmp	r3, #0
   160b0:	bne	160c8 <__assert_fail@plt+0x517c>
   160b4:	bl	10e80 <__errno_location@plt>
   160b8:	mov	r3, r0
   160bc:	ldr	r3, [r3]
   160c0:	cmp	r3, #32
   160c4:	beq	16150 <__assert_fail@plt+0x5204>
   160c8:	ldr	r0, [pc, #192]	; 16190 <__assert_fail@plt+0x5244>
   160cc:	bl	10e50 <gettext@plt>
   160d0:	str	r0, [fp, #-16]
   160d4:	ldr	r3, [pc, #184]	; 16194 <__assert_fail@plt+0x5248>
   160d8:	ldr	r3, [r3]
   160dc:	cmp	r3, #0
   160e0:	beq	16124 <__assert_fail@plt+0x51d8>
   160e4:	bl	10e80 <__errno_location@plt>
   160e8:	mov	r3, r0
   160ec:	ldr	r4, [r3]
   160f0:	ldr	r3, [pc, #156]	; 16194 <__assert_fail@plt+0x5248>
   160f4:	ldr	r3, [r3]
   160f8:	mov	r0, r3
   160fc:	bl	18af0 <__assert_fail@plt+0x7ba4>
   16100:	mov	r2, r0
   16104:	ldr	r3, [fp, #-16]
   16108:	str	r3, [sp]
   1610c:	mov	r3, r2
   16110:	ldr	r2, [pc, #128]	; 16198 <__assert_fail@plt+0x524c>
   16114:	mov	r1, r4
   16118:	mov	r0, #0
   1611c:	bl	10df0 <error@plt>
   16120:	b	16140 <__assert_fail@plt+0x51f4>
   16124:	bl	10e80 <__errno_location@plt>
   16128:	mov	r3, r0
   1612c:	ldr	r1, [r3]
   16130:	ldr	r3, [fp, #-16]
   16134:	ldr	r2, [pc, #96]	; 1619c <__assert_fail@plt+0x5250>
   16138:	mov	r0, #0
   1613c:	bl	10df0 <error@plt>
   16140:	ldr	r3, [pc, #88]	; 161a0 <__assert_fail@plt+0x5254>
   16144:	ldr	r3, [r3]
   16148:	mov	r0, r3
   1614c:	bl	10d3c <_exit@plt>
   16150:	ldr	r3, [pc, #76]	; 161a4 <__assert_fail@plt+0x5258>
   16154:	ldr	r3, [r3]
   16158:	mov	r0, r3
   1615c:	bl	1ae64 <__assert_fail@plt+0x9f18>
   16160:	mov	r3, r0
   16164:	cmp	r3, #0
   16168:	beq	1617c <__assert_fail@plt+0x5230>
   1616c:	ldr	r3, [pc, #44]	; 161a0 <__assert_fail@plt+0x5254>
   16170:	ldr	r3, [r3]
   16174:	mov	r0, r3
   16178:	bl	10d3c <_exit@plt>
   1617c:	nop			; (mov r0, r0)
   16180:	sub	sp, fp, #8
   16184:	pop	{r4, fp, pc}
   16188:	andeq	sp, r2, r4, asr r1
   1618c:	andeq	sp, r2, r8, ror r1
   16190:	andeq	ip, r1, ip, lsr r7
   16194:	andeq	sp, r2, r4, ror r1
   16198:	andeq	ip, r1, r8, asr #14
   1619c:	andeq	ip, r1, r0, asr r7
   161a0:	strdeq	sp, [r2], -r4
   161a4:	andeq	sp, r2, r8, asr #2
   161a8:	push	{fp, lr}
   161ac:	add	fp, sp, #4
   161b0:	sub	sp, sp, #40	; 0x28
   161b4:	str	r0, [fp, #-16]
   161b8:	strd	r2, [fp, #-28]	; 0xffffffe4
   161bc:	ldr	r3, [fp, #12]
   161c0:	str	r3, [sp, #8]
   161c4:	ldrd	r2, [fp, #4]
   161c8:	strd	r2, [sp]
   161cc:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   161d0:	ldr	r0, [fp, #-16]
   161d4:	bl	10d00 <posix_fadvise64@plt>
   161d8:	str	r0, [fp, #-8]
   161dc:	nop			; (mov r0, r0)
   161e0:	sub	sp, fp, #4
   161e4:	pop	{fp, pc}
   161e8:	push	{fp, lr}
   161ec:	add	fp, sp, #4
   161f0:	sub	sp, sp, #24
   161f4:	str	r0, [fp, #-8]
   161f8:	str	r1, [fp, #-12]
   161fc:	ldr	r3, [fp, #-8]
   16200:	cmp	r3, #0
   16204:	beq	16238 <__assert_fail@plt+0x52ec>
   16208:	ldr	r0, [fp, #-8]
   1620c:	bl	10ea4 <fileno@plt>
   16210:	mov	r1, r0
   16214:	ldr	r3, [fp, #-12]
   16218:	str	r3, [sp, #8]
   1621c:	mov	r2, #0
   16220:	mov	r3, #0
   16224:	strd	r2, [sp]
   16228:	mov	r2, #0
   1622c:	mov	r3, #0
   16230:	mov	r0, r1
   16234:	bl	161a8 <__assert_fail@plt+0x525c>
   16238:	nop			; (mov r0, r0)
   1623c:	sub	sp, fp, #4
   16240:	pop	{fp, pc}
   16244:	push	{fp, lr}
   16248:	add	fp, sp, #4
   1624c:	sub	sp, sp, #32
   16250:	str	r0, [fp, #-24]	; 0xffffffe8
   16254:	mov	r3, #0
   16258:	str	r3, [fp, #-8]
   1625c:	mov	r3, #0
   16260:	str	r3, [fp, #-12]
   16264:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16268:	bl	10ea4 <fileno@plt>
   1626c:	str	r0, [fp, #-16]
   16270:	ldr	r3, [fp, #-16]
   16274:	cmp	r3, #0
   16278:	bge	1628c <__assert_fail@plt+0x5340>
   1627c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16280:	bl	10ec8 <fclose@plt>
   16284:	mov	r3, r0
   16288:	b	16330 <__assert_fail@plt+0x53e4>
   1628c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16290:	bl	10e14 <__freading@plt>
   16294:	mov	r3, r0
   16298:	cmp	r3, #0
   1629c:	beq	162d8 <__assert_fail@plt+0x538c>
   162a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   162a4:	bl	10ea4 <fileno@plt>
   162a8:	mov	r1, r0
   162ac:	mov	r3, #1
   162b0:	str	r3, [sp]
   162b4:	mov	r2, #0
   162b8:	mov	r3, #0
   162bc:	mov	r0, r1
   162c0:	bl	10db4 <lseek64@plt>
   162c4:	mvn	r2, #0
   162c8:	mvn	r3, #0
   162cc:	cmp	r1, r3
   162d0:	cmpeq	r0, r2
   162d4:	beq	162fc <__assert_fail@plt+0x53b0>
   162d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   162dc:	bl	16384 <__assert_fail@plt+0x5438>
   162e0:	mov	r3, r0
   162e4:	cmp	r3, #0
   162e8:	beq	162fc <__assert_fail@plt+0x53b0>
   162ec:	bl	10e80 <__errno_location@plt>
   162f0:	mov	r3, r0
   162f4:	ldr	r3, [r3]
   162f8:	str	r3, [fp, #-8]
   162fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16300:	bl	10ec8 <fclose@plt>
   16304:	str	r0, [fp, #-12]
   16308:	ldr	r3, [fp, #-8]
   1630c:	cmp	r3, #0
   16310:	beq	1632c <__assert_fail@plt+0x53e0>
   16314:	bl	10e80 <__errno_location@plt>
   16318:	mov	r2, r0
   1631c:	ldr	r3, [fp, #-8]
   16320:	str	r3, [r2]
   16324:	mvn	r3, #0
   16328:	str	r3, [fp, #-12]
   1632c:	ldr	r3, [fp, #-12]
   16330:	mov	r0, r3
   16334:	sub	sp, fp, #4
   16338:	pop	{fp, pc}
   1633c:	push	{fp, lr}
   16340:	add	fp, sp, #4
   16344:	sub	sp, sp, #16
   16348:	str	r0, [fp, #-8]
   1634c:	ldr	r3, [fp, #-8]
   16350:	ldr	r3, [r3]
   16354:	and	r3, r3, #256	; 0x100
   16358:	cmp	r3, #0
   1635c:	beq	16378 <__assert_fail@plt+0x542c>
   16360:	mov	r3, #1
   16364:	str	r3, [sp]
   16368:	mov	r2, #0
   1636c:	mov	r3, #0
   16370:	ldr	r0, [fp, #-8]
   16374:	bl	16470 <__assert_fail@plt+0x5524>
   16378:	nop			; (mov r0, r0)
   1637c:	sub	sp, fp, #4
   16380:	pop	{fp, pc}
   16384:	push	{fp, lr}
   16388:	add	fp, sp, #4
   1638c:	sub	sp, sp, #8
   16390:	str	r0, [fp, #-8]
   16394:	ldr	r3, [fp, #-8]
   16398:	cmp	r3, #0
   1639c:	beq	163b4 <__assert_fail@plt+0x5468>
   163a0:	ldr	r0, [fp, #-8]
   163a4:	bl	10e14 <__freading@plt>
   163a8:	mov	r3, r0
   163ac:	cmp	r3, #0
   163b0:	bne	163c4 <__assert_fail@plt+0x5478>
   163b4:	ldr	r0, [fp, #-8]
   163b8:	bl	10d18 <fflush@plt>
   163bc:	mov	r3, r0
   163c0:	b	163d8 <__assert_fail@plt+0x548c>
   163c4:	ldr	r0, [fp, #-8]
   163c8:	bl	1633c <__assert_fail@plt+0x53f0>
   163cc:	ldr	r0, [fp, #-8]
   163d0:	bl	10d18 <fflush@plt>
   163d4:	mov	r3, r0
   163d8:	mov	r0, r3
   163dc:	sub	sp, fp, #4
   163e0:	pop	{fp, pc}
   163e4:	push	{r4, fp, lr}
   163e8:	add	fp, sp, #8
   163ec:	sub	sp, sp, #20
   163f0:	str	r0, [fp, #-24]	; 0xffffffe8
   163f4:	bl	10e80 <__errno_location@plt>
   163f8:	mov	r3, r0
   163fc:	ldr	r3, [r3]
   16400:	str	r3, [fp, #-20]	; 0xffffffec
   16404:	bl	10e80 <__errno_location@plt>
   16408:	mov	r3, r0
   1640c:	ldr	r3, [r3]
   16410:	str	r3, [fp, #-16]
   16414:	bl	10e80 <__errno_location@plt>
   16418:	mov	r2, r0
   1641c:	mov	r3, #0
   16420:	str	r3, [r2]
   16424:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16428:	bl	10d30 <free@plt>
   1642c:	bl	10e80 <__errno_location@plt>
   16430:	mov	r4, r0
   16434:	bl	10e80 <__errno_location@plt>
   16438:	mov	r3, r0
   1643c:	ldr	r3, [r3]
   16440:	cmp	r3, #0
   16444:	moveq	r3, #1
   16448:	movne	r3, #0
   1644c:	uxtb	r3, r3
   16450:	lsl	r3, r3, #2
   16454:	sub	r2, fp, #12
   16458:	add	r3, r2, r3
   1645c:	ldr	r3, [r3, #-8]
   16460:	str	r3, [r4]
   16464:	nop			; (mov r0, r0)
   16468:	sub	sp, fp, #8
   1646c:	pop	{r4, fp, pc}
   16470:	push	{fp, lr}
   16474:	add	fp, sp, #4
   16478:	sub	sp, sp, #32
   1647c:	str	r0, [fp, #-16]
   16480:	strd	r2, [fp, #-28]	; 0xffffffe4
   16484:	ldr	r3, [fp, #-16]
   16488:	ldr	r2, [r3, #8]
   1648c:	ldr	r3, [fp, #-16]
   16490:	ldr	r3, [r3, #4]
   16494:	cmp	r2, r3
   16498:	bne	16530 <__assert_fail@plt+0x55e4>
   1649c:	ldr	r3, [fp, #-16]
   164a0:	ldr	r2, [r3, #20]
   164a4:	ldr	r3, [fp, #-16]
   164a8:	ldr	r3, [r3, #16]
   164ac:	cmp	r2, r3
   164b0:	bne	16530 <__assert_fail@plt+0x55e4>
   164b4:	ldr	r3, [fp, #-16]
   164b8:	ldr	r3, [r3, #36]	; 0x24
   164bc:	cmp	r3, #0
   164c0:	bne	16530 <__assert_fail@plt+0x55e4>
   164c4:	ldr	r0, [fp, #-16]
   164c8:	bl	10ea4 <fileno@plt>
   164cc:	mov	r1, r0
   164d0:	ldr	r3, [fp, #4]
   164d4:	str	r3, [sp]
   164d8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   164dc:	mov	r0, r1
   164e0:	bl	10db4 <lseek64@plt>
   164e4:	strd	r0, [fp, #-12]
   164e8:	ldrd	r2, [fp, #-12]
   164ec:	mvn	r0, #0
   164f0:	mvn	r1, #0
   164f4:	cmp	r3, r1
   164f8:	cmpeq	r2, r0
   164fc:	bne	16508 <__assert_fail@plt+0x55bc>
   16500:	mvn	r3, #0
   16504:	b	16548 <__assert_fail@plt+0x55fc>
   16508:	ldr	r3, [fp, #-16]
   1650c:	ldr	r3, [r3]
   16510:	bic	r2, r3, #16
   16514:	ldr	r3, [fp, #-16]
   16518:	str	r2, [r3]
   1651c:	ldr	r1, [fp, #-16]
   16520:	ldrd	r2, [fp, #-12]
   16524:	strd	r2, [r1, #80]	; 0x50
   16528:	mov	r3, #0
   1652c:	b	16548 <__assert_fail@plt+0x55fc>
   16530:	ldr	r3, [fp, #4]
   16534:	str	r3, [sp]
   16538:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1653c:	ldr	r0, [fp, #-16]
   16540:	bl	10ed4 <fseeko64@plt>
   16544:	mov	r3, r0
   16548:	mov	r0, r3
   1654c:	sub	sp, fp, #4
   16550:	pop	{fp, pc}
   16554:	push	{fp, lr}
   16558:	add	fp, sp, #4
   1655c:	bl	10e80 <__errno_location@plt>
   16560:	mov	r2, r0
   16564:	mov	r3, #12
   16568:	str	r3, [r2]
   1656c:	mov	r3, #0
   16570:	mov	r0, r3
   16574:	pop	{fp, pc}
   16578:	push	{fp, lr}
   1657c:	add	fp, sp, #4
   16580:	sub	sp, sp, #8
   16584:	str	r0, [fp, #-8]
   16588:	ldr	r3, [fp, #-8]
   1658c:	mov	r0, r3
   16590:	bl	1abfc <__assert_fail@plt+0x9cb0>
   16594:	mov	r3, r0
   16598:	mov	r0, r3
   1659c:	sub	sp, fp, #4
   165a0:	pop	{fp, pc}
   165a4:	push	{fp, lr}
   165a8:	add	fp, sp, #4
   165ac:	sub	sp, sp, #8
   165b0:	str	r0, [fp, #-8]
   165b4:	str	r1, [fp, #-12]
   165b8:	ldr	r3, [fp, #-12]
   165bc:	cmp	r3, #0
   165c0:	moveq	r3, #1
   165c4:	movne	r3, #0
   165c8:	uxtb	r3, r3
   165cc:	mov	r2, r3
   165d0:	ldr	r3, [fp, #-12]
   165d4:	orr	r3, r2, r3
   165d8:	mov	r1, r3
   165dc:	ldr	r0, [fp, #-8]
   165e0:	bl	1aca4 <__assert_fail@plt+0x9d58>
   165e4:	mov	r3, r0
   165e8:	mov	r0, r3
   165ec:	sub	sp, fp, #4
   165f0:	pop	{fp, pc}
   165f4:	push	{fp, lr}
   165f8:	add	fp, sp, #4
   165fc:	sub	sp, sp, #8
   16600:	str	r0, [fp, #-8]
   16604:	str	r1, [fp, #-12]
   16608:	ldr	r3, [fp, #-8]
   1660c:	ldr	r2, [fp, #-12]
   16610:	mov	r1, r2
   16614:	mov	r0, r3
   16618:	bl	1ab38 <__assert_fail@plt+0x9bec>
   1661c:	mov	r3, r0
   16620:	mov	r0, r3
   16624:	sub	sp, fp, #4
   16628:	pop	{fp, pc}
   1662c:	push	{fp, lr}
   16630:	add	fp, sp, #4
   16634:	sub	sp, sp, #16
   16638:	str	r0, [fp, #-8]
   1663c:	str	r1, [fp, #-12]
   16640:	str	r2, [fp, #-16]
   16644:	ldr	r3, [fp, #-12]
   16648:	cmp	r3, #0
   1664c:	beq	1665c <__assert_fail@plt+0x5710>
   16650:	ldr	r3, [fp, #-16]
   16654:	cmp	r3, #0
   16658:	bne	1666c <__assert_fail@plt+0x5720>
   1665c:	mov	r3, #1
   16660:	str	r3, [fp, #-16]
   16664:	ldr	r3, [fp, #-16]
   16668:	str	r3, [fp, #-12]
   1666c:	ldr	r3, [fp, #-12]
   16670:	ldr	r2, [fp, #-16]
   16674:	mov	r1, r3
   16678:	ldr	r0, [fp, #-8]
   1667c:	bl	18dec <__assert_fail@plt+0x7ea0>
   16680:	mov	r3, r0
   16684:	mov	r0, r3
   16688:	sub	sp, fp, #4
   1668c:	pop	{fp, pc}
   16690:	push	{fp, lr}
   16694:	add	fp, sp, #4
   16698:	sub	sp, sp, #16
   1669c:	str	r0, [fp, #-16]
   166a0:	ldr	r3, [fp, #-16]
   166a4:	cmp	r3, #0
   166a8:	bne	166c8 <__assert_fail@plt+0x577c>
   166ac:	ldr	r3, [pc, #220]	; 16790 <__assert_fail@plt+0x5844>
   166b0:	ldr	r3, [r3]
   166b4:	mov	r2, #55	; 0x37
   166b8:	mov	r1, #1
   166bc:	ldr	r0, [pc, #208]	; 16794 <__assert_fail@plt+0x5848>
   166c0:	bl	10da8 <fwrite@plt>
   166c4:	bl	10f34 <abort@plt>
   166c8:	mov	r1, #47	; 0x2f
   166cc:	ldr	r0, [fp, #-16]
   166d0:	bl	10eec <strrchr@plt>
   166d4:	str	r0, [fp, #-8]
   166d8:	ldr	r3, [fp, #-8]
   166dc:	cmp	r3, #0
   166e0:	beq	166f0 <__assert_fail@plt+0x57a4>
   166e4:	ldr	r3, [fp, #-8]
   166e8:	add	r3, r3, #1
   166ec:	b	166f4 <__assert_fail@plt+0x57a8>
   166f0:	ldr	r3, [fp, #-16]
   166f4:	str	r3, [fp, #-12]
   166f8:	ldr	r2, [fp, #-12]
   166fc:	ldr	r3, [fp, #-16]
   16700:	sub	r3, r2, r3
   16704:	cmp	r3, #6
   16708:	ble	1676c <__assert_fail@plt+0x5820>
   1670c:	ldr	r3, [fp, #-12]
   16710:	sub	r3, r3, #7
   16714:	mov	r2, #7
   16718:	ldr	r1, [pc, #120]	; 16798 <__assert_fail@plt+0x584c>
   1671c:	mov	r0, r3
   16720:	bl	10f28 <strncmp@plt>
   16724:	mov	r3, r0
   16728:	cmp	r3, #0
   1672c:	bne	1676c <__assert_fail@plt+0x5820>
   16730:	ldr	r3, [fp, #-12]
   16734:	str	r3, [fp, #-16]
   16738:	mov	r2, #3
   1673c:	ldr	r1, [pc, #88]	; 1679c <__assert_fail@plt+0x5850>
   16740:	ldr	r0, [fp, #-12]
   16744:	bl	10f28 <strncmp@plt>
   16748:	mov	r3, r0
   1674c:	cmp	r3, #0
   16750:	bne	1676c <__assert_fail@plt+0x5820>
   16754:	ldr	r3, [fp, #-12]
   16758:	add	r3, r3, #3
   1675c:	str	r3, [fp, #-16]
   16760:	ldr	r2, [pc, #56]	; 167a0 <__assert_fail@plt+0x5854>
   16764:	ldr	r3, [fp, #-16]
   16768:	str	r3, [r2]
   1676c:	ldr	r2, [pc, #48]	; 167a4 <__assert_fail@plt+0x5858>
   16770:	ldr	r3, [fp, #-16]
   16774:	str	r3, [r2]
   16778:	ldr	r2, [pc, #40]	; 167a8 <__assert_fail@plt+0x585c>
   1677c:	ldr	r3, [fp, #-16]
   16780:	str	r3, [r2]
   16784:	nop			; (mov r0, r0)
   16788:	sub	sp, fp, #4
   1678c:	pop	{fp, pc}
   16790:	andeq	sp, r2, r8, asr #2
   16794:	andeq	ip, r1, r4, asr r7
   16798:	andeq	ip, r1, ip, lsl #15
   1679c:	muleq	r1, r4, r7
   167a0:	andeq	sp, r2, r8, lsr r1
   167a4:	andeq	sp, r2, ip, ror r1
   167a8:	andeq	sp, r2, ip, lsr r1
   167ac:	push	{fp, lr}
   167b0:	add	fp, sp, #4
   167b4:	sub	sp, sp, #16
   167b8:	str	r0, [fp, #-16]
   167bc:	bl	10e80 <__errno_location@plt>
   167c0:	mov	r3, r0
   167c4:	ldr	r3, [r3]
   167c8:	str	r3, [fp, #-8]
   167cc:	ldr	r3, [fp, #-16]
   167d0:	cmp	r3, #0
   167d4:	beq	167e0 <__assert_fail@plt+0x5894>
   167d8:	ldr	r3, [fp, #-16]
   167dc:	b	167e4 <__assert_fail@plt+0x5898>
   167e0:	ldr	r3, [pc, #48]	; 16818 <__assert_fail@plt+0x58cc>
   167e4:	mov	r1, #48	; 0x30
   167e8:	mov	r0, r3
   167ec:	bl	1a080 <__assert_fail@plt+0x9134>
   167f0:	mov	r3, r0
   167f4:	str	r3, [fp, #-12]
   167f8:	bl	10e80 <__errno_location@plt>
   167fc:	mov	r2, r0
   16800:	ldr	r3, [fp, #-8]
   16804:	str	r3, [r2]
   16808:	ldr	r3, [fp, #-12]
   1680c:	mov	r0, r3
   16810:	sub	sp, fp, #4
   16814:	pop	{fp, pc}
   16818:	andeq	sp, r2, r0, lsl #3
   1681c:	push	{fp}		; (str fp, [sp, #-4]!)
   16820:	add	fp, sp, #0
   16824:	sub	sp, sp, #12
   16828:	str	r0, [fp, #-8]
   1682c:	ldr	r3, [fp, #-8]
   16830:	cmp	r3, #0
   16834:	beq	16840 <__assert_fail@plt+0x58f4>
   16838:	ldr	r3, [fp, #-8]
   1683c:	b	16844 <__assert_fail@plt+0x58f8>
   16840:	ldr	r3, [pc, #16]	; 16858 <__assert_fail@plt+0x590c>
   16844:	ldr	r3, [r3]
   16848:	mov	r0, r3
   1684c:	add	sp, fp, #0
   16850:	pop	{fp}		; (ldr fp, [sp], #4)
   16854:	bx	lr
   16858:	andeq	sp, r2, r0, lsl #3
   1685c:	push	{fp}		; (str fp, [sp, #-4]!)
   16860:	add	fp, sp, #0
   16864:	sub	sp, sp, #12
   16868:	str	r0, [fp, #-8]
   1686c:	str	r1, [fp, #-12]
   16870:	ldr	r3, [fp, #-8]
   16874:	cmp	r3, #0
   16878:	beq	16884 <__assert_fail@plt+0x5938>
   1687c:	ldr	r3, [fp, #-8]
   16880:	b	16888 <__assert_fail@plt+0x593c>
   16884:	ldr	r3, [pc, #20]	; 168a0 <__assert_fail@plt+0x5954>
   16888:	ldr	r2, [fp, #-12]
   1688c:	str	r2, [r3]
   16890:	nop			; (mov r0, r0)
   16894:	add	sp, fp, #0
   16898:	pop	{fp}		; (ldr fp, [sp], #4)
   1689c:	bx	lr
   168a0:	andeq	sp, r2, r0, lsl #3
   168a4:	push	{fp}		; (str fp, [sp, #-4]!)
   168a8:	add	fp, sp, #0
   168ac:	sub	sp, sp, #36	; 0x24
   168b0:	str	r0, [fp, #-24]	; 0xffffffe8
   168b4:	mov	r3, r1
   168b8:	str	r2, [fp, #-32]	; 0xffffffe0
   168bc:	strb	r3, [fp, #-25]	; 0xffffffe7
   168c0:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   168c4:	strb	r3, [fp, #-5]
   168c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   168cc:	cmp	r3, #0
   168d0:	beq	168dc <__assert_fail@plt+0x5990>
   168d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   168d8:	b	168e0 <__assert_fail@plt+0x5994>
   168dc:	ldr	r3, [pc, #124]	; 16960 <__assert_fail@plt+0x5a14>
   168e0:	add	r2, r3, #8
   168e4:	ldrb	r3, [fp, #-5]
   168e8:	lsr	r3, r3, #5
   168ec:	uxtb	r3, r3
   168f0:	lsl	r3, r3, #2
   168f4:	add	r3, r2, r3
   168f8:	str	r3, [fp, #-12]
   168fc:	ldrb	r3, [fp, #-5]
   16900:	and	r3, r3, #31
   16904:	str	r3, [fp, #-16]
   16908:	ldr	r3, [fp, #-12]
   1690c:	ldr	r2, [r3]
   16910:	ldr	r3, [fp, #-16]
   16914:	lsr	r3, r2, r3
   16918:	and	r3, r3, #1
   1691c:	str	r3, [fp, #-20]	; 0xffffffec
   16920:	ldr	r3, [fp, #-12]
   16924:	ldr	r3, [r3]
   16928:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1692c:	and	r1, r2, #1
   16930:	ldr	r2, [fp, #-20]	; 0xffffffec
   16934:	eor	r1, r1, r2
   16938:	ldr	r2, [fp, #-16]
   1693c:	lsl	r2, r1, r2
   16940:	eor	r2, r2, r3
   16944:	ldr	r3, [fp, #-12]
   16948:	str	r2, [r3]
   1694c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16950:	mov	r0, r3
   16954:	add	sp, fp, #0
   16958:	pop	{fp}		; (ldr fp, [sp], #4)
   1695c:	bx	lr
   16960:	andeq	sp, r2, r0, lsl #3
   16964:	push	{fp}		; (str fp, [sp, #-4]!)
   16968:	add	fp, sp, #0
   1696c:	sub	sp, sp, #20
   16970:	str	r0, [fp, #-16]
   16974:	str	r1, [fp, #-20]	; 0xffffffec
   16978:	ldr	r3, [fp, #-16]
   1697c:	cmp	r3, #0
   16980:	bne	1698c <__assert_fail@plt+0x5a40>
   16984:	ldr	r3, [pc, #44]	; 169b8 <__assert_fail@plt+0x5a6c>
   16988:	str	r3, [fp, #-16]
   1698c:	ldr	r3, [fp, #-16]
   16990:	ldr	r3, [r3, #4]
   16994:	str	r3, [fp, #-8]
   16998:	ldr	r3, [fp, #-16]
   1699c:	ldr	r2, [fp, #-20]	; 0xffffffec
   169a0:	str	r2, [r3, #4]
   169a4:	ldr	r3, [fp, #-8]
   169a8:	mov	r0, r3
   169ac:	add	sp, fp, #0
   169b0:	pop	{fp}		; (ldr fp, [sp], #4)
   169b4:	bx	lr
   169b8:	andeq	sp, r2, r0, lsl #3
   169bc:	push	{fp, lr}
   169c0:	add	fp, sp, #4
   169c4:	sub	sp, sp, #16
   169c8:	str	r0, [fp, #-8]
   169cc:	str	r1, [fp, #-12]
   169d0:	str	r2, [fp, #-16]
   169d4:	ldr	r3, [fp, #-8]
   169d8:	cmp	r3, #0
   169dc:	bne	169e8 <__assert_fail@plt+0x5a9c>
   169e0:	ldr	r3, [pc, #76]	; 16a34 <__assert_fail@plt+0x5ae8>
   169e4:	str	r3, [fp, #-8]
   169e8:	ldr	r3, [fp, #-8]
   169ec:	mov	r2, #10
   169f0:	str	r2, [r3]
   169f4:	ldr	r3, [fp, #-12]
   169f8:	cmp	r3, #0
   169fc:	beq	16a0c <__assert_fail@plt+0x5ac0>
   16a00:	ldr	r3, [fp, #-16]
   16a04:	cmp	r3, #0
   16a08:	bne	16a10 <__assert_fail@plt+0x5ac4>
   16a0c:	bl	10f34 <abort@plt>
   16a10:	ldr	r3, [fp, #-8]
   16a14:	ldr	r2, [fp, #-12]
   16a18:	str	r2, [r3, #40]	; 0x28
   16a1c:	ldr	r3, [fp, #-8]
   16a20:	ldr	r2, [fp, #-16]
   16a24:	str	r2, [r3, #44]	; 0x2c
   16a28:	nop			; (mov r0, r0)
   16a2c:	sub	sp, fp, #4
   16a30:	pop	{fp, pc}
   16a34:	andeq	sp, r2, r0, lsl #3
   16a38:	push	{fp, lr}
   16a3c:	add	fp, sp, #4
   16a40:	sub	sp, sp, #56	; 0x38
   16a44:	str	r0, [fp, #-56]	; 0xffffffc8
   16a48:	str	r1, [fp, #-60]	; 0xffffffc4
   16a4c:	sub	r3, fp, #52	; 0x34
   16a50:	mov	r2, #48	; 0x30
   16a54:	mov	r1, #0
   16a58:	mov	r0, r3
   16a5c:	bl	10e98 <memset@plt>
   16a60:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16a64:	cmp	r3, #10
   16a68:	bne	16a70 <__assert_fail@plt+0x5b24>
   16a6c:	bl	10f34 <abort@plt>
   16a70:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16a74:	str	r3, [fp, #-52]	; 0xffffffcc
   16a78:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16a7c:	mov	lr, r3
   16a80:	sub	ip, fp, #52	; 0x34
   16a84:	ldm	ip!, {r0, r1, r2, r3}
   16a88:	stmia	lr!, {r0, r1, r2, r3}
   16a8c:	ldm	ip!, {r0, r1, r2, r3}
   16a90:	stmia	lr!, {r0, r1, r2, r3}
   16a94:	ldm	ip, {r0, r1, r2, r3}
   16a98:	stm	lr, {r0, r1, r2, r3}
   16a9c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16aa0:	sub	sp, fp, #4
   16aa4:	pop	{fp, pc}
   16aa8:	push	{fp, lr}
   16aac:	add	fp, sp, #4
   16ab0:	sub	sp, sp, #16
   16ab4:	str	r0, [fp, #-16]
   16ab8:	str	r1, [fp, #-20]	; 0xffffffec
   16abc:	ldr	r0, [fp, #-16]
   16ac0:	bl	10e50 <gettext@plt>
   16ac4:	str	r0, [fp, #-8]
   16ac8:	ldr	r2, [fp, #-8]
   16acc:	ldr	r3, [fp, #-16]
   16ad0:	cmp	r2, r3
   16ad4:	beq	16ae0 <__assert_fail@plt+0x5b94>
   16ad8:	ldr	r3, [fp, #-8]
   16adc:	b	16b70 <__assert_fail@plt+0x5c24>
   16ae0:	bl	1af3c <__assert_fail@plt+0x9ff0>
   16ae4:	str	r0, [fp, #-12]
   16ae8:	ldr	r1, [pc, #140]	; 16b7c <__assert_fail@plt+0x5c30>
   16aec:	ldr	r0, [fp, #-12]
   16af0:	bl	1adcc <__assert_fail@plt+0x9e80>
   16af4:	mov	r3, r0
   16af8:	cmp	r3, #0
   16afc:	bne	16b20 <__assert_fail@plt+0x5bd4>
   16b00:	ldr	r3, [fp, #-16]
   16b04:	ldrb	r3, [r3]
   16b08:	cmp	r3, #96	; 0x60
   16b0c:	bne	16b18 <__assert_fail@plt+0x5bcc>
   16b10:	ldr	r3, [pc, #104]	; 16b80 <__assert_fail@plt+0x5c34>
   16b14:	b	16b70 <__assert_fail@plt+0x5c24>
   16b18:	ldr	r3, [pc, #100]	; 16b84 <__assert_fail@plt+0x5c38>
   16b1c:	b	16b70 <__assert_fail@plt+0x5c24>
   16b20:	ldr	r1, [pc, #96]	; 16b88 <__assert_fail@plt+0x5c3c>
   16b24:	ldr	r0, [fp, #-12]
   16b28:	bl	1adcc <__assert_fail@plt+0x9e80>
   16b2c:	mov	r3, r0
   16b30:	cmp	r3, #0
   16b34:	bne	16b58 <__assert_fail@plt+0x5c0c>
   16b38:	ldr	r3, [fp, #-16]
   16b3c:	ldrb	r3, [r3]
   16b40:	cmp	r3, #96	; 0x60
   16b44:	bne	16b50 <__assert_fail@plt+0x5c04>
   16b48:	ldr	r3, [pc, #60]	; 16b8c <__assert_fail@plt+0x5c40>
   16b4c:	b	16b70 <__assert_fail@plt+0x5c24>
   16b50:	ldr	r3, [pc, #56]	; 16b90 <__assert_fail@plt+0x5c44>
   16b54:	b	16b70 <__assert_fail@plt+0x5c24>
   16b58:	ldr	r3, [fp, #-20]	; 0xffffffec
   16b5c:	cmp	r3, #9
   16b60:	bne	16b6c <__assert_fail@plt+0x5c20>
   16b64:	ldr	r3, [pc, #40]	; 16b94 <__assert_fail@plt+0x5c48>
   16b68:	b	16b70 <__assert_fail@plt+0x5c24>
   16b6c:	ldr	r3, [pc, #36]	; 16b98 <__assert_fail@plt+0x5c4c>
   16b70:	mov	r0, r3
   16b74:	sub	sp, fp, #4
   16b78:	pop	{fp, pc}
   16b7c:	andeq	ip, r1, r4, asr r8
   16b80:	andeq	ip, r1, ip, asr r8
   16b84:	andeq	ip, r1, r0, ror #16
   16b88:	andeq	ip, r1, r4, ror #16
   16b8c:	andeq	ip, r1, ip, ror #16
   16b90:	andeq	ip, r1, r0, ror r8
   16b94:	andeq	ip, r1, r4, ror r8
   16b98:	andeq	ip, r1, r8, ror r8
   16b9c:	push	{r4, fp, lr}
   16ba0:	add	fp, sp, #8
   16ba4:	sub	sp, sp, #116	; 0x74
   16ba8:	str	r0, [fp, #-88]	; 0xffffffa8
   16bac:	str	r1, [fp, #-92]	; 0xffffffa4
   16bb0:	str	r2, [fp, #-96]	; 0xffffffa0
   16bb4:	str	r3, [fp, #-100]	; 0xffffff9c
   16bb8:	mov	r3, #0
   16bbc:	str	r3, [fp, #-20]	; 0xffffffec
   16bc0:	mov	r3, #0
   16bc4:	str	r3, [fp, #-24]	; 0xffffffe8
   16bc8:	mov	r3, #0
   16bcc:	str	r3, [fp, #-28]	; 0xffffffe4
   16bd0:	mov	r3, #0
   16bd4:	str	r3, [fp, #-32]	; 0xffffffe0
   16bd8:	mov	r3, #0
   16bdc:	strb	r3, [fp, #-33]	; 0xffffffdf
   16be0:	bl	10dc0 <__ctype_get_mb_cur_max@plt>
   16be4:	mov	r3, r0
   16be8:	cmp	r3, #1
   16bec:	moveq	r3, #1
   16bf0:	movne	r3, #0
   16bf4:	strb	r3, [fp, #-57]	; 0xffffffc7
   16bf8:	ldr	r3, [fp, #8]
   16bfc:	and	r3, r3, #2
   16c00:	cmp	r3, #0
   16c04:	movne	r3, #1
   16c08:	moveq	r3, #0
   16c0c:	strb	r3, [fp, #-34]	; 0xffffffde
   16c10:	mov	r3, #0
   16c14:	strb	r3, [fp, #-35]	; 0xffffffdd
   16c18:	mov	r3, #0
   16c1c:	strb	r3, [fp, #-36]	; 0xffffffdc
   16c20:	mov	r3, #1
   16c24:	strb	r3, [fp, #-37]	; 0xffffffdb
   16c28:	ldr	r3, [fp, #4]
   16c2c:	cmp	r3, #10
   16c30:	ldrls	pc, [pc, r3, lsl #2]
   16c34:	b	16e3c <__assert_fail@plt+0x5ef0>
   16c38:	andeq	r6, r1, r0, lsr lr
   16c3c:	andeq	r6, r1, ip, lsr #27
   16c40:	ldrdeq	r6, [r1], -r0
   16c44:	andeq	r6, r1, r4, lsr #27
   16c48:			; <UNDEFINED> instruction: 0x00016db4
   16c4c:	andeq	r6, r1, r4, ror ip
   16c50:	andeq	r6, r1, r4, ror #24
   16c54:	ldrdeq	r6, [r1], -r4
   16c58:	andeq	r6, r1, r8, ror #25
   16c5c:	andeq	r6, r1, r8, ror #25
   16c60:	andeq	r6, r1, r8, ror #25
   16c64:	mov	r3, #5
   16c68:	str	r3, [fp, #4]
   16c6c:	mov	r3, #1
   16c70:	strb	r3, [fp, #-34]	; 0xffffffde
   16c74:	ldrb	r3, [fp, #-34]	; 0xffffffde
   16c78:	eor	r3, r3, #1
   16c7c:	uxtb	r3, r3
   16c80:	cmp	r3, #0
   16c84:	beq	16cb8 <__assert_fail@plt+0x5d6c>
   16c88:	ldr	r2, [fp, #-20]	; 0xffffffec
   16c8c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16c90:	cmp	r2, r3
   16c94:	bcs	16cac <__assert_fail@plt+0x5d60>
   16c98:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16c9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ca0:	add	r3, r2, r3
   16ca4:	mov	r2, #34	; 0x22
   16ca8:	strb	r2, [r3]
   16cac:	ldr	r3, [fp, #-20]	; 0xffffffec
   16cb0:	add	r3, r3, #1
   16cb4:	str	r3, [fp, #-20]	; 0xffffffec
   16cb8:	mov	r3, #1
   16cbc:	strb	r3, [fp, #-33]	; 0xffffffdf
   16cc0:	ldr	r3, [pc, #3872]	; 17be8 <__assert_fail@plt+0x6c9c>
   16cc4:	str	r3, [fp, #-28]	; 0xffffffe4
   16cc8:	mov	r3, #1
   16ccc:	str	r3, [fp, #-32]	; 0xffffffe0
   16cd0:	b	16e40 <__assert_fail@plt+0x5ef4>
   16cd4:	mov	r3, #1
   16cd8:	strb	r3, [fp, #-33]	; 0xffffffdf
   16cdc:	mov	r3, #0
   16ce0:	strb	r3, [fp, #-34]	; 0xffffffde
   16ce4:	b	16e40 <__assert_fail@plt+0x5ef4>
   16ce8:	ldr	r3, [fp, #4]
   16cec:	cmp	r3, #10
   16cf0:	beq	16d14 <__assert_fail@plt+0x5dc8>
   16cf4:	ldr	r1, [fp, #4]
   16cf8:	ldr	r0, [pc, #3820]	; 17bec <__assert_fail@plt+0x6ca0>
   16cfc:	bl	16aa8 <__assert_fail@plt+0x5b5c>
   16d00:	str	r0, [fp, #16]
   16d04:	ldr	r1, [fp, #4]
   16d08:	ldr	r0, [pc, #3808]	; 17bf0 <__assert_fail@plt+0x6ca4>
   16d0c:	bl	16aa8 <__assert_fail@plt+0x5b5c>
   16d10:	str	r0, [fp, #20]
   16d14:	ldrb	r3, [fp, #-34]	; 0xffffffde
   16d18:	eor	r3, r3, #1
   16d1c:	uxtb	r3, r3
   16d20:	cmp	r3, #0
   16d24:	beq	16d84 <__assert_fail@plt+0x5e38>
   16d28:	ldr	r3, [fp, #16]
   16d2c:	str	r3, [fp, #-28]	; 0xffffffe4
   16d30:	b	16d74 <__assert_fail@plt+0x5e28>
   16d34:	ldr	r2, [fp, #-20]	; 0xffffffec
   16d38:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16d3c:	cmp	r2, r3
   16d40:	bcs	16d5c <__assert_fail@plt+0x5e10>
   16d44:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16d48:	ldr	r3, [fp, #-20]	; 0xffffffec
   16d4c:	add	r3, r2, r3
   16d50:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16d54:	ldrb	r2, [r2]
   16d58:	strb	r2, [r3]
   16d5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16d60:	add	r3, r3, #1
   16d64:	str	r3, [fp, #-20]	; 0xffffffec
   16d68:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16d6c:	add	r3, r3, #1
   16d70:	str	r3, [fp, #-28]	; 0xffffffe4
   16d74:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16d78:	ldrb	r3, [r3]
   16d7c:	cmp	r3, #0
   16d80:	bne	16d34 <__assert_fail@plt+0x5de8>
   16d84:	mov	r3, #1
   16d88:	strb	r3, [fp, #-33]	; 0xffffffdf
   16d8c:	ldr	r3, [fp, #20]
   16d90:	str	r3, [fp, #-28]	; 0xffffffe4
   16d94:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16d98:	bl	10e5c <strlen@plt>
   16d9c:	str	r0, [fp, #-32]	; 0xffffffe0
   16da0:	b	16e40 <__assert_fail@plt+0x5ef4>
   16da4:	mov	r3, #1
   16da8:	strb	r3, [fp, #-33]	; 0xffffffdf
   16dac:	mov	r3, #1
   16db0:	strb	r3, [fp, #-34]	; 0xffffffde
   16db4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   16db8:	eor	r3, r3, #1
   16dbc:	uxtb	r3, r3
   16dc0:	cmp	r3, #0
   16dc4:	beq	16dd0 <__assert_fail@plt+0x5e84>
   16dc8:	mov	r3, #1
   16dcc:	strb	r3, [fp, #-33]	; 0xffffffdf
   16dd0:	mov	r3, #2
   16dd4:	str	r3, [fp, #4]
   16dd8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   16ddc:	eor	r3, r3, #1
   16de0:	uxtb	r3, r3
   16de4:	cmp	r3, #0
   16de8:	beq	16e1c <__assert_fail@plt+0x5ed0>
   16dec:	ldr	r2, [fp, #-20]	; 0xffffffec
   16df0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16df4:	cmp	r2, r3
   16df8:	bcs	16e10 <__assert_fail@plt+0x5ec4>
   16dfc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16e00:	ldr	r3, [fp, #-20]	; 0xffffffec
   16e04:	add	r3, r2, r3
   16e08:	mov	r2, #39	; 0x27
   16e0c:	strb	r2, [r3]
   16e10:	ldr	r3, [fp, #-20]	; 0xffffffec
   16e14:	add	r3, r3, #1
   16e18:	str	r3, [fp, #-20]	; 0xffffffec
   16e1c:	ldr	r3, [pc, #3532]	; 17bf0 <__assert_fail@plt+0x6ca4>
   16e20:	str	r3, [fp, #-28]	; 0xffffffe4
   16e24:	mov	r3, #1
   16e28:	str	r3, [fp, #-32]	; 0xffffffe0
   16e2c:	b	16e40 <__assert_fail@plt+0x5ef4>
   16e30:	mov	r3, #0
   16e34:	strb	r3, [fp, #-34]	; 0xffffffde
   16e38:	b	16e40 <__assert_fail@plt+0x5ef4>
   16e3c:	bl	10f34 <abort@plt>
   16e40:	mov	r3, #0
   16e44:	str	r3, [fp, #-16]
   16e48:	b	17fd8 <__assert_fail@plt+0x708c>
   16e4c:	mov	r3, #0
   16e50:	strb	r3, [fp, #-40]	; 0xffffffd8
   16e54:	mov	r3, #0
   16e58:	strb	r3, [fp, #-41]	; 0xffffffd7
   16e5c:	mov	r3, #0
   16e60:	strb	r3, [fp, #-42]	; 0xffffffd6
   16e64:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   16e68:	cmp	r3, #0
   16e6c:	beq	16f08 <__assert_fail@plt+0x5fbc>
   16e70:	ldr	r3, [fp, #4]
   16e74:	cmp	r3, #2
   16e78:	beq	16f08 <__assert_fail@plt+0x5fbc>
   16e7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16e80:	cmp	r3, #0
   16e84:	beq	16f08 <__assert_fail@plt+0x5fbc>
   16e88:	ldr	r2, [fp, #-16]
   16e8c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16e90:	add	r4, r2, r3
   16e94:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16e98:	cmn	r3, #1
   16e9c:	bne	16ec0 <__assert_fail@plt+0x5f74>
   16ea0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16ea4:	cmp	r3, #1
   16ea8:	bls	16ec0 <__assert_fail@plt+0x5f74>
   16eac:	ldr	r0, [fp, #-96]	; 0xffffffa0
   16eb0:	bl	10e5c <strlen@plt>
   16eb4:	str	r0, [fp, #-100]	; 0xffffff9c
   16eb8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16ebc:	b	16ec4 <__assert_fail@plt+0x5f78>
   16ec0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16ec4:	cmp	r4, r3
   16ec8:	bhi	16f08 <__assert_fail@plt+0x5fbc>
   16ecc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   16ed0:	ldr	r3, [fp, #-16]
   16ed4:	add	r3, r2, r3
   16ed8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16edc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16ee0:	mov	r0, r3
   16ee4:	bl	10d6c <memcmp@plt>
   16ee8:	mov	r3, r0
   16eec:	cmp	r3, #0
   16ef0:	bne	16f08 <__assert_fail@plt+0x5fbc>
   16ef4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   16ef8:	cmp	r3, #0
   16efc:	bne	18194 <__assert_fail@plt+0x7248>
   16f00:	mov	r3, #1
   16f04:	strb	r3, [fp, #-40]	; 0xffffffd8
   16f08:	ldr	r2, [fp, #-96]	; 0xffffffa0
   16f0c:	ldr	r3, [fp, #-16]
   16f10:	add	r3, r2, r3
   16f14:	ldrb	r3, [r3]
   16f18:	strb	r3, [fp, #-38]	; 0xffffffda
   16f1c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   16f20:	cmp	r3, #126	; 0x7e
   16f24:	ldrls	pc, [pc, r3, lsl #2]
   16f28:	b	17754 <__assert_fail@plt+0x6808>
   16f2c:	andeq	r7, r1, r8, lsr #2
   16f30:	andeq	r7, r1, r4, asr r7
   16f34:	andeq	r7, r1, r4, asr r7
   16f38:	andeq	r7, r1, r4, asr r7
   16f3c:	andeq	r7, r1, r4, asr r7
   16f40:	andeq	r7, r1, r4, asr r7
   16f44:	andeq	r7, r1, r4, asr r7
   16f48:	andeq	r7, r1, r8, lsl r5
   16f4c:	andeq	r7, r1, r4, lsr #10
   16f50:	andeq	r7, r1, r4, asr r5
   16f54:	andeq	r7, r1, ip, lsr r5
   16f58:	andeq	r7, r1, r0, ror #10
   16f5c:	andeq	r7, r1, r0, lsr r5
   16f60:	andeq	r7, r1, r8, asr #10
   16f64:	andeq	r7, r1, r4, asr r7
   16f68:	andeq	r7, r1, r4, asr r7
   16f6c:	andeq	r7, r1, r4, asr r7
   16f70:	andeq	r7, r1, r4, asr r7
   16f74:	andeq	r7, r1, r4, asr r7
   16f78:	andeq	r7, r1, r4, asr r7
   16f7c:	andeq	r7, r1, r4, asr r7
   16f80:	andeq	r7, r1, r4, asr r7
   16f84:	andeq	r7, r1, r4, asr r7
   16f88:	andeq	r7, r1, r4, asr r7
   16f8c:	andeq	r7, r1, r4, asr r7
   16f90:	andeq	r7, r1, r4, asr r7
   16f94:	andeq	r7, r1, r4, asr r7
   16f98:	andeq	r7, r1, r4, asr r7
   16f9c:	andeq	r7, r1, r4, asr r7
   16fa0:	andeq	r7, r1, r4, asr r7
   16fa4:	andeq	r7, r1, r4, asr r7
   16fa8:	andeq	r7, r1, r4, asr r7
   16fac:	andeq	r7, r1, r8, lsr r6
   16fb0:	andeq	r7, r1, r0, asr #12
   16fb4:	andeq	r7, r1, r0, asr #12
   16fb8:	andeq	r7, r1, ip, lsr #12
   16fbc:	andeq	r7, r1, r0, asr #12
   16fc0:	andeq	r7, r1, r8, asr #14
   16fc4:	andeq	r7, r1, r0, asr #12
   16fc8:	andeq	r7, r1, ip, asr r6
   16fcc:	andeq	r7, r1, r0, asr #12
   16fd0:	andeq	r7, r1, r0, asr #12
   16fd4:	andeq	r7, r1, r0, asr #12
   16fd8:	andeq	r7, r1, r8, asr #14
   16fdc:	andeq	r7, r1, r8, asr #14
   16fe0:	andeq	r7, r1, r8, asr #14
   16fe4:	andeq	r7, r1, r8, asr #14
   16fe8:	andeq	r7, r1, r8, asr #14
   16fec:	andeq	r7, r1, r8, asr #14
   16ff0:	andeq	r7, r1, r8, asr #14
   16ff4:	andeq	r7, r1, r8, asr #14
   16ff8:	andeq	r7, r1, r8, asr #14
   16ffc:	andeq	r7, r1, r8, asr #14
   17000:	andeq	r7, r1, r8, asr #14
   17004:	andeq	r7, r1, r8, asr #14
   17008:	andeq	r7, r1, r8, asr #14
   1700c:	andeq	r7, r1, r8, asr #14
   17010:	andeq	r7, r1, r8, asr #14
   17014:	andeq	r7, r1, r8, asr #14
   17018:	andeq	r7, r1, r0, asr #12
   1701c:	andeq	r7, r1, r0, asr #12
   17020:	andeq	r7, r1, r0, asr #12
   17024:	andeq	r7, r1, r0, asr #12
   17028:	andeq	r7, r1, r8, lsl #6
   1702c:	andeq	r7, r1, r4, asr r7
   17030:	andeq	r7, r1, r8, asr #14
   17034:	andeq	r7, r1, r8, asr #14
   17038:	andeq	r7, r1, r8, asr #14
   1703c:	andeq	r7, r1, r8, asr #14
   17040:	andeq	r7, r1, r8, asr #14
   17044:	andeq	r7, r1, r8, asr #14
   17048:	andeq	r7, r1, r8, asr #14
   1704c:	andeq	r7, r1, r8, asr #14
   17050:	andeq	r7, r1, r8, asr #14
   17054:	andeq	r7, r1, r8, asr #14
   17058:	andeq	r7, r1, r8, asr #14
   1705c:	andeq	r7, r1, r8, asr #14
   17060:	andeq	r7, r1, r8, asr #14
   17064:	andeq	r7, r1, r8, asr #14
   17068:	andeq	r7, r1, r8, asr #14
   1706c:	andeq	r7, r1, r8, asr #14
   17070:	andeq	r7, r1, r8, asr #14
   17074:	andeq	r7, r1, r8, asr #14
   17078:	andeq	r7, r1, r8, asr #14
   1707c:	andeq	r7, r1, r8, asr #14
   17080:	andeq	r7, r1, r8, asr #14
   17084:	andeq	r7, r1, r8, asr #14
   17088:	andeq	r7, r1, r8, asr #14
   1708c:	andeq	r7, r1, r8, asr #14
   17090:	andeq	r7, r1, r8, asr #14
   17094:	andeq	r7, r1, r8, asr #14
   17098:	andeq	r7, r1, r0, asr #12
   1709c:	andeq	r7, r1, ip, ror #10
   170a0:	andeq	r7, r1, r8, asr #14
   170a4:	andeq	r7, r1, r0, asr #12
   170a8:	andeq	r7, r1, r8, asr #14
   170ac:	andeq	r7, r1, r0, asr #12
   170b0:	andeq	r7, r1, r8, asr #14
   170b4:	andeq	r7, r1, r8, asr #14
   170b8:	andeq	r7, r1, r8, asr #14
   170bc:	andeq	r7, r1, r8, asr #14
   170c0:	andeq	r7, r1, r8, asr #14
   170c4:	andeq	r7, r1, r8, asr #14
   170c8:	andeq	r7, r1, r8, asr #14
   170cc:	andeq	r7, r1, r8, asr #14
   170d0:	andeq	r7, r1, r8, asr #14
   170d4:	andeq	r7, r1, r8, asr #14
   170d8:	andeq	r7, r1, r8, asr #14
   170dc:	andeq	r7, r1, r8, asr #14
   170e0:	andeq	r7, r1, r8, asr #14
   170e4:	andeq	r7, r1, r8, asr #14
   170e8:	andeq	r7, r1, r8, asr #14
   170ec:	andeq	r7, r1, r8, asr #14
   170f0:	andeq	r7, r1, r8, asr #14
   170f4:	andeq	r7, r1, r8, asr #14
   170f8:	andeq	r7, r1, r8, asr #14
   170fc:	andeq	r7, r1, r8, asr #14
   17100:	andeq	r7, r1, r8, asr #14
   17104:	andeq	r7, r1, r8, asr #14
   17108:	andeq	r7, r1, r8, asr #14
   1710c:	andeq	r7, r1, r8, asr #14
   17110:	andeq	r7, r1, r8, asr #14
   17114:	andeq	r7, r1, r8, asr #14
   17118:	andeq	r7, r1, r4, ror #11
   1711c:	andeq	r7, r1, r0, asr #12
   17120:	andeq	r7, r1, r4, ror #11
   17124:	andeq	r7, r1, ip, lsr #12
   17128:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1712c:	cmp	r3, #0
   17130:	beq	172f4 <__assert_fail@plt+0x63a8>
   17134:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17138:	cmp	r3, #0
   1713c:	bne	1819c <__assert_fail@plt+0x7250>
   17140:	mov	r3, #1
   17144:	strb	r3, [fp, #-41]	; 0xffffffd7
   17148:	ldr	r3, [fp, #4]
   1714c:	cmp	r3, #2
   17150:	bne	17200 <__assert_fail@plt+0x62b4>
   17154:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   17158:	eor	r3, r3, #1
   1715c:	uxtb	r3, r3
   17160:	cmp	r3, #0
   17164:	beq	17200 <__assert_fail@plt+0x62b4>
   17168:	ldr	r2, [fp, #-20]	; 0xffffffec
   1716c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17170:	cmp	r2, r3
   17174:	bcs	1718c <__assert_fail@plt+0x6240>
   17178:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1717c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17180:	add	r3, r2, r3
   17184:	mov	r2, #39	; 0x27
   17188:	strb	r2, [r3]
   1718c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17190:	add	r3, r3, #1
   17194:	str	r3, [fp, #-20]	; 0xffffffec
   17198:	ldr	r2, [fp, #-20]	; 0xffffffec
   1719c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   171a0:	cmp	r2, r3
   171a4:	bcs	171bc <__assert_fail@plt+0x6270>
   171a8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   171ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   171b0:	add	r3, r2, r3
   171b4:	mov	r2, #36	; 0x24
   171b8:	strb	r2, [r3]
   171bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   171c0:	add	r3, r3, #1
   171c4:	str	r3, [fp, #-20]	; 0xffffffec
   171c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   171cc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   171d0:	cmp	r2, r3
   171d4:	bcs	171ec <__assert_fail@plt+0x62a0>
   171d8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   171dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   171e0:	add	r3, r2, r3
   171e4:	mov	r2, #39	; 0x27
   171e8:	strb	r2, [r3]
   171ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   171f0:	add	r3, r3, #1
   171f4:	str	r3, [fp, #-20]	; 0xffffffec
   171f8:	mov	r3, #1
   171fc:	strb	r3, [fp, #-35]	; 0xffffffdd
   17200:	ldr	r2, [fp, #-20]	; 0xffffffec
   17204:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17208:	cmp	r2, r3
   1720c:	bcs	17224 <__assert_fail@plt+0x62d8>
   17210:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17214:	ldr	r3, [fp, #-20]	; 0xffffffec
   17218:	add	r3, r2, r3
   1721c:	mov	r2, #92	; 0x5c
   17220:	strb	r2, [r3]
   17224:	ldr	r3, [fp, #-20]	; 0xffffffec
   17228:	add	r3, r3, #1
   1722c:	str	r3, [fp, #-20]	; 0xffffffec
   17230:	ldr	r3, [fp, #4]
   17234:	cmp	r3, #2
   17238:	beq	172e8 <__assert_fail@plt+0x639c>
   1723c:	ldr	r3, [fp, #-16]
   17240:	add	r2, r3, #1
   17244:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17248:	cmp	r2, r3
   1724c:	bcs	172e8 <__assert_fail@plt+0x639c>
   17250:	ldr	r3, [fp, #-16]
   17254:	add	r3, r3, #1
   17258:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1725c:	add	r3, r2, r3
   17260:	ldrb	r3, [r3]
   17264:	cmp	r3, #47	; 0x2f
   17268:	bls	172e8 <__assert_fail@plt+0x639c>
   1726c:	ldr	r3, [fp, #-16]
   17270:	add	r3, r3, #1
   17274:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17278:	add	r3, r2, r3
   1727c:	ldrb	r3, [r3]
   17280:	cmp	r3, #57	; 0x39
   17284:	bhi	172e8 <__assert_fail@plt+0x639c>
   17288:	ldr	r2, [fp, #-20]	; 0xffffffec
   1728c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17290:	cmp	r2, r3
   17294:	bcs	172ac <__assert_fail@plt+0x6360>
   17298:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1729c:	ldr	r3, [fp, #-20]	; 0xffffffec
   172a0:	add	r3, r2, r3
   172a4:	mov	r2, #48	; 0x30
   172a8:	strb	r2, [r3]
   172ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   172b0:	add	r3, r3, #1
   172b4:	str	r3, [fp, #-20]	; 0xffffffec
   172b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   172bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   172c0:	cmp	r2, r3
   172c4:	bcs	172dc <__assert_fail@plt+0x6390>
   172c8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   172cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   172d0:	add	r3, r2, r3
   172d4:	mov	r2, #48	; 0x30
   172d8:	strb	r2, [r3]
   172dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   172e0:	add	r3, r3, #1
   172e4:	str	r3, [fp, #-20]	; 0xffffffec
   172e8:	mov	r3, #48	; 0x30
   172ec:	strb	r3, [fp, #-38]	; 0xffffffda
   172f0:	b	17d30 <__assert_fail@plt+0x6de4>
   172f4:	ldr	r3, [fp, #8]
   172f8:	and	r3, r3, #1
   172fc:	cmp	r3, #0
   17300:	beq	17d30 <__assert_fail@plt+0x6de4>
   17304:	b	17fcc <__assert_fail@plt+0x7080>
   17308:	ldr	r3, [fp, #4]
   1730c:	cmp	r3, #2
   17310:	beq	17320 <__assert_fail@plt+0x63d4>
   17314:	cmp	r3, #5
   17318:	beq	17330 <__assert_fail@plt+0x63e4>
   1731c:	b	17514 <__assert_fail@plt+0x65c8>
   17320:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17324:	cmp	r3, #0
   17328:	beq	17508 <__assert_fail@plt+0x65bc>
   1732c:	b	181d8 <__assert_fail@plt+0x728c>
   17330:	ldr	r3, [fp, #8]
   17334:	and	r3, r3, #4
   17338:	cmp	r3, #0
   1733c:	beq	17510 <__assert_fail@plt+0x65c4>
   17340:	ldr	r3, [fp, #-16]
   17344:	add	r2, r3, #2
   17348:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1734c:	cmp	r2, r3
   17350:	bcs	17510 <__assert_fail@plt+0x65c4>
   17354:	ldr	r3, [fp, #-16]
   17358:	add	r3, r3, #1
   1735c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17360:	add	r3, r2, r3
   17364:	ldrb	r3, [r3]
   17368:	cmp	r3, #63	; 0x3f
   1736c:	bne	17510 <__assert_fail@plt+0x65c4>
   17370:	ldr	r3, [fp, #-16]
   17374:	add	r3, r3, #2
   17378:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1737c:	add	r3, r2, r3
   17380:	ldrb	r3, [r3]
   17384:	sub	r3, r3, #33	; 0x21
   17388:	cmp	r3, #29
   1738c:	ldrls	pc, [pc, r3, lsl #2]
   17390:	b	17500 <__assert_fail@plt+0x65b4>
   17394:	andeq	r7, r1, ip, lsl #8
   17398:	andeq	r7, r1, r0, lsl #10
   1739c:	andeq	r7, r1, r0, lsl #10
   173a0:	andeq	r7, r1, r0, lsl #10
   173a4:	andeq	r7, r1, r0, lsl #10
   173a8:	andeq	r7, r1, r0, lsl #10
   173ac:	andeq	r7, r1, ip, lsl #8
   173b0:	andeq	r7, r1, ip, lsl #8
   173b4:	andeq	r7, r1, ip, lsl #8
   173b8:	andeq	r7, r1, r0, lsl #10
   173bc:	andeq	r7, r1, r0, lsl #10
   173c0:	andeq	r7, r1, r0, lsl #10
   173c4:	andeq	r7, r1, ip, lsl #8
   173c8:	andeq	r7, r1, r0, lsl #10
   173cc:	andeq	r7, r1, ip, lsl #8
   173d0:	andeq	r7, r1, r0, lsl #10
   173d4:	andeq	r7, r1, r0, lsl #10
   173d8:	andeq	r7, r1, r0, lsl #10
   173dc:	andeq	r7, r1, r0, lsl #10
   173e0:	andeq	r7, r1, r0, lsl #10
   173e4:	andeq	r7, r1, r0, lsl #10
   173e8:	andeq	r7, r1, r0, lsl #10
   173ec:	andeq	r7, r1, r0, lsl #10
   173f0:	andeq	r7, r1, r0, lsl #10
   173f4:	andeq	r7, r1, r0, lsl #10
   173f8:	andeq	r7, r1, r0, lsl #10
   173fc:	andeq	r7, r1, r0, lsl #10
   17400:	andeq	r7, r1, ip, lsl #8
   17404:	andeq	r7, r1, ip, lsl #8
   17408:	andeq	r7, r1, ip, lsl #8
   1740c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17410:	cmp	r3, #0
   17414:	bne	181a4 <__assert_fail@plt+0x7258>
   17418:	ldr	r3, [fp, #-16]
   1741c:	add	r3, r3, #2
   17420:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17424:	add	r3, r2, r3
   17428:	ldrb	r3, [r3]
   1742c:	strb	r3, [fp, #-38]	; 0xffffffda
   17430:	ldr	r3, [fp, #-16]
   17434:	add	r3, r3, #2
   17438:	str	r3, [fp, #-16]
   1743c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17440:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17444:	cmp	r2, r3
   17448:	bcs	17460 <__assert_fail@plt+0x6514>
   1744c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17450:	ldr	r3, [fp, #-20]	; 0xffffffec
   17454:	add	r3, r2, r3
   17458:	mov	r2, #63	; 0x3f
   1745c:	strb	r2, [r3]
   17460:	ldr	r3, [fp, #-20]	; 0xffffffec
   17464:	add	r3, r3, #1
   17468:	str	r3, [fp, #-20]	; 0xffffffec
   1746c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17470:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17474:	cmp	r2, r3
   17478:	bcs	17490 <__assert_fail@plt+0x6544>
   1747c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17480:	ldr	r3, [fp, #-20]	; 0xffffffec
   17484:	add	r3, r2, r3
   17488:	mov	r2, #34	; 0x22
   1748c:	strb	r2, [r3]
   17490:	ldr	r3, [fp, #-20]	; 0xffffffec
   17494:	add	r3, r3, #1
   17498:	str	r3, [fp, #-20]	; 0xffffffec
   1749c:	ldr	r2, [fp, #-20]	; 0xffffffec
   174a0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   174a4:	cmp	r2, r3
   174a8:	bcs	174c0 <__assert_fail@plt+0x6574>
   174ac:	ldr	r2, [fp, #-88]	; 0xffffffa8
   174b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   174b4:	add	r3, r2, r3
   174b8:	mov	r2, #34	; 0x22
   174bc:	strb	r2, [r3]
   174c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   174c4:	add	r3, r3, #1
   174c8:	str	r3, [fp, #-20]	; 0xffffffec
   174cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   174d0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   174d4:	cmp	r2, r3
   174d8:	bcs	174f0 <__assert_fail@plt+0x65a4>
   174dc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   174e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   174e4:	add	r3, r2, r3
   174e8:	mov	r2, #63	; 0x3f
   174ec:	strb	r2, [r3]
   174f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   174f4:	add	r3, r3, #1
   174f8:	str	r3, [fp, #-20]	; 0xffffffec
   174fc:	b	17504 <__assert_fail@plt+0x65b8>
   17500:	nop			; (mov r0, r0)
   17504:	b	17510 <__assert_fail@plt+0x65c4>
   17508:	nop			; (mov r0, r0)
   1750c:	b	17d5c <__assert_fail@plt+0x6e10>
   17510:	nop			; (mov r0, r0)
   17514:	b	17d5c <__assert_fail@plt+0x6e10>
   17518:	mov	r3, #97	; 0x61
   1751c:	strb	r3, [fp, #-39]	; 0xffffffd9
   17520:	b	175cc <__assert_fail@plt+0x6680>
   17524:	mov	r3, #98	; 0x62
   17528:	strb	r3, [fp, #-39]	; 0xffffffd9
   1752c:	b	175cc <__assert_fail@plt+0x6680>
   17530:	mov	r3, #102	; 0x66
   17534:	strb	r3, [fp, #-39]	; 0xffffffd9
   17538:	b	175cc <__assert_fail@plt+0x6680>
   1753c:	mov	r3, #110	; 0x6e
   17540:	strb	r3, [fp, #-39]	; 0xffffffd9
   17544:	b	175b4 <__assert_fail@plt+0x6668>
   17548:	mov	r3, #114	; 0x72
   1754c:	strb	r3, [fp, #-39]	; 0xffffffd9
   17550:	b	175b4 <__assert_fail@plt+0x6668>
   17554:	mov	r3, #116	; 0x74
   17558:	strb	r3, [fp, #-39]	; 0xffffffd9
   1755c:	b	175b4 <__assert_fail@plt+0x6668>
   17560:	mov	r3, #118	; 0x76
   17564:	strb	r3, [fp, #-39]	; 0xffffffd9
   17568:	b	175cc <__assert_fail@plt+0x6680>
   1756c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   17570:	strb	r3, [fp, #-39]	; 0xffffffd9
   17574:	ldr	r3, [fp, #4]
   17578:	cmp	r3, #2
   1757c:	bne	17590 <__assert_fail@plt+0x6644>
   17580:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17584:	cmp	r3, #0
   17588:	beq	17ee4 <__assert_fail@plt+0x6f98>
   1758c:	b	181d8 <__assert_fail@plt+0x728c>
   17590:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   17594:	cmp	r3, #0
   17598:	beq	175b4 <__assert_fail@plt+0x6668>
   1759c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   175a0:	cmp	r3, #0
   175a4:	beq	175b4 <__assert_fail@plt+0x6668>
   175a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   175ac:	cmp	r3, #0
   175b0:	bne	17eec <__assert_fail@plt+0x6fa0>
   175b4:	ldr	r3, [fp, #4]
   175b8:	cmp	r3, #2
   175bc:	bne	175cc <__assert_fail@plt+0x6680>
   175c0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   175c4:	cmp	r3, #0
   175c8:	bne	181ac <__assert_fail@plt+0x7260>
   175cc:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   175d0:	cmp	r3, #0
   175d4:	beq	17d38 <__assert_fail@plt+0x6dec>
   175d8:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   175dc:	strb	r3, [fp, #-38]	; 0xffffffda
   175e0:	b	17de4 <__assert_fail@plt+0x6e98>
   175e4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   175e8:	cmn	r3, #1
   175ec:	bne	17610 <__assert_fail@plt+0x66c4>
   175f0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   175f4:	add	r3, r3, #1
   175f8:	ldrb	r3, [r3]
   175fc:	cmp	r3, #0
   17600:	movne	r3, #1
   17604:	moveq	r3, #0
   17608:	uxtb	r3, r3
   1760c:	b	17624 <__assert_fail@plt+0x66d8>
   17610:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17614:	cmp	r3, #1
   17618:	movne	r3, #1
   1761c:	moveq	r3, #0
   17620:	uxtb	r3, r3
   17624:	cmp	r3, #0
   17628:	bne	17d40 <__assert_fail@plt+0x6df4>
   1762c:	ldr	r3, [fp, #-16]
   17630:	cmp	r3, #0
   17634:	bne	17d48 <__assert_fail@plt+0x6dfc>
   17638:	mov	r3, #1
   1763c:	strb	r3, [fp, #-42]	; 0xffffffd6
   17640:	ldr	r3, [fp, #4]
   17644:	cmp	r3, #2
   17648:	bne	17d50 <__assert_fail@plt+0x6e04>
   1764c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17650:	cmp	r3, #0
   17654:	beq	17d50 <__assert_fail@plt+0x6e04>
   17658:	b	181d8 <__assert_fail@plt+0x728c>
   1765c:	mov	r3, #1
   17660:	strb	r3, [fp, #-36]	; 0xffffffdc
   17664:	mov	r3, #1
   17668:	strb	r3, [fp, #-42]	; 0xffffffd6
   1766c:	ldr	r3, [fp, #4]
   17670:	cmp	r3, #2
   17674:	bne	17d58 <__assert_fail@plt+0x6e0c>
   17678:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1767c:	cmp	r3, #0
   17680:	bne	181b4 <__assert_fail@plt+0x7268>
   17684:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17688:	cmp	r3, #0
   1768c:	beq	176ac <__assert_fail@plt+0x6760>
   17690:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17694:	cmp	r3, #0
   17698:	bne	176ac <__assert_fail@plt+0x6760>
   1769c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   176a0:	str	r3, [fp, #-24]	; 0xffffffe8
   176a4:	mov	r3, #0
   176a8:	str	r3, [fp, #-92]	; 0xffffffa4
   176ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   176b0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   176b4:	cmp	r2, r3
   176b8:	bcs	176d0 <__assert_fail@plt+0x6784>
   176bc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   176c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   176c4:	add	r3, r2, r3
   176c8:	mov	r2, #39	; 0x27
   176cc:	strb	r2, [r3]
   176d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   176d4:	add	r3, r3, #1
   176d8:	str	r3, [fp, #-20]	; 0xffffffec
   176dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   176e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   176e4:	cmp	r2, r3
   176e8:	bcs	17700 <__assert_fail@plt+0x67b4>
   176ec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   176f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   176f4:	add	r3, r2, r3
   176f8:	mov	r2, #92	; 0x5c
   176fc:	strb	r2, [r3]
   17700:	ldr	r3, [fp, #-20]	; 0xffffffec
   17704:	add	r3, r3, #1
   17708:	str	r3, [fp, #-20]	; 0xffffffec
   1770c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17710:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17714:	cmp	r2, r3
   17718:	bcs	17730 <__assert_fail@plt+0x67e4>
   1771c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17720:	ldr	r3, [fp, #-20]	; 0xffffffec
   17724:	add	r3, r2, r3
   17728:	mov	r2, #39	; 0x27
   1772c:	strb	r2, [r3]
   17730:	ldr	r3, [fp, #-20]	; 0xffffffec
   17734:	add	r3, r3, #1
   17738:	str	r3, [fp, #-20]	; 0xffffffec
   1773c:	mov	r3, #0
   17740:	strb	r3, [fp, #-35]	; 0xffffffdd
   17744:	b	17d58 <__assert_fail@plt+0x6e0c>
   17748:	mov	r3, #1
   1774c:	strb	r3, [fp, #-42]	; 0xffffffd6
   17750:	b	17d5c <__assert_fail@plt+0x6e10>
   17754:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   17758:	cmp	r3, #0
   1775c:	beq	1779c <__assert_fail@plt+0x6850>
   17760:	mov	r3, #1
   17764:	str	r3, [fp, #-48]	; 0xffffffd0
   17768:	bl	10e38 <__ctype_b_loc@plt>
   1776c:	mov	r3, r0
   17770:	ldr	r2, [r3]
   17774:	ldrb	r3, [fp, #-38]	; 0xffffffda
   17778:	lsl	r3, r3, #1
   1777c:	add	r3, r2, r3
   17780:	ldrh	r3, [r3]
   17784:	and	r3, r3, #16384	; 0x4000
   17788:	cmp	r3, #0
   1778c:	movne	r3, #1
   17790:	moveq	r3, #0
   17794:	strb	r3, [fp, #-49]	; 0xffffffcf
   17798:	b	179e8 <__assert_fail@plt+0x6a9c>
   1779c:	sub	r3, fp, #76	; 0x4c
   177a0:	mov	r2, #8
   177a4:	mov	r1, #0
   177a8:	mov	r0, r3
   177ac:	bl	10e98 <memset@plt>
   177b0:	mov	r3, #0
   177b4:	str	r3, [fp, #-48]	; 0xffffffd0
   177b8:	mov	r3, #1
   177bc:	strb	r3, [fp, #-49]	; 0xffffffcf
   177c0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   177c4:	cmn	r3, #1
   177c8:	bne	177d8 <__assert_fail@plt+0x688c>
   177cc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   177d0:	bl	10e5c <strlen@plt>
   177d4:	str	r0, [fp, #-100]	; 0xffffff9c
   177d8:	ldr	r2, [fp, #-16]
   177dc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   177e0:	add	r3, r2, r3
   177e4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   177e8:	add	r1, r2, r3
   177ec:	ldr	r2, [fp, #-16]
   177f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   177f4:	add	r3, r2, r3
   177f8:	ldr	r2, [fp, #-100]	; 0xffffff9c
   177fc:	sub	r2, r2, r3
   17800:	sub	r3, fp, #76	; 0x4c
   17804:	sub	r0, fp, #80	; 0x50
   17808:	bl	1af98 <__assert_fail@plt+0xa04c>
   1780c:	str	r0, [fp, #-64]	; 0xffffffc0
   17810:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17814:	cmp	r3, #0
   17818:	beq	179dc <__assert_fail@plt+0x6a90>
   1781c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17820:	cmn	r3, #1
   17824:	bne	17834 <__assert_fail@plt+0x68e8>
   17828:	mov	r3, #0
   1782c:	strb	r3, [fp, #-49]	; 0xffffffcf
   17830:	b	179e8 <__assert_fail@plt+0x6a9c>
   17834:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17838:	cmn	r3, #2
   1783c:	bne	17894 <__assert_fail@plt+0x6948>
   17840:	mov	r3, #0
   17844:	strb	r3, [fp, #-49]	; 0xffffffcf
   17848:	b	17858 <__assert_fail@plt+0x690c>
   1784c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17850:	add	r3, r3, #1
   17854:	str	r3, [fp, #-48]	; 0xffffffd0
   17858:	ldr	r2, [fp, #-16]
   1785c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17860:	add	r2, r2, r3
   17864:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17868:	cmp	r2, r3
   1786c:	bcs	179e4 <__assert_fail@plt+0x6a98>
   17870:	ldr	r2, [fp, #-16]
   17874:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17878:	add	r3, r2, r3
   1787c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17880:	add	r3, r2, r3
   17884:	ldrb	r3, [r3]
   17888:	cmp	r3, #0
   1788c:	bne	1784c <__assert_fail@plt+0x6900>
   17890:	b	179e4 <__assert_fail@plt+0x6a98>
   17894:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17898:	cmp	r3, #0
   1789c:	beq	17990 <__assert_fail@plt+0x6a44>
   178a0:	ldr	r3, [fp, #4]
   178a4:	cmp	r3, #2
   178a8:	bne	17990 <__assert_fail@plt+0x6a44>
   178ac:	mov	r3, #1
   178b0:	str	r3, [fp, #-56]	; 0xffffffc8
   178b4:	b	17980 <__assert_fail@plt+0x6a34>
   178b8:	ldr	r2, [fp, #-16]
   178bc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   178c0:	add	r2, r2, r3
   178c4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   178c8:	add	r3, r2, r3
   178cc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   178d0:	add	r3, r2, r3
   178d4:	ldrb	r3, [r3]
   178d8:	sub	r3, r3, #91	; 0x5b
   178dc:	cmp	r3, #33	; 0x21
   178e0:	ldrls	pc, [pc, r3, lsl #2]
   178e4:	b	17970 <__assert_fail@plt+0x6a24>
   178e8:			; <UNDEFINED> instruction: 0x000181bc
   178ec:			; <UNDEFINED> instruction: 0x000181bc
   178f0:	andeq	r7, r1, r0, ror r9
   178f4:			; <UNDEFINED> instruction: 0x000181bc
   178f8:	andeq	r7, r1, r0, ror r9
   178fc:			; <UNDEFINED> instruction: 0x000181bc
   17900:	andeq	r7, r1, r0, ror r9
   17904:	andeq	r7, r1, r0, ror r9
   17908:	andeq	r7, r1, r0, ror r9
   1790c:	andeq	r7, r1, r0, ror r9
   17910:	andeq	r7, r1, r0, ror r9
   17914:	andeq	r7, r1, r0, ror r9
   17918:	andeq	r7, r1, r0, ror r9
   1791c:	andeq	r7, r1, r0, ror r9
   17920:	andeq	r7, r1, r0, ror r9
   17924:	andeq	r7, r1, r0, ror r9
   17928:	andeq	r7, r1, r0, ror r9
   1792c:	andeq	r7, r1, r0, ror r9
   17930:	andeq	r7, r1, r0, ror r9
   17934:	andeq	r7, r1, r0, ror r9
   17938:	andeq	r7, r1, r0, ror r9
   1793c:	andeq	r7, r1, r0, ror r9
   17940:	andeq	r7, r1, r0, ror r9
   17944:	andeq	r7, r1, r0, ror r9
   17948:	andeq	r7, r1, r0, ror r9
   1794c:	andeq	r7, r1, r0, ror r9
   17950:	andeq	r7, r1, r0, ror r9
   17954:	andeq	r7, r1, r0, ror r9
   17958:	andeq	r7, r1, r0, ror r9
   1795c:	andeq	r7, r1, r0, ror r9
   17960:	andeq	r7, r1, r0, ror r9
   17964:	andeq	r7, r1, r0, ror r9
   17968:	andeq	r7, r1, r0, ror r9
   1796c:			; <UNDEFINED> instruction: 0x000181bc
   17970:	nop			; (mov r0, r0)
   17974:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17978:	add	r3, r3, #1
   1797c:	str	r3, [fp, #-56]	; 0xffffffc8
   17980:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17984:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17988:	cmp	r2, r3
   1798c:	bcc	178b8 <__assert_fail@plt+0x696c>
   17990:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17994:	mov	r0, r3
   17998:	bl	10d9c <iswprint@plt>
   1799c:	mov	r3, r0
   179a0:	cmp	r3, #0
   179a4:	bne	179b0 <__assert_fail@plt+0x6a64>
   179a8:	mov	r3, #0
   179ac:	strb	r3, [fp, #-49]	; 0xffffffcf
   179b0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   179b4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   179b8:	add	r3, r2, r3
   179bc:	str	r3, [fp, #-48]	; 0xffffffd0
   179c0:	sub	r3, fp, #76	; 0x4c
   179c4:	mov	r0, r3
   179c8:	bl	10d54 <mbsinit@plt>
   179cc:	mov	r3, r0
   179d0:	cmp	r3, #0
   179d4:	beq	177d8 <__assert_fail@plt+0x688c>
   179d8:	b	179e8 <__assert_fail@plt+0x6a9c>
   179dc:	nop			; (mov r0, r0)
   179e0:	b	179e8 <__assert_fail@plt+0x6a9c>
   179e4:	nop			; (mov r0, r0)
   179e8:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   179ec:	strb	r3, [fp, #-42]	; 0xffffffd6
   179f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   179f4:	cmp	r3, #1
   179f8:	bhi	17a1c <__assert_fail@plt+0x6ad0>
   179fc:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   17a00:	cmp	r3, #0
   17a04:	beq	17d5c <__assert_fail@plt+0x6e10>
   17a08:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   17a0c:	eor	r3, r3, #1
   17a10:	uxtb	r3, r3
   17a14:	cmp	r3, #0
   17a18:	beq	17d5c <__assert_fail@plt+0x6e10>
   17a1c:	ldr	r2, [fp, #-16]
   17a20:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17a24:	add	r3, r2, r3
   17a28:	str	r3, [fp, #-68]	; 0xffffffbc
   17a2c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   17a30:	cmp	r3, #0
   17a34:	beq	17bf4 <__assert_fail@plt+0x6ca8>
   17a38:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   17a3c:	eor	r3, r3, #1
   17a40:	uxtb	r3, r3
   17a44:	cmp	r3, #0
   17a48:	beq	17bf4 <__assert_fail@plt+0x6ca8>
   17a4c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17a50:	cmp	r3, #0
   17a54:	bne	181c4 <__assert_fail@plt+0x7278>
   17a58:	mov	r3, #1
   17a5c:	strb	r3, [fp, #-41]	; 0xffffffd7
   17a60:	ldr	r3, [fp, #4]
   17a64:	cmp	r3, #2
   17a68:	bne	17b18 <__assert_fail@plt+0x6bcc>
   17a6c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   17a70:	eor	r3, r3, #1
   17a74:	uxtb	r3, r3
   17a78:	cmp	r3, #0
   17a7c:	beq	17b18 <__assert_fail@plt+0x6bcc>
   17a80:	ldr	r2, [fp, #-20]	; 0xffffffec
   17a84:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17a88:	cmp	r2, r3
   17a8c:	bcs	17aa4 <__assert_fail@plt+0x6b58>
   17a90:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17a94:	ldr	r3, [fp, #-20]	; 0xffffffec
   17a98:	add	r3, r2, r3
   17a9c:	mov	r2, #39	; 0x27
   17aa0:	strb	r2, [r3]
   17aa4:	ldr	r3, [fp, #-20]	; 0xffffffec
   17aa8:	add	r3, r3, #1
   17aac:	str	r3, [fp, #-20]	; 0xffffffec
   17ab0:	ldr	r2, [fp, #-20]	; 0xffffffec
   17ab4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17ab8:	cmp	r2, r3
   17abc:	bcs	17ad4 <__assert_fail@plt+0x6b88>
   17ac0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17ac4:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ac8:	add	r3, r2, r3
   17acc:	mov	r2, #36	; 0x24
   17ad0:	strb	r2, [r3]
   17ad4:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ad8:	add	r3, r3, #1
   17adc:	str	r3, [fp, #-20]	; 0xffffffec
   17ae0:	ldr	r2, [fp, #-20]	; 0xffffffec
   17ae4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17ae8:	cmp	r2, r3
   17aec:	bcs	17b04 <__assert_fail@plt+0x6bb8>
   17af0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17af4:	ldr	r3, [fp, #-20]	; 0xffffffec
   17af8:	add	r3, r2, r3
   17afc:	mov	r2, #39	; 0x27
   17b00:	strb	r2, [r3]
   17b04:	ldr	r3, [fp, #-20]	; 0xffffffec
   17b08:	add	r3, r3, #1
   17b0c:	str	r3, [fp, #-20]	; 0xffffffec
   17b10:	mov	r3, #1
   17b14:	strb	r3, [fp, #-35]	; 0xffffffdd
   17b18:	ldr	r2, [fp, #-20]	; 0xffffffec
   17b1c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17b20:	cmp	r2, r3
   17b24:	bcs	17b3c <__assert_fail@plt+0x6bf0>
   17b28:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17b2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17b30:	add	r3, r2, r3
   17b34:	mov	r2, #92	; 0x5c
   17b38:	strb	r2, [r3]
   17b3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17b40:	add	r3, r3, #1
   17b44:	str	r3, [fp, #-20]	; 0xffffffec
   17b48:	ldr	r2, [fp, #-20]	; 0xffffffec
   17b4c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17b50:	cmp	r2, r3
   17b54:	bcs	17b7c <__assert_fail@plt+0x6c30>
   17b58:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17b5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17b60:	add	r3, r2, r3
   17b64:	ldrb	r2, [fp, #-38]	; 0xffffffda
   17b68:	lsr	r2, r2, #6
   17b6c:	uxtb	r2, r2
   17b70:	add	r2, r2, #48	; 0x30
   17b74:	uxtb	r2, r2
   17b78:	strb	r2, [r3]
   17b7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17b80:	add	r3, r3, #1
   17b84:	str	r3, [fp, #-20]	; 0xffffffec
   17b88:	ldr	r2, [fp, #-20]	; 0xffffffec
   17b8c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17b90:	cmp	r2, r3
   17b94:	bcs	17bc4 <__assert_fail@plt+0x6c78>
   17b98:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17b9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ba0:	add	r3, r2, r3
   17ba4:	ldrb	r2, [fp, #-38]	; 0xffffffda
   17ba8:	lsr	r2, r2, #3
   17bac:	uxtb	r2, r2
   17bb0:	and	r2, r2, #7
   17bb4:	uxtb	r2, r2
   17bb8:	add	r2, r2, #48	; 0x30
   17bbc:	uxtb	r2, r2
   17bc0:	strb	r2, [r3]
   17bc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   17bc8:	add	r3, r3, #1
   17bcc:	str	r3, [fp, #-20]	; 0xffffffec
   17bd0:	ldrb	r3, [fp, #-38]	; 0xffffffda
   17bd4:	and	r3, r3, #7
   17bd8:	uxtb	r3, r3
   17bdc:	add	r3, r3, #48	; 0x30
   17be0:	strb	r3, [fp, #-38]	; 0xffffffda
   17be4:	b	17c38 <__assert_fail@plt+0x6cec>
   17be8:	andeq	ip, r1, r4, ror r8
   17bec:	andeq	ip, r1, ip, ror r8
   17bf0:	andeq	ip, r1, r8, ror r8
   17bf4:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   17bf8:	cmp	r3, #0
   17bfc:	beq	17c38 <__assert_fail@plt+0x6cec>
   17c00:	ldr	r2, [fp, #-20]	; 0xffffffec
   17c04:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17c08:	cmp	r2, r3
   17c0c:	bcs	17c24 <__assert_fail@plt+0x6cd8>
   17c10:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17c14:	ldr	r3, [fp, #-20]	; 0xffffffec
   17c18:	add	r3, r2, r3
   17c1c:	mov	r2, #92	; 0x5c
   17c20:	strb	r2, [r3]
   17c24:	ldr	r3, [fp, #-20]	; 0xffffffec
   17c28:	add	r3, r3, #1
   17c2c:	str	r3, [fp, #-20]	; 0xffffffec
   17c30:	mov	r3, #0
   17c34:	strb	r3, [fp, #-40]	; 0xffffffd8
   17c38:	ldr	r3, [fp, #-16]
   17c3c:	add	r2, r3, #1
   17c40:	ldr	r3, [fp, #-68]	; 0xffffffbc
   17c44:	cmp	r2, r3
   17c48:	bcs	17d28 <__assert_fail@plt+0x6ddc>
   17c4c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   17c50:	cmp	r3, #0
   17c54:	beq	17cd4 <__assert_fail@plt+0x6d88>
   17c58:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   17c5c:	eor	r3, r3, #1
   17c60:	uxtb	r3, r3
   17c64:	cmp	r3, #0
   17c68:	beq	17cd4 <__assert_fail@plt+0x6d88>
   17c6c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17c70:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17c74:	cmp	r2, r3
   17c78:	bcs	17c90 <__assert_fail@plt+0x6d44>
   17c7c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17c80:	ldr	r3, [fp, #-20]	; 0xffffffec
   17c84:	add	r3, r2, r3
   17c88:	mov	r2, #39	; 0x27
   17c8c:	strb	r2, [r3]
   17c90:	ldr	r3, [fp, #-20]	; 0xffffffec
   17c94:	add	r3, r3, #1
   17c98:	str	r3, [fp, #-20]	; 0xffffffec
   17c9c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17ca0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17ca4:	cmp	r2, r3
   17ca8:	bcs	17cc0 <__assert_fail@plt+0x6d74>
   17cac:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17cb0:	ldr	r3, [fp, #-20]	; 0xffffffec
   17cb4:	add	r3, r2, r3
   17cb8:	mov	r2, #39	; 0x27
   17cbc:	strb	r2, [r3]
   17cc0:	ldr	r3, [fp, #-20]	; 0xffffffec
   17cc4:	add	r3, r3, #1
   17cc8:	str	r3, [fp, #-20]	; 0xffffffec
   17ccc:	mov	r3, #0
   17cd0:	strb	r3, [fp, #-35]	; 0xffffffdd
   17cd4:	ldr	r2, [fp, #-20]	; 0xffffffec
   17cd8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17cdc:	cmp	r2, r3
   17ce0:	bcs	17cf8 <__assert_fail@plt+0x6dac>
   17ce4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17ce8:	ldr	r3, [fp, #-20]	; 0xffffffec
   17cec:	add	r3, r2, r3
   17cf0:	ldrb	r2, [fp, #-38]	; 0xffffffda
   17cf4:	strb	r2, [r3]
   17cf8:	ldr	r3, [fp, #-20]	; 0xffffffec
   17cfc:	add	r3, r3, #1
   17d00:	str	r3, [fp, #-20]	; 0xffffffec
   17d04:	ldr	r3, [fp, #-16]
   17d08:	add	r3, r3, #1
   17d0c:	str	r3, [fp, #-16]
   17d10:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17d14:	ldr	r3, [fp, #-16]
   17d18:	add	r3, r2, r3
   17d1c:	ldrb	r3, [r3]
   17d20:	strb	r3, [fp, #-38]	; 0xffffffda
   17d24:	b	17a2c <__assert_fail@plt+0x6ae0>
   17d28:	nop			; (mov r0, r0)
   17d2c:	b	17ef8 <__assert_fail@plt+0x6fac>
   17d30:	nop			; (mov r0, r0)
   17d34:	b	17d5c <__assert_fail@plt+0x6e10>
   17d38:	nop			; (mov r0, r0)
   17d3c:	b	17d5c <__assert_fail@plt+0x6e10>
   17d40:	nop			; (mov r0, r0)
   17d44:	b	17d5c <__assert_fail@plt+0x6e10>
   17d48:	nop			; (mov r0, r0)
   17d4c:	b	17d5c <__assert_fail@plt+0x6e10>
   17d50:	nop			; (mov r0, r0)
   17d54:	b	17d5c <__assert_fail@plt+0x6e10>
   17d58:	nop			; (mov r0, r0)
   17d5c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   17d60:	eor	r3, r3, #1
   17d64:	uxtb	r3, r3
   17d68:	cmp	r3, #0
   17d6c:	bne	17d7c <__assert_fail@plt+0x6e30>
   17d70:	ldr	r3, [fp, #4]
   17d74:	cmp	r3, #2
   17d78:	bne	17d90 <__assert_fail@plt+0x6e44>
   17d7c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17d80:	eor	r3, r3, #1
   17d84:	uxtb	r3, r3
   17d88:	cmp	r3, #0
   17d8c:	bne	17dd0 <__assert_fail@plt+0x6e84>
   17d90:	ldr	r3, [fp, #12]
   17d94:	cmp	r3, #0
   17d98:	beq	17dd0 <__assert_fail@plt+0x6e84>
   17d9c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   17da0:	lsr	r3, r3, #5
   17da4:	uxtb	r3, r3
   17da8:	lsl	r3, r3, #2
   17dac:	ldr	r2, [fp, #12]
   17db0:	add	r3, r2, r3
   17db4:	ldr	r2, [r3]
   17db8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   17dbc:	and	r3, r3, #31
   17dc0:	lsr	r3, r2, r3
   17dc4:	and	r3, r3, #1
   17dc8:	cmp	r3, #0
   17dcc:	bne	17de4 <__assert_fail@plt+0x6e98>
   17dd0:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   17dd4:	eor	r3, r3, #1
   17dd8:	uxtb	r3, r3
   17ddc:	cmp	r3, #0
   17de0:	bne	17ef4 <__assert_fail@plt+0x6fa8>
   17de4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17de8:	cmp	r3, #0
   17dec:	bne	181cc <__assert_fail@plt+0x7280>
   17df0:	mov	r3, #1
   17df4:	strb	r3, [fp, #-41]	; 0xffffffd7
   17df8:	ldr	r3, [fp, #4]
   17dfc:	cmp	r3, #2
   17e00:	bne	17eb0 <__assert_fail@plt+0x6f64>
   17e04:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   17e08:	eor	r3, r3, #1
   17e0c:	uxtb	r3, r3
   17e10:	cmp	r3, #0
   17e14:	beq	17eb0 <__assert_fail@plt+0x6f64>
   17e18:	ldr	r2, [fp, #-20]	; 0xffffffec
   17e1c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17e20:	cmp	r2, r3
   17e24:	bcs	17e3c <__assert_fail@plt+0x6ef0>
   17e28:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17e2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e30:	add	r3, r2, r3
   17e34:	mov	r2, #39	; 0x27
   17e38:	strb	r2, [r3]
   17e3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e40:	add	r3, r3, #1
   17e44:	str	r3, [fp, #-20]	; 0xffffffec
   17e48:	ldr	r2, [fp, #-20]	; 0xffffffec
   17e4c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17e50:	cmp	r2, r3
   17e54:	bcs	17e6c <__assert_fail@plt+0x6f20>
   17e58:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17e5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e60:	add	r3, r2, r3
   17e64:	mov	r2, #36	; 0x24
   17e68:	strb	r2, [r3]
   17e6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e70:	add	r3, r3, #1
   17e74:	str	r3, [fp, #-20]	; 0xffffffec
   17e78:	ldr	r2, [fp, #-20]	; 0xffffffec
   17e7c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17e80:	cmp	r2, r3
   17e84:	bcs	17e9c <__assert_fail@plt+0x6f50>
   17e88:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17e8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e90:	add	r3, r2, r3
   17e94:	mov	r2, #39	; 0x27
   17e98:	strb	r2, [r3]
   17e9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ea0:	add	r3, r3, #1
   17ea4:	str	r3, [fp, #-20]	; 0xffffffec
   17ea8:	mov	r3, #1
   17eac:	strb	r3, [fp, #-35]	; 0xffffffdd
   17eb0:	ldr	r2, [fp, #-20]	; 0xffffffec
   17eb4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17eb8:	cmp	r2, r3
   17ebc:	bcs	17ed4 <__assert_fail@plt+0x6f88>
   17ec0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17ec4:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ec8:	add	r3, r2, r3
   17ecc:	mov	r2, #92	; 0x5c
   17ed0:	strb	r2, [r3]
   17ed4:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ed8:	add	r3, r3, #1
   17edc:	str	r3, [fp, #-20]	; 0xffffffec
   17ee0:	b	17ef8 <__assert_fail@plt+0x6fac>
   17ee4:	nop			; (mov r0, r0)
   17ee8:	b	17ef8 <__assert_fail@plt+0x6fac>
   17eec:	nop			; (mov r0, r0)
   17ef0:	b	17ef8 <__assert_fail@plt+0x6fac>
   17ef4:	nop			; (mov r0, r0)
   17ef8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   17efc:	cmp	r3, #0
   17f00:	beq	17f80 <__assert_fail@plt+0x7034>
   17f04:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   17f08:	eor	r3, r3, #1
   17f0c:	uxtb	r3, r3
   17f10:	cmp	r3, #0
   17f14:	beq	17f80 <__assert_fail@plt+0x7034>
   17f18:	ldr	r2, [fp, #-20]	; 0xffffffec
   17f1c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17f20:	cmp	r2, r3
   17f24:	bcs	17f3c <__assert_fail@plt+0x6ff0>
   17f28:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17f2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17f30:	add	r3, r2, r3
   17f34:	mov	r2, #39	; 0x27
   17f38:	strb	r2, [r3]
   17f3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17f40:	add	r3, r3, #1
   17f44:	str	r3, [fp, #-20]	; 0xffffffec
   17f48:	ldr	r2, [fp, #-20]	; 0xffffffec
   17f4c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17f50:	cmp	r2, r3
   17f54:	bcs	17f6c <__assert_fail@plt+0x7020>
   17f58:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17f5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17f60:	add	r3, r2, r3
   17f64:	mov	r2, #39	; 0x27
   17f68:	strb	r2, [r3]
   17f6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17f70:	add	r3, r3, #1
   17f74:	str	r3, [fp, #-20]	; 0xffffffec
   17f78:	mov	r3, #0
   17f7c:	strb	r3, [fp, #-35]	; 0xffffffdd
   17f80:	ldr	r2, [fp, #-20]	; 0xffffffec
   17f84:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17f88:	cmp	r2, r3
   17f8c:	bcs	17fa4 <__assert_fail@plt+0x7058>
   17f90:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17f94:	ldr	r3, [fp, #-20]	; 0xffffffec
   17f98:	add	r3, r2, r3
   17f9c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   17fa0:	strb	r2, [r3]
   17fa4:	ldr	r3, [fp, #-20]	; 0xffffffec
   17fa8:	add	r3, r3, #1
   17fac:	str	r3, [fp, #-20]	; 0xffffffec
   17fb0:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   17fb4:	eor	r3, r3, #1
   17fb8:	uxtb	r3, r3
   17fbc:	cmp	r3, #0
   17fc0:	beq	17fcc <__assert_fail@plt+0x7080>
   17fc4:	mov	r3, #0
   17fc8:	strb	r3, [fp, #-37]	; 0xffffffdb
   17fcc:	ldr	r3, [fp, #-16]
   17fd0:	add	r3, r3, #1
   17fd4:	str	r3, [fp, #-16]
   17fd8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17fdc:	cmn	r3, #1
   17fe0:	bne	18008 <__assert_fail@plt+0x70bc>
   17fe4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17fe8:	ldr	r3, [fp, #-16]
   17fec:	add	r3, r2, r3
   17ff0:	ldrb	r3, [r3]
   17ff4:	cmp	r3, #0
   17ff8:	movne	r3, #1
   17ffc:	moveq	r3, #0
   18000:	uxtb	r3, r3
   18004:	b	18020 <__assert_fail@plt+0x70d4>
   18008:	ldr	r2, [fp, #-16]
   1800c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18010:	cmp	r2, r3
   18014:	movne	r3, #1
   18018:	moveq	r3, #0
   1801c:	uxtb	r3, r3
   18020:	cmp	r3, #0
   18024:	bne	16e4c <__assert_fail@plt+0x5f00>
   18028:	ldr	r3, [fp, #-20]	; 0xffffffec
   1802c:	cmp	r3, #0
   18030:	bne	1804c <__assert_fail@plt+0x7100>
   18034:	ldr	r3, [fp, #4]
   18038:	cmp	r3, #2
   1803c:	bne	1804c <__assert_fail@plt+0x7100>
   18040:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18044:	cmp	r3, #0
   18048:	bne	181d4 <__assert_fail@plt+0x7288>
   1804c:	ldr	r3, [fp, #4]
   18050:	cmp	r3, #2
   18054:	bne	180f4 <__assert_fail@plt+0x71a8>
   18058:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1805c:	eor	r3, r3, #1
   18060:	uxtb	r3, r3
   18064:	cmp	r3, #0
   18068:	beq	180f4 <__assert_fail@plt+0x71a8>
   1806c:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   18070:	cmp	r3, #0
   18074:	beq	180f4 <__assert_fail@plt+0x71a8>
   18078:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   1807c:	cmp	r3, #0
   18080:	beq	180c8 <__assert_fail@plt+0x717c>
   18084:	ldr	r3, [fp, #20]
   18088:	str	r3, [sp, #16]
   1808c:	ldr	r3, [fp, #16]
   18090:	str	r3, [sp, #12]
   18094:	ldr	r3, [fp, #12]
   18098:	str	r3, [sp, #8]
   1809c:	ldr	r3, [fp, #8]
   180a0:	str	r3, [sp, #4]
   180a4:	mov	r3, #5
   180a8:	str	r3, [sp]
   180ac:	ldr	r3, [fp, #-100]	; 0xffffff9c
   180b0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   180b4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   180b8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   180bc:	bl	16b9c <__assert_fail@plt+0x5c50>
   180c0:	mov	r3, r0
   180c4:	b	1823c <__assert_fail@plt+0x72f0>
   180c8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   180cc:	cmp	r3, #0
   180d0:	bne	180f4 <__assert_fail@plt+0x71a8>
   180d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   180d8:	cmp	r3, #0
   180dc:	beq	180f4 <__assert_fail@plt+0x71a8>
   180e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   180e4:	str	r3, [fp, #-92]	; 0xffffffa4
   180e8:	mov	r3, #0
   180ec:	str	r3, [fp, #-20]	; 0xffffffec
   180f0:	b	16c28 <__assert_fail@plt+0x5cdc>
   180f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   180f8:	cmp	r3, #0
   180fc:	beq	18168 <__assert_fail@plt+0x721c>
   18100:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18104:	eor	r3, r3, #1
   18108:	uxtb	r3, r3
   1810c:	cmp	r3, #0
   18110:	beq	18168 <__assert_fail@plt+0x721c>
   18114:	b	18158 <__assert_fail@plt+0x720c>
   18118:	ldr	r2, [fp, #-20]	; 0xffffffec
   1811c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18120:	cmp	r2, r3
   18124:	bcs	18140 <__assert_fail@plt+0x71f4>
   18128:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1812c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18130:	add	r3, r2, r3
   18134:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18138:	ldrb	r2, [r2]
   1813c:	strb	r2, [r3]
   18140:	ldr	r3, [fp, #-20]	; 0xffffffec
   18144:	add	r3, r3, #1
   18148:	str	r3, [fp, #-20]	; 0xffffffec
   1814c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18150:	add	r3, r3, #1
   18154:	str	r3, [fp, #-28]	; 0xffffffe4
   18158:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1815c:	ldrb	r3, [r3]
   18160:	cmp	r3, #0
   18164:	bne	18118 <__assert_fail@plt+0x71cc>
   18168:	ldr	r2, [fp, #-20]	; 0xffffffec
   1816c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18170:	cmp	r2, r3
   18174:	bcs	1818c <__assert_fail@plt+0x7240>
   18178:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1817c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18180:	add	r3, r2, r3
   18184:	mov	r2, #0
   18188:	strb	r2, [r3]
   1818c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18190:	b	1823c <__assert_fail@plt+0x72f0>
   18194:	nop			; (mov r0, r0)
   18198:	b	181d8 <__assert_fail@plt+0x728c>
   1819c:	nop			; (mov r0, r0)
   181a0:	b	181d8 <__assert_fail@plt+0x728c>
   181a4:	nop			; (mov r0, r0)
   181a8:	b	181d8 <__assert_fail@plt+0x728c>
   181ac:	nop			; (mov r0, r0)
   181b0:	b	181d8 <__assert_fail@plt+0x728c>
   181b4:	nop			; (mov r0, r0)
   181b8:	b	181d8 <__assert_fail@plt+0x728c>
   181bc:	nop			; (mov r0, r0)
   181c0:	b	181d8 <__assert_fail@plt+0x728c>
   181c4:	nop			; (mov r0, r0)
   181c8:	b	181d8 <__assert_fail@plt+0x728c>
   181cc:	nop			; (mov r0, r0)
   181d0:	b	181d8 <__assert_fail@plt+0x728c>
   181d4:	nop			; (mov r0, r0)
   181d8:	ldr	r3, [fp, #4]
   181dc:	cmp	r3, #2
   181e0:	bne	181f8 <__assert_fail@plt+0x72ac>
   181e4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   181e8:	cmp	r3, #0
   181ec:	beq	181f8 <__assert_fail@plt+0x72ac>
   181f0:	mov	r3, #4
   181f4:	str	r3, [fp, #4]
   181f8:	ldr	r3, [fp, #8]
   181fc:	bic	r3, r3, #2
   18200:	ldr	r2, [fp, #20]
   18204:	str	r2, [sp, #16]
   18208:	ldr	r2, [fp, #16]
   1820c:	str	r2, [sp, #12]
   18210:	mov	r2, #0
   18214:	str	r2, [sp, #8]
   18218:	str	r3, [sp, #4]
   1821c:	ldr	r3, [fp, #4]
   18220:	str	r3, [sp]
   18224:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18228:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1822c:	ldr	r1, [fp, #-92]	; 0xffffffa4
   18230:	ldr	r0, [fp, #-88]	; 0xffffffa8
   18234:	bl	16b9c <__assert_fail@plt+0x5c50>
   18238:	mov	r3, r0
   1823c:	mov	r0, r3
   18240:	sub	sp, fp, #8
   18244:	pop	{r4, fp, pc}
   18248:	push	{fp, lr}
   1824c:	add	fp, sp, #4
   18250:	sub	sp, sp, #56	; 0x38
   18254:	str	r0, [fp, #-24]	; 0xffffffe8
   18258:	str	r1, [fp, #-28]	; 0xffffffe4
   1825c:	str	r2, [fp, #-32]	; 0xffffffe0
   18260:	str	r3, [fp, #-36]	; 0xffffffdc
   18264:	ldr	r3, [fp, #4]
   18268:	cmp	r3, #0
   1826c:	beq	18278 <__assert_fail@plt+0x732c>
   18270:	ldr	r3, [fp, #4]
   18274:	b	1827c <__assert_fail@plt+0x7330>
   18278:	ldr	r3, [pc, #132]	; 18304 <__assert_fail@plt+0x73b8>
   1827c:	str	r3, [fp, #-8]
   18280:	bl	10e80 <__errno_location@plt>
   18284:	mov	r3, r0
   18288:	ldr	r3, [r3]
   1828c:	str	r3, [fp, #-12]
   18290:	ldr	r3, [fp, #-8]
   18294:	ldr	r3, [r3]
   18298:	ldr	r2, [fp, #-8]
   1829c:	ldr	r2, [r2, #4]
   182a0:	ldr	r1, [fp, #-8]
   182a4:	add	r1, r1, #8
   182a8:	ldr	r0, [fp, #-8]
   182ac:	ldr	r0, [r0, #40]	; 0x28
   182b0:	ldr	ip, [fp, #-8]
   182b4:	ldr	ip, [ip, #44]	; 0x2c
   182b8:	str	ip, [sp, #16]
   182bc:	str	r0, [sp, #12]
   182c0:	str	r1, [sp, #8]
   182c4:	str	r2, [sp, #4]
   182c8:	str	r3, [sp]
   182cc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   182d0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   182d4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   182d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   182dc:	bl	16b9c <__assert_fail@plt+0x5c50>
   182e0:	str	r0, [fp, #-16]
   182e4:	bl	10e80 <__errno_location@plt>
   182e8:	mov	r2, r0
   182ec:	ldr	r3, [fp, #-12]
   182f0:	str	r3, [r2]
   182f4:	ldr	r3, [fp, #-16]
   182f8:	mov	r0, r3
   182fc:	sub	sp, fp, #4
   18300:	pop	{fp, pc}
   18304:	andeq	sp, r2, r0, lsl #3
   18308:	push	{fp, lr}
   1830c:	add	fp, sp, #4
   18310:	sub	sp, sp, #16
   18314:	str	r0, [fp, #-8]
   18318:	str	r1, [fp, #-12]
   1831c:	str	r2, [fp, #-16]
   18320:	ldr	r3, [fp, #-16]
   18324:	mov	r2, #0
   18328:	ldr	r1, [fp, #-12]
   1832c:	ldr	r0, [fp, #-8]
   18330:	bl	18344 <__assert_fail@plt+0x73f8>
   18334:	mov	r3, r0
   18338:	mov	r0, r3
   1833c:	sub	sp, fp, #4
   18340:	pop	{fp, pc}
   18344:	push	{fp, lr}
   18348:	add	fp, sp, #4
   1834c:	sub	sp, sp, #64	; 0x40
   18350:	str	r0, [fp, #-32]	; 0xffffffe0
   18354:	str	r1, [fp, #-36]	; 0xffffffdc
   18358:	str	r2, [fp, #-40]	; 0xffffffd8
   1835c:	str	r3, [fp, #-44]	; 0xffffffd4
   18360:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18364:	cmp	r3, #0
   18368:	beq	18374 <__assert_fail@plt+0x7428>
   1836c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18370:	b	18378 <__assert_fail@plt+0x742c>
   18374:	ldr	r3, [pc, #292]	; 184a0 <__assert_fail@plt+0x7554>
   18378:	str	r3, [fp, #-8]
   1837c:	bl	10e80 <__errno_location@plt>
   18380:	mov	r3, r0
   18384:	ldr	r3, [r3]
   18388:	str	r3, [fp, #-12]
   1838c:	ldr	r3, [fp, #-8]
   18390:	ldr	r3, [r3, #4]
   18394:	ldr	r2, [fp, #-40]	; 0xffffffd8
   18398:	cmp	r2, #0
   1839c:	moveq	r2, #1
   183a0:	movne	r2, #0
   183a4:	uxtb	r2, r2
   183a8:	orr	r3, r3, r2
   183ac:	str	r3, [fp, #-16]
   183b0:	ldr	r3, [fp, #-8]
   183b4:	ldr	r3, [r3]
   183b8:	ldr	r2, [fp, #-8]
   183bc:	add	r2, r2, #8
   183c0:	ldr	r1, [fp, #-8]
   183c4:	ldr	r1, [r1, #40]	; 0x28
   183c8:	ldr	r0, [fp, #-8]
   183cc:	ldr	r0, [r0, #44]	; 0x2c
   183d0:	str	r0, [sp, #16]
   183d4:	str	r1, [sp, #12]
   183d8:	str	r2, [sp, #8]
   183dc:	ldr	r2, [fp, #-16]
   183e0:	str	r2, [sp, #4]
   183e4:	str	r3, [sp]
   183e8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   183ec:	ldr	r2, [fp, #-32]	; 0xffffffe0
   183f0:	mov	r1, #0
   183f4:	mov	r0, #0
   183f8:	bl	16b9c <__assert_fail@plt+0x5c50>
   183fc:	mov	r3, r0
   18400:	add	r3, r3, #1
   18404:	str	r3, [fp, #-20]	; 0xffffffec
   18408:	ldr	r0, [fp, #-20]	; 0xffffffec
   1840c:	bl	196f0 <__assert_fail@plt+0x87a4>
   18410:	mov	r3, r0
   18414:	str	r3, [fp, #-24]	; 0xffffffe8
   18418:	ldr	r3, [fp, #-8]
   1841c:	ldr	r3, [r3]
   18420:	ldr	r2, [fp, #-8]
   18424:	add	r2, r2, #8
   18428:	ldr	r1, [fp, #-8]
   1842c:	ldr	r1, [r1, #40]	; 0x28
   18430:	ldr	r0, [fp, #-8]
   18434:	ldr	r0, [r0, #44]	; 0x2c
   18438:	str	r0, [sp, #16]
   1843c:	str	r1, [sp, #12]
   18440:	str	r2, [sp, #8]
   18444:	ldr	r2, [fp, #-16]
   18448:	str	r2, [sp, #4]
   1844c:	str	r3, [sp]
   18450:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18454:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18458:	ldr	r1, [fp, #-20]	; 0xffffffec
   1845c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18460:	bl	16b9c <__assert_fail@plt+0x5c50>
   18464:	bl	10e80 <__errno_location@plt>
   18468:	mov	r2, r0
   1846c:	ldr	r3, [fp, #-12]
   18470:	str	r3, [r2]
   18474:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18478:	cmp	r3, #0
   1847c:	beq	18490 <__assert_fail@plt+0x7544>
   18480:	ldr	r3, [fp, #-20]	; 0xffffffec
   18484:	sub	r2, r3, #1
   18488:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1848c:	str	r2, [r3]
   18490:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18494:	mov	r0, r3
   18498:	sub	sp, fp, #4
   1849c:	pop	{fp, pc}
   184a0:	andeq	sp, r2, r0, lsl #3
   184a4:	push	{fp, lr}
   184a8:	add	fp, sp, #4
   184ac:	sub	sp, sp, #8
   184b0:	ldr	r3, [pc, #196]	; 1857c <__assert_fail@plt+0x7630>
   184b4:	ldr	r3, [r3]
   184b8:	str	r3, [fp, #-12]
   184bc:	mov	r3, #1
   184c0:	str	r3, [fp, #-8]
   184c4:	b	184f0 <__assert_fail@plt+0x75a4>
   184c8:	ldr	r3, [fp, #-8]
   184cc:	lsl	r3, r3, #3
   184d0:	ldr	r2, [fp, #-12]
   184d4:	add	r3, r2, r3
   184d8:	ldr	r3, [r3, #4]
   184dc:	mov	r0, r3
   184e0:	bl	163e4 <__assert_fail@plt+0x5498>
   184e4:	ldr	r3, [fp, #-8]
   184e8:	add	r3, r3, #1
   184ec:	str	r3, [fp, #-8]
   184f0:	ldr	r3, [pc, #136]	; 18580 <__assert_fail@plt+0x7634>
   184f4:	ldr	r3, [r3]
   184f8:	ldr	r2, [fp, #-8]
   184fc:	cmp	r2, r3
   18500:	blt	184c8 <__assert_fail@plt+0x757c>
   18504:	ldr	r3, [fp, #-12]
   18508:	ldr	r3, [r3, #4]
   1850c:	ldr	r2, [pc, #112]	; 18584 <__assert_fail@plt+0x7638>
   18510:	cmp	r3, r2
   18514:	beq	18540 <__assert_fail@plt+0x75f4>
   18518:	ldr	r3, [fp, #-12]
   1851c:	ldr	r3, [r3, #4]
   18520:	mov	r0, r3
   18524:	bl	163e4 <__assert_fail@plt+0x5498>
   18528:	ldr	r3, [pc, #88]	; 18588 <__assert_fail@plt+0x763c>
   1852c:	mov	r2, #256	; 0x100
   18530:	str	r2, [r3]
   18534:	ldr	r3, [pc, #76]	; 18588 <__assert_fail@plt+0x763c>
   18538:	ldr	r2, [pc, #68]	; 18584 <__assert_fail@plt+0x7638>
   1853c:	str	r2, [r3, #4]
   18540:	ldr	r3, [fp, #-12]
   18544:	ldr	r2, [pc, #60]	; 18588 <__assert_fail@plt+0x763c>
   18548:	cmp	r3, r2
   1854c:	beq	18564 <__assert_fail@plt+0x7618>
   18550:	ldr	r0, [fp, #-12]
   18554:	bl	163e4 <__assert_fail@plt+0x5498>
   18558:	ldr	r3, [pc, #28]	; 1857c <__assert_fail@plt+0x7630>
   1855c:	ldr	r2, [pc, #36]	; 18588 <__assert_fail@plt+0x763c>
   18560:	str	r2, [r3]
   18564:	ldr	r3, [pc, #20]	; 18580 <__assert_fail@plt+0x7634>
   18568:	mov	r2, #1
   1856c:	str	r2, [r3]
   18570:	nop			; (mov r0, r0)
   18574:	sub	sp, fp, #4
   18578:	pop	{fp, pc}
   1857c:	andeq	sp, r2, r4, lsl #2
   18580:	strdeq	sp, [r2], -r8
   18584:			; <UNDEFINED> instruction: 0x0002d1b0
   18588:	strdeq	sp, [r2], -ip
   1858c:	push	{r4, fp, lr}
   18590:	add	fp, sp, #8
   18594:	sub	sp, sp, #84	; 0x54
   18598:	str	r0, [fp, #-56]	; 0xffffffc8
   1859c:	str	r1, [fp, #-60]	; 0xffffffc4
   185a0:	str	r2, [fp, #-64]	; 0xffffffc0
   185a4:	str	r3, [fp, #-68]	; 0xffffffbc
   185a8:	bl	10e80 <__errno_location@plt>
   185ac:	mov	r3, r0
   185b0:	ldr	r3, [r3]
   185b4:	str	r3, [fp, #-24]	; 0xffffffe8
   185b8:	ldr	r3, [pc, #640]	; 18840 <__assert_fail@plt+0x78f4>
   185bc:	ldr	r3, [r3]
   185c0:	str	r3, [fp, #-16]
   185c4:	mvn	r3, #-2147483648	; 0x80000000
   185c8:	str	r3, [fp, #-28]	; 0xffffffe4
   185cc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   185d0:	cmp	r3, #0
   185d4:	blt	185e8 <__assert_fail@plt+0x769c>
   185d8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   185dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   185e0:	cmp	r2, r3
   185e4:	blt	185ec <__assert_fail@plt+0x76a0>
   185e8:	bl	10f34 <abort@plt>
   185ec:	ldr	r3, [pc, #592]	; 18844 <__assert_fail@plt+0x78f8>
   185f0:	ldr	r2, [r3]
   185f4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   185f8:	cmp	r2, r3
   185fc:	bgt	186d0 <__assert_fail@plt+0x7784>
   18600:	ldr	r3, [fp, #-16]
   18604:	ldr	r2, [pc, #572]	; 18848 <__assert_fail@plt+0x78fc>
   18608:	cmp	r3, r2
   1860c:	moveq	r3, #1
   18610:	movne	r3, #0
   18614:	strb	r3, [fp, #-29]	; 0xffffffe3
   18618:	ldr	r3, [pc, #548]	; 18844 <__assert_fail@plt+0x78f8>
   1861c:	ldr	r3, [r3]
   18620:	str	r3, [fp, #-48]	; 0xffffffd0
   18624:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   18628:	cmp	r3, #0
   1862c:	beq	18638 <__assert_fail@plt+0x76ec>
   18630:	mov	r0, #0
   18634:	b	1863c <__assert_fail@plt+0x76f0>
   18638:	ldr	r0, [fp, #-16]
   1863c:	ldr	r3, [pc, #512]	; 18844 <__assert_fail@plt+0x78f8>
   18640:	ldr	r3, [r3]
   18644:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18648:	sub	r3, r2, r3
   1864c:	add	r2, r3, #1
   18650:	sub	r1, fp, #48	; 0x30
   18654:	mov	r3, #8
   18658:	str	r3, [sp]
   1865c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18660:	bl	19a10 <__assert_fail@plt+0x8ac4>
   18664:	str	r0, [fp, #-16]
   18668:	ldr	r2, [pc, #464]	; 18840 <__assert_fail@plt+0x78f4>
   1866c:	ldr	r3, [fp, #-16]
   18670:	str	r3, [r2]
   18674:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   18678:	cmp	r3, #0
   1867c:	beq	18690 <__assert_fail@plt+0x7744>
   18680:	ldr	r3, [fp, #-16]
   18684:	ldr	r2, [pc, #444]	; 18848 <__assert_fail@plt+0x78fc>
   18688:	ldm	r2, {r0, r1}
   1868c:	stm	r3, {r0, r1}
   18690:	ldr	r3, [pc, #428]	; 18844 <__assert_fail@plt+0x78f8>
   18694:	ldr	r3, [r3]
   18698:	lsl	r3, r3, #3
   1869c:	ldr	r2, [fp, #-16]
   186a0:	add	r0, r2, r3
   186a4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   186a8:	ldr	r3, [pc, #404]	; 18844 <__assert_fail@plt+0x78f8>
   186ac:	ldr	r3, [r3]
   186b0:	sub	r3, r2, r3
   186b4:	lsl	r3, r3, #3
   186b8:	mov	r2, r3
   186bc:	mov	r1, #0
   186c0:	bl	10e98 <memset@plt>
   186c4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   186c8:	ldr	r2, [pc, #372]	; 18844 <__assert_fail@plt+0x78f8>
   186cc:	str	r3, [r2]
   186d0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   186d4:	lsl	r3, r3, #3
   186d8:	ldr	r2, [fp, #-16]
   186dc:	add	r3, r2, r3
   186e0:	ldr	r3, [r3]
   186e4:	str	r3, [fp, #-36]	; 0xffffffdc
   186e8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   186ec:	lsl	r3, r3, #3
   186f0:	ldr	r2, [fp, #-16]
   186f4:	add	r3, r2, r3
   186f8:	ldr	r3, [r3, #4]
   186fc:	str	r3, [fp, #-20]	; 0xffffffec
   18700:	ldr	r3, [fp, #-68]	; 0xffffffbc
   18704:	ldr	r3, [r3, #4]
   18708:	orr	r3, r3, #1
   1870c:	str	r3, [fp, #-40]	; 0xffffffd8
   18710:	ldr	r3, [fp, #-68]	; 0xffffffbc
   18714:	ldr	r3, [r3]
   18718:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1871c:	add	r2, r2, #8
   18720:	ldr	r1, [fp, #-68]	; 0xffffffbc
   18724:	ldr	r1, [r1, #40]	; 0x28
   18728:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1872c:	ldr	r0, [r0, #44]	; 0x2c
   18730:	str	r0, [sp, #16]
   18734:	str	r1, [sp, #12]
   18738:	str	r2, [sp, #8]
   1873c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   18740:	str	r2, [sp, #4]
   18744:	str	r3, [sp]
   18748:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1874c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   18750:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18754:	ldr	r0, [fp, #-20]	; 0xffffffec
   18758:	bl	16b9c <__assert_fail@plt+0x5c50>
   1875c:	str	r0, [fp, #-44]	; 0xffffffd4
   18760:	ldr	r2, [fp, #-36]	; 0xffffffdc
   18764:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18768:	cmp	r2, r3
   1876c:	bhi	18820 <__assert_fail@plt+0x78d4>
   18770:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18774:	lsl	r3, r3, #3
   18778:	ldr	r2, [fp, #-16]
   1877c:	add	r3, r2, r3
   18780:	ldr	r2, [fp, #-44]	; 0xffffffd4
   18784:	add	r2, r2, #1
   18788:	str	r2, [fp, #-36]	; 0xffffffdc
   1878c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   18790:	str	r2, [r3]
   18794:	ldr	r3, [fp, #-20]	; 0xffffffec
   18798:	ldr	r2, [pc, #172]	; 1884c <__assert_fail@plt+0x7900>
   1879c:	cmp	r3, r2
   187a0:	beq	187ac <__assert_fail@plt+0x7860>
   187a4:	ldr	r0, [fp, #-20]	; 0xffffffec
   187a8:	bl	163e4 <__assert_fail@plt+0x5498>
   187ac:	ldr	r3, [fp, #-56]	; 0xffffffc8
   187b0:	lsl	r3, r3, #3
   187b4:	ldr	r2, [fp, #-16]
   187b8:	add	r4, r2, r3
   187bc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   187c0:	bl	196f0 <__assert_fail@plt+0x87a4>
   187c4:	mov	r3, r0
   187c8:	str	r3, [fp, #-20]	; 0xffffffec
   187cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   187d0:	str	r3, [r4, #4]
   187d4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   187d8:	ldr	r3, [r3]
   187dc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   187e0:	add	r2, r2, #8
   187e4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   187e8:	ldr	r1, [r1, #40]	; 0x28
   187ec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   187f0:	ldr	r0, [r0, #44]	; 0x2c
   187f4:	str	r0, [sp, #16]
   187f8:	str	r1, [sp, #12]
   187fc:	str	r2, [sp, #8]
   18800:	ldr	r2, [fp, #-40]	; 0xffffffd8
   18804:	str	r2, [sp, #4]
   18808:	str	r3, [sp]
   1880c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   18810:	ldr	r2, [fp, #-60]	; 0xffffffc4
   18814:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18818:	ldr	r0, [fp, #-20]	; 0xffffffec
   1881c:	bl	16b9c <__assert_fail@plt+0x5c50>
   18820:	bl	10e80 <__errno_location@plt>
   18824:	mov	r2, r0
   18828:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1882c:	str	r3, [r2]
   18830:	ldr	r3, [fp, #-20]	; 0xffffffec
   18834:	mov	r0, r3
   18838:	sub	sp, fp, #8
   1883c:	pop	{r4, fp, pc}
   18840:	andeq	sp, r2, r4, lsl #2
   18844:	strdeq	sp, [r2], -r8
   18848:	strdeq	sp, [r2], -ip
   1884c:			; <UNDEFINED> instruction: 0x0002d1b0
   18850:	push	{fp, lr}
   18854:	add	fp, sp, #4
   18858:	sub	sp, sp, #8
   1885c:	str	r0, [fp, #-8]
   18860:	str	r1, [fp, #-12]
   18864:	ldr	r3, [pc, #28]	; 18888 <__assert_fail@plt+0x793c>
   18868:	mvn	r2, #0
   1886c:	ldr	r1, [fp, #-12]
   18870:	ldr	r0, [fp, #-8]
   18874:	bl	1858c <__assert_fail@plt+0x7640>
   18878:	mov	r3, r0
   1887c:	mov	r0, r3
   18880:	sub	sp, fp, #4
   18884:	pop	{fp, pc}
   18888:	andeq	sp, r2, r0, lsl #3
   1888c:	push	{fp, lr}
   18890:	add	fp, sp, #4
   18894:	sub	sp, sp, #16
   18898:	str	r0, [fp, #-8]
   1889c:	str	r1, [fp, #-12]
   188a0:	str	r2, [fp, #-16]
   188a4:	ldr	r3, [pc, #28]	; 188c8 <__assert_fail@plt+0x797c>
   188a8:	ldr	r2, [fp, #-16]
   188ac:	ldr	r1, [fp, #-12]
   188b0:	ldr	r0, [fp, #-8]
   188b4:	bl	1858c <__assert_fail@plt+0x7640>
   188b8:	mov	r3, r0
   188bc:	mov	r0, r3
   188c0:	sub	sp, fp, #4
   188c4:	pop	{fp, pc}
   188c8:	andeq	sp, r2, r0, lsl #3
   188cc:	push	{fp, lr}
   188d0:	add	fp, sp, #4
   188d4:	sub	sp, sp, #8
   188d8:	str	r0, [fp, #-8]
   188dc:	ldr	r1, [fp, #-8]
   188e0:	mov	r0, #0
   188e4:	bl	18850 <__assert_fail@plt+0x7904>
   188e8:	mov	r3, r0
   188ec:	mov	r0, r3
   188f0:	sub	sp, fp, #4
   188f4:	pop	{fp, pc}
   188f8:	push	{fp, lr}
   188fc:	add	fp, sp, #4
   18900:	sub	sp, sp, #8
   18904:	str	r0, [fp, #-8]
   18908:	str	r1, [fp, #-12]
   1890c:	ldr	r2, [fp, #-12]
   18910:	ldr	r1, [fp, #-8]
   18914:	mov	r0, #0
   18918:	bl	1888c <__assert_fail@plt+0x7940>
   1891c:	mov	r3, r0
   18920:	mov	r0, r3
   18924:	sub	sp, fp, #4
   18928:	pop	{fp, pc}
   1892c:	push	{fp, lr}
   18930:	add	fp, sp, #4
   18934:	sub	sp, sp, #64	; 0x40
   18938:	str	r0, [fp, #-56]	; 0xffffffc8
   1893c:	str	r1, [fp, #-60]	; 0xffffffc4
   18940:	str	r2, [fp, #-64]	; 0xffffffc0
   18944:	sub	r3, fp, #52	; 0x34
   18948:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1894c:	mov	r0, r3
   18950:	bl	16a38 <__assert_fail@plt+0x5aec>
   18954:	sub	r3, fp, #52	; 0x34
   18958:	mvn	r2, #0
   1895c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18960:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18964:	bl	1858c <__assert_fail@plt+0x7640>
   18968:	mov	r3, r0
   1896c:	mov	r0, r3
   18970:	sub	sp, fp, #4
   18974:	pop	{fp, pc}
   18978:	push	{fp, lr}
   1897c:	add	fp, sp, #4
   18980:	sub	sp, sp, #64	; 0x40
   18984:	str	r0, [fp, #-56]	; 0xffffffc8
   18988:	str	r1, [fp, #-60]	; 0xffffffc4
   1898c:	str	r2, [fp, #-64]	; 0xffffffc0
   18990:	str	r3, [fp, #-68]	; 0xffffffbc
   18994:	sub	r3, fp, #52	; 0x34
   18998:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1899c:	mov	r0, r3
   189a0:	bl	16a38 <__assert_fail@plt+0x5aec>
   189a4:	sub	r3, fp, #52	; 0x34
   189a8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   189ac:	ldr	r1, [fp, #-64]	; 0xffffffc0
   189b0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   189b4:	bl	1858c <__assert_fail@plt+0x7640>
   189b8:	mov	r3, r0
   189bc:	mov	r0, r3
   189c0:	sub	sp, fp, #4
   189c4:	pop	{fp, pc}
   189c8:	push	{fp, lr}
   189cc:	add	fp, sp, #4
   189d0:	sub	sp, sp, #8
   189d4:	str	r0, [fp, #-8]
   189d8:	str	r1, [fp, #-12]
   189dc:	ldr	r2, [fp, #-12]
   189e0:	ldr	r1, [fp, #-8]
   189e4:	mov	r0, #0
   189e8:	bl	1892c <__assert_fail@plt+0x79e0>
   189ec:	mov	r3, r0
   189f0:	mov	r0, r3
   189f4:	sub	sp, fp, #4
   189f8:	pop	{fp, pc}
   189fc:	push	{fp, lr}
   18a00:	add	fp, sp, #4
   18a04:	sub	sp, sp, #16
   18a08:	str	r0, [fp, #-8]
   18a0c:	str	r1, [fp, #-12]
   18a10:	str	r2, [fp, #-16]
   18a14:	ldr	r3, [fp, #-16]
   18a18:	ldr	r2, [fp, #-12]
   18a1c:	ldr	r1, [fp, #-8]
   18a20:	mov	r0, #0
   18a24:	bl	18978 <__assert_fail@plt+0x7a2c>
   18a28:	mov	r3, r0
   18a2c:	mov	r0, r3
   18a30:	sub	sp, fp, #4
   18a34:	pop	{fp, pc}
   18a38:	push	{fp, lr}
   18a3c:	add	fp, sp, #4
   18a40:	sub	sp, sp, #64	; 0x40
   18a44:	str	r0, [fp, #-56]	; 0xffffffc8
   18a48:	str	r1, [fp, #-60]	; 0xffffffc4
   18a4c:	mov	r3, r2
   18a50:	strb	r3, [fp, #-61]	; 0xffffffc3
   18a54:	ldr	r3, [pc, #84]	; 18ab0 <__assert_fail@plt+0x7b64>
   18a58:	sub	ip, fp, #52	; 0x34
   18a5c:	mov	lr, r3
   18a60:	ldm	lr!, {r0, r1, r2, r3}
   18a64:	stmia	ip!, {r0, r1, r2, r3}
   18a68:	ldm	lr!, {r0, r1, r2, r3}
   18a6c:	stmia	ip!, {r0, r1, r2, r3}
   18a70:	ldm	lr, {r0, r1, r2, r3}
   18a74:	stm	ip, {r0, r1, r2, r3}
   18a78:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   18a7c:	sub	r3, fp, #52	; 0x34
   18a80:	mov	r2, #1
   18a84:	mov	r0, r3
   18a88:	bl	168a4 <__assert_fail@plt+0x5958>
   18a8c:	sub	r3, fp, #52	; 0x34
   18a90:	ldr	r2, [fp, #-60]	; 0xffffffc4
   18a94:	ldr	r1, [fp, #-56]	; 0xffffffc8
   18a98:	mov	r0, #0
   18a9c:	bl	1858c <__assert_fail@plt+0x7640>
   18aa0:	mov	r3, r0
   18aa4:	mov	r0, r3
   18aa8:	sub	sp, fp, #4
   18aac:	pop	{fp, pc}
   18ab0:	andeq	sp, r2, r0, lsl #3
   18ab4:	push	{fp, lr}
   18ab8:	add	fp, sp, #4
   18abc:	sub	sp, sp, #8
   18ac0:	str	r0, [fp, #-8]
   18ac4:	mov	r3, r1
   18ac8:	strb	r3, [fp, #-9]
   18acc:	ldrb	r3, [fp, #-9]
   18ad0:	mov	r2, r3
   18ad4:	mvn	r1, #0
   18ad8:	ldr	r0, [fp, #-8]
   18adc:	bl	18a38 <__assert_fail@plt+0x7aec>
   18ae0:	mov	r3, r0
   18ae4:	mov	r0, r3
   18ae8:	sub	sp, fp, #4
   18aec:	pop	{fp, pc}
   18af0:	push	{fp, lr}
   18af4:	add	fp, sp, #4
   18af8:	sub	sp, sp, #8
   18afc:	str	r0, [fp, #-8]
   18b00:	mov	r1, #58	; 0x3a
   18b04:	ldr	r0, [fp, #-8]
   18b08:	bl	18ab4 <__assert_fail@plt+0x7b68>
   18b0c:	mov	r3, r0
   18b10:	mov	r0, r3
   18b14:	sub	sp, fp, #4
   18b18:	pop	{fp, pc}
   18b1c:	push	{fp, lr}
   18b20:	add	fp, sp, #4
   18b24:	sub	sp, sp, #8
   18b28:	str	r0, [fp, #-8]
   18b2c:	str	r1, [fp, #-12]
   18b30:	mov	r2, #58	; 0x3a
   18b34:	ldr	r1, [fp, #-12]
   18b38:	ldr	r0, [fp, #-8]
   18b3c:	bl	18a38 <__assert_fail@plt+0x7aec>
   18b40:	mov	r3, r0
   18b44:	mov	r0, r3
   18b48:	sub	sp, fp, #4
   18b4c:	pop	{fp, pc}
   18b50:	push	{fp, lr}
   18b54:	add	fp, sp, #4
   18b58:	sub	sp, sp, #112	; 0x70
   18b5c:	str	r0, [fp, #-56]	; 0xffffffc8
   18b60:	str	r1, [fp, #-60]	; 0xffffffc4
   18b64:	str	r2, [fp, #-64]	; 0xffffffc0
   18b68:	sub	r3, fp, #116	; 0x74
   18b6c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18b70:	mov	r0, r3
   18b74:	bl	16a38 <__assert_fail@plt+0x5aec>
   18b78:	sub	ip, fp, #52	; 0x34
   18b7c:	sub	lr, fp, #116	; 0x74
   18b80:	ldm	lr!, {r0, r1, r2, r3}
   18b84:	stmia	ip!, {r0, r1, r2, r3}
   18b88:	ldm	lr!, {r0, r1, r2, r3}
   18b8c:	stmia	ip!, {r0, r1, r2, r3}
   18b90:	ldm	lr, {r0, r1, r2, r3}
   18b94:	stm	ip, {r0, r1, r2, r3}
   18b98:	sub	r3, fp, #52	; 0x34
   18b9c:	mov	r2, #1
   18ba0:	mov	r1, #58	; 0x3a
   18ba4:	mov	r0, r3
   18ba8:	bl	168a4 <__assert_fail@plt+0x5958>
   18bac:	sub	r3, fp, #52	; 0x34
   18bb0:	mvn	r2, #0
   18bb4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18bb8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18bbc:	bl	1858c <__assert_fail@plt+0x7640>
   18bc0:	mov	r3, r0
   18bc4:	mov	r0, r3
   18bc8:	sub	sp, fp, #4
   18bcc:	pop	{fp, pc}
   18bd0:	push	{fp, lr}
   18bd4:	add	fp, sp, #4
   18bd8:	sub	sp, sp, #24
   18bdc:	str	r0, [fp, #-8]
   18be0:	str	r1, [fp, #-12]
   18be4:	str	r2, [fp, #-16]
   18be8:	str	r3, [fp, #-20]	; 0xffffffec
   18bec:	mvn	r3, #0
   18bf0:	str	r3, [sp]
   18bf4:	ldr	r3, [fp, #-20]	; 0xffffffec
   18bf8:	ldr	r2, [fp, #-16]
   18bfc:	ldr	r1, [fp, #-12]
   18c00:	ldr	r0, [fp, #-8]
   18c04:	bl	18c18 <__assert_fail@plt+0x7ccc>
   18c08:	mov	r3, r0
   18c0c:	mov	r0, r3
   18c10:	sub	sp, fp, #4
   18c14:	pop	{fp, pc}
   18c18:	push	{fp, lr}
   18c1c:	add	fp, sp, #4
   18c20:	sub	sp, sp, #64	; 0x40
   18c24:	str	r0, [fp, #-56]	; 0xffffffc8
   18c28:	str	r1, [fp, #-60]	; 0xffffffc4
   18c2c:	str	r2, [fp, #-64]	; 0xffffffc0
   18c30:	str	r3, [fp, #-68]	; 0xffffffbc
   18c34:	ldr	r3, [pc, #84]	; 18c90 <__assert_fail@plt+0x7d44>
   18c38:	sub	ip, fp, #52	; 0x34
   18c3c:	mov	lr, r3
   18c40:	ldm	lr!, {r0, r1, r2, r3}
   18c44:	stmia	ip!, {r0, r1, r2, r3}
   18c48:	ldm	lr!, {r0, r1, r2, r3}
   18c4c:	stmia	ip!, {r0, r1, r2, r3}
   18c50:	ldm	lr, {r0, r1, r2, r3}
   18c54:	stm	ip, {r0, r1, r2, r3}
   18c58:	sub	r3, fp, #52	; 0x34
   18c5c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   18c60:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18c64:	mov	r0, r3
   18c68:	bl	169bc <__assert_fail@plt+0x5a70>
   18c6c:	sub	r3, fp, #52	; 0x34
   18c70:	ldr	r2, [fp, #4]
   18c74:	ldr	r1, [fp, #-68]	; 0xffffffbc
   18c78:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18c7c:	bl	1858c <__assert_fail@plt+0x7640>
   18c80:	mov	r3, r0
   18c84:	mov	r0, r3
   18c88:	sub	sp, fp, #4
   18c8c:	pop	{fp, pc}
   18c90:	andeq	sp, r2, r0, lsl #3
   18c94:	push	{fp, lr}
   18c98:	add	fp, sp, #4
   18c9c:	sub	sp, sp, #16
   18ca0:	str	r0, [fp, #-8]
   18ca4:	str	r1, [fp, #-12]
   18ca8:	str	r2, [fp, #-16]
   18cac:	ldr	r3, [fp, #-16]
   18cb0:	ldr	r2, [fp, #-12]
   18cb4:	ldr	r1, [fp, #-8]
   18cb8:	mov	r0, #0
   18cbc:	bl	18bd0 <__assert_fail@plt+0x7c84>
   18cc0:	mov	r3, r0
   18cc4:	mov	r0, r3
   18cc8:	sub	sp, fp, #4
   18ccc:	pop	{fp, pc}
   18cd0:	push	{fp, lr}
   18cd4:	add	fp, sp, #4
   18cd8:	sub	sp, sp, #24
   18cdc:	str	r0, [fp, #-8]
   18ce0:	str	r1, [fp, #-12]
   18ce4:	str	r2, [fp, #-16]
   18ce8:	str	r3, [fp, #-20]	; 0xffffffec
   18cec:	ldr	r3, [fp, #-20]	; 0xffffffec
   18cf0:	str	r3, [sp]
   18cf4:	ldr	r3, [fp, #-16]
   18cf8:	ldr	r2, [fp, #-12]
   18cfc:	ldr	r1, [fp, #-8]
   18d00:	mov	r0, #0
   18d04:	bl	18c18 <__assert_fail@plt+0x7ccc>
   18d08:	mov	r3, r0
   18d0c:	mov	r0, r3
   18d10:	sub	sp, fp, #4
   18d14:	pop	{fp, pc}
   18d18:	push	{fp, lr}
   18d1c:	add	fp, sp, #4
   18d20:	sub	sp, sp, #16
   18d24:	str	r0, [fp, #-8]
   18d28:	str	r1, [fp, #-12]
   18d2c:	str	r2, [fp, #-16]
   18d30:	ldr	r3, [pc, #28]	; 18d54 <__assert_fail@plt+0x7e08>
   18d34:	ldr	r2, [fp, #-16]
   18d38:	ldr	r1, [fp, #-12]
   18d3c:	ldr	r0, [fp, #-8]
   18d40:	bl	1858c <__assert_fail@plt+0x7640>
   18d44:	mov	r3, r0
   18d48:	mov	r0, r3
   18d4c:	sub	sp, fp, #4
   18d50:	pop	{fp, pc}
   18d54:	andeq	sp, r2, r8, lsl #2
   18d58:	push	{fp, lr}
   18d5c:	add	fp, sp, #4
   18d60:	sub	sp, sp, #8
   18d64:	str	r0, [fp, #-8]
   18d68:	str	r1, [fp, #-12]
   18d6c:	ldr	r2, [fp, #-12]
   18d70:	ldr	r1, [fp, #-8]
   18d74:	mov	r0, #0
   18d78:	bl	18d18 <__assert_fail@plt+0x7dcc>
   18d7c:	mov	r3, r0
   18d80:	mov	r0, r3
   18d84:	sub	sp, fp, #4
   18d88:	pop	{fp, pc}
   18d8c:	push	{fp, lr}
   18d90:	add	fp, sp, #4
   18d94:	sub	sp, sp, #8
   18d98:	str	r0, [fp, #-8]
   18d9c:	str	r1, [fp, #-12]
   18da0:	mvn	r2, #0
   18da4:	ldr	r1, [fp, #-12]
   18da8:	ldr	r0, [fp, #-8]
   18dac:	bl	18d18 <__assert_fail@plt+0x7dcc>
   18db0:	mov	r3, r0
   18db4:	mov	r0, r3
   18db8:	sub	sp, fp, #4
   18dbc:	pop	{fp, pc}
   18dc0:	push	{fp, lr}
   18dc4:	add	fp, sp, #4
   18dc8:	sub	sp, sp, #8
   18dcc:	str	r0, [fp, #-8]
   18dd0:	ldr	r1, [fp, #-8]
   18dd4:	mov	r0, #0
   18dd8:	bl	18d8c <__assert_fail@plt+0x7e40>
   18ddc:	mov	r3, r0
   18de0:	mov	r0, r3
   18de4:	sub	sp, fp, #4
   18de8:	pop	{fp, pc}
   18dec:	push	{fp, lr}
   18df0:	add	fp, sp, #4
   18df4:	sub	sp, sp, #24
   18df8:	str	r0, [fp, #-16]
   18dfc:	str	r1, [fp, #-20]	; 0xffffffec
   18e00:	str	r2, [fp, #-24]	; 0xffffffe8
   18e04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18e08:	cmp	r3, #0
   18e0c:	beq	18e48 <__assert_fail@plt+0x7efc>
   18e10:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18e14:	mvn	r0, #0
   18e18:	bl	1b248 <__assert_fail@plt+0xa2fc>
   18e1c:	mov	r3, r0
   18e20:	mov	r2, r3
   18e24:	ldr	r3, [fp, #-20]	; 0xffffffec
   18e28:	cmp	r2, r3
   18e2c:	bcs	18e48 <__assert_fail@plt+0x7efc>
   18e30:	ldr	r3, [fp, #-20]	; 0xffffffec
   18e34:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18e38:	mul	r3, r2, r3
   18e3c:	str	r3, [fp, #-8]
   18e40:	mov	r3, #1
   18e44:	b	18e5c <__assert_fail@plt+0x7f10>
   18e48:	ldr	r3, [fp, #-20]	; 0xffffffec
   18e4c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18e50:	mul	r3, r2, r3
   18e54:	str	r3, [fp, #-8]
   18e58:	mov	r3, #0
   18e5c:	cmp	r3, #0
   18e60:	beq	18e7c <__assert_fail@plt+0x7f30>
   18e64:	bl	10e80 <__errno_location@plt>
   18e68:	mov	r2, r0
   18e6c:	mov	r3, #12
   18e70:	str	r3, [r2]
   18e74:	mov	r3, #0
   18e78:	b	18e90 <__assert_fail@plt+0x7f44>
   18e7c:	ldr	r3, [fp, #-8]
   18e80:	mov	r1, r3
   18e84:	ldr	r0, [fp, #-16]
   18e88:	bl	1aca4 <__assert_fail@plt+0x9d58>
   18e8c:	mov	r3, r0
   18e90:	mov	r0, r3
   18e94:	sub	sp, fp, #4
   18e98:	pop	{fp, pc}
   18e9c:	push	{r4, r5, r6, r7, fp, lr}
   18ea0:	add	fp, sp, #20
   18ea4:	sub	sp, sp, #48	; 0x30
   18ea8:	str	r0, [fp, #-24]	; 0xffffffe8
   18eac:	str	r1, [fp, #-28]	; 0xffffffe4
   18eb0:	str	r2, [fp, #-32]	; 0xffffffe0
   18eb4:	str	r3, [fp, #-36]	; 0xffffffdc
   18eb8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18ebc:	cmp	r3, #0
   18ec0:	beq	18ee4 <__assert_fail@plt+0x7f98>
   18ec4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18ec8:	str	r3, [sp]
   18ecc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18ed0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18ed4:	ldr	r1, [pc, #1260]	; 193c8 <__assert_fail@plt+0x847c>
   18ed8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18edc:	bl	10e74 <fprintf@plt>
   18ee0:	b	18ef8 <__assert_fail@plt+0x7fac>
   18ee4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18ee8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18eec:	ldr	r1, [pc, #1240]	; 193cc <__assert_fail@plt+0x8480>
   18ef0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18ef4:	bl	10e74 <fprintf@plt>
   18ef8:	ldr	r0, [pc, #1232]	; 193d0 <__assert_fail@plt+0x8484>
   18efc:	bl	10e50 <gettext@plt>
   18f00:	mov	r2, r0
   18f04:	ldr	r3, [pc, #1224]	; 193d4 <__assert_fail@plt+0x8488>
   18f08:	ldr	r1, [pc, #1224]	; 193d8 <__assert_fail@plt+0x848c>
   18f0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18f10:	bl	10e74 <fprintf@plt>
   18f14:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18f18:	mov	r0, #10
   18f1c:	bl	10d78 <fputc_unlocked@plt>
   18f20:	ldr	r0, [pc, #1204]	; 193dc <__assert_fail@plt+0x8490>
   18f24:	bl	10e50 <gettext@plt>
   18f28:	mov	r3, r0
   18f2c:	ldr	r2, [pc, #1196]	; 193e0 <__assert_fail@plt+0x8494>
   18f30:	mov	r1, r3
   18f34:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18f38:	bl	10e74 <fprintf@plt>
   18f3c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18f40:	mov	r0, #10
   18f44:	bl	10d78 <fputc_unlocked@plt>
   18f48:	ldr	r3, [fp, #8]
   18f4c:	cmp	r3, #9
   18f50:	ldrls	pc, [pc, r3, lsl #2]
   18f54:	b	19310 <__assert_fail@plt+0x83c4>
   18f58:			; <UNDEFINED> instruction: 0x000193b8
   18f5c:	andeq	r8, r1, r0, lsl #31
   18f60:	andeq	r8, r1, r4, lsr #31
   18f64:	ldrdeq	r8, [r1], -r0
   18f68:	andeq	r9, r1, r0, lsl r0
   18f6c:	andeq	r9, r1, r8, rrx
   18f70:	ldrdeq	r9, [r1], -r0
   18f74:	andeq	r9, r1, r8, asr #2
   18f78:	ldrdeq	r9, [r1], -r0
   18f7c:	andeq	r9, r1, r8, ror #4
   18f80:	ldr	r0, [pc, #1116]	; 193e4 <__assert_fail@plt+0x8498>
   18f84:	bl	10e50 <gettext@plt>
   18f88:	mov	r1, r0
   18f8c:	ldr	r3, [fp, #4]
   18f90:	ldr	r3, [r3]
   18f94:	mov	r2, r3
   18f98:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18f9c:	bl	10e74 <fprintf@plt>
   18fa0:	b	193bc <__assert_fail@plt+0x8470>
   18fa4:	ldr	r0, [pc, #1084]	; 193e8 <__assert_fail@plt+0x849c>
   18fa8:	bl	10e50 <gettext@plt>
   18fac:	mov	r1, r0
   18fb0:	ldr	r3, [fp, #4]
   18fb4:	ldr	r2, [r3]
   18fb8:	ldr	r3, [fp, #4]
   18fbc:	add	r3, r3, #4
   18fc0:	ldr	r3, [r3]
   18fc4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18fc8:	bl	10e74 <fprintf@plt>
   18fcc:	b	193bc <__assert_fail@plt+0x8470>
   18fd0:	ldr	r0, [pc, #1044]	; 193ec <__assert_fail@plt+0x84a0>
   18fd4:	bl	10e50 <gettext@plt>
   18fd8:	ldr	r3, [fp, #4]
   18fdc:	ldr	r2, [r3]
   18fe0:	ldr	r3, [fp, #4]
   18fe4:	add	r3, r3, #4
   18fe8:	ldr	r1, [r3]
   18fec:	ldr	r3, [fp, #4]
   18ff0:	add	r3, r3, #8
   18ff4:	ldr	r3, [r3]
   18ff8:	str	r3, [sp]
   18ffc:	mov	r3, r1
   19000:	mov	r1, r0
   19004:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19008:	bl	10e74 <fprintf@plt>
   1900c:	b	193bc <__assert_fail@plt+0x8470>
   19010:	ldr	r0, [pc, #984]	; 193f0 <__assert_fail@plt+0x84a4>
   19014:	bl	10e50 <gettext@plt>
   19018:	mov	ip, r0
   1901c:	ldr	r3, [fp, #4]
   19020:	ldr	r1, [r3]
   19024:	ldr	r3, [fp, #4]
   19028:	add	r3, r3, #4
   1902c:	ldr	r0, [r3]
   19030:	ldr	r3, [fp, #4]
   19034:	add	r3, r3, #8
   19038:	ldr	r3, [r3]
   1903c:	ldr	r2, [fp, #4]
   19040:	add	r2, r2, #12
   19044:	ldr	r2, [r2]
   19048:	str	r2, [sp, #4]
   1904c:	str	r3, [sp]
   19050:	mov	r3, r0
   19054:	mov	r2, r1
   19058:	mov	r1, ip
   1905c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19060:	bl	10e74 <fprintf@plt>
   19064:	b	193bc <__assert_fail@plt+0x8470>
   19068:	ldr	r0, [pc, #900]	; 193f4 <__assert_fail@plt+0x84a8>
   1906c:	bl	10e50 <gettext@plt>
   19070:	mov	lr, r0
   19074:	ldr	r3, [fp, #4]
   19078:	ldr	r0, [r3]
   1907c:	ldr	r3, [fp, #4]
   19080:	add	r3, r3, #4
   19084:	ldr	ip, [r3]
   19088:	ldr	r3, [fp, #4]
   1908c:	add	r3, r3, #8
   19090:	ldr	r3, [r3]
   19094:	ldr	r2, [fp, #4]
   19098:	add	r2, r2, #12
   1909c:	ldr	r2, [r2]
   190a0:	ldr	r1, [fp, #4]
   190a4:	add	r1, r1, #16
   190a8:	ldr	r1, [r1]
   190ac:	str	r1, [sp, #8]
   190b0:	str	r2, [sp, #4]
   190b4:	str	r3, [sp]
   190b8:	mov	r3, ip
   190bc:	mov	r2, r0
   190c0:	mov	r1, lr
   190c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   190c8:	bl	10e74 <fprintf@plt>
   190cc:	b	193bc <__assert_fail@plt+0x8470>
   190d0:	ldr	r0, [pc, #800]	; 193f8 <__assert_fail@plt+0x84ac>
   190d4:	bl	10e50 <gettext@plt>
   190d8:	mov	r4, r0
   190dc:	ldr	r3, [fp, #4]
   190e0:	ldr	ip, [r3]
   190e4:	ldr	r3, [fp, #4]
   190e8:	add	r3, r3, #4
   190ec:	ldr	lr, [r3]
   190f0:	ldr	r3, [fp, #4]
   190f4:	add	r3, r3, #8
   190f8:	ldr	r3, [r3]
   190fc:	ldr	r2, [fp, #4]
   19100:	add	r2, r2, #12
   19104:	ldr	r2, [r2]
   19108:	ldr	r1, [fp, #4]
   1910c:	add	r1, r1, #16
   19110:	ldr	r1, [r1]
   19114:	ldr	r0, [fp, #4]
   19118:	add	r0, r0, #20
   1911c:	ldr	r0, [r0]
   19120:	str	r0, [sp, #12]
   19124:	str	r1, [sp, #8]
   19128:	str	r2, [sp, #4]
   1912c:	str	r3, [sp]
   19130:	mov	r3, lr
   19134:	mov	r2, ip
   19138:	mov	r1, r4
   1913c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19140:	bl	10e74 <fprintf@plt>
   19144:	b	193bc <__assert_fail@plt+0x8470>
   19148:	ldr	r0, [pc, #684]	; 193fc <__assert_fail@plt+0x84b0>
   1914c:	bl	10e50 <gettext@plt>
   19150:	mov	r5, r0
   19154:	ldr	r3, [fp, #4]
   19158:	ldr	lr, [r3]
   1915c:	ldr	r3, [fp, #4]
   19160:	add	r3, r3, #4
   19164:	ldr	r4, [r3]
   19168:	ldr	r3, [fp, #4]
   1916c:	add	r3, r3, #8
   19170:	ldr	r3, [r3]
   19174:	ldr	r2, [fp, #4]
   19178:	add	r2, r2, #12
   1917c:	ldr	r2, [r2]
   19180:	ldr	r1, [fp, #4]
   19184:	add	r1, r1, #16
   19188:	ldr	r1, [r1]
   1918c:	ldr	r0, [fp, #4]
   19190:	add	r0, r0, #20
   19194:	ldr	r0, [r0]
   19198:	ldr	ip, [fp, #4]
   1919c:	add	ip, ip, #24
   191a0:	ldr	ip, [ip]
   191a4:	str	ip, [sp, #16]
   191a8:	str	r0, [sp, #12]
   191ac:	str	r1, [sp, #8]
   191b0:	str	r2, [sp, #4]
   191b4:	str	r3, [sp]
   191b8:	mov	r3, r4
   191bc:	mov	r2, lr
   191c0:	mov	r1, r5
   191c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   191c8:	bl	10e74 <fprintf@plt>
   191cc:	b	193bc <__assert_fail@plt+0x8470>
   191d0:	ldr	r0, [pc, #552]	; 19400 <__assert_fail@plt+0x84b4>
   191d4:	bl	10e50 <gettext@plt>
   191d8:	mov	r6, r0
   191dc:	ldr	r3, [fp, #4]
   191e0:	ldr	r4, [r3]
   191e4:	ldr	r3, [fp, #4]
   191e8:	add	r3, r3, #4
   191ec:	ldr	r5, [r3]
   191f0:	ldr	r3, [fp, #4]
   191f4:	add	r3, r3, #8
   191f8:	ldr	r3, [r3]
   191fc:	ldr	r2, [fp, #4]
   19200:	add	r2, r2, #12
   19204:	ldr	r2, [r2]
   19208:	ldr	r1, [fp, #4]
   1920c:	add	r1, r1, #16
   19210:	ldr	r1, [r1]
   19214:	ldr	r0, [fp, #4]
   19218:	add	r0, r0, #20
   1921c:	ldr	r0, [r0]
   19220:	ldr	ip, [fp, #4]
   19224:	add	ip, ip, #24
   19228:	ldr	ip, [ip]
   1922c:	ldr	lr, [fp, #4]
   19230:	add	lr, lr, #28
   19234:	ldr	lr, [lr]
   19238:	str	lr, [sp, #20]
   1923c:	str	ip, [sp, #16]
   19240:	str	r0, [sp, #12]
   19244:	str	r1, [sp, #8]
   19248:	str	r2, [sp, #4]
   1924c:	str	r3, [sp]
   19250:	mov	r3, r5
   19254:	mov	r2, r4
   19258:	mov	r1, r6
   1925c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19260:	bl	10e74 <fprintf@plt>
   19264:	b	193bc <__assert_fail@plt+0x8470>
   19268:	ldr	r0, [pc, #404]	; 19404 <__assert_fail@plt+0x84b8>
   1926c:	bl	10e50 <gettext@plt>
   19270:	mov	r7, r0
   19274:	ldr	r3, [fp, #4]
   19278:	ldr	r5, [r3]
   1927c:	ldr	r3, [fp, #4]
   19280:	add	r3, r3, #4
   19284:	ldr	r6, [r3]
   19288:	ldr	r3, [fp, #4]
   1928c:	add	r3, r3, #8
   19290:	ldr	r3, [r3]
   19294:	ldr	r2, [fp, #4]
   19298:	add	r2, r2, #12
   1929c:	ldr	r2, [r2]
   192a0:	ldr	r1, [fp, #4]
   192a4:	add	r1, r1, #16
   192a8:	ldr	r1, [r1]
   192ac:	ldr	r0, [fp, #4]
   192b0:	add	r0, r0, #20
   192b4:	ldr	r0, [r0]
   192b8:	ldr	ip, [fp, #4]
   192bc:	add	ip, ip, #24
   192c0:	ldr	ip, [ip]
   192c4:	ldr	lr, [fp, #4]
   192c8:	add	lr, lr, #28
   192cc:	ldr	lr, [lr]
   192d0:	ldr	r4, [fp, #4]
   192d4:	add	r4, r4, #32
   192d8:	ldr	r4, [r4]
   192dc:	str	r4, [sp, #24]
   192e0:	str	lr, [sp, #20]
   192e4:	str	ip, [sp, #16]
   192e8:	str	r0, [sp, #12]
   192ec:	str	r1, [sp, #8]
   192f0:	str	r2, [sp, #4]
   192f4:	str	r3, [sp]
   192f8:	mov	r3, r6
   192fc:	mov	r2, r5
   19300:	mov	r1, r7
   19304:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19308:	bl	10e74 <fprintf@plt>
   1930c:	b	193bc <__assert_fail@plt+0x8470>
   19310:	ldr	r0, [pc, #240]	; 19408 <__assert_fail@plt+0x84bc>
   19314:	bl	10e50 <gettext@plt>
   19318:	mov	r7, r0
   1931c:	ldr	r3, [fp, #4]
   19320:	ldr	r5, [r3]
   19324:	ldr	r3, [fp, #4]
   19328:	add	r3, r3, #4
   1932c:	ldr	r6, [r3]
   19330:	ldr	r3, [fp, #4]
   19334:	add	r3, r3, #8
   19338:	ldr	r3, [r3]
   1933c:	ldr	r2, [fp, #4]
   19340:	add	r2, r2, #12
   19344:	ldr	r2, [r2]
   19348:	ldr	r1, [fp, #4]
   1934c:	add	r1, r1, #16
   19350:	ldr	r1, [r1]
   19354:	ldr	r0, [fp, #4]
   19358:	add	r0, r0, #20
   1935c:	ldr	r0, [r0]
   19360:	ldr	ip, [fp, #4]
   19364:	add	ip, ip, #24
   19368:	ldr	ip, [ip]
   1936c:	ldr	lr, [fp, #4]
   19370:	add	lr, lr, #28
   19374:	ldr	lr, [lr]
   19378:	ldr	r4, [fp, #4]
   1937c:	add	r4, r4, #32
   19380:	ldr	r4, [r4]
   19384:	str	r4, [sp, #24]
   19388:	str	lr, [sp, #20]
   1938c:	str	ip, [sp, #16]
   19390:	str	r0, [sp, #12]
   19394:	str	r1, [sp, #8]
   19398:	str	r2, [sp, #4]
   1939c:	str	r3, [sp]
   193a0:	mov	r3, r6
   193a4:	mov	r2, r5
   193a8:	mov	r1, r7
   193ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   193b0:	bl	10e74 <fprintf@plt>
   193b4:	b	193bc <__assert_fail@plt+0x8470>
   193b8:	nop			; (mov r0, r0)
   193bc:	nop			; (mov r0, r0)
   193c0:	sub	sp, fp, #20
   193c4:	pop	{r4, r5, r6, r7, fp, pc}
   193c8:	andeq	ip, r1, r0, lsl #17
   193cc:	andeq	ip, r1, ip, lsl #17
   193d0:	muleq	r1, r4, r8
   193d4:	andeq	r0, r0, r6, ror #15
   193d8:	andeq	ip, r1, r4, lsr #23
   193dc:	muleq	r1, r8, r8
   193e0:	andeq	ip, r1, r4, asr #18
   193e4:	andeq	ip, r1, r8, ror #18
   193e8:	andeq	ip, r1, r8, ror r9
   193ec:	muleq	r1, r0, r9
   193f0:	andeq	ip, r1, ip, lsr #19
   193f4:	andeq	ip, r1, ip, asr #19
   193f8:	strdeq	ip, [r1], -r0
   193fc:	andeq	ip, r1, r8, lsl sl
   19400:	andeq	ip, r1, r4, asr #20
   19404:	andeq	ip, r1, r4, ror sl
   19408:	andeq	ip, r1, r8, lsr #21
   1940c:	push	{fp, lr}
   19410:	add	fp, sp, #4
   19414:	sub	sp, sp, #32
   19418:	str	r0, [fp, #-16]
   1941c:	str	r1, [fp, #-20]	; 0xffffffec
   19420:	str	r2, [fp, #-24]	; 0xffffffe8
   19424:	str	r3, [fp, #-28]	; 0xffffffe4
   19428:	mov	r3, #0
   1942c:	str	r3, [fp, #-8]
   19430:	b	19440 <__assert_fail@plt+0x84f4>
   19434:	ldr	r3, [fp, #-8]
   19438:	add	r3, r3, #1
   1943c:	str	r3, [fp, #-8]
   19440:	ldr	r3, [fp, #-8]
   19444:	lsl	r3, r3, #2
   19448:	ldr	r2, [fp, #4]
   1944c:	add	r3, r2, r3
   19450:	ldr	r3, [r3]
   19454:	cmp	r3, #0
   19458:	bne	19434 <__assert_fail@plt+0x84e8>
   1945c:	ldr	r3, [fp, #-8]
   19460:	str	r3, [sp, #4]
   19464:	ldr	r3, [fp, #4]
   19468:	str	r3, [sp]
   1946c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19470:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19474:	ldr	r1, [fp, #-20]	; 0xffffffec
   19478:	ldr	r0, [fp, #-16]
   1947c:	bl	18e9c <__assert_fail@plt+0x7f50>
   19480:	nop			; (mov r0, r0)
   19484:	sub	sp, fp, #4
   19488:	pop	{fp, pc}
   1948c:	push	{fp, lr}
   19490:	add	fp, sp, #4
   19494:	sub	sp, sp, #72	; 0x48
   19498:	str	r0, [fp, #-56]	; 0xffffffc8
   1949c:	str	r1, [fp, #-60]	; 0xffffffc4
   194a0:	str	r2, [fp, #-64]	; 0xffffffc0
   194a4:	str	r3, [fp, #-68]	; 0xffffffbc
   194a8:	mov	r3, #0
   194ac:	str	r3, [fp, #-8]
   194b0:	b	194c0 <__assert_fail@plt+0x8574>
   194b4:	ldr	r3, [fp, #-8]
   194b8:	add	r3, r3, #1
   194bc:	str	r3, [fp, #-8]
   194c0:	ldr	r3, [fp, #-8]
   194c4:	cmp	r3, #9
   194c8:	bhi	1950c <__assert_fail@plt+0x85c0>
   194cc:	ldr	r3, [fp, #4]
   194d0:	add	r2, r3, #4
   194d4:	str	r2, [fp, #4]
   194d8:	ldr	r2, [r3]
   194dc:	ldr	r3, [fp, #-8]
   194e0:	lsl	r3, r3, #2
   194e4:	sub	r1, fp, #4
   194e8:	add	r3, r1, r3
   194ec:	str	r2, [r3, #-44]	; 0xffffffd4
   194f0:	ldr	r3, [fp, #-8]
   194f4:	lsl	r3, r3, #2
   194f8:	sub	r2, fp, #4
   194fc:	add	r3, r2, r3
   19500:	ldr	r3, [r3, #-44]	; 0xffffffd4
   19504:	cmp	r3, #0
   19508:	bne	194b4 <__assert_fail@plt+0x8568>
   1950c:	ldr	r3, [fp, #-8]
   19510:	str	r3, [sp, #4]
   19514:	sub	r3, fp, #48	; 0x30
   19518:	str	r3, [sp]
   1951c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   19520:	ldr	r2, [fp, #-64]	; 0xffffffc0
   19524:	ldr	r1, [fp, #-60]	; 0xffffffc4
   19528:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1952c:	bl	18e9c <__assert_fail@plt+0x7f50>
   19530:	nop			; (mov r0, r0)
   19534:	sub	sp, fp, #4
   19538:	pop	{fp, pc}
   1953c:	push	{r3}		; (str r3, [sp, #-4]!)
   19540:	push	{fp, lr}
   19544:	add	fp, sp, #4
   19548:	sub	sp, sp, #36	; 0x24
   1954c:	str	r0, [fp, #-20]	; 0xffffffec
   19550:	str	r1, [fp, #-24]	; 0xffffffe8
   19554:	str	r2, [fp, #-28]	; 0xffffffe4
   19558:	add	r3, fp, #8
   1955c:	str	r3, [fp, #-12]
   19560:	ldr	r3, [fp, #-12]
   19564:	str	r3, [sp]
   19568:	ldr	r3, [fp, #4]
   1956c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   19570:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19574:	ldr	r0, [fp, #-20]	; 0xffffffec
   19578:	bl	1948c <__assert_fail@plt+0x8540>
   1957c:	nop			; (mov r0, r0)
   19580:	sub	sp, fp, #4
   19584:	pop	{fp, lr}
   19588:	add	sp, sp, #4
   1958c:	bx	lr
   19590:	push	{fp, lr}
   19594:	add	fp, sp, #4
   19598:	ldr	r3, [pc, #96]	; 19600 <__assert_fail@plt+0x86b4>
   1959c:	ldr	r3, [r3]
   195a0:	mov	r1, r3
   195a4:	mov	r0, #10
   195a8:	bl	10d78 <fputc_unlocked@plt>
   195ac:	ldr	r0, [pc, #80]	; 19604 <__assert_fail@plt+0x86b8>
   195b0:	bl	10e50 <gettext@plt>
   195b4:	mov	r3, r0
   195b8:	ldr	r1, [pc, #72]	; 19608 <__assert_fail@plt+0x86bc>
   195bc:	mov	r0, r3
   195c0:	bl	10d0c <printf@plt>
   195c4:	ldr	r0, [pc, #64]	; 1960c <__assert_fail@plt+0x86c0>
   195c8:	bl	10e50 <gettext@plt>
   195cc:	mov	r3, r0
   195d0:	ldr	r2, [pc, #56]	; 19610 <__assert_fail@plt+0x86c4>
   195d4:	ldr	r1, [pc, #56]	; 19614 <__assert_fail@plt+0x86c8>
   195d8:	mov	r0, r3
   195dc:	bl	10d0c <printf@plt>
   195e0:	ldr	r0, [pc, #48]	; 19618 <__assert_fail@plt+0x86cc>
   195e4:	bl	10e50 <gettext@plt>
   195e8:	mov	r3, r0
   195ec:	ldr	r1, [pc, #40]	; 1961c <__assert_fail@plt+0x86d0>
   195f0:	mov	r0, r3
   195f4:	bl	10d0c <printf@plt>
   195f8:	nop			; (mov r0, r0)
   195fc:	pop	{fp, pc}
   19600:	andeq	sp, r2, r4, asr r1
   19604:	andeq	ip, r1, r4, ror #21
   19608:	strdeq	ip, [r1], -r8
   1960c:	andeq	ip, r1, r0, lsl fp
   19610:	andeq	ip, r1, r4, lsr #22
   19614:	andeq	ip, r1, ip, asr #22
   19618:	andeq	ip, r1, ip, asr fp
   1961c:	andeq	ip, r1, r4, lsl #23
   19620:	push	{fp, lr}
   19624:	add	fp, sp, #4
   19628:	sub	sp, sp, #16
   1962c:	str	r0, [fp, #-8]
   19630:	str	r1, [fp, #-12]
   19634:	str	r2, [fp, #-16]
   19638:	ldr	r2, [fp, #-16]
   1963c:	ldr	r1, [fp, #-12]
   19640:	ldr	r0, [fp, #-8]
   19644:	bl	197b0 <__assert_fail@plt+0x8864>
   19648:	mov	r3, r0
   1964c:	mov	r0, r3
   19650:	sub	sp, fp, #4
   19654:	pop	{fp, pc}
   19658:	push	{fp, lr}
   1965c:	add	fp, sp, #4
   19660:	sub	sp, sp, #8
   19664:	str	r0, [fp, #-8]
   19668:	ldr	r3, [fp, #-8]
   1966c:	cmp	r3, #0
   19670:	bne	19678 <__assert_fail@plt+0x872c>
   19674:	bl	1a1a4 <__assert_fail@plt+0x9258>
   19678:	ldr	r3, [fp, #-8]
   1967c:	mov	r0, r3
   19680:	sub	sp, fp, #4
   19684:	pop	{fp, pc}
   19688:	push	{fp, lr}
   1968c:	add	fp, sp, #4
   19690:	sub	sp, sp, #8
   19694:	str	r0, [fp, #-8]
   19698:	ldr	r0, [fp, #-8]
   1969c:	bl	1abfc <__assert_fail@plt+0x9cb0>
   196a0:	mov	r3, r0
   196a4:	mov	r0, r3
   196a8:	bl	19658 <__assert_fail@plt+0x870c>
   196ac:	mov	r3, r0
   196b0:	mov	r0, r3
   196b4:	sub	sp, fp, #4
   196b8:	pop	{fp, pc}
   196bc:	push	{fp, lr}
   196c0:	add	fp, sp, #4
   196c4:	sub	sp, sp, #8
   196c8:	str	r0, [fp, #-8]
   196cc:	ldr	r0, [fp, #-8]
   196d0:	bl	16578 <__assert_fail@plt+0x562c>
   196d4:	mov	r3, r0
   196d8:	mov	r0, r3
   196dc:	bl	19658 <__assert_fail@plt+0x870c>
   196e0:	mov	r3, r0
   196e4:	mov	r0, r3
   196e8:	sub	sp, fp, #4
   196ec:	pop	{fp, pc}
   196f0:	push	{fp, lr}
   196f4:	add	fp, sp, #4
   196f8:	sub	sp, sp, #8
   196fc:	str	r0, [fp, #-8]
   19700:	ldr	r0, [fp, #-8]
   19704:	bl	19688 <__assert_fail@plt+0x873c>
   19708:	mov	r3, r0
   1970c:	mov	r0, r3
   19710:	sub	sp, fp, #4
   19714:	pop	{fp, pc}
   19718:	push	{fp, lr}
   1971c:	add	fp, sp, #4
   19720:	sub	sp, sp, #16
   19724:	str	r0, [fp, #-16]
   19728:	str	r1, [fp, #-20]	; 0xffffffec
   1972c:	ldr	r1, [fp, #-20]	; 0xffffffec
   19730:	ldr	r0, [fp, #-16]
   19734:	bl	1aca4 <__assert_fail@plt+0x9d58>
   19738:	str	r0, [fp, #-8]
   1973c:	ldr	r3, [fp, #-8]
   19740:	cmp	r3, #0
   19744:	bne	19764 <__assert_fail@plt+0x8818>
   19748:	ldr	r3, [fp, #-16]
   1974c:	cmp	r3, #0
   19750:	beq	19760 <__assert_fail@plt+0x8814>
   19754:	ldr	r3, [fp, #-20]	; 0xffffffec
   19758:	cmp	r3, #0
   1975c:	beq	19764 <__assert_fail@plt+0x8818>
   19760:	bl	1a1a4 <__assert_fail@plt+0x9258>
   19764:	ldr	r3, [fp, #-8]
   19768:	mov	r0, r3
   1976c:	sub	sp, fp, #4
   19770:	pop	{fp, pc}
   19774:	push	{fp, lr}
   19778:	add	fp, sp, #4
   1977c:	sub	sp, sp, #8
   19780:	str	r0, [fp, #-8]
   19784:	str	r1, [fp, #-12]
   19788:	ldr	r1, [fp, #-12]
   1978c:	ldr	r0, [fp, #-8]
   19790:	bl	165a4 <__assert_fail@plt+0x5658>
   19794:	mov	r3, r0
   19798:	mov	r0, r3
   1979c:	bl	19658 <__assert_fail@plt+0x870c>
   197a0:	mov	r3, r0
   197a4:	mov	r0, r3
   197a8:	sub	sp, fp, #4
   197ac:	pop	{fp, pc}
   197b0:	push	{fp, lr}
   197b4:	add	fp, sp, #4
   197b8:	sub	sp, sp, #24
   197bc:	str	r0, [fp, #-16]
   197c0:	str	r1, [fp, #-20]	; 0xffffffec
   197c4:	str	r2, [fp, #-24]	; 0xffffffe8
   197c8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   197cc:	ldr	r1, [fp, #-20]	; 0xffffffec
   197d0:	ldr	r0, [fp, #-16]
   197d4:	bl	18dec <__assert_fail@plt+0x7ea0>
   197d8:	str	r0, [fp, #-8]
   197dc:	ldr	r3, [fp, #-8]
   197e0:	cmp	r3, #0
   197e4:	bne	19810 <__assert_fail@plt+0x88c4>
   197e8:	ldr	r3, [fp, #-16]
   197ec:	cmp	r3, #0
   197f0:	beq	1980c <__assert_fail@plt+0x88c0>
   197f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   197f8:	cmp	r3, #0
   197fc:	beq	19810 <__assert_fail@plt+0x88c4>
   19800:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19804:	cmp	r3, #0
   19808:	beq	19810 <__assert_fail@plt+0x88c4>
   1980c:	bl	1a1a4 <__assert_fail@plt+0x9258>
   19810:	ldr	r3, [fp, #-8]
   19814:	mov	r0, r3
   19818:	sub	sp, fp, #4
   1981c:	pop	{fp, pc}
   19820:	push	{fp, lr}
   19824:	add	fp, sp, #4
   19828:	sub	sp, sp, #16
   1982c:	str	r0, [fp, #-8]
   19830:	str	r1, [fp, #-12]
   19834:	str	r2, [fp, #-16]
   19838:	ldr	r2, [fp, #-16]
   1983c:	ldr	r1, [fp, #-12]
   19840:	ldr	r0, [fp, #-8]
   19844:	bl	1662c <__assert_fail@plt+0x56e0>
   19848:	mov	r3, r0
   1984c:	mov	r0, r3
   19850:	bl	19658 <__assert_fail@plt+0x870c>
   19854:	mov	r3, r0
   19858:	mov	r0, r3
   1985c:	sub	sp, fp, #4
   19860:	pop	{fp, pc}
   19864:	push	{fp, lr}
   19868:	add	fp, sp, #4
   1986c:	sub	sp, sp, #8
   19870:	str	r0, [fp, #-8]
   19874:	str	r1, [fp, #-12]
   19878:	ldr	r2, [fp, #-12]
   1987c:	ldr	r1, [fp, #-8]
   19880:	mov	r0, #0
   19884:	bl	197b0 <__assert_fail@plt+0x8864>
   19888:	mov	r3, r0
   1988c:	mov	r0, r3
   19890:	sub	sp, fp, #4
   19894:	pop	{fp, pc}
   19898:	push	{fp, lr}
   1989c:	add	fp, sp, #4
   198a0:	sub	sp, sp, #8
   198a4:	str	r0, [fp, #-8]
   198a8:	str	r1, [fp, #-12]
   198ac:	ldr	r2, [fp, #-12]
   198b0:	ldr	r1, [fp, #-8]
   198b4:	mov	r0, #0
   198b8:	bl	19820 <__assert_fail@plt+0x88d4>
   198bc:	mov	r3, r0
   198c0:	mov	r0, r3
   198c4:	sub	sp, fp, #4
   198c8:	pop	{fp, pc}
   198cc:	push	{fp, lr}
   198d0:	add	fp, sp, #4
   198d4:	sub	sp, sp, #8
   198d8:	str	r0, [fp, #-8]
   198dc:	str	r1, [fp, #-12]
   198e0:	mov	r2, #1
   198e4:	ldr	r1, [fp, #-12]
   198e8:	ldr	r0, [fp, #-8]
   198ec:	bl	19900 <__assert_fail@plt+0x89b4>
   198f0:	mov	r3, r0
   198f4:	mov	r0, r3
   198f8:	sub	sp, fp, #4
   198fc:	pop	{fp, pc}
   19900:	push	{fp, lr}
   19904:	add	fp, sp, #4
   19908:	sub	sp, sp, #24
   1990c:	str	r0, [fp, #-16]
   19910:	str	r1, [fp, #-20]	; 0xffffffec
   19914:	str	r2, [fp, #-24]	; 0xffffffe8
   19918:	ldr	r3, [fp, #-20]	; 0xffffffec
   1991c:	ldr	r3, [r3]
   19920:	str	r3, [fp, #-8]
   19924:	ldr	r3, [fp, #-16]
   19928:	cmp	r3, #0
   1992c:	bne	19978 <__assert_fail@plt+0x8a2c>
   19930:	ldr	r3, [fp, #-8]
   19934:	cmp	r3, #0
   19938:	bne	199dc <__assert_fail@plt+0x8a90>
   1993c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19940:	mov	r0, #64	; 0x40
   19944:	bl	1b248 <__assert_fail@plt+0xa2fc>
   19948:	mov	r3, r0
   1994c:	str	r3, [fp, #-8]
   19950:	ldr	r3, [fp, #-8]
   19954:	cmp	r3, #0
   19958:	moveq	r3, #1
   1995c:	movne	r3, #0
   19960:	uxtb	r3, r3
   19964:	mov	r2, r3
   19968:	ldr	r3, [fp, #-8]
   1996c:	add	r3, r2, r3
   19970:	str	r3, [fp, #-8]
   19974:	b	199dc <__assert_fail@plt+0x8a90>
   19978:	ldr	r3, [fp, #-8]
   1997c:	lsr	r3, r3, #1
   19980:	add	r3, r3, #1
   19984:	mvn	r2, r3
   19988:	ldr	r3, [fp, #-8]
   1998c:	cmp	r2, r3
   19990:	bcs	199b4 <__assert_fail@plt+0x8a68>
   19994:	ldr	r3, [fp, #-8]
   19998:	lsr	r2, r3, #1
   1999c:	ldr	r3, [fp, #-8]
   199a0:	add	r3, r2, r3
   199a4:	add	r3, r3, #1
   199a8:	str	r3, [fp, #-8]
   199ac:	mov	r3, #1
   199b0:	b	199d0 <__assert_fail@plt+0x8a84>
   199b4:	ldr	r3, [fp, #-8]
   199b8:	lsr	r2, r3, #1
   199bc:	ldr	r3, [fp, #-8]
   199c0:	add	r3, r2, r3
   199c4:	add	r3, r3, #1
   199c8:	str	r3, [fp, #-8]
   199cc:	mov	r3, #0
   199d0:	cmp	r3, #0
   199d4:	beq	199dc <__assert_fail@plt+0x8a90>
   199d8:	bl	1a1a4 <__assert_fail@plt+0x9258>
   199dc:	ldr	r3, [fp, #-8]
   199e0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   199e4:	mov	r1, r3
   199e8:	ldr	r0, [fp, #-16]
   199ec:	bl	197b0 <__assert_fail@plt+0x8864>
   199f0:	str	r0, [fp, #-16]
   199f4:	ldr	r2, [fp, #-8]
   199f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   199fc:	str	r2, [r3]
   19a00:	ldr	r3, [fp, #-16]
   19a04:	mov	r0, r3
   19a08:	sub	sp, fp, #4
   19a0c:	pop	{fp, pc}
   19a10:	push	{fp, lr}
   19a14:	add	fp, sp, #4
   19a18:	sub	sp, sp, #32
   19a1c:	str	r0, [fp, #-24]	; 0xffffffe8
   19a20:	str	r1, [fp, #-28]	; 0xffffffe4
   19a24:	str	r2, [fp, #-32]	; 0xffffffe0
   19a28:	str	r3, [fp, #-36]	; 0xffffffdc
   19a2c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19a30:	ldr	r3, [r3]
   19a34:	str	r3, [fp, #-8]
   19a38:	ldr	r3, [fp, #-8]
   19a3c:	asr	r3, r3, #1
   19a40:	cmp	r3, #0
   19a44:	bge	19a6c <__assert_fail@plt+0x8b20>
   19a48:	ldr	r3, [fp, #-8]
   19a4c:	asr	r3, r3, #1
   19a50:	rsb	r2, r3, #-2147483648	; 0x80000000
   19a54:	ldr	r3, [fp, #-8]
   19a58:	cmp	r2, r3
   19a5c:	movgt	r3, #1
   19a60:	movle	r3, #0
   19a64:	uxtb	r3, r3
   19a68:	b	19ac0 <__assert_fail@plt+0x8b74>
   19a6c:	ldr	r3, [fp, #-8]
   19a70:	cmp	r3, #0
   19a74:	bge	19a9c <__assert_fail@plt+0x8b50>
   19a78:	ldr	r3, [fp, #-8]
   19a7c:	asr	r2, r3, #1
   19a80:	ldr	r3, [fp, #-8]
   19a84:	rsb	r3, r3, #-2147483648	; 0x80000000
   19a88:	cmp	r2, r3
   19a8c:	movlt	r3, #1
   19a90:	movge	r3, #0
   19a94:	uxtb	r3, r3
   19a98:	b	19ac0 <__assert_fail@plt+0x8b74>
   19a9c:	ldr	r3, [fp, #-8]
   19aa0:	asr	r2, r3, #1
   19aa4:	mvn	r3, #-2147483648	; 0x80000000
   19aa8:	sub	r3, r3, r2
   19aac:	ldr	r2, [fp, #-8]
   19ab0:	cmp	r3, r2
   19ab4:	movlt	r3, #1
   19ab8:	movge	r3, #0
   19abc:	uxtb	r3, r3
   19ac0:	cmp	r3, #0
   19ac4:	beq	19ae8 <__assert_fail@plt+0x8b9c>
   19ac8:	ldr	r3, [fp, #-8]
   19acc:	asr	r3, r3, #1
   19ad0:	mov	r2, r3
   19ad4:	ldr	r3, [fp, #-8]
   19ad8:	add	r3, r2, r3
   19adc:	str	r3, [fp, #-16]
   19ae0:	mov	r3, #1
   19ae4:	b	19b04 <__assert_fail@plt+0x8bb8>
   19ae8:	ldr	r3, [fp, #-8]
   19aec:	asr	r3, r3, #1
   19af0:	mov	r2, r3
   19af4:	ldr	r3, [fp, #-8]
   19af8:	add	r3, r2, r3
   19afc:	str	r3, [fp, #-16]
   19b00:	mov	r3, #0
   19b04:	cmp	r3, #0
   19b08:	beq	19b14 <__assert_fail@plt+0x8bc8>
   19b0c:	mvn	r3, #-2147483648	; 0x80000000
   19b10:	str	r3, [fp, #-16]
   19b14:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19b18:	cmp	r3, #0
   19b1c:	blt	19b38 <__assert_fail@plt+0x8bec>
   19b20:	ldr	r3, [fp, #-16]
   19b24:	ldr	r2, [fp, #-36]	; 0xffffffdc
   19b28:	cmp	r2, r3
   19b2c:	bge	19b38 <__assert_fail@plt+0x8bec>
   19b30:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19b34:	str	r3, [fp, #-16]
   19b38:	ldr	r3, [fp, #4]
   19b3c:	cmp	r3, #0
   19b40:	bge	19bd0 <__assert_fail@plt+0x8c84>
   19b44:	ldr	r3, [fp, #-16]
   19b48:	cmp	r3, #0
   19b4c:	bge	19b7c <__assert_fail@plt+0x8c30>
   19b50:	ldr	r1, [fp, #4]
   19b54:	mvn	r0, #-2147483648	; 0x80000000
   19b58:	bl	1b454 <__assert_fail@plt+0xa508>
   19b5c:	mov	r3, r0
   19b60:	mov	r2, r3
   19b64:	ldr	r3, [fp, #-16]
   19b68:	cmp	r2, r3
   19b6c:	movgt	r3, #1
   19b70:	movle	r3, #0
   19b74:	uxtb	r3, r3
   19b78:	b	19c70 <__assert_fail@plt+0x8d24>
   19b7c:	ldr	r3, [fp, #4]
   19b80:	cmn	r3, #1
   19b84:	bne	19ba4 <__assert_fail@plt+0x8c58>
   19b88:	ldr	r3, [fp, #-16]
   19b8c:	add	r3, r3, #-2147483648	; 0x80000000
   19b90:	cmp	r3, #0
   19b94:	movgt	r3, #1
   19b98:	movle	r3, #0
   19b9c:	uxtb	r3, r3
   19ba0:	b	19c70 <__assert_fail@plt+0x8d24>
   19ba4:	ldr	r1, [fp, #4]
   19ba8:	mov	r0, #-2147483648	; 0x80000000
   19bac:	bl	1b454 <__assert_fail@plt+0xa508>
   19bb0:	mov	r3, r0
   19bb4:	mov	r2, r3
   19bb8:	ldr	r3, [fp, #-16]
   19bbc:	cmp	r2, r3
   19bc0:	movlt	r3, #1
   19bc4:	movge	r3, #0
   19bc8:	uxtb	r3, r3
   19bcc:	b	19c70 <__assert_fail@plt+0x8d24>
   19bd0:	ldr	r3, [fp, #4]
   19bd4:	cmp	r3, #0
   19bd8:	beq	19c6c <__assert_fail@plt+0x8d20>
   19bdc:	ldr	r3, [fp, #-16]
   19be0:	cmp	r3, #0
   19be4:	bge	19c40 <__assert_fail@plt+0x8cf4>
   19be8:	ldr	r3, [fp, #-16]
   19bec:	cmn	r3, #1
   19bf0:	bne	19c10 <__assert_fail@plt+0x8cc4>
   19bf4:	ldr	r3, [fp, #4]
   19bf8:	add	r3, r3, #-2147483648	; 0x80000000
   19bfc:	cmp	r3, #0
   19c00:	movgt	r3, #1
   19c04:	movle	r3, #0
   19c08:	uxtb	r3, r3
   19c0c:	b	19c70 <__assert_fail@plt+0x8d24>
   19c10:	ldr	r3, [fp, #-16]
   19c14:	mov	r1, r3
   19c18:	mov	r0, #-2147483648	; 0x80000000
   19c1c:	bl	1b454 <__assert_fail@plt+0xa508>
   19c20:	mov	r3, r0
   19c24:	mov	r2, r3
   19c28:	ldr	r3, [fp, #4]
   19c2c:	cmp	r2, r3
   19c30:	movlt	r3, #1
   19c34:	movge	r3, #0
   19c38:	uxtb	r3, r3
   19c3c:	b	19c70 <__assert_fail@plt+0x8d24>
   19c40:	ldr	r1, [fp, #4]
   19c44:	mvn	r0, #-2147483648	; 0x80000000
   19c48:	bl	1b454 <__assert_fail@plt+0xa508>
   19c4c:	mov	r3, r0
   19c50:	mov	r2, r3
   19c54:	ldr	r3, [fp, #-16]
   19c58:	cmp	r2, r3
   19c5c:	movlt	r3, #1
   19c60:	movge	r3, #0
   19c64:	uxtb	r3, r3
   19c68:	b	19c70 <__assert_fail@plt+0x8d24>
   19c6c:	mov	r3, #0
   19c70:	cmp	r3, #0
   19c74:	beq	19c94 <__assert_fail@plt+0x8d48>
   19c78:	ldr	r3, [fp, #-16]
   19c7c:	mov	r2, r3
   19c80:	ldr	r3, [fp, #4]
   19c84:	mul	r3, r3, r2
   19c88:	str	r3, [fp, #-20]	; 0xffffffec
   19c8c:	mov	r3, #1
   19c90:	b	19cac <__assert_fail@plt+0x8d60>
   19c94:	ldr	r3, [fp, #-16]
   19c98:	mov	r2, r3
   19c9c:	ldr	r3, [fp, #4]
   19ca0:	mul	r3, r3, r2
   19ca4:	str	r3, [fp, #-20]	; 0xffffffec
   19ca8:	mov	r3, #0
   19cac:	cmp	r3, #0
   19cb0:	beq	19cbc <__assert_fail@plt+0x8d70>
   19cb4:	mvn	r3, #-2147483648	; 0x80000000
   19cb8:	b	19cd4 <__assert_fail@plt+0x8d88>
   19cbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   19cc0:	cmp	r3, #63	; 0x3f
   19cc4:	bgt	19cd0 <__assert_fail@plt+0x8d84>
   19cc8:	mov	r3, #64	; 0x40
   19ccc:	b	19cd4 <__assert_fail@plt+0x8d88>
   19cd0:	mov	r3, #0
   19cd4:	str	r3, [fp, #-12]
   19cd8:	ldr	r3, [fp, #-12]
   19cdc:	cmp	r3, #0
   19ce0:	beq	19d1c <__assert_fail@plt+0x8dd0>
   19ce4:	ldr	r1, [fp, #4]
   19ce8:	ldr	r0, [fp, #-12]
   19cec:	bl	1b454 <__assert_fail@plt+0xa508>
   19cf0:	mov	r3, r0
   19cf4:	str	r3, [fp, #-16]
   19cf8:	ldr	r3, [fp, #-12]
   19cfc:	ldr	r1, [fp, #4]
   19d00:	mov	r0, r3
   19d04:	bl	1b674 <__assert_fail@plt+0xa728>
   19d08:	mov	r3, r1
   19d0c:	mov	r2, r3
   19d10:	ldr	r3, [fp, #-12]
   19d14:	sub	r3, r3, r2
   19d18:	str	r3, [fp, #-20]	; 0xffffffec
   19d1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19d20:	cmp	r3, #0
   19d24:	bne	19d34 <__assert_fail@plt+0x8de8>
   19d28:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19d2c:	mov	r2, #0
   19d30:	str	r2, [r3]
   19d34:	ldr	r2, [fp, #-16]
   19d38:	ldr	r3, [fp, #-8]
   19d3c:	sub	r2, r2, r3
   19d40:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19d44:	cmp	r2, r3
   19d48:	bge	19f80 <__assert_fail@plt+0x9034>
   19d4c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19d50:	cmp	r3, #0
   19d54:	bge	19d78 <__assert_fail@plt+0x8e2c>
   19d58:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19d5c:	rsb	r2, r3, #-2147483648	; 0x80000000
   19d60:	ldr	r3, [fp, #-8]
   19d64:	cmp	r2, r3
   19d68:	movgt	r3, #1
   19d6c:	movle	r3, #0
   19d70:	uxtb	r3, r3
   19d74:	b	19dc4 <__assert_fail@plt+0x8e78>
   19d78:	ldr	r3, [fp, #-8]
   19d7c:	cmp	r3, #0
   19d80:	bge	19da4 <__assert_fail@plt+0x8e58>
   19d84:	ldr	r3, [fp, #-8]
   19d88:	rsb	r2, r3, #-2147483648	; 0x80000000
   19d8c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19d90:	cmp	r2, r3
   19d94:	movgt	r3, #1
   19d98:	movle	r3, #0
   19d9c:	uxtb	r3, r3
   19da0:	b	19dc4 <__assert_fail@plt+0x8e78>
   19da4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19da8:	mvn	r3, #-2147483648	; 0x80000000
   19dac:	sub	r3, r3, r2
   19db0:	ldr	r2, [fp, #-8]
   19db4:	cmp	r3, r2
   19db8:	movlt	r3, #1
   19dbc:	movge	r3, #0
   19dc0:	uxtb	r3, r3
   19dc4:	cmp	r3, #0
   19dc8:	beq	19de0 <__assert_fail@plt+0x8e94>
   19dcc:	ldr	r2, [fp, #-8]
   19dd0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19dd4:	add	r3, r2, r3
   19dd8:	str	r3, [fp, #-16]
   19ddc:	b	19f7c <__assert_fail@plt+0x9030>
   19de0:	ldr	r2, [fp, #-8]
   19de4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19de8:	add	r3, r2, r3
   19dec:	str	r3, [fp, #-16]
   19df0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19df4:	cmp	r3, #0
   19df8:	blt	19e0c <__assert_fail@plt+0x8ec0>
   19dfc:	ldr	r3, [fp, #-16]
   19e00:	ldr	r2, [fp, #-36]	; 0xffffffdc
   19e04:	cmp	r2, r3
   19e08:	blt	19f7c <__assert_fail@plt+0x9030>
   19e0c:	ldr	r3, [fp, #4]
   19e10:	cmp	r3, #0
   19e14:	bge	19ea4 <__assert_fail@plt+0x8f58>
   19e18:	ldr	r3, [fp, #-16]
   19e1c:	cmp	r3, #0
   19e20:	bge	19e50 <__assert_fail@plt+0x8f04>
   19e24:	ldr	r1, [fp, #4]
   19e28:	mvn	r0, #-2147483648	; 0x80000000
   19e2c:	bl	1b454 <__assert_fail@plt+0xa508>
   19e30:	mov	r3, r0
   19e34:	mov	r2, r3
   19e38:	ldr	r3, [fp, #-16]
   19e3c:	cmp	r2, r3
   19e40:	movgt	r3, #1
   19e44:	movle	r3, #0
   19e48:	uxtb	r3, r3
   19e4c:	b	19f44 <__assert_fail@plt+0x8ff8>
   19e50:	ldr	r3, [fp, #4]
   19e54:	cmn	r3, #1
   19e58:	bne	19e78 <__assert_fail@plt+0x8f2c>
   19e5c:	ldr	r3, [fp, #-16]
   19e60:	add	r3, r3, #-2147483648	; 0x80000000
   19e64:	cmp	r3, #0
   19e68:	movgt	r3, #1
   19e6c:	movle	r3, #0
   19e70:	uxtb	r3, r3
   19e74:	b	19f44 <__assert_fail@plt+0x8ff8>
   19e78:	ldr	r1, [fp, #4]
   19e7c:	mov	r0, #-2147483648	; 0x80000000
   19e80:	bl	1b454 <__assert_fail@plt+0xa508>
   19e84:	mov	r3, r0
   19e88:	mov	r2, r3
   19e8c:	ldr	r3, [fp, #-16]
   19e90:	cmp	r2, r3
   19e94:	movlt	r3, #1
   19e98:	movge	r3, #0
   19e9c:	uxtb	r3, r3
   19ea0:	b	19f44 <__assert_fail@plt+0x8ff8>
   19ea4:	ldr	r3, [fp, #4]
   19ea8:	cmp	r3, #0
   19eac:	beq	19f40 <__assert_fail@plt+0x8ff4>
   19eb0:	ldr	r3, [fp, #-16]
   19eb4:	cmp	r3, #0
   19eb8:	bge	19f14 <__assert_fail@plt+0x8fc8>
   19ebc:	ldr	r3, [fp, #-16]
   19ec0:	cmn	r3, #1
   19ec4:	bne	19ee4 <__assert_fail@plt+0x8f98>
   19ec8:	ldr	r3, [fp, #4]
   19ecc:	add	r3, r3, #-2147483648	; 0x80000000
   19ed0:	cmp	r3, #0
   19ed4:	movgt	r3, #1
   19ed8:	movle	r3, #0
   19edc:	uxtb	r3, r3
   19ee0:	b	19f44 <__assert_fail@plt+0x8ff8>
   19ee4:	ldr	r3, [fp, #-16]
   19ee8:	mov	r1, r3
   19eec:	mov	r0, #-2147483648	; 0x80000000
   19ef0:	bl	1b454 <__assert_fail@plt+0xa508>
   19ef4:	mov	r3, r0
   19ef8:	mov	r2, r3
   19efc:	ldr	r3, [fp, #4]
   19f00:	cmp	r2, r3
   19f04:	movlt	r3, #1
   19f08:	movge	r3, #0
   19f0c:	uxtb	r3, r3
   19f10:	b	19f44 <__assert_fail@plt+0x8ff8>
   19f14:	ldr	r1, [fp, #4]
   19f18:	mvn	r0, #-2147483648	; 0x80000000
   19f1c:	bl	1b454 <__assert_fail@plt+0xa508>
   19f20:	mov	r3, r0
   19f24:	mov	r2, r3
   19f28:	ldr	r3, [fp, #-16]
   19f2c:	cmp	r2, r3
   19f30:	movlt	r3, #1
   19f34:	movge	r3, #0
   19f38:	uxtb	r3, r3
   19f3c:	b	19f44 <__assert_fail@plt+0x8ff8>
   19f40:	mov	r3, #0
   19f44:	cmp	r3, #0
   19f48:	beq	19f64 <__assert_fail@plt+0x9018>
   19f4c:	ldr	r3, [fp, #-16]
   19f50:	mov	r2, r3
   19f54:	ldr	r3, [fp, #4]
   19f58:	mul	r3, r3, r2
   19f5c:	str	r3, [fp, #-20]	; 0xffffffec
   19f60:	b	19f7c <__assert_fail@plt+0x9030>
   19f64:	ldr	r3, [fp, #-16]
   19f68:	mov	r2, r3
   19f6c:	ldr	r3, [fp, #4]
   19f70:	mul	r3, r3, r2
   19f74:	str	r3, [fp, #-20]	; 0xffffffec
   19f78:	b	19f80 <__assert_fail@plt+0x9034>
   19f7c:	bl	1a1a4 <__assert_fail@plt+0x9258>
   19f80:	ldr	r3, [fp, #-20]	; 0xffffffec
   19f84:	mov	r1, r3
   19f88:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19f8c:	bl	19718 <__assert_fail@plt+0x87cc>
   19f90:	str	r0, [fp, #-24]	; 0xffffffe8
   19f94:	ldr	r2, [fp, #-16]
   19f98:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19f9c:	str	r2, [r3]
   19fa0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19fa4:	mov	r0, r3
   19fa8:	sub	sp, fp, #4
   19fac:	pop	{fp, pc}
   19fb0:	push	{fp, lr}
   19fb4:	add	fp, sp, #4
   19fb8:	sub	sp, sp, #8
   19fbc:	str	r0, [fp, #-8]
   19fc0:	mov	r1, #1
   19fc4:	ldr	r0, [fp, #-8]
   19fc8:	bl	1a008 <__assert_fail@plt+0x90bc>
   19fcc:	mov	r3, r0
   19fd0:	mov	r0, r3
   19fd4:	sub	sp, fp, #4
   19fd8:	pop	{fp, pc}
   19fdc:	push	{fp, lr}
   19fe0:	add	fp, sp, #4
   19fe4:	sub	sp, sp, #8
   19fe8:	str	r0, [fp, #-8]
   19fec:	mov	r1, #1
   19ff0:	ldr	r0, [fp, #-8]
   19ff4:	bl	1a044 <__assert_fail@plt+0x90f8>
   19ff8:	mov	r3, r0
   19ffc:	mov	r0, r3
   1a000:	sub	sp, fp, #4
   1a004:	pop	{fp, pc}
   1a008:	push	{fp, lr}
   1a00c:	add	fp, sp, #4
   1a010:	sub	sp, sp, #8
   1a014:	str	r0, [fp, #-8]
   1a018:	str	r1, [fp, #-12]
   1a01c:	ldr	r1, [fp, #-12]
   1a020:	ldr	r0, [fp, #-8]
   1a024:	bl	1ab38 <__assert_fail@plt+0x9bec>
   1a028:	mov	r3, r0
   1a02c:	mov	r0, r3
   1a030:	bl	19658 <__assert_fail@plt+0x870c>
   1a034:	mov	r3, r0
   1a038:	mov	r0, r3
   1a03c:	sub	sp, fp, #4
   1a040:	pop	{fp, pc}
   1a044:	push	{fp, lr}
   1a048:	add	fp, sp, #4
   1a04c:	sub	sp, sp, #8
   1a050:	str	r0, [fp, #-8]
   1a054:	str	r1, [fp, #-12]
   1a058:	ldr	r1, [fp, #-12]
   1a05c:	ldr	r0, [fp, #-8]
   1a060:	bl	165f4 <__assert_fail@plt+0x56a8>
   1a064:	mov	r3, r0
   1a068:	mov	r0, r3
   1a06c:	bl	19658 <__assert_fail@plt+0x870c>
   1a070:	mov	r3, r0
   1a074:	mov	r0, r3
   1a078:	sub	sp, fp, #4
   1a07c:	pop	{fp, pc}
   1a080:	push	{fp, lr}
   1a084:	add	fp, sp, #4
   1a088:	sub	sp, sp, #8
   1a08c:	str	r0, [fp, #-8]
   1a090:	str	r1, [fp, #-12]
   1a094:	ldr	r0, [fp, #-12]
   1a098:	bl	19688 <__assert_fail@plt+0x873c>
   1a09c:	mov	r3, r0
   1a0a0:	ldr	r2, [fp, #-12]
   1a0a4:	ldr	r1, [fp, #-8]
   1a0a8:	mov	r0, r3
   1a0ac:	bl	10d48 <memcpy@plt>
   1a0b0:	mov	r3, r0
   1a0b4:	mov	r0, r3
   1a0b8:	sub	sp, fp, #4
   1a0bc:	pop	{fp, pc}
   1a0c0:	push	{fp, lr}
   1a0c4:	add	fp, sp, #4
   1a0c8:	sub	sp, sp, #8
   1a0cc:	str	r0, [fp, #-8]
   1a0d0:	str	r1, [fp, #-12]
   1a0d4:	ldr	r0, [fp, #-12]
   1a0d8:	bl	196bc <__assert_fail@plt+0x8770>
   1a0dc:	mov	r3, r0
   1a0e0:	mov	r0, r3
   1a0e4:	ldr	r3, [fp, #-12]
   1a0e8:	mov	r2, r3
   1a0ec:	ldr	r1, [fp, #-8]
   1a0f0:	bl	10d48 <memcpy@plt>
   1a0f4:	mov	r3, r0
   1a0f8:	mov	r0, r3
   1a0fc:	sub	sp, fp, #4
   1a100:	pop	{fp, pc}
   1a104:	push	{fp, lr}
   1a108:	add	fp, sp, #4
   1a10c:	sub	sp, sp, #16
   1a110:	str	r0, [fp, #-16]
   1a114:	str	r1, [fp, #-20]	; 0xffffffec
   1a118:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a11c:	add	r3, r3, #1
   1a120:	mov	r0, r3
   1a124:	bl	196bc <__assert_fail@plt+0x8770>
   1a128:	mov	r3, r0
   1a12c:	str	r3, [fp, #-8]
   1a130:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a134:	ldr	r2, [fp, #-8]
   1a138:	add	r3, r2, r3
   1a13c:	mov	r2, #0
   1a140:	strb	r2, [r3]
   1a144:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a148:	mov	r2, r3
   1a14c:	ldr	r1, [fp, #-16]
   1a150:	ldr	r0, [fp, #-8]
   1a154:	bl	10d48 <memcpy@plt>
   1a158:	mov	r3, r0
   1a15c:	mov	r0, r3
   1a160:	sub	sp, fp, #4
   1a164:	pop	{fp, pc}
   1a168:	push	{fp, lr}
   1a16c:	add	fp, sp, #4
   1a170:	sub	sp, sp, #8
   1a174:	str	r0, [fp, #-8]
   1a178:	ldr	r0, [fp, #-8]
   1a17c:	bl	10e5c <strlen@plt>
   1a180:	mov	r3, r0
   1a184:	add	r3, r3, #1
   1a188:	mov	r1, r3
   1a18c:	ldr	r0, [fp, #-8]
   1a190:	bl	1a080 <__assert_fail@plt+0x9134>
   1a194:	mov	r3, r0
   1a198:	mov	r0, r3
   1a19c:	sub	sp, fp, #4
   1a1a0:	pop	{fp, pc}
   1a1a4:	push	{r4, r5, fp, lr}
   1a1a8:	add	fp, sp, #12
   1a1ac:	ldr	r3, [pc, #32]	; 1a1d4 <__assert_fail@plt+0x9288>
   1a1b0:	ldr	r4, [r3]
   1a1b4:	ldr	r0, [pc, #28]	; 1a1d8 <__assert_fail@plt+0x928c>
   1a1b8:	bl	10e50 <gettext@plt>
   1a1bc:	mov	r3, r0
   1a1c0:	ldr	r2, [pc, #20]	; 1a1dc <__assert_fail@plt+0x9290>
   1a1c4:	mov	r1, #0
   1a1c8:	mov	r0, r4
   1a1cc:	bl	10df0 <error@plt>
   1a1d0:	bl	10f34 <abort@plt>
   1a1d4:	strdeq	sp, [r2], -r4
   1a1d8:	ldrdeq	ip, [r1], -r4
   1a1dc:	andeq	ip, r1, r8, ror #23
   1a1e0:	push	{fp}		; (str fp, [sp, #-4]!)
   1a1e4:	add	fp, sp, #0
   1a1e8:	nop			; (mov r0, r0)
   1a1ec:	add	sp, fp, #0
   1a1f0:	pop	{fp}		; (ldr fp, [sp], #4)
   1a1f4:	bx	lr
   1a1f8:	push	{fp, lr}
   1a1fc:	add	fp, sp, #4
   1a200:	sub	sp, sp, #8
   1a204:	str	r0, [fp, #-8]
   1a208:	str	r1, [fp, #-12]
   1a20c:	ldr	r1, [fp, #-12]
   1a210:	ldr	r0, [fp, #-8]
   1a214:	bl	1ad9c <__assert_fail@plt+0x9e50>
   1a218:	mov	r3, r0
   1a21c:	cmp	r3, #0
   1a220:	bge	1a228 <__assert_fail@plt+0x92dc>
   1a224:	bl	1a1e0 <__assert_fail@plt+0x9294>
   1a228:	nop			; (mov r0, r0)
   1a22c:	sub	sp, fp, #4
   1a230:	pop	{fp, pc}
   1a234:	push	{r4, r5, fp, lr}
   1a238:	add	fp, sp, #12
   1a23c:	sub	sp, sp, #16
   1a240:	str	r0, [fp, #-24]	; 0xffffffe8
   1a244:	str	r1, [fp, #-28]	; 0xffffffe4
   1a248:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a24c:	cmp	r3, #0
   1a250:	bge	1a324 <__assert_fail@plt+0x93d8>
   1a254:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a258:	ldrd	r2, [r3]
   1a25c:	cmp	r2, #0
   1a260:	sbcs	r3, r3, #0
   1a264:	bge	1a2a8 <__assert_fail@plt+0x935c>
   1a268:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a26c:	ldrd	r4, [r3]
   1a270:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a274:	mov	r2, r3
   1a278:	asr	r3, r2, #31
   1a27c:	mvn	r0, #0
   1a280:	mvn	r1, #-2147483648	; 0x80000000
   1a284:	bl	1b694 <__assert_fail@plt+0xa748>
   1a288:	mov	r2, r0
   1a28c:	mov	r3, r1
   1a290:	cmp	r4, r2
   1a294:	sbcs	r3, r5, r3
   1a298:	movlt	r3, #1
   1a29c:	movge	r3, #0
   1a2a0:	uxtb	r3, r3
   1a2a4:	b	1a420 <__assert_fail@plt+0x94d4>
   1a2a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a2ac:	cmn	r3, #1
   1a2b0:	bne	1a2dc <__assert_fail@plt+0x9390>
   1a2b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a2b8:	ldrd	r2, [r3]
   1a2bc:	adds	r2, r2, #0
   1a2c0:	adc	r3, r3, #-2147483648	; 0x80000000
   1a2c4:	cmp	r2, #1
   1a2c8:	sbcs	r3, r3, #0
   1a2cc:	movge	r3, #1
   1a2d0:	movlt	r3, #0
   1a2d4:	uxtb	r3, r3
   1a2d8:	b	1a420 <__assert_fail@plt+0x94d4>
   1a2dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a2e0:	mov	r2, r3
   1a2e4:	asr	r3, r2, #31
   1a2e8:	mov	r0, #0
   1a2ec:	mov	r1, #-2147483648	; 0x80000000
   1a2f0:	bl	1b694 <__assert_fail@plt+0xa748>
   1a2f4:	mov	r2, r0
   1a2f8:	mov	r3, r1
   1a2fc:	mov	r0, r2
   1a300:	mov	r1, r3
   1a304:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a308:	ldrd	r2, [r3]
   1a30c:	cmp	r0, r2
   1a310:	sbcs	r3, r1, r3
   1a314:	movlt	r3, #1
   1a318:	movge	r3, #0
   1a31c:	uxtb	r3, r3
   1a320:	b	1a420 <__assert_fail@plt+0x94d4>
   1a324:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a328:	cmp	r3, #0
   1a32c:	beq	1a41c <__assert_fail@plt+0x94d0>
   1a330:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a334:	ldrd	r2, [r3]
   1a338:	cmp	r2, #0
   1a33c:	sbcs	r3, r3, #0
   1a340:	bge	1a3d4 <__assert_fail@plt+0x9488>
   1a344:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a348:	ldrd	r2, [r3]
   1a34c:	mvn	r0, #0
   1a350:	mvn	r1, #0
   1a354:	cmp	r3, r1
   1a358:	cmpeq	r2, r0
   1a35c:	bne	1a38c <__assert_fail@plt+0x9440>
   1a360:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a364:	mov	r2, r3
   1a368:	asr	r3, r2, #31
   1a36c:	adds	r2, r2, #0
   1a370:	adc	r3, r3, #-2147483648	; 0x80000000
   1a374:	cmp	r2, #1
   1a378:	sbcs	r3, r3, #0
   1a37c:	movge	r3, #1
   1a380:	movlt	r3, #0
   1a384:	uxtb	r3, r3
   1a388:	b	1a420 <__assert_fail@plt+0x94d4>
   1a38c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a390:	ldrd	r2, [r3]
   1a394:	mov	r0, #0
   1a398:	mov	r1, #-2147483648	; 0x80000000
   1a39c:	bl	1b694 <__assert_fail@plt+0xa748>
   1a3a0:	mov	r2, r0
   1a3a4:	mov	r3, r1
   1a3a8:	mov	r0, r2
   1a3ac:	mov	r1, r3
   1a3b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a3b4:	mov	r2, r3
   1a3b8:	asr	r3, r2, #31
   1a3bc:	cmp	r0, r2
   1a3c0:	sbcs	r3, r1, r3
   1a3c4:	movlt	r3, #1
   1a3c8:	movge	r3, #0
   1a3cc:	uxtb	r3, r3
   1a3d0:	b	1a420 <__assert_fail@plt+0x94d4>
   1a3d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a3d8:	mov	r2, r3
   1a3dc:	asr	r3, r2, #31
   1a3e0:	mvn	r0, #0
   1a3e4:	mvn	r1, #-2147483648	; 0x80000000
   1a3e8:	bl	1b694 <__assert_fail@plt+0xa748>
   1a3ec:	mov	r2, r0
   1a3f0:	mov	r3, r1
   1a3f4:	mov	r0, r2
   1a3f8:	mov	r1, r3
   1a3fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a400:	ldrd	r2, [r3]
   1a404:	cmp	r0, r2
   1a408:	sbcs	r3, r1, r3
   1a40c:	movlt	r3, #1
   1a410:	movge	r3, #0
   1a414:	uxtb	r3, r3
   1a418:	b	1a420 <__assert_fail@plt+0x94d4>
   1a41c:	mov	r3, #0
   1a420:	cmp	r3, #0
   1a424:	beq	1a468 <__assert_fail@plt+0x951c>
   1a428:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a42c:	ldrd	r2, [r3]
   1a430:	mov	r0, r2
   1a434:	mov	r1, r3
   1a438:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a43c:	mov	r2, r3
   1a440:	asr	r3, r2, #31
   1a444:	mul	lr, r2, r1
   1a448:	mul	ip, r0, r3
   1a44c:	add	ip, lr, ip
   1a450:	umull	r2, r3, r0, r2
   1a454:	add	r1, ip, r3
   1a458:	mov	r3, r1
   1a45c:	strd	r2, [fp, #-20]	; 0xffffffec
   1a460:	mov	r3, #1
   1a464:	b	1a4a4 <__assert_fail@plt+0x9558>
   1a468:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a46c:	ldrd	r2, [r3]
   1a470:	mov	r0, r2
   1a474:	mov	r1, r3
   1a478:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a47c:	mov	r2, r3
   1a480:	asr	r3, r2, #31
   1a484:	mul	lr, r2, r1
   1a488:	mul	ip, r0, r3
   1a48c:	add	ip, lr, ip
   1a490:	umull	r2, r3, r0, r2
   1a494:	add	r1, ip, r3
   1a498:	mov	r3, r1
   1a49c:	strd	r2, [fp, #-20]	; 0xffffffec
   1a4a0:	mov	r3, #0
   1a4a4:	cmp	r3, #0
   1a4a8:	beq	1a4e4 <__assert_fail@plt+0x9598>
   1a4ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a4b0:	ldrd	r2, [r3]
   1a4b4:	cmp	r2, #0
   1a4b8:	sbcs	r3, r3, #0
   1a4bc:	bge	1a4cc <__assert_fail@plt+0x9580>
   1a4c0:	mov	r2, #0
   1a4c4:	mov	r3, #-2147483648	; 0x80000000
   1a4c8:	b	1a4d4 <__assert_fail@plt+0x9588>
   1a4cc:	mvn	r2, #0
   1a4d0:	mvn	r3, #-2147483648	; 0x80000000
   1a4d4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1a4d8:	strd	r2, [r1]
   1a4dc:	mov	r3, #1
   1a4e0:	b	1a4f4 <__assert_fail@plt+0x95a8>
   1a4e4:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1a4e8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1a4ec:	strd	r2, [r1]
   1a4f0:	mov	r3, #0
   1a4f4:	mov	r0, r3
   1a4f8:	sub	sp, fp, #12
   1a4fc:	pop	{r4, r5, fp, pc}
   1a500:	push	{fp, lr}
   1a504:	add	fp, sp, #4
   1a508:	sub	sp, sp, #24
   1a50c:	str	r0, [fp, #-16]
   1a510:	str	r1, [fp, #-20]	; 0xffffffec
   1a514:	str	r2, [fp, #-24]	; 0xffffffe8
   1a518:	mov	r3, #0
   1a51c:	str	r3, [fp, #-8]
   1a520:	b	1a540 <__assert_fail@plt+0x95f4>
   1a524:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a528:	ldr	r0, [fp, #-16]
   1a52c:	bl	1a234 <__assert_fail@plt+0x92e8>
   1a530:	mov	r2, r0
   1a534:	ldr	r3, [fp, #-8]
   1a538:	orr	r3, r3, r2
   1a53c:	str	r3, [fp, #-8]
   1a540:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a544:	sub	r2, r3, #1
   1a548:	str	r2, [fp, #-24]	; 0xffffffe8
   1a54c:	cmp	r3, #0
   1a550:	bne	1a524 <__assert_fail@plt+0x95d8>
   1a554:	ldr	r3, [fp, #-8]
   1a558:	mov	r0, r3
   1a55c:	sub	sp, fp, #4
   1a560:	pop	{fp, pc}
   1a564:	push	{fp, lr}
   1a568:	add	fp, sp, #4
   1a56c:	sub	sp, sp, #48	; 0x30
   1a570:	str	r0, [fp, #-40]	; 0xffffffd8
   1a574:	str	r1, [fp, #-44]	; 0xffffffd4
   1a578:	str	r2, [fp, #-48]	; 0xffffffd0
   1a57c:	str	r3, [fp, #-52]	; 0xffffffcc
   1a580:	mov	r3, #0
   1a584:	str	r3, [fp, #-8]
   1a588:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1a58c:	cmp	r3, #0
   1a590:	blt	1a5a0 <__assert_fail@plt+0x9654>
   1a594:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1a598:	cmp	r3, #36	; 0x24
   1a59c:	ble	1a5b4 <__assert_fail@plt+0x9668>
   1a5a0:	ldr	r3, [pc, #1412]	; 1ab2c <__assert_fail@plt+0x9be0>
   1a5a4:	mov	r2, #85	; 0x55
   1a5a8:	ldr	r1, [pc, #1408]	; 1ab30 <__assert_fail@plt+0x9be4>
   1a5ac:	ldr	r0, [pc, #1408]	; 1ab34 <__assert_fail@plt+0x9be8>
   1a5b0:	bl	10f4c <__assert_fail@plt>
   1a5b4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1a5b8:	cmp	r3, #0
   1a5bc:	bne	1a5c8 <__assert_fail@plt+0x967c>
   1a5c0:	sub	r3, fp, #28
   1a5c4:	b	1a5cc <__assert_fail@plt+0x9680>
   1a5c8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1a5cc:	str	r3, [fp, #-24]	; 0xffffffe8
   1a5d0:	bl	10e80 <__errno_location@plt>
   1a5d4:	mov	r2, r0
   1a5d8:	mov	r3, #0
   1a5dc:	str	r3, [r2]
   1a5e0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1a5e4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1a5e8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1a5ec:	bl	10ebc <strtoimax@plt>
   1a5f0:	mov	r2, r0
   1a5f4:	mov	r3, r1
   1a5f8:	strd	r2, [fp, #-36]	; 0xffffffdc
   1a5fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a600:	ldr	r2, [r3]
   1a604:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1a608:	cmp	r2, r3
   1a60c:	bne	1a66c <__assert_fail@plt+0x9720>
   1a610:	ldr	r3, [fp, #4]
   1a614:	cmp	r3, #0
   1a618:	beq	1a664 <__assert_fail@plt+0x9718>
   1a61c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a620:	ldr	r3, [r3]
   1a624:	ldrb	r3, [r3]
   1a628:	cmp	r3, #0
   1a62c:	beq	1a664 <__assert_fail@plt+0x9718>
   1a630:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a634:	ldr	r3, [r3]
   1a638:	ldrb	r3, [r3]
   1a63c:	mov	r1, r3
   1a640:	ldr	r0, [fp, #4]
   1a644:	bl	10e68 <strchr@plt>
   1a648:	mov	r3, r0
   1a64c:	cmp	r3, #0
   1a650:	beq	1a664 <__assert_fail@plt+0x9718>
   1a654:	mov	r2, #1
   1a658:	mov	r3, #0
   1a65c:	strd	r2, [fp, #-36]	; 0xffffffdc
   1a660:	b	1a6a4 <__assert_fail@plt+0x9758>
   1a664:	mov	r3, #4
   1a668:	b	1ab20 <__assert_fail@plt+0x9bd4>
   1a66c:	bl	10e80 <__errno_location@plt>
   1a670:	mov	r3, r0
   1a674:	ldr	r3, [r3]
   1a678:	cmp	r3, #0
   1a67c:	beq	1a6a4 <__assert_fail@plt+0x9758>
   1a680:	bl	10e80 <__errno_location@plt>
   1a684:	mov	r3, r0
   1a688:	ldr	r3, [r3]
   1a68c:	cmp	r3, #34	; 0x22
   1a690:	beq	1a69c <__assert_fail@plt+0x9750>
   1a694:	mov	r3, #4
   1a698:	b	1ab20 <__assert_fail@plt+0x9bd4>
   1a69c:	mov	r3, #1
   1a6a0:	str	r3, [fp, #-8]
   1a6a4:	ldr	r3, [fp, #4]
   1a6a8:	cmp	r3, #0
   1a6ac:	bne	1a6c4 <__assert_fail@plt+0x9778>
   1a6b0:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1a6b4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1a6b8:	strd	r2, [r1]
   1a6bc:	ldr	r3, [fp, #-8]
   1a6c0:	b	1ab20 <__assert_fail@plt+0x9bd4>
   1a6c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a6c8:	ldr	r3, [r3]
   1a6cc:	ldrb	r3, [r3]
   1a6d0:	cmp	r3, #0
   1a6d4:	beq	1ab10 <__assert_fail@plt+0x9bc4>
   1a6d8:	mov	r3, #1024	; 0x400
   1a6dc:	str	r3, [fp, #-12]
   1a6e0:	mov	r3, #1
   1a6e4:	str	r3, [fp, #-16]
   1a6e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a6ec:	ldr	r3, [r3]
   1a6f0:	ldrb	r3, [r3]
   1a6f4:	mov	r1, r3
   1a6f8:	ldr	r0, [fp, #4]
   1a6fc:	bl	10e68 <strchr@plt>
   1a700:	mov	r3, r0
   1a704:	cmp	r3, #0
   1a708:	bne	1a724 <__assert_fail@plt+0x97d8>
   1a70c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1a710:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1a714:	strd	r2, [r1]
   1a718:	ldr	r3, [fp, #-8]
   1a71c:	orr	r3, r3, #2
   1a720:	b	1ab20 <__assert_fail@plt+0x9bd4>
   1a724:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a728:	ldr	r3, [r3]
   1a72c:	ldrb	r3, [r3]
   1a730:	sub	r3, r3, #69	; 0x45
   1a734:	cmp	r3, #47	; 0x2f
   1a738:	ldrls	pc, [pc, r3, lsl #2]
   1a73c:	b	1a888 <__assert_fail@plt+0x993c>
   1a740:	andeq	sl, r1, r0, lsl #16
   1a744:	andeq	sl, r1, r8, lsl #17
   1a748:	andeq	sl, r1, r0, lsl #16
   1a74c:	andeq	sl, r1, r8, lsl #17
   1a750:	andeq	sl, r1, r8, lsl #17
   1a754:	andeq	sl, r1, r8, lsl #17
   1a758:	andeq	sl, r1, r0, lsl #16
   1a75c:	andeq	sl, r1, r8, lsl #17
   1a760:	andeq	sl, r1, r0, lsl #16
   1a764:	andeq	sl, r1, r8, lsl #17
   1a768:	andeq	sl, r1, r8, lsl #17
   1a76c:	andeq	sl, r1, r0, lsl #16
   1a770:	andeq	sl, r1, r8, lsl #17
   1a774:	andeq	sl, r1, r8, lsl #17
   1a778:	andeq	sl, r1, r8, lsl #17
   1a77c:	andeq	sl, r1, r0, lsl #16
   1a780:	andeq	sl, r1, r8, lsl #17
   1a784:	andeq	sl, r1, r8, lsl #17
   1a788:	andeq	sl, r1, r8, lsl #17
   1a78c:	andeq	sl, r1, r8, lsl #17
   1a790:	andeq	sl, r1, r0, lsl #16
   1a794:	andeq	sl, r1, r0, lsl #16
   1a798:	andeq	sl, r1, r8, lsl #17
   1a79c:	andeq	sl, r1, r8, lsl #17
   1a7a0:	andeq	sl, r1, r8, lsl #17
   1a7a4:	andeq	sl, r1, r8, lsl #17
   1a7a8:	andeq	sl, r1, r8, lsl #17
   1a7ac:	andeq	sl, r1, r8, lsl #17
   1a7b0:	andeq	sl, r1, r8, lsl #17
   1a7b4:	andeq	sl, r1, r8, lsl #17
   1a7b8:	andeq	sl, r1, r8, lsl #17
   1a7bc:	andeq	sl, r1, r8, lsl #17
   1a7c0:	andeq	sl, r1, r8, lsl #17
   1a7c4:	andeq	sl, r1, r8, lsl #17
   1a7c8:	andeq	sl, r1, r0, lsl #16
   1a7cc:	andeq	sl, r1, r8, lsl #17
   1a7d0:	andeq	sl, r1, r8, lsl #17
   1a7d4:	andeq	sl, r1, r8, lsl #17
   1a7d8:	andeq	sl, r1, r0, lsl #16
   1a7dc:	andeq	sl, r1, r8, lsl #17
   1a7e0:	andeq	sl, r1, r0, lsl #16
   1a7e4:	andeq	sl, r1, r8, lsl #17
   1a7e8:	andeq	sl, r1, r8, lsl #17
   1a7ec:	andeq	sl, r1, r8, lsl #17
   1a7f0:	andeq	sl, r1, r8, lsl #17
   1a7f4:	andeq	sl, r1, r8, lsl #17
   1a7f8:	andeq	sl, r1, r8, lsl #17
   1a7fc:	andeq	sl, r1, r0, lsl #16
   1a800:	mov	r1, #48	; 0x30
   1a804:	ldr	r0, [fp, #4]
   1a808:	bl	10e68 <strchr@plt>
   1a80c:	mov	r3, r0
   1a810:	cmp	r3, #0
   1a814:	beq	1a888 <__assert_fail@plt+0x993c>
   1a818:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a81c:	ldr	r3, [r3]
   1a820:	add	r3, r3, #1
   1a824:	ldrb	r3, [r3]
   1a828:	cmp	r3, #68	; 0x44
   1a82c:	beq	1a86c <__assert_fail@plt+0x9920>
   1a830:	cmp	r3, #105	; 0x69
   1a834:	beq	1a844 <__assert_fail@plt+0x98f8>
   1a838:	cmp	r3, #66	; 0x42
   1a83c:	beq	1a86c <__assert_fail@plt+0x9920>
   1a840:	b	1a888 <__assert_fail@plt+0x993c>
   1a844:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a848:	ldr	r3, [r3]
   1a84c:	add	r3, r3, #2
   1a850:	ldrb	r3, [r3]
   1a854:	cmp	r3, #66	; 0x42
   1a858:	bne	1a884 <__assert_fail@plt+0x9938>
   1a85c:	ldr	r3, [fp, #-16]
   1a860:	add	r3, r3, #2
   1a864:	str	r3, [fp, #-16]
   1a868:	b	1a884 <__assert_fail@plt+0x9938>
   1a86c:	mov	r3, #1000	; 0x3e8
   1a870:	str	r3, [fp, #-12]
   1a874:	ldr	r3, [fp, #-16]
   1a878:	add	r3, r3, #1
   1a87c:	str	r3, [fp, #-16]
   1a880:	b	1a888 <__assert_fail@plt+0x993c>
   1a884:	nop			; (mov r0, r0)
   1a888:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a88c:	ldr	r3, [r3]
   1a890:	ldrb	r3, [r3]
   1a894:	sub	r3, r3, #66	; 0x42
   1a898:	cmp	r3, #53	; 0x35
   1a89c:	ldrls	pc, [pc, r3, lsl #2]
   1a8a0:	b	1aab0 <__assert_fail@plt+0x9b64>
   1a8a4:	muleq	r1, r4, r9
   1a8a8:			; <UNDEFINED> instruction: 0x0001aab0
   1a8ac:			; <UNDEFINED> instruction: 0x0001aab0
   1a8b0:			; <UNDEFINED> instruction: 0x0001a9b8
   1a8b4:			; <UNDEFINED> instruction: 0x0001aab0
   1a8b8:	ldrdeq	sl, [r1], -r4
   1a8bc:			; <UNDEFINED> instruction: 0x0001aab0
   1a8c0:			; <UNDEFINED> instruction: 0x0001aab0
   1a8c4:			; <UNDEFINED> instruction: 0x0001aab0
   1a8c8:	strdeq	sl, [r1], -r0
   1a8cc:			; <UNDEFINED> instruction: 0x0001aab0
   1a8d0:	andeq	sl, r1, ip, lsl #20
   1a8d4:			; <UNDEFINED> instruction: 0x0001aab0
   1a8d8:			; <UNDEFINED> instruction: 0x0001aab0
   1a8dc:	andeq	sl, r1, r8, lsr #20
   1a8e0:			; <UNDEFINED> instruction: 0x0001aab0
   1a8e4:			; <UNDEFINED> instruction: 0x0001aab0
   1a8e8:			; <UNDEFINED> instruction: 0x0001aab0
   1a8ec:	andeq	sl, r1, r4, asr #20
   1a8f0:			; <UNDEFINED> instruction: 0x0001aab0
   1a8f4:			; <UNDEFINED> instruction: 0x0001aab0
   1a8f8:			; <UNDEFINED> instruction: 0x0001aab0
   1a8fc:			; <UNDEFINED> instruction: 0x0001aab0
   1a900:	andeq	sl, r1, r8, ror sl
   1a904:	muleq	r1, r4, sl
   1a908:			; <UNDEFINED> instruction: 0x0001aab0
   1a90c:			; <UNDEFINED> instruction: 0x0001aab0
   1a910:			; <UNDEFINED> instruction: 0x0001aab0
   1a914:			; <UNDEFINED> instruction: 0x0001aab0
   1a918:			; <UNDEFINED> instruction: 0x0001aab0
   1a91c:			; <UNDEFINED> instruction: 0x0001aab0
   1a920:			; <UNDEFINED> instruction: 0x0001aab0
   1a924:	andeq	sl, r1, ip, ror r9
   1a928:	andeq	sl, r1, ip, lsr #19
   1a92c:			; <UNDEFINED> instruction: 0x0001aab0
   1a930:			; <UNDEFINED> instruction: 0x0001aab0
   1a934:			; <UNDEFINED> instruction: 0x0001aab0
   1a938:	ldrdeq	sl, [r1], -r4
   1a93c:			; <UNDEFINED> instruction: 0x0001aab0
   1a940:			; <UNDEFINED> instruction: 0x0001aab0
   1a944:			; <UNDEFINED> instruction: 0x0001aab0
   1a948:	strdeq	sl, [r1], -r0
   1a94c:			; <UNDEFINED> instruction: 0x0001aab0
   1a950:	andeq	sl, r1, ip, lsl #20
   1a954:			; <UNDEFINED> instruction: 0x0001aab0
   1a958:			; <UNDEFINED> instruction: 0x0001aab0
   1a95c:			; <UNDEFINED> instruction: 0x0001aab0
   1a960:			; <UNDEFINED> instruction: 0x0001aab0
   1a964:			; <UNDEFINED> instruction: 0x0001aab0
   1a968:			; <UNDEFINED> instruction: 0x0001aab0
   1a96c:	andeq	sl, r1, r4, asr #20
   1a970:			; <UNDEFINED> instruction: 0x0001aab0
   1a974:			; <UNDEFINED> instruction: 0x0001aab0
   1a978:	andeq	sl, r1, r0, ror #20
   1a97c:	sub	r3, fp, #36	; 0x24
   1a980:	mov	r1, #512	; 0x200
   1a984:	mov	r0, r3
   1a988:	bl	1a234 <__assert_fail@plt+0x92e8>
   1a98c:	str	r0, [fp, #-20]	; 0xffffffec
   1a990:	b	1aac8 <__assert_fail@plt+0x9b7c>
   1a994:	sub	r3, fp, #36	; 0x24
   1a998:	mov	r1, #1024	; 0x400
   1a99c:	mov	r0, r3
   1a9a0:	bl	1a234 <__assert_fail@plt+0x92e8>
   1a9a4:	str	r0, [fp, #-20]	; 0xffffffec
   1a9a8:	b	1aac8 <__assert_fail@plt+0x9b7c>
   1a9ac:	mov	r3, #0
   1a9b0:	str	r3, [fp, #-20]	; 0xffffffec
   1a9b4:	b	1aac8 <__assert_fail@plt+0x9b7c>
   1a9b8:	sub	r3, fp, #36	; 0x24
   1a9bc:	mov	r2, #6
   1a9c0:	ldr	r1, [fp, #-12]
   1a9c4:	mov	r0, r3
   1a9c8:	bl	1a500 <__assert_fail@plt+0x95b4>
   1a9cc:	str	r0, [fp, #-20]	; 0xffffffec
   1a9d0:	b	1aac8 <__assert_fail@plt+0x9b7c>
   1a9d4:	sub	r3, fp, #36	; 0x24
   1a9d8:	mov	r2, #3
   1a9dc:	ldr	r1, [fp, #-12]
   1a9e0:	mov	r0, r3
   1a9e4:	bl	1a500 <__assert_fail@plt+0x95b4>
   1a9e8:	str	r0, [fp, #-20]	; 0xffffffec
   1a9ec:	b	1aac8 <__assert_fail@plt+0x9b7c>
   1a9f0:	sub	r3, fp, #36	; 0x24
   1a9f4:	mov	r2, #1
   1a9f8:	ldr	r1, [fp, #-12]
   1a9fc:	mov	r0, r3
   1aa00:	bl	1a500 <__assert_fail@plt+0x95b4>
   1aa04:	str	r0, [fp, #-20]	; 0xffffffec
   1aa08:	b	1aac8 <__assert_fail@plt+0x9b7c>
   1aa0c:	sub	r3, fp, #36	; 0x24
   1aa10:	mov	r2, #2
   1aa14:	ldr	r1, [fp, #-12]
   1aa18:	mov	r0, r3
   1aa1c:	bl	1a500 <__assert_fail@plt+0x95b4>
   1aa20:	str	r0, [fp, #-20]	; 0xffffffec
   1aa24:	b	1aac8 <__assert_fail@plt+0x9b7c>
   1aa28:	sub	r3, fp, #36	; 0x24
   1aa2c:	mov	r2, #5
   1aa30:	ldr	r1, [fp, #-12]
   1aa34:	mov	r0, r3
   1aa38:	bl	1a500 <__assert_fail@plt+0x95b4>
   1aa3c:	str	r0, [fp, #-20]	; 0xffffffec
   1aa40:	b	1aac8 <__assert_fail@plt+0x9b7c>
   1aa44:	sub	r3, fp, #36	; 0x24
   1aa48:	mov	r2, #4
   1aa4c:	ldr	r1, [fp, #-12]
   1aa50:	mov	r0, r3
   1aa54:	bl	1a500 <__assert_fail@plt+0x95b4>
   1aa58:	str	r0, [fp, #-20]	; 0xffffffec
   1aa5c:	b	1aac8 <__assert_fail@plt+0x9b7c>
   1aa60:	sub	r3, fp, #36	; 0x24
   1aa64:	mov	r1, #2
   1aa68:	mov	r0, r3
   1aa6c:	bl	1a234 <__assert_fail@plt+0x92e8>
   1aa70:	str	r0, [fp, #-20]	; 0xffffffec
   1aa74:	b	1aac8 <__assert_fail@plt+0x9b7c>
   1aa78:	sub	r3, fp, #36	; 0x24
   1aa7c:	mov	r2, #8
   1aa80:	ldr	r1, [fp, #-12]
   1aa84:	mov	r0, r3
   1aa88:	bl	1a500 <__assert_fail@plt+0x95b4>
   1aa8c:	str	r0, [fp, #-20]	; 0xffffffec
   1aa90:	b	1aac8 <__assert_fail@plt+0x9b7c>
   1aa94:	sub	r3, fp, #36	; 0x24
   1aa98:	mov	r2, #7
   1aa9c:	ldr	r1, [fp, #-12]
   1aaa0:	mov	r0, r3
   1aaa4:	bl	1a500 <__assert_fail@plt+0x95b4>
   1aaa8:	str	r0, [fp, #-20]	; 0xffffffec
   1aaac:	b	1aac8 <__assert_fail@plt+0x9b7c>
   1aab0:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1aab4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1aab8:	strd	r2, [r1]
   1aabc:	ldr	r3, [fp, #-8]
   1aac0:	orr	r3, r3, #2
   1aac4:	b	1ab20 <__assert_fail@plt+0x9bd4>
   1aac8:	ldr	r2, [fp, #-8]
   1aacc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aad0:	orr	r3, r2, r3
   1aad4:	str	r3, [fp, #-8]
   1aad8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1aadc:	ldr	r2, [r3]
   1aae0:	ldr	r3, [fp, #-16]
   1aae4:	add	r2, r2, r3
   1aae8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1aaec:	str	r2, [r3]
   1aaf0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1aaf4:	ldr	r3, [r3]
   1aaf8:	ldrb	r3, [r3]
   1aafc:	cmp	r3, #0
   1ab00:	beq	1ab10 <__assert_fail@plt+0x9bc4>
   1ab04:	ldr	r3, [fp, #-8]
   1ab08:	orr	r3, r3, #2
   1ab0c:	str	r3, [fp, #-8]
   1ab10:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1ab14:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1ab18:	strd	r2, [r1]
   1ab1c:	ldr	r3, [fp, #-8]
   1ab20:	mov	r0, r3
   1ab24:	sub	sp, fp, #4
   1ab28:	pop	{fp, pc}
   1ab2c:	andeq	ip, r1, r4, lsr #24
   1ab30:	andeq	ip, r1, ip, ror #23
   1ab34:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ab38:	push	{r4, r5, fp, lr}
   1ab3c:	add	fp, sp, #12
   1ab40:	sub	sp, sp, #16
   1ab44:	str	r0, [fp, #-24]	; 0xffffffe8
   1ab48:	str	r1, [fp, #-28]	; 0xffffffe4
   1ab4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ab50:	cmp	r3, #0
   1ab54:	beq	1ab64 <__assert_fail@plt+0x9c18>
   1ab58:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ab5c:	cmp	r3, #0
   1ab60:	bne	1ab74 <__assert_fail@plt+0x9c28>
   1ab64:	mov	r3, #1
   1ab68:	str	r3, [fp, #-28]	; 0xffffffe4
   1ab6c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ab70:	str	r3, [fp, #-24]	; 0xffffffe8
   1ab74:	mov	r1, #0
   1ab78:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ab7c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ab80:	umull	r2, r3, r2, r3
   1ab84:	mov	r4, r3
   1ab88:	mov	r5, #0
   1ab8c:	cmp	r4, #0
   1ab90:	beq	1ab98 <__assert_fail@plt+0x9c4c>
   1ab94:	mov	r1, #1
   1ab98:	cmp	r2, #0
   1ab9c:	bge	1aba4 <__assert_fail@plt+0x9c58>
   1aba0:	mov	r1, #1
   1aba4:	mov	r3, r2
   1aba8:	str	r3, [fp, #-20]	; 0xffffffec
   1abac:	mov	r3, r1
   1abb0:	and	r3, r3, #1
   1abb4:	uxtb	r3, r3
   1abb8:	cmp	r3, #0
   1abbc:	beq	1abd8 <__assert_fail@plt+0x9c8c>
   1abc0:	bl	10e80 <__errno_location@plt>
   1abc4:	mov	r2, r0
   1abc8:	mov	r3, #12
   1abcc:	str	r3, [r2]
   1abd0:	mov	r3, #0
   1abd4:	b	1abf0 <__assert_fail@plt+0x9ca4>
   1abd8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1abdc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1abe0:	bl	10cd0 <calloc@plt>
   1abe4:	mov	r3, r0
   1abe8:	str	r3, [fp, #-16]
   1abec:	ldr	r3, [fp, #-16]
   1abf0:	mov	r0, r3
   1abf4:	sub	sp, fp, #12
   1abf8:	pop	{r4, r5, fp, pc}
   1abfc:	push	{r4, r5, fp, lr}
   1ac00:	add	fp, sp, #12
   1ac04:	sub	sp, sp, #16
   1ac08:	str	r0, [fp, #-24]	; 0xffffffe8
   1ac0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ac10:	cmp	r3, #0
   1ac14:	bne	1ac20 <__assert_fail@plt+0x9cd4>
   1ac18:	mov	r3, #1
   1ac1c:	str	r3, [fp, #-24]	; 0xffffffe8
   1ac20:	mov	r1, #0
   1ac24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ac28:	mov	r2, r3
   1ac2c:	mov	r3, #0
   1ac30:	mov	r4, r3
   1ac34:	mov	r5, #0
   1ac38:	cmp	r4, #0
   1ac3c:	beq	1ac44 <__assert_fail@plt+0x9cf8>
   1ac40:	mov	r1, #1
   1ac44:	cmp	r2, #0
   1ac48:	bge	1ac50 <__assert_fail@plt+0x9d04>
   1ac4c:	mov	r1, #1
   1ac50:	mov	r3, r2
   1ac54:	str	r3, [fp, #-20]	; 0xffffffec
   1ac58:	mov	r3, r1
   1ac5c:	and	r3, r3, #1
   1ac60:	uxtb	r3, r3
   1ac64:	cmp	r3, #0
   1ac68:	beq	1ac84 <__assert_fail@plt+0x9d38>
   1ac6c:	bl	10e80 <__errno_location@plt>
   1ac70:	mov	r2, r0
   1ac74:	mov	r3, #12
   1ac78:	str	r3, [r2]
   1ac7c:	mov	r3, #0
   1ac80:	b	1ac98 <__assert_fail@plt+0x9d4c>
   1ac84:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ac88:	bl	10dfc <malloc@plt>
   1ac8c:	mov	r3, r0
   1ac90:	str	r3, [fp, #-16]
   1ac94:	ldr	r3, [fp, #-16]
   1ac98:	mov	r0, r3
   1ac9c:	sub	sp, fp, #12
   1aca0:	pop	{r4, r5, fp, pc}
   1aca4:	push	{r4, r5, fp, lr}
   1aca8:	add	fp, sp, #12
   1acac:	sub	sp, sp, #16
   1acb0:	str	r0, [fp, #-24]	; 0xffffffe8
   1acb4:	str	r1, [fp, #-28]	; 0xffffffe4
   1acb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1acbc:	cmp	r3, #0
   1acc0:	bne	1acd4 <__assert_fail@plt+0x9d88>
   1acc4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1acc8:	bl	1abfc <__assert_fail@plt+0x9cb0>
   1accc:	mov	r3, r0
   1acd0:	b	1ad68 <__assert_fail@plt+0x9e1c>
   1acd4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1acd8:	cmp	r3, #0
   1acdc:	bne	1acf0 <__assert_fail@plt+0x9da4>
   1ace0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ace4:	bl	163e4 <__assert_fail@plt+0x5498>
   1ace8:	mov	r3, #0
   1acec:	b	1ad68 <__assert_fail@plt+0x9e1c>
   1acf0:	mov	r1, #0
   1acf4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1acf8:	mov	r2, r3
   1acfc:	mov	r3, #0
   1ad00:	mov	r4, r3
   1ad04:	mov	r5, #0
   1ad08:	cmp	r4, #0
   1ad0c:	beq	1ad14 <__assert_fail@plt+0x9dc8>
   1ad10:	mov	r1, #1
   1ad14:	cmp	r2, #0
   1ad18:	bge	1ad20 <__assert_fail@plt+0x9dd4>
   1ad1c:	mov	r1, #1
   1ad20:	mov	r3, r2
   1ad24:	str	r3, [fp, #-20]	; 0xffffffec
   1ad28:	mov	r3, r1
   1ad2c:	and	r3, r3, #1
   1ad30:	uxtb	r3, r3
   1ad34:	cmp	r3, #0
   1ad38:	beq	1ad54 <__assert_fail@plt+0x9e08>
   1ad3c:	bl	10e80 <__errno_location@plt>
   1ad40:	mov	r2, r0
   1ad44:	mov	r3, #12
   1ad48:	str	r3, [r2]
   1ad4c:	mov	r3, #0
   1ad50:	b	1ad68 <__assert_fail@plt+0x9e1c>
   1ad54:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1ad58:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ad5c:	bl	10d84 <realloc@plt>
   1ad60:	str	r0, [fp, #-16]
   1ad64:	ldr	r3, [fp, #-16]
   1ad68:	mov	r0, r3
   1ad6c:	sub	sp, fp, #12
   1ad70:	pop	{r4, r5, fp, pc}
   1ad74:	push	{fp}		; (str fp, [sp, #-4]!)
   1ad78:	add	fp, sp, #0
   1ad7c:	sub	sp, sp, #12
   1ad80:	str	r0, [fp, #-8]
   1ad84:	str	r1, [fp, #-12]
   1ad88:	mov	r3, #0
   1ad8c:	mov	r0, r3
   1ad90:	add	sp, fp, #0
   1ad94:	pop	{fp}		; (ldr fp, [sp], #4)
   1ad98:	bx	lr
   1ad9c:	push	{fp, lr}
   1ada0:	add	fp, sp, #4
   1ada4:	sub	sp, sp, #8
   1ada8:	str	r0, [fp, #-8]
   1adac:	str	r1, [fp, #-12]
   1adb0:	ldr	r1, [fp, #-12]
   1adb4:	ldr	r0, [fp, #-8]
   1adb8:	bl	1ad74 <__assert_fail@plt+0x9e28>
   1adbc:	mov	r3, r0
   1adc0:	mov	r0, r3
   1adc4:	sub	sp, fp, #4
   1adc8:	pop	{fp, pc}
   1adcc:	push	{r4, r5, fp, lr}
   1add0:	add	fp, sp, #12
   1add4:	sub	sp, sp, #16
   1add8:	str	r0, [fp, #-24]	; 0xffffffe8
   1addc:	str	r1, [fp, #-28]	; 0xffffffe4
   1ade0:	ldr	r5, [fp, #-24]	; 0xffffffe8
   1ade4:	ldr	r4, [fp, #-28]	; 0xffffffe4
   1ade8:	cmp	r5, r4
   1adec:	bne	1adf8 <__assert_fail@plt+0x9eac>
   1adf0:	mov	r3, #0
   1adf4:	b	1ae58 <__assert_fail@plt+0x9f0c>
   1adf8:	ldrb	r3, [r5]
   1adfc:	mov	r0, r3
   1ae00:	bl	15f90 <__assert_fail@plt+0x5044>
   1ae04:	mov	r3, r0
   1ae08:	strb	r3, [fp, #-13]
   1ae0c:	ldrb	r3, [r4]
   1ae10:	mov	r0, r3
   1ae14:	bl	15f90 <__assert_fail@plt+0x5044>
   1ae18:	mov	r3, r0
   1ae1c:	strb	r3, [fp, #-14]
   1ae20:	ldrb	r3, [fp, #-13]
   1ae24:	cmp	r3, #0
   1ae28:	beq	1ae48 <__assert_fail@plt+0x9efc>
   1ae2c:	add	r5, r5, #1
   1ae30:	add	r4, r4, #1
   1ae34:	ldrb	r2, [fp, #-13]
   1ae38:	ldrb	r3, [fp, #-14]
   1ae3c:	cmp	r2, r3
   1ae40:	beq	1adf8 <__assert_fail@plt+0x9eac>
   1ae44:	b	1ae4c <__assert_fail@plt+0x9f00>
   1ae48:	nop			; (mov r0, r0)
   1ae4c:	ldrb	r2, [fp, #-13]
   1ae50:	ldrb	r3, [fp, #-14]
   1ae54:	sub	r3, r2, r3
   1ae58:	mov	r0, r3
   1ae5c:	sub	sp, fp, #12
   1ae60:	pop	{r4, r5, fp, pc}
   1ae64:	push	{fp, lr}
   1ae68:	add	fp, sp, #4
   1ae6c:	sub	sp, sp, #16
   1ae70:	str	r0, [fp, #-16]
   1ae74:	ldr	r0, [fp, #-16]
   1ae78:	bl	10dcc <__fpending@plt>
   1ae7c:	mov	r3, r0
   1ae80:	cmp	r3, #0
   1ae84:	movne	r3, #1
   1ae88:	moveq	r3, #0
   1ae8c:	strb	r3, [fp, #-5]
   1ae90:	ldr	r0, [fp, #-16]
   1ae94:	bl	10dd8 <ferror_unlocked@plt>
   1ae98:	mov	r3, r0
   1ae9c:	cmp	r3, #0
   1aea0:	movne	r3, #1
   1aea4:	moveq	r3, #0
   1aea8:	strb	r3, [fp, #-6]
   1aeac:	ldr	r0, [fp, #-16]
   1aeb0:	bl	16244 <__assert_fail@plt+0x52f8>
   1aeb4:	mov	r3, r0
   1aeb8:	cmp	r3, #0
   1aebc:	movne	r3, #1
   1aec0:	moveq	r3, #0
   1aec4:	strb	r3, [fp, #-7]
   1aec8:	ldrb	r3, [fp, #-6]
   1aecc:	cmp	r3, #0
   1aed0:	bne	1af00 <__assert_fail@plt+0x9fb4>
   1aed4:	ldrb	r3, [fp, #-7]
   1aed8:	cmp	r3, #0
   1aedc:	beq	1af2c <__assert_fail@plt+0x9fe0>
   1aee0:	ldrb	r3, [fp, #-5]
   1aee4:	cmp	r3, #0
   1aee8:	bne	1af00 <__assert_fail@plt+0x9fb4>
   1aeec:	bl	10e80 <__errno_location@plt>
   1aef0:	mov	r3, r0
   1aef4:	ldr	r3, [r3]
   1aef8:	cmp	r3, #9
   1aefc:	beq	1af2c <__assert_fail@plt+0x9fe0>
   1af00:	ldrb	r3, [fp, #-7]
   1af04:	eor	r3, r3, #1
   1af08:	uxtb	r3, r3
   1af0c:	cmp	r3, #0
   1af10:	beq	1af24 <__assert_fail@plt+0x9fd8>
   1af14:	bl	10e80 <__errno_location@plt>
   1af18:	mov	r2, r0
   1af1c:	mov	r3, #0
   1af20:	str	r3, [r2]
   1af24:	mvn	r3, #0
   1af28:	b	1af30 <__assert_fail@plt+0x9fe4>
   1af2c:	mov	r3, #0
   1af30:	mov	r0, r3
   1af34:	sub	sp, fp, #4
   1af38:	pop	{fp, pc}
   1af3c:	push	{fp, lr}
   1af40:	add	fp, sp, #4
   1af44:	sub	sp, sp, #8
   1af48:	mov	r0, #14
   1af4c:	bl	10ef8 <nl_langinfo@plt>
   1af50:	str	r0, [fp, #-8]
   1af54:	ldr	r3, [fp, #-8]
   1af58:	cmp	r3, #0
   1af5c:	bne	1af68 <__assert_fail@plt+0xa01c>
   1af60:	ldr	r3, [pc, #40]	; 1af90 <__assert_fail@plt+0xa044>
   1af64:	str	r3, [fp, #-8]
   1af68:	ldr	r3, [fp, #-8]
   1af6c:	ldrb	r3, [r3]
   1af70:	cmp	r3, #0
   1af74:	bne	1af80 <__assert_fail@plt+0xa034>
   1af78:	ldr	r3, [pc, #20]	; 1af94 <__assert_fail@plt+0xa048>
   1af7c:	str	r3, [fp, #-8]
   1af80:	ldr	r3, [fp, #-8]
   1af84:	mov	r0, r3
   1af88:	sub	sp, fp, #4
   1af8c:	pop	{fp, pc}
   1af90:	andeq	ip, r1, r0, lsr ip
   1af94:	andeq	ip, r1, r4, lsr ip
   1af98:	push	{fp, lr}
   1af9c:	add	fp, sp, #4
   1afa0:	sub	sp, sp, #32
   1afa4:	str	r0, [fp, #-24]	; 0xffffffe8
   1afa8:	str	r1, [fp, #-28]	; 0xffffffe4
   1afac:	str	r2, [fp, #-32]	; 0xffffffe0
   1afb0:	str	r3, [fp, #-36]	; 0xffffffdc
   1afb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1afb8:	cmp	r3, #0
   1afbc:	bne	1afc8 <__assert_fail@plt+0xa07c>
   1afc0:	sub	r3, fp, #16
   1afc4:	str	r3, [fp, #-24]	; 0xffffffe8
   1afc8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1afcc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1afd0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1afd4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1afd8:	bl	10de4 <mbrtowc@plt>
   1afdc:	str	r0, [fp, #-8]
   1afe0:	ldr	r3, [fp, #-8]
   1afe4:	cmn	r3, #3
   1afe8:	bls	1b034 <__assert_fail@plt+0xa0e8>
   1afec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1aff0:	cmp	r3, #0
   1aff4:	beq	1b034 <__assert_fail@plt+0xa0e8>
   1aff8:	mov	r0, #0
   1affc:	bl	1b044 <__assert_fail@plt+0xa0f8>
   1b000:	mov	r3, r0
   1b004:	eor	r3, r3, #1
   1b008:	uxtb	r3, r3
   1b00c:	cmp	r3, #0
   1b010:	beq	1b034 <__assert_fail@plt+0xa0e8>
   1b014:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b018:	ldrb	r3, [r3]
   1b01c:	strb	r3, [fp, #-9]
   1b020:	ldrb	r2, [fp, #-9]
   1b024:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b028:	str	r2, [r3]
   1b02c:	mov	r3, #1
   1b030:	b	1b038 <__assert_fail@plt+0xa0ec>
   1b034:	ldr	r3, [fp, #-8]
   1b038:	mov	r0, r3
   1b03c:	sub	sp, fp, #4
   1b040:	pop	{fp, pc}
   1b044:	push	{fp, lr}
   1b048:	add	fp, sp, #4
   1b04c:	sub	sp, sp, #272	; 0x110
   1b050:	str	r0, [fp, #-272]	; 0xfffffef0
   1b054:	sub	r3, fp, #264	; 0x108
   1b058:	ldr	r2, [pc, #116]	; 1b0d4 <__assert_fail@plt+0xa188>
   1b05c:	mov	r1, r3
   1b060:	ldr	r0, [fp, #-272]	; 0xfffffef0
   1b064:	bl	1b1e8 <__assert_fail@plt+0xa29c>
   1b068:	mov	r3, r0
   1b06c:	cmp	r3, #0
   1b070:	beq	1b07c <__assert_fail@plt+0xa130>
   1b074:	mov	r3, #0
   1b078:	b	1b0c8 <__assert_fail@plt+0xa17c>
   1b07c:	sub	r3, fp, #264	; 0x108
   1b080:	ldr	r1, [pc, #80]	; 1b0d8 <__assert_fail@plt+0xa18c>
   1b084:	mov	r0, r3
   1b088:	bl	10cf4 <strcmp@plt>
   1b08c:	mov	r3, r0
   1b090:	cmp	r3, #0
   1b094:	beq	1b0bc <__assert_fail@plt+0xa170>
   1b098:	sub	r3, fp, #264	; 0x108
   1b09c:	ldr	r1, [pc, #56]	; 1b0dc <__assert_fail@plt+0xa190>
   1b0a0:	mov	r0, r3
   1b0a4:	bl	10cf4 <strcmp@plt>
   1b0a8:	mov	r3, r0
   1b0ac:	cmp	r3, #0
   1b0b0:	beq	1b0bc <__assert_fail@plt+0xa170>
   1b0b4:	mov	r3, #1
   1b0b8:	b	1b0c0 <__assert_fail@plt+0xa174>
   1b0bc:	mov	r3, #0
   1b0c0:	and	r3, r3, #1
   1b0c4:	uxtb	r3, r3
   1b0c8:	mov	r0, r3
   1b0cc:	sub	sp, fp, #4
   1b0d0:	pop	{fp, pc}
   1b0d4:	andeq	r0, r0, r1, lsl #2
   1b0d8:	andeq	ip, r1, ip, lsr ip
   1b0dc:	andeq	ip, r1, r0, asr #24
   1b0e0:	push	{fp, lr}
   1b0e4:	add	fp, sp, #4
   1b0e8:	sub	sp, sp, #16
   1b0ec:	str	r0, [fp, #-16]
   1b0f0:	mov	r1, #0
   1b0f4:	ldr	r0, [fp, #-16]
   1b0f8:	bl	10ee0 <setlocale@plt>
   1b0fc:	str	r0, [fp, #-8]
   1b100:	ldr	r3, [fp, #-8]
   1b104:	mov	r0, r3
   1b108:	sub	sp, fp, #4
   1b10c:	pop	{fp, pc}
   1b110:	push	{fp, lr}
   1b114:	add	fp, sp, #4
   1b118:	sub	sp, sp, #24
   1b11c:	str	r0, [fp, #-16]
   1b120:	str	r1, [fp, #-20]	; 0xffffffec
   1b124:	str	r2, [fp, #-24]	; 0xffffffe8
   1b128:	ldr	r0, [fp, #-16]
   1b12c:	bl	1b0e0 <__assert_fail@plt+0xa194>
   1b130:	str	r0, [fp, #-8]
   1b134:	ldr	r3, [fp, #-8]
   1b138:	cmp	r3, #0
   1b13c:	bne	1b160 <__assert_fail@plt+0xa214>
   1b140:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b144:	cmp	r3, #0
   1b148:	beq	1b158 <__assert_fail@plt+0xa20c>
   1b14c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b150:	mov	r2, #0
   1b154:	strb	r2, [r3]
   1b158:	mov	r3, #22
   1b15c:	b	1b1dc <__assert_fail@plt+0xa290>
   1b160:	ldr	r0, [fp, #-8]
   1b164:	bl	10e5c <strlen@plt>
   1b168:	str	r0, [fp, #-12]
   1b16c:	ldr	r2, [fp, #-12]
   1b170:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b174:	cmp	r2, r3
   1b178:	bcs	1b19c <__assert_fail@plt+0xa250>
   1b17c:	ldr	r3, [fp, #-12]
   1b180:	add	r3, r3, #1
   1b184:	mov	r2, r3
   1b188:	ldr	r1, [fp, #-8]
   1b18c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1b190:	bl	10d48 <memcpy@plt>
   1b194:	mov	r3, #0
   1b198:	b	1b1dc <__assert_fail@plt+0xa290>
   1b19c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b1a0:	cmp	r3, #0
   1b1a4:	beq	1b1d8 <__assert_fail@plt+0xa28c>
   1b1a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b1ac:	sub	r3, r3, #1
   1b1b0:	mov	r2, r3
   1b1b4:	ldr	r1, [fp, #-8]
   1b1b8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1b1bc:	bl	10d48 <memcpy@plt>
   1b1c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b1c4:	sub	r3, r3, #1
   1b1c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b1cc:	add	r3, r2, r3
   1b1d0:	mov	r2, #0
   1b1d4:	strb	r2, [r3]
   1b1d8:	mov	r3, #34	; 0x22
   1b1dc:	mov	r0, r3
   1b1e0:	sub	sp, fp, #4
   1b1e4:	pop	{fp, pc}
   1b1e8:	push	{fp, lr}
   1b1ec:	add	fp, sp, #4
   1b1f0:	sub	sp, sp, #16
   1b1f4:	str	r0, [fp, #-8]
   1b1f8:	str	r1, [fp, #-12]
   1b1fc:	str	r2, [fp, #-16]
   1b200:	ldr	r2, [fp, #-16]
   1b204:	ldr	r1, [fp, #-12]
   1b208:	ldr	r0, [fp, #-8]
   1b20c:	bl	1b110 <__assert_fail@plt+0xa1c4>
   1b210:	mov	r3, r0
   1b214:	mov	r0, r3
   1b218:	sub	sp, fp, #4
   1b21c:	pop	{fp, pc}
   1b220:	push	{fp, lr}
   1b224:	add	fp, sp, #4
   1b228:	sub	sp, sp, #8
   1b22c:	str	r0, [fp, #-8]
   1b230:	ldr	r0, [fp, #-8]
   1b234:	bl	1b0e0 <__assert_fail@plt+0xa194>
   1b238:	mov	r3, r0
   1b23c:	mov	r0, r3
   1b240:	sub	sp, fp, #4
   1b244:	pop	{fp, pc}
   1b248:	subs	r2, r1, #1
   1b24c:	bxeq	lr
   1b250:	bcc	1b428 <__assert_fail@plt+0xa4dc>
   1b254:	cmp	r0, r1
   1b258:	bls	1b40c <__assert_fail@plt+0xa4c0>
   1b25c:	tst	r1, r2
   1b260:	beq	1b418 <__assert_fail@plt+0xa4cc>
   1b264:	clz	r3, r0
   1b268:	clz	r2, r1
   1b26c:	sub	r3, r2, r3
   1b270:	rsbs	r3, r3, #31
   1b274:	addne	r3, r3, r3, lsl #1
   1b278:	mov	r2, #0
   1b27c:	addne	pc, pc, r3, lsl #2
   1b280:	nop			; (mov r0, r0)
   1b284:	cmp	r0, r1, lsl #31
   1b288:	adc	r2, r2, r2
   1b28c:	subcs	r0, r0, r1, lsl #31
   1b290:	cmp	r0, r1, lsl #30
   1b294:	adc	r2, r2, r2
   1b298:	subcs	r0, r0, r1, lsl #30
   1b29c:	cmp	r0, r1, lsl #29
   1b2a0:	adc	r2, r2, r2
   1b2a4:	subcs	r0, r0, r1, lsl #29
   1b2a8:	cmp	r0, r1, lsl #28
   1b2ac:	adc	r2, r2, r2
   1b2b0:	subcs	r0, r0, r1, lsl #28
   1b2b4:	cmp	r0, r1, lsl #27
   1b2b8:	adc	r2, r2, r2
   1b2bc:	subcs	r0, r0, r1, lsl #27
   1b2c0:	cmp	r0, r1, lsl #26
   1b2c4:	adc	r2, r2, r2
   1b2c8:	subcs	r0, r0, r1, lsl #26
   1b2cc:	cmp	r0, r1, lsl #25
   1b2d0:	adc	r2, r2, r2
   1b2d4:	subcs	r0, r0, r1, lsl #25
   1b2d8:	cmp	r0, r1, lsl #24
   1b2dc:	adc	r2, r2, r2
   1b2e0:	subcs	r0, r0, r1, lsl #24
   1b2e4:	cmp	r0, r1, lsl #23
   1b2e8:	adc	r2, r2, r2
   1b2ec:	subcs	r0, r0, r1, lsl #23
   1b2f0:	cmp	r0, r1, lsl #22
   1b2f4:	adc	r2, r2, r2
   1b2f8:	subcs	r0, r0, r1, lsl #22
   1b2fc:	cmp	r0, r1, lsl #21
   1b300:	adc	r2, r2, r2
   1b304:	subcs	r0, r0, r1, lsl #21
   1b308:	cmp	r0, r1, lsl #20
   1b30c:	adc	r2, r2, r2
   1b310:	subcs	r0, r0, r1, lsl #20
   1b314:	cmp	r0, r1, lsl #19
   1b318:	adc	r2, r2, r2
   1b31c:	subcs	r0, r0, r1, lsl #19
   1b320:	cmp	r0, r1, lsl #18
   1b324:	adc	r2, r2, r2
   1b328:	subcs	r0, r0, r1, lsl #18
   1b32c:	cmp	r0, r1, lsl #17
   1b330:	adc	r2, r2, r2
   1b334:	subcs	r0, r0, r1, lsl #17
   1b338:	cmp	r0, r1, lsl #16
   1b33c:	adc	r2, r2, r2
   1b340:	subcs	r0, r0, r1, lsl #16
   1b344:	cmp	r0, r1, lsl #15
   1b348:	adc	r2, r2, r2
   1b34c:	subcs	r0, r0, r1, lsl #15
   1b350:	cmp	r0, r1, lsl #14
   1b354:	adc	r2, r2, r2
   1b358:	subcs	r0, r0, r1, lsl #14
   1b35c:	cmp	r0, r1, lsl #13
   1b360:	adc	r2, r2, r2
   1b364:	subcs	r0, r0, r1, lsl #13
   1b368:	cmp	r0, r1, lsl #12
   1b36c:	adc	r2, r2, r2
   1b370:	subcs	r0, r0, r1, lsl #12
   1b374:	cmp	r0, r1, lsl #11
   1b378:	adc	r2, r2, r2
   1b37c:	subcs	r0, r0, r1, lsl #11
   1b380:	cmp	r0, r1, lsl #10
   1b384:	adc	r2, r2, r2
   1b388:	subcs	r0, r0, r1, lsl #10
   1b38c:	cmp	r0, r1, lsl #9
   1b390:	adc	r2, r2, r2
   1b394:	subcs	r0, r0, r1, lsl #9
   1b398:	cmp	r0, r1, lsl #8
   1b39c:	adc	r2, r2, r2
   1b3a0:	subcs	r0, r0, r1, lsl #8
   1b3a4:	cmp	r0, r1, lsl #7
   1b3a8:	adc	r2, r2, r2
   1b3ac:	subcs	r0, r0, r1, lsl #7
   1b3b0:	cmp	r0, r1, lsl #6
   1b3b4:	adc	r2, r2, r2
   1b3b8:	subcs	r0, r0, r1, lsl #6
   1b3bc:	cmp	r0, r1, lsl #5
   1b3c0:	adc	r2, r2, r2
   1b3c4:	subcs	r0, r0, r1, lsl #5
   1b3c8:	cmp	r0, r1, lsl #4
   1b3cc:	adc	r2, r2, r2
   1b3d0:	subcs	r0, r0, r1, lsl #4
   1b3d4:	cmp	r0, r1, lsl #3
   1b3d8:	adc	r2, r2, r2
   1b3dc:	subcs	r0, r0, r1, lsl #3
   1b3e0:	cmp	r0, r1, lsl #2
   1b3e4:	adc	r2, r2, r2
   1b3e8:	subcs	r0, r0, r1, lsl #2
   1b3ec:	cmp	r0, r1, lsl #1
   1b3f0:	adc	r2, r2, r2
   1b3f4:	subcs	r0, r0, r1, lsl #1
   1b3f8:	cmp	r0, r1
   1b3fc:	adc	r2, r2, r2
   1b400:	subcs	r0, r0, r1
   1b404:	mov	r0, r2
   1b408:	bx	lr
   1b40c:	moveq	r0, #1
   1b410:	movne	r0, #0
   1b414:	bx	lr
   1b418:	clz	r2, r1
   1b41c:	rsb	r2, r2, #31
   1b420:	lsr	r0, r0, r2
   1b424:	bx	lr
   1b428:	cmp	r0, #0
   1b42c:	mvnne	r0, #0
   1b430:	b	1b768 <__assert_fail@plt+0xa81c>
   1b434:	cmp	r1, #0
   1b438:	beq	1b428 <__assert_fail@plt+0xa4dc>
   1b43c:	push	{r0, r1, lr}
   1b440:	bl	1b248 <__assert_fail@plt+0xa2fc>
   1b444:	pop	{r1, r2, lr}
   1b448:	mul	r3, r2, r0
   1b44c:	sub	r1, r1, r3
   1b450:	bx	lr
   1b454:	cmp	r1, #0
   1b458:	beq	1b664 <__assert_fail@plt+0xa718>
   1b45c:	eor	ip, r0, r1
   1b460:	rsbmi	r1, r1, #0
   1b464:	subs	r2, r1, #1
   1b468:	beq	1b630 <__assert_fail@plt+0xa6e4>
   1b46c:	movs	r3, r0
   1b470:	rsbmi	r3, r0, #0
   1b474:	cmp	r3, r1
   1b478:	bls	1b63c <__assert_fail@plt+0xa6f0>
   1b47c:	tst	r1, r2
   1b480:	beq	1b64c <__assert_fail@plt+0xa700>
   1b484:	clz	r2, r3
   1b488:	clz	r0, r1
   1b48c:	sub	r2, r0, r2
   1b490:	rsbs	r2, r2, #31
   1b494:	addne	r2, r2, r2, lsl #1
   1b498:	mov	r0, #0
   1b49c:	addne	pc, pc, r2, lsl #2
   1b4a0:	nop			; (mov r0, r0)
   1b4a4:	cmp	r3, r1, lsl #31
   1b4a8:	adc	r0, r0, r0
   1b4ac:	subcs	r3, r3, r1, lsl #31
   1b4b0:	cmp	r3, r1, lsl #30
   1b4b4:	adc	r0, r0, r0
   1b4b8:	subcs	r3, r3, r1, lsl #30
   1b4bc:	cmp	r3, r1, lsl #29
   1b4c0:	adc	r0, r0, r0
   1b4c4:	subcs	r3, r3, r1, lsl #29
   1b4c8:	cmp	r3, r1, lsl #28
   1b4cc:	adc	r0, r0, r0
   1b4d0:	subcs	r3, r3, r1, lsl #28
   1b4d4:	cmp	r3, r1, lsl #27
   1b4d8:	adc	r0, r0, r0
   1b4dc:	subcs	r3, r3, r1, lsl #27
   1b4e0:	cmp	r3, r1, lsl #26
   1b4e4:	adc	r0, r0, r0
   1b4e8:	subcs	r3, r3, r1, lsl #26
   1b4ec:	cmp	r3, r1, lsl #25
   1b4f0:	adc	r0, r0, r0
   1b4f4:	subcs	r3, r3, r1, lsl #25
   1b4f8:	cmp	r3, r1, lsl #24
   1b4fc:	adc	r0, r0, r0
   1b500:	subcs	r3, r3, r1, lsl #24
   1b504:	cmp	r3, r1, lsl #23
   1b508:	adc	r0, r0, r0
   1b50c:	subcs	r3, r3, r1, lsl #23
   1b510:	cmp	r3, r1, lsl #22
   1b514:	adc	r0, r0, r0
   1b518:	subcs	r3, r3, r1, lsl #22
   1b51c:	cmp	r3, r1, lsl #21
   1b520:	adc	r0, r0, r0
   1b524:	subcs	r3, r3, r1, lsl #21
   1b528:	cmp	r3, r1, lsl #20
   1b52c:	adc	r0, r0, r0
   1b530:	subcs	r3, r3, r1, lsl #20
   1b534:	cmp	r3, r1, lsl #19
   1b538:	adc	r0, r0, r0
   1b53c:	subcs	r3, r3, r1, lsl #19
   1b540:	cmp	r3, r1, lsl #18
   1b544:	adc	r0, r0, r0
   1b548:	subcs	r3, r3, r1, lsl #18
   1b54c:	cmp	r3, r1, lsl #17
   1b550:	adc	r0, r0, r0
   1b554:	subcs	r3, r3, r1, lsl #17
   1b558:	cmp	r3, r1, lsl #16
   1b55c:	adc	r0, r0, r0
   1b560:	subcs	r3, r3, r1, lsl #16
   1b564:	cmp	r3, r1, lsl #15
   1b568:	adc	r0, r0, r0
   1b56c:	subcs	r3, r3, r1, lsl #15
   1b570:	cmp	r3, r1, lsl #14
   1b574:	adc	r0, r0, r0
   1b578:	subcs	r3, r3, r1, lsl #14
   1b57c:	cmp	r3, r1, lsl #13
   1b580:	adc	r0, r0, r0
   1b584:	subcs	r3, r3, r1, lsl #13
   1b588:	cmp	r3, r1, lsl #12
   1b58c:	adc	r0, r0, r0
   1b590:	subcs	r3, r3, r1, lsl #12
   1b594:	cmp	r3, r1, lsl #11
   1b598:	adc	r0, r0, r0
   1b59c:	subcs	r3, r3, r1, lsl #11
   1b5a0:	cmp	r3, r1, lsl #10
   1b5a4:	adc	r0, r0, r0
   1b5a8:	subcs	r3, r3, r1, lsl #10
   1b5ac:	cmp	r3, r1, lsl #9
   1b5b0:	adc	r0, r0, r0
   1b5b4:	subcs	r3, r3, r1, lsl #9
   1b5b8:	cmp	r3, r1, lsl #8
   1b5bc:	adc	r0, r0, r0
   1b5c0:	subcs	r3, r3, r1, lsl #8
   1b5c4:	cmp	r3, r1, lsl #7
   1b5c8:	adc	r0, r0, r0
   1b5cc:	subcs	r3, r3, r1, lsl #7
   1b5d0:	cmp	r3, r1, lsl #6
   1b5d4:	adc	r0, r0, r0
   1b5d8:	subcs	r3, r3, r1, lsl #6
   1b5dc:	cmp	r3, r1, lsl #5
   1b5e0:	adc	r0, r0, r0
   1b5e4:	subcs	r3, r3, r1, lsl #5
   1b5e8:	cmp	r3, r1, lsl #4
   1b5ec:	adc	r0, r0, r0
   1b5f0:	subcs	r3, r3, r1, lsl #4
   1b5f4:	cmp	r3, r1, lsl #3
   1b5f8:	adc	r0, r0, r0
   1b5fc:	subcs	r3, r3, r1, lsl #3
   1b600:	cmp	r3, r1, lsl #2
   1b604:	adc	r0, r0, r0
   1b608:	subcs	r3, r3, r1, lsl #2
   1b60c:	cmp	r3, r1, lsl #1
   1b610:	adc	r0, r0, r0
   1b614:	subcs	r3, r3, r1, lsl #1
   1b618:	cmp	r3, r1
   1b61c:	adc	r0, r0, r0
   1b620:	subcs	r3, r3, r1
   1b624:	cmp	ip, #0
   1b628:	rsbmi	r0, r0, #0
   1b62c:	bx	lr
   1b630:	teq	ip, r0
   1b634:	rsbmi	r0, r0, #0
   1b638:	bx	lr
   1b63c:	movcc	r0, #0
   1b640:	asreq	r0, ip, #31
   1b644:	orreq	r0, r0, #1
   1b648:	bx	lr
   1b64c:	clz	r2, r1
   1b650:	rsb	r2, r2, #31
   1b654:	cmp	ip, #0
   1b658:	lsr	r0, r3, r2
   1b65c:	rsbmi	r0, r0, #0
   1b660:	bx	lr
   1b664:	cmp	r0, #0
   1b668:	mvngt	r0, #-2147483648	; 0x80000000
   1b66c:	movlt	r0, #-2147483648	; 0x80000000
   1b670:	b	1b768 <__assert_fail@plt+0xa81c>
   1b674:	cmp	r1, #0
   1b678:	beq	1b664 <__assert_fail@plt+0xa718>
   1b67c:	push	{r0, r1, lr}
   1b680:	bl	1b45c <__assert_fail@plt+0xa510>
   1b684:	pop	{r1, r2, lr}
   1b688:	mul	r3, r2, r0
   1b68c:	sub	r1, r1, r3
   1b690:	bx	lr
   1b694:	cmp	r3, #0
   1b698:	cmpeq	r2, #0
   1b69c:	bne	1b6c0 <__assert_fail@plt+0xa774>
   1b6a0:	cmp	r1, #0
   1b6a4:	movlt	r1, #-2147483648	; 0x80000000
   1b6a8:	movlt	r0, #0
   1b6ac:	blt	1b6bc <__assert_fail@plt+0xa770>
   1b6b0:	cmpeq	r0, #0
   1b6b4:	mvnne	r1, #-2147483648	; 0x80000000
   1b6b8:	mvnne	r0, #0
   1b6bc:	b	1b768 <__assert_fail@plt+0xa81c>
   1b6c0:	sub	sp, sp, #8
   1b6c4:	push	{sp, lr}
   1b6c8:	cmp	r1, #0
   1b6cc:	blt	1b6ec <__assert_fail@plt+0xa7a0>
   1b6d0:	cmp	r3, #0
   1b6d4:	blt	1b720 <__assert_fail@plt+0xa7d4>
   1b6d8:	bl	1b778 <__assert_fail@plt+0xa82c>
   1b6dc:	ldr	lr, [sp, #4]
   1b6e0:	add	sp, sp, #8
   1b6e4:	pop	{r2, r3}
   1b6e8:	bx	lr
   1b6ec:	rsbs	r0, r0, #0
   1b6f0:	sbc	r1, r1, r1, lsl #1
   1b6f4:	cmp	r3, #0
   1b6f8:	blt	1b744 <__assert_fail@plt+0xa7f8>
   1b6fc:	bl	1b778 <__assert_fail@plt+0xa82c>
   1b700:	ldr	lr, [sp, #4]
   1b704:	add	sp, sp, #8
   1b708:	pop	{r2, r3}
   1b70c:	rsbs	r0, r0, #0
   1b710:	sbc	r1, r1, r1, lsl #1
   1b714:	rsbs	r2, r2, #0
   1b718:	sbc	r3, r3, r3, lsl #1
   1b71c:	bx	lr
   1b720:	rsbs	r2, r2, #0
   1b724:	sbc	r3, r3, r3, lsl #1
   1b728:	bl	1b778 <__assert_fail@plt+0xa82c>
   1b72c:	ldr	lr, [sp, #4]
   1b730:	add	sp, sp, #8
   1b734:	pop	{r2, r3}
   1b738:	rsbs	r0, r0, #0
   1b73c:	sbc	r1, r1, r1, lsl #1
   1b740:	bx	lr
   1b744:	rsbs	r2, r2, #0
   1b748:	sbc	r3, r3, r3, lsl #1
   1b74c:	bl	1b778 <__assert_fail@plt+0xa82c>
   1b750:	ldr	lr, [sp, #4]
   1b754:	add	sp, sp, #8
   1b758:	pop	{r2, r3}
   1b75c:	rsbs	r2, r2, #0
   1b760:	sbc	r3, r3, r3, lsl #1
   1b764:	bx	lr
   1b768:	push	{r1, lr}
   1b76c:	mov	r0, #8
   1b770:	bl	10ce8 <raise@plt>
   1b774:	pop	{r1, pc}
   1b778:	cmp	r1, r3
   1b77c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b780:	cmpeq	r0, r2
   1b784:	mov	r4, r0
   1b788:	mov	r5, r1
   1b78c:	ldr	r9, [sp, #28]
   1b790:	movcc	r0, #0
   1b794:	movcc	r1, #0
   1b798:	bcc	1b890 <__assert_fail@plt+0xa944>
   1b79c:	cmp	r3, #0
   1b7a0:	clzeq	ip, r2
   1b7a4:	clzne	ip, r3
   1b7a8:	addeq	ip, ip, #32
   1b7ac:	cmp	r5, #0
   1b7b0:	clzeq	r1, r4
   1b7b4:	addeq	r1, r1, #32
   1b7b8:	clzne	r1, r5
   1b7bc:	sub	ip, ip, r1
   1b7c0:	sub	lr, ip, #32
   1b7c4:	lsl	r7, r3, ip
   1b7c8:	rsb	r8, ip, #32
   1b7cc:	orr	r7, r7, r2, lsl lr
   1b7d0:	orr	r7, r7, r2, lsr r8
   1b7d4:	lsl	r6, r2, ip
   1b7d8:	cmp	r5, r7
   1b7dc:	cmpeq	r4, r6
   1b7e0:	movcc	r0, #0
   1b7e4:	movcc	r1, #0
   1b7e8:	bcc	1b804 <__assert_fail@plt+0xa8b8>
   1b7ec:	mov	r3, #1
   1b7f0:	subs	r4, r4, r6
   1b7f4:	lsl	r1, r3, lr
   1b7f8:	lsl	r0, r3, ip
   1b7fc:	orr	r1, r1, r3, lsr r8
   1b800:	sbc	r5, r5, r7
   1b804:	cmp	ip, #0
   1b808:	beq	1b890 <__assert_fail@plt+0xa944>
   1b80c:	lsrs	r3, r7, #1
   1b810:	rrx	r2, r6
   1b814:	mov	r6, ip
   1b818:	b	1b83c <__assert_fail@plt+0xa8f0>
   1b81c:	subs	r4, r4, r2
   1b820:	sbc	r5, r5, r3
   1b824:	adds	r4, r4, r4
   1b828:	adc	r5, r5, r5
   1b82c:	adds	r4, r4, #1
   1b830:	adc	r5, r5, #0
   1b834:	subs	r6, r6, #1
   1b838:	beq	1b858 <__assert_fail@plt+0xa90c>
   1b83c:	cmp	r5, r3
   1b840:	cmpeq	r4, r2
   1b844:	bcs	1b81c <__assert_fail@plt+0xa8d0>
   1b848:	adds	r4, r4, r4
   1b84c:	adc	r5, r5, r5
   1b850:	subs	r6, r6, #1
   1b854:	bne	1b83c <__assert_fail@plt+0xa8f0>
   1b858:	lsr	r6, r4, ip
   1b85c:	lsr	r7, r5, ip
   1b860:	orr	r6, r6, r5, lsl r8
   1b864:	adds	r2, r0, r4
   1b868:	orr	r6, r6, r5, lsr lr
   1b86c:	adc	r3, r1, r5
   1b870:	lsl	r1, r7, ip
   1b874:	orr	r1, r1, r6, lsl lr
   1b878:	lsl	r0, r6, ip
   1b87c:	orr	r1, r1, r6, lsr r8
   1b880:	subs	r0, r2, r0
   1b884:	mov	r4, r6
   1b888:	mov	r5, r7
   1b88c:	sbc	r1, r3, r1
   1b890:	cmp	r9, #0
   1b894:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1b898:	strd	r4, [r9]
   1b89c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b8a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b8a4:	mov	r7, r0
   1b8a8:	ldr	r6, [pc, #72]	; 1b8f8 <__assert_fail@plt+0xa9ac>
   1b8ac:	ldr	r5, [pc, #72]	; 1b8fc <__assert_fail@plt+0xa9b0>
   1b8b0:	add	r6, pc, r6
   1b8b4:	add	r5, pc, r5
   1b8b8:	sub	r6, r6, r5
   1b8bc:	mov	r8, r1
   1b8c0:	mov	r9, r2
   1b8c4:	bl	10cb0 <calloc@plt-0x20>
   1b8c8:	asrs	r6, r6, #2
   1b8cc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b8d0:	mov	r4, #0
   1b8d4:	add	r4, r4, #1
   1b8d8:	ldr	r3, [r5], #4
   1b8dc:	mov	r2, r9
   1b8e0:	mov	r1, r8
   1b8e4:	mov	r0, r7
   1b8e8:	blx	r3
   1b8ec:	cmp	r6, r4
   1b8f0:	bne	1b8d4 <__assert_fail@plt+0xa988>
   1b8f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b8f8:	andeq	r1, r1, r8, asr r6
   1b8fc:	andeq	r1, r1, r0, asr r6
   1b900:	bx	lr
   1b904:	ldr	r3, [pc, #12]	; 1b918 <__assert_fail@plt+0xa9cc>
   1b908:	mov	r1, #0
   1b90c:	add	r3, pc, r3
   1b910:	ldr	r2, [r3]
   1b914:	b	10e8c <__cxa_atexit@plt>
   1b918:	ldrdeq	r1, [r1], -r8

Disassembly of section .fini:

0001b91c <.fini>:
   1b91c:	push	{r3, lr}
   1b920:	pop	{r3, pc}
