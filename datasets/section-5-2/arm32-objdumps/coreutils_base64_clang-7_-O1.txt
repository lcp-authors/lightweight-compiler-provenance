
../repos/coreutils/src/base64:     file format elf32-littlearm


Disassembly of section .init:

00010e64 <.init>:
   10e64:	push	{r3, lr}
   10e68:	bl	11148 <__assert_fail@plt+0x48>
   10e6c:	pop	{r3, pc}

Disassembly of section .plt:

00010e70 <calloc@plt-0x14>:
   10e70:	push	{lr}		; (str lr, [sp, #-4]!)
   10e74:	ldr	lr, [pc, #4]	; 10e80 <calloc@plt-0x4>
   10e78:	add	lr, pc, lr
   10e7c:	ldr	pc, [lr, #8]!
   10e80:	andeq	r6, r1, r0, lsl #3

00010e84 <calloc@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #90112	; 0x16000
   10e8c:	ldr	pc, [ip, #384]!	; 0x180

00010e90 <fputs_unlocked@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #90112	; 0x16000
   10e98:	ldr	pc, [ip, #376]!	; 0x178

00010e9c <raise@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #90112	; 0x16000
   10ea4:	ldr	pc, [ip, #368]!	; 0x170

00010ea8 <strcmp@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #90112	; 0x16000
   10eb0:	ldr	pc, [ip, #360]!	; 0x168

00010eb4 <posix_fadvise64@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #90112	; 0x16000
   10ebc:	ldr	pc, [ip, #352]!	; 0x160

00010ec0 <fflush@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #90112	; 0x16000
   10ec8:	ldr	pc, [ip, #344]!	; 0x158

00010ecc <memmove@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #90112	; 0x16000
   10ed4:	ldr	pc, [ip, #336]!	; 0x150

00010ed8 <free@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #90112	; 0x16000
   10ee0:	ldr	pc, [ip, #328]!	; 0x148

00010ee4 <_exit@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #90112	; 0x16000
   10eec:	ldr	pc, [ip, #320]!	; 0x140

00010ef0 <memcpy@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #90112	; 0x16000
   10ef8:	ldr	pc, [ip, #312]!	; 0x138

00010efc <mbsinit@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #90112	; 0x16000
   10f04:	ldr	pc, [ip, #304]!	; 0x130

00010f08 <fwrite_unlocked@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #90112	; 0x16000
   10f10:	ldr	pc, [ip, #296]!	; 0x128

00010f14 <memcmp@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #90112	; 0x16000
   10f1c:	ldr	pc, [ip, #288]!	; 0x120

00010f20 <fputc_unlocked@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #90112	; 0x16000
   10f28:	ldr	pc, [ip, #280]!	; 0x118

00010f2c <dcgettext@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #90112	; 0x16000
   10f34:	ldr	pc, [ip, #272]!	; 0x110

00010f38 <realloc@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #90112	; 0x16000
   10f40:	ldr	pc, [ip, #264]!	; 0x108

00010f44 <textdomain@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #90112	; 0x16000
   10f4c:	ldr	pc, [ip, #256]!	; 0x100

00010f50 <iswprint@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #90112	; 0x16000
   10f58:	ldr	pc, [ip, #248]!	; 0xf8

00010f5c <fwrite@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #90112	; 0x16000
   10f64:	ldr	pc, [ip, #240]!	; 0xf0

00010f68 <lseek64@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #90112	; 0x16000
   10f70:	ldr	pc, [ip, #232]!	; 0xe8

00010f74 <__ctype_get_mb_cur_max@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #90112	; 0x16000
   10f7c:	ldr	pc, [ip, #224]!	; 0xe0

00010f80 <__fpending@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #90112	; 0x16000
   10f88:	ldr	pc, [ip, #216]!	; 0xd8

00010f8c <ferror_unlocked@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #90112	; 0x16000
   10f94:	ldr	pc, [ip, #208]!	; 0xd0

00010f98 <mbrtowc@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #90112	; 0x16000
   10fa0:	ldr	pc, [ip, #200]!	; 0xc8

00010fa4 <error@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #90112	; 0x16000
   10fac:	ldr	pc, [ip, #192]!	; 0xc0

00010fb0 <malloc@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #90112	; 0x16000
   10fb8:	ldr	pc, [ip, #184]!	; 0xb8

00010fbc <__libc_start_main@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #90112	; 0x16000
   10fc4:	ldr	pc, [ip, #176]!	; 0xb0

00010fc8 <__freading@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #90112	; 0x16000
   10fd0:	ldr	pc, [ip, #168]!	; 0xa8

00010fd4 <__gmon_start__@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #90112	; 0x16000
   10fdc:	ldr	pc, [ip, #160]!	; 0xa0

00010fe0 <getopt_long@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #90112	; 0x16000
   10fe8:	ldr	pc, [ip, #152]!	; 0x98

00010fec <__ctype_b_loc@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #90112	; 0x16000
   10ff4:	ldr	pc, [ip, #144]!	; 0x90

00010ff8 <exit@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #90112	; 0x16000
   11000:	ldr	pc, [ip, #136]!	; 0x88

00011004 <strlen@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #90112	; 0x16000
   1100c:	ldr	pc, [ip, #128]!	; 0x80

00011010 <strchr@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #90112	; 0x16000
   11018:	ldr	pc, [ip, #120]!	; 0x78

0001101c <__errno_location@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #90112	; 0x16000
   11024:	ldr	pc, [ip, #112]!	; 0x70

00011028 <__cxa_atexit@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #90112	; 0x16000
   11030:	ldr	pc, [ip, #104]!	; 0x68

00011034 <memset@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #90112	; 0x16000
   1103c:	ldr	pc, [ip, #96]!	; 0x60

00011040 <__printf_chk@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #90112	; 0x16000
   11048:	ldr	pc, [ip, #88]!	; 0x58

0001104c <fileno@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #90112	; 0x16000
   11054:	ldr	pc, [ip, #80]!	; 0x50

00011058 <__fprintf_chk@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #90112	; 0x16000
   11060:	ldr	pc, [ip, #72]!	; 0x48

00011064 <memchr@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #90112	; 0x16000
   1106c:	ldr	pc, [ip, #64]!	; 0x40

00011070 <strtoimax@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #90112	; 0x16000
   11078:	ldr	pc, [ip, #56]!	; 0x38

0001107c <fclose@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #90112	; 0x16000
   11084:	ldr	pc, [ip, #48]!	; 0x30

00011088 <fseeko64@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #90112	; 0x16000
   11090:	ldr	pc, [ip, #40]!	; 0x28

00011094 <setlocale@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #90112	; 0x16000
   1109c:	ldr	pc, [ip, #32]!

000110a0 <strrchr@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #90112	; 0x16000
   110a8:	ldr	pc, [ip, #24]!

000110ac <nl_langinfo@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #90112	; 0x16000
   110b4:	ldr	pc, [ip, #16]!

000110b8 <fopen64@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #90112	; 0x16000
   110c0:	ldr	pc, [ip, #8]!

000110c4 <bindtextdomain@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #90112	; 0x16000
   110cc:	ldr	pc, [ip, #0]!

000110d0 <fread_unlocked@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #86016	; 0x15000
   110d8:	ldr	pc, [ip, #4088]!	; 0xff8

000110dc <strncmp@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #86016	; 0x15000
   110e4:	ldr	pc, [ip, #4080]!	; 0xff0

000110e8 <abort@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #86016	; 0x15000
   110f0:	ldr	pc, [ip, #4072]!	; 0xfe8

000110f4 <feof_unlocked@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #86016	; 0x15000
   110fc:	ldr	pc, [ip, #4064]!	; 0xfe0

00011100 <__assert_fail@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #86016	; 0x15000
   11108:	ldr	pc, [ip, #4056]!	; 0xfd8

Disassembly of section .text:

0001110c <.text>:
   1110c:	mov	fp, #0
   11110:	mov	lr, #0
   11114:	pop	{r1}		; (ldr r1, [sp], #4)
   11118:	mov	r2, sp
   1111c:	push	{r2}		; (str r2, [sp, #-4]!)
   11120:	push	{r0}		; (str r0, [sp, #-4]!)
   11124:	ldr	ip, [pc, #16]	; 1113c <__assert_fail@plt+0x3c>
   11128:	push	{ip}		; (str ip, [sp, #-4]!)
   1112c:	ldr	r0, [pc, #12]	; 11140 <__assert_fail@plt+0x40>
   11130:	ldr	r3, [pc, #12]	; 11144 <__assert_fail@plt+0x44>
   11134:	bl	10fbc <__libc_start_main@plt>
   11138:	bl	110e8 <abort@plt>
   1113c:	andeq	r5, r1, r8, ror #24
   11140:	andeq	r1, r1, r4, lsr #10
   11144:	andeq	r5, r1, r8, lsl #24
   11148:	ldr	r3, [pc, #20]	; 11164 <__assert_fail@plt+0x64>
   1114c:	ldr	r2, [pc, #20]	; 11168 <__assert_fail@plt+0x68>
   11150:	add	r3, pc, r3
   11154:	ldr	r2, [r3, r2]
   11158:	cmp	r2, #0
   1115c:	bxeq	lr
   11160:	b	10fd4 <__gmon_start__@plt>
   11164:	andeq	r5, r1, r8, lsr #29
   11168:	andeq	r0, r0, r4, ror #1
   1116c:	ldr	r0, [pc, #24]	; 1118c <__assert_fail@plt+0x8c>
   11170:	ldr	r3, [pc, #24]	; 11190 <__assert_fail@plt+0x90>
   11174:	cmp	r3, r0
   11178:	bxeq	lr
   1117c:	ldr	r3, [pc, #16]	; 11194 <__assert_fail@plt+0x94>
   11180:	cmp	r3, #0
   11184:	bxeq	lr
   11188:	bx	r3
   1118c:	andeq	r7, r2, r8, lsr r1
   11190:	andeq	r7, r2, r8, lsr r1
   11194:	andeq	r0, r0, r0
   11198:	ldr	r0, [pc, #36]	; 111c4 <__assert_fail@plt+0xc4>
   1119c:	ldr	r1, [pc, #36]	; 111c8 <__assert_fail@plt+0xc8>
   111a0:	sub	r1, r1, r0
   111a4:	asr	r1, r1, #2
   111a8:	add	r1, r1, r1, lsr #31
   111ac:	asrs	r1, r1, #1
   111b0:	bxeq	lr
   111b4:	ldr	r3, [pc, #16]	; 111cc <__assert_fail@plt+0xcc>
   111b8:	cmp	r3, #0
   111bc:	bxeq	lr
   111c0:	bx	r3
   111c4:	andeq	r7, r2, r8, lsr r1
   111c8:	andeq	r7, r2, r8, lsr r1
   111cc:	andeq	r0, r0, r0
   111d0:	push	{r4, lr}
   111d4:	ldr	r4, [pc, #24]	; 111f4 <__assert_fail@plt+0xf4>
   111d8:	ldrb	r3, [r4]
   111dc:	cmp	r3, #0
   111e0:	popne	{r4, pc}
   111e4:	bl	1116c <__assert_fail@plt+0x6c>
   111e8:	mov	r3, #1
   111ec:	strb	r3, [r4]
   111f0:	pop	{r4, pc}
   111f4:	andeq	r7, r2, ip, asr r1
   111f8:	b	11198 <__assert_fail@plt+0x98>
   111fc:	push	{fp, lr}
   11200:	mov	fp, sp
   11204:	mov	r4, r0
   11208:	cmp	r0, #0
   1120c:	bne	112fc <__assert_fail@plt+0x1fc>
   11210:	movw	r1, #23739	; 0x5cbb
   11214:	movt	r1, #1
   11218:	mov	r0, #0
   1121c:	mov	r2, #5
   11220:	bl	10f2c <dcgettext@plt>
   11224:	mov	r1, r0
   11228:	movw	r0, #29032	; 0x7168
   1122c:	movt	r0, #2
   11230:	ldr	r2, [r0]
   11234:	mov	r0, #1
   11238:	bl	11040 <__printf_chk@plt>
   1123c:	movw	r1, #23769	; 0x5cd9
   11240:	movt	r1, #1
   11244:	mov	r0, #0
   11248:	mov	r2, #5
   1124c:	bl	10f2c <dcgettext@plt>
   11250:	mov	r1, r0
   11254:	mov	r0, #1
   11258:	mov	r2, #64	; 0x40
   1125c:	bl	11040 <__printf_chk@plt>
   11260:	bl	11340 <__assert_fail@plt+0x240>
   11264:	bl	11370 <__assert_fail@plt+0x270>
   11268:	movw	r1, #23839	; 0x5d1f
   1126c:	movt	r1, #1
   11270:	mov	r0, #0
   11274:	mov	r2, #5
   11278:	bl	10f2c <dcgettext@plt>
   1127c:	movw	r5, #29012	; 0x7154
   11280:	movt	r5, #2
   11284:	ldr	r1, [r5]
   11288:	bl	10e90 <fputs_unlocked@plt>
   1128c:	movw	r1, #24081	; 0x5e11
   11290:	movt	r1, #1
   11294:	mov	r0, #0
   11298:	mov	r2, #5
   1129c:	bl	10f2c <dcgettext@plt>
   112a0:	ldr	r1, [r5]
   112a4:	bl	10e90 <fputs_unlocked@plt>
   112a8:	movw	r1, #24126	; 0x5e3e
   112ac:	movt	r1, #1
   112b0:	mov	r0, #0
   112b4:	mov	r2, #5
   112b8:	bl	10f2c <dcgettext@plt>
   112bc:	ldr	r1, [r5]
   112c0:	bl	10e90 <fputs_unlocked@plt>
   112c4:	movw	r1, #24180	; 0x5e74
   112c8:	movt	r1, #1
   112cc:	mov	r0, #0
   112d0:	mov	r2, #5
   112d4:	bl	10f2c <dcgettext@plt>
   112d8:	mov	r1, r0
   112dc:	movw	r2, #24448	; 0x5f80
   112e0:	movt	r2, #1
   112e4:	mov	r0, #1
   112e8:	mov	r3, r2
   112ec:	bl	11040 <__printf_chk@plt>
   112f0:	bl	113a0 <__assert_fail@plt+0x2a0>
   112f4:	mov	r0, r4
   112f8:	bl	10ff8 <exit@plt>
   112fc:	movw	r0, #29000	; 0x7148
   11300:	movt	r0, #2
   11304:	ldr	r5, [r0]
   11308:	movw	r1, #23700	; 0x5c94
   1130c:	movt	r1, #1
   11310:	mov	r0, #0
   11314:	mov	r2, #5
   11318:	bl	10f2c <dcgettext@plt>
   1131c:	mov	r2, r0
   11320:	movw	r0, #29032	; 0x7168
   11324:	movt	r0, #2
   11328:	ldr	r3, [r0]
   1132c:	mov	r0, r5
   11330:	mov	r1, #1
   11334:	bl	11058 <__fprintf_chk@plt>
   11338:	mov	r0, r4
   1133c:	bl	10ff8 <exit@plt>
   11340:	push	{fp, lr}
   11344:	mov	fp, sp
   11348:	movw	r1, #24559	; 0x5fef
   1134c:	movt	r1, #1
   11350:	mov	r0, #0
   11354:	mov	r2, #5
   11358:	bl	10f2c <dcgettext@plt>
   1135c:	movw	r1, #29012	; 0x7154
   11360:	movt	r1, #2
   11364:	ldr	r1, [r1]
   11368:	pop	{fp, lr}
   1136c:	b	10e90 <fputs_unlocked@plt>
   11370:	push	{fp, lr}
   11374:	mov	fp, sp
   11378:	movw	r1, #24615	; 0x6027
   1137c:	movt	r1, #1
   11380:	mov	r0, #0
   11384:	mov	r2, #5
   11388:	bl	10f2c <dcgettext@plt>
   1138c:	movw	r1, #29012	; 0x7154
   11390:	movt	r1, #2
   11394:	ldr	r1, [r1]
   11398:	pop	{fp, lr}
   1139c:	b	10e90 <fputs_unlocked@plt>
   113a0:	push	{r4, r5, fp, lr}
   113a4:	add	fp, sp, #8
   113a8:	sub	sp, sp, #56	; 0x38
   113ac:	movw	r0, #25200	; 0x6270
   113b0:	movt	r0, #1
   113b4:	add	r1, r0, #32
   113b8:	mov	r5, sp
   113bc:	mov	r2, #48	; 0x30
   113c0:	vld1.64	{d16-d17}, [r1]
   113c4:	add	r1, r5, #32
   113c8:	add	r3, r0, #16
   113cc:	vld1.64	{d18-d19}, [r0], r2
   113d0:	vld1.64	{d20-d21}, [r3]
   113d4:	vldr	d22, [r0]
   113d8:	vst1.64	{d16-d17}, [r1]
   113dc:	add	r0, r5, #16
   113e0:	vst1.64	{d20-d21}, [r0]
   113e4:	mov	r0, r5
   113e8:	vst1.64	{d18-d19}, [r0], r2
   113ec:	vstr	d22, [r0]
   113f0:	ldr	r1, [sp]
   113f4:	cmp	r1, #0
   113f8:	beq	11420 <__assert_fail@plt+0x320>
   113fc:	mov	r5, sp
   11400:	movw	r4, #24448	; 0x5f80
   11404:	movt	r4, #1
   11408:	mov	r0, r4
   1140c:	bl	10ea8 <strcmp@plt>
   11410:	cmp	r0, #0
   11414:	ldrne	r1, [r5, #8]!
   11418:	cmpne	r1, #0
   1141c:	bne	11408 <__assert_fail@plt+0x308>
   11420:	ldr	r4, [r5, #4]
   11424:	movw	r1, #24785	; 0x60d1
   11428:	movt	r1, #1
   1142c:	mov	r0, #0
   11430:	mov	r2, #5
   11434:	bl	10f2c <dcgettext@plt>
   11438:	mov	r1, r0
   1143c:	movw	r2, #24509	; 0x5fbd
   11440:	movt	r2, #1
   11444:	movw	r3, #24808	; 0x60e8
   11448:	movt	r3, #1
   1144c:	mov	r0, #1
   11450:	bl	11040 <__printf_chk@plt>
   11454:	movw	r5, #24448	; 0x5f80
   11458:	movt	r5, #1
   1145c:	cmp	r4, #0
   11460:	moveq	r4, r5
   11464:	mov	r0, #5
   11468:	mov	r1, #0
   1146c:	bl	11094 <setlocale@plt>
   11470:	cmp	r0, #0
   11474:	beq	114b4 <__assert_fail@plt+0x3b4>
   11478:	movw	r1, #24848	; 0x6110
   1147c:	movt	r1, #1
   11480:	mov	r2, #3
   11484:	bl	110dc <strncmp@plt>
   11488:	cmp	r0, #0
   1148c:	beq	114b4 <__assert_fail@plt+0x3b4>
   11490:	movw	r1, #24852	; 0x6114
   11494:	movt	r1, #1
   11498:	mov	r0, #0
   1149c:	mov	r2, #5
   114a0:	bl	10f2c <dcgettext@plt>
   114a4:	movw	r1, #29012	; 0x7154
   114a8:	movt	r1, #2
   114ac:	ldr	r1, [r1]
   114b0:	bl	10e90 <fputs_unlocked@plt>
   114b4:	movw	r1, #24923	; 0x615b
   114b8:	movt	r1, #1
   114bc:	mov	r0, #0
   114c0:	mov	r2, #5
   114c4:	bl	10f2c <dcgettext@plt>
   114c8:	mov	r1, r0
   114cc:	movw	r2, #24808	; 0x60e8
   114d0:	movt	r2, #1
   114d4:	mov	r0, #1
   114d8:	mov	r3, r5
   114dc:	bl	11040 <__printf_chk@plt>
   114e0:	movw	r1, #24950	; 0x6176
   114e4:	movt	r1, #1
   114e8:	mov	r0, #0
   114ec:	mov	r2, #5
   114f0:	bl	10f2c <dcgettext@plt>
   114f4:	mov	r1, r0
   114f8:	movw	r0, #24718	; 0x608e
   114fc:	movt	r0, #1
   11500:	movw	r3, #25000	; 0x61a8
   11504:	movt	r3, #1
   11508:	cmp	r4, r5
   1150c:	moveq	r3, r0
   11510:	mov	r0, #1
   11514:	mov	r2, r4
   11518:	bl	11040 <__printf_chk@plt>
   1151c:	sub	sp, fp, #8
   11520:	pop	{r4, r5, fp, pc}
   11524:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11528:	add	fp, sp, #28
   1152c:	sub	sp, sp, #28
   11530:	mov	r4, r1
   11534:	mov	r6, r0
   11538:	ldr	r0, [r1]
   1153c:	bl	128ec <__assert_fail@plt+0x17ec>
   11540:	movw	r1, #25000	; 0x61a8
   11544:	movt	r1, #1
   11548:	mov	r0, #6
   1154c:	bl	11094 <setlocale@plt>
   11550:	movw	r5, #24513	; 0x5fc1
   11554:	movt	r5, #1
   11558:	movw	r1, #24455	; 0x5f87
   1155c:	movt	r1, #1
   11560:	mov	r0, r5
   11564:	bl	110c4 <bindtextdomain@plt>
   11568:	mov	r0, r5
   1156c:	bl	10f44 <textdomain@plt>
   11570:	movw	r0, #9632	; 0x25a0
   11574:	movt	r0, #1
   11578:	bl	15c6c <__assert_fail@plt+0x4b6c>
   1157c:	mov	r5, #76	; 0x4c
   11580:	mov	r8, #0
   11584:	movw	r9, #24479	; 0x5f9f
   11588:	movt	r9, #1
   1158c:	movw	r7, #25104	; 0x6210
   11590:	movt	r7, #1
   11594:	mov	sl, #0
   11598:	mov	r0, #0
   1159c:	b	115a4 <__assert_fail@plt+0x4a4>
   115a0:	mov	r0, #1
   115a4:	str	r0, [sp, #12]
   115a8:	b	115b0 <__assert_fail@plt+0x4b0>
   115ac:	mov	sl, #1
   115b0:	str	r8, [sp]
   115b4:	mov	r0, r6
   115b8:	mov	r1, r4
   115bc:	mov	r2, r9
   115c0:	mov	r3, r7
   115c4:	bl	10fe0 <getopt_long@plt>
   115c8:	cmp	r0, #99	; 0x63
   115cc:	ble	11644 <__assert_fail@plt+0x544>
   115d0:	cmp	r0, #100	; 0x64
   115d4:	beq	115ac <__assert_fail@plt+0x4ac>
   115d8:	cmp	r0, #105	; 0x69
   115dc:	beq	115a0 <__assert_fail@plt+0x4a0>
   115e0:	cmp	r0, #119	; 0x77
   115e4:	bne	11820 <__assert_fail@plt+0x720>
   115e8:	movw	r0, #29016	; 0x7158
   115ec:	movt	r0, #2
   115f0:	ldr	r0, [r0]
   115f4:	movw	r1, #25000	; 0x61a8
   115f8:	movt	r1, #1
   115fc:	str	r1, [sp]
   11600:	mov	r1, #0
   11604:	mov	r2, #10
   11608:	add	r3, sp, #16
   1160c:	bl	14e34 <__assert_fail@plt+0x3d34>
   11610:	cmp	r0, #1
   11614:	bhi	117dc <__assert_fail@plt+0x6dc>
   11618:	ldr	r1, [sp, #20]
   1161c:	cmn	r1, #1
   11620:	ble	117dc <__assert_fail@plt+0x6dc>
   11624:	ldr	r2, [sp, #16]
   11628:	mvn	r3, #-2147483648	; 0x80000000
   1162c:	subs	r3, r3, r2
   11630:	rscs	r1, r1, #0
   11634:	movwlt	r2, #0
   11638:	subs	r5, r0, #1
   1163c:	movne	r5, r2
   11640:	b	115b0 <__assert_fail@plt+0x4b0>
   11644:	cmn	r0, #3
   11648:	beq	1165c <__assert_fail@plt+0x55c>
   1164c:	cmn	r0, #2
   11650:	bne	116a4 <__assert_fail@plt+0x5a4>
   11654:	mov	r0, #0
   11658:	bl	111fc <__assert_fail@plt+0xfc>
   1165c:	movw	r0, #28912	; 0x70f0
   11660:	movt	r0, #2
   11664:	ldr	r3, [r0]
   11668:	movw	r0, #29012	; 0x7154
   1166c:	movt	r0, #2
   11670:	ldr	r0, [r0]
   11674:	mov	r1, #0
   11678:	movw	r2, #24523	; 0x5fcb
   1167c:	movt	r2, #1
   11680:	str	r2, [sp]
   11684:	str	r1, [sp, #4]
   11688:	movw	r1, #24448	; 0x5f80
   1168c:	movt	r1, #1
   11690:	movw	r2, #24509	; 0x5fbd
   11694:	movt	r2, #1
   11698:	bl	14930 <__assert_fail@plt+0x3830>
   1169c:	mov	r0, #0
   116a0:	bl	10ff8 <exit@plt>
   116a4:	cmn	r0, #1
   116a8:	bne	11820 <__assert_fail@plt+0x720>
   116ac:	movw	r7, #28992	; 0x7140
   116b0:	movt	r7, #2
   116b4:	ldr	r0, [r7]
   116b8:	sub	r1, r6, r0
   116bc:	cmp	r1, #2
   116c0:	blt	11708 <__assert_fail@plt+0x608>
   116c4:	movw	r1, #24539	; 0x5fdb
   116c8:	movt	r1, #1
   116cc:	mov	r0, #0
   116d0:	mov	r2, #5
   116d4:	bl	10f2c <dcgettext@plt>
   116d8:	mov	r5, r0
   116dc:	ldr	r0, [r7]
   116e0:	add	r0, r4, r0, lsl #2
   116e4:	ldr	r0, [r0, #4]
   116e8:	bl	14124 <__assert_fail@plt+0x3024>
   116ec:	mov	r3, r0
   116f0:	mov	r0, #0
   116f4:	mov	r1, #0
   116f8:	mov	r2, r5
   116fc:	bl	10fa4 <error@plt>
   11700:	mov	r0, #1
   11704:	bl	111fc <__assert_fail@plt+0xfc>
   11708:	cmp	r0, r6
   1170c:	ldrlt	r4, [r4, r0, lsl #2]
   11710:	movwge	r4, #25657	; 0x6439
   11714:	movtge	r4, #1
   11718:	movw	r1, #25657	; 0x6439
   1171c:	movt	r1, #1
   11720:	mov	r0, r4
   11724:	bl	10ea8 <strcmp@plt>
   11728:	cmp	r0, #0
   1172c:	bne	1174c <__assert_fail@plt+0x64c>
   11730:	mov	r0, #0
   11734:	mov	r1, #0
   11738:	bl	14e30 <__assert_fail@plt+0x3d30>
   1173c:	movw	r0, #29008	; 0x7150
   11740:	movt	r0, #2
   11744:	ldr	r6, [r0]
   11748:	b	11798 <__assert_fail@plt+0x698>
   1174c:	movw	r1, #24556	; 0x5fec
   11750:	movt	r1, #1
   11754:	mov	r0, r4
   11758:	bl	110b8 <fopen64@plt>
   1175c:	mov	r6, r0
   11760:	cmp	r0, #0
   11764:	bne	11798 <__assert_fail@plt+0x698>
   11768:	bl	1101c <__errno_location@plt>
   1176c:	ldr	r5, [r0]
   11770:	mov	r0, #0
   11774:	mov	r1, #3
   11778:	mov	r2, r4
   1177c:	bl	13fe4 <__assert_fail@plt+0x2ee4>
   11780:	mov	r3, r0
   11784:	movw	r2, #24488	; 0x5fa8
   11788:	movt	r2, #1
   1178c:	mov	r0, #1
   11790:	mov	r1, r5
   11794:	bl	10fa4 <error@plt>
   11798:	mov	r0, r6
   1179c:	mov	r1, #2
   117a0:	bl	1268c <__assert_fail@plt+0x158c>
   117a4:	movw	r0, #29012	; 0x7154
   117a8:	movt	r0, #2
   117ac:	ldr	r2, [r0]
   117b0:	tst	sl, #1
   117b4:	beq	117cc <__assert_fail@plt+0x6cc>
   117b8:	ldr	r0, [sp, #12]
   117bc:	and	r3, r0, #1
   117c0:	mov	r0, r6
   117c4:	mov	r1, r4
   117c8:	bl	11828 <__assert_fail@plt+0x728>
   117cc:	mov	r0, r6
   117d0:	mov	r1, r4
   117d4:	mov	r3, r5
   117d8:	bl	11a38 <__assert_fail@plt+0x938>
   117dc:	movw	r1, #24491	; 0x5fab
   117e0:	movt	r1, #1
   117e4:	mov	r0, #0
   117e8:	mov	r2, #5
   117ec:	bl	10f2c <dcgettext@plt>
   117f0:	mov	r4, r0
   117f4:	movw	r0, #29016	; 0x7158
   117f8:	movt	r0, #2
   117fc:	ldr	r0, [r0]
   11800:	bl	14124 <__assert_fail@plt+0x3024>
   11804:	str	r0, [sp]
   11808:	movw	r2, #24484	; 0x5fa4
   1180c:	movt	r2, #1
   11810:	mov	r0, #1
   11814:	mov	r1, #0
   11818:	mov	r3, r4
   1181c:	bl	10fa4 <error@plt>
   11820:	mov	r0, #1
   11824:	bl	111fc <__assert_fail@plt+0xfc>
   11828:	push	{fp, lr}
   1182c:	mov	fp, sp
   11830:	sub	sp, sp, #32
   11834:	stmib	sp, {r1, r2, r3}
   11838:	mov	r8, r0
   1183c:	mov	r0, #4096	; 0x1000
   11840:	bl	14a38 <__assert_fail@plt+0x3938>
   11844:	mov	r4, r0
   11848:	mov	r0, #3072	; 0xc00
   1184c:	bl	14a38 <__assert_fail@plt+0x3938>
   11850:	mov	r9, r0
   11854:	sub	r0, fp, #8
   11858:	bl	12060 <__assert_fail@plt+0xf60>
   1185c:	mov	sl, #0
   11860:	str	r8, [sp, #16]
   11864:	add	r5, r4, sl
   11868:	rsb	r2, sl, #4096	; 0x1000
   1186c:	mov	r0, r5
   11870:	mov	r1, #1
   11874:	mov	r3, r8
   11878:	bl	110d0 <fread_unlocked@plt>
   1187c:	mov	r8, r0
   11880:	cmp	r0, #1
   11884:	blt	118ec <__assert_fail@plt+0x7ec>
   11888:	ldr	r0, [sp, #12]
   1188c:	cmp	r0, #0
   11890:	beq	118ec <__assert_fail@plt+0x7ec>
   11894:	mov	r6, #0
   11898:	add	r0, r6, sl
   1189c:	ldrb	r7, [r4, r0]
   118a0:	mov	r0, r7
   118a4:	bl	12034 <__assert_fail@plt+0xf34>
   118a8:	cmp	r0, #0
   118ac:	bne	118e0 <__assert_fail@plt+0x7e0>
   118b0:	cmp	r7, #61	; 0x3d
   118b4:	beq	118e0 <__assert_fail@plt+0x7e0>
   118b8:	sub	r8, r8, #1
   118bc:	sub	r2, r8, r6
   118c0:	add	r0, r5, r6
   118c4:	add	r1, r0, #1
   118c8:	bl	10ecc <memmove@plt>
   118cc:	cmp	r8, #1
   118d0:	blt	118ec <__assert_fail@plt+0x7ec>
   118d4:	cmp	r6, r8
   118d8:	blt	11898 <__assert_fail@plt+0x798>
   118dc:	b	118ec <__assert_fail@plt+0x7ec>
   118e0:	add	r6, r6, #1
   118e4:	cmp	r8, #1
   118e8:	bge	118d4 <__assert_fail@plt+0x7d4>
   118ec:	ldr	r0, [sp, #16]
   118f0:	bl	10f8c <ferror_unlocked@plt>
   118f4:	cmp	r0, #0
   118f8:	bne	11a24 <__assert_fail@plt+0x924>
   118fc:	add	sl, r8, sl
   11900:	cmp	sl, #4096	; 0x1000
   11904:	ldr	r8, [sp, #16]
   11908:	bge	1191c <__assert_fail@plt+0x81c>
   1190c:	mov	r0, r8
   11910:	bl	110f4 <feof_unlocked@plt>
   11914:	cmp	r0, #0
   11918:	beq	11864 <__assert_fail@plt+0x764>
   1191c:	mov	r0, r8
   11920:	bl	110f4 <feof_unlocked@plt>
   11924:	mov	r6, #0
   11928:	ldr	r5, [sp, #8]
   1192c:	cmp	r6, #1
   11930:	ldreq	r0, [fp, #-8]
   11934:	cmpeq	r0, #0
   11938:	beq	119b4 <__assert_fail@plt+0x8b4>
   1193c:	mov	r0, #3072	; 0xc00
   11940:	str	r0, [fp, #-12]
   11944:	sub	r0, fp, #12
   11948:	str	r0, [sp]
   1194c:	cmp	r6, #0
   11950:	mov	r2, #0
   11954:	moveq	r2, sl
   11958:	sub	r0, fp, #8
   1195c:	mov	r1, r4
   11960:	mov	r3, r9
   11964:	bl	1206c <__assert_fail@plt+0xf6c>
   11968:	mov	r7, r0
   1196c:	ldr	r2, [fp, #-12]
   11970:	mov	r0, r9
   11974:	mov	r1, #1
   11978:	mov	r3, r5
   1197c:	bl	10f08 <fwrite_unlocked@plt>
   11980:	ldr	r1, [fp, #-12]
   11984:	cmp	r0, r1
   11988:	bcc	119d4 <__assert_fail@plt+0x8d4>
   1198c:	cmp	r7, #0
   11990:	beq	11a00 <__assert_fail@plt+0x900>
   11994:	mov	r0, r8
   11998:	bl	110f4 <feof_unlocked@plt>
   1199c:	cmp	r0, #0
   119a0:	mov	r0, #2
   119a4:	movweq	r0, #1
   119a8:	add	r6, r6, #1
   119ac:	cmp	r6, r0
   119b0:	bcc	1192c <__assert_fail@plt+0x82c>
   119b4:	mov	r0, r8
   119b8:	bl	110f4 <feof_unlocked@plt>
   119bc:	mov	sl, #0
   119c0:	cmp	r0, #0
   119c4:	beq	11864 <__assert_fail@plt+0x764>
   119c8:	mov	r0, r8
   119cc:	ldr	r1, [sp, #4]
   119d0:	bl	11bb8 <__assert_fail@plt+0xab8>
   119d4:	bl	1101c <__errno_location@plt>
   119d8:	ldr	r4, [r0]
   119dc:	movw	r1, #25052	; 0x61dc
   119e0:	movt	r1, #1
   119e4:	mov	r0, #0
   119e8:	mov	r2, #5
   119ec:	bl	10f2c <dcgettext@plt>
   119f0:	mov	r2, r0
   119f4:	mov	r0, #1
   119f8:	mov	r1, r4
   119fc:	bl	10fa4 <error@plt>
   11a00:	movw	r1, #25064	; 0x61e8
   11a04:	movt	r1, #1
   11a08:	mov	r0, #0
   11a0c:	mov	r2, #5
   11a10:	bl	10f2c <dcgettext@plt>
   11a14:	mov	r2, r0
   11a18:	mov	r0, #1
   11a1c:	mov	r1, #0
   11a20:	bl	10fa4 <error@plt>
   11a24:	bl	1101c <__errno_location@plt>
   11a28:	ldr	r4, [r0]
   11a2c:	movw	r1, #25041	; 0x61d1
   11a30:	movt	r1, #1
   11a34:	b	119e4 <__assert_fail@plt+0x8e4>
   11a38:	push	{fp, lr}
   11a3c:	mov	fp, sp
   11a40:	sub	sp, sp, #16
   11a44:	mov	sl, r3
   11a48:	mov	r9, r2
   11a4c:	str	r1, [sp, #8]
   11a50:	mov	r5, r0
   11a54:	mov	r4, #0
   11a58:	str	r4, [fp, #-4]
   11a5c:	mov	r0, #30720	; 0x7800
   11a60:	bl	14a38 <__assert_fail@plt+0x3938>
   11a64:	mov	r6, r0
   11a68:	mov	r0, #40960	; 0xa000
   11a6c:	bl	14a38 <__assert_fail@plt+0x3938>
   11a70:	mov	r7, r0
   11a74:	b	11ab0 <__assert_fail@plt+0x9b0>
   11a78:	mov	r0, r5
   11a7c:	bl	10f8c <ferror_unlocked@plt>
   11a80:	cmp	r4, #30720	; 0x7800
   11a84:	bne	11b34 <__assert_fail@plt+0xa34>
   11a88:	cmp	r0, #0
   11a8c:	mov	r4, #0
   11a90:	beq	11ab0 <__assert_fail@plt+0x9b0>
   11a94:	b	11b34 <__assert_fail@plt+0xa34>
   11a98:	mov	r0, r5
   11a9c:	bl	10f8c <ferror_unlocked@plt>
   11aa0:	cmp	r4, #30720	; 0x7800
   11aa4:	bge	11ad8 <__assert_fail@plt+0x9d8>
   11aa8:	cmp	r0, #0
   11aac:	bne	11ad8 <__assert_fail@plt+0x9d8>
   11ab0:	add	r0, r6, r4
   11ab4:	rsb	r2, r4, #30720	; 0x7800
   11ab8:	mov	r1, #1
   11abc:	mov	r3, r5
   11ac0:	bl	110d0 <fread_unlocked@plt>
   11ac4:	add	r4, r0, r4
   11ac8:	mov	r0, r5
   11acc:	bl	110f4 <feof_unlocked@plt>
   11ad0:	cmp	r0, #0
   11ad4:	beq	11a98 <__assert_fail@plt+0x998>
   11ad8:	cmp	r4, #1
   11adc:	blt	11b24 <__assert_fail@plt+0xa24>
   11ae0:	add	r0, r4, #2
   11ae4:	movw	r1, #21846	; 0x5556
   11ae8:	movt	r1, #21845	; 0x5555
   11aec:	smmul	r0, r0, r1
   11af0:	add	r0, r0, r0, lsr #31
   11af4:	lsl	r8, r0, #2
   11af8:	mov	r0, r6
   11afc:	mov	r1, r4
   11b00:	mov	r2, r7
   11b04:	mov	r3, r8
   11b08:	bl	11d54 <__assert_fail@plt+0xc54>
   11b0c:	str	r9, [sp]
   11b10:	mov	r0, r7
   11b14:	mov	r1, r8
   11b18:	mov	r2, sl
   11b1c:	sub	r3, fp, #4
   11b20:	bl	11c48 <__assert_fail@plt+0xb48>
   11b24:	mov	r0, r5
   11b28:	bl	110f4 <feof_unlocked@plt>
   11b2c:	cmp	r0, #0
   11b30:	beq	11a78 <__assert_fail@plt+0x978>
   11b34:	cmp	sl, #0
   11b38:	beq	11b70 <__assert_fail@plt+0xa70>
   11b3c:	ldr	r0, [fp, #-4]
   11b40:	cmp	r0, #1
   11b44:	blt	11b70 <__assert_fail@plt+0xa70>
   11b48:	mov	r0, #10
   11b4c:	mov	r1, r9
   11b50:	bl	10f20 <fputc_unlocked@plt>
   11b54:	cmn	r0, #1
   11b58:	bne	11b70 <__assert_fail@plt+0xa70>
   11b5c:	bl	1101c <__errno_location@plt>
   11b60:	ldr	r4, [r0]
   11b64:	movw	r1, #25052	; 0x61dc
   11b68:	movt	r1, #1
   11b6c:	b	11b9c <__assert_fail@plt+0xa9c>
   11b70:	mov	r0, r5
   11b74:	bl	10f8c <ferror_unlocked@plt>
   11b78:	cmp	r0, #0
   11b7c:	bne	11b8c <__assert_fail@plt+0xa8c>
   11b80:	mov	r0, r5
   11b84:	ldr	r1, [sp, #8]
   11b88:	bl	11bb8 <__assert_fail@plt+0xab8>
   11b8c:	bl	1101c <__errno_location@plt>
   11b90:	ldr	r4, [r0]
   11b94:	movw	r1, #25041	; 0x61d1
   11b98:	movt	r1, #1
   11b9c:	mov	r0, #0
   11ba0:	mov	r2, #5
   11ba4:	bl	10f2c <dcgettext@plt>
   11ba8:	mov	r2, r0
   11bac:	mov	r0, #1
   11bb0:	mov	r1, r4
   11bb4:	bl	10fa4 <error@plt>
   11bb8:	push	{fp, lr}
   11bbc:	mov	fp, sp
   11bc0:	mov	r5, r1
   11bc4:	bl	126c8 <__assert_fail@plt+0x15c8>
   11bc8:	cmp	r0, #0
   11bcc:	bne	11bd8 <__assert_fail@plt+0xad8>
   11bd0:	mov	r0, #0
   11bd4:	bl	10ff8 <exit@plt>
   11bd8:	movw	r1, #25657	; 0x6439
   11bdc:	movt	r1, #1
   11be0:	mov	r0, r5
   11be4:	bl	10ea8 <strcmp@plt>
   11be8:	mov	r6, r0
   11bec:	bl	1101c <__errno_location@plt>
   11bf0:	ldr	r4, [r0]
   11bf4:	cmp	r6, #0
   11bf8:	bne	11c20 <__assert_fail@plt+0xb20>
   11bfc:	movw	r1, #25078	; 0x61f6
   11c00:	movt	r1, #1
   11c04:	mov	r0, #0
   11c08:	mov	r2, #5
   11c0c:	bl	10f2c <dcgettext@plt>
   11c10:	mov	r2, r0
   11c14:	mov	r0, #1
   11c18:	mov	r1, r4
   11c1c:	bl	10fa4 <error@plt>
   11c20:	mov	r0, #0
   11c24:	mov	r1, #3
   11c28:	mov	r2, r5
   11c2c:	bl	13fe4 <__assert_fail@plt+0x2ee4>
   11c30:	mov	r3, r0
   11c34:	movw	r2, #24488	; 0x5fa8
   11c38:	movt	r2, #1
   11c3c:	mov	r0, #1
   11c40:	mov	r1, r4
   11c44:	bl	10fa4 <error@plt>
   11c48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c4c:	add	fp, sp, #28
   11c50:	sub	sp, sp, #4
   11c54:	mov	r4, r1
   11c58:	mov	r9, r0
   11c5c:	cmp	r2, #0
   11c60:	beq	11cfc <__assert_fail@plt+0xbfc>
   11c64:	cmp	r4, #1
   11c68:	blt	11d20 <__assert_fail@plt+0xc20>
   11c6c:	mov	r6, r3
   11c70:	mov	r7, r2
   11c74:	movw	r8, #29012	; 0x7154
   11c78:	movt	r8, #2
   11c7c:	mov	sl, #0
   11c80:	sub	r5, r4, sl
   11c84:	ldr	r0, [r6]
   11c88:	sub	r0, r7, r0
   11c8c:	cmp	r0, r5
   11c90:	movlt	r5, r0
   11c94:	cmp	r5, #0
   11c98:	beq	11cd4 <__assert_fail@plt+0xbd4>
   11c9c:	add	r0, r9, sl
   11ca0:	ldr	r3, [r8]
   11ca4:	mov	r1, #1
   11ca8:	mov	r2, r5
   11cac:	bl	10f08 <fwrite_unlocked@plt>
   11cb0:	cmp	r0, r5
   11cb4:	bcc	11d28 <__assert_fail@plt+0xc28>
   11cb8:	ldr	r0, [r6]
   11cbc:	add	r0, r0, r5
   11cc0:	str	r0, [r6]
   11cc4:	add	sl, r5, sl
   11cc8:	cmp	sl, r4
   11ccc:	blt	11c80 <__assert_fail@plt+0xb80>
   11cd0:	b	11d20 <__assert_fail@plt+0xc20>
   11cd4:	mov	r0, #10
   11cd8:	ldr	r1, [fp, #8]
   11cdc:	bl	10f20 <fputc_unlocked@plt>
   11ce0:	cmn	r0, #1
   11ce4:	beq	11d28 <__assert_fail@plt+0xc28>
   11ce8:	mov	r0, #0
   11cec:	str	r0, [r6]
   11cf0:	cmp	sl, r4
   11cf4:	blt	11c80 <__assert_fail@plt+0xb80>
   11cf8:	b	11d20 <__assert_fail@plt+0xc20>
   11cfc:	movw	r0, #29012	; 0x7154
   11d00:	movt	r0, #2
   11d04:	ldr	r3, [r0]
   11d08:	mov	r0, r9
   11d0c:	mov	r1, #1
   11d10:	mov	r2, r4
   11d14:	bl	10f08 <fwrite_unlocked@plt>
   11d18:	cmp	r0, r4
   11d1c:	bcc	11d28 <__assert_fail@plt+0xc28>
   11d20:	sub	sp, fp, #28
   11d24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d28:	bl	1101c <__errno_location@plt>
   11d2c:	ldr	r4, [r0]
   11d30:	movw	r1, #25052	; 0x61dc
   11d34:	movt	r1, #1
   11d38:	mov	r0, #0
   11d3c:	mov	r2, #5
   11d40:	bl	10f2c <dcgettext@plt>
   11d44:	mov	r2, r0
   11d48:	mov	r0, #1
   11d4c:	mov	r1, r4
   11d50:	bl	10fa4 <error@plt>
   11d54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d58:	add	fp, sp, #28
   11d5c:	sub	sp, sp, #20
   11d60:	mov	r9, r2
   11d64:	mov	r6, r1
   11d68:	mov	r5, r0
   11d6c:	tst	r3, #3
   11d70:	bne	11d9c <__assert_fail@plt+0xc9c>
   11d74:	asr	r0, r3, #2
   11d78:	add	r0, r0, r0, lsl #1
   11d7c:	cmp	r0, r6
   11d80:	bne	11d9c <__assert_fail@plt+0xc9c>
   11d84:	mov	r0, r5
   11d88:	mov	r1, r6
   11d8c:	mov	r2, r9
   11d90:	sub	sp, fp, #28
   11d94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d98:	b	11ef8 <__assert_fail@plt+0xdf8>
   11d9c:	cmp	r6, #0
   11da0:	cmpne	r3, #0
   11da4:	bne	11dc0 <__assert_fail@plt+0xcc0>
   11da8:	cmp	r3, #0
   11dac:	beq	11db8 <__assert_fail@plt+0xcb8>
   11db0:	mov	r0, #0
   11db4:	strb	r0, [r9]
   11db8:	sub	sp, fp, #28
   11dbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11dc0:	sub	r0, r3, #3
   11dc4:	str	r0, [sp, #8]
   11dc8:	sub	r0, r3, #2
   11dcc:	str	r0, [sp, #12]
   11dd0:	sub	r0, r3, #1
   11dd4:	str	r0, [sp, #16]
   11dd8:	sub	r0, r3, #4
   11ddc:	str	r0, [sp, #4]
   11de0:	mov	r7, #0
   11de4:	movw	r8, #25271	; 0x62b7
   11de8:	movt	r8, #1
   11dec:	ldrb	r0, [r5]
   11df0:	bl	11f84 <__assert_fail@plt+0xe84>
   11df4:	ldrb	r0, [r8, r0, lsr #2]
   11df8:	mov	r4, r9
   11dfc:	strb	r0, [r4, r7]!
   11e00:	ldr	r0, [sp, #16]
   11e04:	cmp	r0, r7
   11e08:	beq	11db8 <__assert_fail@plt+0xcb8>
   11e0c:	ldrb	r0, [r5]
   11e10:	bl	11f84 <__assert_fail@plt+0xe84>
   11e14:	lsl	sl, r0, #4
   11e18:	mov	r0, #0
   11e1c:	cmp	r6, #1
   11e20:	beq	11e30 <__assert_fail@plt+0xd30>
   11e24:	ldrb	r0, [r5, #1]
   11e28:	bl	11f84 <__assert_fail@plt+0xe84>
   11e2c:	lsr	r0, r0, #4
   11e30:	add	r0, r0, sl
   11e34:	and	r0, r0, #63	; 0x3f
   11e38:	ldrb	r0, [r8, r0]
   11e3c:	strb	r0, [r4, #1]
   11e40:	ldr	r0, [sp, #12]
   11e44:	cmp	r0, r7
   11e48:	beq	11db8 <__assert_fail@plt+0xcb8>
   11e4c:	cmp	r6, #1
   11e50:	beq	11e78 <__assert_fail@plt+0xd78>
   11e54:	ldrb	r0, [r5, #1]
   11e58:	bl	11f84 <__assert_fail@plt+0xe84>
   11e5c:	subs	sl, r6, #2
   11e60:	lsl	r6, r0, #2
   11e64:	beq	11e84 <__assert_fail@plt+0xd84>
   11e68:	ldrb	r0, [r5, #2]
   11e6c:	bl	11f84 <__assert_fail@plt+0xe84>
   11e70:	lsr	r0, r0, #6
   11e74:	b	11e88 <__assert_fail@plt+0xd88>
   11e78:	mov	r0, #61	; 0x3d
   11e7c:	mov	sl, #0
   11e80:	b	11e94 <__assert_fail@plt+0xd94>
   11e84:	mov	r0, #0
   11e88:	add	r0, r0, r6
   11e8c:	and	r0, r0, #63	; 0x3f
   11e90:	ldrb	r0, [r8, r0]
   11e94:	strb	r0, [r4, #2]
   11e98:	ldr	r0, [sp, #8]
   11e9c:	cmp	r0, r7
   11ea0:	beq	11db8 <__assert_fail@plt+0xcb8>
   11ea4:	cmp	sl, #0
   11ea8:	beq	11ec0 <__assert_fail@plt+0xdc0>
   11eac:	ldrb	r0, [r5, #2]
   11eb0:	bl	11f84 <__assert_fail@plt+0xe84>
   11eb4:	and	r0, r0, #63	; 0x3f
   11eb8:	ldrb	r0, [r8, r0]
   11ebc:	b	11ec4 <__assert_fail@plt+0xdc4>
   11ec0:	mov	r0, #61	; 0x3d
   11ec4:	strb	r0, [r4, #3]
   11ec8:	ldr	r0, [sp, #4]
   11ecc:	cmp	r0, r7
   11ed0:	beq	11db8 <__assert_fail@plt+0xcb8>
   11ed4:	sub	r6, sl, #1
   11ed8:	cmp	sl, #0
   11edc:	movne	sl, r6
   11ee0:	cmp	sl, #0
   11ee4:	addne	r5, r5, #3
   11ee8:	add	r7, r7, #4
   11eec:	bne	11dec <__assert_fail@plt+0xcec>
   11ef0:	add	r9, r9, r7
   11ef4:	b	11db0 <__assert_fail@plt+0xcb0>
   11ef8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11efc:	add	fp, sp, #24
   11f00:	cmp	r1, #0
   11f04:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   11f08:	mov	r4, r2
   11f0c:	mov	r8, r1
   11f10:	mov	r6, r0
   11f14:	movw	r9, #25271	; 0x62b7
   11f18:	movt	r9, #1
   11f1c:	ldrb	r7, [r6]
   11f20:	mov	r0, r7
   11f24:	bl	11f84 <__assert_fail@plt+0xe84>
   11f28:	ldrb	r0, [r9, r7, lsr #2]
   11f2c:	strb	r0, [r4]
   11f30:	ldrb	r5, [r6, #1]
   11f34:	mov	r0, r5
   11f38:	bl	11f84 <__assert_fail@plt+0xe84>
   11f3c:	lsr	r0, r5, #4
   11f40:	bfi	r0, r7, #4, #2
   11f44:	ldrb	r0, [r9, r0]
   11f48:	strb	r0, [r4, #1]
   11f4c:	ldrb	r0, [r6, #2]
   11f50:	bl	11f84 <__assert_fail@plt+0xe84>
   11f54:	and	r1, r0, #63	; 0x3f
   11f58:	ldrb	r1, [r9, r1]
   11f5c:	strb	r1, [r4, #3]
   11f60:	lsr	r0, r0, #6
   11f64:	bfi	r0, r5, #2, #4
   11f68:	ldrb	r0, [r9, r0]
   11f6c:	strb	r0, [r4, #2]
   11f70:	add	r4, r4, #4
   11f74:	add	r6, r6, #3
   11f78:	subs	r8, r8, #3
   11f7c:	bne	11f1c <__assert_fail@plt+0xe1c>
   11f80:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11f84:	bx	lr
   11f88:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11f8c:	add	fp, sp, #24
   11f90:	mov	r6, r2
   11f94:	mov	r4, r1
   11f98:	mov	r8, r0
   11f9c:	movw	r0, #21846	; 0x5556
   11fa0:	movt	r0, #21845	; 0x5555
   11fa4:	smmul	r0, r1, r0
   11fa8:	add	r0, r0, r0, lsr #31
   11fac:	add	r1, r0, r0, lsl #1
   11fb0:	subs	r1, r4, r1
   11fb4:	addne	r0, r0, #1
   11fb8:	cmn	r0, #1
   11fbc:	ble	11fcc <__assert_fail@plt+0xecc>
   11fc0:	cmn	r0, #-536870911	; 0xe0000001
   11fc4:	ble	11fe0 <__assert_fail@plt+0xee0>
   11fc8:	b	12024 <__assert_fail@plt+0xf24>
   11fcc:	beq	11fe0 <__assert_fail@plt+0xee0>
   11fd0:	mov	r1, #-2147483648	; 0x80000000
   11fd4:	sdiv	r1, r1, r0
   11fd8:	cmp	r1, #4
   11fdc:	blt	12024 <__assert_fail@plt+0xf24>
   11fe0:	cmn	r4, #1
   11fe4:	ble	12024 <__assert_fail@plt+0xf24>
   11fe8:	lsl	r7, r0, #2
   11fec:	orr	r5, r7, #1
   11ff0:	mov	r0, r5
   11ff4:	bl	128b8 <__assert_fail@plt+0x17b8>
   11ff8:	str	r0, [r6]
   11ffc:	cmp	r0, #0
   12000:	moveq	r0, r5
   12004:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   12008:	mov	r2, r0
   1200c:	mov	r0, r8
   12010:	mov	r1, r4
   12014:	mov	r3, r5
   12018:	bl	11d54 <__assert_fail@plt+0xc54>
   1201c:	mov	r0, r7
   12020:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12024:	mov	r7, #0
   12028:	str	r7, [r6]
   1202c:	mov	r0, r7
   12030:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12034:	push	{fp, lr}
   12038:	mov	fp, sp
   1203c:	bl	11f84 <__assert_fail@plt+0xe84>
   12040:	movw	r1, #25335	; 0x62f7
   12044:	movt	r1, #1
   12048:	add	r0, r1, r0
   1204c:	ldrsb	r1, [r0]
   12050:	mov	r0, #0
   12054:	cmn	r1, #1
   12058:	movwgt	r0, #1
   1205c:	pop	{fp, pc}
   12060:	mov	r1, #0
   12064:	str	r1, [r0]
   12068:	bx	lr
   1206c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12070:	add	fp, sp, #28
   12074:	sub	sp, sp, #28
   12078:	mov	r9, r0
   1207c:	str	r2, [sp, #20]
   12080:	str	r1, [sp, #24]
   12084:	str	r3, [sp, #16]
   12088:	ldr	r0, [fp, #8]
   1208c:	ldr	r0, [r0]
   12090:	str	r0, [sp, #12]
   12094:	mov	r0, #0
   12098:	cmp	r9, #0
   1209c:	mov	r4, #0
   120a0:	beq	120b8 <__assert_fail@plt+0xfb8>
   120a4:	clz	r0, r2
   120a8:	lsr	r4, r0, #5
   120ac:	ldr	r0, [r9]
   120b0:	cmp	r0, #0
   120b4:	movwne	r0, #1
   120b8:	orr	r8, r0, r4
   120bc:	clz	r0, r9
   120c0:	lsr	r0, r0, #5
   120c4:	str	r0, [sp, #8]
   120c8:	add	r7, sp, #16
   120cc:	add	r5, sp, #12
   120d0:	str	r4, [sp, #4]
   120d4:	b	120e4 <__assert_fail@plt+0xfe4>
   120d8:	ldr	r0, [sp, #24]
   120dc:	sub	r0, r6, r0
   120e0:	str	r0, [sp, #20]
   120e4:	ldr	sl, [sp, #12]
   120e8:	cmp	r8, #0
   120ec:	beq	120f8 <__assert_fail@plt+0xff8>
   120f0:	ldr	r6, [sp, #20]
   120f4:	b	12150 <__assert_fail@plt+0x1050>
   120f8:	ldr	r6, [sp, #20]
   120fc:	ldr	r4, [sp, #24]
   12100:	mov	r0, r4
   12104:	mov	r1, r6
   12108:	mov	r2, r7
   1210c:	mov	r3, r5
   12110:	bl	12250 <__assert_fail@plt+0x1150>
   12114:	cmp	r0, #0
   12118:	beq	1214c <__assert_fail@plt+0x104c>
   1211c:	ldr	sl, [sp, #12]
   12120:	add	r4, r4, #4
   12124:	sub	r6, r6, #4
   12128:	mov	r0, r4
   1212c:	mov	r1, r6
   12130:	mov	r2, r7
   12134:	mov	r3, r5
   12138:	bl	12250 <__assert_fail@plt+0x1150>
   1213c:	cmp	r0, #0
   12140:	bne	1211c <__assert_fail@plt+0x101c>
   12144:	str	r6, [sp, #20]
   12148:	str	r4, [sp, #24]
   1214c:	ldr	r4, [sp, #4]
   12150:	cmp	r6, #0
   12154:	mov	r0, r6
   12158:	movwne	r0, #1
   1215c:	orr	r0, r4, r0
   12160:	cmp	r0, #1
   12164:	bne	12224 <__assert_fail@plt+0x1124>
   12168:	cmp	r6, #0
   1216c:	beq	1218c <__assert_fail@plt+0x108c>
   12170:	ldr	r0, [sp, #24]
   12174:	ldrb	r1, [r0]
   12178:	subs	r1, r1, #10
   1217c:	movwne	r1, #1
   12180:	ldr	r2, [sp, #8]
   12184:	orrs	r1, r1, r2
   12188:	beq	12208 <__assert_fail@plt+0x1108>
   1218c:	ldr	r0, [sp, #12]
   12190:	str	sl, [sp, #12]
   12194:	sub	r0, r0, sl
   12198:	ldr	r1, [sp, #16]
   1219c:	add	r0, r1, r0
   121a0:	str	r0, [sp, #16]
   121a4:	ldr	r0, [sp, #24]
   121a8:	add	r6, r0, r6
   121ac:	cmp	r9, #0
   121b0:	beq	121c8 <__assert_fail@plt+0x10c8>
   121b4:	mov	r0, r9
   121b8:	add	r1, sp, #24
   121bc:	mov	r2, r6
   121c0:	add	r3, sp, #20
   121c4:	bl	12428 <__assert_fail@plt+0x1328>
   121c8:	ldr	r1, [sp, #20]
   121cc:	cmp	r1, #0
   121d0:	beq	1221c <__assert_fail@plt+0x111c>
   121d4:	cmp	r1, #3
   121d8:	mov	r2, #0
   121dc:	movwgt	r2, #1
   121e0:	orr	r2, r4, r2
   121e4:	ldr	r3, [sp, #8]
   121e8:	orrs	r2, r2, r3
   121ec:	beq	1221c <__assert_fail@plt+0x111c>
   121f0:	mov	r2, r7
   121f4:	mov	r3, r5
   121f8:	bl	12250 <__assert_fail@plt+0x1150>
   121fc:	cmp	r0, #0
   12200:	bne	120d8 <__assert_fail@plt+0xfd8>
   12204:	b	12224 <__assert_fail@plt+0x1124>
   12208:	add	r0, r0, #1
   1220c:	str	r0, [sp, #24]
   12210:	sub	r0, r6, #1
   12214:	str	r0, [sp, #20]
   12218:	b	120e4 <__assert_fail@plt+0xfe4>
   1221c:	mov	r0, #0
   12220:	str	r0, [sp, #20]
   12224:	ldr	r0, [fp, #8]
   12228:	mov	r2, r0
   1222c:	ldr	r0, [r0]
   12230:	ldr	r1, [sp, #12]
   12234:	sub	r0, r0, r1
   12238:	str	r0, [r2]
   1223c:	ldr	r0, [sp, #20]
   12240:	clz	r0, r0
   12244:	lsr	r0, r0, #5
   12248:	sub	sp, fp, #28
   1224c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12250:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12254:	add	fp, sp, #28
   12258:	sub	sp, sp, #4
   1225c:	mov	sl, #0
   12260:	cmp	r1, #2
   12264:	blt	12394 <__assert_fail@plt+0x1294>
   12268:	mov	r8, r3
   1226c:	mov	r9, r2
   12270:	mov	r7, r1
   12274:	mov	r6, r0
   12278:	ldr	r5, [r2]
   1227c:	ldrb	r4, [r0]
   12280:	mov	r0, r4
   12284:	bl	12034 <__assert_fail@plt+0xf34>
   12288:	cmp	r0, #0
   1228c:	beq	12394 <__assert_fail@plt+0x1294>
   12290:	str	r5, [sp]
   12294:	ldrb	r5, [r6, #1]
   12298:	mov	r0, r5
   1229c:	bl	12034 <__assert_fail@plt+0xf34>
   122a0:	cmp	r0, #0
   122a4:	beq	12394 <__assert_fail@plt+0x1294>
   122a8:	ldr	r0, [r8]
   122ac:	cmp	r0, #0
   122b0:	beq	122f8 <__assert_fail@plt+0x11f8>
   122b4:	mov	r0, r4
   122b8:	bl	11f84 <__assert_fail@plt+0xe84>
   122bc:	mov	r0, r5
   122c0:	bl	11f84 <__assert_fail@plt+0xe84>
   122c4:	movw	r0, #25335	; 0x62f7
   122c8:	movt	r0, #1
   122cc:	ldrb	r1, [r0, r4]
   122d0:	add	r0, r0, r5
   122d4:	ldrsb	r0, [r0]
   122d8:	lsr	r0, r0, #4
   122dc:	orr	r0, r0, r1, lsl #2
   122e0:	ldr	r1, [sp]
   122e4:	strb	r0, [r1], #1
   122e8:	str	r1, [sp]
   122ec:	ldr	r0, [r8]
   122f0:	sub	r0, r0, #1
   122f4:	str	r0, [r8]
   122f8:	cmp	r7, #2
   122fc:	beq	1238c <__assert_fail@plt+0x128c>
   12300:	ldrb	r4, [r6, #2]
   12304:	cmp	r4, #61	; 0x3d
   12308:	bne	12324 <__assert_fail@plt+0x1224>
   1230c:	cmp	r7, #4
   12310:	ldrbeq	r0, [r6, #3]
   12314:	cmpeq	r0, #61	; 0x3d
   12318:	bne	1238c <__assert_fail@plt+0x128c>
   1231c:	ldr	r5, [sp]
   12320:	b	12414 <__assert_fail@plt+0x1314>
   12324:	mov	r0, r4
   12328:	bl	12034 <__assert_fail@plt+0xf34>
   1232c:	cmp	r0, #0
   12330:	beq	1238c <__assert_fail@plt+0x128c>
   12334:	ldr	r0, [r8]
   12338:	cmp	r0, #0
   1233c:	beq	123a0 <__assert_fail@plt+0x12a0>
   12340:	mov	r0, r5
   12344:	bl	11f84 <__assert_fail@plt+0xe84>
   12348:	mov	r0, r4
   1234c:	bl	11f84 <__assert_fail@plt+0xe84>
   12350:	movw	r0, #25335	; 0x62f7
   12354:	movt	r0, #1
   12358:	ldrb	r1, [r0, r5]
   1235c:	add	r0, r0, r4
   12360:	ldrsb	r0, [r0]
   12364:	lsr	r0, r0, #2
   12368:	orr	r0, r0, r1, lsl #4
   1236c:	ldr	r5, [sp]
   12370:	strb	r0, [r5], #1
   12374:	ldr	r0, [r8]
   12378:	sub	r0, r0, #1
   1237c:	str	r0, [r8]
   12380:	cmp	r7, #3
   12384:	beq	12420 <__assert_fail@plt+0x1320>
   12388:	b	123ac <__assert_fail@plt+0x12ac>
   1238c:	ldr	r0, [sp]
   12390:	str	r0, [r9]
   12394:	mov	r0, sl
   12398:	sub	sp, fp, #28
   1239c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123a0:	ldr	r5, [sp]
   123a4:	cmp	r7, #3
   123a8:	beq	12420 <__assert_fail@plt+0x1320>
   123ac:	ldrb	r6, [r6, #3]
   123b0:	cmp	r6, #61	; 0x3d
   123b4:	bne	123c4 <__assert_fail@plt+0x12c4>
   123b8:	cmp	r7, #4
   123bc:	bne	12420 <__assert_fail@plt+0x1320>
   123c0:	b	12414 <__assert_fail@plt+0x1314>
   123c4:	mov	r0, r6
   123c8:	bl	12034 <__assert_fail@plt+0xf34>
   123cc:	cmp	r0, #0
   123d0:	beq	12420 <__assert_fail@plt+0x1320>
   123d4:	ldr	r0, [r8]
   123d8:	cmp	r0, #0
   123dc:	beq	12414 <__assert_fail@plt+0x1314>
   123e0:	mov	r0, r4
   123e4:	bl	11f84 <__assert_fail@plt+0xe84>
   123e8:	mov	r0, r6
   123ec:	bl	11f84 <__assert_fail@plt+0xe84>
   123f0:	movw	r0, #25335	; 0x62f7
   123f4:	movt	r0, #1
   123f8:	ldrb	r1, [r0, r4]
   123fc:	ldrb	r0, [r0, r6]
   12400:	orr	r0, r0, r1, lsl #6
   12404:	strb	r0, [r5], #1
   12408:	ldr	r0, [r8]
   1240c:	sub	r0, r0, #1
   12410:	str	r0, [r8]
   12414:	str	r5, [r9]
   12418:	mov	sl, #1
   1241c:	b	12394 <__assert_fail@plt+0x1294>
   12420:	str	r5, [r9]
   12424:	b	12394 <__assert_fail@plt+0x1294>
   12428:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1242c:	add	fp, sp, #24
   12430:	mov	r8, r3
   12434:	mov	r7, r2
   12438:	mov	r6, r1
   1243c:	mov	r4, r0
   12440:	ldr	r0, [r0]
   12444:	cmp	r0, #0
   12448:	beq	1245c <__assert_fail@plt+0x135c>
   1244c:	cmp	r0, #4
   12450:	bne	12488 <__assert_fail@plt+0x1388>
   12454:	mov	r0, #0
   12458:	str	r0, [r4]
   1245c:	ldr	r5, [r6]
   12460:	sub	r0, r7, r5
   12464:	cmp	r0, #4
   12468:	blt	12488 <__assert_fail@plt+0x1388>
   1246c:	mov	r9, #4
   12470:	mov	r0, r5
   12474:	mov	r1, #10
   12478:	mov	r2, #4
   1247c:	bl	11064 <memchr@plt>
   12480:	cmp	r0, #0
   12484:	beq	124d8 <__assert_fail@plt+0x13d8>
   12488:	ldr	r0, [r6]
   1248c:	cmp	r0, r7
   12490:	bcs	124c4 <__assert_fail@plt+0x13c4>
   12494:	add	r0, r0, #1
   12498:	ldrb	r1, [r0, #-1]
   1249c:	cmp	r1, #10
   124a0:	beq	1248c <__assert_fail@plt+0x138c>
   124a4:	ldr	r2, [r4]
   124a8:	add	r3, r2, #1
   124ac:	mov	r5, r4
   124b0:	str	r3, [r5], r2
   124b4:	strb	r1, [r5, #4]
   124b8:	ldr	r1, [r4]
   124bc:	cmp	r1, #4
   124c0:	bne	1248c <__assert_fail@plt+0x138c>
   124c4:	str	r0, [r6]
   124c8:	ldr	r0, [r4], #4
   124cc:	str	r0, [r8]
   124d0:	mov	r0, r4
   124d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   124d8:	add	r0, r5, #4
   124dc:	str	r0, [r6]
   124e0:	str	r9, [r8]
   124e4:	mov	r0, r5
   124e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   124ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   124f0:	add	fp, sp, #24
   124f4:	sub	sp, sp, #8
   124f8:	mov	r4, r3
   124fc:	mov	r6, r2
   12500:	mov	r8, r1
   12504:	mov	r7, r0
   12508:	asr	r0, r2, #2
   1250c:	add	r0, r0, r0, lsl #1
   12510:	add	r0, r0, #3
   12514:	str	r0, [sp, #4]
   12518:	bl	128b8 <__assert_fail@plt+0x17b8>
   1251c:	str	r0, [r4]
   12520:	mov	r5, #1
   12524:	cmp	r0, #0
   12528:	beq	12574 <__assert_fail@plt+0x1474>
   1252c:	mov	r3, r0
   12530:	add	r0, sp, #4
   12534:	str	r0, [sp]
   12538:	mov	r0, r7
   1253c:	mov	r1, r8
   12540:	mov	r2, r6
   12544:	bl	1206c <__assert_fail@plt+0xf6c>
   12548:	cmp	r0, #0
   1254c:	beq	12564 <__assert_fail@plt+0x1464>
   12550:	ldr	r0, [fp, #8]
   12554:	cmp	r0, #0
   12558:	ldrne	r1, [sp, #4]
   1255c:	strne	r1, [r0]
   12560:	b	12574 <__assert_fail@plt+0x1474>
   12564:	ldr	r0, [r4]
   12568:	bl	127d0 <__assert_fail@plt+0x16d0>
   1256c:	mov	r5, #0
   12570:	str	r5, [r4]
   12574:	mov	r0, r5
   12578:	sub	sp, fp, #24
   1257c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12580:	movw	r1, #29024	; 0x7160
   12584:	movt	r1, #2
   12588:	str	r0, [r1]
   1258c:	bx	lr
   12590:	movw	r1, #29028	; 0x7164
   12594:	movt	r1, #2
   12598:	strb	r0, [r1]
   1259c:	bx	lr
   125a0:	push	{r4, r5, r6, sl, fp, lr}
   125a4:	add	fp, sp, #16
   125a8:	sub	sp, sp, #8
   125ac:	movw	r0, #29012	; 0x7154
   125b0:	movt	r0, #2
   125b4:	ldr	r0, [r0]
   125b8:	bl	157d0 <__assert_fail@plt+0x46d0>
   125bc:	cmp	r0, #0
   125c0:	beq	125e8 <__assert_fail@plt+0x14e8>
   125c4:	movw	r0, #29028	; 0x7164
   125c8:	movt	r0, #2
   125cc:	ldrb	r0, [r0]
   125d0:	cmp	r0, #0
   125d4:	beq	12608 <__assert_fail@plt+0x1508>
   125d8:	bl	1101c <__errno_location@plt>
   125dc:	ldr	r0, [r0]
   125e0:	cmp	r0, #32
   125e4:	bne	12608 <__assert_fail@plt+0x1508>
   125e8:	movw	r0, #29000	; 0x7148
   125ec:	movt	r0, #2
   125f0:	ldr	r0, [r0]
   125f4:	bl	157d0 <__assert_fail@plt+0x46d0>
   125f8:	cmp	r0, #0
   125fc:	subeq	sp, fp, #16
   12600:	popeq	{r4, r5, r6, sl, fp, pc}
   12604:	b	12678 <__assert_fail@plt+0x1578>
   12608:	movw	r1, #25052	; 0x61dc
   1260c:	movt	r1, #1
   12610:	mov	r0, #0
   12614:	mov	r2, #5
   12618:	bl	10f2c <dcgettext@plt>
   1261c:	mov	r4, r0
   12620:	movw	r0, #29024	; 0x7160
   12624:	movt	r0, #2
   12628:	ldr	r6, [r0]
   1262c:	bl	1101c <__errno_location@plt>
   12630:	ldr	r5, [r0]
   12634:	cmp	r6, #0
   12638:	bne	12654 <__assert_fail@plt+0x1554>
   1263c:	movw	r2, #24488	; 0x5fa8
   12640:	movt	r2, #1
   12644:	mov	r0, #0
   12648:	mov	r1, r5
   1264c:	mov	r3, r4
   12650:	b	12674 <__assert_fail@plt+0x1574>
   12654:	mov	r0, r6
   12658:	bl	13fd4 <__assert_fail@plt+0x2ed4>
   1265c:	mov	r3, r0
   12660:	str	r4, [sp]
   12664:	movw	r2, #24484	; 0x5fa4
   12668:	movt	r2, #1
   1266c:	mov	r0, #0
   12670:	mov	r1, r5
   12674:	bl	10fa4 <error@plt>
   12678:	movw	r0, #28916	; 0x70f4
   1267c:	movt	r0, #2
   12680:	ldr	r0, [r0]
   12684:	bl	10ee4 <_exit@plt>
   12688:	b	10eb4 <posix_fadvise64@plt>
   1268c:	cmp	r0, #0
   12690:	bxeq	lr
   12694:	push	{r4, sl, fp, lr}
   12698:	add	fp, sp, #8
   1269c:	sub	sp, sp, #16
   126a0:	mov	r4, r1
   126a4:	bl	1104c <fileno@plt>
   126a8:	mov	r1, #0
   126ac:	str	r1, [sp]
   126b0:	stmib	sp, {r1, r4}
   126b4:	mov	r2, #0
   126b8:	mov	r3, #0
   126bc:	bl	12688 <__assert_fail@plt+0x1588>
   126c0:	sub	sp, fp, #8
   126c4:	pop	{r4, sl, fp, pc}
   126c8:	push	{r4, r5, fp, lr}
   126cc:	add	fp, sp, #8
   126d0:	sub	sp, sp, #8
   126d4:	mov	r4, r0
   126d8:	bl	1104c <fileno@plt>
   126dc:	cmn	r0, #1
   126e0:	ble	12758 <__assert_fail@plt+0x1658>
   126e4:	mov	r0, r4
   126e8:	bl	10fc8 <__freading@plt>
   126ec:	cmp	r0, #0
   126f0:	beq	1271c <__assert_fail@plt+0x161c>
   126f4:	mov	r0, r4
   126f8:	bl	1104c <fileno@plt>
   126fc:	mov	r1, #1
   12700:	str	r1, [sp]
   12704:	mov	r2, #0
   12708:	mov	r3, #0
   1270c:	bl	10f68 <lseek64@plt>
   12710:	and	r0, r0, r1
   12714:	cmn	r0, #1
   12718:	beq	12758 <__assert_fail@plt+0x1658>
   1271c:	mov	r0, r4
   12720:	bl	12768 <__assert_fail@plt+0x1668>
   12724:	cmp	r0, #0
   12728:	beq	12758 <__assert_fail@plt+0x1658>
   1272c:	bl	1101c <__errno_location@plt>
   12730:	ldr	r5, [r0]
   12734:	mov	r0, r4
   12738:	bl	1107c <fclose@plt>
   1273c:	cmp	r5, #0
   12740:	beq	12750 <__assert_fail@plt+0x1650>
   12744:	bl	1101c <__errno_location@plt>
   12748:	str	r5, [r0]
   1274c:	mvn	r0, #0
   12750:	sub	sp, fp, #8
   12754:	pop	{r4, r5, fp, pc}
   12758:	mov	r0, r4
   1275c:	sub	sp, fp, #8
   12760:	pop	{r4, r5, fp, lr}
   12764:	b	1107c <fclose@plt>
   12768:	push	{r4, sl, fp, lr}
   1276c:	add	fp, sp, #8
   12770:	mov	r4, r0
   12774:	cmp	r0, #0
   12778:	beq	12790 <__assert_fail@plt+0x1690>
   1277c:	mov	r0, r4
   12780:	bl	10fc8 <__freading@plt>
   12784:	cmp	r0, #0
   12788:	movne	r0, r4
   1278c:	blne	1279c <__assert_fail@plt+0x169c>
   12790:	mov	r0, r4
   12794:	pop	{r4, sl, fp, lr}
   12798:	b	10ec0 <fflush@plt>
   1279c:	ldrb	r1, [r0, #1]
   127a0:	tst	r1, #1
   127a4:	bxeq	lr
   127a8:	push	{fp, lr}
   127ac:	mov	fp, sp
   127b0:	sub	sp, sp, #8
   127b4:	mov	r1, #1
   127b8:	str	r1, [sp]
   127bc:	mov	r2, #0
   127c0:	mov	r3, #0
   127c4:	bl	127f8 <__assert_fail@plt+0x16f8>
   127c8:	mov	sp, fp
   127cc:	pop	{fp, pc}
   127d0:	push	{r4, r5, r6, sl, fp, lr}
   127d4:	add	fp, sp, #16
   127d8:	mov	r4, r0
   127dc:	bl	1101c <__errno_location@plt>
   127e0:	mov	r5, r0
   127e4:	ldr	r6, [r0]
   127e8:	mov	r0, r4
   127ec:	bl	10ed8 <free@plt>
   127f0:	str	r6, [r5]
   127f4:	pop	{r4, r5, r6, sl, fp, pc}
   127f8:	push	{r4, r5, r6, r7, fp, lr}
   127fc:	add	fp, sp, #16
   12800:	sub	sp, sp, #8
   12804:	mov	r5, r3
   12808:	mov	r6, r2
   1280c:	mov	r4, r0
   12810:	ldr	r0, [r0, #4]
   12814:	ldr	r1, [r4, #8]
   12818:	cmp	r1, r0
   1281c:	bne	12838 <__assert_fail@plt+0x1738>
   12820:	ldrd	r0, [r4, #16]
   12824:	cmp	r1, r0
   12828:	bne	12838 <__assert_fail@plt+0x1738>
   1282c:	ldr	r0, [r4, #36]	; 0x24
   12830:	cmp	r0, #0
   12834:	beq	12850 <__assert_fail@plt+0x1750>
   12838:	mov	r0, r4
   1283c:	mov	r2, r6
   12840:	mov	r3, r5
   12844:	sub	sp, fp, #16
   12848:	pop	{r4, r5, r6, r7, fp, lr}
   1284c:	b	11088 <fseeko64@plt>
   12850:	ldr	r7, [fp, #8]
   12854:	mov	r0, r4
   12858:	bl	1104c <fileno@plt>
   1285c:	str	r7, [sp]
   12860:	mov	r2, r6
   12864:	mov	r3, r5
   12868:	bl	10f68 <lseek64@plt>
   1286c:	and	r2, r0, r1
   12870:	cmn	r2, #1
   12874:	mvneq	r0, #0
   12878:	subeq	sp, fp, #16
   1287c:	popeq	{r4, r5, r6, r7, fp, pc}
   12880:	strd	r0, [r4, #80]	; 0x50
   12884:	ldr	r0, [r4]
   12888:	bic	r0, r0, #16
   1288c:	str	r0, [r4]
   12890:	mov	r0, #0
   12894:	sub	sp, fp, #16
   12898:	pop	{r4, r5, r6, r7, fp, pc}
   1289c:	push	{fp, lr}
   128a0:	mov	fp, sp
   128a4:	bl	1101c <__errno_location@plt>
   128a8:	mov	r1, #12
   128ac:	str	r1, [r0]
   128b0:	mov	r0, #0
   128b4:	pop	{fp, pc}
   128b8:	b	15418 <__assert_fail@plt+0x4318>
   128bc:	cmp	r1, #0
   128c0:	orreq	r1, r1, #1
   128c4:	b	15448 <__assert_fail@plt+0x4348>
   128c8:	b	153c4 <__assert_fail@plt+0x42c4>
   128cc:	clz	r3, r2
   128d0:	lsr	ip, r3, #5
   128d4:	clz	r3, r1
   128d8:	lsr	r3, r3, #5
   128dc:	orrs	r3, r3, ip
   128e0:	movwne	r1, #1
   128e4:	movwne	r2, #1
   128e8:	b	14538 <__assert_fail@plt+0x3438>
   128ec:	push	{r4, r5, fp, lr}
   128f0:	add	fp, sp, #8
   128f4:	cmp	r0, #0
   128f8:	beq	1298c <__assert_fail@plt+0x188c>
   128fc:	mov	r4, r0
   12900:	mov	r1, #47	; 0x2f
   12904:	bl	110a0 <strrchr@plt>
   12908:	cmp	r0, #0
   1290c:	mov	r5, r4
   12910:	addne	r5, r0, #1
   12914:	sub	r0, r5, r4
   12918:	cmp	r0, #7
   1291c:	blt	12970 <__assert_fail@plt+0x1870>
   12920:	sub	r0, r5, #7
   12924:	movw	r1, #25647	; 0x642f
   12928:	movt	r1, #1
   1292c:	mov	r2, #7
   12930:	bl	110dc <strncmp@plt>
   12934:	cmp	r0, #0
   12938:	bne	12970 <__assert_fail@plt+0x1870>
   1293c:	movw	r1, #25655	; 0x6437
   12940:	movt	r1, #1
   12944:	mov	r0, r5
   12948:	mov	r2, #3
   1294c:	bl	110dc <strncmp@plt>
   12950:	cmp	r0, #0
   12954:	beq	12960 <__assert_fail@plt+0x1860>
   12958:	mov	r4, r5
   1295c:	b	12970 <__assert_fail@plt+0x1870>
   12960:	add	r4, r5, #3
   12964:	movw	r0, #28984	; 0x7138
   12968:	movt	r0, #2
   1296c:	str	r4, [r0]
   12970:	movw	r0, #28988	; 0x713c
   12974:	movt	r0, #2
   12978:	str	r4, [r0]
   1297c:	movw	r0, #29032	; 0x7168
   12980:	movt	r0, #2
   12984:	str	r4, [r0]
   12988:	pop	{r4, r5, fp, pc}
   1298c:	movw	r0, #29000	; 0x7148
   12990:	movt	r0, #2
   12994:	ldr	r3, [r0]
   12998:	movw	r0, #25591	; 0x63f7
   1299c:	movt	r0, #1
   129a0:	mov	r1, #55	; 0x37
   129a4:	mov	r2, #1
   129a8:	bl	10f5c <fwrite@plt>
   129ac:	bl	110e8 <abort@plt>
   129b0:	push	{r4, r5, r6, sl, fp, lr}
   129b4:	add	fp, sp, #16
   129b8:	mov	r4, r0
   129bc:	movw	r0, #29040	; 0x7170
   129c0:	movt	r0, #2
   129c4:	cmp	r4, #0
   129c8:	moveq	r4, r0
   129cc:	bl	1101c <__errno_location@plt>
   129d0:	mov	r5, r0
   129d4:	ldr	r6, [r0]
   129d8:	mov	r0, r4
   129dc:	mov	r1, #48	; 0x30
   129e0:	bl	14d2c <__assert_fail@plt+0x3c2c>
   129e4:	str	r6, [r5]
   129e8:	pop	{r4, r5, r6, sl, fp, pc}
   129ec:	movw	r1, #29040	; 0x7170
   129f0:	movt	r1, #2
   129f4:	cmp	r0, #0
   129f8:	movne	r1, r0
   129fc:	ldr	r0, [r1]
   12a00:	bx	lr
   12a04:	movw	r2, #29040	; 0x7170
   12a08:	movt	r2, #2
   12a0c:	cmp	r0, #0
   12a10:	movne	r2, r0
   12a14:	str	r1, [r2]
   12a18:	bx	lr
   12a1c:	movw	r3, #29040	; 0x7170
   12a20:	movt	r3, #2
   12a24:	cmp	r0, #0
   12a28:	movne	r3, r0
   12a2c:	ubfx	r0, r1, #5, #3
   12a30:	add	r0, r3, r0, lsl #2
   12a34:	ldr	r3, [r0, #8]
   12a38:	and	r1, r1, #31
   12a3c:	eor	r2, r2, r3, lsr r1
   12a40:	and	r2, r2, #1
   12a44:	eor	r2, r3, r2, lsl r1
   12a48:	str	r2, [r0, #8]
   12a4c:	mov	r0, #1
   12a50:	and	r0, r0, r3, lsr r1
   12a54:	bx	lr
   12a58:	movw	r2, #29040	; 0x7170
   12a5c:	movt	r2, #2
   12a60:	cmp	r0, #0
   12a64:	movne	r2, r0
   12a68:	ldr	r0, [r2, #4]
   12a6c:	str	r1, [r2, #4]
   12a70:	bx	lr
   12a74:	movw	r3, #29040	; 0x7170
   12a78:	movt	r3, #2
   12a7c:	cmp	r0, #0
   12a80:	movne	r3, r0
   12a84:	mov	r0, #10
   12a88:	str	r0, [r3]
   12a8c:	cmp	r1, #0
   12a90:	cmpne	r2, #0
   12a94:	bne	12aa4 <__assert_fail@plt+0x19a4>
   12a98:	push	{fp, lr}
   12a9c:	mov	fp, sp
   12aa0:	bl	110e8 <abort@plt>
   12aa4:	str	r1, [r3, #40]	; 0x28
   12aa8:	str	r2, [r3, #44]	; 0x2c
   12aac:	bx	lr
   12ab0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ab4:	add	fp, sp, #28
   12ab8:	sub	sp, sp, #20
   12abc:	mov	r8, r3
   12ac0:	mov	r9, r2
   12ac4:	mov	sl, r1
   12ac8:	mov	r7, r0
   12acc:	ldr	r0, [fp, #8]
   12ad0:	movw	r5, #29040	; 0x7170
   12ad4:	movt	r5, #2
   12ad8:	cmp	r0, #0
   12adc:	movne	r5, r0
   12ae0:	bl	1101c <__errno_location@plt>
   12ae4:	mov	r4, r0
   12ae8:	ldm	r5, {r0, r1}
   12aec:	ldr	r2, [r5, #40]	; 0x28
   12af0:	ldr	r3, [r5, #44]	; 0x2c
   12af4:	ldr	r6, [r4]
   12af8:	add	r5, r5, #8
   12afc:	stm	sp, {r0, r1, r5}
   12b00:	str	r2, [sp, #12]
   12b04:	str	r3, [sp, #16]
   12b08:	mov	r0, r7
   12b0c:	mov	r1, sl
   12b10:	mov	r2, r9
   12b14:	mov	r3, r8
   12b18:	bl	12b28 <__assert_fail@plt+0x1a28>
   12b1c:	str	r6, [r4]
   12b20:	sub	sp, fp, #28
   12b24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b2c:	add	fp, sp, #28
   12b30:	sub	sp, sp, #156	; 0x9c
   12b34:	mov	r9, r3
   12b38:	str	r2, [fp, #-84]	; 0xffffffac
   12b3c:	mov	r6, r1
   12b40:	mov	r7, r0
   12b44:	ldr	r0, [fp, #12]
   12b48:	and	r1, r0, #4
   12b4c:	str	r1, [sp, #32]
   12b50:	and	r1, r0, #1
   12b54:	str	r1, [sp, #36]	; 0x24
   12b58:	ubfx	sl, r0, #1, #1
   12b5c:	bl	10f74 <__ctype_get_mb_cur_max@plt>
   12b60:	str	r0, [sp, #40]	; 0x28
   12b64:	ldr	r0, [fp, #24]
   12b68:	str	r0, [sp, #76]	; 0x4c
   12b6c:	ldr	r0, [fp, #20]
   12b70:	str	r0, [sp, #68]	; 0x44
   12b74:	ldr	r0, [fp, #8]
   12b78:	str	r0, [fp, #-60]	; 0xffffffc4
   12b7c:	mov	r0, #0
   12b80:	str	r0, [sp, #72]	; 0x48
   12b84:	mov	r0, #0
   12b88:	str	r0, [sp, #92]	; 0x5c
   12b8c:	mov	r0, #0
   12b90:	str	r0, [fp, #-72]	; 0xffffffb8
   12b94:	mov	r0, #0
   12b98:	mov	r1, #0
   12b9c:	str	r1, [fp, #-56]	; 0xffffffc8
   12ba0:	mov	r1, #0
   12ba4:	str	r1, [sp, #56]	; 0x38
   12ba8:	mov	r5, #1
   12bac:	str	r7, [sp, #80]	; 0x50
   12bb0:	mov	r4, r6
   12bb4:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12bb8:	cmp	r6, #10
   12bbc:	bhi	13b24 <__assert_fail@plt+0x2a24>
   12bc0:	add	r1, pc, #20
   12bc4:	mov	r8, #0
   12bc8:	mov	r2, #1
   12bcc:	mov	r3, #0
   12bd0:	ldr	ip, [fp, #-84]	; 0xffffffac
   12bd4:	mov	lr, r9
   12bd8:	ldr	pc, [r1, r6, lsl #2]
   12bdc:			; <UNDEFINED> instruction: 0x00012cb4
   12be0:	andeq	r2, r1, r4, ror #25
   12be4:	andeq	r2, r1, r4, lsr #25
   12be8:	muleq	r1, ip, ip
   12bec:	ldrdeq	r2, [r1], -r8
   12bf0:	andeq	r2, r1, r8, lsr sp
   12bf4:	andeq	r2, r1, r4, asr #25
   12bf8:	muleq	r1, r4, sp
   12bfc:	andeq	r2, r1, r8, lsl #24
   12c00:	andeq	r2, r1, r8, lsl #24
   12c04:	andeq	r2, r1, r0, lsr ip
   12c08:	movw	r0, #25737	; 0x6489
   12c0c:	movt	r0, #1
   12c10:	mov	r1, r6
   12c14:	bl	14130 <__assert_fail@plt+0x3030>
   12c18:	str	r0, [sp, #68]	; 0x44
   12c1c:	movw	r0, #25739	; 0x648b
   12c20:	movt	r0, #1
   12c24:	mov	r1, r6
   12c28:	bl	14130 <__assert_fail@plt+0x3030>
   12c2c:	str	r0, [sp, #76]	; 0x4c
   12c30:	mov	r8, #0
   12c34:	tst	sl, #1
   12c38:	bne	12c70 <__assert_fail@plt+0x1b70>
   12c3c:	ldr	r0, [sp, #68]	; 0x44
   12c40:	ldrb	r0, [r0]
   12c44:	cmp	r0, #0
   12c48:	beq	12c70 <__assert_fail@plt+0x1b70>
   12c4c:	ldr	r1, [sp, #68]	; 0x44
   12c50:	add	r1, r1, #1
   12c54:	mov	r8, #0
   12c58:	cmp	r8, r4
   12c5c:	strbcc	r0, [r7, r8]
   12c60:	ldrb	r0, [r1, r8]
   12c64:	add	r8, r8, #1
   12c68:	cmp	r0, #0
   12c6c:	bne	12c58 <__assert_fail@plt+0x1b58>
   12c70:	ldr	r6, [sp, #76]	; 0x4c
   12c74:	mov	r0, r6
   12c78:	bl	11004 <strlen@plt>
   12c7c:	str	r0, [fp, #-72]	; 0xffffffb8
   12c80:	str	r6, [sp, #92]	; 0x5c
   12c84:	mov	r2, #1
   12c88:	mov	r3, sl
   12c8c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12c90:	mov	lr, r9
   12c94:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12c98:	b	12d94 <__assert_fail@plt+0x1c94>
   12c9c:	mov	r0, #1
   12ca0:	b	12ce4 <__assert_fail@plt+0x1be4>
   12ca4:	tst	sl, #1
   12ca8:	bne	12ce4 <__assert_fail@plt+0x1be4>
   12cac:	mov	r2, r0
   12cb0:	b	12d0c <__assert_fail@plt+0x1c0c>
   12cb4:	mov	r6, #0
   12cb8:	mov	r8, #0
   12cbc:	mov	r2, r0
   12cc0:	b	12d90 <__assert_fail@plt+0x1c90>
   12cc4:	mov	r0, #1
   12cc8:	str	r0, [fp, #-72]	; 0xffffffb8
   12ccc:	mov	r8, #0
   12cd0:	mov	r6, #5
   12cd4:	b	12d50 <__assert_fail@plt+0x1c50>
   12cd8:	mov	r2, #1
   12cdc:	tst	sl, #1
   12ce0:	beq	12d0c <__assert_fail@plt+0x1c0c>
   12ce4:	mov	r1, #1
   12ce8:	str	r1, [fp, #-72]	; 0xffffffb8
   12cec:	mov	r8, #0
   12cf0:	mov	r6, #2
   12cf4:	movw	r1, #25739	; 0x648b
   12cf8:	movt	r1, #1
   12cfc:	str	r1, [sp, #92]	; 0x5c
   12d00:	mov	r2, r0
   12d04:	mov	r3, #1
   12d08:	b	12d94 <__assert_fail@plt+0x1c94>
   12d0c:	mov	r8, #1
   12d10:	mov	r6, #2
   12d14:	cmp	r4, #0
   12d18:	movne	r0, #39	; 0x27
   12d1c:	strbne	r0, [r7]
   12d20:	movw	r0, #25739	; 0x648b
   12d24:	movt	r0, #1
   12d28:	str	r0, [sp, #92]	; 0x5c
   12d2c:	mov	r0, #1
   12d30:	str	r0, [fp, #-72]	; 0xffffffb8
   12d34:	b	12d90 <__assert_fail@plt+0x1c90>
   12d38:	mov	r6, #5
   12d3c:	tst	sl, #1
   12d40:	beq	12d68 <__assert_fail@plt+0x1c68>
   12d44:	mov	r0, #1
   12d48:	str	r0, [fp, #-72]	; 0xffffffb8
   12d4c:	mov	r8, #0
   12d50:	movw	r0, #25735	; 0x6487
   12d54:	movt	r0, #1
   12d58:	str	r0, [sp, #92]	; 0x5c
   12d5c:	mov	r2, #1
   12d60:	mov	r3, #1
   12d64:	b	12d94 <__assert_fail@plt+0x1c94>
   12d68:	cmp	r4, #0
   12d6c:	movne	r0, #34	; 0x22
   12d70:	strbne	r0, [r7]
   12d74:	mov	r8, #1
   12d78:	movw	r0, #25735	; 0x6487
   12d7c:	movt	r0, #1
   12d80:	str	r0, [sp, #92]	; 0x5c
   12d84:	mov	r0, #1
   12d88:	str	r0, [fp, #-72]	; 0xffffffb8
   12d8c:	mov	r2, #1
   12d90:	mov	r3, #0
   12d94:	ldr	r0, [fp, #16]
   12d98:	cmp	r0, #0
   12d9c:	movwne	r0, #1
   12da0:	and	r0, r0, r3
   12da4:	str	r0, [fp, #-88]	; 0xffffffa8
   12da8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12dac:	cmp	r0, #0
   12db0:	movwne	r0, #1
   12db4:	and	r1, r0, r3
   12db8:	and	r1, r2, r1
   12dbc:	str	r1, [sp, #48]	; 0x30
   12dc0:	str	r6, [fp, #-60]	; 0xffffffc4
   12dc4:	subs	r6, r6, #2
   12dc8:	clz	r1, r6
   12dcc:	lsr	r1, r1, #5
   12dd0:	and	r1, r1, r3
   12dd4:	str	r1, [sp, #60]	; 0x3c
   12dd8:	str	r6, [fp, #-80]	; 0xffffffb0
   12ddc:	mov	r1, r6
   12de0:	movwne	r1, #1
   12de4:	str	r3, [fp, #-76]	; 0xffffffb4
   12de8:	eor	r3, r3, #1
   12dec:	str	r3, [sp, #88]	; 0x58
   12df0:	orr	r3, r1, r3
   12df4:	str	r3, [sp, #64]	; 0x40
   12df8:	and	r1, r1, r2
   12dfc:	str	r1, [fp, #-68]	; 0xffffffbc
   12e00:	and	r0, r0, r1
   12e04:	str	r0, [fp, #-64]	; 0xffffffc0
   12e08:	str	r2, [sp, #84]	; 0x54
   12e0c:	eor	r0, r2, #1
   12e10:	str	r0, [sp, #52]	; 0x34
   12e14:	mov	r6, #0
   12e18:	cmn	lr, #1
   12e1c:	beq	12e2c <__assert_fail@plt+0x1d2c>
   12e20:	cmp	r6, lr
   12e24:	bne	12e38 <__assert_fail@plt+0x1d38>
   12e28:	b	139a4 <__assert_fail@plt+0x28a4>
   12e2c:	ldrb	r0, [ip, r6]
   12e30:	cmp	r0, #0
   12e34:	beq	139a4 <__assert_fail@plt+0x28a4>
   12e38:	str	r5, [fp, #-48]	; 0xffffffd0
   12e3c:	mov	sl, #0
   12e40:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12e44:	cmp	r0, #0
   12e48:	beq	12e7c <__assert_fail@plt+0x1d7c>
   12e4c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12e50:	add	r5, r6, r0
   12e54:	cmp	r0, #2
   12e58:	bcc	12e74 <__assert_fail@plt+0x1d74>
   12e5c:	cmn	lr, #1
   12e60:	bne	12e74 <__assert_fail@plt+0x1d74>
   12e64:	mov	r0, ip
   12e68:	bl	11004 <strlen@plt>
   12e6c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12e70:	mov	lr, r0
   12e74:	cmp	r5, lr
   12e78:	bls	12e88 <__assert_fail@plt+0x1d88>
   12e7c:	mov	r0, #0
   12e80:	str	r0, [fp, #-52]	; 0xffffffcc
   12e84:	b	12ed4 <__assert_fail@plt+0x1dd4>
   12e88:	mov	r5, r4
   12e8c:	mov	r4, lr
   12e90:	add	r0, ip, r6
   12e94:	ldr	r1, [sp, #92]	; 0x5c
   12e98:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12e9c:	bl	10f14 <memcmp@plt>
   12ea0:	cmp	r0, #0
   12ea4:	mov	r1, r0
   12ea8:	movwne	r1, #1
   12eac:	ldr	r2, [sp, #88]	; 0x58
   12eb0:	orr	r1, r1, r2
   12eb4:	tst	r1, #1
   12eb8:	beq	13a68 <__assert_fail@plt+0x2968>
   12ebc:	clz	r0, r0
   12ec0:	lsr	r0, r0, #5
   12ec4:	str	r0, [fp, #-52]	; 0xffffffcc
   12ec8:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ecc:	mov	lr, r4
   12ed0:	mov	r4, r5
   12ed4:	ldrb	r5, [ip, r6]
   12ed8:	cmp	r5, #126	; 0x7e
   12edc:	bhi	13298 <__assert_fail@plt+0x2198>
   12ee0:	mov	r9, #1
   12ee4:	mov	r2, #110	; 0x6e
   12ee8:	mov	r0, #97	; 0x61
   12eec:	add	r3, pc, #4
   12ef0:	mov	r1, #0
   12ef4:	ldr	pc, [r3, r5, lsl #2]
   12ef8:	muleq	r1, r0, r1
   12efc:	muleq	r1, r8, r2
   12f00:	muleq	r1, r8, r2
   12f04:	muleq	r1, r8, r2
   12f08:	muleq	r1, r8, r2
   12f0c:	muleq	r1, r8, r2
   12f10:	muleq	r1, r8, r2
   12f14:	andeq	r3, r1, ip, asr r3
   12f18:	andeq	r3, r1, r0, ror r1
   12f1c:	andeq	r3, r1, r8, ror #2
   12f20:	andeq	r3, r1, ip, ror r1
   12f24:	andeq	r3, r1, r0, lsl #4
   12f28:	andeq	r3, r1, r0, ror #2
   12f2c:	andeq	r3, r1, r8, ror r1
   12f30:	muleq	r1, r8, r2
   12f34:	muleq	r1, r8, r2
   12f38:	muleq	r1, r8, r2
   12f3c:	muleq	r1, r8, r2
   12f40:	muleq	r1, r8, r2
   12f44:	muleq	r1, r8, r2
   12f48:	muleq	r1, r8, r2
   12f4c:	muleq	r1, r8, r2
   12f50:	muleq	r1, r8, r2
   12f54:	muleq	r1, r8, r2
   12f58:	muleq	r1, r8, r2
   12f5c:	muleq	r1, r8, r2
   12f60:	muleq	r1, r8, r2
   12f64:	muleq	r1, r8, r2
   12f68:	muleq	r1, r8, r2
   12f6c:	muleq	r1, r8, r2
   12f70:	muleq	r1, r8, r2
   12f74:	muleq	r1, r8, r2
   12f78:	andeq	r3, r1, ip, lsl #6
   12f7c:	andeq	r3, r1, r0, lsl r3
   12f80:	andeq	r3, r1, r0, lsl r3
   12f84:	andeq	r3, r1, r8, lsl #2
   12f88:	andeq	r3, r1, r0, lsl r3
   12f8c:	strdeq	r3, [r1], -r4
   12f90:	andeq	r3, r1, r0, lsl r3
   12f94:	andeq	r3, r1, r8, lsl #4
   12f98:	andeq	r3, r1, r0, lsl r3
   12f9c:	andeq	r3, r1, r0, lsl r3
   12fa0:	andeq	r3, r1, r0, lsl r3
   12fa4:	strdeq	r3, [r1], -r4
   12fa8:	strdeq	r3, [r1], -r4
   12fac:	strdeq	r3, [r1], -r4
   12fb0:	strdeq	r3, [r1], -r4
   12fb4:	strdeq	r3, [r1], -r4
   12fb8:	strdeq	r3, [r1], -r4
   12fbc:	strdeq	r3, [r1], -r4
   12fc0:	strdeq	r3, [r1], -r4
   12fc4:	strdeq	r3, [r1], -r4
   12fc8:	strdeq	r3, [r1], -r4
   12fcc:	strdeq	r3, [r1], -r4
   12fd0:	strdeq	r3, [r1], -r4
   12fd4:	strdeq	r3, [r1], -r4
   12fd8:	strdeq	r3, [r1], -r4
   12fdc:	strdeq	r3, [r1], -r4
   12fe0:	strdeq	r3, [r1], -r4
   12fe4:	andeq	r3, r1, r0, lsl r3
   12fe8:	andeq	r3, r1, r0, lsl r3
   12fec:	andeq	r3, r1, r0, lsl r3
   12ff0:	andeq	r3, r1, r0, lsl r3
   12ff4:	ldrdeq	r3, [r1], -r0
   12ff8:	muleq	r1, r8, r2
   12ffc:	strdeq	r3, [r1], -r4
   13000:	strdeq	r3, [r1], -r4
   13004:	strdeq	r3, [r1], -r4
   13008:	strdeq	r3, [r1], -r4
   1300c:	strdeq	r3, [r1], -r4
   13010:	strdeq	r3, [r1], -r4
   13014:	strdeq	r3, [r1], -r4
   13018:	strdeq	r3, [r1], -r4
   1301c:	strdeq	r3, [r1], -r4
   13020:	strdeq	r3, [r1], -r4
   13024:	strdeq	r3, [r1], -r4
   13028:	strdeq	r3, [r1], -r4
   1302c:	strdeq	r3, [r1], -r4
   13030:	strdeq	r3, [r1], -r4
   13034:	strdeq	r3, [r1], -r4
   13038:	strdeq	r3, [r1], -r4
   1303c:	strdeq	r3, [r1], -r4
   13040:	strdeq	r3, [r1], -r4
   13044:	strdeq	r3, [r1], -r4
   13048:	strdeq	r3, [r1], -r4
   1304c:	strdeq	r3, [r1], -r4
   13050:	strdeq	r3, [r1], -r4
   13054:	strdeq	r3, [r1], -r4
   13058:	strdeq	r3, [r1], -r4
   1305c:	strdeq	r3, [r1], -r4
   13060:	strdeq	r3, [r1], -r4
   13064:	andeq	r3, r1, r0, lsl r3
   13068:	andeq	r3, r1, ip, lsr r1
   1306c:	strdeq	r3, [r1], -r4
   13070:	andeq	r3, r1, r0, lsl r3
   13074:	strdeq	r3, [r1], -r4
   13078:	andeq	r3, r1, r0, lsl r3
   1307c:	strdeq	r3, [r1], -r4
   13080:	strdeq	r3, [r1], -r4
   13084:	strdeq	r3, [r1], -r4
   13088:	strdeq	r3, [r1], -r4
   1308c:	strdeq	r3, [r1], -r4
   13090:	strdeq	r3, [r1], -r4
   13094:	strdeq	r3, [r1], -r4
   13098:	strdeq	r3, [r1], -r4
   1309c:	strdeq	r3, [r1], -r4
   130a0:	strdeq	r3, [r1], -r4
   130a4:	strdeq	r3, [r1], -r4
   130a8:	strdeq	r3, [r1], -r4
   130ac:	strdeq	r3, [r1], -r4
   130b0:	strdeq	r3, [r1], -r4
   130b4:	strdeq	r3, [r1], -r4
   130b8:	strdeq	r3, [r1], -r4
   130bc:	strdeq	r3, [r1], -r4
   130c0:	strdeq	r3, [r1], -r4
   130c4:	strdeq	r3, [r1], -r4
   130c8:	strdeq	r3, [r1], -r4
   130cc:	strdeq	r3, [r1], -r4
   130d0:	strdeq	r3, [r1], -r4
   130d4:	strdeq	r3, [r1], -r4
   130d8:	strdeq	r3, [r1], -r4
   130dc:	strdeq	r3, [r1], -r4
   130e0:	strdeq	r3, [r1], -r4
   130e4:	andeq	r3, r1, ip, lsl r1
   130e8:	andeq	r3, r1, r0, lsl r3
   130ec:	andeq	r3, r1, ip, lsl r1
   130f0:	andeq	r3, r1, r8, lsl #2
   130f4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   130f8:	cmp	r0, #0
   130fc:	beq	13370 <__assert_fail@plt+0x2270>
   13100:	ldr	r0, [fp, #16]
   13104:	b	13374 <__assert_fail@plt+0x2274>
   13108:	mov	r9, #0
   1310c:	cmp	r6, #0
   13110:	beq	1330c <__assert_fail@plt+0x220c>
   13114:	mov	sl, #0
   13118:	b	130f4 <__assert_fail@plt+0x1ff4>
   1311c:	mov	r9, #0
   13120:	cmn	lr, #1
   13124:	beq	132f0 <__assert_fail@plt+0x21f0>
   13128:	cmp	r6, #0
   1312c:	bne	13114 <__assert_fail@plt+0x2014>
   13130:	cmp	lr, #1
   13134:	beq	1330c <__assert_fail@plt+0x220c>
   13138:	b	13114 <__assert_fail@plt+0x2014>
   1313c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13140:	cmp	r0, #2
   13144:	bne	13338 <__assert_fail@plt+0x2238>
   13148:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1314c:	tst	r0, #1
   13150:	bne	13a80 <__assert_fail@plt+0x2980>
   13154:	mov	sl, #0
   13158:	mov	r0, #92	; 0x5c
   1315c:	b	1334c <__assert_fail@plt+0x224c>
   13160:	mov	r0, #102	; 0x66
   13164:	b	1335c <__assert_fail@plt+0x225c>
   13168:	mov	r2, #116	; 0x74
   1316c:	b	1317c <__assert_fail@plt+0x207c>
   13170:	mov	r0, #98	; 0x62
   13174:	b	1335c <__assert_fail@plt+0x225c>
   13178:	mov	r2, #114	; 0x72
   1317c:	ldr	r0, [sp, #64]	; 0x40
   13180:	tst	r0, #1
   13184:	mov	r0, r2
   13188:	bne	1335c <__assert_fail@plt+0x225c>
   1318c:	b	13a80 <__assert_fail@plt+0x2980>
   13190:	ldr	r0, [sp, #84]	; 0x54
   13194:	tst	r0, #1
   13198:	beq	1344c <__assert_fail@plt+0x234c>
   1319c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   131a0:	tst	r0, #1
   131a4:	bne	13a80 <__assert_fail@plt+0x2980>
   131a8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   131ac:	cmp	r0, #2
   131b0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   131b4:	movwne	r0, #1
   131b8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   131bc:	orr	r0, r0, r2
   131c0:	tst	r0, #1
   131c4:	beq	13840 <__assert_fail@plt+0x2740>
   131c8:	mov	r0, r8
   131cc:	b	13874 <__assert_fail@plt+0x2774>
   131d0:	mov	sl, #0
   131d4:	mov	r5, #63	; 0x3f
   131d8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   131dc:	cmp	r0, #5
   131e0:	beq	13600 <__assert_fail@plt+0x2500>
   131e4:	cmp	r0, #2
   131e8:	bne	136a0 <__assert_fail@plt+0x25a0>
   131ec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   131f0:	tst	r0, #1
   131f4:	mov	r9, #0
   131f8:	beq	130f4 <__assert_fail@plt+0x1ff4>
   131fc:	b	13a80 <__assert_fail@plt+0x2980>
   13200:	mov	r0, #118	; 0x76
   13204:	b	1335c <__assert_fail@plt+0x225c>
   13208:	mov	r5, #39	; 0x27
   1320c:	mov	r0, #1
   13210:	str	r0, [sp, #56]	; 0x38
   13214:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13218:	cmp	r0, #2
   1321c:	bne	1346c <__assert_fail@plt+0x236c>
   13220:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13224:	tst	r0, #1
   13228:	bne	13a80 <__assert_fail@plt+0x2980>
   1322c:	ldr	r2, [sp, #72]	; 0x48
   13230:	cmp	r2, #0
   13234:	mov	r0, r2
   13238:	movwne	r0, #1
   1323c:	clz	r1, r4
   13240:	lsr	r1, r1, #5
   13244:	orrs	r0, r0, r1
   13248:	moveq	r2, r4
   1324c:	str	r2, [sp, #72]	; 0x48
   13250:	moveq	r4, r0
   13254:	cmp	r8, r4
   13258:	movcc	r0, #39	; 0x27
   1325c:	strbcc	r0, [r7, r8]
   13260:	add	r0, r8, #1
   13264:	cmp	r0, r4
   13268:	movcc	r1, #92	; 0x5c
   1326c:	strbcc	r1, [r7, r0]
   13270:	add	r0, r8, #2
   13274:	cmp	r0, r4
   13278:	movcc	r1, #39	; 0x27
   1327c:	strbcc	r1, [r7, r0]
   13280:	add	r8, r8, #3
   13284:	mov	r0, #0
   13288:	str	r0, [fp, #-56]	; 0xffffffc8
   1328c:	mov	sl, #0
   13290:	mov	r9, #1
   13294:	b	130f4 <__assert_fail@plt+0x1ff4>
   13298:	str	r4, [sp, #24]
   1329c:	ldr	r0, [sp, #40]	; 0x28
   132a0:	cmp	r0, #1
   132a4:	bne	13474 <__assert_fail@plt+0x2374>
   132a8:	str	lr, [sp, #28]
   132ac:	bl	10fec <__ctype_b_loc@plt>
   132b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   132b4:	ldr	r0, [r0]
   132b8:	add	r0, r0, r5, lsl #1
   132bc:	ldrb	r0, [r0, #1]
   132c0:	ubfx	r9, r0, #6, #1
   132c4:	mov	r1, #1
   132c8:	ldr	r4, [sp, #24]
   132cc:	ldr	r0, [sp, #52]	; 0x34
   132d0:	orr	r0, r9, r0
   132d4:	mov	r2, r1
   132d8:	cmp	r1, #1
   132dc:	bhi	136a8 <__assert_fail@plt+0x25a8>
   132e0:	tst	r0, #1
   132e4:	beq	136a8 <__assert_fail@plt+0x25a8>
   132e8:	ldr	lr, [sp, #28]
   132ec:	b	130f4 <__assert_fail@plt+0x1ff4>
   132f0:	cmp	r6, #0
   132f4:	ldrbeq	r0, [ip, #1]
   132f8:	cmpeq	r0, #0
   132fc:	beq	1330c <__assert_fail@plt+0x220c>
   13300:	mvn	lr, #0
   13304:	mov	sl, #0
   13308:	b	130f4 <__assert_fail@plt+0x1ff4>
   1330c:	mov	r1, #1
   13310:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13314:	cmp	r0, #2
   13318:	bne	13330 <__assert_fail@plt+0x2230>
   1331c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13320:	tst	r0, #1
   13324:	mov	r9, r1
   13328:	beq	130f4 <__assert_fail@plt+0x1ff4>
   1332c:	b	13a80 <__assert_fail@plt+0x2980>
   13330:	mov	r9, r1
   13334:	b	130f4 <__assert_fail@plt+0x1ff4>
   13338:	mov	sl, #0
   1333c:	mov	r0, #92	; 0x5c
   13340:	ldr	r1, [sp, #48]	; 0x30
   13344:	cmp	r1, #0
   13348:	beq	1335c <__assert_fail@plt+0x225c>
   1334c:	mov	r9, #0
   13350:	cmp	sl, #0
   13354:	beq	1390c <__assert_fail@plt+0x280c>
   13358:	b	13948 <__assert_fail@plt+0x2848>
   1335c:	mov	r9, #0
   13360:	ldr	r1, [sp, #84]	; 0x54
   13364:	tst	r1, #1
   13368:	mov	sl, #0
   1336c:	bne	133ac <__assert_fail@plt+0x22ac>
   13370:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13374:	cmp	r0, #0
   13378:	mov	r0, r5
   1337c:	beq	133a0 <__assert_fail@plt+0x22a0>
   13380:	ubfx	r0, r5, #5, #3
   13384:	ldr	r1, [fp, #16]
   13388:	ldr	r0, [r1, r0, lsl #2]
   1338c:	and	r1, r5, #31
   13390:	mov	r2, #1
   13394:	tst	r0, r2, lsl r1
   13398:	mov	r0, r5
   1339c:	bne	133ac <__assert_fail@plt+0x22ac>
   133a0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   133a4:	cmp	r1, #0
   133a8:	beq	13904 <__assert_fail@plt+0x2804>
   133ac:	ldr	r1, [fp, #-76]	; 0xffffffb4
   133b0:	tst	r1, #1
   133b4:	bne	13a80 <__assert_fail@plt+0x2980>
   133b8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   133bc:	cmp	r1, #2
   133c0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   133c4:	movwne	r1, #1
   133c8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   133cc:	orr	r1, r1, r2
   133d0:	tst	r1, #1
   133d4:	beq	133e0 <__assert_fail@plt+0x22e0>
   133d8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   133dc:	b	1341c <__assert_fail@plt+0x231c>
   133e0:	cmp	r8, r4
   133e4:	movcc	r1, #39	; 0x27
   133e8:	strbcc	r1, [r7, r8]
   133ec:	add	r1, r8, #1
   133f0:	cmp	r1, r4
   133f4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   133f8:	movcc	r2, #36	; 0x24
   133fc:	strbcc	r2, [r7, r1]
   13400:	add	r1, r8, #2
   13404:	cmp	r1, r4
   13408:	movcc	r2, #39	; 0x27
   1340c:	strbcc	r2, [r7, r1]
   13410:	add	r8, r8, #3
   13414:	mov	r1, #1
   13418:	str	r1, [fp, #-56]	; 0xffffffc8
   1341c:	cmp	r8, r4
   13420:	movcc	r1, #92	; 0x5c
   13424:	strbcc	r1, [r7, r8]
   13428:	add	r8, r8, #1
   1342c:	cmp	r8, r4
   13430:	strbcc	r0, [r7, r8]
   13434:	and	r5, r5, r9
   13438:	add	r8, r8, #1
   1343c:	add	r6, r6, #1
   13440:	cmn	lr, #1
   13444:	bne	12e20 <__assert_fail@plt+0x1d20>
   13448:	b	12e2c <__assert_fail@plt+0x1d2c>
   1344c:	mov	r9, #0
   13450:	ldr	r0, [sp, #36]	; 0x24
   13454:	cmp	r0, #0
   13458:	mov	sl, #0
   1345c:	mov	r5, #0
   13460:	beq	13370 <__assert_fail@plt+0x2270>
   13464:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13468:	b	1343c <__assert_fail@plt+0x233c>
   1346c:	mov	r9, #1
   13470:	b	130f4 <__assert_fail@plt+0x1ff4>
   13474:	mov	r0, #0
   13478:	str	r0, [fp, #-36]	; 0xffffffdc
   1347c:	str	r0, [fp, #-40]	; 0xffffffd8
   13480:	cmn	lr, #1
   13484:	bne	13498 <__assert_fail@plt+0x2398>
   13488:	mov	r0, ip
   1348c:	bl	11004 <strlen@plt>
   13490:	ldr	ip, [fp, #-84]	; 0xffffffac
   13494:	mov	lr, r0
   13498:	add	r0, ip, r6
   1349c:	str	r0, [sp, #20]
   134a0:	mov	r9, #1
   134a4:	mov	r7, #0
   134a8:	sub	r4, fp, #40	; 0x28
   134ac:	str	lr, [sp, #28]
   134b0:	str	r7, [sp, #44]	; 0x2c
   134b4:	add	r7, r7, r6
   134b8:	add	r1, ip, r7
   134bc:	sub	r2, lr, r7
   134c0:	sub	r0, fp, #44	; 0x2c
   134c4:	mov	r3, r4
   134c8:	bl	15890 <__assert_fail@plt+0x4790>
   134cc:	cmp	r0, #0
   134d0:	beq	13990 <__assert_fail@plt+0x2890>
   134d4:	cmn	r0, #1
   134d8:	beq	13950 <__assert_fail@plt+0x2850>
   134dc:	cmn	r0, #2
   134e0:	ldr	lr, [sp, #28]
   134e4:	beq	13958 <__assert_fail@plt+0x2858>
   134e8:	cmp	r0, #2
   134ec:	mov	r1, #0
   134f0:	movwcc	r1, #1
   134f4:	ldr	r2, [sp, #60]	; 0x3c
   134f8:	eor	r2, r2, #1
   134fc:	orrs	r1, r2, r1
   13500:	ldr	r4, [sp, #24]
   13504:	bne	135c4 <__assert_fail@plt+0x24c4>
   13508:	ldr	r1, [sp, #44]	; 0x2c
   1350c:	ldr	r2, [sp, #20]
   13510:	add	r1, r2, r1
   13514:	mov	r2, #1
   13518:	ldrb	r3, [r1, r2]
   1351c:	sub	r3, r3, #91	; 0x5b
   13520:	cmp	r3, #33	; 0x21
   13524:	bhi	135b8 <__assert_fail@plt+0x24b8>
   13528:	add	r7, pc, #0
   1352c:	ldr	pc, [r7, r3, lsl #2]
   13530:	andeq	r3, r1, r8, ror sl
   13534:	andeq	r3, r1, r8, ror sl
   13538:			; <UNDEFINED> instruction: 0x000135b8
   1353c:	andeq	r3, r1, r8, ror sl
   13540:			; <UNDEFINED> instruction: 0x000135b8
   13544:	andeq	r3, r1, r8, ror sl
   13548:			; <UNDEFINED> instruction: 0x000135b8
   1354c:			; <UNDEFINED> instruction: 0x000135b8
   13550:			; <UNDEFINED> instruction: 0x000135b8
   13554:			; <UNDEFINED> instruction: 0x000135b8
   13558:			; <UNDEFINED> instruction: 0x000135b8
   1355c:			; <UNDEFINED> instruction: 0x000135b8
   13560:			; <UNDEFINED> instruction: 0x000135b8
   13564:			; <UNDEFINED> instruction: 0x000135b8
   13568:			; <UNDEFINED> instruction: 0x000135b8
   1356c:			; <UNDEFINED> instruction: 0x000135b8
   13570:			; <UNDEFINED> instruction: 0x000135b8
   13574:			; <UNDEFINED> instruction: 0x000135b8
   13578:			; <UNDEFINED> instruction: 0x000135b8
   1357c:			; <UNDEFINED> instruction: 0x000135b8
   13580:			; <UNDEFINED> instruction: 0x000135b8
   13584:			; <UNDEFINED> instruction: 0x000135b8
   13588:			; <UNDEFINED> instruction: 0x000135b8
   1358c:			; <UNDEFINED> instruction: 0x000135b8
   13590:			; <UNDEFINED> instruction: 0x000135b8
   13594:			; <UNDEFINED> instruction: 0x000135b8
   13598:			; <UNDEFINED> instruction: 0x000135b8
   1359c:			; <UNDEFINED> instruction: 0x000135b8
   135a0:			; <UNDEFINED> instruction: 0x000135b8
   135a4:			; <UNDEFINED> instruction: 0x000135b8
   135a8:			; <UNDEFINED> instruction: 0x000135b8
   135ac:			; <UNDEFINED> instruction: 0x000135b8
   135b0:			; <UNDEFINED> instruction: 0x000135b8
   135b4:	andeq	r3, r1, r8, ror sl
   135b8:	add	r2, r2, #1
   135bc:	cmp	r2, r0
   135c0:	bcc	13518 <__assert_fail@plt+0x2418>
   135c4:	ldr	r7, [sp, #44]	; 0x2c
   135c8:	add	r7, r0, r7
   135cc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   135d0:	bl	10f50 <iswprint@plt>
   135d4:	cmp	r0, #0
   135d8:	movwne	r0, #1
   135dc:	and	r9, r9, r0
   135e0:	sub	r4, fp, #40	; 0x28
   135e4:	mov	r0, r4
   135e8:	bl	10efc <mbsinit@plt>
   135ec:	ldr	lr, [sp, #28]
   135f0:	cmp	r0, #0
   135f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   135f8:	beq	134b0 <__assert_fail@plt+0x23b0>
   135fc:	b	13998 <__assert_fail@plt+0x2898>
   13600:	ldr	r0, [sp, #32]
   13604:	cmp	r0, #0
   13608:	beq	136a0 <__assert_fail@plt+0x25a0>
   1360c:	add	r0, r6, #2
   13610:	cmp	r0, lr
   13614:	bcs	136a0 <__assert_fail@plt+0x25a0>
   13618:	add	r1, ip, r6
   1361c:	ldrb	r1, [r1, #1]
   13620:	cmp	r1, #63	; 0x3f
   13624:	bne	136a0 <__assert_fail@plt+0x25a0>
   13628:	ldrb	r9, [ip, r0]
   1362c:	sub	r2, r9, #33	; 0x21
   13630:	cmp	r2, #29
   13634:	bhi	136a0 <__assert_fail@plt+0x25a0>
   13638:	mov	r3, #1
   1363c:	movw	r1, #20929	; 0x51c1
   13640:	movt	r1, #14336	; 0x3800
   13644:	tst	r1, r3, lsl r2
   13648:	beq	136a0 <__assert_fail@plt+0x25a0>
   1364c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13650:	tst	r1, #1
   13654:	bne	13a80 <__assert_fail@plt+0x2980>
   13658:	cmp	r8, r4
   1365c:	movcc	r1, #63	; 0x3f
   13660:	strbcc	r1, [r7, r8]
   13664:	add	r2, r8, #1
   13668:	cmp	r2, r4
   1366c:	movcc	r1, #34	; 0x22
   13670:	strbcc	r1, [r7, r2]
   13674:	add	r2, r8, #2
   13678:	cmp	r2, r4
   1367c:	movcc	r1, #34	; 0x22
   13680:	strbcc	r1, [r7, r2]
   13684:	add	r2, r8, #3
   13688:	cmp	r2, r4
   1368c:	movcc	r1, #63	; 0x3f
   13690:	strbcc	r1, [r7, r2]
   13694:	add	r8, r8, #4
   13698:	mov	r6, r0
   1369c:	mov	r5, r9
   136a0:	mov	r9, #0
   136a4:	b	130f4 <__assert_fail@plt+0x1ff4>
   136a8:	add	r1, r2, r6
   136ac:	str	r1, [sp, #44]	; 0x2c
   136b0:	add	r1, r6, #1
   136b4:	mov	r3, #0
   136b8:	ldr	lr, [sp, #28]
   136bc:	ldr	r6, [fp, #-60]	; 0xffffffc4
   136c0:	tst	r0, #1
   136c4:	bne	137b8 <__assert_fail@plt+0x26b8>
   136c8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   136cc:	tst	r2, #1
   136d0:	bne	13a80 <__assert_fail@plt+0x2980>
   136d4:	cmp	r6, #2
   136d8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   136dc:	movwne	r3, #1
   136e0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   136e4:	orr	r3, r3, r2
   136e8:	tst	r3, #1
   136ec:	bne	13728 <__assert_fail@plt+0x2628>
   136f0:	cmp	r8, r4
   136f4:	movcc	r2, #39	; 0x27
   136f8:	strbcc	r2, [r7, r8]
   136fc:	add	r3, r8, #1
   13700:	cmp	r3, r4
   13704:	movcc	r2, #36	; 0x24
   13708:	strbcc	r2, [r7, r3]
   1370c:	add	r3, r8, #2
   13710:	cmp	r3, r4
   13714:	movcc	r2, #39	; 0x27
   13718:	strbcc	r2, [r7, r3]
   1371c:	add	r8, r8, #3
   13720:	mov	r2, #1
   13724:	str	r2, [fp, #-56]	; 0xffffffc8
   13728:	cmp	r8, r4
   1372c:	movcc	r2, #92	; 0x5c
   13730:	strbcc	r2, [r7, r8]
   13734:	add	r3, r8, #1
   13738:	cmp	r3, r4
   1373c:	bcs	1375c <__assert_fail@plt+0x265c>
   13740:	and	r7, r5, #192	; 0xc0
   13744:	mov	r2, #48	; 0x30
   13748:	orr	r7, r2, r7, lsr #6
   1374c:	ldr	r6, [sp, #80]	; 0x50
   13750:	strb	r7, [r6, r3]
   13754:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13758:	ldr	r7, [sp, #80]	; 0x50
   1375c:	add	r3, r8, #2
   13760:	cmp	r3, r4
   13764:	bcs	13784 <__assert_fail@plt+0x2684>
   13768:	lsr	r7, r5, #3
   1376c:	mov	r2, #6
   13770:	bfi	r7, r2, #3, #29
   13774:	ldr	r6, [sp, #80]	; 0x50
   13778:	strb	r7, [r6, r3]
   1377c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13780:	ldr	r7, [sp, #80]	; 0x50
   13784:	mov	r2, #6
   13788:	bfi	r5, r2, #3, #29
   1378c:	add	r8, r8, #3
   13790:	mov	r3, #1
   13794:	b	137dc <__assert_fail@plt+0x26dc>
   13798:	ldr	r7, [sp, #80]	; 0x50
   1379c:	cmp	r8, r4
   137a0:	strbcc	r5, [r7, r8]
   137a4:	ldrb	r5, [ip, r1]
   137a8:	add	r1, r1, #1
   137ac:	add	r8, r8, #1
   137b0:	tst	r0, #1
   137b4:	beq	136c8 <__assert_fail@plt+0x25c8>
   137b8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   137bc:	tst	r2, #1
   137c0:	beq	137d4 <__assert_fail@plt+0x26d4>
   137c4:	cmp	r8, r4
   137c8:	movcc	r2, #92	; 0x5c
   137cc:	strbcc	r2, [r7, r8]
   137d0:	add	r8, r8, #1
   137d4:	mov	r2, #0
   137d8:	str	r2, [fp, #-52]	; 0xffffffcc
   137dc:	and	sl, r3, #1
   137e0:	ldr	r2, [sp, #44]	; 0x2c
   137e4:	cmp	r2, r1
   137e8:	bls	138f4 <__assert_fail@plt+0x27f4>
   137ec:	cmp	sl, #0
   137f0:	movwne	sl, #1
   137f4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   137f8:	mvn	r7, r2
   137fc:	orr	r7, r7, sl
   13800:	tst	r7, #1
   13804:	bne	13798 <__assert_fail@plt+0x2698>
   13808:	cmp	r8, r4
   1380c:	ldrcc	r7, [sp, #80]	; 0x50
   13810:	movcc	r2, #39	; 0x27
   13814:	strbcc	r2, [r7, r8]
   13818:	add	r7, r8, #1
   1381c:	cmp	r7, r4
   13820:	ldrcc	r6, [sp, #80]	; 0x50
   13824:	movcc	r2, #39	; 0x27
   13828:	strbcc	r2, [r6, r7]
   1382c:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   13830:	add	r8, r8, #2
   13834:	mov	r2, #0
   13838:	str	r2, [fp, #-56]	; 0xffffffc8
   1383c:	b	13798 <__assert_fail@plt+0x2698>
   13840:	cmp	r8, r4
   13844:	movcc	r0, #39	; 0x27
   13848:	strbcc	r0, [r7, r8]
   1384c:	add	r0, r8, #1
   13850:	cmp	r0, r4
   13854:	movcc	r1, #36	; 0x24
   13858:	strbcc	r1, [r7, r0]
   1385c:	add	r0, r8, #2
   13860:	cmp	r0, r4
   13864:	movcc	r1, #39	; 0x27
   13868:	strbcc	r1, [r7, r0]
   1386c:	add	r0, r8, #3
   13870:	mov	r2, #1
   13874:	cmp	r0, r4
   13878:	movcc	r1, #92	; 0x5c
   1387c:	strbcc	r1, [r7, r0]
   13880:	str	r2, [fp, #-56]	; 0xffffffc8
   13884:	add	r8, r0, #1
   13888:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1388c:	cmp	r1, #2
   13890:	beq	138e4 <__assert_fail@plt+0x27e4>
   13894:	add	r1, r6, #1
   13898:	mov	r9, #0
   1389c:	mov	sl, #1
   138a0:	mov	r5, #48	; 0x30
   138a4:	cmp	r1, lr
   138a8:	bcs	130f4 <__assert_fail@plt+0x1ff4>
   138ac:	ldrb	r1, [ip, r1]
   138b0:	sub	r1, r1, #48	; 0x30
   138b4:	uxtb	r1, r1
   138b8:	cmp	r1, #9
   138bc:	bhi	130f4 <__assert_fail@plt+0x1ff4>
   138c0:	cmp	r8, r4
   138c4:	movcc	r1, #48	; 0x30
   138c8:	strbcc	r1, [r7, r8]
   138cc:	add	r1, r0, #2
   138d0:	cmp	r1, r4
   138d4:	movcc	r2, #48	; 0x30
   138d8:	strbcc	r2, [r7, r1]
   138dc:	add	r8, r0, #3
   138e0:	b	130f4 <__assert_fail@plt+0x1ff4>
   138e4:	mov	r0, #48	; 0x30
   138e8:	mov	sl, #1
   138ec:	mov	r9, #0
   138f0:	b	133a0 <__assert_fail@plt+0x22a0>
   138f4:	sub	r6, r1, #1
   138f8:	cmp	sl, #0
   138fc:	movwne	sl, #1
   13900:	mov	r0, r5
   13904:	cmp	sl, #0
   13908:	bne	13948 <__assert_fail@plt+0x2848>
   1390c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13910:	tst	r1, #1
   13914:	beq	13948 <__assert_fail@plt+0x2848>
   13918:	cmp	r8, r4
   1391c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13920:	movcc	r1, #39	; 0x27
   13924:	strbcc	r1, [r7, r8]
   13928:	add	r1, r8, #1
   1392c:	cmp	r1, r4
   13930:	movcc	r2, #39	; 0x27
   13934:	strbcc	r2, [r7, r1]
   13938:	add	r8, r8, #2
   1393c:	mov	r1, #0
   13940:	str	r1, [fp, #-56]	; 0xffffffc8
   13944:	b	1342c <__assert_fail@plt+0x232c>
   13948:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1394c:	b	1342c <__assert_fail@plt+0x232c>
   13950:	mov	r9, #0
   13954:	b	13990 <__assert_fail@plt+0x2890>
   13958:	mov	r9, #0
   1395c:	cmp	r7, lr
   13960:	bcs	13990 <__assert_fail@plt+0x2890>
   13964:	ldr	ip, [fp, #-84]	; 0xffffffac
   13968:	ldr	r7, [sp, #44]	; 0x2c
   1396c:	ldr	r0, [sp, #20]
   13970:	ldrb	r0, [r0, r7]
   13974:	cmp	r0, #0
   13978:	beq	13998 <__assert_fail@plt+0x2898>
   1397c:	add	r7, r7, #1
   13980:	add	r0, r6, r7
   13984:	cmp	r0, lr
   13988:	bcc	1396c <__assert_fail@plt+0x286c>
   1398c:	b	13998 <__assert_fail@plt+0x2898>
   13990:	ldr	ip, [fp, #-84]	; 0xffffffac
   13994:	ldr	r7, [sp, #44]	; 0x2c
   13998:	mov	r1, r7
   1399c:	ldr	r7, [sp, #80]	; 0x50
   139a0:	b	132c8 <__assert_fail@plt+0x21c8>
   139a4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   139a8:	eor	r0, r1, #2
   139ac:	orr	r0, r0, r8
   139b0:	clz	r0, r0
   139b4:	lsr	r0, r0, #5
   139b8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   139bc:	tst	r2, r0
   139c0:	bne	13a80 <__assert_fail@plt+0x2980>
   139c4:	cmp	r1, #2
   139c8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   139cc:	movwne	r0, #1
   139d0:	orr	r0, r2, r0
   139d4:	tst	r0, #1
   139d8:	ldreq	r0, [sp, #56]	; 0x38
   139dc:	eoreq	r0, r0, #1
   139e0:	tsteq	r0, #1
   139e4:	bne	13a18 <__assert_fail@plt+0x2918>
   139e8:	mov	r9, lr
   139ec:	tst	r5, #1
   139f0:	bne	13ae8 <__assert_fail@plt+0x29e8>
   139f4:	ldr	r0, [sp, #72]	; 0x48
   139f8:	cmp	r0, #0
   139fc:	beq	13a18 <__assert_fail@plt+0x2918>
   13a00:	mov	r5, #0
   13a04:	cmp	r4, #0
   13a08:	ldr	r0, [sp, #84]	; 0x54
   13a0c:	mov	sl, r2
   13a10:	ldr	r6, [sp, #72]	; 0x48
   13a14:	beq	12bb0 <__assert_fail@plt+0x1ab0>
   13a18:	ldr	r1, [sp, #92]	; 0x5c
   13a1c:	clz	r0, r1
   13a20:	lsr	r0, r0, #5
   13a24:	orr	r0, r0, r2
   13a28:	tst	r0, #1
   13a2c:	bne	13a58 <__assert_fail@plt+0x2958>
   13a30:	ldrb	r0, [r1]
   13a34:	cmp	r0, #0
   13a38:	beq	13a58 <__assert_fail@plt+0x2958>
   13a3c:	add	r1, r1, #1
   13a40:	cmp	r8, r4
   13a44:	strbcc	r0, [r7, r8]
   13a48:	add	r8, r8, #1
   13a4c:	ldrb	r0, [r1], #1
   13a50:	cmp	r0, #0
   13a54:	bne	13a40 <__assert_fail@plt+0x2940>
   13a58:	cmp	r8, r4
   13a5c:	movcc	r0, #0
   13a60:	strbcc	r0, [r7, r8]
   13a64:	b	13adc <__assert_fail@plt+0x29dc>
   13a68:	ldr	ip, [fp, #-84]	; 0xffffffac
   13a6c:	mov	lr, r4
   13a70:	mov	r4, r5
   13a74:	b	13a80 <__assert_fail@plt+0x2980>
   13a78:	ldr	r7, [sp, #80]	; 0x50
   13a7c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13a80:	mov	r0, #0
   13a84:	ldr	r1, [fp, #12]
   13a88:	bic	r1, r1, #2
   13a8c:	ldr	r2, [sp, #84]	; 0x54
   13a90:	tst	r2, #1
   13a94:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13a98:	mov	r2, r3
   13a9c:	movwne	r2, #4
   13aa0:	cmp	r3, #2
   13aa4:	movne	r2, r3
   13aa8:	str	r2, [sp]
   13aac:	str	r1, [sp, #4]
   13ab0:	str	r0, [sp, #8]
   13ab4:	ldr	r0, [sp, #68]	; 0x44
   13ab8:	str	r0, [sp, #12]
   13abc:	ldr	r0, [sp, #76]	; 0x4c
   13ac0:	str	r0, [sp, #16]
   13ac4:	mov	r0, r7
   13ac8:	mov	r1, r4
   13acc:	mov	r2, ip
   13ad0:	mov	r3, lr
   13ad4:	bl	12b28 <__assert_fail@plt+0x1a28>
   13ad8:	mov	r8, r0
   13adc:	mov	r0, r8
   13ae0:	sub	sp, fp, #28
   13ae4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ae8:	mov	r0, #5
   13aec:	str	r0, [sp]
   13af0:	ldr	r0, [fp, #12]
   13af4:	str	r0, [sp, #4]
   13af8:	ldr	r0, [fp, #16]
   13afc:	str	r0, [sp, #8]
   13b00:	ldr	r0, [sp, #68]	; 0x44
   13b04:	str	r0, [sp, #12]
   13b08:	ldr	r0, [sp, #76]	; 0x4c
   13b0c:	str	r0, [sp, #16]
   13b10:	mov	r0, r7
   13b14:	ldr	r1, [sp, #72]	; 0x48
   13b18:	ldr	r2, [fp, #-84]	; 0xffffffac
   13b1c:	mov	r3, r9
   13b20:	b	13ad4 <__assert_fail@plt+0x29d4>
   13b24:	bl	110e8 <abort@plt>
   13b28:	mov	r3, r2
   13b2c:	mov	r2, #0
   13b30:	b	13b34 <__assert_fail@plt+0x2a34>
   13b34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b38:	add	fp, sp, #28
   13b3c:	sub	sp, sp, #36	; 0x24
   13b40:	mov	r4, r2
   13b44:	str	r2, [sp, #24]
   13b48:	mov	r5, r1
   13b4c:	mov	r6, r0
   13b50:	str	r0, [sp, #20]
   13b54:	movw	r8, #29040	; 0x7170
   13b58:	movt	r8, #2
   13b5c:	cmp	r3, #0
   13b60:	movne	r8, r3
   13b64:	bl	1101c <__errno_location@plt>
   13b68:	str	r0, [sp, #28]
   13b6c:	ldm	r8, {r3, r9}
   13b70:	ldr	r1, [r8, #40]	; 0x28
   13b74:	ldr	r2, [r8, #44]	; 0x2c
   13b78:	ldr	r7, [r0]
   13b7c:	str	r7, [sp, #32]
   13b80:	add	sl, r8, #8
   13b84:	cmp	r4, #0
   13b88:	orreq	r9, r9, #1
   13b8c:	stm	sp, {r3, r9, sl}
   13b90:	str	r1, [sp, #12]
   13b94:	str	r2, [sp, #16]
   13b98:	mov	r0, #0
   13b9c:	mov	r1, #0
   13ba0:	mov	r2, r6
   13ba4:	mov	r3, r5
   13ba8:	mov	r7, r5
   13bac:	bl	12b28 <__assert_fail@plt+0x1a28>
   13bb0:	mov	r5, r0
   13bb4:	add	r4, r0, #1
   13bb8:	mov	r0, r4
   13bbc:	bl	14a74 <__assert_fail@plt+0x3974>
   13bc0:	mov	r6, r0
   13bc4:	ldr	r0, [r8]
   13bc8:	ldr	r1, [r8, #40]	; 0x28
   13bcc:	ldr	r2, [r8, #44]	; 0x2c
   13bd0:	stm	sp, {r0, r9, sl}
   13bd4:	str	r1, [sp, #12]
   13bd8:	str	r2, [sp, #16]
   13bdc:	mov	r0, r6
   13be0:	mov	r1, r4
   13be4:	ldr	r2, [sp, #20]
   13be8:	mov	r3, r7
   13bec:	bl	12b28 <__assert_fail@plt+0x1a28>
   13bf0:	ldr	r0, [sp, #24]
   13bf4:	ldr	r1, [sp, #32]
   13bf8:	ldr	r2, [sp, #28]
   13bfc:	str	r1, [r2]
   13c00:	cmp	r0, #0
   13c04:	strne	r5, [r0]
   13c08:	mov	r0, r6
   13c0c:	sub	sp, fp, #28
   13c10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c14:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13c18:	add	fp, sp, #24
   13c1c:	movw	r8, #28920	; 0x70f8
   13c20:	movt	r8, #2
   13c24:	ldr	r4, [r8]
   13c28:	movw	r5, #28924	; 0x70fc
   13c2c:	movt	r5, #2
   13c30:	ldr	r0, [r5]
   13c34:	cmp	r0, #2
   13c38:	blt	13c64 <__assert_fail@plt+0x2b64>
   13c3c:	add	r7, r4, #12
   13c40:	mov	r6, #0
   13c44:	ldr	r0, [r7, r6, lsl #3]
   13c48:	bl	127d0 <__assert_fail@plt+0x16d0>
   13c4c:	add	r0, r6, #1
   13c50:	ldr	r1, [r5]
   13c54:	add	r2, r6, #2
   13c58:	cmp	r2, r1
   13c5c:	mov	r6, r0
   13c60:	blt	13c44 <__assert_fail@plt+0x2b44>
   13c64:	ldr	r0, [r4, #4]
   13c68:	movw	r7, #29088	; 0x71a0
   13c6c:	movt	r7, #2
   13c70:	cmp	r0, r7
   13c74:	beq	13c8c <__assert_fail@plt+0x2b8c>
   13c78:	bl	127d0 <__assert_fail@plt+0x16d0>
   13c7c:	movw	r0, #28928	; 0x7100
   13c80:	movt	r0, #2
   13c84:	mov	r6, #256	; 0x100
   13c88:	strd	r6, [r0]
   13c8c:	movw	r6, #28928	; 0x7100
   13c90:	movt	r6, #2
   13c94:	cmp	r4, r6
   13c98:	beq	13ca8 <__assert_fail@plt+0x2ba8>
   13c9c:	mov	r0, r4
   13ca0:	bl	127d0 <__assert_fail@plt+0x16d0>
   13ca4:	str	r6, [r8]
   13ca8:	mov	r0, #1
   13cac:	str	r0, [r5]
   13cb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13cb4:	movw	r3, #29040	; 0x7170
   13cb8:	movt	r3, #2
   13cbc:	mvn	r2, #0
   13cc0:	b	13cc4 <__assert_fail@plt+0x2bc4>
   13cc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cc8:	add	fp, sp, #28
   13ccc:	sub	sp, sp, #44	; 0x2c
   13cd0:	mov	r7, r3
   13cd4:	str	r2, [sp, #36]	; 0x24
   13cd8:	str	r1, [sp, #32]
   13cdc:	mov	r5, r0
   13ce0:	bl	1101c <__errno_location@plt>
   13ce4:	cmp	r5, #0
   13ce8:	blt	13e54 <__assert_fail@plt+0x2d54>
   13cec:	cmn	r5, #-2147483647	; 0x80000001
   13cf0:	beq	13e54 <__assert_fail@plt+0x2d54>
   13cf4:	movw	r4, #28920	; 0x70f8
   13cf8:	movt	r4, #2
   13cfc:	ldr	r6, [r4]
   13d00:	str	r0, [sp, #28]
   13d04:	ldr	r0, [r0]
   13d08:	str	r0, [sp, #24]
   13d0c:	movw	r8, #28924	; 0x70fc
   13d10:	movt	r8, #2
   13d14:	ldr	r1, [r8]
   13d18:	cmp	r1, r5
   13d1c:	ble	13d28 <__assert_fail@plt+0x2c28>
   13d20:	mov	sl, r6
   13d24:	b	13d90 <__assert_fail@plt+0x2c90>
   13d28:	str	r1, [fp, #-32]	; 0xffffffe0
   13d2c:	mov	r0, #8
   13d30:	str	r0, [sp]
   13d34:	movw	r9, #28928	; 0x7100
   13d38:	movt	r9, #2
   13d3c:	subs	r0, r6, r9
   13d40:	movne	r0, r6
   13d44:	add	r2, r5, #1
   13d48:	sub	r2, r2, r1
   13d4c:	sub	r1, fp, #32
   13d50:	mvn	r3, #-2147483648	; 0x80000000
   13d54:	bl	14b5c <__assert_fail@plt+0x3a5c>
   13d58:	mov	sl, r0
   13d5c:	str	r0, [r4]
   13d60:	cmp	r6, r9
   13d64:	ldrdeq	r0, [r9]
   13d68:	stmeq	sl, {r0, r1}
   13d6c:	ldr	r1, [r8]
   13d70:	add	r0, sl, r1, lsl #3
   13d74:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13d78:	sub	r1, r2, r1
   13d7c:	lsl	r2, r1, #3
   13d80:	mov	r1, #0
   13d84:	bl	11034 <memset@plt>
   13d88:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13d8c:	str	r0, [r8]
   13d90:	mov	r9, sl
   13d94:	ldr	r6, [r9, r5, lsl #3]!
   13d98:	ldr	r4, [r9, #4]!
   13d9c:	ldm	r7, {r0, r1}
   13da0:	ldr	r2, [r7, #40]	; 0x28
   13da4:	ldr	r3, [r7, #44]	; 0x2c
   13da8:	orr	r8, r1, #1
   13dac:	add	r1, r7, #8
   13db0:	stm	sp, {r0, r8}
   13db4:	str	r1, [sp, #20]
   13db8:	add	r0, sp, #8
   13dbc:	stm	r0, {r1, r2, r3}
   13dc0:	mov	r0, r4
   13dc4:	mov	r1, r6
   13dc8:	ldr	r2, [sp, #32]
   13dcc:	ldr	r3, [sp, #36]	; 0x24
   13dd0:	bl	12b28 <__assert_fail@plt+0x1a28>
   13dd4:	cmp	r6, r0
   13dd8:	bhi	13e3c <__assert_fail@plt+0x2d3c>
   13ddc:	add	r6, r0, #1
   13de0:	str	r6, [sl, r5, lsl #3]
   13de4:	movw	r0, #29088	; 0x71a0
   13de8:	movt	r0, #2
   13dec:	cmp	r4, r0
   13df0:	beq	13dfc <__assert_fail@plt+0x2cfc>
   13df4:	mov	r0, r4
   13df8:	bl	127d0 <__assert_fail@plt+0x16d0>
   13dfc:	mov	r0, r6
   13e00:	bl	14a74 <__assert_fail@plt+0x3974>
   13e04:	mov	r4, r0
   13e08:	str	r0, [r9]
   13e0c:	ldr	r0, [r7]
   13e10:	ldr	r1, [r7, #40]	; 0x28
   13e14:	ldr	r2, [r7, #44]	; 0x2c
   13e18:	stm	sp, {r0, r8}
   13e1c:	ldr	r0, [sp, #20]
   13e20:	add	r3, sp, #8
   13e24:	stm	r3, {r0, r1, r2}
   13e28:	mov	r0, r4
   13e2c:	mov	r1, r6
   13e30:	ldr	r2, [sp, #32]
   13e34:	ldr	r3, [sp, #36]	; 0x24
   13e38:	bl	12b28 <__assert_fail@plt+0x1a28>
   13e3c:	ldr	r0, [sp, #28]
   13e40:	ldr	r1, [sp, #24]
   13e44:	str	r1, [r0]
   13e48:	mov	r0, r4
   13e4c:	sub	sp, fp, #28
   13e50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e54:	bl	110e8 <abort@plt>
   13e58:	movw	r3, #29040	; 0x7170
   13e5c:	movt	r3, #2
   13e60:	b	13cc4 <__assert_fail@plt+0x2bc4>
   13e64:	mov	r1, r0
   13e68:	mov	r0, #0
   13e6c:	b	13cb4 <__assert_fail@plt+0x2bb4>
   13e70:	mov	r2, r1
   13e74:	mov	r1, r0
   13e78:	mov	r0, #0
   13e7c:	b	13e58 <__assert_fail@plt+0x2d58>
   13e80:	push	{r4, r5, r6, sl, fp, lr}
   13e84:	add	fp, sp, #16
   13e88:	sub	sp, sp, #48	; 0x30
   13e8c:	mov	r4, r2
   13e90:	mov	r5, r0
   13e94:	mov	r6, sp
   13e98:	mov	r0, r6
   13e9c:	bl	13ebc <__assert_fail@plt+0x2dbc>
   13ea0:	mov	r0, r5
   13ea4:	mov	r1, r4
   13ea8:	mvn	r2, #0
   13eac:	mov	r3, r6
   13eb0:	bl	13cc4 <__assert_fail@plt+0x2bc4>
   13eb4:	sub	sp, fp, #16
   13eb8:	pop	{r4, r5, r6, sl, fp, pc}
   13ebc:	vmov.i32	q8, #0	; 0x00000000
   13ec0:	mov	r2, #32
   13ec4:	mov	r3, r0
   13ec8:	vst1.32	{d16-d17}, [r3], r2
   13ecc:	vst1.32	{d16-d17}, [r3]
   13ed0:	add	r2, r0, #16
   13ed4:	vst1.32	{d16-d17}, [r2]
   13ed8:	cmp	r1, #10
   13edc:	strne	r1, [r0]
   13ee0:	bxne	lr
   13ee4:	push	{fp, lr}
   13ee8:	mov	fp, sp
   13eec:	bl	110e8 <abort@plt>
   13ef0:	push	{r4, r5, r6, r7, fp, lr}
   13ef4:	add	fp, sp, #16
   13ef8:	sub	sp, sp, #48	; 0x30
   13efc:	mov	r4, r3
   13f00:	mov	r5, r2
   13f04:	mov	r6, r0
   13f08:	mov	r7, sp
   13f0c:	mov	r0, r7
   13f10:	bl	13ebc <__assert_fail@plt+0x2dbc>
   13f14:	mov	r0, r6
   13f18:	mov	r1, r5
   13f1c:	mov	r2, r4
   13f20:	mov	r3, r7
   13f24:	bl	13cc4 <__assert_fail@plt+0x2bc4>
   13f28:	sub	sp, fp, #16
   13f2c:	pop	{r4, r5, r6, r7, fp, pc}
   13f30:	mov	r2, r1
   13f34:	mov	r1, r0
   13f38:	mov	r0, #0
   13f3c:	b	13e80 <__assert_fail@plt+0x2d80>
   13f40:	mov	r3, r2
   13f44:	mov	r2, r1
   13f48:	mov	r1, r0
   13f4c:	mov	r0, #0
   13f50:	b	13ef0 <__assert_fail@plt+0x2df0>
   13f54:	push	{r4, r5, r6, sl, fp, lr}
   13f58:	add	fp, sp, #16
   13f5c:	sub	sp, sp, #48	; 0x30
   13f60:	mov	r4, r1
   13f64:	mov	r5, r0
   13f68:	mov	r0, #32
   13f6c:	movw	r1, #29040	; 0x7170
   13f70:	movt	r1, #2
   13f74:	add	r3, r1, #16
   13f78:	vld1.64	{d16-d17}, [r1], r0
   13f7c:	mov	r6, sp
   13f80:	vld1.64	{d18-d19}, [r3]
   13f84:	add	r3, r6, #16
   13f88:	vld1.64	{d20-d21}, [r1]
   13f8c:	vst1.64	{d18-d19}, [r3]
   13f90:	mov	r1, r6
   13f94:	vst1.64	{d16-d17}, [r1], r0
   13f98:	vst1.64	{d20-d21}, [r1]
   13f9c:	mov	r0, r6
   13fa0:	mov	r1, r2
   13fa4:	mov	r2, #1
   13fa8:	bl	12a1c <__assert_fail@plt+0x191c>
   13fac:	mov	r0, #0
   13fb0:	mov	r1, r5
   13fb4:	mov	r2, r4
   13fb8:	mov	r3, r6
   13fbc:	bl	13cc4 <__assert_fail@plt+0x2bc4>
   13fc0:	sub	sp, fp, #16
   13fc4:	pop	{r4, r5, r6, sl, fp, pc}
   13fc8:	mov	r2, r1
   13fcc:	mvn	r1, #0
   13fd0:	b	13f54 <__assert_fail@plt+0x2e54>
   13fd4:	mov	r1, #58	; 0x3a
   13fd8:	b	13fc8 <__assert_fail@plt+0x2ec8>
   13fdc:	mov	r2, #58	; 0x3a
   13fe0:	b	13f54 <__assert_fail@plt+0x2e54>
   13fe4:	push	{r4, r5, r6, sl, fp, lr}
   13fe8:	add	fp, sp, #16
   13fec:	sub	sp, sp, #48	; 0x30
   13ff0:	mov	r4, r2
   13ff4:	mov	r5, r0
   13ff8:	mov	r6, sp
   13ffc:	mov	r0, r6
   14000:	bl	13ebc <__assert_fail@plt+0x2dbc>
   14004:	mov	r0, r6
   14008:	mov	r1, #58	; 0x3a
   1400c:	mov	r2, #1
   14010:	bl	12a1c <__assert_fail@plt+0x191c>
   14014:	mov	r0, r5
   14018:	mov	r1, r4
   1401c:	mvn	r2, #0
   14020:	mov	r3, r6
   14024:	bl	13cc4 <__assert_fail@plt+0x2bc4>
   14028:	sub	sp, fp, #16
   1402c:	pop	{r4, r5, r6, sl, fp, pc}
   14030:	push	{fp, lr}
   14034:	mov	fp, sp
   14038:	sub	sp, sp, #8
   1403c:	mvn	ip, #0
   14040:	str	ip, [sp]
   14044:	bl	14050 <__assert_fail@plt+0x2f50>
   14048:	mov	sp, fp
   1404c:	pop	{fp, pc}
   14050:	push	{r4, r5, r6, r7, fp, lr}
   14054:	add	fp, sp, #16
   14058:	sub	sp, sp, #48	; 0x30
   1405c:	mov	r7, r3
   14060:	mov	r5, r0
   14064:	mov	r0, #32
   14068:	movw	r3, #29040	; 0x7170
   1406c:	movt	r3, #2
   14070:	add	r4, r3, #16
   14074:	vld1.64	{d16-d17}, [r3], r0
   14078:	mov	r6, sp
   1407c:	vld1.64	{d18-d19}, [r4]
   14080:	add	r4, r6, #16
   14084:	vld1.64	{d20-d21}, [r3]
   14088:	vst1.64	{d18-d19}, [r4]
   1408c:	mov	r3, r6
   14090:	vst1.64	{d16-d17}, [r3], r0
   14094:	vst1.64	{d20-d21}, [r3]
   14098:	mov	r0, r6
   1409c:	bl	12a74 <__assert_fail@plt+0x1974>
   140a0:	ldr	r2, [fp, #8]
   140a4:	mov	r0, r5
   140a8:	mov	r1, r7
   140ac:	mov	r3, r6
   140b0:	bl	13cc4 <__assert_fail@plt+0x2bc4>
   140b4:	sub	sp, fp, #16
   140b8:	pop	{r4, r5, r6, r7, fp, pc}
   140bc:	mov	r3, r2
   140c0:	mov	r2, r1
   140c4:	mov	r1, r0
   140c8:	mov	r0, #0
   140cc:	b	14030 <__assert_fail@plt+0x2f30>
   140d0:	push	{fp, lr}
   140d4:	mov	fp, sp
   140d8:	sub	sp, sp, #8
   140dc:	mov	ip, r2
   140e0:	mov	r2, r1
   140e4:	mov	r1, r0
   140e8:	str	r3, [sp]
   140ec:	mov	r0, #0
   140f0:	mov	r3, ip
   140f4:	bl	14050 <__assert_fail@plt+0x2f50>
   140f8:	mov	sp, fp
   140fc:	pop	{fp, pc}
   14100:	movw	r3, #28936	; 0x7108
   14104:	movt	r3, #2
   14108:	b	13cc4 <__assert_fail@plt+0x2bc4>
   1410c:	mov	r2, r1
   14110:	mov	r1, r0
   14114:	mov	r0, #0
   14118:	b	14100 <__assert_fail@plt+0x3000>
   1411c:	mvn	r2, #0
   14120:	b	14100 <__assert_fail@plt+0x3000>
   14124:	mov	r1, r0
   14128:	mov	r0, #0
   1412c:	b	1411c <__assert_fail@plt+0x301c>
   14130:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14134:	add	fp, sp, #24
   14138:	sub	sp, sp, #16
   1413c:	mov	r4, r1
   14140:	mov	r5, r0
   14144:	mov	r7, #0
   14148:	mov	r0, #0
   1414c:	mov	r1, r5
   14150:	mov	r2, #5
   14154:	bl	10f2c <dcgettext@plt>
   14158:	cmp	r0, r5
   1415c:	beq	14168 <__assert_fail@plt+0x3068>
   14160:	sub	sp, fp, #24
   14164:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14168:	bl	15858 <__assert_fail@plt+0x4758>
   1416c:	mov	r6, r0
   14170:	mov	r8, #56	; 0x38
   14174:	mov	r0, #45	; 0x2d
   14178:	stm	sp, {r0, r8}
   1417c:	str	r7, [sp, #8]
   14180:	str	r7, [sp, #12]
   14184:	mov	r0, r6
   14188:	mov	r1, #85	; 0x55
   1418c:	mov	r2, #84	; 0x54
   14190:	mov	r3, #70	; 0x46
   14194:	bl	1422c <__assert_fail@plt+0x312c>
   14198:	cmp	r0, #0
   1419c:	beq	141b8 <__assert_fail@plt+0x30b8>
   141a0:	ldrb	r1, [r5]
   141a4:	movw	r2, #25741	; 0x648d
   141a8:	movt	r2, #1
   141ac:	movw	r0, #25745	; 0x6491
   141b0:	movt	r0, #1
   141b4:	b	141fc <__assert_fail@plt+0x30fc>
   141b8:	mov	r0, #48	; 0x30
   141bc:	mov	r1, #51	; 0x33
   141c0:	str	r8, [sp]
   141c4:	stmib	sp, {r0, r1}
   141c8:	str	r0, [sp, #12]
   141cc:	mov	r0, r6
   141d0:	mov	r1, #71	; 0x47
   141d4:	mov	r2, #66	; 0x42
   141d8:	mov	r3, #49	; 0x31
   141dc:	bl	1422c <__assert_fail@plt+0x312c>
   141e0:	cmp	r0, #0
   141e4:	beq	1420c <__assert_fail@plt+0x310c>
   141e8:	ldrb	r1, [r5]
   141ec:	movw	r2, #25749	; 0x6495
   141f0:	movt	r2, #1
   141f4:	movw	r0, #25753	; 0x6499
   141f8:	movt	r0, #1
   141fc:	cmp	r1, #96	; 0x60
   14200:	moveq	r0, r2
   14204:	sub	sp, fp, #24
   14208:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1420c:	movw	r1, #25735	; 0x6487
   14210:	movt	r1, #1
   14214:	movw	r0, #25739	; 0x648b
   14218:	movt	r0, #1
   1421c:	cmp	r4, #9
   14220:	moveq	r0, r1
   14224:	sub	sp, fp, #24
   14228:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1422c:	push	{r4, r5, r6, r7, fp, lr}
   14230:	add	fp, sp, #16
   14234:	sub	sp, sp, #16
   14238:	mov	r4, r3
   1423c:	mov	r5, r2
   14240:	mov	r7, r1
   14244:	mov	r6, r0
   14248:	mov	r0, r1
   1424c:	bl	15760 <__assert_fail@plt+0x4660>
   14250:	ldrb	r1, [r6]
   14254:	cmp	r0, #0
   14258:	andne	r1, r1, #223	; 0xdf
   1425c:	mov	r0, #0
   14260:	cmp	r1, r7
   14264:	bne	142a4 <__assert_fail@plt+0x31a4>
   14268:	cmp	r7, #0
   1426c:	moveq	r0, #1
   14270:	subeq	sp, fp, #16
   14274:	popeq	{r4, r5, r6, r7, fp, pc}
   14278:	ldr	r0, [fp, #20]
   1427c:	ldr	r1, [fp, #16]
   14280:	ldr	r2, [fp, #12]
   14284:	ldr	r3, [fp, #8]
   14288:	str	r2, [sp]
   1428c:	str	r1, [sp, #4]
   14290:	str	r0, [sp, #8]
   14294:	mov	r0, r6
   14298:	mov	r1, r5
   1429c:	mov	r2, r4
   142a0:	bl	142ac <__assert_fail@plt+0x31ac>
   142a4:	sub	sp, fp, #16
   142a8:	pop	{r4, r5, r6, r7, fp, pc}
   142ac:	push	{r4, r5, r6, r7, fp, lr}
   142b0:	add	fp, sp, #16
   142b4:	sub	sp, sp, #8
   142b8:	mov	r4, r3
   142bc:	mov	r5, r2
   142c0:	mov	r7, r1
   142c4:	mov	r6, r0
   142c8:	mov	r0, r1
   142cc:	bl	15760 <__assert_fail@plt+0x4660>
   142d0:	ldrb	r1, [r6, #1]
   142d4:	cmp	r0, #0
   142d8:	andne	r1, r1, #223	; 0xdf
   142dc:	mov	r0, #0
   142e0:	cmp	r1, r7
   142e4:	bne	1431c <__assert_fail@plt+0x321c>
   142e8:	cmp	r7, #0
   142ec:	moveq	r0, #1
   142f0:	subeq	sp, fp, #16
   142f4:	popeq	{r4, r5, r6, r7, fp, pc}
   142f8:	ldr	r0, [fp, #16]
   142fc:	ldr	r1, [fp, #12]
   14300:	ldr	r3, [fp, #8]
   14304:	str	r1, [sp]
   14308:	str	r0, [sp, #4]
   1430c:	mov	r0, r6
   14310:	mov	r1, r5
   14314:	mov	r2, r4
   14318:	bl	14324 <__assert_fail@plt+0x3224>
   1431c:	sub	sp, fp, #16
   14320:	pop	{r4, r5, r6, r7, fp, pc}
   14324:	push	{r4, r5, r6, r7, fp, lr}
   14328:	add	fp, sp, #16
   1432c:	sub	sp, sp, #8
   14330:	mov	r4, r3
   14334:	mov	r5, r2
   14338:	mov	r7, r1
   1433c:	mov	r6, r0
   14340:	mov	r0, r1
   14344:	bl	15760 <__assert_fail@plt+0x4660>
   14348:	ldrb	r1, [r6, #2]
   1434c:	cmp	r0, #0
   14350:	andne	r1, r1, #223	; 0xdf
   14354:	mov	r0, #0
   14358:	cmp	r1, r7
   1435c:	bne	1438c <__assert_fail@plt+0x328c>
   14360:	cmp	r7, #0
   14364:	moveq	r0, #1
   14368:	subeq	sp, fp, #16
   1436c:	popeq	{r4, r5, r6, r7, fp, pc}
   14370:	ldr	r0, [fp, #12]
   14374:	ldr	r3, [fp, #8]
   14378:	str	r0, [sp]
   1437c:	mov	r0, r6
   14380:	mov	r1, r5
   14384:	mov	r2, r4
   14388:	bl	14394 <__assert_fail@plt+0x3294>
   1438c:	sub	sp, fp, #16
   14390:	pop	{r4, r5, r6, r7, fp, pc}
   14394:	push	{r4, r5, r6, r7, fp, lr}
   14398:	add	fp, sp, #16
   1439c:	mov	r4, r3
   143a0:	mov	r5, r2
   143a4:	mov	r7, r1
   143a8:	mov	r6, r0
   143ac:	mov	r0, r1
   143b0:	bl	15760 <__assert_fail@plt+0x4660>
   143b4:	ldrb	r1, [r6, #3]
   143b8:	ldr	r3, [fp, #8]
   143bc:	cmp	r0, #0
   143c0:	andne	r1, r1, #223	; 0xdf
   143c4:	mov	r0, #0
   143c8:	cmp	r1, r7
   143cc:	popne	{r4, r5, r6, r7, fp, pc}
   143d0:	cmp	r7, #0
   143d4:	beq	143ec <__assert_fail@plt+0x32ec>
   143d8:	mov	r0, r6
   143dc:	mov	r1, r5
   143e0:	mov	r2, r4
   143e4:	pop	{r4, r5, r6, r7, fp, lr}
   143e8:	b	143f4 <__assert_fail@plt+0x32f4>
   143ec:	mov	r0, #1
   143f0:	pop	{r4, r5, r6, r7, fp, pc}
   143f4:	push	{r4, r5, r6, r7, fp, lr}
   143f8:	add	fp, sp, #16
   143fc:	mov	r4, r3
   14400:	mov	r5, r2
   14404:	mov	r7, r1
   14408:	mov	r6, r0
   1440c:	mov	r0, r1
   14410:	bl	15760 <__assert_fail@plt+0x4660>
   14414:	ldrb	r1, [r6, #4]
   14418:	cmp	r0, #0
   1441c:	andne	r1, r1, #223	; 0xdf
   14420:	mov	r0, #0
   14424:	cmp	r1, r7
   14428:	popne	{r4, r5, r6, r7, fp, pc}
   1442c:	cmp	r7, #0
   14430:	beq	14448 <__assert_fail@plt+0x3348>
   14434:	mov	r0, r6
   14438:	mov	r1, r5
   1443c:	mov	r2, r4
   14440:	pop	{r4, r5, r6, r7, fp, lr}
   14444:	b	14450 <__assert_fail@plt+0x3350>
   14448:	mov	r0, #1
   1444c:	pop	{r4, r5, r6, r7, fp, pc}
   14450:	push	{r4, r5, r6, sl, fp, lr}
   14454:	add	fp, sp, #16
   14458:	mov	r4, r2
   1445c:	mov	r6, r1
   14460:	mov	r5, r0
   14464:	mov	r0, r1
   14468:	bl	15760 <__assert_fail@plt+0x4660>
   1446c:	ldrb	r1, [r5, #5]
   14470:	cmp	r0, #0
   14474:	andne	r1, r1, #223	; 0xdf
   14478:	mov	r0, #0
   1447c:	cmp	r1, r6
   14480:	popne	{r4, r5, r6, sl, fp, pc}
   14484:	cmp	r6, #0
   14488:	beq	1449c <__assert_fail@plt+0x339c>
   1448c:	mov	r0, r5
   14490:	mov	r1, r4
   14494:	pop	{r4, r5, r6, sl, fp, lr}
   14498:	b	144a4 <__assert_fail@plt+0x33a4>
   1449c:	mov	r0, #1
   144a0:	pop	{r4, r5, r6, sl, fp, pc}
   144a4:	push	{r4, r5, fp, lr}
   144a8:	add	fp, sp, #8
   144ac:	mov	r5, r1
   144b0:	mov	r4, r0
   144b4:	mov	r0, r1
   144b8:	bl	15760 <__assert_fail@plt+0x4660>
   144bc:	ldrb	r1, [r4, #6]
   144c0:	cmp	r0, #0
   144c4:	andne	r1, r1, #223	; 0xdf
   144c8:	mov	r0, #0
   144cc:	cmp	r1, r5
   144d0:	popne	{r4, r5, fp, pc}
   144d4:	cmp	r5, #0
   144d8:	beq	144e8 <__assert_fail@plt+0x33e8>
   144dc:	mov	r0, r4
   144e0:	pop	{r4, r5, fp, lr}
   144e4:	b	144f0 <__assert_fail@plt+0x33f0>
   144e8:	mov	r0, #1
   144ec:	pop	{r4, r5, fp, pc}
   144f0:	push	{r4, sl, fp, lr}
   144f4:	add	fp, sp, #8
   144f8:	mov	r4, r0
   144fc:	mov	r0, #0
   14500:	bl	15760 <__assert_fail@plt+0x4660>
   14504:	ldrb	r1, [r4, #7]
   14508:	cmp	r0, #0
   1450c:	beq	14524 <__assert_fail@plt+0x3424>
   14510:	tst	r1, #223	; 0xdf
   14514:	moveq	r0, #1
   14518:	popeq	{r4, sl, fp, pc}
   1451c:	mov	r0, #0
   14520:	pop	{r4, sl, fp, pc}
   14524:	cmp	r1, #0
   14528:	moveq	r0, #1
   1452c:	popeq	{r4, sl, fp, pc}
   14530:	mov	r0, #0
   14534:	pop	{r4, sl, fp, pc}
   14538:	cmp	r2, #0
   1453c:	beq	1456c <__assert_fail@plt+0x346c>
   14540:	mvn	r3, #0
   14544:	udiv	r3, r3, r2
   14548:	cmp	r3, r1
   1454c:	bcs	1456c <__assert_fail@plt+0x346c>
   14550:	push	{fp, lr}
   14554:	mov	fp, sp
   14558:	bl	1101c <__errno_location@plt>
   1455c:	mov	r1, #12
   14560:	str	r1, [r0]
   14564:	mov	r0, #0
   14568:	pop	{fp, pc}
   1456c:	mul	r1, r2, r1
   14570:	b	15448 <__assert_fail@plt+0x4348>
   14574:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14578:	add	fp, sp, #24
   1457c:	sub	sp, sp, #32
   14580:	mov	r4, r2
   14584:	mov	r8, r0
   14588:	ldr	r6, [fp, #12]
   1458c:	ldr	r7, [fp, #8]
   14590:	cmp	r1, #0
   14594:	beq	145bc <__assert_fail@plt+0x34bc>
   14598:	mov	r5, r1
   1459c:	str	r4, [sp]
   145a0:	str	r3, [sp, #4]
   145a4:	movw	r2, #25840	; 0x64f0
   145a8:	movt	r2, #1
   145ac:	mov	r0, r8
   145b0:	mov	r1, #1
   145b4:	mov	r3, r5
   145b8:	b	145d4 <__assert_fail@plt+0x34d4>
   145bc:	str	r3, [sp]
   145c0:	movw	r2, #25852	; 0x64fc
   145c4:	movt	r2, #1
   145c8:	mov	r0, r8
   145cc:	mov	r1, #1
   145d0:	mov	r3, r4
   145d4:	bl	11058 <__fprintf_chk@plt>
   145d8:	movw	r1, #25859	; 0x6503
   145dc:	movt	r1, #1
   145e0:	mov	r0, #0
   145e4:	mov	r2, #5
   145e8:	bl	10f2c <dcgettext@plt>
   145ec:	mov	r3, r0
   145f0:	movw	r0, #2022	; 0x7e6
   145f4:	str	r0, [sp]
   145f8:	movw	r2, #26577	; 0x67d1
   145fc:	movt	r2, #1
   14600:	mov	r0, r8
   14604:	mov	r1, #1
   14608:	bl	11058 <__fprintf_chk@plt>
   1460c:	movw	r4, #24999	; 0x61a7
   14610:	movt	r4, #1
   14614:	mov	r0, r4
   14618:	mov	r1, r8
   1461c:	bl	10e90 <fputs_unlocked@plt>
   14620:	movw	r1, #25863	; 0x6507
   14624:	movt	r1, #1
   14628:	mov	r0, #0
   1462c:	mov	r2, #5
   14630:	bl	10f2c <dcgettext@plt>
   14634:	mov	r2, r0
   14638:	movw	r3, #26034	; 0x65b2
   1463c:	movt	r3, #1
   14640:	mov	r0, r8
   14644:	mov	r1, #1
   14648:	bl	11058 <__fprintf_chk@plt>
   1464c:	mov	r0, r4
   14650:	mov	r1, r8
   14654:	bl	10e90 <fputs_unlocked@plt>
   14658:	cmp	r6, #9
   1465c:	bhi	14698 <__assert_fail@plt+0x3598>
   14660:	add	r0, pc, #0
   14664:	ldr	pc, [r0, r6, lsl #2]
   14668:	muleq	r1, r0, r6
   1466c:	andeq	r4, r1, r4, lsr #13
   14670:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14674:	strdeq	r4, [r1], -ip
   14678:	andeq	r4, r1, r4, lsr #14
   1467c:	andeq	r4, r1, ip, asr #14
   14680:	andeq	r4, r1, r4, ror r7
   14684:	andeq	r4, r1, ip, lsr #15
   14688:	andeq	r4, r1, ip, asr #16
   1468c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14690:	sub	sp, fp, #24
   14694:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14698:	movw	r1, #26387	; 0x6713
   1469c:	movt	r1, #1
   146a0:	b	147fc <__assert_fail@plt+0x36fc>
   146a4:	movw	r1, #26068	; 0x65d4
   146a8:	movt	r1, #1
   146ac:	mov	r0, #0
   146b0:	mov	r2, #5
   146b4:	bl	10f2c <dcgettext@plt>
   146b8:	mov	r2, r0
   146bc:	ldr	r3, [r7]
   146c0:	mov	r0, r8
   146c4:	mov	r1, #1
   146c8:	sub	sp, fp, #24
   146cc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   146d0:	b	11058 <__fprintf_chk@plt>
   146d4:	movw	r1, #26084	; 0x65e4
   146d8:	movt	r1, #1
   146dc:	mov	r0, #0
   146e0:	mov	r2, #5
   146e4:	bl	10f2c <dcgettext@plt>
   146e8:	mov	r2, r0
   146ec:	ldr	r3, [r7]
   146f0:	ldr	r0, [r7, #4]
   146f4:	str	r0, [sp]
   146f8:	b	147e8 <__assert_fail@plt+0x36e8>
   146fc:	movw	r1, #26107	; 0x65fb
   14700:	movt	r1, #1
   14704:	mov	r0, #0
   14708:	mov	r2, #5
   1470c:	bl	10f2c <dcgettext@plt>
   14710:	mov	r2, r0
   14714:	ldr	r3, [r7]
   14718:	ldmib	r7, {r0, r1}
   1471c:	stm	sp, {r0, r1}
   14720:	b	147e8 <__assert_fail@plt+0x36e8>
   14724:	movw	r1, #26135	; 0x6617
   14728:	movt	r1, #1
   1472c:	mov	r0, #0
   14730:	mov	r2, #5
   14734:	bl	10f2c <dcgettext@plt>
   14738:	mov	r2, r0
   1473c:	ldr	r3, [r7]
   14740:	ldmib	r7, {r0, r1, r7}
   14744:	stm	sp, {r0, r1, r7}
   14748:	b	147e8 <__assert_fail@plt+0x36e8>
   1474c:	movw	r1, #26167	; 0x6637
   14750:	movt	r1, #1
   14754:	mov	r0, #0
   14758:	mov	r2, #5
   1475c:	bl	10f2c <dcgettext@plt>
   14760:	mov	r2, r0
   14764:	ldr	r3, [r7]
   14768:	ldmib	r7, {r0, r1, r6, r7}
   1476c:	stm	sp, {r0, r1, r6, r7}
   14770:	b	147e8 <__assert_fail@plt+0x36e8>
   14774:	movw	r1, #26203	; 0x665b
   14778:	movt	r1, #1
   1477c:	mov	r0, #0
   14780:	mov	r2, #5
   14784:	bl	10f2c <dcgettext@plt>
   14788:	mov	r2, r0
   1478c:	ldr	r3, [r7]
   14790:	ldmib	r7, {r0, r1, r6}
   14794:	ldr	r5, [r7, #16]
   14798:	ldr	r7, [r7, #20]
   1479c:	stm	sp, {r0, r1, r6}
   147a0:	str	r5, [sp, #12]
   147a4:	str	r7, [sp, #16]
   147a8:	b	147e8 <__assert_fail@plt+0x36e8>
   147ac:	movw	r1, #26243	; 0x6683
   147b0:	movt	r1, #1
   147b4:	mov	r0, #0
   147b8:	mov	r2, #5
   147bc:	bl	10f2c <dcgettext@plt>
   147c0:	mov	r2, r0
   147c4:	ldr	r3, [r7]
   147c8:	ldmib	r7, {r0, r1, r6}
   147cc:	ldr	r5, [r7, #16]
   147d0:	ldr	r4, [r7, #20]
   147d4:	ldr	r7, [r7, #24]
   147d8:	stm	sp, {r0, r1, r6}
   147dc:	str	r5, [sp, #12]
   147e0:	str	r4, [sp, #16]
   147e4:	str	r7, [sp, #20]
   147e8:	mov	r0, r8
   147ec:	mov	r1, #1
   147f0:	b	1489c <__assert_fail@plt+0x379c>
   147f4:	movw	r1, #26335	; 0x66df
   147f8:	movt	r1, #1
   147fc:	mov	r0, #0
   14800:	mov	r2, #5
   14804:	bl	10f2c <dcgettext@plt>
   14808:	mov	ip, r0
   1480c:	ldr	r3, [r7]
   14810:	ldr	r0, [r7, #4]
   14814:	ldr	r1, [r7, #8]
   14818:	ldr	r6, [r7, #12]
   1481c:	ldr	r5, [r7, #16]
   14820:	ldr	r4, [r7, #20]
   14824:	ldr	r2, [r7, #24]
   14828:	ldr	lr, [r7, #28]
   1482c:	ldr	r7, [r7, #32]
   14830:	stm	sp, {r0, r1, r6}
   14834:	str	r5, [sp, #12]
   14838:	str	r4, [sp, #16]
   1483c:	str	r2, [sp, #20]
   14840:	str	lr, [sp, #24]
   14844:	str	r7, [sp, #28]
   14848:	b	14890 <__assert_fail@plt+0x3790>
   1484c:	movw	r1, #26287	; 0x66af
   14850:	movt	r1, #1
   14854:	mov	r0, #0
   14858:	mov	r2, #5
   1485c:	bl	10f2c <dcgettext@plt>
   14860:	mov	ip, r0
   14864:	ldr	r3, [r7]
   14868:	ldmib	r7, {r0, r1, r6}
   1486c:	ldr	r5, [r7, #16]
   14870:	ldr	r4, [r7, #20]
   14874:	ldr	r2, [r7, #24]
   14878:	ldr	r7, [r7, #28]
   1487c:	stm	sp, {r0, r1, r6}
   14880:	str	r5, [sp, #12]
   14884:	str	r4, [sp, #16]
   14888:	str	r2, [sp, #20]
   1488c:	str	r7, [sp, #24]
   14890:	mov	r0, r8
   14894:	mov	r1, #1
   14898:	mov	r2, ip
   1489c:	bl	11058 <__fprintf_chk@plt>
   148a0:	sub	sp, fp, #24
   148a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148a8:	push	{r4, sl, fp, lr}
   148ac:	add	fp, sp, #8
   148b0:	sub	sp, sp, #8
   148b4:	mov	lr, #0
   148b8:	ldr	ip, [fp, #8]
   148bc:	ldr	r4, [ip, lr, lsl #2]
   148c0:	add	lr, lr, #1
   148c4:	cmp	r4, #0
   148c8:	bne	148bc <__assert_fail@plt+0x37bc>
   148cc:	sub	r4, lr, #1
   148d0:	str	ip, [sp]
   148d4:	str	r4, [sp, #4]
   148d8:	bl	14574 <__assert_fail@plt+0x3474>
   148dc:	sub	sp, fp, #8
   148e0:	pop	{r4, sl, fp, pc}
   148e4:	push	{r4, r5, fp, lr}
   148e8:	add	fp, sp, #8
   148ec:	sub	sp, sp, #48	; 0x30
   148f0:	mov	ip, #0
   148f4:	ldr	r4, [fp, #8]
   148f8:	add	lr, sp, #8
   148fc:	ldr	r5, [r4]
   14900:	str	r5, [lr, ip, lsl #2]
   14904:	cmp	r5, #0
   14908:	beq	1491c <__assert_fail@plt+0x381c>
   1490c:	add	ip, ip, #1
   14910:	add	r4, r4, #4
   14914:	cmp	ip, #10
   14918:	bcc	148fc <__assert_fail@plt+0x37fc>
   1491c:	str	lr, [sp]
   14920:	str	ip, [sp, #4]
   14924:	bl	14574 <__assert_fail@plt+0x3474>
   14928:	sub	sp, fp, #8
   1492c:	pop	{r4, r5, fp, pc}
   14930:	push	{fp, lr}
   14934:	mov	fp, sp
   14938:	sub	sp, sp, #8
   1493c:	add	ip, fp, #8
   14940:	str	ip, [sp, #4]
   14944:	str	ip, [sp]
   14948:	bl	148e4 <__assert_fail@plt+0x37e4>
   1494c:	mov	sp, fp
   14950:	pop	{fp, pc}
   14954:	push	{fp, lr}
   14958:	mov	fp, sp
   1495c:	movw	r0, #29012	; 0x7154
   14960:	movt	r0, #2
   14964:	ldr	r1, [r0]
   14968:	movw	r0, #24999	; 0x61a7
   1496c:	movt	r0, #1
   14970:	bl	10e90 <fputs_unlocked@plt>
   14974:	movw	r1, #26447	; 0x674f
   14978:	movt	r1, #1
   1497c:	mov	r0, #0
   14980:	mov	r2, #5
   14984:	bl	10f2c <dcgettext@plt>
   14988:	mov	r1, r0
   1498c:	movw	r2, #26467	; 0x6763
   14990:	movt	r2, #1
   14994:	mov	r0, #1
   14998:	bl	11040 <__printf_chk@plt>
   1499c:	movw	r1, #26489	; 0x6779
   149a0:	movt	r1, #1
   149a4:	mov	r0, #0
   149a8:	mov	r2, #5
   149ac:	bl	10f2c <dcgettext@plt>
   149b0:	mov	r1, r0
   149b4:	movw	r2, #24509	; 0x5fbd
   149b8:	movt	r2, #1
   149bc:	movw	r3, #24808	; 0x60e8
   149c0:	movt	r3, #1
   149c4:	mov	r0, #1
   149c8:	bl	11040 <__printf_chk@plt>
   149cc:	movw	r1, #26509	; 0x678d
   149d0:	movt	r1, #1
   149d4:	mov	r0, #0
   149d8:	mov	r2, #5
   149dc:	bl	10f2c <dcgettext@plt>
   149e0:	mov	r1, r0
   149e4:	movw	r2, #26548	; 0x67b4
   149e8:	movt	r2, #1
   149ec:	mov	r0, #1
   149f0:	pop	{fp, lr}
   149f4:	b	11040 <__printf_chk@plt>
   149f8:	b	149fc <__assert_fail@plt+0x38fc>
   149fc:	push	{r4, r5, r6, sl, fp, lr}
   14a00:	add	fp, sp, #16
   14a04:	mov	r4, r2
   14a08:	mov	r5, r1
   14a0c:	mov	r6, r0
   14a10:	bl	14538 <__assert_fail@plt+0x3438>
   14a14:	cmp	r0, #0
   14a18:	popne	{r4, r5, r6, sl, fp, pc}
   14a1c:	cmp	r6, #0
   14a20:	beq	14a34 <__assert_fail@plt+0x3934>
   14a24:	cmp	r5, #0
   14a28:	cmpne	r4, #0
   14a2c:	bne	14a34 <__assert_fail@plt+0x3934>
   14a30:	pop	{r4, r5, r6, sl, fp, pc}
   14a34:	bl	14de8 <__assert_fail@plt+0x3ce8>
   14a38:	push	{fp, lr}
   14a3c:	mov	fp, sp
   14a40:	bl	15418 <__assert_fail@plt+0x4318>
   14a44:	bl	14a4c <__assert_fail@plt+0x394c>
   14a48:	pop	{fp, pc}
   14a4c:	cmp	r0, #0
   14a50:	bxne	lr
   14a54:	push	{fp, lr}
   14a58:	mov	fp, sp
   14a5c:	bl	14de8 <__assert_fail@plt+0x3ce8>
   14a60:	push	{fp, lr}
   14a64:	mov	fp, sp
   14a68:	bl	128b8 <__assert_fail@plt+0x17b8>
   14a6c:	bl	14a4c <__assert_fail@plt+0x394c>
   14a70:	pop	{fp, pc}
   14a74:	b	14a38 <__assert_fail@plt+0x3938>
   14a78:	push	{r4, r5, fp, lr}
   14a7c:	add	fp, sp, #8
   14a80:	mov	r4, r1
   14a84:	mov	r5, r0
   14a88:	bl	15448 <__assert_fail@plt+0x4348>
   14a8c:	cmp	r0, #0
   14a90:	popne	{r4, r5, fp, pc}
   14a94:	cmp	r5, #0
   14a98:	beq	14aa8 <__assert_fail@plt+0x39a8>
   14a9c:	cmp	r4, #0
   14aa0:	bne	14aa8 <__assert_fail@plt+0x39a8>
   14aa4:	pop	{r4, r5, fp, pc}
   14aa8:	bl	14de8 <__assert_fail@plt+0x3ce8>
   14aac:	push	{fp, lr}
   14ab0:	mov	fp, sp
   14ab4:	bl	128bc <__assert_fail@plt+0x17bc>
   14ab8:	bl	14a4c <__assert_fail@plt+0x394c>
   14abc:	pop	{fp, pc}
   14ac0:	push	{fp, lr}
   14ac4:	mov	fp, sp
   14ac8:	bl	128cc <__assert_fail@plt+0x17cc>
   14acc:	bl	14a4c <__assert_fail@plt+0x394c>
   14ad0:	pop	{fp, pc}
   14ad4:	push	{fp, lr}
   14ad8:	mov	fp, sp
   14adc:	mov	r2, r1
   14ae0:	mov	r1, r0
   14ae4:	mov	r0, #0
   14ae8:	bl	149fc <__assert_fail@plt+0x38fc>
   14aec:	pop	{fp, pc}
   14af0:	mov	r2, r1
   14af4:	mov	r1, r0
   14af8:	mov	r0, #0
   14afc:	b	14ac0 <__assert_fail@plt+0x39c0>
   14b00:	mov	r2, #1
   14b04:	b	14b08 <__assert_fail@plt+0x3a08>
   14b08:	push	{r4, r5, fp, lr}
   14b0c:	add	fp, sp, #8
   14b10:	mov	r4, r1
   14b14:	ldr	r5, [r1]
   14b18:	cmp	r0, #0
   14b1c:	beq	14b34 <__assert_fail@plt+0x3a34>
   14b20:	mov	r1, #1
   14b24:	add	r1, r1, r5, lsr #1
   14b28:	adds	r5, r5, r1
   14b2c:	bcc	14b4c <__assert_fail@plt+0x3a4c>
   14b30:	bl	14de8 <__assert_fail@plt+0x3ce8>
   14b34:	cmp	r5, #0
   14b38:	bne	14b4c <__assert_fail@plt+0x3a4c>
   14b3c:	mov	r1, #64	; 0x40
   14b40:	udiv	r5, r1, r2
   14b44:	cmp	r2, #64	; 0x40
   14b48:	addhi	r5, r5, #1
   14b4c:	mov	r1, r5
   14b50:	bl	149fc <__assert_fail@plt+0x38fc>
   14b54:	str	r5, [r4]
   14b58:	pop	{r4, r5, fp, pc}
   14b5c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14b60:	add	fp, sp, #24
   14b64:	mov	r8, r1
   14b68:	ldr	r6, [r1]
   14b6c:	add	r1, r6, r6, asr #1
   14b70:	cmp	r1, r6
   14b74:	mvnvs	r1, #-2147483648	; 0x80000000
   14b78:	cmp	r1, r3
   14b7c:	mov	r5, r1
   14b80:	movgt	r5, r3
   14b84:	cmn	r3, #1
   14b88:	movle	r5, r1
   14b8c:	ldr	r4, [fp, #8]
   14b90:	cmn	r4, #1
   14b94:	ble	14bbc <__assert_fail@plt+0x3abc>
   14b98:	cmp	r4, #0
   14b9c:	beq	14c10 <__assert_fail@plt+0x3b10>
   14ba0:	cmn	r5, #1
   14ba4:	ble	14be4 <__assert_fail@plt+0x3ae4>
   14ba8:	mvn	r7, #-2147483648	; 0x80000000
   14bac:	udiv	r1, r7, r4
   14bb0:	cmp	r1, r5
   14bb4:	bge	14c10 <__assert_fail@plt+0x3b10>
   14bb8:	b	14c20 <__assert_fail@plt+0x3b20>
   14bbc:	cmn	r5, #1
   14bc0:	ble	14c00 <__assert_fail@plt+0x3b00>
   14bc4:	cmn	r4, #1
   14bc8:	beq	14c10 <__assert_fail@plt+0x3b10>
   14bcc:	mov	r1, #-2147483648	; 0x80000000
   14bd0:	sdiv	r1, r1, r4
   14bd4:	mvn	r7, #-2147483648	; 0x80000000
   14bd8:	cmp	r1, r5
   14bdc:	bge	14c10 <__assert_fail@plt+0x3b10>
   14be0:	b	14c20 <__assert_fail@plt+0x3b20>
   14be4:	beq	14c10 <__assert_fail@plt+0x3b10>
   14be8:	mov	r1, #-2147483648	; 0x80000000
   14bec:	sdiv	r1, r1, r5
   14bf0:	mvn	r7, #-2147483648	; 0x80000000
   14bf4:	cmp	r1, r4
   14bf8:	bge	14c10 <__assert_fail@plt+0x3b10>
   14bfc:	b	14c20 <__assert_fail@plt+0x3b20>
   14c00:	mvn	r7, #-2147483648	; 0x80000000
   14c04:	sdiv	r1, r7, r4
   14c08:	cmp	r5, r1
   14c0c:	blt	14c20 <__assert_fail@plt+0x3b20>
   14c10:	mul	r1, r5, r4
   14c14:	mov	r7, #64	; 0x40
   14c18:	cmp	r1, #63	; 0x3f
   14c1c:	bgt	14c28 <__assert_fail@plt+0x3b28>
   14c20:	sdiv	r5, r7, r4
   14c24:	mul	r1, r5, r4
   14c28:	cmp	r0, #0
   14c2c:	moveq	r7, #0
   14c30:	streq	r7, [r8]
   14c34:	sub	r7, r5, r6
   14c38:	cmp	r7, r2
   14c3c:	bge	14ce8 <__assert_fail@plt+0x3be8>
   14c40:	add	r5, r6, r2
   14c44:	mov	r1, #0
   14c48:	cmp	r5, r3
   14c4c:	mov	r2, #0
   14c50:	movwgt	r2, #1
   14c54:	cmn	r3, #1
   14c58:	movwgt	r1, #1
   14c5c:	cmp	r5, r6
   14c60:	bvs	14cd0 <__assert_fail@plt+0x3bd0>
   14c64:	ands	r1, r1, r2
   14c68:	bne	14cd0 <__assert_fail@plt+0x3bd0>
   14c6c:	cmn	r4, #1
   14c70:	ble	14c98 <__assert_fail@plt+0x3b98>
   14c74:	cmp	r4, #0
   14c78:	beq	14ce4 <__assert_fail@plt+0x3be4>
   14c7c:	cmn	r5, #1
   14c80:	ble	14cbc <__assert_fail@plt+0x3bbc>
   14c84:	mvn	r1, #-2147483648	; 0x80000000
   14c88:	udiv	r1, r1, r4
   14c8c:	cmp	r1, r5
   14c90:	bge	14ce4 <__assert_fail@plt+0x3be4>
   14c94:	b	14cd0 <__assert_fail@plt+0x3bd0>
   14c98:	cmn	r5, #1
   14c9c:	ble	14cd4 <__assert_fail@plt+0x3bd4>
   14ca0:	cmn	r4, #1
   14ca4:	beq	14ce4 <__assert_fail@plt+0x3be4>
   14ca8:	mov	r1, #-2147483648	; 0x80000000
   14cac:	sdiv	r1, r1, r4
   14cb0:	cmp	r1, r5
   14cb4:	bge	14ce4 <__assert_fail@plt+0x3be4>
   14cb8:	b	14cd0 <__assert_fail@plt+0x3bd0>
   14cbc:	beq	14ce4 <__assert_fail@plt+0x3be4>
   14cc0:	mov	r1, #-2147483648	; 0x80000000
   14cc4:	sdiv	r1, r1, r5
   14cc8:	cmp	r1, r4
   14ccc:	bge	14ce4 <__assert_fail@plt+0x3be4>
   14cd0:	bl	14de8 <__assert_fail@plt+0x3ce8>
   14cd4:	mvn	r1, #-2147483648	; 0x80000000
   14cd8:	sdiv	r1, r1, r4
   14cdc:	cmp	r5, r1
   14ce0:	blt	14cd0 <__assert_fail@plt+0x3bd0>
   14ce4:	mul	r1, r5, r4
   14ce8:	bl	14a78 <__assert_fail@plt+0x3978>
   14cec:	str	r5, [r8]
   14cf0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14cf4:	mov	r1, #1
   14cf8:	b	14cfc <__assert_fail@plt+0x3bfc>
   14cfc:	push	{fp, lr}
   14d00:	mov	fp, sp
   14d04:	bl	153c4 <__assert_fail@plt+0x42c4>
   14d08:	bl	14a4c <__assert_fail@plt+0x394c>
   14d0c:	pop	{fp, pc}
   14d10:	mov	r1, #1
   14d14:	b	14d18 <__assert_fail@plt+0x3c18>
   14d18:	push	{fp, lr}
   14d1c:	mov	fp, sp
   14d20:	bl	128c8 <__assert_fail@plt+0x17c8>
   14d24:	bl	14a4c <__assert_fail@plt+0x394c>
   14d28:	pop	{fp, pc}
   14d2c:	push	{r4, r5, r6, sl, fp, lr}
   14d30:	add	fp, sp, #16
   14d34:	mov	r4, r1
   14d38:	mov	r5, r0
   14d3c:	mov	r0, r1
   14d40:	bl	14a38 <__assert_fail@plt+0x3938>
   14d44:	mov	r6, r0
   14d48:	mov	r1, r5
   14d4c:	mov	r2, r4
   14d50:	bl	10ef0 <memcpy@plt>
   14d54:	mov	r0, r6
   14d58:	pop	{r4, r5, r6, sl, fp, pc}
   14d5c:	push	{r4, r5, r6, sl, fp, lr}
   14d60:	add	fp, sp, #16
   14d64:	mov	r4, r1
   14d68:	mov	r5, r0
   14d6c:	mov	r0, r1
   14d70:	bl	14a60 <__assert_fail@plt+0x3960>
   14d74:	mov	r6, r0
   14d78:	mov	r1, r5
   14d7c:	mov	r2, r4
   14d80:	bl	10ef0 <memcpy@plt>
   14d84:	mov	r0, r6
   14d88:	pop	{r4, r5, r6, sl, fp, pc}
   14d8c:	push	{r4, r5, r6, sl, fp, lr}
   14d90:	add	fp, sp, #16
   14d94:	mov	r4, r1
   14d98:	mov	r5, r0
   14d9c:	add	r0, r1, #1
   14da0:	bl	14a60 <__assert_fail@plt+0x3960>
   14da4:	mov	r6, r0
   14da8:	mov	r0, #0
   14dac:	strb	r0, [r6, r4]
   14db0:	mov	r0, r6
   14db4:	mov	r1, r5
   14db8:	mov	r2, r4
   14dbc:	bl	10ef0 <memcpy@plt>
   14dc0:	mov	r0, r6
   14dc4:	pop	{r4, r5, r6, sl, fp, pc}
   14dc8:	push	{r4, sl, fp, lr}
   14dcc:	add	fp, sp, #8
   14dd0:	mov	r4, r0
   14dd4:	bl	11004 <strlen@plt>
   14dd8:	add	r1, r0, #1
   14ddc:	mov	r0, r4
   14de0:	pop	{r4, sl, fp, lr}
   14de4:	b	14d2c <__assert_fail@plt+0x3c2c>
   14de8:	push	{fp, lr}
   14dec:	mov	fp, sp
   14df0:	movw	r0, #28916	; 0x70f4
   14df4:	movt	r0, #2
   14df8:	ldr	r4, [r0]
   14dfc:	movw	r1, #26624	; 0x6800
   14e00:	movt	r1, #1
   14e04:	mov	r0, #0
   14e08:	mov	r2, #5
   14e0c:	bl	10f2c <dcgettext@plt>
   14e10:	mov	r3, r0
   14e14:	movw	r2, #24488	; 0x5fa8
   14e18:	movt	r2, #1
   14e1c:	mov	r0, r4
   14e20:	mov	r1, #0
   14e24:	bl	10fa4 <error@plt>
   14e28:	bl	110e8 <abort@plt>
   14e2c:	bx	lr
   14e30:	b	154a4 <__assert_fail@plt+0x43a4>
   14e34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e38:	add	fp, sp, #28
   14e3c:	sub	sp, sp, #20
   14e40:	cmp	r2, #37	; 0x25
   14e44:	bcs	15258 <__assert_fail@plt+0x4158>
   14e48:	mov	r9, r3
   14e4c:	mov	r7, r2
   14e50:	mov	r6, r1
   14e54:	mov	r4, r0
   14e58:	ldr	sl, [fp, #8]
   14e5c:	bl	1101c <__errno_location@plt>
   14e60:	mov	r5, r0
   14e64:	mov	r0, #0
   14e68:	str	r0, [r5]
   14e6c:	add	r8, sp, #16
   14e70:	cmp	r6, #0
   14e74:	movne	r8, r6
   14e78:	mov	r0, r4
   14e7c:	mov	r1, r8
   14e80:	mov	r2, r7
   14e84:	bl	11070 <strtoimax@plt>
   14e88:	str	r1, [sp, #12]
   14e8c:	str	r0, [sp, #8]
   14e90:	ldr	r7, [r8]
   14e94:	cmp	r7, r4
   14e98:	beq	14ec4 <__assert_fail@plt+0x3dc4>
   14e9c:	ldr	r0, [r5]
   14ea0:	cmp	r0, #0
   14ea4:	beq	14efc <__assert_fail@plt+0x3dfc>
   14ea8:	mov	r5, #4
   14eac:	cmp	r0, #34	; 0x22
   14eb0:	bne	1524c <__assert_fail@plt+0x414c>
   14eb4:	mov	r5, #1
   14eb8:	cmp	sl, #0
   14ebc:	bne	14f08 <__assert_fail@plt+0x3e08>
   14ec0:	b	15240 <__assert_fail@plt+0x4140>
   14ec4:	mov	r5, #4
   14ec8:	cmp	sl, #0
   14ecc:	ldrbne	r1, [r7]
   14ed0:	cmpne	r1, #0
   14ed4:	beq	1524c <__assert_fail@plt+0x414c>
   14ed8:	mov	r0, sl
   14edc:	bl	11010 <strchr@plt>
   14ee0:	cmp	r0, #0
   14ee4:	beq	1524c <__assert_fail@plt+0x414c>
   14ee8:	mov	r5, #0
   14eec:	str	r5, [sp, #12]
   14ef0:	mov	r0, #1
   14ef4:	str	r0, [sp, #8]
   14ef8:	b	14f08 <__assert_fail@plt+0x3e08>
   14efc:	mov	r5, r0
   14f00:	cmp	sl, #0
   14f04:	beq	15240 <__assert_fail@plt+0x4140>
   14f08:	ldrb	r4, [r7]
   14f0c:	cmp	r4, #0
   14f10:	beq	15240 <__assert_fail@plt+0x4140>
   14f14:	mov	r0, sl
   14f18:	mov	r1, r4
   14f1c:	bl	11010 <strchr@plt>
   14f20:	cmp	r0, #0
   14f24:	beq	1513c <__assert_fail@plt+0x403c>
   14f28:	sub	r0, r4, #69	; 0x45
   14f2c:	mov	r1, #1
   14f30:	str	r1, [sp, #4]
   14f34:	mov	r6, #1024	; 0x400
   14f38:	cmp	r0, #47	; 0x2f
   14f3c:	bhi	15038 <__assert_fail@plt+0x3f38>
   14f40:	add	r1, pc, #0
   14f44:	ldr	pc, [r1, r0, lsl #2]
   14f48:	andeq	r5, r1, r8
   14f4c:	andeq	r5, r1, r8, lsr r0
   14f50:	andeq	r5, r1, r8
   14f54:	andeq	r5, r1, r8, lsr r0
   14f58:	andeq	r5, r1, r8, lsr r0
   14f5c:	andeq	r5, r1, r8, lsr r0
   14f60:	andeq	r5, r1, r8
   14f64:	andeq	r5, r1, r8, lsr r0
   14f68:	andeq	r5, r1, r8
   14f6c:	andeq	r5, r1, r8, lsr r0
   14f70:	andeq	r5, r1, r8, lsr r0
   14f74:	andeq	r5, r1, r8
   14f78:	andeq	r5, r1, r8, lsr r0
   14f7c:	andeq	r5, r1, r8, lsr r0
   14f80:	andeq	r5, r1, r8, lsr r0
   14f84:	andeq	r5, r1, r8
   14f88:	andeq	r5, r1, r8, lsr r0
   14f8c:	andeq	r5, r1, r8, lsr r0
   14f90:	andeq	r5, r1, r8, lsr r0
   14f94:	andeq	r5, r1, r8, lsr r0
   14f98:	andeq	r5, r1, r8
   14f9c:	andeq	r5, r1, r8
   14fa0:	andeq	r5, r1, r8, lsr r0
   14fa4:	andeq	r5, r1, r8, lsr r0
   14fa8:	andeq	r5, r1, r8, lsr r0
   14fac:	andeq	r5, r1, r8, lsr r0
   14fb0:	andeq	r5, r1, r8, lsr r0
   14fb4:	andeq	r5, r1, r8, lsr r0
   14fb8:	andeq	r5, r1, r8, lsr r0
   14fbc:	andeq	r5, r1, r8, lsr r0
   14fc0:	andeq	r5, r1, r8, lsr r0
   14fc4:	andeq	r5, r1, r8, lsr r0
   14fc8:	andeq	r5, r1, r8, lsr r0
   14fcc:	andeq	r5, r1, r8, lsr r0
   14fd0:	andeq	r5, r1, r8
   14fd4:	andeq	r5, r1, r8, lsr r0
   14fd8:	andeq	r5, r1, r8, lsr r0
   14fdc:	andeq	r5, r1, r8, lsr r0
   14fe0:	andeq	r5, r1, r8
   14fe4:	andeq	r5, r1, r8, lsr r0
   14fe8:	andeq	r5, r1, r8
   14fec:	andeq	r5, r1, r8, lsr r0
   14ff0:	andeq	r5, r1, r8, lsr r0
   14ff4:	andeq	r5, r1, r8, lsr r0
   14ff8:	andeq	r5, r1, r8, lsr r0
   14ffc:	andeq	r5, r1, r8, lsr r0
   15000:	andeq	r5, r1, r8, lsr r0
   15004:	andeq	r5, r1, r8
   15008:	mov	r0, sl
   1500c:	mov	r1, #48	; 0x30
   15010:	bl	11010 <strchr@plt>
   15014:	cmp	r0, #0
   15018:	beq	15038 <__assert_fail@plt+0x3f38>
   1501c:	ldrb	r0, [r7, #1]
   15020:	cmp	r0, #66	; 0x42
   15024:	cmpne	r0, #68	; 0x44
   15028:	bne	15150 <__assert_fail@plt+0x4050>
   1502c:	mov	r0, #2
   15030:	str	r0, [sp, #4]
   15034:	mov	r6, #1000	; 0x3e8
   15038:	sub	r1, r4, #66	; 0x42
   1503c:	cmp	r1, #53	; 0x35
   15040:	bhi	1513c <__assert_fail@plt+0x403c>
   15044:	mov	r0, #0
   15048:	add	r2, pc, #0
   1504c:	ldr	pc, [r2, r1, lsl #2]
   15050:	andeq	r5, r1, r0, asr #3
   15054:	andeq	r5, r1, ip, lsr r1
   15058:	andeq	r5, r1, ip, lsr r1
   1505c:	andeq	r5, r1, ip, asr #3
   15060:	andeq	r5, r1, ip, lsr r1
   15064:	andeq	r5, r1, r8, lsr #2
   15068:	andeq	r5, r1, ip, lsr r1
   1506c:	andeq	r5, r1, ip, lsr r1
   15070:	andeq	r5, r1, ip, lsr r1
   15074:	andeq	r5, r1, r0, ror r1
   15078:	andeq	r5, r1, ip, lsr r1
   1507c:	andeq	r5, r1, r4, lsl #3
   15080:	andeq	r5, r1, ip, lsr r1
   15084:	andeq	r5, r1, ip, lsr r1
   15088:	andeq	r5, r1, r0, ror #3
   1508c:	andeq	r5, r1, ip, lsr r1
   15090:	andeq	r5, r1, ip, lsr r1
   15094:	andeq	r5, r1, ip, lsr r1
   15098:	muleq	r1, r8, r1
   1509c:	andeq	r5, r1, ip, lsr r1
   150a0:	andeq	r5, r1, ip, lsr r1
   150a4:	andeq	r5, r1, ip, lsr r1
   150a8:	andeq	r5, r1, ip, lsr r1
   150ac:	strdeq	r5, [r1], -r4
   150b0:	andeq	r5, r1, ip, lsr #3
   150b4:	andeq	r5, r1, ip, lsr r1
   150b8:	andeq	r5, r1, ip, lsr r1
   150bc:	andeq	r5, r1, ip, lsr r1
   150c0:	andeq	r5, r1, ip, lsr r1
   150c4:	andeq	r5, r1, ip, lsr r1
   150c8:	andeq	r5, r1, ip, lsr r1
   150cc:	andeq	r5, r1, ip, lsr r1
   150d0:	andeq	r5, r1, r8, lsl #4
   150d4:	andeq	r5, r1, r0, lsr #4
   150d8:	andeq	r5, r1, ip, lsr r1
   150dc:	andeq	r5, r1, ip, lsr r1
   150e0:	andeq	r5, r1, ip, lsr r1
   150e4:	andeq	r5, r1, r8, lsr #2
   150e8:	andeq	r5, r1, ip, lsr r1
   150ec:	andeq	r5, r1, ip, lsr r1
   150f0:	andeq	r5, r1, ip, lsr r1
   150f4:	andeq	r5, r1, r0, ror r1
   150f8:	andeq	r5, r1, ip, lsr r1
   150fc:	andeq	r5, r1, r4, lsl #3
   15100:	andeq	r5, r1, ip, lsr r1
   15104:	andeq	r5, r1, ip, lsr r1
   15108:	andeq	r5, r1, ip, lsr r1
   1510c:	andeq	r5, r1, ip, lsr r1
   15110:	andeq	r5, r1, ip, lsr r1
   15114:	andeq	r5, r1, ip, lsr r1
   15118:	muleq	r1, r8, r1
   1511c:	andeq	r5, r1, ip, lsr r1
   15120:	andeq	r5, r1, ip, lsr r1
   15124:	andeq	r5, r1, r4, lsl r2
   15128:	add	r0, sp, #8
   1512c:	mov	r1, r6
   15130:	mov	r2, #3
   15134:	bl	1537c <__assert_fail@plt+0x427c>
   15138:	b	15220 <__assert_fail@plt+0x4120>
   1513c:	ldr	r0, [sp, #8]
   15140:	ldr	r1, [sp, #12]
   15144:	strd	r0, [r9]
   15148:	orr	r5, r5, #2
   1514c:	b	1524c <__assert_fail@plt+0x414c>
   15150:	cmp	r0, #105	; 0x69
   15154:	bne	15038 <__assert_fail@plt+0x3f38>
   15158:	ldrb	r0, [r7, #2]
   1515c:	mov	r1, #1
   15160:	cmp	r0, #66	; 0x42
   15164:	movweq	r1, #3
   15168:	str	r1, [sp, #4]
   1516c:	b	15038 <__assert_fail@plt+0x3f38>
   15170:	add	r0, sp, #8
   15174:	mov	r1, r6
   15178:	mov	r2, #1
   1517c:	bl	1537c <__assert_fail@plt+0x427c>
   15180:	b	15220 <__assert_fail@plt+0x4120>
   15184:	add	r0, sp, #8
   15188:	mov	r1, r6
   1518c:	mov	r2, #2
   15190:	bl	1537c <__assert_fail@plt+0x427c>
   15194:	b	15220 <__assert_fail@plt+0x4120>
   15198:	add	r0, sp, #8
   1519c:	mov	r1, r6
   151a0:	mov	r2, #4
   151a4:	bl	1537c <__assert_fail@plt+0x427c>
   151a8:	b	15220 <__assert_fail@plt+0x4120>
   151ac:	add	r0, sp, #8
   151b0:	mov	r1, r6
   151b4:	mov	r2, #7
   151b8:	bl	1537c <__assert_fail@plt+0x427c>
   151bc:	b	15220 <__assert_fail@plt+0x4120>
   151c0:	add	r0, sp, #8
   151c4:	mov	r1, #1024	; 0x400
   151c8:	b	1521c <__assert_fail@plt+0x411c>
   151cc:	add	r0, sp, #8
   151d0:	mov	r1, r6
   151d4:	mov	r2, #6
   151d8:	bl	1537c <__assert_fail@plt+0x427c>
   151dc:	b	15220 <__assert_fail@plt+0x4120>
   151e0:	add	r0, sp, #8
   151e4:	mov	r1, r6
   151e8:	mov	r2, #5
   151ec:	bl	1537c <__assert_fail@plt+0x427c>
   151f0:	b	15220 <__assert_fail@plt+0x4120>
   151f4:	add	r0, sp, #8
   151f8:	mov	r1, r6
   151fc:	mov	r2, #8
   15200:	bl	1537c <__assert_fail@plt+0x427c>
   15204:	b	15220 <__assert_fail@plt+0x4120>
   15208:	add	r0, sp, #8
   1520c:	mov	r1, #512	; 0x200
   15210:	b	1521c <__assert_fail@plt+0x411c>
   15214:	add	r0, sp, #8
   15218:	mov	r1, #2
   1521c:	bl	15278 <__assert_fail@plt+0x4178>
   15220:	ldr	r1, [r8]
   15224:	ldr	r3, [sp, #4]
   15228:	add	r2, r1, r3
   1522c:	str	r2, [r8]
   15230:	ldrb	r1, [r1, r3]
   15234:	orr	r5, r0, r5
   15238:	cmp	r1, #0
   1523c:	orrne	r5, r5, #2
   15240:	ldr	r0, [sp, #8]
   15244:	ldr	r1, [sp, #12]
   15248:	strd	r0, [r9]
   1524c:	mov	r0, r5
   15250:	sub	sp, fp, #28
   15254:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15258:	movw	r0, #26641	; 0x6811
   1525c:	movt	r0, #1
   15260:	movw	r1, #26679	; 0x6837
   15264:	movt	r1, #1
   15268:	movw	r3, #26695	; 0x6847
   1526c:	movt	r3, #1
   15270:	mov	r2, #85	; 0x55
   15274:	bl	11100 <__assert_fail@plt>
   15278:	push	{r4, r5, r6, r7, fp, lr}
   1527c:	add	fp, sp, #16
   15280:	mov	r5, r1
   15284:	mov	r4, r0
   15288:	cmn	r1, #1
   1528c:	ble	152b4 <__assert_fail@plt+0x41b4>
   15290:	cmp	r5, #0
   15294:	beq	15318 <__assert_fail@plt+0x4218>
   15298:	ldrd	r6, [r4]
   1529c:	cmn	r7, #1
   152a0:	ble	152ec <__assert_fail@plt+0x41ec>
   152a4:	asr	r3, r5, #31
   152a8:	mvn	r0, #0
   152ac:	mvn	r1, #-2147483648	; 0x80000000
   152b0:	b	152d4 <__assert_fail@plt+0x41d4>
   152b4:	ldrd	r6, [r4]
   152b8:	cmn	r7, #1
   152bc:	ble	15334 <__assert_fail@plt+0x4234>
   152c0:	cmn	r5, #1
   152c4:	beq	15318 <__assert_fail@plt+0x4218>
   152c8:	asr	r3, r5, #31
   152cc:	mov	r0, #0
   152d0:	mov	r1, #-2147483648	; 0x80000000
   152d4:	mov	r2, r5
   152d8:	bl	159fc <__assert_fail@plt+0x48fc>
   152dc:	subs	r0, r0, r6
   152e0:	sbcs	r0, r1, r7
   152e4:	bge	15318 <__assert_fail@plt+0x4218>
   152e8:	b	15354 <__assert_fail@plt+0x4254>
   152ec:	and	r0, r6, r7
   152f0:	cmn	r0, #1
   152f4:	beq	15318 <__assert_fail@plt+0x4218>
   152f8:	mov	r0, #0
   152fc:	mov	r1, #-2147483648	; 0x80000000
   15300:	mov	r2, r6
   15304:	mov	r3, r7
   15308:	bl	159fc <__assert_fail@plt+0x48fc>
   1530c:	subs	r0, r0, r5
   15310:	sbcs	r0, r1, r5, asr #31
   15314:	blt	15354 <__assert_fail@plt+0x4254>
   15318:	ldrd	r0, [r4]
   1531c:	umull	r2, r3, r0, r5
   15320:	asr	r7, r5, #31
   15324:	mla	r0, r0, r7, r3
   15328:	mla	r1, r1, r5, r0
   1532c:	mov	r0, #0
   15330:	b	15370 <__assert_fail@plt+0x4270>
   15334:	asr	r3, r5, #31
   15338:	mvn	r0, #0
   1533c:	mvn	r1, #-2147483648	; 0x80000000
   15340:	mov	r2, r5
   15344:	bl	159fc <__assert_fail@plt+0x48fc>
   15348:	subs	r0, r6, r0
   1534c:	sbcs	r0, r7, r1
   15350:	bge	15318 <__assert_fail@plt+0x4218>
   15354:	ldr	r0, [r4, #4]
   15358:	mvn	r1, #-2147483648	; 0x80000000
   1535c:	cmp	r0, #0
   15360:	movlt	r1, #-2147483648	; 0x80000000
   15364:	mvn	r2, #0
   15368:	movwlt	r2, #0
   1536c:	mov	r0, #1
   15370:	str	r2, [r4]
   15374:	str	r1, [r4, #4]
   15378:	pop	{r4, r5, r6, r7, fp, pc}
   1537c:	push	{r4, r5, r6, r7, fp, lr}
   15380:	add	fp, sp, #16
   15384:	cmp	r2, #0
   15388:	moveq	r6, #0
   1538c:	moveq	r0, r6
   15390:	popeq	{r4, r5, r6, r7, fp, pc}
   15394:	mov	r4, r2
   15398:	mov	r5, r1
   1539c:	mov	r7, r0
   153a0:	mov	r6, #0
   153a4:	mov	r0, r7
   153a8:	mov	r1, r5
   153ac:	bl	15278 <__assert_fail@plt+0x4178>
   153b0:	orr	r6, r0, r6
   153b4:	subs	r4, r4, #1
   153b8:	bne	153a4 <__assert_fail@plt+0x42a4>
   153bc:	mov	r0, r6
   153c0:	pop	{r4, r5, r6, r7, fp, pc}
   153c4:	clz	r2, r1
   153c8:	lsr	r2, r2, #5
   153cc:	clz	r3, r0
   153d0:	lsr	r3, r3, #5
   153d4:	orrs	r2, r3, r2
   153d8:	movwne	r1, #1
   153dc:	movwne	r0, #1
   153e0:	cmp	r1, #0
   153e4:	beq	15414 <__assert_fail@plt+0x4314>
   153e8:	mvn	r2, #-2147483648	; 0x80000000
   153ec:	udiv	r2, r2, r1
   153f0:	cmp	r2, r0
   153f4:	bcs	15414 <__assert_fail@plt+0x4314>
   153f8:	push	{fp, lr}
   153fc:	mov	fp, sp
   15400:	bl	1101c <__errno_location@plt>
   15404:	mov	r1, #12
   15408:	str	r1, [r0]
   1540c:	mov	r0, #0
   15410:	pop	{fp, pc}
   15414:	b	10e84 <calloc@plt>
   15418:	cmp	r0, #0
   1541c:	movweq	r0, #1
   15420:	cmn	r0, #1
   15424:	ble	1542c <__assert_fail@plt+0x432c>
   15428:	b	10fb0 <malloc@plt>
   1542c:	push	{fp, lr}
   15430:	mov	fp, sp
   15434:	bl	1101c <__errno_location@plt>
   15438:	mov	r1, #12
   1543c:	str	r1, [r0]
   15440:	mov	r0, #0
   15444:	pop	{fp, pc}
   15448:	push	{fp, lr}
   1544c:	mov	fp, sp
   15450:	cmp	r0, #0
   15454:	beq	15470 <__assert_fail@plt+0x4370>
   15458:	cmp	r1, #0
   1545c:	beq	1547c <__assert_fail@plt+0x437c>
   15460:	cmn	r1, #1
   15464:	ble	15488 <__assert_fail@plt+0x4388>
   15468:	pop	{fp, lr}
   1546c:	b	10f38 <realloc@plt>
   15470:	mov	r0, r1
   15474:	pop	{fp, lr}
   15478:	b	15418 <__assert_fail@plt+0x4318>
   1547c:	bl	127d0 <__assert_fail@plt+0x16d0>
   15480:	mov	r0, #0
   15484:	pop	{fp, pc}
   15488:	bl	1101c <__errno_location@plt>
   1548c:	mov	r1, #12
   15490:	str	r1, [r0]
   15494:	mov	r0, #0
   15498:	pop	{fp, pc}
   1549c:	mov	r0, #0
   154a0:	bx	lr
   154a4:	mov	r0, #0
   154a8:	bx	lr
   154ac:	mov	r1, r0
   154b0:	sub	r2, r0, #65	; 0x41
   154b4:	mov	r0, #1
   154b8:	cmp	r2, #26
   154bc:	subcs	r2, r1, #97	; 0x61
   154c0:	cmpcs	r2, #26
   154c4:	bcs	154cc <__assert_fail@plt+0x43cc>
   154c8:	bx	lr
   154cc:	sub	r1, r1, #48	; 0x30
   154d0:	cmp	r1, #10
   154d4:	movcs	r0, #0
   154d8:	bx	lr
   154dc:	mov	r1, r0
   154e0:	sub	r2, r0, #65	; 0x41
   154e4:	mov	r0, #1
   154e8:	cmp	r2, #26
   154ec:	subcs	r1, r1, #97	; 0x61
   154f0:	cmpcs	r1, #26
   154f4:	movcs	r0, #0
   154f8:	bx	lr
   154fc:	mov	r1, #0
   15500:	cmp	r0, #128	; 0x80
   15504:	movwcc	r1, #1
   15508:	mov	r0, r1
   1550c:	bx	lr
   15510:	sub	r1, r0, #9
   15514:	clz	r1, r1
   15518:	lsr	r1, r1, #5
   1551c:	sub	r0, r0, #32
   15520:	clz	r0, r0
   15524:	lsr	r0, r0, #5
   15528:	orr	r0, r0, r1
   1552c:	bx	lr
   15530:	mov	r1, r0
   15534:	mov	r0, #1
   15538:	cmp	r1, #32
   1553c:	bxcc	lr
   15540:	cmp	r1, #127	; 0x7f
   15544:	movne	r0, #0
   15548:	bx	lr
   1554c:	sub	r1, r0, #48	; 0x30
   15550:	mov	r0, #0
   15554:	cmp	r1, #10
   15558:	movwcc	r0, #1
   1555c:	bx	lr
   15560:	sub	r1, r0, #33	; 0x21
   15564:	mov	r0, #0
   15568:	cmp	r1, #94	; 0x5e
   1556c:	movwcc	r0, #1
   15570:	bx	lr
   15574:	sub	r1, r0, #97	; 0x61
   15578:	mov	r0, #0
   1557c:	cmp	r1, #26
   15580:	movwcc	r0, #1
   15584:	bx	lr
   15588:	sub	r1, r0, #32
   1558c:	mov	r0, #0
   15590:	cmp	r1, #95	; 0x5f
   15594:	movwcc	r0, #1
   15598:	bx	lr
   1559c:	sub	r1, r0, #33	; 0x21
   155a0:	cmp	r1, #93	; 0x5d
   155a4:	bhi	15730 <__assert_fail@plt+0x4630>
   155a8:	mov	r0, #1
   155ac:	add	r2, pc, #0
   155b0:	ldr	pc, [r2, r1, lsl #2]
   155b4:	andeq	r5, r1, ip, lsr #14
   155b8:	andeq	r5, r1, ip, lsr #14
   155bc:	andeq	r5, r1, ip, lsr #14
   155c0:	andeq	r5, r1, ip, lsr #14
   155c4:	andeq	r5, r1, ip, lsr #14
   155c8:	andeq	r5, r1, ip, lsr #14
   155cc:	andeq	r5, r1, ip, lsr #14
   155d0:	andeq	r5, r1, ip, lsr #14
   155d4:	andeq	r5, r1, ip, lsr #14
   155d8:	andeq	r5, r1, ip, lsr #14
   155dc:	andeq	r5, r1, ip, lsr #14
   155e0:	andeq	r5, r1, ip, lsr #14
   155e4:	andeq	r5, r1, ip, lsr #14
   155e8:	andeq	r5, r1, ip, lsr #14
   155ec:	andeq	r5, r1, ip, lsr #14
   155f0:	andeq	r5, r1, r0, lsr r7
   155f4:	andeq	r5, r1, r0, lsr r7
   155f8:	andeq	r5, r1, r0, lsr r7
   155fc:	andeq	r5, r1, r0, lsr r7
   15600:	andeq	r5, r1, r0, lsr r7
   15604:	andeq	r5, r1, r0, lsr r7
   15608:	andeq	r5, r1, r0, lsr r7
   1560c:	andeq	r5, r1, r0, lsr r7
   15610:	andeq	r5, r1, r0, lsr r7
   15614:	andeq	r5, r1, r0, lsr r7
   15618:	andeq	r5, r1, ip, lsr #14
   1561c:	andeq	r5, r1, ip, lsr #14
   15620:	andeq	r5, r1, ip, lsr #14
   15624:	andeq	r5, r1, ip, lsr #14
   15628:	andeq	r5, r1, ip, lsr #14
   1562c:	andeq	r5, r1, ip, lsr #14
   15630:	andeq	r5, r1, ip, lsr #14
   15634:	andeq	r5, r1, r0, lsr r7
   15638:	andeq	r5, r1, r0, lsr r7
   1563c:	andeq	r5, r1, r0, lsr r7
   15640:	andeq	r5, r1, r0, lsr r7
   15644:	andeq	r5, r1, r0, lsr r7
   15648:	andeq	r5, r1, r0, lsr r7
   1564c:	andeq	r5, r1, r0, lsr r7
   15650:	andeq	r5, r1, r0, lsr r7
   15654:	andeq	r5, r1, r0, lsr r7
   15658:	andeq	r5, r1, r0, lsr r7
   1565c:	andeq	r5, r1, r0, lsr r7
   15660:	andeq	r5, r1, r0, lsr r7
   15664:	andeq	r5, r1, r0, lsr r7
   15668:	andeq	r5, r1, r0, lsr r7
   1566c:	andeq	r5, r1, r0, lsr r7
   15670:	andeq	r5, r1, r0, lsr r7
   15674:	andeq	r5, r1, r0, lsr r7
   15678:	andeq	r5, r1, r0, lsr r7
   1567c:	andeq	r5, r1, r0, lsr r7
   15680:	andeq	r5, r1, r0, lsr r7
   15684:	andeq	r5, r1, r0, lsr r7
   15688:	andeq	r5, r1, r0, lsr r7
   1568c:	andeq	r5, r1, r0, lsr r7
   15690:	andeq	r5, r1, r0, lsr r7
   15694:	andeq	r5, r1, r0, lsr r7
   15698:	andeq	r5, r1, r0, lsr r7
   1569c:	andeq	r5, r1, ip, lsr #14
   156a0:	andeq	r5, r1, ip, lsr #14
   156a4:	andeq	r5, r1, ip, lsr #14
   156a8:	andeq	r5, r1, ip, lsr #14
   156ac:	andeq	r5, r1, ip, lsr #14
   156b0:	andeq	r5, r1, ip, lsr #14
   156b4:	andeq	r5, r1, r0, lsr r7
   156b8:	andeq	r5, r1, r0, lsr r7
   156bc:	andeq	r5, r1, r0, lsr r7
   156c0:	andeq	r5, r1, r0, lsr r7
   156c4:	andeq	r5, r1, r0, lsr r7
   156c8:	andeq	r5, r1, r0, lsr r7
   156cc:	andeq	r5, r1, r0, lsr r7
   156d0:	andeq	r5, r1, r0, lsr r7
   156d4:	andeq	r5, r1, r0, lsr r7
   156d8:	andeq	r5, r1, r0, lsr r7
   156dc:	andeq	r5, r1, r0, lsr r7
   156e0:	andeq	r5, r1, r0, lsr r7
   156e4:	andeq	r5, r1, r0, lsr r7
   156e8:	andeq	r5, r1, r0, lsr r7
   156ec:	andeq	r5, r1, r0, lsr r7
   156f0:	andeq	r5, r1, r0, lsr r7
   156f4:	andeq	r5, r1, r0, lsr r7
   156f8:	andeq	r5, r1, r0, lsr r7
   156fc:	andeq	r5, r1, r0, lsr r7
   15700:	andeq	r5, r1, r0, lsr r7
   15704:	andeq	r5, r1, r0, lsr r7
   15708:	andeq	r5, r1, r0, lsr r7
   1570c:	andeq	r5, r1, r0, lsr r7
   15710:	andeq	r5, r1, r0, lsr r7
   15714:	andeq	r5, r1, r0, lsr r7
   15718:	andeq	r5, r1, r0, lsr r7
   1571c:	andeq	r5, r1, ip, lsr #14
   15720:	andeq	r5, r1, ip, lsr #14
   15724:	andeq	r5, r1, ip, lsr #14
   15728:	andeq	r5, r1, ip, lsr #14
   1572c:	bx	lr
   15730:	mov	r0, #0
   15734:	bx	lr
   15738:	sub	r0, r0, #9
   1573c:	cmp	r0, #23
   15740:	movhi	r0, #0
   15744:	bxhi	lr
   15748:	bic	r0, r0, #-16777216	; 0xff000000
   1574c:	movw	r1, #31
   15750:	movt	r1, #128	; 0x80
   15754:	mov	r2, #1
   15758:	and	r0, r2, r1, lsr r0
   1575c:	bx	lr
   15760:	sub	r1, r0, #65	; 0x41
   15764:	mov	r0, #0
   15768:	cmp	r1, #26
   1576c:	movwcc	r0, #1
   15770:	bx	lr
   15774:	mov	r1, r0
   15778:	sub	r2, r0, #48	; 0x30
   1577c:	mov	r0, #1
   15780:	cmp	r2, #22
   15784:	bhi	1579c <__assert_fail@plt+0x469c>
   15788:	mov	ip, #1
   1578c:	movw	r3, #1023	; 0x3ff
   15790:	movt	r3, #126	; 0x7e
   15794:	tst	r3, ip, lsl r2
   15798:	bxne	lr
   1579c:	sub	r1, r1, #97	; 0x61
   157a0:	cmp	r1, #6
   157a4:	movcs	r0, #0
   157a8:	bxcs	lr
   157ac:	bx	lr
   157b0:	sub	r1, r0, #65	; 0x41
   157b4:	cmp	r1, #26
   157b8:	addcc	r0, r0, #32
   157bc:	bx	lr
   157c0:	sub	r1, r0, #97	; 0x61
   157c4:	cmp	r1, #26
   157c8:	subcc	r0, r0, #32
   157cc:	bx	lr
   157d0:	push	{r4, r5, r6, sl, fp, lr}
   157d4:	add	fp, sp, #16
   157d8:	mov	r4, r0
   157dc:	bl	10f80 <__fpending@plt>
   157e0:	mov	r5, r0
   157e4:	mov	r0, r4
   157e8:	bl	10f8c <ferror_unlocked@plt>
   157ec:	mov	r6, r0
   157f0:	mov	r0, r4
   157f4:	bl	126c8 <__assert_fail@plt+0x15c8>
   157f8:	cmp	r6, #0
   157fc:	beq	1581c <__assert_fail@plt+0x471c>
   15800:	mvn	r4, #0
   15804:	cmp	r0, #0
   15808:	bne	15850 <__assert_fail@plt+0x4750>
   1580c:	bl	1101c <__errno_location@plt>
   15810:	mov	r1, #0
   15814:	str	r1, [r0]
   15818:	b	15850 <__assert_fail@plt+0x4750>
   1581c:	cmp	r0, #0
   15820:	mov	r4, r0
   15824:	mvnne	r4, #0
   15828:	cmp	r5, #0
   1582c:	bne	15850 <__assert_fail@plt+0x4750>
   15830:	cmp	r0, #0
   15834:	beq	15850 <__assert_fail@plt+0x4750>
   15838:	bl	1101c <__errno_location@plt>
   1583c:	ldr	r0, [r0]
   15840:	subs	r4, r0, #9
   15844:	mvnne	r4, #0
   15848:	mov	r0, r4
   1584c:	pop	{r4, r5, r6, sl, fp, pc}
   15850:	mov	r0, r4
   15854:	pop	{r4, r5, r6, sl, fp, pc}
   15858:	push	{fp, lr}
   1585c:	mov	fp, sp
   15860:	mov	r0, #14
   15864:	bl	110ac <nl_langinfo@plt>
   15868:	movw	r1, #25000	; 0x61a8
   1586c:	movt	r1, #1
   15870:	cmp	r0, #0
   15874:	movne	r1, r0
   15878:	ldrb	r2, [r1]
   1587c:	movw	r0, #26773	; 0x6895
   15880:	movt	r0, #1
   15884:	cmp	r2, #0
   15888:	movne	r0, r1
   1588c:	pop	{fp, pc}
   15890:	push	{r4, r5, r6, r7, fp, lr}
   15894:	add	fp, sp, #16
   15898:	sub	sp, sp, #8
   1589c:	mov	r7, r2
   158a0:	mov	r4, r1
   158a4:	add	r5, sp, #4
   158a8:	cmp	r0, #0
   158ac:	movne	r5, r0
   158b0:	mov	r0, r5
   158b4:	bl	10f98 <mbrtowc@plt>
   158b8:	mov	r6, r0
   158bc:	cmp	r7, #0
   158c0:	beq	158e4 <__assert_fail@plt+0x47e4>
   158c4:	cmn	r6, #2
   158c8:	bcc	158e4 <__assert_fail@plt+0x47e4>
   158cc:	mov	r0, #0
   158d0:	bl	158f0 <__assert_fail@plt+0x47f0>
   158d4:	cmp	r0, #0
   158d8:	ldrbeq	r0, [r4]
   158dc:	streq	r0, [r5]
   158e0:	moveq	r6, #1
   158e4:	mov	r0, r6
   158e8:	sub	sp, fp, #16
   158ec:	pop	{r4, r5, r6, r7, fp, pc}
   158f0:	push	{r4, sl, fp, lr}
   158f4:	add	fp, sp, #8
   158f8:	sub	sp, sp, #264	; 0x108
   158fc:	add	r1, sp, #7
   15900:	movw	r2, #257	; 0x101
   15904:	bl	15954 <__assert_fail@plt+0x4854>
   15908:	mov	r4, #0
   1590c:	cmp	r0, #0
   15910:	bne	15948 <__assert_fail@plt+0x4848>
   15914:	add	r0, sp, #7
   15918:	movw	r1, #26779	; 0x689b
   1591c:	movt	r1, #1
   15920:	bl	10ea8 <strcmp@plt>
   15924:	cmp	r0, #0
   15928:	beq	15948 <__assert_fail@plt+0x4848>
   1592c:	add	r0, sp, #7
   15930:	movw	r1, #26781	; 0x689d
   15934:	movt	r1, #1
   15938:	bl	10ea8 <strcmp@plt>
   1593c:	mov	r4, r0
   15940:	cmp	r0, #0
   15944:	movwne	r4, #1
   15948:	mov	r0, r4
   1594c:	sub	sp, fp, #8
   15950:	pop	{r4, sl, fp, pc}
   15954:	b	15958 <__assert_fail@plt+0x4858>
   15958:	push	{r4, r5, r6, r7, fp, lr}
   1595c:	add	fp, sp, #16
   15960:	mov	r6, r2
   15964:	mov	r4, r1
   15968:	bl	159f4 <__assert_fail@plt+0x48f4>
   1596c:	cmp	r0, #0
   15970:	beq	159a0 <__assert_fail@plt+0x48a0>
   15974:	mov	r7, r0
   15978:	bl	11004 <strlen@plt>
   1597c:	cmp	r0, r6
   15980:	bcs	159c0 <__assert_fail@plt+0x48c0>
   15984:	add	r2, r0, #1
   15988:	mov	r0, r4
   1598c:	mov	r1, r7
   15990:	bl	10ef0 <memcpy@plt>
   15994:	mov	r5, #0
   15998:	mov	r0, r5
   1599c:	pop	{r4, r5, r6, r7, fp, pc}
   159a0:	mov	r5, #22
   159a4:	cmp	r6, #0
   159a8:	movne	r0, #0
   159ac:	strbne	r0, [r4]
   159b0:	movne	r0, r5
   159b4:	popne	{r4, r5, r6, r7, fp, pc}
   159b8:	mov	r0, r5
   159bc:	pop	{r4, r5, r6, r7, fp, pc}
   159c0:	mov	r5, #34	; 0x22
   159c4:	cmp	r6, #0
   159c8:	beq	159e8 <__assert_fail@plt+0x48e8>
   159cc:	sub	r6, r6, #1
   159d0:	mov	r0, r4
   159d4:	mov	r1, r7
   159d8:	mov	r2, r6
   159dc:	bl	10ef0 <memcpy@plt>
   159e0:	mov	r0, #0
   159e4:	strb	r0, [r4, r6]
   159e8:	mov	r0, r5
   159ec:	pop	{r4, r5, r6, r7, fp, pc}
   159f0:	b	159f4 <__assert_fail@plt+0x48f4>
   159f4:	mov	r1, #0
   159f8:	b	11094 <setlocale@plt>
   159fc:	cmp	r3, #0
   15a00:	cmpeq	r2, #0
   15a04:	bne	15a28 <__assert_fail@plt+0x4928>
   15a08:	cmp	r1, #0
   15a0c:	movlt	r1, #-2147483648	; 0x80000000
   15a10:	movlt	r0, #0
   15a14:	blt	15a24 <__assert_fail@plt+0x4924>
   15a18:	cmpeq	r0, #0
   15a1c:	mvnne	r1, #-2147483648	; 0x80000000
   15a20:	mvnne	r0, #0
   15a24:	b	15ad0 <__assert_fail@plt+0x49d0>
   15a28:	sub	sp, sp, #8
   15a2c:	push	{sp, lr}
   15a30:	cmp	r1, #0
   15a34:	blt	15a54 <__assert_fail@plt+0x4954>
   15a38:	cmp	r3, #0
   15a3c:	blt	15a88 <__assert_fail@plt+0x4988>
   15a40:	bl	15ae0 <__assert_fail@plt+0x49e0>
   15a44:	ldr	lr, [sp, #4]
   15a48:	add	sp, sp, #8
   15a4c:	pop	{r2, r3}
   15a50:	bx	lr
   15a54:	rsbs	r0, r0, #0
   15a58:	sbc	r1, r1, r1, lsl #1
   15a5c:	cmp	r3, #0
   15a60:	blt	15aac <__assert_fail@plt+0x49ac>
   15a64:	bl	15ae0 <__assert_fail@plt+0x49e0>
   15a68:	ldr	lr, [sp, #4]
   15a6c:	add	sp, sp, #8
   15a70:	pop	{r2, r3}
   15a74:	rsbs	r0, r0, #0
   15a78:	sbc	r1, r1, r1, lsl #1
   15a7c:	rsbs	r2, r2, #0
   15a80:	sbc	r3, r3, r3, lsl #1
   15a84:	bx	lr
   15a88:	rsbs	r2, r2, #0
   15a8c:	sbc	r3, r3, r3, lsl #1
   15a90:	bl	15ae0 <__assert_fail@plt+0x49e0>
   15a94:	ldr	lr, [sp, #4]
   15a98:	add	sp, sp, #8
   15a9c:	pop	{r2, r3}
   15aa0:	rsbs	r0, r0, #0
   15aa4:	sbc	r1, r1, r1, lsl #1
   15aa8:	bx	lr
   15aac:	rsbs	r2, r2, #0
   15ab0:	sbc	r3, r3, r3, lsl #1
   15ab4:	bl	15ae0 <__assert_fail@plt+0x49e0>
   15ab8:	ldr	lr, [sp, #4]
   15abc:	add	sp, sp, #8
   15ac0:	pop	{r2, r3}
   15ac4:	rsbs	r2, r2, #0
   15ac8:	sbc	r3, r3, r3, lsl #1
   15acc:	bx	lr
   15ad0:	push	{r1, lr}
   15ad4:	mov	r0, #8
   15ad8:	bl	10e9c <raise@plt>
   15adc:	pop	{r1, pc}
   15ae0:	cmp	r1, r3
   15ae4:	cmpeq	r0, r2
   15ae8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15aec:	mov	r4, r0
   15af0:	movcc	r0, #0
   15af4:	mov	r5, r1
   15af8:	ldr	lr, [sp, #36]	; 0x24
   15afc:	movcc	r1, r0
   15b00:	bcc	15bfc <__assert_fail@plt+0x4afc>
   15b04:	cmp	r3, #0
   15b08:	clzeq	ip, r2
   15b0c:	clzne	ip, r3
   15b10:	addeq	ip, ip, #32
   15b14:	cmp	r5, #0
   15b18:	clzeq	r1, r4
   15b1c:	addeq	r1, r1, #32
   15b20:	clzne	r1, r5
   15b24:	sub	ip, ip, r1
   15b28:	sub	sl, ip, #32
   15b2c:	lsl	r9, r3, ip
   15b30:	rsb	fp, ip, #32
   15b34:	orr	r9, r9, r2, lsl sl
   15b38:	orr	r9, r9, r2, lsr fp
   15b3c:	lsl	r8, r2, ip
   15b40:	cmp	r5, r9
   15b44:	cmpeq	r4, r8
   15b48:	movcc	r0, #0
   15b4c:	movcc	r1, r0
   15b50:	bcc	15b6c <__assert_fail@plt+0x4a6c>
   15b54:	mov	r0, #1
   15b58:	subs	r4, r4, r8
   15b5c:	lsl	r1, r0, sl
   15b60:	orr	r1, r1, r0, lsr fp
   15b64:	lsl	r0, r0, ip
   15b68:	sbc	r5, r5, r9
   15b6c:	cmp	ip, #0
   15b70:	beq	15bfc <__assert_fail@plt+0x4afc>
   15b74:	lsr	r6, r8, #1
   15b78:	orr	r6, r6, r9, lsl #31
   15b7c:	lsr	r7, r9, #1
   15b80:	mov	r2, ip
   15b84:	b	15ba8 <__assert_fail@plt+0x4aa8>
   15b88:	subs	r3, r4, r6
   15b8c:	sbc	r8, r5, r7
   15b90:	adds	r3, r3, r3
   15b94:	adc	r8, r8, r8
   15b98:	adds	r4, r3, #1
   15b9c:	adc	r5, r8, #0
   15ba0:	subs	r2, r2, #1
   15ba4:	beq	15bc4 <__assert_fail@plt+0x4ac4>
   15ba8:	cmp	r5, r7
   15bac:	cmpeq	r4, r6
   15bb0:	bcs	15b88 <__assert_fail@plt+0x4a88>
   15bb4:	adds	r4, r4, r4
   15bb8:	adc	r5, r5, r5
   15bbc:	subs	r2, r2, #1
   15bc0:	bne	15ba8 <__assert_fail@plt+0x4aa8>
   15bc4:	lsr	r3, r4, ip
   15bc8:	orr	r3, r3, r5, lsl fp
   15bcc:	lsr	r2, r5, ip
   15bd0:	orr	r3, r3, r5, lsr sl
   15bd4:	adds	r0, r0, r4
   15bd8:	mov	r4, r3
   15bdc:	lsl	r3, r2, ip
   15be0:	orr	r3, r3, r4, lsl sl
   15be4:	lsl	ip, r4, ip
   15be8:	orr	r3, r3, r4, lsr fp
   15bec:	adc	r1, r1, r5
   15bf0:	subs	r0, r0, ip
   15bf4:	mov	r5, r2
   15bf8:	sbc	r1, r1, r3
   15bfc:	cmp	lr, #0
   15c00:	strdne	r4, [lr]
   15c04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c08:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15c0c:	mov	r7, r0
   15c10:	ldr	r6, [pc, #72]	; 15c60 <__assert_fail@plt+0x4b60>
   15c14:	ldr	r5, [pc, #72]	; 15c64 <__assert_fail@plt+0x4b64>
   15c18:	add	r6, pc, r6
   15c1c:	add	r5, pc, r5
   15c20:	sub	r6, r6, r5
   15c24:	mov	r8, r1
   15c28:	mov	r9, r2
   15c2c:	bl	10e64 <calloc@plt-0x20>
   15c30:	asrs	r6, r6, #2
   15c34:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15c38:	mov	r4, #0
   15c3c:	add	r4, r4, #1
   15c40:	ldr	r3, [r5], #4
   15c44:	mov	r2, r9
   15c48:	mov	r1, r8
   15c4c:	mov	r0, r7
   15c50:	blx	r3
   15c54:	cmp	r6, r4
   15c58:	bne	15c3c <__assert_fail@plt+0x4b3c>
   15c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15c60:	andeq	r1, r1, ip, ror #5
   15c64:	andeq	r1, r1, r4, ror #5
   15c68:	bx	lr
   15c6c:	ldr	r3, [pc, #12]	; 15c80 <__assert_fail@plt+0x4b80>
   15c70:	mov	r1, #0
   15c74:	add	r3, pc, r3
   15c78:	ldr	r2, [r3]
   15c7c:	b	11028 <__cxa_atexit@plt>
   15c80:	andeq	r1, r1, r0, ror r4

Disassembly of section .fini:

00015c84 <.fini>:
   15c84:	push	{r3, lr}
   15c88:	pop	{r3, pc}
