
../repos/findutils/locate/locate:     file format elf32-littlearm


Disassembly of section .init:

000114d0 <.init>:
   114d0:	push	{r3, lr}
   114d4:	bl	1283c <__assert_fail@plt+0xe9c>
   114d8:	pop	{r3, pc}

Disassembly of section .plt:

000114dc <pthread_mutex_unlock@plt-0x14>:
   114dc:	push	{lr}		; (str lr, [sp, #-4]!)
   114e0:	ldr	lr, [pc, #4]	; 114ec <pthread_mutex_unlock@plt-0x4>
   114e4:	add	lr, pc, lr
   114e8:	ldr	pc, [lr, #8]!
   114ec:	andeq	sp, r2, r4, lsl fp

000114f0 <pthread_mutex_unlock@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #184320	; 0x2d000
   114f8:	ldr	pc, [ip, #2836]!	; 0xb14

000114fc <fdopen@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #184320	; 0x2d000
   11504:	ldr	pc, [ip, #2828]!	; 0xb0c

00011508 <calloc@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #184320	; 0x2d000
   11510:	ldr	pc, [ip, #2820]!	; 0xb04

00011514 <wctype@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #184320	; 0x2d000
   1151c:	ldr	pc, [ip, #2812]!	; 0xafc

00011520 <raise@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #184320	; 0x2d000
   11528:	ldr	pc, [ip, #2804]!	; 0xaf4

0001152c <wcrtomb@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #184320	; 0x2d000
   11534:	ldr	pc, [ip, #2796]!	; 0xaec

00011538 <iswctype@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #184320	; 0x2d000
   11540:	ldr	pc, [ip, #2788]!	; 0xae4

00011544 <strcmp@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #184320	; 0x2d000
   1154c:	ldr	pc, [ip, #2780]!	; 0xadc

00011550 <printf@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #184320	; 0x2d000
   11558:	ldr	pc, [ip, #2772]!	; 0xad4

0001155c <pthread_mutex_destroy@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #184320	; 0x2d000
   11564:	ldr	pc, [ip, #2764]!	; 0xacc

00011568 <fflush@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #184320	; 0x2d000
   11570:	ldr	pc, [ip, #2756]!	; 0xac4

00011574 <wcwidth@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #184320	; 0x2d000
   1157c:	ldr	pc, [ip, #2748]!	; 0xabc

00011580 <getuid@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #184320	; 0x2d000
   11588:	ldr	pc, [ip, #2740]!	; 0xab4

0001158c <memmove@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #184320	; 0x2d000
   11594:	ldr	pc, [ip, #2732]!	; 0xaac

00011598 <free@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #184320	; 0x2d000
   115a0:	ldr	pc, [ip, #2724]!	; 0xaa4

000115a4 <pthread_mutex_lock@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #184320	; 0x2d000
   115ac:	ldr	pc, [ip, #2716]!	; 0xa9c

000115b0 <ferror@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #184320	; 0x2d000
   115b8:	ldr	pc, [ip, #2708]!	; 0xa94

000115bc <strndup@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #184320	; 0x2d000
   115c4:	ldr	pc, [ip, #2700]!	; 0xa8c

000115c8 <_exit@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #184320	; 0x2d000
   115d0:	ldr	pc, [ip, #2692]!	; 0xa84

000115d4 <memcpy@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #184320	; 0x2d000
   115dc:	ldr	pc, [ip, #2684]!	; 0xa7c

000115e0 <pthread_mutex_init@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #184320	; 0x2d000
   115e8:	ldr	pc, [ip, #2676]!	; 0xa74

000115ec <__strtoull_internal@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #184320	; 0x2d000
   115f4:	ldr	pc, [ip, #2668]!	; 0xa6c

000115f8 <towlower@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #184320	; 0x2d000
   11600:	ldr	pc, [ip, #2660]!	; 0xa64

00011604 <mbsinit@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #184320	; 0x2d000
   1160c:	ldr	pc, [ip, #2652]!	; 0xa5c

00011610 <time@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #184320	; 0x2d000
   11618:	ldr	pc, [ip, #2644]!	; 0xa54

0001161c <memcmp@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #184320	; 0x2d000
   11624:	ldr	pc, [ip, #2636]!	; 0xa4c

00011628 <dcgettext@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #184320	; 0x2d000
   11630:	ldr	pc, [ip, #2628]!	; 0xa44

00011634 <realloc@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #184320	; 0x2d000
   1163c:	ldr	pc, [ip, #2620]!	; 0xa3c

00011640 <textdomain@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #184320	; 0x2d000
   11648:	ldr	pc, [ip, #2612]!	; 0xa34

0001164c <iswcntrl@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #184320	; 0x2d000
   11654:	ldr	pc, [ip, #2604]!	; 0xa2c

00011658 <geteuid@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #184320	; 0x2d000
   11660:	ldr	pc, [ip, #2596]!	; 0xa24

00011664 <iswprint@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #184320	; 0x2d000
   1166c:	ldr	pc, [ip, #2588]!	; 0xa1c

00011670 <setgroups@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #184320	; 0x2d000
   11678:	ldr	pc, [ip, #2580]!	; 0xa14

0001167c <__fxstat64@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #184320	; 0x2d000
   11684:	ldr	pc, [ip, #2572]!	; 0xa0c

00011688 <fwrite@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #184320	; 0x2d000
   11690:	ldr	pc, [ip, #2564]!	; 0xa04

00011694 <lseek64@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #184320	; 0x2d000
   1169c:	ldr	pc, [ip, #2556]!	; 0x9fc

000116a0 <__ctype_get_mb_cur_max@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #184320	; 0x2d000
   116a8:	ldr	pc, [ip, #2548]!	; 0x9f4

000116ac <fread@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #184320	; 0x2d000
   116b4:	ldr	pc, [ip, #2540]!	; 0x9ec

000116b8 <__fpending@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #184320	; 0x2d000
   116c0:	ldr	pc, [ip, #2532]!	; 0x9e4

000116c4 <mbrtowc@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #184320	; 0x2d000
   116cc:	ldr	pc, [ip, #2524]!	; 0x9dc

000116d0 <error@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #184320	; 0x2d000
   116d8:	ldr	pc, [ip, #2516]!	; 0x9d4

000116dc <fnmatch@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #184320	; 0x2d000
   116e4:	ldr	pc, [ip, #2508]!	; 0x9cc

000116e8 <open64@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #184320	; 0x2d000
   116f0:	ldr	pc, [ip, #2500]!	; 0x9c4

000116f4 <getenv@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #184320	; 0x2d000
   116fc:	ldr	pc, [ip, #2492]!	; 0x9bc

00011700 <setgid@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #184320	; 0x2d000
   11708:	ldr	pc, [ip, #2484]!	; 0x9b4

0001170c <malloc@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #184320	; 0x2d000
   11714:	ldr	pc, [ip, #2476]!	; 0x9ac

00011718 <__libc_start_main@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #184320	; 0x2d000
   11720:	ldr	pc, [ip, #2468]!	; 0x9a4

00011724 <strftime@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #184320	; 0x2d000
   1172c:	ldr	pc, [ip, #2460]!	; 0x99c

00011730 <__freading@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #184320	; 0x2d000
   11738:	ldr	pc, [ip, #2452]!	; 0x994

0001173c <localtime@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #184320	; 0x2d000
   11744:	ldr	pc, [ip, #2444]!	; 0x98c

00011748 <__ctype_tolower_loc@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #184320	; 0x2d000
   11750:	ldr	pc, [ip, #2436]!	; 0x984

00011754 <__ctype_toupper_loc@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #184320	; 0x2d000
   1175c:	ldr	pc, [ip, #2428]!	; 0x97c

00011760 <__gmon_start__@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #184320	; 0x2d000
   11768:	ldr	pc, [ip, #2420]!	; 0x974

0001176c <getopt_long@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #184320	; 0x2d000
   11774:	ldr	pc, [ip, #2412]!	; 0x96c

00011778 <__ctype_b_loc@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #184320	; 0x2d000
   11780:	ldr	pc, [ip, #2404]!	; 0x964

00011784 <exit@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #184320	; 0x2d000
   1178c:	ldr	pc, [ip, #2396]!	; 0x95c

00011790 <feof@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #184320	; 0x2d000
   11798:	ldr	pc, [ip, #2388]!	; 0x954

0001179c <strtoul@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #184320	; 0x2d000
   117a4:	ldr	pc, [ip, #2380]!	; 0x94c

000117a8 <strlen@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #184320	; 0x2d000
   117b0:	ldr	pc, [ip, #2372]!	; 0x944

000117b4 <strchr@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #184320	; 0x2d000
   117bc:	ldr	pc, [ip, #2364]!	; 0x93c

000117c0 <fprintf@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #184320	; 0x2d000
   117c8:	ldr	pc, [ip, #2356]!	; 0x934

000117cc <ungetc@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #184320	; 0x2d000
   117d4:	ldr	pc, [ip, #2348]!	; 0x92c

000117d8 <__errno_location@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #184320	; 0x2d000
   117e0:	ldr	pc, [ip, #2340]!	; 0x924

000117e4 <iswalnum@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #184320	; 0x2d000
   117ec:	ldr	pc, [ip, #2332]!	; 0x91c

000117f0 <strncasecmp@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #184320	; 0x2d000
   117f8:	ldr	pc, [ip, #2324]!	; 0x914

000117fc <__cxa_atexit@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #184320	; 0x2d000
   11804:	ldr	pc, [ip, #2316]!	; 0x90c

00011808 <getgid@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #184320	; 0x2d000
   11810:	ldr	pc, [ip, #2308]!	; 0x904

00011814 <memset@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #184320	; 0x2d000
   1181c:	ldr	pc, [ip, #2300]!	; 0x8fc

00011820 <putchar@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #184320	; 0x2d000
   11828:	ldr	pc, [ip, #2292]!	; 0x8f4

0001182c <btowc@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #184320	; 0x2d000
   11834:	ldr	pc, [ip, #2284]!	; 0x8ec

00011838 <fgetc@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #184320	; 0x2d000
   11840:	ldr	pc, [ip, #2276]!	; 0x8e4

00011844 <fileno@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #184320	; 0x2d000
   1184c:	ldr	pc, [ip, #2268]!	; 0x8dc

00011850 <difftime@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #184320	; 0x2d000
   11858:	ldr	pc, [ip, #2260]!	; 0x8d4

0001185c <memchr@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #184320	; 0x2d000
   11864:	ldr	pc, [ip, #2252]!	; 0x8cc

00011868 <fclose@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #184320	; 0x2d000
   11870:	ldr	pc, [ip, #2244]!	; 0x8c4

00011874 <strnlen@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #184320	; 0x2d000
   1187c:	ldr	pc, [ip, #2236]!	; 0x8bc

00011880 <fseeko64@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #184320	; 0x2d000
   11888:	ldr	pc, [ip, #2228]!	; 0x8b4

0001188c <fcntl64@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #184320	; 0x2d000
   11894:	ldr	pc, [ip, #2220]!	; 0x8ac

00011898 <setlocale@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #184320	; 0x2d000
   118a0:	ldr	pc, [ip, #2212]!	; 0x8a4

000118a4 <strrchr@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #184320	; 0x2d000
   118ac:	ldr	pc, [ip, #2204]!	; 0x89c

000118b0 <nl_langinfo@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #184320	; 0x2d000
   118b8:	ldr	pc, [ip, #2196]!	; 0x894

000118bc <fputc@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #184320	; 0x2d000
   118c4:	ldr	pc, [ip, #2188]!	; 0x88c

000118c8 <setuid@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #184320	; 0x2d000
   118d0:	ldr	pc, [ip, #2180]!	; 0x884

000118d4 <localeconv@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #184320	; 0x2d000
   118dc:	ldr	pc, [ip, #2172]!	; 0x87c

000118e0 <clearerr@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #184320	; 0x2d000
   118e8:	ldr	pc, [ip, #2164]!	; 0x874

000118ec <sprintf@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #184320	; 0x2d000
   118f4:	ldr	pc, [ip, #2156]!	; 0x86c

000118f8 <putc@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #184320	; 0x2d000
   11900:	ldr	pc, [ip, #2148]!	; 0x864

00011904 <strpbrk@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #184320	; 0x2d000
   1190c:	ldr	pc, [ip, #2140]!	; 0x85c

00011910 <bindtextdomain@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #184320	; 0x2d000
   11918:	ldr	pc, [ip, #2132]!	; 0x854

0001191c <getdelim@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #184320	; 0x2d000
   11924:	ldr	pc, [ip, #2124]!	; 0x84c

00011928 <__xstat64@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #184320	; 0x2d000
   11930:	ldr	pc, [ip, #2116]!	; 0x844

00011934 <isatty@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #184320	; 0x2d000
   1193c:	ldr	pc, [ip, #2108]!	; 0x83c

00011940 <towupper@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #184320	; 0x2d000
   11948:	ldr	pc, [ip, #2100]!	; 0x834

0001194c <fputs@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #184320	; 0x2d000
   11954:	ldr	pc, [ip, #2092]!	; 0x82c

00011958 <strncmp@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #184320	; 0x2d000
   11960:	ldr	pc, [ip, #2084]!	; 0x824

00011964 <abort@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #184320	; 0x2d000
   1196c:	ldr	pc, [ip, #2076]!	; 0x81c

00011970 <getc@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #184320	; 0x2d000
   11978:	ldr	pc, [ip, #2068]!	; 0x814

0001197c <close@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #184320	; 0x2d000
   11984:	ldr	pc, [ip, #2060]!	; 0x80c

00011988 <__lxstat64@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #184320	; 0x2d000
   11990:	ldr	pc, [ip, #2052]!	; 0x804

00011994 <dcngettext@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #184320	; 0x2d000
   1199c:	ldr	pc, [ip, #2044]!	; 0x7fc

000119a0 <__assert_fail@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #184320	; 0x2d000
   119a8:	ldr	pc, [ip, #2036]!	; 0x7f4

Disassembly of section .text:

000119b0 <.text>:
   119b0:	movw	r3, #52312	; 0xcc58
   119b4:	movt	r3, #2
   119b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   119bc:	ldr	r4, [r3, #192]	; 0xc0
   119c0:	strd	r6, [sp, #8]
   119c4:	ldrd	r2, [r3, #196]	; 0xc4
   119c8:	strd	r8, [sp, #16]
   119cc:	strd	sl, [sp, #24]
   119d0:	str	lr, [sp, #32]
   119d4:	vpush	{d8-d9}
   119d8:	sub	sp, sp, #260	; 0x104
   119dc:	str	r1, [sp, #48]	; 0x30
   119e0:	str	r4, [sp, #152]	; 0x98
   119e4:	cmp	r4, #0
   119e8:	addne	r5, sp, #156	; 0x9c
   119ec:	str	r0, [sp, #56]	; 0x38
   119f0:	strd	r2, [sp, #156]	; 0x9c
   119f4:	bne	11a08 <__assert_fail@plt+0x68>
   119f8:	b	11a2c <__assert_fail@plt+0x8c>
   119fc:	ldr	r4, [r5], #4
   11a00:	cmp	r4, #0
   11a04:	beq	11a2c <__assert_fail@plt+0x8c>
   11a08:	mov	r0, r4
   11a0c:	bl	129bc <__assert_fail@plt+0x101c>
   11a10:	cmp	r0, #0
   11a14:	blt	119fc <__assert_fail@plt+0x5c>
   11a18:	movw	r3, #61992	; 0xf228
   11a1c:	movt	r3, #3
   11a20:	str	r0, [sp, #72]	; 0x48
   11a24:	str	r4, [r3, #108]	; 0x6c
   11a28:	b	11a34 <__assert_fail@plt+0x94>
   11a2c:	mvn	r3, #0
   11a30:	str	r3, [sp, #72]	; 0x48
   11a34:	bl	11658 <geteuid@plt>
   11a38:	mov	r4, r0
   11a3c:	bl	11580 <getuid@plt>
   11a40:	mov	r6, r0
   11a44:	bl	11808 <getgid@plt>
   11a48:	cmp	r4, #0
   11a4c:	mov	r5, r0
   11a50:	beq	1210c <__assert_fail@plt+0x76c>
   11a54:	sub	r4, r4, r6
   11a58:	cmp	r6, #0
   11a5c:	clz	r4, r4
   11a60:	lsr	r4, r4, #5
   11a64:	moveq	r4, #1
   11a68:	bl	117d8 <__errno_location@plt>
   11a6c:	cmp	r4, #0
   11a70:	str	r0, [sp, #52]	; 0x34
   11a74:	beq	1248c <__assert_fail@plt+0xaec>
   11a78:	ldr	r3, [sp, #52]	; 0x34
   11a7c:	mov	r4, #0
   11a80:	mov	r0, r5
   11a84:	str	r4, [r3]
   11a88:	bl	11700 <setgid@plt>
   11a8c:	cmp	r0, r4
   11a90:	bne	12750 <__assert_fail@plt+0xdb0>
   11a94:	ldr	r3, [sp, #48]	; 0x30
   11a98:	ldr	r0, [r3]
   11a9c:	cmp	r0, #0
   11aa0:	beq	1216c <__assert_fail@plt+0x7cc>
   11aa4:	bl	18c20 <__assert_fail@plt+0x7280>
   11aa8:	movw	r1, #54428	; 0xd49c
   11aac:	movt	r1, #2
   11ab0:	mov	r0, #6
   11ab4:	movw	fp, #61992	; 0xf228
   11ab8:	movt	fp, #3
   11abc:	bl	11898 <setlocale@plt>
   11ac0:	movw	r1, #55168	; 0xd780
   11ac4:	movt	r1, #2
   11ac8:	movw	r0, #56012	; 0xdacc
   11acc:	movt	r0, #2
   11ad0:	bl	11910 <bindtextdomain@plt>
   11ad4:	movw	r0, #56012	; 0xdacc
   11ad8:	movt	r0, #2
   11adc:	bl	11640 <textdomain@plt>
   11ae0:	mov	r0, #0
   11ae4:	bl	1a838 <__assert_fail@plt+0x8e98>
   11ae8:	str	r0, [fp, #4]
   11aec:	movw	r0, #19220	; 0x4b14
   11af0:	movt	r0, #1
   11af4:	bl	2cc34 <__assert_fail@plt+0x1b294>
   11af8:	cmp	r0, #0
   11afc:	bne	12724 <__assert_fail@plt+0xd84>
   11b00:	movw	r0, #10760	; 0x2a08
   11b04:	movt	r0, #1
   11b08:	bl	2cc34 <__assert_fail@plt+0x1b294>
   11b0c:	subs	sl, r0, #0
   11b10:	bne	12724 <__assert_fail@plt+0xd84>
   11b14:	mov	r2, #0
   11b18:	mov	r3, #0
   11b1c:	ldr	r6, [pc, #2800]	; 12614 <__assert_fail@plt+0xc74>
   11b20:	mov	r1, #1
   11b24:	movw	r0, #55228	; 0xd7bc
   11b28:	movt	r0, #2
   11b2c:	str	sl, [sp, #68]	; 0x44
   11b30:	movw	r5, #55240	; 0xd7c8
   11b34:	movt	r5, #2
   11b38:	strb	r1, [fp, #80]	; 0x50
   11b3c:	movw	r4, #61984	; 0xf220
   11b40:	movt	r4, #3
   11b44:	strd	r2, [fp, #88]	; 0x58
   11b48:	str	sl, [sp, #88]	; 0x58
   11b4c:	str	sl, [sp, #92]	; 0x5c
   11b50:	strd	r2, [fp, #96]	; 0x60
   11b54:	str	sl, [sp, #96]	; 0x60
   11b58:	bl	116f4 <getenv@plt>
   11b5c:	mov	r9, r0
   11b60:	str	sl, [fp, #20]
   11b64:	str	sl, [sp, #60]	; 0x3c
   11b68:	str	sl, [sp, #64]	; 0x40
   11b6c:	str	sl, [sp, #80]	; 0x50
   11b70:	str	sl, [sp, #84]	; 0x54
   11b74:	str	sl, [sp, #100]	; 0x64
   11b78:	add	r2, sp, #144	; 0x90
   11b7c:	mvn	ip, #0
   11b80:	ldr	r1, [sp, #48]	; 0x30
   11b84:	mov	r3, r6
   11b88:	str	r2, [sp]
   11b8c:	mov	r2, r5
   11b90:	ldr	r0, [sp, #56]	; 0x38
   11b94:	str	ip, [sp, #144]	; 0x90
   11b98:	bl	1176c <getopt_long@plt>
   11b9c:	cmn	r0, #1
   11ba0:	beq	12178 <__assert_fail@plt+0x7d8>
   11ba4:	sub	r0, r0, #48	; 0x30
   11ba8:	cmp	r0, #209	; 0xd1
   11bac:	ldrls	pc, [pc, r0, lsl #2]
   11bb0:	b	126dc <__assert_fail@plt+0xd3c>
   11bb4:	muleq	r1, r0, r0
   11bb8:	ldrdeq	r2, [r1], -ip
   11bbc:	ldrdeq	r2, [r1], -ip
   11bc0:	ldrdeq	r2, [r1], -ip
   11bc4:	ldrdeq	r2, [r1], -ip
   11bc8:	ldrdeq	r2, [r1], -ip
   11bcc:	ldrdeq	r2, [r1], -ip
   11bd0:	ldrdeq	r2, [r1], -ip
   11bd4:	ldrdeq	r2, [r1], -ip
   11bd8:	ldrdeq	r2, [r1], -ip
   11bdc:	ldrdeq	r2, [r1], -ip
   11be0:	ldrdeq	r2, [r1], -ip
   11be4:	ldrdeq	r2, [r1], -ip
   11be8:	ldrdeq	r2, [r1], -ip
   11bec:	ldrdeq	r2, [r1], -ip
   11bf0:	ldrdeq	r2, [r1], -ip
   11bf4:	ldrdeq	r2, [r1], -ip
   11bf8:	strheq	r2, [r1], -r4
   11bfc:	ldrdeq	r2, [r1], -ip
   11c00:	ldrdeq	r2, [r1], -ip
   11c04:	ldrdeq	r2, [r1], -ip
   11c08:	andeq	r2, r1, r4, lsl #1
   11c0c:	ldrdeq	r2, [r1], -ip
   11c10:	ldrdeq	r2, [r1], -ip
   11c14:	andeq	r2, r1, r0, ror r0
   11c18:	ldrdeq	r2, [r1], -ip
   11c1c:	ldrdeq	r2, [r1], -ip
   11c20:	ldrdeq	r2, [r1], -ip
   11c24:	andeq	r2, r1, ip, asr r0
   11c28:	ldrdeq	r2, [r1], -ip
   11c2c:	ldrdeq	r2, [r1], -ip
   11c30:	ldrdeq	r2, [r1], -ip
   11c34:	andeq	r2, r1, r0, ror r0
   11c38:	ldrdeq	r2, [r1], -ip
   11c3c:	ldrdeq	r2, [r1], -ip
   11c40:	andeq	r2, r1, r0, asr r0
   11c44:	ldrdeq	r2, [r1], -ip
   11c48:	ldrdeq	r2, [r1], -ip
   11c4c:	ldrdeq	r2, [r1], -ip
   11c50:	ldrdeq	r2, [r1], -ip
   11c54:	ldrdeq	r2, [r1], -ip
   11c58:	ldrdeq	r2, [r1], -ip
   11c5c:	ldrdeq	r2, [r1], -ip
   11c60:	ldrdeq	r2, [r1], -ip
   11c64:	ldrdeq	r2, [r1], -ip
   11c68:	ldrdeq	r2, [r1], -ip
   11c6c:	ldrdeq	r2, [r1], -ip
   11c70:	ldrdeq	r2, [r1], -ip
   11c74:	ldrdeq	r2, [r1], -ip
   11c78:	ldrdeq	r2, [r1], -ip
   11c7c:	andeq	r2, r1, r8, lsr #1
   11c80:	andeq	r2, r1, r4, asr #32
   11c84:	andeq	r2, r1, ip, lsl r0
   11c88:	andeq	r2, r1, r0, lsl r0
   11c8c:	ldrdeq	r2, [r1], -ip
   11c90:	ldrdeq	r2, [r1], -ip
   11c94:			; <UNDEFINED> instruction: 0x000126b0
   11c98:	andeq	r2, r1, r4
   11c9c:	ldrdeq	r2, [r1], -ip
   11ca0:	ldrdeq	r2, [r1], -ip
   11ca4:	andeq	r1, r1, ip, asr #31
   11ca8:	andeq	r1, r1, r8, ror fp
   11cac:	ldrdeq	r2, [r1], -ip
   11cb0:	ldrdeq	r2, [r1], -ip
   11cb4:	andeq	r1, r1, r0, asr #31
   11cb8:	ldrdeq	r2, [r1], -ip
   11cbc:			; <UNDEFINED> instruction: 0x00011fb4
   11cc0:	andeq	r1, r1, r8, ror fp
   11cc4:	ldrdeq	r2, [r1], -ip
   11cc8:	ldrdeq	r2, [r1], -ip
   11ccc:	andeq	r1, r1, r4, lsl #31
   11cd0:	andeq	r1, r1, r8, ror pc
   11cd4:	ldrdeq	r2, [r1], -ip
   11cd8:	ldrdeq	r2, [r1], -ip
   11cdc:	ldrdeq	r2, [r1], -ip
   11ce0:	ldrdeq	r2, [r1], -ip
   11ce4:	ldrdeq	r2, [r1], -ip
   11ce8:	ldrdeq	r2, [r1], -ip
   11cec:	ldrdeq	r2, [r1], -ip
   11cf0:	ldrdeq	r2, [r1], -ip
   11cf4:	ldrdeq	r2, [r1], -ip
   11cf8:	ldrdeq	r2, [r1], -ip
   11cfc:	ldrdeq	r2, [r1], -ip
   11d00:	ldrdeq	r2, [r1], -ip
   11d04:	ldrdeq	r2, [r1], -ip
   11d08:	ldrdeq	r2, [r1], -ip
   11d0c:	ldrdeq	r2, [r1], -ip
   11d10:	ldrdeq	r2, [r1], -ip
   11d14:	ldrdeq	r2, [r1], -ip
   11d18:	ldrdeq	r2, [r1], -ip
   11d1c:	ldrdeq	r2, [r1], -ip
   11d20:	ldrdeq	r2, [r1], -ip
   11d24:	ldrdeq	r2, [r1], -ip
   11d28:	ldrdeq	r2, [r1], -ip
   11d2c:	ldrdeq	r2, [r1], -ip
   11d30:	ldrdeq	r2, [r1], -ip
   11d34:	ldrdeq	r2, [r1], -ip
   11d38:	ldrdeq	r2, [r1], -ip
   11d3c:	ldrdeq	r2, [r1], -ip
   11d40:	ldrdeq	r2, [r1], -ip
   11d44:	ldrdeq	r2, [r1], -ip
   11d48:	ldrdeq	r2, [r1], -ip
   11d4c:	ldrdeq	r2, [r1], -ip
   11d50:	ldrdeq	r2, [r1], -ip
   11d54:	ldrdeq	r2, [r1], -ip
   11d58:	ldrdeq	r2, [r1], -ip
   11d5c:	ldrdeq	r2, [r1], -ip
   11d60:	ldrdeq	r2, [r1], -ip
   11d64:	ldrdeq	r2, [r1], -ip
   11d68:	ldrdeq	r2, [r1], -ip
   11d6c:	ldrdeq	r2, [r1], -ip
   11d70:	ldrdeq	r2, [r1], -ip
   11d74:	ldrdeq	r2, [r1], -ip
   11d78:	ldrdeq	r2, [r1], -ip
   11d7c:	ldrdeq	r2, [r1], -ip
   11d80:	ldrdeq	r2, [r1], -ip
   11d84:	ldrdeq	r2, [r1], -ip
   11d88:	ldrdeq	r2, [r1], -ip
   11d8c:	ldrdeq	r2, [r1], -ip
   11d90:	ldrdeq	r2, [r1], -ip
   11d94:	ldrdeq	r2, [r1], -ip
   11d98:	ldrdeq	r2, [r1], -ip
   11d9c:	ldrdeq	r2, [r1], -ip
   11da0:	ldrdeq	r2, [r1], -ip
   11da4:	ldrdeq	r2, [r1], -ip
   11da8:	ldrdeq	r2, [r1], -ip
   11dac:	ldrdeq	r2, [r1], -ip
   11db0:	ldrdeq	r2, [r1], -ip
   11db4:	ldrdeq	r2, [r1], -ip
   11db8:	ldrdeq	r2, [r1], -ip
   11dbc:	ldrdeq	r2, [r1], -ip
   11dc0:	ldrdeq	r2, [r1], -ip
   11dc4:	ldrdeq	r2, [r1], -ip
   11dc8:	ldrdeq	r2, [r1], -ip
   11dcc:	ldrdeq	r2, [r1], -ip
   11dd0:	ldrdeq	r2, [r1], -ip
   11dd4:	ldrdeq	r2, [r1], -ip
   11dd8:	ldrdeq	r2, [r1], -ip
   11ddc:	ldrdeq	r2, [r1], -ip
   11de0:	ldrdeq	r2, [r1], -ip
   11de4:	ldrdeq	r2, [r1], -ip
   11de8:	ldrdeq	r2, [r1], -ip
   11dec:	ldrdeq	r2, [r1], -ip
   11df0:	ldrdeq	r2, [r1], -ip
   11df4:	ldrdeq	r2, [r1], -ip
   11df8:	ldrdeq	r2, [r1], -ip
   11dfc:	ldrdeq	r2, [r1], -ip
   11e00:	ldrdeq	r2, [r1], -ip
   11e04:	ldrdeq	r2, [r1], -ip
   11e08:	ldrdeq	r2, [r1], -ip
   11e0c:	ldrdeq	r2, [r1], -ip
   11e10:	ldrdeq	r2, [r1], -ip
   11e14:	ldrdeq	r2, [r1], -ip
   11e18:	ldrdeq	r2, [r1], -ip
   11e1c:	ldrdeq	r2, [r1], -ip
   11e20:	ldrdeq	r2, [r1], -ip
   11e24:	ldrdeq	r2, [r1], -ip
   11e28:	ldrdeq	r2, [r1], -ip
   11e2c:	ldrdeq	r2, [r1], -ip
   11e30:	ldrdeq	r2, [r1], -ip
   11e34:	ldrdeq	r2, [r1], -ip
   11e38:	ldrdeq	r2, [r1], -ip
   11e3c:	ldrdeq	r2, [r1], -ip
   11e40:	ldrdeq	r2, [r1], -ip
   11e44:	ldrdeq	r2, [r1], -ip
   11e48:	ldrdeq	r2, [r1], -ip
   11e4c:	ldrdeq	r2, [r1], -ip
   11e50:	ldrdeq	r2, [r1], -ip
   11e54:	ldrdeq	r2, [r1], -ip
   11e58:	ldrdeq	r2, [r1], -ip
   11e5c:	ldrdeq	r2, [r1], -ip
   11e60:	ldrdeq	r2, [r1], -ip
   11e64:	ldrdeq	r2, [r1], -ip
   11e68:	ldrdeq	r2, [r1], -ip
   11e6c:	ldrdeq	r2, [r1], -ip
   11e70:	ldrdeq	r2, [r1], -ip
   11e74:	ldrdeq	r2, [r1], -ip
   11e78:	ldrdeq	r2, [r1], -ip
   11e7c:	ldrdeq	r2, [r1], -ip
   11e80:	ldrdeq	r2, [r1], -ip
   11e84:	ldrdeq	r2, [r1], -ip
   11e88:	ldrdeq	r2, [r1], -ip
   11e8c:	ldrdeq	r2, [r1], -ip
   11e90:	ldrdeq	r2, [r1], -ip
   11e94:	ldrdeq	r2, [r1], -ip
   11e98:	ldrdeq	r2, [r1], -ip
   11e9c:	ldrdeq	r2, [r1], -ip
   11ea0:	ldrdeq	r2, [r1], -ip
   11ea4:	ldrdeq	r2, [r1], -ip
   11ea8:	ldrdeq	r2, [r1], -ip
   11eac:	ldrdeq	r2, [r1], -ip
   11eb0:	ldrdeq	r2, [r1], -ip
   11eb4:	ldrdeq	r2, [r1], -ip
   11eb8:	ldrdeq	r2, [r1], -ip
   11ebc:	ldrdeq	r2, [r1], -ip
   11ec0:	ldrdeq	r2, [r1], -ip
   11ec4:	ldrdeq	r2, [r1], -ip
   11ec8:	ldrdeq	r2, [r1], -ip
   11ecc:	ldrdeq	r2, [r1], -ip
   11ed0:	ldrdeq	r2, [r1], -ip
   11ed4:	ldrdeq	r2, [r1], -ip
   11ed8:	ldrdeq	r2, [r1], -ip
   11edc:	ldrdeq	r2, [r1], -ip
   11ee0:	ldrdeq	r2, [r1], -ip
   11ee4:	ldrdeq	r2, [r1], -ip
   11ee8:	ldrdeq	r2, [r1], -ip
   11eec:	ldrdeq	r2, [r1], -ip
   11ef0:	ldrdeq	r2, [r1], -ip
   11ef4:	andeq	r1, r1, r8, ror #30
   11ef8:	strdeq	r1, [r1], -ip
   11efc:	ldr	r8, [r4]
   11f00:	ldrb	r7, [r8]
   11f04:	cmp	r7, #0
   11f08:	beq	1276c <__assert_fail@plt+0xdcc>
   11f0c:	ldr	ip, [sp, #52]	; 0x34
   11f10:	mov	r3, #0
   11f14:	mov	r2, #10
   11f18:	add	r1, sp, #152	; 0x98
   11f1c:	mov	r0, r8
   11f20:	str	r3, [ip]
   11f24:	bl	1179c <strtoul@plt>
   11f28:	cmn	r0, #1
   11f2c:	beq	120c0 <__assert_fail@plt+0x720>
   11f30:	cmp	r0, #0
   11f34:	bne	11f48 <__assert_fail@plt+0x5a8>
   11f38:	ldr	r3, [sp, #52]	; 0x34
   11f3c:	ldr	r7, [r3]
   11f40:	cmp	r7, #22
   11f44:	beq	120d0 <__assert_fail@plt+0x730>
   11f48:	ldr	r3, [sp, #152]	; 0x98
   11f4c:	ldrb	r3, [r3]
   11f50:	cmp	r3, #0
   11f54:	bne	127a8 <__assert_fail@plt+0xe08>
   11f58:	movw	r3, #61868	; 0xf1ac
   11f5c:	movt	r3, #3
   11f60:	str	r0, [r3, #8]
   11f64:	b	11b78 <__assert_fail@plt+0x1d8>
   11f68:	ldr	r0, [r4]
   11f6c:	bl	146cc <__assert_fail@plt+0x2d2c>
   11f70:	str	r0, [sp, #92]	; 0x5c
   11f74:	b	11b78 <__assert_fail@plt+0x1d8>
   11f78:	mov	r3, #0
   11f7c:	str	r3, [sp, #64]	; 0x40
   11f80:	b	11b78 <__assert_fail@plt+0x1d8>
   11f84:	movw	r0, #55160	; 0xd778
   11f88:	movt	r0, #2
   11f8c:	bl	14308 <__assert_fail@plt+0x2968>
   11f90:	mov	r0, sl
   11f94:	add	sp, sp, #260	; 0x104
   11f98:	vpop	{d8-d9}
   11f9c:	ldrd	r4, [sp]
   11fa0:	ldrd	r6, [sp, #8]
   11fa4:	ldrd	r8, [sp, #16]
   11fa8:	ldrd	sl, [sp, #24]
   11fac:	add	sp, sp, #32
   11fb0:	pop	{pc}		; (ldr pc, [sp], #4)
   11fb4:	mov	r3, #1
   11fb8:	str	r3, [sp, #88]	; 0x58
   11fbc:	b	11b78 <__assert_fail@plt+0x1d8>
   11fc0:	mov	r3, #1
   11fc4:	str	r3, [sp, #80]	; 0x50
   11fc8:	b	11b78 <__assert_fail@plt+0x1d8>
   11fcc:	ldr	ip, [r4]
   11fd0:	mov	r3, #0
   11fd4:	mov	r2, #10
   11fd8:	add	r1, sp, #152	; 0x98
   11fdc:	str	r3, [sp]
   11fe0:	ldr	r3, [pc, #1568]	; 12608 <__assert_fail@plt+0xc68>
   11fe4:	mov	r0, ip
   11fe8:	str	ip, [sp, #152]	; 0x98
   11fec:	bl	1ba58 <__assert_fail@plt+0xa0b8>
   11ff0:	cmp	r0, #0
   11ff4:	bne	12790 <__assert_fail@plt+0xdf0>
   11ff8:	mov	r3, #1
   11ffc:	str	r3, [sp, #60]	; 0x3c
   12000:	b	11b78 <__assert_fail@plt+0x1d8>
   12004:	mov	r3, #1
   12008:	str	r3, [sp, #84]	; 0x54
   1200c:	b	11b78 <__assert_fail@plt+0x1d8>
   12010:	mov	r3, #1
   12014:	str	r3, [fp, #20]
   12018:	b	11b78 <__assert_fail@plt+0x1d8>
   1201c:	ldr	r9, [r4]
   12020:	cmp	r9, #0
   12024:	bne	11b78 <__assert_fail@plt+0x1d8>
   12028:	movw	r1, #53432	; 0xd0b8
   1202c:	movt	r1, #2
   12030:	ldr	r3, [pc, #1492]	; 1260c <__assert_fail@plt+0xc6c>
   12034:	movw	r0, #55264	; 0xd7e0
   12038:	movt	r0, #2
   1203c:	movw	r2, #1613	; 0x64d
   12040:	bl	119a0 <__assert_fail@plt>
   12044:	mov	r3, #1
   12048:	str	r3, [sp, #100]	; 0x64
   1204c:	b	11b78 <__assert_fail@plt+0x1d8>
   12050:	mov	r3, #1
   12054:	str	r3, [sp, #68]	; 0x44
   12058:	b	11b78 <__assert_fail@plt+0x1d8>
   1205c:	movw	r3, #61868	; 0xf1ac
   12060:	movt	r3, #3
   12064:	mov	r2, #1
   12068:	str	r2, [r3, #4]
   1206c:	b	11b78 <__assert_fail@plt+0x1d8>
   12070:	movw	r3, #61868	; 0xf1ac
   12074:	movt	r3, #3
   12078:	mov	r2, #0
   1207c:	str	r2, [r3, #4]
   12080:	b	11b78 <__assert_fail@plt+0x1d8>
   12084:	mov	r3, #2
   12088:	str	r3, [fp, #20]
   1208c:	b	11b78 <__assert_fail@plt+0x1d8>
   12090:	mov	r2, #0
   12094:	movw	r3, #61868	; 0xf1ac
   12098:	movt	r3, #3
   1209c:	strb	r2, [fp, #80]	; 0x50
   120a0:	str	r2, [r3]
   120a4:	b	11b78 <__assert_fail@plt+0x1d8>
   120a8:	mov	r3, #1
   120ac:	str	r3, [sp, #64]	; 0x40
   120b0:	b	11b78 <__assert_fail@plt+0x1d8>
   120b4:	mov	r3, #1
   120b8:	str	r3, [sp, #96]	; 0x60
   120bc:	b	11b78 <__assert_fail@plt+0x1d8>
   120c0:	ldr	r3, [sp, #52]	; 0x34
   120c4:	ldr	r7, [r3]
   120c8:	cmp	r7, #34	; 0x22
   120cc:	bne	11f48 <__assert_fail@plt+0x5a8>
   120d0:	mov	r2, #5
   120d4:	movw	r1, #55344	; 0xd830
   120d8:	movt	r1, #2
   120dc:	mov	r0, #0
   120e0:	bl	11628 <dcgettext@plt>
   120e4:	mov	r4, r0
   120e8:	mov	r2, r8
   120ec:	mov	r1, #8
   120f0:	mov	r0, #0
   120f4:	bl	1abd0 <__assert_fail@plt+0x9230>
   120f8:	mov	r3, r0
   120fc:	mov	r2, r4
   12100:	mov	r1, r7
   12104:	mov	r0, #1
   12108:	bl	116d0 <error@plt>
   1210c:	add	r1, sp, #152	; 0x98
   12110:	mov	r0, #1
   12114:	str	r5, [sp, #152]	; 0x98
   12118:	bl	11670 <setgroups@plt>
   1211c:	cmp	r0, #0
   12120:	beq	11a54 <__assert_fail@plt+0xb4>
   12124:	mov	r0, r4
   12128:	movw	r1, #55024	; 0xd6f0
   1212c:	movt	r1, #2
   12130:	mov	r2, #5
   12134:	bl	11628 <dcgettext@plt>
   12138:	mov	r5, r0
   1213c:	bl	117d8 <__errno_location@plt>
   12140:	ldr	r4, [r0]
   12144:	mov	r2, r5
   12148:	mov	r1, #8
   1214c:	mov	r0, #0
   12150:	bl	1abd0 <__assert_fail@plt+0x9230>
   12154:	mov	r3, r0
   12158:	movw	r2, #56720	; 0xdd90
   1215c:	movt	r2, #2
   12160:	mov	r0, #1
   12164:	mov	r1, r4
   12168:	bl	116d0 <error@plt>
   1216c:	movw	r0, #55160	; 0xd778
   12170:	movt	r0, #2
   12174:	b	11aa4 <__assert_fail@plt+0x104>
   12178:	cmp	r9, #0
   1217c:	mov	r3, r0
   12180:	beq	1219c <__assert_fail@plt+0x7fc>
   12184:	ldr	r2, [sp, #72]	; 0x48
   12188:	cmn	r2, #1
   1218c:	beq	1219c <__assert_fail@plt+0x7fc>
   12190:	mov	r0, r2
   12194:	str	r3, [sp, #72]	; 0x48
   12198:	bl	1197c <close@plt>
   1219c:	ldr	r3, [sp, #68]	; 0x44
   121a0:	ldr	r2, [sp, #100]	; 0x64
   121a4:	orrs	r4, r2, r3
   121a8:	beq	124cc <__assert_fail@plt+0xb2c>
   121ac:	cmp	r3, #0
   121b0:	beq	121d4 <__assert_fail@plt+0x834>
   121b4:	movw	r3, #61968	; 0xf210
   121b8:	movt	r3, #3
   121bc:	ldr	r1, [sp, #56]	; 0x38
   121c0:	ldr	r3, [r3]
   121c4:	ldr	r2, [sp, #60]	; 0x3c
   121c8:	cmp	r1, r3
   121cc:	moveq	r2, #0
   121d0:	str	r2, [sp, #60]	; 0x3c
   121d4:	mov	r0, #1
   121d8:	bl	11934 <isatty@plt>
   121dc:	sub	r0, r0, #1
   121e0:	cmp	r9, #0
   121e4:	clz	r0, r0
   121e8:	lsr	r0, r0, #5
   121ec:	strb	r0, [fp, #12]
   121f0:	beq	12214 <__assert_fail@plt+0x874>
   121f4:	add	r0, sp, #136	; 0x88
   121f8:	movw	r1, #55424	; 0xd880
   121fc:	movt	r1, #2
   12200:	add	r3, sp, #132	; 0x84
   12204:	mov	r2, #1
   12208:	str	r0, [sp]
   1220c:	mov	r0, r9
   12210:	bl	14918 <__assert_fail@plt+0x2f78>
   12214:	mov	r5, #0
   12218:	movw	r3, #54992	; 0xd6d0
   1221c:	movt	r3, #2
   12220:	vldr	d9, [pc, #984]	; 12600 <__assert_fail@plt+0xc60>
   12224:	str	r3, [sp, #104]	; 0x68
   12228:	str	r5, [sp, #108]	; 0x6c
   1222c:	str	sl, [sp, #124]	; 0x7c
   12230:	mov	sl, r9
   12234:	ldr	r9, [sp, #72]	; 0x48
   12238:	b	1235c <__assert_fail@plt+0x9bc>
   1223c:	ldr	r3, [sp, #52]	; 0x34
   12240:	mov	r2, r8
   12244:	mov	r1, #8
   12248:	mov	r0, #0
   1224c:	ldr	r6, [r3]
   12250:	bl	1abd0 <__assert_fail@plt+0x9230>
   12254:	mov	r3, r0
   12258:	movw	r2, #56720	; 0xdd90
   1225c:	movt	r2, #2
   12260:	mov	r0, #0
   12264:	mov	r1, r6
   12268:	bl	116d0 <error@plt>
   1226c:	mov	r0, r5
   12270:	movw	r1, #55956	; 0xda94
   12274:	movt	r1, #2
   12278:	bl	114fc <fdopen@plt>
   1227c:	subs	r6, r0, #0
   12280:	beq	12678 <__assert_fail@plt+0xcd8>
   12284:	movw	r3, #61968	; 0xf210
   12288:	movt	r3, #3
   1228c:	mov	r2, #0
   12290:	ldr	r1, [r3]
   12294:	mov	r3, #0
   12298:	mov	ip, #0
   1229c:	strd	r2, [sp, #72]	; 0x48
   122a0:	ldr	r3, [sp, #56]	; 0x38
   122a4:	sub	r0, r3, r1
   122a8:	ldr	r3, [sp, #48]	; 0x30
   122ac:	add	r1, r3, r1, lsl #2
   122b0:	str	ip, [sp, #8]
   122b4:	ldrd	r2, [sp, #72]	; 0x48
   122b8:	ldr	ip, [sp, #84]	; 0x54
   122bc:	strd	r2, [sp]
   122c0:	mov	r3, r6
   122c4:	mov	r2, r8
   122c8:	str	ip, [sp, #12]
   122cc:	ldr	ip, [sp, #80]	; 0x50
   122d0:	str	ip, [sp, #16]
   122d4:	ldr	ip, [sp, #64]	; 0x40
   122d8:	str	ip, [sp, #20]
   122dc:	ldr	ip, [sp, #60]	; 0x3c
   122e0:	str	ip, [sp, #24]
   122e4:	ldr	ip, [sp, #68]	; 0x44
   122e8:	str	ip, [sp, #28]
   122ec:	ldr	ip, [sp, #96]	; 0x60
   122f0:	str	ip, [sp, #32]
   122f4:	ldr	ip, [sp, #88]	; 0x58
   122f8:	str	ip, [sp, #36]	; 0x24
   122fc:	ldr	ip, [sp, #92]	; 0x5c
   12300:	str	ip, [sp, #40]	; 0x28
   12304:	bl	13368 <__assert_fail@plt+0x19c8>
   12308:	mov	r5, r0
   1230c:	mov	r0, r6
   12310:	bl	11868 <fclose@plt>
   12314:	cmn	r0, #1
   12318:	beq	12678 <__assert_fail@plt+0xcd8>
   1231c:	cmp	r4, #0
   12320:	beq	1232c <__assert_fail@plt+0x98c>
   12324:	mov	r0, r4
   12328:	bl	1c734 <__assert_fail@plt+0xad94>
   1232c:	cmp	sl, #0
   12330:	beq	1263c <__assert_fail@plt+0xc9c>
   12334:	add	r0, sp, #136	; 0x88
   12338:	movw	r1, #55424	; 0xd880
   1233c:	movt	r1, #2
   12340:	add	r3, sp, #132	; 0x84
   12344:	mov	r2, #0
   12348:	str	r0, [sp]
   1234c:	mov	r0, sl
   12350:	bl	14918 <__assert_fail@plt+0x2f78>
   12354:	cmp	r0, #0
   12358:	beq	1263c <__assert_fail@plt+0xc9c>
   1235c:	ldr	r3, [sp, #60]	; 0x3c
   12360:	cmp	r3, #0
   12364:	beq	1237c <__assert_fail@plt+0x9dc>
   12368:	ldrd	r0, [fp, #88]	; 0x58
   1236c:	ldrd	r2, [fp, #96]	; 0x60
   12370:	cmp	r1, r3
   12374:	cmpeq	r0, r2
   12378:	bls	1263c <__assert_fail@plt+0xc9c>
   1237c:	mov	r2, #0
   12380:	mov	r3, #0
   12384:	cmp	sl, #0
   12388:	strd	r2, [fp, #32]
   1238c:	strd	r2, [fp, #40]	; 0x28
   12390:	strd	r2, [fp, #48]	; 0x30
   12394:	strd	r2, [fp, #56]	; 0x38
   12398:	strd	r2, [fp, #64]	; 0x40
   1239c:	strd	r2, [fp, #72]	; 0x48
   123a0:	beq	124f0 <__assert_fail@plt+0xb50>
   123a4:	ldr	r1, [sp, #136]	; 0x88
   123a8:	cmp	r1, #1
   123ac:	beq	12520 <__assert_fail@plt+0xb80>
   123b0:	cmp	r1, #0
   123b4:	ldrne	r0, [sp, #132]	; 0x84
   123b8:	bne	1250c <__assert_fail@plt+0xb6c>
   123bc:	mov	r4, r1
   123c0:	ldr	r8, [sp, #104]	; 0x68
   123c4:	mov	r0, r8
   123c8:	bl	129bc <__assert_fail@plt+0x101c>
   123cc:	subs	r5, r0, #0
   123d0:	blt	12678 <__assert_fail@plt+0xcd8>
   123d4:	add	r2, sp, #152	; 0x98
   123d8:	mov	r1, r5
   123dc:	mov	r0, #3
   123e0:	bl	1167c <__fxstat64@plt>
   123e4:	subs	r6, r0, #0
   123e8:	bne	1223c <__assert_fail@plt+0x89c>
   123ec:	ldrd	r2, [sp, #200]	; 0xc8
   123f0:	add	r0, sp, #140	; 0x8c
   123f4:	ldr	ip, [sp, #232]	; 0xe8
   123f8:	ldr	r1, [sp, #236]	; 0xec
   123fc:	strd	r2, [sp, #72]	; 0x48
   12400:	str	ip, [sp, #144]	; 0x90
   12404:	str	r1, [sp, #148]	; 0x94
   12408:	bl	11610 <time@plt>
   1240c:	cmn	r0, #1
   12410:	beq	125d0 <__assert_fail@plt+0xc30>
   12414:	movw	r7, #61868	; 0xf1ac
   12418:	movt	r7, #3
   1241c:	ldr	r0, [sp, #140]	; 0x8c
   12420:	ldr	r1, [sp, #232]	; 0xe8
   12424:	bl	11850 <difftime@plt>
   12428:	ldr	r2, [r7, #8]
   1242c:	movw	r3, #20864	; 0x5180
   12430:	movt	r3, #1
   12434:	vmov.f64	d8, d0
   12438:	mul	r3, r3, r2
   1243c:	vmov	s15, r3
   12440:	vcvt.f64.u32	d7, s15
   12444:	vcmpe.f64	d0, d7
   12448:	vmrs	APSR_nzcv, fpscr
   1244c:	bgt	12544 <__assert_fail@plt+0xba4>
   12450:	mov	r0, r5
   12454:	movw	r1, #55956	; 0xda94
   12458:	movt	r1, #2
   1245c:	bl	114fc <fdopen@plt>
   12460:	subs	r6, r0, #0
   12464:	beq	12678 <__assert_fail@plt+0xcd8>
   12468:	movw	r3, #61968	; 0xf210
   1246c:	movt	r3, #3
   12470:	ldr	r1, [r3]
   12474:	add	ip, sp, #144	; 0x90
   12478:	ldr	r3, [sp, #56]	; 0x38
   1247c:	sub	r0, r3, r1
   12480:	ldr	r3, [sp, #48]	; 0x30
   12484:	add	r1, r3, r1, lsl #2
   12488:	b	122b0 <__assert_fail@plt+0x910>
   1248c:	str	r4, [r0]
   12490:	bl	11580 <getuid@plt>
   12494:	bl	118c8 <setuid@plt>
   12498:	cmp	r0, #0
   1249c:	bne	127e4 <__assert_fail@plt+0xe44>
   124a0:	bl	118c8 <setuid@plt>
   124a4:	subs	r4, r0, #0
   124a8:	bne	11a78 <__assert_fail@plt+0xd8>
   124ac:	movw	r1, #55092	; 0xd734
   124b0:	movt	r1, #2
   124b4:	mov	r2, #5
   124b8:	bl	11628 <dcgettext@plt>
   124bc:	ldr	r3, [sp, #52]	; 0x34
   124c0:	mov	r5, r0
   124c4:	str	r4, [r3]
   124c8:	b	1213c <__assert_fail@plt+0x79c>
   124cc:	movw	r3, #61968	; 0xf210
   124d0:	movt	r3, #3
   124d4:	ldr	r2, [sp, #56]	; 0x38
   124d8:	ldr	r3, [r3]
   124dc:	cmp	r2, r3
   124e0:	beq	126b8 <__assert_fail@plt+0xd18>
   124e4:	mov	r3, #1
   124e8:	str	r3, [sp, #80]	; 0x50
   124ec:	b	121d4 <__assert_fail@plt+0x834>
   124f0:	cmn	r9, #1
   124f4:	beq	1263c <__assert_fail@plt+0xc9c>
   124f8:	mov	r5, r9
   124fc:	mov	r4, sl
   12500:	ldr	r8, [fp, #108]	; 0x6c
   12504:	mvn	r9, #0
   12508:	b	123d4 <__assert_fail@plt+0xa34>
   1250c:	add	r0, sl, r0
   12510:	bl	115bc <strndup@plt>
   12514:	mov	r4, r0
   12518:	mov	r8, r0
   1251c:	b	123c4 <__assert_fail@plt+0xa24>
   12520:	ldr	r0, [sp, #132]	; 0x84
   12524:	ldrb	r3, [sl, r0]
   12528:	cmp	r3, #45	; 0x2d
   1252c:	beq	12618 <__assert_fail@plt+0xc78>
   12530:	cmp	r3, #46	; 0x2e
   12534:	bne	1250c <__assert_fail@plt+0xb6c>
   12538:	mov	r4, #0
   1253c:	ldr	r8, [sp, #104]	; 0x68
   12540:	b	123c4 <__assert_fail@plt+0xa24>
   12544:	mov	r2, #5
   12548:	mov	r0, r6
   1254c:	movw	r1, #55516	; 0xd8dc
   12550:	movt	r1, #2
   12554:	bl	11628 <dcgettext@plt>
   12558:	mov	r2, r8
   1255c:	mov	r1, #8
   12560:	str	r0, [sp, #112]	; 0x70
   12564:	mov	r0, r6
   12568:	bl	1abd0 <__assert_fail@plt+0x9230>
   1256c:	mov	r3, r0
   12570:	mov	r2, #5
   12574:	ldr	r1, [pc, #148]	; 12610 <__assert_fail@plt+0xc70>
   12578:	mov	r0, r6
   1257c:	str	r3, [sp, #120]	; 0x78
   12580:	ldr	r3, [r7, #8]
   12584:	str	r3, [sp, #116]	; 0x74
   12588:	bl	11628 <dcgettext@plt>
   1258c:	mov	r7, r0
   12590:	mov	r2, #5
   12594:	ldr	r1, [pc, #116]	; 12610 <__assert_fail@plt+0xc70>
   12598:	mov	r0, r6
   1259c:	bl	11628 <dcgettext@plt>
   125a0:	vdiv.f64	d7, d8, d9
   125a4:	mov	r1, r6
   125a8:	str	r7, [sp, #4]
   125ac:	ldr	ip, [sp, #116]	; 0x74
   125b0:	ldr	r2, [sp, #112]	; 0x70
   125b4:	ldr	r3, [sp, #120]	; 0x78
   125b8:	str	ip, [sp]
   125bc:	vstr	d7, [sp, #8]
   125c0:	str	r0, [sp, #16]
   125c4:	mov	r0, r6
   125c8:	bl	116d0 <error@plt>
   125cc:	b	12450 <__assert_fail@plt+0xab0>
   125d0:	ldr	r3, [sp, #52]	; 0x34
   125d4:	mov	r2, #5
   125d8:	mov	r0, r6
   125dc:	movw	r1, #55492	; 0xd8c4
   125e0:	movt	r1, #2
   125e4:	ldr	r7, [r3]
   125e8:	bl	11628 <dcgettext@plt>
   125ec:	mov	r2, r0
   125f0:	mov	r0, r6
   125f4:	mov	r1, r7
   125f8:	bl	116d0 <error@plt>
   125fc:	b	12450 <__assert_fail@plt+0xab0>
   12600:	andeq	r0, r0, r0
   12604:	rscsmi	r1, r5, r0, lsl #16
   12608:	andeq	pc, r3, r0, lsl #5
   1260c:	muleq	r2, r4, lr
   12610:	andeq	ip, r2, r0, lsr #29
   12614:	andeq	ip, r2, r4, lsr #26
   12618:	ldr	r3, [sp, #108]	; 0x6c
   1261c:	cmp	r3, #0
   12620:	bne	126f8 <__assert_fail@plt+0xd58>
   12624:	ldr	r5, [sp, #108]	; 0x6c
   12628:	movw	r8, #55016	; 0xd6e8
   1262c:	movt	r8, #2
   12630:	str	r1, [sp, #108]	; 0x6c
   12634:	mov	r4, r5
   12638:	b	123d4 <__assert_fail@plt+0xa34>
   1263c:	ldr	r3, [sp, #100]	; 0x64
   12640:	ldr	sl, [sp, #124]	; 0x7c
   12644:	cmp	r3, #0
   12648:	bne	126e4 <__assert_fail@plt+0xd44>
   1264c:	cmp	r5, #0
   12650:	bne	11f90 <__assert_fail@plt+0x5f0>
   12654:	ldr	r3, [sp, #60]	; 0x3c
   12658:	cmp	r3, #0
   1265c:	beq	1266c <__assert_fail@plt+0xccc>
   12660:	ldrd	r2, [fp, #88]	; 0x58
   12664:	orrs	r3, r2, r3
   12668:	beq	11f90 <__assert_fail@plt+0x5f0>
   1266c:	ldr	r3, [sp, #68]	; 0x44
   12670:	eor	sl, r3, #1
   12674:	b	11f90 <__assert_fail@plt+0x5f0>
   12678:	ldr	r3, [sp, #52]	; 0x34
   1267c:	mov	r2, r8
   12680:	mov	r1, #8
   12684:	mov	r0, #0
   12688:	ldr	sl, [sp, #124]	; 0x7c
   1268c:	ldr	r4, [r3]
   12690:	bl	1abd0 <__assert_fail@plt+0x9230>
   12694:	mov	r3, r0
   12698:	movw	r2, #56720	; 0xdd90
   1269c:	movt	r2, #2
   126a0:	mov	r0, #0
   126a4:	mov	r1, r4
   126a8:	bl	116d0 <error@plt>
   126ac:	b	11f90 <__assert_fail@plt+0x5f0>
   126b0:	mov	r0, #0
   126b4:	bl	12a18 <__assert_fail@plt+0x1078>
   126b8:	mov	r2, #5
   126bc:	movw	r1, #55396	; 0xd864
   126c0:	movt	r1, #2
   126c4:	mov	r0, r4
   126c8:	bl	11628 <dcgettext@plt>
   126cc:	mov	r2, r0
   126d0:	mov	r1, r4
   126d4:	mov	r0, r4
   126d8:	bl	116d0 <error@plt>
   126dc:	mov	r0, #1
   126e0:	bl	12a18 <__assert_fail@plt+0x1078>
   126e4:	movw	r0, #55584	; 0xd920
   126e8:	movt	r0, #2
   126ec:	mov	r1, r5
   126f0:	bl	11550 <printf@plt>
   126f4:	b	1264c <__assert_fail@plt+0xcac>
   126f8:	mov	r2, #5
   126fc:	movw	r1, #55428	; 0xd884
   12700:	movt	r1, #2
   12704:	mov	r0, #0
   12708:	ldr	sl, [sp, #124]	; 0x7c
   1270c:	bl	11628 <dcgettext@plt>
   12710:	mov	r1, #0
   12714:	mov	r2, r0
   12718:	mov	r0, r1
   1271c:	bl	116d0 <error@plt>
   12720:	b	11f90 <__assert_fail@plt+0x5f0>
   12724:	ldr	r3, [sp, #52]	; 0x34
   12728:	mov	r2, #5
   1272c:	movw	r1, #55192	; 0xd798
   12730:	movt	r1, #2
   12734:	mov	r0, #0
   12738:	ldr	r4, [r3]
   1273c:	bl	11628 <dcgettext@plt>
   12740:	mov	r2, r0
   12744:	mov	r0, #1
   12748:	mov	r1, r4
   1274c:	bl	116d0 <error@plt>
   12750:	mov	r0, r4
   12754:	movw	r1, #55124	; 0xd754
   12758:	movt	r1, #2
   1275c:	mov	r2, #5
   12760:	bl	11628 <dcgettext@plt>
   12764:	mov	r5, r0
   12768:	b	1213c <__assert_fail@plt+0x79c>
   1276c:	mov	r2, #5
   12770:	movw	r1, #55280	; 0xd7f0
   12774:	movt	r1, #2
   12778:	mov	r0, r7
   1277c:	bl	11628 <dcgettext@plt>
   12780:	mov	r2, r0
   12784:	mov	r1, r7
   12788:	mov	r0, #1
   1278c:	bl	116d0 <error@plt>
   12790:	ldr	ip, [r4]
   12794:	mov	r2, #108	; 0x6c
   12798:	ldr	r3, [pc, #-396]	; 12614 <__assert_fail@plt+0xc74>
   1279c:	ldr	r1, [sp, #144]	; 0x90
   127a0:	str	ip, [sp]
   127a4:	bl	1b9c8 <__assert_fail@plt+0xa028>
   127a8:	mov	r2, #5
   127ac:	movw	r1, #55344	; 0xd830
   127b0:	movt	r1, #2
   127b4:	mov	r0, #0
   127b8:	bl	11628 <dcgettext@plt>
   127bc:	mov	r4, r0
   127c0:	mov	r2, r8
   127c4:	mov	r1, #8
   127c8:	mov	r0, #0
   127cc:	bl	1abd0 <__assert_fail@plt+0x9230>
   127d0:	mov	r3, r0
   127d4:	mov	r2, r4
   127d8:	mov	r1, #0
   127dc:	mov	r0, #1
   127e0:	bl	116d0 <error@plt>
   127e4:	mov	r0, r4
   127e8:	movw	r1, #55056	; 0xd710
   127ec:	movt	r1, #2
   127f0:	mov	r2, #5
   127f4:	bl	11628 <dcgettext@plt>
   127f8:	mov	r5, r0
   127fc:	b	1213c <__assert_fail@plt+0x79c>
   12800:	mov	fp, #0
   12804:	mov	lr, #0
   12808:	pop	{r1}		; (ldr r1, [sp], #4)
   1280c:	mov	r2, sp
   12810:	push	{r2}		; (str r2, [sp, #-4]!)
   12814:	push	{r0}		; (str r0, [sp, #-4]!)
   12818:	ldr	ip, [pc, #16]	; 12830 <__assert_fail@plt+0xe90>
   1281c:	push	{ip}		; (str ip, [sp, #-4]!)
   12820:	ldr	r0, [pc, #12]	; 12834 <__assert_fail@plt+0xe94>
   12824:	ldr	r3, [pc, #12]	; 12838 <__assert_fail@plt+0xe98>
   12828:	bl	11718 <__libc_start_main@plt>
   1282c:	bl	11964 <abort@plt>
   12830:	andeq	ip, r2, r0, lsr ip
   12834:			; <UNDEFINED> instruction: 0x000119b0
   12838:	ldrdeq	ip, [r2], -r0
   1283c:	ldr	r3, [pc, #20]	; 12858 <__assert_fail@plt+0xeb8>
   12840:	ldr	r2, [pc, #20]	; 1285c <__assert_fail@plt+0xebc>
   12844:	add	r3, pc, r3
   12848:	ldr	r2, [r3, r2]
   1284c:	cmp	r2, #0
   12850:	bxeq	lr
   12854:	b	11760 <__gmon_start__@plt>
   12858:			; <UNDEFINED> instruction: 0x0002c7b4
   1285c:	andeq	r0, r0, r0, lsr #3
   12860:	ldr	r0, [pc, #24]	; 12880 <__assert_fail@plt+0xee0>
   12864:	ldr	r3, [pc, #24]	; 12884 <__assert_fail@plt+0xee4>
   12868:	cmp	r3, r0
   1286c:	bxeq	lr
   12870:	ldr	r3, [pc, #16]	; 12888 <__assert_fail@plt+0xee8>
   12874:	cmp	r3, #0
   12878:	bxeq	lr
   1287c:	bx	r3
   12880:	andeq	pc, r3, r4, lsl #4
   12884:	andeq	pc, r3, r4, lsl #4
   12888:	andeq	r0, r0, r0
   1288c:	ldr	r0, [pc, #36]	; 128b8 <__assert_fail@plt+0xf18>
   12890:	ldr	r1, [pc, #36]	; 128bc <__assert_fail@plt+0xf1c>
   12894:	sub	r1, r1, r0
   12898:	asr	r1, r1, #2
   1289c:	add	r1, r1, r1, lsr #31
   128a0:	asrs	r1, r1, #1
   128a4:	bxeq	lr
   128a8:	ldr	r3, [pc, #16]	; 128c0 <__assert_fail@plt+0xf20>
   128ac:	cmp	r3, #0
   128b0:	bxeq	lr
   128b4:	bx	r3
   128b8:	andeq	pc, r3, r4, lsl #4
   128bc:	andeq	pc, r3, r4, lsl #4
   128c0:	andeq	r0, r0, r0
   128c4:	push	{r4, lr}
   128c8:	ldr	r4, [pc, #24]	; 128e8 <__assert_fail@plt+0xf48>
   128cc:	ldrb	r3, [r4]
   128d0:	cmp	r3, #0
   128d4:	popne	{r4, pc}
   128d8:	bl	12860 <__assert_fail@plt+0xec0>
   128dc:	mov	r3, #1
   128e0:	strb	r3, [r4]
   128e4:	pop	{r4, pc}
   128e8:	andeq	pc, r3, r4, lsr #4
   128ec:	b	1288c <__assert_fail@plt+0xeec>
   128f0:	movw	r3, #61992	; 0xf228
   128f4:	movt	r3, #3
   128f8:	strd	r4, [sp, #-16]!
   128fc:	ldr	r4, [r3]
   12900:	str	r6, [sp, #8]
   12904:	str	lr, [sp, #12]
   12908:	cmp	r4, #0
   1290c:	beq	12950 <__assert_fail@plt+0xfb0>
   12910:	mov	r5, r0
   12914:	mov	r0, r5
   12918:	ldr	r3, [r4]
   1291c:	ldr	r1, [r4, #4]
   12920:	blx	r3
   12924:	ldr	r4, [r4, #8]
   12928:	adds	r2, r4, #0
   1292c:	movne	r2, #1
   12930:	ands	r3, r0, #3
   12934:	movne	r3, r2
   12938:	cmp	r3, #0
   1293c:	bne	12914 <__assert_fail@plt+0xf74>
   12940:	ldrd	r4, [sp]
   12944:	ldr	r6, [sp, #8]
   12948:	add	sp, sp, #12
   1294c:	pop	{pc}		; (ldr pc, [sp], #4)
   12950:	ldrd	r4, [sp]
   12954:	mov	r0, #3
   12958:	ldr	r6, [sp, #8]
   1295c:	add	sp, sp, #12
   12960:	pop	{pc}		; (ldr pc, [sp], #4)
   12964:	ldr	r0, [r1, #8]
   12968:	strd	r4, [sp, #-8]!
   1296c:	ldrd	r4, [r1]
   12970:	ldr	ip, [r1, #12]
   12974:	adds	r2, r0, #1
   12978:	adc	r3, ip, #0
   1297c:	cmp	r3, r5
   12980:	cmpeq	r2, r4
   12984:	strd	r2, [r1, #8]
   12988:	movcs	r0, #8
   1298c:	movcc	r0, #1
   12990:	ldrd	r4, [sp]
   12994:	add	sp, sp, #8
   12998:	bx	lr
   1299c:	ldr	r3, [r1, #8]
   129a0:	mov	r0, #1
   129a4:	ldr	r2, [r1, #12]
   129a8:	adds	r3, r3, r0
   129ac:	adc	r2, r2, #0
   129b0:	str	r3, [r1, #8]
   129b4:	str	r2, [r1, #12]
   129b8:	bx	lr
   129bc:	mov	r1, #131072	; 0x20000
   129c0:	str	r4, [sp, #-8]!
   129c4:	str	lr, [sp, #4]
   129c8:	bl	14c00 <__assert_fail@plt+0x3260>
   129cc:	subs	r4, r0, #0
   129d0:	bge	129e4 <__assert_fail@plt+0x1044>
   129d4:	mov	r0, r4
   129d8:	ldr	r4, [sp]
   129dc:	add	sp, sp, #4
   129e0:	pop	{pc}		; (ldr pc, [sp], #4)
   129e4:	mov	r2, #1
   129e8:	mov	r1, #2
   129ec:	bl	1c4ec <__assert_fail@plt+0xab4c>
   129f0:	cmp	r0, #0
   129f4:	beq	129d4 <__assert_fail@plt+0x1034>
   129f8:	mov	r0, r4
   129fc:	mvn	r4, #0
   12a00:	bl	1197c <close@plt>
   12a04:	b	129d4 <__assert_fail@plt+0x1034>
   12a08:	movw	r3, #61992	; 0xf228
   12a0c:	movt	r3, #3
   12a10:	ldr	r0, [r3, #4]
   12a14:	b	1c734 <__assert_fail@plt+0xad94>
   12a18:	subs	r6, r0, #0
   12a1c:	str	r7, [sp, #-8]!
   12a20:	str	lr, [sp, #4]
   12a24:	beq	12a68 <__assert_fail@plt+0x10c8>
   12a28:	movw	r3, #61976	; 0xf218
   12a2c:	movt	r3, #3
   12a30:	ldr	r4, [r3]
   12a34:	mov	r2, #5
   12a38:	movw	r1, #52904	; 0xcea8
   12a3c:	movt	r1, #2
   12a40:	mov	r0, #0
   12a44:	bl	11628 <dcgettext@plt>
   12a48:	movw	r3, #62112	; 0xf2a0
   12a4c:	movt	r3, #3
   12a50:	mov	r1, r0
   12a54:	ldr	r2, [r3]
   12a58:	mov	r0, r4
   12a5c:	bl	117c0 <fprintf@plt>
   12a60:	mov	r0, #1
   12a64:	bl	11784 <exit@plt>
   12a68:	movw	r4, #61980	; 0xf21c
   12a6c:	movt	r4, #3
   12a70:	ldr	r7, [r4]
   12a74:	mov	r2, #5
   12a78:	movw	r1, #52944	; 0xced0
   12a7c:	movt	r1, #2
   12a80:	movw	r5, #62112	; 0xf2a0
   12a84:	movt	r5, #3
   12a88:	bl	11628 <dcgettext@plt>
   12a8c:	mov	r1, r0
   12a90:	ldr	r2, [r5]
   12a94:	mov	r0, r7
   12a98:	bl	117c0 <fprintf@plt>
   12a9c:	ldr	r0, [r4]
   12aa0:	ldr	r1, [r5]
   12aa4:	bl	149c8 <__assert_fail@plt+0x3028>
   12aa8:	mov	r0, r6
   12aac:	bl	11784 <exit@plt>
   12ab0:	strd	r4, [sp, #-16]!
   12ab4:	mov	r5, r0
   12ab8:	mov	r0, #12
   12abc:	mov	r4, r1
   12ac0:	str	r6, [sp, #8]
   12ac4:	str	lr, [sp, #12]
   12ac8:	bl	1b50c <__assert_fail@plt+0x9b6c>
   12acc:	movw	r3, #61992	; 0xf228
   12ad0:	movt	r3, #3
   12ad4:	str	r5, [r0]
   12ad8:	ldr	r2, [r3, #8]
   12adc:	mov	ip, #0
   12ae0:	str	r0, [r3, #8]
   12ae4:	stmib	r0, {r4, ip}
   12ae8:	ldrd	r4, [sp]
   12aec:	cmp	r2, ip
   12af0:	ldr	r6, [sp, #8]
   12af4:	add	sp, sp, #12
   12af8:	streq	r0, [r3]
   12afc:	strne	r0, [r2, #8]
   12b00:	pop	{pc}		; (ldr pc, [sp], #4)
   12b04:	str	r4, [sp, #-8]!
   12b08:	movw	r4, #61980	; 0xf21c
   12b0c:	movt	r4, #3
   12b10:	ldr	r1, [r4]
   12b14:	ldr	r0, [r0, #12]
   12b18:	str	lr, [sp, #4]
   12b1c:	bl	1194c <fputs@plt>
   12b20:	movw	r3, #61868	; 0xf1ac
   12b24:	movt	r3, #3
   12b28:	ldr	r1, [r4]
   12b2c:	ldr	r0, [r3]
   12b30:	bl	118f8 <putc@plt>
   12b34:	ldr	r4, [sp]
   12b38:	add	sp, sp, #4
   12b3c:	mov	r0, #1
   12b40:	pop	{pc}		; (ldr pc, [sp], #4)
   12b44:	ldr	r0, [r0, #12]
   12b48:	movw	r1, #61992	; 0xf228
   12b4c:	movt	r1, #3
   12b50:	str	r4, [sp, #-8]!
   12b54:	movw	r4, #61980	; 0xf21c
   12b58:	movt	r4, #3
   12b5c:	ldrb	r2, [r1, #12]
   12b60:	movw	r3, #56720	; 0xdd90
   12b64:	movt	r3, #2
   12b68:	ldr	r1, [r1, #4]
   12b6c:	str	lr, [sp, #4]
   12b70:	sub	sp, sp, #8
   12b74:	str	r0, [sp]
   12b78:	ldr	r0, [r4]
   12b7c:	bl	143d0 <__assert_fail@plt+0x2a30>
   12b80:	ldr	r1, [r4]
   12b84:	movw	r3, #61868	; 0xf1ac
   12b88:	movt	r3, #3
   12b8c:	ldr	r0, [r3]
   12b90:	bl	118f8 <putc@plt>
   12b94:	mov	r0, #1
   12b98:	add	sp, sp, #8
   12b9c:	ldr	r4, [sp]
   12ba0:	add	sp, sp, #4
   12ba4:	pop	{pc}		; (ldr pc, [sp], #4)
   12ba8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12bac:	ldr	r5, [r0, #12]
   12bb0:	strd	r6, [sp, #8]
   12bb4:	mov	r7, r1
   12bb8:	strd	r8, [sp, #16]
   12bbc:	str	sl, [sp, #24]
   12bc0:	str	lr, [sp, #28]
   12bc4:	mov	r0, r5
   12bc8:	bl	117a8 <strlen@plt>
   12bcc:	ldr	r1, [r7, #8]
   12bd0:	ldr	ip, [r7, #12]
   12bd4:	ldrd	r2, [r7, #16]
   12bd8:	adds	r1, r1, #1
   12bdc:	adc	ip, ip, #0
   12be0:	str	r1, [r7, #8]
   12be4:	adds	r8, r2, r0
   12be8:	str	ip, [r7, #12]
   12bec:	adc	r9, r3, #0
   12bf0:	mov	r0, r8
   12bf4:	mov	r1, r9
   12bf8:	strd	r0, [r7, #16]
   12bfc:	ldrb	r4, [r5]
   12c00:	cmp	r4, #0
   12c04:	beq	12cc4 <__assert_fail@plt+0x1324>
   12c08:	mov	r8, #0
   12c0c:	mov	r6, r8
   12c10:	mov	r9, r8
   12c14:	b	12c34 <__assert_fail@plt+0x1294>
   12c18:	cmp	r4, #10
   12c1c:	moveq	r8, #1
   12c20:	moveq	r6, r8
   12c24:	bne	12c40 <__assert_fail@plt+0x12a0>
   12c28:	ldrb	r4, [r5, #1]!
   12c2c:	cmp	r4, #0
   12c30:	beq	12c64 <__assert_fail@plt+0x12c4>
   12c34:	tst	r4, #128	; 0x80
   12c38:	beq	12c18 <__assert_fail@plt+0x1278>
   12c3c:	mov	r9, #1
   12c40:	bl	11778 <__ctype_b_loc@plt>
   12c44:	ldr	r3, [r0]
   12c48:	lsl	r4, r4, #1
   12c4c:	ldrh	r3, [r3, r4]
   12c50:	ldrb	r4, [r5, #1]!
   12c54:	tst	r3, #8192	; 0x2000
   12c58:	movne	r6, #1
   12c5c:	cmp	r4, #0
   12c60:	bne	12c34 <__assert_fail@plt+0x1294>
   12c64:	cmp	r9, #0
   12c68:	beq	12c84 <__assert_fail@plt+0x12e4>
   12c6c:	ldr	r3, [r7, #40]	; 0x28
   12c70:	ldr	r2, [r7, #44]	; 0x2c
   12c74:	adds	r3, r3, #1
   12c78:	adc	r2, r2, #0
   12c7c:	str	r3, [r7, #40]	; 0x28
   12c80:	str	r2, [r7, #44]	; 0x2c
   12c84:	cmp	r6, #0
   12c88:	beq	12ca4 <__assert_fail@plt+0x1304>
   12c8c:	ldr	r3, [r7, #24]
   12c90:	ldr	r2, [r7, #28]
   12c94:	adds	r3, r3, #1
   12c98:	adc	r2, r2, #0
   12c9c:	str	r3, [r7, #24]
   12ca0:	str	r2, [r7, #28]
   12ca4:	cmp	r8, #0
   12ca8:	beq	12cc4 <__assert_fail@plt+0x1324>
   12cac:	ldr	r3, [r7, #32]
   12cb0:	ldr	r2, [r7, #36]	; 0x24
   12cb4:	adds	r3, r3, #1
   12cb8:	adc	r2, r2, #0
   12cbc:	str	r3, [r7, #32]
   12cc0:	str	r2, [r7, #36]	; 0x24
   12cc4:	ldrd	r4, [sp]
   12cc8:	mov	r0, #1
   12ccc:	ldrd	r6, [sp, #8]
   12cd0:	ldrd	r8, [sp, #16]
   12cd4:	ldr	sl, [sp, #24]
   12cd8:	add	sp, sp, #28
   12cdc:	pop	{pc}		; (ldr pc, [sp], #4)
   12ce0:	push	{lr}		; (str lr, [sp, #-4]!)
   12ce4:	sub	sp, sp, #108	; 0x6c
   12ce8:	mov	r2, sp
   12cec:	ldr	r1, [r0, #12]
   12cf0:	mov	r0, #3
   12cf4:	bl	11988 <__lxstat64@plt>
   12cf8:	cmp	r0, #0
   12cfc:	movne	r0, #4
   12d00:	moveq	r0, #1
   12d04:	add	sp, sp, #108	; 0x6c
   12d08:	pop	{pc}		; (ldr pc, [sp], #4)
   12d0c:	push	{lr}		; (str lr, [sp, #-4]!)
   12d10:	sub	sp, sp, #108	; 0x6c
   12d14:	mov	r2, sp
   12d18:	ldr	r1, [r0, #12]
   12d1c:	mov	r0, #3
   12d20:	bl	11988 <__lxstat64@plt>
   12d24:	cmp	r0, #0
   12d28:	moveq	r0, #4
   12d2c:	movne	r0, #1
   12d30:	add	sp, sp, #108	; 0x6c
   12d34:	pop	{pc}		; (ldr pc, [sp], #4)
   12d38:	push	{lr}		; (str lr, [sp, #-4]!)
   12d3c:	sub	sp, sp, #108	; 0x6c
   12d40:	mov	r2, sp
   12d44:	ldr	r1, [r0, #12]
   12d48:	mov	r0, #3
   12d4c:	bl	11928 <__xstat64@plt>
   12d50:	cmp	r0, #0
   12d54:	movne	r0, #4
   12d58:	moveq	r0, #1
   12d5c:	add	sp, sp, #108	; 0x6c
   12d60:	pop	{pc}		; (ldr pc, [sp], #4)
   12d64:	push	{lr}		; (str lr, [sp, #-4]!)
   12d68:	sub	sp, sp, #108	; 0x6c
   12d6c:	mov	r2, sp
   12d70:	ldr	r1, [r0, #12]
   12d74:	mov	r0, #3
   12d78:	bl	11928 <__xstat64@plt>
   12d7c:	cmp	r0, #0
   12d80:	moveq	r0, #4
   12d84:	movne	r0, #1
   12d88:	add	sp, sp, #108	; 0x6c
   12d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   12d90:	str	r4, [sp, #-8]!
   12d94:	ldr	r0, [r0, #20]
   12d98:	str	lr, [sp, #4]
   12d9c:	bl	17f30 <__assert_fail@plt+0x6590>
   12da0:	cmp	r0, #0
   12da4:	ldr	r4, [sp]
   12da8:	add	sp, sp, #4
   12dac:	movne	r0, #2
   12db0:	moveq	r0, #4
   12db4:	pop	{pc}		; (ldr pc, [sp], #4)
   12db8:	str	r4, [sp, #-8]!
   12dbc:	ldr	r0, [r0, #20]
   12dc0:	str	lr, [sp, #4]
   12dc4:	bl	16400 <__assert_fail@plt+0x4a60>
   12dc8:	cmp	r0, #0
   12dcc:	ldr	r4, [sp]
   12dd0:	add	sp, sp, #4
   12dd4:	movne	r0, #2
   12dd8:	moveq	r0, #4
   12ddc:	pop	{pc}		; (ldr pc, [sp], #4)
   12de0:	mov	r3, r1
   12de4:	mov	r2, #0
   12de8:	str	r4, [sp, #-8]!
   12dec:	ldr	r1, [r0, #20]
   12df0:	mov	r0, r3
   12df4:	str	lr, [sp, #4]
   12df8:	bl	116dc <fnmatch@plt>
   12dfc:	cmp	r0, #0
   12e00:	ldr	r4, [sp]
   12e04:	add	sp, sp, #4
   12e08:	movne	r0, #4
   12e0c:	moveq	r0, #2
   12e10:	pop	{pc}		; (ldr pc, [sp], #4)
   12e14:	mov	r3, r1
   12e18:	mov	r2, #16
   12e1c:	str	r4, [sp, #-8]!
   12e20:	ldr	r1, [r0, #20]
   12e24:	mov	r0, r3
   12e28:	str	lr, [sp, #4]
   12e2c:	bl	116dc <fnmatch@plt>
   12e30:	cmp	r0, #0
   12e34:	ldr	r4, [sp]
   12e38:	add	sp, sp, #4
   12e3c:	movne	r0, #4
   12e40:	moveq	r0, #2
   12e44:	pop	{pc}		; (ldr pc, [sp], #4)
   12e48:	strd	r4, [sp, #-12]!
   12e4c:	mov	r5, r1
   12e50:	ldr	r4, [r0, #20]
   12e54:	str	lr, [sp, #8]
   12e58:	sub	sp, sp, #12
   12e5c:	mov	r0, r4
   12e60:	bl	117a8 <strlen@plt>
   12e64:	mov	r3, r0
   12e68:	mov	ip, #0
   12e6c:	mov	r2, r0
   12e70:	mov	r1, r4
   12e74:	mov	r0, r5
   12e78:	stm	sp, {r3, ip}
   12e7c:	mov	r3, ip
   12e80:	bl	2a5ec <__assert_fail@plt+0x18c4c>
   12e84:	cmp	r0, #0
   12e88:	movlt	r0, #4
   12e8c:	movge	r0, #2
   12e90:	add	sp, sp, #12
   12e94:	ldrd	r4, [sp]
   12e98:	add	sp, sp, #8
   12e9c:	pop	{pc}		; (ldr pc, [sp], #4)
   12ea0:	str	r4, [sp, #-8]!
   12ea4:	mov	r4, r0
   12ea8:	ldr	r0, [r0, #12]
   12eac:	str	lr, [sp, #4]
   12eb0:	bl	14a3c <__assert_fail@plt+0x309c>
   12eb4:	str	r0, [r4, #20]
   12eb8:	mov	r0, #1
   12ebc:	ldr	r4, [sp]
   12ec0:	add	sp, sp, #4
   12ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   12ec8:	movw	r3, #61992	; 0xf228
   12ecc:	movt	r3, #3
   12ed0:	strd	r4, [sp, #-16]!
   12ed4:	ldr	r4, [r3, #16]
   12ed8:	str	r6, [sp, #8]
   12edc:	str	lr, [sp, #12]
   12ee0:	cmp	r4, #0
   12ee4:	movne	r5, r0
   12ee8:	beq	12f2c <__assert_fail@plt+0x158c>
   12eec:	mov	r0, r5
   12ef0:	ldr	r3, [r4]
   12ef4:	ldr	r1, [r4, #4]
   12ef8:	blx	r3
   12efc:	ldr	r4, [r4, #8]
   12f00:	cmp	r4, #0
   12f04:	andne	r3, r0, #1
   12f08:	moveq	r3, #0
   12f0c:	cmp	r3, #0
   12f10:	bne	12eec <__assert_fail@plt+0x154c>
   12f14:	cmp	r0, #1
   12f18:	beq	12f2c <__assert_fail@plt+0x158c>
   12f1c:	ldrd	r4, [sp]
   12f20:	ldr	r6, [sp, #8]
   12f24:	add	sp, sp, #12
   12f28:	pop	{pc}		; (ldr pc, [sp], #4)
   12f2c:	ldrd	r4, [sp]
   12f30:	mov	r0, #2
   12f34:	ldr	r6, [sp, #8]
   12f38:	add	sp, sp, #12
   12f3c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f40:	movw	r3, #61992	; 0xf228
   12f44:	movt	r3, #3
   12f48:	strd	r4, [sp, #-16]!
   12f4c:	ldr	r4, [r3]
   12f50:	ldr	r5, [r3, #16]
   12f54:	str	r6, [sp, #8]
   12f58:	str	lr, [sp, #12]
   12f5c:	cmp	r4, r5
   12f60:	beq	12fc8 <__assert_fail@plt+0x1628>
   12f64:	mov	r6, r0
   12f68:	mov	r0, r6
   12f6c:	ldr	r3, [r4]
   12f70:	ldr	r1, [r4, #4]
   12f74:	blx	r3
   12f78:	ldr	r4, [r4, #8]
   12f7c:	and	r3, r0, #5
   12f80:	cmp	r5, r4
   12f84:	cmpne	r3, #0
   12f88:	bne	12f68 <__assert_fail@plt+0x15c8>
   12f8c:	cmp	r0, #1
   12f90:	beq	12fb4 <__assert_fail@plt+0x1614>
   12f94:	tst	r0, #12
   12f98:	bne	12fb8 <__assert_fail@plt+0x1618>
   12f9c:	mov	r0, r6
   12fa0:	ldrd	r4, [sp]
   12fa4:	ldr	r6, [sp, #8]
   12fa8:	ldr	lr, [sp, #12]
   12fac:	add	sp, sp, #16
   12fb0:	b	12ec8 <__assert_fail@plt+0x1528>
   12fb4:	mov	r0, #4
   12fb8:	ldrd	r4, [sp]
   12fbc:	ldr	r6, [sp, #8]
   12fc0:	add	sp, sp, #12
   12fc4:	pop	{pc}		; (ldr pc, [sp], #4)
   12fc8:	ldrd	r4, [sp]
   12fcc:	mov	r0, #5
   12fd0:	ldr	r6, [sp, #8]
   12fd4:	add	sp, sp, #12
   12fd8:	pop	{pc}		; (ldr pc, [sp], #4)
   12fdc:	movw	r3, #61992	; 0xf228
   12fe0:	movt	r3, #3
   12fe4:	strd	r4, [sp, #-16]!
   12fe8:	ldr	r4, [r3]
   12fec:	ldr	r5, [r3, #16]
   12ff0:	str	r6, [sp, #8]
   12ff4:	mov	r6, r0
   12ff8:	str	lr, [sp, #12]
   12ffc:	cmp	r4, r5
   13000:	beq	13040 <__assert_fail@plt+0x16a0>
   13004:	mov	r0, r6
   13008:	ldr	r3, [r4]
   1300c:	ldr	r1, [r4, #4]
   13010:	blx	r3
   13014:	ldr	r4, [r4, #8]
   13018:	subs	r2, r5, r4
   1301c:	movne	r2, #1
   13020:	ands	r3, r0, #3
   13024:	movne	r3, r2
   13028:	cmp	r3, #0
   1302c:	bne	13004 <__assert_fail@plt+0x1664>
   13030:	cmp	r0, #1
   13034:	beq	13058 <__assert_fail@plt+0x16b8>
   13038:	tst	r0, #12
   1303c:	bne	1305c <__assert_fail@plt+0x16bc>
   13040:	mov	r0, r6
   13044:	ldrd	r4, [sp]
   13048:	ldr	r6, [sp, #8]
   1304c:	ldr	lr, [sp, #12]
   13050:	add	sp, sp, #16
   13054:	b	12ec8 <__assert_fail@plt+0x1528>
   13058:	mov	r0, #4
   1305c:	ldrd	r4, [sp]
   13060:	ldr	r6, [sp, #8]
   13064:	add	sp, sp, #12
   13068:	pop	{pc}		; (ldr pc, [sp], #4)
   1306c:	mvn	r3, r1
   13070:	str	r4, [sp, #-8]!
   13074:	mov	r4, r0
   13078:	cmp	r3, r2
   1307c:	str	lr, [sp, #4]
   13080:	bcc	130c4 <__assert_fail@plt+0x1724>
   13084:	ldr	r0, [r0, #16]
   13088:	add	r3, r1, r2
   1308c:	cmp	r0, r3
   13090:	bcc	130a0 <__assert_fail@plt+0x1700>
   13094:	ldr	r4, [sp]
   13098:	add	sp, sp, #4
   1309c:	pop	{pc}		; (ldr pc, [sp], #4)
   130a0:	mov	r1, r4
   130a4:	mov	r2, #1
   130a8:	ldr	r0, [r4, #12]
   130ac:	str	r3, [r1, #16]!
   130b0:	bl	1b694 <__assert_fail@plt+0x9cf4>
   130b4:	str	r0, [r4, #12]
   130b8:	ldr	r4, [sp]
   130bc:	add	sp, sp, #4
   130c0:	pop	{pc}		; (ldr pc, [sp], #4)
   130c4:	mov	r2, #5
   130c8:	movw	r1, #53360	; 0xd070
   130cc:	movt	r1, #2
   130d0:	mov	r0, #0
   130d4:	bl	11628 <dcgettext@plt>
   130d8:	mov	r2, r0
   130dc:	mov	r1, #0
   130e0:	ldr	r3, [r4, #28]
   130e4:	mov	r0, #1
   130e8:	bl	116d0 <error@plt>
   130ec:	ldr	r3, [r0]
   130f0:	cmn	r3, #1
   130f4:	beq	13250 <__assert_fail@plt+0x18b0>
   130f8:	cmp	r3, #30
   130fc:	strd	r4, [sp, #-16]!
   13100:	mov	r4, r0
   13104:	ldr	r0, [r0, #4]
   13108:	str	r6, [sp, #8]
   1310c:	str	lr, [sp, #12]
   13110:	beq	131f0 <__assert_fail@plt+0x1850>
   13114:	sub	r5, r3, #14
   13118:	add	r5, r5, r0
   1311c:	cmp	r5, #0
   13120:	str	r5, [r4, #4]
   13124:	blt	13258 <__assert_fail@plt+0x18b8>
   13128:	ldr	r0, [r4, #24]
   1312c:	bl	11970 <getc@plt>
   13130:	cmp	r0, #30
   13134:	str	r0, [r4]
   13138:	ble	131b4 <__assert_fail@plt+0x1814>
   1313c:	cmp	r0, #127	; 0x7f
   13140:	add	r6, r5, #1
   13144:	bgt	1316c <__assert_fail@plt+0x17cc>
   13148:	mov	r2, #1
   1314c:	mov	r1, r5
   13150:	mov	r0, r4
   13154:	bl	1306c <__assert_fail@plt+0x16cc>
   13158:	ldr	r2, [r4]
   1315c:	ldr	r3, [r4, #12]
   13160:	strb	r2, [r3, r5]
   13164:	mov	r5, r6
   13168:	b	13128 <__assert_fail@plt+0x1788>
   1316c:	mov	r1, r5
   13170:	mov	r2, #2
   13174:	mov	r0, r4
   13178:	bl	1306c <__assert_fail@plt+0x16cc>
   1317c:	ldr	r2, [r4]
   13180:	mov	r3, r4
   13184:	ldr	r1, [r4, #12]
   13188:	and	r2, r2, #127	; 0x7f
   1318c:	str	r2, [r3], r2
   13190:	ldrb	r3, [r3, #36]	; 0x24
   13194:	strb	r3, [r1, r5]
   13198:	add	r5, r5, #2
   1319c:	ldr	r3, [r4]
   131a0:	ldr	r2, [r4, #12]
   131a4:	add	r3, r4, r3
   131a8:	ldrb	r3, [r3, #164]	; 0xa4
   131ac:	strb	r3, [r2, r6]
   131b0:	b	13128 <__assert_fail@plt+0x1788>
   131b4:	mov	r0, r4
   131b8:	mov	r2, #1
   131bc:	mov	r1, r5
   131c0:	bl	1306c <__assert_fail@plt+0x16cc>
   131c4:	ldr	r3, [r4, #12]
   131c8:	mov	r2, #0
   131cc:	mov	r0, #1
   131d0:	strb	r2, [r3, r5]
   131d4:	ldr	r3, [r4, #12]
   131d8:	ldr	r6, [sp, #8]
   131dc:	str	r5, [r4, #8]
   131e0:	str	r3, [r4, #20]
   131e4:	ldrd	r4, [sp]
   131e8:	add	sp, sp, #12
   131ec:	pop	{pc}		; (ldr pc, [sp], #4)
   131f0:	ldr	r2, [r4, #8]
   131f4:	sub	r3, r0, #14
   131f8:	rsb	r5, r0, #14
   131fc:	cmp	r3, #0
   13200:	str	r3, [r4, #4]
   13204:	ldrd	r0, [r4, #24]
   13208:	subge	r2, r2, r3
   1320c:	add	r3, r4, #32
   13210:	bl	141a8 <__assert_fail@plt+0x2808>
   13214:	cmp	r5, r0
   13218:	bgt	13278 <__assert_fail@plt+0x18d8>
   1321c:	ldr	r5, [r4, #4]
   13220:	add	r5, r0, r5
   13224:	cmp	r5, #0
   13228:	str	r5, [r4, #4]
   1322c:	bge	13128 <__assert_fail@plt+0x1788>
   13230:	movw	r3, #52312	; 0xcc58
   13234:	movt	r3, #2
   13238:	movw	r1, #53432	; 0xd0b8
   1323c:	movt	r1, #2
   13240:	movw	r0, #53460	; 0xd0d4
   13244:	movt	r0, #2
   13248:	mov	r2, #480	; 0x1e0
   1324c:	bl	119a0 <__assert_fail@plt>
   13250:	mov	r0, #8
   13254:	bx	lr
   13258:	movw	r3, #52312	; 0xcc58
   1325c:	movt	r3, #2
   13260:	movw	r1, #53432	; 0xd0b8
   13264:	movt	r1, #2
   13268:	movw	r0, #53460	; 0xd0d4
   1326c:	movt	r0, #2
   13270:	movw	r2, #485	; 0x1e5
   13274:	bl	119a0 <__assert_fail@plt>
   13278:	movw	r3, #52312	; 0xcc58
   1327c:	movt	r3, #2
   13280:	movw	r1, #53432	; 0xd0b8
   13284:	movt	r1, #2
   13288:	movw	r0, #53444	; 0xd0c4
   1328c:	movt	r0, #2
   13290:	movw	r2, #478	; 0x1de
   13294:	bl	119a0 <__assert_fail@plt>
   13298:	strd	r4, [sp, #-16]!
   1329c:	mov	r4, r0
   132a0:	mov	r5, r1
   132a4:	str	r6, [sp, #8]
   132a8:	str	lr, [sp, #12]
   132ac:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   132b0:	cmp	r0, #1
   132b4:	bne	132e0 <__assert_fail@plt+0x1940>
   132b8:	mov	r1, r5
   132bc:	ldr	r0, [r4, #20]
   132c0:	bl	2ba90 <__assert_fail@plt+0x1a0f0>
   132c4:	cmp	r0, #0
   132c8:	ldrd	r4, [sp]
   132cc:	movne	r0, #2
   132d0:	moveq	r0, #4
   132d4:	ldr	r6, [sp, #8]
   132d8:	add	sp, sp, #12
   132dc:	pop	{pc}		; (ldr pc, [sp], #4)
   132e0:	movw	r1, #53432	; 0xd0b8
   132e4:	movt	r1, #2
   132e8:	ldr	r3, [pc, #12]	; 132fc <__assert_fail@plt+0x195c>
   132ec:	movw	r0, #53484	; 0xd0ec
   132f0:	movt	r0, #2
   132f4:	movw	r2, #690	; 0x2b2
   132f8:	bl	119a0 <__assert_fail@plt>
   132fc:	andeq	ip, r2, ip, ror #24
   13300:	strd	r4, [sp, #-16]!
   13304:	mov	r4, r0
   13308:	mov	r5, r1
   1330c:	str	r6, [sp, #8]
   13310:	str	lr, [sp, #12]
   13314:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   13318:	cmp	r0, #1
   1331c:	bne	13348 <__assert_fail@plt+0x19a8>
   13320:	mov	r1, r5
   13324:	ldr	r0, [r4, #20]
   13328:	bl	2af6c <__assert_fail@plt+0x195cc>
   1332c:	cmp	r0, #0
   13330:	ldrd	r4, [sp]
   13334:	movne	r0, #2
   13338:	moveq	r0, #4
   1333c:	ldr	r6, [sp, #8]
   13340:	add	sp, sp, #12
   13344:	pop	{pc}		; (ldr pc, [sp], #4)
   13348:	movw	r1, #53432	; 0xd0b8
   1334c:	movt	r1, #2
   13350:	ldr	r3, [pc, #12]	; 13364 <__assert_fail@plt+0x19c4>
   13354:	movw	r0, #53484	; 0xd0ec
   13358:	movt	r0, #2
   1335c:	movw	r2, #714	; 0x2ca
   13360:	bl	119a0 <__assert_fail@plt>
   13364:	muleq	r2, r4, ip
   13368:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1336c:	movw	r4, #61992	; 0xf228
   13370:	movt	r4, #3
   13374:	strd	r6, [sp, #8]
   13378:	mov	r7, r2
   1337c:	strd	r8, [sp, #16]
   13380:	mov	r8, r1
   13384:	strd	sl, [sp, #24]
   13388:	mov	sl, r0
   1338c:	str	lr, [sp, #32]
   13390:	sub	sp, sp, #2960	; 0xb90
   13394:	sub	sp, sp, #4
   13398:	ldr	r2, [sp, #3000]	; 0xbb8
   1339c:	str	r2, [sp, #40]	; 0x28
   133a0:	ldr	r2, [sp, #3004]	; 0xbbc
   133a4:	str	r2, [sp, #44]	; 0x2c
   133a8:	ldr	r2, [sp, #3012]	; 0xbc4
   133ac:	cmp	r2, #0
   133b0:	ldr	r2, [r4, #20]
   133b4:	str	r2, [sp, #24]
   133b8:	beq	133c8 <__assert_fail@plt+0x1a28>
   133bc:	ldr	r2, [sp, #3040]	; 0xbe0
   133c0:	orr	r2, r2, #4194304	; 0x400000
   133c4:	str	r2, [sp, #3040]	; 0xbe0
   133c8:	mov	r2, #0
   133cc:	mov	r1, #128	; 0x80
   133d0:	mov	r0, r1
   133d4:	str	r2, [r4]
   133d8:	str	r2, [r4, #8]
   133dc:	str	r2, [r4, #16]
   133e0:	strb	r2, [r4, #24]
   133e4:	str	r2, [sp, #64]	; 0x40
   133e8:	str	r2, [sp, #68]	; 0x44
   133ec:	str	r1, [sp, #76]	; 0x4c
   133f0:	str	r3, [sp, #84]	; 0x54
   133f4:	str	r7, [sp, #88]	; 0x58
   133f8:	str	r2, [sp, #92]	; 0x5c
   133fc:	bl	1b50c <__assert_fail@plt+0x9b6c>
   13400:	mov	r2, #2
   13404:	mov	r1, #1
   13408:	ldr	r3, [sp, #84]	; 0x54
   1340c:	str	r0, [sp, #72]	; 0x48
   13410:	bl	116ac <fread@plt>
   13414:	cmp	r0, #2
   13418:	mov	r6, r0
   1341c:	bhi	13e88 <__assert_fail@plt+0x24e8>
   13420:	bne	13760 <__assert_fail@plt+0x1dc0>
   13424:	ldr	r9, [sp, #72]	; 0x48
   13428:	ldrb	r5, [r9, #1]
   1342c:	cmp	r5, #0
   13430:	bne	13760 <__assert_fail@plt+0x1dc0>
   13434:	bl	11778 <__ctype_b_loc@plt>
   13438:	ldrb	r3, [r9]
   1343c:	ldr	r1, [r0]
   13440:	lsl	r2, r3, #1
   13444:	ldrh	r2, [r1, r2]
   13448:	tst	r2, #2048	; 0x800
   1344c:	beq	13760 <__assert_fail@plt+0x1dc0>
   13450:	sub	r6, r3, #48	; 0x30
   13454:	cmp	r6, #1
   13458:	bgt	13930 <__assert_fail@plt+0x1f90>
   1345c:	bne	1348c <__assert_fail@plt+0x1aec>
   13460:	ldr	r3, [r4, #20]
   13464:	cmp	r3, #2
   13468:	beq	13e2c <__assert_fail@plt+0x248c>
   1346c:	ldr	r3, [sp, #24]
   13470:	cmp	r3, #1
   13474:	beq	1348c <__assert_fail@plt+0x1aec>
   13478:	ldr	r3, [sp, #3016]	; 0xbc8
   1347c:	ldr	r2, [sp, #3028]	; 0xbd4
   13480:	orrs	r3, r3, r2
   13484:	streq	r6, [sp, #24]
   13488:	bne	13a04 <__assert_fail@plt+0x2064>
   1348c:	movw	r3, #53500	; 0xd0fc
   13490:	movt	r3, #2
   13494:	movw	r0, #16180	; 0x3f34
   13498:	movt	r0, #1
   1349c:	str	r3, [sp, #52]	; 0x34
   134a0:	mov	r3, #1
   134a4:	mov	r1, #0
   134a8:	str	r3, [sp, #36]	; 0x24
   134ac:	bl	12ab0 <__assert_fail@plt+0x1110>
   134b0:	mov	r3, #0
   134b4:	str	r3, [sp, #48]	; 0x30
   134b8:	ldr	r3, [sp, #3020]	; 0xbcc
   134bc:	cmp	r3, #0
   134c0:	bne	13824 <__assert_fail@plt+0x1e84>
   134c4:	cmp	sl, #0
   134c8:	ble	135d4 <__assert_fail@plt+0x1c34>
   134cc:	movw	r3, #54040	; 0xd318
   134d0:	movt	r3, #2
   134d4:	sub	r7, r8, #4
   134d8:	mov	r5, #0
   134dc:	str	r3, [sp, #20]
   134e0:	movw	r3, #11704	; 0x2db8
   134e4:	movt	r3, #1
   134e8:	str	r3, [sp, #28]
   134ec:	movw	r3, #11664	; 0x2d90
   134f0:	movt	r3, #1
   134f4:	str	r3, [sp, #32]
   134f8:	b	13538 <__assert_fail@plt+0x1b98>
   134fc:	mov	r0, r6
   13500:	ldr	r1, [sp, #20]
   13504:	bl	11904 <strpbrk@plt>
   13508:	cmp	r0, #0
   1350c:	beq	1384c <__assert_fail@plt+0x1eac>
   13510:	ldr	r3, [sp, #3012]	; 0xbc4
   13514:	cmp	r3, #0
   13518:	beq	13838 <__assert_fail@plt+0x1e98>
   1351c:	movw	r0, #11796	; 0x2e14
   13520:	movt	r0, #1
   13524:	mov	r1, r6
   13528:	bl	12ab0 <__assert_fail@plt+0x1110>
   1352c:	add	r5, r5, #1
   13530:	cmp	r5, sl
   13534:	beq	135d4 <__assert_fail@plt+0x1c34>
   13538:	ldr	r3, [sp, #3036]	; 0xbdc
   1353c:	mov	r8, #1
   13540:	strb	r8, [r4, #24]
   13544:	ldr	r6, [r7, #4]!
   13548:	cmp	r3, #0
   1354c:	beq	134fc <__assert_fail@plt+0x1b5c>
   13550:	mov	r9, #0
   13554:	mov	r0, #32
   13558:	bl	1b50c <__assert_fail@plt+0x9b6c>
   1355c:	mov	r1, r9
   13560:	mov	r2, #32
   13564:	mov	fp, r0
   13568:	bl	11814 <memset@plt>
   1356c:	ldr	r0, [sp, #3040]	; 0xbe0
   13570:	bl	29c94 <__assert_fail@plt+0x182f4>
   13574:	mov	r2, #100	; 0x64
   13578:	mov	r0, r2
   1357c:	str	r2, [fp, #4]
   13580:	bl	1b50c <__assert_fail@plt+0x9b6c>
   13584:	ldr	r3, [sp, #3040]	; 0xbe0
   13588:	str	r0, [fp]
   1358c:	mov	r0, r6
   13590:	str	r3, [fp, #12]
   13594:	str	r9, [fp, #16]
   13598:	str	r9, [fp, #20]
   1359c:	bl	117a8 <strlen@plt>
   135a0:	mov	r1, r0
   135a4:	mov	r2, fp
   135a8:	mov	r0, r6
   135ac:	bl	29c10 <__assert_fail@plt+0x18270>
   135b0:	cmp	r0, #0
   135b4:	bne	13e70 <__assert_fail@plt+0x24d0>
   135b8:	mov	r1, fp
   135bc:	movw	r0, #11848	; 0x2e48
   135c0:	movt	r0, #1
   135c4:	add	r5, r5, #1
   135c8:	bl	12ab0 <__assert_fail@plt+0x1110>
   135cc:	cmp	r5, sl
   135d0:	bne	13538 <__assert_fail@plt+0x1b98>
   135d4:	ldr	r3, [sp, #24]
   135d8:	ldr	r5, [r4, #8]
   135dc:	cmp	r3, #1
   135e0:	beq	138d4 <__assert_fail@plt+0x1f34>
   135e4:	cmp	r3, #2
   135e8:	bne	13618 <__assert_fail@plt+0x1c78>
   135ec:	movw	r3, #61868	; 0xf1ac
   135f0:	movt	r3, #3
   135f4:	ldr	r1, [r3, #4]
   135f8:	mov	r3, #1
   135fc:	strb	r3, [r4, #24]
   13600:	cmp	r1, #0
   13604:	beq	139d0 <__assert_fail@plt+0x2030>
   13608:	movw	r0, #11620	; 0x2d64
   1360c:	movt	r0, #1
   13610:	mov	r1, #0
   13614:	bl	12ab0 <__assert_fail@plt+0x1110>
   13618:	ldr	r3, [sp, #3028]	; 0xbd4
   1361c:	cmp	r3, #0
   13620:	bne	1390c <__assert_fail@plt+0x1f6c>
   13624:	ldr	r3, [sp, #3016]	; 0xbc8
   13628:	cmp	r3, #0
   1362c:	beq	1364c <__assert_fail@plt+0x1cac>
   13630:	ldrb	r1, [r4, #80]	; 0x50
   13634:	cmp	r1, #0
   13638:	beq	13920 <__assert_fail@plt+0x1f80>
   1363c:	movw	r0, #11076	; 0x2b44
   13640:	movt	r0, #1
   13644:	mov	r1, #0
   13648:	bl	12ab0 <__assert_fail@plt+0x1110>
   1364c:	ldr	r3, [sp, #3024]	; 0xbd0
   13650:	ldr	r1, [pc, #2248]	; 13f20 <__assert_fail@plt+0x2580>
   13654:	cmp	r3, #0
   13658:	movwne	r0, #10596	; 0x2964
   1365c:	movweq	r0, #10652	; 0x299c
   13660:	movtne	r0, #1
   13664:	movteq	r0, #1
   13668:	bl	12ab0 <__assert_fail@plt+0x1110>
   1366c:	cmp	sl, #1
   13670:	ble	13898 <__assert_fail@plt+0x1ef8>
   13674:	ldr	r2, [sp, #3032]	; 0xbd8
   13678:	ldr	r3, [r5, #8]
   1367c:	cmp	r2, #0
   13680:	str	r3, [r4, #16]
   13684:	movwne	r3, #12252	; 0x2fdc
   13688:	movweq	r3, #12096	; 0x2f40
   1368c:	movtne	r3, #1
   13690:	movteq	r3, #1
   13694:	str	r3, [r4, #104]	; 0x68
   13698:	ldr	r3, [sp, #3028]	; 0xbd4
   1369c:	cmp	r3, #0
   136a0:	bne	138b0 <__assert_fail@plt+0x1f10>
   136a4:	ldr	r0, [sp, #84]	; 0x54
   136a8:	bl	11970 <getc@plt>
   136ac:	ldr	r1, [sp, #36]	; 0x24
   136b0:	adds	r2, r0, #1
   136b4:	mov	r3, r0
   136b8:	movne	r2, #1
   136bc:	str	r0, [sp, #60]	; 0x3c
   136c0:	tst	r2, r1
   136c4:	beq	136e4 <__assert_fail@plt+0x1d44>
   136c8:	b	13a48 <__assert_fail@plt+0x20a8>
   136cc:	add	r0, sp, #60	; 0x3c
   136d0:	ldr	r3, [r4, #104]	; 0x68
   136d4:	blx	r3
   136d8:	cmp	r0, #8
   136dc:	beq	136ec <__assert_fail@plt+0x1d4c>
   136e0:	ldr	r3, [sp, #60]	; 0x3c
   136e4:	cmn	r3, #1
   136e8:	bne	136cc <__assert_fail@plt+0x1d2c>
   136ec:	ldr	r3, [sp, #3028]	; 0xbd4
   136f0:	cmp	r3, #0
   136f4:	beq	1372c <__assert_fail@plt+0x1d8c>
   136f8:	ldr	r3, [sp, #48]	; 0x30
   136fc:	cmp	r3, #0
   13700:	bne	13d08 <__assert_fail@plt+0x2368>
   13704:	ldr	r3, [sp, #40]	; 0x28
   13708:	ldr	r2, [sp, #44]	; 0x2c
   1370c:	orrs	r3, r3, r2
   13710:	ldr	r2, [sp, #3008]	; 0xbc0
   13714:	movne	r3, #1
   13718:	moveq	r3, #0
   1371c:	cmp	r2, #0
   13720:	movne	r3, #1
   13724:	cmp	r3, #0
   13728:	bne	13a98 <__assert_fail@plt+0x20f8>
   1372c:	ldr	r0, [sp, #84]	; 0x54
   13730:	bl	115b0 <ferror@plt>
   13734:	cmp	r0, #0
   13738:	bne	13a60 <__assert_fail@plt+0x20c0>
   1373c:	ldr	r0, [r4, #96]	; 0x60
   13740:	add	sp, sp, #2960	; 0xb90
   13744:	add	sp, sp, #4
   13748:	ldrd	r4, [sp]
   1374c:	ldrd	r6, [sp, #8]
   13750:	ldrd	r8, [sp, #16]
   13754:	ldrd	sl, [sp, #24]
   13758:	add	sp, sp, #32
   1375c:	pop	{pc}		; (ldr pc, [sp], #4)
   13760:	mov	r2, #0
   13764:	mov	r1, #10
   13768:	add	r0, sp, #60	; 0x3c
   1376c:	bl	1306c <__assert_fail@plt+0x16cc>
   13770:	ldr	r0, [sp, #72]	; 0x48
   13774:	rsb	r2, r6, #10
   13778:	mov	r1, #1
   1377c:	ldr	r3, [sp, #84]	; 0x54
   13780:	add	r0, r0, r6
   13784:	bl	116ac <fread@plt>
   13788:	add	r6, r6, r0
   1378c:	cmp	r6, #9
   13790:	bls	13d5c <__assert_fail@plt+0x23bc>
   13794:	mov	r2, #10
   13798:	ldr	r1, [pc, #1924]	; 13f24 <__assert_fail@plt+0x2584>
   1379c:	ldr	r0, [sp, #72]	; 0x48
   137a0:	bl	1161c <memcmp@plt>
   137a4:	subs	r5, r0, #0
   137a8:	str	r5, [sp, #48]	; 0x30
   137ac:	beq	139e0 <__assert_fail@plt+0x2040>
   137b0:	add	r0, sp, #60	; 0x3c
   137b4:	mov	r2, #0
   137b8:	mov	r1, #256	; 0x100
   137bc:	bl	1306c <__assert_fail@plt+0x16cc>
   137c0:	cmp	r6, #255	; 0xff
   137c4:	ble	13d6c <__assert_fail@plt+0x23cc>
   137c8:	ldr	r2, [sp, #72]	; 0x48
   137cc:	add	r3, sp, #95	; 0x5f
   137d0:	add	r0, sp, #223	; 0xdf
   137d4:	add	r2, r2, #1
   137d8:	ldrb	r1, [r2, #-1]
   137dc:	strb	r1, [r3, #1]!
   137e0:	cmp	r0, r3
   137e4:	ldrb	r1, [r2], #2
   137e8:	strb	r1, [r3, #128]	; 0x80
   137ec:	bne	137d8 <__assert_fail@plt+0x1e38>
   137f0:	mov	r1, #0
   137f4:	movw	r3, #53524	; 0xd114
   137f8:	movt	r3, #2
   137fc:	movw	r0, #12524	; 0x30ec
   13800:	movt	r0, #1
   13804:	str	r1, [sp, #36]	; 0x24
   13808:	str	r3, [sp, #52]	; 0x34
   1380c:	bl	12ab0 <__assert_fail@plt+0x1110>
   13810:	mov	r3, #1
   13814:	str	r3, [sp, #48]	; 0x30
   13818:	ldr	r3, [sp, #3020]	; 0xbcc
   1381c:	cmp	r3, #0
   13820:	beq	134c4 <__assert_fail@plt+0x1b24>
   13824:	movw	r0, #11936	; 0x2ea0
   13828:	movt	r0, #1
   1382c:	mov	r1, #0
   13830:	bl	12ab0 <__assert_fail@plt+0x1110>
   13834:	b	134c4 <__assert_fail@plt+0x1b24>
   13838:	mov	r1, r6
   1383c:	movw	r0, #11744	; 0x2de0
   13840:	movt	r0, #1
   13844:	bl	12ab0 <__assert_fail@plt+0x1110>
   13848:	b	1352c <__assert_fail@plt+0x1b8c>
   1384c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   13850:	cmp	r0, #1
   13854:	beq	13878 <__assert_fail@plt+0x1ed8>
   13858:	ldr	r0, [sp, #28]
   1385c:	ldr	r2, [sp, #3012]	; 0xbc4
   13860:	ldr	r3, [sp, #32]
   13864:	cmp	r2, #0
   13868:	moveq	r0, r3
   1386c:	mov	r1, r6
   13870:	bl	12ab0 <__assert_fail@plt+0x1110>
   13874:	b	1352c <__assert_fail@plt+0x1b8c>
   13878:	ldr	r2, [sp, #3012]	; 0xbc4
   1387c:	movw	r3, #12952	; 0x3298
   13880:	movt	r3, #1
   13884:	movw	r0, #13056	; 0x3300
   13888:	movt	r0, #1
   1388c:	cmp	r2, #0
   13890:	moveq	r0, r3
   13894:	b	1386c <__assert_fail@plt+0x1ecc>
   13898:	movw	r3, #10480	; 0x28f0
   1389c:	movt	r3, #1
   138a0:	str	r3, [r4, #104]	; 0x68
   138a4:	ldr	r3, [sp, #3028]	; 0xbd4
   138a8:	cmp	r3, #0
   138ac:	beq	136a4 <__assert_fail@plt+0x1d04>
   138b0:	mov	r2, #5
   138b4:	movw	r1, #54048	; 0xd320
   138b8:	movt	r1, #2
   138bc:	mov	r0, #0
   138c0:	bl	11628 <dcgettext@plt>
   138c4:	ldr	r2, [sp, #52]	; 0x34
   138c8:	ldr	r1, [sp, #88]	; 0x58
   138cc:	bl	11550 <printf@plt>
   138d0:	b	136a4 <__assert_fail@plt+0x1d04>
   138d4:	movw	r3, #61868	; 0xf1ac
   138d8:	movt	r3, #3
   138dc:	ldr	r2, [sp, #24]
   138e0:	ldr	r1, [r3, #4]
   138e4:	strb	r2, [r4, #24]
   138e8:	cmp	r1, #0
   138ec:	beq	139c0 <__assert_fail@plt+0x2020>
   138f0:	movw	r0, #11576	; 0x2d38
   138f4:	movt	r0, #1
   138f8:	mov	r1, #0
   138fc:	bl	12ab0 <__assert_fail@plt+0x1110>
   13900:	ldr	r3, [sp, #3028]	; 0xbd4
   13904:	cmp	r3, #0
   13908:	beq	13624 <__assert_fail@plt+0x1c84>
   1390c:	movw	r0, #11176	; 0x2ba8
   13910:	movt	r0, #1
   13914:	ldr	r1, [pc, #1548]	; 13f28 <__assert_fail@plt+0x2588>
   13918:	bl	12ab0 <__assert_fail@plt+0x1110>
   1391c:	b	13624 <__assert_fail@plt+0x1c84>
   13920:	movw	r0, #11012	; 0x2b04
   13924:	movt	r0, #1
   13928:	bl	12ab0 <__assert_fail@plt+0x1110>
   1392c:	b	1364c <__assert_fail@plt+0x1cac>
   13930:	ldr	r7, [sp, #88]	; 0x58
   13934:	mov	r2, #5
   13938:	movw	r1, #53540	; 0xd124
   1393c:	movt	r1, #2
   13940:	mov	r0, r5
   13944:	bl	11628 <dcgettext@plt>
   13948:	mov	r4, r0
   1394c:	mov	r1, #8
   13950:	mov	r0, r5
   13954:	mov	r2, r7
   13958:	bl	1abd0 <__assert_fail@plt+0x9230>
   1395c:	ldrb	ip, [r9, #1]
   13960:	mov	r3, r0
   13964:	mov	r2, r4
   13968:	mov	r1, r5
   1396c:	mov	r0, r5
   13970:	str	ip, [sp]
   13974:	bl	116d0 <error@plt>
   13978:	mov	r2, #5
   1397c:	movw	r1, #53680	; 0xd1b0
   13980:	movt	r1, #2
   13984:	mov	r0, r5
   13988:	bl	11628 <dcgettext@plt>
   1398c:	mov	r4, r0
   13990:	mov	r1, #8
   13994:	ldr	r2, [sp, #88]	; 0x58
   13998:	mov	r0, r5
   1399c:	bl	1abd0 <__assert_fail@plt+0x9230>
   139a0:	mov	r3, r0
   139a4:	mov	r2, r4
   139a8:	str	r6, [sp]
   139ac:	mov	r0, r5
   139b0:	mov	r1, r5
   139b4:	bl	116d0 <error@plt>
   139b8:	mov	r0, r5
   139bc:	b	13740 <__assert_fail@plt+0x1da0>
   139c0:	movw	r0, #11488	; 0x2ce0
   139c4:	movt	r0, #1
   139c8:	bl	12ab0 <__assert_fail@plt+0x1110>
   139cc:	b	13618 <__assert_fail@plt+0x1c78>
   139d0:	movw	r0, #11532	; 0x2d0c
   139d4:	movt	r0, #1
   139d8:	bl	12ab0 <__assert_fail@plt+0x1110>
   139dc:	b	13618 <__assert_fail@plt+0x1c78>
   139e0:	movw	r3, #53508	; 0xd104
   139e4:	movt	r3, #2
   139e8:	movw	r0, #16180	; 0x3f34
   139ec:	movt	r0, #1
   139f0:	mov	r1, r5
   139f4:	str	r3, [sp, #52]	; 0x34
   139f8:	bl	12ab0 <__assert_fail@plt+0x1110>
   139fc:	str	r5, [sp, #36]	; 0x24
   13a00:	b	134b8 <__assert_fail@plt+0x1b18>
   13a04:	mov	r2, #5
   13a08:	mov	r0, r5
   13a0c:	movw	r1, #53928	; 0xd2a8
   13a10:	movt	r1, #2
   13a14:	bl	11628 <dcgettext@plt>
   13a18:	mov	r7, r0
   13a1c:	mov	r1, #8
   13a20:	ldr	r2, [sp, #88]	; 0x58
   13a24:	mov	r0, r5
   13a28:	str	r6, [sp, #24]
   13a2c:	bl	1abd0 <__assert_fail@plt+0x9230>
   13a30:	mov	r3, r0
   13a34:	mov	r2, r7
   13a38:	mov	r1, r5
   13a3c:	mov	r0, r5
   13a40:	bl	116d0 <error@plt>
   13a44:	b	1348c <__assert_fail@plt+0x1aec>
   13a48:	ldr	r1, [sp, #84]	; 0x54
   13a4c:	bl	117cc <ungetc@plt>
   13a50:	mov	r2, #0
   13a54:	mov	r3, r2
   13a58:	str	r2, [sp, #60]	; 0x3c
   13a5c:	b	136e4 <__assert_fail@plt+0x1d44>
   13a60:	bl	117d8 <__errno_location@plt>
   13a64:	ldr	r4, [r0]
   13a68:	mov	r1, #8
   13a6c:	mov	r0, #0
   13a70:	ldr	r2, [sp, #88]	; 0x58
   13a74:	bl	1abd0 <__assert_fail@plt+0x9230>
   13a78:	mov	r3, r0
   13a7c:	movw	r2, #56720	; 0xdd90
   13a80:	movt	r2, #2
   13a84:	mov	r0, #0
   13a88:	mov	r1, r4
   13a8c:	bl	116d0 <error@plt>
   13a90:	mov	r0, #0
   13a94:	b	13740 <__assert_fail@plt+0x1da0>
   13a98:	cmp	r2, #0
   13a9c:	addeq	r5, sp, #2304	; 0x900
   13aa0:	addeq	r5, r5, #4
   13aa4:	beq	13b48 <__assert_fail@plt+0x21a8>
   13aa8:	ldr	r0, [sp, #3008]	; 0xbc0
   13aac:	add	r5, sp, #2304	; 0x900
   13ab0:	bl	1173c <localtime@plt>
   13ab4:	subs	r6, r0, #0
   13ab8:	add	r5, r5, #4
   13abc:	beq	13b48 <__assert_fail@plt+0x21a8>
   13ac0:	movw	r2, #54252	; 0xd3ec
   13ac4:	movt	r2, #2
   13ac8:	mov	r0, r5
   13acc:	mov	r3, r6
   13ad0:	mov	r1, #20
   13ad4:	bl	11724 <strftime@plt>
   13ad8:	cmp	r0, #19
   13adc:	bne	13ef8 <__assert_fail@plt+0x2558>
   13ae0:	ldrb	r0, [sp, #2327]	; 0x917
   13ae4:	cmp	r0, #0
   13ae8:	bne	13edc <__assert_fail@plt+0x253c>
   13aec:	ldrb	r3, [sp, #2326]	; 0x916
   13af0:	cmp	r3, #0
   13af4:	beq	13ec0 <__assert_fail@plt+0x2520>
   13af8:	mov	r2, #5
   13afc:	movw	r1, #54364	; 0xd45c
   13b00:	movt	r1, #2
   13b04:	bl	11628 <dcgettext@plt>
   13b08:	ldr	r3, [sp, #3008]	; 0xbc0
   13b0c:	mov	r1, r5
   13b10:	ldr	r2, [r3, #4]
   13b14:	bl	11550 <printf@plt>
   13b18:	mov	r3, r6
   13b1c:	movw	r2, #54404	; 0xd484
   13b20:	movt	r2, #2
   13b24:	mov	r1, #20
   13b28:	mov	r0, r5
   13b2c:	bl	11724 <strftime@plt>
   13b30:	cmp	r0, #5
   13b34:	bne	13ea4 <__assert_fail@plt+0x2504>
   13b38:	movw	r0, #54424	; 0xd498
   13b3c:	movt	r0, #2
   13b40:	mov	r1, r5
   13b44:	bl	11550 <printf@plt>
   13b48:	ldr	fp, [sp, #40]	; 0x28
   13b4c:	mov	r8, #5
   13b50:	mov	r6, #1
   13b54:	mov	r7, #0
   13b58:	movw	r2, #54432	; 0xd4a0
   13b5c:	movt	r2, #2
   13b60:	movw	r1, #54464	; 0xd4c0
   13b64:	movt	r1, #2
   13b68:	mov	r0, #0
   13b6c:	str	r8, [sp]
   13b70:	mov	r3, fp
   13b74:	bl	11994 <dcngettext@plt>
   13b78:	mov	r3, #0
   13b7c:	add	r2, sp, #352	; 0x160
   13b80:	strd	r6, [sp]
   13b84:	mov	r1, r3
   13b88:	mov	r9, r0
   13b8c:	strd	r6, [sp, #8]
   13b90:	mov	r0, fp
   13b94:	bl	14c40 <__assert_fail@plt+0x32a0>
   13b98:	mov	r1, r0
   13b9c:	mov	r0, r9
   13ba0:	bl	11550 <printf@plt>
   13ba4:	ldrb	r0, [r4, #24]
   13ba8:	mov	r2, r8
   13bac:	cmp	r0, #0
   13bb0:	beq	13dcc <__assert_fail@plt+0x242c>
   13bb4:	movw	r1, #54496	; 0xd4e0
   13bb8:	movt	r1, #2
   13bbc:	mov	r0, #0
   13bc0:	bl	11628 <dcgettext@plt>
   13bc4:	mov	r8, r0
   13bc8:	mov	r6, #1
   13bcc:	mov	r7, #0
   13bd0:	ldrd	r0, [r4, #40]	; 0x28
   13bd4:	mov	r3, #0
   13bd8:	add	r2, sp, #352	; 0x160
   13bdc:	strd	r6, [sp]
   13be0:	strd	r6, [sp, #8]
   13be4:	bl	14c40 <__assert_fail@plt+0x32a0>
   13be8:	mov	r1, r0
   13bec:	mov	r0, r8
   13bf0:	bl	11550 <printf@plt>
   13bf4:	mov	r2, #5
   13bf8:	movw	r1, #54540	; 0xd50c
   13bfc:	movt	r1, #2
   13c00:	mov	r0, #0
   13c04:	bl	11628 <dcgettext@plt>
   13c08:	mov	r8, r0
   13c0c:	add	r2, sp, #352	; 0x160
   13c10:	strd	r6, [sp]
   13c14:	mov	r3, #0
   13c18:	strd	r6, [sp, #8]
   13c1c:	ldrd	r0, [r4, #48]	; 0x30
   13c20:	bl	14c40 <__assert_fail@plt+0x32a0>
   13c24:	mov	r9, r0
   13c28:	mov	r3, #0
   13c2c:	strd	r6, [sp]
   13c30:	add	r2, sp, #1004	; 0x3ec
   13c34:	strd	r6, [sp, #8]
   13c38:	ldrd	r0, [r4, #56]	; 0x38
   13c3c:	bl	14c40 <__assert_fail@plt+0x32a0>
   13c40:	add	r2, sp, #1648	; 0x670
   13c44:	mov	r3, #0
   13c48:	strd	r6, [sp]
   13c4c:	add	r2, r2, #8
   13c50:	strd	r6, [sp, #8]
   13c54:	str	r0, [sp, #20]
   13c58:	ldrd	r0, [r4, #64]	; 0x40
   13c5c:	bl	14c40 <__assert_fail@plt+0x32a0>
   13c60:	mov	fp, r0
   13c64:	mov	r2, r5
   13c68:	strd	r6, [sp]
   13c6c:	mov	r3, #0
   13c70:	strd	r6, [sp, #8]
   13c74:	ldrd	r0, [r4, #72]	; 0x48
   13c78:	bl	14c40 <__assert_fail@plt+0x32a0>
   13c7c:	mov	r3, fp
   13c80:	mov	r1, r9
   13c84:	str	r0, [sp]
   13c88:	mov	r0, r8
   13c8c:	ldr	r2, [sp, #20]
   13c90:	bl	11550 <printf@plt>
   13c94:	cmp	sl, #0
   13c98:	bne	13cfc <__assert_fail@plt+0x235c>
   13c9c:	ldrb	r3, [r4, #24]
   13ca0:	cmp	r3, #0
   13ca4:	bne	13dfc <__assert_fail@plt+0x245c>
   13ca8:	ldrd	r2, [r4, #48]	; 0x30
   13cac:	mov	r0, sl
   13cb0:	orrs	r3, r2, r3
   13cb4:	beq	13e58 <__assert_fail@plt+0x24b8>
   13cb8:	mov	r2, #5
   13cbc:	movw	r1, #54808	; 0xd618
   13cc0:	movt	r1, #2
   13cc4:	bl	11628 <dcgettext@plt>
   13cc8:	mov	r5, r0
   13ccc:	ldrd	r0, [r4, #48]	; 0x30
   13cd0:	bl	2c9a8 <__assert_fail@plt+0x1b008>
   13cd4:	vldr	s15, [sp, #40]	; 0x28
   13cd8:	vmov	d6, r0, r1
   13cdc:	mov	r0, r5
   13ce0:	vldr	d5, [pc, #560]	; 13f18 <__assert_fail@plt+0x2578>
   13ce4:	vcvt.f64.u32	d7, s15
   13ce8:	vsub.f64	d7, d6, d7
   13cec:	vmul.f64	d7, d7, d5
   13cf0:	vdiv.f64	d7, d7, d6
   13cf4:	vmov	r2, r3, d7
   13cf8:	bl	11550 <printf@plt>
   13cfc:	mov	r0, #10
   13d00:	bl	11820 <putchar@plt>
   13d04:	b	1372c <__assert_fail@plt+0x1d8c>
   13d08:	mov	r2, #5
   13d0c:	movw	r1, #54084	; 0xd344
   13d10:	movt	r1, #2
   13d14:	mov	r0, #0
   13d18:	bl	11628 <dcgettext@plt>
   13d1c:	mov	r5, r0
   13d20:	movw	r1, #54140	; 0xd37c
   13d24:	movt	r1, #2
   13d28:	mov	r2, #5
   13d2c:	mov	r0, #0
   13d30:	bl	11628 <dcgettext@plt>
   13d34:	ldr	r3, [sp, #92]	; 0x5c
   13d38:	cmp	r3, #1
   13d3c:	beq	13e18 <__assert_fail@plt+0x2478>
   13d40:	cmp	r3, #2
   13d44:	bne	13de0 <__assert_fail@plt+0x2440>
   13d48:	mov	r1, r0
   13d4c:	movw	r0, #56720	; 0xdd90
   13d50:	movt	r0, #2
   13d54:	bl	11550 <printf@plt>
   13d58:	b	13704 <__assert_fail@plt+0x1d64>
   13d5c:	add	r0, sp, #60	; 0x3c
   13d60:	mov	r2, #0
   13d64:	mov	r1, #256	; 0x100
   13d68:	bl	1306c <__assert_fail@plt+0x16cc>
   13d6c:	ldr	r0, [sp, #72]	; 0x48
   13d70:	rsb	r2, r6, #256	; 0x100
   13d74:	mov	r1, #1
   13d78:	ldr	r3, [sp, #84]	; 0x54
   13d7c:	add	r0, r0, r6
   13d80:	bl	116ac <fread@plt>
   13d84:	add	r6, r0, r6
   13d88:	cmp	r6, #256	; 0x100
   13d8c:	beq	137c8 <__assert_fail@plt+0x1e28>
   13d90:	mov	r2, #5
   13d94:	movw	r1, #53984	; 0xd2e0
   13d98:	movt	r1, #2
   13d9c:	mov	r0, #0
   13da0:	bl	11628 <dcgettext@plt>
   13da4:	mov	r4, r0
   13da8:	mov	r2, r7
   13dac:	mov	r1, #8
   13db0:	mov	r0, #0
   13db4:	bl	1abd0 <__assert_fail@plt+0x9230>
   13db8:	mov	r3, r0
   13dbc:	mov	r2, r4
   13dc0:	mov	r1, #0
   13dc4:	mov	r0, #1
   13dc8:	bl	116d0 <error@plt>
   13dcc:	movw	r1, #54520	; 0xd4f8
   13dd0:	movt	r1, #2
   13dd4:	bl	11628 <dcgettext@plt>
   13dd8:	mov	r8, r0
   13ddc:	b	13bc8 <__assert_fail@plt+0x2228>
   13de0:	mov	r2, #5
   13de4:	movw	r1, #54192	; 0xd3b0
   13de8:	movt	r1, #2
   13dec:	mov	r0, #0
   13df0:	bl	11628 <dcgettext@plt>
   13df4:	bl	11550 <printf@plt>
   13df8:	b	13704 <__assert_fail@plt+0x1d64>
   13dfc:	mov	r2, #5
   13e00:	mov	r0, sl
   13e04:	movw	r1, #54720	; 0xd5c0
   13e08:	movt	r1, #2
   13e0c:	bl	11628 <dcgettext@plt>
   13e10:	bl	11550 <printf@plt>
   13e14:	b	13cfc <__assert_fail@plt+0x235c>
   13e18:	mov	r1, r5
   13e1c:	movw	r0, #56720	; 0xdd90
   13e20:	movt	r0, #2
   13e24:	bl	11550 <printf@plt>
   13e28:	b	13704 <__assert_fail@plt+0x1d64>
   13e2c:	mov	r2, #5
   13e30:	movw	r1, #53756	; 0xd1fc
   13e34:	movt	r1, #2
   13e38:	mov	r0, r5
   13e3c:	bl	11628 <dcgettext@plt>
   13e40:	mov	r2, r0
   13e44:	mov	r1, r5
   13e48:	mov	r0, r5
   13e4c:	bl	116d0 <error@plt>
   13e50:	mov	r0, r5
   13e54:	b	13740 <__assert_fail@plt+0x1da0>
   13e58:	mov	r2, #5
   13e5c:	movw	r1, #54856	; 0xd648
   13e60:	movt	r1, #2
   13e64:	bl	11628 <dcgettext@plt>
   13e68:	bl	11550 <printf@plt>
   13e6c:	b	13cfc <__assert_fail@plt+0x235c>
   13e70:	mov	r3, r0
   13e74:	movw	r2, #56720	; 0xdd90
   13e78:	movt	r2, #2
   13e7c:	mov	r1, r9
   13e80:	mov	r0, r8
   13e84:	bl	116d0 <error@plt>
   13e88:	movw	r1, #53432	; 0xd0b8
   13e8c:	movt	r1, #2
   13e90:	ldr	r3, [pc, #148]	; 13f2c <__assert_fail@plt+0x258c>
   13e94:	movw	r0, #53528	; 0xd118
   13e98:	movt	r0, #2
   13e9c:	movw	r2, #935	; 0x3a7
   13ea0:	bl	119a0 <__assert_fail@plt>
   13ea4:	movw	r1, #53432	; 0xd0b8
   13ea8:	movt	r1, #2
   13eac:	ldr	r3, [pc, #124]	; 13f30 <__assert_fail@plt+0x2590>
   13eb0:	movw	r0, #54408	; 0xd488
   13eb4:	movt	r0, #2
   13eb8:	movw	r2, #851	; 0x353
   13ebc:	bl	119a0 <__assert_fail@plt>
   13ec0:	movw	r1, #53432	; 0xd0b8
   13ec4:	movt	r1, #2
   13ec8:	ldr	r3, [pc, #96]	; 13f30 <__assert_fail@plt+0x2590>
   13ecc:	movw	r0, #54332	; 0xd43c
   13ed0:	movt	r0, #2
   13ed4:	movw	r2, #847	; 0x34f
   13ed8:	bl	119a0 <__assert_fail@plt>
   13edc:	movw	r1, #53432	; 0xd0b8
   13ee0:	movt	r1, #2
   13ee4:	ldr	r3, [pc, #68]	; 13f30 <__assert_fail@plt+0x2590>
   13ee8:	movw	r0, #54300	; 0xd41c
   13eec:	movt	r0, #2
   13ef0:	movw	r2, #846	; 0x34e
   13ef4:	bl	119a0 <__assert_fail@plt>
   13ef8:	movw	r1, #53432	; 0xd0b8
   13efc:	movt	r1, #2
   13f00:	ldr	r3, [pc, #40]	; 13f30 <__assert_fail@plt+0x2590>
   13f04:	movw	r0, #54272	; 0xd400
   13f08:	movt	r0, #2
   13f0c:	movw	r2, #845	; 0x34d
   13f10:	bl	119a0 <__assert_fail@plt>
   13f14:	nop	{0}
   13f18:	andeq	r0, r0, r0
   13f1c:	subsmi	r0, r9, r0
   13f20:	andeq	pc, r3, r0, lsl #5
   13f24:	ldrdeq	ip, [r2], -r8
   13f28:	andeq	pc, r3, r8, asr #4
   13f2c:			; <UNDEFINED> instruction: 0x0002ccbc
   13f30:	andeq	ip, r2, r4, ror #25
   13f34:	ldr	r3, [r0]
   13f38:	strd	r4, [sp, #-20]!	; 0xffffffec
   13f3c:	mov	r4, r0
   13f40:	strd	r6, [sp, #8]
   13f44:	str	lr, [sp, #16]
   13f48:	sub	sp, sp, #12
   13f4c:	cmp	r3, #128	; 0x80
   13f50:	beq	1407c <__assert_fail@plt+0x26dc>
   13f54:	ldr	r6, [r0, #4]
   13f58:	cmp	r3, #127	; 0x7f
   13f5c:	subgt	r3, r3, #256	; 0x100
   13f60:	add	r6, r3, r6
   13f64:	str	r6, [r0, #4]
   13f68:	ldr	r3, [r4, #8]
   13f6c:	lsr	ip, r6, #31
   13f70:	cmp	r3, r6
   13f74:	orrlt	ip, ip, #1
   13f78:	cmp	ip, #0
   13f7c:	bne	140f4 <__assert_fail@plt+0x2754>
   13f80:	mov	r2, ip
   13f84:	add	r1, sp, #4
   13f88:	ldr	r3, [r4, #24]
   13f8c:	mov	r0, sp
   13f90:	str	ip, [sp]
   13f94:	str	ip, [sp, #4]
   13f98:	bl	1191c <getdelim@plt>
   13f9c:	subs	r5, r0, #0
   13fa0:	blt	14074 <__assert_fail@plt+0x26d4>
   13fa4:	ldr	r1, [sp]
   13fa8:	cmp	r1, #0
   13fac:	beq	14184 <__assert_fail@plt+0x27e4>
   13fb0:	add	r7, r6, r5
   13fb4:	ldr	r0, [r4, #12]
   13fb8:	add	r7, r7, #1
   13fbc:	ldr	r3, [r4, #16]
   13fc0:	cmp	r7, r3
   13fc4:	bhi	14054 <__assert_fail@plt+0x26b4>
   13fc8:	add	r2, r5, #1
   13fcc:	add	r0, r0, r6
   13fd0:	bl	115d4 <memcpy@plt>
   13fd4:	ldr	r0, [sp]
   13fd8:	bl	1c734 <__assert_fail@plt+0xad94>
   13fdc:	cmp	r5, #0
   13fe0:	beq	14074 <__assert_fail@plt+0x26d4>
   13fe4:	ldr	r0, [r4, #24]
   13fe8:	bl	11970 <getc@plt>
   13fec:	ldr	r3, [r4, #4]
   13ff0:	str	r0, [r4]
   13ff4:	add	r5, r5, r3
   13ff8:	sub	r5, r5, #1
   13ffc:	cmp	r5, #0
   14000:	str	r5, [r4, #8]
   14004:	ble	140b0 <__assert_fail@plt+0x2710>
   14008:	ldr	r3, [r4, #12]
   1400c:	sub	r5, r5, #1
   14010:	ldrb	r2, [r3, r5]
   14014:	add	r5, r3, r5
   14018:	cmp	r2, #0
   1401c:	beq	14168 <__assert_fail@plt+0x27c8>
   14020:	ldrb	r2, [r5, #1]
   14024:	cmp	r2, #0
   14028:	bne	1414c <__assert_fail@plt+0x27ac>
   1402c:	ldrb	r2, [r5, #2]
   14030:	cmp	r2, #0
   14034:	moveq	r0, #1
   14038:	streq	r3, [r4, #20]
   1403c:	bne	14130 <__assert_fail@plt+0x2790>
   14040:	add	sp, sp, #12
   14044:	ldrd	r4, [sp]
   14048:	ldrd	r6, [sp, #8]
   1404c:	add	sp, sp, #16
   14050:	pop	{pc}		; (ldr pc, [sp], #4)
   14054:	mov	r1, r7
   14058:	bl	1c910 <__assert_fail@plt+0xaf70>
   1405c:	cmp	r0, #0
   14060:	beq	14074 <__assert_fail@plt+0x26d4>
   14064:	str	r0, [r4, #12]
   14068:	str	r7, [r4, #16]
   1406c:	ldr	r1, [sp]
   14070:	b	13fc8 <__assert_fail@plt+0x2628>
   14074:	mov	r0, #8
   14078:	b	14040 <__assert_fail@plt+0x26a0>
   1407c:	ldr	r6, [r0, #24]
   14080:	mov	r0, r6
   14084:	bl	11838 <fgetc@plt>
   14088:	sxtb	r5, r0
   1408c:	mov	r0, r6
   14090:	bl	11838 <fgetc@plt>
   14094:	ldr	r6, [r4, #4]
   14098:	lsl	r5, r5, #8
   1409c:	uxtb	r0, r0
   140a0:	orr	r5, r5, r0
   140a4:	add	r6, r5, r6
   140a8:	str	r6, [r4, #4]
   140ac:	b	13f68 <__assert_fail@plt+0x25c8>
   140b0:	mov	r2, #5
   140b4:	movw	r1, #54888	; 0xd668
   140b8:	movt	r1, #2
   140bc:	mov	r0, #0
   140c0:	bl	11628 <dcgettext@plt>
   140c4:	mov	r5, r0
   140c8:	mov	r1, #8
   140cc:	ldr	r2, [r4, #28]
   140d0:	mov	r0, #0
   140d4:	bl	1abd0 <__assert_fail@plt+0x9230>
   140d8:	mov	r3, r0
   140dc:	mov	r2, r5
   140e0:	mov	r1, #0
   140e4:	mov	r0, #1
   140e8:	bl	116d0 <error@plt>
   140ec:	ldr	r5, [r4, #8]
   140f0:	b	14008 <__assert_fail@plt+0x2668>
   140f4:	mov	r2, #5
   140f8:	movw	r1, #54888	; 0xd668
   140fc:	movt	r1, #2
   14100:	mov	r0, #0
   14104:	bl	11628 <dcgettext@plt>
   14108:	mov	r5, r0
   1410c:	mov	r1, #8
   14110:	ldr	r2, [r4, #28]
   14114:	mov	r0, #0
   14118:	bl	1abd0 <__assert_fail@plt+0x9230>
   1411c:	mov	r3, r0
   14120:	mov	r2, r5
   14124:	mov	r1, #0
   14128:	mov	r0, #1
   1412c:	bl	116d0 <error@plt>
   14130:	movw	r1, #53432	; 0xd0b8
   14134:	movt	r1, #2
   14138:	ldr	r3, [pc, #96]	; 141a0 <__assert_fail@plt+0x2800>
   1413c:	movw	r0, #54976	; 0xd6c0
   14140:	movt	r0, #2
   14144:	movw	r2, #570	; 0x23a
   14148:	bl	119a0 <__assert_fail@plt>
   1414c:	movw	r1, #53432	; 0xd0b8
   14150:	movt	r1, #2
   14154:	ldr	r3, [pc, #68]	; 141a0 <__assert_fail@plt+0x2800>
   14158:	movw	r0, #54960	; 0xd6b0
   1415c:	movt	r0, #2
   14160:	movw	r2, #569	; 0x239
   14164:	bl	119a0 <__assert_fail@plt>
   14168:	movw	r1, #53432	; 0xd0b8
   1416c:	movt	r1, #2
   14170:	ldr	r3, [pc, #40]	; 141a0 <__assert_fail@plt+0x2800>
   14174:	movw	r0, #54944	; 0xd6a0
   14178:	movt	r0, #2
   1417c:	mov	r2, #568	; 0x238
   14180:	bl	119a0 <__assert_fail@plt>
   14184:	movw	r1, #53432	; 0xd0b8
   14188:	movt	r1, #2
   1418c:	ldr	r3, [pc, #16]	; 141a4 <__assert_fail@plt+0x2804>
   14190:	movw	r0, #54932	; 0xd694
   14194:	movt	r0, #2
   14198:	mov	r2, #245	; 0xf5
   1419c:	bl	119a0 <__assert_fail@plt>
   141a0:	andeq	ip, r2, r0, lsl #26
   141a4:	strdeq	ip, [r2], -r0
   141a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   141ac:	mov	r4, r0
   141b0:	mov	r5, r1
   141b4:	strd	r6, [sp, #8]
   141b8:	mov	r7, r2
   141bc:	mov	r6, r3
   141c0:	str	r8, [sp, #16]
   141c4:	str	lr, [sp, #20]
   141c8:	sub	sp, sp, #8
   141cc:	bl	118e0 <clearerr@plt>
   141d0:	mov	r1, #4
   141d4:	mov	r3, r4
   141d8:	mov	r2, #1
   141dc:	add	r0, sp, r1
   141e0:	bl	116ac <fread@plt>
   141e4:	cmp	r0, #1
   141e8:	beq	14268 <__assert_fail@plt+0x28c8>
   141ec:	mov	r2, r5
   141f0:	mov	r1, #8
   141f4:	mov	r0, #0
   141f8:	bl	1abd0 <__assert_fail@plt+0x9230>
   141fc:	mov	r5, r0
   14200:	mov	r0, r4
   14204:	bl	11790 <feof@plt>
   14208:	subs	r4, r0, #0
   1420c:	beq	14238 <__assert_fail@plt+0x2898>
   14210:	mov	r2, #5
   14214:	movw	r1, #55836	; 0xda1c
   14218:	movt	r1, #2
   1421c:	mov	r0, #0
   14220:	bl	11628 <dcgettext@plt>
   14224:	mov	r2, r0
   14228:	mov	r3, r5
   1422c:	mov	r1, #0
   14230:	mov	r0, #1
   14234:	bl	116d0 <error@plt>
   14238:	bl	117d8 <__errno_location@plt>
   1423c:	ldr	r6, [r0]
   14240:	mov	r2, #5
   14244:	movw	r1, #55860	; 0xda34
   14248:	movt	r1, #2
   1424c:	mov	r0, r4
   14250:	bl	11628 <dcgettext@plt>
   14254:	mov	r2, r0
   14258:	mov	r3, r5
   1425c:	mov	r0, #1
   14260:	mov	r1, r6
   14264:	bl	116d0 <error@plt>
   14268:	ldr	r4, [r6]
   1426c:	ldr	r3, [sp, #4]
   14270:	cmp	r4, #0
   14274:	rev	r8, r3
   14278:	bne	142d8 <__assert_fail@plt+0x2938>
   1427c:	cmp	r7, r3
   14280:	bge	142fc <__assert_fail@plt+0x295c>
   14284:	cmp	r7, r8
   14288:	blt	142e0 <__assert_fail@plt+0x2940>
   1428c:	mov	r2, #5
   14290:	movw	r1, #55892	; 0xda54
   14294:	movt	r1, #2
   14298:	mov	r0, r4
   1429c:	bl	11628 <dcgettext@plt>
   142a0:	mov	r7, r0
   142a4:	mov	r2, r5
   142a8:	mov	r1, #8
   142ac:	mov	r0, r4
   142b0:	bl	1abd0 <__assert_fail@plt+0x9230>
   142b4:	mov	r3, r0
   142b8:	mov	r2, r7
   142bc:	mov	r1, r4
   142c0:	mov	r0, r4
   142c4:	bl	116d0 <error@plt>
   142c8:	mov	r2, #2
   142cc:	mov	r3, r8
   142d0:	str	r2, [r6]
   142d4:	b	142e0 <__assert_fail@plt+0x2940>
   142d8:	cmp	r4, #2
   142dc:	moveq	r3, r8
   142e0:	mov	r0, r3
   142e4:	add	sp, sp, #8
   142e8:	ldrd	r4, [sp]
   142ec:	ldrd	r6, [sp, #8]
   142f0:	ldr	r8, [sp, #16]
   142f4:	add	sp, sp, #20
   142f8:	pop	{pc}		; (ldr pc, [sp], #4)
   142fc:	cmp	r7, r8
   14300:	strlt	r0, [r6]
   14304:	b	142e0 <__assert_fail@plt+0x2940>
   14308:	movw	r3, #61976	; 0xf218
   1430c:	movt	r3, #3
   14310:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14314:	strd	r6, [sp, #8]
   14318:	mov	r6, r0
   1431c:	str	r8, [sp, #16]
   14320:	str	lr, [sp, #20]
   14324:	sub	sp, sp, #16
   14328:	ldr	r0, [r3]
   1432c:	bl	1c6d4 <__assert_fail@plt+0xad34>
   14330:	movw	r2, #61980	; 0xf21c
   14334:	movt	r2, #3
   14338:	movw	r3, #61880	; 0xf1b8
   1433c:	movt	r3, #3
   14340:	ldr	r4, [r2]
   14344:	movw	r1, #55960	; 0xda98
   14348:	movt	r1, #2
   1434c:	mov	r2, #5
   14350:	mov	r0, #0
   14354:	ldr	r8, [r3]
   14358:	bl	11628 <dcgettext@plt>
   1435c:	mov	r7, r0
   14360:	mov	r2, #5
   14364:	movw	r1, #55976	; 0xdaa8
   14368:	movt	r1, #2
   1436c:	mov	r0, #0
   14370:	bl	11628 <dcgettext@plt>
   14374:	mov	r5, r0
   14378:	mov	r2, #5
   1437c:	movw	r1, #55992	; 0xdab8
   14380:	movt	r1, #2
   14384:	mov	r0, #0
   14388:	bl	11628 <dcgettext@plt>
   1438c:	mov	ip, #0
   14390:	mov	r3, r8
   14394:	str	r7, [sp]
   14398:	mov	r1, r6
   1439c:	movw	r2, #56008	; 0xdac8
   143a0:	movt	r2, #2
   143a4:	str	r5, [sp, #4]
   143a8:	str	r0, [sp, #8]
   143ac:	mov	r0, r4
   143b0:	str	ip, [sp, #12]
   143b4:	bl	1b414 <__assert_fail@plt+0x9a74>
   143b8:	add	sp, sp, #16
   143bc:	ldrd	r4, [sp]
   143c0:	ldrd	r6, [sp, #8]
   143c4:	ldr	r8, [sp, #16]
   143c8:	add	sp, sp, #20
   143cc:	pop	{pc}		; (ldr pc, [sp], #4)
   143d0:	cmp	r2, #0
   143d4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   143d8:	mov	r4, r3
   143dc:	strd	r6, [sp, #8]
   143e0:	strd	r8, [sp, #16]
   143e4:	str	lr, [sp, #24]
   143e8:	sub	sp, sp, #8192	; 0x2000
   143ec:	sub	sp, sp, #12
   143f0:	beq	144d8 <__assert_fail@plt+0x2b38>
   143f4:	mov	r5, r1
   143f8:	add	r2, sp, #8192	; 0x2000
   143fc:	add	r2, r2, #40	; 0x28
   14400:	mov	r7, r0
   14404:	mvn	r3, #0
   14408:	add	r0, sp, #8
   1440c:	str	r5, [sp]
   14410:	mov	r1, #8192	; 0x2000
   14414:	ldr	r2, [r2]
   14418:	bl	1a948 <__assert_fail@plt+0x8fa8>
   1441c:	cmp	r0, #8192	; 0x2000
   14420:	mov	r6, r0
   14424:	bcs	14474 <__assert_fail@plt+0x2ad4>
   14428:	mov	r1, r0
   1442c:	add	r0, sp, #8
   14430:	bl	144f4 <__assert_fail@plt+0x2b54>
   14434:	mov	r3, r0
   14438:	mov	ip, #0
   1443c:	add	r2, sp, #8
   14440:	mov	r1, r4
   14444:	mov	r0, r7
   14448:	strb	ip, [r2, r3]
   1444c:	bl	117c0 <fprintf@plt>
   14450:	mov	r4, r0
   14454:	mov	r0, r4
   14458:	add	sp, sp, #8192	; 0x2000
   1445c:	add	sp, sp, #12
   14460:	ldrd	r4, [sp]
   14464:	ldrd	r6, [sp, #8]
   14468:	ldrd	r8, [sp, #16]
   1446c:	add	sp, sp, #24
   14470:	pop	{pc}		; (ldr pc, [sp], #4)
   14474:	add	r9, r0, #1
   14478:	mov	r0, r9
   1447c:	bl	1b50c <__assert_fail@plt+0x9b6c>
   14480:	add	r2, sp, #8192	; 0x2000
   14484:	mov	r8, r0
   14488:	str	r5, [sp]
   1448c:	add	r2, r2, #40	; 0x28
   14490:	mov	r1, r9
   14494:	mvn	r3, #0
   14498:	ldr	r2, [r2]
   1449c:	bl	1a948 <__assert_fail@plt+0x8fa8>
   144a0:	mov	r1, r6
   144a4:	mov	r0, r8
   144a8:	bl	144f4 <__assert_fail@plt+0x2b54>
   144ac:	mov	r3, r0
   144b0:	mov	ip, #0
   144b4:	mov	r1, r4
   144b8:	mov	r0, r7
   144bc:	mov	r2, r8
   144c0:	strb	ip, [r8, r3]
   144c4:	bl	117c0 <fprintf@plt>
   144c8:	mov	r4, r0
   144cc:	mov	r0, r8
   144d0:	bl	1c734 <__assert_fail@plt+0xad94>
   144d4:	b	14454 <__assert_fail@plt+0x2ab4>
   144d8:	mov	r1, r3
   144dc:	add	r3, sp, #8192	; 0x2000
   144e0:	add	r3, r3, #40	; 0x28
   144e4:	ldr	r2, [r3]
   144e8:	bl	117c0 <fprintf@plt>
   144ec:	mov	r4, r0
   144f0:	b	14454 <__assert_fail@plt+0x2ab4>
   144f4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   144f8:	mov	r5, r1
   144fc:	strd	r6, [sp, #8]
   14500:	str	r8, [sp, #16]
   14504:	strd	sl, [sp, #20]
   14508:	mov	sl, r0
   1450c:	str	lr, [sp, #28]
   14510:	sub	sp, sp, #16
   14514:	add	r7, sl, r5
   14518:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   1451c:	cmp	r0, #1
   14520:	bls	14684 <__assert_fail@plt+0x2ce4>
   14524:	cmp	sl, r7
   14528:	bcs	146c4 <__assert_fail@plt+0x2d24>
   1452c:	mov	r5, sl
   14530:	mov	r4, sl
   14534:	mov	fp, #63	; 0x3f
   14538:	b	14564 <__assert_fail@plt+0x2bc4>
   1453c:	cmp	r3, #37	; 0x25
   14540:	bcs	14550 <__assert_fail@plt+0x2bb0>
   14544:	sub	r2, r3, #32
   14548:	cmp	r2, #3
   1454c:	bhi	14590 <__assert_fail@plt+0x2bf0>
   14550:	add	r4, r4, #1
   14554:	strb	r3, [r5]
   14558:	mov	r5, r6
   1455c:	cmp	r4, r7
   14560:	bcs	14648 <__assert_fail@plt+0x2ca8>
   14564:	ldrb	r3, [r4]
   14568:	add	r6, r5, #1
   1456c:	cmp	r3, #63	; 0x3f
   14570:	bls	1453c <__assert_fail@plt+0x2b9c>
   14574:	cmp	r3, #65	; 0x41
   14578:	bcc	14590 <__assert_fail@plt+0x2bf0>
   1457c:	cmp	r3, #95	; 0x5f
   14580:	bls	14550 <__assert_fail@plt+0x2bb0>
   14584:	sub	r2, r3, #97	; 0x61
   14588:	cmp	r2, #29
   1458c:	bls	14550 <__assert_fail@plt+0x2bb0>
   14590:	mov	r2, #0
   14594:	mov	r3, #0
   14598:	strd	r2, [sp, #8]
   1459c:	b	145d0 <__assert_fail@plt+0x2c30>
   145a0:	bl	11574 <wcwidth@plt>
   145a4:	cmp	r0, #0
   145a8:	addlt	r3, r4, r8
   145ac:	bge	14628 <__assert_fail@plt+0x2c88>
   145b0:	mov	r4, r3
   145b4:	strb	fp, [r5]
   145b8:	mov	r5, r6
   145bc:	add	r0, sp, #8
   145c0:	bl	11604 <mbsinit@plt>
   145c4:	cmp	r0, #0
   145c8:	bne	1455c <__assert_fail@plt+0x2bbc>
   145cc:	add	r6, r5, #1
   145d0:	add	r3, sp, #8
   145d4:	sub	r2, r7, r4
   145d8:	mov	r1, r4
   145dc:	add	r0, sp, #4
   145e0:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   145e4:	cmn	r0, #1
   145e8:	mov	r8, r0
   145ec:	beq	14668 <__assert_fail@plt+0x2cc8>
   145f0:	cmn	r0, #2
   145f4:	beq	14678 <__assert_fail@plt+0x2cd8>
   145f8:	cmp	r0, #0
   145fc:	ldr	r0, [sp, #4]
   14600:	bne	145a0 <__assert_fail@plt+0x2c00>
   14604:	bl	11574 <wcwidth@plt>
   14608:	cmp	r0, #0
   1460c:	add	r3, r4, #1
   14610:	blt	145b0 <__assert_fail@plt+0x2c10>
   14614:	ldrb	r2, [r4]
   14618:	mov	r4, r3
   1461c:	strb	r2, [r5]
   14620:	mov	r5, r6
   14624:	b	145bc <__assert_fail@plt+0x2c1c>
   14628:	sub	r2, r5, #1
   1462c:	add	r0, r4, r8
   14630:	ldrb	r1, [r4], #1
   14634:	cmp	r0, r4
   14638:	strb	r1, [r2, #1]!
   1463c:	bne	14630 <__assert_fail@plt+0x2c90>
   14640:	add	r5, r5, r8
   14644:	b	145bc <__assert_fail@plt+0x2c1c>
   14648:	sub	r0, r5, sl
   1464c:	add	sp, sp, #16
   14650:	ldrd	r4, [sp]
   14654:	ldrd	r6, [sp, #8]
   14658:	ldr	r8, [sp, #16]
   1465c:	ldrd	sl, [sp, #20]
   14660:	add	sp, sp, #28
   14664:	pop	{pc}		; (ldr pc, [sp], #4)
   14668:	add	r4, r4, #1
   1466c:	strb	fp, [r5]
   14670:	mov	r5, r6
   14674:	b	1455c <__assert_fail@plt+0x2bbc>
   14678:	mov	r4, r7
   1467c:	strb	fp, [r5]
   14680:	b	14670 <__assert_fail@plt+0x2cd0>
   14684:	cmp	sl, r7
   14688:	bcs	146bc <__assert_fail@plt+0x2d1c>
   1468c:	bl	11778 <__ctype_b_loc@plt>
   14690:	sub	sl, sl, #1
   14694:	sub	r7, r7, #1
   14698:	mov	r1, #63	; 0x3f
   1469c:	ldrb	r3, [sl, #1]!
   146a0:	ldr	r2, [r0]
   146a4:	lsl	r3, r3, #1
   146a8:	ldrh	r3, [r2, r3]
   146ac:	tst	r3, #16384	; 0x4000
   146b0:	strbeq	r1, [sl]
   146b4:	cmp	r7, sl
   146b8:	bne	1469c <__assert_fail@plt+0x2cfc>
   146bc:	mov	r0, r5
   146c0:	b	1464c <__assert_fail@plt+0x2cac>
   146c4:	mov	r0, #0
   146c8:	b	1464c <__assert_fail@plt+0x2cac>
   146cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   146d0:	movw	r4, #56196	; 0xdb84
   146d4:	movt	r4, #2
   146d8:	strd	r6, [sp, #8]
   146dc:	movw	r6, #56040	; 0xdae8
   146e0:	movt	r6, #2
   146e4:	mov	r7, #0
   146e8:	strd	r8, [sp, #16]
   146ec:	mov	r8, r0
   146f0:	mov	r9, r6
   146f4:	mov	r5, r7
   146f8:	strd	sl, [sp, #24]
   146fc:	mov	sl, r6
   14700:	str	lr, [sp, #32]
   14704:	sub	sp, sp, #12
   14708:	b	14710 <__assert_fail@plt+0x2d70>
   1470c:	ldr	r4, [sl, #12]!
   14710:	mov	r1, r8
   14714:	mov	r0, r4
   14718:	bl	11544 <strcmp@plt>
   1471c:	cmp	r0, #0
   14720:	beq	14808 <__assert_fail@plt+0x2e68>
   14724:	mov	r0, r4
   14728:	add	r5, r5, #1
   1472c:	bl	1af10 <__assert_fail@plt+0x9570>
   14730:	bl	117a8 <strlen@plt>
   14734:	add	r0, r0, #2
   14738:	cmp	r5, #13
   1473c:	add	r7, r7, r0
   14740:	bne	1470c <__assert_fail@plt+0x2d6c>
   14744:	add	r0, r7, #1
   14748:	movw	sl, #56216	; 0xdb98
   1474c:	movt	sl, #2
   14750:	movw	r9, #56720	; 0xdd90
   14754:	movt	r9, #2
   14758:	mov	r4, #0
   1475c:	bl	1b50c <__assert_fail@plt+0x9b6c>
   14760:	mov	fp, r0
   14764:	movw	r0, #56196	; 0xdb84
   14768:	movt	r0, #2
   1476c:	mov	r5, fp
   14770:	b	14794 <__assert_fail@plt+0x2df4>
   14774:	bl	1af10 <__assert_fail@plt+0x9570>
   14778:	mov	r2, r0
   1477c:	mov	r1, r9
   14780:	mov	r0, r5
   14784:	bl	118ec <sprintf@plt>
   14788:	add	r5, r5, r0
   1478c:	ldr	r0, [r6, #12]!
   14790:	add	r4, r4, #1
   14794:	cmp	r4, #0
   14798:	beq	14774 <__assert_fail@plt+0x2dd4>
   1479c:	ldrh	r2, [sl]
   147a0:	mov	r7, r5
   147a4:	ldrb	r3, [sl, #2]
   147a8:	strh	r2, [r5]
   147ac:	strb	r3, [r7, #2]!
   147b0:	bl	1af10 <__assert_fail@plt+0x9570>
   147b4:	mov	r2, r0
   147b8:	mov	r1, r9
   147bc:	mov	r0, r7
   147c0:	bl	118ec <sprintf@plt>
   147c4:	cmp	r4, #12
   147c8:	add	r5, r7, r0
   147cc:	bne	1478c <__assert_fail@plt+0x2dec>
   147d0:	mov	r2, #5
   147d4:	movw	r1, #56220	; 0xdb9c
   147d8:	movt	r1, #2
   147dc:	mov	r0, #0
   147e0:	bl	11628 <dcgettext@plt>
   147e4:	mov	r4, r0
   147e8:	mov	r0, r8
   147ec:	bl	1af10 <__assert_fail@plt+0x9570>
   147f0:	mov	r3, r0
   147f4:	mov	r2, r4
   147f8:	str	fp, [sp]
   147fc:	mov	r1, #0
   14800:	mov	r0, #1
   14804:	bl	116d0 <error@plt>
   14808:	add	r5, r5, r5, lsl #1
   1480c:	add	r5, r9, r5, lsl #2
   14810:	ldr	r0, [r5, #8]
   14814:	add	sp, sp, #12
   14818:	ldrd	r4, [sp]
   1481c:	ldrd	r6, [sp, #8]
   14820:	ldrd	r8, [sp, #16]
   14824:	ldrd	sl, [sp, #24]
   14828:	add	sp, sp, #32
   1482c:	pop	{pc}		; (ldr pc, [sp], #4)
   14830:	cmp	r0, #12
   14834:	bhi	1484c <__assert_fail@plt+0x2eac>
   14838:	add	r0, r0, r0, lsl #1
   1483c:	movw	r3, #56040	; 0xdae8
   14840:	movt	r3, #2
   14844:	ldr	r0, [r3, r0, lsl #2]
   14848:	bx	lr
   1484c:	mov	r0, #0
   14850:	bx	lr
   14854:	cmp	r0, #12
   14858:	bhi	14874 <__assert_fail@plt+0x2ed4>
   1485c:	add	r0, r0, r0, lsl #1
   14860:	movw	r3, #56040	; 0xdae8
   14864:	movt	r3, #2
   14868:	add	r0, r3, r0, lsl #2
   1486c:	ldr	r0, [r0, #8]
   14870:	bx	lr
   14874:	mvn	r0, #0
   14878:	bx	lr
   1487c:	cmp	r0, #12
   14880:	bhi	1489c <__assert_fail@plt+0x2efc>
   14884:	add	r0, r0, r0, lsl #1
   14888:	movw	r3, #56040	; 0xdae8
   1488c:	movt	r3, #2
   14890:	add	r0, r3, r0, lsl #2
   14894:	ldr	r0, [r0, #4]
   14898:	bx	lr
   1489c:	mov	r0, #0
   148a0:	bx	lr
   148a4:	cmp	r0, #12
   148a8:	bhi	14910 <__assert_fail@plt+0x2f70>
   148ac:	add	r2, r0, r0, lsl #1
   148b0:	movw	r3, #56040	; 0xdae8
   148b4:	movt	r3, #2
   148b8:	cmp	r0, #0
   148bc:	push	{lr}		; (str lr, [sp, #-4]!)
   148c0:	add	r2, r3, r2, lsl #2
   148c4:	ldr	lr, [r2, #8]
   148c8:	beq	14900 <__assert_fail@plt+0x2f60>
   148cc:	mov	ip, #1
   148d0:	mov	r2, #0
   148d4:	b	148dc <__assert_fail@plt+0x2f3c>
   148d8:	ldr	ip, [r3, #4]
   148dc:	tst	ip, r1
   148e0:	beq	148f0 <__assert_fail@plt+0x2f50>
   148e4:	ldr	ip, [r3, #8]
   148e8:	cmp	ip, lr
   148ec:	beq	14908 <__assert_fail@plt+0x2f68>
   148f0:	add	r2, r2, #1
   148f4:	add	r3, r3, #12
   148f8:	cmp	r0, r2
   148fc:	bne	148d8 <__assert_fail@plt+0x2f38>
   14900:	mvn	r0, #0
   14904:	pop	{pc}		; (ldr pc, [sp], #4)
   14908:	mov	r0, r2
   1490c:	pop	{pc}		; (ldr pc, [sp], #4)
   14910:	mvn	r0, #0
   14914:	bx	lr
   14918:	cmp	r2, #0
   1491c:	strd	r4, [sp, #-16]!
   14920:	str	r6, [sp, #8]
   14924:	str	lr, [sp, #12]
   14928:	ldr	r5, [sp, #16]
   1492c:	beq	1498c <__assert_fail@plt+0x2fec>
   14930:	mov	r2, #0
   14934:	str	r2, [r3]
   14938:	str	r2, [r5]
   1493c:	ldr	r4, [r3]
   14940:	ldrb	r3, [r1]
   14944:	add	r4, r0, r4
   14948:	cmp	r3, #0
   1494c:	bne	14974 <__assert_fail@plt+0x2fd4>
   14950:	mov	r0, r4
   14954:	bl	117a8 <strlen@plt>
   14958:	mov	r4, r0
   1495c:	mov	r0, #1
   14960:	str	r4, [r5]
   14964:	ldrd	r4, [sp]
   14968:	ldr	r6, [sp, #8]
   1496c:	add	sp, sp, #12
   14970:	pop	{pc}		; (ldr pc, [sp], #4)
   14974:	mov	r0, r4
   14978:	bl	11904 <strpbrk@plt>
   1497c:	cmp	r0, #0
   14980:	subne	r4, r0, r4
   14984:	bne	1495c <__assert_fail@plt+0x2fbc>
   14988:	b	14950 <__assert_fail@plt+0x2fb0>
   1498c:	ldr	r2, [r5]
   14990:	ldr	r4, [r3]
   14994:	add	r4, r4, r2
   14998:	str	r4, [r3]
   1499c:	ldrb	r2, [r0, r4]
   149a0:	cmp	r2, #0
   149a4:	moveq	r0, r2
   149a8:	beq	14964 <__assert_fail@plt+0x2fc4>
   149ac:	add	r4, r4, #1
   149b0:	str	r4, [r3]
   149b4:	add	r4, r0, r4
   149b8:	ldrb	r3, [r1]
   149bc:	cmp	r3, #0
   149c0:	beq	14950 <__assert_fail@plt+0x2fb0>
   149c4:	b	14974 <__assert_fail@plt+0x2fd4>
   149c8:	mov	r2, #5
   149cc:	strd	r4, [sp, #-12]!
   149d0:	mov	r5, r1
   149d4:	mov	r4, r0
   149d8:	movw	r1, #56384	; 0xdc40
   149dc:	movt	r1, #2
   149e0:	mov	r0, #0
   149e4:	str	lr, [sp, #8]
   149e8:	sub	sp, sp, #20
   149ec:	bl	11628 <dcgettext@plt>
   149f0:	movw	r1, #56632	; 0xdd38
   149f4:	movt	r1, #2
   149f8:	movw	r2, #56656	; 0xdd50
   149fc:	movt	r2, #2
   14a00:	movw	ip, #56008	; 0xdac8
   14a04:	movt	ip, #2
   14a08:	mov	r3, r5
   14a0c:	str	ip, [sp]
   14a10:	str	r2, [sp, #4]
   14a14:	movw	r2, #56592	; 0xdd10
   14a18:	movt	r2, #2
   14a1c:	str	r1, [sp, #8]
   14a20:	mov	r1, r0
   14a24:	mov	r0, r4
   14a28:	bl	117c0 <fprintf@plt>
   14a2c:	add	sp, sp, #20
   14a30:	ldrd	r4, [sp]
   14a34:	add	sp, sp, #8
   14a38:	pop	{pc}		; (ldr pc, [sp], #4)
   14a3c:	ldrb	r3, [r0]
   14a40:	cmp	r3, #47	; 0x2f
   14a44:	bne	14a54 <__assert_fail@plt+0x30b4>
   14a48:	ldrb	r3, [r0, #1]!
   14a4c:	cmp	r3, #47	; 0x2f
   14a50:	beq	14a48 <__assert_fail@plt+0x30a8>
   14a54:	cmp	r3, #0
   14a58:	beq	14a88 <__assert_fail@plt+0x30e8>
   14a5c:	mov	r2, r0
   14a60:	mov	r1, #0
   14a64:	cmp	r3, #47	; 0x2f
   14a68:	moveq	r1, #1
   14a6c:	beq	14a7c <__assert_fail@plt+0x30dc>
   14a70:	cmp	r1, #0
   14a74:	movne	r0, r2
   14a78:	movne	r1, #0
   14a7c:	ldrb	r3, [r2, #1]!
   14a80:	cmp	r3, #0
   14a84:	bne	14a64 <__assert_fail@plt+0x30c4>
   14a88:	bx	lr
   14a8c:	str	r4, [sp, #-8]!
   14a90:	mov	r4, r0
   14a94:	str	lr, [sp, #4]
   14a98:	bl	117a8 <strlen@plt>
   14a9c:	cmp	r0, #1
   14aa0:	bls	14ac4 <__assert_fail@plt+0x3124>
   14aa4:	add	r2, r4, r0
   14aa8:	mov	r3, r0
   14aac:	ldrb	r2, [r2, #-1]
   14ab0:	cmp	r2, #47	; 0x2f
   14ab4:	subeq	r3, r0, #2
   14ab8:	rsbeq	r1, r4, #1
   14abc:	addeq	r3, r4, r3
   14ac0:	beq	14ad0 <__assert_fail@plt+0x3130>
   14ac4:	ldr	r4, [sp]
   14ac8:	add	sp, sp, #4
   14acc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ad0:	cmp	r3, r4
   14ad4:	add	r0, r1, r3
   14ad8:	beq	14ac4 <__assert_fail@plt+0x3124>
   14adc:	ldrb	r2, [r3], #-1
   14ae0:	cmp	r2, #47	; 0x2f
   14ae4:	beq	14ad0 <__assert_fail@plt+0x3130>
   14ae8:	ldr	r4, [sp]
   14aec:	add	sp, sp, #4
   14af0:	pop	{pc}		; (ldr pc, [sp], #4)
   14af4:	movw	r3, #62104	; 0xf298
   14af8:	movt	r3, #3
   14afc:	str	r0, [r3]
   14b00:	bx	lr
   14b04:	movw	r3, #62104	; 0xf298
   14b08:	movt	r3, #3
   14b0c:	strb	r0, [r3, #4]
   14b10:	bx	lr
   14b14:	movw	r3, #61980	; 0xf21c
   14b18:	movt	r3, #3
   14b1c:	strd	r4, [sp, #-16]!
   14b20:	ldr	r0, [r3]
   14b24:	str	r6, [sp, #8]
   14b28:	str	lr, [sp, #12]
   14b2c:	sub	sp, sp, #8
   14b30:	bl	2c250 <__assert_fail@plt+0x1a8b0>
   14b34:	cmp	r0, #0
   14b38:	beq	14b64 <__assert_fail@plt+0x31c4>
   14b3c:	movw	r4, #62104	; 0xf298
   14b40:	movt	r4, #3
   14b44:	ldrb	r6, [r4, #4]
   14b48:	bl	117d8 <__errno_location@plt>
   14b4c:	mov	r5, r0
   14b50:	cmp	r6, #0
   14b54:	beq	14b90 <__assert_fail@plt+0x31f0>
   14b58:	ldr	r3, [r0]
   14b5c:	cmp	r3, #32
   14b60:	bne	14b90 <__assert_fail@plt+0x31f0>
   14b64:	movw	r3, #61976	; 0xf218
   14b68:	movt	r3, #3
   14b6c:	ldr	r0, [r3]
   14b70:	bl	2c250 <__assert_fail@plt+0x1a8b0>
   14b74:	cmp	r0, #0
   14b78:	bne	14bd8 <__assert_fail@plt+0x3238>
   14b7c:	add	sp, sp, #8
   14b80:	ldrd	r4, [sp]
   14b84:	ldr	r6, [sp, #8]
   14b88:	add	sp, sp, #12
   14b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b90:	movw	r1, #56704	; 0xdd80
   14b94:	movt	r1, #2
   14b98:	mov	r2, #5
   14b9c:	mov	r0, #0
   14ba0:	bl	11628 <dcgettext@plt>
   14ba4:	mov	r6, r0
   14ba8:	ldr	r0, [r4]
   14bac:	cmp	r0, #0
   14bb0:	beq	14be8 <__assert_fail@plt+0x3248>
   14bb4:	ldr	r4, [r5]
   14bb8:	bl	1ad24 <__assert_fail@plt+0x9384>
   14bbc:	mov	r3, r0
   14bc0:	movw	r2, #56716	; 0xdd8c
   14bc4:	movt	r2, #2
   14bc8:	mov	r0, #0
   14bcc:	str	r6, [sp]
   14bd0:	mov	r1, r4
   14bd4:	bl	116d0 <error@plt>
   14bd8:	movw	r3, #61884	; 0xf1bc
   14bdc:	movt	r3, #3
   14be0:	ldr	r0, [r3]
   14be4:	bl	115c8 <_exit@plt>
   14be8:	mov	r3, r6
   14bec:	movw	r2, #56720	; 0xdd90
   14bf0:	movt	r2, #2
   14bf4:	ldr	r1, [r5]
   14bf8:	bl	116d0 <error@plt>
   14bfc:	b	14bd8 <__assert_fail@plt+0x3238>
   14c00:	push	{r1, r2, r3}
   14c04:	push	{lr}		; (str lr, [sp, #-4]!)
   14c08:	sub	sp, sp, #8
   14c0c:	ldr	r1, [sp, #12]
   14c10:	ands	r2, r1, #64	; 0x40
   14c14:	bne	14c30 <__assert_fail@plt+0x3290>
   14c18:	bl	116e8 <open64@plt>
   14c1c:	bl	1af68 <__assert_fail@plt+0x95c8>
   14c20:	add	sp, sp, #8
   14c24:	pop	{lr}		; (ldr lr, [sp], #4)
   14c28:	add	sp, sp, #12
   14c2c:	bx	lr
   14c30:	add	r3, sp, #16
   14c34:	ldr	r2, [sp, #16]
   14c38:	str	r3, [sp, #4]
   14c3c:	b	14c18 <__assert_fail@plt+0x3278>
   14c40:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14c44:	strd	r6, [sp, #8]
   14c48:	mov	r7, r1
   14c4c:	mov	r6, r0
   14c50:	strd	r8, [sp, #16]
   14c54:	mov	r9, r3
   14c58:	ands	r3, r3, #32
   14c5c:	strd	sl, [sp, #24]
   14c60:	str	lr, [sp, #32]
   14c64:	vpush	{d8-d9}
   14c68:	sub	sp, sp, #116	; 0x74
   14c6c:	str	r2, [sp, #12]
   14c70:	str	r3, [sp, #40]	; 0x28
   14c74:	movne	r3, #1024	; 0x400
   14c78:	moveq	r3, #1000	; 0x3e8
   14c7c:	strd	r6, [sp, #24]
   14c80:	str	r3, [sp, #36]	; 0x24
   14c84:	add	r3, r2, #644	; 0x284
   14c88:	mov	r5, r3
   14c8c:	bl	118d4 <localeconv@plt>
   14c90:	add	r3, r5, #3
   14c94:	ldr	r5, [r0]
   14c98:	mov	r4, r0
   14c9c:	str	r3, [sp, #8]
   14ca0:	and	r3, r9, #3
   14ca4:	str	r3, [sp, #32]
   14ca8:	mov	r0, r5
   14cac:	bl	117a8 <strlen@plt>
   14cb0:	ldrd	sl, [r4, #4]
   14cb4:	sub	r2, r0, #1
   14cb8:	movw	r3, #56756	; 0xddb4
   14cbc:	movt	r3, #2
   14cc0:	cmp	r2, #16
   14cc4:	movcc	r3, r5
   14cc8:	mov	r2, r0
   14ccc:	movcc	r2, r0
   14cd0:	movcs	r2, #1
   14cd4:	mov	r0, sl
   14cd8:	str	r2, [sp, #4]
   14cdc:	str	r3, [sp, #44]	; 0x2c
   14ce0:	bl	117a8 <strlen@plt>
   14ce4:	cmp	r0, #16
   14ce8:	movw	r3, #54428	; 0xd49c
   14cec:	movt	r3, #2
   14cf0:	ldrd	r4, [sp, #168]	; 0xa8
   14cf4:	movhi	sl, r3
   14cf8:	ldrd	r2, [sp, #176]	; 0xb0
   14cfc:	cmp	r3, r5
   14d00:	cmpeq	r2, r4
   14d04:	bhi	14fa8 <__assert_fail@plt+0x3608>
   14d08:	mov	r0, r4
   14d0c:	mov	r1, r5
   14d10:	bl	2ca1c <__assert_fail@plt+0x1b07c>
   14d14:	orrs	r3, r2, r3
   14d18:	bne	14d58 <__assert_fail@plt+0x33b8>
   14d1c:	mul	ip, r0, r7
   14d20:	mov	r4, r6
   14d24:	mov	r5, r7
   14d28:	mov	r3, r1
   14d2c:	umull	r6, r7, r0, r6
   14d30:	mov	r2, r0
   14d34:	mla	r1, r4, r1, ip
   14d38:	strd	r6, [sp, #16]
   14d3c:	add	r1, r1, r7
   14d40:	str	r1, [sp, #20]
   14d44:	ldrd	r0, [sp, #16]
   14d48:	bl	2ca1c <__assert_fail@plt+0x1b07c>
   14d4c:	cmp	r1, r5
   14d50:	cmpeq	r0, r4
   14d54:	beq	152f4 <__assert_fail@plt+0x3954>
   14d58:	ldrd	r0, [sp, #168]	; 0xa8
   14d5c:	bl	2c9a8 <__assert_fail@plt+0x1b008>
   14d60:	vmov	d9, r0, r1
   14d64:	ldrd	r0, [sp, #176]	; 0xb0
   14d68:	bl	2c9a8 <__assert_fail@plt+0x1b008>
   14d6c:	vmov	d7, r0, r1
   14d70:	ldrd	r0, [sp, #24]
   14d74:	vdiv.f64	d8, d9, d7
   14d78:	bl	2c9a8 <__assert_fail@plt+0x1b008>
   14d7c:	vmov	d7, r0, r1
   14d80:	tst	r9, #16
   14d84:	vmul.f64	d8, d8, d7
   14d88:	beq	14ef4 <__assert_fail@plt+0x3554>
   14d8c:	ldr	r6, [sp, #4]
   14d90:	mov	r7, #0
   14d94:	vldr	s15, [sp, #36]	; 0x24
   14d98:	vcvt.f64.s32	d6, s15
   14d9c:	vmov.f64	d7, d6
   14da0:	vmov.f64	d5, d7
   14da4:	vmul.f64	d7, d7, d6
   14da8:	add	r7, r7, #1
   14dac:	vcmpe.f64	d7, d8
   14db0:	vmrs	APSR_nzcv, fpscr
   14db4:	bhi	14dc0 <__assert_fail@plt+0x3420>
   14db8:	cmp	r7, #8
   14dbc:	bne	14da0 <__assert_fail@plt+0x3400>
   14dc0:	ldr	r3, [sp, #40]	; 0x28
   14dc4:	add	r8, r6, #1
   14dc8:	vdiv.f64	d9, d8, d5
   14dcc:	str	r6, [sp, #4]
   14dd0:	clz	r4, r3
   14dd4:	ldr	r3, [sp, #32]
   14dd8:	lsr	r4, r4, #5
   14ddc:	add	r4, r4, #1
   14de0:	add	r4, r4, r8
   14de4:	cmp	r3, #1
   14de8:	beq	153c4 <__assert_fail@plt+0x3a24>
   14dec:	vldr	d7, [pc, #980]	; 151c8 <__assert_fail@plt+0x3828>
   14df0:	vcmpe.f64	d9, d7
   14df4:	vmrs	APSR_nzcv, fpscr
   14df8:	vmovpl.f64	d7, d9
   14dfc:	bpl	14e40 <__assert_fail@plt+0x34a0>
   14e00:	vmov	r0, r1, d9
   14e04:	bl	2ca68 <__assert_fail@plt+0x1b0c8>
   14e08:	mov	r5, r0
   14e0c:	mov	r6, r1
   14e10:	bl	2c9a8 <__assert_fail@plt+0x1b008>
   14e14:	ldr	r3, [sp, #32]
   14e18:	vmov	d7, r0, r1
   14e1c:	cmp	r3, #0
   14e20:	bne	14e40 <__assert_fail@plt+0x34a0>
   14e24:	vcmp.f64	d9, d7
   14e28:	vmrs	APSR_nzcv, fpscr
   14e2c:	beq	14e40 <__assert_fail@plt+0x34a0>
   14e30:	adds	r0, r5, #1
   14e34:	adc	r1, r6, #0
   14e38:	bl	2c9a8 <__assert_fail@plt+0x1b008>
   14e3c:	vmov	d7, r0, r1
   14e40:	ldr	r5, [sp, #12]
   14e44:	movw	r1, #56768	; 0xddc0
   14e48:	movt	r1, #2
   14e4c:	vmov	r2, r3, d7
   14e50:	mov	r0, r5
   14e54:	bl	118ec <sprintf@plt>
   14e58:	mov	r0, r5
   14e5c:	bl	117a8 <strlen@plt>
   14e60:	cmp	r0, r4
   14e64:	bls	1528c <__assert_fail@plt+0x38ec>
   14e68:	vldr	d7, [pc, #864]	; 151d0 <__assert_fail@plt+0x3830>
   14e6c:	vmul.f64	d9, d9, d7
   14e70:	vldr	d7, [pc, #848]	; 151c8 <__assert_fail@plt+0x3828>
   14e74:	vcmpe.f64	d9, d7
   14e78:	vmrs	APSR_nzcv, fpscr
   14e7c:	bpl	14ec4 <__assert_fail@plt+0x3524>
   14e80:	vmov	r0, r1, d9
   14e84:	bl	2ca68 <__assert_fail@plt+0x1b0c8>
   14e88:	mov	r4, r0
   14e8c:	mov	r5, r1
   14e90:	bl	2c9a8 <__assert_fail@plt+0x1b008>
   14e94:	ldr	r3, [sp, #32]
   14e98:	vmov	d7, r0, r1
   14e9c:	cmp	r3, #0
   14ea0:	bne	14ec0 <__assert_fail@plt+0x3520>
   14ea4:	vcmp.f64	d9, d7
   14ea8:	vmrs	APSR_nzcv, fpscr
   14eac:	beq	14ec0 <__assert_fail@plt+0x3520>
   14eb0:	adds	r0, r4, #1
   14eb4:	adc	r1, r5, #0
   14eb8:	bl	2c9a8 <__assert_fail@plt+0x1b008>
   14ebc:	vmov	d7, r0, r1
   14ec0:	vmov.f64	d9, d7
   14ec4:	vldr	d7, [pc, #772]	; 151d0 <__assert_fail@plt+0x3830>
   14ec8:	movw	r1, #56760	; 0xddb8
   14ecc:	movt	r1, #2
   14ed0:	ldr	r4, [sp, #12]
   14ed4:	vdiv.f64	d7, d9, d7
   14ed8:	mov	r0, r4
   14edc:	vmov	r2, r3, d7
   14ee0:	bl	118ec <sprintf@plt>
   14ee4:	mov	r0, r4
   14ee8:	bl	117a8 <strlen@plt>
   14eec:	mov	r8, r0
   14ef0:	b	14f38 <__assert_fail@plt+0x3598>
   14ef4:	and	r6, r9, #3
   14ef8:	cmp	r6, #1
   14efc:	beq	14f10 <__assert_fail@plt+0x3570>
   14f00:	vldr	d7, [pc, #704]	; 151c8 <__assert_fail@plt+0x3828>
   14f04:	vcmpe.f64	d8, d7
   14f08:	vmrs	APSR_nzcv, fpscr
   14f0c:	bmi	152b0 <__assert_fail@plt+0x3910>
   14f10:	ldr	r4, [sp, #12]
   14f14:	movw	r1, #56760	; 0xddb8
   14f18:	movt	r1, #2
   14f1c:	vmov	r2, r3, d8
   14f20:	mvn	r7, #0
   14f24:	mov	r0, r4
   14f28:	bl	118ec <sprintf@plt>
   14f2c:	mov	r0, r4
   14f30:	bl	117a8 <strlen@plt>
   14f34:	mov	r8, r0
   14f38:	ldr	r3, [sp, #8]
   14f3c:	mov	r2, r0
   14f40:	ldr	r1, [sp, #12]
   14f44:	sub	r6, r3, r0
   14f48:	mov	r0, r6
   14f4c:	add	r8, r6, r8
   14f50:	bl	1158c <memmove@plt>
   14f54:	tst	r9, #4
   14f58:	bne	1511c <__assert_fail@plt+0x377c>
   14f5c:	tst	r9, #128	; 0x80
   14f60:	beq	14f78 <__assert_fail@plt+0x35d8>
   14f64:	cmn	r7, #1
   14f68:	beq	151d8 <__assert_fail@plt+0x3838>
   14f6c:	and	r3, r9, #256	; 0x100
   14f70:	orrs	r2, r3, r7
   14f74:	bne	15444 <__assert_fail@plt+0x3aa4>
   14f78:	ldr	r2, [sp, #8]
   14f7c:	mov	r3, #0
   14f80:	mov	r0, r6
   14f84:	strb	r3, [r2]
   14f88:	add	sp, sp, #116	; 0x74
   14f8c:	vpop	{d8-d9}
   14f90:	ldrd	r4, [sp]
   14f94:	ldrd	r6, [sp, #8]
   14f98:	ldrd	r8, [sp, #16]
   14f9c:	ldrd	sl, [sp, #24]
   14fa0:	add	sp, sp, #32
   14fa4:	pop	{pc}		; (ldr pc, [sp], #4)
   14fa8:	ldrd	r2, [sp, #168]	; 0xa8
   14fac:	orrs	r3, r2, r3
   14fb0:	beq	14d58 <__assert_fail@plt+0x33b8>
   14fb4:	ldrd	r2, [sp, #168]	; 0xa8
   14fb8:	ldrd	r0, [sp, #176]	; 0xb0
   14fbc:	bl	2ca1c <__assert_fail@plt+0x1b07c>
   14fc0:	orrs	r3, r2, r3
   14fc4:	mov	r4, r0
   14fc8:	mov	r5, r1
   14fcc:	bne	14d58 <__assert_fail@plt+0x33b8>
   14fd0:	mov	r2, r4
   14fd4:	mov	r3, r5
   14fd8:	ldrd	r0, [sp, #24]
   14fdc:	bl	2ca1c <__assert_fail@plt+0x1b07c>
   14fe0:	mov	lr, r2
   14fe4:	mov	r8, r1
   14fe8:	lsl	r1, r3, #2
   14fec:	mov	r7, r0
   14ff0:	lsl	r0, lr, #2
   14ff4:	mov	ip, r3
   14ff8:	orr	r1, r1, lr, lsr #30
   14ffc:	mov	r2, r4
   15000:	mov	r3, r5
   15004:	adds	r0, r0, lr
   15008:	adc	r1, r1, ip
   1500c:	adds	r0, r0, r0
   15010:	adc	r1, r1, r1
   15014:	bl	2ca1c <__assert_fail@plt+0x1b07c>
   15018:	adds	r1, r2, r2
   1501c:	mov	r2, r4
   15020:	str	r7, [sp, #16]
   15024:	adc	r3, r3, r3
   15028:	mov	lr, r0
   1502c:	str	r8, [sp, #20]
   15030:	str	r1, [sp, #48]	; 0x30
   15034:	str	r3, [sp, #52]	; 0x34
   15038:	mov	r3, r5
   1503c:	ldrd	r4, [sp, #48]	; 0x30
   15040:	cmp	r3, r5
   15044:	cmpeq	r2, r4
   15048:	bls	1542c <__assert_fail@plt+0x3a8c>
   1504c:	mov	r3, r4
   15050:	orrs	r3, r3, r5
   15054:	movne	r3, #1
   15058:	moveq	r3, #0
   1505c:	mov	r6, r3
   15060:	ands	r3, r9, #16
   15064:	str	r3, [sp, #48]	; 0x30
   15068:	beq	1530c <__assert_fail@plt+0x396c>
   1506c:	ldrd	r4, [sp, #16]
   15070:	mov	r3, #0
   15074:	mov	r7, #0
   15078:	ldr	r8, [sp, #36]	; 0x24
   1507c:	cmp	r3, r5
   15080:	mov	r2, r8
   15084:	cmpeq	r8, r4
   15088:	strd	r2, [sp, #24]
   1508c:	bhi	15310 <__assert_fail@plt+0x3970>
   15090:	str	sl, [sp, #56]	; 0x38
   15094:	mov	sl, r6
   15098:	mov	r6, lr
   1509c:	str	r9, [sp, #60]	; 0x3c
   150a0:	ldr	r9, [sp, #4]
   150a4:	b	150cc <__assert_fail@plt+0x372c>
   150a8:	adds	sl, sl, #0
   150ac:	movne	sl, #1
   150b0:	ldrd	r2, [sp, #24]
   150b4:	add	r7, r7, #1
   150b8:	cmp	r3, r1
   150bc:	cmpeq	r2, r0
   150c0:	bhi	154c8 <__assert_fail@plt+0x3b28>
   150c4:	cmp	r7, #8
   150c8:	beq	15490 <__assert_fail@plt+0x3af0>
   150cc:	mov	r0, r4
   150d0:	mov	r1, r5
   150d4:	ldrd	r2, [sp, #24]
   150d8:	bl	2ca1c <__assert_fail@plt+0x1b07c>
   150dc:	add	r2, r2, r2, lsl #2
   150e0:	mov	r4, r0
   150e4:	mov	r5, r1
   150e8:	asr	r3, sl, #1
   150ec:	add	r6, r6, r2, lsl #1
   150f0:	udiv	ip, r6, r8
   150f4:	mls	r2, r8, ip, r6
   150f8:	mov	r6, ip
   150fc:	add	r3, r3, r2, lsl #1
   15100:	cmp	r8, r3
   15104:	add	sl, sl, r3
   15108:	bhi	150a8 <__assert_fail@plt+0x3708>
   1510c:	cmp	r8, sl
   15110:	movcc	sl, #3
   15114:	movcs	sl, #2
   15118:	b	150b0 <__assert_fail@plt+0x3710>
   1511c:	mov	r0, sl
   15120:	sub	r4, r8, r6
   15124:	bl	117a8 <strlen@plt>
   15128:	add	r3, sp, #68	; 0x44
   1512c:	mov	r1, r6
   15130:	str	r0, [sp, #16]
   15134:	mov	r2, r4
   15138:	mov	r0, r3
   1513c:	bl	115d4 <memcpy@plt>
   15140:	ldr	r6, [sp, #16]
   15144:	mvn	r5, #0
   15148:	str	r7, [sp, #4]
   1514c:	ldrb	r3, [fp]
   15150:	cmp	r3, #0
   15154:	beq	15168 <__assert_fail@plt+0x37c8>
   15158:	cmp	r3, #255	; 0xff
   1515c:	add	fp, fp, #1
   15160:	movne	r5, r3
   15164:	moveq	r5, r4
   15168:	sub	r7, r8, r5
   1516c:	cmp	r5, r4
   15170:	mov	r2, r5
   15174:	mov	r0, r7
   15178:	bls	15198 <__assert_fail@plt+0x37f8>
   1517c:	sub	r6, r8, r4
   15180:	mov	r2, r4
   15184:	ldr	r7, [sp, #4]
   15188:	add	r1, sp, #68	; 0x44
   1518c:	mov	r0, r6
   15190:	bl	115d4 <memcpy@plt>
   15194:	b	14f5c <__assert_fail@plt+0x35bc>
   15198:	sub	r4, r4, r5
   1519c:	add	r3, sp, #68	; 0x44
   151a0:	add	r1, r3, r4
   151a4:	sub	r8, r7, r6
   151a8:	bl	115d4 <memcpy@plt>
   151ac:	cmp	r4, #0
   151b0:	mov	r2, r6
   151b4:	mov	r1, sl
   151b8:	mov	r0, r8
   151bc:	beq	15634 <__assert_fail@plt+0x3c94>
   151c0:	bl	115d4 <memcpy@plt>
   151c4:	b	1514c <__assert_fail@plt+0x37ac>
   151c8:	andeq	r0, r0, r0
   151cc:	mvnsmi	r0, #0
   151d0:	andeq	r0, r0, r0
   151d4:	eormi	r0, r4, r0
   151d8:	ldrd	r2, [sp, #176]	; 0xb0
   151dc:	cmp	r3, #0
   151e0:	cmpeq	r2, #1
   151e4:	bls	15488 <__assert_fail@plt+0x3ae8>
   151e8:	ldr	r1, [sp, #36]	; 0x24
   151ec:	mov	r7, #1
   151f0:	mov	r2, #1
   151f4:	mov	r3, #0
   151f8:	ldrd	r4, [sp, #176]	; 0xb0
   151fc:	mul	r0, r1, r3
   15200:	umull	r2, r3, r2, r1
   15204:	add	r3, r0, r3
   15208:	cmp	r5, r3
   1520c:	cmpeq	r4, r2
   15210:	bls	15220 <__assert_fail@plt+0x3880>
   15214:	add	r7, r7, #1
   15218:	cmp	r7, #8
   1521c:	bne	151fc <__assert_fail@plt+0x385c>
   15220:	tst	r9, #64	; 0x40
   15224:	and	r3, r9, #256	; 0x100
   15228:	beq	15248 <__assert_fail@plt+0x38a8>
   1522c:	ldr	r1, [sp, #12]
   15230:	mov	r2, #32
   15234:	add	r0, r1, #648	; 0x288
   15238:	strb	r2, [r1, #647]	; 0x287
   1523c:	str	r0, [sp, #8]
   15240:	cmp	r7, #0
   15244:	beq	15624 <__assert_fail@plt+0x3c84>
   15248:	ldr	r0, [sp, #40]	; 0x28
   1524c:	cmp	r0, #0
   15250:	cmpeq	r7, #1
   15254:	beq	154ac <__assert_fail@plt+0x3b0c>
   15258:	movw	r2, #56724	; 0xdd94
   1525c:	movt	r2, #2
   15260:	ldrb	r1, [r2, r7]
   15264:	cmp	r3, #0
   15268:	ldr	r2, [sp, #8]
   1526c:	strb	r1, [r2], #1
   15270:	beq	154c0 <__assert_fail@plt+0x3b20>
   15274:	cmp	r0, #0
   15278:	bne	15450 <__assert_fail@plt+0x3ab0>
   1527c:	mov	r3, #66	; 0x42
   15280:	strb	r3, [r2], #1
   15284:	str	r2, [sp, #8]
   15288:	b	14f78 <__assert_fail@plt+0x35d8>
   1528c:	tst	r9, #8
   15290:	beq	152a8 <__assert_fail@plt+0x3908>
   15294:	ldr	r3, [sp, #12]
   15298:	add	r3, r3, r0
   1529c:	ldrb	r3, [r3, #-1]
   152a0:	cmp	r3, #48	; 0x30
   152a4:	beq	15574 <__assert_fail@plt+0x3bd4>
   152a8:	sub	r8, r0, r8
   152ac:	b	14f38 <__assert_fail@plt+0x3598>
   152b0:	vmov	r0, r1, d8
   152b4:	bl	2ca68 <__assert_fail@plt+0x1b0c8>
   152b8:	mov	r4, r0
   152bc:	mov	r5, r1
   152c0:	bl	2c9a8 <__assert_fail@plt+0x1b008>
   152c4:	cmp	r6, #0
   152c8:	vmov	d7, r0, r1
   152cc:	bne	152ec <__assert_fail@plt+0x394c>
   152d0:	vcmp.f64	d8, d7
   152d4:	vmrs	APSR_nzcv, fpscr
   152d8:	beq	152ec <__assert_fail@plt+0x394c>
   152dc:	adds	r0, r4, #1
   152e0:	adc	r1, r5, #0
   152e4:	bl	2c9a8 <__assert_fail@plt+0x1b008>
   152e8:	vmov	d7, r0, r1
   152ec:	vmov.f64	d8, d7
   152f0:	b	14f10 <__assert_fail@plt+0x3570>
   152f4:	mov	r3, #0
   152f8:	mov	r6, r3
   152fc:	mov	lr, r3
   15300:	ands	r3, r9, #16
   15304:	str	r3, [sp, #48]	; 0x30
   15308:	bne	1506c <__assert_fail@plt+0x36cc>
   1530c:	mvn	r7, #0
   15310:	ldr	r3, [sp, #32]
   15314:	cmp	r3, #1
   15318:	beq	153f8 <__assert_fail@plt+0x3a58>
   1531c:	ldr	r8, [sp, #8]
   15320:	ldr	r3, [sp, #32]
   15324:	cmp	r3, #0
   15328:	bne	15374 <__assert_fail@plt+0x39d4>
   1532c:	add	r3, r6, lr
   15330:	cmp	r3, #0
   15334:	ble	15374 <__assert_fail@plt+0x39d4>
   15338:	ldr	r3, [sp, #16]
   1533c:	adds	r3, r3, #1
   15340:	str	r3, [sp, #16]
   15344:	ldr	r3, [sp, #20]
   15348:	adc	r3, r3, #0
   1534c:	str	r3, [sp, #20]
   15350:	ldr	r3, [sp, #48]	; 0x30
   15354:	cmp	r3, #0
   15358:	beq	15374 <__assert_fail@plt+0x39d4>
   1535c:	ldrd	r0, [sp, #16]
   15360:	mov	r3, #0
   15364:	ldr	r2, [sp, #36]	; 0x24
   15368:	cmp	r3, r1
   1536c:	cmpeq	r2, r0
   15370:	beq	15464 <__assert_fail@plt+0x3ac4>
   15374:	ldrd	r4, [sp, #16]
   15378:	mov	r6, r8
   1537c:	mov	r0, r4
   15380:	mov	r1, r5
   15384:	mov	r2, #10
   15388:	mov	r3, #0
   1538c:	bl	2ca1c <__assert_fail@plt+0x1b07c>
   15390:	add	r2, r2, #48	; 0x30
   15394:	mov	r0, r4
   15398:	mov	r1, r5
   1539c:	mov	r3, #0
   153a0:	strb	r2, [r6, #-1]!
   153a4:	mov	r2, #10
   153a8:	bl	2ca1c <__assert_fail@plt+0x1b07c>
   153ac:	cmp	r5, #0
   153b0:	mov	r5, r1
   153b4:	cmpeq	r4, #9
   153b8:	mov	r4, r0
   153bc:	bhi	1537c <__assert_fail@plt+0x39dc>
   153c0:	b	14f54 <__assert_fail@plt+0x35b4>
   153c4:	ldr	r5, [sp, #12]
   153c8:	movw	r1, #56768	; 0xddc0
   153cc:	movt	r1, #2
   153d0:	vmov	r2, r3, d9
   153d4:	mov	r0, r5
   153d8:	bl	118ec <sprintf@plt>
   153dc:	mov	r0, r5
   153e0:	bl	117a8 <strlen@plt>
   153e4:	cmp	r4, r0
   153e8:	bcs	1528c <__assert_fail@plt+0x38ec>
   153ec:	vldr	d7, [pc, #-548]	; 151d0 <__assert_fail@plt+0x3830>
   153f0:	vmul.f64	d9, d9, d7
   153f4:	b	14ec4 <__assert_fail@plt+0x3524>
   153f8:	mov	r5, #0
   153fc:	ldr	r8, [sp, #8]
   15400:	ldr	r3, [sp, #16]
   15404:	and	r4, r3, #1
   15408:	adds	r2, r4, r6
   1540c:	adc	r3, r5, r6, asr #31
   15410:	orr	r2, r2, r3
   15414:	mov	r3, lr
   15418:	cmp	r2, r5
   1541c:	addne	r3, r3, #1
   15420:	cmp	r3, #5
   15424:	bgt	15338 <__assert_fail@plt+0x3998>
   15428:	b	15374 <__assert_fail@plt+0x39d4>
   1542c:	movcs	r3, #2
   15430:	movcs	r6, r3
   15434:	bcs	15060 <__assert_fail@plt+0x36c0>
   15438:	mov	r3, #3
   1543c:	mov	r6, r3
   15440:	b	15060 <__assert_fail@plt+0x36c0>
   15444:	tst	r9, #64	; 0x40
   15448:	beq	15240 <__assert_fail@plt+0x38a0>
   1544c:	b	1522c <__assert_fail@plt+0x388c>
   15450:	ldr	r1, [sp, #8]
   15454:	mov	r3, #105	; 0x69
   15458:	add	r2, r1, #2
   1545c:	strb	r3, [r1, #1]
   15460:	b	1527c <__assert_fail@plt+0x38dc>
   15464:	cmp	r7, #8
   15468:	beq	15374 <__assert_fail@plt+0x39d4>
   1546c:	tst	r9, #8
   15470:	add	r7, r7, #1
   15474:	beq	155ec <__assert_fail@plt+0x3c4c>
   15478:	mov	r3, #49	; 0x31
   1547c:	sub	r6, r8, #1
   15480:	strb	r3, [r8, #-1]
   15484:	b	14f54 <__assert_fail@plt+0x35b4>
   15488:	mov	r7, #0
   1548c:	b	14f6c <__assert_fail@plt+0x35cc>
   15490:	mov	lr, r6
   15494:	mov	r6, sl
   15498:	str	r9, [sp, #4]
   1549c:	strd	r4, [sp, #16]
   154a0:	ldr	sl, [sp, #56]	; 0x38
   154a4:	ldr	r9, [sp, #60]	; 0x3c
   154a8:	b	15310 <__assert_fail@plt+0x3970>
   154ac:	ldr	r2, [sp, #8]
   154b0:	mov	r1, #107	; 0x6b
   154b4:	cmp	r3, #0
   154b8:	strb	r1, [r2], #1
   154bc:	bne	1527c <__assert_fail@plt+0x38dc>
   154c0:	str	r2, [sp, #8]
   154c4:	b	14f78 <__assert_fail@plt+0x35d8>
   154c8:	cmp	r1, #0
   154cc:	mov	lr, r6
   154d0:	str	r9, [sp, #4]
   154d4:	cmpeq	r0, #9
   154d8:	mov	r6, sl
   154dc:	strd	r4, [sp, #16]
   154e0:	ldr	sl, [sp, #56]	; 0x38
   154e4:	ldr	r9, [sp, #60]	; 0x3c
   154e8:	bhi	15310 <__assert_fail@plt+0x3970>
   154ec:	ldr	r3, [sp, #32]
   154f0:	cmp	r3, #1
   154f4:	beq	155a0 <__assert_fail@plt+0x3c00>
   154f8:	ldr	r2, [sp, #32]
   154fc:	adds	r3, r6, #0
   15500:	movne	r3, #1
   15504:	cmp	r2, #0
   15508:	movne	r3, #0
   1550c:	cmp	r3, #0
   15510:	bne	1558c <__assert_fail@plt+0x3bec>
   15514:	cmp	ip, #0
   15518:	addne	r3, ip, #48	; 0x30
   1551c:	uxtbne	r3, r3
   15520:	bne	15530 <__assert_fail@plt+0x3b90>
   15524:	tst	r9, #8
   15528:	bne	155e4 <__assert_fail@plt+0x3c44>
   1552c:	mov	r3, #48	; 0x30
   15530:	ldr	r2, [sp, #4]
   15534:	ldr	r1, [sp, #12]
   15538:	add	r8, r1, #644	; 0x284
   1553c:	strb	r3, [r1, #646]	; 0x286
   15540:	mov	r3, #0
   15544:	add	r8, r8, #2
   15548:	ldr	r1, [sp, #44]	; 0x2c
   1554c:	mov	r6, r3
   15550:	sub	r8, r8, r2
   15554:	mov	r0, r8
   15558:	bl	115d4 <memcpy@plt>
   1555c:	ldr	r3, [sp, #32]
   15560:	cmp	r3, #1
   15564:	beq	15374 <__assert_fail@plt+0x39d4>
   15568:	mov	r3, #0
   1556c:	mov	lr, r3
   15570:	b	15320 <__assert_fail@plt+0x3980>
   15574:	vldr	d7, [pc, #-940]	; 151d0 <__assert_fail@plt+0x3830>
   15578:	ldr	r3, [sp, #32]
   1557c:	vmul.f64	d9, d9, d7
   15580:	cmp	r3, #1
   15584:	bne	14e70 <__assert_fail@plt+0x34d0>
   15588:	b	14ec4 <__assert_fail@plt+0x3524>
   1558c:	cmp	ip, #9
   15590:	beq	155b8 <__assert_fail@plt+0x3c18>
   15594:	add	r3, ip, #49	; 0x31
   15598:	uxtb	r3, r3
   1559c:	b	15530 <__assert_fail@plt+0x3b90>
   155a0:	and	r3, ip, #1
   155a4:	add	r3, r3, r6
   155a8:	cmp	r3, #2
   155ac:	movle	r3, #0
   155b0:	movgt	r3, #1
   155b4:	b	1550c <__assert_fail@plt+0x3b6c>
   155b8:	adds	r3, r0, #1
   155bc:	str	r3, [sp, #16]
   155c0:	adc	r3, r1, #0
   155c4:	str	r3, [sp, #20]
   155c8:	ldrd	r2, [sp, #16]
   155cc:	cmp	r3, #0
   155d0:	cmpeq	r2, #10
   155d4:	beq	15614 <__assert_fail@plt+0x3c74>
   155d8:	mov	r3, #0
   155dc:	mov	r6, r3
   155e0:	b	15524 <__assert_fail@plt+0x3b84>
   155e4:	ldr	r8, [sp, #8]
   155e8:	b	1555c <__assert_fail@plt+0x3bbc>
   155ec:	ldr	r3, [sp, #4]
   155f0:	mov	r0, #48	; 0x30
   155f4:	strb	r0, [r8, #-1]
   155f8:	ldr	r2, [sp, #4]
   155fc:	mvn	r3, r3
   15600:	ldr	r1, [sp, #44]	; 0x2c
   15604:	add	r8, r8, r3
   15608:	mov	r0, r8
   1560c:	bl	115d4 <memcpy@plt>
   15610:	b	15478 <__assert_fail@plt+0x3ad8>
   15614:	mov	r3, #0
   15618:	ldr	r8, [sp, #8]
   1561c:	mov	r6, r3
   15620:	b	1555c <__assert_fail@plt+0x3bbc>
   15624:	cmp	r3, #0
   15628:	ldrne	r2, [sp, #8]
   1562c:	bne	1527c <__assert_fail@plt+0x38dc>
   15630:	b	14f78 <__assert_fail@plt+0x35d8>
   15634:	mov	r6, r7
   15638:	ldr	r7, [sp, #4]
   1563c:	b	14f5c <__assert_fail@plt+0x35bc>
   15640:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15644:	subs	r4, r0, #0
   15648:	strd	r6, [sp, #8]
   1564c:	mov	r7, r1
   15650:	mov	r6, r2
   15654:	str	r8, [sp, #16]
   15658:	strd	sl, [sp, #20]
   1565c:	str	lr, [sp, #28]
   15660:	sub	sp, sp, #16
   15664:	beq	15784 <__assert_fail@plt+0x3de4>
   15668:	ldrb	r3, [r4]
   1566c:	movw	r5, #56724	; 0xdd94
   15670:	movt	r5, #2
   15674:	add	r2, r5, #12
   15678:	add	r1, r5, #20
   1567c:	cmp	r3, #39	; 0x27
   15680:	mov	r3, #4
   15684:	addeq	r4, r4, #1
   15688:	moveq	r8, #4
   1568c:	mov	r0, r4
   15690:	movne	r8, #0
   15694:	bl	2beb8 <__assert_fail@plt+0x1a518>
   15698:	cmp	r0, #0
   1569c:	blt	156dc <__assert_fail@plt+0x3d3c>
   156a0:	add	r5, r5, r0, lsl #2
   156a4:	mov	sl, #1
   156a8:	mov	fp, #0
   156ac:	mov	r0, #0
   156b0:	ldr	r3, [r5, #12]
   156b4:	strd	sl, [r6]
   156b8:	orr	r3, r8, r3
   156bc:	str	r3, [r7]
   156c0:	add	sp, sp, #16
   156c4:	ldrd	r4, [sp]
   156c8:	ldrd	r6, [sp, #8]
   156cc:	ldr	r8, [sp, #16]
   156d0:	ldrd	sl, [sp, #20]
   156d4:	add	sp, sp, #28
   156d8:	pop	{pc}		; (ldr pc, [sp], #4)
   156dc:	movw	r0, #56816	; 0xddf0
   156e0:	movt	r0, #2
   156e4:	mov	r3, r6
   156e8:	mov	r2, #0
   156ec:	add	r1, sp, #12
   156f0:	str	r0, [sp]
   156f4:	mov	r0, r4
   156f8:	bl	1ba58 <__assert_fail@plt+0xa0b8>
   156fc:	cmp	r0, #0
   15700:	bne	15748 <__assert_fail@plt+0x3da8>
   15704:	ldrb	r3, [r4]
   15708:	sub	r3, r3, #48	; 0x30
   1570c:	cmp	r3, #9
   15710:	bls	1573c <__assert_fail@plt+0x3d9c>
   15714:	ldr	r2, [sp, #12]
   15718:	cmp	r4, r2
   1571c:	bne	1572c <__assert_fail@plt+0x3d8c>
   15720:	b	157d8 <__assert_fail@plt+0x3e38>
   15724:	cmp	r2, r4
   15728:	beq	157d8 <__assert_fail@plt+0x3e38>
   1572c:	ldrb	r3, [r4, #1]!
   15730:	sub	r3, r3, #48	; 0x30
   15734:	cmp	r3, #9
   15738:	bhi	15724 <__assert_fail@plt+0x3d84>
   1573c:	ldrd	r2, [r6]
   15740:	str	r8, [r7]
   15744:	b	15754 <__assert_fail@plt+0x3db4>
   15748:	mov	r1, #0
   1574c:	ldrd	r2, [r6]
   15750:	str	r1, [r7]
   15754:	orrs	r3, r2, r3
   15758:	bne	156c0 <__assert_fail@plt+0x3d20>
   1575c:	movw	r0, #56800	; 0xdde0
   15760:	movt	r0, #2
   15764:	bl	116f4 <getenv@plt>
   15768:	cmp	r0, #0
   1576c:	mov	r3, #0
   15770:	moveq	r2, #1024	; 0x400
   15774:	movne	r2, #512	; 0x200
   15778:	mov	r0, #4
   1577c:	strd	r2, [r6]
   15780:	b	156c0 <__assert_fail@plt+0x3d20>
   15784:	movw	r0, #56776	; 0xddc8
   15788:	movt	r0, #2
   1578c:	bl	116f4 <getenv@plt>
   15790:	subs	r4, r0, #0
   15794:	bne	15668 <__assert_fail@plt+0x3cc8>
   15798:	movw	r0, #56788	; 0xddd4
   1579c:	movt	r0, #2
   157a0:	bl	116f4 <getenv@plt>
   157a4:	subs	r4, r0, #0
   157a8:	bne	15668 <__assert_fail@plt+0x3cc8>
   157ac:	movw	r0, #56800	; 0xdde0
   157b0:	movt	r0, #2
   157b4:	bl	116f4 <getenv@plt>
   157b8:	subs	r3, r0, #0
   157bc:	beq	15804 <__assert_fail@plt+0x3e64>
   157c0:	mov	r2, #512	; 0x200
   157c4:	mov	r3, #0
   157c8:	mov	r0, r4
   157cc:	strd	r2, [r6]
   157d0:	str	r4, [r7]
   157d4:	b	156c0 <__assert_fail@plt+0x3d20>
   157d8:	ldrb	r3, [r2, #-1]
   157dc:	cmp	r3, #66	; 0x42
   157e0:	orrne	r8, r8, #128	; 0x80
   157e4:	beq	157f0 <__assert_fail@plt+0x3e50>
   157e8:	orr	r8, r8, #32
   157ec:	b	1573c <__assert_fail@plt+0x3d9c>
   157f0:	ldrb	r3, [r2, #-2]
   157f4:	orr	r8, r8, #384	; 0x180
   157f8:	cmp	r3, #105	; 0x69
   157fc:	bne	1573c <__assert_fail@plt+0x3d9c>
   15800:	b	157e8 <__assert_fail@plt+0x3e48>
   15804:	mov	r4, #1024	; 0x400
   15808:	mov	r5, #0
   1580c:	mov	r0, r3
   15810:	strd	r4, [r6]
   15814:	str	r3, [r7]
   15818:	b	156c0 <__assert_fail@plt+0x3d20>
   1581c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15820:	strd	r6, [sp, #8]
   15824:	strd	r8, [sp, #16]
   15828:	strd	sl, [sp, #24]
   1582c:	add	fp, sp, #32
   15830:	str	lr, [sp, #32]
   15834:	sub	sp, sp, #20
   15838:	str	r3, [fp, #-52]	; 0xffffffcc
   1583c:	str	r0, [fp, #-40]	; 0xffffffd8
   15840:	mov	r0, r2
   15844:	str	r2, [fp, #-48]	; 0xffffffd0
   15848:	lsrs	r2, r0, #30
   1584c:	movne	r2, #1
   15850:	moveq	r2, #0
   15854:	lsls	r0, r0, #2
   15858:	bmi	15a28 <__assert_fail@plt+0x4088>
   1585c:	cmp	r2, #0
   15860:	bne	15a28 <__assert_fail@plt+0x4088>
   15864:	cmp	r0, #4016	; 0xfb0
   15868:	mov	r6, r1
   1586c:	bhi	15a18 <__assert_fail@plt+0x4078>
   15870:	add	r3, r0, #22
   15874:	bic	r3, r3, #7
   15878:	sub	sp, sp, r3
   1587c:	add	r2, sp, #15
   15880:	bic	r9, r2, #15
   15884:	cmp	r9, #0
   15888:	beq	15a28 <__assert_fail@plt+0x4088>
   1588c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15890:	mov	r3, #1
   15894:	str	r3, [r9, #4]
   15898:	cmp	r2, #2
   1589c:	bls	1593c <__assert_fail@plt+0x3f9c>
   158a0:	bl	11778 <__ctype_b_loc@plt>
   158a4:	ldr	sl, [r0]
   158a8:	mov	r4, #0
   158ac:	mov	r7, #2
   158b0:	str	r6, [fp, #-44]	; 0xffffffd4
   158b4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   158b8:	ldrb	r8, [r3, #1]!
   158bc:	sxth	r5, r8
   158c0:	str	r3, [fp, #-44]	; 0xffffffd4
   158c4:	lsl	r0, r5, #1
   158c8:	ldrh	r0, [sl, r0]
   158cc:	tst	r0, #256	; 0x100
   158d0:	beq	158f4 <__assert_fail@plt+0x3f54>
   158d4:	bl	11748 <__ctype_tolower_loc@plt>
   158d8:	ldr	r3, [r0]
   158dc:	ldrb	r8, [r3, r5, lsl #2]
   158e0:	b	158f4 <__assert_fail@plt+0x3f54>
   158e4:	cmp	r4, #0
   158e8:	beq	15a68 <__assert_fail@plt+0x40c8>
   158ec:	ldr	r0, [r9, r4, lsl #2]
   158f0:	sub	r4, r4, r0
   158f4:	ldrb	r0, [r6, r4]
   158f8:	sxth	r5, r0
   158fc:	lsl	ip, r5, #1
   15900:	ldrh	ip, [sl, ip]
   15904:	tst	ip, #256	; 0x100
   15908:	beq	15918 <__assert_fail@plt+0x3f78>
   1590c:	bl	11748 <__ctype_tolower_loc@plt>
   15910:	ldr	r0, [r0]
   15914:	ldr	r0, [r0, r5, lsl #2]
   15918:	cmp	r0, r8
   1591c:	bne	158e4 <__assert_fail@plt+0x3f44>
   15920:	add	r4, r4, #1
   15924:	sub	r3, r7, r4
   15928:	str	r3, [r9, r7, lsl #2]
   1592c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15930:	add	r7, r7, #1
   15934:	cmp	r7, r3
   15938:	bne	158b4 <__assert_fail@plt+0x3f14>
   1593c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   15940:	mov	r3, #0
   15944:	mov	sl, r3
   15948:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1594c:	str	r3, [r1]
   15950:	ldrb	r5, [r2]
   15954:	mov	r7, r2
   15958:	cmp	r5, #0
   1595c:	beq	159f0 <__assert_fail@plt+0x4050>
   15960:	bl	11778 <__ctype_b_loc@plt>
   15964:	ldrb	r1, [r6, sl]
   15968:	ldr	r3, [r0]
   1596c:	sxth	r4, r1
   15970:	lsl	r0, r4, #1
   15974:	ldrh	r0, [r3, r0]
   15978:	tst	r0, #256	; 0x100
   1597c:	moveq	r4, r1
   15980:	beq	15998 <__assert_fail@plt+0x3ff8>
   15984:	str	r3, [fp, #-44]	; 0xffffffd4
   15988:	bl	11748 <__ctype_tolower_loc@plt>
   1598c:	ldr	r1, [r0]
   15990:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15994:	ldr	r4, [r1, r4, lsl #2]
   15998:	sxth	r1, r5
   1599c:	lsl	r0, r1, #1
   159a0:	str	r1, [fp, #-44]	; 0xffffffd4
   159a4:	ldrh	r3, [r3, r0]
   159a8:	tst	r3, #256	; 0x100
   159ac:	moveq	r3, r5
   159b0:	beq	159c4 <__assert_fail@plt+0x4024>
   159b4:	bl	11748 <__ctype_tolower_loc@plt>
   159b8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   159bc:	ldr	r3, [r0]
   159c0:	ldr	r3, [r3, r1, lsl #2]
   159c4:	cmp	r3, r4
   159c8:	beq	15a30 <__assert_fail@plt+0x4090>
   159cc:	cmp	sl, #0
   159d0:	beq	15a50 <__assert_fail@plt+0x40b0>
   159d4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   159d8:	cmp	r5, #0
   159dc:	ldr	r3, [r9, sl, lsl #2]
   159e0:	add	r2, r2, r3
   159e4:	sub	sl, sl, r3
   159e8:	str	r2, [fp, #-40]	; 0xffffffd8
   159ec:	bne	15960 <__assert_fail@plt+0x3fc0>
   159f0:	mov	r0, r9
   159f4:	bl	2c4a4 <__assert_fail@plt+0x1ab04>
   159f8:	mov	r0, #1
   159fc:	sub	sp, fp, #32
   15a00:	ldrd	r4, [sp]
   15a04:	ldrd	r6, [sp, #8]
   15a08:	ldrd	r8, [sp, #16]
   15a0c:	ldrd	sl, [sp, #24]
   15a10:	add	sp, sp, #32
   15a14:	pop	{pc}		; (ldr pc, [sp], #4)
   15a18:	bl	2c44c <__assert_fail@plt+0x1aaac>
   15a1c:	mov	r9, r0
   15a20:	cmp	r9, #0
   15a24:	bne	1588c <__assert_fail@plt+0x3eec>
   15a28:	mov	r0, #0
   15a2c:	b	159fc <__assert_fail@plt+0x405c>
   15a30:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15a34:	add	sl, sl, #1
   15a38:	add	r3, r7, #1
   15a3c:	cmp	r2, sl
   15a40:	beq	15a70 <__assert_fail@plt+0x40d0>
   15a44:	ldrb	r5, [r7, #1]
   15a48:	mov	r7, r3
   15a4c:	b	15958 <__assert_fail@plt+0x3fb8>
   15a50:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15a54:	add	r7, r7, #1
   15a58:	ldrb	r5, [r7]
   15a5c:	add	r3, r3, #1
   15a60:	str	r3, [fp, #-40]	; 0xffffffd8
   15a64:	b	15958 <__assert_fail@plt+0x3fb8>
   15a68:	str	r7, [r9, r7, lsl #2]
   15a6c:	b	1592c <__assert_fail@plt+0x3f8c>
   15a70:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15a74:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15a78:	str	r2, [r3]
   15a7c:	b	159f0 <__assert_fail@plt+0x4050>
   15a80:	movw	r3, #56856	; 0xde18
   15a84:	movt	r3, #2
   15a88:	str	r4, [sp, #-8]!
   15a8c:	movw	r1, #56876	; 0xde2c
   15a90:	movt	r1, #2
   15a94:	str	lr, [sp, #4]
   15a98:	movw	r0, #56888	; 0xde38
   15a9c:	movt	r0, #2
   15aa0:	mov	r2, #172	; 0xac
   15aa4:	bl	119a0 <__assert_fail@plt>
   15aa8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15aac:	mov	r4, r1
   15ab0:	strd	r6, [sp, #8]
   15ab4:	strd	r8, [sp, #16]
   15ab8:	strd	sl, [sp, #24]
   15abc:	add	fp, sp, #32
   15ac0:	str	lr, [sp, #32]
   15ac4:	sub	sp, sp, #228	; 0xe4
   15ac8:	str	r2, [fp, #-260]	; 0xfffffefc
   15acc:	str	r0, [fp, #-252]	; 0xffffff04
   15ad0:	mov	r0, r1
   15ad4:	bl	172b8 <__assert_fail@plt+0x5918>
   15ad8:	mov	r3, #44	; 0x2c
   15adc:	str	r0, [fp, #-248]	; 0xffffff08
   15ae0:	umull	r0, r1, r0, r3
   15ae4:	adds	r2, r1, #0
   15ae8:	movne	r2, #1
   15aec:	cmp	r0, #0
   15af0:	blt	15e80 <__assert_fail@plt+0x44e0>
   15af4:	cmp	r2, #0
   15af8:	bne	15e80 <__assert_fail@plt+0x44e0>
   15afc:	ldr	r2, [fp, #-248]	; 0xffffff08
   15b00:	mul	r0, r3, r2
   15b04:	cmp	r0, #4016	; 0xfb0
   15b08:	bhi	15ea0 <__assert_fail@plt+0x4500>
   15b0c:	add	r3, r0, #22
   15b10:	bic	r3, r3, #7
   15b14:	sub	sp, sp, r3
   15b18:	add	r3, sp, #15
   15b1c:	bic	sl, r3, #15
   15b20:	cmp	sl, #0
   15b24:	beq	15e80 <__assert_fail@plt+0x44e0>
   15b28:	ldr	r3, [fp, #-248]	; 0xffffff08
   15b2c:	mov	r1, #0
   15b30:	mov	r2, #0
   15b34:	movw	r8, #58952	; 0xe648
   15b38:	movt	r8, #2
   15b3c:	mov	r6, r1
   15b40:	strb	r1, [fp, #-204]	; 0xffffff34
   15b44:	strb	r1, [fp, #-192]	; 0xffffff40
   15b48:	str	r4, [fp, #-188]	; 0xffffff44
   15b4c:	add	r4, sl, #16
   15b50:	add	r9, r3, r3, lsl #2
   15b54:	mov	r3, #0
   15b58:	add	r9, sl, r9, lsl #3
   15b5c:	str	r9, [fp, #-256]	; 0xffffff00
   15b60:	strd	r2, [fp, #-200]	; 0xffffff38
   15b64:	b	15bf8 <__assert_fail@plt+0x4258>
   15b68:	ldrb	r3, [r5]
   15b6c:	lsr	r2, r3, #5
   15b70:	and	r3, r3, #31
   15b74:	ldr	r2, [r8, r2, lsl #2]
   15b78:	lsr	r3, r2, r3
   15b7c:	tst	r3, #1
   15b80:	beq	15eac <__assert_fail@plt+0x450c>
   15b84:	mov	r3, #1
   15b88:	str	r3, [fp, #-184]	; 0xffffff48
   15b8c:	ldrb	r2, [r5]
   15b90:	strb	r3, [fp, #-192]	; 0xffffff40
   15b94:	strb	r3, [fp, #-180]	; 0xffffff4c
   15b98:	mov	r5, r2
   15b9c:	str	r2, [fp, #-176]	; 0xffffff50
   15ba0:	cmp	r5, #0
   15ba4:	beq	15c74 <__assert_fail@plt+0x42d4>
   15ba8:	mov	r9, #1
   15bac:	ldr	r5, [fp, #-188]	; 0xffffff44
   15bb0:	sub	r2, fp, #172	; 0xac
   15bb4:	ldr	r7, [fp, #-184]	; 0xffffff48
   15bb8:	cmp	r5, r2
   15bbc:	strne	r5, [r4, #-16]
   15bc0:	beq	15ecc <__assert_fail@plt+0x452c>
   15bc4:	cmp	r9, #0
   15bc8:	str	r7, [r4, #-12]
   15bcc:	strb	r9, [r4, #-8]
   15bd0:	beq	15be8 <__assert_fail@plt+0x4248>
   15bd4:	ldr	r3, [fp, #-176]	; 0xffffff50
   15bd8:	mov	r0, r3
   15bdc:	str	r3, [r4, #-4]
   15be0:	bl	115f8 <towlower@plt>
   15be4:	str	r0, [r4, #-4]
   15be8:	add	r5, r5, r7
   15bec:	add	r4, r4, #40	; 0x28
   15bf0:	strb	r6, [fp, #-192]	; 0xffffff40
   15bf4:	str	r5, [fp, #-188]	; 0xffffff44
   15bf8:	ldrb	r3, [fp, #-204]	; 0xffffff34
   15bfc:	ldr	r5, [fp, #-188]	; 0xffffff44
   15c00:	cmp	r3, #0
   15c04:	subne	r7, fp, #200	; 0xc8
   15c08:	beq	15b68 <__assert_fail@plt+0x41c8>
   15c0c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   15c10:	mov	r1, r0
   15c14:	mov	r0, r5
   15c18:	bl	1af28 <__assert_fail@plt+0x9588>
   15c1c:	mov	r2, r0
   15c20:	mov	r3, r7
   15c24:	mov	r1, r5
   15c28:	sub	r0, fp, #176	; 0xb0
   15c2c:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   15c30:	cmn	r0, #1
   15c34:	str	r0, [fp, #-184]	; 0xffffff48
   15c38:	beq	15ee4 <__assert_fail@plt+0x4544>
   15c3c:	cmn	r0, #2
   15c40:	beq	15efc <__assert_fail@plt+0x455c>
   15c44:	cmp	r0, #0
   15c48:	beq	15f1c <__assert_fail@plt+0x457c>
   15c4c:	ldr	r5, [fp, #-176]	; 0xffffff50
   15c50:	mov	r9, #1
   15c54:	mov	r0, r7
   15c58:	strb	r9, [fp, #-180]	; 0xffffff4c
   15c5c:	bl	11604 <mbsinit@plt>
   15c60:	cmp	r0, #0
   15c64:	strb	r9, [fp, #-192]	; 0xffffff40
   15c68:	strbne	r6, [fp, #-204]	; 0xffffff34
   15c6c:	cmp	r5, #0
   15c70:	bne	15ba8 <__assert_fail@plt+0x4208>
   15c74:	ldr	r9, [fp, #-256]	; 0xffffff00
   15c78:	mov	r3, #1
   15c7c:	mov	r7, r5
   15c80:	ldr	r2, [fp, #-248]	; 0xffffff08
   15c84:	str	r3, [r9, #4]
   15c88:	cmp	r2, #2
   15c8c:	bls	15d30 <__assert_fail@plt+0x4390>
   15c90:	mov	r8, #2
   15c94:	mov	r4, r7
   15c98:	str	r7, [fp, #-256]	; 0xffffff00
   15c9c:	mov	r7, r8
   15ca0:	ldr	r8, [fp, #-248]	; 0xffffff08
   15ca4:	mov	r5, sl
   15ca8:	ldrb	r6, [r5, #48]	; 0x30
   15cac:	b	15cdc <__assert_fail@plt+0x433c>
   15cb0:	ldrb	r2, [r3, #8]
   15cb4:	cmp	r2, #0
   15cb8:	beq	15cec <__assert_fail@plt+0x434c>
   15cbc:	ldr	r3, [r3, #12]
   15cc0:	ldr	r2, [r5, #52]	; 0x34
   15cc4:	cmp	r2, r3
   15cc8:	beq	15d10 <__assert_fail@plt+0x4370>
   15ccc:	cmp	r4, #0
   15cd0:	beq	16264 <__assert_fail@plt+0x48c4>
   15cd4:	ldr	r3, [r9, r4, lsl #2]
   15cd8:	sub	r4, r4, r3
   15cdc:	add	r3, r4, r4, lsl #2
   15ce0:	cmp	r6, #0
   15ce4:	add	r3, sl, r3, lsl #3
   15ce8:	bne	15cb0 <__assert_fail@plt+0x4310>
   15cec:	ldr	r1, [r3, #4]
   15cf0:	ldr	r2, [r5, #44]	; 0x2c
   15cf4:	cmp	r2, r1
   15cf8:	bne	15ccc <__assert_fail@plt+0x432c>
   15cfc:	ldr	r1, [r3]
   15d00:	ldr	r0, [r5, #40]	; 0x28
   15d04:	bl	1161c <memcmp@plt>
   15d08:	cmp	r0, #0
   15d0c:	bne	15ccc <__assert_fail@plt+0x432c>
   15d10:	add	r4, r4, #1
   15d14:	sub	r2, r7, r4
   15d18:	str	r2, [r9, r7, lsl #2]
   15d1c:	add	r7, r7, #1
   15d20:	add	r5, r5, #40	; 0x28
   15d24:	cmp	r8, r7
   15d28:	bne	15ca8 <__assert_fail@plt+0x4308>
   15d2c:	ldr	r7, [fp, #-256]	; 0xffffff00
   15d30:	mov	r1, #0
   15d34:	mov	r0, #0
   15d38:	str	r9, [fp, #-256]	; 0xffffff00
   15d3c:	ldr	ip, [fp, #-252]	; 0xffffff04
   15d40:	mov	r2, #0
   15d44:	mov	r3, r2
   15d48:	mov	r6, r2
   15d4c:	strd	r0, [fp, #-144]	; 0xffffff70
   15d50:	strd	r0, [fp, #-88]	; 0xffffffa8
   15d54:	ldr	r1, [fp, #-260]	; 0xfffffefc
   15d58:	strb	r2, [fp, #-148]	; 0xffffff6c
   15d5c:	str	ip, [fp, #-132]	; 0xffffff7c
   15d60:	str	ip, [fp, #-76]	; 0xffffffb4
   15d64:	movw	ip, #58952	; 0xe648
   15d68:	movt	ip, #2
   15d6c:	mov	r9, ip
   15d70:	strb	r2, [fp, #-136]	; 0xffffff78
   15d74:	strb	r2, [fp, #-92]	; 0xffffffa4
   15d78:	strb	r2, [fp, #-80]	; 0xffffffb0
   15d7c:	str	r2, [r1]
   15d80:	cmp	r3, #0
   15d84:	ldreq	r5, [fp, #-76]	; 0xffffffb4
   15d88:	beq	15e1c <__assert_fail@plt+0x447c>
   15d8c:	ldrb	r5, [fp, #-68]	; 0xffffffbc
   15d90:	cmp	r5, #0
   15d94:	beq	15da8 <__assert_fail@plt+0x4408>
   15d98:	ldr	r5, [fp, #-64]	; 0xffffffc0
   15d9c:	cmp	r5, #0
   15da0:	mov	r5, #1
   15da4:	beq	15e70 <__assert_fail@plt+0x44d0>
   15da8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   15dac:	sub	r3, fp, #60	; 0x3c
   15db0:	ldr	r4, [fp, #-72]	; 0xffffffb8
   15db4:	cmp	r1, r3
   15db8:	strne	r1, [fp, #-244]	; 0xffffff0c
   15dbc:	beq	16234 <__assert_fail@plt+0x4894>
   15dc0:	add	r3, r7, r7, lsl #2
   15dc4:	cmp	r5, #0
   15dc8:	str	r4, [fp, #-240]	; 0xffffff10
   15dcc:	strb	r5, [fp, #-236]	; 0xffffff14
   15dd0:	add	r5, sl, r3, lsl #3
   15dd4:	beq	15f44 <__assert_fail@plt+0x45a4>
   15dd8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15ddc:	bl	115f8 <towlower@plt>
   15de0:	ldrb	r3, [r5, #8]
   15de4:	str	r0, [fp, #-232]	; 0xffffff18
   15de8:	cmp	r3, #0
   15dec:	beq	15f44 <__assert_fail@plt+0x45a4>
   15df0:	ldr	r3, [r5, #12]
   15df4:	cmp	r0, r3
   15df8:	bne	15f50 <__assert_fail@plt+0x45b0>
   15dfc:	ldr	r3, [fp, #-248]	; 0xffffff08
   15e00:	add	r7, r7, #1
   15e04:	strb	r6, [fp, #-80]	; 0xffffffb0
   15e08:	ldr	r5, [fp, #-76]	; 0xffffffb4
   15e0c:	cmp	r3, r7
   15e10:	add	r5, r5, r4
   15e14:	str	r5, [fp, #-76]	; 0xffffffb4
   15e18:	beq	163a4 <__assert_fail@plt+0x4a04>
   15e1c:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   15e20:	cmp	r3, #0
   15e24:	subne	r4, fp, #88	; 0x58
   15e28:	bne	15ff0 <__assert_fail@plt+0x4650>
   15e2c:	ldrb	r3, [r5]
   15e30:	lsr	r2, r3, #5
   15e34:	and	r3, r3, #31
   15e38:	ldr	r2, [r9, r2, lsl #2]
   15e3c:	lsr	r3, r2, r3
   15e40:	tst	r3, #1
   15e44:	beq	16070 <__assert_fail@plt+0x46d0>
   15e48:	mov	r3, #1
   15e4c:	str	r3, [fp, #-72]	; 0xffffffb8
   15e50:	ldrb	r2, [r5]
   15e54:	strb	r3, [fp, #-80]	; 0xffffffb0
   15e58:	strb	r3, [fp, #-68]	; 0xffffffbc
   15e5c:	mov	r5, r2
   15e60:	str	r2, [fp, #-64]	; 0xffffffc0
   15e64:	cmp	r5, #0
   15e68:	mov	r5, #1
   15e6c:	bne	15da8 <__assert_fail@plt+0x4408>
   15e70:	mov	r0, sl
   15e74:	bl	2c4a4 <__assert_fail@plt+0x1ab04>
   15e78:	mov	r0, #1
   15e7c:	b	15e84 <__assert_fail@plt+0x44e4>
   15e80:	mov	r0, #0
   15e84:	sub	sp, fp, #32
   15e88:	ldrd	r4, [sp]
   15e8c:	ldrd	r6, [sp, #8]
   15e90:	ldrd	r8, [sp, #16]
   15e94:	ldrd	sl, [sp, #24]
   15e98:	add	sp, sp, #32
   15e9c:	pop	{pc}		; (ldr pc, [sp], #4)
   15ea0:	bl	2c44c <__assert_fail@plt+0x1aaac>
   15ea4:	mov	sl, r0
   15ea8:	b	15b20 <__assert_fail@plt+0x4180>
   15eac:	sub	r7, fp, #200	; 0xc8
   15eb0:	mov	r0, r7
   15eb4:	bl	11604 <mbsinit@plt>
   15eb8:	cmp	r0, #0
   15ebc:	beq	163e0 <__assert_fail@plt+0x4a40>
   15ec0:	mov	r3, #1
   15ec4:	strb	r3, [fp, #-204]	; 0xffffff34
   15ec8:	b	15c0c <__assert_fail@plt+0x426c>
   15ecc:	mov	r2, r7
   15ed0:	mov	r1, r5
   15ed4:	mov	r0, r4
   15ed8:	bl	115d4 <memcpy@plt>
   15edc:	str	r4, [r4, #-16]
   15ee0:	b	15bc4 <__assert_fail@plt+0x4224>
   15ee4:	mov	r2, #1
   15ee8:	mov	r9, #0
   15eec:	strb	r2, [fp, #-192]	; 0xffffff40
   15ef0:	str	r2, [fp, #-184]	; 0xffffff48
   15ef4:	strb	r6, [fp, #-180]	; 0xffffff4c
   15ef8:	b	15bac <__assert_fail@plt+0x420c>
   15efc:	ldr	r0, [fp, #-188]	; 0xffffff44
   15f00:	mov	r9, #0
   15f04:	bl	117a8 <strlen@plt>
   15f08:	mov	r2, #1
   15f0c:	strb	r2, [fp, #-192]	; 0xffffff40
   15f10:	str	r0, [fp, #-184]	; 0xffffff48
   15f14:	strb	r6, [fp, #-180]	; 0xffffff4c
   15f18:	b	15bac <__assert_fail@plt+0x420c>
   15f1c:	ldr	r3, [fp, #-188]	; 0xffffff44
   15f20:	mov	r2, #1
   15f24:	str	r2, [fp, #-184]	; 0xffffff48
   15f28:	ldrb	r3, [r3]
   15f2c:	cmp	r3, #0
   15f30:	bne	163c0 <__assert_fail@plt+0x4a20>
   15f34:	ldr	r5, [fp, #-176]	; 0xffffff50
   15f38:	cmp	r5, #0
   15f3c:	beq	15c50 <__assert_fail@plt+0x42b0>
   15f40:	bl	15a80 <__assert_fail@plt+0x40e0>
   15f44:	ldr	r3, [r5, #4]
   15f48:	cmp	r3, r4
   15f4c:	beq	16054 <__assert_fail@plt+0x46b4>
   15f50:	cmp	r7, #0
   15f54:	bne	16090 <__assert_fail@plt+0x46f0>
   15f58:	ldrb	r3, [fp, #-136]	; 0xffffff78
   15f5c:	cmp	r3, #0
   15f60:	bne	16334 <__assert_fail@plt+0x4994>
   15f64:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   15f68:	ldr	r4, [fp, #-132]	; 0xffffff7c
   15f6c:	cmp	r3, #0
   15f70:	subne	r8, fp, #144	; 0x90
   15f74:	bne	16288 <__assert_fail@plt+0x48e8>
   15f78:	ldrb	r3, [r4]
   15f7c:	lsr	r2, r3, #5
   15f80:	and	r3, r3, #31
   15f84:	ldr	r2, [r9, r2, lsl #2]
   15f88:	lsr	r3, r2, r3
   15f8c:	tst	r3, #1
   15f90:	beq	1626c <__assert_fail@plt+0x48cc>
   15f94:	mov	r3, #1
   15f98:	str	r3, [fp, #-128]	; 0xffffff80
   15f9c:	ldrb	r2, [r4]
   15fa0:	strb	r3, [fp, #-136]	; 0xffffff78
   15fa4:	strb	r3, [fp, #-124]	; 0xffffff84
   15fa8:	mov	r4, r2
   15fac:	str	r2, [fp, #-120]	; 0xffffff88
   15fb0:	cmp	r4, #0
   15fb4:	beq	1612c <__assert_fail@plt+0x478c>
   15fb8:	ldr	r4, [fp, #-132]	; 0xffffff7c
   15fbc:	strb	r6, [fp, #-136]	; 0xffffff78
   15fc0:	ldr	r2, [fp, #-128]	; 0xffffff80
   15fc4:	strb	r6, [fp, #-80]	; 0xffffffb0
   15fc8:	ldr	r5, [fp, #-76]	; 0xffffffb4
   15fcc:	ldr	r3, [fp, #-72]	; 0xffffffb8
   15fd0:	add	r4, r4, r2
   15fd4:	str	r4, [fp, #-132]	; 0xffffff7c
   15fd8:	add	r5, r5, r3
   15fdc:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   15fe0:	str	r5, [fp, #-76]	; 0xffffffb4
   15fe4:	cmp	r3, #0
   15fe8:	subne	r4, fp, #88	; 0x58
   15fec:	beq	15e2c <__assert_fail@plt+0x448c>
   15ff0:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   15ff4:	mov	r1, r0
   15ff8:	mov	r0, r5
   15ffc:	bl	1af28 <__assert_fail@plt+0x9588>
   16000:	mov	r2, r0
   16004:	mov	r3, r4
   16008:	mov	r1, r5
   1600c:	sub	r0, fp, #64	; 0x40
   16010:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   16014:	cmn	r0, #1
   16018:	str	r0, [fp, #-72]	; 0xffffffb8
   1601c:	beq	1624c <__assert_fail@plt+0x48ac>
   16020:	cmn	r0, #2
   16024:	beq	162ec <__assert_fail@plt+0x494c>
   16028:	cmp	r0, #0
   1602c:	beq	1630c <__assert_fail@plt+0x496c>
   16030:	ldr	r5, [fp, #-64]	; 0xffffffc0
   16034:	mov	r8, #1
   16038:	mov	r0, r4
   1603c:	strb	r8, [fp, #-68]	; 0xffffffbc
   16040:	bl	11604 <mbsinit@plt>
   16044:	cmp	r0, #0
   16048:	strb	r8, [fp, #-80]	; 0xffffffb0
   1604c:	strbne	r6, [fp, #-92]	; 0xffffffa4
   16050:	b	15d9c <__assert_fail@plt+0x43fc>
   16054:	mov	r2, r4
   16058:	ldr	r1, [fp, #-244]	; 0xffffff0c
   1605c:	ldr	r0, [r5]
   16060:	bl	1161c <memcmp@plt>
   16064:	cmp	r0, #0
   16068:	bne	15f50 <__assert_fail@plt+0x45b0>
   1606c:	b	15dfc <__assert_fail@plt+0x445c>
   16070:	sub	r4, fp, #88	; 0x58
   16074:	mov	r0, r4
   16078:	bl	11604 <mbsinit@plt>
   1607c:	cmp	r0, #0
   16080:	beq	163e0 <__assert_fail@plt+0x4a40>
   16084:	mov	r3, #1
   16088:	strb	r3, [fp, #-92]	; 0xffffffa4
   1608c:	b	15ff0 <__assert_fail@plt+0x4650>
   16090:	ldr	r3, [fp, #-256]	; 0xffffff00
   16094:	ldr	r5, [r3, r7, lsl #2]
   16098:	sub	r3, r7, r5
   1609c:	cmp	r5, #0
   160a0:	str	r3, [fp, #-252]	; 0xffffff04
   160a4:	beq	1622c <__assert_fail@plt+0x488c>
   160a8:	ldrb	r3, [fp, #-136]	; 0xffffff78
   160ac:	cmp	r3, #0
   160b0:	beq	16348 <__assert_fail@plt+0x49a8>
   160b4:	ldrb	r3, [fp, #-124]	; 0xffffff84
   160b8:	cmp	r3, #0
   160bc:	bne	16220 <__assert_fail@plt+0x4880>
   160c0:	ldr	r4, [fp, #-132]	; 0xffffff7c
   160c4:	subs	r5, r5, #1
   160c8:	strb	r6, [fp, #-136]	; 0xffffff78
   160cc:	ldr	r3, [fp, #-128]	; 0xffffff80
   160d0:	add	r4, r4, r3
   160d4:	str	r4, [fp, #-132]	; 0xffffff7c
   160d8:	beq	16228 <__assert_fail@plt+0x4888>
   160dc:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   160e0:	cmp	r3, #0
   160e4:	subne	r8, fp, #144	; 0x90
   160e8:	bne	1614c <__assert_fail@plt+0x47ac>
   160ec:	ldrb	r3, [r4]
   160f0:	lsr	r2, r3, #5
   160f4:	and	r3, r3, #31
   160f8:	ldr	r2, [r9, r2, lsl #2]
   160fc:	lsr	r3, r2, r3
   16100:	tst	r3, #1
   16104:	beq	16130 <__assert_fail@plt+0x4790>
   16108:	mov	r3, #1
   1610c:	str	r3, [fp, #-128]	; 0xffffff80
   16110:	ldrb	r2, [r4]
   16114:	strb	r3, [fp, #-136]	; 0xffffff78
   16118:	strb	r3, [fp, #-124]	; 0xffffff84
   1611c:	mov	r4, r2
   16120:	str	r2, [fp, #-120]	; 0xffffff88
   16124:	cmp	r4, #0
   16128:	bne	160c0 <__assert_fail@plt+0x4720>
   1612c:	bl	11964 <abort@plt>
   16130:	sub	r8, fp, #144	; 0x90
   16134:	mov	r0, r8
   16138:	bl	11604 <mbsinit@plt>
   1613c:	cmp	r0, #0
   16140:	beq	163e0 <__assert_fail@plt+0x4a40>
   16144:	mov	r3, #1
   16148:	strb	r3, [fp, #-148]	; 0xffffff6c
   1614c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16150:	mov	r1, r0
   16154:	mov	r0, r4
   16158:	bl	1af28 <__assert_fail@plt+0x9588>
   1615c:	mov	r2, r0
   16160:	mov	r3, r8
   16164:	mov	r1, r4
   16168:	sub	r0, fp, #120	; 0x78
   1616c:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   16170:	cmn	r0, #1
   16174:	str	r0, [fp, #-128]	; 0xffffff80
   16178:	beq	161b0 <__assert_fail@plt+0x4810>
   1617c:	cmn	r0, #2
   16180:	beq	161c4 <__assert_fail@plt+0x4824>
   16184:	cmp	r0, #0
   16188:	beq	161dc <__assert_fail@plt+0x483c>
   1618c:	ldr	r4, [fp, #-120]	; 0xffffff88
   16190:	mov	r7, #1
   16194:	mov	r0, r8
   16198:	strb	r7, [fp, #-124]	; 0xffffff84
   1619c:	bl	11604 <mbsinit@plt>
   161a0:	cmp	r0, #0
   161a4:	strb	r7, [fp, #-136]	; 0xffffff78
   161a8:	strbne	r6, [fp, #-148]	; 0xffffff6c
   161ac:	b	16124 <__assert_fail@plt+0x4784>
   161b0:	mov	r3, #1
   161b4:	ldr	r4, [fp, #-132]	; 0xffffff7c
   161b8:	str	r3, [fp, #-128]	; 0xffffff80
   161bc:	strb	r6, [fp, #-124]	; 0xffffff84
   161c0:	b	160c4 <__assert_fail@plt+0x4724>
   161c4:	ldr	r4, [fp, #-132]	; 0xffffff7c
   161c8:	mov	r0, r4
   161cc:	bl	117a8 <strlen@plt>
   161d0:	str	r0, [fp, #-128]	; 0xffffff80
   161d4:	strb	r6, [fp, #-124]	; 0xffffff84
   161d8:	b	160c4 <__assert_fail@plt+0x4724>
   161dc:	ldr	r4, [fp, #-132]	; 0xffffff7c
   161e0:	mov	r3, #1
   161e4:	str	r3, [fp, #-128]	; 0xffffff80
   161e8:	ldrb	r3, [r4]
   161ec:	cmp	r3, #0
   161f0:	bne	163c0 <__assert_fail@plt+0x4a20>
   161f4:	ldr	r4, [fp, #-120]	; 0xffffff88
   161f8:	cmp	r4, #0
   161fc:	beq	16190 <__assert_fail@plt+0x47f0>
   16200:	movw	r3, #56856	; 0xde18
   16204:	movt	r3, #2
   16208:	movw	r1, #56876	; 0xde2c
   1620c:	movt	r1, #2
   16210:	movw	r0, #56888	; 0xde38
   16214:	movt	r0, #2
   16218:	mov	r2, #172	; 0xac
   1621c:	bl	119a0 <__assert_fail@plt>
   16220:	ldr	r4, [fp, #-120]	; 0xffffff88
   16224:	b	16124 <__assert_fail@plt+0x4784>
   16228:	ldr	r7, [fp, #-252]	; 0xffffff04
   1622c:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   16230:	b	15d80 <__assert_fail@plt+0x43e0>
   16234:	sub	r3, fp, #228	; 0xe4
   16238:	mov	r2, r4
   1623c:	mov	r0, r3
   16240:	bl	115d4 <memcpy@plt>
   16244:	str	r0, [fp, #-244]	; 0xffffff0c
   16248:	b	15dc0 <__assert_fail@plt+0x4420>
   1624c:	mov	r3, #1
   16250:	mov	r5, #0
   16254:	strb	r3, [fp, #-80]	; 0xffffffb0
   16258:	str	r3, [fp, #-72]	; 0xffffffb8
   1625c:	strb	r6, [fp, #-68]	; 0xffffffbc
   16260:	b	15da8 <__assert_fail@plt+0x4408>
   16264:	str	r7, [r9, r7, lsl #2]
   16268:	b	15d1c <__assert_fail@plt+0x437c>
   1626c:	sub	r8, fp, #144	; 0x90
   16270:	mov	r0, r8
   16274:	bl	11604 <mbsinit@plt>
   16278:	cmp	r0, #0
   1627c:	beq	163e0 <__assert_fail@plt+0x4a40>
   16280:	mov	r3, #1
   16284:	strb	r3, [fp, #-148]	; 0xffffff6c
   16288:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   1628c:	mov	r1, r0
   16290:	mov	r0, r4
   16294:	bl	1af28 <__assert_fail@plt+0x9588>
   16298:	mov	r2, r0
   1629c:	mov	r3, r8
   162a0:	mov	r1, r4
   162a4:	sub	r0, fp, #120	; 0x78
   162a8:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   162ac:	cmn	r0, #1
   162b0:	str	r0, [fp, #-128]	; 0xffffff80
   162b4:	beq	16350 <__assert_fail@plt+0x49b0>
   162b8:	cmn	r0, #2
   162bc:	beq	16364 <__assert_fail@plt+0x49c4>
   162c0:	cmp	r0, #0
   162c4:	beq	1637c <__assert_fail@plt+0x49dc>
   162c8:	ldr	r4, [fp, #-120]	; 0xffffff88
   162cc:	mov	r5, #1
   162d0:	mov	r0, r8
   162d4:	strb	r5, [fp, #-124]	; 0xffffff84
   162d8:	bl	11604 <mbsinit@plt>
   162dc:	cmp	r0, #0
   162e0:	strb	r5, [fp, #-136]	; 0xffffff78
   162e4:	strbne	r6, [fp, #-148]	; 0xffffff6c
   162e8:	b	15fb0 <__assert_fail@plt+0x4610>
   162ec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   162f0:	mov	r5, #0
   162f4:	bl	117a8 <strlen@plt>
   162f8:	mov	r3, #1
   162fc:	strb	r3, [fp, #-80]	; 0xffffffb0
   16300:	str	r0, [fp, #-72]	; 0xffffffb8
   16304:	strb	r6, [fp, #-68]	; 0xffffffbc
   16308:	b	15da8 <__assert_fail@plt+0x4408>
   1630c:	ldr	r5, [fp, #-76]	; 0xffffffb4
   16310:	mov	r3, #1
   16314:	str	r3, [fp, #-72]	; 0xffffffb8
   16318:	ldrb	r3, [r5]
   1631c:	cmp	r3, #0
   16320:	bne	163c0 <__assert_fail@plt+0x4a20>
   16324:	ldr	r5, [fp, #-64]	; 0xffffffc0
   16328:	cmp	r5, #0
   1632c:	beq	16034 <__assert_fail@plt+0x4694>
   16330:	b	15f40 <__assert_fail@plt+0x45a0>
   16334:	ldrb	r3, [fp, #-124]	; 0xffffff84
   16338:	cmp	r3, #0
   1633c:	beq	15fb8 <__assert_fail@plt+0x4618>
   16340:	ldr	r4, [fp, #-120]	; 0xffffff88
   16344:	b	15fb0 <__assert_fail@plt+0x4610>
   16348:	ldr	r4, [fp, #-132]	; 0xffffff7c
   1634c:	b	160dc <__assert_fail@plt+0x473c>
   16350:	mov	r3, #1
   16354:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16358:	str	r3, [fp, #-128]	; 0xffffff80
   1635c:	strb	r6, [fp, #-124]	; 0xffffff84
   16360:	b	15fbc <__assert_fail@plt+0x461c>
   16364:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16368:	mov	r0, r4
   1636c:	bl	117a8 <strlen@plt>
   16370:	str	r0, [fp, #-128]	; 0xffffff80
   16374:	strb	r6, [fp, #-124]	; 0xffffff84
   16378:	b	15fbc <__assert_fail@plt+0x461c>
   1637c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16380:	mov	r3, #1
   16384:	str	r3, [fp, #-128]	; 0xffffff80
   16388:	ldrb	r3, [r4]
   1638c:	cmp	r3, #0
   16390:	bne	163c0 <__assert_fail@plt+0x4a20>
   16394:	ldr	r4, [fp, #-120]	; 0xffffff88
   16398:	cmp	r4, #0
   1639c:	beq	162cc <__assert_fail@plt+0x492c>
   163a0:	b	15f40 <__assert_fail@plt+0x45a0>
   163a4:	ldr	r2, [fp, #-260]	; 0xfffffefc
   163a8:	mov	r0, sl
   163ac:	ldr	r3, [fp, #-132]	; 0xffffff7c
   163b0:	str	r3, [r2]
   163b4:	bl	2c4a4 <__assert_fail@plt+0x1ab04>
   163b8:	mov	r0, #1
   163bc:	b	15e84 <__assert_fail@plt+0x44e4>
   163c0:	movw	r3, #56856	; 0xde18
   163c4:	movt	r3, #2
   163c8:	movw	r1, #56876	; 0xde2c
   163cc:	movt	r1, #2
   163d0:	movw	r0, #56932	; 0xde64
   163d4:	movt	r0, #2
   163d8:	mov	r2, #171	; 0xab
   163dc:	bl	119a0 <__assert_fail@plt>
   163e0:	movw	r3, #56856	; 0xde18
   163e4:	movt	r3, #2
   163e8:	movw	r1, #56876	; 0xde2c
   163ec:	movt	r1, #2
   163f0:	movw	r0, #56908	; 0xde4c
   163f4:	movt	r0, #2
   163f8:	mov	r2, #143	; 0x8f
   163fc:	bl	119a0 <__assert_fail@plt>
   16400:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16404:	mov	r4, r1
   16408:	strd	r6, [sp, #8]
   1640c:	strd	r8, [sp, #16]
   16410:	strd	sl, [sp, #24]
   16414:	str	lr, [sp, #32]
   16418:	sub	sp, sp, #420	; 0x1a4
   1641c:	str	r0, [sp, #4]
   16420:	str	r1, [sp, #12]
   16424:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16428:	cmp	r0, #1
   1642c:	bhi	16720 <__assert_fail@plt+0x4d80>
   16430:	ldr	r3, [sp, #12]
   16434:	ldrb	r4, [r3]
   16438:	cmp	r4, #0
   1643c:	str	r4, [sp, #20]
   16440:	beq	1662c <__assert_fail@plt+0x4c8c>
   16444:	bl	11778 <__ctype_b_loc@plt>
   16448:	ldr	r8, [r0]
   1644c:	sxth	r4, r4
   16450:	lsl	r3, r4, #1
   16454:	str	r0, [sp, #40]	; 0x28
   16458:	ldrh	r3, [r8, r3]
   1645c:	tst	r3, #256	; 0x100
   16460:	bne	16798 <__assert_fail@plt+0x4df8>
   16464:	ldr	r3, [sp, #12]
   16468:	add	r3, r3, #1
   1646c:	str	r3, [sp, #32]
   16470:	ldr	r3, [sp, #4]
   16474:	ldrb	r5, [r3]
   16478:	cmp	r5, #0
   1647c:	beq	1678c <__assert_fail@plt+0x4dec>
   16480:	mov	r2, #1
   16484:	mov	sl, #0
   16488:	ldr	fp, [sp, #4]
   1648c:	mov	r7, sl
   16490:	ldr	r3, [sp, #12]
   16494:	str	r2, [sp, #16]
   16498:	str	r3, [sp, #24]
   1649c:	sub	r3, r2, r3
   164a0:	str	sl, [sp, #28]
   164a4:	str	r3, [sp, #36]	; 0x24
   164a8:	b	16528 <__assert_fail@plt+0x4b88>
   164ac:	ldr	r6, [sp, #24]
   164b0:	cmp	r6, #0
   164b4:	beq	164e0 <__assert_fail@plt+0x4b40>
   164b8:	ldr	r2, [sp, #28]
   164bc:	mov	r0, r6
   164c0:	sub	r1, r9, r2
   164c4:	bl	11874 <strnlen@plt>
   164c8:	mov	r2, r6
   164cc:	ldrb	r3, [r2, r0]!
   164d0:	cmp	r3, #0
   164d4:	str	r2, [sp, #24]
   164d8:	bne	16780 <__assert_fail@plt+0x4de0>
   164dc:	str	r9, [sp, #28]
   164e0:	ldr	r4, [sp, #12]
   164e4:	mov	r0, r4
   164e8:	bl	117a8 <strlen@plt>
   164ec:	mov	r2, r0
   164f0:	add	r3, sp, #360	; 0x168
   164f4:	mov	r1, r4
   164f8:	mov	r0, fp
   164fc:	bl	1581c <__assert_fail@plt+0x3e7c>
   16500:	subs	r3, r0, #0
   16504:	str	r3, [sp, #16]
   16508:	bne	171ec <__assert_fail@plt+0x584c>
   1650c:	ldr	r3, [sp, #16]
   16510:	str	r3, [sp, #24]
   16514:	ldr	r3, [sp, #4]
   16518:	ldrb	r5, [r3, r7]
   1651c:	ldr	r3, [sp, #40]	; 0x28
   16520:	ldr	r8, [r3]
   16524:	mov	sl, r9
   16528:	sxth	r4, r5
   1652c:	add	r7, r7, #1
   16530:	str	fp, [sp, #8]
   16534:	lsl	r3, r4, #1
   16538:	add	r9, sl, #1
   1653c:	ldrh	r3, [r8, r3]
   16540:	tst	r3, #256	; 0x100
   16544:	beq	16554 <__assert_fail@plt+0x4bb4>
   16548:	bl	11748 <__ctype_tolower_loc@plt>
   1654c:	ldr	r3, [r0]
   16550:	ldr	r5, [r3, r4, lsl #2]
   16554:	ldr	r3, [sp, #20]
   16558:	cmp	r5, r3
   1655c:	ldr	r3, [sp, #4]
   16560:	add	fp, r3, r7
   16564:	beq	16654 <__assert_fail@plt+0x4cb4>
   16568:	ldr	r3, [sp, #4]
   1656c:	ldrb	r5, [r3, r7]
   16570:	cmp	r5, #0
   16574:	beq	1678c <__assert_fail@plt+0x4dec>
   16578:	ldr	r4, [sp, #16]
   1657c:	cmp	r7, #9
   16580:	movls	r4, #0
   16584:	andhi	r4, r4, #1
   16588:	cmp	r4, #0
   1658c:	beq	16524 <__assert_fail@plt+0x4b84>
   16590:	add	r3, r7, r7, lsl #2
   16594:	cmp	r9, r3
   16598:	bcs	164ac <__assert_fail@plt+0x4b0c>
   1659c:	str	r4, [sp, #16]
   165a0:	b	16524 <__assert_fail@plt+0x4b84>
   165a4:	add	r0, sp, #140	; 0x8c
   165a8:	bl	11604 <mbsinit@plt>
   165ac:	cmp	r0, #0
   165b0:	beq	17278 <__assert_fail@plt+0x58d8>
   165b4:	mov	r5, #1
   165b8:	strb	r5, [sp, #136]	; 0x88
   165bc:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   165c0:	ldr	r7, [sp, #12]
   165c4:	mov	r1, r0
   165c8:	mov	r0, r7
   165cc:	bl	1af28 <__assert_fail@plt+0x9588>
   165d0:	mov	r2, r0
   165d4:	add	r3, sp, #140	; 0x8c
   165d8:	mov	r1, r7
   165dc:	add	r0, sp, #164	; 0xa4
   165e0:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   165e4:	cmn	r0, #1
   165e8:	str	r0, [sp, #156]	; 0x9c
   165ec:	beq	17138 <__assert_fail@plt+0x5798>
   165f0:	cmn	r0, #2
   165f4:	beq	17214 <__assert_fail@plt+0x5874>
   165f8:	cmp	r0, #0
   165fc:	beq	171a4 <__assert_fail@plt+0x5804>
   16600:	ldr	r4, [sp, #164]	; 0xa4
   16604:	mov	r5, #1
   16608:	add	r0, sp, #140	; 0x8c
   1660c:	strb	r5, [sp, #160]	; 0xa0
   16610:	bl	11604 <mbsinit@plt>
   16614:	cmp	r0, #0
   16618:	strb	r5, [sp, #148]	; 0x94
   1661c:	movne	r3, #0
   16620:	strbne	r3, [sp, #136]	; 0x88
   16624:	cmp	r4, #0
   16628:	bne	167ac <__assert_fail@plt+0x4e0c>
   1662c:	ldr	r3, [sp, #4]
   16630:	str	r3, [sp, #8]
   16634:	ldr	r0, [sp, #8]
   16638:	add	sp, sp, #420	; 0x1a4
   1663c:	ldrd	r4, [sp]
   16640:	ldrd	r6, [sp, #8]
   16644:	ldrd	r8, [sp, #16]
   16648:	ldrd	sl, [sp, #24]
   1664c:	add	sp, sp, #32
   16650:	pop	{pc}		; (ldr pc, [sp], #4)
   16654:	ldr	r3, [sp, #12]
   16658:	ldrb	r4, [r3, #1]
   1665c:	cmp	r4, #0
   16660:	beq	16634 <__assert_fail@plt+0x4c94>
   16664:	ldr	r3, [sp, #4]
   16668:	ldrb	r5, [r3, r7]
   1666c:	cmp	r5, #0
   16670:	mov	r1, r5
   16674:	beq	1678c <__assert_fail@plt+0x4dec>
   16678:	ldr	r3, [sp, #36]	; 0x24
   1667c:	mov	r6, fp
   16680:	str	r7, [sp, #44]	; 0x2c
   16684:	mov	r7, r8
   16688:	str	fp, [sp, #48]	; 0x30
   1668c:	str	r5, [sp, #52]	; 0x34
   16690:	add	r9, r3, sl
   16694:	ldr	sl, [sp, #32]
   16698:	mov	r5, sl
   1669c:	b	166b8 <__assert_fail@plt+0x4d18>
   166a0:	ldrb	r4, [r5, #1]!
   166a4:	cmp	r4, #0
   166a8:	beq	16634 <__assert_fail@plt+0x4c94>
   166ac:	ldrb	r1, [r6, #1]!
   166b0:	cmp	r1, #0
   166b4:	beq	1678c <__assert_fail@plt+0x4dec>
   166b8:	sxth	r8, r1
   166bc:	add	sl, r5, r9
   166c0:	lsl	r0, r8, #1
   166c4:	ldrh	r0, [r7, r0]
   166c8:	tst	r0, #256	; 0x100
   166cc:	moveq	r8, r1
   166d0:	beq	166e0 <__assert_fail@plt+0x4d40>
   166d4:	bl	11748 <__ctype_tolower_loc@plt>
   166d8:	ldr	r1, [r0]
   166dc:	ldr	r8, [r1, r8, lsl #2]
   166e0:	sxth	fp, r4
   166e4:	lsl	r0, fp, #1
   166e8:	ldrh	r0, [r7, r0]
   166ec:	tst	r0, #256	; 0x100
   166f0:	beq	16700 <__assert_fail@plt+0x4d60>
   166f4:	bl	11748 <__ctype_tolower_loc@plt>
   166f8:	ldr	r0, [r0]
   166fc:	ldr	r4, [r0, fp, lsl #2]
   16700:	cmp	r8, r4
   16704:	beq	166a0 <__assert_fail@plt+0x4d00>
   16708:	mov	r8, r7
   1670c:	mov	r9, sl
   16710:	ldr	r7, [sp, #44]	; 0x2c
   16714:	ldr	fp, [sp, #48]	; 0x30
   16718:	ldr	r5, [sp, #52]	; 0x34
   1671c:	b	16578 <__assert_fail@plt+0x4bd8>
   16720:	ldrb	r2, [r4]
   16724:	mov	r3, #0
   16728:	movw	r6, #58952	; 0xe648
   1672c:	movt	r6, #2
   16730:	mov	r1, r4
   16734:	strb	r3, [sp, #136]	; 0x88
   16738:	mov	r4, #0
   1673c:	mov	r5, #0
   16740:	strb	r3, [sp, #148]	; 0x94
   16744:	lsr	r3, r2, #5
   16748:	str	r1, [sp, #152]	; 0x98
   1674c:	and	r1, r2, #31
   16750:	strd	r4, [sp, #140]	; 0x8c
   16754:	ldr	r3, [r6, r3, lsl #2]
   16758:	lsr	r3, r3, r1
   1675c:	ands	r4, r3, #1
   16760:	beq	165a4 <__assert_fail@plt+0x4c04>
   16764:	mov	r3, #1
   16768:	mov	r4, r2
   1676c:	strb	r3, [sp, #148]	; 0x94
   16770:	str	r3, [sp, #156]	; 0x9c
   16774:	strb	r3, [sp, #160]	; 0xa0
   16778:	str	r2, [sp, #164]	; 0xa4
   1677c:	b	16624 <__assert_fail@plt+0x4c84>
   16780:	str	r4, [sp, #16]
   16784:	str	r9, [sp, #28]
   16788:	b	16524 <__assert_fail@plt+0x4b84>
   1678c:	mov	r3, #0
   16790:	str	r3, [sp, #8]
   16794:	b	16634 <__assert_fail@plt+0x4c94>
   16798:	bl	11748 <__ctype_tolower_loc@plt>
   1679c:	ldr	r3, [r0]
   167a0:	ldrb	r3, [r3, r4, lsl #2]
   167a4:	str	r3, [sp, #20]
   167a8:	b	16464 <__assert_fail@plt+0x4ac4>
   167ac:	mov	r7, #1
   167b0:	ldr	r0, [sp, #12]
   167b4:	add	r2, sp, #168	; 0xa8
   167b8:	mov	r3, #0
   167bc:	mov	r4, #0
   167c0:	mov	r5, #0
   167c4:	ldr	r1, [sp, #152]	; 0x98
   167c8:	strb	r3, [sp, #192]	; 0xc0
   167cc:	strd	r4, [sp, #196]	; 0xc4
   167d0:	strb	r3, [sp, #204]	; 0xcc
   167d4:	str	r0, [sp, #208]	; 0xd0
   167d8:	cmp	r1, r2
   167dc:	ldr	r4, [sp, #156]	; 0x9c
   167e0:	strne	r1, [sp, #56]	; 0x38
   167e4:	beq	1714c <__assert_fail@plt+0x57ac>
   167e8:	cmp	r7, #0
   167ec:	str	r4, [sp, #60]	; 0x3c
   167f0:	strb	r7, [sp, #64]	; 0x40
   167f4:	beq	16804 <__assert_fail@plt+0x4e64>
   167f8:	ldr	r0, [sp, #164]	; 0xa4
   167fc:	bl	115f8 <towlower@plt>
   16800:	str	r0, [sp, #68]	; 0x44
   16804:	mov	r3, #0
   16808:	ldr	r7, [sp, #4]
   1680c:	mov	fp, #1
   16810:	mov	r5, r3
   16814:	mov	sl, r3
   16818:	str	r6, [sp, #8]
   1681c:	mov	r9, r3
   16820:	str	r3, [sp, #16]
   16824:	str	r3, [sp, #20]
   16828:	str	r3, [sp, #24]
   1682c:	strb	r3, [sp, #248]	; 0xf8
   16830:	str	r3, [sp, #252]	; 0xfc
   16834:	str	r3, [sp, #256]	; 0x100
   16838:	strb	r3, [sp, #260]	; 0x104
   1683c:	ldrb	r3, [sp, #248]	; 0xf8
   16840:	str	r7, [sp, #264]	; 0x108
   16844:	cmp	r3, #0
   16848:	addne	r4, sp, #252	; 0xfc
   1684c:	bne	16bbc <__assert_fail@plt+0x521c>
   16850:	ldrb	r3, [r7]
   16854:	ldr	r1, [sp, #8]
   16858:	lsr	r2, r3, #5
   1685c:	and	r3, r3, #31
   16860:	ldr	r2, [r1, r2, lsl #2]
   16864:	lsr	r3, r2, r3
   16868:	tst	r3, #1
   1686c:	beq	16d7c <__assert_fail@plt+0x53dc>
   16870:	mov	r3, #1
   16874:	str	r3, [sp, #268]	; 0x10c
   16878:	ldrb	r2, [r7]
   1687c:	strb	r3, [sp, #260]	; 0x104
   16880:	strb	r3, [sp, #272]	; 0x110
   16884:	mov	r7, r2
   16888:	str	r2, [sp, #276]	; 0x114
   1688c:	cmp	r7, #0
   16890:	beq	17254 <__assert_fail@plt+0x58b4>
   16894:	cmp	sl, #9
   16898:	movls	r3, #0
   1689c:	andhi	r3, fp, #1
   168a0:	subs	r6, r3, #0
   168a4:	beq	168b8 <__assert_fail@plt+0x4f18>
   168a8:	add	r3, sl, sl, lsl #2
   168ac:	cmp	r9, r3
   168b0:	movcc	fp, r6
   168b4:	bcs	16d9c <__assert_fail@plt+0x53fc>
   168b8:	ldr	r1, [sp, #264]	; 0x108
   168bc:	add	r3, sp, #280	; 0x118
   168c0:	add	sl, sl, #1
   168c4:	add	r8, r9, #1
   168c8:	ldr	r4, [sp, #268]	; 0x10c
   168cc:	cmp	r1, r3
   168d0:	strne	r1, [sp, #96]	; 0x60
   168d4:	beq	16f3c <__assert_fail@plt+0x559c>
   168d8:	ldrb	r3, [sp, #272]	; 0x110
   168dc:	str	r4, [sp, #100]	; 0x64
   168e0:	cmp	r3, #0
   168e4:	strb	r3, [sp, #104]	; 0x68
   168e8:	beq	16cf4 <__assert_fail@plt+0x5354>
   168ec:	ldr	r0, [sp, #276]	; 0x114
   168f0:	bl	115f8 <towlower@plt>
   168f4:	ldrb	r3, [sp, #64]	; 0x40
   168f8:	str	r0, [sp, #108]	; 0x6c
   168fc:	cmp	r3, #0
   16900:	beq	16cf4 <__assert_fail@plt+0x5354>
   16904:	ldr	r3, [sp, #68]	; 0x44
   16908:	cmp	r0, r3
   1690c:	bne	16b98 <__assert_fail@plt+0x51f8>
   16910:	ldrd	r0, [sp, #12]
   16914:	add	r3, sp, #304	; 0x130
   16918:	strb	r5, [sp, #360]	; 0x168
   1691c:	ldrb	r2, [r0]
   16920:	str	r1, [sp, #364]	; 0x16c
   16924:	ldr	r1, [sp, #20]
   16928:	strb	r5, [sp, #372]	; 0x174
   1692c:	str	r0, [sp, #376]	; 0x178
   16930:	ldr	r0, [sp, #8]
   16934:	and	ip, r2, #31
   16938:	str	r1, [sp, #368]	; 0x170
   1693c:	lsr	r1, r2, #5
   16940:	ldr	r7, [r0, r1, lsl #2]
   16944:	ldr	r1, [sp, #264]	; 0x108
   16948:	ldr	r0, [sp, #268]	; 0x10c
   1694c:	lsr	r7, r7, ip
   16950:	add	r4, r4, r1
   16954:	add	r1, sp, #256	; 0x100
   16958:	ands	ip, r7, #1
   1695c:	ldrd	r6, [r1]
   16960:	str	r0, [sp, #324]	; 0x144
   16964:	ldrd	r0, [sp, #248]	; 0xf8
   16968:	str	r4, [sp, #320]	; 0x140
   1696c:	str	ip, [sp, #28]
   16970:	add	ip, sp, #280	; 0x118
   16974:	strd	r0, [r3]
   16978:	add	r1, sp, #272	; 0x110
   1697c:	ldrd	r0, [r1]
   16980:	strd	r6, [r3, #8]
   16984:	ldrd	r6, [ip]
   16988:	add	ip, sp, #288	; 0x120
   1698c:	strb	r5, [sp, #316]	; 0x13c
   16990:	strd	r0, [r3, #24]
   16994:	add	r1, sp, #296	; 0x128
   16998:	ldrd	r0, [r1]
   1699c:	strd	r6, [r3, #32]
   169a0:	ldrd	r6, [ip]
   169a4:	strd	r6, [r3, #40]	; 0x28
   169a8:	strd	r0, [r3, #48]	; 0x30
   169ac:	beq	17094 <__assert_fail@plt+0x56f4>
   169b0:	mov	r3, #1
   169b4:	mov	r4, r2
   169b8:	cmp	r4, #0
   169bc:	strb	r3, [sp, #372]	; 0x174
   169c0:	str	r3, [sp, #380]	; 0x17c
   169c4:	strb	r3, [sp, #384]	; 0x180
   169c8:	str	r2, [sp, #388]	; 0x184
   169cc:	beq	17118 <__assert_fail@plt+0x5778>
   169d0:	ldr	r4, [sp, #376]	; 0x178
   169d4:	add	r8, r9, #2
   169d8:	mov	r7, #1
   169dc:	strb	r5, [sp, #372]	; 0x174
   169e0:	ldr	r6, [sp, #8]
   169e4:	ldr	r3, [sp, #380]	; 0x17c
   169e8:	add	r4, r4, r3
   169ec:	str	r4, [sp, #376]	; 0x178
   169f0:	b	16ae4 <__assert_fail@plt+0x5144>
   169f4:	ldrb	r3, [r4]
   169f8:	lsr	r2, r3, #5
   169fc:	and	r3, r3, #31
   16a00:	ldr	r2, [r6, r2, lsl #2]
   16a04:	lsr	r3, r2, r3
   16a08:	tst	r3, #1
   16a0c:	beq	16cdc <__assert_fail@plt+0x533c>
   16a10:	str	r7, [sp, #380]	; 0x17c
   16a14:	ldrb	r4, [r4]
   16a18:	strb	r7, [sp, #372]	; 0x174
   16a1c:	strb	r7, [sp, #384]	; 0x180
   16a20:	cmp	r4, #0
   16a24:	str	r4, [sp, #388]	; 0x184
   16a28:	beq	16b60 <__assert_fail@plt+0x51c0>
   16a2c:	ldrb	r3, [sp, #316]	; 0x13c
   16a30:	cmp	r3, #0
   16a34:	bne	16cb0 <__assert_fail@plt+0x5310>
   16a38:	ldrb	r3, [sp, #304]	; 0x130
   16a3c:	ldr	r4, [sp, #320]	; 0x140
   16a40:	cmp	r3, #0
   16a44:	addne	r9, sp, #308	; 0x134
   16a48:	bne	16c38 <__assert_fail@plt+0x5298>
   16a4c:	ldrb	r3, [r4]
   16a50:	lsr	r2, r3, #5
   16a54:	and	r3, r3, #31
   16a58:	ldr	r2, [r6, r2, lsl #2]
   16a5c:	lsr	r3, r2, r3
   16a60:	tst	r3, #1
   16a64:	beq	16c20 <__assert_fail@plt+0x5280>
   16a68:	str	r7, [sp, #324]	; 0x144
   16a6c:	ldrb	r4, [r4]
   16a70:	strb	r7, [sp, #316]	; 0x13c
   16a74:	strb	r7, [sp, #328]	; 0x148
   16a78:	str	r4, [sp, #332]	; 0x14c
   16a7c:	cmp	r4, #0
   16a80:	beq	16ca8 <__assert_fail@plt+0x5308>
   16a84:	ldrb	r3, [sp, #384]	; 0x180
   16a88:	cmp	r3, #0
   16a8c:	beq	16b80 <__assert_fail@plt+0x51e0>
   16a90:	mov	r0, r4
   16a94:	bl	115f8 <towlower@plt>
   16a98:	mov	r4, r0
   16a9c:	ldr	r0, [sp, #388]	; 0x184
   16aa0:	bl	115f8 <towlower@plt>
   16aa4:	subs	r0, r4, r0
   16aa8:	movne	r0, #1
   16aac:	cmp	r0, #0
   16ab0:	add	r2, r8, #1
   16ab4:	bne	16b90 <__assert_fail@plt+0x51f0>
   16ab8:	mov	r8, r2
   16abc:	ldr	r3, [sp, #320]	; 0x140
   16ac0:	strb	r0, [sp, #316]	; 0x13c
   16ac4:	ldr	r1, [sp, #324]	; 0x144
   16ac8:	strb	r0, [sp, #372]	; 0x174
   16acc:	ldr	r4, [sp, #376]	; 0x178
   16ad0:	ldr	r2, [sp, #380]	; 0x17c
   16ad4:	add	r3, r3, r1
   16ad8:	str	r3, [sp, #320]	; 0x140
   16adc:	add	r4, r4, r2
   16ae0:	str	r4, [sp, #376]	; 0x178
   16ae4:	ldrb	r3, [sp, #360]	; 0x168
   16ae8:	cmp	r3, #0
   16aec:	beq	169f4 <__assert_fail@plt+0x5054>
   16af0:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16af4:	mov	r1, r0
   16af8:	mov	r0, r4
   16afc:	bl	1af28 <__assert_fail@plt+0x9588>
   16b00:	mov	r2, r0
   16b04:	add	r3, sp, #364	; 0x16c
   16b08:	mov	r1, r4
   16b0c:	add	r0, sp, #388	; 0x184
   16b10:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   16b14:	cmn	r0, #1
   16b18:	str	r0, [sp, #380]	; 0x17c
   16b1c:	strbeq	r7, [sp, #372]	; 0x174
   16b20:	streq	r7, [sp, #380]	; 0x17c
   16b24:	strbeq	r5, [sp, #384]	; 0x180
   16b28:	beq	16a2c <__assert_fail@plt+0x508c>
   16b2c:	cmn	r0, #2
   16b30:	beq	16d1c <__assert_fail@plt+0x537c>
   16b34:	cmp	r0, #0
   16b38:	beq	16d34 <__assert_fail@plt+0x5394>
   16b3c:	ldr	r4, [sp, #388]	; 0x184
   16b40:	add	r0, sp, #364	; 0x16c
   16b44:	strb	r7, [sp, #384]	; 0x180
   16b48:	bl	11604 <mbsinit@plt>
   16b4c:	cmp	r0, #0
   16b50:	strb	r7, [sp, #372]	; 0x174
   16b54:	strbne	r5, [sp, #360]	; 0x168
   16b58:	cmp	r4, #0
   16b5c:	bne	16a2c <__assert_fail@plt+0x508c>
   16b60:	ldr	r3, [sp, #264]	; 0x108
   16b64:	str	r3, [sp, #8]
   16b68:	b	16634 <__assert_fail@plt+0x4c94>
   16b6c:	ldr	r0, [sp, #320]	; 0x140
   16b70:	bl	117a8 <strlen@plt>
   16b74:	strb	r7, [sp, #316]	; 0x13c
   16b78:	str	r0, [sp, #324]	; 0x144
   16b7c:	strb	r5, [sp, #328]	; 0x148
   16b80:	ldr	r2, [sp, #324]	; 0x144
   16b84:	ldr	r3, [sp, #380]	; 0x17c
   16b88:	cmp	r2, r3
   16b8c:	beq	16cc4 <__assert_fail@plt+0x5324>
   16b90:	ldr	r4, [sp, #268]	; 0x10c
   16b94:	str	r6, [sp, #8]
   16b98:	ldr	r7, [sp, #264]	; 0x108
   16b9c:	mov	r9, r8
   16ba0:	strb	r5, [sp, #260]	; 0x104
   16ba4:	ldrb	r3, [sp, #248]	; 0xf8
   16ba8:	add	r7, r7, r4
   16bac:	cmp	r3, #0
   16bb0:	str	r7, [sp, #264]	; 0x108
   16bb4:	addne	r4, sp, #252	; 0xfc
   16bb8:	beq	16850 <__assert_fail@plt+0x4eb0>
   16bbc:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16bc0:	mov	r1, r0
   16bc4:	mov	r0, r7
   16bc8:	bl	1af28 <__assert_fail@plt+0x9588>
   16bcc:	mov	r2, r0
   16bd0:	mov	r3, r4
   16bd4:	mov	r1, r7
   16bd8:	add	r0, sp, #276	; 0x114
   16bdc:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   16be0:	cmn	r0, #1
   16be4:	str	r0, [sp, #268]	; 0x10c
   16be8:	beq	16f54 <__assert_fail@plt+0x55b4>
   16bec:	cmn	r0, #2
   16bf0:	beq	16fcc <__assert_fail@plt+0x562c>
   16bf4:	cmp	r0, #0
   16bf8:	beq	16fe8 <__assert_fail@plt+0x5648>
   16bfc:	ldr	r7, [sp, #276]	; 0x114
   16c00:	mov	r8, #1
   16c04:	mov	r0, r4
   16c08:	strb	r8, [sp, #272]	; 0x110
   16c0c:	bl	11604 <mbsinit@plt>
   16c10:	cmp	r0, #0
   16c14:	strb	r8, [sp, #260]	; 0x104
   16c18:	strbne	r5, [sp, #248]	; 0xf8
   16c1c:	b	1688c <__assert_fail@plt+0x4eec>
   16c20:	add	r9, sp, #308	; 0x134
   16c24:	mov	r0, r9
   16c28:	bl	11604 <mbsinit@plt>
   16c2c:	cmp	r0, #0
   16c30:	beq	17278 <__assert_fail@plt+0x58d8>
   16c34:	strb	r7, [sp, #304]	; 0x130
   16c38:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16c3c:	mov	r1, r0
   16c40:	mov	r0, r4
   16c44:	bl	1af28 <__assert_fail@plt+0x9588>
   16c48:	mov	r2, r0
   16c4c:	mov	r3, r9
   16c50:	mov	r1, r4
   16c54:	add	r0, sp, #332	; 0x14c
   16c58:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   16c5c:	cmn	r0, #1
   16c60:	str	r0, [sp, #324]	; 0x144
   16c64:	strbeq	r7, [sp, #316]	; 0x13c
   16c68:	streq	r7, [sp, #324]	; 0x144
   16c6c:	strbeq	r5, [sp, #328]	; 0x148
   16c70:	beq	16b80 <__assert_fail@plt+0x51e0>
   16c74:	cmn	r0, #2
   16c78:	beq	16b6c <__assert_fail@plt+0x51cc>
   16c7c:	cmp	r0, #0
   16c80:	beq	16d58 <__assert_fail@plt+0x53b8>
   16c84:	ldr	r4, [sp, #332]	; 0x14c
   16c88:	mov	r0, r9
   16c8c:	strb	r7, [sp, #328]	; 0x148
   16c90:	bl	11604 <mbsinit@plt>
   16c94:	cmp	r0, #0
   16c98:	strb	r7, [sp, #316]	; 0x13c
   16c9c:	strbne	r5, [sp, #304]	; 0x130
   16ca0:	cmp	r4, #0
   16ca4:	bne	16a84 <__assert_fail@plt+0x50e4>
   16ca8:	str	r4, [sp, #8]
   16cac:	b	16634 <__assert_fail@plt+0x4c94>
   16cb0:	ldrb	r3, [sp, #328]	; 0x148
   16cb4:	cmp	r3, #0
   16cb8:	beq	16b80 <__assert_fail@plt+0x51e0>
   16cbc:	ldr	r4, [sp, #332]	; 0x14c
   16cc0:	b	16a7c <__assert_fail@plt+0x50dc>
   16cc4:	ldr	r0, [sp, #320]	; 0x140
   16cc8:	ldr	r1, [sp, #376]	; 0x178
   16ccc:	bl	1161c <memcmp@plt>
   16cd0:	adds	r0, r0, #0
   16cd4:	movne	r0, #1
   16cd8:	b	16aac <__assert_fail@plt+0x510c>
   16cdc:	add	r0, sp, #364	; 0x16c
   16ce0:	bl	11604 <mbsinit@plt>
   16ce4:	cmp	r0, #0
   16ce8:	beq	17278 <__assert_fail@plt+0x58d8>
   16cec:	strb	r7, [sp, #360]	; 0x168
   16cf0:	b	16af0 <__assert_fail@plt+0x5150>
   16cf4:	ldr	r3, [sp, #60]	; 0x3c
   16cf8:	cmp	r3, r4
   16cfc:	bne	16b98 <__assert_fail@plt+0x51f8>
   16d00:	mov	r2, r4
   16d04:	ldr	r1, [sp, #56]	; 0x38
   16d08:	ldr	r0, [sp, #96]	; 0x60
   16d0c:	bl	1161c <memcmp@plt>
   16d10:	cmp	r0, #0
   16d14:	bne	16b98 <__assert_fail@plt+0x51f8>
   16d18:	b	16910 <__assert_fail@plt+0x4f70>
   16d1c:	ldr	r0, [sp, #376]	; 0x178
   16d20:	bl	117a8 <strlen@plt>
   16d24:	strb	r7, [sp, #372]	; 0x174
   16d28:	str	r0, [sp, #380]	; 0x17c
   16d2c:	strb	r5, [sp, #384]	; 0x180
   16d30:	b	16a2c <__assert_fail@plt+0x508c>
   16d34:	ldr	r3, [sp, #376]	; 0x178
   16d38:	str	r7, [sp, #380]	; 0x17c
   16d3c:	ldrb	r3, [r3]
   16d40:	cmp	r3, #0
   16d44:	bne	17298 <__assert_fail@plt+0x58f8>
   16d48:	ldr	r4, [sp, #388]	; 0x184
   16d4c:	cmp	r4, #0
   16d50:	beq	16b40 <__assert_fail@plt+0x51a0>
   16d54:	b	171c4 <__assert_fail@plt+0x5824>
   16d58:	ldr	r3, [sp, #320]	; 0x140
   16d5c:	str	r7, [sp, #324]	; 0x144
   16d60:	ldrb	r3, [r3]
   16d64:	cmp	r3, #0
   16d68:	bne	17298 <__assert_fail@plt+0x58f8>
   16d6c:	ldr	r4, [sp, #332]	; 0x14c
   16d70:	cmp	r4, #0
   16d74:	beq	16c88 <__assert_fail@plt+0x52e8>
   16d78:	b	171c4 <__assert_fail@plt+0x5824>
   16d7c:	add	r4, sp, #252	; 0xfc
   16d80:	mov	r0, r4
   16d84:	bl	11604 <mbsinit@plt>
   16d88:	cmp	r0, #0
   16d8c:	beq	17278 <__assert_fail@plt+0x58d8>
   16d90:	mov	r3, #1
   16d94:	strb	r3, [sp, #248]	; 0xf8
   16d98:	b	16bbc <__assert_fail@plt+0x521c>
   16d9c:	ldr	r3, [sp, #24]
   16da0:	ldrb	fp, [sp, #204]	; 0xcc
   16da4:	subs	r7, r9, r3
   16da8:	beq	1725c <__assert_fail@plt+0x58bc>
   16dac:	cmp	fp, #0
   16db0:	beq	1711c <__assert_fail@plt+0x577c>
   16db4:	ldrb	r3, [sp, #216]	; 0xd8
   16db8:	cmp	r3, #0
   16dbc:	bne	16f34 <__assert_fail@plt+0x5594>
   16dc0:	ldr	r4, [sp, #208]	; 0xd0
   16dc4:	subs	r7, r7, #1
   16dc8:	strb	r5, [sp, #204]	; 0xcc
   16dcc:	ldr	r3, [sp, #212]	; 0xd4
   16dd0:	add	r4, r4, r3
   16dd4:	mov	fp, r4
   16dd8:	str	r4, [sp, #208]	; 0xd0
   16ddc:	beq	16f6c <__assert_fail@plt+0x55cc>
   16de0:	ldrb	r3, [sp, #192]	; 0xc0
   16de4:	cmp	r3, #0
   16de8:	addne	r8, sp, #196	; 0xc4
   16dec:	bne	16e7c <__assert_fail@plt+0x54dc>
   16df0:	ldrb	r3, [r4]
   16df4:	ldr	r1, [sp, #8]
   16df8:	lsr	r2, r3, #5
   16dfc:	and	r3, r3, #31
   16e00:	ldr	r2, [r1, r2, lsl #2]
   16e04:	lsr	r3, r2, r3
   16e08:	tst	r3, #1
   16e0c:	beq	16e60 <__assert_fail@plt+0x54c0>
   16e10:	mov	r3, #1
   16e14:	str	r3, [sp, #212]	; 0xd4
   16e18:	ldrb	r2, [r4]
   16e1c:	strb	r3, [sp, #204]	; 0xcc
   16e20:	strb	r3, [sp, #216]	; 0xd8
   16e24:	mov	r4, r2
   16e28:	str	r2, [sp, #220]	; 0xdc
   16e2c:	cmp	r4, #0
   16e30:	bne	16dc0 <__assert_fail@plt+0x5420>
   16e34:	ldrb	r3, [sp, #204]	; 0xcc
   16e38:	cmp	r3, #0
   16e3c:	beq	16f68 <__assert_fail@plt+0x55c8>
   16e40:	add	r2, sp, #360	; 0x168
   16e44:	ldr	r0, [sp, #4]
   16e48:	ldr	r1, [sp, #12]
   16e4c:	bl	15aa8 <__assert_fail@plt+0x4108>
   16e50:	subs	fp, r0, #0
   16e54:	bne	171ec <__assert_fail@plt+0x584c>
   16e58:	str	r9, [sp, #24]
   16e5c:	b	168b8 <__assert_fail@plt+0x4f18>
   16e60:	add	r8, sp, #196	; 0xc4
   16e64:	mov	r0, r8
   16e68:	bl	11604 <mbsinit@plt>
   16e6c:	cmp	r0, #0
   16e70:	beq	17278 <__assert_fail@plt+0x58d8>
   16e74:	mov	r3, #1
   16e78:	strb	r3, [sp, #192]	; 0xc0
   16e7c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16e80:	mov	r1, r0
   16e84:	mov	r0, r4
   16e88:	bl	1af28 <__assert_fail@plt+0x9588>
   16e8c:	mov	r2, r0
   16e90:	mov	r3, r8
   16e94:	mov	r1, r4
   16e98:	add	r0, sp, #220	; 0xdc
   16e9c:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   16ea0:	cmn	r0, #1
   16ea4:	str	r0, [sp, #212]	; 0xd4
   16ea8:	beq	16ee0 <__assert_fail@plt+0x5540>
   16eac:	cmn	r0, #2
   16eb0:	beq	16ef4 <__assert_fail@plt+0x5554>
   16eb4:	cmp	r0, #0
   16eb8:	beq	16f0c <__assert_fail@plt+0x556c>
   16ebc:	ldr	r4, [sp, #220]	; 0xdc
   16ec0:	mov	fp, #1
   16ec4:	mov	r0, r8
   16ec8:	strb	fp, [sp, #216]	; 0xd8
   16ecc:	bl	11604 <mbsinit@plt>
   16ed0:	cmp	r0, #0
   16ed4:	strb	fp, [sp, #204]	; 0xcc
   16ed8:	strbne	r5, [sp, #192]	; 0xc0
   16edc:	b	16e2c <__assert_fail@plt+0x548c>
   16ee0:	mov	r3, #1
   16ee4:	ldr	r4, [sp, #208]	; 0xd0
   16ee8:	str	r3, [sp, #212]	; 0xd4
   16eec:	strb	r5, [sp, #216]	; 0xd8
   16ef0:	b	16dc4 <__assert_fail@plt+0x5424>
   16ef4:	ldr	r4, [sp, #208]	; 0xd0
   16ef8:	mov	r0, r4
   16efc:	bl	117a8 <strlen@plt>
   16f00:	str	r0, [sp, #212]	; 0xd4
   16f04:	strb	r5, [sp, #216]	; 0xd8
   16f08:	b	16dc4 <__assert_fail@plt+0x5424>
   16f0c:	ldr	r4, [sp, #208]	; 0xd0
   16f10:	mov	r3, #1
   16f14:	str	r3, [sp, #212]	; 0xd4
   16f18:	ldrb	r3, [r4]
   16f1c:	cmp	r3, #0
   16f20:	bne	17298 <__assert_fail@plt+0x58f8>
   16f24:	ldr	r4, [sp, #220]	; 0xdc
   16f28:	cmp	r4, #0
   16f2c:	beq	16ec0 <__assert_fail@plt+0x5520>
   16f30:	b	171c4 <__assert_fail@plt+0x5824>
   16f34:	ldr	r4, [sp, #220]	; 0xdc
   16f38:	b	16e2c <__assert_fail@plt+0x548c>
   16f3c:	add	r3, sp, #112	; 0x70
   16f40:	mov	r2, r4
   16f44:	mov	r0, r3
   16f48:	bl	115d4 <memcpy@plt>
   16f4c:	str	r0, [sp, #96]	; 0x60
   16f50:	b	168d8 <__assert_fail@plt+0x4f38>
   16f54:	mov	r3, #1
   16f58:	strb	r3, [sp, #260]	; 0x104
   16f5c:	str	r3, [sp, #268]	; 0x10c
   16f60:	strb	r5, [sp, #272]	; 0x110
   16f64:	b	16894 <__assert_fail@plt+0x4ef4>
   16f68:	ldr	fp, [sp, #208]	; 0xd0
   16f6c:	ldrb	r3, [sp, #192]	; 0xc0
   16f70:	cmp	r3, #0
   16f74:	addne	r8, sp, #196	; 0xc4
   16f78:	bne	1702c <__assert_fail@plt+0x568c>
   16f7c:	ldrb	r3, [fp]
   16f80:	ldr	r1, [sp, #8]
   16f84:	lsr	r2, r3, #5
   16f88:	and	r3, r3, #31
   16f8c:	ldr	r2, [r1, r2, lsl #2]
   16f90:	lsr	r3, r2, r3
   16f94:	tst	r3, #1
   16f98:	beq	17010 <__assert_fail@plt+0x5670>
   16f9c:	mov	r3, #1
   16fa0:	str	r3, [sp, #212]	; 0xd4
   16fa4:	ldrb	r2, [fp]
   16fa8:	strb	r3, [sp, #204]	; 0xcc
   16fac:	strb	r3, [sp, #216]	; 0xd8
   16fb0:	mov	r4, r2
   16fb4:	str	r2, [sp, #220]	; 0xdc
   16fb8:	cmp	r4, #0
   16fbc:	movne	fp, r6
   16fc0:	beq	16e40 <__assert_fail@plt+0x54a0>
   16fc4:	str	r9, [sp, #24]
   16fc8:	b	168b8 <__assert_fail@plt+0x4f18>
   16fcc:	ldr	r0, [sp, #264]	; 0x108
   16fd0:	bl	117a8 <strlen@plt>
   16fd4:	mov	r3, #1
   16fd8:	strb	r3, [sp, #260]	; 0x104
   16fdc:	str	r0, [sp, #268]	; 0x10c
   16fe0:	strb	r5, [sp, #272]	; 0x110
   16fe4:	b	16894 <__assert_fail@plt+0x4ef4>
   16fe8:	ldr	r3, [sp, #264]	; 0x108
   16fec:	mov	r2, #1
   16ff0:	str	r2, [sp, #268]	; 0x10c
   16ff4:	ldrb	r3, [r3]
   16ff8:	cmp	r3, #0
   16ffc:	bne	17298 <__assert_fail@plt+0x58f8>
   17000:	ldr	r7, [sp, #276]	; 0x114
   17004:	cmp	r7, #0
   17008:	beq	16c00 <__assert_fail@plt+0x5260>
   1700c:	b	171c4 <__assert_fail@plt+0x5824>
   17010:	add	r8, sp, #196	; 0xc4
   17014:	mov	r0, r8
   17018:	bl	11604 <mbsinit@plt>
   1701c:	cmp	r0, #0
   17020:	beq	17278 <__assert_fail@plt+0x58d8>
   17024:	mov	r3, #1
   17028:	strb	r3, [sp, #192]	; 0xc0
   1702c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17030:	mov	r1, r0
   17034:	mov	r0, fp
   17038:	bl	1af28 <__assert_fail@plt+0x9588>
   1703c:	mov	r2, r0
   17040:	mov	r3, r8
   17044:	mov	r1, fp
   17048:	add	r0, sp, #220	; 0xdc
   1704c:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   17050:	cmn	r0, #1
   17054:	str	r0, [sp, #212]	; 0xd4
   17058:	beq	171f8 <__assert_fail@plt+0x5858>
   1705c:	cmn	r0, #2
   17060:	beq	17230 <__assert_fail@plt+0x5890>
   17064:	cmp	r0, #0
   17068:	bne	171c8 <__assert_fail@plt+0x5828>
   1706c:	ldr	r4, [sp, #208]	; 0xd0
   17070:	mov	r3, #1
   17074:	str	r3, [sp, #212]	; 0xd4
   17078:	ldrb	r3, [r4]
   1707c:	cmp	r3, #0
   17080:	bne	17298 <__assert_fail@plt+0x58f8>
   17084:	ldr	r4, [sp, #220]	; 0xdc
   17088:	cmp	r4, #0
   1708c:	beq	171cc <__assert_fail@plt+0x582c>
   17090:	b	171c4 <__assert_fail@plt+0x5824>
   17094:	add	r0, sp, #364	; 0x16c
   17098:	bl	11604 <mbsinit@plt>
   1709c:	cmp	r0, #0
   170a0:	beq	17278 <__assert_fail@plt+0x58d8>
   170a4:	mov	r8, #1
   170a8:	strb	r8, [sp, #360]	; 0x168
   170ac:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   170b0:	ldr	r4, [sp, #12]
   170b4:	mov	r1, r0
   170b8:	mov	r0, r4
   170bc:	bl	1af28 <__assert_fail@plt+0x9588>
   170c0:	mov	r2, r0
   170c4:	add	r3, sp, #364	; 0x16c
   170c8:	mov	r1, r4
   170cc:	add	r0, sp, #388	; 0x184
   170d0:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   170d4:	cmn	r0, #1
   170d8:	str	r0, [sp, #380]	; 0x17c
   170dc:	beq	17124 <__assert_fail@plt+0x5784>
   170e0:	cmn	r0, #2
   170e4:	beq	17164 <__assert_fail@plt+0x57c4>
   170e8:	cmp	r0, #0
   170ec:	beq	17180 <__assert_fail@plt+0x57e0>
   170f0:	ldr	r4, [sp, #388]	; 0x184
   170f4:	mov	r7, #1
   170f8:	add	r0, sp, #364	; 0x16c
   170fc:	strb	r7, [sp, #384]	; 0x180
   17100:	bl	11604 <mbsinit@plt>
   17104:	cmp	r0, #0
   17108:	strb	r7, [sp, #372]	; 0x174
   1710c:	strbne	r5, [sp, #360]	; 0x168
   17110:	cmp	r4, #0
   17114:	bne	169d0 <__assert_fail@plt+0x5030>
   17118:	bl	11964 <abort@plt>
   1711c:	ldr	r4, [sp, #208]	; 0xd0
   17120:	b	16de0 <__assert_fail@plt+0x5440>
   17124:	ldr	r3, [sp, #28]
   17128:	str	r8, [sp, #380]	; 0x17c
   1712c:	ldr	r4, [sp, #376]	; 0x178
   17130:	strb	r3, [sp, #384]	; 0x180
   17134:	b	169d4 <__assert_fail@plt+0x5034>
   17138:	mov	r7, r4
   1713c:	strb	r5, [sp, #148]	; 0x94
   17140:	str	r5, [sp, #156]	; 0x9c
   17144:	strb	r4, [sp, #160]	; 0xa0
   17148:	b	167b0 <__assert_fail@plt+0x4e10>
   1714c:	add	r3, sp, #72	; 0x48
   17150:	mov	r2, r4
   17154:	mov	r0, r3
   17158:	bl	115d4 <memcpy@plt>
   1715c:	str	r0, [sp, #56]	; 0x38
   17160:	b	167e8 <__assert_fail@plt+0x4e48>
   17164:	ldr	r4, [sp, #376]	; 0x178
   17168:	mov	r0, r4
   1716c:	bl	117a8 <strlen@plt>
   17170:	ldr	r3, [sp, #28]
   17174:	str	r0, [sp, #380]	; 0x17c
   17178:	strb	r3, [sp, #384]	; 0x180
   1717c:	b	169d4 <__assert_fail@plt+0x5034>
   17180:	ldr	r4, [sp, #376]	; 0x178
   17184:	str	r8, [sp, #380]	; 0x17c
   17188:	ldrb	r3, [r4]
   1718c:	cmp	r3, #0
   17190:	bne	17298 <__assert_fail@plt+0x58f8>
   17194:	ldr	r4, [sp, #388]	; 0x184
   17198:	cmp	r4, #0
   1719c:	beq	170f4 <__assert_fail@plt+0x5754>
   171a0:	b	171c4 <__assert_fail@plt+0x5824>
   171a4:	ldr	r3, [sp, #152]	; 0x98
   171a8:	str	r5, [sp, #156]	; 0x9c
   171ac:	ldrb	r3, [r3]
   171b0:	cmp	r3, #0
   171b4:	bne	17298 <__assert_fail@plt+0x58f8>
   171b8:	ldr	r4, [sp, #164]	; 0xa4
   171bc:	cmp	r4, #0
   171c0:	beq	16604 <__assert_fail@plt+0x4c64>
   171c4:	bl	15a80 <__assert_fail@plt+0x40e0>
   171c8:	ldr	r4, [sp, #220]	; 0xdc
   171cc:	mov	r7, #1
   171d0:	mov	r0, r8
   171d4:	strb	r7, [sp, #216]	; 0xd8
   171d8:	bl	11604 <mbsinit@plt>
   171dc:	cmp	r0, #0
   171e0:	strb	r7, [sp, #204]	; 0xcc
   171e4:	strbne	r5, [sp, #192]	; 0xc0
   171e8:	b	16fb8 <__assert_fail@plt+0x5618>
   171ec:	ldr	r3, [sp, #360]	; 0x168
   171f0:	str	r3, [sp, #8]
   171f4:	b	16634 <__assert_fail@plt+0x4c94>
   171f8:	mov	r3, #1
   171fc:	mov	fp, r6
   17200:	str	r9, [sp, #24]
   17204:	strb	r3, [sp, #204]	; 0xcc
   17208:	str	r3, [sp, #212]	; 0xd4
   1720c:	strb	r5, [sp, #216]	; 0xd8
   17210:	b	168b8 <__assert_fail@plt+0x4f18>
   17214:	ldr	r0, [sp, #152]	; 0x98
   17218:	mov	r7, r4
   1721c:	bl	117a8 <strlen@plt>
   17220:	strb	r5, [sp, #148]	; 0x94
   17224:	str	r0, [sp, #156]	; 0x9c
   17228:	strb	r4, [sp, #160]	; 0xa0
   1722c:	b	167b0 <__assert_fail@plt+0x4e10>
   17230:	ldr	r0, [sp, #208]	; 0xd0
   17234:	mov	fp, r6
   17238:	str	r9, [sp, #24]
   1723c:	bl	117a8 <strlen@plt>
   17240:	mov	r3, #1
   17244:	strb	r3, [sp, #204]	; 0xcc
   17248:	str	r0, [sp, #212]	; 0xd4
   1724c:	strb	r5, [sp, #216]	; 0xd8
   17250:	b	168b8 <__assert_fail@plt+0x4f18>
   17254:	str	r7, [sp, #8]
   17258:	b	16634 <__assert_fail@plt+0x4c94>
   1725c:	cmp	fp, #0
   17260:	beq	16f68 <__assert_fail@plt+0x55c8>
   17264:	ldrb	r3, [sp, #216]	; 0xd8
   17268:	cmp	r3, #0
   1726c:	ldrne	r4, [sp, #220]	; 0xdc
   17270:	beq	16e58 <__assert_fail@plt+0x54b8>
   17274:	b	16fb8 <__assert_fail@plt+0x5618>
   17278:	movw	r3, #56856	; 0xde18
   1727c:	movt	r3, #2
   17280:	movw	r1, #56876	; 0xde2c
   17284:	movt	r1, #2
   17288:	movw	r0, #56908	; 0xde4c
   1728c:	movt	r0, #2
   17290:	mov	r2, #143	; 0x8f
   17294:	bl	119a0 <__assert_fail@plt>
   17298:	movw	r3, #56856	; 0xde18
   1729c:	movt	r3, #2
   172a0:	movw	r1, #56876	; 0xde2c
   172a4:	movt	r1, #2
   172a8:	movw	r0, #56932	; 0xde64
   172ac:	movt	r0, #2
   172b0:	mov	r2, #171	; 0xab
   172b4:	bl	119a0 <__assert_fail@plt>
   172b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   172bc:	mov	r4, r0
   172c0:	strd	r6, [sp, #8]
   172c4:	str	r8, [sp, #16]
   172c8:	str	lr, [sp, #20]
   172cc:	sub	sp, sp, #56	; 0x38
   172d0:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   172d4:	cmp	r0, #1
   172d8:	bhi	17304 <__assert_fail@plt+0x5964>
   172dc:	mov	r0, r4
   172e0:	bl	117a8 <strlen@plt>
   172e4:	mov	r5, r0
   172e8:	mov	r0, r5
   172ec:	add	sp, sp, #56	; 0x38
   172f0:	ldrd	r4, [sp]
   172f4:	ldrd	r6, [sp, #8]
   172f8:	ldr	r8, [sp, #16]
   172fc:	add	sp, sp, #20
   17300:	pop	{pc}		; (ldr pc, [sp], #4)
   17304:	mov	r3, #0
   17308:	mov	r0, #0
   1730c:	mov	r1, #0
   17310:	movw	r7, #58952	; 0xe648
   17314:	movt	r7, #2
   17318:	mov	r5, r3
   1731c:	strb	r3, [sp]
   17320:	mov	r6, #1
   17324:	strd	r0, [sp, #4]
   17328:	strb	r3, [sp, #12]
   1732c:	str	r4, [sp, #16]
   17330:	b	17388 <__assert_fail@plt+0x59e8>
   17334:	ldrb	r3, [r4]
   17338:	lsr	r2, r3, #5
   1733c:	and	r3, r3, #31
   17340:	ldr	r2, [r7, r2, lsl #2]
   17344:	lsr	r3, r2, r3
   17348:	tst	r3, #1
   1734c:	beq	173f8 <__assert_fail@plt+0x5a58>
   17350:	str	r6, [sp, #20]
   17354:	ldrb	r3, [r4]
   17358:	strb	r6, [sp, #24]
   1735c:	mov	r4, r3
   17360:	str	r3, [sp, #28]
   17364:	cmp	r4, #0
   17368:	beq	172e8 <__assert_fail@plt+0x5948>
   1736c:	ldr	r4, [sp, #16]
   17370:	mov	r2, #0
   17374:	add	r5, r5, #1
   17378:	ldr	r3, [sp, #20]
   1737c:	strb	r2, [sp, #12]
   17380:	add	r4, r4, r3
   17384:	str	r4, [sp, #16]
   17388:	ldrb	r3, [sp]
   1738c:	cmp	r3, #0
   17390:	addne	r8, sp, #4
   17394:	beq	17334 <__assert_fail@plt+0x5994>
   17398:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   1739c:	mov	r1, r0
   173a0:	mov	r0, r4
   173a4:	bl	1af28 <__assert_fail@plt+0x9588>
   173a8:	mov	r2, r0
   173ac:	mov	r3, r8
   173b0:	mov	r1, r4
   173b4:	add	r0, sp, #28
   173b8:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   173bc:	cmn	r0, #1
   173c0:	str	r0, [sp, #20]
   173c4:	beq	17414 <__assert_fail@plt+0x5a74>
   173c8:	cmn	r0, #2
   173cc:	beq	17428 <__assert_fail@plt+0x5a88>
   173d0:	cmp	r0, #0
   173d4:	beq	17444 <__assert_fail@plt+0x5aa4>
   173d8:	ldr	r4, [sp, #28]
   173dc:	mov	r0, r8
   173e0:	strb	r6, [sp, #24]
   173e4:	bl	11604 <mbsinit@plt>
   173e8:	cmp	r0, #0
   173ec:	movne	r3, #0
   173f0:	strbne	r3, [sp]
   173f4:	b	17364 <__assert_fail@plt+0x59c4>
   173f8:	add	r8, sp, #4
   173fc:	mov	r0, r8
   17400:	bl	11604 <mbsinit@plt>
   17404:	cmp	r0, #0
   17408:	beq	17484 <__assert_fail@plt+0x5ae4>
   1740c:	strb	r6, [sp]
   17410:	b	17398 <__assert_fail@plt+0x59f8>
   17414:	mov	r3, #0
   17418:	str	r6, [sp, #20]
   1741c:	ldr	r4, [sp, #16]
   17420:	strb	r3, [sp, #24]
   17424:	b	17370 <__assert_fail@plt+0x59d0>
   17428:	ldr	r4, [sp, #16]
   1742c:	mov	r0, r4
   17430:	bl	117a8 <strlen@plt>
   17434:	mov	r3, #0
   17438:	str	r0, [sp, #20]
   1743c:	strb	r3, [sp, #24]
   17440:	b	17370 <__assert_fail@plt+0x59d0>
   17444:	ldr	r4, [sp, #16]
   17448:	str	r6, [sp, #20]
   1744c:	ldrb	r3, [r4]
   17450:	cmp	r3, #0
   17454:	bne	174a4 <__assert_fail@plt+0x5b04>
   17458:	ldr	r4, [sp, #28]
   1745c:	cmp	r4, #0
   17460:	beq	173dc <__assert_fail@plt+0x5a3c>
   17464:	movw	r3, #56956	; 0xde7c
   17468:	movt	r3, #2
   1746c:	movw	r1, #56876	; 0xde2c
   17470:	movt	r1, #2
   17474:	movw	r0, #56888	; 0xde38
   17478:	movt	r0, #2
   1747c:	mov	r2, #172	; 0xac
   17480:	bl	119a0 <__assert_fail@plt>
   17484:	movw	r3, #56956	; 0xde7c
   17488:	movt	r3, #2
   1748c:	movw	r1, #56876	; 0xde2c
   17490:	movt	r1, #2
   17494:	movw	r0, #56908	; 0xde4c
   17498:	movt	r0, #2
   1749c:	mov	r2, #143	; 0x8f
   174a0:	bl	119a0 <__assert_fail@plt>
   174a4:	movw	r3, #56956	; 0xde7c
   174a8:	movt	r3, #2
   174ac:	movw	r1, #56876	; 0xde2c
   174b0:	movt	r1, #2
   174b4:	movw	r0, #56932	; 0xde64
   174b8:	movt	r0, #2
   174bc:	mov	r2, #171	; 0xab
   174c0:	bl	119a0 <__assert_fail@plt>
   174c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   174c8:	mov	r5, r0
   174cc:	strd	r6, [sp, #8]
   174d0:	mov	r6, r2
   174d4:	lsrs	r2, r6, #30
   174d8:	str	fp, [sp, #16]
   174dc:	add	fp, sp, #20
   174e0:	movne	r2, #1
   174e4:	moveq	r2, #0
   174e8:	lsls	r0, r6, #2
   174ec:	str	lr, [sp, #20]
   174f0:	bmi	175f8 <__assert_fail@plt+0x5c58>
   174f4:	cmp	r2, #0
   174f8:	bne	175f8 <__assert_fail@plt+0x5c58>
   174fc:	cmp	r0, #4016	; 0xfb0
   17500:	mov	r4, r1
   17504:	mov	r7, r3
   17508:	bhi	175ec <__assert_fail@plt+0x5c4c>
   1750c:	add	r3, r0, #22
   17510:	bic	r3, r3, #7
   17514:	sub	sp, sp, r3
   17518:	add	r0, sp, #15
   1751c:	bic	r0, r0, #15
   17520:	cmp	r0, #0
   17524:	beq	175f8 <__assert_fail@plt+0x5c58>
   17528:	mov	r3, #1
   1752c:	cmp	r6, #2
   17530:	movhi	r2, r4
   17534:	movhi	ip, #0
   17538:	str	r3, [r0, #4]
   1753c:	movhi	r3, #2
   17540:	bls	17588 <__assert_fail@plt+0x5be8>
   17544:	ldrb	r1, [r2, #1]!
   17548:	ldrb	lr, [r4, ip]
   1754c:	cmp	lr, r1
   17550:	bne	1756c <__assert_fail@plt+0x5bcc>
   17554:	b	1762c <__assert_fail@plt+0x5c8c>
   17558:	ldr	lr, [r0, ip, lsl #2]
   1755c:	sub	ip, ip, lr
   17560:	ldrb	lr, [r4, ip]
   17564:	cmp	lr, r1
   17568:	beq	1762c <__assert_fail@plt+0x5c8c>
   1756c:	cmp	ip, #0
   17570:	bne	17558 <__assert_fail@plt+0x5bb8>
   17574:	mov	ip, #0
   17578:	str	r3, [r0, r3, lsl #2]
   1757c:	add	r3, r3, #1
   17580:	cmp	r6, r3
   17584:	bne	17544 <__assert_fail@plt+0x5ba4>
   17588:	mov	r3, #0
   1758c:	mov	r1, r5
   17590:	mov	r2, r3
   17594:	str	r3, [r7]
   17598:	ldrb	r3, [r5]
   1759c:	cmp	r3, #0
   175a0:	beq	175cc <__assert_fail@plt+0x5c2c>
   175a4:	ldrb	ip, [r4, r2]
   175a8:	cmp	ip, r3
   175ac:	beq	17600 <__assert_fail@plt+0x5c60>
   175b0:	cmp	r2, #0
   175b4:	beq	1761c <__assert_fail@plt+0x5c7c>
   175b8:	ldr	ip, [r0, r2, lsl #2]
   175bc:	cmp	r3, #0
   175c0:	add	r5, r5, ip
   175c4:	sub	r2, r2, ip
   175c8:	bne	175a4 <__assert_fail@plt+0x5c04>
   175cc:	bl	2c4a4 <__assert_fail@plt+0x1ab04>
   175d0:	mov	r0, #1
   175d4:	sub	sp, fp, #20
   175d8:	ldrd	r4, [sp]
   175dc:	ldrd	r6, [sp, #8]
   175e0:	ldr	fp, [sp, #16]
   175e4:	add	sp, sp, #20
   175e8:	pop	{pc}		; (ldr pc, [sp], #4)
   175ec:	bl	2c44c <__assert_fail@plt+0x1aaac>
   175f0:	cmp	r0, #0
   175f4:	bne	17528 <__assert_fail@plt+0x5b88>
   175f8:	mov	r0, #0
   175fc:	b	175d4 <__assert_fail@plt+0x5c34>
   17600:	add	r2, r2, #1
   17604:	add	ip, r1, #1
   17608:	cmp	r6, r2
   1760c:	beq	1763c <__assert_fail@plt+0x5c9c>
   17610:	ldrb	r3, [r1, #1]
   17614:	mov	r1, ip
   17618:	b	1759c <__assert_fail@plt+0x5bfc>
   1761c:	ldrb	r3, [r1, #1]
   17620:	add	r5, r5, #1
   17624:	add	r1, r1, #1
   17628:	b	1759c <__assert_fail@plt+0x5bfc>
   1762c:	add	ip, ip, #1
   17630:	sub	r1, r3, ip
   17634:	str	r1, [r0, r3, lsl #2]
   17638:	b	1757c <__assert_fail@plt+0x5bdc>
   1763c:	str	r5, [r7]
   17640:	b	175cc <__assert_fail@plt+0x5c2c>
   17644:	movw	r3, #56976	; 0xde90
   17648:	movt	r3, #2
   1764c:	str	r4, [sp, #-8]!
   17650:	movw	r1, #56876	; 0xde2c
   17654:	movt	r1, #2
   17658:	str	lr, [sp, #4]
   1765c:	movw	r0, #56888	; 0xde38
   17660:	movt	r0, #2
   17664:	mov	r2, #172	; 0xac
   17668:	bl	119a0 <__assert_fail@plt>
   1766c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17670:	mov	r4, r1
   17674:	strd	r6, [sp, #8]
   17678:	strd	r8, [sp, #16]
   1767c:	strd	sl, [sp, #24]
   17680:	add	fp, sp, #32
   17684:	str	lr, [sp, #32]
   17688:	sub	sp, sp, #188	; 0xbc
   1768c:	str	r2, [fp, #-220]	; 0xffffff24
   17690:	str	r0, [fp, #-212]	; 0xffffff2c
   17694:	mov	r0, r1
   17698:	bl	172b8 <__assert_fail@plt+0x5918>
   1769c:	mov	r3, #44	; 0x2c
   176a0:	str	r0, [fp, #-208]	; 0xffffff30
   176a4:	umull	r0, r1, r0, r3
   176a8:	adds	r2, r1, #0
   176ac:	movne	r2, #1
   176b0:	cmp	r0, #0
   176b4:	blt	17a9c <__assert_fail@plt+0x60fc>
   176b8:	cmp	r2, #0
   176bc:	bne	17a9c <__assert_fail@plt+0x60fc>
   176c0:	ldr	r2, [fp, #-208]	; 0xffffff30
   176c4:	mul	r0, r3, r2
   176c8:	cmp	r0, #4016	; 0xfb0
   176cc:	bhi	17abc <__assert_fail@plt+0x611c>
   176d0:	add	r3, r0, #22
   176d4:	bic	r3, r3, #7
   176d8:	sub	sp, sp, r3
   176dc:	add	r3, sp, #15
   176e0:	bic	sl, r3, #15
   176e4:	cmp	sl, #0
   176e8:	beq	17a9c <__assert_fail@plt+0x60fc>
   176ec:	ldr	r3, [fp, #-208]	; 0xffffff30
   176f0:	mov	r1, #0
   176f4:	mov	r2, #0
   176f8:	movw	r8, #58952	; 0xe648
   176fc:	movt	r8, #2
   17700:	mov	r6, r1
   17704:	add	r5, sl, #16
   17708:	strb	r1, [fp, #-204]	; 0xffffff34
   1770c:	strb	r1, [fp, #-192]	; 0xffffff40
   17710:	str	r4, [fp, #-188]	; 0xffffff44
   17714:	add	r9, r3, r3, lsl #2
   17718:	mov	r3, #0
   1771c:	add	r9, sl, r9, lsl #3
   17720:	str	r9, [fp, #-216]	; 0xffffff28
   17724:	strd	r2, [fp, #-200]	; 0xffffff38
   17728:	b	177ac <__assert_fail@plt+0x5e0c>
   1772c:	ldrb	r3, [r4]
   17730:	lsr	r2, r3, #5
   17734:	and	r3, r3, #31
   17738:	ldr	r2, [r8, r2, lsl #2]
   1773c:	lsr	r3, r2, r3
   17740:	tst	r3, #1
   17744:	beq	17ac8 <__assert_fail@plt+0x6128>
   17748:	mov	r3, #1
   1774c:	str	r3, [fp, #-184]	; 0xffffff48
   17750:	ldrb	r2, [r4]
   17754:	strb	r3, [fp, #-192]	; 0xffffff40
   17758:	strb	r3, [fp, #-180]	; 0xffffff4c
   1775c:	mov	r4, r2
   17760:	str	r2, [fp, #-176]	; 0xffffff50
   17764:	cmp	r4, #0
   17768:	beq	17828 <__assert_fail@plt+0x5e88>
   1776c:	mov	r9, #1
   17770:	ldr	r4, [fp, #-188]	; 0xffffff44
   17774:	sub	r2, fp, #172	; 0xac
   17778:	ldr	r7, [fp, #-184]	; 0xffffff48
   1777c:	cmp	r4, r2
   17780:	strne	r4, [r5, #-16]
   17784:	beq	17ae8 <__assert_fail@plt+0x6148>
   17788:	cmp	r9, #0
   1778c:	add	r4, r4, r7
   17790:	str	r7, [r5, #-12]
   17794:	ldrne	r3, [fp, #-176]	; 0xffffff50
   17798:	add	r5, r5, #40	; 0x28
   1779c:	strb	r9, [r5, #-48]	; 0xffffffd0
   177a0:	strb	r6, [fp, #-192]	; 0xffffff40
   177a4:	str	r4, [fp, #-188]	; 0xffffff44
   177a8:	strne	r3, [r5, #-44]	; 0xffffffd4
   177ac:	ldrb	r3, [fp, #-204]	; 0xffffff34
   177b0:	ldr	r4, [fp, #-188]	; 0xffffff44
   177b4:	cmp	r3, #0
   177b8:	subne	r7, fp, #200	; 0xc8
   177bc:	beq	1772c <__assert_fail@plt+0x5d8c>
   177c0:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   177c4:	mov	r1, r0
   177c8:	mov	r0, r4
   177cc:	bl	1af28 <__assert_fail@plt+0x9588>
   177d0:	mov	r2, r0
   177d4:	mov	r3, r7
   177d8:	mov	r1, r4
   177dc:	sub	r0, fp, #176	; 0xb0
   177e0:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   177e4:	cmn	r0, #1
   177e8:	str	r0, [fp, #-184]	; 0xffffff48
   177ec:	beq	17b00 <__assert_fail@plt+0x6160>
   177f0:	cmn	r0, #2
   177f4:	beq	17b18 <__assert_fail@plt+0x6178>
   177f8:	cmp	r0, #0
   177fc:	beq	17b38 <__assert_fail@plt+0x6198>
   17800:	ldr	r4, [fp, #-176]	; 0xffffff50
   17804:	mov	r9, #1
   17808:	mov	r0, r7
   1780c:	strb	r9, [fp, #-180]	; 0xffffff4c
   17810:	bl	11604 <mbsinit@plt>
   17814:	cmp	r0, #0
   17818:	strb	r9, [fp, #-192]	; 0xffffff40
   1781c:	strbne	r6, [fp, #-204]	; 0xffffff34
   17820:	cmp	r4, #0
   17824:	bne	1776c <__assert_fail@plt+0x5dcc>
   17828:	ldr	r9, [fp, #-216]	; 0xffffff28
   1782c:	mov	r3, #1
   17830:	mov	r7, r4
   17834:	ldr	r2, [fp, #-208]	; 0xffffff30
   17838:	str	r3, [r9, #4]
   1783c:	cmp	r2, #2
   17840:	bls	178e0 <__assert_fail@plt+0x5f40>
   17844:	mov	r8, #2
   17848:	mov	r5, sl
   1784c:	str	r4, [fp, #-216]	; 0xffffff28
   17850:	mov	r7, r8
   17854:	ldr	r8, [fp, #-208]	; 0xffffff30
   17858:	ldrb	r6, [r5, #48]	; 0x30
   1785c:	b	1788c <__assert_fail@plt+0x5eec>
   17860:	ldrb	r2, [r3, #8]
   17864:	cmp	r2, #0
   17868:	beq	1789c <__assert_fail@plt+0x5efc>
   1786c:	ldr	r3, [r3, #12]
   17870:	ldr	r2, [r5, #52]	; 0x34
   17874:	cmp	r2, r3
   17878:	beq	178c0 <__assert_fail@plt+0x5f20>
   1787c:	cmp	r4, #0
   17880:	beq	17e30 <__assert_fail@plt+0x6490>
   17884:	ldr	r3, [r9, r4, lsl #2]
   17888:	sub	r4, r4, r3
   1788c:	add	r3, r4, r4, lsl #2
   17890:	cmp	r6, #0
   17894:	add	r3, sl, r3, lsl #3
   17898:	bne	17860 <__assert_fail@plt+0x5ec0>
   1789c:	ldr	r1, [r3, #4]
   178a0:	ldr	r2, [r5, #44]	; 0x2c
   178a4:	cmp	r2, r1
   178a8:	bne	1787c <__assert_fail@plt+0x5edc>
   178ac:	ldr	r1, [r3]
   178b0:	ldr	r0, [r5, #40]	; 0x28
   178b4:	bl	1161c <memcmp@plt>
   178b8:	cmp	r0, #0
   178bc:	bne	1787c <__assert_fail@plt+0x5edc>
   178c0:	add	r4, r4, #1
   178c4:	sub	r2, r7, r4
   178c8:	str	r2, [r9, r7, lsl #2]
   178cc:	add	r7, r7, #1
   178d0:	add	r5, r5, #40	; 0x28
   178d4:	cmp	r8, r7
   178d8:	bne	17858 <__assert_fail@plt+0x5eb8>
   178dc:	ldr	r7, [fp, #-216]	; 0xffffff28
   178e0:	mov	r1, #0
   178e4:	mov	r0, #0
   178e8:	str	r9, [fp, #-216]	; 0xffffff28
   178ec:	ldr	r3, [fp, #-212]	; 0xffffff2c
   178f0:	mov	r2, #0
   178f4:	movw	ip, #58952	; 0xe648
   178f8:	movt	ip, #2
   178fc:	mov	r6, #1
   17900:	strd	r0, [fp, #-144]	; 0xffffff70
   17904:	mov	r9, ip
   17908:	strd	r0, [fp, #-88]	; 0xffffffa8
   1790c:	ldr	r1, [fp, #-220]	; 0xffffff24
   17910:	strb	r2, [fp, #-148]	; 0xffffff6c
   17914:	str	r3, [fp, #-132]	; 0xffffff7c
   17918:	str	r3, [fp, #-76]	; 0xffffffb4
   1791c:	mov	r3, r2
   17920:	strb	r2, [fp, #-136]	; 0xffffff78
   17924:	strb	r2, [fp, #-92]	; 0xffffffa4
   17928:	strb	r2, [fp, #-80]	; 0xffffffb0
   1792c:	str	r2, [r1]
   17930:	cmp	r3, #0
   17934:	ldreq	r5, [fp, #-76]	; 0xffffffb4
   17938:	beq	179ec <__assert_fail@plt+0x604c>
   1793c:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   17940:	cmp	r3, #0
   17944:	bne	17e8c <__assert_fail@plt+0x64ec>
   17948:	add	r3, r7, r7, lsl #2
   1794c:	add	r3, sl, r3, lsl #3
   17950:	ldr	r4, [fp, #-72]	; 0xffffffb8
   17954:	ldr	r2, [r3, #4]
   17958:	cmp	r2, r4
   1795c:	beq	17bdc <__assert_fail@plt+0x623c>
   17960:	cmp	r7, #0
   17964:	bne	17c00 <__assert_fail@plt+0x6260>
   17968:	ldrb	r3, [fp, #-136]	; 0xffffff78
   1796c:	cmp	r3, #0
   17970:	bne	17e78 <__assert_fail@plt+0x64d8>
   17974:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   17978:	ldr	r4, [fp, #-132]	; 0xffffff7c
   1797c:	cmp	r3, #0
   17980:	subne	r8, fp, #144	; 0x90
   17984:	bne	17dcc <__assert_fail@plt+0x642c>
   17988:	ldrb	r3, [r4]
   1798c:	lsr	r2, r3, #5
   17990:	and	r3, r3, #31
   17994:	ldr	r2, [r9, r2, lsl #2]
   17998:	lsr	r3, r2, r3
   1799c:	tst	r3, #1
   179a0:	beq	17db4 <__assert_fail@plt+0x6414>
   179a4:	str	r6, [fp, #-128]	; 0xffffff80
   179a8:	ldrb	r4, [r4]
   179ac:	strb	r6, [fp, #-136]	; 0xffffff78
   179b0:	strb	r6, [fp, #-124]	; 0xffffff84
   179b4:	str	r4, [fp, #-120]	; 0xffffff88
   179b8:	cmp	r4, #0
   179bc:	beq	17c9c <__assert_fail@plt+0x62fc>
   179c0:	ldr	r4, [fp, #-132]	; 0xffffff7c
   179c4:	mov	r3, #0
   179c8:	ldr	r2, [fp, #-128]	; 0xffffff80
   179cc:	strb	r3, [fp, #-136]	; 0xffffff78
   179d0:	strb	r3, [fp, #-80]	; 0xffffffb0
   179d4:	ldr	r5, [fp, #-76]	; 0xffffffb4
   179d8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   179dc:	add	r4, r4, r2
   179e0:	str	r4, [fp, #-132]	; 0xffffff7c
   179e4:	add	r5, r5, r3
   179e8:	str	r5, [fp, #-76]	; 0xffffffb4
   179ec:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   179f0:	cmp	r3, #0
   179f4:	subne	r4, fp, #88	; 0x58
   179f8:	bne	17b78 <__assert_fail@plt+0x61d8>
   179fc:	ldrb	r3, [r5]
   17a00:	lsr	r2, r3, #5
   17a04:	and	r3, r3, #31
   17a08:	ldr	r2, [r9, r2, lsl #2]
   17a0c:	lsr	r3, r2, r3
   17a10:	tst	r3, #1
   17a14:	beq	17b60 <__assert_fail@plt+0x61c0>
   17a18:	str	r6, [fp, #-72]	; 0xffffffb8
   17a1c:	ldrb	r3, [r5]
   17a20:	strb	r6, [fp, #-80]	; 0xffffffb0
   17a24:	strb	r6, [fp, #-68]	; 0xffffffbc
   17a28:	mov	r5, r3
   17a2c:	str	r3, [fp, #-64]	; 0xffffffc0
   17a30:	cmp	r5, #0
   17a34:	beq	17a8c <__assert_fail@plt+0x60ec>
   17a38:	add	r3, r7, r7, lsl #2
   17a3c:	add	r3, sl, r3, lsl #3
   17a40:	ldrb	r2, [r3, #8]
   17a44:	cmp	r2, #0
   17a48:	beq	17950 <__assert_fail@plt+0x5fb0>
   17a4c:	ldr	r3, [r3, #12]
   17a50:	cmp	r3, r5
   17a54:	bne	17960 <__assert_fail@plt+0x5fc0>
   17a58:	ldr	r5, [fp, #-76]	; 0xffffffb4
   17a5c:	ldr	r4, [fp, #-72]	; 0xffffffb8
   17a60:	add	r7, r7, #1
   17a64:	add	r5, r5, r4
   17a68:	ldr	r2, [fp, #-208]	; 0xffffff30
   17a6c:	mov	r3, #0
   17a70:	strb	r3, [fp, #-80]	; 0xffffffb0
   17a74:	str	r5, [fp, #-76]	; 0xffffffb4
   17a78:	cmp	r2, r7
   17a7c:	bne	179ec <__assert_fail@plt+0x604c>
   17a80:	ldr	r2, [fp, #-220]	; 0xffffff24
   17a84:	ldr	r3, [fp, #-132]	; 0xffffff7c
   17a88:	str	r3, [r2]
   17a8c:	mov	r0, sl
   17a90:	bl	2c4a4 <__assert_fail@plt+0x1ab04>
   17a94:	mov	r0, #1
   17a98:	b	17aa0 <__assert_fail@plt+0x6100>
   17a9c:	mov	r0, #0
   17aa0:	sub	sp, fp, #32
   17aa4:	ldrd	r4, [sp]
   17aa8:	ldrd	r6, [sp, #8]
   17aac:	ldrd	r8, [sp, #16]
   17ab0:	ldrd	sl, [sp, #24]
   17ab4:	add	sp, sp, #32
   17ab8:	pop	{pc}		; (ldr pc, [sp], #4)
   17abc:	bl	2c44c <__assert_fail@plt+0x1aaac>
   17ac0:	mov	sl, r0
   17ac4:	b	176e4 <__assert_fail@plt+0x5d44>
   17ac8:	sub	r7, fp, #200	; 0xc8
   17acc:	mov	r0, r7
   17ad0:	bl	11604 <mbsinit@plt>
   17ad4:	cmp	r0, #0
   17ad8:	beq	17ef0 <__assert_fail@plt+0x6550>
   17adc:	mov	r3, #1
   17ae0:	strb	r3, [fp, #-204]	; 0xffffff34
   17ae4:	b	177c0 <__assert_fail@plt+0x5e20>
   17ae8:	mov	r2, r7
   17aec:	mov	r1, r4
   17af0:	mov	r0, r5
   17af4:	bl	115d4 <memcpy@plt>
   17af8:	str	r5, [r5, #-16]
   17afc:	b	17788 <__assert_fail@plt+0x5de8>
   17b00:	mov	r2, #1
   17b04:	mov	r9, #0
   17b08:	strb	r2, [fp, #-192]	; 0xffffff40
   17b0c:	str	r2, [fp, #-184]	; 0xffffff48
   17b10:	strb	r6, [fp, #-180]	; 0xffffff4c
   17b14:	b	17770 <__assert_fail@plt+0x5dd0>
   17b18:	ldr	r0, [fp, #-188]	; 0xffffff44
   17b1c:	mov	r9, #0
   17b20:	bl	117a8 <strlen@plt>
   17b24:	mov	r2, #1
   17b28:	strb	r2, [fp, #-192]	; 0xffffff40
   17b2c:	str	r0, [fp, #-184]	; 0xffffff48
   17b30:	strb	r6, [fp, #-180]	; 0xffffff4c
   17b34:	b	17770 <__assert_fail@plt+0x5dd0>
   17b38:	ldr	r3, [fp, #-188]	; 0xffffff44
   17b3c:	mov	r2, #1
   17b40:	str	r2, [fp, #-184]	; 0xffffff48
   17b44:	ldrb	r3, [r3]
   17b48:	cmp	r3, #0
   17b4c:	bne	17f10 <__assert_fail@plt+0x6570>
   17b50:	ldr	r4, [fp, #-176]	; 0xffffff50
   17b54:	cmp	r4, #0
   17b58:	beq	17804 <__assert_fail@plt+0x5e64>
   17b5c:	bl	17644 <__assert_fail@plt+0x5ca4>
   17b60:	sub	r4, fp, #88	; 0x58
   17b64:	mov	r0, r4
   17b68:	bl	11604 <mbsinit@plt>
   17b6c:	cmp	r0, #0
   17b70:	beq	17ef0 <__assert_fail@plt+0x6550>
   17b74:	strb	r6, [fp, #-92]	; 0xffffffa4
   17b78:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17b7c:	mov	r1, r0
   17b80:	mov	r0, r5
   17b84:	bl	1af28 <__assert_fail@plt+0x9588>
   17b88:	mov	r2, r0
   17b8c:	mov	r3, r4
   17b90:	mov	r1, r5
   17b94:	sub	r0, fp, #64	; 0x40
   17b98:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   17b9c:	cmn	r0, #1
   17ba0:	str	r0, [fp, #-72]	; 0xffffffb8
   17ba4:	beq	17da0 <__assert_fail@plt+0x6400>
   17ba8:	cmn	r0, #2
   17bac:	beq	17e38 <__assert_fail@plt+0x6498>
   17bb0:	cmp	r0, #0
   17bb4:	beq	17e54 <__assert_fail@plt+0x64b4>
   17bb8:	ldr	r5, [fp, #-64]	; 0xffffffc0
   17bbc:	mov	r0, r4
   17bc0:	strb	r6, [fp, #-68]	; 0xffffffbc
   17bc4:	bl	11604 <mbsinit@plt>
   17bc8:	cmp	r0, #0
   17bcc:	strb	r6, [fp, #-80]	; 0xffffffb0
   17bd0:	movne	r3, #0
   17bd4:	strbne	r3, [fp, #-92]	; 0xffffffa4
   17bd8:	b	17a30 <__assert_fail@plt+0x6090>
   17bdc:	ldr	r5, [fp, #-76]	; 0xffffffb4
   17be0:	mov	r2, r4
   17be4:	ldr	r0, [r3]
   17be8:	mov	r1, r5
   17bec:	bl	1161c <memcmp@plt>
   17bf0:	cmp	r0, #0
   17bf4:	beq	17a60 <__assert_fail@plt+0x60c0>
   17bf8:	cmp	r7, #0
   17bfc:	beq	17968 <__assert_fail@plt+0x5fc8>
   17c00:	ldr	r3, [fp, #-216]	; 0xffffff28
   17c04:	ldr	r5, [r3, r7, lsl #2]
   17c08:	sub	r3, r7, r5
   17c0c:	cmp	r5, #0
   17c10:	str	r3, [fp, #-212]	; 0xffffff2c
   17c14:	beq	17d98 <__assert_fail@plt+0x63f8>
   17c18:	ldrb	r3, [fp, #-136]	; 0xffffff78
   17c1c:	cmp	r3, #0
   17c20:	beq	17e94 <__assert_fail@plt+0x64f4>
   17c24:	ldrb	r3, [fp, #-124]	; 0xffffff84
   17c28:	cmp	r3, #0
   17c2c:	bne	17d8c <__assert_fail@plt+0x63ec>
   17c30:	ldr	r4, [fp, #-132]	; 0xffffff7c
   17c34:	mov	r2, #0
   17c38:	subs	r5, r5, #1
   17c3c:	ldr	r3, [fp, #-128]	; 0xffffff80
   17c40:	strb	r2, [fp, #-136]	; 0xffffff78
   17c44:	add	r4, r4, r3
   17c48:	str	r4, [fp, #-132]	; 0xffffff7c
   17c4c:	beq	17d94 <__assert_fail@plt+0x63f4>
   17c50:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   17c54:	cmp	r3, #0
   17c58:	subne	r8, fp, #144	; 0x90
   17c5c:	bne	17cb8 <__assert_fail@plt+0x6318>
   17c60:	ldrb	r3, [r4]
   17c64:	lsr	r2, r3, #5
   17c68:	and	r3, r3, #31
   17c6c:	ldr	r2, [r9, r2, lsl #2]
   17c70:	lsr	r3, r2, r3
   17c74:	tst	r3, #1
   17c78:	beq	17ca0 <__assert_fail@plt+0x6300>
   17c7c:	str	r6, [fp, #-128]	; 0xffffff80
   17c80:	ldrb	r3, [r4]
   17c84:	strb	r6, [fp, #-136]	; 0xffffff78
   17c88:	strb	r6, [fp, #-124]	; 0xffffff84
   17c8c:	mov	r4, r3
   17c90:	str	r3, [fp, #-120]	; 0xffffff88
   17c94:	cmp	r4, #0
   17c98:	bne	17c30 <__assert_fail@plt+0x6290>
   17c9c:	bl	11964 <abort@plt>
   17ca0:	sub	r8, fp, #144	; 0x90
   17ca4:	mov	r0, r8
   17ca8:	bl	11604 <mbsinit@plt>
   17cac:	cmp	r0, #0
   17cb0:	beq	17ef0 <__assert_fail@plt+0x6550>
   17cb4:	strb	r6, [fp, #-148]	; 0xffffff6c
   17cb8:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17cbc:	mov	r1, r0
   17cc0:	mov	r0, r4
   17cc4:	bl	1af28 <__assert_fail@plt+0x9588>
   17cc8:	mov	r2, r0
   17ccc:	mov	r3, r8
   17cd0:	mov	r1, r4
   17cd4:	sub	r0, fp, #120	; 0x78
   17cd8:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   17cdc:	cmn	r0, #1
   17ce0:	str	r0, [fp, #-128]	; 0xffffff80
   17ce4:	beq	17d1c <__assert_fail@plt+0x637c>
   17ce8:	cmn	r0, #2
   17cec:	beq	17d30 <__assert_fail@plt+0x6390>
   17cf0:	cmp	r0, #0
   17cf4:	beq	17d4c <__assert_fail@plt+0x63ac>
   17cf8:	ldr	r4, [fp, #-120]	; 0xffffff88
   17cfc:	mov	r0, r8
   17d00:	strb	r6, [fp, #-124]	; 0xffffff84
   17d04:	bl	11604 <mbsinit@plt>
   17d08:	cmp	r0, #0
   17d0c:	strb	r6, [fp, #-136]	; 0xffffff78
   17d10:	movne	r3, #0
   17d14:	strbne	r3, [fp, #-148]	; 0xffffff6c
   17d18:	b	17c94 <__assert_fail@plt+0x62f4>
   17d1c:	mov	r3, #0
   17d20:	str	r6, [fp, #-128]	; 0xffffff80
   17d24:	ldr	r4, [fp, #-132]	; 0xffffff7c
   17d28:	strb	r3, [fp, #-124]	; 0xffffff84
   17d2c:	b	17c34 <__assert_fail@plt+0x6294>
   17d30:	ldr	r4, [fp, #-132]	; 0xffffff7c
   17d34:	mov	r0, r4
   17d38:	bl	117a8 <strlen@plt>
   17d3c:	mov	r3, #0
   17d40:	str	r0, [fp, #-128]	; 0xffffff80
   17d44:	strb	r3, [fp, #-124]	; 0xffffff84
   17d48:	b	17c34 <__assert_fail@plt+0x6294>
   17d4c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   17d50:	str	r6, [fp, #-128]	; 0xffffff80
   17d54:	ldrb	r3, [r4]
   17d58:	cmp	r3, #0
   17d5c:	bne	17f10 <__assert_fail@plt+0x6570>
   17d60:	ldr	r4, [fp, #-120]	; 0xffffff88
   17d64:	cmp	r4, #0
   17d68:	beq	17cfc <__assert_fail@plt+0x635c>
   17d6c:	movw	r3, #56976	; 0xde90
   17d70:	movt	r3, #2
   17d74:	movw	r1, #56876	; 0xde2c
   17d78:	movt	r1, #2
   17d7c:	movw	r0, #56888	; 0xde38
   17d80:	movt	r0, #2
   17d84:	mov	r2, #172	; 0xac
   17d88:	bl	119a0 <__assert_fail@plt>
   17d8c:	ldr	r4, [fp, #-120]	; 0xffffff88
   17d90:	b	17c94 <__assert_fail@plt+0x62f4>
   17d94:	ldr	r7, [fp, #-212]	; 0xffffff2c
   17d98:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   17d9c:	b	17930 <__assert_fail@plt+0x5f90>
   17da0:	mov	r3, #0
   17da4:	strb	r6, [fp, #-80]	; 0xffffffb0
   17da8:	str	r6, [fp, #-72]	; 0xffffffb8
   17dac:	strb	r3, [fp, #-68]	; 0xffffffbc
   17db0:	b	17948 <__assert_fail@plt+0x5fa8>
   17db4:	sub	r8, fp, #144	; 0x90
   17db8:	mov	r0, r8
   17dbc:	bl	11604 <mbsinit@plt>
   17dc0:	cmp	r0, #0
   17dc4:	beq	17ef0 <__assert_fail@plt+0x6550>
   17dc8:	strb	r6, [fp, #-148]	; 0xffffff6c
   17dcc:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17dd0:	mov	r1, r0
   17dd4:	mov	r0, r4
   17dd8:	bl	1af28 <__assert_fail@plt+0x9588>
   17ddc:	mov	r2, r0
   17de0:	mov	r3, r8
   17de4:	mov	r1, r4
   17de8:	sub	r0, fp, #120	; 0x78
   17dec:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   17df0:	cmn	r0, #1
   17df4:	str	r0, [fp, #-128]	; 0xffffff80
   17df8:	beq	17e9c <__assert_fail@plt+0x64fc>
   17dfc:	cmn	r0, #2
   17e00:	beq	17eb0 <__assert_fail@plt+0x6510>
   17e04:	cmp	r0, #0
   17e08:	beq	17ecc <__assert_fail@plt+0x652c>
   17e0c:	ldr	r4, [fp, #-120]	; 0xffffff88
   17e10:	mov	r0, r8
   17e14:	strb	r6, [fp, #-124]	; 0xffffff84
   17e18:	bl	11604 <mbsinit@plt>
   17e1c:	cmp	r0, #0
   17e20:	strb	r6, [fp, #-136]	; 0xffffff78
   17e24:	movne	r3, #0
   17e28:	strbne	r3, [fp, #-148]	; 0xffffff6c
   17e2c:	b	179b8 <__assert_fail@plt+0x6018>
   17e30:	str	r7, [r9, r7, lsl #2]
   17e34:	b	178cc <__assert_fail@plt+0x5f2c>
   17e38:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17e3c:	bl	117a8 <strlen@plt>
   17e40:	mov	r3, #0
   17e44:	strb	r6, [fp, #-80]	; 0xffffffb0
   17e48:	str	r0, [fp, #-72]	; 0xffffffb8
   17e4c:	strb	r3, [fp, #-68]	; 0xffffffbc
   17e50:	b	17948 <__assert_fail@plt+0x5fa8>
   17e54:	ldr	r5, [fp, #-76]	; 0xffffffb4
   17e58:	str	r6, [fp, #-72]	; 0xffffffb8
   17e5c:	ldrb	r3, [r5]
   17e60:	cmp	r3, #0
   17e64:	bne	17f10 <__assert_fail@plt+0x6570>
   17e68:	ldr	r5, [fp, #-64]	; 0xffffffc0
   17e6c:	cmp	r5, #0
   17e70:	beq	17bbc <__assert_fail@plt+0x621c>
   17e74:	b	17b5c <__assert_fail@plt+0x61bc>
   17e78:	ldrb	r3, [fp, #-124]	; 0xffffff84
   17e7c:	cmp	r3, #0
   17e80:	beq	179c0 <__assert_fail@plt+0x6020>
   17e84:	ldr	r4, [fp, #-120]	; 0xffffff88
   17e88:	b	179b8 <__assert_fail@plt+0x6018>
   17e8c:	ldr	r5, [fp, #-64]	; 0xffffffc0
   17e90:	b	17a30 <__assert_fail@plt+0x6090>
   17e94:	ldr	r4, [fp, #-132]	; 0xffffff7c
   17e98:	b	17c50 <__assert_fail@plt+0x62b0>
   17e9c:	mov	r3, #0
   17ea0:	str	r6, [fp, #-128]	; 0xffffff80
   17ea4:	ldr	r4, [fp, #-132]	; 0xffffff7c
   17ea8:	strb	r3, [fp, #-124]	; 0xffffff84
   17eac:	b	179c4 <__assert_fail@plt+0x6024>
   17eb0:	ldr	r4, [fp, #-132]	; 0xffffff7c
   17eb4:	mov	r0, r4
   17eb8:	bl	117a8 <strlen@plt>
   17ebc:	mov	r3, #0
   17ec0:	str	r0, [fp, #-128]	; 0xffffff80
   17ec4:	strb	r3, [fp, #-124]	; 0xffffff84
   17ec8:	b	179c4 <__assert_fail@plt+0x6024>
   17ecc:	ldr	r4, [fp, #-132]	; 0xffffff7c
   17ed0:	str	r6, [fp, #-128]	; 0xffffff80
   17ed4:	ldrb	r3, [r4]
   17ed8:	cmp	r3, #0
   17edc:	bne	17f10 <__assert_fail@plt+0x6570>
   17ee0:	ldr	r4, [fp, #-120]	; 0xffffff88
   17ee4:	cmp	r4, #0
   17ee8:	beq	17e10 <__assert_fail@plt+0x6470>
   17eec:	b	17b5c <__assert_fail@plt+0x61bc>
   17ef0:	movw	r3, #56976	; 0xde90
   17ef4:	movt	r3, #2
   17ef8:	movw	r1, #56876	; 0xde2c
   17efc:	movt	r1, #2
   17f00:	movw	r0, #56908	; 0xde4c
   17f04:	movt	r0, #2
   17f08:	mov	r2, #143	; 0x8f
   17f0c:	bl	119a0 <__assert_fail@plt>
   17f10:	movw	r3, #56976	; 0xde90
   17f14:	movt	r3, #2
   17f18:	movw	r1, #56876	; 0xde2c
   17f1c:	movt	r1, #2
   17f20:	movw	r0, #56932	; 0xde64
   17f24:	movt	r0, #2
   17f28:	mov	r2, #171	; 0xab
   17f2c:	bl	119a0 <__assert_fail@plt>
   17f30:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17f34:	strd	r6, [sp, #8]
   17f38:	strd	r8, [sp, #16]
   17f3c:	mov	r8, r1
   17f40:	strd	sl, [sp, #24]
   17f44:	str	lr, [sp, #32]
   17f48:	sub	sp, sp, #332	; 0x14c
   17f4c:	str	r0, [sp, #8]
   17f50:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17f54:	cmp	r0, #1
   17f58:	bhi	18168 <__assert_fail@plt+0x67c8>
   17f5c:	ldrb	r7, [r8]
   17f60:	cmp	r7, #0
   17f64:	beq	180e4 <__assert_fail@plt+0x6744>
   17f68:	ldr	r3, [sp, #8]
   17f6c:	ldrb	sl, [r3]
   17f70:	add	r3, r8, #1
   17f74:	str	r3, [sp, #12]
   17f78:	cmp	sl, #0
   17f7c:	beq	18160 <__assert_fail@plt+0x67c0>
   17f80:	ldr	r3, [sp, #8]
   17f84:	mov	r5, #0
   17f88:	mov	fp, r8
   17f8c:	mov	ip, r5
   17f90:	mov	lr, #1
   17f94:	str	r5, [sp, #4]
   17f98:	mov	r6, r3
   17f9c:	mov	r9, r3
   17fa0:	b	18004 <__assert_fail@plt+0x6664>
   17fa4:	cmp	fp, #0
   17fa8:	str	r3, [sp, #8]
   17fac:	beq	17fd4 <__assert_fail@plt+0x6634>
   17fb0:	ldr	r3, [sp, #4]
   17fb4:	mov	r0, fp
   17fb8:	sub	r1, r4, r3
   17fbc:	bl	11874 <strnlen@plt>
   17fc0:	ldrb	r2, [fp, r0]!
   17fc4:	ldr	r3, [sp, #8]
   17fc8:	cmp	r2, #0
   17fcc:	bne	18918 <__assert_fail@plt+0x6f78>
   17fd0:	str	r4, [sp, #4]
   17fd4:	mov	r0, r8
   17fd8:	bl	117a8 <strlen@plt>
   17fdc:	mov	r2, r0
   17fe0:	add	r3, sp, #272	; 0x110
   17fe4:	mov	r1, r8
   17fe8:	mov	r0, r6
   17fec:	bl	174c4 <__assert_fail@plt+0x5b24>
   17ff0:	subs	lr, r0, #0
   17ff4:	bne	18b84 <__assert_fail@plt+0x71e4>
   17ff8:	ldrb	sl, [r9, r5]
   17ffc:	mov	fp, lr
   18000:	mov	ip, r4
   18004:	add	r5, r5, #1
   18008:	mov	r0, r6
   1800c:	cmp	r7, sl
   18010:	add	r6, r5, r9
   18014:	mov	r1, r6
   18018:	add	r4, ip, #1
   1801c:	beq	18104 <__assert_fail@plt+0x6764>
   18020:	ldrb	sl, [r9, r5]
   18024:	cmp	sl, #0
   18028:	beq	18160 <__assert_fail@plt+0x67c0>
   1802c:	cmp	r5, #9
   18030:	movls	r3, #0
   18034:	andhi	r3, lr, #1
   18038:	cmp	r3, #0
   1803c:	beq	18000 <__assert_fail@plt+0x6660>
   18040:	add	r2, r5, r5, lsl #2
   18044:	cmp	r4, r2
   18048:	bcs	17fa4 <__assert_fail@plt+0x6604>
   1804c:	mov	lr, r3
   18050:	b	18000 <__assert_fail@plt+0x6660>
   18054:	add	r0, sp, #52	; 0x34
   18058:	bl	11604 <mbsinit@plt>
   1805c:	cmp	r0, #0
   18060:	beq	18be0 <__assert_fail@plt+0x7240>
   18064:	mov	r5, #1
   18068:	strb	r5, [sp, #48]	; 0x30
   1806c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18070:	mov	r1, r0
   18074:	mov	r0, r8
   18078:	bl	1af28 <__assert_fail@plt+0x9588>
   1807c:	mov	r2, r0
   18080:	add	r3, sp, #52	; 0x34
   18084:	mov	r1, r8
   18088:	add	r0, sp, #76	; 0x4c
   1808c:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   18090:	cmn	r0, #1
   18094:	str	r0, [sp, #68]	; 0x44
   18098:	strbeq	r5, [sp, #60]	; 0x3c
   1809c:	streq	r5, [sp, #68]	; 0x44
   180a0:	strbeq	r4, [sp, #72]	; 0x48
   180a4:	beq	181d8 <__assert_fail@plt+0x6838>
   180a8:	cmn	r0, #2
   180ac:	beq	181c4 <__assert_fail@plt+0x6824>
   180b0:	cmp	r0, #0
   180b4:	beq	18b44 <__assert_fail@plt+0x71a4>
   180b8:	ldr	r4, [sp, #76]	; 0x4c
   180bc:	mov	r5, #1
   180c0:	add	r0, sp, #52	; 0x34
   180c4:	strb	r5, [sp, #72]	; 0x48
   180c8:	bl	11604 <mbsinit@plt>
   180cc:	cmp	r0, #0
   180d0:	strb	r5, [sp, #60]	; 0x3c
   180d4:	movne	r3, #0
   180d8:	strbne	r3, [sp, #48]	; 0x30
   180dc:	cmp	r4, #0
   180e0:	bne	181d8 <__assert_fail@plt+0x6838>
   180e4:	ldr	r0, [sp, #8]
   180e8:	add	sp, sp, #332	; 0x14c
   180ec:	ldrd	r4, [sp]
   180f0:	ldrd	r6, [sp, #8]
   180f4:	ldrd	r8, [sp, #16]
   180f8:	ldrd	sl, [sp, #24]
   180fc:	add	sp, sp, #32
   18100:	pop	{pc}		; (ldr pc, [sp], #4)
   18104:	ldrb	r3, [r8, #1]
   18108:	cmp	r3, #0
   1810c:	beq	180e8 <__assert_fail@plt+0x6748>
   18110:	ldrb	sl, [r9, r5]
   18114:	cmp	sl, #0
   18118:	beq	18160 <__assert_fail@plt+0x67c0>
   1811c:	cmp	r3, sl
   18120:	add	r4, ip, #2
   18124:	bne	1802c <__assert_fail@plt+0x668c>
   18128:	ldr	r3, [sp, #12]
   1812c:	add	r3, r3, #1
   18130:	b	18148 <__assert_fail@plt+0x67a8>
   18134:	add	r3, r3, #1
   18138:	cmp	r2, r4
   1813c:	sub	r4, r3, r8
   18140:	add	r4, r4, ip
   18144:	bne	1802c <__assert_fail@plt+0x668c>
   18148:	ldrb	r2, [r3]
   1814c:	cmp	r2, #0
   18150:	beq	180e8 <__assert_fail@plt+0x6748>
   18154:	ldrb	r4, [r1, #1]!
   18158:	cmp	r4, #0
   1815c:	bne	18134 <__assert_fail@plt+0x6794>
   18160:	mov	r0, #0
   18164:	b	180e8 <__assert_fail@plt+0x6748>
   18168:	ldrb	r2, [r8]
   1816c:	mov	r3, #0
   18170:	movw	r7, #58952	; 0xe648
   18174:	movt	r7, #2
   18178:	mov	r4, #0
   1817c:	strb	r3, [sp, #48]	; 0x30
   18180:	mov	r5, #0
   18184:	strb	r3, [sp, #60]	; 0x3c
   18188:	lsr	r3, r2, #5
   1818c:	and	r1, r2, #31
   18190:	strd	r4, [sp, #52]	; 0x34
   18194:	str	r8, [sp, #64]	; 0x40
   18198:	ldr	r3, [r7, r3, lsl #2]
   1819c:	lsr	r3, r3, r1
   181a0:	ands	r4, r3, #1
   181a4:	beq	18054 <__assert_fail@plt+0x66b4>
   181a8:	mov	r3, #1
   181ac:	mov	r4, r2
   181b0:	strb	r3, [sp, #60]	; 0x3c
   181b4:	str	r3, [sp, #68]	; 0x44
   181b8:	strb	r3, [sp, #72]	; 0x48
   181bc:	str	r2, [sp, #76]	; 0x4c
   181c0:	b	180dc <__assert_fail@plt+0x673c>
   181c4:	ldr	r0, [sp, #64]	; 0x40
   181c8:	bl	117a8 <strlen@plt>
   181cc:	strb	r5, [sp, #60]	; 0x3c
   181d0:	str	r0, [sp, #68]	; 0x44
   181d4:	strb	r4, [sp, #72]	; 0x48
   181d8:	mov	r3, #0
   181dc:	ldr	r5, [sp, #8]
   181e0:	mov	r0, #1
   181e4:	mov	sl, r3
   181e8:	mov	r6, r3
   181ec:	mov	r4, r0
   181f0:	mov	fp, r0
   181f4:	str	r0, [sp, #4]
   181f8:	str	r3, [sp, #32]
   181fc:	str	r3, [sp, #36]	; 0x24
   18200:	str	r3, [sp, #40]	; 0x28
   18204:	strb	r3, [sp, #104]	; 0x68
   18208:	str	r3, [sp, #108]	; 0x6c
   1820c:	str	r3, [sp, #112]	; 0x70
   18210:	strb	r3, [sp, #116]	; 0x74
   18214:	strb	r3, [sp, #160]	; 0xa0
   18218:	str	r3, [sp, #164]	; 0xa4
   1821c:	str	r3, [sp, #168]	; 0xa8
   18220:	strb	r3, [sp, #172]	; 0xac
   18224:	ldrb	r3, [sp, #160]	; 0xa0
   18228:	str	r8, [sp, #12]
   1822c:	str	r8, [sp, #120]	; 0x78
   18230:	str	r5, [sp, #176]	; 0xb0
   18234:	cmp	r3, #0
   18238:	addne	r8, sp, #164	; 0xa4
   1823c:	bne	18574 <__assert_fail@plt+0x6bd4>
   18240:	ldrb	r3, [r5]
   18244:	lsr	r2, r3, #5
   18248:	and	r3, r3, #31
   1824c:	ldr	r2, [r7, r2, lsl #2]
   18250:	lsr	r3, r2, r3
   18254:	tst	r3, #1
   18258:	beq	18734 <__assert_fail@plt+0x6d94>
   1825c:	str	fp, [sp, #180]	; 0xb4
   18260:	ldrb	r5, [r5]
   18264:	strb	r4, [sp, #172]	; 0xac
   18268:	strb	r4, [sp, #184]	; 0xb8
   1826c:	str	r5, [sp, #188]	; 0xbc
   18270:	cmp	r5, #0
   18274:	beq	18160 <__assert_fail@plt+0x67c0>
   18278:	ldr	r3, [sp, #4]
   1827c:	cmp	sl, #9
   18280:	movls	r3, #0
   18284:	andhi	r3, r3, #1
   18288:	cmp	r3, #0
   1828c:	addeq	r6, r6, #1
   18290:	beq	182a8 <__assert_fail@plt+0x6908>
   18294:	add	r2, sl, sl, lsl #2
   18298:	cmp	r6, r2
   1829c:	addcc	r6, r6, #1
   182a0:	strcc	r3, [sp, #4]
   182a4:	bcs	1878c <__assert_fail@plt+0x6dec>
   182a8:	ldrb	r3, [sp, #72]	; 0x48
   182ac:	cmp	r3, #0
   182b0:	beq	186a4 <__assert_fail@plt+0x6d04>
   182b4:	ldr	r3, [sp, #76]	; 0x4c
   182b8:	ldr	r2, [sp, #188]	; 0xbc
   182bc:	cmp	r2, r3
   182c0:	bne	18548 <__assert_fail@plt+0x6ba8>
   182c4:	ldr	ip, [sp, #12]
   182c8:	ldr	r3, [sp, #32]
   182cc:	ldr	r1, [sp, #176]	; 0xb0
   182d0:	ldrb	r0, [ip]
   182d4:	str	r3, [sp, #276]	; 0x114
   182d8:	ldr	r3, [sp, #36]	; 0x24
   182dc:	str	ip, [sp, #288]	; 0x120
   182e0:	ldr	r2, [sp, #180]	; 0xb4
   182e4:	and	lr, r0, #31
   182e8:	str	r3, [sp, #280]	; 0x118
   182ec:	lsr	r3, r0, #5
   182f0:	str	r2, [sp, #236]	; 0xec
   182f4:	ldr	r8, [r7, r3, lsl #2]
   182f8:	ldrd	r2, [sp, #168]	; 0xa8
   182fc:	ldr	ip, [sp, #236]	; 0xec
   18300:	lsr	r8, r8, lr
   18304:	strd	r2, [sp, #224]	; 0xe0
   18308:	ands	lr, r8, #1
   1830c:	ldrd	r2, [sp, #184]	; 0xb8
   18310:	add	ip, ip, r1
   18314:	mov	r1, #0
   18318:	str	lr, [sp, #44]	; 0x2c
   1831c:	strb	r1, [sp, #228]	; 0xe4
   18320:	str	ip, [sp, #232]	; 0xe8
   18324:	mov	r8, r2
   18328:	mov	r9, r3
   1832c:	ldrd	r2, [sp, #160]	; 0xa0
   18330:	strd	r2, [sp, #216]	; 0xd8
   18334:	mov	r2, r8
   18338:	mov	r3, r9
   1833c:	ldrd	r8, [sp, #200]	; 0xc8
   18340:	strb	r1, [sp, #272]	; 0x110
   18344:	strb	r1, [sp, #284]	; 0x11c
   18348:	strd	r8, [sp, #16]
   1834c:	ldrd	r8, [sp, #208]	; 0xd0
   18350:	strd	r2, [sp, #240]	; 0xf0
   18354:	ldrd	r2, [sp, #192]	; 0xc0
   18358:	strd	r8, [sp, #24]
   1835c:	ldrd	r8, [sp, #16]
   18360:	strd	r2, [sp, #248]	; 0xf8
   18364:	add	r3, sp, #256	; 0x100
   18368:	strd	r8, [r3]
   1836c:	add	r3, sp, #264	; 0x108
   18370:	ldrd	r8, [sp, #24]
   18374:	strd	r8, [r3]
   18378:	beq	189ec <__assert_fail@plt+0x704c>
   1837c:	mov	r5, r0
   18380:	strb	r4, [sp, #284]	; 0x11c
   18384:	cmp	r5, #0
   18388:	str	fp, [sp, #292]	; 0x124
   1838c:	strb	r4, [sp, #296]	; 0x128
   18390:	str	r0, [sp, #300]	; 0x12c
   18394:	beq	18a6c <__assert_fail@plt+0x70cc>
   18398:	ldr	r5, [sp, #288]	; 0x120
   1839c:	mov	r3, #0
   183a0:	add	r6, r6, #1
   183a4:	ldr	r2, [sp, #292]	; 0x124
   183a8:	mov	r9, r3
   183ac:	strb	r3, [sp, #284]	; 0x11c
   183b0:	add	r5, r5, r2
   183b4:	str	r5, [sp, #288]	; 0x120
   183b8:	b	184a0 <__assert_fail@plt+0x6b00>
   183bc:	ldrb	r3, [r5]
   183c0:	lsr	r2, r3, #5
   183c4:	and	r3, r3, #31
   183c8:	ldr	r2, [r7, r2, lsl #2]
   183cc:	lsr	r3, r2, r3
   183d0:	tst	r3, #1
   183d4:	beq	18688 <__assert_fail@plt+0x6ce8>
   183d8:	str	fp, [sp, #292]	; 0x124
   183dc:	ldrb	r5, [r5]
   183e0:	strb	r4, [sp, #284]	; 0x11c
   183e4:	strb	r4, [sp, #296]	; 0x128
   183e8:	cmp	r5, #0
   183ec:	str	r5, [sp, #300]	; 0x12c
   183f0:	beq	1851c <__assert_fail@plt+0x6b7c>
   183f4:	ldrb	r3, [sp, #228]	; 0xe4
   183f8:	cmp	r3, #0
   183fc:	bne	1865c <__assert_fail@plt+0x6cbc>
   18400:	ldrb	r3, [sp, #216]	; 0xd8
   18404:	ldr	r5, [sp, #232]	; 0xe8
   18408:	cmp	r3, #0
   1840c:	addne	r8, sp, #220	; 0xdc
   18410:	bne	185f0 <__assert_fail@plt+0x6c50>
   18414:	ldrb	r3, [r5]
   18418:	lsr	r2, r3, #5
   1841c:	and	r3, r3, #31
   18420:	ldr	r2, [r7, r2, lsl #2]
   18424:	lsr	r3, r2, r3
   18428:	tst	r3, #1
   1842c:	beq	185d8 <__assert_fail@plt+0x6c38>
   18430:	str	fp, [sp, #236]	; 0xec
   18434:	ldrb	r0, [r5]
   18438:	strb	r4, [sp, #228]	; 0xe4
   1843c:	strb	r4, [sp, #240]	; 0xf0
   18440:	mov	r5, r0
   18444:	str	r0, [sp, #244]	; 0xf4
   18448:	cmp	r5, #0
   1844c:	beq	18160 <__assert_fail@plt+0x67c0>
   18450:	ldrb	r3, [sp, #296]	; 0x128
   18454:	cmp	r3, #0
   18458:	beq	18538 <__assert_fail@plt+0x6b98>
   1845c:	ldr	r0, [sp, #300]	; 0x12c
   18460:	subs	r0, r0, r5
   18464:	movne	r0, #1
   18468:	cmp	r0, #0
   1846c:	add	r2, r6, #1
   18470:	bne	18548 <__assert_fail@plt+0x6ba8>
   18474:	mov	r6, r2
   18478:	ldr	r3, [sp, #232]	; 0xe8
   1847c:	strb	r0, [sp, #228]	; 0xe4
   18480:	ldr	r1, [sp, #236]	; 0xec
   18484:	strb	r0, [sp, #284]	; 0x11c
   18488:	ldr	r5, [sp, #288]	; 0x120
   1848c:	ldr	r2, [sp, #292]	; 0x124
   18490:	add	r3, r3, r1
   18494:	str	r3, [sp, #232]	; 0xe8
   18498:	add	r5, r5, r2
   1849c:	str	r5, [sp, #288]	; 0x120
   184a0:	ldrb	r3, [sp, #272]	; 0x110
   184a4:	cmp	r3, #0
   184a8:	beq	183bc <__assert_fail@plt+0x6a1c>
   184ac:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   184b0:	mov	r1, r0
   184b4:	mov	r0, r5
   184b8:	bl	1af28 <__assert_fail@plt+0x9588>
   184bc:	mov	r2, r0
   184c0:	add	r3, sp, #276	; 0x114
   184c4:	mov	r1, r5
   184c8:	add	r0, sp, #300	; 0x12c
   184cc:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   184d0:	cmn	r0, #1
   184d4:	str	r0, [sp, #292]	; 0x124
   184d8:	strbeq	r4, [sp, #284]	; 0x11c
   184dc:	streq	fp, [sp, #292]	; 0x124
   184e0:	strbeq	r9, [sp, #296]	; 0x128
   184e4:	beq	183f4 <__assert_fail@plt+0x6a54>
   184e8:	cmn	r0, #2
   184ec:	beq	186d4 <__assert_fail@plt+0x6d34>
   184f0:	cmp	r0, #0
   184f4:	beq	186ec <__assert_fail@plt+0x6d4c>
   184f8:	ldr	r5, [sp, #300]	; 0x12c
   184fc:	add	r0, sp, #276	; 0x114
   18500:	strb	r4, [sp, #296]	; 0x128
   18504:	bl	11604 <mbsinit@plt>
   18508:	cmp	r0, #0
   1850c:	strb	r4, [sp, #284]	; 0x11c
   18510:	strbne	r9, [sp, #272]	; 0x110
   18514:	cmp	r5, #0
   18518:	bne	183f4 <__assert_fail@plt+0x6a54>
   1851c:	ldr	r0, [sp, #176]	; 0xb0
   18520:	b	180e8 <__assert_fail@plt+0x6748>
   18524:	ldr	r0, [sp, #232]	; 0xe8
   18528:	bl	117a8 <strlen@plt>
   1852c:	strb	r4, [sp, #228]	; 0xe4
   18530:	str	r0, [sp, #236]	; 0xec
   18534:	strb	r9, [sp, #240]	; 0xf0
   18538:	ldr	r2, [sp, #236]	; 0xec
   1853c:	ldr	r3, [sp, #292]	; 0x124
   18540:	cmp	r2, r3
   18544:	beq	18670 <__assert_fail@plt+0x6cd0>
   18548:	ldr	r5, [sp, #176]	; 0xb0
   1854c:	ldr	r8, [sp, #180]	; 0xb4
   18550:	mov	r3, #0
   18554:	add	r5, r5, r8
   18558:	add	sl, sl, #1
   1855c:	strb	r3, [sp, #172]	; 0xac
   18560:	ldrb	r3, [sp, #160]	; 0xa0
   18564:	str	r5, [sp, #176]	; 0xb0
   18568:	cmp	r3, #0
   1856c:	addne	r8, sp, #164	; 0xa4
   18570:	beq	18240 <__assert_fail@plt+0x68a0>
   18574:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18578:	mov	r1, r0
   1857c:	mov	r0, r5
   18580:	bl	1af28 <__assert_fail@plt+0x9588>
   18584:	mov	r2, r0
   18588:	mov	r3, r8
   1858c:	mov	r1, r5
   18590:	add	r0, sp, #188	; 0xbc
   18594:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   18598:	cmn	r0, #1
   1859c:	str	r0, [sp, #180]	; 0xb4
   185a0:	beq	18750 <__assert_fail@plt+0x6db0>
   185a4:	cmn	r0, #2
   185a8:	beq	18958 <__assert_fail@plt+0x6fb8>
   185ac:	cmp	r0, #0
   185b0:	bne	1892c <__assert_fail@plt+0x6f8c>
   185b4:	ldr	r5, [sp, #176]	; 0xb0
   185b8:	str	fp, [sp, #180]	; 0xb4
   185bc:	ldrb	r3, [r5]
   185c0:	cmp	r3, #0
   185c4:	bne	18c00 <__assert_fail@plt+0x7260>
   185c8:	ldr	r5, [sp, #188]	; 0xbc
   185cc:	cmp	r5, #0
   185d0:	beq	18930 <__assert_fail@plt+0x6f90>
   185d4:	b	18b64 <__assert_fail@plt+0x71c4>
   185d8:	add	r8, sp, #220	; 0xdc
   185dc:	mov	r0, r8
   185e0:	bl	11604 <mbsinit@plt>
   185e4:	cmp	r0, #0
   185e8:	beq	18be0 <__assert_fail@plt+0x7240>
   185ec:	strb	r4, [sp, #216]	; 0xd8
   185f0:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   185f4:	mov	r1, r0
   185f8:	mov	r0, r5
   185fc:	bl	1af28 <__assert_fail@plt+0x9588>
   18600:	mov	r2, r0
   18604:	mov	r3, r8
   18608:	mov	r1, r5
   1860c:	add	r0, sp, #244	; 0xf4
   18610:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   18614:	cmn	r0, #1
   18618:	str	r0, [sp, #236]	; 0xec
   1861c:	strbeq	r4, [sp, #228]	; 0xe4
   18620:	streq	fp, [sp, #236]	; 0xec
   18624:	strbeq	r9, [sp, #240]	; 0xf0
   18628:	beq	18538 <__assert_fail@plt+0x6b98>
   1862c:	cmn	r0, #2
   18630:	beq	18524 <__assert_fail@plt+0x6b84>
   18634:	cmp	r0, #0
   18638:	beq	18710 <__assert_fail@plt+0x6d70>
   1863c:	ldr	r5, [sp, #244]	; 0xf4
   18640:	mov	r0, r8
   18644:	strb	r4, [sp, #240]	; 0xf0
   18648:	bl	11604 <mbsinit@plt>
   1864c:	cmp	r0, #0
   18650:	strb	r4, [sp, #228]	; 0xe4
   18654:	strbne	r9, [sp, #216]	; 0xd8
   18658:	b	18448 <__assert_fail@plt+0x6aa8>
   1865c:	ldrb	r3, [sp, #240]	; 0xf0
   18660:	cmp	r3, #0
   18664:	beq	18538 <__assert_fail@plt+0x6b98>
   18668:	ldr	r5, [sp, #244]	; 0xf4
   1866c:	b	18448 <__assert_fail@plt+0x6aa8>
   18670:	ldr	r0, [sp, #232]	; 0xe8
   18674:	ldr	r1, [sp, #288]	; 0x120
   18678:	bl	1161c <memcmp@plt>
   1867c:	adds	r0, r0, #0
   18680:	movne	r0, #1
   18684:	b	18468 <__assert_fail@plt+0x6ac8>
   18688:	add	r0, sp, #276	; 0x114
   1868c:	bl	11604 <mbsinit@plt>
   18690:	cmp	r0, #0
   18694:	beq	18be0 <__assert_fail@plt+0x7240>
   18698:	strb	r4, [sp, #272]	; 0x110
   1869c:	b	184ac <__assert_fail@plt+0x6b0c>
   186a0:	add	r6, r6, #1
   186a4:	ldr	r3, [sp, #68]	; 0x44
   186a8:	ldr	r5, [sp, #176]	; 0xb0
   186ac:	ldr	r8, [sp, #180]	; 0xb4
   186b0:	cmp	r8, r3
   186b4:	bne	18550 <__assert_fail@plt+0x6bb0>
   186b8:	mov	r2, r8
   186bc:	mov	r0, r5
   186c0:	ldr	r1, [sp, #64]	; 0x40
   186c4:	bl	1161c <memcmp@plt>
   186c8:	cmp	r0, #0
   186cc:	bne	18550 <__assert_fail@plt+0x6bb0>
   186d0:	b	182c4 <__assert_fail@plt+0x6924>
   186d4:	ldr	r0, [sp, #288]	; 0x120
   186d8:	bl	117a8 <strlen@plt>
   186dc:	strb	r4, [sp, #284]	; 0x11c
   186e0:	str	r0, [sp, #292]	; 0x124
   186e4:	strb	r9, [sp, #296]	; 0x128
   186e8:	b	183f4 <__assert_fail@plt+0x6a54>
   186ec:	ldr	r3, [sp, #288]	; 0x120
   186f0:	str	fp, [sp, #292]	; 0x124
   186f4:	ldrb	r3, [r3]
   186f8:	cmp	r3, #0
   186fc:	bne	18c00 <__assert_fail@plt+0x7260>
   18700:	ldr	r5, [sp, #300]	; 0x12c
   18704:	cmp	r5, #0
   18708:	beq	184fc <__assert_fail@plt+0x6b5c>
   1870c:	b	18b64 <__assert_fail@plt+0x71c4>
   18710:	ldr	r3, [sp, #232]	; 0xe8
   18714:	str	fp, [sp, #236]	; 0xec
   18718:	ldrb	r3, [r3]
   1871c:	cmp	r3, #0
   18720:	bne	18c00 <__assert_fail@plt+0x7260>
   18724:	ldr	r5, [sp, #244]	; 0xf4
   18728:	cmp	r5, #0
   1872c:	beq	18640 <__assert_fail@plt+0x6ca0>
   18730:	b	18b64 <__assert_fail@plt+0x71c4>
   18734:	add	r8, sp, #164	; 0xa4
   18738:	mov	r0, r8
   1873c:	bl	11604 <mbsinit@plt>
   18740:	cmp	r0, #0
   18744:	beq	18be0 <__assert_fail@plt+0x7240>
   18748:	strb	r4, [sp, #160]	; 0xa0
   1874c:	b	18574 <__assert_fail@plt+0x6bd4>
   18750:	mov	r3, #0
   18754:	strb	r4, [sp, #172]	; 0xac
   18758:	str	fp, [sp, #180]	; 0xb4
   1875c:	strb	r3, [sp, #184]	; 0xb8
   18760:	ldr	r3, [sp, #4]
   18764:	cmp	sl, #9
   18768:	movls	r3, #0
   1876c:	andhi	r3, r3, #1
   18770:	cmp	r3, #0
   18774:	beq	186a0 <__assert_fail@plt+0x6d00>
   18778:	add	r2, sl, sl, lsl #2
   1877c:	cmp	r6, r2
   18780:	addcc	r6, r6, #1
   18784:	strcc	r3, [sp, #4]
   18788:	bcc	186a4 <__assert_fail@plt+0x6d04>
   1878c:	ldr	r3, [sp, #40]	; 0x28
   18790:	subs	r8, r6, r3
   18794:	ldrb	r3, [sp, #116]	; 0x74
   18798:	beq	18bc4 <__assert_fail@plt+0x7224>
   1879c:	cmp	r3, #0
   187a0:	beq	18950 <__assert_fail@plt+0x6fb0>
   187a4:	ldrb	r3, [sp, #128]	; 0x80
   187a8:	cmp	r3, #0
   187ac:	bne	18924 <__assert_fail@plt+0x6f84>
   187b0:	ldr	r5, [sp, #120]	; 0x78
   187b4:	mov	r2, #0
   187b8:	subs	r8, r8, #1
   187bc:	ldr	r3, [sp, #124]	; 0x7c
   187c0:	strb	r2, [sp, #116]	; 0x74
   187c4:	add	r5, r5, r3
   187c8:	str	r5, [sp, #4]
   187cc:	str	r5, [sp, #120]	; 0x78
   187d0:	beq	1897c <__assert_fail@plt+0x6fdc>
   187d4:	ldrb	r3, [sp, #104]	; 0x68
   187d8:	cmp	r3, #0
   187dc:	addne	r9, sp, #108	; 0x6c
   187e0:	bne	18860 <__assert_fail@plt+0x6ec0>
   187e4:	ldrb	r3, [r5]
   187e8:	lsr	r2, r3, #5
   187ec:	and	r3, r3, #31
   187f0:	ldr	r2, [r7, r2, lsl #2]
   187f4:	lsr	r3, r2, r3
   187f8:	tst	r3, #1
   187fc:	beq	18848 <__assert_fail@plt+0x6ea8>
   18800:	str	fp, [sp, #124]	; 0x7c
   18804:	ldrb	r5, [r5]
   18808:	strb	r4, [sp, #116]	; 0x74
   1880c:	strb	r4, [sp, #128]	; 0x80
   18810:	str	r5, [sp, #132]	; 0x84
   18814:	cmp	r5, #0
   18818:	bne	187b0 <__assert_fail@plt+0x6e10>
   1881c:	ldrb	r3, [sp, #116]	; 0x74
   18820:	cmp	r3, #0
   18824:	beq	18974 <__assert_fail@plt+0x6fd4>
   18828:	add	r2, sp, #272	; 0x110
   1882c:	ldrd	r0, [sp, #8]
   18830:	bl	1766c <__assert_fail@plt+0x5ccc>
   18834:	subs	r3, r0, #0
   18838:	str	r3, [sp, #4]
   1883c:	bne	18b84 <__assert_fail@plt+0x71e4>
   18840:	ldrb	r3, [sp, #184]	; 0xb8
   18844:	b	189d4 <__assert_fail@plt+0x7034>
   18848:	add	r9, sp, #108	; 0x6c
   1884c:	mov	r0, r9
   18850:	bl	11604 <mbsinit@plt>
   18854:	cmp	r0, #0
   18858:	beq	18be0 <__assert_fail@plt+0x7240>
   1885c:	strb	r4, [sp, #104]	; 0x68
   18860:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18864:	mov	r1, r0
   18868:	mov	r0, r5
   1886c:	bl	1af28 <__assert_fail@plt+0x9588>
   18870:	mov	r2, r0
   18874:	mov	r3, r9
   18878:	mov	r1, r5
   1887c:	add	r0, sp, #132	; 0x84
   18880:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   18884:	cmn	r0, #1
   18888:	str	r0, [sp, #124]	; 0x7c
   1888c:	beq	188c4 <__assert_fail@plt+0x6f24>
   18890:	cmn	r0, #2
   18894:	beq	188d8 <__assert_fail@plt+0x6f38>
   18898:	cmp	r0, #0
   1889c:	beq	188f4 <__assert_fail@plt+0x6f54>
   188a0:	ldr	r5, [sp, #132]	; 0x84
   188a4:	mov	r0, r9
   188a8:	strb	r4, [sp, #128]	; 0x80
   188ac:	bl	11604 <mbsinit@plt>
   188b0:	cmp	r0, #0
   188b4:	strb	r4, [sp, #116]	; 0x74
   188b8:	movne	r3, #0
   188bc:	strbne	r3, [sp, #104]	; 0x68
   188c0:	b	18814 <__assert_fail@plt+0x6e74>
   188c4:	mov	r3, #0
   188c8:	str	fp, [sp, #124]	; 0x7c
   188cc:	ldr	r5, [sp, #120]	; 0x78
   188d0:	strb	r3, [sp, #128]	; 0x80
   188d4:	b	187b4 <__assert_fail@plt+0x6e14>
   188d8:	ldr	r5, [sp, #120]	; 0x78
   188dc:	mov	r0, r5
   188e0:	bl	117a8 <strlen@plt>
   188e4:	mov	r3, #0
   188e8:	str	r0, [sp, #124]	; 0x7c
   188ec:	strb	r3, [sp, #128]	; 0x80
   188f0:	b	187b4 <__assert_fail@plt+0x6e14>
   188f4:	ldr	r5, [sp, #120]	; 0x78
   188f8:	str	fp, [sp, #124]	; 0x7c
   188fc:	ldrb	r3, [r5]
   18900:	cmp	r3, #0
   18904:	bne	18c00 <__assert_fail@plt+0x7260>
   18908:	ldr	r5, [sp, #132]	; 0x84
   1890c:	cmp	r5, #0
   18910:	beq	188a4 <__assert_fail@plt+0x6f04>
   18914:	b	18b64 <__assert_fail@plt+0x71c4>
   18918:	mov	lr, r3
   1891c:	str	r4, [sp, #4]
   18920:	b	18000 <__assert_fail@plt+0x6660>
   18924:	ldr	r5, [sp, #132]	; 0x84
   18928:	b	18814 <__assert_fail@plt+0x6e74>
   1892c:	ldr	r5, [sp, #188]	; 0xbc
   18930:	mov	r0, r8
   18934:	strb	r4, [sp, #184]	; 0xb8
   18938:	bl	11604 <mbsinit@plt>
   1893c:	cmp	r0, #0
   18940:	strb	r4, [sp, #172]	; 0xac
   18944:	movne	r3, #0
   18948:	strbne	r3, [sp, #160]	; 0xa0
   1894c:	b	18270 <__assert_fail@plt+0x68d0>
   18950:	ldr	r5, [sp, #120]	; 0x78
   18954:	b	187d4 <__assert_fail@plt+0x6e34>
   18958:	ldr	r0, [sp, #176]	; 0xb0
   1895c:	bl	117a8 <strlen@plt>
   18960:	mov	r3, #0
   18964:	strb	r4, [sp, #172]	; 0xac
   18968:	str	r0, [sp, #180]	; 0xb4
   1896c:	strb	r3, [sp, #184]	; 0xb8
   18970:	b	18760 <__assert_fail@plt+0x6dc0>
   18974:	ldr	r3, [sp, #120]	; 0x78
   18978:	str	r3, [sp, #4]
   1897c:	ldrb	r3, [sp, #104]	; 0x68
   18980:	cmp	r3, #0
   18984:	addne	r9, sp, #108	; 0x6c
   18988:	bne	18a88 <__assert_fail@plt+0x70e8>
   1898c:	ldr	r1, [sp, #4]
   18990:	ldrb	r3, [r1]
   18994:	lsr	r2, r3, #5
   18998:	and	r3, r3, #31
   1899c:	ldr	r2, [r7, r2, lsl #2]
   189a0:	lsr	r3, r2, r3
   189a4:	tst	r3, #1
   189a8:	beq	18a70 <__assert_fail@plt+0x70d0>
   189ac:	str	fp, [sp, #124]	; 0x7c
   189b0:	ldrb	r5, [r1]
   189b4:	strb	r4, [sp, #116]	; 0x74
   189b8:	strb	r4, [sp, #128]	; 0x80
   189bc:	str	r5, [sp, #132]	; 0x84
   189c0:	cmp	r5, #0
   189c4:	beq	18828 <__assert_fail@plt+0x6e88>
   189c8:	ldrb	r3, [sp, #184]	; 0xb8
   189cc:	mov	r2, #1
   189d0:	str	r2, [sp, #4]
   189d4:	cmp	r3, #0
   189d8:	add	r3, r6, #1
   189dc:	str	r6, [sp, #40]	; 0x28
   189e0:	mov	r6, r3
   189e4:	bne	182a8 <__assert_fail@plt+0x6908>
   189e8:	b	186a4 <__assert_fail@plt+0x6d04>
   189ec:	add	r0, sp, #276	; 0x114
   189f0:	bl	11604 <mbsinit@plt>
   189f4:	cmp	r0, #0
   189f8:	beq	18be0 <__assert_fail@plt+0x7240>
   189fc:	strb	r4, [sp, #272]	; 0x110
   18a00:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18a04:	ldr	r5, [sp, #12]
   18a08:	mov	r1, r0
   18a0c:	mov	r0, r5
   18a10:	bl	1af28 <__assert_fail@plt+0x9588>
   18a14:	mov	r2, r0
   18a18:	add	r3, sp, #276	; 0x114
   18a1c:	mov	r1, r5
   18a20:	add	r0, sp, #300	; 0x12c
   18a24:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   18a28:	cmn	r0, #1
   18a2c:	str	r0, [sp, #292]	; 0x124
   18a30:	beq	18af0 <__assert_fail@plt+0x7150>
   18a34:	cmn	r0, #2
   18a38:	beq	18b04 <__assert_fail@plt+0x7164>
   18a3c:	cmp	r0, #0
   18a40:	beq	18b20 <__assert_fail@plt+0x7180>
   18a44:	ldr	r5, [sp, #300]	; 0x12c
   18a48:	add	r0, sp, #276	; 0x114
   18a4c:	strb	r4, [sp, #296]	; 0x128
   18a50:	bl	11604 <mbsinit@plt>
   18a54:	cmp	r0, #0
   18a58:	strb	r4, [sp, #284]	; 0x11c
   18a5c:	movne	r3, #0
   18a60:	strbne	r3, [sp, #272]	; 0x110
   18a64:	cmp	r5, #0
   18a68:	bne	18398 <__assert_fail@plt+0x69f8>
   18a6c:	bl	11964 <abort@plt>
   18a70:	add	r9, sp, #108	; 0x6c
   18a74:	mov	r0, r9
   18a78:	bl	11604 <mbsinit@plt>
   18a7c:	cmp	r0, #0
   18a80:	beq	18be0 <__assert_fail@plt+0x7240>
   18a84:	strb	r4, [sp, #104]	; 0x68
   18a88:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18a8c:	ldr	r5, [sp, #4]
   18a90:	mov	r1, r0
   18a94:	mov	r0, r5
   18a98:	bl	1af28 <__assert_fail@plt+0x9588>
   18a9c:	mov	r2, r0
   18aa0:	mov	r3, r9
   18aa4:	mov	r1, r5
   18aa8:	add	r0, sp, #132	; 0x84
   18aac:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   18ab0:	cmn	r0, #1
   18ab4:	str	r0, [sp, #124]	; 0x7c
   18ab8:	beq	18b8c <__assert_fail@plt+0x71ec>
   18abc:	cmn	r0, #2
   18ac0:	beq	18b68 <__assert_fail@plt+0x71c8>
   18ac4:	cmp	r0, #0
   18ac8:	beq	18ba0 <__assert_fail@plt+0x7200>
   18acc:	ldr	r5, [sp, #132]	; 0x84
   18ad0:	mov	r0, r9
   18ad4:	strb	r4, [sp, #128]	; 0x80
   18ad8:	bl	11604 <mbsinit@plt>
   18adc:	cmp	r0, #0
   18ae0:	strb	r4, [sp, #116]	; 0x74
   18ae4:	movne	r3, #0
   18ae8:	strbne	r3, [sp, #104]	; 0x68
   18aec:	b	189c0 <__assert_fail@plt+0x7020>
   18af0:	ldr	r3, [sp, #44]	; 0x2c
   18af4:	str	fp, [sp, #292]	; 0x124
   18af8:	ldr	r5, [sp, #288]	; 0x120
   18afc:	strb	r3, [sp, #296]	; 0x128
   18b00:	b	1839c <__assert_fail@plt+0x69fc>
   18b04:	ldr	r5, [sp, #288]	; 0x120
   18b08:	mov	r0, r5
   18b0c:	bl	117a8 <strlen@plt>
   18b10:	ldr	r3, [sp, #44]	; 0x2c
   18b14:	str	r0, [sp, #292]	; 0x124
   18b18:	strb	r3, [sp, #296]	; 0x128
   18b1c:	b	1839c <__assert_fail@plt+0x69fc>
   18b20:	ldr	r5, [sp, #288]	; 0x120
   18b24:	str	fp, [sp, #292]	; 0x124
   18b28:	ldrb	r3, [r5]
   18b2c:	cmp	r3, #0
   18b30:	bne	18c00 <__assert_fail@plt+0x7260>
   18b34:	ldr	r5, [sp, #300]	; 0x12c
   18b38:	cmp	r5, #0
   18b3c:	beq	18a48 <__assert_fail@plt+0x70a8>
   18b40:	b	18b64 <__assert_fail@plt+0x71c4>
   18b44:	ldr	r3, [sp, #64]	; 0x40
   18b48:	str	r5, [sp, #68]	; 0x44
   18b4c:	ldrb	r3, [r3]
   18b50:	cmp	r3, #0
   18b54:	bne	18c00 <__assert_fail@plt+0x7260>
   18b58:	ldr	r4, [sp, #76]	; 0x4c
   18b5c:	cmp	r4, #0
   18b60:	beq	180bc <__assert_fail@plt+0x671c>
   18b64:	bl	17644 <__assert_fail@plt+0x5ca4>
   18b68:	ldr	r0, [sp, #120]	; 0x78
   18b6c:	bl	117a8 <strlen@plt>
   18b70:	mov	r3, #0
   18b74:	strb	r4, [sp, #116]	; 0x74
   18b78:	str	r0, [sp, #124]	; 0x7c
   18b7c:	strb	r3, [sp, #128]	; 0x80
   18b80:	b	189c8 <__assert_fail@plt+0x7028>
   18b84:	ldr	r0, [sp, #272]	; 0x110
   18b88:	b	180e8 <__assert_fail@plt+0x6748>
   18b8c:	mov	r3, #0
   18b90:	strb	r4, [sp, #116]	; 0x74
   18b94:	str	fp, [sp, #124]	; 0x7c
   18b98:	strb	r3, [sp, #128]	; 0x80
   18b9c:	b	189c8 <__assert_fail@plt+0x7028>
   18ba0:	ldr	r5, [sp, #120]	; 0x78
   18ba4:	str	fp, [sp, #124]	; 0x7c
   18ba8:	ldrb	r3, [r5]
   18bac:	cmp	r3, #0
   18bb0:	bne	18c00 <__assert_fail@plt+0x7260>
   18bb4:	ldr	r5, [sp, #132]	; 0x84
   18bb8:	cmp	r5, #0
   18bbc:	beq	18ad0 <__assert_fail@plt+0x7130>
   18bc0:	b	18b64 <__assert_fail@plt+0x71c4>
   18bc4:	cmp	r3, #0
   18bc8:	beq	18974 <__assert_fail@plt+0x6fd4>
   18bcc:	ldrb	r3, [sp, #128]	; 0x80
   18bd0:	cmp	r3, #0
   18bd4:	ldrne	r5, [sp, #132]	; 0x84
   18bd8:	beq	189c8 <__assert_fail@plt+0x7028>
   18bdc:	b	189c0 <__assert_fail@plt+0x7020>
   18be0:	movw	r3, #56976	; 0xde90
   18be4:	movt	r3, #2
   18be8:	movw	r1, #56876	; 0xde2c
   18bec:	movt	r1, #2
   18bf0:	movw	r0, #56908	; 0xde4c
   18bf4:	movt	r0, #2
   18bf8:	mov	r2, #143	; 0x8f
   18bfc:	bl	119a0 <__assert_fail@plt>
   18c00:	movw	r3, #56976	; 0xde90
   18c04:	movt	r3, #2
   18c08:	movw	r1, #56876	; 0xde2c
   18c0c:	movt	r1, #2
   18c10:	movw	r0, #56932	; 0xde64
   18c14:	movt	r0, #2
   18c18:	mov	r2, #171	; 0xab
   18c1c:	bl	119a0 <__assert_fail@plt>
   18c20:	strd	r4, [sp, #-16]!
   18c24:	subs	r4, r0, #0
   18c28:	str	r6, [sp, #8]
   18c2c:	str	lr, [sp, #12]
   18c30:	beq	18cc8 <__assert_fail@plt+0x7328>
   18c34:	mov	r1, #47	; 0x2f
   18c38:	bl	118a4 <strrchr@plt>
   18c3c:	subs	r5, r0, #0
   18c40:	beq	18ca0 <__assert_fail@plt+0x7300>
   18c44:	add	r6, r5, #1
   18c48:	sub	r3, r6, r4
   18c4c:	cmp	r3, #6
   18c50:	ble	18ca0 <__assert_fail@plt+0x7300>
   18c54:	movw	r1, #57052	; 0xdedc
   18c58:	movt	r1, #2
   18c5c:	mov	r2, #7
   18c60:	sub	r0, r5, #6
   18c64:	bl	11958 <strncmp@plt>
   18c68:	cmp	r0, #0
   18c6c:	bne	18ca0 <__assert_fail@plt+0x7300>
   18c70:	movw	r1, #57060	; 0xdee4
   18c74:	movt	r1, #2
   18c78:	mov	r2, #3
   18c7c:	mov	r0, r6
   18c80:	bl	11958 <strncmp@plt>
   18c84:	cmp	r0, #0
   18c88:	movne	r4, r6
   18c8c:	bne	18ca0 <__assert_fail@plt+0x7300>
   18c90:	add	r4, r5, #4
   18c94:	movw	r3, #61960	; 0xf208
   18c98:	movt	r3, #3
   18c9c:	str	r4, [r3]
   18ca0:	movw	r2, #62112	; 0xf2a0
   18ca4:	movt	r2, #3
   18ca8:	ldr	r6, [sp, #8]
   18cac:	movw	r3, #61964	; 0xf20c
   18cb0:	movt	r3, #3
   18cb4:	str	r4, [r2]
   18cb8:	str	r4, [r3]
   18cbc:	ldrd	r4, [sp]
   18cc0:	add	sp, sp, #12
   18cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   18cc8:	movw	r3, #61976	; 0xf218
   18ccc:	movt	r3, #3
   18cd0:	movw	r0, #56996	; 0xdea4
   18cd4:	movt	r0, #2
   18cd8:	ldr	r3, [r3]
   18cdc:	mov	r2, #55	; 0x37
   18ce0:	mov	r1, #1
   18ce4:	bl	11688 <fwrite@plt>
   18ce8:	bl	11964 <abort@plt>
   18cec:	strd	r4, [sp, #-16]!
   18cf0:	mov	r4, #0
   18cf4:	mov	r5, #0
   18cf8:	cmp	r1, #10
   18cfc:	str	r6, [sp, #8]
   18d00:	strd	r4, [r0]
   18d04:	strd	r4, [r0, #8]
   18d08:	str	lr, [sp, #12]
   18d0c:	strd	r4, [r0, #16]
   18d10:	strd	r4, [r0, #24]
   18d14:	strd	r4, [r0, #32]
   18d18:	strd	r4, [r0, #40]	; 0x28
   18d1c:	beq	18d34 <__assert_fail@plt+0x7394>
   18d20:	ldrd	r4, [sp]
   18d24:	str	r1, [r0]
   18d28:	ldr	r6, [sp, #8]
   18d2c:	add	sp, sp, #12
   18d30:	pop	{pc}		; (ldr pc, [sp], #4)
   18d34:	bl	11964 <abort@plt>
   18d38:	mov	r2, #5
   18d3c:	strd	r4, [sp, #-16]!
   18d40:	mov	r5, r0
   18d44:	str	r6, [sp, #8]
   18d48:	mov	r6, r1
   18d4c:	mov	r1, r0
   18d50:	mov	r0, #0
   18d54:	str	lr, [sp, #12]
   18d58:	bl	11628 <dcgettext@plt>
   18d5c:	cmp	r5, r0
   18d60:	mov	r4, r0
   18d64:	beq	18d7c <__assert_fail@plt+0x73dc>
   18d68:	mov	r0, r4
   18d6c:	ldrd	r4, [sp]
   18d70:	ldr	r6, [sp, #8]
   18d74:	add	sp, sp, #12
   18d78:	pop	{pc}		; (ldr pc, [sp], #4)
   18d7c:	bl	2c400 <__assert_fail@plt+0x1aa60>
   18d80:	ldrb	r3, [r0]
   18d84:	bic	r3, r3, #32
   18d88:	cmp	r3, #85	; 0x55
   18d8c:	bne	18df4 <__assert_fail@plt+0x7454>
   18d90:	ldrb	r3, [r0, #1]
   18d94:	bic	r3, r3, #32
   18d98:	cmp	r3, #84	; 0x54
   18d9c:	bne	18e74 <__assert_fail@plt+0x74d4>
   18da0:	ldrb	r3, [r0, #2]
   18da4:	bic	r3, r3, #32
   18da8:	cmp	r3, #70	; 0x46
   18dac:	bne	18e74 <__assert_fail@plt+0x74d4>
   18db0:	ldrb	r3, [r0, #3]
   18db4:	cmp	r3, #45	; 0x2d
   18db8:	bne	18e74 <__assert_fail@plt+0x74d4>
   18dbc:	ldrb	r3, [r0, #4]
   18dc0:	cmp	r3, #56	; 0x38
   18dc4:	bne	18e74 <__assert_fail@plt+0x74d4>
   18dc8:	ldrb	r3, [r0, #5]
   18dcc:	cmp	r3, #0
   18dd0:	bne	18e74 <__assert_fail@plt+0x74d4>
   18dd4:	ldrb	r2, [r4]
   18dd8:	movw	r3, #57152	; 0xdf40
   18ddc:	movt	r3, #2
   18de0:	movw	r4, #57164	; 0xdf4c
   18de4:	movt	r4, #2
   18de8:	cmp	r2, #96	; 0x60
   18dec:	movne	r4, r3
   18df0:	b	18d68 <__assert_fail@plt+0x73c8>
   18df4:	cmp	r3, #71	; 0x47
   18df8:	bne	18e74 <__assert_fail@plt+0x74d4>
   18dfc:	ldrb	r3, [r0, #1]
   18e00:	bic	r3, r3, #32
   18e04:	cmp	r3, #66	; 0x42
   18e08:	bne	18e74 <__assert_fail@plt+0x74d4>
   18e0c:	ldrb	r3, [r0, #2]
   18e10:	cmp	r3, #49	; 0x31
   18e14:	bne	18e74 <__assert_fail@plt+0x74d4>
   18e18:	ldrb	r3, [r0, #3]
   18e1c:	cmp	r3, #56	; 0x38
   18e20:	bne	18e74 <__assert_fail@plt+0x74d4>
   18e24:	ldrb	r3, [r0, #4]
   18e28:	cmp	r3, #48	; 0x30
   18e2c:	bne	18e74 <__assert_fail@plt+0x74d4>
   18e30:	ldrb	r3, [r0, #5]
   18e34:	cmp	r3, #51	; 0x33
   18e38:	bne	18e74 <__assert_fail@plt+0x74d4>
   18e3c:	ldrb	r3, [r0, #6]
   18e40:	cmp	r3, #48	; 0x30
   18e44:	bne	18e74 <__assert_fail@plt+0x74d4>
   18e48:	ldrb	r3, [r0, #7]
   18e4c:	cmp	r3, #0
   18e50:	bne	18e74 <__assert_fail@plt+0x74d4>
   18e54:	ldrb	r2, [r4]
   18e58:	movw	r3, #57156	; 0xdf44
   18e5c:	movt	r3, #2
   18e60:	movw	r4, #57160	; 0xdf48
   18e64:	movt	r4, #2
   18e68:	cmp	r2, #96	; 0x60
   18e6c:	movne	r4, r3
   18e70:	b	18d68 <__assert_fail@plt+0x73c8>
   18e74:	movw	r3, #57168	; 0xdf50
   18e78:	movt	r3, #2
   18e7c:	cmp	r6, #9
   18e80:	movw	r4, #57148	; 0xdf3c
   18e84:	movt	r4, #2
   18e88:	movne	r4, r3
   18e8c:	b	18d68 <__assert_fail@plt+0x73c8>
   18e90:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18e94:	strd	r6, [sp, #8]
   18e98:	strd	r8, [sp, #16]
   18e9c:	strd	sl, [sp, #24]
   18ea0:	mov	fp, r0
   18ea4:	mov	sl, r1
   18ea8:	str	lr, [sp, #32]
   18eac:	sub	sp, sp, #116	; 0x74
   18eb0:	ldr	r8, [sp, #152]	; 0x98
   18eb4:	str	r3, [sp, #28]
   18eb8:	ldr	r3, [sp, #156]	; 0x9c
   18ebc:	str	r2, [sp, #32]
   18ec0:	and	r4, r3, #2
   18ec4:	ubfx	r3, r3, #1, #1
   18ec8:	str	r3, [sp, #44]	; 0x2c
   18ecc:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18ed0:	str	r0, [sp, #64]	; 0x40
   18ed4:	cmp	r8, #10
   18ed8:	ldrls	pc, [pc, r8, lsl #2]
   18edc:	b	1a64c <__assert_fail@plt+0x8cac>
   18ee0:	andeq	r9, r1, r4, ror #5
   18ee4:	andeq	r9, r1, r0, lsl #7
   18ee8:	andeq	r9, r1, ip, asr r9
   18eec:	andeq	r9, r1, r0, lsr #7
   18ef0:	andeq	r9, r1, r8, asr #4
   18ef4:	muleq	r1, r4, r2
   18ef8:	andeq	r9, r1, r4, lsl r3
   18efc:	andeq	r9, r1, r0, asr r3
   18f00:	andeq	r8, r1, ip, lsl #30
   18f04:	andeq	r8, r1, ip, lsl #30
   18f08:	andeq	r8, r1, ip, lsl #30
   18f0c:	cmp	r8, #10
   18f10:	beq	18f3c <__assert_fail@plt+0x759c>
   18f14:	mov	r1, r8
   18f18:	movw	r0, #57172	; 0xdf54
   18f1c:	movt	r0, #2
   18f20:	bl	18d38 <__assert_fail@plt+0x7398>
   18f24:	mov	r1, r8
   18f28:	str	r0, [sp, #164]	; 0xa4
   18f2c:	movw	r0, #57168	; 0xdf50
   18f30:	movt	r0, #2
   18f34:	bl	18d38 <__assert_fail@plt+0x7398>
   18f38:	str	r0, [sp, #168]	; 0xa8
   18f3c:	cmp	r4, #0
   18f40:	movne	r4, #0
   18f44:	beq	1a328 <__assert_fail@plt+0x8988>
   18f48:	mov	r3, #1
   18f4c:	mov	r5, #0
   18f50:	ldr	r0, [sp, #168]	; 0xa8
   18f54:	str	r3, [sp, #36]	; 0x24
   18f58:	str	r3, [sp, #40]	; 0x28
   18f5c:	str	r5, [sp, #68]	; 0x44
   18f60:	bl	117a8 <strlen@plt>
   18f64:	ldr	r3, [sp, #168]	; 0xa8
   18f68:	str	r5, [sp, #48]	; 0x30
   18f6c:	str	r0, [sp, #56]	; 0x38
   18f70:	str	r3, [sp, #60]	; 0x3c
   18f74:	str	r5, [sp, #72]	; 0x48
   18f78:	str	r8, [sp, #152]	; 0x98
   18f7c:	mov	r8, fp
   18f80:	mov	r9, #0
   18f84:	ldr	fp, [sp, #152]	; 0x98
   18f88:	ldr	r3, [sp, #28]
   18f8c:	cmn	r3, #1
   18f90:	beq	194f0 <__assert_fail@plt+0x7b50>
   18f94:	ldr	r3, [sp, #28]
   18f98:	subs	r6, r3, r9
   18f9c:	movne	r6, #1
   18fa0:	cmp	r6, #0
   18fa4:	beq	19508 <__assert_fail@plt+0x7b68>
   18fa8:	ldr	r0, [sp, #32]
   18fac:	ldr	r7, [sp, #40]	; 0x28
   18fb0:	add	r3, r0, r9
   18fb4:	cmp	fp, #2
   18fb8:	moveq	r7, #0
   18fbc:	andne	r7, r7, #1
   18fc0:	str	r3, [sp, #52]	; 0x34
   18fc4:	cmp	r7, #0
   18fc8:	beq	199a4 <__assert_fail@plt+0x8004>
   18fcc:	ldr	r2, [sp, #56]	; 0x38
   18fd0:	cmp	r2, #0
   18fd4:	beq	19c40 <__assert_fail@plt+0x82a0>
   18fd8:	ldr	r1, [sp, #28]
   18fdc:	cmp	r2, #1
   18fe0:	mov	r3, r2
   18fe4:	movls	r3, #0
   18fe8:	movhi	r3, #1
   18fec:	add	r5, r9, r2
   18ff0:	cmn	r1, #1
   18ff4:	movne	r3, #0
   18ff8:	cmp	r3, #0
   18ffc:	beq	19008 <__assert_fail@plt+0x7668>
   19000:	bl	117a8 <strlen@plt>
   19004:	str	r0, [sp, #28]
   19008:	ldr	r3, [sp, #28]
   1900c:	cmp	r5, r3
   19010:	bhi	19c40 <__assert_fail@plt+0x82a0>
   19014:	ldr	r0, [sp, #52]	; 0x34
   19018:	ldr	r2, [sp, #56]	; 0x38
   1901c:	ldr	r1, [sp, #60]	; 0x3c
   19020:	bl	1161c <memcmp@plt>
   19024:	cmp	r0, #0
   19028:	bne	19c40 <__assert_fail@plt+0x82a0>
   1902c:	ldr	r3, [sp, #44]	; 0x2c
   19030:	cmp	r3, #0
   19034:	bne	1a570 <__assert_fail@plt+0x8bd0>
   19038:	ldr	r3, [sp, #52]	; 0x34
   1903c:	ldrb	r5, [r3]
   19040:	cmp	r5, #126	; 0x7e
   19044:	ldrls	pc, [pc, r5, lsl #2]
   19048:	b	19900 <__assert_fail@plt+0x7f60>
   1904c:	andeq	r9, r1, r4, lsl #16
   19050:	andeq	r9, r1, r0, lsl #18
   19054:	andeq	r9, r1, r0, lsl #18
   19058:	andeq	r9, r1, r0, lsl #18
   1905c:	andeq	r9, r1, r0, lsl #18
   19060:	andeq	r9, r1, r0, lsl #18
   19064:	andeq	r9, r1, r0, lsl #18
   19068:	ldrdeq	r9, [r1], -r8
   1906c:	ldrdeq	r9, [r1], -r0
   19070:	andeq	r9, r1, r8, lsl r7
   19074:	andeq	r9, r1, r4, asr #15
   19078:	andeq	r9, r1, r0, lsl r7
   1907c:	andeq	r9, r1, r0, lsr #15
   19080:	andeq	r9, r1, ip, ror #15
   19084:	andeq	r9, r1, r0, lsl #18
   19088:	andeq	r9, r1, r0, lsl #18
   1908c:	andeq	r9, r1, r0, lsl #18
   19090:	andeq	r9, r1, r0, lsl #18
   19094:	andeq	r9, r1, r0, lsl #18
   19098:	andeq	r9, r1, r0, lsl #18
   1909c:	andeq	r9, r1, r0, lsl #18
   190a0:	andeq	r9, r1, r0, lsl #18
   190a4:	andeq	r9, r1, r0, lsl #18
   190a8:	andeq	r9, r1, r0, lsl #18
   190ac:	andeq	r9, r1, r0, lsl #18
   190b0:	andeq	r9, r1, r0, lsl #18
   190b4:	andeq	r9, r1, r0, lsl #18
   190b8:	andeq	r9, r1, r0, lsl #18
   190bc:	andeq	r9, r1, r0, lsl #18
   190c0:	andeq	r9, r1, r0, lsl #18
   190c4:	andeq	r9, r1, r0, lsl #18
   190c8:	andeq	r9, r1, r0, lsl #18
   190cc:	ldrdeq	r9, [r1], -ip
   190d0:	andeq	r9, r1, r4, ror #15
   190d4:	andeq	r9, r1, r4, ror #15
   190d8:	andeq	r9, r1, r0, asr #17
   190dc:	andeq	r9, r1, r4, ror #15
   190e0:	strdeq	r9, [r1], -r4
   190e4:	andeq	r9, r1, r4, ror #15
   190e8:	andeq	r9, r1, r0, asr #12
   190ec:	andeq	r9, r1, r4, ror #15
   190f0:	andeq	r9, r1, r4, ror #15
   190f4:	andeq	r9, r1, r4, ror #15
   190f8:	strdeq	r9, [r1], -r4
   190fc:	strdeq	r9, [r1], -r4
   19100:	strdeq	r9, [r1], -r4
   19104:	strdeq	r9, [r1], -r4
   19108:	strdeq	r9, [r1], -r4
   1910c:	strdeq	r9, [r1], -r4
   19110:	strdeq	r9, [r1], -r4
   19114:	strdeq	r9, [r1], -r4
   19118:	strdeq	r9, [r1], -r4
   1911c:	strdeq	r9, [r1], -r4
   19120:	strdeq	r9, [r1], -r4
   19124:	strdeq	r9, [r1], -r4
   19128:	strdeq	r9, [r1], -r4
   1912c:	strdeq	r9, [r1], -r4
   19130:	strdeq	r9, [r1], -r4
   19134:	strdeq	r9, [r1], -r4
   19138:	andeq	r9, r1, r4, ror #15
   1913c:	andeq	r9, r1, r4, ror #15
   19140:	andeq	r9, r1, r4, ror #15
   19144:	andeq	r9, r1, r4, ror #15
   19148:	andeq	r9, r1, r4, lsl r6
   1914c:	andeq	r9, r1, r0, lsl #18
   19150:	strdeq	r9, [r1], -r4
   19154:	strdeq	r9, [r1], -r4
   19158:	strdeq	r9, [r1], -r4
   1915c:	strdeq	r9, [r1], -r4
   19160:	strdeq	r9, [r1], -r4
   19164:	strdeq	r9, [r1], -r4
   19168:	strdeq	r9, [r1], -r4
   1916c:	strdeq	r9, [r1], -r4
   19170:	strdeq	r9, [r1], -r4
   19174:	strdeq	r9, [r1], -r4
   19178:	strdeq	r9, [r1], -r4
   1917c:	strdeq	r9, [r1], -r4
   19180:	strdeq	r9, [r1], -r4
   19184:	strdeq	r9, [r1], -r4
   19188:	strdeq	r9, [r1], -r4
   1918c:	strdeq	r9, [r1], -r4
   19190:	strdeq	r9, [r1], -r4
   19194:	strdeq	r9, [r1], -r4
   19198:	strdeq	r9, [r1], -r4
   1919c:	strdeq	r9, [r1], -r4
   191a0:	strdeq	r9, [r1], -r4
   191a4:	strdeq	r9, [r1], -r4
   191a8:	strdeq	r9, [r1], -r4
   191ac:	strdeq	r9, [r1], -r4
   191b0:	strdeq	r9, [r1], -r4
   191b4:	strdeq	r9, [r1], -r4
   191b8:	andeq	r9, r1, r4, ror #15
   191bc:			; <UNDEFINED> instruction: 0x000195bc
   191c0:	strdeq	r9, [r1], -r4
   191c4:	andeq	r9, r1, r4, ror #15
   191c8:	strdeq	r9, [r1], -r4
   191cc:	andeq	r9, r1, r4, ror #15
   191d0:	strdeq	r9, [r1], -r4
   191d4:	strdeq	r9, [r1], -r4
   191d8:	strdeq	r9, [r1], -r4
   191dc:	strdeq	r9, [r1], -r4
   191e0:	strdeq	r9, [r1], -r4
   191e4:	strdeq	r9, [r1], -r4
   191e8:	strdeq	r9, [r1], -r4
   191ec:	strdeq	r9, [r1], -r4
   191f0:	strdeq	r9, [r1], -r4
   191f4:	strdeq	r9, [r1], -r4
   191f8:	strdeq	r9, [r1], -r4
   191fc:	strdeq	r9, [r1], -r4
   19200:	strdeq	r9, [r1], -r4
   19204:	strdeq	r9, [r1], -r4
   19208:	strdeq	r9, [r1], -r4
   1920c:	strdeq	r9, [r1], -r4
   19210:	strdeq	r9, [r1], -r4
   19214:	strdeq	r9, [r1], -r4
   19218:	strdeq	r9, [r1], -r4
   1921c:	strdeq	r9, [r1], -r4
   19220:	strdeq	r9, [r1], -r4
   19224:	strdeq	r9, [r1], -r4
   19228:	strdeq	r9, [r1], -r4
   1922c:	strdeq	r9, [r1], -r4
   19230:	strdeq	r9, [r1], -r4
   19234:	strdeq	r9, [r1], -r4
   19238:	andeq	r9, r1, r0, ror #7
   1923c:	andeq	r9, r1, r4, ror #15
   19240:	andeq	r9, r1, r0, ror #7
   19244:	andeq	r9, r1, r0, asr #17
   19248:	cmp	r4, #0
   1924c:	moveq	r3, #1
   19250:	streq	r3, [sp, #40]	; 0x28
   19254:	beq	19968 <__assert_fail@plt+0x7fc8>
   19258:	mov	r3, #0
   1925c:	mov	r2, #1
   19260:	mov	r4, r3
   19264:	str	r2, [sp, #36]	; 0x24
   19268:	str	r2, [sp, #44]	; 0x2c
   1926c:	str	r2, [sp, #56]	; 0x38
   19270:	str	r3, [sp, #68]	; 0x44
   19274:	movw	r3, #57168	; 0xdf50
   19278:	movt	r3, #2
   1927c:	str	r4, [sp, #40]	; 0x28
   19280:	mov	r8, #2
   19284:	str	r4, [sp, #48]	; 0x30
   19288:	str	r3, [sp, #60]	; 0x3c
   1928c:	str	r4, [sp, #72]	; 0x48
   19290:	b	18f78 <__assert_fail@plt+0x75d8>
   19294:	cmp	r4, #0
   19298:	bne	1a4e4 <__assert_fail@plt+0x8b44>
   1929c:	cmp	sl, #0
   192a0:	beq	1a2a4 <__assert_fail@plt+0x8904>
   192a4:	mov	r3, #34	; 0x22
   192a8:	mov	r1, r4
   192ac:	mov	r2, #1
   192b0:	strb	r3, [fp]
   192b4:	movw	r3, #57148	; 0xdf3c
   192b8:	movt	r3, #2
   192bc:	mov	r4, r2
   192c0:	str	r2, [sp, #36]	; 0x24
   192c4:	str	r2, [sp, #40]	; 0x28
   192c8:	str	r1, [sp, #44]	; 0x2c
   192cc:	str	r1, [sp, #48]	; 0x30
   192d0:	str	r2, [sp, #56]	; 0x38
   192d4:	str	r3, [sp, #60]	; 0x3c
   192d8:	str	r1, [sp, #68]	; 0x44
   192dc:	str	r1, [sp, #72]	; 0x48
   192e0:	b	18f78 <__assert_fail@plt+0x75d8>
   192e4:	mov	r3, #0
   192e8:	mov	r4, r8
   192ec:	str	r3, [sp, #40]	; 0x28
   192f0:	str	r3, [sp, #44]	; 0x2c
   192f4:	str	r3, [sp, #48]	; 0x30
   192f8:	str	r8, [sp, #56]	; 0x38
   192fc:	str	r3, [sp, #60]	; 0x3c
   19300:	str	r3, [sp, #68]	; 0x44
   19304:	mov	r3, #1
   19308:	str	r3, [sp, #36]	; 0x24
   1930c:	str	r8, [sp, #72]	; 0x48
   19310:	b	18f78 <__assert_fail@plt+0x75d8>
   19314:	mov	r3, #1
   19318:	mov	r2, #0
   1931c:	mov	r4, r2
   19320:	mov	r8, #5
   19324:	str	r3, [sp, #36]	; 0x24
   19328:	str	r3, [sp, #40]	; 0x28
   1932c:	str	r3, [sp, #44]	; 0x2c
   19330:	str	r2, [sp, #48]	; 0x30
   19334:	str	r3, [sp, #56]	; 0x38
   19338:	movw	r3, #57148	; 0xdf3c
   1933c:	movt	r3, #2
   19340:	str	r3, [sp, #60]	; 0x3c
   19344:	str	r2, [sp, #68]	; 0x44
   19348:	str	r2, [sp, #72]	; 0x48
   1934c:	b	18f78 <__assert_fail@plt+0x75d8>
   19350:	mov	r3, #0
   19354:	mov	r2, #1
   19358:	mov	r4, r3
   1935c:	str	r2, [sp, #36]	; 0x24
   19360:	str	r2, [sp, #40]	; 0x28
   19364:	str	r3, [sp, #44]	; 0x2c
   19368:	str	r3, [sp, #48]	; 0x30
   1936c:	str	r3, [sp, #56]	; 0x38
   19370:	str	r3, [sp, #60]	; 0x3c
   19374:	str	r3, [sp, #68]	; 0x44
   19378:	str	r3, [sp, #72]	; 0x48
   1937c:	b	18f78 <__assert_fail@plt+0x75d8>
   19380:	mov	r2, #1
   19384:	mov	r3, #0
   19388:	mov	r4, r3
   1938c:	str	r2, [sp, #36]	; 0x24
   19390:	str	r2, [sp, #44]	; 0x2c
   19394:	str	r8, [sp, #56]	; 0x38
   19398:	str	r3, [sp, #68]	; 0x44
   1939c:	b	19274 <__assert_fail@plt+0x78d4>
   193a0:	mov	r3, #1
   193a4:	mov	r2, #0
   193a8:	mov	r4, r2
   193ac:	mov	r8, #2
   193b0:	str	r3, [sp, #36]	; 0x24
   193b4:	str	r3, [sp, #40]	; 0x28
   193b8:	str	r3, [sp, #44]	; 0x2c
   193bc:	str	r2, [sp, #48]	; 0x30
   193c0:	str	r3, [sp, #56]	; 0x38
   193c4:	movw	r3, #57168	; 0xdf50
   193c8:	movt	r3, #2
   193cc:	str	r3, [sp, #60]	; 0x3c
   193d0:	str	r2, [sp, #68]	; 0x44
   193d4:	str	r2, [sp, #72]	; 0x48
   193d8:	b	18f78 <__assert_fail@plt+0x75d8>
   193dc:	mov	r7, #0
   193e0:	ldr	r3, [sp, #28]
   193e4:	cmn	r3, #1
   193e8:	beq	19ec0 <__assert_fail@plt+0x8520>
   193ec:	ldr	r3, [sp, #28]
   193f0:	subs	r2, r3, #1
   193f4:	movne	r2, #1
   193f8:	sub	r3, fp, #2
   193fc:	cmp	r2, #0
   19400:	clz	r3, r3
   19404:	lsr	r3, r3, #5
   19408:	bne	19414 <__assert_fail@plt+0x7a74>
   1940c:	cmp	r9, #0
   19410:	beq	19c20 <__assert_fail@plt+0x8280>
   19414:	mov	r6, #0
   19418:	ldr	r2, [sp, #40]	; 0x28
   1941c:	eor	r2, r2, #1
   19420:	orrs	r3, r3, r2
   19424:	bne	195fc <__assert_fail@plt+0x7c5c>
   19428:	ldr	r2, [sp, #160]	; 0xa0
   1942c:	cmp	r2, #0
   19430:	beq	19450 <__assert_fail@plt+0x7ab0>
   19434:	ldr	r0, [sp, #160]	; 0xa0
   19438:	ubfx	r1, r5, #5, #8
   1943c:	and	r2, r5, #31
   19440:	ldr	r1, [r0, r1, lsl #2]
   19444:	lsr	r2, r1, r2
   19448:	tst	r2, #1
   1944c:	bne	19458 <__assert_fail@plt+0x7ab8>
   19450:	cmp	r7, #0
   19454:	beq	196c8 <__assert_fail@plt+0x7d28>
   19458:	ldr	r2, [sp, #44]	; 0x2c
   1945c:	sub	r3, fp, #2
   19460:	clz	r3, r3
   19464:	lsr	r3, r3, #5
   19468:	cmp	r2, #0
   1946c:	bne	1a214 <__assert_fail@plt+0x8874>
   19470:	ldr	r2, [sp, #48]	; 0x30
   19474:	eor	r2, r2, #1
   19478:	ands	r3, r3, r2
   1947c:	beq	194b4 <__assert_fail@plt+0x7b14>
   19480:	cmp	sl, r4
   19484:	str	r3, [sp, #48]	; 0x30
   19488:	movhi	r2, #39	; 0x27
   1948c:	strbhi	r2, [r8, r4]
   19490:	add	r2, r4, #1
   19494:	cmp	sl, r2
   19498:	movhi	r1, #36	; 0x24
   1949c:	strbhi	r1, [r8, r2]
   194a0:	add	r2, r4, #2
   194a4:	add	r4, r4, #3
   194a8:	cmp	sl, r2
   194ac:	movhi	r1, #39	; 0x27
   194b0:	strbhi	r1, [r8, r2]
   194b4:	cmp	r4, sl
   194b8:	add	r9, r9, #1
   194bc:	movcc	r3, #92	; 0x5c
   194c0:	strbcc	r3, [r8, r4]
   194c4:	add	r4, r4, #1
   194c8:	cmp	r4, sl
   194cc:	ldr	r3, [sp, #36]	; 0x24
   194d0:	strbcc	r5, [r8, r4]
   194d4:	cmp	r6, #0
   194d8:	add	r4, r4, #1
   194dc:	moveq	r3, #0
   194e0:	str	r3, [sp, #36]	; 0x24
   194e4:	ldr	r3, [sp, #28]
   194e8:	cmn	r3, #1
   194ec:	bne	18f94 <__assert_fail@plt+0x75f4>
   194f0:	ldr	r3, [sp, #32]
   194f4:	ldrb	r6, [r3, r9]
   194f8:	adds	r6, r6, #0
   194fc:	movne	r6, #1
   19500:	cmp	r6, #0
   19504:	bne	18fa8 <__assert_fail@plt+0x7608>
   19508:	str	fp, [sp, #152]	; 0x98
   1950c:	mov	fp, r8
   19510:	cmp	r4, #0
   19514:	ldr	r1, [sp, #44]	; 0x2c
   19518:	movne	r3, #0
   1951c:	ldr	r8, [sp, #152]	; 0x98
   19520:	sub	r2, r8, #2
   19524:	clz	r2, r2
   19528:	lsr	r2, r2, #5
   1952c:	andeq	r3, r2, r1
   19530:	cmp	r3, #0
   19534:	bne	1a5f0 <__assert_fail@plt+0x8c50>
   19538:	eor	r3, r1, #1
   1953c:	ands	r2, r2, r3
   19540:	beq	1a51c <__assert_fail@plt+0x8b7c>
   19544:	ldr	r3, [sp, #68]	; 0x44
   19548:	cmp	r3, #0
   1954c:	beq	1a520 <__assert_fail@plt+0x8b80>
   19550:	ldr	r3, [sp, #36]	; 0x24
   19554:	cmp	r3, #0
   19558:	bne	1a5ac <__assert_fail@plt+0x8c0c>
   1955c:	ldr	r3, [sp, #72]	; 0x48
   19560:	adds	r3, r3, #0
   19564:	movne	r3, #1
   19568:	cmp	sl, #0
   1956c:	movne	r3, #0
   19570:	cmp	r3, #0
   19574:	ldreq	r2, [sp, #68]	; 0x44
   19578:	beq	1a520 <__assert_fail@plt+0x8b80>
   1957c:	ldr	r2, [sp, #72]	; 0x48
   19580:	str	r3, [sp, #68]	; 0x44
   19584:	movw	r3, #57168	; 0xdf50
   19588:	movt	r3, #2
   1958c:	mov	r1, #39	; 0x27
   19590:	mov	r4, #1
   19594:	ldr	sl, [sp, #72]	; 0x48
   19598:	mov	r8, #2
   1959c:	str	r3, [sp, #60]	; 0x3c
   195a0:	mov	r3, #0
   195a4:	strb	r1, [fp]
   195a8:	str	r3, [sp, #44]	; 0x2c
   195ac:	str	r4, [sp, #56]	; 0x38
   195b0:	str	r2, [sp, #72]	; 0x48
   195b4:	b	18f78 <__assert_fail@plt+0x75d8>
   195b8:	mov	r7, #0
   195bc:	cmp	fp, #2
   195c0:	beq	19ea0 <__assert_fail@plt+0x8500>
   195c4:	ldr	r2, [sp, #40]	; 0x28
   195c8:	ldr	r3, [sp, #56]	; 0x38
   195cc:	ldr	r1, [sp, #44]	; 0x2c
   195d0:	cmp	r3, #0
   195d4:	moveq	r3, #0
   195d8:	andne	r3, r2, r1
   195dc:	cmp	r3, #0
   195e0:	moveq	r5, #92	; 0x5c
   195e4:	moveq	r3, r5
   195e8:	bne	19eac <__assert_fail@plt+0x850c>
   195ec:	ldr	r2, [sp, #40]	; 0x28
   195f0:	cmp	r2, #0
   195f4:	bne	1a2e8 <__assert_fail@plt+0x8948>
   195f8:	mov	r6, #0
   195fc:	ldr	r3, [sp, #44]	; 0x2c
   19600:	cmp	r3, #0
   19604:	beq	19e98 <__assert_fail@plt+0x84f8>
   19608:	mov	r3, #0
   1960c:	b	19428 <__assert_fail@plt+0x7a88>
   19610:	mov	r7, #0
   19614:	cmp	fp, #2
   19618:	beq	19f10 <__assert_fail@plt+0x8570>
   1961c:	cmp	fp, #5
   19620:	beq	19ed4 <__assert_fail@plt+0x8534>
   19624:	sub	r3, fp, #2
   19628:	mov	r6, #0
   1962c:	clz	r3, r3
   19630:	mov	r5, #63	; 0x3f
   19634:	lsr	r3, r3, #5
   19638:	b	19418 <__assert_fail@plt+0x7a78>
   1963c:	mov	r7, #0
   19640:	cmp	fp, #2
   19644:	movne	r3, #0
   19648:	movne	r5, #39	; 0x27
   1964c:	strne	r6, [sp, #68]	; 0x44
   19650:	bne	19418 <__assert_fail@plt+0x7a78>
   19654:	ldr	r3, [sp, #44]	; 0x2c
   19658:	cmp	r3, #0
   1965c:	bne	1a318 <__assert_fail@plt+0x8978>
   19660:	ldr	r3, [sp, #72]	; 0x48
   19664:	cmp	sl, #0
   19668:	clz	r3, r3
   1966c:	lsr	r3, r3, #5
   19670:	moveq	r3, #0
   19674:	cmp	r3, #0
   19678:	bne	1a244 <__assert_fail@plt+0x88a4>
   1967c:	cmp	sl, r4
   19680:	movhi	r3, #39	; 0x27
   19684:	strbhi	r3, [r8, r4]
   19688:	add	r3, r4, #1
   1968c:	cmp	sl, r3
   19690:	movhi	r2, #92	; 0x5c
   19694:	strbhi	r2, [r8, r3]
   19698:	add	r3, r4, #2
   1969c:	cmp	sl, r3
   196a0:	bls	196ac <__assert_fail@plt+0x7d0c>
   196a4:	mov	r2, #39	; 0x27
   196a8:	strb	r2, [r8, r3]
   196ac:	mov	r3, #0
   196b0:	cmp	r7, #0
   196b4:	add	r4, r4, #3
   196b8:	mov	r5, #39	; 0x27
   196bc:	str	r3, [sp, #48]	; 0x30
   196c0:	str	r6, [sp, #68]	; 0x44
   196c4:	bne	19458 <__assert_fail@plt+0x7ab8>
   196c8:	ldr	r2, [sp, #48]	; 0x30
   196cc:	eor	r3, r3, #1
   196d0:	add	r9, r9, #1
   196d4:	and	r3, r3, r2
   196d8:	uxtb	r3, r3
   196dc:	cmp	r3, #0
   196e0:	beq	194c8 <__assert_fail@plt+0x7b28>
   196e4:	cmp	sl, r4
   196e8:	movhi	r3, #39	; 0x27
   196ec:	strbhi	r3, [r8, r4]
   196f0:	add	r3, r4, #1
   196f4:	add	r4, r4, #2
   196f8:	cmp	sl, r3
   196fc:	movhi	r2, #39	; 0x27
   19700:	strbhi	r2, [r8, r3]
   19704:	mov	r3, #0
   19708:	str	r3, [sp, #48]	; 0x30
   1970c:	b	194c8 <__assert_fail@plt+0x7b28>
   19710:	mov	r3, #118	; 0x76
   19714:	b	195ec <__assert_fail@plt+0x7c4c>
   19718:	mov	r3, #116	; 0x74
   1971c:	ldr	r2, [sp, #44]	; 0x2c
   19720:	cmp	fp, #2
   19724:	movne	r2, #0
   19728:	andeq	r2, r2, #1
   1972c:	cmp	r2, #0
   19730:	beq	195ec <__assert_fail@plt+0x7c4c>
   19734:	mov	fp, r8
   19738:	mov	r8, #2
   1973c:	ldr	r3, [sp, #40]	; 0x28
   19740:	cmp	r3, #0
   19744:	movne	r8, #4
   19748:	mov	lr, #0
   1974c:	mov	r0, fp
   19750:	ldr	r2, [sp, #32]
   19754:	ldr	r3, [sp, #156]	; 0x9c
   19758:	ldr	r1, [sp, #164]	; 0xa4
   1975c:	bic	ip, r3, #2
   19760:	ldr	r3, [sp, #28]
   19764:	stm	sp, {r8, ip, lr}
   19768:	ldr	ip, [sp, #168]	; 0xa8
   1976c:	str	r1, [sp, #12]
   19770:	mov	r1, sl
   19774:	str	ip, [sp, #16]
   19778:	bl	18e90 <__assert_fail@plt+0x74f0>
   1977c:	mov	r4, r0
   19780:	mov	r0, r4
   19784:	add	sp, sp, #116	; 0x74
   19788:	ldrd	r4, [sp]
   1978c:	ldrd	r6, [sp, #8]
   19790:	ldrd	r8, [sp, #16]
   19794:	ldrd	sl, [sp, #24]
   19798:	add	sp, sp, #32
   1979c:	pop	{pc}		; (ldr pc, [sp], #4)
   197a0:	mov	r5, #102	; 0x66
   197a4:	ldr	r2, [sp, #44]	; 0x2c
   197a8:	sub	r3, fp, #2
   197ac:	clz	r3, r3
   197b0:	lsr	r3, r3, #5
   197b4:	cmp	r2, #0
   197b8:	bne	1a214 <__assert_fail@plt+0x8874>
   197bc:	mov	r6, r2
   197c0:	b	194b4 <__assert_fail@plt+0x7b14>
   197c4:	mov	r5, #110	; 0x6e
   197c8:	mov	r6, #0
   197cc:	b	19458 <__assert_fail@plt+0x7ab8>
   197d0:	mov	r5, #98	; 0x62
   197d4:	b	197a4 <__assert_fail@plt+0x7e04>
   197d8:	mov	r5, #97	; 0x61
   197dc:	b	197a4 <__assert_fail@plt+0x7e04>
   197e0:	mov	r7, #0
   197e4:	mov	r6, #0
   197e8:	b	19608 <__assert_fail@plt+0x7c68>
   197ec:	mov	r5, #114	; 0x72
   197f0:	b	197c8 <__assert_fail@plt+0x7e28>
   197f4:	ldr	r3, [sp, #44]	; 0x2c
   197f8:	cmp	r3, #0
   197fc:	bne	1a58c <__assert_fail@plt+0x8bec>
   19800:	mov	r7, r3
   19804:	ldr	r3, [sp, #48]	; 0x30
   19808:	sub	r2, fp, #2
   1980c:	clz	r2, r2
   19810:	lsr	r2, r2, #5
   19814:	eor	r3, r3, #1
   19818:	ands	r3, r2, r3
   1981c:	beq	1a230 <__assert_fail@plt+0x8890>
   19820:	cmp	sl, r4
   19824:	movhi	r1, #39	; 0x27
   19828:	strbhi	r1, [r8, r4]
   1982c:	add	r1, r4, #1
   19830:	cmp	sl, r1
   19834:	movhi	r0, #36	; 0x24
   19838:	strbhi	r0, [r8, r1]
   1983c:	add	r1, r4, #2
   19840:	cmp	sl, r1
   19844:	movhi	r0, #39	; 0x27
   19848:	strbhi	r0, [r8, r1]
   1984c:	add	r1, r4, #3
   19850:	cmp	sl, r1
   19854:	bls	1a288 <__assert_fail@plt+0x88e8>
   19858:	mov	r4, r1
   1985c:	mov	r1, #92	; 0x5c
   19860:	mov	r0, r4
   19864:	str	r3, [sp, #48]	; 0x30
   19868:	strb	r1, [r8, r4]
   1986c:	cmp	fp, #2
   19870:	add	r4, r4, #1
   19874:	beq	1a2d8 <__assert_fail@plt+0x8938>
   19878:	ldr	r1, [sp, #28]
   1987c:	add	r3, r9, #1
   19880:	cmp	r3, r1
   19884:	bcs	1989c <__assert_fail@plt+0x7efc>
   19888:	ldr	r1, [sp, #32]
   1988c:	ldrb	r3, [r1, r3]
   19890:	sub	r3, r3, #48	; 0x30
   19894:	cmp	r3, #9
   19898:	bls	1a2f0 <__assert_fail@plt+0x8950>
   1989c:	mov	r5, #48	; 0x30
   198a0:	ldr	r3, [sp, #40]	; 0x28
   198a4:	eor	r3, r3, #1
   198a8:	orrs	r2, r2, r3
   198ac:	mov	r3, r6
   198b0:	moveq	r6, r2
   198b4:	beq	19428 <__assert_fail@plt+0x7a88>
   198b8:	mov	r6, #0
   198bc:	b	19450 <__assert_fail@plt+0x7ab0>
   198c0:	cmp	r9, #0
   198c4:	mov	r2, r7
   198c8:	bne	19e68 <__assert_fail@plt+0x84c8>
   198cc:	mov	r6, r7
   198d0:	mov	r3, r9
   198d4:	mov	r7, r2
   198d8:	b	19418 <__assert_fail@plt+0x7a78>
   198dc:	mov	r2, r7
   198e0:	mov	r6, r7
   198e4:	mov	r3, #0
   198e8:	mov	r7, r2
   198ec:	mov	r5, #32
   198f0:	b	19418 <__assert_fail@plt+0x7a78>
   198f4:	mov	r6, r7
   198f8:	b	19608 <__assert_fail@plt+0x7c68>
   198fc:	mov	r7, #0
   19900:	ldr	r3, [sp, #64]	; 0x40
   19904:	cmp	r3, #1
   19908:	bne	19f28 <__assert_fail@plt+0x8588>
   1990c:	bl	11778 <__ctype_b_loc@plt>
   19910:	ldr	r2, [r0]
   19914:	sxth	r3, r5
   19918:	lsl	r3, r3, #1
   1991c:	ldr	r1, [sp, #64]	; 0x40
   19920:	ldrh	r3, [r2, r3]
   19924:	mov	ip, r1
   19928:	and	r3, r3, #16384	; 0x4000
   1992c:	cmp	r3, #0
   19930:	ldr	r3, [sp, #40]	; 0x28
   19934:	movne	r6, #1
   19938:	moveq	r6, #0
   1993c:	movne	r2, #0
   19940:	andeq	r2, r3, #1
   19944:	cmp	r2, #0
   19948:	bne	1a270 <__assert_fail@plt+0x88d0>
   1994c:	sub	r3, fp, #2
   19950:	clz	r3, r3
   19954:	lsr	r3, r3, #5
   19958:	b	19418 <__assert_fail@plt+0x7a78>
   1995c:	cmp	r4, #0
   19960:	bne	1a600 <__assert_fail@plt+0x8c60>
   19964:	str	r4, [sp, #40]	; 0x28
   19968:	cmp	sl, #0
   1996c:	bne	1a630 <__assert_fail@plt+0x8c90>
   19970:	mov	r3, #1
   19974:	movw	r2, #57168	; 0xdf50
   19978:	movt	r2, #2
   1997c:	mov	r4, r3
   19980:	mov	r8, #2
   19984:	str	r3, [sp, #36]	; 0x24
   19988:	str	sl, [sp, #44]	; 0x2c
   1998c:	str	sl, [sp, #48]	; 0x30
   19990:	str	r3, [sp, #56]	; 0x38
   19994:	str	r2, [sp, #60]	; 0x3c
   19998:	str	sl, [sp, #68]	; 0x44
   1999c:	str	sl, [sp, #72]	; 0x48
   199a0:	b	18f78 <__assert_fail@plt+0x75d8>
   199a4:	ldr	r3, [sp, #32]
   199a8:	ldrb	r5, [r3, r9]
   199ac:	cmp	r5, #126	; 0x7e
   199b0:	ldrls	pc, [pc, r5, lsl #2]
   199b4:	b	19900 <__assert_fail@plt+0x7f60>
   199b8:	ldrdeq	r9, [r1], -ip
   199bc:	andeq	r9, r1, r0, lsl #18
   199c0:	andeq	r9, r1, r0, lsl #18
   199c4:	andeq	r9, r1, r0, lsl #18
   199c8:	andeq	r9, r1, r0, lsl #18
   199cc:	andeq	r9, r1, r0, lsl #18
   199d0:	andeq	r9, r1, r0, lsl #18
   199d4:	ldrdeq	r9, [r1], -r4
   199d8:	andeq	r9, r1, ip, asr #23
   199dc:	andeq	r9, r1, r8, lsl r7
   199e0:	andeq	r9, r1, r4, asr #23
   199e4:	andeq	r9, r1, r0, lsl r7
   199e8:			; <UNDEFINED> instruction: 0x00019bbc
   199ec:			; <UNDEFINED> instruction: 0x00019bb4
   199f0:	andeq	r9, r1, r0, lsl #18
   199f4:	andeq	r9, r1, r0, lsl #18
   199f8:	andeq	r9, r1, r0, lsl #18
   199fc:	andeq	r9, r1, r0, lsl #18
   19a00:	andeq	r9, r1, r0, lsl #18
   19a04:	andeq	r9, r1, r0, lsl #18
   19a08:	andeq	r9, r1, r0, lsl #18
   19a0c:	andeq	r9, r1, r0, lsl #18
   19a10:	andeq	r9, r1, r0, lsl #18
   19a14:	andeq	r9, r1, r0, lsl #18
   19a18:	andeq	r9, r1, r0, lsl #18
   19a1c:	andeq	r9, r1, r0, lsl #18
   19a20:	andeq	r9, r1, r0, lsl #18
   19a24:	andeq	r9, r1, r0, lsl #18
   19a28:	andeq	r9, r1, r0, lsl #18
   19a2c:	andeq	r9, r1, r0, lsl #18
   19a30:	andeq	r9, r1, r0, lsl #18
   19a34:	andeq	r9, r1, r0, lsl #18
   19a38:	andeq	r9, r1, r0, lsr ip
   19a3c:	andeq	r9, r1, r0, lsl ip
   19a40:	andeq	r9, r1, r0, lsl ip
   19a44:	andeq	r9, r1, r0, lsl #24
   19a48:	andeq	r9, r1, r0, lsl ip
   19a4c:	andeq	r9, r1, ip, asr #18
   19a50:	andeq	r9, r1, r0, lsl ip
   19a54:	andeq	r9, r1, r0, asr #12
   19a58:	andeq	r9, r1, r0, lsl ip
   19a5c:	andeq	r9, r1, r0, lsl ip
   19a60:	andeq	r9, r1, r0, lsl ip
   19a64:	andeq	r9, r1, ip, asr #18
   19a68:	andeq	r9, r1, ip, asr #18
   19a6c:	andeq	r9, r1, ip, asr #18
   19a70:	andeq	r9, r1, ip, asr #18
   19a74:	andeq	r9, r1, ip, asr #18
   19a78:	andeq	r9, r1, ip, asr #18
   19a7c:	andeq	r9, r1, ip, asr #18
   19a80:	andeq	r9, r1, ip, asr #18
   19a84:	andeq	r9, r1, ip, asr #18
   19a88:	andeq	r9, r1, ip, asr #18
   19a8c:	andeq	r9, r1, ip, asr #18
   19a90:	andeq	r9, r1, ip, asr #18
   19a94:	andeq	r9, r1, ip, asr #18
   19a98:	andeq	r9, r1, ip, asr #18
   19a9c:	andeq	r9, r1, ip, asr #18
   19aa0:	andeq	r9, r1, ip, asr #18
   19aa4:	andeq	r9, r1, r0, lsl ip
   19aa8:	andeq	r9, r1, r0, lsl ip
   19aac:	andeq	r9, r1, r0, lsl ip
   19ab0:	andeq	r9, r1, r0, lsl ip
   19ab4:	andeq	r9, r1, r4, lsl r6
   19ab8:	andeq	r9, r1, r0, lsl #18
   19abc:	andeq	r9, r1, ip, asr #18
   19ac0:	andeq	r9, r1, ip, asr #18
   19ac4:	andeq	r9, r1, ip, asr #18
   19ac8:	andeq	r9, r1, ip, asr #18
   19acc:	andeq	r9, r1, ip, asr #18
   19ad0:	andeq	r9, r1, ip, asr #18
   19ad4:	andeq	r9, r1, ip, asr #18
   19ad8:	andeq	r9, r1, ip, asr #18
   19adc:	andeq	r9, r1, ip, asr #18
   19ae0:	andeq	r9, r1, ip, asr #18
   19ae4:	andeq	r9, r1, ip, asr #18
   19ae8:	andeq	r9, r1, ip, asr #18
   19aec:	andeq	r9, r1, ip, asr #18
   19af0:	andeq	r9, r1, ip, asr #18
   19af4:	andeq	r9, r1, ip, asr #18
   19af8:	andeq	r9, r1, ip, asr #18
   19afc:	andeq	r9, r1, ip, asr #18
   19b00:	andeq	r9, r1, ip, asr #18
   19b04:	andeq	r9, r1, ip, asr #18
   19b08:	andeq	r9, r1, ip, asr #18
   19b0c:	andeq	r9, r1, ip, asr #18
   19b10:	andeq	r9, r1, ip, asr #18
   19b14:	andeq	r9, r1, ip, asr #18
   19b18:	andeq	r9, r1, ip, asr #18
   19b1c:	andeq	r9, r1, ip, asr #18
   19b20:	andeq	r9, r1, ip, asr #18
   19b24:	andeq	r9, r1, r0, lsl ip
   19b28:			; <UNDEFINED> instruction: 0x000195bc
   19b2c:	andeq	r9, r1, ip, asr #18
   19b30:	andeq	r9, r1, r0, lsl ip
   19b34:	andeq	r9, r1, ip, asr #18
   19b38:	andeq	r9, r1, r0, lsl ip
   19b3c:	andeq	r9, r1, ip, asr #18
   19b40:	andeq	r9, r1, ip, asr #18
   19b44:	andeq	r9, r1, ip, asr #18
   19b48:	andeq	r9, r1, ip, asr #18
   19b4c:	andeq	r9, r1, ip, asr #18
   19b50:	andeq	r9, r1, ip, asr #18
   19b54:	andeq	r9, r1, ip, asr #18
   19b58:	andeq	r9, r1, ip, asr #18
   19b5c:	andeq	r9, r1, ip, asr #18
   19b60:	andeq	r9, r1, ip, asr #18
   19b64:	andeq	r9, r1, ip, asr #18
   19b68:	andeq	r9, r1, ip, asr #18
   19b6c:	andeq	r9, r1, ip, asr #18
   19b70:	andeq	r9, r1, ip, asr #18
   19b74:	andeq	r9, r1, ip, asr #18
   19b78:	andeq	r9, r1, ip, asr #18
   19b7c:	andeq	r9, r1, ip, asr #18
   19b80:	andeq	r9, r1, ip, asr #18
   19b84:	andeq	r9, r1, ip, asr #18
   19b88:	andeq	r9, r1, ip, asr #18
   19b8c:	andeq	r9, r1, ip, asr #18
   19b90:	andeq	r9, r1, ip, asr #18
   19b94:	andeq	r9, r1, ip, asr #18
   19b98:	andeq	r9, r1, ip, asr #18
   19b9c:	andeq	r9, r1, ip, asr #18
   19ba0:	andeq	r9, r1, ip, asr #18
   19ba4:	andeq	r9, r1, r0, ror #7
   19ba8:	andeq	r9, r1, r0, lsl ip
   19bac:	andeq	r9, r1, r0, ror #7
   19bb0:	andeq	r9, r1, r0, lsl #24
   19bb4:	mov	r3, #114	; 0x72
   19bb8:	b	1971c <__assert_fail@plt+0x7d7c>
   19bbc:	mov	r3, #102	; 0x66
   19bc0:	b	195ec <__assert_fail@plt+0x7c4c>
   19bc4:	mov	r3, #110	; 0x6e
   19bc8:	b	1971c <__assert_fail@plt+0x7d7c>
   19bcc:	mov	r3, #98	; 0x62
   19bd0:	b	195ec <__assert_fail@plt+0x7c4c>
   19bd4:	mov	r3, #97	; 0x61
   19bd8:	b	195ec <__assert_fail@plt+0x7c4c>
   19bdc:	ldr	r3, [sp, #40]	; 0x28
   19be0:	cmp	r3, #0
   19be4:	bne	197f4 <__assert_fail@plt+0x7e54>
   19be8:	ldr	r3, [sp, #156]	; 0x9c
   19bec:	tst	r3, #1
   19bf0:	addne	r9, r9, #1
   19bf4:	bne	18f88 <__assert_fail@plt+0x75e8>
   19bf8:	ldr	r7, [sp, #40]	; 0x28
   19bfc:	b	195f8 <__assert_fail@plt+0x7c58>
   19c00:	sub	r3, fp, #2
   19c04:	clz	r3, r3
   19c08:	lsr	r3, r3, #5
   19c0c:	b	1940c <__assert_fail@plt+0x7a6c>
   19c10:	sub	r3, fp, #2
   19c14:	mov	r6, #0
   19c18:	clz	r3, r3
   19c1c:	lsr	r3, r3, #5
   19c20:	ldr	r2, [sp, #44]	; 0x2c
   19c24:	tst	r2, r3
   19c28:	beq	19418 <__assert_fail@plt+0x7a78>
   19c2c:	b	19734 <__assert_fail@plt+0x7d94>
   19c30:	sub	r3, fp, #2
   19c34:	clz	r3, r3
   19c38:	lsr	r3, r3, #5
   19c3c:	b	19c20 <__assert_fail@plt+0x8280>
   19c40:	ldr	r3, [sp, #52]	; 0x34
   19c44:	ldrb	r5, [r3]
   19c48:	cmp	r5, #126	; 0x7e
   19c4c:	ldrls	pc, [pc, r5, lsl #2]
   19c50:	b	198fc <__assert_fail@plt+0x7f5c>
   19c54:	strdeq	r9, [r1], -r4
   19c58:	strdeq	r9, [r1], -ip
   19c5c:	strdeq	r9, [r1], -ip
   19c60:	strdeq	r9, [r1], -ip
   19c64:	strdeq	r9, [r1], -ip
   19c68:	strdeq	r9, [r1], -ip
   19c6c:	strdeq	r9, [r1], -ip
   19c70:	ldrdeq	r9, [r1], -r8
   19c74:	ldrdeq	r9, [r1], -r0
   19c78:	andeq	r9, r1, ip, lsl #29
   19c7c:	andeq	r9, r1, r4, asr #15
   19c80:	andeq	r9, r1, r0, lsl #29
   19c84:	andeq	r9, r1, r0, lsr #15
   19c88:	andeq	r9, r1, ip, ror #15
   19c8c:	strdeq	r9, [r1], -ip
   19c90:	strdeq	r9, [r1], -ip
   19c94:	strdeq	r9, [r1], -ip
   19c98:	strdeq	r9, [r1], -ip
   19c9c:	strdeq	r9, [r1], -ip
   19ca0:	strdeq	r9, [r1], -ip
   19ca4:	strdeq	r9, [r1], -ip
   19ca8:	strdeq	r9, [r1], -ip
   19cac:	strdeq	r9, [r1], -ip
   19cb0:	strdeq	r9, [r1], -ip
   19cb4:	strdeq	r9, [r1], -ip
   19cb8:	strdeq	r9, [r1], -ip
   19cbc:	strdeq	r9, [r1], -ip
   19cc0:	strdeq	r9, [r1], -ip
   19cc4:	strdeq	r9, [r1], -ip
   19cc8:	strdeq	r9, [r1], -ip
   19ccc:	strdeq	r9, [r1], -ip
   19cd0:	strdeq	r9, [r1], -ip
   19cd4:	andeq	r9, r1, r8, ror lr
   19cd8:	andeq	r9, r1, r0, ror #15
   19cdc:	andeq	r9, r1, r0, ror #15
   19ce0:	andeq	r9, r1, ip, asr lr
   19ce4:	andeq	r9, r1, r0, ror #15
   19ce8:	andeq	r9, r1, r0, asr lr
   19cec:	andeq	r9, r1, r0, ror #15
   19cf0:	andeq	r9, r1, ip, lsr r6
   19cf4:	andeq	r9, r1, r0, ror #15
   19cf8:	andeq	r9, r1, r0, ror #15
   19cfc:	andeq	r9, r1, r0, ror #15
   19d00:	andeq	r9, r1, r0, asr lr
   19d04:	andeq	r9, r1, r0, asr lr
   19d08:	andeq	r9, r1, r0, asr lr
   19d0c:	andeq	r9, r1, r0, asr lr
   19d10:	andeq	r9, r1, r0, asr lr
   19d14:	andeq	r9, r1, r0, asr lr
   19d18:	andeq	r9, r1, r0, asr lr
   19d1c:	andeq	r9, r1, r0, asr lr
   19d20:	andeq	r9, r1, r0, asr lr
   19d24:	andeq	r9, r1, r0, asr lr
   19d28:	andeq	r9, r1, r0, asr lr
   19d2c:	andeq	r9, r1, r0, asr lr
   19d30:	andeq	r9, r1, r0, asr lr
   19d34:	andeq	r9, r1, r0, asr lr
   19d38:	andeq	r9, r1, r0, asr lr
   19d3c:	andeq	r9, r1, r0, asr lr
   19d40:	andeq	r9, r1, r0, ror #15
   19d44:	andeq	r9, r1, r0, ror #15
   19d48:	andeq	r9, r1, r0, ror #15
   19d4c:	andeq	r9, r1, r0, ror #15
   19d50:	andeq	r9, r1, r0, lsl r6
   19d54:	strdeq	r9, [r1], -ip
   19d58:	andeq	r9, r1, r0, asr lr
   19d5c:	andeq	r9, r1, r0, asr lr
   19d60:	andeq	r9, r1, r0, asr lr
   19d64:	andeq	r9, r1, r0, asr lr
   19d68:	andeq	r9, r1, r0, asr lr
   19d6c:	andeq	r9, r1, r0, asr lr
   19d70:	andeq	r9, r1, r0, asr lr
   19d74:	andeq	r9, r1, r0, asr lr
   19d78:	andeq	r9, r1, r0, asr lr
   19d7c:	andeq	r9, r1, r0, asr lr
   19d80:	andeq	r9, r1, r0, asr lr
   19d84:	andeq	r9, r1, r0, asr lr
   19d88:	andeq	r9, r1, r0, asr lr
   19d8c:	andeq	r9, r1, r0, asr lr
   19d90:	andeq	r9, r1, r0, asr lr
   19d94:	andeq	r9, r1, r0, asr lr
   19d98:	andeq	r9, r1, r0, asr lr
   19d9c:	andeq	r9, r1, r0, asr lr
   19da0:	andeq	r9, r1, r0, asr lr
   19da4:	andeq	r9, r1, r0, asr lr
   19da8:	andeq	r9, r1, r0, asr lr
   19dac:	andeq	r9, r1, r0, asr lr
   19db0:	andeq	r9, r1, r0, asr lr
   19db4:	andeq	r9, r1, r0, asr lr
   19db8:	andeq	r9, r1, r0, asr lr
   19dbc:	andeq	r9, r1, r0, asr lr
   19dc0:	andeq	r9, r1, r0, ror #15
   19dc4:			; <UNDEFINED> instruction: 0x000195b8
   19dc8:	andeq	r9, r1, r0, asr lr
   19dcc:	andeq	r9, r1, r0, ror #15
   19dd0:	andeq	r9, r1, r0, asr lr
   19dd4:	andeq	r9, r1, r0, ror #15
   19dd8:	andeq	r9, r1, r0, asr lr
   19ddc:	andeq	r9, r1, r0, asr lr
   19de0:	andeq	r9, r1, r0, asr lr
   19de4:	andeq	r9, r1, r0, asr lr
   19de8:	andeq	r9, r1, r0, asr lr
   19dec:	andeq	r9, r1, r0, asr lr
   19df0:	andeq	r9, r1, r0, asr lr
   19df4:	andeq	r9, r1, r0, asr lr
   19df8:	andeq	r9, r1, r0, asr lr
   19dfc:	andeq	r9, r1, r0, asr lr
   19e00:	andeq	r9, r1, r0, asr lr
   19e04:	andeq	r9, r1, r0, asr lr
   19e08:	andeq	r9, r1, r0, asr lr
   19e0c:	andeq	r9, r1, r0, asr lr
   19e10:	andeq	r9, r1, r0, asr lr
   19e14:	andeq	r9, r1, r0, asr lr
   19e18:	andeq	r9, r1, r0, asr lr
   19e1c:	andeq	r9, r1, r0, asr lr
   19e20:	andeq	r9, r1, r0, asr lr
   19e24:	andeq	r9, r1, r0, asr lr
   19e28:	andeq	r9, r1, r0, asr lr
   19e2c:	andeq	r9, r1, r0, asr lr
   19e30:	andeq	r9, r1, r0, asr lr
   19e34:	andeq	r9, r1, r0, asr lr
   19e38:	andeq	r9, r1, r0, asr lr
   19e3c:	andeq	r9, r1, r0, asr lr
   19e40:	ldrdeq	r9, [r1], -ip
   19e44:	andeq	r9, r1, r0, ror #15
   19e48:	ldrdeq	r9, [r1], -ip
   19e4c:	andeq	r9, r1, ip, asr lr
   19e50:	mov	r6, r7
   19e54:	mov	r7, #0
   19e58:	b	19608 <__assert_fail@plt+0x7c68>
   19e5c:	cmp	r9, #0
   19e60:	mov	r2, #0
   19e64:	beq	198cc <__assert_fail@plt+0x7f2c>
   19e68:	mov	r6, #0
   19e6c:	mov	r7, r2
   19e70:	mov	r3, r6
   19e74:	b	19428 <__assert_fail@plt+0x7a88>
   19e78:	mov	r2, #0
   19e7c:	b	198e0 <__assert_fail@plt+0x7f40>
   19e80:	mov	r7, #0
   19e84:	mov	r3, #118	; 0x76
   19e88:	b	195ec <__assert_fail@plt+0x7c4c>
   19e8c:	mov	r7, #0
   19e90:	mov	r3, #116	; 0x74
   19e94:	b	1971c <__assert_fail@plt+0x7d7c>
   19e98:	ldr	r3, [sp, #44]	; 0x2c
   19e9c:	b	19450 <__assert_fail@plt+0x7ab0>
   19ea0:	ldr	r3, [sp, #44]	; 0x2c
   19ea4:	cmp	r3, #0
   19ea8:	bne	1a318 <__assert_fail@plt+0x8978>
   19eac:	add	r9, r9, #1
   19eb0:	mov	r6, #0
   19eb4:	ldr	r3, [sp, #48]	; 0x30
   19eb8:	mov	r5, #92	; 0x5c
   19ebc:	b	196dc <__assert_fail@plt+0x7d3c>
   19ec0:	ldr	r3, [sp, #32]
   19ec4:	ldrb	r2, [r3, #1]
   19ec8:	adds	r2, r2, #0
   19ecc:	movne	r2, #1
   19ed0:	b	193f8 <__assert_fail@plt+0x7a58>
   19ed4:	ldr	r3, [sp, #156]	; 0x9c
   19ed8:	ands	r3, r3, #4
   19edc:	beq	19f04 <__assert_fail@plt+0x8564>
   19ee0:	ldr	r2, [sp, #28]
   19ee4:	add	r3, r9, #2
   19ee8:	cmp	r3, r2
   19eec:	bcs	19f00 <__assert_fail@plt+0x8560>
   19ef0:	ldr	r2, [sp, #52]	; 0x34
   19ef4:	ldrb	r5, [r2, #1]
   19ef8:	cmp	r5, #63	; 0x3f
   19efc:	beq	1a37c <__assert_fail@plt+0x89dc>
   19f00:	mov	r3, #0
   19f04:	mov	r5, #63	; 0x3f
   19f08:	mov	r6, r3
   19f0c:	b	19418 <__assert_fail@plt+0x7a78>
   19f10:	ldr	r3, [sp, #44]	; 0x2c
   19f14:	cmp	r3, #0
   19f18:	bne	1a318 <__assert_fail@plt+0x8978>
   19f1c:	mov	r6, r3
   19f20:	mov	r5, #63	; 0x3f
   19f24:	b	19450 <__assert_fail@plt+0x7ab0>
   19f28:	ldr	r1, [sp, #28]
   19f2c:	mov	r2, #0
   19f30:	mov	r3, #0
   19f34:	strd	r2, [sp, #104]	; 0x68
   19f38:	cmn	r1, #1
   19f3c:	bne	19f4c <__assert_fail@plt+0x85ac>
   19f40:	ldr	r0, [sp, #32]
   19f44:	bl	117a8 <strlen@plt>
   19f48:	str	r0, [sp, #28]
   19f4c:	str	r8, [sp, #76]	; 0x4c
   19f50:	mov	r3, #0
   19f54:	str	sl, [sp, #80]	; 0x50
   19f58:	ldr	sl, [sp, #32]
   19f5c:	str	r5, [sp, #84]	; 0x54
   19f60:	mov	r5, r3
   19f64:	ldr	r8, [sp, #44]	; 0x2c
   19f68:	str	r7, [sp, #88]	; 0x58
   19f6c:	str	r4, [sp, #92]	; 0x5c
   19f70:	ldr	r2, [sp, #28]
   19f74:	add	r4, r9, r5
   19f78:	add	r3, sp, #104	; 0x68
   19f7c:	add	r7, sl, r4
   19f80:	add	r0, sp, #100	; 0x64
   19f84:	mov	r1, r7
   19f88:	sub	r2, r2, r4
   19f8c:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   19f90:	subs	r1, r0, #0
   19f94:	beq	19fe0 <__assert_fail@plt+0x8640>
   19f98:	cmn	r1, #1
   19f9c:	beq	1a358 <__assert_fail@plt+0x89b8>
   19fa0:	cmn	r1, #2
   19fa4:	beq	1a478 <__assert_fail@plt+0x8ad8>
   19fa8:	cmp	fp, #2
   19fac:	movne	r3, #0
   19fb0:	andeq	r3, r8, #1
   19fb4:	cmp	r3, #0
   19fb8:	bne	1a144 <__assert_fail@plt+0x87a4>
   19fbc:	ldr	r0, [sp, #100]	; 0x64
   19fc0:	add	r5, r5, r1
   19fc4:	bl	11664 <iswprint@plt>
   19fc8:	cmp	r0, #0
   19fcc:	add	r0, sp, #104	; 0x68
   19fd0:	moveq	r6, #0
   19fd4:	bl	11604 <mbsinit@plt>
   19fd8:	cmp	r0, #0
   19fdc:	beq	19f70 <__assert_fail@plt+0x85d0>
   19fe0:	ldr	r3, [sp, #40]	; 0x28
   19fe4:	mov	ip, r5
   19fe8:	eor	r2, r6, #1
   19fec:	ldr	r8, [sp, #76]	; 0x4c
   19ff0:	ldr	sl, [sp, #80]	; 0x50
   19ff4:	and	r2, r2, r3
   19ff8:	ldr	r5, [sp, #84]	; 0x54
   19ffc:	ldr	r7, [sp, #88]	; 0x58
   1a000:	ldr	r4, [sp, #92]	; 0x5c
   1a004:	cmp	ip, #1
   1a008:	bls	19944 <__assert_fail@plt+0x7fa4>
   1a00c:	add	r1, r9, ip
   1a010:	mov	r0, #39	; 0x27
   1a014:	ldr	lr, [sp, #52]	; 0x34
   1a018:	mov	ip, #0
   1a01c:	str	r6, [sp, #52]	; 0x34
   1a020:	ldr	r6, [sp, #48]	; 0x30
   1a024:	b	1a0e0 <__assert_fail@plt+0x8740>
   1a028:	ldr	ip, [sp, #44]	; 0x2c
   1a02c:	sub	r3, fp, #2
   1a030:	clz	r3, r3
   1a034:	lsr	r3, r3, #5
   1a038:	cmp	ip, #0
   1a03c:	bne	1a250 <__assert_fail@plt+0x88b0>
   1a040:	eor	ip, r6, #1
   1a044:	ands	r3, r3, ip
   1a048:	beq	1a078 <__assert_fail@plt+0x86d8>
   1a04c:	cmp	sl, r4
   1a050:	add	ip, r4, #1
   1a054:	strbhi	r0, [r8, r4]
   1a058:	cmp	sl, ip
   1a05c:	movhi	r6, #36	; 0x24
   1a060:	strbhi	r6, [r8, ip]
   1a064:	add	ip, r4, #2
   1a068:	mov	r6, r3
   1a06c:	cmp	sl, ip
   1a070:	add	r4, r4, #3
   1a074:	strbhi	r0, [r8, ip]
   1a078:	cmp	sl, r4
   1a07c:	movhi	r3, #92	; 0x5c
   1a080:	strbhi	r3, [r8, r4]
   1a084:	add	r3, r4, #1
   1a088:	cmp	sl, r3
   1a08c:	bls	1a09c <__assert_fail@plt+0x86fc>
   1a090:	lsr	ip, r5, #6
   1a094:	add	ip, ip, #48	; 0x30
   1a098:	strb	ip, [r8, r3]
   1a09c:	add	r3, r4, #2
   1a0a0:	cmp	sl, r3
   1a0a4:	bls	1a0b4 <__assert_fail@plt+0x8714>
   1a0a8:	ubfx	ip, r5, #3, #3
   1a0ac:	add	ip, ip, #48	; 0x30
   1a0b0:	strb	ip, [r8, r3]
   1a0b4:	add	r9, r9, #1
   1a0b8:	and	r5, r5, #7
   1a0bc:	cmp	r9, r1
   1a0c0:	add	r5, r5, #48	; 0x30
   1a0c4:	add	r4, r4, #3
   1a0c8:	bcs	1a27c <__assert_fail@plt+0x88dc>
   1a0cc:	mov	ip, r2
   1a0d0:	cmp	sl, r4
   1a0d4:	strbhi	r5, [r8, r4]
   1a0d8:	add	r4, r4, #1
   1a0dc:	ldrb	r5, [lr, #1]!
   1a0e0:	cmp	r2, #0
   1a0e4:	bne	1a028 <__assert_fail@plt+0x8688>
   1a0e8:	eor	r3, ip, #1
   1a0ec:	cmp	r7, #0
   1a0f0:	and	r3, r3, r6
   1a0f4:	uxtb	r3, r3
   1a0f8:	beq	1a10c <__assert_fail@plt+0x876c>
   1a0fc:	cmp	sl, r4
   1a100:	movhi	r7, #92	; 0x5c
   1a104:	strbhi	r7, [r8, r4]
   1a108:	add	r4, r4, #1
   1a10c:	add	r9, r9, #1
   1a110:	cmp	r9, r1
   1a114:	bcs	1a264 <__assert_fail@plt+0x88c4>
   1a118:	cmp	r3, #0
   1a11c:	beq	1a29c <__assert_fail@plt+0x88fc>
   1a120:	cmp	sl, r4
   1a124:	add	r3, r4, #1
   1a128:	mov	r7, #0
   1a12c:	strbhi	r0, [r8, r4]
   1a130:	cmp	sl, r3
   1a134:	add	r4, r4, #2
   1a138:	mov	r6, r7
   1a13c:	strbhi	r0, [r8, r3]
   1a140:	b	1a0d0 <__assert_fail@plt+0x8730>
   1a144:	cmp	r1, #1
   1a148:	beq	19fbc <__assert_fail@plt+0x861c>
   1a14c:	add	r2, r4, #1
   1a150:	add	r3, sl, r1
   1a154:	add	r2, sl, r2
   1a158:	add	r4, r3, r4
   1a15c:	ldrb	r3, [r2], #1
   1a160:	sub	r3, r3, #91	; 0x5b
   1a164:	cmp	r3, #33	; 0x21
   1a168:	ldrls	pc, [pc, r3, lsl #2]
   1a16c:	b	1a1f8 <__assert_fail@plt+0x8858>
   1a170:	andeq	sl, r1, r4, lsl #4
   1a174:	andeq	sl, r1, r4, lsl #4
   1a178:	strdeq	sl, [r1], -r8
   1a17c:	andeq	sl, r1, r4, lsl #4
   1a180:	strdeq	sl, [r1], -r8
   1a184:	andeq	sl, r1, r4, lsl #4
   1a188:	strdeq	sl, [r1], -r8
   1a18c:	strdeq	sl, [r1], -r8
   1a190:	strdeq	sl, [r1], -r8
   1a194:	strdeq	sl, [r1], -r8
   1a198:	strdeq	sl, [r1], -r8
   1a19c:	strdeq	sl, [r1], -r8
   1a1a0:	strdeq	sl, [r1], -r8
   1a1a4:	strdeq	sl, [r1], -r8
   1a1a8:	strdeq	sl, [r1], -r8
   1a1ac:	strdeq	sl, [r1], -r8
   1a1b0:	strdeq	sl, [r1], -r8
   1a1b4:	strdeq	sl, [r1], -r8
   1a1b8:	strdeq	sl, [r1], -r8
   1a1bc:	strdeq	sl, [r1], -r8
   1a1c0:	strdeq	sl, [r1], -r8
   1a1c4:	strdeq	sl, [r1], -r8
   1a1c8:	strdeq	sl, [r1], -r8
   1a1cc:	strdeq	sl, [r1], -r8
   1a1d0:	strdeq	sl, [r1], -r8
   1a1d4:	strdeq	sl, [r1], -r8
   1a1d8:	strdeq	sl, [r1], -r8
   1a1dc:	strdeq	sl, [r1], -r8
   1a1e0:	strdeq	sl, [r1], -r8
   1a1e4:	strdeq	sl, [r1], -r8
   1a1e8:	strdeq	sl, [r1], -r8
   1a1ec:	strdeq	sl, [r1], -r8
   1a1f0:	strdeq	sl, [r1], -r8
   1a1f4:	andeq	sl, r1, r4, lsl #4
   1a1f8:	cmp	r4, r2
   1a1fc:	bne	1a15c <__assert_fail@plt+0x87bc>
   1a200:	b	19fbc <__assert_fail@plt+0x861c>
   1a204:	mov	r8, #2
   1a208:	ldr	fp, [sp, #76]	; 0x4c
   1a20c:	ldr	sl, [sp, #80]	; 0x50
   1a210:	b	1973c <__assert_fail@plt+0x7d9c>
   1a214:	ldr	r2, [sp, #40]	; 0x28
   1a218:	str	fp, [sp, #152]	; 0x98
   1a21c:	mov	fp, r8
   1a220:	ldr	r8, [sp, #152]	; 0x98
   1a224:	and	r2, r2, r3
   1a228:	str	r2, [sp, #40]	; 0x28
   1a22c:	b	1973c <__assert_fail@plt+0x7d9c>
   1a230:	cmp	sl, r4
   1a234:	movls	r0, r4
   1a238:	bls	1986c <__assert_fail@plt+0x7ecc>
   1a23c:	ldr	r3, [sp, #48]	; 0x30
   1a240:	b	1985c <__assert_fail@plt+0x7ebc>
   1a244:	str	sl, [sp, #72]	; 0x48
   1a248:	ldr	sl, [sp, #44]	; 0x2c
   1a24c:	b	196ac <__assert_fail@plt+0x7d0c>
   1a250:	str	r3, [sp, #40]	; 0x28
   1a254:	str	fp, [sp, #152]	; 0x98
   1a258:	mov	fp, r8
   1a25c:	ldr	r8, [sp, #152]	; 0x98
   1a260:	b	1973c <__assert_fail@plt+0x7d9c>
   1a264:	str	r6, [sp, #48]	; 0x30
   1a268:	ldr	r6, [sp, #52]	; 0x34
   1a26c:	b	196dc <__assert_fail@plt+0x7d3c>
   1a270:	mov	r6, #0
   1a274:	ldr	r2, [sp, #40]	; 0x28
   1a278:	b	1a00c <__assert_fail@plt+0x866c>
   1a27c:	str	r6, [sp, #48]	; 0x30
   1a280:	ldr	r6, [sp, #52]	; 0x34
   1a284:	b	194c8 <__assert_fail@plt+0x7b28>
   1a288:	add	r4, r4, #4
   1a28c:	mov	r6, #0
   1a290:	str	r3, [sp, #48]	; 0x30
   1a294:	mov	r5, #48	; 0x30
   1a298:	b	19450 <__assert_fail@plt+0x7ab0>
   1a29c:	mov	r7, r3
   1a2a0:	b	1a0d0 <__assert_fail@plt+0x8730>
   1a2a4:	mov	r3, #1
   1a2a8:	movw	r2, #57148	; 0xdf3c
   1a2ac:	movt	r2, #2
   1a2b0:	mov	r4, r3
   1a2b4:	str	r3, [sp, #36]	; 0x24
   1a2b8:	str	r3, [sp, #40]	; 0x28
   1a2bc:	str	sl, [sp, #44]	; 0x2c
   1a2c0:	str	sl, [sp, #48]	; 0x30
   1a2c4:	str	r3, [sp, #56]	; 0x38
   1a2c8:	str	r2, [sp, #60]	; 0x3c
   1a2cc:	str	sl, [sp, #68]	; 0x44
   1a2d0:	str	sl, [sp, #72]	; 0x48
   1a2d4:	b	18f78 <__assert_fail@plt+0x75d8>
   1a2d8:	mov	r3, r6
   1a2dc:	mov	r5, #48	; 0x30
   1a2e0:	mov	r6, #0
   1a2e4:	b	19450 <__assert_fail@plt+0x7ab0>
   1a2e8:	mov	r5, r3
   1a2ec:	b	197c8 <__assert_fail@plt+0x7e28>
   1a2f0:	cmp	sl, r4
   1a2f4:	mov	r5, #48	; 0x30
   1a2f8:	movhi	r3, #48	; 0x30
   1a2fc:	strbhi	r3, [r8, r4]
   1a300:	add	r3, r0, #2
   1a304:	add	r4, r0, #3
   1a308:	cmp	sl, r3
   1a30c:	movhi	r1, #48	; 0x30
   1a310:	strbhi	r1, [r8, r3]
   1a314:	b	198a0 <__assert_fail@plt+0x7f00>
   1a318:	str	fp, [sp, #152]	; 0x98
   1a31c:	mov	fp, r8
   1a320:	ldr	r8, [sp, #152]	; 0x98
   1a324:	b	1973c <__assert_fail@plt+0x7d9c>
   1a328:	ldr	r3, [sp, #164]	; 0xa4
   1a32c:	ldrb	r3, [r3]
   1a330:	cmp	r3, #0
   1a334:	beq	18f48 <__assert_fail@plt+0x75a8>
   1a338:	ldr	r2, [sp, #164]	; 0xa4
   1a33c:	cmp	sl, r4
   1a340:	strbhi	r3, [fp, r4]
   1a344:	add	r4, r4, #1
   1a348:	ldrb	r3, [r2, #1]!
   1a34c:	cmp	r3, #0
   1a350:	bne	1a33c <__assert_fail@plt+0x899c>
   1a354:	b	18f48 <__assert_fail@plt+0x75a8>
   1a358:	mov	ip, r5
   1a35c:	mov	r6, #0
   1a360:	ldr	r2, [sp, #40]	; 0x28
   1a364:	ldr	r8, [sp, #76]	; 0x4c
   1a368:	ldr	sl, [sp, #80]	; 0x50
   1a36c:	ldr	r5, [sp, #84]	; 0x54
   1a370:	ldr	r7, [sp, #88]	; 0x58
   1a374:	ldr	r4, [sp, #92]	; 0x5c
   1a378:	b	1a004 <__assert_fail@plt+0x8664>
   1a37c:	ldr	r2, [sp, #32]
   1a380:	ldrb	r1, [r2, r3]
   1a384:	sub	r2, r1, #33	; 0x21
   1a388:	cmp	r2, #29
   1a38c:	ldrls	pc, [pc, r2, lsl #2]
   1a390:	b	1a46c <__assert_fail@plt+0x8acc>
   1a394:	andeq	sl, r1, ip, lsl #8
   1a398:	andeq	sl, r1, ip, ror #8
   1a39c:	andeq	sl, r1, ip, ror #8
   1a3a0:	andeq	sl, r1, ip, ror #8
   1a3a4:	andeq	sl, r1, ip, ror #8
   1a3a8:	andeq	sl, r1, ip, ror #8
   1a3ac:	andeq	sl, r1, ip, lsl #8
   1a3b0:	andeq	sl, r1, ip, lsl #8
   1a3b4:	andeq	sl, r1, ip, lsl #8
   1a3b8:	andeq	sl, r1, ip, ror #8
   1a3bc:	andeq	sl, r1, ip, ror #8
   1a3c0:	andeq	sl, r1, ip, ror #8
   1a3c4:	andeq	sl, r1, ip, lsl #8
   1a3c8:	andeq	sl, r1, ip, ror #8
   1a3cc:	andeq	sl, r1, ip, lsl #8
   1a3d0:	andeq	sl, r1, ip, ror #8
   1a3d4:	andeq	sl, r1, ip, ror #8
   1a3d8:	andeq	sl, r1, ip, ror #8
   1a3dc:	andeq	sl, r1, ip, ror #8
   1a3e0:	andeq	sl, r1, ip, ror #8
   1a3e4:	andeq	sl, r1, ip, ror #8
   1a3e8:	andeq	sl, r1, ip, ror #8
   1a3ec:	andeq	sl, r1, ip, ror #8
   1a3f0:	andeq	sl, r1, ip, ror #8
   1a3f4:	andeq	sl, r1, ip, ror #8
   1a3f8:	andeq	sl, r1, ip, ror #8
   1a3fc:	andeq	sl, r1, ip, ror #8
   1a400:	andeq	sl, r1, ip, lsl #8
   1a404:	andeq	sl, r1, ip, lsl #8
   1a408:	andeq	sl, r1, ip, lsl #8
   1a40c:	ldr	r2, [sp, #44]	; 0x2c
   1a410:	cmp	r2, #0
   1a414:	bne	1a570 <__assert_fail@plt+0x8bd0>
   1a418:	cmp	sl, r4
   1a41c:	mov	r5, r1
   1a420:	movhi	r2, #63	; 0x3f
   1a424:	mov	r9, r3
   1a428:	strbhi	r2, [r8, r4]
   1a42c:	add	r2, r4, #1
   1a430:	cmp	sl, r2
   1a434:	movhi	r0, #34	; 0x22
   1a438:	strbhi	r0, [r8, r2]
   1a43c:	add	r2, r4, #2
   1a440:	cmp	sl, r2
   1a444:	movhi	r0, #34	; 0x22
   1a448:	strbhi	r0, [r8, r2]
   1a44c:	add	r2, r4, #3
   1a450:	add	r4, r4, #4
   1a454:	cmp	sl, r2
   1a458:	movhi	r0, #63	; 0x3f
   1a45c:	strbhi	r0, [r8, r2]
   1a460:	mov	r2, #0
   1a464:	mov	r6, r2
   1a468:	b	198a0 <__assert_fail@plt+0x7f00>
   1a46c:	mov	r3, #0
   1a470:	mov	r6, r3
   1a474:	b	19418 <__assert_fail@plt+0x7a78>
   1a478:	ldr	r0, [sp, #28]
   1a47c:	mov	r1, r4
   1a480:	mov	r2, r7
   1a484:	mov	r3, r5
   1a488:	mov	ip, r5
   1a48c:	ldr	r8, [sp, #76]	; 0x4c
   1a490:	ldr	sl, [sp, #80]	; 0x50
   1a494:	cmp	r1, r0
   1a498:	ldr	r5, [sp, #84]	; 0x54
   1a49c:	ldr	r7, [sp, #88]	; 0x58
   1a4a0:	ldr	r4, [sp, #92]	; 0x5c
   1a4a4:	bcs	1a4d8 <__assert_fail@plt+0x8b38>
   1a4a8:	ldrb	r6, [r2]
   1a4ac:	cmp	r6, #0
   1a4b0:	bne	1a4c4 <__assert_fail@plt+0x8b24>
   1a4b4:	b	1a5f8 <__assert_fail@plt+0x8c58>
   1a4b8:	ldrb	r6, [r2, #1]!
   1a4bc:	cmp	r6, #0
   1a4c0:	beq	1a580 <__assert_fail@plt+0x8be0>
   1a4c4:	add	r3, r3, #1
   1a4c8:	add	r1, r9, r3
   1a4cc:	cmp	r1, r0
   1a4d0:	bcc	1a4b8 <__assert_fail@plt+0x8b18>
   1a4d4:	mov	ip, r3
   1a4d8:	mov	r6, #0
   1a4dc:	ldr	r2, [sp, #40]	; 0x28
   1a4e0:	b	1a004 <__assert_fail@plt+0x8664>
   1a4e4:	mov	r3, #1
   1a4e8:	mov	r2, #0
   1a4ec:	mov	r4, r2
   1a4f0:	str	r3, [sp, #36]	; 0x24
   1a4f4:	str	r3, [sp, #40]	; 0x28
   1a4f8:	str	r3, [sp, #44]	; 0x2c
   1a4fc:	str	r2, [sp, #48]	; 0x30
   1a500:	str	r3, [sp, #56]	; 0x38
   1a504:	movw	r3, #57148	; 0xdf3c
   1a508:	movt	r3, #2
   1a50c:	str	r3, [sp, #60]	; 0x3c
   1a510:	str	r2, [sp, #68]	; 0x44
   1a514:	str	r2, [sp, #72]	; 0x48
   1a518:	b	18f78 <__assert_fail@plt+0x75d8>
   1a51c:	mov	r2, r3
   1a520:	ldr	r3, [sp, #60]	; 0x3c
   1a524:	cmp	r3, #0
   1a528:	moveq	r2, #0
   1a52c:	andne	r2, r2, #1
   1a530:	cmp	r2, #0
   1a534:	beq	1a560 <__assert_fail@plt+0x8bc0>
   1a538:	mov	r2, r3
   1a53c:	ldrb	r3, [r3]
   1a540:	cmp	r3, #0
   1a544:	beq	1a560 <__assert_fail@plt+0x8bc0>
   1a548:	cmp	sl, r4
   1a54c:	strbhi	r3, [fp, r4]
   1a550:	add	r4, r4, #1
   1a554:	ldrb	r3, [r2, #1]!
   1a558:	cmp	r3, #0
   1a55c:	bne	1a548 <__assert_fail@plt+0x8ba8>
   1a560:	cmp	sl, r4
   1a564:	movhi	r3, #0
   1a568:	strbhi	r3, [fp, r4]
   1a56c:	b	19780 <__assert_fail@plt+0x7de0>
   1a570:	str	fp, [sp, #152]	; 0x98
   1a574:	mov	fp, r8
   1a578:	ldr	r8, [sp, #152]	; 0x98
   1a57c:	b	19748 <__assert_fail@plt+0x7da8>
   1a580:	mov	ip, r3
   1a584:	ldr	r2, [sp, #40]	; 0x28
   1a588:	b	1a004 <__assert_fail@plt+0x8664>
   1a58c:	str	fp, [sp, #152]	; 0x98
   1a590:	mov	fp, r8
   1a594:	ldr	r8, [sp, #152]	; 0x98
   1a598:	sub	r3, r8, #2
   1a59c:	clz	r3, r3
   1a5a0:	lsr	r3, r3, #5
   1a5a4:	str	r3, [sp, #40]	; 0x28
   1a5a8:	b	1973c <__assert_fail@plt+0x7d9c>
   1a5ac:	mov	ip, #5
   1a5b0:	ldr	r3, [sp, #28]
   1a5b4:	str	ip, [sp]
   1a5b8:	ldr	r2, [sp, #156]	; 0x9c
   1a5bc:	ldr	ip, [sp, #164]	; 0xa4
   1a5c0:	ldr	r0, [sp, #160]	; 0xa0
   1a5c4:	str	r2, [sp, #4]
   1a5c8:	ldr	r2, [sp, #32]
   1a5cc:	ldr	r1, [sp, #72]	; 0x48
   1a5d0:	str	ip, [sp, #12]
   1a5d4:	ldr	ip, [sp, #168]	; 0xa8
   1a5d8:	str	r0, [sp, #8]
   1a5dc:	mov	r0, fp
   1a5e0:	str	ip, [sp, #16]
   1a5e4:	bl	18e90 <__assert_fail@plt+0x74f0>
   1a5e8:	mov	r4, r0
   1a5ec:	b	19780 <__assert_fail@plt+0x7de0>
   1a5f0:	mov	r8, #2
   1a5f4:	b	1973c <__assert_fail@plt+0x7d9c>
   1a5f8:	ldr	r2, [sp, #40]	; 0x28
   1a5fc:	b	1a004 <__assert_fail@plt+0x8664>
   1a600:	mov	r3, #0
   1a604:	mov	r2, #1
   1a608:	mov	r4, r3
   1a60c:	strd	r2, [sp, #36]	; 0x24
   1a610:	strd	r2, [sp, #44]	; 0x2c
   1a614:	str	r2, [sp, #56]	; 0x38
   1a618:	str	r3, [sp, #68]	; 0x44
   1a61c:	str	r3, [sp, #72]	; 0x48
   1a620:	movw	r3, #57168	; 0xdf50
   1a624:	movt	r3, #2
   1a628:	str	r3, [sp, #60]	; 0x3c
   1a62c:	b	18f78 <__assert_fail@plt+0x75d8>
   1a630:	mov	r3, #0
   1a634:	mov	r1, #1
   1a638:	mov	r2, r3
   1a63c:	str	r1, [sp, #36]	; 0x24
   1a640:	str	r3, [sp, #48]	; 0x30
   1a644:	str	sl, [sp, #72]	; 0x48
   1a648:	b	19580 <__assert_fail@plt+0x7be0>
   1a64c:	bl	11964 <abort@plt>
   1a650:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a654:	mov	r4, r0
   1a658:	mov	r5, r3
   1a65c:	strd	r6, [sp, #8]
   1a660:	movw	r7, #61888	; 0xf1c0
   1a664:	movt	r7, #3
   1a668:	strd	r8, [sp, #16]
   1a66c:	strd	sl, [sp, #24]
   1a670:	mov	sl, r1
   1a674:	mov	fp, r2
   1a678:	str	lr, [sp, #32]
   1a67c:	sub	sp, sp, #60	; 0x3c
   1a680:	bl	117d8 <__errno_location@plt>
   1a684:	mov	r8, r0
   1a688:	cmn	r4, #-2147483647	; 0x80000001
   1a68c:	ldr	r6, [r7]
   1a690:	movne	r0, #0
   1a694:	moveq	r0, #1
   1a698:	ldr	r3, [r8]
   1a69c:	orrs	r0, r0, r4, lsr #31
   1a6a0:	str	r3, [sp, #28]
   1a6a4:	bne	1a834 <__assert_fail@plt+0x8e94>
   1a6a8:	ldr	r3, [r7, #4]
   1a6ac:	cmp	r3, r4
   1a6b0:	bgt	1a710 <__assert_fail@plt+0x8d70>
   1a6b4:	add	r1, r7, #8
   1a6b8:	sub	r2, r4, r3
   1a6bc:	str	r3, [sp, #52]	; 0x34
   1a6c0:	cmp	r6, r1
   1a6c4:	add	r2, r2, #1
   1a6c8:	beq	1a80c <__assert_fail@plt+0x8e6c>
   1a6cc:	mov	r1, #8
   1a6d0:	mov	r0, r6
   1a6d4:	mvn	r3, #-2147483648	; 0x80000000
   1a6d8:	str	r1, [sp]
   1a6dc:	add	r1, sp, #52	; 0x34
   1a6e0:	bl	1b704 <__assert_fail@plt+0x9d64>
   1a6e4:	mov	r6, r0
   1a6e8:	str	r0, [r7]
   1a6ec:	ldr	r0, [r7, #4]
   1a6f0:	mov	r1, #0
   1a6f4:	ldr	r2, [sp, #52]	; 0x34
   1a6f8:	sub	r2, r2, r0
   1a6fc:	add	r0, r6, r0, lsl #3
   1a700:	lsl	r2, r2, #3
   1a704:	bl	11814 <memset@plt>
   1a708:	ldr	r3, [sp, #52]	; 0x34
   1a70c:	str	r3, [r7, #4]
   1a710:	ldr	r1, [r5, #4]
   1a714:	add	r0, r6, r4, lsl #3
   1a718:	add	ip, r5, #8
   1a71c:	mov	r3, fp
   1a720:	mov	r2, sl
   1a724:	ldr	r7, [r0, #4]
   1a728:	str	r0, [sp, #36]	; 0x24
   1a72c:	str	ip, [sp, #40]	; 0x28
   1a730:	orr	r0, r1, #1
   1a734:	ldr	r9, [r6, r4, lsl #3]
   1a738:	str	ip, [sp, #8]
   1a73c:	ldr	lr, [r5, #44]	; 0x2c
   1a740:	str	r0, [sp, #4]
   1a744:	ldr	ip, [r5]
   1a748:	mov	r1, r9
   1a74c:	str	ip, [sp, #32]
   1a750:	ldr	ip, [r5, #40]	; 0x28
   1a754:	str	ip, [sp, #12]
   1a758:	ldr	ip, [sp, #32]
   1a75c:	str	lr, [sp, #16]
   1a760:	str	r0, [sp, #44]	; 0x2c
   1a764:	mov	r0, r7
   1a768:	str	ip, [sp]
   1a76c:	bl	18e90 <__assert_fail@plt+0x74f0>
   1a770:	cmp	r9, r0
   1a774:	bhi	1a7e4 <__assert_fail@plt+0x8e44>
   1a778:	add	r9, r0, #1
   1a77c:	movw	r3, #62116	; 0xf2a4
   1a780:	movt	r3, #3
   1a784:	cmp	r7, r3
   1a788:	str	r9, [r6, r4, lsl #3]
   1a78c:	beq	1a798 <__assert_fail@plt+0x8df8>
   1a790:	mov	r0, r7
   1a794:	bl	1c734 <__assert_fail@plt+0xad94>
   1a798:	mov	r0, r9
   1a79c:	bl	1b554 <__assert_fail@plt+0x9bb4>
   1a7a0:	ldr	ip, [r5]
   1a7a4:	mov	r3, fp
   1a7a8:	mov	r2, sl
   1a7ac:	mov	r1, r9
   1a7b0:	mov	r7, r0
   1a7b4:	ldr	lr, [sp, #36]	; 0x24
   1a7b8:	ldr	r4, [r5, #40]	; 0x28
   1a7bc:	str	r0, [lr, #4]
   1a7c0:	ldr	lr, [r5, #44]	; 0x2c
   1a7c4:	str	ip, [sp]
   1a7c8:	ldr	ip, [sp, #44]	; 0x2c
   1a7cc:	str	ip, [sp, #4]
   1a7d0:	ldr	ip, [sp, #40]	; 0x28
   1a7d4:	str	r4, [sp, #12]
   1a7d8:	str	lr, [sp, #16]
   1a7dc:	str	ip, [sp, #8]
   1a7e0:	bl	18e90 <__assert_fail@plt+0x74f0>
   1a7e4:	ldr	r3, [sp, #28]
   1a7e8:	mov	r0, r7
   1a7ec:	str	r3, [r8]
   1a7f0:	add	sp, sp, #60	; 0x3c
   1a7f4:	ldrd	r4, [sp]
   1a7f8:	ldrd	r6, [sp, #8]
   1a7fc:	ldrd	r8, [sp, #16]
   1a800:	ldrd	sl, [sp, #24]
   1a804:	add	sp, sp, #32
   1a808:	pop	{pc}		; (ldr pc, [sp], #4)
   1a80c:	mov	r1, #8
   1a810:	mvn	r3, #-2147483648	; 0x80000000
   1a814:	str	r1, [sp]
   1a818:	add	r1, sp, #52	; 0x34
   1a81c:	bl	1b704 <__assert_fail@plt+0x9d64>
   1a820:	ldrd	r2, [r7, #8]
   1a824:	mov	r6, r0
   1a828:	str	r0, [r7]
   1a82c:	strd	r2, [r0]
   1a830:	b	1a6ec <__assert_fail@plt+0x8d4c>
   1a834:	bl	11964 <abort@plt>
   1a838:	strd	r4, [sp, #-16]!
   1a83c:	mov	r5, r0
   1a840:	str	r6, [sp, #8]
   1a844:	str	lr, [sp, #12]
   1a848:	bl	117d8 <__errno_location@plt>
   1a84c:	mov	r4, r0
   1a850:	cmp	r5, #0
   1a854:	ldr	r0, [pc, #32]	; 1a87c <__assert_fail@plt+0x8edc>
   1a858:	mov	r1, #48	; 0x30
   1a85c:	movne	r0, r5
   1a860:	ldr	r6, [r4]
   1a864:	bl	1b87c <__assert_fail@plt+0x9edc>
   1a868:	str	r6, [r4]
   1a86c:	ldrd	r4, [sp]
   1a870:	ldr	r6, [sp, #8]
   1a874:	add	sp, sp, #12
   1a878:	pop	{pc}		; (ldr pc, [sp], #4)
   1a87c:	andeq	pc, r3, r4, lsr #7
   1a880:	ldr	r3, [pc, #12]	; 1a894 <__assert_fail@plt+0x8ef4>
   1a884:	cmp	r0, #0
   1a888:	moveq	r0, r3
   1a88c:	ldr	r0, [r0]
   1a890:	bx	lr
   1a894:	andeq	pc, r3, r4, lsr #7
   1a898:	ldr	r3, [pc, #12]	; 1a8ac <__assert_fail@plt+0x8f0c>
   1a89c:	cmp	r0, #0
   1a8a0:	moveq	r0, r3
   1a8a4:	str	r1, [r0]
   1a8a8:	bx	lr
   1a8ac:	andeq	pc, r3, r4, lsr #7
   1a8b0:	ldr	r3, [pc, #52]	; 1a8ec <__assert_fail@plt+0x8f4c>
   1a8b4:	cmp	r0, #0
   1a8b8:	push	{lr}		; (str lr, [sp, #-4]!)
   1a8bc:	lsr	lr, r1, #5
   1a8c0:	and	r1, r1, #31
   1a8c4:	moveq	r0, r3
   1a8c8:	add	r3, r0, #8
   1a8cc:	ldr	ip, [r3, lr, lsl #2]
   1a8d0:	lsr	r0, ip, r1
   1a8d4:	eor	r2, r2, r0
   1a8d8:	and	r0, r0, #1
   1a8dc:	and	r2, r2, #1
   1a8e0:	eor	r1, ip, r2, lsl r1
   1a8e4:	str	r1, [r3, lr, lsl #2]
   1a8e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8ec:	andeq	pc, r3, r4, lsr #7
   1a8f0:	ldr	r3, [pc, #16]	; 1a908 <__assert_fail@plt+0x8f68>
   1a8f4:	cmp	r0, #0
   1a8f8:	movne	r3, r0
   1a8fc:	ldr	r0, [r3, #4]
   1a900:	str	r1, [r3, #4]
   1a904:	bx	lr
   1a908:	andeq	pc, r3, r4, lsr #7
   1a90c:	ldr	r3, [pc, #48]	; 1a944 <__assert_fail@plt+0x8fa4>
   1a910:	cmp	r0, #0
   1a914:	mov	ip, #10
   1a918:	moveq	r0, r3
   1a91c:	cmp	r2, #0
   1a920:	cmpne	r1, #0
   1a924:	str	ip, [r0]
   1a928:	beq	1a938 <__assert_fail@plt+0x8f98>
   1a92c:	str	r1, [r0, #40]	; 0x28
   1a930:	str	r2, [r0, #44]	; 0x2c
   1a934:	bx	lr
   1a938:	str	r4, [sp, #-8]!
   1a93c:	str	lr, [sp, #4]
   1a940:	bl	11964 <abort@plt>
   1a944:	andeq	pc, r3, r4, lsr #7
   1a948:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1a94c:	strd	r6, [sp, #8]
   1a950:	mov	r7, r0
   1a954:	mov	r6, r1
   1a958:	strd	r8, [sp, #16]
   1a95c:	mov	r8, r2
   1a960:	mov	r9, r3
   1a964:	str	lr, [sp, #24]
   1a968:	sub	sp, sp, #28
   1a96c:	ldr	r4, [sp, #56]	; 0x38
   1a970:	ldr	ip, [pc, #104]	; 1a9e0 <__assert_fail@plt+0x9040>
   1a974:	cmp	r4, #0
   1a978:	moveq	r4, ip
   1a97c:	bl	117d8 <__errno_location@plt>
   1a980:	ldr	ip, [r4, #44]	; 0x2c
   1a984:	mov	r5, r0
   1a988:	mov	r1, r6
   1a98c:	add	lr, r4, #8
   1a990:	mov	r3, r9
   1a994:	ldr	r6, [r5]
   1a998:	mov	r2, r8
   1a99c:	mov	r0, r7
   1a9a0:	str	ip, [sp, #16]
   1a9a4:	ldr	ip, [r4, #40]	; 0x28
   1a9a8:	str	lr, [sp, #8]
   1a9ac:	str	ip, [sp, #12]
   1a9b0:	ldr	ip, [r4, #4]
   1a9b4:	str	ip, [sp, #4]
   1a9b8:	ldr	ip, [r4]
   1a9bc:	str	ip, [sp]
   1a9c0:	bl	18e90 <__assert_fail@plt+0x74f0>
   1a9c4:	str	r6, [r5]
   1a9c8:	add	sp, sp, #28
   1a9cc:	ldrd	r4, [sp]
   1a9d0:	ldrd	r6, [sp, #8]
   1a9d4:	ldrd	r8, [sp, #16]
   1a9d8:	add	sp, sp, #24
   1a9dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9e0:	andeq	pc, r3, r4, lsr #7
   1a9e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a9e8:	cmp	r3, #0
   1a9ec:	ldr	r4, [pc, #220]	; 1aad0 <__assert_fail@plt+0x9130>
   1a9f0:	movne	r4, r3
   1a9f4:	strd	r6, [sp, #8]
   1a9f8:	mov	r6, r2
   1a9fc:	strd	r8, [sp, #16]
   1aa00:	mov	r9, r0
   1aa04:	strd	sl, [sp, #24]
   1aa08:	mov	sl, r1
   1aa0c:	str	lr, [sp, #32]
   1aa10:	sub	sp, sp, #44	; 0x2c
   1aa14:	bl	117d8 <__errno_location@plt>
   1aa18:	ldr	r5, [r4, #4]
   1aa1c:	mov	r7, r0
   1aa20:	mov	r1, #0
   1aa24:	add	r8, r4, #8
   1aa28:	mov	r3, sl
   1aa2c:	ldr	ip, [r4, #44]	; 0x2c
   1aa30:	mov	r2, r9
   1aa34:	mov	r0, r1
   1aa38:	ldr	lr, [r7]
   1aa3c:	cmp	r6, r1
   1aa40:	orreq	r5, r5, #1
   1aa44:	str	ip, [sp, #16]
   1aa48:	ldr	ip, [r4, #40]	; 0x28
   1aa4c:	stmib	sp, {r5, r8, ip}
   1aa50:	ldr	ip, [r4]
   1aa54:	str	lr, [sp, #28]
   1aa58:	str	ip, [sp]
   1aa5c:	bl	18e90 <__assert_fail@plt+0x74f0>
   1aa60:	add	r1, r0, #1
   1aa64:	mov	fp, r0
   1aa68:	mov	r0, r1
   1aa6c:	str	r1, [sp, #36]	; 0x24
   1aa70:	bl	1b554 <__assert_fail@plt+0x9bb4>
   1aa74:	ldr	ip, [r4, #44]	; 0x2c
   1aa78:	mov	r3, sl
   1aa7c:	mov	r2, r9
   1aa80:	ldr	r1, [sp, #36]	; 0x24
   1aa84:	str	ip, [sp, #16]
   1aa88:	ldr	ip, [r4, #40]	; 0x28
   1aa8c:	str	r0, [sp, #32]
   1aa90:	stmib	sp, {r5, r8, ip}
   1aa94:	ldr	ip, [r4]
   1aa98:	str	ip, [sp]
   1aa9c:	bl	18e90 <__assert_fail@plt+0x74f0>
   1aaa0:	ldr	lr, [sp, #28]
   1aaa4:	cmp	r6, #0
   1aaa8:	ldr	r0, [sp, #32]
   1aaac:	str	lr, [r7]
   1aab0:	strne	fp, [r6]
   1aab4:	add	sp, sp, #44	; 0x2c
   1aab8:	ldrd	r4, [sp]
   1aabc:	ldrd	r6, [sp, #8]
   1aac0:	ldrd	r8, [sp, #16]
   1aac4:	ldrd	sl, [sp, #24]
   1aac8:	add	sp, sp, #32
   1aacc:	pop	{pc}		; (ldr pc, [sp], #4)
   1aad0:	andeq	pc, r3, r4, lsr #7
   1aad4:	mov	r3, r2
   1aad8:	mov	r2, #0
   1aadc:	b	1a9e4 <__assert_fail@plt+0x9044>
   1aae0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1aae4:	movw	r5, #61888	; 0xf1c0
   1aae8:	movt	r5, #3
   1aaec:	ldr	r3, [r5, #4]
   1aaf0:	strd	r6, [sp, #8]
   1aaf4:	str	r8, [sp, #16]
   1aaf8:	str	lr, [sp, #20]
   1aafc:	ldr	r7, [r5]
   1ab00:	cmp	r3, #1
   1ab04:	ble	1ab28 <__assert_fail@plt+0x9188>
   1ab08:	mov	r4, #1
   1ab0c:	add	r6, r7, #4
   1ab10:	ldr	r0, [r6, r4, lsl #3]
   1ab14:	add	r4, r4, #1
   1ab18:	bl	1c734 <__assert_fail@plt+0xad94>
   1ab1c:	ldr	r3, [r5, #4]
   1ab20:	cmp	r3, r4
   1ab24:	bgt	1ab10 <__assert_fail@plt+0x9170>
   1ab28:	ldr	r0, [r7, #4]
   1ab2c:	movw	r4, #62116	; 0xf2a4
   1ab30:	movt	r4, #3
   1ab34:	cmp	r0, r4
   1ab38:	beq	1ab4c <__assert_fail@plt+0x91ac>
   1ab3c:	bl	1c734 <__assert_fail@plt+0xad94>
   1ab40:	mov	r3, #256	; 0x100
   1ab44:	str	r3, [r5, #8]
   1ab48:	str	r4, [r5, #12]
   1ab4c:	ldr	r4, [pc, #44]	; 1ab80 <__assert_fail@plt+0x91e0>
   1ab50:	cmp	r7, r4
   1ab54:	beq	1ab64 <__assert_fail@plt+0x91c4>
   1ab58:	mov	r0, r7
   1ab5c:	bl	1c734 <__assert_fail@plt+0xad94>
   1ab60:	str	r4, [r5]
   1ab64:	mov	r3, #1
   1ab68:	ldrd	r6, [sp, #8]
   1ab6c:	str	r3, [r5, #4]
   1ab70:	ldrd	r4, [sp]
   1ab74:	ldr	r8, [sp, #16]
   1ab78:	add	sp, sp, #20
   1ab7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab80:	andeq	pc, r3, r8, asr #3
   1ab84:	ldr	r3, [pc, #4]	; 1ab90 <__assert_fail@plt+0x91f0>
   1ab88:	mvn	r2, #0
   1ab8c:	b	1a650 <__assert_fail@plt+0x8cb0>
   1ab90:	andeq	pc, r3, r4, lsr #7
   1ab94:	ldr	r3, [pc]	; 1ab9c <__assert_fail@plt+0x91fc>
   1ab98:	b	1a650 <__assert_fail@plt+0x8cb0>
   1ab9c:	andeq	pc, r3, r4, lsr #7
   1aba0:	mov	r1, r0
   1aba4:	ldr	r3, [pc, #8]	; 1abb4 <__assert_fail@plt+0x9214>
   1aba8:	mvn	r2, #0
   1abac:	mov	r0, #0
   1abb0:	b	1a650 <__assert_fail@plt+0x8cb0>
   1abb4:	andeq	pc, r3, r4, lsr #7
   1abb8:	mov	r2, r1
   1abbc:	ldr	r3, [pc, #8]	; 1abcc <__assert_fail@plt+0x922c>
   1abc0:	mov	r1, r0
   1abc4:	mov	r0, #0
   1abc8:	b	1a650 <__assert_fail@plt+0x8cb0>
   1abcc:	andeq	pc, r3, r4, lsr #7
   1abd0:	strd	r4, [sp, #-12]!
   1abd4:	mov	r5, r2
   1abd8:	mov	r4, r0
   1abdc:	str	lr, [sp, #8]
   1abe0:	sub	sp, sp, #52	; 0x34
   1abe4:	mov	r0, sp
   1abe8:	bl	18cec <__assert_fail@plt+0x734c>
   1abec:	mov	r3, sp
   1abf0:	mov	r1, r5
   1abf4:	mov	r0, r4
   1abf8:	mvn	r2, #0
   1abfc:	bl	1a650 <__assert_fail@plt+0x8cb0>
   1ac00:	add	sp, sp, #52	; 0x34
   1ac04:	ldrd	r4, [sp]
   1ac08:	add	sp, sp, #8
   1ac0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac10:	strd	r4, [sp, #-16]!
   1ac14:	mov	r5, r2
   1ac18:	mov	r4, r0
   1ac1c:	str	r6, [sp, #8]
   1ac20:	mov	r6, r3
   1ac24:	str	lr, [sp, #12]
   1ac28:	sub	sp, sp, #48	; 0x30
   1ac2c:	mov	r0, sp
   1ac30:	bl	18cec <__assert_fail@plt+0x734c>
   1ac34:	mov	r3, sp
   1ac38:	mov	r2, r6
   1ac3c:	mov	r1, r5
   1ac40:	mov	r0, r4
   1ac44:	bl	1a650 <__assert_fail@plt+0x8cb0>
   1ac48:	add	sp, sp, #48	; 0x30
   1ac4c:	ldrd	r4, [sp]
   1ac50:	ldr	r6, [sp, #8]
   1ac54:	add	sp, sp, #12
   1ac58:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac5c:	mov	r2, r1
   1ac60:	mov	r1, r0
   1ac64:	mov	r0, #0
   1ac68:	b	1abd0 <__assert_fail@plt+0x9230>
   1ac6c:	mov	r3, r2
   1ac70:	mov	r2, r1
   1ac74:	mov	r1, r0
   1ac78:	mov	r0, #0
   1ac7c:	b	1ac10 <__assert_fail@plt+0x9270>
   1ac80:	ldr	ip, [pc, #140]	; 1ad14 <__assert_fail@plt+0x9374>
   1ac84:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1ac88:	ldrd	r4, [ip]
   1ac8c:	strd	r6, [sp, #8]
   1ac90:	ldrd	r6, [ip, #8]
   1ac94:	strd	r8, [sp, #16]
   1ac98:	lsr	r9, r2, #5
   1ac9c:	str	lr, [sp, #24]
   1aca0:	sub	sp, sp, #52	; 0x34
   1aca4:	and	lr, r2, #31
   1aca8:	add	r8, sp, #8
   1acac:	mov	r2, r1
   1acb0:	strd	r4, [sp]
   1acb4:	mov	r1, r0
   1acb8:	mov	r3, sp
   1acbc:	strd	r6, [sp, #8]
   1acc0:	mov	r0, #0
   1acc4:	ldrd	r4, [ip, #16]
   1acc8:	ldrd	r6, [ip, #24]
   1accc:	strd	r4, [sp, #16]
   1acd0:	ldrd	r4, [ip, #32]
   1acd4:	strd	r6, [sp, #24]
   1acd8:	ldrd	r6, [ip, #40]	; 0x28
   1acdc:	strd	r4, [sp, #32]
   1ace0:	strd	r6, [sp, #40]	; 0x28
   1ace4:	ldr	ip, [r8, r9, lsl #2]
   1ace8:	mvn	r4, ip, lsr lr
   1acec:	and	r4, r4, #1
   1acf0:	eor	lr, ip, r4, lsl lr
   1acf4:	str	lr, [r8, r9, lsl #2]
   1acf8:	bl	1a650 <__assert_fail@plt+0x8cb0>
   1acfc:	add	sp, sp, #52	; 0x34
   1ad00:	ldrd	r4, [sp]
   1ad04:	ldrd	r6, [sp, #8]
   1ad08:	ldrd	r8, [sp, #16]
   1ad0c:	add	sp, sp, #24
   1ad10:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad14:	andeq	pc, r3, r4, lsr #7
   1ad18:	mov	r2, r1
   1ad1c:	mvn	r1, #0
   1ad20:	b	1ac80 <__assert_fail@plt+0x92e0>
   1ad24:	mov	r2, #58	; 0x3a
   1ad28:	mvn	r1, #0
   1ad2c:	b	1ac80 <__assert_fail@plt+0x92e0>
   1ad30:	mov	r2, #58	; 0x3a
   1ad34:	b	1ac80 <__assert_fail@plt+0x92e0>
   1ad38:	strd	r4, [sp, #-20]!	; 0xffffffec
   1ad3c:	strd	r6, [sp, #8]
   1ad40:	mov	r6, r0
   1ad44:	mov	r7, r2
   1ad48:	str	lr, [sp, #16]
   1ad4c:	sub	sp, sp, #100	; 0x64
   1ad50:	mov	r0, sp
   1ad54:	bl	18cec <__assert_fail@plt+0x734c>
   1ad58:	ldrd	r4, [sp, #8]
   1ad5c:	mov	r1, r7
   1ad60:	mov	r0, r6
   1ad64:	add	r3, sp, #48	; 0x30
   1ad68:	mvn	r2, #0
   1ad6c:	ldrd	r6, [sp]
   1ad70:	strd	r4, [sp, #56]	; 0x38
   1ad74:	ldrd	r4, [sp, #16]
   1ad78:	strd	r6, [sp, #48]	; 0x30
   1ad7c:	ldrd	r6, [sp, #32]
   1ad80:	ldr	lr, [sp, #60]	; 0x3c
   1ad84:	strd	r4, [sp, #64]	; 0x40
   1ad88:	ldrd	r4, [sp, #24]
   1ad8c:	mvn	ip, lr
   1ad90:	and	ip, ip, #67108864	; 0x4000000
   1ad94:	strd	r4, [sp, #72]	; 0x48
   1ad98:	eor	ip, ip, lr
   1ad9c:	ldrd	r4, [sp, #40]	; 0x28
   1ada0:	str	ip, [sp, #60]	; 0x3c
   1ada4:	strd	r6, [sp, #80]	; 0x50
   1ada8:	strd	r4, [sp, #88]	; 0x58
   1adac:	bl	1a650 <__assert_fail@plt+0x8cb0>
   1adb0:	add	sp, sp, #100	; 0x64
   1adb4:	ldrd	r4, [sp]
   1adb8:	ldrd	r6, [sp, #8]
   1adbc:	add	sp, sp, #16
   1adc0:	pop	{pc}		; (ldr pc, [sp], #4)
   1adc4:	ldr	ip, [pc, #156]	; 1ae68 <__assert_fail@plt+0x94c8>
   1adc8:	cmp	r2, #0
   1adcc:	cmpne	r1, #0
   1add0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1add4:	strd	r6, [sp, #8]
   1add8:	mov	r6, r2
   1addc:	str	r8, [sp, #16]
   1ade0:	mov	r8, r3
   1ade4:	strd	sl, [sp, #20]
   1ade8:	ldrd	r4, [ip]
   1adec:	str	lr, [sp, #28]
   1adf0:	sub	sp, sp, #48	; 0x30
   1adf4:	mov	lr, #10
   1adf8:	ldrd	r2, [ip, #8]
   1adfc:	ldrd	sl, [ip, #16]
   1ae00:	strd	r4, [sp]
   1ae04:	ldrd	r4, [ip, #32]
   1ae08:	str	lr, [sp]
   1ae0c:	strd	r2, [sp, #8]
   1ae10:	strd	sl, [sp, #16]
   1ae14:	ldrd	r2, [ip, #24]
   1ae18:	ldrd	sl, [ip, #40]	; 0x28
   1ae1c:	strd	r2, [sp, #24]
   1ae20:	strd	r4, [sp, #32]
   1ae24:	strd	sl, [sp, #40]	; 0x28
   1ae28:	beq	1ae64 <__assert_fail@plt+0x94c4>
   1ae2c:	ldr	r2, [sp, #80]	; 0x50
   1ae30:	mov	r7, r1
   1ae34:	mov	r3, sp
   1ae38:	mov	r1, r8
   1ae3c:	str	r7, [sp, #40]	; 0x28
   1ae40:	str	r6, [sp, #44]	; 0x2c
   1ae44:	bl	1a650 <__assert_fail@plt+0x8cb0>
   1ae48:	add	sp, sp, #48	; 0x30
   1ae4c:	ldrd	r4, [sp]
   1ae50:	ldrd	r6, [sp, #8]
   1ae54:	ldr	r8, [sp, #16]
   1ae58:	ldrd	sl, [sp, #20]
   1ae5c:	add	sp, sp, #28
   1ae60:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae64:	bl	11964 <abort@plt>
   1ae68:	andeq	pc, r3, r4, lsr #7
   1ae6c:	mvn	ip, #0
   1ae70:	push	{lr}		; (str lr, [sp, #-4]!)
   1ae74:	sub	sp, sp, #12
   1ae78:	str	ip, [sp]
   1ae7c:	bl	1adc4 <__assert_fail@plt+0x9424>
   1ae80:	add	sp, sp, #12
   1ae84:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae88:	mvn	ip, #0
   1ae8c:	push	{lr}		; (str lr, [sp, #-4]!)
   1ae90:	sub	sp, sp, #12
   1ae94:	mov	r3, r2
   1ae98:	mov	r2, r1
   1ae9c:	mov	r1, r0
   1aea0:	mov	r0, #0
   1aea4:	str	ip, [sp]
   1aea8:	bl	1adc4 <__assert_fail@plt+0x9424>
   1aeac:	add	sp, sp, #12
   1aeb0:	pop	{pc}		; (ldr pc, [sp], #4)
   1aeb4:	push	{lr}		; (str lr, [sp, #-4]!)
   1aeb8:	sub	sp, sp, #12
   1aebc:	str	r3, [sp]
   1aec0:	mov	r3, r2
   1aec4:	mov	r2, r1
   1aec8:	mov	r1, r0
   1aecc:	mov	r0, #0
   1aed0:	bl	1adc4 <__assert_fail@plt+0x9424>
   1aed4:	add	sp, sp, #12
   1aed8:	pop	{pc}		; (ldr pc, [sp], #4)
   1aedc:	ldr	r3, [pc]	; 1aee4 <__assert_fail@plt+0x9544>
   1aee0:	b	1a650 <__assert_fail@plt+0x8cb0>
   1aee4:	ldrdeq	pc, [r3], -r0
   1aee8:	mov	r2, r1
   1aeec:	ldr	r3, [pc, #8]	; 1aefc <__assert_fail@plt+0x955c>
   1aef0:	mov	r1, r0
   1aef4:	mov	r0, #0
   1aef8:	b	1a650 <__assert_fail@plt+0x8cb0>
   1aefc:	ldrdeq	pc, [r3], -r0
   1af00:	ldr	r3, [pc, #4]	; 1af0c <__assert_fail@plt+0x956c>
   1af04:	mvn	r2, #0
   1af08:	b	1a650 <__assert_fail@plt+0x8cb0>
   1af0c:	ldrdeq	pc, [r3], -r0
   1af10:	mov	r1, r0
   1af14:	ldr	r3, [pc, #8]	; 1af24 <__assert_fail@plt+0x9584>
   1af18:	mvn	r2, #0
   1af1c:	mov	r0, #0
   1af20:	b	1a650 <__assert_fail@plt+0x8cb0>
   1af24:	ldrdeq	pc, [r3], -r0
   1af28:	strd	r4, [sp, #-16]!
   1af2c:	mov	r4, r1
   1af30:	mov	r1, #0
   1af34:	mov	r2, r4
   1af38:	mov	r5, r0
   1af3c:	str	r6, [sp, #8]
   1af40:	str	lr, [sp, #12]
   1af44:	bl	1185c <memchr@plt>
   1af48:	cmp	r0, #0
   1af4c:	ldr	r6, [sp, #8]
   1af50:	subne	r0, r0, r5
   1af54:	moveq	r0, r4
   1af58:	ldrd	r4, [sp]
   1af5c:	add	sp, sp, #12
   1af60:	addne	r0, r0, #1
   1af64:	pop	{pc}		; (ldr pc, [sp], #4)
   1af68:	cmp	r0, #2
   1af6c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1af70:	mov	r4, r0
   1af74:	strd	r6, [sp, #8]
   1af78:	str	r8, [sp, #16]
   1af7c:	str	lr, [sp, #20]
   1af80:	bls	1af9c <__assert_fail@plt+0x95fc>
   1af84:	mov	r0, r4
   1af88:	ldrd	r4, [sp]
   1af8c:	ldrd	r6, [sp, #8]
   1af90:	ldr	r8, [sp, #16]
   1af94:	add	sp, sp, #20
   1af98:	pop	{pc}		; (ldr pc, [sp], #4)
   1af9c:	bl	2c650 <__assert_fail@plt+0x1acb0>
   1afa0:	mov	r7, r0
   1afa4:	bl	117d8 <__errno_location@plt>
   1afa8:	mov	r5, r0
   1afac:	mov	r0, r4
   1afb0:	ldr	r6, [r5]
   1afb4:	mov	r4, r7
   1afb8:	bl	1197c <close@plt>
   1afbc:	str	r6, [r5]
   1afc0:	b	1af84 <__assert_fail@plt+0x95e4>
   1afc4:	cmp	r1, #0
   1afc8:	strd	r4, [sp, #-16]!
   1afcc:	mov	r4, r0
   1afd0:	str	r6, [sp, #8]
   1afd4:	str	lr, [sp, #12]
   1afd8:	sub	sp, sp, #32
   1afdc:	ldr	r5, [sp, #48]	; 0x30
   1afe0:	ldr	r6, [sp, #52]	; 0x34
   1afe4:	beq	1b118 <__assert_fail@plt+0x9778>
   1afe8:	mov	ip, r3
   1afec:	mov	r3, r2
   1aff0:	mov	r2, r1
   1aff4:	movw	r1, #57276	; 0xdfbc
   1aff8:	movt	r1, #2
   1affc:	str	ip, [sp]
   1b000:	bl	117c0 <fprintf@plt>
   1b004:	mov	r2, #5
   1b008:	movw	r1, #57296	; 0xdfd0
   1b00c:	movt	r1, #2
   1b010:	mov	r0, #0
   1b014:	bl	11628 <dcgettext@plt>
   1b018:	mov	r2, r0
   1b01c:	movw	r3, #2022	; 0x7e6
   1b020:	movw	r1, #58000	; 0xe290
   1b024:	movt	r1, #2
   1b028:	mov	r0, r4
   1b02c:	bl	117c0 <fprintf@plt>
   1b030:	mov	r1, r4
   1b034:	mov	r0, #10
   1b038:	bl	118bc <fputc@plt>
   1b03c:	mov	r2, #5
   1b040:	movw	r1, #57300	; 0xdfd4
   1b044:	movt	r1, #2
   1b048:	mov	r0, #0
   1b04c:	bl	11628 <dcgettext@plt>
   1b050:	mov	r1, r0
   1b054:	movw	r2, #57472	; 0xe080
   1b058:	movt	r2, #2
   1b05c:	mov	r0, r4
   1b060:	bl	117c0 <fprintf@plt>
   1b064:	mov	r1, r4
   1b068:	mov	r0, #10
   1b06c:	bl	118bc <fputc@plt>
   1b070:	cmp	r6, #9
   1b074:	ldrls	pc, [pc, r6, lsl #2]
   1b078:	b	1b364 <__assert_fail@plt+0x99c4>
   1b07c:	andeq	fp, r1, r4, lsl #2
   1b080:	andeq	fp, r1, r8, lsr #2
   1b084:	andeq	fp, r1, r0, ror #2
   1b088:	muleq	r1, r8, r1
   1b08c:	ldrdeq	fp, [r1], -r8
   1b090:	andeq	fp, r1, r4, lsr #4
   1b094:	andeq	fp, r1, r8, ror #4
   1b098:			; <UNDEFINED> instruction: 0x0001b2b4
   1b09c:	andeq	fp, r1, r8, lsl #6
   1b0a0:	andeq	fp, r1, r4, lsr #1
   1b0a4:	movw	r1, #57776	; 0xe1b0
   1b0a8:	movt	r1, #2
   1b0ac:	mov	r2, #5
   1b0b0:	mov	r0, #0
   1b0b4:	bl	11628 <dcgettext@plt>
   1b0b8:	ldr	ip, [r5, #8]
   1b0bc:	mov	r1, r0
   1b0c0:	mov	r0, r4
   1b0c4:	ldr	r3, [r5, #12]
   1b0c8:	ldr	r2, [r5, #32]
   1b0cc:	str	ip, [sp]
   1b0d0:	ldr	ip, [r5, #16]
   1b0d4:	str	r2, [sp, #24]
   1b0d8:	ldr	r2, [r5, #28]
   1b0dc:	str	r3, [sp, #4]
   1b0e0:	ldr	r3, [r5, #20]
   1b0e4:	str	ip, [sp, #8]
   1b0e8:	ldr	ip, [r5, #24]
   1b0ec:	str	r2, [sp, #20]
   1b0f0:	ldr	r2, [r5]
   1b0f4:	str	r3, [sp, #12]
   1b0f8:	ldr	r3, [r5, #4]
   1b0fc:	str	ip, [sp, #16]
   1b100:	bl	117c0 <fprintf@plt>
   1b104:	add	sp, sp, #32
   1b108:	ldrd	r4, [sp]
   1b10c:	ldr	r6, [sp, #8]
   1b110:	add	sp, sp, #12
   1b114:	pop	{pc}		; (ldr pc, [sp], #4)
   1b118:	movw	r1, #57288	; 0xdfc8
   1b11c:	movt	r1, #2
   1b120:	bl	117c0 <fprintf@plt>
   1b124:	b	1b004 <__assert_fail@plt+0x9664>
   1b128:	mov	r2, #5
   1b12c:	movw	r1, #57508	; 0xe0a4
   1b130:	movt	r1, #2
   1b134:	mov	r0, #0
   1b138:	bl	11628 <dcgettext@plt>
   1b13c:	ldr	r2, [r5]
   1b140:	mov	r1, r0
   1b144:	mov	r0, r4
   1b148:	add	sp, sp, #32
   1b14c:	ldrd	r4, [sp]
   1b150:	ldr	r6, [sp, #8]
   1b154:	ldr	lr, [sp, #12]
   1b158:	add	sp, sp, #16
   1b15c:	b	117c0 <fprintf@plt>
   1b160:	mov	r2, #5
   1b164:	movw	r1, #57524	; 0xe0b4
   1b168:	movt	r1, #2
   1b16c:	mov	r0, #0
   1b170:	bl	11628 <dcgettext@plt>
   1b174:	ldrd	r2, [r5]
   1b178:	mov	r1, r0
   1b17c:	mov	r0, r4
   1b180:	add	sp, sp, #32
   1b184:	ldrd	r4, [sp]
   1b188:	ldr	r6, [sp, #8]
   1b18c:	ldr	lr, [sp, #12]
   1b190:	add	sp, sp, #16
   1b194:	b	117c0 <fprintf@plt>
   1b198:	mov	r2, #5
   1b19c:	movw	r1, #57548	; 0xe0cc
   1b1a0:	movt	r1, #2
   1b1a4:	mov	r0, #0
   1b1a8:	bl	11628 <dcgettext@plt>
   1b1ac:	ldrd	r2, [r5]
   1b1b0:	mov	r1, r0
   1b1b4:	mov	r0, r4
   1b1b8:	ldr	ip, [r5, #8]
   1b1bc:	str	ip, [sp, #48]	; 0x30
   1b1c0:	add	sp, sp, #32
   1b1c4:	ldrd	r4, [sp]
   1b1c8:	ldr	r6, [sp, #8]
   1b1cc:	ldr	lr, [sp, #12]
   1b1d0:	add	sp, sp, #16
   1b1d4:	b	117c0 <fprintf@plt>
   1b1d8:	mov	r2, #5
   1b1dc:	movw	r1, #57576	; 0xe0e8
   1b1e0:	movt	r1, #2
   1b1e4:	mov	r0, #0
   1b1e8:	bl	11628 <dcgettext@plt>
   1b1ec:	ldr	r2, [r5]
   1b1f0:	mov	r1, r0
   1b1f4:	mov	r0, r4
   1b1f8:	ldr	r3, [r5, #8]
   1b1fc:	ldr	ip, [r5, #12]
   1b200:	str	r3, [sp, #48]	; 0x30
   1b204:	ldr	r3, [r5, #4]
   1b208:	str	ip, [sp, #52]	; 0x34
   1b20c:	add	sp, sp, #32
   1b210:	ldrd	r4, [sp]
   1b214:	ldr	r6, [sp, #8]
   1b218:	ldr	lr, [sp, #12]
   1b21c:	add	sp, sp, #16
   1b220:	b	117c0 <fprintf@plt>
   1b224:	mov	r2, #5
   1b228:	movw	r1, #57608	; 0xe108
   1b22c:	movt	r1, #2
   1b230:	mov	r0, #0
   1b234:	bl	11628 <dcgettext@plt>
   1b238:	ldr	r2, [r5, #8]
   1b23c:	mov	r1, r0
   1b240:	mov	r0, r4
   1b244:	ldr	ip, [r5, #12]
   1b248:	ldr	r3, [r5, #16]
   1b24c:	str	r2, [sp]
   1b250:	ldr	r2, [r5]
   1b254:	str	r3, [sp, #8]
   1b258:	ldr	r3, [r5, #4]
   1b25c:	str	ip, [sp, #4]
   1b260:	bl	117c0 <fprintf@plt>
   1b264:	b	1b104 <__assert_fail@plt+0x9764>
   1b268:	mov	r2, #5
   1b26c:	movw	r1, #57644	; 0xe12c
   1b270:	movt	r1, #2
   1b274:	mov	r0, #0
   1b278:	bl	11628 <dcgettext@plt>
   1b27c:	ldr	ip, [r5, #8]
   1b280:	mov	r1, r0
   1b284:	mov	r0, r4
   1b288:	ldr	r3, [r5, #12]
   1b28c:	ldr	r2, [r5, #20]
   1b290:	str	ip, [sp]
   1b294:	ldr	ip, [r5, #16]
   1b298:	str	r2, [sp, #12]
   1b29c:	ldr	r2, [r5]
   1b2a0:	str	r3, [sp, #4]
   1b2a4:	ldr	r3, [r5, #4]
   1b2a8:	str	ip, [sp, #8]
   1b2ac:	bl	117c0 <fprintf@plt>
   1b2b0:	b	1b104 <__assert_fail@plt+0x9764>
   1b2b4:	mov	r2, #5
   1b2b8:	movw	r1, #57684	; 0xe154
   1b2bc:	movt	r1, #2
   1b2c0:	mov	r0, #0
   1b2c4:	bl	11628 <dcgettext@plt>
   1b2c8:	ldr	r3, [r5, #8]
   1b2cc:	mov	r1, r0
   1b2d0:	mov	r0, r4
   1b2d4:	ldr	r2, [r5, #12]
   1b2d8:	ldr	ip, [r5, #24]
   1b2dc:	str	r3, [sp]
   1b2e0:	ldr	r3, [r5, #16]
   1b2e4:	str	ip, [sp, #16]
   1b2e8:	ldr	ip, [r5, #20]
   1b2ec:	str	r2, [sp, #4]
   1b2f0:	ldr	r2, [r5]
   1b2f4:	str	r3, [sp, #8]
   1b2f8:	ldr	r3, [r5, #4]
   1b2fc:	str	ip, [sp, #12]
   1b300:	bl	117c0 <fprintf@plt>
   1b304:	b	1b104 <__assert_fail@plt+0x9764>
   1b308:	mov	r2, #5
   1b30c:	movw	r1, #57728	; 0xe180
   1b310:	movt	r1, #2
   1b314:	mov	r0, #0
   1b318:	bl	11628 <dcgettext@plt>
   1b31c:	ldr	r2, [r5, #8]
   1b320:	mov	r1, r0
   1b324:	mov	r0, r4
   1b328:	ldr	ip, [r5, #12]
   1b32c:	ldr	r3, [r5, #28]
   1b330:	str	r2, [sp]
   1b334:	ldr	r2, [r5, #16]
   1b338:	str	r3, [sp, #20]
   1b33c:	ldr	r3, [r5, #24]
   1b340:	str	ip, [sp, #4]
   1b344:	ldr	ip, [r5, #20]
   1b348:	str	r2, [sp, #8]
   1b34c:	ldr	r2, [r5]
   1b350:	str	r3, [sp, #16]
   1b354:	ldr	r3, [r5, #4]
   1b358:	str	ip, [sp, #12]
   1b35c:	bl	117c0 <fprintf@plt>
   1b360:	b	1b104 <__assert_fail@plt+0x9764>
   1b364:	movw	r1, #57828	; 0xe1e4
   1b368:	movt	r1, #2
   1b36c:	b	1b0ac <__assert_fail@plt+0x970c>
   1b370:	strd	r4, [sp, #-12]!
   1b374:	str	lr, [sp, #8]
   1b378:	sub	sp, sp, #12
   1b37c:	ldr	r5, [sp, #24]
   1b380:	ldr	ip, [r5]
   1b384:	cmp	ip, #0
   1b388:	beq	1b3a4 <__assert_fail@plt+0x9a04>
   1b38c:	mov	lr, r5
   1b390:	mov	ip, #0
   1b394:	ldr	r4, [lr, #4]!
   1b398:	add	ip, ip, #1
   1b39c:	cmp	r4, #0
   1b3a0:	bne	1b394 <__assert_fail@plt+0x99f4>
   1b3a4:	stm	sp, {r5, ip}
   1b3a8:	bl	1afc4 <__assert_fail@plt+0x9624>
   1b3ac:	add	sp, sp, #12
   1b3b0:	ldrd	r4, [sp]
   1b3b4:	add	sp, sp, #8
   1b3b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b3bc:	strd	r4, [sp, #-16]!
   1b3c0:	mov	ip, #0
   1b3c4:	str	r6, [sp, #8]
   1b3c8:	str	lr, [sp, #12]
   1b3cc:	sub	sp, sp, #48	; 0x30
   1b3d0:	ldr	r5, [sp, #64]	; 0x40
   1b3d4:	add	r6, sp, #8
   1b3d8:	mov	r4, r6
   1b3dc:	ldr	lr, [r5], #4
   1b3e0:	cmp	lr, #0
   1b3e4:	str	lr, [r4], #4
   1b3e8:	beq	1b3f8 <__assert_fail@plt+0x9a58>
   1b3ec:	add	ip, ip, #1
   1b3f0:	cmp	ip, #10
   1b3f4:	bne	1b3dc <__assert_fail@plt+0x9a3c>
   1b3f8:	stm	sp, {r6, ip}
   1b3fc:	bl	1afc4 <__assert_fail@plt+0x9624>
   1b400:	add	sp, sp, #48	; 0x30
   1b404:	ldrd	r4, [sp]
   1b408:	ldr	r6, [sp, #8]
   1b40c:	add	sp, sp, #12
   1b410:	pop	{pc}		; (ldr pc, [sp], #4)
   1b414:	push	{r3}		; (str r3, [sp, #-4]!)
   1b418:	mov	ip, #0
   1b41c:	strd	r4, [sp, #-12]!
   1b420:	str	lr, [sp, #8]
   1b424:	sub	sp, sp, #56	; 0x38
   1b428:	add	r3, sp, #72	; 0x48
   1b42c:	add	r5, sp, #16
   1b430:	mov	r4, r3
   1b434:	mov	lr, r5
   1b438:	str	r3, [sp, #12]
   1b43c:	ldr	r3, [r4], #4
   1b440:	cmp	r3, #0
   1b444:	str	r3, [lr], #4
   1b448:	beq	1b458 <__assert_fail@plt+0x9ab8>
   1b44c:	add	ip, ip, #1
   1b450:	cmp	ip, #10
   1b454:	bne	1b43c <__assert_fail@plt+0x9a9c>
   1b458:	ldr	r3, [sp, #68]	; 0x44
   1b45c:	stm	sp, {r5, ip}
   1b460:	bl	1afc4 <__assert_fail@plt+0x9624>
   1b464:	add	sp, sp, #56	; 0x38
   1b468:	ldrd	r4, [sp]
   1b46c:	ldr	lr, [sp, #8]
   1b470:	add	sp, sp, #12
   1b474:	add	sp, sp, #4
   1b478:	bx	lr
   1b47c:	movw	r3, #61980	; 0xf21c
   1b480:	movt	r3, #3
   1b484:	str	r4, [sp, #-8]!
   1b488:	mov	r0, #10
   1b48c:	ldr	r1, [r3]
   1b490:	str	lr, [sp, #4]
   1b494:	bl	118bc <fputc@plt>
   1b498:	mov	r2, #5
   1b49c:	movw	r1, #57888	; 0xe220
   1b4a0:	movt	r1, #2
   1b4a4:	mov	r0, #0
   1b4a8:	bl	11628 <dcgettext@plt>
   1b4ac:	movw	r1, #56632	; 0xdd38
   1b4b0:	movt	r1, #2
   1b4b4:	bl	11550 <printf@plt>
   1b4b8:	mov	r2, #5
   1b4bc:	movw	r1, #57908	; 0xe234
   1b4c0:	movt	r1, #2
   1b4c4:	mov	r0, #0
   1b4c8:	bl	11628 <dcgettext@plt>
   1b4cc:	movw	r2, #56592	; 0xdd10
   1b4d0:	movt	r2, #2
   1b4d4:	movw	r1, #56008	; 0xdac8
   1b4d8:	movt	r1, #2
   1b4dc:	bl	11550 <printf@plt>
   1b4e0:	movw	r1, #57928	; 0xe248
   1b4e4:	movt	r1, #2
   1b4e8:	mov	r2, #5
   1b4ec:	mov	r0, #0
   1b4f0:	bl	11628 <dcgettext@plt>
   1b4f4:	movw	r1, #57968	; 0xe270
   1b4f8:	movt	r1, #2
   1b4fc:	ldr	r4, [sp]
   1b500:	ldr	lr, [sp, #4]
   1b504:	add	sp, sp, #8
   1b508:	b	11550 <printf@plt>
   1b50c:	str	r4, [sp, #-8]!
   1b510:	str	lr, [sp, #4]
   1b514:	bl	1c864 <__assert_fail@plt+0xaec4>
   1b518:	cmp	r0, #0
   1b51c:	beq	1b52c <__assert_fail@plt+0x9b8c>
   1b520:	ldr	r4, [sp]
   1b524:	add	sp, sp, #4
   1b528:	pop	{pc}		; (ldr pc, [sp], #4)
   1b52c:	bl	1b984 <__assert_fail@plt+0x9fe4>
   1b530:	str	r4, [sp, #-8]!
   1b534:	str	lr, [sp, #4]
   1b538:	bl	1c864 <__assert_fail@plt+0xaec4>
   1b53c:	cmp	r0, #0
   1b540:	beq	1b550 <__assert_fail@plt+0x9bb0>
   1b544:	ldr	r4, [sp]
   1b548:	add	sp, sp, #4
   1b54c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b550:	bl	1b984 <__assert_fail@plt+0x9fe4>
   1b554:	str	r4, [sp, #-8]!
   1b558:	str	lr, [sp, #4]
   1b55c:	bl	1c864 <__assert_fail@plt+0xaec4>
   1b560:	cmp	r0, #0
   1b564:	beq	1b574 <__assert_fail@plt+0x9bd4>
   1b568:	ldr	r4, [sp]
   1b56c:	add	sp, sp, #4
   1b570:	pop	{pc}		; (ldr pc, [sp], #4)
   1b574:	bl	1b984 <__assert_fail@plt+0x9fe4>
   1b578:	strd	r4, [sp, #-16]!
   1b57c:	mov	r5, r0
   1b580:	mov	r4, r1
   1b584:	str	r6, [sp, #8]
   1b588:	str	lr, [sp, #12]
   1b58c:	bl	1c910 <__assert_fail@plt+0xaf70>
   1b590:	cmp	r0, #0
   1b594:	beq	1b5a8 <__assert_fail@plt+0x9c08>
   1b598:	ldrd	r4, [sp]
   1b59c:	ldr	r6, [sp, #8]
   1b5a0:	add	sp, sp, #12
   1b5a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5a8:	adds	r4, r4, #0
   1b5ac:	movne	r4, #1
   1b5b0:	cmp	r5, #0
   1b5b4:	moveq	r4, #1
   1b5b8:	cmp	r4, #0
   1b5bc:	beq	1b598 <__assert_fail@plt+0x9bf8>
   1b5c0:	bl	1b984 <__assert_fail@plt+0x9fe4>
   1b5c4:	cmp	r1, #0
   1b5c8:	orreq	r1, r1, #1
   1b5cc:	str	r4, [sp, #-8]!
   1b5d0:	str	lr, [sp, #4]
   1b5d4:	bl	1c910 <__assert_fail@plt+0xaf70>
   1b5d8:	cmp	r0, #0
   1b5dc:	beq	1b5ec <__assert_fail@plt+0x9c4c>
   1b5e0:	ldr	r4, [sp]
   1b5e4:	add	sp, sp, #4
   1b5e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5ec:	bl	1b984 <__assert_fail@plt+0x9fe4>
   1b5f0:	strd	r4, [sp, #-16]!
   1b5f4:	mov	r4, r0
   1b5f8:	mov	r5, r2
   1b5fc:	str	r6, [sp, #8]
   1b600:	mov	r6, r1
   1b604:	str	lr, [sp, #12]
   1b608:	bl	1c968 <__assert_fail@plt+0xafc8>
   1b60c:	cmp	r0, #0
   1b610:	beq	1b624 <__assert_fail@plt+0x9c84>
   1b614:	ldrd	r4, [sp]
   1b618:	ldr	r6, [sp, #8]
   1b61c:	add	sp, sp, #12
   1b620:	pop	{pc}		; (ldr pc, [sp], #4)
   1b624:	cmp	r4, #0
   1b628:	beq	1b638 <__assert_fail@plt+0x9c98>
   1b62c:	cmp	r6, #0
   1b630:	cmpne	r5, #0
   1b634:	beq	1b614 <__assert_fail@plt+0x9c74>
   1b638:	bl	1b984 <__assert_fail@plt+0x9fe4>
   1b63c:	b	1b5f0 <__assert_fail@plt+0x9c50>
   1b640:	cmp	r2, #0
   1b644:	cmpne	r1, #0
   1b648:	str	r4, [sp, #-8]!
   1b64c:	moveq	r2, #1
   1b650:	str	lr, [sp, #4]
   1b654:	moveq	r1, r2
   1b658:	bl	1c968 <__assert_fail@plt+0xafc8>
   1b65c:	cmp	r0, #0
   1b660:	beq	1b670 <__assert_fail@plt+0x9cd0>
   1b664:	ldr	r4, [sp]
   1b668:	add	sp, sp, #4
   1b66c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b670:	bl	1b984 <__assert_fail@plt+0x9fe4>
   1b674:	mov	r2, r1
   1b678:	mov	r1, r0
   1b67c:	mov	r0, #0
   1b680:	b	1b5f0 <__assert_fail@plt+0x9c50>
   1b684:	mov	r2, r1
   1b688:	mov	r1, r0
   1b68c:	mov	r0, #0
   1b690:	b	1b640 <__assert_fail@plt+0x9ca0>
   1b694:	cmp	r0, #0
   1b698:	strd	r4, [sp, #-16]!
   1b69c:	mov	r5, r1
   1b6a0:	ldr	r4, [r1]
   1b6a4:	str	r6, [sp, #8]
   1b6a8:	str	lr, [sp, #12]
   1b6ac:	beq	1b6dc <__assert_fail@plt+0x9d3c>
   1b6b0:	lsr	r3, r4, #1
   1b6b4:	add	r3, r3, #1
   1b6b8:	adds	r4, r4, r3
   1b6bc:	bcs	1b6f8 <__assert_fail@plt+0x9d58>
   1b6c0:	mov	r1, r4
   1b6c4:	bl	1b5f0 <__assert_fail@plt+0x9c50>
   1b6c8:	ldr	r6, [sp, #8]
   1b6cc:	str	r4, [r5]
   1b6d0:	ldrd	r4, [sp]
   1b6d4:	add	sp, sp, #12
   1b6d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b6dc:	cmp	r4, #0
   1b6e0:	bne	1b6c0 <__assert_fail@plt+0x9d20>
   1b6e4:	mov	r4, #64	; 0x40
   1b6e8:	udiv	r4, r4, r2
   1b6ec:	cmp	r2, #64	; 0x40
   1b6f0:	addhi	r4, r4, #1
   1b6f4:	b	1b6c0 <__assert_fail@plt+0x9d20>
   1b6f8:	bl	1b984 <__assert_fail@plt+0x9fe4>
   1b6fc:	mov	r2, #1
   1b700:	b	1b694 <__assert_fail@plt+0x9cf4>
   1b704:	ldr	ip, [r1]
   1b708:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1b70c:	mov	r5, r1
   1b710:	strd	r6, [sp, #8]
   1b714:	str	lr, [sp, #28]
   1b718:	strd	r8, [sp, #16]
   1b71c:	asr	lr, ip, #1
   1b720:	ldr	r8, [sp, #32]
   1b724:	str	sl, [sp, #24]
   1b728:	adds	r4, ip, lr
   1b72c:	mvn	lr, r3
   1b730:	lsr	lr, lr, #31
   1b734:	mvnvs	r4, #-2147483648	; 0x80000000
   1b738:	cmp	r3, r4
   1b73c:	movge	r1, #0
   1b740:	andlt	r1, lr, #1
   1b744:	cmp	r1, #0
   1b748:	movne	r4, r3
   1b74c:	smull	r6, r7, r4, r8
   1b750:	cmp	r7, r6, asr #31
   1b754:	bne	1b7dc <__assert_fail@plt+0x9e3c>
   1b758:	cmp	r6, #63	; 0x3f
   1b75c:	mov	r1, r6
   1b760:	ble	1b7c4 <__assert_fail@plt+0x9e24>
   1b764:	cmp	r0, #0
   1b768:	sub	r6, r4, ip
   1b76c:	streq	r0, [r5]
   1b770:	cmp	r6, r2
   1b774:	bge	1b7a4 <__assert_fail@plt+0x9e04>
   1b778:	adds	r4, ip, r2
   1b77c:	bvs	1b7d8 <__assert_fail@plt+0x9e38>
   1b780:	cmp	r4, r3
   1b784:	movle	r3, #0
   1b788:	andgt	r3, lr, #1
   1b78c:	cmp	r3, #0
   1b790:	bne	1b7d8 <__assert_fail@plt+0x9e38>
   1b794:	smull	r8, r9, r4, r8
   1b798:	cmp	r9, r8, asr #31
   1b79c:	mov	r1, r8
   1b7a0:	bne	1b7d8 <__assert_fail@plt+0x9e38>
   1b7a4:	bl	1b578 <__assert_fail@plt+0x9bd8>
   1b7a8:	ldrd	r6, [sp, #8]
   1b7ac:	ldrd	r8, [sp, #16]
   1b7b0:	ldr	sl, [sp, #24]
   1b7b4:	str	r4, [r5]
   1b7b8:	ldrd	r4, [sp]
   1b7bc:	add	sp, sp, #28
   1b7c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b7c4:	mov	r6, #64	; 0x40
   1b7c8:	sdiv	r4, r6, r8
   1b7cc:	mls	r1, r8, r4, r6
   1b7d0:	sub	r1, r6, r1
   1b7d4:	b	1b764 <__assert_fail@plt+0x9dc4>
   1b7d8:	bl	1b984 <__assert_fail@plt+0x9fe4>
   1b7dc:	mvn	r6, #-2147483648	; 0x80000000
   1b7e0:	b	1b7c8 <__assert_fail@plt+0x9e28>
   1b7e4:	mov	r1, #1
   1b7e8:	str	r4, [sp, #-8]!
   1b7ec:	str	lr, [sp, #4]
   1b7f0:	bl	1c478 <__assert_fail@plt+0xaad8>
   1b7f4:	cmp	r0, #0
   1b7f8:	beq	1b808 <__assert_fail@plt+0x9e68>
   1b7fc:	ldr	r4, [sp]
   1b800:	add	sp, sp, #4
   1b804:	pop	{pc}		; (ldr pc, [sp], #4)
   1b808:	bl	1b984 <__assert_fail@plt+0x9fe4>
   1b80c:	mov	r1, #1
   1b810:	str	r4, [sp, #-8]!
   1b814:	str	lr, [sp, #4]
   1b818:	bl	1c478 <__assert_fail@plt+0xaad8>
   1b81c:	cmp	r0, #0
   1b820:	beq	1b830 <__assert_fail@plt+0x9e90>
   1b824:	ldr	r4, [sp]
   1b828:	add	sp, sp, #4
   1b82c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b830:	bl	1b984 <__assert_fail@plt+0x9fe4>
   1b834:	str	r4, [sp, #-8]!
   1b838:	str	lr, [sp, #4]
   1b83c:	bl	1c478 <__assert_fail@plt+0xaad8>
   1b840:	cmp	r0, #0
   1b844:	beq	1b854 <__assert_fail@plt+0x9eb4>
   1b848:	ldr	r4, [sp]
   1b84c:	add	sp, sp, #4
   1b850:	pop	{pc}		; (ldr pc, [sp], #4)
   1b854:	bl	1b984 <__assert_fail@plt+0x9fe4>
   1b858:	str	r4, [sp, #-8]!
   1b85c:	str	lr, [sp, #4]
   1b860:	bl	1c478 <__assert_fail@plt+0xaad8>
   1b864:	cmp	r0, #0
   1b868:	beq	1b878 <__assert_fail@plt+0x9ed8>
   1b86c:	ldr	r4, [sp]
   1b870:	add	sp, sp, #4
   1b874:	pop	{pc}		; (ldr pc, [sp], #4)
   1b878:	bl	1b984 <__assert_fail@plt+0x9fe4>
   1b87c:	strd	r4, [sp, #-16]!
   1b880:	mov	r4, r1
   1b884:	str	r6, [sp, #8]
   1b888:	mov	r6, r0
   1b88c:	mov	r0, r1
   1b890:	str	lr, [sp, #12]
   1b894:	bl	1c864 <__assert_fail@plt+0xaec4>
   1b898:	subs	r5, r0, #0
   1b89c:	beq	1b8c0 <__assert_fail@plt+0x9f20>
   1b8a0:	mov	r2, r4
   1b8a4:	mov	r1, r6
   1b8a8:	bl	115d4 <memcpy@plt>
   1b8ac:	mov	r0, r5
   1b8b0:	ldrd	r4, [sp]
   1b8b4:	ldr	r6, [sp, #8]
   1b8b8:	add	sp, sp, #12
   1b8bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b8c0:	bl	1b984 <__assert_fail@plt+0x9fe4>
   1b8c4:	strd	r4, [sp, #-16]!
   1b8c8:	mov	r4, r1
   1b8cc:	str	r6, [sp, #8]
   1b8d0:	mov	r6, r0
   1b8d4:	mov	r0, r1
   1b8d8:	str	lr, [sp, #12]
   1b8dc:	bl	1c864 <__assert_fail@plt+0xaec4>
   1b8e0:	subs	r5, r0, #0
   1b8e4:	beq	1b908 <__assert_fail@plt+0x9f68>
   1b8e8:	mov	r2, r4
   1b8ec:	mov	r1, r6
   1b8f0:	bl	115d4 <memcpy@plt>
   1b8f4:	mov	r0, r5
   1b8f8:	ldrd	r4, [sp]
   1b8fc:	ldr	r6, [sp, #8]
   1b900:	add	sp, sp, #12
   1b904:	pop	{pc}		; (ldr pc, [sp], #4)
   1b908:	bl	1b984 <__assert_fail@plt+0x9fe4>
   1b90c:	strd	r4, [sp, #-16]!
   1b910:	mov	r4, r1
   1b914:	str	r6, [sp, #8]
   1b918:	mov	r6, r0
   1b91c:	add	r0, r1, #1
   1b920:	str	lr, [sp, #12]
   1b924:	bl	1c864 <__assert_fail@plt+0xaec4>
   1b928:	subs	r5, r0, #0
   1b92c:	beq	1b958 <__assert_fail@plt+0x9fb8>
   1b930:	mov	r3, #0
   1b934:	mov	r1, r6
   1b938:	mov	r2, r4
   1b93c:	strb	r3, [r5, r4]
   1b940:	bl	115d4 <memcpy@plt>
   1b944:	mov	r0, r5
   1b948:	ldrd	r4, [sp]
   1b94c:	ldr	r6, [sp, #8]
   1b950:	add	sp, sp, #12
   1b954:	pop	{pc}		; (ldr pc, [sp], #4)
   1b958:	bl	1b984 <__assert_fail@plt+0x9fe4>
   1b95c:	str	r4, [sp, #-8]!
   1b960:	mov	r4, r0
   1b964:	str	lr, [sp, #4]
   1b968:	bl	117a8 <strlen@plt>
   1b96c:	add	r1, r0, #1
   1b970:	mov	r0, r4
   1b974:	ldr	r4, [sp]
   1b978:	ldr	lr, [sp, #4]
   1b97c:	add	sp, sp, #8
   1b980:	b	1b87c <__assert_fail@plt+0x9edc>
   1b984:	movw	r3, #61884	; 0xf1bc
   1b988:	movt	r3, #3
   1b98c:	str	r4, [sp, #-8]!
   1b990:	ldr	r4, [r3]
   1b994:	mov	r2, #5
   1b998:	movw	r1, #58048	; 0xe2c0
   1b99c:	movt	r1, #2
   1b9a0:	mov	r0, #0
   1b9a4:	str	lr, [sp, #4]
   1b9a8:	bl	11628 <dcgettext@plt>
   1b9ac:	mov	r3, r0
   1b9b0:	movw	r2, #56720	; 0xdd90
   1b9b4:	movt	r2, #2
   1b9b8:	mov	r1, #0
   1b9bc:	mov	r0, r4
   1b9c0:	bl	116d0 <error@plt>
   1b9c4:	bl	11964 <abort@plt>
   1b9c8:	sub	r0, r0, #1
   1b9cc:	movw	ip, #61884	; 0xf1bc
   1b9d0:	movt	ip, #3
   1b9d4:	cmp	r0, #3
   1b9d8:	push	{lr}		; (str lr, [sp, #-4]!)
   1b9dc:	sub	sp, sp, #20
   1b9e0:	ldr	r5, [ip]
   1b9e4:	bhi	1ba34 <__assert_fail@plt+0xa094>
   1b9e8:	movw	ip, #58068	; 0xe2d4
   1b9ec:	movt	ip, #2
   1b9f0:	cmp	r1, #0
   1b9f4:	ldr	r0, [ip, r0, lsl #2]
   1b9f8:	blt	1ba38 <__assert_fail@plt+0xa098>
   1b9fc:	ldr	r6, [r3, r1, lsl #4]
   1ba00:	movw	r4, #58084	; 0xe2e4
   1ba04:	movt	r4, #2
   1ba08:	mov	r1, r0
   1ba0c:	mov	r2, #5
   1ba10:	mov	r0, #0
   1ba14:	bl	11628 <dcgettext@plt>
   1ba18:	ldr	ip, [sp, #24]
   1ba1c:	mov	r2, r0
   1ba20:	mov	r3, r4
   1ba24:	mov	r0, r5
   1ba28:	mov	r1, #0
   1ba2c:	stm	sp, {r6, ip}
   1ba30:	bl	116d0 <error@plt>
   1ba34:	bl	11964 <abort@plt>
   1ba38:	mov	r3, #0
   1ba3c:	movw	r4, #58084	; 0xe2e4
   1ba40:	movt	r4, #2
   1ba44:	add	r6, sp, #12
   1ba48:	strb	r2, [sp, #12]
   1ba4c:	sub	r4, r4, r1
   1ba50:	strb	r3, [sp, #13]
   1ba54:	b	1ba08 <__assert_fail@plt+0xa068>
   1ba58:	cmp	r2, #36	; 0x24
   1ba5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ba60:	strd	r6, [sp, #8]
   1ba64:	strd	r8, [sp, #16]
   1ba68:	strd	sl, [sp, #24]
   1ba6c:	str	lr, [sp, #32]
   1ba70:	sub	sp, sp, #28
   1ba74:	bhi	1c458 <__assert_fail@plt+0xaab8>
   1ba78:	cmp	r1, #0
   1ba7c:	mov	r8, r2
   1ba80:	mov	r6, r0
   1ba84:	mov	r5, r1
   1ba88:	mov	r9, r3
   1ba8c:	addeq	r5, sp, #20
   1ba90:	bl	117d8 <__errno_location@plt>
   1ba94:	mov	r3, #0
   1ba98:	mov	r7, r0
   1ba9c:	str	r3, [r0]
   1baa0:	bl	11778 <__ctype_b_loc@plt>
   1baa4:	ldrb	r3, [r6]
   1baa8:	mov	r2, r6
   1baac:	ldr	r0, [r0]
   1bab0:	b	1bab8 <__assert_fail@plt+0xa118>
   1bab4:	ldrb	r3, [r2, #1]!
   1bab8:	lsl	r1, r3, #1
   1babc:	ldrh	r4, [r0, r1]
   1bac0:	ands	r4, r4, #8192	; 0x2000
   1bac4:	bne	1bab4 <__assert_fail@plt+0xa114>
   1bac8:	cmp	r3, #45	; 0x2d
   1bacc:	beq	1bb68 <__assert_fail@plt+0xa1c8>
   1bad0:	mov	r2, r8
   1bad4:	mov	r3, r4
   1bad8:	mov	r1, r5
   1badc:	mov	r0, r6
   1bae0:	bl	115ec <__strtoull_internal@plt>
   1bae4:	ldr	r8, [r5]
   1bae8:	mov	sl, r0
   1baec:	mov	fp, r1
   1baf0:	cmp	r8, r6
   1baf4:	beq	1bb50 <__assert_fail@plt+0xa1b0>
   1baf8:	ldr	r4, [r7]
   1bafc:	cmp	r4, #0
   1bb00:	bne	1bb40 <__assert_fail@plt+0xa1a0>
   1bb04:	ldr	r3, [sp, #64]	; 0x40
   1bb08:	cmp	r3, #0
   1bb0c:	beq	1bb1c <__assert_fail@plt+0xa17c>
   1bb10:	ldrb	r6, [r8]
   1bb14:	cmp	r6, #0
   1bb18:	bne	1befc <__assert_fail@plt+0xa55c>
   1bb1c:	strd	sl, [r9]
   1bb20:	mov	r0, r4
   1bb24:	add	sp, sp, #28
   1bb28:	ldrd	r4, [sp]
   1bb2c:	ldrd	r6, [sp, #8]
   1bb30:	ldrd	r8, [sp, #16]
   1bb34:	ldrd	sl, [sp, #24]
   1bb38:	add	sp, sp, #32
   1bb3c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb40:	cmp	r4, #34	; 0x22
   1bb44:	bne	1bb68 <__assert_fail@plt+0xa1c8>
   1bb48:	mov	r4, #1
   1bb4c:	b	1bb04 <__assert_fail@plt+0xa164>
   1bb50:	ldr	r3, [sp, #64]	; 0x40
   1bb54:	cmp	r3, #0
   1bb58:	beq	1bb68 <__assert_fail@plt+0xa1c8>
   1bb5c:	ldrb	r6, [r6]
   1bb60:	cmp	r6, #0
   1bb64:	bne	1bb70 <__assert_fail@plt+0xa1d0>
   1bb68:	mov	r4, #4
   1bb6c:	b	1bb20 <__assert_fail@plt+0xa180>
   1bb70:	mov	r1, r6
   1bb74:	mov	r0, r3
   1bb78:	bl	117b4 <strchr@plt>
   1bb7c:	cmp	r0, #0
   1bb80:	movne	sl, #1
   1bb84:	movne	fp, #0
   1bb88:	beq	1bb68 <__assert_fail@plt+0xa1c8>
   1bb8c:	sub	r7, r6, #69	; 0x45
   1bb90:	cmp	r7, #47	; 0x2f
   1bb94:	ldrls	pc, [pc, r7, lsl #2]
   1bb98:	b	1bd58 <__assert_fail@plt+0xa3b8>
   1bb9c:	andeq	fp, r1, ip, asr ip
   1bba0:	andeq	fp, r1, r8, asr sp
   1bba4:	andeq	fp, r1, ip, asr ip
   1bba8:	andeq	fp, r1, r8, asr sp
   1bbac:	andeq	fp, r1, r8, asr sp
   1bbb0:	andeq	fp, r1, r8, asr sp
   1bbb4:	andeq	fp, r1, ip, asr ip
   1bbb8:	andeq	fp, r1, r8, asr sp
   1bbbc:	andeq	fp, r1, ip, asr ip
   1bbc0:	andeq	fp, r1, r8, asr sp
   1bbc4:	andeq	fp, r1, r8, asr sp
   1bbc8:	andeq	fp, r1, ip, asr ip
   1bbcc:	andeq	fp, r1, r8, asr sp
   1bbd0:	andeq	fp, r1, r8, asr sp
   1bbd4:	andeq	fp, r1, r8, asr sp
   1bbd8:	andeq	fp, r1, ip, asr ip
   1bbdc:	andeq	fp, r1, r8, asr sp
   1bbe0:	andeq	fp, r1, r8, asr sp
   1bbe4:	andeq	fp, r1, r8, asr sp
   1bbe8:	andeq	fp, r1, r8, asr sp
   1bbec:	andeq	fp, r1, ip, asr ip
   1bbf0:	andeq	fp, r1, ip, asr ip
   1bbf4:	andeq	fp, r1, r8, asr sp
   1bbf8:	andeq	fp, r1, r8, asr sp
   1bbfc:	andeq	fp, r1, r8, asr sp
   1bc00:	andeq	fp, r1, r8, asr sp
   1bc04:	andeq	fp, r1, r8, asr sp
   1bc08:	andeq	fp, r1, r8, asr sp
   1bc0c:	andeq	fp, r1, r8, asr sp
   1bc10:	andeq	fp, r1, r8, asr sp
   1bc14:	andeq	fp, r1, r8, asr sp
   1bc18:	andeq	fp, r1, r8, asr sp
   1bc1c:	andeq	fp, r1, r8, asr sp
   1bc20:	andeq	fp, r1, r8, asr sp
   1bc24:	andeq	fp, r1, ip, asr ip
   1bc28:	andeq	fp, r1, r8, asr sp
   1bc2c:	andeq	fp, r1, r8, asr sp
   1bc30:	andeq	fp, r1, r8, asr sp
   1bc34:	andeq	fp, r1, ip, asr ip
   1bc38:	andeq	fp, r1, r8, asr sp
   1bc3c:	andeq	fp, r1, ip, asr ip
   1bc40:	andeq	fp, r1, r8, asr sp
   1bc44:	andeq	fp, r1, r8, asr sp
   1bc48:	andeq	fp, r1, r8, asr sp
   1bc4c:	andeq	fp, r1, r8, asr sp
   1bc50:	andeq	fp, r1, r8, asr sp
   1bc54:	andeq	fp, r1, r8, asr sp
   1bc58:	andeq	fp, r1, ip, asr ip
   1bc5c:	mov	r1, #48	; 0x30
   1bc60:	ldr	r0, [sp, #64]	; 0x40
   1bc64:	bl	117b4 <strchr@plt>
   1bc68:	cmp	r0, #0
   1bc6c:	beq	1bd58 <__assert_fail@plt+0xa3b8>
   1bc70:	ldrb	r3, [r8, #1]
   1bc74:	cmp	r3, #68	; 0x44
   1bc78:	beq	1c29c <__assert_fail@plt+0xa8fc>
   1bc7c:	cmp	r3, #105	; 0x69
   1bc80:	beq	1bf14 <__assert_fail@plt+0xa574>
   1bc84:	cmp	r3, #66	; 0x42
   1bc88:	beq	1c29c <__assert_fail@plt+0xa8fc>
   1bc8c:	cmp	r7, #47	; 0x2f
   1bc90:	ldrls	pc, [pc, r7, lsl #2]
   1bc94:	b	1bef4 <__assert_fail@plt+0xa554>
   1bc98:	andeq	ip, r1, r0, lsl #5
   1bc9c:	strdeq	fp, [r1], -r4
   1bca0:	andeq	ip, r1, r0, ror r2
   1bca4:	strdeq	fp, [r1], -r4
   1bca8:	strdeq	fp, [r1], -r4
   1bcac:	strdeq	fp, [r1], -r4
   1bcb0:	andeq	ip, r1, r0, ror #4
   1bcb4:	strdeq	fp, [r1], -r4
   1bcb8:	andeq	ip, r1, r0, asr r2
   1bcbc:	strdeq	fp, [r1], -r4
   1bcc0:	strdeq	fp, [r1], -r4
   1bcc4:	andeq	ip, r1, r8, lsr r2
   1bcc8:	strdeq	fp, [r1], -r4
   1bccc:	strdeq	fp, [r1], -r4
   1bcd0:	strdeq	fp, [r1], -r4
   1bcd4:	andeq	ip, r1, r8, lsr #4
   1bcd8:	strdeq	fp, [r1], -r4
   1bcdc:	strdeq	fp, [r1], -r4
   1bce0:	strdeq	fp, [r1], -r4
   1bce4:	strdeq	fp, [r1], -r4
   1bce8:	andeq	ip, r1, r8, lsl r2
   1bcec:	andeq	ip, r1, r8, lsl #4
   1bcf0:	strdeq	fp, [r1], -r4
   1bcf4:	strdeq	fp, [r1], -r4
   1bcf8:	strdeq	fp, [r1], -r4
   1bcfc:	strdeq	fp, [r1], -r4
   1bd00:	strdeq	fp, [r1], -r4
   1bd04:	strdeq	fp, [r1], -r4
   1bd08:	strdeq	fp, [r1], -r4
   1bd0c:	andeq	fp, r1, r0, asr pc
   1bd10:	andeq	ip, r1, r8, asr #4
   1bd14:	strdeq	fp, [r1], -r4
   1bd18:	strdeq	fp, [r1], -r4
   1bd1c:	strdeq	fp, [r1], -r4
   1bd20:	andeq	ip, r1, r0, ror r2
   1bd24:	strdeq	fp, [r1], -r4
   1bd28:	strdeq	fp, [r1], -r4
   1bd2c:	strdeq	fp, [r1], -r4
   1bd30:	andeq	ip, r1, r0, ror #4
   1bd34:	strdeq	fp, [r1], -r4
   1bd38:	andeq	ip, r1, r0, asr r2
   1bd3c:	strdeq	fp, [r1], -r4
   1bd40:	strdeq	fp, [r1], -r4
   1bd44:	strdeq	fp, [r1], -r4
   1bd48:	strdeq	fp, [r1], -r4
   1bd4c:	strdeq	fp, [r1], -r4
   1bd50:	strdeq	fp, [r1], -r4
   1bd54:	andeq	ip, r1, r8, lsr #4
   1bd58:	mov	lr, #1
   1bd5c:	mov	r0, #1024	; 0x400
   1bd60:	sub	r6, r6, #66	; 0x42
   1bd64:	cmp	r6, #53	; 0x35
   1bd68:	ldrls	pc, [pc, r6, lsl #2]
   1bd6c:	b	1bef4 <__assert_fail@plt+0xa554>
   1bd70:	andeq	fp, r1, r8, ror pc
   1bd74:	strdeq	fp, [r1], -r4
   1bd78:	strdeq	fp, [r1], -r4
   1bd7c:	andeq	ip, r1, ip, lsr #32
   1bd80:	strdeq	fp, [r1], -r4
   1bd84:	andeq	fp, r1, r8, asr #28
   1bd88:	strdeq	fp, [r1], -r4
   1bd8c:	strdeq	fp, [r1], -r4
   1bd90:	strdeq	fp, [r1], -r4
   1bd94:	strdeq	fp, [r1], -ip
   1bd98:	strdeq	fp, [r1], -r4
   1bd9c:	andeq	ip, r1, ip, lsr #3
   1bda0:	strdeq	fp, [r1], -r4
   1bda4:	strdeq	fp, [r1], -r4
   1bda8:	andeq	ip, r1, ip, asr #2
   1bdac:	strdeq	fp, [r1], -r4
   1bdb0:	strdeq	fp, [r1], -r4
   1bdb4:	strdeq	fp, [r1], -r4
   1bdb8:	andeq	ip, r1, ip, ror #1
   1bdbc:	strdeq	fp, [r1], -r4
   1bdc0:	strdeq	fp, [r1], -r4
   1bdc4:	strdeq	fp, [r1], -r4
   1bdc8:	strdeq	fp, [r1], -r4
   1bdcc:	andeq	ip, r1, ip, lsl #1
   1bdd0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   1bdd4:	strdeq	fp, [r1], -r4
   1bdd8:	strdeq	fp, [r1], -r4
   1bddc:	strdeq	fp, [r1], -r4
   1bde0:	strdeq	fp, [r1], -r4
   1bde4:	strdeq	fp, [r1], -r4
   1bde8:	strdeq	fp, [r1], -r4
   1bdec:	strdeq	fp, [r1], -r4
   1bdf0:	andeq	fp, r1, r4, asr pc
   1bdf4:	andeq	fp, r1, r0, ror #29
   1bdf8:	strdeq	fp, [r1], -r4
   1bdfc:	strdeq	fp, [r1], -r4
   1be00:	strdeq	fp, [r1], -r4
   1be04:	andeq	fp, r1, r8, asr #28
   1be08:	strdeq	fp, [r1], -r4
   1be0c:	strdeq	fp, [r1], -r4
   1be10:	strdeq	fp, [r1], -r4
   1be14:	strdeq	fp, [r1], -ip
   1be18:	strdeq	fp, [r1], -r4
   1be1c:	andeq	ip, r1, ip, lsr #3
   1be20:	strdeq	fp, [r1], -r4
   1be24:	strdeq	fp, [r1], -r4
   1be28:	strdeq	fp, [r1], -r4
   1be2c:	strdeq	fp, [r1], -r4
   1be30:	strdeq	fp, [r1], -r4
   1be34:	strdeq	fp, [r1], -r4
   1be38:	andeq	ip, r1, ip, ror #1
   1be3c:	strdeq	fp, [r1], -r4
   1be40:	strdeq	fp, [r1], -r4
   1be44:	andeq	fp, r1, ip, lsr #30
   1be48:	asr	r1, r0, #31
   1be4c:	cmp	fp, #0
   1be50:	mov	r6, #0
   1be54:	mov	r7, #0
   1be58:	bne	1c3bc <__assert_fail@plt+0xaa1c>
   1be5c:	orrs	r3, r6, r7
   1be60:	bne	1c384 <__assert_fail@plt+0xa9e4>
   1be64:	umull	r2, r3, sl, r0
   1be68:	mul	ip, sl, r1
   1be6c:	strd	r2, [sp]
   1be70:	ldr	r2, [sp, #4]
   1be74:	mla	r3, r0, fp, ip
   1be78:	add	ip, r3, r2
   1be7c:	cmp	ip, #0
   1be80:	str	ip, [sp, #4]
   1be84:	bne	1c434 <__assert_fail@plt+0xaa94>
   1be88:	orrs	r3, r6, r7
   1be8c:	bne	1c384 <__assert_fail@plt+0xa9e4>
   1be90:	ldr	r2, [sp]
   1be94:	mov	sl, r6
   1be98:	mov	fp, r7
   1be9c:	ldr	r3, [sp]
   1bea0:	umull	r6, r7, r2, r0
   1bea4:	ldr	r2, [sp, #4]
   1bea8:	mul	r3, r3, r1
   1beac:	mla	r3, r0, r2, r3
   1beb0:	add	ip, r3, r7
   1beb4:	cmp	ip, #0
   1beb8:	mov	r7, ip
   1bebc:	bne	1c40c <__assert_fail@plt+0xaa6c>
   1bec0:	orrs	r3, sl, fp
   1bec4:	bne	1c384 <__assert_fail@plt+0xa9e4>
   1bec8:	mul	r2, r6, r1
   1becc:	mov	r3, #0
   1bed0:	umull	sl, fp, r6, r0
   1bed4:	mla	r2, r0, r7, r2
   1bed8:	add	fp, r2, fp
   1bedc:	orr	r4, r4, r3
   1bee0:	add	r3, r8, lr
   1bee4:	str	r3, [r5]
   1bee8:	ldrb	r3, [r8, lr]
   1beec:	cmp	r3, #0
   1bef0:	beq	1bb1c <__assert_fail@plt+0xa17c>
   1bef4:	orr	r4, r4, #2
   1bef8:	b	1bb1c <__assert_fail@plt+0xa17c>
   1befc:	mov	r1, r6
   1bf00:	ldr	r0, [sp, #64]	; 0x40
   1bf04:	bl	117b4 <strchr@plt>
   1bf08:	cmp	r0, #0
   1bf0c:	bne	1bb8c <__assert_fail@plt+0xa1ec>
   1bf10:	b	1bef4 <__assert_fail@plt+0xa554>
   1bf14:	ldrb	r3, [r8, #2]
   1bf18:	mov	r0, #1024	; 0x400
   1bf1c:	cmp	r3, #66	; 0x42
   1bf20:	movne	lr, #1
   1bf24:	moveq	lr, #3
   1bf28:	b	1bd60 <__assert_fail@plt+0xa3c0>
   1bf2c:	lsr	r3, fp, #31
   1bf30:	adds	sl, sl, sl
   1bf34:	adc	fp, fp, fp
   1bf38:	cmp	r3, #0
   1bf3c:	beq	1bee0 <__assert_fail@plt+0xa540>
   1bf40:	mov	r4, #1
   1bf44:	mvn	sl, #0
   1bf48:	mvn	fp, #0
   1bf4c:	b	1bee0 <__assert_fail@plt+0xa540>
   1bf50:	mov	lr, #1
   1bf54:	lsr	r3, fp, #23
   1bf58:	cmp	r3, #0
   1bf5c:	bne	1bf40 <__assert_fail@plt+0xa5a0>
   1bf60:	lsl	r3, fp, #9
   1bf64:	lsl	r2, sl, #9
   1bf68:	orr	r3, r3, sl, lsr #23
   1bf6c:	mov	sl, r2
   1bf70:	mov	fp, r3
   1bf74:	b	1bee0 <__assert_fail@plt+0xa540>
   1bf78:	lsr	r3, fp, #22
   1bf7c:	cmp	r3, #0
   1bf80:	bne	1bf40 <__assert_fail@plt+0xa5a0>
   1bf84:	lsl	r3, fp, #10
   1bf88:	lsl	r2, sl, #10
   1bf8c:	orr	r3, r3, sl, lsr #22
   1bf90:	mov	sl, r2
   1bf94:	mov	fp, r3
   1bf98:	b	1bee0 <__assert_fail@plt+0xa540>
   1bf9c:	asr	r7, r0, #31
   1bfa0:	mov	r6, r0
   1bfa4:	mov	r3, #0
   1bfa8:	mov	ip, #7
   1bfac:	str	r3, [sp]
   1bfb0:	strd	r4, [sp, #8]
   1bfb4:	b	1bfd0 <__assert_fail@plt+0xa630>
   1bfb8:	mul	r3, sl, r7
   1bfbc:	mla	r3, r6, fp, r3
   1bfc0:	umull	sl, fp, sl, r6
   1bfc4:	add	fp, r3, fp
   1bfc8:	subs	ip, ip, #1
   1bfcc:	beq	1c290 <__assert_fail@plt+0xa8f0>
   1bfd0:	cmp	fp, #0
   1bfd4:	mov	r2, #0
   1bfd8:	mov	r3, #0
   1bfdc:	bne	1c338 <__assert_fail@plt+0xa998>
   1bfe0:	orrs	r3, r2, r3
   1bfe4:	beq	1bfb8 <__assert_fail@plt+0xa618>
   1bfe8:	mov	r3, #1
   1bfec:	mvn	sl, #0
   1bff0:	mvn	fp, #0
   1bff4:	str	r3, [sp]
   1bff8:	b	1bfc8 <__assert_fail@plt+0xa628>
   1bffc:	asr	r1, r0, #31
   1c000:	cmp	fp, #0
   1c004:	mov	r6, #0
   1c008:	mov	r7, #0
   1c00c:	bne	1c35c <__assert_fail@plt+0xa9bc>
   1c010:	orrs	r3, r6, r7
   1c014:	bne	1bf40 <__assert_fail@plt+0xa5a0>
   1c018:	mul	r3, sl, r1
   1c01c:	mla	r3, r0, fp, r3
   1c020:	umull	sl, fp, sl, r0
   1c024:	add	fp, r3, fp
   1c028:	b	1bee0 <__assert_fail@plt+0xa540>
   1c02c:	asr	r7, r0, #31
   1c030:	mov	r6, r0
   1c034:	mov	r3, #0
   1c038:	mov	ip, #6
   1c03c:	str	r3, [sp]
   1c040:	strd	r4, [sp, #8]
   1c044:	b	1c060 <__assert_fail@plt+0xa6c0>
   1c048:	mul	r3, sl, r7
   1c04c:	mla	r3, r6, fp, r3
   1c050:	umull	sl, fp, sl, r6
   1c054:	add	fp, r3, fp
   1c058:	subs	ip, ip, #1
   1c05c:	beq	1c290 <__assert_fail@plt+0xa8f0>
   1c060:	cmp	fp, #0
   1c064:	mov	r2, #0
   1c068:	mov	r3, #0
   1c06c:	bne	1c2a8 <__assert_fail@plt+0xa908>
   1c070:	orrs	r3, r2, r3
   1c074:	beq	1c048 <__assert_fail@plt+0xa6a8>
   1c078:	mov	r3, #1
   1c07c:	mvn	sl, #0
   1c080:	mvn	fp, #0
   1c084:	str	r3, [sp]
   1c088:	b	1c058 <__assert_fail@plt+0xa6b8>
   1c08c:	asr	r7, r0, #31
   1c090:	mov	r6, r0
   1c094:	mov	r3, #0
   1c098:	mov	ip, #8
   1c09c:	str	r3, [sp]
   1c0a0:	strd	r4, [sp, #8]
   1c0a4:	b	1c0c0 <__assert_fail@plt+0xa720>
   1c0a8:	mul	r3, sl, r7
   1c0ac:	mla	r3, r6, fp, r3
   1c0b0:	umull	sl, fp, sl, r6
   1c0b4:	add	fp, r3, fp
   1c0b8:	subs	ip, ip, #1
   1c0bc:	beq	1c290 <__assert_fail@plt+0xa8f0>
   1c0c0:	cmp	fp, #0
   1c0c4:	mov	r2, #0
   1c0c8:	mov	r3, #0
   1c0cc:	bne	1c2f0 <__assert_fail@plt+0xa950>
   1c0d0:	orrs	r3, r2, r3
   1c0d4:	beq	1c0a8 <__assert_fail@plt+0xa708>
   1c0d8:	mov	r3, #1
   1c0dc:	mvn	sl, #0
   1c0e0:	mvn	fp, #0
   1c0e4:	str	r3, [sp]
   1c0e8:	b	1c0b8 <__assert_fail@plt+0xa718>
   1c0ec:	asr	r7, r0, #31
   1c0f0:	mov	r6, r0
   1c0f4:	mov	r3, #0
   1c0f8:	mov	ip, #4
   1c0fc:	str	r3, [sp]
   1c100:	strd	r4, [sp, #8]
   1c104:	b	1c120 <__assert_fail@plt+0xa780>
   1c108:	mul	r3, sl, r7
   1c10c:	mla	r3, r6, fp, r3
   1c110:	umull	sl, fp, sl, r6
   1c114:	add	fp, r3, fp
   1c118:	subs	ip, ip, #1
   1c11c:	beq	1c290 <__assert_fail@plt+0xa8f0>
   1c120:	cmp	fp, #0
   1c124:	mov	r2, #0
   1c128:	mov	r3, #0
   1c12c:	bne	1c2cc <__assert_fail@plt+0xa92c>
   1c130:	orrs	r3, r2, r3
   1c134:	beq	1c108 <__assert_fail@plt+0xa768>
   1c138:	mov	r3, #1
   1c13c:	mvn	sl, #0
   1c140:	mvn	fp, #0
   1c144:	str	r3, [sp]
   1c148:	b	1c118 <__assert_fail@plt+0xa778>
   1c14c:	asr	r7, r0, #31
   1c150:	mov	r6, r0
   1c154:	mov	r3, #0
   1c158:	mov	ip, #5
   1c15c:	str	r3, [sp]
   1c160:	strd	r4, [sp, #8]
   1c164:	b	1c180 <__assert_fail@plt+0xa7e0>
   1c168:	mul	r3, sl, r7
   1c16c:	mla	r3, r6, fp, r3
   1c170:	umull	sl, fp, sl, r6
   1c174:	add	fp, r3, fp
   1c178:	subs	ip, ip, #1
   1c17c:	beq	1c290 <__assert_fail@plt+0xa8f0>
   1c180:	cmp	fp, #0
   1c184:	mov	r2, #0
   1c188:	mov	r3, #0
   1c18c:	bne	1c314 <__assert_fail@plt+0xa974>
   1c190:	orrs	r3, r2, r3
   1c194:	beq	1c168 <__assert_fail@plt+0xa7c8>
   1c198:	mov	r3, #1
   1c19c:	mvn	sl, #0
   1c1a0:	mvn	fp, #0
   1c1a4:	str	r3, [sp]
   1c1a8:	b	1c178 <__assert_fail@plt+0xa7d8>
   1c1ac:	asr	r1, r0, #31
   1c1b0:	cmp	fp, #0
   1c1b4:	mov	r6, #0
   1c1b8:	mov	r7, #0
   1c1bc:	bne	1c394 <__assert_fail@plt+0xa9f4>
   1c1c0:	orrs	r3, r6, r7
   1c1c4:	bne	1bf40 <__assert_fail@plt+0xa5a0>
   1c1c8:	mul	r3, sl, r1
   1c1cc:	strd	r6, [sp]
   1c1d0:	umull	r6, r7, sl, r0
   1c1d4:	mla	r3, r0, fp, r3
   1c1d8:	add	ip, r3, r7
   1c1dc:	cmp	ip, #0
   1c1e0:	mov	r7, ip
   1c1e4:	bne	1c3e4 <__assert_fail@plt+0xaa44>
   1c1e8:	ldrd	r2, [sp]
   1c1ec:	orrs	r3, r2, r3
   1c1f0:	bne	1bf40 <__assert_fail@plt+0xa5a0>
   1c1f4:	mul	r3, r6, r1
   1c1f8:	umull	sl, fp, r6, r0
   1c1fc:	mla	r0, r0, r7, r3
   1c200:	add	fp, r0, fp
   1c204:	b	1bee0 <__assert_fail@plt+0xa540>
   1c208:	mov	lr, #1
   1c20c:	mov	r6, #1024	; 0x400
   1c210:	mov	r7, #0
   1c214:	b	1bfa4 <__assert_fail@plt+0xa604>
   1c218:	mov	lr, #1
   1c21c:	mov	r6, #1024	; 0x400
   1c220:	mov	r7, #0
   1c224:	b	1c094 <__assert_fail@plt+0xa6f4>
   1c228:	mov	lr, #1
   1c22c:	mov	r6, #1024	; 0x400
   1c230:	mov	r7, #0
   1c234:	b	1c0f4 <__assert_fail@plt+0xa754>
   1c238:	mov	lr, #1
   1c23c:	mov	r6, #1024	; 0x400
   1c240:	mov	r7, #0
   1c244:	b	1c154 <__assert_fail@plt+0xa7b4>
   1c248:	mov	lr, #1
   1c24c:	b	1bee0 <__assert_fail@plt+0xa540>
   1c250:	mov	lr, #1
   1c254:	mov	r0, #1024	; 0x400
   1c258:	mov	r1, #0
   1c25c:	b	1c1b0 <__assert_fail@plt+0xa810>
   1c260:	mov	lr, #1
   1c264:	mov	r0, #1024	; 0x400
   1c268:	mov	r1, #0
   1c26c:	b	1c000 <__assert_fail@plt+0xa660>
   1c270:	mov	lr, #1
   1c274:	mov	r0, #1024	; 0x400
   1c278:	mov	r1, #0
   1c27c:	b	1be4c <__assert_fail@plt+0xa4ac>
   1c280:	mov	lr, #1
   1c284:	mov	r6, #1024	; 0x400
   1c288:	mov	r7, #0
   1c28c:	b	1c034 <__assert_fail@plt+0xa694>
   1c290:	ldr	r3, [sp]
   1c294:	ldrd	r4, [sp, #8]
   1c298:	b	1bedc <__assert_fail@plt+0xa53c>
   1c29c:	mov	lr, #2
   1c2a0:	mov	r0, #1000	; 0x3e8
   1c2a4:	b	1bd60 <__assert_fail@plt+0xa3c0>
   1c2a8:	umull	r0, r1, sl, r6
   1c2ac:	mov	r5, #0
   1c2b0:	mov	r0, r1
   1c2b4:	mov	r1, r5
   1c2b8:	umlal	r0, r1, fp, r6
   1c2bc:	cmp	r1, r5
   1c2c0:	movne	r2, #1
   1c2c4:	movne	r3, #0
   1c2c8:	b	1c070 <__assert_fail@plt+0xa6d0>
   1c2cc:	umull	r0, r1, sl, r6
   1c2d0:	mov	r5, #0
   1c2d4:	mov	r0, r1
   1c2d8:	mov	r1, r5
   1c2dc:	umlal	r0, r1, fp, r6
   1c2e0:	cmp	r1, r5
   1c2e4:	movne	r2, #1
   1c2e8:	movne	r3, #0
   1c2ec:	b	1c130 <__assert_fail@plt+0xa790>
   1c2f0:	umull	r0, r1, sl, r6
   1c2f4:	mov	r5, #0
   1c2f8:	mov	r0, r1
   1c2fc:	mov	r1, r5
   1c300:	umlal	r0, r1, fp, r6
   1c304:	cmp	r1, r5
   1c308:	movne	r2, #1
   1c30c:	movne	r3, #0
   1c310:	b	1c0d0 <__assert_fail@plt+0xa730>
   1c314:	umull	r0, r1, sl, r6
   1c318:	mov	r5, #0
   1c31c:	mov	r0, r1
   1c320:	mov	r1, r5
   1c324:	umlal	r0, r1, fp, r6
   1c328:	cmp	r1, r5
   1c32c:	movne	r2, #1
   1c330:	movne	r3, #0
   1c334:	b	1c190 <__assert_fail@plt+0xa7f0>
   1c338:	umull	r0, r1, sl, r6
   1c33c:	mov	r5, #0
   1c340:	mov	r0, r1
   1c344:	mov	r1, r5
   1c348:	umlal	r0, r1, fp, r6
   1c34c:	cmp	r1, r5
   1c350:	movne	r2, #1
   1c354:	movne	r3, #0
   1c358:	b	1bfe0 <__assert_fail@plt+0xa640>
   1c35c:	umull	r2, r3, sl, r0
   1c360:	str	r3, [sp]
   1c364:	mov	r3, #0
   1c368:	str	r3, [sp, #4]
   1c36c:	ldrd	r2, [sp]
   1c370:	umlal	r2, r3, fp, r0
   1c374:	cmp	r3, #0
   1c378:	movne	r6, #1
   1c37c:	movne	r7, #0
   1c380:	b	1c010 <__assert_fail@plt+0xa670>
   1c384:	mov	r3, #1
   1c388:	mvn	sl, #0
   1c38c:	mvn	fp, #0
   1c390:	b	1bedc <__assert_fail@plt+0xa53c>
   1c394:	umull	r2, r3, sl, r0
   1c398:	str	r3, [sp]
   1c39c:	mov	r3, #0
   1c3a0:	str	r3, [sp, #4]
   1c3a4:	ldrd	r2, [sp]
   1c3a8:	umlal	r2, r3, fp, r0
   1c3ac:	cmp	r3, #0
   1c3b0:	movne	r6, #1
   1c3b4:	movne	r7, #0
   1c3b8:	b	1c1c0 <__assert_fail@plt+0xa820>
   1c3bc:	umull	r2, r3, sl, r0
   1c3c0:	str	r3, [sp]
   1c3c4:	mov	r3, #0
   1c3c8:	str	r3, [sp, #4]
   1c3cc:	ldrd	r2, [sp]
   1c3d0:	umlal	r2, r3, fp, r0
   1c3d4:	cmp	r3, #0
   1c3d8:	movne	r6, #1
   1c3dc:	movne	r7, #0
   1c3e0:	b	1be5c <__assert_fail@plt+0xa4bc>
   1c3e4:	umull	r2, r3, r6, r0
   1c3e8:	mov	fp, #0
   1c3ec:	mov	sl, r3
   1c3f0:	umlal	sl, fp, ip, r0
   1c3f4:	cmp	fp, #0
   1c3f8:	beq	1c1e8 <__assert_fail@plt+0xa848>
   1c3fc:	mov	r2, #1
   1c400:	mov	r3, #0
   1c404:	strd	r2, [sp]
   1c408:	b	1c1e8 <__assert_fail@plt+0xa848>
   1c40c:	umull	r2, r3, r6, r0
   1c410:	str	r3, [sp]
   1c414:	mov	r3, #0
   1c418:	str	r3, [sp, #4]
   1c41c:	ldrd	r2, [sp]
   1c420:	umlal	r2, r3, ip, r0
   1c424:	cmp	r3, #0
   1c428:	movne	sl, #1
   1c42c:	movne	fp, #0
   1c430:	b	1bec0 <__assert_fail@plt+0xa520>
   1c434:	ldr	r3, [sp]
   1c438:	mov	fp, #0
   1c43c:	umull	r2, r3, r3, r0
   1c440:	mov	sl, r3
   1c444:	umlal	sl, fp, ip, r0
   1c448:	cmp	fp, #0
   1c44c:	movne	r6, #1
   1c450:	movne	r7, #0
   1c454:	b	1be88 <__assert_fail@plt+0xa4e8>
   1c458:	movw	r3, #58188	; 0xe34c
   1c45c:	movt	r3, #2
   1c460:	movw	r1, #58200	; 0xe358
   1c464:	movt	r1, #2
   1c468:	movw	r0, #58212	; 0xe364
   1c46c:	movt	r0, #2
   1c470:	mov	r2, #84	; 0x54
   1c474:	bl	119a0 <__assert_fail@plt>
   1c478:	cmp	r1, #0
   1c47c:	cmpne	r0, #0
   1c480:	beq	1c4cc <__assert_fail@plt+0xab2c>
   1c484:	strd	r4, [sp, #-16]!
   1c488:	umull	r4, r5, r0, r1
   1c48c:	str	r6, [sp, #8]
   1c490:	str	lr, [sp, #12]
   1c494:	adds	r3, r5, #0
   1c498:	movne	r3, #1
   1c49c:	cmp	r4, #0
   1c4a0:	blt	1c4ac <__assert_fail@plt+0xab0c>
   1c4a4:	cmp	r3, #0
   1c4a8:	beq	1c4d8 <__assert_fail@plt+0xab38>
   1c4ac:	bl	117d8 <__errno_location@plt>
   1c4b0:	mov	r3, #12
   1c4b4:	ldrd	r4, [sp]
   1c4b8:	ldr	r6, [sp, #8]
   1c4bc:	add	sp, sp, #12
   1c4c0:	str	r3, [r0]
   1c4c4:	mov	r0, #0
   1c4c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c4cc:	mov	r1, #1
   1c4d0:	mov	r0, r1
   1c4d4:	b	11508 <calloc@plt>
   1c4d8:	ldrd	r4, [sp]
   1c4dc:	ldr	r6, [sp, #8]
   1c4e0:	ldr	lr, [sp, #12]
   1c4e4:	add	sp, sp, #16
   1c4e8:	b	11508 <calloc@plt>
   1c4ec:	push	{r1, r2, r3}
   1c4f0:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c4f4:	strd	r6, [sp, #8]
   1c4f8:	str	lr, [sp, #16]
   1c4fc:	sub	sp, sp, #8
   1c500:	ldr	r1, [sp, #28]
   1c504:	add	r2, sp, #32
   1c508:	str	r2, [sp, #4]
   1c50c:	cmp	r1, #0
   1c510:	beq	1c5ec <__assert_fail@plt+0xac4c>
   1c514:	movw	r3, #1030	; 0x406
   1c518:	mov	r6, r0
   1c51c:	cmp	r1, r3
   1c520:	beq	1c5fc <__assert_fail@plt+0xac5c>
   1c524:	cmp	r1, #11
   1c528:	beq	1c5a4 <__assert_fail@plt+0xac04>
   1c52c:	ble	1c584 <__assert_fail@plt+0xabe4>
   1c530:	movw	r2, #1031	; 0x407
   1c534:	cmp	r1, r2
   1c538:	bgt	1c5c0 <__assert_fail@plt+0xac20>
   1c53c:	cmp	r1, r3
   1c540:	bge	1c550 <__assert_fail@plt+0xabb0>
   1c544:	movw	r3, #1025	; 0x401
   1c548:	cmp	r1, r3
   1c54c:	beq	1c5a4 <__assert_fail@plt+0xac04>
   1c550:	ldr	r3, [sp, #4]
   1c554:	mov	r0, r6
   1c558:	ldr	r2, [r3]
   1c55c:	bl	1188c <fcntl64@plt>
   1c560:	mov	r4, r0
   1c564:	mov	r0, r4
   1c568:	add	sp, sp, #8
   1c56c:	ldrd	r4, [sp]
   1c570:	ldrd	r6, [sp, #8]
   1c574:	ldr	lr, [sp, #16]
   1c578:	add	sp, sp, #20
   1c57c:	add	sp, sp, #12
   1c580:	bx	lr
   1c584:	cmp	r1, #4
   1c588:	beq	1c550 <__assert_fail@plt+0xabb0>
   1c58c:	bgt	1c5b4 <__assert_fail@plt+0xac14>
   1c590:	cmp	r1, #2
   1c594:	beq	1c550 <__assert_fail@plt+0xabb0>
   1c598:	bgt	1c5a4 <__assert_fail@plt+0xac04>
   1c59c:	cmp	r1, #1
   1c5a0:	bne	1c550 <__assert_fail@plt+0xabb0>
   1c5a4:	mov	r0, r6
   1c5a8:	bl	1188c <fcntl64@plt>
   1c5ac:	mov	r4, r0
   1c5b0:	b	1c564 <__assert_fail@plt+0xabc4>
   1c5b4:	cmp	r1, #9
   1c5b8:	bne	1c550 <__assert_fail@plt+0xabb0>
   1c5bc:	b	1c5a4 <__assert_fail@plt+0xac04>
   1c5c0:	movw	r3, #1033	; 0x409
   1c5c4:	cmp	r1, r3
   1c5c8:	beq	1c550 <__assert_fail@plt+0xabb0>
   1c5cc:	blt	1c5a4 <__assert_fail@plt+0xac04>
   1c5d0:	movw	r3, #1034	; 0x40a
   1c5d4:	cmp	r1, r3
   1c5d8:	bne	1c550 <__assert_fail@plt+0xabb0>
   1c5dc:	mov	r0, r6
   1c5e0:	bl	1188c <fcntl64@plt>
   1c5e4:	mov	r4, r0
   1c5e8:	b	1c564 <__assert_fail@plt+0xabc4>
   1c5ec:	ldr	r2, [sp, #32]
   1c5f0:	bl	1188c <fcntl64@plt>
   1c5f4:	mov	r4, r0
   1c5f8:	b	1c564 <__assert_fail@plt+0xabc4>
   1c5fc:	movw	r5, #62420	; 0xf3d4
   1c600:	movt	r5, #3
   1c604:	ldr	r7, [r2]
   1c608:	add	r2, sp, #36	; 0x24
   1c60c:	ldr	r3, [r5]
   1c610:	str	r2, [sp, #4]
   1c614:	mov	r2, r7
   1c618:	cmp	r3, #0
   1c61c:	blt	1c638 <__assert_fail@plt+0xac98>
   1c620:	bl	1188c <fcntl64@plt>
   1c624:	subs	r4, r0, #0
   1c628:	blt	1c6a0 <__assert_fail@plt+0xad00>
   1c62c:	mov	r3, #1
   1c630:	str	r3, [r5]
   1c634:	b	1c564 <__assert_fail@plt+0xabc4>
   1c638:	mov	r1, #0
   1c63c:	bl	1188c <fcntl64@plt>
   1c640:	subs	r4, r0, #0
   1c644:	blt	1c564 <__assert_fail@plt+0xabc4>
   1c648:	ldr	r3, [r5]
   1c64c:	cmn	r3, #1
   1c650:	bne	1c564 <__assert_fail@plt+0xabc4>
   1c654:	mov	r1, #1
   1c658:	mov	r0, r4
   1c65c:	bl	1188c <fcntl64@plt>
   1c660:	subs	r2, r0, #0
   1c664:	blt	1c680 <__assert_fail@plt+0xace0>
   1c668:	orr	r2, r2, #1
   1c66c:	mov	r1, #2
   1c670:	mov	r0, r4
   1c674:	bl	1188c <fcntl64@plt>
   1c678:	cmn	r0, #1
   1c67c:	bne	1c564 <__assert_fail@plt+0xabc4>
   1c680:	bl	117d8 <__errno_location@plt>
   1c684:	mov	r5, r0
   1c688:	mov	r0, r4
   1c68c:	ldr	r6, [r5]
   1c690:	mvn	r4, #0
   1c694:	bl	1197c <close@plt>
   1c698:	str	r6, [r5]
   1c69c:	b	1c564 <__assert_fail@plt+0xabc4>
   1c6a0:	bl	117d8 <__errno_location@plt>
   1c6a4:	ldr	r3, [r0]
   1c6a8:	cmp	r3, #22
   1c6ac:	bne	1c62c <__assert_fail@plt+0xac8c>
   1c6b0:	mov	r2, r7
   1c6b4:	mov	r0, r6
   1c6b8:	mov	r1, #0
   1c6bc:	bl	1188c <fcntl64@plt>
   1c6c0:	subs	r4, r0, #0
   1c6c4:	mvnge	r3, #0
   1c6c8:	strge	r3, [r5]
   1c6cc:	bge	1c654 <__assert_fail@plt+0xacb4>
   1c6d0:	b	1c564 <__assert_fail@plt+0xabc4>
   1c6d4:	str	r4, [sp, #-8]!
   1c6d8:	subs	r4, r0, #0
   1c6dc:	str	lr, [sp, #4]
   1c6e0:	sub	sp, sp, #8
   1c6e4:	beq	1c700 <__assert_fail@plt+0xad60>
   1c6e8:	bl	11730 <__freading@plt>
   1c6ec:	cmp	r0, #0
   1c6f0:	beq	1c700 <__assert_fail@plt+0xad60>
   1c6f4:	ldr	r3, [r4]
   1c6f8:	tst	r3, #256	; 0x100
   1c6fc:	bne	1c718 <__assert_fail@plt+0xad78>
   1c700:	mov	r0, r4
   1c704:	add	sp, sp, #8
   1c708:	ldr	r4, [sp]
   1c70c:	ldr	lr, [sp, #4]
   1c710:	add	sp, sp, #8
   1c714:	b	11568 <fflush@plt>
   1c718:	mov	r1, #1
   1c71c:	mov	r2, #0
   1c720:	mov	r3, #0
   1c724:	mov	r0, r4
   1c728:	str	r1, [sp]
   1c72c:	bl	1c794 <__assert_fail@plt+0xadf4>
   1c730:	b	1c700 <__assert_fail@plt+0xad60>
   1c734:	strd	r4, [sp, #-12]!
   1c738:	mov	r5, r0
   1c73c:	str	lr, [sp, #8]
   1c740:	sub	sp, sp, #12
   1c744:	bl	117d8 <__errno_location@plt>
   1c748:	mov	r4, r0
   1c74c:	mov	r2, #0
   1c750:	ldr	r3, [r4]
   1c754:	mov	r0, r5
   1c758:	str	r2, [r4]
   1c75c:	str	r3, [sp]
   1c760:	str	r3, [sp, #4]
   1c764:	bl	11598 <free@plt>
   1c768:	ldr	r3, [r4]
   1c76c:	add	r2, sp, #8
   1c770:	clz	r3, r3
   1c774:	lsr	r3, r3, #5
   1c778:	add	r3, r2, r3, lsl #2
   1c77c:	ldr	r3, [r3, #-8]
   1c780:	str	r3, [r4]
   1c784:	add	sp, sp, #12
   1c788:	ldrd	r4, [sp]
   1c78c:	add	sp, sp, #8
   1c790:	pop	{pc}		; (ldr pc, [sp], #4)
   1c794:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c798:	mov	r4, r0
   1c79c:	ldr	ip, [r0, #4]
   1c7a0:	strd	r6, [sp, #8]
   1c7a4:	str	lr, [sp, #20]
   1c7a8:	ldr	lr, [r0, #8]
   1c7ac:	str	r8, [sp, #16]
   1c7b0:	sub	sp, sp, #8
   1c7b4:	ldr	r5, [sp, #32]
   1c7b8:	cmp	lr, ip
   1c7bc:	beq	1c7e4 <__assert_fail@plt+0xae44>
   1c7c0:	mov	r0, r4
   1c7c4:	str	r5, [sp, #32]
   1c7c8:	add	sp, sp, #8
   1c7cc:	ldrd	r4, [sp]
   1c7d0:	ldrd	r6, [sp, #8]
   1c7d4:	ldr	r8, [sp, #16]
   1c7d8:	ldr	lr, [sp, #20]
   1c7dc:	add	sp, sp, #24
   1c7e0:	b	11880 <fseeko64@plt>
   1c7e4:	ldr	ip, [r0, #16]
   1c7e8:	ldr	lr, [r0, #20]
   1c7ec:	cmp	lr, ip
   1c7f0:	bne	1c7c0 <__assert_fail@plt+0xae20>
   1c7f4:	ldr	r8, [r0, #36]	; 0x24
   1c7f8:	cmp	r8, #0
   1c7fc:	bne	1c7c0 <__assert_fail@plt+0xae20>
   1c800:	mov	r6, r2
   1c804:	mov	r7, r3
   1c808:	bl	11844 <fileno@plt>
   1c80c:	mov	r2, r6
   1c810:	mov	r3, r7
   1c814:	str	r5, [sp]
   1c818:	bl	11694 <lseek64@plt>
   1c81c:	mvn	r3, #0
   1c820:	mvn	r2, #0
   1c824:	cmp	r1, r3
   1c828:	cmpeq	r0, r2
   1c82c:	beq	1c85c <__assert_fail@plt+0xaebc>
   1c830:	ldr	r3, [r4]
   1c834:	strd	r0, [r4, #80]	; 0x50
   1c838:	bic	r3, r3, #16
   1c83c:	str	r3, [r4]
   1c840:	mov	r0, r8
   1c844:	add	sp, sp, #8
   1c848:	ldrd	r4, [sp]
   1c84c:	ldrd	r6, [sp, #8]
   1c850:	ldr	r8, [sp, #16]
   1c854:	add	sp, sp, #20
   1c858:	pop	{pc}		; (ldr pc, [sp], #4)
   1c85c:	mvn	r8, #0
   1c860:	b	1c840 <__assert_fail@plt+0xaea0>
   1c864:	cmp	r0, #0
   1c868:	beq	1c874 <__assert_fail@plt+0xaed4>
   1c86c:	blt	1c87c <__assert_fail@plt+0xaedc>
   1c870:	b	1170c <malloc@plt>
   1c874:	mov	r0, #1
   1c878:	b	1170c <malloc@plt>
   1c87c:	str	r4, [sp, #-8]!
   1c880:	str	lr, [sp, #4]
   1c884:	bl	117d8 <__errno_location@plt>
   1c888:	mov	r3, #12
   1c88c:	ldr	r4, [sp]
   1c890:	add	sp, sp, #4
   1c894:	str	r3, [r0]
   1c898:	mov	r0, #0
   1c89c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c8a0:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c8a4:	mov	r5, r2
   1c8a8:	strd	r6, [sp, #8]
   1c8ac:	subs	r6, r0, #0
   1c8b0:	mov	r7, r1
   1c8b4:	str	lr, [sp, #16]
   1c8b8:	sub	sp, sp, #12
   1c8bc:	addeq	r6, sp, #4
   1c8c0:	mov	r0, r6
   1c8c4:	bl	116c4 <mbrtowc@plt>
   1c8c8:	cmp	r5, #0
   1c8cc:	cmnne	r0, #3
   1c8d0:	mov	r4, r0
   1c8d4:	bhi	1c8f0 <__assert_fail@plt+0xaf50>
   1c8d8:	mov	r0, r4
   1c8dc:	add	sp, sp, #12
   1c8e0:	ldrd	r4, [sp]
   1c8e4:	ldrd	r6, [sp, #8]
   1c8e8:	add	sp, sp, #16
   1c8ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1c8f0:	mov	r0, #0
   1c8f4:	bl	2c3a8 <__assert_fail@plt+0x1aa08>
   1c8f8:	cmp	r0, #0
   1c8fc:	bne	1c8d8 <__assert_fail@plt+0xaf38>
   1c900:	ldrb	r3, [r7]
   1c904:	mov	r4, #1
   1c908:	str	r3, [r6]
   1c90c:	b	1c8d8 <__assert_fail@plt+0xaf38>
   1c910:	cmp	r0, #0
   1c914:	beq	1c93c <__assert_fail@plt+0xaf9c>
   1c918:	cmp	r1, #0
   1c91c:	str	r4, [sp, #-8]!
   1c920:	str	lr, [sp, #4]
   1c924:	beq	1c944 <__assert_fail@plt+0xafa4>
   1c928:	blt	1c958 <__assert_fail@plt+0xafb8>
   1c92c:	ldr	r4, [sp]
   1c930:	ldr	lr, [sp, #4]
   1c934:	add	sp, sp, #8
   1c938:	b	11634 <realloc@plt>
   1c93c:	mov	r0, r1
   1c940:	b	1c864 <__assert_fail@plt+0xaec4>
   1c944:	bl	1c734 <__assert_fail@plt+0xad94>
   1c948:	ldr	r4, [sp]
   1c94c:	add	sp, sp, #4
   1c950:	mov	r0, #0
   1c954:	pop	{pc}		; (ldr pc, [sp], #4)
   1c958:	bl	117d8 <__errno_location@plt>
   1c95c:	mov	r3, #12
   1c960:	str	r3, [r0]
   1c964:	b	1c948 <__assert_fail@plt+0xafa8>
   1c968:	umull	r2, r3, r1, r2
   1c96c:	cmp	r3, #0
   1c970:	bne	1c97c <__assert_fail@plt+0xafdc>
   1c974:	mov	r1, r2
   1c978:	b	1c910 <__assert_fail@plt+0xaf70>
   1c97c:	str	r4, [sp, #-8]!
   1c980:	str	lr, [sp, #4]
   1c984:	bl	117d8 <__errno_location@plt>
   1c988:	mov	r3, #12
   1c98c:	ldr	r4, [sp]
   1c990:	add	sp, sp, #4
   1c994:	str	r3, [r0]
   1c998:	mov	r0, #0
   1c99c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c9a0:	clz	r3, r1
   1c9a4:	cmp	r0, #0
   1c9a8:	push	{lr}		; (str lr, [sp, #-4]!)
   1c9ac:	lsr	r3, r3, #5
   1c9b0:	mov	lr, r0
   1c9b4:	moveq	r0, #1
   1c9b8:	movne	r0, r3
   1c9bc:	cmp	r0, #0
   1c9c0:	movne	r0, #0
   1c9c4:	bne	1c9d8 <__assert_fail@plt+0xb038>
   1c9c8:	ldr	r2, [r1, #4]
   1c9cc:	ldr	r3, [lr, #4]
   1c9d0:	cmp	r3, r2
   1c9d4:	beq	1c9f4 <__assert_fail@plt+0xb054>
   1c9d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c9dc:	ldr	r2, [r1, #8]
   1c9e0:	ldr	ip, [lr, #8]
   1c9e4:	ldr	r2, [r2, r3, lsl #2]
   1c9e8:	ldr	ip, [ip, r3, lsl #2]
   1c9ec:	cmp	ip, r2
   1c9f0:	bne	1c9d8 <__assert_fail@plt+0xb038>
   1c9f4:	subs	r3, r3, #1
   1c9f8:	bpl	1c9dc <__assert_fail@plt+0xb03c>
   1c9fc:	mov	r0, #1
   1ca00:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca04:	strd	r4, [sp, #-16]!
   1ca08:	mov	r4, r0
   1ca0c:	mov	r5, r2
   1ca10:	str	r6, [sp, #8]
   1ca14:	mov	r6, r1
   1ca18:	str	lr, [sp, #12]
   1ca1c:	b	1ca24 <__assert_fail@plt+0xb084>
   1ca20:	mov	r4, r3
   1ca24:	ldr	r3, [r4, #4]
   1ca28:	cmp	r3, #0
   1ca2c:	bne	1ca20 <__assert_fail@plt+0xb080>
   1ca30:	ldr	r3, [r4, #8]
   1ca34:	cmp	r3, #0
   1ca38:	bne	1ca20 <__assert_fail@plt+0xb080>
   1ca3c:	b	1ca74 <__assert_fail@plt+0xb0d4>
   1ca40:	ldr	r2, [r4]
   1ca44:	cmp	r2, #0
   1ca48:	beq	1ca88 <__assert_fail@plt+0xb0e8>
   1ca4c:	ldr	r3, [r2, #8]
   1ca50:	sub	r1, r3, r4
   1ca54:	cmp	r3, #0
   1ca58:	clz	r1, r1
   1ca5c:	mov	r4, r2
   1ca60:	lsr	r1, r1, #5
   1ca64:	moveq	r2, #1
   1ca68:	movne	r2, r1
   1ca6c:	cmp	r2, #0
   1ca70:	beq	1ca20 <__assert_fail@plt+0xb080>
   1ca74:	mov	r1, r4
   1ca78:	mov	r0, r5
   1ca7c:	blx	r6
   1ca80:	cmp	r0, #0
   1ca84:	beq	1ca40 <__assert_fail@plt+0xb0a0>
   1ca88:	ldrd	r4, [sp]
   1ca8c:	ldr	r6, [sp, #8]
   1ca90:	add	sp, sp, #12
   1ca94:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca98:	ldr	r3, [r1, #40]	; 0x28
   1ca9c:	ldr	ip, [r1, #56]	; 0x38
   1caa0:	cmp	ip, r3
   1caa4:	ble	1cb68 <__assert_fail@plt+0xb1c8>
   1caa8:	str	r4, [sp, #-8]!
   1caac:	ldr	r4, [r1, #80]	; 0x50
   1cab0:	str	lr, [sp, #4]
   1cab4:	ldr	lr, [r1, #4]
   1cab8:	cmp	r4, #1
   1cabc:	ldrb	ip, [lr, r3]
   1cac0:	strb	ip, [r0]
   1cac4:	ble	1cae4 <__assert_fail@plt+0xb144>
   1cac8:	ldr	r4, [r1, #28]
   1cacc:	cmp	r3, r4
   1cad0:	beq	1cae4 <__assert_fail@plt+0xb144>
   1cad4:	ldr	r4, [r1, #8]
   1cad8:	ldr	r4, [r4, r3, lsl #2]
   1cadc:	cmn	r4, #1
   1cae0:	beq	1cb28 <__assert_fail@plt+0xb188>
   1cae4:	cmp	ip, #92	; 0x5c
   1cae8:	beq	1cb20 <__assert_fail@plt+0xb180>
   1caec:	cmp	ip, #91	; 0x5b
   1caf0:	beq	1cba8 <__assert_fail@plt+0xb208>
   1caf4:	cmp	ip, #93	; 0x5d
   1caf8:	beq	1cc00 <__assert_fail@plt+0xb260>
   1cafc:	cmp	ip, #94	; 0x5e
   1cb00:	bne	1cb44 <__assert_fail@plt+0xb1a4>
   1cb04:	mov	r2, #25
   1cb08:	mov	r3, #1
   1cb0c:	ldr	r4, [sp]
   1cb10:	add	sp, sp, #4
   1cb14:	strb	r2, [r0, #4]
   1cb18:	mov	r0, r3
   1cb1c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb20:	tst	r2, #1
   1cb24:	bne	1cb7c <__assert_fail@plt+0xb1dc>
   1cb28:	mov	r2, #1
   1cb2c:	mov	r3, r2
   1cb30:	strb	r2, [r0, #4]
   1cb34:	ldr	r4, [sp]
   1cb38:	add	sp, sp, #4
   1cb3c:	mov	r0, r3
   1cb40:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb44:	cmp	ip, #45	; 0x2d
   1cb48:	bne	1cb28 <__assert_fail@plt+0xb188>
   1cb4c:	mov	r2, #22
   1cb50:	mov	r3, #1
   1cb54:	ldr	r4, [sp]
   1cb58:	add	sp, sp, #4
   1cb5c:	strb	r2, [r0, #4]
   1cb60:	mov	r0, r3
   1cb64:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb68:	mov	r2, #2
   1cb6c:	mov	r3, #0
   1cb70:	strb	r2, [r0, #4]
   1cb74:	mov	r0, r3
   1cb78:	bx	lr
   1cb7c:	ldr	r2, [r1, #48]	; 0x30
   1cb80:	add	r3, r3, #1
   1cb84:	cmp	r3, r2
   1cb88:	bge	1cb28 <__assert_fail@plt+0xb188>
   1cb8c:	str	r3, [r1, #40]	; 0x28
   1cb90:	mov	r2, #1
   1cb94:	ldrb	r1, [lr, r3]
   1cb98:	mov	r3, r2
   1cb9c:	strb	r1, [r0]
   1cba0:	strb	r2, [r0, #4]
   1cba4:	b	1cb34 <__assert_fail@plt+0xb194>
   1cba8:	ldr	r1, [r1, #48]	; 0x30
   1cbac:	add	ip, r3, #1
   1cbb0:	cmp	ip, r1
   1cbb4:	bge	1cbe8 <__assert_fail@plt+0xb248>
   1cbb8:	add	r3, lr, r3
   1cbbc:	ldrb	r3, [r3, #1]
   1cbc0:	cmp	r3, #58	; 0x3a
   1cbc4:	strb	r3, [r0]
   1cbc8:	beq	1cc2c <__assert_fail@plt+0xb28c>
   1cbcc:	cmp	r3, #61	; 0x3d
   1cbd0:	beq	1cc1c <__assert_fail@plt+0xb27c>
   1cbd4:	cmp	r3, #46	; 0x2e
   1cbd8:	moveq	r2, #26
   1cbdc:	moveq	r3, #2
   1cbe0:	strbeq	r2, [r0, #4]
   1cbe4:	beq	1cb34 <__assert_fail@plt+0xb194>
   1cbe8:	mov	r2, #1
   1cbec:	mov	r1, #91	; 0x5b
   1cbf0:	mov	r3, r2
   1cbf4:	strb	r1, [r0]
   1cbf8:	strb	r2, [r0, #4]
   1cbfc:	b	1cb34 <__assert_fail@plt+0xb194>
   1cc00:	mov	r2, #21
   1cc04:	mov	r3, #1
   1cc08:	ldr	r4, [sp]
   1cc0c:	add	sp, sp, #4
   1cc10:	strb	r2, [r0, #4]
   1cc14:	mov	r0, r3
   1cc18:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc1c:	mov	r2, #28
   1cc20:	mov	r3, #2
   1cc24:	strb	r2, [r0, #4]
   1cc28:	b	1cb34 <__assert_fail@plt+0xb194>
   1cc2c:	tst	r2, #4
   1cc30:	beq	1cbe8 <__assert_fail@plt+0xb248>
   1cc34:	mov	r2, #30
   1cc38:	mov	r3, #2
   1cc3c:	strb	r2, [r0, #4]
   1cc40:	b	1cb34 <__assert_fail@plt+0xb194>
   1cc44:	ldrb	r3, [r1, #24]
   1cc48:	cmp	r3, #17
   1cc4c:	beq	1cc58 <__assert_fail@plt+0xb2b8>
   1cc50:	mov	r0, #0
   1cc54:	bx	lr
   1cc58:	ldr	r3, [r1, #20]
   1cc5c:	cmp	r0, r3
   1cc60:	bne	1cc50 <__assert_fail@plt+0xb2b0>
   1cc64:	ldrb	r3, [r1, #26]
   1cc68:	mov	r0, #0
   1cc6c:	orr	r3, r3, #8
   1cc70:	strb	r3, [r1, #26]
   1cc74:	bx	lr
   1cc78:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1cc7c:	strd	r6, [sp, #8]
   1cc80:	strd	r8, [sp, #16]
   1cc84:	ldr	r8, [r0, #84]	; 0x54
   1cc88:	strd	sl, [sp, #24]
   1cc8c:	mov	fp, r1
   1cc90:	str	lr, [sp, #32]
   1cc94:	sub	sp, sp, #44	; 0x2c
   1cc98:	str	r3, [sp, #24]
   1cc9c:	add	r3, r3, r3, lsl #1
   1cca0:	ldr	r9, [r8, #24]
   1cca4:	add	r9, r9, r3, lsl #2
   1cca8:	ldr	r1, [r9, #4]
   1ccac:	cmp	r1, #0
   1ccb0:	ble	1ce5c <__assert_fail@plt+0xb4bc>
   1ccb4:	ldr	r3, [sp, #80]	; 0x50
   1ccb8:	mov	r7, r2
   1ccbc:	mov	r2, #1
   1ccc0:	mov	sl, r0
   1ccc4:	mov	r4, #0
   1ccc8:	add	r3, r3, r2
   1cccc:	lsl	r2, r2, r7
   1ccd0:	add	r3, r3, r3, lsl #1
   1ccd4:	str	r2, [sp, #12]
   1ccd8:	str	r3, [sp, #28]
   1ccdc:	mvn	r3, r2
   1cce0:	str	r3, [sp, #16]
   1cce4:	b	1ccfc <__assert_fail@plt+0xb35c>
   1cce8:	cmp	r3, #4
   1ccec:	beq	1cd70 <__assert_fail@plt+0xb3d0>
   1ccf0:	add	r4, r4, #1
   1ccf4:	cmp	r1, r4
   1ccf8:	ble	1ce5c <__assert_fail@plt+0xb4bc>
   1ccfc:	ldr	r3, [r9, #8]
   1cd00:	ldr	r2, [r8]
   1cd04:	ldr	r5, [r3, r4, lsl #2]
   1cd08:	add	r3, r2, r5, lsl #3
   1cd0c:	ldrb	r3, [r3, #4]
   1cd10:	cmp	r3, #8
   1cd14:	beq	1cd3c <__assert_fail@plt+0xb39c>
   1cd18:	cmp	r3, #9
   1cd1c:	bne	1cce8 <__assert_fail@plt+0xb348>
   1cd20:	tst	fp, #2
   1cd24:	beq	1ccf0 <__assert_fail@plt+0xb350>
   1cd28:	ldr	r3, [r2, r5, lsl #3]
   1cd2c:	cmp	r3, r7
   1cd30:	bne	1ccf0 <__assert_fail@plt+0xb350>
   1cd34:	mov	r0, #0
   1cd38:	b	1cd54 <__assert_fail@plt+0xb3b4>
   1cd3c:	tst	fp, #1
   1cd40:	beq	1ccf0 <__assert_fail@plt+0xb350>
   1cd44:	ldr	r3, [r2, r5, lsl #3]
   1cd48:	cmp	r3, r7
   1cd4c:	bne	1ccf0 <__assert_fail@plt+0xb350>
   1cd50:	mvn	r0, #0
   1cd54:	add	sp, sp, #44	; 0x2c
   1cd58:	ldrd	r4, [sp]
   1cd5c:	ldrd	r6, [sp, #8]
   1cd60:	ldrd	r8, [sp, #16]
   1cd64:	ldrd	sl, [sp, #24]
   1cd68:	add	sp, sp, #32
   1cd6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cd70:	ldr	r3, [sp, #80]	; 0x50
   1cd74:	cmn	r3, #1
   1cd78:	beq	1ccf0 <__assert_fail@plt+0xb350>
   1cd7c:	and	r2, fp, #2
   1cd80:	ldr	r6, [sl, #116]	; 0x74
   1cd84:	add	r3, r5, r5, lsl #1
   1cd88:	str	r2, [sp, #20]
   1cd8c:	lsl	r3, r3, #2
   1cd90:	ldr	r2, [sp, #28]
   1cd94:	str	r9, [sp, #32]
   1cd98:	mov	r9, r3
   1cd9c:	str	r4, [sp, #36]	; 0x24
   1cda0:	ldr	r4, [sp, #24]
   1cda4:	add	r6, r6, r2, lsl #3
   1cda8:	ldr	r3, [r6, #-24]	; 0xffffffe8
   1cdac:	mov	r2, r7
   1cdb0:	mov	r1, fp
   1cdb4:	mov	r0, sl
   1cdb8:	cmp	r3, r5
   1cdbc:	bne	1ce34 <__assert_fail@plt+0xb494>
   1cdc0:	cmp	r7, #31
   1cdc4:	bgt	1cdd8 <__assert_fail@plt+0xb438>
   1cdc8:	ldr	r3, [r6, #-8]
   1cdcc:	ldr	ip, [sp, #12]
   1cdd0:	tst	ip, r3
   1cdd4:	beq	1ce34 <__assert_fail@plt+0xb494>
   1cdd8:	ldr	r3, [r8, #20]
   1cddc:	add	r3, r3, r9
   1cde0:	ldr	r3, [r3, #8]
   1cde4:	ldr	ip, [r3]
   1cde8:	cmp	r4, ip
   1cdec:	mov	r3, ip
   1cdf0:	beq	1ce64 <__assert_fail@plt+0xb4c4>
   1cdf4:	ldr	ip, [sp, #80]	; 0x50
   1cdf8:	str	ip, [sp]
   1cdfc:	bl	1cc78 <__assert_fail@plt+0xb2d8>
   1ce00:	cmn	r0, #1
   1ce04:	beq	1cd50 <__assert_fail@plt+0xb3b0>
   1ce08:	cmp	r0, #0
   1ce0c:	bne	1ce1c <__assert_fail@plt+0xb47c>
   1ce10:	ldr	r3, [sp, #20]
   1ce14:	cmp	r3, #0
   1ce18:	bne	1cd34 <__assert_fail@plt+0xb394>
   1ce1c:	cmp	r7, #31
   1ce20:	bgt	1ce34 <__assert_fail@plt+0xb494>
   1ce24:	ldr	r3, [r6, #-8]
   1ce28:	ldr	r2, [sp, #16]
   1ce2c:	and	r3, r3, r2
   1ce30:	str	r3, [r6, #-8]
   1ce34:	add	r6, r6, #24
   1ce38:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   1ce3c:	cmp	r3, #0
   1ce40:	bne	1cda8 <__assert_fail@plt+0xb408>
   1ce44:	ldr	r9, [sp, #32]
   1ce48:	ldr	r4, [sp, #36]	; 0x24
   1ce4c:	ldr	r1, [r9, #4]
   1ce50:	add	r4, r4, #1
   1ce54:	cmp	r1, r4
   1ce58:	bgt	1ccfc <__assert_fail@plt+0xb35c>
   1ce5c:	asr	r0, fp, #1
   1ce60:	b	1cd54 <__assert_fail@plt+0xb3b4>
   1ce64:	sbfx	r0, fp, #0, #1
   1ce68:	b	1cd54 <__assert_fail@plt+0xb3b4>
   1ce6c:	ldr	ip, [r0, #116]	; 0x74
   1ce70:	add	r1, r1, r1, lsl #1
   1ce74:	strd	r4, [sp, #-12]!
   1ce78:	ldr	r5, [sp, #16]
   1ce7c:	add	r1, ip, r1, lsl #3
   1ce80:	ldr	ip, [r1, #8]
   1ce84:	str	lr, [sp, #8]
   1ce88:	ldr	lr, [sp, #12]
   1ce8c:	cmp	ip, lr
   1ce90:	bgt	1cef4 <__assert_fail@plt+0xb554>
   1ce94:	ldr	r4, [r1, #12]
   1ce98:	cmp	r4, lr
   1ce9c:	blt	1cee4 <__assert_fail@plt+0xb544>
   1cea0:	sub	r1, ip, lr
   1cea4:	cmp	r4, lr
   1cea8:	clz	r1, r1
   1ceac:	lsr	r1, r1, #5
   1ceb0:	beq	1cecc <__assert_fail@plt+0xb52c>
   1ceb4:	cmp	ip, lr
   1ceb8:	movne	r0, #0
   1cebc:	beq	1ced0 <__assert_fail@plt+0xb530>
   1cec0:	ldrd	r4, [sp]
   1cec4:	add	sp, sp, #8
   1cec8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cecc:	orr	r1, r1, #2
   1ced0:	str	r5, [sp, #12]
   1ced4:	ldrd	r4, [sp]
   1ced8:	ldr	lr, [sp, #8]
   1cedc:	add	sp, sp, #12
   1cee0:	b	1cc78 <__assert_fail@plt+0xb2d8>
   1cee4:	ldrd	r4, [sp]
   1cee8:	add	sp, sp, #8
   1ceec:	mov	r0, #1
   1cef0:	pop	{pc}		; (ldr pc, [sp], #4)
   1cef4:	mvn	r0, #0
   1cef8:	b	1cec0 <__assert_fail@plt+0xb520>
   1cefc:	ldr	r3, [r0, #80]	; 0x50
   1cf00:	strd	r4, [sp, #-16]!
   1cf04:	mov	r4, r0
   1cf08:	mov	r5, r1
   1cf0c:	str	r6, [sp, #8]
   1cf10:	str	lr, [sp, #12]
   1cf14:	cmp	r3, #1
   1cf18:	ble	1cf60 <__assert_fail@plt+0xb5c0>
   1cf1c:	cmn	r1, #-1073741823	; 0xc0000001
   1cf20:	bhi	1cfa0 <__assert_fail@plt+0xb600>
   1cf24:	lsl	r6, r1, #2
   1cf28:	ldr	r0, [r0, #8]
   1cf2c:	mov	r1, r6
   1cf30:	bl	1c910 <__assert_fail@plt+0xaf70>
   1cf34:	subs	r3, r0, #0
   1cf38:	beq	1cfa0 <__assert_fail@plt+0xb600>
   1cf3c:	ldr	r0, [r4, #12]
   1cf40:	str	r3, [r4, #8]
   1cf44:	cmp	r0, #0
   1cf48:	beq	1cf60 <__assert_fail@plt+0xb5c0>
   1cf4c:	mov	r1, r6
   1cf50:	bl	1c910 <__assert_fail@plt+0xaf70>
   1cf54:	cmp	r0, #0
   1cf58:	beq	1cfa0 <__assert_fail@plt+0xb600>
   1cf5c:	str	r0, [r4, #12]
   1cf60:	ldrb	r3, [r4, #75]	; 0x4b
   1cf64:	cmp	r3, #0
   1cf68:	bne	1cf84 <__assert_fail@plt+0xb5e4>
   1cf6c:	str	r5, [r4, #36]	; 0x24
   1cf70:	mov	r0, #0
   1cf74:	ldrd	r4, [sp]
   1cf78:	ldr	r6, [sp, #8]
   1cf7c:	add	sp, sp, #12
   1cf80:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf84:	mov	r1, r5
   1cf88:	ldr	r0, [r4, #4]
   1cf8c:	bl	1c910 <__assert_fail@plt+0xaf70>
   1cf90:	cmp	r0, #0
   1cf94:	beq	1cfa0 <__assert_fail@plt+0xb600>
   1cf98:	str	r0, [r4, #4]
   1cf9c:	b	1cf6c <__assert_fail@plt+0xb5cc>
   1cfa0:	ldrd	r4, [sp]
   1cfa4:	mov	r0, #12
   1cfa8:	ldr	r6, [sp, #8]
   1cfac:	add	sp, sp, #12
   1cfb0:	pop	{pc}		; (ldr pc, [sp], #4)
   1cfb4:	strd	r4, [sp, #-16]!
   1cfb8:	mov	r5, r1
   1cfbc:	mov	r4, r0
   1cfc0:	ldr	r2, [r0]
   1cfc4:	ldmib	r0, {r1, r3}
   1cfc8:	str	r6, [sp, #8]
   1cfcc:	str	lr, [sp, #12]
   1cfd0:	cmp	r2, r1
   1cfd4:	beq	1cff8 <__assert_fail@plt+0xb658>
   1cfd8:	add	r2, r1, #1
   1cfdc:	mov	r0, #1
   1cfe0:	str	r2, [r4, #4]
   1cfe4:	str	r5, [r3, r1, lsl #2]
   1cfe8:	ldrd	r4, [sp]
   1cfec:	ldr	r6, [sp, #8]
   1cff0:	add	sp, sp, #12
   1cff4:	pop	{pc}		; (ldr pc, [sp], #4)
   1cff8:	add	r1, r1, #1
   1cffc:	mov	r0, r3
   1d000:	lsl	r3, r1, #1
   1d004:	lsl	r1, r1, #3
   1d008:	str	r3, [r4]
   1d00c:	bl	1c910 <__assert_fail@plt+0xaf70>
   1d010:	subs	r3, r0, #0
   1d014:	beq	1d024 <__assert_fail@plt+0xb684>
   1d018:	str	r3, [r4, #8]
   1d01c:	ldr	r1, [r4, #4]
   1d020:	b	1cfd8 <__assert_fail@plt+0xb638>
   1d024:	mov	r0, r3
   1d028:	b	1cfe8 <__assert_fail@plt+0xb648>
   1d02c:	ldr	r3, [r1, #8]
   1d030:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d034:	mov	r5, r1
   1d038:	mov	r4, #0
   1d03c:	strd	r6, [sp, #8]
   1d040:	mov	r7, r1
   1d044:	mov	r6, r2
   1d048:	str	r8, [sp, #16]
   1d04c:	mov	r8, r0
   1d050:	str	lr, [sp, #20]
   1d054:	lsl	r0, r3, #2
   1d058:	str	r2, [r5], #16
   1d05c:	str	r3, [r1, #16]
   1d060:	str	r4, [r1, #20]
   1d064:	bl	1c864 <__assert_fail@plt+0xaec4>
   1d068:	cmp	r0, r4
   1d06c:	str	r0, [r7, #24]
   1d070:	beq	1d118 <__assert_fail@plt+0xb778>
   1d074:	ldr	r0, [r7, #8]
   1d078:	cmp	r0, #0
   1d07c:	bgt	1d090 <__assert_fail@plt+0xb6f0>
   1d080:	b	1d0cc <__assert_fail@plt+0xb72c>
   1d084:	add	r4, r4, #1
   1d088:	cmp	r0, r4
   1d08c:	ble	1d0cc <__assert_fail@plt+0xb72c>
   1d090:	ldr	r2, [r7, #12]
   1d094:	ldr	r3, [r8]
   1d098:	ldr	r1, [r2, r4, lsl #2]
   1d09c:	add	r3, r3, r1, lsl #3
   1d0a0:	ldrb	r3, [r3, #4]
   1d0a4:	tst	r3, #8
   1d0a8:	bne	1d084 <__assert_fail@plt+0xb6e4>
   1d0ac:	mov	r0, r5
   1d0b0:	bl	1cfb4 <__assert_fail@plt+0xb614>
   1d0b4:	cmp	r0, #0
   1d0b8:	beq	1d118 <__assert_fail@plt+0xb778>
   1d0bc:	ldr	r0, [r7, #8]
   1d0c0:	add	r4, r4, #1
   1d0c4:	cmp	r0, r4
   1d0c8:	bgt	1d090 <__assert_fail@plt+0xb6f0>
   1d0cc:	ldr	r5, [r8, #32]
   1d0d0:	ldr	r4, [r8, #68]	; 0x44
   1d0d4:	and	r6, r6, r4
   1d0d8:	add	r6, r6, r6, lsl #1
   1d0dc:	lsl	r4, r6, #2
   1d0e0:	add	r6, r5, r4
   1d0e4:	ldr	r3, [r5, r4]
   1d0e8:	ldrd	r0, [r6, #4]
   1d0ec:	add	r2, r3, #1
   1d0f0:	cmp	r0, r3
   1d0f4:	ble	1d120 <__assert_fail@plt+0xb780>
   1d0f8:	mov	r0, #0
   1d0fc:	str	r2, [r5, r4]
   1d100:	str	r7, [r1, r3, lsl #2]
   1d104:	ldrd	r4, [sp]
   1d108:	ldrd	r6, [sp, #8]
   1d10c:	ldr	r8, [sp, #16]
   1d110:	add	sp, sp, #20
   1d114:	pop	{pc}		; (ldr pc, [sp], #4)
   1d118:	mov	r0, #12
   1d11c:	b	1d104 <__assert_fail@plt+0xb764>
   1d120:	mov	r0, r1
   1d124:	lsl	r1, r2, #3
   1d128:	lsl	r8, r2, #1
   1d12c:	bl	1c910 <__assert_fail@plt+0xaf70>
   1d130:	subs	r1, r0, #0
   1d134:	beq	1d118 <__assert_fail@plt+0xb778>
   1d138:	ldr	r3, [r5, r4]
   1d13c:	str	r8, [r6, #4]
   1d140:	str	r1, [r6, #8]
   1d144:	add	r2, r3, #1
   1d148:	b	1d0f8 <__assert_fail@plt+0xb758>
   1d14c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1d150:	mov	r5, r0
   1d154:	ldr	r4, [r0, #28]
   1d158:	ldr	r3, [r0, #48]	; 0x30
   1d15c:	strd	r6, [sp, #8]
   1d160:	ldr	r7, [r0, #36]	; 0x24
   1d164:	strd	r8, [sp, #16]
   1d168:	str	lr, [sp, #24]
   1d16c:	sub	sp, sp, #84	; 0x54
   1d170:	cmp	r7, r3
   1d174:	movge	r7, r3
   1d178:	cmp	r7, r4
   1d17c:	ble	1d210 <__assert_fail@plt+0xb870>
   1d180:	add	r8, r0, #16
   1d184:	mvn	r6, #0
   1d188:	ldr	ip, [r5, #64]	; 0x40
   1d18c:	sub	r2, r7, r4
   1d190:	ldrd	r0, [r8]
   1d194:	cmp	ip, #0
   1d198:	strd	r0, [sp, #8]
   1d19c:	bne	1d26c <__assert_fail@plt+0xb8cc>
   1d1a0:	ldr	r1, [r5]
   1d1a4:	ldr	r3, [r5, #24]
   1d1a8:	add	r3, r4, r3
   1d1ac:	add	r1, r1, r3
   1d1b0:	mov	r3, r8
   1d1b4:	add	r0, sp, #4
   1d1b8:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   1d1bc:	sub	r3, r0, #1
   1d1c0:	cmn	r3, #3
   1d1c4:	bhi	1d230 <__assert_fail@plt+0xb890>
   1d1c8:	cmn	r0, #2
   1d1cc:	ldrne	r1, [sp, #4]
   1d1d0:	beq	1d2d0 <__assert_fail@plt+0xb930>
   1d1d4:	add	r0, r4, r0
   1d1d8:	add	ip, r4, #1
   1d1dc:	ldr	r2, [r5, #8]
   1d1e0:	cmp	ip, r0
   1d1e4:	add	r3, r2, r4, lsl #2
   1d1e8:	str	r1, [r2, r4, lsl #2]
   1d1ec:	bge	1d264 <__assert_fail@plt+0xb8c4>
   1d1f0:	sub	r2, r2, #4
   1d1f4:	add	r2, r2, r0, lsl #2
   1d1f8:	str	r6, [r3, #4]!
   1d1fc:	cmp	r2, r3
   1d200:	bne	1d1f8 <__assert_fail@plt+0xb858>
   1d204:	mov	r4, r0
   1d208:	cmp	r7, r4
   1d20c:	bgt	1d188 <__assert_fail@plt+0xb7e8>
   1d210:	str	r4, [r5, #28]
   1d214:	str	r4, [r5, #32]
   1d218:	add	sp, sp, #84	; 0x54
   1d21c:	ldrd	r4, [sp]
   1d220:	ldrd	r6, [sp, #8]
   1d224:	ldrd	r8, [sp, #16]
   1d228:	add	sp, sp, #24
   1d22c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d230:	ldr	r3, [r5]
   1d234:	mov	r0, #1
   1d238:	ldr	r1, [r5, #24]
   1d23c:	ldr	r2, [r5, #64]	; 0x40
   1d240:	add	r3, r3, r4
   1d244:	ldrb	r1, [r3, r1]
   1d248:	cmp	r2, #0
   1d24c:	str	r1, [sp, #4]
   1d250:	ldrbne	r1, [r2, r1]
   1d254:	ldrd	r2, [sp, #8]
   1d258:	strne	r1, [sp, #4]
   1d25c:	strd	r2, [r8]
   1d260:	b	1d1d4 <__assert_fail@plt+0xb834>
   1d264:	mov	r4, ip
   1d268:	b	1d208 <__assert_fail@plt+0xb868>
   1d26c:	ldr	r3, [r5, #80]	; 0x50
   1d270:	cmp	r3, #0
   1d274:	cmpgt	r2, #0
   1d278:	ble	1d2c8 <__assert_fail@plt+0xb928>
   1d27c:	add	r0, sp, #16
   1d280:	mov	r1, #0
   1d284:	b	1d28c <__assert_fail@plt+0xb8ec>
   1d288:	ldr	ip, [r5, #64]	; 0x40
   1d28c:	ldm	r5, {r3, lr}
   1d290:	ldr	r9, [r5, #24]
   1d294:	add	r3, r3, r4
   1d298:	add	r3, r3, r1
   1d29c:	ldrb	r9, [r3, r9]
   1d2a0:	add	r3, lr, r4
   1d2a4:	ldrb	ip, [ip, r9]
   1d2a8:	strb	ip, [r3, r1]
   1d2ac:	add	r1, r1, #1
   1d2b0:	ldr	r3, [r5, #80]	; 0x50
   1d2b4:	strb	ip, [r0], #1
   1d2b8:	cmp	r2, r3
   1d2bc:	movlt	r3, r2
   1d2c0:	cmp	r3, r1
   1d2c4:	bgt	1d288 <__assert_fail@plt+0xb8e8>
   1d2c8:	add	r1, sp, #16
   1d2cc:	b	1d1b0 <__assert_fail@plt+0xb810>
   1d2d0:	ldr	r2, [r5, #36]	; 0x24
   1d2d4:	ldr	r3, [r5, #48]	; 0x30
   1d2d8:	cmp	r2, r3
   1d2dc:	bge	1d230 <__assert_fail@plt+0xb890>
   1d2e0:	ldrd	r2, [sp, #8]
   1d2e4:	strd	r2, [r5, #16]
   1d2e8:	b	1d210 <__assert_fail@plt+0xb870>
   1d2ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d2f0:	mov	r5, r0
   1d2f4:	ldr	r3, [r0, #48]	; 0x30
   1d2f8:	strd	r6, [sp, #8]
   1d2fc:	strd	r8, [sp, #16]
   1d300:	ldr	r7, [r0, #36]	; 0x24
   1d304:	strd	sl, [sp, #24]
   1d308:	str	lr, [sp, #32]
   1d30c:	sub	sp, sp, #100	; 0x64
   1d310:	ldrb	r2, [r0, #74]	; 0x4a
   1d314:	cmp	r7, r3
   1d318:	ldr	r6, [r0, #28]
   1d31c:	movge	r7, r3
   1d320:	cmp	r2, #0
   1d324:	bne	1d334 <__assert_fail@plt+0xb994>
   1d328:	ldr	r3, [r0, #64]	; 0x40
   1d32c:	cmp	r3, #0
   1d330:	beq	1d47c <__assert_fail@plt+0xbadc>
   1d334:	ldr	r4, [r5, #32]
   1d338:	cmp	r6, r7
   1d33c:	bge	1d454 <__assert_fail@plt+0xbab4>
   1d340:	add	r3, r5, #16
   1d344:	str	r3, [sp, #12]
   1d348:	sub	r3, r7, r6
   1d34c:	str	r3, [sp, #8]
   1d350:	add	r3, sp, #20
   1d354:	mov	r9, r3
   1d358:	ldrd	r0, [r5, #16]
   1d35c:	ldr	r3, [r5, #64]	; 0x40
   1d360:	strd	r0, [sp, #24]
   1d364:	cmp	r3, #0
   1d368:	bne	1d658 <__assert_fail@plt+0xbcb8>
   1d36c:	ldr	r8, [r5]
   1d370:	ldr	r3, [r5, #24]
   1d374:	add	r3, r4, r3
   1d378:	add	r8, r8, r3
   1d37c:	mov	r0, r9
   1d380:	mov	r1, r8
   1d384:	ldrd	r2, [sp, #8]
   1d388:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   1d38c:	sub	r3, r0, #1
   1d390:	mov	sl, r0
   1d394:	cmn	r3, #4
   1d398:	str	r3, [sp, #4]
   1d39c:	bhi	1d6d8 <__assert_fail@plt+0xbd38>
   1d3a0:	ldr	r3, [sp, #20]
   1d3a4:	mov	r9, r6
   1d3a8:	mov	r0, r3
   1d3ac:	str	r3, [sp]
   1d3b0:	bl	11940 <towupper@plt>
   1d3b4:	ldr	r3, [sp]
   1d3b8:	mov	fp, r0
   1d3bc:	cmp	r3, r0
   1d3c0:	beq	1d6c0 <__assert_fail@plt+0xbd20>
   1d3c4:	add	r3, sp, #32
   1d3c8:	add	r2, sp, #24
   1d3cc:	mov	r0, r3
   1d3d0:	mov	r1, fp
   1d3d4:	str	r3, [sp]
   1d3d8:	bl	1152c <wcrtomb@plt>
   1d3dc:	cmp	sl, r0
   1d3e0:	mov	r3, r0
   1d3e4:	bne	1d76c <__assert_fail@plt+0xbdcc>
   1d3e8:	ldr	r0, [r5, #4]
   1d3ec:	mov	r2, sl
   1d3f0:	ldr	r1, [sp]
   1d3f4:	add	r0, r0, r6
   1d3f8:	bl	115d4 <memcpy@plt>
   1d3fc:	ldrb	r3, [r5, #76]	; 0x4c
   1d400:	cmp	r3, #0
   1d404:	bne	1d74c <__assert_fail@plt+0xbdac>
   1d408:	add	r2, sl, r4
   1d40c:	ldr	r3, [r5, #8]
   1d410:	add	sl, sl, r9
   1d414:	add	r6, r6, #1
   1d418:	cmp	r6, sl
   1d41c:	mov	r4, r2
   1d420:	mvnlt	r2, #0
   1d424:	str	fp, [r3, r9, lsl #2]
   1d428:	add	r9, r3, r9, lsl #2
   1d42c:	sublt	r3, r3, #4
   1d430:	addlt	r3, r3, sl, lsl #2
   1d434:	bge	1d338 <__assert_fail@plt+0xb998>
   1d438:	str	r2, [r9, #4]!
   1d43c:	cmp	r3, r9
   1d440:	bne	1d438 <__assert_fail@plt+0xba98>
   1d444:	mov	r6, sl
   1d448:	b	1d338 <__assert_fail@plt+0xb998>
   1d44c:	ldrd	r2, [sp, #24]
   1d450:	strd	r2, [r5, #16]
   1d454:	mov	r0, #0
   1d458:	str	r6, [r5, #28]
   1d45c:	str	r4, [r5, #32]
   1d460:	add	sp, sp, #100	; 0x64
   1d464:	ldrd	r4, [sp]
   1d468:	ldrd	r6, [sp, #8]
   1d46c:	ldrd	r8, [sp, #16]
   1d470:	ldrd	sl, [sp, #24]
   1d474:	add	sp, sp, #32
   1d478:	pop	{pc}		; (ldr pc, [sp], #4)
   1d47c:	ldrb	r3, [r0, #76]	; 0x4c
   1d480:	cmp	r3, #0
   1d484:	bne	1d334 <__assert_fail@plt+0xb994>
   1d488:	cmp	r6, r7
   1d48c:	bge	1d5b4 <__assert_fail@plt+0xbc14>
   1d490:	add	fp, r0, #16
   1d494:	str	r7, [sp]
   1d498:	str	fp, [sp, #12]
   1d49c:	ldr	r8, [r5]
   1d4a0:	mov	r4, r6
   1d4a4:	ldr	r7, [r5, #24]
   1d4a8:	add	r3, r8, r7
   1d4ac:	ldrb	sl, [r3, r6]
   1d4b0:	tst	sl, #128	; 0x80
   1d4b4:	bne	1d4d8 <__assert_fail@plt+0xbb38>
   1d4b8:	mov	r0, fp
   1d4bc:	bl	11604 <mbsinit@plt>
   1d4c0:	cmp	r0, #0
   1d4c4:	beq	1d4d8 <__assert_fail@plt+0xbb38>
   1d4c8:	mov	r0, sl
   1d4cc:	bl	11940 <towupper@plt>
   1d4d0:	bics	r3, r0, #127	; 0x7f
   1d4d4:	beq	1d5e8 <__assert_fail@plt+0xbc48>
   1d4d8:	ldr	r3, [sp]
   1d4dc:	add	r1, r7, r6
   1d4e0:	add	r0, sp, #20
   1d4e4:	add	r1, r8, r1
   1d4e8:	ldrd	r8, [fp]
   1d4ec:	sub	r3, r3, r6
   1d4f0:	mov	r2, r3
   1d4f4:	str	r3, [sp, #8]
   1d4f8:	mov	r3, fp
   1d4fc:	strd	r8, [sp, #24]
   1d500:	mov	r9, r0
   1d504:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   1d508:	sub	r3, r0, #1
   1d50c:	mov	r8, r0
   1d510:	cmn	r3, #4
   1d514:	bhi	1d600 <__assert_fail@plt+0xbc60>
   1d518:	ldr	r3, [sp, #20]
   1d51c:	mov	r0, r3
   1d520:	str	r3, [sp, #4]
   1d524:	bl	11940 <towupper@plt>
   1d528:	ldr	r3, [sp, #4]
   1d52c:	mov	sl, r0
   1d530:	cmp	r3, r0
   1d534:	beq	1d5c4 <__assert_fail@plt+0xbc24>
   1d538:	add	r3, sp, #32
   1d53c:	add	r2, sp, #24
   1d540:	mov	r0, r3
   1d544:	mov	r1, sl
   1d548:	str	r3, [sp, #4]
   1d54c:	bl	1152c <wcrtomb@plt>
   1d550:	cmp	r8, r0
   1d554:	bne	1d6b4 <__assert_fail@plt+0xbd14>
   1d558:	ldr	r0, [r5, #4]
   1d55c:	mov	r2, r8
   1d560:	ldr	r3, [sp, #4]
   1d564:	add	r0, r0, r6
   1d568:	mov	r1, r3
   1d56c:	bl	115d4 <memcpy@plt>
   1d570:	ldr	r3, [r5, #8]
   1d574:	add	r8, r8, r4
   1d578:	add	r6, r6, #1
   1d57c:	cmp	r6, r8
   1d580:	str	sl, [r3, r4, lsl #2]
   1d584:	add	r4, r3, r4, lsl #2
   1d588:	bge	1d5a8 <__assert_fail@plt+0xbc08>
   1d58c:	sub	r3, r3, #4
   1d590:	add	r3, r3, r8, lsl #2
   1d594:	mvn	r2, #0
   1d598:	str	r2, [r4, #4]!
   1d59c:	cmp	r4, r3
   1d5a0:	bne	1d594 <__assert_fail@plt+0xbbf4>
   1d5a4:	mov	r6, r8
   1d5a8:	ldr	r3, [sp]
   1d5ac:	cmp	r3, r6
   1d5b0:	bgt	1d49c <__assert_fail@plt+0xbafc>
   1d5b4:	mov	r0, #0
   1d5b8:	str	r6, [r5, #28]
   1d5bc:	str	r6, [r5, #32]
   1d5c0:	b	1d460 <__assert_fail@plt+0xbac0>
   1d5c4:	ldr	r1, [r5]
   1d5c8:	mov	r2, r8
   1d5cc:	ldr	r3, [r5, #24]
   1d5d0:	ldr	r0, [r5, #4]
   1d5d4:	add	r3, r6, r3
   1d5d8:	add	r1, r1, r3
   1d5dc:	add	r0, r0, r6
   1d5e0:	bl	115d4 <memcpy@plt>
   1d5e4:	b	1d570 <__assert_fail@plt+0xbbd0>
   1d5e8:	ldr	r3, [r5, #4]
   1d5ec:	strb	r0, [r3, r6]
   1d5f0:	ldr	r3, [r5, #8]
   1d5f4:	str	r0, [r3, r6, lsl #2]
   1d5f8:	add	r6, r6, #1
   1d5fc:	b	1d5a8 <__assert_fail@plt+0xbc08>
   1d600:	cmn	r3, #3
   1d604:	beq	1d630 <__assert_fail@plt+0xbc90>
   1d608:	ldr	r3, [r5, #4]
   1d60c:	cmn	r0, #1
   1d610:	strb	sl, [r3, r6]
   1d614:	add	r6, r6, #1
   1d618:	ldr	r3, [r5, #8]
   1d61c:	str	sl, [r3, r4, lsl #2]
   1d620:	bne	1d5a8 <__assert_fail@plt+0xbc08>
   1d624:	ldrd	r2, [sp, #24]
   1d628:	strd	r2, [fp]
   1d62c:	b	1d5a8 <__assert_fail@plt+0xbc08>
   1d630:	ldr	r2, [r5, #36]	; 0x24
   1d634:	ldr	r3, [r5, #48]	; 0x30
   1d638:	cmp	r2, r3
   1d63c:	blt	1d870 <__assert_fail@plt+0xbed0>
   1d640:	ldr	r3, [r5, #4]
   1d644:	strb	sl, [r3, r6]
   1d648:	add	r6, r6, #1
   1d64c:	ldr	r3, [r5, #8]
   1d650:	str	sl, [r3, r4, lsl #2]
   1d654:	b	1d5a8 <__assert_fail@plt+0xbc08>
   1d658:	ldr	r2, [sp, #8]
   1d65c:	ldr	r8, [r5, #80]	; 0x50
   1d660:	cmp	r2, #0
   1d664:	cmpgt	r8, #0
   1d668:	ble	1d8a0 <__assert_fail@plt+0xbf00>
   1d66c:	ldr	lr, [r5]
   1d670:	add	r1, sp, #32
   1d674:	ldr	r2, [r5, #24]
   1d678:	str	r1, [sp]
   1d67c:	ldr	r0, [sp, #8]
   1d680:	add	r2, r4, r2
   1d684:	add	lr, lr, r2
   1d688:	cmp	r8, r0
   1d68c:	mov	r2, lr
   1d690:	movge	r8, r0
   1d694:	ldrb	r0, [r2], #1
   1d698:	ldrb	r0, [r3, r0]
   1d69c:	sub	ip, r2, lr
   1d6a0:	cmp	ip, r8
   1d6a4:	strb	r0, [r1], #1
   1d6a8:	blt	1d694 <__assert_fail@plt+0xbcf4>
   1d6ac:	ldr	r8, [sp]
   1d6b0:	b	1d37c <__assert_fail@plt+0xb9dc>
   1d6b4:	mov	r4, r6
   1d6b8:	ldr	r7, [sp]
   1d6bc:	b	1d358 <__assert_fail@plt+0xb9b8>
   1d6c0:	ldr	r0, [r5, #4]
   1d6c4:	mov	r1, r8
   1d6c8:	mov	r2, sl
   1d6cc:	add	r0, r0, r6
   1d6d0:	bl	115d4 <memcpy@plt>
   1d6d4:	b	1d3fc <__assert_fail@plt+0xba5c>
   1d6d8:	ldr	r3, [sp, #4]
   1d6dc:	cmn	r3, #3
   1d6e0:	bne	1d6f4 <__assert_fail@plt+0xbd54>
   1d6e4:	ldr	r2, [r5, #36]	; 0x24
   1d6e8:	ldr	r3, [r5, #48]	; 0x30
   1d6ec:	cmp	r2, r3
   1d6f0:	blt	1d44c <__assert_fail@plt+0xbaac>
   1d6f4:	ldr	r3, [r5]
   1d6f8:	ldr	r1, [r5, #24]
   1d6fc:	ldr	r2, [r5, #64]	; 0x40
   1d700:	add	r3, r3, r4
   1d704:	ldrb	r3, [r3, r1]
   1d708:	cmp	r2, #0
   1d70c:	ldr	r1, [r5, #4]
   1d710:	ldrbne	r3, [r2, r3]
   1d714:	lsl	r2, r6, #2
   1d718:	strb	r3, [r1, r6]
   1d71c:	ldrb	r1, [r5, #76]	; 0x4c
   1d720:	cmp	r1, #0
   1d724:	ldrne	r1, [r5, #12]
   1d728:	strne	r4, [r1, r6, lsl #2]
   1d72c:	cmn	sl, #1
   1d730:	add	r4, r4, #1
   1d734:	ldr	r1, [r5, #8]
   1d738:	add	r6, r6, #1
   1d73c:	str	r3, [r1, r2]
   1d740:	ldrdeq	r2, [sp, #24]
   1d744:	strdeq	r2, [r5, #16]
   1d748:	b	1d338 <__assert_fail@plt+0xb998>
   1d74c:	ldr	r3, [r5, #12]
   1d750:	add	r2, sl, r4
   1d754:	add	r3, r3, r6, lsl #2
   1d758:	str	r4, [r3], #4
   1d75c:	add	r4, r4, #1
   1d760:	cmp	r2, r4
   1d764:	bne	1d758 <__assert_fail@plt+0xbdb8>
   1d768:	b	1d40c <__assert_fail@plt+0xba6c>
   1d76c:	cmn	r0, #1
   1d770:	beq	1d6c0 <__assert_fail@plt+0xbd20>
   1d774:	add	r8, r0, r6
   1d778:	ldr	r0, [r5, #36]	; 0x24
   1d77c:	cmp	r8, r0
   1d780:	bhi	1d44c <__assert_fail@plt+0xbaac>
   1d784:	ldr	r2, [r5, #12]
   1d788:	cmp	r2, #0
   1d78c:	beq	1d87c <__assert_fail@plt+0xbedc>
   1d790:	ldrb	r2, [r5, #76]	; 0x4c
   1d794:	cmp	r2, #0
   1d798:	bne	1d7c4 <__assert_fail@plt+0xbe24>
   1d79c:	cmp	r6, #0
   1d7a0:	ldrne	r1, [r5, #12]
   1d7a4:	subne	r1, r1, #4
   1d7a8:	beq	1d7bc <__assert_fail@plt+0xbe1c>
   1d7ac:	str	r2, [r1, #4]!
   1d7b0:	add	r2, r2, #1
   1d7b4:	cmp	r2, r6
   1d7b8:	bne	1d7ac <__assert_fail@plt+0xbe0c>
   1d7bc:	mov	r2, #1
   1d7c0:	strb	r2, [r5, #76]	; 0x4c
   1d7c4:	ldr	r0, [r5, #4]
   1d7c8:	mov	r2, r3
   1d7cc:	ldr	r1, [sp]
   1d7d0:	str	r3, [sp]
   1d7d4:	add	r0, r0, r6
   1d7d8:	bl	115d4 <memcpy@plt>
   1d7dc:	ldr	r3, [sp]
   1d7e0:	lsl	r1, r6, #2
   1d7e4:	ldr	r2, [r5, #8]
   1d7e8:	ldr	r0, [r5, #12]
   1d7ec:	cmp	r3, #1
   1d7f0:	mvnhi	lr, #0
   1d7f4:	str	fp, [r2, r6, lsl #2]
   1d7f8:	add	r2, r2, r1
   1d7fc:	add	r1, r0, r1
   1d800:	str	r4, [r0, r6, lsl #2]
   1d804:	movhi	r0, #1
   1d808:	bls	1d830 <__assert_fail@plt+0xbe90>
   1d80c:	ldr	ip, [sp, #4]
   1d810:	cmp	r0, sl
   1d814:	movcc	ip, r0
   1d818:	add	r0, r0, #1
   1d81c:	cmp	r3, r0
   1d820:	add	ip, ip, r4
   1d824:	str	ip, [r1, #4]!
   1d828:	str	lr, [r2, #4]!
   1d82c:	bne	1d80c <__assert_fail@plt+0xbe6c>
   1d830:	ldr	r7, [r5, #48]	; 0x30
   1d834:	sub	r3, r3, sl
   1d838:	ldr	r2, [r5, #52]	; 0x34
   1d83c:	add	r7, r3, r7
   1d840:	cmp	r2, r4
   1d844:	str	r7, [r5, #48]	; 0x30
   1d848:	ble	1d858 <__assert_fail@plt+0xbeb8>
   1d84c:	ldr	r2, [r5, #56]	; 0x38
   1d850:	add	r3, r2, r3
   1d854:	str	r3, [r5, #56]	; 0x38
   1d858:	ldr	r3, [r5, #36]	; 0x24
   1d85c:	mov	r6, r8
   1d860:	add	r4, sl, r4
   1d864:	cmp	r7, r3
   1d868:	movge	r7, r3
   1d86c:	b	1d338 <__assert_fail@plt+0xb998>
   1d870:	ldrd	r2, [sp, #24]
   1d874:	strd	r2, [fp]
   1d878:	b	1d5b4 <__assert_fail@plt+0xbc14>
   1d87c:	lsl	r0, r0, #2
   1d880:	str	r3, [sp, #8]
   1d884:	bl	1c864 <__assert_fail@plt+0xaec4>
   1d888:	cmp	r0, #0
   1d88c:	str	r0, [r5, #12]
   1d890:	moveq	r0, #12
   1d894:	ldr	r3, [sp, #8]
   1d898:	bne	1d790 <__assert_fail@plt+0xbdf0>
   1d89c:	b	1d460 <__assert_fail@plt+0xbac0>
   1d8a0:	add	r3, sp, #32
   1d8a4:	str	r3, [sp]
   1d8a8:	b	1d6ac <__assert_fail@plt+0xbd0c>
   1d8ac:	strd	r4, [sp, #-16]!
   1d8b0:	mov	r5, r0
   1d8b4:	ldr	r4, [r0, #28]
   1d8b8:	ldr	r3, [r0, #48]	; 0x30
   1d8bc:	str	r6, [sp, #8]
   1d8c0:	ldr	r6, [r0, #36]	; 0x24
   1d8c4:	str	lr, [sp, #12]
   1d8c8:	cmp	r6, r3
   1d8cc:	movge	r6, r3
   1d8d0:	cmp	r6, r4
   1d8d4:	ble	1d92c <__assert_fail@plt+0xbf8c>
   1d8d8:	bl	11754 <__ctype_toupper_loc@plt>
   1d8dc:	ldr	r3, [r5]
   1d8e0:	ldr	r1, [r5, #24]
   1d8e4:	ldr	r2, [r5, #64]	; 0x40
   1d8e8:	add	r3, r3, r4
   1d8ec:	ldrb	r3, [r3, r1]
   1d8f0:	cmp	r2, #0
   1d8f4:	ldr	r1, [r0]
   1d8f8:	ldrbne	r3, [r2, r3]
   1d8fc:	ldr	r2, [r5, #4]
   1d900:	ldr	r3, [r1, r3, lsl #2]
   1d904:	strb	r3, [r2, r4]
   1d908:	add	r4, r4, #1
   1d90c:	cmp	r6, r4
   1d910:	bne	1d8dc <__assert_fail@plt+0xbf3c>
   1d914:	str	r6, [r5, #28]
   1d918:	str	r6, [r5, #32]
   1d91c:	ldrd	r4, [sp]
   1d920:	ldr	r6, [sp, #8]
   1d924:	add	sp, sp, #12
   1d928:	pop	{pc}		; (ldr pc, [sp], #4)
   1d92c:	mov	r6, r4
   1d930:	b	1d914 <__assert_fail@plt+0xbf74>
   1d934:	ldr	r3, [r0, #36]	; 0x24
   1d938:	strd	r4, [sp, #-16]!
   1d93c:	str	r6, [sp, #8]
   1d940:	str	lr, [sp, #12]
   1d944:	cmn	r3, #-536870910	; 0xe0000002
   1d948:	bhi	1da6c <__assert_fail@plt+0xc0cc>
   1d94c:	ldr	r2, [r0, #48]	; 0x30
   1d950:	lsl	r3, r3, #1
   1d954:	mov	r4, r0
   1d958:	cmp	r3, r2
   1d95c:	movge	r3, r2
   1d960:	cmp	r3, r1
   1d964:	movge	r1, r3
   1d968:	bl	1cefc <__assert_fail@plt+0xb55c>
   1d96c:	subs	r5, r0, #0
   1d970:	bne	1d9d8 <__assert_fail@plt+0xc038>
   1d974:	ldr	r0, [r4, #100]	; 0x64
   1d978:	cmp	r0, #0
   1d97c:	beq	1d99c <__assert_fail@plt+0xbffc>
   1d980:	ldr	r1, [r4, #36]	; 0x24
   1d984:	add	r1, r1, #1
   1d988:	lsl	r1, r1, #2
   1d98c:	bl	1c910 <__assert_fail@plt+0xaf70>
   1d990:	cmp	r0, #0
   1d994:	beq	1da6c <__assert_fail@plt+0xc0cc>
   1d998:	str	r0, [r4, #100]	; 0x64
   1d99c:	ldrb	r3, [r4, #72]	; 0x48
   1d9a0:	ldr	r2, [r4, #80]	; 0x50
   1d9a4:	cmp	r3, #0
   1d9a8:	beq	1d9ec <__assert_fail@plt+0xc04c>
   1d9ac:	cmp	r2, #1
   1d9b0:	mov	r0, r4
   1d9b4:	ble	1da64 <__assert_fail@plt+0xc0c4>
   1d9b8:	ldrd	r4, [sp]
   1d9bc:	ldr	r6, [sp, #8]
   1d9c0:	ldr	lr, [sp, #12]
   1d9c4:	add	sp, sp, #16
   1d9c8:	b	1d2ec <__assert_fail@plt+0xb94c>
   1d9cc:	mov	lr, r3
   1d9d0:	str	lr, [r4, #28]
   1d9d4:	str	lr, [r4, #32]
   1d9d8:	mov	r0, r5
   1d9dc:	ldrd	r4, [sp]
   1d9e0:	ldr	r6, [sp, #8]
   1d9e4:	add	sp, sp, #12
   1d9e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d9ec:	cmp	r2, #1
   1d9f0:	bgt	1da58 <__assert_fail@plt+0xc0b8>
   1d9f4:	ldr	r1, [r4, #64]	; 0x40
   1d9f8:	cmp	r1, #0
   1d9fc:	beq	1d9d8 <__assert_fail@plt+0xc038>
   1da00:	ldr	r3, [r4, #28]
   1da04:	ldr	lr, [r4, #36]	; 0x24
   1da08:	ldr	r2, [r4, #48]	; 0x30
   1da0c:	cmp	lr, r2
   1da10:	movge	lr, r2
   1da14:	cmp	lr, r3
   1da18:	bgt	1da24 <__assert_fail@plt+0xc084>
   1da1c:	b	1d9cc <__assert_fail@plt+0xc02c>
   1da20:	ldr	r1, [r4, #64]	; 0x40
   1da24:	ldr	r2, [r4]
   1da28:	ldr	r0, [r4, #4]
   1da2c:	ldr	ip, [r4, #24]
   1da30:	add	r2, r2, r3
   1da34:	ldrb	r2, [r2, ip]
   1da38:	ldrb	r2, [r1, r2]
   1da3c:	strb	r2, [r0, r3]
   1da40:	add	r3, r3, #1
   1da44:	cmp	lr, r3
   1da48:	bne	1da20 <__assert_fail@plt+0xc080>
   1da4c:	str	lr, [r4, #28]
   1da50:	str	lr, [r4, #32]
   1da54:	b	1d9d8 <__assert_fail@plt+0xc038>
   1da58:	mov	r0, r4
   1da5c:	bl	1d14c <__assert_fail@plt+0xb7ac>
   1da60:	b	1d9d8 <__assert_fail@plt+0xc038>
   1da64:	bl	1d8ac <__assert_fail@plt+0xbf0c>
   1da68:	b	1d9d8 <__assert_fail@plt+0xc038>
   1da6c:	mov	r5, #12
   1da70:	b	1d9d8 <__assert_fail@plt+0xc038>
   1da74:	str	r4, [sp, #-8]!
   1da78:	mov	r4, r0
   1da7c:	ldr	r0, [r0]
   1da80:	str	lr, [sp, #4]
   1da84:	bl	1c734 <__assert_fail@plt+0xad94>
   1da88:	ldr	r0, [r4, #4]
   1da8c:	bl	1c734 <__assert_fail@plt+0xad94>
   1da90:	ldr	r0, [r4, #8]
   1da94:	bl	1c734 <__assert_fail@plt+0xad94>
   1da98:	ldr	r0, [r4, #12]
   1da9c:	bl	1c734 <__assert_fail@plt+0xad94>
   1daa0:	mov	r0, r4
   1daa4:	ldr	r4, [sp]
   1daa8:	ldr	lr, [sp, #4]
   1daac:	add	sp, sp, #8
   1dab0:	b	1c734 <__assert_fail@plt+0xad94>
   1dab4:	ldr	r2, [r0, #4]
   1dab8:	mov	r3, #255	; 0xff
   1dabc:	movt	r3, #4
   1dac0:	and	r3, r3, r2
   1dac4:	cmp	r3, #6
   1dac8:	beq	1dad8 <__assert_fail@plt+0xc138>
   1dacc:	cmp	r3, #3
   1dad0:	beq	1dae0 <__assert_fail@plt+0xc140>
   1dad4:	bx	lr
   1dad8:	ldr	r0, [r0]
   1dadc:	b	1da74 <__assert_fail@plt+0xc0d4>
   1dae0:	ldr	r0, [r0]
   1dae4:	b	1c734 <__assert_fail@plt+0xad94>
   1dae8:	add	r0, r1, #20
   1daec:	str	r4, [sp, #-8]!
   1daf0:	str	lr, [sp, #4]
   1daf4:	bl	1dab4 <__assert_fail@plt+0xc114>
   1daf8:	ldr	r4, [sp]
   1dafc:	add	sp, sp, #4
   1db00:	mov	r0, #0
   1db04:	pop	{pc}		; (ldr pc, [sp], #4)
   1db08:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1db0c:	mov	r4, r0
   1db10:	ldr	ip, [r0, #8]
   1db14:	strd	r6, [sp, #8]
   1db18:	ldr	r6, [r0, #4]
   1db1c:	strd	r8, [sp, #16]
   1db20:	str	sl, [sp, #24]
   1db24:	str	lr, [sp, #28]
   1db28:	sub	sp, sp, #8
   1db2c:	add	r3, sp, #8
   1db30:	cmp	ip, r6
   1db34:	stmdb	r3, {r1, r2}
   1db38:	ldrb	r5, [sp, #4]
   1db3c:	bcs	1dc0c <__assert_fail@plt+0xc26c>
   1db40:	ldr	r7, [r0, #12]
   1db44:	ldr	r6, [r0, #20]
   1db48:	lsl	r0, ip, #3
   1db4c:	cmp	r5, #5
   1db50:	ldr	lr, [r4]
   1db54:	ldrd	r2, [sp]
   1db58:	add	r1, lr, r0
   1db5c:	strd	r2, [lr, r0]
   1db60:	ldr	r3, [r1, #4]
   1db64:	bfc	r3, #8, #10
   1db68:	str	r3, [r1, #4]
   1db6c:	beq	1dbf8 <__assert_fail@plt+0xc258>
   1db70:	sub	r5, r5, #6
   1db74:	clz	r5, r5
   1db78:	lsr	r5, r5, #5
   1db7c:	ldrb	r3, [r1, #6]
   1db80:	mvn	r0, #0
   1db84:	mov	r2, #0
   1db88:	bfi	r3, r5, #4, #1
   1db8c:	strb	r3, [r1, #6]
   1db90:	str	r0, [r7, ip, lsl #2]
   1db94:	ldr	r3, [r4, #8]
   1db98:	add	r3, r3, r3, lsl #1
   1db9c:	lsl	r3, r3, #2
   1dba0:	add	r1, r6, r3
   1dba4:	str	r2, [r6, r3]
   1dba8:	str	r2, [r1, #4]
   1dbac:	str	r2, [r1, #8]
   1dbb0:	ldr	r3, [r4, #8]
   1dbb4:	ldr	r0, [r4, #24]
   1dbb8:	add	r3, r3, r3, lsl #1
   1dbbc:	lsl	r3, r3, #2
   1dbc0:	add	r1, r0, r3
   1dbc4:	str	r2, [r0, r3]
   1dbc8:	str	r2, [r1, #4]
   1dbcc:	str	r2, [r1, #8]
   1dbd0:	ldr	r0, [r4, #8]
   1dbd4:	add	r3, r0, #1
   1dbd8:	str	r3, [r4, #8]
   1dbdc:	add	sp, sp, #8
   1dbe0:	ldrd	r4, [sp]
   1dbe4:	ldrd	r6, [sp, #8]
   1dbe8:	ldrd	r8, [sp, #16]
   1dbec:	ldr	sl, [sp, #24]
   1dbf0:	add	sp, sp, #28
   1dbf4:	pop	{pc}		; (ldr pc, [sp], #4)
   1dbf8:	ldr	r5, [r4, #92]	; 0x5c
   1dbfc:	cmp	r5, #1
   1dc00:	movle	r5, #0
   1dc04:	movgt	r5, #1
   1dc08:	b	1db7c <__assert_fail@plt+0xc1dc>
   1dc0c:	lsl	r9, r6, #1
   1dc10:	movw	r3, #21845	; 0x5555
   1dc14:	movt	r3, #5461	; 0x1555
   1dc18:	cmp	r9, r3
   1dc1c:	bhi	1dcd8 <__assert_fail@plt+0xc338>
   1dc20:	lsl	r1, r6, #4
   1dc24:	ldr	r0, [r0]
   1dc28:	bl	1c910 <__assert_fail@plt+0xaf70>
   1dc2c:	cmp	r0, #0
   1dc30:	beq	1dcd8 <__assert_fail@plt+0xc338>
   1dc34:	lsl	r8, r6, #3
   1dc38:	str	r0, [r4]
   1dc3c:	add	r6, r9, r6
   1dc40:	ldr	r0, [r4, #12]
   1dc44:	mov	r1, r8
   1dc48:	bl	1c910 <__assert_fail@plt+0xaf70>
   1dc4c:	mov	r7, r0
   1dc50:	mov	r1, r8
   1dc54:	lsl	r8, r6, #3
   1dc58:	ldr	r0, [r4, #16]
   1dc5c:	bl	1c910 <__assert_fail@plt+0xaf70>
   1dc60:	mov	sl, r0
   1dc64:	mov	r1, r8
   1dc68:	ldr	r0, [r4, #20]
   1dc6c:	bl	1c910 <__assert_fail@plt+0xaf70>
   1dc70:	mov	r6, r0
   1dc74:	mov	r1, r8
   1dc78:	ldr	r0, [r4, #24]
   1dc7c:	bl	1c910 <__assert_fail@plt+0xaf70>
   1dc80:	cmp	sl, #0
   1dc84:	cmpne	r7, #0
   1dc88:	mov	r8, r0
   1dc8c:	beq	1dcb8 <__assert_fail@plt+0xc318>
   1dc90:	cmp	r0, #0
   1dc94:	cmpne	r6, #0
   1dc98:	beq	1dcb8 <__assert_fail@plt+0xc318>
   1dc9c:	str	r9, [r4, #4]
   1dca0:	str	r7, [r4, #12]
   1dca4:	str	sl, [r4, #16]
   1dca8:	str	r6, [r4, #20]
   1dcac:	str	r0, [r4, #24]
   1dcb0:	ldr	ip, [r4, #8]
   1dcb4:	b	1db48 <__assert_fail@plt+0xc1a8>
   1dcb8:	mov	r0, r7
   1dcbc:	bl	1c734 <__assert_fail@plt+0xad94>
   1dcc0:	mov	r0, sl
   1dcc4:	bl	1c734 <__assert_fail@plt+0xad94>
   1dcc8:	mov	r0, r6
   1dccc:	bl	1c734 <__assert_fail@plt+0xad94>
   1dcd0:	mov	r0, r8
   1dcd4:	bl	1c734 <__assert_fail@plt+0xad94>
   1dcd8:	mvn	r0, #0
   1dcdc:	b	1dbdc <__assert_fail@plt+0xc23c>
   1dce0:	ldr	r3, [r0]
   1dce4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1dce8:	mov	r4, r2
   1dcec:	mov	r5, r0
   1dcf0:	strd	r6, [sp, #8]
   1dcf4:	lsl	r7, r1, #3
   1dcf8:	mov	r6, r1
   1dcfc:	str	r8, [sp, #16]
   1dd00:	str	lr, [sp, #20]
   1dd04:	add	r3, r3, r7
   1dd08:	ldm	r3, {r1, r2}
   1dd0c:	bl	1db08 <__assert_fail@plt+0xc168>
   1dd10:	cmn	r0, #1
   1dd14:	beq	1dd60 <__assert_fail@plt+0xc3c0>
   1dd18:	ldr	r1, [r5]
   1dd1c:	ubfx	r2, r4, #0, #10
   1dd20:	add	r3, r1, r0, lsl #3
   1dd24:	add	r7, r1, r7
   1dd28:	ldr	ip, [r3, #4]
   1dd2c:	bfi	ip, r2, #8, #10
   1dd30:	mov	r1, ip
   1dd34:	str	ip, [r3, #4]
   1dd38:	ldr	ip, [r7, #4]
   1dd3c:	ubfx	ip, ip, #8, #10
   1dd40:	orr	r2, r2, ip
   1dd44:	bfi	r1, r2, #8, #10
   1dd48:	ubfx	r2, r1, #16, #8
   1dd4c:	str	r1, [r3, #4]
   1dd50:	orr	r2, r2, #4
   1dd54:	strb	r2, [r3, #6]
   1dd58:	ldr	r3, [r5, #16]
   1dd5c:	str	r6, [r3, r0, lsl #2]
   1dd60:	ldrd	r4, [sp]
   1dd64:	ldrd	r6, [sp, #8]
   1dd68:	ldr	r8, [sp, #16]
   1dd6c:	add	sp, sp, #20
   1dd70:	pop	{pc}		; (ldr pc, [sp], #4)
   1dd74:	str	r4, [sp, #-8]!
   1dd78:	mov	r4, r0
   1dd7c:	ldr	r0, [r0, #24]
   1dd80:	str	lr, [sp, #4]
   1dd84:	bl	1c734 <__assert_fail@plt+0xad94>
   1dd88:	ldr	r0, [r4, #36]	; 0x24
   1dd8c:	bl	1c734 <__assert_fail@plt+0xad94>
   1dd90:	ldr	r3, [r4, #40]	; 0x28
   1dd94:	add	r2, r4, #4
   1dd98:	cmp	r3, r2
   1dd9c:	beq	1ddb0 <__assert_fail@plt+0xc410>
   1dda0:	ldr	r0, [r3, #8]
   1dda4:	bl	1c734 <__assert_fail@plt+0xad94>
   1dda8:	ldr	r0, [r4, #40]	; 0x28
   1ddac:	bl	1c734 <__assert_fail@plt+0xad94>
   1ddb0:	ldr	r0, [r4, #12]
   1ddb4:	bl	1c734 <__assert_fail@plt+0xad94>
   1ddb8:	ldr	r0, [r4, #48]	; 0x30
   1ddbc:	bl	1c734 <__assert_fail@plt+0xad94>
   1ddc0:	ldr	r0, [r4, #44]	; 0x2c
   1ddc4:	bl	1c734 <__assert_fail@plt+0xad94>
   1ddc8:	mov	r0, r4
   1ddcc:	ldr	r4, [sp]
   1ddd0:	ldr	lr, [sp, #4]
   1ddd4:	add	sp, sp, #8
   1ddd8:	b	1c734 <__assert_fail@plt+0xad94>
   1dddc:	str	r4, [sp, #-8]!
   1dde0:	mov	r4, r0
   1dde4:	ldr	r0, [r0, #8]
   1dde8:	str	lr, [sp, #4]
   1ddec:	bl	1c734 <__assert_fail@plt+0xad94>
   1ddf0:	ldr	r0, [r4, #12]
   1ddf4:	bl	1c734 <__assert_fail@plt+0xad94>
   1ddf8:	ldrb	r3, [r4, #75]	; 0x4b
   1ddfc:	cmp	r3, #0
   1de00:	bne	1de10 <__assert_fail@plt+0xc470>
   1de04:	ldr	r4, [sp]
   1de08:	add	sp, sp, #4
   1de0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1de10:	ldr	r0, [r4, #4]
   1de14:	ldr	r4, [sp]
   1de18:	ldr	lr, [sp, #4]
   1de1c:	add	sp, sp, #8
   1de20:	b	1c734 <__assert_fail@plt+0xad94>
   1de24:	ldr	r3, [r0, #124]	; 0x7c
   1de28:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1de2c:	strd	r6, [sp, #8]
   1de30:	str	r8, [sp, #16]
   1de34:	mov	r8, r0
   1de38:	str	lr, [sp, #20]
   1de3c:	cmp	r3, #0
   1de40:	ble	1dec4 <__assert_fail@plt+0xc524>
   1de44:	mov	r7, #0
   1de48:	ldr	r3, [r8, #132]	; 0x84
   1de4c:	ldr	r6, [r3, r7, lsl #2]
   1de50:	ldr	r3, [r6, #16]
   1de54:	cmp	r3, #0
   1de58:	ble	1de88 <__assert_fail@plt+0xc4e8>
   1de5c:	mov	r4, #0
   1de60:	ldr	r3, [r6, #20]
   1de64:	ldr	r5, [r3, r4, lsl #2]
   1de68:	add	r4, r4, #1
   1de6c:	ldr	r0, [r5, #16]
   1de70:	bl	1c734 <__assert_fail@plt+0xad94>
   1de74:	mov	r0, r5
   1de78:	bl	1c734 <__assert_fail@plt+0xad94>
   1de7c:	ldr	r3, [r6, #16]
   1de80:	cmp	r3, r4
   1de84:	bgt	1de60 <__assert_fail@plt+0xc4c0>
   1de88:	ldr	r0, [r6, #20]
   1de8c:	bl	1c734 <__assert_fail@plt+0xad94>
   1de90:	ldr	r3, [r6, #8]
   1de94:	cmp	r3, #0
   1de98:	beq	1deac <__assert_fail@plt+0xc50c>
   1de9c:	ldr	r0, [r3, #8]
   1dea0:	bl	1c734 <__assert_fail@plt+0xad94>
   1dea4:	ldr	r0, [r6, #8]
   1dea8:	bl	1c734 <__assert_fail@plt+0xad94>
   1deac:	mov	r0, r6
   1deb0:	add	r7, r7, #1
   1deb4:	bl	1c734 <__assert_fail@plt+0xad94>
   1deb8:	ldr	r3, [r8, #124]	; 0x7c
   1debc:	cmp	r3, r7
   1dec0:	bgt	1de48 <__assert_fail@plt+0xc4a8>
   1dec4:	mov	r3, #0
   1dec8:	ldrd	r4, [sp]
   1decc:	ldrd	r6, [sp, #8]
   1ded0:	str	r3, [r8, #108]	; 0x6c
   1ded4:	str	r3, [r8, #124]	; 0x7c
   1ded8:	ldr	r8, [sp, #16]
   1dedc:	add	sp, sp, #20
   1dee0:	pop	{pc}		; (ldr pc, [sp], #4)
   1dee4:	ldrb	r3, [r1, #24]
   1dee8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1deec:	ldr	r2, [r1, #28]
   1def0:	strd	r6, [sp, #8]
   1def4:	str	r8, [sp, #16]
   1def8:	sub	r3, r3, #2
   1defc:	str	lr, [sp, #20]
   1df00:	cmp	r3, #14
   1df04:	ldrls	pc, [pc, r3, lsl #2]
   1df08:	b	1e050 <__assert_fail@plt+0xc6b0>
   1df0c:	andeq	sp, r1, r4, ror #30
   1df10:	andeq	lr, r1, r0, asr r0
   1df14:	andeq	sp, r1, r8, asr #30
   1df18:	andeq	lr, r1, r0, asr r0
   1df1c:	andeq	lr, r1, r0, asr r0
   1df20:	andeq	lr, r1, r0, asr r0
   1df24:	andeq	lr, r1, r0
   1df28:	andeq	lr, r1, r0
   1df2c:	andeq	sp, r1, r0, lsl #31
   1df30:	andeq	sp, r1, r0, lsl #31
   1df34:	andeq	lr, r1, r0
   1df38:	andeq	lr, r1, r0, asr r0
   1df3c:	andeq	lr, r1, r0, asr r0
   1df40:	andeq	lr, r1, r0, asr r0
   1df44:	andeq	sp, r1, r4, ror #30
   1df48:	ldr	ip, [r1, #16]
   1df4c:	ldr	r3, [r0, #12]
   1df50:	ldr	r4, [ip, #28]
   1df54:	str	r4, [r3, r2, lsl #2]
   1df58:	ldrb	r3, [r1, #24]
   1df5c:	cmp	r3, #4
   1df60:	beq	1e07c <__assert_fail@plt+0xc6dc>
   1df64:	mov	r3, #0
   1df68:	ldrd	r4, [sp]
   1df6c:	mov	r0, r3
   1df70:	ldrd	r6, [sp, #8]
   1df74:	ldr	r8, [sp, #16]
   1df78:	add	sp, sp, #20
   1df7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1df80:	ldrb	r3, [r0, #88]	; 0x58
   1df84:	add	r2, r2, r2, lsl #1
   1df88:	mov	r6, #2
   1df8c:	lsl	r2, r2, r6
   1df90:	orr	r3, r3, #1
   1df94:	strb	r3, [r0, #88]	; 0x58
   1df98:	ldr	r3, [r1, #4]
   1df9c:	cmp	r3, #0
   1dfa0:	ldrne	r3, [r3, #12]
   1dfa4:	ldreq	r3, [r1, #16]
   1dfa8:	ldr	r5, [r3, #28]
   1dfac:	ldr	r3, [r1, #8]
   1dfb0:	cmp	r3, #0
   1dfb4:	ldrne	r3, [r3, #12]
   1dfb8:	ldreq	r3, [r1, #16]
   1dfbc:	ldr	r7, [r3, #28]
   1dfc0:	ldr	r3, [r0, #20]
   1dfc4:	mov	r0, #8
   1dfc8:	str	r6, [r3, r2]
   1dfcc:	add	r4, r3, r2
   1dfd0:	bl	1c864 <__assert_fail@plt+0xaec4>
   1dfd4:	cmp	r0, #0
   1dfd8:	str	r0, [r4, #8]
   1dfdc:	beq	1e0c4 <__assert_fail@plt+0xc724>
   1dfe0:	cmp	r5, r7
   1dfe4:	beq	1e068 <__assert_fail@plt+0xc6c8>
   1dfe8:	mov	r3, #0
   1dfec:	str	r6, [r4, #4]
   1dff0:	stmlt	r0, {r5, r7}
   1dff4:	strge	r7, [r0]
   1dff8:	strge	r5, [r0, #4]
   1dffc:	b	1df68 <__assert_fail@plt+0xc5c8>
   1e000:	ldr	r5, [r0, #20]
   1e004:	add	r2, r2, r2, lsl #1
   1e008:	mov	r3, #1
   1e00c:	mov	r0, #4
   1e010:	ldr	r1, [r1, #16]
   1e014:	lsl	r4, r2, #2
   1e018:	add	r6, r5, r4
   1e01c:	ldr	r7, [r1, #28]
   1e020:	str	r3, [r5, r4]
   1e024:	str	r3, [r6, #4]
   1e028:	bl	1c864 <__assert_fail@plt+0xaec4>
   1e02c:	cmp	r0, #0
   1e030:	str	r0, [r6, #8]
   1e034:	moveq	r3, #12
   1e038:	streq	r0, [r6, #4]
   1e03c:	streq	r0, [r5, r4]
   1e040:	beq	1df68 <__assert_fail@plt+0xc5c8>
   1e044:	mov	r3, #0
   1e048:	str	r7, [r0]
   1e04c:	b	1df68 <__assert_fail@plt+0xc5c8>
   1e050:	ldr	ip, [r1, #16]
   1e054:	mov	r3, #0
   1e058:	ldr	r1, [r0, #12]
   1e05c:	ldr	r0, [ip, #28]
   1e060:	str	r0, [r1, r2, lsl #2]
   1e064:	b	1df68 <__assert_fail@plt+0xc5c8>
   1e068:	mov	r2, #1
   1e06c:	mov	r3, #0
   1e070:	str	r2, [r4, #4]
   1e074:	str	r5, [r0]
   1e078:	b	1df68 <__assert_fail@plt+0xc5c8>
   1e07c:	ldr	r6, [r0, #20]
   1e080:	add	r2, r2, r2, lsl #1
   1e084:	mov	r1, #1
   1e088:	mov	r0, r3
   1e08c:	lsl	r5, r2, #2
   1e090:	add	r7, r6, r5
   1e094:	str	r1, [r6, r5]
   1e098:	str	r1, [r7, #4]
   1e09c:	bl	1c864 <__assert_fail@plt+0xaec4>
   1e0a0:	cmp	r0, #0
   1e0a4:	str	r0, [r7, #8]
   1e0a8:	moveq	r3, #12
   1e0ac:	streq	r0, [r7, #4]
   1e0b0:	streq	r0, [r6, r5]
   1e0b4:	beq	1df68 <__assert_fail@plt+0xc5c8>
   1e0b8:	mov	r3, #0
   1e0bc:	str	r4, [r0]
   1e0c0:	b	1df68 <__assert_fail@plt+0xc5c8>
   1e0c4:	mov	r3, #12
   1e0c8:	b	1df68 <__assert_fail@plt+0xc5c8>
   1e0cc:	ldr	r3, [r0]
   1e0d0:	strd	r4, [sp, #-16]!
   1e0d4:	mov	r4, r0
   1e0d8:	str	r6, [sp, #8]
   1e0dc:	mov	r6, r1
   1e0e0:	str	lr, [sp, #12]
   1e0e4:	cmp	r3, #0
   1e0e8:	beq	1e120 <__assert_fail@plt+0xc780>
   1e0ec:	ldr	r1, [r0, #4]
   1e0f0:	ldr	r0, [r0, #8]
   1e0f4:	cmp	r1, #0
   1e0f8:	bne	1e164 <__assert_fail@plt+0xc7c4>
   1e0fc:	str	r6, [r0]
   1e100:	mov	r0, #1
   1e104:	ldr	r3, [r4, #4]
   1e108:	add	r3, r3, r0
   1e10c:	str	r3, [r4, #4]
   1e110:	ldrd	r4, [sp]
   1e114:	ldr	r6, [sp, #8]
   1e118:	add	sp, sp, #12
   1e11c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e120:	mov	r5, #1
   1e124:	mov	r0, #4
   1e128:	str	r5, [r4]
   1e12c:	str	r5, [r4, #4]
   1e130:	bl	1c864 <__assert_fail@plt+0xaec4>
   1e134:	mov	r3, r0
   1e138:	cmp	r0, #0
   1e13c:	str	r0, [r4, #8]
   1e140:	streq	r3, [r4]
   1e144:	streq	r3, [r4, #4]
   1e148:	beq	1e110 <__assert_fail@plt+0xc770>
   1e14c:	mov	r0, r5
   1e150:	str	r6, [r3]
   1e154:	ldrd	r4, [sp]
   1e158:	ldr	r6, [sp, #8]
   1e15c:	add	sp, sp, #12
   1e160:	pop	{pc}		; (ldr pc, [sp], #4)
   1e164:	cmp	r3, r1
   1e168:	beq	1e1ec <__assert_fail@plt+0xc84c>
   1e16c:	ldr	r2, [r0]
   1e170:	mov	r3, r1
   1e174:	cmp	r2, r6
   1e178:	ble	1e1a0 <__assert_fail@plt+0xc800>
   1e17c:	cmp	r1, #0
   1e180:	ble	1e1d4 <__assert_fail@plt+0xc834>
   1e184:	add	r1, r0, r1, lsl #2
   1e188:	ldr	r3, [r1, #-4]
   1e18c:	str	r3, [r1], #-4
   1e190:	cmp	r1, r0
   1e194:	bne	1e188 <__assert_fail@plt+0xc7e8>
   1e198:	mov	r3, #0
   1e19c:	b	1e1d4 <__assert_fail@plt+0xc834>
   1e1a0:	sub	r3, r1, #-1073741823	; 0xc0000001
   1e1a4:	ldr	r2, [r0, r3, lsl #2]
   1e1a8:	lsl	r3, r3, #2
   1e1ac:	cmp	r6, r2
   1e1b0:	bge	1e1d0 <__assert_fail@plt+0xc830>
   1e1b4:	add	r3, r3, #4
   1e1b8:	add	r3, r0, r3
   1e1bc:	str	r2, [r3], #-4
   1e1c0:	sub	r1, r1, #1
   1e1c4:	ldr	r2, [r3, #-4]
   1e1c8:	cmp	r2, r6
   1e1cc:	bgt	1e1bc <__assert_fail@plt+0xc81c>
   1e1d0:	mov	r3, r1
   1e1d4:	str	r6, [r0, r3, lsl #2]
   1e1d8:	mov	r0, #1
   1e1dc:	ldr	r3, [r4, #4]
   1e1e0:	add	r3, r3, r0
   1e1e4:	str	r3, [r4, #4]
   1e1e8:	b	1e110 <__assert_fail@plt+0xc770>
   1e1ec:	lsl	r3, r1, #1
   1e1f0:	lsl	r1, r1, #3
   1e1f4:	str	r3, [r4]
   1e1f8:	bl	1c910 <__assert_fail@plt+0xaf70>
   1e1fc:	cmp	r0, #0
   1e200:	beq	1e110 <__assert_fail@plt+0xc770>
   1e204:	str	r0, [r4, #8]
   1e208:	ldr	r1, [r4, #4]
   1e20c:	b	1e16c <__assert_fail@plt+0xc7cc>
   1e210:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e214:	mov	r4, r0
   1e218:	mov	r5, r2
   1e21c:	strd	r6, [sp, #8]
   1e220:	mov	r7, r1
   1e224:	strd	r8, [sp, #16]
   1e228:	strd	sl, [sp, #24]
   1e22c:	mov	sl, #0
   1e230:	str	lr, [sp, #32]
   1e234:	sub	sp, sp, #20
   1e238:	ldr	r9, [sp, #56]	; 0x38
   1e23c:	str	r3, [sp, #12]
   1e240:	ldr	r2, [r4]
   1e244:	mov	r6, r5
   1e248:	ldr	r1, [r4, #20]
   1e24c:	add	ip, r2, r7, lsl #3
   1e250:	ldrb	r3, [ip, #4]
   1e254:	cmp	r3, #4
   1e258:	beq	1e3e8 <__assert_fail@plt+0xca48>
   1e25c:	add	r8, r7, r7, lsl #1
   1e260:	lsl	r8, r8, #2
   1e264:	add	r3, r1, r8
   1e268:	ldr	r0, [r3, #4]
   1e26c:	cmp	r0, #0
   1e270:	beq	1e4a0 <__assert_fail@plt+0xcb00>
   1e274:	ldr	r3, [r3, #8]
   1e278:	add	r6, r5, r5, lsl #1
   1e27c:	cmp	r0, #1
   1e280:	lsl	r6, r6, #2
   1e284:	add	r0, r1, r6
   1e288:	ldr	fp, [r3]
   1e28c:	beq	1e37c <__assert_fail@plt+0xc9dc>
   1e290:	ldr	r5, [r4, #8]
   1e294:	sub	r1, r5, #1
   1e298:	add	ip, r2, r1, lsl #3
   1e29c:	cmp	r1, #0
   1e2a0:	movle	lr, #0
   1e2a4:	movgt	lr, #1
   1e2a8:	ldrb	r7, [ip, #6]
   1e2ac:	str	sl, [r0, #4]
   1e2b0:	ands	r3, lr, r7, lsr #2
   1e2b4:	beq	1e448 <__assert_fail@plt+0xcaa8>
   1e2b8:	ldr	lr, [r4, #16]
   1e2bc:	add	r2, r2, r5, lsl #3
   1e2c0:	sub	r2, r2, ip
   1e2c4:	sub	r2, r2, #16
   1e2c8:	add	lr, lr, r5, lsl #2
   1e2cc:	b	1e2f0 <__assert_fail@plt+0xc950>
   1e2d0:	add	ip, ip, r2
   1e2d4:	sub	r1, r1, #1
   1e2d8:	ldrb	r7, [ip, #6]
   1e2dc:	cmp	r1, #0
   1e2e0:	movle	r5, #0
   1e2e4:	movgt	r5, #1
   1e2e8:	ands	r3, r5, r7, lsr #2
   1e2ec:	beq	1e448 <__assert_fail@plt+0xcaa8>
   1e2f0:	ldr	r5, [lr, #-4]!
   1e2f4:	cmp	r5, fp
   1e2f8:	bne	1e2d0 <__assert_fail@plt+0xc930>
   1e2fc:	ldr	r7, [ip, #4]
   1e300:	ubfx	r7, r7, #8, #10
   1e304:	cmp	r9, r7
   1e308:	bne	1e2d0 <__assert_fail@plt+0xc930>
   1e30c:	bl	1e0cc <__assert_fail@plt+0xc72c>
   1e310:	cmp	r0, #0
   1e314:	beq	1e35c <__assert_fail@plt+0xc9bc>
   1e318:	ldr	r3, [r4, #20]
   1e31c:	mov	r2, r9
   1e320:	mov	r0, r4
   1e324:	add	r8, r3, r8
   1e328:	ldr	r3, [r8, #8]
   1e32c:	ldr	r7, [r3, #4]
   1e330:	mov	r1, r7
   1e334:	bl	1dce0 <__assert_fail@plt+0xc340>
   1e338:	cmn	r0, #1
   1e33c:	mov	r5, r0
   1e340:	beq	1e35c <__assert_fail@plt+0xc9bc>
   1e344:	mov	r1, r0
   1e348:	ldr	r0, [r4, #20]
   1e34c:	add	r0, r0, r6
   1e350:	bl	1e0cc <__assert_fail@plt+0xc72c>
   1e354:	cmp	r0, #0
   1e358:	bne	1e240 <__assert_fail@plt+0xc8a0>
   1e35c:	mov	r0, #12
   1e360:	add	sp, sp, #20
   1e364:	ldrd	r4, [sp]
   1e368:	ldrd	r6, [sp, #8]
   1e36c:	ldrd	r8, [sp, #16]
   1e370:	ldrd	sl, [sp, #24]
   1e374:	add	sp, sp, #32
   1e378:	pop	{pc}		; (ldr pc, [sp], #4)
   1e37c:	ldr	r2, [sp, #12]
   1e380:	cmp	r7, r5
   1e384:	str	sl, [r0, #4]
   1e388:	sub	r2, r7, r2
   1e38c:	clz	r2, r2
   1e390:	lsr	r2, r2, #5
   1e394:	moveq	r2, #0
   1e398:	cmp	r2, #0
   1e39c:	bne	1e4b0 <__assert_fail@plt+0xcb10>
   1e3a0:	ldr	r2, [ip, #4]
   1e3a4:	mov	r1, fp
   1e3a8:	mov	r0, r4
   1e3ac:	ubfx	r2, r2, #8, #10
   1e3b0:	orr	r9, r9, r2
   1e3b4:	mov	r2, r9
   1e3b8:	bl	1dce0 <__assert_fail@plt+0xc340>
   1e3bc:	cmn	r0, #1
   1e3c0:	mov	r5, r0
   1e3c4:	beq	1e35c <__assert_fail@plt+0xc9bc>
   1e3c8:	mov	r1, r0
   1e3cc:	ldr	r0, [r4, #20]
   1e3d0:	add	r0, r0, r6
   1e3d4:	bl	1e0cc <__assert_fail@plt+0xc72c>
   1e3d8:	cmp	r0, #0
   1e3dc:	beq	1e35c <__assert_fail@plt+0xc9bc>
   1e3e0:	mov	r7, fp
   1e3e4:	b	1e240 <__assert_fail@plt+0xc8a0>
   1e3e8:	ldr	ip, [r4, #12]
   1e3ec:	add	r5, r5, r5, lsl #1
   1e3f0:	mov	r2, r9
   1e3f4:	lsl	fp, r7, #2
   1e3f8:	mov	r0, r4
   1e3fc:	lsl	r8, r5, #2
   1e400:	add	r1, r1, r8
   1e404:	ldr	r7, [ip, r7, lsl #2]
   1e408:	str	sl, [r1, #4]
   1e40c:	mov	r1, r7
   1e410:	bl	1dce0 <__assert_fail@plt+0xc340>
   1e414:	cmn	r0, #1
   1e418:	mov	r5, r0
   1e41c:	beq	1e35c <__assert_fail@plt+0xc9bc>
   1e420:	ldr	r2, [r4, #12]
   1e424:	mov	r1, r0
   1e428:	ldr	r0, [r4, #20]
   1e42c:	ldr	r3, [r2, fp]
   1e430:	add	r0, r0, r8
   1e434:	str	r3, [r2, r6, lsl #2]
   1e438:	bl	1e0cc <__assert_fail@plt+0xc72c>
   1e43c:	cmp	r0, #0
   1e440:	bne	1e240 <__assert_fail@plt+0xc8a0>
   1e444:	b	1e35c <__assert_fail@plt+0xc9bc>
   1e448:	mov	r2, r9
   1e44c:	mov	r1, fp
   1e450:	mov	r0, r4
   1e454:	bl	1dce0 <__assert_fail@plt+0xc340>
   1e458:	cmn	r0, #1
   1e45c:	mov	r5, r0
   1e460:	beq	1e35c <__assert_fail@plt+0xc9bc>
   1e464:	ldr	r0, [r4, #20]
   1e468:	mov	r1, r5
   1e46c:	add	r0, r0, r6
   1e470:	bl	1e0cc <__assert_fail@plt+0xc72c>
   1e474:	cmp	r0, #0
   1e478:	beq	1e35c <__assert_fail@plt+0xc9bc>
   1e47c:	mov	r2, r5
   1e480:	mov	r1, fp
   1e484:	str	r9, [sp]
   1e488:	mov	r0, r4
   1e48c:	ldr	r3, [sp, #12]
   1e490:	bl	1e210 <__assert_fail@plt+0xc870>
   1e494:	cmp	r0, #0
   1e498:	beq	1e318 <__assert_fail@plt+0xc978>
   1e49c:	b	1e360 <__assert_fail@plt+0xc9c0>
   1e4a0:	ldr	r3, [r4, #12]
   1e4a4:	ldr	r2, [r3, r7, lsl #2]
   1e4a8:	str	r2, [r3, r5, lsl #2]
   1e4ac:	b	1e360 <__assert_fail@plt+0xc9c0>
   1e4b0:	mov	r1, fp
   1e4b4:	bl	1e0cc <__assert_fail@plt+0xc72c>
   1e4b8:	cmp	r0, #0
   1e4bc:	movne	r0, #0
   1e4c0:	bne	1e360 <__assert_fail@plt+0xc9c0>
   1e4c4:	b	1e35c <__assert_fail@plt+0xc9bc>
   1e4c8:	ldr	r3, [r0, #36]	; 0x24
   1e4cc:	strd	r4, [sp, #-16]!
   1e4d0:	mov	r4, r0
   1e4d4:	mov	r5, r1
   1e4d8:	str	r6, [sp, #8]
   1e4dc:	str	lr, [sp, #12]
   1e4e0:	ldr	r6, [r0, #104]	; 0x68
   1e4e4:	cmp	r3, r1
   1e4e8:	bgt	1e528 <__assert_fail@plt+0xcb88>
   1e4ec:	ldr	r2, [r0, #48]	; 0x30
   1e4f0:	cmp	r3, r2
   1e4f4:	bge	1e528 <__assert_fail@plt+0xcb88>
   1e4f8:	add	r1, r5, #1
   1e4fc:	mov	r0, r4
   1e500:	bl	1d934 <__assert_fail@plt+0xbf94>
   1e504:	cmp	r0, #0
   1e508:	bne	1e518 <__assert_fail@plt+0xcb78>
   1e50c:	cmp	r6, r5
   1e510:	movge	r0, #0
   1e514:	blt	1e544 <__assert_fail@plt+0xcba4>
   1e518:	ldrd	r4, [sp]
   1e51c:	ldr	r6, [sp, #8]
   1e520:	add	sp, sp, #12
   1e524:	pop	{pc}		; (ldr pc, [sp], #4)
   1e528:	ldr	r3, [r4, #28]
   1e52c:	cmp	r3, r5
   1e530:	bgt	1e50c <__assert_fail@plt+0xcb6c>
   1e534:	ldr	r2, [r4, #48]	; 0x30
   1e538:	cmp	r3, r2
   1e53c:	bge	1e50c <__assert_fail@plt+0xcb6c>
   1e540:	b	1e4f8 <__assert_fail@plt+0xcb58>
   1e544:	ldr	r3, [r4, #100]	; 0x64
   1e548:	sub	r2, r5, r6
   1e54c:	add	r0, r6, #1
   1e550:	lsl	r2, r2, #2
   1e554:	mov	r1, #0
   1e558:	add	r0, r3, r0, lsl #2
   1e55c:	bl	11814 <memset@plt>
   1e560:	str	r5, [r4, #104]	; 0x68
   1e564:	mov	r0, #0
   1e568:	ldrd	r4, [sp]
   1e56c:	ldr	r6, [sp, #8]
   1e570:	add	sp, sp, #12
   1e574:	pop	{pc}		; (ldr pc, [sp], #4)
   1e578:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1e57c:	subs	r4, r0, #0
   1e580:	strd	r6, [sp, #8]
   1e584:	str	r8, [sp, #16]
   1e588:	str	lr, [sp, #20]
   1e58c:	ldr	r7, [sp, #28]
   1e590:	beq	1e63c <__assert_fail@plt+0xcc9c>
   1e594:	ldr	ip, [r4]
   1e598:	cmp	ip, #0
   1e59c:	beq	1e63c <__assert_fail@plt+0xcc9c>
   1e5a0:	sub	ip, ip, #1
   1e5a4:	ldr	lr, [r4, #8]
   1e5a8:	mov	r0, r3
   1e5ac:	add	r5, ip, ip, lsl #1
   1e5b0:	mov	r8, r1
   1e5b4:	lsl	r6, r2, #3
   1e5b8:	lsl	r5, r5, #3
   1e5bc:	mov	r2, r6
   1e5c0:	ldr	r3, [lr, r5]
   1e5c4:	add	lr, lr, r5
   1e5c8:	ldr	r1, [lr, #8]
   1e5cc:	str	ip, [r4]
   1e5d0:	str	r3, [r8]
   1e5d4:	bl	115d4 <memcpy@plt>
   1e5d8:	ldr	r3, [r4, #8]
   1e5dc:	mov	r2, r6
   1e5e0:	ldr	r0, [sp, #24]
   1e5e4:	add	r3, r3, r5
   1e5e8:	ldr	r1, [r3, #8]
   1e5ec:	add	r1, r1, r6
   1e5f0:	bl	115d4 <memcpy@plt>
   1e5f4:	ldr	r0, [r7, #8]
   1e5f8:	bl	1c734 <__assert_fail@plt+0xad94>
   1e5fc:	ldr	r3, [r4, #8]
   1e600:	add	r3, r3, r5
   1e604:	ldr	r0, [r3, #8]
   1e608:	bl	1c734 <__assert_fail@plt+0xad94>
   1e60c:	ldr	r3, [r4, #8]
   1e610:	add	r5, r3, r5
   1e614:	ldr	r0, [r5, #4]
   1e618:	ldrd	r2, [r5, #12]
   1e61c:	strd	r2, [r7]
   1e620:	ldr	r3, [r5, #20]
   1e624:	str	r3, [r7, #8]
   1e628:	ldrd	r4, [sp]
   1e62c:	ldrd	r6, [sp, #8]
   1e630:	ldr	r8, [sp, #16]
   1e634:	add	sp, sp, #20
   1e638:	pop	{pc}		; (ldr pc, [sp], #4)
   1e63c:	mvn	r0, #0
   1e640:	b	1e628 <__assert_fail@plt+0xcc88>
   1e644:	ldr	r3, [r0, #28]
   1e648:	add	ip, r1, #1
   1e64c:	cmp	ip, r3
   1e650:	bge	1e698 <__assert_fail@plt+0xccf8>
   1e654:	ldr	r2, [r0, #8]
   1e658:	ldr	r0, [r2, ip, lsl #2]
   1e65c:	add	r2, r2, ip, lsl #2
   1e660:	cmn	r0, #1
   1e664:	bne	1e698 <__assert_fail@plt+0xccf8>
   1e668:	sub	r0, r3, r1
   1e66c:	mov	r3, #1
   1e670:	b	1e680 <__assert_fail@plt+0xcce0>
   1e674:	ldr	ip, [r2, #4]!
   1e678:	cmn	ip, #1
   1e67c:	bne	1e690 <__assert_fail@plt+0xccf0>
   1e680:	add	r3, r3, #1
   1e684:	cmp	r3, r0
   1e688:	bne	1e674 <__assert_fail@plt+0xccd4>
   1e68c:	bx	lr
   1e690:	mov	r0, r3
   1e694:	bx	lr
   1e698:	mov	r0, #1
   1e69c:	bx	lr
   1e6a0:	cmp	r0, #0
   1e6a4:	ble	1e720 <__assert_fail@plt+0xcd80>
   1e6a8:	push	{lr}		; (str lr, [sp, #-4]!)
   1e6ac:	sub	ip, r0, #1
   1e6b0:	mov	r0, #0
   1e6b4:	ldr	lr, [r1]
   1e6b8:	cmp	r0, ip
   1e6bc:	bcs	1e6f8 <__assert_fail@plt+0xcd58>
   1e6c0:	add	r1, r0, ip
   1e6c4:	lsr	r1, r1, #1
   1e6c8:	ldr	r3, [lr, r1, lsl #2]
   1e6cc:	cmp	r2, r3
   1e6d0:	ble	1e6e8 <__assert_fail@plt+0xcd48>
   1e6d4:	b	1e70c <__assert_fail@plt+0xcd6c>
   1e6d8:	ldr	ip, [lr, r3, lsl #2]
   1e6dc:	cmp	ip, r2
   1e6e0:	blt	1e714 <__assert_fail@plt+0xcd74>
   1e6e4:	mov	r1, r3
   1e6e8:	add	r3, r0, r1
   1e6ec:	cmp	r0, r1
   1e6f0:	lsr	r3, r3, #1
   1e6f4:	bcc	1e6d8 <__assert_fail@plt+0xcd38>
   1e6f8:	ldr	r3, [lr, r0, lsl #2]
   1e6fc:	cmp	r2, r3
   1e700:	addeq	r0, r0, #1
   1e704:	movne	r0, #0
   1e708:	pop	{pc}		; (ldr pc, [sp], #4)
   1e70c:	mov	r3, r1
   1e710:	mov	r1, ip
   1e714:	add	r0, r3, #1
   1e718:	mov	ip, r1
   1e71c:	b	1e6b8 <__assert_fail@plt+0xcd18>
   1e720:	mov	r0, #0
   1e724:	bx	lr
   1e728:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1e72c:	mov	r5, r1
   1e730:	mov	r4, r2
   1e734:	strd	r6, [sp, #8]
   1e738:	mov	r6, r0
   1e73c:	strd	r8, [sp, #16]
   1e740:	mov	r9, r3
   1e744:	add	r8, r1, #8
   1e748:	str	lr, [sp, #24]
   1e74c:	sub	sp, sp, #12
   1e750:	ldr	r7, [sp, #40]	; 0x28
   1e754:	mov	r1, r8
   1e758:	mov	r2, r4
   1e75c:	ldr	r0, [r5, #4]
   1e760:	bl	1e6a0 <__assert_fail@plt+0xcd00>
   1e764:	cmp	r0, #0
   1e768:	mov	r1, r4
   1e76c:	mov	r0, r5
   1e770:	bne	1e838 <__assert_fail@plt+0xce98>
   1e774:	ldr	r3, [r6]
   1e778:	add	r2, r3, r4, lsl #3
   1e77c:	ldrb	r2, [r2, #4]
   1e780:	cmp	r2, r7
   1e784:	bne	1e794 <__assert_fail@plt+0xcdf4>
   1e788:	ldr	r3, [r3, r4, lsl #3]
   1e78c:	cmp	r3, r9
   1e790:	beq	1e800 <__assert_fail@plt+0xce60>
   1e794:	bl	1e0cc <__assert_fail@plt+0xc72c>
   1e798:	cmp	r0, #0
   1e79c:	add	r4, r4, r4, lsl #1
   1e7a0:	beq	1e81c <__assert_fail@plt+0xce7c>
   1e7a4:	ldr	r3, [r6, #20]
   1e7a8:	lsl	r4, r4, #2
   1e7ac:	add	r3, r3, r4
   1e7b0:	ldr	r2, [r3, #4]
   1e7b4:	cmp	r2, #0
   1e7b8:	beq	1e838 <__assert_fail@plt+0xce98>
   1e7bc:	cmp	r2, #2
   1e7c0:	ldr	r2, [r3, #8]
   1e7c4:	beq	1e7d0 <__assert_fail@plt+0xce30>
   1e7c8:	ldr	r4, [r2]
   1e7cc:	b	1e754 <__assert_fail@plt+0xcdb4>
   1e7d0:	mov	r3, r9
   1e7d4:	mov	r1, r5
   1e7d8:	ldr	r2, [r2, #4]
   1e7dc:	mov	r0, r6
   1e7e0:	str	r7, [sp]
   1e7e4:	bl	1e728 <__assert_fail@plt+0xcd88>
   1e7e8:	cmp	r0, #0
   1e7ec:	bne	1e820 <__assert_fail@plt+0xce80>
   1e7f0:	ldr	r3, [r6, #20]
   1e7f4:	add	r4, r3, r4
   1e7f8:	ldr	r2, [r4, #8]
   1e7fc:	b	1e7c8 <__assert_fail@plt+0xce28>
   1e800:	cmp	r7, #9
   1e804:	bne	1e838 <__assert_fail@plt+0xce98>
   1e808:	mov	r1, r4
   1e80c:	mov	r0, r5
   1e810:	bl	1e0cc <__assert_fail@plt+0xc72c>
   1e814:	cmp	r0, #0
   1e818:	bne	1e838 <__assert_fail@plt+0xce98>
   1e81c:	mov	r0, #12
   1e820:	add	sp, sp, #12
   1e824:	ldrd	r4, [sp]
   1e828:	ldrd	r6, [sp, #8]
   1e82c:	ldrd	r8, [sp, #16]
   1e830:	add	sp, sp, #24
   1e834:	pop	{pc}		; (ldr pc, [sp], #4)
   1e838:	mov	r0, #0
   1e83c:	b	1e820 <__assert_fail@plt+0xce80>
   1e840:	ldr	r3, [r0]
   1e844:	cmp	r2, r3
   1e848:	bge	1e86c <__assert_fail@plt+0xcecc>
   1e84c:	ldr	r3, [r1]
   1e850:	add	r3, r3, r2, lsl #2
   1e854:	ldr	r1, [r3, #4]
   1e858:	add	r2, r2, #1
   1e85c:	str	r1, [r3], #4
   1e860:	ldr	r1, [r0]
   1e864:	cmp	r2, r1
   1e868:	blt	1e854 <__assert_fail@plt+0xceb4>
   1e86c:	bx	lr
   1e870:	ldrb	r3, [r1, #24]
   1e874:	cmp	r3, #4
   1e878:	beq	1e8e4 <__assert_fail@plt+0xcf44>
   1e87c:	cmp	r3, #17
   1e880:	beq	1e88c <__assert_fail@plt+0xceec>
   1e884:	mov	r0, #0
   1e888:	bx	lr
   1e88c:	ldr	r3, [r1, #4]
   1e890:	cmp	r3, #0
   1e894:	beq	1e884 <__assert_fail@plt+0xcee4>
   1e898:	ldrb	r2, [r3, #24]
   1e89c:	cmp	r2, #17
   1e8a0:	bne	1e884 <__assert_fail@plt+0xcee4>
   1e8a4:	ldr	r2, [r3, #4]
   1e8a8:	ldr	r3, [r3, #20]
   1e8ac:	cmp	r2, #0
   1e8b0:	str	r2, [r1, #4]
   1e8b4:	strne	r1, [r2]
   1e8b8:	cmp	r3, #31
   1e8bc:	ldr	r1, [r1, #20]
   1e8c0:	ldr	r2, [r0, #132]	; 0x84
   1e8c4:	ldr	r1, [r2, r1, lsl #2]
   1e8c8:	str	r1, [r2, r3, lsl #2]
   1e8cc:	bgt	1e884 <__assert_fail@plt+0xcee4>
   1e8d0:	ldr	r2, [r0, #80]	; 0x50
   1e8d4:	mov	r1, #1
   1e8d8:	bic	r3, r2, r1, lsl r3
   1e8dc:	str	r3, [r0, #80]	; 0x50
   1e8e0:	b	1e884 <__assert_fail@plt+0xcee4>
   1e8e4:	ldr	r2, [r0, #132]	; 0x84
   1e8e8:	cmp	r2, #0
   1e8ec:	beq	1e884 <__assert_fail@plt+0xcee4>
   1e8f0:	push	{lr}		; (str lr, [sp, #-4]!)
   1e8f4:	mov	ip, #1
   1e8f8:	ldr	lr, [r1, #20]
   1e8fc:	ldr	r3, [r0, #80]	; 0x50
   1e900:	ldr	r2, [r2, lr, lsl #2]
   1e904:	orr	r3, r3, ip, lsl r2
   1e908:	str	r2, [r1, #20]
   1e90c:	str	r3, [r0, #80]	; 0x50
   1e910:	mov	r0, #0
   1e914:	pop	{pc}		; (ldr pc, [sp], #4)
   1e918:	ldrb	r3, [r1, #24]
   1e91c:	ldr	r2, [r1, #4]
   1e920:	cmp	r3, #11
   1e924:	streq	r1, [r2, #16]
   1e928:	beq	1e948 <__assert_fail@plt+0xcfa8>
   1e92c:	cmp	r3, #16
   1e930:	bne	1e950 <__assert_fail@plt+0xcfb0>
   1e934:	ldr	r3, [r1, #8]
   1e938:	ldr	r0, [r3, #12]
   1e93c:	str	r0, [r2, #16]
   1e940:	ldr	r2, [r1, #16]
   1e944:	str	r2, [r3, #16]
   1e948:	mov	r0, #0
   1e94c:	bx	lr
   1e950:	cmp	r2, #0
   1e954:	mov	r0, #0
   1e958:	ldrne	r3, [r1, #16]
   1e95c:	strne	r3, [r2, #16]
   1e960:	ldr	r3, [r1, #8]
   1e964:	cmp	r3, #0
   1e968:	ldrne	r2, [r1, #16]
   1e96c:	strne	r2, [r3, #16]
   1e970:	bx	lr
   1e974:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e978:	mov	r4, #0
   1e97c:	strd	r6, [sp, #8]
   1e980:	strd	r8, [sp, #16]
   1e984:	ldr	r9, [r0, #108]	; 0x6c
   1e988:	strd	sl, [sp, #24]
   1e98c:	str	lr, [sp, #32]
   1e990:	sub	sp, sp, #28
   1e994:	ldr	r6, [sp, #64]	; 0x40
   1e998:	ldr	r7, [sp, #72]	; 0x48
   1e99c:	mov	ip, r9
   1e9a0:	ldr	lr, [r0, #84]	; 0x54
   1e9a4:	str	lr, [sp, #8]
   1e9a8:	cmp	r4, ip
   1e9ac:	bge	1ea08 <__assert_fail@plt+0xd068>
   1e9b0:	add	lr, r4, ip
   1e9b4:	ldr	r5, [r0, #116]	; 0x74
   1e9b8:	add	lr, lr, lr, lsr #31
   1e9bc:	asr	lr, lr, #1
   1e9c0:	add	r8, lr, lr, lsl #1
   1e9c4:	add	r8, r5, r8, lsl #3
   1e9c8:	ldr	r8, [r8, #4]
   1e9cc:	cmp	r6, r8
   1e9d0:	ble	1e9f8 <__assert_fail@plt+0xd058>
   1e9d4:	b	1eb58 <__assert_fail@plt+0xd1b8>
   1e9d8:	asr	ip, ip, #1
   1e9dc:	add	r8, ip, ip, lsl #1
   1e9e0:	mov	sl, ip
   1e9e4:	add	r8, r5, r8, lsl #3
   1e9e8:	ldr	r8, [r8, #4]
   1e9ec:	cmp	r8, r6
   1e9f0:	blt	1eb60 <__assert_fail@plt+0xd1c0>
   1e9f4:	mov	lr, ip
   1e9f8:	add	ip, r4, lr
   1e9fc:	cmp	r4, lr
   1ea00:	add	ip, ip, ip, lsr #31
   1ea04:	blt	1e9d8 <__assert_fail@plt+0xd038>
   1ea08:	cmp	r9, r4
   1ea0c:	ble	1eb9c <__assert_fail@plt+0xd1fc>
   1ea10:	ldr	ip, [r0, #116]	; 0x74
   1ea14:	add	lr, r4, r4, lsl #1
   1ea18:	add	ip, ip, lr, lsl #3
   1ea1c:	ldr	ip, [ip, #4]
   1ea20:	cmp	r6, ip
   1ea24:	mvnne	r4, #0
   1ea28:	mov	ip, r9
   1ea2c:	mov	r5, #0
   1ea30:	cmp	r5, ip
   1ea34:	bge	1ea90 <__assert_fail@plt+0xd0f0>
   1ea38:	add	lr, r5, ip
   1ea3c:	ldr	r8, [r0, #116]	; 0x74
   1ea40:	add	lr, lr, lr, lsr #31
   1ea44:	asr	lr, lr, #1
   1ea48:	add	sl, lr, lr, lsl #1
   1ea4c:	add	sl, r8, sl, lsl #3
   1ea50:	ldr	sl, [sl, #4]
   1ea54:	cmp	r7, sl
   1ea58:	ble	1ea80 <__assert_fail@plt+0xd0e0>
   1ea5c:	b	1eb6c <__assert_fail@plt+0xd1cc>
   1ea60:	asr	ip, ip, #1
   1ea64:	add	sl, ip, ip, lsl #1
   1ea68:	mov	fp, ip
   1ea6c:	add	sl, r8, sl, lsl #3
   1ea70:	ldr	sl, [sl, #4]
   1ea74:	cmp	sl, r7
   1ea78:	blt	1eb74 <__assert_fail@plt+0xd1d4>
   1ea7c:	mov	lr, ip
   1ea80:	add	ip, r5, lr
   1ea84:	cmp	r5, lr
   1ea88:	add	ip, ip, ip, lsr #31
   1ea8c:	blt	1ea60 <__assert_fail@plt+0xd0c0>
   1ea90:	cmp	r9, r5
   1ea94:	ble	1eba4 <__assert_fail@plt+0xd204>
   1ea98:	ldr	ip, [r0, #116]	; 0x74
   1ea9c:	add	lr, r5, r5, lsl #1
   1eaa0:	add	ip, ip, lr, lsl #3
   1eaa4:	ldr	ip, [ip, #4]
   1eaa8:	cmp	r7, ip
   1eaac:	mvnne	r5, #0
   1eab0:	ldr	ip, [r1]
   1eab4:	cmp	ip, #0
   1eab8:	ble	1eb94 <__assert_fail@plt+0xd1f4>
   1eabc:	mov	r9, r2
   1eac0:	mov	r8, r0
   1eac4:	str	r3, [sp, #12]
   1eac8:	mov	fp, #0
   1eacc:	str	r4, [sp, #16]
   1ead0:	str	r1, [sp, #20]
   1ead4:	ldr	r1, [r9]
   1ead8:	mov	r0, r8
   1eadc:	ldrd	r2, [sp, #8]
   1eae0:	ldr	ip, [r8, #116]	; 0x74
   1eae4:	ldr	r1, [r1, fp, lsl #2]
   1eae8:	ldr	r2, [r2]
   1eaec:	add	lr, r1, r1, lsl #1
   1eaf0:	ldr	ip, [ip, lr, lsl #3]
   1eaf4:	ldr	r4, [r2, ip, lsl #3]
   1eaf8:	str	r6, [sp]
   1eafc:	ldr	r2, [sp, #16]
   1eb00:	str	r2, [sp, #4]
   1eb04:	mov	r2, r4
   1eb08:	bl	1ce6c <__assert_fail@plt+0xb4cc>
   1eb0c:	ldr	r1, [r9]
   1eb10:	mov	sl, r0
   1eb14:	mov	r2, r4
   1eb18:	mov	r0, r8
   1eb1c:	ldr	r3, [sp, #68]	; 0x44
   1eb20:	ldr	r1, [r1, fp, lsl #2]
   1eb24:	str	r7, [sp]
   1eb28:	str	r5, [sp, #4]
   1eb2c:	bl	1ce6c <__assert_fail@plt+0xb4cc>
   1eb30:	cmp	sl, r0
   1eb34:	beq	1eb80 <__assert_fail@plt+0xd1e0>
   1eb38:	mov	r0, #1
   1eb3c:	add	sp, sp, #28
   1eb40:	ldrd	r4, [sp]
   1eb44:	ldrd	r6, [sp, #8]
   1eb48:	ldrd	r8, [sp, #16]
   1eb4c:	ldrd	sl, [sp, #24]
   1eb50:	add	sp, sp, #32
   1eb54:	pop	{pc}		; (ldr pc, [sp], #4)
   1eb58:	mov	sl, lr
   1eb5c:	mov	lr, ip
   1eb60:	add	r4, sl, #1
   1eb64:	mov	ip, lr
   1eb68:	b	1e9a8 <__assert_fail@plt+0xd008>
   1eb6c:	mov	fp, lr
   1eb70:	mov	lr, ip
   1eb74:	add	r5, fp, #1
   1eb78:	mov	ip, lr
   1eb7c:	b	1ea30 <__assert_fail@plt+0xd090>
   1eb80:	ldr	r3, [sp, #20]
   1eb84:	add	fp, fp, #1
   1eb88:	ldr	r3, [r3]
   1eb8c:	cmp	fp, r3
   1eb90:	blt	1ead4 <__assert_fail@plt+0xd134>
   1eb94:	mov	r0, #0
   1eb98:	b	1eb3c <__assert_fail@plt+0xd19c>
   1eb9c:	mvn	r4, #0
   1eba0:	b	1ea28 <__assert_fail@plt+0xd088>
   1eba4:	mvn	r5, #0
   1eba8:	b	1eab0 <__assert_fail@plt+0xd110>
   1ebac:	strd	r4, [sp, #-16]!
   1ebb0:	mov	r4, r0
   1ebb4:	mov	r5, r2
   1ebb8:	str	r6, [sp, #8]
   1ebbc:	mov	r6, r1
   1ebc0:	str	lr, [sp, #12]
   1ebc4:	b	1ebcc <__assert_fail@plt+0xd22c>
   1ebc8:	mov	r4, r3
   1ebcc:	mov	r1, r4
   1ebd0:	mov	r0, r5
   1ebd4:	blx	r6
   1ebd8:	cmp	r0, #0
   1ebdc:	bne	1ec0c <__assert_fail@plt+0xd26c>
   1ebe0:	ldr	r3, [r4, #4]
   1ebe4:	cmp	r3, #0
   1ebe8:	bne	1ebc8 <__assert_fail@plt+0xd228>
   1ebec:	ldr	r2, [r4, #8]
   1ebf0:	cmp	r2, #0
   1ebf4:	cmpne	r2, r3
   1ebf8:	mov	r3, r4
   1ebfc:	bne	1ec1c <__assert_fail@plt+0xd27c>
   1ec00:	ldr	r2, [r4]
   1ec04:	subs	r4, r2, #0
   1ec08:	bne	1ebec <__assert_fail@plt+0xd24c>
   1ec0c:	ldrd	r4, [sp]
   1ec10:	ldr	r6, [sp, #8]
   1ec14:	add	sp, sp, #12
   1ec18:	pop	{pc}		; (ldr pc, [sp], #4)
   1ec1c:	mov	r3, r2
   1ec20:	b	1ebc8 <__assert_fail@plt+0xd228>
   1ec24:	strd	r4, [sp, #-20]!	; 0xffffffec
   1ec28:	mov	r5, r0
   1ec2c:	ldr	r0, [r1]
   1ec30:	strd	r6, [sp, #8]
   1ec34:	str	lr, [sp, #16]
   1ec38:	sub	sp, sp, #20
   1ec3c:	cmp	r0, #31
   1ec40:	beq	1ecc0 <__assert_fail@plt+0xd320>
   1ec44:	lsl	ip, r0, #5
   1ec48:	add	r4, r0, #1
   1ec4c:	ldr	r0, [r5]
   1ec50:	add	r7, ip, #4
   1ec54:	str	r4, [r1]
   1ec58:	add	lr, r0, ip
   1ec5c:	mov	r6, #0
   1ec60:	ldr	r1, [sp, #40]	; 0x28
   1ec64:	add	ip, ip, #16
   1ec68:	cmp	r2, r6
   1ec6c:	str	r6, [lr, #4]
   1ec70:	add	ip, r0, ip
   1ec74:	add	r0, r0, r7
   1ec78:	strd	r2, [lr, #8]
   1ec7c:	mvn	r7, #0
   1ec80:	ldrd	r4, [r1]
   1ec84:	strd	r4, [lr, #24]
   1ec88:	ldrb	r1, [ip, #14]
   1ec8c:	bic	r1, r1, #12
   1ec90:	strb	r1, [ip, #14]
   1ec94:	str	r6, [lr, #16]
   1ec98:	str	r6, [lr, #20]
   1ec9c:	str	r7, [lr, #32]
   1eca0:	strne	r0, [r2]
   1eca4:	cmp	r3, #0
   1eca8:	strne	r0, [r3]
   1ecac:	add	sp, sp, #20
   1ecb0:	ldrd	r4, [sp]
   1ecb4:	ldrd	r6, [sp, #8]
   1ecb8:	add	sp, sp, #16
   1ecbc:	pop	{pc}		; (ldr pc, [sp], #4)
   1ecc0:	mov	r0, #996	; 0x3e4
   1ecc4:	stmib	sp, {r1, r2, r3}
   1ecc8:	bl	1c864 <__assert_fail@plt+0xaec4>
   1eccc:	cmp	r0, #0
   1ecd0:	beq	1ecac <__assert_fail@plt+0xd30c>
   1ecd4:	ldr	lr, [r5]
   1ecd8:	mov	r7, #4
   1ecdc:	mov	r4, #1
   1ece0:	mov	ip, #0
   1ece4:	str	r0, [r5]
   1ece8:	ldmib	sp, {r1, r2, r3}
   1ecec:	str	lr, [r0]
   1ecf0:	b	1ec54 <__assert_fail@plt+0xd2b4>
   1ecf4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ecf8:	mov	r4, r0
   1ecfc:	ldr	r5, [r0]
   1ed00:	strd	r6, [sp, #8]
   1ed04:	add	r7, r1, #56	; 0x38
   1ed08:	add	r6, r1, #64	; 0x40
   1ed0c:	str	r8, [sp, #16]
   1ed10:	str	lr, [sp, #20]
   1ed14:	sub	sp, sp, #16
   1ed18:	add	r8, sp, #12
   1ed1c:	b	1ed28 <__assert_fail@plt+0xd388>
   1ed20:	mov	r4, r3
   1ed24:	add	r8, r5, #4
   1ed28:	add	ip, r4, #20
   1ed2c:	mov	r3, #0
   1ed30:	mov	r2, r3
   1ed34:	mov	r1, r6
   1ed38:	mov	r0, r7
   1ed3c:	str	ip, [sp]
   1ed40:	bl	1ec24 <__assert_fail@plt+0xd284>
   1ed44:	cmp	r0, #0
   1ed48:	str	r0, [r8]
   1ed4c:	beq	1ed98 <__assert_fail@plt+0xd3f8>
   1ed50:	str	r5, [r0]
   1ed54:	ldr	r5, [r8]
   1ed58:	ldrb	r3, [r5, #26]
   1ed5c:	orr	r3, r3, #4
   1ed60:	strb	r3, [r5, #26]
   1ed64:	ldr	r3, [r4, #4]
   1ed68:	cmp	r3, #0
   1ed6c:	bne	1ed20 <__assert_fail@plt+0xd380>
   1ed70:	ldr	r2, [r4, #8]
   1ed74:	cmp	r2, r3
   1ed78:	cmpne	r2, #0
   1ed7c:	mov	r3, r4
   1ed80:	bne	1edb0 <__assert_fail@plt+0xd410>
   1ed84:	ldr	r2, [r4]
   1ed88:	ldr	r5, [r5]
   1ed8c:	subs	r4, r2, #0
   1ed90:	bne	1ed70 <__assert_fail@plt+0xd3d0>
   1ed94:	ldr	r0, [sp, #12]
   1ed98:	add	sp, sp, #16
   1ed9c:	ldrd	r4, [sp]
   1eda0:	ldrd	r6, [sp, #8]
   1eda4:	ldr	r8, [sp, #16]
   1eda8:	add	sp, sp, #20
   1edac:	pop	{pc}		; (ldr pc, [sp], #4)
   1edb0:	mov	r4, r2
   1edb4:	add	r8, r5, #8
   1edb8:	b	1ed28 <__assert_fail@plt+0xd388>
   1edbc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1edc0:	ldr	r4, [r1]
   1edc4:	ldr	r5, [r2, #4]
   1edc8:	strd	r6, [sp, #8]
   1edcc:	ldrb	r7, [r1, #28]
   1edd0:	strd	r8, [sp, #16]
   1edd4:	mov	r8, r2
   1edd8:	strd	sl, [sp, #24]
   1eddc:	str	lr, [sp, #32]
   1ede0:	sub	sp, sp, #28
   1ede4:	ands	r7, r7, #16
   1ede8:	str	r0, [sp, #12]
   1edec:	beq	1efb8 <__assert_fail@plt+0xd618>
   1edf0:	cmp	r5, #0
   1edf4:	beq	1ef48 <__assert_fail@plt+0xd5a8>
   1edf8:	ldr	r3, [r2, #20]
   1edfc:	cmp	r3, #31
   1ee00:	bgt	1ef28 <__assert_fail@plt+0xd588>
   1ee04:	ldr	r2, [r4, #80]	; 0x50
   1ee08:	lsr	r3, r2, r3
   1ee0c:	tst	r3, #1
   1ee10:	beq	1ef28 <__assert_fail@plt+0xd588>
   1ee14:	add	r7, sp, #16
   1ee18:	mov	ip, #8
   1ee1c:	add	r9, r4, #56	; 0x38
   1ee20:	mov	r3, #0
   1ee24:	add	r4, r4, #64	; 0x40
   1ee28:	mov	sl, #0
   1ee2c:	str	r7, [sp]
   1ee30:	mov	fp, #0
   1ee34:	mov	r2, r3
   1ee38:	str	r7, [sp, #8]
   1ee3c:	mov	r1, r4
   1ee40:	mov	r0, r9
   1ee44:	strd	sl, [sp, #16]
   1ee48:	strb	ip, [sp, #20]
   1ee4c:	bl	1ec24 <__assert_fail@plt+0xd284>
   1ee50:	mov	ip, #9
   1ee54:	mov	r3, #0
   1ee58:	str	r7, [sp]
   1ee5c:	mov	r6, r0
   1ee60:	mov	r1, r4
   1ee64:	strd	sl, [sp, #16]
   1ee68:	mov	r0, r9
   1ee6c:	mov	r2, r3
   1ee70:	strb	ip, [sp, #20]
   1ee74:	bl	1ec24 <__assert_fail@plt+0xd284>
   1ee78:	mov	r7, r0
   1ee7c:	ldr	r3, [sp, #8]
   1ee80:	mov	r0, #0
   1ee84:	mov	r1, #0
   1ee88:	mov	ip, #16
   1ee8c:	mov	r2, r5
   1ee90:	str	r3, [sp]
   1ee94:	mov	r3, r7
   1ee98:	strd	r0, [sp, #16]
   1ee9c:	mov	r1, r4
   1eea0:	mov	r0, r9
   1eea4:	strb	ip, [sp, #20]
   1eea8:	bl	1ec24 <__assert_fail@plt+0xd284>
   1eeac:	mov	fp, r0
   1eeb0:	ldr	r0, [sp, #8]
   1eeb4:	mov	r2, #0
   1eeb8:	mov	r3, #0
   1eebc:	mov	ip, #16
   1eec0:	mov	r1, r4
   1eec4:	str	r0, [sp]
   1eec8:	mov	r0, r9
   1eecc:	strd	r2, [sp, #16]
   1eed0:	mov	r3, fp
   1eed4:	mov	r2, r6
   1eed8:	strb	ip, [sp, #20]
   1eedc:	bl	1ec24 <__assert_fail@plt+0xd284>
   1eee0:	cmp	fp, #0
   1eee4:	cmpne	r0, #0
   1eee8:	mov	r5, r0
   1eeec:	beq	1f034 <__assert_fail@plt+0xd694>
   1eef0:	cmp	r7, #0
   1eef4:	cmpne	r6, #0
   1eef8:	beq	1f034 <__assert_fail@plt+0xd694>
   1eefc:	ldr	r2, [r8, #20]
   1ef00:	ldrb	r3, [r8, #26]
   1ef04:	str	r2, [r7, #20]
   1ef08:	str	r2, [r6, #20]
   1ef0c:	ldrb	r2, [r7, #26]
   1ef10:	ubfx	r3, r3, #3, #1
   1ef14:	bfi	r2, r3, #3, #1
   1ef18:	strb	r2, [r7, #26]
   1ef1c:	ldrb	r2, [r6, #26]
   1ef20:	bfi	r2, r3, #3, #1
   1ef24:	strb	r2, [r6, #26]
   1ef28:	mov	r0, r5
   1ef2c:	add	sp, sp, #28
   1ef30:	ldrd	r4, [sp]
   1ef34:	ldrd	r6, [sp, #8]
   1ef38:	ldrd	r8, [sp, #16]
   1ef3c:	ldrd	sl, [sp, #24]
   1ef40:	add	sp, sp, #32
   1ef44:	pop	{pc}		; (ldr pc, [sp], #4)
   1ef48:	add	r7, sp, #16
   1ef4c:	mov	ip, #8
   1ef50:	add	r9, r4, #56	; 0x38
   1ef54:	mov	fp, #0
   1ef58:	add	r4, r4, #64	; 0x40
   1ef5c:	mov	sl, #0
   1ef60:	str	r7, [sp]
   1ef64:	mov	r1, r4
   1ef68:	mov	r3, r5
   1ef6c:	str	r7, [sp, #8]
   1ef70:	mov	r2, r5
   1ef74:	mov	r0, r9
   1ef78:	strd	sl, [sp, #16]
   1ef7c:	strb	ip, [sp, #20]
   1ef80:	bl	1ec24 <__assert_fail@plt+0xd284>
   1ef84:	mov	ip, #9
   1ef88:	mov	r6, r0
   1ef8c:	str	r7, [sp]
   1ef90:	mov	r1, r4
   1ef94:	mov	r0, r9
   1ef98:	strd	sl, [sp, #16]
   1ef9c:	mov	r3, r5
   1efa0:	mov	r2, r5
   1efa4:	strb	ip, [sp, #20]
   1efa8:	bl	1ec24 <__assert_fail@plt+0xd284>
   1efac:	mov	fp, r0
   1efb0:	mov	r7, r0
   1efb4:	b	1eeb0 <__assert_fail@plt+0xd510>
   1efb8:	add	r3, sp, #16
   1efbc:	mov	ip, #8
   1efc0:	add	r9, r4, #56	; 0x38
   1efc4:	mov	fp, #0
   1efc8:	add	r4, r4, #64	; 0x40
   1efcc:	mov	sl, #0
   1efd0:	str	r3, [sp]
   1efd4:	mov	r2, r7
   1efd8:	mov	r1, r4
   1efdc:	str	r3, [sp, #8]
   1efe0:	mov	r0, r9
   1efe4:	mov	r3, r7
   1efe8:	strd	sl, [sp, #16]
   1efec:	strb	ip, [sp, #20]
   1eff0:	bl	1ec24 <__assert_fail@plt+0xd284>
   1eff4:	ldr	r3, [sp, #8]
   1eff8:	mov	ip, #9
   1effc:	mov	r2, r7
   1f000:	mov	r6, r0
   1f004:	mov	r1, r4
   1f008:	mov	r0, r9
   1f00c:	str	r3, [sp]
   1f010:	mov	r3, r7
   1f014:	strd	sl, [sp, #16]
   1f018:	strb	ip, [sp, #20]
   1f01c:	bl	1ec24 <__assert_fail@plt+0xd284>
   1f020:	cmp	r5, #0
   1f024:	mov	r7, r0
   1f028:	moveq	fp, r0
   1f02c:	bne	1ee7c <__assert_fail@plt+0xd4dc>
   1f030:	b	1eeb0 <__assert_fail@plt+0xd510>
   1f034:	ldr	r2, [sp, #12]
   1f038:	mov	r3, #12
   1f03c:	mov	r5, #0
   1f040:	str	r3, [r2]
   1f044:	b	1ef28 <__assert_fail@plt+0xd588>
   1f048:	ldr	r2, [r1, #4]
   1f04c:	mov	r3, #0
   1f050:	strd	r4, [sp, #-12]!
   1f054:	mov	r4, r1
   1f058:	mov	r5, r0
   1f05c:	str	lr, [sp, #8]
   1f060:	sub	sp, sp, #12
   1f064:	str	r3, [sp, #4]
   1f068:	cmp	r2, r3
   1f06c:	beq	1f07c <__assert_fail@plt+0xd6dc>
   1f070:	ldrb	r3, [r2, #24]
   1f074:	cmp	r3, #17
   1f078:	beq	1f0a8 <__assert_fail@plt+0xd708>
   1f07c:	ldr	r2, [r4, #8]
   1f080:	cmp	r2, #0
   1f084:	beq	1f094 <__assert_fail@plt+0xd6f4>
   1f088:	ldrb	r3, [r2, #24]
   1f08c:	cmp	r3, #17
   1f090:	beq	1f0c4 <__assert_fail@plt+0xd724>
   1f094:	ldr	r0, [sp, #4]
   1f098:	add	sp, sp, #12
   1f09c:	ldrd	r4, [sp]
   1f0a0:	add	sp, sp, #8
   1f0a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f0a8:	mov	r1, r0
   1f0ac:	add	r0, sp, #4
   1f0b0:	bl	1edbc <__assert_fail@plt+0xd41c>
   1f0b4:	cmp	r0, #0
   1f0b8:	str	r0, [r4, #4]
   1f0bc:	strne	r4, [r0]
   1f0c0:	b	1f07c <__assert_fail@plt+0xd6dc>
   1f0c4:	mov	r1, r5
   1f0c8:	add	r0, sp, #4
   1f0cc:	bl	1edbc <__assert_fail@plt+0xd41c>
   1f0d0:	cmp	r0, #0
   1f0d4:	str	r0, [r4, #8]
   1f0d8:	strne	r4, [r0]
   1f0dc:	b	1f094 <__assert_fail@plt+0xd6f4>
   1f0e0:	ldr	r3, [r1, #4]
   1f0e4:	cmp	r3, #0
   1f0e8:	str	r3, [r0, #4]
   1f0ec:	ble	1f150 <__assert_fail@plt+0xd7b0>
   1f0f0:	strd	r4, [sp, #-16]!
   1f0f4:	mov	r4, r0
   1f0f8:	lsl	r0, r3, #2
   1f0fc:	str	r6, [sp, #8]
   1f100:	mov	r5, r1
   1f104:	str	lr, [sp, #12]
   1f108:	str	r3, [r4]
   1f10c:	bl	1c864 <__assert_fail@plt+0xaec4>
   1f110:	cmp	r0, #0
   1f114:	str	r0, [r4, #8]
   1f118:	moveq	r2, #12
   1f11c:	streq	r0, [r4]
   1f120:	streq	r0, [r4, #4]
   1f124:	beq	1f13c <__assert_fail@plt+0xd79c>
   1f128:	ldr	r2, [r5, #4]
   1f12c:	ldr	r1, [r5, #8]
   1f130:	lsl	r2, r2, #2
   1f134:	bl	115d4 <memcpy@plt>
   1f138:	mov	r2, #0
   1f13c:	ldrd	r4, [sp]
   1f140:	mov	r0, r2
   1f144:	ldr	r6, [sp, #8]
   1f148:	add	sp, sp, #12
   1f14c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f150:	mov	r3, #0
   1f154:	str	r3, [r0]
   1f158:	str	r3, [r0, #4]
   1f15c:	str	r3, [r0, #8]
   1f160:	mov	r0, r3
   1f164:	bx	lr
   1f168:	cmp	r1, #0
   1f16c:	beq	1f188 <__assert_fail@plt+0xd7e8>
   1f170:	ldr	r3, [r1, #4]
   1f174:	cmp	r2, #0
   1f178:	cmpne	r3, #0
   1f17c:	bgt	1f1b4 <__assert_fail@plt+0xd814>
   1f180:	cmp	r3, #0
   1f184:	bgt	1f290 <__assert_fail@plt+0xd8f0>
   1f188:	cmp	r2, #0
   1f18c:	beq	1f19c <__assert_fail@plt+0xd7fc>
   1f190:	ldr	r3, [r2, #4]
   1f194:	cmp	r3, #0
   1f198:	bgt	1f28c <__assert_fail@plt+0xd8ec>
   1f19c:	mov	r3, #0
   1f1a0:	str	r3, [r0]
   1f1a4:	str	r3, [r0, #4]
   1f1a8:	str	r3, [r0, #8]
   1f1ac:	mov	r0, r3
   1f1b0:	bx	lr
   1f1b4:	ldr	ip, [r2, #4]
   1f1b8:	cmp	ip, #0
   1f1bc:	ble	1f290 <__assert_fail@plt+0xd8f0>
   1f1c0:	add	r3, r3, ip
   1f1c4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1f1c8:	mov	r4, r2
   1f1cc:	strd	r6, [sp, #8]
   1f1d0:	mov	r6, r0
   1f1d4:	lsl	r0, r3, #2
   1f1d8:	strd	r8, [sp, #16]
   1f1dc:	mov	r5, r1
   1f1e0:	str	sl, [sp, #24]
   1f1e4:	str	lr, [sp, #28]
   1f1e8:	str	r3, [r6]
   1f1ec:	bl	1c864 <__assert_fail@plt+0xaec4>
   1f1f0:	cmp	r0, #0
   1f1f4:	str	r0, [r6, #8]
   1f1f8:	beq	1f2cc <__assert_fail@plt+0xd92c>
   1f1fc:	mov	r7, #0
   1f200:	mov	lr, r0
   1f204:	ldr	r9, [r4, #4]
   1f208:	mov	ip, r7
   1f20c:	mov	r3, r7
   1f210:	ldr	r8, [r5, #4]
   1f214:	b	1f258 <__assert_fail@plt+0xd8b8>
   1f218:	ldr	r2, [r5, #8]
   1f21c:	cmp	r9, ip
   1f220:	add	r1, r2, r3, lsl #2
   1f224:	ble	1f2b4 <__assert_fail@plt+0xd914>
   1f228:	ldr	r1, [r4, #8]
   1f22c:	add	r7, r7, #1
   1f230:	ldr	r2, [r2, r3, lsl #2]
   1f234:	ldr	r1, [r1, ip, lsl #2]
   1f238:	cmp	r2, r1
   1f23c:	addgt	ip, ip, #1
   1f240:	strgt	r1, [lr]
   1f244:	bgt	1f254 <__assert_fail@plt+0xd8b4>
   1f248:	add	r3, r3, #1
   1f24c:	addeq	ip, ip, #1
   1f250:	str	r2, [lr]
   1f254:	add	lr, lr, #4
   1f258:	cmp	r8, r3
   1f25c:	bgt	1f218 <__assert_fail@plt+0xd878>
   1f260:	cmp	r9, ip
   1f264:	bgt	1f294 <__assert_fail@plt+0xd8f4>
   1f268:	mov	r2, #0
   1f26c:	str	r7, [r6, #4]
   1f270:	ldrd	r4, [sp]
   1f274:	mov	r0, r2
   1f278:	ldrd	r6, [sp, #8]
   1f27c:	ldrd	r8, [sp, #16]
   1f280:	ldr	sl, [sp, #24]
   1f284:	add	sp, sp, #28
   1f288:	pop	{pc}		; (ldr pc, [sp], #4)
   1f28c:	mov	r1, r2
   1f290:	b	1f0e0 <__assert_fail@plt+0xd740>
   1f294:	ldr	r1, [r4, #8]
   1f298:	sub	r2, r9, ip
   1f29c:	add	r0, r0, r7, lsl #2
   1f2a0:	add	r7, r7, r2
   1f2a4:	lsl	r2, r2, #2
   1f2a8:	add	r1, r1, ip, lsl #2
   1f2ac:	bl	115d4 <memcpy@plt>
   1f2b0:	b	1f268 <__assert_fail@plt+0xd8c8>
   1f2b4:	sub	r3, r8, r3
   1f2b8:	mov	r0, lr
   1f2bc:	lsl	r2, r3, #2
   1f2c0:	add	r7, r7, r3
   1f2c4:	bl	115d4 <memcpy@plt>
   1f2c8:	b	1f268 <__assert_fail@plt+0xd8c8>
   1f2cc:	mov	r2, #12
   1f2d0:	b	1f270 <__assert_fail@plt+0xd8d0>
   1f2d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f2d8:	strd	r6, [sp, #8]
   1f2dc:	str	lr, [sp, #32]
   1f2e0:	ldr	lr, [r2, #4]
   1f2e4:	strd	r8, [sp, #16]
   1f2e8:	strd	sl, [sp, #24]
   1f2ec:	sub	sp, sp, #28
   1f2f0:	cmp	lr, #0
   1f2f4:	moveq	r4, lr
   1f2f8:	streq	lr, [r0]
   1f2fc:	beq	1f3a4 <__assert_fail@plt+0xda04>
   1f300:	add	r7, r3, lr
   1f304:	ble	1f320 <__assert_fail@plt+0xd980>
   1f308:	ldr	ip, [r2, #8]
   1f30c:	add	r4, ip, lr, lsl #2
   1f310:	ldr	lr, [ip], #4
   1f314:	cmp	r4, ip
   1f318:	add	r7, r7, lr
   1f31c:	bne	1f310 <__assert_fail@plt+0xd970>
   1f320:	mov	sl, r3
   1f324:	ldr	r3, [r1, #68]	; 0x44
   1f328:	mov	r8, r2
   1f32c:	mov	r9, r1
   1f330:	str	r0, [sp, #20]
   1f334:	ldr	r2, [r1, #32]
   1f338:	and	r3, r3, r7
   1f33c:	add	r3, r3, r3, lsl #1
   1f340:	lsl	r3, r3, #2
   1f344:	ldr	fp, [r2, r3]
   1f348:	add	r3, r2, r3
   1f34c:	cmp	fp, #0
   1f350:	ble	1f3c4 <__assert_fail@plt+0xda24>
   1f354:	ldr	r6, [r3, #8]
   1f358:	mov	r5, #0
   1f35c:	sub	r6, r6, #4
   1f360:	b	1f36c <__assert_fail@plt+0xd9cc>
   1f364:	cmp	r5, fp
   1f368:	beq	1f3c4 <__assert_fail@plt+0xda24>
   1f36c:	ldr	r4, [r6, #4]!
   1f370:	add	r5, r5, #1
   1f374:	ldr	r3, [r4]
   1f378:	cmp	r3, r7
   1f37c:	bne	1f364 <__assert_fail@plt+0xd9c4>
   1f380:	ldrb	r3, [r4, #52]	; 0x34
   1f384:	and	r3, r3, #15
   1f388:	cmp	r3, sl
   1f38c:	bne	1f364 <__assert_fail@plt+0xd9c4>
   1f390:	mov	r1, r8
   1f394:	ldr	r0, [r4, #40]	; 0x28
   1f398:	bl	1c9a0 <__assert_fail@plt+0xb000>
   1f39c:	cmp	r0, #0
   1f3a0:	beq	1f364 <__assert_fail@plt+0xd9c4>
   1f3a4:	mov	r0, r4
   1f3a8:	add	sp, sp, #28
   1f3ac:	ldrd	r4, [sp]
   1f3b0:	ldrd	r6, [sp, #8]
   1f3b4:	ldrd	r8, [sp, #16]
   1f3b8:	ldrd	sl, [sp, #24]
   1f3bc:	add	sp, sp, #32
   1f3c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f3c4:	mov	r1, #1
   1f3c8:	mov	r0, #56	; 0x38
   1f3cc:	bl	1c478 <__assert_fail@plt+0xaad8>
   1f3d0:	subs	r4, r0, #0
   1f3d4:	beq	1f54c <__assert_fail@plt+0xdbac>
   1f3d8:	add	fp, r4, #4
   1f3dc:	mov	r1, r8
   1f3e0:	mov	r0, fp
   1f3e4:	bl	1f0e0 <__assert_fail@plt+0xd740>
   1f3e8:	subs	r3, r0, #0
   1f3ec:	bne	1f5b0 <__assert_fail@plt+0xdc10>
   1f3f0:	ldrb	r2, [r4, #52]	; 0x34
   1f3f4:	str	fp, [r4, #40]	; 0x28
   1f3f8:	ldr	lr, [r8, #4]
   1f3fc:	bfi	r2, sl, #0, #4
   1f400:	cmp	lr, #0
   1f404:	strb	r2, [r4, #52]	; 0x34
   1f408:	ble	1f52c <__assert_fail@plt+0xdb8c>
   1f40c:	add	r2, r4, #12
   1f410:	mov	r6, r3
   1f414:	str	r2, [sp, #4]
   1f418:	add	r2, r4, #8
   1f41c:	str	r2, [sp, #8]
   1f420:	and	r2, sl, #4
   1f424:	str	r7, [sp, #16]
   1f428:	mov	r7, r3
   1f42c:	str	r2, [sp, #12]
   1f430:	ldr	r1, [r8, #8]
   1f434:	ldr	r2, [r9]
   1f438:	ldr	r1, [r1, r6, lsl #2]
   1f43c:	add	r2, r2, r1, lsl #3
   1f440:	ldr	r5, [r2, #4]
   1f444:	ldrb	r1, [r2, #4]
   1f448:	ubfx	r5, r5, #8, #10
   1f44c:	cmp	r1, #1
   1f450:	cmpeq	r5, #0
   1f454:	beq	1f51c <__assert_fail@plt+0xdb7c>
   1f458:	ldrb	ip, [r2, #6]
   1f45c:	cmp	r1, #2
   1f460:	ldrb	r2, [r4, #52]	; 0x34
   1f464:	ubfx	ip, ip, #4, #1
   1f468:	ubfx	r0, r2, #5, #1
   1f46c:	orr	r0, r0, ip
   1f470:	bfi	r2, r0, #5, #1
   1f474:	strb	r2, [r4, #52]	; 0x34
   1f478:	uxtbeq	r2, r2
   1f47c:	orreq	r2, r2, #16
   1f480:	strbeq	r2, [r4, #52]	; 0x34
   1f484:	beq	1f49c <__assert_fail@plt+0xdafc>
   1f488:	cmp	r1, #4
   1f48c:	bne	1f49c <__assert_fail@plt+0xdafc>
   1f490:	ldrb	r2, [r4, #52]	; 0x34
   1f494:	orr	r2, r2, #64	; 0x40
   1f498:	strb	r2, [r4, #52]	; 0x34
   1f49c:	cmp	r5, #0
   1f4a0:	beq	1f51c <__assert_fail@plt+0xdb7c>
   1f4a4:	ldr	r2, [r4, #40]	; 0x28
   1f4a8:	cmp	fp, r2
   1f4ac:	beq	1f57c <__assert_fail@plt+0xdbdc>
   1f4b0:	tst	r5, #1
   1f4b4:	beq	1f568 <__assert_fail@plt+0xdbc8>
   1f4b8:	tst	sl, #1
   1f4bc:	beq	1f4ec <__assert_fail@plt+0xdb4c>
   1f4c0:	tst	r5, #2
   1f4c4:	bne	1f4ec <__assert_fail@plt+0xdb4c>
   1f4c8:	tst	r5, #16
   1f4cc:	beq	1f4d8 <__assert_fail@plt+0xdb38>
   1f4d0:	tst	sl, #2
   1f4d4:	beq	1f4ec <__assert_fail@plt+0xdb4c>
   1f4d8:	tst	r5, #64	; 0x40
   1f4dc:	beq	1f560 <__assert_fail@plt+0xdbc0>
   1f4e0:	ldr	r3, [sp, #12]
   1f4e4:	cmp	r3, #0
   1f4e8:	bne	1f560 <__assert_fail@plt+0xdbc0>
   1f4ec:	subs	r2, r6, r7
   1f4f0:	bmi	1f514 <__assert_fail@plt+0xdb74>
   1f4f4:	ldr	r1, [r4, #8]
   1f4f8:	cmp	r2, r1
   1f4fc:	bge	1f514 <__assert_fail@plt+0xdb74>
   1f500:	sub	ip, r1, #1
   1f504:	ldr	r1, [sp, #4]
   1f508:	str	ip, [r4, #8]
   1f50c:	ldr	r0, [sp, #8]
   1f510:	bl	1e840 <__assert_fail@plt+0xcea0>
   1f514:	ldr	lr, [r8, #4]
   1f518:	add	r7, r7, #1
   1f51c:	add	r6, r6, #1
   1f520:	cmp	r6, lr
   1f524:	blt	1f430 <__assert_fail@plt+0xda90>
   1f528:	ldr	r7, [sp, #16]
   1f52c:	mov	r2, r7
   1f530:	mov	r0, r9
   1f534:	mov	r1, r4
   1f538:	bl	1d02c <__assert_fail@plt+0xb68c>
   1f53c:	cmp	r0, #0
   1f540:	beq	1f3a4 <__assert_fail@plt+0xda04>
   1f544:	mov	r0, r4
   1f548:	bl	1dd74 <__assert_fail@plt+0xc3d4>
   1f54c:	ldr	r2, [sp, #20]
   1f550:	mov	r3, #12
   1f554:	mov	r4, #0
   1f558:	str	r3, [r2]
   1f55c:	b	1f3a4 <__assert_fail@plt+0xda04>
   1f560:	ldr	lr, [r8, #4]
   1f564:	b	1f51c <__assert_fail@plt+0xdb7c>
   1f568:	tst	r5, #2
   1f56c:	beq	1f4c8 <__assert_fail@plt+0xdb28>
   1f570:	tst	sl, #1
   1f574:	beq	1f4c8 <__assert_fail@plt+0xdb28>
   1f578:	b	1f4ec <__assert_fail@plt+0xdb4c>
   1f57c:	mov	r0, #12
   1f580:	bl	1c864 <__assert_fail@plt+0xaec4>
   1f584:	subs	r3, r0, #0
   1f588:	beq	1f544 <__assert_fail@plt+0xdba4>
   1f58c:	mov	r1, r8
   1f590:	str	r3, [r4, #40]	; 0x28
   1f594:	bl	1f0e0 <__assert_fail@plt+0xd740>
   1f598:	subs	r7, r0, #0
   1f59c:	bne	1f544 <__assert_fail@plt+0xdba4>
   1f5a0:	ldrb	r2, [r4, #52]	; 0x34
   1f5a4:	orr	r2, r2, #128	; 0x80
   1f5a8:	strb	r2, [r4, #52]	; 0x34
   1f5ac:	b	1f4b0 <__assert_fail@plt+0xdb10>
   1f5b0:	mov	r0, r4
   1f5b4:	bl	1c734 <__assert_fail@plt+0xad94>
   1f5b8:	b	1f54c <__assert_fail@plt+0xdbac>
   1f5bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f5c0:	strd	r6, [sp, #8]
   1f5c4:	ldr	r6, [r2, #4]
   1f5c8:	strd	r8, [sp, #16]
   1f5cc:	strd	sl, [sp, #24]
   1f5d0:	str	lr, [sp, #32]
   1f5d4:	sub	sp, sp, #4
   1f5d8:	cmp	r6, #0
   1f5dc:	moveq	r4, r6
   1f5e0:	streq	r6, [r0]
   1f5e4:	beq	1f76c <__assert_fail@plt+0xddcc>
   1f5e8:	ble	1f604 <__assert_fail@plt+0xdc64>
   1f5ec:	ldr	r3, [r2, #8]
   1f5f0:	add	lr, r3, r6, lsl #2
   1f5f4:	ldr	ip, [r3], #4
   1f5f8:	cmp	lr, r3
   1f5fc:	add	r6, r6, ip
   1f600:	bne	1f5f4 <__assert_fail@plt+0xdc54>
   1f604:	ldr	r3, [r1, #68]	; 0x44
   1f608:	mov	sl, r2
   1f60c:	mov	r8, r1
   1f610:	mov	r9, r0
   1f614:	ldr	r2, [r1, #32]
   1f618:	and	r3, r3, r6
   1f61c:	add	r3, r3, r3, lsl #1
   1f620:	lsl	r3, r3, #2
   1f624:	ldr	fp, [r2, r3]
   1f628:	add	r3, r2, r3
   1f62c:	cmp	fp, #0
   1f630:	ble	1f670 <__assert_fail@plt+0xdcd0>
   1f634:	ldr	r7, [r3, #8]
   1f638:	mov	r5, #0
   1f63c:	sub	r7, r7, #4
   1f640:	ldr	r4, [r7, #4]!
   1f644:	mov	r1, sl
   1f648:	add	r5, r5, #1
   1f64c:	ldr	r3, [r4]
   1f650:	add	r0, r4, #4
   1f654:	cmp	r3, r6
   1f658:	bne	1f668 <__assert_fail@plt+0xdcc8>
   1f65c:	bl	1c9a0 <__assert_fail@plt+0xb000>
   1f660:	cmp	r0, #0
   1f664:	bne	1f76c <__assert_fail@plt+0xddcc>
   1f668:	cmp	fp, r5
   1f66c:	bne	1f640 <__assert_fail@plt+0xdca0>
   1f670:	mov	r1, #1
   1f674:	mov	r0, #56	; 0x38
   1f678:	bl	1c478 <__assert_fail@plt+0xaad8>
   1f67c:	subs	r4, r0, #0
   1f680:	beq	1f7bc <__assert_fail@plt+0xde1c>
   1f684:	add	r7, r4, #4
   1f688:	mov	r1, sl
   1f68c:	mov	r0, r7
   1f690:	bl	1f0e0 <__assert_fail@plt+0xd740>
   1f694:	cmp	r0, #0
   1f698:	bne	1f7b4 <__assert_fail@plt+0xde14>
   1f69c:	ldr	r5, [sl, #4]
   1f6a0:	str	r7, [r4, #40]	; 0x28
   1f6a4:	cmp	r5, #0
   1f6a8:	ble	1f754 <__assert_fail@plt+0xddb4>
   1f6ac:	ldr	r1, [sl, #8]
   1f6b0:	mov	sl, #65280	; 0xff00
   1f6b4:	movt	sl, #3
   1f6b8:	ldr	r7, [r8]
   1f6bc:	add	r5, r1, r5, lsl #2
   1f6c0:	b	1f704 <__assert_fail@plt+0xdd64>
   1f6c4:	ldrb	r2, [r4, #52]	; 0x34
   1f6c8:	cmp	r0, #2
   1f6cc:	ldrb	lr, [r3, #6]
   1f6d0:	ubfx	ip, r2, #5, #1
   1f6d4:	ubfx	lr, lr, #4, #1
   1f6d8:	orr	ip, ip, lr
   1f6dc:	bfi	r2, ip, #5, #1
   1f6e0:	strb	r2, [r4, #52]	; 0x34
   1f6e4:	beq	1f78c <__assert_fail@plt+0xddec>
   1f6e8:	cmp	r0, #4
   1f6ec:	bne	1f79c <__assert_fail@plt+0xddfc>
   1f6f0:	ldrb	r3, [r4, #52]	; 0x34
   1f6f4:	orr	r3, r3, #64	; 0x40
   1f6f8:	strb	r3, [r4, #52]	; 0x34
   1f6fc:	cmp	r5, r1
   1f700:	beq	1f754 <__assert_fail@plt+0xddb4>
   1f704:	ldr	r3, [r1], #4
   1f708:	add	r3, r7, r3, lsl #3
   1f70c:	ldrb	r0, [r3, #4]
   1f710:	cmp	r0, #1
   1f714:	bne	1f6c4 <__assert_fail@plt+0xdd24>
   1f718:	ldr	r2, [r3, #4]
   1f71c:	tst	sl, r2
   1f720:	beq	1f6fc <__assert_fail@plt+0xdd5c>
   1f724:	ldrb	r2, [r3, #6]
   1f728:	ldrb	r3, [r4, #52]	; 0x34
   1f72c:	ubfx	r0, r2, #4, #1
   1f730:	ubfx	r2, r3, #5, #1
   1f734:	orr	r2, r2, r0
   1f738:	bfi	r3, r2, #5, #1
   1f73c:	strb	r3, [r4, #52]	; 0x34
   1f740:	ldrb	r3, [r4, #52]	; 0x34
   1f744:	cmp	r5, r1
   1f748:	orr	r3, r3, #128	; 0x80
   1f74c:	strb	r3, [r4, #52]	; 0x34
   1f750:	bne	1f704 <__assert_fail@plt+0xdd64>
   1f754:	mov	r2, r6
   1f758:	mov	r0, r8
   1f75c:	mov	r1, r4
   1f760:	bl	1d02c <__assert_fail@plt+0xb68c>
   1f764:	cmp	r0, #0
   1f768:	bne	1f7cc <__assert_fail@plt+0xde2c>
   1f76c:	mov	r0, r4
   1f770:	add	sp, sp, #4
   1f774:	ldrd	r4, [sp]
   1f778:	ldrd	r6, [sp, #8]
   1f77c:	ldrd	r8, [sp, #16]
   1f780:	ldrd	sl, [sp, #24]
   1f784:	add	sp, sp, #32
   1f788:	pop	{pc}		; (ldr pc, [sp], #4)
   1f78c:	uxtb	r3, r2
   1f790:	orr	r3, r3, #16
   1f794:	strb	r3, [r4, #52]	; 0x34
   1f798:	b	1f6fc <__assert_fail@plt+0xdd5c>
   1f79c:	cmp	r0, #12
   1f7a0:	beq	1f740 <__assert_fail@plt+0xdda0>
   1f7a4:	ldr	r3, [r3, #4]
   1f7a8:	tst	sl, r3
   1f7ac:	beq	1f6fc <__assert_fail@plt+0xdd5c>
   1f7b0:	b	1f740 <__assert_fail@plt+0xdda0>
   1f7b4:	mov	r0, r4
   1f7b8:	bl	1c734 <__assert_fail@plt+0xad94>
   1f7bc:	mov	r3, #12
   1f7c0:	mov	r4, #0
   1f7c4:	str	r3, [r9]
   1f7c8:	b	1f76c <__assert_fail@plt+0xddcc>
   1f7cc:	mov	r0, r4
   1f7d0:	bl	1dd74 <__assert_fail@plt+0xc3d4>
   1f7d4:	b	1f7bc <__assert_fail@plt+0xde1c>
   1f7d8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1f7dc:	strd	r6, [sp, #8]
   1f7e0:	subs	r7, r3, #0
   1f7e4:	subgt	r4, r1, #4
   1f7e8:	subgt	r6, r2, #4
   1f7ec:	str	r8, [sp, #16]
   1f7f0:	movgt	r5, #0
   1f7f4:	movgt	r8, r0
   1f7f8:	str	lr, [sp, #20]
   1f7fc:	sub	sp, sp, #16
   1f800:	bgt	1f830 <__assert_fail@plt+0xde90>
   1f804:	b	1f894 <__assert_fail@plt+0xdef4>
   1f808:	bl	1f5bc <__assert_fail@plt+0xdc1c>
   1f80c:	str	r0, [r4]
   1f810:	ldr	r0, [sp, #12]
   1f814:	bl	1c734 <__assert_fail@plt+0xad94>
   1f818:	ldr	r3, [sp]
   1f81c:	cmp	r3, #0
   1f820:	bne	1f878 <__assert_fail@plt+0xded8>
   1f824:	add	r5, r5, #1
   1f828:	cmp	r7, r5
   1f82c:	beq	1f894 <__assert_fail@plt+0xdef4>
   1f830:	ldr	r1, [r4, #4]!
   1f834:	ldr	ip, [r6, #4]!
   1f838:	cmp	r1, #0
   1f83c:	streq	ip, [r4]
   1f840:	beq	1f824 <__assert_fail@plt+0xde84>
   1f844:	cmp	ip, #0
   1f848:	add	r2, ip, #4
   1f84c:	add	r1, r1, #4
   1f850:	add	r0, sp, #4
   1f854:	beq	1f824 <__assert_fail@plt+0xde84>
   1f858:	bl	1f168 <__assert_fail@plt+0xd7c8>
   1f85c:	mov	r3, r0
   1f860:	add	r2, sp, #4
   1f864:	cmp	r3, #0
   1f868:	mov	r1, r8
   1f86c:	mov	r0, sp
   1f870:	str	r3, [sp]
   1f874:	beq	1f808 <__assert_fail@plt+0xde68>
   1f878:	mov	r0, r3
   1f87c:	add	sp, sp, #16
   1f880:	ldrd	r4, [sp]
   1f884:	ldrd	r6, [sp, #8]
   1f888:	ldr	r8, [sp, #16]
   1f88c:	add	sp, sp, #20
   1f890:	pop	{pc}		; (ldr pc, [sp], #4)
   1f894:	mov	r3, #0
   1f898:	b	1f878 <__assert_fail@plt+0xded8>
   1f89c:	ldr	ip, [r1, #4]
   1f8a0:	cmp	ip, #0
   1f8a4:	beq	1fa3c <__assert_fail@plt+0xe09c>
   1f8a8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1f8ac:	strd	r6, [sp, #8]
   1f8b0:	str	lr, [sp, #28]
   1f8b4:	ldr	lr, [r2, #4]
   1f8b8:	strd	r8, [sp, #16]
   1f8bc:	str	sl, [sp, #24]
   1f8c0:	cmp	lr, #0
   1f8c4:	beq	1f9c4 <__assert_fail@plt+0xe024>
   1f8c8:	ldr	r4, [r0]
   1f8cc:	mov	r9, r2
   1f8d0:	add	r2, ip, lr
   1f8d4:	mov	r8, r1
   1f8d8:	mov	r7, r0
   1f8dc:	ldmib	r0, {r3, sl}
   1f8e0:	add	r1, r2, r3
   1f8e4:	cmp	r1, r4
   1f8e8:	bgt	1fa4c <__assert_fail@plt+0xe0ac>
   1f8ec:	ldr	r0, [r8, #8]
   1f8f0:	add	r1, r3, ip
   1f8f4:	sub	r5, ip, #1
   1f8f8:	sub	r6, lr, #1
   1f8fc:	add	r1, r1, lr
   1f900:	ldr	r2, [r9, #8]
   1f904:	sub	r3, r3, #1
   1f908:	ldr	ip, [r0, r5, lsl #2]
   1f90c:	ldr	lr, [r2, r6, lsl #2]
   1f910:	cmp	ip, lr
   1f914:	beq	1f930 <__assert_fail@plt+0xdf90>
   1f918:	bge	1f9e4 <__assert_fail@plt+0xe044>
   1f91c:	subs	r6, r6, #1
   1f920:	bmi	1f980 <__assert_fail@plt+0xdfe0>
   1f924:	ldr	lr, [r2, r6, lsl #2]
   1f928:	cmp	ip, lr
   1f92c:	bne	1f918 <__assert_fail@plt+0xdf78>
   1f930:	cmp	r3, #0
   1f934:	blt	1f960 <__assert_fail@plt+0xdfc0>
   1f938:	ldr	r4, [sl, r3, lsl #2]
   1f93c:	add	lr, sl, r3, lsl #2
   1f940:	cmp	r4, ip
   1f944:	bgt	1f958 <__assert_fail@plt+0xdfb8>
   1f948:	b	1f9f4 <__assert_fail@plt+0xe054>
   1f94c:	ldr	r4, [lr, #-4]!
   1f950:	cmp	r4, ip
   1f954:	ble	1f9f4 <__assert_fail@plt+0xe054>
   1f958:	subs	r3, r3, #1
   1f95c:	bcs	1f94c <__assert_fail@plt+0xdfac>
   1f960:	sub	r1, r1, #1
   1f964:	str	ip, [sl, r1, lsl #2]
   1f968:	subs	r5, r5, #1
   1f96c:	bmi	1f980 <__assert_fail@plt+0xdfe0>
   1f970:	subs	r6, r6, #1
   1f974:	bmi	1f980 <__assert_fail@plt+0xdfe0>
   1f978:	ldr	ip, [r0, r5, lsl #2]
   1f97c:	b	1f924 <__assert_fail@plt+0xdf84>
   1f980:	ldr	ip, [r7, #4]
   1f984:	ldr	r0, [r8, #4]
   1f988:	ldr	r2, [r9, #4]
   1f98c:	sub	r3, ip, #1
   1f990:	add	r0, ip, r0
   1f994:	add	r0, r0, r2
   1f998:	sub	r2, r0, r1
   1f99c:	sub	r0, r0, #1
   1f9a0:	add	ip, ip, r2
   1f9a4:	cmp	r3, #0
   1f9a8:	cmpge	r2, #0
   1f9ac:	str	ip, [r7, #4]
   1f9b0:	bgt	1fa10 <__assert_fail@plt+0xe070>
   1f9b4:	lsl	r2, r2, #2
   1f9b8:	add	r1, sl, r1, lsl #2
   1f9bc:	mov	r0, sl
   1f9c0:	bl	115d4 <memcpy@plt>
   1f9c4:	mov	ip, #0
   1f9c8:	ldrd	r4, [sp]
   1f9cc:	mov	r0, ip
   1f9d0:	ldrd	r6, [sp, #8]
   1f9d4:	ldrd	r8, [sp, #16]
   1f9d8:	ldr	sl, [sp, #24]
   1f9dc:	add	sp, sp, #28
   1f9e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f9e4:	subs	r5, r5, #1
   1f9e8:	bmi	1f980 <__assert_fail@plt+0xdfe0>
   1f9ec:	ldr	ip, [r0, r5, lsl #2]
   1f9f0:	b	1f910 <__assert_fail@plt+0xdf70>
   1f9f4:	cmp	r4, ip
   1f9f8:	bne	1f960 <__assert_fail@plt+0xdfc0>
   1f9fc:	b	1f968 <__assert_fail@plt+0xdfc8>
   1fa00:	sub	r3, r3, #1
   1fa04:	str	ip, [sl, r4, lsl #2]
   1fa08:	cmn	r3, #1
   1fa0c:	beq	1fa44 <__assert_fail@plt+0xe0a4>
   1fa10:	ldr	lr, [sl, r0, lsl #2]
   1fa14:	add	r4, r3, r2
   1fa18:	ldr	ip, [sl, r3, lsl #2]
   1fa1c:	cmp	lr, ip
   1fa20:	ble	1fa00 <__assert_fail@plt+0xe060>
   1fa24:	subs	r2, r2, #1
   1fa28:	sub	r0, r0, #1
   1fa2c:	str	lr, [sl, r4, lsl #2]
   1fa30:	bne	1fa10 <__assert_fail@plt+0xe070>
   1fa34:	ldr	sl, [r7, #8]
   1fa38:	b	1f9b8 <__assert_fail@plt+0xe018>
   1fa3c:	mov	r0, ip
   1fa40:	bx	lr
   1fa44:	ldr	sl, [r7, #8]
   1fa48:	b	1f9b4 <__assert_fail@plt+0xe014>
   1fa4c:	add	r4, r2, r4
   1fa50:	mov	r0, sl
   1fa54:	lsl	r1, r4, #2
   1fa58:	bl	1c910 <__assert_fail@plt+0xaf70>
   1fa5c:	subs	sl, r0, #0
   1fa60:	beq	1fa7c <__assert_fail@plt+0xe0dc>
   1fa64:	ldr	ip, [r8, #4]
   1fa68:	ldr	lr, [r9, #4]
   1fa6c:	str	r4, [r7]
   1fa70:	str	sl, [r7, #8]
   1fa74:	ldr	r3, [r7, #4]
   1fa78:	b	1f8ec <__assert_fail@plt+0xdf4c>
   1fa7c:	mov	ip, #12
   1fa80:	b	1f9c8 <__assert_fail@plt+0xe028>
   1fa84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1fa88:	mov	r5, #0
   1fa8c:	strd	r6, [sp, #8]
   1fa90:	ldr	r7, [r0, #28]
   1fa94:	strd	r8, [sp, #16]
   1fa98:	strd	sl, [sp, #24]
   1fa9c:	mov	sl, r1
   1faa0:	add	r1, r1, r1, lsl #1
   1faa4:	str	lr, [sp, #32]
   1faa8:	sub	sp, sp, #44	; 0x2c
   1faac:	add	r7, r7, r1, lsl #2
   1fab0:	str	r2, [sp, #12]
   1fab4:	str	r5, [sp, #28]
   1fab8:	str	r5, [sp, #32]
   1fabc:	str	r5, [sp, #36]	; 0x24
   1fac0:	ldr	r6, [r7, #4]
   1fac4:	str	r3, [sp, #20]
   1fac8:	cmp	r6, r5
   1facc:	ble	1fcb4 <__assert_fail@plt+0xe314>
   1fad0:	add	r3, r7, #8
   1fad4:	mov	r9, r0
   1fad8:	str	r3, [sp, #8]
   1fadc:	add	r3, r2, #8
   1fae0:	str	r3, [sp, #16]
   1fae4:	b	1fb38 <__assert_fail@plt+0xe198>
   1fae8:	cmp	r0, #0
   1faec:	bne	1fbc0 <__assert_fail@plt+0xe220>
   1faf0:	mov	r2, r3
   1faf4:	ldr	r3, [sp, #12]
   1faf8:	ldr	r1, [sp, #16]
   1fafc:	ldr	r0, [r3, #4]
   1fb00:	bl	1e6a0 <__assert_fail@plt+0xcd00>
   1fb04:	cmp	r0, #0
   1fb08:	beq	1fbc0 <__assert_fail@plt+0xe220>
   1fb0c:	ldr	r2, [r9, #28]
   1fb10:	add	r0, sp, #28
   1fb14:	ldr	r1, [sp, #20]
   1fb18:	add	r2, r2, r4
   1fb1c:	bl	1f89c <__assert_fail@plt+0xdefc>
   1fb20:	cmp	r0, #0
   1fb24:	bne	1fca4 <__assert_fail@plt+0xe304>
   1fb28:	ldr	r6, [r7, #4]
   1fb2c:	add	r5, r5, #1
   1fb30:	cmp	r6, r5
   1fb34:	ble	1fbf0 <__assert_fail@plt+0xe250>
   1fb38:	ldr	r3, [r7, #8]
   1fb3c:	ldr	r4, [r3, r5, lsl #2]
   1fb40:	cmp	sl, r4
   1fb44:	beq	1fb2c <__assert_fail@plt+0xe18c>
   1fb48:	ldr	r3, [r9]
   1fb4c:	add	r3, r3, r4, lsl #3
   1fb50:	ldrb	r3, [r3, #4]
   1fb54:	tst	r3, #8
   1fb58:	beq	1fb2c <__assert_fail@plt+0xe18c>
   1fb5c:	ldr	r8, [r9, #20]
   1fb60:	add	r4, r4, r4, lsl #1
   1fb64:	mov	r0, r6
   1fb68:	lsl	r4, r4, #2
   1fb6c:	ldr	r1, [sp, #8]
   1fb70:	add	r8, r8, r4
   1fb74:	ldr	fp, [r8, #8]
   1fb78:	ldr	r3, [fp]
   1fb7c:	mov	r2, r3
   1fb80:	str	r3, [sp, #4]
   1fb84:	bl	1e6a0 <__assert_fail@plt+0xcd00>
   1fb88:	ldr	r2, [r8, #4]
   1fb8c:	ldr	r3, [sp, #4]
   1fb90:	cmp	r2, #1
   1fb94:	bgt	1fae8 <__assert_fail@plt+0xe148>
   1fb98:	cmp	r0, #0
   1fb9c:	moveq	r2, r3
   1fba0:	bne	1fb2c <__assert_fail@plt+0xe18c>
   1fba4:	ldr	r3, [sp, #12]
   1fba8:	ldr	r1, [sp, #16]
   1fbac:	ldr	r0, [r3, #4]
   1fbb0:	bl	1e6a0 <__assert_fail@plt+0xcd00>
   1fbb4:	cmp	r0, #0
   1fbb8:	beq	1fb2c <__assert_fail@plt+0xe18c>
   1fbbc:	b	1fb0c <__assert_fail@plt+0xe16c>
   1fbc0:	ldr	r8, [fp, #4]
   1fbc4:	cmp	r8, #0
   1fbc8:	ble	1fb2c <__assert_fail@plt+0xe18c>
   1fbcc:	mov	r2, r8
   1fbd0:	mov	r0, r6
   1fbd4:	ldr	r1, [sp, #8]
   1fbd8:	bl	1e6a0 <__assert_fail@plt+0xcd00>
   1fbdc:	cmp	r0, #0
   1fbe0:	beq	1fba4 <__assert_fail@plt+0xe204>
   1fbe4:	add	r5, r5, #1
   1fbe8:	cmp	r6, r5
   1fbec:	bgt	1fb38 <__assert_fail@plt+0xe198>
   1fbf0:	cmp	r6, #0
   1fbf4:	ble	1fc78 <__assert_fail@plt+0xe2d8>
   1fbf8:	ldr	sl, [sp, #12]
   1fbfc:	mov	r4, #0
   1fc00:	add	r8, sl, #8
   1fc04:	add	r9, sl, #4
   1fc08:	ldr	r3, [r7, #8]
   1fc0c:	add	r1, sp, #36	; 0x24
   1fc10:	ldr	r0, [sp, #32]
   1fc14:	ldr	r5, [r3, r4, lsl #2]
   1fc18:	add	r4, r4, #1
   1fc1c:	mov	r2, r5
   1fc20:	bl	1e6a0 <__assert_fail@plt+0xcd00>
   1fc24:	cmp	r0, #0
   1fc28:	mov	r1, r8
   1fc2c:	bne	1fc70 <__assert_fail@plt+0xe2d0>
   1fc30:	ldr	r5, [sl, #4]
   1fc34:	mov	r0, r5
   1fc38:	bl	1e6a0 <__assert_fail@plt+0xcd00>
   1fc3c:	sub	r3, r0, #1
   1fc40:	sub	ip, r5, #1
   1fc44:	cmp	r3, r5
   1fc48:	mov	r2, r3
   1fc4c:	movlt	r5, #0
   1fc50:	movge	r5, #1
   1fc54:	orrs	r3, r5, r3, lsr #31
   1fc58:	mov	r1, r8
   1fc5c:	mov	r0, r9
   1fc60:	bne	1fc70 <__assert_fail@plt+0xe2d0>
   1fc64:	str	ip, [sl, #4]
   1fc68:	bl	1e840 <__assert_fail@plt+0xcea0>
   1fc6c:	ldr	r6, [r7, #4]
   1fc70:	cmp	r6, r4
   1fc74:	bgt	1fc08 <__assert_fail@plt+0xe268>
   1fc78:	ldr	r0, [sp, #36]	; 0x24
   1fc7c:	mov	r4, #0
   1fc80:	bl	1c734 <__assert_fail@plt+0xad94>
   1fc84:	mov	r0, r4
   1fc88:	add	sp, sp, #44	; 0x2c
   1fc8c:	ldrd	r4, [sp]
   1fc90:	ldrd	r6, [sp, #8]
   1fc94:	ldrd	r8, [sp, #16]
   1fc98:	ldrd	sl, [sp, #24]
   1fc9c:	add	sp, sp, #32
   1fca0:	pop	{pc}		; (ldr pc, [sp], #4)
   1fca4:	mov	r4, r0
   1fca8:	ldr	r0, [sp, #36]	; 0x24
   1fcac:	bl	1c734 <__assert_fail@plt+0xad94>
   1fcb0:	b	1fc84 <__assert_fail@plt+0xe2e4>
   1fcb4:	mov	r0, r5
   1fcb8:	b	1fc7c <__assert_fail@plt+0xe2dc>
   1fcbc:	ldrb	r2, [r1, #24]
   1fcc0:	cmp	r2, #16
   1fcc4:	bne	1fce4 <__assert_fail@plt+0xe344>
   1fcc8:	ldr	r3, [r1, #4]
   1fccc:	mov	r0, #0
   1fcd0:	ldr	r2, [r3, #12]
   1fcd4:	ldr	r3, [r3, #28]
   1fcd8:	str	r2, [r1, #12]
   1fcdc:	str	r3, [r1, #28]
   1fce0:	bx	lr
   1fce4:	strd	r4, [sp, #-16]!
   1fce8:	mov	r4, r1
   1fcec:	add	r3, r1, #20
   1fcf0:	ldm	r3, {r1, r2}
   1fcf4:	mov	r5, r0
   1fcf8:	str	r6, [sp, #8]
   1fcfc:	str	lr, [sp, #12]
   1fd00:	str	r4, [r4, #12]
   1fd04:	bl	1db08 <__assert_fail@plt+0xc168>
   1fd08:	cmn	r0, #1
   1fd0c:	mov	r3, r0
   1fd10:	str	r0, [r4, #28]
   1fd14:	beq	1fd54 <__assert_fail@plt+0xe3b4>
   1fd18:	ldrb	r2, [r4, #24]
   1fd1c:	cmp	r2, #12
   1fd20:	movne	r0, #0
   1fd24:	bne	1fd44 <__assert_fail@plt+0xe3a4>
   1fd28:	ldr	r2, [r5]
   1fd2c:	mov	r0, #0
   1fd30:	ldr	r1, [r4, #20]
   1fd34:	add	r3, r2, r3, lsl #3
   1fd38:	ldr	r2, [r3, #4]
   1fd3c:	bfi	r2, r1, #8, #10
   1fd40:	str	r2, [r3, #4]
   1fd44:	ldrd	r4, [sp]
   1fd48:	ldr	r6, [sp, #8]
   1fd4c:	add	sp, sp, #12
   1fd50:	pop	{pc}		; (ldr pc, [sp], #4)
   1fd54:	mov	r0, #12
   1fd58:	b	1fd44 <__assert_fail@plt+0xe3a4>
   1fd5c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1fd60:	strd	r6, [sp, #8]
   1fd64:	mov	r6, r0
   1fd68:	ldr	r0, [r0]
   1fd6c:	str	r8, [sp, #16]
   1fd70:	str	lr, [sp, #20]
   1fd74:	cmp	r0, #0
   1fd78:	beq	1fdac <__assert_fail@plt+0xe40c>
   1fd7c:	ldr	r3, [r6, #8]
   1fd80:	cmp	r3, #0
   1fd84:	beq	1fdac <__assert_fail@plt+0xe40c>
   1fd88:	mov	r4, #0
   1fd8c:	b	1fd94 <__assert_fail@plt+0xe3f4>
   1fd90:	ldr	r0, [r6]
   1fd94:	add	r0, r0, r4, lsl #3
   1fd98:	add	r4, r4, #1
   1fd9c:	bl	1dab4 <__assert_fail@plt+0xc114>
   1fda0:	ldr	r3, [r6, #8]
   1fda4:	cmp	r3, r4
   1fda8:	bhi	1fd90 <__assert_fail@plt+0xe3f0>
   1fdac:	ldr	r0, [r6, #12]
   1fdb0:	bl	1c734 <__assert_fail@plt+0xad94>
   1fdb4:	ldr	r3, [r6, #8]
   1fdb8:	cmp	r3, #0
   1fdbc:	movne	r4, #0
   1fdc0:	movne	r5, r4
   1fdc4:	beq	1fe24 <__assert_fail@plt+0xe484>
   1fdc8:	ldr	r3, [r6, #24]
   1fdcc:	add	r5, r5, #1
   1fdd0:	cmp	r3, #0
   1fdd4:	add	r2, r3, r4
   1fdd8:	beq	1fde4 <__assert_fail@plt+0xe444>
   1fddc:	ldr	r0, [r2, #8]
   1fde0:	bl	1c734 <__assert_fail@plt+0xad94>
   1fde4:	ldr	r3, [r6, #28]
   1fde8:	cmp	r3, #0
   1fdec:	add	r2, r3, r4
   1fdf0:	beq	1fdfc <__assert_fail@plt+0xe45c>
   1fdf4:	ldr	r0, [r2, #8]
   1fdf8:	bl	1c734 <__assert_fail@plt+0xad94>
   1fdfc:	ldr	r3, [r6, #20]
   1fe00:	cmp	r3, #0
   1fe04:	add	r2, r3, r4
   1fe08:	beq	1fe14 <__assert_fail@plt+0xe474>
   1fe0c:	ldr	r0, [r2, #8]
   1fe10:	bl	1c734 <__assert_fail@plt+0xad94>
   1fe14:	ldr	r3, [r6, #8]
   1fe18:	add	r4, r4, #12
   1fe1c:	cmp	r3, r5
   1fe20:	bhi	1fdc8 <__assert_fail@plt+0xe428>
   1fe24:	ldr	r0, [r6, #20]
   1fe28:	bl	1c734 <__assert_fail@plt+0xad94>
   1fe2c:	ldr	r0, [r6, #24]
   1fe30:	bl	1c734 <__assert_fail@plt+0xad94>
   1fe34:	ldr	r0, [r6, #28]
   1fe38:	bl	1c734 <__assert_fail@plt+0xad94>
   1fe3c:	ldr	r0, [r6]
   1fe40:	bl	1c734 <__assert_fail@plt+0xad94>
   1fe44:	ldr	r0, [r6, #32]
   1fe48:	cmp	r0, #0
   1fe4c:	movne	r7, #0
   1fe50:	beq	1feac <__assert_fail@plt+0xe50c>
   1fe54:	add	r5, r7, r7, lsl #1
   1fe58:	ldr	r3, [r0, r5, lsl #2]
   1fe5c:	add	r5, r0, r5, lsl #2
   1fe60:	cmp	r3, #0
   1fe64:	movgt	r4, #0
   1fe68:	ble	1fe88 <__assert_fail@plt+0xe4e8>
   1fe6c:	ldr	r3, [r5, #8]
   1fe70:	ldr	r0, [r3, r4, lsl #2]
   1fe74:	add	r4, r4, #1
   1fe78:	bl	1dd74 <__assert_fail@plt+0xc3d4>
   1fe7c:	ldr	r3, [r5]
   1fe80:	cmp	r4, r3
   1fe84:	blt	1fe6c <__assert_fail@plt+0xe4cc>
   1fe88:	ldr	r0, [r5, #8]
   1fe8c:	add	r7, r7, #1
   1fe90:	bl	1c734 <__assert_fail@plt+0xad94>
   1fe94:	ldr	r3, [r6, #68]	; 0x44
   1fe98:	cmp	r3, r7
   1fe9c:	bcc	1fea8 <__assert_fail@plt+0xe508>
   1fea0:	ldr	r0, [r6, #32]
   1fea4:	b	1fe54 <__assert_fail@plt+0xe4b4>
   1fea8:	ldr	r0, [r6, #32]
   1feac:	bl	1c734 <__assert_fail@plt+0xad94>
   1feb0:	ldr	r0, [r6, #60]	; 0x3c
   1feb4:	movw	r3, #58252	; 0xe38c
   1feb8:	movt	r3, #2
   1febc:	cmp	r0, r3
   1fec0:	beq	1fec8 <__assert_fail@plt+0xe528>
   1fec4:	bl	1c734 <__assert_fail@plt+0xad94>
   1fec8:	ldr	r0, [r6, #132]	; 0x84
   1fecc:	bl	1c734 <__assert_fail@plt+0xad94>
   1fed0:	mov	r0, r6
   1fed4:	ldrd	r4, [sp]
   1fed8:	ldrd	r6, [sp, #8]
   1fedc:	ldr	r8, [sp, #16]
   1fee0:	ldr	lr, [sp, #20]
   1fee4:	add	sp, sp, #24
   1fee8:	b	1c734 <__assert_fail@plt+0xad94>
   1feec:	ldr	r3, [r0]
   1fef0:	strd	r4, [sp, #-16]!
   1fef4:	mov	r5, r0
   1fef8:	str	r6, [sp, #8]
   1fefc:	str	lr, [sp, #12]
   1ff00:	cmp	r3, #0
   1ff04:	ble	1ff44 <__assert_fail@plt+0xe5a4>
   1ff08:	mov	r4, #0
   1ff0c:	mov	r6, r4
   1ff10:	ldr	r3, [r5, #8]
   1ff14:	add	r6, r6, #1
   1ff18:	add	r3, r3, r4
   1ff1c:	ldr	r0, [r3, #20]
   1ff20:	bl	1c734 <__assert_fail@plt+0xad94>
   1ff24:	ldr	r3, [r5, #8]
   1ff28:	add	r3, r3, r4
   1ff2c:	add	r4, r4, #24
   1ff30:	ldr	r0, [r3, #8]
   1ff34:	bl	1c734 <__assert_fail@plt+0xad94>
   1ff38:	ldr	r3, [r5]
   1ff3c:	cmp	r6, r3
   1ff40:	blt	1ff10 <__assert_fail@plt+0xe570>
   1ff44:	ldr	r0, [r5, #8]
   1ff48:	ldrd	r4, [sp]
   1ff4c:	ldr	r6, [sp, #8]
   1ff50:	ldr	lr, [sp, #12]
   1ff54:	add	sp, sp, #16
   1ff58:	b	1c734 <__assert_fail@plt+0xad94>
   1ff5c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ff60:	strd	r6, [sp, #8]
   1ff64:	subs	r6, r1, #0
   1ff68:	str	r8, [sp, #16]
   1ff6c:	str	lr, [sp, #20]
   1ff70:	beq	20064 <__assert_fail@plt+0xe6c4>
   1ff74:	ldr	r2, [r6, #4]
   1ff78:	cmp	r2, #0
   1ff7c:	mov	ip, r2
   1ff80:	beq	20064 <__assert_fail@plt+0xe6c4>
   1ff84:	ldm	r0, {r1, r3}
   1ff88:	mov	r5, r0
   1ff8c:	add	r4, r3, r2, lsl #1
   1ff90:	cmp	r1, r4
   1ff94:	blt	200a0 <__assert_fail@plt+0xe700>
   1ff98:	cmp	r3, #0
   1ff9c:	beq	200e0 <__assert_fail@plt+0xe740>
   1ffa0:	sub	r2, r2, #1
   1ffa4:	sub	r3, r3, #1
   1ffa8:	mvn	r7, r2
   1ffac:	mvn	lr, r3
   1ffb0:	tst	r7, lr
   1ffb4:	bpl	1fff4 <__assert_fail@plt+0xe654>
   1ffb8:	ldr	r1, [r5, #8]
   1ffbc:	ldr	r0, [r6, #8]
   1ffc0:	ldr	ip, [r1, r3, lsl #2]
   1ffc4:	ldr	r0, [r0, r2, lsl #2]
   1ffc8:	cmp	ip, r0
   1ffcc:	beq	1ffa0 <__assert_fail@plt+0xe600>
   1ffd0:	subge	r3, r3, #1
   1ffd4:	mvnge	lr, r3
   1ffd8:	bge	1ffb0 <__assert_fail@plt+0xe610>
   1ffdc:	sub	r2, r2, #1
   1ffe0:	sub	r4, r4, #1
   1ffe4:	mvn	r7, r2
   1ffe8:	tst	r7, lr
   1ffec:	str	r0, [r1, r4, lsl #2]
   1fff0:	bmi	1ffb8 <__assert_fail@plt+0xe618>
   1fff4:	cmp	r2, #0
   1fff8:	blt	20018 <__assert_fail@plt+0xe678>
   1fffc:	ldr	r0, [r5, #8]
   20000:	add	r2, r2, #1
   20004:	sub	r4, r4, r2
   20008:	lsl	r2, r2, #2
   2000c:	ldr	r1, [r6, #8]
   20010:	add	r0, r0, r4, lsl #2
   20014:	bl	115d4 <memcpy@plt>
   20018:	ldr	r3, [r5, #4]
   2001c:	ldr	r0, [r6, #4]
   20020:	add	r0, r3, r0, lsl #1
   20024:	subs	r2, r0, r4
   20028:	sub	r0, r0, #1
   2002c:	beq	20064 <__assert_fail@plt+0xe6c4>
   20030:	ldr	r1, [r5, #8]
   20034:	add	ip, r3, r2
   20038:	sub	r3, r3, #1
   2003c:	str	ip, [r5, #4]
   20040:	ldr	lr, [r1, r0, lsl #2]
   20044:	add	r5, r3, r2
   20048:	ldr	ip, [r1, r3, lsl #2]
   2004c:	cmp	lr, ip
   20050:	ble	2007c <__assert_fail@plt+0xe6dc>
   20054:	subs	r2, r2, #1
   20058:	sub	r0, r0, #1
   2005c:	str	lr, [r1, r5, lsl #2]
   20060:	bne	20040 <__assert_fail@plt+0xe6a0>
   20064:	mov	r0, #0
   20068:	ldrd	r4, [sp]
   2006c:	ldrd	r6, [sp, #8]
   20070:	ldr	r8, [sp, #16]
   20074:	add	sp, sp, #20
   20078:	pop	{pc}		; (ldr pc, [sp], #4)
   2007c:	subs	r3, r3, #1
   20080:	str	ip, [r1, r5, lsl #2]
   20084:	bpl	20040 <__assert_fail@plt+0xe6a0>
   20088:	mov	r0, r1
   2008c:	lsl	r2, r2, #2
   20090:	add	r1, r1, r4, lsl #2
   20094:	bl	115d4 <memcpy@plt>
   20098:	mov	r0, #0
   2009c:	b	20068 <__assert_fail@plt+0xe6c8>
   200a0:	add	r2, r2, r1
   200a4:	ldr	r0, [r0, #8]
   200a8:	lsl	r1, r2, #3
   200ac:	lsl	r4, r2, #1
   200b0:	bl	1c910 <__assert_fail@plt+0xaf70>
   200b4:	cmp	r0, #0
   200b8:	beq	200fc <__assert_fail@plt+0xe75c>
   200bc:	ldr	r3, [r5, #4]
   200c0:	str	r4, [r5]
   200c4:	str	r0, [r5, #8]
   200c8:	cmp	r3, #0
   200cc:	ldreq	ip, [r6, #4]
   200d0:	beq	200e4 <__assert_fail@plt+0xe744>
   200d4:	ldr	r2, [r6, #4]
   200d8:	add	r4, r3, r2, lsl #1
   200dc:	b	1ffa0 <__assert_fail@plt+0xe600>
   200e0:	ldr	r0, [r0, #8]
   200e4:	ldr	r1, [r6, #8]
   200e8:	str	ip, [r5, #4]
   200ec:	ldr	r2, [r6, #4]
   200f0:	lsl	r2, r2, #2
   200f4:	bl	115d4 <memcpy@plt>
   200f8:	b	20064 <__assert_fail@plt+0xe6c4>
   200fc:	mov	r0, #12
   20100:	b	20068 <__assert_fail@plt+0xe6c8>
   20104:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20108:	mov	r4, r2
   2010c:	mov	r5, r1
   20110:	ldr	r2, [r1, #20]
   20114:	mov	r1, #0
   20118:	strd	r6, [sp, #8]
   2011c:	add	r7, r4, r4, lsl #1
   20120:	strd	r8, [sp, #16]
   20124:	mov	r8, r0
   20128:	lsl	r7, r7, #2
   2012c:	strd	sl, [sp, #24]
   20130:	mov	sl, r3
   20134:	str	lr, [sp, #32]
   20138:	sub	sp, sp, #36	; 0x24
   2013c:	add	r2, r2, r7
   20140:	ldr	r3, [r2, #4]
   20144:	str	r1, [sp, #12]
   20148:	add	r3, r3, #1
   2014c:	lsl	r0, r3, #2
   20150:	str	r3, [sp, #8]
   20154:	bl	1c864 <__assert_fail@plt+0xaec4>
   20158:	cmp	r0, #0
   2015c:	str	r0, [sp, #16]
   20160:	beq	20350 <__assert_fail@plt+0xe9b0>
   20164:	ldr	lr, [r5]
   20168:	lsl	r6, r4, #3
   2016c:	mov	r3, #65280	; 0xff00
   20170:	movt	r3, #3
   20174:	mvn	r9, #0
   20178:	ldr	r2, [sp, #12]
   2017c:	ldr	r1, [r5, #24]
   20180:	add	ip, lr, r6
   20184:	str	r4, [r0, r2, lsl #2]
   20188:	add	r2, r2, #1
   2018c:	ldr	fp, [ip, #4]
   20190:	add	r0, r1, r7
   20194:	str	r2, [sp, #12]
   20198:	str	r9, [r0, #4]
   2019c:	and	r3, r3, fp
   201a0:	cmp	r3, #0
   201a4:	beq	201d4 <__assert_fail@plt+0xe834>
   201a8:	ldr	r3, [r5, #20]
   201ac:	add	r3, r3, r7
   201b0:	ldr	r2, [r3, #4]
   201b4:	cmp	r2, #0
   201b8:	beq	202a0 <__assert_fail@plt+0xe900>
   201bc:	ldr	r3, [r3, #8]
   201c0:	ldr	r3, [r3]
   201c4:	add	lr, lr, r3, lsl #3
   201c8:	ldrb	r3, [lr, #6]
   201cc:	tst	r3, #4
   201d0:	beq	2031c <__assert_fail@plt+0xe97c>
   201d4:	ldrb	r3, [ip, #4]
   201d8:	tst	r3, #8
   201dc:	beq	2029c <__assert_fail@plt+0xe8fc>
   201e0:	ldr	ip, [r5, #20]
   201e4:	add	r3, ip, r7
   201e8:	ldr	r2, [r3, #4]
   201ec:	cmp	r2, #0
   201f0:	movgt	r9, #0
   201f4:	movgt	r6, r9
   201f8:	bgt	20250 <__assert_fail@plt+0xe8b0>
   201fc:	b	2029c <__assert_fail@plt+0xe8fc>
   20200:	ldrd	r2, [r0]
   20204:	strd	r2, [sp, #20]
   20208:	ldr	r3, [r0, #8]
   2020c:	str	r3, [fp, #8]
   20210:	mov	r1, fp
   20214:	add	r0, sp, #8
   20218:	bl	1ff5c <__assert_fail@plt+0xe5bc>
   2021c:	cmp	r0, #0
   20220:	bne	202c8 <__assert_fail@plt+0xe928>
   20224:	ldr	r1, [r5, #24]
   20228:	add	r4, r1, r4
   2022c:	ldr	r3, [r4, #4]
   20230:	cmp	r3, #0
   20234:	beq	202e4 <__assert_fail@plt+0xe944>
   20238:	ldr	ip, [r5, #20]
   2023c:	add	r3, ip, r7
   20240:	add	r6, r6, #1
   20244:	ldr	r2, [r3, #4]
   20248:	cmp	r2, r6
   2024c:	ble	202fc <__assert_fail@plt+0xe95c>
   20250:	ldr	r3, [r3, #8]
   20254:	add	fp, sp, #20
   20258:	ldr	r2, [r3, r6, lsl #2]
   2025c:	add	r4, r2, r2, lsl #1
   20260:	lsl	r4, r4, #2
   20264:	add	r0, r1, r4
   20268:	ldr	r3, [r0, #4]
   2026c:	cmn	r3, #1
   20270:	moveq	r9, #1
   20274:	beq	2023c <__assert_fail@plt+0xe89c>
   20278:	cmp	r3, #0
   2027c:	bne	20200 <__assert_fail@plt+0xe860>
   20280:	add	fp, sp, #20
   20284:	mov	r1, r5
   20288:	mov	r0, fp
   2028c:	bl	20104 <__assert_fail@plt+0xe764>
   20290:	cmp	r0, #0
   20294:	beq	20210 <__assert_fail@plt+0xe870>
   20298:	b	202c8 <__assert_fail@plt+0xe928>
   2029c:	add	r0, r1, r7
   202a0:	ldrd	r2, [sp, #8]
   202a4:	add	ip, sp, #8
   202a8:	strd	r2, [r1, r7]
   202ac:	ldr	r3, [sp, #16]
   202b0:	str	r3, [r0, #8]
   202b4:	ldr	r1, [ip, #8]
   202b8:	mov	r0, #0
   202bc:	ldrd	r2, [sp, #8]
   202c0:	strd	r2, [r8]
   202c4:	str	r1, [r8, #8]
   202c8:	add	sp, sp, #36	; 0x24
   202cc:	ldrd	r4, [sp]
   202d0:	ldrd	r6, [sp, #8]
   202d4:	ldrd	r8, [sp, #16]
   202d8:	ldrd	sl, [sp, #24]
   202dc:	add	sp, sp, #32
   202e0:	pop	{pc}		; (ldr pc, [sp], #4)
   202e4:	ldr	r0, [sp, #28]
   202e8:	mov	r9, #1
   202ec:	bl	1c734 <__assert_fail@plt+0xad94>
   202f0:	ldr	ip, [r5, #20]
   202f4:	ldr	r1, [r5, #24]
   202f8:	b	2023c <__assert_fail@plt+0xe89c>
   202fc:	eor	sl, sl, #1
   20300:	add	r0, r1, r7
   20304:	tst	r9, sl
   20308:	beq	202a0 <__assert_fail@plt+0xe900>
   2030c:	mov	r3, #0
   20310:	add	ip, sp, #8
   20314:	str	r3, [r0, #4]
   20318:	b	202b4 <__assert_fail@plt+0xe914>
   2031c:	ubfx	fp, fp, #8, #10
   20320:	mov	r3, r4
   20324:	mov	r2, r4
   20328:	mov	r1, r4
   2032c:	mov	r0, r5
   20330:	str	fp, [sp]
   20334:	bl	1e210 <__assert_fail@plt+0xc870>
   20338:	cmp	r0, #0
   2033c:	bne	202c8 <__assert_fail@plt+0xe928>
   20340:	ldr	ip, [r5]
   20344:	ldr	r1, [r5, #24]
   20348:	add	ip, ip, r6
   2034c:	b	201d4 <__assert_fail@plt+0xe834>
   20350:	mov	r0, #12
   20354:	b	202c8 <__assert_fail@plt+0xe928>
   20358:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2035c:	mov	r5, r2
   20360:	mov	r4, r3
   20364:	strd	r6, [sp, #8]
   20368:	mov	r6, #0
   2036c:	mov	r7, r0
   20370:	strd	r8, [sp, #16]
   20374:	mov	r8, r1
   20378:	ldr	r1, [r1, #4]
   2037c:	strd	sl, [sp, #24]
   20380:	str	lr, [sp, #32]
   20384:	sub	sp, sp, #28
   20388:	lsl	r0, r1, #2
   2038c:	str	r1, [sp, #12]
   20390:	str	r6, [sp, #16]
   20394:	bl	1c864 <__assert_fail@plt+0xaec4>
   20398:	cmp	r0, r6
   2039c:	str	r0, [sp, #20]
   203a0:	beq	204a0 <__assert_fail@plt+0xeb00>
   203a4:	ldr	r3, [r8, #4]
   203a8:	add	r9, sp, #12
   203ac:	cmp	r3, r6
   203b0:	ble	20448 <__assert_fail@plt+0xeaa8>
   203b4:	ldr	r3, [r8, #8]
   203b8:	ldr	r1, [r7, #24]
   203bc:	ldr	r2, [r3, r6, lsl #2]
   203c0:	add	r3, r2, r2, lsl #1
   203c4:	add	r1, r1, r3, lsl #2
   203c8:	ldr	fp, [r1, #4]
   203cc:	cmp	fp, #0
   203d0:	ble	20468 <__assert_fail@plt+0xeac8>
   203d4:	ldr	ip, [r1, #8]
   203d8:	mov	r3, #0
   203dc:	ldr	sl, [r7]
   203e0:	sub	ip, ip, #4
   203e4:	b	203f0 <__assert_fail@plt+0xea50>
   203e8:	cmp	fp, r3
   203ec:	beq	20468 <__assert_fail@plt+0xeac8>
   203f0:	ldr	r0, [ip, #4]!
   203f4:	add	r3, r3, #1
   203f8:	add	lr, sl, r0, lsl #3
   203fc:	ldrb	lr, [lr, #4]
   20400:	cmp	r4, lr
   20404:	bne	203e8 <__assert_fail@plt+0xea48>
   20408:	ldr	lr, [sl, r0, lsl #3]
   2040c:	cmp	r5, lr
   20410:	bne	203e8 <__assert_fail@plt+0xea48>
   20414:	cmn	r0, #1
   20418:	beq	20468 <__assert_fail@plt+0xeac8>
   2041c:	mov	r3, r5
   20420:	mov	r1, r9
   20424:	str	r4, [sp]
   20428:	mov	r0, r7
   2042c:	bl	1e728 <__assert_fail@plt+0xcd88>
   20430:	subs	sl, r0, #0
   20434:	bne	20478 <__assert_fail@plt+0xead8>
   20438:	ldr	r3, [r8, #4]
   2043c:	add	r6, r6, #1
   20440:	cmp	r3, r6
   20444:	bgt	203b4 <__assert_fail@plt+0xea14>
   20448:	ldr	r0, [r8, #8]
   2044c:	mov	sl, #0
   20450:	bl	1c734 <__assert_fail@plt+0xad94>
   20454:	ldr	r1, [r9, #8]
   20458:	ldrd	r2, [sp, #12]
   2045c:	strd	r2, [r8]
   20460:	str	r1, [r8, #8]
   20464:	b	20480 <__assert_fail@plt+0xeae0>
   20468:	mov	r0, r9
   2046c:	bl	1ff5c <__assert_fail@plt+0xe5bc>
   20470:	subs	sl, r0, #0
   20474:	beq	20438 <__assert_fail@plt+0xea98>
   20478:	ldr	r0, [sp, #20]
   2047c:	bl	1c734 <__assert_fail@plt+0xad94>
   20480:	mov	r0, sl
   20484:	add	sp, sp, #28
   20488:	ldrd	r4, [sp]
   2048c:	ldrd	r6, [sp, #8]
   20490:	ldrd	r8, [sp, #16]
   20494:	ldrd	sl, [sp, #24]
   20498:	add	sp, sp, #32
   2049c:	pop	{pc}		; (ldr pc, [sp], #4)
   204a0:	mov	sl, #12
   204a4:	b	20480 <__assert_fail@plt+0xeae0>
   204a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   204ac:	mov	r5, #0
   204b0:	strd	r6, [sp, #8]
   204b4:	ldr	r7, [r0, #108]	; 0x6c
   204b8:	strd	r8, [sp, #16]
   204bc:	strd	sl, [sp, #24]
   204c0:	str	lr, [sp, #32]
   204c4:	sub	sp, sp, #36	; 0x24
   204c8:	mov	r4, r7
   204cc:	cmp	r5, r4
   204d0:	bge	2052c <__assert_fail@plt+0xeb8c>
   204d4:	add	lr, r5, r4
   204d8:	ldr	r6, [r0, #116]	; 0x74
   204dc:	add	lr, lr, lr, lsr #31
   204e0:	asr	lr, lr, #1
   204e4:	add	ip, lr, lr, lsl #1
   204e8:	add	ip, r6, ip, lsl #3
   204ec:	ldr	ip, [ip, #4]
   204f0:	cmp	r2, ip
   204f4:	ble	2051c <__assert_fail@plt+0xeb7c>
   204f8:	b	20758 <__assert_fail@plt+0xedb8>
   204fc:	asr	ip, ip, #1
   20500:	add	r4, ip, ip, lsl #1
   20504:	mov	r8, ip
   20508:	add	r4, r6, r4, lsl #3
   2050c:	ldr	r4, [r4, #4]
   20510:	cmp	r2, r4
   20514:	bgt	20760 <__assert_fail@plt+0xedc0>
   20518:	mov	lr, ip
   2051c:	add	ip, lr, r5
   20520:	cmp	lr, r5
   20524:	add	ip, ip, ip, lsr #31
   20528:	bgt	204fc <__assert_fail@plt+0xeb5c>
   2052c:	cmp	r7, r5
   20530:	ble	2076c <__assert_fail@plt+0xedcc>
   20534:	ldr	r4, [r0, #116]	; 0x74
   20538:	add	ip, r5, r5, lsl #1
   2053c:	cmn	r5, #1
   20540:	movne	r5, #0
   20544:	moveq	r5, #1
   20548:	lsl	ip, ip, #3
   2054c:	add	lr, r4, ip
   20550:	ldr	lr, [lr, #4]
   20554:	cmp	lr, r2
   20558:	orrne	r5, r5, #1
   2055c:	cmp	r5, #0
   20560:	bne	2076c <__assert_fail@plt+0xedcc>
   20564:	ldr	sl, [r0, #84]	; 0x54
   20568:	mov	r6, r2
   2056c:	mov	r7, r0
   20570:	add	r9, r1, #8
   20574:	str	r1, [sp]
   20578:	str	r3, [sp, #12]
   2057c:	add	r3, ip, #24
   20580:	str	r3, [sp, #8]
   20584:	ldr	r3, [sp, #8]
   20588:	add	r4, r4, r3
   2058c:	b	20640 <__assert_fail@plt+0xeca0>
   20590:	ldr	r3, [r7, #100]	; 0x64
   20594:	ldr	r2, [sl, #12]
   20598:	ldr	fp, [r3, r5, lsl #2]
   2059c:	ldr	r8, [r2, r8, lsl #2]
   205a0:	cmp	fp, #0
   205a4:	beq	20728 <__assert_fail@plt+0xed88>
   205a8:	mov	r2, r8
   205ac:	add	r1, fp, #12
   205b0:	ldr	r0, [fp, #8]
   205b4:	bl	1e6a0 <__assert_fail@plt+0xcd00>
   205b8:	cmp	r0, #0
   205bc:	bne	20630 <__assert_fail@plt+0xec90>
   205c0:	add	r2, sp, #20
   205c4:	add	r1, fp, #4
   205c8:	mov	r0, r2
   205cc:	str	r2, [sp, #4]
   205d0:	bl	1f0e0 <__assert_fail@plt+0xd740>
   205d4:	ldr	r2, [sp, #4]
   205d8:	mov	r1, r8
   205dc:	str	r0, [sp, #16]
   205e0:	mov	r0, r2
   205e4:	bl	1e0cc <__assert_fail@plt+0xc72c>
   205e8:	eor	r0, r0, #1
   205ec:	ldr	r2, [sp, #4]
   205f0:	ldr	r3, [sp, #16]
   205f4:	cmp	r3, #0
   205f8:	orrne	r0, r0, #1
   205fc:	tst	r0, #255	; 0xff
   20600:	bne	2079c <__assert_fail@plt+0xedfc>
   20604:	ldr	r8, [r7, #100]	; 0x64
   20608:	mov	r1, sl
   2060c:	add	r0, sp, #16
   20610:	bl	1f5bc <__assert_fail@plt+0xdc1c>
   20614:	str	r0, [r8, r5, lsl #2]
   20618:	ldr	r0, [sp, #28]
   2061c:	bl	1c734 <__assert_fail@plt+0xad94>
   20620:	ldr	r3, [r7, #100]	; 0x64
   20624:	ldr	r3, [r3, r5, lsl #2]
   20628:	cmp	r3, #0
   2062c:	beq	2078c <__assert_fail@plt+0xedec>
   20630:	add	r4, r4, #24
   20634:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   20638:	cmp	r3, #0
   2063c:	beq	2076c <__assert_fail@plt+0xedcc>
   20640:	ldr	r3, [sp]
   20644:	mov	r1, r9
   20648:	ldr	r8, [r4, #-24]	; 0xffffffe8
   2064c:	ldr	fp, [r3, #4]
   20650:	mov	r2, r8
   20654:	mov	r0, fp
   20658:	bl	1e6a0 <__assert_fail@plt+0xcd00>
   2065c:	cmp	r0, #0
   20660:	beq	20630 <__assert_fail@plt+0xec90>
   20664:	ldr	r2, [r4, #-16]
   20668:	ldr	r5, [r4, #-12]
   2066c:	add	r5, r6, r5
   20670:	sub	r5, r5, r2
   20674:	cmp	r6, r5
   20678:	bne	20590 <__assert_fail@plt+0xebf0>
   2067c:	ldr	r2, [sl, #20]
   20680:	add	r8, r8, r8, lsl #1
   20684:	mov	r0, fp
   20688:	mov	r1, r9
   2068c:	add	r8, r2, r8, lsl #2
   20690:	ldr	r3, [r8, #8]
   20694:	ldr	r5, [r3]
   20698:	mov	r2, r5
   2069c:	bl	1e6a0 <__assert_fail@plt+0xcd00>
   206a0:	cmp	r0, #0
   206a4:	bne	20630 <__assert_fail@plt+0xec90>
   206a8:	mov	r3, #1
   206ac:	mov	fp, r0
   206b0:	mov	r0, #4
   206b4:	add	r4, sp, #20
   206b8:	str	r3, [sp, #20]
   206bc:	str	r3, [sp, #24]
   206c0:	bl	1c864 <__assert_fail@plt+0xaec4>
   206c4:	cmp	r0, #0
   206c8:	mov	r1, r4
   206cc:	str	r0, [sp, #28]
   206d0:	ldr	r2, [sp, #12]
   206d4:	streq	fp, [sp, #20]
   206d8:	streq	fp, [sp, #24]
   206dc:	moveq	fp, #12
   206e0:	strne	r5, [r0]
   206e4:	mov	r0, sl
   206e8:	ldr	r3, [sp, #72]	; 0x48
   206ec:	str	fp, [sp, #16]
   206f0:	bl	20358 <__assert_fail@plt+0xe9b8>
   206f4:	mov	r5, r0
   206f8:	mov	r1, r4
   206fc:	ldr	r0, [sp]
   20700:	bl	1ff5c <__assert_fail@plt+0xe5bc>
   20704:	mov	r4, r0
   20708:	ldr	r0, [sp, #28]
   2070c:	bl	1c734 <__assert_fail@plt+0xad94>
   20710:	ldr	r0, [sp, #16]
   20714:	orr	r3, r5, r4
   20718:	orrs	r3, r3, r0
   2071c:	bne	207b8 <__assert_fail@plt+0xee18>
   20720:	ldr	r4, [r7, #116]	; 0x74
   20724:	b	20584 <__assert_fail@plt+0xebe4>
   20728:	mov	r3, #1
   2072c:	mov	r0, #4
   20730:	str	r3, [sp, #20]
   20734:	str	r3, [sp, #24]
   20738:	bl	1c864 <__assert_fail@plt+0xaec4>
   2073c:	cmp	r0, #0
   20740:	str	r0, [sp, #28]
   20744:	beq	207b0 <__assert_fail@plt+0xee10>
   20748:	add	r2, sp, #20
   2074c:	str	r8, [r0]
   20750:	str	fp, [sp, #16]
   20754:	b	20604 <__assert_fail@plt+0xec64>
   20758:	mov	r8, lr
   2075c:	mov	lr, r4
   20760:	add	r5, r8, #1
   20764:	mov	r4, lr
   20768:	b	204cc <__assert_fail@plt+0xeb2c>
   2076c:	mov	r0, #0
   20770:	add	sp, sp, #36	; 0x24
   20774:	ldrd	r4, [sp]
   20778:	ldrd	r6, [sp, #8]
   2077c:	ldrd	r8, [sp, #16]
   20780:	ldrd	sl, [sp, #24]
   20784:	add	sp, sp, #32
   20788:	pop	{pc}		; (ldr pc, [sp], #4)
   2078c:	ldr	r0, [sp, #16]
   20790:	cmp	r0, #0
   20794:	beq	20630 <__assert_fail@plt+0xec90>
   20798:	b	20770 <__assert_fail@plt+0xedd0>
   2079c:	ldr	r0, [sp, #28]
   207a0:	bl	1c734 <__assert_fail@plt+0xad94>
   207a4:	ldr	r0, [sp, #16]
   207a8:	cmp	r0, #0
   207ac:	bne	20770 <__assert_fail@plt+0xedd0>
   207b0:	mov	r0, #12
   207b4:	b	20770 <__assert_fail@plt+0xedd0>
   207b8:	cmp	r0, #0
   207bc:	bne	20770 <__assert_fail@plt+0xedd0>
   207c0:	cmp	r5, #0
   207c4:	movne	r0, r5
   207c8:	moveq	r0, r4
   207cc:	b	20770 <__assert_fail@plt+0xedd0>
   207d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   207d4:	mov	r3, #0
   207d8:	strd	r6, [sp, #8]
   207dc:	strd	sl, [sp, #24]
   207e0:	ldr	sl, [r1, #8]
   207e4:	strd	r8, [sp, #16]
   207e8:	str	lr, [sp, #32]
   207ec:	sub	sp, sp, #14400	; 0x3840
   207f0:	sub	sp, sp, #44	; 0x2c
   207f4:	str	r3, [r1, #44]	; 0x2c
   207f8:	add	r8, sp, #104	; 0x68
   207fc:	str	r3, [r1, #48]	; 0x30
   20800:	cmp	sl, r3
   20804:	str	r3, [r8]
   20808:	str	r3, [r8, #4]
   2080c:	str	r3, [r8, #8]
   20810:	str	r3, [r8, #12]
   20814:	str	r3, [r8, #16]
   20818:	str	r1, [sp, #16]
   2081c:	str	r3, [r8, #20]
   20820:	str	r3, [r8, #24]
   20824:	str	r3, [r8, #28]
   20828:	ble	211f0 <__assert_fail@plt+0xf850>
   2082c:	add	r7, sp, #1120	; 0x460
   20830:	str	r3, [sp, #20]
   20834:	add	r7, r7, #8
   20838:	str	r3, [sp, #24]
   2083c:	str	r0, [sp, #36]	; 0x24
   20840:	str	r3, [sp, #48]	; 0x30
   20844:	str	r3, [sp, #52]	; 0x34
   20848:	ldr	r3, [sp, #16]
   2084c:	ldr	r1, [sp, #24]
   20850:	ldr	r2, [r3, #12]
   20854:	lsl	r3, r1, #2
   20858:	str	r3, [sp, #32]
   2085c:	ldr	r3, [sp, #36]	; 0x24
   20860:	ldr	r1, [r2, r1, lsl #2]
   20864:	ldr	r3, [r3]
   20868:	add	r2, r3, r1, lsl #3
   2086c:	ldrb	r6, [r2, #4]
   20870:	str	r2, [sp, #12]
   20874:	ldr	r2, [r2, #4]
   20878:	cmp	r6, #1
   2087c:	ubfx	r2, r2, #8, #10
   20880:	beq	20b10 <__assert_fail@plt+0xf170>
   20884:	cmp	r6, #3
   20888:	beq	20f88 <__assert_fail@plt+0xf5e8>
   2088c:	cmp	r6, #5
   20890:	beq	20dec <__assert_fail@plt+0xf44c>
   20894:	cmp	r6, #7
   20898:	beq	20ef0 <__assert_fail@plt+0xf550>
   2089c:	ldr	r3, [sp, #24]
   208a0:	add	r3, r3, #1
   208a4:	cmp	r3, sl
   208a8:	str	r3, [sp, #24]
   208ac:	blt	20848 <__assert_fail@plt+0xeea8>
   208b0:	ldr	r3, [sp, #20]
   208b4:	ldr	r9, [sp, #36]	; 0x24
   208b8:	cmp	r3, #0
   208bc:	ble	211ec <__assert_fail@plt+0xf84c>
   208c0:	ldr	r3, [sp, #20]
   208c4:	add	r5, sp, #2144	; 0x860
   208c8:	mov	fp, #0
   208cc:	add	r5, r5, #8
   208d0:	str	fp, [r5, #-2088]	; 0xfffff7d8
   208d4:	add	r3, r3, #1
   208d8:	lsl	r0, r3, #2
   208dc:	str	r3, [r5, #-2092]	; 0xfffff7d4
   208e0:	bl	1c864 <__assert_fail@plt+0xaec4>
   208e4:	cmp	r0, fp
   208e8:	str	r0, [r5, #-2084]	; 0xfffff7dc
   208ec:	beq	2118c <__assert_fail@plt+0xf7ec>
   208f0:	mov	r3, #0
   208f4:	mov	r2, #0
   208f8:	str	fp, [r5, #-2096]	; 0xfffff7d0
   208fc:	add	r1, sp, #6208	; 0x1840
   20900:	add	r4, sp, #3168	; 0xc60
   20904:	str	r8, [sp]
   20908:	add	r1, r1, #40	; 0x28
   2090c:	add	r4, r4, #8
   20910:	strd	r2, [r8, #-32]	; 0xffffffe0
   20914:	mov	sl, fp
   20918:	add	r6, r1, #28
   2091c:	str	r1, [sp, #24]
   20920:	strd	r2, [sp, #80]	; 0x50
   20924:	strd	r2, [sp, #88]	; 0x58
   20928:	strd	r2, [sp, #96]	; 0x60
   2092c:	sub	r3, r8, #48	; 0x30
   20930:	str	r3, [sp, #12]
   20934:	str	r4, [sp, #28]
   20938:	str	r4, [sp, #40]	; 0x28
   2093c:	ldr	ip, [r4, #4]
   20940:	mov	r3, #0
   20944:	str	r3, [r5, #-2088]	; 0xfffff7d8
   20948:	cmp	ip, r3
   2094c:	movgt	r7, #0
   20950:	ble	2099c <__assert_fail@plt+0xeffc>
   20954:	ldr	r2, [r4, #8]
   20958:	add	r0, sp, #60	; 0x3c
   2095c:	ldr	r3, [r9, #12]
   20960:	ldr	r2, [r2, r7, lsl #2]
   20964:	ldr	r3, [r3, r2, lsl #2]
   20968:	cmn	r3, #1
   2096c:	add	r2, r3, r3, lsl #1
   20970:	beq	20990 <__assert_fail@plt+0xeff0>
   20974:	ldr	r1, [r9, #24]
   20978:	add	r1, r1, r2, lsl #2
   2097c:	bl	1ff5c <__assert_fail@plt+0xe5bc>
   20980:	cmp	r0, #0
   20984:	str	r0, [r5, #-2096]	; 0xfffff7d0
   20988:	bne	2102c <__assert_fail@plt+0xf68c>
   2098c:	ldr	ip, [r4, #4]
   20990:	add	r7, r7, #1
   20994:	cmp	ip, r7
   20998:	bgt	20954 <__assert_fail@plt+0xefb4>
   2099c:	mov	r3, #0
   209a0:	add	r2, sp, #60	; 0x3c
   209a4:	ldr	r0, [sp, #12]
   209a8:	mov	r1, r9
   209ac:	bl	1f2d4 <__assert_fail@plt+0xd934>
   209b0:	ldr	r3, [sp]
   209b4:	cmp	r0, #0
   209b8:	mov	r7, r0
   209bc:	str	r0, [r3], #4
   209c0:	str	r3, [sp]
   209c4:	beq	211a4 <__assert_fail@plt+0xf804>
   209c8:	ldrsb	r3, [r7, #52]	; 0x34
   209cc:	cmp	r3, #0
   209d0:	blt	2105c <__assert_fail@plt+0xf6bc>
   209d4:	add	r3, sp, #1120	; 0x460
   209d8:	str	r7, [r5, sl, lsl #2]
   209dc:	add	r3, r3, #8
   209e0:	str	r7, [r3, sl, lsl #2]
   209e4:	sub	r7, r8, #36	; 0x24
   209e8:	sub	r1, r6, #32
   209ec:	mov	r2, r7
   209f0:	ldr	r3, [r2, #4]!
   209f4:	ldr	r0, [r1, #4]!
   209f8:	orr	r3, r3, r0
   209fc:	cmp	r6, r1
   20a00:	str	r3, [r2]
   20a04:	bne	209f0 <__assert_fail@plt+0xf050>
   20a08:	ldr	r3, [sp, #20]
   20a0c:	add	sl, sl, #1
   20a10:	add	r4, r4, #12
   20a14:	add	r6, r6, #32
   20a18:	cmp	sl, r3
   20a1c:	bne	2093c <__assert_fail@plt+0xef9c>
   20a20:	cmp	fp, #0
   20a24:	bne	21230 <__assert_fail@plt+0xf890>
   20a28:	mov	r1, #256	; 0x100
   20a2c:	mov	r0, #4
   20a30:	bl	1c478 <__assert_fail@plt+0xaad8>
   20a34:	ldr	r3, [sp, #16]
   20a38:	cmp	r0, #0
   20a3c:	mov	r6, r0
   20a40:	str	r0, [r3, #44]	; 0x2c
   20a44:	beq	2102c <__assert_fail@plt+0xf68c>
   20a48:	ldr	r8, [sp, #24]
   20a4c:	add	r4, r9, #96	; 0x60
   20a50:	mov	lr, r0
   20a54:	add	ip, r0, #1024	; 0x400
   20a58:	ldr	r3, [r7, #4]!
   20a5c:	cmp	r3, #0
   20a60:	movne	r0, lr
   20a64:	movne	r1, #1
   20a68:	beq	20a84 <__assert_fail@plt+0xf0e4>
   20a6c:	tst	r3, #1
   20a70:	bne	211b4 <__assert_fail@plt+0xf814>
   20a74:	lsrs	r3, r3, #1
   20a78:	add	r0, r0, #4
   20a7c:	lsl	r1, r1, #1
   20a80:	bne	20a6c <__assert_fail@plt+0xf0cc>
   20a84:	add	lr, lr, #128	; 0x80
   20a88:	add	r4, r4, #4
   20a8c:	cmp	ip, lr
   20a90:	add	r8, r8, #4
   20a94:	bne	20a58 <__assert_fail@plt+0xf0b8>
   20a98:	ldr	r3, [r5, #-2080]	; 0xfffff7e0
   20a9c:	ubfx	r3, r3, #10, #1
   20aa0:	cmp	r3, #0
   20aa4:	beq	20ad8 <__assert_fail@plt+0xf138>
   20aa8:	ldr	ip, [sp, #20]
   20aac:	add	r2, sp, #6208	; 0x1840
   20ab0:	add	r1, r3, #1
   20ab4:	add	r2, r2, #40	; 0x28
   20ab8:	sub	r0, r3, #1
   20abc:	add	r2, r2, r3, lsl #5
   20ac0:	ldr	r2, [r2, #-32]	; 0xffffffe0
   20ac4:	tst	r2, #1024	; 0x400
   20ac8:	bne	2121c <__assert_fail@plt+0xf87c>
   20acc:	cmp	ip, r3
   20ad0:	mov	r3, r1
   20ad4:	bne	20aac <__assert_fail@plt+0xf10c>
   20ad8:	ldr	r0, [r5, #-2084]	; 0xfffff7dc
   20adc:	bl	1c734 <__assert_fail@plt+0xad94>
   20ae0:	ldr	r3, [sp, #20]
   20ae4:	ldr	r5, [sp, #28]
   20ae8:	ldr	r2, [sp, #40]	; 0x28
   20aec:	add	r3, r3, r3, lsl #1
   20af0:	add	r4, r2, r3, lsl #2
   20af4:	add	r5, r5, #12
   20af8:	ldr	r0, [r5, #-4]
   20afc:	bl	1c734 <__assert_fail@plt+0xad94>
   20b00:	cmp	r4, r5
   20b04:	bne	20af4 <__assert_fail@plt+0xf154>
   20b08:	mov	r0, #1
   20b0c:	b	20ed0 <__assert_fail@plt+0xf530>
   20b10:	ldrb	r3, [r3, r1, lsl #3]
   20b14:	asr	r0, r3, #5
   20b18:	and	r3, r3, #31
   20b1c:	ldr	r1, [r8, r0, lsl #2]
   20b20:	orr	r3, r1, r6, lsl r3
   20b24:	str	r3, [r8, r0, lsl #2]
   20b28:	cmp	r2, #0
   20b2c:	beq	20c0c <__assert_fail@plt+0xf26c>
   20b30:	tst	r2, #32
   20b34:	bne	20e4c <__assert_fail@plt+0xf4ac>
   20b38:	tst	r2, #128	; 0x80
   20b3c:	bne	20e80 <__assert_fail@plt+0xf4e0>
   20b40:	tst	r2, #4
   20b44:	beq	20ba8 <__assert_fail@plt+0xf208>
   20b48:	cmp	r6, #1
   20b4c:	beq	2100c <__assert_fail@plt+0xf66c>
   20b50:	ldr	r1, [sp, #36]	; 0x24
   20b54:	ldr	r3, [r1, #92]	; 0x5c
   20b58:	cmp	r3, #1
   20b5c:	ble	20f4c <__assert_fail@plt+0xf5ac>
   20b60:	ldr	lr, [r1, #60]	; 0x3c
   20b64:	add	r0, r1, #96	; 0x60
   20b68:	add	r9, r1, #128	; 0x80
   20b6c:	sub	ip, r8, #4
   20b70:	mov	r1, #0
   20b74:	sub	lr, lr, #4
   20b78:	ldr	r3, [lr, #4]!
   20b7c:	ldr	r5, [r0], #4
   20b80:	ldr	r4, [ip, #4]!
   20b84:	mvn	r3, r3
   20b88:	orr	r3, r3, r5
   20b8c:	cmp	r0, r9
   20b90:	and	r3, r3, r4
   20b94:	orr	r1, r1, r3
   20b98:	str	r3, [ip]
   20b9c:	bne	20b78 <__assert_fail@plt+0xf1d8>
   20ba0:	cmp	r1, #0
   20ba4:	beq	2089c <__assert_fail@plt+0xeefc>
   20ba8:	tst	r2, #8
   20bac:	beq	20c0c <__assert_fail@plt+0xf26c>
   20bb0:	cmp	r6, #1
   20bb4:	beq	20ff0 <__assert_fail@plt+0xf650>
   20bb8:	ldr	r2, [sp, #36]	; 0x24
   20bbc:	ldr	r3, [r2, #92]	; 0x5c
   20bc0:	cmp	r3, #1
   20bc4:	ble	20fb4 <__assert_fail@plt+0xf614>
   20bc8:	ldr	lr, [r2, #60]	; 0x3c
   20bcc:	sub	ip, r8, #4
   20bd0:	add	r0, r2, #96	; 0x60
   20bd4:	add	r5, r2, #128	; 0x80
   20bd8:	mov	r1, #0
   20bdc:	sub	lr, lr, #4
   20be0:	ldr	r2, [r0], #4
   20be4:	ldr	r4, [lr, #4]!
   20be8:	ldr	r3, [ip, #4]!
   20bec:	cmp	r5, r0
   20bf0:	and	r2, r2, r4
   20bf4:	bic	r3, r3, r2
   20bf8:	orr	r1, r1, r3
   20bfc:	str	r3, [ip]
   20c00:	bne	20be0 <__assert_fail@plt+0xf240>
   20c04:	cmp	r1, #0
   20c08:	beq	2089c <__assert_fail@plt+0xeefc>
   20c0c:	ldr	r3, [sp, #20]
   20c10:	cmp	r3, #0
   20c14:	movle	r5, #0
   20c18:	ble	20dd4 <__assert_fail@plt+0xf434>
   20c1c:	add	r4, sp, #6272	; 0x1880
   20c20:	add	r9, sp, #2144	; 0x860
   20c24:	str	r6, [sp]
   20c28:	add	r4, r4, #4
   20c2c:	mov	r5, #0
   20c30:	ldr	r6, [sp, #20]
   20c34:	add	r9, r9, #8
   20c38:	b	20c80 <__assert_fail@plt+0xf2e0>
   20c3c:	ldr	r3, [sp, #12]
   20c40:	add	r0, sp, #14400	; 0x3840
   20c44:	add	r0, r0, #40	; 0x28
   20c48:	ldrb	r2, [r3]
   20c4c:	asr	r3, r2, #5
   20c50:	and	r2, r2, #31
   20c54:	add	r3, r0, r3, lsl #2
   20c58:	add	r3, r3, r1
   20c5c:	sub	r3, r3, #8192	; 0x2000
   20c60:	ldr	r3, [r3]
   20c64:	lsr	r2, r3, r2
   20c68:	tst	r2, #1
   20c6c:	bne	20c90 <__assert_fail@plt+0xf2f0>
   20c70:	add	r5, r5, #1
   20c74:	add	r4, r4, #32
   20c78:	cmp	r5, r6
   20c7c:	bge	20dd0 <__assert_fail@plt+0xf430>
   20c80:	ldr	r3, [sp]
   20c84:	lsl	r1, r5, #5
   20c88:	cmp	r3, #1
   20c8c:	beq	20c3c <__assert_fail@plt+0xf29c>
   20c90:	sub	r1, r8, #4
   20c94:	sub	r2, r4, #32
   20c98:	mov	sl, r1
   20c9c:	mov	r0, r2
   20ca0:	sub	lr, r7, #4
   20ca4:	mov	ip, #0
   20ca8:	ldr	fp, [r0, #4]!
   20cac:	ldr	r3, [sl, #4]!
   20cb0:	cmp	r4, r0
   20cb4:	and	r3, r3, fp
   20cb8:	orr	ip, ip, r3
   20cbc:	str	r3, [lr, #4]!
   20cc0:	bne	20ca8 <__assert_fail@plt+0xf308>
   20cc4:	cmp	ip, #0
   20cc8:	beq	20c70 <__assert_fail@plt+0xf2d0>
   20ccc:	mov	sl, #0
   20cd0:	sub	fp, r9, #4
   20cd4:	mov	lr, sl
   20cd8:	ldr	r3, [r1, #4]!
   20cdc:	ldr	ip, [r2, #4]!
   20ce0:	bic	r0, ip, r3
   20ce4:	bic	r3, r3, ip
   20ce8:	cmp	r2, r4
   20cec:	orr	lr, lr, r0
   20cf0:	orr	sl, sl, r3
   20cf4:	str	r0, [fp, #4]!
   20cf8:	str	r3, [r1]
   20cfc:	bne	20cd8 <__assert_fail@plt+0xf338>
   20d00:	add	fp, r5, r5, lsl #1
   20d04:	add	r3, sp, #3168	; 0xc60
   20d08:	cmp	lr, #0
   20d0c:	add	r3, r3, #8
   20d10:	str	sl, [sp, #28]
   20d14:	add	lr, r3, fp, lsl #2
   20d18:	str	lr, [sp, #20]
   20d1c:	str	r3, [sp, #40]	; 0x28
   20d20:	beq	20da4 <__assert_fail@plt+0xf404>
   20d24:	add	r3, sp, #14400	; 0x3840
   20d28:	ldrd	r0, [r9]
   20d2c:	add	r3, r3, #40	; 0x28
   20d30:	add	ip, r3, r6, lsl #5
   20d34:	ldrd	sl, [r9, #16]
   20d38:	lsl	r3, r6, #1
   20d3c:	sub	ip, ip, #8192	; 0x2000
   20d40:	strd	r0, [ip]
   20d44:	ldrd	r0, [r9, #8]
   20d48:	strd	r0, [ip, #8]
   20d4c:	ldrd	r0, [r9, #24]
   20d50:	strd	sl, [ip, #16]
   20d54:	strd	r0, [ip, #24]
   20d58:	ldrd	r0, [r7]
   20d5c:	strd	r0, [r4, #-28]	; 0xffffffe4
   20d60:	add	r0, r3, r6
   20d64:	mov	r1, lr
   20d68:	ldrd	sl, [r7, #8]
   20d6c:	str	r3, [sp, #44]	; 0x2c
   20d70:	add	r3, sp, #3168	; 0xc60
   20d74:	add	r3, r3, #8
   20d78:	add	r0, r3, r0, lsl #2
   20d7c:	strd	sl, [r4, #-20]	; 0xffffffec
   20d80:	ldrd	sl, [r7, #16]
   20d84:	strd	sl, [r4, #-12]
   20d88:	ldrd	sl, [r7, #24]
   20d8c:	strd	sl, [r4, #-4]
   20d90:	bl	1f0e0 <__assert_fail@plt+0xd740>
   20d94:	cmp	r0, #0
   20d98:	ldr	r3, [sp, #44]	; 0x2c
   20d9c:	bne	21004 <__assert_fail@plt+0xf664>
   20da0:	add	r6, r6, #1
   20da4:	ldr	r3, [sp, #16]
   20da8:	ldr	r0, [sp, #20]
   20dac:	ldr	r2, [sp, #32]
   20db0:	ldr	r3, [r3, #12]
   20db4:	ldr	r1, [r3, r2]
   20db8:	bl	1e0cc <__assert_fail@plt+0xc72c>
   20dbc:	cmp	r0, #0
   20dc0:	beq	20ea0 <__assert_fail@plt+0xf500>
   20dc4:	ldr	r3, [sp, #28]
   20dc8:	cmp	r3, #0
   20dcc:	bne	20c70 <__assert_fail@plt+0xf2d0>
   20dd0:	str	r6, [sp, #20]
   20dd4:	ldr	r3, [sp, #20]
   20dd8:	cmp	r5, r3
   20ddc:	beq	210c8 <__assert_fail@plt+0xf728>
   20de0:	ldr	r3, [sp, #16]
   20de4:	ldr	sl, [r3, #8]
   20de8:	b	2089c <__assert_fail@plt+0xeefc>
   20dec:	ldr	r1, [sp, #36]	; 0x24
   20df0:	ldr	r3, [r1, #92]	; 0x5c
   20df4:	cmp	r3, #1
   20df8:	ble	20f20 <__assert_fail@plt+0xf580>
   20dfc:	ldr	lr, [r1, #60]	; 0x3c
   20e00:	sub	r0, r8, #4
   20e04:	sub	r1, lr, #4
   20e08:	add	lr, lr, #28
   20e0c:	ldr	r3, [r0, #4]!
   20e10:	ldr	ip, [r1, #4]!
   20e14:	orr	r3, r3, ip
   20e18:	cmp	r1, lr
   20e1c:	str	r3, [r0]
   20e20:	bne	20e0c <__assert_fail@plt+0xf46c>
   20e24:	ldr	r3, [sp, #36]	; 0x24
   20e28:	ldr	r3, [r3, #128]	; 0x80
   20e2c:	tst	r3, #64	; 0x40
   20e30:	beq	20f10 <__assert_fail@plt+0xf570>
   20e34:	tst	r3, #128	; 0x80
   20e38:	beq	20b28 <__assert_fail@plt+0xf188>
   20e3c:	ldr	r3, [sp, #104]	; 0x68
   20e40:	bic	r3, r3, #1
   20e44:	str	r3, [sp, #104]	; 0x68
   20e48:	b	20b28 <__assert_fail@plt+0xf188>
   20e4c:	ldrd	r0, [sp, #48]	; 0x30
   20e50:	str	r1, [r8, #4]
   20e54:	ldr	r3, [sp, #104]	; 0x68
   20e58:	str	r0, [r8]
   20e5c:	strd	r0, [r8, #8]
   20e60:	strd	r0, [r8, #16]
   20e64:	strd	r0, [r8, #24]
   20e68:	tst	r3, #1024	; 0x400
   20e6c:	beq	2089c <__assert_fail@plt+0xeefc>
   20e70:	mov	r3, #1024	; 0x400
   20e74:	tst	r2, #128	; 0x80
   20e78:	str	r3, [sp, #104]	; 0x68
   20e7c:	beq	20b40 <__assert_fail@plt+0xf1a0>
   20e80:	ldr	r3, [sp, #48]	; 0x30
   20e84:	ldr	r2, [sp, #52]	; 0x34
   20e88:	str	r3, [r8]
   20e8c:	strd	r2, [r8, #4]
   20e90:	strd	r2, [r8, #12]
   20e94:	strd	r2, [r8, #20]
   20e98:	str	r2, [r8, #28]
   20e9c:	b	2089c <__assert_fail@plt+0xeefc>
   20ea0:	lsl	r3, r6, #1
   20ea4:	str	r6, [sp, #20]
   20ea8:	ldr	r2, [sp, #20]
   20eac:	ldr	r4, [sp, #40]	; 0x28
   20eb0:	add	r3, r3, r2
   20eb4:	add	r5, r4, r3, lsl #2
   20eb8:	add	r4, r4, #12
   20ebc:	ldr	r0, [r4, #-4]
   20ec0:	bl	1c734 <__assert_fail@plt+0xad94>
   20ec4:	cmp	r5, r4
   20ec8:	bne	20eb8 <__assert_fail@plt+0xf518>
   20ecc:	mov	r0, #0
   20ed0:	add	sp, sp, #14400	; 0x3840
   20ed4:	add	sp, sp, #44	; 0x2c
   20ed8:	ldrd	r4, [sp]
   20edc:	ldrd	r6, [sp, #8]
   20ee0:	ldrd	r8, [sp, #16]
   20ee4:	ldrd	sl, [sp, #24]
   20ee8:	add	sp, sp, #32
   20eec:	pop	{pc}		; (ldr pc, [sp], #4)
   20ef0:	ldr	r3, [sp, #36]	; 0x24
   20ef4:	mvn	r0, #0
   20ef8:	mvn	r1, #0
   20efc:	strd	r0, [r8]
   20f00:	strd	r0, [r8, #8]
   20f04:	ldr	r3, [r3, #128]	; 0x80
   20f08:	tst	r3, #64	; 0x40
   20f0c:	bne	20e34 <__assert_fail@plt+0xf494>
   20f10:	ldr	r1, [sp, #104]	; 0x68
   20f14:	bic	r1, r1, #1024	; 0x400
   20f18:	str	r1, [sp, #104]	; 0x68
   20f1c:	b	20e34 <__assert_fail@plt+0xf494>
   20f20:	ldr	r3, [sp, #36]	; 0x24
   20f24:	mvn	r0, #0
   20f28:	mvn	r1, #0
   20f2c:	strd	r0, [r8]
   20f30:	strd	r0, [r8, #8]
   20f34:	strd	r0, [r8, #16]
   20f38:	ldr	r3, [r3, #128]	; 0x80
   20f3c:	strd	r0, [r8, #24]
   20f40:	tst	r3, #64	; 0x40
   20f44:	bne	20e34 <__assert_fail@plt+0xf494>
   20f48:	b	20f10 <__assert_fail@plt+0xf570>
   20f4c:	ldr	r3, [sp, #36]	; 0x24
   20f50:	sub	ip, r8, #4
   20f54:	mov	r1, #0
   20f58:	add	r0, r3, #96	; 0x60
   20f5c:	add	r4, r3, #128	; 0x80
   20f60:	ldr	r3, [r0], #4
   20f64:	ldr	lr, [ip, #4]!
   20f68:	cmp	r0, r4
   20f6c:	and	r3, r3, lr
   20f70:	orr	r1, r1, r3
   20f74:	str	r3, [ip]
   20f78:	bne	20f60 <__assert_fail@plt+0xf5c0>
   20f7c:	cmp	r1, #0
   20f80:	bne	20ba8 <__assert_fail@plt+0xf208>
   20f84:	b	2089c <__assert_fail@plt+0xeefc>
   20f88:	ldr	lr, [r3, r1, lsl #3]
   20f8c:	sub	r0, r8, #4
   20f90:	sub	r1, lr, #4
   20f94:	add	lr, lr, #28
   20f98:	ldr	r3, [r0, #4]!
   20f9c:	ldr	ip, [r1, #4]!
   20fa0:	orr	r3, r3, ip
   20fa4:	cmp	r1, lr
   20fa8:	str	r3, [r0]
   20fac:	bne	20f98 <__assert_fail@plt+0xf5f8>
   20fb0:	b	20b28 <__assert_fail@plt+0xf188>
   20fb4:	ldr	r3, [sp, #36]	; 0x24
   20fb8:	sub	r0, r8, #4
   20fbc:	mov	r1, #0
   20fc0:	add	r2, r3, #96	; 0x60
   20fc4:	add	lr, r3, #128	; 0x80
   20fc8:	ldr	ip, [r2], #4
   20fcc:	ldr	r3, [r0, #4]!
   20fd0:	cmp	lr, r2
   20fd4:	bic	r3, r3, ip
   20fd8:	orr	r1, r1, r3
   20fdc:	str	r3, [r0]
   20fe0:	bne	20fc8 <__assert_fail@plt+0xf628>
   20fe4:	cmp	r1, #0
   20fe8:	beq	2089c <__assert_fail@plt+0xeefc>
   20fec:	b	20c0c <__assert_fail@plt+0xf26c>
   20ff0:	ldr	r3, [sp, #12]
   20ff4:	ldrb	r3, [r3, #6]
   20ff8:	tst	r3, #64	; 0x40
   20ffc:	beq	20bb8 <__assert_fail@plt+0xf218>
   21000:	b	20e80 <__assert_fail@plt+0xf4e0>
   21004:	str	r6, [sp, #20]
   21008:	b	20ea8 <__assert_fail@plt+0xf508>
   2100c:	ldr	r3, [sp, #12]
   21010:	ldrb	r3, [r3, #6]
   21014:	tst	r3, #64	; 0x40
   21018:	bne	20b50 <__assert_fail@plt+0xf1b0>
   2101c:	b	20e80 <__assert_fail@plt+0xf4e0>
   21020:	ldr	r3, [r5, #-2096]	; 0xfffff7d0
   21024:	cmp	r3, #0
   21028:	beq	2108c <__assert_fail@plt+0xf6ec>
   2102c:	ldr	r0, [r5, #-2084]	; 0xfffff7dc
   21030:	ldr	r4, [sp, #40]	; 0x28
   21034:	bl	1c734 <__assert_fail@plt+0xad94>
   21038:	ldr	r3, [sp, #20]
   2103c:	add	r5, r3, r3, lsl #1
   21040:	add	r5, r4, r5, lsl #2
   21044:	add	r4, r4, #12
   21048:	ldr	r0, [r4, #-4]
   2104c:	bl	1c734 <__assert_fail@plt+0xad94>
   21050:	cmp	r5, r4
   21054:	bne	21044 <__assert_fail@plt+0xf6a4>
   21058:	b	20ecc <__assert_fail@plt+0xf52c>
   2105c:	mov	r3, #1
   21060:	add	r2, sp, #60	; 0x3c
   21064:	ldr	r0, [sp, #12]
   21068:	mov	r1, r9
   2106c:	bl	1f2d4 <__assert_fail@plt+0xd934>
   21070:	add	r3, sp, #1120	; 0x460
   21074:	cmp	r0, #0
   21078:	add	r3, r3, #8
   2107c:	str	r0, [r3, sl, lsl #2]
   21080:	beq	21020 <__assert_fail@plt+0xf680>
   21084:	cmp	r7, r0
   21088:	beq	21098 <__assert_fail@plt+0xf6f8>
   2108c:	ldr	r3, [r9, #92]	; 0x5c
   21090:	cmp	r3, #2
   21094:	movge	fp, #1
   21098:	mov	r3, #2
   2109c:	add	r2, sp, #60	; 0x3c
   210a0:	ldr	r0, [sp, #12]
   210a4:	mov	r1, r9
   210a8:	bl	1f2d4 <__assert_fail@plt+0xd934>
   210ac:	cmp	r0, #0
   210b0:	str	r0, [r5, sl, lsl #2]
   210b4:	bne	209e4 <__assert_fail@plt+0xf044>
   210b8:	ldr	r3, [r5, #-2096]	; 0xfffff7d0
   210bc:	cmp	r3, #0
   210c0:	beq	209e4 <__assert_fail@plt+0xf044>
   210c4:	b	2102c <__assert_fail@plt+0xf68c>
   210c8:	ldr	r0, [sp, #16]
   210cc:	add	r1, sp, #3168	; 0xc60
   210d0:	add	r1, r1, #8
   210d4:	ldr	r2, [sp, #20]
   210d8:	str	r1, [sp, #40]	; 0x28
   210dc:	ldrd	sl, [r8]
   210e0:	ldr	ip, [r0, #12]
   210e4:	lsl	r3, r2, #1
   210e8:	ldr	lr, [sp, #32]
   210ec:	add	r0, r3, r2
   210f0:	add	r5, r1, r0, lsl #2
   210f4:	str	r3, [sp, #12]
   210f8:	mov	r3, r1
   210fc:	add	r1, sp, #14400	; 0x3840
   21100:	add	r1, r1, #40	; 0x28
   21104:	add	r2, r1, r2, lsl #5
   21108:	mov	r1, #1
   2110c:	ldr	r4, [ip, lr]
   21110:	sub	r2, r2, #8192	; 0x2000
   21114:	str	r1, [r3, r0, lsl #2]
   21118:	mov	r0, #4
   2111c:	str	r1, [r5, #4]
   21120:	strd	sl, [r2]
   21124:	ldrd	sl, [r8, #16]
   21128:	strd	sl, [sp]
   2112c:	ldrd	sl, [r8, #8]
   21130:	strd	sl, [r2, #8]
   21134:	ldrd	sl, [sp]
   21138:	strd	sl, [r2, #16]
   2113c:	ldrd	sl, [r8, #24]
   21140:	strd	sl, [r2, #24]
   21144:	bl	1c864 <__assert_fail@plt+0xaec4>
   21148:	cmp	r0, #0
   2114c:	str	r0, [r5, #8]
   21150:	ldr	r3, [sp, #12]
   21154:	beq	21174 <__assert_fail@plt+0xf7d4>
   21158:	str	r4, [r0]
   2115c:	ldr	r3, [sp, #16]
   21160:	ldr	sl, [r3, #8]
   21164:	ldr	r3, [sp, #20]
   21168:	add	r3, r3, #1
   2116c:	str	r3, [sp, #20]
   21170:	b	20e80 <__assert_fail@plt+0xf4e0>
   21174:	ldr	r2, [sp, #20]
   21178:	str	r0, [r5]
   2117c:	str	r0, [r5, #4]
   21180:	cmp	r2, #0
   21184:	beq	20ecc <__assert_fail@plt+0xf52c>
   21188:	b	20ea8 <__assert_fail@plt+0xf508>
   2118c:	add	r2, sp, #3168	; 0xc60
   21190:	mov	r3, #12
   21194:	add	r2, r2, #8
   21198:	str	r3, [r5, #-2096]	; 0xfffff7d0
   2119c:	str	r2, [sp, #40]	; 0x28
   211a0:	b	21030 <__assert_fail@plt+0xf690>
   211a4:	ldr	r3, [r5, #-2096]	; 0xfffff7d0
   211a8:	cmp	r3, #0
   211ac:	beq	209c8 <__assert_fail@plt+0xf028>
   211b0:	b	2102c <__assert_fail@plt+0xf68c>
   211b4:	ldr	r2, [r8]
   211b8:	ands	r2, r1, r2
   211bc:	bne	21214 <__assert_fail@plt+0xf874>
   211c0:	add	r2, r2, #1
   211c4:	ldr	r9, [r8, r2, lsl #5]
   211c8:	tst	r1, r9
   211cc:	beq	211c0 <__assert_fail@plt+0xf820>
   211d0:	ldr	r9, [r4]
   211d4:	add	r2, r5, r2, lsl #2
   211d8:	tst	r1, r9
   211dc:	ldrne	r2, [r2, #-1024]	; 0xfffffc00
   211e0:	ldreq	r2, [r2, #-2048]	; 0xfffff800
   211e4:	str	r2, [r0]
   211e8:	b	20a74 <__assert_fail@plt+0xf0d4>
   211ec:	bne	20ecc <__assert_fail@plt+0xf52c>
   211f0:	mov	r1, #256	; 0x100
   211f4:	mov	r0, #4
   211f8:	bl	1c478 <__assert_fail@plt+0xaad8>
   211fc:	ldr	r2, [sp, #16]
   21200:	mov	r3, r0
   21204:	adds	r0, r0, #0
   21208:	movne	r0, #1
   2120c:	str	r3, [r2, #44]	; 0x2c
   21210:	b	20ed0 <__assert_fail@plt+0xf530>
   21214:	mov	r2, #0
   21218:	b	211d0 <__assert_fail@plt+0xf830>
   2121c:	ldr	r3, [r5, r0, lsl #2]
   21220:	cmp	fp, #0
   21224:	strne	r3, [r6, #1064]	; 0x428
   21228:	str	r3, [r6, #40]	; 0x28
   2122c:	b	20ad8 <__assert_fail@plt+0xf138>
   21230:	mov	r1, #512	; 0x200
   21234:	mov	r0, #4
   21238:	bl	1c478 <__assert_fail@plt+0xaad8>
   2123c:	ldr	r3, [sp, #16]
   21240:	cmp	r0, #0
   21244:	mov	r6, r0
   21248:	str	r0, [r3, #48]	; 0x30
   2124c:	beq	2102c <__assert_fail@plt+0xf68c>
   21250:	ldr	ip, [sp, #24]
   21254:	mov	lr, r0
   21258:	add	r4, r0, #1024	; 0x400
   2125c:	ldr	r3, [r7, #4]!
   21260:	cmp	r3, #0
   21264:	movne	r0, lr
   21268:	movne	r1, #1
   2126c:	beq	21288 <__assert_fail@plt+0xf8e8>
   21270:	tst	r3, #1
   21274:	bne	2129c <__assert_fail@plt+0xf8fc>
   21278:	lsrs	r3, r3, #1
   2127c:	add	r0, r0, #4
   21280:	lsl	r1, r1, #1
   21284:	bne	21270 <__assert_fail@plt+0xf8d0>
   21288:	add	lr, lr, #128	; 0x80
   2128c:	add	ip, ip, #4
   21290:	cmp	r4, lr
   21294:	bne	2125c <__assert_fail@plt+0xf8bc>
   21298:	b	20a98 <__assert_fail@plt+0xf0f8>
   2129c:	ldr	r2, [ip]
   212a0:	ands	r2, r1, r2
   212a4:	bne	212d0 <__assert_fail@plt+0xf930>
   212a8:	add	r2, r2, #1
   212ac:	ldr	r8, [ip, r2, lsl #5]
   212b0:	tst	r1, r8
   212b4:	beq	212a8 <__assert_fail@plt+0xf908>
   212b8:	add	r2, r5, r2, lsl #2
   212bc:	ldr	r8, [r2, #-2048]	; 0xfffff800
   212c0:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   212c4:	str	r8, [r0]
   212c8:	str	r2, [r0, #1024]	; 0x400
   212cc:	b	21278 <__assert_fail@plt+0xf8d8>
   212d0:	mov	r2, #0
   212d4:	b	212b8 <__assert_fail@plt+0xf918>
   212d8:	cmp	r1, #0
   212dc:	strd	r4, [sp, #-16]!
   212e0:	mov	r5, r0
   212e4:	str	r6, [sp, #8]
   212e8:	str	lr, [sp, #12]
   212ec:	blt	213a0 <__assert_fail@plt+0xfa00>
   212f0:	ldr	r3, [r0, #48]	; 0x30
   212f4:	cmp	r3, r1
   212f8:	beq	213b4 <__assert_fail@plt+0xfa14>
   212fc:	ldr	r3, [r0, #80]	; 0x50
   21300:	cmp	r3, #1
   21304:	ble	21354 <__assert_fail@plt+0xf9b4>
   21308:	ldr	r3, [r0, #8]
   2130c:	add	r3, r3, r1, lsl #2
   21310:	b	2131c <__assert_fail@plt+0xf97c>
   21314:	cmn	r1, #1
   21318:	beq	213a0 <__assert_fail@plt+0xfa00>
   2131c:	ldr	r4, [r3], #-4
   21320:	sub	r1, r1, #1
   21324:	cmn	r4, #1
   21328:	beq	21314 <__assert_fail@plt+0xf974>
   2132c:	ldrb	r3, [r5, #78]	; 0x4e
   21330:	cmp	r3, #0
   21334:	bne	213c4 <__assert_fail@plt+0xfa24>
   21338:	cmp	r4, #10
   2133c:	movne	r0, #0
   21340:	beq	21380 <__assert_fail@plt+0xf9e0>
   21344:	ldrd	r4, [sp]
   21348:	ldr	r6, [sp, #8]
   2134c:	add	sp, sp, #12
   21350:	pop	{pc}		; (ldr pc, [sp], #4)
   21354:	ldr	r3, [r0, #4]
   21358:	ldr	r0, [r0, #68]	; 0x44
   2135c:	ldrb	r3, [r3, r1]
   21360:	asr	r1, r3, #5
   21364:	and	r2, r3, #31
   21368:	ldr	r0, [r0, r1, lsl #2]
   2136c:	lsr	r0, r0, r2
   21370:	ands	r0, r0, #1
   21374:	bne	21344 <__assert_fail@plt+0xf9a4>
   21378:	cmp	r3, #10
   2137c:	bne	21344 <__assert_fail@plt+0xf9a4>
   21380:	ldrb	r3, [r5, #77]	; 0x4d
   21384:	ldrd	r4, [sp]
   21388:	ldr	r6, [sp, #8]
   2138c:	add	sp, sp, #12
   21390:	cmp	r3, #0
   21394:	moveq	r0, #0
   21398:	movne	r0, #2
   2139c:	pop	{pc}		; (ldr pc, [sp], #4)
   213a0:	ldr	r6, [sp, #8]
   213a4:	ldr	r0, [r5, #60]	; 0x3c
   213a8:	ldrd	r4, [sp]
   213ac:	add	sp, sp, #12
   213b0:	pop	{pc}		; (ldr pc, [sp], #4)
   213b4:	tst	r2, #2
   213b8:	movne	r0, #8
   213bc:	moveq	r0, #10
   213c0:	b	21344 <__assert_fail@plt+0xf9a4>
   213c4:	mov	r0, r4
   213c8:	bl	117e4 <iswalnum@plt>
   213cc:	sub	r3, r4, #95	; 0x5f
   213d0:	cmp	r0, #0
   213d4:	clz	r3, r3
   213d8:	lsr	r3, r3, #5
   213dc:	movne	r3, #1
   213e0:	cmp	r3, #0
   213e4:	movne	r0, #1
   213e8:	bne	21344 <__assert_fail@plt+0xf9a4>
   213ec:	b	21338 <__assert_fail@plt+0xf998>
   213f0:	ldrb	ip, [r1, #4]
   213f4:	str	r4, [sp, #-8]!
   213f8:	ldr	r3, [r0, #4]
   213fc:	str	lr, [sp, #4]
   21400:	sub	ip, ip, #1
   21404:	ldrb	r3, [r3, r2]
   21408:	cmp	ip, #6
   2140c:	ldrls	pc, [pc, ip, lsl #2]
   21410:	b	2143c <__assert_fail@plt+0xfa9c>
   21414:	andeq	r1, r2, r0, lsr r4
   21418:	andeq	r1, r2, ip, lsr r4
   2141c:	andeq	r1, r2, r0, ror #9
   21420:	andeq	r1, r2, ip, lsr r4
   21424:	andeq	r1, r2, r4, asr r4
   21428:	andeq	r1, r2, ip, lsr r4
   2142c:	andeq	r1, r2, ip, asr #8
   21430:	ldrb	ip, [r1]
   21434:	cmp	ip, r3
   21438:	beq	21474 <__assert_fail@plt+0xfad4>
   2143c:	mov	r0, #0
   21440:	ldr	r4, [sp]
   21444:	add	sp, sp, #4
   21448:	pop	{pc}		; (ldr pc, [sp], #4)
   2144c:	tst	r3, #128	; 0x80
   21450:	bne	2143c <__assert_fail@plt+0xfa9c>
   21454:	cmp	r3, #10
   21458:	beq	21514 <__assert_fail@plt+0xfb74>
   2145c:	cmp	r3, #0
   21460:	bne	21474 <__assert_fail@plt+0xfad4>
   21464:	ldr	ip, [r0, #84]	; 0x54
   21468:	ldr	ip, [ip, #128]	; 0x80
   2146c:	tst	ip, #128	; 0x80
   21470:	bne	2143c <__assert_fail@plt+0xfa9c>
   21474:	ldr	r4, [r1, #4]
   21478:	mov	r3, #65280	; 0xff00
   2147c:	movt	r3, #3
   21480:	and	r3, r3, r4
   21484:	cmp	r3, #0
   21488:	beq	214d0 <__assert_fail@plt+0xfb30>
   2148c:	mov	r1, r2
   21490:	ldr	r2, [r0, #88]	; 0x58
   21494:	bl	212d8 <__assert_fail@plt+0xf938>
   21498:	ubfx	r1, r4, #8, #10
   2149c:	ands	r2, r1, #4
   214a0:	bne	21500 <__assert_fail@plt+0xfb60>
   214a4:	tst	r1, #8
   214a8:	beq	214b4 <__assert_fail@plt+0xfb14>
   214ac:	tst	r0, #1
   214b0:	bne	2143c <__assert_fail@plt+0xfa9c>
   214b4:	tst	r1, #32
   214b8:	beq	214c4 <__assert_fail@plt+0xfb24>
   214bc:	ands	r3, r0, #2
   214c0:	beq	2143c <__assert_fail@plt+0xfa9c>
   214c4:	tst	r1, #128	; 0x80
   214c8:	ubfxne	r0, r0, #3, #1
   214cc:	bne	21440 <__assert_fail@plt+0xfaa0>
   214d0:	ldr	r4, [sp]
   214d4:	add	sp, sp, #4
   214d8:	mov	r0, #1
   214dc:	pop	{pc}		; (ldr pc, [sp], #4)
   214e0:	ldr	ip, [r1]
   214e4:	asr	lr, r3, #5
   214e8:	and	r3, r3, #31
   214ec:	ldr	ip, [ip, lr, lsl #2]
   214f0:	lsr	r3, ip, r3
   214f4:	ands	r3, r3, #1
   214f8:	bne	21474 <__assert_fail@plt+0xfad4>
   214fc:	b	2143c <__assert_fail@plt+0xfa9c>
   21500:	ands	r3, r0, #1
   21504:	beq	2143c <__assert_fail@plt+0xfa9c>
   21508:	tst	r1, #8
   2150c:	beq	214b4 <__assert_fail@plt+0xfb14>
   21510:	b	2143c <__assert_fail@plt+0xfa9c>
   21514:	ldr	r3, [r0, #84]	; 0x54
   21518:	ldr	r3, [r3, #128]	; 0x80
   2151c:	ands	r3, r3, #64	; 0x40
   21520:	bne	21474 <__assert_fail@plt+0xfad4>
   21524:	b	2143c <__assert_fail@plt+0xfa9c>
   21528:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2152c:	mov	r4, r1
   21530:	mov	r1, r2
   21534:	ldr	r2, [r0, #88]	; 0x58
   21538:	mov	r5, r0
   2153c:	strd	r6, [sp, #8]
   21540:	str	r8, [sp, #16]
   21544:	str	lr, [sp, #20]
   21548:	bl	212d8 <__assert_fail@plt+0xf938>
   2154c:	ldr	lr, [r4, #8]
   21550:	cmp	lr, #0
   21554:	ble	21604 <__assert_fail@plt+0xfc64>
   21558:	ldr	r3, [r5, #84]	; 0x54
   2155c:	mov	r2, #0
   21560:	and	r7, r0, #8
   21564:	and	r6, r0, #2
   21568:	and	r5, r0, #1
   2156c:	ldr	r1, [r4, #12]
   21570:	ldr	r4, [r3]
   21574:	sub	r1, r1, #4
   21578:	ldr	r0, [r1, #4]!
   2157c:	add	r3, r4, r0, lsl #3
   21580:	ldrb	ip, [r3, #4]
   21584:	ldr	r3, [r3, #4]
   21588:	cmp	ip, #2
   2158c:	ubfx	r3, r3, #8, #10
   21590:	bne	215f8 <__assert_fail@plt+0xfc58>
   21594:	cmp	r3, #0
   21598:	beq	215d4 <__assert_fail@plt+0xfc34>
   2159c:	tst	r3, #4
   215a0:	beq	215e8 <__assert_fail@plt+0xfc48>
   215a4:	cmp	r5, #0
   215a8:	beq	215f8 <__assert_fail@plt+0xfc58>
   215ac:	tst	r3, #8
   215b0:	bne	215f8 <__assert_fail@plt+0xfc58>
   215b4:	tst	r3, #32
   215b8:	beq	215c4 <__assert_fail@plt+0xfc24>
   215bc:	cmp	r6, #0
   215c0:	beq	215f8 <__assert_fail@plt+0xfc58>
   215c4:	tst	r3, #128	; 0x80
   215c8:	beq	215d4 <__assert_fail@plt+0xfc34>
   215cc:	cmp	r7, #0
   215d0:	beq	215f8 <__assert_fail@plt+0xfc58>
   215d4:	ldrd	r4, [sp]
   215d8:	ldrd	r6, [sp, #8]
   215dc:	ldr	r8, [sp, #16]
   215e0:	add	sp, sp, #20
   215e4:	pop	{pc}		; (ldr pc, [sp], #4)
   215e8:	tst	r3, #8
   215ec:	beq	215b4 <__assert_fail@plt+0xfc14>
   215f0:	cmp	r5, #0
   215f4:	beq	215b4 <__assert_fail@plt+0xfc14>
   215f8:	add	r2, r2, #1
   215fc:	cmp	r2, lr
   21600:	bne	21578 <__assert_fail@plt+0xfbd8>
   21604:	mov	r0, #0
   21608:	b	215d4 <__assert_fail@plt+0xfc34>
   2160c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21610:	mov	r4, r0
   21614:	ldr	r5, [r0, #24]
   21618:	strd	r6, [sp, #8]
   2161c:	mov	r7, r1
   21620:	strd	r8, [sp, #16]
   21624:	mov	r8, r2
   21628:	strd	sl, [sp, #24]
   2162c:	str	lr, [sp, #32]
   21630:	sub	sp, sp, #44	; 0x2c
   21634:	cmp	r5, r1
   21638:	suble	r5, r1, r5
   2163c:	ble	216a0 <__assert_fail@plt+0xfd00>
   21640:	ldr	r3, [r0, #80]	; 0x50
   21644:	cmp	r3, #1
   21648:	ble	21658 <__assert_fail@plt+0xfcb8>
   2164c:	mov	r2, #0
   21650:	mov	r3, #0
   21654:	strd	r2, [r0, #16]
   21658:	ldrb	r3, [r4, #75]	; 0x4b
   2165c:	mov	r2, #0
   21660:	tst	r8, #1
   21664:	movne	r0, #4
   21668:	moveq	r0, #6
   2166c:	ldr	ip, [r4, #44]	; 0x2c
   21670:	mov	r5, r7
   21674:	str	r2, [r4, #24]
   21678:	ldr	r1, [r4, #52]	; 0x34
   2167c:	cmp	r3, r2
   21680:	str	r2, [r4, #28]
   21684:	ldreq	r3, [r4]
   21688:	str	r2, [r4, #32]
   2168c:	str	ip, [r4, #48]	; 0x30
   21690:	str	r1, [r4, #56]	; 0x38
   21694:	str	r0, [r4, #60]	; 0x3c
   21698:	streq	r3, [r4, #4]
   2169c:	strb	r2, [r4, #76]	; 0x4c
   216a0:	cmp	r5, #0
   216a4:	beq	21820 <__assert_fail@plt+0xfe80>
   216a8:	ldrb	r2, [r4, #76]	; 0x4c
   216ac:	ldr	r3, [r4, #32]
   216b0:	ldr	r6, [r4, #28]
   216b4:	cmp	r3, r5
   216b8:	ble	21830 <__assert_fail@plt+0xfe90>
   216bc:	cmp	r2, #0
   216c0:	bne	219a4 <__assert_fail@plt+0x10004>
   216c4:	mov	r2, r8
   216c8:	sub	r1, r5, #1
   216cc:	mov	r0, r4
   216d0:	bl	212d8 <__assert_fail@plt+0xf938>
   216d4:	ldr	r3, [r4, #80]	; 0x50
   216d8:	sub	r2, r6, r5
   216dc:	str	r0, [r4, #60]	; 0x3c
   216e0:	cmp	r3, #1
   216e4:	bgt	2177c <__assert_fail@plt+0xfddc>
   216e8:	ldrb	r3, [r4, #75]	; 0x4b
   216ec:	cmp	r3, #0
   216f0:	bne	219e4 <__assert_fail@plt+0x10044>
   216f4:	ldr	ip, [r4, #32]
   216f8:	str	r2, [r4, #28]
   216fc:	ldr	r1, [r4, #48]	; 0x30
   21700:	ldr	r0, [r4, #56]	; 0x38
   21704:	sub	ip, ip, r5
   21708:	ldr	r2, [r4, #80]	; 0x50
   2170c:	sub	r1, r1, r5
   21710:	str	ip, [r4, #32]
   21714:	sub	r0, r0, r5
   21718:	cmp	r3, #0
   2171c:	bne	2172c <__assert_fail@plt+0xfd8c>
   21720:	ldr	r3, [r4, #4]
   21724:	add	r5, r3, r5
   21728:	str	r5, [r4, #4]
   2172c:	cmp	r2, #1
   21730:	str	r7, [r4, #24]
   21734:	str	r1, [r4, #48]	; 0x30
   21738:	str	r0, [r4, #56]	; 0x38
   2173c:	ble	217a8 <__assert_fail@plt+0xfe08>
   21740:	ldrb	r3, [r4, #72]	; 0x48
   21744:	mov	r0, r4
   21748:	cmp	r3, #0
   2174c:	bne	21798 <__assert_fail@plt+0xfdf8>
   21750:	bl	1d14c <__assert_fail@plt+0xb7ac>
   21754:	mov	r3, #0
   21758:	mov	r0, r3
   2175c:	str	r3, [r4, #40]	; 0x28
   21760:	add	sp, sp, #44	; 0x2c
   21764:	ldrd	r4, [sp]
   21768:	ldrd	r6, [sp, #8]
   2176c:	ldrd	r8, [sp, #16]
   21770:	ldrd	sl, [sp, #24]
   21774:	add	sp, sp, #32
   21778:	pop	{pc}		; (ldr pc, [sp], #4)
   2177c:	ldr	r0, [r4, #8]
   21780:	lsl	r2, r2, #2
   21784:	add	r1, r0, r5, lsl #2
   21788:	bl	1158c <memmove@plt>
   2178c:	ldr	r2, [r4, #28]
   21790:	sub	r2, r2, r5
   21794:	b	216e8 <__assert_fail@plt+0xfd48>
   21798:	bl	1d2ec <__assert_fail@plt+0xb94c>
   2179c:	cmp	r0, #0
   217a0:	beq	21754 <__assert_fail@plt+0xfdb4>
   217a4:	b	21760 <__assert_fail@plt+0xfdc0>
   217a8:	ldrb	r3, [r4, #75]	; 0x4b
   217ac:	cmp	r3, #0
   217b0:	streq	r1, [r4, #28]
   217b4:	beq	21754 <__assert_fail@plt+0xfdb4>
   217b8:	ldrb	r3, [r4, #72]	; 0x48
   217bc:	cmp	r3, #0
   217c0:	bne	21ca4 <__assert_fail@plt+0x10304>
   217c4:	ldr	r0, [r4, #64]	; 0x40
   217c8:	cmp	r0, #0
   217cc:	beq	21754 <__assert_fail@plt+0xfdb4>
   217d0:	ldr	r3, [r4, #28]
   217d4:	ldr	r2, [r4, #36]	; 0x24
   217d8:	cmp	r1, r2
   217dc:	movge	r1, r2
   217e0:	cmp	r1, r3
   217e4:	bgt	217f4 <__assert_fail@plt+0xfe54>
   217e8:	b	21dfc <__assert_fail@plt+0x1045c>
   217ec:	ldr	r7, [r4, #24]
   217f0:	ldr	r0, [r4, #64]	; 0x40
   217f4:	ldm	r4, {r2, ip}
   217f8:	add	r2, r2, r3
   217fc:	ldrb	r2, [r2, r7]
   21800:	ldrb	r2, [r0, r2]
   21804:	strb	r2, [ip, r3]
   21808:	add	r3, r3, #1
   2180c:	cmp	r1, r3
   21810:	bne	217ec <__assert_fail@plt+0xfe4c>
   21814:	str	r1, [r4, #28]
   21818:	str	r1, [r4, #32]
   2181c:	b	21754 <__assert_fail@plt+0xfdb4>
   21820:	ldr	r1, [r4, #48]	; 0x30
   21824:	ldr	r0, [r4, #56]	; 0x38
   21828:	ldr	r2, [r4, #80]	; 0x50
   2182c:	b	2172c <__assert_fail@plt+0xfd8c>
   21830:	cmp	r2, #0
   21834:	bne	21d40 <__assert_fail@plt+0x103a0>
   21838:	mov	r1, #0
   2183c:	ldr	r9, [r4, #24]
   21840:	ldr	r2, [r4, #80]	; 0x50
   21844:	str	r1, [r4, #28]
   21848:	cmp	r2, #1
   2184c:	ble	21b64 <__assert_fail@plt+0x101c4>
   21850:	ldrb	r1, [r4, #73]	; 0x49
   21854:	cmp	r1, #0
   21858:	beq	218cc <__assert_fail@plt+0xff2c>
   2185c:	ldr	r0, [r4]
   21860:	sub	r2, r5, r2
   21864:	sub	r1, r5, #1
   21868:	add	ip, r0, r9
   2186c:	add	r2, ip, r2
   21870:	add	lr, ip, r1
   21874:	cmp	r0, r2
   21878:	movcc	r0, r2
   2187c:	str	lr, [sp, #4]
   21880:	cmp	lr, r0
   21884:	str	ip, [sp, #8]
   21888:	bcc	218cc <__assert_fail@plt+0xff2c>
   2188c:	ldrb	r2, [ip, r1]
   21890:	and	r2, r2, #192	; 0xc0
   21894:	cmp	r2, #128	; 0x80
   21898:	bne	21cb4 <__assert_fail@plt+0x10314>
   2189c:	ldmib	sp, {r2, fp}
   218a0:	sub	r0, r0, #1
   218a4:	sub	r2, r2, #1
   218a8:	b	218c0 <__assert_fail@plt+0xff20>
   218ac:	ldrb	r1, [sl]
   218b0:	sub	r2, r2, #1
   218b4:	and	r1, r1, #192	; 0xc0
   218b8:	cmp	r1, #128	; 0x80
   218bc:	bne	21cb0 <__assert_fail@plt+0x10310>
   218c0:	cmp	r0, r2
   218c4:	mov	sl, r2
   218c8:	bne	218ac <__assert_fail@plt+0xff0c>
   218cc:	add	r9, r9, r3
   218d0:	cmp	r7, r9
   218d4:	ble	21be4 <__assert_fail@plt+0x10244>
   218d8:	add	fp, r4, #16
   218dc:	add	sl, sp, #24
   218e0:	str	r7, [sp, #4]
   218e4:	str	r5, [sp, #8]
   218e8:	str	r6, [sp, #12]
   218ec:	ldr	r1, [r4]
   218f0:	mov	r3, fp
   218f4:	mov	r0, sl
   218f8:	ldr	r5, [r4, #44]	; 0x2c
   218fc:	ldrd	r6, [fp]
   21900:	add	r1, r1, r9
   21904:	sub	r5, r5, r9
   21908:	mov	r2, r5
   2190c:	strd	r6, [sp, #32]
   21910:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   21914:	sub	r3, r0, #1
   21918:	cmn	r3, #4
   2191c:	ldrls	r1, [sp, #24]
   21920:	bhi	21d6c <__assert_fail@plt+0x103cc>
   21924:	add	r9, r9, r0
   21928:	ldr	r3, [sp, #4]
   2192c:	cmp	r3, r9
   21930:	bgt	218ec <__assert_fail@plt+0xff4c>
   21934:	ldr	r7, [sp, #4]
   21938:	cmn	r1, #1
   2193c:	ldr	r5, [sp, #8]
   21940:	ldr	r6, [sp, #12]
   21944:	sub	r9, r9, r7
   21948:	str	r9, [r4, #28]
   2194c:	beq	21bec <__assert_fail@plt+0x1024c>
   21950:	ldrb	r3, [r4, #78]	; 0x4e
   21954:	cmp	r3, #0
   21958:	bne	21dcc <__assert_fail@plt+0x1042c>
   2195c:	cmp	r1, #10
   21960:	movne	r3, #0
   21964:	bne	21978 <__assert_fail@plt+0xffd8>
   21968:	ldrb	r3, [r4, #77]	; 0x4d
   2196c:	cmp	r3, #0
   21970:	moveq	r3, #0
   21974:	movne	r3, #2
   21978:	str	r3, [r4, #60]	; 0x3c
   2197c:	cmp	r9, #0
   21980:	bne	21d90 <__assert_fail@plt+0x103f0>
   21984:	ldrb	r3, [r4, #75]	; 0x4b
   21988:	str	r9, [r4, #32]
   2198c:	ldr	r1, [r4, #48]	; 0x30
   21990:	ldr	r0, [r4, #56]	; 0x38
   21994:	ldr	r2, [r4, #80]	; 0x50
   21998:	sub	r1, r1, r5
   2199c:	sub	r0, r0, r5
   219a0:	b	21718 <__assert_fail@plt+0xfd78>
   219a4:	mov	r3, r6
   219a8:	mov	r2, #0
   219ac:	ldr	r9, [r4, #12]
   219b0:	b	219c4 <__assert_fail@plt+0x10024>
   219b4:	bge	21b58 <__assert_fail@plt+0x101b8>
   219b8:	add	r2, r1, #1
   219bc:	cmp	r2, r3
   219c0:	bge	21a00 <__assert_fail@plt+0x10060>
   219c4:	add	r1, r2, r3
   219c8:	add	r1, r1, r1, lsr #31
   219cc:	asr	r1, r1, #1
   219d0:	ldr	r0, [r9, r1, lsl #2]
   219d4:	cmp	r0, r5
   219d8:	ble	219b4 <__assert_fail@plt+0x10014>
   219dc:	mov	r3, r1
   219e0:	b	219bc <__assert_fail@plt+0x1001c>
   219e4:	ldr	r0, [r4, #4]
   219e8:	add	r1, r0, r5
   219ec:	bl	1158c <memmove@plt>
   219f0:	ldr	r2, [r4, #28]
   219f4:	ldrb	r3, [r4, #75]	; 0x4b
   219f8:	sub	r2, r2, r5
   219fc:	b	216f4 <__assert_fail@plt+0xfd54>
   21a00:	cmp	r0, r5
   21a04:	addlt	sl, r1, #1
   21a08:	bge	21b58 <__assert_fail@plt+0x101b8>
   21a0c:	mov	r2, r8
   21a10:	mov	r0, r4
   21a14:	bl	212d8 <__assert_fail@plt+0xf938>
   21a18:	sub	r3, r5, sl
   21a1c:	cmp	r5, r6
   21a20:	str	r0, [r4, #60]	; 0x3c
   21a24:	clz	r3, r3
   21a28:	lsr	r3, r3, #5
   21a2c:	movge	r3, #0
   21a30:	cmp	r3, #0
   21a34:	bne	21c04 <__assert_fail@plt+0x10264>
   21a38:	ldr	r1, [r4, #44]	; 0x2c
   21a3c:	mov	r3, #0
   21a40:	cmp	sl, #0
   21a44:	ldr	r0, [r4, #52]	; 0x34
   21a48:	strb	r3, [r4, #76]	; 0x4c
   21a4c:	sub	r1, r1, r7
   21a50:	add	r2, r1, r5
   21a54:	sub	r0, r0, r7
   21a58:	add	r3, r0, r5
   21a5c:	str	r2, [r4, #48]	; 0x30
   21a60:	str	r3, [r4, #56]	; 0x38
   21a64:	ble	21a94 <__assert_fail@plt+0x100f4>
   21a68:	sub	r3, sl, #-1073741823	; 0xc0000001
   21a6c:	ldr	r2, [r9, r3, lsl #2]
   21a70:	add	r3, r9, r3, lsl #2
   21a74:	cmp	r2, r5
   21a78:	beq	21a8c <__assert_fail@plt+0x100ec>
   21a7c:	b	21a94 <__assert_fail@plt+0x100f4>
   21a80:	ldr	r2, [r3, #-4]!
   21a84:	cmp	r2, r5
   21a88:	bne	21a94 <__assert_fail@plt+0x100f4>
   21a8c:	subs	sl, sl, #1
   21a90:	bne	21a80 <__assert_fail@plt+0x100e0>
   21a94:	cmp	sl, r6
   21a98:	bge	21af0 <__assert_fail@plt+0x10150>
   21a9c:	ldr	r3, [r4, #8]
   21aa0:	lsl	ip, sl, #2
   21aa4:	ldr	r2, [r3, sl, lsl #2]
   21aa8:	add	r3, r3, ip
   21aac:	cmn	r2, #1
   21ab0:	beq	21ac4 <__assert_fail@plt+0x10124>
   21ab4:	b	21af8 <__assert_fail@plt+0x10158>
   21ab8:	ldr	r2, [r3, #4]!
   21abc:	cmn	r2, #1
   21ac0:	bne	21af8 <__assert_fail@plt+0x10158>
   21ac4:	add	sl, sl, #1
   21ac8:	cmp	sl, r6
   21acc:	lsl	ip, sl, #2
   21ad0:	bne	21ab8 <__assert_fail@plt+0x10118>
   21ad4:	mov	r3, #0
   21ad8:	mov	r2, r3
   21adc:	str	r3, [r4, #28]
   21ae0:	ldrb	r3, [r4, #75]	; 0x4b
   21ae4:	str	r2, [r4, #32]
   21ae8:	ldr	r2, [r4, #80]	; 0x50
   21aec:	b	21718 <__assert_fail@plt+0xfd78>
   21af0:	beq	21ad4 <__assert_fail@plt+0x10134>
   21af4:	lsl	ip, sl, #2
   21af8:	ldr	r2, [r9, ip]
   21afc:	sub	r2, r2, r5
   21b00:	cmp	r2, #0
   21b04:	str	r2, [r4, #28]
   21b08:	beq	21ae0 <__assert_fail@plt+0x10140>
   21b0c:	ble	21b34 <__assert_fail@plt+0x10194>
   21b10:	ldr	r1, [r4, #8]
   21b14:	mov	r3, #0
   21b18:	mvn	r0, #0
   21b1c:	sub	r1, r1, #4
   21b20:	str	r0, [r1, #4]!
   21b24:	add	r3, r3, #1
   21b28:	ldr	r2, [r4, #28]
   21b2c:	cmp	r2, r3
   21b30:	bgt	21b20 <__assert_fail@plt+0x10180>
   21b34:	mov	r1, #255	; 0xff
   21b38:	ldr	r0, [r4, #4]
   21b3c:	bl	11814 <memset@plt>
   21b40:	ldr	r2, [r4, #28]
   21b44:	ldr	r1, [r4, #48]	; 0x30
   21b48:	ldr	r0, [r4, #56]	; 0x38
   21b4c:	sub	r1, r1, r5
   21b50:	sub	r0, r0, r5
   21b54:	b	21ae0 <__assert_fail@plt+0x10140>
   21b58:	mov	sl, r1
   21b5c:	sub	r1, r1, #1
   21b60:	b	21a0c <__assert_fail@plt+0x1006c>
   21b64:	ldr	r3, [r4]
   21b68:	ldr	ip, [r4, #64]	; 0x40
   21b6c:	add	r3, r3, r5
   21b70:	add	r9, r3, r9
   21b74:	ldrb	r0, [r9, #-1]
   21b78:	cmp	ip, #0
   21b7c:	str	r1, [r4, #32]
   21b80:	ldrbne	r0, [ip, r0]
   21b84:	ldr	ip, [r4, #68]	; 0x44
   21b88:	asr	r1, r0, #5
   21b8c:	and	r3, r0, #31
   21b90:	ldr	r1, [ip, r1, lsl #2]
   21b94:	lsr	r3, r1, r3
   21b98:	ands	r1, r3, #1
   21b9c:	bne	21bb4 <__assert_fail@plt+0x10214>
   21ba0:	cmp	r0, #10
   21ba4:	bne	21bb4 <__assert_fail@plt+0x10214>
   21ba8:	ldrb	r3, [r4, #77]	; 0x4d
   21bac:	cmp	r3, #0
   21bb0:	movne	r1, #2
   21bb4:	ldrb	r3, [r4, #75]	; 0x4b
   21bb8:	str	r1, [r4, #60]	; 0x3c
   21bbc:	ldr	r1, [r4, #48]	; 0x30
   21bc0:	ldr	r0, [r4, #56]	; 0x38
   21bc4:	cmp	r3, #0
   21bc8:	sub	r1, r1, r5
   21bcc:	sub	r0, r0, r5
   21bd0:	beq	21720 <__assert_fail@plt+0xfd80>
   21bd4:	str	r7, [r4, #24]
   21bd8:	str	r1, [r4, #48]	; 0x30
   21bdc:	str	r0, [r4, #56]	; 0x38
   21be0:	b	217ac <__assert_fail@plt+0xfe0c>
   21be4:	sub	r9, r9, r7
   21be8:	str	r9, [r4, #28]
   21bec:	mov	r2, r8
   21bf0:	sub	r1, r6, #1
   21bf4:	mov	r0, r4
   21bf8:	bl	212d8 <__assert_fail@plt+0xf938>
   21bfc:	str	r0, [r4, #60]	; 0x3c
   21c00:	b	2197c <__assert_fail@plt+0xffdc>
   21c04:	ldr	r3, [r9, sl, lsl #2]
   21c08:	cmp	r3, r5
   21c0c:	bne	21a38 <__assert_fail@plt+0x10098>
   21c10:	ldr	r0, [r4, #8]
   21c14:	lsl	r8, r5, #2
   21c18:	sub	r2, r6, r5
   21c1c:	lsl	r2, r2, #2
   21c20:	add	r1, r0, r8
   21c24:	bl	1158c <memmove@plt>
   21c28:	ldr	r0, [r4, #4]
   21c2c:	ldr	r2, [r4, #28]
   21c30:	add	r1, r0, r5
   21c34:	sub	r2, r2, r5
   21c38:	bl	1158c <memmove@plt>
   21c3c:	ldr	r3, [r4, #28]
   21c40:	ldr	r2, [r4, #32]
   21c44:	sub	r3, r3, r5
   21c48:	cmp	r3, #0
   21c4c:	sub	r2, r2, r5
   21c50:	str	r3, [r4, #28]
   21c54:	str	r2, [r4, #32]
   21c58:	ble	21c88 <__assert_fail@plt+0x102e8>
   21c5c:	ldr	r1, [r4, #12]
   21c60:	mov	r2, #0
   21c64:	add	r0, r1, r8
   21c68:	sub	r1, r1, #4
   21c6c:	ldr	r3, [r0], #4
   21c70:	add	r2, r2, #1
   21c74:	sub	r3, r3, r5
   21c78:	str	r3, [r1, #4]!
   21c7c:	ldr	r3, [r4, #28]
   21c80:	cmp	r3, r2
   21c84:	bgt	21c6c <__assert_fail@plt+0x102cc>
   21c88:	ldr	r1, [r4, #48]	; 0x30
   21c8c:	ldr	r0, [r4, #56]	; 0x38
   21c90:	ldrb	r3, [r4, #75]	; 0x4b
   21c94:	sub	r1, r1, r5
   21c98:	ldr	r2, [r4, #80]	; 0x50
   21c9c:	sub	r0, r0, r5
   21ca0:	b	21718 <__assert_fail@plt+0xfd78>
   21ca4:	mov	r0, r4
   21ca8:	bl	1d8ac <__assert_fail@plt+0xbf0c>
   21cac:	b	21754 <__assert_fail@plt+0xfdb4>
   21cb0:	strd	sl, [sp, #4]
   21cb4:	ldr	r1, [sp, #8]
   21cb8:	ldr	r2, [r4, #48]	; 0x30
   21cbc:	ldr	r3, [r4, #64]	; 0x40
   21cc0:	add	r2, r1, r2
   21cc4:	ldr	r1, [sp, #4]
   21cc8:	cmp	r3, #0
   21ccc:	sub	r2, r2, r1
   21cd0:	ldreq	r1, [sp, #4]
   21cd4:	bne	21e1c <__assert_fail@plt+0x1047c>
   21cd8:	mov	sl, #0
   21cdc:	mov	fp, #0
   21ce0:	add	r3, sp, #32
   21ce4:	add	r0, sp, #20
   21ce8:	strd	sl, [sp, #32]
   21cec:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   21cf0:	ldr	r3, [sp, #8]
   21cf4:	add	r9, r3, r5
   21cf8:	ldr	r3, [sp, #4]
   21cfc:	sub	r9, r9, r3
   21d00:	cmp	r0, r9
   21d04:	bcc	21d10 <__assert_fail@plt+0x10370>
   21d08:	cmn	r0, #3
   21d0c:	bls	21d1c <__assert_fail@plt+0x1037c>
   21d10:	ldr	r9, [r4, #24]
   21d14:	ldr	r3, [r4, #32]
   21d18:	b	218cc <__assert_fail@plt+0xff2c>
   21d1c:	ldr	r1, [sp, #20]
   21d20:	sub	r9, r0, r9
   21d24:	mov	r2, #0
   21d28:	mov	r3, #0
   21d2c:	strd	r2, [r4, #16]
   21d30:	str	r9, [r4, #28]
   21d34:	cmn	r1, #1
   21d38:	bne	21950 <__assert_fail@plt+0xffb0>
   21d3c:	b	21d10 <__assert_fail@plt+0x10370>
   21d40:	ldr	r1, [r4, #44]	; 0x2c
   21d44:	mov	r0, #0
   21d48:	ldr	r2, [r4, #52]	; 0x34
   21d4c:	strb	r0, [r4, #76]	; 0x4c
   21d50:	sub	r1, r1, r7
   21d54:	add	r1, r1, r5
   21d58:	sub	r2, r2, r7
   21d5c:	add	r2, r2, r5
   21d60:	str	r1, [r4, #48]	; 0x30
   21d64:	str	r2, [r4, #56]	; 0x38
   21d68:	b	21838 <__assert_fail@plt+0xfe98>
   21d6c:	mov	r1, #0
   21d70:	cmp	r5, r1
   21d74:	cmpne	r0, r1
   21d78:	mov	r0, #1
   21d7c:	ldrne	r3, [r4]
   21d80:	ldrbne	r1, [r3, r9]
   21d84:	ldrd	r2, [sp, #32]
   21d88:	strd	r2, [fp]
   21d8c:	b	21924 <__assert_fail@plt+0xff84>
   21d90:	ble	21db8 <__assert_fail@plt+0x10418>
   21d94:	ldr	r2, [r4, #8]
   21d98:	mov	r3, #0
   21d9c:	mvn	r1, #0
   21da0:	sub	r2, r2, #4
   21da4:	str	r1, [r2, #4]!
   21da8:	add	r3, r3, #1
   21dac:	ldr	r9, [r4, #28]
   21db0:	cmp	r9, r3
   21db4:	bgt	21da4 <__assert_fail@plt+0x10404>
   21db8:	ldrb	r3, [r4, #75]	; 0x4b
   21dbc:	cmp	r3, #0
   21dc0:	bne	21e04 <__assert_fail@plt+0x10464>
   21dc4:	ldr	r9, [r4, #28]
   21dc8:	b	21988 <__assert_fail@plt+0xffe8>
   21dcc:	mov	r0, r1
   21dd0:	str	r1, [sp, #4]
   21dd4:	bl	117e4 <iswalnum@plt>
   21dd8:	ldr	r1, [sp, #4]
   21ddc:	subs	r3, r1, #95	; 0x5f
   21de0:	movne	r3, #1
   21de4:	cmp	r0, #0
   21de8:	movne	r3, #0
   21dec:	cmp	r3, #0
   21df0:	moveq	r3, #1
   21df4:	beq	21978 <__assert_fail@plt+0xffd8>
   21df8:	b	2195c <__assert_fail@plt+0xffbc>
   21dfc:	mov	r1, r3
   21e00:	b	21814 <__assert_fail@plt+0xfe74>
   21e04:	mov	r2, r9
   21e08:	mov	r1, #255	; 0xff
   21e0c:	ldr	r0, [r4, #4]
   21e10:	bl	11814 <memset@plt>
   21e14:	ldrb	r3, [r4, #75]	; 0x4b
   21e18:	b	21dc4 <__assert_fail@plt+0x10424>
   21e1c:	cmp	r2, #6
   21e20:	movlt	r1, r2
   21e24:	movge	r1, #6
   21e28:	cmp	r2, #0
   21e2c:	ble	21e6c <__assert_fail@plt+0x104cc>
   21e30:	ldrd	sl, [sp, #4]
   21e34:	add	r0, sp, #24
   21e38:	mov	ip, r0
   21e3c:	mov	lr, r0
   21e40:	sub	r0, r1, #1
   21e44:	add	r0, ip, r0
   21e48:	add	r1, sl, r1
   21e4c:	ldrb	ip, [r1, #-1]!
   21e50:	ldrb	ip, [r3, ip]
   21e54:	cmp	sl, r1
   21e58:	strb	ip, [r0], #-1
   21e5c:	bne	21e4c <__assert_fail@plt+0x104ac>
   21e60:	strd	sl, [sp, #4]
   21e64:	mov	r1, lr
   21e68:	b	21cd8 <__assert_fail@plt+0x10338>
   21e6c:	add	r3, sp, #24
   21e70:	mov	lr, r3
   21e74:	b	21e64 <__assert_fail@plt+0x104c4>
   21e78:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21e7c:	strd	r6, [sp, #8]
   21e80:	strd	sl, [sp, #24]
   21e84:	ldr	fp, [r1]
   21e88:	strd	r8, [sp, #16]
   21e8c:	str	lr, [sp, #32]
   21e90:	sub	sp, sp, #12
   21e94:	ldr	r6, [r0, #84]	; 0x54
   21e98:	cmp	fp, #0
   21e9c:	ble	21f58 <__assert_fail@plt+0x105b8>
   21ea0:	mov	r8, r3
   21ea4:	mov	r9, r2
   21ea8:	mov	sl, r0
   21eac:	mov	r7, r1
   21eb0:	mov	r4, #0
   21eb4:	b	21ec0 <__assert_fail@plt+0x10520>
   21eb8:	cmp	r4, fp
   21ebc:	bge	21f58 <__assert_fail@plt+0x105b8>
   21ec0:	ldr	r3, [r9]
   21ec4:	ldr	ip, [r6]
   21ec8:	ldr	r5, [r3, r4, lsl #2]
   21ecc:	add	r4, r4, #1
   21ed0:	add	lr, ip, r5, lsl #3
   21ed4:	ldrb	lr, [lr, #4]
   21ed8:	cmp	lr, #8
   21edc:	bne	21eb8 <__assert_fail@plt+0x10518>
   21ee0:	ldr	r3, [ip, r5, lsl #3]
   21ee4:	cmp	r3, #31
   21ee8:	bgt	21eb8 <__assert_fail@plt+0x10518>
   21eec:	ldr	r2, [r6, #80]	; 0x50
   21ef0:	lsr	r3, r2, r3
   21ef4:	tst	r3, #1
   21ef8:	beq	21eb8 <__assert_fail@plt+0x10518>
   21efc:	ldr	fp, [sl, #124]	; 0x7c
   21f00:	ldr	r3, [sl, #128]	; 0x80
   21f04:	ldr	r2, [sl, #132]	; 0x84
   21f08:	cmp	r3, fp
   21f0c:	beq	21f80 <__assert_fail@plt+0x105e0>
   21f10:	mov	r1, #24
   21f14:	mov	r0, #1
   21f18:	str	r2, [sp, #4]
   21f1c:	bl	1c478 <__assert_fail@plt+0xaad8>
   21f20:	ldr	r2, [sp, #4]
   21f24:	ldr	r3, [sl, #124]	; 0x7c
   21f28:	str	r0, [r2, fp, lsl #2]
   21f2c:	ldr	r2, [sl, #132]	; 0x84
   21f30:	add	r1, r3, #1
   21f34:	ldr	r3, [r2, r3, lsl #2]
   21f38:	cmp	r3, #0
   21f3c:	beq	21f78 <__assert_fail@plt+0x105d8>
   21f40:	str	r5, [r3, #4]
   21f44:	str	r1, [sl, #124]	; 0x7c
   21f48:	str	r8, [r3]
   21f4c:	ldr	fp, [r7]
   21f50:	cmp	r4, fp
   21f54:	blt	21ec0 <__assert_fail@plt+0x10520>
   21f58:	mov	r0, #0
   21f5c:	add	sp, sp, #12
   21f60:	ldrd	r4, [sp]
   21f64:	ldrd	r6, [sp, #8]
   21f68:	ldrd	r8, [sp, #16]
   21f6c:	ldrd	sl, [sp, #24]
   21f70:	add	sp, sp, #32
   21f74:	pop	{pc}		; (ldr pc, [sp], #4)
   21f78:	mov	r0, #12
   21f7c:	b	21f5c <__assert_fail@plt+0x105bc>
   21f80:	mov	r0, r2
   21f84:	lsl	r1, fp, #3
   21f88:	bl	1c910 <__assert_fail@plt+0xaf70>
   21f8c:	subs	r2, r0, #0
   21f90:	lsl	r3, fp, #1
   21f94:	beq	21f78 <__assert_fail@plt+0x105d8>
   21f98:	str	r3, [sl, #128]	; 0x80
   21f9c:	str	r2, [sl, #132]	; 0x84
   21fa0:	ldr	fp, [sl, #124]	; 0x7c
   21fa4:	b	21f10 <__assert_fail@plt+0x10570>
   21fa8:	strd	r4, [sp, #-16]!
   21fac:	mov	r5, r0
   21fb0:	mov	r0, r1
   21fb4:	mov	r4, r1
   21fb8:	str	r6, [sp, #8]
   21fbc:	str	lr, [sp, #12]
   21fc0:	bl	117a8 <strlen@plt>
   21fc4:	cmp	r0, #1
   21fc8:	bne	21ffc <__assert_fail@plt+0x1065c>
   21fcc:	ldrb	r3, [r4]
   21fd0:	mov	ip, #0
   21fd4:	asr	r1, r3, #5
   21fd8:	and	r3, r3, #31
   21fdc:	ldr	r2, [r5, r1, lsl #2]
   21fe0:	orr	r3, r2, r0, lsl r3
   21fe4:	str	r3, [r5, r1, lsl #2]
   21fe8:	ldrd	r4, [sp]
   21fec:	mov	r0, ip
   21ff0:	ldr	r6, [sp, #8]
   21ff4:	add	sp, sp, #12
   21ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   21ffc:	mov	ip, #3
   22000:	b	21fe8 <__assert_fail@plt+0x10648>
   22004:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22008:	mov	r5, r1
   2200c:	strd	r6, [sp, #8]
   22010:	mov	r6, r0
   22014:	strd	r8, [sp, #16]
   22018:	mov	r8, r3
   2201c:	strd	sl, [sp, #24]
   22020:	mov	sl, r2
   22024:	str	lr, [sp, #32]
   22028:	sub	sp, sp, #4
   2202c:	ldr	r9, [sp, #40]	; 0x28
   22030:	ldr	ip, [sp, #48]	; 0x30
   22034:	ldr	r7, [sp, #44]	; 0x2c
   22038:	tst	ip, #4194304	; 0x400000
   2203c:	beq	22060 <__assert_fail@plt+0x106c0>
   22040:	mov	r0, r7
   22044:	movw	r1, #58744	; 0xe578
   22048:	movt	r1, #2
   2204c:	bl	11544 <strcmp@plt>
   22050:	cmp	r0, #0
   22054:	movweq	r7, #58736	; 0xe570
   22058:	movteq	r7, #2
   2205c:	bne	22164 <__assert_fail@plt+0x107c4>
   22060:	ldr	r4, [r8]
   22064:	ldr	r3, [r9]
   22068:	ldr	fp, [sl]
   2206c:	cmp	r3, r4
   22070:	beq	22248 <__assert_fail@plt+0x108a8>
   22074:	add	r3, r4, #1
   22078:	mov	r0, r7
   2207c:	str	r3, [r8]
   22080:	bl	11514 <wctype@plt>
   22084:	movw	r1, #58760	; 0xe588
   22088:	movt	r1, #2
   2208c:	str	r0, [fp, r4, lsl #2]
   22090:	mov	r0, r7
   22094:	bl	11544 <strcmp@plt>
   22098:	subs	r4, r0, #0
   2209c:	beq	2211c <__assert_fail@plt+0x1077c>
   220a0:	movw	r1, #58768	; 0xe590
   220a4:	movt	r1, #2
   220a8:	mov	r0, r7
   220ac:	bl	11544 <strcmp@plt>
   220b0:	subs	r4, r0, #0
   220b4:	bne	22188 <__assert_fail@plt+0x107e8>
   220b8:	bl	11778 <__ctype_b_loc@plt>
   220bc:	ldr	r3, [r0]
   220c0:	cmp	r6, #0
   220c4:	moveq	ip, #1
   220c8:	sub	r3, r3, #2
   220cc:	bne	22370 <__assert_fail@plt+0x109d0>
   220d0:	ldrh	r2, [r3, #2]!
   220d4:	asr	r1, r4, #5
   220d8:	and	r0, r4, #31
   220dc:	add	r4, r4, #1
   220e0:	tst	r2, #2
   220e4:	beq	220f4 <__assert_fail@plt+0x10754>
   220e8:	ldr	r2, [r5, r1, lsl #2]
   220ec:	orr	r2, r2, ip, lsl r0
   220f0:	str	r2, [r5, r1, lsl #2]
   220f4:	cmp	r4, #256	; 0x100
   220f8:	bne	220d0 <__assert_fail@plt+0x10730>
   220fc:	mov	r0, #0
   22100:	add	sp, sp, #4
   22104:	ldrd	r4, [sp]
   22108:	ldrd	r6, [sp, #8]
   2210c:	ldrd	r8, [sp, #16]
   22110:	ldrd	sl, [sp, #24]
   22114:	add	sp, sp, #32
   22118:	pop	{pc}		; (ldr pc, [sp], #4)
   2211c:	bl	11778 <__ctype_b_loc@plt>
   22120:	ldr	r3, [r0]
   22124:	cmp	r6, #0
   22128:	moveq	lr, #1
   2212c:	sub	r3, r3, #2
   22130:	bne	22334 <__assert_fail@plt+0x10994>
   22134:	ldrh	r0, [r3, #2]!
   22138:	asr	r2, r4, #5
   2213c:	and	ip, r4, #31
   22140:	add	r4, r4, #1
   22144:	tst	r0, #8
   22148:	beq	22158 <__assert_fail@plt+0x107b8>
   2214c:	ldr	r1, [r5, r2, lsl #2]
   22150:	orr	r1, r1, lr, lsl ip
   22154:	str	r1, [r5, r2, lsl #2]
   22158:	cmp	r4, #256	; 0x100
   2215c:	bne	22134 <__assert_fail@plt+0x10794>
   22160:	b	220fc <__assert_fail@plt+0x1075c>
   22164:	mov	r0, r7
   22168:	movw	r1, #58752	; 0xe580
   2216c:	movt	r1, #2
   22170:	bl	11544 <strcmp@plt>
   22174:	cmp	r0, #0
   22178:	movw	r3, #58736	; 0xe570
   2217c:	movt	r3, #2
   22180:	moveq	r7, r3
   22184:	b	22060 <__assert_fail@plt+0x106c0>
   22188:	movw	r1, #58752	; 0xe580
   2218c:	movt	r1, #2
   22190:	mov	r0, r7
   22194:	bl	11544 <strcmp@plt>
   22198:	subs	r4, r0, #0
   2219c:	beq	22200 <__assert_fail@plt+0x10860>
   221a0:	movw	r1, #58776	; 0xe598
   221a4:	movt	r1, #2
   221a8:	mov	r0, r7
   221ac:	bl	11544 <strcmp@plt>
   221b0:	subs	r4, r0, #0
   221b4:	bne	22274 <__assert_fail@plt+0x108d4>
   221b8:	bl	11778 <__ctype_b_loc@plt>
   221bc:	ldr	r3, [r0]
   221c0:	cmp	r6, #0
   221c4:	moveq	ip, #1
   221c8:	sub	r3, r3, #2
   221cc:	bne	2254c <__assert_fail@plt+0x10bac>
   221d0:	ldrh	r2, [r3, #2]!
   221d4:	asr	r1, r4, #5
   221d8:	and	r0, r4, #31
   221dc:	add	r4, r4, #1
   221e0:	tst	r2, #8192	; 0x2000
   221e4:	beq	221f4 <__assert_fail@plt+0x10854>
   221e8:	ldr	r2, [r5, r1, lsl #2]
   221ec:	orr	r2, r2, ip, lsl r0
   221f0:	str	r2, [r5, r1, lsl #2]
   221f4:	cmp	r4, #256	; 0x100
   221f8:	bne	221d0 <__assert_fail@plt+0x10830>
   221fc:	b	220fc <__assert_fail@plt+0x1075c>
   22200:	bl	11778 <__ctype_b_loc@plt>
   22204:	ldr	r3, [r0]
   22208:	cmp	r6, #0
   2220c:	moveq	ip, #1
   22210:	sub	r3, r3, #2
   22214:	bne	223ac <__assert_fail@plt+0x10a0c>
   22218:	ldrh	r2, [r3, #2]!
   2221c:	asr	r1, r4, #5
   22220:	and	r0, r4, #31
   22224:	add	r4, r4, #1
   22228:	tst	r2, #512	; 0x200
   2222c:	beq	2223c <__assert_fail@plt+0x1089c>
   22230:	ldr	r2, [r5, r1, lsl #2]
   22234:	orr	r2, r2, ip, lsl r0
   22238:	str	r2, [r5, r1, lsl #2]
   2223c:	cmp	r4, #256	; 0x100
   22240:	bne	22218 <__assert_fail@plt+0x10878>
   22244:	b	220fc <__assert_fail@plt+0x1075c>
   22248:	lsl	r4, r4, #1
   2224c:	mov	r0, fp
   22250:	add	r4, r4, #1
   22254:	lsl	r1, r4, #2
   22258:	bl	1c910 <__assert_fail@plt+0xaf70>
   2225c:	subs	fp, r0, #0
   22260:	beq	224a8 <__assert_fail@plt+0x10b08>
   22264:	str	fp, [sl]
   22268:	str	r4, [r9]
   2226c:	ldr	r4, [r8]
   22270:	b	22074 <__assert_fail@plt+0x106d4>
   22274:	movw	r1, #58736	; 0xe570
   22278:	movt	r1, #2
   2227c:	mov	r0, r7
   22280:	bl	11544 <strcmp@plt>
   22284:	subs	r4, r0, #0
   22288:	beq	222ec <__assert_fail@plt+0x1094c>
   2228c:	movw	r1, #58784	; 0xe5a0
   22290:	movt	r1, #2
   22294:	mov	r0, r7
   22298:	bl	11544 <strcmp@plt>
   2229c:	subs	r4, r0, #0
   222a0:	bne	223e8 <__assert_fail@plt+0x10a48>
   222a4:	bl	11778 <__ctype_b_loc@plt>
   222a8:	ldr	r3, [r0]
   222ac:	cmp	r6, #0
   222b0:	moveq	ip, #1
   222b4:	sub	r3, r3, #2
   222b8:	bne	22588 <__assert_fail@plt+0x10be8>
   222bc:	ldrh	r1, [r3, #2]!
   222c0:	asr	r2, r4, #5
   222c4:	and	r0, r4, #31
   222c8:	add	r4, r4, #1
   222cc:	tst	r1, #2048	; 0x800
   222d0:	beq	222e0 <__assert_fail@plt+0x10940>
   222d4:	ldr	r1, [r5, r2, lsl #2]
   222d8:	orr	r1, r1, ip, lsl r0
   222dc:	str	r1, [r5, r2, lsl #2]
   222e0:	cmp	r4, #256	; 0x100
   222e4:	bne	222bc <__assert_fail@plt+0x1091c>
   222e8:	b	220fc <__assert_fail@plt+0x1075c>
   222ec:	bl	11778 <__ctype_b_loc@plt>
   222f0:	ldr	r3, [r0]
   222f4:	cmp	r6, #0
   222f8:	moveq	ip, #1
   222fc:	sub	r3, r3, #2
   22300:	bne	22510 <__assert_fail@plt+0x10b70>
   22304:	ldrh	r2, [r3, #2]!
   22308:	asr	r1, r4, #5
   2230c:	and	r0, r4, #31
   22310:	add	r4, r4, #1
   22314:	tst	r2, #1024	; 0x400
   22318:	beq	22328 <__assert_fail@plt+0x10988>
   2231c:	ldr	r2, [r5, r1, lsl #2]
   22320:	orr	r2, r2, ip, lsl r0
   22324:	str	r2, [r5, r1, lsl #2]
   22328:	cmp	r4, #256	; 0x100
   2232c:	bne	22304 <__assert_fail@plt+0x10964>
   22330:	b	220fc <__assert_fail@plt+0x1075c>
   22334:	add	ip, r6, #256	; 0x100
   22338:	mov	lr, #1
   2233c:	ldrh	r2, [r3, #2]!
   22340:	tst	r2, #8
   22344:	beq	22360 <__assert_fail@plt+0x109c0>
   22348:	ldrb	r2, [r6]
   2234c:	asr	r0, r2, #5
   22350:	and	r2, r2, #31
   22354:	ldr	r1, [r5, r0, lsl #2]
   22358:	orr	r2, r1, lr, lsl r2
   2235c:	str	r2, [r5, r0, lsl #2]
   22360:	add	r6, r6, #1
   22364:	cmp	ip, r6
   22368:	bne	2233c <__assert_fail@plt+0x1099c>
   2236c:	b	220fc <__assert_fail@plt+0x1075c>
   22370:	add	ip, r6, #256	; 0x100
   22374:	mov	lr, #1
   22378:	ldrh	r2, [r3, #2]!
   2237c:	tst	r2, #2
   22380:	beq	2239c <__assert_fail@plt+0x109fc>
   22384:	ldrb	r2, [r6]
   22388:	asr	r0, r2, #5
   2238c:	and	r2, r2, #31
   22390:	ldr	r1, [r5, r0, lsl #2]
   22394:	orr	r2, r1, lr, lsl r2
   22398:	str	r2, [r5, r0, lsl #2]
   2239c:	add	r6, r6, #1
   223a0:	cmp	ip, r6
   223a4:	bne	22378 <__assert_fail@plt+0x109d8>
   223a8:	b	220fc <__assert_fail@plt+0x1075c>
   223ac:	add	ip, r6, #256	; 0x100
   223b0:	mov	lr, #1
   223b4:	ldrh	r2, [r3, #2]!
   223b8:	tst	r2, #512	; 0x200
   223bc:	beq	223d8 <__assert_fail@plt+0x10a38>
   223c0:	ldrb	r2, [r6]
   223c4:	asr	r0, r2, #5
   223c8:	and	r2, r2, #31
   223cc:	ldr	r1, [r5, r0, lsl #2]
   223d0:	orr	r2, r1, lr, lsl r2
   223d4:	str	r2, [r5, r0, lsl #2]
   223d8:	add	r6, r6, #1
   223dc:	cmp	ip, r6
   223e0:	bne	223b4 <__assert_fail@plt+0x10a14>
   223e4:	b	220fc <__assert_fail@plt+0x1075c>
   223e8:	movw	r1, #55732	; 0xd9b4
   223ec:	movt	r1, #2
   223f0:	mov	r0, r7
   223f4:	bl	11544 <strcmp@plt>
   223f8:	subs	r4, r0, #0
   223fc:	bne	22448 <__assert_fail@plt+0x10aa8>
   22400:	bl	11778 <__ctype_b_loc@plt>
   22404:	ldr	r3, [r0]
   22408:	cmp	r6, #0
   2240c:	moveq	ip, #1
   22410:	sub	r3, r3, #2
   22414:	bne	22798 <__assert_fail@plt+0x10df8>
   22418:	ldrh	r2, [r3, #2]!
   2241c:	asr	r1, r4, #5
   22420:	and	r0, r4, #31
   22424:	add	r4, r4, #1
   22428:	tst	r2, #16384	; 0x4000
   2242c:	beq	2243c <__assert_fail@plt+0x10a9c>
   22430:	ldr	r2, [r5, r1, lsl #2]
   22434:	orr	r2, r2, ip, lsl r0
   22438:	str	r2, [r5, r1, lsl #2]
   2243c:	cmp	r4, #256	; 0x100
   22440:	bne	22418 <__assert_fail@plt+0x10a78>
   22444:	b	220fc <__assert_fail@plt+0x1075c>
   22448:	movw	r1, #58744	; 0xe578
   2244c:	movt	r1, #2
   22450:	mov	r0, r7
   22454:	bl	11544 <strcmp@plt>
   22458:	subs	r4, r0, #0
   2245c:	bne	224b0 <__assert_fail@plt+0x10b10>
   22460:	bl	11778 <__ctype_b_loc@plt>
   22464:	ldr	r3, [r0]
   22468:	cmp	r6, #0
   2246c:	moveq	ip, #1
   22470:	sub	r3, r3, #2
   22474:	bne	22810 <__assert_fail@plt+0x10e70>
   22478:	ldrh	r2, [r3, #2]!
   2247c:	asr	r1, r4, #5
   22480:	and	r0, r4, #31
   22484:	add	r4, r4, #1
   22488:	tst	r2, #256	; 0x100
   2248c:	beq	2249c <__assert_fail@plt+0x10afc>
   22490:	ldr	r2, [r5, r1, lsl #2]
   22494:	orr	r2, r2, ip, lsl r0
   22498:	str	r2, [r5, r1, lsl #2]
   2249c:	cmp	r4, #256	; 0x100
   224a0:	bne	22478 <__assert_fail@plt+0x10ad8>
   224a4:	b	220fc <__assert_fail@plt+0x1075c>
   224a8:	mov	r0, #12
   224ac:	b	22100 <__assert_fail@plt+0x10760>
   224b0:	movw	r1, #58792	; 0xe5a8
   224b4:	movt	r1, #2
   224b8:	mov	r0, r7
   224bc:	bl	11544 <strcmp@plt>
   224c0:	subs	r4, r0, #0
   224c4:	bne	225c4 <__assert_fail@plt+0x10c24>
   224c8:	bl	11778 <__ctype_b_loc@plt>
   224cc:	ldr	r3, [r0]
   224d0:	cmp	r6, #0
   224d4:	moveq	ip, #1
   224d8:	sub	r3, r3, #2
   224dc:	bne	227d4 <__assert_fail@plt+0x10e34>
   224e0:	ldrh	r2, [r3, #2]!
   224e4:	asr	r1, r4, #5
   224e8:	and	r0, r4, #31
   224ec:	add	r4, r4, #1
   224f0:	tst	r2, #1
   224f4:	beq	22504 <__assert_fail@plt+0x10b64>
   224f8:	ldr	r2, [r5, r1, lsl #2]
   224fc:	orr	r2, r2, ip, lsl r0
   22500:	str	r2, [r5, r1, lsl #2]
   22504:	cmp	r4, #256	; 0x100
   22508:	bne	224e0 <__assert_fail@plt+0x10b40>
   2250c:	b	220fc <__assert_fail@plt+0x1075c>
   22510:	add	ip, r6, #256	; 0x100
   22514:	mov	lr, #1
   22518:	ldrh	r2, [r3, #2]!
   2251c:	tst	r2, #1024	; 0x400
   22520:	beq	2253c <__assert_fail@plt+0x10b9c>
   22524:	ldrb	r2, [r6]
   22528:	asr	r0, r2, #5
   2252c:	and	r2, r2, #31
   22530:	ldr	r1, [r5, r0, lsl #2]
   22534:	orr	r2, r1, lr, lsl r2
   22538:	str	r2, [r5, r0, lsl #2]
   2253c:	add	r6, r6, #1
   22540:	cmp	ip, r6
   22544:	bne	22518 <__assert_fail@plt+0x10b78>
   22548:	b	220fc <__assert_fail@plt+0x1075c>
   2254c:	add	ip, r6, #256	; 0x100
   22550:	mov	lr, #1
   22554:	ldrh	r2, [r3, #2]!
   22558:	tst	r2, #8192	; 0x2000
   2255c:	beq	22578 <__assert_fail@plt+0x10bd8>
   22560:	ldrb	r2, [r6]
   22564:	asr	r0, r2, #5
   22568:	and	r2, r2, #31
   2256c:	ldr	r1, [r5, r0, lsl #2]
   22570:	orr	r2, r1, lr, lsl r2
   22574:	str	r2, [r5, r0, lsl #2]
   22578:	add	r6, r6, #1
   2257c:	cmp	r6, ip
   22580:	bne	22554 <__assert_fail@plt+0x10bb4>
   22584:	b	220fc <__assert_fail@plt+0x1075c>
   22588:	add	r1, r6, #256	; 0x100
   2258c:	mov	lr, #1
   22590:	ldrh	r2, [r3, #2]!
   22594:	tst	r2, #2048	; 0x800
   22598:	beq	225b4 <__assert_fail@plt+0x10c14>
   2259c:	ldrb	r2, [r6]
   225a0:	asr	ip, r2, #5
   225a4:	and	r2, r2, #31
   225a8:	ldr	r0, [r5, ip, lsl #2]
   225ac:	orr	r2, r0, lr, lsl r2
   225b0:	str	r2, [r5, ip, lsl #2]
   225b4:	add	r6, r6, #1
   225b8:	cmp	r1, r6
   225bc:	bne	22590 <__assert_fail@plt+0x10bf0>
   225c0:	b	220fc <__assert_fail@plt+0x1075c>
   225c4:	movw	r1, #58800	; 0xe5b0
   225c8:	movt	r1, #2
   225cc:	mov	r0, r7
   225d0:	bl	11544 <strcmp@plt>
   225d4:	subs	r4, r0, #0
   225d8:	bne	22660 <__assert_fail@plt+0x10cc0>
   225dc:	bl	11778 <__ctype_b_loc@plt>
   225e0:	ldr	r3, [r0]
   225e4:	cmp	r6, #0
   225e8:	moveq	r0, #1
   225ec:	sub	r3, r3, #2
   225f0:	bne	22624 <__assert_fail@plt+0x10c84>
   225f4:	ldrsh	r2, [r3, #2]!
   225f8:	asr	r1, r4, #5
   225fc:	and	ip, r4, #31
   22600:	add	r4, r4, #1
   22604:	cmp	r2, #0
   22608:	bge	22618 <__assert_fail@plt+0x10c78>
   2260c:	ldr	r2, [r5, r1, lsl #2]
   22610:	orr	r2, r2, r0, lsl ip
   22614:	str	r2, [r5, r1, lsl #2]
   22618:	cmp	r4, #256	; 0x100
   2261c:	bne	225f4 <__assert_fail@plt+0x10c54>
   22620:	b	220fc <__assert_fail@plt+0x1075c>
   22624:	add	lr, r6, #256	; 0x100
   22628:	mov	ip, #1
   2262c:	ldrsh	r2, [r3, #2]!
   22630:	cmp	r2, #0
   22634:	bge	22650 <__assert_fail@plt+0x10cb0>
   22638:	ldrb	r2, [r6]
   2263c:	asr	r0, r2, #5
   22640:	and	r2, r2, #31
   22644:	ldr	r1, [r5, r0, lsl #2]
   22648:	orr	r2, r1, ip, lsl r2
   2264c:	str	r2, [r5, r0, lsl #2]
   22650:	add	r6, r6, #1
   22654:	cmp	lr, r6
   22658:	bne	2262c <__assert_fail@plt+0x10c8c>
   2265c:	b	220fc <__assert_fail@plt+0x1075c>
   22660:	movw	r1, #58808	; 0xe5b8
   22664:	movt	r1, #2
   22668:	mov	r0, r7
   2266c:	bl	11544 <strcmp@plt>
   22670:	subs	r4, r0, #0
   22674:	bne	226fc <__assert_fail@plt+0x10d5c>
   22678:	bl	11778 <__ctype_b_loc@plt>
   2267c:	ldr	r3, [r0]
   22680:	cmp	r6, #0
   22684:	moveq	r0, #1
   22688:	sub	r3, r3, #2
   2268c:	bne	226c0 <__assert_fail@plt+0x10d20>
   22690:	ldrh	r2, [r3, #2]!
   22694:	asr	r1, r4, #5
   22698:	and	ip, r4, #31
   2269c:	add	r4, r4, #1
   226a0:	tst	r2, #4
   226a4:	beq	226b4 <__assert_fail@plt+0x10d14>
   226a8:	ldr	r2, [r5, r1, lsl #2]
   226ac:	orr	r2, r2, r0, lsl ip
   226b0:	str	r2, [r5, r1, lsl #2]
   226b4:	cmp	r4, #256	; 0x100
   226b8:	bne	22690 <__assert_fail@plt+0x10cf0>
   226bc:	b	220fc <__assert_fail@plt+0x1075c>
   226c0:	add	lr, r6, #256	; 0x100
   226c4:	mov	ip, #1
   226c8:	ldrh	r2, [r3, #2]!
   226cc:	tst	r2, #4
   226d0:	beq	226ec <__assert_fail@plt+0x10d4c>
   226d4:	ldrb	r2, [r6]
   226d8:	asr	r0, r2, #5
   226dc:	and	r2, r2, #31
   226e0:	ldr	r1, [r5, r0, lsl #2]
   226e4:	orr	r2, r1, ip, lsl r2
   226e8:	str	r2, [r5, r0, lsl #2]
   226ec:	add	r6, r6, #1
   226f0:	cmp	r6, lr
   226f4:	bne	226c8 <__assert_fail@plt+0x10d28>
   226f8:	b	220fc <__assert_fail@plt+0x1075c>
   226fc:	mov	r0, r7
   22700:	movw	r1, #58816	; 0xe5c0
   22704:	movt	r1, #2
   22708:	bl	11544 <strcmp@plt>
   2270c:	subs	r4, r0, #0
   22710:	movne	r0, #4
   22714:	bne	22100 <__assert_fail@plt+0x10760>
   22718:	bl	11778 <__ctype_b_loc@plt>
   2271c:	ldr	r3, [r0]
   22720:	cmp	r6, #0
   22724:	moveq	r0, #1
   22728:	sub	r3, r3, #2
   2272c:	bne	22760 <__assert_fail@plt+0x10dc0>
   22730:	ldrh	r2, [r3, #2]!
   22734:	asr	r1, r4, #5
   22738:	and	ip, r4, #31
   2273c:	add	r4, r4, #1
   22740:	tst	r2, #4096	; 0x1000
   22744:	beq	22754 <__assert_fail@plt+0x10db4>
   22748:	ldr	r2, [r5, r1, lsl #2]
   2274c:	orr	r2, r2, r0, lsl ip
   22750:	str	r2, [r5, r1, lsl #2]
   22754:	cmp	r4, #256	; 0x100
   22758:	bne	22730 <__assert_fail@plt+0x10d90>
   2275c:	b	220fc <__assert_fail@plt+0x1075c>
   22760:	mov	ip, #1
   22764:	ldrh	r2, [r3, #2]!
   22768:	tst	r2, #4096	; 0x1000
   2276c:	beq	22788 <__assert_fail@plt+0x10de8>
   22770:	ldrb	r2, [r6, r4]
   22774:	asr	r0, r2, #5
   22778:	and	r2, r2, #31
   2277c:	ldr	r1, [r5, r0, lsl #2]
   22780:	orr	r2, r1, ip, lsl r2
   22784:	str	r2, [r5, r0, lsl #2]
   22788:	add	r4, r4, #1
   2278c:	cmp	r4, #256	; 0x100
   22790:	bne	22764 <__assert_fail@plt+0x10dc4>
   22794:	b	220fc <__assert_fail@plt+0x1075c>
   22798:	add	lr, r6, #256	; 0x100
   2279c:	mov	ip, #1
   227a0:	ldrh	r2, [r3, #2]!
   227a4:	tst	r2, #16384	; 0x4000
   227a8:	beq	227c4 <__assert_fail@plt+0x10e24>
   227ac:	ldrb	r2, [r6]
   227b0:	asr	r0, r2, #5
   227b4:	and	r2, r2, #31
   227b8:	ldr	r1, [r5, r0, lsl #2]
   227bc:	orr	r2, r1, ip, lsl r2
   227c0:	str	r2, [r5, r0, lsl #2]
   227c4:	add	r6, r6, #1
   227c8:	cmp	lr, r6
   227cc:	bne	227a0 <__assert_fail@plt+0x10e00>
   227d0:	b	220fc <__assert_fail@plt+0x1075c>
   227d4:	add	lr, r6, #256	; 0x100
   227d8:	mov	ip, #1
   227dc:	ldrh	r2, [r3, #2]!
   227e0:	tst	r2, #1
   227e4:	beq	22800 <__assert_fail@plt+0x10e60>
   227e8:	ldrb	r2, [r6]
   227ec:	asr	r0, r2, #5
   227f0:	and	r2, r2, #31
   227f4:	ldr	r1, [r5, r0, lsl #2]
   227f8:	orr	r2, r1, ip, lsl r2
   227fc:	str	r2, [r5, r0, lsl #2]
   22800:	add	r6, r6, #1
   22804:	cmp	lr, r6
   22808:	bne	227dc <__assert_fail@plt+0x10e3c>
   2280c:	b	220fc <__assert_fail@plt+0x1075c>
   22810:	add	lr, r6, #256	; 0x100
   22814:	mov	ip, #1
   22818:	ldrh	r2, [r3, #2]!
   2281c:	tst	r2, #256	; 0x100
   22820:	beq	2283c <__assert_fail@plt+0x10e9c>
   22824:	ldrb	r2, [r6]
   22828:	asr	r0, r2, #5
   2282c:	and	r2, r2, #31
   22830:	ldr	r1, [r5, r0, lsl #2]
   22834:	orr	r2, r1, ip, lsl r2
   22838:	str	r2, [r5, r0, lsl #2]
   2283c:	add	r6, r6, #1
   22840:	cmp	r6, lr
   22844:	bne	22818 <__assert_fail@plt+0x10e78>
   22848:	b	220fc <__assert_fail@plt+0x1075c>
   2284c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22850:	mov	r5, r3
   22854:	strd	r6, [sp, #8]
   22858:	mov	r6, r0
   2285c:	mov	r0, #32
   22860:	strd	r8, [sp, #16]
   22864:	mov	r9, #0
   22868:	strd	sl, [sp, #24]
   2286c:	mov	fp, r1
   22870:	mov	r1, #1
   22874:	str	lr, [sp, #32]
   22878:	sub	sp, sp, #44	; 0x2c
   2287c:	mov	sl, r2
   22880:	ldrb	r8, [sp, #80]	; 0x50
   22884:	str	r9, [sp, #20]
   22888:	bl	1c478 <__assert_fail@plt+0xaad8>
   2288c:	subs	r4, r0, #0
   22890:	beq	22a68 <__assert_fail@plt+0x110c8>
   22894:	mov	r1, #1
   22898:	mov	r0, #40	; 0x28
   2289c:	bl	1c478 <__assert_fail@plt+0xaad8>
   228a0:	subs	r7, r0, #0
   228a4:	beq	22a7c <__assert_fail@plt+0x110dc>
   228a8:	ldrb	ip, [r7, #16]
   228ac:	add	lr, sp, #20
   228b0:	mov	r0, fp
   228b4:	add	r3, r7, #36	; 0x24
   228b8:	add	r2, r7, #12
   228bc:	mov	r1, r4
   228c0:	bfi	ip, r8, #0, #1
   228c4:	strb	ip, [r7, #16]
   228c8:	str	lr, [sp]
   228cc:	str	sl, [sp, #4]
   228d0:	str	r9, [sp, #8]
   228d4:	bl	22004 <__assert_fail@plt+0x10664>
   228d8:	subs	sl, r0, #0
   228dc:	bne	22a98 <__assert_fail@plt+0x110f8>
   228e0:	ldrb	r3, [r5]
   228e4:	cmp	r3, #0
   228e8:	beq	22910 <__assert_fail@plt+0x10f70>
   228ec:	mov	ip, #1
   228f0:	asr	r1, r3, #5
   228f4:	and	r0, r3, #31
   228f8:	ldrb	r3, [r5, #1]!
   228fc:	ldr	r2, [r4, r1, lsl #2]
   22900:	cmp	r3, #0
   22904:	orr	r2, r2, ip, lsl r0
   22908:	str	r2, [r4, r1, lsl #2]
   2290c:	bne	228f0 <__assert_fail@plt+0x10f50>
   22910:	cmp	r8, #0
   22914:	beq	22934 <__assert_fail@plt+0x10f94>
   22918:	sub	r3, r4, #4
   2291c:	add	r1, r4, #28
   22920:	ldr	r2, [r3, #4]!
   22924:	mvn	r2, r2
   22928:	cmp	r1, r3
   2292c:	str	r2, [r3]
   22930:	bne	22920 <__assert_fail@plt+0x10f80>
   22934:	ldr	r3, [r6, #92]	; 0x5c
   22938:	cmp	r3, #1
   2293c:	ble	22968 <__assert_fail@plt+0x10fc8>
   22940:	ldr	r1, [r6, #60]	; 0x3c
   22944:	sub	r3, r4, #4
   22948:	add	ip, r4, #28
   2294c:	sub	r1, r1, #4
   22950:	ldr	r2, [r3, #4]!
   22954:	ldr	r0, [r1, #4]!
   22958:	cmp	ip, r3
   2295c:	and	r2, r2, r0
   22960:	str	r2, [r3]
   22964:	bne	22950 <__assert_fail@plt+0x10fb0>
   22968:	add	fp, sp, #24
   2296c:	mov	r5, #0
   22970:	mov	ip, #3
   22974:	add	r9, r6, #56	; 0x38
   22978:	add	sl, r6, #64	; 0x40
   2297c:	mov	r3, r5
   22980:	str	fp, [sp]
   22984:	mov	r2, r5
   22988:	mov	r0, r9
   2298c:	strd	r4, [sp, #24]
   22990:	mov	r1, sl
   22994:	strb	ip, [sp, #28]
   22998:	bl	1ec24 <__assert_fail@plt+0xd284>
   2299c:	subs	r8, r0, #0
   229a0:	beq	22a44 <__assert_fail@plt+0x110a4>
   229a4:	ldr	r3, [r6, #92]	; 0x5c
   229a8:	cmp	r3, #1
   229ac:	ble	22a38 <__assert_fail@plt+0x11098>
   229b0:	ldrb	ip, [r6, #88]	; 0x58
   229b4:	mov	r0, #6
   229b8:	mov	r3, r5
   229bc:	mov	r2, r5
   229c0:	mov	r1, sl
   229c4:	str	fp, [sp]
   229c8:	str	r7, [sp, #24]
   229cc:	strb	r0, [sp, #28]
   229d0:	mov	r0, r9
   229d4:	orr	ip, ip, #2
   229d8:	strb	ip, [r6, #88]	; 0x58
   229dc:	bl	1ec24 <__assert_fail@plt+0xd284>
   229e0:	subs	r3, r0, #0
   229e4:	beq	22a44 <__assert_fail@plt+0x110a4>
   229e8:	add	ip, sp, #32
   229ec:	mov	r4, #0
   229f0:	mov	r5, #0
   229f4:	mov	r2, r8
   229f8:	str	ip, [sp]
   229fc:	mov	ip, #10
   22a00:	mov	r1, sl
   22a04:	mov	r0, r9
   22a08:	strd	r4, [sp, #32]
   22a0c:	strb	ip, [sp, #36]	; 0x24
   22a10:	bl	1ec24 <__assert_fail@plt+0xd284>
   22a14:	mov	r8, r0
   22a18:	mov	r0, r8
   22a1c:	add	sp, sp, #44	; 0x2c
   22a20:	ldrd	r4, [sp]
   22a24:	ldrd	r6, [sp, #8]
   22a28:	ldrd	r8, [sp, #16]
   22a2c:	ldrd	sl, [sp, #24]
   22a30:	add	sp, sp, #32
   22a34:	pop	{pc}		; (ldr pc, [sp], #4)
   22a38:	mov	r0, r7
   22a3c:	bl	1da74 <__assert_fail@plt+0xc0d4>
   22a40:	b	22a18 <__assert_fail@plt+0x11078>
   22a44:	mov	r0, r4
   22a48:	mov	r8, #0
   22a4c:	bl	1c734 <__assert_fail@plt+0xad94>
   22a50:	mov	r0, r7
   22a54:	bl	1da74 <__assert_fail@plt+0xc0d4>
   22a58:	ldr	r2, [sp, #84]	; 0x54
   22a5c:	mov	r3, #12
   22a60:	str	r3, [r2]
   22a64:	b	22a18 <__assert_fail@plt+0x11078>
   22a68:	ldr	r2, [sp, #84]	; 0x54
   22a6c:	mov	r3, #12
   22a70:	mov	r8, r4
   22a74:	str	r3, [r2]
   22a78:	b	22a18 <__assert_fail@plt+0x11078>
   22a7c:	mov	r0, r4
   22a80:	mov	r8, r7
   22a84:	bl	1c734 <__assert_fail@plt+0xad94>
   22a88:	ldr	r2, [sp, #84]	; 0x54
   22a8c:	mov	r3, #12
   22a90:	str	r3, [r2]
   22a94:	b	22a18 <__assert_fail@plt+0x11078>
   22a98:	mov	r0, r4
   22a9c:	mov	r8, r9
   22aa0:	bl	1c734 <__assert_fail@plt+0xad94>
   22aa4:	mov	r0, r7
   22aa8:	bl	1da74 <__assert_fail@plt+0xc0d4>
   22aac:	ldr	r3, [sp, #84]	; 0x54
   22ab0:	str	sl, [r3]
   22ab4:	b	22a18 <__assert_fail@plt+0x11078>
   22ab8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22abc:	strd	r6, [sp, #8]
   22ac0:	ldr	r6, [r0]
   22ac4:	strd	r8, [sp, #16]
   22ac8:	strd	sl, [sp, #24]
   22acc:	str	lr, [sp, #32]
   22ad0:	sub	sp, sp, #316	; 0x13c
   22ad4:	ldr	ip, [r6, #92]	; 0x5c
   22ad8:	cmp	ip, #1
   22adc:	ldr	ip, [r1]
   22ae0:	movne	r5, #0
   22ae4:	ldreq	r5, [r0, #12]
   22ae8:	ubfxeq	r5, r5, #22, #1
   22aec:	cmp	ip, #0
   22af0:	ble	22bdc <__assert_fail@plt+0x1123c>
   22af4:	mov	r4, r3
   22af8:	mov	r3, #255	; 0xff
   22afc:	movt	r3, #32
   22b00:	mov	r8, #0
   22b04:	str	r5, [sp, #4]
   22b08:	str	r2, [sp, #8]
   22b0c:	str	r4, [sp, #12]
   22b10:	str	r3, [sp, #32]
   22b14:	mov	r3, #1
   22b18:	movt	r3, #32
   22b1c:	str	r1, [sp, #20]
   22b20:	str	r0, [sp, #24]
   22b24:	str	r3, [sp, #36]	; 0x24
   22b28:	b	22b5c <__assert_fail@plt+0x111bc>
   22b2c:	cmp	r7, #3
   22b30:	beq	22d8c <__assert_fail@plt+0x113ec>
   22b34:	cmp	r7, #6
   22b38:	beq	22bf8 <__assert_fail@plt+0x11258>
   22b3c:	and	r3, r7, #253	; 0xfd
   22b40:	cmp	r3, #5
   22b44:	beq	22f44 <__assert_fail@plt+0x115a4>
   22b48:	cmp	r7, #2
   22b4c:	beq	22f64 <__assert_fail@plt+0x115c4>
   22b50:	add	r8, r8, #1
   22b54:	cmp	r8, ip
   22b58:	bge	22bdc <__assert_fail@plt+0x1123c>
   22b5c:	ldr	r3, [sp, #8]
   22b60:	ldr	r2, [r6]
   22b64:	ldr	r3, [r3]
   22b68:	ldr	r9, [r3, r8, lsl #2]
   22b6c:	lsl	r3, r9, #3
   22b70:	str	r3, [sp]
   22b74:	add	r3, r2, r3
   22b78:	ldrb	r7, [r3, #4]
   22b7c:	cmp	r7, #1
   22b80:	bne	22b2c <__assert_fail@plt+0x1118c>
   22b84:	ldr	r3, [sp, #4]
   22b88:	ldrb	fp, [r2, r9, lsl #3]
   22b8c:	ldr	r4, [sp, #12]
   22b90:	cmp	r3, #0
   22b94:	strb	r7, [r4, fp]
   22b98:	beq	22bac <__assert_fail@plt+0x1120c>
   22b9c:	bl	11748 <__ctype_tolower_loc@plt>
   22ba0:	ldr	r3, [r0]
   22ba4:	ldr	r3, [r3, fp, lsl #2]
   22ba8:	strb	r7, [r4, r3]
   22bac:	ldr	r3, [sp, #24]
   22bb0:	ldr	r3, [r3, #12]
   22bb4:	tst	r3, #4194304	; 0x400000
   22bb8:	beq	22bc8 <__assert_fail@plt+0x11228>
   22bbc:	ldr	r3, [r6, #92]	; 0x5c
   22bc0:	cmp	r3, #1
   22bc4:	bgt	22e44 <__assert_fail@plt+0x114a4>
   22bc8:	ldr	r3, [sp, #20]
   22bcc:	add	r8, r8, #1
   22bd0:	ldr	ip, [r3]
   22bd4:	cmp	r8, ip
   22bd8:	blt	22b5c <__assert_fail@plt+0x111bc>
   22bdc:	add	sp, sp, #316	; 0x13c
   22be0:	ldrd	r4, [sp]
   22be4:	ldrd	r6, [sp, #8]
   22be8:	ldrd	r8, [sp, #16]
   22bec:	ldrd	sl, [sp, #24]
   22bf0:	add	sp, sp, #32
   22bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   22bf8:	ldr	r2, [r6, #92]	; 0x5c
   22bfc:	ldr	fp, [r3]
   22c00:	cmp	r2, #1
   22c04:	ble	22c2c <__assert_fail@plt+0x1128c>
   22c08:	ldr	r2, [fp, #36]	; 0x24
   22c0c:	cmp	r2, #0
   22c10:	bne	22d28 <__assert_fail@plt+0x11388>
   22c14:	ldrb	r2, [fp, #16]
   22c18:	tst	r2, #1
   22c1c:	bne	22d28 <__assert_fail@plt+0x11388>
   22c20:	ldr	r2, [fp, #32]
   22c24:	cmp	r2, #0
   22c28:	bne	22d28 <__assert_fail@plt+0x11388>
   22c2c:	ldr	r2, [fp, #20]
   22c30:	cmp	r2, #0
   22c34:	ble	22b50 <__assert_fail@plt+0x111b0>
   22c38:	mov	r5, fp
   22c3c:	mov	r7, #0
   22c40:	str	r8, [sp, #16]
   22c44:	add	r9, sp, #56	; 0x38
   22c48:	add	sl, sp, #48	; 0x30
   22c4c:	ldr	r4, [sp, #12]
   22c50:	ldr	fp, [sp, #24]
   22c54:	b	22c64 <__assert_fail@plt+0x112c4>
   22c58:	ldr	r2, [r5, #20]
   22c5c:	cmp	r7, r2
   22c60:	bge	22d1c <__assert_fail@plt+0x1137c>
   22c64:	mov	r2, #0
   22c68:	mov	r3, #0
   22c6c:	lsl	r8, r7, #2
   22c70:	mov	r0, r9
   22c74:	strd	r2, [sl]
   22c78:	mov	r2, sl
   22c7c:	ldr	r1, [r5]
   22c80:	ldr	r1, [r1, r7, lsl #2]
   22c84:	add	r7, r7, #1
   22c88:	bl	1152c <wcrtomb@plt>
   22c8c:	cmn	r0, #1
   22c90:	beq	22cc8 <__assert_fail@plt+0x11328>
   22c94:	ldr	r3, [sp, #4]
   22c98:	ldrb	r2, [sp, #56]	; 0x38
   22c9c:	cmp	r3, #0
   22ca0:	mov	r3, #1
   22ca4:	str	r2, [sp]
   22ca8:	strb	r3, [r4, r2]
   22cac:	beq	22cc8 <__assert_fail@plt+0x11328>
   22cb0:	bl	11748 <__ctype_tolower_loc@plt>
   22cb4:	ldr	r1, [r0]
   22cb8:	mov	r3, #1
   22cbc:	ldr	r2, [sp]
   22cc0:	ldr	r2, [r1, r2, lsl #2]
   22cc4:	strb	r3, [r4, r2]
   22cc8:	ldr	r2, [fp, #12]
   22ccc:	tst	r2, #4194304	; 0x400000
   22cd0:	beq	22c58 <__assert_fail@plt+0x112b8>
   22cd4:	ldr	r2, [r6, #92]	; 0x5c
   22cd8:	cmp	r2, #1
   22cdc:	ble	22c58 <__assert_fail@plt+0x112b8>
   22ce0:	ldr	r2, [r5]
   22ce4:	ldr	r0, [r2, r8]
   22ce8:	bl	115f8 <towlower@plt>
   22cec:	mov	r1, r0
   22cf0:	mov	r2, sl
   22cf4:	mov	r0, r9
   22cf8:	bl	1152c <wcrtomb@plt>
   22cfc:	cmn	r0, #1
   22d00:	beq	22c58 <__assert_fail@plt+0x112b8>
   22d04:	ldrb	r2, [sp, #56]	; 0x38
   22d08:	mov	r3, #1
   22d0c:	strb	r3, [r4, r2]
   22d10:	ldr	r2, [r5, #20]
   22d14:	cmp	r7, r2
   22d18:	blt	22c64 <__assert_fail@plt+0x112c4>
   22d1c:	str	r4, [sp, #12]
   22d20:	ldr	r8, [sp, #16]
   22d24:	b	22bc8 <__assert_fail@plt+0x11228>
   22d28:	ldr	r5, [sp, #4]
   22d2c:	mov	r3, #0
   22d30:	add	r9, sp, #56	; 0x38
   22d34:	add	sl, sp, #48	; 0x30
   22d38:	mov	r7, #1
   22d3c:	ldr	r4, [sp, #12]
   22d40:	strb	r3, [sp, #48]	; 0x30
   22d44:	mov	r0, #0
   22d48:	mov	r1, #0
   22d4c:	mov	r3, r9
   22d50:	mov	r2, #1
   22d54:	strd	r0, [r9]
   22d58:	mov	r1, sl
   22d5c:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   22d60:	ldrb	r3, [sp, #48]	; 0x30
   22d64:	cmn	r0, #2
   22d68:	strbeq	r7, [r4, r3]
   22d6c:	add	r3, r3, #1
   22d70:	uxtb	r3, r3
   22d74:	cmp	r3, #0
   22d78:	strb	r3, [sp, #48]	; 0x30
   22d7c:	bne	22d44 <__assert_fail@plt+0x113a4>
   22d80:	str	r5, [sp, #4]
   22d84:	str	r4, [sp, #12]
   22d88:	b	22bc8 <__assert_fail@plt+0x11228>
   22d8c:	ldr	r4, [sp, #12]
   22d90:	mov	sl, #0
   22d94:	mov	r9, #32
   22d98:	str	r8, [sp, #28]
   22d9c:	mov	fp, #1
   22da0:	mov	r5, sl
   22da4:	ldr	r8, [sp, #4]
   22da8:	str	r6, [sp, #16]
   22dac:	ldr	r3, [sp]
   22db0:	sub	r7, r9, #32
   22db4:	ldr	r2, [r2, r3]
   22db8:	ldr	r6, [r2, sl]
   22dbc:	add	r3, r5, r7
   22dc0:	add	r2, r4, r7
   22dc4:	lsr	r3, r6, r3
   22dc8:	tst	r3, #1
   22dcc:	beq	22dfc <__assert_fail@plt+0x1145c>
   22dd0:	cmp	r8, #0
   22dd4:	add	r3, r7, #128	; 0x80
   22dd8:	strb	fp, [r4, r7]
   22ddc:	beq	22dfc <__assert_fail@plt+0x1145c>
   22de0:	cmp	r3, #384	; 0x180
   22de4:	bcs	22df8 <__assert_fail@plt+0x11458>
   22de8:	bl	11748 <__ctype_tolower_loc@plt>
   22dec:	ldr	r3, [r0]
   22df0:	ldr	r2, [r3, r7, lsl #2]
   22df4:	add	r2, r4, r2
   22df8:	strb	fp, [r2]
   22dfc:	add	r7, r7, #1
   22e00:	cmp	r9, r7
   22e04:	bne	22dbc <__assert_fail@plt+0x1141c>
   22e08:	add	r9, r9, #32
   22e0c:	add	sl, sl, #4
   22e10:	cmp	r9, #288	; 0x120
   22e14:	sub	r5, r5, #32
   22e18:	beq	22e28 <__assert_fail@plt+0x11488>
   22e1c:	ldr	r3, [sp, #16]
   22e20:	ldr	r2, [r3]
   22e24:	b	22dac <__assert_fail@plt+0x1140c>
   22e28:	str	r8, [sp, #4]
   22e2c:	ldr	r3, [sp, #20]
   22e30:	str	r4, [sp, #12]
   22e34:	ldr	r6, [sp, #16]
   22e38:	ldr	r8, [sp, #28]
   22e3c:	ldr	ip, [r3]
   22e40:	b	22b50 <__assert_fail@plt+0x111b0>
   22e44:	ldr	r3, [r6]
   22e48:	add	r2, r9, #1
   22e4c:	ldrb	r1, [r3, r9, lsl #3]
   22e50:	strb	r1, [sp, #56]	; 0x38
   22e54:	ldr	r1, [r6, #8]
   22e58:	cmp	r1, r2
   22e5c:	bls	22f8c <__assert_fail@plt+0x115ec>
   22e60:	ldr	r1, [sp]
   22e64:	ldr	r0, [sp, #32]
   22e68:	add	sl, r1, #8
   22e6c:	add	r3, r3, sl
   22e70:	ldr	r1, [r3, #4]
   22e74:	and	r1, r1, r0
   22e78:	ldr	r0, [sp, #36]	; 0x24
   22e7c:	cmp	r1, r0
   22e80:	bne	22f8c <__assert_fail@plt+0x115ec>
   22e84:	add	r7, sp, #57	; 0x39
   22e88:	ldr	r5, [sp, #4]
   22e8c:	ldr	r4, [sp, #12]
   22e90:	ldr	r0, [sp, #32]
   22e94:	ldr	ip, [sp, #36]	; 0x24
   22e98:	b	22eb4 <__assert_fail@plt+0x11514>
   22e9c:	ldr	r3, [r6]
   22ea0:	add	r3, r3, r2, lsl #3
   22ea4:	ldr	r1, [r3, #4]
   22ea8:	and	r1, r1, r0
   22eac:	cmp	r1, ip
   22eb0:	bne	22ecc <__assert_fail@plt+0x1152c>
   22eb4:	ldrb	r3, [r3]
   22eb8:	add	r2, r2, #1
   22ebc:	strb	r3, [r7], #1
   22ec0:	ldr	r3, [r6, #8]
   22ec4:	cmp	r3, r2
   22ec8:	bhi	22e9c <__assert_fail@plt+0x114fc>
   22ecc:	add	r9, sp, #56	; 0x38
   22ed0:	str	r5, [sp, #4]
   22ed4:	sub	r7, r7, r9
   22ed8:	str	r4, [sp, #12]
   22edc:	add	sl, sp, #48	; 0x30
   22ee0:	mov	r4, #0
   22ee4:	mov	r5, #0
   22ee8:	mov	r2, r7
   22eec:	mov	r3, sl
   22ef0:	mov	r1, r9
   22ef4:	add	r0, sp, #44	; 0x2c
   22ef8:	strd	r4, [sl]
   22efc:	bl	1c8a0 <__assert_fail@plt+0xaf00>
   22f00:	cmp	r0, r7
   22f04:	bne	22bc8 <__assert_fail@plt+0x11228>
   22f08:	ldr	r0, [sp, #44]	; 0x2c
   22f0c:	bl	115f8 <towlower@plt>
   22f10:	mov	r1, r0
   22f14:	mov	r2, sl
   22f18:	mov	r0, r9
   22f1c:	bl	1152c <wcrtomb@plt>
   22f20:	cmn	r0, #1
   22f24:	beq	22bc8 <__assert_fail@plt+0x11228>
   22f28:	ldrb	r3, [sp, #56]	; 0x38
   22f2c:	mov	r2, #1
   22f30:	ldr	r1, [sp, #12]
   22f34:	strb	r2, [r1, r3]
   22f38:	ldr	r3, [sp, #20]
   22f3c:	ldr	ip, [r3]
   22f40:	b	22b50 <__assert_fail@plt+0x111b0>
   22f44:	ldr	r4, [sp, #12]
   22f48:	mov	r2, #256	; 0x100
   22f4c:	mov	r1, #1
   22f50:	mov	r0, r4
   22f54:	bl	11814 <memset@plt>
   22f58:	cmp	r7, #2
   22f5c:	bne	22bdc <__assert_fail@plt+0x1123c>
   22f60:	b	22f78 <__assert_fail@plt+0x115d8>
   22f64:	ldr	r4, [sp, #12]
   22f68:	mov	r2, #256	; 0x100
   22f6c:	mov	r1, #1
   22f70:	mov	r0, r4
   22f74:	bl	11814 <memset@plt>
   22f78:	ldr	r2, [sp, #24]
   22f7c:	ldrb	r3, [r2, #28]
   22f80:	orr	r3, r3, #1
   22f84:	strb	r3, [r2, #28]
   22f88:	b	22bdc <__assert_fail@plt+0x1123c>
   22f8c:	add	r9, sp, #56	; 0x38
   22f90:	b	22edc <__assert_fail@plt+0x1153c>
   22f94:	add	ip, r0, r2, lsl #3
   22f98:	strd	r4, [sp, #-32]!	; 0xffffffe0
   22f9c:	strd	r6, [sp, #8]
   22fa0:	str	sl, [sp, #24]
   22fa4:	ldrb	sl, [ip, #4]
   22fa8:	strd	r8, [sp, #16]
   22fac:	str	lr, [sp, #28]
   22fb0:	cmp	sl, #7
   22fb4:	beq	23120 <__assert_fail@plt+0x11780>
   22fb8:	ldr	ip, [r3, #80]	; 0x50
   22fbc:	cmp	ip, #1
   22fc0:	beq	23008 <__assert_fail@plt+0x11668>
   22fc4:	mov	r9, r1
   22fc8:	mov	r5, r0
   22fcc:	ldr	r1, [sp, #32]
   22fd0:	mov	r0, r3
   22fd4:	mov	r8, r3
   22fd8:	mov	r6, r2
   22fdc:	bl	1e644 <__assert_fail@plt+0xcca4>
   22fe0:	cmp	sl, #5
   22fe4:	mov	r7, r0
   22fe8:	beq	23028 <__assert_fail@plt+0x11688>
   22fec:	sub	r4, sl, #6
   22ff0:	cmp	r0, #1
   22ff4:	clz	r4, r4
   22ff8:	lsr	r4, r4, #5
   22ffc:	movle	r4, #0
   23000:	cmp	r4, #0
   23004:	bne	23070 <__assert_fail@plt+0x116d0>
   23008:	mov	r7, #0
   2300c:	mov	r0, r7
   23010:	ldrd	r4, [sp]
   23014:	ldrd	r6, [sp, #8]
   23018:	ldrd	r8, [sp, #16]
   2301c:	ldr	sl, [sp, #24]
   23020:	add	sp, sp, #28
   23024:	pop	{pc}		; (ldr pc, [sp], #4)
   23028:	cmp	r0, #1
   2302c:	ble	23008 <__assert_fail@plt+0x11668>
   23030:	ldr	r3, [r9]
   23034:	tst	r3, #64	; 0x40
   23038:	bne	23050 <__assert_fail@plt+0x116b0>
   2303c:	ldr	r2, [r8, #4]
   23040:	ldr	r1, [sp, #32]
   23044:	ldrb	r2, [r2, r1]
   23048:	cmp	r2, #10
   2304c:	beq	23008 <__assert_fail@plt+0x11668>
   23050:	tst	r3, #128	; 0x80
   23054:	beq	2300c <__assert_fail@plt+0x1166c>
   23058:	ldr	r3, [r8, #4]
   2305c:	ldr	r2, [sp, #32]
   23060:	ldrb	r3, [r3, r2]
   23064:	cmp	r3, #0
   23068:	beq	23008 <__assert_fail@plt+0x11668>
   2306c:	b	2300c <__assert_fail@plt+0x1166c>
   23070:	ldr	r6, [r5, r6, lsl #3]
   23074:	ldr	r0, [r6, #20]
   23078:	ldr	ip, [r6, #32]
   2307c:	cmp	ip, #0
   23080:	bne	23090 <__assert_fail@plt+0x116f0>
   23084:	ldr	r3, [r6, #36]	; 0x24
   23088:	orrs	r3, r0, r3
   2308c:	beq	231f4 <__assert_fail@plt+0x11854>
   23090:	ldr	r3, [r8, #8]
   23094:	cmp	r0, #0
   23098:	ldr	r2, [sp, #32]
   2309c:	ldr	r4, [r3, r2, lsl #2]
   230a0:	ble	230d4 <__assert_fail@plt+0x11734>
   230a4:	ldr	r2, [r6]
   230a8:	ldr	r3, [r2]
   230ac:	cmp	r4, r3
   230b0:	beq	23110 <__assert_fail@plt+0x11770>
   230b4:	mov	r3, #0
   230b8:	b	230c8 <__assert_fail@plt+0x11728>
   230bc:	ldr	r1, [r2, #4]!
   230c0:	cmp	r4, r1
   230c4:	beq	23110 <__assert_fail@plt+0x11770>
   230c8:	add	r3, r3, #1
   230cc:	cmp	r0, r3
   230d0:	bne	230bc <__assert_fail@plt+0x1171c>
   230d4:	ldr	r3, [r6, #36]	; 0x24
   230d8:	cmp	r3, #0
   230dc:	ble	231b8 <__assert_fail@plt+0x11818>
   230e0:	mov	r5, #0
   230e4:	b	230f4 <__assert_fail@plt+0x11754>
   230e8:	ldr	r3, [r6, #36]	; 0x24
   230ec:	cmp	r5, r3
   230f0:	bge	231b4 <__assert_fail@plt+0x11814>
   230f4:	ldr	r3, [r6, #12]
   230f8:	mov	r0, r4
   230fc:	ldr	r1, [r3, r5, lsl #2]
   23100:	add	r5, r5, #1
   23104:	bl	11538 <iswctype@plt>
   23108:	cmp	r0, #0
   2310c:	beq	230e8 <__assert_fail@plt+0x11748>
   23110:	ldrb	r3, [r6, #16]
   23114:	tst	r3, #1
   23118:	beq	2300c <__assert_fail@plt+0x1166c>
   2311c:	b	23008 <__assert_fail@plt+0x11668>
   23120:	ldr	r2, [r3, #4]
   23124:	ldr	r1, [sp, #32]
   23128:	ldr	r0, [sp, #32]
   2312c:	ldrb	r1, [r2, r1]
   23130:	add	r0, r2, r0
   23134:	cmp	r1, #193	; 0xc1
   23138:	bls	23008 <__assert_fail@plt+0x11668>
   2313c:	ldr	ip, [sp, #32]
   23140:	ldr	r3, [r3, #48]	; 0x30
   23144:	add	ip, ip, #1
   23148:	cmp	ip, r3
   2314c:	bge	23008 <__assert_fail@plt+0x11668>
   23150:	cmp	r1, #223	; 0xdf
   23154:	ldrb	ip, [r0, #1]
   23158:	bls	23220 <__assert_fail@plt+0x11880>
   2315c:	cmp	r1, #239	; 0xef
   23160:	bhi	23204 <__assert_fail@plt+0x11864>
   23164:	cmp	ip, #159	; 0x9f
   23168:	cmpls	r1, #224	; 0xe0
   2316c:	movne	r7, #3
   23170:	beq	23008 <__assert_fail@plt+0x11668>
   23174:	ldr	r1, [sp, #32]
   23178:	add	r1, r1, r7
   2317c:	cmp	r3, r1
   23180:	blt	23008 <__assert_fail@plt+0x11668>
   23184:	ldr	r3, [sp, #32]
   23188:	sub	r3, r3, #1
   2318c:	add	r3, r2, r3
   23190:	add	r3, r3, r7
   23194:	b	231a0 <__assert_fail@plt+0x11800>
   23198:	cmp	r3, r0
   2319c:	beq	2300c <__assert_fail@plt+0x1166c>
   231a0:	ldrb	r2, [r0, #1]!
   231a4:	eor	r2, r2, #128	; 0x80
   231a8:	cmp	r2, #63	; 0x3f
   231ac:	bls	23198 <__assert_fail@plt+0x117f8>
   231b0:	b	23008 <__assert_fail@plt+0x11668>
   231b4:	ldr	ip, [r6, #32]
   231b8:	cmp	ip, #0
   231bc:	ble	231f4 <__assert_fail@plt+0x11854>
   231c0:	ldr	r2, [r6, #4]
   231c4:	mov	r3, #0
   231c8:	sub	r2, r2, #4
   231cc:	ldr	r1, [r2, #4]!
   231d0:	cmp	r4, r1
   231d4:	bcc	231e8 <__assert_fail@plt+0x11848>
   231d8:	ldr	r1, [r6, #8]
   231dc:	ldr	r1, [r1, r3, lsl #2]
   231e0:	cmp	r4, r1
   231e4:	bls	23110 <__assert_fail@plt+0x11770>
   231e8:	add	r3, r3, #1
   231ec:	cmp	r3, ip
   231f0:	bne	231cc <__assert_fail@plt+0x1182c>
   231f4:	ldrb	r3, [r6, #16]
   231f8:	tst	r3, #1
   231fc:	bne	2300c <__assert_fail@plt+0x1166c>
   23200:	b	23008 <__assert_fail@plt+0x11668>
   23204:	cmp	r1, #247	; 0xf7
   23208:	bhi	23234 <__assert_fail@plt+0x11894>
   2320c:	cmp	ip, #143	; 0x8f
   23210:	cmpls	r1, #240	; 0xf0
   23214:	movne	r7, #4
   23218:	bne	23174 <__assert_fail@plt+0x117d4>
   2321c:	b	23008 <__assert_fail@plt+0x11668>
   23220:	eor	ip, ip, #128	; 0x80
   23224:	cmp	ip, #63	; 0x3f
   23228:	movls	r7, #2
   2322c:	bls	2300c <__assert_fail@plt+0x1166c>
   23230:	b	23008 <__assert_fail@plt+0x11668>
   23234:	cmp	r1, #251	; 0xfb
   23238:	bhi	23250 <__assert_fail@plt+0x118b0>
   2323c:	cmp	ip, #135	; 0x87
   23240:	cmpls	r1, #248	; 0xf8
   23244:	movne	r7, #5
   23248:	bne	23174 <__assert_fail@plt+0x117d4>
   2324c:	b	23008 <__assert_fail@plt+0x11668>
   23250:	cmp	r1, #253	; 0xfd
   23254:	bhi	23008 <__assert_fail@plt+0x11668>
   23258:	cmp	ip, #131	; 0x83
   2325c:	cmpls	r1, #252	; 0xfc
   23260:	beq	23008 <__assert_fail@plt+0x11668>
   23264:	mov	r7, #6
   23268:	b	23174 <__assert_fail@plt+0x117d4>
   2326c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23270:	mov	r5, r0
   23274:	ldr	r0, [r0, #84]	; 0x54
   23278:	ldr	r4, [r1, #4]
   2327c:	strd	r6, [sp, #8]
   23280:	mov	r7, r2
   23284:	mov	r6, #0
   23288:	strd	sl, [sp, #24]
   2328c:	mov	sl, r3
   23290:	ldr	r3, [r0]
   23294:	strd	r8, [sp, #16]
   23298:	str	lr, [sp, #32]
   2329c:	sub	sp, sp, #84	; 0x54
   232a0:	ldr	r2, [r5, #120]	; 0x78
   232a4:	str	r0, [sp, #20]
   232a8:	str	r1, [sp, #36]	; 0x24
   232ac:	ldr	r1, [sp, #124]	; 0x7c
   232b0:	ldr	r3, [r3, r7, lsl #3]
   232b4:	add	r2, r1, r2
   232b8:	cmp	r2, r4
   232bc:	str	r3, [sp, #28]
   232c0:	str	r6, [sp, #48]	; 0x30
   232c4:	bge	237b0 <__assert_fail@plt+0x11e10>
   232c8:	ldr	r3, [sp, #36]	; 0x24
   232cc:	ldr	r2, [r5, #88]	; 0x58
   232d0:	ldr	r4, [r3]
   232d4:	ldr	r8, [r3, #8]
   232d8:	ldr	r3, [r5, #40]	; 0x28
   232dc:	cmp	r4, #0
   232e0:	str	r3, [sp, #44]	; 0x2c
   232e4:	ldr	r3, [r5, #100]	; 0x64
   232e8:	str	r3, [sp, #40]	; 0x28
   232ec:	beq	2373c <__assert_fail@plt+0x11d9c>
   232f0:	sub	r1, r4, #1
   232f4:	mov	r0, r5
   232f8:	str	r4, [r5, #40]	; 0x28
   232fc:	str	r8, [r5, #100]	; 0x64
   23300:	bl	212d8 <__assert_fail@plt+0xf938>
   23304:	cmp	r4, sl
   23308:	mov	r6, r0
   2330c:	beq	23754 <__assert_fail@plt+0x11db4>
   23310:	ldr	sl, [r8, r4, lsl #2]
   23314:	cmp	sl, #0
   23318:	beq	23804 <__assert_fail@plt+0x11e64>
   2331c:	ldrb	r3, [sl, #52]	; 0x34
   23320:	ands	r3, r3, #64	; 0x40
   23324:	bne	23634 <__assert_fail@plt+0x11c94>
   23328:	add	r2, sp, #56	; 0x38
   2332c:	str	r2, [sp, #8]
   23330:	str	r3, [sp, #56]	; 0x38
   23334:	str	r3, [sp, #60]	; 0x3c
   23338:	str	r3, [sp, #64]	; 0x40
   2333c:	ldr	r3, [sp, #124]	; 0x7c
   23340:	cmp	r4, r3
   23344:	bge	235cc <__assert_fail@plt+0x11c2c>
   23348:	ldr	r3, [r5, #120]	; 0x78
   2334c:	cmp	r3, #0
   23350:	blt	235cc <__assert_fail@plt+0x11c2c>
   23354:	ldr	r3, [r5, #100]	; 0x64
   23358:	mov	r2, #0
   2335c:	add	fp, r4, #1
   23360:	str	r2, [sp, #12]
   23364:	ldr	r1, [r3, fp, lsl #2]
   23368:	lsl	r3, fp, #2
   2336c:	sub	r6, fp, #1
   23370:	str	r3, [sp, #16]
   23374:	mov	r3, #0
   23378:	cmp	r1, r3
   2337c:	str	r3, [sp, #60]	; 0x3c
   23380:	beq	236cc <__assert_fail@plt+0x11d2c>
   23384:	add	r1, r1, #4
   23388:	ldr	r0, [sp, #8]
   2338c:	bl	1ff5c <__assert_fail@plt+0xe5bc>
   23390:	cmp	r0, #0
   23394:	str	r0, [sp, #48]	; 0x30
   23398:	bne	236ec <__assert_fail@plt+0x11d4c>
   2339c:	cmp	sl, #0
   233a0:	beq	23514 <__assert_fail@plt+0x11b74>
   233a4:	ldr	r3, [sl, #20]
   233a8:	mov	r2, #0
   233ac:	str	r2, [sp, #52]	; 0x34
   233b0:	str	r2, [sp, #68]	; 0x44
   233b4:	str	r2, [sp, #72]	; 0x48
   233b8:	cmp	r3, r2
   233bc:	str	r2, [sp, #76]	; 0x4c
   233c0:	ldr	r7, [r5, #84]	; 0x54
   233c4:	ble	23854 <__assert_fail@plt+0x11eb4>
   233c8:	mov	r2, r7
   233cc:	mov	r8, #0
   233d0:	str	fp, [sp, #32]
   233d4:	ldr	r3, [sl, #24]
   233d8:	ldr	r0, [r2], #128	; 0x80
   233dc:	ldr	r4, [r3]
   233e0:	str	r2, [sp, #24]
   233e4:	lsl	r9, r4, #3
   233e8:	add	r3, r0, r9
   233ec:	b	23448 <__assert_fail@plt+0x11aa8>
   233f0:	add	r1, r0, r9
   233f4:	mov	r2, r6
   233f8:	mov	r0, r5
   233fc:	bl	213f0 <__assert_fail@plt+0xfa50>
   23400:	cmp	r0, #0
   23404:	beq	23424 <__assert_fail@plt+0x11a84>
   23408:	lsl	fp, r4, #2
   2340c:	ldr	r3, [r7, #12]
   23410:	ldr	r0, [sp, #8]
   23414:	ldr	r1, [r3, fp]
   23418:	bl	1e0cc <__assert_fail@plt+0xc72c>
   2341c:	cmp	r0, #0
   23420:	beq	236dc <__assert_fail@plt+0x11d3c>
   23424:	ldr	r3, [sl, #20]
   23428:	add	r8, r8, #1
   2342c:	cmp	r8, r3
   23430:	bge	236fc <__assert_fail@plt+0x11d5c>
   23434:	ldr	r3, [sl, #24]
   23438:	ldr	r0, [r7]
   2343c:	ldr	r4, [r3, r8, lsl #2]
   23440:	lsl	r9, r4, #3
   23444:	add	r3, r0, r9
   23448:	ldrb	r3, [r3, #6]
   2344c:	tst	r3, #16
   23450:	beq	233f0 <__assert_fail@plt+0x11a50>
   23454:	mov	r3, r5
   23458:	mov	r2, r4
   2345c:	str	r6, [sp]
   23460:	ldr	r1, [sp, #24]
   23464:	bl	22f94 <__assert_fail@plt+0x115f4>
   23468:	cmp	r0, #1
   2346c:	ble	236bc <__assert_fail@plt+0x11d1c>
   23470:	ldr	r2, [r5, #100]	; 0x64
   23474:	add	r9, r0, r6
   23478:	lsl	fp, r4, #2
   2347c:	ldr	r3, [r7, #12]
   23480:	ldr	r1, [r2, r9, lsl #2]
   23484:	ldr	r4, [r3, r4, lsl #2]
   23488:	mov	r3, #0
   2348c:	str	r3, [sp, #72]	; 0x48
   23490:	cmp	r1, r3
   23494:	beq	234b0 <__assert_fail@plt+0x11b10>
   23498:	add	r1, r1, #4
   2349c:	add	r0, sp, #68	; 0x44
   234a0:	bl	1ff5c <__assert_fail@plt+0xe5bc>
   234a4:	cmp	r0, #0
   234a8:	str	r0, [sp, #52]	; 0x34
   234ac:	bne	234f8 <__assert_fail@plt+0x11b58>
   234b0:	mov	r1, r4
   234b4:	add	r0, sp, #68	; 0x44
   234b8:	bl	1e0cc <__assert_fail@plt+0xc72c>
   234bc:	cmp	r0, #0
   234c0:	beq	236dc <__assert_fail@plt+0x11d3c>
   234c4:	add	r2, sp, #68	; 0x44
   234c8:	mov	r1, r7
   234cc:	ldr	r4, [r5, #100]	; 0x64
   234d0:	add	r0, sp, #52	; 0x34
   234d4:	bl	1f5bc <__assert_fail@plt+0xdc1c>
   234d8:	ldr	r3, [r5, #100]	; 0x64
   234dc:	str	r0, [r4, r9, lsl #2]
   234e0:	ldr	r3, [r3, r9, lsl #2]
   234e4:	cmp	r3, #0
   234e8:	bne	2340c <__assert_fail@plt+0x11a6c>
   234ec:	ldr	r3, [sp, #52]	; 0x34
   234f0:	cmp	r3, #0
   234f4:	beq	2340c <__assert_fail@plt+0x11a6c>
   234f8:	ldr	fp, [sp, #32]
   234fc:	ldr	r0, [sp, #76]	; 0x4c
   23500:	bl	1c734 <__assert_fail@plt+0xad94>
   23504:	ldr	r3, [sp, #52]	; 0x34
   23508:	cmp	r3, #0
   2350c:	str	r3, [sp, #48]	; 0x30
   23510:	bne	236ec <__assert_fail@plt+0x11d4c>
   23514:	ldr	r3, [sp, #60]	; 0x3c
   23518:	mov	r4, fp
   2351c:	cmp	r3, #0
   23520:	beq	2356c <__assert_fail@plt+0x11bcc>
   23524:	ldr	r1, [sp, #8]
   23528:	ldr	r0, [sp, #20]
   2352c:	ldr	r2, [sp, #28]
   23530:	ldr	r3, [sp, #128]	; 0x80
   23534:	bl	20358 <__assert_fail@plt+0xe9b8>
   23538:	cmp	r0, #0
   2353c:	str	r0, [sp, #48]	; 0x30
   23540:	bne	236ec <__assert_fail@plt+0x11d4c>
   23544:	mov	r2, fp
   23548:	mov	r0, r5
   2354c:	ldr	r3, [sp, #28]
   23550:	ldr	r1, [sp, #128]	; 0x80
   23554:	str	r1, [sp]
   23558:	ldr	r1, [sp, #8]
   2355c:	bl	204a8 <__assert_fail@plt+0xeb08>
   23560:	cmp	r0, #0
   23564:	str	r0, [sp, #48]	; 0x30
   23568:	bne	236ec <__assert_fail@plt+0x11d4c>
   2356c:	mov	r1, r6
   23570:	mov	r0, r5
   23574:	ldr	r2, [r5, #88]	; 0x58
   23578:	bl	212d8 <__assert_fail@plt+0xf938>
   2357c:	mov	r3, r0
   23580:	add	r0, sp, #48	; 0x30
   23584:	ldr	r2, [sp, #8]
   23588:	ldr	r1, [sp, #20]
   2358c:	bl	1f2d4 <__assert_fail@plt+0xd934>
   23590:	subs	sl, r0, #0
   23594:	beq	23714 <__assert_fail@plt+0x11d74>
   23598:	mov	r2, #0
   2359c:	ldr	r3, [r5, #100]	; 0x64
   235a0:	str	r2, [sp, #12]
   235a4:	ldr	r2, [sp, #16]
   235a8:	str	sl, [r3, r2]
   235ac:	ldr	r2, [sp, #124]	; 0x7c
   235b0:	cmp	r2, fp
   235b4:	ble	235cc <__assert_fail@plt+0x11c2c>
   235b8:	ldr	r1, [sp, #12]
   235bc:	add	fp, fp, #1
   235c0:	ldr	r2, [r5, #120]	; 0x78
   235c4:	cmp	r2, r1
   235c8:	bge	23364 <__assert_fail@plt+0x119c4>
   235cc:	ldr	r0, [sp, #64]	; 0x40
   235d0:	bl	1c734 <__assert_fail@plt+0xad94>
   235d4:	ldr	r3, [r5, #100]	; 0x64
   235d8:	ldr	r2, [sp, #124]	; 0x7c
   235dc:	ldr	r3, [r3, r2, lsl #2]
   235e0:	cmp	r3, #0
   235e4:	beq	23834 <__assert_fail@plt+0x11e94>
   235e8:	ldr	r2, [sp, #36]	; 0x24
   235ec:	add	r1, r3, #12
   235f0:	ldr	r0, [sp, #44]	; 0x2c
   235f4:	str	r4, [r2]
   235f8:	ldr	r2, [sp, #120]	; 0x78
   235fc:	str	r0, [r5, #40]	; 0x28
   23600:	ldr	r0, [sp, #40]	; 0x28
   23604:	str	r0, [r5, #100]	; 0x64
   23608:	ldr	r0, [r3, #8]
   2360c:	bl	1e6a0 <__assert_fail@plt+0xcd00>
   23610:	clz	r0, r0
   23614:	lsr	r0, r0, #5
   23618:	add	sp, sp, #84	; 0x54
   2361c:	ldrd	r4, [sp]
   23620:	ldrd	r6, [sp, #8]
   23624:	ldrd	r8, [sp, #16]
   23628:	ldrd	sl, [sp, #24]
   2362c:	add	sp, sp, #32
   23630:	pop	{pc}		; (ldr pc, [sp], #4)
   23634:	add	r3, sp, #56	; 0x38
   23638:	add	r1, sl, #4
   2363c:	mov	r0, r3
   23640:	str	r3, [sp, #8]
   23644:	bl	1f0e0 <__assert_fail@plt+0xd740>
   23648:	cmp	r0, #0
   2364c:	str	r0, [sp, #48]	; 0x30
   23650:	bne	23618 <__assert_fail@plt+0x11c78>
   23654:	ldrb	r3, [sl, #52]	; 0x34
   23658:	tst	r3, #64	; 0x40
   2365c:	beq	2333c <__assert_fail@plt+0x1199c>
   23660:	ldr	r3, [sp, #60]	; 0x3c
   23664:	cmp	r3, #0
   23668:	beq	23694 <__assert_fail@plt+0x11cf4>
   2366c:	mov	r2, r4
   23670:	mov	r0, r5
   23674:	ldr	r3, [sp, #28]
   23678:	ldr	r1, [sp, #128]	; 0x80
   2367c:	str	r1, [sp]
   23680:	ldr	r1, [sp, #8]
   23684:	bl	204a8 <__assert_fail@plt+0xeb08>
   23688:	cmp	r0, #0
   2368c:	str	r0, [sp, #48]	; 0x30
   23690:	bne	236ec <__assert_fail@plt+0x11d4c>
   23694:	mov	r3, r6
   23698:	add	r0, sp, #48	; 0x30
   2369c:	ldr	r2, [sp, #8]
   236a0:	ldr	r1, [sp, #20]
   236a4:	bl	1f2d4 <__assert_fail@plt+0xd934>
   236a8:	subs	sl, r0, #0
   236ac:	beq	2381c <__assert_fail@plt+0x11e7c>
   236b0:	ldr	r3, [r5, #100]	; 0x64
   236b4:	str	sl, [r3, r4, lsl #2]
   236b8:	b	2333c <__assert_fail@plt+0x1199c>
   236bc:	cmp	r0, #0
   236c0:	bne	23408 <__assert_fail@plt+0x11a68>
   236c4:	ldr	r0, [r7]
   236c8:	b	233f0 <__assert_fail@plt+0x11a50>
   236cc:	cmp	sl, #0
   236d0:	bne	233a4 <__assert_fail@plt+0x11a04>
   236d4:	mov	r4, fp
   236d8:	b	2356c <__assert_fail@plt+0x11bcc>
   236dc:	ldr	r0, [sp, #76]	; 0x4c
   236e0:	bl	1c734 <__assert_fail@plt+0xad94>
   236e4:	mov	r3, #12
   236e8:	str	r3, [sp, #48]	; 0x30
   236ec:	ldr	r0, [sp, #64]	; 0x40
   236f0:	bl	1c734 <__assert_fail@plt+0xad94>
   236f4:	ldr	r0, [sp, #48]	; 0x30
   236f8:	b	23618 <__assert_fail@plt+0x11c78>
   236fc:	ldr	fp, [sp, #32]
   23700:	ldr	r0, [sp, #76]	; 0x4c
   23704:	bl	1c734 <__assert_fail@plt+0xad94>
   23708:	mov	r3, #0
   2370c:	str	r3, [sp, #48]	; 0x30
   23710:	b	23514 <__assert_fail@plt+0x11b74>
   23714:	ldr	r3, [sp, #48]	; 0x30
   23718:	cmp	r3, #0
   2371c:	bne	236ec <__assert_fail@plt+0x11d4c>
   23720:	ldr	r2, [sp, #12]
   23724:	ldr	r3, [r5, #100]	; 0x64
   23728:	add	r2, r2, #1
   2372c:	str	r2, [sp, #12]
   23730:	ldr	r2, [sp, #16]
   23734:	str	sl, [r3, r2]
   23738:	b	235ac <__assert_fail@plt+0x11c0c>
   2373c:	sub	r1, sl, #1
   23740:	mov	r0, r5
   23744:	str	sl, [r5, #40]	; 0x28
   23748:	str	r8, [r5, #100]	; 0x64
   2374c:	bl	212d8 <__assert_fail@plt+0xf938>
   23750:	mov	r6, r0
   23754:	mov	r3, #1
   23758:	mov	r0, #4
   2375c:	str	r3, [sp, #56]	; 0x38
   23760:	str	r3, [sp, #60]	; 0x3c
   23764:	bl	1c864 <__assert_fail@plt+0xaec4>
   23768:	cmp	r0, #0
   2376c:	str	r0, [sp, #64]	; 0x40
   23770:	beq	2382c <__assert_fail@plt+0x11e8c>
   23774:	add	r3, sp, #56	; 0x38
   23778:	mov	ip, #0
   2377c:	str	r7, [r0]
   23780:	mov	r1, r3
   23784:	ldr	r0, [sp, #20]
   23788:	str	r3, [sp, #8]
   2378c:	ldr	r2, [sp, #28]
   23790:	str	ip, [sp, #48]	; 0x30
   23794:	ldr	r3, [sp, #128]	; 0x80
   23798:	bl	20358 <__assert_fail@plt+0xe9b8>
   2379c:	cmp	r0, #0
   237a0:	str	r0, [sp, #48]	; 0x30
   237a4:	moveq	r4, sl
   237a8:	beq	23660 <__assert_fail@plt+0x11cc0>
   237ac:	b	236ec <__assert_fail@plt+0x11d4c>
   237b0:	mvn	r3, #-2147483648	; 0x80000000
   237b4:	add	r9, r2, #1
   237b8:	sub	r3, r3, r4
   237bc:	cmp	r3, r9
   237c0:	blt	2382c <__assert_fail@plt+0x11e8c>
   237c4:	add	r8, r4, r9
   237c8:	cmn	r8, #-1073741823	; 0xc0000001
   237cc:	bhi	2382c <__assert_fail@plt+0x11e8c>
   237d0:	ldr	fp, [sp, #36]	; 0x24
   237d4:	lsl	r1, r8, #2
   237d8:	ldr	r0, [fp, #8]
   237dc:	bl	1c910 <__assert_fail@plt+0xaf70>
   237e0:	subs	r3, r0, #0
   237e4:	beq	2382c <__assert_fail@plt+0x11e8c>
   237e8:	lsl	r2, r9, #2
   237ec:	mov	r1, r6
   237f0:	str	r8, [fp, #4]
   237f4:	add	r0, r3, r4, lsl #2
   237f8:	str	r3, [fp, #8]
   237fc:	bl	11814 <memset@plt>
   23800:	b	232c8 <__assert_fail@plt+0x11928>
   23804:	add	r3, sp, #56	; 0x38
   23808:	str	r3, [sp, #8]
   2380c:	str	sl, [sp, #56]	; 0x38
   23810:	str	sl, [sp, #60]	; 0x3c
   23814:	str	sl, [sp, #64]	; 0x40
   23818:	b	2333c <__assert_fail@plt+0x1199c>
   2381c:	ldr	r3, [sp, #48]	; 0x30
   23820:	cmp	r3, #0
   23824:	beq	236b0 <__assert_fail@plt+0x11d10>
   23828:	b	236ec <__assert_fail@plt+0x11d4c>
   2382c:	mov	r0, #12
   23830:	b	23618 <__assert_fail@plt+0x11c78>
   23834:	ldr	r3, [sp, #36]	; 0x24
   23838:	mov	r0, #1
   2383c:	str	r4, [r3]
   23840:	ldr	r3, [sp, #44]	; 0x2c
   23844:	str	r3, [r5, #40]	; 0x28
   23848:	ldr	r3, [sp, #40]	; 0x28
   2384c:	str	r3, [r5, #100]	; 0x64
   23850:	b	23618 <__assert_fail@plt+0x11c78>
   23854:	mov	r0, #0
   23858:	b	23704 <__assert_fail@plt+0x11d64>
   2385c:	mov	ip, r2
   23860:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23864:	mov	r4, r0
   23868:	strd	r6, [sp, #8]
   2386c:	mov	r6, r2
   23870:	mov	r7, r3
   23874:	strd	r8, [sp, #16]
   23878:	mov	r3, #8
   2387c:	mov	r8, r1
   23880:	strd	sl, [sp, #24]
   23884:	str	lr, [sp, #32]
   23888:	sub	sp, sp, #20
   2388c:	ldr	r2, [ip], #8
   23890:	str	r7, [sp]
   23894:	ldr	r5, [sp, #56]	; 0x38
   23898:	mov	r1, ip
   2389c:	str	r5, [sp, #4]
   238a0:	str	r3, [sp, #8]
   238a4:	ldr	r3, [r6, #4]
   238a8:	bl	2326c <__assert_fail@plt+0x118cc>
   238ac:	subs	fp, r0, #0
   238b0:	beq	238d4 <__assert_fail@plt+0x11f34>
   238b4:	mov	r0, fp
   238b8:	add	sp, sp, #20
   238bc:	ldrd	r4, [sp]
   238c0:	ldrd	r6, [sp, #8]
   238c4:	ldrd	r8, [sp, #16]
   238c8:	ldrd	sl, [sp, #24]
   238cc:	add	sp, sp, #32
   238d0:	pop	{pc}		; (ldr pc, [sp], #4)
   238d4:	ldr	r3, [r4, #108]	; 0x6c
   238d8:	ldr	r1, [r4, #112]	; 0x70
   238dc:	ldr	r9, [r6, #4]
   238e0:	ldr	sl, [r8]
   238e4:	cmp	r3, r1
   238e8:	ldr	r0, [r4, #116]	; 0x74
   238ec:	movlt	lr, r9
   238f0:	bge	2398c <__assert_fail@plt+0x11fec>
   238f4:	add	r2, r3, r3, lsl #1
   238f8:	cmp	r3, #0
   238fc:	lsl	r2, r2, #3
   23900:	ble	2391c <__assert_fail@plt+0x11f7c>
   23904:	sub	r1, r2, #24
   23908:	add	r1, r0, r1
   2390c:	ldr	ip, [r1, #4]
   23910:	cmp	r5, ip
   23914:	moveq	ip, #1
   23918:	strbeq	ip, [r1, #20]
   2391c:	cmp	sl, r9
   23920:	add	ip, r0, r2
   23924:	str	r7, [r0, r2]
   23928:	add	r3, r3, #1
   2392c:	movne	r0, #0
   23930:	mvneq	r0, #0
   23934:	mov	r1, #0
   23938:	stmib	ip, {r5, sl}
   2393c:	str	r9, [ip, #12]
   23940:	sub	r2, r9, sl
   23944:	add	r5, r5, lr
   23948:	str	r0, [ip, #16]
   2394c:	mov	r0, r4
   23950:	str	r3, [r4, #108]	; 0x6c
   23954:	strb	r1, [ip, #20]
   23958:	ldr	r3, [r4, #120]	; 0x78
   2395c:	cmp	r3, r2
   23960:	strlt	r2, [r4, #120]	; 0x78
   23964:	ldr	r1, [r8]
   23968:	sub	r1, r5, r1
   2396c:	add	sp, sp, #20
   23970:	ldrd	r4, [sp]
   23974:	ldrd	r6, [sp, #8]
   23978:	ldrd	r8, [sp, #16]
   2397c:	ldrd	sl, [sp, #24]
   23980:	ldr	lr, [sp, #32]
   23984:	add	sp, sp, #36	; 0x24
   23988:	b	1e4c8 <__assert_fail@plt+0xcb28>
   2398c:	add	r1, r1, r1, lsl #1
   23990:	lsl	r1, r1, #4
   23994:	bl	1c910 <__assert_fail@plt+0xaf70>
   23998:	cmp	r0, #0
   2399c:	beq	239e0 <__assert_fail@plt+0x12040>
   239a0:	ldr	r3, [r4, #108]	; 0x6c
   239a4:	mov	r1, fp
   239a8:	str	r0, [r4, #116]	; 0x74
   239ac:	ldr	r2, [r4, #112]	; 0x70
   239b0:	add	r3, r3, r3, lsl #1
   239b4:	add	r2, r2, r2, lsl #1
   239b8:	add	r0, r0, r3, lsl #3
   239bc:	lsl	r2, r2, #3
   239c0:	bl	11814 <memset@plt>
   239c4:	ldr	lr, [r6, #4]
   239c8:	ldr	r2, [r4, #112]	; 0x70
   239cc:	ldr	r3, [r4, #108]	; 0x6c
   239d0:	ldr	r0, [r4, #116]	; 0x74
   239d4:	lsl	r2, r2, #1
   239d8:	str	r2, [r4, #112]	; 0x70
   239dc:	b	238f4 <__assert_fail@plt+0x11f54>
   239e0:	ldr	r0, [r4, #116]	; 0x74
   239e4:	mov	fp, #12
   239e8:	bl	1c734 <__assert_fail@plt+0xad94>
   239ec:	b	238b4 <__assert_fail@plt+0x11f14>
   239f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   239f4:	ldr	r3, [r0, #84]	; 0x54
   239f8:	strd	r6, [sp, #8]
   239fc:	ldr	r6, [r1]
   23a00:	strd	r8, [sp, #16]
   23a04:	strd	sl, [sp, #24]
   23a08:	str	lr, [sp, #32]
   23a0c:	sub	sp, sp, #84	; 0x54
   23a10:	ldr	sl, [r0, #40]	; 0x28
   23a14:	cmp	r6, #0
   23a18:	str	r3, [sp, #24]
   23a1c:	ble	23f44 <__assert_fail@plt+0x125a4>
   23a20:	lsl	r3, sl, #2
   23a24:	mov	fp, r0
   23a28:	mov	r9, sl
   23a2c:	str	r2, [sp, #36]	; 0x24
   23a30:	str	r3, [sp, #44]	; 0x2c
   23a34:	mov	r3, #0
   23a38:	str	r1, [sp, #56]	; 0x38
   23a3c:	str	r3, [sp, #16]
   23a40:	b	23a88 <__assert_fail@plt+0x120e8>
   23a44:	tst	r0, #1
   23a48:	beq	23a74 <__assert_fail@plt+0x120d4>
   23a4c:	tst	r3, #8
   23a50:	bne	23a74 <__assert_fail@plt+0x120d4>
   23a54:	tst	r3, #32
   23a58:	beq	23a64 <__assert_fail@plt+0x120c4>
   23a5c:	tst	r0, #2
   23a60:	beq	23a74 <__assert_fail@plt+0x120d4>
   23a64:	tst	r3, #128	; 0x80
   23a68:	beq	23af8 <__assert_fail@plt+0x12158>
   23a6c:	tst	r0, #8
   23a70:	bne	23af8 <__assert_fail@plt+0x12158>
   23a74:	ldr	r3, [sp, #16]
   23a78:	add	r3, r3, #1
   23a7c:	cmp	r3, r6
   23a80:	str	r3, [sp, #16]
   23a84:	bge	23f44 <__assert_fail@plt+0x125a4>
   23a88:	ldr	r1, [sp, #16]
   23a8c:	ldr	r3, [sp, #36]	; 0x24
   23a90:	ldr	r2, [r3]
   23a94:	ldr	r3, [sp, #24]
   23a98:	ldr	sl, [r2, r1, lsl #2]
   23a9c:	ldr	r3, [r3]
   23aa0:	add	r3, r3, sl, lsl #3
   23aa4:	ldrb	r2, [r3, #4]
   23aa8:	cmp	r2, #4
   23aac:	bne	23a74 <__assert_fail@plt+0x120d4>
   23ab0:	ldr	r4, [r3, #4]
   23ab4:	mov	r3, #65280	; 0xff00
   23ab8:	movt	r3, #3
   23abc:	and	r3, r3, r4
   23ac0:	cmp	r3, #0
   23ac4:	beq	23af8 <__assert_fail@plt+0x12158>
   23ac8:	mov	r1, r9
   23acc:	mov	r0, fp
   23ad0:	ldr	r2, [fp, #88]	; 0x58
   23ad4:	bl	212d8 <__assert_fail@plt+0xf938>
   23ad8:	ubfx	r3, r4, #8, #10
   23adc:	tst	r3, #4
   23ae0:	bne	23a44 <__assert_fail@plt+0x120a4>
   23ae4:	tst	r3, #8
   23ae8:	beq	23a54 <__assert_fail@plt+0x120b4>
   23aec:	tst	r0, #1
   23af0:	beq	23a54 <__assert_fail@plt+0x120b4>
   23af4:	b	23a74 <__assert_fail@plt+0x120d4>
   23af8:	ldr	ip, [fp, #108]	; 0x6c
   23afc:	mov	r0, #0
   23b00:	mov	r4, ip
   23b04:	mov	r3, ip
   23b08:	cmp	r0, r3
   23b0c:	bge	23b68 <__assert_fail@plt+0x121c8>
   23b10:	add	r2, r0, r3
   23b14:	ldr	lr, [fp, #116]	; 0x74
   23b18:	add	r2, r2, r2, lsr #31
   23b1c:	asr	r2, r2, #1
   23b20:	add	r1, r2, r2, lsl #1
   23b24:	add	r1, lr, r1, lsl #3
   23b28:	ldr	r1, [r1, #4]
   23b2c:	cmp	r9, r1
   23b30:	ble	23b58 <__assert_fail@plt+0x121b8>
   23b34:	b	23d70 <__assert_fail@plt+0x123d0>
   23b38:	asr	r3, r3, #1
   23b3c:	add	r1, r3, r3, lsl #1
   23b40:	mov	r5, r3
   23b44:	add	r1, lr, r1, lsl #3
   23b48:	ldr	r1, [r1, #4]
   23b4c:	cmp	r9, r1
   23b50:	bgt	23d78 <__assert_fail@plt+0x123d8>
   23b54:	mov	r2, r3
   23b58:	add	r3, r0, r2
   23b5c:	cmp	r0, r2
   23b60:	add	r3, r3, r3, lsr #31
   23b64:	blt	23b38 <__assert_fail@plt+0x12198>
   23b68:	cmp	ip, r0
   23b6c:	ble	23d84 <__assert_fail@plt+0x123e4>
   23b70:	ldr	r3, [fp, #116]	; 0x74
   23b74:	add	r2, r0, r0, lsl #1
   23b78:	cmn	r0, #1
   23b7c:	add	r3, r3, r2, lsl #3
   23b80:	ldr	r1, [r3, #4]
   23b84:	sub	r2, r1, r9
   23b88:	clz	r2, r2
   23b8c:	lsr	r2, r2, #5
   23b90:	moveq	r2, #0
   23b94:	cmp	r2, #0
   23b98:	beq	23d84 <__assert_fail@plt+0x123e4>
   23b9c:	add	r3, r3, #24
   23ba0:	b	23bb0 <__assert_fail@plt+0x12210>
   23ba4:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   23ba8:	cmp	r2, #0
   23bac:	beq	23d84 <__assert_fail@plt+0x123e4>
   23bb0:	ldr	r2, [r3, #-24]	; 0xffffffe8
   23bb4:	add	r3, r3, #24
   23bb8:	cmp	sl, r2
   23bbc:	bne	23ba4 <__assert_fail@plt+0x12204>
   23bc0:	lsl	r2, sl, #2
   23bc4:	mov	r3, #0
   23bc8:	cmp	r4, ip
   23bcc:	str	r2, [sp, #40]	; 0x28
   23bd0:	str	r3, [sp, #64]	; 0x40
   23bd4:	bge	23ef8 <__assert_fail@plt+0x12558>
   23bd8:	add	r3, sl, sl, lsl #1
   23bdc:	ldr	r8, [sp, #24]
   23be0:	lsl	r3, r3, #2
   23be4:	str	r3, [sp, #48]	; 0x30
   23be8:	b	23cd0 <__assert_fail@plt+0x12330>
   23bec:	ldr	r2, [r8, #20]
   23bf0:	ldr	r1, [sp, #48]	; 0x30
   23bf4:	add	r2, r2, r1
   23bf8:	ldr	r2, [r2, #8]
   23bfc:	ldr	r2, [r2]
   23c00:	add	r2, r2, r2, lsl #1
   23c04:	add	r6, r6, r2, lsl #2
   23c08:	add	r3, r9, r3
   23c0c:	mov	r0, fp
   23c10:	ldr	r2, [fp, #88]	; 0x58
   23c14:	sub	r5, r3, r5
   23c18:	sub	r1, r5, #1
   23c1c:	bl	212d8 <__assert_fail@plt+0xf938>
   23c20:	ldr	r2, [sp, #44]	; 0x2c
   23c24:	mov	r3, r0
   23c28:	ldr	r7, [fp, #100]	; 0x64
   23c2c:	ldr	r2, [r7, r2]
   23c30:	ldr	r1, [r7, r5, lsl #2]
   23c34:	cmp	r2, #0
   23c38:	ldrne	r2, [r2, #8]
   23c3c:	cmp	r1, #0
   23c40:	str	r2, [sp, #28]
   23c44:	beq	23d24 <__assert_fail@plt+0x12384>
   23c48:	mov	r2, r6
   23c4c:	add	r0, sp, #68	; 0x44
   23c50:	ldr	r1, [r1, #40]	; 0x28
   23c54:	str	r3, [sp, #32]
   23c58:	bl	1f168 <__assert_fail@plt+0xd7c8>
   23c5c:	cmp	r0, #0
   23c60:	str	r0, [sp, #64]	; 0x40
   23c64:	ldr	r3, [sp, #32]
   23c68:	bne	23f34 <__assert_fail@plt+0x12594>
   23c6c:	add	r2, sp, #68	; 0x44
   23c70:	mov	r1, r8
   23c74:	ldr	r7, [fp, #100]	; 0x64
   23c78:	add	r0, sp, #64	; 0x40
   23c7c:	bl	1f2d4 <__assert_fail@plt+0xd934>
   23c80:	str	r0, [r7, r5, lsl #2]
   23c84:	ldr	r0, [sp, #76]	; 0x4c
   23c88:	bl	1c734 <__assert_fail@plt+0xad94>
   23c8c:	ldr	r3, [fp, #100]	; 0x64
   23c90:	ldr	r2, [r3, r5, lsl #2]
   23c94:	cmp	r2, #0
   23c98:	beq	23d48 <__assert_fail@plt+0x123a8>
   23c9c:	ldr	r2, [sp, #20]
   23ca0:	cmp	r2, #0
   23ca4:	bne	23cc0 <__assert_fail@plt+0x12320>
   23ca8:	ldr	r2, [sp, #44]	; 0x2c
   23cac:	ldr	r3, [r3, r2]
   23cb0:	ldr	r2, [sp, #28]
   23cb4:	ldr	r3, [r3, #8]
   23cb8:	cmp	r3, r2
   23cbc:	bgt	23eb0 <__assert_fail@plt+0x12510>
   23cc0:	ldr	ip, [fp, #108]	; 0x6c
   23cc4:	add	r4, r4, #1
   23cc8:	cmp	r4, ip
   23ccc:	bge	23ef8 <__assert_fail@plt+0x12558>
   23cd0:	ldr	r3, [fp, #116]	; 0x74
   23cd4:	add	r2, r4, r4, lsl #1
   23cd8:	ldr	r1, [r3, r2, lsl #3]
   23cdc:	add	r3, r3, r2, lsl #3
   23ce0:	cmp	sl, r1
   23ce4:	bne	23cc4 <__assert_fail@plt+0x12324>
   23ce8:	ldr	r2, [r3, #4]
   23cec:	cmp	r9, r2
   23cf0:	bne	23cc4 <__assert_fail@plt+0x12324>
   23cf4:	ldr	r5, [r3, #8]
   23cf8:	ldr	r3, [r3, #12]
   23cfc:	ldr	r6, [r8, #24]
   23d00:	subs	r2, r3, r5
   23d04:	str	r2, [sp, #20]
   23d08:	beq	23bec <__assert_fail@plt+0x1224c>
   23d0c:	ldr	r2, [r8, #12]
   23d10:	ldr	r1, [sp, #40]	; 0x28
   23d14:	ldr	r2, [r2, r1]
   23d18:	add	r2, r2, r2, lsl #1
   23d1c:	add	r6, r6, r2, lsl #2
   23d20:	b	23c08 <__assert_fail@plt+0x12268>
   23d24:	mov	r2, r6
   23d28:	mov	r1, r8
   23d2c:	add	r0, sp, #64	; 0x40
   23d30:	bl	1f2d4 <__assert_fail@plt+0xd934>
   23d34:	ldr	r3, [fp, #100]	; 0x64
   23d38:	str	r0, [r7, r5, lsl #2]
   23d3c:	ldr	r2, [r3, r5, lsl #2]
   23d40:	cmp	r2, #0
   23d44:	bne	23c9c <__assert_fail@plt+0x122fc>
   23d48:	ldr	r0, [sp, #64]	; 0x40
   23d4c:	cmp	r0, #0
   23d50:	beq	23c9c <__assert_fail@plt+0x122fc>
   23d54:	add	sp, sp, #84	; 0x54
   23d58:	ldrd	r4, [sp]
   23d5c:	ldrd	r6, [sp, #8]
   23d60:	ldrd	r8, [sp, #16]
   23d64:	ldrd	sl, [sp, #24]
   23d68:	add	sp, sp, #32
   23d6c:	pop	{pc}		; (ldr pc, [sp], #4)
   23d70:	mov	r5, r2
   23d74:	mov	r2, r3
   23d78:	add	r0, r5, #1
   23d7c:	mov	r3, r2
   23d80:	b	23b08 <__assert_fail@plt+0x12168>
   23d84:	ldr	r3, [fp, #84]	; 0x54
   23d88:	ldr	r1, [fp, #124]	; 0x7c
   23d8c:	str	r3, [sp, #52]	; 0x34
   23d90:	ldr	r3, [r3]
   23d94:	cmp	r1, #0
   23d98:	ldr	r2, [r3, sl, lsl #3]
   23d9c:	str	r2, [sp, #48]	; 0x30
   23da0:	ble	23bc0 <__assert_fail@plt+0x12220>
   23da4:	mov	r2, #0
   23da8:	str	sl, [sp, #40]	; 0x28
   23dac:	str	r2, [sp, #28]
   23db0:	ldr	r2, [fp, #4]
   23db4:	str	r9, [sp, #32]
   23db8:	str	r4, [sp, #60]	; 0x3c
   23dbc:	mov	sl, r2
   23dc0:	ldr	r0, [sp, #28]
   23dc4:	ldr	r2, [fp, #132]	; 0x84
   23dc8:	ldr	r4, [r2, r0, lsl #2]
   23dcc:	ldr	r2, [r4, #4]
   23dd0:	ldr	r3, [r3, r2, lsl #3]
   23dd4:	ldr	r2, [sp, #48]	; 0x30
   23dd8:	cmp	r2, r3
   23ddc:	beq	23e00 <__assert_fail@plt+0x12460>
   23de0:	ldr	r3, [sp, #28]
   23de4:	add	r3, r3, #1
   23de8:	cmp	r3, r1
   23dec:	str	r3, [sp, #28]
   23df0:	bge	2413c <__assert_fail@plt+0x1279c>
   23df4:	ldr	r3, [sp, #52]	; 0x34
   23df8:	ldr	r3, [r3]
   23dfc:	b	23dc0 <__assert_fail@plt+0x12420>
   23e00:	ldr	r6, [r4]
   23e04:	ldr	ip, [r4, #16]
   23e08:	ldr	r7, [sp, #32]
   23e0c:	cmp	ip, #0
   23e10:	ble	23f5c <__assert_fail@plt+0x125bc>
   23e14:	mov	r3, sl
   23e18:	mov	r5, #0
   23e1c:	mov	sl, r7
   23e20:	mov	r7, r6
   23e24:	b	23e38 <__assert_fail@plt+0x12498>
   23e28:	ldr	ip, [r4, #16]
   23e2c:	mov	sl, r6
   23e30:	cmp	r5, ip
   23e34:	bge	23f4c <__assert_fail@plt+0x125ac>
   23e38:	ldr	r2, [r4, #20]
   23e3c:	ldr	r9, [r2, r5, lsl #2]
   23e40:	ldr	r8, [r9, #4]
   23e44:	sub	r2, r8, r7
   23e48:	cmp	r2, #0
   23e4c:	add	r6, r2, sl
   23e50:	ble	23e7c <__assert_fail@plt+0x124dc>
   23e54:	ldr	r1, [fp, #28]
   23e58:	cmp	r1, r6
   23e5c:	blt	23f04 <__assert_fail@plt+0x12564>
   23e60:	add	r1, r3, r7
   23e64:	add	r0, r3, sl
   23e68:	str	r3, [sp, #20]
   23e6c:	bl	1161c <memcmp@plt>
   23e70:	cmp	r0, #0
   23e74:	ldr	r3, [sp, #20]
   23e78:	bne	240e4 <__assert_fail@plt+0x12744>
   23e7c:	ldr	r1, [sp, #32]
   23e80:	mov	r2, r9
   23e84:	mov	r0, fp
   23e88:	add	r5, r5, #1
   23e8c:	mov	r7, r8
   23e90:	ldr	r3, [sp, #40]	; 0x28
   23e94:	str	r1, [sp]
   23e98:	mov	r1, r4
   23e9c:	bl	2385c <__assert_fail@plt+0x11ebc>
   23ea0:	cmp	r0, #1
   23ea4:	ldr	r3, [fp, #4]
   23ea8:	bls	23e28 <__assert_fail@plt+0x12488>
   23eac:	b	23d54 <__assert_fail@plt+0x123b4>
   23eb0:	add	r5, r6, #4
   23eb4:	add	r6, r6, #8
   23eb8:	mov	r2, r6
   23ebc:	mov	r1, r5
   23ec0:	mov	r3, r9
   23ec4:	mov	r0, fp
   23ec8:	bl	21e78 <__assert_fail@plt+0x104d8>
   23ecc:	cmp	r0, #0
   23ed0:	str	r0, [sp, #64]	; 0x40
   23ed4:	bne	23d54 <__assert_fail@plt+0x123b4>
   23ed8:	mov	r2, r6
   23edc:	mov	r1, r5
   23ee0:	mov	r0, fp
   23ee4:	bl	239f0 <__assert_fail@plt+0x12050>
   23ee8:	cmp	r0, #0
   23eec:	str	r0, [sp, #64]	; 0x40
   23ef0:	beq	23cc0 <__assert_fail@plt+0x12320>
   23ef4:	b	23d54 <__assert_fail@plt+0x123b4>
   23ef8:	ldr	r3, [sp, #56]	; 0x38
   23efc:	ldr	r6, [r3]
   23f00:	b	23a74 <__assert_fail@plt+0x120d4>
   23f04:	ldr	lr, [fp, #48]	; 0x30
   23f08:	mov	r1, r6
   23f0c:	mov	r0, fp
   23f10:	str	r2, [sp, #20]
   23f14:	cmp	lr, r6
   23f18:	blt	24180 <__assert_fail@plt+0x127e0>
   23f1c:	bl	1e4c8 <__assert_fail@plt+0xcb28>
   23f20:	cmp	r0, #0
   23f24:	bne	23d54 <__assert_fail@plt+0x123b4>
   23f28:	ldr	r3, [fp, #4]
   23f2c:	ldr	r2, [sp, #20]
   23f30:	b	23e60 <__assert_fail@plt+0x124c0>
   23f34:	ldr	r0, [sp, #76]	; 0x4c
   23f38:	bl	1c734 <__assert_fail@plt+0xad94>
   23f3c:	ldr	r0, [sp, #64]	; 0x40
   23f40:	b	23d54 <__assert_fail@plt+0x123b4>
   23f44:	mov	r0, #0
   23f48:	b	23d54 <__assert_fail@plt+0x123b4>
   23f4c:	mov	r9, r6
   23f50:	mov	sl, r3
   23f54:	add	r6, r8, #1
   23f58:	mov	r7, r9
   23f5c:	ldr	r3, [sp, #32]
   23f60:	cmp	r3, r6
   23f64:	blt	240b4 <__assert_fail@plt+0x12714>
   23f68:	ldr	r9, [sp, #32]
   23f6c:	ldr	r8, [sp, #48]	; 0x30
   23f70:	ldr	r3, [r4]
   23f74:	sub	r3, r6, r3
   23f78:	cmp	r3, #0
   23f7c:	ble	23fa8 <__assert_fail@plt+0x12608>
   23f80:	ldr	r3, [fp, #28]
   23f84:	cmp	r3, r7
   23f88:	ble	24110 <__assert_fail@plt+0x12770>
   23f8c:	add	r5, r7, #1
   23f90:	add	r3, sl, r6
   23f94:	ldrb	r2, [sl, r7]
   23f98:	ldrb	r3, [r3, #-1]
   23f9c:	cmp	r2, r3
   23fa0:	bne	240b4 <__assert_fail@plt+0x12714>
   23fa4:	mov	r7, r5
   23fa8:	ldr	r3, [fp, #100]	; 0x64
   23fac:	ldr	r3, [r3, r6, lsl #2]
   23fb0:	cmp	r3, #0
   23fb4:	beq	240a8 <__assert_fail@plt+0x12708>
   23fb8:	ldr	ip, [r3, #8]
   23fbc:	cmp	ip, #0
   23fc0:	ble	240a8 <__assert_fail@plt+0x12708>
   23fc4:	ldr	r2, [r3, #12]
   23fc8:	mov	r3, #0
   23fcc:	ldr	r1, [sp, #52]	; 0x34
   23fd0:	sub	r2, r2, #4
   23fd4:	ldr	r0, [r1]
   23fd8:	b	23fe4 <__assert_fail@plt+0x12644>
   23fdc:	cmp	ip, r3
   23fe0:	beq	240a8 <__assert_fail@plt+0x12708>
   23fe4:	ldr	r5, [r2, #4]!
   23fe8:	add	r3, r3, #1
   23fec:	add	r1, r0, r5, lsl #3
   23ff0:	ldrb	r1, [r1, #4]
   23ff4:	cmp	r1, #9
   23ff8:	bne	23fdc <__assert_fail@plt+0x1263c>
   23ffc:	ldr	r1, [r0, r5, lsl #3]
   24000:	cmp	r8, r1
   24004:	bne	23fdc <__assert_fail@plt+0x1263c>
   24008:	cmn	r5, #1
   2400c:	beq	240a8 <__assert_fail@plt+0x12708>
   24010:	ldr	r3, [r4]
   24014:	ldr	r1, [r4, #8]
   24018:	cmp	r1, #0
   2401c:	beq	240bc <__assert_fail@plt+0x1271c>
   24020:	mov	ip, #9
   24024:	mov	r0, fp
   24028:	ldr	r2, [r4, #4]
   2402c:	stm	sp, {r5, r6, ip}
   24030:	bl	2326c <__assert_fail@plt+0x118cc>
   24034:	cmp	r0, #1
   24038:	beq	240a8 <__assert_fail@plt+0x12708>
   2403c:	cmp	r0, #0
   24040:	bne	23d54 <__assert_fail@plt+0x123b4>
   24044:	ldrd	r2, [r4, #12]
   24048:	cmp	r3, r2
   2404c:	beq	24158 <__assert_fail@plt+0x127b8>
   24050:	mov	r1, #20
   24054:	mov	r0, #1
   24058:	bl	1c478 <__assert_fail@plt+0xaad8>
   2405c:	subs	ip, r0, #0
   24060:	beq	24150 <__assert_fail@plt+0x127b0>
   24064:	ldr	lr, [r4, #16]
   24068:	mov	r2, ip
   2406c:	mov	r1, r4
   24070:	mov	r0, fp
   24074:	ldr	r3, [sp, #40]	; 0x28
   24078:	add	sl, lr, #1
   2407c:	str	sl, [sp, #20]
   24080:	ldr	sl, [r4, #20]
   24084:	str	ip, [sl, lr, lsl #2]
   24088:	stm	ip, {r5, r6}
   2408c:	ldr	ip, [sp, #20]
   24090:	str	ip, [r4, #16]
   24094:	str	r9, [sp]
   24098:	bl	2385c <__assert_fail@plt+0x11ebc>
   2409c:	cmp	r0, #1
   240a0:	ldr	sl, [fp, #4]
   240a4:	bhi	23d54 <__assert_fail@plt+0x123b4>
   240a8:	add	r6, r6, #1
   240ac:	cmp	r9, r6
   240b0:	bge	23f70 <__assert_fail@plt+0x125d0>
   240b4:	ldr	r1, [fp, #124]	; 0x7c
   240b8:	b	23de0 <__assert_fail@plt+0x12440>
   240bc:	sub	r3, r6, r3
   240c0:	mov	r0, #12
   240c4:	add	r1, r3, #1
   240c8:	bl	1c478 <__assert_fail@plt+0xaad8>
   240cc:	cmp	r0, #0
   240d0:	mov	r1, r0
   240d4:	str	r0, [r4, #8]
   240d8:	beq	24150 <__assert_fail@plt+0x127b0>
   240dc:	ldr	r3, [r4]
   240e0:	b	24020 <__assert_fail@plt+0x12680>
   240e4:	ldr	ip, [r4, #16]
   240e8:	mov	r6, r7
   240ec:	mov	r7, sl
   240f0:	mov	sl, r3
   240f4:	cmp	ip, r5
   240f8:	bgt	240b4 <__assert_fail@plt+0x12714>
   240fc:	cmp	r5, #0
   24100:	ble	23f5c <__assert_fail@plt+0x125bc>
   24104:	mov	r9, r7
   24108:	mov	r8, r6
   2410c:	b	23f54 <__assert_fail@plt+0x125b4>
   24110:	ldr	r3, [fp, #48]	; 0x30
   24114:	cmp	r3, r7
   24118:	ble	240b4 <__assert_fail@plt+0x12714>
   2411c:	add	r5, r7, #1
   24120:	mov	r0, fp
   24124:	mov	r1, r5
   24128:	bl	1d934 <__assert_fail@plt+0xbf94>
   2412c:	cmp	r0, #0
   24130:	bne	23d54 <__assert_fail@plt+0x123b4>
   24134:	ldr	sl, [fp, #4]
   24138:	b	23f90 <__assert_fail@plt+0x125f0>
   2413c:	ldr	r9, [sp, #32]
   24140:	ldr	sl, [sp, #40]	; 0x28
   24144:	ldr	r4, [sp, #60]	; 0x3c
   24148:	ldr	ip, [fp, #108]	; 0x6c
   2414c:	b	23bc0 <__assert_fail@plt+0x12220>
   24150:	mov	r0, #12
   24154:	b	23d54 <__assert_fail@plt+0x123b4>
   24158:	lsl	r3, r3, #1
   2415c:	ldr	r0, [r4, #20]
   24160:	add	sl, r3, #1
   24164:	lsl	r1, sl, #2
   24168:	bl	1c910 <__assert_fail@plt+0xaf70>
   2416c:	cmp	r0, #0
   24170:	beq	24150 <__assert_fail@plt+0x127b0>
   24174:	str	sl, [r4, #12]
   24178:	str	r0, [r4, #20]
   2417c:	b	24050 <__assert_fail@plt+0x126b0>
   24180:	mov	r6, r7
   24184:	mov	r7, sl
   24188:	mov	sl, r3
   2418c:	b	240f4 <__assert_fail@plt+0x12754>
   24190:	strd	r4, [sp, #-32]!	; 0xffffffe0
   24194:	mov	r4, r1
   24198:	ldr	r5, [r1, #40]	; 0x28
   2419c:	ldr	r3, [r1, #104]	; 0x68
   241a0:	strd	r6, [sp, #8]
   241a4:	strd	r8, [sp, #16]
   241a8:	str	sl, [sp, #24]
   241ac:	mov	sl, r0
   241b0:	str	lr, [sp, #28]
   241b4:	sub	sp, sp, #16
   241b8:	cmp	r3, r5
   241bc:	ldr	r8, [r1, #84]	; 0x54
   241c0:	ldr	r9, [r1, #100]	; 0x64
   241c4:	bge	24200 <__assert_fail@plt+0x12860>
   241c8:	mov	r6, r2
   241cc:	str	r2, [r9, r5, lsl #2]
   241d0:	str	r5, [r1, #104]	; 0x68
   241d4:	ldr	r3, [r8, #76]	; 0x4c
   241d8:	cmp	r3, #0
   241dc:	bne	242c8 <__assert_fail@plt+0x12928>
   241e0:	mov	r0, r6
   241e4:	add	sp, sp, #16
   241e8:	ldrd	r4, [sp]
   241ec:	ldrd	r6, [sp, #8]
   241f0:	ldrd	r8, [sp, #16]
   241f4:	ldr	sl, [sp, #24]
   241f8:	add	sp, sp, #28
   241fc:	pop	{pc}		; (ldr pc, [sp], #4)
   24200:	ldr	r3, [r9, r5, lsl #2]
   24204:	cmp	r3, #0
   24208:	moveq	r6, r2
   2420c:	streq	r2, [r9, r5, lsl #2]
   24210:	beq	241d4 <__assert_fail@plt+0x12834>
   24214:	cmp	r2, #0
   24218:	ldr	r3, [r3, #40]	; 0x28
   2421c:	beq	24288 <__assert_fail@plt+0x128e8>
   24220:	ldr	r7, [r2, #40]	; 0x28
   24224:	add	r0, sp, #4
   24228:	mov	r2, r3
   2422c:	mov	r1, r7
   24230:	bl	1f168 <__assert_fail@plt+0xd7c8>
   24234:	cmp	r0, #0
   24238:	str	r0, [sl]
   2423c:	bne	2432c <__assert_fail@plt+0x1298c>
   24240:	ldr	r1, [r4, #40]	; 0x28
   24244:	mov	r0, r4
   24248:	ldr	r2, [r4, #88]	; 0x58
   2424c:	sub	r1, r1, #1
   24250:	bl	212d8 <__assert_fail@plt+0xf938>
   24254:	ldr	r9, [r4, #100]	; 0x64
   24258:	mov	r3, r0
   2425c:	add	r2, sp, #4
   24260:	mov	r1, r8
   24264:	mov	r0, sl
   24268:	bl	1f2d4 <__assert_fail@plt+0xd934>
   2426c:	cmp	r7, #0
   24270:	mov	r6, r0
   24274:	str	r0, [r9, r5, lsl #2]
   24278:	beq	241d4 <__assert_fail@plt+0x12834>
   2427c:	ldr	r0, [sp, #12]
   24280:	bl	1c734 <__assert_fail@plt+0xad94>
   24284:	b	241d4 <__assert_fail@plt+0x12834>
   24288:	ldrd	r6, [r3]
   2428c:	sub	r1, r5, #1
   24290:	mov	r0, r4
   24294:	ldr	r2, [r4, #88]	; 0x58
   24298:	strd	r6, [sp, #4]
   2429c:	ldr	r3, [r3, #8]
   242a0:	str	r3, [sp, #12]
   242a4:	bl	212d8 <__assert_fail@plt+0xf938>
   242a8:	mov	r3, r0
   242ac:	add	r2, sp, #4
   242b0:	mov	r1, r8
   242b4:	mov	r0, sl
   242b8:	bl	1f2d4 <__assert_fail@plt+0xd934>
   242bc:	mov	r6, r0
   242c0:	str	r0, [r9, r5, lsl #2]
   242c4:	b	241d4 <__assert_fail@plt+0x12834>
   242c8:	cmp	r6, #0
   242cc:	beq	2432c <__assert_fail@plt+0x1298c>
   242d0:	add	r7, r6, #8
   242d4:	add	r8, r6, #12
   242d8:	mov	r1, r7
   242dc:	mov	r2, r8
   242e0:	mov	r3, r5
   242e4:	mov	r0, r4
   242e8:	bl	21e78 <__assert_fail@plt+0x104d8>
   242ec:	cmp	r0, #0
   242f0:	str	r0, [sl]
   242f4:	bne	2432c <__assert_fail@plt+0x1298c>
   242f8:	ldrb	r3, [r6, #52]	; 0x34
   242fc:	tst	r3, #64	; 0x40
   24300:	beq	241e0 <__assert_fail@plt+0x12840>
   24304:	mov	r2, r8
   24308:	mov	r1, r7
   2430c:	mov	r0, r4
   24310:	bl	239f0 <__assert_fail@plt+0x12050>
   24314:	cmp	r0, #0
   24318:	str	r0, [sl]
   2431c:	bne	2432c <__assert_fail@plt+0x1298c>
   24320:	ldr	r3, [r4, #100]	; 0x64
   24324:	ldr	r6, [r3, r5, lsl #2]
   24328:	b	241e0 <__assert_fail@plt+0x12840>
   2432c:	mov	r6, #0
   24330:	b	241e0 <__assert_fail@plt+0x12840>
   24334:	mov	r3, #1
   24338:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2433c:	ldr	r4, [r1, #8]
   24340:	strd	r6, [sp, #8]
   24344:	strd	r8, [sp, #16]
   24348:	mov	r9, r1
   2434c:	strd	sl, [sp, #24]
   24350:	mov	fp, r0
   24354:	mov	r0, #4
   24358:	str	lr, [sp, #32]
   2435c:	sub	sp, sp, #60	; 0x3c
   24360:	ldr	sl, [r1, #12]
   24364:	str	r3, [sp, #44]	; 0x2c
   24368:	str	r3, [sp, #48]	; 0x30
   2436c:	bl	1c864 <__assert_fail@plt+0xaec4>
   24370:	cmp	r0, #0
   24374:	str	r0, [sp, #52]	; 0x34
   24378:	beq	24604 <__assert_fail@plt+0x12c64>
   2437c:	mov	r2, sl
   24380:	add	r3, sp, #44	; 0x2c
   24384:	str	r4, [r0]
   24388:	mov	r1, r9
   2438c:	mov	r0, fp
   24390:	bl	26140 <__assert_fail@plt+0x147a0>
   24394:	cmp	r0, #0
   24398:	bne	245e0 <__assert_fail@plt+0x12c40>
   2439c:	cmp	sl, #0
   243a0:	addgt	r3, r9, #24
   243a4:	strgt	r0, [sp, #20]
   243a8:	strgt	r3, [sp, #36]	; 0x24
   243ac:	ble	245ac <__assert_fail@plt+0x12c0c>
   243b0:	ldr	r0, [r9]
   243b4:	lsl	r3, sl, #2
   243b8:	str	r3, [sp, #16]
   243bc:	ldr	r3, [r0, sl, lsl #2]
   243c0:	cmp	r3, #0
   243c4:	ldreq	r3, [sp, #20]
   243c8:	movne	r3, #0
   243cc:	addeq	r3, r3, #1
   243d0:	str	r3, [sp, #20]
   243d4:	ldr	r2, [sp, #20]
   243d8:	ldr	r3, [fp, #120]	; 0x78
   243dc:	cmp	r3, r2
   243e0:	blt	245e8 <__assert_fail@plt+0x12c48>
   243e4:	mov	r2, #0
   243e8:	ldr	r3, [fp, #100]	; 0x64
   243ec:	sub	sl, sl, #1
   243f0:	str	r2, [sp, #48]	; 0x30
   243f4:	ldr	r2, [sp, #16]
   243f8:	add	r3, r3, r2
   243fc:	ldr	r6, [r3, #-4]
   24400:	cmp	r6, #0
   24404:	beq	24588 <__assert_fail@plt+0x12be8>
   24408:	ldr	r3, [r6, #20]
   2440c:	ldr	r5, [fp, #84]	; 0x54
   24410:	cmp	r3, #0
   24414:	ble	24588 <__assert_fail@plt+0x12be8>
   24418:	ldr	r3, [r6, #24]
   2441c:	add	r2, r9, #20
   24420:	mov	r8, #0
   24424:	ldr	r1, [r5]
   24428:	str	r2, [sp, #28]
   2442c:	ldr	r4, [r3]
   24430:	lsl	r7, r4, #3
   24434:	add	r3, r1, r7
   24438:	b	244f8 <__assert_fail@plt+0x12b58>
   2443c:	add	r1, r1, r7
   24440:	mov	r2, sl
   24444:	mov	r0, fp
   24448:	bl	213f0 <__assert_fail@plt+0xfa50>
   2444c:	cmp	r0, #0
   24450:	beq	244d4 <__assert_fail@plt+0x12b34>
   24454:	ldr	r3, [r9]
   24458:	ldr	r2, [sp, #16]
   2445c:	ldr	r3, [r3, r2]
   24460:	cmp	r3, #0
   24464:	beq	244d4 <__assert_fail@plt+0x12b34>
   24468:	ldr	r2, [r5, #12]
   2446c:	add	r1, r3, #12
   24470:	ldr	r0, [r3, #8]
   24474:	ldr	r2, [r2, r4, lsl #2]
   24478:	bl	1e6a0 <__assert_fail@plt+0xcd00>
   2447c:	cmp	r0, #0
   24480:	beq	244d4 <__assert_fail@plt+0x12b34>
   24484:	mov	r3, #1
   24488:	ldr	r2, [r9, #20]
   2448c:	cmp	r2, #0
   24490:	beq	244c0 <__assert_fail@plt+0x12b20>
   24494:	ldr	lr, [r5, #12]
   24498:	add	ip, sl, r3
   2449c:	mov	r0, fp
   244a0:	ldr	r1, [sp, #28]
   244a4:	ldr	r2, [sp, #36]	; 0x24
   244a8:	ldr	r3, [lr, r4, lsl #2]
   244ac:	str	ip, [sp]
   244b0:	stmib	sp, {r4, sl}
   244b4:	bl	1e974 <__assert_fail@plt+0xcfd4>
   244b8:	cmp	r0, #0
   244bc:	bne	244d4 <__assert_fail@plt+0x12b34>
   244c0:	mov	r1, r4
   244c4:	add	r0, sp, #44	; 0x2c
   244c8:	bl	1e0cc <__assert_fail@plt+0xc72c>
   244cc:	cmp	r0, #0
   244d0:	beq	245b4 <__assert_fail@plt+0x12c14>
   244d4:	ldr	r3, [r6, #20]
   244d8:	add	r8, r8, #1
   244dc:	cmp	r8, r3
   244e0:	bge	24588 <__assert_fail@plt+0x12be8>
   244e4:	ldr	r3, [r6, #24]
   244e8:	ldr	r1, [r5]
   244ec:	ldr	r4, [r3, r8, lsl #2]
   244f0:	lsl	r7, r4, #3
   244f4:	add	r3, r1, r7
   244f8:	ldrb	r3, [r3, #6]
   244fc:	tst	r3, #16
   24500:	beq	2443c <__assert_fail@plt+0x12a9c>
   24504:	ldr	r0, [r9, #12]
   24508:	mov	r3, fp
   2450c:	mov	r2, r4
   24510:	ldr	r1, [fp, #84]	; 0x54
   24514:	str	r0, [sp, #24]
   24518:	str	r1, [sp, #32]
   2451c:	ldr	r0, [r1], #128	; 0x80
   24520:	str	sl, [sp]
   24524:	bl	22f94 <__assert_fail@plt+0x115f4>
   24528:	subs	r3, r0, #0
   2452c:	ble	24580 <__assert_fail@plt+0x12be0>
   24530:	ldr	r0, [sp, #24]
   24534:	add	r2, sl, r3
   24538:	cmp	r0, r2
   2453c:	blt	24488 <__assert_fail@plt+0x12ae8>
   24540:	ldr	r1, [r9]
   24544:	ldr	r2, [r1, r2, lsl #2]
   24548:	cmp	r2, #0
   2454c:	beq	24578 <__assert_fail@plt+0x12bd8>
   24550:	str	r3, [sp, #24]
   24554:	add	r1, r2, #12
   24558:	ldr	r3, [sp, #32]
   2455c:	ldr	r0, [r2, #8]
   24560:	ldr	ip, [r3, #12]
   24564:	ldr	r2, [ip, r4, lsl #2]
   24568:	bl	1e6a0 <__assert_fail@plt+0xcd00>
   2456c:	cmp	r0, #0
   24570:	ldr	r3, [sp, #24]
   24574:	bne	24488 <__assert_fail@plt+0x12ae8>
   24578:	ldr	r1, [r5]
   2457c:	b	2443c <__assert_fail@plt+0x12a9c>
   24580:	beq	24578 <__assert_fail@plt+0x12bd8>
   24584:	b	24488 <__assert_fail@plt+0x12ae8>
   24588:	add	r3, sp, #44	; 0x2c
   2458c:	mov	r2, sl
   24590:	mov	r1, r9
   24594:	mov	r0, fp
   24598:	bl	26140 <__assert_fail@plt+0x147a0>
   2459c:	cmp	r0, #0
   245a0:	bne	245e0 <__assert_fail@plt+0x12c40>
   245a4:	cmp	sl, #0
   245a8:	bne	243b0 <__assert_fail@plt+0x12a10>
   245ac:	mov	r4, #0
   245b0:	b	245b8 <__assert_fail@plt+0x12c18>
   245b4:	mov	r4, #12
   245b8:	ldr	r0, [sp, #52]	; 0x34
   245bc:	bl	1c734 <__assert_fail@plt+0xad94>
   245c0:	mov	r0, r4
   245c4:	add	sp, sp, #60	; 0x3c
   245c8:	ldrd	r4, [sp]
   245cc:	ldrd	r6, [sp, #8]
   245d0:	ldrd	r8, [sp, #16]
   245d4:	ldrd	sl, [sp, #24]
   245d8:	add	sp, sp, #32
   245dc:	pop	{pc}		; (ldr pc, [sp], #4)
   245e0:	mov	r4, r0
   245e4:	b	245b8 <__assert_fail@plt+0x12c18>
   245e8:	mov	r1, #0
   245ec:	ldr	r2, [sp, #16]
   245f0:	mov	r4, r1
   245f4:	bl	11814 <memset@plt>
   245f8:	ldr	r0, [sp, #52]	; 0x34
   245fc:	bl	1c734 <__assert_fail@plt+0xad94>
   24600:	b	245c0 <__assert_fail@plt+0x12c20>
   24604:	mov	r4, #12
   24608:	b	245c0 <__assert_fail@plt+0x12c20>
   2460c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   24610:	mov	r4, r0
   24614:	mov	r5, r3
   24618:	strd	r6, [sp, #8]
   2461c:	strd	r8, [sp, #16]
   24620:	strd	sl, [sp, #24]
   24624:	str	lr, [sp, #32]
   24628:	sub	sp, sp, #428	; 0x1ac
   2462c:	ldr	r9, [r0]
   24630:	str	r0, [sp, #32]
   24634:	add	r0, sp, #148	; 0x94
   24638:	str	r1, [sp, #56]	; 0x38
   2463c:	mov	r1, #0
   24640:	str	r2, [sp, #72]	; 0x48
   24644:	mov	r2, #136	; 0x88
   24648:	ldr	r6, [sp, #464]	; 0x1d0
   2464c:	bl	11814 <memset@plt>
   24650:	ldr	r2, [r4, #16]
   24654:	cmp	r2, #0
   24658:	str	r2, [sp, #48]	; 0x30
   2465c:	str	r9, [sp, #232]	; 0xe8
   24660:	beq	2467c <__assert_fail@plt+0x12cdc>
   24664:	ldrb	r2, [r4, #28]
   24668:	subs	r3, r5, r6
   2466c:	movne	r3, #1
   24670:	ands	r3, r3, r2, lsr #3
   24674:	streq	r3, [sp, #48]	; 0x30
   24678:	bne	24a20 <__assert_fail@plt+0x13080>
   2467c:	ldr	r3, [sp, #32]
   24680:	ldr	r2, [sp, #472]	; 0x1d8
   24684:	ldr	r3, [r3, #24]
   24688:	cmp	r3, r2
   2468c:	movcs	r3, #0
   24690:	strcs	r3, [sp, #108]	; 0x6c
   24694:	bcs	246b4 <__assert_fail@plt+0x12d14>
   24698:	sub	r2, r2, #1
   2469c:	sub	r1, r3, r2
   246a0:	sub	r3, r2, r3
   246a4:	str	r3, [sp, #108]	; 0x6c
   246a8:	ldr	r3, [sp, #472]	; 0x1d8
   246ac:	add	r3, r3, r1
   246b0:	str	r3, [sp, #472]	; 0x1d8
   246b4:	ldr	ip, [sp, #32]
   246b8:	ldr	r3, [ip, #8]
   246bc:	cmp	r3, #0
   246c0:	beq	252fc <__assert_fail@plt+0x1395c>
   246c4:	ldr	r3, [r9, #36]	; 0x24
   246c8:	cmp	r3, #0
   246cc:	beq	252fc <__assert_fail@plt+0x1395c>
   246d0:	ldr	r2, [r9, #40]	; 0x28
   246d4:	cmp	r2, #0
   246d8:	beq	252fc <__assert_fail@plt+0x1395c>
   246dc:	ldr	r1, [r9, #44]	; 0x2c
   246e0:	cmp	r1, #0
   246e4:	beq	252fc <__assert_fail@plt+0x1395c>
   246e8:	ldr	r0, [r9, #48]	; 0x30
   246ec:	cmp	r0, #0
   246f0:	beq	252fc <__assert_fail@plt+0x1395c>
   246f4:	ldr	r3, [r3, #8]
   246f8:	cmp	r3, #0
   246fc:	bne	24740 <__assert_fail@plt+0x12da0>
   24700:	ldr	r3, [r2, #8]
   24704:	cmp	r3, #0
   24708:	bne	24740 <__assert_fail@plt+0x12da0>
   2470c:	ldr	r3, [r1, #8]
   24710:	cmp	r3, #0
   24714:	beq	24724 <__assert_fail@plt+0x12d84>
   24718:	ldrsb	r3, [ip, #28]
   2471c:	cmp	r3, #0
   24720:	blt	24740 <__assert_fail@plt+0x12da0>
   24724:	adds	r6, r6, #0
   24728:	movne	r6, #1
   2472c:	cmp	r5, #0
   24730:	moveq	r6, #0
   24734:	cmp	r6, #0
   24738:	bne	252fc <__assert_fail@plt+0x1395c>
   2473c:	mov	r5, r6
   24740:	ldr	r3, [sp, #472]	; 0x1d8
   24744:	cmp	r3, #0
   24748:	bne	24a10 <__assert_fail@plt+0x13070>
   2474c:	ldr	r3, [r9, #76]	; 0x4c
   24750:	adds	r3, r3, #0
   24754:	movne	r3, #1
   24758:	str	r3, [sp, #20]
   2475c:	str	r3, [sp, #60]	; 0x3c
   24760:	ldr	r8, [sp, #32]
   24764:	add	r0, sp, #148	; 0x94
   24768:	ldr	r2, [sp, #56]	; 0x38
   2476c:	ldr	r3, [r9, #8]
   24770:	ldr	ip, [r8, #12]
   24774:	str	r2, [sp, #148]	; 0x94
   24778:	ldr	lr, [r9, #92]	; 0x5c
   2477c:	add	r3, r3, #1
   24780:	ldrb	r2, [r9, #88]	; 0x58
   24784:	and	r4, ip, #4194304	; 0x400000
   24788:	ubfx	ip, ip, #22, #1
   2478c:	ldr	r8, [r8, #20]
   24790:	cmp	r3, lr
   24794:	ldr	r7, [sp, #72]	; 0x48
   24798:	movlt	r3, lr
   2479c:	str	r8, [sp, #80]	; 0x50
   247a0:	strb	ip, [sp, #220]	; 0xdc
   247a4:	ubfx	ip, r2, #2, #1
   247a8:	add	r1, r7, #1
   247ac:	ubfx	r2, r2, #3, #1
   247b0:	str	lr, [sp, #228]	; 0xe4
   247b4:	orrs	lr, r8, r4
   247b8:	str	r7, [sp, #192]	; 0xc0
   247bc:	movne	lr, #1
   247c0:	moveq	lr, #0
   247c4:	str	r7, [sp, #196]	; 0xc4
   247c8:	cmp	r3, r1
   247cc:	str	r7, [sp, #200]	; 0xc8
   247d0:	movlt	r1, r3
   247d4:	str	r7, [sp, #204]	; 0xcc
   247d8:	str	r8, [sp, #212]	; 0xd4
   247dc:	strb	ip, [sp, #221]	; 0xdd
   247e0:	strb	r2, [sp, #222]	; 0xde
   247e4:	strb	lr, [sp, #223]	; 0xdf
   247e8:	bl	1cefc <__assert_fail@plt+0xb55c>
   247ec:	subs	r3, r0, #0
   247f0:	str	r3, [sp, #36]	; 0x24
   247f4:	bne	24ed8 <__assert_fail@plt+0x13538>
   247f8:	ldrb	r3, [r9, #88]	; 0x58
   247fc:	add	r1, r9, #96	; 0x60
   24800:	ldrb	r2, [sp, #223]	; 0xdf
   24804:	str	r1, [sp, #216]	; 0xd8
   24808:	ubfx	r3, r3, #4, #1
   2480c:	cmp	r2, #0
   24810:	strb	r3, [sp, #226]	; 0xe2
   24814:	bne	2482c <__assert_fail@plt+0x12e8c>
   24818:	ldr	r3, [r9, #92]	; 0x5c
   2481c:	ldr	r2, [sp, #56]	; 0x38
   24820:	cmp	r3, #1
   24824:	str	r2, [sp, #152]	; 0x98
   24828:	ble	253f4 <__assert_fail@plt+0x13a54>
   2482c:	mov	r2, #0
   24830:	ldr	r3, [sp, #32]
   24834:	mvn	r1, #0
   24838:	str	r2, [sp, #176]	; 0xb0
   2483c:	str	r2, [sp, #180]	; 0xb4
   24840:	ldr	r2, [sp, #468]	; 0x1d4
   24844:	ldrb	r3, [r3, #28]
   24848:	str	r2, [sp, #200]	; 0xc8
   2484c:	str	r2, [sp, #204]	; 0xcc
   24850:	ubfx	r3, r3, #7, #1
   24854:	strb	r3, [sp, #225]	; 0xe1
   24858:	ldr	r7, [r9, #76]	; 0x4c
   2485c:	str	r1, [sp, #240]	; 0xf0
   24860:	ldr	r3, [sp, #480]	; 0x1e0
   24864:	lsl	r4, r7, #1
   24868:	cmp	r4, #0
   2486c:	str	r3, [sp, #236]	; 0xec
   24870:	ble	248b0 <__assert_fail@plt+0x12f10>
   24874:	movw	r3, #43690	; 0xaaaa
   24878:	movt	r3, #2730	; 0xaaa
   2487c:	cmp	r4, r3
   24880:	bgt	25654 <__assert_fail@plt+0x13cb4>
   24884:	add	r0, r4, r7, lsl #2
   24888:	lsl	r0, r0, #3
   2488c:	bl	1c864 <__assert_fail@plt+0xaec4>
   24890:	str	r0, [sp, #264]	; 0x108
   24894:	lsl	r0, r7, #3
   24898:	bl	1c864 <__assert_fail@plt+0xaec4>
   2489c:	ldr	r3, [sp, #264]	; 0x108
   248a0:	str	r0, [sp, #280]	; 0x118
   248a4:	cmp	r0, #0
   248a8:	cmpne	r3, #0
   248ac:	beq	25654 <__assert_fail@plt+0x13cb4>
   248b0:	ldr	r2, [sp, #472]	; 0x1d8
   248b4:	mov	r3, #1
   248b8:	str	r4, [sp, #260]	; 0x104
   248bc:	str	r3, [sp, #268]	; 0x10c
   248c0:	str	r4, [sp, #276]	; 0x114
   248c4:	cmp	r2, r3
   248c8:	bls	255e8 <__assert_fail@plt+0x13c48>
   248cc:	ldr	r0, [sp, #184]	; 0xb8
   248d0:	cmn	r0, #-1073741822	; 0xc0000002
   248d4:	bhi	25654 <__assert_fail@plt+0x13cb4>
   248d8:	add	r0, r0, #1
   248dc:	lsl	r0, r0, #2
   248e0:	bl	1c864 <__assert_fail@plt+0xaec4>
   248e4:	cmp	r0, #0
   248e8:	mov	r4, r0
   248ec:	str	r0, [sp, #248]	; 0xf8
   248f0:	beq	25328 <__assert_fail@plt+0x13988>
   248f4:	ldr	r3, [sp, #480]	; 0x1e0
   248f8:	str	r5, [sp, #116]	; 0x74
   248fc:	ldr	r2, [r9, #92]	; 0x5c
   24900:	tst	r3, #1
   24904:	movne	r3, #4
   24908:	moveq	r3, #6
   2490c:	cmp	r5, r6
   24910:	str	r2, [sp, #88]	; 0x58
   24914:	str	r3, [sp, #208]	; 0xd0
   24918:	movge	r3, r5
   2491c:	movlt	r3, r6
   24920:	mvngt	r2, #0
   24924:	movle	r2, #1
   24928:	str	r3, [sp, #64]	; 0x40
   2492c:	ldr	r3, [sp, #48]	; 0x30
   24930:	str	r2, [sp, #96]	; 0x60
   24934:	movlt	r2, r5
   24938:	movge	r2, r6
   2493c:	str	r2, [sp, #76]	; 0x4c
   24940:	cmp	r3, #0
   24944:	beq	25664 <__assert_fail@plt+0x13cc4>
   24948:	ldr	r3, [sp, #88]	; 0x58
   2494c:	cmp	r3, #1
   24950:	moveq	r3, #4
   24954:	beq	24974 <__assert_fail@plt+0x12fd4>
   24958:	ldr	r3, [sp, #32]
   2495c:	ldr	r2, [sp, #80]	; 0x50
   24960:	ldr	r3, [r3, #12]
   24964:	and	r3, r3, #4194304	; 0x400000
   24968:	orrs	r3, r2, r3
   2496c:	moveq	r3, #4
   24970:	movne	r3, #0
   24974:	ldr	r2, [sp, #36]	; 0x24
   24978:	cmp	r5, r6
   2497c:	movle	r2, #2
   24980:	ldr	r1, [sp, #80]	; 0x50
   24984:	cmp	r1, #0
   24988:	orrne	r3, r3, #1
   2498c:	orr	r3, r3, r2
   24990:	ldr	r1, [sp, #64]	; 0x40
   24994:	ldr	r2, [sp, #76]	; 0x4c
   24998:	cmp	r5, r2
   2499c:	movge	r2, #0
   249a0:	movlt	r2, #1
   249a4:	cmp	r5, r1
   249a8:	orrgt	r2, r2, #1
   249ac:	cmp	r2, #0
   249b0:	bne	24ed0 <__assert_fail@plt+0x13530>
   249b4:	add	r2, sp, #424	; 0x1a8
   249b8:	cmp	r5, r6
   249bc:	str	r9, [sp, #68]	; 0x44
   249c0:	sub	r3, r3, #4
   249c4:	suble	r2, r2, #308	; 0x134
   249c8:	movgt	r2, #0
   249cc:	str	r3, [sp, #92]	; 0x5c
   249d0:	adds	r3, r2, #0
   249d4:	movne	r3, #1
   249d8:	str	r2, [sp, #100]	; 0x64
   249dc:	str	r3, [sp, #104]	; 0x68
   249e0:	mov	r3, #65280	; 0xff00
   249e4:	movt	r3, #3
   249e8:	str	r3, [sp, #52]	; 0x34
   249ec:	ldr	r3, [sp, #92]	; 0x5c
   249f0:	cmp	r3, #4
   249f4:	ldrls	pc, [pc, r3, lsl #2]
   249f8:	b	25680 <__assert_fail@plt+0x13ce0>
   249fc:	andeq	r4, r2, r8, asr #30
   24a00:	andeq	r4, r2, r8, asr #30
   24a04:	andeq	r4, r2, r0, ror #29
   24a08:	andeq	r4, r2, ip, lsl lr
   24a0c:	andeq	r4, r2, r8, lsr sl
   24a10:	mov	r3, #1
   24a14:	str	r3, [sp, #20]
   24a18:	str	r3, [sp, #60]	; 0x3c
   24a1c:	b	24760 <__assert_fail@plt+0x12dc0>
   24a20:	ldr	r3, [sp, #48]	; 0x30
   24a24:	tst	r2, #1
   24a28:	movne	r3, #0
   24a2c:	str	r3, [sp, #48]	; 0x30
   24a30:	b	2467c <__assert_fail@plt+0x12cdc>
   24a34:	str	r5, [sp, #116]	; 0x74
   24a38:	mov	r1, r5
   24a3c:	add	r0, sp, #148	; 0x94
   24a40:	ldr	r2, [sp, #480]	; 0x1e0
   24a44:	bl	2160c <__assert_fail@plt+0xfc6c>
   24a48:	subs	r3, r0, #0
   24a4c:	str	r3, [sp, #36]	; 0x24
   24a50:	bne	256b4 <__assert_fail@plt+0x13d14>
   24a54:	ldr	r3, [sp, #88]	; 0x58
   24a58:	cmp	r3, #1
   24a5c:	beq	24a7c <__assert_fail@plt+0x130dc>
   24a60:	ldr	r3, [sp, #176]	; 0xb0
   24a64:	cmp	r3, #0
   24a68:	beq	24a7c <__assert_fail@plt+0x130dc>
   24a6c:	ldr	r3, [sp, #156]	; 0x9c
   24a70:	ldr	r3, [r3]
   24a74:	cmn	r3, #1
   24a78:	beq	252ac <__assert_fail@plt+0x1390c>
   24a7c:	ldr	r4, [sp, #232]	; 0xe8
   24a80:	mov	r3, #0
   24a84:	ldr	sl, [r4, #36]	; 0x24
   24a88:	str	r3, [sp, #124]	; 0x7c
   24a8c:	str	r3, [sp, #252]	; 0xfc
   24a90:	str	r3, [sp, #256]	; 0x100
   24a94:	str	r3, [sp, #268]	; 0x10c
   24a98:	ldr	r3, [sp, #188]	; 0xbc
   24a9c:	mov	r2, r3
   24aa0:	ldrsb	r3, [sl, #52]	; 0x34
   24aa4:	str	r2, [sp, #12]
   24aa8:	cmp	r3, #0
   24aac:	bge	24aec <__assert_fail@plt+0x1314c>
   24ab0:	sub	r1, r2, #1
   24ab4:	add	r0, sp, #148	; 0x94
   24ab8:	ldr	r2, [sp, #236]	; 0xec
   24abc:	bl	212d8 <__assert_fail@plt+0xf938>
   24ac0:	tst	r0, #1
   24ac4:	bne	25614 <__assert_fail@plt+0x13c74>
   24ac8:	cmp	r0, #0
   24acc:	beq	24aec <__assert_fail@plt+0x1314c>
   24ad0:	and	r3, r0, #6
   24ad4:	cmp	r3, #6
   24ad8:	beq	257a4 <__assert_fail@plt+0x13e04>
   24adc:	tst	r0, #2
   24ae0:	bne	256f8 <__assert_fail@plt+0x13d58>
   24ae4:	tst	r0, #4
   24ae8:	bne	25720 <__assert_fail@plt+0x13d80>
   24aec:	ldr	r3, [sp, #248]	; 0xf8
   24af0:	cmp	r3, #0
   24af4:	beq	253bc <__assert_fail@plt+0x13a1c>
   24af8:	ldr	r2, [r4, #76]	; 0x4c
   24afc:	ldr	r1, [sp, #12]
   24b00:	cmp	r2, #0
   24b04:	str	sl, [r3, r1, lsl #2]
   24b08:	bne	25760 <__assert_fail@plt+0x13dc0>
   24b0c:	ldrb	r3, [sl, #52]	; 0x34
   24b10:	ldr	r2, [sp, #104]	; 0x68
   24b14:	str	r2, [sp, #16]
   24b18:	ubfx	r3, r3, #4, #1
   24b1c:	cmp	r3, #0
   24b20:	mvneq	fp, #0
   24b24:	streq	r3, [sp, #28]
   24b28:	bne	256c0 <__assert_fail@plt+0x13d20>
   24b2c:	ldr	r3, [sp, #100]	; 0x64
   24b30:	str	fp, [sp, #24]
   24b34:	ldr	r4, [sp, #188]	; 0xbc
   24b38:	str	r3, [sp, #40]	; 0x28
   24b3c:	b	24ba0 <__assert_fail@plt+0x13200>
   24b40:	ldrb	r3, [r5, #52]	; 0x34
   24b44:	ldr	r2, [sp, #16]
   24b48:	ldr	r1, [sp, #12]
   24b4c:	ldr	r4, [sp, #188]	; 0xbc
   24b50:	cmp	sl, r5
   24b54:	movne	r2, #0
   24b58:	andeq	r2, r2, #1
   24b5c:	cmp	r2, #0
   24b60:	movne	r1, r8
   24b64:	tst	r3, #16
   24b68:	str	r1, [sp, #12]
   24b6c:	str	r2, [sp, #16]
   24b70:	beq	24b9c <__assert_fail@plt+0x131fc>
   24b74:	tst	r3, #128	; 0x80
   24b78:	bne	24ff8 <__assert_fail@plt+0x13658>
   24b7c:	ldr	r3, [sp, #20]
   24b80:	cmp	r3, #0
   24b84:	beq	256f0 <__assert_fail@plt+0x13d50>
   24b88:	ldr	r3, [sp, #20]
   24b8c:	str	r4, [sp, #24]
   24b90:	str	r3, [sp, #28]
   24b94:	mov	r3, #0
   24b98:	str	r3, [sp, #40]	; 0x28
   24b9c:	mov	sl, r5
   24ba0:	ldr	r3, [sp, #204]	; 0xcc
   24ba4:	cmp	r3, r4
   24ba8:	ble	24ff0 <__assert_fail@plt+0x13650>
   24bac:	ldr	r3, [sp, #184]	; 0xb8
   24bb0:	add	r8, r4, #1
   24bb4:	cmp	r8, r3
   24bb8:	bge	25014 <__assert_fail@plt+0x13674>
   24bbc:	ldr	r3, [sp, #176]	; 0xb0
   24bc0:	cmp	r8, r3
   24bc4:	bge	25280 <__assert_fail@plt+0x138e0>
   24bc8:	ldrb	r3, [sl, #52]	; 0x34
   24bcc:	tst	r3, #32
   24bd0:	bne	25048 <__assert_fail@plt+0x136a8>
   24bd4:	ldr	r3, [sp, #152]	; 0x98
   24bd8:	add	r2, r4, #1
   24bdc:	str	r2, [sp, #188]	; 0xbc
   24be0:	ldrb	r4, [r3, r4]
   24be4:	ldr	r3, [sl, #44]	; 0x2c
   24be8:	cmp	r3, #0
   24bec:	beq	25250 <__assert_fail@plt+0x138b0>
   24bf0:	ldr	r5, [r3, r4, lsl #2]
   24bf4:	ldr	r3, [sp, #248]	; 0xf8
   24bf8:	cmp	r3, #0
   24bfc:	beq	24c14 <__assert_fail@plt+0x13274>
   24c00:	mov	r2, r5
   24c04:	add	r1, sp, #148	; 0x94
   24c08:	add	r0, sp, #124	; 0x7c
   24c0c:	bl	24190 <__assert_fail@plt+0x127f0>
   24c10:	mov	r5, r0
   24c14:	cmp	r5, #0
   24c18:	bne	24b40 <__assert_fail@plt+0x131a0>
   24c1c:	ldr	r3, [sp, #124]	; 0x7c
   24c20:	ldr	r4, [sp, #248]	; 0xf8
   24c24:	cmp	r3, #0
   24c28:	bne	25324 <__assert_fail@plt+0x13984>
   24c2c:	cmp	r4, #0
   24c30:	beq	24ff0 <__assert_fail@plt+0x13650>
   24c34:	ldr	r2, [sp, #28]
   24c38:	ldr	r3, [sp, #60]	; 0x3c
   24c3c:	eor	r3, r3, #1
   24c40:	tst	r2, r3
   24c44:	bne	24ff0 <__assert_fail@plt+0x13650>
   24c48:	ldr	r3, [sp, #188]	; 0xbc
   24c4c:	mov	r1, #0
   24c50:	ldr	r0, [sp, #252]	; 0xfc
   24c54:	add	r4, r4, r3, lsl #2
   24c58:	b	24c70 <__assert_fail@plt+0x132d0>
   24c5c:	ldr	ip, [r4, #4]!
   24c60:	mov	r3, r2
   24c64:	mov	r1, #1
   24c68:	cmp	ip, #0
   24c6c:	bne	24fb4 <__assert_fail@plt+0x13614>
   24c70:	add	r2, r3, #1
   24c74:	cmp	r0, r2
   24c78:	bge	24c5c <__assert_fail@plt+0x132bc>
   24c7c:	ldr	fp, [sp, #24]
   24c80:	cmp	r1, #0
   24c84:	strne	r3, [sp, #188]	; 0xbc
   24c88:	ldr	r2, [sp, #40]	; 0x28
   24c8c:	cmp	r2, #0
   24c90:	beq	24ca4 <__assert_fail@plt+0x13304>
   24c94:	ldr	r3, [r2]
   24c98:	ldr	r1, [sp, #12]
   24c9c:	add	r3, r3, r1
   24ca0:	str	r3, [r2]
   24ca4:	cmn	fp, #1
   24ca8:	beq	252a0 <__assert_fail@plt+0x13900>
   24cac:	cmn	fp, #2
   24cb0:	ldr	r4, [sp, #248]	; 0xf8
   24cb4:	beq	25324 <__assert_fail@plt+0x13984>
   24cb8:	ldr	r3, [sp, #32]
   24cbc:	str	fp, [sp, #240]	; 0xf0
   24cc0:	ldrb	r3, [r3, #28]
   24cc4:	tst	r3, #16
   24cc8:	bne	25360 <__assert_fail@plt+0x139c0>
   24ccc:	ldr	r2, [sp, #472]	; 0x1d8
   24cd0:	cmp	r2, #1
   24cd4:	bls	253cc <__assert_fail@plt+0x13a2c>
   24cd8:	mov	r2, fp
   24cdc:	add	r0, sp, #148	; 0x94
   24ce0:	ldr	r1, [r4, fp, lsl #2]
   24ce4:	bl	21528 <__assert_fail@plt+0xfb88>
   24ce8:	ldr	r3, [sp, #68]	; 0x44
   24cec:	ldrb	r3, [r3, #88]	; 0x58
   24cf0:	str	r0, [sp, #244]	; 0xf4
   24cf4:	tst	r3, #1
   24cf8:	bne	24d0c <__assert_fail@plt+0x1336c>
   24cfc:	ldr	r3, [sp, #68]	; 0x44
   24d00:	ldr	r3, [r3, #76]	; 0x4c
   24d04:	cmp	r3, #0
   24d08:	beq	260d4 <__assert_fail@plt+0x14734>
   24d0c:	ldr	r3, [sp, #232]	; 0xe8
   24d10:	cmn	fp, #-1073741822	; 0xc0000002
   24d14:	ldr	r9, [sp, #244]	; 0xf4
   24d18:	str	r3, [sp, #12]
   24d1c:	bhi	25324 <__assert_fail@plt+0x13984>
   24d20:	add	r5, fp, #1
   24d24:	lsl	r4, r5, #2
   24d28:	mov	r0, r4
   24d2c:	bl	1c864 <__assert_fail@plt+0xaec4>
   24d30:	subs	sl, r0, #0
   24d34:	beq	25700 <__assert_fail@plt+0x13d60>
   24d38:	ldr	r3, [sp, #12]
   24d3c:	ldr	r6, [r3, #76]	; 0x4c
   24d40:	cmp	r6, #0
   24d44:	beq	253fc <__assert_fail@plt+0x13a5c>
   24d48:	mov	r0, r4
   24d4c:	bl	1c864 <__assert_fail@plt+0xaec4>
   24d50:	cmp	r0, #0
   24d54:	mov	r6, r0
   24d58:	str	r0, [sp, #24]
   24d5c:	beq	257d8 <__assert_fail@plt+0x13e38>
   24d60:	add	r4, sp, #300	; 0x12c
   24d64:	mov	r8, #0
   24d68:	lsl	r7, r5, #2
   24d6c:	mov	r1, #0
   24d70:	mov	r0, r6
   24d74:	mov	r2, r7
   24d78:	bl	11814 <memset@plt>
   24d7c:	add	r1, sp, #284	; 0x11c
   24d80:	add	r0, sp, #148	; 0x94
   24d84:	str	sl, [sp, #284]	; 0x11c
   24d88:	str	r6, [sp, #288]	; 0x120
   24d8c:	str	r9, [sp, #292]	; 0x124
   24d90:	str	fp, [sp, #296]	; 0x128
   24d94:	str	r8, [r4]
   24d98:	str	r8, [r4, #4]
   24d9c:	str	r8, [r4, #8]
   24da0:	bl	24334 <__assert_fail@plt+0x12994>
   24da4:	mov	r3, r0
   24da8:	ldr	r0, [sp, #308]	; 0x134
   24dac:	str	r3, [sp, #16]
   24db0:	bl	1c734 <__assert_fail@plt+0xad94>
   24db4:	ldr	r3, [sp, #16]
   24db8:	cmp	r3, #0
   24dbc:	bne	257ac <__assert_fail@plt+0x13e0c>
   24dc0:	ldr	r3, [sl]
   24dc4:	cmp	r3, #0
   24dc8:	bne	25800 <__assert_fail@plt+0x13e60>
   24dcc:	ldr	r3, [r6]
   24dd0:	cmp	r3, #0
   24dd4:	bne	25800 <__assert_fail@plt+0x13e60>
   24dd8:	ldr	r3, [sp, #248]	; 0xf8
   24ddc:	sub	r7, r7, #4
   24de0:	add	r3, r3, r7
   24de4:	subs	fp, fp, #1
   24de8:	bcc	25634 <__assert_fail@plt+0x13c94>
   24dec:	ldr	r1, [r3, #-4]!
   24df0:	cmp	r1, #0
   24df4:	beq	24de4 <__assert_fail@plt+0x13444>
   24df8:	ldrb	r2, [r1, #52]	; 0x34
   24dfc:	tst	r2, #16
   24e00:	beq	24de4 <__assert_fail@plt+0x13444>
   24e04:	mov	r2, fp
   24e08:	add	r0, sp, #148	; 0x94
   24e0c:	bl	21528 <__assert_fail@plt+0xfb88>
   24e10:	add	r5, fp, #1
   24e14:	mov	r9, r0
   24e18:	b	24d68 <__assert_fail@plt+0x133c8>
   24e1c:	ldr	r3, [sp, #64]	; 0x40
   24e20:	cmp	r3, r5
   24e24:	ble	24e90 <__assert_fail@plt+0x134f0>
   24e28:	ldr	r3, [sp, #56]	; 0x38
   24e2c:	ldr	r1, [sp, #80]	; 0x50
   24e30:	ldrb	r2, [r3, r5]
   24e34:	add	r3, r3, r5
   24e38:	ldrb	r2, [r1, r2]
   24e3c:	ldr	r1, [sp, #48]	; 0x30
   24e40:	ldrb	r2, [r1, r2]
   24e44:	cmp	r2, #0
   24e48:	bne	24a38 <__assert_fail@plt+0x13098>
   24e4c:	ldr	ip, [sp, #48]	; 0x30
   24e50:	ldr	r2, [sp, #56]	; 0x38
   24e54:	ldr	r1, [sp, #64]	; 0x40
   24e58:	ldr	lr, [sp, #80]	; 0x50
   24e5c:	sub	r0, r2, #1
   24e60:	rsb	r2, r2, #1
   24e64:	add	r0, r0, r1
   24e68:	b	24e80 <__assert_fail@plt+0x134e0>
   24e6c:	ldrb	r1, [r3, #1]!
   24e70:	ldrb	r1, [lr, r1]
   24e74:	ldrb	r1, [ip, r1]
   24e78:	cmp	r1, #0
   24e7c:	bne	24a34 <__assert_fail@plt+0x13094>
   24e80:	cmp	r3, r0
   24e84:	add	r5, r2, r3
   24e88:	bne	24e6c <__assert_fail@plt+0x134cc>
   24e8c:	str	r5, [sp, #116]	; 0x74
   24e90:	ldr	r3, [sp, #64]	; 0x40
   24e94:	cmp	r3, r5
   24e98:	bne	24a38 <__assert_fail@plt+0x13098>
   24e9c:	ldr	r2, [sp, #72]	; 0x48
   24ea0:	cmp	r2, r3
   24ea4:	ldrgt	r2, [sp, #56]	; 0x38
   24ea8:	movle	r3, #0
   24eac:	ldrbgt	r3, [r2, r3]
   24eb0:	ldr	r2, [sp, #80]	; 0x50
   24eb4:	cmp	r2, #0
   24eb8:	ldrbne	r3, [r2, r3]
   24ebc:	ldr	r2, [sp, #48]	; 0x30
   24ec0:	ldrb	r3, [r2, r3]
   24ec4:	cmp	r3, #0
   24ec8:	bne	24a38 <__assert_fail@plt+0x13098>
   24ecc:	ldr	r9, [sp, #68]	; 0x44
   24ed0:	mov	r3, #1
   24ed4:	str	r3, [sp, #36]	; 0x24
   24ed8:	ldr	r4, [sp, #248]	; 0xf8
   24edc:	b	25330 <__assert_fail@plt+0x13990>
   24ee0:	ldr	r3, [sp, #64]	; 0x40
   24ee4:	cmp	r3, r5
   24ee8:	ble	24e90 <__assert_fail@plt+0x134f0>
   24eec:	ldr	r1, [sp, #48]	; 0x30
   24ef0:	ldr	r3, [sp, #56]	; 0x38
   24ef4:	ldrb	r2, [r3, r5]
   24ef8:	add	r3, r3, r5
   24efc:	ldrb	r2, [r1, r2]
   24f00:	cmp	r2, #0
   24f04:	bne	24a38 <__assert_fail@plt+0x13098>
   24f08:	ldr	ip, [sp, #48]	; 0x30
   24f0c:	ldr	r2, [sp, #56]	; 0x38
   24f10:	ldr	r1, [sp, #64]	; 0x40
   24f14:	sub	r0, r2, #1
   24f18:	rsb	r2, r2, #1
   24f1c:	add	r0, r0, r1
   24f20:	b	24f34 <__assert_fail@plt+0x13594>
   24f24:	ldrb	r1, [r3, #1]!
   24f28:	ldrb	r1, [ip, r1]
   24f2c:	cmp	r1, #0
   24f30:	bne	24a34 <__assert_fail@plt+0x13094>
   24f34:	cmp	r0, r3
   24f38:	add	r5, r2, r3
   24f3c:	bne	24f24 <__assert_fail@plt+0x13584>
   24f40:	str	r5, [sp, #116]	; 0x74
   24f44:	b	24e90 <__assert_fail@plt+0x134f0>
   24f48:	ldr	r3, [sp, #76]	; 0x4c
   24f4c:	cmp	r3, r5
   24f50:	bgt	24ecc <__assert_fail@plt+0x1352c>
   24f54:	mov	r1, #0
   24f58:	mov	r3, r5
   24f5c:	ldr	ip, [sp, #48]	; 0x30
   24f60:	ldr	r6, [sp, #56]	; 0x38
   24f64:	ldr	lr, [sp, #72]	; 0x48
   24f68:	ldr	r4, [sp, #76]	; 0x4c
   24f6c:	ldr	r0, [sp, #80]	; 0x50
   24f70:	b	24f84 <__assert_fail@plt+0x135e4>
   24f74:	sub	r3, r3, #1
   24f78:	mov	r1, #1
   24f7c:	cmp	r3, r4
   24f80:	blt	2566c <__assert_fail@plt+0x13ccc>
   24f84:	cmp	lr, r3
   24f88:	mov	r2, #0
   24f8c:	ldrbgt	r2, [r6, r3]
   24f90:	cmp	r0, #0
   24f94:	ldrbne	r2, [r0, r2]
   24f98:	ldrb	r2, [ip, r2]
   24f9c:	cmp	r2, #0
   24fa0:	beq	24f74 <__assert_fail@plt+0x135d4>
   24fa4:	cmp	r1, #0
   24fa8:	movne	r5, r3
   24fac:	strne	r3, [sp, #116]	; 0x74
   24fb0:	b	24a38 <__assert_fail@plt+0x13098>
   24fb4:	mov	r2, #0
   24fb8:	add	r1, sp, #148	; 0x94
   24fbc:	str	r3, [sp, #188]	; 0xbc
   24fc0:	add	r0, sp, #124	; 0x7c
   24fc4:	bl	24190 <__assert_fail@plt+0x127f0>
   24fc8:	ldr	r3, [sp, #124]	; 0x7c
   24fcc:	cmp	r3, #0
   24fd0:	bne	24fe4 <__assert_fail@plt+0x13644>
   24fd4:	cmp	r0, #0
   24fd8:	bne	256e8 <__assert_fail@plt+0x13d48>
   24fdc:	ldr	r4, [sp, #248]	; 0xf8
   24fe0:	b	24c48 <__assert_fail@plt+0x132a8>
   24fe4:	cmp	r0, #0
   24fe8:	mov	r5, r0
   24fec:	bne	24b40 <__assert_fail@plt+0x131a0>
   24ff0:	ldr	fp, [sp, #24]
   24ff4:	b	24c88 <__assert_fail@plt+0x132e8>
   24ff8:	mov	r2, r4
   24ffc:	mov	r1, r5
   25000:	add	r0, sp, #148	; 0x94
   25004:	bl	21528 <__assert_fail@plt+0xfb88>
   25008:	cmp	r0, #0
   2500c:	beq	24b9c <__assert_fail@plt+0x131fc>
   25010:	b	24b7c <__assert_fail@plt+0x131dc>
   25014:	ldr	r2, [sp, #196]	; 0xc4
   25018:	cmp	r3, r2
   2501c:	bge	24bbc <__assert_fail@plt+0x1321c>
   25020:	add	r1, r4, #2
   25024:	add	r0, sp, #148	; 0x94
   25028:	bl	1d934 <__assert_fail@plt+0xbf94>
   2502c:	cmp	r0, #0
   25030:	str	r0, [sp, #124]	; 0x7c
   25034:	bne	25620 <__assert_fail@plt+0x13c80>
   25038:	ldrb	r3, [sl, #52]	; 0x34
   2503c:	ldr	r4, [sp, #188]	; 0xbc
   25040:	tst	r3, #32
   25044:	beq	24bd4 <__assert_fail@plt+0x13234>
   25048:	ldr	fp, [sl, #8]
   2504c:	ldr	r6, [sp, #232]	; 0xe8
   25050:	cmp	fp, #0
   25054:	ble	25354 <__assert_fail@plt+0x139b4>
   25058:	add	r3, r6, #128	; 0x80
   2505c:	mov	r7, #0
   25060:	str	r3, [sp, #44]	; 0x2c
   25064:	str	r8, [sp, #84]	; 0x54
   25068:	b	25188 <__assert_fail@plt+0x137e8>
   2506c:	tst	r0, #1
   25070:	beq	2517c <__assert_fail@plt+0x137dc>
   25074:	tst	r5, #8
   25078:	bne	2517c <__assert_fail@plt+0x137dc>
   2507c:	tst	r5, #32
   25080:	beq	2508c <__assert_fail@plt+0x136ec>
   25084:	tst	r0, #2
   25088:	beq	2517c <__assert_fail@plt+0x137dc>
   2508c:	tst	r5, #128	; 0x80
   25090:	beq	2509c <__assert_fail@plt+0x136fc>
   25094:	tst	r0, #8
   25098:	beq	2517c <__assert_fail@plt+0x137dc>
   2509c:	mov	r0, r8
   250a0:	add	r3, sp, #148	; 0x94
   250a4:	str	r4, [sp]
   250a8:	mov	r2, r9
   250ac:	ldr	r1, [sp, #44]	; 0x2c
   250b0:	bl	22f94 <__assert_fail@plt+0x115f4>
   250b4:	subs	r4, r0, #0
   250b8:	beq	25174 <__assert_fail@plt+0x137d4>
   250bc:	ldr	r2, [sp, #188]	; 0xbc
   250c0:	add	r0, sp, #148	; 0x94
   250c4:	ldr	r3, [sp, #268]	; 0x10c
   250c8:	cmp	r3, r4
   250cc:	movlt	r3, r4
   250d0:	add	r4, r4, r2
   250d4:	mov	r1, r4
   250d8:	str	r3, [sp, #268]	; 0x10c
   250dc:	bl	1e4c8 <__assert_fail@plt+0xcb28>
   250e0:	cmp	r0, #0
   250e4:	str	r0, [sp, #136]	; 0x88
   250e8:	bne	252e0 <__assert_fail@plt+0x13940>
   250ec:	ldr	r3, [r6, #12]
   250f0:	ldr	r5, [sp, #248]	; 0xf8
   250f4:	ldr	r2, [r6, #24]
   250f8:	ldr	r3, [r3, r9, lsl #2]
   250fc:	ldr	r1, [r5, r4, lsl #2]
   25100:	add	r3, r3, r3, lsl #1
   25104:	lsl	r3, r3, #2
   25108:	cmp	r1, #0
   2510c:	add	ip, r2, r3
   25110:	beq	251e4 <__assert_fail@plt+0x13844>
   25114:	mov	r2, ip
   25118:	add	r0, sp, #284	; 0x11c
   2511c:	ldr	r1, [r1, #40]	; 0x28
   25120:	bl	1f168 <__assert_fail@plt+0xd7c8>
   25124:	cmp	r0, #0
   25128:	str	r0, [sp, #136]	; 0x88
   2512c:	bne	252e0 <__assert_fail@plt+0x13940>
   25130:	sub	r1, r4, #1
   25134:	add	r0, sp, #148	; 0x94
   25138:	ldr	r2, [sp, #236]	; 0xec
   2513c:	bl	212d8 <__assert_fail@plt+0xf938>
   25140:	ldr	r5, [sp, #248]	; 0xf8
   25144:	mov	r3, r0
   25148:	add	r2, sp, #284	; 0x11c
   2514c:	mov	r1, r6
   25150:	add	r0, sp, #136	; 0x88
   25154:	bl	1f2d4 <__assert_fail@plt+0xd934>
   25158:	str	r0, [r5, r4, lsl #2]
   2515c:	ldr	r0, [sp, #292]	; 0x124
   25160:	bl	1c734 <__assert_fail@plt+0xad94>
   25164:	ldr	r3, [sp, #248]	; 0xf8
   25168:	ldr	r2, [r3, r4, lsl #2]
   2516c:	cmp	r2, #0
   25170:	beq	2523c <__assert_fail@plt+0x1389c>
   25174:	ldr	fp, [sl, #8]
   25178:	ldr	r4, [sp, #188]	; 0xbc
   2517c:	add	r7, r7, #1
   25180:	cmp	r7, fp
   25184:	bge	25350 <__assert_fail@plt+0x139b0>
   25188:	ldr	r2, [sl, #12]
   2518c:	ldr	r8, [r6]
   25190:	ldr	r9, [r2, r7, lsl #2]
   25194:	add	r2, r8, r9, lsl #3
   25198:	ldrb	r1, [r2, #6]
   2519c:	tst	r1, #16
   251a0:	beq	2517c <__assert_fail@plt+0x137dc>
   251a4:	ldr	r5, [r2, #4]
   251a8:	ldr	r3, [sp, #52]	; 0x34
   251ac:	tst	r3, r5
   251b0:	beq	2509c <__assert_fail@plt+0x136fc>
   251b4:	ubfx	r5, r5, #8, #10
   251b8:	mov	r1, r4
   251bc:	add	r0, sp, #148	; 0x94
   251c0:	ldr	r2, [sp, #236]	; 0xec
   251c4:	bl	212d8 <__assert_fail@plt+0xf938>
   251c8:	tst	r5, #4
   251cc:	bne	2506c <__assert_fail@plt+0x136cc>
   251d0:	tst	r5, #8
   251d4:	beq	2507c <__assert_fail@plt+0x136dc>
   251d8:	tst	r0, #1
   251dc:	beq	2507c <__assert_fail@plt+0x136dc>
   251e0:	b	2517c <__assert_fail@plt+0x137dc>
   251e4:	add	r2, r2, r3
   251e8:	sub	r1, r4, #1
   251ec:	ldrd	r2, [r2]
   251f0:	add	r0, sp, #148	; 0x94
   251f4:	mov	r8, r2
   251f8:	mov	r9, r3
   251fc:	ldr	r2, [sp, #236]	; 0xec
   25200:	add	r3, sp, #284	; 0x11c
   25204:	strd	r8, [r3]
   25208:	ldr	r3, [ip, #8]
   2520c:	str	r3, [sp, #292]	; 0x124
   25210:	bl	212d8 <__assert_fail@plt+0xf938>
   25214:	mov	r3, r0
   25218:	add	r2, sp, #284	; 0x11c
   2521c:	mov	r1, r6
   25220:	add	r0, sp, #136	; 0x88
   25224:	bl	1f2d4 <__assert_fail@plt+0xd934>
   25228:	ldr	r3, [sp, #248]	; 0xf8
   2522c:	str	r0, [r5, r4, lsl #2]
   25230:	ldr	r2, [r3, r4, lsl #2]
   25234:	cmp	r2, #0
   25238:	bne	25174 <__assert_fail@plt+0x137d4>
   2523c:	ldr	r0, [sp, #136]	; 0x88
   25240:	cmp	r0, #0
   25244:	beq	25174 <__assert_fail@plt+0x137d4>
   25248:	ldr	r8, [sp, #84]	; 0x54
   2524c:	b	252e8 <__assert_fail@plt+0x13948>
   25250:	ldr	r5, [sl, #48]	; 0x30
   25254:	cmp	r5, #0
   25258:	beq	25388 <__assert_fail@plt+0x139e8>
   2525c:	ldr	r1, [sp, #188]	; 0xbc
   25260:	add	r0, sp, #148	; 0x94
   25264:	ldr	r2, [sp, #236]	; 0xec
   25268:	sub	r1, r1, #1
   2526c:	bl	212d8 <__assert_fail@plt+0xf938>
   25270:	tst	r0, #1
   25274:	addne	r4, r4, #256	; 0x100
   25278:	ldr	r5, [r5, r4, lsl #2]
   2527c:	b	24bf4 <__assert_fail@plt+0x13254>
   25280:	ldr	r2, [sp, #196]	; 0xc4
   25284:	cmp	r3, r2
   25288:	bge	24bc8 <__assert_fail@plt+0x13228>
   2528c:	b	25020 <__assert_fail@plt+0x13680>
   25290:	mov	r0, sl
   25294:	bl	1c734 <__assert_fail@plt+0xad94>
   25298:	mov	r0, r4
   2529c:	bl	1c734 <__assert_fail@plt+0xad94>
   252a0:	add	r0, sp, #148	; 0x94
   252a4:	bl	1de24 <__assert_fail@plt+0xc484>
   252a8:	ldr	r5, [sp, #116]	; 0x74
   252ac:	ldr	r2, [sp, #76]	; 0x4c
   252b0:	ldr	r3, [sp, #96]	; 0x60
   252b4:	add	r5, r5, r3
   252b8:	ldr	r3, [sp, #64]	; 0x40
   252bc:	str	r5, [sp, #116]	; 0x74
   252c0:	cmp	r5, r3
   252c4:	movle	r3, #0
   252c8:	movgt	r3, #1
   252cc:	cmp	r5, r2
   252d0:	orrlt	r3, r3, #1
   252d4:	cmp	r3, #0
   252d8:	beq	249ec <__assert_fail@plt+0x1304c>
   252dc:	b	24ecc <__assert_fail@plt+0x1352c>
   252e0:	ldr	r8, [sp, #84]	; 0x54
   252e4:	ldr	r3, [sp, #248]	; 0xf8
   252e8:	cmp	r3, #0
   252ec:	str	r0, [sp, #124]	; 0x7c
   252f0:	beq	253b0 <__assert_fail@plt+0x13a10>
   252f4:	mov	r5, #0
   252f8:	b	24c00 <__assert_fail@plt+0x13260>
   252fc:	mov	r3, #1
   25300:	str	r3, [sp, #36]	; 0x24
   25304:	ldr	r0, [sp, #36]	; 0x24
   25308:	add	sp, sp, #428	; 0x1ac
   2530c:	ldrd	r4, [sp]
   25310:	ldrd	r6, [sp, #8]
   25314:	ldrd	r8, [sp, #16]
   25318:	ldrd	sl, [sp, #24]
   2531c:	add	sp, sp, #32
   25320:	pop	{pc}		; (ldr pc, [sp], #4)
   25324:	ldr	r9, [sp, #68]	; 0x44
   25328:	mov	r3, #12
   2532c:	str	r3, [sp, #36]	; 0x24
   25330:	mov	r0, r4
   25334:	bl	1c734 <__assert_fail@plt+0xad94>
   25338:	ldr	r3, [r9, #76]	; 0x4c
   2533c:	cmp	r3, #0
   25340:	bne	255f8 <__assert_fail@plt+0x13c58>
   25344:	add	r0, sp, #148	; 0x94
   25348:	bl	1dddc <__assert_fail@plt+0xc43c>
   2534c:	b	25304 <__assert_fail@plt+0x13964>
   25350:	ldr	r8, [sp, #84]	; 0x54
   25354:	mov	r3, #0
   25358:	str	r3, [sp, #124]	; 0x7c
   2535c:	b	24bd4 <__assert_fail@plt+0x13234>
   25360:	ldr	r9, [sp, #68]	; 0x44
   25364:	ldr	r3, [r9, #76]	; 0x4c
   25368:	cmp	r3, #0
   2536c:	beq	25478 <__assert_fail@plt+0x13ad8>
   25370:	mov	r2, fp
   25374:	add	r0, sp, #148	; 0x94
   25378:	ldr	r1, [r4, fp, lsl #2]
   2537c:	bl	21528 <__assert_fail@plt+0xfb88>
   25380:	str	r0, [sp, #244]	; 0xf4
   25384:	b	24d0c <__assert_fail@plt+0x1336c>
   25388:	mov	r1, sl
   2538c:	ldr	r0, [sp, #232]	; 0xe8
   25390:	bl	207d0 <__assert_fail@plt+0xee30>
   25394:	cmp	r0, #0
   25398:	bne	24be4 <__assert_fail@plt+0x13244>
   2539c:	ldr	r3, [sp, #248]	; 0xf8
   253a0:	mov	r2, #12
   253a4:	str	r2, [sp, #124]	; 0x7c
   253a8:	cmp	r3, #0
   253ac:	bne	252f4 <__assert_fail@plt+0x13954>
   253b0:	mov	r4, #0
   253b4:	ldr	r9, [sp, #68]	; 0x44
   253b8:	b	25328 <__assert_fail@plt+0x13988>
   253bc:	ldr	r3, [sp, #104]	; 0x68
   253c0:	str	r3, [sp, #16]
   253c4:	ldrb	r3, [sl, #52]	; 0x34
   253c8:	b	24b18 <__assert_fail@plt+0x13178>
   253cc:	ldr	r2, [sp, #68]	; 0x44
   253d0:	ldr	r2, [r2, #76]	; 0x4c
   253d4:	cmp	r2, #0
   253d8:	bne	25370 <__assert_fail@plt+0x139d0>
   253dc:	ldr	r9, [sp, #68]	; 0x44
   253e0:	ldr	r2, [sp, #472]	; 0x1d8
   253e4:	cmp	r2, #0
   253e8:	bne	254bc <__assert_fail@plt+0x13b1c>
   253ec:	str	r2, [sp, #36]	; 0x24
   253f0:	b	25330 <__assert_fail@plt+0x13990>
   253f4:	ldr	r2, [sp, #72]	; 0x48
   253f8:	b	24830 <__assert_fail@plt+0x12e90>
   253fc:	add	r1, sp, #284	; 0x11c
   25400:	add	r0, sp, #148	; 0x94
   25404:	str	sl, [sp, #284]	; 0x11c
   25408:	str	r6, [sp, #288]	; 0x120
   2540c:	str	r9, [sp, #292]	; 0x124
   25410:	str	fp, [sp, #296]	; 0x128
   25414:	str	r6, [sp, #300]	; 0x12c
   25418:	str	r6, [sp, #304]	; 0x130
   2541c:	str	r6, [sp, #308]	; 0x134
   25420:	bl	24334 <__assert_fail@plt+0x12994>
   25424:	mov	r7, r0
   25428:	ldr	r0, [sp, #308]	; 0x134
   2542c:	bl	1c734 <__assert_fail@plt+0xad94>
   25430:	cmp	r7, #0
   25434:	bne	257f8 <__assert_fail@plt+0x13e58>
   25438:	ldr	r4, [sl]
   2543c:	cmp	r4, #0
   25440:	beq	25290 <__assert_fail@plt+0x138f0>
   25444:	mov	r8, fp
   25448:	mov	fp, r9
   2544c:	ldr	r9, [sp, #68]	; 0x44
   25450:	ldr	r0, [sp, #248]	; 0xf8
   25454:	bl	1c734 <__assert_fail@plt+0xad94>
   25458:	mov	r0, #0
   2545c:	str	r8, [sp, #240]	; 0xf0
   25460:	str	fp, [sp, #244]	; 0xf4
   25464:	str	sl, [sp, #248]	; 0xf8
   25468:	bl	1c734 <__assert_fail@plt+0xad94>
   2546c:	mov	r0, #0
   25470:	bl	1c734 <__assert_fail@plt+0xad94>
   25474:	ldr	r4, [sp, #248]	; 0xf8
   25478:	ldr	r3, [sp, #472]	; 0x1d8
   2547c:	cmp	r3, #0
   25480:	beq	25330 <__assert_fail@plt+0x13990>
   25484:	ldr	r3, [sp, #472]	; 0x1d8
   25488:	cmp	r3, #1
   2548c:	bls	254b4 <__assert_fail@plt+0x13b14>
   25490:	ldr	r2, [sp, #472]	; 0x1d8
   25494:	ldr	r3, [sp, #476]	; 0x1dc
   25498:	sub	r1, r3, #8
   2549c:	add	r1, r1, r2, lsl #3
   254a0:	mvn	r2, #0
   254a4:	str	r2, [r3, #12]
   254a8:	str	r2, [r3, #8]!
   254ac:	cmp	r1, r3
   254b0:	bne	254a4 <__assert_fail@plt+0x13b04>
   254b4:	ldr	r3, [sp, #32]
   254b8:	ldrb	r3, [r3, #28]
   254bc:	eor	r3, r3, #16
   254c0:	mov	r5, #0
   254c4:	ldr	r1, [sp, #240]	; 0xf0
   254c8:	ldr	r2, [sp, #472]	; 0x1d8
   254cc:	subs	r2, r2, #1
   254d0:	movne	r2, #1
   254d4:	ands	r3, r2, r3, lsr #4
   254d8:	ldr	r2, [sp, #476]	; 0x1dc
   254dc:	str	r5, [r2]
   254e0:	str	r1, [r2, #4]
   254e4:	bne	2587c <__assert_fail@plt+0x13edc>
   254e8:	ldrb	lr, [sp, #224]	; 0xe0
   254ec:	mov	r1, #0
   254f0:	ldr	ip, [sp, #116]	; 0x74
   254f4:	ldr	r7, [sp, #160]	; 0xa0
   254f8:	ldr	r5, [sp, #176]	; 0xb0
   254fc:	ldr	r6, [sp, #180]	; 0xb4
   25500:	ldr	r8, [sp, #472]	; 0x1d8
   25504:	ldr	r2, [sp, #476]	; 0x1dc
   25508:	b	25510 <__assert_fail@plt+0x13b70>
   2550c:	ldr	r3, [r2, #8]!
   25510:	cmn	r3, #1
   25514:	beq	25534 <__assert_fail@plt+0x13b94>
   25518:	cmp	lr, #0
   2551c:	ldr	r0, [r2, #4]
   25520:	bne	2585c <__assert_fail@plt+0x13ebc>
   25524:	add	r3, ip, r3
   25528:	add	r0, ip, r0
   2552c:	str	r3, [r2]
   25530:	str	r0, [r2, #4]
   25534:	add	r1, r1, #1
   25538:	cmp	r1, r8
   2553c:	bne	2550c <__assert_fail@plt+0x13b6c>
   25540:	ldr	r3, [sp, #108]	; 0x6c
   25544:	cmp	r3, #0
   25548:	ble	25580 <__assert_fail@plt+0x13be0>
   2554c:	ldr	r3, [sp, #108]	; 0x6c
   25550:	ldr	r2, [sp, #472]	; 0x1d8
   25554:	ldr	r0, [sp, #476]	; 0x1dc
   25558:	add	r1, r3, r2
   2555c:	ldr	r3, [sp, #476]	; 0x1dc
   25560:	add	r1, r0, r1, lsl #3
   25564:	add	r3, r3, r2, lsl #3
   25568:	mvn	r2, #0
   2556c:	add	r3, r3, #8
   25570:	str	r2, [r3, #-8]
   25574:	str	r2, [r3, #-4]
   25578:	cmp	r1, r3
   2557c:	bne	2556c <__assert_fail@plt+0x13bcc>
   25580:	ldr	r1, [r9, #132]	; 0x84
   25584:	cmp	r1, #0
   25588:	beq	25330 <__assert_fail@plt+0x13990>
   2558c:	ldr	r3, [sp, #472]	; 0x1d8
   25590:	ldr	r2, [sp, #476]	; 0x1dc
   25594:	sub	ip, r3, #1
   25598:	mov	r3, #0
   2559c:	add	r5, r2, #8
   255a0:	add	lr, r2, #12
   255a4:	b	255dc <__assert_fail@plt+0x13c3c>
   255a8:	ldr	r2, [r1, r3, lsl #2]
   255ac:	cmp	r2, r3
   255b0:	add	r0, r2, #1
   255b4:	beq	255d8 <__assert_fail@plt+0x13c38>
   255b8:	ldr	r2, [sp, #476]	; 0x1dc
   255bc:	ldr	r2, [r2, r0, lsl #3]
   255c0:	ldr	r0, [sp, #476]	; 0x1dc
   255c4:	str	r2, [r5, r3, lsl #3]
   255c8:	ldr	r2, [r1, r3, lsl #2]
   255cc:	add	r2, r0, r2, lsl #3
   255d0:	ldr	r2, [r2, #12]
   255d4:	str	r2, [lr, r3, lsl #3]
   255d8:	add	r3, r3, #1
   255dc:	cmp	r3, ip
   255e0:	bne	255a8 <__assert_fail@plt+0x13c08>
   255e4:	b	25330 <__assert_fail@plt+0x13990>
   255e8:	ldrb	r3, [r9, #88]	; 0x58
   255ec:	tst	r3, #2
   255f0:	bne	248cc <__assert_fail@plt+0x12f2c>
   255f4:	b	248f4 <__assert_fail@plt+0x12f54>
   255f8:	add	r0, sp, #148	; 0x94
   255fc:	bl	1de24 <__assert_fail@plt+0xc484>
   25600:	ldr	r0, [sp, #280]	; 0x118
   25604:	bl	1c734 <__assert_fail@plt+0xad94>
   25608:	ldr	r0, [sp, #264]	; 0x108
   2560c:	bl	1c734 <__assert_fail@plt+0xad94>
   25610:	b	25344 <__assert_fail@plt+0x139a4>
   25614:	ldr	sl, [r4, #40]	; 0x28
   25618:	cmp	sl, #0
   2561c:	bne	24aec <__assert_fail@plt+0x1314c>
   25620:	mov	r3, #12
   25624:	ldr	r9, [sp, #68]	; 0x44
   25628:	str	r3, [sp, #36]	; 0x24
   2562c:	ldr	r4, [sp, #248]	; 0xf8
   25630:	b	25330 <__assert_fail@plt+0x13990>
   25634:	mov	r0, sl
   25638:	bl	1c734 <__assert_fail@plt+0xad94>
   2563c:	mov	r0, r6
   25640:	bl	1c734 <__assert_fail@plt+0xad94>
   25644:	add	r0, sp, #148	; 0x94
   25648:	bl	1de24 <__assert_fail@plt+0xc484>
   2564c:	ldr	r5, [sp, #116]	; 0x74
   25650:	b	252ac <__assert_fail@plt+0x1390c>
   25654:	mov	r3, #12
   25658:	ldr	r4, [sp, #248]	; 0xf8
   2565c:	str	r3, [sp, #36]	; 0x24
   25660:	b	25330 <__assert_fail@plt+0x13990>
   25664:	mov	r3, #8
   25668:	b	24990 <__assert_fail@plt+0x12ff0>
   2566c:	str	r1, [sp, #36]	; 0x24
   25670:	str	r3, [sp, #116]	; 0x74
   25674:	ldr	r9, [sp, #68]	; 0x44
   25678:	ldr	r4, [sp, #248]	; 0xf8
   2567c:	b	25330 <__assert_fail@plt+0x13990>
   25680:	ldr	r4, [sp, #48]	; 0x30
   25684:	ldr	r1, [sp, #172]	; 0xac
   25688:	sub	r2, r5, r1
   2568c:	ldr	r3, [sp, #180]	; 0xb4
   25690:	cmp	r3, r2
   25694:	bhi	260e4 <__assert_fail@plt+0x14744>
   25698:	mov	r1, r5
   2569c:	add	r0, sp, #148	; 0x94
   256a0:	ldr	r2, [sp, #480]	; 0x1e0
   256a4:	bl	2160c <__assert_fail@plt+0xfc6c>
   256a8:	subs	r3, r0, #0
   256ac:	str	r3, [sp, #36]	; 0x24
   256b0:	beq	260dc <__assert_fail@plt+0x1473c>
   256b4:	ldr	r9, [sp, #68]	; 0x44
   256b8:	ldr	r4, [sp, #248]	; 0xf8
   256bc:	b	25330 <__assert_fail@plt+0x13990>
   256c0:	ldrsb	r3, [sl, #52]	; 0x34
   256c4:	cmp	r3, #0
   256c8:	blt	2573c <__assert_fail@plt+0x13d9c>
   256cc:	ldr	fp, [sp, #12]
   256d0:	ldr	r3, [sp, #20]
   256d4:	cmp	r3, #0
   256d8:	beq	24ca4 <__assert_fail@plt+0x13304>
   256dc:	ldr	r3, [sp, #20]
   256e0:	str	r3, [sp, #28]
   256e4:	b	24b2c <__assert_fail@plt+0x1318c>
   256e8:	mov	r5, r0
   256ec:	b	24b40 <__assert_fail@plt+0x131a0>
   256f0:	mov	fp, r4
   256f4:	b	24ca4 <__assert_fail@plt+0x13304>
   256f8:	ldr	sl, [r4, #44]	; 0x2c
   256fc:	b	25618 <__assert_fail@plt+0x13c78>
   25700:	ldr	r9, [sp, #68]	; 0x44
   25704:	bl	1c734 <__assert_fail@plt+0xad94>
   25708:	mov	r3, #12
   2570c:	mov	r0, sl
   25710:	str	r3, [sp, #36]	; 0x24
   25714:	bl	1c734 <__assert_fail@plt+0xad94>
   25718:	ldr	r4, [sp, #248]	; 0xf8
   2571c:	b	25330 <__assert_fail@plt+0x13990>
   25720:	mov	r3, r0
   25724:	mov	r1, r4
   25728:	ldr	r2, [sl, #40]	; 0x28
   2572c:	add	r0, sp, #124	; 0x7c
   25730:	bl	1f2d4 <__assert_fail@plt+0xd934>
   25734:	mov	sl, r0
   25738:	b	25618 <__assert_fail@plt+0x13c78>
   2573c:	mov	r1, sl
   25740:	add	r0, sp, #148	; 0x94
   25744:	ldr	r2, [sp, #12]
   25748:	bl	21528 <__assert_fail@plt+0xfb88>
   2574c:	subs	r3, r0, #0
   25750:	str	r3, [sp, #28]
   25754:	bne	256cc <__assert_fail@plt+0x13d2c>
   25758:	mvn	fp, #0
   2575c:	b	24b2c <__assert_fail@plt+0x1318c>
   25760:	add	r4, sl, #8
   25764:	add	r5, sl, #12
   25768:	mov	r1, r4
   2576c:	mov	r2, r5
   25770:	mov	r3, #0
   25774:	add	r0, sp, #148	; 0x94
   25778:	bl	21e78 <__assert_fail@plt+0x104d8>
   2577c:	cmp	r0, #0
   25780:	mov	fp, r0
   25784:	str	r0, [sp, #124]	; 0x7c
   25788:	bne	24ca4 <__assert_fail@plt+0x13304>
   2578c:	ldrb	r3, [sl, #52]	; 0x34
   25790:	tst	r3, #64	; 0x40
   25794:	bne	25834 <__assert_fail@plt+0x13e94>
   25798:	mov	r2, #0
   2579c:	str	r2, [sp, #16]
   257a0:	b	24b18 <__assert_fail@plt+0x13178>
   257a4:	ldr	sl, [r4, #48]	; 0x30
   257a8:	b	25618 <__assert_fail@plt+0x13c78>
   257ac:	mov	r7, r3
   257b0:	mov	r0, sl
   257b4:	bl	1c734 <__assert_fail@plt+0xad94>
   257b8:	ldr	r0, [sp, #24]
   257bc:	bl	1c734 <__assert_fail@plt+0xad94>
   257c0:	cmp	r7, #1
   257c4:	beq	252a0 <__assert_fail@plt+0x13900>
   257c8:	str	r7, [sp, #36]	; 0x24
   257cc:	ldr	r9, [sp, #68]	; 0x44
   257d0:	ldr	r4, [sp, #248]	; 0xf8
   257d4:	b	25330 <__assert_fail@plt+0x13990>
   257d8:	mov	r3, #12
   257dc:	mov	r0, sl
   257e0:	ldr	r9, [sp, #68]	; 0x44
   257e4:	str	r3, [sp, #36]	; 0x24
   257e8:	bl	1c734 <__assert_fail@plt+0xad94>
   257ec:	mov	r0, r6
   257f0:	bl	1c734 <__assert_fail@plt+0xad94>
   257f4:	b	24ed8 <__assert_fail@plt+0x13538>
   257f8:	str	r6, [sp, #24]
   257fc:	b	257b0 <__assert_fail@plt+0x13e10>
   25800:	mov	r3, r5
   25804:	mov	r2, r6
   25808:	ldr	r0, [sp, #12]
   2580c:	mov	r1, sl
   25810:	bl	1f7d8 <__assert_fail@plt+0xde38>
   25814:	mov	r7, r0
   25818:	mov	r0, r6
   2581c:	bl	1c734 <__assert_fail@plt+0xad94>
   25820:	cmp	r7, #0
   25824:	beq	25444 <__assert_fail@plt+0x13aa4>
   25828:	mov	r3, #0
   2582c:	str	r3, [sp, #24]
   25830:	b	257b0 <__assert_fail@plt+0x13e10>
   25834:	mov	r2, r5
   25838:	mov	r1, r4
   2583c:	add	r0, sp, #148	; 0x94
   25840:	bl	239f0 <__assert_fail@plt+0x12050>
   25844:	cmp	r0, #0
   25848:	mov	fp, r0
   2584c:	str	r0, [sp, #124]	; 0x7c
   25850:	bne	24ca4 <__assert_fail@plt+0x13304>
   25854:	ldrb	r3, [sl, #52]	; 0x34
   25858:	b	25798 <__assert_fail@plt+0x13df8>
   2585c:	cmp	r5, r3
   25860:	ldrne	r3, [r7, r3, lsl #2]
   25864:	moveq	r3, r6
   25868:	cmp	r5, r0
   2586c:	moveq	r0, r6
   25870:	str	r3, [r2]
   25874:	ldrne	r0, [r7, r0, lsl #2]
   25878:	b	25524 <__assert_fail@plt+0x13b84>
   2587c:	ldr	r2, [sp, #32]
   25880:	ldrb	r3, [r9, #88]	; 0x58
   25884:	ldr	r2, [r2]
   25888:	tst	r3, #1
   2588c:	str	r2, [sp, #16]
   25890:	beq	25ef0 <__assert_fail@plt+0x14550>
   25894:	ldr	r3, [r9, #76]	; 0x4c
   25898:	cmp	r3, r5
   2589c:	ble	25ef0 <__assert_fail@plt+0x14550>
   258a0:	add	r1, sp, #296	; 0x128
   258a4:	mov	r2, #2
   258a8:	mov	r3, #16
   258ac:	mov	r0, #48	; 0x30
   258b0:	str	r1, [sp, #20]
   258b4:	str	r5, [sp, #136]	; 0x88
   258b8:	str	r2, [sp, #140]	; 0x8c
   258bc:	str	r5, [sp, #144]	; 0x90
   258c0:	str	r5, [sp, #284]	; 0x11c
   258c4:	str	r3, [sp, #288]	; 0x120
   258c8:	str	r1, [sp, #292]	; 0x124
   258cc:	bl	1c864 <__assert_fail@plt+0xaec4>
   258d0:	cmp	r0, #0
   258d4:	str	r0, [sp, #144]	; 0x90
   258d8:	beq	25654 <__assert_fail@plt+0x13cb4>
   258dc:	ldr	r1, [sp, #16]
   258e0:	add	r2, sp, #124	; 0x7c
   258e4:	ldr	r3, [sp, #284]	; 0x11c
   258e8:	str	r2, [sp, #28]
   258ec:	ldr	sl, [r1, #72]	; 0x48
   258f0:	str	r5, [sp, #124]	; 0x7c
   258f4:	ldr	r1, [sp, #472]	; 0x1d8
   258f8:	str	r5, [sp, #128]	; 0x80
   258fc:	str	r5, [sp, #132]	; 0x84
   25900:	cmp	r3, r1
   25904:	add	r3, sp, #136	; 0x88
   25908:	str	r3, [sp, #12]
   2590c:	bcc	25f3c <__assert_fail@plt+0x1459c>
   25910:	ldr	r3, [sp, #472]	; 0x1d8
   25914:	str	r3, [sp, #284]	; 0x11c
   25918:	ldr	r0, [sp, #292]	; 0x124
   2591c:	ldr	r3, [sp, #472]	; 0x1d8
   25920:	ldr	r1, [sp, #476]	; 0x1dc
   25924:	str	r0, [sp, #32]
   25928:	lsl	r2, r3, #3
   2592c:	lsl	r3, r3, #4
   25930:	mov	r4, r1
   25934:	str	r2, [sp, #40]	; 0x28
   25938:	str	r3, [sp, #48]	; 0x30
   2593c:	bl	115d4 <memcpy@plt>
   25940:	ldr	r5, [r4], #4
   25944:	str	r9, [sp, #24]
   25948:	ldr	fp, [sp, #472]	; 0x1d8
   2594c:	str	r4, [sp, #44]	; 0x2c
   25950:	str	r5, [sp, #120]	; 0x78
   25954:	ldr	r3, [sp, #476]	; 0x1dc
   25958:	ldr	r3, [r3, #4]
   2595c:	cmp	r5, r3
   25960:	bgt	26030 <__assert_fail@plt+0x14690>
   25964:	ldr	r2, [sp, #16]
   25968:	lsl	r4, sl, #3
   2596c:	mov	r6, sl
   25970:	ldr	r1, [r2]
   25974:	add	r0, r1, r4
   25978:	ldrb	r2, [r0, #4]
   2597c:	cmp	r2, #8
   25980:	beq	25b94 <__assert_fail@plt+0x141f4>
   25984:	cmp	r2, #9
   25988:	beq	25bf8 <__assert_fail@plt+0x14258>
   2598c:	cmp	r3, r5
   25990:	beq	25af0 <__assert_fail@plt+0x14150>
   25994:	ldr	r3, [sp, #12]
   25998:	cmp	r3, #0
   2599c:	beq	259b8 <__assert_fail@plt+0x14018>
   259a0:	mov	r2, sl
   259a4:	add	r1, sp, #132	; 0x84
   259a8:	ldr	r0, [sp, #128]	; 0x80
   259ac:	bl	1e6a0 <__assert_fail@plt+0xcd00>
   259b0:	cmp	r0, #0
   259b4:	bne	25b08 <__assert_fail@plt+0x14168>
   259b8:	ldr	r5, [sp, #232]	; 0xe8
   259bc:	ldr	r0, [r5]
   259c0:	add	r1, r0, r4
   259c4:	ldrb	r3, [r1, #4]
   259c8:	tst	r3, #8
   259cc:	beq	25a68 <__assert_fail@plt+0x140c8>
   259d0:	ldr	r5, [r5, #20]
   259d4:	add	r4, sl, sl, lsl #1
   259d8:	add	r1, sp, #132	; 0x84
   259dc:	mov	r2, sl
   259e0:	ldr	lr, [sp, #120]	; 0x78
   259e4:	ldr	r0, [sp, #128]	; 0x80
   259e8:	add	r4, r5, r4, lsl #2
   259ec:	ldr	ip, [sp, #248]	; 0xf8
   259f0:	ldr	r5, [ip, lr, lsl #2]
   259f4:	bl	1e6a0 <__assert_fail@plt+0xcd00>
   259f8:	cmp	r0, #0
   259fc:	beq	25d9c <__assert_fail@plt+0x143fc>
   25a00:	ldr	r6, [r4, #4]
   25a04:	cmp	r6, #0
   25a08:	ble	25e64 <__assert_fail@plt+0x144c4>
   25a0c:	ldr	r3, [r4, #8]
   25a10:	add	r8, r5, #12
   25a14:	mvn	sl, #0
   25a18:	mov	r4, #0
   25a1c:	ldr	r7, [r5, #8]
   25a20:	sub	r9, r3, #4
   25a24:	ldr	r5, [r9, #4]!
   25a28:	mov	r1, r8
   25a2c:	mov	r0, r7
   25a30:	add	r4, r4, #1
   25a34:	mov	r2, r5
   25a38:	bl	1e6a0 <__assert_fail@plt+0xcd00>
   25a3c:	cmp	r0, #0
   25a40:	beq	25a50 <__assert_fail@plt+0x140b0>
   25a44:	cmn	sl, #1
   25a48:	bne	25c50 <__assert_fail@plt+0x142b0>
   25a4c:	mov	sl, r5
   25a50:	cmp	r4, r6
   25a54:	bne	25a24 <__assert_fail@plt+0x14084>
   25a58:	cmp	sl, #0
   25a5c:	blt	25e5c <__assert_fail@plt+0x144bc>
   25a60:	ldr	r5, [sp, #120]	; 0x78
   25a64:	b	25954 <__assert_fail@plt+0x13fb4>
   25a68:	ldrb	r2, [r1, #6]
   25a6c:	tst	r2, #16
   25a70:	bne	25d6c <__assert_fail@plt+0x143cc>
   25a74:	cmp	r3, #4
   25a78:	beq	25dd0 <__assert_fail@plt+0x14430>
   25a7c:	ldr	r7, [sp, #120]	; 0x78
   25a80:	mov	r2, r7
   25a84:	add	r0, sp, #148	; 0x94
   25a88:	bl	213f0 <__assert_fail@plt+0xfa50>
   25a8c:	cmp	r0, #0
   25a90:	beq	25e64 <__assert_fail@plt+0x144c4>
   25a94:	ldr	r2, [r5, #12]
   25a98:	add	r3, r7, #1
   25a9c:	ldr	sl, [r2, r6, lsl #2]
   25aa0:	str	r3, [sp, #120]	; 0x78
   25aa4:	ldr	r2, [sp, #12]
   25aa8:	cmp	r2, #0
   25aac:	beq	25ae4 <__assert_fail@plt+0x14144>
   25ab0:	ldr	r2, [sp, #240]	; 0xf0
   25ab4:	cmp	r3, r2
   25ab8:	bgt	25e64 <__assert_fail@plt+0x144c4>
   25abc:	ldr	r2, [sp, #248]	; 0xf8
   25ac0:	ldr	r3, [r2, r3, lsl #2]
   25ac4:	cmp	r3, #0
   25ac8:	beq	25e64 <__assert_fail@plt+0x144c4>
   25acc:	mov	r2, sl
   25ad0:	add	r1, r3, #12
   25ad4:	ldr	r0, [r3, #8]
   25ad8:	bl	1e6a0 <__assert_fail@plt+0xcd00>
   25adc:	cmp	r0, #0
   25ae0:	beq	25e64 <__assert_fail@plt+0x144c4>
   25ae4:	mov	r3, #0
   25ae8:	str	r3, [sp, #128]	; 0x80
   25aec:	b	25a58 <__assert_fail@plt+0x140b8>
   25af0:	ldr	r3, [sp, #244]	; 0xf4
   25af4:	cmp	sl, r3
   25af8:	bne	25994 <__assert_fail@plt+0x13ff4>
   25afc:	ldr	r3, [sp, #12]
   25b00:	cmp	r3, #0
   25b04:	beq	2609c <__assert_fail@plt+0x146fc>
   25b08:	ldr	r1, [sp, #44]	; 0x2c
   25b0c:	mov	r3, #0
   25b10:	ldr	r2, [sp, #476]	; 0x1dc
   25b14:	ldr	r2, [r2, r3, lsl #3]
   25b18:	cmp	r2, #0
   25b1c:	blt	25b2c <__assert_fail@plt+0x1418c>
   25b20:	ldr	r2, [r1, r3, lsl #3]
   25b24:	cmn	r2, #1
   25b28:	beq	25bc4 <__assert_fail@plt+0x14224>
   25b2c:	add	r3, r3, #1
   25b30:	cmp	fp, r3
   25b34:	bne	25b10 <__assert_fail@plt+0x14170>
   25b38:	ldr	r9, [sp, #24]
   25b3c:	ldr	r0, [sp, #132]	; 0x84
   25b40:	bl	1c734 <__assert_fail@plt+0xad94>
   25b44:	ldr	r3, [sp, #20]
   25b48:	ldr	r0, [sp, #292]	; 0x124
   25b4c:	cmp	r0, r3
   25b50:	beq	260c0 <__assert_fail@plt+0x14720>
   25b54:	bl	1c734 <__assert_fail@plt+0xad94>
   25b58:	ldr	r1, [sp, #20]
   25b5c:	mov	r2, #0
   25b60:	mov	r3, #16
   25b64:	str	r2, [sp, #284]	; 0x11c
   25b68:	str	r3, [sp, #288]	; 0x120
   25b6c:	str	r1, [sp, #292]	; 0x124
   25b70:	ldr	r1, [sp, #12]
   25b74:	cmp	r1, r2
   25b78:	beq	26078 <__assert_fail@plt+0x146d8>
   25b7c:	ldr	r0, [sp, #12]
   25b80:	bl	1feec <__assert_fail@plt+0xe54c>
   25b84:	ldr	r4, [sp, #248]	; 0xf8
   25b88:	ldr	r3, [sp, #476]	; 0x1dc
   25b8c:	ldr	r3, [r3]
   25b90:	b	254e8 <__assert_fail@plt+0x13b48>
   25b94:	ldr	r2, [r1, sl, lsl #3]
   25b98:	add	r2, r2, #1
   25b9c:	cmp	fp, r2
   25ba0:	ble	2598c <__assert_fail@plt+0x13fec>
   25ba4:	ldr	r3, [sp, #476]	; 0x1dc
   25ba8:	ldr	r1, [sp, #476]	; 0x1dc
   25bac:	add	r3, r3, r2, lsl #3
   25bb0:	str	r5, [r1, r2, lsl #3]
   25bb4:	mvn	r2, #0
   25bb8:	str	r2, [r3, #4]
   25bbc:	ldr	r3, [r1, #4]
   25bc0:	b	2598c <__assert_fail@plt+0x13fec>
   25bc4:	mov	r2, fp
   25bc8:	ldr	r0, [sp, #12]
   25bcc:	ldr	ip, [sp, #28]
   25bd0:	ldr	r1, [sp, #32]
   25bd4:	ldr	r3, [sp, #476]	; 0x1dc
   25bd8:	stm	sp, {r1, ip}
   25bdc:	add	r1, sp, #120	; 0x78
   25be0:	bl	1e578 <__assert_fail@plt+0xcbd8>
   25be4:	subs	sl, r0, #0
   25be8:	blt	25b38 <__assert_fail@plt+0x14198>
   25bec:	mov	r6, sl
   25bf0:	lsl	r4, sl, #3
   25bf4:	b	259b8 <__assert_fail@plt+0x14018>
   25bf8:	ldr	r2, [r0]
   25bfc:	add	r2, r2, #1
   25c00:	cmp	fp, r2
   25c04:	ble	2598c <__assert_fail@plt+0x13fec>
   25c08:	ldr	r3, [sp, #476]	; 0x1dc
   25c0c:	ldr	r1, [r3, r2, lsl #3]
   25c10:	add	r3, r3, r2, lsl #3
   25c14:	cmp	r5, r1
   25c18:	bgt	25fe0 <__assert_fail@plt+0x14640>
   25c1c:	ldrb	r1, [r0, #6]
   25c20:	tst	r1, #8
   25c24:	beq	25f5c <__assert_fail@plt+0x145bc>
   25c28:	ldr	r1, [sp, #32]
   25c2c:	ldr	r2, [r1, r2, lsl #3]
   25c30:	cmn	r2, #1
   25c34:	beq	25f5c <__assert_fail@plt+0x145bc>
   25c38:	ldr	r2, [sp, #40]	; 0x28
   25c3c:	ldr	r0, [sp, #476]	; 0x1dc
   25c40:	bl	115d4 <memcpy@plt>
   25c44:	ldr	r3, [sp, #476]	; 0x1dc
   25c48:	ldr	r3, [r3, #4]
   25c4c:	b	2598c <__assert_fail@plt+0x13fec>
   25c50:	add	r1, sp, #132	; 0x84
   25c54:	mov	r2, sl
   25c58:	ldr	r0, [sp, #128]	; 0x80
   25c5c:	bl	1e6a0 <__assert_fail@plt+0xcd00>
   25c60:	cmp	r0, #0
   25c64:	bne	25ee8 <__assert_fail@plt+0x14548>
   25c68:	ldr	r0, [sp, #12]
   25c6c:	cmp	r0, #0
   25c70:	beq	25a58 <__assert_fail@plt+0x140b8>
   25c74:	ldr	r4, [r0]
   25c78:	ldmib	r0, {r1, r3}
   25c7c:	ldr	r6, [sp, #120]	; 0x78
   25c80:	add	r2, r4, #1
   25c84:	cmp	r2, r1
   25c88:	str	r2, [r0]
   25c8c:	beq	26004 <__assert_fail@plt+0x14664>
   25c90:	add	r2, r4, r4, lsl #1
   25c94:	ldr	r0, [sp, #48]	; 0x30
   25c98:	lsl	r4, r2, #3
   25c9c:	str	r6, [r3, r2, lsl #3]
   25ca0:	add	r6, r3, r4
   25ca4:	str	r5, [r6, #4]
   25ca8:	bl	1c864 <__assert_fail@plt+0xaec4>
   25cac:	ldr	r5, [sp, #12]
   25cb0:	ldr	r3, [r5, #8]
   25cb4:	str	r0, [r6, #8]
   25cb8:	add	r3, r3, r4
   25cbc:	ldr	r0, [r3, #8]
   25cc0:	cmp	r0, #0
   25cc4:	beq	25d10 <__assert_fail@plt+0x14370>
   25cc8:	ldr	r6, [sp, #40]	; 0x28
   25ccc:	ldr	r1, [sp, #476]	; 0x1dc
   25cd0:	mov	r2, r6
   25cd4:	bl	115d4 <memcpy@plt>
   25cd8:	ldr	r3, [r5, #8]
   25cdc:	mov	r2, r6
   25ce0:	ldr	r1, [sp, #32]
   25ce4:	add	r3, r3, r4
   25ce8:	ldr	r0, [r3, #8]
   25cec:	add	r0, r0, r6
   25cf0:	bl	115d4 <memcpy@plt>
   25cf4:	ldr	r0, [r5, #8]
   25cf8:	ldr	r1, [sp, #28]
   25cfc:	add	r0, r0, r4
   25d00:	add	r0, r0, #12
   25d04:	bl	1f0e0 <__assert_fail@plt+0xd740>
   25d08:	cmp	r0, #0
   25d0c:	beq	25a58 <__assert_fail@plt+0x140b8>
   25d10:	ldr	r9, [sp, #24]
   25d14:	ldr	r0, [sp, #132]	; 0x84
   25d18:	bl	1c734 <__assert_fail@plt+0xad94>
   25d1c:	ldr	r3, [sp, #20]
   25d20:	ldr	r0, [sp, #292]	; 0x124
   25d24:	cmp	r0, r3
   25d28:	beq	26088 <__assert_fail@plt+0x146e8>
   25d2c:	bl	1c734 <__assert_fail@plt+0xad94>
   25d30:	ldr	r1, [sp, #20]
   25d34:	mov	r2, #0
   25d38:	mov	r3, #16
   25d3c:	str	r2, [sp, #284]	; 0x11c
   25d40:	str	r3, [sp, #288]	; 0x120
   25d44:	str	r1, [sp, #292]	; 0x124
   25d48:	ldr	r1, [sp, #12]
   25d4c:	cmp	r1, r2
   25d50:	beq	25654 <__assert_fail@plt+0x13cb4>
   25d54:	mov	r3, #12
   25d58:	ldr	r0, [sp, #12]
   25d5c:	str	r3, [sp, #36]	; 0x24
   25d60:	bl	1feec <__assert_fail@plt+0xe54c>
   25d64:	ldr	r4, [sp, #248]	; 0xf8
   25d68:	b	25330 <__assert_fail@plt+0x13990>
   25d6c:	ldr	ip, [sp, #120]	; 0x78
   25d70:	add	r3, sp, #148	; 0x94
   25d74:	mov	r2, sl
   25d78:	add	r1, r5, #128	; 0x80
   25d7c:	str	ip, [sp]
   25d80:	bl	22f94 <__assert_fail@plt+0x115f4>
   25d84:	subs	r7, r0, #0
   25d88:	bne	25fd8 <__assert_fail@plt+0x14638>
   25d8c:	ldr	r1, [r5]
   25d90:	ldr	r7, [sp, #120]	; 0x78
   25d94:	add	r1, r1, r4
   25d98:	b	25a80 <__assert_fail@plt+0x140e0>
   25d9c:	mov	r1, sl
   25da0:	ldr	r0, [sp, #28]
   25da4:	bl	1e0cc <__assert_fail@plt+0xc72c>
   25da8:	cmp	r0, #0
   25dac:	bne	25a00 <__assert_fail@plt+0x14060>
   25db0:	ldr	r9, [sp, #24]
   25db4:	ldr	r0, [sp, #132]	; 0x84
   25db8:	bl	1c734 <__assert_fail@plt+0xad94>
   25dbc:	ldr	r3, [sp, #20]
   25dc0:	ldr	r0, [sp, #292]	; 0x124
   25dc4:	cmp	r0, r3
   25dc8:	bne	25d2c <__assert_fail@plt+0x1438c>
   25dcc:	b	25d30 <__assert_fail@plt+0x14390>
   25dd0:	ldr	r3, [r1]
   25dd4:	add	r3, r3, #1
   25dd8:	cmp	fp, r3
   25ddc:	ble	25f6c <__assert_fail@plt+0x145cc>
   25de0:	ldr	r2, [sp, #476]	; 0x1dc
   25de4:	ldr	r1, [sp, #476]	; 0x1dc
   25de8:	add	r2, r2, r3, lsl #3
   25dec:	ldr	r0, [r1, r3, lsl #3]
   25df0:	ldr	r3, [sp, #12]
   25df4:	cmp	r3, #0
   25df8:	ldr	r3, [r2, #4]
   25dfc:	sub	r7, r3, r0
   25e00:	beq	25fd0 <__assert_fail@plt+0x14630>
   25e04:	cmn	r0, #1
   25e08:	beq	25e64 <__assert_fail@plt+0x144c4>
   25e0c:	cmn	r3, #1
   25e10:	beq	25e64 <__assert_fail@plt+0x144c4>
   25e14:	cmp	r7, #0
   25e18:	beq	25f78 <__assert_fail@plt+0x145d8>
   25e1c:	ldr	r4, [sp, #120]	; 0x78
   25e20:	ldr	r1, [sp, #152]	; 0x98
   25e24:	ldr	r3, [sp, #176]	; 0xb0
   25e28:	sub	r3, r3, r4
   25e2c:	cmp	r7, r3
   25e30:	bgt	25e64 <__assert_fail@plt+0x144c4>
   25e34:	add	r0, r1, r0
   25e38:	mov	r2, r7
   25e3c:	add	r1, r1, r4
   25e40:	bl	1161c <memcmp@plt>
   25e44:	cmp	r0, #0
   25e48:	bne	25e64 <__assert_fail@plt+0x144c4>
   25e4c:	ldr	r2, [r5, #12]
   25e50:	add	r3, r4, r7
   25e54:	ldr	sl, [r2, sl, lsl #2]
   25e58:	b	25aa0 <__assert_fail@plt+0x14100>
   25e5c:	cmn	sl, #2
   25e60:	beq	25db0 <__assert_fail@plt+0x14410>
   25e64:	mov	r2, fp
   25e68:	ldr	r0, [sp, #12]
   25e6c:	ldr	ip, [sp, #28]
   25e70:	ldr	r1, [sp, #32]
   25e74:	ldr	r3, [sp, #476]	; 0x1dc
   25e78:	stm	sp, {r1, ip}
   25e7c:	add	r1, sp, #120	; 0x78
   25e80:	bl	1e578 <__assert_fail@plt+0xcbd8>
   25e84:	subs	sl, r0, #0
   25e88:	bge	25a60 <__assert_fail@plt+0x140c0>
   25e8c:	ldr	r9, [sp, #24]
   25e90:	ldr	r0, [sp, #132]	; 0x84
   25e94:	bl	1c734 <__assert_fail@plt+0xad94>
   25e98:	ldr	r3, [sp, #20]
   25e9c:	ldr	r0, [sp, #292]	; 0x124
   25ea0:	cmp	r0, r3
   25ea4:	beq	25eac <__assert_fail@plt+0x1450c>
   25ea8:	bl	1c734 <__assert_fail@plt+0xad94>
   25eac:	ldr	r1, [sp, #20]
   25eb0:	mov	r2, #0
   25eb4:	mov	r3, #16
   25eb8:	str	r2, [sp, #284]	; 0x11c
   25ebc:	str	r3, [sp, #288]	; 0x120
   25ec0:	str	r1, [sp, #292]	; 0x124
   25ec4:	ldr	r1, [sp, #12]
   25ec8:	cmp	r1, r2
   25ecc:	beq	24ed0 <__assert_fail@plt+0x13530>
   25ed0:	mov	r3, #1
   25ed4:	ldr	r0, [sp, #12]
   25ed8:	str	r3, [sp, #36]	; 0x24
   25edc:	bl	1feec <__assert_fail@plt+0xe54c>
   25ee0:	ldr	r4, [sp, #248]	; 0xf8
   25ee4:	b	25330 <__assert_fail@plt+0x13990>
   25ee8:	mov	sl, r5
   25eec:	b	25a58 <__assert_fail@plt+0x140b8>
   25ef0:	ldr	r2, [sp, #16]
   25ef4:	mov	r3, #0
   25ef8:	add	ip, sp, #296	; 0x128
   25efc:	add	r0, sp, #124	; 0x7c
   25f00:	mov	r1, #2
   25f04:	str	r3, [sp, #12]
   25f08:	str	ip, [sp, #20]
   25f0c:	str	r0, [sp, #28]
   25f10:	ldr	sl, [r2, #72]	; 0x48
   25f14:	mov	r2, #16
   25f18:	str	r3, [sp, #124]	; 0x7c
   25f1c:	str	r3, [sp, #128]	; 0x80
   25f20:	str	r3, [sp, #132]	; 0x84
   25f24:	str	r3, [sp, #136]	; 0x88
   25f28:	str	r1, [sp, #140]	; 0x8c
   25f2c:	str	r3, [sp, #144]	; 0x90
   25f30:	str	r3, [sp, #284]	; 0x11c
   25f34:	str	r2, [sp, #288]	; 0x120
   25f38:	str	ip, [sp, #292]	; 0x124
   25f3c:	mov	r3, #8
   25f40:	add	r0, sp, #284	; 0x11c
   25f44:	ldr	r2, [sp, #20]
   25f48:	ldr	r1, [sp, #472]	; 0x1d8
   25f4c:	bl	2c2dc <__assert_fail@plt+0x1a93c>
   25f50:	cmp	r0, #0
   25f54:	bne	25918 <__assert_fail@plt+0x13f78>
   25f58:	b	25dbc <__assert_fail@plt+0x1441c>
   25f5c:	str	r5, [r3, #4]
   25f60:	ldr	r3, [sp, #476]	; 0x1dc
   25f64:	ldr	r3, [r3, #4]
   25f68:	b	2598c <__assert_fail@plt+0x13fec>
   25f6c:	ldr	r3, [sp, #12]
   25f70:	cmp	r3, #0
   25f74:	bne	25e64 <__assert_fail@plt+0x144c4>
   25f78:	mov	r1, sl
   25f7c:	ldr	r0, [sp, #28]
   25f80:	bl	1e0cc <__assert_fail@plt+0xc72c>
   25f84:	cmp	r0, #0
   25f88:	beq	25db0 <__assert_fail@plt+0x14410>
   25f8c:	ldr	r3, [r5, #20]
   25f90:	add	sl, sl, sl, lsl #1
   25f94:	ldr	r7, [sp, #120]	; 0x78
   25f98:	ldr	r1, [sp, #248]	; 0xf8
   25f9c:	add	r3, r3, sl, lsl #2
   25fa0:	ldr	r2, [r3, #8]
   25fa4:	ldr	r3, [r1, r7, lsl #2]
   25fa8:	ldr	sl, [r2]
   25fac:	add	r1, r3, #12
   25fb0:	ldr	r0, [r3, #8]
   25fb4:	mov	r2, sl
   25fb8:	bl	1e6a0 <__assert_fail@plt+0xcd00>
   25fbc:	cmp	r0, #0
   25fc0:	bne	25a58 <__assert_fail@plt+0x140b8>
   25fc4:	ldr	r1, [r5]
   25fc8:	add	r1, r1, r4
   25fcc:	b	25a80 <__assert_fail@plt+0x140e0>
   25fd0:	cmp	r7, #0
   25fd4:	beq	25f78 <__assert_fail@plt+0x145d8>
   25fd8:	ldr	r4, [sp, #120]	; 0x78
   25fdc:	b	25e4c <__assert_fail@plt+0x144ac>
   25fe0:	str	r5, [r3, #4]
   25fe4:	ldr	r0, [sp, #32]
   25fe8:	ldr	r2, [sp, #40]	; 0x28
   25fec:	ldr	r1, [sp, #476]	; 0x1dc
   25ff0:	bl	115d4 <memcpy@plt>
   25ff4:	ldr	r5, [sp, #120]	; 0x78
   25ff8:	ldr	r3, [sp, #476]	; 0x1dc
   25ffc:	ldr	r3, [r3, #4]
   26000:	b	2598c <__assert_fail@plt+0x13fec>
   26004:	mov	r1, #48	; 0x30
   26008:	mov	r0, r3
   2600c:	mul	r1, r1, r2
   26010:	bl	1c910 <__assert_fail@plt+0xaf70>
   26014:	subs	r3, r0, #0
   26018:	beq	25d10 <__assert_fail@plt+0x14370>
   2601c:	ldr	r1, [sp, #12]
   26020:	ldr	r2, [r1, #4]
   26024:	lsl	r2, r2, #1
   26028:	strd	r2, [r1, #4]
   2602c:	b	25c90 <__assert_fail@plt+0x142f0>
   26030:	ldr	r9, [sp, #24]
   26034:	ldr	r0, [sp, #132]	; 0x84
   26038:	bl	1c734 <__assert_fail@plt+0xad94>
   2603c:	ldr	r3, [sp, #20]
   26040:	ldr	r0, [sp, #292]	; 0x124
   26044:	cmp	r0, r3
   26048:	beq	26050 <__assert_fail@plt+0x146b0>
   2604c:	bl	1c734 <__assert_fail@plt+0xad94>
   26050:	ldr	r0, [sp, #12]
   26054:	mov	r2, #0
   26058:	ldr	r3, [sp, #20]
   2605c:	str	r2, [sp, #284]	; 0x11c
   26060:	cmp	r0, r2
   26064:	str	r3, [sp, #292]	; 0x124
   26068:	mov	r3, #16
   2606c:	str	r3, [sp, #288]	; 0x120
   26070:	beq	26078 <__assert_fail@plt+0x146d8>
   26074:	bl	1feec <__assert_fail@plt+0xe54c>
   26078:	ldr	r4, [sp, #248]	; 0xf8
   2607c:	ldr	r3, [sp, #476]	; 0x1dc
   26080:	ldr	r3, [r3]
   26084:	b	254e8 <__assert_fail@plt+0x13b48>
   26088:	mov	r2, #0
   2608c:	mov	r3, #16
   26090:	str	r2, [sp, #284]	; 0x11c
   26094:	str	r3, [sp, #288]	; 0x120
   26098:	b	25d54 <__assert_fail@plt+0x143b4>
   2609c:	ldr	r9, [sp, #24]
   260a0:	ldr	r0, [sp, #132]	; 0x84
   260a4:	bl	1c734 <__assert_fail@plt+0xad94>
   260a8:	ldr	r3, [sp, #20]
   260ac:	ldr	r0, [sp, #292]	; 0x124
   260b0:	cmp	r0, r3
   260b4:	beq	26078 <__assert_fail@plt+0x146d8>
   260b8:	bl	1c734 <__assert_fail@plt+0xad94>
   260bc:	b	26078 <__assert_fail@plt+0x146d8>
   260c0:	mov	r2, #0
   260c4:	mov	r3, #16
   260c8:	str	r2, [sp, #284]	; 0x11c
   260cc:	str	r3, [sp, #288]	; 0x120
   260d0:	b	25b7c <__assert_fail@plt+0x141dc>
   260d4:	ldr	r9, [sp, #68]	; 0x44
   260d8:	b	25484 <__assert_fail@plt+0x13ae4>
   260dc:	ldr	r1, [sp, #172]	; 0xac
   260e0:	sub	r2, r5, r1
   260e4:	ldr	r0, [sp, #176]	; 0xb0
   260e8:	mov	r3, r4
   260ec:	cmp	r0, r2
   260f0:	bls	26100 <__assert_fail@plt+0x14760>
   260f4:	ldr	r3, [sp, #152]	; 0x98
   260f8:	ldrb	r3, [r3, r2]
   260fc:	add	r3, r4, r3
   26100:	ldrb	r3, [r3]
   26104:	cmp	r3, #0
   26108:	bne	24a38 <__assert_fail@plt+0x13098>
   2610c:	ldr	r2, [sp, #76]	; 0x4c
   26110:	ldr	r3, [sp, #96]	; 0x60
   26114:	add	r5, r5, r3
   26118:	ldr	r3, [sp, #64]	; 0x40
   2611c:	str	r5, [sp, #116]	; 0x74
   26120:	cmp	r5, r3
   26124:	movle	r3, #0
   26128:	movgt	r3, #1
   2612c:	cmp	r5, r2
   26130:	orrlt	r3, r3, #1
   26134:	cmp	r3, #0
   26138:	beq	25688 <__assert_fail@plt+0x13ce8>
   2613c:	b	24ecc <__assert_fail@plt+0x1352c>
   26140:	strd	r4, [sp, #-36]!	; 0xffffffdc
   26144:	mov	r4, r3
   26148:	ldr	r3, [r3, #4]
   2614c:	ldr	r5, [r0, #84]	; 0x54
   26150:	strd	r6, [sp, #8]
   26154:	strd	sl, [sp, #24]
   26158:	mov	fp, r2
   2615c:	mov	sl, r1
   26160:	str	lr, [sp, #32]
   26164:	lsl	lr, r2, #2
   26168:	ldr	r2, [r0, #100]	; 0x64
   2616c:	strd	r8, [sp, #16]
   26170:	sub	sp, sp, #108	; 0x6c
   26174:	str	lr, [sp, #24]
   26178:	ldr	r1, [r2, fp, lsl #2]
   2617c:	add	r2, r2, lr
   26180:	strd	r0, [sp, #16]
   26184:	mov	r0, #0
   26188:	cmp	r1, r0
   2618c:	str	r0, [sp, #72]	; 0x48
   26190:	beq	265e8 <__assert_fail@plt+0x14c48>
   26194:	cmp	r3, #0
   26198:	bne	261d4 <__assert_fail@plt+0x14834>
   2619c:	ldr	r1, [sl]
   261a0:	str	r3, [r1, fp, lsl #2]
   261a4:	ldr	r3, [r2]
   261a8:	ldrb	r3, [r3, #52]	; 0x34
   261ac:	ands	r3, r3, #64	; 0x40
   261b0:	bne	262f0 <__assert_fail@plt+0x14950>
   261b4:	mov	r0, r3
   261b8:	add	sp, sp, #108	; 0x6c
   261bc:	ldrd	r4, [sp]
   261c0:	ldrd	r6, [sp, #8]
   261c4:	ldrd	r8, [sp, #16]
   261c8:	ldrd	sl, [sp, #24]
   261cc:	add	sp, sp, #32
   261d0:	pop	{pc}		; (ldr pc, [sp], #4)
   261d4:	mov	r2, r4
   261d8:	mov	r1, r5
   261dc:	str	r0, [sp, #76]	; 0x4c
   261e0:	add	r0, sp, #76	; 0x4c
   261e4:	bl	1f5bc <__assert_fail@plt+0xdc1c>
   261e8:	ldr	r3, [sp, #76]	; 0x4c
   261ec:	mov	r8, r0
   261f0:	cmp	r3, #0
   261f4:	bne	261b4 <__assert_fail@plt+0x14814>
   261f8:	mov	r6, r0
   261fc:	ldr	r7, [r6, #28]!
   26200:	cmp	r7, #0
   26204:	bne	26278 <__assert_fail@plt+0x148d8>
   26208:	ldr	r2, [r4, #4]
   2620c:	lsl	r0, r2, #2
   26210:	strd	r2, [r8, #28]
   26214:	bl	1c864 <__assert_fail@plt+0xaec4>
   26218:	cmp	r0, #0
   2621c:	str	r0, [r8, #36]	; 0x24
   26220:	beq	26270 <__assert_fail@plt+0x148d0>
   26224:	ldr	r3, [r4, #4]
   26228:	str	r7, [sp, #76]	; 0x4c
   2622c:	cmp	r3, #0
   26230:	bgt	26244 <__assert_fail@plt+0x148a4>
   26234:	b	26278 <__assert_fail@plt+0x148d8>
   26238:	ldr	r3, [r4, #4]
   2623c:	cmp	r7, r3
   26240:	bge	26278 <__assert_fail@plt+0x148d8>
   26244:	ldr	r3, [r4, #8]
   26248:	mov	r0, r6
   2624c:	ldr	r1, [r5, #28]
   26250:	ldr	r3, [r3, r7, lsl #2]
   26254:	add	r7, r7, #1
   26258:	add	r3, r3, r3, lsl #1
   2625c:	add	r1, r1, r3, lsl #2
   26260:	bl	1ff5c <__assert_fail@plt+0xe5bc>
   26264:	cmp	r0, #0
   26268:	str	r0, [sp, #76]	; 0x4c
   2626c:	beq	26238 <__assert_fail@plt+0x14898>
   26270:	mov	r3, #12
   26274:	b	261b4 <__assert_fail@plt+0x14814>
   26278:	ldr	r3, [sp, #20]
   2627c:	mov	r2, r6
   26280:	mov	r0, r4
   26284:	add	r3, r3, #4
   26288:	mov	r1, r3
   2628c:	str	r3, [sp, #36]	; 0x24
   26290:	bl	1f89c <__assert_fail@plt+0xdefc>
   26294:	cmp	r0, #0
   26298:	str	r0, [sp, #72]	; 0x48
   2629c:	bne	268b4 <__assert_fail@plt+0x14f14>
   262a0:	ldr	r3, [sl, #20]
   262a4:	cmp	r3, #0
   262a8:	bne	266b4 <__assert_fail@plt+0x14d14>
   262ac:	mov	r2, r4
   262b0:	mov	r1, r5
   262b4:	ldr	r4, [sl]
   262b8:	add	r0, sp, #72	; 0x48
   262bc:	bl	1f5bc <__assert_fail@plt+0xdc1c>
   262c0:	ldr	r3, [sp, #72]	; 0x48
   262c4:	str	r0, [r4, fp, lsl #2]
   262c8:	cmp	r3, #0
   262cc:	bne	261b4 <__assert_fail@plt+0x14814>
   262d0:	ldr	r3, [sp, #16]
   262d4:	ldr	r2, [r3, #100]	; 0x64
   262d8:	ldr	r3, [sp, #24]
   262dc:	add	r2, r2, r3
   262e0:	ldr	r3, [r2]
   262e4:	ldrb	r3, [r3, #52]	; 0x34
   262e8:	ands	r3, r3, #64	; 0x40
   262ec:	beq	261b4 <__assert_fail@plt+0x14814>
   262f0:	ldr	r3, [sp, #16]
   262f4:	mov	r8, #0
   262f8:	ldr	ip, [r3, #108]	; 0x6c
   262fc:	mov	r3, ip
   26300:	cmp	r8, r3
   26304:	bge	26364 <__assert_fail@plt+0x149c4>
   26308:	ldr	r1, [sp, #16]
   2630c:	add	r2, r8, r3
   26310:	add	r2, r2, r2, lsr #31
   26314:	asr	r2, r2, #1
   26318:	ldr	r0, [r1, #116]	; 0x74
   2631c:	add	r1, r2, r2, lsl #1
   26320:	add	r1, r0, r1, lsl #3
   26324:	ldr	r1, [r1, #4]
   26328:	cmp	fp, r1
   2632c:	ble	26354 <__assert_fail@plt+0x149b4>
   26330:	b	26628 <__assert_fail@plt+0x14c88>
   26334:	asr	r3, r3, #1
   26338:	add	r1, r3, r3, lsl #1
   2633c:	mov	lr, r3
   26340:	add	r1, r0, r1, lsl #3
   26344:	ldr	r1, [r1, #4]
   26348:	cmp	fp, r1
   2634c:	bgt	26630 <__assert_fail@plt+0x14c90>
   26350:	mov	r2, r3
   26354:	add	r3, r8, r2
   26358:	cmp	r8, r2
   2635c:	add	r3, r3, r3, lsr #31
   26360:	blt	26334 <__assert_fail@plt+0x14994>
   26364:	cmp	ip, r8
   26368:	ble	26620 <__assert_fail@plt+0x14c80>
   2636c:	ldr	r1, [sp, #16]
   26370:	add	r2, r8, r8, lsl #1
   26374:	lsl	r2, r2, #3
   26378:	ldr	r3, [r1, #116]	; 0x74
   2637c:	str	r2, [sp, #48]	; 0x30
   26380:	add	r3, r3, r2
   26384:	ldr	r3, [r3, #4]
   26388:	cmp	fp, r3
   2638c:	bne	26620 <__assert_fail@plt+0x14c80>
   26390:	cmn	r8, #1
   26394:	beq	26620 <__assert_fail@plt+0x14c80>
   26398:	ldr	r3, [sp, #20]
   2639c:	ldr	r9, [r1, #84]	; 0x54
   263a0:	ldr	r0, [r3, #8]
   263a4:	mov	r3, #0
   263a8:	str	r3, [sp, #76]	; 0x4c
   263ac:	cmp	r0, r3
   263b0:	ble	26620 <__assert_fail@plt+0x14c80>
   263b4:	add	r2, sl, #24
   263b8:	str	r2, [sp, #36]	; 0x24
   263bc:	add	r2, sl, #20
   263c0:	str	fp, [sp, #44]	; 0x2c
   263c4:	mov	fp, r3
   263c8:	str	r2, [sp, #40]	; 0x28
   263cc:	str	r8, [sp, #56]	; 0x38
   263d0:	b	263e8 <__assert_fail@plt+0x14a48>
   263d4:	cmp	r3, #4
   263d8:	beq	26424 <__assert_fail@plt+0x14a84>
   263dc:	add	fp, fp, #1
   263e0:	cmp	fp, r0
   263e4:	bge	26614 <__assert_fail@plt+0x14c74>
   263e8:	ldr	r3, [sp, #20]
   263ec:	ldr	r2, [sl, #8]
   263f0:	ldr	r1, [r3, #12]
   263f4:	ldr	r3, [r9]
   263f8:	ldr	r6, [r1, fp, lsl #2]
   263fc:	add	r3, r3, r6, lsl #3
   26400:	cmp	r6, r2
   26404:	ldrb	r3, [r3, #4]
   26408:	bne	263d4 <__assert_fail@plt+0x14a34>
   2640c:	ldr	r2, [sl, #12]
   26410:	ldr	r1, [sp, #44]	; 0x2c
   26414:	cmp	r1, r2
   26418:	beq	263dc <__assert_fail@plt+0x14a3c>
   2641c:	cmp	r3, #4
   26420:	bne	263dc <__assert_fail@plt+0x14a3c>
   26424:	ldr	r3, [sp, #16]
   26428:	lsl	r2, r6, #2
   2642c:	str	fp, [sp, #60]	; 0x3c
   26430:	ldr	fp, [sp, #44]	; 0x2c
   26434:	ldr	r7, [sp, #56]	; 0x38
   26438:	ldr	r4, [r3, #116]	; 0x74
   2643c:	add	r3, r6, r6, lsl #1
   26440:	lsl	r3, r3, #2
   26444:	strd	r2, [sp, #28]
   26448:	add	r2, sl, #16
   2644c:	ldr	r3, [sp, #48]	; 0x30
   26450:	str	r2, [sp, #52]	; 0x34
   26454:	add	r4, r4, r3
   26458:	b	265ac <__assert_fail@plt+0x14c0c>
   2645c:	ldr	r3, [r9, #12]
   26460:	ldr	r2, [sp, #28]
   26464:	ldr	r8, [r3, r2]
   26468:	ldr	r3, [sl, #12]
   2646c:	cmp	r5, r3
   26470:	bgt	26598 <__assert_fail@plt+0x14bf8>
   26474:	ldr	r3, [sl]
   26478:	ldr	r3, [r3, r5, lsl #2]
   2647c:	cmp	r3, #0
   26480:	beq	26598 <__assert_fail@plt+0x14bf8>
   26484:	mov	r2, r8
   26488:	add	r1, r3, #12
   2648c:	ldr	r0, [r3, #8]
   26490:	bl	1e6a0 <__assert_fail@plt+0xcd00>
   26494:	cmp	r0, #0
   26498:	beq	26598 <__assert_fail@plt+0x14bf8>
   2649c:	mov	r3, r6
   264a0:	str	fp, [sp]
   264a4:	str	r8, [sp, #4]
   264a8:	str	r5, [sp, #8]
   264ac:	ldr	r0, [sp, #16]
   264b0:	ldr	r2, [sp, #36]	; 0x24
   264b4:	ldr	r1, [sp, #40]	; 0x28
   264b8:	bl	1e974 <__assert_fail@plt+0xcfd4>
   264bc:	cmp	r0, #0
   264c0:	bne	26598 <__assert_fail@plt+0x14bf8>
   264c4:	ldr	r3, [sp, #76]	; 0x4c
   264c8:	cmp	r3, #0
   264cc:	beq	2663c <__assert_fail@plt+0x14c9c>
   264d0:	add	r4, sp, #76	; 0x4c
   264d4:	add	r5, sp, #92	; 0x5c
   264d8:	mov	r0, r5
   264dc:	mov	r1, r7
   264e0:	str	r6, [sp, #84]	; 0x54
   264e4:	str	fp, [sp, #88]	; 0x58
   264e8:	bl	1e0cc <__assert_fail@plt+0xc72c>
   264ec:	cmp	r0, #0
   264f0:	beq	268f4 <__assert_fail@plt+0x14f54>
   264f4:	mov	r1, r4
   264f8:	ldr	r0, [sp, #16]
   264fc:	ldr	r2, [sp, #24]
   26500:	ldr	r3, [sp, #76]	; 0x4c
   26504:	ldr	r4, [r3, r2]
   26508:	bl	24334 <__assert_fail@plt+0x12994>
   2650c:	cmp	r0, #0
   26510:	bne	26680 <__assert_fail@plt+0x14ce0>
   26514:	ldr	r1, [sl, #4]
   26518:	ldr	r3, [sp, #76]	; 0x4c
   2651c:	cmp	r1, #0
   26520:	beq	26540 <__assert_fail@plt+0x14ba0>
   26524:	mov	r2, r3
   26528:	mov	r0, r9
   2652c:	add	r3, fp, #1
   26530:	bl	1f7d8 <__assert_fail@plt+0xde38>
   26534:	cmp	r0, #0
   26538:	bne	26680 <__assert_fail@plt+0x14ce0>
   2653c:	ldr	r3, [sp, #76]	; 0x4c
   26540:	mov	r2, r7
   26544:	ldr	r1, [sp, #24]
   26548:	str	r4, [r3, r1]
   2654c:	add	r1, sp, #100	; 0x64
   26550:	ldr	r4, [sp, #96]	; 0x60
   26554:	mov	r0, r4
   26558:	bl	1e6a0 <__assert_fail@plt+0xcd00>
   2655c:	sub	r2, r0, #1
   26560:	cmp	r4, r2
   26564:	movgt	r3, #0
   26568:	movle	r3, #1
   2656c:	orrs	r3, r3, r2, lsr #31
   26570:	bne	26588 <__assert_fail@plt+0x14be8>
   26574:	sub	r4, r4, #1
   26578:	add	r1, sp, #100	; 0x64
   2657c:	add	r0, sp, #96	; 0x60
   26580:	str	r4, [sp, #96]	; 0x60
   26584:	bl	1e840 <__assert_fail@plt+0xcea0>
   26588:	ldr	r3, [sp, #16]
   2658c:	ldr	r4, [r3, #116]	; 0x74
   26590:	add	r3, r7, r7, lsl #1
   26594:	add	r4, r4, r3, lsl #3
   26598:	ldrb	r3, [r4, #20]
   2659c:	add	r7, r7, #1
   265a0:	add	r4, r4, #24
   265a4:	cmp	r3, #0
   265a8:	beq	266a4 <__assert_fail@plt+0x14d04>
   265ac:	ldr	r3, [r4]
   265b0:	cmp	r6, r3
   265b4:	bne	26598 <__assert_fail@plt+0x14bf8>
   265b8:	ldr	r3, [r4, #8]
   265bc:	ldr	r5, [r4, #12]
   265c0:	sub	r5, r5, r3
   265c4:	cmp	r5, #0
   265c8:	add	r5, fp, r5
   265cc:	bne	2645c <__assert_fail@plt+0x14abc>
   265d0:	ldr	r3, [r9, #20]
   265d4:	ldr	r2, [sp, #32]
   265d8:	add	r3, r3, r2
   265dc:	ldr	r3, [r3, #8]
   265e0:	ldr	r8, [r3]
   265e4:	b	26468 <__assert_fail@plt+0x14ac8>
   265e8:	ldr	r6, [sl]
   265ec:	cmp	r3, r0
   265f0:	streq	r3, [r6, fp, lsl #2]
   265f4:	beq	261b4 <__assert_fail@plt+0x14814>
   265f8:	mov	r2, r4
   265fc:	mov	r1, r5
   26600:	add	r0, sp, #72	; 0x48
   26604:	bl	1f5bc <__assert_fail@plt+0xdc1c>
   26608:	str	r0, [r6, fp, lsl #2]
   2660c:	ldr	r3, [sp, #72]	; 0x48
   26610:	b	261b4 <__assert_fail@plt+0x14814>
   26614:	ldr	r3, [sp, #76]	; 0x4c
   26618:	cmp	r3, #0
   2661c:	bne	26904 <__assert_fail@plt+0x14f64>
   26620:	mov	r3, #0
   26624:	b	261b4 <__assert_fail@plt+0x14814>
   26628:	mov	lr, r2
   2662c:	mov	r2, r3
   26630:	add	r8, lr, #1
   26634:	mov	r3, r2
   26638:	b	26300 <__assert_fail@plt+0x14960>
   2663c:	ldrd	r2, [sl]
   26640:	add	r4, sp, #76	; 0x4c
   26644:	add	r5, sp, #92	; 0x5c
   26648:	mov	r0, r5
   2664c:	ldr	ip, [sl, #24]
   26650:	ldr	r1, [sp, #52]	; 0x34
   26654:	strd	r2, [sp, #76]	; 0x4c
   26658:	ldrd	r2, [sl, #16]
   2665c:	str	ip, [r4, #24]
   26660:	strd	r2, [sp, #64]	; 0x40
   26664:	ldrd	r2, [sl, #8]
   26668:	strd	r2, [r4, #8]
   2666c:	ldrd	r2, [sp, #64]	; 0x40
   26670:	strd	r2, [r4, #16]
   26674:	bl	1f0e0 <__assert_fail@plt+0xd740>
   26678:	cmp	r0, #0
   2667c:	beq	264d8 <__assert_fail@plt+0x14b38>
   26680:	mov	r3, r0
   26684:	ldr	r2, [sp, #76]	; 0x4c
   26688:	cmp	r2, #0
   2668c:	beq	261b4 <__assert_fail@plt+0x14814>
   26690:	ldr	r0, [sp, #100]	; 0x64
   26694:	str	r3, [sp, #16]
   26698:	bl	1c734 <__assert_fail@plt+0xad94>
   2669c:	ldr	r3, [sp, #16]
   266a0:	b	261b4 <__assert_fail@plt+0x14814>
   266a4:	ldr	r3, [sp, #20]
   266a8:	ldr	fp, [sp, #60]	; 0x3c
   266ac:	ldr	r0, [r3, #8]
   266b0:	b	263dc <__assert_fail@plt+0x14a3c>
   266b4:	ldr	r3, [sp, #16]
   266b8:	ldr	r3, [r3, #116]	; 0x74
   266bc:	str	r3, [sp, #32]
   266c0:	ble	267a0 <__assert_fail@plt+0x14e00>
   266c4:	mov	r6, r0
   266c8:	str	fp, [sp, #28]
   266cc:	ldr	r3, [sl, #24]
   266d0:	ldr	r0, [sp, #28]
   266d4:	ldr	ip, [sp, #32]
   266d8:	ldr	r3, [r3, r6, lsl #2]
   266dc:	add	r3, r3, r3, lsl #1
   266e0:	add	r2, ip, r3, lsl #3
   266e4:	ldr	r1, [r2, #8]
   266e8:	cmp	r0, r1
   266ec:	ble	2678c <__assert_fail@plt+0x14dec>
   266f0:	ldr	r1, [r2, #4]
   266f4:	cmp	r0, r1
   266f8:	bgt	2678c <__assert_fail@plt+0x14dec>
   266fc:	ldr	r1, [r2, #12]
   26700:	ldr	r2, [ip, r3, lsl #3]
   26704:	ldr	r3, [r5]
   26708:	cmp	r0, r1
   2670c:	ldr	r7, [r4, #4]
   26710:	ldr	r9, [r3, r2, lsl #3]
   26714:	beq	267ac <__assert_fail@plt+0x14e0c>
   26718:	cmp	r7, #0
   2671c:	ble	2678c <__assert_fail@plt+0x14dec>
   26720:	mov	r8, #0
   26724:	ldr	fp, [sp, #36]	; 0x24
   26728:	b	2673c <__assert_fail@plt+0x14d9c>
   2672c:	add	r8, r8, #1
   26730:	cmp	r8, r7
   26734:	bge	2678c <__assert_fail@plt+0x14dec>
   26738:	ldr	r3, [r5]
   2673c:	ldr	r2, [r4, #8]
   26740:	ldr	r1, [r2, r8, lsl #2]
   26744:	add	r2, r3, r1, lsl #3
   26748:	ldrb	r2, [r2, #4]
   2674c:	sub	r2, r2, #8
   26750:	cmp	r2, #1
   26754:	bhi	2672c <__assert_fail@plt+0x14d8c>
   26758:	ldr	r3, [r3, r1, lsl #3]
   2675c:	cmp	r9, r3
   26760:	bne	2672c <__assert_fail@plt+0x14d8c>
   26764:	mov	r3, fp
   26768:	mov	r2, r4
   2676c:	mov	r0, r5
   26770:	bl	1fa84 <__assert_fail@plt+0xe0e4>
   26774:	cmp	r0, #0
   26778:	bne	268b4 <__assert_fail@plt+0x14f14>
   2677c:	ldr	r7, [r4, #4]
   26780:	add	r8, r8, #1
   26784:	cmp	r8, r7
   26788:	blt	26738 <__assert_fail@plt+0x14d98>
   2678c:	ldr	r3, [sl, #20]
   26790:	add	r6, r6, #1
   26794:	cmp	r6, r3
   26798:	blt	266cc <__assert_fail@plt+0x14d2c>
   2679c:	ldr	fp, [sp, #28]
   267a0:	mov	r3, #0
   267a4:	str	r3, [sp, #72]	; 0x48
   267a8:	b	262ac <__assert_fail@plt+0x1490c>
   267ac:	cmp	r7, #0
   267b0:	ble	2678c <__assert_fail@plt+0x14dec>
   267b4:	ldr	lr, [r4, #8]
   267b8:	mvn	r8, #0
   267bc:	mov	fp, r8
   267c0:	str	r6, [sp, #40]	; 0x28
   267c4:	add	r2, lr, r7, lsl #2
   267c8:	mov	r1, lr
   267cc:	mov	r6, r2
   267d0:	b	267f0 <__assert_fail@plt+0x14e50>
   267d4:	cmp	r0, #9
   267d8:	bne	267e8 <__assert_fail@plt+0x14e48>
   267dc:	ldr	r0, [ip]
   267e0:	cmp	r9, r0
   267e4:	moveq	r8, r2
   267e8:	cmp	r6, r1
   267ec:	beq	26818 <__assert_fail@plt+0x14e78>
   267f0:	ldr	r2, [r1], #4
   267f4:	add	ip, r3, r2, lsl #3
   267f8:	ldrb	r0, [ip, #4]
   267fc:	cmp	r0, #8
   26800:	bne	267d4 <__assert_fail@plt+0x14e34>
   26804:	ldr	r0, [r3, r2, lsl #3]
   26808:	cmp	r9, r0
   2680c:	moveq	fp, r2
   26810:	cmp	r6, r1
   26814:	bne	267f0 <__assert_fail@plt+0x14e50>
   26818:	cmp	fp, #0
   2681c:	ldr	r6, [sp, #40]	; 0x28
   26820:	bge	268bc <__assert_fail@plt+0x14f1c>
   26824:	cmp	r8, #0
   26828:	blt	2678c <__assert_fail@plt+0x14dec>
   2682c:	mov	r9, #0
   26830:	str	r6, [sp, #40]	; 0x28
   26834:	b	26848 <__assert_fail@plt+0x14ea8>
   26838:	add	r9, r9, #1
   2683c:	cmp	r7, r9
   26840:	ble	268fc <__assert_fail@plt+0x14f5c>
   26844:	ldr	lr, [r4, #8]
   26848:	mov	r2, r8
   2684c:	ldr	r6, [lr, r9, lsl #2]
   26850:	ldr	r0, [r5, #28]
   26854:	add	fp, r6, r6, lsl #1
   26858:	lsl	fp, fp, #2
   2685c:	add	r0, r0, fp
   26860:	add	r1, r0, #8
   26864:	ldr	r0, [r0, #4]
   26868:	bl	1e6a0 <__assert_fail@plt+0xcd00>
   2686c:	cmp	r0, #0
   26870:	bne	26838 <__assert_fail@plt+0x14e98>
   26874:	ldr	r1, [r5, #24]
   26878:	add	fp, r1, fp
   2687c:	add	r1, fp, #8
   26880:	ldr	r0, [fp, #4]
   26884:	bl	1e6a0 <__assert_fail@plt+0xcd00>
   26888:	cmp	r0, #0
   2688c:	bne	26838 <__assert_fail@plt+0x14e98>
   26890:	mov	r1, r6
   26894:	mov	r2, r4
   26898:	ldr	r3, [sp, #36]	; 0x24
   2689c:	mov	r0, r5
   268a0:	bl	1fa84 <__assert_fail@plt+0xe0e4>
   268a4:	cmp	r0, #0
   268a8:	bne	268b4 <__assert_fail@plt+0x14f14>
   268ac:	ldr	r7, [r4, #4]
   268b0:	b	2683c <__assert_fail@plt+0x14e9c>
   268b4:	mov	r3, r0
   268b8:	b	261b4 <__assert_fail@plt+0x14814>
   268bc:	mov	r1, fp
   268c0:	mov	r2, r4
   268c4:	ldr	r3, [sp, #36]	; 0x24
   268c8:	mov	r0, r5
   268cc:	bl	1fa84 <__assert_fail@plt+0xe0e4>
   268d0:	cmp	r0, #0
   268d4:	bne	268b4 <__assert_fail@plt+0x14f14>
   268d8:	cmp	r8, #0
   268dc:	blt	2678c <__assert_fail@plt+0x14dec>
   268e0:	ldr	r7, [r4, #4]
   268e4:	cmp	r7, #0
   268e8:	ble	2678c <__assert_fail@plt+0x14dec>
   268ec:	ldr	lr, [r4, #8]
   268f0:	b	2682c <__assert_fail@plt+0x14e8c>
   268f4:	mov	r3, #12
   268f8:	b	26684 <__assert_fail@plt+0x14ce4>
   268fc:	ldr	r6, [sp, #40]	; 0x28
   26900:	b	2678c <__assert_fail@plt+0x14dec>
   26904:	mov	r3, #0
   26908:	b	26690 <__assert_fail@plt+0x14cf0>
   2690c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   26910:	ldr	r3, [r1, #56]	; 0x38
   26914:	strd	r6, [sp, #8]
   26918:	mov	r6, r0
   2691c:	ldr	r7, [r1, #40]	; 0x28
   26920:	strd	r8, [sp, #16]
   26924:	str	sl, [sp, #24]
   26928:	str	lr, [sp, #28]
   2692c:	sub	sp, sp, #8
   26930:	cmp	r3, r7
   26934:	movle	r3, #2
   26938:	movle	r0, #0
   2693c:	strble	r3, [r6, #4]
   26940:	ble	26c08 <__assert_fail@plt+0x15268>
   26944:	ldr	sl, [r1, #4]
   26948:	mov	r8, r2
   2694c:	mov	r5, r1
   26950:	ldrb	r3, [r6, #6]
   26954:	ldr	r2, [r1, #80]	; 0x50
   26958:	ldrb	r4, [sl, r7]
   2695c:	bic	r3, r3, #96	; 0x60
   26960:	cmp	r2, #1
   26964:	strb	r4, [r6]
   26968:	strb	r3, [r6, #6]
   2696c:	ble	26c24 <__assert_fail@plt+0x15284>
   26970:	ldr	r3, [r1, #28]
   26974:	cmp	r7, r3
   26978:	beq	2698c <__assert_fail@plt+0x14fec>
   2697c:	ldr	r3, [r1, #8]
   26980:	ldr	r3, [r3, r7, lsl #2]
   26984:	cmn	r3, #1
   26988:	beq	26e6c <__assert_fail@plt+0x154cc>
   2698c:	cmp	r4, #92	; 0x5c
   26990:	beq	26c60 <__assert_fail@plt+0x152c0>
   26994:	ldr	r3, [r5, #8]
   26998:	mov	r2, #1
   2699c:	strb	r2, [r6, #4]
   269a0:	ldr	r9, [r3, r7, lsl #2]
   269a4:	mov	r0, r9
   269a8:	sub	r9, r9, #95	; 0x5f
   269ac:	bl	117e4 <iswalnum@plt>
   269b0:	ldrb	r3, [r6, #6]
   269b4:	clz	r9, r9
   269b8:	cmp	r0, #0
   269bc:	lsr	r9, r9, #5
   269c0:	movne	r9, #1
   269c4:	bfi	r3, r9, #6, #1
   269c8:	strb	r3, [r6, #6]
   269cc:	sub	r4, r4, #10
   269d0:	cmp	r4, #115	; 0x73
   269d4:	ldrls	pc, [pc, r4, lsl #2]
   269d8:	b	26e64 <__assert_fail@plt+0x154c4>
   269dc:	andeq	r6, r2, r4, asr #31
   269e0:	andeq	r6, r2, r4, ror #28
   269e4:	andeq	r6, r2, r4, ror #28
   269e8:	andeq	r6, r2, r4, ror #28
   269ec:	andeq	r6, r2, r4, ror #28
   269f0:	andeq	r6, r2, r4, ror #28
   269f4:	andeq	r6, r2, r4, ror #28
   269f8:	andeq	r6, r2, r4, ror #28
   269fc:	andeq	r6, r2, r4, ror #28
   26a00:	andeq	r6, r2, r4, ror #28
   26a04:	andeq	r6, r2, r4, ror #28
   26a08:	andeq	r6, r2, r4, ror #28
   26a0c:	andeq	r6, r2, r4, ror #28
   26a10:	andeq	r6, r2, r4, ror #28
   26a14:	andeq	r6, r2, r4, ror #28
   26a18:	andeq	r6, r2, r4, ror #28
   26a1c:	andeq	r6, r2, r4, ror #28
   26a20:	andeq	r6, r2, r4, ror #28
   26a24:	andeq	r6, r2, r4, ror #28
   26a28:	andeq	r6, r2, r4, ror #28
   26a2c:	andeq	r6, r2, r4, ror #28
   26a30:	andeq	r6, r2, r4, ror #28
   26a34:	andeq	r6, r2, r4, ror #28
   26a38:	andeq	r6, r2, r4, ror #28
   26a3c:	andeq	r6, r2, r4, ror #28
   26a40:	andeq	r6, r2, r4, ror #28
   26a44:	andeq	r6, r2, ip, lsr #23
   26a48:	andeq	r6, r2, r4, ror #28
   26a4c:	andeq	r6, r2, r4, ror #28
   26a50:	andeq	r6, r2, r4, ror #28
   26a54:	andeq	r6, r2, r0, asr #30
   26a58:	andeq	r6, r2, r8, asr pc
   26a5c:	andeq	r6, r2, r0, lsr pc
   26a60:	andeq	r6, r2, r0, ror pc
   26a64:	andeq	r6, r2, r4, ror #28
   26a68:	andeq	r6, r2, r4, ror #28
   26a6c:			; <UNDEFINED> instruction: 0x00026eb8
   26a70:	andeq	r6, r2, r4, ror #28
   26a74:	andeq	r6, r2, r4, ror #28
   26a78:	andeq	r6, r2, r4, ror #28
   26a7c:	andeq	r6, r2, r4, ror #28
   26a80:	andeq	r6, r2, r4, ror #28
   26a84:	andeq	r6, r2, r4, ror #28
   26a88:	andeq	r6, r2, r4, ror #28
   26a8c:	andeq	r6, r2, r4, ror #28
   26a90:	andeq	r6, r2, r4, ror #28
   26a94:	andeq	r6, r2, r4, ror #28
   26a98:	andeq	r6, r2, r4, ror #28
   26a9c:	andeq	r6, r2, r4, ror #28
   26aa0:	andeq	r6, r2, r4, ror #28
   26aa4:	andeq	r6, r2, r4, ror #28
   26aa8:	andeq	r6, r2, r4, ror #28
   26aac:	andeq	r6, r2, r4, ror #28
   26ab0:	andeq	r6, r2, r8, asr #29
   26ab4:	andeq	r6, r2, r4, ror #28
   26ab8:	andeq	r6, r2, r4, ror #28
   26abc:	andeq	r6, r2, r4, ror #28
   26ac0:	andeq	r6, r2, r4, ror #28
   26ac4:	andeq	r6, r2, r4, ror #28
   26ac8:	andeq	r6, r2, r4, ror #28
   26acc:	andeq	r6, r2, r4, ror #28
   26ad0:	andeq	r6, r2, r4, ror #28
   26ad4:	andeq	r6, r2, r4, ror #28
   26ad8:	andeq	r6, r2, r4, ror #28
   26adc:	andeq	r6, r2, r4, ror #28
   26ae0:	andeq	r6, r2, r4, ror #28
   26ae4:	andeq	r6, r2, r4, ror #28
   26ae8:	andeq	r6, r2, r4, ror #28
   26aec:	andeq	r6, r2, r4, ror #28
   26af0:	andeq	r6, r2, r4, ror #28
   26af4:	andeq	r6, r2, r4, ror #28
   26af8:	andeq	r6, r2, r4, ror #28
   26afc:	andeq	r6, r2, r4, ror #28
   26b00:	andeq	r6, r2, r4, ror #28
   26b04:	andeq	r6, r2, r4, ror #28
   26b08:	andeq	r6, r2, r4, ror #28
   26b0c:	andeq	r6, r2, r4, ror #28
   26b10:	andeq	r6, r2, r4, ror #28
   26b14:	andeq	r6, r2, r4, ror #28
   26b18:	andeq	r6, r2, r4, ror #28
   26b1c:	andeq	r6, r2, r4, ror #28
   26b20:	andeq	r6, r2, r4, ror #29
   26b24:	andeq	r6, r2, r4, ror #28
   26b28:	andeq	r6, r2, r4, ror #28
   26b2c:	strdeq	r6, [r2], -r4
   26b30:	andeq	r6, r2, r4, ror #28
   26b34:	andeq	r6, r2, r4, ror #28
   26b38:	andeq	r6, r2, r4, ror #28
   26b3c:	andeq	r6, r2, r4, ror #28
   26b40:	andeq	r6, r2, r4, ror #28
   26b44:	andeq	r6, r2, r4, ror #28
   26b48:	andeq	r6, r2, r4, ror #28
   26b4c:	andeq	r6, r2, r4, ror #28
   26b50:	andeq	r6, r2, r4, ror #28
   26b54:	andeq	r6, r2, r4, ror #28
   26b58:	andeq	r6, r2, r4, ror #28
   26b5c:	andeq	r6, r2, r4, ror #28
   26b60:	andeq	r6, r2, r4, ror #28
   26b64:	andeq	r6, r2, r4, ror #28
   26b68:	andeq	r6, r2, r4, ror #28
   26b6c:	andeq	r6, r2, r4, ror #28
   26b70:	andeq	r6, r2, r4, ror #28
   26b74:	andeq	r6, r2, r4, ror #28
   26b78:	andeq	r6, r2, r4, ror #28
   26b7c:	andeq	r6, r2, r4, ror #28
   26b80:	andeq	r6, r2, r4, ror #28
   26b84:	andeq	r6, r2, r4, ror #28
   26b88:	andeq	r6, r2, r4, ror #28
   26b8c:	andeq	r6, r2, r4, ror #28
   26b90:	andeq	r6, r2, r4, ror #28
   26b94:	andeq	r6, r2, r4, ror #28
   26b98:	andeq	r6, r2, r4, ror #28
   26b9c:	andeq	r6, r2, r4, ror #28
   26ba0:	andeq	r6, r2, ip, lsl #31
   26ba4:	andeq	r6, r2, r8, lsr #31
   26ba8:	ldrdeq	r6, [r2], -r0
   26bac:	tst	r8, #8
   26bb0:	bne	26bf4 <__assert_fail@plt+0x15254>
   26bb4:	ldr	r3, [r5, #48]	; 0x30
   26bb8:	add	r7, r7, #1
   26bbc:	cmp	r7, r3
   26bc0:	beq	26bf4 <__assert_fail@plt+0x15254>
   26bc4:	mov	r2, r8
   26bc8:	mov	r1, r5
   26bcc:	str	r7, [r5, #40]	; 0x28
   26bd0:	mov	r0, sp
   26bd4:	bl	2690c <__assert_fail@plt+0x14f6c>
   26bd8:	ldrb	r2, [sp, #4]
   26bdc:	ldr	r3, [r5, #40]	; 0x28
   26be0:	sub	r2, r2, #9
   26be4:	cmp	r2, #1
   26be8:	sub	r3, r3, #1
   26bec:	str	r3, [r5, #40]	; 0x28
   26bf0:	bhi	26e64 <__assert_fail@plt+0x154c4>
   26bf4:	mov	r3, #12
   26bf8:	mov	r2, #32
   26bfc:	mov	r0, #1
   26c00:	str	r2, [r6]
   26c04:	strb	r3, [r6, #4]
   26c08:	add	sp, sp, #8
   26c0c:	ldrd	r4, [sp]
   26c10:	ldrd	r6, [sp, #8]
   26c14:	ldrd	r8, [sp, #16]
   26c18:	ldr	sl, [sp, #24]
   26c1c:	add	sp, sp, #28
   26c20:	pop	{pc}		; (ldr pc, [sp], #4)
   26c24:	cmp	r4, #92	; 0x5c
   26c28:	beq	26c60 <__assert_fail@plt+0x152c0>
   26c2c:	mov	r3, #1
   26c30:	strb	r3, [r6, #4]
   26c34:	bl	11778 <__ctype_b_loc@plt>
   26c38:	ldr	r1, [r0]
   26c3c:	lsl	r3, r4, #1
   26c40:	ldrb	r2, [r6, #6]
   26c44:	ldrh	r3, [r1, r3]
   26c48:	ubfx	r3, r3, #3, #1
   26c4c:	cmp	r4, #95	; 0x5f
   26c50:	orreq	r3, r3, #1
   26c54:	bfi	r2, r3, #6, #1
   26c58:	strb	r2, [r6, #6]
   26c5c:	b	269cc <__assert_fail@plt+0x1502c>
   26c60:	ldr	r1, [r5, #48]	; 0x30
   26c64:	add	r3, r7, #1
   26c68:	cmp	r3, r1
   26c6c:	blt	26c80 <__assert_fail@plt+0x152e0>
   26c70:	mov	r3, #36	; 0x24
   26c74:	mov	r0, #1
   26c78:	strb	r3, [r6, #4]
   26c7c:	b	26c08 <__assert_fail@plt+0x15268>
   26c80:	ldrb	r1, [r5, #75]	; 0x4b
   26c84:	cmp	r1, #0
   26c88:	bne	271f0 <__assert_fail@plt+0x15850>
   26c8c:	ldrb	r7, [sl, r3]
   26c90:	mov	r1, #1
   26c94:	strb	r7, [r6]
   26c98:	cmp	r2, r1
   26c9c:	strb	r1, [r6, #4]
   26ca0:	ble	26e8c <__assert_fail@plt+0x154ec>
   26ca4:	ldr	r1, [r5, #8]
   26ca8:	add	r1, r1, r3, lsl #2
   26cac:	ldr	r4, [r1]
   26cb0:	mov	r0, r4
   26cb4:	sub	r4, r4, #95	; 0x5f
   26cb8:	bl	117e4 <iswalnum@plt>
   26cbc:	ldrb	r3, [r6, #6]
   26cc0:	clz	r4, r4
   26cc4:	cmp	r0, #0
   26cc8:	lsr	r4, r4, #5
   26ccc:	movne	r4, #1
   26cd0:	bfi	r3, r4, #6, #1
   26cd4:	strb	r3, [r6, #6]
   26cd8:	sub	r3, r7, #39	; 0x27
   26cdc:	cmp	r3, #86	; 0x56
   26ce0:	ldrls	pc, [pc, r3, lsl #2]
   26ce4:	b	27004 <__assert_fail@plt+0x15664>
   26ce8:			; <UNDEFINED> instruction: 0x000271b8
   26cec:	ldrdeq	r7, [r2], -r8
   26cf0:	andeq	r7, r2, r0, lsr #3
   26cf4:	andeq	r7, r2, r4
   26cf8:	andeq	r7, r2, r0, lsl #3
   26cfc:	andeq	r7, r2, r4
   26d00:	andeq	r7, r2, r4
   26d04:	andeq	r7, r2, r4
   26d08:	andeq	r7, r2, r4
   26d0c:	andeq	r7, r2, r4
   26d10:	andeq	r7, r2, r0, ror #2
   26d14:	andeq	r7, r2, r0, ror #2
   26d18:	andeq	r7, r2, r0, ror #2
   26d1c:	andeq	r7, r2, r0, ror #2
   26d20:	andeq	r7, r2, r0, ror #2
   26d24:	andeq	r7, r2, r0, ror #2
   26d28:	andeq	r7, r2, r0, ror #2
   26d2c:	andeq	r7, r2, r0, ror #2
   26d30:	andeq	r7, r2, r0, ror #2
   26d34:	andeq	r7, r2, r4
   26d38:	andeq	r7, r2, r4
   26d3c:	andeq	r7, r2, r0, asr #2
   26d40:	andeq	r7, r2, r4
   26d44:	andeq	r7, r2, r0, lsr #2
   26d48:	andeq	r7, r2, r0, lsl #2
   26d4c:	andeq	r7, r2, r4
   26d50:	andeq	r7, r2, r4
   26d54:	andeq	r7, r2, r0, ror #1
   26d58:	andeq	r7, r2, r4
   26d5c:	andeq	r7, r2, r4
   26d60:	andeq	r7, r2, r4
   26d64:	andeq	r7, r2, r4
   26d68:	andeq	r7, r2, r4
   26d6c:	andeq	r7, r2, r4
   26d70:	andeq	r7, r2, r4
   26d74:	andeq	r7, r2, r4
   26d78:	andeq	r7, r2, r4
   26d7c:	andeq	r7, r2, r4
   26d80:	andeq	r7, r2, r4
   26d84:	andeq	r7, r2, r4
   26d88:	andeq	r7, r2, r4
   26d8c:	andeq	r7, r2, r4
   26d90:	andeq	r7, r2, r4
   26d94:	andeq	r7, r2, r4
   26d98:	andeq	r7, r2, r8, asr #1
   26d9c:	andeq	r7, r2, r4
   26da0:	andeq	r7, r2, r4
   26da4:	andeq	r7, r2, r4
   26da8:	strheq	r7, [r2], -r0
   26dac:	andeq	r7, r2, r4
   26db0:	andeq	r7, r2, r4
   26db4:	andeq	r7, r2, r4
   26db8:	andeq	r7, r2, r4
   26dbc:	andeq	r7, r2, r4
   26dc0:	andeq	r7, r2, r4
   26dc4:	andeq	r7, r2, r4
   26dc8:	andeq	r7, r2, r4
   26dcc:	muleq	r2, r0, r0
   26dd0:	andeq	r7, r2, r4
   26dd4:	andeq	r7, r2, r0, ror r0
   26dd8:	andeq	r7, r2, r4
   26ddc:	andeq	r7, r2, r4
   26de0:	andeq	r7, r2, r4
   26de4:	andeq	r7, r2, r4
   26de8:	andeq	r7, r2, r4
   26dec:	andeq	r7, r2, r4
   26df0:	andeq	r7, r2, r4
   26df4:	andeq	r7, r2, r4
   26df8:	andeq	r7, r2, r4
   26dfc:	andeq	r7, r2, r4
   26e00:	andeq	r7, r2, r4
   26e04:	andeq	r7, r2, r4
   26e08:	andeq	r7, r2, r4
   26e0c:	andeq	r7, r2, r4
   26e10:	andeq	r7, r2, r4
   26e14:	andeq	r7, r2, r4
   26e18:	andeq	r7, r2, r8, asr r0
   26e1c:	andeq	r7, r2, r4
   26e20:	andeq	r7, r2, r4
   26e24:	andeq	r7, r2, r4
   26e28:	andeq	r7, r2, r0, asr #32
   26e2c:	andeq	r7, r2, r4
   26e30:	andeq	r7, r2, r4
   26e34:	andeq	r7, r2, r4
   26e38:	andeq	r7, r2, r4, lsr #32
   26e3c:	andeq	r7, r2, ip
   26e40:	andeq	r6, r2, ip, ror #31
   26e44:	add	r7, sl, r7
   26e48:	eor	r3, r8, #2048	; 0x800
   26e4c:	ldrb	r2, [r7, #-1]
   26e50:	ubfx	r3, r3, #11, #1
   26e54:	cmp	r2, #10
   26e58:	orrne	r3, r3, #1
   26e5c:	cmp	r3, #0
   26e60:	beq	26f18 <__assert_fail@plt+0x15578>
   26e64:	mov	r0, #1
   26e68:	b	26c08 <__assert_fail@plt+0x15268>
   26e6c:	ldr	r3, [r6, #4]
   26e70:	mov	r0, #1
   26e74:	bic	r3, r3, #2097152	; 0x200000
   26e78:	bic	r3, r3, #255	; 0xff
   26e7c:	orr	r3, r3, #2097152	; 0x200000
   26e80:	orr	r3, r3, r0
   26e84:	str	r3, [r6, #4]
   26e88:	b	26c08 <__assert_fail@plt+0x15268>
   26e8c:	bl	11778 <__ctype_b_loc@plt>
   26e90:	ldr	r1, [r0]
   26e94:	lsl	r3, r7, #1
   26e98:	ldrb	r2, [r6, #6]
   26e9c:	ldrh	r3, [r1, r3]
   26ea0:	ubfx	r3, r3, #3, #1
   26ea4:	cmp	r7, #95	; 0x5f
   26ea8:	orreq	r3, r3, #1
   26eac:	bfi	r2, r3, #6, #1
   26eb0:	strb	r2, [r6, #6]
   26eb4:	b	26cd8 <__assert_fail@plt+0x15338>
   26eb8:	mov	r3, #5
   26ebc:	mov	r0, #1
   26ec0:	strb	r3, [r6, #4]
   26ec4:	b	26c08 <__assert_fail@plt+0x15268>
   26ec8:	movw	r3, #1026	; 0x402
   26ecc:	tst	r8, r3
   26ed0:	bne	26e64 <__assert_fail@plt+0x154c4>
   26ed4:	mov	r3, #19
   26ed8:	mov	r0, #1
   26edc:	strb	r3, [r6, #4]
   26ee0:	b	26c08 <__assert_fail@plt+0x15268>
   26ee4:	mov	r3, #20
   26ee8:	mov	r0, #1
   26eec:	strb	r3, [r6, #4]
   26ef0:	b	26c08 <__assert_fail@plt+0x15268>
   26ef4:	mov	r3, #8
   26ef8:	movt	r3, #128	; 0x80
   26efc:	tst	r8, r3
   26f00:	moveq	r3, #1
   26f04:	movne	r3, #0
   26f08:	cmp	r7, #0
   26f0c:	moveq	r3, #0
   26f10:	cmp	r3, #0
   26f14:	bne	26e44 <__assert_fail@plt+0x154a4>
   26f18:	mov	r3, #12
   26f1c:	mov	r2, #16
   26f20:	mov	r0, #1
   26f24:	str	r2, [r6]
   26f28:	strb	r3, [r6, #4]
   26f2c:	b	26c08 <__assert_fail@plt+0x15268>
   26f30:	mov	r3, #11
   26f34:	mov	r0, #1
   26f38:	strb	r3, [r6, #4]
   26f3c:	b	26c08 <__assert_fail@plt+0x15268>
   26f40:	tst	r8, #8192	; 0x2000
   26f44:	beq	26e64 <__assert_fail@plt+0x154c4>
   26f48:	mov	r3, #8
   26f4c:	mov	r0, #1
   26f50:	strb	r3, [r6, #4]
   26f54:	b	26c08 <__assert_fail@plt+0x15268>
   26f58:	tst	r8, #8192	; 0x2000
   26f5c:	beq	26e64 <__assert_fail@plt+0x154c4>
   26f60:	mov	r3, #9
   26f64:	mov	r0, #1
   26f68:	strb	r3, [r6, #4]
   26f6c:	b	26c08 <__assert_fail@plt+0x15268>
   26f70:	movw	r3, #1026	; 0x402
   26f74:	tst	r8, r3
   26f78:	bne	26e64 <__assert_fail@plt+0x154c4>
   26f7c:	mov	r3, #18
   26f80:	mov	r0, #1
   26f84:	strb	r3, [r6, #4]
   26f88:	b	26c08 <__assert_fail@plt+0x15268>
   26f8c:	and	r2, r8, #4608	; 0x1200
   26f90:	cmp	r2, #4608	; 0x1200
   26f94:	moveq	r3, #23
   26f98:	moveq	r0, #1
   26f9c:	strbeq	r3, [r6, #4]
   26fa0:	bne	26e64 <__assert_fail@plt+0x154c4>
   26fa4:	b	26c08 <__assert_fail@plt+0x15268>
   26fa8:	and	r2, r8, #33792	; 0x8400
   26fac:	cmp	r2, #32768	; 0x8000
   26fb0:	bne	26e64 <__assert_fail@plt+0x154c4>
   26fb4:	mov	r3, #10
   26fb8:	mov	r0, #1
   26fbc:	strb	r3, [r6, #4]
   26fc0:	b	26c08 <__assert_fail@plt+0x15268>
   26fc4:	tst	r8, #2048	; 0x800
   26fc8:	beq	26e64 <__assert_fail@plt+0x154c4>
   26fcc:	b	26fb4 <__assert_fail@plt+0x15614>
   26fd0:	and	r2, r8, #4608	; 0x1200
   26fd4:	cmp	r2, #4608	; 0x1200
   26fd8:	moveq	r3, #24
   26fdc:	moveq	r0, #1
   26fe0:	strbeq	r3, [r6, #4]
   26fe4:	bne	26e64 <__assert_fail@plt+0x154c4>
   26fe8:	b	26c08 <__assert_fail@plt+0x15268>
   26fec:	and	r2, r8, #4608	; 0x1200
   26ff0:	cmp	r2, #512	; 0x200
   26ff4:	moveq	r3, #24
   26ff8:	moveq	r0, #2
   26ffc:	strbeq	r3, [r6, #4]
   27000:	beq	26c08 <__assert_fail@plt+0x15268>
   27004:	mov	r0, #2
   27008:	b	26c08 <__assert_fail@plt+0x15268>
   2700c:	tst	r8, #33792	; 0x8400
   27010:	bne	27004 <__assert_fail@plt+0x15664>
   27014:	mov	r3, #10
   27018:	mov	r0, #2
   2701c:	strb	r3, [r6, #4]
   27020:	b	26c08 <__assert_fail@plt+0x15268>
   27024:	and	r2, r8, #4608	; 0x1200
   27028:	cmp	r2, #512	; 0x200
   2702c:	moveq	r3, #23
   27030:	moveq	r0, #2
   27034:	strbeq	r3, [r6, #4]
   27038:	bne	27004 <__assert_fail@plt+0x15664>
   2703c:	b	26c08 <__assert_fail@plt+0x15268>
   27040:	tst	r8, #524288	; 0x80000
   27044:	bne	27004 <__assert_fail@plt+0x15664>
   27048:	mov	r3, #32
   2704c:	mov	r0, #2
   27050:	strb	r3, [r6, #4]
   27054:	b	26c08 <__assert_fail@plt+0x15268>
   27058:	tst	r8, #524288	; 0x80000
   2705c:	bne	27004 <__assert_fail@plt+0x15664>
   27060:	mov	r3, #34	; 0x22
   27064:	mov	r0, #2
   27068:	strb	r3, [r6, #4]
   2706c:	b	26c08 <__assert_fail@plt+0x15268>
   27070:	tst	r8, #524288	; 0x80000
   27074:	bne	27004 <__assert_fail@plt+0x15664>
   27078:	mov	r3, #12
   2707c:	mov	r2, #256	; 0x100
   27080:	mov	r0, #2
   27084:	str	r2, [r6]
   27088:	strb	r3, [r6, #4]
   2708c:	b	26c08 <__assert_fail@plt+0x15268>
   27090:	tst	r8, #524288	; 0x80000
   27094:	bne	27004 <__assert_fail@plt+0x15664>
   27098:	mov	r3, #12
   2709c:	mov	r2, #64	; 0x40
   270a0:	mov	r0, #2
   270a4:	str	r2, [r6]
   270a8:	strb	r3, [r6, #4]
   270ac:	b	26c08 <__assert_fail@plt+0x15268>
   270b0:	tst	r8, #524288	; 0x80000
   270b4:	bne	27004 <__assert_fail@plt+0x15664>
   270b8:	mov	r3, #33	; 0x21
   270bc:	mov	r0, #2
   270c0:	strb	r3, [r6, #4]
   270c4:	b	26c08 <__assert_fail@plt+0x15268>
   270c8:	tst	r8, #524288	; 0x80000
   270cc:	bne	27004 <__assert_fail@plt+0x15664>
   270d0:	mov	r3, #35	; 0x23
   270d4:	mov	r0, #2
   270d8:	strb	r3, [r6, #4]
   270dc:	b	26c08 <__assert_fail@plt+0x15268>
   270e0:	tst	r8, #524288	; 0x80000
   270e4:	bne	27004 <__assert_fail@plt+0x15664>
   270e8:	mov	r3, #12
   270ec:	mov	r2, #512	; 0x200
   270f0:	mov	r0, #2
   270f4:	str	r2, [r6]
   270f8:	strb	r3, [r6, #4]
   270fc:	b	26c08 <__assert_fail@plt+0x15268>
   27100:	movw	r2, #1026	; 0x402
   27104:	and	r2, r2, r8
   27108:	cmp	r2, #2
   2710c:	moveq	r3, #19
   27110:	moveq	r0, r2
   27114:	strbeq	r3, [r6, #4]
   27118:	bne	27004 <__assert_fail@plt+0x15664>
   2711c:	b	26c08 <__assert_fail@plt+0x15268>
   27120:	tst	r8, #524288	; 0x80000
   27124:	bne	27004 <__assert_fail@plt+0x15664>
   27128:	mov	r3, #12
   2712c:	mov	r2, #9
   27130:	mov	r0, #2
   27134:	str	r2, [r6]
   27138:	strb	r3, [r6, #4]
   2713c:	b	26c08 <__assert_fail@plt+0x15268>
   27140:	tst	r8, #524288	; 0x80000
   27144:	bne	27004 <__assert_fail@plt+0x15664>
   27148:	mov	r3, #12
   2714c:	mov	r2, #6
   27150:	mov	r0, #2
   27154:	str	r2, [r6]
   27158:	strb	r3, [r6, #4]
   2715c:	b	26c08 <__assert_fail@plt+0x15268>
   27160:	tst	r8, #16384	; 0x4000
   27164:	bne	27004 <__assert_fail@plt+0x15664>
   27168:	sub	r7, r7, #49	; 0x31
   2716c:	mov	r3, #4
   27170:	mov	r0, #2
   27174:	str	r7, [r6]
   27178:	strb	r3, [r6, #4]
   2717c:	b	26c08 <__assert_fail@plt+0x15268>
   27180:	movw	r2, #1026	; 0x402
   27184:	and	r2, r2, r8
   27188:	cmp	r2, #2
   2718c:	moveq	r3, #18
   27190:	moveq	r0, r2
   27194:	strbeq	r3, [r6, #4]
   27198:	bne	27004 <__assert_fail@plt+0x15664>
   2719c:	b	26c08 <__assert_fail@plt+0x15268>
   271a0:	tst	r8, #8192	; 0x2000
   271a4:	bne	27004 <__assert_fail@plt+0x15664>
   271a8:	mov	r3, #9
   271ac:	mov	r0, #2
   271b0:	strb	r3, [r6, #4]
   271b4:	b	26c08 <__assert_fail@plt+0x15268>
   271b8:	tst	r8, #524288	; 0x80000
   271bc:	bne	27004 <__assert_fail@plt+0x15664>
   271c0:	mov	r3, #12
   271c4:	mov	r2, #128	; 0x80
   271c8:	mov	r0, #2
   271cc:	str	r2, [r6]
   271d0:	strb	r3, [r6, #4]
   271d4:	b	26c08 <__assert_fail@plt+0x15268>
   271d8:	tst	r8, #8192	; 0x2000
   271dc:	bne	27004 <__assert_fail@plt+0x15664>
   271e0:	mov	r3, #8
   271e4:	mov	r0, #2
   271e8:	strb	r3, [r6, #4]
   271ec:	b	26c08 <__assert_fail@plt+0x15268>
   271f0:	cmp	r2, #1
   271f4:	ble	27228 <__assert_fail@plt+0x15888>
   271f8:	ldr	r1, [r5, #8]
   271fc:	ldr	r0, [r1, r3, lsl #2]
   27200:	add	r1, r1, r3, lsl #2
   27204:	cmn	r0, #1
   27208:	beq	27264 <__assert_fail@plt+0x158c4>
   2720c:	ldr	r0, [r5, #28]
   27210:	add	r7, r7, #2
   27214:	cmp	r0, r7
   27218:	beq	27228 <__assert_fail@plt+0x15888>
   2721c:	ldr	r0, [r1, #4]
   27220:	cmn	r0, #1
   27224:	beq	27264 <__assert_fail@plt+0x158c4>
   27228:	ldrb	r0, [r5, #76]	; 0x4c
   2722c:	ldr	r1, [r5]
   27230:	ldr	ip, [r5, #24]
   27234:	cmp	r0, #0
   27238:	beq	27258 <__assert_fail@plt+0x158b8>
   2723c:	ldr	r0, [r5, #12]
   27240:	add	r1, r1, ip
   27244:	ldr	r0, [r0, r3, lsl #2]
   27248:	ldrb	r7, [r1, r0]
   2724c:	tst	r7, #128	; 0x80
   27250:	beq	26c90 <__assert_fail@plt+0x152f0>
   27254:	b	26c8c <__assert_fail@plt+0x152ec>
   27258:	add	r1, r1, r3
   2725c:	ldrb	r7, [r1, ip]
   27260:	b	26c90 <__assert_fail@plt+0x152f0>
   27264:	ldrb	r7, [sl, r3]
   27268:	mov	r3, #1
   2726c:	strb	r7, [r6]
   27270:	strb	r3, [r6, #4]
   27274:	b	26cac <__assert_fail@plt+0x1530c>
   27278:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2727c:	mov	r5, r0
   27280:	mov	r4, r1
   27284:	strd	r6, [sp, #8]
   27288:	mov	r7, r2
   2728c:	mvn	r6, #0
   27290:	str	r8, [sp, #16]
   27294:	movw	r8, #32816	; 0x8030
   27298:	str	lr, [sp, #20]
   2729c:	mov	r2, r7
   272a0:	mov	r1, r5
   272a4:	mov	r0, r4
   272a8:	bl	2690c <__assert_fail@plt+0x14f6c>
   272ac:	ldr	r3, [r5, #40]	; 0x28
   272b0:	ldrb	r2, [r4, #4]
   272b4:	ldrb	r1, [r4]
   272b8:	add	r0, r3, r0
   272bc:	cmp	r2, #2
   272c0:	str	r0, [r5, #40]	; 0x28
   272c4:	beq	2732c <__assert_fail@plt+0x1598c>
   272c8:	cmp	r1, #44	; 0x2c
   272cc:	cmpne	r2, #24
   272d0:	beq	27330 <__assert_fail@plt+0x15990>
   272d4:	cmp	r2, #1
   272d8:	beq	272e4 <__assert_fail@plt+0x15944>
   272dc:	mvn	r6, #1
   272e0:	b	2729c <__assert_fail@plt+0x158fc>
   272e4:	sub	r2, r1, #48	; 0x30
   272e8:	uxtb	r0, r2
   272ec:	cmp	r0, #9
   272f0:	movhi	r3, #0
   272f4:	movls	r3, #1
   272f8:	cmn	r6, #2
   272fc:	moveq	r3, #0
   27300:	cmp	r3, #0
   27304:	beq	272dc <__assert_fail@plt+0x1593c>
   27308:	cmn	r6, #1
   2730c:	add	r3, r6, r6, lsl #2
   27310:	moveq	r6, r2
   27314:	beq	2729c <__assert_fail@plt+0x158fc>
   27318:	add	r6, r1, r3, lsl #1
   2731c:	cmp	r6, r8
   27320:	movge	r6, r8
   27324:	sub	r6, r6, #48	; 0x30
   27328:	b	2729c <__assert_fail@plt+0x158fc>
   2732c:	mvn	r6, #1
   27330:	mov	r0, r6
   27334:	ldrd	r4, [sp]
   27338:	ldrd	r6, [sp, #8]
   2733c:	ldr	r8, [sp, #16]
   27340:	add	sp, sp, #20
   27344:	pop	{pc}		; (ldr pc, [sp], #4)
   27348:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2734c:	mov	r4, r1
   27350:	ldr	r5, [r1, #40]	; 0x28
   27354:	strd	r6, [sp, #8]
   27358:	mov	r6, r0
   2735c:	strd	r8, [sp, #16]
   27360:	mov	r8, r2
   27364:	mov	r9, r3
   27368:	ldr	r2, [r1, #80]	; 0x50
   2736c:	strd	sl, [sp, #24]
   27370:	str	lr, [sp, #32]
   27374:	sub	sp, sp, #12
   27378:	ldrb	r7, [sp, #52]	; 0x34
   2737c:	cmp	r2, #1
   27380:	beq	27398 <__assert_fail@plt+0x159f8>
   27384:	mov	r1, r5
   27388:	mov	r0, r4
   2738c:	bl	1e644 <__assert_fail@plt+0xcca4>
   27390:	cmp	r0, #1
   27394:	bgt	273f8 <__assert_fail@plt+0x15a58>
   27398:	ldrb	r2, [r8, #4]
   2739c:	add	r5, r5, r9
   273a0:	str	r5, [r4, #40]	; 0x28
   273a4:	and	r3, r2, #251	; 0xfb
   273a8:	cmp	r2, #28
   273ac:	cmpne	r3, #26
   273b0:	beq	27418 <__assert_fail@plt+0x15a78>
   273b4:	cmp	r2, #22
   273b8:	moveq	r2, r7
   273bc:	orrne	r2, r7, #1
   273c0:	cmp	r2, #0
   273c4:	beq	27560 <__assert_fail@plt+0x15bc0>
   273c8:	ldrb	r2, [r8]
   273cc:	mov	r3, #0
   273d0:	mov	r0, r3
   273d4:	str	r3, [r6]
   273d8:	strb	r2, [r6, #4]
   273dc:	add	sp, sp, #12
   273e0:	ldrd	r4, [sp]
   273e4:	ldrd	r6, [sp, #8]
   273e8:	ldrd	r8, [sp, #16]
   273ec:	ldrd	sl, [sp, #24]
   273f0:	add	sp, sp, #32
   273f4:	pop	{pc}		; (ldr pc, [sp], #4)
   273f8:	ldr	r2, [r4, #8]
   273fc:	add	r3, r5, r0
   27400:	mov	r1, #1
   27404:	mov	r0, #0
   27408:	ldr	r2, [r2, r5, lsl #2]
   2740c:	stm	r6, {r1, r2}
   27410:	str	r3, [r4, #40]	; 0x28
   27414:	b	273dc <__assert_fail@plt+0x15a3c>
   27418:	ldr	sl, [r4, #56]	; 0x38
   2741c:	cmp	r5, sl
   27420:	bge	274c0 <__assert_fail@plt+0x15b20>
   27424:	ldrb	fp, [r8]
   27428:	mov	r9, #0
   2742c:	b	27450 <__assert_fail@plt+0x15ab0>
   27430:	ldr	r3, [r6, #4]
   27434:	strb	r7, [r3, r9]
   27438:	add	r9, r9, #1
   2743c:	cmp	r9, #32
   27440:	beq	274c0 <__assert_fail@plt+0x15b20>
   27444:	ldrb	r2, [r8, #4]
   27448:	ldr	r5, [r4, #40]	; 0x28
   2744c:	ldr	sl, [r4, #56]	; 0x38
   27450:	cmp	r2, #30
   27454:	beq	274c8 <__assert_fail@plt+0x15b28>
   27458:	ldr	r2, [r4, #4]
   2745c:	add	r3, r5, #1
   27460:	str	r3, [r4, #40]	; 0x28
   27464:	ldrb	r7, [r2, r5]
   27468:	cmp	sl, r3
   2746c:	ble	274c0 <__assert_fail@plt+0x15b20>
   27470:	cmp	fp, r7
   27474:	bne	27430 <__assert_fail@plt+0x15a90>
   27478:	ldr	r2, [r4, #4]
   2747c:	ldrb	r2, [r2, r3]
   27480:	cmp	r2, #93	; 0x5d
   27484:	bne	27430 <__assert_fail@plt+0x15a90>
   27488:	ldr	r2, [r6, #4]
   2748c:	add	r3, r3, #1
   27490:	mov	r0, #0
   27494:	str	r3, [r4, #40]	; 0x28
   27498:	strb	r0, [r2, r9]
   2749c:	ldrb	r3, [r8, #4]
   274a0:	cmp	r3, #28
   274a4:	beq	27590 <__assert_fail@plt+0x15bf0>
   274a8:	cmp	r3, #30
   274ac:	beq	27584 <__assert_fail@plt+0x15be4>
   274b0:	cmp	r3, #26
   274b4:	moveq	r3, #3
   274b8:	streq	r3, [r6]
   274bc:	b	273dc <__assert_fail@plt+0x15a3c>
   274c0:	mov	r0, #7
   274c4:	b	273dc <__assert_fail@plt+0x15a3c>
   274c8:	ldrb	r3, [r4, #75]	; 0x4b
   274cc:	cmp	r3, #0
   274d0:	beq	27458 <__assert_fail@plt+0x15ab8>
   274d4:	ldrb	r3, [r4, #76]	; 0x4c
   274d8:	cmp	r3, #0
   274dc:	beq	27544 <__assert_fail@plt+0x15ba4>
   274e0:	ldr	r3, [r4, #28]
   274e4:	lsl	r2, r5, #2
   274e8:	cmp	r5, r3
   274ec:	beq	27500 <__assert_fail@plt+0x15b60>
   274f0:	ldr	r3, [r4, #8]
   274f4:	ldr	r3, [r3, r5, lsl #2]
   274f8:	cmn	r3, #1
   274fc:	beq	27458 <__assert_fail@plt+0x15ab8>
   27500:	ldr	r3, [r4]
   27504:	ldr	r1, [r4, #12]
   27508:	ldr	r1, [r1, r2]
   2750c:	ldr	r2, [r4, #24]
   27510:	add	r3, r3, r1
   27514:	ldrb	r7, [r3, r2]
   27518:	tst	r7, #128	; 0x80
   2751c:	bne	27458 <__assert_fail@plt+0x15ab8>
   27520:	ldr	r0, [r4, #80]	; 0x50
   27524:	cmp	r0, #1
   27528:	beq	27538 <__assert_fail@plt+0x15b98>
   2752c:	mov	r1, r5
   27530:	mov	r0, r4
   27534:	bl	1e644 <__assert_fail@plt+0xcca4>
   27538:	add	r3, r5, r0
   2753c:	str	r3, [r4, #40]	; 0x28
   27540:	b	27468 <__assert_fail@plt+0x15ac8>
   27544:	ldr	r2, [r4]
   27548:	add	r3, r5, #1
   2754c:	ldr	r1, [r4, #24]
   27550:	str	r3, [r4, #40]	; 0x28
   27554:	add	r5, r2, r5
   27558:	ldrb	r7, [r5, r1]
   2755c:	b	27468 <__assert_fail@plt+0x15ac8>
   27560:	mov	r1, r4
   27564:	mov	r0, sp
   27568:	ldr	r2, [sp, #48]	; 0x30
   2756c:	bl	1ca98 <__assert_fail@plt+0xb0f8>
   27570:	ldrb	r3, [sp, #4]
   27574:	cmp	r3, #21
   27578:	movne	r0, #11
   2757c:	beq	273c8 <__assert_fail@plt+0x15a28>
   27580:	b	273dc <__assert_fail@plt+0x15a3c>
   27584:	mov	r3, #4
   27588:	str	r3, [r6]
   2758c:	b	273dc <__assert_fail@plt+0x15a3c>
   27590:	mov	r3, #2
   27594:	str	r3, [r6]
   27598:	b	273dc <__assert_fail@plt+0x15a3c>
   2759c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   275a0:	mov	r5, r1
   275a4:	strd	r6, [sp, #8]
   275a8:	strd	r8, [sp, #16]
   275ac:	strd	sl, [sp, #24]
   275b0:	mov	fp, r2
   275b4:	mov	sl, r0
   275b8:	str	lr, [sp, #32]
   275bc:	sub	sp, sp, #164	; 0xa4
   275c0:	ldrb	r2, [r2, #4]
   275c4:	str	r3, [sp, #20]
   275c8:	ldr	r3, [r1]
   275cc:	str	r3, [sp, #32]
   275d0:	sub	r3, r2, #1
   275d4:	cmp	r3, #35	; 0x23
   275d8:	ldrls	pc, [pc, r3, lsl #2]
   275dc:	b	2812c <__assert_fail@plt+0x1678c>
   275e0:	andeq	r7, r2, r4, lsr #31
   275e4:	ldrdeq	r7, [r2], -r0
   275e8:	andeq	r8, r2, ip, lsr #2
   275ec:	andeq	r8, r2, r4, asr #2
   275f0:			; <UNDEFINED> instruction: 0x000281b0
   275f4:	andeq	r8, r2, ip, lsr #2
   275f8:	andeq	r8, r2, ip, lsr #2
   275fc:	andeq	r7, r2, ip, lsr #18
   27600:	strdeq	r8, [r2], -r4
   27604:	ldrdeq	r7, [r2], -r0
   27608:	andeq	r7, r2, ip, ror r6
   2760c:	andeq	r7, r2, r0, lsr sp
   27610:	andeq	r8, r2, ip, lsr #2
   27614:	andeq	r8, r2, ip, lsr #2
   27618:	andeq	r8, r2, ip, lsr #2
   2761c:	andeq	r8, r2, ip, lsr #2
   27620:	andeq	r8, r2, ip, lsr #2
   27624:	andeq	r7, r2, ip, ror r6
   27628:	andeq	r7, r2, ip, ror r6
   2762c:	andeq	r7, r2, ip, ror lr
   27630:	andeq	r8, r2, ip, lsr #2
   27634:	andeq	r8, r2, ip, lsr #2
   27638:	andeq	r7, r2, r0, ror r6
   2763c:	muleq	r2, r8, r6
   27640:	andeq	r8, r2, ip, lsr #2
   27644:	andeq	r8, r2, ip, lsr #2
   27648:	andeq	r8, r2, ip, lsr #2
   2764c:	andeq	r8, r2, ip, lsr #2
   27650:	andeq	r8, r2, ip, lsr #2
   27654:	andeq	r8, r2, ip, lsr #2
   27658:	andeq	r8, r2, ip, lsr #2
   2765c:	strheq	r8, [r2], -r0
   27660:	strheq	r8, [r2], -r0
   27664:	andeq	r8, r2, ip, lsl #2
   27668:	andeq	r8, r2, ip, lsl #2
   2766c:	andeq	r8, r2, ip, lsr #2
   27670:	ldr	r3, [sp, #20]
   27674:	tst	r3, #16777216	; 0x1000000
   27678:	bne	278f8 <__assert_fail@plt+0x15f58>
   2767c:	ldr	r3, [sp, #20]
   27680:	tst	r3, #32
   27684:	bne	278f8 <__assert_fail@plt+0x15f58>
   27688:	tst	r3, #16
   2768c:	bne	2840c <__assert_fail@plt+0x16a6c>
   27690:	cmp	r2, #9
   27694:	beq	281f4 <__assert_fail@plt+0x16854>
   27698:	ldr	ip, [sp, #32]
   2769c:	mov	r0, #1
   276a0:	mov	r3, #0
   276a4:	mov	r2, r3
   276a8:	str	fp, [sp]
   276ac:	strb	r0, [fp, #4]
   276b0:	add	r1, ip, #64	; 0x40
   276b4:	add	r0, ip, #56	; 0x38
   276b8:	bl	1ec24 <__assert_fail@plt+0xd284>
   276bc:	subs	r3, r0, #0
   276c0:	str	r3, [sp, #24]
   276c4:	beq	28098 <__assert_fail@plt+0x166f8>
   276c8:	mov	r1, sl
   276cc:	mov	r0, fp
   276d0:	ldr	r2, [sp, #20]
   276d4:	bl	2690c <__assert_fail@plt+0x14f6c>
   276d8:	ldr	r3, [sl, #40]	; 0x28
   276dc:	ldrb	r5, [fp, #4]
   276e0:	add	r0, r3, r0
   276e4:	str	r0, [sl, #40]	; 0x28
   276e8:	cmp	r5, #23
   276ec:	cmpne	r5, #11
   276f0:	sub	r2, r5, #18
   276f4:	moveq	r3, #1
   276f8:	movne	r3, #0
   276fc:	cmp	r2, #1
   27700:	orrls	r3, r3, #1
   27704:	sub	r4, r5, #18
   27708:	clz	r4, r4
   2770c:	cmp	r3, #0
   27710:	lsr	r4, r4, #5
   27714:	beq	2790c <__assert_fail@plt+0x15f6c>
   27718:	ldrd	r2, [fp]
   2771c:	cmp	r5, #23
   27720:	add	r7, sp, #96	; 0x60
   27724:	ldr	r6, [sl, #40]	; 0x28
   27728:	strd	r2, [sp, #96]	; 0x60
   2772c:	beq	27b20 <__assert_fail@plt+0x16180>
   27730:	cmp	r5, #19
   27734:	beq	27aa0 <__assert_fail@plt+0x16100>
   27738:	mov	r1, sl
   2773c:	mov	r0, fp
   27740:	ldr	r2, [sp, #20]
   27744:	bl	2690c <__assert_fail@plt+0x14f6c>
   27748:	ldr	r3, [sl, #40]	; 0x28
   2774c:	ldr	r2, [sp, #24]
   27750:	add	r0, r3, r0
   27754:	cmp	r2, #0
   27758:	str	r0, [sl, #40]	; 0x28
   2775c:	beq	27b98 <__assert_fail@plt+0x161f8>
   27760:	cmp	r5, #18
   27764:	beq	27cf0 <__assert_fail@plt+0x16350>
   27768:	ldr	r6, [sp, #24]
   2776c:	ldrb	r3, [r6, #24]
   27770:	cmp	r3, #17
   27774:	beq	27aec <__assert_fail@plt+0x1614c>
   27778:	mov	r4, #0
   2777c:	mvn	r9, #0
   27780:	str	r4, [sp, #36]	; 0x24
   27784:	mov	r3, #11
   27788:	ldr	r2, [sp, #32]
   2778c:	mov	r0, #0
   27790:	mov	r1, #0
   27794:	add	r5, sp, #128	; 0x80
   27798:	str	r5, [sp]
   2779c:	strd	r0, [sp, #128]	; 0x80
   277a0:	add	r7, r2, #56	; 0x38
   277a4:	add	r8, r2, #64	; 0x40
   277a8:	strb	r3, [sp, #132]	; 0x84
   277ac:	mov	r2, r6
   277b0:	mov	r0, r7
   277b4:	mov	r1, r8
   277b8:	mov	r3, #0
   277bc:	bl	1ec24 <__assert_fail@plt+0xd284>
   277c0:	subs	r2, r0, #0
   277c4:	beq	27a74 <__assert_fail@plt+0x160d4>
   277c8:	add	r4, r4, #2
   277cc:	cmp	r4, r9
   277d0:	bgt	27870 <__assert_fail@plt+0x15ed0>
   277d4:	strd	sl, [sp, #40]	; 0x28
   277d8:	mov	sl, r2
   277dc:	mov	r0, r6
   277e0:	ldr	r1, [sp, #32]
   277e4:	mov	fp, #0
   277e8:	bl	1ecf4 <__assert_fail@plt+0xd354>
   277ec:	mov	r2, sl
   277f0:	mov	sl, #0
   277f4:	str	r5, [sp]
   277f8:	mov	ip, #16
   277fc:	mov	r3, r0
   27800:	mov	r6, r0
   27804:	mov	r1, r8
   27808:	strd	sl, [r5]
   2780c:	mov	r0, r7
   27810:	strb	ip, [sp, #132]	; 0x84
   27814:	add	r4, r4, #1
   27818:	bl	1ec24 <__assert_fail@plt+0xd284>
   2781c:	clz	r3, r0
   27820:	cmp	r6, #0
   27824:	lsr	r3, r3, #5
   27828:	moveq	ip, #1
   2782c:	mov	r2, r0
   27830:	mov	r1, r8
   27834:	mov	r0, r7
   27838:	movne	ip, r3
   2783c:	subs	r3, ip, #0
   27840:	bne	27a74 <__assert_fail@plt+0x160d4>
   27844:	mov	ip, #10
   27848:	str	r5, [sp]
   2784c:	strd	sl, [r5]
   27850:	strb	ip, [sp, #132]	; 0x84
   27854:	bl	1ec24 <__assert_fail@plt+0xd284>
   27858:	subs	sl, r0, #0
   2785c:	beq	27a74 <__assert_fail@plt+0x160d4>
   27860:	cmp	r4, r9
   27864:	ble	277dc <__assert_fail@plt+0x15e3c>
   27868:	mov	r2, sl
   2786c:	ldrd	sl, [sp, #40]	; 0x28
   27870:	ldr	r1, [sp, #36]	; 0x24
   27874:	cmp	r1, #0
   27878:	beq	27ce8 <__assert_fail@plt+0x16348>
   2787c:	mov	r3, r2
   27880:	mov	r9, #0
   27884:	str	r5, [sp]
   27888:	mov	r2, r1
   2788c:	mov	r1, r8
   27890:	mov	r8, #0
   27894:	mov	ip, #16
   27898:	mov	r0, r7
   2789c:	strd	r8, [r5]
   278a0:	strb	ip, [sp, #132]	; 0x84
   278a4:	bl	1ec24 <__assert_fail@plt+0xd284>
   278a8:	ldr	r3, [sp, #204]	; 0xcc
   278ac:	ldr	r3, [r3]
   278b0:	cmp	r3, #0
   278b4:	bne	27b8c <__assert_fail@plt+0x161ec>
   278b8:	str	r0, [sp, #24]
   278bc:	ldr	r3, [sp, #20]
   278c0:	ldrb	r5, [fp, #4]
   278c4:	tst	r3, #16777216	; 0x1000000
   278c8:	beq	276e8 <__assert_fail@plt+0x15d48>
   278cc:	cmp	r5, #23
   278d0:	cmpne	r5, #11
   278d4:	bne	276e8 <__assert_fail@plt+0x15d48>
   278d8:	ldr	r3, [sp, #24]
   278dc:	cmp	r3, #0
   278e0:	beq	278f8 <__assert_fail@plt+0x15f58>
   278e4:	movw	r1, #56040	; 0xdae8
   278e8:	movt	r1, #1
   278ec:	mov	r0, r3
   278f0:	mov	r2, #0
   278f4:	bl	1ca04 <__assert_fail@plt+0xb064>
   278f8:	mov	r2, #0
   278fc:	mov	r3, #13
   27900:	str	r2, [sp, #24]
   27904:	ldr	r2, [sp, #204]	; 0xcc
   27908:	str	r3, [r2]
   2790c:	ldr	r0, [sp, #24]
   27910:	add	sp, sp, #164	; 0xa4
   27914:	ldrd	r4, [sp]
   27918:	ldrd	r6, [sp, #8]
   2791c:	ldrd	r8, [sp, #16]
   27920:	ldrd	sl, [sp, #24]
   27924:	add	sp, sp, #32
   27928:	pop	{pc}		; (ldr pc, [sp], #4)
   2792c:	ldr	r4, [r5, #24]
   27930:	mov	r1, r0
   27934:	mov	r0, fp
   27938:	ldr	r6, [sp, #20]
   2793c:	add	r3, r4, #1
   27940:	orr	r2, r6, #8388608	; 0x800000
   27944:	str	r3, [r5, #24]
   27948:	bl	2690c <__assert_fail@plt+0x14f6c>
   2794c:	ldr	r3, [sl, #40]	; 0x28
   27950:	ldrb	r2, [fp, #4]
   27954:	add	r3, r3, r0
   27958:	cmp	r2, #9
   2795c:	str	r3, [sl, #40]	; 0x28
   27960:	moveq	r2, #0
   27964:	beq	28214 <__assert_fail@plt+0x16874>
   27968:	ldr	r3, [sp, #200]	; 0xc8
   2796c:	mov	r2, fp
   27970:	mov	r1, r5
   27974:	add	r0, r3, #1
   27978:	ldr	r3, [sp, #204]	; 0xcc
   2797c:	stm	sp, {r0, r3}
   27980:	mov	r3, r6
   27984:	mov	r0, sl
   27988:	bl	28ce0 <__assert_fail@plt+0x17340>
   2798c:	ldr	r3, [sp, #204]	; 0xcc
   27990:	mov	r2, r0
   27994:	ldr	r3, [r3]
   27998:	cmp	r3, #0
   2799c:	bne	279d0 <__assert_fail@plt+0x16030>
   279a0:	ldrb	r1, [fp, #4]
   279a4:	cmp	r1, #9
   279a8:	beq	28214 <__assert_fail@plt+0x16874>
   279ac:	cmp	r0, #0
   279b0:	beq	279c4 <__assert_fail@plt+0x16024>
   279b4:	movw	r1, #56040	; 0xdae8
   279b8:	movt	r1, #1
   279bc:	mov	r2, r3
   279c0:	bl	1ca04 <__assert_fail@plt+0xb064>
   279c4:	ldr	r2, [sp, #204]	; 0xcc
   279c8:	mov	r3, #8
   279cc:	str	r3, [r2]
   279d0:	mov	r3, #0
   279d4:	str	r3, [sp, #24]
   279d8:	b	2790c <__assert_fail@plt+0x15f6c>
   279dc:	cmp	r4, #0
   279e0:	ble	28aec <__assert_fail@plt+0x1714c>
   279e4:	cmp	r4, #1
   279e8:	beq	28a88 <__assert_fail@plt+0x170e8>
   279ec:	ldr	r6, [sp, #24]
   279f0:	mov	r7, #2
   279f4:	add	r5, sp, #128	; 0x80
   279f8:	str	r9, [sp, #36]	; 0x24
   279fc:	ldr	r3, [sp, #32]
   27a00:	strd	sl, [sp, #40]	; 0x28
   27a04:	mov	r9, r6
   27a08:	add	r1, r3, #56	; 0x38
   27a0c:	add	r3, r3, #64	; 0x40
   27a10:	mov	sl, r3
   27a14:	mov	fp, r1
   27a18:	b	27a24 <__assert_fail@plt+0x16084>
   27a1c:	cmp	r7, r4
   27a20:	bgt	27cd4 <__assert_fail@plt+0x16334>
   27a24:	mov	r0, r6
   27a28:	ldr	r1, [sp, #32]
   27a2c:	mov	r8, #0
   27a30:	bl	1ecf4 <__assert_fail@plt+0xd354>
   27a34:	mov	r2, r9
   27a38:	mov	r9, #0
   27a3c:	str	r5, [sp]
   27a40:	mov	ip, #16
   27a44:	mov	r6, r0
   27a48:	mov	r3, r0
   27a4c:	mov	r1, sl
   27a50:	strd	r8, [r5]
   27a54:	mov	r0, fp
   27a58:	strb	ip, [sp, #132]	; 0x84
   27a5c:	add	r7, r7, #1
   27a60:	bl	1ec24 <__assert_fail@plt+0xd284>
   27a64:	cmp	r0, #0
   27a68:	cmpne	r6, #0
   27a6c:	mov	r9, r0
   27a70:	bne	27a1c <__assert_fail@plt+0x1607c>
   27a74:	ldr	r2, [sp, #204]	; 0xcc
   27a78:	mov	r3, #12
   27a7c:	str	r3, [r2]
   27a80:	movw	r1, #56040	; 0xdae8
   27a84:	movt	r1, #1
   27a88:	ldr	r0, [sp, #24]
   27a8c:	mov	r2, #0
   27a90:	bl	1ca04 <__assert_fail@plt+0xb064>
   27a94:	mov	r3, #0
   27a98:	str	r3, [sp, #24]
   27a9c:	b	2790c <__assert_fail@plt+0x15f6c>
   27aa0:	mov	r1, sl
   27aa4:	mov	r0, fp
   27aa8:	ldr	r2, [sp, #20]
   27aac:	bl	2690c <__assert_fail@plt+0x14f6c>
   27ab0:	ldr	r3, [sl, #40]	; 0x28
   27ab4:	ldr	r2, [sp, #24]
   27ab8:	add	r0, r3, r0
   27abc:	cmp	r2, #0
   27ac0:	str	r0, [sl, #40]	; 0x28
   27ac4:	beq	27b98 <__assert_fail@plt+0x161f8>
   27ac8:	ldr	r6, [sp, #24]
   27acc:	ldrb	r3, [r6, #24]
   27ad0:	cmp	r3, #17
   27ad4:	beq	28b1c <__assert_fail@plt+0x1717c>
   27ad8:	mov	r3, #0
   27adc:	mov	r9, #1
   27ae0:	str	r3, [sp, #36]	; 0x24
   27ae4:	mov	r3, #10
   27ae8:	b	27788 <__assert_fail@plt+0x15de8>
   27aec:	ldr	r6, [sp, #24]
   27af0:	mov	r3, #0
   27af4:	mvn	r9, #0
   27af8:	mov	r4, r3
   27afc:	str	r3, [sp, #36]	; 0x24
   27b00:	movw	r1, #52292	; 0xcc44
   27b04:	movt	r1, #1
   27b08:	ldr	r2, [r6, #20]
   27b0c:	mov	r0, r6
   27b10:	bl	1ca04 <__assert_fail@plt+0xb064>
   27b14:	cmn	r9, #1
   27b18:	bne	27ae4 <__assert_fail@plt+0x16144>
   27b1c:	b	27784 <__assert_fail@plt+0x15de4>
   27b20:	mov	r1, fp
   27b24:	mov	r0, sl
   27b28:	ldr	r2, [sp, #20]
   27b2c:	bl	27278 <__assert_fail@plt+0x158d8>
   27b30:	cmn	r0, #1
   27b34:	mov	r4, r0
   27b38:	beq	27bb4 <__assert_fail@plt+0x16214>
   27b3c:	cmn	r0, #2
   27b40:	beq	27b58 <__assert_fail@plt+0x161b8>
   27b44:	ldrb	r3, [fp, #4]
   27b48:	cmp	r3, #24
   27b4c:	beq	27c78 <__assert_fail@plt+0x162d8>
   27b50:	cmp	r3, #1
   27b54:	beq	27ca0 <__assert_fail@plt+0x16300>
   27b58:	ldr	r3, [sp, #20]
   27b5c:	tst	r3, #2097152	; 0x200000
   27b60:	beq	28694 <__assert_fail@plt+0x16cf4>
   27b64:	ldrd	r2, [r7]
   27b68:	mov	r1, #1
   27b6c:	str	r6, [sl, #40]	; 0x28
   27b70:	ldr	r0, [sp, #24]
   27b74:	strd	r2, [fp]
   27b78:	ldr	r3, [sp, #204]	; 0xcc
   27b7c:	strb	r1, [fp, #4]
   27b80:	ldr	r3, [r3]
   27b84:	cmp	r3, #0
   27b88:	beq	278b8 <__assert_fail@plt+0x15f18>
   27b8c:	cmp	r0, #0
   27b90:	bne	278b8 <__assert_fail@plt+0x15f18>
   27b94:	b	27cc4 <__assert_fail@plt+0x16324>
   27b98:	ldr	r3, [sp, #204]	; 0xcc
   27b9c:	ldr	r3, [r3]
   27ba0:	cmp	r3, #0
   27ba4:	bne	279d0 <__assert_fail@plt+0x16030>
   27ba8:	mov	r3, #0
   27bac:	str	r3, [sp, #24]
   27bb0:	b	278bc <__assert_fail@plt+0x15f1c>
   27bb4:	ldrb	r3, [fp, #4]
   27bb8:	cmp	r3, #1
   27bbc:	bne	27cb8 <__assert_fail@plt+0x16318>
   27bc0:	ldrb	r3, [fp]
   27bc4:	cmp	r3, #44	; 0x2c
   27bc8:	bne	27cb8 <__assert_fail@plt+0x16318>
   27bcc:	mov	r4, #0
   27bd0:	mov	r1, fp
   27bd4:	mov	r0, sl
   27bd8:	ldr	r2, [sp, #20]
   27bdc:	bl	27278 <__assert_fail@plt+0x158d8>
   27be0:	cmn	r0, #2
   27be4:	mov	r9, r0
   27be8:	beq	27b58 <__assert_fail@plt+0x161b8>
   27bec:	cmn	r0, #1
   27bf0:	cmpne	r0, r4
   27bf4:	blt	27cb8 <__assert_fail@plt+0x16318>
   27bf8:	ldrb	r3, [fp, #4]
   27bfc:	cmp	r3, #24
   27c00:	bne	27cb8 <__assert_fail@plt+0x16318>
   27c04:	cmn	r0, #1
   27c08:	bne	27c7c <__assert_fail@plt+0x162dc>
   27c0c:	cmp	r4, #32768	; 0x8000
   27c10:	movlt	r5, #0
   27c14:	movge	r5, #1
   27c18:	cmp	r5, #0
   27c1c:	bne	27c90 <__assert_fail@plt+0x162f0>
   27c20:	mov	r1, sl
   27c24:	mov	r0, fp
   27c28:	ldr	r2, [sp, #20]
   27c2c:	bl	2690c <__assert_fail@plt+0x14f6c>
   27c30:	ldr	r3, [sl, #40]	; 0x28
   27c34:	ldr	ip, [sp, #24]
   27c38:	add	r0, r3, r0
   27c3c:	cmp	ip, #0
   27c40:	str	r0, [sl, #40]	; 0x28
   27c44:	beq	27b98 <__assert_fail@plt+0x161f8>
   27c48:	orrs	r3, r9, r4
   27c4c:	bne	279dc <__assert_fail@plt+0x1603c>
   27c50:	mov	r2, r5
   27c54:	movw	r1, #56040	; 0xdae8
   27c58:	movt	r1, #1
   27c5c:	mov	r0, ip
   27c60:	bl	1ca04 <__assert_fail@plt+0xb064>
   27c64:	ldr	r3, [sp, #204]	; 0xcc
   27c68:	ldr	r3, [r3]
   27c6c:	cmp	r3, #0
   27c70:	beq	27ba8 <__assert_fail@plt+0x16208>
   27c74:	b	27a80 <__assert_fail@plt+0x160e0>
   27c78:	mov	r9, r0
   27c7c:	cmp	r9, #32768	; 0x8000
   27c80:	movlt	r5, #0
   27c84:	movge	r5, #1
   27c88:	cmp	r5, #0
   27c8c:	beq	27c20 <__assert_fail@plt+0x16280>
   27c90:	ldr	r2, [sp, #204]	; 0xcc
   27c94:	mov	r3, #15
   27c98:	str	r3, [r2]
   27c9c:	b	27cc4 <__assert_fail@plt+0x16324>
   27ca0:	ldrb	r3, [fp]
   27ca4:	cmp	r3, #44	; 0x2c
   27ca8:	beq	27bd0 <__assert_fail@plt+0x16230>
   27cac:	ldr	r3, [sp, #20]
   27cb0:	tst	r3, #2097152	; 0x200000
   27cb4:	bne	27b64 <__assert_fail@plt+0x161c4>
   27cb8:	ldr	r2, [sp, #204]	; 0xcc
   27cbc:	mov	r3, #10
   27cc0:	str	r3, [r2]
   27cc4:	ldr	r3, [sp, #24]
   27cc8:	cmp	r3, #0
   27ccc:	beq	279d0 <__assert_fail@plt+0x16030>
   27cd0:	b	27a80 <__assert_fail@plt+0x160e0>
   27cd4:	add	r9, sp, #36	; 0x24
   27cd8:	mov	r2, r0
   27cdc:	ldm	r9, {r9, sl, fp}
   27ce0:	cmp	r4, r9
   27ce4:	bne	27d00 <__assert_fail@plt+0x16360>
   27ce8:	str	r2, [sp, #24]
   27cec:	b	278bc <__assert_fail@plt+0x15f1c>
   27cf0:	ldr	r2, [sp, #24]
   27cf4:	mvn	r9, #0
   27cf8:	mov	r4, #1
   27cfc:	mov	r6, r2
   27d00:	mov	r0, r6
   27d04:	ldr	r1, [sp, #32]
   27d08:	str	r2, [sp, #36]	; 0x24
   27d0c:	bl	1ecf4 <__assert_fail@plt+0xd354>
   27d10:	subs	r6, r0, #0
   27d14:	ldr	r2, [sp, #36]	; 0x24
   27d18:	beq	27a74 <__assert_fail@plt+0x160d4>
   27d1c:	ldrb	r3, [r6, #24]
   27d20:	str	r2, [sp, #36]	; 0x24
   27d24:	cmp	r3, #17
   27d28:	bne	27b14 <__assert_fail@plt+0x16174>
   27d2c:	b	27b00 <__assert_fail@plt+0x16160>
   27d30:	ldr	r4, [fp]
   27d34:	movw	r3, #783	; 0x30f
   27d38:	tst	r4, r3
   27d3c:	beq	27da0 <__assert_fail@plt+0x16400>
   27d40:	ldr	r3, [sp, #32]
   27d44:	ldrb	r3, [r3, #88]	; 0x58
   27d48:	ands	r5, r3, #16
   27d4c:	bne	27da0 <__assert_fail@plt+0x16400>
   27d50:	ldr	r0, [sp, #32]
   27d54:	orr	r3, r3, #16
   27d58:	ands	r2, r3, #8
   27d5c:	mov	r1, r3
   27d60:	strb	r3, [r0, #88]	; 0x58
   27d64:	bne	28a1c <__assert_fail@plt+0x1707c>
   27d68:	mov	r3, #0
   27d6c:	movt	r3, #1023	; 0x3ff
   27d70:	tst	r1, #4
   27d74:	mvn	r1, #2013265921	; 0x78000001
   27d78:	strd	r2, [r0, #96]	; 0x60
   27d7c:	mvn	r3, #-134217727	; 0xf8000001
   27d80:	str	r1, [r0, #104]	; 0x68
   27d84:	str	r3, [r0, #108]	; 0x6c
   27d88:	beq	28968 <__assert_fail@plt+0x16fc8>
   27d8c:	str	r2, [r0, #112]	; 0x70
   27d90:	str	r2, [r0, #116]	; 0x74
   27d94:	str	r2, [r0, #120]	; 0x78
   27d98:	str	r2, [r0, #124]	; 0x7c
   27d9c:	ldr	r4, [fp]
   27da0:	sub	r3, r4, #256	; 0x100
   27da4:	ldr	r2, [sp, #32]
   27da8:	bics	r3, r3, #256	; 0x100
   27dac:	add	r5, r2, #56	; 0x38
   27db0:	add	r6, r2, #64	; 0x40
   27db4:	bne	28378 <__assert_fail@plt+0x169d8>
   27db8:	cmp	r4, #256	; 0x100
   27dbc:	beq	2846c <__assert_fail@plt+0x16acc>
   27dc0:	mov	r0, #5
   27dc4:	mov	r2, r3
   27dc8:	str	fp, [sp]
   27dcc:	mov	r1, r6
   27dd0:	str	r0, [fp]
   27dd4:	mov	r0, r5
   27dd8:	bl	1ec24 <__assert_fail@plt+0xd284>
   27ddc:	mov	r7, r0
   27de0:	mov	r3, #10
   27de4:	str	r3, [fp]
   27de8:	mov	r3, #0
   27dec:	mov	r1, r6
   27df0:	str	fp, [sp]
   27df4:	mov	r2, r3
   27df8:	mov	r0, r5
   27dfc:	bl	1ec24 <__assert_fail@plt+0xd284>
   27e00:	add	r3, sp, #128	; 0x80
   27e04:	mov	r4, r0
   27e08:	mov	ip, #10
   27e0c:	mov	r8, #0
   27e10:	mov	r9, #0
   27e14:	mov	r1, r6
   27e18:	str	r3, [sp]
   27e1c:	mov	r0, r5
   27e20:	mov	r3, r4
   27e24:	mov	r2, r7
   27e28:	clz	r4, r4
   27e2c:	strd	r8, [sp, #128]	; 0x80
   27e30:	lsr	r4, r4, #5
   27e34:	strb	ip, [sp, #132]	; 0x84
   27e38:	bl	1ec24 <__assert_fail@plt+0xd284>
   27e3c:	cmp	r7, #0
   27e40:	str	r0, [sp, #24]
   27e44:	moveq	r4, #1
   27e48:	cmp	r0, #0
   27e4c:	movne	r3, r4
   27e50:	moveq	r3, #1
   27e54:	cmp	r3, #0
   27e58:	bne	28098 <__assert_fail@plt+0x166f8>
   27e5c:	mov	r0, fp
   27e60:	mov	r1, sl
   27e64:	ldr	r2, [sp, #20]
   27e68:	bl	2690c <__assert_fail@plt+0x14f6c>
   27e6c:	ldr	r3, [sl, #40]	; 0x28
   27e70:	add	r3, r3, r0
   27e74:	str	r3, [sl, #40]	; 0x28
   27e78:	b	2790c <__assert_fail@plt+0x15f6c>
   27e7c:	mov	r5, #0
   27e80:	mov	r1, #1
   27e84:	mov	r0, #32
   27e88:	str	r5, [sp, #68]	; 0x44
   27e8c:	bl	1c478 <__assert_fail@plt+0xaad8>
   27e90:	mov	r8, r0
   27e94:	mov	r1, #1
   27e98:	mov	r0, #40	; 0x28
   27e9c:	bl	1c478 <__assert_fail@plt+0xaad8>
   27ea0:	clz	r4, r0
   27ea4:	cmp	r8, r5
   27ea8:	lsr	r4, r4, #5
   27eac:	moveq	r4, #1
   27eb0:	mov	r9, r0
   27eb4:	cmp	r4, r5
   27eb8:	bne	286b0 <__assert_fail@plt+0x16d10>
   27ebc:	mov	r1, sl
   27ec0:	mov	r0, fp
   27ec4:	ldr	r2, [sp, #20]
   27ec8:	bl	1ca98 <__assert_fail@plt+0xb0f8>
   27ecc:	ldrb	r3, [fp, #4]
   27ed0:	mov	r5, r0
   27ed4:	cmp	r3, #2
   27ed8:	beq	28684 <__assert_fail@plt+0x16ce4>
   27edc:	cmp	r3, #25
   27ee0:	strne	r4, [sp, #44]	; 0x2c
   27ee4:	beq	283a0 <__assert_fail@plt+0x16a00>
   27ee8:	ldr	r7, [sp, #20]
   27eec:	cmp	r3, #21
   27ef0:	mov	r0, #1
   27ef4:	moveq	r3, #1
   27ef8:	strbeq	r3, [fp, #4]
   27efc:	mov	r3, #0
   27f00:	ubfx	r2, r7, #16, #1
   27f04:	str	r3, [sp, #24]
   27f08:	str	r3, [sp, #40]	; 0x28
   27f0c:	add	r3, sp, #96	; 0x60
   27f10:	str	r3, [sp, #36]	; 0x24
   27f14:	str	r2, [sp, #48]	; 0x30
   27f18:	mov	ip, #3
   27f1c:	mov	r3, r5
   27f20:	str	r7, [sp]
   27f24:	mov	r2, fp
   27f28:	mov	r1, sl
   27f2c:	str	r0, [sp, #4]
   27f30:	str	ip, [sp, #72]	; 0x48
   27f34:	add	r0, sp, #72	; 0x48
   27f38:	ldr	ip, [sp, #36]	; 0x24
   27f3c:	str	ip, [sp, #76]	; 0x4c
   27f40:	bl	27348 <__assert_fail@plt+0x159a8>
   27f44:	cmp	r0, #0
   27f48:	bne	28458 <__assert_fail@plt+0x16ab8>
   27f4c:	mov	r2, r7
   27f50:	mov	r1, sl
   27f54:	mov	r0, fp
   27f58:	bl	1ca98 <__assert_fail@plt+0xb0f8>
   27f5c:	ldr	r3, [sp, #72]	; 0x48
   27f60:	mov	r5, r0
   27f64:	sub	r2, r3, #2
   27f68:	bics	r2, r2, #2
   27f6c:	beq	27f84 <__assert_fail@plt+0x165e4>
   27f70:	ldrb	r2, [fp, #4]
   27f74:	cmp	r2, #2
   27f78:	beq	283fc <__assert_fail@plt+0x16a5c>
   27f7c:	cmp	r2, #22
   27f80:	beq	28498 <__assert_fail@plt+0x16af8>
   27f84:	cmp	r3, #4
   27f88:	ldrls	pc, [pc, r3, lsl #2]
   27f8c:	b	282d0 <__assert_fail@plt+0x16930>
   27f90:			; <UNDEFINED> instruction: 0x000282b0
   27f94:	andeq	r8, r2, r0, asr r3
   27f98:	andeq	r8, r2, r0, lsr r3
   27f9c:	andeq	r8, r2, r8, ror r2
   27fa0:	ldrdeq	r8, [r2], -r0
   27fa4:	ldr	r3, [sp, #32]
   27fa8:	str	fp, [sp]
   27fac:	add	r6, r3, #56	; 0x38
   27fb0:	add	r5, r3, #64	; 0x40
   27fb4:	mov	r3, #0
   27fb8:	mov	r0, r6
   27fbc:	mov	r2, r3
   27fc0:	mov	r1, r5
   27fc4:	bl	1ec24 <__assert_fail@plt+0xd284>
   27fc8:	subs	r3, r0, #0
   27fcc:	str	r3, [sp, #24]
   27fd0:	beq	28098 <__assert_fail@plt+0x166f8>
   27fd4:	ldr	r3, [sp, #32]
   27fd8:	ldr	r3, [r3, #92]	; 0x5c
   27fdc:	cmp	r3, #1
   27fe0:	ble	276c8 <__assert_fail@plt+0x15d28>
   27fe4:	mov	r9, #0
   27fe8:	mov	r8, #0
   27fec:	ldr	r4, [sp, #24]
   27ff0:	add	r7, sp, #128	; 0x80
   27ff4:	strd	r8, [sp, #24]
   27ff8:	mov	r9, r5
   27ffc:	ldr	r3, [sl, #40]	; 0x28
   28000:	mov	r1, sl
   28004:	mov	r0, fp
   28008:	ldr	ip, [sl, #56]	; 0x38
   2800c:	ldr	r2, [sp, #20]
   28010:	cmp	ip, r3
   28014:	ble	28464 <__assert_fail@plt+0x16ac4>
   28018:	ldr	ip, [sl, #28]
   2801c:	cmp	r3, ip
   28020:	beq	28464 <__assert_fail@plt+0x16ac4>
   28024:	ldr	ip, [sl, #8]
   28028:	ldr	r3, [ip, r3, lsl #2]
   2802c:	cmn	r3, #1
   28030:	bne	28464 <__assert_fail@plt+0x16ac4>
   28034:	bl	2690c <__assert_fail@plt+0x14f6c>
   28038:	ldr	ip, [sl, #40]	; 0x28
   2803c:	mov	r3, #0
   28040:	mov	r1, r9
   28044:	mov	r2, r3
   28048:	str	fp, [sp]
   2804c:	add	ip, ip, r0
   28050:	mov	r0, r6
   28054:	str	ip, [sl, #40]	; 0x28
   28058:	bl	1ec24 <__assert_fail@plt+0xd284>
   2805c:	mov	r5, r0
   28060:	mov	r3, r0
   28064:	ldrd	r0, [sp, #24]
   28068:	mov	ip, #16
   2806c:	mov	r2, r4
   28070:	str	r7, [sp]
   28074:	strd	r0, [r7]
   28078:	mov	r1, r9
   2807c:	mov	r0, r6
   28080:	strb	ip, [sp, #132]	; 0x84
   28084:	bl	1ec24 <__assert_fail@plt+0xd284>
   28088:	cmp	r0, #0
   2808c:	cmpne	r5, #0
   28090:	mov	r4, r0
   28094:	bne	27ffc <__assert_fail@plt+0x1665c>
   28098:	mov	r2, #0
   2809c:	mov	r3, #12
   280a0:	str	r2, [sp, #24]
   280a4:	ldr	r2, [sp, #204]	; 0xcc
   280a8:	str	r3, [r2]
   280ac:	b	2790c <__assert_fail@plt+0x15f6c>
   280b0:	sub	r1, r2, #33	; 0x21
   280b4:	movw	r3, #58824	; 0xe5c8
   280b8:	movt	r3, #2
   280bc:	clz	r1, r1
   280c0:	lsr	r1, r1, #5
   280c4:	movw	r2, #58760	; 0xe588
   280c8:	movt	r2, #2
   280cc:	str	r1, [sp]
   280d0:	ldr	r0, [sp, #32]
   280d4:	ldr	r1, [sp, #204]	; 0xcc
   280d8:	str	r1, [sp, #4]
   280dc:	ldr	r1, [sl, #64]	; 0x40
   280e0:	bl	2284c <__assert_fail@plt+0x10eac>
   280e4:	ldr	r3, [sp, #204]	; 0xcc
   280e8:	str	r0, [sp, #24]
   280ec:	ldr	r2, [r3]
   280f0:	clz	r3, r0
   280f4:	lsr	r3, r3, #5
   280f8:	cmp	r2, #0
   280fc:	moveq	r3, #0
   28100:	cmp	r3, #0
   28104:	beq	276c8 <__assert_fail@plt+0x15d28>
   28108:	b	279d0 <__assert_fail@plt+0x16030>
   2810c:	sub	r1, r2, #35	; 0x23
   28110:	movw	r3, #54428	; 0xd49c
   28114:	movt	r3, #2
   28118:	clz	r1, r1
   2811c:	movw	r2, #58776	; 0xe598
   28120:	movt	r2, #2
   28124:	lsr	r1, r1, #5
   28128:	b	280cc <__assert_fail@plt+0x1672c>
   2812c:	mov	r2, #0
   28130:	mov	r3, #5
   28134:	str	r2, [sp, #24]
   28138:	ldr	r2, [sp, #204]	; 0xcc
   2813c:	str	r3, [r2]
   28140:	b	2790c <__assert_fail@plt+0x15f6c>
   28144:	ldr	r3, [sp, #32]
   28148:	mov	ip, #1
   2814c:	ldr	r2, [fp]
   28150:	ldr	r3, [r3, #84]	; 0x54
   28154:	lsl	ip, ip, r2
   28158:	ands	r3, ip, r3
   2815c:	beq	286d4 <__assert_fail@plt+0x16d34>
   28160:	ldr	r4, [sp, #32]
   28164:	mov	r3, #0
   28168:	mov	r2, r3
   2816c:	ldr	lr, [r4, #80]	; 0x50
   28170:	add	r1, r4, #64	; 0x40
   28174:	add	r0, r4, #56	; 0x38
   28178:	orr	ip, lr, ip
   2817c:	str	ip, [r4, #80]	; 0x50
   28180:	str	fp, [sp]
   28184:	bl	1ec24 <__assert_fail@plt+0xd284>
   28188:	subs	r3, r0, #0
   2818c:	str	r3, [sp, #24]
   28190:	beq	28098 <__assert_fail@plt+0x166f8>
   28194:	ldrb	r3, [r4, #88]	; 0x58
   28198:	ldr	r2, [r4, #76]	; 0x4c
   2819c:	orr	r3, r3, #2
   281a0:	add	r2, r2, #1
   281a4:	str	r2, [r4, #76]	; 0x4c
   281a8:	strb	r3, [r4, #88]	; 0x58
   281ac:	b	276c8 <__assert_fail@plt+0x15d28>
   281b0:	ldr	r4, [sp, #32]
   281b4:	mov	r3, #0
   281b8:	mov	r2, r3
   281bc:	str	fp, [sp]
   281c0:	add	r1, r4, #64	; 0x40
   281c4:	add	r0, r4, #56	; 0x38
   281c8:	bl	1ec24 <__assert_fail@plt+0xd284>
   281cc:	subs	r3, r0, #0
   281d0:	str	r3, [sp, #24]
   281d4:	beq	28098 <__assert_fail@plt+0x166f8>
   281d8:	ldr	r3, [r4, #92]	; 0x5c
   281dc:	cmp	r3, #1
   281e0:	ble	276c8 <__assert_fail@plt+0x15d28>
   281e4:	ldrb	r3, [r4, #88]	; 0x58
   281e8:	orr	r3, r3, #2
   281ec:	strb	r3, [r4, #88]	; 0x58
   281f0:	b	276c8 <__assert_fail@plt+0x15d28>
   281f4:	ldr	r3, [sp, #20]
   281f8:	ands	r3, r3, #131072	; 0x20000
   281fc:	bne	27698 <__assert_fail@plt+0x15cf8>
   28200:	str	r3, [sp, #24]
   28204:	mov	r2, #16
   28208:	ldr	r3, [sp, #204]	; 0xcc
   2820c:	str	r2, [r3]
   28210:	b	2790c <__assert_fail@plt+0x15f6c>
   28214:	cmp	r4, #8
   28218:	bls	28260 <__assert_fail@plt+0x168c0>
   2821c:	ldr	r0, [sp, #32]
   28220:	add	ip, sp, #128	; 0x80
   28224:	mov	lr, #17
   28228:	mov	r6, #0
   2822c:	mov	r7, #0
   28230:	mov	r3, #0
   28234:	str	ip, [sp]
   28238:	strd	r6, [sp, #128]	; 0x80
   2823c:	strb	lr, [sp, #132]	; 0x84
   28240:	add	r1, r0, #64	; 0x40
   28244:	add	r0, r0, #56	; 0x38
   28248:	bl	1ec24 <__assert_fail@plt+0xd284>
   2824c:	subs	r3, r0, #0
   28250:	str	r3, [sp, #24]
   28254:	beq	28098 <__assert_fail@plt+0x166f8>
   28258:	str	r4, [r3, #20]
   2825c:	b	276c8 <__assert_fail@plt+0x15d28>
   28260:	ldr	r0, [sp, #32]
   28264:	mov	r1, #1
   28268:	ldr	r3, [r0, #84]	; 0x54
   2826c:	orr	r3, r3, r1, lsl r4
   28270:	str	r3, [r0, #84]	; 0x54
   28274:	b	2821c <__assert_fail@plt+0x1687c>
   28278:	mov	r0, r8
   2827c:	ldr	r1, [sp, #76]	; 0x4c
   28280:	bl	21fa8 <__assert_fail@plt+0x10608>
   28284:	ldr	r3, [sp, #204]	; 0xcc
   28288:	cmp	r0, #0
   2828c:	str	r0, [r3]
   28290:	bne	28308 <__assert_fail@plt+0x16968>
   28294:	ldrb	r3, [fp, #4]
   28298:	cmp	r3, #2
   2829c:	beq	283fc <__assert_fail@plt+0x16a5c>
   282a0:	cmp	r3, #21
   282a4:	beq	2872c <__assert_fail@plt+0x16d8c>
   282a8:	mov	r0, #0
   282ac:	b	27f18 <__assert_fail@plt+0x16578>
   282b0:	ldrb	r3, [sp, #76]	; 0x4c
   282b4:	mov	r0, #1
   282b8:	asr	r1, r3, #5
   282bc:	and	r3, r3, #31
   282c0:	ldr	r2, [r8, r1, lsl #2]
   282c4:	orr	r3, r2, r0, lsl r3
   282c8:	str	r3, [r8, r1, lsl #2]
   282cc:	b	28294 <__assert_fail@plt+0x168f4>
   282d0:	ldr	ip, [sp, #76]	; 0x4c
   282d4:	add	r0, sp, #68	; 0x44
   282d8:	add	r3, r9, #36	; 0x24
   282dc:	add	r2, r9, #12
   282e0:	mov	r1, r8
   282e4:	str	r0, [sp]
   282e8:	str	r7, [sp, #8]
   282ec:	ldr	r0, [sl, #64]	; 0x40
   282f0:	str	ip, [sp, #4]
   282f4:	bl	22004 <__assert_fail@plt+0x10664>
   282f8:	ldr	r3, [sp, #204]	; 0xcc
   282fc:	cmp	r0, #0
   28300:	str	r0, [r3]
   28304:	beq	28294 <__assert_fail@plt+0x168f4>
   28308:	mov	r0, r8
   2830c:	bl	1c734 <__assert_fail@plt+0xad94>
   28310:	mov	r0, r9
   28314:	bl	1da74 <__assert_fail@plt+0xc0d4>
   28318:	ldr	r3, [sp, #204]	; 0xcc
   2831c:	ldr	r3, [r3]
   28320:	cmp	r3, #0
   28324:	bne	279d0 <__assert_fail@plt+0x16030>
   28328:	str	r3, [sp, #24]
   2832c:	b	276c8 <__assert_fail@plt+0x15d28>
   28330:	mov	r0, r8
   28334:	ldr	r1, [sp, #76]	; 0x4c
   28338:	bl	21fa8 <__assert_fail@plt+0x10608>
   2833c:	ldr	r3, [sp, #204]	; 0xcc
   28340:	cmp	r0, #0
   28344:	str	r0, [r3]
   28348:	beq	28294 <__assert_fail@plt+0x168f4>
   2834c:	b	28308 <__assert_fail@plt+0x16968>
   28350:	ldr	r2, [sp, #24]
   28354:	ldr	r3, [r9, #20]
   28358:	ldr	r0, [r9]
   2835c:	cmp	r3, r2
   28360:	beq	28704 <__assert_fail@plt+0x16d64>
   28364:	ldr	r2, [sp, #76]	; 0x4c
   28368:	add	r1, r3, #1
   2836c:	str	r1, [r9, #20]
   28370:	str	r2, [r0, r3, lsl #2]
   28374:	b	28294 <__assert_fail@plt+0x168f4>
   28378:	mov	r3, #0
   2837c:	mov	r1, r6
   28380:	str	fp, [sp]
   28384:	mov	r2, r3
   28388:	mov	r0, r5
   2838c:	bl	1ec24 <__assert_fail@plt+0xd284>
   28390:	subs	r3, r0, #0
   28394:	str	r3, [sp, #24]
   28398:	bne	27e5c <__assert_fail@plt+0x164bc>
   2839c:	b	28098 <__assert_fail@plt+0x166f8>
   283a0:	ldrb	r3, [r9, #16]
   283a4:	ldr	r2, [sp, #20]
   283a8:	orr	r3, r3, #1
   283ac:	tst	r2, #256	; 0x100
   283b0:	strb	r3, [r9, #16]
   283b4:	beq	283c4 <__assert_fail@plt+0x16a24>
   283b8:	ldr	r3, [r8]
   283bc:	orr	r3, r3, #1024	; 0x400
   283c0:	str	r3, [r8]
   283c4:	ldr	r3, [sl, #40]	; 0x28
   283c8:	mov	r1, sl
   283cc:	mov	r0, fp
   283d0:	ldr	r2, [sp, #20]
   283d4:	add	r3, r3, r5
   283d8:	str	r3, [sl, #40]	; 0x28
   283dc:	bl	1ca98 <__assert_fail@plt+0xb0f8>
   283e0:	ldrb	r3, [fp, #4]
   283e4:	mov	r5, r0
   283e8:	cmp	r3, #2
   283ec:	beq	28684 <__assert_fail@plt+0x16ce4>
   283f0:	mov	r2, #1
   283f4:	str	r2, [sp, #44]	; 0x2c
   283f8:	b	27ee8 <__assert_fail@plt+0x16548>
   283fc:	ldr	r2, [sp, #204]	; 0xcc
   28400:	mov	r3, #7
   28404:	str	r3, [r2]
   28408:	b	28308 <__assert_fail@plt+0x16968>
   2840c:	mov	r2, r3
   28410:	mov	r1, sl
   28414:	mov	r0, fp
   28418:	mov	r4, r3
   2841c:	bl	2690c <__assert_fail@plt+0x14f6c>
   28420:	ldr	lr, [sp, #200]	; 0xc8
   28424:	mov	r3, r4
   28428:	mov	r2, fp
   2842c:	mov	r1, r5
   28430:	ldr	ip, [sl, #40]	; 0x28
   28434:	str	lr, [sp]
   28438:	ldr	lr, [sp, #204]	; 0xcc
   2843c:	add	ip, ip, r0
   28440:	mov	r0, sl
   28444:	str	lr, [sp, #4]
   28448:	str	ip, [sl, #40]	; 0x28
   2844c:	bl	2759c <__assert_fail@plt+0x15bfc>
   28450:	str	r0, [sp, #24]
   28454:	b	2790c <__assert_fail@plt+0x15f6c>
   28458:	ldr	r3, [sp, #204]	; 0xcc
   2845c:	str	r0, [r3]
   28460:	b	28308 <__assert_fail@plt+0x16968>
   28464:	str	r4, [sp, #24]
   28468:	b	276c8 <__assert_fail@plt+0x15d28>
   2846c:	mov	r0, #6
   28470:	mov	r2, r3
   28474:	str	fp, [sp]
   28478:	mov	r1, r6
   2847c:	str	r0, [fp]
   28480:	mov	r0, r5
   28484:	bl	1ec24 <__assert_fail@plt+0xd284>
   28488:	mov	r3, #9
   2848c:	mov	r7, r0
   28490:	str	r3, [fp]
   28494:	b	27de8 <__assert_fail@plt+0x16448>
   28498:	ldr	r3, [sl, #40]	; 0x28
   2849c:	mov	r2, r7
   284a0:	add	r0, sp, #88	; 0x58
   284a4:	mov	r1, sl
   284a8:	add	r3, r3, r5
   284ac:	str	r3, [sl, #40]	; 0x28
   284b0:	bl	1ca98 <__assert_fail@plt+0xb0f8>
   284b4:	ldrb	r2, [sp, #92]	; 0x5c
   284b8:	mov	r3, r0
   284bc:	cmp	r2, #2
   284c0:	beq	283fc <__assert_fail@plt+0x16a5c>
   284c4:	cmp	r2, #21
   284c8:	beq	286e8 <__assert_fail@plt+0x16d48>
   284cc:	mov	r1, #1
   284d0:	mov	r0, #3
   284d4:	str	r7, [sp]
   284d8:	add	ip, sp, #128	; 0x80
   284dc:	add	r2, sp, #88	; 0x58
   284e0:	str	r1, [sp, #4]
   284e4:	mov	r1, sl
   284e8:	str	r0, [sp, #80]	; 0x50
   284ec:	add	r0, sp, #80	; 0x50
   284f0:	str	ip, [sp, #84]	; 0x54
   284f4:	bl	27348 <__assert_fail@plt+0x159a8>
   284f8:	cmp	r0, #0
   284fc:	bne	28458 <__assert_fail@plt+0x16ab8>
   28500:	mov	r2, r7
   28504:	mov	r1, sl
   28508:	mov	r0, fp
   2850c:	bl	1ca98 <__assert_fail@plt+0xb0f8>
   28510:	ldr	r2, [sp, #72]	; 0x48
   28514:	mov	r5, r0
   28518:	sub	r3, r2, #2
   2851c:	bics	r3, r3, #2
   28520:	beq	28958 <__assert_fail@plt+0x16fb8>
   28524:	ldr	r3, [sp, #80]	; 0x50
   28528:	sub	r1, r3, #2
   2852c:	bics	r1, r1, #2
   28530:	beq	28958 <__assert_fail@plt+0x16fb8>
   28534:	cmp	r2, #3
   28538:	moveq	r1, #1
   2853c:	movne	r1, #0
   28540:	str	r1, [sp, #52]	; 0x34
   28544:	beq	28a54 <__assert_fail@plt+0x170b4>
   28548:	cmp	r3, #3
   2854c:	beq	28a24 <__assert_fail@plt+0x17084>
   28550:	cmp	r2, #0
   28554:	bne	28940 <__assert_fail@plt+0x16fa0>
   28558:	ldrb	r4, [sp, #76]	; 0x4c
   2855c:	cmp	r3, #0
   28560:	beq	28950 <__assert_fail@plt+0x16fb0>
   28564:	cmp	r3, #3
   28568:	bne	28938 <__assert_fail@plt+0x16f98>
   2856c:	ldr	r1, [sp, #84]	; 0x54
   28570:	ldrb	r6, [r1]
   28574:	cmp	r2, #0
   28578:	ldr	r1, [sp, #52]	; 0x34
   2857c:	moveq	r1, #1
   28580:	cmp	r1, #0
   28584:	beq	28930 <__assert_fail@plt+0x16f90>
   28588:	ldr	r2, [sp, #32]
   2858c:	ldr	r2, [r2, #92]	; 0x5c
   28590:	cmp	r2, #1
   28594:	ble	2891c <__assert_fail@plt+0x16f7c>
   28598:	mov	r0, r4
   2859c:	bl	1182c <btowc@plt>
   285a0:	ldr	r3, [sp, #80]	; 0x50
   285a4:	mov	r4, r0
   285a8:	cmp	r3, #3
   285ac:	cmpne	r3, #0
   285b0:	bne	28928 <__assert_fail@plt+0x16f88>
   285b4:	ldr	r3, [sp, #32]
   285b8:	ldr	r3, [r3, #92]	; 0x5c
   285bc:	cmp	r3, #1
   285c0:	ble	285d0 <__assert_fail@plt+0x16c30>
   285c4:	mov	r0, r6
   285c8:	bl	1182c <btowc@plt>
   285cc:	mov	r6, r0
   285d0:	cmn	r4, #1
   285d4:	cmnne	r6, #1
   285d8:	beq	28a0c <__assert_fail@plt+0x1706c>
   285dc:	ldr	r3, [sp, #48]	; 0x30
   285e0:	cmp	r4, r6
   285e4:	movls	r3, #0
   285e8:	andhi	r3, r3, #1
   285ec:	cmp	r3, #0
   285f0:	bne	28958 <__assert_fail@plt+0x16fb8>
   285f4:	ldr	r3, [sp, #32]
   285f8:	ldr	r3, [r3, #92]	; 0x5c
   285fc:	cmp	r3, #1
   28600:	ble	28630 <__assert_fail@plt+0x16c90>
   28604:	ldr	r1, [sp, #40]	; 0x28
   28608:	ldr	r3, [r9, #32]
   2860c:	ldr	r2, [r9, #4]
   28610:	cmp	r3, r1
   28614:	beq	28a94 <__assert_fail@plt+0x170f4>
   28618:	str	r4, [r2, r3, lsl #2]
   2861c:	ldr	r2, [r9, #8]
   28620:	ldr	r3, [r9, #32]
   28624:	add	r1, r3, #1
   28628:	str	r1, [r9, #32]
   2862c:	str	r6, [r2, r3, lsl #2]
   28630:	mov	r3, #0
   28634:	mov	ip, #1
   28638:	cmp	r4, r3
   2863c:	asr	r2, r3, #5
   28640:	and	r0, r3, #31
   28644:	movhi	r1, #0
   28648:	movls	r1, #1
   2864c:	cmp	r6, r3
   28650:	add	r3, r3, #1
   28654:	movcc	r1, #0
   28658:	cmp	r1, #0
   2865c:	beq	2866c <__assert_fail@plt+0x16ccc>
   28660:	ldr	r1, [r8, r2, lsl #2]
   28664:	orr	r1, r1, ip, lsl r0
   28668:	str	r1, [r8, r2, lsl #2]
   2866c:	cmp	r3, #256	; 0x100
   28670:	bne	28638 <__assert_fail@plt+0x16c98>
   28674:	ldr	r2, [sp, #204]	; 0xcc
   28678:	mov	r3, #0
   2867c:	str	r3, [r2]
   28680:	b	28294 <__assert_fail@plt+0x168f4>
   28684:	ldr	r2, [sp, #204]	; 0xcc
   28688:	mov	r3, #2
   2868c:	str	r3, [r2]
   28690:	b	28308 <__assert_fail@plt+0x16968>
   28694:	ldrb	r3, [fp, #4]
   28698:	cmp	r3, #2
   2869c:	bne	27cb8 <__assert_fail@plt+0x16318>
   286a0:	ldr	r2, [sp, #204]	; 0xcc
   286a4:	mov	r3, #9
   286a8:	str	r3, [r2]
   286ac:	b	27cc4 <__assert_fail@plt+0x16324>
   286b0:	mov	r0, r8
   286b4:	str	r5, [sp, #24]
   286b8:	bl	1c734 <__assert_fail@plt+0xad94>
   286bc:	mov	r0, r9
   286c0:	bl	1c734 <__assert_fail@plt+0xad94>
   286c4:	ldr	r2, [sp, #204]	; 0xcc
   286c8:	mov	r3, #12
   286cc:	str	r3, [r2]
   286d0:	b	2790c <__assert_fail@plt+0x15f6c>
   286d4:	str	r3, [sp, #24]
   286d8:	mov	r2, #6
   286dc:	ldr	r3, [sp, #204]	; 0xcc
   286e0:	str	r2, [r3]
   286e4:	b	2790c <__assert_fail@plt+0x15f6c>
   286e8:	ldr	r2, [sl, #40]	; 0x28
   286ec:	mov	r1, #1
   286f0:	ldr	r3, [sp, #72]	; 0x48
   286f4:	sub	r2, r2, r5
   286f8:	str	r2, [sl, #40]	; 0x28
   286fc:	strb	r1, [fp, #4]
   28700:	b	27f84 <__assert_fail@plt+0x165e4>
   28704:	lsl	r3, r2, #1
   28708:	add	r3, r3, #1
   2870c:	lsl	r1, r3, #2
   28710:	str	r3, [sp, #24]
   28714:	bl	1c910 <__assert_fail@plt+0xaf70>
   28718:	cmp	r0, #0
   2871c:	beq	2882c <__assert_fail@plt+0x16e8c>
   28720:	str	r0, [r9]
   28724:	ldr	r3, [r9, #20]
   28728:	b	28364 <__assert_fail@plt+0x169c4>
   2872c:	ldr	r3, [sl, #40]	; 0x28
   28730:	ldr	r2, [sp, #44]	; 0x2c
   28734:	add	r3, r3, r5
   28738:	cmp	r2, #0
   2873c:	str	r3, [sl, #40]	; 0x28
   28740:	beq	28760 <__assert_fail@plt+0x16dc0>
   28744:	sub	r3, r8, #4
   28748:	add	r1, r8, #28
   2874c:	ldr	r2, [r3, #4]!
   28750:	mvn	r2, r2
   28754:	cmp	r1, r3
   28758:	str	r2, [r3]
   2875c:	bne	2874c <__assert_fail@plt+0x16dac>
   28760:	ldr	r3, [sp, #32]
   28764:	ldr	r0, [r3, #92]	; 0x5c
   28768:	cmp	r0, #1
   2876c:	ble	2879c <__assert_fail@plt+0x16dfc>
   28770:	ldr	r3, [sp, #32]
   28774:	sub	r2, r8, #4
   28778:	add	ip, r8, #28
   2877c:	ldr	r3, [r3, #60]	; 0x3c
   28780:	sub	r3, r3, #4
   28784:	ldr	r1, [r2, #4]!
   28788:	ldr	lr, [r3, #4]!
   2878c:	cmp	ip, r2
   28790:	and	r1, r1, lr
   28794:	str	r1, [r2]
   28798:	bne	28784 <__assert_fail@plt+0x16de4>
   2879c:	ldr	r3, [r9, #20]
   287a0:	cmp	r3, #0
   287a4:	bne	2883c <__assert_fail@plt+0x16e9c>
   287a8:	ldr	r3, [r9, #24]
   287ac:	cmp	r3, #0
   287b0:	bne	2883c <__assert_fail@plt+0x16e9c>
   287b4:	ldr	r3, [r9, #28]
   287b8:	cmp	r3, #0
   287bc:	bne	2883c <__assert_fail@plt+0x16e9c>
   287c0:	ldr	r3, [r9, #32]
   287c4:	cmp	r3, #0
   287c8:	bne	2883c <__assert_fail@plt+0x16e9c>
   287cc:	cmp	r0, #1
   287d0:	ble	287ec <__assert_fail@plt+0x16e4c>
   287d4:	ldr	r3, [r9, #36]	; 0x24
   287d8:	cmp	r3, #0
   287dc:	bne	2883c <__assert_fail@plt+0x16e9c>
   287e0:	ldrb	r3, [r9, #16]
   287e4:	tst	r3, #1
   287e8:	bne	2883c <__assert_fail@plt+0x16e9c>
   287ec:	mov	r0, r9
   287f0:	bl	1da74 <__assert_fail@plt+0xc0d4>
   287f4:	ldr	r0, [sp, #32]
   287f8:	mov	r3, #0
   287fc:	mov	ip, #3
   28800:	str	r8, [sp, #96]	; 0x60
   28804:	ldr	r2, [sp, #36]	; 0x24
   28808:	add	r1, r0, #64	; 0x40
   2880c:	add	r0, r0, #56	; 0x38
   28810:	str	r2, [sp]
   28814:	mov	r2, r3
   28818:	strb	ip, [sp, #100]	; 0x64
   2881c:	bl	1ec24 <__assert_fail@plt+0xd284>
   28820:	subs	r3, r0, #0
   28824:	str	r3, [sp, #24]
   28828:	bne	276c8 <__assert_fail@plt+0x15d28>
   2882c:	ldr	r2, [sp, #204]	; 0xcc
   28830:	mov	r3, #12
   28834:	str	r3, [r2]
   28838:	b	28308 <__assert_fail@plt+0x16968>
   2883c:	ldr	r4, [sp, #32]
   28840:	mov	r3, #0
   28844:	mov	lr, #6
   28848:	mov	r2, r3
   2884c:	ldrb	ip, [r4, #88]	; 0x58
   28850:	add	r7, r4, #56	; 0x38
   28854:	add	r6, r4, #64	; 0x40
   28858:	mov	r0, r7
   2885c:	mov	r1, r6
   28860:	orr	ip, ip, #2
   28864:	strb	ip, [r4, #88]	; 0x58
   28868:	ldr	ip, [sp, #36]	; 0x24
   2886c:	str	ip, [sp]
   28870:	str	r9, [sp, #96]	; 0x60
   28874:	strb	lr, [sp, #100]	; 0x64
   28878:	bl	1ec24 <__assert_fail@plt+0xd284>
   2887c:	subs	r3, r0, #0
   28880:	str	r3, [sp, #24]
   28884:	beq	2882c <__assert_fail@plt+0x16e8c>
   28888:	sub	r3, r8, #4
   2888c:	add	r2, r8, #28
   28890:	ldr	r1, [r3, #4]!
   28894:	cmp	r1, #0
   28898:	bne	288b0 <__assert_fail@plt+0x16f10>
   2889c:	cmp	r2, r3
   288a0:	bne	28890 <__assert_fail@plt+0x16ef0>
   288a4:	mov	r0, r8
   288a8:	bl	1c734 <__assert_fail@plt+0xad94>
   288ac:	b	276c8 <__assert_fail@plt+0x15d28>
   288b0:	ldr	r2, [sp, #36]	; 0x24
   288b4:	mov	ip, #3
   288b8:	mov	r3, #0
   288bc:	mov	r1, r6
   288c0:	mov	r0, r7
   288c4:	str	r2, [sp]
   288c8:	mov	r2, r3
   288cc:	str	r8, [sp, #96]	; 0x60
   288d0:	strb	ip, [sp, #100]	; 0x64
   288d4:	bl	1ec24 <__assert_fail@plt+0xd284>
   288d8:	subs	r2, r0, #0
   288dc:	beq	2882c <__assert_fail@plt+0x16e8c>
   288e0:	add	ip, sp, #128	; 0x80
   288e4:	mov	r4, #0
   288e8:	ldr	r3, [sp, #24]
   288ec:	mov	r5, #0
   288f0:	mov	r1, r6
   288f4:	str	ip, [sp]
   288f8:	mov	ip, #10
   288fc:	mov	r0, r7
   28900:	strd	r4, [sp, #128]	; 0x80
   28904:	strb	ip, [sp, #132]	; 0x84
   28908:	bl	1ec24 <__assert_fail@plt+0xd284>
   2890c:	subs	r3, r0, #0
   28910:	str	r3, [sp, #24]
   28914:	bne	276c8 <__assert_fail@plt+0x15d28>
   28918:	b	2882c <__assert_fail@plt+0x16e8c>
   2891c:	cmp	r3, #0
   28920:	cmpne	r3, #3
   28924:	beq	285dc <__assert_fail@plt+0x16c3c>
   28928:	ldr	r6, [sp, #84]	; 0x54
   2892c:	b	285d0 <__assert_fail@plt+0x16c30>
   28930:	ldr	r4, [sp, #76]	; 0x4c
   28934:	b	285a8 <__assert_fail@plt+0x16c08>
   28938:	mov	r6, #0
   2893c:	b	28574 <__assert_fail@plt+0x16bd4>
   28940:	cmp	r3, #0
   28944:	movne	r4, #0
   28948:	bne	28938 <__assert_fail@plt+0x16f98>
   2894c:	mov	r4, r3
   28950:	ldrb	r6, [sp, #84]	; 0x54
   28954:	b	28574 <__assert_fail@plt+0x16bd4>
   28958:	ldr	r2, [sp, #204]	; 0xcc
   2895c:	mov	r3, #11
   28960:	str	r3, [r2]
   28964:	b	28308 <__assert_fail@plt+0x16968>
   28968:	mov	r5, #128	; 0x80
   2896c:	mov	r7, #4
   28970:	bl	11778 <__ctype_b_loc@plt>
   28974:	ldr	r2, [r0]
   28978:	add	ip, r7, #24
   2897c:	sub	r3, r5, #-2147483647	; 0x80000001
   28980:	mov	lr, #1
   28984:	ldr	r1, [sp, #32]
   28988:	add	r6, r2, r3, lsl lr
   2898c:	add	ip, r1, ip, lsl #2
   28990:	add	r7, r1, #128	; 0x80
   28994:	mov	r0, r6
   28998:	mov	r1, #0
   2899c:	ldrh	r2, [r0, #2]!
   289a0:	add	r3, r5, r1
   289a4:	ubfx	r2, r2, #3, #1
   289a8:	cmp	r3, #95	; 0x5f
   289ac:	movne	r3, r2
   289b0:	orreq	r3, r2, #1
   289b4:	cmp	r3, #0
   289b8:	beq	289c8 <__assert_fail@plt+0x17028>
   289bc:	ldr	r3, [ip]
   289c0:	orr	r3, r3, lr, lsl r1
   289c4:	str	r3, [ip]
   289c8:	add	r1, r1, #1
   289cc:	cmp	r1, #32
   289d0:	bne	2899c <__assert_fail@plt+0x16ffc>
   289d4:	add	ip, ip, #4
   289d8:	add	r5, r5, #32
   289dc:	cmp	r7, ip
   289e0:	add	r6, r6, #64	; 0x40
   289e4:	bne	28994 <__assert_fail@plt+0x16ff4>
   289e8:	b	27da0 <__assert_fail@plt+0x16400>
   289ec:	ldr	r0, [sp, #84]	; 0x54
   289f0:	str	r3, [sp, #56]	; 0x38
   289f4:	str	r2, [sp, #60]	; 0x3c
   289f8:	bl	117a8 <strlen@plt>
   289fc:	cmp	r0, #1
   28a00:	ldr	r3, [sp, #56]	; 0x38
   28a04:	ldr	r2, [sp, #60]	; 0x3c
   28a08:	bls	28a7c <__assert_fail@plt+0x170dc>
   28a0c:	ldr	r2, [sp, #204]	; 0xcc
   28a10:	mov	r3, #3
   28a14:	str	r3, [r2]
   28a18:	b	28308 <__assert_fail@plt+0x16968>
   28a1c:	mov	r7, r5
   28a20:	b	28970 <__assert_fail@plt+0x16fd0>
   28a24:	ldr	r0, [sp, #84]	; 0x54
   28a28:	str	r3, [sp, #56]	; 0x38
   28a2c:	str	r2, [sp, #60]	; 0x3c
   28a30:	bl	117a8 <strlen@plt>
   28a34:	cmp	r0, #1
   28a38:	bhi	28a0c <__assert_fail@plt+0x1706c>
   28a3c:	ldr	r3, [sp, #56]	; 0x38
   28a40:	ldr	r2, [sp, #60]	; 0x3c
   28a44:	cmp	r2, #0
   28a48:	movne	r4, #0
   28a4c:	bne	2856c <__assert_fail@plt+0x16bcc>
   28a50:	b	28558 <__assert_fail@plt+0x16bb8>
   28a54:	ldr	r0, [sp, #76]	; 0x4c
   28a58:	str	r3, [sp, #56]	; 0x38
   28a5c:	str	r2, [sp, #60]	; 0x3c
   28a60:	bl	117a8 <strlen@plt>
   28a64:	cmp	r0, #1
   28a68:	ldr	r3, [sp, #56]	; 0x38
   28a6c:	ldr	r2, [sp, #60]	; 0x3c
   28a70:	bhi	28a0c <__assert_fail@plt+0x1706c>
   28a74:	cmp	r3, #3
   28a78:	beq	289ec <__assert_fail@plt+0x1704c>
   28a7c:	ldr	r1, [sp, #76]	; 0x4c
   28a80:	ldrb	r4, [r1]
   28a84:	b	2855c <__assert_fail@plt+0x16bbc>
   28a88:	ldr	r6, [sp, #24]
   28a8c:	mov	r2, r6
   28a90:	b	27ce0 <__assert_fail@plt+0x16340>
   28a94:	lsl	r3, r1, #1
   28a98:	mov	r0, r2
   28a9c:	add	r3, r3, #1
   28aa0:	str	r3, [sp, #40]	; 0x28
   28aa4:	lsl	r3, r3, #2
   28aa8:	mov	r1, r3
   28aac:	str	r3, [sp, #56]	; 0x38
   28ab0:	bl	1c910 <__assert_fail@plt+0xaf70>
   28ab4:	ldr	r3, [sp, #56]	; 0x38
   28ab8:	mov	r2, r0
   28abc:	ldr	r0, [r9, #8]
   28ac0:	str	r2, [sp, #52]	; 0x34
   28ac4:	mov	r1, r3
   28ac8:	bl	1c910 <__assert_fail@plt+0xaf70>
   28acc:	ldr	r2, [sp, #52]	; 0x34
   28ad0:	cmp	r0, #0
   28ad4:	cmpne	r2, #0
   28ad8:	beq	28af8 <__assert_fail@plt+0x17158>
   28adc:	str	r2, [r9, #4]
   28ae0:	str	r0, [r9, #8]
   28ae4:	ldr	r3, [r9, #32]
   28ae8:	b	28618 <__assert_fail@plt+0x16c78>
   28aec:	mov	r2, r5
   28af0:	ldr	r6, [sp, #24]
   28af4:	b	27d1c <__assert_fail@plt+0x1637c>
   28af8:	mov	r7, r0
   28afc:	mov	r0, r2
   28b00:	bl	1c734 <__assert_fail@plt+0xad94>
   28b04:	mov	r0, r7
   28b08:	bl	1c734 <__assert_fail@plt+0xad94>
   28b0c:	ldr	r2, [sp, #204]	; 0xcc
   28b10:	mov	r3, #12
   28b14:	str	r3, [r2]
   28b18:	b	28308 <__assert_fail@plt+0x16968>
   28b1c:	mov	r3, #0
   28b20:	mov	r9, #1
   28b24:	ldr	r6, [sp, #24]
   28b28:	str	r3, [sp, #36]	; 0x24
   28b2c:	b	27b00 <__assert_fail@plt+0x16160>
   28b30:	strd	r4, [sp, #-36]!	; 0xffffffdc
   28b34:	ldr	ip, [r1]
   28b38:	strd	r6, [sp, #8]
   28b3c:	mov	r7, r2
   28b40:	strd	r8, [sp, #16]
   28b44:	mov	r8, r1
   28b48:	mov	r9, r0
   28b4c:	strd	sl, [sp, #24]
   28b50:	mov	sl, r3
   28b54:	str	lr, [sp, #32]
   28b58:	sub	sp, sp, #36	; 0x24
   28b5c:	ldr	r6, [sp, #72]	; 0x48
   28b60:	ldr	r5, [sp, #76]	; 0x4c
   28b64:	str	r6, [sp]
   28b68:	str	ip, [sp, #20]
   28b6c:	str	r5, [sp, #4]
   28b70:	bl	2759c <__assert_fail@plt+0x15bfc>
   28b74:	ldr	r2, [r5]
   28b78:	clz	r3, r0
   28b7c:	lsr	r3, r3, #5
   28b80:	cmp	r2, #0
   28b84:	moveq	r3, #0
   28b88:	cmp	r3, #0
   28b8c:	bne	28cd8 <__assert_fail@plt+0x17338>
   28b90:	mov	r4, r0
   28b94:	str	r9, [sp, #12]
   28b98:	str	r8, [sp, #16]
   28b9c:	ldrb	lr, [r7, #4]
   28ba0:	clz	ip, r6
   28ba4:	mov	r3, sl
   28ba8:	mov	r2, r7
   28bac:	lsr	ip, ip, #5
   28bb0:	ldrd	r0, [sp, #12]
   28bb4:	and	fp, lr, #247	; 0xf7
   28bb8:	cmp	fp, #2
   28bbc:	beq	28c9c <__assert_fail@plt+0x172fc>
   28bc0:	cmp	lr, #9
   28bc4:	orrne	ip, ip, #1
   28bc8:	cmp	ip, #0
   28bcc:	beq	28c9c <__assert_fail@plt+0x172fc>
   28bd0:	str	r6, [sp]
   28bd4:	str	r5, [sp, #4]
   28bd8:	bl	2759c <__assert_fail@plt+0x15bfc>
   28bdc:	ldr	r2, [r5]
   28be0:	clz	r3, r0
   28be4:	mov	fp, r0
   28be8:	lsr	r3, r3, #5
   28bec:	cmp	r2, #0
   28bf0:	moveq	r3, #0
   28bf4:	cmp	r3, #0
   28bf8:	bne	28cbc <__assert_fail@plt+0x1731c>
   28bfc:	cmp	r4, #0
   28c00:	cmpne	r0, #0
   28c04:	bne	28c14 <__assert_fail@plt+0x17274>
   28c08:	cmp	r4, #0
   28c0c:	moveq	r4, r0
   28c10:	b	28b9c <__assert_fail@plt+0x171fc>
   28c14:	mov	r3, r0
   28c18:	ldr	r0, [sp, #20]
   28c1c:	add	r1, sp, #24
   28c20:	mov	ip, #16
   28c24:	mov	r8, #0
   28c28:	mov	r9, #0
   28c2c:	mov	r2, r4
   28c30:	str	r1, [sp]
   28c34:	strd	r8, [sp, #24]
   28c38:	add	r1, r0, #64	; 0x40
   28c3c:	add	r0, r0, #56	; 0x38
   28c40:	strb	ip, [sp, #28]
   28c44:	bl	1ec24 <__assert_fail@plt+0xd284>
   28c48:	cmp	r0, #0
   28c4c:	beq	28c58 <__assert_fail@plt+0x172b8>
   28c50:	mov	r4, r0
   28c54:	b	28b9c <__assert_fail@plt+0x171fc>
   28c58:	mov	r3, r0
   28c5c:	movw	r1, #56040	; 0xdae8
   28c60:	movt	r1, #1
   28c64:	mov	r2, r3
   28c68:	mov	r0, fp
   28c6c:	str	r3, [sp, #12]
   28c70:	bl	1ca04 <__assert_fail@plt+0xb064>
   28c74:	ldr	r3, [sp, #12]
   28c78:	mov	r0, r4
   28c7c:	movw	r1, #56040	; 0xdae8
   28c80:	movt	r1, #1
   28c84:	mov	r2, r3
   28c88:	bl	1ca04 <__assert_fail@plt+0xb064>
   28c8c:	ldr	r3, [sp, #12]
   28c90:	mov	r2, #12
   28c94:	str	r2, [r5]
   28c98:	mov	r4, r3
   28c9c:	mov	r0, r4
   28ca0:	add	sp, sp, #36	; 0x24
   28ca4:	ldrd	r4, [sp]
   28ca8:	ldrd	r6, [sp, #8]
   28cac:	ldrd	r8, [sp, #16]
   28cb0:	ldrd	sl, [sp, #24]
   28cb4:	add	sp, sp, #32
   28cb8:	pop	{pc}		; (ldr pc, [sp], #4)
   28cbc:	cmp	r4, #0
   28cc0:	beq	28cd8 <__assert_fail@plt+0x17338>
   28cc4:	movw	r1, #56040	; 0xdae8
   28cc8:	movt	r1, #1
   28ccc:	mov	r0, r4
   28cd0:	mov	r2, #0
   28cd4:	bl	1ca04 <__assert_fail@plt+0xb064>
   28cd8:	mov	r4, #0
   28cdc:	b	28c9c <__assert_fail@plt+0x172fc>
   28ce0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   28ce4:	mov	r5, r2
   28ce8:	ldr	r4, [r1]
   28cec:	ldr	ip, [r4, #84]	; 0x54
   28cf0:	strd	r6, [sp, #8]
   28cf4:	mov	r6, r0
   28cf8:	strd	r8, [sp, #16]
   28cfc:	strd	sl, [sp, #24]
   28d00:	mov	fp, r3
   28d04:	mov	sl, r1
   28d08:	str	lr, [sp, #32]
   28d0c:	sub	sp, sp, #36	; 0x24
   28d10:	ldrd	r8, [sp, #72]	; 0x48
   28d14:	strd	r8, [sp]
   28d18:	str	r3, [sp, #12]
   28d1c:	str	ip, [sp, #20]
   28d20:	bl	28b30 <__assert_fail@plt+0x17190>
   28d24:	ldr	r2, [r9]
   28d28:	clz	r3, r0
   28d2c:	lsr	r3, r3, #5
   28d30:	cmp	r2, #0
   28d34:	moveq	r3, #0
   28d38:	cmp	r3, #0
   28d3c:	bne	28e54 <__assert_fail@plt+0x174b4>
   28d40:	orr	r3, fp, #8388608	; 0x800000
   28d44:	mov	r7, r0
   28d48:	str	r3, [sp, #8]
   28d4c:	str	sl, [sp, #16]
   28d50:	b	28dd8 <__assert_fail@plt+0x17438>
   28d54:	cmp	fp, #9
   28d58:	orrne	ip, ip, #1
   28d5c:	cmp	ip, #0
   28d60:	beq	28e30 <__assert_fail@plt+0x17490>
   28d64:	ldr	ip, [sp, #20]
   28d68:	ldr	fp, [r4, #84]	; 0x54
   28d6c:	str	ip, [r4, #84]	; 0x54
   28d70:	strd	r8, [sp]
   28d74:	bl	28b30 <__assert_fail@plt+0x17190>
   28d78:	ldr	r1, [r9]
   28d7c:	clz	r2, r0
   28d80:	mov	r3, r0
   28d84:	lsr	r2, r2, #5
   28d88:	cmp	r1, #0
   28d8c:	moveq	r2, #0
   28d90:	cmp	r2, #0
   28d94:	bne	28e38 <__assert_fail@plt+0x17498>
   28d98:	ldr	r2, [r4, #84]	; 0x54
   28d9c:	orr	fp, r2, fp
   28da0:	str	fp, [r4, #84]	; 0x54
   28da4:	add	r1, sp, #24
   28da8:	mov	ip, #10
   28dac:	mov	sl, #0
   28db0:	mov	fp, #0
   28db4:	mov	r2, r7
   28db8:	add	r0, r4, #56	; 0x38
   28dbc:	str	r1, [sp]
   28dc0:	add	r1, r4, #64	; 0x40
   28dc4:	strd	sl, [sp, #24]
   28dc8:	strb	ip, [sp, #28]
   28dcc:	bl	1ec24 <__assert_fail@plt+0xd284>
   28dd0:	subs	r7, r0, #0
   28dd4:	beq	28e78 <__assert_fail@plt+0x174d8>
   28dd8:	ldrb	r3, [r5, #4]
   28ddc:	mov	r1, r6
   28de0:	mov	r0, r5
   28de4:	ldr	r2, [sp, #8]
   28de8:	cmp	r3, #10
   28dec:	bne	28e58 <__assert_fail@plt+0x174b8>
   28df0:	bl	2690c <__assert_fail@plt+0x14f6c>
   28df4:	ldr	lr, [r6, #40]	; 0x28
   28df8:	clz	ip, r8
   28dfc:	mov	r2, r5
   28e00:	lsr	ip, ip, #5
   28e04:	ldrb	fp, [r5, #4]
   28e08:	ldr	r3, [sp, #12]
   28e0c:	add	lr, lr, r0
   28e10:	mov	r0, r6
   28e14:	ldr	r1, [sp, #16]
   28e18:	str	lr, [r6, #40]	; 0x28
   28e1c:	and	lr, fp, #247	; 0xf7
   28e20:	cmp	lr, #2
   28e24:	bne	28d54 <__assert_fail@plt+0x173b4>
   28e28:	mov	r3, #0
   28e2c:	b	28da4 <__assert_fail@plt+0x17404>
   28e30:	mov	r3, ip
   28e34:	b	28da4 <__assert_fail@plt+0x17404>
   28e38:	cmp	r7, #0
   28e3c:	beq	28e54 <__assert_fail@plt+0x174b4>
   28e40:	movw	r1, #56040	; 0xdae8
   28e44:	movt	r1, #1
   28e48:	mov	r0, r7
   28e4c:	mov	r2, #0
   28e50:	bl	1ca04 <__assert_fail@plt+0xb064>
   28e54:	mov	r7, #0
   28e58:	mov	r0, r7
   28e5c:	add	sp, sp, #36	; 0x24
   28e60:	ldrd	r4, [sp]
   28e64:	ldrd	r6, [sp, #8]
   28e68:	ldrd	r8, [sp, #16]
   28e6c:	ldrd	sl, [sp, #24]
   28e70:	add	sp, sp, #32
   28e74:	pop	{pc}		; (ldr pc, [sp], #4)
   28e78:	mov	r3, #12
   28e7c:	str	r3, [r9]
   28e80:	b	28e58 <__assert_fail@plt+0x174b8>
   28e84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   28e88:	mov	r5, r0
   28e8c:	ldr	r4, [r0]
   28e90:	strd	r6, [sp, #8]
   28e94:	mov	r7, r3
   28e98:	mov	r6, r2
   28e9c:	ldrb	r3, [r0, #28]
   28ea0:	mov	r0, #0
   28ea4:	strd	r8, [sp, #16]
   28ea8:	mov	r8, r1
   28eac:	ldr	r2, [r5, #4]
   28eb0:	strd	sl, [sp, #24]
   28eb4:	str	lr, [sp, #32]
   28eb8:	sub	sp, sp, #140	; 0x8c
   28ebc:	bic	r3, r3, #111	; 0x6f
   28ec0:	str	r0, [r5, #8]
   28ec4:	str	r7, [r5, #12]
   28ec8:	cmp	r2, #159	; 0x9f
   28ecc:	str	r0, [r5, #24]
   28ed0:	strb	r3, [r5, #28]
   28ed4:	str	r0, [sp, #28]
   28ed8:	bls	29a5c <__assert_fail@plt+0x180bc>
   28edc:	mov	r3, #160	; 0xa0
   28ee0:	mov	r1, #0
   28ee4:	mov	r2, r3
   28ee8:	mov	r0, r4
   28eec:	str	r3, [r5, #8]
   28ef0:	bl	11814 <memset@plt>
   28ef4:	movw	r3, #43689	; 0xaaa9
   28ef8:	movt	r3, #2730	; 0xaaa
   28efc:	mov	r2, #31
   28f00:	cmp	r6, r3
   28f04:	str	r2, [r4, #64]	; 0x40
   28f08:	bhi	2950c <__assert_fail@plt+0x17b6c>
   28f0c:	add	r9, r6, #1
   28f10:	lsl	r0, r9, #3
   28f14:	str	r9, [r4, #4]
   28f18:	bl	1c864 <__assert_fail@plt+0xaec4>
   28f1c:	cmp	r6, #0
   28f20:	str	r0, [r4]
   28f24:	beq	29a80 <__assert_fail@plt+0x180e0>
   28f28:	mov	r1, #1
   28f2c:	lsl	r1, r1, #1
   28f30:	cmp	r6, r1
   28f34:	bcs	28f2c <__assert_fail@plt+0x1758c>
   28f38:	sub	sl, r1, #1
   28f3c:	mov	r0, #12
   28f40:	bl	1c478 <__assert_fail@plt+0xaad8>
   28f44:	str	r0, [r4, #32]
   28f48:	str	sl, [r4, #68]	; 0x44
   28f4c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   28f50:	str	r0, [r4, #92]	; 0x5c
   28f54:	mov	r0, #14
   28f58:	bl	118b0 <nl_langinfo@plt>
   28f5c:	ldrb	r3, [r0]
   28f60:	and	r3, r3, #223	; 0xdf
   28f64:	cmp	r3, #85	; 0x55
   28f68:	bne	28fc0 <__assert_fail@plt+0x17620>
   28f6c:	ldrb	r3, [r0, #1]
   28f70:	and	r3, r3, #223	; 0xdf
   28f74:	cmp	r3, #84	; 0x54
   28f78:	bne	28fc0 <__assert_fail@plt+0x17620>
   28f7c:	ldrb	r3, [r0, #2]
   28f80:	and	r3, r3, #223	; 0xdf
   28f84:	cmp	r3, #70	; 0x46
   28f88:	bne	28fc0 <__assert_fail@plt+0x17620>
   28f8c:	ldrb	r3, [r0, #3]
   28f90:	movw	r1, #58828	; 0xe5cc
   28f94:	movt	r1, #2
   28f98:	cmp	r3, #45	; 0x2d
   28f9c:	moveq	r3, #4
   28fa0:	movne	r3, #3
   28fa4:	add	r0, r0, r3
   28fa8:	bl	11544 <strcmp@plt>
   28fac:	cmp	r0, #0
   28fb0:	bne	28fc0 <__assert_fail@plt+0x17620>
   28fb4:	ldrb	r3, [r4, #88]	; 0x58
   28fb8:	orr	r3, r3, #4
   28fbc:	strb	r3, [r4, #88]	; 0x58
   28fc0:	ldrb	r3, [r4, #88]	; 0x58
   28fc4:	ldr	r2, [r4, #92]	; 0x5c
   28fc8:	bfc	r3, #3, #1
   28fcc:	cmp	r2, #1
   28fd0:	strb	r3, [r4, #88]	; 0x58
   28fd4:	ble	28ff0 <__assert_fail@plt+0x17650>
   28fd8:	uxtb	sl, r3
   28fdc:	ands	sl, sl, #4
   28fe0:	beq	29570 <__assert_fail@plt+0x17bd0>
   28fe4:	movw	r3, #58252	; 0xe38c
   28fe8:	movt	r3, #2
   28fec:	str	r3, [r4, #60]	; 0x3c
   28ff0:	ldr	r3, [r4]
   28ff4:	cmp	r3, #0
   28ff8:	beq	2950c <__assert_fail@plt+0x17b6c>
   28ffc:	ldr	r3, [r4, #32]
   29000:	cmp	r3, #0
   29004:	beq	2950c <__assert_fail@plt+0x17b6c>
   29008:	mov	r1, #0
   2900c:	movw	r2, #0
   29010:	movt	r2, #0
   29014:	mov	r3, #1
   29018:	cmp	r2, r1
   2901c:	str	r1, [sp, #28]
   29020:	mov	r1, #1
   29024:	moveq	r3, r2
   29028:	movw	r2, #0
   2902c:	movt	r2, #0
   29030:	cmp	r2, #0
   29034:	moveq	r1, r2
   29038:	orr	r3, r3, r1
   2903c:	ands	r3, r3, #255	; 0xff
   29040:	str	r3, [sp, #8]
   29044:	beq	29068 <__assert_fail@plt+0x176c8>
   29048:	mov	r1, #0
   2904c:	add	r0, r4, #136	; 0x88
   29050:	bl	115e0 <pthread_mutex_init@plt>
   29054:	cmp	r0, #0
   29058:	bne	2950c <__assert_fail@plt+0x17b6c>
   2905c:	ldr	r3, [sp, #28]
   29060:	cmp	r3, #0
   29064:	bne	29514 <__assert_fail@plt+0x17b74>
   29068:	mov	r2, #76	; 0x4c
   2906c:	mov	r1, #0
   29070:	ldr	sl, [r5, #20]
   29074:	add	r0, sp, #56	; 0x38
   29078:	and	fp, r7, #4194304	; 0x400000
   2907c:	bl	11814 <memset@plt>
   29080:	ldrb	r3, [r4, #88]	; 0x58
   29084:	adds	lr, fp, #0
   29088:	movne	lr, #1
   2908c:	str	r8, [sp, #52]	; 0x34
   29090:	ldr	r0, [r4, #92]	; 0x5c
   29094:	orr	r2, sl, fp
   29098:	adds	r1, r2, #0
   2909c:	str	r6, [sp, #96]	; 0x60
   290a0:	movne	r1, #1
   290a4:	cmp	r6, #0
   290a8:	str	r6, [sp, #100]	; 0x64
   290ac:	ubfx	ip, r3, #2, #1
   290b0:	str	r6, [sp, #104]	; 0x68
   290b4:	ubfx	r3, r3, #3, #1
   290b8:	str	r6, [sp, #108]	; 0x6c
   290bc:	str	sl, [sp, #116]	; 0x74
   290c0:	strb	lr, [sp, #124]	; 0x7c
   290c4:	strb	ip, [sp, #125]	; 0x7d
   290c8:	strb	r3, [sp, #126]	; 0x7e
   290cc:	strb	r1, [sp, #127]	; 0x7f
   290d0:	str	r0, [sp, #132]	; 0x84
   290d4:	bne	29548 <__assert_fail@plt+0x17ba8>
   290d8:	cmp	r1, #0
   290dc:	ldrne	r8, [sp, #56]	; 0x38
   290e0:	cmp	fp, #0
   290e4:	str	r8, [sp, #56]	; 0x38
   290e8:	beq	291a0 <__assert_fail@plt+0x17800>
   290ec:	cmp	r0, #1
   290f0:	ble	29a48 <__assert_fail@plt+0x180a8>
   290f4:	add	r0, sp, #52	; 0x34
   290f8:	bl	1d2ec <__assert_fail@plt+0xb94c>
   290fc:	cmp	r0, #0
   29100:	bne	2913c <__assert_fail@plt+0x1779c>
   29104:	ldr	r3, [sp, #84]	; 0x54
   29108:	cmp	r6, r3
   2910c:	ble	29ad4 <__assert_fail@plt+0x18134>
   29110:	ldr	r3, [sp, #80]	; 0x50
   29114:	ldr	r2, [r4, #92]	; 0x5c
   29118:	ldr	r1, [sp, #88]	; 0x58
   2911c:	add	r3, r3, r2
   29120:	cmp	r1, r3
   29124:	bgt	29ad4 <__assert_fail@plt+0x18134>
   29128:	lsl	r1, r1, #1
   2912c:	add	r0, sp, #52	; 0x34
   29130:	bl	1cefc <__assert_fail@plt+0xb55c>
   29134:	cmp	r0, #0
   29138:	beq	290f4 <__assert_fail@plt+0x17754>
   2913c:	ldr	r6, [r5]
   29140:	str	r0, [sp, #28]
   29144:	ldr	r0, [r6, #56]	; 0x38
   29148:	cmp	r0, #0
   2914c:	beq	29160 <__assert_fail@plt+0x177c0>
   29150:	ldr	r7, [r0]
   29154:	bl	1c734 <__assert_fail@plt+0xad94>
   29158:	subs	r0, r7, #0
   2915c:	bne	29150 <__assert_fail@plt+0x177b0>
   29160:	mov	r7, #0
   29164:	mov	r3, #31
   29168:	ldr	r0, [r6, #16]
   2916c:	str	r7, [r6, #52]	; 0x34
   29170:	str	r7, [r6, #56]	; 0x38
   29174:	str	r3, [r6, #64]	; 0x40
   29178:	bl	1c734 <__assert_fail@plt+0xad94>
   2917c:	add	r0, sp, #52	; 0x34
   29180:	str	r7, [r6, #16]
   29184:	bl	1dddc <__assert_fail@plt+0xc43c>
   29188:	ldr	r3, [sp, #8]
   2918c:	cmp	r3, r7
   29190:	beq	29514 <__assert_fail@plt+0x17b74>
   29194:	add	r0, r4, #136	; 0x88
   29198:	bl	1155c <pthread_mutex_destroy@plt>
   2919c:	b	29514 <__assert_fail@plt+0x17b74>
   291a0:	cmp	r0, #1
   291a4:	bgt	29960 <__assert_fail@plt+0x17fc0>
   291a8:	cmp	r2, #0
   291ac:	ldr	r1, [sp, #88]	; 0x58
   291b0:	beq	29620 <__assert_fail@plt+0x17c80>
   291b4:	ldr	r3, [sp, #80]	; 0x50
   291b8:	ldr	r2, [sp, #100]	; 0x64
   291bc:	cmp	r1, r2
   291c0:	movge	r1, r2
   291c4:	cmp	r1, r3
   291c8:	bgt	291d4 <__assert_fail@plt+0x17834>
   291cc:	b	29bc0 <__assert_fail@plt+0x18220>
   291d0:	ldr	r8, [sp, #56]	; 0x38
   291d4:	ldr	r2, [sp, #52]	; 0x34
   291d8:	ldr	ip, [sp, #76]	; 0x4c
   291dc:	ldr	r0, [sp, #116]	; 0x74
   291e0:	add	r2, r2, r3
   291e4:	ldrb	r2, [r2, ip]
   291e8:	ldrb	r2, [r0, r2]
   291ec:	strb	r2, [r8, r3]
   291f0:	add	r3, r3, #1
   291f4:	cmp	r1, r3
   291f8:	bne	291d0 <__assert_fail@plt+0x17830>
   291fc:	mov	r3, #0
   29200:	str	r3, [sp, #28]
   29204:	str	r1, [sp, #80]	; 0x50
   29208:	str	r1, [sp, #84]	; 0x54
   2920c:	ldr	r6, [r5]
   29210:	mov	r8, #0
   29214:	orr	r2, r7, #8388608	; 0x800000
   29218:	add	r1, sp, #52	; 0x34
   2921c:	add	r0, sp, #32
   29220:	str	r8, [r5, #24]
   29224:	str	r7, [r6, #128]	; 0x80
   29228:	bl	2690c <__assert_fail@plt+0x14f6c>
   2922c:	ldr	ip, [sp, #92]	; 0x5c
   29230:	add	r1, sp, #28
   29234:	mov	r3, r7
   29238:	add	r2, sp, #32
   2923c:	str	r8, [sp]
   29240:	str	r1, [sp, #4]
   29244:	mov	r1, r5
   29248:	add	ip, ip, r0
   2924c:	add	r0, sp, #52	; 0x34
   29250:	str	ip, [sp, #92]	; 0x5c
   29254:	bl	28ce0 <__assert_fail@plt+0x17340>
   29258:	ldr	lr, [sp, #28]
   2925c:	mov	r9, r0
   29260:	cmp	lr, r8
   29264:	bne	29a8c <__assert_fail@plt+0x180ec>
   29268:	mov	r2, #0
   2926c:	mov	r3, #0
   29270:	add	r7, sp, #40	; 0x28
   29274:	mov	ip, #2
   29278:	add	sl, r6, #56	; 0x38
   2927c:	add	r6, r6, #64	; 0x40
   29280:	mov	r0, sl
   29284:	mov	r1, r6
   29288:	str	r7, [sp]
   2928c:	strd	r2, [sp, #40]	; 0x28
   29290:	mov	r3, lr
   29294:	mov	r2, lr
   29298:	strb	ip, [sp, #44]	; 0x2c
   2929c:	bl	1ec24 <__assert_fail@plt+0xd284>
   292a0:	cmp	r9, #0
   292a4:	mov	lr, r0
   292a8:	moveq	r9, r0
   292ac:	beq	292e4 <__assert_fail@plt+0x17944>
   292b0:	mov	ip, #16
   292b4:	mov	r2, r9
   292b8:	str	r7, [sp]
   292bc:	mov	r9, #0
   292c0:	mov	r8, #0
   292c4:	mov	r3, lr
   292c8:	mov	r1, r6
   292cc:	mov	r0, sl
   292d0:	strd	r8, [sp, #40]	; 0x28
   292d4:	mov	r9, lr
   292d8:	strb	ip, [sp, #44]	; 0x2c
   292dc:	bl	1ec24 <__assert_fail@plt+0xd284>
   292e0:	mov	lr, r0
   292e4:	clz	r3, lr
   292e8:	cmp	r9, #0
   292ec:	ldr	r6, [r5]
   292f0:	lsr	r3, r3, #5
   292f4:	moveq	r9, #1
   292f8:	movne	r9, r3
   292fc:	cmp	r9, #0
   29300:	movne	r2, #12
   29304:	movne	r3, #0
   29308:	strne	r2, [sp, #28]
   2930c:	strne	r3, [r4, #52]	; 0x34
   29310:	bne	29144 <__assert_fail@plt+0x177a4>
   29314:	ldr	r0, [r6, #4]
   29318:	str	lr, [r4, #52]	; 0x34
   2931c:	lsl	r0, r0, #2
   29320:	bl	1c864 <__assert_fail@plt+0xaec4>
   29324:	ldr	r3, [r6, #4]
   29328:	str	r0, [r6, #12]
   2932c:	lsl	r0, r3, #2
   29330:	bl	1c864 <__assert_fail@plt+0xaec4>
   29334:	ldr	r3, [r6, #4]
   29338:	str	r0, [r6, #16]
   2933c:	add	r3, r3, r3, lsl #1
   29340:	lsl	r0, r3, #2
   29344:	bl	1c864 <__assert_fail@plt+0xaec4>
   29348:	ldr	r3, [r6, #4]
   2934c:	str	r0, [r6, #20]
   29350:	add	r3, r3, r3, lsl #1
   29354:	lsl	r0, r3, #2
   29358:	bl	1c864 <__assert_fail@plt+0xaec4>
   2935c:	ldr	r3, [r6, #12]
   29360:	str	r0, [r6, #24]
   29364:	cmp	r3, #0
   29368:	beq	29950 <__assert_fail@plt+0x17fb0>
   2936c:	ldr	r3, [r6, #16]
   29370:	cmp	r3, #0
   29374:	beq	29950 <__assert_fail@plt+0x17fb0>
   29378:	ldr	r3, [r6, #20]
   2937c:	cmp	r3, #0
   29380:	beq	29950 <__assert_fail@plt+0x17fb0>
   29384:	cmp	r0, #0
   29388:	beq	29950 <__assert_fail@plt+0x17fb0>
   2938c:	ldr	r0, [r5, #24]
   29390:	lsl	r0, r0, #2
   29394:	bl	1c864 <__assert_fail@plt+0xaec4>
   29398:	cmp	r0, #0
   2939c:	str	r0, [r6, #132]	; 0x84
   293a0:	beq	29424 <__assert_fail@plt+0x17a84>
   293a4:	ldr	r2, [r5, #24]
   293a8:	cmp	r2, #0
   293ac:	subne	r0, r0, #4
   293b0:	movne	r3, r9
   293b4:	beq	293c8 <__assert_fail@plt+0x17a28>
   293b8:	str	r3, [r0, #4]!
   293bc:	add	r3, r3, #1
   293c0:	cmp	r3, r2
   293c4:	bne	293b8 <__assert_fail@plt+0x17a18>
   293c8:	movw	r1, #59504	; 0xe870
   293cc:	movt	r1, #1
   293d0:	ldr	r0, [r6, #52]	; 0x34
   293d4:	mov	r2, r6
   293d8:	bl	1ebac <__assert_fail@plt+0xd20c>
   293dc:	ldr	ip, [r5, #24]
   293e0:	cmp	ip, #0
   293e4:	beq	29bc8 <__assert_fail@plt+0x18228>
   293e8:	ldr	r0, [r6, #132]	; 0x84
   293ec:	ldr	r3, [r0]
   293f0:	cmp	r3, #0
   293f4:	bne	29424 <__assert_fail@plt+0x17a84>
   293f8:	mov	r2, r0
   293fc:	b	2940c <__assert_fail@plt+0x17a6c>
   29400:	ldr	r1, [r2, #4]!
   29404:	cmp	r1, r3
   29408:	bne	29424 <__assert_fail@plt+0x17a84>
   2940c:	add	r3, r3, #1
   29410:	cmp	r3, ip
   29414:	bne	29400 <__assert_fail@plt+0x17a60>
   29418:	bl	1c734 <__assert_fail@plt+0xad94>
   2941c:	mov	r3, #0
   29420:	str	r3, [r6, #132]	; 0x84
   29424:	movw	r1, #61512	; 0xf048
   29428:	movt	r1, #1
   2942c:	ldr	r0, [r6, #52]	; 0x34
   29430:	mov	r2, r5
   29434:	bl	1ca04 <__assert_fail@plt+0xb064>
   29438:	cmp	r0, #0
   2943c:	bne	2913c <__assert_fail@plt+0x1779c>
   29440:	movw	r1, #64700	; 0xfcbc
   29444:	movt	r1, #1
   29448:	ldr	r0, [r6, #52]	; 0x34
   2944c:	mov	r2, r6
   29450:	bl	1ca04 <__assert_fail@plt+0xb064>
   29454:	cmp	r0, #0
   29458:	bne	2913c <__assert_fail@plt+0x1779c>
   2945c:	mov	r2, r6
   29460:	movw	r1, #59672	; 0xe918
   29464:	movt	r1, #1
   29468:	ldr	r0, [r6, #52]	; 0x34
   2946c:	bl	1ebac <__assert_fail@plt+0xd20c>
   29470:	mov	r2, r6
   29474:	movw	r1, #57060	; 0xdee4
   29478:	movt	r1, #1
   2947c:	ldr	r0, [r6, #52]	; 0x34
   29480:	bl	1ebac <__assert_fail@plt+0xd20c>
   29484:	subs	r3, r0, #0
   29488:	str	r3, [sp, #12]
   2948c:	bne	29ba4 <__assert_fail@plt+0x18204>
   29490:	ldr	r1, [r6, #24]
   29494:	mov	sl, r3
   29498:	mov	r8, r3
   2949c:	add	r9, r8, r8, lsl #1
   294a0:	lsl	r9, r9, #2
   294a4:	add	r3, r1, r9
   294a8:	ldr	r3, [r3, #4]
   294ac:	cmp	r3, #0
   294b0:	addne	r8, r8, #1
   294b4:	bne	294ec <__assert_fail@plt+0x17b4c>
   294b8:	mov	r3, #1
   294bc:	mov	r2, r8
   294c0:	mov	r1, r6
   294c4:	mov	r0, r7
   294c8:	bl	20104 <__assert_fail@plt+0xe764>
   294cc:	cmp	r0, #0
   294d0:	bne	2913c <__assert_fail@plt+0x1779c>
   294d4:	ldr	r1, [r6, #24]
   294d8:	add	r8, r8, #1
   294dc:	add	r9, r1, r9
   294e0:	ldr	r9, [r9, #4]
   294e4:	cmp	r9, #0
   294e8:	beq	29630 <__assert_fail@plt+0x17c90>
   294ec:	ldr	r3, [r6, #8]
   294f0:	cmp	r8, r3
   294f4:	bne	2949c <__assert_fail@plt+0x17afc>
   294f8:	cmp	sl, #0
   294fc:	beq	29654 <__assert_fail@plt+0x17cb4>
   29500:	mov	sl, #0
   29504:	mov	r8, sl
   29508:	b	2949c <__assert_fail@plt+0x17afc>
   2950c:	mov	r3, #12
   29510:	str	r3, [sp, #28]
   29514:	mov	r0, r4
   29518:	bl	1fd5c <__assert_fail@plt+0xe3bc>
   2951c:	ldr	r0, [sp, #28]
   29520:	mov	r3, #0
   29524:	str	r3, [r5]
   29528:	str	r3, [r5, #4]
   2952c:	add	sp, sp, #140	; 0x8c
   29530:	ldrd	r4, [sp]
   29534:	ldrd	r6, [sp, #8]
   29538:	ldrd	r8, [sp, #16]
   2953c:	ldrd	sl, [sp, #24]
   29540:	add	sp, sp, #32
   29544:	pop	{pc}		; (ldr pc, [sp], #4)
   29548:	mov	r1, r9
   2954c:	add	r0, sp, #52	; 0x34
   29550:	str	r2, [sp, #12]
   29554:	bl	1cefc <__assert_fail@plt+0xb55c>
   29558:	cmp	r0, #0
   2955c:	bne	2913c <__assert_fail@plt+0x1779c>
   29560:	ldrb	r1, [sp, #127]	; 0x7f
   29564:	ldr	r2, [sp, #12]
   29568:	ldr	r0, [r4, #92]	; 0x5c
   2956c:	b	290d8 <__assert_fail@plt+0x17738>
   29570:	mov	r1, #1
   29574:	mov	r0, #32
   29578:	bl	1c478 <__assert_fail@plt+0xaad8>
   2957c:	cmp	r0, #0
   29580:	str	r0, [r4, #60]	; 0x3c
   29584:	beq	2950c <__assert_fail@plt+0x17b6c>
   29588:	str	r5, [sp, #8]
   2958c:	mov	r5, r4
   29590:	lsl	fp, sl, #3
   29594:	mov	r4, #0
   29598:	b	295c0 <__assert_fail@plt+0x17c20>
   2959c:	cmp	r3, #0
   295a0:	bne	295b0 <__assert_fail@plt+0x17c10>
   295a4:	ldrb	r3, [r5, #88]	; 0x58
   295a8:	orr	r3, r3, #8
   295ac:	strb	r3, [r5, #88]	; 0x58
   295b0:	add	r4, r4, #1
   295b4:	add	fp, fp, #1
   295b8:	cmp	r4, #32
   295bc:	beq	29608 <__assert_fail@plt+0x17c68>
   295c0:	mov	r0, fp
   295c4:	bl	1182c <btowc@plt>
   295c8:	cmn	r0, #1
   295cc:	bic	r3, fp, #127	; 0x7f
   295d0:	beq	2959c <__assert_fail@plt+0x17bfc>
   295d4:	ldr	r1, [r5, #60]	; 0x3c
   295d8:	cmp	r3, #0
   295dc:	mov	r2, #1
   295e0:	ldr	r3, [r1, sl]
   295e4:	orr	r3, r3, r2, lsl r4
   295e8:	str	r3, [r1, sl]
   295ec:	bne	295b0 <__assert_fail@plt+0x17c10>
   295f0:	cmp	r0, fp
   295f4:	bne	295a4 <__assert_fail@plt+0x17c04>
   295f8:	add	r4, r4, #1
   295fc:	add	fp, fp, #1
   29600:	cmp	r4, #32
   29604:	bne	295c0 <__assert_fail@plt+0x17c20>
   29608:	add	sl, sl, #4
   2960c:	cmp	sl, #32
   29610:	bne	29590 <__assert_fail@plt+0x17bf0>
   29614:	mov	r4, r5
   29618:	ldr	r5, [sp, #8]
   2961c:	b	28ff0 <__assert_fail@plt+0x17650>
   29620:	str	fp, [sp, #28]
   29624:	str	r1, [sp, #80]	; 0x50
   29628:	str	r1, [sp, #84]	; 0x54
   2962c:	b	2920c <__assert_fail@plt+0x1786c>
   29630:	ldr	r0, [sp, #48]	; 0x30
   29634:	bl	1c734 <__assert_fail@plt+0xad94>
   29638:	ldr	r3, [r6, #8]
   2963c:	cmp	r3, r8
   29640:	moveq	sl, r9
   29644:	moveq	r8, sl
   29648:	movne	sl, #1
   2964c:	ldr	r1, [r6, #24]
   29650:	b	2949c <__assert_fail@plt+0x17afc>
   29654:	ldrb	r3, [r5, #28]
   29658:	tst	r3, #16
   2965c:	bne	29678 <__assert_fail@plt+0x17cd8>
   29660:	ldr	r3, [r5, #24]
   29664:	cmp	r3, #0
   29668:	beq	29678 <__assert_fail@plt+0x17cd8>
   2966c:	ldrb	r3, [r6, #88]	; 0x58
   29670:	tst	r3, #1
   29674:	bne	29684 <__assert_fail@plt+0x17ce4>
   29678:	ldr	r3, [r6, #76]	; 0x4c
   2967c:	cmp	r3, #0
   29680:	beq	2977c <__assert_fail@plt+0x17ddc>
   29684:	add	r8, r8, r8, lsl #1
   29688:	lsl	r0, r8, #2
   2968c:	bl	1c864 <__assert_fail@plt+0xaec4>
   29690:	cmp	r0, #0
   29694:	str	r0, [r6, #28]
   29698:	beq	29950 <__assert_fail@plt+0x17fb0>
   2969c:	ldr	r3, [r6, #8]
   296a0:	cmp	r3, #0
   296a4:	movne	r3, #0
   296a8:	movne	r2, r3
   296ac:	bne	296b8 <__assert_fail@plt+0x17d18>
   296b0:	b	2977c <__assert_fail@plt+0x17ddc>
   296b4:	ldr	r0, [r6, #28]
   296b8:	add	ip, r3, r3, lsl #1
   296bc:	add	r3, r3, #1
   296c0:	add	r1, r0, ip, lsl #2
   296c4:	str	r2, [r0, ip, lsl #2]
   296c8:	str	r2, [r1, #4]
   296cc:	str	r2, [r1, #8]
   296d0:	ldr	r0, [r6, #8]
   296d4:	cmp	r0, r3
   296d8:	bhi	296b4 <__assert_fail@plt+0x17d14>
   296dc:	cmp	r0, #0
   296e0:	beq	2977c <__assert_fail@plt+0x17ddc>
   296e4:	mov	r3, #0
   296e8:	ldr	r1, [r6, #24]
   296ec:	mov	r9, r3
   296f0:	str	r7, [sp, #20]
   296f4:	mov	r7, r6
   296f8:	mov	r6, r3
   296fc:	str	sl, [sp, #16]
   29700:	add	r3, r1, r9
   29704:	ldr	ip, [r3, #4]
   29708:	ldr	r3, [r3, #8]
   2970c:	cmp	ip, #0
   29710:	movgt	r8, #0
   29714:	subgt	sl, r3, #4
   29718:	bgt	29738 <__assert_fail@plt+0x17d98>
   2971c:	b	29764 <__assert_fail@plt+0x17dc4>
   29720:	ldr	r1, [r7, #24]
   29724:	add	r8, r8, #1
   29728:	add	r3, r1, r9
   2972c:	ldr	r3, [r3, #4]
   29730:	cmp	r8, r3
   29734:	bge	29760 <__assert_fail@plt+0x17dc0>
   29738:	ldr	r3, [sl, #4]!
   2973c:	mov	r1, r6
   29740:	ldr	r0, [r7, #28]
   29744:	add	r3, r3, r3, lsl #1
   29748:	add	r0, r0, r3, lsl #2
   2974c:	bl	1cfb4 <__assert_fail@plt+0xb614>
   29750:	cmp	r0, #0
   29754:	bne	29720 <__assert_fail@plt+0x17d80>
   29758:	mov	r0, #12
   2975c:	b	2913c <__assert_fail@plt+0x1779c>
   29760:	ldr	r0, [r7, #8]
   29764:	add	r6, r6, #1
   29768:	add	r9, r9, #12
   2976c:	cmp	r0, r6
   29770:	bhi	29700 <__assert_fail@plt+0x17d60>
   29774:	ldr	sl, [sp, #16]
   29778:	ldr	r7, [sp, #20]
   2977c:	clz	fp, fp
   29780:	mov	r2, #0
   29784:	ldrb	r3, [r4, #88]	; 0x58
   29788:	lsr	fp, fp, #5
   2978c:	str	r2, [sp, #28]
   29790:	ands	fp, fp, r3, lsr #2
   29794:	bne	29970 <__assert_fail@plt+0x17fd0>
   29798:	ldr	r2, [r4, #24]
   2979c:	mov	r0, r7
   297a0:	ldr	r3, [r4, #52]	; 0x34
   297a4:	ldr	r3, [r3, #12]
   297a8:	ldr	r3, [r3, #28]
   297ac:	add	r1, r3, r3, lsl #1
   297b0:	str	r3, [r4, #72]	; 0x48
   297b4:	add	r1, r2, r1, lsl #2
   297b8:	bl	1f0e0 <__assert_fail@plt+0xd740>
   297bc:	cmp	r0, #0
   297c0:	mov	r8, r0
   297c4:	str	r0, [sp, #32]
   297c8:	bne	298e8 <__assert_fail@plt+0x17f48>
   297cc:	ldr	r3, [r4, #76]	; 0x4c
   297d0:	cmp	r3, #0
   297d4:	ble	298a8 <__assert_fail@plt+0x17f08>
   297d8:	ldr	r9, [sp, #44]	; 0x2c
   297dc:	cmp	r9, #0
   297e0:	ble	298a8 <__assert_fail@plt+0x17f08>
   297e4:	mov	r6, r0
   297e8:	b	297f8 <__assert_fail@plt+0x17e58>
   297ec:	add	r6, r6, #1
   297f0:	cmp	r9, r6
   297f4:	ble	298a8 <__assert_fail@plt+0x17f08>
   297f8:	ldr	r2, [sp, #48]	; 0x30
   297fc:	ldr	r0, [r4]
   29800:	ldr	r3, [r2, r6, lsl #2]
   29804:	add	ip, r0, r3, lsl #3
   29808:	ldrb	r1, [ip, #4]
   2980c:	cmp	r1, #4
   29810:	bne	297ec <__assert_fail@plt+0x17e4c>
   29814:	sub	r2, r2, #4
   29818:	mov	r1, #0
   2981c:	b	2982c <__assert_fail@plt+0x17e8c>
   29820:	add	r1, r1, #1
   29824:	cmp	r1, r9
   29828:	beq	297ec <__assert_fail@plt+0x17e4c>
   2982c:	ldr	lr, [r2, #4]!
   29830:	add	sl, r0, lr, lsl #3
   29834:	ldrb	sl, [sl, #4]
   29838:	cmp	sl, #9
   2983c:	bne	29820 <__assert_fail@plt+0x17e80>
   29840:	ldr	sl, [r0, lr, lsl #3]
   29844:	ldr	lr, [ip]
   29848:	cmp	sl, lr
   2984c:	bne	29820 <__assert_fail@plt+0x17e80>
   29850:	ldr	r2, [r4, #20]
   29854:	add	r3, r3, r3, lsl #1
   29858:	add	r1, sp, #48	; 0x30
   2985c:	mov	r0, r9
   29860:	add	r3, r2, r3, lsl #2
   29864:	ldr	r3, [r3, #8]
   29868:	ldr	sl, [r3]
   2986c:	mov	r2, sl
   29870:	bl	1e6a0 <__assert_fail@plt+0xcd00>
   29874:	cmp	r0, #0
   29878:	bne	297ec <__assert_fail@plt+0x17e4c>
   2987c:	ldr	r1, [r4, #24]
   29880:	add	sl, sl, sl, lsl #1
   29884:	mov	r0, r7
   29888:	add	r1, r1, sl, lsl #2
   2988c:	bl	1ff5c <__assert_fail@plt+0xe5bc>
   29890:	cmp	r0, #0
   29894:	bne	29bac <__assert_fail@plt+0x1820c>
   29898:	ldr	r9, [sp, #44]	; 0x2c
   2989c:	mov	r6, #1
   298a0:	cmp	r9, r6
   298a4:	bgt	297f8 <__assert_fail@plt+0x17e58>
   298a8:	mov	r3, #0
   298ac:	mov	r2, r7
   298b0:	mov	r1, r4
   298b4:	add	r0, sp, #32
   298b8:	bl	1f2d4 <__assert_fail@plt+0xd934>
   298bc:	cmp	r0, #0
   298c0:	str	r0, [r4, #36]	; 0x24
   298c4:	beq	29a40 <__assert_fail@plt+0x180a0>
   298c8:	ldrsb	r3, [r0, #52]	; 0x34
   298cc:	cmp	r3, #0
   298d0:	strge	r0, [r4, #40]	; 0x28
   298d4:	strge	r0, [r4, #44]	; 0x2c
   298d8:	strge	r0, [r4, #48]	; 0x30
   298dc:	blt	299dc <__assert_fail@plt+0x1803c>
   298e0:	ldr	r0, [sp, #48]	; 0x30
   298e4:	bl	1c734 <__assert_fail@plt+0xad94>
   298e8:	ldr	r6, [r5]
   298ec:	str	r8, [sp, #28]
   298f0:	ldr	r0, [r6, #56]	; 0x38
   298f4:	cmp	r0, #0
   298f8:	beq	2990c <__assert_fail@plt+0x17f6c>
   298fc:	ldr	r7, [r0]
   29900:	bl	1c734 <__assert_fail@plt+0xad94>
   29904:	subs	r0, r7, #0
   29908:	bne	298fc <__assert_fail@plt+0x17f5c>
   2990c:	mov	r7, #0
   29910:	mov	r3, #31
   29914:	ldr	r0, [r6, #16]
   29918:	str	r7, [r6, #52]	; 0x34
   2991c:	str	r7, [r6, #56]	; 0x38
   29920:	str	r3, [r6, #64]	; 0x40
   29924:	bl	1c734 <__assert_fail@plt+0xad94>
   29928:	add	r0, sp, #52	; 0x34
   2992c:	str	r7, [r6, #16]
   29930:	bl	1dddc <__assert_fail@plt+0xc43c>
   29934:	ldr	r0, [sp, #28]
   29938:	cmp	r0, r7
   2993c:	beq	2952c <__assert_fail@plt+0x17b8c>
   29940:	ldr	r3, [sp, #8]
   29944:	cmp	r3, #0
   29948:	bne	29194 <__assert_fail@plt+0x177f4>
   2994c:	b	29514 <__assert_fail@plt+0x17b74>
   29950:	mov	r3, #12
   29954:	ldr	r6, [r5]
   29958:	str	r3, [sp, #28]
   2995c:	b	29144 <__assert_fail@plt+0x177a4>
   29960:	add	r0, sp, #52	; 0x34
   29964:	bl	1d14c <__assert_fail@plt+0xb7ac>
   29968:	str	fp, [sp, #28]
   2996c:	b	2920c <__assert_fail@plt+0x1786c>
   29970:	ldr	r3, [r5, #20]
   29974:	cmp	r3, #0
   29978:	bne	29798 <__assert_fail@plt+0x17df8>
   2997c:	ldr	r0, [r4, #8]
   29980:	cmp	r0, #0
   29984:	beq	29be4 <__assert_fail@plt+0x18244>
   29988:	ldr	ip, [r4]
   2998c:	mov	r2, r3
   29990:	ldr	lr, [sp, #12]
   29994:	mov	r1, ip
   29998:	ldrb	r3, [r1, #4]
   2999c:	sub	r3, r3, #1
   299a0:	cmp	r3, #11
   299a4:	ldrls	pc, [pc, r3, lsl #2]
   299a8:	b	29c0c <__assert_fail@plt+0x1826c>
   299ac:	andeq	r9, r2, ip, asr #22
   299b0:	andeq	r9, r2, r4, ror #21
   299b4:	andeq	r9, r2, r0, lsl #23
   299b8:	andeq	r9, r2, r4, ror #21
   299bc:	andeq	r9, r2, r0, ror #21
   299c0:	muleq	r2, r8, r7
   299c4:	andeq	r9, r2, ip, lsl #24
   299c8:	andeq	r9, r2, r4, ror #21
   299cc:	andeq	r9, r2, r4, ror #21
   299d0:	andeq	r9, r2, r4, ror #21
   299d4:	andeq	r9, r2, r4, ror #21
   299d8:	andeq	r9, r2, ip, asr fp
   299dc:	mov	r3, #1
   299e0:	mov	r2, r7
   299e4:	mov	r1, r4
   299e8:	add	r0, sp, #32
   299ec:	bl	1f2d4 <__assert_fail@plt+0xd934>
   299f0:	mov	r3, #2
   299f4:	mov	r2, r7
   299f8:	str	r0, [r4, #40]	; 0x28
   299fc:	mov	r1, r4
   29a00:	add	r0, sp, #32
   29a04:	bl	1f2d4 <__assert_fail@plt+0xd934>
   29a08:	mov	r3, #6
   29a0c:	mov	r2, r7
   29a10:	str	r0, [r4, #44]	; 0x2c
   29a14:	mov	r1, r4
   29a18:	add	r0, sp, #32
   29a1c:	bl	1f2d4 <__assert_fail@plt+0xd934>
   29a20:	ldr	r3, [r4, #40]	; 0x28
   29a24:	str	r0, [r4, #48]	; 0x30
   29a28:	cmp	r3, #0
   29a2c:	beq	29a40 <__assert_fail@plt+0x180a0>
   29a30:	ldr	r3, [r4, #44]	; 0x2c
   29a34:	cmp	r0, #0
   29a38:	cmpne	r3, #0
   29a3c:	bne	298e0 <__assert_fail@plt+0x17f40>
   29a40:	ldr	r8, [sp, #32]
   29a44:	b	298e8 <__assert_fail@plt+0x17f48>
   29a48:	add	r0, sp, #52	; 0x34
   29a4c:	bl	1d8ac <__assert_fail@plt+0xbf0c>
   29a50:	mov	r3, #0
   29a54:	str	r3, [sp, #28]
   29a58:	b	2920c <__assert_fail@plt+0x1786c>
   29a5c:	mov	r0, r4
   29a60:	mov	r1, #160	; 0xa0
   29a64:	bl	1c910 <__assert_fail@plt+0xaf70>
   29a68:	subs	r4, r0, #0
   29a6c:	beq	29bd0 <__assert_fail@plt+0x18230>
   29a70:	mov	r3, #160	; 0xa0
   29a74:	str	r4, [r5]
   29a78:	str	r3, [r5, #4]
   29a7c:	b	28edc <__assert_fail@plt+0x1753c>
   29a80:	mov	sl, r6
   29a84:	mov	r1, #1
   29a88:	b	28f3c <__assert_fail@plt+0x1759c>
   29a8c:	cmp	r0, r8
   29a90:	beq	29bd8 <__assert_fail@plt+0x18238>
   29a94:	mov	r2, #0
   29a98:	mov	r3, #0
   29a9c:	add	r7, sp, #40	; 0x28
   29aa0:	mov	ip, #2
   29aa4:	add	sl, r6, #56	; 0x38
   29aa8:	add	r6, r6, #64	; 0x40
   29aac:	mov	r0, sl
   29ab0:	mov	r1, r6
   29ab4:	str	r7, [sp]
   29ab8:	strd	r2, [sp, #40]	; 0x28
   29abc:	mov	r3, r8
   29ac0:	mov	r2, r8
   29ac4:	strb	ip, [sp, #44]	; 0x2c
   29ac8:	bl	1ec24 <__assert_fail@plt+0xd284>
   29acc:	mov	lr, r0
   29ad0:	b	292b0 <__assert_fail@plt+0x17910>
   29ad4:	mov	r3, #0
   29ad8:	str	r3, [sp, #28]
   29adc:	b	2920c <__assert_fail@plt+0x1786c>
   29ae0:	mov	sl, fp
   29ae4:	add	lr, lr, #1
   29ae8:	add	r1, r1, #8
   29aec:	cmp	lr, r0
   29af0:	bne	29998 <__assert_fail@plt+0x17ff8>
   29af4:	orr	r3, r2, sl
   29af8:	ands	r3, r3, #255	; 0xff
   29afc:	moveq	sl, r3
   29b00:	beq	29be4 <__assert_fail@plt+0x18244>
   29b04:	add	r2, ip, lr, lsl #3
   29b08:	mov	r1, #7
   29b0c:	b	29b24 <__assert_fail@plt+0x18184>
   29b10:	cmp	r3, #5
   29b14:	strbeq	r1, [ip, #4]
   29b18:	add	ip, ip, #8
   29b1c:	cmp	r2, ip
   29b20:	beq	29be4 <__assert_fail@plt+0x18244>
   29b24:	ldrb	r3, [ip, #4]
   29b28:	cmp	r3, #1
   29b2c:	bne	29b10 <__assert_fail@plt+0x18170>
   29b30:	ldrsb	r3, [ip]
   29b34:	cmp	r3, #0
   29b38:	bge	29b18 <__assert_fail@plt+0x18178>
   29b3c:	ldrb	r3, [ip, #6]
   29b40:	bfc	r3, #5, #1
   29b44:	strb	r3, [ip, #6]
   29b48:	b	29b18 <__assert_fail@plt+0x18178>
   29b4c:	ldrsb	r3, [r1]
   29b50:	cmp	r3, #0
   29b54:	movlt	r2, fp
   29b58:	b	29ae4 <__assert_fail@plt+0x18144>
   29b5c:	ldr	r3, [r1]
   29b60:	cmp	r3, #32
   29b64:	beq	29ae4 <__assert_fail@plt+0x18144>
   29b68:	bls	29bb4 <__assert_fail@plt+0x18214>
   29b6c:	cmp	r3, #64	; 0x40
   29b70:	beq	29ae4 <__assert_fail@plt+0x18144>
   29b74:	cmp	r3, #128	; 0x80
   29b78:	beq	29ae4 <__assert_fail@plt+0x18144>
   29b7c:	b	29798 <__assert_fail@plt+0x17df8>
   29b80:	ldr	r6, [r1]
   29b84:	add	r3, r6, #12
   29b88:	add	r6, r6, #28
   29b8c:	ldr	r8, [r3, #4]!
   29b90:	cmp	r8, #0
   29b94:	bne	29798 <__assert_fail@plt+0x17df8>
   29b98:	cmp	r6, r3
   29b9c:	bne	29b8c <__assert_fail@plt+0x181ec>
   29ba0:	b	29ae4 <__assert_fail@plt+0x18144>
   29ba4:	ldr	r0, [sp, #12]
   29ba8:	b	2913c <__assert_fail@plt+0x1779c>
   29bac:	mov	r8, r0
   29bb0:	b	298e8 <__assert_fail@plt+0x17f48>
   29bb4:	cmp	r3, #16
   29bb8:	beq	29ae4 <__assert_fail@plt+0x18144>
   29bbc:	b	29798 <__assert_fail@plt+0x17df8>
   29bc0:	mov	r1, r3
   29bc4:	b	291fc <__assert_fail@plt+0x1785c>
   29bc8:	ldr	r0, [r6, #132]	; 0x84
   29bcc:	b	29418 <__assert_fail@plt+0x17a78>
   29bd0:	mov	r0, #12
   29bd4:	b	2952c <__assert_fail@plt+0x17b8c>
   29bd8:	ldr	r6, [r5]
   29bdc:	str	r0, [r4, #52]	; 0x34
   29be0:	b	29144 <__assert_fail@plt+0x177a4>
   29be4:	ldrb	r3, [r4, #88]	; 0x58
   29be8:	mov	r1, #1
   29bec:	ldr	r2, [r4, #76]	; 0x4c
   29bf0:	str	r1, [r4, #92]	; 0x5c
   29bf4:	and	r3, r3, #251	; 0xfb
   29bf8:	cmp	r2, #0
   29bfc:	orrgt	sl, sl, #1
   29c00:	bfi	r3, sl, #1, #1
   29c04:	strb	r3, [r4, #88]	; 0x58
   29c08:	b	29798 <__assert_fail@plt+0x17df8>
   29c0c:	bl	11964 <abort@plt>
   29c10:	movw	r3, #62424	; 0xf3d8
   29c14:	movt	r3, #3
   29c18:	str	r4, [sp, #-8]!
   29c1c:	ldr	r3, [r3]
   29c20:	str	lr, [sp, #4]
   29c24:	mov	lr, r2
   29c28:	mov	r2, r1
   29c2c:	ldrb	ip, [lr, #28]
   29c30:	mov	r1, r0
   29c34:	mov	r0, lr
   29c38:	ubfx	r4, r3, #25, #1
   29c3c:	bfi	ip, r4, #4, #1
   29c40:	mvn	ip, ip, lsl #25
   29c44:	mvn	ip, ip, lsr #25
   29c48:	strb	ip, [lr, #28]
   29c4c:	bl	28e84 <__assert_fail@plt+0x174e4>
   29c50:	subs	r3, r0, #0
   29c54:	beq	29c88 <__assert_fail@plt+0x182e8>
   29c58:	movw	r1, #58252	; 0xe38c
   29c5c:	movt	r1, #2
   29c60:	ldr	r4, [sp]
   29c64:	add	r3, r1, r3, lsl #2
   29c68:	add	r1, r1, #32
   29c6c:	mov	r2, #5
   29c70:	mov	r0, #0
   29c74:	ldr	lr, [sp, #4]
   29c78:	add	sp, sp, #8
   29c7c:	ldr	r3, [r3, #416]	; 0x1a0
   29c80:	add	r1, r1, r3
   29c84:	b	11628 <dcgettext@plt>
   29c88:	ldr	r4, [sp]
   29c8c:	add	sp, sp, #4
   29c90:	pop	{pc}		; (ldr pc, [sp], #4)
   29c94:	movw	r3, #62424	; 0xf3d8
   29c98:	movt	r3, #3
   29c9c:	ldr	r2, [r3]
   29ca0:	str	r0, [r3]
   29ca4:	mov	r0, r2
   29ca8:	bx	lr
   29cac:	strd	r4, [sp, #-16]!
   29cb0:	mov	r2, #256	; 0x100
   29cb4:	mov	r4, r0
   29cb8:	ldr	r5, [r0]
   29cbc:	mov	r1, #0
   29cc0:	str	r6, [sp, #8]
   29cc4:	ldr	r6, [r0, #16]
   29cc8:	str	lr, [sp, #12]
   29ccc:	mov	r0, r6
   29cd0:	bl	11814 <memset@plt>
   29cd4:	ldr	r1, [r5, #36]	; 0x24
   29cd8:	mov	r3, r6
   29cdc:	mov	r0, r4
   29ce0:	add	r2, r1, #12
   29ce4:	add	r1, r1, #8
   29ce8:	bl	22ab8 <__assert_fail@plt+0x11118>
   29cec:	ldr	r3, [r5, #36]	; 0x24
   29cf0:	ldr	r0, [r5, #40]	; 0x28
   29cf4:	cmp	r3, r0
   29cf8:	beq	29d14 <__assert_fail@plt+0x18374>
   29cfc:	add	r2, r0, #12
   29d00:	add	r1, r0, #8
   29d04:	mov	r3, r6
   29d08:	mov	r0, r4
   29d0c:	bl	22ab8 <__assert_fail@plt+0x11118>
   29d10:	ldr	r0, [r5, #36]	; 0x24
   29d14:	ldr	r1, [r5, #44]	; 0x2c
   29d18:	cmp	r1, r0
   29d1c:	beq	29d38 <__assert_fail@plt+0x18398>
   29d20:	add	r2, r1, #12
   29d24:	mov	r0, r4
   29d28:	mov	r3, r6
   29d2c:	add	r1, r1, #8
   29d30:	bl	22ab8 <__assert_fail@plt+0x11118>
   29d34:	ldr	r0, [r5, #36]	; 0x24
   29d38:	ldr	r1, [r5, #48]	; 0x30
   29d3c:	cmp	r1, r0
   29d40:	beq	29d58 <__assert_fail@plt+0x183b8>
   29d44:	add	r2, r1, #12
   29d48:	mov	r3, r6
   29d4c:	add	r1, r1, #8
   29d50:	mov	r0, r4
   29d54:	bl	22ab8 <__assert_fail@plt+0x11118>
   29d58:	ldrb	r3, [r4, #28]
   29d5c:	mov	r0, #0
   29d60:	ldr	r6, [sp, #8]
   29d64:	orr	r3, r3, #8
   29d68:	strb	r3, [r4, #28]
   29d6c:	ldrd	r4, [sp]
   29d70:	add	sp, sp, #12
   29d74:	pop	{pc}		; (ldr pc, [sp], #4)
   29d78:	cmp	r3, r2
   29d7c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   29d80:	strd	r6, [sp, #8]
   29d84:	strd	r8, [sp, #16]
   29d88:	strd	sl, [sp, #24]
   29d8c:	str	lr, [sp, #32]
   29d90:	sub	sp, sp, #52	; 0x34
   29d94:	movle	lr, #0
   29d98:	movgt	lr, #1
   29d9c:	ldr	ip, [sp, #88]	; 0x58
   29da0:	orrs	lr, lr, r3, lsr #31
   29da4:	ldrb	lr, [sp, #100]	; 0x64
   29da8:	ldr	r8, [sp, #96]	; 0x60
   29dac:	add	r7, r3, ip
   29db0:	str	lr, [sp, #36]	; 0x24
   29db4:	ldr	lr, [r0]
   29db8:	str	lr, [sp, #28]
   29dbc:	bne	2a0b0 <__assert_fail@plt+0x18710>
   29dc0:	cmp	r7, r2
   29dc4:	mov	r4, r0
   29dc8:	str	r2, [sp, #32]
   29dcc:	mov	fp, r3
   29dd0:	str	r1, [sp, #40]	; 0x28
   29dd4:	bgt	2a05c <__assert_fail@plt+0x186bc>
   29dd8:	cmp	ip, #0
   29ddc:	cmpge	fp, r7
   29de0:	bgt	2a05c <__assert_fail@plt+0x186bc>
   29de4:	cmp	r7, #0
   29de8:	blt	2a064 <__assert_fail@plt+0x186c4>
   29dec:	cmp	fp, r7
   29df0:	movgt	r2, #0
   29df4:	movle	r2, #1
   29df8:	ands	r3, r2, ip, lsr #31
   29dfc:	bne	2a064 <__assert_fail@plt+0x186c4>
   29e00:	movw	r2, #0
   29e04:	movt	r2, #0
   29e08:	cmp	r2, #0
   29e0c:	mov	r5, #1
   29e10:	moveq	r5, r2
   29e14:	movw	r2, #0
   29e18:	movt	r2, #0
   29e1c:	mov	r0, #1
   29e20:	cmp	r2, #0
   29e24:	moveq	r0, r2
   29e28:	orr	r5, r5, r0
   29e2c:	ands	r5, r5, #255	; 0xff
   29e30:	beq	29e44 <__assert_fail@plt+0x184a4>
   29e34:	ldr	r3, [sp, #28]
   29e38:	mov	r5, #1
   29e3c:	add	r0, r3, #136	; 0x88
   29e40:	bl	115a4 <pthread_mutex_lock@plt>
   29e44:	ldrb	r0, [r4, #28]
   29e48:	cmp	fp, r7
   29e4c:	ubfx	r3, r0, #5, #2
   29e50:	str	r3, [sp, #44]	; 0x2c
   29e54:	bge	29e6c <__assert_fail@plt+0x184cc>
   29e58:	ldr	r2, [r4, #16]
   29e5c:	cmp	r2, #0
   29e60:	beq	29e6c <__assert_fail@plt+0x184cc>
   29e64:	tst	r0, #8
   29e68:	beq	2a008 <__assert_fail@plt+0x18668>
   29e6c:	ubfx	r2, r0, #4, #1
   29e70:	cmp	r8, #0
   29e74:	orreq	r2, r2, #1
   29e78:	ands	r2, r2, #255	; 0xff
   29e7c:	bne	29ff4 <__assert_fail@plt+0x18654>
   29e80:	and	r0, r0, #6
   29e84:	ldr	ip, [r4, #24]
   29e88:	cmp	r0, #4
   29e8c:	beq	2a0c0 <__assert_fail@plt+0x18720>
   29e90:	add	sl, ip, #1
   29e94:	mov	r6, sl
   29e98:	lsl	r0, sl, #3
   29e9c:	bl	1c864 <__assert_fail@plt+0xaec4>
   29ea0:	subs	r9, r0, #0
   29ea4:	beq	2a0b8 <__assert_fail@plt+0x18718>
   29ea8:	mov	r3, fp
   29eac:	mov	r0, r4
   29eb0:	str	sl, [sp, #8]
   29eb4:	ldr	ip, [sp, #92]	; 0x5c
   29eb8:	ldr	r2, [sp, #32]
   29ebc:	ldr	r1, [sp, #40]	; 0x28
   29ec0:	stm	sp, {r7, ip}
   29ec4:	ldr	ip, [sp, #44]	; 0x2c
   29ec8:	str	r9, [sp, #12]
   29ecc:	str	ip, [sp, #16]
   29ed0:	bl	2460c <__assert_fail@plt+0x12c6c>
   29ed4:	cmp	r0, #0
   29ed8:	beq	29f28 <__assert_fail@plt+0x18588>
   29edc:	cmp	r0, #1
   29ee0:	mvneq	r4, #0
   29ee4:	beq	29eec <__assert_fail@plt+0x1854c>
   29ee8:	mvn	r4, #1
   29eec:	mov	r0, r9
   29ef0:	bl	1c734 <__assert_fail@plt+0xad94>
   29ef4:	cmp	r5, #0
   29ef8:	beq	29f08 <__assert_fail@plt+0x18568>
   29efc:	ldr	r3, [sp, #28]
   29f00:	add	r0, r3, #136	; 0x88
   29f04:	bl	114f0 <pthread_mutex_unlock@plt>
   29f08:	mov	r0, r4
   29f0c:	add	sp, sp, #52	; 0x34
   29f10:	ldrd	r4, [sp]
   29f14:	ldrd	r6, [sp, #8]
   29f18:	ldrd	r8, [sp, #16]
   29f1c:	ldrd	sl, [sp, #24]
   29f20:	add	sp, sp, #32
   29f24:	pop	{pc}		; (ldr pc, [sp], #4)
   29f28:	cmp	r8, #0
   29f2c:	beq	29fd8 <__assert_fail@plt+0x18638>
   29f30:	ldrb	r7, [r4, #28]
   29f34:	add	sl, r6, #1
   29f38:	ubfx	r7, r7, #1, #2
   29f3c:	cmp	r7, #0
   29f40:	beq	2a018 <__assert_fail@plt+0x18678>
   29f44:	cmp	r7, #1
   29f48:	movne	r7, #2
   29f4c:	beq	2a0ec <__assert_fail@plt+0x1874c>
   29f50:	cmp	r6, #0
   29f54:	ble	2a138 <__assert_fail@plt+0x18798>
   29f58:	ldrd	r0, [r8, #4]
   29f5c:	add	lr, r9, r6, lsl #3
   29f60:	mov	r3, r9
   29f64:	mov	r2, r6
   29f68:	sub	r0, r0, #4
   29f6c:	sub	r1, r1, #4
   29f70:	ldr	ip, [r3]
   29f74:	add	r3, r3, #8
   29f78:	str	ip, [r0, #4]!
   29f7c:	ldr	ip, [r3, #-4]
   29f80:	cmp	lr, r3
   29f84:	str	ip, [r1, #4]!
   29f88:	bne	29f70 <__assert_fail@plt+0x185d0>
   29f8c:	ldr	r3, [r8]
   29f90:	cmp	r3, r2
   29f94:	bls	29fc0 <__assert_fail@plt+0x18620>
   29f98:	ldr	ip, [r8, #4]
   29f9c:	mvn	r3, #0
   29fa0:	ldr	r0, [r8, #8]
   29fa4:	str	r3, [r0, r2, lsl #2]
   29fa8:	add	r6, r6, #1
   29fac:	str	r3, [ip, r2, lsl #2]
   29fb0:	mov	r2, r6
   29fb4:	ldr	r1, [r8]
   29fb8:	cmp	r1, r6
   29fbc:	bhi	29fa4 <__assert_fail@plt+0x18604>
   29fc0:	ldrb	r3, [r4, #28]
   29fc4:	bfi	r3, r7, #1, #2
   29fc8:	and	r2, r3, #6
   29fcc:	cmp	r2, #0
   29fd0:	strb	r3, [r4, #28]
   29fd4:	beq	29ee8 <__assert_fail@plt+0x18548>
   29fd8:	ldr	r3, [sp, #36]	; 0x24
   29fdc:	ldr	r4, [r9]
   29fe0:	cmp	r3, #0
   29fe4:	beq	29eec <__assert_fail@plt+0x1854c>
   29fe8:	ldr	r3, [r9, #4]
   29fec:	sub	r4, r3, r4
   29ff0:	b	29eec <__assert_fail@plt+0x1854c>
   29ff4:	mov	sl, #1
   29ff8:	mov	r0, #8
   29ffc:	mov	r6, sl
   2a000:	mov	r8, #0
   2a004:	b	29e9c <__assert_fail@plt+0x184fc>
   2a008:	mov	r0, r4
   2a00c:	bl	29cac <__assert_fail@plt+0x1830c>
   2a010:	ldrb	r0, [r4, #28]
   2a014:	b	29e6c <__assert_fail@plt+0x184cc>
   2a018:	lsl	r7, sl, #2
   2a01c:	mov	r0, r7
   2a020:	bl	1c864 <__assert_fail@plt+0xaec4>
   2a024:	cmp	r0, #0
   2a028:	str	r0, [r8, #4]
   2a02c:	beq	2a144 <__assert_fail@plt+0x187a4>
   2a030:	mov	r0, r7
   2a034:	bl	1c864 <__assert_fail@plt+0xaec4>
   2a038:	cmp	r0, #0
   2a03c:	mov	r7, r0
   2a040:	str	r0, [r8, #8]
   2a044:	movne	r7, #1
   2a048:	strne	sl, [r8]
   2a04c:	bne	29f50 <__assert_fail@plt+0x185b0>
   2a050:	ldr	r0, [r8, #4]
   2a054:	bl	1c734 <__assert_fail@plt+0xad94>
   2a058:	b	29fc0 <__assert_fail@plt+0x18620>
   2a05c:	ldr	r7, [sp, #32]
   2a060:	b	29e00 <__assert_fail@plt+0x18460>
   2a064:	movw	r2, #0
   2a068:	movt	r2, #0
   2a06c:	cmp	r2, #0
   2a070:	mov	r5, #1
   2a074:	moveq	r5, r2
   2a078:	movw	r2, #0
   2a07c:	movt	r2, #0
   2a080:	mov	r1, #1
   2a084:	cmp	r2, #0
   2a088:	moveq	r1, r2
   2a08c:	orr	r5, r5, r1
   2a090:	ands	r5, r5, #255	; 0xff
   2a094:	movne	r7, #0
   2a098:	bne	29e34 <__assert_fail@plt+0x18494>
   2a09c:	ldrb	r0, [r4, #28]
   2a0a0:	mov	r7, r5
   2a0a4:	ubfx	r3, r0, #5, #2
   2a0a8:	str	r3, [sp, #44]	; 0x2c
   2a0ac:	b	29e6c <__assert_fail@plt+0x184cc>
   2a0b0:	mvn	r4, #0
   2a0b4:	b	29f08 <__assert_fail@plt+0x18568>
   2a0b8:	mvn	r4, #1
   2a0bc:	b	29ef4 <__assert_fail@plt+0x18554>
   2a0c0:	ldr	sl, [r8]
   2a0c4:	cmp	sl, ip
   2a0c8:	bhi	29e90 <__assert_fail@plt+0x184f0>
   2a0cc:	cmp	sl, #0
   2a0d0:	mov	r6, sl
   2a0d4:	bgt	29e98 <__assert_fail@plt+0x184f8>
   2a0d8:	mov	sl, #1
   2a0dc:	mov	r8, r2
   2a0e0:	mov	r6, sl
   2a0e4:	mov	r0, #8
   2a0e8:	b	29e9c <__assert_fail@plt+0x184fc>
   2a0ec:	ldr	r3, [r8]
   2a0f0:	cmp	r3, sl
   2a0f4:	bcs	29f50 <__assert_fail@plt+0x185b0>
   2a0f8:	lsl	fp, sl, #2
   2a0fc:	ldr	r0, [r8, #4]
   2a100:	mov	r1, fp
   2a104:	bl	1c910 <__assert_fail@plt+0xaf70>
   2a108:	subs	r2, r0, #0
   2a10c:	str	r2, [sp, #32]
   2a110:	beq	2a144 <__assert_fail@plt+0x187a4>
   2a114:	mov	r1, fp
   2a118:	ldr	r0, [r8, #8]
   2a11c:	bl	1c910 <__assert_fail@plt+0xaf70>
   2a120:	subs	fp, r0, #0
   2a124:	ldr	r2, [sp, #32]
   2a128:	beq	2a14c <__assert_fail@plt+0x187ac>
   2a12c:	str	sl, [r8]
   2a130:	stmib	r8, {r2, fp}
   2a134:	b	29f50 <__assert_fail@plt+0x185b0>
   2a138:	mov	r6, #0
   2a13c:	mov	r2, r6
   2a140:	b	29f8c <__assert_fail@plt+0x185ec>
   2a144:	mov	r7, #0
   2a148:	b	29fc0 <__assert_fail@plt+0x18620>
   2a14c:	mov	r0, r2
   2a150:	mov	r7, fp
   2a154:	bl	1c734 <__assert_fail@plt+0xad94>
   2a158:	b	29fc0 <__assert_fail@plt+0x18620>
   2a15c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2a160:	strd	r6, [sp, #8]
   2a164:	mov	r7, r3
   2a168:	strd	r8, [sp, #16]
   2a16c:	strd	sl, [sp, #24]
   2a170:	str	lr, [sp, #32]
   2a174:	sub	sp, sp, #28
   2a178:	ldr	r5, [sp, #64]	; 0x40
   2a17c:	ldr	r6, [sp, #80]	; 0x50
   2a180:	ldrb	fp, [sp, #84]	; 0x54
   2a184:	orr	r3, r5, r2
   2a188:	orrs	r3, r3, r6
   2a18c:	bmi	2a23c <__assert_fail@plt+0x1889c>
   2a190:	adds	r9, r2, r5
   2a194:	mov	r4, r2
   2a198:	bvs	2a23c <__assert_fail@plt+0x1889c>
   2a19c:	cmp	r5, #0
   2a1a0:	mov	sl, r0
   2a1a4:	beq	2a244 <__assert_fail@plt+0x188a4>
   2a1a8:	cmp	r2, #0
   2a1ac:	str	r1, [sp, #20]
   2a1b0:	moveq	r8, r2
   2a1b4:	bne	2a208 <__assert_fail@plt+0x18868>
   2a1b8:	ldr	r3, [sp, #72]	; 0x48
   2a1bc:	mov	r2, r9
   2a1c0:	mov	r1, r7
   2a1c4:	mov	r0, sl
   2a1c8:	str	fp, [sp, #12]
   2a1cc:	ldr	ip, [sp, #76]	; 0x4c
   2a1d0:	stm	sp, {r3, r6, ip}
   2a1d4:	ldr	r3, [sp, #68]	; 0x44
   2a1d8:	bl	29d78 <__assert_fail@plt+0x183d8>
   2a1dc:	mov	r4, r0
   2a1e0:	mov	r0, r8
   2a1e4:	bl	1c734 <__assert_fail@plt+0xad94>
   2a1e8:	mov	r0, r4
   2a1ec:	add	sp, sp, #28
   2a1f0:	ldrd	r4, [sp]
   2a1f4:	ldrd	r6, [sp, #8]
   2a1f8:	ldrd	r8, [sp, #16]
   2a1fc:	ldrd	sl, [sp, #24]
   2a200:	add	sp, sp, #32
   2a204:	pop	{pc}		; (ldr pc, [sp], #4)
   2a208:	mov	r0, r9
   2a20c:	bl	1c864 <__assert_fail@plt+0xaec4>
   2a210:	subs	r8, r0, #0
   2a214:	beq	2a23c <__assert_fail@plt+0x1889c>
   2a218:	mov	r2, r4
   2a21c:	ldr	r1, [sp, #20]
   2a220:	bl	115d4 <memcpy@plt>
   2a224:	mov	r1, r7
   2a228:	mov	r2, r5
   2a22c:	add	r0, r8, r4
   2a230:	mov	r7, r8
   2a234:	bl	115d4 <memcpy@plt>
   2a238:	b	2a1b8 <__assert_fail@plt+0x18818>
   2a23c:	mvn	r4, #1
   2a240:	b	2a1e8 <__assert_fail@plt+0x18848>
   2a244:	mov	r7, r1
   2a248:	mov	r8, r5
   2a24c:	b	2a1b8 <__assert_fail@plt+0x18818>
   2a250:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2a254:	mov	r4, r0
   2a258:	mov	r0, #0
   2a25c:	tst	r2, #1
   2a260:	movw	r5, #45820	; 0xb2fc
   2a264:	movt	r5, #3
   2a268:	movw	r3, #710	; 0x2c6
   2a26c:	movt	r3, #257	; 0x101
   2a270:	strd	r6, [sp, #8]
   2a274:	mov	r6, r2
   2a278:	str	r8, [sp, #16]
   2a27c:	mov	r7, r1
   2a280:	movne	r8, r5
   2a284:	str	lr, [sp, #20]
   2a288:	moveq	r8, r3
   2a28c:	str	r0, [r4]
   2a290:	str	r0, [r4, #4]
   2a294:	str	r0, [r4, #8]
   2a298:	mov	r0, #256	; 0x100
   2a29c:	bl	1c864 <__assert_fail@plt+0xaec4>
   2a2a0:	cmp	r0, #0
   2a2a4:	str	r0, [r4, #16]
   2a2a8:	beq	2a354 <__assert_fail@plt+0x189b4>
   2a2ac:	lsl	r5, r6, #21
   2a2b0:	ands	r2, r6, #4
   2a2b4:	and	r5, r5, #4194304	; 0x400000
   2a2b8:	orr	r5, r5, r8
   2a2bc:	bne	2a32c <__assert_fail@plt+0x1898c>
   2a2c0:	ldrb	r3, [r4, #28]
   2a2c4:	ubfx	r6, r6, #3, #1
   2a2c8:	mov	r1, #0
   2a2cc:	mov	r0, r7
   2a2d0:	str	r1, [r4, #20]
   2a2d4:	bfi	r3, r2, #7, #1
   2a2d8:	bfi	r3, r6, #4, #1
   2a2dc:	strb	r3, [r4, #28]
   2a2e0:	bl	117a8 <strlen@plt>
   2a2e4:	mov	r2, r0
   2a2e8:	mov	r3, r5
   2a2ec:	mov	r1, r7
   2a2f0:	mov	r0, r4
   2a2f4:	bl	28e84 <__assert_fail@plt+0x174e4>
   2a2f8:	cmp	r0, #16
   2a2fc:	mov	r5, r0
   2a300:	beq	2a33c <__assert_fail@plt+0x1899c>
   2a304:	cmp	r0, #0
   2a308:	bne	2a340 <__assert_fail@plt+0x189a0>
   2a30c:	mov	r0, r4
   2a310:	bl	29cac <__assert_fail@plt+0x1830c>
   2a314:	mov	r0, r5
   2a318:	ldrd	r4, [sp]
   2a31c:	ldrd	r6, [sp, #8]
   2a320:	ldr	r8, [sp, #16]
   2a324:	add	sp, sp, #20
   2a328:	pop	{pc}		; (ldr pc, [sp], #4)
   2a32c:	bic	r5, r5, #64	; 0x40
   2a330:	mov	r2, #1
   2a334:	orr	r5, r5, #256	; 0x100
   2a338:	b	2a2c0 <__assert_fail@plt+0x18920>
   2a33c:	mov	r5, #8
   2a340:	ldr	r0, [r4, #16]
   2a344:	bl	1c734 <__assert_fail@plt+0xad94>
   2a348:	mov	r3, #0
   2a34c:	str	r3, [r4, #16]
   2a350:	b	2a314 <__assert_fail@plt+0x18974>
   2a354:	mov	r5, #12
   2a358:	b	2a314 <__assert_fail@plt+0x18974>
   2a35c:	cmp	r0, #16
   2a360:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2a364:	strd	r6, [sp, #8]
   2a368:	str	r8, [sp, #16]
   2a36c:	str	lr, [sp, #20]
   2a370:	bhi	2a3ec <__assert_fail@plt+0x18a4c>
   2a374:	movw	r1, #58252	; 0xe38c
   2a378:	movt	r1, #2
   2a37c:	add	ip, r1, r0, lsl #2
   2a380:	mov	r4, r3
   2a384:	add	r1, r1, #32
   2a388:	mov	r6, r2
   2a38c:	mov	r0, #0
   2a390:	ldr	r3, [ip, #416]	; 0x1a0
   2a394:	mov	r2, #5
   2a398:	add	r1, r1, r3
   2a39c:	bl	11628 <dcgettext@plt>
   2a3a0:	mov	r7, r0
   2a3a4:	bl	117a8 <strlen@plt>
   2a3a8:	cmp	r4, #0
   2a3ac:	add	r5, r0, #1
   2a3b0:	beq	2a3d4 <__assert_fail@plt+0x18a34>
   2a3b4:	cmp	r5, r4
   2a3b8:	mov	r1, r7
   2a3bc:	subhi	r2, r4, #1
   2a3c0:	movhi	r3, #0
   2a3c4:	movls	r2, r5
   2a3c8:	mov	r0, r6
   2a3cc:	strbhi	r3, [r6, r2]
   2a3d0:	bl	115d4 <memcpy@plt>
   2a3d4:	mov	r0, r5
   2a3d8:	ldrd	r4, [sp]
   2a3dc:	ldrd	r6, [sp, #8]
   2a3e0:	ldr	r8, [sp, #16]
   2a3e4:	add	sp, sp, #20
   2a3e8:	pop	{pc}		; (ldr pc, [sp], #4)
   2a3ec:	bl	11964 <abort@plt>
   2a3f0:	strd	r4, [sp, #-16]!
   2a3f4:	mov	r4, r0
   2a3f8:	ldr	r5, [r0]
   2a3fc:	str	r6, [sp, #8]
   2a400:	str	lr, [sp, #12]
   2a404:	cmp	r5, #0
   2a408:	beq	2a450 <__assert_fail@plt+0x18ab0>
   2a40c:	movw	r2, #0
   2a410:	movt	r2, #0
   2a414:	cmp	r2, #0
   2a418:	mov	r3, #1
   2a41c:	moveq	r3, r2
   2a420:	movw	r2, #0
   2a424:	movt	r2, #0
   2a428:	mov	r1, #1
   2a42c:	cmp	r2, #0
   2a430:	moveq	r1, r2
   2a434:	orr	r3, r3, r1
   2a438:	tst	r3, #1
   2a43c:	beq	2a448 <__assert_fail@plt+0x18aa8>
   2a440:	add	r0, r5, #136	; 0x88
   2a444:	bl	1155c <pthread_mutex_destroy@plt>
   2a448:	mov	r0, r5
   2a44c:	bl	1fd5c <__assert_fail@plt+0xe3bc>
   2a450:	mov	r5, #0
   2a454:	ldr	r0, [r4, #16]
   2a458:	str	r5, [r4]
   2a45c:	str	r5, [r4, #4]
   2a460:	bl	1c734 <__assert_fail@plt+0xad94>
   2a464:	str	r5, [r4, #16]
   2a468:	ldr	r0, [r4, #20]
   2a46c:	bl	1c734 <__assert_fail@plt+0xad94>
   2a470:	ldr	r6, [sp, #8]
   2a474:	str	r5, [r4, #20]
   2a478:	ldrd	r4, [sp]
   2a47c:	add	sp, sp, #12
   2a480:	pop	{pc}		; (ldr pc, [sp], #4)
   2a484:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2a488:	strd	r6, [sp, #8]
   2a48c:	strd	r8, [sp, #16]
   2a490:	strd	sl, [sp, #24]
   2a494:	str	lr, [sp, #32]
   2a498:	sub	sp, sp, #36	; 0x24
   2a49c:	ldr	r6, [sp, #72]	; 0x48
   2a4a0:	bics	ip, r6, #7
   2a4a4:	movne	r0, #2
   2a4a8:	bne	2a560 <__assert_fail@plt+0x18bc0>
   2a4ac:	ands	sl, r6, #4
   2a4b0:	mov	r7, r3
   2a4b4:	str	r2, [sp, #28]
   2a4b8:	mov	r8, r1
   2a4bc:	mov	r5, r0
   2a4c0:	bne	2a57c <__assert_fail@plt+0x18bdc>
   2a4c4:	mov	r0, r1
   2a4c8:	bl	117a8 <strlen@plt>
   2a4cc:	mov	r9, r0
   2a4d0:	movw	r2, #0
   2a4d4:	movt	r2, #0
   2a4d8:	ldr	fp, [r5]
   2a4dc:	cmp	r2, #0
   2a4e0:	mov	r4, #1
   2a4e4:	moveq	r4, r2
   2a4e8:	movw	r2, #0
   2a4ec:	movt	r2, #0
   2a4f0:	mov	r1, #1
   2a4f4:	cmp	r2, #0
   2a4f8:	moveq	r1, r2
   2a4fc:	orr	r4, r4, r1
   2a500:	ands	r4, r4, #255	; 0xff
   2a504:	beq	2a510 <__assert_fail@plt+0x18b70>
   2a508:	add	r0, fp, #136	; 0x88
   2a50c:	bl	115a4 <pthread_mutex_lock@plt>
   2a510:	ldrb	r2, [r5, #28]
   2a514:	tst	r2, #16
   2a518:	beq	2a588 <__assert_fail@plt+0x18be8>
   2a51c:	mov	ip, #0
   2a520:	mov	r0, r5
   2a524:	str	r9, [sp]
   2a528:	mov	r3, sl
   2a52c:	mov	r1, r8
   2a530:	mov	r2, r9
   2a534:	stmib	sp, {r9, ip}
   2a538:	str	ip, [sp, #12]
   2a53c:	str	r6, [sp, #16]
   2a540:	bl	2460c <__assert_fail@plt+0x12c6c>
   2a544:	mov	r5, r0
   2a548:	cmp	r4, #0
   2a54c:	beq	2a558 <__assert_fail@plt+0x18bb8>
   2a550:	add	r0, fp, #136	; 0x88
   2a554:	bl	114f0 <pthread_mutex_unlock@plt>
   2a558:	adds	r0, r5, #0
   2a55c:	movne	r0, #1
   2a560:	add	sp, sp, #36	; 0x24
   2a564:	ldrd	r4, [sp]
   2a568:	ldrd	r6, [sp, #8]
   2a56c:	ldrd	r8, [sp, #16]
   2a570:	ldrd	sl, [sp, #24]
   2a574:	add	sp, sp, #32
   2a578:	pop	{pc}		; (ldr pc, [sp], #4)
   2a57c:	ldr	sl, [r3]
   2a580:	ldr	r9, [r3, #4]
   2a584:	b	2a4d0 <__assert_fail@plt+0x18b30>
   2a588:	ldr	ip, [sp, #28]
   2a58c:	mov	r0, r5
   2a590:	mov	r3, sl
   2a594:	mov	r1, r8
   2a598:	mov	r2, r9
   2a59c:	str	r9, [sp]
   2a5a0:	stmib	sp, {r9, ip}
   2a5a4:	str	r7, [sp, #12]
   2a5a8:	str	r6, [sp, #16]
   2a5ac:	bl	2460c <__assert_fail@plt+0x12c6c>
   2a5b0:	mov	r5, r0
   2a5b4:	b	2a548 <__assert_fail@plt+0x18ba8>
   2a5b8:	str	r4, [sp, #-8]!
   2a5bc:	mov	r4, #0
   2a5c0:	str	lr, [sp, #4]
   2a5c4:	sub	sp, sp, #16
   2a5c8:	mov	lr, #1
   2a5cc:	ldr	ip, [sp, #24]
   2a5d0:	str	r4, [sp]
   2a5d4:	stmib	sp, {r2, ip, lr}
   2a5d8:	bl	29d78 <__assert_fail@plt+0x183d8>
   2a5dc:	add	sp, sp, #16
   2a5e0:	ldr	r4, [sp]
   2a5e4:	add	sp, sp, #4
   2a5e8:	pop	{pc}		; (ldr pc, [sp], #4)
   2a5ec:	str	r4, [sp, #-8]!
   2a5f0:	mov	r4, #0
   2a5f4:	str	lr, [sp, #4]
   2a5f8:	sub	sp, sp, #16
   2a5fc:	ldr	lr, [sp, #24]
   2a600:	ldr	ip, [sp, #28]
   2a604:	str	lr, [sp]
   2a608:	str	r4, [sp, #12]
   2a60c:	stmib	sp, {r2, ip}
   2a610:	bl	29d78 <__assert_fail@plt+0x183d8>
   2a614:	add	sp, sp, #16
   2a618:	ldr	r4, [sp]
   2a61c:	add	sp, sp, #4
   2a620:	pop	{pc}		; (ldr pc, [sp], #4)
   2a624:	strd	r4, [sp, #-12]!
   2a628:	mov	r4, #1
   2a62c:	str	lr, [sp, #8]
   2a630:	sub	sp, sp, #28
   2a634:	mov	lr, #0
   2a638:	ldr	ip, [sp, #40]	; 0x28
   2a63c:	ldr	r5, [sp, #44]	; 0x2c
   2a640:	str	ip, [sp]
   2a644:	ldr	ip, [sp, #52]	; 0x34
   2a648:	stmib	sp, {r5, lr}
   2a64c:	ldr	lr, [sp, #48]	; 0x30
   2a650:	str	r4, [sp, #20]
   2a654:	str	lr, [sp, #12]
   2a658:	str	ip, [sp, #16]
   2a65c:	bl	2a15c <__assert_fail@plt+0x187bc>
   2a660:	add	sp, sp, #28
   2a664:	ldrd	r4, [sp]
   2a668:	add	sp, sp, #8
   2a66c:	pop	{pc}		; (ldr pc, [sp], #4)
   2a670:	str	r4, [sp, #-8]!
   2a674:	mov	r4, #0
   2a678:	str	lr, [sp, #4]
   2a67c:	sub	sp, sp, #24
   2a680:	ldr	lr, [sp, #32]
   2a684:	ldr	ip, [sp, #36]	; 0x24
   2a688:	str	lr, [sp]
   2a68c:	str	r4, [sp, #20]
   2a690:	str	ip, [sp, #4]
   2a694:	ldr	r4, [sp, #40]	; 0x28
   2a698:	ldr	lr, [sp, #44]	; 0x2c
   2a69c:	ldr	ip, [sp, #48]	; 0x30
   2a6a0:	str	r4, [sp, #8]
   2a6a4:	str	lr, [sp, #12]
   2a6a8:	str	ip, [sp, #16]
   2a6ac:	bl	2a15c <__assert_fail@plt+0x187bc>
   2a6b0:	add	sp, sp, #24
   2a6b4:	ldr	r4, [sp]
   2a6b8:	add	sp, sp, #4
   2a6bc:	pop	{pc}		; (ldr pc, [sp], #4)
   2a6c0:	cmp	r2, #0
   2a6c4:	beq	2a6ec <__assert_fail@plt+0x18d4c>
   2a6c8:	ldrb	ip, [r0, #28]
   2a6cc:	push	{lr}		; (str lr, [sp, #-4]!)
   2a6d0:	mov	lr, #1
   2a6d4:	bfi	ip, lr, #1, #2
   2a6d8:	strb	ip, [r0, #28]
   2a6dc:	strd	r2, [r1]
   2a6e0:	ldr	r3, [sp, #4]
   2a6e4:	str	r3, [r1, #8]
   2a6e8:	pop	{pc}		; (ldr pc, [sp], #4)
   2a6ec:	ldrb	r3, [r0, #28]
   2a6f0:	bfi	r3, r2, #1, #2
   2a6f4:	strb	r3, [r0, #28]
   2a6f8:	str	r2, [r1]
   2a6fc:	str	r2, [r1, #4]
   2a700:	str	r2, [r1, #8]
   2a704:	bx	lr
   2a708:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2a70c:	mov	r5, r0
   2a710:	strd	r6, [sp, #8]
   2a714:	mov	r6, #1
   2a718:	mov	r7, r6
   2a71c:	strd	r8, [sp, #16]
   2a720:	mov	r9, #0
   2a724:	mvn	r8, #0
   2a728:	strd	sl, [sp, #24]
   2a72c:	mov	sl, r1
   2a730:	str	lr, [sp, #32]
   2a734:	sub	sp, sp, #20
   2a738:	str	r2, [sp, #12]
   2a73c:	add	r4, r7, r9
   2a740:	cmp	r4, sl
   2a744:	bcs	2a7d0 <__assert_fail@plt+0x18e30>
   2a748:	bl	11778 <__ctype_b_loc@plt>
   2a74c:	ldrb	fp, [r5, r4]
   2a750:	ldr	r3, [r0]
   2a754:	sxth	r2, fp
   2a758:	lsl	r1, r2, #1
   2a75c:	str	r2, [sp, #4]
   2a760:	ldrh	r1, [r3, r1]
   2a764:	tst	r1, #256	; 0x100
   2a768:	beq	2a780 <__assert_fail@plt+0x18de0>
   2a76c:	str	r3, [sp, #8]
   2a770:	bl	11748 <__ctype_tolower_loc@plt>
   2a774:	ldr	r1, [r0]
   2a778:	ldrd	r2, [sp, #4]
   2a77c:	ldrb	fp, [r1, r2, lsl #2]
   2a780:	add	r2, r5, r8
   2a784:	ldrb	r1, [r2, r7]
   2a788:	sxth	r2, r1
   2a78c:	lsl	r0, r2, #1
   2a790:	str	r2, [sp, #4]
   2a794:	ldrh	r3, [r3, r0]
   2a798:	tst	r3, #256	; 0x100
   2a79c:	beq	2a7b0 <__assert_fail@plt+0x18e10>
   2a7a0:	bl	11748 <__ctype_tolower_loc@plt>
   2a7a4:	ldr	r3, [r0]
   2a7a8:	ldr	r2, [sp, #4]
   2a7ac:	ldrb	r1, [r3, r2, lsl #2]
   2a7b0:	cmp	fp, r1
   2a7b4:	bcs	2a8d0 <__assert_fail@plt+0x18f30>
   2a7b8:	mov	r9, r4
   2a7bc:	mov	r7, #1
   2a7c0:	sub	r6, r4, r8
   2a7c4:	add	r4, r7, r9
   2a7c8:	cmp	r4, sl
   2a7cc:	bcc	2a748 <__assert_fail@plt+0x18da8>
   2a7d0:	ldr	r3, [sp, #12]
   2a7d4:	mov	fp, #1
   2a7d8:	mov	r7, #0
   2a7dc:	mvn	r9, #0
   2a7e0:	str	r6, [r3]
   2a7e4:	mov	r6, fp
   2a7e8:	add	r4, r6, r7
   2a7ec:	cmp	sl, r4
   2a7f0:	bls	2a880 <__assert_fail@plt+0x18ee0>
   2a7f4:	bl	11778 <__ctype_b_loc@plt>
   2a7f8:	ldrb	r3, [r5, r4]
   2a7fc:	ldr	r2, [r0]
   2a800:	sxth	r1, r3
   2a804:	lsl	r0, r1, #1
   2a808:	str	r1, [sp, #4]
   2a80c:	ldrh	r0, [r2, r0]
   2a810:	tst	r0, #256	; 0x100
   2a814:	beq	2a82c <__assert_fail@plt+0x18e8c>
   2a818:	str	r2, [sp, #8]
   2a81c:	bl	11748 <__ctype_tolower_loc@plt>
   2a820:	ldr	r3, [r0]
   2a824:	ldmib	sp, {r1, r2}
   2a828:	ldrb	r3, [r3, r1, lsl #2]
   2a82c:	add	r1, r5, r9
   2a830:	ldrb	r0, [r1, r6]
   2a834:	sxth	r1, r0
   2a838:	lsl	ip, r1, #1
   2a83c:	str	r1, [sp, #4]
   2a840:	ldrh	r2, [r2, ip]
   2a844:	tst	r2, #256	; 0x100
   2a848:	beq	2a860 <__assert_fail@plt+0x18ec0>
   2a84c:	str	r3, [sp, #8]
   2a850:	bl	11748 <__ctype_tolower_loc@plt>
   2a854:	ldr	r2, [r0]
   2a858:	ldmib	sp, {r1, r3}
   2a85c:	ldrb	r0, [r2, r1, lsl #2]
   2a860:	cmp	r3, r0
   2a864:	bls	2a8b8 <__assert_fail@plt+0x18f18>
   2a868:	mov	r7, r4
   2a86c:	mov	r6, #1
   2a870:	sub	fp, r4, r9
   2a874:	add	r4, r6, r7
   2a878:	cmp	sl, r4
   2a87c:	bhi	2a7f4 <__assert_fail@plt+0x18e54>
   2a880:	add	r9, r9, #1
   2a884:	add	r0, r8, #1
   2a888:	cmp	r9, r0
   2a88c:	bcc	2a89c <__assert_fail@plt+0x18efc>
   2a890:	ldr	r3, [sp, #12]
   2a894:	mov	r0, r9
   2a898:	str	fp, [r3]
   2a89c:	add	sp, sp, #20
   2a8a0:	ldrd	r4, [sp]
   2a8a4:	ldrd	r6, [sp, #8]
   2a8a8:	ldrd	r8, [sp, #16]
   2a8ac:	ldrd	sl, [sp, #24]
   2a8b0:	add	sp, sp, #32
   2a8b4:	pop	{pc}		; (ldr pc, [sp], #4)
   2a8b8:	beq	2a8e8 <__assert_fail@plt+0x18f48>
   2a8bc:	mov	fp, #1
   2a8c0:	mov	r9, r7
   2a8c4:	mov	r6, fp
   2a8c8:	add	r7, r7, fp
   2a8cc:	b	2a7e8 <__assert_fail@plt+0x18e48>
   2a8d0:	beq	2a8fc <__assert_fail@plt+0x18f5c>
   2a8d4:	mov	r6, #1
   2a8d8:	mov	r8, r9
   2a8dc:	mov	r7, r6
   2a8e0:	add	r9, r9, r6
   2a8e4:	b	2a73c <__assert_fail@plt+0x18d9c>
   2a8e8:	cmp	r6, fp
   2a8ec:	addne	r6, r6, #1
   2a8f0:	moveq	r7, r4
   2a8f4:	moveq	r6, #1
   2a8f8:	b	2a7e8 <__assert_fail@plt+0x18e48>
   2a8fc:	cmp	r7, r6
   2a900:	addne	r7, r7, #1
   2a904:	moveq	r9, r4
   2a908:	moveq	r7, #1
   2a90c:	b	2a73c <__assert_fail@plt+0x18d9c>
   2a910:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2a914:	cmp	r3, #2
   2a918:	mov	r4, r3
   2a91c:	strd	r6, [sp, #8]
   2a920:	mov	r6, r0
   2a924:	mov	r7, r1
   2a928:	strd	r8, [sp, #16]
   2a92c:	strd	sl, [sp, #24]
   2a930:	str	lr, [sp, #32]
   2a934:	sub	sp, sp, #1088	; 0x440
   2a938:	sub	sp, sp, #4
   2a93c:	str	r2, [sp, #12]
   2a940:	bls	2af30 <__assert_fail@plt+0x19590>
   2a944:	add	r5, sp, #64	; 0x40
   2a948:	mov	r0, r2
   2a94c:	mov	r1, r3
   2a950:	sub	r2, r5, #4
   2a954:	bl	2a708 <__assert_fail@plt+0x18d68>
   2a958:	ldr	r3, [sp, #60]	; 0x3c
   2a95c:	str	r0, [sp, #16]
   2a960:	str	r3, [sp, #24]
   2a964:	add	r2, sp, #1072	; 0x430
   2a968:	sub	r3, r5, #4
   2a96c:	add	r2, r2, #12
   2a970:	str	r4, [r3, #4]!
   2a974:	cmp	r2, r3
   2a978:	bne	2a970 <__assert_fail@plt+0x18fd0>
   2a97c:	ldr	sl, [sp, #12]
   2a980:	cmp	r4, #0
   2a984:	ldr	r3, [sp, #24]
   2a988:	add	r8, sl, r3
   2a98c:	beq	2ab98 <__assert_fail@plt+0x191f8>
   2a990:	bl	11778 <__ctype_b_loc@plt>
   2a994:	ldr	r5, [r0]
   2a998:	sub	r3, r4, #1
   2a99c:	sub	r9, sl, #1
   2a9a0:	add	fp, sl, r3
   2a9a4:	str	r6, [sp]
   2a9a8:	str	r3, [sp, #32]
   2a9ac:	ldrb	r3, [r9, #1]!
   2a9b0:	sxth	r6, r3
   2a9b4:	mov	r2, r3
   2a9b8:	lsl	r3, r6, #1
   2a9bc:	ldrh	r3, [r5, r3]
   2a9c0:	tst	r3, #256	; 0x100
   2a9c4:	beq	2a9d4 <__assert_fail@plt+0x19034>
   2a9c8:	bl	11748 <__ctype_tolower_loc@plt>
   2a9cc:	ldr	r3, [r0]
   2a9d0:	ldr	r2, [r3, r6, lsl #2]
   2a9d4:	mvn	r3, r9
   2a9d8:	add	r1, sp, #1088	; 0x440
   2a9dc:	add	r2, r1, r2, lsl #2
   2a9e0:	add	r3, r3, r4
   2a9e4:	cmp	fp, r9
   2a9e8:	add	r3, sl, r3
   2a9ec:	str	r3, [r2, #-1024]	; 0xfffffc00
   2a9f0:	bne	2a9ac <__assert_fail@plt+0x1900c>
   2a9f4:	mov	r1, r8
   2a9f8:	ldr	r6, [sp]
   2a9fc:	ldr	r0, [sp, #12]
   2aa00:	ldr	r2, [sp, #16]
   2aa04:	bl	117f0 <strncasecmp@plt>
   2aa08:	subs	r9, r0, #0
   2aa0c:	beq	2ac84 <__assert_fail@plt+0x192e4>
   2aa10:	mov	r1, #0
   2aa14:	ldr	r2, [sp, #16]
   2aa18:	sub	fp, r4, #1
   2aa1c:	stm	sp, {r1, r6}
   2aa20:	ldr	r1, [sp, #12]
   2aa24:	str	r4, [sp, #8]
   2aa28:	sub	r3, r4, r2
   2aa2c:	cmp	r3, r2
   2aa30:	movcc	r3, r2
   2aa34:	add	r1, r1, r2
   2aa38:	add	r3, r3, #1
   2aa3c:	str	r3, [sp, #28]
   2aa40:	str	r1, [sp, #32]
   2aa44:	sub	r1, r2, #1
   2aa48:	rsb	r2, r2, #1
   2aa4c:	str	r1, [sp, #20]
   2aa50:	str	r2, [sp, #24]
   2aa54:	mov	r2, r7
   2aa58:	str	r3, [sp, #60]	; 0x3c
   2aa5c:	b	2aa70 <__assert_fail@plt+0x190d0>
   2aa60:	ldr	r2, [sp]
   2aa64:	add	r3, r2, r3
   2aa68:	str	r3, [sp]
   2aa6c:	mov	r2, r9
   2aa70:	ldr	r1, [sp]
   2aa74:	ldr	r3, [sp, #8]
   2aa78:	add	r9, r3, r1
   2aa7c:	ldr	r3, [sp, #4]
   2aa80:	mov	r1, #0
   2aa84:	add	r0, r3, r2
   2aa88:	sub	r2, r9, r2
   2aa8c:	bl	1185c <memchr@plt>
   2aa90:	adds	r3, r9, #0
   2aa94:	movne	r3, #1
   2aa98:	cmp	r0, #0
   2aa9c:	moveq	r0, r3
   2aaa0:	movne	r0, #0
   2aaa4:	cmp	r0, #0
   2aaa8:	beq	2abb0 <__assert_fail@plt+0x19210>
   2aaac:	bl	11778 <__ctype_b_loc@plt>
   2aab0:	ldr	r3, [sp, #4]
   2aab4:	ldr	r7, [r0]
   2aab8:	add	r3, r3, r9
   2aabc:	ldrb	r3, [r3, #-1]
   2aac0:	sxth	r5, r3
   2aac4:	lsl	r2, r5, #1
   2aac8:	ldrh	r2, [r7, r2]
   2aacc:	tst	r2, #256	; 0x100
   2aad0:	beq	2aae0 <__assert_fail@plt+0x19140>
   2aad4:	bl	11748 <__ctype_tolower_loc@plt>
   2aad8:	ldr	r3, [r0]
   2aadc:	ldr	r3, [r3, r5, lsl #2]
   2aae0:	add	r2, sp, #1088	; 0x440
   2aae4:	add	r3, r2, r3, lsl #2
   2aae8:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   2aaec:	cmp	r3, #0
   2aaf0:	bne	2aa60 <__assert_fail@plt+0x190c0>
   2aaf4:	ldr	r8, [sp, #16]
   2aaf8:	cmp	r8, fp
   2aafc:	bcs	2abd4 <__assert_fail@plt+0x19234>
   2ab00:	ldr	r3, [sp]
   2ab04:	ldr	r2, [sp, #12]
   2ab08:	ldr	r1, [sp, #20]
   2ab0c:	add	r3, r8, r3
   2ab10:	add	r6, r2, r1
   2ab14:	ldr	r2, [sp, #4]
   2ab18:	add	r4, r2, r3
   2ab1c:	b	2ab2c <__assert_fail@plt+0x1918c>
   2ab20:	add	r8, r8, #1
   2ab24:	cmp	r8, fp
   2ab28:	bcs	2abd4 <__assert_fail@plt+0x19234>
   2ab2c:	ldrb	r3, [r6, #1]!
   2ab30:	sxth	sl, r3
   2ab34:	mov	r5, r3
   2ab38:	lsl	r3, sl, #1
   2ab3c:	ldrh	r3, [r7, r3]
   2ab40:	tst	r3, #256	; 0x100
   2ab44:	beq	2ab54 <__assert_fail@plt+0x191b4>
   2ab48:	bl	11748 <__ctype_tolower_loc@plt>
   2ab4c:	ldr	r3, [r0]
   2ab50:	ldr	r5, [r3, sl, lsl #2]
   2ab54:	ldrb	r3, [r4], #1
   2ab58:	sxth	sl, r3
   2ab5c:	lsl	r2, sl, #1
   2ab60:	ldrh	r2, [r7, r2]
   2ab64:	tst	r2, #256	; 0x100
   2ab68:	beq	2ab78 <__assert_fail@plt+0x191d8>
   2ab6c:	bl	11748 <__ctype_tolower_loc@plt>
   2ab70:	ldr	r3, [r0]
   2ab74:	ldr	r3, [r3, sl, lsl #2]
   2ab78:	cmp	r5, r3
   2ab7c:	beq	2ab20 <__assert_fail@plt+0x19180>
   2ab80:	ldr	r2, [sp]
   2ab84:	ldr	r3, [sp, #24]
   2ab88:	add	sl, r3, r2
   2ab8c:	add	r3, r8, sl
   2ab90:	str	r3, [sp]
   2ab94:	b	2aa6c <__assert_fail@plt+0x190cc>
   2ab98:	mov	r1, r8
   2ab9c:	ldr	r0, [sp, #12]
   2aba0:	ldr	r2, [sp, #16]
   2aba4:	bl	117f0 <strncasecmp@plt>
   2aba8:	cmp	r0, #0
   2abac:	bne	2aa10 <__assert_fail@plt+0x19070>
   2abb0:	mov	r0, #0
   2abb4:	add	sp, sp, #1088	; 0x440
   2abb8:	add	sp, sp, #4
   2abbc:	ldrd	r4, [sp]
   2abc0:	ldrd	r6, [sp, #8]
   2abc4:	ldrd	r8, [sp, #16]
   2abc8:	ldrd	sl, [sp, #24]
   2abcc:	add	sp, sp, #32
   2abd0:	pop	{pc}		; (ldr pc, [sp], #4)
   2abd4:	ldr	r3, [sp, #16]
   2abd8:	cmp	r3, #0
   2abdc:	beq	2af24 <__assert_fail@plt+0x19584>
   2abe0:	ldr	r2, [sp]
   2abe4:	str	r9, [sp, #36]	; 0x24
   2abe8:	ldr	r8, [sp, #12]
   2abec:	ldr	r5, [sp, #32]
   2abf0:	add	r1, r3, r2
   2abf4:	ldr	r3, [sp, #4]
   2abf8:	add	r4, r3, r1
   2abfc:	b	2ac0c <__assert_fail@plt+0x1926c>
   2ac00:	cmn	r5, #1
   2ac04:	mov	r5, r6
   2ac08:	beq	2af24 <__assert_fail@plt+0x19584>
   2ac0c:	ldrb	r3, [r5, #-1]
   2ac10:	sub	r6, r5, #1
   2ac14:	sxth	r9, r3
   2ac18:	mov	sl, r3
   2ac1c:	lsl	r3, r9, #1
   2ac20:	ldrh	r3, [r7, r3]
   2ac24:	tst	r3, #256	; 0x100
   2ac28:	beq	2ac38 <__assert_fail@plt+0x19298>
   2ac2c:	bl	11748 <__ctype_tolower_loc@plt>
   2ac30:	ldr	r3, [r0]
   2ac34:	ldr	sl, [r3, r9, lsl #2]
   2ac38:	ldrb	r3, [r4, #-1]!
   2ac3c:	sxth	r9, r3
   2ac40:	lsl	r1, r9, #1
   2ac44:	ldrh	r1, [r7, r1]
   2ac48:	tst	r1, #256	; 0x100
   2ac4c:	beq	2ac5c <__assert_fail@plt+0x192bc>
   2ac50:	bl	11748 <__ctype_tolower_loc@plt>
   2ac54:	ldr	r3, [r0]
   2ac58:	ldr	r3, [r3, r9, lsl #2]
   2ac5c:	sub	r5, r5, #2
   2ac60:	cmp	sl, r3
   2ac64:	sub	r5, r5, r8
   2ac68:	beq	2ac00 <__assert_fail@plt+0x19260>
   2ac6c:	ldr	r3, [sp]
   2ac70:	ldr	r2, [sp, #28]
   2ac74:	ldr	r9, [sp, #36]	; 0x24
   2ac78:	add	r3, r3, r2
   2ac7c:	str	r3, [sp]
   2ac80:	b	2aa6c <__assert_fail@plt+0x190cc>
   2ac84:	mov	r2, r9
   2ac88:	sub	r3, r4, #2
   2ac8c:	stm	sp, {r2, r6}
   2ac90:	ldr	r2, [sp, #12]
   2ac94:	str	r9, [sp, #8]
   2ac98:	str	r4, [sp, #20]
   2ac9c:	add	r3, r2, r3
   2aca0:	rsb	r9, r2, #1
   2aca4:	mov	r2, r7
   2aca8:	str	r3, [sp, #36]	; 0x24
   2acac:	ldr	r3, [sp, #16]
   2acb0:	sub	r1, r3, #1
   2acb4:	rsb	r3, r3, #1
   2acb8:	str	r3, [sp, #40]	; 0x28
   2acbc:	str	r1, [sp, #52]	; 0x34
   2acc0:	ldr	r1, [sp, #24]
   2acc4:	sub	r1, r4, r1
   2acc8:	str	r1, [sp, #44]	; 0x2c
   2accc:	b	2acfc <__assert_fail@plt+0x1935c>
   2acd0:	ldr	r1, [sp, #8]
   2acd4:	ldr	r2, [sp, #24]
   2acd8:	cmp	r1, #0
   2acdc:	cmpne	r3, r2
   2ace0:	ldr	r2, [sp]
   2ace4:	ldrcc	r3, [sp, #44]	; 0x2c
   2ace8:	add	r3, r2, r3
   2acec:	str	r3, [sp]
   2acf0:	mov	r3, #0
   2acf4:	str	r3, [sp, #8]
   2acf8:	mov	r2, r6
   2acfc:	ldr	r1, [sp]
   2ad00:	ldr	r3, [sp, #20]
   2ad04:	add	r6, r3, r1
   2ad08:	ldr	r3, [sp, #4]
   2ad0c:	mov	r1, #0
   2ad10:	add	r0, r3, r2
   2ad14:	sub	r2, r6, r2
   2ad18:	bl	1185c <memchr@plt>
   2ad1c:	adds	r3, r6, #0
   2ad20:	movne	r3, #1
   2ad24:	cmp	r0, #0
   2ad28:	moveq	r0, r3
   2ad2c:	movne	r0, #0
   2ad30:	cmp	r0, #0
   2ad34:	beq	2abb0 <__assert_fail@plt+0x19210>
   2ad38:	ldr	r3, [sp, #4]
   2ad3c:	add	r3, r3, r6
   2ad40:	ldrb	r3, [r3, #-1]
   2ad44:	sxth	r4, r3
   2ad48:	lsl	r2, r4, #1
   2ad4c:	ldrh	r2, [r5, r2]
   2ad50:	tst	r2, #256	; 0x100
   2ad54:	beq	2ad64 <__assert_fail@plt+0x193c4>
   2ad58:	bl	11748 <__ctype_tolower_loc@plt>
   2ad5c:	ldr	r3, [r0]
   2ad60:	ldr	r3, [r3, r4, lsl #2]
   2ad64:	add	r2, sp, #1088	; 0x440
   2ad68:	add	r3, r2, r3, lsl #2
   2ad6c:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   2ad70:	cmp	r3, #0
   2ad74:	bne	2acd0 <__assert_fail@plt+0x19330>
   2ad78:	ldr	r2, [sp, #8]
   2ad7c:	ldr	r3, [sp, #16]
   2ad80:	cmp	r3, r2
   2ad84:	movcc	r3, r2
   2ad88:	ldr	r2, [sp, #32]
   2ad8c:	cmp	r3, r2
   2ad90:	bcs	2ae44 <__assert_fail@plt+0x194a4>
   2ad94:	ldr	r2, [sp]
   2ad98:	sub	fp, r3, #1
   2ad9c:	str	r6, [sp, #28]
   2ada0:	ldr	r8, [sp, #36]	; 0x24
   2ada4:	add	r3, r3, r2
   2ada8:	ldr	r2, [sp, #12]
   2adac:	add	fp, r2, fp
   2adb0:	ldr	r2, [sp, #4]
   2adb4:	add	sl, r2, r3
   2adb8:	b	2adc4 <__assert_fail@plt+0x19424>
   2adbc:	cmp	r8, fp
   2adc0:	beq	2ae40 <__assert_fail@plt+0x194a0>
   2adc4:	add	r7, r9, fp
   2adc8:	ldrb	r3, [fp, #1]!
   2adcc:	sxth	r6, r3
   2add0:	mov	r4, r3
   2add4:	lsl	r3, r6, #1
   2add8:	ldrh	r3, [r5, r3]
   2addc:	tst	r3, #256	; 0x100
   2ade0:	beq	2adf0 <__assert_fail@plt+0x19450>
   2ade4:	bl	11748 <__ctype_tolower_loc@plt>
   2ade8:	ldr	r3, [r0]
   2adec:	ldr	r4, [r3, r6, lsl #2]
   2adf0:	ldrb	r3, [sl], #1
   2adf4:	sxth	r6, r3
   2adf8:	lsl	r1, r6, #1
   2adfc:	ldrh	r1, [r5, r1]
   2ae00:	tst	r1, #256	; 0x100
   2ae04:	beq	2ae14 <__assert_fail@plt+0x19474>
   2ae08:	bl	11748 <__ctype_tolower_loc@plt>
   2ae0c:	ldr	r3, [r0]
   2ae10:	ldr	r3, [r3, r6, lsl #2]
   2ae14:	cmp	r4, r3
   2ae18:	beq	2adbc <__assert_fail@plt+0x1941c>
   2ae1c:	ldr	r2, [sp]
   2ae20:	ldr	r6, [sp, #28]
   2ae24:	ldr	r3, [sp, #40]	; 0x28
   2ae28:	add	r3, r3, r2
   2ae2c:	mov	r2, #0
   2ae30:	add	r3, r3, r7
   2ae34:	str	r3, [sp]
   2ae38:	str	r2, [sp, #8]
   2ae3c:	b	2acf8 <__assert_fail@plt+0x19358>
   2ae40:	ldr	r6, [sp, #28]
   2ae44:	ldr	r0, [sp, #8]
   2ae48:	ldr	r3, [sp, #16]
   2ae4c:	ldr	r7, [sp, #52]	; 0x34
   2ae50:	cmp	r3, r0
   2ae54:	bls	2af60 <__assert_fail@plt+0x195c0>
   2ae58:	ldr	r2, [sp]
   2ae5c:	str	r6, [sp, #28]
   2ae60:	ldr	r1, [sp, #12]
   2ae64:	str	r9, [sp, #48]	; 0x30
   2ae68:	add	r2, r3, r2
   2ae6c:	add	r1, r1, r3
   2ae70:	ldr	r3, [sp, #4]
   2ae74:	mov	r9, r1
   2ae78:	add	fp, r3, r2
   2ae7c:	mov	r6, fp
   2ae80:	mov	fp, r0
   2ae84:	b	2ae94 <__assert_fail@plt+0x194f4>
   2ae88:	cmp	fp, r7
   2ae8c:	mov	r7, r3
   2ae90:	beq	2af4c <__assert_fail@plt+0x195ac>
   2ae94:	ldrb	r4, [r9, #-1]!
   2ae98:	add	sl, r7, #1
   2ae9c:	sxth	r8, r4
   2aea0:	lsl	r3, r8, #1
   2aea4:	ldrh	r3, [r5, r3]
   2aea8:	tst	r3, #256	; 0x100
   2aeac:	beq	2aebc <__assert_fail@plt+0x1951c>
   2aeb0:	bl	11748 <__ctype_tolower_loc@plt>
   2aeb4:	ldr	r3, [r0]
   2aeb8:	ldr	r4, [r3, r8, lsl #2]
   2aebc:	ldrb	r3, [r6, #-1]!
   2aec0:	sxth	r8, r3
   2aec4:	lsl	r0, r8, #1
   2aec8:	ldrh	r0, [r5, r0]
   2aecc:	tst	r0, #256	; 0x100
   2aed0:	beq	2aee0 <__assert_fail@plt+0x19540>
   2aed4:	bl	11748 <__ctype_tolower_loc@plt>
   2aed8:	ldr	r3, [r0]
   2aedc:	ldr	r3, [r3, r8, lsl #2]
   2aee0:	cmp	r4, r3
   2aee4:	sub	r3, r7, #1
   2aee8:	beq	2ae88 <__assert_fail@plt+0x194e8>
   2aeec:	ldr	r6, [sp, #28]
   2aef0:	mov	r2, sl
   2aef4:	ldr	r9, [sp, #48]	; 0x30
   2aef8:	ldr	r3, [sp, #8]
   2aefc:	add	r8, r3, #1
   2af00:	cmp	r8, r2
   2af04:	bhi	2af24 <__assert_fail@plt+0x19584>
   2af08:	ldr	r3, [sp]
   2af0c:	ldr	r2, [sp, #24]
   2af10:	add	r3, r3, r2
   2af14:	str	r3, [sp]
   2af18:	ldr	r3, [sp, #44]	; 0x2c
   2af1c:	str	r3, [sp, #8]
   2af20:	b	2acf8 <__assert_fail@plt+0x19358>
   2af24:	ldm	sp, {r3, r6}
   2af28:	add	r0, r6, r3
   2af2c:	b	2abb4 <__assert_fail@plt+0x19214>
   2af30:	mov	r3, #1
   2af34:	sub	r2, r4, #1
   2af38:	add	r5, sp, #64	; 0x40
   2af3c:	str	r2, [sp, #16]
   2af40:	str	r3, [sp, #24]
   2af44:	str	r3, [sp, #60]	; 0x3c
   2af48:	b	2a964 <__assert_fail@plt+0x18fc4>
   2af4c:	ldr	r3, [sp, #8]
   2af50:	ldr	r6, [sp, #28]
   2af54:	ldr	r9, [sp, #48]	; 0x30
   2af58:	mov	r2, r3
   2af5c:	b	2aef8 <__assert_fail@plt+0x19558>
   2af60:	ldr	r3, [sp, #16]
   2af64:	mov	r2, r3
   2af68:	b	2aef8 <__assert_fail@plt+0x19558>
   2af6c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2af70:	strd	r6, [sp, #8]
   2af74:	strd	r8, [sp, #16]
   2af78:	strd	sl, [sp, #24]
   2af7c:	str	lr, [sp, #32]
   2af80:	sub	sp, sp, #68	; 0x44
   2af84:	ldrb	r6, [r0]
   2af88:	ldrb	r5, [r1]
   2af8c:	cmp	r6, #0
   2af90:	beq	2b500 <__assert_fail@plt+0x19b60>
   2af94:	cmp	r5, #0
   2af98:	beq	2b070 <__assert_fail@plt+0x196d0>
   2af9c:	mov	r4, r1
   2afa0:	mov	fp, r0
   2afa4:	add	r8, r1, #1
   2afa8:	mov	r9, #1
   2afac:	stm	sp, {r4, fp}
   2afb0:	bl	11778 <__ctype_b_loc@plt>
   2afb4:	str	r0, [sp, #12]
   2afb8:	ldr	sl, [r0]
   2afbc:	b	2afc8 <__assert_fail@plt+0x19628>
   2afc0:	cmp	r5, #0
   2afc4:	beq	2b034 <__assert_fail@plt+0x19694>
   2afc8:	sxth	r7, r6
   2afcc:	mov	r4, r6
   2afd0:	lsl	r3, r7, #1
   2afd4:	ldrh	r3, [sl, r3]
   2afd8:	tst	r3, #256	; 0x100
   2afdc:	beq	2afec <__assert_fail@plt+0x1964c>
   2afe0:	bl	11748 <__ctype_tolower_loc@plt>
   2afe4:	ldr	r3, [r0]
   2afe8:	ldr	r4, [r3, r7, lsl #2]
   2afec:	sxth	r6, r5
   2aff0:	lsl	r3, r6, #1
   2aff4:	ldrh	r3, [sl, r3]
   2aff8:	tst	r3, #256	; 0x100
   2affc:	beq	2b00c <__assert_fail@plt+0x1966c>
   2b000:	bl	11748 <__ctype_tolower_loc@plt>
   2b004:	ldr	r3, [r0]
   2b008:	ldr	r5, [r3, r6, lsl #2]
   2b00c:	cmp	r4, r5
   2b010:	movne	r9, #0
   2b014:	andeq	r9, r9, #1
   2b018:	mov	r4, r8
   2b01c:	ldrb	r6, [fp, #1]!
   2b020:	ldrb	r5, [r8], #1
   2b024:	cmp	r6, #0
   2b028:	bne	2afc0 <__assert_fail@plt+0x19620>
   2b02c:	cmp	r5, #0
   2b030:	bne	2b08c <__assert_fail@plt+0x196ec>
   2b034:	cmp	r9, #0
   2b038:	bne	2b30c <__assert_fail@plt+0x1996c>
   2b03c:	ldr	r3, [sp]
   2b040:	sub	r4, r4, r3
   2b044:	ldr	r3, [sp, #4]
   2b048:	cmp	r4, #31
   2b04c:	sub	r5, r4, #1
   2b050:	add	r3, r3, #1
   2b054:	str	r3, [sp, #4]
   2b058:	bls	2b094 <__assert_fail@plt+0x196f4>
   2b05c:	mov	r3, r4
   2b060:	mov	r1, r5
   2b064:	ldr	r2, [sp]
   2b068:	ldr	r0, [sp, #4]
   2b06c:	bl	2a910 <__assert_fail@plt+0x18f70>
   2b070:	add	sp, sp, #68	; 0x44
   2b074:	ldrd	r4, [sp]
   2b078:	ldrd	r6, [sp, #8]
   2b07c:	ldrd	r8, [sp, #16]
   2b080:	ldrd	sl, [sp, #24]
   2b084:	add	sp, sp, #32
   2b088:	pop	{pc}		; (ldr pc, [sp], #4)
   2b08c:	mov	r0, #0
   2b090:	b	2b070 <__assert_fail@plt+0x196d0>
   2b094:	cmp	r4, #2
   2b098:	bls	2b4ec <__assert_fail@plt+0x19b4c>
   2b09c:	add	r2, sp, #60	; 0x3c
   2b0a0:	mov	r1, r4
   2b0a4:	ldr	r0, [sp]
   2b0a8:	bl	2a708 <__assert_fail@plt+0x18d68>
   2b0ac:	ldr	r3, [sp, #60]	; 0x3c
   2b0b0:	str	r0, [sp, #16]
   2b0b4:	str	r3, [sp, #36]	; 0x24
   2b0b8:	ldr	r3, [sp]
   2b0bc:	ldr	r2, [sp, #16]
   2b0c0:	ldr	r1, [sp, #36]	; 0x24
   2b0c4:	mov	r0, r3
   2b0c8:	add	r1, r3, r1
   2b0cc:	bl	117f0 <strncasecmp@plt>
   2b0d0:	subs	sl, r0, #0
   2b0d4:	bne	2b324 <__assert_fail@plt+0x19984>
   2b0d8:	ldr	r3, [sp]
   2b0dc:	str	sl, [sp, #8]
   2b0e0:	ldr	r2, [sp, #16]
   2b0e4:	str	r4, [sp, #20]
   2b0e8:	str	sl, [sp, #24]
   2b0ec:	sub	r8, r3, #1
   2b0f0:	rsb	r7, r3, #1
   2b0f4:	add	r6, r8, r4
   2b0f8:	sub	r1, r2, #1
   2b0fc:	rsb	r3, r2, #1
   2b100:	mov	r2, r5
   2b104:	str	r3, [sp, #32]
   2b108:	str	r1, [sp, #48]	; 0x30
   2b10c:	ldr	r1, [sp, #36]	; 0x24
   2b110:	sub	r1, r4, r1
   2b114:	str	r1, [sp, #52]	; 0x34
   2b118:	ldr	r1, [sp, #8]
   2b11c:	ldr	r3, [sp, #20]
   2b120:	add	r4, r3, r1
   2b124:	ldr	r3, [sp, #4]
   2b128:	mov	r1, #0
   2b12c:	str	r4, [sp, #28]
   2b130:	add	r0, r3, r2
   2b134:	sub	r2, r4, r2
   2b138:	bl	1185c <memchr@plt>
   2b13c:	clz	r0, r0
   2b140:	cmp	r4, #0
   2b144:	lsr	r0, r0, #5
   2b148:	moveq	r0, #0
   2b14c:	cmp	r0, #0
   2b150:	beq	2b08c <__assert_fail@plt+0x196ec>
   2b154:	ldr	r3, [sp, #16]
   2b158:	ldr	r2, [sp, #24]
   2b15c:	cmp	r3, r2
   2b160:	movcc	r3, r2
   2b164:	ldr	r2, [sp, #20]
   2b168:	cmp	r2, r3
   2b16c:	bls	2b22c <__assert_fail@plt+0x1988c>
   2b170:	ldr	r2, [sp, #8]
   2b174:	sub	r5, r3, #1
   2b178:	sub	fp, r2, #1
   2b17c:	ldr	r2, [sp, #12]
   2b180:	add	fp, fp, r3
   2b184:	ldr	r3, [sp]
   2b188:	ldr	sl, [r2]
   2b18c:	add	r5, r3, r5
   2b190:	ldr	r3, [sp, #4]
   2b194:	add	fp, r3, fp
   2b198:	b	2b1a4 <__assert_fail@plt+0x19804>
   2b19c:	cmp	r6, r5
   2b1a0:	beq	2b22c <__assert_fail@plt+0x1988c>
   2b1a4:	add	r9, r7, r5
   2b1a8:	ldrb	r3, [r5, #1]!
   2b1ac:	sxth	r8, r3
   2b1b0:	mov	r4, r3
   2b1b4:	lsl	r3, r8, #1
   2b1b8:	ldrh	r3, [sl, r3]
   2b1bc:	tst	r3, #256	; 0x100
   2b1c0:	beq	2b1d0 <__assert_fail@plt+0x19830>
   2b1c4:	bl	11748 <__ctype_tolower_loc@plt>
   2b1c8:	ldr	r3, [r0]
   2b1cc:	ldr	r4, [r3, r8, lsl #2]
   2b1d0:	ldrb	r3, [fp, #1]!
   2b1d4:	sxth	r8, r3
   2b1d8:	lsl	r2, r8, #1
   2b1dc:	ldrh	r2, [sl, r2]
   2b1e0:	tst	r2, #256	; 0x100
   2b1e4:	beq	2b1f4 <__assert_fail@plt+0x19854>
   2b1e8:	bl	11748 <__ctype_tolower_loc@plt>
   2b1ec:	ldr	r3, [r0]
   2b1f0:	ldr	r3, [r3, r8, lsl #2]
   2b1f4:	cmp	r4, r3
   2b1f8:	beq	2b19c <__assert_fail@plt+0x197fc>
   2b1fc:	ldr	r3, [sp, #20]
   2b200:	cmp	r3, r9
   2b204:	bls	2b22c <__assert_fail@plt+0x1988c>
   2b208:	ldr	r2, [sp, #8]
   2b20c:	ldr	r3, [sp, #32]
   2b210:	add	r3, r3, r2
   2b214:	mov	r2, #0
   2b218:	add	r3, r3, r9
   2b21c:	str	r3, [sp, #8]
   2b220:	str	r2, [sp, #24]
   2b224:	ldr	r2, [sp, #28]
   2b228:	b	2b118 <__assert_fail@plt+0x19778>
   2b22c:	ldr	r3, [sp, #16]
   2b230:	ldr	r2, [sp, #24]
   2b234:	ldr	r5, [sp, #48]	; 0x30
   2b238:	cmp	r3, r2
   2b23c:	bls	2b50c <__assert_fail@plt+0x19b6c>
   2b240:	ldr	r1, [sp, #8]
   2b244:	strd	r6, [sp, #40]	; 0x28
   2b248:	add	r9, r3, r1
   2b24c:	ldr	r1, [sp]
   2b250:	add	sl, r1, r3
   2b254:	ldr	r3, [sp, #12]
   2b258:	mov	r7, sl
   2b25c:	mov	sl, r2
   2b260:	ldr	fp, [r3]
   2b264:	ldr	r3, [sp, #4]
   2b268:	add	r9, r3, r9
   2b26c:	mov	r6, r9
   2b270:	b	2b280 <__assert_fail@plt+0x198e0>
   2b274:	cmp	sl, r5
   2b278:	mov	r5, r3
   2b27c:	beq	2b314 <__assert_fail@plt+0x19974>
   2b280:	ldrb	r4, [r7, #-1]!
   2b284:	add	r9, r5, #1
   2b288:	sxth	r8, r4
   2b28c:	lsl	r3, r8, #1
   2b290:	ldrh	r3, [fp, r3]
   2b294:	tst	r3, #256	; 0x100
   2b298:	beq	2b2a8 <__assert_fail@plt+0x19908>
   2b29c:	bl	11748 <__ctype_tolower_loc@plt>
   2b2a0:	ldr	r3, [r0]
   2b2a4:	ldr	r4, [r3, r8, lsl #2]
   2b2a8:	ldrb	r3, [r6, #-1]!
   2b2ac:	sxth	r8, r3
   2b2b0:	lsl	r0, r8, #1
   2b2b4:	ldrh	r0, [fp, r0]
   2b2b8:	tst	r0, #256	; 0x100
   2b2bc:	beq	2b2cc <__assert_fail@plt+0x1992c>
   2b2c0:	bl	11748 <__ctype_tolower_loc@plt>
   2b2c4:	ldr	r3, [r0]
   2b2c8:	ldr	r3, [r3, r8, lsl #2]
   2b2cc:	cmp	r4, r3
   2b2d0:	sub	r3, r5, #1
   2b2d4:	beq	2b274 <__assert_fail@plt+0x198d4>
   2b2d8:	ldrd	r6, [sp, #40]	; 0x28
   2b2dc:	mov	r2, r9
   2b2e0:	ldr	r3, [sp, #24]
   2b2e4:	add	r8, r3, #1
   2b2e8:	cmp	r8, r2
   2b2ec:	bhi	2b524 <__assert_fail@plt+0x19b84>
   2b2f0:	ldr	r3, [sp, #8]
   2b2f4:	ldr	r2, [sp, #36]	; 0x24
   2b2f8:	add	r3, r3, r2
   2b2fc:	str	r3, [sp, #8]
   2b300:	ldr	r3, [sp, #52]	; 0x34
   2b304:	str	r3, [sp, #24]
   2b308:	b	2b224 <__assert_fail@plt+0x19884>
   2b30c:	ldr	r0, [sp, #4]
   2b310:	b	2b070 <__assert_fail@plt+0x196d0>
   2b314:	ldr	r3, [sp, #24]
   2b318:	ldrd	r6, [sp, #40]	; 0x28
   2b31c:	mov	r2, r3
   2b320:	b	2b2e0 <__assert_fail@plt+0x19940>
   2b324:	ldr	r2, [sp, #16]
   2b328:	mov	r7, #0
   2b32c:	sub	r1, r2, #1
   2b330:	sub	r3, r4, r2
   2b334:	cmp	r3, r2
   2b338:	str	r1, [sp, #20]
   2b33c:	rsb	r1, r2, #1
   2b340:	movcc	r3, r2
   2b344:	add	r3, r3, #1
   2b348:	str	r1, [sp, #24]
   2b34c:	ldr	r1, [sp]
   2b350:	str	r3, [sp, #32]
   2b354:	str	r3, [sp, #60]	; 0x3c
   2b358:	add	r2, r1, r2
   2b35c:	str	r2, [sp, #36]	; 0x24
   2b360:	mov	r2, r5
   2b364:	ldr	r9, [sp, #4]
   2b368:	add	r5, r4, r7
   2b36c:	mov	r1, #0
   2b370:	str	r5, [sp, #8]
   2b374:	add	r0, r9, r2
   2b378:	sub	r2, r5, r2
   2b37c:	bl	1185c <memchr@plt>
   2b380:	clz	r0, r0
   2b384:	cmp	r5, #0
   2b388:	lsr	r0, r0, #5
   2b38c:	moveq	r0, #0
   2b390:	cmp	r0, #0
   2b394:	beq	2b08c <__assert_fail@plt+0x196ec>
   2b398:	ldr	r6, [sp, #16]
   2b39c:	cmp	r4, r6
   2b3a0:	bls	2b440 <__assert_fail@plt+0x19aa0>
   2b3a4:	ldr	r2, [sp]
   2b3a8:	ldr	r3, [sp, #20]
   2b3ac:	add	r8, r7, r3
   2b3b0:	add	sl, r2, r3
   2b3b4:	ldr	r3, [sp, #12]
   2b3b8:	add	r8, r9, r8
   2b3bc:	ldr	fp, [r3]
   2b3c0:	b	2b3d0 <__assert_fail@plt+0x19a30>
   2b3c4:	add	r6, r6, #1
   2b3c8:	cmp	r4, r6
   2b3cc:	bls	2b440 <__assert_fail@plt+0x19aa0>
   2b3d0:	ldrb	r3, [sl, #1]!
   2b3d4:	sxth	r9, r3
   2b3d8:	mov	r5, r3
   2b3dc:	lsl	r3, r9, #1
   2b3e0:	ldrh	r3, [fp, r3]
   2b3e4:	tst	r3, #256	; 0x100
   2b3e8:	beq	2b3f8 <__assert_fail@plt+0x19a58>
   2b3ec:	bl	11748 <__ctype_tolower_loc@plt>
   2b3f0:	ldr	r3, [r0]
   2b3f4:	ldr	r5, [r3, r9, lsl #2]
   2b3f8:	ldrb	r3, [r8, #1]!
   2b3fc:	sxth	r9, r3
   2b400:	lsl	r2, r9, #1
   2b404:	ldrh	r2, [fp, r2]
   2b408:	tst	r2, #256	; 0x100
   2b40c:	beq	2b41c <__assert_fail@plt+0x19a7c>
   2b410:	bl	11748 <__ctype_tolower_loc@plt>
   2b414:	ldr	r3, [r0]
   2b418:	ldr	r3, [r3, r9, lsl #2]
   2b41c:	cmp	r5, r3
   2b420:	beq	2b3c4 <__assert_fail@plt+0x19a24>
   2b424:	cmp	r4, r6
   2b428:	bls	2b440 <__assert_fail@plt+0x19aa0>
   2b42c:	ldr	r3, [sp, #24]
   2b430:	add	r7, r3, r7
   2b434:	add	r7, r7, r6
   2b438:	ldr	r2, [sp, #8]
   2b43c:	b	2b364 <__assert_fail@plt+0x199c4>
   2b440:	ldr	r3, [sp, #16]
   2b444:	cmp	r3, #0
   2b448:	beq	2b518 <__assert_fail@plt+0x19b78>
   2b44c:	add	r3, r3, r7
   2b450:	str	r4, [sp, #28]
   2b454:	ldr	r2, [sp, #12]
   2b458:	ldr	r8, [sp]
   2b45c:	ldr	r5, [sp, #36]	; 0x24
   2b460:	ldr	fp, [r2]
   2b464:	ldr	r2, [sp, #4]
   2b468:	add	sl, r2, r3
   2b46c:	b	2b47c <__assert_fail@plt+0x19adc>
   2b470:	cmn	r5, #1
   2b474:	mov	r5, r6
   2b478:	beq	2b518 <__assert_fail@plt+0x19b78>
   2b47c:	ldrb	r3, [r5, #-1]
   2b480:	sub	r6, r5, #1
   2b484:	sxth	r4, r3
   2b488:	mov	r9, r3
   2b48c:	lsl	r3, r4, #1
   2b490:	ldrh	r3, [fp, r3]
   2b494:	tst	r3, #256	; 0x100
   2b498:	beq	2b4a8 <__assert_fail@plt+0x19b08>
   2b49c:	bl	11748 <__ctype_tolower_loc@plt>
   2b4a0:	ldr	r3, [r0]
   2b4a4:	ldr	r9, [r3, r4, lsl #2]
   2b4a8:	ldrb	r3, [sl, #-1]!
   2b4ac:	sxth	r4, r3
   2b4b0:	lsl	r1, r4, #1
   2b4b4:	ldrh	r1, [fp, r1]
   2b4b8:	tst	r1, #256	; 0x100
   2b4bc:	beq	2b4cc <__assert_fail@plt+0x19b2c>
   2b4c0:	bl	11748 <__ctype_tolower_loc@plt>
   2b4c4:	ldr	r3, [r0]
   2b4c8:	ldr	r3, [r3, r4, lsl #2]
   2b4cc:	sub	r5, r5, #2
   2b4d0:	cmp	r9, r3
   2b4d4:	sub	r5, r5, r8
   2b4d8:	beq	2b470 <__assert_fail@plt+0x19ad0>
   2b4dc:	ldr	r4, [sp, #28]
   2b4e0:	ldr	r3, [sp, #32]
   2b4e4:	add	r7, r7, r3
   2b4e8:	b	2b438 <__assert_fail@plt+0x19a98>
   2b4ec:	mov	r3, #1
   2b4f0:	str	r5, [sp, #16]
   2b4f4:	str	r3, [sp, #36]	; 0x24
   2b4f8:	str	r3, [sp, #60]	; 0x3c
   2b4fc:	b	2b0b8 <__assert_fail@plt+0x19718>
   2b500:	cmp	r5, #0
   2b504:	movne	r0, #0
   2b508:	b	2b070 <__assert_fail@plt+0x196d0>
   2b50c:	ldr	r3, [sp, #16]
   2b510:	mov	r2, r3
   2b514:	b	2b2e0 <__assert_fail@plt+0x19940>
   2b518:	ldr	r3, [sp, #4]
   2b51c:	add	r0, r3, r7
   2b520:	b	2b070 <__assert_fail@plt+0x196d0>
   2b524:	ldrd	r2, [sp, #4]
   2b528:	add	r0, r3, r2
   2b52c:	b	2b070 <__assert_fail@plt+0x196d0>
   2b530:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2b534:	mvn	r4, #0
   2b538:	strd	r6, [sp, #8]
   2b53c:	mov	r6, #1
   2b540:	mov	ip, r6
   2b544:	str	r8, [sp, #16]
   2b548:	str	lr, [sp, #20]
   2b54c:	mov	lr, #0
   2b550:	add	r3, ip, lr
   2b554:	add	r5, r0, r4
   2b558:	cmp	r3, r1
   2b55c:	bcs	2b58c <__assert_fail@plt+0x19bec>
   2b560:	ldrb	r5, [r5, ip]
   2b564:	ldrb	r7, [r0, r3]
   2b568:	cmp	r7, r5
   2b56c:	bcs	2b604 <__assert_fail@plt+0x19c64>
   2b570:	mov	lr, r3
   2b574:	mov	ip, #1
   2b578:	sub	r6, r3, r4
   2b57c:	add	r3, ip, lr
   2b580:	cmp	r3, r1
   2b584:	add	r5, r0, r4
   2b588:	bcc	2b560 <__assert_fail@plt+0x19bc0>
   2b58c:	mov	r8, #1
   2b590:	mov	lr, #0
   2b594:	str	r6, [r2]
   2b598:	mov	ip, r8
   2b59c:	mvn	r5, #0
   2b5a0:	add	r3, ip, lr
   2b5a4:	add	r6, r0, r5
   2b5a8:	cmp	r1, r3
   2b5ac:	bls	2b5dc <__assert_fail@plt+0x19c3c>
   2b5b0:	ldrb	r6, [r6, ip]
   2b5b4:	ldrb	r7, [r0, r3]
   2b5b8:	cmp	r7, r6
   2b5bc:	bls	2b61c <__assert_fail@plt+0x19c7c>
   2b5c0:	mov	lr, r3
   2b5c4:	mov	ip, #1
   2b5c8:	sub	r8, r3, r5
   2b5cc:	add	r3, ip, lr
   2b5d0:	cmp	r1, r3
   2b5d4:	add	r6, r0, r5
   2b5d8:	bhi	2b5b0 <__assert_fail@plt+0x19c10>
   2b5dc:	add	r0, r4, #1
   2b5e0:	add	r5, r5, #1
   2b5e4:	ldrd	r6, [sp, #8]
   2b5e8:	cmp	r5, r0
   2b5ec:	movcs	r0, r5
   2b5f0:	ldrd	r4, [sp]
   2b5f4:	strcs	r8, [r2]
   2b5f8:	ldr	r8, [sp, #16]
   2b5fc:	add	sp, sp, #20
   2b600:	pop	{pc}		; (ldr pc, [sp], #4)
   2b604:	beq	2b634 <__assert_fail@plt+0x19c94>
   2b608:	mov	r6, #1
   2b60c:	mov	r4, lr
   2b610:	mov	ip, r6
   2b614:	add	lr, lr, r6
   2b618:	b	2b550 <__assert_fail@plt+0x19bb0>
   2b61c:	beq	2b648 <__assert_fail@plt+0x19ca8>
   2b620:	mov	r8, #1
   2b624:	mov	r5, lr
   2b628:	mov	ip, r8
   2b62c:	add	lr, lr, r8
   2b630:	b	2b5a0 <__assert_fail@plt+0x19c00>
   2b634:	cmp	ip, r6
   2b638:	add	ip, ip, #1
   2b63c:	moveq	lr, r3
   2b640:	moveq	ip, #1
   2b644:	b	2b550 <__assert_fail@plt+0x19bb0>
   2b648:	cmp	ip, r8
   2b64c:	add	ip, ip, #1
   2b650:	moveq	lr, r3
   2b654:	moveq	ip, #1
   2b658:	b	2b5a0 <__assert_fail@plt+0x19c00>
   2b65c:	cmp	r3, #2
   2b660:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2b664:	mov	r4, r3
   2b668:	strd	r6, [sp, #8]
   2b66c:	mov	r5, r0
   2b670:	strd	r8, [sp, #16]
   2b674:	strd	sl, [sp, #24]
   2b678:	mov	fp, r1
   2b67c:	mov	sl, r2
   2b680:	str	lr, [sp, #32]
   2b684:	sub	sp, sp, #1056	; 0x420
   2b688:	sub	sp, sp, #12
   2b68c:	bls	2ba6c <__assert_fail@plt+0x1a0cc>
   2b690:	add	r6, sp, #40	; 0x28
   2b694:	mov	r1, r3
   2b698:	sub	r2, r6, #4
   2b69c:	mov	r0, sl
   2b6a0:	bl	2b530 <__assert_fail@plt+0x19b90>
   2b6a4:	ldr	r3, [sp, #36]	; 0x24
   2b6a8:	str	r3, [sp]
   2b6ac:	str	r0, [sp, #4]
   2b6b0:	add	r2, sp, #1056	; 0x420
   2b6b4:	sub	r3, r6, #4
   2b6b8:	add	r2, r2, #4
   2b6bc:	str	r4, [r3, #4]!
   2b6c0:	cmp	r2, r3
   2b6c4:	bne	2b6bc <__assert_fail@plt+0x19d1c>
   2b6c8:	ldr	r3, [sp]
   2b6cc:	cmp	r4, #0
   2b6d0:	add	r1, sl, r3
   2b6d4:	beq	2b88c <__assert_fail@plt+0x19eec>
   2b6d8:	sub	r3, r4, #1
   2b6dc:	sub	r2, sl, #1
   2b6e0:	add	ip, sl, r3
   2b6e4:	str	r3, [sp, #8]
   2b6e8:	ldrb	r0, [r2, #1]!
   2b6ec:	add	lr, sp, #1056	; 0x420
   2b6f0:	add	lr, lr, #8
   2b6f4:	mvn	r3, r2
   2b6f8:	add	r0, lr, r0, lsl #2
   2b6fc:	cmp	r2, ip
   2b700:	add	r3, r3, r4
   2b704:	add	r3, sl, r3
   2b708:	str	r3, [r0, #-1024]	; 0xfffffc00
   2b70c:	bne	2b6e8 <__assert_fail@plt+0x19d48>
   2b710:	mov	r0, sl
   2b714:	ldr	r2, [sp, #4]
   2b718:	bl	1161c <memcmp@plt>
   2b71c:	cmp	r0, #0
   2b720:	beq	2b8d0 <__assert_fail@plt+0x19f30>
   2b724:	ldr	r2, [sp, #4]
   2b728:	sub	r8, r4, #2
   2b72c:	mov	r7, #0
   2b730:	add	r8, r8, sl
   2b734:	rsb	r9, sl, #1
   2b738:	sub	r3, r4, r2
   2b73c:	sub	r1, r2, #1
   2b740:	cmp	r3, r2
   2b744:	movcc	r3, r2
   2b748:	str	r1, [sp, #16]
   2b74c:	add	r1, sl, r1
   2b750:	add	r3, r3, #1
   2b754:	str	r1, [sp, #12]
   2b758:	str	r3, [sp, #20]
   2b75c:	sub	r3, r4, #1
   2b760:	str	r3, [sp, #4]
   2b764:	mov	r3, r2
   2b768:	add	r2, sl, r2
   2b76c:	str	r2, [sp]
   2b770:	rsb	r2, r3, #1
   2b774:	str	r2, [sp, #8]
   2b778:	mov	r2, fp
   2b77c:	mov	fp, r3
   2b780:	b	2b788 <__assert_fail@plt+0x19de8>
   2b784:	mov	r2, r6
   2b788:	add	r6, r7, r4
   2b78c:	add	r0, r5, r2
   2b790:	mov	r1, #0
   2b794:	sub	r2, r6, r2
   2b798:	bl	1185c <memchr@plt>
   2b79c:	adds	r2, r6, #0
   2b7a0:	movne	r2, #1
   2b7a4:	cmp	r0, #0
   2b7a8:	moveq	r0, r2
   2b7ac:	movne	r0, #0
   2b7b0:	cmp	r0, #0
   2b7b4:	beq	2b8a0 <__assert_fail@plt+0x19f00>
   2b7b8:	add	r2, r5, r6
   2b7bc:	add	r3, sp, #1056	; 0x420
   2b7c0:	ldrb	r2, [r2, #-1]
   2b7c4:	add	r3, r3, #8
   2b7c8:	add	r2, r3, r2, lsl #2
   2b7cc:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   2b7d0:	cmp	r2, #0
   2b7d4:	addne	r7, r7, r2
   2b7d8:	bne	2b784 <__assert_fail@plt+0x19de4>
   2b7dc:	ldr	r3, [sp, #4]
   2b7e0:	cmp	fp, r3
   2b7e4:	bcs	2b82c <__assert_fail@plt+0x19e8c>
   2b7e8:	ldr	r3, [sp]
   2b7ec:	add	r2, r7, fp
   2b7f0:	add	r1, r5, r2
   2b7f4:	ldrb	r2, [r5, r2]
   2b7f8:	ldrb	r0, [r3]
   2b7fc:	cmp	r2, r0
   2b800:	movne	lr, fp
   2b804:	bne	2b87c <__assert_fail@plt+0x19edc>
   2b808:	ldr	r2, [sp]
   2b80c:	b	2b820 <__assert_fail@plt+0x19e80>
   2b810:	ldrb	r0, [r2, #1]!
   2b814:	ldrb	r3, [r1, #1]!
   2b818:	cmp	r0, r3
   2b81c:	bne	2b87c <__assert_fail@plt+0x19edc>
   2b820:	cmp	r8, r2
   2b824:	add	lr, r9, r2
   2b828:	bne	2b810 <__assert_fail@plt+0x19e70>
   2b82c:	ldr	r3, [sp, #16]
   2b830:	cmn	r3, #1
   2b834:	beq	2b874 <__assert_fail@plt+0x19ed4>
   2b838:	add	r2, r7, r3
   2b83c:	ldr	r3, [sp, #12]
   2b840:	add	r1, r5, r2
   2b844:	ldrb	r2, [r5, r2]
   2b848:	ldrb	r0, [r3]
   2b84c:	cmp	r2, r0
   2b850:	ldreq	r2, [sp, #12]
   2b854:	beq	2b86c <__assert_fail@plt+0x19ecc>
   2b858:	b	2b8c4 <__assert_fail@plt+0x19f24>
   2b85c:	ldrb	r0, [r2, #-1]!
   2b860:	ldrb	r3, [r1, #-1]!
   2b864:	cmp	r0, r3
   2b868:	bne	2b8c4 <__assert_fail@plt+0x19f24>
   2b86c:	cmp	sl, r2
   2b870:	bne	2b85c <__assert_fail@plt+0x19ebc>
   2b874:	add	r0, r5, r7
   2b878:	b	2b8a4 <__assert_fail@plt+0x19f04>
   2b87c:	ldr	r3, [sp, #8]
   2b880:	add	r7, r3, r7
   2b884:	add	r7, lr, r7
   2b888:	b	2b784 <__assert_fail@plt+0x19de4>
   2b88c:	mov	r0, sl
   2b890:	ldr	r2, [sp, #4]
   2b894:	bl	1161c <memcmp@plt>
   2b898:	cmp	r0, #0
   2b89c:	bne	2b724 <__assert_fail@plt+0x19d84>
   2b8a0:	mov	r0, #0
   2b8a4:	add	sp, sp, #1056	; 0x420
   2b8a8:	add	sp, sp, #12
   2b8ac:	ldrd	r4, [sp]
   2b8b0:	ldrd	r6, [sp, #8]
   2b8b4:	ldrd	r8, [sp, #16]
   2b8b8:	ldrd	sl, [sp, #24]
   2b8bc:	add	sp, sp, #32
   2b8c0:	pop	{pc}		; (ldr pc, [sp], #4)
   2b8c4:	ldr	r3, [sp, #20]
   2b8c8:	add	r7, r7, r3
   2b8cc:	b	2b784 <__assert_fail@plt+0x19de4>
   2b8d0:	ldr	r2, [sp, #4]
   2b8d4:	sub	r8, r4, #2
   2b8d8:	rsb	r9, sl, #1
   2b8dc:	add	r8, sl, r8
   2b8e0:	mov	r7, r0
   2b8e4:	str	sl, [sp, #12]
   2b8e8:	sub	r3, r2, #1
   2b8ec:	str	r3, [sp, #28]
   2b8f0:	add	r3, sl, r3
   2b8f4:	mov	sl, r0
   2b8f8:	str	r3, [sp, #24]
   2b8fc:	ldr	r3, [sp]
   2b900:	sub	r3, r4, r3
   2b904:	str	r3, [sp, #20]
   2b908:	rsb	r3, r2, #1
   2b90c:	mov	r2, fp
   2b910:	str	r3, [sp, #16]
   2b914:	b	2b934 <__assert_fail@plt+0x19f94>
   2b918:	ldr	r2, [sp]
   2b91c:	cmp	sl, #0
   2b920:	cmpne	r3, r2
   2b924:	mov	sl, #0
   2b928:	ldrcc	r3, [sp, #20]
   2b92c:	add	r7, r7, r3
   2b930:	mov	r2, r6
   2b934:	add	r6, r7, r4
   2b938:	add	r0, r5, r2
   2b93c:	mov	r1, #0
   2b940:	sub	r2, r6, r2
   2b944:	bl	1185c <memchr@plt>
   2b948:	adds	r3, r6, #0
   2b94c:	movne	r3, #1
   2b950:	cmp	r0, #0
   2b954:	moveq	r0, r3
   2b958:	movne	r0, #0
   2b95c:	cmp	r0, #0
   2b960:	beq	2b8a0 <__assert_fail@plt+0x19f00>
   2b964:	add	r3, r5, r6
   2b968:	add	r2, sp, #1056	; 0x420
   2b96c:	ldrb	r3, [r3, #-1]
   2b970:	add	r2, r2, #8
   2b974:	add	r3, r2, r3, lsl #2
   2b978:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   2b97c:	cmp	r3, #0
   2b980:	bne	2b918 <__assert_fail@plt+0x19f78>
   2b984:	ldr	r3, [sp, #4]
   2b988:	cmp	sl, r3
   2b98c:	movcc	r0, r3
   2b990:	ldr	r3, [sp, #8]
   2b994:	movcs	r0, sl
   2b998:	cmp	r0, r3
   2b99c:	bcs	2b9e0 <__assert_fail@plt+0x1a040>
   2b9a0:	ldr	r3, [sp, #12]
   2b9a4:	add	r1, r7, r0
   2b9a8:	add	r2, r5, r1
   2b9ac:	ldrb	r1, [r5, r1]
   2b9b0:	ldrb	ip, [r3, r0]
   2b9b4:	add	r3, r3, r0
   2b9b8:	cmp	ip, r1
   2b9bc:	beq	2b9d4 <__assert_fail@plt+0x1a034>
   2b9c0:	b	2ba58 <__assert_fail@plt+0x1a0b8>
   2b9c4:	ldrb	ip, [r3, #1]!
   2b9c8:	ldrb	r1, [r2, #1]!
   2b9cc:	cmp	ip, r1
   2b9d0:	bne	2ba58 <__assert_fail@plt+0x1a0b8>
   2b9d4:	cmp	r8, r3
   2b9d8:	add	r0, r9, r3
   2b9dc:	bne	2b9c4 <__assert_fail@plt+0x1a024>
   2b9e0:	ldr	r3, [sp, #4]
   2b9e4:	cmp	sl, r3
   2b9e8:	bcs	2ba88 <__assert_fail@plt+0x1a0e8>
   2b9ec:	ldr	r3, [sp, #28]
   2b9f0:	add	r2, r7, r3
   2b9f4:	ldr	r3, [sp, #24]
   2b9f8:	ldrb	r1, [r3]
   2b9fc:	add	r3, r5, r2
   2ba00:	ldrb	r2, [r5, r2]
   2ba04:	cmp	r1, r2
   2ba08:	bne	2ba88 <__assert_fail@plt+0x1a0e8>
   2ba0c:	add	ip, r7, sl
   2ba10:	add	fp, r5, r7
   2ba14:	ldr	r2, [sp, #24]
   2ba18:	add	ip, ip, r5
   2ba1c:	b	2ba30 <__assert_fail@plt+0x1a090>
   2ba20:	ldrb	r0, [r2, #-1]!
   2ba24:	ldrb	r1, [r3, #-1]!
   2ba28:	cmp	r0, r1
   2ba2c:	bne	2ba3c <__assert_fail@plt+0x1a09c>
   2ba30:	cmp	ip, r3
   2ba34:	sub	lr, r3, fp
   2ba38:	bne	2ba20 <__assert_fail@plt+0x1a080>
   2ba3c:	add	sl, sl, #1
   2ba40:	cmp	sl, lr
   2ba44:	bhi	2b874 <__assert_fail@plt+0x19ed4>
   2ba48:	ldr	r3, [sp]
   2ba4c:	ldr	sl, [sp, #20]
   2ba50:	add	r7, r7, r3
   2ba54:	b	2b930 <__assert_fail@plt+0x19f90>
   2ba58:	ldr	r3, [sp, #16]
   2ba5c:	mov	sl, #0
   2ba60:	add	r7, r3, r7
   2ba64:	add	r7, r0, r7
   2ba68:	b	2b930 <__assert_fail@plt+0x19f90>
   2ba6c:	mov	r3, #1
   2ba70:	sub	r2, r4, #1
   2ba74:	add	r6, sp, #40	; 0x28
   2ba78:	str	r3, [sp]
   2ba7c:	str	r2, [sp, #4]
   2ba80:	str	r3, [sp, #36]	; 0x24
   2ba84:	b	2b6b0 <__assert_fail@plt+0x19d10>
   2ba88:	ldr	lr, [sp, #4]
   2ba8c:	b	2ba3c <__assert_fail@plt+0x1a09c>
   2ba90:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2ba94:	strd	r6, [sp, #8]
   2ba98:	strd	r8, [sp, #16]
   2ba9c:	strd	sl, [sp, #24]
   2baa0:	str	lr, [sp, #32]
   2baa4:	sub	sp, sp, #44	; 0x2c
   2baa8:	ldrb	r4, [r0]
   2baac:	ldrb	r3, [r1]
   2bab0:	cmp	r4, #0
   2bab4:	beq	2be70 <__assert_fail@plt+0x1a4d0>
   2bab8:	cmp	r3, #0
   2babc:	beq	2bb88 <__assert_fail@plt+0x1a1e8>
   2bac0:	mov	r8, r0
   2bac4:	add	r2, r1, #1
   2bac8:	mov	ip, r3
   2bacc:	mov	lr, #1
   2bad0:	b	2badc <__assert_fail@plt+0x1a13c>
   2bad4:	cmp	ip, #0
   2bad8:	beq	2bb04 <__assert_fail@plt+0x1a164>
   2badc:	cmp	ip, r4
   2bae0:	movne	lr, #0
   2bae4:	andeq	lr, lr, #1
   2bae8:	ldrb	r4, [r8, #1]!
   2baec:	mov	r5, r2
   2baf0:	ldrb	ip, [r2], #1
   2baf4:	cmp	r4, #0
   2baf8:	bne	2bad4 <__assert_fail@plt+0x1a134>
   2bafc:	cmp	ip, #0
   2bb00:	bne	2bb68 <__assert_fail@plt+0x1a1c8>
   2bb04:	cmp	lr, #0
   2bb08:	bne	2bb88 <__assert_fail@plt+0x1a1e8>
   2bb0c:	mov	r7, r1
   2bb10:	mov	r6, r0
   2bb14:	mov	r1, r3
   2bb18:	add	r0, r0, #1
   2bb1c:	bl	117b4 <strchr@plt>
   2bb20:	subs	r4, r0, #0
   2bb24:	sub	r7, r5, r7
   2bb28:	beq	2bb68 <__assert_fail@plt+0x1a1c8>
   2bb2c:	cmp	r7, #1
   2bb30:	beq	2bb68 <__assert_fail@plt+0x1a1c8>
   2bb34:	add	r6, r6, r7
   2bb38:	sub	r5, r5, r7
   2bb3c:	cmp	r6, r4
   2bb40:	subcs	r6, r6, r4
   2bb44:	movcc	r6, #1
   2bb48:	cmp	r7, #31
   2bb4c:	bls	2bb90 <__assert_fail@plt+0x1a1f0>
   2bb50:	mov	r0, r4
   2bb54:	mov	r3, r7
   2bb58:	mov	r2, r5
   2bb5c:	mov	r1, r6
   2bb60:	bl	2b65c <__assert_fail@plt+0x19cbc>
   2bb64:	mov	r4, r0
   2bb68:	mov	r0, r4
   2bb6c:	add	sp, sp, #44	; 0x2c
   2bb70:	ldrd	r4, [sp]
   2bb74:	ldrd	r6, [sp, #8]
   2bb78:	ldrd	r8, [sp, #16]
   2bb7c:	ldrd	sl, [sp, #24]
   2bb80:	add	sp, sp, #32
   2bb84:	pop	{pc}		; (ldr pc, [sp], #4)
   2bb88:	mov	r4, r0
   2bb8c:	b	2bb68 <__assert_fail@plt+0x1a1c8>
   2bb90:	cmp	r7, #2
   2bb94:	bls	2be80 <__assert_fail@plt+0x1a4e0>
   2bb98:	add	r2, sp, #36	; 0x24
   2bb9c:	mov	r1, r7
   2bba0:	mov	r0, r5
   2bba4:	bl	2b530 <__assert_fail@plt+0x19b90>
   2bba8:	ldr	r3, [sp, #36]	; 0x24
   2bbac:	mov	r8, r0
   2bbb0:	str	r3, [sp, #16]
   2bbb4:	ldr	r3, [sp, #16]
   2bbb8:	mov	r2, r8
   2bbbc:	mov	r0, r5
   2bbc0:	add	r1, r5, r3
   2bbc4:	bl	1161c <memcmp@plt>
   2bbc8:	cmp	r0, #0
   2bbcc:	bne	2bd30 <__assert_fail@plt+0x1a390>
   2bbd0:	sub	r2, r8, #1
   2bbd4:	mov	r3, r8
   2bbd8:	str	r7, [sp, #4]
   2bbdc:	sub	r8, r7, #1
   2bbe0:	rsb	r9, r5, #1
   2bbe4:	str	r5, [sp, #8]
   2bbe8:	str	r2, [sp, #20]
   2bbec:	add	r2, r5, r2
   2bbf0:	add	r8, r8, r5
   2bbf4:	mov	sl, r0
   2bbf8:	mov	r5, r0
   2bbfc:	str	r2, [sp, #28]
   2bc00:	ldr	r2, [sp, #16]
   2bc04:	sub	r2, r7, r2
   2bc08:	mov	r7, r3
   2bc0c:	str	r2, [sp, #24]
   2bc10:	rsb	r2, r3, #1
   2bc14:	str	r2, [sp, #12]
   2bc18:	mov	r2, r6
   2bc1c:	ldr	r3, [sp, #4]
   2bc20:	add	r0, r4, r2
   2bc24:	mov	r1, #0
   2bc28:	add	fp, r3, sl
   2bc2c:	sub	r2, fp, r2
   2bc30:	bl	1185c <memchr@plt>
   2bc34:	clz	r0, r0
   2bc38:	cmp	fp, #0
   2bc3c:	lsr	r0, r0, #5
   2bc40:	moveq	r0, #0
   2bc44:	cmp	r0, #0
   2bc48:	beq	2bb88 <__assert_fail@plt+0x1a1e8>
   2bc4c:	ldr	r3, [sp, #4]
   2bc50:	cmp	r7, r5
   2bc54:	movcs	r0, r7
   2bc58:	movcc	r0, r5
   2bc5c:	cmp	r3, r0
   2bc60:	bls	2bca4 <__assert_fail@plt+0x1a304>
   2bc64:	ldr	r3, [sp, #8]
   2bc68:	add	r1, r0, sl
   2bc6c:	add	r2, r4, r1
   2bc70:	ldrb	r1, [r4, r1]
   2bc74:	ldrb	ip, [r3, r0]
   2bc78:	add	r3, r3, r0
   2bc7c:	cmp	r1, ip
   2bc80:	beq	2bc98 <__assert_fail@plt+0x1a2f8>
   2bc84:	b	2bd1c <__assert_fail@plt+0x1a37c>
   2bc88:	ldrb	ip, [r3, #1]!
   2bc8c:	ldrb	r1, [r2, #1]!
   2bc90:	cmp	ip, r1
   2bc94:	bne	2bd1c <__assert_fail@plt+0x1a37c>
   2bc98:	cmp	r8, r3
   2bc9c:	add	r0, r9, r3
   2bca0:	bne	2bc88 <__assert_fail@plt+0x1a2e8>
   2bca4:	cmp	r7, r5
   2bca8:	bls	2be98 <__assert_fail@plt+0x1a4f8>
   2bcac:	ldr	r3, [sp, #20]
   2bcb0:	ldr	r0, [sp, #28]
   2bcb4:	add	r2, sl, r3
   2bcb8:	add	r3, r4, r2
   2bcbc:	ldrb	r2, [r4, r2]
   2bcc0:	ldrb	r1, [r0]
   2bcc4:	cmp	r1, r2
   2bcc8:	bne	2be98 <__assert_fail@plt+0x1a4f8>
   2bccc:	add	ip, r5, sl
   2bcd0:	mov	r2, r0
   2bcd4:	add	ip, ip, r4
   2bcd8:	add	r6, r4, sl
   2bcdc:	b	2bcf0 <__assert_fail@plt+0x1a350>
   2bce0:	ldrb	r0, [r2, #-1]!
   2bce4:	ldrb	r1, [r3, #-1]!
   2bce8:	cmp	r0, r1
   2bcec:	bne	2bcfc <__assert_fail@plt+0x1a35c>
   2bcf0:	cmp	ip, r3
   2bcf4:	sub	lr, r3, r6
   2bcf8:	bne	2bce0 <__assert_fail@plt+0x1a340>
   2bcfc:	add	r5, r5, #1
   2bd00:	cmp	r5, lr
   2bd04:	bhi	2be48 <__assert_fail@plt+0x1a4a8>
   2bd08:	ldr	r3, [sp, #16]
   2bd0c:	ldr	r5, [sp, #24]
   2bd10:	add	sl, sl, r3
   2bd14:	mov	r2, fp
   2bd18:	b	2bc1c <__assert_fail@plt+0x1a27c>
   2bd1c:	ldr	r3, [sp, #12]
   2bd20:	mov	r5, #0
   2bd24:	add	sl, r3, sl
   2bd28:	add	sl, r0, sl
   2bd2c:	b	2bd14 <__assert_fail@plt+0x1a374>
   2bd30:	sub	r3, r7, r8
   2bd34:	mov	r2, r8
   2bd38:	cmp	r3, r8
   2bd3c:	sub	r1, r8, #1
   2bd40:	movcc	r3, r2
   2bd44:	sub	r8, r7, #1
   2bd48:	add	r3, r3, #1
   2bd4c:	add	r8, r8, r5
   2bd50:	str	r1, [sp, #12]
   2bd54:	mov	sl, #0
   2bd58:	add	r1, r5, r1
   2bd5c:	str	r3, [sp, #16]
   2bd60:	mov	r3, r2
   2bd64:	add	r2, r5, r2
   2bd68:	rsb	r9, r5, #1
   2bd6c:	str	r2, [sp, #4]
   2bd70:	rsb	r2, r3, #1
   2bd74:	str	r2, [sp, #8]
   2bd78:	mov	r2, r6
   2bd7c:	mov	r6, r3
   2bd80:	str	r1, [sp, #20]
   2bd84:	add	fp, r7, sl
   2bd88:	add	r0, r4, r2
   2bd8c:	mov	r1, #0
   2bd90:	sub	r2, fp, r2
   2bd94:	bl	1185c <memchr@plt>
   2bd98:	clz	r0, r0
   2bd9c:	cmp	fp, #0
   2bda0:	lsr	r0, r0, #5
   2bda4:	moveq	r0, #0
   2bda8:	cmp	r0, #0
   2bdac:	beq	2bb88 <__assert_fail@plt+0x1a1e8>
   2bdb0:	cmp	r7, r6
   2bdb4:	bls	2bdfc <__assert_fail@plt+0x1a45c>
   2bdb8:	ldr	r3, [sp, #4]
   2bdbc:	add	r2, r6, sl
   2bdc0:	add	r1, r4, r2
   2bdc4:	ldrb	r2, [r4, r2]
   2bdc8:	ldrb	r0, [r3]
   2bdcc:	cmp	r2, r0
   2bdd0:	movne	lr, r6
   2bdd4:	bne	2be50 <__assert_fail@plt+0x1a4b0>
   2bdd8:	ldr	r2, [sp, #4]
   2bddc:	b	2bdf0 <__assert_fail@plt+0x1a450>
   2bde0:	ldrb	r0, [r2, #1]!
   2bde4:	ldrb	r3, [r1, #1]!
   2bde8:	cmp	r0, r3
   2bdec:	bne	2be50 <__assert_fail@plt+0x1a4b0>
   2bdf0:	cmp	r2, r8
   2bdf4:	add	lr, r9, r2
   2bdf8:	bne	2bde0 <__assert_fail@plt+0x1a440>
   2bdfc:	ldr	r3, [sp, #12]
   2be00:	cmn	r3, #1
   2be04:	beq	2be48 <__assert_fail@plt+0x1a4a8>
   2be08:	ldr	r3, [sp, #12]
   2be0c:	add	r2, sl, r3
   2be10:	ldr	r3, [sp, #20]
   2be14:	add	r1, r4, r2
   2be18:	ldrb	r2, [r4, r2]
   2be1c:	ldrb	r0, [r3]
   2be20:	cmp	r2, r0
   2be24:	bne	2be64 <__assert_fail@plt+0x1a4c4>
   2be28:	mov	r2, r3
   2be2c:	b	2be40 <__assert_fail@plt+0x1a4a0>
   2be30:	ldrb	r0, [r2, #-1]!
   2be34:	ldrb	r3, [r1, #-1]!
   2be38:	cmp	r0, r3
   2be3c:	bne	2be64 <__assert_fail@plt+0x1a4c4>
   2be40:	cmp	r5, r2
   2be44:	bne	2be30 <__assert_fail@plt+0x1a490>
   2be48:	add	r4, r4, sl
   2be4c:	b	2bb68 <__assert_fail@plt+0x1a1c8>
   2be50:	ldr	r3, [sp, #8]
   2be54:	add	sl, r3, sl
   2be58:	add	sl, lr, sl
   2be5c:	mov	r2, fp
   2be60:	b	2bd84 <__assert_fail@plt+0x1a3e4>
   2be64:	ldr	r3, [sp, #16]
   2be68:	add	sl, sl, r3
   2be6c:	b	2be5c <__assert_fail@plt+0x1a4bc>
   2be70:	cmp	r3, #0
   2be74:	moveq	r4, r0
   2be78:	movne	r4, #0
   2be7c:	b	2bb68 <__assert_fail@plt+0x1a1c8>
   2be80:	mov	r3, #1
   2be84:	sub	r2, r7, #1
   2be88:	mov	r8, r2
   2be8c:	str	r3, [sp, #16]
   2be90:	str	r3, [sp, #36]	; 0x24
   2be94:	b	2bbb4 <__assert_fail@plt+0x1a214>
   2be98:	mov	lr, r7
   2be9c:	b	2bcfc <__assert_fail@plt+0x1a35c>
   2bea0:	movw	r3, #61884	; 0xf1bc
   2bea4:	movt	r3, #3
   2bea8:	str	r4, [sp, #-8]!
   2beac:	ldr	r0, [r3]
   2beb0:	str	lr, [sp, #4]
   2beb4:	bl	11784 <exit@plt>
   2beb8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2bebc:	mov	r5, r1
   2bec0:	mov	r4, r2
   2bec4:	strd	r6, [sp, #8]
   2bec8:	mov	r7, r3
   2becc:	strd	r8, [sp, #16]
   2bed0:	strd	sl, [sp, #24]
   2bed4:	mov	sl, r0
   2bed8:	str	lr, [sp, #32]
   2bedc:	sub	sp, sp, #12
   2bee0:	str	r2, [sp]
   2bee4:	bl	117a8 <strlen@plt>
   2bee8:	ldr	fp, [r5]
   2beec:	cmp	fp, #0
   2bef0:	beq	2bfc0 <__assert_fail@plt+0x1a620>
   2bef4:	mov	r6, #0
   2bef8:	mov	r8, r0
   2befc:	mvn	r9, #0
   2bf00:	str	r6, [sp, #4]
   2bf04:	b	2bf30 <__assert_fail@plt+0x1a590>
   2bf08:	bl	1161c <memcmp@plt>
   2bf0c:	ldr	r3, [sp, #4]
   2bf10:	cmp	r0, #0
   2bf14:	movne	r3, #1
   2bf18:	str	r3, [sp, #4]
   2bf1c:	ldr	fp, [r5, #4]!
   2bf20:	add	r6, r6, #1
   2bf24:	add	r4, r4, r7
   2bf28:	cmp	fp, #0
   2bf2c:	beq	2bf8c <__assert_fail@plt+0x1a5ec>
   2bf30:	mov	r2, r8
   2bf34:	mov	r1, sl
   2bf38:	mov	r0, fp
   2bf3c:	bl	11958 <strncmp@plt>
   2bf40:	cmp	r0, #0
   2bf44:	mov	r0, fp
   2bf48:	bne	2bf1c <__assert_fail@plt+0x1a57c>
   2bf4c:	bl	117a8 <strlen@plt>
   2bf50:	ldr	r3, [sp]
   2bf54:	cmp	r0, r8
   2bf58:	mov	r2, r7
   2bf5c:	mov	r1, r4
   2bf60:	mla	r0, r7, r9, r3
   2bf64:	beq	2bfb8 <__assert_fail@plt+0x1a618>
   2bf68:	cmn	r9, #1
   2bf6c:	moveq	r9, r6
   2bf70:	beq	2bf1c <__assert_fail@plt+0x1a57c>
   2bf74:	ldr	r3, [sp]
   2bf78:	cmp	r3, #0
   2bf7c:	bne	2bf08 <__assert_fail@plt+0x1a568>
   2bf80:	mov	r3, #1
   2bf84:	str	r3, [sp, #4]
   2bf88:	b	2bf1c <__assert_fail@plt+0x1a57c>
   2bf8c:	ldr	r3, [sp, #4]
   2bf90:	cmp	r3, #0
   2bf94:	mvnne	r9, #1
   2bf98:	mov	r0, r9
   2bf9c:	add	sp, sp, #12
   2bfa0:	ldrd	r4, [sp]
   2bfa4:	ldrd	r6, [sp, #8]
   2bfa8:	ldrd	r8, [sp, #16]
   2bfac:	ldrd	sl, [sp, #24]
   2bfb0:	add	sp, sp, #32
   2bfb4:	pop	{pc}		; (ldr pc, [sp], #4)
   2bfb8:	mov	r9, r6
   2bfbc:	b	2bf98 <__assert_fail@plt+0x1a5f8>
   2bfc0:	mvn	r9, #0
   2bfc4:	b	2bf98 <__assert_fail@plt+0x1a5f8>
   2bfc8:	cmn	r2, #1
   2bfcc:	strd	r4, [sp, #-16]!
   2bfd0:	mov	r5, r1
   2bfd4:	movweq	r1, #58832	; 0xe5d0
   2bfd8:	movwne	r1, #58860	; 0xe5ec
   2bfdc:	str	r6, [sp, #8]
   2bfe0:	movteq	r1, #2
   2bfe4:	movtne	r1, #2
   2bfe8:	str	lr, [sp, #12]
   2bfec:	mov	r6, r0
   2bff0:	sub	sp, sp, #8
   2bff4:	mov	r2, #5
   2bff8:	mov	r0, #0
   2bffc:	bl	11628 <dcgettext@plt>
   2c000:	mov	r4, r0
   2c004:	mov	r2, r5
   2c008:	mov	r1, #8
   2c00c:	mov	r0, #0
   2c010:	bl	1abd0 <__assert_fail@plt+0x9230>
   2c014:	mov	r5, r0
   2c018:	mov	r1, r6
   2c01c:	mov	r0, #1
   2c020:	bl	1af00 <__assert_fail@plt+0x9560>
   2c024:	mov	r1, #0
   2c028:	mov	r3, r5
   2c02c:	str	r0, [sp]
   2c030:	mov	r2, r4
   2c034:	mov	r0, r1
   2c038:	bl	116d0 <error@plt>
   2c03c:	add	sp, sp, #8
   2c040:	ldrd	r4, [sp]
   2c044:	ldr	r6, [sp, #8]
   2c048:	add	sp, sp, #12
   2c04c:	pop	{pc}		; (ldr pc, [sp], #4)
   2c050:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2c054:	mov	r4, r1
   2c058:	movw	r1, #58892	; 0xe60c
   2c05c:	movt	r1, #2
   2c060:	strd	r6, [sp, #8]
   2c064:	mov	r6, r0
   2c068:	mov	r7, r2
   2c06c:	mov	r0, #0
   2c070:	strd	r8, [sp, #16]
   2c074:	mov	r2, #5
   2c078:	strd	sl, [sp, #24]
   2c07c:	movw	sl, #61976	; 0xf218
   2c080:	movt	sl, #3
   2c084:	str	lr, [sp, #32]
   2c088:	sub	sp, sp, #12
   2c08c:	bl	11628 <dcgettext@plt>
   2c090:	ldr	r1, [sl]
   2c094:	bl	1194c <fputs@plt>
   2c098:	ldr	fp, [r6]
   2c09c:	cmp	fp, #0
   2c0a0:	beq	2c138 <__assert_fail@plt+0x1a798>
   2c0a4:	movw	r3, #58916	; 0xe624
   2c0a8:	movt	r3, #2
   2c0ac:	mov	r9, #0
   2c0b0:	str	r3, [sp]
   2c0b4:	movw	r3, #58924	; 0xe62c
   2c0b8:	movt	r3, #2
   2c0bc:	mov	r5, r9
   2c0c0:	str	r3, [sp, #4]
   2c0c4:	b	2c0f8 <__assert_fail@plt+0x1a758>
   2c0c8:	mov	r0, fp
   2c0cc:	mov	r9, r4
   2c0d0:	bl	1af10 <__assert_fail@plt+0x9570>
   2c0d4:	mov	r2, r0
   2c0d8:	mov	r0, r8
   2c0dc:	ldr	r1, [sp]
   2c0e0:	bl	117c0 <fprintf@plt>
   2c0e4:	ldr	fp, [r6, #4]!
   2c0e8:	add	r5, r5, #1
   2c0ec:	add	r4, r4, r7
   2c0f0:	cmp	fp, #0
   2c0f4:	beq	2c138 <__assert_fail@plt+0x1a798>
   2c0f8:	cmp	r5, #0
   2c0fc:	mov	r1, r4
   2c100:	ldr	r8, [sl]
   2c104:	mov	r2, r7
   2c108:	mov	r0, r9
   2c10c:	beq	2c0c8 <__assert_fail@plt+0x1a728>
   2c110:	bl	1161c <memcmp@plt>
   2c114:	cmp	r0, #0
   2c118:	bne	2c0c8 <__assert_fail@plt+0x1a728>
   2c11c:	mov	r0, fp
   2c120:	bl	1af10 <__assert_fail@plt+0x9570>
   2c124:	mov	r2, r0
   2c128:	mov	r0, r8
   2c12c:	ldr	r1, [sp, #4]
   2c130:	bl	117c0 <fprintf@plt>
   2c134:	b	2c0e4 <__assert_fail@plt+0x1a744>
   2c138:	ldr	r1, [sl]
   2c13c:	mov	r0, #10
   2c140:	add	sp, sp, #12
   2c144:	ldrd	r4, [sp]
   2c148:	ldrd	r6, [sp, #8]
   2c14c:	ldrd	r8, [sp, #16]
   2c150:	ldrd	sl, [sp, #24]
   2c154:	ldr	lr, [sp, #32]
   2c158:	add	sp, sp, #36	; 0x24
   2c15c:	b	118f8 <putc@plt>
   2c160:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2c164:	mov	r4, r2
   2c168:	mov	r5, r3
   2c16c:	strd	r6, [sp, #8]
   2c170:	mov	r6, r1
   2c174:	mov	r2, r3
   2c178:	mov	r7, r0
   2c17c:	mov	r1, r4
   2c180:	ldr	r3, [sp, #24]
   2c184:	mov	r0, r6
   2c188:	str	r8, [sp, #16]
   2c18c:	str	lr, [sp, #20]
   2c190:	bl	2beb8 <__assert_fail@plt+0x1a518>
   2c194:	cmp	r0, #0
   2c198:	blt	2c1b0 <__assert_fail@plt+0x1a810>
   2c19c:	ldrd	r4, [sp]
   2c1a0:	ldrd	r6, [sp, #8]
   2c1a4:	ldr	r8, [sp, #16]
   2c1a8:	add	sp, sp, #20
   2c1ac:	pop	{pc}		; (ldr pc, [sp], #4)
   2c1b0:	mov	r2, r0
   2c1b4:	mov	r1, r6
   2c1b8:	mov	r0, r7
   2c1bc:	bl	2bfc8 <__assert_fail@plt+0x1a628>
   2c1c0:	mov	r0, r4
   2c1c4:	mov	r1, r5
   2c1c8:	ldr	r2, [sp, #24]
   2c1cc:	bl	2c050 <__assert_fail@plt+0x1a6b0>
   2c1d0:	ldr	r3, [sp, #28]
   2c1d4:	blx	r3
   2c1d8:	mvn	r0, #0
   2c1dc:	b	2c19c <__assert_fail@plt+0x1a7fc>
   2c1e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2c1e4:	strd	r6, [sp, #8]
   2c1e8:	ldr	r7, [r1]
   2c1ec:	str	r8, [sp, #16]
   2c1f0:	str	lr, [sp, #20]
   2c1f4:	cmp	r7, #0
   2c1f8:	beq	2c238 <__assert_fail@plt+0x1a898>
   2c1fc:	mov	r6, r3
   2c200:	mov	r8, r0
   2c204:	mov	r4, r2
   2c208:	mov	r5, r1
   2c20c:	b	2c21c <__assert_fail@plt+0x1a87c>
   2c210:	ldr	r7, [r5, #4]!
   2c214:	cmp	r7, #0
   2c218:	beq	2c238 <__assert_fail@plt+0x1a898>
   2c21c:	mov	r1, r4
   2c220:	mov	r2, r6
   2c224:	mov	r0, r8
   2c228:	add	r4, r4, r6
   2c22c:	bl	1161c <memcmp@plt>
   2c230:	cmp	r0, #0
   2c234:	bne	2c210 <__assert_fail@plt+0x1a870>
   2c238:	mov	r0, r7
   2c23c:	ldrd	r4, [sp]
   2c240:	ldrd	r6, [sp, #8]
   2c244:	ldr	r8, [sp, #16]
   2c248:	add	sp, sp, #20
   2c24c:	pop	{pc}		; (ldr pc, [sp], #4)
   2c250:	strd	r4, [sp, #-16]!
   2c254:	mov	r4, r0
   2c258:	str	r6, [sp, #8]
   2c25c:	str	lr, [sp, #12]
   2c260:	bl	116b8 <__fpending@plt>
   2c264:	mov	r6, r0
   2c268:	mov	r0, r4
   2c26c:	bl	115b0 <ferror@plt>
   2c270:	mov	r5, r0
   2c274:	mov	r0, r4
   2c278:	bl	11868 <fclose@plt>
   2c27c:	cmp	r5, #0
   2c280:	mov	r4, r0
   2c284:	bne	2c2bc <__assert_fail@plt+0x1a91c>
   2c288:	cmp	r0, #0
   2c28c:	beq	2c2a8 <__assert_fail@plt+0x1a908>
   2c290:	cmp	r6, #0
   2c294:	bne	2c2d4 <__assert_fail@plt+0x1a934>
   2c298:	bl	117d8 <__errno_location@plt>
   2c29c:	ldr	r4, [r0]
   2c2a0:	subs	r4, r4, #9
   2c2a4:	mvnne	r4, #0
   2c2a8:	mov	r0, r4
   2c2ac:	ldrd	r4, [sp]
   2c2b0:	ldr	r6, [sp, #8]
   2c2b4:	add	sp, sp, #12
   2c2b8:	pop	{pc}		; (ldr pc, [sp], #4)
   2c2bc:	cmp	r0, #0
   2c2c0:	bne	2c2d4 <__assert_fail@plt+0x1a934>
   2c2c4:	bl	117d8 <__errno_location@plt>
   2c2c8:	str	r4, [r0]
   2c2cc:	mvn	r4, #0
   2c2d0:	b	2c2a8 <__assert_fail@plt+0x1a908>
   2c2d4:	mvn	r4, #0
   2c2d8:	b	2c2a8 <__assert_fail@plt+0x1a908>
   2c2dc:	ldr	ip, [r0, #4]
   2c2e0:	cmp	ip, r1
   2c2e4:	bcs	2c350 <__assert_fail@plt+0x1a9b0>
   2c2e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2c2ec:	mov	r5, r1
   2c2f0:	mov	r4, r0
   2c2f4:	strd	r6, [sp, #8]
   2c2f8:	umull	r6, r7, r1, r3
   2c2fc:	str	r8, [sp, #16]
   2c300:	mov	r8, r3
   2c304:	str	lr, [sp, #20]
   2c308:	cmp	r7, #0
   2c30c:	bne	2c394 <__assert_fail@plt+0x1a9f4>
   2c310:	ldr	r0, [r0, #8]
   2c314:	cmp	r0, r2
   2c318:	beq	2c360 <__assert_fail@plt+0x1a9c0>
   2c31c:	mov	r1, r6
   2c320:	bl	1c910 <__assert_fail@plt+0xaf70>
   2c324:	subs	r6, r0, #0
   2c328:	beq	2c38c <__assert_fail@plt+0x1a9ec>
   2c32c:	mov	r3, #1
   2c330:	str	r5, [r4]
   2c334:	stmib	r4, {r5, r6}
   2c338:	ldrd	r4, [sp]
   2c33c:	mov	r0, r3
   2c340:	ldrd	r6, [sp, #8]
   2c344:	ldr	r8, [sp, #16]
   2c348:	add	sp, sp, #20
   2c34c:	pop	{pc}		; (ldr pc, [sp], #4)
   2c350:	mov	r3, #1
   2c354:	str	r1, [r0]
   2c358:	mov	r0, r3
   2c35c:	bx	lr
   2c360:	mov	r0, r6
   2c364:	bl	1c864 <__assert_fail@plt+0xaec4>
   2c368:	subs	r6, r0, #0
   2c36c:	beq	2c38c <__assert_fail@plt+0x1a9ec>
   2c370:	ldr	r1, [r4, #8]
   2c374:	cmp	r1, #0
   2c378:	beq	2c32c <__assert_fail@plt+0x1a98c>
   2c37c:	ldr	r2, [r4]
   2c380:	mul	r2, r2, r8
   2c384:	bl	115d4 <memcpy@plt>
   2c388:	b	2c32c <__assert_fail@plt+0x1a98c>
   2c38c:	mov	r3, #0
   2c390:	b	2c338 <__assert_fail@plt+0x1a998>
   2c394:	bl	117d8 <__errno_location@plt>
   2c398:	mov	r2, #12
   2c39c:	mov	r3, #0
   2c3a0:	str	r2, [r0]
   2c3a4:	b	2c338 <__assert_fail@plt+0x1a998>
   2c3a8:	push	{lr}		; (str lr, [sp, #-4]!)
   2c3ac:	sub	sp, sp, #268	; 0x10c
   2c3b0:	movw	r2, #257	; 0x101
   2c3b4:	add	r1, sp, #4
   2c3b8:	bl	2c58c <__assert_fail@plt+0x1abec>
   2c3bc:	cmp	r0, #0
   2c3c0:	movne	r0, #0
   2c3c4:	bne	2c3f8 <__assert_fail@plt+0x1aa58>
   2c3c8:	movw	r1, #58932	; 0xe634
   2c3cc:	movt	r1, #2
   2c3d0:	add	r0, sp, #4
   2c3d4:	bl	11544 <strcmp@plt>
   2c3d8:	cmp	r0, #0
   2c3dc:	beq	2c3f8 <__assert_fail@plt+0x1aa58>
   2c3e0:	add	r0, sp, #4
   2c3e4:	movw	r1, #58936	; 0xe638
   2c3e8:	movt	r1, #2
   2c3ec:	bl	11544 <strcmp@plt>
   2c3f0:	adds	r0, r0, #0
   2c3f4:	movne	r0, #1
   2c3f8:	add	sp, sp, #268	; 0x10c
   2c3fc:	pop	{pc}		; (ldr pc, [sp], #4)
   2c400:	mov	r0, #14
   2c404:	str	r4, [sp, #-8]!
   2c408:	str	lr, [sp, #4]
   2c40c:	bl	118b0 <nl_langinfo@plt>
   2c410:	cmp	r0, #0
   2c414:	beq	2c438 <__assert_fail@plt+0x1aa98>
   2c418:	ldrb	r2, [r0]
   2c41c:	movw	r3, #58944	; 0xe640
   2c420:	movt	r3, #2
   2c424:	ldr	r4, [sp]
   2c428:	add	sp, sp, #4
   2c42c:	cmp	r2, #0
   2c430:	moveq	r0, r3
   2c434:	pop	{pc}		; (ldr pc, [sp], #4)
   2c438:	ldr	r4, [sp]
   2c43c:	add	sp, sp, #4
   2c440:	movw	r0, #58944	; 0xe640
   2c444:	movt	r0, #2
   2c448:	pop	{pc}		; (ldr pc, [sp], #4)
   2c44c:	adds	r3, r0, #16
   2c450:	bmi	2c49c <__assert_fail@plt+0x1aafc>
   2c454:	cmp	r3, r0
   2c458:	bcc	2c49c <__assert_fail@plt+0x1aafc>
   2c45c:	mov	r0, r3
   2c460:	str	r4, [sp, #-8]!
   2c464:	str	lr, [sp, #4]
   2c468:	bl	1170c <malloc@plt>
   2c46c:	cmp	r0, #0
   2c470:	moveq	r0, #0
   2c474:	beq	2c490 <__assert_fail@plt+0x1aaf0>
   2c478:	add	r3, r0, #8
   2c47c:	rsb	r2, r0, #8
   2c480:	bic	r3, r3, #15
   2c484:	add	r3, r3, r2
   2c488:	add	r0, r0, r3
   2c48c:	strb	r3, [r0, #-1]
   2c490:	ldr	r4, [sp]
   2c494:	add	sp, sp, #4
   2c498:	pop	{pc}		; (ldr pc, [sp], #4)
   2c49c:	mov	r0, #0
   2c4a0:	bx	lr
   2c4a4:	tst	r0, #7
   2c4a8:	bne	2c4c0 <__assert_fail@plt+0x1ab20>
   2c4ac:	tst	r0, #8
   2c4b0:	bxeq	lr
   2c4b4:	ldrb	r3, [r0, #-1]
   2c4b8:	sub	r0, r0, r3
   2c4bc:	b	1c734 <__assert_fail@plt+0xad94>
   2c4c0:	str	r4, [sp, #-8]!
   2c4c4:	str	lr, [sp, #4]
   2c4c8:	bl	11964 <abort@plt>
   2c4cc:	str	r4, [sp, #-8]!
   2c4d0:	mov	r4, r0
   2c4d4:	str	lr, [sp, #4]
   2c4d8:	bl	11574 <wcwidth@plt>
   2c4dc:	cmp	r0, #0
   2c4e0:	bge	2c4f4 <__assert_fail@plt+0x1ab54>
   2c4e4:	mov	r0, r4
   2c4e8:	bl	1164c <iswcntrl@plt>
   2c4ec:	clz	r0, r0
   2c4f0:	lsr	r0, r0, #5
   2c4f4:	ldr	r4, [sp]
   2c4f8:	add	sp, sp, #4
   2c4fc:	pop	{pc}		; (ldr pc, [sp], #4)
   2c500:	mov	r3, r1
   2c504:	strd	r4, [sp, #-16]!
   2c508:	mov	r4, r1
   2c50c:	ldr	r2, [r1, #4]
   2c510:	mov	r5, r0
   2c514:	ldr	r1, [r3], #16
   2c518:	str	r6, [sp, #8]
   2c51c:	str	lr, [sp, #12]
   2c520:	cmp	r1, r3
   2c524:	strne	r1, [r0]
   2c528:	beq	2c554 <__assert_fail@plt+0x1abb4>
   2c52c:	ldrb	r3, [r4, #8]
   2c530:	str	r2, [r5, #4]
   2c534:	ldr	r6, [sp, #8]
   2c538:	cmp	r3, #0
   2c53c:	strb	r3, [r5, #8]
   2c540:	ldrne	r3, [r4, #12]
   2c544:	strne	r3, [r5, #12]
   2c548:	ldrd	r4, [sp]
   2c54c:	add	sp, sp, #12
   2c550:	pop	{pc}		; (ldr pc, [sp], #4)
   2c554:	add	r3, r0, #16
   2c558:	mov	r0, r3
   2c55c:	bl	115d4 <memcpy@plt>
   2c560:	ldr	r2, [r4, #4]
   2c564:	str	r0, [r5]
   2c568:	b	2c52c <__assert_fail@plt+0x1ab8c>
   2c56c:	lsr	r2, r0, #5
   2c570:	movw	r3, #58952	; 0xe648
   2c574:	movt	r3, #2
   2c578:	and	r0, r0, #31
   2c57c:	ldr	r3, [r3, r2, lsl #2]
   2c580:	lsr	r0, r3, r0
   2c584:	and	r0, r0, #1
   2c588:	bx	lr
   2c58c:	strd	r4, [sp, #-16]!
   2c590:	mov	r5, r1
   2c594:	mov	r1, #0
   2c598:	mov	r4, r2
   2c59c:	str	r6, [sp, #8]
   2c5a0:	str	lr, [sp, #12]
   2c5a4:	bl	11898 <setlocale@plt>
   2c5a8:	subs	r6, r0, #0
   2c5ac:	beq	2c62c <__assert_fail@plt+0x1ac8c>
   2c5b0:	bl	117a8 <strlen@plt>
   2c5b4:	cmp	r4, r0
   2c5b8:	bhi	2c5d8 <__assert_fail@plt+0x1ac38>
   2c5bc:	cmp	r4, #0
   2c5c0:	moveq	r0, #34	; 0x22
   2c5c4:	bne	2c5fc <__assert_fail@plt+0x1ac5c>
   2c5c8:	ldrd	r4, [sp]
   2c5cc:	ldr	r6, [sp, #8]
   2c5d0:	add	sp, sp, #12
   2c5d4:	pop	{pc}		; (ldr pc, [sp], #4)
   2c5d8:	add	r2, r0, #1
   2c5dc:	mov	r1, r6
   2c5e0:	mov	r0, r5
   2c5e4:	bl	115d4 <memcpy@plt>
   2c5e8:	ldrd	r4, [sp]
   2c5ec:	mov	r0, #0
   2c5f0:	ldr	r6, [sp, #8]
   2c5f4:	add	sp, sp, #12
   2c5f8:	pop	{pc}		; (ldr pc, [sp], #4)
   2c5fc:	sub	r4, r4, #1
   2c600:	mov	r1, r6
   2c604:	mov	r2, r4
   2c608:	mov	r0, r5
   2c60c:	bl	115d4 <memcpy@plt>
   2c610:	mov	r3, #0
   2c614:	mov	r0, #34	; 0x22
   2c618:	strb	r3, [r5, r4]
   2c61c:	ldrd	r4, [sp]
   2c620:	ldr	r6, [sp, #8]
   2c624:	add	sp, sp, #12
   2c628:	pop	{pc}		; (ldr pc, [sp], #4)
   2c62c:	cmp	r4, #0
   2c630:	mov	r0, #22
   2c634:	strbne	r6, [r5]
   2c638:	ldrd	r4, [sp]
   2c63c:	ldr	r6, [sp, #8]
   2c640:	add	sp, sp, #12
   2c644:	pop	{pc}		; (ldr pc, [sp], #4)
   2c648:	mov	r1, #0
   2c64c:	b	11898 <setlocale@plt>
   2c650:	mov	r2, #3
   2c654:	mov	r1, #0
   2c658:	b	1c4ec <__assert_fail@plt+0xab4c>
   2c65c:	eor	r1, r1, #-2147483648	; 0x80000000
   2c660:	b	2c668 <__assert_fail@plt+0x1acc8>
   2c664:	eor	r3, r3, #-2147483648	; 0x80000000
   2c668:	push	{r4, r5, lr}
   2c66c:	lsl	r4, r1, #1
   2c670:	lsl	r5, r3, #1
   2c674:	teq	r4, r5
   2c678:	teqeq	r0, r2
   2c67c:	orrsne	ip, r4, r0
   2c680:	orrsne	ip, r5, r2
   2c684:	mvnsne	ip, r4, asr #21
   2c688:	mvnsne	ip, r5, asr #21
   2c68c:	beq	2c878 <__assert_fail@plt+0x1aed8>
   2c690:	lsr	r4, r4, #21
   2c694:	rsbs	r5, r4, r5, lsr #21
   2c698:	rsblt	r5, r5, #0
   2c69c:	ble	2c6bc <__assert_fail@plt+0x1ad1c>
   2c6a0:	add	r4, r4, r5
   2c6a4:	eor	r2, r0, r2
   2c6a8:	eor	r3, r1, r3
   2c6ac:	eor	r0, r2, r0
   2c6b0:	eor	r1, r3, r1
   2c6b4:	eor	r2, r0, r2
   2c6b8:	eor	r3, r1, r3
   2c6bc:	cmp	r5, #54	; 0x36
   2c6c0:	pophi	{r4, r5, pc}
   2c6c4:	tst	r1, #-2147483648	; 0x80000000
   2c6c8:	lsl	r1, r1, #12
   2c6cc:	mov	ip, #1048576	; 0x100000
   2c6d0:	orr	r1, ip, r1, lsr #12
   2c6d4:	beq	2c6e0 <__assert_fail@plt+0x1ad40>
   2c6d8:	rsbs	r0, r0, #0
   2c6dc:	rsc	r1, r1, #0
   2c6e0:	tst	r3, #-2147483648	; 0x80000000
   2c6e4:	lsl	r3, r3, #12
   2c6e8:	orr	r3, ip, r3, lsr #12
   2c6ec:	beq	2c6f8 <__assert_fail@plt+0x1ad58>
   2c6f0:	rsbs	r2, r2, #0
   2c6f4:	rsc	r3, r3, #0
   2c6f8:	teq	r4, r5
   2c6fc:	beq	2c860 <__assert_fail@plt+0x1aec0>
   2c700:	sub	r4, r4, #1
   2c704:	rsbs	lr, r5, #32
   2c708:	blt	2c724 <__assert_fail@plt+0x1ad84>
   2c70c:	lsl	ip, r2, lr
   2c710:	adds	r0, r0, r2, lsr r5
   2c714:	adc	r1, r1, #0
   2c718:	adds	r0, r0, r3, lsl lr
   2c71c:	adcs	r1, r1, r3, asr r5
   2c720:	b	2c740 <__assert_fail@plt+0x1ada0>
   2c724:	sub	r5, r5, #32
   2c728:	add	lr, lr, #32
   2c72c:	cmp	r2, #1
   2c730:	lsl	ip, r3, lr
   2c734:	orrcs	ip, ip, #2
   2c738:	adds	r0, r0, r3, asr r5
   2c73c:	adcs	r1, r1, r3, asr #31
   2c740:	and	r5, r1, #-2147483648	; 0x80000000
   2c744:	bpl	2c754 <__assert_fail@plt+0x1adb4>
   2c748:	rsbs	ip, ip, #0
   2c74c:	rscs	r0, r0, #0
   2c750:	rsc	r1, r1, #0
   2c754:	cmp	r1, #1048576	; 0x100000
   2c758:	bcc	2c798 <__assert_fail@plt+0x1adf8>
   2c75c:	cmp	r1, #2097152	; 0x200000
   2c760:	bcc	2c780 <__assert_fail@plt+0x1ade0>
   2c764:	lsrs	r1, r1, #1
   2c768:	rrxs	r0, r0
   2c76c:	rrx	ip, ip
   2c770:	add	r4, r4, #1
   2c774:	lsl	r2, r4, #21
   2c778:	cmn	r2, #4194304	; 0x400000
   2c77c:	bcs	2c8d8 <__assert_fail@plt+0x1af38>
   2c780:	cmp	ip, #-2147483648	; 0x80000000
   2c784:	lsrseq	ip, r0, #1
   2c788:	adcs	r0, r0, #0
   2c78c:	adc	r1, r1, r4, lsl #20
   2c790:	orr	r1, r1, r5
   2c794:	pop	{r4, r5, pc}
   2c798:	lsls	ip, ip, #1
   2c79c:	adcs	r0, r0, r0
   2c7a0:	adc	r1, r1, r1
   2c7a4:	tst	r1, #1048576	; 0x100000
   2c7a8:	sub	r4, r4, #1
   2c7ac:	bne	2c780 <__assert_fail@plt+0x1ade0>
   2c7b0:	teq	r1, #0
   2c7b4:	moveq	r1, r0
   2c7b8:	moveq	r0, #0
   2c7bc:	clz	r3, r1
   2c7c0:	addeq	r3, r3, #32
   2c7c4:	sub	r3, r3, #11
   2c7c8:	subs	r2, r3, #32
   2c7cc:	bge	2c7f0 <__assert_fail@plt+0x1ae50>
   2c7d0:	adds	r2, r2, #12
   2c7d4:	ble	2c7ec <__assert_fail@plt+0x1ae4c>
   2c7d8:	add	ip, r2, #20
   2c7dc:	rsb	r2, r2, #12
   2c7e0:	lsl	r0, r1, ip
   2c7e4:	lsr	r1, r1, r2
   2c7e8:	b	2c800 <__assert_fail@plt+0x1ae60>
   2c7ec:	add	r2, r2, #20
   2c7f0:	rsble	ip, r2, #32
   2c7f4:	lsl	r1, r1, r2
   2c7f8:	orrle	r1, r1, r0, lsr ip
   2c7fc:	lslle	r0, r0, r2
   2c800:	subs	r4, r4, r3
   2c804:	addge	r1, r1, r4, lsl #20
   2c808:	orrge	r1, r1, r5
   2c80c:	popge	{r4, r5, pc}
   2c810:	mvn	r4, r4
   2c814:	subs	r4, r4, #31
   2c818:	bge	2c854 <__assert_fail@plt+0x1aeb4>
   2c81c:	adds	r4, r4, #12
   2c820:	bgt	2c83c <__assert_fail@plt+0x1ae9c>
   2c824:	add	r4, r4, #20
   2c828:	rsb	r2, r4, #32
   2c82c:	lsr	r0, r0, r4
   2c830:	orr	r0, r0, r1, lsl r2
   2c834:	orr	r1, r5, r1, lsr r4
   2c838:	pop	{r4, r5, pc}
   2c83c:	rsb	r4, r4, #12
   2c840:	rsb	r2, r4, #32
   2c844:	lsr	r0, r0, r2
   2c848:	orr	r0, r0, r1, lsl r4
   2c84c:	mov	r1, r5
   2c850:	pop	{r4, r5, pc}
   2c854:	lsr	r0, r1, r4
   2c858:	mov	r1, r5
   2c85c:	pop	{r4, r5, pc}
   2c860:	teq	r4, #0
   2c864:	eor	r3, r3, #1048576	; 0x100000
   2c868:	eoreq	r1, r1, #1048576	; 0x100000
   2c86c:	addeq	r4, r4, #1
   2c870:	subne	r5, r5, #1
   2c874:	b	2c700 <__assert_fail@plt+0x1ad60>
   2c878:	mvns	ip, r4, asr #21
   2c87c:	mvnsne	ip, r5, asr #21
   2c880:	beq	2c8e8 <__assert_fail@plt+0x1af48>
   2c884:	teq	r4, r5
   2c888:	teqeq	r0, r2
   2c88c:	beq	2c8a0 <__assert_fail@plt+0x1af00>
   2c890:	orrs	ip, r4, r0
   2c894:	moveq	r1, r3
   2c898:	moveq	r0, r2
   2c89c:	pop	{r4, r5, pc}
   2c8a0:	teq	r1, r3
   2c8a4:	movne	r1, #0
   2c8a8:	movne	r0, #0
   2c8ac:	popne	{r4, r5, pc}
   2c8b0:	lsrs	ip, r4, #21
   2c8b4:	bne	2c8c8 <__assert_fail@plt+0x1af28>
   2c8b8:	lsls	r0, r0, #1
   2c8bc:	adcs	r1, r1, r1
   2c8c0:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2c8c4:	pop	{r4, r5, pc}
   2c8c8:	adds	r4, r4, #4194304	; 0x400000
   2c8cc:	addcc	r1, r1, #1048576	; 0x100000
   2c8d0:	popcc	{r4, r5, pc}
   2c8d4:	and	r5, r1, #-2147483648	; 0x80000000
   2c8d8:	orr	r1, r5, #2130706432	; 0x7f000000
   2c8dc:	orr	r1, r1, #15728640	; 0xf00000
   2c8e0:	mov	r0, #0
   2c8e4:	pop	{r4, r5, pc}
   2c8e8:	mvns	ip, r4, asr #21
   2c8ec:	movne	r1, r3
   2c8f0:	movne	r0, r2
   2c8f4:	mvnseq	ip, r5, asr #21
   2c8f8:	movne	r3, r1
   2c8fc:	movne	r2, r0
   2c900:	orrs	r4, r0, r1, lsl #12
   2c904:	orrseq	r5, r2, r3, lsl #12
   2c908:	teqeq	r1, r3
   2c90c:	orrne	r1, r1, #524288	; 0x80000
   2c910:	pop	{r4, r5, pc}
   2c914:	teq	r0, #0
   2c918:	moveq	r1, #0
   2c91c:	bxeq	lr
   2c920:	push	{r4, r5, lr}
   2c924:	mov	r4, #1024	; 0x400
   2c928:	add	r4, r4, #50	; 0x32
   2c92c:	mov	r5, #0
   2c930:	mov	r1, #0
   2c934:	b	2c7b0 <__assert_fail@plt+0x1ae10>
   2c938:	teq	r0, #0
   2c93c:	moveq	r1, #0
   2c940:	bxeq	lr
   2c944:	push	{r4, r5, lr}
   2c948:	mov	r4, #1024	; 0x400
   2c94c:	add	r4, r4, #50	; 0x32
   2c950:	ands	r5, r0, #-2147483648	; 0x80000000
   2c954:	rsbmi	r0, r0, #0
   2c958:	mov	r1, #0
   2c95c:	b	2c7b0 <__assert_fail@plt+0x1ae10>
   2c960:	lsls	r2, r0, #1
   2c964:	asr	r1, r2, #3
   2c968:	rrx	r1, r1
   2c96c:	lsl	r0, r2, #28
   2c970:	andsne	r3, r2, #-16777216	; 0xff000000
   2c974:	teqne	r3, #-16777216	; 0xff000000
   2c978:	eorne	r1, r1, #939524096	; 0x38000000
   2c97c:	bxne	lr
   2c980:	bics	r2, r2, #-16777216	; 0xff000000
   2c984:	bxeq	lr
   2c988:	teq	r3, #-16777216	; 0xff000000
   2c98c:	orreq	r1, r1, #524288	; 0x80000
   2c990:	bxeq	lr
   2c994:	push	{r4, r5, lr}
   2c998:	mov	r4, #896	; 0x380
   2c99c:	and	r5, r1, #-2147483648	; 0x80000000
   2c9a0:	bic	r1, r1, #-2147483648	; 0x80000000
   2c9a4:	b	2c7b0 <__assert_fail@plt+0x1ae10>
   2c9a8:	orrs	r2, r0, r1
   2c9ac:	bxeq	lr
   2c9b0:	push	{r4, r5, lr}
   2c9b4:	mov	r5, #0
   2c9b8:	b	2c9d8 <__assert_fail@plt+0x1b038>
   2c9bc:	orrs	r2, r0, r1
   2c9c0:	bxeq	lr
   2c9c4:	push	{r4, r5, lr}
   2c9c8:	ands	r5, r1, #-2147483648	; 0x80000000
   2c9cc:	bpl	2c9d8 <__assert_fail@plt+0x1b038>
   2c9d0:	rsbs	r0, r0, #0
   2c9d4:	rsc	r1, r1, #0
   2c9d8:	mov	r4, #1024	; 0x400
   2c9dc:	add	r4, r4, #50	; 0x32
   2c9e0:	lsrs	ip, r1, #22
   2c9e4:	beq	2c754 <__assert_fail@plt+0x1adb4>
   2c9e8:	mov	r2, #3
   2c9ec:	lsrs	ip, ip, #3
   2c9f0:	addne	r2, r2, #3
   2c9f4:	lsrs	ip, ip, #3
   2c9f8:	addne	r2, r2, #3
   2c9fc:	add	r2, r2, ip, lsr #3
   2ca00:	rsb	r3, r2, #32
   2ca04:	lsl	ip, r0, r3
   2ca08:	lsr	r0, r0, r2
   2ca0c:	orr	r0, r0, r1, lsl r3
   2ca10:	lsr	r1, r1, r2
   2ca14:	add	r4, r4, r2
   2ca18:	b	2c754 <__assert_fail@plt+0x1adb4>
   2ca1c:	cmp	r3, #0
   2ca20:	cmpeq	r2, #0
   2ca24:	bne	2ca3c <__assert_fail@plt+0x1b09c>
   2ca28:	cmp	r1, #0
   2ca2c:	cmpeq	r0, #0
   2ca30:	mvnne	r1, #0
   2ca34:	mvnne	r0, #0
   2ca38:	b	2ca58 <__assert_fail@plt+0x1b0b8>
   2ca3c:	sub	sp, sp, #8
   2ca40:	push	{sp, lr}
   2ca44:	bl	2caa8 <__assert_fail@plt+0x1b108>
   2ca48:	ldr	lr, [sp, #4]
   2ca4c:	add	sp, sp, #8
   2ca50:	pop	{r2, r3}
   2ca54:	bx	lr
   2ca58:	push	{r1, lr}
   2ca5c:	mov	r0, #8
   2ca60:	bl	11520 <raise@plt>
   2ca64:	pop	{r1, pc}
   2ca68:	vmov	d6, r0, r1
   2ca6c:	vldr	d7, [pc, #36]	; 2ca98 <__assert_fail@plt+0x1b0f8>
   2ca70:	vldr	d5, [pc, #40]	; 2caa0 <__assert_fail@plt+0x1b100>
   2ca74:	vmul.f64	d7, d6, d7
   2ca78:	vcvt.u32.f64	s14, d7
   2ca7c:	vcvt.f64.u32	d4, s14
   2ca80:	vmov	r1, s14
   2ca84:	vmls.f64	d6, d4, d5
   2ca88:	vcvt.u32.f64	s15, d6
   2ca8c:	vmov	r0, s15
   2ca90:	bx	lr
   2ca94:	nop			; (mov r0, r0)
   2ca98:	andeq	r0, r0, r0
   2ca9c:	ldclcc	0, cr0, [r0]
   2caa0:	andeq	r0, r0, r0
   2caa4:	mvnsmi	r0, r0
   2caa8:	cmp	r1, r3
   2caac:	cmpeq	r0, r2
   2cab0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cab4:	mov	r4, r0
   2cab8:	movcc	r0, #0
   2cabc:	mov	r5, r1
   2cac0:	ldr	lr, [sp, #36]	; 0x24
   2cac4:	movcc	r1, r0
   2cac8:	bcc	2cbc4 <__assert_fail@plt+0x1b224>
   2cacc:	cmp	r3, #0
   2cad0:	clzeq	ip, r2
   2cad4:	clzne	ip, r3
   2cad8:	addeq	ip, ip, #32
   2cadc:	cmp	r5, #0
   2cae0:	clzeq	r1, r4
   2cae4:	addeq	r1, r1, #32
   2cae8:	clzne	r1, r5
   2caec:	sub	ip, ip, r1
   2caf0:	sub	sl, ip, #32
   2caf4:	lsl	r9, r3, ip
   2caf8:	rsb	fp, ip, #32
   2cafc:	orr	r9, r9, r2, lsl sl
   2cb00:	orr	r9, r9, r2, lsr fp
   2cb04:	lsl	r8, r2, ip
   2cb08:	cmp	r5, r9
   2cb0c:	cmpeq	r4, r8
   2cb10:	movcc	r0, #0
   2cb14:	movcc	r1, r0
   2cb18:	bcc	2cb34 <__assert_fail@plt+0x1b194>
   2cb1c:	mov	r0, #1
   2cb20:	subs	r4, r4, r8
   2cb24:	lsl	r1, r0, sl
   2cb28:	orr	r1, r1, r0, lsr fp
   2cb2c:	lsl	r0, r0, ip
   2cb30:	sbc	r5, r5, r9
   2cb34:	cmp	ip, #0
   2cb38:	beq	2cbc4 <__assert_fail@plt+0x1b224>
   2cb3c:	lsr	r6, r8, #1
   2cb40:	orr	r6, r6, r9, lsl #31
   2cb44:	lsr	r7, r9, #1
   2cb48:	mov	r2, ip
   2cb4c:	b	2cb70 <__assert_fail@plt+0x1b1d0>
   2cb50:	subs	r3, r4, r6
   2cb54:	sbc	r8, r5, r7
   2cb58:	adds	r3, r3, r3
   2cb5c:	adc	r8, r8, r8
   2cb60:	adds	r4, r3, #1
   2cb64:	adc	r5, r8, #0
   2cb68:	subs	r2, r2, #1
   2cb6c:	beq	2cb8c <__assert_fail@plt+0x1b1ec>
   2cb70:	cmp	r5, r7
   2cb74:	cmpeq	r4, r6
   2cb78:	bcs	2cb50 <__assert_fail@plt+0x1b1b0>
   2cb7c:	adds	r4, r4, r4
   2cb80:	adc	r5, r5, r5
   2cb84:	subs	r2, r2, #1
   2cb88:	bne	2cb70 <__assert_fail@plt+0x1b1d0>
   2cb8c:	lsr	r3, r4, ip
   2cb90:	orr	r3, r3, r5, lsl fp
   2cb94:	lsr	r2, r5, ip
   2cb98:	orr	r3, r3, r5, lsr sl
   2cb9c:	adds	r0, r0, r4
   2cba0:	mov	r4, r3
   2cba4:	lsl	r3, r2, ip
   2cba8:	orr	r3, r3, r4, lsl sl
   2cbac:	lsl	ip, r4, ip
   2cbb0:	orr	r3, r3, r4, lsr fp
   2cbb4:	adc	r1, r1, r5
   2cbb8:	subs	r0, r0, ip
   2cbbc:	mov	r5, r2
   2cbc0:	sbc	r1, r1, r3
   2cbc4:	cmp	lr, #0
   2cbc8:	strdne	r4, [lr]
   2cbcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cbd0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2cbd4:	mov	r7, r0
   2cbd8:	ldr	r6, [pc, #72]	; 2cc28 <__assert_fail@plt+0x1b288>
   2cbdc:	ldr	r5, [pc, #72]	; 2cc2c <__assert_fail@plt+0x1b28c>
   2cbe0:	add	r6, pc, r6
   2cbe4:	add	r5, pc, r5
   2cbe8:	sub	r6, r6, r5
   2cbec:	mov	r8, r1
   2cbf0:	mov	r9, r2
   2cbf4:	bl	114d0 <pthread_mutex_unlock@plt-0x20>
   2cbf8:	asrs	r6, r6, #2
   2cbfc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2cc00:	mov	r4, #0
   2cc04:	add	r4, r4, #1
   2cc08:	ldr	r3, [r5], #4
   2cc0c:	mov	r2, r9
   2cc10:	mov	r1, r8
   2cc14:	mov	r0, r7
   2cc18:	blx	r3
   2cc1c:	cmp	r6, r4
   2cc20:	bne	2cc04 <__assert_fail@plt+0x1b264>
   2cc24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2cc28:	andeq	r2, r1, ip, lsr #6
   2cc2c:	andeq	r2, r1, r4, lsr #6
   2cc30:	bx	lr
   2cc34:	ldr	r3, [pc, #12]	; 2cc48 <__assert_fail@plt+0x1b2a8>
   2cc38:	mov	r1, #0
   2cc3c:	add	r3, pc, r3
   2cc40:	ldr	r2, [r3]
   2cc44:	b	117fc <__cxa_atexit@plt>
   2cc48:	andeq	r2, r1, r4, ror #10

Disassembly of section .fini:

0002cc4c <.fini>:
   2cc4c:	push	{r3, lr}
   2cc50:	pop	{r3, pc}
