
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/load_test:     file format elf32-littlearm


Disassembly of section .init:

00011f40 <.init>:
   11f40:	push	{r3, lr}
   11f44:	bl	1208c <_start@@Base+0x3c>
   11f48:	pop	{r3, pc}

Disassembly of section .plt:

00011f4c <strcmp@plt-0x14>:
   11f4c:	push	{lr}		; (str lr, [sp, #-4]!)
   11f50:	ldr	lr, [pc, #4]	; 11f5c <strcmp@plt-0x4>
   11f54:	add	lr, pc, lr
   11f58:	ldr	pc, [lr, #8]!
   11f5c:	andeq	r7, r1, r4, lsr #1

00011f60 <strcmp@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #94208	; 0x17000
   11f68:	ldr	pc, [ip, #164]!	; 0xa4

00011f6c <printf@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #94208	; 0x17000
   11f74:	ldr	pc, [ip, #156]!	; 0x9c

00011f78 <fopen@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #94208	; 0x17000
   11f80:	ldr	pc, [ip, #148]!	; 0x94

00011f84 <free@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #94208	; 0x17000
   11f8c:	ldr	pc, [ip, #140]!	; 0x8c

00011f90 <memcpy@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #94208	; 0x17000
   11f98:	ldr	pc, [ip, #132]!	; 0x84

00011f9c <memcmp@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #94208	; 0x17000
   11fa4:	ldr	pc, [ip, #124]!	; 0x7c

00011fa8 <realloc@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #94208	; 0x17000
   11fb0:	ldr	pc, [ip, #116]!	; 0x74

00011fb4 <fwrite@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #94208	; 0x17000
   11fbc:	ldr	pc, [ip, #108]!	; 0x6c

00011fc0 <gettimeofday@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #94208	; 0x17000
   11fc8:	ldr	pc, [ip, #100]!	; 0x64

00011fcc <puts@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #94208	; 0x17000
   11fd4:	ldr	pc, [ip, #92]!	; 0x5c

00011fd8 <malloc@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #94208	; 0x17000
   11fe0:	ldr	pc, [ip, #84]!	; 0x54

00011fe4 <__libc_start_main@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #94208	; 0x17000
   11fec:	ldr	pc, [ip, #76]!	; 0x4c

00011ff0 <__gmon_start__@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #94208	; 0x17000
   11ff8:	ldr	pc, [ip, #68]!	; 0x44

00011ffc <strlen@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #94208	; 0x17000
   12004:	ldr	pc, [ip, #60]!	; 0x3c

00012008 <posix_memalign@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #94208	; 0x17000
   12010:	ldr	pc, [ip, #52]!	; 0x34

00012014 <memset@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #94208	; 0x17000
   1201c:	ldr	pc, [ip, #44]!	; 0x2c

00012020 <memchr@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #94208	; 0x17000
   12028:	ldr	pc, [ip, #36]!	; 0x24

0001202c <fclose@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #94208	; 0x17000
   12034:	ldr	pc, [ip, #28]!

00012038 <abort@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #94208	; 0x17000
   12040:	ldr	pc, [ip, #20]!

00012044 <__assert_fail@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #94208	; 0x17000
   1204c:	ldr	pc, [ip, #12]!

Disassembly of section .text:

00012050 <_start@@Base>:
   12050:	mov	fp, #0
   12054:	mov	lr, #0
   12058:	pop	{r1}		; (ldr r1, [sp], #4)
   1205c:	mov	r2, sp
   12060:	push	{r2}		; (str r2, [sp, #-4]!)
   12064:	push	{r0}		; (str r0, [sp, #-4]!)
   12068:	ldr	ip, [pc, #16]	; 12080 <_start@@Base+0x30>
   1206c:	push	{ip}		; (str ip, [sp, #-4]!)
   12070:	ldr	r0, [pc, #12]	; 12084 <_start@@Base+0x34>
   12074:	ldr	r3, [pc, #12]	; 12088 <_start@@Base+0x38>
   12078:	bl	11fe4 <__libc_start_main@plt>
   1207c:	bl	12038 <abort@plt>
   12080:	muleq	r1, r0, r6
   12084:	andeq	r2, r1, ip, lsr r4
   12088:	andeq	r7, r1, r0, lsr r6
   1208c:	ldr	r3, [pc, #20]	; 120a8 <_start@@Base+0x58>
   12090:	ldr	r2, [pc, #20]	; 120ac <_start@@Base+0x5c>
   12094:	add	r3, pc, r3
   12098:	ldr	r2, [r3, r2]
   1209c:	cmp	r2, #0
   120a0:	bxeq	lr
   120a4:	b	11ff0 <__gmon_start__@plt>
   120a8:	andeq	r6, r1, r4, ror #30
   120ac:	andeq	r0, r0, ip, asr r0
   120b0:	ldr	r0, [pc, #24]	; 120d0 <_start@@Base+0x80>
   120b4:	ldr	r3, [pc, #24]	; 120d4 <_start@@Base+0x84>
   120b8:	cmp	r3, r0
   120bc:	bxeq	lr
   120c0:	ldr	r3, [pc, #16]	; 120d8 <_start@@Base+0x88>
   120c4:	cmp	r3, #0
   120c8:	bxeq	lr
   120cc:	bx	r3
   120d0:	andeq	r9, r2, r8, rrx
   120d4:	andeq	r9, r2, r8, rrx
   120d8:	andeq	r0, r0, r0
   120dc:	ldr	r0, [pc, #36]	; 12108 <_start@@Base+0xb8>
   120e0:	ldr	r1, [pc, #36]	; 1210c <_start@@Base+0xbc>
   120e4:	sub	r1, r1, r0
   120e8:	asr	r1, r1, #2
   120ec:	add	r1, r1, r1, lsr #31
   120f0:	asrs	r1, r1, #1
   120f4:	bxeq	lr
   120f8:	ldr	r3, [pc, #16]	; 12110 <_start@@Base+0xc0>
   120fc:	cmp	r3, #0
   12100:	bxeq	lr
   12104:	bx	r3
   12108:	andeq	r9, r2, r8, rrx
   1210c:	andeq	r9, r2, r8, rrx
   12110:	andeq	r0, r0, r0
   12114:	push	{r4, lr}
   12118:	ldr	r4, [pc, #24]	; 12138 <_start@@Base+0xe8>
   1211c:	ldrb	r3, [r4]
   12120:	cmp	r3, #0
   12124:	popne	{r4, pc}
   12128:	bl	120b0 <_start@@Base+0x60>
   1212c:	mov	r3, #1
   12130:	strb	r3, [r4]
   12134:	pop	{r4, pc}
   12138:	andeq	r9, r2, r8, rrx
   1213c:	b	120dc <_start@@Base+0x8c>
   12140:	push	{lr}		; (str lr, [sp, #-4]!)
   12144:	sub	sp, sp, #12
   12148:	mov	r1, #0
   1214c:	mov	r0, sp
   12150:	bl	11fc0 <gettimeofday@plt>
   12154:	movw	r3, #36972	; 0x906c
   12158:	movt	r3, #2
   1215c:	ldr	r3, [r3]
   12160:	cmp	r3, #0
   12164:	bne	12178 <_start@@Base+0x128>
   12168:	movw	r3, #36972	; 0x906c
   1216c:	movt	r3, #2
   12170:	ldrd	r0, [sp]
   12174:	strd	r0, [r3]
   12178:	movw	r2, #36972	; 0x906c
   1217c:	movt	r2, #2
   12180:	ldr	r1, [r2, #4]
   12184:	ldr	r3, [sp, #4]
   12188:	sub	r3, r3, r1
   1218c:	vmov	s15, r3
   12190:	vcvt.f64.s32	d7, s15
   12194:	vldr	d5, [pc, #36]	; 121c0 <_start@@Base+0x170>
   12198:	vdiv.f64	d6, d7, d5
   1219c:	ldr	r2, [r2]
   121a0:	ldr	r3, [sp]
   121a4:	sub	r3, r3, r2
   121a8:	vmov	s0, r3
   121ac:	vcvt.f64.s32	d0, s0
   121b0:	vadd.f64	d0, d6, d0
   121b4:	add	sp, sp, #12
   121b8:	pop	{pc}		; (ldr pc, [sp], #4)
   121bc:	nop	{0}
   121c0:	andeq	r0, r0, r0
   121c4:	smlawbmi	lr, r0, r4, r8
   121c8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   121cc:	strd	r6, [sp, #8]
   121d0:	strd	r8, [sp, #16]
   121d4:	str	sl, [sp, #24]
   121d8:	str	lr, [sp, #28]
   121dc:	mov	r4, r0
   121e0:	bl	13300 <flatcc_builder_reset@@Base>
   121e4:	mov	r3, #0
   121e8:	mov	r2, r3
   121ec:	movw	r1, #30488	; 0x7718
   121f0:	movt	r1, #1
   121f4:	mov	r0, r4
   121f8:	bl	13b30 <flatcc_builder_start_buffer@@Base>
   121fc:	cmp	r0, #0
   12200:	bne	12210 <_start@@Base+0x1c0>
   12204:	mov	r1, #36	; 0x24
   12208:	mov	r0, r4
   1220c:	bl	14af0 <flatcc_builder_start_table@@Base>
   12210:	movw	r1, #30496	; 0x7720
   12214:	movt	r1, #1
   12218:	mov	r0, r4
   1221c:	bl	16508 <flatcc_builder_create_string_str@@Base>
   12220:	subs	r5, r0, #0
   12224:	beq	1223c <_start@@Base+0x1ec>
   12228:	mov	r1, #3
   1222c:	mov	r0, r4
   12230:	bl	168a4 <flatcc_builder_table_add_offset@@Base>
   12234:	cmp	r0, #0
   12238:	strne	r5, [r0]
   1223c:	mov	r0, r4
   12240:	bl	14898 <flatcc_builder_start_offset_vector@@Base>
   12244:	mov	r6, #1000	; 0x3e8
   12248:	movw	r5, #30512	; 0x7730
   1224c:	movt	r5, #1
   12250:	mov	r8, #1
   12254:	ldr	r9, [pc, #464]	; 1242c <_start@@Base+0x3dc>
   12258:	b	122ac <_start@@Base+0x25c>
   1225c:	mov	r1, #5
   12260:	mov	r0, r4
   12264:	bl	168a4 <flatcc_builder_table_add_offset@@Base>
   12268:	cmp	r0, #0
   1226c:	strne	r7, [r0]
   12270:	mov	r2, r8
   12274:	movw	r1, #30368	; 0x76a0
   12278:	movt	r1, #1
   1227c:	mov	r0, r4
   12280:	bl	15518 <flatcc_builder_check_required@@Base>
   12284:	cmp	r0, #0
   12288:	beq	1234c <_start@@Base+0x2fc>
   1228c:	mov	r0, r4
   12290:	bl	155c8 <flatcc_builder_end_table@@Base>
   12294:	subs	r1, r0, #0
   12298:	beq	12368 <_start@@Base+0x318>
   1229c:	mov	r0, r4
   122a0:	bl	14248 <flatcc_builder_offset_vector_push@@Base>
   122a4:	subs	r6, r6, #1
   122a8:	beq	12384 <_start@@Base+0x334>
   122ac:	mov	r1, #36	; 0x24
   122b0:	mov	r0, r4
   122b4:	bl	14af0 <flatcc_builder_start_table@@Base>
   122b8:	mov	r0, r4
   122bc:	bl	1491c <flatcc_builder_start_string@@Base>
   122c0:	mov	r7, #100	; 0x64
   122c4:	mov	sl, #7
   122c8:	mov	r2, sl
   122cc:	mov	r1, r5
   122d0:	mov	r0, r4
   122d4:	bl	144b4 <flatcc_builder_append_string@@Base>
   122d8:	subs	r7, r7, #1
   122dc:	bne	122c8 <_start@@Base+0x278>
   122e0:	mov	r0, r4
   122e4:	bl	16590 <flatcc_builder_end_string@@Base>
   122e8:	subs	r7, r0, #0
   122ec:	beq	12304 <_start@@Base+0x2b4>
   122f0:	mov	r1, #3
   122f4:	mov	r0, r4
   122f8:	bl	168a4 <flatcc_builder_table_add_offset@@Base>
   122fc:	cmp	r0, #0
   12300:	strne	r7, [r0]
   12304:	mvn	r3, #0
   12308:	mov	r2, r8
   1230c:	mov	r1, r8
   12310:	mov	r0, r4
   12314:	bl	147f8 <flatcc_builder_start_vector@@Base>
   12318:	mov	r7, #100	; 0x64
   1231c:	mov	sl, #1000	; 0x3e8
   12320:	mov	r2, sl
   12324:	mov	r1, r9
   12328:	mov	r0, r4
   1232c:	bl	14090 <flatcc_builder_append_vector@@Base>
   12330:	subs	r7, r7, #1
   12334:	bne	12320 <_start@@Base+0x2d0>
   12338:	mov	r0, r4
   1233c:	bl	158fc <flatcc_builder_end_vector@@Base>
   12340:	subs	r7, r0, #0
   12344:	bne	1225c <_start@@Base+0x20c>
   12348:	b	12270 <_start@@Base+0x220>
   1234c:	ldr	r3, [pc, #220]	; 12430 <_start@@Base+0x3e0>
   12350:	mov	r2, #235	; 0xeb
   12354:	movw	r1, #30520	; 0x7738
   12358:	movt	r1, #1
   1235c:	movw	r0, #30616	; 0x7798
   12360:	movt	r0, #1
   12364:	bl	12044 <__assert_fail@plt>
   12368:	ldr	r3, [pc, #196]	; 12434 <_start@@Base+0x3e4>
   1236c:	mov	r2, #42	; 0x2a
   12370:	movw	r1, #30780	; 0x783c
   12374:	movt	r1, #1
   12378:	movw	r0, #30856	; 0x7888
   1237c:	movt	r0, #1
   12380:	bl	12044 <__assert_fail@plt>
   12384:	mov	r0, r4
   12388:	bl	15a28 <flatcc_builder_end_offset_vector@@Base>
   1238c:	subs	r5, r0, #0
   12390:	beq	123f4 <_start@@Base+0x3a4>
   12394:	mov	r1, #11
   12398:	mov	r0, r4
   1239c:	bl	168a4 <flatcc_builder_table_add_offset@@Base>
   123a0:	cmp	r0, #0
   123a4:	strne	r5, [r0]
   123a8:	mov	r2, #1
   123ac:	movw	r1, #30368	; 0x76a0
   123b0:	movt	r1, #1
   123b4:	mov	r0, r4
   123b8:	bl	15518 <flatcc_builder_check_required@@Base>
   123bc:	cmp	r0, #0
   123c0:	beq	12410 <_start@@Base+0x3c0>
   123c4:	mov	r0, r4
   123c8:	bl	155c8 <flatcc_builder_end_table@@Base>
   123cc:	mov	r1, r0
   123d0:	mov	r0, r4
   123d4:	bl	13c04 <flatcc_builder_end_buffer@@Base>
   123d8:	mov	r0, #0
   123dc:	ldrd	r4, [sp]
   123e0:	ldrd	r6, [sp, #8]
   123e4:	ldrd	r8, [sp, #16]
   123e8:	ldr	sl, [sp, #24]
   123ec:	add	sp, sp, #28
   123f0:	pop	{pc}		; (ldr pc, [sp], #4)
   123f4:	ldr	r3, [pc, #60]	; 12438 <_start@@Base+0x3e8>
   123f8:	mov	r2, #56	; 0x38
   123fc:	movw	r1, #30780	; 0x783c
   12400:	movt	r1, #1
   12404:	movw	r0, #30860	; 0x788c
   12408:	movt	r0, #1
   1240c:	bl	12044 <__assert_fail@plt>
   12410:	ldr	r3, [pc, #24]	; 12430 <_start@@Base+0x3e0>
   12414:	mov	r2, #235	; 0xeb
   12418:	movw	r1, #30520	; 0x7738
   1241c:	movt	r1, #1
   12420:	movw	r0, #30616	; 0x7798
   12424:	movt	r0, #1
   12428:	bl	12044 <__assert_fail@plt>
   1242c:	andeq	r9, r2, r4, ror r0
   12430:	andeq	r7, r1, r4, lsr #13
   12434:	andeq	r7, r1, r0, asr #13
   12438:	ldrdeq	r7, [r1], -r0

0001243c <main@@Base>:
   1243c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12440:	strd	r6, [sp, #8]
   12444:	strd	r8, [sp, #16]
   12448:	strd	sl, [sp, #24]
   1244c:	str	lr, [sp, #32]
   12450:	vpush	{d8-d9}
   12454:	sub	sp, sp, #276	; 0x114
   12458:	add	r0, sp, #36	; 0x24
   1245c:	bl	1313c <flatcc_builder_init@@Base>
   12460:	add	r0, sp, #36	; 0x24
   12464:	bl	121c8 <_start@@Base+0x178>
   12468:	add	r1, sp, #268	; 0x10c
   1246c:	add	r0, sp, #36	; 0x24
   12470:	bl	16de8 <flatcc_builder_finalize_buffer@@Base>
   12474:	mov	r7, r0
   12478:	str	r0, [sp]
   1247c:	movw	r1, #30864	; 0x7890
   12480:	movt	r1, #1
   12484:	movw	r0, #30868	; 0x7894
   12488:	movt	r0, #1
   1248c:	bl	11f78 <fopen@plt>
   12490:	subs	r4, r0, #0
   12494:	beq	129dc <main@@Base+0x5a0>
   12498:	mov	r3, r4
   1249c:	ldr	r2, [sp, #268]	; 0x10c
   124a0:	mov	r1, #1
   124a4:	mov	r0, r7
   124a8:	bl	11fb4 <fwrite@plt>
   124ac:	mov	r6, r0
   124b0:	ldr	r5, [sp, #268]	; 0x10c
   124b4:	mov	r0, r4
   124b8:	bl	1202c <fclose@plt>
   124bc:	cmp	r6, r5
   124c0:	beq	12508 <main@@Base+0xcc>
   124c4:	add	r0, sp, #36	; 0x24
   124c8:	bl	13320 <flatcc_builder_clear@@Base>
   124cc:	mov	r0, r7
   124d0:	bl	11f84 <free@plt>
   124d4:	mov	r5, #1
   124d8:	movw	r0, #31440	; 0x7ad0
   124dc:	movt	r0, #1
   124e0:	bl	11fcc <puts@plt>
   124e4:	mov	r0, r5
   124e8:	add	sp, sp, #276	; 0x114
   124ec:	vpop	{d8-d9}
   124f0:	ldrd	r4, [sp]
   124f4:	ldrd	r6, [sp, #8]
   124f8:	ldrd	r8, [sp, #16]
   124fc:	ldrd	sl, [sp, #24]
   12500:	add	sp, sp, #32
   12504:	pop	{pc}		; (ldr pc, [sp], #4)
   12508:	ldr	r1, [sp, #268]	; 0x10c
   1250c:	movw	r0, #30892	; 0x78ac
   12510:	movt	r0, #1
   12514:	bl	11f6c <printf@plt>
   12518:	movw	r0, #30912	; 0x78c0
   1251c:	movt	r0, #1
   12520:	bl	11fcc <puts@plt>
   12524:	bl	12140 <_start@@Base+0xf0>
   12528:	vmov.f64	d8, d0
   1252c:	mov	r3, #10
   12530:	str	r3, [sp, #12]
   12534:	movw	r3, #20301	; 0x4f4d
   12538:	movt	r3, #21326	; 0x534e
   1253c:	str	r3, [sp, #20]
   12540:	movw	r3, #30496	; 0x7720
   12544:	movt	r3, #1
   12548:	str	r3, [sp, #24]
   1254c:	movw	r3, #34464	; 0x86a0
   12550:	movt	r3, #1
   12554:	str	r3, [sp, #28]
   12558:	ldr	fp, [pc, #1208]	; 12a18 <main@@Base+0x5dc>
   1255c:	add	r0, sp, #36	; 0x24
   12560:	bl	121c8 <_start@@Base+0x178>
   12564:	ldr	r2, [sp, #268]	; 0x10c
   12568:	ldr	r4, [sp]
   1256c:	mov	r1, r4
   12570:	add	r0, sp, #36	; 0x24
   12574:	bl	16d90 <flatcc_builder_copy_buffer@@Base>
   12578:	ldr	r3, [r4, #4]
   1257c:	ldr	r1, [sp, #20]
   12580:	cmp	r3, r1
   12584:	bne	12840 <main@@Base+0x404>
   12588:	ldr	r3, [r4]
   1258c:	adds	r4, r4, r3
   12590:	beq	12840 <main@@Base+0x404>
   12594:	ldr	r2, [sp]
   12598:	ldr	r5, [r2, r3]
   1259c:	sub	r5, r4, r5
   125a0:	ldrh	r6, [r5]
   125a4:	cmp	r6, #11
   125a8:	bls	1285c <main@@Base+0x420>
   125ac:	ldrh	r3, [r5, #10]
   125b0:	cmp	r3, #0
   125b4:	beq	1285c <main@@Base+0x420>
   125b8:	add	r0, r4, r3
   125bc:	ldr	r3, [r4, r3]
   125c0:	add	r3, r3, #4
   125c4:	ldr	r1, [sp, #24]
   125c8:	add	r0, r0, r3
   125cc:	bl	11f60 <strcmp@plt>
   125d0:	cmp	r0, #0
   125d4:	bne	12878 <main@@Base+0x43c>
   125d8:	cmp	r6, #27
   125dc:	bls	12894 <main@@Base+0x458>
   125e0:	ldrh	r2, [r5, #26]
   125e4:	cmp	r2, #0
   125e8:	beq	12894 <main@@Base+0x458>
   125ec:	add	r3, r4, r2
   125f0:	ldr	r2, [r4, r2]
   125f4:	add	r2, r2, #4
   125f8:	adds	r3, r3, r2
   125fc:	beq	12894 <main@@Base+0x458>
   12600:	ldr	r2, [r3, #-4]
   12604:	cmp	r2, #1000	; 0x3e8
   12608:	bne	12894 <main@@Base+0x458>
   1260c:	str	r3, [sp, #4]
   12610:	add	r3, r3, #4000	; 0xfa0
   12614:	str	r3, [sp, #16]
   12618:	movw	r7, #30512	; 0x7730
   1261c:	movt	r7, #1
   12620:	mov	r8, #7
   12624:	mov	r9, #1000	; 0x3e8
   12628:	ldr	r2, [sp, #4]
   1262c:	mov	r3, r2
   12630:	add	r2, r2, #4
   12634:	str	r2, [sp, #4]
   12638:	ldr	r1, [r3]
   1263c:	adds	r2, r3, r1
   12640:	beq	128b0 <main@@Base+0x474>
   12644:	ldr	r3, [r3, r1]
   12648:	sub	r3, r2, r3
   1264c:	ldrh	r0, [r3]
   12650:	cmp	r0, #11
   12654:	bls	128cc <main@@Base+0x490>
   12658:	ldrh	r1, [r3, #10]
   1265c:	cmp	r1, #0
   12660:	beq	128cc <main@@Base+0x490>
   12664:	add	ip, r2, r1
   12668:	ldr	r1, [r2, r1]
   1266c:	add	r1, r1, #4
   12670:	add	r1, ip, r1
   12674:	str	r1, [sp, #8]
   12678:	cmp	r0, #15
   1267c:	movls	r6, #0
   12680:	bls	126a4 <main@@Base+0x268>
   12684:	ldrh	r3, [r3, #14]
   12688:	cmp	r3, #0
   1268c:	moveq	r6, #0
   12690:	beq	126a4 <main@@Base+0x268>
   12694:	add	r6, r2, r3
   12698:	ldr	r3, [r2, r3]
   1269c:	add	r3, r3, #4
   126a0:	add	r6, r6, r3
   126a4:	ldr	r3, [sp, #8]
   126a8:	cmp	r3, #0
   126ac:	beq	128e8 <main@@Base+0x4ac>
   126b0:	ldr	r3, [r3, #-4]
   126b4:	cmp	r3, #700	; 0x2bc
   126b8:	bne	128e8 <main@@Base+0x4ac>
   126bc:	cmp	r6, #0
   126c0:	beq	12904 <main@@Base+0x4c8>
   126c4:	ldr	r3, [r6, #-4]
   126c8:	ldr	r2, [sp, #28]
   126cc:	cmp	r3, r2
   126d0:	bne	12904 <main@@Base+0x4c8>
   126d4:	ldr	r4, [sp, #8]
   126d8:	mov	r5, #0
   126dc:	mov	r2, r8
   126e0:	mov	r1, r7
   126e4:	mov	r0, r4
   126e8:	bl	11f9c <memcmp@plt>
   126ec:	cmp	r0, #0
   126f0:	bne	12920 <main@@Base+0x4e4>
   126f4:	add	r5, r5, #1
   126f8:	add	r4, r4, #7
   126fc:	cmp	r5, #100	; 0x64
   12700:	bne	126dc <main@@Base+0x2a0>
   12704:	mov	r4, r6
   12708:	add	r6, r6, #99328	; 0x18400
   1270c:	add	r6, r6, #672	; 0x2a0
   12710:	mov	r2, r9
   12714:	mov	r1, fp
   12718:	mov	r0, r4
   1271c:	bl	11f9c <memcmp@plt>
   12720:	cmp	r0, #0
   12724:	bne	12964 <main@@Base+0x528>
   12728:	add	r4, r4, #1000	; 0x3e8
   1272c:	cmp	r6, r4
   12730:	bne	12710 <main@@Base+0x2d4>
   12734:	ldr	r3, [sp, #16]
   12738:	ldr	r2, [sp, #4]
   1273c:	cmp	r3, r2
   12740:	bne	12628 <main@@Base+0x1ec>
   12744:	ldr	r3, [sp, #12]
   12748:	subs	r3, r3, #1
   1274c:	str	r3, [sp, #12]
   12750:	bne	1255c <main@@Base+0x120>
   12754:	mov	r5, r0
   12758:	bl	12140 <_start@@Base+0xf0>
   1275c:	ldr	r4, [sp, #268]	; 0x10c
   12760:	vsub.f64	d8, d0, d8
   12764:	movw	r1, #31164	; 0x79bc
   12768:	movt	r1, #1
   1276c:	movw	r0, #31208	; 0x79e8
   12770:	movt	r0, #1
   12774:	bl	11f6c <printf@plt>
   12778:	vmov	r2, r3, d8
   1277c:	movw	r0, #31224	; 0x79f8
   12780:	movt	r0, #1
   12784:	bl	11f6c <printf@plt>
   12788:	mov	r1, #10
   1278c:	movw	r0, #31248	; 0x7a10
   12790:	movt	r0, #1
   12794:	bl	11f6c <printf@plt>
   12798:	mov	r1, r4
   1279c:	movw	r0, #31264	; 0x7a20
   127a0:	movt	r0, #1
   127a4:	bl	11f6c <printf@plt>
   127a8:	vmov	s15, r4
   127ac:	vcvt.f64.u32	d7, s15
   127b0:	vldr	d9, [pc, #576]	; 129f8 <main@@Base+0x5bc>
   127b4:	vmul.f64	d7, d7, d9
   127b8:	vldr	d5, [pc, #576]	; 12a00 <main@@Base+0x5c4>
   127bc:	vdiv.f64	d6, d7, d5
   127c0:	vdiv.f64	d7, d6, d8
   127c4:	vmov	r2, r3, d7
   127c8:	movw	r0, #31284	; 0x7a34
   127cc:	movt	r0, #1
   127d0:	bl	11f6c <printf@plt>
   127d4:	vdiv.f64	d7, d9, d8
   127d8:	vmov	r2, r3, d7
   127dc:	movw	r0, #31308	; 0x7a4c
   127e0:	movt	r0, #1
   127e4:	bl	11f6c <printf@plt>
   127e8:	vldr	d7, [pc, #536]	; 12a08 <main@@Base+0x5cc>
   127ec:	vmul.f64	d8, d8, d7
   127f0:	vdiv.f64	d7, d8, d9
   127f4:	vldr	d6, [pc, #532]	; 12a10 <main@@Base+0x5d4>
   127f8:	vcmpe.f64	d7, d6
   127fc:	vmrs	APSR_nzcv, fpscr
   12800:	bmi	12980 <main@@Base+0x544>
   12804:	vldr	d6, [pc, #500]	; 12a00 <main@@Base+0x5c4>
   12808:	vcmpe.f64	d7, d6
   1280c:	vmrs	APSR_nzcv, fpscr
   12810:	bmi	129a4 <main@@Base+0x568>
   12814:	vldr	d6, [pc, #492]	; 12a08 <main@@Base+0x5cc>
   12818:	vcmpe.f64	d7, d6
   1281c:	vmrs	APSR_nzcv, fpscr
   12820:	bpl	129c0 <main@@Base+0x584>
   12824:	vldr	d6, [pc, #468]	; 12a00 <main@@Base+0x5c4>
   12828:	vdiv.f64	d7, d7, d6
   1282c:	vmov	r2, r3, d7
   12830:	movw	r0, #31392	; 0x7aa0
   12834:	movt	r0, #1
   12838:	bl	11f6c <printf@plt>
   1283c:	b	12990 <main@@Base+0x554>
   12840:	ldr	r3, [pc, #468]	; 12a1c <main@@Base+0x5e0>
   12844:	movw	r2, #699	; 0x2bb
   12848:	movw	r1, #30932	; 0x78d4
   1284c:	movt	r1, #1
   12850:	movw	r0, #31028	; 0x7934
   12854:	movt	r0, #1
   12858:	bl	12044 <__assert_fail@plt>
   1285c:	ldr	r3, [pc, #440]	; 12a1c <main@@Base+0x5e0>
   12860:	movw	r2, #699	; 0x2bb
   12864:	movw	r1, #30932	; 0x78d4
   12868:	movt	r1, #1
   1286c:	movw	r0, #31068	; 0x795c
   12870:	movt	r0, #1
   12874:	bl	12044 <__assert_fail@plt>
   12878:	ldr	r3, [pc, #416]	; 12a20 <main@@Base+0x5e4>
   1287c:	mov	r2, #139	; 0x8b
   12880:	movw	r1, #30780	; 0x783c
   12884:	movt	r1, #1
   12888:	movw	r0, #31104	; 0x7980
   1288c:	movt	r0, #1
   12890:	bl	12044 <__assert_fail@plt>
   12894:	ldr	r3, [pc, #388]	; 12a20 <main@@Base+0x5e4>
   12898:	mov	r2, #143	; 0x8f
   1289c:	movw	r1, #30780	; 0x783c
   128a0:	movt	r1, #1
   128a4:	movw	r0, #31104	; 0x7980
   128a8:	movt	r0, #1
   128ac:	bl	12044 <__assert_fail@plt>
   128b0:	ldr	r3, [pc, #356]	; 12a1c <main@@Base+0x5e0>
   128b4:	movw	r2, #699	; 0x2bb
   128b8:	movw	r1, #30932	; 0x78d4
   128bc:	movt	r1, #1
   128c0:	movw	r0, #31028	; 0x7934
   128c4:	movt	r0, #1
   128c8:	bl	12044 <__assert_fail@plt>
   128cc:	ldr	r3, [pc, #328]	; 12a1c <main@@Base+0x5e0>
   128d0:	movw	r2, #699	; 0x2bb
   128d4:	movw	r1, #30932	; 0x78d4
   128d8:	movt	r1, #1
   128dc:	movw	r0, #31068	; 0x795c
   128e0:	movt	r0, #1
   128e4:	bl	12044 <__assert_fail@plt>
   128e8:	ldr	r3, [pc, #308]	; 12a24 <main@@Base+0x5e8>
   128ec:	mov	r2, #74	; 0x4a
   128f0:	movw	r1, #30780	; 0x783c
   128f4:	movt	r1, #1
   128f8:	movw	r0, #33416	; 0x8288
   128fc:	movt	r0, #1
   12900:	bl	12044 <__assert_fail@plt>
   12904:	ldr	r3, [pc, #280]	; 12a24 <main@@Base+0x5e8>
   12908:	mov	r2, #78	; 0x4e
   1290c:	movw	r1, #30780	; 0x783c
   12910:	movt	r1, #1
   12914:	movw	r0, #33416	; 0x8288
   12918:	movt	r0, #1
   1291c:	bl	12044 <__assert_fail@plt>
   12920:	ldr	r2, [sp, #8]
   12924:	mov	r1, r5
   12928:	movw	r0, #31116	; 0x798c
   1292c:	movt	r0, #1
   12930:	bl	11f6c <printf@plt>
   12934:	ldr	r3, [sp]
   12938:	sub	r1, r4, r3
   1293c:	movw	r0, #31148	; 0x79ac
   12940:	movt	r0, #1
   12944:	bl	11f6c <printf@plt>
   12948:	ldr	r3, [pc, #212]	; 12a24 <main@@Base+0x5e8>
   1294c:	mov	r2, #85	; 0x55
   12950:	movw	r1, #30780	; 0x783c
   12954:	movt	r1, #1
   12958:	movw	r0, #33416	; 0x8288
   1295c:	movt	r0, #1
   12960:	bl	12044 <__assert_fail@plt>
   12964:	ldr	r3, [pc, #184]	; 12a24 <main@@Base+0x5e8>
   12968:	mov	r2, #91	; 0x5b
   1296c:	movw	r1, #30780	; 0x783c
   12970:	movt	r1, #1
   12974:	movw	r0, #33416	; 0x8288
   12978:	movt	r0, #1
   1297c:	bl	12044 <__assert_fail@plt>
   12980:	vmov	r2, r3, d7
   12984:	movw	r0, #31344	; 0x7a70
   12988:	movt	r0, #1
   1298c:	bl	11f6c <printf@plt>
   12990:	add	r0, sp, #36	; 0x24
   12994:	bl	13320 <flatcc_builder_clear@@Base>
   12998:	ldr	r0, [sp]
   1299c:	bl	11f84 <free@plt>
   129a0:	b	124e4 <main@@Base+0xa8>
   129a4:	vldr	d6, [pc, #100]	; 12a10 <main@@Base+0x5d4>
   129a8:	vdiv.f64	d7, d7, d6
   129ac:	vmov	r2, r3, d7
   129b0:	movw	r0, #31368	; 0x7a88
   129b4:	movt	r0, #1
   129b8:	bl	11f6c <printf@plt>
   129bc:	b	12990 <main@@Base+0x554>
   129c0:	vldr	d6, [pc, #64]	; 12a08 <main@@Base+0x5cc>
   129c4:	vdiv.f64	d7, d7, d6
   129c8:	vmov	r2, r3, d7
   129cc:	movw	r0, #31416	; 0x7ab8
   129d0:	movt	r0, #1
   129d4:	bl	11f6c <printf@plt>
   129d8:	b	12990 <main@@Base+0x554>
   129dc:	add	r0, sp, #36	; 0x24
   129e0:	bl	13320 <flatcc_builder_clear@@Base>
   129e4:	ldr	r0, [sp]
   129e8:	bl	11f84 <free@plt>
   129ec:	mvn	r5, #0
   129f0:	b	124d8 <main@@Base+0x9c>
   129f4:	nop	{0}
   129f8:	andeq	r0, r0, r0
   129fc:	eormi	r0, r4, r0
   12a00:	andeq	r0, r0, r0
   12a04:	smlawbmi	lr, r0, r4, r8
   12a08:	andeq	r0, r0, r0
   12a0c:	bicmi	ip, sp, r5, ror #26
   12a10:	andeq	r0, r0, r0
   12a14:	addmi	r4, pc, r0
   12a18:	andeq	r9, r2, r4, ror r0
   12a1c:	andeq	r7, r1, r4, ror #13
   12a20:	andeq	r7, r1, r0, lsl #14
   12a24:	andeq	r7, r1, r8, lsl #14
   12a28:	strd	r4, [sp, #-16]!
   12a2c:	str	r6, [sp, #8]
   12a30:	str	lr, [sp, #12]
   12a34:	sub	sp, sp, #8
   12a38:	mov	r4, r0
   12a3c:	mov	r5, r2
   12a40:	ldr	r2, [r0, #28]
   12a44:	mov	r3, #1
   12a48:	str	r3, [sp]
   12a4c:	ldr	r6, [r0, #48]	; 0x30
   12a50:	add	r2, r1, r2
   12a54:	add	r1, r0, #60	; 0x3c
   12a58:	ldr	r0, [r0, #40]	; 0x28
   12a5c:	blx	r6
   12a60:	cmp	r0, #0
   12a64:	bne	12aa8 <main@@Base+0x66c>
   12a68:	ldr	r1, [r4, #28]
   12a6c:	ldr	r2, [r4, #60]	; 0x3c
   12a70:	add	r2, r2, r1
   12a74:	str	r2, [r4, #16]
   12a78:	ldr	r3, [r4, #64]	; 0x40
   12a7c:	sub	r3, r3, r1
   12a80:	cmp	r3, r5
   12a84:	movcs	r3, r5
   12a88:	str	r3, [r4, #24]
   12a8c:	ldr	r3, [r4, #32]
   12a90:	str	r5, [r3, #4]
   12a94:	add	sp, sp, #8
   12a98:	ldrd	r4, [sp]
   12a9c:	ldr	r6, [sp, #8]
   12aa0:	add	sp, sp, #12
   12aa4:	pop	{pc}		; (ldr pc, [sp], #4)
   12aa8:	mvn	r0, #0
   12aac:	b	12a94 <main@@Base+0x658>

00012ab0 <flatcc_builder_default_alloc@@Base>:
   12ab0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12ab4:	strd	r6, [sp, #8]
   12ab8:	str	r8, [sp, #16]
   12abc:	str	lr, [sp, #20]
   12ac0:	mov	r5, r1
   12ac4:	cmp	r2, #0
   12ac8:	beq	12b00 <flatcc_builder_default_alloc@@Base+0x50>
   12acc:	mov	r6, r3
   12ad0:	ldr	r3, [sp, #24]
   12ad4:	sub	r3, r3, #1
   12ad8:	cmp	r3, #6
   12adc:	ldrls	pc, [pc, r3, lsl #2]
   12ae0:	b	12bac <flatcc_builder_default_alloc@@Base+0xfc>
   12ae4:	andeq	r2, r1, ip, lsr #22
   12ae8:	andeq	r2, r1, ip, lsr #23
   12aec:	andeq	r2, r1, ip, lsr #23
   12af0:	andeq	r2, r1, r4, lsr #22
   12af4:			; <UNDEFINED> instruction: 0x00012bb4
   12af8:	andeq	r2, r1, ip, lsr #23
   12afc:	andeq	r2, r1, r4, lsr #23
   12b00:	ldr	r0, [r1]
   12b04:	cmp	r0, #0
   12b08:	moveq	r0, #0
   12b0c:	beq	12b90 <flatcc_builder_default_alloc@@Base+0xe0>
   12b10:	bl	11f84 <free@plt>
   12b14:	mov	r0, #0
   12b18:	str	r0, [r5]
   12b1c:	str	r0, [r5, #4]
   12b20:	b	12b90 <flatcc_builder_default_alloc@@Base+0xe0>
   12b24:	mov	r4, #288	; 0x120
   12b28:	b	12b30 <flatcc_builder_default_alloc@@Base+0x80>
   12b2c:	mov	r4, #256	; 0x100
   12b30:	cmp	r4, r2
   12b34:	bcs	12b44 <flatcc_builder_default_alloc@@Base+0x94>
   12b38:	lsl	r4, r4, #1
   12b3c:	cmp	r2, r4
   12b40:	bhi	12b38 <flatcc_builder_default_alloc@@Base+0x88>
   12b44:	ldr	r3, [r5, #4]
   12b48:	cmp	r3, r2
   12b4c:	bcc	12b5c <flatcc_builder_default_alloc@@Base+0xac>
   12b50:	cmp	r4, r3, lsr #1
   12b54:	movls	r0, #0
   12b58:	bls	12b90 <flatcc_builder_default_alloc@@Base+0xe0>
   12b5c:	mov	r1, r4
   12b60:	ldr	r0, [r5]
   12b64:	bl	11fa8 <realloc@plt>
   12b68:	subs	r7, r0, #0
   12b6c:	beq	12bd0 <flatcc_builder_default_alloc@@Base+0x120>
   12b70:	cmp	r6, #0
   12b74:	beq	12b84 <flatcc_builder_default_alloc@@Base+0xd4>
   12b78:	ldr	r0, [r5, #4]
   12b7c:	cmp	r0, r4
   12b80:	bcc	12bbc <flatcc_builder_default_alloc@@Base+0x10c>
   12b84:	str	r7, [r5]
   12b88:	str	r4, [r5, #4]
   12b8c:	mov	r0, #0
   12b90:	ldrd	r4, [sp]
   12b94:	ldrd	r6, [sp, #8]
   12b98:	ldr	r8, [sp, #16]
   12b9c:	add	sp, sp, #20
   12ba0:	pop	{pc}		; (ldr pc, [sp], #4)
   12ba4:	mov	r4, #64	; 0x40
   12ba8:	b	12b30 <flatcc_builder_default_alloc@@Base+0x80>
   12bac:	mov	r4, #32
   12bb0:	b	12b30 <flatcc_builder_default_alloc@@Base+0x80>
   12bb4:	mov	r4, r2
   12bb8:	b	12b44 <flatcc_builder_default_alloc@@Base+0x94>
   12bbc:	sub	r2, r4, r0
   12bc0:	mov	r1, #0
   12bc4:	add	r0, r7, r0
   12bc8:	bl	12014 <memset@plt>
   12bcc:	b	12b84 <flatcc_builder_default_alloc@@Base+0xd4>
   12bd0:	mvn	r0, #0
   12bd4:	b	12b90 <flatcc_builder_default_alloc@@Base+0xe0>
   12bd8:	cmp	r2, #0
   12bdc:	bne	12bec <flatcc_builder_default_alloc@@Base+0x13c>
   12be0:	ldrh	r2, [r0, #132]	; 0x84
   12be4:	cmp	r2, #0
   12be8:	moveq	r2, #1
   12bec:	ldrh	ip, [r1]
   12bf0:	cmp	ip, #3
   12bf4:	movls	ip, #4
   12bf8:	strhls	ip, [r1]
   12bfc:	ldrh	ip, [r1]
   12c00:	cmp	ip, r2
   12c04:	strhcc	r2, [r1]
   12c08:	cmp	r3, #0
   12c0c:	bne	12cec <flatcc_builder_default_alloc@@Base+0x23c>
   12c10:	strd	r4, [sp, #-12]!
   12c14:	str	lr, [sp, #8]
   12c18:	sub	sp, sp, #84	; 0x54
   12c1c:	ldr	r4, [r0, #140]	; 0x8c
   12c20:	sub	r2, r2, #1
   12c24:	ands	r2, r2, r4
   12c28:	bne	12c40 <flatcc_builder_default_alloc@@Base+0x190>
   12c2c:	mov	r0, #0
   12c30:	add	sp, sp, #84	; 0x54
   12c34:	ldrd	r4, [sp]
   12c38:	add	sp, sp, #8
   12c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   12c40:	str	r2, [sp, #8]
   12c44:	movw	r3, #31460	; 0x7ae4
   12c48:	movt	r3, #1
   12c4c:	str	r3, [sp, #16]
   12c50:	str	r2, [sp, #20]
   12c54:	mov	r3, #1
   12c58:	str	r3, [sp, #12]
   12c5c:	add	r3, r4, r2
   12c60:	str	r3, [r0, #140]	; 0x8c
   12c64:	cmp	r4, r3
   12c68:	bgt	12cb4 <flatcc_builder_default_alloc@@Base+0x204>
   12c6c:	str	r2, [sp]
   12c70:	ldr	r5, [r0, #44]	; 0x2c
   12c74:	mov	r3, r4
   12c78:	mov	r2, #1
   12c7c:	add	r1, sp, #16
   12c80:	ldr	r0, [r0, #36]	; 0x24
   12c84:	blx	r5
   12c88:	cmp	r0, #0
   12c8c:	bne	12cd0 <flatcc_builder_default_alloc@@Base+0x220>
   12c90:	cmn	r4, #1
   12c94:	bne	12c2c <flatcc_builder_default_alloc@@Base+0x17c>
   12c98:	ldr	r3, [pc, #84]	; 12cf4 <flatcc_builder_default_alloc@@Base+0x244>
   12c9c:	movw	r2, #702	; 0x2be
   12ca0:	movw	r1, #33332	; 0x8234
   12ca4:	movt	r1, #1
   12ca8:	movw	r0, #33416	; 0x8288
   12cac:	movt	r0, #1
   12cb0:	bl	12044 <__assert_fail@plt>
   12cb4:	ldr	r3, [pc, #60]	; 12cf8 <flatcc_builder_default_alloc@@Base+0x248>
   12cb8:	movw	r2, #673	; 0x2a1
   12cbc:	movw	r1, #33332	; 0x8234
   12cc0:	movt	r1, #1
   12cc4:	movw	r0, #33416	; 0x8288
   12cc8:	movt	r0, #1
   12ccc:	bl	12044 <__assert_fail@plt>
   12cd0:	ldr	r3, [pc, #32]	; 12cf8 <flatcc_builder_default_alloc@@Base+0x248>
   12cd4:	movw	r2, #677	; 0x2a5
   12cd8:	movw	r1, #33332	; 0x8234
   12cdc:	movt	r1, #1
   12ce0:	movw	r0, #33416	; 0x8288
   12ce4:	movt	r0, #1
   12ce8:	bl	12044 <__assert_fail@plt>
   12cec:	mov	r0, #0
   12cf0:	bx	lr
   12cf4:	strdeq	r7, [r1], -r0
   12cf8:	andeq	r7, r1, r4, ror #25
   12cfc:	strd	r4, [sp, #-20]!	; 0xffffffec
   12d00:	strd	r6, [sp, #8]
   12d04:	str	lr, [sp, #16]
   12d08:	sub	sp, sp, #12
   12d0c:	mov	r4, r0
   12d10:	mov	r6, r1
   12d14:	ldr	r3, [r0, #156]	; 0x9c
   12d18:	add	r2, r3, #1
   12d1c:	str	r2, [r0, #156]	; 0x9c
   12d20:	ldr	r1, [r0, #160]	; 0xa0
   12d24:	cmp	r2, r1
   12d28:	ble	12de0 <flatcc_builder_default_alloc@@Base+0x330>
   12d2c:	ldr	r1, [r0, #176]	; 0xb0
   12d30:	cmp	r2, r1
   12d34:	cmpgt	r1, #0
   12d38:	bgt	12e54 <flatcc_builder_default_alloc@@Base+0x3a4>
   12d3c:	add	r3, r3, r3, lsl #3
   12d40:	lsl	r5, r3, #2
   12d44:	add	r2, r5, #36	; 0x24
   12d48:	ldr	r3, [r0, #88]	; 0x58
   12d4c:	cmp	r2, r3
   12d50:	bls	12d78 <flatcc_builder_default_alloc@@Base+0x2c8>
   12d54:	mov	r3, #4
   12d58:	str	r3, [sp]
   12d5c:	ldr	r7, [r0, #48]	; 0x30
   12d60:	mov	r3, #0
   12d64:	add	r1, r0, #84	; 0x54
   12d68:	ldr	r0, [r0, #40]	; 0x28
   12d6c:	blx	r7
   12d70:	cmp	r0, #0
   12d74:	bne	12dc4 <flatcc_builder_default_alloc@@Base+0x314>
   12d78:	ldr	r3, [r4, #84]	; 0x54
   12d7c:	add	r5, r3, r5
   12d80:	str	r5, [r4, #32]
   12d84:	cmp	r5, #0
   12d88:	beq	12e5c <flatcc_builder_default_alloc@@Base+0x3ac>
   12d8c:	ldr	r3, [r4, #88]	; 0x58
   12d90:	movw	r2, #36409	; 0x8e39
   12d94:	movt	r2, #14563	; 0x38e3
   12d98:	umull	r2, r3, r2, r3
   12d9c:	lsr	r3, r3, #3
   12da0:	ldr	r2, [r4, #176]	; 0xb0
   12da4:	cmp	r2, #0
   12da8:	cmpgt	r3, r2
   12dac:	movgt	r1, #1
   12db0:	movle	r1, #0
   12db4:	cmp	r1, #0
   12db8:	movne	r3, r2
   12dbc:	str	r3, [r4, #160]	; 0xa0
   12dc0:	b	12dec <flatcc_builder_default_alloc@@Base+0x33c>
   12dc4:	ldr	r3, [pc, #152]	; 12e64 <flatcc_builder_default_alloc@@Base+0x3b4>
   12dc8:	mov	r2, #308	; 0x134
   12dcc:	movw	r1, #33332	; 0x8234
   12dd0:	movt	r1, #1
   12dd4:	movw	r0, #33416	; 0x8288
   12dd8:	movt	r0, #1
   12ddc:	bl	12044 <__assert_fail@plt>
   12de0:	ldr	r3, [r0, #32]
   12de4:	add	r3, r3, #36	; 0x24
   12de8:	str	r3, [r0, #32]
   12dec:	ldr	r3, [r4, #32]
   12df0:	ldr	r2, [r4, #20]
   12df4:	str	r2, [r3, #8]
   12df8:	ldr	r3, [r4, #32]
   12dfc:	ldrh	r2, [r4, #130]	; 0x82
   12e00:	strh	r2, [r3, #12]
   12e04:	strh	r6, [r4, #130]	; 0x82
   12e08:	ldr	r3, [r4, #32]
   12e0c:	ldr	r2, [r4, #28]
   12e10:	str	r2, [r3]
   12e14:	ldr	r3, [r4, #32]
   12e18:	mvn	r2, #3
   12e1c:	str	r2, [r3, #4]
   12e20:	ldr	r3, [r4, #28]
   12e24:	ldr	r2, [r4, #20]
   12e28:	add	r3, r3, r2
   12e2c:	add	r3, r3, #7
   12e30:	bic	r3, r3, #7
   12e34:	str	r3, [r4, #28]
   12e38:	mov	r0, #0
   12e3c:	str	r0, [r4, #20]
   12e40:	add	sp, sp, #12
   12e44:	ldrd	r4, [sp]
   12e48:	ldrd	r6, [sp, #8]
   12e4c:	add	sp, sp, #16
   12e50:	pop	{pc}		; (ldr pc, [sp], #4)
   12e54:	mvn	r0, #0
   12e58:	b	12e40 <flatcc_builder_default_alloc@@Base+0x390>
   12e5c:	mvn	r0, #0
   12e60:	b	12e40 <flatcc_builder_default_alloc@@Base+0x390>
   12e64:	andeq	r7, r1, r0, lsl #26
   12e68:	strd	r4, [sp, #-16]!
   12e6c:	str	r6, [sp, #8]
   12e70:	str	lr, [sp, #12]
   12e74:	sub	sp, sp, #88	; 0x58
   12e78:	cmn	r2, #-1073741823	; 0xc0000001
   12e7c:	bhi	13060 <flatcc_builder_default_alloc@@Base+0x5b0>
   12e80:	ldrh	ip, [r0, #128]	; 0x80
   12e84:	cmp	ip, #3
   12e88:	movls	ip, #4
   12e8c:	strhls	ip, [r0, #128]	; 0x80
   12e90:	str	r2, [sp, #84]	; 0x54
   12e94:	ldr	lr, [r0, #136]	; 0x88
   12e98:	and	ip, lr, #3
   12e9c:	mov	r4, #4
   12ea0:	str	r4, [sp, #12]
   12ea4:	add	r5, sp, #84	; 0x54
   12ea8:	str	r5, [sp, #20]
   12eac:	str	r4, [sp, #24]
   12eb0:	mov	r4, #1
   12eb4:	str	r4, [sp, #16]
   12eb8:	lsls	r4, r2, #2
   12ebc:	beq	12ed8 <flatcc_builder_default_alloc@@Base+0x428>
   12ec0:	add	r5, r4, #4
   12ec4:	str	r5, [sp, #12]
   12ec8:	str	r1, [sp, #28]
   12ecc:	str	r4, [sp, #32]
   12ed0:	mov	r4, #2
   12ed4:	str	r4, [sp, #16]
   12ed8:	cmp	ip, #0
   12edc:	beq	12f10 <flatcc_builder_default_alloc@@Base+0x460>
   12ee0:	ldr	r4, [sp, #12]
   12ee4:	add	r4, r4, ip
   12ee8:	str	r4, [sp, #12]
   12eec:	ldr	r4, [sp, #16]
   12ef0:	add	r4, r4, #1
   12ef4:	add	r5, sp, #88	; 0x58
   12ef8:	add	r6, r5, r4, lsl #3
   12efc:	movw	r5, #31460	; 0x7ae4
   12f00:	movt	r5, #1
   12f04:	str	r5, [r6, #-76]	; 0xffffffb4
   12f08:	str	ip, [r6, #-72]	; 0xffffffb8
   12f0c:	str	r4, [sp, #16]
   12f10:	mov	r5, r0
   12f14:	ldr	r6, [sp, #12]
   12f18:	cmp	r2, #0
   12f1c:	beq	12fd8 <flatcc_builder_default_alloc@@Base+0x528>
   12f20:	mov	ip, r3
   12f24:	add	r4, r2, r3
   12f28:	mov	r2, r1
   12f2c:	add	r1, r1, r6
   12f30:	sub	r0, r1, lr
   12f34:	b	12f58 <flatcc_builder_default_alloc@@Base+0x4a8>
   12f38:	cmp	r3, #0
   12f3c:	beq	12fbc <flatcc_builder_default_alloc@@Base+0x50c>
   12f40:	ldrb	r1, [ip]
   12f44:	cmp	r1, #0
   12f48:	bne	12fa0 <flatcc_builder_default_alloc@@Base+0x4f0>
   12f4c:	add	ip, ip, #1
   12f50:	cmp	ip, r4
   12f54:	beq	12fd8 <flatcc_builder_default_alloc@@Base+0x528>
   12f58:	ldr	r1, [r2], #4
   12f5c:	cmp	r1, #0
   12f60:	beq	12f38 <flatcc_builder_default_alloc@@Base+0x488>
   12f64:	sub	lr, r0, r2
   12f68:	add	r1, lr, r1
   12f6c:	str	r1, [r2, #-4]
   12f70:	cmp	r3, #0
   12f74:	beq	12f4c <flatcc_builder_default_alloc@@Base+0x49c>
   12f78:	ldrb	r1, [ip]
   12f7c:	cmp	r1, #0
   12f80:	bne	12f4c <flatcc_builder_default_alloc@@Base+0x49c>
   12f84:	ldr	r3, [pc, #220]	; 13068 <flatcc_builder_default_alloc@@Base+0x5b8>
   12f88:	movw	r2, #1457	; 0x5b1
   12f8c:	movw	r1, #33332	; 0x8234
   12f90:	movt	r1, #1
   12f94:	movw	r0, #33404	; 0x827c
   12f98:	movt	r0, #1
   12f9c:	bl	12044 <__assert_fail@plt>
   12fa0:	ldr	r3, [pc, #192]	; 13068 <flatcc_builder_default_alloc@@Base+0x5b8>
   12fa4:	movw	r2, #1461	; 0x5b5
   12fa8:	movw	r1, #33332	; 0x8234
   12fac:	movt	r1, #1
   12fb0:	movw	r0, #33420	; 0x828c
   12fb4:	movt	r0, #1
   12fb8:	bl	12044 <__assert_fail@plt>
   12fbc:	ldr	r3, [pc, #164]	; 13068 <flatcc_builder_default_alloc@@Base+0x5b8>
   12fc0:	movw	r2, #1463	; 0x5b7
   12fc4:	movw	r1, #33332	; 0x8234
   12fc8:	movt	r1, #1
   12fcc:	movw	r0, #33416	; 0x8288
   12fd0:	movt	r0, #1
   12fd4:	bl	12044 <__assert_fail@plt>
   12fd8:	ldr	r3, [r5, #136]	; 0x88
   12fdc:	sub	r4, r3, r6
   12fe0:	cmp	r3, r4
   12fe4:	ble	13028 <flatcc_builder_default_alloc@@Base+0x578>
   12fe8:	str	r6, [sp]
   12fec:	ldr	r6, [r5, #44]	; 0x2c
   12ff0:	mov	r3, r4
   12ff4:	ldr	r2, [sp, #16]
   12ff8:	add	r1, sp, #20
   12ffc:	ldr	r0, [r5, #36]	; 0x24
   13000:	blx	r6
   13004:	cmp	r0, #0
   13008:	streq	r4, [r5, #136]	; 0x88
   1300c:	bne	13044 <flatcc_builder_default_alloc@@Base+0x594>
   13010:	mov	r0, r4
   13014:	add	sp, sp, #88	; 0x58
   13018:	ldrd	r4, [sp]
   1301c:	ldr	r6, [sp, #8]
   13020:	add	sp, sp, #12
   13024:	pop	{pc}		; (ldr pc, [sp], #4)
   13028:	ldr	r3, [pc, #60]	; 1306c <flatcc_builder_default_alloc@@Base+0x5bc>
   1302c:	movw	r2, #647	; 0x287
   13030:	movw	r1, #33332	; 0x8234
   13034:	movt	r1, #1
   13038:	movw	r0, #33416	; 0x8288
   1303c:	movt	r0, #1
   13040:	bl	12044 <__assert_fail@plt>
   13044:	ldr	r3, [pc, #32]	; 1306c <flatcc_builder_default_alloc@@Base+0x5bc>
   13048:	movw	r2, #651	; 0x28b
   1304c:	movw	r1, #33332	; 0x8234
   13050:	movt	r1, #1
   13054:	movw	r0, #33416	; 0x8288
   13058:	movt	r0, #1
   1305c:	bl	12044 <__assert_fail@plt>
   13060:	mov	r4, #0
   13064:	b	13010 <flatcc_builder_default_alloc@@Base+0x560>
   13068:	andeq	r7, r1, r0, lsl sp
   1306c:	andeq	r7, r1, r0, lsr sp

00013070 <flatcc_builder_flush_vtable_cache@@Base>:
   13070:	ldr	r3, [r0, #116]	; 0x74
   13074:	cmp	r3, #0
   13078:	bxeq	lr
   1307c:	str	r4, [sp, #-8]!
   13080:	str	lr, [sp, #4]
   13084:	mov	r4, r0
   13088:	ldr	r2, [r0, #96]	; 0x60
   1308c:	mov	r1, #0
   13090:	ldr	r0, [r0, #92]	; 0x5c
   13094:	bl	12014 <memset@plt>
   13098:	mov	r3, #16
   1309c:	str	r3, [r4, #124]	; 0x7c
   130a0:	mov	r3, #0
   130a4:	str	r3, [r4, #120]	; 0x78
   130a8:	ldr	r4, [sp]
   130ac:	add	sp, sp, #4
   130b0:	pop	{pc}		; (ldr pc, [sp], #4)

000130b4 <flatcc_builder_custom_init@@Base>:
   130b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   130b8:	strd	r6, [sp, #8]
   130bc:	str	r8, [sp, #16]
   130c0:	str	lr, [sp, #20]
   130c4:	mov	r4, r0
   130c8:	mov	r6, r1
   130cc:	mov	r7, r2
   130d0:	mov	r5, r3
   130d4:	mov	r2, #232	; 0xe8
   130d8:	mov	r1, #0
   130dc:	bl	12014 <memset@plt>
   130e0:	cmp	r6, #0
   130e4:	beq	13124 <flatcc_builder_custom_init@@Base+0x70>
   130e8:	movw	r3, #10928	; 0x2ab0
   130ec:	movt	r3, #1
   130f0:	cmp	r5, #0
   130f4:	moveq	r5, r3
   130f8:	ldr	r3, [sp, #24]
   130fc:	str	r3, [r4, #40]	; 0x28
   13100:	str	r5, [r4, #48]	; 0x30
   13104:	str	r7, [r4, #36]	; 0x24
   13108:	str	r6, [r4, #44]	; 0x2c
   1310c:	mov	r0, #0
   13110:	ldrd	r4, [sp]
   13114:	ldrd	r6, [sp, #8]
   13118:	ldr	r8, [sp, #16]
   1311c:	add	sp, sp, #20
   13120:	pop	{pc}		; (ldr pc, [sp], #4)
   13124:	mov	r3, #1
   13128:	str	r3, [r4, #184]	; 0xb8
   1312c:	add	r7, r4, #188	; 0xbc
   13130:	movw	r6, #29056	; 0x7180
   13134:	movt	r6, #1
   13138:	b	130e8 <flatcc_builder_custom_init@@Base+0x34>

0001313c <flatcc_builder_init@@Base>:
   1313c:	str	r4, [sp, #-8]!
   13140:	str	lr, [sp, #4]
   13144:	mov	r4, r0
   13148:	mov	r2, #232	; 0xe8
   1314c:	mov	r1, #0
   13150:	bl	12014 <memset@plt>
   13154:	mov	r3, #1
   13158:	str	r3, [r4, #184]	; 0xb8
   1315c:	movw	r3, #10928	; 0x2ab0
   13160:	movt	r3, #1
   13164:	str	r3, [r4, #48]	; 0x30
   13168:	add	r3, r4, #188	; 0xbc
   1316c:	str	r3, [r4, #36]	; 0x24
   13170:	movw	r3, #29056	; 0x7180
   13174:	movt	r3, #1
   13178:	str	r3, [r4, #44]	; 0x2c
   1317c:	mov	r0, #0
   13180:	ldr	r4, [sp]
   13184:	add	sp, sp, #4
   13188:	pop	{pc}		; (ldr pc, [sp], #4)

0001318c <flatcc_builder_custom_reset@@Base>:
   1318c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13190:	strd	r6, [sp, #8]
   13194:	strd	r8, [sp, #16]
   13198:	strd	sl, [sp, #24]
   1319c:	str	lr, [sp, #32]
   131a0:	sub	sp, sp, #12
   131a4:	mov	r6, r0
   131a8:	mov	fp, r1
   131ac:	mov	r9, r2
   131b0:	mov	r4, r0
   131b4:	mov	r5, #0
   131b8:	mov	sl, r5
   131bc:	mov	r8, #1
   131c0:	b	131e4 <flatcc_builder_custom_reset@@Base+0x58>
   131c4:	ldr	r2, [r7, #56]	; 0x38
   131c8:	mov	r1, sl
   131cc:	ldr	r0, [r7, #52]	; 0x34
   131d0:	bl	12014 <memset@plt>
   131d4:	add	r5, r5, #1
   131d8:	add	r4, r4, #8
   131dc:	cmp	r5, #8
   131e0:	beq	13254 <flatcc_builder_custom_reset@@Base+0xc8>
   131e4:	add	r1, r4, #52	; 0x34
   131e8:	mov	r7, r4
   131ec:	ldr	r3, [r4, #52]	; 0x34
   131f0:	cmp	r3, #0
   131f4:	beq	1322c <flatcc_builder_custom_reset@@Base+0xa0>
   131f8:	cmp	r5, #5
   131fc:	cmpne	r9, #0
   13200:	beq	131c4 <flatcc_builder_custom_reset@@Base+0x38>
   13204:	str	r5, [sp]
   13208:	mov	r3, r8
   1320c:	mov	r2, r8
   13210:	ldr	r0, [r6, #40]	; 0x28
   13214:	ldr	ip, [r6, #48]	; 0x30
   13218:	blx	ip
   1321c:	cmp	r0, #0
   13220:	beq	131c4 <flatcc_builder_custom_reset@@Base+0x38>
   13224:	mvn	r0, #0
   13228:	b	132d0 <flatcc_builder_custom_reset@@Base+0x144>
   1322c:	ldr	r3, [r4, #56]	; 0x38
   13230:	cmp	r3, #0
   13234:	beq	131d4 <flatcc_builder_custom_reset@@Base+0x48>
   13238:	ldr	r3, [pc, #188]	; 132fc <flatcc_builder_custom_reset@@Base+0x170>
   1323c:	movw	r2, #434	; 0x1b2
   13240:	movw	r1, #33332	; 0x8234
   13244:	movt	r1, #1
   13248:	movw	r0, #33436	; 0x829c
   1324c:	movt	r0, #1
   13250:	bl	12044 <__assert_fail@plt>
   13254:	mov	r3, #0
   13258:	str	r3, [r6, #120]	; 0x78
   1325c:	ldr	r3, [r6, #124]	; 0x7c
   13260:	cmp	r3, #0
   13264:	movne	r3, #16
   13268:	strne	r3, [r6, #124]	; 0x7c
   1326c:	mov	r3, #0
   13270:	strh	r3, [r6, #128]	; 0x80
   13274:	str	r3, [r6, #136]	; 0x88
   13278:	str	r3, [r6, #140]	; 0x8c
   1327c:	str	r3, [r6, #156]	; 0x9c
   13280:	str	r3, [r6, #160]	; 0xa0
   13284:	str	r3, [r6, #20]
   13288:	str	r3, [r6, #24]
   1328c:	str	r3, [r6, #148]	; 0x94
   13290:	str	r3, [r6, #152]	; 0x98
   13294:	ldr	r2, [r6, #60]	; 0x3c
   13298:	str	r2, [r6, #16]
   1329c:	ldr	r2, [r6, #76]	; 0x4c
   132a0:	str	r2, [r6]
   132a4:	ldr	r2, [r6, #52]	; 0x34
   132a8:	str	r2, [r6, #4]
   132ac:	str	r3, [r6, #32]
   132b0:	cmp	fp, r3
   132b4:	beq	132c4 <flatcc_builder_custom_reset@@Base+0x138>
   132b8:	str	r3, [r6, #172]	; 0xac
   132bc:	str	r3, [r6, #176]	; 0xb0
   132c0:	str	r3, [r6, #180]	; 0xb4
   132c4:	ldr	r0, [r6, #184]	; 0xb8
   132c8:	cmp	r0, #0
   132cc:	bne	132ec <flatcc_builder_custom_reset@@Base+0x160>
   132d0:	add	sp, sp, #12
   132d4:	ldrd	r4, [sp]
   132d8:	ldrd	r6, [sp, #8]
   132dc:	ldrd	r8, [sp, #16]
   132e0:	ldrd	sl, [sp, #24]
   132e4:	add	sp, sp, #32
   132e8:	pop	{pc}		; (ldr pc, [sp], #4)
   132ec:	add	r0, r6, #188	; 0xbc
   132f0:	bl	17028 <flatcc_emitter_reset@@Base>
   132f4:	mov	r0, #0
   132f8:	b	132d0 <flatcc_builder_custom_reset@@Base+0x144>
   132fc:	andeq	r7, r1, ip, lsr sp

00013300 <flatcc_builder_reset@@Base>:
   13300:	str	r4, [sp, #-8]!
   13304:	str	lr, [sp, #4]
   13308:	mov	r2, #0
   1330c:	mov	r1, r2
   13310:	bl	1318c <flatcc_builder_custom_reset@@Base>
   13314:	ldr	r4, [sp]
   13318:	add	sp, sp, #4
   1331c:	pop	{pc}		; (ldr pc, [sp], #4)

00013320 <flatcc_builder_clear@@Base>:
   13320:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13324:	strd	r6, [sp, #8]
   13328:	str	r8, [sp, #16]
   1332c:	str	lr, [sp, #20]
   13330:	sub	sp, sp, #8
   13334:	mov	r6, r0
   13338:	add	r5, r0, #52	; 0x34
   1333c:	mov	r4, #0
   13340:	mov	r8, r4
   13344:	str	r4, [sp]
   13348:	ldr	r7, [r6, #48]	; 0x30
   1334c:	mov	r3, r8
   13350:	mov	r2, r8
   13354:	mov	r1, r5
   13358:	ldr	r0, [r6, #40]	; 0x28
   1335c:	blx	r7
   13360:	add	r4, r4, #1
   13364:	add	r5, r5, #8
   13368:	cmp	r4, #8
   1336c:	bne	13344 <flatcc_builder_clear@@Base+0x24>
   13370:	ldr	r3, [r6, #184]	; 0xb8
   13374:	cmp	r3, #0
   13378:	bne	133a4 <flatcc_builder_clear@@Base+0x84>
   1337c:	mov	r2, #232	; 0xe8
   13380:	mov	r1, #0
   13384:	mov	r0, r6
   13388:	bl	12014 <memset@plt>
   1338c:	add	sp, sp, #8
   13390:	ldrd	r4, [sp]
   13394:	ldrd	r6, [sp, #8]
   13398:	ldr	r8, [sp, #16]
   1339c:	add	sp, sp, #20
   133a0:	pop	{pc}		; (ldr pc, [sp], #4)
   133a4:	add	r0, r6, #188	; 0xbc
   133a8:	bl	17104 <flatcc_emitter_clear@@Base>
   133ac:	b	1337c <flatcc_builder_clear@@Base+0x5c>

000133b0 <flatcc_builder_enter_user_frame_ptr@@Base>:
   133b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   133b4:	strd	r6, [sp, #8]
   133b8:	str	r8, [sp, #16]
   133bc:	str	lr, [sp, #20]
   133c0:	sub	sp, sp, #8
   133c4:	mov	r4, r0
   133c8:	add	r5, r1, #3
   133cc:	bic	r5, r5, #3
   133d0:	add	r5, r5, #4
   133d4:	ldr	r6, [r0, #228]	; 0xe4
   133d8:	add	r2, r6, r5
   133dc:	ldr	r3, [r0, #112]	; 0x70
   133e0:	cmp	r2, r3
   133e4:	bls	1340c <flatcc_builder_enter_user_frame_ptr@@Base+0x5c>
   133e8:	mov	r3, #7
   133ec:	str	r3, [sp]
   133f0:	ldr	r7, [r0, #48]	; 0x30
   133f4:	mov	r3, #0
   133f8:	add	r1, r0, #108	; 0x6c
   133fc:	ldr	r0, [r0, #40]	; 0x28
   13400:	blx	r7
   13404:	cmp	r0, #0
   13408:	bne	13464 <flatcc_builder_enter_user_frame_ptr@@Base+0xb4>
   1340c:	ldr	r8, [r4, #108]	; 0x6c
   13410:	adds	r7, r8, r6
   13414:	moveq	r0, #0
   13418:	beq	1344c <flatcc_builder_enter_user_frame_ptr@@Base+0x9c>
   1341c:	mov	r2, r5
   13420:	mov	r1, #0
   13424:	mov	r0, r7
   13428:	bl	12014 <memset@plt>
   1342c:	add	r0, r7, #4
   13430:	ldr	r3, [r4, #224]	; 0xe0
   13434:	str	r3, [r8, r6]
   13438:	ldr	r1, [r4, #228]	; 0xe4
   1343c:	add	r3, r1, #4
   13440:	str	r3, [r4, #224]	; 0xe0
   13444:	add	r5, r1, r5
   13448:	str	r5, [r4, #228]	; 0xe4
   1344c:	add	sp, sp, #8
   13450:	ldrd	r4, [sp]
   13454:	ldrd	r6, [sp, #8]
   13458:	ldr	r8, [sp, #16]
   1345c:	add	sp, sp, #20
   13460:	pop	{pc}		; (ldr pc, [sp], #4)
   13464:	ldr	r3, [pc, #20]	; 13480 <flatcc_builder_enter_user_frame_ptr@@Base+0xd0>
   13468:	mov	r2, #308	; 0x134
   1346c:	movw	r1, #33332	; 0x8234
   13470:	movt	r1, #1
   13474:	movw	r0, #33416	; 0x8288
   13478:	movt	r0, #1
   1347c:	bl	12044 <__assert_fail@plt>
   13480:	andeq	r7, r1, r0, lsl #26

00013484 <flatcc_builder_enter_user_frame@@Base>:
   13484:	strd	r4, [sp, #-20]!	; 0xffffffec
   13488:	strd	r6, [sp, #8]
   1348c:	str	lr, [sp, #16]
   13490:	sub	sp, sp, #12
   13494:	mov	r4, r0
   13498:	add	r5, r1, #3
   1349c:	bic	r5, r5, #3
   134a0:	add	r5, r5, #4
   134a4:	ldr	r6, [r0, #228]	; 0xe4
   134a8:	add	r2, r6, r5
   134ac:	ldr	r3, [r0, #112]	; 0x70
   134b0:	cmp	r2, r3
   134b4:	bls	134dc <flatcc_builder_enter_user_frame@@Base+0x58>
   134b8:	mov	r3, #7
   134bc:	str	r3, [sp]
   134c0:	ldr	r7, [r0, #48]	; 0x30
   134c4:	mov	r3, #0
   134c8:	add	r1, r0, #108	; 0x6c
   134cc:	ldr	r0, [r0, #40]	; 0x28
   134d0:	blx	r7
   134d4:	cmp	r0, #0
   134d8:	bne	13524 <flatcc_builder_enter_user_frame@@Base+0xa0>
   134dc:	ldr	r7, [r4, #108]	; 0x6c
   134e0:	adds	r0, r7, r6
   134e4:	beq	13510 <flatcc_builder_enter_user_frame@@Base+0x8c>
   134e8:	mov	r2, r5
   134ec:	mov	r1, #0
   134f0:	bl	12014 <memset@plt>
   134f4:	ldr	r3, [r4, #224]	; 0xe0
   134f8:	str	r3, [r7, r6]
   134fc:	ldr	r1, [r4, #228]	; 0xe4
   13500:	add	r0, r1, #4
   13504:	str	r0, [r4, #224]	; 0xe0
   13508:	add	r5, r1, r5
   1350c:	str	r5, [r4, #228]	; 0xe4
   13510:	add	sp, sp, #12
   13514:	ldrd	r4, [sp]
   13518:	ldrd	r6, [sp, #8]
   1351c:	add	sp, sp, #16
   13520:	pop	{pc}		; (ldr pc, [sp], #4)
   13524:	ldr	r3, [pc, #20]	; 13540 <flatcc_builder_enter_user_frame@@Base+0xbc>
   13528:	mov	r2, #308	; 0x134
   1352c:	movw	r1, #33332	; 0x8234
   13530:	movt	r1, #1
   13534:	movw	r0, #33416	; 0x8288
   13538:	movt	r0, #1
   1353c:	bl	12044 <__assert_fail@plt>
   13540:	andeq	r7, r1, r0, lsl #26

00013544 <flatcc_builder_exit_user_frame@@Base>:
   13544:	ldr	r3, [r0, #224]	; 0xe0
   13548:	cmp	r3, #0
   1354c:	beq	13570 <flatcc_builder_exit_user_frame@@Base+0x2c>
   13550:	ldr	r2, [r0, #108]	; 0x6c
   13554:	add	r2, r2, r3
   13558:	sub	r3, r3, #4
   1355c:	str	r3, [r0, #228]	; 0xe4
   13560:	ldr	r3, [r2, #-4]
   13564:	str	r3, [r0, #224]	; 0xe0
   13568:	mov	r0, r3
   1356c:	bx	lr
   13570:	str	r4, [sp, #-8]!
   13574:	str	lr, [sp, #4]
   13578:	ldr	r3, [pc, #20]	; 13594 <flatcc_builder_exit_user_frame@@Base+0x50>
   1357c:	movw	r2, #542	; 0x21e
   13580:	movw	r1, #33332	; 0x8234
   13584:	movt	r1, #1
   13588:	movw	r0, #33456	; 0x82b0
   1358c:	movt	r0, #1
   13590:	bl	12044 <__assert_fail@plt>
   13594:	andeq	r7, r1, r8, asr sp

00013598 <flatcc_builder_exit_user_frame_at@@Base>:
   13598:	str	r4, [sp, #-8]!
   1359c:	str	lr, [sp, #4]
   135a0:	ldr	r3, [r0, #224]	; 0xe0
   135a4:	cmp	r3, r1
   135a8:	bcc	135c0 <flatcc_builder_exit_user_frame_at@@Base+0x28>
   135ac:	str	r1, [r0, #224]	; 0xe0
   135b0:	bl	13544 <flatcc_builder_exit_user_frame@@Base>
   135b4:	ldr	r4, [sp]
   135b8:	add	sp, sp, #4
   135bc:	pop	{pc}		; (ldr pc, [sp], #4)
   135c0:	ldr	r3, [pc, #20]	; 135dc <flatcc_builder_exit_user_frame_at@@Base+0x44>
   135c4:	movw	r2, #551	; 0x227
   135c8:	movw	r1, #33332	; 0x8234
   135cc:	movt	r1, #1
   135d0:	movw	r0, #33484	; 0x82cc
   135d4:	movt	r0, #1
   135d8:	bl	12044 <__assert_fail@plt>
   135dc:	andeq	r7, r1, r8, ror sp

000135e0 <flatcc_builder_get_current_user_frame@@Base>:
   135e0:	ldr	r0, [r0, #224]	; 0xe0
   135e4:	bx	lr

000135e8 <flatcc_builder_get_user_frame_ptr@@Base>:
   135e8:	ldr	r0, [r0, #108]	; 0x6c
   135ec:	add	r0, r0, r1
   135f0:	bx	lr

000135f4 <flatcc_builder_embed_buffer@@Base>:
   135f4:	strd	r4, [sp, #-16]!
   135f8:	str	r6, [sp, #8]
   135fc:	str	lr, [sp, #12]
   13600:	sub	sp, sp, #88	; 0x58
   13604:	mov	r4, r0
   13608:	mov	r6, r2
   1360c:	mov	r5, r3
   13610:	ldr	r3, [r0, #152]	; 0x98
   13614:	adds	r3, r3, #0
   13618:	movne	r3, #1
   1361c:	mov	r2, r1
   13620:	add	r1, sp, #104	; 0x68
   13624:	bl	12bd8 <flatcc_builder_default_alloc@@Base+0x128>
   13628:	cmp	r0, #0
   1362c:	bne	13788 <flatcc_builder_embed_buffer@@Base+0x194>
   13630:	ldr	r3, [sp, #108]	; 0x6c
   13634:	and	r3, r3, #2
   13638:	cmp	r3, #0
   1363c:	movne	r2, #4
   13640:	moveq	r2, #0
   13644:	ldr	r1, [r4, #136]	; 0x88
   13648:	sub	r3, r1, r5
   1364c:	sub	r2, r3, r2
   13650:	ldrh	r3, [sp, #104]	; 0x68
   13654:	sub	r3, r3, #1
   13658:	and	r3, r3, r2
   1365c:	add	r2, r5, r3
   13660:	str	r2, [sp, #84]	; 0x54
   13664:	mov	r2, #0
   13668:	str	r2, [sp, #12]
   1366c:	str	r2, [sp, #16]
   13670:	ldr	r2, [r4, #152]	; 0x98
   13674:	cmp	r2, #0
   13678:	beq	13698 <flatcc_builder_embed_buffer@@Base+0xa4>
   1367c:	mov	r2, #4
   13680:	str	r2, [sp, #12]
   13684:	add	r0, sp, #84	; 0x54
   13688:	str	r0, [sp, #20]
   1368c:	str	r2, [sp, #24]
   13690:	mov	r2, #1
   13694:	str	r2, [sp, #16]
   13698:	cmp	r5, #0
   1369c:	beq	136c8 <flatcc_builder_embed_buffer@@Base+0xd4>
   136a0:	ldr	r2, [sp, #12]
   136a4:	add	r2, r2, r5
   136a8:	str	r2, [sp, #12]
   136ac:	ldr	r2, [sp, #16]
   136b0:	add	r2, r2, #1
   136b4:	add	r0, sp, #88	; 0x58
   136b8:	add	r0, r0, r2, lsl #3
   136bc:	str	r6, [r0, #-76]	; 0xffffffb4
   136c0:	str	r5, [r0, #-72]	; 0xffffffb8
   136c4:	str	r2, [sp, #16]
   136c8:	cmp	r3, #0
   136cc:	beq	13700 <flatcc_builder_embed_buffer@@Base+0x10c>
   136d0:	ldr	r2, [sp, #12]
   136d4:	add	r2, r2, r3
   136d8:	str	r2, [sp, #12]
   136dc:	ldr	r2, [sp, #16]
   136e0:	add	r2, r2, #1
   136e4:	add	r0, sp, #88	; 0x58
   136e8:	add	ip, r0, r2, lsl #3
   136ec:	movw	r0, #31460	; 0x7ae4
   136f0:	movt	r0, #1
   136f4:	str	r0, [ip, #-76]	; 0xffffffb4
   136f8:	str	r3, [ip, #-72]	; 0xffffffb8
   136fc:	str	r2, [sp, #16]
   13700:	ldr	r3, [sp, #12]
   13704:	sub	r5, r1, r3
   13708:	cmp	r1, r5
   1370c:	ble	13750 <flatcc_builder_embed_buffer@@Base+0x15c>
   13710:	str	r3, [sp]
   13714:	ldr	r6, [r4, #44]	; 0x2c
   13718:	mov	r3, r5
   1371c:	ldr	r2, [sp, #16]
   13720:	add	r1, sp, #20
   13724:	ldr	r0, [r4, #36]	; 0x24
   13728:	blx	r6
   1372c:	cmp	r0, #0
   13730:	streq	r5, [r4, #136]	; 0x88
   13734:	bne	1376c <flatcc_builder_embed_buffer@@Base+0x178>
   13738:	mov	r0, r5
   1373c:	add	sp, sp, #88	; 0x58
   13740:	ldrd	r4, [sp]
   13744:	ldr	r6, [sp, #8]
   13748:	add	sp, sp, #12
   1374c:	pop	{pc}		; (ldr pc, [sp], #4)
   13750:	ldr	r3, [pc, #56]	; 13790 <flatcc_builder_embed_buffer@@Base+0x19c>
   13754:	movw	r2, #647	; 0x287
   13758:	movw	r1, #33332	; 0x8234
   1375c:	movt	r1, #1
   13760:	movw	r0, #33416	; 0x8288
   13764:	movt	r0, #1
   13768:	bl	12044 <__assert_fail@plt>
   1376c:	ldr	r3, [pc, #28]	; 13790 <flatcc_builder_embed_buffer@@Base+0x19c>
   13770:	movw	r2, #651	; 0x28b
   13774:	movw	r1, #33332	; 0x8234
   13778:	movt	r1, #1
   1377c:	movw	r0, #33416	; 0x8288
   13780:	movt	r0, #1
   13784:	bl	12044 <__assert_fail@plt>
   13788:	mov	r5, #0
   1378c:	b	13738 <flatcc_builder_embed_buffer@@Base+0x144>
   13790:	andeq	r7, r1, r0, lsr sp

00013794 <flatcc_builder_create_buffer@@Base>:
   13794:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13798:	strd	r6, [sp, #8]
   1379c:	strd	r8, [sp, #16]
   137a0:	str	lr, [sp, #24]
   137a4:	sub	sp, sp, #100	; 0x64
   137a8:	mov	r5, r0
   137ac:	mov	r8, r1
   137b0:	mov	r4, r3
   137b4:	ldr	r7, [sp, #132]	; 0x84
   137b8:	mov	r3, #0
   137bc:	str	r3, [sp, #12]
   137c0:	and	r6, r7, #1
   137c4:	mov	r3, r6
   137c8:	add	r1, sp, #128	; 0x80
   137cc:	bl	12bd8 <flatcc_builder_default_alloc@@Base+0x128>
   137d0:	cmp	r0, #0
   137d4:	bne	139d0 <flatcc_builder_create_buffer@@Base+0x23c>
   137d8:	ldrh	r2, [sp, #128]	; 0x80
   137dc:	ldrh	r3, [r5, #128]	; 0x80
   137e0:	cmp	r3, r2
   137e4:	strhcc	r2, [r5, #128]	; 0x80
   137e8:	cmp	r8, #0
   137ec:	ldrne	r3, [r8]
   137f0:	strne	r3, [sp, #12]
   137f4:	ldr	r1, [sp, #12]
   137f8:	cmp	r1, #0
   137fc:	movne	r1, #4
   13800:	and	r3, r7, #2
   13804:	cmp	r3, #0
   13808:	movne	ip, #4
   1380c:	moveq	ip, #0
   13810:	ldr	r0, [r5, #136]	; 0x88
   13814:	sub	r3, r0, #4
   13818:	sub	r3, r3, r1
   1381c:	sub	r3, r3, ip
   13820:	sub	r2, r2, #1
   13824:	and	r3, r3, r2
   13828:	mov	r2, #0
   1382c:	str	r2, [sp, #16]
   13830:	str	r2, [sp, #20]
   13834:	ands	r7, r7, #3
   13838:	beq	13858 <flatcc_builder_create_buffer@@Base+0xc4>
   1383c:	mov	r2, #4
   13840:	str	r2, [sp, #16]
   13844:	add	ip, sp, #88	; 0x58
   13848:	str	ip, [sp, #24]
   1384c:	str	r2, [sp, #28]
   13850:	mov	r2, #1
   13854:	str	r2, [sp, #20]
   13858:	ldr	ip, [sp, #16]
   1385c:	add	ip, ip, #4
   13860:	str	ip, [sp, #16]
   13864:	ldr	lr, [sp, #20]
   13868:	add	r2, lr, #1
   1386c:	add	r8, sp, #96	; 0x60
   13870:	add	r8, r8, r2, lsl #3
   13874:	add	r9, sp, #92	; 0x5c
   13878:	str	r9, [r8, #-80]	; 0xffffffb0
   1387c:	mov	r9, #4
   13880:	str	r9, [r8, #-76]	; 0xffffffb4
   13884:	str	r2, [sp, #20]
   13888:	cmp	r1, #0
   1388c:	beq	138b8 <flatcc_builder_create_buffer@@Base+0x124>
   13890:	add	ip, ip, r1
   13894:	str	ip, [sp, #16]
   13898:	add	r2, lr, #2
   1389c:	add	ip, sp, #96	; 0x60
   138a0:	add	r2, ip, r2, lsl #3
   138a4:	add	ip, sp, #12
   138a8:	str	ip, [r2, #-80]	; 0xffffffb0
   138ac:	str	r1, [r2, #-76]	; 0xffffffb4
   138b0:	add	lr, lr, #2
   138b4:	str	lr, [sp, #20]
   138b8:	cmp	r3, #0
   138bc:	beq	138f0 <flatcc_builder_create_buffer@@Base+0x15c>
   138c0:	ldr	r2, [sp, #16]
   138c4:	add	r2, r2, r3
   138c8:	str	r2, [sp, #16]
   138cc:	ldr	r2, [sp, #20]
   138d0:	add	r2, r2, #1
   138d4:	add	r1, sp, #96	; 0x60
   138d8:	add	ip, r1, r2, lsl #3
   138dc:	movw	r1, #31460	; 0x7ae4
   138e0:	movt	r1, #1
   138e4:	str	r1, [ip, #-80]	; 0xffffffb0
   138e8:	str	r3, [ip, #-76]	; 0xffffffb4
   138ec:	str	r2, [sp, #20]
   138f0:	ldr	r1, [sp, #16]
   138f4:	sub	r3, r0, r1
   138f8:	cmp	r7, #0
   138fc:	movne	r2, #4
   13900:	moveq	r2, #0
   13904:	add	r3, r3, r2
   13908:	cmp	r6, #0
   1390c:	ldrne	r2, [r5, #144]	; 0x90
   13910:	ldreq	r2, [r5, #140]	; 0x8c
   13914:	sub	r2, r2, r3
   13918:	str	r2, [sp, #88]	; 0x58
   1391c:	sub	r4, r4, r3
   13920:	str	r4, [sp, #92]	; 0x5c
   13924:	sub	r4, r0, r1
   13928:	cmp	r0, r4
   1392c:	ble	1397c <flatcc_builder_create_buffer@@Base+0x1e8>
   13930:	str	r1, [sp]
   13934:	ldr	r6, [r5, #44]	; 0x2c
   13938:	mov	r3, r4
   1393c:	ldr	r2, [sp, #20]
   13940:	add	r1, sp, #24
   13944:	ldr	r0, [r5, #36]	; 0x24
   13948:	blx	r6
   1394c:	cmp	r0, #0
   13950:	bne	13998 <flatcc_builder_create_buffer@@Base+0x204>
   13954:	str	r4, [r5, #136]	; 0x88
   13958:	cmp	r4, #0
   1395c:	beq	139b4 <flatcc_builder_create_buffer@@Base+0x220>
   13960:	mov	r0, r4
   13964:	add	sp, sp, #100	; 0x64
   13968:	ldrd	r4, [sp]
   1396c:	ldrd	r6, [sp, #8]
   13970:	ldrd	r8, [sp, #16]
   13974:	add	sp, sp, #24
   13978:	pop	{pc}		; (ldr pc, [sp], #4)
   1397c:	ldr	r3, [pc, #84]	; 139d8 <flatcc_builder_create_buffer@@Base+0x244>
   13980:	movw	r2, #647	; 0x287
   13984:	movw	r1, #33332	; 0x8234
   13988:	movt	r1, #1
   1398c:	movw	r0, #33416	; 0x8288
   13990:	movt	r0, #1
   13994:	bl	12044 <__assert_fail@plt>
   13998:	ldr	r3, [pc, #56]	; 139d8 <flatcc_builder_create_buffer@@Base+0x244>
   1399c:	movw	r2, #651	; 0x28b
   139a0:	movw	r1, #33332	; 0x8234
   139a4:	movt	r1, #1
   139a8:	movw	r0, #33416	; 0x8288
   139ac:	movt	r0, #1
   139b0:	bl	12044 <__assert_fail@plt>
   139b4:	ldr	r3, [pc, #32]	; 139dc <flatcc_builder_create_buffer@@Base+0x248>
   139b8:	mov	r2, #772	; 0x304
   139bc:	movw	r1, #33332	; 0x8234
   139c0:	movt	r1, #1
   139c4:	movw	r0, #33416	; 0x8288
   139c8:	movt	r0, #1
   139cc:	bl	12044 <__assert_fail@plt>
   139d0:	mov	r4, #0
   139d4:	b	13960 <flatcc_builder_create_buffer@@Base+0x1cc>
   139d8:	andeq	r7, r1, r0, lsr sp
   139dc:	muleq	r1, ip, sp

000139e0 <flatcc_builder_create_struct@@Base>:
   139e0:	strd	r4, [sp, #-16]!
   139e4:	str	r6, [sp, #8]
   139e8:	str	lr, [sp, #12]
   139ec:	sub	sp, sp, #80	; 0x50
   139f0:	cmp	r3, #0
   139f4:	beq	13a4c <flatcc_builder_create_struct@@Base+0x6c>
   139f8:	mov	r4, r0
   139fc:	ldrh	r0, [r0, #128]	; 0x80
   13a00:	cmp	r0, r3
   13a04:	strhcc	r3, [r4, #128]	; 0x80
   13a08:	ldr	ip, [r4, #136]	; 0x88
   13a0c:	sub	r0, ip, r2
   13a10:	sub	r3, r3, #1
   13a14:	and	r3, r3, r0
   13a18:	mov	r0, #0
   13a1c:	str	r0, [sp, #8]
   13a20:	str	r0, [sp, #12]
   13a24:	cmp	r2, r0
   13a28:	beq	13aa0 <flatcc_builder_create_struct@@Base+0xc0>
   13a2c:	str	r2, [sp, #8]
   13a30:	str	r1, [sp, #16]
   13a34:	str	r2, [sp, #20]
   13a38:	mov	r2, #1
   13a3c:	str	r2, [sp, #12]
   13a40:	cmp	r3, r0
   13a44:	beq	13ad8 <flatcc_builder_create_struct@@Base+0xf8>
   13a48:	b	13aa8 <flatcc_builder_create_struct@@Base+0xc8>
   13a4c:	ldr	r3, [pc, #212]	; 13b28 <flatcc_builder_create_struct@@Base+0x148>
   13a50:	movw	r2, #783	; 0x30f
   13a54:	movw	r1, #33332	; 0x8234
   13a58:	movt	r1, #1
   13a5c:	movw	r0, #33516	; 0x82ec
   13a60:	movt	r0, #1
   13a64:	bl	12044 <__assert_fail@plt>
   13a68:	ldr	r3, [pc, #188]	; 13b2c <flatcc_builder_create_struct@@Base+0x14c>
   13a6c:	movw	r2, #647	; 0x287
   13a70:	movw	r1, #33332	; 0x8234
   13a74:	movt	r1, #1
   13a78:	movw	r0, #33416	; 0x8288
   13a7c:	movt	r0, #1
   13a80:	bl	12044 <__assert_fail@plt>
   13a84:	ldr	r3, [pc, #160]	; 13b2c <flatcc_builder_create_struct@@Base+0x14c>
   13a88:	movw	r2, #651	; 0x28b
   13a8c:	movw	r1, #33332	; 0x8234
   13a90:	movt	r1, #1
   13a94:	movw	r0, #33416	; 0x8288
   13a98:	movt	r0, #1
   13a9c:	bl	12044 <__assert_fail@plt>
   13aa0:	cmp	r3, #0
   13aa4:	beq	13a68 <flatcc_builder_create_struct@@Base+0x88>
   13aa8:	ldr	r2, [sp, #8]
   13aac:	add	r2, r2, r3
   13ab0:	str	r2, [sp, #8]
   13ab4:	ldr	r2, [sp, #12]
   13ab8:	add	r2, r2, #1
   13abc:	add	r1, sp, #80	; 0x50
   13ac0:	add	r0, r1, r2, lsl #3
   13ac4:	movw	r1, #31460	; 0x7ae4
   13ac8:	movt	r1, #1
   13acc:	str	r1, [r0, #-72]	; 0xffffffb8
   13ad0:	str	r3, [r0, #-68]	; 0xffffffbc
   13ad4:	str	r2, [sp, #12]
   13ad8:	ldr	r3, [sp, #8]
   13adc:	sub	r5, ip, r3
   13ae0:	cmp	ip, r5
   13ae4:	ble	13a68 <flatcc_builder_create_struct@@Base+0x88>
   13ae8:	str	r3, [sp]
   13aec:	ldr	r6, [r4, #44]	; 0x2c
   13af0:	mov	r3, r5
   13af4:	ldr	r2, [sp, #12]
   13af8:	add	r1, sp, #16
   13afc:	ldr	r0, [r4, #36]	; 0x24
   13b00:	blx	r6
   13b04:	cmp	r0, #0
   13b08:	bne	13a84 <flatcc_builder_create_struct@@Base+0xa4>
   13b0c:	str	r5, [r4, #136]	; 0x88
   13b10:	mov	r0, r5
   13b14:	add	sp, sp, #80	; 0x50
   13b18:	ldrd	r4, [sp]
   13b1c:	ldr	r6, [sp, #8]
   13b20:	add	sp, sp, #12
   13b24:	pop	{pc}		; (ldr pc, [sp], #4)
   13b28:			; <UNDEFINED> instruction: 0x00017dbc
   13b2c:	andeq	r7, r1, r0, lsr sp

00013b30 <flatcc_builder_start_buffer@@Base>:
   13b30:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13b34:	strd	r6, [sp, #8]
   13b38:	str	r8, [sp, #16]
   13b3c:	str	lr, [sp, #20]
   13b40:	mov	r4, r0
   13b44:	mov	r5, r1
   13b48:	mov	r7, r2
   13b4c:	mov	r6, r3
   13b50:	ldrh	r1, [r0, #128]	; 0x80
   13b54:	bl	12cfc <flatcc_builder_default_alloc@@Base+0x24c>
   13b58:	cmp	r0, #0
   13b5c:	bne	13bfc <flatcc_builder_start_buffer@@Base+0xcc>
   13b60:	mov	r3, #1
   13b64:	strh	r3, [r4, #128]	; 0x80
   13b68:	ldr	r3, [r4, #32]
   13b6c:	ldrh	r2, [r4, #132]	; 0x84
   13b70:	strh	r2, [r3, #34]	; 0x22
   13b74:	strh	r7, [r4, #132]	; 0x84
   13b78:	ldr	r3, [r4, #32]
   13b7c:	ldrh	r2, [r4, #164]	; 0xa4
   13b80:	strh	r2, [r3, #32]
   13b84:	strh	r6, [r4, #164]	; 0xa4
   13b88:	ldr	r3, [r4, #32]
   13b8c:	ldr	r2, [r4, #144]	; 0x90
   13b90:	str	r2, [r3, #20]
   13b94:	ldr	r3, [r4, #32]
   13b98:	ldr	r2, [r4, #152]	; 0x98
   13b9c:	str	r2, [r3, #28]
   13ba0:	ldr	r3, [r4, #136]	; 0x88
   13ba4:	str	r3, [r4, #144]	; 0x90
   13ba8:	ldr	r3, [r4, #148]	; 0x94
   13bac:	add	r2, r3, #1
   13bb0:	str	r2, [r4, #148]	; 0x94
   13bb4:	str	r3, [r4, #152]	; 0x98
   13bb8:	ldr	r3, [r4, #32]
   13bbc:	ldr	r2, [r4, #168]	; 0xa8
   13bc0:	str	r2, [r3, #16]
   13bc4:	movw	r3, #31460	; 0x7ae4
   13bc8:	movt	r3, #1
   13bcc:	cmp	r5, #0
   13bd0:	moveq	r5, r3
   13bd4:	ldr	r3, [r5]
   13bd8:	str	r3, [r4, #168]	; 0xa8
   13bdc:	ldr	r3, [r4, #32]
   13be0:	mov	r2, #1
   13be4:	strh	r2, [r3, #14]
   13be8:	ldrd	r4, [sp]
   13bec:	ldrd	r6, [sp, #8]
   13bf0:	ldr	r8, [sp, #16]
   13bf4:	add	sp, sp, #20
   13bf8:	pop	{pc}		; (ldr pc, [sp], #4)
   13bfc:	mvn	r0, #0
   13c00:	b	13be8 <flatcc_builder_start_buffer@@Base+0xb8>

00013c04 <flatcc_builder_end_buffer@@Base>:
   13c04:	strd	r4, [sp, #-12]!
   13c08:	str	lr, [sp, #8]
   13c0c:	sub	sp, sp, #12
   13c10:	mov	r4, r0
   13c14:	ldrh	r2, [r0, #164]	; 0xa4
   13c18:	and	r2, r2, #2
   13c1c:	ldr	r0, [r0, #152]	; 0x98
   13c20:	cmp	r0, #0
   13c24:	moveq	r0, r2
   13c28:	orrne	r0, r2, #1
   13c2c:	ldr	r2, [r4, #32]
   13c30:	ldrh	r2, [r2, #14]
   13c34:	cmp	r2, #1
   13c38:	bne	13c84 <flatcc_builder_end_buffer@@Base+0x80>
   13c3c:	ldrh	r2, [r4, #132]	; 0x84
   13c40:	ldrh	r3, [r4, #128]	; 0x80
   13c44:	cmp	r3, r2
   13c48:	strhcc	r2, [r4, #128]	; 0x80
   13c4c:	str	r0, [sp, #4]
   13c50:	ldrh	r3, [r4, #128]	; 0x80
   13c54:	str	r3, [sp]
   13c58:	mov	r3, r1
   13c5c:	add	r1, r4, #168	; 0xa8
   13c60:	mov	r0, r4
   13c64:	bl	13794 <flatcc_builder_create_buffer@@Base>
   13c68:	subs	r5, r0, #0
   13c6c:	bne	13ca0 <flatcc_builder_end_buffer@@Base+0x9c>
   13c70:	mov	r0, r5
   13c74:	add	sp, sp, #12
   13c78:	ldrd	r4, [sp]
   13c7c:	add	sp, sp, #8
   13c80:	pop	{pc}		; (ldr pc, [sp], #4)
   13c84:	ldr	r3, [pc, #184]	; 13d44 <flatcc_builder_end_buffer@@Base+0x140>
   13c88:	movw	r2, #838	; 0x346
   13c8c:	movw	r1, #33332	; 0x8234
   13c90:	movt	r1, #1
   13c94:	movw	r0, #33528	; 0x82f8
   13c98:	movt	r0, #1
   13c9c:	bl	12044 <__assert_fail@plt>
   13ca0:	ldr	r3, [r4, #32]
   13ca4:	ldr	r2, [r3, #20]
   13ca8:	str	r2, [r4, #144]	; 0x90
   13cac:	ldr	r2, [r3, #28]
   13cb0:	str	r2, [r4, #152]	; 0x98
   13cb4:	ldr	r2, [r3, #16]
   13cb8:	str	r2, [r4, #168]	; 0xa8
   13cbc:	ldrh	r3, [r3, #32]
   13cc0:	strh	r3, [r4, #164]	; 0xa4
   13cc4:	ldr	r2, [r4, #20]
   13cc8:	mov	r1, #0
   13ccc:	ldr	r0, [r4, #16]
   13cd0:	bl	12014 <memset@plt>
   13cd4:	ldr	r2, [r4, #32]
   13cd8:	ldr	r3, [r2, #8]
   13cdc:	str	r3, [r4, #20]
   13ce0:	ldr	r0, [r2]
   13ce4:	str	r0, [r4, #28]
   13ce8:	ldr	r1, [r2, #4]
   13cec:	ldr	r3, [r4, #60]	; 0x3c
   13cf0:	add	r3, r3, r0
   13cf4:	str	r3, [r4, #16]
   13cf8:	ldr	r3, [r4, #64]	; 0x40
   13cfc:	sub	r3, r3, r0
   13d00:	cmp	r3, r1
   13d04:	movcs	r3, r1
   13d08:	str	r3, [r4, #24]
   13d0c:	str	r1, [r2, #4]
   13d10:	ldrh	r3, [r4, #130]	; 0x82
   13d14:	ldrh	r2, [r4, #128]	; 0x80
   13d18:	cmp	r2, r3
   13d1c:	strhcc	r3, [r4, #128]	; 0x80
   13d20:	ldr	r3, [r4, #32]
   13d24:	ldrh	r2, [r3, #12]
   13d28:	strh	r2, [r4, #130]	; 0x82
   13d2c:	sub	r3, r3, #36	; 0x24
   13d30:	str	r3, [r4, #32]
   13d34:	ldr	r3, [r4, #156]	; 0x9c
   13d38:	sub	r3, r3, #1
   13d3c:	str	r3, [r4, #156]	; 0x9c
   13d40:	b	13c70 <flatcc_builder_end_buffer@@Base+0x6c>
   13d44:	ldrdeq	r7, [r1], -ip

00013d48 <flatcc_builder_start_struct@@Base>:
   13d48:	strd	r4, [sp, #-16]!
   13d4c:	str	r6, [sp, #8]
   13d50:	str	lr, [sp, #12]
   13d54:	mov	r4, r0
   13d58:	mov	r5, r1
   13d5c:	mov	r1, r2
   13d60:	bl	12cfc <flatcc_builder_default_alloc@@Base+0x24c>
   13d64:	cmp	r0, #0
   13d68:	movne	r0, #0
   13d6c:	bne	13dcc <flatcc_builder_start_struct@@Base+0x84>
   13d70:	ldr	r3, [r4, #32]
   13d74:	mov	r2, #2
   13d78:	strh	r2, [r3, #14]
   13d7c:	ldr	r1, [r4, #28]
   13d80:	ldr	r2, [r4, #60]	; 0x3c
   13d84:	add	r2, r2, r1
   13d88:	str	r2, [r4, #16]
   13d8c:	ldr	r3, [r4, #64]	; 0x40
   13d90:	sub	r3, r3, r1
   13d94:	cmn	r3, #4
   13d98:	mvnhi	r3, #3
   13d9c:	str	r3, [r4, #24]
   13da0:	ldr	r3, [r4, #32]
   13da4:	mvn	r2, #3
   13da8:	str	r2, [r3, #4]
   13dac:	ldr	r6, [r4, #20]
   13db0:	add	r5, r5, r6
   13db4:	str	r5, [r4, #20]
   13db8:	ldr	r3, [r4, #24]
   13dbc:	cmp	r5, r3
   13dc0:	bcs	13ddc <flatcc_builder_start_struct@@Base+0x94>
   13dc4:	ldr	r0, [r4, #16]
   13dc8:	add	r0, r0, r6
   13dcc:	ldrd	r4, [sp]
   13dd0:	ldr	r6, [sp, #8]
   13dd4:	add	sp, sp, #12
   13dd8:	pop	{pc}		; (ldr pc, [sp], #4)
   13ddc:	add	r1, r5, #1
   13de0:	mov	r0, r4
   13de4:	bl	12a28 <main@@Base+0x5ec>
   13de8:	cmp	r0, #0
   13dec:	movne	r0, #0
   13df0:	beq	13dc4 <flatcc_builder_start_struct@@Base+0x7c>
   13df4:	b	13dcc <flatcc_builder_start_struct@@Base+0x84>

00013df8 <flatcc_builder_struct_edit@@Base>:
   13df8:	ldr	r0, [r0, #16]
   13dfc:	bx	lr

00013e00 <flatcc_builder_end_struct@@Base>:
   13e00:	strd	r4, [sp, #-16]!
   13e04:	str	r6, [sp, #8]
   13e08:	str	lr, [sp, #12]
   13e0c:	ldr	r3, [r0, #32]
   13e10:	ldrh	r3, [r3, #14]
   13e14:	cmp	r3, #2
   13e18:	bne	13e4c <flatcc_builder_end_struct@@Base+0x4c>
   13e1c:	mov	r4, r0
   13e20:	ldrh	r3, [r0, #130]	; 0x82
   13e24:	ldr	r2, [r0, #20]
   13e28:	ldr	r1, [r0, #16]
   13e2c:	bl	139e0 <flatcc_builder_create_struct@@Base>
   13e30:	subs	r5, r0, #0
   13e34:	bne	13e68 <flatcc_builder_end_struct@@Base+0x68>
   13e38:	mov	r0, r5
   13e3c:	ldrd	r4, [sp]
   13e40:	ldr	r6, [sp, #8]
   13e44:	add	sp, sp, #12
   13e48:	pop	{pc}		; (ldr pc, [sp], #4)
   13e4c:	ldr	r3, [pc, #148]	; 13ee8 <flatcc_builder_end_struct@@Base+0xe8>
   13e50:	mov	r2, #872	; 0x368
   13e54:	movw	r1, #33332	; 0x8234
   13e58:	movt	r1, #1
   13e5c:	movw	r0, #33572	; 0x8324
   13e60:	movt	r0, #1
   13e64:	bl	12044 <__assert_fail@plt>
   13e68:	ldr	r2, [r4, #20]
   13e6c:	mov	r1, #0
   13e70:	ldr	r0, [r4, #16]
   13e74:	bl	12014 <memset@plt>
   13e78:	ldr	r2, [r4, #32]
   13e7c:	ldr	r3, [r2, #8]
   13e80:	str	r3, [r4, #20]
   13e84:	ldr	r0, [r2]
   13e88:	str	r0, [r4, #28]
   13e8c:	ldr	r1, [r2, #4]
   13e90:	ldr	r3, [r4, #60]	; 0x3c
   13e94:	add	r3, r3, r0
   13e98:	str	r3, [r4, #16]
   13e9c:	ldr	r3, [r4, #64]	; 0x40
   13ea0:	sub	r3, r3, r0
   13ea4:	cmp	r3, r1
   13ea8:	movcs	r3, r1
   13eac:	str	r3, [r4, #24]
   13eb0:	str	r1, [r2, #4]
   13eb4:	ldrh	r3, [r4, #130]	; 0x82
   13eb8:	ldrh	r2, [r4, #128]	; 0x80
   13ebc:	cmp	r2, r3
   13ec0:	strhcc	r3, [r4, #128]	; 0x80
   13ec4:	ldr	r3, [r4, #32]
   13ec8:	ldrh	r2, [r3, #12]
   13ecc:	strh	r2, [r4, #130]	; 0x82
   13ed0:	sub	r3, r3, #36	; 0x24
   13ed4:	str	r3, [r4, #32]
   13ed8:	ldr	r3, [r4, #156]	; 0x9c
   13edc:	sub	r3, r3, #1
   13ee0:	str	r3, [r4, #156]	; 0x9c
   13ee4:	b	13e38 <flatcc_builder_end_struct@@Base+0x38>
   13ee8:	strdeq	r7, [r1], -r8

00013eec <flatcc_builder_extend_vector@@Base>:
   13eec:	strd	r4, [sp, #-16]!
   13ef0:	str	r6, [sp, #8]
   13ef4:	str	lr, [sp, #12]
   13ef8:	mov	r4, r0
   13efc:	ldr	r2, [r0, #32]
   13f00:	ldr	r3, [r2, #20]
   13f04:	add	r0, r1, r3
   13f08:	ldr	ip, [r2, #24]
   13f0c:	cmp	r3, r0
   13f10:	movls	r3, #0
   13f14:	movhi	r3, #1
   13f18:	cmp	ip, r0
   13f1c:	orrcc	r3, r3, #1
   13f20:	cmp	r3, #0
   13f24:	bne	13f64 <flatcc_builder_extend_vector@@Base+0x78>
   13f28:	str	r0, [r2, #20]
   13f2c:	ldr	r5, [r4, #20]
   13f30:	ldr	r3, [r4, #32]
   13f34:	ldr	r3, [r3, #16]
   13f38:	mla	r1, r3, r1, r5
   13f3c:	str	r1, [r4, #20]
   13f40:	ldr	r3, [r4, #24]
   13f44:	cmp	r1, r3
   13f48:	bcs	13f80 <flatcc_builder_extend_vector@@Base+0x94>
   13f4c:	ldr	r0, [r4, #16]
   13f50:	add	r0, r0, r5
   13f54:	ldrd	r4, [sp]
   13f58:	ldr	r6, [sp, #8]
   13f5c:	add	sp, sp, #12
   13f60:	pop	{pc}		; (ldr pc, [sp], #4)
   13f64:	ldr	r3, [pc, #52]	; 13fa0 <flatcc_builder_extend_vector@@Base+0xb4>
   13f68:	mov	r2, #892	; 0x37c
   13f6c:	movw	r1, #33332	; 0x8234
   13f70:	movt	r1, #1
   13f74:	movw	r0, #33616	; 0x8350
   13f78:	movt	r0, #1
   13f7c:	bl	12044 <__assert_fail@plt>
   13f80:	mvn	r2, #3
   13f84:	add	r1, r1, #1
   13f88:	mov	r0, r4
   13f8c:	bl	12a28 <main@@Base+0x5ec>
   13f90:	cmp	r0, #0
   13f94:	movne	r0, #0
   13f98:	beq	13f4c <flatcc_builder_extend_vector@@Base+0x60>
   13f9c:	b	13f54 <flatcc_builder_extend_vector@@Base+0x68>
   13fa0:	andeq	r7, r1, r4, lsl lr

00013fa4 <flatcc_builder_vector_push@@Base>:
   13fa4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13fa8:	strd	r6, [sp, #8]
   13fac:	str	r8, [sp, #16]
   13fb0:	str	lr, [sp, #20]
   13fb4:	ldr	r3, [r0, #32]
   13fb8:	ldrh	r2, [r3, #14]
   13fbc:	cmp	r2, #4
   13fc0:	bne	14038 <flatcc_builder_vector_push@@Base+0x94>
   13fc4:	mov	r4, r0
   13fc8:	mov	r6, r1
   13fcc:	ldr	r2, [r3, #20]
   13fd0:	ldr	r1, [r3, #24]
   13fd4:	cmp	r2, r1
   13fd8:	bhi	14054 <flatcc_builder_vector_push@@Base+0xb0>
   13fdc:	add	r2, r2, #1
   13fe0:	str	r2, [r3, #20]
   13fe4:	ldr	r3, [r0, #32]
   13fe8:	ldr	r7, [r3, #16]
   13fec:	ldr	r5, [r0, #20]
   13ff0:	add	r1, r7, r5
   13ff4:	str	r1, [r0, #20]
   13ff8:	ldr	r3, [r0, #24]
   13ffc:	cmp	r1, r3
   14000:	bcs	14070 <flatcc_builder_vector_push@@Base+0xcc>
   14004:	ldr	r4, [r4, #16]
   14008:	adds	r4, r4, r5
   1400c:	beq	14020 <flatcc_builder_vector_push@@Base+0x7c>
   14010:	mov	r2, r7
   14014:	mov	r1, r6
   14018:	mov	r0, r4
   1401c:	bl	11f90 <memcpy@plt>
   14020:	mov	r0, r4
   14024:	ldrd	r4, [sp]
   14028:	ldrd	r6, [sp, #8]
   1402c:	ldr	r8, [sp, #16]
   14030:	add	sp, sp, #20
   14034:	pop	{pc}		; (ldr pc, [sp], #4)
   14038:	ldr	r3, [pc, #76]	; 1408c <flatcc_builder_vector_push@@Base+0xe8>
   1403c:	movw	r2, #907	; 0x38b
   14040:	movw	r1, #33332	; 0x8234
   14044:	movt	r1, #1
   14048:	movw	r0, #33644	; 0x836c
   1404c:	movt	r0, #1
   14050:	bl	12044 <__assert_fail@plt>
   14054:	ldr	r3, [pc, #48]	; 1408c <flatcc_builder_vector_push@@Base+0xe8>
   14058:	mov	r2, #908	; 0x38c
   1405c:	movw	r1, #33332	; 0x8234
   14060:	movt	r1, #1
   14064:	movw	r0, #33688	; 0x8398
   14068:	movt	r0, #1
   1406c:	bl	12044 <__assert_fail@plt>
   14070:	mvn	r2, #3
   14074:	add	r1, r1, #1
   14078:	bl	12a28 <main@@Base+0x5ec>
   1407c:	cmp	r0, #0
   14080:	movne	r4, #0
   14084:	beq	14004 <flatcc_builder_vector_push@@Base+0x60>
   14088:	b	14020 <flatcc_builder_vector_push@@Base+0x7c>
   1408c:	andeq	r7, r1, r8, lsr #28

00014090 <flatcc_builder_append_vector@@Base>:
   14090:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14094:	strd	r6, [sp, #8]
   14098:	str	r8, [sp, #16]
   1409c:	str	lr, [sp, #20]
   140a0:	mov	r6, r1
   140a4:	ldr	r1, [r0, #32]
   140a8:	ldrh	r3, [r1, #14]
   140ac:	cmp	r3, #4
   140b0:	bne	1413c <flatcc_builder_append_vector@@Base+0xac>
   140b4:	mov	r4, r0
   140b8:	ldr	r3, [r1, #20]
   140bc:	add	r0, r2, r3
   140c0:	ldr	ip, [r1, #24]
   140c4:	cmp	r3, r0
   140c8:	movls	r3, #0
   140cc:	movhi	r3, #1
   140d0:	cmp	ip, r0
   140d4:	orrcc	r3, r3, #1
   140d8:	cmp	r3, #0
   140dc:	bne	14158 <flatcc_builder_append_vector@@Base+0xc8>
   140e0:	str	r0, [r1, #20]
   140e4:	ldr	r3, [r4, #32]
   140e8:	ldr	r5, [r3, #16]
   140ec:	mul	r5, r5, r2
   140f0:	ldr	r7, [r4, #20]
   140f4:	add	r1, r5, r7
   140f8:	str	r1, [r4, #20]
   140fc:	ldr	r3, [r4, #24]
   14100:	cmp	r1, r3
   14104:	bcs	14174 <flatcc_builder_append_vector@@Base+0xe4>
   14108:	ldr	r4, [r4, #16]
   1410c:	adds	r4, r4, r7
   14110:	beq	14124 <flatcc_builder_append_vector@@Base+0x94>
   14114:	mov	r2, r5
   14118:	mov	r1, r6
   1411c:	mov	r0, r4
   14120:	bl	11f90 <memcpy@plt>
   14124:	mov	r0, r4
   14128:	ldrd	r4, [sp]
   1412c:	ldrd	r6, [sp, #8]
   14130:	ldr	r8, [sp, #16]
   14134:	add	sp, sp, #20
   14138:	pop	{pc}		; (ldr pc, [sp], #4)
   1413c:	ldr	r3, [pc, #80]	; 14194 <flatcc_builder_append_vector@@Base+0x104>
   14140:	movw	r2, #915	; 0x393
   14144:	movw	r1, #33332	; 0x8234
   14148:	movt	r1, #1
   1414c:	movw	r0, #33644	; 0x836c
   14150:	movt	r0, #1
   14154:	bl	12044 <__assert_fail@plt>
   14158:	ldr	r3, [pc, #56]	; 14198 <flatcc_builder_append_vector@@Base+0x108>
   1415c:	mov	r2, #892	; 0x37c
   14160:	movw	r1, #33332	; 0x8234
   14164:	movt	r1, #1
   14168:	movw	r0, #33616	; 0x8350
   1416c:	movt	r0, #1
   14170:	bl	12044 <__assert_fail@plt>
   14174:	mvn	r2, #3
   14178:	add	r1, r1, #1
   1417c:	mov	r0, r4
   14180:	bl	12a28 <main@@Base+0x5ec>
   14184:	cmp	r0, #0
   14188:	movne	r4, #0
   1418c:	beq	14108 <flatcc_builder_append_vector@@Base+0x78>
   14190:	b	14124 <flatcc_builder_append_vector@@Base+0x94>
   14194:	andeq	r7, r1, r4, asr #28
   14198:	andeq	r7, r1, r4, lsl lr

0001419c <flatcc_builder_extend_offset_vector@@Base>:
   1419c:	strd	r4, [sp, #-16]!
   141a0:	str	r6, [sp, #8]
   141a4:	str	lr, [sp, #12]
   141a8:	mov	r4, r0
   141ac:	ldr	r2, [r0, #32]
   141b0:	ldr	r3, [r2, #20]
   141b4:	adds	r3, r1, r3
   141b8:	movcs	ip, #1
   141bc:	movcc	ip, #0
   141c0:	cmn	r3, #-1073741823	; 0xc0000001
   141c4:	movls	r0, #0
   141c8:	movhi	r0, #1
   141cc:	orrs	r0, ip, r0
   141d0:	bne	14208 <flatcc_builder_extend_offset_vector@@Base+0x6c>
   141d4:	str	r3, [r2, #20]
   141d8:	ldr	r5, [r4, #20]
   141dc:	add	r1, r5, r1, lsl #2
   141e0:	str	r1, [r4, #20]
   141e4:	ldr	r3, [r4, #24]
   141e8:	cmp	r1, r3
   141ec:	bcs	14224 <flatcc_builder_extend_offset_vector@@Base+0x88>
   141f0:	ldr	r0, [r4, #16]
   141f4:	add	r0, r0, r5
   141f8:	ldrd	r4, [sp]
   141fc:	ldr	r6, [sp, #8]
   14200:	add	sp, sp, #12
   14204:	pop	{pc}		; (ldr pc, [sp], #4)
   14208:	ldr	r3, [pc, #52]	; 14244 <flatcc_builder_extend_offset_vector@@Base+0xa8>
   1420c:	mov	r2, #892	; 0x37c
   14210:	movw	r1, #33332	; 0x8234
   14214:	movt	r1, #1
   14218:	movw	r0, #33616	; 0x8350
   1421c:	movt	r0, #1
   14220:	bl	12044 <__assert_fail@plt>
   14224:	mvn	r2, #3
   14228:	add	r1, r1, #1
   1422c:	mov	r0, r4
   14230:	bl	12a28 <main@@Base+0x5ec>
   14234:	cmp	r0, #0
   14238:	movne	r0, #0
   1423c:	beq	141f0 <flatcc_builder_extend_offset_vector@@Base+0x54>
   14240:	b	141f8 <flatcc_builder_extend_offset_vector@@Base+0x5c>
   14244:	andeq	r7, r1, r4, lsl lr

00014248 <flatcc_builder_offset_vector_push@@Base>:
   14248:	strd	r4, [sp, #-16]!
   1424c:	str	r6, [sp, #8]
   14250:	str	lr, [sp, #12]
   14254:	ldr	r2, [r0, #32]
   14258:	ldrh	r3, [r2, #14]
   1425c:	cmp	r3, #5
   14260:	bne	142b8 <flatcc_builder_offset_vector_push@@Base+0x70>
   14264:	mov	r4, r0
   14268:	mov	r6, r1
   1426c:	ldr	r3, [r2, #20]
   14270:	cmn	r3, #-1073741823	; 0xc0000001
   14274:	moveq	r0, #0
   14278:	beq	142a8 <flatcc_builder_offset_vector_push@@Base+0x60>
   1427c:	add	r3, r3, #1
   14280:	str	r3, [r2, #20]
   14284:	ldr	r5, [r4, #20]
   14288:	add	r3, r5, #4
   1428c:	str	r3, [r4, #20]
   14290:	ldr	r2, [r4, #24]
   14294:	cmp	r3, r2
   14298:	bcs	142d4 <flatcc_builder_offset_vector_push@@Base+0x8c>
   1429c:	ldr	r3, [r4, #16]
   142a0:	adds	r0, r3, r5
   142a4:	strne	r6, [r3, r5]
   142a8:	ldrd	r4, [sp]
   142ac:	ldr	r6, [sp, #8]
   142b0:	add	sp, sp, #12
   142b4:	pop	{pc}		; (ldr pc, [sp], #4)
   142b8:	ldr	r3, [pc, #52]	; 142f4 <flatcc_builder_offset_vector_push@@Base+0xac>
   142bc:	movw	r2, #934	; 0x3a6
   142c0:	movw	r1, #33332	; 0x8234
   142c4:	movt	r1, #1
   142c8:	movw	r0, #33752	; 0x83d8
   142cc:	movt	r0, #1
   142d0:	bl	12044 <__assert_fail@plt>
   142d4:	mvn	r2, #3
   142d8:	add	r1, r5, #5
   142dc:	mov	r0, r4
   142e0:	bl	12a28 <main@@Base+0x5ec>
   142e4:	cmp	r0, #0
   142e8:	movne	r0, #0
   142ec:	beq	1429c <flatcc_builder_offset_vector_push@@Base+0x54>
   142f0:	b	142a8 <flatcc_builder_offset_vector_push@@Base+0x60>
   142f4:	andeq	r7, r1, r4, ror #28

000142f8 <flatcc_builder_append_offset_vector@@Base>:
   142f8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   142fc:	strd	r6, [sp, #8]
   14300:	str	r8, [sp, #16]
   14304:	str	lr, [sp, #20]
   14308:	mov	r6, r1
   1430c:	ldr	r1, [r0, #32]
   14310:	ldrh	r3, [r1, #14]
   14314:	cmp	r3, #5
   14318:	bne	14398 <flatcc_builder_append_offset_vector@@Base+0xa0>
   1431c:	mov	r5, r0
   14320:	ldr	r3, [r1, #20]
   14324:	adds	r3, r2, r3
   14328:	movcs	ip, #1
   1432c:	movcc	ip, #0
   14330:	cmn	r3, #-1073741823	; 0xc0000001
   14334:	movls	r0, #0
   14338:	movhi	r0, #1
   1433c:	orrs	r0, ip, r0
   14340:	bne	143b4 <flatcc_builder_append_offset_vector@@Base+0xbc>
   14344:	str	r3, [r1, #20]
   14348:	lsl	r4, r2, #2
   1434c:	ldr	r7, [r5, #20]
   14350:	add	r1, r4, r7
   14354:	str	r1, [r5, #20]
   14358:	ldr	r3, [r5, #24]
   1435c:	cmp	r1, r3
   14360:	bcs	143d0 <flatcc_builder_append_offset_vector@@Base+0xd8>
   14364:	ldr	r5, [r5, #16]
   14368:	adds	r5, r5, r7
   1436c:	beq	14380 <flatcc_builder_append_offset_vector@@Base+0x88>
   14370:	mov	r2, r4
   14374:	mov	r1, r6
   14378:	mov	r0, r5
   1437c:	bl	11f90 <memcpy@plt>
   14380:	mov	r0, r5
   14384:	ldrd	r4, [sp]
   14388:	ldrd	r6, [sp, #8]
   1438c:	ldr	r8, [sp, #16]
   14390:	add	sp, sp, #20
   14394:	pop	{pc}		; (ldr pc, [sp], #4)
   14398:	ldr	r3, [pc, #80]	; 143f0 <flatcc_builder_append_offset_vector@@Base+0xf8>
   1439c:	mov	r2, #948	; 0x3b4
   143a0:	movw	r1, #33332	; 0x8234
   143a4:	movt	r1, #1
   143a8:	movw	r0, #33752	; 0x83d8
   143ac:	movt	r0, #1
   143b0:	bl	12044 <__assert_fail@plt>
   143b4:	ldr	r3, [pc, #56]	; 143f4 <flatcc_builder_append_offset_vector@@Base+0xfc>
   143b8:	mov	r2, #892	; 0x37c
   143bc:	movw	r1, #33332	; 0x8234
   143c0:	movt	r1, #1
   143c4:	movw	r0, #33616	; 0x8350
   143c8:	movt	r0, #1
   143cc:	bl	12044 <__assert_fail@plt>
   143d0:	mvn	r2, #3
   143d4:	add	r1, r1, #1
   143d8:	mov	r0, r5
   143dc:	bl	12a28 <main@@Base+0x5ec>
   143e0:	cmp	r0, #0
   143e4:	movne	r5, #0
   143e8:	beq	14364 <flatcc_builder_append_offset_vector@@Base+0x6c>
   143ec:	b	14380 <flatcc_builder_append_offset_vector@@Base+0x88>
   143f0:	andeq	r7, r1, r8, lsl #29
   143f4:	andeq	r7, r1, r4, lsl lr

000143f8 <flatcc_builder_extend_string@@Base>:
   143f8:	strd	r4, [sp, #-16]!
   143fc:	str	r6, [sp, #8]
   14400:	str	lr, [sp, #12]
   14404:	ldr	r2, [r0, #32]
   14408:	ldrh	r3, [r2, #14]
   1440c:	cmp	r3, #6
   14410:	bne	14458 <flatcc_builder_extend_string@@Base+0x60>
   14414:	mov	r4, r0
   14418:	ldr	r3, [r2, #20]
   1441c:	adds	r3, r1, r3
   14420:	bcs	14474 <flatcc_builder_extend_string@@Base+0x7c>
   14424:	str	r3, [r2, #20]
   14428:	ldr	r5, [r0, #20]
   1442c:	add	r1, r1, r5
   14430:	str	r1, [r0, #20]
   14434:	ldr	r3, [r0, #24]
   14438:	cmp	r1, r3
   1443c:	bcs	14490 <flatcc_builder_extend_string@@Base+0x98>
   14440:	ldr	r0, [r4, #16]
   14444:	add	r0, r0, r5
   14448:	ldrd	r4, [sp]
   1444c:	ldr	r6, [sp, #8]
   14450:	add	sp, sp, #12
   14454:	pop	{pc}		; (ldr pc, [sp], #4)
   14458:	ldr	r3, [pc, #76]	; 144ac <flatcc_builder_extend_string@@Base+0xb4>
   1445c:	movw	r2, #957	; 0x3bd
   14460:	movw	r1, #33332	; 0x8234
   14464:	movt	r1, #1
   14468:	movw	r0, #33804	; 0x840c
   1446c:	movt	r0, #1
   14470:	bl	12044 <__assert_fail@plt>
   14474:	ldr	r3, [pc, #52]	; 144b0 <flatcc_builder_extend_string@@Base+0xb8>
   14478:	mov	r2, #892	; 0x37c
   1447c:	movw	r1, #33332	; 0x8234
   14480:	movt	r1, #1
   14484:	movw	r0, #33616	; 0x8350
   14488:	movt	r0, #1
   1448c:	bl	12044 <__assert_fail@plt>
   14490:	mvn	r2, #3
   14494:	add	r1, r1, #1
   14498:	bl	12a28 <main@@Base+0x5ec>
   1449c:	cmp	r0, #0
   144a0:	movne	r0, #0
   144a4:	beq	14440 <flatcc_builder_extend_string@@Base+0x48>
   144a8:	b	14448 <flatcc_builder_extend_string@@Base+0x50>
   144ac:	andeq	r7, r1, ip, lsr #29
   144b0:	andeq	r7, r1, r4, lsl lr

000144b4 <flatcc_builder_append_string@@Base>:
   144b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   144b8:	strd	r6, [sp, #8]
   144bc:	str	r8, [sp, #16]
   144c0:	str	lr, [sp, #20]
   144c4:	mov	r5, r2
   144c8:	ldr	r2, [r0, #32]
   144cc:	ldrh	r3, [r2, #14]
   144d0:	cmp	r3, #6
   144d4:	bne	1453c <flatcc_builder_append_string@@Base+0x88>
   144d8:	mov	r4, r0
   144dc:	mov	r6, r1
   144e0:	ldr	r3, [r2, #20]
   144e4:	adds	r3, r5, r3
   144e8:	bcs	14558 <flatcc_builder_append_string@@Base+0xa4>
   144ec:	str	r3, [r2, #20]
   144f0:	ldr	r7, [r0, #20]
   144f4:	add	r1, r5, r7
   144f8:	str	r1, [r0, #20]
   144fc:	ldr	r3, [r0, #24]
   14500:	cmp	r1, r3
   14504:	bcs	14574 <flatcc_builder_append_string@@Base+0xc0>
   14508:	ldr	r4, [r4, #16]
   1450c:	adds	r4, r4, r7
   14510:	beq	14524 <flatcc_builder_append_string@@Base+0x70>
   14514:	mov	r2, r5
   14518:	mov	r1, r6
   1451c:	mov	r0, r4
   14520:	bl	11f90 <memcpy@plt>
   14524:	mov	r0, r4
   14528:	ldrd	r4, [sp]
   1452c:	ldrd	r6, [sp, #8]
   14530:	ldr	r8, [sp, #16]
   14534:	add	sp, sp, #20
   14538:	pop	{pc}		; (ldr pc, [sp], #4)
   1453c:	ldr	r3, [pc, #76]	; 14590 <flatcc_builder_append_string@@Base+0xdc>
   14540:	movw	r2, #966	; 0x3c6
   14544:	movw	r1, #33332	; 0x8234
   14548:	movt	r1, #1
   1454c:	movw	r0, #33804	; 0x840c
   14550:	movt	r0, #1
   14554:	bl	12044 <__assert_fail@plt>
   14558:	ldr	r3, [pc, #52]	; 14594 <flatcc_builder_append_string@@Base+0xe0>
   1455c:	mov	r2, #892	; 0x37c
   14560:	movw	r1, #33332	; 0x8234
   14564:	movt	r1, #1
   14568:	movw	r0, #33616	; 0x8350
   1456c:	movt	r0, #1
   14570:	bl	12044 <__assert_fail@plt>
   14574:	mvn	r2, #3
   14578:	add	r1, r1, #1
   1457c:	bl	12a28 <main@@Base+0x5ec>
   14580:	cmp	r0, #0
   14584:	movne	r4, #0
   14588:	beq	14508 <flatcc_builder_append_string@@Base+0x54>
   1458c:	b	14524 <flatcc_builder_append_string@@Base+0x70>
   14590:	andeq	r7, r1, ip, asr #29
   14594:	andeq	r7, r1, r4, lsl lr

00014598 <flatcc_builder_append_string_str@@Base>:
   14598:	strd	r4, [sp, #-16]!
   1459c:	str	r6, [sp, #8]
   145a0:	str	lr, [sp, #12]
   145a4:	mov	r5, r0
   145a8:	mov	r4, r1
   145ac:	mov	r0, r1
   145b0:	bl	11ffc <strlen@plt>
   145b4:	mov	r2, r0
   145b8:	mov	r1, r4
   145bc:	mov	r0, r5
   145c0:	bl	144b4 <flatcc_builder_append_string@@Base>
   145c4:	ldrd	r4, [sp]
   145c8:	ldr	r6, [sp, #8]
   145cc:	add	sp, sp, #12
   145d0:	pop	{pc}		; (ldr pc, [sp], #4)

000145d4 <flatcc_builder_append_string_strn@@Base>:
   145d4:	strd	r4, [sp, #-16]!
   145d8:	str	r6, [sp, #8]
   145dc:	str	lr, [sp, #12]
   145e0:	mov	r6, r0
   145e4:	mov	r4, r1
   145e8:	mov	r5, r2
   145ec:	mov	r1, #0
   145f0:	mov	r0, r4
   145f4:	bl	12020 <memchr@plt>
   145f8:	cmp	r0, #0
   145fc:	subne	r5, r0, r4
   14600:	mov	r2, r5
   14604:	mov	r1, r4
   14608:	mov	r0, r6
   1460c:	bl	144b4 <flatcc_builder_append_string@@Base>
   14610:	ldrd	r4, [sp]
   14614:	ldr	r6, [sp, #8]
   14618:	add	sp, sp, #12
   1461c:	pop	{pc}		; (ldr pc, [sp], #4)

00014620 <flatcc_builder_truncate_vector@@Base>:
   14620:	str	r4, [sp, #-8]!
   14624:	str	lr, [sp, #4]
   14628:	ldr	ip, [r0, #32]
   1462c:	ldrh	r3, [ip, #14]
   14630:	cmp	r3, #4
   14634:	bne	14684 <flatcc_builder_truncate_vector@@Base+0x64>
   14638:	ldr	r3, [ip, #20]
   1463c:	cmp	r3, r1
   14640:	bcc	146a0 <flatcc_builder_truncate_vector@@Base+0x80>
   14644:	sub	r3, r3, r1
   14648:	str	r3, [ip, #20]
   1464c:	ldr	r3, [r0, #32]
   14650:	ldr	r2, [r3, #16]
   14654:	mul	r2, r2, r1
   14658:	ldr	r3, [r0, #20]
   1465c:	sub	r3, r3, r2
   14660:	str	r3, [r0, #20]
   14664:	ldr	r0, [r0, #16]
   14668:	mov	r1, #0
   1466c:	add	r0, r0, r3
   14670:	bl	12014 <memset@plt>
   14674:	mov	r0, #0
   14678:	ldr	r4, [sp]
   1467c:	add	sp, sp, #4
   14680:	pop	{pc}		; (ldr pc, [sp], #4)
   14684:	ldr	r3, [pc, #48]	; 146bc <flatcc_builder_truncate_vector@@Base+0x9c>
   14688:	movw	r2, #985	; 0x3d9
   1468c:	movw	r1, #33332	; 0x8234
   14690:	movt	r1, #1
   14694:	movw	r0, #33644	; 0x836c
   14698:	movt	r0, #1
   1469c:	bl	12044 <__assert_fail@plt>
   146a0:	ldr	r3, [pc, #20]	; 146bc <flatcc_builder_truncate_vector@@Base+0x9c>
   146a4:	movw	r2, #986	; 0x3da
   146a8:	movw	r1, #33332	; 0x8234
   146ac:	movt	r1, #1
   146b0:	movw	r0, #33848	; 0x8438
   146b4:	movt	r0, #1
   146b8:	bl	12044 <__assert_fail@plt>
   146bc:	andeq	r7, r1, ip, ror #29

000146c0 <flatcc_builder_truncate_offset_vector@@Base>:
   146c0:	str	r4, [sp, #-8]!
   146c4:	str	lr, [sp, #4]
   146c8:	ldr	ip, [r0, #32]
   146cc:	ldrh	r3, [ip, #14]
   146d0:	cmp	r3, #5
   146d4:	bne	14724 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   146d8:	ldr	r3, [ip, #20]
   146dc:	cmp	r3, r1
   146e0:	bcc	14740 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   146e4:	sub	r3, r3, r1
   146e8:	str	r3, [ip, #20]
   146ec:	ldr	r3, [r0, #32]
   146f0:	ldr	r2, [r3, #16]
   146f4:	mul	r2, r2, r1
   146f8:	ldr	r3, [r0, #20]
   146fc:	sub	r3, r3, r2
   14700:	str	r3, [r0, #20]
   14704:	ldr	r0, [r0, #16]
   14708:	mov	r1, #0
   1470c:	add	r0, r0, r3
   14710:	bl	12014 <memset@plt>
   14714:	mov	r0, #0
   14718:	ldr	r4, [sp]
   1471c:	add	sp, sp, #4
   14720:	pop	{pc}		; (ldr pc, [sp], #4)
   14724:	ldr	r3, [pc, #48]	; 1475c <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   14728:	movw	r2, #994	; 0x3e2
   1472c:	movw	r1, #33332	; 0x8234
   14730:	movt	r1, #1
   14734:	movw	r0, #33752	; 0x83d8
   14738:	movt	r0, #1
   1473c:	bl	12044 <__assert_fail@plt>
   14740:	ldr	r3, [pc, #20]	; 1475c <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   14744:	movw	r2, #995	; 0x3e3
   14748:	movw	r1, #33332	; 0x8234
   1474c:	movt	r1, #1
   14750:	movw	r0, #33884	; 0x845c
   14754:	movt	r0, #1
   14758:	bl	12044 <__assert_fail@plt>
   1475c:	andeq	r7, r1, ip, lsl #30

00014760 <flatcc_builder_truncate_string@@Base>:
   14760:	str	r4, [sp, #-8]!
   14764:	str	lr, [sp, #4]
   14768:	ldr	r2, [r0, #32]
   1476c:	ldrh	r3, [r2, #14]
   14770:	cmp	r3, #6
   14774:	bne	147bc <flatcc_builder_truncate_string@@Base+0x5c>
   14778:	ldr	r3, [r2, #20]
   1477c:	cmp	r3, r1
   14780:	bcc	147d8 <flatcc_builder_truncate_string@@Base+0x78>
   14784:	sub	r3, r3, r1
   14788:	str	r3, [r2, #20]
   1478c:	ldr	r3, [r0, #20]
   14790:	sub	r3, r3, r1
   14794:	str	r3, [r0, #20]
   14798:	ldr	r0, [r0, #16]
   1479c:	mov	r2, r1
   147a0:	mov	r1, #0
   147a4:	add	r0, r0, r3
   147a8:	bl	12014 <memset@plt>
   147ac:	mov	r0, #0
   147b0:	ldr	r4, [sp]
   147b4:	add	sp, sp, #4
   147b8:	pop	{pc}		; (ldr pc, [sp], #4)
   147bc:	ldr	r3, [pc, #48]	; 147f4 <flatcc_builder_truncate_string@@Base+0x94>
   147c0:	movw	r2, #1003	; 0x3eb
   147c4:	movw	r1, #33332	; 0x8234
   147c8:	movt	r1, #1
   147cc:	movw	r0, #33804	; 0x840c
   147d0:	movt	r0, #1
   147d4:	bl	12044 <__assert_fail@plt>
   147d8:	ldr	r3, [pc, #20]	; 147f4 <flatcc_builder_truncate_string@@Base+0x94>
   147dc:	mov	r2, #1004	; 0x3ec
   147e0:	movw	r1, #33332	; 0x8234
   147e4:	movt	r1, #1
   147e8:	movw	r0, #33944	; 0x8498
   147ec:	movt	r0, #1
   147f0:	bl	12044 <__assert_fail@plt>
   147f4:	andeq	r7, r1, r4, lsr pc

000147f8 <flatcc_builder_start_vector@@Base>:
   147f8:	strd	r4, [sp, #-16]!
   147fc:	str	r6, [sp, #8]
   14800:	str	lr, [sp, #12]
   14804:	mov	r4, r0
   14808:	mov	r6, r1
   1480c:	mov	r5, r3
   14810:	cmp	r2, #4
   14814:	movcs	r1, r2
   14818:	movcc	r1, #4
   1481c:	bl	12cfc <flatcc_builder_default_alloc@@Base+0x24c>
   14820:	cmp	r0, #0
   14824:	bne	14890 <flatcc_builder_start_vector@@Base+0x98>
   14828:	ldr	r3, [r4, #32]
   1482c:	str	r6, [r3, #16]
   14830:	ldr	r3, [r4, #32]
   14834:	mov	r2, #0
   14838:	str	r2, [r3, #20]
   1483c:	ldr	r3, [r4, #32]
   14840:	str	r5, [r3, #24]
   14844:	ldr	r3, [r4, #32]
   14848:	mov	r2, #4
   1484c:	strh	r2, [r3, #14]
   14850:	ldr	r1, [r4, #28]
   14854:	ldr	r2, [r4, #60]	; 0x3c
   14858:	add	r2, r2, r1
   1485c:	str	r2, [r4, #16]
   14860:	ldr	r3, [r4, #64]	; 0x40
   14864:	sub	r3, r3, r1
   14868:	cmn	r3, #4
   1486c:	mvnhi	r3, #3
   14870:	str	r3, [r4, #24]
   14874:	ldr	r3, [r4, #32]
   14878:	mvn	r2, #3
   1487c:	str	r2, [r3, #4]
   14880:	ldrd	r4, [sp]
   14884:	ldr	r6, [sp, #8]
   14888:	add	sp, sp, #12
   1488c:	pop	{pc}		; (ldr pc, [sp], #4)
   14890:	mvn	r0, #0
   14894:	b	14880 <flatcc_builder_start_vector@@Base+0x88>

00014898 <flatcc_builder_start_offset_vector@@Base>:
   14898:	str	r4, [sp, #-8]!
   1489c:	str	lr, [sp, #4]
   148a0:	mov	r4, r0
   148a4:	mov	r1, #4
   148a8:	bl	12cfc <flatcc_builder_default_alloc@@Base+0x24c>
   148ac:	cmp	r0, #0
   148b0:	bne	14914 <flatcc_builder_start_offset_vector@@Base+0x7c>
   148b4:	ldr	r3, [r4, #32]
   148b8:	mov	r2, #4
   148bc:	str	r2, [r3, #16]
   148c0:	ldr	r3, [r4, #32]
   148c4:	mov	r2, #0
   148c8:	str	r2, [r3, #20]
   148cc:	ldr	r3, [r4, #32]
   148d0:	mov	r2, #5
   148d4:	strh	r2, [r3, #14]
   148d8:	ldr	r1, [r4, #28]
   148dc:	ldr	r2, [r4, #60]	; 0x3c
   148e0:	add	r2, r2, r1
   148e4:	str	r2, [r4, #16]
   148e8:	ldr	r3, [r4, #64]	; 0x40
   148ec:	sub	r3, r3, r1
   148f0:	cmn	r3, #4
   148f4:	mvnhi	r3, #3
   148f8:	str	r3, [r4, #24]
   148fc:	ldr	r3, [r4, #32]
   14900:	mvn	r2, #3
   14904:	str	r2, [r3, #4]
   14908:	ldr	r4, [sp]
   1490c:	add	sp, sp, #4
   14910:	pop	{pc}		; (ldr pc, [sp], #4)
   14914:	mvn	r0, #0
   14918:	b	14908 <flatcc_builder_start_offset_vector@@Base+0x70>

0001491c <flatcc_builder_start_string@@Base>:
   1491c:	str	r4, [sp, #-8]!
   14920:	str	lr, [sp, #4]
   14924:	mov	r4, r0
   14928:	mov	r1, #1
   1492c:	bl	12cfc <flatcc_builder_default_alloc@@Base+0x24c>
   14930:	cmp	r0, #0
   14934:	bne	14998 <flatcc_builder_start_string@@Base+0x7c>
   14938:	ldr	r3, [r4, #32]
   1493c:	mov	r2, #1
   14940:	str	r2, [r3, #16]
   14944:	ldr	r3, [r4, #32]
   14948:	mov	r2, #0
   1494c:	str	r2, [r3, #20]
   14950:	ldr	r3, [r4, #32]
   14954:	mov	r2, #6
   14958:	strh	r2, [r3, #14]
   1495c:	ldr	r1, [r4, #28]
   14960:	ldr	r2, [r4, #60]	; 0x3c
   14964:	add	r2, r2, r1
   14968:	str	r2, [r4, #16]
   1496c:	ldr	r3, [r4, #64]	; 0x40
   14970:	sub	r3, r3, r1
   14974:	cmn	r3, #4
   14978:	mvnhi	r3, #3
   1497c:	str	r3, [r4, #24]
   14980:	ldr	r3, [r4, #32]
   14984:	mvn	r2, #3
   14988:	str	r2, [r3, #4]
   1498c:	ldr	r4, [sp]
   14990:	add	sp, sp, #4
   14994:	pop	{pc}		; (ldr pc, [sp], #4)
   14998:	mvn	r0, #0
   1499c:	b	1498c <flatcc_builder_start_string@@Base+0x70>

000149a0 <flatcc_builder_reserve_table@@Base>:
   149a0:	strd	r4, [sp, #-20]!	; 0xffffffec
   149a4:	strd	r6, [sp, #8]
   149a8:	str	lr, [sp, #16]
   149ac:	sub	sp, sp, #12
   149b0:	cmp	r1, #0
   149b4:	blt	14a94 <flatcc_builder_reserve_table@@Base+0xf4>
   149b8:	mov	r4, r0
   149bc:	ldr	r2, [r0, #32]
   149c0:	ldrh	r6, [r2, #28]
   149c4:	ldr	r3, [r2, #16]
   149c8:	add	r6, r3, r6, lsl #1
   149cc:	add	r1, r1, #2
   149d0:	lsl	r5, r1, #1
   149d4:	add	r2, r6, r5
   149d8:	ldr	r3, [r0, #56]	; 0x38
   149dc:	cmp	r2, r3
   149e0:	bls	14a08 <flatcc_builder_reserve_table@@Base+0x68>
   149e4:	mov	r3, #0
   149e8:	str	r3, [sp]
   149ec:	ldr	r7, [r0, #48]	; 0x30
   149f0:	mov	r3, #1
   149f4:	add	r1, r0, #52	; 0x34
   149f8:	ldr	r0, [r0, #40]	; 0x28
   149fc:	blx	r7
   14a00:	cmp	r0, #0
   14a04:	bne	14ab0 <flatcc_builder_reserve_table@@Base+0x110>
   14a08:	ldr	r3, [r4, #52]	; 0x34
   14a0c:	adds	r3, r3, r6
   14a10:	moveq	r3, #0
   14a14:	streq	r3, [r4, #4]
   14a18:	mvneq	r0, #0
   14a1c:	beq	14a80 <flatcc_builder_reserve_table@@Base+0xe0>
   14a20:	add	r3, r3, #4
   14a24:	str	r3, [r4, #4]
   14a28:	ldr	r3, [r4, #32]
   14a2c:	ldr	r6, [r3, #20]
   14a30:	add	r2, r5, r6
   14a34:	sub	r2, r2, #3
   14a38:	ldr	r3, [r4, #80]	; 0x50
   14a3c:	cmp	r2, r3
   14a40:	bls	14a68 <flatcc_builder_reserve_table@@Base+0xc8>
   14a44:	mov	r3, #3
   14a48:	str	r3, [sp]
   14a4c:	ldr	r5, [r4, #48]	; 0x30
   14a50:	mov	r3, #0
   14a54:	add	r1, r4, #76	; 0x4c
   14a58:	ldr	r0, [r4, #40]	; 0x28
   14a5c:	blx	r5
   14a60:	cmp	r0, #0
   14a64:	bne	14acc <flatcc_builder_reserve_table@@Base+0x12c>
   14a68:	ldr	r0, [r4, #76]	; 0x4c
   14a6c:	add	r0, r0, r6
   14a70:	str	r0, [r4]
   14a74:	clz	r0, r0
   14a78:	lsr	r0, r0, #5
   14a7c:	rsb	r0, r0, #0
   14a80:	add	sp, sp, #12
   14a84:	ldrd	r4, [sp]
   14a88:	ldrd	r6, [sp, #8]
   14a8c:	add	sp, sp, #16
   14a90:	pop	{pc}		; (ldr pc, [sp], #4)
   14a94:	ldr	r3, [pc, #76]	; 14ae8 <flatcc_builder_reserve_table@@Base+0x148>
   14a98:	movw	r2, #1065	; 0x429
   14a9c:	movw	r1, #33332	; 0x8234
   14aa0:	movt	r1, #1
   14aa4:	movw	r0, #33980	; 0x84bc
   14aa8:	movt	r0, #1
   14aac:	bl	12044 <__assert_fail@plt>
   14ab0:	ldr	r3, [pc, #52]	; 14aec <flatcc_builder_reserve_table@@Base+0x14c>
   14ab4:	mov	r2, #308	; 0x134
   14ab8:	movw	r1, #33332	; 0x8234
   14abc:	movt	r1, #1
   14ac0:	movw	r0, #33416	; 0x8288
   14ac4:	movt	r0, #1
   14ac8:	bl	12044 <__assert_fail@plt>
   14acc:	ldr	r3, [pc, #24]	; 14aec <flatcc_builder_reserve_table@@Base+0x14c>
   14ad0:	mov	r2, #308	; 0x134
   14ad4:	movw	r1, #33332	; 0x8234
   14ad8:	movt	r1, #1
   14adc:	movw	r0, #33416	; 0x8288
   14ae0:	movt	r0, #1
   14ae4:	bl	12044 <__assert_fail@plt>
   14ae8:	andeq	r7, r1, r4, asr pc
   14aec:	andeq	r7, r1, r0, lsl #26

00014af0 <flatcc_builder_start_table@@Base>:
   14af0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14af4:	strd	r6, [sp, #8]
   14af8:	str	r8, [sp, #16]
   14afc:	str	lr, [sp, #20]
   14b00:	sub	sp, sp, #8
   14b04:	mov	r4, r0
   14b08:	mov	r5, r1
   14b0c:	mov	r1, #4
   14b10:	bl	12cfc <flatcc_builder_default_alloc@@Base+0x24c>
   14b14:	subs	r6, r0, #0
   14b18:	bne	14cc4 <flatcc_builder_start_table@@Base+0x1d4>
   14b1c:	ldr	r2, [r4, #32]
   14b20:	ldr	r3, [r4, #4]
   14b24:	ldr	r1, [r4, #52]	; 0x34
   14b28:	sub	r3, r3, r1
   14b2c:	str	r3, [r2, #16]
   14b30:	ldr	r2, [r4, #32]
   14b34:	ldr	r3, [r4]
   14b38:	ldr	r1, [r4, #76]	; 0x4c
   14b3c:	sub	r3, r3, r1
   14b40:	str	r3, [r2, #20]
   14b44:	ldr	r3, [r4, #32]
   14b48:	ldr	r2, [r4, #12]
   14b4c:	str	r2, [r3, #24]
   14b50:	ldr	r3, [r4, #32]
   14b54:	ldrh	r2, [r4, #8]
   14b58:	strh	r2, [r3, #28]
   14b5c:	movw	r3, #15186	; 0x3b52
   14b60:	movt	r3, #12137	; 0x2f69
   14b64:	str	r3, [r4, #12]
   14b68:	mov	r3, #0
   14b6c:	strh	r3, [r4, #8]
   14b70:	ldr	r3, [r4, #32]
   14b74:	mov	r2, #3
   14b78:	strh	r2, [r3, #14]
   14b7c:	ldr	r2, [r4, #32]
   14b80:	ldrh	r7, [r2, #28]
   14b84:	ldr	r3, [r2, #16]
   14b88:	add	r7, r3, r7, lsl #1
   14b8c:	add	r5, r5, #2
   14b90:	lsl	r5, r5, #1
   14b94:	add	r2, r7, r5
   14b98:	ldr	r3, [r4, #56]	; 0x38
   14b9c:	cmp	r2, r3
   14ba0:	bls	14bc8 <flatcc_builder_start_table@@Base+0xd8>
   14ba4:	mov	r3, #0
   14ba8:	str	r3, [sp]
   14bac:	ldr	r8, [r4, #48]	; 0x30
   14bb0:	mov	r3, #1
   14bb4:	add	r1, r4, #52	; 0x34
   14bb8:	ldr	r0, [r4, #40]	; 0x28
   14bbc:	blx	r8
   14bc0:	cmp	r0, #0
   14bc4:	bne	14c8c <flatcc_builder_start_table@@Base+0x19c>
   14bc8:	ldr	r3, [r4, #52]	; 0x34
   14bcc:	adds	r3, r3, r7
   14bd0:	moveq	r3, #0
   14bd4:	streq	r3, [r4, #4]
   14bd8:	mvneq	r6, #0
   14bdc:	beq	14c70 <flatcc_builder_start_table@@Base+0x180>
   14be0:	add	r3, r3, #4
   14be4:	str	r3, [r4, #4]
   14be8:	ldr	r3, [r4, #32]
   14bec:	ldr	r7, [r3, #20]
   14bf0:	sub	r2, r5, #3
   14bf4:	add	r2, r2, r7
   14bf8:	ldr	r3, [r4, #80]	; 0x50
   14bfc:	cmp	r2, r3
   14c00:	bls	14c28 <flatcc_builder_start_table@@Base+0x138>
   14c04:	mov	r3, #3
   14c08:	str	r3, [sp]
   14c0c:	ldr	r5, [r4, #48]	; 0x30
   14c10:	mov	r3, #0
   14c14:	add	r1, r4, #76	; 0x4c
   14c18:	ldr	r0, [r4, #40]	; 0x28
   14c1c:	blx	r5
   14c20:	cmp	r0, #0
   14c24:	bne	14ca8 <flatcc_builder_start_table@@Base+0x1b8>
   14c28:	ldr	r3, [r4, #76]	; 0x4c
   14c2c:	add	r3, r3, r7
   14c30:	str	r3, [r4]
   14c34:	cmp	r3, #0
   14c38:	beq	14ccc <flatcc_builder_start_table@@Base+0x1dc>
   14c3c:	ldr	r1, [r4, #28]
   14c40:	ldr	r2, [r4, #60]	; 0x3c
   14c44:	add	r2, r2, r1
   14c48:	str	r2, [r4, #16]
   14c4c:	ldr	r3, [r4, #64]	; 0x40
   14c50:	sub	r3, r3, r1
   14c54:	movw	r2, #65532	; 0xfffc
   14c58:	cmp	r3, r2
   14c5c:	movwhi	r3, #65532	; 0xfffc
   14c60:	str	r3, [r4, #24]
   14c64:	ldr	r3, [r4, #32]
   14c68:	movw	r2, #65532	; 0xfffc
   14c6c:	str	r2, [r3, #4]
   14c70:	mov	r0, r6
   14c74:	add	sp, sp, #8
   14c78:	ldrd	r4, [sp]
   14c7c:	ldrd	r6, [sp, #8]
   14c80:	ldr	r8, [sp, #16]
   14c84:	add	sp, sp, #20
   14c88:	pop	{pc}		; (ldr pc, [sp], #4)
   14c8c:	ldr	r3, [pc, #64]	; 14cd4 <flatcc_builder_start_table@@Base+0x1e4>
   14c90:	mov	r2, #308	; 0x134
   14c94:	movw	r1, #33332	; 0x8234
   14c98:	movt	r1, #1
   14c9c:	movw	r0, #33416	; 0x8288
   14ca0:	movt	r0, #1
   14ca4:	bl	12044 <__assert_fail@plt>
   14ca8:	ldr	r3, [pc, #36]	; 14cd4 <flatcc_builder_start_table@@Base+0x1e4>
   14cac:	mov	r2, #308	; 0x134
   14cb0:	movw	r1, #33332	; 0x8234
   14cb4:	movt	r1, #1
   14cb8:	movw	r0, #33416	; 0x8288
   14cbc:	movt	r0, #1
   14cc0:	bl	12044 <__assert_fail@plt>
   14cc4:	mvn	r6, #0
   14cc8:	b	14c70 <flatcc_builder_start_table@@Base+0x180>
   14ccc:	mvn	r6, #0
   14cd0:	b	14c70 <flatcc_builder_start_table@@Base+0x180>
   14cd4:	andeq	r7, r1, r0, lsl #26

00014cd8 <flatcc_builder_create_vtable@@Base>:
   14cd8:	strd	r4, [sp, #-16]!
   14cdc:	str	r6, [sp, #8]
   14ce0:	str	lr, [sp, #12]
   14ce4:	sub	sp, sp, #80	; 0x50
   14ce8:	mov	r5, r0
   14cec:	mov	r3, #0
   14cf0:	str	r3, [sp, #8]
   14cf4:	str	r3, [sp, #12]
   14cf8:	cmp	r2, #0
   14cfc:	beq	14d98 <flatcc_builder_create_vtable@@Base+0xc0>
   14d00:	str	r2, [sp, #8]
   14d04:	str	r1, [sp, #16]
   14d08:	str	r2, [sp, #20]
   14d0c:	mov	r3, #1
   14d10:	str	r3, [sp, #12]
   14d14:	ldr	r3, [r0, #152]	; 0x98
   14d18:	cmp	r3, #0
   14d1c:	bne	14db0 <flatcc_builder_create_vtable@@Base+0xd8>
   14d20:	ldr	r3, [r0, #180]	; 0xb4
   14d24:	cmp	r3, #0
   14d28:	bne	14db0 <flatcc_builder_create_vtable@@Base+0xd8>
   14d2c:	ldr	r4, [r0, #140]	; 0x8c
   14d30:	mov	r3, r2
   14d34:	add	r2, r2, r4
   14d38:	str	r2, [r0, #140]	; 0x8c
   14d3c:	cmp	r4, r2
   14d40:	ble	14e1c <flatcc_builder_create_vtable@@Base+0x144>
   14d44:	ldr	r3, [pc, #276]	; 14e60 <flatcc_builder_create_vtable@@Base+0x188>
   14d48:	movw	r2, #673	; 0x2a1
   14d4c:	movw	r1, #33332	; 0x8234
   14d50:	movt	r1, #1
   14d54:	movw	r0, #33416	; 0x8288
   14d58:	movt	r0, #1
   14d5c:	bl	12044 <__assert_fail@plt>
   14d60:	ldr	r3, [pc, #252]	; 14e64 <flatcc_builder_create_vtable@@Base+0x18c>
   14d64:	movw	r2, #647	; 0x287
   14d68:	movw	r1, #33332	; 0x8234
   14d6c:	movt	r1, #1
   14d70:	movw	r0, #33416	; 0x8288
   14d74:	movt	r0, #1
   14d78:	bl	12044 <__assert_fail@plt>
   14d7c:	ldr	r3, [pc, #224]	; 14e64 <flatcc_builder_create_vtable@@Base+0x18c>
   14d80:	movw	r2, #651	; 0x28b
   14d84:	movw	r1, #33332	; 0x8234
   14d88:	movt	r1, #1
   14d8c:	movw	r0, #33416	; 0x8288
   14d90:	movt	r0, #1
   14d94:	bl	12044 <__assert_fail@plt>
   14d98:	ldr	r3, [r0, #152]	; 0x98
   14d9c:	cmp	r3, #0
   14da0:	bne	14d60 <flatcc_builder_create_vtable@@Base+0x88>
   14da4:	ldr	r3, [r0, #180]	; 0xb4
   14da8:	cmp	r3, #0
   14dac:	beq	14e0c <flatcc_builder_create_vtable@@Base+0x134>
   14db0:	ldr	r2, [r5, #136]	; 0x88
   14db4:	ldr	r3, [sp, #8]
   14db8:	sub	r4, r2, r3
   14dbc:	cmp	r2, r4
   14dc0:	ble	14d60 <flatcc_builder_create_vtable@@Base+0x88>
   14dc4:	str	r3, [sp]
   14dc8:	ldr	r6, [r5, #44]	; 0x2c
   14dcc:	mov	r3, r4
   14dd0:	ldr	r2, [sp, #12]
   14dd4:	add	r1, sp, #16
   14dd8:	ldr	r0, [r5, #36]	; 0x24
   14ddc:	blx	r6
   14de0:	cmp	r0, #0
   14de4:	bne	14d7c <flatcc_builder_create_vtable@@Base+0xa4>
   14de8:	str	r4, [r5, #136]	; 0x88
   14dec:	cmp	r4, #0
   14df0:	addne	r4, r4, #1
   14df4:	mov	r0, r4
   14df8:	add	sp, sp, #80	; 0x50
   14dfc:	ldrd	r4, [sp]
   14e00:	ldr	r6, [sp, #8]
   14e04:	add	sp, sp, #12
   14e08:	pop	{pc}		; (ldr pc, [sp], #4)
   14e0c:	ldr	r4, [r5, #140]	; 0x8c
   14e10:	ldr	r3, [sp, #8]
   14e14:	add	r2, r3, r4
   14e18:	str	r2, [r5, #140]	; 0x8c
   14e1c:	str	r3, [sp]
   14e20:	ldr	r6, [r5, #44]	; 0x2c
   14e24:	mov	r3, r4
   14e28:	ldr	r2, [sp, #12]
   14e2c:	add	r1, sp, #16
   14e30:	ldr	r0, [r5, #36]	; 0x24
   14e34:	blx	r6
   14e38:	cmp	r0, #0
   14e3c:	addeq	r4, r4, #1
   14e40:	beq	14df4 <flatcc_builder_create_vtable@@Base+0x11c>
   14e44:	ldr	r3, [pc, #20]	; 14e60 <flatcc_builder_create_vtable@@Base+0x188>
   14e48:	movw	r2, #677	; 0x2a5
   14e4c:	movw	r1, #33332	; 0x8234
   14e50:	movt	r1, #1
   14e54:	movw	r0, #33416	; 0x8288
   14e58:	movt	r0, #1
   14e5c:	bl	12044 <__assert_fail@plt>
   14e60:	andeq	r7, r1, r4, ror #25
   14e64:	andeq	r7, r1, r0, lsr sp

00014e68 <flatcc_builder_create_cached_vtable@@Base>:
   14e68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14e6c:	strd	r6, [sp, #8]
   14e70:	strd	r8, [sp, #16]
   14e74:	strd	sl, [sp, #24]
   14e78:	str	lr, [sp, #32]
   14e7c:	sub	sp, sp, #36	; 0x24
   14e80:	mov	r5, r0
   14e84:	str	r1, [sp, #12]
   14e88:	str	r2, [sp, #16]
   14e8c:	mov	r6, r3
   14e90:	ldr	r3, [r0, #116]	; 0x74
   14e94:	cmp	r3, #0
   14e98:	beq	14ee0 <flatcc_builder_create_cached_vtable@@Base+0x78>
   14e9c:	ldr	r8, [r5, #116]	; 0x74
   14ea0:	rsb	r3, r8, #32
   14ea4:	lsr	r8, r6, r3
   14ea8:	ldr	sl, [r5, #92]	; 0x5c
   14eac:	adds	r9, sl, r8, lsl #2
   14eb0:	str	r9, [sp, #20]
   14eb4:	beq	151f0 <flatcc_builder_create_cached_vtable@@Base+0x388>
   14eb8:	ldr	r6, [sl, r8, lsl #2]
   14ebc:	cmp	r6, #0
   14ec0:	beq	15118 <flatcc_builder_create_cached_vtable@@Base+0x2b0>
   14ec4:	ldr	fp, [r5, #100]	; 0x64
   14ec8:	ldr	r7, [r5, #68]	; 0x44
   14ecc:	mov	r3, #0
   14ed0:	str	r3, [sp, #28]
   14ed4:	str	r8, [sp, #24]
   14ed8:	ldr	r8, [sp, #16]
   14edc:	b	14fe8 <flatcc_builder_create_cached_vtable@@Base+0x180>
   14ee0:	add	r8, r0, #92	; 0x5c
   14ee4:	ldr	r4, [r0, #124]	; 0x7c
   14ee8:	cmp	r4, #0
   14eec:	bne	14f6c <flatcc_builder_create_cached_vtable@@Base+0x104>
   14ef0:	ldr	r3, [r0, #104]	; 0x68
   14ef4:	cmp	r3, #15
   14ef8:	bhi	14f24 <flatcc_builder_create_cached_vtable@@Base+0xbc>
   14efc:	mov	r3, #6
   14f00:	str	r3, [sp]
   14f04:	ldr	r7, [r0, #48]	; 0x30
   14f08:	mov	r3, #0
   14f0c:	mov	r2, #16
   14f10:	add	r1, r0, #100	; 0x64
   14f14:	ldr	r0, [r0, #40]	; 0x28
   14f18:	blx	r7
   14f1c:	cmp	r0, #0
   14f20:	bne	14f88 <flatcc_builder_create_cached_vtable@@Base+0x120>
   14f24:	ldr	r3, [r5, #100]	; 0x64
   14f28:	cmp	r3, #0
   14f2c:	beq	15208 <flatcc_builder_create_cached_vtable@@Base+0x3a0>
   14f30:	mov	r3, #16
   14f34:	str	r3, [r5, #124]	; 0x7c
   14f38:	mov	r3, #5
   14f3c:	str	r3, [sp]
   14f40:	ldr	r7, [r5, #48]	; 0x30
   14f44:	mov	r3, #1
   14f48:	mov	r2, #256	; 0x100
   14f4c:	mov	r1, r8
   14f50:	ldr	r0, [r5, #40]	; 0x28
   14f54:	blx	r7
   14f58:	cmp	r0, #0
   14f5c:	bne	15208 <flatcc_builder_create_cached_vtable@@Base+0x3a0>
   14f60:	ldr	r1, [r5, #96]	; 0x60
   14f64:	mov	r2, #256	; 0x100
   14f68:	b	14fa8 <flatcc_builder_create_cached_vtable@@Base+0x140>
   14f6c:	ldr	r3, [pc, #668]	; 15210 <flatcc_builder_create_cached_vtable@@Base+0x3a8>
   14f70:	movw	r2, #342	; 0x156
   14f74:	movw	r1, #33332	; 0x8234
   14f78:	movt	r1, #1
   14f7c:	movw	r0, #33992	; 0x84c8
   14f80:	movt	r0, #1
   14f84:	bl	12044 <__assert_fail@plt>
   14f88:	ldr	r3, [pc, #644]	; 15214 <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   14f8c:	mov	r2, #308	; 0x134
   14f90:	movw	r1, #33332	; 0x8234
   14f94:	movt	r1, #1
   14f98:	movw	r0, #33416	; 0x8288
   14f9c:	movt	r0, #1
   14fa0:	bl	12044 <__assert_fail@plt>
   14fa4:	mov	r2, r3
   14fa8:	lsl	r3, r2, #1
   14fac:	cmp	r3, r1
   14fb0:	bls	14fa4 <flatcc_builder_create_cached_vtable@@Base+0x13c>
   14fb4:	lsr	r3, r2, #2
   14fb8:	cmp	r2, #7
   14fbc:	bls	14fd0 <flatcc_builder_create_cached_vtable@@Base+0x168>
   14fc0:	mov	r2, #1
   14fc4:	add	r4, r4, #1
   14fc8:	cmp	r3, r2, lsl r4
   14fcc:	bhi	14fc4 <flatcc_builder_create_cached_vtable@@Base+0x15c>
   14fd0:	str	r4, [r5, #116]	; 0x74
   14fd4:	b	14e9c <flatcc_builder_create_cached_vtable@@Base+0x34>
   14fd8:	add	r9, r4, #12
   14fdc:	ldr	r6, [r4, #12]
   14fe0:	cmp	r6, #0
   14fe4:	beq	15078 <flatcc_builder_create_cached_vtable@@Base+0x210>
   14fe8:	add	r4, fp, r6
   14fec:	ldr	r3, [r4, #8]
   14ff0:	add	r1, r7, r3
   14ff4:	ldrh	r3, [r7, r3]
   14ff8:	cmp	r3, r8
   14ffc:	bne	14fd8 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15000:	mov	r2, r8
   15004:	ldr	r0, [sp, #12]
   15008:	bl	11f9c <memcmp@plt>
   1500c:	cmp	r0, #0
   15010:	bne	14fd8 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15014:	ldr	r2, [r4, #4]
   15018:	ldr	r3, [r5, #152]	; 0x98
   1501c:	cmp	r2, r3
   15020:	bne	15068 <flatcc_builder_create_cached_vtable@@Base+0x200>
   15024:	ldr	r8, [sp, #24]
   15028:	ldr	r3, [sp, #20]
   1502c:	cmp	r3, r9
   15030:	beq	15048 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   15034:	ldr	r3, [r4, #12]
   15038:	str	r3, [r9]
   1503c:	ldr	r3, [sl, r8, lsl #2]
   15040:	str	r3, [r4, #12]
   15044:	str	r6, [sl, r8, lsl #2]
   15048:	ldr	r0, [r4]
   1504c:	add	sp, sp, #36	; 0x24
   15050:	ldrd	r4, [sp]
   15054:	ldrd	r6, [sp, #8]
   15058:	ldrd	r8, [sp, #16]
   1505c:	ldrd	sl, [sp, #24]
   15060:	add	sp, sp, #32
   15064:	pop	{pc}		; (ldr pc, [sp], #4)
   15068:	add	r9, r4, #12
   1506c:	ldr	r6, [r4, #12]
   15070:	str	r4, [sp, #28]
   15074:	b	14fe0 <flatcc_builder_create_cached_vtable@@Base+0x178>
   15078:	ldr	r8, [sp, #24]
   1507c:	ldr	r4, [r5, #124]	; 0x7c
   15080:	add	r2, r4, #16
   15084:	ldr	r3, [r5, #104]	; 0x68
   15088:	cmp	r2, r3
   1508c:	bls	150b4 <flatcc_builder_create_cached_vtable@@Base+0x24c>
   15090:	mov	r3, #6
   15094:	str	r3, [sp]
   15098:	ldr	r6, [r5, #48]	; 0x30
   1509c:	mov	r3, #0
   150a0:	add	r1, r5, #100	; 0x64
   150a4:	ldr	r0, [r5, #40]	; 0x28
   150a8:	blx	r6
   150ac:	cmp	r0, #0
   150b0:	bne	15124 <flatcc_builder_create_cached_vtable@@Base+0x2bc>
   150b4:	ldr	r6, [r5, #100]	; 0x64
   150b8:	adds	r7, r6, r4
   150bc:	beq	151f8 <flatcc_builder_create_cached_vtable@@Base+0x390>
   150c0:	ldr	r3, [r5, #124]	; 0x7c
   150c4:	add	r2, r3, #16
   150c8:	str	r2, [r5, #124]	; 0x7c
   150cc:	ldr	r2, [r5, #152]	; 0x98
   150d0:	str	r2, [r7, #4]
   150d4:	ldr	r2, [sl, r8, lsl #2]
   150d8:	str	r2, [r7, #12]
   150dc:	str	r3, [sl, r8, lsl #2]
   150e0:	ldr	r2, [sp, #16]
   150e4:	ldr	r1, [sp, #12]
   150e8:	mov	r0, r5
   150ec:	bl	14cd8 <flatcc_builder_create_vtable@@Base>
   150f0:	str	r0, [r6, r4]
   150f4:	cmp	r0, #0
   150f8:	beq	1504c <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   150fc:	ldr	r3, [sp, #28]
   15100:	cmp	r3, #0
   15104:	beq	15140 <flatcc_builder_create_cached_vtable@@Base+0x2d8>
   15108:	ldr	r3, [r3, #8]
   1510c:	str	r3, [r7, #8]
   15110:	ldr	r0, [r6, r4]
   15114:	b	1504c <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   15118:	mov	r3, #0
   1511c:	str	r3, [sp, #28]
   15120:	b	1507c <flatcc_builder_create_cached_vtable@@Base+0x214>
   15124:	ldr	r3, [pc, #232]	; 15214 <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   15128:	mov	r2, #308	; 0x134
   1512c:	movw	r1, #33332	; 0x8234
   15130:	movt	r1, #1
   15134:	movw	r0, #33416	; 0x8288
   15138:	movt	r0, #1
   1513c:	bl	12044 <__assert_fail@plt>
   15140:	ldr	r2, [r5, #172]	; 0xac
   15144:	cmp	r2, #0
   15148:	beq	15160 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   1514c:	ldr	r3, [r5, #120]	; 0x78
   15150:	ldr	r1, [sp, #16]
   15154:	add	r3, r1, r3
   15158:	cmp	r2, r3
   1515c:	bcc	151c8 <flatcc_builder_create_cached_vtable@@Base+0x360>
   15160:	ldr	r8, [r5, #120]	; 0x78
   15164:	ldr	r3, [sp, #16]
   15168:	add	r2, r8, r3
   1516c:	ldr	r3, [r5, #72]	; 0x48
   15170:	cmp	r2, r3
   15174:	bls	1519c <flatcc_builder_create_cached_vtable@@Base+0x334>
   15178:	mov	r3, #2
   1517c:	str	r3, [sp]
   15180:	ldr	sl, [r5, #48]	; 0x30
   15184:	mov	r3, #0
   15188:	add	r1, r5, #68	; 0x44
   1518c:	ldr	r0, [r5, #40]	; 0x28
   15190:	blx	sl
   15194:	cmp	r0, #0
   15198:	bne	151d4 <flatcc_builder_create_cached_vtable@@Base+0x36c>
   1519c:	ldr	r3, [r5, #68]	; 0x44
   151a0:	adds	r0, r3, r8
   151a4:	beq	15200 <flatcc_builder_create_cached_vtable@@Base+0x398>
   151a8:	ldr	r3, [r5, #120]	; 0x78
   151ac:	str	r3, [r7, #8]
   151b0:	ldr	r2, [sp, #16]
   151b4:	add	r3, r2, r3
   151b8:	str	r3, [r5, #120]	; 0x78
   151bc:	ldr	r1, [sp, #12]
   151c0:	bl	11f90 <memcpy@plt>
   151c4:	b	15110 <flatcc_builder_create_cached_vtable@@Base+0x2a8>
   151c8:	mov	r0, r5
   151cc:	bl	13070 <flatcc_builder_flush_vtable_cache@@Base>
   151d0:	b	15110 <flatcc_builder_create_cached_vtable@@Base+0x2a8>
   151d4:	ldr	r3, [pc, #56]	; 15214 <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   151d8:	mov	r2, #308	; 0x134
   151dc:	movw	r1, #33332	; 0x8234
   151e0:	movt	r1, #1
   151e4:	movw	r0, #33416	; 0x8288
   151e8:	movt	r0, #1
   151ec:	bl	12044 <__assert_fail@plt>
   151f0:	mov	r0, #0
   151f4:	b	1504c <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   151f8:	mov	r0, #0
   151fc:	b	1504c <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   15200:	mvn	r0, #0
   15204:	b	1504c <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   15208:	mov	r0, #0
   1520c:	b	1504c <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   15210:	andeq	r7, r1, r4, ror pc
   15214:	andeq	r7, r1, r0, lsl #26

00015218 <flatcc_builder_create_table@@Base>:
   15218:	strd	r4, [sp, #-20]!	; 0xffffffec
   1521c:	strd	r6, [sp, #8]
   15220:	str	lr, [sp, #16]
   15224:	sub	sp, sp, #92	; 0x5c
   15228:	ldr	r7, [sp, #116]	; 0x74
   1522c:	ldr	ip, [sp, #120]	; 0x78
   15230:	cmp	r7, #0
   15234:	blt	1537c <flatcc_builder_create_table@@Base+0x164>
   15238:	mov	r4, r0
   1523c:	tst	ip, #1
   15240:	beq	15398 <flatcc_builder_create_table@@Base+0x180>
   15244:	cmp	r3, #4
   15248:	movcc	r3, #4
   1524c:	ldrh	r0, [r0, #128]	; 0x80
   15250:	cmp	r0, r3
   15254:	strhcc	r3, [r4, #128]	; 0x80
   15258:	ldr	r0, [r4, #136]	; 0x88
   1525c:	sub	r6, r0, r2
   15260:	sub	r3, r3, #1
   15264:	and	r6, r6, r3
   15268:	sub	r0, r0, r2
   1526c:	sub	r0, r0, #4
   15270:	sub	ip, ip, #1
   15274:	sub	ip, r0, ip
   15278:	sub	ip, ip, r6
   1527c:	str	ip, [sp, #84]	; 0x54
   15280:	cmp	r7, #0
   15284:	ble	152b4 <flatcc_builder_create_table@@Base+0x9c>
   15288:	ldr	ip, [sp, #112]	; 0x70
   1528c:	add	r7, ip, r7, lsl #1
   15290:	sub	r0, r6, r0
   15294:	sub	lr, r0, #4
   15298:	ldrh	r3, [ip], #2
   1529c:	sub	r5, lr, r3
   152a0:	ldr	r0, [r1, r3]
   152a4:	add	r0, r0, r5
   152a8:	str	r0, [r1, r3]
   152ac:	cmp	r7, ip
   152b0:	bne	15298 <flatcc_builder_create_table@@Base+0x80>
   152b4:	mov	r3, #4
   152b8:	str	r3, [sp, #12]
   152bc:	add	r0, sp, #84	; 0x54
   152c0:	str	r0, [sp, #20]
   152c4:	str	r3, [sp, #24]
   152c8:	mov	r3, #1
   152cc:	str	r3, [sp, #16]
   152d0:	cmp	r2, #0
   152d4:	beq	152f0 <flatcc_builder_create_table@@Base+0xd8>
   152d8:	add	r3, r2, #4
   152dc:	str	r3, [sp, #12]
   152e0:	str	r1, [sp, #28]
   152e4:	str	r2, [sp, #32]
   152e8:	mov	r3, #2
   152ec:	str	r3, [sp, #16]
   152f0:	cmp	r6, #0
   152f4:	beq	15328 <flatcc_builder_create_table@@Base+0x110>
   152f8:	ldr	r3, [sp, #12]
   152fc:	add	r3, r3, r6
   15300:	str	r3, [sp, #12]
   15304:	ldr	r3, [sp, #16]
   15308:	add	r3, r3, #1
   1530c:	add	r2, sp, #88	; 0x58
   15310:	add	r1, r2, r3, lsl #3
   15314:	movw	r2, #31460	; 0x7ae4
   15318:	movt	r2, #1
   1531c:	str	r2, [r1, #-76]	; 0xffffffb4
   15320:	str	r6, [r1, #-72]	; 0xffffffb8
   15324:	str	r3, [sp, #16]
   15328:	ldr	r2, [r4, #136]	; 0x88
   1532c:	ldr	r3, [sp, #12]
   15330:	sub	r5, r2, r3
   15334:	cmp	r2, r5
   15338:	ble	153b4 <flatcc_builder_create_table@@Base+0x19c>
   1533c:	str	r3, [sp]
   15340:	ldr	r6, [r4, #44]	; 0x2c
   15344:	mov	r3, r5
   15348:	ldr	r2, [sp, #16]
   1534c:	add	r1, sp, #20
   15350:	ldr	r0, [r4, #36]	; 0x24
   15354:	blx	r6
   15358:	cmp	r0, #0
   1535c:	bne	153d0 <flatcc_builder_create_table@@Base+0x1b8>
   15360:	str	r5, [r4, #136]	; 0x88
   15364:	mov	r0, r5
   15368:	add	sp, sp, #92	; 0x5c
   1536c:	ldrd	r4, [sp]
   15370:	ldrd	r6, [sp, #8]
   15374:	add	sp, sp, #16
   15378:	pop	{pc}		; (ldr pc, [sp], #4)
   1537c:	ldr	r3, [pc, #104]	; 153ec <flatcc_builder_create_table@@Base+0x1d4>
   15380:	movw	r2, #1237	; 0x4d5
   15384:	movw	r1, #33332	; 0x8234
   15388:	movt	r1, #1
   1538c:	movw	r0, #34008	; 0x84d8
   15390:	movt	r0, #1
   15394:	bl	12044 <__assert_fail@plt>
   15398:	ldr	r3, [pc, #76]	; 153ec <flatcc_builder_create_table@@Base+0x1d4>
   1539c:	movw	r2, #1243	; 0x4db
   153a0:	movw	r1, #33332	; 0x8234
   153a4:	movt	r1, #1
   153a8:	movw	r0, #34028	; 0x84ec
   153ac:	movt	r0, #1
   153b0:	bl	12044 <__assert_fail@plt>
   153b4:	ldr	r3, [pc, #52]	; 153f0 <flatcc_builder_create_table@@Base+0x1d8>
   153b8:	movw	r2, #647	; 0x287
   153bc:	movw	r1, #33332	; 0x8234
   153c0:	movt	r1, #1
   153c4:	movw	r0, #33416	; 0x8288
   153c8:	movt	r0, #1
   153cc:	bl	12044 <__assert_fail@plt>
   153d0:	ldr	r3, [pc, #24]	; 153f0 <flatcc_builder_create_table@@Base+0x1d8>
   153d4:	movw	r2, #651	; 0x28b
   153d8:	movw	r1, #33332	; 0x8234
   153dc:	movt	r1, #1
   153e0:	movw	r0, #33416	; 0x8288
   153e4:	movt	r0, #1
   153e8:	bl	12044 <__assert_fail@plt>
   153ec:	andeq	r7, r1, r0, lsl #31
   153f0:	andeq	r7, r1, r0, lsr sp

000153f4 <flatcc_builder_check_required_field@@Base>:
   153f4:	ldr	r3, [r0, #32]
   153f8:	ldrh	r3, [r3, #14]
   153fc:	cmp	r3, #3
   15400:	bne	15428 <flatcc_builder_check_required_field@@Base+0x34>
   15404:	ldrh	r3, [r0, #8]
   15408:	cmp	r3, r1
   1540c:	bls	1544c <flatcc_builder_check_required_field@@Base+0x58>
   15410:	ldr	r3, [r0, #4]
   15414:	lsl	r1, r1, #1
   15418:	ldrh	r0, [r3, r1]
   1541c:	adds	r0, r0, #0
   15420:	movne	r0, #1
   15424:	bx	lr
   15428:	str	r4, [sp, #-8]!
   1542c:	str	lr, [sp, #4]
   15430:	ldr	r3, [pc, #28]	; 15454 <flatcc_builder_check_required_field@@Base+0x60>
   15434:	movw	r2, #1272	; 0x4f8
   15438:	movw	r1, #33332	; 0x8234
   1543c:	movt	r1, #1
   15440:	movw	r0, #34040	; 0x84f8
   15444:	movt	r0, #1
   15448:	bl	12044 <__assert_fail@plt>
   1544c:	mov	r0, #0
   15450:	bx	lr
   15454:	muleq	r1, ip, pc	; <UNPREDICTABLE>

00015458 <flatcc_builder_check_union_field@@Base>:
   15458:	ldr	r3, [r0, #32]
   1545c:	ldrh	r3, [r3, #14]
   15460:	cmp	r3, #3
   15464:	bne	154b8 <flatcc_builder_check_union_field@@Base+0x60>
   15468:	cmp	r1, #0
   1546c:	beq	15504 <flatcc_builder_check_union_field@@Base+0xac>
   15470:	ldrh	r3, [r0, #8]
   15474:	cmp	r3, r1
   15478:	bls	1550c <flatcc_builder_check_union_field@@Base+0xb4>
   1547c:	ldr	r3, [r0, #4]
   15480:	sub	r1, r1, #-2147483647	; 0x80000001
   15484:	lsl	r1, r1, #1
   15488:	ldrh	r2, [r3, r1]
   1548c:	cmp	r2, #0
   15490:	beq	154dc <flatcc_builder_check_union_field@@Base+0x84>
   15494:	ldr	r0, [r0, #16]
   15498:	ldrb	r2, [r0, r2]
   1549c:	cmp	r2, #0
   154a0:	bne	154f0 <flatcc_builder_check_union_field@@Base+0x98>
   154a4:	add	r1, r3, r1
   154a8:	ldrh	r0, [r1, #2]
   154ac:	clz	r0, r0
   154b0:	lsr	r0, r0, #5
   154b4:	bx	lr
   154b8:	str	r4, [sp, #-8]!
   154bc:	str	lr, [sp, #4]
   154c0:	ldr	r3, [pc, #76]	; 15514 <flatcc_builder_check_union_field@@Base+0xbc>
   154c4:	movw	r2, #1279	; 0x4ff
   154c8:	movw	r1, #33332	; 0x8234
   154cc:	movt	r1, #1
   154d0:	movw	r0, #34040	; 0x84f8
   154d4:	movt	r0, #1
   154d8:	bl	12044 <__assert_fail@plt>
   154dc:	add	r1, r3, r1
   154e0:	ldrh	r0, [r1, #2]
   154e4:	clz	r0, r0
   154e8:	lsr	r0, r0, #5
   154ec:	bx	lr
   154f0:	add	r1, r3, r1
   154f4:	ldrh	r0, [r1, #2]
   154f8:	adds	r0, r0, #0
   154fc:	movne	r0, #1
   15500:	bx	lr
   15504:	mov	r0, #0
   15508:	bx	lr
   1550c:	mov	r0, #0
   15510:	bx	lr
   15514:	andeq	r7, r1, r0, asr #31

00015518 <flatcc_builder_check_required@@Base>:
   15518:	ldr	r3, [r0, #32]
   1551c:	ldrh	r3, [r3, #14]
   15520:	cmp	r3, #3
   15524:	bne	15580 <flatcc_builder_check_required@@Base+0x68>
   15528:	ldrh	r3, [r0, #8]
   1552c:	cmp	r3, r2
   15530:	blt	155ac <flatcc_builder_check_required@@Base+0x94>
   15534:	cmp	r2, #0
   15538:	ble	155b4 <flatcc_builder_check_required@@Base+0x9c>
   1553c:	ldr	ip, [r0, #4]
   15540:	ldrh	r3, [r1]
   15544:	lsl	r3, r3, #1
   15548:	ldrh	r3, [ip, r3]
   1554c:	cmp	r3, #0
   15550:	beq	155bc <flatcc_builder_check_required@@Base+0xa4>
   15554:	add	r0, r1, #2
   15558:	add	r2, r1, r2, lsl #1
   1555c:	cmp	r0, r2
   15560:	beq	155a4 <flatcc_builder_check_required@@Base+0x8c>
   15564:	ldrh	r3, [r0], #2
   15568:	lsl	r3, r3, #1
   1556c:	ldrh	r3, [ip, r3]
   15570:	cmp	r3, #0
   15574:	bne	1555c <flatcc_builder_check_required@@Base+0x44>
   15578:	mov	r0, #0
   1557c:	bx	lr
   15580:	str	r4, [sp, #-8]!
   15584:	str	lr, [sp, #4]
   15588:	ldr	r3, [pc, #52]	; 155c4 <flatcc_builder_check_required@@Base+0xac>
   1558c:	movw	r2, #1297	; 0x511
   15590:	movw	r1, #33332	; 0x8234
   15594:	movt	r1, #1
   15598:	movw	r0, #34040	; 0x84f8
   1559c:	movt	r0, #1
   155a0:	bl	12044 <__assert_fail@plt>
   155a4:	mov	r0, #1
   155a8:	bx	lr
   155ac:	mov	r0, #0
   155b0:	bx	lr
   155b4:	mov	r0, #1
   155b8:	bx	lr
   155bc:	mov	r0, #0
   155c0:	bx	lr
   155c4:	andeq	r7, r1, r4, ror #31

000155c8 <flatcc_builder_end_table@@Base>:
   155c8:	strd	r4, [sp, #-20]!	; 0xffffffec
   155cc:	strd	r6, [sp, #8]
   155d0:	str	lr, [sp, #16]
   155d4:	sub	sp, sp, #20
   155d8:	ldr	r3, [r0, #32]
   155dc:	ldrh	r3, [r3, #14]
   155e0:	cmp	r3, #3
   155e4:	bne	15664 <flatcc_builder_end_table@@Base+0x9c>
   155e8:	mov	r4, r0
   155ec:	ldr	r2, [r0, #4]
   155f0:	sub	r6, r2, #4
   155f4:	ldrh	r5, [r0, #8]
   155f8:	add	r5, r5, #2
   155fc:	lsl	r5, r5, #1
   15600:	uxth	r5, r5
   15604:	strh	r5, [r2, #-4]
   15608:	ldr	r3, [r0, #20]
   1560c:	add	r3, r3, #4
   15610:	uxth	r1, r3
   15614:	strh	r1, [r2, #-2]
   15618:	ldr	r3, [r0, #12]
   1561c:	eor	r3, r3, r5
   15620:	movw	r2, #31153	; 0x79b1
   15624:	movt	r2, #40503	; 0x9e37
   15628:	mul	r3, r2, r3
   1562c:	eor	r3, r3, r1
   15630:	mul	r3, r2, r3
   15634:	str	r3, [r0, #12]
   15638:	mov	r2, r5
   1563c:	mov	r1, r6
   15640:	bl	14e68 <flatcc_builder_create_cached_vtable@@Base>
   15644:	subs	r7, r0, #0
   15648:	bne	15680 <flatcc_builder_end_table@@Base+0xb8>
   1564c:	mov	r0, r7
   15650:	add	sp, sp, #20
   15654:	ldrd	r4, [sp]
   15658:	ldrd	r6, [sp, #8]
   1565c:	add	sp, sp, #16
   15660:	pop	{pc}		; (ldr pc, [sp], #4)
   15664:	ldr	r3, [pc, #284]	; 15788 <flatcc_builder_end_table@@Base+0x1c0>
   15668:	movw	r2, #1317	; 0x525
   1566c:	movw	r1, #33332	; 0x8234
   15670:	movt	r1, #1
   15674:	movw	r0, #34040	; 0x84f8
   15678:	movt	r0, #1
   1567c:	bl	12044 <__assert_fail@plt>
   15680:	mov	r2, r5
   15684:	mov	r1, #0
   15688:	mov	r0, r6
   1568c:	bl	12014 <memset@plt>
   15690:	ldr	r3, [r4, #32]
   15694:	ldr	r2, [r4, #76]	; 0x4c
   15698:	ldr	r3, [r3, #20]
   1569c:	add	r2, r2, r3
   156a0:	str	r7, [sp, #8]
   156a4:	ldr	r3, [r4]
   156a8:	sub	r3, r3, r2
   156ac:	asr	r3, r3, #1
   156b0:	str	r3, [sp, #4]
   156b4:	str	r2, [sp]
   156b8:	ldrh	r3, [r4, #130]	; 0x82
   156bc:	ldr	r2, [r4, #20]
   156c0:	ldr	r1, [r4, #16]
   156c4:	mov	r0, r4
   156c8:	bl	15218 <flatcc_builder_create_table@@Base>
   156cc:	subs	r7, r0, #0
   156d0:	beq	1564c <flatcc_builder_end_table@@Base+0x84>
   156d4:	ldr	r3, [r4, #32]
   156d8:	ldr	r2, [r3, #24]
   156dc:	str	r2, [r4, #12]
   156e0:	ldrh	r2, [r3, #28]
   156e4:	strh	r2, [r4, #8]
   156e8:	ldr	r2, [r4, #52]	; 0x34
   156ec:	ldr	r1, [r3, #16]
   156f0:	add	r2, r2, r1
   156f4:	str	r2, [r4, #4]
   156f8:	ldr	r2, [r4, #76]	; 0x4c
   156fc:	ldr	r3, [r3, #20]
   15700:	add	r3, r2, r3
   15704:	str	r3, [r4]
   15708:	ldr	r2, [r4, #20]
   1570c:	mov	r1, #0
   15710:	ldr	r0, [r4, #16]
   15714:	bl	12014 <memset@plt>
   15718:	ldr	r2, [r4, #32]
   1571c:	ldr	r3, [r2, #8]
   15720:	str	r3, [r4, #20]
   15724:	ldr	r0, [r2]
   15728:	str	r0, [r4, #28]
   1572c:	ldr	r1, [r2, #4]
   15730:	ldr	r3, [r4, #60]	; 0x3c
   15734:	add	r3, r3, r0
   15738:	str	r3, [r4, #16]
   1573c:	ldr	r3, [r4, #64]	; 0x40
   15740:	sub	r3, r3, r0
   15744:	cmp	r3, r1
   15748:	movcs	r3, r1
   1574c:	str	r3, [r4, #24]
   15750:	str	r1, [r2, #4]
   15754:	ldrh	r3, [r4, #130]	; 0x82
   15758:	ldrh	r2, [r4, #128]	; 0x80
   1575c:	cmp	r2, r3
   15760:	strhcc	r3, [r4, #128]	; 0x80
   15764:	ldr	r3, [r4, #32]
   15768:	ldrh	r2, [r3, #12]
   1576c:	strh	r2, [r4, #130]	; 0x82
   15770:	sub	r3, r3, #36	; 0x24
   15774:	str	r3, [r4, #32]
   15778:	ldr	r3, [r4, #156]	; 0x9c
   1577c:	sub	r3, r3, #1
   15780:	str	r3, [r4, #156]	; 0x9c
   15784:	b	1564c <flatcc_builder_end_table@@Base+0x84>
   15788:	andeq	r8, r1, r4

0001578c <flatcc_builder_create_vector@@Base>:
   1578c:	strd	r4, [sp, #-16]!
   15790:	str	r6, [sp, #8]
   15794:	str	lr, [sp, #12]
   15798:	sub	sp, sp, #88	; 0x58
   1579c:	mov	r4, r0
   157a0:	ldrh	r0, [sp, #104]	; 0x68
   157a4:	ldr	ip, [sp, #108]	; 0x6c
   157a8:	cmp	r2, ip
   157ac:	bhi	158a0 <flatcc_builder_create_vector@@Base+0x114>
   157b0:	cmp	r0, #4
   157b4:	movcc	r0, #4
   157b8:	ldrh	ip, [r4, #128]	; 0x80
   157bc:	cmp	ip, r0
   157c0:	strhcc	r0, [r4, #128]	; 0x80
   157c4:	mul	r3, r3, r2
   157c8:	str	r2, [sp, #84]	; 0x54
   157cc:	ldr	r2, [r4, #136]	; 0x88
   157d0:	sub	ip, r2, r3
   157d4:	sub	r0, r0, #1
   157d8:	and	r0, r0, ip
   157dc:	mov	ip, #4
   157e0:	str	ip, [sp, #12]
   157e4:	add	lr, sp, #84	; 0x54
   157e8:	str	lr, [sp, #20]
   157ec:	str	ip, [sp, #24]
   157f0:	mov	ip, #1
   157f4:	str	ip, [sp, #16]
   157f8:	cmp	r3, #0
   157fc:	beq	15818 <flatcc_builder_create_vector@@Base+0x8c>
   15800:	add	ip, r3, #4
   15804:	str	ip, [sp, #12]
   15808:	str	r1, [sp, #28]
   1580c:	str	r3, [sp, #32]
   15810:	mov	r3, #2
   15814:	str	r3, [sp, #16]
   15818:	cmp	r0, #0
   1581c:	beq	15850 <flatcc_builder_create_vector@@Base+0xc4>
   15820:	ldr	r3, [sp, #12]
   15824:	add	r3, r3, r0
   15828:	str	r3, [sp, #12]
   1582c:	ldr	r3, [sp, #16]
   15830:	add	r3, r3, #1
   15834:	add	r1, sp, #88	; 0x58
   15838:	add	ip, r1, r3, lsl #3
   1583c:	movw	r1, #31460	; 0x7ae4
   15840:	movt	r1, #1
   15844:	str	r1, [ip, #-76]	; 0xffffffb4
   15848:	str	r0, [ip, #-72]	; 0xffffffb8
   1584c:	str	r3, [sp, #16]
   15850:	ldr	r3, [sp, #12]
   15854:	sub	r5, r2, r3
   15858:	cmp	r2, r5
   1585c:	ble	158bc <flatcc_builder_create_vector@@Base+0x130>
   15860:	str	r3, [sp]
   15864:	ldr	r6, [r4, #44]	; 0x2c
   15868:	mov	r3, r5
   1586c:	ldr	r2, [sp, #16]
   15870:	add	r1, sp, #20
   15874:	ldr	r0, [r4, #36]	; 0x24
   15878:	blx	r6
   1587c:	cmp	r0, #0
   15880:	bne	158d8 <flatcc_builder_create_vector@@Base+0x14c>
   15884:	str	r5, [r4, #136]	; 0x88
   15888:	mov	r0, r5
   1588c:	add	sp, sp, #88	; 0x58
   15890:	ldrd	r4, [sp]
   15894:	ldr	r6, [sp, #8]
   15898:	add	sp, sp, #12
   1589c:	pop	{pc}		; (ldr pc, [sp], #4)
   158a0:	ldr	r3, [pc, #76]	; 158f4 <flatcc_builder_create_vector@@Base+0x168>
   158a4:	movw	r2, #1365	; 0x555
   158a8:	movw	r1, #33332	; 0x8234
   158ac:	movt	r1, #1
   158b0:	movw	r0, #34084	; 0x8524
   158b4:	movt	r0, #1
   158b8:	bl	12044 <__assert_fail@plt>
   158bc:	ldr	r3, [pc, #52]	; 158f8 <flatcc_builder_create_vector@@Base+0x16c>
   158c0:	movw	r2, #647	; 0x287
   158c4:	movw	r1, #33332	; 0x8234
   158c8:	movt	r1, #1
   158cc:	movw	r0, #33416	; 0x8288
   158d0:	movt	r0, #1
   158d4:	bl	12044 <__assert_fail@plt>
   158d8:	ldr	r3, [pc, #24]	; 158f8 <flatcc_builder_create_vector@@Base+0x16c>
   158dc:	movw	r2, #651	; 0x28b
   158e0:	movw	r1, #33332	; 0x8234
   158e4:	movt	r1, #1
   158e8:	movw	r0, #33416	; 0x8288
   158ec:	movt	r0, #1
   158f0:	bl	12044 <__assert_fail@plt>
   158f4:	andeq	r8, r1, r0, lsr #32
   158f8:	andeq	r7, r1, r0, lsr sp

000158fc <flatcc_builder_end_vector@@Base>:
   158fc:	strd	r4, [sp, #-12]!
   15900:	str	lr, [sp, #8]
   15904:	sub	sp, sp, #12
   15908:	ldr	r1, [r0, #32]
   1590c:	ldrh	r3, [r1, #14]
   15910:	cmp	r3, #4
   15914:	bne	15958 <flatcc_builder_end_vector@@Base+0x5c>
   15918:	mov	r4, r0
   1591c:	ldr	r3, [r1, #16]
   15920:	ldr	r2, [r1, #20]
   15924:	ldr	r1, [r1, #24]
   15928:	str	r1, [sp, #4]
   1592c:	ldrh	r1, [r0, #130]	; 0x82
   15930:	str	r1, [sp]
   15934:	ldr	r1, [r0, #16]
   15938:	bl	1578c <flatcc_builder_create_vector@@Base>
   1593c:	subs	r5, r0, #0
   15940:	bne	15974 <flatcc_builder_end_vector@@Base+0x78>
   15944:	mov	r0, r5
   15948:	add	sp, sp, #12
   1594c:	ldrd	r4, [sp]
   15950:	add	sp, sp, #8
   15954:	pop	{pc}		; (ldr pc, [sp], #4)
   15958:	ldr	r3, [pc, #148]	; 159f4 <flatcc_builder_end_vector@@Base+0xf8>
   1595c:	movw	r2, #1400	; 0x578
   15960:	movw	r1, #33332	; 0x8234
   15964:	movt	r1, #1
   15968:	movw	r0, #33644	; 0x836c
   1596c:	movt	r0, #1
   15970:	bl	12044 <__assert_fail@plt>
   15974:	ldr	r2, [r4, #20]
   15978:	mov	r1, #0
   1597c:	ldr	r0, [r4, #16]
   15980:	bl	12014 <memset@plt>
   15984:	ldr	r2, [r4, #32]
   15988:	ldr	r3, [r2, #8]
   1598c:	str	r3, [r4, #20]
   15990:	ldr	r0, [r2]
   15994:	str	r0, [r4, #28]
   15998:	ldr	r1, [r2, #4]
   1599c:	ldr	r3, [r4, #60]	; 0x3c
   159a0:	add	r3, r3, r0
   159a4:	str	r3, [r4, #16]
   159a8:	ldr	r3, [r4, #64]	; 0x40
   159ac:	sub	r3, r3, r0
   159b0:	cmp	r3, r1
   159b4:	movcs	r3, r1
   159b8:	str	r3, [r4, #24]
   159bc:	str	r1, [r2, #4]
   159c0:	ldrh	r3, [r4, #130]	; 0x82
   159c4:	ldrh	r2, [r4, #128]	; 0x80
   159c8:	cmp	r2, r3
   159cc:	strhcc	r3, [r4, #128]	; 0x80
   159d0:	ldr	r3, [r4, #32]
   159d4:	ldrh	r2, [r3, #12]
   159d8:	strh	r2, [r4, #130]	; 0x82
   159dc:	sub	r3, r3, #36	; 0x24
   159e0:	str	r3, [r4, #32]
   159e4:	ldr	r3, [r4, #156]	; 0x9c
   159e8:	sub	r3, r3, #1
   159ec:	str	r3, [r4, #156]	; 0x9c
   159f0:	b	15944 <flatcc_builder_end_vector@@Base+0x48>
   159f4:	andeq	r8, r1, r0, asr #32

000159f8 <flatcc_builder_vector_count@@Base>:
   159f8:	ldr	r3, [r0, #32]
   159fc:	ldr	r0, [r3, #20]
   15a00:	bx	lr

00015a04 <flatcc_builder_vector_edit@@Base>:
   15a04:	ldr	r0, [r0, #16]
   15a08:	bx	lr

00015a0c <flatcc_builder_create_offset_vector_direct@@Base>:
   15a0c:	str	r4, [sp, #-8]!
   15a10:	str	lr, [sp, #4]
   15a14:	mov	r3, #0
   15a18:	bl	12e68 <flatcc_builder_default_alloc@@Base+0x3b8>
   15a1c:	ldr	r4, [sp]
   15a20:	add	sp, sp, #4
   15a24:	pop	{pc}		; (ldr pc, [sp], #4)

00015a28 <flatcc_builder_end_offset_vector@@Base>:
   15a28:	strd	r4, [sp, #-16]!
   15a2c:	str	r6, [sp, #8]
   15a30:	str	lr, [sp, #12]
   15a34:	ldr	r3, [r0, #32]
   15a38:	ldrh	r2, [r3, #14]
   15a3c:	cmp	r2, #5
   15a40:	bne	15a70 <flatcc_builder_end_offset_vector@@Base+0x48>
   15a44:	mov	r4, r0
   15a48:	ldr	r2, [r3, #20]
   15a4c:	ldr	r1, [r0, #16]
   15a50:	bl	15a0c <flatcc_builder_create_offset_vector_direct@@Base>
   15a54:	subs	r5, r0, #0
   15a58:	bne	15a8c <flatcc_builder_end_offset_vector@@Base+0x64>
   15a5c:	mov	r0, r5
   15a60:	ldrd	r4, [sp]
   15a64:	ldr	r6, [sp, #8]
   15a68:	add	sp, sp, #12
   15a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a70:	ldr	r3, [pc, #148]	; 15b0c <flatcc_builder_end_offset_vector@@Base+0xe4>
   15a74:	movw	r2, #1480	; 0x5c8
   15a78:	movw	r1, #33332	; 0x8234
   15a7c:	movt	r1, #1
   15a80:	movw	r0, #33752	; 0x83d8
   15a84:	movt	r0, #1
   15a88:	bl	12044 <__assert_fail@plt>
   15a8c:	ldr	r2, [r4, #20]
   15a90:	mov	r1, #0
   15a94:	ldr	r0, [r4, #16]
   15a98:	bl	12014 <memset@plt>
   15a9c:	ldr	r2, [r4, #32]
   15aa0:	ldr	r3, [r2, #8]
   15aa4:	str	r3, [r4, #20]
   15aa8:	ldr	r0, [r2]
   15aac:	str	r0, [r4, #28]
   15ab0:	ldr	r1, [r2, #4]
   15ab4:	ldr	r3, [r4, #60]	; 0x3c
   15ab8:	add	r3, r3, r0
   15abc:	str	r3, [r4, #16]
   15ac0:	ldr	r3, [r4, #64]	; 0x40
   15ac4:	sub	r3, r3, r0
   15ac8:	cmp	r3, r1
   15acc:	movcs	r3, r1
   15ad0:	str	r3, [r4, #24]
   15ad4:	str	r1, [r2, #4]
   15ad8:	ldrh	r3, [r4, #130]	; 0x82
   15adc:	ldrh	r2, [r4, #128]	; 0x80
   15ae0:	cmp	r2, r3
   15ae4:	strhcc	r3, [r4, #128]	; 0x80
   15ae8:	ldr	r3, [r4, #32]
   15aec:	ldrh	r2, [r3, #12]
   15af0:	strh	r2, [r4, #130]	; 0x82
   15af4:	sub	r3, r3, #36	; 0x24
   15af8:	str	r3, [r4, #32]
   15afc:	ldr	r3, [r4, #156]	; 0x9c
   15b00:	sub	r3, r3, #1
   15b04:	str	r3, [r4, #156]	; 0x9c
   15b08:	b	15a5c <flatcc_builder_end_offset_vector@@Base+0x34>
   15b0c:	andeq	r8, r1, ip, asr r0

00015b10 <flatcc_builder_create_offset_vector@@Base>:
   15b10:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15b14:	strd	r6, [sp, #8]
   15b18:	str	r8, [sp, #16]
   15b1c:	str	lr, [sp, #20]
   15b20:	mov	r5, r0
   15b24:	mov	r7, r1
   15b28:	mov	r6, r2
   15b2c:	bl	14898 <flatcc_builder_start_offset_vector@@Base>
   15b30:	subs	r4, r0, #0
   15b34:	movne	r4, #0
   15b38:	beq	15b54 <flatcc_builder_create_offset_vector@@Base+0x44>
   15b3c:	mov	r0, r4
   15b40:	ldrd	r4, [sp]
   15b44:	ldrd	r6, [sp, #8]
   15b48:	ldr	r8, [sp, #16]
   15b4c:	add	sp, sp, #20
   15b50:	pop	{pc}		; (ldr pc, [sp], #4)
   15b54:	mov	r1, r6
   15b58:	mov	r0, r5
   15b5c:	bl	1419c <flatcc_builder_extend_offset_vector@@Base>
   15b60:	cmp	r0, #0
   15b64:	beq	15b3c <flatcc_builder_create_offset_vector@@Base+0x2c>
   15b68:	lsl	r2, r6, #2
   15b6c:	mov	r1, r7
   15b70:	bl	11f90 <memcpy@plt>
   15b74:	mov	r0, r5
   15b78:	bl	15a28 <flatcc_builder_end_offset_vector@@Base>
   15b7c:	mov	r4, r0
   15b80:	b	15b3c <flatcc_builder_create_offset_vector@@Base+0x2c>

00015b84 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   15b84:	strd	r4, [sp, #-16]!
   15b88:	str	r6, [sp, #8]
   15b8c:	str	lr, [sp, #12]
   15b90:	mov	r4, r0
   15b94:	ldr	r2, [r0, #32]
   15b98:	ldrh	r0, [r2, #14]
   15b9c:	cmp	r0, #5
   15ba0:	bne	15bd4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x50>
   15ba4:	mov	r3, r1
   15ba8:	ldr	r2, [r2, #20]
   15bac:	ldr	r1, [r4, #16]
   15bb0:	mov	r0, r4
   15bb4:	bl	12e68 <flatcc_builder_default_alloc@@Base+0x3b8>
   15bb8:	subs	r5, r0, #0
   15bbc:	bne	15bf0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x6c>
   15bc0:	mov	r0, r5
   15bc4:	ldrd	r4, [sp]
   15bc8:	ldr	r6, [sp, #8]
   15bcc:	add	sp, sp, #12
   15bd0:	pop	{pc}		; (ldr pc, [sp], #4)
   15bd4:	ldr	r3, [pc, #148]	; 15c70 <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   15bd8:	movw	r2, #1493	; 0x5d5
   15bdc:	movw	r1, #33332	; 0x8234
   15be0:	movt	r1, #1
   15be4:	movw	r0, #33752	; 0x83d8
   15be8:	movt	r0, #1
   15bec:	bl	12044 <__assert_fail@plt>
   15bf0:	ldr	r2, [r4, #20]
   15bf4:	mov	r1, #0
   15bf8:	ldr	r0, [r4, #16]
   15bfc:	bl	12014 <memset@plt>
   15c00:	ldr	r2, [r4, #32]
   15c04:	ldr	r3, [r2, #8]
   15c08:	str	r3, [r4, #20]
   15c0c:	ldr	r0, [r2]
   15c10:	str	r0, [r4, #28]
   15c14:	ldr	r1, [r2, #4]
   15c18:	ldr	r3, [r4, #60]	; 0x3c
   15c1c:	add	r3, r3, r0
   15c20:	str	r3, [r4, #16]
   15c24:	ldr	r3, [r4, #64]	; 0x40
   15c28:	sub	r3, r3, r0
   15c2c:	cmp	r3, r1
   15c30:	movcs	r3, r1
   15c34:	str	r3, [r4, #24]
   15c38:	str	r1, [r2, #4]
   15c3c:	ldrh	r3, [r4, #130]	; 0x82
   15c40:	ldrh	r2, [r4, #128]	; 0x80
   15c44:	cmp	r2, r3
   15c48:	strhcc	r3, [r4, #128]	; 0x80
   15c4c:	ldr	r3, [r4, #32]
   15c50:	ldrh	r2, [r3, #12]
   15c54:	strh	r2, [r4, #130]	; 0x82
   15c58:	sub	r3, r3, #36	; 0x24
   15c5c:	str	r3, [r4, #32]
   15c60:	ldr	r3, [r4, #156]	; 0x9c
   15c64:	sub	r3, r3, #1
   15c68:	str	r3, [r4, #156]	; 0x9c
   15c6c:	b	15bc0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x3c>
   15c70:	andeq	r8, r1, r0, lsl #1

00015c74 <flatcc_builder_offset_vector_edit@@Base>:
   15c74:	ldr	r0, [r0, #16]
   15c78:	bx	lr

00015c7c <flatcc_builder_offset_vector_count@@Base>:
   15c7c:	ldr	r3, [r0, #32]
   15c80:	ldr	r0, [r3, #20]
   15c84:	bx	lr

00015c88 <flatcc_builder_create_union_vector_direct@@Base>:
   15c88:	strd	r4, [sp, #-20]!	; 0xffffffec
   15c8c:	strd	r6, [sp, #8]
   15c90:	str	lr, [sp, #16]
   15c94:	sub	sp, sp, #12
   15c98:	mov	r4, r0
   15c9c:	mov	r5, r1
   15ca0:	mov	r6, r2
   15ca4:	mov	r1, r3
   15ca8:	mov	r3, r2
   15cac:	ldr	r2, [sp, #32]
   15cb0:	mov	r0, r5
   15cb4:	bl	12e68 <flatcc_builder_default_alloc@@Base+0x3b8>
   15cb8:	subs	r7, r0, #0
   15cbc:	bne	15ce4 <flatcc_builder_create_union_vector_direct@@Base+0x5c>
   15cc0:	mov	r3, #0
   15cc4:	str	r3, [r4]
   15cc8:	str	r3, [r4, #4]
   15ccc:	mov	r0, r4
   15cd0:	add	sp, sp, #12
   15cd4:	ldrd	r4, [sp]
   15cd8:	ldrd	r6, [sp, #8]
   15cdc:	add	sp, sp, #16
   15ce0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ce4:	mvn	r3, #0
   15ce8:	str	r3, [sp, #4]
   15cec:	mov	r3, #1
   15cf0:	str	r3, [sp]
   15cf4:	ldr	r2, [sp, #32]
   15cf8:	mov	r1, r6
   15cfc:	mov	r0, r5
   15d00:	bl	1578c <flatcc_builder_create_vector@@Base>
   15d04:	cmp	r0, #0
   15d08:	moveq	r3, #0
   15d0c:	streq	r3, [r4]
   15d10:	strne	r0, [r4]
   15d14:	str	r7, [r4, #4]
   15d18:	b	15ccc <flatcc_builder_create_union_vector_direct@@Base+0x44>

00015d1c <flatcc_builder_create_union_vector@@Base>:
   15d1c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15d20:	strd	r6, [sp, #8]
   15d24:	str	r8, [sp, #16]
   15d28:	str	lr, [sp, #20]
   15d2c:	sub	sp, sp, #16
   15d30:	mov	r5, r0
   15d34:	mov	r4, r1
   15d38:	mov	r7, r2
   15d3c:	mov	r6, r3
   15d40:	mov	r0, r1
   15d44:	bl	14898 <flatcc_builder_start_offset_vector@@Base>
   15d48:	cmp	r0, #0
   15d4c:	beq	15d78 <flatcc_builder_create_union_vector@@Base+0x5c>
   15d50:	mov	r3, #0
   15d54:	str	r3, [r5]
   15d58:	str	r3, [r5, #4]
   15d5c:	mov	r0, r5
   15d60:	add	sp, sp, #16
   15d64:	ldrd	r4, [sp]
   15d68:	ldrd	r6, [sp, #8]
   15d6c:	ldr	r8, [sp, #16]
   15d70:	add	sp, sp, #20
   15d74:	pop	{pc}		; (ldr pc, [sp], #4)
   15d78:	mov	r1, r6
   15d7c:	mov	r0, r4
   15d80:	bl	1419c <flatcc_builder_extend_offset_vector@@Base>
   15d84:	cmp	r0, #0
   15d88:	moveq	r3, #0
   15d8c:	streq	r3, [r5]
   15d90:	streq	r3, [r5, #4]
   15d94:	beq	15d5c <flatcc_builder_create_union_vector@@Base+0x40>
   15d98:	ldr	r8, [r4, #20]
   15d9c:	add	r1, r6, r8
   15da0:	str	r1, [r4, #20]
   15da4:	ldr	r3, [r4, #24]
   15da8:	cmp	r1, r3
   15dac:	bcs	15e90 <flatcc_builder_create_union_vector@@Base+0x174>
   15db0:	ldr	r3, [r4, #16]
   15db4:	adds	r2, r3, r8
   15db8:	beq	15ea8 <flatcc_builder_create_union_vector@@Base+0x18c>
   15dbc:	cmp	r6, #0
   15dc0:	beq	15df0 <flatcc_builder_create_union_vector@@Base+0xd4>
   15dc4:	mov	r1, r7
   15dc8:	sub	ip, r2, #1
   15dcc:	sub	r0, r3, #4
   15dd0:	add	r7, r7, r6, lsl #3
   15dd4:	ldrb	lr, [r1]
   15dd8:	strb	lr, [ip, #1]!
   15ddc:	ldr	lr, [r1, #4]
   15de0:	str	lr, [r0, #4]!
   15de4:	add	r1, r1, #8
   15de8:	cmp	r1, r7
   15dec:	bne	15dd4 <flatcc_builder_create_union_vector@@Base+0xb8>
   15df0:	str	r6, [sp]
   15df4:	mov	r1, r4
   15df8:	add	r0, sp, #8
   15dfc:	bl	15c88 <flatcc_builder_create_union_vector_direct@@Base>
   15e00:	ldr	r7, [sp, #8]
   15e04:	ldr	r6, [sp, #12]
   15e08:	ldr	r2, [r4, #20]
   15e0c:	mov	r1, #0
   15e10:	ldr	r0, [r4, #16]
   15e14:	bl	12014 <memset@plt>
   15e18:	ldr	r2, [r4, #32]
   15e1c:	ldr	r3, [r2, #8]
   15e20:	str	r3, [r4, #20]
   15e24:	ldr	r0, [r2]
   15e28:	str	r0, [r4, #28]
   15e2c:	ldr	r1, [r2, #4]
   15e30:	ldr	r3, [r4, #60]	; 0x3c
   15e34:	add	r3, r3, r0
   15e38:	str	r3, [r4, #16]
   15e3c:	ldr	r3, [r4, #64]	; 0x40
   15e40:	sub	r3, r3, r0
   15e44:	cmp	r3, r1
   15e48:	movcs	r3, r1
   15e4c:	str	r3, [r4, #24]
   15e50:	str	r1, [r2, #4]
   15e54:	ldrh	r3, [r4, #130]	; 0x82
   15e58:	ldrh	r2, [r4, #128]	; 0x80
   15e5c:	cmp	r2, r3
   15e60:	strhcc	r3, [r4, #128]	; 0x80
   15e64:	ldr	r3, [r4, #32]
   15e68:	ldrh	r2, [r3, #12]
   15e6c:	strh	r2, [r4, #130]	; 0x82
   15e70:	sub	r3, r3, #36	; 0x24
   15e74:	str	r3, [r4, #32]
   15e78:	ldr	r3, [r4, #156]	; 0x9c
   15e7c:	sub	r3, r3, #1
   15e80:	str	r3, [r4, #156]	; 0x9c
   15e84:	str	r7, [r5]
   15e88:	str	r6, [r5, #4]
   15e8c:	b	15d5c <flatcc_builder_create_union_vector@@Base+0x40>
   15e90:	mvn	r2, #3
   15e94:	add	r1, r1, #1
   15e98:	mov	r0, r4
   15e9c:	bl	12a28 <main@@Base+0x5ec>
   15ea0:	cmp	r0, #0
   15ea4:	beq	15db0 <flatcc_builder_create_union_vector@@Base+0x94>
   15ea8:	mov	r3, #0
   15eac:	str	r3, [r5]
   15eb0:	str	r3, [r5, #4]
   15eb4:	b	15d5c <flatcc_builder_create_union_vector@@Base+0x40>

00015eb8 <flatcc_builder_start_union_vector@@Base>:
   15eb8:	str	r4, [sp, #-8]!
   15ebc:	str	lr, [sp, #4]
   15ec0:	mov	r4, r0
   15ec4:	mov	r1, #4
   15ec8:	bl	12cfc <flatcc_builder_default_alloc@@Base+0x24c>
   15ecc:	cmp	r0, #0
   15ed0:	bne	15f34 <flatcc_builder_start_union_vector@@Base+0x7c>
   15ed4:	ldr	r3, [r4, #32]
   15ed8:	mov	r2, #8
   15edc:	str	r2, [r3, #16]
   15ee0:	ldr	r3, [r4, #32]
   15ee4:	mov	r2, #0
   15ee8:	str	r2, [r3, #20]
   15eec:	ldr	r3, [r4, #32]
   15ef0:	mov	r2, #7
   15ef4:	strh	r2, [r3, #14]
   15ef8:	ldr	r1, [r4, #28]
   15efc:	ldr	r2, [r4, #60]	; 0x3c
   15f00:	add	r2, r2, r1
   15f04:	str	r2, [r4, #16]
   15f08:	ldr	r3, [r4, #64]	; 0x40
   15f0c:	sub	r3, r3, r1
   15f10:	cmn	r3, #4
   15f14:	mvnhi	r3, #3
   15f18:	str	r3, [r4, #24]
   15f1c:	ldr	r3, [r4, #32]
   15f20:	mvn	r2, #3
   15f24:	str	r2, [r3, #4]
   15f28:	ldr	r4, [sp]
   15f2c:	add	sp, sp, #4
   15f30:	pop	{pc}		; (ldr pc, [sp], #4)
   15f34:	mvn	r0, #0
   15f38:	b	15f28 <flatcc_builder_start_union_vector@@Base+0x70>

00015f3c <flatcc_builder_end_union_vector@@Base>:
   15f3c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15f40:	strd	r6, [sp, #8]
   15f44:	str	r8, [sp, #16]
   15f48:	str	lr, [sp, #20]
   15f4c:	sub	sp, sp, #16
   15f50:	ldr	r3, [r1, #32]
   15f54:	ldrh	r2, [r3, #14]
   15f58:	cmp	r2, #7
   15f5c:	bne	16084 <flatcc_builder_end_union_vector@@Base+0x148>
   15f60:	mov	r6, r0
   15f64:	mov	r4, r1
   15f68:	ldr	r5, [r3, #20]
   15f6c:	ldr	r8, [r1, #20]
   15f70:	add	r1, r5, r5, lsl #2
   15f74:	add	r1, r1, r8
   15f78:	str	r1, [r4, #20]
   15f7c:	ldr	r3, [r4, #24]
   15f80:	cmp	r1, r3
   15f84:	bcs	160a0 <flatcc_builder_end_union_vector@@Base+0x164>
   15f88:	ldr	r7, [r4, #16]
   15f8c:	adds	r3, r7, r8
   15f90:	beq	160b8 <flatcc_builder_end_union_vector@@Base+0x17c>
   15f94:	add	r2, r3, r5, lsl #2
   15f98:	cmp	r5, #0
   15f9c:	beq	15fcc <flatcc_builder_end_union_vector@@Base+0x90>
   15fa0:	mov	r1, r7
   15fa4:	sub	ip, r2, #1
   15fa8:	sub	r0, r3, #4
   15fac:	add	r7, r7, r5, lsl #3
   15fb0:	ldrb	lr, [r1]
   15fb4:	strb	lr, [ip, #1]!
   15fb8:	ldr	lr, [r1, #4]
   15fbc:	str	lr, [r0, #4]!
   15fc0:	add	r1, r1, #8
   15fc4:	cmp	r1, r7
   15fc8:	bne	15fb0 <flatcc_builder_end_union_vector@@Base+0x74>
   15fcc:	str	r5, [sp]
   15fd0:	mov	r1, r4
   15fd4:	add	r0, sp, #8
   15fd8:	bl	15c88 <flatcc_builder_create_union_vector_direct@@Base>
   15fdc:	ldr	r7, [sp, #8]
   15fe0:	ldr	r5, [sp, #12]
   15fe4:	ldr	r2, [r4, #20]
   15fe8:	mov	r1, #0
   15fec:	ldr	r0, [r4, #16]
   15ff0:	bl	12014 <memset@plt>
   15ff4:	ldr	r2, [r4, #32]
   15ff8:	ldr	r3, [r2, #8]
   15ffc:	str	r3, [r4, #20]
   16000:	ldr	r0, [r2]
   16004:	str	r0, [r4, #28]
   16008:	ldr	r1, [r2, #4]
   1600c:	ldr	r3, [r4, #60]	; 0x3c
   16010:	add	r3, r3, r0
   16014:	str	r3, [r4, #16]
   16018:	ldr	r3, [r4, #64]	; 0x40
   1601c:	sub	r3, r3, r0
   16020:	cmp	r3, r1
   16024:	movcs	r3, r1
   16028:	str	r3, [r4, #24]
   1602c:	str	r1, [r2, #4]
   16030:	ldrh	r3, [r4, #130]	; 0x82
   16034:	ldrh	r2, [r4, #128]	; 0x80
   16038:	cmp	r2, r3
   1603c:	strhcc	r3, [r4, #128]	; 0x80
   16040:	ldr	r3, [r4, #32]
   16044:	ldrh	r2, [r3, #12]
   16048:	strh	r2, [r4, #130]	; 0x82
   1604c:	sub	r3, r3, #36	; 0x24
   16050:	str	r3, [r4, #32]
   16054:	ldr	r3, [r4, #156]	; 0x9c
   16058:	sub	r3, r3, #1
   1605c:	str	r3, [r4, #156]	; 0x9c
   16060:	str	r7, [r6]
   16064:	str	r5, [r6, #4]
   16068:	mov	r0, r6
   1606c:	add	sp, sp, #16
   16070:	ldrd	r4, [sp]
   16074:	ldrd	r6, [sp, #8]
   16078:	ldr	r8, [sp, #16]
   1607c:	add	sp, sp, #20
   16080:	pop	{pc}		; (ldr pc, [sp], #4)
   16084:	ldr	r3, [pc, #60]	; 160c8 <flatcc_builder_end_union_vector@@Base+0x18c>
   16088:	movw	r2, #1617	; 0x651
   1608c:	movw	r1, #33332	; 0x8234
   16090:	movt	r1, #1
   16094:	movw	r0, #34104	; 0x8538
   16098:	movt	r0, #1
   1609c:	bl	12044 <__assert_fail@plt>
   160a0:	mvn	r2, #3
   160a4:	add	r1, r1, #1
   160a8:	mov	r0, r4
   160ac:	bl	12a28 <main@@Base+0x5ec>
   160b0:	cmp	r0, #0
   160b4:	beq	15f88 <flatcc_builder_end_union_vector@@Base+0x4c>
   160b8:	mov	r3, #0
   160bc:	str	r3, [r6]
   160c0:	str	r3, [r6, #4]
   160c4:	b	16068 <flatcc_builder_end_union_vector@@Base+0x12c>
   160c8:	andeq	r8, r1, ip, lsr #1

000160cc <flatcc_builder_union_vector_edit@@Base>:
   160cc:	ldr	r0, [r0, #16]
   160d0:	bx	lr

000160d4 <flatcc_builder_union_vector_count@@Base>:
   160d4:	ldr	r3, [r0, #32]
   160d8:	ldr	r0, [r3, #20]
   160dc:	bx	lr

000160e0 <flatcc_builder_extend_union_vector@@Base>:
   160e0:	strd	r4, [sp, #-16]!
   160e4:	str	r6, [sp, #8]
   160e8:	str	lr, [sp, #12]
   160ec:	mov	r4, r0
   160f0:	ldr	r2, [r0, #32]
   160f4:	ldr	r3, [r2, #20]
   160f8:	adds	r3, r1, r3
   160fc:	movcs	ip, #1
   16100:	movcc	ip, #0
   16104:	cmn	r3, #-536870911	; 0xe0000001
   16108:	movls	r0, #0
   1610c:	movhi	r0, #1
   16110:	orrs	r0, ip, r0
   16114:	bne	1614c <flatcc_builder_extend_union_vector@@Base+0x6c>
   16118:	str	r3, [r2, #20]
   1611c:	ldr	r5, [r4, #20]
   16120:	add	r1, r5, r1, lsl #3
   16124:	str	r1, [r4, #20]
   16128:	ldr	r3, [r4, #24]
   1612c:	cmp	r1, r3
   16130:	bcs	16168 <flatcc_builder_extend_union_vector@@Base+0x88>
   16134:	ldr	r0, [r4, #16]
   16138:	add	r0, r0, r5
   1613c:	ldrd	r4, [sp]
   16140:	ldr	r6, [sp, #8]
   16144:	add	sp, sp, #12
   16148:	pop	{pc}		; (ldr pc, [sp], #4)
   1614c:	ldr	r3, [pc, #52]	; 16188 <flatcc_builder_extend_union_vector@@Base+0xa8>
   16150:	mov	r2, #892	; 0x37c
   16154:	movw	r1, #33332	; 0x8234
   16158:	movt	r1, #1
   1615c:	movw	r0, #33616	; 0x8350
   16160:	movt	r0, #1
   16164:	bl	12044 <__assert_fail@plt>
   16168:	mvn	r2, #3
   1616c:	add	r1, r1, #1
   16170:	mov	r0, r4
   16174:	bl	12a28 <main@@Base+0x5ec>
   16178:	cmp	r0, #0
   1617c:	movne	r0, #0
   16180:	beq	16134 <flatcc_builder_extend_union_vector@@Base+0x54>
   16184:	b	1613c <flatcc_builder_extend_union_vector@@Base+0x5c>
   16188:	andeq	r7, r1, r4, lsl lr

0001618c <flatcc_builder_truncate_union_vector@@Base>:
   1618c:	str	r4, [sp, #-8]!
   16190:	str	lr, [sp, #4]
   16194:	ldr	ip, [r0, #32]
   16198:	ldrh	r3, [ip, #14]
   1619c:	cmp	r3, #7
   161a0:	bne	161f0 <flatcc_builder_truncate_union_vector@@Base+0x64>
   161a4:	ldr	r3, [ip, #20]
   161a8:	cmp	r3, r1
   161ac:	bcc	1620c <flatcc_builder_truncate_union_vector@@Base+0x80>
   161b0:	sub	r3, r3, r1
   161b4:	str	r3, [ip, #20]
   161b8:	ldr	r3, [r0, #32]
   161bc:	ldr	r2, [r3, #16]
   161c0:	mul	r2, r2, r1
   161c4:	ldr	r3, [r0, #20]
   161c8:	sub	r3, r3, r2
   161cc:	str	r3, [r0, #20]
   161d0:	ldr	r0, [r0, #16]
   161d4:	mov	r1, #0
   161d8:	add	r0, r0, r3
   161dc:	bl	12014 <memset@plt>
   161e0:	mov	r0, #0
   161e4:	ldr	r4, [sp]
   161e8:	add	sp, sp, #4
   161ec:	pop	{pc}		; (ldr pc, [sp], #4)
   161f0:	ldr	r3, [pc, #48]	; 16228 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   161f4:	movw	r2, #1665	; 0x681
   161f8:	movw	r1, #33332	; 0x8234
   161fc:	movt	r1, #1
   16200:	movw	r0, #34104	; 0x8538
   16204:	movt	r0, #1
   16208:	bl	12044 <__assert_fail@plt>
   1620c:	ldr	r3, [pc, #20]	; 16228 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   16210:	movw	r2, #1666	; 0x682
   16214:	movw	r1, #33332	; 0x8234
   16218:	movt	r1, #1
   1621c:	movw	r0, #33884	; 0x845c
   16220:	movt	r0, #1
   16224:	bl	12044 <__assert_fail@plt>
   16228:	andeq	r8, r1, ip, asr #1

0001622c <flatcc_builder_union_vector_push@@Base>:
   1622c:	strd	r4, [sp, #-20]!	; 0xffffffec
   16230:	strd	r6, [sp, #8]
   16234:	str	lr, [sp, #16]
   16238:	sub	sp, sp, #12
   1623c:	add	r3, sp, #8
   16240:	stmdb	r3, {r1, r2}
   16244:	ldr	r2, [r0, #32]
   16248:	ldrh	r3, [r2, #14]
   1624c:	cmp	r3, #7
   16250:	bne	162ac <flatcc_builder_union_vector_push@@Base+0x80>
   16254:	mov	r4, r0
   16258:	ldr	r3, [r2, #20]
   1625c:	cmn	r3, #-536870911	; 0xe0000001
   16260:	moveq	r0, #0
   16264:	beq	16298 <flatcc_builder_union_vector_push@@Base+0x6c>
   16268:	add	r3, r3, #1
   1626c:	str	r3, [r2, #20]
   16270:	ldr	r5, [r4, #20]
   16274:	add	r3, r5, #8
   16278:	str	r3, [r4, #20]
   1627c:	ldr	r2, [r4, #24]
   16280:	cmp	r3, r2
   16284:	bcs	162c8 <flatcc_builder_union_vector_push@@Base+0x9c>
   16288:	ldr	r3, [r4, #16]
   1628c:	adds	r0, r3, r5
   16290:	ldrdne	r6, [sp]
   16294:	strdne	r6, [r3, r5]
   16298:	add	sp, sp, #12
   1629c:	ldrd	r4, [sp]
   162a0:	ldrd	r6, [sp, #8]
   162a4:	add	sp, sp, #16
   162a8:	pop	{pc}		; (ldr pc, [sp], #4)
   162ac:	ldr	r3, [pc, #52]	; 162e8 <flatcc_builder_union_vector_push@@Base+0xbc>
   162b0:	movw	r2, #1677	; 0x68d
   162b4:	movw	r1, #33332	; 0x8234
   162b8:	movt	r1, #1
   162bc:	movw	r0, #34104	; 0x8538
   162c0:	movt	r0, #1
   162c4:	bl	12044 <__assert_fail@plt>
   162c8:	mvn	r2, #3
   162cc:	add	r1, r5, #9
   162d0:	mov	r0, r4
   162d4:	bl	12a28 <main@@Base+0x5ec>
   162d8:	cmp	r0, #0
   162dc:	movne	r0, #0
   162e0:	beq	16288 <flatcc_builder_union_vector_push@@Base+0x5c>
   162e4:	b	16298 <flatcc_builder_union_vector_push@@Base+0x6c>
   162e8:	strdeq	r8, [r1], -r4

000162ec <flatcc_builder_append_union_vector@@Base>:
   162ec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   162f0:	strd	r6, [sp, #8]
   162f4:	str	r8, [sp, #16]
   162f8:	str	lr, [sp, #20]
   162fc:	mov	r6, r1
   16300:	ldr	r1, [r0, #32]
   16304:	ldrh	r3, [r1, #14]
   16308:	cmp	r3, #7
   1630c:	bne	1638c <flatcc_builder_append_union_vector@@Base+0xa0>
   16310:	mov	r5, r0
   16314:	ldr	r3, [r1, #20]
   16318:	adds	r3, r2, r3
   1631c:	movcs	ip, #1
   16320:	movcc	ip, #0
   16324:	cmn	r3, #-536870911	; 0xe0000001
   16328:	movls	r0, #0
   1632c:	movhi	r0, #1
   16330:	orrs	r0, ip, r0
   16334:	bne	163a8 <flatcc_builder_append_union_vector@@Base+0xbc>
   16338:	str	r3, [r1, #20]
   1633c:	lsl	r4, r2, #3
   16340:	ldr	r7, [r5, #20]
   16344:	add	r1, r4, r7
   16348:	str	r1, [r5, #20]
   1634c:	ldr	r3, [r5, #24]
   16350:	cmp	r1, r3
   16354:	bcs	163c4 <flatcc_builder_append_union_vector@@Base+0xd8>
   16358:	ldr	r5, [r5, #16]
   1635c:	adds	r5, r5, r7
   16360:	beq	16374 <flatcc_builder_append_union_vector@@Base+0x88>
   16364:	mov	r2, r4
   16368:	mov	r1, r6
   1636c:	mov	r0, r5
   16370:	bl	11f90 <memcpy@plt>
   16374:	mov	r0, r5
   16378:	ldrd	r4, [sp]
   1637c:	ldrd	r6, [sp, #8]
   16380:	ldr	r8, [sp, #16]
   16384:	add	sp, sp, #20
   16388:	pop	{pc}		; (ldr pc, [sp], #4)
   1638c:	ldr	r3, [pc, #80]	; 163e4 <flatcc_builder_append_union_vector@@Base+0xf8>
   16390:	movw	r2, #1692	; 0x69c
   16394:	movw	r1, #33332	; 0x8234
   16398:	movt	r1, #1
   1639c:	movw	r0, #34104	; 0x8538
   163a0:	movt	r0, #1
   163a4:	bl	12044 <__assert_fail@plt>
   163a8:	ldr	r3, [pc, #56]	; 163e8 <flatcc_builder_append_union_vector@@Base+0xfc>
   163ac:	mov	r2, #892	; 0x37c
   163b0:	movw	r1, #33332	; 0x8234
   163b4:	movt	r1, #1
   163b8:	movw	r0, #33616	; 0x8350
   163bc:	movt	r0, #1
   163c0:	bl	12044 <__assert_fail@plt>
   163c4:	mvn	r2, #3
   163c8:	add	r1, r1, #1
   163cc:	mov	r0, r5
   163d0:	bl	12a28 <main@@Base+0x5ec>
   163d4:	cmp	r0, #0
   163d8:	movne	r5, #0
   163dc:	beq	16358 <flatcc_builder_append_union_vector@@Base+0x6c>
   163e0:	b	16374 <flatcc_builder_append_union_vector@@Base+0x88>
   163e4:	andeq	r8, r1, r8, lsl r1
   163e8:	andeq	r7, r1, r4, lsl lr

000163ec <flatcc_builder_create_string@@Base>:
   163ec:	strd	r4, [sp, #-16]!
   163f0:	str	r6, [sp, #8]
   163f4:	str	lr, [sp, #12]
   163f8:	sub	sp, sp, #88	; 0x58
   163fc:	mov	r4, r0
   16400:	str	r2, [sp, #84]	; 0x54
   16404:	ldr	r0, [r0, #136]	; 0x88
   16408:	sub	r3, r0, r2
   1640c:	sub	r3, r3, #1
   16410:	and	r3, r3, #3
   16414:	add	r3, r3, #1
   16418:	mov	ip, #4
   1641c:	str	ip, [sp, #12]
   16420:	add	lr, sp, #84	; 0x54
   16424:	str	lr, [sp, #20]
   16428:	str	ip, [sp, #24]
   1642c:	mov	ip, #1
   16430:	str	ip, [sp, #16]
   16434:	cmp	r2, #0
   16438:	beq	16454 <flatcc_builder_create_string@@Base+0x68>
   1643c:	add	ip, r2, #4
   16440:	str	ip, [sp, #12]
   16444:	str	r1, [sp, #28]
   16448:	str	r2, [sp, #32]
   1644c:	mov	r2, #2
   16450:	str	r2, [sp, #16]
   16454:	ldr	r1, [sp, #12]
   16458:	add	r1, r3, r1
   1645c:	str	r1, [sp, #12]
   16460:	ldr	r2, [sp, #16]
   16464:	add	r2, r2, #1
   16468:	add	ip, sp, #88	; 0x58
   1646c:	add	lr, ip, r2, lsl #3
   16470:	movw	ip, #31460	; 0x7ae4
   16474:	movt	ip, #1
   16478:	str	ip, [lr, #-76]	; 0xffffffb4
   1647c:	str	r3, [lr, #-72]	; 0xffffffb8
   16480:	str	r2, [sp, #16]
   16484:	sub	r5, r0, r1
   16488:	cmp	r0, r5
   1648c:	ble	164cc <flatcc_builder_create_string@@Base+0xe0>
   16490:	str	r1, [sp]
   16494:	ldr	r6, [r4, #44]	; 0x2c
   16498:	mov	r3, r5
   1649c:	add	r1, sp, #20
   164a0:	ldr	r0, [r4, #36]	; 0x24
   164a4:	blx	r6
   164a8:	cmp	r0, #0
   164ac:	bne	164e8 <flatcc_builder_create_string@@Base+0xfc>
   164b0:	str	r5, [r4, #136]	; 0x88
   164b4:	mov	r0, r5
   164b8:	add	sp, sp, #88	; 0x58
   164bc:	ldrd	r4, [sp]
   164c0:	ldr	r6, [sp, #8]
   164c4:	add	sp, sp, #12
   164c8:	pop	{pc}		; (ldr pc, [sp], #4)
   164cc:	add	r3, ip, #588	; 0x24c
   164d0:	movw	r2, #647	; 0x287
   164d4:	movw	r1, #33332	; 0x8234
   164d8:	movt	r1, #1
   164dc:	movw	r0, #33416	; 0x8288
   164e0:	movt	r0, #1
   164e4:	bl	12044 <__assert_fail@plt>
   164e8:	ldr	r3, [pc, #20]	; 16504 <flatcc_builder_create_string@@Base+0x118>
   164ec:	movw	r2, #651	; 0x28b
   164f0:	movw	r1, #33332	; 0x8234
   164f4:	movt	r1, #1
   164f8:	movw	r0, #33416	; 0x8288
   164fc:	movt	r0, #1
   16500:	bl	12044 <__assert_fail@plt>
   16504:	andeq	r7, r1, r0, lsr sp

00016508 <flatcc_builder_create_string_str@@Base>:
   16508:	strd	r4, [sp, #-16]!
   1650c:	str	r6, [sp, #8]
   16510:	str	lr, [sp, #12]
   16514:	mov	r5, r0
   16518:	mov	r4, r1
   1651c:	mov	r0, r1
   16520:	bl	11ffc <strlen@plt>
   16524:	mov	r2, r0
   16528:	mov	r1, r4
   1652c:	mov	r0, r5
   16530:	bl	163ec <flatcc_builder_create_string@@Base>
   16534:	ldrd	r4, [sp]
   16538:	ldr	r6, [sp, #8]
   1653c:	add	sp, sp, #12
   16540:	pop	{pc}		; (ldr pc, [sp], #4)

00016544 <flatcc_builder_create_string_strn@@Base>:
   16544:	strd	r4, [sp, #-16]!
   16548:	str	r6, [sp, #8]
   1654c:	str	lr, [sp, #12]
   16550:	mov	r6, r0
   16554:	mov	r4, r1
   16558:	mov	r5, r2
   1655c:	mov	r1, #0
   16560:	mov	r0, r4
   16564:	bl	12020 <memchr@plt>
   16568:	cmp	r0, #0
   1656c:	subne	r5, r0, r4
   16570:	mov	r2, r5
   16574:	mov	r1, r4
   16578:	mov	r0, r6
   1657c:	bl	163ec <flatcc_builder_create_string@@Base>
   16580:	ldrd	r4, [sp]
   16584:	ldr	r6, [sp, #8]
   16588:	add	sp, sp, #12
   1658c:	pop	{pc}		; (ldr pc, [sp], #4)

00016590 <flatcc_builder_end_string@@Base>:
   16590:	strd	r4, [sp, #-16]!
   16594:	str	r6, [sp, #8]
   16598:	str	lr, [sp, #12]
   1659c:	ldr	r3, [r0, #32]
   165a0:	ldrh	r2, [r3, #14]
   165a4:	cmp	r2, #6
   165a8:	bne	165e4 <flatcc_builder_end_string@@Base+0x54>
   165ac:	mov	r4, r0
   165b0:	ldr	r2, [r0, #20]
   165b4:	ldr	r3, [r3, #20]
   165b8:	cmp	r3, r2
   165bc:	bne	16600 <flatcc_builder_end_string@@Base+0x70>
   165c0:	ldr	r1, [r0, #16]
   165c4:	bl	163ec <flatcc_builder_create_string@@Base>
   165c8:	subs	r5, r0, #0
   165cc:	bne	1661c <flatcc_builder_end_string@@Base+0x8c>
   165d0:	mov	r0, r5
   165d4:	ldrd	r4, [sp]
   165d8:	ldr	r6, [sp, #8]
   165dc:	add	sp, sp, #12
   165e0:	pop	{pc}		; (ldr pc, [sp], #4)
   165e4:	ldr	r3, [pc, #176]	; 1669c <flatcc_builder_end_string@@Base+0x10c>
   165e8:	movw	r2, #1732	; 0x6c4
   165ec:	movw	r1, #33332	; 0x8234
   165f0:	movt	r1, #1
   165f4:	movw	r0, #33804	; 0x840c
   165f8:	movt	r0, #1
   165fc:	bl	12044 <__assert_fail@plt>
   16600:	ldr	r3, [pc, #148]	; 1669c <flatcc_builder_end_string@@Base+0x10c>
   16604:	movw	r2, #1733	; 0x6c5
   16608:	movw	r1, #33332	; 0x8234
   1660c:	movt	r1, #1
   16610:	movw	r0, #34156	; 0x856c
   16614:	movt	r0, #1
   16618:	bl	12044 <__assert_fail@plt>
   1661c:	ldr	r2, [r4, #20]
   16620:	mov	r1, #0
   16624:	ldr	r0, [r4, #16]
   16628:	bl	12014 <memset@plt>
   1662c:	ldr	r2, [r4, #32]
   16630:	ldr	r3, [r2, #8]
   16634:	str	r3, [r4, #20]
   16638:	ldr	r0, [r2]
   1663c:	str	r0, [r4, #28]
   16640:	ldr	r1, [r2, #4]
   16644:	ldr	r3, [r4, #60]	; 0x3c
   16648:	add	r3, r3, r0
   1664c:	str	r3, [r4, #16]
   16650:	ldr	r3, [r4, #64]	; 0x40
   16654:	sub	r3, r3, r0
   16658:	cmp	r3, r1
   1665c:	movcs	r3, r1
   16660:	str	r3, [r4, #24]
   16664:	str	r1, [r2, #4]
   16668:	ldrh	r3, [r4, #130]	; 0x82
   1666c:	ldrh	r2, [r4, #128]	; 0x80
   16670:	cmp	r2, r3
   16674:	strhcc	r3, [r4, #128]	; 0x80
   16678:	ldr	r3, [r4, #32]
   1667c:	ldrh	r2, [r3, #12]
   16680:	strh	r2, [r4, #130]	; 0x82
   16684:	sub	r3, r3, #36	; 0x24
   16688:	str	r3, [r4, #32]
   1668c:	ldr	r3, [r4, #156]	; 0x9c
   16690:	sub	r3, r3, #1
   16694:	str	r3, [r4, #156]	; 0x9c
   16698:	b	165d0 <flatcc_builder_end_string@@Base+0x40>
   1669c:	andeq	r8, r1, ip, lsr r1

000166a0 <flatcc_builder_string_edit@@Base>:
   166a0:	ldr	r0, [r0, #16]
   166a4:	bx	lr

000166a8 <flatcc_builder_string_len@@Base>:
   166a8:	ldr	r3, [r0, #32]
   166ac:	ldr	r0, [r3, #20]
   166b0:	bx	lr

000166b4 <flatcc_builder_table_add@@Base>:
   166b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   166b8:	strd	r6, [sp, #8]
   166bc:	str	r8, [sp, #16]
   166c0:	str	lr, [sp, #20]
   166c4:	mov	r5, r1
   166c8:	ldr	r1, [r0, #32]
   166cc:	ldrh	r1, [r1, #14]
   166d0:	cmp	r1, #3
   166d4:	bne	16794 <flatcc_builder_table_add@@Base+0xe0>
   166d8:	mov	r4, r0
   166dc:	movw	r1, #32764	; 0x7ffc
   166e0:	cmp	r5, r1
   166e4:	bhi	167b0 <flatcc_builder_table_add@@Base+0xfc>
   166e8:	ldrh	r1, [r0, #130]	; 0x82
   166ec:	cmp	r1, r3
   166f0:	strhcc	r3, [r0, #130]	; 0x82
   166f4:	ldr	r0, [r0, #4]
   166f8:	lsl	r1, r5, #1
   166fc:	ldrh	r1, [r0, r1]
   16700:	cmp	r1, #0
   16704:	bne	167cc <flatcc_builder_table_add@@Base+0x118>
   16708:	ldr	r0, [r4, #12]
   1670c:	eor	r0, r0, r5
   16710:	movw	r1, #31153	; 0x79b1
   16714:	movt	r1, #40503	; 0x9e37
   16718:	mul	r0, r1, r0
   1671c:	eor	r0, r0, r2
   16720:	mul	r0, r1, r0
   16724:	str	r0, [r4, #12]
   16728:	uxth	r7, r5
   1672c:	sub	r6, r3, #1
   16730:	ldr	r0, [r4, #20]
   16734:	add	r6, r6, r0
   16738:	rsb	r3, r3, #0
   1673c:	and	r6, r6, r3
   16740:	add	r1, r2, r6
   16744:	str	r1, [r4, #20]
   16748:	ldr	r3, [r4, #24]
   1674c:	cmp	r1, r3
   16750:	bcs	167e8 <flatcc_builder_table_add@@Base+0x134>
   16754:	uxth	r5, r5
   16758:	ldr	r3, [r4, #4]
   1675c:	lsl	r5, r5, #1
   16760:	add	r2, r6, #4
   16764:	strh	r2, [r3, r5]
   16768:	ldrh	r3, [r4, #8]
   1676c:	cmp	r3, r7
   16770:	addls	r7, r7, #1
   16774:	strhls	r7, [r4, #8]
   16778:	ldr	r0, [r4, #16]
   1677c:	add	r0, r0, r6
   16780:	ldrd	r4, [sp]
   16784:	ldrd	r6, [sp, #8]
   16788:	ldr	r8, [sp, #16]
   1678c:	add	sp, sp, #20
   16790:	pop	{pc}		; (ldr pc, [sp], #4)
   16794:	ldr	r3, [pc, #108]	; 16808 <flatcc_builder_table_add@@Base+0x154>
   16798:	movw	r2, #1773	; 0x6ed
   1679c:	movw	r1, #33332	; 0x8234
   167a0:	movt	r1, #1
   167a4:	movw	r0, #34040	; 0x84f8
   167a8:	movt	r0, #1
   167ac:	bl	12044 <__assert_fail@plt>
   167b0:	ldr	r3, [pc, #80]	; 16808 <flatcc_builder_table_add@@Base+0x154>
   167b4:	movw	r2, #1774	; 0x6ee
   167b8:	movw	r1, #33332	; 0x8234
   167bc:	movt	r1, #1
   167c0:	movw	r0, #34192	; 0x8590
   167c4:	movt	r0, #1
   167c8:	bl	12044 <__assert_fail@plt>
   167cc:	ldr	r3, [pc, #52]	; 16808 <flatcc_builder_table_add@@Base+0x154>
   167d0:	movw	r2, #1784	; 0x6f8
   167d4:	movw	r1, #33332	; 0x8234
   167d8:	movt	r1, #1
   167dc:	movw	r0, #33416	; 0x8288
   167e0:	movt	r0, #1
   167e4:	bl	12044 <__assert_fail@plt>
   167e8:	movw	r2, #65532	; 0xfffc
   167ec:	add	r1, r1, #1
   167f0:	mov	r0, r4
   167f4:	bl	12a28 <main@@Base+0x5ec>
   167f8:	cmp	r0, #0
   167fc:	movne	r0, #0
   16800:	beq	16754 <flatcc_builder_table_add@@Base+0xa0>
   16804:	b	16780 <flatcc_builder_table_add@@Base+0xcc>
   16808:	andeq	r8, r1, r8, asr r1

0001680c <flatcc_builder_table_edit@@Base>:
   1680c:	ldr	r2, [r0, #32]
   16810:	ldrh	r2, [r2, #14]
   16814:	cmp	r2, #3
   16818:	bne	16830 <flatcc_builder_table_edit@@Base+0x24>
   1681c:	ldr	r3, [r0, #20]
   16820:	sub	r3, r3, r1
   16824:	ldr	r0, [r0, #16]
   16828:	add	r0, r0, r3
   1682c:	bx	lr
   16830:	str	r4, [sp, #-8]!
   16834:	str	lr, [sp, #4]
   16838:	ldr	r3, [pc, #20]	; 16854 <flatcc_builder_table_edit@@Base+0x48>
   1683c:	movw	r2, #1794	; 0x702
   16840:	movw	r1, #33332	; 0x8234
   16844:	movt	r1, #1
   16848:	movw	r0, #34040	; 0x84f8
   1684c:	movt	r0, #1
   16850:	bl	12044 <__assert_fail@plt>
   16854:	andeq	r8, r1, r4, ror r1

00016858 <flatcc_builder_table_add_copy@@Base>:
   16858:	strd	r4, [sp, #-16]!
   1685c:	str	r6, [sp, #8]
   16860:	str	lr, [sp, #12]
   16864:	mov	r6, r2
   16868:	mov	r5, r3
   1686c:	ldrh	r3, [sp, #16]
   16870:	mov	r2, r5
   16874:	bl	166b4 <flatcc_builder_table_add@@Base>
   16878:	subs	r4, r0, #0
   1687c:	beq	16890 <flatcc_builder_table_add_copy@@Base+0x38>
   16880:	mov	r2, r5
   16884:	mov	r1, r6
   16888:	mov	r0, r4
   1688c:	bl	11f90 <memcpy@plt>
   16890:	mov	r0, r4
   16894:	ldrd	r4, [sp]
   16898:	ldr	r6, [sp, #8]
   1689c:	add	sp, sp, #12
   168a0:	pop	{pc}		; (ldr pc, [sp], #4)

000168a4 <flatcc_builder_table_add_offset@@Base>:
   168a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   168a8:	strd	r6, [sp, #8]
   168ac:	str	r8, [sp, #16]
   168b0:	str	lr, [sp, #20]
   168b4:	ldr	r3, [r0, #32]
   168b8:	ldrh	r3, [r3, #14]
   168bc:	cmp	r3, #3
   168c0:	bne	16984 <flatcc_builder_table_add_offset@@Base+0xe0>
   168c4:	mov	r4, r0
   168c8:	mov	r5, r1
   168cc:	movw	r3, #32764	; 0x7ffc
   168d0:	cmp	r1, r3
   168d4:	bhi	169a0 <flatcc_builder_table_add_offset@@Base+0xfc>
   168d8:	ldr	r2, [r0, #4]
   168dc:	lsl	r3, r1, #1
   168e0:	ldrh	r3, [r2, r3]
   168e4:	cmp	r3, #0
   168e8:	bne	169bc <flatcc_builder_table_add_offset@@Base+0x118>
   168ec:	ldr	r3, [r0, #12]
   168f0:	eor	r3, r3, r1
   168f4:	movw	r2, #31153	; 0x79b1
   168f8:	movt	r2, #40503	; 0x9e37
   168fc:	mul	r3, r2, r3
   16900:	eor	r3, r3, #4
   16904:	mul	r3, r2, r3
   16908:	str	r3, [r0, #12]
   1690c:	uxth	r7, r1
   16910:	ldr	r6, [r0, #20]
   16914:	add	r6, r6, #3
   16918:	bic	r6, r6, #3
   1691c:	add	r1, r6, #4
   16920:	str	r1, [r0, #20]
   16924:	ldr	r3, [r0, #24]
   16928:	cmp	r1, r3
   1692c:	bhi	169d8 <flatcc_builder_table_add_offset@@Base+0x134>
   16930:	uxth	r2, r6
   16934:	uxth	r5, r5
   16938:	ldr	r3, [r4, #4]
   1693c:	lsl	r5, r5, #1
   16940:	add	r1, r2, #4
   16944:	strh	r1, [r3, r5]
   16948:	ldrh	r3, [r4, #8]
   1694c:	cmp	r3, r7
   16950:	addls	r7, r7, #1
   16954:	strhls	r7, [r4, #8]
   16958:	ldr	r3, [r4]
   1695c:	add	r1, r3, #2
   16960:	str	r1, [r4]
   16964:	strh	r2, [r3]
   16968:	ldr	r0, [r4, #16]
   1696c:	add	r0, r0, r6
   16970:	ldrd	r4, [sp]
   16974:	ldrd	r6, [sp, #8]
   16978:	ldr	r8, [sp, #16]
   1697c:	add	sp, sp, #20
   16980:	pop	{pc}		; (ldr pc, [sp], #4)
   16984:	ldr	r3, [pc, #100]	; 169f0 <flatcc_builder_table_add_offset@@Base+0x14c>
   16988:	movw	r2, #1811	; 0x713
   1698c:	movw	r1, #33332	; 0x8234
   16990:	movt	r1, #1
   16994:	movw	r0, #34040	; 0x84f8
   16998:	movt	r0, #1
   1699c:	bl	12044 <__assert_fail@plt>
   169a0:	ldr	r3, [pc, #72]	; 169f0 <flatcc_builder_table_add_offset@@Base+0x14c>
   169a4:	movw	r2, #1812	; 0x714
   169a8:	movw	r1, #33332	; 0x8234
   169ac:	movt	r1, #1
   169b0:	movw	r0, #34192	; 0x8590
   169b4:	movt	r0, #1
   169b8:	bl	12044 <__assert_fail@plt>
   169bc:	ldr	r3, [pc, #44]	; 169f0 <flatcc_builder_table_add_offset@@Base+0x14c>
   169c0:	movw	r2, #1819	; 0x71b
   169c4:	movw	r1, #33332	; 0x8234
   169c8:	movt	r1, #1
   169cc:	movw	r0, #33416	; 0x8288
   169d0:	movt	r0, #1
   169d4:	bl	12044 <__assert_fail@plt>
   169d8:	movw	r2, #65532	; 0xfffc
   169dc:	bl	12a28 <main@@Base+0x5ec>
   169e0:	cmp	r0, #0
   169e4:	movne	r0, #0
   169e8:	beq	16930 <flatcc_builder_table_add_offset@@Base+0x8c>
   169ec:	b	16970 <flatcc_builder_table_add_offset@@Base+0xcc>
   169f0:	muleq	r1, r0, r1

000169f4 <flatcc_builder_table_add_union@@Base>:
   169f4:	strd	r4, [sp, #-20]!	; 0xffffffec
   169f8:	strd	r6, [sp, #8]
   169fc:	str	lr, [sp, #16]
   16a00:	sub	sp, sp, #12
   16a04:	mov	r7, r1
   16a08:	add	r1, sp, #8
   16a0c:	stmdb	r1, {r2, r3}
   16a10:	ldrb	r6, [sp]
   16a14:	ldr	r5, [sp, #4]
   16a18:	ldr	r3, [r0, #32]
   16a1c:	ldrh	r3, [r3, #14]
   16a20:	cmp	r3, #3
   16a24:	bne	16a98 <flatcc_builder_table_add_union@@Base+0xa4>
   16a28:	mov	r4, r0
   16a2c:	clz	r3, r6
   16a30:	lsr	r3, r3, #5
   16a34:	cmp	r5, #0
   16a38:	moveq	r3, #0
   16a3c:	cmp	r3, #0
   16a40:	bne	16ab4 <flatcc_builder_table_add_union@@Base+0xc0>
   16a44:	cmp	r5, #0
   16a48:	beq	16a60 <flatcc_builder_table_add_union@@Base+0x6c>
   16a4c:	mov	r1, r7
   16a50:	bl	168a4 <flatcc_builder_table_add_offset@@Base>
   16a54:	cmp	r0, #0
   16a58:	strne	r5, [r0]
   16a5c:	beq	16ad0 <flatcc_builder_table_add_union@@Base+0xdc>
   16a60:	mov	r3, #1
   16a64:	mov	r2, r3
   16a68:	sub	r1, r7, #1
   16a6c:	mov	r0, r4
   16a70:	bl	166b4 <flatcc_builder_table_add@@Base>
   16a74:	cmp	r0, #0
   16a78:	beq	16aec <flatcc_builder_table_add_union@@Base+0xf8>
   16a7c:	strb	r6, [r0]
   16a80:	mov	r0, #0
   16a84:	add	sp, sp, #12
   16a88:	ldrd	r4, [sp]
   16a8c:	ldrd	r6, [sp, #8]
   16a90:	add	sp, sp, #16
   16a94:	pop	{pc}		; (ldr pc, [sp], #4)
   16a98:	ldr	r3, [pc, #104]	; 16b08 <flatcc_builder_table_add_union@@Base+0x114>
   16a9c:	movw	r2, #1518	; 0x5ee
   16aa0:	movw	r1, #33332	; 0x8234
   16aa4:	movt	r1, #1
   16aa8:	movw	r0, #34040	; 0x84f8
   16aac:	movt	r0, #1
   16ab0:	bl	12044 <__assert_fail@plt>
   16ab4:	ldr	r3, [pc, #76]	; 16b08 <flatcc_builder_table_add_union@@Base+0x114>
   16ab8:	movw	r2, #1519	; 0x5ef
   16abc:	movw	r1, #33332	; 0x8234
   16ac0:	movt	r1, #1
   16ac4:	movw	r0, #34260	; 0x85d4
   16ac8:	movt	r0, #1
   16acc:	bl	12044 <__assert_fail@plt>
   16ad0:	ldr	r3, [pc, #48]	; 16b08 <flatcc_builder_table_add_union@@Base+0x114>
   16ad4:	movw	r2, #1522	; 0x5f2
   16ad8:	movw	r1, #33332	; 0x8234
   16adc:	movt	r1, #1
   16ae0:	movw	r0, #34296	; 0x85f8
   16ae4:	movt	r0, #1
   16ae8:	bl	12044 <__assert_fail@plt>
   16aec:	ldr	r3, [pc, #20]	; 16b08 <flatcc_builder_table_add_union@@Base+0x114>
   16af0:	movw	r2, #1526	; 0x5f6
   16af4:	movw	r1, #33332	; 0x8234
   16af8:	movt	r1, #1
   16afc:	movw	r0, #34308	; 0x8604
   16b00:	movt	r0, #1
   16b04:	bl	12044 <__assert_fail@plt>
   16b08:			; <UNDEFINED> instruction: 0x000181b0

00016b0c <flatcc_builder_table_add_union_vector@@Base>:
   16b0c:	strd	r4, [sp, #-20]!	; 0xffffffec
   16b10:	strd	r6, [sp, #8]
   16b14:	str	lr, [sp, #16]
   16b18:	sub	sp, sp, #12
   16b1c:	mov	r7, r1
   16b20:	add	r1, sp, #8
   16b24:	stmdb	r1, {r2, r3}
   16b28:	ldr	r4, [sp]
   16b2c:	ldr	r6, [sp, #4]
   16b30:	ldr	r3, [r0, #32]
   16b34:	ldrh	r3, [r3, #14]
   16b38:	cmp	r3, #3
   16b3c:	bne	16b88 <flatcc_builder_table_add_union_vector@@Base+0x7c>
   16b40:	mov	r5, r0
   16b44:	clz	r3, r6
   16b48:	lsr	r3, r3, #5
   16b4c:	clz	r2, r4
   16b50:	lsr	r2, r2, #5
   16b54:	cmp	r2, r3
   16b58:	beq	16bc0 <flatcc_builder_table_add_union_vector@@Base+0xb4>
   16b5c:	adds	r4, r4, #0
   16b60:	movne	r4, #1
   16b64:	cmp	r4, r3
   16b68:	mvnne	r4, #0
   16b6c:	beq	16ba4 <flatcc_builder_table_add_union_vector@@Base+0x98>
   16b70:	mov	r0, r4
   16b74:	add	sp, sp, #12
   16b78:	ldrd	r4, [sp]
   16b7c:	ldrd	r6, [sp, #8]
   16b80:	add	sp, sp, #16
   16b84:	pop	{pc}		; (ldr pc, [sp], #4)
   16b88:	ldr	r3, [pc, #160]	; 16c30 <flatcc_builder_table_add_union_vector@@Base+0x124>
   16b8c:	mov	r2, #1536	; 0x600
   16b90:	movw	r1, #33332	; 0x8234
   16b94:	movt	r1, #1
   16b98:	movw	r0, #34040	; 0x84f8
   16b9c:	movt	r0, #1
   16ba0:	bl	12044 <__assert_fail@plt>
   16ba4:	ldr	r3, [pc, #132]	; 16c30 <flatcc_builder_table_add_union_vector@@Base+0x124>
   16ba8:	movw	r2, #1537	; 0x601
   16bac:	movw	r1, #33332	; 0x8234
   16bb0:	movt	r1, #1
   16bb4:	movw	r0, #34320	; 0x8610
   16bb8:	movt	r0, #1
   16bbc:	bl	12044 <__assert_fail@plt>
   16bc0:	cmp	r4, #0
   16bc4:	beq	16b70 <flatcc_builder_table_add_union_vector@@Base+0x64>
   16bc8:	sub	r1, r7, #1
   16bcc:	bl	168a4 <flatcc_builder_table_add_offset@@Base>
   16bd0:	cmp	r0, #0
   16bd4:	beq	16c14 <flatcc_builder_table_add_union_vector@@Base+0x108>
   16bd8:	str	r4, [r0]
   16bdc:	mov	r1, r7
   16be0:	mov	r0, r5
   16be4:	bl	168a4 <flatcc_builder_table_add_offset@@Base>
   16be8:	cmp	r0, #0
   16bec:	strne	r6, [r0]
   16bf0:	movne	r4, #0
   16bf4:	bne	16b70 <flatcc_builder_table_add_union_vector@@Base+0x64>
   16bf8:	ldr	r3, [pc, #48]	; 16c30 <flatcc_builder_table_add_union_vector@@Base+0x124>
   16bfc:	movw	r2, #1544	; 0x608
   16c00:	movw	r1, #33332	; 0x8234
   16c04:	movt	r1, #1
   16c08:	movw	r0, #34296	; 0x85f8
   16c0c:	movt	r0, #1
   16c10:	bl	12044 <__assert_fail@plt>
   16c14:	ldr	r3, [pc, #20]	; 16c30 <flatcc_builder_table_add_union_vector@@Base+0x124>
   16c18:	movw	r2, #1540	; 0x604
   16c1c:	movw	r1, #33332	; 0x8234
   16c20:	movt	r1, #1
   16c24:	movw	r0, #34296	; 0x85f8
   16c28:	movt	r0, #1
   16c2c:	bl	12044 <__assert_fail@plt>
   16c30:	ldrdeq	r8, [r1], -r0

00016c34 <flatcc_builder_push_buffer_alignment@@Base>:
   16c34:	mov	r3, r0
   16c38:	ldrh	r0, [r0, #128]	; 0x80
   16c3c:	mov	r2, #4
   16c40:	strh	r2, [r3, #128]	; 0x80
   16c44:	bx	lr

00016c48 <flatcc_builder_pop_buffer_alignment@@Base>:
   16c48:	ldrh	r3, [r0, #128]	; 0x80
   16c4c:	cmp	r3, r1
   16c50:	strhcc	r1, [r0, #128]	; 0x80
   16c54:	bx	lr

00016c58 <flatcc_builder_get_buffer_alignment@@Base>:
   16c58:	ldrh	r0, [r0, #128]	; 0x80
   16c5c:	bx	lr

00016c60 <flatcc_builder_set_vtable_clustering@@Base>:
   16c60:	clz	r1, r1
   16c64:	lsr	r1, r1, #5
   16c68:	str	r1, [r0, #180]	; 0xb4
   16c6c:	bx	lr

00016c70 <flatcc_builder_set_block_align@@Base>:
   16c70:	strh	r1, [r0, #132]	; 0x84
   16c74:	bx	lr

00016c78 <flatcc_builder_get_level@@Base>:
   16c78:	ldr	r0, [r0, #156]	; 0x9c
   16c7c:	bx	lr

00016c80 <flatcc_builder_set_max_level@@Base>:
   16c80:	str	r1, [r0, #176]	; 0xb0
   16c84:	ldr	r3, [r0, #160]	; 0xa0
   16c88:	cmp	r3, r1
   16c8c:	strlt	r1, [r0, #160]	; 0xa0
   16c90:	bx	lr

00016c94 <flatcc_builder_get_buffer_size@@Base>:
   16c94:	ldr	r2, [r0, #140]	; 0x8c
   16c98:	ldr	r0, [r0, #136]	; 0x88
   16c9c:	sub	r0, r2, r0
   16ca0:	bx	lr

00016ca4 <flatcc_builder_get_buffer_start@@Base>:
   16ca4:	ldr	r0, [r0, #136]	; 0x88
   16ca8:	bx	lr

00016cac <flatcc_builder_get_buffer_end@@Base>:
   16cac:	ldr	r0, [r0, #140]	; 0x8c
   16cb0:	bx	lr

00016cb4 <flatcc_builder_set_vtable_cache_limit@@Base>:
   16cb4:	str	r1, [r0, #172]	; 0xac
   16cb8:	bx	lr

00016cbc <flatcc_builder_set_identifier@@Base>:
   16cbc:	movw	r3, #31460	; 0x7ae4
   16cc0:	movt	r3, #1
   16cc4:	cmp	r1, #0
   16cc8:	moveq	r1, r3
   16ccc:	ldr	r3, [r1]
   16cd0:	str	r3, [r0, #168]	; 0xa8
   16cd4:	bx	lr

00016cd8 <flatcc_builder_get_type@@Base>:
   16cd8:	ldr	r3, [r0, #32]
   16cdc:	cmp	r3, #0
   16ce0:	ldrhne	r0, [r3, #14]
   16ce4:	moveq	r0, #0
   16ce8:	bx	lr

00016cec <flatcc_builder_get_type_at@@Base>:
   16cec:	cmp	r1, #0
   16cf0:	ble	16d18 <flatcc_builder_get_type_at@@Base+0x2c>
   16cf4:	ldr	r3, [r0, #156]	; 0x9c
   16cf8:	cmp	r3, r1
   16cfc:	blt	16d20 <flatcc_builder_get_type_at@@Base+0x34>
   16d00:	sub	r1, r1, r3
   16d04:	ldr	r3, [r0, #32]
   16d08:	add	r1, r1, r1, lsl #3
   16d0c:	add	r1, r3, r1, lsl #2
   16d10:	ldrh	r0, [r1, #14]
   16d14:	bx	lr
   16d18:	mov	r0, #0
   16d1c:	bx	lr
   16d20:	mov	r0, #0
   16d24:	bx	lr

00016d28 <flatcc_builder_get_direct_buffer@@Base>:
   16d28:	ldr	r3, [r0, #184]	; 0xb8
   16d2c:	cmp	r3, #0
   16d30:	bne	16d48 <flatcc_builder_get_direct_buffer@@Base+0x20>
   16d34:	cmp	r1, #0
   16d38:	beq	16d88 <flatcc_builder_get_direct_buffer@@Base+0x60>
   16d3c:	mov	r0, #0
   16d40:	str	r0, [r1]
   16d44:	bx	lr
   16d48:	ldr	r2, [r0, #188]	; 0xbc
   16d4c:	ldr	r3, [r0, #192]	; 0xc0
   16d50:	cmp	r2, r3
   16d54:	beq	16d6c <flatcc_builder_get_direct_buffer@@Base+0x44>
   16d58:	cmp	r1, #0
   16d5c:	beq	16d80 <flatcc_builder_get_direct_buffer@@Base+0x58>
   16d60:	mov	r0, #0
   16d64:	str	r0, [r1]
   16d68:	bx	lr
   16d6c:	cmp	r1, #0
   16d70:	ldrne	r3, [r0, #212]	; 0xd4
   16d74:	strne	r3, [r1]
   16d78:	ldr	r0, [r0, #196]	; 0xc4
   16d7c:	bx	lr
   16d80:	mov	r0, r1
   16d84:	bx	lr
   16d88:	mov	r0, r1
   16d8c:	bx	lr

00016d90 <flatcc_builder_copy_buffer@@Base>:
   16d90:	ldr	r3, [r0, #184]	; 0xb8
   16d94:	cmp	r3, #0
   16d98:	beq	16ddc <flatcc_builder_copy_buffer@@Base+0x4c>
   16d9c:	str	r4, [sp, #-8]!
   16da0:	str	lr, [sp, #4]
   16da4:	add	r0, r0, #188	; 0xbc
   16da8:	bl	1754c <flatcc_emitter_copy_buffer@@Base>
   16dac:	cmp	r0, #0
   16db0:	beq	16dc0 <flatcc_builder_copy_buffer@@Base+0x30>
   16db4:	ldr	r4, [sp]
   16db8:	add	sp, sp, #4
   16dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   16dc0:	ldr	r3, [pc, #28]	; 16de4 <flatcc_builder_copy_buffer@@Base+0x54>
   16dc4:	movw	r2, #1926	; 0x786
   16dc8:	movw	r1, #33332	; 0x8234
   16dcc:	movt	r1, #1
   16dd0:	movw	r0, #34360	; 0x8638
   16dd4:	movt	r0, #1
   16dd8:	bl	12044 <__assert_fail@plt>
   16ddc:	mov	r0, #0
   16de0:	bx	lr
   16de4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>

00016de8 <flatcc_builder_finalize_buffer@@Base>:
   16de8:	strd	r4, [sp, #-16]!
   16dec:	str	r6, [sp, #8]
   16df0:	str	lr, [sp, #12]
   16df4:	mov	r5, r0
   16df8:	ldr	r4, [r0, #140]	; 0x8c
   16dfc:	ldr	r3, [r0, #136]	; 0x88
   16e00:	sub	r4, r4, r3
   16e04:	cmp	r1, #0
   16e08:	strne	r4, [r1]
   16e0c:	mov	r0, r4
   16e10:	bl	11fd8 <malloc@plt>
   16e14:	subs	r6, r0, #0
   16e18:	beq	16e48 <flatcc_builder_finalize_buffer@@Base+0x60>
   16e1c:	mov	r2, r4
   16e20:	mov	r1, r6
   16e24:	mov	r0, r5
   16e28:	bl	16d90 <flatcc_builder_copy_buffer@@Base>
   16e2c:	cmp	r0, #0
   16e30:	beq	16e64 <flatcc_builder_finalize_buffer@@Base+0x7c>
   16e34:	mov	r0, r6
   16e38:	ldrd	r4, [sp]
   16e3c:	ldr	r6, [sp, #8]
   16e40:	add	sp, sp, #12
   16e44:	pop	{pc}		; (ldr pc, [sp], #4)
   16e48:	ldr	r3, [pc, #48]	; 16e80 <flatcc_builder_finalize_buffer@@Base+0x98>
   16e4c:	movw	r2, #1944	; 0x798
   16e50:	movw	r1, #33332	; 0x8234
   16e54:	movt	r1, #1
   16e58:	movw	r0, #33416	; 0x8288
   16e5c:	movt	r0, #1
   16e60:	bl	12044 <__assert_fail@plt>
   16e64:	ldr	r3, [pc, #20]	; 16e80 <flatcc_builder_finalize_buffer@@Base+0x98>
   16e68:	movw	r2, #1948	; 0x79c
   16e6c:	movw	r1, #33332	; 0x8234
   16e70:	movt	r1, #1
   16e74:	movw	r0, #33416	; 0x8288
   16e78:	movt	r0, #1
   16e7c:	bl	12044 <__assert_fail@plt>
   16e80:	andeq	r8, r1, r4, lsl r2

00016e84 <flatcc_builder_finalize_aligned_buffer@@Base>:
   16e84:	strd	r4, [sp, #-20]!	; 0xffffffec
   16e88:	strd	r6, [sp, #8]
   16e8c:	str	lr, [sp, #16]
   16e90:	sub	sp, sp, #12
   16e94:	mov	r7, r0
   16e98:	ldr	r4, [r0, #140]	; 0x8c
   16e9c:	ldr	r3, [r0, #136]	; 0x88
   16ea0:	sub	r3, r4, r3
   16ea4:	subs	r6, r1, #0
   16ea8:	strne	r3, [r6]
   16eac:	ldrh	r1, [r0, #128]	; 0x80
   16eb0:	sub	r4, r1, #1
   16eb4:	add	r4, r4, r3
   16eb8:	rsb	r3, r1, #0
   16ebc:	and	r4, r4, r3
   16ec0:	mov	r3, #0
   16ec4:	str	r3, [sp, #4]
   16ec8:	mov	r2, r4
   16ecc:	cmp	r1, #4
   16ed0:	movcc	r1, #4
   16ed4:	add	r0, sp, #4
   16ed8:	bl	12008 <posix_memalign@plt>
   16edc:	cmp	r0, #0
   16ee0:	beq	16f08 <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   16ee4:	ldr	r0, [sp, #4]
   16ee8:	cmp	r0, #0
   16eec:	beq	16ef4 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   16ef0:	bl	11f84 <free@plt>
   16ef4:	cmp	r6, #0
   16ef8:	movne	r5, #0
   16efc:	strne	r5, [r6]
   16f00:	moveq	r5, r6
   16f04:	b	16f2c <flatcc_builder_finalize_aligned_buffer@@Base+0xa8>
   16f08:	ldr	r5, [sp, #4]
   16f0c:	cmp	r5, #0
   16f10:	beq	16ef4 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   16f14:	mov	r2, r4
   16f18:	mov	r1, r5
   16f1c:	mov	r0, r7
   16f20:	bl	16d90 <flatcc_builder_copy_buffer@@Base>
   16f24:	cmp	r0, #0
   16f28:	beq	16f44 <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   16f2c:	mov	r0, r5
   16f30:	add	sp, sp, #12
   16f34:	ldrd	r4, [sp]
   16f38:	ldrd	r6, [sp, #8]
   16f3c:	add	sp, sp, #16
   16f40:	pop	{pc}		; (ldr pc, [sp], #4)
   16f44:	mov	r0, r5
   16f48:	bl	11f84 <free@plt>
   16f4c:	b	16ef4 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>

00016f50 <flatcc_builder_aligned_alloc@@Base>:
   16f50:	push	{lr}		; (str lr, [sp, #-4]!)
   16f54:	sub	sp, sp, #12
   16f58:	mov	r3, #0
   16f5c:	str	r3, [sp, #4]
   16f60:	mov	r2, r1
   16f64:	cmp	r0, #4
   16f68:	movcs	r1, r0
   16f6c:	movcc	r1, #4
   16f70:	add	r0, sp, #4
   16f74:	bl	12008 <posix_memalign@plt>
   16f78:	cmp	r0, #0
   16f7c:	beq	16f98 <flatcc_builder_aligned_alloc@@Base+0x48>
   16f80:	ldr	r0, [sp, #4]
   16f84:	cmp	r0, #0
   16f88:	beq	16f98 <flatcc_builder_aligned_alloc@@Base+0x48>
   16f8c:	bl	11f84 <free@plt>
   16f90:	mov	r3, #0
   16f94:	str	r3, [sp, #4]
   16f98:	ldr	r0, [sp, #4]
   16f9c:	add	sp, sp, #12
   16fa0:	pop	{pc}		; (ldr pc, [sp], #4)

00016fa4 <flatcc_builder_aligned_free@@Base>:
   16fa4:	str	r4, [sp, #-8]!
   16fa8:	str	lr, [sp, #4]
   16fac:	bl	11f84 <free@plt>
   16fb0:	ldr	r4, [sp]
   16fb4:	add	sp, sp, #4
   16fb8:	pop	{pc}		; (ldr pc, [sp], #4)

00016fbc <flatcc_builder_get_emit_context@@Base>:
   16fbc:	ldr	r0, [r0, #36]	; 0x24
   16fc0:	bx	lr

00016fc4 <flatcc_emitter_recycle_page@@Base>:
   16fc4:	ldr	r3, [r0]
   16fc8:	cmp	r3, r1
   16fcc:	beq	17018 <flatcc_emitter_recycle_page@@Base+0x54>
   16fd0:	ldr	r3, [r0, #4]
   16fd4:	cmp	r3, r1
   16fd8:	beq	17020 <flatcc_emitter_recycle_page@@Base+0x5c>
   16fdc:	ldr	r2, [r1, #2944]	; 0xb80
   16fe0:	ldr	r3, [r1, #2948]	; 0xb84
   16fe4:	str	r3, [r2, #2948]	; 0xb84
   16fe8:	ldr	r2, [r1, #2944]	; 0xb80
   16fec:	str	r2, [r3, #2944]	; 0xb80
   16ff0:	ldr	r3, [r0]
   16ff4:	ldr	r3, [r3, #2948]	; 0xb84
   16ff8:	str	r3, [r1, #2948]	; 0xb84
   16ffc:	ldr	r2, [r0]
   17000:	str	r2, [r1, #2944]	; 0xb80
   17004:	str	r1, [r3, #2944]	; 0xb80
   17008:	ldr	r3, [r1, #2944]	; 0xb80
   1700c:	str	r1, [r3, #2948]	; 0xb84
   17010:	mov	r0, #0
   17014:	bx	lr
   17018:	mvn	r0, #0
   1701c:	bx	lr
   17020:	mvn	r0, #0
   17024:	bx	lr

00017028 <flatcc_emitter_reset@@Base>:
   17028:	ldr	r3, [r0]
   1702c:	cmp	r3, #0
   17030:	bxeq	lr
   17034:	str	r3, [r0, #4]
   17038:	add	r2, r3, #1472	; 0x5c0
   1703c:	str	r2, [r0, #8]
   17040:	str	r2, [r0, #16]
   17044:	mov	r2, #1472	; 0x5c0
   17048:	str	r2, [r0, #12]
   1704c:	str	r2, [r0, #20]
   17050:	movw	r2, #64064	; 0xfa40
   17054:	movt	r2, #65535	; 0xffff
   17058:	str	r2, [r3, #2952]	; 0xb88
   1705c:	ldr	r3, [r0, #32]
   17060:	cmp	r3, #0
   17064:	ldreq	r3, [r0, #24]
   17068:	streq	r3, [r0, #32]
   1706c:	ldr	r3, [r0, #32]
   17070:	add	r2, r3, r3, lsl #1
   17074:	ldr	r3, [r0, #24]
   17078:	lsr	r3, r3, #2
   1707c:	add	r3, r3, r2, lsr #2
   17080:	str	r3, [r0, #32]
   17084:	mov	r2, #0
   17088:	str	r2, [r0, #24]
   1708c:	ldr	r2, [r0, #28]
   17090:	cmp	r2, r3, lsl #1
   17094:	bxls	lr
   17098:	str	r4, [sp, #-8]!
   1709c:	str	lr, [sp, #4]
   170a0:	mov	r4, r0
   170a4:	ldr	r3, [r0, #4]
   170a8:	ldr	r0, [r3, #2944]	; 0xb80
   170ac:	ldr	r2, [r4]
   170b0:	cmp	r0, r2
   170b4:	beq	170f8 <flatcc_emitter_reset@@Base+0xd0>
   170b8:	ldr	r2, [r0, #2944]	; 0xb80
   170bc:	str	r2, [r3, #2944]	; 0xb80
   170c0:	ldr	r3, [r4, #4]
   170c4:	str	r3, [r2, #2948]	; 0xb84
   170c8:	bl	11f84 <free@plt>
   170cc:	ldr	r3, [r4, #28]
   170d0:	sub	r3, r3, #2944	; 0xb80
   170d4:	str	r3, [r4, #28]
   170d8:	ldr	r2, [r4, #32]
   170dc:	cmp	r3, r2, lsl #1
   170e0:	bls	170f8 <flatcc_emitter_reset@@Base+0xd0>
   170e4:	ldr	r3, [r4, #4]
   170e8:	ldr	r0, [r3, #2944]	; 0xb80
   170ec:	ldr	r2, [r4]
   170f0:	cmp	r0, r2
   170f4:	bne	170b8 <flatcc_emitter_reset@@Base+0x90>
   170f8:	ldr	r4, [sp]
   170fc:	add	sp, sp, #4
   17100:	pop	{pc}		; (ldr pc, [sp], #4)

00017104 <flatcc_emitter_clear@@Base>:
   17104:	ldr	r3, [r0]
   17108:	cmp	r3, #0
   1710c:	bxeq	lr
   17110:	strd	r4, [sp, #-16]!
   17114:	str	r6, [sp, #8]
   17118:	str	lr, [sp, #12]
   1711c:	mov	r5, r0
   17120:	ldr	r2, [r3, #2948]	; 0xb84
   17124:	mov	r1, #0
   17128:	str	r1, [r2, #2944]	; 0xb80
   1712c:	ldr	r4, [r3, #2944]	; 0xb80
   17130:	cmp	r4, r1
   17134:	bne	17144 <flatcc_emitter_clear@@Base+0x40>
   17138:	mov	r4, r3
   1713c:	b	17158 <flatcc_emitter_clear@@Base+0x54>
   17140:	mov	r4, r3
   17144:	ldr	r0, [r4, #2948]	; 0xb84
   17148:	bl	11f84 <free@plt>
   1714c:	ldr	r3, [r4, #2944]	; 0xb80
   17150:	cmp	r3, #0
   17154:	bne	17140 <flatcc_emitter_clear@@Base+0x3c>
   17158:	mov	r0, r4
   1715c:	bl	11f84 <free@plt>
   17160:	mov	r2, #36	; 0x24
   17164:	mov	r1, #0
   17168:	mov	r0, r5
   1716c:	bl	12014 <memset@plt>
   17170:	ldrd	r4, [sp]
   17174:	ldr	r6, [sp, #8]
   17178:	add	sp, sp, #12
   1717c:	pop	{pc}		; (ldr pc, [sp], #4)

00017180 <flatcc_emitter@@Base>:
   17180:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17184:	strd	r6, [sp, #8]
   17188:	strd	r8, [sp, #16]
   1718c:	strd	sl, [sp, #24]
   17190:	str	lr, [sp, #32]
   17194:	sub	sp, sp, #4
   17198:	mov	r4, r0
   1719c:	ldr	ip, [sp, #40]	; 0x28
   171a0:	ldr	r0, [r0, #24]
   171a4:	add	r0, r0, ip
   171a8:	str	r0, [r4, #24]
   171ac:	cmp	r3, #0
   171b0:	blt	171e0 <flatcc_emitter@@Base+0x60>
   171b4:	ldr	r3, [r4, #20]
   171b8:	cmp	r3, ip
   171bc:	bcs	172c8 <flatcc_emitter@@Base+0x148>
   171c0:	cmp	r2, #0
   171c4:	moveq	r0, r2
   171c8:	beq	173c8 <flatcc_emitter@@Base+0x248>
   171cc:	add	r5, r1, #8
   171d0:	mov	r8, r2
   171d4:	movw	fp, #64064	; 0xfa40
   171d8:	movt	fp, #65535	; 0xffff
   171dc:	b	17424 <flatcc_emitter@@Base+0x2a4>
   171e0:	ldr	r3, [r4, #12]
   171e4:	cmp	r3, ip
   171e8:	bcs	17200 <flatcc_emitter@@Base+0x80>
   171ec:	add	r5, r1, r2, lsl #3
   171f0:	sub	r8, r2, #1
   171f4:	movw	fp, #64064	; 0xfa40
   171f8:	movt	fp, #65535	; 0xffff
   171fc:	b	173f4 <flatcc_emitter@@Base+0x274>
   17200:	ldr	r6, [r4, #8]
   17204:	sub	r6, r6, ip
   17208:	str	r6, [r4, #8]
   1720c:	sub	ip, r3, ip
   17210:	str	ip, [r4, #12]
   17214:	b	172dc <flatcc_emitter@@Base+0x15c>
   17218:	mov	r2, r6
   1721c:	rsb	r1, r2, #0
   17220:	ldr	r0, [r4, #8]
   17224:	add	r0, r0, r1
   17228:	str	r0, [r4, #8]
   1722c:	sub	r3, r3, r2
   17230:	str	r3, [r4, #12]
   17234:	add	r9, r9, r1
   17238:	sub	r6, r6, r2
   1723c:	mov	r1, r9
   17240:	bl	11f90 <memcpy@plt>
   17244:	cmp	r6, #0
   17248:	beq	173ec <flatcc_emitter@@Base+0x26c>
   1724c:	ldr	r3, [r4, #12]
   17250:	cmp	r3, r6
   17254:	bcs	17218 <flatcc_emitter@@Base+0x98>
   17258:	cmp	r3, #0
   1725c:	movne	r2, r3
   17260:	bne	1721c <flatcc_emitter@@Base+0x9c>
   17264:	ldr	r7, [r4]
   17268:	cmp	r7, #0
   1726c:	beq	17480 <flatcc_emitter@@Base+0x300>
   17270:	ldr	r2, [r7, #2948]	; 0xb84
   17274:	ldr	r3, [r4, #4]
   17278:	cmp	r2, r3
   1727c:	beq	17444 <flatcc_emitter@@Base+0x2c4>
   17280:	ldr	r3, [r7, #2952]	; 0xb88
   17284:	sub	r3, r3, #2944	; 0xb80
   17288:	str	r3, [r2, #2952]	; 0xb88
   1728c:	ldr	r3, [r4]
   17290:	ldr	r3, [r3, #2948]	; 0xb84
   17294:	str	r3, [r4]
   17298:	ldr	r3, [r4]
   1729c:	add	r2, r3, #2944	; 0xb80
   172a0:	str	r2, [r4, #8]
   172a4:	mov	r2, #2944	; 0xb80
   172a8:	str	r2, [r4, #12]
   172ac:	ldr	r2, [r3, #2944]	; 0xb80
   172b0:	ldr	r2, [r2, #2952]	; 0xb88
   172b4:	sub	r2, r2, #2944	; 0xb80
   172b8:	str	r2, [r3, #2952]	; 0xb88
   172bc:	b	17244 <flatcc_emitter@@Base+0xc4>
   172c0:	mov	r0, #0
   172c4:	b	173c8 <flatcc_emitter@@Base+0x248>
   172c8:	ldr	r6, [r4, #16]
   172cc:	add	r0, r6, ip
   172d0:	str	r0, [r4, #16]
   172d4:	sub	ip, r3, ip
   172d8:	str	ip, [r4, #20]
   172dc:	sub	r4, r2, #1
   172e0:	cmp	r2, #0
   172e4:	moveq	r0, r2
   172e8:	beq	173c8 <flatcc_emitter@@Base+0x248>
   172ec:	add	r5, r1, #8
   172f0:	ldr	r2, [r5, #-4]
   172f4:	ldr	r1, [r5, #-8]
   172f8:	mov	r0, r6
   172fc:	bl	11f90 <memcpy@plt>
   17300:	ldr	r3, [r5, #-4]
   17304:	add	r6, r6, r3
   17308:	sub	r4, r4, #1
   1730c:	add	r5, r5, #8
   17310:	cmn	r4, #1
   17314:	bne	172f0 <flatcc_emitter@@Base+0x170>
   17318:	mov	r0, #0
   1731c:	b	173c8 <flatcc_emitter@@Base+0x248>
   17320:	mov	r6, r7
   17324:	mov	r2, r6
   17328:	mov	r1, r9
   1732c:	ldr	r0, [r4, #16]
   17330:	bl	11f90 <memcpy@plt>
   17334:	sub	r7, r7, r6
   17338:	add	r9, r9, r6
   1733c:	ldr	r3, [r4, #16]
   17340:	add	r3, r3, r6
   17344:	str	r3, [r4, #16]
   17348:	ldr	r3, [r4, #20]
   1734c:	sub	r6, r3, r6
   17350:	str	r6, [r4, #20]
   17354:	cmp	r7, #0
   17358:	beq	17418 <flatcc_emitter@@Base+0x298>
   1735c:	ldr	r6, [r4, #20]
   17360:	cmp	r6, r7
   17364:	bcs	17320 <flatcc_emitter@@Base+0x1a0>
   17368:	cmp	r6, #0
   1736c:	bne	17324 <flatcc_emitter@@Base+0x1a4>
   17370:	ldr	r6, [r4, #4]
   17374:	cmp	r6, #0
   17378:	beq	17504 <flatcc_emitter@@Base+0x384>
   1737c:	ldr	r3, [r6, #2944]	; 0xb80
   17380:	ldr	r2, [r4]
   17384:	cmp	r3, r2
   17388:	beq	174c8 <flatcc_emitter@@Base+0x348>
   1738c:	str	r3, [r4, #4]
   17390:	ldr	r3, [r4, #4]
   17394:	str	r3, [r4, #16]
   17398:	mov	r2, #2944	; 0xb80
   1739c:	str	r2, [r4, #20]
   173a0:	ldr	r2, [r3, #2948]	; 0xb84
   173a4:	ldr	r2, [r2, #2952]	; 0xb88
   173a8:	add	r2, r2, #2944	; 0xb80
   173ac:	str	r2, [r3, #2952]	; 0xb88
   173b0:	b	17354 <flatcc_emitter@@Base+0x1d4>
   173b4:	mvn	r0, #0
   173b8:	b	173c8 <flatcc_emitter@@Base+0x248>
   173bc:	mvn	r0, #0
   173c0:	b	173c8 <flatcc_emitter@@Base+0x248>
   173c4:	mvn	r0, #0
   173c8:	add	sp, sp, #4
   173cc:	ldrd	r4, [sp]
   173d0:	ldrd	r6, [sp, #8]
   173d4:	ldrd	r8, [sp, #16]
   173d8:	ldrd	sl, [sp, #24]
   173dc:	add	sp, sp, #32
   173e0:	pop	{pc}		; (ldr pc, [sp], #4)
   173e4:	mvn	r0, #0
   173e8:	b	173c8 <flatcc_emitter@@Base+0x248>
   173ec:	sub	r5, r5, #8
   173f0:	sub	r8, r8, #1
   173f4:	cmn	r8, #1
   173f8:	beq	172c0 <flatcc_emitter@@Base+0x140>
   173fc:	ldr	r6, [r5, #-4]
   17400:	ldr	r9, [r5, #-8]
   17404:	add	r9, r9, r6
   17408:	cmp	r6, #0
   1740c:	beq	173ec <flatcc_emitter@@Base+0x26c>
   17410:	mov	sl, #1472	; 0x5c0
   17414:	b	1724c <flatcc_emitter@@Base+0xcc>
   17418:	add	r5, r5, #8
   1741c:	subs	r8, r8, #1
   17420:	beq	1743c <flatcc_emitter@@Base+0x2bc>
   17424:	ldr	r9, [r5, #-8]
   17428:	ldr	r7, [r5, #-4]
   1742c:	cmp	r7, #0
   17430:	beq	17418 <flatcc_emitter@@Base+0x298>
   17434:	mov	sl, #1472	; 0x5c0
   17438:	b	1735c <flatcc_emitter@@Base+0x1dc>
   1743c:	mov	r0, #0
   17440:	b	173c8 <flatcc_emitter@@Base+0x248>
   17444:	movw	r0, #2956	; 0xb8c
   17448:	bl	11fd8 <malloc@plt>
   1744c:	cmp	r0, #0
   17450:	beq	173b4 <flatcc_emitter@@Base+0x234>
   17454:	ldr	r3, [r4, #28]
   17458:	add	r3, r3, #2944	; 0xb80
   1745c:	str	r3, [r4, #28]
   17460:	ldr	r3, [r4, #4]
   17464:	str	r3, [r0, #2948]	; 0xb84
   17468:	str	r7, [r0, #2944]	; 0xb80
   1746c:	str	r0, [r7, #2948]	; 0xb84
   17470:	ldr	r3, [r4, #4]
   17474:	str	r0, [r3, #2944]	; 0xb80
   17478:	str	r0, [r4]
   1747c:	b	17298 <flatcc_emitter@@Base+0x118>
   17480:	movw	r0, #2956	; 0xb8c
   17484:	bl	11fd8 <malloc@plt>
   17488:	cmp	r0, #0
   1748c:	beq	173bc <flatcc_emitter@@Base+0x23c>
   17490:	ldr	r3, [r4, #28]
   17494:	add	r3, r3, #2944	; 0xb80
   17498:	str	r3, [r4, #28]
   1749c:	str	r0, [r4]
   174a0:	str	r0, [r4, #4]
   174a4:	str	r0, [r0, #2944]	; 0xb80
   174a8:	str	r0, [r0, #2948]	; 0xb84
   174ac:	add	r3, r0, #1472	; 0x5c0
   174b0:	str	r3, [r4, #8]
   174b4:	str	r3, [r4, #16]
   174b8:	str	sl, [r4, #12]
   174bc:	str	sl, [r4, #20]
   174c0:	str	fp, [r0, #2952]	; 0xb88
   174c4:	b	17244 <flatcc_emitter@@Base+0xc4>
   174c8:	movw	r0, #2956	; 0xb8c
   174cc:	bl	11fd8 <malloc@plt>
   174d0:	cmp	r0, #0
   174d4:	beq	173c4 <flatcc_emitter@@Base+0x244>
   174d8:	ldr	r3, [r4, #28]
   174dc:	add	r3, r3, #2944	; 0xb80
   174e0:	str	r3, [r4, #28]
   174e4:	str	r6, [r0, #2948]	; 0xb84
   174e8:	ldr	r3, [r4]
   174ec:	str	r3, [r0, #2944]	; 0xb80
   174f0:	str	r0, [r3, #2948]	; 0xb84
   174f4:	ldr	r3, [r4, #4]
   174f8:	str	r0, [r3, #2944]	; 0xb80
   174fc:	str	r0, [r4, #4]
   17500:	b	17390 <flatcc_emitter@@Base+0x210>
   17504:	movw	r0, #2956	; 0xb8c
   17508:	bl	11fd8 <malloc@plt>
   1750c:	cmp	r0, #0
   17510:	beq	173e4 <flatcc_emitter@@Base+0x264>
   17514:	ldr	r3, [r4, #28]
   17518:	add	r3, r3, #2944	; 0xb80
   1751c:	str	r3, [r4, #28]
   17520:	str	r0, [r4]
   17524:	str	r0, [r4, #4]
   17528:	str	r0, [r0, #2944]	; 0xb80
   1752c:	str	r0, [r0, #2948]	; 0xb84
   17530:	add	r3, r0, #1472	; 0x5c0
   17534:	str	r3, [r4, #8]
   17538:	str	r3, [r4, #16]
   1753c:	str	sl, [r4, #12]
   17540:	str	sl, [r4, #20]
   17544:	str	fp, [r0, #2952]	; 0xb88
   17548:	b	17354 <flatcc_emitter@@Base+0x1d4>

0001754c <flatcc_emitter_copy_buffer@@Base>:
   1754c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17550:	strd	r6, [sp, #8]
   17554:	str	r8, [sp, #16]
   17558:	str	lr, [sp, #20]
   1755c:	ldr	r3, [r0, #24]
   17560:	cmp	r3, r2
   17564:	movhi	r4, #0
   17568:	bhi	175f8 <flatcc_emitter_copy_buffer@@Base+0xac>
   1756c:	ldr	r4, [r0]
   17570:	cmp	r4, #0
   17574:	beq	175f8 <flatcc_emitter_copy_buffer@@Base+0xac>
   17578:	mov	r5, r1
   1757c:	mov	r7, r0
   17580:	ldr	r2, [r0, #4]
   17584:	cmp	r4, r2
   17588:	beq	17610 <flatcc_emitter_copy_buffer@@Base+0xc4>
   1758c:	ldr	r4, [r0, #12]
   17590:	rsb	r4, r4, #2944	; 0xb80
   17594:	mov	r2, r4
   17598:	ldr	r1, [r0, #8]
   1759c:	mov	r0, r5
   175a0:	bl	11f90 <memcpy@plt>
   175a4:	add	r4, r5, r4
   175a8:	ldr	r3, [r7]
   175ac:	ldr	r5, [r3, #2944]	; 0xb80
   175b0:	ldr	r3, [r7, #4]
   175b4:	cmp	r5, r3
   175b8:	beq	17628 <flatcc_emitter_copy_buffer@@Base+0xdc>
   175bc:	mov	r6, #2944	; 0xb80
   175c0:	mov	r2, r6
   175c4:	mov	r1, r5
   175c8:	mov	r0, r4
   175cc:	bl	11f90 <memcpy@plt>
   175d0:	add	r4, r4, #2944	; 0xb80
   175d4:	ldr	r5, [r5, #2944]	; 0xb80
   175d8:	ldr	r3, [r7, #4]
   175dc:	cmp	r3, r5
   175e0:	bne	175c0 <flatcc_emitter_copy_buffer@@Base+0x74>
   175e4:	ldr	r2, [r7, #20]
   175e8:	rsb	r2, r2, #2944	; 0xb80
   175ec:	mov	r1, r5
   175f0:	mov	r0, r4
   175f4:	bl	11f90 <memcpy@plt>
   175f8:	mov	r0, r4
   175fc:	ldrd	r4, [sp]
   17600:	ldrd	r6, [sp, #8]
   17604:	ldr	r8, [sp, #16]
   17608:	add	sp, sp, #20
   1760c:	pop	{pc}		; (ldr pc, [sp], #4)
   17610:	mov	r2, r3
   17614:	ldr	r1, [r0, #8]
   17618:	mov	r0, r5
   1761c:	bl	11f90 <memcpy@plt>
   17620:	mov	r4, r5
   17624:	b	175f8 <flatcc_emitter_copy_buffer@@Base+0xac>
   17628:	mov	r5, r3
   1762c:	b	175e4 <flatcc_emitter_copy_buffer@@Base+0x98>

00017630 <__libc_csu_init@@Base>:
   17630:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17634:	mov	r7, r0
   17638:	ldr	r6, [pc, #72]	; 17688 <__libc_csu_init@@Base+0x58>
   1763c:	ldr	r5, [pc, #72]	; 1768c <__libc_csu_init@@Base+0x5c>
   17640:	add	r6, pc, r6
   17644:	add	r5, pc, r5
   17648:	sub	r6, r6, r5
   1764c:	mov	r8, r1
   17650:	mov	r9, r2
   17654:	bl	11f40 <strcmp@plt-0x20>
   17658:	asrs	r6, r6, #2
   1765c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17660:	mov	r4, #0
   17664:	add	r4, r4, #1
   17668:	ldr	r3, [r5], #4
   1766c:	mov	r2, r9
   17670:	mov	r1, r8
   17674:	mov	r0, r7
   17678:	blx	r3
   1767c:	cmp	r6, r4
   17680:	bne	17664 <__libc_csu_init@@Base+0x34>
   17684:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17688:	andeq	r1, r1, ip, asr #17
   1768c:	andeq	r1, r1, r4, asr #17

00017690 <__libc_csu_fini@@Base>:
   17690:	bx	lr

Disassembly of section .fini:

00017694 <.fini>:
   17694:	push	{r3, lr}
   17698:	pop	{r3, pc}
