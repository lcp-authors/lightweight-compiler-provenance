
../repos/coreutils/src/basenc:     file format elf32-littlearm


Disassembly of section .init:

00010ca0 <.init>:
   10ca0:	push	{r3, lr}
   10ca4:	bl	11938 <__assert_fail@plt+0xa08>
   10ca8:	pop	{r3, pc}

Disassembly of section .plt:

00010cac <calloc@plt-0x14>:
   10cac:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb0:	ldr	lr, [pc, #4]	; 10cbc <calloc@plt-0x4>
   10cb4:	add	lr, pc, lr
   10cb8:	ldr	pc, [lr, #8]!
   10cbc:	andeq	fp, r1, r4, asr #6

00010cc0 <calloc@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #110592	; 0x1b000
   10cc8:	ldr	pc, [ip, #836]!	; 0x344

00010ccc <fputs_unlocked@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #110592	; 0x1b000
   10cd4:	ldr	pc, [ip, #828]!	; 0x33c

00010cd8 <raise@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #110592	; 0x1b000
   10ce0:	ldr	pc, [ip, #820]!	; 0x334

00010ce4 <strcmp@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #110592	; 0x1b000
   10cec:	ldr	pc, [ip, #812]!	; 0x32c

00010cf0 <posix_fadvise64@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #110592	; 0x1b000
   10cf8:	ldr	pc, [ip, #804]!	; 0x324

00010cfc <fflush@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #110592	; 0x1b000
   10d04:	ldr	pc, [ip, #796]!	; 0x31c

00010d08 <memmove@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #110592	; 0x1b000
   10d10:	ldr	pc, [ip, #788]!	; 0x314

00010d14 <free@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #110592	; 0x1b000
   10d1c:	ldr	pc, [ip, #780]!	; 0x30c

00010d20 <_exit@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #110592	; 0x1b000
   10d28:	ldr	pc, [ip, #772]!	; 0x304

00010d2c <memcpy@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #110592	; 0x1b000
   10d34:	ldr	pc, [ip, #764]!	; 0x2fc

00010d38 <mbsinit@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #110592	; 0x1b000
   10d40:	ldr	pc, [ip, #756]!	; 0x2f4

00010d44 <fwrite_unlocked@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #110592	; 0x1b000
   10d4c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d50 <memcmp@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #110592	; 0x1b000
   10d58:	ldr	pc, [ip, #740]!	; 0x2e4

00010d5c <fputc_unlocked@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #110592	; 0x1b000
   10d64:	ldr	pc, [ip, #732]!	; 0x2dc

00010d68 <dcgettext@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #110592	; 0x1b000
   10d70:	ldr	pc, [ip, #724]!	; 0x2d4

00010d74 <realloc@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #110592	; 0x1b000
   10d7c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d80 <textdomain@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #110592	; 0x1b000
   10d88:	ldr	pc, [ip, #708]!	; 0x2c4

00010d8c <iswprint@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #110592	; 0x1b000
   10d94:	ldr	pc, [ip, #700]!	; 0x2bc

00010d98 <fwrite@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #110592	; 0x1b000
   10da0:	ldr	pc, [ip, #692]!	; 0x2b4

00010da4 <lseek64@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #110592	; 0x1b000
   10dac:	ldr	pc, [ip, #684]!	; 0x2ac

00010db0 <__ctype_get_mb_cur_max@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #110592	; 0x1b000
   10db8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dbc <__fpending@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #110592	; 0x1b000
   10dc4:	ldr	pc, [ip, #668]!	; 0x29c

00010dc8 <mbrtowc@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #110592	; 0x1b000
   10dd0:	ldr	pc, [ip, #660]!	; 0x294

00010dd4 <error@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #110592	; 0x1b000
   10ddc:	ldr	pc, [ip, #652]!	; 0x28c

00010de0 <malloc@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #110592	; 0x1b000
   10de8:	ldr	pc, [ip, #644]!	; 0x284

00010dec <__libc_start_main@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #110592	; 0x1b000
   10df4:	ldr	pc, [ip, #636]!	; 0x27c

00010df8 <__freading@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #110592	; 0x1b000
   10e00:	ldr	pc, [ip, #628]!	; 0x274

00010e04 <__gmon_start__@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #110592	; 0x1b000
   10e0c:	ldr	pc, [ip, #620]!	; 0x26c

00010e10 <getopt_long@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #110592	; 0x1b000
   10e18:	ldr	pc, [ip, #612]!	; 0x264

00010e1c <__ctype_b_loc@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #110592	; 0x1b000
   10e24:	ldr	pc, [ip, #604]!	; 0x25c

00010e28 <exit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #110592	; 0x1b000
   10e30:	ldr	pc, [ip, #596]!	; 0x254

00010e34 <strlen@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #110592	; 0x1b000
   10e3c:	ldr	pc, [ip, #588]!	; 0x24c

00010e40 <strchr@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #110592	; 0x1b000
   10e48:	ldr	pc, [ip, #580]!	; 0x244

00010e4c <__errno_location@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #110592	; 0x1b000
   10e54:	ldr	pc, [ip, #572]!	; 0x23c

00010e58 <__cxa_atexit@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #110592	; 0x1b000
   10e60:	ldr	pc, [ip, #564]!	; 0x234

00010e64 <memset@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #110592	; 0x1b000
   10e6c:	ldr	pc, [ip, #556]!	; 0x22c

00010e70 <__printf_chk@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #110592	; 0x1b000
   10e78:	ldr	pc, [ip, #548]!	; 0x224

00010e7c <fileno@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #110592	; 0x1b000
   10e84:	ldr	pc, [ip, #540]!	; 0x21c

00010e88 <__fprintf_chk@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #110592	; 0x1b000
   10e90:	ldr	pc, [ip, #532]!	; 0x214

00010e94 <memchr@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #110592	; 0x1b000
   10e9c:	ldr	pc, [ip, #524]!	; 0x20c

00010ea0 <fclose@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #110592	; 0x1b000
   10ea8:	ldr	pc, [ip, #516]!	; 0x204

00010eac <fseeko64@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #110592	; 0x1b000
   10eb4:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb8 <__overflow@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #110592	; 0x1b000
   10ec0:	ldr	pc, [ip, #500]!	; 0x1f4

00010ec4 <setlocale@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #110592	; 0x1b000
   10ecc:	ldr	pc, [ip, #492]!	; 0x1ec

00010ed0 <strrchr@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #110592	; 0x1b000
   10ed8:	ldr	pc, [ip, #484]!	; 0x1e4

00010edc <nl_langinfo@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #110592	; 0x1b000
   10ee4:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee8 <__strtoll_internal@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #110592	; 0x1b000
   10ef0:	ldr	pc, [ip, #468]!	; 0x1d4

00010ef4 <fopen64@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #110592	; 0x1b000
   10efc:	ldr	pc, [ip, #460]!	; 0x1cc

00010f00 <bindtextdomain@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #110592	; 0x1b000
   10f08:	ldr	pc, [ip, #452]!	; 0x1c4

00010f0c <fread_unlocked@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #110592	; 0x1b000
   10f14:	ldr	pc, [ip, #444]!	; 0x1bc

00010f18 <strncmp@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #110592	; 0x1b000
   10f20:	ldr	pc, [ip, #436]!	; 0x1b4

00010f24 <abort@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #110592	; 0x1b000
   10f2c:	ldr	pc, [ip, #428]!	; 0x1ac

00010f30 <__assert_fail@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #110592	; 0x1b000
   10f38:	ldr	pc, [ip, #420]!	; 0x1a4

Disassembly of section .text:

00010f40 <.text>:
   10f40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f44:	mov	r8, r0
   10f48:	sub	sp, sp, #76	; 0x4c
   10f4c:	ldr	r0, [r1]
   10f50:	mov	r5, r1
   10f54:	bl	13e50 <__assert_fail@plt+0x2f20>
   10f58:	ldr	r1, [pc, #2208]	; 11800 <__assert_fail@plt+0x8d0>
   10f5c:	mov	r0, #6
   10f60:	bl	10ec4 <setlocale@plt>
   10f64:	ldr	r1, [pc, #2200]	; 11804 <__assert_fail@plt+0x8d4>
   10f68:	ldr	r0, [pc, #2200]	; 11808 <__assert_fail@plt+0x8d8>
   10f6c:	bl	10f00 <bindtextdomain@plt>
   10f70:	mov	r7, #0
   10f74:	ldr	r0, [pc, #2188]	; 11808 <__assert_fail@plt+0x8d8>
   10f78:	ldr	sl, [pc, #2188]	; 1180c <__assert_fail@plt+0x8dc>
   10f7c:	ldr	r9, [pc, #2188]	; 11810 <__assert_fail@plt+0x8e0>
   10f80:	ldr	fp, [pc, #2188]	; 11814 <__assert_fail@plt+0x8e4>
   10f84:	bl	10d80 <textdomain@plt>
   10f88:	mov	r6, r7
   10f8c:	ldr	r0, [pc, #2180]	; 11818 <__assert_fail@plt+0x8e8>
   10f90:	bl	1a4c4 <__assert_fail@plt+0x9594>
   10f94:	mov	r3, #76	; 0x4c
   10f98:	str	r7, [sp, #16]
   10f9c:	str	r3, [sp, #20]
   10fa0:	mov	r4, #0
   10fa4:	str	r4, [sp]
   10fa8:	mov	r3, sl
   10fac:	mov	r2, r9
   10fb0:	mov	r1, r5
   10fb4:	mov	r0, r8
   10fb8:	bl	10e10 <getopt_long@plt>
   10fbc:	cmn	r0, #1
   10fc0:	beq	110c4 <__assert_fail@plt+0x194>
   10fc4:	cmp	r0, #105	; 0x69
   10fc8:	beq	110b8 <__assert_fail@plt+0x188>
   10fcc:	bgt	10ff0 <__assert_fail@plt+0xc0>
   10fd0:	cmn	r0, #2
   10fd4:	beq	11078 <__assert_fail@plt+0x148>
   10fd8:	cmp	r0, #100	; 0x64
   10fdc:	beq	11010 <__assert_fail@plt+0xe0>
   10fe0:	cmn	r0, #3
   10fe4:	beq	11080 <__assert_fail@plt+0x150>
   10fe8:	mov	r0, #1
   10fec:	bl	126a0 <__assert_fail@plt+0x1770>
   10ff0:	cmp	r0, #119	; 0x77
   10ff4:	beq	11018 <__assert_fail@plt+0xe8>
   10ff8:	blt	10fe8 <__assert_fail@plt+0xb8>
   10ffc:	sub	r3, r0, #256	; 0x100
   11000:	cmp	r3, #7
   11004:	bhi	10fe8 <__assert_fail@plt+0xb8>
   11008:	mov	r7, r0
   1100c:	b	10fa0 <__assert_fail@plt+0x70>
   11010:	mov	r6, #1
   11014:	b	10fa0 <__assert_fail@plt+0x70>
   11018:	ldr	r3, [pc, #2016]	; 11800 <__assert_fail@plt+0x8d0>
   1101c:	mov	r1, r4
   11020:	str	r3, [sp]
   11024:	mov	r2, #10
   11028:	add	r3, sp, #48	; 0x30
   1102c:	ldr	r0, [fp]
   11030:	bl	18f60 <__assert_fail@plt+0x8030>
   11034:	cmp	r0, #1
   11038:	bhi	114dc <__assert_fail@plt+0x5ac>
   1103c:	ldrd	r2, [sp, #48]	; 0x30
   11040:	cmp	r2, #0
   11044:	sbcs	r1, r3, #0
   11048:	blt	114dc <__assert_fail@plt+0x5ac>
   1104c:	eor	ip, r0, #1
   11050:	mvn	r0, #-2147483648	; 0x80000000
   11054:	cmp	r0, r2
   11058:	mov	r1, #0
   1105c:	sbcs	r1, r1, r3
   11060:	movlt	r0, #0
   11064:	andge	r0, ip, #1
   11068:	cmp	r0, #0
   1106c:	moveq	r2, #0
   11070:	str	r2, [sp, #20]
   11074:	b	10fa0 <__assert_fail@plt+0x70>
   11078:	mov	r0, r4
   1107c:	bl	126a0 <__assert_fail@plt+0x1770>
   11080:	ldr	r3, [pc, #1940]	; 1181c <__assert_fail@plt+0x8ec>
   11084:	ldr	r0, [pc, #1940]	; 11820 <__assert_fail@plt+0x8f0>
   11088:	ldr	r1, [pc, #1940]	; 11824 <__assert_fail@plt+0x8f4>
   1108c:	ldr	r2, [pc, #1940]	; 11828 <__assert_fail@plt+0x8f8>
   11090:	str	r4, [sp, #8]
   11094:	ldr	r0, [r0]
   11098:	ldr	r3, [r3]
   1109c:	str	r1, [sp, #4]
   110a0:	str	r2, [sp]
   110a4:	ldr	r1, [pc, #1920]	; 1182c <__assert_fail@plt+0x8fc>
   110a8:	ldr	r2, [pc, #1920]	; 11830 <__assert_fail@plt+0x900>
   110ac:	bl	186f0 <__assert_fail@plt+0x77c0>
   110b0:	mov	r0, r4
   110b4:	bl	10e28 <exit@plt>
   110b8:	mov	r3, #1
   110bc:	str	r3, [sp, #16]
   110c0:	b	10fa0 <__assert_fail@plt+0x70>
   110c4:	sub	r7, r7, #256	; 0x100
   110c8:	cmp	r7, #7
   110cc:	ldrls	pc, [pc, r7, lsl #2]
   110d0:	b	11734 <__assert_fail@plt+0x804>
   110d4:	muleq	r1, r4, r2
   110d8:	andeq	r1, r1, r4, ror #4
   110dc:	andeq	r1, r1, r4, lsr r2
   110e0:	andeq	r1, r1, r4, lsl #4
   110e4:	ldrdeq	r1, [r1], -r4
   110e8:	andeq	r1, r1, r4, lsr #3
   110ec:	andeq	r1, r1, r4, ror r1
   110f0:	strdeq	r1, [r1], -r4
   110f4:	ldr	sl, [pc, #1848]	; 11834 <__assert_fail@plt+0x904>
   110f8:	ldr	r3, [pc, #1848]	; 11838 <__assert_fail@plt+0x908>
   110fc:	ldr	r2, [pc, #1848]	; 1183c <__assert_fail@plt+0x90c>
   11100:	str	r3, [sl]
   11104:	ldr	r3, [pc, #1844]	; 11840 <__assert_fail@plt+0x910>
   11108:	str	r2, [sl, #4]
   1110c:	str	r3, [sl, #8]
   11110:	ldr	r2, [pc, #1836]	; 11844 <__assert_fail@plt+0x914>
   11114:	ldr	r3, [pc, #1836]	; 11848 <__assert_fail@plt+0x918>
   11118:	str	r2, [sl, #12]
   1111c:	str	r3, [sl, #16]
   11120:	ldr	r4, [pc, #1828]	; 1184c <__assert_fail@plt+0x91c>
   11124:	ldr	r3, [r4]
   11128:	sub	r2, r8, r3
   1112c:	cmp	r2, #1
   11130:	ble	112c4 <__assert_fail@plt+0x394>
   11134:	mov	r2, #5
   11138:	ldr	r1, [pc, #1808]	; 11850 <__assert_fail@plt+0x920>
   1113c:	mov	r0, #0
   11140:	bl	10d68 <dcgettext@plt>
   11144:	ldr	r3, [r4]
   11148:	add	r3, r3, #1
   1114c:	mov	r6, r0
   11150:	ldr	r0, [r5, r3, lsl #2]
   11154:	bl	17d1c <__assert_fail@plt+0x6dec>
   11158:	mov	r1, #0
   1115c:	mov	r2, r6
   11160:	mov	r3, r0
   11164:	mov	r0, r1
   11168:	bl	10dd4 <error@plt>
   1116c:	mov	r0, #1
   11170:	bl	126a0 <__assert_fail@plt+0x1770>
   11174:	ldr	sl, [pc, #1720]	; 11834 <__assert_fail@plt+0x904>
   11178:	ldr	r3, [pc, #1748]	; 11854 <__assert_fail@plt+0x924>
   1117c:	ldr	r2, [pc, #1748]	; 11858 <__assert_fail@plt+0x928>
   11180:	str	r3, [sl]
   11184:	ldr	r3, [pc, #1744]	; 1185c <__assert_fail@plt+0x92c>
   11188:	str	r2, [sl, #4]
   1118c:	str	r3, [sl, #8]
   11190:	ldr	r2, [pc, #1736]	; 11860 <__assert_fail@plt+0x930>
   11194:	ldr	r3, [pc, #1736]	; 11864 <__assert_fail@plt+0x934>
   11198:	str	r2, [sl, #12]
   1119c:	str	r3, [sl, #16]
   111a0:	b	11120 <__assert_fail@plt+0x1f0>
   111a4:	ldr	sl, [pc, #1672]	; 11834 <__assert_fail@plt+0x904>
   111a8:	ldr	r3, [pc, #1700]	; 11854 <__assert_fail@plt+0x924>
   111ac:	ldr	r2, [pc, #1700]	; 11858 <__assert_fail@plt+0x928>
   111b0:	str	r3, [sl]
   111b4:	ldr	r3, [pc, #1708]	; 11868 <__assert_fail@plt+0x938>
   111b8:	str	r2, [sl, #4]
   111bc:	str	r3, [sl, #8]
   111c0:	ldr	r2, [pc, #1688]	; 11860 <__assert_fail@plt+0x930>
   111c4:	ldr	r3, [pc, #1696]	; 1186c <__assert_fail@plt+0x93c>
   111c8:	str	r2, [sl, #12]
   111cc:	str	r3, [sl, #16]
   111d0:	b	11120 <__assert_fail@plt+0x1f0>
   111d4:	ldr	sl, [pc, #1624]	; 11834 <__assert_fail@plt+0x904>
   111d8:	ldr	r3, [pc, #1680]	; 11870 <__assert_fail@plt+0x940>
   111dc:	ldr	r2, [pc, #1680]	; 11874 <__assert_fail@plt+0x944>
   111e0:	str	r3, [sl]
   111e4:	ldr	r3, [pc, #1676]	; 11878 <__assert_fail@plt+0x948>
   111e8:	str	r2, [sl, #4]
   111ec:	str	r3, [sl, #8]
   111f0:	ldr	r2, [pc, #1668]	; 1187c <__assert_fail@plt+0x94c>
   111f4:	ldr	r3, [pc, #1668]	; 11880 <__assert_fail@plt+0x950>
   111f8:	str	r2, [sl, #12]
   111fc:	str	r3, [sl, #16]
   11200:	b	11120 <__assert_fail@plt+0x1f0>
   11204:	ldr	sl, [pc, #1576]	; 11834 <__assert_fail@plt+0x904>
   11208:	ldr	r3, [pc, #1652]	; 11884 <__assert_fail@plt+0x954>
   1120c:	ldr	r2, [pc, #1652]	; 11888 <__assert_fail@plt+0x958>
   11210:	str	r3, [sl]
   11214:	ldr	r3, [pc, #1648]	; 1188c <__assert_fail@plt+0x95c>
   11218:	str	r2, [sl, #4]
   1121c:	str	r3, [sl, #8]
   11220:	ldr	r2, [pc, #1640]	; 11890 <__assert_fail@plt+0x960>
   11224:	ldr	r3, [pc, #1640]	; 11894 <__assert_fail@plt+0x964>
   11228:	str	r2, [sl, #12]
   1122c:	str	r3, [sl, #16]
   11230:	b	11120 <__assert_fail@plt+0x1f0>
   11234:	ldr	sl, [pc, #1528]	; 11834 <__assert_fail@plt+0x904>
   11238:	ldr	r3, [pc, #1604]	; 11884 <__assert_fail@plt+0x954>
   1123c:	ldr	r2, [pc, #1620]	; 11898 <__assert_fail@plt+0x968>
   11240:	str	r3, [sl]
   11244:	ldr	r3, [pc, #1616]	; 1189c <__assert_fail@plt+0x96c>
   11248:	str	r2, [sl, #4]
   1124c:	str	r3, [sl, #8]
   11250:	ldr	r2, [pc, #1608]	; 118a0 <__assert_fail@plt+0x970>
   11254:	ldr	r3, [pc, #1608]	; 118a4 <__assert_fail@plt+0x974>
   11258:	str	r2, [sl, #12]
   1125c:	str	r3, [sl, #16]
   11260:	b	11120 <__assert_fail@plt+0x1f0>
   11264:	ldr	sl, [pc, #1480]	; 11834 <__assert_fail@plt+0x904>
   11268:	ldr	r3, [pc, #1592]	; 118a8 <__assert_fail@plt+0x978>
   1126c:	ldr	r2, [pc, #1592]	; 118ac <__assert_fail@plt+0x97c>
   11270:	str	r3, [sl]
   11274:	ldr	r3, [pc, #1588]	; 118b0 <__assert_fail@plt+0x980>
   11278:	str	r2, [sl, #4]
   1127c:	str	r3, [sl, #8]
   11280:	ldr	r2, [pc, #1580]	; 118b4 <__assert_fail@plt+0x984>
   11284:	ldr	r3, [pc, #1580]	; 118b8 <__assert_fail@plt+0x988>
   11288:	str	r2, [sl, #12]
   1128c:	str	r3, [sl, #16]
   11290:	b	11120 <__assert_fail@plt+0x1f0>
   11294:	ldr	sl, [pc, #1432]	; 11834 <__assert_fail@plt+0x904>
   11298:	ldr	r3, [pc, #1544]	; 118a8 <__assert_fail@plt+0x978>
   1129c:	ldr	r2, [pc, #1560]	; 118bc <__assert_fail@plt+0x98c>
   112a0:	str	r3, [sl]
   112a4:	ldr	r3, [pc, #1556]	; 118c0 <__assert_fail@plt+0x990>
   112a8:	str	r2, [sl, #4]
   112ac:	str	r3, [sl, #8]
   112b0:	ldr	r2, [pc, #1548]	; 118c4 <__assert_fail@plt+0x994>
   112b4:	ldr	r3, [pc, #1548]	; 118c8 <__assert_fail@plt+0x998>
   112b8:	str	r2, [sl, #12]
   112bc:	str	r3, [sl, #16]
   112c0:	b	11120 <__assert_fail@plt+0x1f0>
   112c4:	cmp	r8, r3
   112c8:	ble	114c8 <__assert_fail@plt+0x598>
   112cc:	ldr	r3, [r5, r3, lsl #2]
   112d0:	ldr	r1, [pc, #1524]	; 118cc <__assert_fail@plt+0x99c>
   112d4:	mov	r0, r3
   112d8:	str	r3, [sp, #36]	; 0x24
   112dc:	bl	10ce4 <strcmp@plt>
   112e0:	cmp	r0, #0
   112e4:	beq	114d0 <__assert_fail@plt+0x5a0>
   112e8:	ldr	r1, [pc, #1504]	; 118d0 <__assert_fail@plt+0x9a0>
   112ec:	ldr	r0, [sp, #36]	; 0x24
   112f0:	bl	10ef4 <fopen64@plt>
   112f4:	subs	r8, r0, #0
   112f8:	beq	117ac <__assert_fail@plt+0x87c>
   112fc:	mov	r1, #2
   11300:	mov	r0, r8
   11304:	bl	13c24 <__assert_fail@plt+0x2cf4>
   11308:	cmp	r6, #0
   1130c:	beq	11510 <__assert_fail@plt+0x5e0>
   11310:	ldr	r2, [pc, #1288]	; 11820 <__assert_fail@plt+0x8f0>
   11314:	ldr	r3, [sl]
   11318:	ldr	r0, [pc, #1460]	; 118d4 <__assert_fail@plt+0x9a4>
   1131c:	ldr	r2, [r2]
   11320:	ldr	fp, [pc, #1452]	; 118d4 <__assert_fail@plt+0x9a4>
   11324:	str	r2, [sp, #28]
   11328:	blx	r3
   1132c:	bl	188d8 <__assert_fail@plt+0x79a8>
   11330:	mov	r4, r0
   11334:	ldr	r0, [pc, #1432]	; 118d4 <__assert_fail@plt+0x9a4>
   11338:	bl	188d8 <__assert_fail@plt+0x79a8>
   1133c:	mov	r3, #0
   11340:	str	r3, [sp, #64]	; 0x40
   11344:	ldr	r3, [sl, #12]
   11348:	str	r0, [sp, #32]
   1134c:	add	r0, sp, #48	; 0x30
   11350:	blx	r3
   11354:	mov	r5, #0
   11358:	ldr	r3, [sl]
   1135c:	mov	r0, fp
   11360:	blx	r3
   11364:	add	ip, r4, r5
   11368:	mov	r3, r8
   1136c:	mov	r1, #1
   11370:	sub	r2, r0, r5
   11374:	mov	r0, ip
   11378:	bl	10f0c <fread_unlocked@plt>
   1137c:	ldr	r3, [sp, #16]
   11380:	cmp	r3, #0
   11384:	mov	r7, r0
   11388:	beq	113ec <__assert_fail@plt+0x4bc>
   1138c:	cmp	r0, #0
   11390:	ble	113ec <__assert_fail@plt+0x4bc>
   11394:	mov	r9, #0
   11398:	b	113c8 <__assert_fail@plt+0x498>
   1139c:	ldrb	r2, [r4, r6]
   113a0:	cmp	r2, #61	; 0x3d
   113a4:	beq	113e4 <__assert_fail@plt+0x4b4>
   113a8:	sub	r7, r7, #1
   113ac:	add	r1, r6, #1
   113b0:	add	r1, r4, r1
   113b4:	mov	r0, r3
   113b8:	sub	r2, r7, r9
   113bc:	bl	10d08 <memmove@plt>
   113c0:	cmp	r7, r9
   113c4:	ble	113ec <__assert_fail@plt+0x4bc>
   113c8:	add	r6, r5, r9
   113cc:	ldr	r3, [sl, #4]
   113d0:	ldrb	r0, [r4, r6]
   113d4:	blx	r3
   113d8:	add	r3, r4, r6
   113dc:	cmp	r0, #0
   113e0:	beq	1139c <__assert_fail@plt+0x46c>
   113e4:	add	r9, r9, #1
   113e8:	b	113c0 <__assert_fail@plt+0x490>
   113ec:	ldr	r3, [r8]
   113f0:	add	r5, r5, r7
   113f4:	ands	r6, r3, #32
   113f8:	bne	11724 <__assert_fail@plt+0x7f4>
   113fc:	ldr	r3, [sl]
   11400:	mov	r0, fp
   11404:	blx	r3
   11408:	cmp	r5, r0
   1140c:	bge	11758 <__assert_fail@plt+0x828>
   11410:	ldr	r3, [r8]
   11414:	tst	r3, #16
   11418:	beq	11358 <__assert_fail@plt+0x428>
   1141c:	mov	r7, r6
   11420:	str	r5, [sp, #20]
   11424:	str	r6, [sp, #24]
   11428:	ldr	r5, [sp, #28]
   1142c:	ldr	r6, [sp, #32]
   11430:	b	11494 <__assert_fail@plt+0x564>
   11434:	cmp	r7, #0
   11438:	bne	11354 <__assert_fail@plt+0x424>
   1143c:	ldr	r9, [sl, #16]
   11440:	ldr	r2, [sp, #20]
   11444:	str	fp, [sp, #44]	; 0x2c
   11448:	add	r3, sp, #44	; 0x2c
   1144c:	str	r3, [sp]
   11450:	mov	r1, r4
   11454:	mov	r3, r6
   11458:	add	r0, sp, #48	; 0x30
   1145c:	blx	r9
   11460:	mov	r3, r5
   11464:	ldr	r2, [sp, #44]	; 0x2c
   11468:	mov	r1, #1
   1146c:	mov	r9, r0
   11470:	mov	r0, r6
   11474:	bl	10d44 <fwrite_unlocked@plt>
   11478:	ldr	r3, [sp, #44]	; 0x2c
   1147c:	cmp	r0, r3
   11480:	bcc	116fc <__assert_fail@plt+0x7cc>
   11484:	cmp	r9, #0
   11488:	beq	11774 <__assert_fail@plt+0x844>
   1148c:	ldr	r3, [r8]
   11490:	add	r7, r7, #1
   11494:	tst	r3, #16
   11498:	beq	11434 <__assert_fail@plt+0x504>
   1149c:	cmp	r7, #2
   114a0:	beq	115c0 <__assert_fail@plt+0x690>
   114a4:	cmp	r7, #1
   114a8:	bne	1143c <__assert_fail@plt+0x50c>
   114ac:	ldr	r3, [sp, #48]	; 0x30
   114b0:	cmp	r3, #0
   114b4:	beq	115c0 <__assert_fail@plt+0x690>
   114b8:	str	fp, [sp, #44]	; 0x2c
   114bc:	ldr	r9, [sl, #16]
   114c0:	ldr	r2, [sp, #24]
   114c4:	b	11448 <__assert_fail@plt+0x518>
   114c8:	ldr	r3, [pc, #1020]	; 118cc <__assert_fail@plt+0x99c>
   114cc:	str	r3, [sp, #36]	; 0x24
   114d0:	ldr	r3, [pc, #1024]	; 118d8 <__assert_fail@plt+0x9a8>
   114d4:	ldr	r8, [r3]
   114d8:	b	112fc <__assert_fail@plt+0x3cc>
   114dc:	mov	r2, #5
   114e0:	ldr	r1, [pc, #1012]	; 118dc <__assert_fail@plt+0x9ac>
   114e4:	mov	r0, #0
   114e8:	bl	10d68 <dcgettext@plt>
   114ec:	mov	r4, r0
   114f0:	ldr	r0, [fp]
   114f4:	bl	17d1c <__assert_fail@plt+0x6dec>
   114f8:	mov	r3, r4
   114fc:	ldr	r2, [pc, #988]	; 118e0 <__assert_fail@plt+0x9b0>
   11500:	mov	r1, #0
   11504:	str	r0, [sp]
   11508:	mov	r0, #1
   1150c:	bl	10dd4 <error@plt>
   11510:	ldr	r3, [pc, #776]	; 11820 <__assert_fail@plt+0x8f0>
   11514:	mov	r0, #30720	; 0x7800
   11518:	ldr	fp, [r3]
   1151c:	bl	188d8 <__assert_fail@plt+0x79a8>
   11520:	ldr	r3, [sl]
   11524:	mov	r4, r0
   11528:	mov	r0, #30720	; 0x7800
   1152c:	blx	r3
   11530:	bl	188d8 <__assert_fail@plt+0x79a8>
   11534:	str	sl, [sp, #24]
   11538:	mov	sl, r4
   1153c:	str	r0, [sp, #16]
   11540:	mov	r5, #0
   11544:	mov	r4, #1
   11548:	b	11558 <__assert_fail@plt+0x628>
   1154c:	ldr	r3, [pc, #912]	; 118e4 <__assert_fail@plt+0x9b4>
   11550:	cmp	r5, r3
   11554:	bgt	115cc <__assert_fail@plt+0x69c>
   11558:	mov	r3, r8
   1155c:	rsb	r2, r5, #30720	; 0x7800
   11560:	add	r0, sl, r5
   11564:	mov	r1, r4
   11568:	bl	10f0c <fread_unlocked@plt>
   1156c:	ldr	r3, [r8]
   11570:	tst	r3, #48	; 0x30
   11574:	add	r5, r5, r0
   11578:	beq	1154c <__assert_fail@plt+0x61c>
   1157c:	cmp	r5, #0
   11580:	bgt	115cc <__assert_fail@plt+0x69c>
   11584:	ldr	r2, [sp, #20]
   11588:	cmp	r2, #0
   1158c:	cmpne	r6, #0
   11590:	ble	115b8 <__assert_fail@plt+0x688>
   11594:	ldr	r3, [fp, #20]
   11598:	ldr	r2, [fp, #24]
   1159c:	cmp	r3, r2
   115a0:	addcc	r1, r3, #1
   115a4:	movcc	r2, #10
   115a8:	strcc	r1, [fp, #20]
   115ac:	strbcc	r2, [r3]
   115b0:	bcs	11794 <__assert_fail@plt+0x864>
   115b4:	ldr	r3, [r8]
   115b8:	tst	r3, #32
   115bc:	bne	11724 <__assert_fail@plt+0x7f4>
   115c0:	ldr	r1, [sp, #36]	; 0x24
   115c4:	mov	r0, r8
   115c8:	bl	11e7c <__assert_fail@plt+0xf4c>
   115cc:	ldr	r7, [sp, #24]
   115d0:	mov	r0, r5
   115d4:	ldr	r3, [r7]
   115d8:	ldr	r4, [r7, #8]
   115dc:	blx	r3
   115e0:	ldr	r2, [sp, #16]
   115e4:	mov	r1, r5
   115e8:	mov	r3, r0
   115ec:	mov	r0, sl
   115f0:	blx	r4
   115f4:	ldr	r3, [r7]
   115f8:	mov	r0, r5
   115fc:	blx	r3
   11600:	ldr	r3, [sp, #20]
   11604:	cmp	r3, #0
   11608:	mov	r9, r0
   1160c:	beq	116dc <__assert_fail@plt+0x7ac>
   11610:	cmp	r0, #0
   11614:	ble	116a8 <__assert_fail@plt+0x778>
   11618:	str	r8, [sp, #28]
   1161c:	str	sl, [sp, #32]
   11620:	mov	r7, #0
   11624:	ldr	r8, [sp, #20]
   11628:	ldr	sl, [sp, #16]
   1162c:	b	1165c <__assert_fail@plt+0x72c>
   11630:	ldr	r3, [fp, #20]
   11634:	ldr	r2, [fp, #24]
   11638:	cmp	r3, r2
   1163c:	bcs	116c0 <__assert_fail@plt+0x790>
   11640:	add	r2, r3, #1
   11644:	mov	r6, r4
   11648:	str	r2, [fp, #20]
   1164c:	mov	r2, #10
   11650:	strb	r2, [r3]
   11654:	cmp	r7, r9
   11658:	bge	116a0 <__assert_fail@plt+0x770>
   1165c:	sub	r4, r9, r7
   11660:	sub	r3, r8, r6
   11664:	cmp	r4, r3
   11668:	movge	r4, r3
   1166c:	cmp	r4, #0
   11670:	beq	11630 <__assert_fail@plt+0x700>
   11674:	ldr	r3, [pc, #420]	; 11820 <__assert_fail@plt+0x8f0>
   11678:	mov	r2, r4
   1167c:	mov	r1, #1
   11680:	ldr	r3, [r3]
   11684:	add	r0, sl, r7
   11688:	bl	10d44 <fwrite_unlocked@plt>
   1168c:	cmp	r4, r0
   11690:	bhi	116fc <__assert_fail@plt+0x7cc>
   11694:	add	r6, r6, r4
   11698:	add	r7, r7, r4
   1169c:	b	11654 <__assert_fail@plt+0x724>
   116a0:	ldr	r8, [sp, #28]
   116a4:	ldr	sl, [sp, #32]
   116a8:	ldr	r3, [r8]
   116ac:	and	r2, r3, #48	; 0x30
   116b0:	cmp	r5, #30720	; 0x7800
   116b4:	cmpeq	r2, #0
   116b8:	beq	11540 <__assert_fail@plt+0x610>
   116bc:	b	11584 <__assert_fail@plt+0x654>
   116c0:	mov	r1, #10
   116c4:	mov	r0, fp
   116c8:	bl	10eb8 <__overflow@plt>
   116cc:	cmn	r0, #1
   116d0:	beq	117d8 <__assert_fail@plt+0x8a8>
   116d4:	mov	r6, r4
   116d8:	b	11654 <__assert_fail@plt+0x724>
   116dc:	ldr	r3, [pc, #316]	; 11820 <__assert_fail@plt+0x8f0>
   116e0:	mov	r2, r0
   116e4:	mov	r1, #1
   116e8:	ldr	r3, [r3]
   116ec:	ldr	r0, [sp, #16]
   116f0:	bl	10d44 <fwrite_unlocked@plt>
   116f4:	cmp	r9, r0
   116f8:	bls	116a8 <__assert_fail@plt+0x778>
   116fc:	bl	10e4c <__errno_location@plt>
   11700:	ldr	r1, [pc, #480]	; 118e8 <__assert_fail@plt+0x9b8>
   11704:	mov	r2, #5
   11708:	ldr	r4, [r0]
   1170c:	mov	r0, #0
   11710:	bl	10d68 <dcgettext@plt>
   11714:	mov	r1, r4
   11718:	mov	r2, r0
   1171c:	mov	r0, #1
   11720:	bl	10dd4 <error@plt>
   11724:	bl	10e4c <__errno_location@plt>
   11728:	mov	r2, #5
   1172c:	ldr	r1, [pc, #440]	; 118ec <__assert_fail@plt+0x9bc>
   11730:	b	11708 <__assert_fail@plt+0x7d8>
   11734:	mov	r2, #5
   11738:	ldr	r1, [pc, #432]	; 118f0 <__assert_fail@plt+0x9c0>
   1173c:	mov	r0, #0
   11740:	bl	10d68 <dcgettext@plt>
   11744:	mov	r1, #0
   11748:	mov	r2, r0
   1174c:	mov	r0, r1
   11750:	bl	10dd4 <error@plt>
   11754:	b	10fe8 <__assert_fail@plt+0xb8>
   11758:	mov	r7, r6
   1175c:	str	r5, [sp, #20]
   11760:	str	r6, [sp, #24]
   11764:	ldr	r3, [r8]
   11768:	ldr	r5, [sp, #28]
   1176c:	ldr	r6, [sp, #32]
   11770:	b	11494 <__assert_fail@plt+0x564>
   11774:	mov	r2, #5
   11778:	ldr	r1, [pc, #372]	; 118f4 <__assert_fail@plt+0x9c4>
   1177c:	mov	r0, r9
   11780:	bl	10d68 <dcgettext@plt>
   11784:	mov	r1, r9
   11788:	mov	r2, r0
   1178c:	mov	r0, #1
   11790:	bl	10dd4 <error@plt>
   11794:	mov	r0, fp
   11798:	mov	r1, #10
   1179c:	bl	10eb8 <__overflow@plt>
   117a0:	cmn	r0, #1
   117a4:	beq	116fc <__assert_fail@plt+0x7cc>
   117a8:	b	115b4 <__assert_fail@plt+0x684>
   117ac:	bl	10e4c <__errno_location@plt>
   117b0:	ldr	r2, [sp, #36]	; 0x24
   117b4:	mov	r1, #3
   117b8:	ldr	r4, [r0]
   117bc:	mov	r0, r8
   117c0:	bl	16e28 <__assert_fail@plt+0x5ef8>
   117c4:	mov	r1, r4
   117c8:	ldr	r2, [pc, #296]	; 118f8 <__assert_fail@plt+0x9c8>
   117cc:	mov	r3, r0
   117d0:	mov	r0, #1
   117d4:	bl	10dd4 <error@plt>
   117d8:	bl	10e4c <__errno_location@plt>
   117dc:	mov	r2, #5
   117e0:	ldr	r1, [pc, #256]	; 118e8 <__assert_fail@plt+0x9b8>
   117e4:	ldr	r5, [r0]
   117e8:	mov	r0, r4
   117ec:	bl	10d68 <dcgettext@plt>
   117f0:	mov	r1, r5
   117f4:	mov	r2, r0
   117f8:	mov	r0, #1
   117fc:	bl	10dd4 <error@plt>
   11800:	andeq	sl, r1, r0, ror #25
   11804:	ldrdeq	sl, [r1], -r0
   11808:	andeq	sl, r1, r8, lsr #28
   1180c:	andeq	sl, r1, r4, asr r6
   11810:	andeq	sl, r1, r4, lsr #30
   11814:	andeq	ip, r2, r8, asr r1
   11818:	andeq	r3, r1, r4, lsr fp
   1181c:	andeq	ip, r2, ip, ror #1
   11820:	andeq	ip, r2, r4, asr r1
   11824:	andeq	sl, r1, r4, lsl #30
   11828:	andeq	sl, r1, r4, lsl pc
   1182c:	andeq	sl, r1, ip, asr #15
   11830:	andeq	sl, r1, r4, lsr #28
   11834:	andeq	ip, r2, r0, ror #2
   11838:	strdeq	r1, [r1], -r0
   1183c:	andeq	r1, r1, r4, ror sp
   11840:	andeq	r2, r1, ip, ror r2
   11844:	andeq	r1, r1, ip, ror #25
   11848:	andeq	r1, r1, r4, lsr #31
   1184c:	andeq	ip, r2, r0, asr #2
   11850:	andeq	sl, r1, r4, asr #30
   11854:	andeq	r1, r1, ip, lsl fp
   11858:	andeq	r1, r1, r8, lsl #22
   1185c:	andeq	r1, r1, r8, asr #23
   11860:	andeq	r1, r1, r8, lsl sp
   11864:	andeq	r2, r1, r0, lsl #2
   11868:	andeq	r1, r1, r4, lsr #22
   1186c:			; <UNDEFINED> instruction: 0x000121b0
   11870:	muleq	r1, ip, sl
   11874:	andeq	r1, r1, r0, lsl #21
   11878:	andeq	r1, r1, r4, lsr #21
   1187c:	andeq	r1, r1, r4, asr #26
   11880:	andeq	r1, r1, r8, lsl #30
   11884:	andeq	r1, r1, r4, asr #20
   11888:	andeq	r1, r1, r4, ror #20
   1188c:	andeq	r2, r1, ip, ror r4
   11890:	strdeq	r1, [r1], -r0
   11894:	andeq	r2, r1, ip, ror #11
   11898:	muleq	r1, r4, sp
   1189c:			; <UNDEFINED> instruction: 0x00012ab8
   118a0:	andeq	r1, r1, r8, lsl lr
   118a4:	andeq	r1, r1, r4, asr #27
   118a8:	andeq	r1, r1, r8, lsr #20
   118ac:	andeq	r1, r1, r0, ror ip
   118b0:	muleq	r1, ip, ip
   118b4:	andeq	r1, r1, ip, asr #28
   118b8:	andeq	r2, r1, r4, lsl #10
   118bc:	andeq	r3, r1, r4, lsl #12
   118c0:	andeq	r3, r1, r0, lsr #7
   118c4:	andeq	r1, r1, r4, ror lr
   118c8:	andeq	r1, r1, r0, lsr #28
   118cc:	andeq	sl, r1, ip, asr #14
   118d0:	andeq	sl, r1, r8, asr pc
   118d4:	andeq	r1, r0, r8, rrx
   118d8:	andeq	ip, r2, r0, asr r1
   118dc:	andeq	sl, r1, r8, ror #29
   118e0:	strdeq	sl, [r1], -ip
   118e4:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   118e8:	andeq	sl, r1, r8, ror #30
   118ec:	andeq	sl, r1, ip, asr pc
   118f0:	andeq	sl, r1, ip, lsr #30
   118f4:	andeq	sl, r1, r4, ror pc
   118f8:	andeq	sl, r1, r0, lsl #30
   118fc:	mov	fp, #0
   11900:	mov	lr, #0
   11904:	pop	{r1}		; (ldr r1, [sp], #4)
   11908:	mov	r2, sp
   1190c:	push	{r2}		; (str r2, [sp, #-4]!)
   11910:	push	{r0}		; (str r0, [sp, #-4]!)
   11914:	ldr	ip, [pc, #16]	; 1192c <__assert_fail@plt+0x9fc>
   11918:	push	{ip}		; (str ip, [sp, #-4]!)
   1191c:	ldr	r0, [pc, #12]	; 11930 <__assert_fail@plt+0xa00>
   11920:	ldr	r3, [pc, #12]	; 11934 <__assert_fail@plt+0xa04>
   11924:	bl	10dec <__libc_start_main@plt>
   11928:	bl	10f24 <abort@plt>
   1192c:	andeq	sl, r1, r0, asr #9
   11930:	andeq	r0, r1, r0, asr #30
   11934:	andeq	sl, r1, r0, ror #8
   11938:	ldr	r3, [pc, #20]	; 11954 <__assert_fail@plt+0xa24>
   1193c:	ldr	r2, [pc, #20]	; 11958 <__assert_fail@plt+0xa28>
   11940:	add	r3, pc, r3
   11944:	ldr	r2, [r3, r2]
   11948:	cmp	r2, #0
   1194c:	bxeq	lr
   11950:	b	10e04 <__gmon_start__@plt>
   11954:			; <UNDEFINED> instruction: 0x0001a6b8
   11958:	andeq	r0, r0, r0, ror #1
   1195c:	ldr	r3, [pc, #28]	; 11980 <__assert_fail@plt+0xa50>
   11960:	ldr	r0, [pc, #28]	; 11984 <__assert_fail@plt+0xa54>
   11964:	sub	r3, r3, r0
   11968:	cmp	r3, #6
   1196c:	bxls	lr
   11970:	ldr	r3, [pc, #16]	; 11988 <__assert_fail@plt+0xa58>
   11974:	cmp	r3, #0
   11978:	bxeq	lr
   1197c:	bx	r3
   11980:	andeq	ip, r2, r7, lsr r1
   11984:	andeq	ip, r2, r4, lsr r1
   11988:	andeq	r0, r0, r0
   1198c:	ldr	r1, [pc, #36]	; 119b8 <__assert_fail@plt+0xa88>
   11990:	ldr	r0, [pc, #36]	; 119bc <__assert_fail@plt+0xa8c>
   11994:	sub	r1, r1, r0
   11998:	asr	r1, r1, #2
   1199c:	add	r1, r1, r1, lsr #31
   119a0:	asrs	r1, r1, #1
   119a4:	bxeq	lr
   119a8:	ldr	r3, [pc, #16]	; 119c0 <__assert_fail@plt+0xa90>
   119ac:	cmp	r3, #0
   119b0:	bxeq	lr
   119b4:	bx	r3
   119b8:	andeq	ip, r2, r4, lsr r1
   119bc:	andeq	ip, r2, r4, lsr r1
   119c0:	andeq	r0, r0, r0
   119c4:	push	{r4, lr}
   119c8:	ldr	r4, [pc, #24]	; 119e8 <__assert_fail@plt+0xab8>
   119cc:	ldrb	r3, [r4]
   119d0:	cmp	r3, #0
   119d4:	popne	{r4, pc}
   119d8:	bl	1195c <__assert_fail@plt+0xa2c>
   119dc:	mov	r3, #1
   119e0:	strb	r3, [r4]
   119e4:	pop	{r4, pc}
   119e8:	andeq	ip, r2, ip, asr r1
   119ec:	ldr	r0, [pc, #40]	; 11a1c <__assert_fail@plt+0xaec>
   119f0:	ldr	r3, [r0]
   119f4:	cmp	r3, #0
   119f8:	bne	11a00 <__assert_fail@plt+0xad0>
   119fc:	b	1198c <__assert_fail@plt+0xa5c>
   11a00:	ldr	r3, [pc, #24]	; 11a20 <__assert_fail@plt+0xaf0>
   11a04:	cmp	r3, #0
   11a08:	beq	119fc <__assert_fail@plt+0xacc>
   11a0c:	push	{r4, lr}
   11a10:	blx	r3
   11a14:	pop	{r4, lr}
   11a18:	b	1198c <__assert_fail@plt+0xa5c>
   11a1c:	andeq	fp, r2, r4, lsl pc
	...
   11a28:	ldr	r3, [pc, #16]	; 11a40 <__assert_fail@plt+0xb10>
   11a2c:	add	r0, r0, #2
   11a30:	smull	r2, r3, r3, r0
   11a34:	sub	r0, r3, r0, asr #31
   11a38:	lsl	r0, r0, #2
   11a3c:	bx	lr
   11a40:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   11a44:	ldr	r3, [pc, #20]	; 11a60 <__assert_fail@plt+0xb30>
   11a48:	add	r0, r0, #4
   11a4c:	smull	r2, r3, r3, r0
   11a50:	asr	r0, r0, #31
   11a54:	rsb	r0, r0, r3, asr #1
   11a58:	lsl	r0, r0, #3
   11a5c:	bx	lr
   11a60:	strbtvs	r6, [r6], -r7, ror #12
   11a64:	sub	r3, r0, #48	; 0x30
   11a68:	sub	r0, r0, #65	; 0x41
   11a6c:	cmp	r0, #21
   11a70:	cmphi	r3, #9
   11a74:	movls	r0, #1
   11a78:	movhi	r0, #0
   11a7c:	bx	lr
   11a80:	sub	r3, r0, #48	; 0x30
   11a84:	sub	r0, r0, #65	; 0x41
   11a88:	cmp	r0, #5
   11a8c:	cmphi	r3, #9
   11a90:	movls	r0, #1
   11a94:	movhi	r0, #0
   11a98:	bx	lr
   11a9c:	lsl	r0, r0, #1
   11aa0:	bx	lr
   11aa4:	cmp	r1, #0
   11aa8:	bxeq	lr
   11aac:	add	r1, r1, #1
   11ab0:	ldr	ip, [pc, #52]	; 11aec <__assert_fail@plt+0xbbc>
   11ab4:	push	{r4, lr}
   11ab8:	sub	r0, r0, #1
   11abc:	add	r4, r2, r1, lsl #1
   11ac0:	add	r2, r2, #2
   11ac4:	ldrb	r3, [r0, #1]!
   11ac8:	add	r2, r2, #2
   11acc:	and	lr, r3, #15
   11ad0:	ldrb	r1, [ip, r3, lsr #4]
   11ad4:	ldrb	r3, [ip, lr]
   11ad8:	strb	r1, [r2, #-4]
   11adc:	strb	r3, [r2, #-3]
   11ae0:	cmp	r2, r4
   11ae4:	bne	11ac4 <__assert_fail@plt+0xb94>
   11ae8:	pop	{r4, pc}
   11aec:	andeq	sl, r1, r8, ror #9
   11af0:	add	r0, r0, r0, lsl #2
   11af4:	add	r3, r0, #3
   11af8:	cmp	r0, #0
   11afc:	movlt	r0, r3
   11b00:	asr	r0, r0, #2
   11b04:	bx	lr
   11b08:	sub	r0, r0, #48	; 0x30
   11b0c:	cmp	r0, #1
   11b10:	movhi	r0, #0
   11b14:	movls	r0, #1
   11b18:	bx	lr
   11b1c:	lsl	r0, r0, #3
   11b20:	bx	lr
   11b24:	cmp	r1, #0
   11b28:	bxeq	lr
   11b2c:	push	{r4, r5, r6, r7, lr}
   11b30:	add	r5, r0, r1
   11b34:	ldrb	r3, [r0], #1
   11b38:	add	r2, r2, #8
   11b3c:	tst	r3, #128	; 0x80
   11b40:	movne	r7, #49	; 0x31
   11b44:	moveq	r7, #48	; 0x30
   11b48:	tst	r3, #64	; 0x40
   11b4c:	movne	r6, #12544	; 0x3100
   11b50:	moveq	r6, #12288	; 0x3000
   11b54:	tst	r3, #32
   11b58:	movne	lr, #3211264	; 0x310000
   11b5c:	moveq	lr, #3145728	; 0x300000
   11b60:	tst	r3, #16
   11b64:	movne	r1, #822083584	; 0x31000000
   11b68:	moveq	r1, #805306368	; 0x30000000
   11b6c:	tst	r3, #8
   11b70:	movne	r4, #49	; 0x31
   11b74:	moveq	r4, #48	; 0x30
   11b78:	tst	r3, #4
   11b7c:	movne	ip, #12544	; 0x3100
   11b80:	moveq	ip, #12288	; 0x3000
   11b84:	tst	r3, #2
   11b88:	orr	r4, ip, r4
   11b8c:	orr	r6, r6, r7
   11b90:	movne	ip, #3211264	; 0x310000
   11b94:	moveq	ip, #3145728	; 0x300000
   11b98:	tst	r3, #1
   11b9c:	movne	r3, #822083584	; 0x31000000
   11ba0:	moveq	r3, #805306368	; 0x30000000
   11ba4:	orr	lr, lr, r6
   11ba8:	orr	ip, ip, r4
   11bac:	orr	r1, r1, lr
   11bb0:	orr	r3, r3, ip
   11bb4:	cmp	r5, r0
   11bb8:	str	r1, [r2, #-8]
   11bbc:	str	r3, [r2, #-4]
   11bc0:	bne	11b34 <__assert_fail@plt+0xc04>
   11bc4:	pop	{r4, r5, r6, r7, pc}
   11bc8:	cmp	r1, #0
   11bcc:	bxeq	lr
   11bd0:	push	{r4, r5, r6, r7, lr}
   11bd4:	add	r6, r0, r1
   11bd8:	ldrb	r3, [r0], #1
   11bdc:	add	r4, r2, #8
   11be0:	tst	r3, #1
   11be4:	movne	r7, #49	; 0x31
   11be8:	moveq	r7, #48	; 0x30
   11bec:	tst	r3, #2
   11bf0:	movne	lr, #12544	; 0x3100
   11bf4:	moveq	lr, #12288	; 0x3000
   11bf8:	tst	r3, #4
   11bfc:	movne	ip, #3211264	; 0x310000
   11c00:	moveq	ip, #3145728	; 0x300000
   11c04:	tst	r3, #8
   11c08:	movne	r1, #822083584	; 0x31000000
   11c0c:	moveq	r1, #805306368	; 0x30000000
   11c10:	tst	r3, #16
   11c14:	movne	r5, #49	; 0x31
   11c18:	moveq	r5, #48	; 0x30
   11c1c:	tst	r3, #32
   11c20:	orr	lr, lr, r7
   11c24:	movne	r7, #49	; 0x31
   11c28:	moveq	r7, #48	; 0x30
   11c2c:	tst	r3, #64	; 0x40
   11c30:	orr	ip, ip, lr
   11c34:	movne	lr, #49	; 0x31
   11c38:	moveq	lr, #48	; 0x30
   11c3c:	lsrs	r3, r3, #7
   11c40:	orr	r3, r1, ip
   11c44:	movne	r1, #49	; 0x31
   11c48:	moveq	r1, #48	; 0x30
   11c4c:	cmp	r0, r6
   11c50:	str	r3, [r2]
   11c54:	strb	r5, [r2, #4]
   11c58:	strb	r7, [r2, #5]
   11c5c:	strb	lr, [r2, #6]
   11c60:	strb	r1, [r2, #7]
   11c64:	mov	r2, r4
   11c68:	bne	11bd8 <__assert_fail@plt+0xca8>
   11c6c:	pop	{r4, r5, r6, r7, pc}
   11c70:	cmp	r0, #95	; 0x5f
   11c74:	cmpne	r0, #45	; 0x2d
   11c78:	moveq	r2, #1
   11c7c:	movne	r2, #0
   11c80:	beq	11c94 <__assert_fail@plt+0xd64>
   11c84:	and	r3, r0, #251	; 0xfb
   11c88:	cmp	r3, #43	; 0x2b
   11c8c:	beq	11c94 <__assert_fail@plt+0xd64>
   11c90:	b	13604 <__assert_fail@plt+0x26d4>
   11c94:	mov	r0, r2
   11c98:	bx	lr
   11c9c:	push	{r4, r5, r6, lr}
   11ca0:	mov	r5, r3
   11ca4:	mov	r4, r2
   11ca8:	bl	133a0 <__assert_fail@plt+0x2470>
   11cac:	cmp	r5, #0
   11cb0:	popeq	{r4, r5, r6, pc}
   11cb4:	add	r3, r4, r5
   11cb8:	mov	r2, r4
   11cbc:	mov	ip, #95	; 0x5f
   11cc0:	mov	r0, #45	; 0x2d
   11cc4:	ldrb	r1, [r2]
   11cc8:	cmp	r1, #43	; 0x2b
   11ccc:	strbeq	r0, [r2]
   11cd0:	beq	11cdc <__assert_fail@plt+0xdac>
   11cd4:	cmp	r1, #47	; 0x2f
   11cd8:	strbeq	ip, [r2]
   11cdc:	add	r2, r2, #1
   11ce0:	cmp	r3, r2
   11ce4:	bne	11cc4 <__assert_fail@plt+0xd94>
   11ce8:	pop	{r4, r5, r6, pc}
   11cec:	push	{r4, lr}
   11cf0:	mov	r4, r0
   11cf4:	ldr	r0, [pc, #24]	; 11d14 <__assert_fail@plt+0xde4>
   11cf8:	str	r0, [r4, #20]
   11cfc:	bl	18900 <__assert_fail@plt+0x79d0>
   11d00:	mov	r2, #1
   11d04:	mov	r3, #0
   11d08:	stm	r4, {r2, r3}
   11d0c:	str	r0, [r4, #16]
   11d10:	pop	{r4, pc}
   11d14:	andeq	r1, r0, r8, rrx
   11d18:	push	{r4, lr}
   11d1c:	mov	r4, r0
   11d20:	ldr	r0, [pc, #24]	; 11d40 <__assert_fail@plt+0xe10>
   11d24:	str	r0, [r4, #20]
   11d28:	bl	18900 <__assert_fail@plt+0x79d0>
   11d2c:	mov	r3, #0
   11d30:	strb	r3, [r4, #4]
   11d34:	str	r3, [r4]
   11d38:	str	r0, [r4, #16]
   11d3c:	pop	{r4, pc}
   11d40:	andeq	r1, r0, r8, rrx
   11d44:	push	{r4, lr}
   11d48:	mov	r4, r0
   11d4c:	ldr	r0, [pc, #28]	; 11d70 <__assert_fail@plt+0xe40>
   11d50:	str	r0, [r4, #20]
   11d54:	bl	18900 <__assert_fail@plt+0x79d0>
   11d58:	mov	r2, #0
   11d5c:	mov	r3, #1
   11d60:	strb	r2, [r4, #5]
   11d64:	str	r3, [r4]
   11d68:	str	r0, [r4, #16]
   11d6c:	pop	{r4, pc}
   11d70:	andeq	r1, r0, r8, rrx
   11d74:	cmp	r0, #90	; 0x5a
   11d78:	bhi	11dac <__assert_fail@plt+0xe7c>
   11d7c:	cmp	r0, #65	; 0x41
   11d80:	bcs	11db8 <__assert_fail@plt+0xe88>
   11d84:	sub	r3, r0, #48	; 0x30
   11d88:	cmp	r3, #9
   11d8c:	bls	11db8 <__assert_fail@plt+0xe88>
   11d90:	mov	r1, r0
   11d94:	push	{r4, lr}
   11d98:	ldr	r0, [pc, #32]	; 11dc0 <__assert_fail@plt+0xe90>
   11d9c:	bl	10e40 <strchr@plt>
   11da0:	adds	r0, r0, #0
   11da4:	movne	r0, #1
   11da8:	pop	{r4, pc}
   11dac:	sub	r3, r0, #97	; 0x61
   11db0:	cmp	r3, #25
   11db4:	bhi	11d90 <__assert_fail@plt+0xe60>
   11db8:	mov	r0, #1
   11dbc:	bx	lr
   11dc0:	andeq	sl, r1, r4, lsr r7
   11dc4:	push	{r4, lr}
   11dc8:	sub	sp, sp, #8
   11dcc:	mov	r4, r0
   11dd0:	ldr	ip, [sp, #16]
   11dd4:	add	r0, r0, #4
   11dd8:	str	ip, [sp]
   11ddc:	bl	12dbc <__assert_fail@plt+0x1e8c>
   11de0:	ldr	r3, [r4, #4]
   11de4:	str	r3, [r4]
   11de8:	add	sp, sp, #8
   11dec:	pop	{r4, pc}
   11df0:	push	{r4, lr}
   11df4:	mov	r4, r0
   11df8:	add	r0, r0, #4
   11dfc:	bl	12db0 <__assert_fail@plt+0x1e80>
   11e00:	ldr	r0, [pc, #12]	; 11e14 <__assert_fail@plt+0xee4>
   11e04:	str	r0, [r4, #20]
   11e08:	bl	18900 <__assert_fail@plt+0x79d0>
   11e0c:	str	r0, [r4, #16]
   11e10:	pop	{r4, pc}
   11e14:	andeq	r1, r0, r8, rrx
   11e18:	add	r0, r0, #4
   11e1c:	b	12db0 <__assert_fail@plt+0x1e80>
   11e20:	push	{r4, lr}
   11e24:	sub	sp, sp, #8
   11e28:	mov	r4, r0
   11e2c:	ldr	ip, [sp, #16]
   11e30:	add	r0, r0, #4
   11e34:	str	ip, [sp]
   11e38:	bl	1362c <__assert_fail@plt+0x26fc>
   11e3c:	ldr	r3, [r4, #4]
   11e40:	str	r3, [r4]
   11e44:	add	sp, sp, #8
   11e48:	pop	{r4, pc}
   11e4c:	push	{r4, lr}
   11e50:	mov	r4, r0
   11e54:	add	r0, r0, #4
   11e58:	bl	13620 <__assert_fail@plt+0x26f0>
   11e5c:	ldr	r0, [pc, #12]	; 11e70 <__assert_fail@plt+0xf40>
   11e60:	str	r0, [r4, #20]
   11e64:	bl	18900 <__assert_fail@plt+0x79d0>
   11e68:	str	r0, [r4, #16]
   11e6c:	pop	{r4, pc}
   11e70:	andeq	r1, r0, r8, rrx
   11e74:	add	r0, r0, #4
   11e78:	b	13620 <__assert_fail@plt+0x26f0>
   11e7c:	push	{r4, lr}
   11e80:	mov	r4, r1
   11e84:	bl	13c58 <__assert_fail@plt+0x2d28>
   11e88:	cmp	r0, #0
   11e8c:	beq	11ef8 <__assert_fail@plt+0xfc8>
   11e90:	ldr	r1, [pc, #100]	; 11efc <__assert_fail@plt+0xfcc>
   11e94:	mov	r0, r4
   11e98:	bl	10ce4 <strcmp@plt>
   11e9c:	subs	r5, r0, #0
   11ea0:	bne	11ecc <__assert_fail@plt+0xf9c>
   11ea4:	bl	10e4c <__errno_location@plt>
   11ea8:	mov	r2, #5
   11eac:	ldr	r1, [pc, #76]	; 11f00 <__assert_fail@plt+0xfd0>
   11eb0:	ldr	r4, [r0]
   11eb4:	mov	r0, r5
   11eb8:	bl	10d68 <dcgettext@plt>
   11ebc:	mov	r1, r4
   11ec0:	mov	r2, r0
   11ec4:	mov	r0, #1
   11ec8:	bl	10dd4 <error@plt>
   11ecc:	bl	10e4c <__errno_location@plt>
   11ed0:	mov	r2, r4
   11ed4:	mov	r1, #3
   11ed8:	ldr	r4, [r0]
   11edc:	mov	r0, #0
   11ee0:	bl	16e28 <__assert_fail@plt+0x5ef8>
   11ee4:	mov	r1, r4
   11ee8:	ldr	r2, [pc, #20]	; 11f04 <__assert_fail@plt+0xfd4>
   11eec:	mov	r3, r0
   11ef0:	mov	r0, #1
   11ef4:	bl	10dd4 <error@plt>
   11ef8:	bl	10e28 <exit@plt>
   11efc:	andeq	sl, r1, ip, asr #14
   11f00:	andeq	sl, r1, r0, asr r7
   11f04:	andeq	sl, r1, r0, lsl #30
   11f08:	push	{r4, r5, lr}
   11f0c:	mov	ip, #0
   11f10:	ldr	r4, [sp, #12]
   11f14:	cmp	r2, #0
   11f18:	str	ip, [r4]
   11f1c:	beq	11f90 <__assert_fail@plt+0x1060>
   11f20:	ldrb	ip, [r1], #1
   11f24:	cmp	ip, #10
   11f28:	sub	lr, ip, #48	; 0x30
   11f2c:	beq	11f80 <__assert_fail@plt+0x1050>
   11f30:	cmp	lr, #9
   11f34:	sub	r5, ip, #65	; 0x41
   11f38:	sub	ip, ip, #55	; 0x37
   11f3c:	movls	ip, lr
   11f40:	bls	11f4c <__assert_fail@plt+0x101c>
   11f44:	cmp	r5, #5
   11f48:	bhi	11f9c <__assert_fail@plt+0x106c>
   11f4c:	ldrb	lr, [r0, #5]
   11f50:	cmp	lr, #0
   11f54:	strbeq	ip, [r0, #4]
   11f58:	ldrne	lr, [r4]
   11f5c:	ldrbne	r5, [r0, #4]
   11f60:	addne	lr, lr, #1
   11f64:	strne	lr, [r4]
   11f68:	ldrbne	lr, [r0, #5]
   11f6c:	addne	ip, ip, r5, lsl #4
   11f70:	strbne	ip, [r3]
   11f74:	addne	r3, r3, #1
   11f78:	eor	lr, lr, #1
   11f7c:	strb	lr, [r0, #5]
   11f80:	subs	r2, r2, #1
   11f84:	bne	11f20 <__assert_fail@plt+0xff0>
   11f88:	mov	r0, #1
   11f8c:	pop	{r4, r5, pc}
   11f90:	ldrb	r0, [r0, #5]
   11f94:	eor	r0, r0, #1
   11f98:	pop	{r4, r5, pc}
   11f9c:	mov	r0, #0
   11fa0:	pop	{r4, r5, pc}
   11fa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fa8:	sub	sp, sp, #12
   11fac:	mov	lr, #0
   11fb0:	ldr	ip, [sp, #48]	; 0x30
   11fb4:	cmp	r2, #0
   11fb8:	str	lr, [ip]
   11fbc:	bne	11fdc <__assert_fail@plt+0x10ac>
   11fc0:	ldr	r3, [r0, #4]
   11fc4:	cmp	r3, #0
   11fc8:	movgt	r3, #0
   11fcc:	movle	r3, #1
   11fd0:	mov	r0, r3
   11fd4:	add	sp, sp, #12
   11fd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fdc:	str	lr, [sp, #4]
   11fe0:	ldr	lr, [pc, #268]	; 120f4 <__assert_fail@plt+0x11c4>
   11fe4:	b	11ff0 <__assert_fail@plt+0x10c0>
   11fe8:	subs	r2, r2, #1
   11fec:	beq	120cc <__assert_fail@plt+0x119c>
   11ff0:	ldrb	r4, [r1], #1
   11ff4:	cmp	r4, #10
   11ff8:	add	r6, lr, r4
   11ffc:	sub	r5, r4, #33	; 0x21
   12000:	beq	11fe8 <__assert_fail@plt+0x10b8>
   12004:	cmp	r5, #92	; 0x5c
   12008:	bhi	120e4 <__assert_fail@plt+0x11b4>
   1200c:	ldrsb	r5, [r6, #-17]	; 0xffffffef
   12010:	cmp	r5, #0
   12014:	blt	120e4 <__assert_fail@plt+0x11b4>
   12018:	ldr	r4, [r0, #4]
   1201c:	add	r6, r4, #1
   12020:	add	r4, r0, r4
   12024:	cmp	r6, #5
   12028:	str	r6, [r0, #4]
   1202c:	strb	r5, [r4, #8]
   12030:	bne	11fe8 <__assert_fail@plt+0x10b8>
   12034:	ldrb	r4, [r0, #10]
   12038:	ldrb	sl, [r0, #9]
   1203c:	ldrb	r6, [r0, #11]
   12040:	mov	fp, #85	; 0x55
   12044:	rsb	r5, r4, r4, lsl #3
   12048:	ldrb	r7, [r0, #12]
   1204c:	add	r5, r5, r5, lsl #7
   12050:	add	r4, r4, r5, lsl #3
   12054:	ldr	r5, [pc, #156]	; 120f8 <__assert_fail@plt+0x11c8>
   12058:	mla	sl, r5, sl, r4
   1205c:	ldrb	r4, [r0, #8]
   12060:	smlabb	r6, fp, r6, sl
   12064:	ldr	sl, [pc, #144]	; 120fc <__assert_fail@plt+0x11cc>
   12068:	add	r6, r6, r7
   1206c:	umull	r4, r5, r4, sl
   12070:	adds	r4, r4, r6
   12074:	adc	r5, r5, r6, asr #31
   12078:	lsr	r8, r4, #24
   1207c:	orr	r8, r8, r5, lsl #8
   12080:	asr	r9, r5, #24
   12084:	bic	r6, r8, #255	; 0xff
   12088:	mov	r7, r9
   1208c:	orrs	r6, r6, r7
   12090:	lsr	fp, r4, #16
   12094:	lsr	sl, r4, #8
   12098:	bne	120e4 <__assert_fail@plt+0x11b4>
   1209c:	ldr	r5, [ip]
   120a0:	strb	r4, [r3, #3]
   120a4:	add	r4, r5, #4
   120a8:	str	r4, [ip]
   120ac:	ldr	r4, [sp, #4]
   120b0:	subs	r2, r2, #1
   120b4:	strb	r8, [r3]
   120b8:	strb	fp, [r3, #1]
   120bc:	strb	sl, [r3, #2]
   120c0:	str	r4, [r0, #4]
   120c4:	add	r3, r3, #4
   120c8:	bne	11ff0 <__assert_fail@plt+0x10c0>
   120cc:	ldr	r2, [r0, #4]
   120d0:	mov	r3, #1
   120d4:	str	r2, [r0]
   120d8:	mov	r0, r3
   120dc:	add	sp, sp, #12
   120e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120e4:	mov	r3, #0
   120e8:	mov	r0, r3
   120ec:	add	sp, sp, #12
   120f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120f4:	andeq	sl, r1, r8, ror #9
   120f8:	andeq	r5, r9, sp, ror #29
   120fc:	tsteq	ip, #-1325400064	; 0xb1000000
   12100:	push	{r4, r5, r6, r7, lr}
   12104:	cmp	r2, #0
   12108:	ldr	r5, [sp, #20]
   1210c:	mov	r7, #0
   12110:	str	r7, [r5]
   12114:	bne	12124 <__assert_fail@plt+0x11f4>
   12118:	b	12198 <__assert_fail@plt+0x1268>
   1211c:	subs	r2, r2, #1
   12120:	beq	12190 <__assert_fail@plt+0x1260>
   12124:	ldrb	ip, [r1], #1
   12128:	cmp	ip, #10
   1212c:	sub	lr, ip, #48	; 0x30
   12130:	beq	1211c <__assert_fail@plt+0x11ec>
   12134:	cmp	lr, #1
   12138:	bhi	121a8 <__assert_fail@plt+0x1278>
   1213c:	ldr	r6, [r0]
   12140:	ldrb	lr, [r0, #4]
   12144:	sub	ip, ip, #49	; 0x31
   12148:	clz	ip, ip
   1214c:	lsr	ip, ip, #5
   12150:	add	r4, r6, #1
   12154:	orr	ip, lr, ip, lsl r6
   12158:	cmp	r4, #8
   1215c:	uxtb	ip, ip
   12160:	strb	ip, [r0, #4]
   12164:	str	r4, [r0]
   12168:	bne	1211c <__assert_fail@plt+0x11ec>
   1216c:	strb	r7, [r0, #4]
   12170:	ldr	lr, [r5]
   12174:	strb	ip, [r3]
   12178:	subs	r2, r2, #1
   1217c:	add	ip, lr, #1
   12180:	str	ip, [r5]
   12184:	add	r3, r3, #1
   12188:	str	r7, [r0]
   1218c:	bne	12124 <__assert_fail@plt+0x11f4>
   12190:	mov	r0, #1
   12194:	pop	{r4, r5, r6, r7, pc}
   12198:	ldr	r0, [r0]
   1219c:	clz	r0, r0
   121a0:	lsr	r0, r0, #5
   121a4:	pop	{r4, r5, r6, r7, pc}
   121a8:	mov	r0, #0
   121ac:	pop	{r4, r5, r6, r7, pc}
   121b0:	push	{r4, r5, r6, lr}
   121b4:	cmp	r2, #0
   121b8:	ldr	r5, [sp, #16]
   121bc:	mov	ip, #0
   121c0:	movne	r6, #7
   121c4:	str	ip, [r5]
   121c8:	bne	121e8 <__assert_fail@plt+0x12b8>
   121cc:	b	12264 <__assert_fail@plt+0x1334>
   121d0:	ldrb	lr, [r0, #4]
   121d4:	str	r6, [r0]
   121d8:	orr	ip, lr, ip, lsl #7
   121dc:	strb	ip, [r0, #4]
   121e0:	subs	r2, r2, #1
   121e4:	beq	1225c <__assert_fail@plt+0x132c>
   121e8:	ldrb	ip, [r1], #1
   121ec:	cmp	ip, #10
   121f0:	sub	lr, ip, #48	; 0x30
   121f4:	beq	121e0 <__assert_fail@plt+0x12b0>
   121f8:	cmp	lr, #1
   121fc:	bhi	12274 <__assert_fail@plt+0x1344>
   12200:	ldr	r4, [r0]
   12204:	sub	ip, ip, #49	; 0x31
   12208:	cmp	r4, #0
   1220c:	clz	ip, ip
   12210:	sub	lr, r4, #1
   12214:	lsr	ip, ip, #5
   12218:	beq	121d0 <__assert_fail@plt+0x12a0>
   1221c:	ldrb	r4, [r0, #4]
   12220:	cmp	lr, #0
   12224:	str	lr, [r0]
   12228:	orr	ip, r4, ip, lsl lr
   1222c:	uxtb	ip, ip
   12230:	strb	ip, [r0, #4]
   12234:	bne	121e0 <__assert_fail@plt+0x12b0>
   12238:	strb	lr, [r0, #4]
   1223c:	ldr	r4, [r5]
   12240:	strb	ip, [r3]
   12244:	subs	r2, r2, #1
   12248:	add	ip, r4, #1
   1224c:	str	ip, [r5]
   12250:	add	r3, r3, #1
   12254:	str	lr, [r0]
   12258:	bne	121e8 <__assert_fail@plt+0x12b8>
   1225c:	mov	r0, #1
   12260:	pop	{r4, r5, r6, pc}
   12264:	ldr	r0, [r0]
   12268:	clz	r0, r0
   1226c:	lsr	r0, r0, #5
   12270:	pop	{r4, r5, r6, pc}
   12274:	mov	r0, #0
   12278:	pop	{r4, r5, r6, pc}
   1227c:	cmp	r1, #0
   12280:	beq	1243c <__assert_fail@plt+0x150c>
   12284:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12288:	mov	sl, r0
   1228c:	mov	r8, r3
   12290:	ldrb	r3, [sl], r1
   12294:	sub	sp, sp, #20
   12298:	ldr	fp, [pc, #464]	; 12470 <__assert_fail@plt+0x1540>
   1229c:	strb	r3, [sp, #12]
   122a0:	mov	r9, r2
   122a4:	mov	r5, #0
   122a8:	add	r4, r0, #1
   122ac:	mov	r3, #1
   122b0:	cmp	sl, r4
   122b4:	beq	1242c <__assert_fail@plt+0x14fc>
   122b8:	ldrb	r1, [r4], #1
   122bc:	add	r2, sp, #16
   122c0:	add	r2, r2, r3
   122c4:	add	r3, r3, #1
   122c8:	cmp	r3, #4
   122cc:	strb	r1, [r2, #-4]
   122d0:	bne	122b0 <__assert_fail@plt+0x1380>
   122d4:	ldrb	r0, [sp, #12]
   122d8:	ldrb	r3, [sp, #13]
   122dc:	ldrb	r1, [sp, #14]
   122e0:	lsr	r2, r0, #8
   122e4:	str	r2, [sp, #4]
   122e8:	lsl	r2, r0, #24
   122ec:	str	r2, [sp]
   122f0:	ldrd	r6, [sp]
   122f4:	lsl	r3, r3, #16
   122f8:	lsl	r1, r1, #8
   122fc:	adds	r6, r6, r3
   12300:	adc	r7, r7, r3, asr #31
   12304:	adds	r2, r6, r1
   12308:	ldrb	r6, [sp, #15]
   1230c:	adc	r3, r7, r1, asr #31
   12310:	mov	r7, #0
   12314:	adds	r6, r6, r2
   12318:	add	r1, r5, #4
   1231c:	adc	r7, r7, r3
   12320:	cmp	r8, r1
   12324:	ble	12348 <__assert_fail@plt+0x1418>
   12328:	mov	r2, #85	; 0x55
   1232c:	mov	r3, #0
   12330:	mov	r0, r6
   12334:	mov	r1, r7
   12338:	bl	1a254 <__assert_fail@plt+0x9324>
   1233c:	add	r2, fp, r2
   12340:	ldrb	r3, [r2, #112]	; 0x70
   12344:	strb	r3, [r9, #4]
   12348:	add	r3, r5, #3
   1234c:	cmp	r8, r3
   12350:	ble	12380 <__assert_fail@plt+0x1450>
   12354:	mov	r2, #85	; 0x55
   12358:	mov	r3, #0
   1235c:	mov	r0, r6
   12360:	mov	r1, r7
   12364:	bl	1a254 <__assert_fail@plt+0x9324>
   12368:	mov	r2, #85	; 0x55
   1236c:	mov	r3, #0
   12370:	bl	1a254 <__assert_fail@plt+0x9324>
   12374:	add	r2, fp, r2
   12378:	ldrb	r3, [r2, #112]	; 0x70
   1237c:	strb	r3, [r9, #3]
   12380:	add	r3, r5, #2
   12384:	cmp	r8, r3
   12388:	ble	123b8 <__assert_fail@plt+0x1488>
   1238c:	ldr	r2, [pc, #224]	; 12474 <__assert_fail@plt+0x1544>
   12390:	mov	r3, #0
   12394:	mov	r0, r6
   12398:	mov	r1, r7
   1239c:	bl	1a254 <__assert_fail@plt+0x9324>
   123a0:	mov	r2, #85	; 0x55
   123a4:	mov	r3, #0
   123a8:	bl	1a254 <__assert_fail@plt+0x9324>
   123ac:	add	r2, fp, r2
   123b0:	ldrb	r3, [r2, #112]	; 0x70
   123b4:	strb	r3, [r9, #2]
   123b8:	add	r3, r5, #1
   123bc:	cmp	r8, r3
   123c0:	ble	123f0 <__assert_fail@plt+0x14c0>
   123c4:	add	r3, pc, #148	; 0x94
   123c8:	ldrd	r2, [r3]
   123cc:	mov	r0, r6
   123d0:	mov	r1, r7
   123d4:	bl	1a254 <__assert_fail@plt+0x9324>
   123d8:	mov	r2, #85	; 0x55
   123dc:	mov	r3, #0
   123e0:	bl	1a254 <__assert_fail@plt+0x9324>
   123e4:	add	r2, fp, r2
   123e8:	ldrb	r3, [r2, #112]	; 0x70
   123ec:	strb	r3, [r9, #1]
   123f0:	cmp	r8, r5
   123f4:	ble	12418 <__assert_fail@plt+0x14e8>
   123f8:	add	r3, pc, #104	; 0x68
   123fc:	ldrd	r2, [r3]
   12400:	mov	r0, r6
   12404:	mov	r1, r7
   12408:	bl	1a254 <__assert_fail@plt+0x9324>
   1240c:	add	r0, fp, r0
   12410:	ldrb	r3, [r0, #112]	; 0x70
   12414:	strb	r3, [r9]
   12418:	cmp	sl, r4
   1241c:	add	r9, r9, #5
   12420:	add	r5, r5, #5
   12424:	mov	r3, #0
   12428:	bne	122b8 <__assert_fail@plt+0x1388>
   1242c:	cmp	r3, #0
   12430:	bne	12440 <__assert_fail@plt+0x1510>
   12434:	add	sp, sp, #20
   12438:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1243c:	bx	lr
   12440:	mov	r2, #5
   12444:	ldr	r1, [pc, #44]	; 12478 <__assert_fail@plt+0x1548>
   12448:	mov	r0, #0
   1244c:	bl	10d68 <dcgettext@plt>
   12450:	mov	r1, #0
   12454:	mov	r2, r0
   12458:	mov	r0, #1
   1245c:	bl	10dd4 <error@plt>
   12460:	andeq	r5, r9, sp, ror #29
   12464:	andeq	r0, r0, r0
   12468:	tsteq	ip, #-1325400064	; 0xb1000000
   1246c:	andeq	r0, r0, r0
   12470:	andeq	sl, r1, r8, ror #9
   12474:	andeq	r1, r0, r9, lsr ip
   12478:	andeq	sl, r1, r8, ror #14
   1247c:	push	{r4, r5, r6, lr}
   12480:	mov	r5, r3
   12484:	mov	r4, r2
   12488:	bl	12ab8 <__assert_fail@plt+0x1b88>
   1248c:	cmp	r5, #0
   12490:	popeq	{r4, r5, r6, pc}
   12494:	ldrb	r3, [r4]
   12498:	sub	r2, r3, #50	; 0x32
   1249c:	cmp	r2, #40	; 0x28
   124a0:	bhi	124e0 <__assert_fail@plt+0x15b0>
   124a4:	sub	r0, r5, #1
   124a8:	mov	r2, r4
   124ac:	ldr	ip, [pc, #64]	; 124f4 <__assert_fail@plt+0x15c4>
   124b0:	add	r0, r4, r0
   124b4:	b	124c8 <__assert_fail@plt+0x1598>
   124b8:	ldrb	r3, [r2, #1]!
   124bc:	sub	r1, r3, #50	; 0x32
   124c0:	cmp	r1, #40	; 0x28
   124c4:	bhi	124e0 <__assert_fail@plt+0x15b0>
   124c8:	add	r3, ip, r3
   124cc:	cmp	r0, r2
   124d0:	ldrb	r3, [r3, #170]	; 0xaa
   124d4:	strb	r3, [r2]
   124d8:	bne	124b8 <__assert_fail@plt+0x1588>
   124dc:	pop	{r4, r5, r6, pc}
   124e0:	ldr	r3, [pc, #16]	; 124f8 <__assert_fail@plt+0x15c8>
   124e4:	mov	r2, #452	; 0x1c4
   124e8:	ldr	r1, [pc, #12]	; 124fc <__assert_fail@plt+0x15cc>
   124ec:	ldr	r0, [pc, #12]	; 12500 <__assert_fail@plt+0x15d0>
   124f0:	bl	10f30 <__assert_fail@plt>
   124f4:	andeq	sl, r1, r8, ror #9
   124f8:			; <UNDEFINED> instruction: 0x0001a5b0
   124fc:	andeq	sl, r1, r0, lsr #15
   12500:			; <UNDEFINED> instruction: 0x0001a7b0
   12504:	push	{r4, r5, r6, r7, r8, lr}
   12508:	mov	r5, r2
   1250c:	ldr	r2, [r0, #20]
   12510:	sub	sp, sp, #8
   12514:	cmp	r5, r2
   12518:	mov	r4, r0
   1251c:	mov	r8, r1
   12520:	mov	r7, r3
   12524:	ldr	r6, [sp, #32]
   12528:	bgt	125d0 <__assert_fail@plt+0x16a0>
   1252c:	ldr	r0, [r0, #16]
   12530:	mov	r1, r8
   12534:	mov	r2, r5
   12538:	bl	10d2c <memcpy@plt>
   1253c:	cmp	r5, #0
   12540:	ldr	r1, [r4, #16]
   12544:	beq	1259c <__assert_fail@plt+0x166c>
   12548:	ldrb	r3, [r1]
   1254c:	and	r2, r3, #251	; 0xfb
   12550:	cmp	r2, #43	; 0x2b
   12554:	subne	r0, r5, #1
   12558:	addne	r0, r1, r0
   1255c:	movne	lr, #47	; 0x2f
   12560:	movne	ip, #43	; 0x2b
   12564:	bne	1257c <__assert_fail@plt+0x164c>
   12568:	b	125c0 <__assert_fail@plt+0x1690>
   1256c:	ldrb	r3, [r1, #1]!
   12570:	and	r2, r3, #251	; 0xfb
   12574:	cmp	r2, #43	; 0x2b
   12578:	beq	125c0 <__assert_fail@plt+0x1690>
   1257c:	cmp	r3, #45	; 0x2d
   12580:	strbeq	ip, [r1]
   12584:	beq	12590 <__assert_fail@plt+0x1660>
   12588:	cmp	r3, #95	; 0x5f
   1258c:	strbeq	lr, [r1]
   12590:	cmp	r1, r0
   12594:	bne	1256c <__assert_fail@plt+0x163c>
   12598:	ldr	r1, [r4, #16]
   1259c:	mov	r3, r7
   125a0:	str	r6, [sp]
   125a4:	mov	r2, r5
   125a8:	add	r0, r4, #4
   125ac:	bl	1362c <__assert_fail@plt+0x26fc>
   125b0:	ldr	r3, [r4, #4]
   125b4:	str	r3, [r4]
   125b8:	add	sp, sp, #8
   125bc:	pop	{r4, r5, r6, r7, r8, pc}
   125c0:	mov	r0, #0
   125c4:	str	r0, [r6]
   125c8:	add	sp, sp, #8
   125cc:	pop	{r4, r5, r6, r7, r8, pc}
   125d0:	lsl	r1, r5, #1
   125d4:	str	r1, [r0, #20]
   125d8:	mov	r2, #1
   125dc:	ldr	r0, [r0, #16]
   125e0:	bl	18964 <__assert_fail@plt+0x7a34>
   125e4:	str	r0, [r4, #16]
   125e8:	b	12530 <__assert_fail@plt+0x1600>
   125ec:	push	{r4, r5, r6, r7, r8, r9, lr}
   125f0:	mov	r6, r2
   125f4:	ldr	r2, [r0, #20]
   125f8:	sub	sp, sp, #20
   125fc:	cmp	r6, r2
   12600:	mov	r5, r0
   12604:	mov	r4, r1
   12608:	ldr	r7, [sp, #48]	; 0x30
   1260c:	bgt	12674 <__assert_fail@plt+0x1744>
   12610:	ldr	r1, [r0, #16]
   12614:	cmp	r6, #0
   12618:	beq	12654 <__assert_fail@plt+0x1724>
   1261c:	ldr	r9, [pc, #120]	; 1269c <__assert_fail@plt+0x176c>
   12620:	sub	r0, r4, #1
   12624:	add	r8, r1, r6
   12628:	ldrb	r2, [r0, #1]!
   1262c:	sub	lr, r2, #48	; 0x30
   12630:	sub	ip, r2, #65	; 0x41
   12634:	cmp	ip, #21
   12638:	cmphi	lr, #9
   1263c:	add	r4, r9, r2
   12640:	ldrbls	r2, [r4, #216]	; 0xd8
   12644:	strb	r2, [r1], #1
   12648:	cmp	r1, r8
   1264c:	bne	12628 <__assert_fail@plt+0x16f8>
   12650:	ldr	r1, [r5, #16]
   12654:	str	r7, [sp]
   12658:	mov	r2, r6
   1265c:	add	r0, r5, #4
   12660:	bl	12dbc <__assert_fail@plt+0x1e8c>
   12664:	ldr	r3, [r5, #4]
   12668:	str	r3, [r5]
   1266c:	add	sp, sp, #20
   12670:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12674:	lsl	r1, r6, #1
   12678:	str	r1, [r0, #20]
   1267c:	mov	r2, #1
   12680:	ldr	r0, [r0, #16]
   12684:	str	r3, [sp, #12]
   12688:	bl	18964 <__assert_fail@plt+0x7a34>
   1268c:	ldr	r3, [sp, #12]
   12690:	mov	r1, r0
   12694:	str	r0, [r5, #16]
   12698:	b	12614 <__assert_fail@plt+0x16e4>
   1269c:	andeq	sl, r1, r8, ror #9
   126a0:	subs	r5, r0, #0
   126a4:	push	{r7, lr}
   126a8:	sub	sp, sp, #56	; 0x38
   126ac:	beq	126e8 <__assert_fail@plt+0x17b8>
   126b0:	ldr	r3, [pc, #900]	; 12a3c <__assert_fail@plt+0x1b0c>
   126b4:	mov	r2, #5
   126b8:	ldr	r1, [pc, #896]	; 12a40 <__assert_fail@plt+0x1b10>
   126bc:	mov	r0, #0
   126c0:	ldr	r4, [r3]
   126c4:	bl	10d68 <dcgettext@plt>
   126c8:	ldr	r3, [pc, #884]	; 12a44 <__assert_fail@plt+0x1b14>
   126cc:	mov	r1, #1
   126d0:	ldr	r3, [r3]
   126d4:	mov	r2, r0
   126d8:	mov	r0, r4
   126dc:	bl	10e88 <__fprintf_chk@plt>
   126e0:	mov	r0, r5
   126e4:	bl	10e28 <exit@plt>
   126e8:	mov	r2, #5
   126ec:	ldr	r1, [pc, #852]	; 12a48 <__assert_fail@plt+0x1b18>
   126f0:	bl	10d68 <dcgettext@plt>
   126f4:	ldr	r3, [pc, #840]	; 12a44 <__assert_fail@plt+0x1b14>
   126f8:	ldr	r6, [pc, #844]	; 12a4c <__assert_fail@plt+0x1b1c>
   126fc:	ldr	r4, [pc, #844]	; 12a50 <__assert_fail@plt+0x1b20>
   12700:	ldr	r2, [r3]
   12704:	mov	r1, r0
   12708:	mov	r0, #1
   1270c:	bl	10e70 <__printf_chk@plt>
   12710:	mov	r2, #5
   12714:	ldr	r1, [pc, #824]	; 12a54 <__assert_fail@plt+0x1b24>
   12718:	mov	r0, r5
   1271c:	bl	10d68 <dcgettext@plt>
   12720:	ldr	r1, [r6]
   12724:	bl	10ccc <fputs_unlocked@plt>
   12728:	mov	r2, #5
   1272c:	ldr	r1, [pc, #804]	; 12a58 <__assert_fail@plt+0x1b28>
   12730:	mov	r0, r5
   12734:	bl	10d68 <dcgettext@plt>
   12738:	ldr	r1, [r6]
   1273c:	bl	10ccc <fputs_unlocked@plt>
   12740:	mov	r2, #5
   12744:	ldr	r1, [pc, #784]	; 12a5c <__assert_fail@plt+0x1b2c>
   12748:	mov	r0, r5
   1274c:	bl	10d68 <dcgettext@plt>
   12750:	ldr	r1, [r6]
   12754:	bl	10ccc <fputs_unlocked@plt>
   12758:	mov	r2, #5
   1275c:	ldr	r1, [pc, #764]	; 12a60 <__assert_fail@plt+0x1b30>
   12760:	mov	r0, r5
   12764:	bl	10d68 <dcgettext@plt>
   12768:	ldr	r1, [r6]
   1276c:	bl	10ccc <fputs_unlocked@plt>
   12770:	mov	r2, #5
   12774:	ldr	r1, [pc, #744]	; 12a64 <__assert_fail@plt+0x1b34>
   12778:	mov	r0, r5
   1277c:	bl	10d68 <dcgettext@plt>
   12780:	ldr	r1, [r6]
   12784:	bl	10ccc <fputs_unlocked@plt>
   12788:	mov	r2, #5
   1278c:	ldr	r1, [pc, #724]	; 12a68 <__assert_fail@plt+0x1b38>
   12790:	mov	r0, r5
   12794:	bl	10d68 <dcgettext@plt>
   12798:	ldr	r1, [r6]
   1279c:	bl	10ccc <fputs_unlocked@plt>
   127a0:	mov	r2, #5
   127a4:	ldr	r1, [pc, #704]	; 12a6c <__assert_fail@plt+0x1b3c>
   127a8:	mov	r0, r5
   127ac:	bl	10d68 <dcgettext@plt>
   127b0:	ldr	r1, [r6]
   127b4:	bl	10ccc <fputs_unlocked@plt>
   127b8:	mov	r2, #5
   127bc:	ldr	r1, [pc, #684]	; 12a70 <__assert_fail@plt+0x1b40>
   127c0:	mov	r0, r5
   127c4:	bl	10d68 <dcgettext@plt>
   127c8:	ldr	r1, [r6]
   127cc:	bl	10ccc <fputs_unlocked@plt>
   127d0:	mov	r2, #5
   127d4:	ldr	r1, [pc, #664]	; 12a74 <__assert_fail@plt+0x1b44>
   127d8:	mov	r0, r5
   127dc:	bl	10d68 <dcgettext@plt>
   127e0:	ldr	r1, [r6]
   127e4:	bl	10ccc <fputs_unlocked@plt>
   127e8:	mov	r2, #5
   127ec:	ldr	r1, [pc, #644]	; 12a78 <__assert_fail@plt+0x1b48>
   127f0:	mov	r0, r5
   127f4:	bl	10d68 <dcgettext@plt>
   127f8:	ldr	r1, [r6]
   127fc:	bl	10ccc <fputs_unlocked@plt>
   12800:	mov	r2, #5
   12804:	ldr	r1, [pc, #624]	; 12a7c <__assert_fail@plt+0x1b4c>
   12808:	mov	r0, r5
   1280c:	bl	10d68 <dcgettext@plt>
   12810:	ldr	r1, [r6]
   12814:	bl	10ccc <fputs_unlocked@plt>
   12818:	mov	r2, #5
   1281c:	ldr	r1, [pc, #604]	; 12a80 <__assert_fail@plt+0x1b50>
   12820:	mov	r0, r5
   12824:	bl	10d68 <dcgettext@plt>
   12828:	ldr	r1, [r6]
   1282c:	bl	10ccc <fputs_unlocked@plt>
   12830:	mov	r2, #5
   12834:	ldr	r1, [pc, #584]	; 12a84 <__assert_fail@plt+0x1b54>
   12838:	mov	r0, r5
   1283c:	bl	10d68 <dcgettext@plt>
   12840:	ldr	r1, [r6]
   12844:	bl	10ccc <fputs_unlocked@plt>
   12848:	mov	r2, #5
   1284c:	ldr	r1, [pc, #564]	; 12a88 <__assert_fail@plt+0x1b58>
   12850:	mov	r0, r5
   12854:	bl	10d68 <dcgettext@plt>
   12858:	ldr	r1, [r6]
   1285c:	bl	10ccc <fputs_unlocked@plt>
   12860:	mov	r2, #5
   12864:	ldr	r1, [pc, #544]	; 12a8c <__assert_fail@plt+0x1b5c>
   12868:	mov	r0, r5
   1286c:	bl	10d68 <dcgettext@plt>
   12870:	ldr	r1, [r6]
   12874:	bl	10ccc <fputs_unlocked@plt>
   12878:	ldm	r4!, {r0, r1, r2, r3}
   1287c:	mov	lr, sp
   12880:	stmia	lr!, {r0, r1, r2, r3}
   12884:	ldm	r4!, {r0, r1, r2, r3}
   12888:	ldr	ip, [sp]
   1288c:	stmia	lr!, {r0, r1, r2, r3}
   12890:	cmp	ip, #0
   12894:	ldm	r4!, {r0, r1, r2, r3}
   12898:	stmia	lr!, {r0, r1, r2, r3}
   1289c:	ldm	r4, {r0, r1}
   128a0:	moveq	r4, sp
   128a4:	stm	lr, {r0, r1}
   128a8:	beq	128d8 <__assert_fail@plt+0x19a8>
   128ac:	ldr	r7, [pc, #476]	; 12a90 <__assert_fail@plt+0x1b60>
   128b0:	mov	r4, sp
   128b4:	b	128c4 <__assert_fail@plt+0x1994>
   128b8:	ldr	ip, [r4, #8]!
   128bc:	cmp	ip, #0
   128c0:	beq	128d8 <__assert_fail@plt+0x19a8>
   128c4:	mov	r1, ip
   128c8:	mov	r0, r7
   128cc:	bl	10ce4 <strcmp@plt>
   128d0:	cmp	r0, #0
   128d4:	bne	128b8 <__assert_fail@plt+0x1988>
   128d8:	ldr	r4, [r4, #4]
   128dc:	mov	r2, #5
   128e0:	cmp	r4, #0
   128e4:	ldr	r1, [pc, #424]	; 12a94 <__assert_fail@plt+0x1b64>
   128e8:	beq	12990 <__assert_fail@plt+0x1a60>
   128ec:	mov	r0, #0
   128f0:	bl	10d68 <dcgettext@plt>
   128f4:	ldr	r3, [pc, #412]	; 12a98 <__assert_fail@plt+0x1b68>
   128f8:	ldr	r2, [pc, #412]	; 12a9c <__assert_fail@plt+0x1b6c>
   128fc:	mov	r1, r0
   12900:	mov	r0, #1
   12904:	bl	10e70 <__printf_chk@plt>
   12908:	mov	r1, #0
   1290c:	mov	r0, #5
   12910:	bl	10ec4 <setlocale@plt>
   12914:	cmp	r0, #0
   12918:	ldreq	r7, [pc, #368]	; 12a90 <__assert_fail@plt+0x1b60>
   1291c:	beq	12938 <__assert_fail@plt+0x1a08>
   12920:	mov	r2, #3
   12924:	ldr	r1, [pc, #372]	; 12aa0 <__assert_fail@plt+0x1b70>
   12928:	bl	10f18 <strncmp@plt>
   1292c:	ldr	r7, [pc, #348]	; 12a90 <__assert_fail@plt+0x1b60>
   12930:	cmp	r0, #0
   12934:	bne	12a20 <__assert_fail@plt+0x1af0>
   12938:	mov	r2, #5
   1293c:	ldr	r1, [pc, #352]	; 12aa4 <__assert_fail@plt+0x1b74>
   12940:	mov	r0, #0
   12944:	bl	10d68 <dcgettext@plt>
   12948:	ldr	r3, [pc, #320]	; 12a90 <__assert_fail@plt+0x1b60>
   1294c:	ldr	r2, [pc, #324]	; 12a98 <__assert_fail@plt+0x1b68>
   12950:	mov	r1, r0
   12954:	mov	r0, #1
   12958:	bl	10e70 <__printf_chk@plt>
   1295c:	mov	r2, #5
   12960:	ldr	r1, [pc, #320]	; 12aa8 <__assert_fail@plt+0x1b78>
   12964:	mov	r0, #0
   12968:	bl	10d68 <dcgettext@plt>
   1296c:	ldr	r2, [pc, #312]	; 12aac <__assert_fail@plt+0x1b7c>
   12970:	cmp	r4, r7
   12974:	ldr	r3, [pc, #308]	; 12ab0 <__assert_fail@plt+0x1b80>
   12978:	movne	r3, r2
   1297c:	mov	r1, r0
   12980:	mov	r2, r4
   12984:	mov	r0, #1
   12988:	bl	10e70 <__printf_chk@plt>
   1298c:	b	126e0 <__assert_fail@plt+0x17b0>
   12990:	mov	r0, r4
   12994:	bl	10d68 <dcgettext@plt>
   12998:	ldr	r3, [pc, #248]	; 12a98 <__assert_fail@plt+0x1b68>
   1299c:	ldr	r2, [pc, #248]	; 12a9c <__assert_fail@plt+0x1b6c>
   129a0:	mov	r1, r0
   129a4:	mov	r0, #1
   129a8:	bl	10e70 <__printf_chk@plt>
   129ac:	mov	r1, r4
   129b0:	mov	r0, #5
   129b4:	bl	10ec4 <setlocale@plt>
   129b8:	cmp	r0, #0
   129bc:	beq	129d4 <__assert_fail@plt+0x1aa4>
   129c0:	mov	r2, #3
   129c4:	ldr	r1, [pc, #212]	; 12aa0 <__assert_fail@plt+0x1b70>
   129c8:	bl	10f18 <strncmp@plt>
   129cc:	cmp	r0, #0
   129d0:	bne	12a18 <__assert_fail@plt+0x1ae8>
   129d4:	mov	r2, #5
   129d8:	ldr	r1, [pc, #196]	; 12aa4 <__assert_fail@plt+0x1b74>
   129dc:	mov	r0, #0
   129e0:	bl	10d68 <dcgettext@plt>
   129e4:	ldr	r3, [pc, #164]	; 12a90 <__assert_fail@plt+0x1b60>
   129e8:	ldr	r2, [pc, #168]	; 12a98 <__assert_fail@plt+0x1b68>
   129ec:	mov	r4, r3
   129f0:	mov	r1, r0
   129f4:	mov	r0, #1
   129f8:	bl	10e70 <__printf_chk@plt>
   129fc:	ldr	r1, [pc, #164]	; 12aa8 <__assert_fail@plt+0x1b78>
   12a00:	mov	r2, #5
   12a04:	mov	r0, #0
   12a08:	bl	10d68 <dcgettext@plt>
   12a0c:	ldr	r3, [pc, #156]	; 12ab0 <__assert_fail@plt+0x1b80>
   12a10:	mov	r1, r0
   12a14:	b	12980 <__assert_fail@plt+0x1a50>
   12a18:	ldr	r7, [pc, #112]	; 12a90 <__assert_fail@plt+0x1b60>
   12a1c:	mov	r4, r7
   12a20:	mov	r2, #5
   12a24:	ldr	r1, [pc, #136]	; 12ab4 <__assert_fail@plt+0x1b84>
   12a28:	mov	r0, #0
   12a2c:	bl	10d68 <dcgettext@plt>
   12a30:	ldr	r1, [r6]
   12a34:	bl	10ccc <fputs_unlocked@plt>
   12a38:	b	12938 <__assert_fail@plt+0x1a08>
   12a3c:	andeq	ip, r2, r8, asr #2
   12a40:	ldrdeq	sl, [r1], -r4
   12a44:	andeq	ip, r2, ip, ror r1
   12a48:	strdeq	sl, [r1], -ip
   12a4c:	andeq	ip, r2, r4, asr r1
   12a50:	andeq	sl, r1, ip, lsl r6
   12a54:	andeq	sl, r1, ip, lsl r8
   12a58:	andeq	sl, r1, r4, ror #16
   12a5c:	muleq	r1, ip, r8
   12a60:	andeq	sl, r1, r8, ror #17
   12a64:	andeq	sl, r1, r0, lsr r9
   12a68:	andeq	sl, r1, r8, ror r9
   12a6c:	andeq	sl, r1, r0, asr #19
   12a70:	andeq	sl, r1, ip, lsl #20
   12a74:	andeq	sl, r1, r8, asr #20
   12a78:	muleq	r1, r4, sl
   12a7c:	andeq	sl, r1, r0, ror #21
   12a80:	ldrdeq	sl, [r1], -r4
   12a84:			; <UNDEFINED> instruction: 0x0001acb4
   12a88:	andeq	sl, r1, r4, ror #25
   12a8c:	andeq	sl, r1, ip, lsl sp
   12a90:	andeq	sl, r1, ip, asr #15
   12a94:	andeq	sl, r1, r4, ror #27
   12a98:	strdeq	sl, [r1], -ip
   12a9c:	andeq	sl, r1, r4, lsr #28
   12aa0:	andeq	sl, r1, r4, lsr lr
   12aa4:	andeq	sl, r1, r0, lsl #29
   12aa8:	muleq	r1, ip, lr
   12aac:	andeq	sl, r1, r0, ror #25
   12ab0:	andeq	sl, r1, ip, lsl #31
   12ab4:	andeq	sl, r1, r8, lsr lr
   12ab8:	push	{r4, r5, r6, lr}
   12abc:	add	r2, r2, #8
   12ac0:	sub	r6, r3, #8
   12ac4:	ldr	lr, [pc, #528]	; 12cdc <__assert_fail@plt+0x1dac>
   12ac8:	mov	r5, #61	; 0x3d
   12acc:	b	12bbc <__assert_fail@plt+0x1c8c>
   12ad0:	ldrb	r4, [r0, #1]
   12ad4:	cmp	r3, #2
   12ad8:	add	ip, ip, r4, lsr #6
   12adc:	and	ip, ip, #31
   12ae0:	ldrb	ip, [lr, ip]
   12ae4:	strb	ip, [r2, #-7]
   12ae8:	beq	12cb0 <__assert_fail@plt+0x1d80>
   12aec:	lsr	ip, r4, #1
   12af0:	and	ip, ip, #31
   12af4:	cmp	r3, #3
   12af8:	ldrb	ip, [lr, ip]
   12afc:	strb	ip, [r2, #-6]
   12b00:	beq	12cbc <__assert_fail@plt+0x1d8c>
   12b04:	cmp	r1, #2
   12b08:	lsl	r4, r4, #4
   12b0c:	beq	12c54 <__assert_fail@plt+0x1d24>
   12b10:	ldrb	ip, [r0, #2]
   12b14:	cmp	r3, #4
   12b18:	add	r4, r4, ip, lsr #4
   12b1c:	and	r4, r4, #31
   12b20:	ldrb	r4, [lr, r4]
   12b24:	strb	r4, [r2, #-5]
   12b28:	beq	12cd0 <__assert_fail@plt+0x1da0>
   12b2c:	cmp	r1, #3
   12b30:	lsl	r4, ip, #1
   12b34:	beq	12c6c <__assert_fail@plt+0x1d3c>
   12b38:	ldrb	ip, [r0, #3]
   12b3c:	cmp	r3, #5
   12b40:	add	r4, r4, ip, lsr #7
   12b44:	and	r4, r4, #31
   12b48:	ldrb	r4, [lr, r4]
   12b4c:	strb	r4, [r2, #-4]
   12b50:	beq	12cd4 <__assert_fail@plt+0x1da4>
   12b54:	lsr	r4, ip, #2
   12b58:	and	r4, r4, #31
   12b5c:	cmp	r3, #6
   12b60:	ldrb	r4, [lr, r4]
   12b64:	strb	r4, [r2, #-3]
   12b68:	beq	12cc4 <__assert_fail@plt+0x1d94>
   12b6c:	cmp	r1, #4
   12b70:	lsl	ip, ip, #3
   12b74:	beq	12c84 <__assert_fail@plt+0x1d54>
   12b78:	ldrb	r4, [r0, #4]
   12b7c:	cmp	r3, #7
   12b80:	add	ip, ip, r4, lsr #5
   12b84:	and	ip, ip, #31
   12b88:	ldrb	ip, [lr, ip]
   12b8c:	strb	ip, [r2, #-2]
   12b90:	beq	12cd8 <__assert_fail@plt+0x1da8>
   12b94:	and	r4, r4, #31
   12b98:	cmp	r6, #0
   12b9c:	ldrb	ip, [lr, r4]
   12ba0:	strb	ip, [r2, #-1]
   12ba4:	beq	12ccc <__assert_fail@plt+0x1d9c>
   12ba8:	subs	r1, r1, #5
   12bac:	addne	r0, r0, #5
   12bb0:	sub	r3, r3, #8
   12bb4:	sub	r6, r6, #8
   12bb8:	add	r2, r2, #8
   12bbc:	cmp	r1, #0
   12bc0:	cmpne	r3, #0
   12bc4:	movne	r4, #1
   12bc8:	moveq	r4, #0
   12bcc:	beq	12c9c <__assert_fail@plt+0x1d6c>
   12bd0:	ldrb	ip, [r0]
   12bd4:	cmp	r3, #1
   12bd8:	ldrb	r4, [lr, ip, lsr #3]
   12bdc:	strb	r4, [r2, #-8]
   12be0:	popeq	{r4, r5, r6, pc}
   12be4:	cmp	r1, #1
   12be8:	lsl	ip, ip, #2
   12bec:	bne	12ad0 <__assert_fail@plt+0x1ba0>
   12bf0:	and	ip, ip, #31
   12bf4:	cmp	r3, #2
   12bf8:	ldrb	r1, [lr, ip]
   12bfc:	strb	r1, [r2, #-7]
   12c00:	beq	12cb4 <__assert_fail@plt+0x1d84>
   12c04:	cmp	r3, #3
   12c08:	strb	r5, [r2, #-6]
   12c0c:	beq	12cb8 <__assert_fail@plt+0x1d88>
   12c10:	cmp	r3, #4
   12c14:	strb	r5, [r2, #-5]
   12c18:	beq	12cc0 <__assert_fail@plt+0x1d90>
   12c1c:	cmp	r3, #5
   12c20:	strb	r5, [r2, #-4]
   12c24:	beq	12ca8 <__assert_fail@plt+0x1d78>
   12c28:	cmp	r3, #6
   12c2c:	strb	r5, [r2, #-3]
   12c30:	beq	12cac <__assert_fail@plt+0x1d7c>
   12c34:	cmp	r3, #7
   12c38:	strb	r5, [r2, #-2]
   12c3c:	beq	12cc8 <__assert_fail@plt+0x1d98>
   12c40:	cmp	r6, #0
   12c44:	strb	r5, [r2, #-1]
   12c48:	popeq	{r4, r5, r6, pc}
   12c4c:	mov	r1, #0
   12c50:	b	12bb0 <__assert_fail@plt+0x1c80>
   12c54:	and	r4, r4, #31
   12c58:	cmp	r3, #4
   12c5c:	ldrb	r1, [lr, r4]
   12c60:	strb	r1, [r2, #-5]
   12c64:	bne	12c1c <__assert_fail@plt+0x1cec>
   12c68:	pop	{r4, r5, r6, pc}
   12c6c:	and	ip, r4, #31
   12c70:	cmp	r3, #5
   12c74:	ldrb	r1, [lr, ip]
   12c78:	strb	r1, [r2, #-4]
   12c7c:	bne	12c28 <__assert_fail@plt+0x1cf8>
   12c80:	pop	{r4, r5, r6, pc}
   12c84:	and	ip, ip, #31
   12c88:	cmp	r3, #7
   12c8c:	ldrb	r1, [lr, ip]
   12c90:	strb	r1, [r2, #-2]
   12c94:	bne	12c40 <__assert_fail@plt+0x1d10>
   12c98:	pop	{r4, r5, r6, pc}
   12c9c:	cmp	r3, #0
   12ca0:	strbne	r4, [r2, #-8]
   12ca4:	pop	{r4, r5, r6, pc}
   12ca8:	pop	{r4, r5, r6, pc}
   12cac:	pop	{r4, r5, r6, pc}
   12cb0:	pop	{r4, r5, r6, pc}
   12cb4:	pop	{r4, r5, r6, pc}
   12cb8:	pop	{r4, r5, r6, pc}
   12cbc:	pop	{r4, r5, r6, pc}
   12cc0:	pop	{r4, r5, r6, pc}
   12cc4:	pop	{r4, r5, r6, pc}
   12cc8:	pop	{r4, r5, r6, pc}
   12ccc:	pop	{r4, r5, r6, pc}
   12cd0:	pop	{r4, r5, r6, pc}
   12cd4:	pop	{r4, r5, r6, pc}
   12cd8:	pop	{r4, r5, r6, pc}
   12cdc:	andeq	fp, r1, ip, ror r0
   12ce0:	ldr	r3, [pc, #168]	; 12d90 <__assert_fail@plt+0x1e60>
   12ce4:	push	{r4, r5, r6, r7, r8, lr}
   12ce8:	mov	r5, r1
   12cec:	smull	r3, r1, r3, r1
   12cf0:	asr	r3, r5, #31
   12cf4:	rsb	r3, r3, r1, asr #1
   12cf8:	mov	r6, r0
   12cfc:	add	r4, r3, r3, lsl #2
   12d00:	cmp	r5, r4
   12d04:	moveq	r4, r3
   12d08:	addne	r4, r3, #1
   12d0c:	cmp	r4, #0
   12d10:	mov	r7, r2
   12d14:	blt	12d64 <__assert_fail@plt+0x1e34>
   12d18:	cmn	r4, #-268435455	; 0xf0000001
   12d1c:	bgt	12d80 <__assert_fail@plt+0x1e50>
   12d20:	cmp	r5, #0
   12d24:	blt	12d80 <__assert_fail@plt+0x1e50>
   12d28:	lsl	r4, r4, #3
   12d2c:	add	r8, r4, #1
   12d30:	mov	r0, r8
   12d34:	bl	19b3c <__assert_fail@plt+0x8c0c>
   12d38:	cmp	r0, #0
   12d3c:	str	r0, [r7]
   12d40:	moveq	r4, r8
   12d44:	beq	12d88 <__assert_fail@plt+0x1e58>
   12d48:	mov	r2, r0
   12d4c:	mov	r3, r8
   12d50:	mov	r0, r6
   12d54:	mov	r1, r5
   12d58:	bl	12ab8 <__assert_fail@plt+0x1b88>
   12d5c:	mov	r0, r4
   12d60:	pop	{r4, r5, r6, r7, r8, pc}
   12d64:	cmn	r4, #1
   12d68:	beq	12d20 <__assert_fail@plt+0x1df0>
   12d6c:	mov	r1, r4
   12d70:	mov	r0, #-2147483648	; 0x80000000
   12d74:	bl	1a014 <__assert_fail@plt+0x90e4>
   12d78:	cmp	r0, #7
   12d7c:	bgt	12d20 <__assert_fail@plt+0x1df0>
   12d80:	mov	r4, #0
   12d84:	str	r4, [r7]
   12d88:	mov	r0, r4
   12d8c:	pop	{r4, r5, r6, r7, r8, pc}
   12d90:	strbtvs	r6, [r6], -r7, ror #12
   12d94:	ldr	r3, [pc, #16]	; 12dac <__assert_fail@plt+0x1e7c>
   12d98:	add	r0, r3, r0
   12d9c:	ldrb	r0, [r0, #32]
   12da0:	eor	r0, r0, #128	; 0x80
   12da4:	lsr	r0, r0, #7
   12da8:	bx	lr
   12dac:	andeq	fp, r1, ip, ror r0
   12db0:	mov	r3, #0
   12db4:	str	r3, [r0]
   12db8:	bx	lr
   12dbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dc0:	subs	sl, r0, #0
   12dc4:	sub	sp, sp, #20
   12dc8:	mov	r5, r3
   12dcc:	movne	r3, #1
   12dd0:	moveq	r3, #0
   12dd4:	str	r3, [sp, #4]
   12dd8:	ldr	r3, [sp, #56]	; 0x38
   12ddc:	mov	r4, r1
   12de0:	ldr	r8, [r3]
   12de4:	beq	132e8 <__assert_fail@plt+0x23b8>
   12de8:	adds	r3, r2, #0
   12dec:	ldr	fp, [sl]
   12df0:	movne	r3, #1
   12df4:	cmp	fp, #0
   12df8:	movne	fp, #0
   12dfc:	andeq	fp, r3, #1
   12e00:	ldr	r7, [pc, #1260]	; 132f4 <__assert_fail@plt+0x23c4>
   12e04:	add	r1, sl, #4
   12e08:	str	r1, [sp, #8]
   12e0c:	cmp	fp, #0
   12e10:	beq	12fac <__assert_fail@plt+0x207c>
   12e14:	cmp	r2, #7
   12e18:	ble	12fac <__assert_fail@plt+0x207c>
   12e1c:	ldrb	r1, [r4]
   12e20:	add	r1, r7, r1
   12e24:	ldrsb	r0, [r1, #32]
   12e28:	cmp	r0, #0
   12e2c:	blt	13080 <__assert_fail@plt+0x2150>
   12e30:	ldrb	r1, [r4, #1]
   12e34:	add	r1, r7, r1
   12e38:	ldrsb	r1, [r1, #32]
   12e3c:	cmp	r1, #0
   12e40:	bge	12e74 <__assert_fail@plt+0x1f44>
   12e44:	b	13080 <__assert_fail@plt+0x2150>
   12e48:	ldrb	r0, [r4, #8]
   12e4c:	add	r0, r7, r0
   12e50:	ldrsb	r0, [r0, #32]
   12e54:	cmp	r0, #0
   12e58:	blt	1307c <__assert_fail@plt+0x214c>
   12e5c:	ldrb	ip, [r1, #1]
   12e60:	mov	r4, r1
   12e64:	add	r1, r7, ip
   12e68:	ldrsb	r1, [r1, #32]
   12e6c:	cmp	r1, #0
   12e70:	blt	13080 <__assert_fail@plt+0x2150>
   12e74:	cmp	r8, #0
   12e78:	asrne	ip, r1, #2
   12e7c:	orrne	r0, ip, r0, lsl #3
   12e80:	strbne	r0, [r5]
   12e84:	ldrb	r0, [r4, #2]
   12e88:	addne	r5, r5, #1
   12e8c:	subne	ip, r8, #1
   12e90:	moveq	ip, r8
   12e94:	cmp	r0, #61	; 0x3d
   12e98:	beq	130d8 <__assert_fail@plt+0x21a8>
   12e9c:	add	r0, r7, r0
   12ea0:	ldrsb	lr, [r0, #32]
   12ea4:	cmp	lr, #0
   12ea8:	blt	13084 <__assert_fail@plt+0x2154>
   12eac:	ldrb	r0, [r4, #3]
   12eb0:	add	r0, r7, r0
   12eb4:	ldrsb	r0, [r0, #32]
   12eb8:	cmp	r0, #0
   12ebc:	blt	13084 <__assert_fail@plt+0x2154>
   12ec0:	cmp	ip, #0
   12ec4:	beq	12ee0 <__assert_fail@plt+0x1fb0>
   12ec8:	asr	r6, r0, #4
   12ecc:	orr	r1, r6, r1, lsl #6
   12ed0:	orr	lr, r1, lr, lsl #1
   12ed4:	strb	lr, [r5]
   12ed8:	sub	ip, ip, #1
   12edc:	add	r5, r5, #1
   12ee0:	ldrb	r1, [r4, #4]
   12ee4:	cmp	r1, #61	; 0x3d
   12ee8:	beq	130f0 <__assert_fail@plt+0x21c0>
   12eec:	add	r1, r7, r1
   12ef0:	ldrsb	lr, [r1, #32]
   12ef4:	cmp	lr, #0
   12ef8:	blt	13084 <__assert_fail@plt+0x2154>
   12efc:	cmp	ip, #0
   12f00:	asrne	r1, lr, #1
   12f04:	orrne	r0, r1, r0, lsl #4
   12f08:	ldrb	r1, [r4, #5]
   12f0c:	strbne	r0, [r5]
   12f10:	subne	ip, ip, #1
   12f14:	addne	r5, r5, #1
   12f18:	cmp	r1, #61	; 0x3d
   12f1c:	beq	130fc <__assert_fail@plt+0x21cc>
   12f20:	add	r1, r7, r1
   12f24:	ldrsb	r1, [r1, #32]
   12f28:	cmp	r1, #0
   12f2c:	blt	13084 <__assert_fail@plt+0x2154>
   12f30:	ldrb	r0, [r4, #6]
   12f34:	add	r0, r7, r0
   12f38:	ldrsb	r0, [r0, #32]
   12f3c:	cmp	r0, #0
   12f40:	blt	13084 <__assert_fail@plt+0x2154>
   12f44:	cmp	ip, #0
   12f48:	beq	12f64 <__assert_fail@plt+0x2034>
   12f4c:	lsl	r1, r1, #2
   12f50:	orr	lr, r1, lr, lsl #7
   12f54:	orr	lr, lr, r0, asr #3
   12f58:	strb	lr, [r5]
   12f5c:	sub	ip, ip, #1
   12f60:	add	r5, r5, #1
   12f64:	ldrb	r1, [r4, #7]
   12f68:	cmp	r1, #61	; 0x3d
   12f6c:	beq	13114 <__assert_fail@plt+0x21e4>
   12f70:	add	r1, r7, r1
   12f74:	ldrsb	r1, [r1, #32]
   12f78:	cmp	r1, #0
   12f7c:	blt	13084 <__assert_fail@plt+0x2154>
   12f80:	cmp	ip, #0
   12f84:	beq	13114 <__assert_fail@plt+0x21e4>
   12f88:	orr	r1, r1, r0, lsl #5
   12f8c:	strb	r1, [r5]
   12f90:	sub	r8, ip, #1
   12f94:	add	r5, r5, #1
   12f98:	sub	r2, r2, #8
   12f9c:	cmp	r2, #7
   12fa0:	add	r1, r4, #8
   12fa4:	bgt	12e48 <__assert_fail@plt+0x1f18>
   12fa8:	mov	r4, r1
   12fac:	cmp	r2, #0
   12fb0:	movne	r0, #0
   12fb4:	andeq	r0, r3, #1
   12fb8:	cmp	r0, #0
   12fbc:	mov	ip, r8
   12fc0:	bne	130bc <__assert_fail@plt+0x218c>
   12fc4:	cmp	r2, #0
   12fc8:	bne	13084 <__assert_fail@plt+0x2154>
   12fcc:	cmp	sl, #0
   12fd0:	beq	132e0 <__assert_fail@plt+0x23b0>
   12fd4:	mov	r9, r4
   12fd8:	ldr	r6, [sl]
   12fdc:	cmp	r6, #8
   12fe0:	moveq	r6, #0
   12fe4:	clzne	r1, r6
   12fe8:	moveq	r0, r6
   12fec:	lsrne	r1, r1, #5
   12ff0:	moveq	r1, #1
   12ff4:	streq	r0, [sl]
   12ff8:	cmp	r2, #7
   12ffc:	movle	r2, #0
   13000:	andgt	r2, r1, #1
   13004:	cmp	r2, #0
   13008:	beq	13034 <__assert_fail@plt+0x2104>
   1300c:	mov	r2, #8
   13010:	mov	r0, r4
   13014:	mov	r1, #10
   13018:	str	r3, [sp, #12]
   1301c:	bl	10e94 <memchr@plt>
   13020:	ldr	r3, [sp, #12]
   13024:	cmp	r0, #0
   13028:	moveq	r2, r4
   1302c:	addeq	r4, r4, #8
   13030:	beq	13120 <__assert_fail@plt+0x21f0>
   13034:	cmp	r9, r4
   13038:	bls	1306c <__assert_fail@plt+0x213c>
   1303c:	ldrb	r0, [r4], #1
   13040:	add	r1, r6, #1
   13044:	mov	r2, sl
   13048:	cmp	r0, #10
   1304c:	beq	13064 <__assert_fail@plt+0x2134>
   13050:	cmp	r1, #8
   13054:	str	r1, [r2], r6
   13058:	mov	r6, r1
   1305c:	strb	r0, [r2, #4]
   13060:	beq	1311c <__assert_fail@plt+0x21ec>
   13064:	cmp	r9, r4
   13068:	bne	1303c <__assert_fail@plt+0x210c>
   1306c:	cmp	r6, #0
   13070:	beq	132e0 <__assert_fail@plt+0x23b0>
   13074:	ldr	r2, [sp, #8]
   13078:	b	130ac <__assert_fail@plt+0x217c>
   1307c:	mov	r4, r1
   13080:	mov	ip, r8
   13084:	ldrb	r1, [r4]
   13088:	cmp	r1, #10
   1308c:	beq	1328c <__assert_fail@plt+0x235c>
   13090:	sub	ip, r8, ip
   13094:	cmp	sl, #0
   13098:	sub	r5, r5, ip
   1309c:	add	r9, r4, r2
   130a0:	bne	12fd8 <__assert_fail@plt+0x20a8>
   130a4:	mov	r6, r2
   130a8:	mov	r2, r4
   130ac:	cmp	r6, #7
   130b0:	bgt	13120 <__assert_fail@plt+0x21f0>
   130b4:	ldr	r0, [sp, #4]
   130b8:	and	r0, r0, r3
   130bc:	ldr	r3, [sp, #56]	; 0x38
   130c0:	ldr	r3, [r3]
   130c4:	sub	r8, r3, r8
   130c8:	ldr	r3, [sp, #56]	; 0x38
   130cc:	str	r8, [r3]
   130d0:	add	sp, sp, #20
   130d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130d8:	ldrb	r1, [r4, #3]
   130dc:	cmp	r1, #61	; 0x3d
   130e0:	bne	13084 <__assert_fail@plt+0x2154>
   130e4:	ldrb	r1, [r4, #4]
   130e8:	cmp	r1, #61	; 0x3d
   130ec:	bne	13084 <__assert_fail@plt+0x2154>
   130f0:	ldrb	r1, [r4, #5]
   130f4:	cmp	r1, #61	; 0x3d
   130f8:	bne	13084 <__assert_fail@plt+0x2154>
   130fc:	ldrb	r1, [r4, #6]
   13100:	cmp	r1, #61	; 0x3d
   13104:	bne	13084 <__assert_fail@plt+0x2154>
   13108:	ldrb	r1, [r4, #7]
   1310c:	cmp	r1, #61	; 0x3d
   13110:	bne	13084 <__assert_fail@plt+0x2154>
   13114:	mov	r8, ip
   13118:	b	12f98 <__assert_fail@plt+0x2068>
   1311c:	ldr	r2, [sp, #8]
   13120:	ldrb	r1, [r2]
   13124:	add	r1, r7, r1
   13128:	ldrsb	r0, [r1, #32]
   1312c:	cmp	r0, #0
   13130:	blt	13284 <__assert_fail@plt+0x2354>
   13134:	ldrb	r1, [r2, #1]
   13138:	add	r1, r7, r1
   1313c:	ldrsb	ip, [r1, #32]
   13140:	cmp	ip, #0
   13144:	blt	13284 <__assert_fail@plt+0x2354>
   13148:	cmp	r8, #0
   1314c:	asrne	r1, ip, #2
   13150:	orrne	r0, r1, r0, lsl #3
   13154:	ldrb	r1, [r2, #2]
   13158:	strbne	r0, [r5]
   1315c:	subne	r8, r8, #1
   13160:	addne	r5, r5, #1
   13164:	cmp	r1, #61	; 0x3d
   13168:	beq	1326c <__assert_fail@plt+0x233c>
   1316c:	add	r1, r7, r1
   13170:	ldrsb	r1, [r1, #32]
   13174:	cmp	r1, #0
   13178:	blt	13284 <__assert_fail@plt+0x2354>
   1317c:	ldrb	r0, [r2, #3]
   13180:	add	r0, r7, r0
   13184:	ldrsb	r0, [r0, #32]
   13188:	cmp	r0, #0
   1318c:	blt	13284 <__assert_fail@plt+0x2354>
   13190:	cmp	r8, #0
   13194:	beq	131b0 <__assert_fail@plt+0x2280>
   13198:	lsl	r1, r1, #1
   1319c:	orr	r1, r1, ip, lsl #6
   131a0:	orr	r1, r1, r0, asr #4
   131a4:	strb	r1, [r5]
   131a8:	sub	r8, r8, #1
   131ac:	add	r5, r5, #1
   131b0:	ldrb	r1, [r2, #4]
   131b4:	cmp	r1, #61	; 0x3d
   131b8:	beq	132a4 <__assert_fail@plt+0x2374>
   131bc:	add	r1, r7, r1
   131c0:	ldrsb	ip, [r1, #32]
   131c4:	cmp	ip, #0
   131c8:	blt	13284 <__assert_fail@plt+0x2354>
   131cc:	cmp	r8, #0
   131d0:	asrne	r1, ip, #1
   131d4:	orrne	r0, r1, r0, lsl #4
   131d8:	ldrb	r1, [r2, #5]
   131dc:	strbne	r0, [r5]
   131e0:	subne	r8, r8, #1
   131e4:	addne	r5, r5, #1
   131e8:	cmp	r1, #61	; 0x3d
   131ec:	beq	132b0 <__assert_fail@plt+0x2380>
   131f0:	add	r1, r7, r1
   131f4:	ldrsb	r1, [r1, #32]
   131f8:	cmp	r1, #0
   131fc:	blt	13284 <__assert_fail@plt+0x2354>
   13200:	ldrb	r0, [r2, #6]
   13204:	add	r0, r7, r0
   13208:	ldrsb	r0, [r0, #32]
   1320c:	cmp	r0, #0
   13210:	blt	13284 <__assert_fail@plt+0x2354>
   13214:	cmp	r8, #0
   13218:	beq	13234 <__assert_fail@plt+0x2304>
   1321c:	lsl	r1, r1, #2
   13220:	orr	r1, r1, ip, lsl #7
   13224:	orr	r1, r1, r0, asr #3
   13228:	strb	r1, [r5]
   1322c:	sub	r8, r8, #1
   13230:	add	r5, r5, #1
   13234:	ldrb	r2, [r2, #7]
   13238:	cmp	r2, #61	; 0x3d
   1323c:	beq	13264 <__assert_fail@plt+0x2334>
   13240:	add	r2, r7, r2
   13244:	ldrsb	r2, [r2, #32]
   13248:	cmp	r2, #0
   1324c:	blt	13284 <__assert_fail@plt+0x2354>
   13250:	cmp	r8, #0
   13254:	orrne	r2, r2, r0, lsl #5
   13258:	strbne	r2, [r5]
   1325c:	subne	r8, r8, #1
   13260:	addne	r5, r5, #1
   13264:	sub	r2, r9, r4
   13268:	b	12e0c <__assert_fail@plt+0x1edc>
   1326c:	ldrb	r1, [r2, #3]
   13270:	cmp	r1, #61	; 0x3d
   13274:	bne	13284 <__assert_fail@plt+0x2354>
   13278:	ldrb	r1, [r2, #4]
   1327c:	cmp	r1, #61	; 0x3d
   13280:	beq	132a4 <__assert_fail@plt+0x2374>
   13284:	mov	r0, #0
   13288:	b	130bc <__assert_fail@plt+0x218c>
   1328c:	cmp	sl, #0
   13290:	beq	132d0 <__assert_fail@plt+0x23a0>
   13294:	sub	r2, r2, #1
   13298:	mov	r8, ip
   1329c:	add	r4, r4, #1
   132a0:	b	12e0c <__assert_fail@plt+0x1edc>
   132a4:	ldrb	r1, [r2, #5]
   132a8:	cmp	r1, #61	; 0x3d
   132ac:	bne	13284 <__assert_fail@plt+0x2354>
   132b0:	ldrb	r1, [r2, #6]
   132b4:	cmp	r1, #61	; 0x3d
   132b8:	bne	13284 <__assert_fail@plt+0x2354>
   132bc:	ldrb	r2, [r2, #7]
   132c0:	cmp	r2, #61	; 0x3d
   132c4:	beq	13264 <__assert_fail@plt+0x2334>
   132c8:	mov	r0, #0
   132cc:	b	130bc <__assert_fail@plt+0x218c>
   132d0:	sub	ip, r8, ip
   132d4:	sub	r5, r5, ip
   132d8:	add	r9, r4, r2
   132dc:	b	130a4 <__assert_fail@plt+0x2174>
   132e0:	mov	r0, #1
   132e4:	b	130bc <__assert_fail@plt+0x218c>
   132e8:	mov	fp, #1
   132ec:	mov	r3, fp
   132f0:	b	12e00 <__assert_fail@plt+0x1ed0>
   132f4:	andeq	fp, r1, ip, ror r0
   132f8:	asr	ip, r2, #3
   132fc:	add	ip, ip, #1
   13300:	push	{r4, r5, r6, r7, r8, lr}
   13304:	add	ip, ip, ip, lsl #2
   13308:	sub	sp, sp, #16
   1330c:	mov	r7, r0
   13310:	mov	r0, ip
   13314:	mov	r5, r3
   13318:	mov	r4, r2
   1331c:	mov	r8, r1
   13320:	str	ip, [sp, #12]
   13324:	ldr	r6, [sp, #40]	; 0x28
   13328:	bl	19b3c <__assert_fail@plt+0x8c0c>
   1332c:	cmp	r0, #0
   13330:	str	r0, [r5]
   13334:	beq	13378 <__assert_fail@plt+0x2448>
   13338:	add	ip, sp, #12
   1333c:	mov	r3, r0
   13340:	mov	r2, r4
   13344:	mov	r1, r8
   13348:	mov	r0, r7
   1334c:	str	ip, [sp]
   13350:	bl	12dbc <__assert_fail@plt+0x1e8c>
   13354:	subs	r4, r0, #0
   13358:	beq	13388 <__assert_fail@plt+0x2458>
   1335c:	cmp	r6, #0
   13360:	beq	13378 <__assert_fail@plt+0x2448>
   13364:	ldr	r3, [sp, #12]
   13368:	mov	r0, r4
   1336c:	str	r3, [r6]
   13370:	add	sp, sp, #16
   13374:	pop	{r4, r5, r6, r7, r8, pc}
   13378:	mov	r4, #1
   1337c:	mov	r0, r4
   13380:	add	sp, sp, #16
   13384:	pop	{r4, r5, r6, r7, r8, pc}
   13388:	ldr	r0, [r5]
   1338c:	bl	13d58 <__assert_fail@plt+0x2e28>
   13390:	mov	r0, r4
   13394:	str	r4, [r5]
   13398:	add	sp, sp, #16
   1339c:	pop	{r4, r5, r6, r7, r8, pc}
   133a0:	tst	r3, #3
   133a4:	push	{r4, r5, r6, r7, lr}
   133a8:	mov	lr, r3
   133ac:	bne	133c0 <__assert_fail@plt+0x2490>
   133b0:	asr	ip, r3, #2
   133b4:	add	ip, ip, ip, lsl #1
   133b8:	cmp	r1, ip
   133bc:	beq	134dc <__assert_fail@plt+0x25ac>
   133c0:	sub	r3, r3, #4
   133c4:	add	r2, r2, #4
   133c8:	ldr	r5, [pc, #384]	; 13550 <__assert_fail@plt+0x2620>
   133cc:	mov	r6, #61	; 0x3d
   133d0:	b	13440 <__assert_fail@plt+0x2510>
   133d4:	ldrb	r4, [r0, #1]
   133d8:	cmp	lr, #2
   133dc:	add	ip, ip, r4, lsr #4
   133e0:	and	ip, ip, #63	; 0x3f
   133e4:	ldrb	ip, [r5, ip]
   133e8:	strb	ip, [r2, #-3]
   133ec:	beq	134d0 <__assert_fail@plt+0x25a0>
   133f0:	cmp	r1, #2
   133f4:	lsl	r4, r4, #2
   133f8:	beq	134a8 <__assert_fail@plt+0x2578>
   133fc:	ldrb	ip, [r0, #2]
   13400:	cmp	lr, #3
   13404:	add	r4, r4, ip, lsr #6
   13408:	and	r4, r4, #63	; 0x3f
   1340c:	ldrb	r4, [r5, r4]
   13410:	strb	r4, [r2, #-2]
   13414:	beq	1354c <__assert_fail@plt+0x261c>
   13418:	and	ip, ip, #63	; 0x3f
   1341c:	cmp	r3, #0
   13420:	ldrb	ip, [r5, ip]
   13424:	strb	ip, [r2, #-1]
   13428:	beq	134d8 <__assert_fail@plt+0x25a8>
   1342c:	subs	r1, r1, #3
   13430:	addne	r0, r0, #3
   13434:	sub	lr, lr, #4
   13438:	sub	r3, r3, #4
   1343c:	add	r2, r2, #4
   13440:	cmp	r1, #0
   13444:	cmpne	lr, #0
   13448:	movne	r4, #1
   1344c:	moveq	r4, #0
   13450:	beq	134c0 <__assert_fail@plt+0x2590>
   13454:	ldrb	ip, [r0]
   13458:	cmp	lr, #1
   1345c:	ldrb	r4, [r5, ip, lsr #2]
   13460:	strb	r4, [r2, #-4]
   13464:	popeq	{r4, r5, r6, r7, pc}
   13468:	cmp	r1, #1
   1346c:	lsl	ip, ip, #4
   13470:	bne	133d4 <__assert_fail@plt+0x24a4>
   13474:	and	ip, ip, #63	; 0x3f
   13478:	cmp	lr, #2
   1347c:	ldrb	r1, [r5, ip]
   13480:	strb	r1, [r2, #-3]
   13484:	beq	134cc <__assert_fail@plt+0x259c>
   13488:	cmp	lr, #3
   1348c:	strb	r6, [r2, #-2]
   13490:	beq	134d4 <__assert_fail@plt+0x25a4>
   13494:	cmp	r3, #0
   13498:	strb	r6, [r2, #-1]
   1349c:	popeq	{r4, r5, r6, r7, pc}
   134a0:	mov	r1, #0
   134a4:	b	13434 <__assert_fail@plt+0x2504>
   134a8:	and	r4, r4, #63	; 0x3f
   134ac:	cmp	lr, #3
   134b0:	ldrb	r1, [r5, r4]
   134b4:	strb	r1, [r2, #-2]
   134b8:	bne	13494 <__assert_fail@plt+0x2564>
   134bc:	pop	{r4, r5, r6, r7, pc}
   134c0:	cmp	lr, #0
   134c4:	strbne	r4, [r2, #-4]
   134c8:	pop	{r4, r5, r6, r7, pc}
   134cc:	pop	{r4, r5, r6, r7, pc}
   134d0:	pop	{r4, r5, r6, r7, pc}
   134d4:	pop	{r4, r5, r6, r7, pc}
   134d8:	pop	{r4, r5, r6, r7, pc}
   134dc:	cmp	r1, #0
   134e0:	popeq	{r4, r5, r6, r7, pc}
   134e4:	add	r3, r1, #3
   134e8:	ldr	lr, [pc, #96]	; 13550 <__assert_fail@plt+0x2620>
   134ec:	add	r3, r0, r3
   134f0:	add	r0, r0, #3
   134f4:	ldrb	r6, [r0, #-2]
   134f8:	ldrb	r4, [r0, #-1]
   134fc:	ldrb	r5, [r0, #-3]
   13500:	add	r0, r0, #3
   13504:	lsr	r1, r6, #4
   13508:	lsr	ip, r4, #6
   1350c:	add	r1, r1, r5, lsl #4
   13510:	add	ip, ip, r6, lsl #2
   13514:	and	r1, r1, #63	; 0x3f
   13518:	and	ip, ip, #63	; 0x3f
   1351c:	ldrb	r7, [lr, r1]
   13520:	and	r4, r4, #63	; 0x3f
   13524:	ldrb	r6, [lr, ip]
   13528:	ldrb	r1, [lr, r5, lsr #2]
   1352c:	ldrb	ip, [lr, r4]
   13530:	cmp	r0, r3
   13534:	orr	r1, r1, r7, lsl #8
   13538:	orr	r1, r1, r6, lsl #16
   1353c:	orr	r1, r1, ip, lsl #24
   13540:	str	r1, [r2], #4
   13544:	bne	134f4 <__assert_fail@plt+0x25c4>
   13548:	pop	{r4, r5, r6, r7, pc}
   1354c:	pop	{r4, r5, r6, r7, pc}
   13550:	muleq	r1, ip, r1
   13554:	ldr	r3, [pc, #164]	; 13600 <__assert_fail@plt+0x26d0>
   13558:	push	{r4, r5, r6, r7, r8, lr}
   1355c:	mov	r5, r1
   13560:	mov	r6, r0
   13564:	smull	r1, r3, r3, r5
   13568:	sub	r3, r3, r5, asr #31
   1356c:	mov	r7, r2
   13570:	add	r4, r3, r3, lsl #1
   13574:	cmp	r5, r4
   13578:	moveq	r4, r3
   1357c:	addne	r4, r3, #1
   13580:	cmp	r4, #0
   13584:	blt	135d4 <__assert_fail@plt+0x26a4>
   13588:	cmn	r4, #-536870911	; 0xe0000001
   1358c:	bgt	135f0 <__assert_fail@plt+0x26c0>
   13590:	cmp	r5, #0
   13594:	blt	135f0 <__assert_fail@plt+0x26c0>
   13598:	lsl	r4, r4, #2
   1359c:	add	r8, r4, #1
   135a0:	mov	r0, r8
   135a4:	bl	19b3c <__assert_fail@plt+0x8c0c>
   135a8:	cmp	r0, #0
   135ac:	str	r0, [r7]
   135b0:	moveq	r4, r8
   135b4:	beq	135f8 <__assert_fail@plt+0x26c8>
   135b8:	mov	r2, r0
   135bc:	mov	r3, r8
   135c0:	mov	r0, r6
   135c4:	mov	r1, r5
   135c8:	bl	133a0 <__assert_fail@plt+0x2470>
   135cc:	mov	r0, r4
   135d0:	pop	{r4, r5, r6, r7, r8, pc}
   135d4:	cmn	r4, #1
   135d8:	beq	13590 <__assert_fail@plt+0x2660>
   135dc:	mov	r1, r4
   135e0:	mov	r0, #-2147483648	; 0x80000000
   135e4:	bl	1a014 <__assert_fail@plt+0x90e4>
   135e8:	cmp	r0, #3
   135ec:	bne	13590 <__assert_fail@plt+0x2660>
   135f0:	mov	r4, #0
   135f4:	str	r4, [r7]
   135f8:	mov	r0, r4
   135fc:	pop	{r4, r5, r6, r7, r8, pc}
   13600:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   13604:	ldr	r3, [pc, #16]	; 1361c <__assert_fail@plt+0x26ec>
   13608:	add	r0, r3, r0
   1360c:	ldrb	r0, [r0, #64]	; 0x40
   13610:	eor	r0, r0, #128	; 0x80
   13614:	lsr	r0, r0, #7
   13618:	bx	lr
   1361c:	muleq	r1, ip, r1
   13620:	mov	r3, #0
   13624:	str	r3, [r0]
   13628:	bx	lr
   1362c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13630:	sub	sp, sp, #20
   13634:	mov	r5, r3
   13638:	ldr	r3, [sp, #56]	; 0x38
   1363c:	subs	sl, r0, #0
   13640:	mov	r4, r1
   13644:	movne	fp, #1
   13648:	moveq	fp, #0
   1364c:	ldr	r8, [r3]
   13650:	beq	13a4c <__assert_fail@plt+0x2b1c>
   13654:	adds	r1, r2, #0
   13658:	ldr	r3, [sl]
   1365c:	movne	r1, #1
   13660:	str	r1, [sp, #8]
   13664:	cmp	r3, #0
   13668:	movne	r1, #0
   1366c:	andeq	r1, r1, #1
   13670:	mov	r3, r1
   13674:	ldr	r1, [sp, #8]
   13678:	ldr	r7, [pc, #1000]	; 13a68 <__assert_fail@plt+0x2b38>
   1367c:	and	fp, fp, r1
   13680:	add	r1, sl, #4
   13684:	str	r1, [sp, #4]
   13688:	cmp	r3, #0
   1368c:	beq	13938 <__assert_fail@plt+0x2a08>
   13690:	cmp	r2, #1
   13694:	ble	13938 <__assert_fail@plt+0x2a08>
   13698:	ldrb	r1, [r4]
   1369c:	add	r1, r7, r1
   136a0:	ldrsb	r1, [r1, #64]	; 0x40
   136a4:	cmp	r1, #0
   136a8:	blt	13798 <__assert_fail@plt+0x2868>
   136ac:	ldrb	r0, [r4, #1]
   136b0:	add	r0, r7, r0
   136b4:	ldrsb	ip, [r0, #64]	; 0x40
   136b8:	cmp	ip, #0
   136bc:	bge	136dc <__assert_fail@plt+0x27ac>
   136c0:	b	13798 <__assert_fail@plt+0x2868>
   136c4:	ldrb	r0, [ip, #1]
   136c8:	mov	r4, ip
   136cc:	add	r0, r7, r0
   136d0:	ldrsb	ip, [r0, #64]	; 0x40
   136d4:	cmp	ip, #0
   136d8:	blt	13798 <__assert_fail@plt+0x2868>
   136dc:	cmp	r8, #0
   136e0:	asrne	r0, ip, #4
   136e4:	orrne	r1, r0, r1, lsl #2
   136e8:	strbne	r1, [r5]
   136ec:	moveq	r1, r8
   136f0:	addne	r5, r5, #1
   136f4:	subne	r1, r8, #1
   136f8:	cmp	r2, #2
   136fc:	beq	1379c <__assert_fail@plt+0x286c>
   13700:	ldrb	r0, [r4, #2]
   13704:	cmp	r0, #61	; 0x3d
   13708:	beq	1396c <__assert_fail@plt+0x2a3c>
   1370c:	add	r0, r7, r0
   13710:	ldrsb	lr, [r0, #64]	; 0x40
   13714:	cmp	lr, #0
   13718:	blt	1379c <__assert_fail@plt+0x286c>
   1371c:	cmp	r1, #0
   13720:	asrne	r0, lr, #2
   13724:	orrne	ip, r0, ip, lsl #4
   13728:	strbne	ip, [r5]
   1372c:	subne	r1, r1, #1
   13730:	addne	r5, r5, #1
   13734:	cmp	r2, #3
   13738:	beq	1379c <__assert_fail@plt+0x286c>
   1373c:	ldrb	r0, [r4, #3]
   13740:	cmp	r0, #61	; 0x3d
   13744:	beq	139dc <__assert_fail@plt+0x2aac>
   13748:	add	r0, r7, r0
   1374c:	ldrsb	r0, [r0, #64]	; 0x40
   13750:	cmp	r0, #0
   13754:	blt	1379c <__assert_fail@plt+0x286c>
   13758:	cmp	r1, #0
   1375c:	moveq	r8, r1
   13760:	orrne	lr, r0, lr, lsl #6
   13764:	strbne	lr, [r5]
   13768:	subne	r8, r1, #1
   1376c:	addne	r5, r5, #1
   13770:	sub	r2, r2, #4
   13774:	cmp	r2, #1
   13778:	add	ip, r4, #4
   1377c:	ble	13964 <__assert_fail@plt+0x2a34>
   13780:	ldrb	r1, [r4, #4]
   13784:	add	r1, r7, r1
   13788:	ldrsb	r1, [r1, #64]	; 0x40
   1378c:	cmp	r1, #0
   13790:	bge	136c4 <__assert_fail@plt+0x2794>
   13794:	mov	r4, ip
   13798:	mov	r1, r8
   1379c:	ldrb	r0, [r4]
   137a0:	cmp	r0, #10
   137a4:	beq	139f0 <__assert_fail@plt+0x2ac0>
   137a8:	sub	r1, r8, r1
   137ac:	cmp	sl, #0
   137b0:	sub	r5, r5, r1
   137b4:	add	r9, r4, r2
   137b8:	beq	13a10 <__assert_fail@plt+0x2ae0>
   137bc:	ldr	r6, [sl]
   137c0:	cmp	r6, #4
   137c4:	moveq	r6, #0
   137c8:	clzne	r1, r6
   137cc:	moveq	r0, r6
   137d0:	lsrne	r1, r1, #5
   137d4:	moveq	r1, #1
   137d8:	streq	r0, [sl]
   137dc:	cmp	r2, #3
   137e0:	movle	r2, #0
   137e4:	andgt	r2, r1, #1
   137e8:	cmp	r2, #0
   137ec:	beq	1381c <__assert_fail@plt+0x28ec>
   137f0:	mov	r1, #10
   137f4:	mov	r0, r4
   137f8:	mov	r2, #4
   137fc:	str	r3, [sp, #12]
   13800:	bl	10e94 <memchr@plt>
   13804:	ldr	r3, [sp, #12]
   13808:	cmp	r0, #0
   1380c:	moveq	r6, #4
   13810:	moveq	r1, r4
   13814:	addeq	r4, r4, r6
   13818:	beq	13878 <__assert_fail@plt+0x2948>
   1381c:	cmp	r4, r9
   13820:	bcs	13854 <__assert_fail@plt+0x2924>
   13824:	ldrb	r0, [r4], #1
   13828:	add	r1, r6, #1
   1382c:	mov	r2, sl
   13830:	cmp	r0, #10
   13834:	beq	1384c <__assert_fail@plt+0x291c>
   13838:	cmp	r1, #4
   1383c:	str	r1, [r2], r6
   13840:	mov	r6, r1
   13844:	strb	r0, [r2, #4]
   13848:	beq	13a1c <__assert_fail@plt+0x2aec>
   1384c:	cmp	r4, r9
   13850:	bne	13824 <__assert_fail@plt+0x28f4>
   13854:	cmp	r6, #0
   13858:	beq	13a44 <__assert_fail@plt+0x2b14>
   1385c:	ldr	r1, [sp, #4]
   13860:	cmp	r6, #3
   13864:	bgt	13878 <__assert_fail@plt+0x2948>
   13868:	cmp	fp, #0
   1386c:	bne	139bc <__assert_fail@plt+0x2a8c>
   13870:	cmp	r6, #1
   13874:	ble	139bc <__assert_fail@plt+0x2a8c>
   13878:	ldrb	r2, [r1]
   1387c:	add	r2, r7, r2
   13880:	ldrsb	r0, [r2, #64]	; 0x40
   13884:	cmp	r0, #0
   13888:	blt	139b8 <__assert_fail@plt+0x2a88>
   1388c:	ldrb	r2, [r1, #1]
   13890:	add	r2, r7, r2
   13894:	ldrsb	ip, [r2, #64]	; 0x40
   13898:	cmp	ip, #0
   1389c:	blt	139b8 <__assert_fail@plt+0x2a88>
   138a0:	cmp	r8, #0
   138a4:	asrne	r2, ip, #4
   138a8:	orrne	r0, r2, r0, lsl #2
   138ac:	strbne	r0, [r5]
   138b0:	subne	r8, r8, #1
   138b4:	addne	r5, r5, #1
   138b8:	cmp	r6, #2
   138bc:	beq	139b8 <__assert_fail@plt+0x2a88>
   138c0:	ldrb	r2, [r1, #2]
   138c4:	cmp	r2, #61	; 0x3d
   138c8:	beq	139b0 <__assert_fail@plt+0x2a80>
   138cc:	add	r2, r7, r2
   138d0:	ldrsb	r0, [r2, #64]	; 0x40
   138d4:	cmp	r0, #0
   138d8:	blt	139b8 <__assert_fail@plt+0x2a88>
   138dc:	cmp	r8, #0
   138e0:	asrne	r2, r0, #2
   138e4:	orrne	ip, r2, ip, lsl #4
   138e8:	strbne	ip, [r5]
   138ec:	subne	r8, r8, #1
   138f0:	addne	r5, r5, #1
   138f4:	cmp	r6, #3
   138f8:	beq	139b8 <__assert_fail@plt+0x2a88>
   138fc:	ldrb	r2, [r1, #3]
   13900:	cmp	r2, #61	; 0x3d
   13904:	beq	13a38 <__assert_fail@plt+0x2b08>
   13908:	add	r2, r7, r2
   1390c:	ldrsb	r2, [r2, #64]	; 0x40
   13910:	cmp	r2, #0
   13914:	blt	139b8 <__assert_fail@plt+0x2a88>
   13918:	cmp	r8, #0
   1391c:	orrne	r2, r2, r0, lsl #6
   13920:	strbne	r2, [r5]
   13924:	subne	r8, r8, #1
   13928:	addne	r5, r5, #1
   1392c:	cmp	r3, #0
   13930:	sub	r2, r9, r4
   13934:	bne	13690 <__assert_fail@plt+0x2760>
   13938:	ldr	r0, [sp, #8]
   1393c:	mov	r1, r8
   13940:	cmp	r2, #0
   13944:	movne	r0, #0
   13948:	andeq	r0, r0, #1
   1394c:	cmp	r0, #0
   13950:	bne	13a5c <__assert_fail@plt+0x2b2c>
   13954:	cmp	r2, #0
   13958:	moveq	r1, r8
   1395c:	beq	13990 <__assert_fail@plt+0x2a60>
   13960:	b	1379c <__assert_fail@plt+0x286c>
   13964:	mov	r4, ip
   13968:	b	13938 <__assert_fail@plt+0x2a08>
   1396c:	cmp	r2, #4
   13970:	bne	1379c <__assert_fail@plt+0x286c>
   13974:	ldrb	r0, [r4, #3]
   13978:	cmp	r0, #61	; 0x3d
   1397c:	bne	1379c <__assert_fail@plt+0x286c>
   13980:	ldr	r2, [sp, #8]
   13984:	add	r4, r4, #4
   13988:	cmp	r2, #0
   1398c:	bne	13a5c <__assert_fail@plt+0x2b2c>
   13990:	sub	r2, r1, r1
   13994:	cmp	sl, #0
   13998:	mov	r8, r1
   1399c:	sub	r5, r5, r2
   139a0:	beq	13a44 <__assert_fail@plt+0x2b14>
   139a4:	mov	r9, r4
   139a8:	mov	r2, #0
   139ac:	b	137bc <__assert_fail@plt+0x288c>
   139b0:	cmp	r6, #4
   139b4:	beq	13a28 <__assert_fail@plt+0x2af8>
   139b8:	mov	fp, #0
   139bc:	ldr	r3, [sp, #56]	; 0x38
   139c0:	mov	r0, fp
   139c4:	ldr	r3, [r3]
   139c8:	sub	r8, r3, r8
   139cc:	ldr	r3, [sp, #56]	; 0x38
   139d0:	str	r8, [r3]
   139d4:	add	sp, sp, #20
   139d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139dc:	cmp	r2, #4
   139e0:	beq	13980 <__assert_fail@plt+0x2a50>
   139e4:	ldrb	r0, [r4]
   139e8:	cmp	r0, #10
   139ec:	bne	137a8 <__assert_fail@plt+0x2878>
   139f0:	cmp	sl, #0
   139f4:	subne	r2, r2, #1
   139f8:	movne	r8, r1
   139fc:	addne	r4, r4, #1
   13a00:	bne	13688 <__assert_fail@plt+0x2758>
   13a04:	sub	r1, r8, r1
   13a08:	sub	r5, r5, r1
   13a0c:	add	r9, r4, r2
   13a10:	mov	r6, r2
   13a14:	mov	r1, r4
   13a18:	b	13860 <__assert_fail@plt+0x2930>
   13a1c:	mov	r6, #4
   13a20:	ldr	r1, [sp, #4]
   13a24:	b	13878 <__assert_fail@plt+0x2948>
   13a28:	ldrb	r2, [r1, #3]
   13a2c:	cmp	r2, #61	; 0x3d
   13a30:	bne	139b8 <__assert_fail@plt+0x2a88>
   13a34:	b	1392c <__assert_fail@plt+0x29fc>
   13a38:	cmp	r6, #4
   13a3c:	bne	139b8 <__assert_fail@plt+0x2a88>
   13a40:	b	1392c <__assert_fail@plt+0x29fc>
   13a44:	mov	fp, #1
   13a48:	b	139bc <__assert_fail@plt+0x2a8c>
   13a4c:	mov	r3, #1
   13a50:	str	r3, [sp, #8]
   13a54:	mov	r1, r3
   13a58:	b	13678 <__assert_fail@plt+0x2748>
   13a5c:	mov	r8, r1
   13a60:	mov	fp, #1
   13a64:	b	139bc <__assert_fail@plt+0x2a8c>
   13a68:	muleq	r1, ip, r1
   13a6c:	asr	ip, r2, #2
   13a70:	add	ip, ip, #1
   13a74:	push	{r4, r5, r6, r7, r8, lr}
   13a78:	add	ip, ip, ip, lsl #1
   13a7c:	sub	sp, sp, #16
   13a80:	mov	r7, r0
   13a84:	mov	r0, ip
   13a88:	mov	r5, r3
   13a8c:	mov	r4, r2
   13a90:	mov	r8, r1
   13a94:	str	ip, [sp, #12]
   13a98:	ldr	r6, [sp, #40]	; 0x28
   13a9c:	bl	19b3c <__assert_fail@plt+0x8c0c>
   13aa0:	cmp	r0, #0
   13aa4:	str	r0, [r5]
   13aa8:	beq	13aec <__assert_fail@plt+0x2bbc>
   13aac:	add	ip, sp, #12
   13ab0:	mov	r3, r0
   13ab4:	mov	r2, r4
   13ab8:	mov	r1, r8
   13abc:	mov	r0, r7
   13ac0:	str	ip, [sp]
   13ac4:	bl	1362c <__assert_fail@plt+0x26fc>
   13ac8:	subs	r4, r0, #0
   13acc:	beq	13afc <__assert_fail@plt+0x2bcc>
   13ad0:	cmp	r6, #0
   13ad4:	beq	13aec <__assert_fail@plt+0x2bbc>
   13ad8:	ldr	r3, [sp, #12]
   13adc:	mov	r0, r4
   13ae0:	str	r3, [r6]
   13ae4:	add	sp, sp, #16
   13ae8:	pop	{r4, r5, r6, r7, r8, pc}
   13aec:	mov	r4, #1
   13af0:	mov	r0, r4
   13af4:	add	sp, sp, #16
   13af8:	pop	{r4, r5, r6, r7, r8, pc}
   13afc:	ldr	r0, [r5]
   13b00:	bl	13d58 <__assert_fail@plt+0x2e28>
   13b04:	mov	r0, r4
   13b08:	str	r4, [r5]
   13b0c:	add	sp, sp, #16
   13b10:	pop	{r4, r5, r6, r7, r8, pc}
   13b14:	ldr	r3, [pc, #4]	; 13b20 <__assert_fail@plt+0x2bf0>
   13b18:	str	r0, [r3]
   13b1c:	bx	lr
   13b20:	andeq	ip, r2, r4, ror r1
   13b24:	ldr	r3, [pc, #4]	; 13b30 <__assert_fail@plt+0x2c00>
   13b28:	strb	r0, [r3, #4]
   13b2c:	bx	lr
   13b30:	andeq	ip, r2, r4, ror r1
   13b34:	ldr	r3, [pc, #192]	; 13bfc <__assert_fail@plt+0x2ccc>
   13b38:	push	{r4, r5, r6, lr}
   13b3c:	sub	sp, sp, #8
   13b40:	ldr	r0, [r3]
   13b44:	bl	19bc4 <__assert_fail@plt+0x8c94>
   13b48:	cmp	r0, #0
   13b4c:	beq	13b70 <__assert_fail@plt+0x2c40>
   13b50:	ldr	r4, [pc, #168]	; 13c00 <__assert_fail@plt+0x2cd0>
   13b54:	ldrb	r3, [r4, #4]
   13b58:	cmp	r3, #0
   13b5c:	beq	13b8c <__assert_fail@plt+0x2c5c>
   13b60:	bl	10e4c <__errno_location@plt>
   13b64:	ldr	r3, [r0]
   13b68:	cmp	r3, #32
   13b6c:	bne	13b8c <__assert_fail@plt+0x2c5c>
   13b70:	ldr	r3, [pc, #140]	; 13c04 <__assert_fail@plt+0x2cd4>
   13b74:	ldr	r0, [r3]
   13b78:	bl	19bc4 <__assert_fail@plt+0x8c94>
   13b7c:	cmp	r0, #0
   13b80:	bne	13bd4 <__assert_fail@plt+0x2ca4>
   13b84:	add	sp, sp, #8
   13b88:	pop	{r4, r5, r6, pc}
   13b8c:	mov	r2, #5
   13b90:	ldr	r1, [pc, #112]	; 13c08 <__assert_fail@plt+0x2cd8>
   13b94:	mov	r0, #0
   13b98:	bl	10d68 <dcgettext@plt>
   13b9c:	ldr	r4, [r4]
   13ba0:	cmp	r4, #0
   13ba4:	mov	r5, r0
   13ba8:	beq	13be0 <__assert_fail@plt+0x2cb0>
   13bac:	bl	10e4c <__errno_location@plt>
   13bb0:	ldr	r6, [r0]
   13bb4:	mov	r0, r4
   13bb8:	bl	16abc <__assert_fail@plt+0x5b8c>
   13bbc:	mov	r1, r6
   13bc0:	str	r5, [sp]
   13bc4:	ldr	r2, [pc, #64]	; 13c0c <__assert_fail@plt+0x2cdc>
   13bc8:	mov	r3, r0
   13bcc:	mov	r0, #0
   13bd0:	bl	10dd4 <error@plt>
   13bd4:	ldr	r3, [pc, #52]	; 13c10 <__assert_fail@plt+0x2ce0>
   13bd8:	ldr	r0, [r3]
   13bdc:	bl	10d20 <_exit@plt>
   13be0:	bl	10e4c <__errno_location@plt>
   13be4:	mov	r3, r5
   13be8:	ldr	r2, [pc, #36]	; 13c14 <__assert_fail@plt+0x2ce4>
   13bec:	ldr	r1, [r0]
   13bf0:	mov	r0, r4
   13bf4:	bl	10dd4 <error@plt>
   13bf8:	b	13bd4 <__assert_fail@plt+0x2ca4>
   13bfc:	andeq	ip, r2, r4, asr r1
   13c00:	andeq	ip, r2, r4, ror r1
   13c04:	andeq	ip, r2, r8, asr #2
   13c08:	andeq	sl, r1, r8, ror #30
   13c0c:	strdeq	sl, [r1], -ip
   13c10:	strdeq	ip, [r2], -r0
   13c14:	andeq	sl, r1, r0, lsl #30
   13c18:	push	{r4, r5}
   13c1c:	pop	{r4, r5}
   13c20:	b	10cf0 <posix_fadvise64@plt>
   13c24:	cmp	r0, #0
   13c28:	bxeq	lr
   13c2c:	push	{r4, lr}
   13c30:	sub	sp, sp, #16
   13c34:	mov	r4, r1
   13c38:	bl	10e7c <fileno@plt>
   13c3c:	mov	r2, #0
   13c40:	mov	r3, #0
   13c44:	str	r4, [sp, #8]
   13c48:	strd	r2, [sp]
   13c4c:	bl	10cf0 <posix_fadvise64@plt>
   13c50:	add	sp, sp, #16
   13c54:	pop	{r4, pc}
   13c58:	push	{r4, r5, lr}
   13c5c:	sub	sp, sp, #12
   13c60:	mov	r4, r0
   13c64:	bl	10e7c <fileno@plt>
   13c68:	cmp	r0, #0
   13c6c:	mov	r0, r4
   13c70:	blt	13cec <__assert_fail@plt+0x2dbc>
   13c74:	bl	10df8 <__freading@plt>
   13c78:	cmp	r0, #0
   13c7c:	bne	13cb8 <__assert_fail@plt+0x2d88>
   13c80:	mov	r0, r4
   13c84:	bl	13cf8 <__assert_fail@plt+0x2dc8>
   13c88:	cmp	r0, #0
   13c8c:	beq	13ce8 <__assert_fail@plt+0x2db8>
   13c90:	bl	10e4c <__errno_location@plt>
   13c94:	mov	r5, r0
   13c98:	mov	r0, r4
   13c9c:	ldr	r4, [r5]
   13ca0:	bl	10ea0 <fclose@plt>
   13ca4:	cmp	r4, #0
   13ca8:	mvnne	r0, #0
   13cac:	strne	r4, [r5]
   13cb0:	add	sp, sp, #12
   13cb4:	pop	{r4, r5, pc}
   13cb8:	mov	r0, r4
   13cbc:	bl	10e7c <fileno@plt>
   13cc0:	mov	r3, #1
   13cc4:	str	r3, [sp]
   13cc8:	mov	r2, #0
   13ccc:	mov	r3, #0
   13cd0:	bl	10da4 <lseek64@plt>
   13cd4:	mvn	r3, #0
   13cd8:	mvn	r2, #0
   13cdc:	cmp	r1, r3
   13ce0:	cmpeq	r0, r2
   13ce4:	bne	13c80 <__assert_fail@plt+0x2d50>
   13ce8:	mov	r0, r4
   13cec:	add	sp, sp, #12
   13cf0:	pop	{r4, r5, lr}
   13cf4:	b	10ea0 <fclose@plt>
   13cf8:	push	{r4, lr}
   13cfc:	subs	r4, r0, #0
   13d00:	sub	sp, sp, #8
   13d04:	beq	13d20 <__assert_fail@plt+0x2df0>
   13d08:	bl	10df8 <__freading@plt>
   13d0c:	cmp	r0, #0
   13d10:	beq	13d20 <__assert_fail@plt+0x2df0>
   13d14:	ldr	r3, [r4]
   13d18:	tst	r3, #256	; 0x100
   13d1c:	bne	13d30 <__assert_fail@plt+0x2e00>
   13d20:	mov	r0, r4
   13d24:	add	sp, sp, #8
   13d28:	pop	{r4, lr}
   13d2c:	b	10cfc <fflush@plt>
   13d30:	mov	r3, #1
   13d34:	str	r3, [sp]
   13d38:	mov	r2, #0
   13d3c:	mov	r3, #0
   13d40:	mov	r0, r4
   13d44:	bl	13db0 <__assert_fail@plt+0x2e80>
   13d48:	mov	r0, r4
   13d4c:	add	sp, sp, #8
   13d50:	pop	{r4, lr}
   13d54:	b	10cfc <fflush@plt>
   13d58:	push	{r4, r5, lr}
   13d5c:	sub	sp, sp, #12
   13d60:	mov	r5, r0
   13d64:	bl	10e4c <__errno_location@plt>
   13d68:	mov	r2, #0
   13d6c:	mov	r4, r0
   13d70:	ldr	r3, [r0]
   13d74:	str	r2, [r4]
   13d78:	mov	r0, r5
   13d7c:	str	r3, [sp]
   13d80:	str	r3, [sp, #4]
   13d84:	bl	10d14 <free@plt>
   13d88:	ldr	r3, [r4]
   13d8c:	add	r2, sp, #8
   13d90:	cmp	r3, #0
   13d94:	moveq	r3, #4
   13d98:	movne	r3, #0
   13d9c:	add	r3, r2, r3
   13da0:	ldr	r3, [r3, #-8]
   13da4:	str	r3, [r4]
   13da8:	add	sp, sp, #12
   13dac:	pop	{r4, r5, pc}
   13db0:	push	{r4, r5, r6, r7, r8, lr}
   13db4:	sub	sp, sp, #8
   13db8:	ldmib	r0, {ip, lr}
   13dbc:	mov	r4, r0
   13dc0:	ldr	r5, [sp, #32]
   13dc4:	cmp	lr, ip
   13dc8:	beq	13de0 <__assert_fail@plt+0x2eb0>
   13dcc:	str	r5, [sp, #32]
   13dd0:	mov	r0, r4
   13dd4:	add	sp, sp, #8
   13dd8:	pop	{r4, r5, r6, r7, r8, lr}
   13ddc:	b	10eac <fseeko64@plt>
   13de0:	ldr	lr, [r0, #20]
   13de4:	ldr	ip, [r0, #16]
   13de8:	cmp	lr, ip
   13dec:	bne	13dcc <__assert_fail@plt+0x2e9c>
   13df0:	ldr	r8, [r0, #36]	; 0x24
   13df4:	cmp	r8, #0
   13df8:	bne	13dcc <__assert_fail@plt+0x2e9c>
   13dfc:	mov	r6, r2
   13e00:	mov	r7, r3
   13e04:	bl	10e7c <fileno@plt>
   13e08:	mov	r2, r6
   13e0c:	mov	r3, r7
   13e10:	str	r5, [sp]
   13e14:	bl	10da4 <lseek64@plt>
   13e18:	mvn	r3, #0
   13e1c:	mvn	r2, #0
   13e20:	cmp	r1, r3
   13e24:	cmpeq	r0, r2
   13e28:	beq	13e48 <__assert_fail@plt+0x2f18>
   13e2c:	ldr	r3, [r4]
   13e30:	strd	r0, [r4, #80]	; 0x50
   13e34:	mov	r0, r8
   13e38:	bic	r3, r3, #16
   13e3c:	str	r3, [r4]
   13e40:	add	sp, sp, #8
   13e44:	pop	{r4, r5, r6, r7, r8, pc}
   13e48:	mvn	r0, #0
   13e4c:	b	13e40 <__assert_fail@plt+0x2f10>
   13e50:	push	{r4, r5, r6, lr}
   13e54:	subs	r4, r0, #0
   13e58:	beq	13ecc <__assert_fail@plt+0x2f9c>
   13e5c:	mov	r1, #47	; 0x2f
   13e60:	bl	10ed0 <strrchr@plt>
   13e64:	subs	r5, r0, #0
   13e68:	beq	13eb8 <__assert_fail@plt+0x2f88>
   13e6c:	add	r6, r5, #1
   13e70:	sub	r3, r6, r4
   13e74:	cmp	r3, #6
   13e78:	ble	13eb8 <__assert_fail@plt+0x2f88>
   13e7c:	mov	r2, #7
   13e80:	ldr	r1, [pc, #96]	; 13ee8 <__assert_fail@plt+0x2fb8>
   13e84:	sub	r0, r5, #6
   13e88:	bl	10f18 <strncmp@plt>
   13e8c:	cmp	r0, #0
   13e90:	bne	13eb8 <__assert_fail@plt+0x2f88>
   13e94:	mov	r2, #3
   13e98:	ldr	r1, [pc, #76]	; 13eec <__assert_fail@plt+0x2fbc>
   13e9c:	mov	r0, r6
   13ea0:	bl	10f18 <strncmp@plt>
   13ea4:	cmp	r0, #0
   13ea8:	movne	r4, r6
   13eac:	ldreq	r3, [pc, #60]	; 13ef0 <__assert_fail@plt+0x2fc0>
   13eb0:	addeq	r4, r5, #4
   13eb4:	streq	r4, [r3]
   13eb8:	ldr	r2, [pc, #52]	; 13ef4 <__assert_fail@plt+0x2fc4>
   13ebc:	ldr	r3, [pc, #52]	; 13ef8 <__assert_fail@plt+0x2fc8>
   13ec0:	str	r4, [r2]
   13ec4:	str	r4, [r3]
   13ec8:	pop	{r4, r5, r6, pc}
   13ecc:	ldr	r3, [pc, #40]	; 13efc <__assert_fail@plt+0x2fcc>
   13ed0:	mov	r2, #55	; 0x37
   13ed4:	mov	r1, #1
   13ed8:	ldr	r3, [r3]
   13edc:	ldr	r0, [pc, #28]	; 13f00 <__assert_fail@plt+0x2fd0>
   13ee0:	bl	10d98 <fwrite@plt>
   13ee4:	bl	10f24 <abort@plt>
   13ee8:	andeq	fp, r1, r4, lsl r3
   13eec:	andeq	fp, r1, ip, lsl r3
   13ef0:	andeq	ip, r2, r8, lsr r1
   13ef4:	andeq	ip, r2, ip, ror r1
   13ef8:	andeq	ip, r2, ip, lsr r1
   13efc:	andeq	ip, r2, r8, asr #2
   13f00:	ldrdeq	fp, [r1], -ip
   13f04:	push	{r4, r5, r6, lr}
   13f08:	mov	r4, r0
   13f0c:	mov	r5, r1
   13f10:	bl	19c40 <__assert_fail@plt+0x8d10>
   13f14:	ldrb	r3, [r0]
   13f18:	bic	r3, r3, #32
   13f1c:	cmp	r3, #85	; 0x55
   13f20:	bne	13f80 <__assert_fail@plt+0x3050>
   13f24:	ldrb	r3, [r0, #1]
   13f28:	bic	r3, r3, #32
   13f2c:	cmp	r3, #84	; 0x54
   13f30:	bne	13fbc <__assert_fail@plt+0x308c>
   13f34:	ldrb	r3, [r0, #2]
   13f38:	bic	r3, r3, #32
   13f3c:	cmp	r3, #70	; 0x46
   13f40:	bne	13fbc <__assert_fail@plt+0x308c>
   13f44:	ldrb	r3, [r0, #3]
   13f48:	cmp	r3, #45	; 0x2d
   13f4c:	bne	13fbc <__assert_fail@plt+0x308c>
   13f50:	ldrb	r3, [r0, #4]
   13f54:	cmp	r3, #56	; 0x38
   13f58:	bne	13fbc <__assert_fail@plt+0x308c>
   13f5c:	ldrb	r3, [r0, #5]
   13f60:	cmp	r3, #0
   13f64:	bne	13fbc <__assert_fail@plt+0x308c>
   13f68:	ldrb	r2, [r4]
   13f6c:	ldr	r3, [pc, #152]	; 1400c <__assert_fail@plt+0x30dc>
   13f70:	ldr	r0, [pc, #152]	; 14010 <__assert_fail@plt+0x30e0>
   13f74:	cmp	r2, #96	; 0x60
   13f78:	movne	r0, r3
   13f7c:	pop	{r4, r5, r6, pc}
   13f80:	cmp	r3, #71	; 0x47
   13f84:	bne	13fbc <__assert_fail@plt+0x308c>
   13f88:	ldrb	r3, [r0, #1]
   13f8c:	bic	r3, r3, #32
   13f90:	cmp	r3, #66	; 0x42
   13f94:	bne	13fbc <__assert_fail@plt+0x308c>
   13f98:	ldrb	r3, [r0, #2]
   13f9c:	cmp	r3, #49	; 0x31
   13fa0:	bne	13fbc <__assert_fail@plt+0x308c>
   13fa4:	ldrb	r3, [r0, #3]
   13fa8:	cmp	r3, #56	; 0x38
   13fac:	bne	13fbc <__assert_fail@plt+0x308c>
   13fb0:	ldrb	r3, [r0, #4]
   13fb4:	cmp	r3, #48	; 0x30
   13fb8:	beq	13fd0 <__assert_fail@plt+0x30a0>
   13fbc:	ldr	r3, [pc, #80]	; 14014 <__assert_fail@plt+0x30e4>
   13fc0:	cmp	r5, #9
   13fc4:	ldr	r0, [pc, #76]	; 14018 <__assert_fail@plt+0x30e8>
   13fc8:	movne	r0, r3
   13fcc:	pop	{r4, r5, r6, pc}
   13fd0:	ldrb	r3, [r0, #5]
   13fd4:	cmp	r3, #51	; 0x33
   13fd8:	bne	13fbc <__assert_fail@plt+0x308c>
   13fdc:	ldrb	r3, [r0, #6]
   13fe0:	cmp	r3, #48	; 0x30
   13fe4:	bne	13fbc <__assert_fail@plt+0x308c>
   13fe8:	ldrb	r3, [r0, #7]
   13fec:	cmp	r3, #0
   13ff0:	bne	13fbc <__assert_fail@plt+0x308c>
   13ff4:	ldrb	r2, [r4]
   13ff8:	ldr	r3, [pc, #28]	; 1401c <__assert_fail@plt+0x30ec>
   13ffc:	ldr	r0, [pc, #28]	; 14020 <__assert_fail@plt+0x30f0>
   14000:	cmp	r2, #96	; 0x60
   14004:	movne	r0, r3
   14008:	pop	{r4, r5, r6, pc}
   1400c:	andeq	fp, r1, r8, ror r3
   14010:	andeq	fp, r1, r4, ror r3
   14014:	andeq	fp, r1, r8, lsl #7
   14018:	andeq	fp, r1, r4, lsl #7
   1401c:	andeq	fp, r1, r0, lsl #7
   14020:	andeq	fp, r1, ip, ror r3
   14024:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14028:	sub	sp, sp, #140	; 0x8c
   1402c:	mov	r9, r1
   14030:	str	r3, [sp, #24]
   14034:	mov	r3, #1
   14038:	mov	sl, r0
   1403c:	str	r2, [sp, #44]	; 0x2c
   14040:	str	r3, [sp, #28]
   14044:	bl	10db0 <__ctype_get_mb_cur_max@plt>
   14048:	ldr	r3, [sp, #180]	; 0xb4
   1404c:	mov	fp, r9
   14050:	mov	r9, sl
   14054:	lsr	r3, r3, #1
   14058:	and	r3, r3, #1
   1405c:	str	r3, [sp, #40]	; 0x28
   14060:	ldr	r3, [sp, #180]	; 0xb4
   14064:	mov	r2, #0
   14068:	and	r3, r3, #4
   1406c:	str	r3, [sp, #100]	; 0x64
   14070:	ldr	r3, [sp, #180]	; 0xb4
   14074:	str	r2, [sp, #76]	; 0x4c
   14078:	and	r3, r3, #1
   1407c:	str	r3, [sp, #96]	; 0x60
   14080:	str	r2, [sp, #36]	; 0x24
   14084:	str	r2, [sp, #56]	; 0x38
   14088:	str	r2, [sp, #68]	; 0x44
   1408c:	str	r2, [sp, #72]	; 0x48
   14090:	str	r2, [sp, #84]	; 0x54
   14094:	str	r0, [sp, #80]	; 0x50
   14098:	ldr	r3, [sp, #176]	; 0xb0
   1409c:	cmp	r3, #10
   140a0:	ldrls	pc, [pc, r3, lsl #2]
   140a4:	b	1527c <__assert_fail@plt+0x434c>
   140a8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140ac:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140b0:	andeq	r4, r1, ip, asr #10
   140b4:	andeq	r4, r1, r8, lsr #8
   140b8:	andeq	r4, r1, r0, lsr #11
   140bc:	andeq	r4, r1, r0, lsl #11
   140c0:	andeq	r4, r1, r8, asr #8
   140c4:	andeq	r4, r1, ip, ror #8
   140c8:	muleq	r1, r4, r4
   140cc:	muleq	r1, r4, r4
   140d0:	muleq	r1, r4, r4
   140d4:	mov	r3, #0
   140d8:	ldr	r1, [sp, #56]	; 0x38
   140dc:	ldr	r2, [sp, #176]	; 0xb0
   140e0:	ldr	lr, [sp, #176]	; 0xb0
   140e4:	mov	r8, r3
   140e8:	mov	ip, r3
   140ec:	str	r3, [sp, #40]	; 0x28
   140f0:	mov	r3, r1
   140f4:	cmp	r2, #2
   140f8:	moveq	r3, #0
   140fc:	andne	r3, r3, #1
   14100:	mov	r0, r3
   14104:	str	r3, [sp, #92]	; 0x5c
   14108:	ldr	r3, [sp, #68]	; 0x44
   1410c:	sub	lr, lr, #2
   14110:	adds	r2, r3, #0
   14114:	movne	r2, #1
   14118:	and	r3, r1, ip
   1411c:	and	r3, r2, r3
   14120:	clz	lr, lr
   14124:	str	r3, [sp, #88]	; 0x58
   14128:	lsr	lr, lr, #5
   1412c:	mov	r3, ip
   14130:	and	r3, r3, lr
   14134:	mov	sl, #0
   14138:	and	r0, r2, r0
   1413c:	str	r3, [sp, #64]	; 0x40
   14140:	eor	r3, r1, #1
   14144:	str	lr, [sp, #52]	; 0x34
   14148:	str	r0, [sp, #48]	; 0x30
   1414c:	str	r3, [sp, #60]	; 0x3c
   14150:	ldr	r3, [sp, #24]
   14154:	cmn	r3, #1
   14158:	beq	14688 <__assert_fail@plt+0x3758>
   1415c:	subs	r7, r3, sl
   14160:	movne	r7, #1
   14164:	cmp	r7, #0
   14168:	beq	146a0 <__assert_fail@plt+0x3770>
   1416c:	ldr	r3, [sp, #48]	; 0x30
   14170:	cmp	r3, #0
   14174:	beq	14a0c <__assert_fail@plt+0x3adc>
   14178:	ldr	r2, [sp, #68]	; 0x44
   1417c:	ldr	r1, [sp, #24]
   14180:	cmp	r2, #1
   14184:	mov	r3, r2
   14188:	movls	r3, #0
   1418c:	movhi	r3, #1
   14190:	cmn	r1, #1
   14194:	movne	r3, #0
   14198:	cmp	r3, #0
   1419c:	add	r4, sl, r2
   141a0:	beq	141b0 <__assert_fail@plt+0x3280>
   141a4:	ldr	r0, [sp, #44]	; 0x2c
   141a8:	bl	10e34 <strlen@plt>
   141ac:	str	r0, [sp, #24]
   141b0:	ldr	r3, [sp, #24]
   141b4:	cmp	r3, r4
   141b8:	ldr	r3, [sp, #44]	; 0x2c
   141bc:	add	r5, r3, sl
   141c0:	bcc	14a14 <__assert_fail@plt+0x3ae4>
   141c4:	mov	r0, r5
   141c8:	ldr	r2, [sp, #68]	; 0x44
   141cc:	ldr	r1, [sp, #72]	; 0x48
   141d0:	bl	10d50 <memcmp@plt>
   141d4:	cmp	r0, #0
   141d8:	bne	14a14 <__assert_fail@plt+0x3ae4>
   141dc:	ldr	r3, [sp, #40]	; 0x28
   141e0:	cmp	r3, #0
   141e4:	bne	153d0 <__assert_fail@plt+0x44a0>
   141e8:	ldrb	r4, [r5]
   141ec:	cmp	r4, #126	; 0x7e
   141f0:	ldrls	pc, [pc, r4, lsl #2]
   141f4:	b	1530c <__assert_fail@plt+0x43dc>
   141f8:	andeq	r4, r1, ip, asr #17
   141fc:	andeq	r5, r1, ip, lsl #6
   14200:	andeq	r5, r1, ip, lsl #6
   14204:	andeq	r5, r1, ip, lsl #6
   14208:	andeq	r5, r1, ip, lsl #6
   1420c:	andeq	r5, r1, ip, lsl #6
   14210:	andeq	r5, r1, ip, lsl #6
   14214:			; <UNDEFINED> instruction: 0x000148b8
   14218:	andeq	r4, r1, r4, lsr #17
   1421c:	andeq	r4, r1, r0, lsl #17
   14220:	andeq	r4, r1, r0, ror #16
   14224:	muleq	r1, r0, r8
   14228:	andeq	r4, r1, r8, asr #15
   1422c:	strdeq	r4, [r1], -ip
   14230:	andeq	r5, r1, ip, lsl #6
   14234:	andeq	r5, r1, ip, lsl #6
   14238:	andeq	r5, r1, ip, lsl #6
   1423c:	andeq	r5, r1, ip, lsl #6
   14240:	andeq	r5, r1, ip, lsl #6
   14244:	andeq	r5, r1, ip, lsl #6
   14248:	andeq	r5, r1, ip, lsl #6
   1424c:	andeq	r5, r1, ip, lsl #6
   14250:	andeq	r5, r1, ip, lsl #6
   14254:	andeq	r5, r1, ip, lsl #6
   14258:	andeq	r5, r1, ip, lsl #6
   1425c:	andeq	r5, r1, ip, lsl #6
   14260:	andeq	r5, r1, ip, lsl #6
   14264:	andeq	r5, r1, ip, lsl #6
   14268:	andeq	r5, r1, ip, lsl #6
   1426c:	andeq	r5, r1, ip, lsl #6
   14270:	andeq	r5, r1, ip, lsl #6
   14274:	andeq	r5, r1, ip, lsl #6
   14278:	andeq	r4, r1, ip, ror #19
   1427c:	andeq	r4, r1, ip, asr #19
   14280:	andeq	r4, r1, ip, asr #19
   14284:	andeq	r4, r1, ip, lsr #19
   14288:	andeq	r4, r1, ip, asr #19
   1428c:			; <UNDEFINED> instruction: 0x000147b8
   14290:	andeq	r4, r1, ip, asr #19
   14294:	muleq	r1, r4, r7
   14298:	andeq	r4, r1, ip, asr #19
   1429c:	andeq	r4, r1, ip, asr #19
   142a0:	andeq	r4, r1, ip, asr #19
   142a4:			; <UNDEFINED> instruction: 0x000147b8
   142a8:			; <UNDEFINED> instruction: 0x000147b8
   142ac:			; <UNDEFINED> instruction: 0x000147b8
   142b0:			; <UNDEFINED> instruction: 0x000147b8
   142b4:			; <UNDEFINED> instruction: 0x000147b8
   142b8:			; <UNDEFINED> instruction: 0x000147b8
   142bc:			; <UNDEFINED> instruction: 0x000147b8
   142c0:			; <UNDEFINED> instruction: 0x000147b8
   142c4:			; <UNDEFINED> instruction: 0x000147b8
   142c8:			; <UNDEFINED> instruction: 0x000147b8
   142cc:			; <UNDEFINED> instruction: 0x000147b8
   142d0:			; <UNDEFINED> instruction: 0x000147b8
   142d4:			; <UNDEFINED> instruction: 0x000147b8
   142d8:			; <UNDEFINED> instruction: 0x000147b8
   142dc:			; <UNDEFINED> instruction: 0x000147b8
   142e0:			; <UNDEFINED> instruction: 0x000147b8
   142e4:	andeq	r4, r1, ip, asr #19
   142e8:	andeq	r4, r1, ip, asr #19
   142ec:	andeq	r4, r1, ip, asr #19
   142f0:	andeq	r4, r1, ip, asr #19
   142f4:	andeq	r4, r1, r4, asr #14
   142f8:	andeq	r5, r1, ip, lsl #6
   142fc:			; <UNDEFINED> instruction: 0x000147b8
   14300:			; <UNDEFINED> instruction: 0x000147b8
   14304:			; <UNDEFINED> instruction: 0x000147b8
   14308:			; <UNDEFINED> instruction: 0x000147b8
   1430c:			; <UNDEFINED> instruction: 0x000147b8
   14310:			; <UNDEFINED> instruction: 0x000147b8
   14314:			; <UNDEFINED> instruction: 0x000147b8
   14318:			; <UNDEFINED> instruction: 0x000147b8
   1431c:			; <UNDEFINED> instruction: 0x000147b8
   14320:			; <UNDEFINED> instruction: 0x000147b8
   14324:			; <UNDEFINED> instruction: 0x000147b8
   14328:			; <UNDEFINED> instruction: 0x000147b8
   1432c:			; <UNDEFINED> instruction: 0x000147b8
   14330:			; <UNDEFINED> instruction: 0x000147b8
   14334:			; <UNDEFINED> instruction: 0x000147b8
   14338:			; <UNDEFINED> instruction: 0x000147b8
   1433c:			; <UNDEFINED> instruction: 0x000147b8
   14340:			; <UNDEFINED> instruction: 0x000147b8
   14344:			; <UNDEFINED> instruction: 0x000147b8
   14348:			; <UNDEFINED> instruction: 0x000147b8
   1434c:			; <UNDEFINED> instruction: 0x000147b8
   14350:			; <UNDEFINED> instruction: 0x000147b8
   14354:			; <UNDEFINED> instruction: 0x000147b8
   14358:			; <UNDEFINED> instruction: 0x000147b8
   1435c:			; <UNDEFINED> instruction: 0x000147b8
   14360:			; <UNDEFINED> instruction: 0x000147b8
   14364:	andeq	r4, r1, ip, asr #19
   14368:	andeq	r4, r1, r0, lsl r7
   1436c:			; <UNDEFINED> instruction: 0x000147b8
   14370:	andeq	r4, r1, ip, asr #19
   14374:			; <UNDEFINED> instruction: 0x000147b8
   14378:	andeq	r4, r1, ip, asr #19
   1437c:			; <UNDEFINED> instruction: 0x000147b8
   14380:			; <UNDEFINED> instruction: 0x000147b8
   14384:			; <UNDEFINED> instruction: 0x000147b8
   14388:			; <UNDEFINED> instruction: 0x000147b8
   1438c:			; <UNDEFINED> instruction: 0x000147b8
   14390:			; <UNDEFINED> instruction: 0x000147b8
   14394:			; <UNDEFINED> instruction: 0x000147b8
   14398:			; <UNDEFINED> instruction: 0x000147b8
   1439c:			; <UNDEFINED> instruction: 0x000147b8
   143a0:			; <UNDEFINED> instruction: 0x000147b8
   143a4:			; <UNDEFINED> instruction: 0x000147b8
   143a8:			; <UNDEFINED> instruction: 0x000147b8
   143ac:			; <UNDEFINED> instruction: 0x000147b8
   143b0:			; <UNDEFINED> instruction: 0x000147b8
   143b4:			; <UNDEFINED> instruction: 0x000147b8
   143b8:			; <UNDEFINED> instruction: 0x000147b8
   143bc:			; <UNDEFINED> instruction: 0x000147b8
   143c0:			; <UNDEFINED> instruction: 0x000147b8
   143c4:			; <UNDEFINED> instruction: 0x000147b8
   143c8:			; <UNDEFINED> instruction: 0x000147b8
   143cc:			; <UNDEFINED> instruction: 0x000147b8
   143d0:			; <UNDEFINED> instruction: 0x000147b8
   143d4:			; <UNDEFINED> instruction: 0x000147b8
   143d8:			; <UNDEFINED> instruction: 0x000147b8
   143dc:			; <UNDEFINED> instruction: 0x000147b8
   143e0:			; <UNDEFINED> instruction: 0x000147b8
   143e4:	andeq	r4, r1, r8, asr #11
   143e8:	andeq	r4, r1, ip, asr #19
   143ec:	andeq	r4, r1, r8, asr #11
   143f0:	andeq	r4, r1, ip, lsr #19
   143f4:	mov	r3, #1
   143f8:	str	r3, [sp, #40]	; 0x28
   143fc:	str	r3, [sp, #68]	; 0x44
   14400:	mov	r8, #0
   14404:	ldr	r3, [pc, #4056]	; 153e4 <__assert_fail@plt+0x44b4>
   14408:	str	r3, [sp, #72]	; 0x48
   1440c:	mov	r3, #2
   14410:	str	r3, [sp, #176]	; 0xb0
   14414:	ldr	r1, [sp, #56]	; 0x38
   14418:	mov	r2, r3
   1441c:	ldr	ip, [sp, #40]	; 0x28
   14420:	mov	lr, r3
   14424:	b	140f0 <__assert_fail@plt+0x31c0>
   14428:	mov	r3, #1
   1442c:	str	r3, [sp, #56]	; 0x38
   14430:	str	r3, [sp, #68]	; 0x44
   14434:	str	r3, [sp, #40]	; 0x28
   14438:	ldr	r3, [pc, #4004]	; 153e4 <__assert_fail@plt+0x44b4>
   1443c:	mov	r8, #0
   14440:	str	r3, [sp, #72]	; 0x48
   14444:	b	1440c <__assert_fail@plt+0x34dc>
   14448:	mov	r3, #1
   1444c:	str	r3, [sp, #56]	; 0x38
   14450:	str	r3, [sp, #68]	; 0x44
   14454:	str	r3, [sp, #40]	; 0x28
   14458:	ldr	r3, [pc, #3976]	; 153e8 <__assert_fail@plt+0x44b8>
   1445c:	mov	r8, #0
   14460:	str	r3, [sp, #72]	; 0x48
   14464:	mov	r3, #5
   14468:	b	14410 <__assert_fail@plt+0x34e0>
   1446c:	mov	r3, #0
   14470:	str	r3, [sp, #40]	; 0x28
   14474:	mov	r3, #1
   14478:	str	r3, [sp, #56]	; 0x38
   1447c:	mov	r8, #0
   14480:	mov	r1, r3
   14484:	ldr	r2, [sp, #176]	; 0xb0
   14488:	ldr	ip, [sp, #40]	; 0x28
   1448c:	ldr	lr, [sp, #176]	; 0xb0
   14490:	b	140f0 <__assert_fail@plt+0x31c0>
   14494:	ldr	r3, [sp, #176]	; 0xb0
   14498:	cmp	r3, #10
   1449c:	beq	144e0 <__assert_fail@plt+0x35b0>
   144a0:	mov	r2, #5
   144a4:	ldr	r1, [pc, #3904]	; 153ec <__assert_fail@plt+0x44bc>
   144a8:	mov	r0, #0
   144ac:	bl	10d68 <dcgettext@plt>
   144b0:	ldr	r2, [pc, #3892]	; 153ec <__assert_fail@plt+0x44bc>
   144b4:	cmp	r0, r2
   144b8:	str	r0, [sp, #188]	; 0xbc
   144bc:	beq	15578 <__assert_fail@plt+0x4648>
   144c0:	mov	r2, #5
   144c4:	ldr	r1, [pc, #3864]	; 153e4 <__assert_fail@plt+0x44b4>
   144c8:	mov	r0, #0
   144cc:	bl	10d68 <dcgettext@plt>
   144d0:	ldr	r2, [pc, #3852]	; 153e4 <__assert_fail@plt+0x44b4>
   144d4:	cmp	r0, r2
   144d8:	str	r0, [sp, #192]	; 0xc0
   144dc:	beq	15568 <__assert_fail@plt+0x4638>
   144e0:	ldr	r8, [sp, #40]	; 0x28
   144e4:	cmp	r8, #0
   144e8:	movne	r8, #0
   144ec:	bne	1451c <__assert_fail@plt+0x35ec>
   144f0:	ldr	r3, [sp, #188]	; 0xbc
   144f4:	ldrb	r3, [r3]
   144f8:	cmp	r3, #0
   144fc:	beq	1451c <__assert_fail@plt+0x35ec>
   14500:	ldr	r2, [sp, #188]	; 0xbc
   14504:	cmp	fp, r8
   14508:	strbhi	r3, [r9, r8]
   1450c:	ldrb	r3, [r2, #1]!
   14510:	add	r8, r8, #1
   14514:	cmp	r3, #0
   14518:	bne	14504 <__assert_fail@plt+0x35d4>
   1451c:	ldr	r0, [sp, #192]	; 0xc0
   14520:	bl	10e34 <strlen@plt>
   14524:	ldr	r3, [sp, #192]	; 0xc0
   14528:	ldr	r2, [sp, #176]	; 0xb0
   1452c:	str	r3, [sp, #72]	; 0x48
   14530:	mov	r3, #1
   14534:	str	r3, [sp, #56]	; 0x38
   14538:	mov	r1, r3
   1453c:	ldr	ip, [sp, #40]	; 0x28
   14540:	ldr	lr, [sp, #176]	; 0xb0
   14544:	str	r0, [sp, #68]	; 0x44
   14548:	b	140f0 <__assert_fail@plt+0x31c0>
   1454c:	ldr	r3, [sp, #40]	; 0x28
   14550:	cmp	r3, #0
   14554:	beq	151fc <__assert_fail@plt+0x42cc>
   14558:	mov	r3, #1
   1455c:	str	r3, [sp, #68]	; 0x44
   14560:	ldr	r3, [pc, #3708]	; 153e4 <__assert_fail@plt+0x44b4>
   14564:	str	r3, [sp, #72]	; 0x48
   14568:	mov	r8, #0
   1456c:	ldr	r1, [sp, #56]	; 0x38
   14570:	ldr	r2, [sp, #176]	; 0xb0
   14574:	ldr	ip, [sp, #40]	; 0x28
   14578:	ldr	lr, [sp, #176]	; 0xb0
   1457c:	b	140f0 <__assert_fail@plt+0x31c0>
   14580:	ldr	r3, [sp, #40]	; 0x28
   14584:	cmp	r3, #0
   14588:	beq	15280 <__assert_fail@plt+0x4350>
   1458c:	str	r3, [sp, #56]	; 0x38
   14590:	mov	r3, #1
   14594:	str	r3, [sp, #68]	; 0x44
   14598:	ldr	r3, [pc, #3656]	; 153e8 <__assert_fail@plt+0x44b8>
   1459c:	b	14564 <__assert_fail@plt+0x3634>
   145a0:	ldr	r3, [sp, #40]	; 0x28
   145a4:	cmp	r3, #0
   145a8:	mov	r3, #1
   145ac:	streq	r3, [sp, #56]	; 0x38
   145b0:	beq	151fc <__assert_fail@plt+0x42cc>
   145b4:	str	r3, [sp, #68]	; 0x44
   145b8:	ldr	r3, [pc, #3620]	; 153e4 <__assert_fail@plt+0x44b4>
   145bc:	mov	r8, #0
   145c0:	str	r3, [sp, #72]	; 0x48
   145c4:	b	1440c <__assert_fail@plt+0x34dc>
   145c8:	ldr	r3, [sp, #24]
   145cc:	ldr	r6, [sp, #48]	; 0x30
   145d0:	cmn	r3, #1
   145d4:	beq	14c30 <__assert_fail@plt+0x3d00>
   145d8:	subs	r3, r3, #1
   145dc:	movne	r3, #1
   145e0:	cmp	r3, #0
   145e4:	beq	149b0 <__assert_fail@plt+0x3a80>
   145e8:	ldr	r1, [sp, #52]	; 0x34
   145ec:	mov	r7, r3
   145f0:	mov	r3, #0
   145f4:	str	r3, [sp, #32]
   145f8:	ldr	r3, [sp, #60]	; 0x3c
   145fc:	orr	r2, r1, r3
   14600:	ldr	r3, [sp, #40]	; 0x28
   14604:	eor	r2, r2, #1
   14608:	orr	r2, r3, r2
   1460c:	tst	r2, #255	; 0xff
   14610:	bne	14f34 <__assert_fail@plt+0x4004>
   14614:	cmp	r6, #0
   14618:	bne	147f4 <__assert_fail@plt+0x38c4>
   1461c:	ldr	r3, [sp, #36]	; 0x24
   14620:	add	sl, sl, #1
   14624:	and	r3, r3, r7
   14628:	uxtb	r6, r3
   1462c:	cmp	r6, #0
   14630:	beq	1465c <__assert_fail@plt+0x372c>
   14634:	cmp	fp, r8
   14638:	movhi	r3, #39	; 0x27
   1463c:	strbhi	r3, [r9, r8]
   14640:	add	r3, r8, #1
   14644:	cmp	fp, r3
   14648:	movhi	r2, #39	; 0x27
   1464c:	add	r8, r8, #2
   14650:	strbhi	r2, [r9, r3]
   14654:	mov	r3, #0
   14658:	str	r3, [sp, #36]	; 0x24
   1465c:	ldr	r2, [sp, #32]
   14660:	cmp	r8, fp
   14664:	ldr	r3, [sp, #28]
   14668:	strbcc	r4, [r9, r8]
   1466c:	cmp	r2, #0
   14670:	moveq	r3, #0
   14674:	str	r3, [sp, #28]
   14678:	ldr	r3, [sp, #24]
   1467c:	add	r8, r8, #1
   14680:	cmn	r3, #1
   14684:	bne	1415c <__assert_fail@plt+0x322c>
   14688:	ldr	r3, [sp, #44]	; 0x2c
   1468c:	ldrb	r3, [r3, sl]
   14690:	adds	r7, r3, #0
   14694:	movne	r7, #1
   14698:	cmp	r7, #0
   1469c:	bne	1416c <__assert_fail@plt+0x323c>
   146a0:	ldr	r3, [sp, #64]	; 0x40
   146a4:	cmp	r8, #0
   146a8:	movne	r3, #0
   146ac:	andeq	r3, r3, #1
   146b0:	cmp	r3, #0
   146b4:	str	r3, [sp, #64]	; 0x40
   146b8:	bne	1515c <__assert_fail@plt+0x422c>
   146bc:	ldr	r3, [sp, #40]	; 0x28
   146c0:	ldr	r2, [sp, #52]	; 0x34
   146c4:	eor	r3, r3, #1
   146c8:	ands	r2, r2, r3
   146cc:	beq	15588 <__assert_fail@plt+0x4658>
   146d0:	ldr	r3, [sp, #76]	; 0x4c
   146d4:	cmp	r3, #0
   146d8:	beq	15558 <__assert_fail@plt+0x4628>
   146dc:	ldr	r3, [sp, #28]
   146e0:	cmp	r3, #0
   146e4:	bne	15514 <__assert_fail@plt+0x45e4>
   146e8:	ldr	r2, [sp, #84]	; 0x54
   146ec:	clz	r3, fp
   146f0:	cmp	r2, #0
   146f4:	lsr	r3, r3, #5
   146f8:	moveq	r3, #0
   146fc:	cmp	r3, #0
   14700:	beq	154b4 <__assert_fail@plt+0x4584>
   14704:	mov	fp, r2
   14708:	str	r3, [sp, #76]	; 0x4c
   1470c:	b	14098 <__assert_fail@plt+0x3168>
   14710:	ldr	r3, [sp, #176]	; 0xb0
   14714:	ldr	r6, [sp, #48]	; 0x30
   14718:	cmp	r3, #2
   1471c:	beq	14c54 <__assert_fail@plt+0x3d24>
   14720:	ldr	r3, [sp, #88]	; 0x58
   14724:	cmp	r3, #0
   14728:	beq	151d8 <__assert_fail@plt+0x42a8>
   1472c:	mov	r3, #0
   14730:	add	sl, sl, #1
   14734:	ldr	r6, [sp, #36]	; 0x24
   14738:	str	r3, [sp, #32]
   1473c:	mov	r4, #92	; 0x5c
   14740:	b	1462c <__assert_fail@plt+0x36fc>
   14744:	ldr	r3, [sp, #176]	; 0xb0
   14748:	ldr	r6, [sp, #48]	; 0x30
   1474c:	cmp	r3, #2
   14750:	beq	14c84 <__assert_fail@plt+0x3d54>
   14754:	cmp	r3, #5
   14758:	bne	151e8 <__assert_fail@plt+0x42b8>
   1475c:	ldr	r3, [sp, #100]	; 0x64
   14760:	cmp	r3, #0
   14764:	beq	1524c <__assert_fail@plt+0x431c>
   14768:	ldr	r2, [sp, #24]
   1476c:	add	r3, sl, #2
   14770:	cmp	r2, r3
   14774:	bls	14784 <__assert_fail@plt+0x3854>
   14778:	ldrb	r4, [r5, #1]
   1477c:	cmp	r4, #63	; 0x3f
   14780:	beq	153f4 <__assert_fail@plt+0x44c4>
   14784:	mov	r1, #0
   14788:	str	r1, [sp, #32]
   1478c:	mov	r4, #63	; 0x3f
   14790:	b	145f8 <__assert_fail@plt+0x36c8>
   14794:	ldr	r3, [sp, #176]	; 0xb0
   14798:	ldr	r6, [sp, #48]	; 0x30
   1479c:	cmp	r3, #2
   147a0:	beq	14cb0 <__assert_fail@plt+0x3d80>
   147a4:	str	r7, [sp, #32]
   147a8:	str	r7, [sp, #76]	; 0x4c
   147ac:	mov	r1, #0
   147b0:	mov	r4, #39	; 0x27
   147b4:	b	145f8 <__assert_fail@plt+0x36c8>
   147b8:	ldr	r6, [sp, #48]	; 0x30
   147bc:	ldr	r1, [sp, #52]	; 0x34
   147c0:	str	r7, [sp, #32]
   147c4:	b	145f8 <__assert_fail@plt+0x36c8>
   147c8:	ldr	r6, [sp, #48]	; 0x30
   147cc:	ldr	r1, [sp, #52]	; 0x34
   147d0:	mov	r4, #12
   147d4:	mov	r3, #102	; 0x66
   147d8:	ldr	r2, [sp, #56]	; 0x38
   147dc:	cmp	r2, #0
   147e0:	streq	r2, [sp, #32]
   147e4:	beq	145f8 <__assert_fail@plt+0x36c8>
   147e8:	mov	r4, r3
   147ec:	mov	r3, #0
   147f0:	str	r3, [sp, #32]
   147f4:	ldr	r3, [sp, #40]	; 0x28
   147f8:	cmp	r3, #0
   147fc:	bne	14f6c <__assert_fail@plt+0x403c>
   14800:	ldr	r3, [sp, #36]	; 0x24
   14804:	eor	r3, r3, #1
   14808:	and	r3, r3, r1
   1480c:	ands	r3, r3, #255	; 0xff
   14810:	beq	14848 <__assert_fail@plt+0x3918>
   14814:	cmp	fp, r8
   14818:	movhi	r2, #39	; 0x27
   1481c:	strbhi	r2, [r9, r8]
   14820:	add	r2, r8, #1
   14824:	cmp	fp, r2
   14828:	movhi	r1, #36	; 0x24
   1482c:	strbhi	r1, [r9, r2]
   14830:	add	r2, r8, #2
   14834:	cmp	fp, r2
   14838:	add	r8, r8, #3
   1483c:	movhi	r1, #39	; 0x27
   14840:	strbhi	r1, [r9, r2]
   14844:	str	r3, [sp, #36]	; 0x24
   14848:	cmp	fp, r8
   1484c:	movhi	r3, #92	; 0x5c
   14850:	strbhi	r3, [r9, r8]
   14854:	add	sl, sl, #1
   14858:	add	r8, r8, #1
   1485c:	b	1465c <__assert_fail@plt+0x372c>
   14860:	ldr	r6, [sp, #48]	; 0x30
   14864:	mov	r4, #10
   14868:	mov	r3, #110	; 0x6e
   1486c:	ldr	r2, [sp, #64]	; 0x40
   14870:	cmp	r2, #0
   14874:	bne	152f4 <__assert_fail@plt+0x43c4>
   14878:	ldr	r1, [sp, #52]	; 0x34
   1487c:	b	147d8 <__assert_fail@plt+0x38a8>
   14880:	ldr	r6, [sp, #48]	; 0x30
   14884:	ldr	r1, [sp, #52]	; 0x34
   14888:	mov	r3, #116	; 0x74
   1488c:	b	147d8 <__assert_fail@plt+0x38a8>
   14890:	ldr	r6, [sp, #48]	; 0x30
   14894:	ldr	r1, [sp, #52]	; 0x34
   14898:	mov	r4, #11
   1489c:	mov	r3, #118	; 0x76
   148a0:	b	147d8 <__assert_fail@plt+0x38a8>
   148a4:	ldr	r6, [sp, #48]	; 0x30
   148a8:	ldr	r1, [sp, #52]	; 0x34
   148ac:	mov	r4, #8
   148b0:	mov	r3, #98	; 0x62
   148b4:	b	147d8 <__assert_fail@plt+0x38a8>
   148b8:	ldr	r6, [sp, #48]	; 0x30
   148bc:	ldr	r1, [sp, #52]	; 0x34
   148c0:	mov	r4, #7
   148c4:	mov	r3, #97	; 0x61
   148c8:	b	147d8 <__assert_fail@plt+0x38a8>
   148cc:	ldr	r3, [sp, #56]	; 0x38
   148d0:	ldr	r6, [sp, #48]	; 0x30
   148d4:	cmp	r3, #0
   148d8:	beq	14d9c <__assert_fail@plt+0x3e6c>
   148dc:	ldr	r3, [sp, #40]	; 0x28
   148e0:	cmp	r3, #0
   148e4:	bne	153d0 <__assert_fail@plt+0x44a0>
   148e8:	ldr	r3, [sp, #36]	; 0x24
   148ec:	ldr	r2, [sp, #52]	; 0x34
   148f0:	eor	r3, r3, #1
   148f4:	ands	r3, r2, r3
   148f8:	moveq	r2, r8
   148fc:	beq	14934 <__assert_fail@plt+0x3a04>
   14900:	cmp	fp, r8
   14904:	movhi	r2, #39	; 0x27
   14908:	strbhi	r2, [r9, r8]
   1490c:	add	r2, r8, #1
   14910:	cmp	fp, r2
   14914:	movhi	r1, #36	; 0x24
   14918:	strbhi	r1, [r9, r2]
   1491c:	add	r2, r8, #2
   14920:	cmp	fp, r2
   14924:	movhi	r1, #39	; 0x27
   14928:	strbhi	r1, [r9, r2]
   1492c:	add	r2, r8, #3
   14930:	str	r3, [sp, #36]	; 0x24
   14934:	cmp	fp, r2
   14938:	movhi	r3, #92	; 0x5c
   1493c:	strbhi	r3, [r9, r2]
   14940:	ldr	r3, [sp, #92]	; 0x5c
   14944:	add	r8, r2, #1
   14948:	cmp	r3, #0
   1494c:	beq	152d0 <__assert_fail@plt+0x43a0>
   14950:	ldr	r1, [sp, #24]
   14954:	add	r3, sl, #1
   14958:	cmp	r1, r3
   1495c:	bls	14994 <__assert_fail@plt+0x3a64>
   14960:	ldr	r1, [sp, #44]	; 0x2c
   14964:	ldrb	r3, [r1, r3]
   14968:	sub	r3, r3, #48	; 0x30
   1496c:	cmp	r3, #9
   14970:	bhi	14994 <__assert_fail@plt+0x3a64>
   14974:	cmp	fp, r8
   14978:	movhi	r3, #48	; 0x30
   1497c:	strbhi	r3, [r9, r8]
   14980:	add	r3, r2, #2
   14984:	cmp	fp, r3
   14988:	add	r8, r2, #3
   1498c:	movhi	r1, #48	; 0x30
   14990:	strbhi	r1, [r9, r3]
   14994:	ldr	r3, [sp, #40]	; 0x28
   14998:	ldr	r1, [sp, #52]	; 0x34
   1499c:	mov	r7, r3
   149a0:	str	r3, [sp, #32]
   149a4:	mov	r4, #48	; 0x30
   149a8:	b	145f8 <__assert_fail@plt+0x36c8>
   149ac:	ldr	r6, [sp, #48]	; 0x30
   149b0:	cmp	sl, #0
   149b4:	streq	r7, [sp, #32]
   149b8:	beq	149d8 <__assert_fail@plt+0x3aa8>
   149bc:	mov	r3, #0
   149c0:	ldr	r1, [sp, #52]	; 0x34
   149c4:	str	r3, [sp, #32]
   149c8:	b	145f8 <__assert_fail@plt+0x36c8>
   149cc:	ldr	r6, [sp, #48]	; 0x30
   149d0:	mov	r3, #0
   149d4:	str	r3, [sp, #32]
   149d8:	ldr	r3, [sp, #64]	; 0x40
   149dc:	cmp	r3, #0
   149e0:	bne	1515c <__assert_fail@plt+0x422c>
   149e4:	ldr	r1, [sp, #52]	; 0x34
   149e8:	b	145f8 <__assert_fail@plt+0x36c8>
   149ec:	ldr	r3, [sp, #48]	; 0x30
   149f0:	mov	r6, r3
   149f4:	str	r3, [sp, #32]
   149f8:	b	149d8 <__assert_fail@plt+0x3aa8>
   149fc:	ldr	r6, [sp, #48]	; 0x30
   14a00:	mov	r4, #13
   14a04:	mov	r3, #114	; 0x72
   14a08:	b	1486c <__assert_fail@plt+0x393c>
   14a0c:	ldr	r3, [sp, #44]	; 0x2c
   14a10:	add	r5, r3, sl
   14a14:	ldrb	r4, [r5]
   14a18:	cmp	r4, #126	; 0x7e
   14a1c:	ldrls	pc, [pc, r4, lsl #2]
   14a20:	b	14dbc <__assert_fail@plt+0x3e8c>
   14a24:	andeq	r4, r1, ip, lsl #27
   14a28:			; <UNDEFINED> instruction: 0x00014dbc
   14a2c:			; <UNDEFINED> instruction: 0x00014dbc
   14a30:			; <UNDEFINED> instruction: 0x00014dbc
   14a34:			; <UNDEFINED> instruction: 0x00014dbc
   14a38:			; <UNDEFINED> instruction: 0x00014dbc
   14a3c:			; <UNDEFINED> instruction: 0x00014dbc
   14a40:	andeq	r4, r1, r4, lsl #27
   14a44:	andeq	r4, r1, ip, ror sp
   14a48:	andeq	r4, r1, r0, ror sp
   14a4c:	andeq	r4, r1, r8, ror #26
   14a50:	andeq	r4, r1, r0, ror #26
   14a54:	andeq	r4, r1, r8, asr sp
   14a58:	andeq	r4, r1, r0, asr sp
   14a5c:			; <UNDEFINED> instruction: 0x00014dbc
   14a60:			; <UNDEFINED> instruction: 0x00014dbc
   14a64:			; <UNDEFINED> instruction: 0x00014dbc
   14a68:			; <UNDEFINED> instruction: 0x00014dbc
   14a6c:			; <UNDEFINED> instruction: 0x00014dbc
   14a70:			; <UNDEFINED> instruction: 0x00014dbc
   14a74:			; <UNDEFINED> instruction: 0x00014dbc
   14a78:			; <UNDEFINED> instruction: 0x00014dbc
   14a7c:			; <UNDEFINED> instruction: 0x00014dbc
   14a80:			; <UNDEFINED> instruction: 0x00014dbc
   14a84:			; <UNDEFINED> instruction: 0x00014dbc
   14a88:			; <UNDEFINED> instruction: 0x00014dbc
   14a8c:			; <UNDEFINED> instruction: 0x00014dbc
   14a90:			; <UNDEFINED> instruction: 0x00014dbc
   14a94:			; <UNDEFINED> instruction: 0x00014dbc
   14a98:			; <UNDEFINED> instruction: 0x00014dbc
   14a9c:			; <UNDEFINED> instruction: 0x00014dbc
   14aa0:			; <UNDEFINED> instruction: 0x00014dbc
   14aa4:	andeq	r4, r1, r4, asr #26
   14aa8:	andeq	r4, r1, ip, lsr sp
   14aac:	andeq	r4, r1, ip, lsr sp
   14ab0:	andeq	r4, r1, r4, lsr sp
   14ab4:	andeq	r4, r1, ip, lsr sp
   14ab8:	andeq	r4, r1, ip, lsr #26
   14abc:	andeq	r4, r1, ip, lsr sp
   14ac0:	andeq	r4, r1, r0, lsr #25
   14ac4:	andeq	r4, r1, ip, lsr sp
   14ac8:	andeq	r4, r1, ip, lsr sp
   14acc:	andeq	r4, r1, ip, lsr sp
   14ad0:	andeq	r4, r1, ip, lsr #26
   14ad4:	andeq	r4, r1, ip, lsr #26
   14ad8:	andeq	r4, r1, ip, lsr #26
   14adc:	andeq	r4, r1, ip, lsr #26
   14ae0:	andeq	r4, r1, ip, lsr #26
   14ae4:	andeq	r4, r1, ip, lsr #26
   14ae8:	andeq	r4, r1, ip, lsr #26
   14aec:	andeq	r4, r1, ip, lsr #26
   14af0:	andeq	r4, r1, ip, lsr #26
   14af4:	andeq	r4, r1, ip, lsr #26
   14af8:	andeq	r4, r1, ip, lsr #26
   14afc:	andeq	r4, r1, ip, lsr #26
   14b00:	andeq	r4, r1, ip, lsr #26
   14b04:	andeq	r4, r1, ip, lsr #26
   14b08:	andeq	r4, r1, ip, lsr #26
   14b0c:	andeq	r4, r1, ip, lsr #26
   14b10:	andeq	r4, r1, ip, lsr sp
   14b14:	andeq	r4, r1, ip, lsr sp
   14b18:	andeq	r4, r1, ip, lsr sp
   14b1c:	andeq	r4, r1, ip, lsr sp
   14b20:	andeq	r4, r1, r4, ror ip
   14b24:			; <UNDEFINED> instruction: 0x00014dbc
   14b28:	andeq	r4, r1, ip, lsr #26
   14b2c:	andeq	r4, r1, ip, lsr #26
   14b30:	andeq	r4, r1, ip, lsr #26
   14b34:	andeq	r4, r1, ip, lsr #26
   14b38:	andeq	r4, r1, ip, lsr #26
   14b3c:	andeq	r4, r1, ip, lsr #26
   14b40:	andeq	r4, r1, ip, lsr #26
   14b44:	andeq	r4, r1, ip, lsr #26
   14b48:	andeq	r4, r1, ip, lsr #26
   14b4c:	andeq	r4, r1, ip, lsr #26
   14b50:	andeq	r4, r1, ip, lsr #26
   14b54:	andeq	r4, r1, ip, lsr #26
   14b58:	andeq	r4, r1, ip, lsr #26
   14b5c:	andeq	r4, r1, ip, lsr #26
   14b60:	andeq	r4, r1, ip, lsr #26
   14b64:	andeq	r4, r1, ip, lsr #26
   14b68:	andeq	r4, r1, ip, lsr #26
   14b6c:	andeq	r4, r1, ip, lsr #26
   14b70:	andeq	r4, r1, ip, lsr #26
   14b74:	andeq	r4, r1, ip, lsr #26
   14b78:	andeq	r4, r1, ip, lsr #26
   14b7c:	andeq	r4, r1, ip, lsr #26
   14b80:	andeq	r4, r1, ip, lsr #26
   14b84:	andeq	r4, r1, ip, lsr #26
   14b88:	andeq	r4, r1, ip, lsr #26
   14b8c:	andeq	r4, r1, ip, lsr #26
   14b90:	andeq	r4, r1, ip, lsr sp
   14b94:	andeq	r4, r1, r4, asr #24
   14b98:	andeq	r4, r1, ip, lsr #26
   14b9c:	andeq	r4, r1, ip, lsr sp
   14ba0:	andeq	r4, r1, ip, lsr #26
   14ba4:	andeq	r4, r1, ip, lsr sp
   14ba8:	andeq	r4, r1, ip, lsr #26
   14bac:	andeq	r4, r1, ip, lsr #26
   14bb0:	andeq	r4, r1, ip, lsr #26
   14bb4:	andeq	r4, r1, ip, lsr #26
   14bb8:	andeq	r4, r1, ip, lsr #26
   14bbc:	andeq	r4, r1, ip, lsr #26
   14bc0:	andeq	r4, r1, ip, lsr #26
   14bc4:	andeq	r4, r1, ip, lsr #26
   14bc8:	andeq	r4, r1, ip, lsr #26
   14bcc:	andeq	r4, r1, ip, lsr #26
   14bd0:	andeq	r4, r1, ip, lsr #26
   14bd4:	andeq	r4, r1, ip, lsr #26
   14bd8:	andeq	r4, r1, ip, lsr #26
   14bdc:	andeq	r4, r1, ip, lsr #26
   14be0:	andeq	r4, r1, ip, lsr #26
   14be4:	andeq	r4, r1, ip, lsr #26
   14be8:	andeq	r4, r1, ip, lsr #26
   14bec:	andeq	r4, r1, ip, lsr #26
   14bf0:	andeq	r4, r1, ip, lsr #26
   14bf4:	andeq	r4, r1, ip, lsr #26
   14bf8:	andeq	r4, r1, ip, lsr #26
   14bfc:	andeq	r4, r1, ip, lsr #26
   14c00:	andeq	r4, r1, ip, lsr #26
   14c04:	andeq	r4, r1, ip, lsr #26
   14c08:	andeq	r4, r1, ip, lsr #26
   14c0c:	andeq	r4, r1, ip, lsr #26
   14c10:	andeq	r4, r1, r0, lsr #24
   14c14:	andeq	r4, r1, ip, lsr sp
   14c18:	andeq	r4, r1, r0, lsr #24
   14c1c:	andeq	r4, r1, r4, lsr sp
   14c20:	ldr	r3, [sp, #24]
   14c24:	mov	r6, #0
   14c28:	cmn	r3, #1
   14c2c:	bne	145d8 <__assert_fail@plt+0x36a8>
   14c30:	ldr	r3, [sp, #44]	; 0x2c
   14c34:	ldrb	r3, [r3, #1]
   14c38:	adds	r3, r3, #0
   14c3c:	movne	r3, #1
   14c40:	b	145e0 <__assert_fail@plt+0x36b0>
   14c44:	ldr	r3, [sp, #176]	; 0xb0
   14c48:	mov	r6, #0
   14c4c:	cmp	r3, #2
   14c50:	bne	14720 <__assert_fail@plt+0x37f0>
   14c54:	ldr	r3, [sp, #64]	; 0x40
   14c58:	cmp	r3, #0
   14c5c:	bne	15494 <__assert_fail@plt+0x4564>
   14c60:	add	sl, sl, #1
   14c64:	ldr	r6, [sp, #36]	; 0x24
   14c68:	str	r3, [sp, #32]
   14c6c:	mov	r4, #92	; 0x5c
   14c70:	b	1462c <__assert_fail@plt+0x36fc>
   14c74:	ldr	r3, [sp, #176]	; 0xb0
   14c78:	mov	r6, #0
   14c7c:	cmp	r3, #2
   14c80:	bne	14754 <__assert_fail@plt+0x3824>
   14c84:	ldr	r3, [sp, #40]	; 0x28
   14c88:	cmp	r3, #0
   14c8c:	bne	14f70 <__assert_fail@plt+0x4040>
   14c90:	mov	r1, r7
   14c94:	str	r3, [sp, #32]
   14c98:	mov	r4, #63	; 0x3f
   14c9c:	b	145f8 <__assert_fail@plt+0x36c8>
   14ca0:	ldr	r3, [sp, #176]	; 0xb0
   14ca4:	mov	r6, #0
   14ca8:	cmp	r3, #2
   14cac:	bne	147a4 <__assert_fail@plt+0x3874>
   14cb0:	ldr	r3, [sp, #64]	; 0x40
   14cb4:	cmp	r3, #0
   14cb8:	bne	15494 <__assert_fail@plt+0x4564>
   14cbc:	ldr	r2, [sp, #84]	; 0x54
   14cc0:	adds	r3, fp, #0
   14cc4:	movne	r3, #1
   14cc8:	cmp	r2, #0
   14ccc:	movne	r3, #0
   14cd0:	cmp	r3, #0
   14cd4:	strne	fp, [sp, #84]	; 0x54
   14cd8:	movne	fp, #0
   14cdc:	bne	14d0c <__assert_fail@plt+0x3ddc>
   14ce0:	cmp	fp, r8
   14ce4:	movhi	r3, #39	; 0x27
   14ce8:	strbhi	r3, [r9, r8]
   14cec:	add	r3, r8, #1
   14cf0:	cmp	fp, r3
   14cf4:	movhi	r2, #92	; 0x5c
   14cf8:	strbhi	r2, [r9, r3]
   14cfc:	add	r3, r8, #2
   14d00:	cmp	fp, r3
   14d04:	movhi	r2, #39	; 0x27
   14d08:	strbhi	r2, [r9, r3]
   14d0c:	ldr	r3, [sp, #64]	; 0x40
   14d10:	add	r8, r8, #3
   14d14:	mov	r1, r7
   14d18:	str	r7, [sp, #32]
   14d1c:	str	r7, [sp, #76]	; 0x4c
   14d20:	str	r3, [sp, #36]	; 0x24
   14d24:	mov	r4, #39	; 0x27
   14d28:	b	145f8 <__assert_fail@plt+0x36c8>
   14d2c:	mov	r6, #0
   14d30:	b	147bc <__assert_fail@plt+0x388c>
   14d34:	mov	r6, #0
   14d38:	b	149b0 <__assert_fail@plt+0x3a80>
   14d3c:	mov	r6, #0
   14d40:	b	149d0 <__assert_fail@plt+0x3aa0>
   14d44:	str	r7, [sp, #32]
   14d48:	mov	r6, #0
   14d4c:	b	149d8 <__assert_fail@plt+0x3aa8>
   14d50:	mov	r6, #0
   14d54:	b	14a00 <__assert_fail@plt+0x3ad0>
   14d58:	mov	r6, #0
   14d5c:	b	147cc <__assert_fail@plt+0x389c>
   14d60:	mov	r6, #0
   14d64:	b	14894 <__assert_fail@plt+0x3964>
   14d68:	mov	r6, #0
   14d6c:	b	14864 <__assert_fail@plt+0x3934>
   14d70:	mov	r6, #0
   14d74:	mov	r3, #116	; 0x74
   14d78:	b	1486c <__assert_fail@plt+0x393c>
   14d7c:	mov	r6, #0
   14d80:	b	148a8 <__assert_fail@plt+0x3978>
   14d84:	mov	r6, #0
   14d88:	b	148bc <__assert_fail@plt+0x398c>
   14d8c:	ldr	r3, [sp, #56]	; 0x38
   14d90:	mov	r6, #0
   14d94:	cmp	r3, #0
   14d98:	bne	148dc <__assert_fail@plt+0x39ac>
   14d9c:	ldr	r3, [sp, #96]	; 0x60
   14da0:	cmp	r3, #0
   14da4:	addne	sl, sl, #1
   14da8:	bne	14150 <__assert_fail@plt+0x3220>
   14dac:	ldr	r1, [sp, #52]	; 0x34
   14db0:	str	r3, [sp, #32]
   14db4:	mov	r4, r3
   14db8:	b	145f8 <__assert_fail@plt+0x36c8>
   14dbc:	mov	r6, #0
   14dc0:	ldr	r3, [sp, #80]	; 0x50
   14dc4:	cmp	r3, #1
   14dc8:	bne	14fb8 <__assert_fail@plt+0x4088>
   14dcc:	bl	10e1c <__ctype_b_loc@plt>
   14dd0:	ldr	r2, [sp, #80]	; 0x50
   14dd4:	sxth	r3, r4
   14dd8:	mov	r1, r2
   14ddc:	lsl	r3, r3, #1
   14de0:	ldr	r2, [r0]
   14de4:	ldrh	r3, [r2, r3]
   14de8:	and	r3, r3, #16384	; 0x4000
   14dec:	cmp	r3, #0
   14df0:	movne	r3, #1
   14df4:	moveq	r3, #0
   14df8:	str	r3, [sp, #32]
   14dfc:	moveq	r3, #1
   14e00:	movne	r3, #0
   14e04:	ldr	r2, [sp, #56]	; 0x38
   14e08:	and	r3, r3, r2
   14e0c:	ands	r3, r3, #255	; 0xff
   14e10:	beq	149e4 <__assert_fail@plt+0x3ab4>
   14e14:	add	r1, sl, r1
   14e18:	mov	r0, #0
   14e1c:	ldr	r7, [sp, #40]	; 0x28
   14e20:	ldr	r2, [sp, #36]	; 0x24
   14e24:	ldr	lr, [sp, #52]	; 0x34
   14e28:	b	14ed8 <__assert_fail@plt+0x3fa8>
   14e2c:	cmp	r7, #0
   14e30:	bne	1522c <__assert_fail@plt+0x42fc>
   14e34:	eor	r0, r2, #1
   14e38:	ands	r0, lr, r0
   14e3c:	beq	14e74 <__assert_fail@plt+0x3f44>
   14e40:	cmp	fp, r8
   14e44:	movhi	r2, #39	; 0x27
   14e48:	strbhi	r2, [r9, r8]
   14e4c:	add	r2, r8, #1
   14e50:	cmp	fp, r2
   14e54:	movhi	ip, #36	; 0x24
   14e58:	strbhi	ip, [r9, r2]
   14e5c:	add	r2, r8, #2
   14e60:	cmp	fp, r2
   14e64:	movhi	ip, #39	; 0x27
   14e68:	strbhi	ip, [r9, r2]
   14e6c:	add	r8, r8, #3
   14e70:	mov	r2, r0
   14e74:	cmp	fp, r8
   14e78:	movhi	r0, #92	; 0x5c
   14e7c:	strbhi	r0, [r9, r8]
   14e80:	add	r0, r8, #1
   14e84:	cmp	fp, r0
   14e88:	lsrhi	ip, r4, #6
   14e8c:	addhi	ip, ip, #48	; 0x30
   14e90:	strbhi	ip, [r9, r0]
   14e94:	add	ip, r8, #2
   14e98:	cmp	fp, ip
   14e9c:	lsrhi	r0, r4, #3
   14ea0:	andhi	r0, r0, #7
   14ea4:	addhi	r0, r0, #48	; 0x30
   14ea8:	add	sl, sl, #1
   14eac:	strbhi	r0, [r9, ip]
   14eb0:	and	r4, r4, #7
   14eb4:	cmp	sl, r1
   14eb8:	add	r4, r4, #48	; 0x30
   14ebc:	add	r8, r8, #3
   14ec0:	bcs	15244 <__assert_fail@plt+0x4314>
   14ec4:	mov	r0, r3
   14ec8:	cmp	fp, r8
   14ecc:	strbhi	r4, [r9, r8]
   14ed0:	ldrb	r4, [r5, #1]!
   14ed4:	add	r8, r8, #1
   14ed8:	cmp	r3, #0
   14edc:	bne	14e2c <__assert_fail@plt+0x3efc>
   14ee0:	cmp	r6, #0
   14ee4:	bne	14f88 <__assert_fail@plt+0x4058>
   14ee8:	eor	r6, r0, #1
   14eec:	and	r6, r6, r2
   14ef0:	add	sl, sl, #1
   14ef4:	cmp	r1, sl
   14ef8:	uxtb	r6, r6
   14efc:	bls	14fb0 <__assert_fail@plt+0x4080>
   14f00:	cmp	r6, #0
   14f04:	beq	14ec8 <__assert_fail@plt+0x3f98>
   14f08:	cmp	fp, r8
   14f0c:	movhi	r2, #39	; 0x27
   14f10:	strbhi	r2, [r9, r8]
   14f14:	add	r2, r8, #1
   14f18:	cmp	fp, r2
   14f1c:	movhi	ip, #39	; 0x27
   14f20:	strbhi	ip, [r9, r2]
   14f24:	add	r8, r8, #2
   14f28:	mov	r6, r3
   14f2c:	mov	r2, r3
   14f30:	b	14ec8 <__assert_fail@plt+0x3f98>
   14f34:	ldr	r3, [sp, #184]	; 0xb8
   14f38:	cmp	r3, #0
   14f3c:	beq	14614 <__assert_fail@plt+0x36e4>
   14f40:	lsr	r2, r4, #5
   14f44:	mov	r0, r3
   14f48:	uxtb	r2, r2
   14f4c:	and	r3, r4, #31
   14f50:	ldr	r2, [r0, r2, lsl #2]
   14f54:	lsr	r3, r2, r3
   14f58:	tst	r3, #1
   14f5c:	beq	14614 <__assert_fail@plt+0x36e4>
   14f60:	ldr	r3, [sp, #40]	; 0x28
   14f64:	cmp	r3, #0
   14f68:	beq	14800 <__assert_fail@plt+0x38d0>
   14f6c:	mov	r3, r1
   14f70:	str	r3, [sp, #64]	; 0x40
   14f74:	mov	sl, r9
   14f78:	ldr	r3, [sp, #56]	; 0x38
   14f7c:	mov	r9, fp
   14f80:	ldr	r2, [sp, #64]	; 0x40
   14f84:	b	15174 <__assert_fail@plt+0x4244>
   14f88:	cmp	fp, r8
   14f8c:	eor	r6, r0, #1
   14f90:	movhi	ip, #92	; 0x5c
   14f94:	and	r6, r6, r2
   14f98:	add	sl, sl, #1
   14f9c:	strbhi	ip, [r9, r8]
   14fa0:	cmp	r1, sl
   14fa4:	add	r8, r8, #1
   14fa8:	uxtb	r6, r6
   14fac:	bhi	14f00 <__assert_fail@plt+0x3fd0>
   14fb0:	str	r2, [sp, #36]	; 0x24
   14fb4:	b	1462c <__assert_fail@plt+0x36fc>
   14fb8:	ldr	r3, [sp, #24]
   14fbc:	cmn	r3, #1
   14fc0:	mov	r3, #0
   14fc4:	str	r3, [sp, #128]	; 0x80
   14fc8:	str	r3, [sp, #132]	; 0x84
   14fcc:	beq	152c0 <__assert_fail@plt+0x4390>
   14fd0:	mov	r2, r7
   14fd4:	mov	r3, #0
   14fd8:	str	r7, [sp, #104]	; 0x68
   14fdc:	str	r5, [sp, #116]	; 0x74
   14fe0:	mov	r7, r3
   14fe4:	mov	r5, r2
   14fe8:	str	r4, [sp, #32]
   14fec:	str	r6, [sp, #108]	; 0x6c
   14ff0:	str	r8, [sp, #112]	; 0x70
   14ff4:	ldr	r3, [sp, #44]	; 0x2c
   14ff8:	add	r6, sl, r7
   14ffc:	add	r4, r3, r6
   15000:	ldr	r3, [sp, #24]
   15004:	mov	r1, r4
   15008:	sub	r2, r3, r6
   1500c:	add	r0, sp, #124	; 0x7c
   15010:	add	r3, sp, #128	; 0x80
   15014:	bl	19c74 <__assert_fail@plt+0x8d44>
   15018:	subs	r8, r0, #0
   1501c:	beq	153a4 <__assert_fail@plt+0x4474>
   15020:	cmn	r8, #1
   15024:	beq	1537c <__assert_fail@plt+0x444c>
   15028:	cmn	r8, #2
   1502c:	beq	15314 <__assert_fail@plt+0x43e4>
   15030:	ldr	r3, [sp, #64]	; 0x40
   15034:	cmp	r3, #0
   15038:	beq	150f8 <__assert_fail@plt+0x41c8>
   1503c:	cmp	r8, #1
   15040:	beq	150f8 <__assert_fail@plt+0x41c8>
   15044:	sub	r3, r8, #1
   15048:	add	r6, r3, r6
   1504c:	ldr	r3, [sp, #44]	; 0x2c
   15050:	add	r6, r3, r6
   15054:	ldrb	r3, [r4, #1]!
   15058:	sub	r3, r3, #91	; 0x5b
   1505c:	cmp	r3, #33	; 0x21
   15060:	ldrls	pc, [pc, r3, lsl #2]
   15064:	b	150f0 <__assert_fail@plt+0x41c0>
   15068:	andeq	r5, r1, ip, asr r1
   1506c:	andeq	r5, r1, ip, asr r1
   15070:	strdeq	r5, [r1], -r0
   15074:	andeq	r5, r1, ip, asr r1
   15078:	strdeq	r5, [r1], -r0
   1507c:	andeq	r5, r1, ip, asr r1
   15080:	strdeq	r5, [r1], -r0
   15084:	strdeq	r5, [r1], -r0
   15088:	strdeq	r5, [r1], -r0
   1508c:	strdeq	r5, [r1], -r0
   15090:	strdeq	r5, [r1], -r0
   15094:	strdeq	r5, [r1], -r0
   15098:	strdeq	r5, [r1], -r0
   1509c:	strdeq	r5, [r1], -r0
   150a0:	strdeq	r5, [r1], -r0
   150a4:	strdeq	r5, [r1], -r0
   150a8:	strdeq	r5, [r1], -r0
   150ac:	strdeq	r5, [r1], -r0
   150b0:	strdeq	r5, [r1], -r0
   150b4:	strdeq	r5, [r1], -r0
   150b8:	strdeq	r5, [r1], -r0
   150bc:	strdeq	r5, [r1], -r0
   150c0:	strdeq	r5, [r1], -r0
   150c4:	strdeq	r5, [r1], -r0
   150c8:	strdeq	r5, [r1], -r0
   150cc:	strdeq	r5, [r1], -r0
   150d0:	strdeq	r5, [r1], -r0
   150d4:	strdeq	r5, [r1], -r0
   150d8:	strdeq	r5, [r1], -r0
   150dc:	strdeq	r5, [r1], -r0
   150e0:	strdeq	r5, [r1], -r0
   150e4:	strdeq	r5, [r1], -r0
   150e8:	strdeq	r5, [r1], -r0
   150ec:	andeq	r5, r1, ip, asr r1
   150f0:	cmp	r6, r4
   150f4:	bne	15054 <__assert_fail@plt+0x4124>
   150f8:	ldr	r0, [sp, #124]	; 0x7c
   150fc:	bl	10d8c <iswprint@plt>
   15100:	add	r7, r7, r8
   15104:	cmp	r0, #0
   15108:	add	r0, sp, #128	; 0x80
   1510c:	moveq	r5, #0
   15110:	bl	10d38 <mbsinit@plt>
   15114:	cmp	r0, #0
   15118:	beq	14ff4 <__assert_fail@plt+0x40c4>
   1511c:	ldr	r4, [sp, #32]
   15120:	str	r5, [sp, #32]
   15124:	ldr	r3, [sp, #32]
   15128:	mov	r1, r7
   1512c:	eor	r3, r3, #1
   15130:	ldr	r7, [sp, #104]	; 0x68
   15134:	ldr	r6, [sp, #108]	; 0x6c
   15138:	ldr	r8, [sp, #112]	; 0x70
   1513c:	ldr	r5, [sp, #116]	; 0x74
   15140:	uxtb	r3, r3
   15144:	cmp	r1, #1
   15148:	bls	14e04 <__assert_fail@plt+0x3ed4>
   1514c:	ldr	r2, [sp, #56]	; 0x38
   15150:	and	r3, r3, r2
   15154:	uxtb	r3, r3
   15158:	b	14e14 <__assert_fail@plt+0x3ee4>
   1515c:	mov	r3, #2
   15160:	str	r3, [sp, #176]	; 0xb0
   15164:	ldr	r2, [sp, #64]	; 0x40
   15168:	ldr	r3, [sp, #56]	; 0x38
   1516c:	mov	sl, r9
   15170:	mov	r9, fp
   15174:	and	r3, r3, r2
   15178:	tst	r3, #255	; 0xff
   1517c:	ldr	r3, [sp, #176]	; 0xb0
   15180:	movne	r3, #4
   15184:	str	r3, [sp, #176]	; 0xb0
   15188:	ldr	r3, [sp, #180]	; 0xb4
   1518c:	mov	ip, #0
   15190:	bic	r3, r3, #2
   15194:	str	r3, [sp, #4]
   15198:	ldr	r3, [sp, #192]	; 0xc0
   1519c:	ldr	r2, [sp, #44]	; 0x2c
   151a0:	str	r3, [sp, #16]
   151a4:	ldr	r3, [sp, #188]	; 0xbc
   151a8:	mov	r1, r9
   151ac:	str	r3, [sp, #12]
   151b0:	ldr	r3, [sp, #176]	; 0xb0
   151b4:	mov	r0, sl
   151b8:	str	r3, [sp]
   151bc:	str	ip, [sp, #8]
   151c0:	ldr	r3, [sp, #24]
   151c4:	bl	14024 <__assert_fail@plt+0x30f4>
   151c8:	mov	fp, r0
   151cc:	mov	r0, fp
   151d0:	add	sp, sp, #140	; 0x8c
   151d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151d8:	mov	r4, #92	; 0x5c
   151dc:	mov	r1, #0
   151e0:	mov	r3, r4
   151e4:	b	147d8 <__assert_fail@plt+0x38a8>
   151e8:	mov	r3, #0
   151ec:	ldr	r1, [sp, #52]	; 0x34
   151f0:	str	r3, [sp, #32]
   151f4:	mov	r4, #63	; 0x3f
   151f8:	b	145f8 <__assert_fail@plt+0x36c8>
   151fc:	cmp	fp, #0
   15200:	beq	1525c <__assert_fail@plt+0x432c>
   15204:	mov	r3, #39	; 0x27
   15208:	strb	r3, [r9]
   1520c:	mov	r3, #0
   15210:	str	r3, [sp, #40]	; 0x28
   15214:	mov	r3, #1
   15218:	str	r3, [sp, #68]	; 0x44
   1521c:	ldr	r3, [pc, #448]	; 153e4 <__assert_fail@plt+0x44b4>
   15220:	mov	r8, #1
   15224:	str	r3, [sp, #72]	; 0x48
   15228:	b	1440c <__assert_fail@plt+0x34dc>
   1522c:	ldr	r3, [sp, #40]	; 0x28
   15230:	mov	sl, r9
   15234:	str	r3, [sp, #56]	; 0x38
   15238:	mov	r9, fp
   1523c:	ldr	r2, [sp, #64]	; 0x40
   15240:	b	15174 <__assert_fail@plt+0x4244>
   15244:	str	r2, [sp, #36]	; 0x24
   15248:	b	1465c <__assert_fail@plt+0x372c>
   1524c:	mov	r1, #0
   15250:	str	r3, [sp, #32]
   15254:	mov	r4, #63	; 0x3f
   15258:	b	145f8 <__assert_fail@plt+0x36c8>
   1525c:	ldr	r3, [pc, #384]	; 153e4 <__assert_fail@plt+0x44b4>
   15260:	str	r3, [sp, #72]	; 0x48
   15264:	mov	r3, #0
   15268:	str	r3, [sp, #40]	; 0x28
   1526c:	mov	r3, #1
   15270:	str	r3, [sp, #68]	; 0x44
   15274:	mov	r8, r3
   15278:	b	1440c <__assert_fail@plt+0x34dc>
   1527c:	bl	10f24 <abort@plt>
   15280:	cmp	fp, #0
   15284:	beq	152e4 <__assert_fail@plt+0x43b4>
   15288:	mov	r2, #1
   1528c:	mov	r3, #34	; 0x22
   15290:	strb	r3, [r9]
   15294:	mov	r8, r2
   15298:	mov	r3, r2
   1529c:	str	r2, [sp, #68]	; 0x44
   152a0:	str	r3, [sp, #56]	; 0x38
   152a4:	ldr	r3, [pc, #316]	; 153e8 <__assert_fail@plt+0x44b8>
   152a8:	ldr	r1, [sp, #56]	; 0x38
   152ac:	str	r3, [sp, #72]	; 0x48
   152b0:	ldr	r2, [sp, #176]	; 0xb0
   152b4:	ldr	ip, [sp, #40]	; 0x28
   152b8:	ldr	lr, [sp, #176]	; 0xb0
   152bc:	b	140f0 <__assert_fail@plt+0x31c0>
   152c0:	ldr	r0, [sp, #44]	; 0x2c
   152c4:	bl	10e34 <strlen@plt>
   152c8:	str	r0, [sp, #24]
   152cc:	b	14fd0 <__assert_fail@plt+0x40a0>
   152d0:	mov	r7, #0
   152d4:	ldr	r1, [sp, #52]	; 0x34
   152d8:	str	r3, [sp, #32]
   152dc:	mov	r4, #48	; 0x30
   152e0:	b	145f8 <__assert_fail@plt+0x36c8>
   152e4:	mov	r3, #1
   152e8:	str	r3, [sp, #68]	; 0x44
   152ec:	mov	r8, r3
   152f0:	b	152a0 <__assert_fail@plt+0x4370>
   152f4:	mov	r3, #2
   152f8:	mov	sl, r9
   152fc:	str	r3, [sp, #176]	; 0xb0
   15300:	mov	r9, fp
   15304:	ldr	r3, [sp, #56]	; 0x38
   15308:	b	15174 <__assert_fail@plt+0x4244>
   1530c:	ldr	r6, [sp, #48]	; 0x30
   15310:	b	14dc0 <__assert_fail@plt+0x3e90>
   15314:	ldr	r0, [sp, #24]
   15318:	mov	ip, r6
   1531c:	cmp	r0, ip
   15320:	mov	r1, r7
   15324:	mov	r2, r4
   15328:	ldr	r7, [sp, #104]	; 0x68
   1532c:	ldr	r4, [sp, #32]
   15330:	ldr	r6, [sp, #108]	; 0x6c
   15334:	ldr	r8, [sp, #112]	; 0x70
   15338:	ldr	r5, [sp, #116]	; 0x74
   1533c:	bls	1536c <__assert_fail@plt+0x443c>
   15340:	ldrb	r3, [r2]
   15344:	cmp	r3, #0
   15348:	bne	1535c <__assert_fail@plt+0x442c>
   1534c:	b	1547c <__assert_fail@plt+0x454c>
   15350:	ldrb	r3, [r2, #1]!
   15354:	cmp	r3, #0
   15358:	beq	1547c <__assert_fail@plt+0x454c>
   1535c:	add	r1, r1, #1
   15360:	add	r3, sl, r1
   15364:	cmp	r0, r3
   15368:	bhi	15350 <__assert_fail@plt+0x4420>
   1536c:	mov	r2, #0
   15370:	mov	r3, r7
   15374:	str	r2, [sp, #32]
   15378:	b	15144 <__assert_fail@plt+0x4214>
   1537c:	mov	r1, r7
   15380:	ldr	r7, [sp, #104]	; 0x68
   15384:	mov	r2, #0
   15388:	ldr	r4, [sp, #32]
   1538c:	ldr	r6, [sp, #108]	; 0x6c
   15390:	ldr	r8, [sp, #112]	; 0x70
   15394:	ldr	r5, [sp, #116]	; 0x74
   15398:	mov	r3, r7
   1539c:	str	r2, [sp, #32]
   153a0:	b	15144 <__assert_fail@plt+0x4214>
   153a4:	mov	r3, r5
   153a8:	eor	r3, r3, #1
   153ac:	ldr	r4, [sp, #32]
   153b0:	mov	r1, r7
   153b4:	str	r5, [sp, #32]
   153b8:	ldr	r7, [sp, #104]	; 0x68
   153bc:	ldr	r6, [sp, #108]	; 0x6c
   153c0:	ldr	r8, [sp, #112]	; 0x70
   153c4:	ldr	r5, [sp, #116]	; 0x74
   153c8:	uxtb	r3, r3
   153cc:	b	15144 <__assert_fail@plt+0x4214>
   153d0:	mov	sl, r9
   153d4:	str	r3, [sp, #56]	; 0x38
   153d8:	mov	r9, fp
   153dc:	ldr	r2, [sp, #64]	; 0x40
   153e0:	b	15174 <__assert_fail@plt+0x4244>
   153e4:	andeq	fp, r1, r8, lsl #7
   153e8:	andeq	fp, r1, r4, lsl #7
   153ec:	andeq	fp, r1, ip, lsl #7
   153f0:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   153f4:	ldr	r2, [sp, #44]	; 0x2c
   153f8:	ldrb	r1, [r2, r3]
   153fc:	sub	r2, r1, #33	; 0x21
   15400:	uxtb	r2, r2
   15404:	cmp	r2, #29
   15408:	bhi	15488 <__assert_fail@plt+0x4558>
   1540c:	ldr	r0, [pc, #-36]	; 153f0 <__assert_fail@plt+0x44c0>
   15410:	mov	ip, #1
   15414:	ands	r2, r0, ip, lsl r2
   15418:	beq	154a8 <__assert_fail@plt+0x4578>
   1541c:	ldr	r2, [sp, #40]	; 0x28
   15420:	cmp	r2, #0
   15424:	bne	1559c <__assert_fail@plt+0x466c>
   15428:	add	r2, r8, #1
   1542c:	cmp	fp, r8
   15430:	strbhi	r4, [r9, r8]
   15434:	cmp	fp, r2
   15438:	movhi	r0, #34	; 0x22
   1543c:	strbhi	r0, [r9, r2]
   15440:	add	r2, r8, #2
   15444:	cmp	fp, r2
   15448:	movhi	r0, #34	; 0x22
   1544c:	strbhi	r0, [r9, r2]
   15450:	add	r2, r8, #3
   15454:	cmp	fp, r2
   15458:	mov	sl, r3
   1545c:	ldr	r3, [sp, #40]	; 0x28
   15460:	movhi	r0, #63	; 0x3f
   15464:	mov	r4, r1
   15468:	strbhi	r0, [r9, r2]
   1546c:	add	r8, r8, #4
   15470:	mov	r1, r3
   15474:	str	r3, [sp, #32]
   15478:	b	145f8 <__assert_fail@plt+0x36c8>
   1547c:	str	r3, [sp, #32]
   15480:	mov	r3, r7
   15484:	b	15144 <__assert_fail@plt+0x4214>
   15488:	mov	r1, #0
   1548c:	str	r1, [sp, #32]
   15490:	b	145f8 <__assert_fail@plt+0x36c8>
   15494:	mov	sl, r9
   15498:	ldr	r3, [sp, #56]	; 0x38
   1549c:	mov	r9, fp
   154a0:	ldr	r2, [sp, #64]	; 0x40
   154a4:	b	15174 <__assert_fail@plt+0x4244>
   154a8:	str	r2, [sp, #32]
   154ac:	mov	r1, #0
   154b0:	b	145f8 <__assert_fail@plt+0x36c8>
   154b4:	ldr	r2, [sp, #76]	; 0x4c
   154b8:	mov	sl, r9
   154bc:	mov	r9, fp
   154c0:	mov	fp, r8
   154c4:	ldr	r1, [sp, #72]	; 0x48
   154c8:	cmp	r1, #0
   154cc:	moveq	r3, #0
   154d0:	andne	r3, r2, #1
   154d4:	cmp	r3, #0
   154d8:	beq	15504 <__assert_fail@plt+0x45d4>
   154dc:	ldrb	r3, [r1]
   154e0:	cmp	r3, #0
   154e4:	beq	15504 <__assert_fail@plt+0x45d4>
   154e8:	mov	r2, r1
   154ec:	cmp	r9, fp
   154f0:	strbhi	r3, [sl, fp]
   154f4:	ldrb	r3, [r2, #1]!
   154f8:	add	fp, fp, #1
   154fc:	cmp	r3, #0
   15500:	bne	154ec <__assert_fail@plt+0x45bc>
   15504:	cmp	r9, fp
   15508:	movhi	r3, #0
   1550c:	strbhi	r3, [sl, fp]
   15510:	b	151cc <__assert_fail@plt+0x429c>
   15514:	ldr	r3, [sp, #192]	; 0xc0
   15518:	mov	ip, #5
   1551c:	str	r3, [sp, #16]
   15520:	ldr	r3, [sp, #188]	; 0xbc
   15524:	ldr	r2, [sp, #44]	; 0x2c
   15528:	str	r3, [sp, #12]
   1552c:	ldr	r3, [sp, #184]	; 0xb8
   15530:	ldr	r1, [sp, #84]	; 0x54
   15534:	str	r3, [sp, #8]
   15538:	ldr	r3, [sp, #180]	; 0xb4
   1553c:	mov	r0, r9
   15540:	str	r3, [sp, #4]
   15544:	str	ip, [sp]
   15548:	ldr	r3, [sp, #24]
   1554c:	bl	14024 <__assert_fail@plt+0x30f4>
   15550:	mov	fp, r0
   15554:	b	151cc <__assert_fail@plt+0x429c>
   15558:	mov	sl, r9
   1555c:	mov	r9, fp
   15560:	mov	fp, r8
   15564:	b	154c4 <__assert_fail@plt+0x4594>
   15568:	ldr	r1, [sp, #176]	; 0xb0
   1556c:	bl	13f04 <__assert_fail@plt+0x2fd4>
   15570:	str	r0, [sp, #192]	; 0xc0
   15574:	b	144e0 <__assert_fail@plt+0x35b0>
   15578:	ldr	r1, [sp, #176]	; 0xb0
   1557c:	bl	13f04 <__assert_fail@plt+0x2fd4>
   15580:	str	r0, [sp, #188]	; 0xbc
   15584:	b	144c0 <__assert_fail@plt+0x3590>
   15588:	mov	sl, r9
   1558c:	mov	r2, r3
   15590:	mov	r9, fp
   15594:	mov	fp, r8
   15598:	b	154c4 <__assert_fail@plt+0x4594>
   1559c:	mov	sl, r9
   155a0:	mov	r9, fp
   155a4:	b	15188 <__assert_fail@plt+0x4258>
   155a8:	push	{r4, r5, r6, lr}
   155ac:	mov	r5, r0
   155b0:	bl	10e4c <__errno_location@plt>
   155b4:	cmp	r5, #0
   155b8:	mov	r1, #48	; 0x30
   155bc:	mov	r4, r0
   155c0:	ldr	r0, [pc, #16]	; 155d8 <__assert_fail@plt+0x46a8>
   155c4:	ldr	r6, [r4]
   155c8:	movne	r0, r5
   155cc:	bl	18e44 <__assert_fail@plt+0x7f14>
   155d0:	str	r6, [r4]
   155d4:	pop	{r4, r5, r6, pc}
   155d8:	andeq	ip, r2, r0, lsl #3
   155dc:	ldr	r3, [pc, #12]	; 155f0 <__assert_fail@plt+0x46c0>
   155e0:	cmp	r0, #0
   155e4:	moveq	r0, r3
   155e8:	ldr	r0, [r0]
   155ec:	bx	lr
   155f0:	andeq	ip, r2, r0, lsl #3
   155f4:	ldr	r3, [pc, #12]	; 15608 <__assert_fail@plt+0x46d8>
   155f8:	cmp	r0, #0
   155fc:	moveq	r0, r3
   15600:	str	r1, [r0]
   15604:	bx	lr
   15608:	andeq	ip, r2, r0, lsl #3
   1560c:	ldr	r3, [pc, #52]	; 15648 <__assert_fail@plt+0x4718>
   15610:	cmp	r0, #0
   15614:	moveq	r0, r3
   15618:	add	r3, r0, #8
   1561c:	push	{lr}		; (str lr, [sp, #-4]!)
   15620:	lsr	lr, r1, #5
   15624:	and	r1, r1, #31
   15628:	ldr	ip, [r3, lr, lsl #2]
   1562c:	lsr	r0, ip, r1
   15630:	eor	r2, r2, r0
   15634:	and	r2, r2, #1
   15638:	and	r0, r0, #1
   1563c:	eor	r1, ip, r2, lsl r1
   15640:	str	r1, [r3, lr, lsl #2]
   15644:	pop	{pc}		; (ldr pc, [sp], #4)
   15648:	andeq	ip, r2, r0, lsl #3
   1564c:	ldr	r3, [pc, #16]	; 15664 <__assert_fail@plt+0x4734>
   15650:	cmp	r0, #0
   15654:	movne	r3, r0
   15658:	ldr	r0, [r3, #4]
   1565c:	str	r1, [r3, #4]
   15660:	bx	lr
   15664:	andeq	ip, r2, r0, lsl #3
   15668:	ldr	r3, [pc, #44]	; 1569c <__assert_fail@plt+0x476c>
   1566c:	cmp	r0, #0
   15670:	moveq	r0, r3
   15674:	mov	ip, #10
   15678:	cmp	r2, #0
   1567c:	cmpne	r1, #0
   15680:	str	ip, [r0]
   15684:	beq	15694 <__assert_fail@plt+0x4764>
   15688:	str	r1, [r0, #40]	; 0x28
   1568c:	str	r2, [r0, #44]	; 0x2c
   15690:	bx	lr
   15694:	push	{r4, lr}
   15698:	bl	10f24 <abort@plt>
   1569c:	andeq	ip, r2, r0, lsl #3
   156a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   156a4:	sub	sp, sp, #24
   156a8:	ldr	ip, [pc, #108]	; 1571c <__assert_fail@plt+0x47ec>
   156ac:	ldr	r4, [sp, #56]	; 0x38
   156b0:	mov	r9, r2
   156b4:	cmp	r4, #0
   156b8:	moveq	r4, ip
   156bc:	mov	sl, r3
   156c0:	mov	r7, r0
   156c4:	mov	r8, r1
   156c8:	bl	10e4c <__errno_location@plt>
   156cc:	ldr	r3, [r4, #44]	; 0x2c
   156d0:	mov	r1, r8
   156d4:	ldr	r6, [r0]
   156d8:	str	r3, [sp, #16]
   156dc:	ldr	r2, [r4, #40]	; 0x28
   156e0:	add	r3, r4, #8
   156e4:	str	r3, [sp, #8]
   156e8:	str	r2, [sp, #12]
   156ec:	ldr	r2, [r4, #4]
   156f0:	mov	r5, r0
   156f4:	str	r2, [sp, #4]
   156f8:	ldr	ip, [r4]
   156fc:	mov	r3, sl
   15700:	mov	r2, r9
   15704:	mov	r0, r7
   15708:	str	ip, [sp]
   1570c:	bl	14024 <__assert_fail@plt+0x30f4>
   15710:	str	r6, [r5]
   15714:	add	sp, sp, #24
   15718:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1571c:	andeq	ip, r2, r0, lsl #3
   15720:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15724:	cmp	r2, #0
   15728:	sub	sp, sp, #36	; 0x24
   1572c:	ldr	r4, [pc, #164]	; 157d8 <__assert_fail@plt+0x48a8>
   15730:	mov	r8, r1
   15734:	movne	r4, r2
   15738:	mov	r7, r0
   1573c:	bl	10e4c <__errno_location@plt>
   15740:	ldr	r3, [r4, #44]	; 0x2c
   15744:	ldr	r5, [r4, #4]
   15748:	add	r9, r4, #8
   1574c:	orr	r5, r5, #1
   15750:	mov	r1, #0
   15754:	mov	r2, r7
   15758:	ldr	fp, [r0]
   1575c:	str	r3, [sp, #16]
   15760:	ldr	r3, [r4, #40]	; 0x28
   15764:	stmib	sp, {r5, r9}
   15768:	str	r3, [sp, #12]
   1576c:	ldr	r3, [r4]
   15770:	mov	r6, r0
   15774:	str	r3, [sp]
   15778:	mov	r0, r1
   1577c:	mov	r3, r8
   15780:	bl	14024 <__assert_fail@plt+0x30f4>
   15784:	add	r1, r0, #1
   15788:	mov	r0, r1
   1578c:	str	r1, [sp, #28]
   15790:	bl	18900 <__assert_fail@plt+0x79d0>
   15794:	ldr	r3, [r4, #44]	; 0x2c
   15798:	ldr	r1, [sp, #28]
   1579c:	str	r3, [sp, #16]
   157a0:	ldr	r3, [r4, #40]	; 0x28
   157a4:	str	r5, [sp, #4]
   157a8:	str	r3, [sp, #12]
   157ac:	str	r9, [sp, #8]
   157b0:	ldr	ip, [r4]
   157b4:	mov	r3, r8
   157b8:	mov	r2, r7
   157bc:	str	ip, [sp]
   157c0:	mov	sl, r0
   157c4:	bl	14024 <__assert_fail@plt+0x30f4>
   157c8:	mov	r0, sl
   157cc:	str	fp, [r6]
   157d0:	add	sp, sp, #36	; 0x24
   157d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157d8:	andeq	ip, r2, r0, lsl #3
   157dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157e0:	cmp	r3, #0
   157e4:	sub	sp, sp, #44	; 0x2c
   157e8:	ldr	r4, [pc, #192]	; 158b0 <__assert_fail@plt+0x4980>
   157ec:	mov	r6, r2
   157f0:	movne	r4, r3
   157f4:	mov	r9, r1
   157f8:	mov	r8, r0
   157fc:	bl	10e4c <__errno_location@plt>
   15800:	ldr	r3, [r4, #44]	; 0x2c
   15804:	ldr	r5, [r4, #4]
   15808:	add	sl, r4, #8
   1580c:	cmp	r6, #0
   15810:	orreq	r5, r5, #1
   15814:	mov	r1, #0
   15818:	ldr	r2, [r0]
   1581c:	str	r3, [sp, #16]
   15820:	ldr	r3, [r4, #40]	; 0x28
   15824:	stmib	sp, {r5, sl}
   15828:	str	r3, [sp, #12]
   1582c:	ldr	r3, [r4]
   15830:	mov	r7, r0
   15834:	str	r2, [sp, #28]
   15838:	str	r3, [sp]
   1583c:	mov	r2, r8
   15840:	mov	r3, r9
   15844:	mov	r0, r1
   15848:	bl	14024 <__assert_fail@plt+0x30f4>
   1584c:	add	r1, r0, #1
   15850:	mov	fp, r0
   15854:	mov	r0, r1
   15858:	str	r1, [sp, #36]	; 0x24
   1585c:	bl	18900 <__assert_fail@plt+0x79d0>
   15860:	ldr	r3, [r4, #44]	; 0x2c
   15864:	mov	r2, r8
   15868:	str	r3, [sp, #16]
   1586c:	ldr	r3, [r4, #40]	; 0x28
   15870:	str	r5, [sp, #4]
   15874:	str	r3, [sp, #12]
   15878:	str	sl, [sp, #8]
   1587c:	ldr	ip, [r4]
   15880:	ldr	r1, [sp, #36]	; 0x24
   15884:	mov	r3, r9
   15888:	str	ip, [sp]
   1588c:	str	r0, [sp, #32]
   15890:	bl	14024 <__assert_fail@plt+0x30f4>
   15894:	ldr	r2, [sp, #28]
   15898:	cmp	r6, #0
   1589c:	str	r2, [r7]
   158a0:	ldr	r0, [sp, #32]
   158a4:	strne	fp, [r6]
   158a8:	add	sp, sp, #44	; 0x2c
   158ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158b0:	andeq	ip, r2, r0, lsl #3
   158b4:	push	{r4, r5, r6, r7, r8, lr}
   158b8:	ldr	r6, [pc, #116]	; 15934 <__assert_fail@plt+0x4a04>
   158bc:	ldr	r3, [r6, #4]
   158c0:	ldr	r7, [r6]
   158c4:	cmp	r3, #1
   158c8:	movgt	r5, r7
   158cc:	movgt	r4, #1
   158d0:	ble	158f0 <__assert_fail@plt+0x49c0>
   158d4:	ldr	r0, [r5, #12]
   158d8:	bl	13d58 <__assert_fail@plt+0x2e28>
   158dc:	ldr	r3, [r6, #4]
   158e0:	add	r4, r4, #1
   158e4:	cmp	r3, r4
   158e8:	add	r5, r5, #8
   158ec:	bgt	158d4 <__assert_fail@plt+0x49a4>
   158f0:	ldr	r0, [r7, #4]
   158f4:	ldr	r4, [pc, #60]	; 15938 <__assert_fail@plt+0x4a08>
   158f8:	cmp	r0, r4
   158fc:	beq	15910 <__assert_fail@plt+0x49e0>
   15900:	bl	13d58 <__assert_fail@plt+0x2e28>
   15904:	mov	r3, #256	; 0x100
   15908:	str	r4, [r6, #12]
   1590c:	str	r3, [r6, #8]
   15910:	ldr	r4, [pc, #36]	; 1593c <__assert_fail@plt+0x4a0c>
   15914:	cmp	r7, r4
   15918:	beq	15928 <__assert_fail@plt+0x49f8>
   1591c:	mov	r0, r7
   15920:	bl	13d58 <__assert_fail@plt+0x2e28>
   15924:	str	r4, [r6]
   15928:	mov	r3, #1
   1592c:	str	r3, [r6, #4]
   15930:	pop	{r4, r5, r6, r7, r8, pc}
   15934:	strdeq	ip, [r2], -r4
   15938:			; <UNDEFINED> instruction: 0x0002c1b0
   1593c:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   15940:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15944:	sub	sp, sp, #44	; 0x2c
   15948:	mov	r5, r0
   1594c:	mov	sl, r1
   15950:	bl	10e4c <__errno_location@plt>
   15954:	ldr	r4, [pc, #400]	; 15aec <__assert_fail@plt+0x4bbc>
   15958:	cmn	r5, #-2147483647	; 0x80000001
   1595c:	ldr	r6, [r4]
   15960:	mov	r8, r0
   15964:	movne	r0, #0
   15968:	moveq	r0, #1
   1596c:	ldr	r3, [r8]
   15970:	orrs	r0, r0, r5, lsr #31
   15974:	str	r3, [sp, #24]
   15978:	bne	15ae8 <__assert_fail@plt+0x4bb8>
   1597c:	ldr	r2, [r4, #4]
   15980:	cmp	r5, r2
   15984:	blt	159e4 <__assert_fail@plt+0x4ab4>
   15988:	add	r7, r4, #8
   1598c:	cmp	r6, r7
   15990:	str	r2, [sp, #36]	; 0x24
   15994:	beq	15ab8 <__assert_fail@plt+0x4b88>
   15998:	mov	r3, #8
   1599c:	sub	r2, r5, r2
   159a0:	mov	r0, r6
   159a4:	str	r3, [sp]
   159a8:	add	r2, r2, #1
   159ac:	mvn	r3, #-2147483648	; 0x80000000
   159b0:	add	r1, sp, #36	; 0x24
   159b4:	bl	18b1c <__assert_fail@plt+0x7bec>
   159b8:	mov	r6, r0
   159bc:	str	r0, [r4]
   159c0:	ldr	r0, [r4, #4]
   159c4:	ldr	r2, [sp, #36]	; 0x24
   159c8:	mov	r1, #0
   159cc:	sub	r2, r2, r0
   159d0:	add	r0, r6, r0, lsl #3
   159d4:	lsl	r2, r2, #3
   159d8:	bl	10e64 <memset@plt>
   159dc:	ldr	r3, [sp, #36]	; 0x24
   159e0:	str	r3, [r4, #4]
   159e4:	ldr	r4, [pc, #260]	; 15af0 <__assert_fail@plt+0x4bc0>
   159e8:	add	fp, r6, r5, lsl #3
   159ec:	ldr	r9, [r6, r5, lsl #3]
   159f0:	ldr	r0, [r4, #4]
   159f4:	ldr	r3, [r4]
   159f8:	ldr	r7, [fp, #4]
   159fc:	ldr	r1, [r4, #44]	; 0x2c
   15a00:	ldr	r2, [r4, #40]	; 0x28
   15a04:	orr	r0, r0, #1
   15a08:	str	r3, [sp]
   15a0c:	add	r3, r4, #8
   15a10:	str	r0, [sp, #28]
   15a14:	str	r0, [sp, #4]
   15a18:	str	r1, [sp, #16]
   15a1c:	str	r2, [sp, #12]
   15a20:	str	r3, [sp, #8]
   15a24:	mov	r0, r7
   15a28:	mov	r1, r9
   15a2c:	mvn	r3, #0
   15a30:	mov	r2, sl
   15a34:	bl	14024 <__assert_fail@plt+0x30f4>
   15a38:	cmp	r9, r0
   15a3c:	bhi	15aa4 <__assert_fail@plt+0x4b74>
   15a40:	add	r3, r4, #48	; 0x30
   15a44:	add	r9, r0, #1
   15a48:	cmp	r7, r3
   15a4c:	str	r9, [r6, r5, lsl #3]
   15a50:	beq	15a5c <__assert_fail@plt+0x4b2c>
   15a54:	mov	r0, r7
   15a58:	bl	13d58 <__assert_fail@plt+0x2e28>
   15a5c:	mov	r0, r9
   15a60:	bl	18900 <__assert_fail@plt+0x79d0>
   15a64:	ldr	ip, [r4, #44]	; 0x2c
   15a68:	ldr	r3, [r4]
   15a6c:	ldr	lr, [r4, #40]	; 0x28
   15a70:	ldr	r4, [pc, #124]	; 15af4 <__assert_fail@plt+0x4bc4>
   15a74:	mov	r2, sl
   15a78:	mov	r1, r9
   15a7c:	str	r0, [fp, #4]
   15a80:	str	r4, [sp, #8]
   15a84:	ldr	r4, [sp, #28]
   15a88:	str	r3, [sp]
   15a8c:	str	r4, [sp, #4]
   15a90:	str	ip, [sp, #16]
   15a94:	str	lr, [sp, #12]
   15a98:	mvn	r3, #0
   15a9c:	mov	r7, r0
   15aa0:	bl	14024 <__assert_fail@plt+0x30f4>
   15aa4:	ldr	r3, [sp, #24]
   15aa8:	mov	r0, r7
   15aac:	str	r3, [r8]
   15ab0:	add	sp, sp, #44	; 0x2c
   15ab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ab8:	mov	r3, #8
   15abc:	sub	r2, r5, r2
   15ac0:	str	r3, [sp]
   15ac4:	add	r1, sp, #36	; 0x24
   15ac8:	add	r2, r2, #1
   15acc:	mvn	r3, #-2147483648	; 0x80000000
   15ad0:	bl	18b1c <__assert_fail@plt+0x7bec>
   15ad4:	mov	r6, r0
   15ad8:	ldm	r7, {r0, r1}
   15adc:	str	r6, [r4]
   15ae0:	stm	r6, {r0, r1}
   15ae4:	b	159c0 <__assert_fail@plt+0x4a90>
   15ae8:	bl	10f24 <abort@plt>
   15aec:	strdeq	ip, [r2], -r4
   15af0:	andeq	ip, r2, r0, lsl #3
   15af4:	andeq	ip, r2, r8, lsl #3
   15af8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15afc:	sub	sp, sp, #52	; 0x34
   15b00:	mov	r5, r0
   15b04:	mov	sl, r1
   15b08:	mov	fp, r2
   15b0c:	bl	10e4c <__errno_location@plt>
   15b10:	ldr	r4, [pc, #408]	; 15cb0 <__assert_fail@plt+0x4d80>
   15b14:	cmn	r5, #-2147483647	; 0x80000001
   15b18:	ldr	r6, [r4]
   15b1c:	mov	r8, r0
   15b20:	movne	r0, #0
   15b24:	moveq	r0, #1
   15b28:	ldr	r3, [r8]
   15b2c:	orrs	r0, r0, r5, lsr #31
   15b30:	str	r3, [sp, #28]
   15b34:	bne	15cac <__assert_fail@plt+0x4d7c>
   15b38:	ldr	r2, [r4, #4]
   15b3c:	cmp	r5, r2
   15b40:	blt	15ba0 <__assert_fail@plt+0x4c70>
   15b44:	add	r7, r4, #8
   15b48:	cmp	r6, r7
   15b4c:	str	r2, [sp, #44]	; 0x2c
   15b50:	beq	15c7c <__assert_fail@plt+0x4d4c>
   15b54:	mov	r3, #8
   15b58:	sub	r2, r5, r2
   15b5c:	mov	r0, r6
   15b60:	str	r3, [sp]
   15b64:	add	r2, r2, #1
   15b68:	mvn	r3, #-2147483648	; 0x80000000
   15b6c:	add	r1, sp, #44	; 0x2c
   15b70:	bl	18b1c <__assert_fail@plt+0x7bec>
   15b74:	mov	r6, r0
   15b78:	str	r0, [r4]
   15b7c:	ldr	r0, [r4, #4]
   15b80:	ldr	r2, [sp, #44]	; 0x2c
   15b84:	mov	r1, #0
   15b88:	sub	r2, r2, r0
   15b8c:	add	r0, r6, r0, lsl #3
   15b90:	lsl	r2, r2, #3
   15b94:	bl	10e64 <memset@plt>
   15b98:	ldr	r3, [sp, #44]	; 0x2c
   15b9c:	str	r3, [r4, #4]
   15ba0:	ldr	r4, [pc, #268]	; 15cb4 <__assert_fail@plt+0x4d84>
   15ba4:	add	r3, r6, r5, lsl #3
   15ba8:	str	r3, [sp, #32]
   15bac:	ldr	r7, [r3, #4]
   15bb0:	ldr	r0, [r4, #4]
   15bb4:	ldr	r3, [r4]
   15bb8:	ldr	r9, [r6, r5, lsl #3]
   15bbc:	ldr	r1, [r4, #44]	; 0x2c
   15bc0:	ldr	r2, [r4, #40]	; 0x28
   15bc4:	orr	r0, r0, #1
   15bc8:	str	r3, [sp]
   15bcc:	add	r3, r4, #8
   15bd0:	str	r0, [sp, #36]	; 0x24
   15bd4:	str	r0, [sp, #4]
   15bd8:	str	r1, [sp, #16]
   15bdc:	str	r2, [sp, #12]
   15be0:	str	r3, [sp, #8]
   15be4:	mov	r0, r7
   15be8:	mov	r1, r9
   15bec:	mov	r3, fp
   15bf0:	mov	r2, sl
   15bf4:	bl	14024 <__assert_fail@plt+0x30f4>
   15bf8:	cmp	r9, r0
   15bfc:	bhi	15c68 <__assert_fail@plt+0x4d38>
   15c00:	add	r3, r4, #48	; 0x30
   15c04:	add	r9, r0, #1
   15c08:	cmp	r7, r3
   15c0c:	str	r9, [r6, r5, lsl #3]
   15c10:	beq	15c1c <__assert_fail@plt+0x4cec>
   15c14:	mov	r0, r7
   15c18:	bl	13d58 <__assert_fail@plt+0x2e28>
   15c1c:	mov	r0, r9
   15c20:	bl	18900 <__assert_fail@plt+0x79d0>
   15c24:	ldr	ip, [sp, #32]
   15c28:	ldr	lr, [r4, #44]	; 0x2c
   15c2c:	ldr	r5, [r4, #40]	; 0x28
   15c30:	mov	r3, fp
   15c34:	mov	r2, sl
   15c38:	mov	r1, r9
   15c3c:	str	r0, [ip, #4]
   15c40:	ldr	ip, [r4]
   15c44:	ldr	r4, [pc, #108]	; 15cb8 <__assert_fail@plt+0x4d88>
   15c48:	str	lr, [sp, #16]
   15c4c:	str	r4, [sp, #8]
   15c50:	ldr	r4, [sp, #36]	; 0x24
   15c54:	str	r5, [sp, #12]
   15c58:	str	r4, [sp, #4]
   15c5c:	str	ip, [sp]
   15c60:	mov	r7, r0
   15c64:	bl	14024 <__assert_fail@plt+0x30f4>
   15c68:	ldr	r3, [sp, #28]
   15c6c:	mov	r0, r7
   15c70:	str	r3, [r8]
   15c74:	add	sp, sp, #52	; 0x34
   15c78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c7c:	mov	r3, #8
   15c80:	sub	r2, r5, r2
   15c84:	str	r3, [sp]
   15c88:	add	r1, sp, #44	; 0x2c
   15c8c:	add	r2, r2, #1
   15c90:	mvn	r3, #-2147483648	; 0x80000000
   15c94:	bl	18b1c <__assert_fail@plt+0x7bec>
   15c98:	mov	r6, r0
   15c9c:	ldm	r7, {r0, r1}
   15ca0:	str	r6, [r4]
   15ca4:	stm	r6, {r0, r1}
   15ca8:	b	15b7c <__assert_fail@plt+0x4c4c>
   15cac:	bl	10f24 <abort@plt>
   15cb0:	strdeq	ip, [r2], -r4
   15cb4:	andeq	ip, r2, r0, lsl #3
   15cb8:	andeq	ip, r2, r8, lsl #3
   15cbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cc0:	sub	sp, sp, #44	; 0x2c
   15cc4:	mov	sl, r0
   15cc8:	bl	10e4c <__errno_location@plt>
   15ccc:	ldr	r4, [pc, #352]	; 15e34 <__assert_fail@plt+0x4f04>
   15cd0:	ldr	r2, [r4, #4]
   15cd4:	ldr	r5, [r4]
   15cd8:	cmp	r2, #0
   15cdc:	ldr	r3, [r0]
   15ce0:	mov	r8, r0
   15ce4:	str	r3, [sp, #28]
   15ce8:	bgt	15d44 <__assert_fail@plt+0x4e14>
   15cec:	add	r6, r4, #8
   15cf0:	cmp	r5, r6
   15cf4:	str	r2, [sp, #36]	; 0x24
   15cf8:	beq	15e04 <__assert_fail@plt+0x4ed4>
   15cfc:	mov	r3, #8
   15d00:	mov	r0, r5
   15d04:	str	r3, [sp]
   15d08:	rsb	r2, r2, #1
   15d0c:	mvn	r3, #-2147483648	; 0x80000000
   15d10:	add	r1, sp, #36	; 0x24
   15d14:	bl	18b1c <__assert_fail@plt+0x7bec>
   15d18:	mov	r5, r0
   15d1c:	str	r0, [r4]
   15d20:	ldr	r0, [r4, #4]
   15d24:	ldr	r2, [sp, #36]	; 0x24
   15d28:	mov	r1, #0
   15d2c:	sub	r2, r2, r0
   15d30:	add	r0, r5, r0, lsl #3
   15d34:	lsl	r2, r2, #3
   15d38:	bl	10e64 <memset@plt>
   15d3c:	ldr	r3, [sp, #36]	; 0x24
   15d40:	str	r3, [r4, #4]
   15d44:	ldr	r4, [pc, #236]	; 15e38 <__assert_fail@plt+0x4f08>
   15d48:	ldr	r9, [r5]
   15d4c:	ldr	r6, [r5, #4]
   15d50:	ldr	r7, [r4, #4]
   15d54:	ldr	r1, [r4, #44]	; 0x2c
   15d58:	ldr	r2, [r4, #40]	; 0x28
   15d5c:	ldr	r3, [r4]
   15d60:	orr	r7, r7, #1
   15d64:	add	fp, r4, #8
   15d68:	str	r1, [sp, #16]
   15d6c:	str	r2, [sp, #12]
   15d70:	str	r3, [sp]
   15d74:	str	r7, [sp, #4]
   15d78:	str	fp, [sp, #8]
   15d7c:	mov	r1, r9
   15d80:	mov	r0, r6
   15d84:	mvn	r3, #0
   15d88:	mov	r2, sl
   15d8c:	bl	14024 <__assert_fail@plt+0x30f4>
   15d90:	cmp	r9, r0
   15d94:	bhi	15df0 <__assert_fail@plt+0x4ec0>
   15d98:	add	r3, r4, #48	; 0x30
   15d9c:	add	r9, r0, #1
   15da0:	cmp	r6, r3
   15da4:	str	r9, [r5]
   15da8:	beq	15db4 <__assert_fail@plt+0x4e84>
   15dac:	mov	r0, r6
   15db0:	bl	13d58 <__assert_fail@plt+0x2e28>
   15db4:	mov	r0, r9
   15db8:	bl	18900 <__assert_fail@plt+0x79d0>
   15dbc:	ldr	ip, [r4, #44]	; 0x2c
   15dc0:	ldr	r3, [r4]
   15dc4:	ldr	lr, [r4, #40]	; 0x28
   15dc8:	mov	r2, sl
   15dcc:	mov	r1, r9
   15dd0:	str	r0, [r5, #4]
   15dd4:	str	r3, [sp]
   15dd8:	stmib	sp, {r7, fp}
   15ddc:	str	ip, [sp, #16]
   15de0:	str	lr, [sp, #12]
   15de4:	mvn	r3, #0
   15de8:	mov	r6, r0
   15dec:	bl	14024 <__assert_fail@plt+0x30f4>
   15df0:	ldr	r3, [sp, #28]
   15df4:	mov	r0, r6
   15df8:	str	r3, [r8]
   15dfc:	add	sp, sp, #44	; 0x2c
   15e00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e04:	mov	r3, #8
   15e08:	str	r3, [sp]
   15e0c:	add	r1, sp, #36	; 0x24
   15e10:	rsb	r2, r2, #1
   15e14:	mvn	r3, #-2147483648	; 0x80000000
   15e18:	mov	r0, #0
   15e1c:	bl	18b1c <__assert_fail@plt+0x7bec>
   15e20:	mov	r5, r0
   15e24:	ldm	r6, {r0, r1}
   15e28:	str	r5, [r4]
   15e2c:	stm	r5, {r0, r1}
   15e30:	b	15d20 <__assert_fail@plt+0x4df0>
   15e34:	strdeq	ip, [r2], -r4
   15e38:	andeq	ip, r2, r0, lsl #3
   15e3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e40:	sub	sp, sp, #44	; 0x2c
   15e44:	mov	r9, r0
   15e48:	mov	sl, r1
   15e4c:	bl	10e4c <__errno_location@plt>
   15e50:	ldr	r4, [pc, #364]	; 15fc4 <__assert_fail@plt+0x5094>
   15e54:	ldr	r2, [r4, #4]
   15e58:	ldr	r5, [r4]
   15e5c:	cmp	r2, #0
   15e60:	ldr	r3, [r0]
   15e64:	mov	r7, r0
   15e68:	str	r3, [sp, #24]
   15e6c:	bgt	15ec8 <__assert_fail@plt+0x4f98>
   15e70:	add	r6, r4, #8
   15e74:	cmp	r5, r6
   15e78:	str	r2, [sp, #36]	; 0x24
   15e7c:	beq	15f94 <__assert_fail@plt+0x5064>
   15e80:	mov	r3, #8
   15e84:	mov	r0, r5
   15e88:	str	r3, [sp]
   15e8c:	rsb	r2, r2, #1
   15e90:	mvn	r3, #-2147483648	; 0x80000000
   15e94:	add	r1, sp, #36	; 0x24
   15e98:	bl	18b1c <__assert_fail@plt+0x7bec>
   15e9c:	mov	r5, r0
   15ea0:	str	r0, [r4]
   15ea4:	ldr	r0, [r4, #4]
   15ea8:	ldr	r2, [sp, #36]	; 0x24
   15eac:	mov	r1, #0
   15eb0:	sub	r2, r2, r0
   15eb4:	add	r0, r5, r0, lsl #3
   15eb8:	lsl	r2, r2, #3
   15ebc:	bl	10e64 <memset@plt>
   15ec0:	ldr	r3, [sp, #36]	; 0x24
   15ec4:	str	r3, [r4, #4]
   15ec8:	ldr	r4, [pc, #248]	; 15fc8 <__assert_fail@plt+0x5098>
   15ecc:	ldr	r8, [r5]
   15ed0:	ldr	r6, [r5, #4]
   15ed4:	ldr	r0, [r4, #4]
   15ed8:	ldr	r1, [r4, #44]	; 0x2c
   15edc:	ldr	r2, [r4, #40]	; 0x28
   15ee0:	ldr	r3, [r4]
   15ee4:	orr	r0, r0, #1
   15ee8:	add	fp, r4, #8
   15eec:	str	r0, [sp, #28]
   15ef0:	str	r0, [sp, #4]
   15ef4:	str	r1, [sp, #16]
   15ef8:	str	r2, [sp, #12]
   15efc:	str	r3, [sp]
   15f00:	str	fp, [sp, #8]
   15f04:	mov	r1, r8
   15f08:	mov	r0, r6
   15f0c:	mov	r3, sl
   15f10:	mov	r2, r9
   15f14:	bl	14024 <__assert_fail@plt+0x30f4>
   15f18:	cmp	r8, r0
   15f1c:	bhi	15f80 <__assert_fail@plt+0x5050>
   15f20:	add	r3, r4, #48	; 0x30
   15f24:	add	r8, r0, #1
   15f28:	cmp	r6, r3
   15f2c:	str	r8, [r5]
   15f30:	beq	15f3c <__assert_fail@plt+0x500c>
   15f34:	mov	r0, r6
   15f38:	bl	13d58 <__assert_fail@plt+0x2e28>
   15f3c:	mov	r0, r8
   15f40:	bl	18900 <__assert_fail@plt+0x79d0>
   15f44:	ldr	lr, [r4, #44]	; 0x2c
   15f48:	ldr	ip, [r4]
   15f4c:	mov	r3, sl
   15f50:	mov	r2, r9
   15f54:	mov	r1, r8
   15f58:	str	r0, [r5, #4]
   15f5c:	ldr	r5, [r4, #40]	; 0x28
   15f60:	ldr	r4, [sp, #28]
   15f64:	str	fp, [sp, #8]
   15f68:	str	r4, [sp, #4]
   15f6c:	str	lr, [sp, #16]
   15f70:	str	r5, [sp, #12]
   15f74:	str	ip, [sp]
   15f78:	mov	r6, r0
   15f7c:	bl	14024 <__assert_fail@plt+0x30f4>
   15f80:	ldr	r3, [sp, #24]
   15f84:	mov	r0, r6
   15f88:	str	r3, [r7]
   15f8c:	add	sp, sp, #44	; 0x2c
   15f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f94:	mov	r3, #8
   15f98:	str	r3, [sp]
   15f9c:	add	r1, sp, #36	; 0x24
   15fa0:	rsb	r2, r2, #1
   15fa4:	mvn	r3, #-2147483648	; 0x80000000
   15fa8:	mov	r0, #0
   15fac:	bl	18b1c <__assert_fail@plt+0x7bec>
   15fb0:	mov	r5, r0
   15fb4:	ldm	r6, {r0, r1}
   15fb8:	str	r5, [r4]
   15fbc:	stm	r5, {r0, r1}
   15fc0:	b	15ea4 <__assert_fail@plt+0x4f74>
   15fc4:	strdeq	ip, [r2], -r4
   15fc8:	andeq	ip, r2, r0, lsl #3
   15fcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fd0:	sub	sp, sp, #132	; 0x84
   15fd4:	mov	r5, r1
   15fd8:	mov	r4, r0
   15fdc:	mov	r9, r2
   15fe0:	add	r0, sp, #80	; 0x50
   15fe4:	mov	r2, #48	; 0x30
   15fe8:	mov	r1, #0
   15fec:	bl	10e64 <memset@plt>
   15ff0:	cmp	r5, #10
   15ff4:	beq	161ac <__assert_fail@plt+0x527c>
   15ff8:	add	lr, sp, #80	; 0x50
   15ffc:	str	r5, [sp, #80]	; 0x50
   16000:	ldm	lr!, {r0, r1, r2, r3}
   16004:	add	ip, sp, #32
   16008:	ldr	r6, [pc, #416]	; 161b0 <__assert_fail@plt+0x5280>
   1600c:	stmia	ip!, {r0, r1, r2, r3}
   16010:	ldm	lr!, {r0, r1, r2, r3}
   16014:	stmia	ip!, {r0, r1, r2, r3}
   16018:	ldm	lr, {r0, r1, r2, r3}
   1601c:	stm	ip, {r0, r1, r2, r3}
   16020:	bl	10e4c <__errno_location@plt>
   16024:	cmn	r4, #-2147483647	; 0x80000001
   16028:	ldr	r5, [r6]
   1602c:	mov	r7, r0
   16030:	movne	r0, #0
   16034:	moveq	r0, #1
   16038:	ldr	r3, [r7]
   1603c:	orrs	r0, r0, r4, lsr #31
   16040:	str	r3, [sp, #24]
   16044:	bne	161ac <__assert_fail@plt+0x527c>
   16048:	ldr	r2, [r6, #4]
   1604c:	cmp	r4, r2
   16050:	blt	160b0 <__assert_fail@plt+0x5180>
   16054:	add	r8, r6, #8
   16058:	cmp	r5, r8
   1605c:	str	r2, [sp, #80]	; 0x50
   16060:	beq	1617c <__assert_fail@plt+0x524c>
   16064:	mov	r3, #8
   16068:	sub	r2, r4, r2
   1606c:	mov	r0, r5
   16070:	str	r3, [sp]
   16074:	add	r2, r2, #1
   16078:	add	r1, sp, #80	; 0x50
   1607c:	mvn	r3, #-2147483648	; 0x80000000
   16080:	bl	18b1c <__assert_fail@plt+0x7bec>
   16084:	mov	r5, r0
   16088:	str	r0, [r6]
   1608c:	ldr	r0, [r6, #4]
   16090:	ldr	r2, [sp, #80]	; 0x50
   16094:	mov	r1, #0
   16098:	sub	r2, r2, r0
   1609c:	add	r0, r5, r0, lsl #3
   160a0:	lsl	r2, r2, #3
   160a4:	bl	10e64 <memset@plt>
   160a8:	ldr	r3, [sp, #80]	; 0x50
   160ac:	str	r3, [r6, #4]
   160b0:	add	fp, r5, r4, lsl #3
   160b4:	ldr	r1, [sp, #36]	; 0x24
   160b8:	ldr	r8, [r5, r4, lsl #3]
   160bc:	ldr	r6, [fp, #4]
   160c0:	ldr	r2, [sp, #72]	; 0x48
   160c4:	ldr	r3, [sp, #32]
   160c8:	ldr	ip, [sp, #76]	; 0x4c
   160cc:	orr	r1, r1, #1
   160d0:	add	sl, sp, #40	; 0x28
   160d4:	str	r1, [sp, #28]
   160d8:	str	r1, [sp, #4]
   160dc:	str	r2, [sp, #12]
   160e0:	str	r3, [sp]
   160e4:	mov	r0, r6
   160e8:	mov	r1, r8
   160ec:	str	ip, [sp, #16]
   160f0:	str	sl, [sp, #8]
   160f4:	mvn	r3, #0
   160f8:	mov	r2, r9
   160fc:	bl	14024 <__assert_fail@plt+0x30f4>
   16100:	cmp	r8, r0
   16104:	bhi	16168 <__assert_fail@plt+0x5238>
   16108:	ldr	r3, [pc, #164]	; 161b4 <__assert_fail@plt+0x5284>
   1610c:	add	r8, r0, #1
   16110:	cmp	r6, r3
   16114:	str	r8, [r5, r4, lsl #3]
   16118:	beq	16124 <__assert_fail@plt+0x51f4>
   1611c:	mov	r0, r6
   16120:	bl	13d58 <__assert_fail@plt+0x2e28>
   16124:	mov	r0, r8
   16128:	bl	18900 <__assert_fail@plt+0x79d0>
   1612c:	ldr	lr, [sp, #76]	; 0x4c
   16130:	ldr	r3, [sp, #32]
   16134:	ldr	ip, [sp, #72]	; 0x48
   16138:	ldr	r4, [sp, #28]
   1613c:	mov	r2, r9
   16140:	mov	r1, r8
   16144:	str	r0, [fp, #4]
   16148:	str	r3, [sp]
   1614c:	str	sl, [sp, #8]
   16150:	str	r4, [sp, #4]
   16154:	str	lr, [sp, #16]
   16158:	str	ip, [sp, #12]
   1615c:	mvn	r3, #0
   16160:	mov	r6, r0
   16164:	bl	14024 <__assert_fail@plt+0x30f4>
   16168:	ldr	r3, [sp, #24]
   1616c:	mov	r0, r6
   16170:	str	r3, [r7]
   16174:	add	sp, sp, #132	; 0x84
   16178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1617c:	mov	r3, #8
   16180:	sub	r2, r4, r2
   16184:	add	r1, sp, #80	; 0x50
   16188:	str	r3, [sp]
   1618c:	add	r2, r2, #1
   16190:	mvn	r3, #-2147483648	; 0x80000000
   16194:	bl	18b1c <__assert_fail@plt+0x7bec>
   16198:	mov	r5, r0
   1619c:	ldm	r8, {r0, r1}
   161a0:	str	r5, [r6]
   161a4:	stm	r5, {r0, r1}
   161a8:	b	1608c <__assert_fail@plt+0x515c>
   161ac:	bl	10f24 <abort@plt>
   161b0:	strdeq	ip, [r2], -r4
   161b4:			; <UNDEFINED> instruction: 0x0002c1b0
   161b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161bc:	sub	sp, sp, #132	; 0x84
   161c0:	mov	r5, r1
   161c4:	mov	r4, r0
   161c8:	mov	r9, r2
   161cc:	add	r0, sp, #80	; 0x50
   161d0:	mov	r2, #48	; 0x30
   161d4:	mov	r1, #0
   161d8:	mov	sl, r3
   161dc:	bl	10e64 <memset@plt>
   161e0:	cmp	r5, #10
   161e4:	beq	163a0 <__assert_fail@plt+0x5470>
   161e8:	add	lr, sp, #80	; 0x50
   161ec:	str	r5, [sp, #80]	; 0x50
   161f0:	ldm	lr!, {r0, r1, r2, r3}
   161f4:	add	ip, sp, #32
   161f8:	ldr	r6, [pc, #420]	; 163a4 <__assert_fail@plt+0x5474>
   161fc:	stmia	ip!, {r0, r1, r2, r3}
   16200:	ldm	lr!, {r0, r1, r2, r3}
   16204:	stmia	ip!, {r0, r1, r2, r3}
   16208:	ldm	lr, {r0, r1, r2, r3}
   1620c:	stm	ip, {r0, r1, r2, r3}
   16210:	bl	10e4c <__errno_location@plt>
   16214:	cmn	r4, #-2147483647	; 0x80000001
   16218:	ldr	r5, [r6]
   1621c:	mov	r7, r0
   16220:	movne	r0, #0
   16224:	moveq	r0, #1
   16228:	ldr	r3, [r7]
   1622c:	orrs	r0, r0, r4, lsr #31
   16230:	str	r3, [sp, #24]
   16234:	bne	163a0 <__assert_fail@plt+0x5470>
   16238:	ldr	r2, [r6, #4]
   1623c:	cmp	r4, r2
   16240:	blt	162a0 <__assert_fail@plt+0x5370>
   16244:	add	r8, r6, #8
   16248:	cmp	r5, r8
   1624c:	str	r2, [sp, #80]	; 0x50
   16250:	beq	16370 <__assert_fail@plt+0x5440>
   16254:	mov	r3, #8
   16258:	sub	r2, r4, r2
   1625c:	mov	r0, r5
   16260:	str	r3, [sp]
   16264:	add	r2, r2, #1
   16268:	add	r1, sp, #80	; 0x50
   1626c:	mvn	r3, #-2147483648	; 0x80000000
   16270:	bl	18b1c <__assert_fail@plt+0x7bec>
   16274:	mov	r5, r0
   16278:	str	r0, [r6]
   1627c:	ldr	r0, [r6, #4]
   16280:	ldr	r2, [sp, #80]	; 0x50
   16284:	mov	r1, #0
   16288:	sub	r2, r2, r0
   1628c:	add	r0, r5, r0, lsl #3
   16290:	lsl	r2, r2, #3
   16294:	bl	10e64 <memset@plt>
   16298:	ldr	r3, [sp, #80]	; 0x50
   1629c:	str	r3, [r6, #4]
   162a0:	add	fp, r5, r4, lsl #3
   162a4:	ldr	r3, [sp, #32]
   162a8:	ldr	r1, [sp, #36]	; 0x24
   162ac:	ldr	r8, [r5, r4, lsl #3]
   162b0:	ldr	r6, [fp, #4]
   162b4:	ldr	r2, [sp, #72]	; 0x48
   162b8:	ldr	ip, [sp, #76]	; 0x4c
   162bc:	orr	r1, r1, #1
   162c0:	str	r3, [sp]
   162c4:	add	r3, sp, #40	; 0x28
   162c8:	str	r1, [sp, #28]
   162cc:	str	r1, [sp, #4]
   162d0:	str	r2, [sp, #12]
   162d4:	str	r3, [sp, #8]
   162d8:	mov	r0, r6
   162dc:	mov	r1, r8
   162e0:	str	ip, [sp, #16]
   162e4:	mov	r3, sl
   162e8:	mov	r2, r9
   162ec:	bl	14024 <__assert_fail@plt+0x30f4>
   162f0:	cmp	r8, r0
   162f4:	bhi	1635c <__assert_fail@plt+0x542c>
   162f8:	ldr	r3, [pc, #168]	; 163a8 <__assert_fail@plt+0x5478>
   162fc:	add	r8, r0, #1
   16300:	cmp	r6, r3
   16304:	str	r8, [r5, r4, lsl #3]
   16308:	beq	16314 <__assert_fail@plt+0x53e4>
   1630c:	mov	r0, r6
   16310:	bl	13d58 <__assert_fail@plt+0x2e28>
   16314:	mov	r0, r8
   16318:	bl	18900 <__assert_fail@plt+0x79d0>
   1631c:	add	lr, sp, #40	; 0x28
   16320:	ldr	ip, [sp, #76]	; 0x4c
   16324:	ldr	r4, [sp, #72]	; 0x48
   16328:	ldr	r5, [sp, #28]
   1632c:	mov	r3, sl
   16330:	mov	r2, r9
   16334:	mov	r1, r8
   16338:	str	r0, [fp, #4]
   1633c:	str	lr, [sp, #8]
   16340:	ldr	lr, [sp, #32]
   16344:	str	r5, [sp, #4]
   16348:	str	ip, [sp, #16]
   1634c:	str	r4, [sp, #12]
   16350:	str	lr, [sp]
   16354:	mov	r6, r0
   16358:	bl	14024 <__assert_fail@plt+0x30f4>
   1635c:	ldr	r3, [sp, #24]
   16360:	mov	r0, r6
   16364:	str	r3, [r7]
   16368:	add	sp, sp, #132	; 0x84
   1636c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16370:	mov	r3, #8
   16374:	sub	r2, r4, r2
   16378:	add	r1, sp, #80	; 0x50
   1637c:	str	r3, [sp]
   16380:	add	r2, r2, #1
   16384:	mvn	r3, #-2147483648	; 0x80000000
   16388:	bl	18b1c <__assert_fail@plt+0x7bec>
   1638c:	mov	r5, r0
   16390:	ldm	r8, {r0, r1}
   16394:	str	r5, [r6]
   16398:	stm	r5, {r0, r1}
   1639c:	b	1627c <__assert_fail@plt+0x534c>
   163a0:	bl	10f24 <abort@plt>
   163a4:	strdeq	ip, [r2], -r4
   163a8:			; <UNDEFINED> instruction: 0x0002c1b0
   163ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163b0:	sub	sp, sp, #124	; 0x7c
   163b4:	mov	r4, r0
   163b8:	mov	r9, r1
   163bc:	add	r0, sp, #72	; 0x48
   163c0:	mov	r2, #48	; 0x30
   163c4:	mov	r1, #0
   163c8:	bl	10e64 <memset@plt>
   163cc:	cmp	r4, #10
   163d0:	beq	1655c <__assert_fail@plt+0x562c>
   163d4:	add	lr, sp, #72	; 0x48
   163d8:	str	r4, [sp, #72]	; 0x48
   163dc:	ldm	lr!, {r0, r1, r2, r3}
   163e0:	add	ip, sp, #24
   163e4:	ldr	r5, [pc, #372]	; 16560 <__assert_fail@plt+0x5630>
   163e8:	stmia	ip!, {r0, r1, r2, r3}
   163ec:	ldm	lr!, {r0, r1, r2, r3}
   163f0:	stmia	ip!, {r0, r1, r2, r3}
   163f4:	ldm	lr, {r0, r1, r2, r3}
   163f8:	stm	ip, {r0, r1, r2, r3}
   163fc:	bl	10e4c <__errno_location@plt>
   16400:	ldr	r2, [r5, #4]
   16404:	ldr	r4, [r5]
   16408:	cmp	r2, #0
   1640c:	mov	r7, r0
   16410:	ldr	fp, [r0]
   16414:	bgt	16470 <__assert_fail@plt+0x5540>
   16418:	add	r6, r5, #8
   1641c:	cmp	r4, r6
   16420:	str	r2, [sp, #72]	; 0x48
   16424:	beq	1652c <__assert_fail@plt+0x55fc>
   16428:	mov	r3, #8
   1642c:	mov	r0, r4
   16430:	str	r3, [sp]
   16434:	rsb	r2, r2, #1
   16438:	add	r1, sp, #72	; 0x48
   1643c:	mvn	r3, #-2147483648	; 0x80000000
   16440:	bl	18b1c <__assert_fail@plt+0x7bec>
   16444:	mov	r4, r0
   16448:	str	r0, [r5]
   1644c:	ldr	r0, [r5, #4]
   16450:	ldr	r2, [sp, #72]	; 0x48
   16454:	mov	r1, #0
   16458:	sub	r2, r2, r0
   1645c:	add	r0, r4, r0, lsl #3
   16460:	lsl	r2, r2, #3
   16464:	bl	10e64 <memset@plt>
   16468:	ldr	r3, [sp, #72]	; 0x48
   1646c:	str	r3, [r5, #4]
   16470:	ldr	r6, [sp, #28]
   16474:	ldr	r8, [r4]
   16478:	ldr	r5, [r4, #4]
   1647c:	ldr	r2, [sp, #64]	; 0x40
   16480:	ldr	r3, [sp, #24]
   16484:	ldr	ip, [sp, #68]	; 0x44
   16488:	orr	r6, r6, #1
   1648c:	add	sl, sp, #32
   16490:	str	r2, [sp, #12]
   16494:	str	r3, [sp]
   16498:	str	r6, [sp, #4]
   1649c:	mov	r1, r8
   164a0:	mov	r0, r5
   164a4:	str	ip, [sp, #16]
   164a8:	str	sl, [sp, #8]
   164ac:	mvn	r3, #0
   164b0:	mov	r2, r9
   164b4:	bl	14024 <__assert_fail@plt+0x30f4>
   164b8:	cmp	r8, r0
   164bc:	bhi	1651c <__assert_fail@plt+0x55ec>
   164c0:	ldr	r3, [pc, #156]	; 16564 <__assert_fail@plt+0x5634>
   164c4:	add	r8, r0, #1
   164c8:	cmp	r5, r3
   164cc:	str	r8, [r4]
   164d0:	beq	164dc <__assert_fail@plt+0x55ac>
   164d4:	mov	r0, r5
   164d8:	bl	13d58 <__assert_fail@plt+0x2e28>
   164dc:	mov	r0, r8
   164e0:	bl	18900 <__assert_fail@plt+0x79d0>
   164e4:	ldr	lr, [sp, #68]	; 0x44
   164e8:	ldr	r3, [sp, #24]
   164ec:	ldr	ip, [sp, #64]	; 0x40
   164f0:	mov	r2, r9
   164f4:	mov	r1, r8
   164f8:	str	r0, [r4, #4]
   164fc:	str	r3, [sp]
   16500:	str	sl, [sp, #8]
   16504:	str	r6, [sp, #4]
   16508:	str	lr, [sp, #16]
   1650c:	str	ip, [sp, #12]
   16510:	mvn	r3, #0
   16514:	mov	r5, r0
   16518:	bl	14024 <__assert_fail@plt+0x30f4>
   1651c:	mov	r0, r5
   16520:	str	fp, [r7]
   16524:	add	sp, sp, #124	; 0x7c
   16528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1652c:	mov	r3, #8
   16530:	add	r1, sp, #72	; 0x48
   16534:	str	r3, [sp]
   16538:	rsb	r2, r2, #1
   1653c:	mvn	r3, #-2147483648	; 0x80000000
   16540:	mov	r0, #0
   16544:	bl	18b1c <__assert_fail@plt+0x7bec>
   16548:	mov	r4, r0
   1654c:	ldm	r6, {r0, r1}
   16550:	str	r4, [r5]
   16554:	stm	r4, {r0, r1}
   16558:	b	1644c <__assert_fail@plt+0x551c>
   1655c:	bl	10f24 <abort@plt>
   16560:	strdeq	ip, [r2], -r4
   16564:			; <UNDEFINED> instruction: 0x0002c1b0
   16568:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1656c:	sub	sp, sp, #132	; 0x84
   16570:	mov	r4, r0
   16574:	mov	r9, r1
   16578:	mov	sl, r2
   1657c:	add	r0, sp, #80	; 0x50
   16580:	mov	r2, #48	; 0x30
   16584:	mov	r1, #0
   16588:	bl	10e64 <memset@plt>
   1658c:	cmp	r4, #10
   16590:	beq	16724 <__assert_fail@plt+0x57f4>
   16594:	add	lr, sp, #80	; 0x50
   16598:	str	r4, [sp, #80]	; 0x50
   1659c:	ldm	lr!, {r0, r1, r2, r3}
   165a0:	add	ip, sp, #32
   165a4:	ldr	r5, [pc, #380]	; 16728 <__assert_fail@plt+0x57f8>
   165a8:	stmia	ip!, {r0, r1, r2, r3}
   165ac:	ldm	lr!, {r0, r1, r2, r3}
   165b0:	stmia	ip!, {r0, r1, r2, r3}
   165b4:	ldm	lr, {r0, r1, r2, r3}
   165b8:	stm	ip, {r0, r1, r2, r3}
   165bc:	bl	10e4c <__errno_location@plt>
   165c0:	ldr	r2, [r5, #4]
   165c4:	ldr	r4, [r5]
   165c8:	cmp	r2, #0
   165cc:	ldr	r3, [r0]
   165d0:	mov	r7, r0
   165d4:	str	r3, [sp, #28]
   165d8:	bgt	16634 <__assert_fail@plt+0x5704>
   165dc:	add	r6, r5, #8
   165e0:	cmp	r4, r6
   165e4:	str	r2, [sp, #80]	; 0x50
   165e8:	beq	166f4 <__assert_fail@plt+0x57c4>
   165ec:	mov	r3, #8
   165f0:	mov	r0, r4
   165f4:	str	r3, [sp]
   165f8:	rsb	r2, r2, #1
   165fc:	add	r1, sp, #80	; 0x50
   16600:	mvn	r3, #-2147483648	; 0x80000000
   16604:	bl	18b1c <__assert_fail@plt+0x7bec>
   16608:	mov	r4, r0
   1660c:	str	r0, [r5]
   16610:	ldr	r0, [r5, #4]
   16614:	ldr	r2, [sp, #80]	; 0x50
   16618:	mov	r1, #0
   1661c:	sub	r2, r2, r0
   16620:	add	r0, r4, r0, lsl #3
   16624:	lsl	r2, r2, #3
   16628:	bl	10e64 <memset@plt>
   1662c:	ldr	r3, [sp, #80]	; 0x50
   16630:	str	r3, [r5, #4]
   16634:	ldr	r6, [sp, #36]	; 0x24
   16638:	ldr	r8, [r4]
   1663c:	ldr	r5, [r4, #4]
   16640:	ldr	r2, [sp, #72]	; 0x48
   16644:	ldr	r3, [sp, #32]
   16648:	ldr	ip, [sp, #76]	; 0x4c
   1664c:	orr	r6, r6, #1
   16650:	add	fp, sp, #40	; 0x28
   16654:	str	r2, [sp, #12]
   16658:	str	r3, [sp]
   1665c:	str	r6, [sp, #4]
   16660:	mov	r1, r8
   16664:	mov	r0, r5
   16668:	str	ip, [sp, #16]
   1666c:	str	fp, [sp, #8]
   16670:	mov	r3, sl
   16674:	mov	r2, r9
   16678:	bl	14024 <__assert_fail@plt+0x30f4>
   1667c:	cmp	r8, r0
   16680:	bhi	166e0 <__assert_fail@plt+0x57b0>
   16684:	ldr	r3, [pc, #160]	; 1672c <__assert_fail@plt+0x57fc>
   16688:	add	r8, r0, #1
   1668c:	cmp	r5, r3
   16690:	str	r8, [r4]
   16694:	beq	166a0 <__assert_fail@plt+0x5770>
   16698:	mov	r0, r5
   1669c:	bl	13d58 <__assert_fail@plt+0x2e28>
   166a0:	mov	r0, r8
   166a4:	bl	18900 <__assert_fail@plt+0x79d0>
   166a8:	ldr	ip, [sp, #76]	; 0x4c
   166ac:	ldr	lr, [sp, #32]
   166b0:	mov	r3, sl
   166b4:	mov	r2, r9
   166b8:	mov	r1, r8
   166bc:	str	r0, [r4, #4]
   166c0:	ldr	r4, [sp, #72]	; 0x48
   166c4:	str	fp, [sp, #8]
   166c8:	str	r6, [sp, #4]
   166cc:	str	ip, [sp, #16]
   166d0:	str	r4, [sp, #12]
   166d4:	str	lr, [sp]
   166d8:	mov	r5, r0
   166dc:	bl	14024 <__assert_fail@plt+0x30f4>
   166e0:	ldr	r3, [sp, #28]
   166e4:	mov	r0, r5
   166e8:	str	r3, [r7]
   166ec:	add	sp, sp, #132	; 0x84
   166f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166f4:	mov	r3, #8
   166f8:	add	r1, sp, #80	; 0x50
   166fc:	str	r3, [sp]
   16700:	rsb	r2, r2, #1
   16704:	mvn	r3, #-2147483648	; 0x80000000
   16708:	mov	r0, #0
   1670c:	bl	18b1c <__assert_fail@plt+0x7bec>
   16710:	mov	r4, r0
   16714:	ldm	r6, {r0, r1}
   16718:	str	r4, [r5]
   1671c:	stm	r4, {r0, r1}
   16720:	b	16610 <__assert_fail@plt+0x56e0>
   16724:	bl	10f24 <abort@plt>
   16728:	strdeq	ip, [r2], -r4
   1672c:			; <UNDEFINED> instruction: 0x0002c1b0
   16730:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16734:	mov	r4, r2
   16738:	ldr	lr, [pc, #432]	; 168f0 <__assert_fail@plt+0x59c0>
   1673c:	mov	sl, r0
   16740:	mov	fp, r1
   16744:	ldm	lr!, {r0, r1, r2, r3}
   16748:	sub	sp, sp, #92	; 0x5c
   1674c:	add	ip, sp, #40	; 0x28
   16750:	lsr	r7, r4, #5
   16754:	stmia	ip!, {r0, r1, r2, r3}
   16758:	add	r6, sp, #48	; 0x30
   1675c:	ldm	lr!, {r0, r1, r2, r3}
   16760:	and	r4, r4, #31
   16764:	ldr	r5, [pc, #392]	; 168f4 <__assert_fail@plt+0x59c4>
   16768:	stmia	ip!, {r0, r1, r2, r3}
   1676c:	ldm	lr, {r0, r1, r2, r3}
   16770:	stm	ip, {r0, r1, r2, r3}
   16774:	ldr	r2, [r6, r7, lsl #2]
   16778:	lsr	r3, r2, r4
   1677c:	eor	r3, r3, #1
   16780:	and	r3, r3, #1
   16784:	eor	r4, r2, r3, lsl r4
   16788:	str	r4, [r6, r7, lsl #2]
   1678c:	bl	10e4c <__errno_location@plt>
   16790:	ldr	r2, [r5, #4]
   16794:	ldr	r4, [r5]
   16798:	cmp	r2, #0
   1679c:	ldr	r3, [r0]
   167a0:	mov	r8, r0
   167a4:	str	r3, [sp, #28]
   167a8:	bgt	16804 <__assert_fail@plt+0x58d4>
   167ac:	add	r7, r5, #8
   167b0:	cmp	r4, r7
   167b4:	str	r2, [sp, #36]	; 0x24
   167b8:	beq	168c0 <__assert_fail@plt+0x5990>
   167bc:	mov	r3, #8
   167c0:	mov	r0, r4
   167c4:	str	r3, [sp]
   167c8:	rsb	r2, r2, #1
   167cc:	mvn	r3, #-2147483648	; 0x80000000
   167d0:	add	r1, sp, #36	; 0x24
   167d4:	bl	18b1c <__assert_fail@plt+0x7bec>
   167d8:	mov	r4, r0
   167dc:	str	r0, [r5]
   167e0:	ldr	r0, [r5, #4]
   167e4:	ldr	r2, [sp, #36]	; 0x24
   167e8:	mov	r1, #0
   167ec:	sub	r2, r2, r0
   167f0:	add	r0, r4, r0, lsl #3
   167f4:	lsl	r2, r2, #3
   167f8:	bl	10e64 <memset@plt>
   167fc:	ldr	r3, [sp, #36]	; 0x24
   16800:	str	r3, [r5, #4]
   16804:	ldr	r7, [sp, #44]	; 0x2c
   16808:	ldr	r9, [r4]
   1680c:	ldr	r5, [r4, #4]
   16810:	ldr	r2, [sp, #80]	; 0x50
   16814:	ldr	r3, [sp, #40]	; 0x28
   16818:	ldr	ip, [sp, #84]	; 0x54
   1681c:	orr	r7, r7, #1
   16820:	str	r2, [sp, #12]
   16824:	str	r3, [sp]
   16828:	str	r7, [sp, #4]
   1682c:	str	r6, [sp, #8]
   16830:	mov	r1, r9
   16834:	mov	r0, r5
   16838:	str	ip, [sp, #16]
   1683c:	mov	r3, fp
   16840:	mov	r2, sl
   16844:	bl	14024 <__assert_fail@plt+0x30f4>
   16848:	cmp	r9, r0
   1684c:	bhi	168ac <__assert_fail@plt+0x597c>
   16850:	ldr	r3, [pc, #160]	; 168f8 <__assert_fail@plt+0x59c8>
   16854:	add	r9, r0, #1
   16858:	cmp	r5, r3
   1685c:	str	r9, [r4]
   16860:	beq	1686c <__assert_fail@plt+0x593c>
   16864:	mov	r0, r5
   16868:	bl	13d58 <__assert_fail@plt+0x2e28>
   1686c:	mov	r0, r9
   16870:	bl	18900 <__assert_fail@plt+0x79d0>
   16874:	ldr	ip, [sp, #84]	; 0x54
   16878:	ldr	lr, [sp, #40]	; 0x28
   1687c:	mov	r3, fp
   16880:	mov	r2, sl
   16884:	mov	r1, r9
   16888:	str	r0, [r4, #4]
   1688c:	ldr	r4, [sp, #80]	; 0x50
   16890:	str	r6, [sp, #8]
   16894:	str	r7, [sp, #4]
   16898:	str	ip, [sp, #16]
   1689c:	str	r4, [sp, #12]
   168a0:	str	lr, [sp]
   168a4:	mov	r5, r0
   168a8:	bl	14024 <__assert_fail@plt+0x30f4>
   168ac:	ldr	r3, [sp, #28]
   168b0:	mov	r0, r5
   168b4:	str	r3, [r8]
   168b8:	add	sp, sp, #92	; 0x5c
   168bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168c0:	mov	r3, #8
   168c4:	str	r3, [sp]
   168c8:	add	r1, sp, #36	; 0x24
   168cc:	rsb	r2, r2, #1
   168d0:	mvn	r3, #-2147483648	; 0x80000000
   168d4:	mov	r0, #0
   168d8:	bl	18b1c <__assert_fail@plt+0x7bec>
   168dc:	mov	r4, r0
   168e0:	ldm	r7, {r0, r1}
   168e4:	str	r4, [r5]
   168e8:	stm	r4, {r0, r1}
   168ec:	b	167e0 <__assert_fail@plt+0x58b0>
   168f0:	andeq	ip, r2, r0, lsl #3
   168f4:	strdeq	ip, [r2], -r4
   168f8:			; <UNDEFINED> instruction: 0x0002c1b0
   168fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16900:	mov	r4, r1
   16904:	ldr	lr, [pc, #420]	; 16ab0 <__assert_fail@plt+0x5b80>
   16908:	mov	r6, r0
   1690c:	sub	sp, sp, #84	; 0x54
   16910:	ldm	lr!, {r0, r1, r2, r3}
   16914:	add	ip, sp, #32
   16918:	lsr	r8, r4, #5
   1691c:	add	r5, sp, #40	; 0x28
   16920:	stmia	ip!, {r0, r1, r2, r3}
   16924:	and	r4, r4, #31
   16928:	ldm	lr!, {r0, r1, r2, r3}
   1692c:	ldr	r7, [pc, #384]	; 16ab4 <__assert_fail@plt+0x5b84>
   16930:	stmia	ip!, {r0, r1, r2, r3}
   16934:	ldm	lr, {r0, r1, r2, r3}
   16938:	stm	ip, {r0, r1, r2, r3}
   1693c:	ldr	r2, [r5, r8, lsl #2]
   16940:	lsr	r3, r2, r4
   16944:	eor	r3, r3, #1
   16948:	and	r3, r3, #1
   1694c:	eor	r4, r2, r3, lsl r4
   16950:	str	r4, [r5, r8, lsl #2]
   16954:	bl	10e4c <__errno_location@plt>
   16958:	ldr	r2, [r7, #4]
   1695c:	ldr	r4, [r7]
   16960:	cmp	r2, #0
   16964:	mov	r9, r0
   16968:	ldr	sl, [r0]
   1696c:	bgt	169c8 <__assert_fail@plt+0x5a98>
   16970:	add	r8, r7, #8
   16974:	cmp	r4, r8
   16978:	str	r2, [sp, #28]
   1697c:	beq	16a80 <__assert_fail@plt+0x5b50>
   16980:	mov	r3, #8
   16984:	mov	r0, r4
   16988:	str	r3, [sp]
   1698c:	rsb	r2, r2, #1
   16990:	mvn	r3, #-2147483648	; 0x80000000
   16994:	add	r1, sp, #28
   16998:	bl	18b1c <__assert_fail@plt+0x7bec>
   1699c:	mov	r4, r0
   169a0:	str	r0, [r7]
   169a4:	ldr	r0, [r7, #4]
   169a8:	ldr	r2, [sp, #28]
   169ac:	mov	r1, #0
   169b0:	sub	r2, r2, r0
   169b4:	add	r0, r4, r0, lsl #3
   169b8:	lsl	r2, r2, #3
   169bc:	bl	10e64 <memset@plt>
   169c0:	ldr	r3, [sp, #28]
   169c4:	str	r3, [r7, #4]
   169c8:	ldr	r8, [sp, #36]	; 0x24
   169cc:	ldr	fp, [r4]
   169d0:	ldr	r7, [r4, #4]
   169d4:	ldr	r2, [sp, #72]	; 0x48
   169d8:	ldr	r3, [sp, #32]
   169dc:	ldr	ip, [sp, #76]	; 0x4c
   169e0:	orr	r8, r8, #1
   169e4:	str	r2, [sp, #12]
   169e8:	str	r3, [sp]
   169ec:	str	r8, [sp, #4]
   169f0:	str	r5, [sp, #8]
   169f4:	mov	r1, fp
   169f8:	mov	r0, r7
   169fc:	str	ip, [sp, #16]
   16a00:	mvn	r3, #0
   16a04:	mov	r2, r6
   16a08:	bl	14024 <__assert_fail@plt+0x30f4>
   16a0c:	cmp	fp, r0
   16a10:	bhi	16a70 <__assert_fail@plt+0x5b40>
   16a14:	ldr	r3, [pc, #156]	; 16ab8 <__assert_fail@plt+0x5b88>
   16a18:	add	fp, r0, #1
   16a1c:	cmp	r7, r3
   16a20:	str	fp, [r4]
   16a24:	beq	16a30 <__assert_fail@plt+0x5b00>
   16a28:	mov	r0, r7
   16a2c:	bl	13d58 <__assert_fail@plt+0x2e28>
   16a30:	mov	r0, fp
   16a34:	bl	18900 <__assert_fail@plt+0x79d0>
   16a38:	ldr	lr, [sp, #76]	; 0x4c
   16a3c:	ldr	r3, [sp, #32]
   16a40:	ldr	ip, [sp, #72]	; 0x48
   16a44:	mov	r2, r6
   16a48:	mov	r1, fp
   16a4c:	str	r0, [r4, #4]
   16a50:	str	r3, [sp]
   16a54:	str	r5, [sp, #8]
   16a58:	str	r8, [sp, #4]
   16a5c:	str	lr, [sp, #16]
   16a60:	str	ip, [sp, #12]
   16a64:	mvn	r3, #0
   16a68:	mov	r7, r0
   16a6c:	bl	14024 <__assert_fail@plt+0x30f4>
   16a70:	mov	r0, r7
   16a74:	str	sl, [r9]
   16a78:	add	sp, sp, #84	; 0x54
   16a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a80:	mov	r3, #8
   16a84:	str	r3, [sp]
   16a88:	add	r1, sp, #28
   16a8c:	rsb	r2, r2, #1
   16a90:	mvn	r3, #-2147483648	; 0x80000000
   16a94:	mov	r0, #0
   16a98:	bl	18b1c <__assert_fail@plt+0x7bec>
   16a9c:	mov	r4, r0
   16aa0:	ldm	r8, {r0, r1}
   16aa4:	str	r4, [r7]
   16aa8:	stm	r4, {r0, r1}
   16aac:	b	169a4 <__assert_fail@plt+0x5a74>
   16ab0:	andeq	ip, r2, r0, lsl #3
   16ab4:	strdeq	ip, [r2], -r4
   16ab8:			; <UNDEFINED> instruction: 0x0002c1b0
   16abc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ac0:	mov	r6, r0
   16ac4:	ldr	lr, [pc, #404]	; 16c60 <__assert_fail@plt+0x5d30>
   16ac8:	sub	sp, sp, #84	; 0x54
   16acc:	add	ip, sp, #32
   16ad0:	ldm	lr!, {r0, r1, r2, r3}
   16ad4:	ldr	r5, [pc, #392]	; 16c64 <__assert_fail@plt+0x5d34>
   16ad8:	stmia	ip!, {r0, r1, r2, r3}
   16adc:	ldm	lr!, {r0, r1, r2, r3}
   16ae0:	ldr	r4, [sp, #44]	; 0x2c
   16ae4:	stmia	ip!, {r0, r1, r2, r3}
   16ae8:	ldm	lr, {r0, r1, r2, r3}
   16aec:	mvn	lr, r4
   16af0:	and	lr, lr, #67108864	; 0x4000000
   16af4:	eor	lr, lr, r4
   16af8:	stm	ip, {r0, r1, r2, r3}
   16afc:	str	lr, [sp, #44]	; 0x2c
   16b00:	bl	10e4c <__errno_location@plt>
   16b04:	ldr	r2, [r5, #4]
   16b08:	ldr	r4, [r5]
   16b0c:	cmp	r2, #0
   16b10:	mov	r8, r0
   16b14:	ldr	sl, [r0]
   16b18:	bgt	16b74 <__assert_fail@plt+0x5c44>
   16b1c:	add	r7, r5, #8
   16b20:	cmp	r4, r7
   16b24:	str	r2, [sp, #28]
   16b28:	beq	16c30 <__assert_fail@plt+0x5d00>
   16b2c:	mov	r3, #8
   16b30:	mov	r0, r4
   16b34:	str	r3, [sp]
   16b38:	rsb	r2, r2, #1
   16b3c:	mvn	r3, #-2147483648	; 0x80000000
   16b40:	add	r1, sp, #28
   16b44:	bl	18b1c <__assert_fail@plt+0x7bec>
   16b48:	mov	r4, r0
   16b4c:	str	r0, [r5]
   16b50:	ldr	r0, [r5, #4]
   16b54:	ldr	r2, [sp, #28]
   16b58:	mov	r1, #0
   16b5c:	sub	r2, r2, r0
   16b60:	add	r0, r4, r0, lsl #3
   16b64:	lsl	r2, r2, #3
   16b68:	bl	10e64 <memset@plt>
   16b6c:	ldr	r3, [sp, #28]
   16b70:	str	r3, [r5, #4]
   16b74:	ldr	r7, [sp, #36]	; 0x24
   16b78:	ldr	r9, [r4]
   16b7c:	ldr	r5, [r4, #4]
   16b80:	ldr	r2, [sp, #72]	; 0x48
   16b84:	ldr	r3, [sp, #32]
   16b88:	ldr	ip, [sp, #76]	; 0x4c
   16b8c:	orr	r7, r7, #1
   16b90:	add	fp, sp, #40	; 0x28
   16b94:	str	r2, [sp, #12]
   16b98:	str	r3, [sp]
   16b9c:	str	r7, [sp, #4]
   16ba0:	mov	r1, r9
   16ba4:	mov	r0, r5
   16ba8:	str	ip, [sp, #16]
   16bac:	str	fp, [sp, #8]
   16bb0:	mvn	r3, #0
   16bb4:	mov	r2, r6
   16bb8:	bl	14024 <__assert_fail@plt+0x30f4>
   16bbc:	cmp	r9, r0
   16bc0:	bhi	16c20 <__assert_fail@plt+0x5cf0>
   16bc4:	ldr	r3, [pc, #156]	; 16c68 <__assert_fail@plt+0x5d38>
   16bc8:	add	r9, r0, #1
   16bcc:	cmp	r5, r3
   16bd0:	str	r9, [r4]
   16bd4:	beq	16be0 <__assert_fail@plt+0x5cb0>
   16bd8:	mov	r0, r5
   16bdc:	bl	13d58 <__assert_fail@plt+0x2e28>
   16be0:	mov	r0, r9
   16be4:	bl	18900 <__assert_fail@plt+0x79d0>
   16be8:	ldr	lr, [sp, #76]	; 0x4c
   16bec:	ldr	r3, [sp, #32]
   16bf0:	ldr	ip, [sp, #72]	; 0x48
   16bf4:	mov	r2, r6
   16bf8:	mov	r1, r9
   16bfc:	str	r0, [r4, #4]
   16c00:	str	r3, [sp]
   16c04:	str	fp, [sp, #8]
   16c08:	str	r7, [sp, #4]
   16c0c:	str	lr, [sp, #16]
   16c10:	str	ip, [sp, #12]
   16c14:	mvn	r3, #0
   16c18:	mov	r5, r0
   16c1c:	bl	14024 <__assert_fail@plt+0x30f4>
   16c20:	mov	r0, r5
   16c24:	str	sl, [r8]
   16c28:	add	sp, sp, #84	; 0x54
   16c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c30:	mov	r3, #8
   16c34:	str	r3, [sp]
   16c38:	add	r1, sp, #28
   16c3c:	rsb	r2, r2, #1
   16c40:	mvn	r3, #-2147483648	; 0x80000000
   16c44:	mov	r0, #0
   16c48:	bl	18b1c <__assert_fail@plt+0x7bec>
   16c4c:	mov	r4, r0
   16c50:	ldm	r7, {r0, r1}
   16c54:	str	r4, [r5]
   16c58:	stm	r4, {r0, r1}
   16c5c:	b	16b50 <__assert_fail@plt+0x5c20>
   16c60:	andeq	ip, r2, r0, lsl #3
   16c64:	strdeq	ip, [r2], -r4
   16c68:			; <UNDEFINED> instruction: 0x0002c1b0
   16c6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c70:	mov	r9, r0
   16c74:	ldr	lr, [pc, #416]	; 16e1c <__assert_fail@plt+0x5eec>
   16c78:	mov	sl, r1
   16c7c:	sub	sp, sp, #92	; 0x5c
   16c80:	ldm	lr!, {r0, r1, r2, r3}
   16c84:	add	ip, sp, #40	; 0x28
   16c88:	ldr	r5, [pc, #400]	; 16e20 <__assert_fail@plt+0x5ef0>
   16c8c:	stmia	ip!, {r0, r1, r2, r3}
   16c90:	ldm	lr!, {r0, r1, r2, r3}
   16c94:	ldr	r4, [sp, #52]	; 0x34
   16c98:	stmia	ip!, {r0, r1, r2, r3}
   16c9c:	ldm	lr, {r0, r1, r2, r3}
   16ca0:	mvn	lr, r4
   16ca4:	and	lr, lr, #67108864	; 0x4000000
   16ca8:	eor	lr, lr, r4
   16cac:	stm	ip, {r0, r1, r2, r3}
   16cb0:	str	lr, [sp, #52]	; 0x34
   16cb4:	bl	10e4c <__errno_location@plt>
   16cb8:	ldr	r2, [r5, #4]
   16cbc:	ldr	r4, [r5]
   16cc0:	cmp	r2, #0
   16cc4:	ldr	r3, [r0]
   16cc8:	mov	r7, r0
   16ccc:	str	r3, [sp, #28]
   16cd0:	bgt	16d2c <__assert_fail@plt+0x5dfc>
   16cd4:	add	r6, r5, #8
   16cd8:	cmp	r4, r6
   16cdc:	str	r2, [sp, #36]	; 0x24
   16ce0:	beq	16dec <__assert_fail@plt+0x5ebc>
   16ce4:	mov	r3, #8
   16ce8:	mov	r0, r4
   16cec:	str	r3, [sp]
   16cf0:	rsb	r2, r2, #1
   16cf4:	mvn	r3, #-2147483648	; 0x80000000
   16cf8:	add	r1, sp, #36	; 0x24
   16cfc:	bl	18b1c <__assert_fail@plt+0x7bec>
   16d00:	mov	r4, r0
   16d04:	str	r0, [r5]
   16d08:	ldr	r0, [r5, #4]
   16d0c:	ldr	r2, [sp, #36]	; 0x24
   16d10:	mov	r1, #0
   16d14:	sub	r2, r2, r0
   16d18:	add	r0, r4, r0, lsl #3
   16d1c:	lsl	r2, r2, #3
   16d20:	bl	10e64 <memset@plt>
   16d24:	ldr	r3, [sp, #36]	; 0x24
   16d28:	str	r3, [r5, #4]
   16d2c:	ldr	r6, [sp, #44]	; 0x2c
   16d30:	ldr	r8, [r4]
   16d34:	ldr	r5, [r4, #4]
   16d38:	ldr	r2, [sp, #80]	; 0x50
   16d3c:	ldr	r3, [sp, #40]	; 0x28
   16d40:	ldr	ip, [sp, #84]	; 0x54
   16d44:	orr	r6, r6, #1
   16d48:	add	fp, sp, #48	; 0x30
   16d4c:	str	r2, [sp, #12]
   16d50:	str	r3, [sp]
   16d54:	str	r6, [sp, #4]
   16d58:	mov	r1, r8
   16d5c:	mov	r0, r5
   16d60:	str	ip, [sp, #16]
   16d64:	str	fp, [sp, #8]
   16d68:	mov	r3, sl
   16d6c:	mov	r2, r9
   16d70:	bl	14024 <__assert_fail@plt+0x30f4>
   16d74:	cmp	r8, r0
   16d78:	bhi	16dd8 <__assert_fail@plt+0x5ea8>
   16d7c:	ldr	r3, [pc, #160]	; 16e24 <__assert_fail@plt+0x5ef4>
   16d80:	add	r8, r0, #1
   16d84:	cmp	r5, r3
   16d88:	str	r8, [r4]
   16d8c:	beq	16d98 <__assert_fail@plt+0x5e68>
   16d90:	mov	r0, r5
   16d94:	bl	13d58 <__assert_fail@plt+0x2e28>
   16d98:	mov	r0, r8
   16d9c:	bl	18900 <__assert_fail@plt+0x79d0>
   16da0:	ldr	ip, [sp, #84]	; 0x54
   16da4:	ldr	lr, [sp, #40]	; 0x28
   16da8:	mov	r3, sl
   16dac:	mov	r2, r9
   16db0:	mov	r1, r8
   16db4:	str	r0, [r4, #4]
   16db8:	ldr	r4, [sp, #80]	; 0x50
   16dbc:	str	fp, [sp, #8]
   16dc0:	str	r6, [sp, #4]
   16dc4:	str	ip, [sp, #16]
   16dc8:	str	r4, [sp, #12]
   16dcc:	str	lr, [sp]
   16dd0:	mov	r5, r0
   16dd4:	bl	14024 <__assert_fail@plt+0x30f4>
   16dd8:	ldr	r3, [sp, #28]
   16ddc:	mov	r0, r5
   16de0:	str	r3, [r7]
   16de4:	add	sp, sp, #92	; 0x5c
   16de8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dec:	mov	r3, #8
   16df0:	str	r3, [sp]
   16df4:	add	r1, sp, #36	; 0x24
   16df8:	rsb	r2, r2, #1
   16dfc:	mvn	r3, #-2147483648	; 0x80000000
   16e00:	mov	r0, #0
   16e04:	bl	18b1c <__assert_fail@plt+0x7bec>
   16e08:	mov	r4, r0
   16e0c:	ldm	r6, {r0, r1}
   16e10:	str	r4, [r5]
   16e14:	stm	r4, {r0, r1}
   16e18:	b	16d08 <__assert_fail@plt+0x5dd8>
   16e1c:	andeq	ip, r2, r0, lsl #3
   16e20:	strdeq	ip, [r2], -r4
   16e24:			; <UNDEFINED> instruction: 0x0002c1b0
   16e28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e2c:	sub	sp, sp, #180	; 0xb4
   16e30:	mov	r6, r1
   16e34:	mov	r4, r0
   16e38:	mov	r9, r2
   16e3c:	add	r0, sp, #80	; 0x50
   16e40:	mov	r2, #48	; 0x30
   16e44:	mov	r1, #0
   16e48:	bl	10e64 <memset@plt>
   16e4c:	cmp	r6, #10
   16e50:	beq	17030 <__assert_fail@plt+0x6100>
   16e54:	add	r5, sp, #80	; 0x50
   16e58:	str	r6, [sp, #80]	; 0x50
   16e5c:	ldm	r5!, {r0, r1, r2, r3}
   16e60:	add	ip, sp, #128	; 0x80
   16e64:	mov	r7, ip
   16e68:	add	lr, sp, #32
   16e6c:	stmia	ip!, {r0, r1, r2, r3}
   16e70:	mov	r8, #67108864	; 0x4000000
   16e74:	ldm	r5!, {r0, r1, r2, r3}
   16e78:	ldr	r6, [pc, #436]	; 17034 <__assert_fail@plt+0x6104>
   16e7c:	stmia	ip!, {r0, r1, r2, r3}
   16e80:	ldm	r5, {r0, r1, r2, r3}
   16e84:	stm	ip, {r0, r1, r2, r3}
   16e88:	ldm	r7!, {r0, r1, r2, r3}
   16e8c:	stmia	lr!, {r0, r1, r2, r3}
   16e90:	ldm	r7!, {r0, r1, r2, r3}
   16e94:	str	r8, [sp, #44]	; 0x2c
   16e98:	stmia	lr!, {r0, r1, r2, r3}
   16e9c:	ldm	ip, {r0, r1, r2, r3}
   16ea0:	stm	lr, {r0, r1, r2, r3}
   16ea4:	bl	10e4c <__errno_location@plt>
   16ea8:	cmn	r4, #-2147483647	; 0x80000001
   16eac:	ldr	r5, [r6]
   16eb0:	mov	r7, r0
   16eb4:	movne	r0, #0
   16eb8:	moveq	r0, #1
   16ebc:	ldr	r3, [r7]
   16ec0:	orrs	r0, r0, r4, lsr #31
   16ec4:	str	r3, [sp, #24]
   16ec8:	bne	17030 <__assert_fail@plt+0x6100>
   16ecc:	ldr	r2, [r6, #4]
   16ed0:	cmp	r4, r2
   16ed4:	blt	16f34 <__assert_fail@plt+0x6004>
   16ed8:	add	r8, r6, #8
   16edc:	cmp	r5, r8
   16ee0:	str	r2, [sp, #80]	; 0x50
   16ee4:	beq	17000 <__assert_fail@plt+0x60d0>
   16ee8:	mov	r3, #8
   16eec:	sub	r2, r4, r2
   16ef0:	mov	r0, r5
   16ef4:	str	r3, [sp]
   16ef8:	add	r2, r2, #1
   16efc:	add	r1, sp, #80	; 0x50
   16f00:	mvn	r3, #-2147483648	; 0x80000000
   16f04:	bl	18b1c <__assert_fail@plt+0x7bec>
   16f08:	mov	r5, r0
   16f0c:	str	r0, [r6]
   16f10:	ldr	r0, [r6, #4]
   16f14:	ldr	r2, [sp, #80]	; 0x50
   16f18:	mov	r1, #0
   16f1c:	sub	r2, r2, r0
   16f20:	add	r0, r5, r0, lsl #3
   16f24:	lsl	r2, r2, #3
   16f28:	bl	10e64 <memset@plt>
   16f2c:	ldr	r3, [sp, #80]	; 0x50
   16f30:	str	r3, [r6, #4]
   16f34:	add	fp, r5, r4, lsl #3
   16f38:	ldr	r1, [sp, #36]	; 0x24
   16f3c:	ldr	r8, [r5, r4, lsl #3]
   16f40:	ldr	r6, [fp, #4]
   16f44:	ldr	r2, [sp, #72]	; 0x48
   16f48:	ldr	r3, [sp, #32]
   16f4c:	ldr	ip, [sp, #76]	; 0x4c
   16f50:	orr	r1, r1, #1
   16f54:	add	sl, sp, #40	; 0x28
   16f58:	str	r1, [sp, #28]
   16f5c:	str	r1, [sp, #4]
   16f60:	str	r2, [sp, #12]
   16f64:	str	r3, [sp]
   16f68:	mov	r0, r6
   16f6c:	mov	r1, r8
   16f70:	str	ip, [sp, #16]
   16f74:	str	sl, [sp, #8]
   16f78:	mvn	r3, #0
   16f7c:	mov	r2, r9
   16f80:	bl	14024 <__assert_fail@plt+0x30f4>
   16f84:	cmp	r8, r0
   16f88:	bhi	16fec <__assert_fail@plt+0x60bc>
   16f8c:	ldr	r3, [pc, #164]	; 17038 <__assert_fail@plt+0x6108>
   16f90:	add	r8, r0, #1
   16f94:	cmp	r6, r3
   16f98:	str	r8, [r5, r4, lsl #3]
   16f9c:	beq	16fa8 <__assert_fail@plt+0x6078>
   16fa0:	mov	r0, r6
   16fa4:	bl	13d58 <__assert_fail@plt+0x2e28>
   16fa8:	mov	r0, r8
   16fac:	bl	18900 <__assert_fail@plt+0x79d0>
   16fb0:	ldr	lr, [sp, #76]	; 0x4c
   16fb4:	ldr	r3, [sp, #32]
   16fb8:	ldr	ip, [sp, #72]	; 0x48
   16fbc:	ldr	r4, [sp, #28]
   16fc0:	mov	r2, r9
   16fc4:	mov	r1, r8
   16fc8:	str	r0, [fp, #4]
   16fcc:	str	r3, [sp]
   16fd0:	str	sl, [sp, #8]
   16fd4:	str	r4, [sp, #4]
   16fd8:	str	lr, [sp, #16]
   16fdc:	str	ip, [sp, #12]
   16fe0:	mvn	r3, #0
   16fe4:	mov	r6, r0
   16fe8:	bl	14024 <__assert_fail@plt+0x30f4>
   16fec:	ldr	r3, [sp, #24]
   16ff0:	mov	r0, r6
   16ff4:	str	r3, [r7]
   16ff8:	add	sp, sp, #180	; 0xb4
   16ffc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17000:	mov	r3, #8
   17004:	sub	r2, r4, r2
   17008:	add	r1, sp, #80	; 0x50
   1700c:	str	r3, [sp]
   17010:	add	r2, r2, #1
   17014:	mvn	r3, #-2147483648	; 0x80000000
   17018:	bl	18b1c <__assert_fail@plt+0x7bec>
   1701c:	mov	r5, r0
   17020:	ldm	r8, {r0, r1}
   17024:	str	r5, [r6]
   17028:	stm	r5, {r0, r1}
   1702c:	b	16f10 <__assert_fail@plt+0x5fe0>
   17030:	bl	10f24 <abort@plt>
   17034:	strdeq	ip, [r2], -r4
   17038:			; <UNDEFINED> instruction: 0x0002c1b0
   1703c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17040:	mov	r7, r1
   17044:	ldr	lr, [pc, #492]	; 17238 <__assert_fail@plt+0x6308>
   17048:	mov	r8, r2
   1704c:	mov	r4, r0
   17050:	mov	fp, r3
   17054:	ldm	lr!, {r0, r1, r2, r3}
   17058:	sub	sp, sp, #100	; 0x64
   1705c:	add	ip, sp, #48	; 0x30
   17060:	mov	sl, #10
   17064:	stmia	ip!, {r0, r1, r2, r3}
   17068:	cmp	r8, #0
   1706c:	cmpne	r7, #0
   17070:	ldm	lr!, {r0, r1, r2, r3}
   17074:	str	sl, [sp, #48]	; 0x30
   17078:	stmia	ip!, {r0, r1, r2, r3}
   1707c:	ldm	lr, {r0, r1, r2, r3}
   17080:	stm	ip, {r0, r1, r2, r3}
   17084:	beq	17234 <__assert_fail@plt+0x6304>
   17088:	str	r7, [sp, #88]	; 0x58
   1708c:	str	r8, [sp, #92]	; 0x5c
   17090:	bl	10e4c <__errno_location@plt>
   17094:	ldr	r6, [pc, #416]	; 1723c <__assert_fail@plt+0x630c>
   17098:	cmn	r4, #-2147483647	; 0x80000001
   1709c:	ldr	r5, [r6]
   170a0:	mov	r9, r0
   170a4:	movne	r0, #0
   170a8:	moveq	r0, #1
   170ac:	ldr	r3, [r9]
   170b0:	orrs	r0, r0, r4, lsr #31
   170b4:	str	r3, [sp, #28]
   170b8:	bne	17234 <__assert_fail@plt+0x6304>
   170bc:	ldr	r2, [r6, #4]
   170c0:	cmp	r4, r2
   170c4:	movlt	r3, sl
   170c8:	blt	17134 <__assert_fail@plt+0x6204>
   170cc:	add	r7, r6, #8
   170d0:	cmp	r5, r7
   170d4:	str	r2, [sp, #44]	; 0x2c
   170d8:	beq	17204 <__assert_fail@plt+0x62d4>
   170dc:	mov	r3, #8
   170e0:	sub	r2, r4, r2
   170e4:	mov	r0, r5
   170e8:	str	r3, [sp]
   170ec:	add	r2, r2, #1
   170f0:	mvn	r3, #-2147483648	; 0x80000000
   170f4:	add	r1, sp, #44	; 0x2c
   170f8:	bl	18b1c <__assert_fail@plt+0x7bec>
   170fc:	mov	r5, r0
   17100:	str	r0, [r6]
   17104:	ldr	r0, [r6, #4]
   17108:	ldr	r2, [sp, #44]	; 0x2c
   1710c:	mov	r1, #0
   17110:	sub	r2, r2, r0
   17114:	add	r0, r5, r0, lsl #3
   17118:	lsl	r2, r2, #3
   1711c:	bl	10e64 <memset@plt>
   17120:	ldr	r3, [sp, #48]	; 0x30
   17124:	ldr	r7, [sp, #88]	; 0x58
   17128:	ldr	r8, [sp, #92]	; 0x5c
   1712c:	ldr	r2, [sp, #44]	; 0x2c
   17130:	str	r2, [r6, #4]
   17134:	add	r2, r5, r4, lsl #3
   17138:	mov	r1, r2
   1713c:	str	r2, [sp, #32]
   17140:	ldr	r2, [sp, #52]	; 0x34
   17144:	ldr	r6, [r1, #4]
   17148:	ldr	sl, [r5, r4, lsl #3]
   1714c:	orr	r2, r2, #1
   17150:	str	r3, [sp]
   17154:	add	r3, sp, #56	; 0x38
   17158:	str	r2, [sp, #36]	; 0x24
   1715c:	str	r2, [sp, #4]
   17160:	str	r3, [sp, #8]
   17164:	mov	r0, r6
   17168:	str	r8, [sp, #16]
   1716c:	str	r7, [sp, #12]
   17170:	mov	r1, sl
   17174:	mvn	r3, #0
   17178:	mov	r2, fp
   1717c:	bl	14024 <__assert_fail@plt+0x30f4>
   17180:	cmp	sl, r0
   17184:	bhi	171f0 <__assert_fail@plt+0x62c0>
   17188:	ldr	r3, [pc, #176]	; 17240 <__assert_fail@plt+0x6310>
   1718c:	add	r7, r0, #1
   17190:	cmp	r6, r3
   17194:	str	r7, [r5, r4, lsl #3]
   17198:	beq	171a4 <__assert_fail@plt+0x6274>
   1719c:	mov	r0, r6
   171a0:	bl	13d58 <__assert_fail@plt+0x2e28>
   171a4:	mov	r0, r7
   171a8:	bl	18900 <__assert_fail@plt+0x79d0>
   171ac:	ldr	r3, [sp, #32]
   171b0:	ldr	lr, [sp, #92]	; 0x5c
   171b4:	ldr	ip, [sp, #88]	; 0x58
   171b8:	ldr	r4, [sp, #36]	; 0x24
   171bc:	mov	r2, fp
   171c0:	mov	r1, r7
   171c4:	str	r0, [r3, #4]
   171c8:	add	r3, sp, #56	; 0x38
   171cc:	str	r3, [sp, #8]
   171d0:	ldr	r3, [sp, #48]	; 0x30
   171d4:	str	r4, [sp, #4]
   171d8:	str	r3, [sp]
   171dc:	str	lr, [sp, #16]
   171e0:	str	ip, [sp, #12]
   171e4:	mvn	r3, #0
   171e8:	mov	r6, r0
   171ec:	bl	14024 <__assert_fail@plt+0x30f4>
   171f0:	ldr	r3, [sp, #28]
   171f4:	mov	r0, r6
   171f8:	str	r3, [r9]
   171fc:	add	sp, sp, #100	; 0x64
   17200:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17204:	mov	r3, #8
   17208:	sub	r2, r4, r2
   1720c:	str	r3, [sp]
   17210:	add	r1, sp, #44	; 0x2c
   17214:	add	r2, r2, #1
   17218:	mvn	r3, #-2147483648	; 0x80000000
   1721c:	bl	18b1c <__assert_fail@plt+0x7bec>
   17220:	mov	r5, r0
   17224:	ldm	r7, {r0, r1}
   17228:	str	r5, [r6]
   1722c:	stm	r5, {r0, r1}
   17230:	b	17104 <__assert_fail@plt+0x61d4>
   17234:	bl	10f24 <abort@plt>
   17238:	andeq	ip, r2, r0, lsl #3
   1723c:	strdeq	ip, [r2], -r4
   17240:			; <UNDEFINED> instruction: 0x0002c1b0
   17244:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17248:	mov	r7, r1
   1724c:	ldr	lr, [pc, #492]	; 17440 <__assert_fail@plt+0x6510>
   17250:	mov	r8, r2
   17254:	mov	r4, r0
   17258:	mov	fp, r3
   1725c:	ldm	lr!, {r0, r1, r2, r3}
   17260:	sub	sp, sp, #100	; 0x64
   17264:	add	ip, sp, #48	; 0x30
   17268:	mov	sl, #10
   1726c:	stmia	ip!, {r0, r1, r2, r3}
   17270:	cmp	r8, #0
   17274:	cmpne	r7, #0
   17278:	ldm	lr!, {r0, r1, r2, r3}
   1727c:	str	sl, [sp, #48]	; 0x30
   17280:	stmia	ip!, {r0, r1, r2, r3}
   17284:	ldm	lr, {r0, r1, r2, r3}
   17288:	stm	ip, {r0, r1, r2, r3}
   1728c:	beq	1743c <__assert_fail@plt+0x650c>
   17290:	str	r7, [sp, #88]	; 0x58
   17294:	str	r8, [sp, #92]	; 0x5c
   17298:	bl	10e4c <__errno_location@plt>
   1729c:	ldr	r6, [pc, #416]	; 17444 <__assert_fail@plt+0x6514>
   172a0:	cmn	r4, #-2147483647	; 0x80000001
   172a4:	ldr	r5, [r6]
   172a8:	mov	r9, r0
   172ac:	movne	r0, #0
   172b0:	moveq	r0, #1
   172b4:	ldr	r3, [r9]
   172b8:	orrs	r0, r0, r4, lsr #31
   172bc:	str	r3, [sp, #28]
   172c0:	bne	1743c <__assert_fail@plt+0x650c>
   172c4:	ldr	r2, [r6, #4]
   172c8:	cmp	r4, r2
   172cc:	movlt	r3, sl
   172d0:	blt	1733c <__assert_fail@plt+0x640c>
   172d4:	add	r7, r6, #8
   172d8:	cmp	r5, r7
   172dc:	str	r2, [sp, #44]	; 0x2c
   172e0:	beq	1740c <__assert_fail@plt+0x64dc>
   172e4:	mov	r3, #8
   172e8:	sub	r2, r4, r2
   172ec:	mov	r0, r5
   172f0:	str	r3, [sp]
   172f4:	add	r2, r2, #1
   172f8:	mvn	r3, #-2147483648	; 0x80000000
   172fc:	add	r1, sp, #44	; 0x2c
   17300:	bl	18b1c <__assert_fail@plt+0x7bec>
   17304:	mov	r5, r0
   17308:	str	r0, [r6]
   1730c:	ldr	r0, [r6, #4]
   17310:	ldr	r2, [sp, #44]	; 0x2c
   17314:	mov	r1, #0
   17318:	sub	r2, r2, r0
   1731c:	add	r0, r5, r0, lsl #3
   17320:	lsl	r2, r2, #3
   17324:	bl	10e64 <memset@plt>
   17328:	ldr	r3, [sp, #48]	; 0x30
   1732c:	ldr	r7, [sp, #88]	; 0x58
   17330:	ldr	r8, [sp, #92]	; 0x5c
   17334:	ldr	r2, [sp, #44]	; 0x2c
   17338:	str	r2, [r6, #4]
   1733c:	add	r2, r5, r4, lsl #3
   17340:	mov	r1, r2
   17344:	str	r2, [sp, #32]
   17348:	ldr	r2, [sp, #52]	; 0x34
   1734c:	ldr	r6, [r1, #4]
   17350:	ldr	sl, [r5, r4, lsl #3]
   17354:	orr	r2, r2, #1
   17358:	str	r3, [sp]
   1735c:	add	r3, sp, #56	; 0x38
   17360:	str	r2, [sp, #36]	; 0x24
   17364:	str	r2, [sp, #4]
   17368:	str	r3, [sp, #8]
   1736c:	mov	r0, r6
   17370:	str	r8, [sp, #16]
   17374:	str	r7, [sp, #12]
   17378:	mov	r1, sl
   1737c:	ldr	r3, [sp, #136]	; 0x88
   17380:	mov	r2, fp
   17384:	bl	14024 <__assert_fail@plt+0x30f4>
   17388:	cmp	sl, r0
   1738c:	bhi	173f8 <__assert_fail@plt+0x64c8>
   17390:	ldr	r3, [pc, #176]	; 17448 <__assert_fail@plt+0x6518>
   17394:	add	r7, r0, #1
   17398:	cmp	r6, r3
   1739c:	str	r7, [r5, r4, lsl #3]
   173a0:	beq	173ac <__assert_fail@plt+0x647c>
   173a4:	mov	r0, r6
   173a8:	bl	13d58 <__assert_fail@plt+0x2e28>
   173ac:	mov	r0, r7
   173b0:	bl	18900 <__assert_fail@plt+0x79d0>
   173b4:	ldr	r3, [sp, #32]
   173b8:	ldr	lr, [sp, #92]	; 0x5c
   173bc:	ldr	ip, [sp, #88]	; 0x58
   173c0:	ldr	r4, [sp, #36]	; 0x24
   173c4:	mov	r2, fp
   173c8:	mov	r1, r7
   173cc:	str	r0, [r3, #4]
   173d0:	add	r3, sp, #56	; 0x38
   173d4:	str	r3, [sp, #8]
   173d8:	ldr	r3, [sp, #48]	; 0x30
   173dc:	str	r4, [sp, #4]
   173e0:	str	r3, [sp]
   173e4:	str	lr, [sp, #16]
   173e8:	str	ip, [sp, #12]
   173ec:	ldr	r3, [sp, #136]	; 0x88
   173f0:	mov	r6, r0
   173f4:	bl	14024 <__assert_fail@plt+0x30f4>
   173f8:	ldr	r3, [sp, #28]
   173fc:	mov	r0, r6
   17400:	str	r3, [r9]
   17404:	add	sp, sp, #100	; 0x64
   17408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1740c:	mov	r3, #8
   17410:	sub	r2, r4, r2
   17414:	str	r3, [sp]
   17418:	add	r1, sp, #44	; 0x2c
   1741c:	add	r2, r2, #1
   17420:	mvn	r3, #-2147483648	; 0x80000000
   17424:	bl	18b1c <__assert_fail@plt+0x7bec>
   17428:	mov	r5, r0
   1742c:	ldm	r7, {r0, r1}
   17430:	str	r5, [r6]
   17434:	stm	r5, {r0, r1}
   17438:	b	1730c <__assert_fail@plt+0x63dc>
   1743c:	bl	10f24 <abort@plt>
   17440:	andeq	ip, r2, r0, lsl #3
   17444:	strdeq	ip, [r2], -r4
   17448:			; <UNDEFINED> instruction: 0x0002c1b0
   1744c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17450:	mov	r5, r0
   17454:	ldr	lr, [pc, #452]	; 17620 <__assert_fail@plt+0x66f0>
   17458:	mov	r6, r1
   1745c:	mov	sl, r2
   17460:	ldm	lr!, {r0, r1, r2, r3}
   17464:	sub	sp, sp, #92	; 0x5c
   17468:	add	ip, sp, #40	; 0x28
   1746c:	cmp	r6, #0
   17470:	cmpne	r5, #0
   17474:	stmia	ip!, {r0, r1, r2, r3}
   17478:	mov	r9, #10
   1747c:	ldm	lr!, {r0, r1, r2, r3}
   17480:	moveq	fp, #1
   17484:	movne	fp, #0
   17488:	str	r9, [sp, #40]	; 0x28
   1748c:	stmia	ip!, {r0, r1, r2, r3}
   17490:	ldm	lr, {r0, r1, r2, r3}
   17494:	stm	ip, {r0, r1, r2, r3}
   17498:	beq	1761c <__assert_fail@plt+0x66ec>
   1749c:	str	r5, [sp, #80]	; 0x50
   174a0:	str	r6, [sp, #84]	; 0x54
   174a4:	bl	10e4c <__errno_location@plt>
   174a8:	ldr	r7, [pc, #372]	; 17624 <__assert_fail@plt+0x66f4>
   174ac:	ldr	r2, [r7, #4]
   174b0:	ldr	r4, [r7]
   174b4:	cmp	r2, #0
   174b8:	ldr	r3, [r0]
   174bc:	mov	r8, r0
   174c0:	str	r3, [sp, #24]
   174c4:	movgt	r3, r9
   174c8:	bgt	17530 <__assert_fail@plt+0x6600>
   174cc:	add	r5, r7, #8
   174d0:	cmp	r4, r5
   174d4:	str	r2, [sp, #36]	; 0x24
   174d8:	beq	175ec <__assert_fail@plt+0x66bc>
   174dc:	mov	r3, #8
   174e0:	mov	r0, r4
   174e4:	str	r3, [sp]
   174e8:	rsb	r2, r2, #1
   174ec:	mvn	r3, #-2147483648	; 0x80000000
   174f0:	add	r1, sp, #36	; 0x24
   174f4:	bl	18b1c <__assert_fail@plt+0x7bec>
   174f8:	mov	r4, r0
   174fc:	str	r0, [r7]
   17500:	ldr	r0, [r7, #4]
   17504:	ldr	r2, [sp, #36]	; 0x24
   17508:	mov	r1, #0
   1750c:	sub	r2, r2, r0
   17510:	add	r0, r4, r0, lsl #3
   17514:	lsl	r2, r2, #3
   17518:	bl	10e64 <memset@plt>
   1751c:	ldr	r3, [sp, #40]	; 0x28
   17520:	ldr	r5, [sp, #80]	; 0x50
   17524:	ldr	r6, [sp, #84]	; 0x54
   17528:	ldr	r2, [sp, #36]	; 0x24
   1752c:	str	r2, [r7, #4]
   17530:	ldr	r2, [sp, #44]	; 0x2c
   17534:	ldr	r9, [r4]
   17538:	ldr	r7, [r4, #4]
   1753c:	orr	r2, r2, #1
   17540:	add	fp, sp, #48	; 0x30
   17544:	str	r2, [sp, #28]
   17548:	str	r2, [sp, #4]
   1754c:	str	r3, [sp]
   17550:	str	r6, [sp, #16]
   17554:	str	r5, [sp, #12]
   17558:	mov	r1, r9
   1755c:	mov	r0, r7
   17560:	str	fp, [sp, #8]
   17564:	mvn	r3, #0
   17568:	mov	r2, sl
   1756c:	bl	14024 <__assert_fail@plt+0x30f4>
   17570:	cmp	r9, r0
   17574:	bhi	175d8 <__assert_fail@plt+0x66a8>
   17578:	ldr	r3, [pc, #168]	; 17628 <__assert_fail@plt+0x66f8>
   1757c:	add	r5, r0, #1
   17580:	cmp	r7, r3
   17584:	str	r5, [r4]
   17588:	beq	17594 <__assert_fail@plt+0x6664>
   1758c:	mov	r0, r7
   17590:	bl	13d58 <__assert_fail@plt+0x2e28>
   17594:	mov	r0, r5
   17598:	bl	18900 <__assert_fail@plt+0x79d0>
   1759c:	ldr	lr, [sp, #84]	; 0x54
   175a0:	ldr	r3, [sp, #40]	; 0x28
   175a4:	ldr	ip, [sp, #80]	; 0x50
   175a8:	mov	r2, sl
   175ac:	mov	r1, r5
   175b0:	str	r0, [r4, #4]
   175b4:	ldr	r4, [sp, #28]
   175b8:	str	r3, [sp]
   175bc:	str	fp, [sp, #8]
   175c0:	str	r4, [sp, #4]
   175c4:	str	lr, [sp, #16]
   175c8:	str	ip, [sp, #12]
   175cc:	mvn	r3, #0
   175d0:	mov	r7, r0
   175d4:	bl	14024 <__assert_fail@plt+0x30f4>
   175d8:	ldr	r3, [sp, #24]
   175dc:	mov	r0, r7
   175e0:	str	r3, [r8]
   175e4:	add	sp, sp, #92	; 0x5c
   175e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175ec:	mov	r3, #8
   175f0:	str	r3, [sp]
   175f4:	add	r1, sp, #36	; 0x24
   175f8:	rsb	r2, r2, #1
   175fc:	mov	r0, fp
   17600:	mvn	r3, #-2147483648	; 0x80000000
   17604:	bl	18b1c <__assert_fail@plt+0x7bec>
   17608:	mov	r4, r0
   1760c:	ldm	r5, {r0, r1}
   17610:	str	r4, [r7]
   17614:	stm	r4, {r0, r1}
   17618:	b	17500 <__assert_fail@plt+0x65d0>
   1761c:	bl	10f24 <abort@plt>
   17620:	andeq	ip, r2, r0, lsl #3
   17624:	strdeq	ip, [r2], -r4
   17628:			; <UNDEFINED> instruction: 0x0002c1b0
   1762c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17630:	mov	r5, r0
   17634:	ldr	lr, [pc, #464]	; 1780c <__assert_fail@plt+0x68dc>
   17638:	mov	r6, r1
   1763c:	mov	sl, r2
   17640:	mov	fp, r3
   17644:	ldm	lr!, {r0, r1, r2, r3}
   17648:	sub	sp, sp, #92	; 0x5c
   1764c:	add	ip, sp, #40	; 0x28
   17650:	cmp	r6, #0
   17654:	cmpne	r5, #0
   17658:	stmia	ip!, {r0, r1, r2, r3}
   1765c:	moveq	r4, #1
   17660:	ldm	lr!, {r0, r1, r2, r3}
   17664:	movne	r4, #0
   17668:	mov	r9, #10
   1766c:	str	r4, [sp, #28]
   17670:	stmia	ip!, {r0, r1, r2, r3}
   17674:	ldm	lr, {r0, r1, r2, r3}
   17678:	str	r9, [sp, #40]	; 0x28
   1767c:	stm	ip, {r0, r1, r2, r3}
   17680:	beq	17808 <__assert_fail@plt+0x68d8>
   17684:	str	r5, [sp, #80]	; 0x50
   17688:	str	r6, [sp, #84]	; 0x54
   1768c:	bl	10e4c <__errno_location@plt>
   17690:	ldr	r7, [pc, #376]	; 17810 <__assert_fail@plt+0x68e0>
   17694:	ldr	r2, [r7, #4]
   17698:	ldr	r4, [r7]
   1769c:	cmp	r2, #0
   176a0:	ldr	r3, [r0]
   176a4:	mov	r8, r0
   176a8:	str	r3, [sp, #24]
   176ac:	movgt	r3, r9
   176b0:	bgt	17718 <__assert_fail@plt+0x67e8>
   176b4:	add	r5, r7, #8
   176b8:	cmp	r4, r5
   176bc:	str	r2, [sp, #36]	; 0x24
   176c0:	beq	177d8 <__assert_fail@plt+0x68a8>
   176c4:	mov	r3, #8
   176c8:	mov	r0, r4
   176cc:	str	r3, [sp]
   176d0:	rsb	r2, r2, #1
   176d4:	mvn	r3, #-2147483648	; 0x80000000
   176d8:	add	r1, sp, #36	; 0x24
   176dc:	bl	18b1c <__assert_fail@plt+0x7bec>
   176e0:	mov	r4, r0
   176e4:	str	r0, [r7]
   176e8:	ldr	r0, [r7, #4]
   176ec:	ldr	r2, [sp, #36]	; 0x24
   176f0:	mov	r1, #0
   176f4:	sub	r2, r2, r0
   176f8:	add	r0, r4, r0, lsl #3
   176fc:	lsl	r2, r2, #3
   17700:	bl	10e64 <memset@plt>
   17704:	ldr	r3, [sp, #40]	; 0x28
   17708:	ldr	r5, [sp, #80]	; 0x50
   1770c:	ldr	r6, [sp, #84]	; 0x54
   17710:	ldr	r2, [sp, #36]	; 0x24
   17714:	str	r2, [r7, #4]
   17718:	ldr	r2, [sp, #44]	; 0x2c
   1771c:	ldr	r9, [r4]
   17720:	ldr	r7, [r4, #4]
   17724:	orr	r2, r2, #1
   17728:	str	r3, [sp]
   1772c:	add	r3, sp, #48	; 0x30
   17730:	str	r2, [sp, #28]
   17734:	str	r2, [sp, #4]
   17738:	str	r3, [sp, #8]
   1773c:	str	r6, [sp, #16]
   17740:	str	r5, [sp, #12]
   17744:	mov	r1, r9
   17748:	mov	r0, r7
   1774c:	mov	r3, fp
   17750:	mov	r2, sl
   17754:	bl	14024 <__assert_fail@plt+0x30f4>
   17758:	cmp	r9, r0
   1775c:	bhi	177c4 <__assert_fail@plt+0x6894>
   17760:	ldr	r3, [pc, #172]	; 17814 <__assert_fail@plt+0x68e4>
   17764:	add	r5, r0, #1
   17768:	cmp	r7, r3
   1776c:	str	r5, [r4]
   17770:	beq	1777c <__assert_fail@plt+0x684c>
   17774:	mov	r0, r7
   17778:	bl	13d58 <__assert_fail@plt+0x2e28>
   1777c:	mov	r0, r5
   17780:	bl	18900 <__assert_fail@plt+0x79d0>
   17784:	add	lr, sp, #48	; 0x30
   17788:	ldr	ip, [sp, #84]	; 0x54
   1778c:	mov	r1, r5
   17790:	ldr	r5, [sp, #28]
   17794:	mov	r3, fp
   17798:	mov	r2, sl
   1779c:	str	r0, [r4, #4]
   177a0:	ldr	r4, [sp, #80]	; 0x50
   177a4:	str	lr, [sp, #8]
   177a8:	ldr	lr, [sp, #40]	; 0x28
   177ac:	str	r5, [sp, #4]
   177b0:	str	ip, [sp, #16]
   177b4:	str	r4, [sp, #12]
   177b8:	str	lr, [sp]
   177bc:	mov	r7, r0
   177c0:	bl	14024 <__assert_fail@plt+0x30f4>
   177c4:	ldr	r3, [sp, #24]
   177c8:	mov	r0, r7
   177cc:	str	r3, [r8]
   177d0:	add	sp, sp, #92	; 0x5c
   177d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177d8:	mov	r3, #8
   177dc:	str	r3, [sp]
   177e0:	add	r1, sp, #36	; 0x24
   177e4:	rsb	r2, r2, #1
   177e8:	ldr	r0, [sp, #28]
   177ec:	mvn	r3, #-2147483648	; 0x80000000
   177f0:	bl	18b1c <__assert_fail@plt+0x7bec>
   177f4:	mov	r4, r0
   177f8:	ldm	r5, {r0, r1}
   177fc:	str	r4, [r7]
   17800:	stm	r4, {r0, r1}
   17804:	b	176e8 <__assert_fail@plt+0x67b8>
   17808:	bl	10f24 <abort@plt>
   1780c:	andeq	ip, r2, r0, lsl #3
   17810:	strdeq	ip, [r2], -r4
   17814:			; <UNDEFINED> instruction: 0x0002c1b0
   17818:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1781c:	sub	sp, sp, #52	; 0x34
   17820:	mov	r5, r0
   17824:	mov	sl, r1
   17828:	mov	fp, r2
   1782c:	bl	10e4c <__errno_location@plt>
   17830:	ldr	r4, [pc, #404]	; 179cc <__assert_fail@plt+0x6a9c>
   17834:	cmn	r5, #-2147483647	; 0x80000001
   17838:	ldr	r6, [r4]
   1783c:	mov	r8, r0
   17840:	movne	r0, #0
   17844:	moveq	r0, #1
   17848:	ldr	r3, [r8]
   1784c:	orrs	r0, r0, r5, lsr #31
   17850:	str	r3, [sp, #28]
   17854:	bne	179c8 <__assert_fail@plt+0x6a98>
   17858:	ldr	r2, [r4, #4]
   1785c:	cmp	r5, r2
   17860:	blt	178c0 <__assert_fail@plt+0x6990>
   17864:	add	r7, r4, #8
   17868:	cmp	r6, r7
   1786c:	str	r2, [sp, #44]	; 0x2c
   17870:	beq	17998 <__assert_fail@plt+0x6a68>
   17874:	mov	r3, #8
   17878:	sub	r2, r5, r2
   1787c:	mov	r0, r6
   17880:	str	r3, [sp]
   17884:	add	r2, r2, #1
   17888:	mvn	r3, #-2147483648	; 0x80000000
   1788c:	add	r1, sp, #44	; 0x2c
   17890:	bl	18b1c <__assert_fail@plt+0x7bec>
   17894:	mov	r6, r0
   17898:	str	r0, [r4]
   1789c:	ldr	r0, [r4, #4]
   178a0:	ldr	r2, [sp, #44]	; 0x2c
   178a4:	mov	r1, #0
   178a8:	sub	r2, r2, r0
   178ac:	add	r0, r6, r0, lsl #3
   178b0:	lsl	r2, r2, #3
   178b4:	bl	10e64 <memset@plt>
   178b8:	ldr	r3, [sp, #44]	; 0x2c
   178bc:	str	r3, [r4, #4]
   178c0:	ldr	r2, [r4, #56]	; 0x38
   178c4:	add	r3, r6, r5, lsl #3
   178c8:	ldr	r1, [r4, #20]
   178cc:	ldr	r7, [r3, #4]
   178d0:	ldr	r9, [r6, r5, lsl #3]
   178d4:	ldr	ip, [r4, #60]	; 0x3c
   178d8:	str	r3, [sp, #32]
   178dc:	ldr	r3, [r4, #16]
   178e0:	str	r2, [sp, #12]
   178e4:	ldr	r2, [pc, #228]	; 179d0 <__assert_fail@plt+0x6aa0>
   178e8:	orr	r1, r1, #1
   178ec:	str	r1, [sp, #36]	; 0x24
   178f0:	str	r1, [sp, #4]
   178f4:	str	r2, [sp, #8]
   178f8:	str	r3, [sp]
   178fc:	mov	r0, r7
   17900:	mov	r1, r9
   17904:	str	ip, [sp, #16]
   17908:	mov	r3, fp
   1790c:	mov	r2, sl
   17910:	bl	14024 <__assert_fail@plt+0x30f4>
   17914:	cmp	r9, r0
   17918:	bhi	17984 <__assert_fail@plt+0x6a54>
   1791c:	ldr	r3, [pc, #176]	; 179d4 <__assert_fail@plt+0x6aa4>
   17920:	add	r9, r0, #1
   17924:	cmp	r7, r3
   17928:	str	r9, [r6, r5, lsl #3]
   1792c:	beq	17938 <__assert_fail@plt+0x6a08>
   17930:	mov	r0, r7
   17934:	bl	13d58 <__assert_fail@plt+0x2e28>
   17938:	mov	r0, r9
   1793c:	bl	18900 <__assert_fail@plt+0x79d0>
   17940:	ldr	ip, [sp, #32]
   17944:	ldr	lr, [r4, #60]	; 0x3c
   17948:	ldr	r5, [r4, #56]	; 0x38
   1794c:	mov	r3, fp
   17950:	mov	r2, sl
   17954:	mov	r1, r9
   17958:	str	r0, [ip, #4]
   1795c:	ldr	ip, [r4, #16]
   17960:	ldr	r4, [pc, #104]	; 179d0 <__assert_fail@plt+0x6aa0>
   17964:	str	lr, [sp, #16]
   17968:	str	r4, [sp, #8]
   1796c:	ldr	r4, [sp, #36]	; 0x24
   17970:	str	r5, [sp, #12]
   17974:	str	r4, [sp, #4]
   17978:	str	ip, [sp]
   1797c:	mov	r7, r0
   17980:	bl	14024 <__assert_fail@plt+0x30f4>
   17984:	ldr	r3, [sp, #28]
   17988:	mov	r0, r7
   1798c:	str	r3, [r8]
   17990:	add	sp, sp, #52	; 0x34
   17994:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17998:	mov	r3, #8
   1799c:	sub	r2, r5, r2
   179a0:	str	r3, [sp]
   179a4:	add	r1, sp, #44	; 0x2c
   179a8:	add	r2, r2, #1
   179ac:	mvn	r3, #-2147483648	; 0x80000000
   179b0:	bl	18b1c <__assert_fail@plt+0x7bec>
   179b4:	mov	r6, r0
   179b8:	ldm	r7, {r0, r1}
   179bc:	str	r6, [r4]
   179c0:	stm	r6, {r0, r1}
   179c4:	b	1789c <__assert_fail@plt+0x696c>
   179c8:	bl	10f24 <abort@plt>
   179cc:	strdeq	ip, [r2], -r4
   179d0:	andeq	ip, r2, ip, lsl #2
   179d4:			; <UNDEFINED> instruction: 0x0002c1b0
   179d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179dc:	sub	sp, sp, #44	; 0x2c
   179e0:	mov	r9, r0
   179e4:	mov	sl, r1
   179e8:	bl	10e4c <__errno_location@plt>
   179ec:	ldr	r4, [pc, #360]	; 17b5c <__assert_fail@plt+0x6c2c>
   179f0:	ldr	r2, [r4, #4]
   179f4:	ldr	r5, [r4]
   179f8:	cmp	r2, #0
   179fc:	ldr	r3, [r0]
   17a00:	mov	r7, r0
   17a04:	str	r3, [sp, #24]
   17a08:	bgt	17a64 <__assert_fail@plt+0x6b34>
   17a0c:	add	r6, r4, #8
   17a10:	cmp	r5, r6
   17a14:	str	r2, [sp, #36]	; 0x24
   17a18:	beq	17b2c <__assert_fail@plt+0x6bfc>
   17a1c:	mov	r3, #8
   17a20:	mov	r0, r5
   17a24:	str	r3, [sp]
   17a28:	rsb	r2, r2, #1
   17a2c:	mvn	r3, #-2147483648	; 0x80000000
   17a30:	add	r1, sp, #36	; 0x24
   17a34:	bl	18b1c <__assert_fail@plt+0x7bec>
   17a38:	mov	r5, r0
   17a3c:	str	r0, [r4]
   17a40:	ldr	r0, [r4, #4]
   17a44:	ldr	r2, [sp, #36]	; 0x24
   17a48:	mov	r1, #0
   17a4c:	sub	r2, r2, r0
   17a50:	add	r0, r5, r0, lsl #3
   17a54:	lsl	r2, r2, #3
   17a58:	bl	10e64 <memset@plt>
   17a5c:	ldr	r3, [sp, #36]	; 0x24
   17a60:	str	r3, [r4, #4]
   17a64:	ldr	r1, [r4, #20]
   17a68:	ldr	r8, [r5]
   17a6c:	ldr	r6, [r5, #4]
   17a70:	ldr	r2, [r4, #56]	; 0x38
   17a74:	ldr	r3, [r4, #16]
   17a78:	ldr	ip, [r4, #60]	; 0x3c
   17a7c:	ldr	fp, [pc, #220]	; 17b60 <__assert_fail@plt+0x6c30>
   17a80:	orr	r1, r1, #1
   17a84:	str	r1, [sp, #28]
   17a88:	str	r1, [sp, #4]
   17a8c:	str	r2, [sp, #12]
   17a90:	str	r3, [sp]
   17a94:	mov	r1, r8
   17a98:	mov	r0, r6
   17a9c:	str	ip, [sp, #16]
   17aa0:	str	fp, [sp, #8]
   17aa4:	mov	r3, sl
   17aa8:	mov	r2, r9
   17aac:	bl	14024 <__assert_fail@plt+0x30f4>
   17ab0:	cmp	r8, r0
   17ab4:	bhi	17b18 <__assert_fail@plt+0x6be8>
   17ab8:	ldr	r3, [pc, #164]	; 17b64 <__assert_fail@plt+0x6c34>
   17abc:	add	r8, r0, #1
   17ac0:	cmp	r6, r3
   17ac4:	str	r8, [r5]
   17ac8:	beq	17ad4 <__assert_fail@plt+0x6ba4>
   17acc:	mov	r0, r6
   17ad0:	bl	13d58 <__assert_fail@plt+0x2e28>
   17ad4:	mov	r0, r8
   17ad8:	bl	18900 <__assert_fail@plt+0x79d0>
   17adc:	ldr	lr, [r4, #60]	; 0x3c
   17ae0:	ldr	ip, [r4, #16]
   17ae4:	mov	r3, sl
   17ae8:	mov	r2, r9
   17aec:	mov	r1, r8
   17af0:	str	r0, [r5, #4]
   17af4:	ldr	r5, [r4, #56]	; 0x38
   17af8:	ldr	r4, [sp, #28]
   17afc:	str	fp, [sp, #8]
   17b00:	str	r4, [sp, #4]
   17b04:	str	lr, [sp, #16]
   17b08:	str	r5, [sp, #12]
   17b0c:	str	ip, [sp]
   17b10:	mov	r6, r0
   17b14:	bl	14024 <__assert_fail@plt+0x30f4>
   17b18:	ldr	r3, [sp, #24]
   17b1c:	mov	r0, r6
   17b20:	str	r3, [r7]
   17b24:	add	sp, sp, #44	; 0x2c
   17b28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b2c:	mov	r3, #8
   17b30:	str	r3, [sp]
   17b34:	add	r1, sp, #36	; 0x24
   17b38:	rsb	r2, r2, #1
   17b3c:	mvn	r3, #-2147483648	; 0x80000000
   17b40:	mov	r0, #0
   17b44:	bl	18b1c <__assert_fail@plt+0x7bec>
   17b48:	mov	r5, r0
   17b4c:	ldm	r6, {r0, r1}
   17b50:	str	r5, [r4]
   17b54:	stm	r5, {r0, r1}
   17b58:	b	17a40 <__assert_fail@plt+0x6b10>
   17b5c:	strdeq	ip, [r2], -r4
   17b60:	andeq	ip, r2, ip, lsl #2
   17b64:			; <UNDEFINED> instruction: 0x0002c1b0
   17b68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b6c:	sub	sp, sp, #44	; 0x2c
   17b70:	mov	r5, r0
   17b74:	mov	sl, r1
   17b78:	bl	10e4c <__errno_location@plt>
   17b7c:	ldr	r4, [pc, #396]	; 17d10 <__assert_fail@plt+0x6de0>
   17b80:	cmn	r5, #-2147483647	; 0x80000001
   17b84:	ldr	r6, [r4]
   17b88:	mov	r8, r0
   17b8c:	movne	r0, #0
   17b90:	moveq	r0, #1
   17b94:	ldr	r3, [r8]
   17b98:	orrs	r0, r0, r5, lsr #31
   17b9c:	str	r3, [sp, #24]
   17ba0:	bne	17d0c <__assert_fail@plt+0x6ddc>
   17ba4:	ldr	r2, [r4, #4]
   17ba8:	cmp	r5, r2
   17bac:	blt	17c0c <__assert_fail@plt+0x6cdc>
   17bb0:	add	r7, r4, #8
   17bb4:	cmp	r6, r7
   17bb8:	str	r2, [sp, #36]	; 0x24
   17bbc:	beq	17cdc <__assert_fail@plt+0x6dac>
   17bc0:	mov	r3, #8
   17bc4:	sub	r2, r5, r2
   17bc8:	mov	r0, r6
   17bcc:	str	r3, [sp]
   17bd0:	add	r2, r2, #1
   17bd4:	mvn	r3, #-2147483648	; 0x80000000
   17bd8:	add	r1, sp, #36	; 0x24
   17bdc:	bl	18b1c <__assert_fail@plt+0x7bec>
   17be0:	mov	r6, r0
   17be4:	str	r0, [r4]
   17be8:	ldr	r0, [r4, #4]
   17bec:	ldr	r2, [sp, #36]	; 0x24
   17bf0:	mov	r1, #0
   17bf4:	sub	r2, r2, r0
   17bf8:	add	r0, r6, r0, lsl #3
   17bfc:	lsl	r2, r2, #3
   17c00:	bl	10e64 <memset@plt>
   17c04:	ldr	r3, [sp, #36]	; 0x24
   17c08:	str	r3, [r4, #4]
   17c0c:	ldr	r2, [r4, #56]	; 0x38
   17c10:	add	fp, r6, r5, lsl #3
   17c14:	ldr	r1, [r4, #20]
   17c18:	ldr	r9, [r6, r5, lsl #3]
   17c1c:	ldr	r7, [fp, #4]
   17c20:	ldr	r3, [r4, #16]
   17c24:	ldr	ip, [r4, #60]	; 0x3c
   17c28:	str	r2, [sp, #12]
   17c2c:	ldr	r2, [pc, #224]	; 17d14 <__assert_fail@plt+0x6de4>
   17c30:	orr	r1, r1, #1
   17c34:	str	r1, [sp, #28]
   17c38:	str	r1, [sp, #4]
   17c3c:	str	r2, [sp, #8]
   17c40:	str	r3, [sp]
   17c44:	mov	r0, r7
   17c48:	mov	r1, r9
   17c4c:	str	ip, [sp, #16]
   17c50:	mvn	r3, #0
   17c54:	mov	r2, sl
   17c58:	bl	14024 <__assert_fail@plt+0x30f4>
   17c5c:	cmp	r9, r0
   17c60:	bhi	17cc8 <__assert_fail@plt+0x6d98>
   17c64:	ldr	r3, [pc, #172]	; 17d18 <__assert_fail@plt+0x6de8>
   17c68:	add	r9, r0, #1
   17c6c:	cmp	r7, r3
   17c70:	str	r9, [r6, r5, lsl #3]
   17c74:	beq	17c80 <__assert_fail@plt+0x6d50>
   17c78:	mov	r0, r7
   17c7c:	bl	13d58 <__assert_fail@plt+0x2e28>
   17c80:	mov	r0, r9
   17c84:	bl	18900 <__assert_fail@plt+0x79d0>
   17c88:	ldr	ip, [r4, #60]	; 0x3c
   17c8c:	ldr	r3, [r4, #16]
   17c90:	ldr	lr, [r4, #56]	; 0x38
   17c94:	ldr	r4, [pc, #120]	; 17d14 <__assert_fail@plt+0x6de4>
   17c98:	mov	r2, sl
   17c9c:	mov	r1, r9
   17ca0:	str	r0, [fp, #4]
   17ca4:	str	r4, [sp, #8]
   17ca8:	ldr	r4, [sp, #28]
   17cac:	str	r3, [sp]
   17cb0:	str	r4, [sp, #4]
   17cb4:	str	ip, [sp, #16]
   17cb8:	str	lr, [sp, #12]
   17cbc:	mvn	r3, #0
   17cc0:	mov	r7, r0
   17cc4:	bl	14024 <__assert_fail@plt+0x30f4>
   17cc8:	ldr	r3, [sp, #24]
   17ccc:	mov	r0, r7
   17cd0:	str	r3, [r8]
   17cd4:	add	sp, sp, #44	; 0x2c
   17cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17cdc:	mov	r3, #8
   17ce0:	sub	r2, r5, r2
   17ce4:	str	r3, [sp]
   17ce8:	add	r1, sp, #36	; 0x24
   17cec:	add	r2, r2, #1
   17cf0:	mvn	r3, #-2147483648	; 0x80000000
   17cf4:	bl	18b1c <__assert_fail@plt+0x7bec>
   17cf8:	mov	r6, r0
   17cfc:	ldm	r7, {r0, r1}
   17d00:	str	r6, [r4]
   17d04:	stm	r6, {r0, r1}
   17d08:	b	17be8 <__assert_fail@plt+0x6cb8>
   17d0c:	bl	10f24 <abort@plt>
   17d10:	strdeq	ip, [r2], -r4
   17d14:	andeq	ip, r2, ip, lsl #2
   17d18:			; <UNDEFINED> instruction: 0x0002c1b0
   17d1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d20:	sub	sp, sp, #44	; 0x2c
   17d24:	mov	sl, r0
   17d28:	bl	10e4c <__errno_location@plt>
   17d2c:	ldr	r4, [pc, #348]	; 17e90 <__assert_fail@plt+0x6f60>
   17d30:	ldr	r2, [r4, #4]
   17d34:	ldr	r5, [r4]
   17d38:	cmp	r2, #0
   17d3c:	ldr	r3, [r0]
   17d40:	mov	r8, r0
   17d44:	str	r3, [sp, #28]
   17d48:	bgt	17da4 <__assert_fail@plt+0x6e74>
   17d4c:	add	r6, r4, #8
   17d50:	cmp	r5, r6
   17d54:	str	r2, [sp, #36]	; 0x24
   17d58:	beq	17e60 <__assert_fail@plt+0x6f30>
   17d5c:	mov	r3, #8
   17d60:	mov	r0, r5
   17d64:	str	r3, [sp]
   17d68:	rsb	r2, r2, #1
   17d6c:	mvn	r3, #-2147483648	; 0x80000000
   17d70:	add	r1, sp, #36	; 0x24
   17d74:	bl	18b1c <__assert_fail@plt+0x7bec>
   17d78:	mov	r5, r0
   17d7c:	str	r0, [r4]
   17d80:	ldr	r0, [r4, #4]
   17d84:	ldr	r2, [sp, #36]	; 0x24
   17d88:	mov	r1, #0
   17d8c:	sub	r2, r2, r0
   17d90:	add	r0, r5, r0, lsl #3
   17d94:	lsl	r2, r2, #3
   17d98:	bl	10e64 <memset@plt>
   17d9c:	ldr	r3, [sp, #36]	; 0x24
   17da0:	str	r3, [r4, #4]
   17da4:	ldr	r7, [r4, #20]
   17da8:	ldr	r9, [r5]
   17dac:	ldr	r6, [r5, #4]
   17db0:	ldr	r2, [r4, #56]	; 0x38
   17db4:	ldr	r3, [r4, #16]
   17db8:	ldr	ip, [r4, #60]	; 0x3c
   17dbc:	ldr	fp, [pc, #208]	; 17e94 <__assert_fail@plt+0x6f64>
   17dc0:	orr	r7, r7, #1
   17dc4:	str	r2, [sp, #12]
   17dc8:	str	r3, [sp]
   17dcc:	str	r7, [sp, #4]
   17dd0:	mov	r1, r9
   17dd4:	mov	r0, r6
   17dd8:	str	ip, [sp, #16]
   17ddc:	str	fp, [sp, #8]
   17de0:	mvn	r3, #0
   17de4:	mov	r2, sl
   17de8:	bl	14024 <__assert_fail@plt+0x30f4>
   17dec:	cmp	r9, r0
   17df0:	bhi	17e4c <__assert_fail@plt+0x6f1c>
   17df4:	ldr	r3, [pc, #156]	; 17e98 <__assert_fail@plt+0x6f68>
   17df8:	add	r9, r0, #1
   17dfc:	cmp	r6, r3
   17e00:	str	r9, [r5]
   17e04:	beq	17e10 <__assert_fail@plt+0x6ee0>
   17e08:	mov	r0, r6
   17e0c:	bl	13d58 <__assert_fail@plt+0x2e28>
   17e10:	mov	r0, r9
   17e14:	bl	18900 <__assert_fail@plt+0x79d0>
   17e18:	ldr	ip, [r4, #60]	; 0x3c
   17e1c:	ldr	r3, [r4, #16]
   17e20:	ldr	lr, [r4, #56]	; 0x38
   17e24:	mov	r2, sl
   17e28:	mov	r1, r9
   17e2c:	str	r0, [r5, #4]
   17e30:	str	r3, [sp]
   17e34:	stmib	sp, {r7, fp}
   17e38:	str	ip, [sp, #16]
   17e3c:	str	lr, [sp, #12]
   17e40:	mvn	r3, #0
   17e44:	mov	r6, r0
   17e48:	bl	14024 <__assert_fail@plt+0x30f4>
   17e4c:	ldr	r3, [sp, #28]
   17e50:	mov	r0, r6
   17e54:	str	r3, [r8]
   17e58:	add	sp, sp, #44	; 0x2c
   17e5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e60:	mov	r3, #8
   17e64:	str	r3, [sp]
   17e68:	add	r1, sp, #36	; 0x24
   17e6c:	rsb	r2, r2, #1
   17e70:	mvn	r3, #-2147483648	; 0x80000000
   17e74:	mov	r0, #0
   17e78:	bl	18b1c <__assert_fail@plt+0x7bec>
   17e7c:	mov	r5, r0
   17e80:	ldm	r6, {r0, r1}
   17e84:	str	r5, [r4]
   17e88:	stm	r5, {r0, r1}
   17e8c:	b	17d80 <__assert_fail@plt+0x6e50>
   17e90:	strdeq	ip, [r2], -r4
   17e94:	andeq	ip, r2, ip, lsl #2
   17e98:			; <UNDEFINED> instruction: 0x0002c1b0
   17e9c:	push	{r4, r5, r6, lr}
   17ea0:	sub	sp, sp, #32
   17ea4:	cmp	r1, #0
   17ea8:	mov	r4, r0
   17eac:	ldr	r5, [sp, #48]	; 0x30
   17eb0:	ldr	r6, [sp, #52]	; 0x34
   17eb4:	beq	181cc <__assert_fail@plt+0x729c>
   17eb8:	stm	sp, {r2, r3}
   17ebc:	mov	r3, r1
   17ec0:	ldr	r2, [pc, #808]	; 181f0 <__assert_fail@plt+0x72c0>
   17ec4:	mov	r1, #1
   17ec8:	bl	10e88 <__fprintf_chk@plt>
   17ecc:	mov	r2, #5
   17ed0:	ldr	r1, [pc, #796]	; 181f4 <__assert_fail@plt+0x72c4>
   17ed4:	mov	r0, #0
   17ed8:	bl	10d68 <dcgettext@plt>
   17edc:	ldr	r3, [pc, #788]	; 181f8 <__assert_fail@plt+0x72c8>
   17ee0:	ldr	r2, [pc, #788]	; 181fc <__assert_fail@plt+0x72cc>
   17ee4:	str	r3, [sp]
   17ee8:	mov	r1, #1
   17eec:	mov	r3, r0
   17ef0:	mov	r0, r4
   17ef4:	bl	10e88 <__fprintf_chk@plt>
   17ef8:	mov	r1, r4
   17efc:	mov	r0, #10
   17f00:	bl	10d5c <fputc_unlocked@plt>
   17f04:	mov	r2, #5
   17f08:	ldr	r1, [pc, #752]	; 18200 <__assert_fail@plt+0x72d0>
   17f0c:	mov	r0, #0
   17f10:	bl	10d68 <dcgettext@plt>
   17f14:	mov	r1, #1
   17f18:	ldr	r3, [pc, #740]	; 18204 <__assert_fail@plt+0x72d4>
   17f1c:	mov	r2, r0
   17f20:	mov	r0, r4
   17f24:	bl	10e88 <__fprintf_chk@plt>
   17f28:	mov	r1, r4
   17f2c:	mov	r0, #10
   17f30:	bl	10d5c <fputc_unlocked@plt>
   17f34:	cmp	r6, #9
   17f38:	ldrls	pc, [pc, r6, lsl #2]
   17f3c:	b	181e4 <__assert_fail@plt+0x72b4>
   17f40:	andeq	r7, r1, r4, asr #31
   17f44:	andeq	r7, r1, ip, asr #31
   17f48:	strdeq	r7, [r1], -r8
   17f4c:	andeq	r8, r1, ip, lsr #32
   17f50:	andeq	r8, r1, r8, rrx
   17f54:	andeq	r8, r1, r4, lsr #1
   17f58:	andeq	r8, r1, r0, ror #1
   17f5c:	andeq	r8, r1, r4, lsr #2
   17f60:	andeq	r8, r1, r4, ror r1
   17f64:	andeq	r7, r1, r8, ror #30
   17f68:	ldr	r1, [pc, #664]	; 18208 <__assert_fail@plt+0x72d8>
   17f6c:	mov	r2, #5
   17f70:	mov	r0, #0
   17f74:	bl	10d68 <dcgettext@plt>
   17f78:	ldr	ip, [r5, #32]
   17f7c:	ldr	r1, [r5, #28]
   17f80:	ldr	r2, [r5, #24]
   17f84:	ldr	r3, [r5]
   17f88:	ldr	r6, [r5, #20]
   17f8c:	str	ip, [sp, #28]
   17f90:	ldr	lr, [r5, #16]
   17f94:	str	r1, [sp, #24]
   17f98:	ldr	ip, [r5, #12]
   17f9c:	str	r2, [sp, #20]
   17fa0:	ldr	r1, [r5, #8]
   17fa4:	ldr	r2, [r5, #4]
   17fa8:	str	r6, [sp, #16]
   17fac:	stmib	sp, {r1, ip, lr}
   17fb0:	mov	r1, #1
   17fb4:	str	r2, [sp]
   17fb8:	mov	r2, r0
   17fbc:	mov	r0, r4
   17fc0:	bl	10e88 <__fprintf_chk@plt>
   17fc4:	add	sp, sp, #32
   17fc8:	pop	{r4, r5, r6, pc}
   17fcc:	mov	r2, #5
   17fd0:	ldr	r1, [pc, #564]	; 1820c <__assert_fail@plt+0x72dc>
   17fd4:	mov	r0, #0
   17fd8:	bl	10d68 <dcgettext@plt>
   17fdc:	ldr	r3, [r5]
   17fe0:	mov	r1, #1
   17fe4:	mov	r2, r0
   17fe8:	mov	r0, r4
   17fec:	add	sp, sp, #32
   17ff0:	pop	{r4, r5, r6, lr}
   17ff4:	b	10e88 <__fprintf_chk@plt>
   17ff8:	mov	r2, #5
   17ffc:	ldr	r1, [pc, #524]	; 18210 <__assert_fail@plt+0x72e0>
   18000:	mov	r0, #0
   18004:	bl	10d68 <dcgettext@plt>
   18008:	ldr	r2, [r5, #4]
   1800c:	ldr	r3, [r5]
   18010:	mov	r1, #1
   18014:	str	r2, [sp, #48]	; 0x30
   18018:	mov	r2, r0
   1801c:	mov	r0, r4
   18020:	add	sp, sp, #32
   18024:	pop	{r4, r5, r6, lr}
   18028:	b	10e88 <__fprintf_chk@plt>
   1802c:	mov	r2, #5
   18030:	ldr	r1, [pc, #476]	; 18214 <__assert_fail@plt+0x72e4>
   18034:	mov	r0, #0
   18038:	bl	10d68 <dcgettext@plt>
   1803c:	ldr	r1, [r5, #8]
   18040:	ldr	r2, [r5, #4]
   18044:	ldr	r3, [r5]
   18048:	str	r1, [sp, #52]	; 0x34
   1804c:	str	r2, [sp, #48]	; 0x30
   18050:	mov	r1, #1
   18054:	mov	r2, r0
   18058:	mov	r0, r4
   1805c:	add	sp, sp, #32
   18060:	pop	{r4, r5, r6, lr}
   18064:	b	10e88 <__fprintf_chk@plt>
   18068:	mov	r2, #5
   1806c:	ldr	r1, [pc, #420]	; 18218 <__assert_fail@plt+0x72e8>
   18070:	mov	r0, #0
   18074:	bl	10d68 <dcgettext@plt>
   18078:	ldr	r1, [r5, #8]
   1807c:	ldr	ip, [r5, #12]
   18080:	ldr	r2, [r5, #4]
   18084:	ldr	r3, [r5]
   18088:	stmib	sp, {r1, ip}
   1808c:	str	r2, [sp]
   18090:	mov	r1, #1
   18094:	mov	r2, r0
   18098:	mov	r0, r4
   1809c:	bl	10e88 <__fprintf_chk@plt>
   180a0:	b	17fc4 <__assert_fail@plt+0x7094>
   180a4:	mov	r2, #5
   180a8:	ldr	r1, [pc, #364]	; 1821c <__assert_fail@plt+0x72ec>
   180ac:	mov	r0, #0
   180b0:	bl	10d68 <dcgettext@plt>
   180b4:	add	r1, r5, #8
   180b8:	ldr	r2, [r5, #4]
   180bc:	ldm	r1, {r1, ip, lr}
   180c0:	ldr	r3, [r5]
   180c4:	str	r2, [sp]
   180c8:	stmib	sp, {r1, ip, lr}
   180cc:	mov	r1, #1
   180d0:	mov	r2, r0
   180d4:	mov	r0, r4
   180d8:	bl	10e88 <__fprintf_chk@plt>
   180dc:	b	17fc4 <__assert_fail@plt+0x7094>
   180e0:	mov	r2, #5
   180e4:	ldr	r1, [pc, #308]	; 18220 <__assert_fail@plt+0x72f0>
   180e8:	mov	r0, #0
   180ec:	bl	10d68 <dcgettext@plt>
   180f0:	add	r1, r5, #8
   180f4:	ldr	r2, [r5, #4]
   180f8:	ldm	r1, {r1, ip, lr}
   180fc:	ldr	r6, [r5, #20]
   18100:	ldr	r3, [r5]
   18104:	stmib	sp, {r1, ip, lr}
   18108:	mov	r1, #1
   1810c:	str	r2, [sp]
   18110:	str	r6, [sp, #16]
   18114:	mov	r2, r0
   18118:	mov	r0, r4
   1811c:	bl	10e88 <__fprintf_chk@plt>
   18120:	b	17fc4 <__assert_fail@plt+0x7094>
   18124:	mov	r2, #5
   18128:	ldr	r1, [pc, #244]	; 18224 <__assert_fail@plt+0x72f4>
   1812c:	mov	r0, #0
   18130:	bl	10d68 <dcgettext@plt>
   18134:	ldr	r2, [r5, #24]
   18138:	ldr	r3, [r5]
   1813c:	ldr	r6, [r5, #20]
   18140:	ldr	lr, [r5, #16]
   18144:	ldr	ip, [r5, #12]
   18148:	str	r2, [sp, #20]
   1814c:	ldr	r1, [r5, #8]
   18150:	ldr	r2, [r5, #4]
   18154:	str	r6, [sp, #16]
   18158:	stmib	sp, {r1, ip, lr}
   1815c:	mov	r1, #1
   18160:	str	r2, [sp]
   18164:	mov	r2, r0
   18168:	mov	r0, r4
   1816c:	bl	10e88 <__fprintf_chk@plt>
   18170:	b	17fc4 <__assert_fail@plt+0x7094>
   18174:	mov	r2, #5
   18178:	ldr	r1, [pc, #168]	; 18228 <__assert_fail@plt+0x72f8>
   1817c:	mov	r0, #0
   18180:	bl	10d68 <dcgettext@plt>
   18184:	ldr	r1, [r5, #28]
   18188:	ldr	r2, [r5, #24]
   1818c:	ldr	r3, [r5]
   18190:	ldr	r6, [r5, #20]
   18194:	ldr	lr, [r5, #16]
   18198:	str	r1, [sp, #24]
   1819c:	ldr	ip, [r5, #12]
   181a0:	str	r2, [sp, #20]
   181a4:	ldr	r1, [r5, #8]
   181a8:	ldr	r2, [r5, #4]
   181ac:	str	r6, [sp, #16]
   181b0:	stmib	sp, {r1, ip, lr}
   181b4:	mov	r1, #1
   181b8:	str	r2, [sp]
   181bc:	mov	r2, r0
   181c0:	mov	r0, r4
   181c4:	bl	10e88 <__fprintf_chk@plt>
   181c8:	b	17fc4 <__assert_fail@plt+0x7094>
   181cc:	str	r3, [sp]
   181d0:	mov	r1, #1
   181d4:	mov	r3, r2
   181d8:	ldr	r2, [pc, #76]	; 1822c <__assert_fail@plt+0x72fc>
   181dc:	bl	10e88 <__fprintf_chk@plt>
   181e0:	b	17ecc <__assert_fail@plt+0x6f9c>
   181e4:	mov	r2, #5
   181e8:	ldr	r1, [pc, #64]	; 18230 <__assert_fail@plt+0x7300>
   181ec:	b	17f70 <__assert_fail@plt+0x7040>
   181f0:	strdeq	fp, [r1], -r4
   181f4:	andeq	fp, r1, r8, lsl #8
   181f8:	andeq	r0, r0, r6, ror #15
   181fc:	andeq	fp, r1, r0, ror #13
   18200:	andeq	fp, r1, ip, lsl #8
   18204:			; <UNDEFINED> instruction: 0x0001b4b8
   18208:	andeq	fp, r1, r8, ror #11
   1820c:	ldrdeq	fp, [r1], -ip
   18210:	andeq	fp, r1, ip, ror #9
   18214:	andeq	fp, r1, r4, lsl #10
   18218:	andeq	fp, r1, r0, lsr #10
   1821c:	andeq	fp, r1, r0, asr #10
   18220:	andeq	fp, r1, r4, ror #10
   18224:	andeq	fp, r1, ip, lsl #11
   18228:			; <UNDEFINED> instruction: 0x0001b5b8
   1822c:	andeq	fp, r1, r0, lsl #8
   18230:	andeq	fp, r1, ip, lsl r6
   18234:	push	{r4, r5, lr}
   18238:	sub	sp, sp, #12
   1823c:	ldr	r5, [sp, #24]
   18240:	ldr	ip, [r5]
   18244:	cmp	ip, #0
   18248:	beq	18264 <__assert_fail@plt+0x7334>
   1824c:	mov	lr, r5
   18250:	mov	ip, #0
   18254:	ldr	r4, [lr, #4]!
   18258:	add	ip, ip, #1
   1825c:	cmp	r4, #0
   18260:	bne	18254 <__assert_fail@plt+0x7324>
   18264:	stm	sp, {r5, ip}
   18268:	bl	17e9c <__assert_fail@plt+0x6f6c>
   1826c:	add	sp, sp, #12
   18270:	pop	{r4, r5, pc}
   18274:	push	{r4, r5, lr}
   18278:	sub	sp, sp, #76	; 0x4c
   1827c:	mov	r5, r0
   18280:	ldr	ip, [sp, #88]	; 0x58
   18284:	ldr	r0, [ip]
   18288:	cmp	r0, #0
   1828c:	str	r0, [sp, #32]
   18290:	beq	18664 <__assert_fail@plt+0x7734>
   18294:	ldr	r0, [ip, #4]
   18298:	cmp	r0, #0
   1829c:	str	r0, [sp, #36]	; 0x24
   182a0:	beq	1866c <__assert_fail@plt+0x773c>
   182a4:	ldr	r0, [ip, #8]
   182a8:	cmp	r0, #0
   182ac:	str	r0, [sp, #40]	; 0x28
   182b0:	beq	18674 <__assert_fail@plt+0x7744>
   182b4:	ldr	r0, [ip, #12]
   182b8:	cmp	r0, #0
   182bc:	str	r0, [sp, #44]	; 0x2c
   182c0:	beq	1867c <__assert_fail@plt+0x774c>
   182c4:	ldr	r0, [ip, #16]
   182c8:	cmp	r0, #0
   182cc:	str	r0, [sp, #48]	; 0x30
   182d0:	beq	18684 <__assert_fail@plt+0x7754>
   182d4:	ldr	r0, [ip, #20]
   182d8:	cmp	r0, #0
   182dc:	str	r0, [sp, #52]	; 0x34
   182e0:	beq	1868c <__assert_fail@plt+0x775c>
   182e4:	ldr	r0, [ip, #24]
   182e8:	cmp	r0, #0
   182ec:	str	r0, [sp, #56]	; 0x38
   182f0:	beq	18694 <__assert_fail@plt+0x7764>
   182f4:	ldr	r0, [ip, #28]
   182f8:	cmp	r0, #0
   182fc:	str	r0, [sp, #60]	; 0x3c
   18300:	beq	1869c <__assert_fail@plt+0x776c>
   18304:	ldr	r0, [ip, #32]
   18308:	cmp	r0, #0
   1830c:	str	r0, [sp, #64]	; 0x40
   18310:	beq	186a4 <__assert_fail@plt+0x7774>
   18314:	ldr	r0, [ip, #36]	; 0x24
   18318:	cmp	r0, #0
   1831c:	movne	r4, #10
   18320:	moveq	r4, #9
   18324:	cmp	r1, #0
   18328:	beq	1863c <__assert_fail@plt+0x770c>
   1832c:	stm	sp, {r2, r3}
   18330:	mov	r0, r5
   18334:	mov	r3, r1
   18338:	ldr	r2, [pc, #876]	; 186ac <__assert_fail@plt+0x777c>
   1833c:	mov	r1, #1
   18340:	bl	10e88 <__fprintf_chk@plt>
   18344:	mov	r2, #5
   18348:	ldr	r1, [pc, #864]	; 186b0 <__assert_fail@plt+0x7780>
   1834c:	mov	r0, #0
   18350:	bl	10d68 <dcgettext@plt>
   18354:	ldr	r3, [pc, #856]	; 186b4 <__assert_fail@plt+0x7784>
   18358:	ldr	r2, [pc, #856]	; 186b8 <__assert_fail@plt+0x7788>
   1835c:	str	r3, [sp]
   18360:	mov	r1, #1
   18364:	mov	r3, r0
   18368:	mov	r0, r5
   1836c:	bl	10e88 <__fprintf_chk@plt>
   18370:	mov	r1, r5
   18374:	mov	r0, #10
   18378:	bl	10d5c <fputc_unlocked@plt>
   1837c:	mov	r2, #5
   18380:	ldr	r1, [pc, #820]	; 186bc <__assert_fail@plt+0x778c>
   18384:	mov	r0, #0
   18388:	bl	10d68 <dcgettext@plt>
   1838c:	mov	r1, #1
   18390:	ldr	r3, [pc, #808]	; 186c0 <__assert_fail@plt+0x7790>
   18394:	mov	r2, r0
   18398:	mov	r0, r5
   1839c:	bl	10e88 <__fprintf_chk@plt>
   183a0:	mov	r1, r5
   183a4:	mov	r0, #10
   183a8:	bl	10d5c <fputc_unlocked@plt>
   183ac:	cmp	r4, #9
   183b0:	ldrls	pc, [pc, r4, lsl #2]
   183b4:	b	18658 <__assert_fail@plt+0x7728>
   183b8:	andeq	r8, r1, ip, lsr r4
   183bc:	andeq	r8, r1, r4, asr #8
   183c0:	andeq	r8, r1, r0, ror r4
   183c4:	andeq	r8, r1, r4, lsr #9
   183c8:	ldrdeq	r8, [r1], -ip
   183cc:	andeq	r8, r1, r8, lsl r5
   183d0:	andeq	r8, r1, r4, asr r5
   183d4:	muleq	r1, r8, r5
   183d8:	andeq	r8, r1, r4, ror #11
   183dc:	andeq	r8, r1, r0, ror #7
   183e0:	ldr	r1, [pc, #732]	; 186c4 <__assert_fail@plt+0x7794>
   183e4:	mov	r2, #5
   183e8:	mov	r0, #0
   183ec:	bl	10d68 <dcgettext@plt>
   183f0:	ldr	ip, [sp, #64]	; 0x40
   183f4:	ldr	r1, [sp, #60]	; 0x3c
   183f8:	ldr	r2, [sp, #56]	; 0x38
   183fc:	ldr	lr, [sp, #48]	; 0x30
   18400:	str	ip, [sp, #28]
   18404:	str	r1, [sp, #24]
   18408:	ldr	ip, [sp, #44]	; 0x2c
   1840c:	ldr	r1, [sp, #40]	; 0x28
   18410:	ldr	r4, [sp, #52]	; 0x34
   18414:	str	r2, [sp, #20]
   18418:	ldr	r2, [sp, #36]	; 0x24
   1841c:	stmib	sp, {r1, ip, lr}
   18420:	mov	r1, #1
   18424:	str	r2, [sp]
   18428:	ldr	r3, [sp, #32]
   1842c:	str	r4, [sp, #16]
   18430:	mov	r2, r0
   18434:	mov	r0, r5
   18438:	bl	10e88 <__fprintf_chk@plt>
   1843c:	add	sp, sp, #76	; 0x4c
   18440:	pop	{r4, r5, pc}
   18444:	mov	r2, #5
   18448:	ldr	r1, [pc, #632]	; 186c8 <__assert_fail@plt+0x7798>
   1844c:	mov	r0, #0
   18450:	bl	10d68 <dcgettext@plt>
   18454:	ldr	r3, [sp, #32]
   18458:	mov	r1, #1
   1845c:	mov	r2, r0
   18460:	mov	r0, r5
   18464:	add	sp, sp, #76	; 0x4c
   18468:	pop	{r4, r5, lr}
   1846c:	b	10e88 <__fprintf_chk@plt>
   18470:	mov	r2, #5
   18474:	ldr	r1, [pc, #592]	; 186cc <__assert_fail@plt+0x779c>
   18478:	mov	r0, #0
   1847c:	bl	10d68 <dcgettext@plt>
   18480:	ldr	r2, [sp, #36]	; 0x24
   18484:	ldr	r3, [sp, #32]
   18488:	str	r2, [sp, #88]	; 0x58
   1848c:	mov	r1, #1
   18490:	mov	r2, r0
   18494:	mov	r0, r5
   18498:	add	sp, sp, #76	; 0x4c
   1849c:	pop	{r4, r5, lr}
   184a0:	b	10e88 <__fprintf_chk@plt>
   184a4:	mov	r2, #5
   184a8:	ldr	r1, [pc, #544]	; 186d0 <__assert_fail@plt+0x77a0>
   184ac:	mov	r0, #0
   184b0:	bl	10d68 <dcgettext@plt>
   184b4:	ldr	r1, [sp, #40]	; 0x28
   184b8:	ldr	r2, [sp, #36]	; 0x24
   184bc:	str	r1, [sp, #4]
   184c0:	str	r2, [sp]
   184c4:	ldr	r3, [sp, #32]
   184c8:	mov	r1, #1
   184cc:	mov	r2, r0
   184d0:	mov	r0, r5
   184d4:	bl	10e88 <__fprintf_chk@plt>
   184d8:	b	1843c <__assert_fail@plt+0x750c>
   184dc:	mov	r2, #5
   184e0:	ldr	r1, [pc, #492]	; 186d4 <__assert_fail@plt+0x77a4>
   184e4:	mov	r0, #0
   184e8:	bl	10d68 <dcgettext@plt>
   184ec:	ldr	r1, [sp, #40]	; 0x28
   184f0:	ldr	ip, [sp, #44]	; 0x2c
   184f4:	ldr	r2, [sp, #36]	; 0x24
   184f8:	ldr	r3, [sp, #32]
   184fc:	stmib	sp, {r1, ip}
   18500:	str	r2, [sp]
   18504:	mov	r1, #1
   18508:	mov	r2, r0
   1850c:	mov	r0, r5
   18510:	bl	10e88 <__fprintf_chk@plt>
   18514:	b	1843c <__assert_fail@plt+0x750c>
   18518:	mov	r2, #5
   1851c:	ldr	r1, [pc, #436]	; 186d8 <__assert_fail@plt+0x77a8>
   18520:	mov	r0, #0
   18524:	bl	10d68 <dcgettext@plt>
   18528:	add	r1, sp, #40	; 0x28
   1852c:	ldr	r2, [sp, #36]	; 0x24
   18530:	ldm	r1, {r1, ip, lr}
   18534:	ldr	r3, [sp, #32]
   18538:	str	r2, [sp]
   1853c:	stmib	sp, {r1, ip, lr}
   18540:	mov	r1, #1
   18544:	mov	r2, r0
   18548:	mov	r0, r5
   1854c:	bl	10e88 <__fprintf_chk@plt>
   18550:	b	1843c <__assert_fail@plt+0x750c>
   18554:	mov	r2, #5
   18558:	ldr	r1, [pc, #380]	; 186dc <__assert_fail@plt+0x77ac>
   1855c:	mov	r0, #0
   18560:	bl	10d68 <dcgettext@plt>
   18564:	add	r1, sp, #40	; 0x28
   18568:	ldr	r2, [sp, #36]	; 0x24
   1856c:	ldm	r1, {r1, ip, lr}
   18570:	ldr	r4, [sp, #52]	; 0x34
   18574:	str	r2, [sp]
   18578:	stmib	sp, {r1, ip, lr}
   1857c:	mov	r1, #1
   18580:	ldr	r3, [sp, #32]
   18584:	str	r4, [sp, #16]
   18588:	mov	r2, r0
   1858c:	mov	r0, r5
   18590:	bl	10e88 <__fprintf_chk@plt>
   18594:	b	1843c <__assert_fail@plt+0x750c>
   18598:	mov	r2, #5
   1859c:	ldr	r1, [pc, #316]	; 186e0 <__assert_fail@plt+0x77b0>
   185a0:	mov	r0, #0
   185a4:	bl	10d68 <dcgettext@plt>
   185a8:	add	r1, sp, #40	; 0x28
   185ac:	ldr	r2, [sp, #56]	; 0x38
   185b0:	ldm	r1, {r1, ip, lr}
   185b4:	ldr	r4, [sp, #52]	; 0x34
   185b8:	str	r2, [sp, #20]
   185bc:	ldr	r2, [sp, #36]	; 0x24
   185c0:	stmib	sp, {r1, ip, lr}
   185c4:	mov	r1, #1
   185c8:	str	r2, [sp]
   185cc:	ldr	r3, [sp, #32]
   185d0:	str	r4, [sp, #16]
   185d4:	mov	r2, r0
   185d8:	mov	r0, r5
   185dc:	bl	10e88 <__fprintf_chk@plt>
   185e0:	b	1843c <__assert_fail@plt+0x750c>
   185e4:	mov	r2, #5
   185e8:	ldr	r1, [pc, #244]	; 186e4 <__assert_fail@plt+0x77b4>
   185ec:	mov	r0, #0
   185f0:	bl	10d68 <dcgettext@plt>
   185f4:	ldr	r1, [sp, #60]	; 0x3c
   185f8:	ldr	r2, [sp, #56]	; 0x38
   185fc:	ldr	lr, [sp, #48]	; 0x30
   18600:	ldr	ip, [sp, #44]	; 0x2c
   18604:	str	r1, [sp, #24]
   18608:	ldr	r1, [sp, #40]	; 0x28
   1860c:	ldr	r4, [sp, #52]	; 0x34
   18610:	str	r2, [sp, #20]
   18614:	ldr	r2, [sp, #36]	; 0x24
   18618:	stmib	sp, {r1, ip, lr}
   1861c:	mov	r1, #1
   18620:	str	r2, [sp]
   18624:	ldr	r3, [sp, #32]
   18628:	str	r4, [sp, #16]
   1862c:	mov	r2, r0
   18630:	mov	r0, r5
   18634:	bl	10e88 <__fprintf_chk@plt>
   18638:	b	1843c <__assert_fail@plt+0x750c>
   1863c:	str	r3, [sp]
   18640:	mov	r1, #1
   18644:	mov	r3, r2
   18648:	mov	r0, r5
   1864c:	ldr	r2, [pc, #148]	; 186e8 <__assert_fail@plt+0x77b8>
   18650:	bl	10e88 <__fprintf_chk@plt>
   18654:	b	18344 <__assert_fail@plt+0x7414>
   18658:	mov	r2, #5
   1865c:	ldr	r1, [pc, #136]	; 186ec <__assert_fail@plt+0x77bc>
   18660:	b	183e8 <__assert_fail@plt+0x74b8>
   18664:	mov	r4, r0
   18668:	b	18324 <__assert_fail@plt+0x73f4>
   1866c:	mov	r4, #1
   18670:	b	18324 <__assert_fail@plt+0x73f4>
   18674:	mov	r4, #2
   18678:	b	18324 <__assert_fail@plt+0x73f4>
   1867c:	mov	r4, #3
   18680:	b	18324 <__assert_fail@plt+0x73f4>
   18684:	mov	r4, #4
   18688:	b	18324 <__assert_fail@plt+0x73f4>
   1868c:	mov	r4, #5
   18690:	b	18324 <__assert_fail@plt+0x73f4>
   18694:	mov	r4, #6
   18698:	b	18324 <__assert_fail@plt+0x73f4>
   1869c:	mov	r4, #7
   186a0:	b	18324 <__assert_fail@plt+0x73f4>
   186a4:	mov	r4, #8
   186a8:	b	18324 <__assert_fail@plt+0x73f4>
   186ac:	strdeq	fp, [r1], -r4
   186b0:	andeq	fp, r1, r8, lsl #8
   186b4:	andeq	r0, r0, r6, ror #15
   186b8:	andeq	fp, r1, r0, ror #13
   186bc:	andeq	fp, r1, ip, lsl #8
   186c0:			; <UNDEFINED> instruction: 0x0001b4b8
   186c4:	andeq	fp, r1, r8, ror #11
   186c8:	ldrdeq	fp, [r1], -ip
   186cc:	andeq	fp, r1, ip, ror #9
   186d0:	andeq	fp, r1, r4, lsl #10
   186d4:	andeq	fp, r1, r0, lsr #10
   186d8:	andeq	fp, r1, r0, asr #10
   186dc:	andeq	fp, r1, r4, ror #10
   186e0:	andeq	fp, r1, ip, lsl #11
   186e4:			; <UNDEFINED> instruction: 0x0001b5b8
   186e8:	andeq	fp, r1, r0, lsl #8
   186ec:	andeq	fp, r1, ip, lsl r6
   186f0:	push	{r3}		; (str r3, [sp, #-4]!)
   186f4:	push	{lr}		; (str lr, [sp, #-4]!)
   186f8:	sub	sp, sp, #56	; 0x38
   186fc:	add	r3, sp, #64	; 0x40
   18700:	ldr	ip, [sp, #64]	; 0x40
   18704:	str	r3, [sp, #12]
   18708:	cmp	ip, #0
   1870c:	str	ip, [sp, #16]
   18710:	beq	187a8 <__assert_fail@plt+0x7878>
   18714:	ldr	ip, [sp, #68]	; 0x44
   18718:	cmp	ip, #0
   1871c:	str	ip, [sp, #20]
   18720:	beq	187c8 <__assert_fail@plt+0x7898>
   18724:	ldr	ip, [sp, #72]	; 0x48
   18728:	cmp	ip, #0
   1872c:	str	ip, [sp, #24]
   18730:	beq	187d0 <__assert_fail@plt+0x78a0>
   18734:	ldr	ip, [sp, #76]	; 0x4c
   18738:	cmp	ip, #0
   1873c:	str	ip, [sp, #28]
   18740:	beq	187d8 <__assert_fail@plt+0x78a8>
   18744:	ldr	ip, [sp, #80]	; 0x50
   18748:	cmp	ip, #0
   1874c:	str	ip, [sp, #32]
   18750:	beq	187e0 <__assert_fail@plt+0x78b0>
   18754:	ldr	ip, [sp, #84]	; 0x54
   18758:	cmp	ip, #0
   1875c:	str	ip, [sp, #36]	; 0x24
   18760:	beq	187e8 <__assert_fail@plt+0x78b8>
   18764:	ldr	ip, [sp, #88]	; 0x58
   18768:	cmp	ip, #0
   1876c:	str	ip, [sp, #40]	; 0x28
   18770:	beq	187f0 <__assert_fail@plt+0x78c0>
   18774:	ldr	ip, [sp, #92]	; 0x5c
   18778:	cmp	ip, #0
   1877c:	str	ip, [sp, #44]	; 0x2c
   18780:	beq	187f8 <__assert_fail@plt+0x78c8>
   18784:	ldr	ip, [sp, #96]	; 0x60
   18788:	cmp	ip, #0
   1878c:	str	ip, [sp, #48]	; 0x30
   18790:	beq	18800 <__assert_fail@plt+0x78d0>
   18794:	ldr	ip, [sp, #100]	; 0x64
   18798:	cmp	ip, #0
   1879c:	str	ip, [sp, #52]	; 0x34
   187a0:	movne	ip, #10
   187a4:	moveq	ip, #9
   187a8:	add	r3, sp, #16
   187ac:	stm	sp, {r3, ip}
   187b0:	ldr	r3, [sp, #60]	; 0x3c
   187b4:	bl	17e9c <__assert_fail@plt+0x6f6c>
   187b8:	add	sp, sp, #56	; 0x38
   187bc:	pop	{lr}		; (ldr lr, [sp], #4)
   187c0:	add	sp, sp, #4
   187c4:	bx	lr
   187c8:	mov	ip, #1
   187cc:	b	187a8 <__assert_fail@plt+0x7878>
   187d0:	mov	ip, #2
   187d4:	b	187a8 <__assert_fail@plt+0x7878>
   187d8:	mov	ip, #3
   187dc:	b	187a8 <__assert_fail@plt+0x7878>
   187e0:	mov	ip, #4
   187e4:	b	187a8 <__assert_fail@plt+0x7878>
   187e8:	mov	ip, #5
   187ec:	b	187a8 <__assert_fail@plt+0x7878>
   187f0:	mov	ip, #6
   187f4:	b	187a8 <__assert_fail@plt+0x7878>
   187f8:	mov	ip, #7
   187fc:	b	187a8 <__assert_fail@plt+0x7878>
   18800:	mov	ip, #8
   18804:	b	187a8 <__assert_fail@plt+0x7878>
   18808:	ldr	r3, [pc, #116]	; 18884 <__assert_fail@plt+0x7954>
   1880c:	push	{r4, lr}
   18810:	mov	r0, #10
   18814:	ldr	r1, [r3]
   18818:	bl	10d5c <fputc_unlocked@plt>
   1881c:	mov	r2, #5
   18820:	ldr	r1, [pc, #96]	; 18888 <__assert_fail@plt+0x7958>
   18824:	mov	r0, #0
   18828:	bl	10d68 <dcgettext@plt>
   1882c:	ldr	r2, [pc, #88]	; 1888c <__assert_fail@plt+0x795c>
   18830:	mov	r1, r0
   18834:	mov	r0, #1
   18838:	bl	10e70 <__printf_chk@plt>
   1883c:	mov	r2, #5
   18840:	ldr	r1, [pc, #72]	; 18890 <__assert_fail@plt+0x7960>
   18844:	mov	r0, #0
   18848:	bl	10d68 <dcgettext@plt>
   1884c:	ldr	r3, [pc, #64]	; 18894 <__assert_fail@plt+0x7964>
   18850:	ldr	r2, [pc, #64]	; 18898 <__assert_fail@plt+0x7968>
   18854:	mov	r1, r0
   18858:	mov	r0, #1
   1885c:	bl	10e70 <__printf_chk@plt>
   18860:	mov	r2, #5
   18864:	ldr	r1, [pc, #48]	; 1889c <__assert_fail@plt+0x796c>
   18868:	mov	r0, #0
   1886c:	bl	10d68 <dcgettext@plt>
   18870:	ldr	r2, [pc, #40]	; 188a0 <__assert_fail@plt+0x7970>
   18874:	pop	{r4, lr}
   18878:	mov	r1, r0
   1887c:	mov	r0, #1
   18880:	b	10e70 <__printf_chk@plt>
   18884:	andeq	ip, r2, r4, asr r1
   18888:	andeq	fp, r1, r8, asr r6
   1888c:	andeq	fp, r1, ip, ror #12
   18890:	andeq	fp, r1, r4, lsl #13
   18894:	strdeq	sl, [r1], -ip
   18898:	andeq	sl, r1, r4, lsr #28
   1889c:	muleq	r1, r8, r6
   188a0:	andeq	fp, r1, r0, asr #13
   188a4:	push	{r4, r5, r6, lr}
   188a8:	mov	r6, r0
   188ac:	mov	r5, r1
   188b0:	mov	r4, r2
   188b4:	bl	19cc8 <__assert_fail@plt+0x8d98>
   188b8:	cmp	r0, #0
   188bc:	popne	{r4, r5, r6, pc}
   188c0:	cmp	r6, #0
   188c4:	beq	188d4 <__assert_fail@plt+0x79a4>
   188c8:	cmp	r5, #0
   188cc:	cmpne	r4, #0
   188d0:	popeq	{r4, r5, r6, pc}
   188d4:	bl	18f20 <__assert_fail@plt+0x7ff0>
   188d8:	push	{r4, lr}
   188dc:	bl	19b3c <__assert_fail@plt+0x8c0c>
   188e0:	cmp	r0, #0
   188e4:	popne	{r4, pc}
   188e8:	bl	18f20 <__assert_fail@plt+0x7ff0>
   188ec:	push	{r4, lr}
   188f0:	bl	19b3c <__assert_fail@plt+0x8c0c>
   188f4:	cmp	r0, #0
   188f8:	popne	{r4, pc}
   188fc:	bl	18f20 <__assert_fail@plt+0x7ff0>
   18900:	push	{r4, lr}
   18904:	bl	19b3c <__assert_fail@plt+0x8c0c>
   18908:	cmp	r0, #0
   1890c:	popne	{r4, pc}
   18910:	bl	18f20 <__assert_fail@plt+0x7ff0>
   18914:	push	{r4, r5, r6, lr}
   18918:	mov	r5, r0
   1891c:	mov	r4, r1
   18920:	bl	19b68 <__assert_fail@plt+0x8c38>
   18924:	cmp	r0, #0
   18928:	popne	{r4, r5, r6, pc}
   1892c:	adds	r4, r4, #0
   18930:	movne	r4, #1
   18934:	cmp	r5, #0
   18938:	orreq	r4, r4, #1
   1893c:	cmp	r4, #0
   18940:	popeq	{r4, r5, r6, pc}
   18944:	bl	18f20 <__assert_fail@plt+0x7ff0>
   18948:	push	{r4, lr}
   1894c:	cmp	r1, #0
   18950:	orreq	r1, r1, #1
   18954:	bl	19b68 <__assert_fail@plt+0x8c38>
   18958:	cmp	r0, #0
   1895c:	popne	{r4, pc}
   18960:	bl	18f20 <__assert_fail@plt+0x7ff0>
   18964:	push	{r4, r5, r6, lr}
   18968:	mov	r6, r0
   1896c:	mov	r5, r1
   18970:	mov	r4, r2
   18974:	bl	19cc8 <__assert_fail@plt+0x8d98>
   18978:	cmp	r0, #0
   1897c:	popne	{r4, r5, r6, pc}
   18980:	cmp	r6, #0
   18984:	beq	18994 <__assert_fail@plt+0x7a64>
   18988:	cmp	r5, #0
   1898c:	cmpne	r4, #0
   18990:	popeq	{r4, r5, r6, pc}
   18994:	bl	18f20 <__assert_fail@plt+0x7ff0>
   18998:	cmp	r2, #0
   1899c:	cmpne	r1, #0
   189a0:	moveq	r2, #1
   189a4:	moveq	r1, r2
   189a8:	push	{r4, lr}
   189ac:	bl	19cc8 <__assert_fail@plt+0x8d98>
   189b0:	cmp	r0, #0
   189b4:	popne	{r4, pc}
   189b8:	bl	18f20 <__assert_fail@plt+0x7ff0>
   189bc:	push	{r4, lr}
   189c0:	mov	r2, r1
   189c4:	mov	r1, r0
   189c8:	mov	r0, #0
   189cc:	bl	19cc8 <__assert_fail@plt+0x8d98>
   189d0:	cmp	r0, #0
   189d4:	popne	{r4, pc}
   189d8:	bl	18f20 <__assert_fail@plt+0x7ff0>
   189dc:	cmp	r1, #0
   189e0:	cmpne	r0, #0
   189e4:	moveq	r2, #1
   189e8:	movne	r2, r1
   189ec:	moveq	r1, r2
   189f0:	movne	r1, r0
   189f4:	push	{r4, lr}
   189f8:	mov	r0, #0
   189fc:	bl	19cc8 <__assert_fail@plt+0x8d98>
   18a00:	cmp	r0, #0
   18a04:	popne	{r4, pc}
   18a08:	bl	18f20 <__assert_fail@plt+0x7ff0>
   18a0c:	cmp	r0, #0
   18a10:	push	{r4, r5, r6, lr}
   18a14:	mov	r5, r1
   18a18:	ldr	r4, [r1]
   18a1c:	beq	18a58 <__assert_fail@plt+0x7b28>
   18a20:	lsr	r2, r4, #1
   18a24:	add	r3, r2, #1
   18a28:	mvn	r3, r3
   18a2c:	cmp	r4, r3
   18a30:	bhi	18a74 <__assert_fail@plt+0x7b44>
   18a34:	add	r4, r4, #1
   18a38:	add	r4, r4, r2
   18a3c:	mov	r1, r4
   18a40:	mov	r2, #1
   18a44:	bl	19cc8 <__assert_fail@plt+0x8d98>
   18a48:	cmp	r0, #0
   18a4c:	beq	18a78 <__assert_fail@plt+0x7b48>
   18a50:	str	r4, [r5]
   18a54:	pop	{r4, r5, r6, pc}
   18a58:	cmp	r4, #0
   18a5c:	moveq	r4, #64	; 0x40
   18a60:	mov	r1, r4
   18a64:	mov	r2, #1
   18a68:	bl	19cc8 <__assert_fail@plt+0x8d98>
   18a6c:	cmp	r0, #0
   18a70:	bne	18a50 <__assert_fail@plt+0x7b20>
   18a74:	bl	18f20 <__assert_fail@plt+0x7ff0>
   18a78:	cmp	r4, #0
   18a7c:	bne	18a74 <__assert_fail@plt+0x7b44>
   18a80:	str	r4, [r5]
   18a84:	pop	{r4, r5, r6, pc}
   18a88:	cmp	r0, #0
   18a8c:	push	{r4, r5, r6, lr}
   18a90:	mov	r5, r1
   18a94:	ldr	r4, [r1]
   18a98:	mov	r6, r2
   18a9c:	beq	18ae0 <__assert_fail@plt+0x7bb0>
   18aa0:	lsr	r1, r4, #1
   18aa4:	add	r3, r1, #1
   18aa8:	mvn	r3, r3
   18aac:	cmp	r4, r3
   18ab0:	bhi	18b18 <__assert_fail@plt+0x7be8>
   18ab4:	add	r4, r4, #1
   18ab8:	add	r4, r4, r1
   18abc:	mov	r1, r4
   18ac0:	bl	19cc8 <__assert_fail@plt+0x8d98>
   18ac4:	cmp	r0, #0
   18ac8:	bne	18ad8 <__assert_fail@plt+0x7ba8>
   18acc:	cmp	r4, #0
   18ad0:	cmpne	r6, #0
   18ad4:	bne	18b18 <__assert_fail@plt+0x7be8>
   18ad8:	str	r4, [r5]
   18adc:	pop	{r4, r5, r6, pc}
   18ae0:	cmp	r4, #0
   18ae4:	bne	18b00 <__assert_fail@plt+0x7bd0>
   18ae8:	mov	r1, r2
   18aec:	mov	r0, #64	; 0x40
   18af0:	bl	19e08 <__assert_fail@plt+0x8ed8>
   18af4:	cmp	r0, #0
   18af8:	movne	r4, r0
   18afc:	addeq	r4, r0, #1
   18b00:	mov	r2, r6
   18b04:	mov	r1, r4
   18b08:	mov	r0, #0
   18b0c:	bl	19cc8 <__assert_fail@plt+0x8d98>
   18b10:	cmp	r0, #0
   18b14:	bne	18ad8 <__assert_fail@plt+0x7ba8>
   18b18:	bl	18f20 <__assert_fail@plt+0x7ff0>
   18b1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b20:	sub	sp, sp, #12
   18b24:	ldr	r6, [r1]
   18b28:	mov	r8, r1
   18b2c:	mov	r9, r0
   18b30:	asrs	r4, r6, #1
   18b34:	mov	sl, r2
   18b38:	mov	fp, r3
   18b3c:	ldr	r7, [sp, #48]	; 0x30
   18b40:	bmi	18cbc <__assert_fail@plt+0x7d8c>
   18b44:	mvn	r1, #-2147483648	; 0x80000000
   18b48:	sub	r1, r1, r4
   18b4c:	cmp	r6, r1
   18b50:	movle	r1, #0
   18b54:	movgt	r1, #1
   18b58:	mvn	r3, fp
   18b5c:	cmp	r1, #0
   18b60:	addeq	r4, r4, r6
   18b64:	mvnne	r4, #-2147483648	; 0x80000000
   18b68:	lsr	r3, r3, #31
   18b6c:	cmp	fp, r4
   18b70:	movge	r2, #0
   18b74:	andlt	r2, r3, #1
   18b78:	cmp	r2, #0
   18b7c:	beq	18c6c <__assert_fail@plt+0x7d3c>
   18b80:	cmp	r7, #0
   18b84:	blt	18d54 <__assert_fail@plt+0x7e24>
   18b88:	bne	18d4c <__assert_fail@plt+0x7e1c>
   18b8c:	mov	r5, #64	; 0x40
   18b90:	mov	r1, r7
   18b94:	mov	r0, r5
   18b98:	str	r3, [sp, #4]
   18b9c:	bl	1a014 <__assert_fail@plt+0x90e4>
   18ba0:	mov	r1, r7
   18ba4:	mov	r4, r0
   18ba8:	mov	r0, r5
   18bac:	bl	1a234 <__assert_fail@plt+0x9304>
   18bb0:	ldr	r3, [sp, #4]
   18bb4:	sub	r5, r5, r1
   18bb8:	cmp	r9, #0
   18bbc:	sub	r2, r4, r6
   18bc0:	streq	r9, [r8]
   18bc4:	cmp	r2, sl
   18bc8:	bge	18c4c <__assert_fail@plt+0x7d1c>
   18bcc:	cmp	sl, #0
   18bd0:	blt	18cec <__assert_fail@plt+0x7dbc>
   18bd4:	cmp	r6, #0
   18bd8:	blt	18bf8 <__assert_fail@plt+0x7cc8>
   18bdc:	mvn	r2, #-2147483648	; 0x80000000
   18be0:	sub	r2, r2, sl
   18be4:	cmp	r6, r2
   18be8:	movle	r2, #0
   18bec:	movgt	r2, #1
   18bf0:	cmp	r2, #0
   18bf4:	bne	18ce8 <__assert_fail@plt+0x7db8>
   18bf8:	add	r6, r6, sl
   18bfc:	cmp	fp, r6
   18c00:	movge	r3, #0
   18c04:	andlt	r3, r3, #1
   18c08:	cmp	r3, #0
   18c0c:	mov	r4, r6
   18c10:	bne	18ce8 <__assert_fail@plt+0x7db8>
   18c14:	cmp	r7, #0
   18c18:	blt	18d00 <__assert_fail@plt+0x7dd0>
   18c1c:	beq	18c48 <__assert_fail@plt+0x7d18>
   18c20:	cmp	r6, #0
   18c24:	blt	18da4 <__assert_fail@plt+0x7e74>
   18c28:	mov	r1, r7
   18c2c:	mvn	r0, #-2147483648	; 0x80000000
   18c30:	bl	1a014 <__assert_fail@plt+0x90e4>
   18c34:	cmp	r6, r0
   18c38:	movle	r0, #0
   18c3c:	movgt	r0, #1
   18c40:	cmp	r0, #0
   18c44:	bne	18ce8 <__assert_fail@plt+0x7db8>
   18c48:	mul	r5, r6, r7
   18c4c:	mov	r1, r5
   18c50:	mov	r0, r9
   18c54:	bl	19b68 <__assert_fail@plt+0x8c38>
   18c58:	cmp	r0, #0
   18c5c:	beq	18cd0 <__assert_fail@plt+0x7da0>
   18c60:	str	r4, [r8]
   18c64:	add	sp, sp, #12
   18c68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c6c:	cmp	r7, #0
   18c70:	blt	18d2c <__assert_fail@plt+0x7dfc>
   18c74:	beq	18b8c <__assert_fail@plt+0x7c5c>
   18c78:	cmp	r4, #0
   18c7c:	blt	18d5c <__assert_fail@plt+0x7e2c>
   18c80:	mov	r1, r7
   18c84:	mvn	r0, #-2147483648	; 0x80000000
   18c88:	str	r3, [sp, #4]
   18c8c:	bl	1a014 <__assert_fail@plt+0x90e4>
   18c90:	ldr	r3, [sp, #4]
   18c94:	cmp	r0, r4
   18c98:	movge	r0, #0
   18c9c:	movlt	r0, #1
   18ca0:	cmp	r0, #0
   18ca4:	mvnne	r5, #-2147483648	; 0x80000000
   18ca8:	bne	18b90 <__assert_fail@plt+0x7c60>
   18cac:	mul	r5, r7, r4
   18cb0:	cmp	r5, #63	; 0x3f
   18cb4:	bgt	18bb8 <__assert_fail@plt+0x7c88>
   18cb8:	b	18b8c <__assert_fail@plt+0x7c5c>
   18cbc:	rsb	r1, r4, #-2147483648	; 0x80000000
   18cc0:	cmp	r6, r1
   18cc4:	movge	r1, #0
   18cc8:	movlt	r1, #1
   18ccc:	b	18b58 <__assert_fail@plt+0x7c28>
   18cd0:	adds	r5, r5, #0
   18cd4:	movne	r5, #1
   18cd8:	cmp	r9, #0
   18cdc:	orreq	r5, r5, #1
   18ce0:	cmp	r5, #0
   18ce4:	beq	18c60 <__assert_fail@plt+0x7d30>
   18ce8:	bl	18f20 <__assert_fail@plt+0x7ff0>
   18cec:	rsb	r2, sl, #-2147483648	; 0x80000000
   18cf0:	cmp	r6, r2
   18cf4:	movge	r2, #0
   18cf8:	movlt	r2, #1
   18cfc:	b	18bf0 <__assert_fail@plt+0x7cc0>
   18d00:	cmp	r6, #0
   18d04:	blt	18d88 <__assert_fail@plt+0x7e58>
   18d08:	cmn	r7, #1
   18d0c:	beq	18c48 <__assert_fail@plt+0x7d18>
   18d10:	mov	r1, r7
   18d14:	mov	r0, #-2147483648	; 0x80000000
   18d18:	bl	1a014 <__assert_fail@plt+0x90e4>
   18d1c:	cmp	r6, r0
   18d20:	movle	r0, #0
   18d24:	movgt	r0, #1
   18d28:	b	18c40 <__assert_fail@plt+0x7d10>
   18d2c:	cmp	r4, #0
   18d30:	blt	18dc8 <__assert_fail@plt+0x7e98>
   18d34:	cmn	r7, #1
   18d38:	beq	18cac <__assert_fail@plt+0x7d7c>
   18d3c:	str	r3, [sp, #4]
   18d40:	mov	r1, r7
   18d44:	mov	r0, #-2147483648	; 0x80000000
   18d48:	b	18c8c <__assert_fail@plt+0x7d5c>
   18d4c:	mov	r4, fp
   18d50:	b	18c80 <__assert_fail@plt+0x7d50>
   18d54:	mov	r4, fp
   18d58:	b	18d34 <__assert_fail@plt+0x7e04>
   18d5c:	cmn	r4, #1
   18d60:	beq	18cac <__assert_fail@plt+0x7d7c>
   18d64:	mov	r1, r4
   18d68:	mov	r0, #-2147483648	; 0x80000000
   18d6c:	str	r3, [sp, #4]
   18d70:	bl	1a014 <__assert_fail@plt+0x90e4>
   18d74:	ldr	r3, [sp, #4]
   18d78:	cmp	r7, r0
   18d7c:	movle	r0, #0
   18d80:	movgt	r0, #1
   18d84:	b	18ca0 <__assert_fail@plt+0x7d70>
   18d88:	mov	r1, r7
   18d8c:	mvn	r0, #-2147483648	; 0x80000000
   18d90:	bl	1a014 <__assert_fail@plt+0x90e4>
   18d94:	cmp	r6, r0
   18d98:	movge	r0, #0
   18d9c:	movlt	r0, #1
   18da0:	b	18c40 <__assert_fail@plt+0x7d10>
   18da4:	cmn	r6, #1
   18da8:	beq	18c48 <__assert_fail@plt+0x7d18>
   18dac:	mov	r1, r6
   18db0:	mov	r0, #-2147483648	; 0x80000000
   18db4:	bl	1a014 <__assert_fail@plt+0x90e4>
   18db8:	cmp	r7, r0
   18dbc:	movle	r0, #0
   18dc0:	movgt	r0, #1
   18dc4:	b	18c40 <__assert_fail@plt+0x7d10>
   18dc8:	mov	r1, r7
   18dcc:	mvn	r0, #-2147483648	; 0x80000000
   18dd0:	str	r3, [sp, #4]
   18dd4:	bl	1a014 <__assert_fail@plt+0x90e4>
   18dd8:	ldr	r3, [sp, #4]
   18ddc:	cmp	r0, r4
   18de0:	movle	r0, #0
   18de4:	movgt	r0, #1
   18de8:	b	18ca0 <__assert_fail@plt+0x7d70>
   18dec:	push	{r4, lr}
   18df0:	mov	r1, #1
   18df4:	bl	19af4 <__assert_fail@plt+0x8bc4>
   18df8:	cmp	r0, #0
   18dfc:	popne	{r4, pc}
   18e00:	bl	18f20 <__assert_fail@plt+0x7ff0>
   18e04:	push	{r4, lr}
   18e08:	mov	r1, #1
   18e0c:	bl	19af4 <__assert_fail@plt+0x8bc4>
   18e10:	cmp	r0, #0
   18e14:	popne	{r4, pc}
   18e18:	bl	18f20 <__assert_fail@plt+0x7ff0>
   18e1c:	push	{r4, lr}
   18e20:	bl	19af4 <__assert_fail@plt+0x8bc4>
   18e24:	cmp	r0, #0
   18e28:	popne	{r4, pc}
   18e2c:	bl	18f20 <__assert_fail@plt+0x7ff0>
   18e30:	push	{r4, lr}
   18e34:	bl	19af4 <__assert_fail@plt+0x8bc4>
   18e38:	cmp	r0, #0
   18e3c:	popne	{r4, pc}
   18e40:	bl	18f20 <__assert_fail@plt+0x7ff0>
   18e44:	push	{r4, r5, r6, lr}
   18e48:	mov	r6, r0
   18e4c:	mov	r0, r1
   18e50:	mov	r4, r1
   18e54:	bl	19b3c <__assert_fail@plt+0x8c0c>
   18e58:	subs	r5, r0, #0
   18e5c:	beq	18e74 <__assert_fail@plt+0x7f44>
   18e60:	mov	r2, r4
   18e64:	mov	r1, r6
   18e68:	bl	10d2c <memcpy@plt>
   18e6c:	mov	r0, r5
   18e70:	pop	{r4, r5, r6, pc}
   18e74:	bl	18f20 <__assert_fail@plt+0x7ff0>
   18e78:	push	{r4, r5, r6, lr}
   18e7c:	mov	r6, r0
   18e80:	mov	r0, r1
   18e84:	mov	r4, r1
   18e88:	bl	19b3c <__assert_fail@plt+0x8c0c>
   18e8c:	subs	r5, r0, #0
   18e90:	beq	18ea8 <__assert_fail@plt+0x7f78>
   18e94:	mov	r2, r4
   18e98:	mov	r1, r6
   18e9c:	bl	10d2c <memcpy@plt>
   18ea0:	mov	r0, r5
   18ea4:	pop	{r4, r5, r6, pc}
   18ea8:	bl	18f20 <__assert_fail@plt+0x7ff0>
   18eac:	push	{r4, r5, r6, lr}
   18eb0:	mov	r6, r0
   18eb4:	add	r0, r1, #1
   18eb8:	mov	r4, r1
   18ebc:	bl	19b3c <__assert_fail@plt+0x8c0c>
   18ec0:	subs	r5, r0, #0
   18ec4:	beq	18ee4 <__assert_fail@plt+0x7fb4>
   18ec8:	mov	r3, #0
   18ecc:	mov	r1, r6
   18ed0:	strb	r3, [r5, r4]
   18ed4:	mov	r2, r4
   18ed8:	bl	10d2c <memcpy@plt>
   18edc:	mov	r0, r5
   18ee0:	pop	{r4, r5, r6, pc}
   18ee4:	bl	18f20 <__assert_fail@plt+0x7ff0>
   18ee8:	push	{r4, r5, r6, lr}
   18eec:	mov	r6, r0
   18ef0:	bl	10e34 <strlen@plt>
   18ef4:	add	r4, r0, #1
   18ef8:	mov	r0, r4
   18efc:	bl	19b3c <__assert_fail@plt+0x8c0c>
   18f00:	subs	r5, r0, #0
   18f04:	beq	18f1c <__assert_fail@plt+0x7fec>
   18f08:	mov	r2, r4
   18f0c:	mov	r1, r6
   18f10:	bl	10d2c <memcpy@plt>
   18f14:	mov	r0, r5
   18f18:	pop	{r4, r5, r6, pc}
   18f1c:	bl	18f20 <__assert_fail@plt+0x7ff0>
   18f20:	ldr	r3, [pc, #44]	; 18f54 <__assert_fail@plt+0x8024>
   18f24:	push	{r4, lr}
   18f28:	mov	r2, #5
   18f2c:	ldr	r1, [pc, #36]	; 18f58 <__assert_fail@plt+0x8028>
   18f30:	mov	r0, #0
   18f34:	ldr	r4, [r3]
   18f38:	bl	10d68 <dcgettext@plt>
   18f3c:	ldr	r2, [pc, #24]	; 18f5c <__assert_fail@plt+0x802c>
   18f40:	mov	r1, #0
   18f44:	mov	r3, r0
   18f48:	mov	r0, r4
   18f4c:	bl	10dd4 <error@plt>
   18f50:	bl	10f24 <abort@plt>
   18f54:	strdeq	ip, [r2], -r0
   18f58:	andeq	fp, r1, r0, lsl r7
   18f5c:	andeq	sl, r1, r0, lsl #30
   18f60:	cmp	r2, #36	; 0x24
   18f64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f68:	sub	sp, sp, #52	; 0x34
   18f6c:	bhi	19ae0 <__assert_fail@plt+0x8bb0>
   18f70:	cmp	r1, #0
   18f74:	mov	r5, r1
   18f78:	mov	r6, r2
   18f7c:	addeq	r5, sp, #44	; 0x2c
   18f80:	mov	sl, r0
   18f84:	mov	r9, r3
   18f88:	bl	10e4c <__errno_location@plt>
   18f8c:	mov	r4, #0
   18f90:	mov	r2, r6
   18f94:	mov	r3, r4
   18f98:	mov	r1, r5
   18f9c:	str	r4, [r0]
   18fa0:	mov	fp, r0
   18fa4:	mov	r0, sl
   18fa8:	bl	10ee8 <__strtoll_internal@plt>
   18fac:	ldr	r8, [r5]
   18fb0:	cmp	sl, r8
   18fb4:	mov	r6, r0
   18fb8:	mov	r7, r1
   18fbc:	beq	1900c <__assert_fail@plt+0x80dc>
   18fc0:	ldr	r4, [fp]
   18fc4:	cmp	r4, #0
   18fc8:	bne	18ff4 <__assert_fail@plt+0x80c4>
   18fcc:	ldr	r3, [sp, #88]	; 0x58
   18fd0:	cmp	r3, #0
   18fd4:	beq	18fe4 <__assert_fail@plt+0x80b4>
   18fd8:	ldrb	sl, [r8]
   18fdc:	cmp	sl, #0
   18fe0:	bne	19040 <__assert_fail@plt+0x8110>
   18fe4:	strd	r6, [r9]
   18fe8:	mov	r0, r4
   18fec:	add	sp, sp, #52	; 0x34
   18ff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ff4:	cmp	r4, #34	; 0x22
   18ff8:	beq	192a0 <__assert_fail@plt+0x8370>
   18ffc:	mov	r4, #4
   19000:	mov	r0, r4
   19004:	add	sp, sp, #52	; 0x34
   19008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1900c:	ldr	r3, [sp, #88]	; 0x58
   19010:	cmp	r3, r4
   19014:	beq	18ffc <__assert_fail@plt+0x80cc>
   19018:	ldrb	sl, [sl]
   1901c:	cmp	sl, r4
   19020:	beq	18ffc <__assert_fail@plt+0x80cc>
   19024:	mov	r1, sl
   19028:	mov	r0, r3
   1902c:	bl	10e40 <strchr@plt>
   19030:	cmp	r0, r4
   19034:	movne	r6, #1
   19038:	movne	r7, #0
   1903c:	beq	18ffc <__assert_fail@plt+0x80cc>
   19040:	mov	r1, sl
   19044:	ldr	r0, [sp, #88]	; 0x58
   19048:	bl	10e40 <strchr@plt>
   1904c:	cmp	r0, #0
   19050:	beq	19658 <__assert_fail@plt+0x8728>
   19054:	sub	r3, sl, #69	; 0x45
   19058:	cmp	r3, #47	; 0x2f
   1905c:	ldrls	pc, [pc, r3, lsl #2]
   19060:	b	19124 <__assert_fail@plt+0x81f4>
   19064:	andeq	r9, r1, ip, lsr r2
   19068:	andeq	r9, r1, r4, lsr #2
   1906c:	andeq	r9, r1, ip, lsr r2
   19070:	andeq	r9, r1, r4, lsr #2
   19074:	andeq	r9, r1, r4, lsr #2
   19078:	andeq	r9, r1, r4, lsr #2
   1907c:	andeq	r9, r1, ip, lsr r2
   19080:	andeq	r9, r1, r4, lsr #2
   19084:	andeq	r9, r1, ip, lsr r2
   19088:	andeq	r9, r1, r4, lsr #2
   1908c:	andeq	r9, r1, r4, lsr #2
   19090:	andeq	r9, r1, ip, lsr r2
   19094:	andeq	r9, r1, r4, lsr #2
   19098:	andeq	r9, r1, r4, lsr #2
   1909c:	andeq	r9, r1, r4, lsr #2
   190a0:	andeq	r9, r1, ip, lsr r2
   190a4:	andeq	r9, r1, r4, lsr #2
   190a8:	andeq	r9, r1, r4, lsr #2
   190ac:	andeq	r9, r1, r4, lsr #2
   190b0:	andeq	r9, r1, r4, lsr #2
   190b4:	andeq	r9, r1, ip, lsr r2
   190b8:	andeq	r9, r1, ip, lsr r2
   190bc:	andeq	r9, r1, r4, lsr #2
   190c0:	andeq	r9, r1, r4, lsr #2
   190c4:	andeq	r9, r1, r4, lsr #2
   190c8:	andeq	r9, r1, r4, lsr #2
   190cc:	andeq	r9, r1, r4, lsr #2
   190d0:	andeq	r9, r1, r4, lsr #2
   190d4:	andeq	r9, r1, r4, lsr #2
   190d8:	andeq	r9, r1, r4, lsr #2
   190dc:	andeq	r9, r1, r4, lsr #2
   190e0:	andeq	r9, r1, r4, lsr #2
   190e4:	andeq	r9, r1, r4, lsr #2
   190e8:	andeq	r9, r1, r4, lsr #2
   190ec:	andeq	r9, r1, ip, lsr r2
   190f0:	andeq	r9, r1, r4, lsr #2
   190f4:	andeq	r9, r1, r4, lsr #2
   190f8:	andeq	r9, r1, r4, lsr #2
   190fc:	andeq	r9, r1, ip, lsr r2
   19100:	andeq	r9, r1, r4, lsr #2
   19104:	andeq	r9, r1, ip, lsr r2
   19108:	andeq	r9, r1, r4, lsr #2
   1910c:	andeq	r9, r1, r4, lsr #2
   19110:	andeq	r9, r1, r4, lsr #2
   19114:	andeq	r9, r1, r4, lsr #2
   19118:	andeq	r9, r1, r4, lsr #2
   1911c:	andeq	r9, r1, r4, lsr #2
   19120:	andeq	r9, r1, ip, lsr r2
   19124:	mov	r3, #1024	; 0x400
   19128:	str	r3, [sp, #12]
   1912c:	mov	r3, #0
   19130:	str	r3, [sp, #8]
   19134:	ldr	r3, [pc, #1292]	; 19648 <__assert_fail@plt+0x8718>
   19138:	mvn	r2, #0
   1913c:	strd	r2, [sp, #16]
   19140:	mov	r3, #0
   19144:	mov	r2, #1024	; 0x400
   19148:	strd	r2, [sp, #24]
   1914c:	mov	r3, #1
   19150:	str	r3, [sp, #4]
   19154:	sub	sl, sl, #66	; 0x42
   19158:	cmp	sl, #53	; 0x35
   1915c:	ldrls	pc, [pc, sl, lsl #2]
   19160:	b	19658 <__assert_fail@plt+0x8728>
   19164:			; <UNDEFINED> instruction: 0x000195bc
   19168:	andeq	r9, r1, r8, asr r6
   1916c:	andeq	r9, r1, r8, asr r6
   19170:	ldrdeq	r9, [r1], -r0
   19174:	andeq	r9, r1, r8, asr r6
   19178:	andeq	r9, r1, r0, ror r3
   1917c:	andeq	r9, r1, r8, asr r6
   19180:	andeq	r9, r1, r8, asr r6
   19184:	andeq	r9, r1, r8, asr r6
   19188:	andeq	r9, r1, r4, ror #12
   1918c:	andeq	r9, r1, r8, asr r6
   19190:	andeq	r9, r1, r0, lsl r3
   19194:	andeq	r9, r1, r8, asr r6
   19198:	andeq	r9, r1, r8, asr r6
   1919c:	andeq	r9, r1, r0, ror #9
   191a0:	andeq	r9, r1, r8, asr r6
   191a4:	andeq	r9, r1, r8, asr r6
   191a8:	andeq	r9, r1, r8, asr r6
   191ac:	andeq	r9, r1, ip, lsl #9
   191b0:	andeq	r9, r1, r8, asr r6
   191b4:	andeq	r9, r1, r8, asr r6
   191b8:	andeq	r9, r1, r8, asr r6
   191bc:	andeq	r9, r1, r8, asr r6
   191c0:	andeq	r9, r1, r4, lsr r5
   191c4:	andeq	r9, r1, r4, lsr r4
   191c8:	andeq	r9, r1, r8, asr r6
   191cc:	andeq	r9, r1, r8, asr r6
   191d0:	andeq	r9, r1, r8, asr r6
   191d4:	andeq	r9, r1, r8, asr r6
   191d8:	andeq	r9, r1, r8, asr r6
   191dc:	andeq	r9, r1, r8, asr r6
   191e0:	andeq	r9, r1, r8, asr r6
   191e4:	andeq	r9, r1, r4, ror #11
   191e8:	andeq	r9, r1, ip, ror #5
   191ec:	andeq	r9, r1, r8, asr r6
   191f0:	andeq	r9, r1, r8, asr r6
   191f4:	andeq	r9, r1, r8, asr r6
   191f8:	andeq	r9, r1, r0, ror r3
   191fc:	andeq	r9, r1, r8, asr r6
   19200:	andeq	r9, r1, r8, asr r6
   19204:	andeq	r9, r1, r8, asr r6
   19208:	andeq	r9, r1, r4, ror #12
   1920c:	andeq	r9, r1, r8, asr r6
   19210:	andeq	r9, r1, r0, lsl r3
   19214:	andeq	r9, r1, r8, asr r6
   19218:	andeq	r9, r1, r8, asr r6
   1921c:	andeq	r9, r1, r8, asr r6
   19220:	andeq	r9, r1, r8, asr r6
   19224:	andeq	r9, r1, r8, asr r6
   19228:	andeq	r9, r1, r8, asr r6
   1922c:	andeq	r9, r1, ip, lsl #9
   19230:	andeq	r9, r1, r8, asr r6
   19234:	andeq	r9, r1, r8, asr r6
   19238:	andeq	r9, r1, r8, lsl r6
   1923c:	mov	r1, #48	; 0x30
   19240:	ldr	r0, [sp, #88]	; 0x58
   19244:	bl	10e40 <strchr@plt>
   19248:	cmp	r0, #0
   1924c:	beq	196a0 <__assert_fail@plt+0x8770>
   19250:	ldrb	r3, [r8, #1]
   19254:	cmp	r3, #68	; 0x44
   19258:	beq	1926c <__assert_fail@plt+0x833c>
   1925c:	cmp	r3, #105	; 0x69
   19260:	beq	192a8 <__assert_fail@plt+0x8378>
   19264:	cmp	r3, #66	; 0x42
   19268:	bne	19124 <__assert_fail@plt+0x81f4>
   1926c:	mov	r3, #1000	; 0x3e8
   19270:	str	r3, [sp, #12]
   19274:	mov	r3, #0
   19278:	str	r3, [sp, #8]
   1927c:	add	r3, pc, #956	; 0x3bc
   19280:	ldrd	r2, [r3]
   19284:	strd	r2, [sp, #16]
   19288:	mov	r3, #0
   1928c:	mov	r2, #1000	; 0x3e8
   19290:	strd	r2, [sp, #24]
   19294:	mov	r3, #2
   19298:	str	r3, [sp, #4]
   1929c:	b	19154 <__assert_fail@plt+0x8224>
   192a0:	mov	r4, #1
   192a4:	b	18fcc <__assert_fail@plt+0x809c>
   192a8:	ldrb	r3, [r8, #2]
   192ac:	mvn	r2, #0
   192b0:	cmp	r3, #66	; 0x42
   192b4:	mov	r3, #1024	; 0x400
   192b8:	str	r3, [sp, #12]
   192bc:	mov	r3, #0
   192c0:	str	r3, [sp, #8]
   192c4:	ldr	r3, [pc, #892]	; 19648 <__assert_fail@plt+0x8718>
   192c8:	strd	r2, [sp, #16]
   192cc:	mov	r3, #0
   192d0:	mov	r2, #1024	; 0x400
   192d4:	strd	r2, [sp, #24]
   192d8:	moveq	r3, #3
   192dc:	streq	r3, [sp, #4]
   192e0:	movne	r3, #1
   192e4:	strne	r3, [sp, #4]
   192e8:	b	19154 <__assert_fail@plt+0x8224>
   192ec:	mov	sl, #0
   192f0:	ldr	r2, [sp, #4]
   192f4:	orr	r4, r4, sl
   192f8:	add	r3, r8, r2
   192fc:	str	r3, [r5]
   19300:	ldrb	r3, [r8, r2]
   19304:	cmp	r3, #0
   19308:	orrne	r4, r4, #2
   1930c:	b	18fe4 <__assert_fail@plt+0x80b4>
   19310:	mov	sl, #0
   19314:	mov	r3, r9
   19318:	mov	fp, #1
   1931c:	mov	r9, r5
   19320:	mov	r5, r4
   19324:	mov	r4, sl
   19328:	mov	sl, r3
   1932c:	cmp	r6, #0
   19330:	sbcs	r3, r7, #0
   19334:	blt	19a5c <__assert_fail@plt+0x8b2c>
   19338:	ldrd	r2, [sp, #16]
   1933c:	cmp	r2, r6
   19340:	sbcs	r1, r3, r7
   19344:	bge	1996c <__assert_fail@plt+0x8a3c>
   19348:	sub	fp, fp, #1
   1934c:	cmn	fp, #1
   19350:	mov	r4, #1
   19354:	mvn	r6, #0
   19358:	mvn	r7, #-2147483648	; 0x80000000
   1935c:	bne	1933c <__assert_fail@plt+0x840c>
   19360:	mov	r4, r5
   19364:	mov	r5, r9
   19368:	mov	r9, sl
   1936c:	b	195d4 <__assert_fail@plt+0x86a4>
   19370:	mov	sl, #0
   19374:	str	r9, [sp, #32]
   19378:	mov	r9, r5
   1937c:	mov	r5, r4
   19380:	mov	r4, sl
   19384:	ldr	sl, [sp, #12]
   19388:	mov	fp, #2
   1938c:	cmp	r6, #0
   19390:	sbcs	r3, r7, #0
   19394:	blt	199a8 <__assert_fail@plt+0x8a78>
   19398:	ldrd	r2, [sp, #16]
   1939c:	cmp	r2, r6
   193a0:	sbcs	r1, r3, r7
   193a4:	bge	19a10 <__assert_fail@plt+0x8ae0>
   193a8:	sub	fp, fp, #1
   193ac:	cmn	fp, #1
   193b0:	mvn	r6, #0
   193b4:	mvn	r7, #-2147483648	; 0x80000000
   193b8:	mov	r4, #1
   193bc:	bne	1939c <__assert_fail@plt+0x846c>
   193c0:	mov	r4, r5
   193c4:	mov	r5, r9
   193c8:	ldr	r9, [sp, #32]
   193cc:	b	195d4 <__assert_fail@plt+0x86a4>
   193d0:	mov	sl, #0
   193d4:	str	r4, [sp, #32]
   193d8:	str	r9, [sp, #36]	; 0x24
   193dc:	mov	r4, sl
   193e0:	mov	r9, r5
   193e4:	ldr	sl, [sp, #12]
   193e8:	ldr	r5, [sp, #8]
   193ec:	mov	fp, #5
   193f0:	cmp	r6, #0
   193f4:	sbcs	r3, r7, #0
   193f8:	blt	1981c <__assert_fail@plt+0x88ec>
   193fc:	ldrd	r2, [sp, #16]
   19400:	cmp	r2, r6
   19404:	sbcs	r1, r3, r7
   19408:	bge	19854 <__assert_fail@plt+0x8924>
   1940c:	sub	fp, fp, #1
   19410:	cmn	fp, #1
   19414:	mvn	r6, #0
   19418:	mvn	r7, #-2147483648	; 0x80000000
   1941c:	mov	r4, #1
   19420:	bne	19400 <__assert_fail@plt+0x84d0>
   19424:	mov	r5, r9
   19428:	ldr	r4, [sp, #32]
   1942c:	ldr	r9, [sp, #36]	; 0x24
   19430:	b	195d4 <__assert_fail@plt+0x86a4>
   19434:	mov	sl, #0
   19438:	str	r4, [sp, #32]
   1943c:	str	r9, [sp, #36]	; 0x24
   19440:	mov	r4, sl
   19444:	mov	r9, r5
   19448:	ldr	sl, [sp, #12]
   1944c:	ldr	r5, [sp, #8]
   19450:	mov	fp, #6
   19454:	cmp	r6, #0
   19458:	sbcs	r3, r7, #0
   1945c:	blt	196d0 <__assert_fail@plt+0x87a0>
   19460:	ldrd	r2, [sp, #16]
   19464:	cmp	r2, r6
   19468:	sbcs	r1, r3, r7
   1946c:	bge	196b0 <__assert_fail@plt+0x8780>
   19470:	sub	fp, fp, #1
   19474:	cmn	fp, #1
   19478:	mov	r4, #1
   1947c:	mvn	r6, #0
   19480:	mvn	r7, #-2147483648	; 0x80000000
   19484:	bne	19464 <__assert_fail@plt+0x8534>
   19488:	b	19424 <__assert_fail@plt+0x84f4>
   1948c:	mov	sl, #0
   19490:	str	r9, [sp, #32]
   19494:	mov	r9, r5
   19498:	mov	r5, r4
   1949c:	mov	r4, sl
   194a0:	ldr	sl, [sp, #12]
   194a4:	mov	fp, #3
   194a8:	cmp	r6, #0
   194ac:	sbcs	r3, r7, #0
   194b0:	blt	197b0 <__assert_fail@plt+0x8880>
   194b4:	ldrd	r2, [sp, #16]
   194b8:	cmp	r2, r6
   194bc:	sbcs	r1, r3, r7
   194c0:	bge	197e8 <__assert_fail@plt+0x88b8>
   194c4:	sub	fp, fp, #1
   194c8:	cmn	fp, #1
   194cc:	mov	r4, #1
   194d0:	mvn	r6, #0
   194d4:	mvn	r7, #-2147483648	; 0x80000000
   194d8:	bne	194b8 <__assert_fail@plt+0x8588>
   194dc:	b	193c0 <__assert_fail@plt+0x8490>
   194e0:	mov	sl, #0
   194e4:	str	r9, [sp, #32]
   194e8:	mov	r9, r5
   194ec:	mov	r5, r4
   194f0:	mov	r4, sl
   194f4:	ldr	sl, [sp, #12]
   194f8:	mov	fp, #4
   194fc:	cmp	r6, #0
   19500:	sbcs	r3, r7, #0
   19504:	blt	19924 <__assert_fail@plt+0x89f4>
   19508:	ldrd	r2, [sp, #16]
   1950c:	cmp	r2, r6
   19510:	sbcs	r1, r3, r7
   19514:	bge	19900 <__assert_fail@plt+0x89d0>
   19518:	sub	fp, fp, #1
   1951c:	cmn	fp, #1
   19520:	mvn	r6, #0
   19524:	mvn	r7, #-2147483648	; 0x80000000
   19528:	mov	r4, #1
   1952c:	bne	1950c <__assert_fail@plt+0x85dc>
   19530:	b	193c0 <__assert_fail@plt+0x8490>
   19534:	mov	sl, #0
   19538:	str	r4, [sp, #32]
   1953c:	str	r9, [sp, #36]	; 0x24
   19540:	mov	r4, sl
   19544:	mov	r9, r5
   19548:	ldr	sl, [sp, #12]
   1954c:	ldr	r5, [sp, #8]
   19550:	mov	fp, #7
   19554:	cmp	r6, #0
   19558:	sbcs	r3, r7, #0
   1955c:	blt	19774 <__assert_fail@plt+0x8844>
   19560:	ldrd	r2, [sp, #16]
   19564:	b	19580 <__assert_fail@plt+0x8650>
   19568:	sub	fp, fp, #1
   1956c:	cmn	fp, #1
   19570:	mvn	r6, #0
   19574:	mvn	r7, #-2147483648	; 0x80000000
   19578:	mov	r4, #1
   1957c:	beq	19424 <__assert_fail@plt+0x84f4>
   19580:	cmp	r2, r6
   19584:	sbcs	r1, r3, r7
   19588:	blt	19568 <__assert_fail@plt+0x8638>
   1958c:	mul	r3, r6, r5
   19590:	cmp	fp, #0
   19594:	mla	r3, sl, r7, r3
   19598:	umull	r6, r7, r6, sl
   1959c:	sub	fp, fp, #1
   195a0:	add	r7, r3, r7
   195a4:	bne	19554 <__assert_fail@plt+0x8624>
   195a8:	mov	sl, r4
   195ac:	mov	r5, r9
   195b0:	ldr	r4, [sp, #32]
   195b4:	ldr	r9, [sp, #36]	; 0x24
   195b8:	b	192f0 <__assert_fail@plt+0x83c0>
   195bc:	cmp	r6, #0
   195c0:	sbcs	r3, r7, #0
   195c4:	blt	19724 <__assert_fail@plt+0x87f4>
   195c8:	cmp	r6, #0
   195cc:	sbcs	r3, r7, #2097152	; 0x200000
   195d0:	blt	19758 <__assert_fail@plt+0x8828>
   195d4:	mvn	r6, #0
   195d8:	mvn	r7, #-2147483648	; 0x80000000
   195dc:	mov	sl, #1
   195e0:	b	192f0 <__assert_fail@plt+0x83c0>
   195e4:	cmp	r6, #0
   195e8:	sbcs	r3, r7, #0
   195ec:	blt	198c8 <__assert_fail@plt+0x8998>
   195f0:	cmp	r6, #0
   195f4:	sbcs	r3, r7, #4194304	; 0x400000
   195f8:	bge	195d4 <__assert_fail@plt+0x86a4>
   195fc:	lsl	r3, r7, #9
   19600:	orr	r3, r3, r6, lsr #23
   19604:	lsl	r2, r6, #9
   19608:	mov	r6, r2
   1960c:	mov	r7, r3
   19610:	mov	sl, #0
   19614:	b	192f0 <__assert_fail@plt+0x83c0>
   19618:	cmp	r6, #0
   1961c:	sbcs	r3, r7, #0
   19620:	blt	19890 <__assert_fail@plt+0x8960>
   19624:	cmp	r6, #0
   19628:	sbcs	r3, r7, #1073741824	; 0x40000000
   1962c:	bge	195d4 <__assert_fail@plt+0x86a4>
   19630:	adds	r6, r6, r6
   19634:	adc	r7, r7, r7
   19638:	mov	sl, #0
   1963c:	b	192f0 <__assert_fail@plt+0x83c0>
   19640:	strbge	r5, [r3, #1015]!	; 0x3f7
   19644:	mlaeq	r0, fp, r4, ip
   19648:			; <UNDEFINED> instruction: 0x001fffff
   1964c:	andeq	fp, r1, r4, lsr #14
   19650:	andeq	fp, r1, r0, lsr r7
   19654:	andeq	fp, r1, r0, asr #14
   19658:	strd	r6, [r9]
   1965c:	orr	r4, r4, #2
   19660:	b	18fe8 <__assert_fail@plt+0x80b8>
   19664:	cmp	r6, #0
   19668:	sbcs	r3, r7, #0
   1966c:	blt	19aa4 <__assert_fail@plt+0x8b74>
   19670:	ldrd	r2, [sp, #16]
   19674:	cmp	r2, r6
   19678:	sbcs	r3, r3, r7
   1967c:	blt	195d4 <__assert_fail@plt+0x86a4>
   19680:	ldr	r3, [sp, #8]
   19684:	ldr	r2, [sp, #12]
   19688:	mov	sl, #0
   1968c:	mul	r3, r6, r3
   19690:	mla	r3, r2, r7, r3
   19694:	umull	r6, r7, r6, r2
   19698:	add	r7, r3, r7
   1969c:	b	192f0 <__assert_fail@plt+0x83c0>
   196a0:	mov	r3, #1024	; 0x400
   196a4:	str	r0, [sp, #8]
   196a8:	str	r3, [sp, #12]
   196ac:	b	19134 <__assert_fail@plt+0x8204>
   196b0:	mul	r3, r6, r5
   196b4:	cmp	fp, #0
   196b8:	mla	r3, sl, r7, r3
   196bc:	umull	r6, r7, r6, sl
   196c0:	sub	fp, fp, #1
   196c4:	add	r7, r3, r7
   196c8:	bne	19454 <__assert_fail@plt+0x8524>
   196cc:	b	195a8 <__assert_fail@plt+0x8678>
   196d0:	mvn	r3, #0
   196d4:	mvn	r2, #0
   196d8:	cmp	r7, r3
   196dc:	cmpeq	r6, r2
   196e0:	beq	196b0 <__assert_fail@plt+0x8780>
   196e4:	mov	r2, r6
   196e8:	mov	r3, r7
   196ec:	mov	r0, #0
   196f0:	mov	r1, #-2147483648	; 0x80000000
   196f4:	bl	1a254 <__assert_fail@plt+0x9324>
   196f8:	ldrd	r2, [sp, #24]
   196fc:	cmp	r0, r2
   19700:	sbcs	r3, r1, r3
   19704:	bge	196b0 <__assert_fail@plt+0x8780>
   19708:	mov	r5, r9
   1970c:	ldr	r4, [sp, #32]
   19710:	ldr	r9, [sp, #36]	; 0x24
   19714:	mov	r6, #0
   19718:	mov	r7, #-2147483648	; 0x80000000
   1971c:	mov	sl, #1
   19720:	b	192f0 <__assert_fail@plt+0x83c0>
   19724:	mvn	r3, #0
   19728:	mvn	r2, #0
   1972c:	cmp	r7, r3
   19730:	cmpeq	r6, r2
   19734:	beq	19758 <__assert_fail@plt+0x8828>
   19738:	mov	r3, r7
   1973c:	mov	r2, r6
   19740:	mov	r0, #0
   19744:	mov	r1, #-2147483648	; 0x80000000
   19748:	bl	1a254 <__assert_fail@plt+0x9324>
   1974c:	cmp	r0, #1024	; 0x400
   19750:	sbcs	r3, r1, #0
   19754:	blt	19714 <__assert_fail@plt+0x87e4>
   19758:	lsl	r3, r7, #10
   1975c:	orr	r3, r3, r6, lsr #22
   19760:	lsl	r2, r6, #10
   19764:	mov	r6, r2
   19768:	mov	r7, r3
   1976c:	mov	sl, #0
   19770:	b	192f0 <__assert_fail@plt+0x83c0>
   19774:	mvn	r3, #0
   19778:	mvn	r2, #0
   1977c:	cmp	r7, r3
   19780:	cmpeq	r6, r2
   19784:	beq	1958c <__assert_fail@plt+0x865c>
   19788:	mov	r2, r6
   1978c:	mov	r3, r7
   19790:	mov	r0, #0
   19794:	mov	r1, #-2147483648	; 0x80000000
   19798:	bl	1a254 <__assert_fail@plt+0x9324>
   1979c:	ldrd	r2, [sp, #24]
   197a0:	cmp	r0, r2
   197a4:	sbcs	r3, r1, r3
   197a8:	bge	1958c <__assert_fail@plt+0x865c>
   197ac:	b	19708 <__assert_fail@plt+0x87d8>
   197b0:	mvn	r3, #0
   197b4:	mvn	r2, #0
   197b8:	cmp	r7, r3
   197bc:	cmpeq	r6, r2
   197c0:	beq	197e8 <__assert_fail@plt+0x88b8>
   197c4:	mov	r2, r6
   197c8:	mov	r3, r7
   197cc:	mov	r0, #0
   197d0:	mov	r1, #-2147483648	; 0x80000000
   197d4:	bl	1a254 <__assert_fail@plt+0x9324>
   197d8:	ldrd	r2, [sp, #24]
   197dc:	cmp	r0, r2
   197e0:	sbcs	r3, r1, r3
   197e4:	blt	1995c <__assert_fail@plt+0x8a2c>
   197e8:	ldr	r3, [sp, #8]
   197ec:	cmp	fp, #0
   197f0:	sub	fp, fp, #1
   197f4:	mul	r3, r6, r3
   197f8:	mla	r3, sl, r7, r3
   197fc:	umull	r6, r7, r6, sl
   19800:	add	r7, r3, r7
   19804:	bne	194a8 <__assert_fail@plt+0x8578>
   19808:	mov	sl, r4
   1980c:	mov	r4, r5
   19810:	mov	r5, r9
   19814:	ldr	r9, [sp, #32]
   19818:	b	192f0 <__assert_fail@plt+0x83c0>
   1981c:	mvn	r3, #0
   19820:	mvn	r2, #0
   19824:	cmp	r7, r3
   19828:	cmpeq	r6, r2
   1982c:	beq	19854 <__assert_fail@plt+0x8924>
   19830:	mov	r2, r6
   19834:	mov	r3, r7
   19838:	mov	r0, #0
   1983c:	mov	r1, #-2147483648	; 0x80000000
   19840:	bl	1a254 <__assert_fail@plt+0x9324>
   19844:	ldrd	r2, [sp, #24]
   19848:	cmp	r0, r2
   1984c:	sbcs	r3, r1, r3
   19850:	blt	19874 <__assert_fail@plt+0x8944>
   19854:	mul	r3, r6, r5
   19858:	cmp	fp, #0
   1985c:	mla	r3, sl, r7, r3
   19860:	umull	r6, r7, r6, sl
   19864:	sub	fp, fp, #1
   19868:	add	r7, r3, r7
   1986c:	bne	193f0 <__assert_fail@plt+0x84c0>
   19870:	b	195a8 <__assert_fail@plt+0x8678>
   19874:	sub	fp, fp, #1
   19878:	cmn	fp, #1
   1987c:	mov	r6, #0
   19880:	mov	r7, #-2147483648	; 0x80000000
   19884:	mov	r4, #1
   19888:	bne	19830 <__assert_fail@plt+0x8900>
   1988c:	b	19708 <__assert_fail@plt+0x87d8>
   19890:	mvn	r3, #0
   19894:	mvn	r2, #0
   19898:	cmp	r7, r3
   1989c:	cmpeq	r6, r2
   198a0:	beq	19630 <__assert_fail@plt+0x8700>
   198a4:	mov	r2, r6
   198a8:	mov	r3, r7
   198ac:	mov	r0, #0
   198b0:	mov	r1, #-2147483648	; 0x80000000
   198b4:	bl	1a254 <__assert_fail@plt+0x9324>
   198b8:	cmp	r1, #0
   198bc:	cmpeq	r0, #1
   198c0:	beq	19714 <__assert_fail@plt+0x87e4>
   198c4:	b	19630 <__assert_fail@plt+0x8700>
   198c8:	mvn	r3, #0
   198cc:	mvn	r2, #0
   198d0:	cmp	r7, r3
   198d4:	cmpeq	r6, r2
   198d8:	beq	195fc <__assert_fail@plt+0x86cc>
   198dc:	mov	r3, r7
   198e0:	mov	r2, r6
   198e4:	mov	r0, #0
   198e8:	mov	r1, #-2147483648	; 0x80000000
   198ec:	bl	1a254 <__assert_fail@plt+0x9324>
   198f0:	cmp	r0, #512	; 0x200
   198f4:	sbcs	r3, r1, #0
   198f8:	blt	19714 <__assert_fail@plt+0x87e4>
   198fc:	b	195fc <__assert_fail@plt+0x86cc>
   19900:	ldr	r3, [sp, #8]
   19904:	cmp	fp, #0
   19908:	sub	fp, fp, #1
   1990c:	mul	r3, r6, r3
   19910:	mla	r3, sl, r7, r3
   19914:	umull	r6, r7, r6, sl
   19918:	add	r7, r3, r7
   1991c:	bne	194fc <__assert_fail@plt+0x85cc>
   19920:	b	19808 <__assert_fail@plt+0x88d8>
   19924:	mvn	r3, #0
   19928:	mvn	r2, #0
   1992c:	cmp	r7, r3
   19930:	cmpeq	r6, r2
   19934:	beq	19900 <__assert_fail@plt+0x89d0>
   19938:	mov	r2, r6
   1993c:	mov	r3, r7
   19940:	mov	r0, #0
   19944:	mov	r1, #-2147483648	; 0x80000000
   19948:	bl	1a254 <__assert_fail@plt+0x9324>
   1994c:	ldrd	r2, [sp, #24]
   19950:	cmp	r0, r2
   19954:	sbcs	r3, r1, r3
   19958:	bge	19900 <__assert_fail@plt+0x89d0>
   1995c:	mov	r4, r5
   19960:	mov	r5, r9
   19964:	ldr	r9, [sp, #32]
   19968:	b	19714 <__assert_fail@plt+0x87e4>
   1996c:	ldr	r3, [sp, #8]
   19970:	ldr	r2, [sp, #12]
   19974:	cmp	fp, #0
   19978:	mul	r3, r6, r3
   1997c:	sub	fp, fp, #1
   19980:	mla	r3, r2, r7, r3
   19984:	umull	r6, r7, r6, r2
   19988:	add	r7, r3, r7
   1998c:	bne	1932c <__assert_fail@plt+0x83fc>
   19990:	mov	r3, sl
   19994:	mov	sl, r4
   19998:	mov	r4, r5
   1999c:	mov	r5, r9
   199a0:	mov	r9, r3
   199a4:	b	192f0 <__assert_fail@plt+0x83c0>
   199a8:	mvn	r3, #0
   199ac:	mvn	r2, #0
   199b0:	cmp	r7, r3
   199b4:	cmpeq	r6, r2
   199b8:	beq	19a10 <__assert_fail@plt+0x8ae0>
   199bc:	mov	r3, sl
   199c0:	mov	sl, r9
   199c4:	mov	r9, r5
   199c8:	mov	r5, r4
   199cc:	mov	r4, fp
   199d0:	mov	fp, r3
   199d4:	mov	r2, r6
   199d8:	mov	r3, r7
   199dc:	mov	r0, #0
   199e0:	mov	r1, #-2147483648	; 0x80000000
   199e4:	bl	1a254 <__assert_fail@plt+0x9324>
   199e8:	ldrd	r2, [sp, #24]
   199ec:	cmp	r0, r2
   199f0:	sbcs	r3, r1, r3
   199f4:	blt	19a34 <__assert_fail@plt+0x8b04>
   199f8:	mov	r3, fp
   199fc:	mov	fp, r4
   19a00:	mov	r4, r5
   19a04:	mov	r5, r9
   19a08:	mov	r9, sl
   19a0c:	mov	sl, r3
   19a10:	ldr	r3, [sp, #8]
   19a14:	cmp	fp, #0
   19a18:	sub	fp, fp, #1
   19a1c:	mul	r3, r6, r3
   19a20:	mla	r3, sl, r7, r3
   19a24:	umull	r6, r7, r6, sl
   19a28:	add	r7, r3, r7
   19a2c:	bne	1938c <__assert_fail@plt+0x845c>
   19a30:	b	19808 <__assert_fail@plt+0x88d8>
   19a34:	sub	r4, r4, #1
   19a38:	cmn	r4, #1
   19a3c:	mov	r6, #0
   19a40:	mov	r7, #-2147483648	; 0x80000000
   19a44:	mov	r5, #1
   19a48:	bne	199d4 <__assert_fail@plt+0x8aa4>
   19a4c:	mov	r4, r9
   19a50:	mov	r5, sl
   19a54:	ldr	r9, [sp, #32]
   19a58:	b	19714 <__assert_fail@plt+0x87e4>
   19a5c:	mvn	r3, #0
   19a60:	mvn	r2, #0
   19a64:	cmp	r7, r3
   19a68:	cmpeq	r6, r2
   19a6c:	beq	1996c <__assert_fail@plt+0x8a3c>
   19a70:	mov	r2, r6
   19a74:	mov	r3, r7
   19a78:	mov	r0, #0
   19a7c:	mov	r1, #-2147483648	; 0x80000000
   19a80:	bl	1a254 <__assert_fail@plt+0x9324>
   19a84:	ldrd	r2, [sp, #24]
   19a88:	cmp	r0, r2
   19a8c:	sbcs	r3, r1, r3
   19a90:	bge	1996c <__assert_fail@plt+0x8a3c>
   19a94:	mov	r4, r5
   19a98:	mov	r5, r9
   19a9c:	mov	r9, sl
   19aa0:	b	19714 <__assert_fail@plt+0x87e4>
   19aa4:	mvn	r3, #0
   19aa8:	mvn	r2, #0
   19aac:	cmp	r7, r3
   19ab0:	cmpeq	r6, r2
   19ab4:	beq	19680 <__assert_fail@plt+0x8750>
   19ab8:	mov	r2, r6
   19abc:	mov	r3, r7
   19ac0:	mov	r0, #0
   19ac4:	mov	r1, #-2147483648	; 0x80000000
   19ac8:	bl	1a254 <__assert_fail@plt+0x9324>
   19acc:	ldrd	r2, [sp, #24]
   19ad0:	cmp	r0, r2
   19ad4:	sbcs	r3, r1, r3
   19ad8:	blt	19714 <__assert_fail@plt+0x87e4>
   19adc:	b	19680 <__assert_fail@plt+0x8750>
   19ae0:	ldr	r3, [pc, #-1180]	; 1964c <__assert_fail@plt+0x871c>
   19ae4:	mov	r2, #85	; 0x55
   19ae8:	ldr	r1, [pc, #-1184]	; 19650 <__assert_fail@plt+0x8720>
   19aec:	ldr	r0, [pc, #-1184]	; 19654 <__assert_fail@plt+0x8724>
   19af0:	bl	10f30 <__assert_fail@plt>
   19af4:	cmp	r1, #0
   19af8:	cmpne	r0, #0
   19afc:	moveq	r1, #1
   19b00:	moveq	r0, r1
   19b04:	umull	r2, r3, r0, r1
   19b08:	adds	r3, r3, #0
   19b0c:	movne	r3, #1
   19b10:	cmp	r2, #0
   19b14:	blt	19b24 <__assert_fail@plt+0x8bf4>
   19b18:	cmp	r3, #0
   19b1c:	bne	19b24 <__assert_fail@plt+0x8bf4>
   19b20:	b	10cc0 <calloc@plt>
   19b24:	push	{r4, lr}
   19b28:	bl	10e4c <__errno_location@plt>
   19b2c:	mov	r3, #12
   19b30:	str	r3, [r0]
   19b34:	mov	r0, #0
   19b38:	pop	{r4, pc}
   19b3c:	cmp	r0, #0
   19b40:	moveq	r0, #1
   19b44:	cmp	r0, #0
   19b48:	blt	19b50 <__assert_fail@plt+0x8c20>
   19b4c:	b	10de0 <malloc@plt>
   19b50:	push	{r4, lr}
   19b54:	bl	10e4c <__errno_location@plt>
   19b58:	mov	r3, #12
   19b5c:	str	r3, [r0]
   19b60:	mov	r0, #0
   19b64:	pop	{r4, pc}
   19b68:	cmp	r0, #0
   19b6c:	beq	19b90 <__assert_fail@plt+0x8c60>
   19b70:	cmp	r1, #0
   19b74:	push	{lr}		; (str lr, [sp, #-4]!)
   19b78:	sub	sp, sp, #12
   19b7c:	beq	19b98 <__assert_fail@plt+0x8c68>
   19b80:	blt	19bb0 <__assert_fail@plt+0x8c80>
   19b84:	add	sp, sp, #12
   19b88:	pop	{lr}		; (ldr lr, [sp], #4)
   19b8c:	b	10d74 <realloc@plt>
   19b90:	mov	r0, r1
   19b94:	b	19b3c <__assert_fail@plt+0x8c0c>
   19b98:	str	r1, [sp, #4]
   19b9c:	bl	13d58 <__assert_fail@plt+0x2e28>
   19ba0:	ldr	r3, [sp, #4]
   19ba4:	mov	r0, r3
   19ba8:	add	sp, sp, #12
   19bac:	pop	{pc}		; (ldr pc, [sp], #4)
   19bb0:	bl	10e4c <__errno_location@plt>
   19bb4:	mov	r2, #12
   19bb8:	mov	r3, #0
   19bbc:	str	r2, [r0]
   19bc0:	b	19ba4 <__assert_fail@plt+0x8c74>
   19bc4:	push	{r4, r5, r6, lr}
   19bc8:	mov	r4, r0
   19bcc:	bl	10dbc <__fpending@plt>
   19bd0:	ldr	r5, [r4]
   19bd4:	and	r5, r5, #32
   19bd8:	mov	r6, r0
   19bdc:	mov	r0, r4
   19be0:	bl	13c58 <__assert_fail@plt+0x2d28>
   19be4:	cmp	r5, #0
   19be8:	mov	r4, r0
   19bec:	bne	19c0c <__assert_fail@plt+0x8cdc>
   19bf0:	cmp	r0, #0
   19bf4:	beq	19c04 <__assert_fail@plt+0x8cd4>
   19bf8:	cmp	r6, #0
   19bfc:	beq	19c28 <__assert_fail@plt+0x8cf8>
   19c00:	mvn	r4, #0
   19c04:	mov	r0, r4
   19c08:	pop	{r4, r5, r6, pc}
   19c0c:	cmp	r0, #0
   19c10:	bne	19c00 <__assert_fail@plt+0x8cd0>
   19c14:	bl	10e4c <__errno_location@plt>
   19c18:	str	r4, [r0]
   19c1c:	mvn	r4, #0
   19c20:	mov	r0, r4
   19c24:	pop	{r4, r5, r6, pc}
   19c28:	bl	10e4c <__errno_location@plt>
   19c2c:	ldr	r4, [r0]
   19c30:	subs	r4, r4, #9
   19c34:	mvnne	r4, #0
   19c38:	mov	r0, r4
   19c3c:	pop	{r4, r5, r6, pc}
   19c40:	push	{r4, lr}
   19c44:	mov	r0, #14
   19c48:	bl	10edc <nl_langinfo@plt>
   19c4c:	cmp	r0, #0
   19c50:	beq	19c68 <__assert_fail@plt+0x8d38>
   19c54:	ldrb	r2, [r0]
   19c58:	ldr	r3, [pc, #16]	; 19c70 <__assert_fail@plt+0x8d40>
   19c5c:	cmp	r2, #0
   19c60:	moveq	r0, r3
   19c64:	pop	{r4, pc}
   19c68:	ldr	r0, [pc]	; 19c70 <__assert_fail@plt+0x8d40>
   19c6c:	pop	{r4, pc}
   19c70:	andeq	fp, r1, r8, ror #14
   19c74:	push	{r4, r5, r6, r7, lr}
   19c78:	subs	r6, r0, #0
   19c7c:	sub	sp, sp, #12
   19c80:	addeq	r6, sp, #4
   19c84:	mov	r0, r6
   19c88:	mov	r5, r2
   19c8c:	mov	r7, r1
   19c90:	bl	10dc8 <mbrtowc@plt>
   19c94:	cmp	r5, #0
   19c98:	cmnne	r0, #3
   19c9c:	mov	r4, r0
   19ca0:	bls	19cbc <__assert_fail@plt+0x8d8c>
   19ca4:	mov	r0, #0
   19ca8:	bl	19d14 <__assert_fail@plt+0x8de4>
   19cac:	cmp	r0, #0
   19cb0:	moveq	r4, #1
   19cb4:	ldrbeq	r3, [r7]
   19cb8:	streq	r3, [r6]
   19cbc:	mov	r0, r4
   19cc0:	add	sp, sp, #12
   19cc4:	pop	{r4, r5, r6, r7, pc}
   19cc8:	push	{r4, r5, r6, lr}
   19ccc:	subs	r4, r2, #0
   19cd0:	mov	r6, r0
   19cd4:	mov	r5, r1
   19cd8:	beq	19d04 <__assert_fail@plt+0x8dd4>
   19cdc:	mov	r1, r4
   19ce0:	mvn	r0, #0
   19ce4:	bl	19e08 <__assert_fail@plt+0x8ed8>
   19ce8:	cmp	r0, r5
   19cec:	bcs	19d04 <__assert_fail@plt+0x8dd4>
   19cf0:	bl	10e4c <__errno_location@plt>
   19cf4:	mov	r3, #12
   19cf8:	str	r3, [r0]
   19cfc:	mov	r0, #0
   19d00:	pop	{r4, r5, r6, pc}
   19d04:	mul	r1, r5, r4
   19d08:	mov	r0, r6
   19d0c:	pop	{r4, r5, r6, lr}
   19d10:	b	19b68 <__assert_fail@plt+0x8c38>
   19d14:	push	{lr}		; (str lr, [sp, #-4]!)
   19d18:	sub	sp, sp, #268	; 0x10c
   19d1c:	add	r1, sp, #4
   19d20:	ldr	r2, [pc, #60]	; 19d64 <__assert_fail@plt+0x8e34>
   19d24:	bl	19d70 <__assert_fail@plt+0x8e40>
   19d28:	cmp	r0, #0
   19d2c:	movne	r0, #0
   19d30:	bne	19d5c <__assert_fail@plt+0x8e2c>
   19d34:	ldr	r1, [pc, #44]	; 19d68 <__assert_fail@plt+0x8e38>
   19d38:	add	r0, sp, #4
   19d3c:	bl	10ce4 <strcmp@plt>
   19d40:	cmp	r0, #0
   19d44:	beq	19d5c <__assert_fail@plt+0x8e2c>
   19d48:	add	r0, sp, #4
   19d4c:	ldr	r1, [pc, #24]	; 19d6c <__assert_fail@plt+0x8e3c>
   19d50:	bl	10ce4 <strcmp@plt>
   19d54:	adds	r0, r0, #0
   19d58:	movne	r0, #1
   19d5c:	add	sp, sp, #268	; 0x10c
   19d60:	pop	{pc}		; (ldr pc, [sp], #4)
   19d64:	andeq	r0, r0, r1, lsl #2
   19d68:	andeq	fp, r1, r0, ror r7
   19d6c:	andeq	fp, r1, r4, ror r7
   19d70:	push	{r4, r5, r6, lr}
   19d74:	mov	r5, r1
   19d78:	mov	r1, #0
   19d7c:	mov	r4, r2
   19d80:	bl	10ec4 <setlocale@plt>
   19d84:	subs	r6, r0, #0
   19d88:	beq	19de4 <__assert_fail@plt+0x8eb4>
   19d8c:	bl	10e34 <strlen@plt>
   19d90:	cmp	r4, r0
   19d94:	bhi	19dcc <__assert_fail@plt+0x8e9c>
   19d98:	cmp	r4, #0
   19d9c:	bne	19da8 <__assert_fail@plt+0x8e78>
   19da0:	mov	r0, #34	; 0x22
   19da4:	pop	{r4, r5, r6, pc}
   19da8:	sub	r4, r4, #1
   19dac:	mov	r1, r6
   19db0:	mov	r2, r4
   19db4:	mov	r0, r5
   19db8:	bl	10d2c <memcpy@plt>
   19dbc:	mov	r3, #0
   19dc0:	strb	r3, [r5, r4]
   19dc4:	mov	r0, #34	; 0x22
   19dc8:	pop	{r4, r5, r6, pc}
   19dcc:	add	r2, r0, #1
   19dd0:	mov	r1, r6
   19dd4:	mov	r0, r5
   19dd8:	bl	10d2c <memcpy@plt>
   19ddc:	mov	r0, #0
   19de0:	pop	{r4, r5, r6, pc}
   19de4:	cmp	r4, #0
   19de8:	beq	19df8 <__assert_fail@plt+0x8ec8>
   19dec:	strb	r6, [r5]
   19df0:	mov	r0, #22
   19df4:	pop	{r4, r5, r6, pc}
   19df8:	mov	r0, #22
   19dfc:	pop	{r4, r5, r6, pc}
   19e00:	mov	r1, #0
   19e04:	b	10ec4 <setlocale@plt>
   19e08:	subs	r2, r1, #1
   19e0c:	bxeq	lr
   19e10:	bcc	19fe8 <__assert_fail@plt+0x90b8>
   19e14:	cmp	r0, r1
   19e18:	bls	19fcc <__assert_fail@plt+0x909c>
   19e1c:	tst	r1, r2
   19e20:	beq	19fd8 <__assert_fail@plt+0x90a8>
   19e24:	clz	r3, r0
   19e28:	clz	r2, r1
   19e2c:	sub	r3, r2, r3
   19e30:	rsbs	r3, r3, #31
   19e34:	addne	r3, r3, r3, lsl #1
   19e38:	mov	r2, #0
   19e3c:	addne	pc, pc, r3, lsl #2
   19e40:	nop			; (mov r0, r0)
   19e44:	cmp	r0, r1, lsl #31
   19e48:	adc	r2, r2, r2
   19e4c:	subcs	r0, r0, r1, lsl #31
   19e50:	cmp	r0, r1, lsl #30
   19e54:	adc	r2, r2, r2
   19e58:	subcs	r0, r0, r1, lsl #30
   19e5c:	cmp	r0, r1, lsl #29
   19e60:	adc	r2, r2, r2
   19e64:	subcs	r0, r0, r1, lsl #29
   19e68:	cmp	r0, r1, lsl #28
   19e6c:	adc	r2, r2, r2
   19e70:	subcs	r0, r0, r1, lsl #28
   19e74:	cmp	r0, r1, lsl #27
   19e78:	adc	r2, r2, r2
   19e7c:	subcs	r0, r0, r1, lsl #27
   19e80:	cmp	r0, r1, lsl #26
   19e84:	adc	r2, r2, r2
   19e88:	subcs	r0, r0, r1, lsl #26
   19e8c:	cmp	r0, r1, lsl #25
   19e90:	adc	r2, r2, r2
   19e94:	subcs	r0, r0, r1, lsl #25
   19e98:	cmp	r0, r1, lsl #24
   19e9c:	adc	r2, r2, r2
   19ea0:	subcs	r0, r0, r1, lsl #24
   19ea4:	cmp	r0, r1, lsl #23
   19ea8:	adc	r2, r2, r2
   19eac:	subcs	r0, r0, r1, lsl #23
   19eb0:	cmp	r0, r1, lsl #22
   19eb4:	adc	r2, r2, r2
   19eb8:	subcs	r0, r0, r1, lsl #22
   19ebc:	cmp	r0, r1, lsl #21
   19ec0:	adc	r2, r2, r2
   19ec4:	subcs	r0, r0, r1, lsl #21
   19ec8:	cmp	r0, r1, lsl #20
   19ecc:	adc	r2, r2, r2
   19ed0:	subcs	r0, r0, r1, lsl #20
   19ed4:	cmp	r0, r1, lsl #19
   19ed8:	adc	r2, r2, r2
   19edc:	subcs	r0, r0, r1, lsl #19
   19ee0:	cmp	r0, r1, lsl #18
   19ee4:	adc	r2, r2, r2
   19ee8:	subcs	r0, r0, r1, lsl #18
   19eec:	cmp	r0, r1, lsl #17
   19ef0:	adc	r2, r2, r2
   19ef4:	subcs	r0, r0, r1, lsl #17
   19ef8:	cmp	r0, r1, lsl #16
   19efc:	adc	r2, r2, r2
   19f00:	subcs	r0, r0, r1, lsl #16
   19f04:	cmp	r0, r1, lsl #15
   19f08:	adc	r2, r2, r2
   19f0c:	subcs	r0, r0, r1, lsl #15
   19f10:	cmp	r0, r1, lsl #14
   19f14:	adc	r2, r2, r2
   19f18:	subcs	r0, r0, r1, lsl #14
   19f1c:	cmp	r0, r1, lsl #13
   19f20:	adc	r2, r2, r2
   19f24:	subcs	r0, r0, r1, lsl #13
   19f28:	cmp	r0, r1, lsl #12
   19f2c:	adc	r2, r2, r2
   19f30:	subcs	r0, r0, r1, lsl #12
   19f34:	cmp	r0, r1, lsl #11
   19f38:	adc	r2, r2, r2
   19f3c:	subcs	r0, r0, r1, lsl #11
   19f40:	cmp	r0, r1, lsl #10
   19f44:	adc	r2, r2, r2
   19f48:	subcs	r0, r0, r1, lsl #10
   19f4c:	cmp	r0, r1, lsl #9
   19f50:	adc	r2, r2, r2
   19f54:	subcs	r0, r0, r1, lsl #9
   19f58:	cmp	r0, r1, lsl #8
   19f5c:	adc	r2, r2, r2
   19f60:	subcs	r0, r0, r1, lsl #8
   19f64:	cmp	r0, r1, lsl #7
   19f68:	adc	r2, r2, r2
   19f6c:	subcs	r0, r0, r1, lsl #7
   19f70:	cmp	r0, r1, lsl #6
   19f74:	adc	r2, r2, r2
   19f78:	subcs	r0, r0, r1, lsl #6
   19f7c:	cmp	r0, r1, lsl #5
   19f80:	adc	r2, r2, r2
   19f84:	subcs	r0, r0, r1, lsl #5
   19f88:	cmp	r0, r1, lsl #4
   19f8c:	adc	r2, r2, r2
   19f90:	subcs	r0, r0, r1, lsl #4
   19f94:	cmp	r0, r1, lsl #3
   19f98:	adc	r2, r2, r2
   19f9c:	subcs	r0, r0, r1, lsl #3
   19fa0:	cmp	r0, r1, lsl #2
   19fa4:	adc	r2, r2, r2
   19fa8:	subcs	r0, r0, r1, lsl #2
   19fac:	cmp	r0, r1, lsl #1
   19fb0:	adc	r2, r2, r2
   19fb4:	subcs	r0, r0, r1, lsl #1
   19fb8:	cmp	r0, r1
   19fbc:	adc	r2, r2, r2
   19fc0:	subcs	r0, r0, r1
   19fc4:	mov	r0, r2
   19fc8:	bx	lr
   19fcc:	moveq	r0, #1
   19fd0:	movne	r0, #0
   19fd4:	bx	lr
   19fd8:	clz	r2, r1
   19fdc:	rsb	r2, r2, #31
   19fe0:	lsr	r0, r0, r2
   19fe4:	bx	lr
   19fe8:	cmp	r0, #0
   19fec:	mvnne	r0, #0
   19ff0:	b	1a328 <__assert_fail@plt+0x93f8>
   19ff4:	cmp	r1, #0
   19ff8:	beq	19fe8 <__assert_fail@plt+0x90b8>
   19ffc:	push	{r0, r1, lr}
   1a000:	bl	19e08 <__assert_fail@plt+0x8ed8>
   1a004:	pop	{r1, r2, lr}
   1a008:	mul	r3, r2, r0
   1a00c:	sub	r1, r1, r3
   1a010:	bx	lr
   1a014:	cmp	r1, #0
   1a018:	beq	1a224 <__assert_fail@plt+0x92f4>
   1a01c:	eor	ip, r0, r1
   1a020:	rsbmi	r1, r1, #0
   1a024:	subs	r2, r1, #1
   1a028:	beq	1a1f0 <__assert_fail@plt+0x92c0>
   1a02c:	movs	r3, r0
   1a030:	rsbmi	r3, r0, #0
   1a034:	cmp	r3, r1
   1a038:	bls	1a1fc <__assert_fail@plt+0x92cc>
   1a03c:	tst	r1, r2
   1a040:	beq	1a20c <__assert_fail@plt+0x92dc>
   1a044:	clz	r2, r3
   1a048:	clz	r0, r1
   1a04c:	sub	r2, r0, r2
   1a050:	rsbs	r2, r2, #31
   1a054:	addne	r2, r2, r2, lsl #1
   1a058:	mov	r0, #0
   1a05c:	addne	pc, pc, r2, lsl #2
   1a060:	nop			; (mov r0, r0)
   1a064:	cmp	r3, r1, lsl #31
   1a068:	adc	r0, r0, r0
   1a06c:	subcs	r3, r3, r1, lsl #31
   1a070:	cmp	r3, r1, lsl #30
   1a074:	adc	r0, r0, r0
   1a078:	subcs	r3, r3, r1, lsl #30
   1a07c:	cmp	r3, r1, lsl #29
   1a080:	adc	r0, r0, r0
   1a084:	subcs	r3, r3, r1, lsl #29
   1a088:	cmp	r3, r1, lsl #28
   1a08c:	adc	r0, r0, r0
   1a090:	subcs	r3, r3, r1, lsl #28
   1a094:	cmp	r3, r1, lsl #27
   1a098:	adc	r0, r0, r0
   1a09c:	subcs	r3, r3, r1, lsl #27
   1a0a0:	cmp	r3, r1, lsl #26
   1a0a4:	adc	r0, r0, r0
   1a0a8:	subcs	r3, r3, r1, lsl #26
   1a0ac:	cmp	r3, r1, lsl #25
   1a0b0:	adc	r0, r0, r0
   1a0b4:	subcs	r3, r3, r1, lsl #25
   1a0b8:	cmp	r3, r1, lsl #24
   1a0bc:	adc	r0, r0, r0
   1a0c0:	subcs	r3, r3, r1, lsl #24
   1a0c4:	cmp	r3, r1, lsl #23
   1a0c8:	adc	r0, r0, r0
   1a0cc:	subcs	r3, r3, r1, lsl #23
   1a0d0:	cmp	r3, r1, lsl #22
   1a0d4:	adc	r0, r0, r0
   1a0d8:	subcs	r3, r3, r1, lsl #22
   1a0dc:	cmp	r3, r1, lsl #21
   1a0e0:	adc	r0, r0, r0
   1a0e4:	subcs	r3, r3, r1, lsl #21
   1a0e8:	cmp	r3, r1, lsl #20
   1a0ec:	adc	r0, r0, r0
   1a0f0:	subcs	r3, r3, r1, lsl #20
   1a0f4:	cmp	r3, r1, lsl #19
   1a0f8:	adc	r0, r0, r0
   1a0fc:	subcs	r3, r3, r1, lsl #19
   1a100:	cmp	r3, r1, lsl #18
   1a104:	adc	r0, r0, r0
   1a108:	subcs	r3, r3, r1, lsl #18
   1a10c:	cmp	r3, r1, lsl #17
   1a110:	adc	r0, r0, r0
   1a114:	subcs	r3, r3, r1, lsl #17
   1a118:	cmp	r3, r1, lsl #16
   1a11c:	adc	r0, r0, r0
   1a120:	subcs	r3, r3, r1, lsl #16
   1a124:	cmp	r3, r1, lsl #15
   1a128:	adc	r0, r0, r0
   1a12c:	subcs	r3, r3, r1, lsl #15
   1a130:	cmp	r3, r1, lsl #14
   1a134:	adc	r0, r0, r0
   1a138:	subcs	r3, r3, r1, lsl #14
   1a13c:	cmp	r3, r1, lsl #13
   1a140:	adc	r0, r0, r0
   1a144:	subcs	r3, r3, r1, lsl #13
   1a148:	cmp	r3, r1, lsl #12
   1a14c:	adc	r0, r0, r0
   1a150:	subcs	r3, r3, r1, lsl #12
   1a154:	cmp	r3, r1, lsl #11
   1a158:	adc	r0, r0, r0
   1a15c:	subcs	r3, r3, r1, lsl #11
   1a160:	cmp	r3, r1, lsl #10
   1a164:	adc	r0, r0, r0
   1a168:	subcs	r3, r3, r1, lsl #10
   1a16c:	cmp	r3, r1, lsl #9
   1a170:	adc	r0, r0, r0
   1a174:	subcs	r3, r3, r1, lsl #9
   1a178:	cmp	r3, r1, lsl #8
   1a17c:	adc	r0, r0, r0
   1a180:	subcs	r3, r3, r1, lsl #8
   1a184:	cmp	r3, r1, lsl #7
   1a188:	adc	r0, r0, r0
   1a18c:	subcs	r3, r3, r1, lsl #7
   1a190:	cmp	r3, r1, lsl #6
   1a194:	adc	r0, r0, r0
   1a198:	subcs	r3, r3, r1, lsl #6
   1a19c:	cmp	r3, r1, lsl #5
   1a1a0:	adc	r0, r0, r0
   1a1a4:	subcs	r3, r3, r1, lsl #5
   1a1a8:	cmp	r3, r1, lsl #4
   1a1ac:	adc	r0, r0, r0
   1a1b0:	subcs	r3, r3, r1, lsl #4
   1a1b4:	cmp	r3, r1, lsl #3
   1a1b8:	adc	r0, r0, r0
   1a1bc:	subcs	r3, r3, r1, lsl #3
   1a1c0:	cmp	r3, r1, lsl #2
   1a1c4:	adc	r0, r0, r0
   1a1c8:	subcs	r3, r3, r1, lsl #2
   1a1cc:	cmp	r3, r1, lsl #1
   1a1d0:	adc	r0, r0, r0
   1a1d4:	subcs	r3, r3, r1, lsl #1
   1a1d8:	cmp	r3, r1
   1a1dc:	adc	r0, r0, r0
   1a1e0:	subcs	r3, r3, r1
   1a1e4:	cmp	ip, #0
   1a1e8:	rsbmi	r0, r0, #0
   1a1ec:	bx	lr
   1a1f0:	teq	ip, r0
   1a1f4:	rsbmi	r0, r0, #0
   1a1f8:	bx	lr
   1a1fc:	movcc	r0, #0
   1a200:	asreq	r0, ip, #31
   1a204:	orreq	r0, r0, #1
   1a208:	bx	lr
   1a20c:	clz	r2, r1
   1a210:	rsb	r2, r2, #31
   1a214:	cmp	ip, #0
   1a218:	lsr	r0, r3, r2
   1a21c:	rsbmi	r0, r0, #0
   1a220:	bx	lr
   1a224:	cmp	r0, #0
   1a228:	mvngt	r0, #-2147483648	; 0x80000000
   1a22c:	movlt	r0, #-2147483648	; 0x80000000
   1a230:	b	1a328 <__assert_fail@plt+0x93f8>
   1a234:	cmp	r1, #0
   1a238:	beq	1a224 <__assert_fail@plt+0x92f4>
   1a23c:	push	{r0, r1, lr}
   1a240:	bl	1a01c <__assert_fail@plt+0x90ec>
   1a244:	pop	{r1, r2, lr}
   1a248:	mul	r3, r2, r0
   1a24c:	sub	r1, r1, r3
   1a250:	bx	lr
   1a254:	cmp	r3, #0
   1a258:	cmpeq	r2, #0
   1a25c:	bne	1a280 <__assert_fail@plt+0x9350>
   1a260:	cmp	r1, #0
   1a264:	movlt	r1, #-2147483648	; 0x80000000
   1a268:	movlt	r0, #0
   1a26c:	blt	1a27c <__assert_fail@plt+0x934c>
   1a270:	cmpeq	r0, #0
   1a274:	mvnne	r1, #-2147483648	; 0x80000000
   1a278:	mvnne	r0, #0
   1a27c:	b	1a328 <__assert_fail@plt+0x93f8>
   1a280:	sub	sp, sp, #8
   1a284:	push	{sp, lr}
   1a288:	cmp	r1, #0
   1a28c:	blt	1a2ac <__assert_fail@plt+0x937c>
   1a290:	cmp	r3, #0
   1a294:	blt	1a2e0 <__assert_fail@plt+0x93b0>
   1a298:	bl	1a338 <__assert_fail@plt+0x9408>
   1a29c:	ldr	lr, [sp, #4]
   1a2a0:	add	sp, sp, #8
   1a2a4:	pop	{r2, r3}
   1a2a8:	bx	lr
   1a2ac:	rsbs	r0, r0, #0
   1a2b0:	sbc	r1, r1, r1, lsl #1
   1a2b4:	cmp	r3, #0
   1a2b8:	blt	1a304 <__assert_fail@plt+0x93d4>
   1a2bc:	bl	1a338 <__assert_fail@plt+0x9408>
   1a2c0:	ldr	lr, [sp, #4]
   1a2c4:	add	sp, sp, #8
   1a2c8:	pop	{r2, r3}
   1a2cc:	rsbs	r0, r0, #0
   1a2d0:	sbc	r1, r1, r1, lsl #1
   1a2d4:	rsbs	r2, r2, #0
   1a2d8:	sbc	r3, r3, r3, lsl #1
   1a2dc:	bx	lr
   1a2e0:	rsbs	r2, r2, #0
   1a2e4:	sbc	r3, r3, r3, lsl #1
   1a2e8:	bl	1a338 <__assert_fail@plt+0x9408>
   1a2ec:	ldr	lr, [sp, #4]
   1a2f0:	add	sp, sp, #8
   1a2f4:	pop	{r2, r3}
   1a2f8:	rsbs	r0, r0, #0
   1a2fc:	sbc	r1, r1, r1, lsl #1
   1a300:	bx	lr
   1a304:	rsbs	r2, r2, #0
   1a308:	sbc	r3, r3, r3, lsl #1
   1a30c:	bl	1a338 <__assert_fail@plt+0x9408>
   1a310:	ldr	lr, [sp, #4]
   1a314:	add	sp, sp, #8
   1a318:	pop	{r2, r3}
   1a31c:	rsbs	r2, r2, #0
   1a320:	sbc	r3, r3, r3, lsl #1
   1a324:	bx	lr
   1a328:	push	{r1, lr}
   1a32c:	mov	r0, #8
   1a330:	bl	10cd8 <raise@plt>
   1a334:	pop	{r1, pc}
   1a338:	cmp	r1, r3
   1a33c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a340:	cmpeq	r0, r2
   1a344:	mov	r4, r0
   1a348:	mov	r5, r1
   1a34c:	ldr	r9, [sp, #28]
   1a350:	movcc	r0, #0
   1a354:	movcc	r1, #0
   1a358:	bcc	1a450 <__assert_fail@plt+0x9520>
   1a35c:	cmp	r3, #0
   1a360:	clzeq	ip, r2
   1a364:	clzne	ip, r3
   1a368:	addeq	ip, ip, #32
   1a36c:	cmp	r5, #0
   1a370:	clzeq	r1, r4
   1a374:	addeq	r1, r1, #32
   1a378:	clzne	r1, r5
   1a37c:	sub	ip, ip, r1
   1a380:	sub	lr, ip, #32
   1a384:	lsl	r7, r3, ip
   1a388:	rsb	r8, ip, #32
   1a38c:	orr	r7, r7, r2, lsl lr
   1a390:	orr	r7, r7, r2, lsr r8
   1a394:	lsl	r6, r2, ip
   1a398:	cmp	r5, r7
   1a39c:	cmpeq	r4, r6
   1a3a0:	movcc	r0, #0
   1a3a4:	movcc	r1, #0
   1a3a8:	bcc	1a3c4 <__assert_fail@plt+0x9494>
   1a3ac:	mov	r3, #1
   1a3b0:	subs	r4, r4, r6
   1a3b4:	lsl	r1, r3, lr
   1a3b8:	lsl	r0, r3, ip
   1a3bc:	orr	r1, r1, r3, lsr r8
   1a3c0:	sbc	r5, r5, r7
   1a3c4:	cmp	ip, #0
   1a3c8:	beq	1a450 <__assert_fail@plt+0x9520>
   1a3cc:	lsrs	r3, r7, #1
   1a3d0:	rrx	r2, r6
   1a3d4:	mov	r6, ip
   1a3d8:	b	1a3fc <__assert_fail@plt+0x94cc>
   1a3dc:	subs	r4, r4, r2
   1a3e0:	sbc	r5, r5, r3
   1a3e4:	adds	r4, r4, r4
   1a3e8:	adc	r5, r5, r5
   1a3ec:	adds	r4, r4, #1
   1a3f0:	adc	r5, r5, #0
   1a3f4:	subs	r6, r6, #1
   1a3f8:	beq	1a418 <__assert_fail@plt+0x94e8>
   1a3fc:	cmp	r5, r3
   1a400:	cmpeq	r4, r2
   1a404:	bcs	1a3dc <__assert_fail@plt+0x94ac>
   1a408:	adds	r4, r4, r4
   1a40c:	adc	r5, r5, r5
   1a410:	subs	r6, r6, #1
   1a414:	bne	1a3fc <__assert_fail@plt+0x94cc>
   1a418:	lsr	r6, r4, ip
   1a41c:	lsr	r7, r5, ip
   1a420:	orr	r6, r6, r5, lsl r8
   1a424:	adds	r2, r0, r4
   1a428:	orr	r6, r6, r5, lsr lr
   1a42c:	adc	r3, r1, r5
   1a430:	lsl	r1, r7, ip
   1a434:	orr	r1, r1, r6, lsl lr
   1a438:	lsl	r0, r6, ip
   1a43c:	orr	r1, r1, r6, lsr r8
   1a440:	subs	r0, r2, r0
   1a444:	mov	r4, r6
   1a448:	mov	r5, r7
   1a44c:	sbc	r1, r3, r1
   1a450:	cmp	r9, #0
   1a454:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1a458:	strd	r4, [r9]
   1a45c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a460:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a464:	mov	r7, r0
   1a468:	ldr	r6, [pc, #72]	; 1a4b8 <__assert_fail@plt+0x9588>
   1a46c:	ldr	r5, [pc, #72]	; 1a4bc <__assert_fail@plt+0x958c>
   1a470:	add	r6, pc, r6
   1a474:	add	r5, pc, r5
   1a478:	sub	r6, r6, r5
   1a47c:	mov	r8, r1
   1a480:	mov	r9, r2
   1a484:	bl	10ca0 <calloc@plt-0x20>
   1a488:	asrs	r6, r6, #2
   1a48c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a490:	mov	r4, #0
   1a494:	add	r4, r4, #1
   1a498:	ldr	r3, [r5], #4
   1a49c:	mov	r2, r9
   1a4a0:	mov	r1, r8
   1a4a4:	mov	r0, r7
   1a4a8:	blx	r3
   1a4ac:	cmp	r6, r4
   1a4b0:	bne	1a494 <__assert_fail@plt+0x9564>
   1a4b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a4b8:	muleq	r1, r8, sl
   1a4bc:	muleq	r1, r0, sl
   1a4c0:	bx	lr
   1a4c4:	ldr	r3, [pc, #12]	; 1a4d8 <__assert_fail@plt+0x95a8>
   1a4c8:	mov	r1, #0
   1a4cc:	add	r3, pc, r3
   1a4d0:	ldr	r2, [r3]
   1a4d4:	b	10e58 <__cxa_atexit@plt>
   1a4d8:	andeq	r1, r1, r4, lsl ip

Disassembly of section .fini:

0001a4dc <.fini>:
   1a4dc:	push	{r3, lr}
   1a4e0:	pop	{r3, pc}
