
../repos/coreutils/src/tr:     file format elf32-littlearm


Disassembly of section .init:

00010cb4 <.init>:
   10cb4:	push	{r3, lr}
   10cb8:	bl	11b58 <__assert_fail@plt+0xbfc>
   10cbc:	pop	{r3, pc}

Disassembly of section .plt:

00010cc0 <calloc@plt-0x14>:
   10cc0:	push	{lr}		; (str lr, [sp, #-4]!)
   10cc4:	ldr	lr, [pc, #4]	; 10cd0 <calloc@plt-0x4>
   10cc8:	add	lr, pc, lr
   10ccc:	ldr	pc, [lr, #8]!
   10cd0:	andeq	r7, r1, r0, lsr r3

00010cd4 <calloc@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #94208	; 0x17000
   10cdc:	ldr	pc, [ip, #816]!	; 0x330

00010ce0 <fputs_unlocked@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #94208	; 0x17000
   10ce8:	ldr	pc, [ip, #808]!	; 0x328

00010cec <raise@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #94208	; 0x17000
   10cf4:	ldr	pc, [ip, #800]!	; 0x320

00010cf8 <strcmp@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #94208	; 0x17000
   10d00:	ldr	pc, [ip, #792]!	; 0x318

00010d04 <posix_fadvise64@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #94208	; 0x17000
   10d0c:	ldr	pc, [ip, #784]!	; 0x310

00010d10 <read@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #94208	; 0x17000
   10d18:	ldr	pc, [ip, #776]!	; 0x308

00010d1c <fflush@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #94208	; 0x17000
   10d24:	ldr	pc, [ip, #768]!	; 0x300

00010d28 <free@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #94208	; 0x17000
   10d30:	ldr	pc, [ip, #760]!	; 0x2f8

00010d34 <_exit@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #94208	; 0x17000
   10d3c:	ldr	pc, [ip, #752]!	; 0x2f0

00010d40 <memcpy@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #94208	; 0x17000
   10d48:	ldr	pc, [ip, #744]!	; 0x2e8

00010d4c <tolower@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #94208	; 0x17000
   10d54:	ldr	pc, [ip, #736]!	; 0x2e0

00010d58 <mbsinit@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #94208	; 0x17000
   10d60:	ldr	pc, [ip, #728]!	; 0x2d8

00010d64 <fwrite_unlocked@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #94208	; 0x17000
   10d6c:	ldr	pc, [ip, #720]!	; 0x2d0

00010d70 <memcmp@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #94208	; 0x17000
   10d78:	ldr	pc, [ip, #712]!	; 0x2c8

00010d7c <stpcpy@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #94208	; 0x17000
   10d84:	ldr	pc, [ip, #704]!	; 0x2c0

00010d88 <fputc_unlocked@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #94208	; 0x17000
   10d90:	ldr	pc, [ip, #696]!	; 0x2b8

00010d94 <dcgettext@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #94208	; 0x17000
   10d9c:	ldr	pc, [ip, #688]!	; 0x2b0

00010da0 <realloc@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #94208	; 0x17000
   10da8:	ldr	pc, [ip, #680]!	; 0x2a8

00010dac <textdomain@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #94208	; 0x17000
   10db4:	ldr	pc, [ip, #672]!	; 0x2a0

00010db8 <iswprint@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #94208	; 0x17000
   10dc0:	ldr	pc, [ip, #664]!	; 0x298

00010dc4 <lseek64@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #94208	; 0x17000
   10dcc:	ldr	pc, [ip, #656]!	; 0x290

00010dd0 <__ctype_get_mb_cur_max@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #94208	; 0x17000
   10dd8:	ldr	pc, [ip, #648]!	; 0x288

00010ddc <__fpending@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #94208	; 0x17000
   10de4:	ldr	pc, [ip, #640]!	; 0x280

00010de8 <ferror_unlocked@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #94208	; 0x17000
   10df0:	ldr	pc, [ip, #632]!	; 0x278

00010df4 <mbrtowc@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #94208	; 0x17000
   10dfc:	ldr	pc, [ip, #624]!	; 0x270

00010e00 <error@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #94208	; 0x17000
   10e08:	ldr	pc, [ip, #616]!	; 0x268

00010e0c <malloc@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #94208	; 0x17000
   10e14:	ldr	pc, [ip, #608]!	; 0x260

00010e18 <__libc_start_main@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #94208	; 0x17000
   10e20:	ldr	pc, [ip, #600]!	; 0x258

00010e24 <__freading@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #94208	; 0x17000
   10e2c:	ldr	pc, [ip, #592]!	; 0x250

00010e30 <__gmon_start__@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #94208	; 0x17000
   10e38:	ldr	pc, [ip, #584]!	; 0x248

00010e3c <getopt_long@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #94208	; 0x17000
   10e44:	ldr	pc, [ip, #576]!	; 0x240

00010e48 <__ctype_b_loc@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #94208	; 0x17000
   10e50:	ldr	pc, [ip, #568]!	; 0x238

00010e54 <exit@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #94208	; 0x17000
   10e5c:	ldr	pc, [ip, #560]!	; 0x230

00010e60 <strlen@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #94208	; 0x17000
   10e68:	ldr	pc, [ip, #552]!	; 0x228

00010e6c <strchr@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #94208	; 0x17000
   10e74:	ldr	pc, [ip, #544]!	; 0x220

00010e78 <__errno_location@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #94208	; 0x17000
   10e80:	ldr	pc, [ip, #536]!	; 0x218

00010e84 <__sprintf_chk@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #94208	; 0x17000
   10e8c:	ldr	pc, [ip, #528]!	; 0x210

00010e90 <__cxa_atexit@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #94208	; 0x17000
   10e98:	ldr	pc, [ip, #520]!	; 0x208

00010e9c <memset@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #94208	; 0x17000
   10ea4:	ldr	pc, [ip, #512]!	; 0x200

00010ea8 <__printf_chk@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #94208	; 0x17000
   10eb0:	ldr	pc, [ip, #504]!	; 0x1f8

00010eb4 <fileno@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #496]!	; 0x1f0

00010ec0 <strtoumax@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #488]!	; 0x1e8

00010ecc <__fprintf_chk@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #480]!	; 0x1e0

00010ed8 <fclose@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #472]!	; 0x1d8

00010ee4 <fseeko64@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #464]!	; 0x1d0

00010ef0 <setlocale@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #456]!	; 0x1c8

00010efc <toupper@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #448]!	; 0x1c0

00010f08 <strrchr@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #440]!	; 0x1b8

00010f14 <nl_langinfo@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #94208	; 0x17000
   10f1c:	ldr	pc, [ip, #432]!	; 0x1b0

00010f20 <bindtextdomain@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #94208	; 0x17000
   10f28:	ldr	pc, [ip, #424]!	; 0x1a8

00010f2c <fputs@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #94208	; 0x17000
   10f34:	ldr	pc, [ip, #416]!	; 0x1a0

00010f38 <strncmp@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #94208	; 0x17000
   10f40:	ldr	pc, [ip, #408]!	; 0x198

00010f44 <abort@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #94208	; 0x17000
   10f4c:	ldr	pc, [ip, #400]!	; 0x190

00010f50 <close@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #94208	; 0x17000
   10f58:	ldr	pc, [ip, #392]!	; 0x188

00010f5c <__assert_fail@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #94208	; 0x17000
   10f64:	ldr	pc, [ip, #384]!	; 0x180

Disassembly of section .text:

00010f68 <.text>:
   10f68:	push	{r4, lr}
   10f6c:	ldr	r3, [pc, #12]	; 10f80 <__assert_fail@plt+0x24>
   10f70:	ldr	r2, [pc, #12]	; 10f84 <__assert_fail@plt+0x28>
   10f74:	ldr	r1, [pc, #12]	; 10f88 <__assert_fail@plt+0x2c>
   10f78:	ldr	r0, [pc, #12]	; 10f8c <__assert_fail@plt+0x30>
   10f7c:	bl	10f5c <__assert_fail@plt>
   10f80:	muleq	r1, ip, r1
   10f84:	ldrdeq	r0, [r0], -r1
   10f88:	andeq	r6, r1, r8, lsl #6
   10f8c:	andeq	r6, r1, r2, lsr #7
   10f90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f94:	mov	r4, r0
   10f98:	sub	sp, sp, #380	; 0x17c
   10f9c:	ldr	r0, [r1]
   10fa0:	mov	r6, r1
   10fa4:	bl	13228 <__assert_fail@plt+0x22cc>
   10fa8:	ldr	r1, [pc, #2728]	; 11a58 <__assert_fail@plt+0xafc>
   10fac:	mov	r0, #6
   10fb0:	bl	10ef0 <setlocale@plt>
   10fb4:	ldr	r1, [pc, #2720]	; 11a5c <__assert_fail@plt+0xb00>
   10fb8:	ldr	r0, [pc, #2720]	; 11a60 <__assert_fail@plt+0xb04>
   10fbc:	bl	10f20 <bindtextdomain@plt>
   10fc0:	ldr	r0, [pc, #2712]	; 11a60 <__assert_fail@plt+0xb04>
   10fc4:	bl	10dac <textdomain@plt>
   10fc8:	ldr	r0, [pc, #2708]	; 11a64 <__assert_fail@plt+0xb08>
   10fcc:	bl	16160 <__assert_fail@plt+0x5204>
   10fd0:	ldr	r8, [pc, #2704]	; 11a68 <__assert_fail@plt+0xb0c>
   10fd4:	ldr	r5, [pc, #2704]	; 11a6c <__assert_fail@plt+0xb10>
   10fd8:	mov	r7, #0
   10fdc:	str	r7, [sp]
   10fe0:	mov	r3, r8
   10fe4:	ldr	r2, [pc, #2692]	; 11a70 <__assert_fail@plt+0xb14>
   10fe8:	mov	r1, r6
   10fec:	mov	r0, r4
   10ff0:	bl	10e3c <getopt_long@plt>
   10ff4:	cmn	r0, #1
   10ff8:	bne	11074 <__assert_fail@plt+0x118>
   10ffc:	ldr	r9, [pc, #2672]	; 11a74 <__assert_fail@plt+0xb18>
   11000:	ldr	r7, [pc, #2660]	; 11a6c <__assert_fail@plt+0xb10>
   11004:	ldr	r5, [r9]
   11008:	ldrb	r2, [r7, #777]	; 0x309
   1100c:	sub	r5, r4, r5
   11010:	cmp	r5, #2
   11014:	movne	r3, #0
   11018:	ldrbeq	r3, [r7, #777]	; 0x309
   1101c:	eoreq	r3, r3, #1
   11020:	and	r3, r3, #1
   11024:	strb	r3, [r7, #780]	; 0x30c
   11028:	ldrb	r3, [r7, #778]	; 0x30a
   1102c:	cmp	r2, r3
   11030:	moveq	r3, #2
   11034:	movne	r3, #1
   11038:	movle	r8, #2
   1103c:	movgt	r8, #1
   11040:	cmp	r3, r5
   11044:	ble	111b4 <__assert_fail@plt+0x258>
   11048:	cmp	r5, #0
   1104c:	mov	r2, #5
   11050:	bne	11144 <__assert_fail@plt+0x1e8>
   11054:	ldr	r1, [pc, #2588]	; 11a78 <__assert_fail@plt+0xb1c>
   11058:	mov	r0, r5
   1105c:	bl	10d94 <dcgettext@plt>
   11060:	mov	r1, r5
   11064:	mov	r2, r0
   11068:	mov	r0, r5
   1106c:	bl	10e00 <error@plt>
   11070:	b	110dc <__assert_fail@plt+0x180>
   11074:	cmp	r0, #67	; 0x43
   11078:	beq	1111c <__assert_fail@plt+0x1c0>
   1107c:	bgt	110c8 <__assert_fail@plt+0x16c>
   11080:	cmn	r0, #2
   11084:	beq	1113c <__assert_fail@plt+0x1e0>
   11088:	cmp	r0, #65	; 0x41
   1108c:	beq	11100 <__assert_fail@plt+0x1a4>
   11090:	cmn	r0, #3
   11094:	bne	110dc <__assert_fail@plt+0x180>
   11098:	ldr	r3, [pc, #2524]	; 11a7c <__assert_fail@plt+0xb20>
   1109c:	ldr	r0, [pc, #2524]	; 11a80 <__assert_fail@plt+0xb24>
   110a0:	str	r3, [sp]
   110a4:	ldr	r3, [pc, #2520]	; 11a84 <__assert_fail@plt+0xb28>
   110a8:	str	r7, [sp, #4]
   110ac:	ldr	r2, [pc, #2516]	; 11a88 <__assert_fail@plt+0xb2c>
   110b0:	ldr	r0, [r0]
   110b4:	ldr	r3, [r3]
   110b8:	ldr	r1, [pc, #2508]	; 11a8c <__assert_fail@plt+0xb30>
   110bc:	bl	14d14 <__assert_fail@plt+0x3db8>
   110c0:	mov	r0, #0
   110c4:	bl	10e54 <exit@plt>
   110c8:	cmp	r0, #100	; 0x64
   110cc:	beq	11128 <__assert_fail@plt+0x1cc>
   110d0:	bgt	110e4 <__assert_fail@plt+0x188>
   110d4:	cmp	r0, #99	; 0x63
   110d8:	beq	1111c <__assert_fail@plt+0x1c0>
   110dc:	mov	r0, #1
   110e0:	b	11140 <__assert_fail@plt+0x1e4>
   110e4:	cmp	r0, #115	; 0x73
   110e8:	mov	r3, #1
   110ec:	beq	11134 <__assert_fail@plt+0x1d8>
   110f0:	cmp	r0, #116	; 0x74
   110f4:	bne	110dc <__assert_fail@plt+0x180>
   110f8:	strb	r3, [r5, #779]	; 0x30b
   110fc:	b	10fdc <__assert_fail@plt+0x80>
   11100:	ldr	r1, [pc, #2440]	; 11a90 <__assert_fail@plt+0xb34>
   11104:	mov	r0, #3
   11108:	bl	10ef0 <setlocale@plt>
   1110c:	ldr	r1, [pc, #2428]	; 11a90 <__assert_fail@plt+0xb34>
   11110:	mov	r0, r7
   11114:	bl	10ef0 <setlocale@plt>
   11118:	b	10fdc <__assert_fail@plt+0x80>
   1111c:	mov	r3, #1
   11120:	strb	r3, [r5, #776]	; 0x308
   11124:	b	10fdc <__assert_fail@plt+0x80>
   11128:	mov	r3, #1
   1112c:	strb	r3, [r5, #777]	; 0x309
   11130:	b	10fdc <__assert_fail@plt+0x80>
   11134:	strb	r3, [r5, #778]	; 0x30a
   11138:	b	10fdc <__assert_fail@plt+0x80>
   1113c:	mov	r0, #0
   11140:	bl	12e00 <__assert_fail@plt+0x1ea4>
   11144:	ldr	r1, [pc, #2376]	; 11a94 <__assert_fail@plt+0xb38>
   11148:	mov	r0, #0
   1114c:	bl	10d94 <dcgettext@plt>
   11150:	sub	r4, r4, #-1073741823	; 0xc0000001
   11154:	mov	r5, r0
   11158:	ldr	r0, [r6, r4, lsl #2]
   1115c:	bl	14858 <__assert_fail@plt+0x38fc>
   11160:	mov	r1, #0
   11164:	mov	r2, r5
   11168:	mov	r3, r0
   1116c:	mov	r0, r1
   11170:	bl	10e00 <error@plt>
   11174:	ldr	r3, [pc, #2332]	; 11a98 <__assert_fail@plt+0xb3c>
   11178:	ldrb	r0, [r7, #778]	; 0x30a
   1117c:	ldr	r1, [pc, #2328]	; 11a9c <__assert_fail@plt+0xb40>
   11180:	ldr	r4, [r3]
   11184:	ldr	r3, [pc, #2324]	; 11aa0 <__assert_fail@plt+0xb44>
   11188:	cmp	r0, #0
   1118c:	mov	r2, #5
   11190:	moveq	r1, r3
   11194:	mov	r0, #0
   11198:	bl	10d94 <dcgettext@plt>
   1119c:	ldr	r2, [pc, #2304]	; 11aa4 <__assert_fail@plt+0xb48>
   111a0:	mov	r1, #1
   111a4:	mov	r3, r0
   111a8:	mov	r0, r4
   111ac:	bl	10ecc <__fprintf_chk@plt>
   111b0:	b	110dc <__assert_fail@plt+0x180>
   111b4:	cmp	r8, r5
   111b8:	bge	11210 <__assert_fail@plt+0x2b4>
   111bc:	mov	r2, #5
   111c0:	ldr	r1, [pc, #2272]	; 11aa8 <__assert_fail@plt+0xb4c>
   111c4:	mov	r0, #0
   111c8:	bl	10d94 <dcgettext@plt>
   111cc:	ldr	r3, [r9]
   111d0:	add	r8, r8, r3
   111d4:	mov	r4, r0
   111d8:	ldr	r0, [r6, r8, lsl #2]
   111dc:	bl	14858 <__assert_fail@plt+0x38fc>
   111e0:	mov	r1, #0
   111e4:	mov	r2, r4
   111e8:	mov	r3, r0
   111ec:	mov	r0, r1
   111f0:	bl	10e00 <error@plt>
   111f4:	cmp	r5, #2
   111f8:	bne	110dc <__assert_fail@plt+0x180>
   111fc:	ldr	r3, [pc, #2196]	; 11a98 <__assert_fail@plt+0xb3c>
   11200:	mov	r2, #5
   11204:	ldr	r1, [pc, #2208]	; 11aac <__assert_fail@plt+0xb50>
   11208:	ldr	r4, [r3]
   1120c:	b	11194 <__assert_fail@plt+0x238>
   11210:	mov	r0, #24
   11214:	bl	14ddc <__assert_fail@plt+0x3e80>
   11218:	ldr	r3, [r9]
   1121c:	add	r8, sp, #376	; 0x178
   11220:	mov	sl, #0
   11224:	str	r0, [r8, #-336]!	; 0xfffffeb0
   11228:	str	r0, [sp, #44]	; 0x2c
   1122c:	str	sl, [r0, #4]
   11230:	mov	r1, r8
   11234:	ldr	r0, [r6, r3, lsl #2]
   11238:	bl	1270c <__assert_fail@plt+0x17b0>
   1123c:	cmp	r0, sl
   11240:	beq	11a4c <__assert_fail@plt+0xaf0>
   11244:	cmp	r5, #2
   11248:	movne	r4, sl
   1124c:	bne	11284 <__assert_fail@plt+0x328>
   11250:	mov	r0, #24
   11254:	bl	14ddc <__assert_fail@plt+0x3e80>
   11258:	ldr	r3, [r9]
   1125c:	add	r4, sp, #376	; 0x178
   11260:	add	r3, r3, #1
   11264:	str	r0, [r4, #-296]!	; 0xfffffed8
   11268:	str	r0, [sp, #84]	; 0x54
   1126c:	str	sl, [r0, #4]
   11270:	mov	r1, r4
   11274:	ldr	r0, [r6, r3, lsl #2]
   11278:	bl	1270c <__assert_fail@plt+0x17b0>
   1127c:	cmp	r0, sl
   11280:	beq	11a4c <__assert_fail@plt+0xaf0>
   11284:	mov	r0, r8
   11288:	bl	11f50 <__assert_fail@plt+0xff4>
   1128c:	ldrb	r3, [r7, #776]	; 0x308
   11290:	cmp	r3, #0
   11294:	beq	112e0 <__assert_fail@plt+0x384>
   11298:	mov	r2, #256	; 0x100
   1129c:	mov	r1, #0
   112a0:	add	r0, sp, #120	; 0x78
   112a4:	bl	10e9c <memset@plt>
   112a8:	mov	r6, #256	; 0x100
   112ac:	mvn	r2, #1
   112b0:	mvn	r3, #0
   112b4:	mov	r9, #0
   112b8:	mov	sl, #1
   112bc:	strd	r2, [r8, #8]
   112c0:	mov	r1, r9
   112c4:	mov	r0, r8
   112c8:	bl	12118 <__assert_fail@plt+0x11bc>
   112cc:	cmn	r0, #1
   112d0:	bne	1130c <__assert_fail@plt+0x3b0>
   112d4:	mov	r2, r6
   112d8:	asr	r3, r6, #31
   112dc:	strd	r2, [r8, #16]
   112e0:	ldr	r6, [sp, #64]	; 0x40
   112e4:	cmp	r6, #0
   112e8:	beq	11328 <__assert_fail@plt+0x3cc>
   112ec:	ldr	r1, [pc, #1980]	; 11ab0 <__assert_fail@plt+0xb54>
   112f0:	mov	r2, #5
   112f4:	mov	r0, #0
   112f8:	bl	10d94 <dcgettext@plt>
   112fc:	mov	r1, #0
   11300:	mov	r2, r0
   11304:	mov	r0, #1
   11308:	bl	10e00 <error@plt>
   1130c:	add	r3, sp, #376	; 0x178
   11310:	add	r0, r3, r0
   11314:	ldrb	r3, [r0, #-256]	; 0xffffff00
   11318:	strb	sl, [r0, #-256]	; 0xffffff00
   1131c:	eor	r3, r3, #1
   11320:	sub	r6, r6, r3
   11324:	b	112c0 <__assert_fail@plt+0x364>
   11328:	cmp	r4, #0
   1132c:	beq	116c0 <__assert_fail@plt+0x764>
   11330:	mov	r0, r4
   11334:	ldrd	sl, [r8, #16]
   11338:	bl	11f50 <__assert_fail@plt+0xff4>
   1133c:	ldrd	r2, [r4, #16]
   11340:	cmp	fp, r3
   11344:	cmpeq	sl, r2
   11348:	bcc	1136c <__assert_fail@plt+0x410>
   1134c:	ldr	r1, [r4, #24]
   11350:	cmp	r1, #1
   11354:	bne	1136c <__assert_fail@plt+0x410>
   11358:	subs	r2, sl, r2
   1135c:	ldr	r1, [r4, #28]
   11360:	sbc	r3, fp, r3
   11364:	strd	r2, [r1, #16]
   11368:	strd	sl, [r4, #16]
   1136c:	ldr	r3, [r4, #24]
   11370:	cmp	r3, #1
   11374:	movhi	r2, #5
   11378:	ldrhi	r1, [pc, #1844]	; 11ab4 <__assert_fail@plt+0xb58>
   1137c:	bhi	112f4 <__assert_fail@plt+0x398>
   11380:	ldrb	r9, [r7, #780]	; 0x30c
   11384:	cmp	r9, #0
   11388:	beq	1172c <__assert_fail@plt+0x7d0>
   1138c:	ldrb	r9, [r4, #32]
   11390:	cmp	r9, #0
   11394:	movne	r2, #5
   11398:	ldrne	r1, [pc, #1816]	; 11ab8 <__assert_fail@plt+0xb5c>
   1139c:	bne	112f4 <__assert_fail@plt+0x398>
   113a0:	ldrb	r3, [r4, #34]	; 0x22
   113a4:	cmp	r3, #0
   113a8:	movne	r2, #5
   113ac:	ldrne	r1, [pc, #1800]	; 11abc <__assert_fail@plt+0xb60>
   113b0:	bne	112f4 <__assert_fail@plt+0x398>
   113b4:	ldrb	r3, [r7, #776]	; 0x308
   113b8:	cmp	r3, #0
   113bc:	bne	11588 <__assert_fail@plt+0x62c>
   113c0:	ldrb	fp, [r4, #33]	; 0x21
   113c4:	cmp	fp, #0
   113c8:	beq	11588 <__assert_fail@plt+0x62c>
   113cc:	bl	10e48 <__ctype_b_loc@plt>
   113d0:	mov	r7, r6
   113d4:	ldr	r3, [r0]
   113d8:	sub	r2, r3, #2
   113dc:	add	r3, r3, #508	; 0x1fc
   113e0:	add	r3, r3, #2
   113e4:	ldrh	r1, [r2, #2]!
   113e8:	tst	r1, #256	; 0x100
   113ec:	addne	r6, r6, #1
   113f0:	tst	r1, #512	; 0x200
   113f4:	addne	r7, r7, #1
   113f8:	cmp	r2, r3
   113fc:	bne	113e4 <__assert_fail@plt+0x488>
   11400:	ldrd	r2, [r8, #16]
   11404:	mov	r0, #0
   11408:	ldr	r9, [sp, #44]	; 0x2c
   1140c:	strd	r2, [sp, #8]
   11410:	ldrd	r2, [r4, #16]
   11414:	ldr	sl, [r4, #4]
   11418:	sub	r7, r7, #1
   1141c:	strd	r2, [sp, #16]
   11420:	mvn	r3, #0
   11424:	mvn	r2, #1
   11428:	strd	r2, [r8, #8]
   1142c:	strd	r2, [r4, #8]
   11430:	mov	r8, r0
   11434:	mov	r3, fp
   11438:	cmn	r0, #1
   1143c:	cmnne	r8, #1
   11440:	bne	11488 <__assert_fail@plt+0x52c>
   11444:	ldrd	r2, [sp, #56]	; 0x38
   11448:	ldrd	r0, [sp, #8]
   1144c:	cmp	r1, r3
   11450:	cmpeq	r0, r2
   11454:	bcc	11474 <__assert_fail@plt+0x518>
   11458:	ldrd	r2, [r4, #16]
   1145c:	ldrd	r0, [sp, #16]
   11460:	cmp	r1, r3
   11464:	cmpeq	r0, r2
   11468:	strcs	r9, [sp, #44]	; 0x2c
   1146c:	strcs	sl, [r4, #4]
   11470:	bcs	11588 <__assert_fail@plt+0x62c>
   11474:	ldr	r3, [pc, #1604]	; 11ac0 <__assert_fail@plt+0xb64>
   11478:	ldr	r2, [pc, #1604]	; 11ac4 <__assert_fail@plt+0xb68>
   1147c:	ldr	r1, [pc, #1604]	; 11ac8 <__assert_fail@plt+0xb6c>
   11480:	ldr	r0, [pc, #1604]	; 11acc <__assert_fail@plt+0xb70>
   11484:	bl	10f5c <__assert_fail@plt>
   11488:	add	r1, sp, #36	; 0x24
   1148c:	add	r0, sp, #40	; 0x28
   11490:	str	r3, [sp, #28]
   11494:	bl	12118 <__assert_fail@plt+0x11bc>
   11498:	add	r1, sp, #120	; 0x78
   1149c:	mov	r8, r0
   114a0:	mov	r0, r4
   114a4:	bl	12118 <__assert_fail@plt+0x11bc>
   114a8:	ldr	r3, [sp, #28]
   114ac:	ldr	r1, [sp, #120]	; 0x78
   114b0:	cmp	r3, #0
   114b4:	beq	114e0 <__assert_fail@plt+0x584>
   114b8:	cmp	r1, #2
   114bc:	beq	11554 <__assert_fail@plt+0x5f8>
   114c0:	cmp	fp, #0
   114c4:	beq	114d4 <__assert_fail@plt+0x578>
   114c8:	ldr	r3, [sp, #36]	; 0x24
   114cc:	cmp	r3, #2
   114d0:	bne	114e0 <__assert_fail@plt+0x584>
   114d4:	mov	r2, #5
   114d8:	ldr	r1, [pc, #1520]	; 11ad0 <__assert_fail@plt+0xb74>
   114dc:	b	112f4 <__assert_fail@plt+0x398>
   114e0:	cmp	r1, #2
   114e4:	beq	11554 <__assert_fail@plt+0x5f8>
   114e8:	ldr	r3, [sp, #44]	; 0x2c
   114ec:	mvn	r2, #0
   114f0:	ldr	ip, [sp, #36]	; 0x24
   114f4:	ldr	r3, [r3, #4]
   114f8:	cmp	ip, #1
   114fc:	str	r3, [sp, #44]	; 0x2c
   11500:	mvn	r3, #0
   11504:	subeq	ip, r6, #1
   11508:	strd	r2, [sp, #48]	; 0x30
   1150c:	ldr	r3, [r4, #4]
   11510:	mvn	r2, #0
   11514:	movne	ip, r7
   11518:	ldr	r3, [r3, #4]
   1151c:	str	r3, [r4, #4]
   11520:	mvn	r3, #0
   11524:	strd	r2, [r4, #8]
   11528:	ldrd	r2, [sp, #56]	; 0x38
   1152c:	subs	r2, r2, ip
   11530:	sbc	r3, r3, #0
   11534:	cmp	r1, #1
   11538:	strd	r2, [sp, #56]	; 0x38
   1153c:	ldrd	r2, [r4, #16]
   11540:	subeq	r1, r6, #1
   11544:	movne	r1, r7
   11548:	subs	r2, r2, r1
   1154c:	sbc	r3, r3, #0
   11550:	strd	r2, [r4, #16]
   11554:	ldr	r3, [sp, #52]	; 0x34
   11558:	ldr	fp, [sp, #48]	; 0x30
   1155c:	ldr	r2, [r4, #12]
   11560:	and	fp, fp, r3
   11564:	ldr	r3, [r4, #8]
   11568:	cmn	fp, #1
   1156c:	and	r3, r3, r2
   11570:	movne	fp, #0
   11574:	moveq	fp, #1
   11578:	cmn	r3, #1
   1157c:	movne	r3, #0
   11580:	moveq	r3, #1
   11584:	b	11438 <__assert_fail@plt+0x4dc>
   11588:	ldrd	r6, [sp, #56]	; 0x38
   1158c:	ldrd	r0, [r4, #16]
   11590:	ldr	r8, [pc, #1236]	; 11a6c <__assert_fail@plt+0xb10>
   11594:	cmp	r7, r1
   11598:	cmpeq	r6, r0
   1159c:	bls	11644 <__assert_fail@plt+0x6e8>
   115a0:	ldrb	r9, [r8, #779]	; 0x30b
   115a4:	cmp	r9, #0
   115a8:	bne	11644 <__assert_fail@plt+0x6e8>
   115ac:	orrs	r3, r0, r1
   115b0:	moveq	r2, #5
   115b4:	ldreq	r1, [pc, #1304]	; 11ad4 <__assert_fail@plt+0xb78>
   115b8:	beq	112f4 <__assert_fail@plt+0x398>
   115bc:	ldr	r3, [r4, #4]
   115c0:	ldr	r2, [r3]
   115c4:	cmp	r2, #4
   115c8:	ldrls	pc, [pc, r2, lsl #2]
   115cc:	b	11630 <__assert_fail@plt+0x6d4>
   115d0:	andeq	r1, r1, r8, lsr #12
   115d4:	andeq	r1, r1, r4, ror #11
   115d8:	andeq	r1, r1, ip, lsl r6
   115dc:	andeq	r1, r1, r0, lsr r6
   115e0:	andeq	r1, r1, r8, lsr #12
   115e4:	ldrb	r9, [r3, #9]
   115e8:	subs	r6, r6, r0
   115ec:	mov	r0, #24
   115f0:	sbc	r7, r7, r1
   115f4:	bl	14ddc <__assert_fail@plt+0x3e80>
   115f8:	mov	r3, #0
   115fc:	mov	r2, #4
   11600:	stm	r0, {r2, r3}
   11604:	ldr	r3, [r4, #4]
   11608:	strb	r9, [r0, #8]
   1160c:	cmp	r3, #0
   11610:	strd	r6, [r0, #16]
   11614:	bne	11634 <__assert_fail@plt+0x6d8>
   11618:	bl	10f68 <__assert_fail@plt+0xc>
   1161c:	mov	r2, #5
   11620:	ldr	r1, [pc, #1200]	; 11ad8 <__assert_fail@plt+0xb7c>
   11624:	b	112f4 <__assert_fail@plt+0x398>
   11628:	ldrb	r9, [r3, #8]
   1162c:	b	115e8 <__assert_fail@plt+0x68c>
   11630:	bl	10f44 <abort@plt>
   11634:	str	r0, [r3, #4]
   11638:	ldrd	r2, [sp, #56]	; 0x38
   1163c:	str	r0, [r4, #4]
   11640:	strd	r2, [r4, #16]
   11644:	ldrb	r3, [r8, #776]	; 0x308
   11648:	cmp	r3, #0
   1164c:	beq	116c0 <__assert_fail@plt+0x764>
   11650:	ldrb	r3, [sp, #73]	; 0x49
   11654:	cmp	r3, #0
   11658:	beq	116c0 <__assert_fail@plt+0x764>
   1165c:	ldrd	r2, [r4, #16]
   11660:	ldrd	r0, [sp, #56]	; 0x38
   11664:	cmp	r3, r1
   11668:	cmpeq	r2, r0
   1166c:	bne	11698 <__assert_fail@plt+0x73c>
   11670:	mvn	r2, #1
   11674:	mvn	r3, #0
   11678:	mov	r1, #0
   1167c:	strd	r2, [r4, #8]
   11680:	mov	r0, r4
   11684:	bl	12118 <__assert_fail@plt+0x11bc>
   11688:	cmn	r0, #1
   1168c:	mov	r6, r0
   11690:	movne	r7, #0
   11694:	bne	116ac <__assert_fail@plt+0x750>
   11698:	mov	r2, #5
   1169c:	ldr	r1, [pc, #1080]	; 11adc <__assert_fail@plt+0xb80>
   116a0:	b	112f4 <__assert_fail@plt+0x398>
   116a4:	cmp	r6, r0
   116a8:	bne	11698 <__assert_fail@plt+0x73c>
   116ac:	mov	r1, r7
   116b0:	mov	r0, r4
   116b4:	bl	12118 <__assert_fail@plt+0x11bc>
   116b8:	cmn	r0, #1
   116bc:	bne	116a4 <__assert_fail@plt+0x748>
   116c0:	ldr	r3, [pc, #1048]	; 11ae0 <__assert_fail@plt+0xb84>
   116c4:	ldr	r8, [pc, #928]	; 11a6c <__assert_fail@plt+0xb10>
   116c8:	mov	r1, #2
   116cc:	ldr	r0, [r3]
   116d0:	bl	131a4 <__assert_fail@plt+0x2248>
   116d4:	ldrb	r3, [r8, #778]	; 0x30a
   116d8:	sub	r1, r5, #1
   116dc:	clz	r1, r1
   116e0:	lsr	r1, r1, #5
   116e4:	tst	r3, r1
   116e8:	mov	r6, r8
   116ec:	beq	11740 <__assert_fail@plt+0x7e4>
   116f0:	add	r0, sp, #40	; 0x28
   116f4:	add	r2, r8, #520	; 0x208
   116f8:	ldrb	r1, [r8, #776]	; 0x308
   116fc:	bl	12538 <__assert_fail@plt+0x15dc>
   11700:	ldr	r0, [pc, #988]	; 11ae4 <__assert_fail@plt+0xb88>
   11704:	bl	125a0 <__assert_fail@plt+0x1644>
   11708:	mov	r0, #0
   1170c:	bl	10f50 <close@plt>
   11710:	cmp	r0, #0
   11714:	beq	110c4 <__assert_fail@plt+0x168>
   11718:	bl	10e78 <__errno_location@plt>
   1171c:	mov	r2, #5
   11720:	ldr	r1, [pc, #960]	; 11ae8 <__assert_fail@plt+0xb8c>
   11724:	ldr	r4, [r0]
   11728:	b	117a8 <__assert_fail@plt+0x84c>
   1172c:	cmp	r3, #0
   11730:	movne	r2, #5
   11734:	ldrne	r1, [pc, #944]	; 11aec <__assert_fail@plt+0xb90>
   11738:	beq	116c0 <__assert_fail@plt+0x764>
   1173c:	b	112f4 <__assert_fail@plt+0x398>
   11740:	ldrb	r2, [r8, #777]	; 0x309
   11744:	ands	r7, r2, r1
   11748:	beq	117bc <__assert_fail@plt+0x860>
   1174c:	ldr	r2, [pc, #924]	; 11af0 <__assert_fail@plt+0xb94>
   11750:	ldrb	r1, [r8, #776]	; 0x308
   11754:	add	r0, sp, #40	; 0x28
   11758:	bl	12538 <__assert_fail@plt+0x15dc>
   1175c:	ldr	r5, [pc, #912]	; 11af4 <__assert_fail@plt+0xb98>
   11760:	ldr	r6, [pc, #792]	; 11a80 <__assert_fail@plt+0xb24>
   11764:	mov	r7, #8192	; 0x2000
   11768:	mov	r1, r7
   1176c:	mov	r0, r5
   11770:	bl	12418 <__assert_fail@plt+0x14bc>
   11774:	subs	r4, r0, #0
   11778:	beq	11708 <__assert_fail@plt+0x7ac>
   1177c:	ldr	r3, [r6]
   11780:	mov	r2, r4
   11784:	mov	r1, #1
   11788:	mov	r0, r5
   1178c:	bl	10d64 <fwrite_unlocked@plt>
   11790:	cmp	r4, r0
   11794:	beq	11768 <__assert_fail@plt+0x80c>
   11798:	bl	10e78 <__errno_location@plt>
   1179c:	ldr	r1, [pc, #852]	; 11af8 <__assert_fail@plt+0xb9c>
   117a0:	mov	r2, #5
   117a4:	ldr	r4, [r0]
   117a8:	mov	r0, #0
   117ac:	bl	10d94 <dcgettext@plt>
   117b0:	mov	r1, r4
   117b4:	mov	r2, r0
   117b8:	b	11304 <__assert_fail@plt+0x3a8>
   117bc:	and	r3, r3, r2
   117c0:	cmp	r5, #2
   117c4:	movne	r5, #0
   117c8:	andeq	r5, r3, #1
   117cc:	cmp	r5, #0
   117d0:	beq	117fc <__assert_fail@plt+0x8a0>
   117d4:	ldr	r2, [pc, #788]	; 11af0 <__assert_fail@plt+0xb94>
   117d8:	ldrb	r1, [r8, #776]	; 0x308
   117dc:	add	r0, sp, #40	; 0x28
   117e0:	bl	12538 <__assert_fail@plt+0x15dc>
   117e4:	mov	r0, r4
   117e8:	add	r2, r8, #520	; 0x208
   117ec:	mov	r1, r7
   117f0:	bl	12538 <__assert_fail@plt+0x15dc>
   117f4:	ldr	r0, [pc, #768]	; 11afc <__assert_fail@plt+0xba0>
   117f8:	b	11704 <__assert_fail@plt+0x7a8>
   117fc:	ldrb	r3, [r8, #780]	; 0x30c
   11800:	cmp	r3, #0
   11804:	beq	11708 <__assert_fail@plt+0x7ac>
   11808:	ldrb	r3, [r8, #776]	; 0x308
   1180c:	ldr	r7, [pc, #748]	; 11b00 <__assert_fail@plt+0xba4>
   11810:	cmp	r3, #0
   11814:	beq	118ec <__assert_fail@plt+0x990>
   11818:	sub	r2, r7, #256	; 0x100
   1181c:	mov	r1, r5
   11820:	add	r0, sp, #40	; 0x28
   11824:	bl	12538 <__assert_fail@plt+0x15dc>
   11828:	mvn	r2, #1
   1182c:	mvn	r3, #0
   11830:	strd	r2, [r4, #8]
   11834:	strb	r5, [r7, r5]
   11838:	add	r5, r5, #1
   1183c:	cmp	r5, #256	; 0x100
   11840:	bne	11834 <__assert_fail@plt+0x8d8>
   11844:	mov	r5, #0
   11848:	ldr	r8, [pc, #672]	; 11af0 <__assert_fail@plt+0xb94>
   1184c:	mov	r9, r5
   11850:	ldrb	r3, [r5, r8]
   11854:	cmp	r3, #0
   11858:	bne	11894 <__assert_fail@plt+0x938>
   1185c:	mov	r1, r9
   11860:	mov	r0, r4
   11864:	bl	12118 <__assert_fail@plt+0x11bc>
   11868:	cmn	r0, #1
   1186c:	bne	11890 <__assert_fail@plt+0x934>
   11870:	ldrb	r3, [r6, #779]	; 0x30b
   11874:	cmp	r3, #0
   11878:	bne	118a0 <__assert_fail@plt+0x944>
   1187c:	ldr	r3, [pc, #640]	; 11b04 <__assert_fail@plt+0xba8>
   11880:	mov	r2, #1840	; 0x730
   11884:	ldr	r1, [pc, #572]	; 11ac8 <__assert_fail@plt+0xb6c>
   11888:	ldr	r0, [pc, #632]	; 11b08 <__assert_fail@plt+0xbac>
   1188c:	b	11484 <__assert_fail@plt+0x528>
   11890:	strb	r0, [r7, r5]
   11894:	add	r5, r5, #1
   11898:	cmp	r5, #256	; 0x100
   1189c:	bne	11850 <__assert_fail@plt+0x8f4>
   118a0:	ldrb	r3, [r6, #778]	; 0x30a
   118a4:	cmp	r3, #0
   118a8:	bne	11a34 <__assert_fail@plt+0xad8>
   118ac:	ldr	r5, [pc, #576]	; 11af4 <__assert_fail@plt+0xb98>
   118b0:	ldr	r6, [pc, #456]	; 11a80 <__assert_fail@plt+0xb24>
   118b4:	mov	r7, #8192	; 0x2000
   118b8:	mov	r1, r7
   118bc:	mov	r0, r5
   118c0:	bl	1249c <__assert_fail@plt+0x1540>
   118c4:	subs	r4, r0, #0
   118c8:	beq	11708 <__assert_fail@plt+0x7ac>
   118cc:	ldr	r3, [r6]
   118d0:	mov	r2, r4
   118d4:	mov	r1, #1
   118d8:	mov	r0, r5
   118dc:	bl	10d64 <fwrite_unlocked@plt>
   118e0:	cmp	r4, r0
   118e4:	beq	118b8 <__assert_fail@plt+0x95c>
   118e8:	b	11798 <__assert_fail@plt+0x83c>
   118ec:	strb	r3, [r7, r3]
   118f0:	add	r3, r3, #1
   118f4:	cmp	r3, #256	; 0x100
   118f8:	bne	118ec <__assert_fail@plt+0x990>
   118fc:	ldr	r8, [pc, #492]	; 11af0 <__assert_fail@plt+0xb94>
   11900:	mvn	r2, #1
   11904:	mvn	r3, #0
   11908:	strd	r2, [sp, #48]	; 0x30
   1190c:	strd	r2, [r4, #8]
   11910:	add	r1, sp, #36	; 0x24
   11914:	add	r0, sp, #40	; 0x28
   11918:	bl	12118 <__assert_fail@plt+0x11bc>
   1191c:	add	r1, sp, #120	; 0x78
   11920:	mov	r9, r0
   11924:	mov	r0, r4
   11928:	bl	12118 <__assert_fail@plt+0x11bc>
   1192c:	ldr	r5, [sp, #36]	; 0x24
   11930:	cmp	r5, #0
   11934:	bne	119a0 <__assert_fail@plt+0xa44>
   11938:	ldr	r3, [sp, #120]	; 0x78
   1193c:	cmp	r3, #1
   11940:	bne	119e8 <__assert_fail@plt+0xa8c>
   11944:	bl	10e48 <__ctype_b_loc@plt>
   11948:	ldr	r9, [r0]
   1194c:	sub	r9, r9, #2
   11950:	ldrh	r3, [r9, #2]!
   11954:	tst	r3, #512	; 0x200
   11958:	beq	11968 <__assert_fail@plt+0xa0c>
   1195c:	mov	r0, r5
   11960:	bl	10efc <toupper@plt>
   11964:	strb	r0, [r7, r5]
   11968:	add	r5, r5, #1
   1196c:	cmp	r5, #256	; 0x100
   11970:	bne	11950 <__assert_fail@plt+0x9f4>
   11974:	ldr	r3, [sp, #44]	; 0x2c
   11978:	ldr	r1, [r4, #4]
   1197c:	mvn	r2, #0
   11980:	ldr	r3, [r3, #4]
   11984:	ldr	r1, [r1, #4]
   11988:	str	r3, [sp, #44]	; 0x2c
   1198c:	mvn	r3, #0
   11990:	str	r1, [r4, #4]
   11994:	strd	r2, [sp, #48]	; 0x30
   11998:	strd	r2, [r4, #8]
   1199c:	b	11910 <__assert_fail@plt+0x9b4>
   119a0:	cmp	r5, #1
   119a4:	bne	119e8 <__assert_fail@plt+0xa8c>
   119a8:	ldr	r5, [sp, #120]	; 0x78
   119ac:	cmp	r5, #0
   119b0:	bne	119e8 <__assert_fail@plt+0xa8c>
   119b4:	bl	10e48 <__ctype_b_loc@plt>
   119b8:	ldr	r9, [r0]
   119bc:	sub	r9, r9, #2
   119c0:	ldrh	r3, [r9, #2]!
   119c4:	tst	r3, #256	; 0x100
   119c8:	beq	119d8 <__assert_fail@plt+0xa7c>
   119cc:	mov	r0, r5
   119d0:	bl	10d4c <tolower@plt>
   119d4:	strb	r0, [r7, r5]
   119d8:	add	r5, r5, #1
   119dc:	cmp	r5, #256	; 0x100
   119e0:	bne	119c0 <__assert_fail@plt+0xa64>
   119e4:	b	11974 <__assert_fail@plt+0xa18>
   119e8:	cmn	r9, #1
   119ec:	cmnne	r0, #1
   119f0:	beq	11a0c <__assert_fail@plt+0xab0>
   119f4:	ldr	r3, [sp, #120]	; 0x78
   119f8:	add	r9, r8, r9
   119fc:	cmp	r3, #2
   11a00:	strb	r0, [r9, #256]	; 0x100
   11a04:	beq	11910 <__assert_fail@plt+0x9b4>
   11a08:	b	11974 <__assert_fail@plt+0xa18>
   11a0c:	cmn	r9, #1
   11a10:	beq	118a0 <__assert_fail@plt+0x944>
   11a14:	ldrb	r3, [r6, #779]	; 0x30b
   11a18:	cmp	r3, #0
   11a1c:	bne	118a0 <__assert_fail@plt+0x944>
   11a20:	ldr	r3, [pc, #220]	; 11b04 <__assert_fail@plt+0xba8>
   11a24:	ldr	r2, [pc, #224]	; 11b0c <__assert_fail@plt+0xbb0>
   11a28:	ldr	r1, [pc, #152]	; 11ac8 <__assert_fail@plt+0xb6c>
   11a2c:	ldr	r0, [pc, #220]	; 11b10 <__assert_fail@plt+0xbb4>
   11a30:	b	11484 <__assert_fail@plt+0x528>
   11a34:	mov	r0, r4
   11a38:	ldr	r2, [pc, #212]	; 11b14 <__assert_fail@plt+0xbb8>
   11a3c:	mov	r1, #0
   11a40:	bl	12538 <__assert_fail@plt+0x15dc>
   11a44:	ldr	r0, [pc, #204]	; 11b18 <__assert_fail@plt+0xbbc>
   11a48:	b	11704 <__assert_fail@plt+0x7a8>
   11a4c:	mov	r0, #1
   11a50:	add	sp, sp, #380	; 0x17c
   11a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a58:	andeq	r6, r1, r5, lsl #31
   11a5c:	strdeq	r6, [r1], -r6	; <UNPREDICTABLE>
   11a60:	andeq	r6, r1, r3, ror #29
   11a64:	strheq	r3, [r1], -r4
   11a68:	andeq	r6, r1, r0, ror #4
   11a6c:	andeq	sl, r2, r9, asr r1
   11a70:	andeq	r7, r1, sp, lsl r0
   11a74:	andeq	r8, r2, r8, asr #2
   11a78:	andeq	r7, r1, r5, lsr #32
   11a7c:	andeq	r7, r1, r0, lsl r0
   11a80:	andeq	r8, r2, ip, asr r1
   11a84:	strdeq	r8, [r2], -r4
   11a88:	ldrdeq	r6, [r1], -pc	; <UNPREDICTABLE>
   11a8c:	andeq	r6, r1, pc, ror #10
   11a90:	andeq	r7, r1, lr
   11a94:	andeq	r7, r1, r5, lsr r0
   11a98:	andeq	r8, r2, r0, asr r1
   11a9c:	andeq	r6, r1, r6, lsl #31
   11aa0:	andeq	r6, r1, sl, asr #31
   11aa4:	andeq	r7, r1, pc, lsl #11
   11aa8:	andeq	r7, r1, lr, asr #32
   11aac:	andeq	r7, r1, pc, asr r0
   11ab0:	andeq	r7, r1, r5, lsr #1
   11ab4:	ldrdeq	r7, [r1], -r9
   11ab8:	andeq	r7, r1, lr, lsl #2
   11abc:	andeq	r7, r1, fp, asr #2
   11ac0:	ldrdeq	r6, [r1], -r0
   11ac4:	andeq	r0, r0, r8, asr #9
   11ac8:	andeq	r6, r1, r8, lsl #6
   11acc:	ldrdeq	r7, [r1], -fp
   11ad0:	andeq	r7, r1, fp, lsr #3
   11ad4:	andeq	r7, r1, r0, lsl r2
   11ad8:	andeq	r7, r1, r4, asr #4
   11adc:	andeq	r7, r1, sp, lsr #5
   11ae0:	andeq	r8, r2, r8, asr r1
   11ae4:	ldrdeq	r2, [r1], -r0
   11ae8:	andeq	r7, r1, fp, lsl #7
   11aec:	andeq	r7, r1, r8, lsl r3
   11af0:	andeq	r8, r2, r1, ror #2
   11af4:	andeq	r8, r2, r1, ror #6
   11af8:	andeq	r6, r1, sp, lsr #7
   11afc:	andeq	r2, r1, r8, lsl r4
   11b00:	andeq	r8, r2, r1, ror #4
   11b04:	andeq	r6, r1, r6, ror #5
   11b08:	andeq	r7, r1, r7, asr r3
   11b0c:	andeq	r0, r0, r5, ror #14
   11b10:	andeq	r7, r1, r1, ror r3
   11b14:	andeq	sl, r2, r1, ror #6
   11b18:	muleq	r1, ip, r4
   11b1c:	mov	fp, #0
   11b20:	mov	lr, #0
   11b24:	pop	{r1}		; (ldr r1, [sp], #4)
   11b28:	mov	r2, sp
   11b2c:	push	{r2}		; (str r2, [sp, #-4]!)
   11b30:	push	{r0}		; (str r0, [sp, #-4]!)
   11b34:	ldr	ip, [pc, #16]	; 11b4c <__assert_fail@plt+0xbf0>
   11b38:	push	{ip}		; (str ip, [sp, #-4]!)
   11b3c:	ldr	r0, [pc, #12]	; 11b50 <__assert_fail@plt+0xbf4>
   11b40:	ldr	r3, [pc, #12]	; 11b54 <__assert_fail@plt+0xbf8>
   11b44:	bl	10e18 <__libc_start_main@plt>
   11b48:	bl	10f44 <abort@plt>
   11b4c:	andeq	r6, r1, ip, asr r1
   11b50:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   11b54:	strdeq	r6, [r1], -ip
   11b58:	ldr	r3, [pc, #20]	; 11b74 <__assert_fail@plt+0xc18>
   11b5c:	ldr	r2, [pc, #20]	; 11b78 <__assert_fail@plt+0xc1c>
   11b60:	add	r3, pc, r3
   11b64:	ldr	r2, [r3, r2]
   11b68:	cmp	r2, #0
   11b6c:	bxeq	lr
   11b70:	b	10e30 <__gmon_start__@plt>
   11b74:	muleq	r1, r8, r4
   11b78:	andeq	r0, r0, r8, ror #1
   11b7c:	ldr	r3, [pc, #28]	; 11ba0 <__assert_fail@plt+0xc44>
   11b80:	ldr	r0, [pc, #28]	; 11ba4 <__assert_fail@plt+0xc48>
   11b84:	sub	r3, r3, r0
   11b88:	cmp	r3, #6
   11b8c:	bxls	lr
   11b90:	ldr	r3, [pc, #16]	; 11ba8 <__assert_fail@plt+0xc4c>
   11b94:	cmp	r3, #0
   11b98:	bxeq	lr
   11b9c:	bx	r3
   11ba0:	andeq	r8, r2, pc, lsr r1
   11ba4:	andeq	r8, r2, ip, lsr r1
   11ba8:	andeq	r0, r0, r0
   11bac:	ldr	r1, [pc, #36]	; 11bd8 <__assert_fail@plt+0xc7c>
   11bb0:	ldr	r0, [pc, #36]	; 11bdc <__assert_fail@plt+0xc80>
   11bb4:	sub	r1, r1, r0
   11bb8:	asr	r1, r1, #2
   11bbc:	add	r1, r1, r1, lsr #31
   11bc0:	asrs	r1, r1, #1
   11bc4:	bxeq	lr
   11bc8:	ldr	r3, [pc, #16]	; 11be0 <__assert_fail@plt+0xc84>
   11bcc:	cmp	r3, #0
   11bd0:	bxeq	lr
   11bd4:	bx	r3
   11bd8:	andeq	r8, r2, ip, lsr r1
   11bdc:	andeq	r8, r2, ip, lsr r1
   11be0:	andeq	r0, r0, r0
   11be4:	push	{r4, lr}
   11be8:	ldr	r4, [pc, #24]	; 11c08 <__assert_fail@plt+0xcac>
   11bec:	ldrb	r3, [r4]
   11bf0:	cmp	r3, #0
   11bf4:	popne	{r4, pc}
   11bf8:	bl	11b7c <__assert_fail@plt+0xc20>
   11bfc:	mov	r3, #1
   11c00:	strb	r3, [r4]
   11c04:	pop	{r4, pc}
   11c08:	andeq	r8, r2, r0, ror #2
   11c0c:	ldr	r0, [pc, #40]	; 11c3c <__assert_fail@plt+0xce0>
   11c10:	ldr	r3, [r0]
   11c14:	cmp	r3, #0
   11c18:	bne	11c20 <__assert_fail@plt+0xcc4>
   11c1c:	b	11bac <__assert_fail@plt+0xc50>
   11c20:	ldr	r3, [pc, #24]	; 11c40 <__assert_fail@plt+0xce4>
   11c24:	cmp	r3, #0
   11c28:	beq	11c1c <__assert_fail@plt+0xcc0>
   11c2c:	push	{r4, lr}
   11c30:	blx	r3
   11c34:	pop	{r4, lr}
   11c38:	b	11bac <__assert_fail@plt+0xc50>
   11c3c:	andeq	r7, r2, r4, lsl pc
   11c40:	andeq	r0, r0, r0
   11c44:	ldr	r3, [r0]
   11c48:	ldrb	r3, [r3, r1]
   11c4c:	cmp	r3, r2
   11c50:	movne	r0, #0
   11c54:	ldreq	r3, [r0, #4]
   11c58:	ldrbeq	r0, [r3, r1]
   11c5c:	eoreq	r0, r0, #1
   11c60:	and	r0, r0, #1
   11c64:	bx	lr
   11c68:	push	{r0, r1, r2, r4, r5, lr}
   11c6c:	mov	r5, r0
   11c70:	mov	r0, #5
   11c74:	bl	14ddc <__assert_fail@plt+0x3e80>
   11c78:	mov	r4, r0
   11c7c:	bl	10e48 <__ctype_b_loc@plt>
   11c80:	lsl	r3, r5, #1
   11c84:	ldr	r2, [r0]
   11c88:	ldrh	r3, [r2, r3]
   11c8c:	tst	r3, #16384	; 0x4000
   11c90:	movne	r3, #0
   11c94:	strbne	r5, [r4]
   11c98:	strbne	r3, [r4, #1]
   11c9c:	bne	11cb8 <__assert_fail@plt+0xd5c>
   11ca0:	str	r5, [sp]
   11ca4:	ldr	r3, [pc, #24]	; 11cc4 <__assert_fail@plt+0xd68>
   11ca8:	mov	r2, #5
   11cac:	mov	r1, #1
   11cb0:	mov	r0, r4
   11cb4:	bl	10e84 <__sprintf_chk@plt>
   11cb8:	mov	r0, r4
   11cbc:	add	sp, sp, #12
   11cc0:	pop	{r4, r5, pc}
   11cc4:	andeq	r6, r1, fp, ror #5
   11cc8:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   11ccc:	mov	r6, r1
   11cd0:	mov	r5, r0
   11cd4:	mov	r1, #4
   11cd8:	add	r0, r6, #1
   11cdc:	bl	14eb4 <__assert_fail@plt+0x3f58>
   11ce0:	ldr	r9, [pc, #212]	; 11dbc <__assert_fail@plt+0xe60>
   11ce4:	ldr	sl, [pc, #212]	; 11dc0 <__assert_fail@plt+0xe64>
   11ce8:	add	r6, r5, r6
   11cec:	mov	r7, r0
   11cf0:	mov	r8, r0
   11cf4:	cmp	r5, r6
   11cf8:	bne	11d08 <__assert_fail@plt+0xdac>
   11cfc:	mov	r0, r7
   11d00:	add	sp, sp, #16
   11d04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d08:	ldrb	r4, [r5], #1
   11d0c:	cmp	r4, #10
   11d10:	moveq	r1, r9
   11d14:	beq	11dac <__assert_fail@plt+0xe50>
   11d18:	bhi	11d80 <__assert_fail@plt+0xe24>
   11d1c:	cmp	r4, #8
   11d20:	ldreq	r1, [pc, #156]	; 11dc4 <__assert_fail@plt+0xe68>
   11d24:	beq	11dac <__assert_fail@plt+0xe50>
   11d28:	ldrhi	r1, [pc, #152]	; 11dc8 <__assert_fail@plt+0xe6c>
   11d2c:	bhi	11dac <__assert_fail@plt+0xe50>
   11d30:	cmp	r4, #7
   11d34:	ldreq	r1, [pc, #144]	; 11dcc <__assert_fail@plt+0xe70>
   11d38:	beq	11dac <__assert_fail@plt+0xe50>
   11d3c:	bl	10e48 <__ctype_b_loc@plt>
   11d40:	lsl	r3, r4, #1
   11d44:	ldr	r2, [r0]
   11d48:	ldrh	r3, [r2, r3]
   11d4c:	tst	r3, #16384	; 0x4000
   11d50:	movne	r3, #0
   11d54:	strbne	r4, [sp, #8]
   11d58:	strbne	r3, [sp, #9]
   11d5c:	bne	11d78 <__assert_fail@plt+0xe1c>
   11d60:	str	r4, [sp]
   11d64:	ldr	r3, [pc, #100]	; 11dd0 <__assert_fail@plt+0xe74>
   11d68:	mov	r2, #5
   11d6c:	mov	r1, #1
   11d70:	add	r0, sp, #8
   11d74:	bl	10e84 <__sprintf_chk@plt>
   11d78:	add	r1, sp, #8
   11d7c:	b	11dac <__assert_fail@plt+0xe50>
   11d80:	cmp	r4, #12
   11d84:	moveq	r1, sl
   11d88:	beq	11dac <__assert_fail@plt+0xe50>
   11d8c:	ldrcc	r1, [pc, #64]	; 11dd4 <__assert_fail@plt+0xe78>
   11d90:	bcc	11dac <__assert_fail@plt+0xe50>
   11d94:	cmp	r4, #13
   11d98:	ldreq	r1, [pc, #56]	; 11dd8 <__assert_fail@plt+0xe7c>
   11d9c:	beq	11dac <__assert_fail@plt+0xe50>
   11da0:	cmp	r4, #92	; 0x5c
   11da4:	ldreq	r1, [pc, #48]	; 11ddc <__assert_fail@plt+0xe80>
   11da8:	bne	11d3c <__assert_fail@plt+0xde0>
   11dac:	mov	r0, r8
   11db0:	bl	10d7c <stpcpy@plt>
   11db4:	mov	r8, r0
   11db8:	b	11cf4 <__assert_fail@plt+0xd98>
   11dbc:	strdeq	r6, [r1], -ip
   11dc0:	strdeq	r6, [r1], -r9
   11dc4:	strdeq	r6, [r1], -r6	; <UNPREDICTABLE>
   11dc8:	andeq	r6, r1, r2, lsl #6
   11dcc:	strdeq	r6, [r1], -r3
   11dd0:	andeq	r6, r1, fp, ror #5
   11dd4:	andeq	r6, r1, r5, lsl #6
   11dd8:	strdeq	r6, [r1], -pc	; <UNPREDICTABLE>
   11ddc:	strdeq	r6, [r1], -r1
   11de0:	push	{r4, lr}
   11de4:	mov	r4, r1
   11de8:	cmp	r0, #11
   11dec:	ldrls	pc, [pc, r0, lsl #2]
   11df0:	b	11f4c <__assert_fail@plt+0xff0>
   11df4:	andeq	r1, r1, r4, lsr #28
   11df8:	andeq	r1, r1, r4, asr #28
   11dfc:	andeq	r1, r1, ip, asr lr
   11e00:	andeq	r1, r1, r4, ror lr
   11e04:	andeq	r1, r1, ip, lsl #29
   11e08:	andeq	r1, r1, r4, lsr #29
   11e0c:			; <UNDEFINED> instruction: 0x00011ebc
   11e10:	ldrdeq	r1, [r1], -r4
   11e14:	andeq	r1, r1, ip, ror #29
   11e18:	andeq	r1, r1, r4, lsl #30
   11e1c:	andeq	r1, r1, ip, lsl pc
   11e20:	andeq	r1, r1, r4, lsr pc
   11e24:	bl	10e48 <__ctype_b_loc@plt>
   11e28:	lsl	r4, r4, #1
   11e2c:	ldr	r3, [r0]
   11e30:	ldrh	r0, [r3, r4]
   11e34:	and	r0, r0, #8
   11e38:	adds	r0, r0, #0
   11e3c:	movne	r0, #1
   11e40:	pop	{r4, pc}
   11e44:	bl	10e48 <__ctype_b_loc@plt>
   11e48:	lsl	r4, r4, #1
   11e4c:	ldr	r3, [r0]
   11e50:	ldrh	r0, [r3, r4]
   11e54:	and	r0, r0, #1024	; 0x400
   11e58:	b	11e38 <__assert_fail@plt+0xedc>
   11e5c:	bl	10e48 <__ctype_b_loc@plt>
   11e60:	lsl	r4, r4, #1
   11e64:	ldr	r3, [r0]
   11e68:	ldrh	r0, [r3, r4]
   11e6c:	and	r0, r0, #1
   11e70:	b	11e38 <__assert_fail@plt+0xedc>
   11e74:	bl	10e48 <__ctype_b_loc@plt>
   11e78:	lsl	r4, r4, #1
   11e7c:	ldr	r3, [r0]
   11e80:	ldrh	r0, [r3, r4]
   11e84:	and	r0, r0, #2
   11e88:	b	11e38 <__assert_fail@plt+0xedc>
   11e8c:	bl	10e48 <__ctype_b_loc@plt>
   11e90:	lsl	r4, r4, #1
   11e94:	ldr	r3, [r0]
   11e98:	ldrh	r0, [r3, r4]
   11e9c:	and	r0, r0, #2048	; 0x800
   11ea0:	b	11e38 <__assert_fail@plt+0xedc>
   11ea4:	bl	10e48 <__ctype_b_loc@plt>
   11ea8:	lsl	r4, r4, #1
   11eac:	ldr	r3, [r0]
   11eb0:	ldrh	r0, [r3, r4]
   11eb4:	and	r0, r0, #32768	; 0x8000
   11eb8:	b	11e38 <__assert_fail@plt+0xedc>
   11ebc:	bl	10e48 <__ctype_b_loc@plt>
   11ec0:	lsl	r4, r4, #1
   11ec4:	ldr	r3, [r0]
   11ec8:	ldrh	r0, [r3, r4]
   11ecc:	and	r0, r0, #512	; 0x200
   11ed0:	b	11e38 <__assert_fail@plt+0xedc>
   11ed4:	bl	10e48 <__ctype_b_loc@plt>
   11ed8:	lsl	r4, r4, #1
   11edc:	ldr	r3, [r0]
   11ee0:	ldrh	r0, [r3, r4]
   11ee4:	and	r0, r0, #16384	; 0x4000
   11ee8:	b	11e38 <__assert_fail@plt+0xedc>
   11eec:	bl	10e48 <__ctype_b_loc@plt>
   11ef0:	lsl	r4, r4, #1
   11ef4:	ldr	r3, [r0]
   11ef8:	ldrh	r0, [r3, r4]
   11efc:	and	r0, r0, #4
   11f00:	b	11e38 <__assert_fail@plt+0xedc>
   11f04:	bl	10e48 <__ctype_b_loc@plt>
   11f08:	lsl	r4, r4, #1
   11f0c:	ldr	r3, [r0]
   11f10:	ldrh	r0, [r3, r4]
   11f14:	and	r0, r0, #8192	; 0x2000
   11f18:	b	11e38 <__assert_fail@plt+0xedc>
   11f1c:	bl	10e48 <__ctype_b_loc@plt>
   11f20:	lsl	r4, r4, #1
   11f24:	ldr	r3, [r0]
   11f28:	ldrh	r0, [r3, r4]
   11f2c:	and	r0, r0, #256	; 0x100
   11f30:	b	11e38 <__assert_fail@plt+0xedc>
   11f34:	bl	10e48 <__ctype_b_loc@plt>
   11f38:	lsl	r4, r4, #1
   11f3c:	ldr	r3, [r0]
   11f40:	ldrh	r0, [r3, r4]
   11f44:	and	r0, r0, #4096	; 0x1000
   11f48:	b	11e38 <__assert_fail@plt+0xedc>
   11f4c:	bl	10f44 <abort@plt>
   11f50:	mov	r3, #0
   11f54:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f58:	mov	r6, r0
   11f5c:	str	r3, [r0, #24]
   11f60:	strb	r3, [r0, #32]
   11f64:	strb	r3, [r0, #34]	; 0x22
   11f68:	strb	r3, [r0, #33]	; 0x21
   11f6c:	ldr	r3, [r0]
   11f70:	mov	r8, #0
   11f74:	mov	r9, #0
   11f78:	ldr	r7, [r3, #4]
   11f7c:	mov	sl, #1
   11f80:	cmp	r7, #0
   11f84:	bne	11f94 <__assert_fail@plt+0x1038>
   11f88:	strd	r8, [r6, #16]
   11f8c:	add	sp, sp, #12
   11f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f94:	ldr	r3, [r7]
   11f98:	cmp	r3, #4
   11f9c:	ldrls	pc, [pc, r3, lsl #2]
   11fa0:	b	120e4 <__assert_fail@plt+0x1188>
   11fa4:	andeq	r2, r1, r8, ror #1
   11fa8:			; <UNDEFINED> instruction: 0x00011fb8
   11fac:	andeq	r2, r1, r8, lsr r0
   11fb0:	muleq	r1, r0, r0
   11fb4:	andeq	r2, r1, r8, asr #1
   11fb8:	ldrb	r4, [r7, #9]
   11fbc:	ldrb	r3, [r7, #8]
   11fc0:	cmp	r4, r3
   11fc4:	bcs	11fdc <__assert_fail@plt+0x1080>
   11fc8:	ldr	r3, [pc, #308]	; 12104 <__assert_fail@plt+0x11a8>
   11fcc:	ldr	r2, [pc, #308]	; 12108 <__assert_fail@plt+0x11ac>
   11fd0:	ldr	r1, [pc, #308]	; 1210c <__assert_fail@plt+0x11b0>
   11fd4:	ldr	r0, [pc, #308]	; 12110 <__assert_fail@plt+0x11b4>
   11fd8:	bl	10f5c <__assert_fail@plt>
   11fdc:	sub	r4, r4, r3
   11fe0:	add	r4, r4, #1
   11fe4:	asr	r5, r4, #31
   11fe8:	adds	r4, r4, r8
   11fec:	adc	r5, r5, r9
   11ff0:	cmp	r9, r5
   11ff4:	and	r3, r4, r5
   11ff8:	cmpeq	r8, r4
   11ffc:	movhi	r2, #1
   12000:	movls	r2, #0
   12004:	cmn	r3, #1
   12008:	movne	r3, #0
   1200c:	moveq	r3, #1
   12010:	orrs	r3, r2, r3
   12014:	beq	120f4 <__assert_fail@plt+0x1198>
   12018:	mov	r2, #5
   1201c:	ldr	r1, [pc, #240]	; 12114 <__assert_fail@plt+0x11b8>
   12020:	mov	r0, #0
   12024:	bl	10d94 <dcgettext@plt>
   12028:	mov	r1, #0
   1202c:	mov	r2, r0
   12030:	mov	r0, #1
   12034:	bl	10e00 <error@plt>
   12038:	strb	sl, [r6, #33]	; 0x21
   1203c:	ldr	r3, [r7, #8]
   12040:	mov	fp, #0
   12044:	mov	r4, #0
   12048:	mov	r5, #0
   1204c:	mov	r0, r3
   12050:	uxtb	r1, fp
   12054:	str	r3, [sp, #4]
   12058:	bl	11de0 <__assert_fail@plt+0xe84>
   1205c:	ldr	r3, [sp, #4]
   12060:	cmp	r0, #0
   12064:	beq	12070 <__assert_fail@plt+0x1114>
   12068:	adds	r4, r4, #1
   1206c:	adc	r5, r5, #0
   12070:	add	fp, fp, #1
   12074:	cmp	fp, #256	; 0x100
   12078:	bne	1204c <__assert_fail@plt+0x10f0>
   1207c:	cmp	r3, #6
   12080:	beq	11fe8 <__assert_fail@plt+0x108c>
   12084:	cmp	r3, #10
   12088:	strbne	sl, [r6, #34]	; 0x22
   1208c:	b	11fe8 <__assert_fail@plt+0x108c>
   12090:	ldrb	r2, [r7, #8]
   12094:	mov	r3, #0
   12098:	mov	r4, #0
   1209c:	mov	r5, #0
   120a0:	uxtb	r1, r3
   120a4:	cmp	r2, r1
   120a8:	bne	120b4 <__assert_fail@plt+0x1158>
   120ac:	adds	r4, r4, #1
   120b0:	adc	r5, r5, #0
   120b4:	add	r3, r3, #1
   120b8:	cmp	r3, #256	; 0x100
   120bc:	bne	120a0 <__assert_fail@plt+0x1144>
   120c0:	strb	sl, [r6, #32]
   120c4:	b	11fe8 <__assert_fail@plt+0x108c>
   120c8:	ldrd	r4, [r7, #16]
   120cc:	orrs	r3, r4, r5
   120d0:	ldreq	r3, [r6, #24]
   120d4:	streq	r7, [r6, #28]
   120d8:	addeq	r3, r3, #1
   120dc:	streq	r3, [r6, #24]
   120e0:	b	11fe8 <__assert_fail@plt+0x108c>
   120e4:	bl	10f44 <abort@plt>
   120e8:	mov	r4, #1
   120ec:	mov	r5, #0
   120f0:	b	11fe8 <__assert_fail@plt+0x108c>
   120f4:	ldr	r7, [r7, #4]
   120f8:	mov	r8, r4
   120fc:	mov	r9, r5
   12100:	b	11f80 <__assert_fail@plt+0x1024>
   12104:	andeq	r6, r1, r4, lsl #3
   12108:	strdeq	r0, [r0], -r1
   1210c:	andeq	r6, r1, r8, lsl #6
   12110:	andeq	r6, r1, r1, lsl r3
   12114:	andeq	r6, r1, pc, lsr r3
   12118:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1211c:	mov	ip, r1
   12120:	mov	r4, r0
   12124:	mov	lr, #2
   12128:	mvn	r8, #1
   1212c:	mvn	r9, #0
   12130:	mvn	r6, #0
   12134:	mvn	r7, #0
   12138:	ldrd	r2, [r4, #8]
   1213c:	cmp	ip, #0
   12140:	strne	lr, [ip]
   12144:	cmp	r3, r9
   12148:	cmpeq	r2, r8
   1214c:	ldreq	r3, [r4]
   12150:	ldreq	r3, [r3, #4]
   12154:	strdeq	r6, [r4, #8]
   12158:	streq	r3, [r4, #4]
   1215c:	ldr	r5, [r4, #4]
   12160:	cmp	r5, #0
   12164:	beq	122f8 <__assert_fail@plt+0x139c>
   12168:	ldr	r3, [r5]
   1216c:	cmp	r3, #4
   12170:	ldrls	pc, [pc, r3, lsl #2]
   12174:	b	122f4 <__assert_fail@plt+0x1398>
   12178:	andeq	r2, r1, ip, lsl #5
   1217c:	andeq	r2, r1, ip, lsl #3
   12180:	ldrdeq	r2, [r1], -r0
   12184:	andeq	r2, r1, ip, lsl #5
   12188:	andeq	r2, r1, r4, lsr #5
   1218c:	ldrd	r2, [r4, #8]
   12190:	cmp	r3, r7
   12194:	cmpeq	r2, r6
   12198:	moveq	r3, #0
   1219c:	ldrbeq	r2, [r5, #8]
   121a0:	beq	121ac <__assert_fail@plt+0x1250>
   121a4:	adds	r2, r2, #1
   121a8:	adc	r3, r3, #0
   121ac:	strd	r2, [r4, #8]
   121b0:	ldrd	r2, [r4, #8]
   121b4:	ldrb	r0, [r5, #9]
   121b8:	mov	r1, #0
   121bc:	cmp	r3, r1
   121c0:	mov	r8, r2
   121c4:	cmpeq	r2, r0
   121c8:	bne	1229c <__assert_fail@plt+0x1340>
   121cc:	b	12274 <__assert_fail@plt+0x1318>
   121d0:	cmp	ip, #0
   121d4:	beq	121ec <__assert_fail@plt+0x1290>
   121d8:	ldr	r3, [r5, #8]
   121dc:	cmp	r3, #6
   121e0:	beq	12240 <__assert_fail@plt+0x12e4>
   121e4:	cmp	r3, #10
   121e8:	beq	1224c <__assert_fail@plt+0x12f0>
   121ec:	ldrd	r2, [r4, #8]
   121f0:	mvn	r1, #0
   121f4:	mvn	r0, #0
   121f8:	cmp	r3, r1
   121fc:	cmpeq	r2, r0
   12200:	bne	12308 <__assert_fail@plt+0x13ac>
   12204:	ldr	r7, [r5, #8]
   12208:	mov	r6, #0
   1220c:	uxtb	r1, r6
   12210:	mov	r0, r7
   12214:	bl	11de0 <__assert_fail@plt+0xe84>
   12218:	cmp	r0, #0
   1221c:	bne	12300 <__assert_fail@plt+0x13a4>
   12220:	add	r6, r6, #1
   12224:	cmp	r6, #256	; 0x100
   12228:	bne	1220c <__assert_fail@plt+0x12b0>
   1222c:	ldr	r3, [pc, #276]	; 12348 <__assert_fail@plt+0x13ec>
   12230:	ldr	r2, [pc, #276]	; 1234c <__assert_fail@plt+0x13f0>
   12234:	ldr	r1, [pc, #276]	; 12350 <__assert_fail@plt+0x13f4>
   12238:	ldr	r0, [pc, #276]	; 12354 <__assert_fail@plt+0x13f8>
   1223c:	b	12338 <__assert_fail@plt+0x13dc>
   12240:	mov	r3, #0
   12244:	str	r3, [ip]
   12248:	b	121ec <__assert_fail@plt+0x1290>
   1224c:	mov	r3, #1
   12250:	b	12244 <__assert_fail@plt+0x12e8>
   12254:	uxtb	r1, r6
   12258:	mov	r0, r7
   1225c:	bl	11de0 <__assert_fail@plt+0xe84>
   12260:	cmp	r0, #0
   12264:	bne	1233c <__assert_fail@plt+0x13e0>
   12268:	add	r6, r6, #1
   1226c:	cmp	r6, #255	; 0xff
   12270:	ble	12254 <__assert_fail@plt+0x12f8>
   12274:	ldr	r3, [r5, #4]
   12278:	mvn	r2, #0
   1227c:	str	r3, [r4, #4]
   12280:	mvn	r3, #0
   12284:	strd	r2, [r4, #8]
   12288:	b	1229c <__assert_fail@plt+0x1340>
   1228c:	ldr	r3, [r5, #4]
   12290:	ldrb	r8, [r5, #8]
   12294:	strd	r6, [r4, #8]
   12298:	str	r3, [r4, #4]
   1229c:	mov	r0, r8
   122a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   122a4:	ldrd	r0, [r5, #16]
   122a8:	orrs	r3, r0, r1
   122ac:	ldreq	r3, [r5, #4]
   122b0:	strdeq	r6, [r4, #8]
   122b4:	streq	r3, [r4, #4]
   122b8:	beq	12138 <__assert_fail@plt+0x11dc>
   122bc:	ldrd	r2, [r4, #8]
   122c0:	cmp	r3, r7
   122c4:	cmpeq	r2, r6
   122c8:	moveq	r2, #0
   122cc:	moveq	r3, #0
   122d0:	strdeq	r2, [r4, #8]
   122d4:	ldrd	r2, [r4, #8]
   122d8:	adds	r2, r2, #1
   122dc:	adc	r3, r3, #0
   122e0:	cmp	r1, r3
   122e4:	strd	r2, [r4, #8]
   122e8:	cmpeq	r0, r2
   122ec:	ldrb	r8, [r5, #8]
   122f0:	b	121c8 <__assert_fail@plt+0x126c>
   122f4:	bl	10f44 <abort@plt>
   122f8:	mvn	r8, #0
   122fc:	b	1229c <__assert_fail@plt+0x1340>
   12300:	asr	r7, r6, #31
   12304:	strd	r6, [r4, #8]
   12308:	ldr	r8, [r4, #8]
   1230c:	ldr	r7, [r5, #8]
   12310:	uxtb	r1, r8
   12314:	mov	r0, r7
   12318:	bl	11de0 <__assert_fail@plt+0xe84>
   1231c:	cmp	r0, #0
   12320:	addne	r6, r8, #1
   12324:	bne	1226c <__assert_fail@plt+0x1310>
   12328:	ldr	r3, [pc, #24]	; 12348 <__assert_fail@plt+0x13ec>
   1232c:	ldr	r2, [pc, #36]	; 12358 <__assert_fail@plt+0x13fc>
   12330:	ldr	r1, [pc, #24]	; 12350 <__assert_fail@plt+0x13f4>
   12334:	ldr	r0, [pc, #32]	; 1235c <__assert_fail@plt+0x1400>
   12338:	bl	10f5c <__assert_fail@plt>
   1233c:	asr	r7, r6, #31
   12340:	strd	r6, [r4, #8]
   12344:	b	1229c <__assert_fail@plt+0x1340>
   12348:	muleq	r1, r3, r1
   1234c:	andeq	r0, r0, r7, lsr r4
   12350:	andeq	r6, r1, r8, lsl #6
   12354:	andeq	r6, r1, fp, lsl #7
   12358:	andeq	r0, r0, sl, lsr r4
   1235c:	andeq	r6, r1, sl, asr r3
   12360:	push	{r4, r5, r6, lr}
   12364:	mov	r2, #42	; 0x2a
   12368:	mov	r5, r0
   1236c:	bl	11c44 <__assert_fail@plt+0xce8>
   12370:	cmp	r0, #0
   12374:	movne	r4, r1
   12378:	addne	r1, r4, #1
   1237c:	ldrne	r2, [r5, #8]
   12380:	bne	123c0 <__assert_fail@plt+0x1464>
   12384:	pop	{r4, r5, r6, pc}
   12388:	ldr	r3, [r5]
   1238c:	ldrb	r3, [r3, r1]
   12390:	sub	r3, r3, #48	; 0x30
   12394:	cmp	r3, #9
   12398:	bls	123ac <__assert_fail@plt+0x1450>
   1239c:	mov	r0, r5
   123a0:	mov	r2, #93	; 0x5d
   123a4:	pop	{r4, r5, r6, lr}
   123a8:	b	11c44 <__assert_fail@plt+0xce8>
   123ac:	ldr	r3, [r5, #4]
   123b0:	ldrb	r3, [r3, r1]
   123b4:	cmp	r3, #0
   123b8:	bne	1239c <__assert_fail@plt+0x1440>
   123bc:	add	r1, r1, #1
   123c0:	cmp	r1, r2
   123c4:	bcc	12388 <__assert_fail@plt+0x142c>
   123c8:	mov	r0, #0
   123cc:	pop	{r4, r5, r6, pc}
   123d0:	push	{r4, lr}
   123d4:	mov	r2, r1
   123d8:	mov	r1, r0
   123dc:	mov	r0, #0
   123e0:	bl	14864 <__assert_fail@plt+0x3908>
   123e4:	cmn	r0, #1
   123e8:	popne	{r4, pc}
   123ec:	bl	10e78 <__errno_location@plt>
   123f0:	mov	r2, #5
   123f4:	ldr	r1, [pc, #24]	; 12414 <__assert_fail@plt+0x14b8>
   123f8:	ldr	r4, [r0]
   123fc:	mov	r0, #0
   12400:	bl	10d94 <dcgettext@plt>
   12404:	mov	r1, r4
   12408:	mov	r2, r0
   1240c:	mov	r0, #1
   12410:	bl	10e00 <error@plt>
   12414:	muleq	r1, r7, r3
   12418:	push	{r4, r5, r6, lr}
   1241c:	mov	r4, r0
   12420:	ldr	r5, [pc, #112]	; 12498 <__assert_fail@plt+0x153c>
   12424:	mov	r6, r1
   12428:	mov	r1, r6
   1242c:	mov	r0, r4
   12430:	bl	123d0 <__assert_fail@plt+0x1474>
   12434:	subs	r2, r0, #0
   12438:	beq	12490 <__assert_fail@plt+0x1534>
   1243c:	mov	r0, #0
   12440:	ldrb	r3, [r4, r0]
   12444:	ldrb	r3, [r5, r3]
   12448:	cmp	r3, #0
   1244c:	bne	1245c <__assert_fail@plt+0x1500>
   12450:	add	r0, r0, #1
   12454:	cmp	r2, r0
   12458:	bne	12440 <__assert_fail@plt+0x14e4>
   1245c:	add	r3, r0, #1
   12460:	cmp	r3, r2
   12464:	bcc	12474 <__assert_fail@plt+0x1518>
   12468:	cmp	r0, #0
   1246c:	beq	12428 <__assert_fail@plt+0x14cc>
   12470:	pop	{r4, r5, r6, pc}
   12474:	ldrb	r1, [r4, r3]
   12478:	add	r3, r3, #1
   1247c:	ldrb	ip, [r5, r1]
   12480:	cmp	ip, #0
   12484:	strbeq	r1, [r4, r0]
   12488:	addeq	r0, r0, #1
   1248c:	b	12460 <__assert_fail@plt+0x1504>
   12490:	mov	r0, r2
   12494:	pop	{r4, r5, r6, pc}
   12498:	andeq	r8, r2, r1, ror #2
   1249c:	push	{r4, lr}
   124a0:	mov	r4, r0
   124a4:	bl	123d0 <__assert_fail@plt+0x1474>
   124a8:	ldr	ip, [pc, #36]	; 124d4 <__assert_fail@plt+0x1578>
   124ac:	mov	r3, r4
   124b0:	add	r1, r4, r0
   124b4:	cmp	r3, r1
   124b8:	bne	124c0 <__assert_fail@plt+0x1564>
   124bc:	pop	{r4, pc}
   124c0:	ldrb	r2, [r3]
   124c4:	add	r2, ip, r2
   124c8:	ldrb	r2, [r2, #256]	; 0x100
   124cc:	strb	r2, [r3], #1
   124d0:	b	124b4 <__assert_fail@plt+0x1558>
   124d4:	andeq	r8, r2, r1, ror #2
   124d8:	push	{r4, r5, r6, lr}
   124dc:	mov	r4, r0
   124e0:	mov	r0, #24
   124e4:	mov	r5, r1
   124e8:	bl	14ddc <__assert_fail@plt+0x3e80>
   124ec:	mov	r3, #0
   124f0:	str	r3, [r0, #4]
   124f4:	str	r3, [r0]
   124f8:	ldr	r3, [r4]
   124fc:	strb	r5, [r0, #8]
   12500:	cmp	r3, #0
   12504:	bne	1251c <__assert_fail@plt+0x15c0>
   12508:	ldr	r3, [pc, #24]	; 12528 <__assert_fail@plt+0x15cc>
   1250c:	ldr	r2, [pc, #24]	; 1252c <__assert_fail@plt+0x15d0>
   12510:	ldr	r1, [pc, #24]	; 12530 <__assert_fail@plt+0x15d4>
   12514:	ldr	r0, [pc, #24]	; 12534 <__assert_fail@plt+0x15d8>
   12518:	bl	10f5c <__assert_fail@plt>
   1251c:	str	r0, [r3, #4]
   12520:	str	r0, [r4]
   12524:	pop	{r4, r5, r6, pc}
   12528:			; <UNDEFINED> instruction: 0x000161b1
   1252c:	andeq	r0, r0, r9, lsl #5
   12530:	andeq	r6, r1, r8, lsl #6
   12534:	andeq	r6, r1, r2, lsr #7
   12538:	push	{r4, r5, r6, r7, r8, lr}
   1253c:	mvn	r3, #0
   12540:	mov	r4, r2
   12544:	mov	r5, r0
   12548:	mvn	r2, #1
   1254c:	mov	r6, r1
   12550:	mov	r7, #0
   12554:	mov	r8, #1
   12558:	strd	r2, [r0, #8]
   1255c:	mov	r1, r7
   12560:	mov	r0, r5
   12564:	bl	12118 <__assert_fail@plt+0x11bc>
   12568:	cmn	r0, #1
   1256c:	bne	12598 <__assert_fail@plt+0x163c>
   12570:	cmp	r6, #0
   12574:	popeq	{r4, r5, r6, r7, r8, pc}
   12578:	sub	r3, r4, #1
   1257c:	add	r4, r4, #255	; 0xff
   12580:	ldrb	r2, [r3, #1]
   12584:	eor	r2, r2, #1
   12588:	strb	r2, [r3, #1]!
   1258c:	cmp	r3, r4
   12590:	bne	12580 <__assert_fail@plt+0x1624>
   12594:	pop	{r4, r5, r6, r7, r8, pc}
   12598:	strb	r8, [r4, r0]
   1259c:	b	1255c <__assert_fail@plt+0x1600>
   125a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   125a4:	mov	r5, #0
   125a8:	ldr	r8, [pc, #328]	; 126f8 <__assert_fail@plt+0x179c>
   125ac:	ldr	r9, [pc, #328]	; 126fc <__assert_fail@plt+0x17a0>
   125b0:	mov	sl, r0
   125b4:	mvn	r6, #-2147483648	; 0x80000000
   125b8:	mov	r0, r5
   125bc:	cmp	r0, r5
   125c0:	bcc	125dc <__assert_fail@plt+0x1680>
   125c4:	mov	r1, #8192	; 0x2000
   125c8:	ldr	r0, [pc, #304]	; 12700 <__assert_fail@plt+0x17a4>
   125cc:	blx	sl
   125d0:	subs	r5, r0, #0
   125d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   125d8:	mov	r0, #0
   125dc:	cmn	r6, #-2147483647	; 0x80000001
   125e0:	mov	r4, r0
   125e4:	ldreq	r2, [pc, #276]	; 12700 <__assert_fail@plt+0x17a4>
   125e8:	beq	12610 <__assert_fail@plt+0x16b4>
   125ec:	ldr	r2, [pc, #268]	; 12700 <__assert_fail@plt+0x17a4>
   125f0:	cmp	r5, r4
   125f4:	bls	12668 <__assert_fail@plt+0x170c>
   125f8:	ldrb	r3, [r4, r2]
   125fc:	cmp	r3, r6
   12600:	beq	12670 <__assert_fail@plt+0x1714>
   12604:	mvn	r6, #-2147483648	; 0x80000000
   12608:	b	12668 <__assert_fail@plt+0x170c>
   1260c:	add	r4, r4, #2
   12610:	cmp	r4, r5
   12614:	bcs	12678 <__assert_fail@plt+0x171c>
   12618:	ldrb	r3, [r4, r2]
   1261c:	add	r3, r8, r3
   12620:	ldrb	r3, [r3, #520]	; 0x208
   12624:	cmp	r3, #0
   12628:	beq	1260c <__assert_fail@plt+0x16b0>
   1262c:	add	r2, r9, r4
   12630:	sub	r3, r4, r0
   12634:	cmp	r4, #0
   12638:	ldrb	r6, [r2, #512]	; 0x200
   1263c:	add	r7, r3, #1
   12640:	beq	12650 <__assert_fail@plt+0x16f4>
   12644:	ldrb	r2, [r2, #511]	; 0x1ff
   12648:	cmp	r6, r2
   1264c:	moveq	r7, r3
   12650:	cmp	r7, #0
   12654:	add	r4, r4, #1
   12658:	bne	126ac <__assert_fail@plt+0x1750>
   1265c:	b	125ec <__assert_fail@plt+0x1690>
   12660:	cmn	r6, #-2147483647	; 0x80000001
   12664:	bne	125ec <__assert_fail@plt+0x1690>
   12668:	mov	r0, r4
   1266c:	b	125bc <__assert_fail@plt+0x1660>
   12670:	add	r4, r4, #1
   12674:	b	125f0 <__assert_fail@plt+0x1694>
   12678:	bne	126a4 <__assert_fail@plt+0x1748>
   1267c:	sub	r3, r4, #1
   12680:	add	r2, r9, r3
   12684:	ldrb	r2, [r2, #512]	; 0x200
   12688:	add	r2, r8, r2
   1268c:	ldrb	r2, [r2, #520]	; 0x208
   12690:	cmp	r2, #0
   12694:	beq	126a4 <__assert_fail@plt+0x1748>
   12698:	cmp	r4, r3
   1269c:	mov	r4, r3
   126a0:	bhi	1262c <__assert_fail@plt+0x16d0>
   126a4:	subs	r7, r5, r0
   126a8:	beq	12668 <__assert_fail@plt+0x170c>
   126ac:	ldr	r3, [pc, #80]	; 12704 <__assert_fail@plt+0x17a8>
   126b0:	ldr	ip, [pc, #72]	; 12700 <__assert_fail@plt+0x17a4>
   126b4:	mov	r2, r7
   126b8:	ldr	r3, [r3]
   126bc:	mov	r1, #1
   126c0:	add	r0, ip, r0
   126c4:	bl	10d64 <fwrite_unlocked@plt>
   126c8:	cmp	r0, r7
   126cc:	beq	12660 <__assert_fail@plt+0x1704>
   126d0:	bl	10e78 <__errno_location@plt>
   126d4:	mov	r2, #5
   126d8:	ldr	r1, [pc, #40]	; 12708 <__assert_fail@plt+0x17ac>
   126dc:	ldr	r4, [r0]
   126e0:	mov	r0, #0
   126e4:	bl	10d94 <dcgettext@plt>
   126e8:	mov	r1, r4
   126ec:	mov	r2, r0
   126f0:	mov	r0, #1
   126f4:	bl	10e00 <error@plt>
   126f8:	andeq	sl, r2, r9, asr r1
   126fc:	andeq	r8, r2, r1, ror #2
   12700:	andeq	r8, r2, r1, ror #6
   12704:	andeq	r8, r2, ip, asr r1
   12708:	andeq	r6, r1, sp, lsr #7
   1270c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12710:	sub	sp, sp, #84	; 0x54
   12714:	mov	r6, r1
   12718:	mov	r8, r0
   1271c:	bl	10e60 <strlen@plt>
   12720:	mov	sl, #1
   12724:	mov	r7, #0
   12728:	mov	r4, r0
   1272c:	bl	14ddc <__assert_fail@plt+0x3e80>
   12730:	mov	r1, #1
   12734:	str	r0, [sp, #68]	; 0x44
   12738:	mov	r0, r4
   1273c:	bl	151a8 <__assert_fail@plt+0x424c>
   12740:	str	r0, [sp, #72]	; 0x48
   12744:	ldrb	r4, [r8, r7]
   12748:	sub	r9, sl, #1
   1274c:	cmp	r4, #0
   12750:	bne	12794 <__assert_fail@plt+0x1838>
   12754:	add	r7, sp, #80	; 0x50
   12758:	str	r9, [sp, #76]	; 0x4c
   1275c:	ldr	sl, [r7, #-12]!
   12760:	ldr	r3, [sp, #76]	; 0x4c
   12764:	add	r8, r4, #2
   12768:	cmp	r8, r3
   1276c:	str	r3, [sp, #32]
   12770:	bcc	12920 <__assert_fail@plt+0x19c4>
   12774:	add	r4, sl, r4
   12778:	add	r6, r6, #4
   1277c:	ldr	r2, [sp, #32]
   12780:	sub	r3, r4, sl
   12784:	cmp	r2, r3
   12788:	bhi	12cb8 <__assert_fail@plt+0x1d5c>
   1278c:	mov	r4, #1
   12790:	b	12d10 <__assert_fail@plt+0x1db4>
   12794:	cmp	r4, #92	; 0x5c
   12798:	bne	127f8 <__assert_fail@plt+0x189c>
   1279c:	add	fp, r7, #1
   127a0:	ldr	r3, [sp, #72]	; 0x48
   127a4:	ldrb	r5, [r8, fp]
   127a8:	mov	r2, #1
   127ac:	strb	r2, [r3, r9]
   127b0:	cmp	r5, #98	; 0x62
   127b4:	moveq	r4, #8
   127b8:	beq	127f4 <__assert_fail@plt+0x1898>
   127bc:	bhi	1280c <__assert_fail@plt+0x18b0>
   127c0:	cmp	r5, #55	; 0x37
   127c4:	bhi	127e0 <__assert_fail@plt+0x1884>
   127c8:	cmp	r5, #48	; 0x30
   127cc:	bcs	12854 <__assert_fail@plt+0x18f8>
   127d0:	cmp	r5, #0
   127d4:	beq	128ec <__assert_fail@plt+0x1990>
   127d8:	mov	r4, r5
   127dc:	b	127f4 <__assert_fail@plt+0x1898>
   127e0:	cmp	r5, #92	; 0x5c
   127e4:	beq	127d8 <__assert_fail@plt+0x187c>
   127e8:	cmp	r5, #97	; 0x61
   127ec:	moveq	r4, #7
   127f0:	bne	127d8 <__assert_fail@plt+0x187c>
   127f4:	add	r7, r7, #1
   127f8:	ldr	r3, [sp, #68]	; 0x44
   127fc:	add	r7, r7, #1
   12800:	add	sl, sl, #1
   12804:	strb	r4, [r3, r9]
   12808:	b	12744 <__assert_fail@plt+0x17e8>
   1280c:	cmp	r5, #114	; 0x72
   12810:	moveq	r4, #13
   12814:	beq	127f4 <__assert_fail@plt+0x1898>
   12818:	bhi	12838 <__assert_fail@plt+0x18dc>
   1281c:	cmp	r5, #102	; 0x66
   12820:	moveq	r4, #12
   12824:	beq	127f4 <__assert_fail@plt+0x1898>
   12828:	cmp	r5, #110	; 0x6e
   1282c:	moveq	r4, #10
   12830:	beq	127f4 <__assert_fail@plt+0x1898>
   12834:	b	127d8 <__assert_fail@plt+0x187c>
   12838:	cmp	r5, #116	; 0x74
   1283c:	moveq	r4, #9
   12840:	beq	127f4 <__assert_fail@plt+0x1898>
   12844:	cmp	r5, #118	; 0x76
   12848:	moveq	r4, #11
   1284c:	beq	127f4 <__assert_fail@plt+0x1898>
   12850:	b	127d8 <__assert_fail@plt+0x187c>
   12854:	sub	r5, r5, #48	; 0x30
   12858:	uxtb	r4, r5
   1285c:	add	r5, r7, #2
   12860:	ldrb	r3, [r8, r5]
   12864:	sub	r3, r3, #48	; 0x30
   12868:	cmp	r3, #7
   1286c:	bhi	127f4 <__assert_fail@plt+0x1898>
   12870:	add	r7, r7, #3
   12874:	add	r4, r3, r4, lsl #3
   12878:	ldrb	r3, [r8, r7]
   1287c:	and	r4, r4, #255	; 0xff
   12880:	sub	r3, r3, #48	; 0x30
   12884:	cmp	r3, #7
   12888:	bhi	128e4 <__assert_fail@plt+0x1988>
   1288c:	mov	r2, #8
   12890:	smlabb	r2, r2, r4, r3
   12894:	cmp	r2, #255	; 0xff
   12898:	addle	r4, r3, r4, lsl #3
   1289c:	andle	r4, r4, #255	; 0xff
   128a0:	movle	r7, r5
   128a4:	ble	127f4 <__assert_fail@plt+0x1898>
   128a8:	mov	r2, #5
   128ac:	ldr	r1, [pc, #1288]	; 12dbc <__assert_fail@plt+0x1e60>
   128b0:	mov	r0, #0
   128b4:	bl	10d94 <dcgettext@plt>
   128b8:	ldrb	r1, [r8, r7]
   128bc:	ldrb	r3, [r8, fp]
   128c0:	ldrb	r2, [r8, r5]
   128c4:	str	r1, [sp, #16]
   128c8:	stmib	sp, {r1, r3}
   128cc:	mov	r1, #0
   128d0:	str	r2, [sp, #12]
   128d4:	str	r2, [sp]
   128d8:	mov	r2, r0
   128dc:	mov	r0, r1
   128e0:	bl	10e00 <error@plt>
   128e4:	mov	r7, fp
   128e8:	b	127f4 <__assert_fail@plt+0x1898>
   128ec:	mov	r2, #5
   128f0:	ldr	r1, [pc, #1224]	; 12dc0 <__assert_fail@plt+0x1e64>
   128f4:	mov	r0, r5
   128f8:	str	r3, [sp, #28]
   128fc:	bl	10d94 <dcgettext@plt>
   12900:	mov	r1, r5
   12904:	sub	r7, r7, #1
   12908:	mov	r2, r0
   1290c:	mov	r0, r5
   12910:	bl	10e00 <error@plt>
   12914:	ldr	r3, [sp, #28]
   12918:	strb	r5, [r3, r9]
   1291c:	b	127f4 <__assert_fail@plt+0x1898>
   12920:	mov	r2, #91	; 0x5b
   12924:	mov	r1, r4
   12928:	mov	r0, r7
   1292c:	bl	11c44 <__assert_fail@plt+0xce8>
   12930:	add	fp, r4, #1
   12934:	cmp	r0, #0
   12938:	beq	129d8 <__assert_fail@plt+0x1a7c>
   1293c:	mov	r2, #58	; 0x3a
   12940:	mov	r1, fp
   12944:	mov	r0, r7
   12948:	bl	11c44 <__assert_fail@plt+0xce8>
   1294c:	cmp	r0, #0
   12950:	bne	1296c <__assert_fail@plt+0x1a10>
   12954:	mov	r2, #61	; 0x3d
   12958:	mov	r1, fp
   1295c:	mov	r0, r7
   12960:	bl	11c44 <__assert_fail@plt+0xce8>
   12964:	cmp	r0, #0
   12968:	beq	12998 <__assert_fail@plt+0x1a3c>
   1296c:	ldr	r3, [sp, #68]	; 0x44
   12970:	ldr	r2, [sp, #72]	; 0x48
   12974:	ldr	r0, [sp, #32]
   12978:	ldrb	r1, [sl, fp]
   1297c:	add	r3, r3, r8
   12980:	add	r2, r2, r8
   12984:	sub	r0, r0, #1
   12988:	str	r8, [sp, #28]
   1298c:	ldr	ip, [sp, #28]
   12990:	cmp	ip, r0
   12994:	bcc	12a4c <__assert_fail@plt+0x1af0>
   12998:	mov	r2, #42	; 0x2a
   1299c:	mov	r1, r8
   129a0:	mov	r0, r7
   129a4:	bl	11c44 <__assert_fail@plt+0xce8>
   129a8:	cmp	r0, #0
   129ac:	beq	129d8 <__assert_fail@plt+0x1a7c>
   129b0:	add	r2, r4, #3
   129b4:	ldr	r1, [sp, #72]	; 0x48
   129b8:	ldr	r3, [sp, #68]	; 0x44
   129bc:	mov	r5, r2
   129c0:	ldr	r0, [sp, #32]
   129c4:	cmp	r0, r5
   129c8:	beq	129d8 <__assert_fail@plt+0x1a7c>
   129cc:	ldrb	r0, [r1, r5]
   129d0:	cmp	r0, #0
   129d4:	beq	12b7c <__assert_fail@plt+0x1c20>
   129d8:	mov	r2, #45	; 0x2d
   129dc:	mov	r1, fp
   129e0:	mov	r0, r7
   129e4:	bl	11c44 <__assert_fail@plt+0xce8>
   129e8:	cmp	r0, #0
   129ec:	beq	12ca8 <__assert_fail@plt+0x1d4c>
   129f0:	ldrb	r9, [sl, r4]
   129f4:	ldrb	r5, [sl, r8]
   129f8:	cmp	r9, r5
   129fc:	bls	12c68 <__assert_fail@plt+0x1d0c>
   12a00:	mov	r0, r9
   12a04:	bl	11c68 <__assert_fail@plt+0xd0c>
   12a08:	mov	r6, r0
   12a0c:	mov	r0, r5
   12a10:	bl	11c68 <__assert_fail@plt+0xd0c>
   12a14:	mov	r2, #5
   12a18:	ldr	r1, [pc, #932]	; 12dc4 <__assert_fail@plt+0x1e68>
   12a1c:	mov	r4, r0
   12a20:	mov	r0, #0
   12a24:	bl	10d94 <dcgettext@plt>
   12a28:	mov	r1, #0
   12a2c:	str	r4, [sp]
   12a30:	mov	r3, r6
   12a34:	mov	r2, r0
   12a38:	mov	r0, r1
   12a3c:	bl	10e00 <error@plt>
   12a40:	mov	r0, r6
   12a44:	bl	131d4 <__assert_fail@plt+0x2278>
   12a48:	b	12db0 <__assert_fail@plt+0x1e54>
   12a4c:	ldrb	ip, [r3], #1
   12a50:	cmp	r1, ip
   12a54:	bne	12a7c <__assert_fail@plt+0x1b20>
   12a58:	ldrb	ip, [r3]
   12a5c:	cmp	ip, #93	; 0x5d
   12a60:	bne	12a7c <__assert_fail@plt+0x1b20>
   12a64:	ldrb	ip, [r2]
   12a68:	cmp	ip, #0
   12a6c:	bne	12a7c <__assert_fail@plt+0x1b20>
   12a70:	ldrb	r9, [r2, #1]
   12a74:	cmp	r9, #0
   12a78:	beq	12cc8 <__assert_fail@plt+0x1d6c>
   12a7c:	ldr	ip, [sp, #28]
   12a80:	add	r2, r2, #1
   12a84:	add	ip, ip, #1
   12a88:	str	ip, [sp, #28]
   12a8c:	b	1298c <__assert_fail@plt+0x1a30>
   12a90:	cmp	r1, #58	; 0x3a
   12a94:	bne	12b2c <__assert_fail@plt+0x1bd0>
   12a98:	ldr	r3, [pc, #808]	; 12dc8 <__assert_fail@plt+0x1e6c>
   12a9c:	mov	r2, r5
   12aa0:	ldr	r0, [sp, #36]	; 0x24
   12aa4:	ldr	r3, [r3, r9, lsl #2]
   12aa8:	mov	r1, r3
   12aac:	str	r3, [sp, #44]	; 0x2c
   12ab0:	bl	10f38 <strncmp@plt>
   12ab4:	subs	r3, r0, #0
   12ab8:	str	r3, [sp, #40]	; 0x28
   12abc:	bne	12ad4 <__assert_fail@plt+0x1b78>
   12ac0:	ldr	r3, [sp, #44]	; 0x2c
   12ac4:	mov	r0, r3
   12ac8:	bl	10e60 <strlen@plt>
   12acc:	cmp	r5, r0
   12ad0:	beq	12d2c <__assert_fail@plt+0x1dd0>
   12ad4:	add	r9, r9, #1
   12ad8:	cmp	r9, #12
   12adc:	bne	12a98 <__assert_fail@plt+0x1b3c>
   12ae0:	mov	r1, r8
   12ae4:	mov	r0, r7
   12ae8:	bl	12360 <__assert_fail@plt+0x1404>
   12aec:	subs	r9, r0, #0
   12af0:	bne	12998 <__assert_fail@plt+0x1a3c>
   12af4:	mov	r1, r5
   12af8:	ldr	r0, [sp, #36]	; 0x24
   12afc:	bl	11cc8 <__assert_fail@plt+0xd6c>
   12b00:	ldr	r1, [pc, #708]	; 12dcc <__assert_fail@plt+0x1e70>
   12b04:	mov	r2, #5
   12b08:	mov	r4, r0
   12b0c:	mov	r0, #0
   12b10:	bl	10d94 <dcgettext@plt>
   12b14:	mov	r5, r0
   12b18:	mov	r0, r4
   12b1c:	bl	14858 <__assert_fail@plt+0x38fc>
   12b20:	mov	r2, r5
   12b24:	mov	r3, r0
   12b28:	b	12da4 <__assert_fail@plt+0x1e48>
   12b2c:	cmp	r5, #1
   12b30:	bne	12d68 <__assert_fail@plt+0x1e0c>
   12b34:	mov	r0, #24
   12b38:	bl	14ddc <__assert_fail@plt+0x3e80>
   12b3c:	mov	r3, #3
   12b40:	str	r3, [r0]
   12b44:	ldrb	r3, [sl, r8]
   12b48:	str	r9, [r0, #4]
   12b4c:	strb	r3, [r0, #8]
   12b50:	ldr	r3, [r6, #4]
   12b54:	cmp	r3, #0
   12b58:	ldreq	r3, [pc, #624]	; 12dd0 <__assert_fail@plt+0x1e74>
   12b5c:	ldreq	r2, [pc, #624]	; 12dd4 <__assert_fail@plt+0x1e78>
   12b60:	beq	12d5c <__assert_fail@plt+0x1e00>
   12b64:	str	r0, [r3, #4]
   12b68:	ldr	r3, [sp, #28]
   12b6c:	str	r0, [r6, #4]
   12b70:	add	fp, r3, #2
   12b74:	mov	r4, fp
   12b78:	b	12760 <__assert_fail@plt+0x1804>
   12b7c:	ldrb	ip, [r3, r5]
   12b80:	cmp	ip, #93	; 0x5d
   12b84:	bne	12c50 <__assert_fail@plt+0x1cf4>
   12b88:	mvn	r1, #1
   12b8c:	sub	r1, r1, fp
   12b90:	adds	r8, r1, r5
   12b94:	ldrb	r4, [r3, fp]
   12b98:	bne	12bd8 <__assert_fail@plt+0x1c7c>
   12b9c:	mov	r2, #0
   12ba0:	mov	r3, #0
   12ba4:	strd	r2, [sp, #56]	; 0x38
   12ba8:	mov	r0, #24
   12bac:	ldrd	r8, [sp, #56]	; 0x38
   12bb0:	bl	14ddc <__assert_fail@plt+0x3e80>
   12bb4:	mov	r3, #0
   12bb8:	mov	r2, #4
   12bbc:	stm	r0, {r2, r3}
   12bc0:	ldr	r3, [r6, #4]
   12bc4:	strb	r4, [r0, #8]
   12bc8:	cmp	r3, #0
   12bcc:	strd	r8, [r0, #16]
   12bd0:	bne	12c58 <__assert_fail@plt+0x1cfc>
   12bd4:	bl	10f68 <__assert_fail@plt+0xc>
   12bd8:	add	r9, r3, r2
   12bdc:	ldrb	r2, [r3, r2]
   12be0:	add	r1, sp, #52	; 0x34
   12be4:	str	r0, [sp]
   12be8:	cmp	r2, #48	; 0x30
   12bec:	moveq	r2, #8
   12bf0:	movne	r2, #10
   12bf4:	add	r3, sp, #56	; 0x38
   12bf8:	mov	r0, r9
   12bfc:	bl	15380 <__assert_fail@plt+0x4424>
   12c00:	cmp	r0, #0
   12c04:	beq	12c24 <__assert_fail@plt+0x1cc8>
   12c08:	mov	r1, r8
   12c0c:	mov	r0, r9
   12c10:	bl	11cc8 <__assert_fail@plt+0xd6c>
   12c14:	mov	r2, #5
   12c18:	ldr	r1, [pc, #440]	; 12dd8 <__assert_fail@plt+0x1e7c>
   12c1c:	mov	r4, r0
   12c20:	b	12b0c <__assert_fail@plt+0x1bb0>
   12c24:	ldrd	r2, [sp, #56]	; 0x38
   12c28:	mvn	r1, #0
   12c2c:	mvn	r0, #0
   12c30:	cmp	r3, r1
   12c34:	cmpeq	r2, r0
   12c38:	beq	12c08 <__assert_fail@plt+0x1cac>
   12c3c:	ldr	r2, [sp, #52]	; 0x34
   12c40:	add	r3, r9, r8
   12c44:	cmp	r2, r3
   12c48:	beq	12ba8 <__assert_fail@plt+0x1c4c>
   12c4c:	b	12c08 <__assert_fail@plt+0x1cac>
   12c50:	add	r5, r5, #1
   12c54:	b	129c0 <__assert_fail@plt+0x1a64>
   12c58:	str	r0, [r3, #4]
   12c5c:	add	fp, r5, #1
   12c60:	str	r0, [r6, #4]
   12c64:	b	12b74 <__assert_fail@plt+0x1c18>
   12c68:	mov	r0, #24
   12c6c:	bl	14ddc <__assert_fail@plt+0x3e80>
   12c70:	mov	r3, #0
   12c74:	mov	r1, #1
   12c78:	stm	r0, {r1, r3}
   12c7c:	ldr	r3, [r6, #4]
   12c80:	strb	r9, [r0, #8]
   12c84:	cmp	r3, #0
   12c88:	strb	r5, [r0, #9]
   12c8c:	ldreq	r3, [pc, #328]	; 12ddc <__assert_fail@plt+0x1e80>
   12c90:	ldreq	r2, [pc, #328]	; 12de0 <__assert_fail@plt+0x1e84>
   12c94:	beq	12d5c <__assert_fail@plt+0x1e00>
   12c98:	str	r0, [r3, #4]
   12c9c:	add	fp, r4, #3
   12ca0:	str	r0, [r6, #4]
   12ca4:	b	12b74 <__assert_fail@plt+0x1c18>
   12ca8:	ldrb	r1, [sl, r4]
   12cac:	add	r0, r6, #4
   12cb0:	bl	124d8 <__assert_fail@plt+0x157c>
   12cb4:	b	12b74 <__assert_fail@plt+0x1c18>
   12cb8:	ldrb	r1, [r4], #1
   12cbc:	mov	r0, r6
   12cc0:	bl	124d8 <__assert_fail@plt+0x157c>
   12cc4:	b	1277c <__assert_fail@plt+0x1820>
   12cc8:	add	r3, sl, r8
   12ccc:	mvn	r5, #1
   12cd0:	str	r3, [sp, #36]	; 0x24
   12cd4:	ldr	r3, [sp, #28]
   12cd8:	sub	r5, r5, r4
   12cdc:	adds	r5, r5, r3
   12ce0:	bne	12a90 <__assert_fail@plt+0x1b34>
   12ce4:	cmp	r1, #58	; 0x3a
   12ce8:	mov	r2, #5
   12cec:	ldreq	r1, [pc, #240]	; 12de4 <__assert_fail@plt+0x1e88>
   12cf0:	ldrne	r1, [pc, #240]	; 12de8 <__assert_fail@plt+0x1e8c>
   12cf4:	mov	r0, r5
   12cf8:	bl	10d94 <dcgettext@plt>
   12cfc:	mov	r1, r5
   12d00:	mov	r2, r0
   12d04:	mov	r0, r5
   12d08:	bl	10e00 <error@plt>
   12d0c:	mov	r4, #0
   12d10:	ldr	r0, [sp, #68]	; 0x44
   12d14:	bl	131d4 <__assert_fail@plt+0x2278>
   12d18:	ldr	r0, [sp, #72]	; 0x48
   12d1c:	bl	131d4 <__assert_fail@plt+0x2278>
   12d20:	mov	r0, r4
   12d24:	add	sp, sp, #84	; 0x54
   12d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d2c:	mov	r0, #24
   12d30:	bl	14ddc <__assert_fail@plt+0x3e80>
   12d34:	ldr	r3, [sp, #40]	; 0x28
   12d38:	mov	r2, #2
   12d3c:	str	r3, [r0, #4]
   12d40:	ldr	r3, [r6, #4]
   12d44:	str	r2, [r0]
   12d48:	cmp	r3, #0
   12d4c:	str	r9, [r0, #8]
   12d50:	bne	12b64 <__assert_fail@plt+0x1c08>
   12d54:	ldr	r3, [pc, #144]	; 12dec <__assert_fail@plt+0x1e90>
   12d58:	ldr	r2, [pc, #144]	; 12df0 <__assert_fail@plt+0x1e94>
   12d5c:	ldr	r1, [pc, #144]	; 12df4 <__assert_fail@plt+0x1e98>
   12d60:	ldr	r0, [pc, #144]	; 12df8 <__assert_fail@plt+0x1e9c>
   12d64:	bl	10f5c <__assert_fail@plt>
   12d68:	mov	r1, r8
   12d6c:	mov	r0, r7
   12d70:	bl	12360 <__assert_fail@plt+0x1404>
   12d74:	subs	r9, r0, #0
   12d78:	bne	12998 <__assert_fail@plt+0x1a3c>
   12d7c:	mov	r1, r5
   12d80:	ldr	r0, [sp, #36]	; 0x24
   12d84:	bl	11cc8 <__assert_fail@plt+0xd6c>
   12d88:	mov	r2, #5
   12d8c:	ldr	r1, [pc, #104]	; 12dfc <__assert_fail@plt+0x1ea0>
   12d90:	mov	r4, r0
   12d94:	mov	r0, r9
   12d98:	bl	10d94 <dcgettext@plt>
   12d9c:	mov	r3, r4
   12da0:	mov	r2, r0
   12da4:	mov	r1, #0
   12da8:	mov	r0, r1
   12dac:	bl	10e00 <error@plt>
   12db0:	mov	r0, r4
   12db4:	bl	131d4 <__assert_fail@plt+0x2278>
   12db8:	b	12d0c <__assert_fail@plt+0x1db0>
   12dbc:			; <UNDEFINED> instruction: 0x000163b9
   12dc0:	andeq	r6, r1, sp, lsl r4
   12dc4:	andeq	r6, r1, ip, lsr #10
   12dc8:	andeq	r6, r1, r4, asr #3
   12dcc:	andeq	r6, r1, sp, lsr #9
   12dd0:	andeq	r6, r1, r6, lsl #4
   12dd4:	andeq	r0, r0, r7, ror #5
   12dd8:	andeq	r6, r1, r1, lsl #10
   12ddc:	andeq	r6, r1, r9, lsl r2
   12de0:	andeq	r0, r0, r7, lsr #5
   12de4:	andeq	r6, r1, lr, asr r4
   12de8:	andeq	r6, r1, r2, lsl #9
   12dec:	strdeq	r6, [r1], -r4
   12df0:			; <UNDEFINED> instruction: 0x000002bd
   12df4:	andeq	r6, r1, r8, lsl #6
   12df8:	andeq	r6, r1, r2, lsr #7
   12dfc:	andeq	r6, r1, r8, asr #9
   12e00:	subs	r5, r0, #0
   12e04:	push	{r7, lr}
   12e08:	sub	sp, sp, #56	; 0x38
   12e0c:	ldr	r4, [pc, #548]	; 13038 <__assert_fail@plt+0x20dc>
   12e10:	beq	12e48 <__assert_fail@plt+0x1eec>
   12e14:	ldr	r3, [pc, #544]	; 1303c <__assert_fail@plt+0x20e0>
   12e18:	mov	r2, #5
   12e1c:	ldr	r1, [pc, #540]	; 13040 <__assert_fail@plt+0x20e4>
   12e20:	mov	r0, #0
   12e24:	ldr	r6, [r3]
   12e28:	bl	10d94 <dcgettext@plt>
   12e2c:	ldr	r3, [r4]
   12e30:	mov	r1, #1
   12e34:	mov	r2, r0
   12e38:	mov	r0, r6
   12e3c:	bl	10ecc <__fprintf_chk@plt>
   12e40:	mov	r0, r5
   12e44:	bl	10e54 <exit@plt>
   12e48:	mov	r2, #5
   12e4c:	ldr	r1, [pc, #496]	; 13044 <__assert_fail@plt+0x20e8>
   12e50:	bl	10d94 <dcgettext@plt>
   12e54:	ldr	r2, [r4]
   12e58:	ldr	r4, [pc, #488]	; 13048 <__assert_fail@plt+0x20ec>
   12e5c:	ldr	r8, [pc, #488]	; 1304c <__assert_fail@plt+0x20f0>
   12e60:	mov	r6, r5
   12e64:	mov	r1, r0
   12e68:	mov	r0, #1
   12e6c:	bl	10ea8 <__printf_chk@plt>
   12e70:	mov	r2, #5
   12e74:	ldr	r1, [pc, #468]	; 13050 <__assert_fail@plt+0x20f4>
   12e78:	mov	r0, r5
   12e7c:	bl	10d94 <dcgettext@plt>
   12e80:	ldr	r1, [r4]
   12e84:	bl	10ce0 <fputs_unlocked@plt>
   12e88:	mov	r2, #5
   12e8c:	ldr	r1, [pc, #448]	; 13054 <__assert_fail@plt+0x20f8>
   12e90:	mov	r0, r5
   12e94:	bl	10d94 <dcgettext@plt>
   12e98:	ldr	r1, [r4]
   12e9c:	bl	10ce0 <fputs_unlocked@plt>
   12ea0:	mov	r2, #5
   12ea4:	ldr	r1, [pc, #428]	; 13058 <__assert_fail@plt+0x20fc>
   12ea8:	mov	r0, r5
   12eac:	bl	10d94 <dcgettext@plt>
   12eb0:	ldr	r1, [r4]
   12eb4:	bl	10ce0 <fputs_unlocked@plt>
   12eb8:	mov	r2, #5
   12ebc:	ldr	r1, [pc, #408]	; 1305c <__assert_fail@plt+0x2100>
   12ec0:	mov	r0, r5
   12ec4:	bl	10d94 <dcgettext@plt>
   12ec8:	ldr	r1, [r4]
   12ecc:	bl	10ce0 <fputs_unlocked@plt>
   12ed0:	mov	r2, #5
   12ed4:	ldr	r1, [pc, #388]	; 13060 <__assert_fail@plt+0x2104>
   12ed8:	mov	r0, r5
   12edc:	bl	10d94 <dcgettext@plt>
   12ee0:	ldr	r1, [r4]
   12ee4:	bl	10ce0 <fputs_unlocked@plt>
   12ee8:	mov	r2, #5
   12eec:	ldr	r1, [pc, #368]	; 13064 <__assert_fail@plt+0x2108>
   12ef0:	mov	r0, r5
   12ef4:	bl	10d94 <dcgettext@plt>
   12ef8:	ldr	r1, [r4]
   12efc:	bl	10ce0 <fputs_unlocked@plt>
   12f00:	mov	r2, #5
   12f04:	ldr	r1, [pc, #348]	; 13068 <__assert_fail@plt+0x210c>
   12f08:	mov	r0, r5
   12f0c:	bl	10d94 <dcgettext@plt>
   12f10:	ldr	r1, [r4]
   12f14:	bl	10ce0 <fputs_unlocked@plt>
   12f18:	ldr	lr, [pc, #332]	; 1306c <__assert_fail@plt+0x2110>
   12f1c:	mov	ip, sp
   12f20:	ldm	lr!, {r0, r1, r2, r3}
   12f24:	stmia	ip!, {r0, r1, r2, r3}
   12f28:	ldm	lr!, {r0, r1, r2, r3}
   12f2c:	stmia	ip!, {r0, r1, r2, r3}
   12f30:	ldm	lr!, {r0, r1, r2, r3}
   12f34:	stmia	ip!, {r0, r1, r2, r3}
   12f38:	ldm	lr, {r0, r1}
   12f3c:	stm	ip, {r0, r1}
   12f40:	ldr	r1, [sp, r6]
   12f44:	add	r7, sp, r6
   12f48:	cmp	r1, #0
   12f4c:	bne	12ff0 <__assert_fail@plt+0x2094>
   12f50:	ldr	r6, [r7, #4]
   12f54:	ldr	r7, [pc, #240]	; 1304c <__assert_fail@plt+0x20f0>
   12f58:	cmp	r6, #0
   12f5c:	mov	r2, #5
   12f60:	ldr	r1, [pc, #264]	; 13070 <__assert_fail@plt+0x2114>
   12f64:	mov	r0, #0
   12f68:	moveq	r6, r7
   12f6c:	bl	10d94 <dcgettext@plt>
   12f70:	ldr	r3, [pc, #252]	; 13074 <__assert_fail@plt+0x2118>
   12f74:	ldr	r2, [pc, #252]	; 13078 <__assert_fail@plt+0x211c>
   12f78:	mov	r1, r0
   12f7c:	mov	r0, #1
   12f80:	bl	10ea8 <__printf_chk@plt>
   12f84:	mov	r1, #0
   12f88:	mov	r0, #5
   12f8c:	bl	10ef0 <setlocale@plt>
   12f90:	cmp	r0, #0
   12f94:	bne	13008 <__assert_fail@plt+0x20ac>
   12f98:	mov	r2, #5
   12f9c:	ldr	r1, [pc, #216]	; 1307c <__assert_fail@plt+0x2120>
   12fa0:	mov	r0, #0
   12fa4:	bl	10d94 <dcgettext@plt>
   12fa8:	ldr	r3, [pc, #156]	; 1304c <__assert_fail@plt+0x20f0>
   12fac:	ldr	r2, [pc, #192]	; 13074 <__assert_fail@plt+0x2118>
   12fb0:	mov	r1, r0
   12fb4:	mov	r0, #1
   12fb8:	bl	10ea8 <__printf_chk@plt>
   12fbc:	mov	r2, #5
   12fc0:	ldr	r1, [pc, #184]	; 13080 <__assert_fail@plt+0x2124>
   12fc4:	mov	r0, #0
   12fc8:	bl	10d94 <dcgettext@plt>
   12fcc:	ldr	r2, [pc, #176]	; 13084 <__assert_fail@plt+0x2128>
   12fd0:	cmp	r6, r7
   12fd4:	ldr	r3, [pc, #172]	; 13088 <__assert_fail@plt+0x212c>
   12fd8:	moveq	r3, r2
   12fdc:	mov	r2, r6
   12fe0:	mov	r1, r0
   12fe4:	mov	r0, #1
   12fe8:	bl	10ea8 <__printf_chk@plt>
   12fec:	b	12e40 <__assert_fail@plt+0x1ee4>
   12ff0:	mov	r0, r8
   12ff4:	bl	10cf8 <strcmp@plt>
   12ff8:	add	r6, r6, #8
   12ffc:	cmp	r0, #0
   13000:	bne	12f40 <__assert_fail@plt+0x1fe4>
   13004:	b	12f50 <__assert_fail@plt+0x1ff4>
   13008:	mov	r2, #3
   1300c:	ldr	r1, [pc, #120]	; 1308c <__assert_fail@plt+0x2130>
   13010:	bl	10f38 <strncmp@plt>
   13014:	cmp	r0, #0
   13018:	beq	12f98 <__assert_fail@plt+0x203c>
   1301c:	mov	r2, #5
   13020:	ldr	r1, [pc, #104]	; 13090 <__assert_fail@plt+0x2134>
   13024:	mov	r0, #0
   13028:	bl	10d94 <dcgettext@plt>
   1302c:	ldr	r1, [r4]
   13030:	bl	10ce0 <fputs_unlocked@plt>
   13034:	b	12f98 <__assert_fail@plt+0x203c>
   13038:	andeq	sl, r2, r0, ror r4
   1303c:	andeq	r8, r2, r0, asr r1
   13040:	andeq	r6, r1, r2, ror r5
   13044:	muleq	r1, r9, r5
   13048:	andeq	r8, r2, ip, asr r1
   1304c:	andeq	r6, r1, pc, ror #10
   13050:			; <UNDEFINED> instruction: 0x000165bc
   13054:	andeq	r6, r1, ip, lsr #15
   13058:	ldrdeq	r6, [r1], -r9
   1305c:	andeq	r6, r1, pc, lsl #16
   13060:	andeq	r6, r1, r4, lsl #19
   13064:	andeq	r6, r1, sp, lsr #22
   13068:	andeq	r6, r1, r8, asr #25
   1306c:	andeq	r6, r1, r8, lsr #4
   13070:	andeq	r6, r1, r0, lsr #29
   13074:			; <UNDEFINED> instruction: 0x00016eb7
   13078:	ldrdeq	r6, [r1], -pc	; <UNPREDICTABLE>
   1307c:	andeq	r6, r1, r8, lsr pc
   13080:	andeq	r6, r1, r3, asr pc
   13084:			; <UNDEFINED> instruction: 0x000173b6
   13088:	andeq	r6, r1, r5, lsl #31
   1308c:	andeq	r6, r1, sp, ror #29
   13090:	strdeq	r6, [r1], -r1
   13094:	ldr	r3, [pc, #4]	; 130a0 <__assert_fail@plt+0x2144>
   13098:	str	r0, [r3]
   1309c:	bx	lr
   130a0:	andeq	sl, r2, r8, ror #8
   130a4:	ldr	r3, [pc, #4]	; 130b0 <__assert_fail@plt+0x2154>
   130a8:	strb	r0, [r3, #4]
   130ac:	bx	lr
   130b0:	andeq	sl, r2, r8, ror #8
   130b4:	ldr	r3, [pc, #192]	; 1317c <__assert_fail@plt+0x2220>
   130b8:	push	{r0, r1, r4, r5, r6, lr}
   130bc:	ldr	r0, [r3]
   130c0:	bl	15790 <__assert_fail@plt+0x4834>
   130c4:	cmp	r0, #0
   130c8:	beq	13160 <__assert_fail@plt+0x2204>
   130cc:	ldr	r3, [pc, #172]	; 13180 <__assert_fail@plt+0x2224>
   130d0:	mov	r4, r3
   130d4:	ldrb	r2, [r3, #4]
   130d8:	cmp	r2, #0
   130dc:	beq	130f0 <__assert_fail@plt+0x2194>
   130e0:	bl	10e78 <__errno_location@plt>
   130e4:	ldr	r3, [r0]
   130e8:	cmp	r3, #32
   130ec:	beq	13160 <__assert_fail@plt+0x2204>
   130f0:	mov	r2, #5
   130f4:	ldr	r1, [pc, #136]	; 13184 <__assert_fail@plt+0x2228>
   130f8:	mov	r0, #0
   130fc:	bl	10d94 <dcgettext@plt>
   13100:	ldr	r4, [r4]
   13104:	cmp	r4, #0
   13108:	mov	r5, r0
   1310c:	beq	13144 <__assert_fail@plt+0x21e8>
   13110:	bl	10e78 <__errno_location@plt>
   13114:	ldr	r6, [r0]
   13118:	mov	r0, r4
   1311c:	bl	14708 <__assert_fail@plt+0x37ac>
   13120:	str	r5, [sp]
   13124:	ldr	r2, [pc, #92]	; 13188 <__assert_fail@plt+0x222c>
   13128:	mov	r1, r6
   1312c:	mov	r3, r0
   13130:	mov	r0, #0
   13134:	bl	10e00 <error@plt>
   13138:	ldr	r3, [pc, #76]	; 1318c <__assert_fail@plt+0x2230>
   1313c:	ldr	r0, [r3]
   13140:	bl	10d34 <_exit@plt>
   13144:	bl	10e78 <__errno_location@plt>
   13148:	mov	r3, r5
   1314c:	ldr	r2, [pc, #60]	; 13190 <__assert_fail@plt+0x2234>
   13150:	ldr	r1, [r0]
   13154:	mov	r0, r4
   13158:	bl	10e00 <error@plt>
   1315c:	b	13138 <__assert_fail@plt+0x21dc>
   13160:	ldr	r3, [pc, #44]	; 13194 <__assert_fail@plt+0x2238>
   13164:	ldr	r0, [r3]
   13168:	bl	15790 <__assert_fail@plt+0x4834>
   1316c:	cmp	r0, #0
   13170:	bne	13138 <__assert_fail@plt+0x21dc>
   13174:	add	sp, sp, #8
   13178:	pop	{r4, r5, r6, pc}
   1317c:	andeq	r8, r2, ip, asr r1
   13180:	andeq	sl, r2, r8, ror #8
   13184:	andeq	r6, r1, sp, lsr #7
   13188:	andeq	r7, r1, r8, lsl #9
   1318c:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   13190:	andeq	r7, r1, ip, lsl #9
   13194:	andeq	r8, r2, r0, asr r1
   13198:	push	{r4, r5}
   1319c:	pop	{r4, r5}
   131a0:	b	10d04 <posix_fadvise64@plt>
   131a4:	cmp	r0, #0
   131a8:	bxeq	lr
   131ac:	push	{r0, r1, r2, r3, r4, lr}
   131b0:	mov	r4, r1
   131b4:	bl	10eb4 <fileno@plt>
   131b8:	mov	r2, #0
   131bc:	mov	r3, #0
   131c0:	str	r4, [sp, #8]
   131c4:	strd	r2, [sp]
   131c8:	bl	10d04 <posix_fadvise64@plt>
   131cc:	add	sp, sp, #16
   131d0:	pop	{r4, pc}
   131d4:	push	{r0, r1, r2, r4, r5, lr}
   131d8:	mov	r5, r0
   131dc:	bl	10e78 <__errno_location@plt>
   131e0:	ldr	r3, [r0]
   131e4:	mov	r4, r0
   131e8:	str	r3, [sp]
   131ec:	str	r3, [sp, #4]
   131f0:	mov	r3, #0
   131f4:	str	r3, [r0]
   131f8:	mov	r0, r5
   131fc:	bl	10d28 <free@plt>
   13200:	ldr	r3, [r4]
   13204:	add	r2, sp, #8
   13208:	cmp	r3, #0
   1320c:	moveq	r3, #4
   13210:	movne	r3, #0
   13214:	add	r3, r2, r3
   13218:	ldr	r3, [r3, #-8]
   1321c:	str	r3, [r4]
   13220:	add	sp, sp, #12
   13224:	pop	{r4, r5, pc}
   13228:	push	{r4, r5, r6, lr}
   1322c:	subs	r5, r0, #0
   13230:	bne	13248 <__assert_fail@plt+0x22ec>
   13234:	ldr	r3, [pc, #124]	; 132b8 <__assert_fail@plt+0x235c>
   13238:	ldr	r0, [pc, #124]	; 132bc <__assert_fail@plt+0x2360>
   1323c:	ldr	r1, [r3]
   13240:	bl	10f2c <fputs@plt>
   13244:	bl	10f44 <abort@plt>
   13248:	mov	r1, #47	; 0x2f
   1324c:	bl	10f08 <strrchr@plt>
   13250:	cmp	r0, #0
   13254:	addne	r4, r0, #1
   13258:	moveq	r4, r5
   1325c:	sub	r3, r4, r5
   13260:	cmp	r3, #6
   13264:	ble	132a4 <__assert_fail@plt+0x2348>
   13268:	mov	r2, #7
   1326c:	ldr	r1, [pc, #76]	; 132c0 <__assert_fail@plt+0x2364>
   13270:	sub	r0, r4, #7
   13274:	bl	10f38 <strncmp@plt>
   13278:	cmp	r0, #0
   1327c:	bne	132a4 <__assert_fail@plt+0x2348>
   13280:	mov	r2, #3
   13284:	ldr	r1, [pc, #56]	; 132c4 <__assert_fail@plt+0x2368>
   13288:	mov	r0, r4
   1328c:	bl	10f38 <strncmp@plt>
   13290:	cmp	r0, #0
   13294:	movne	r5, r4
   13298:	ldreq	r3, [pc, #40]	; 132c8 <__assert_fail@plt+0x236c>
   1329c:	addeq	r5, r4, #3
   132a0:	streq	r5, [r3]
   132a4:	ldr	r3, [pc, #32]	; 132cc <__assert_fail@plt+0x2370>
   132a8:	str	r5, [r3]
   132ac:	ldr	r3, [pc, #28]	; 132d0 <__assert_fail@plt+0x2374>
   132b0:	str	r5, [r3]
   132b4:	pop	{r4, r5, r6, pc}
   132b8:	andeq	r8, r2, r0, asr r1
   132bc:	andeq	r7, r1, pc, lsl #9
   132c0:	andeq	r7, r1, r7, asr #9
   132c4:	andeq	r7, r1, pc, asr #9
   132c8:	andeq	r8, r2, r0, asr #2
   132cc:	andeq	sl, r2, r0, ror r4
   132d0:	andeq	r8, r2, r4, asr #2
   132d4:	push	{r4, r5, r6, lr}
   132d8:	mov	r2, #48	; 0x30
   132dc:	mov	r5, r1
   132e0:	mov	r1, #0
   132e4:	mov	r4, r0
   132e8:	bl	10e9c <memset@plt>
   132ec:	cmp	r5, #10
   132f0:	bne	132f8 <__assert_fail@plt+0x239c>
   132f4:	bl	10f44 <abort@plt>
   132f8:	str	r5, [r4]
   132fc:	mov	r0, r4
   13300:	pop	{r4, r5, r6, pc}
   13304:	push	{r4, r5, r6, lr}
   13308:	mov	r4, r0
   1330c:	mov	r5, r1
   13310:	bl	1598c <__assert_fail@plt+0x4a30>
   13314:	ldrb	r3, [r0]
   13318:	bic	r3, r3, #32
   1331c:	cmp	r3, #85	; 0x55
   13320:	bne	13390 <__assert_fail@plt+0x2434>
   13324:	ldrb	r3, [r0, #1]
   13328:	bic	r3, r3, #32
   1332c:	cmp	r3, #84	; 0x54
   13330:	bne	13368 <__assert_fail@plt+0x240c>
   13334:	ldrb	r3, [r0, #2]
   13338:	bic	r3, r3, #32
   1333c:	cmp	r3, #70	; 0x46
   13340:	bne	13368 <__assert_fail@plt+0x240c>
   13344:	ldrb	r3, [r0, #3]
   13348:	cmp	r3, #45	; 0x2d
   1334c:	bne	13368 <__assert_fail@plt+0x240c>
   13350:	ldrb	r3, [r0, #4]
   13354:	cmp	r3, #56	; 0x38
   13358:	bne	13368 <__assert_fail@plt+0x240c>
   1335c:	ldrb	r3, [r0, #5]
   13360:	cmp	r3, #0
   13364:	beq	1337c <__assert_fail@plt+0x2420>
   13368:	ldr	r1, [pc, #144]	; 13400 <__assert_fail@plt+0x24a4>
   1336c:	ldr	r0, [pc, #144]	; 13404 <__assert_fail@plt+0x24a8>
   13370:	cmp	r5, #9
   13374:	movne	r0, r1
   13378:	pop	{r4, r5, r6, pc}
   1337c:	ldrb	r3, [r4]
   13380:	ldr	r1, [pc, #128]	; 13408 <__assert_fail@plt+0x24ac>
   13384:	ldr	r0, [pc, #128]	; 1340c <__assert_fail@plt+0x24b0>
   13388:	cmp	r3, #96	; 0x60
   1338c:	b	13374 <__assert_fail@plt+0x2418>
   13390:	cmp	r3, #71	; 0x47
   13394:	bne	13368 <__assert_fail@plt+0x240c>
   13398:	ldrb	r3, [r0, #1]
   1339c:	bic	r3, r3, #32
   133a0:	cmp	r3, #66	; 0x42
   133a4:	bne	13368 <__assert_fail@plt+0x240c>
   133a8:	ldrb	r3, [r0, #2]
   133ac:	cmp	r3, #49	; 0x31
   133b0:	bne	13368 <__assert_fail@plt+0x240c>
   133b4:	ldrb	r3, [r0, #3]
   133b8:	cmp	r3, #56	; 0x38
   133bc:	bne	13368 <__assert_fail@plt+0x240c>
   133c0:	ldrb	r3, [r0, #4]
   133c4:	cmp	r3, #48	; 0x30
   133c8:	bne	13368 <__assert_fail@plt+0x240c>
   133cc:	ldrb	r3, [r0, #5]
   133d0:	cmp	r3, #51	; 0x33
   133d4:	bne	13368 <__assert_fail@plt+0x240c>
   133d8:	ldrb	r3, [r0, #6]
   133dc:	cmp	r3, #48	; 0x30
   133e0:	bne	13368 <__assert_fail@plt+0x240c>
   133e4:	ldrb	r3, [r0, #7]
   133e8:	cmp	r3, #0
   133ec:	bne	13368 <__assert_fail@plt+0x240c>
   133f0:	ldrb	r3, [r4]
   133f4:	ldr	r1, [pc, #20]	; 13410 <__assert_fail@plt+0x24b4>
   133f8:	ldr	r0, [pc, #20]	; 13414 <__assert_fail@plt+0x24b8>
   133fc:	b	13388 <__assert_fail@plt+0x242c>
   13400:	andeq	r6, r1, r0, lsl #9
   13404:	andeq	r7, r1, r7, lsr r5
   13408:	andeq	r7, r1, ip, lsr #10
   1340c:	andeq	r7, r1, r8, lsr #10
   13410:	andeq	r7, r1, r4, lsr r5
   13414:	andeq	r7, r1, r0, lsr r5
   13418:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1341c:	sub	sp, sp, #108	; 0x6c
   13420:	mov	r8, r0
   13424:	str	r3, [sp, #36]	; 0x24
   13428:	mov	r5, r1
   1342c:	str	r2, [sp, #44]	; 0x2c
   13430:	ldr	sl, [sp, #144]	; 0x90
   13434:	bl	10dd0 <__ctype_get_mb_cur_max@plt>
   13438:	ldr	r3, [sp, #148]	; 0x94
   1343c:	mov	r7, #0
   13440:	str	r7, [sp, #48]	; 0x30
   13444:	lsr	r6, r3, #1
   13448:	and	r6, r6, #1
   1344c:	mov	r3, #1
   13450:	str	r3, [sp, #72]	; 0x48
   13454:	str	r7, [sp, #24]
   13458:	str	r7, [sp, #32]
   1345c:	str	r7, [sp, #40]	; 0x28
   13460:	str	r7, [sp, #60]	; 0x3c
   13464:	str	r0, [sp, #76]	; 0x4c
   13468:	cmp	sl, #10
   1346c:	ldrls	pc, [pc, sl, lsl #2]
   13470:	b	136ac <__assert_fail@plt+0x2750>
   13474:	andeq	r3, r1, r0, lsr #9
   13478:	andeq	r4, r1, r4, lsr r1
   1347c:	andeq	r3, r1, r8, ror r6
   13480:	andeq	r3, r1, r4, asr #13
   13484:	andeq	r3, r1, r4, asr r6
   13488:	andeq	r3, r1, ip, lsr #9
   1348c:	andeq	r4, r1, r4, lsl r1
   13490:			; <UNDEFINED> instruction: 0x000136b0
   13494:	andeq	r3, r1, r4, lsr #11
   13498:	andeq	r3, r1, r4, lsr #11
   1349c:	andeq	r3, r1, r4, lsr #11
   134a0:	mov	r6, #0
   134a4:	mov	r4, #0
   134a8:	b	134d8 <__assert_fail@plt+0x257c>
   134ac:	cmp	r6, #0
   134b0:	bne	136d4 <__assert_fail@plt+0x2778>
   134b4:	cmp	r5, #0
   134b8:	movne	r3, #34	; 0x22
   134bc:	strbne	r3, [r8]
   134c0:	mov	r3, #1
   134c4:	str	r3, [sp, #24]
   134c8:	str	r3, [sp, #32]
   134cc:	mov	r4, #1
   134d0:	ldr	r3, [pc, #3172]	; 1413c <__assert_fail@plt+0x31e0>
   134d4:	str	r3, [sp, #40]	; 0x28
   134d8:	mov	r9, r5
   134dc:	mov	r3, #0
   134e0:	str	r7, [sp, #68]	; 0x44
   134e4:	str	r3, [sp, #28]
   134e8:	ldr	r3, [sp, #36]	; 0x24
   134ec:	cmn	r3, #1
   134f0:	bne	14080 <__assert_fail@plt+0x3124>
   134f4:	ldr	r3, [sp, #44]	; 0x2c
   134f8:	ldr	r2, [sp, #28]
   134fc:	ldrb	r3, [r3, r2]
   13500:	adds	r3, r3, #0
   13504:	movne	r3, #1
   13508:	str	r3, [sp, #52]	; 0x34
   1350c:	ldr	r3, [sp, #52]	; 0x34
   13510:	cmp	r3, #0
   13514:	bne	136fc <__assert_fail@plt+0x27a0>
   13518:	sub	r2, sl, #2
   1351c:	clz	r2, r2
   13520:	lsr	r2, r2, #5
   13524:	and	r3, r6, r2
   13528:	cmp	r4, #0
   1352c:	movne	r3, #0
   13530:	andeq	r3, r3, #1
   13534:	cmp	r3, #0
   13538:	bne	138c4 <__assert_fail@plt+0x2968>
   1353c:	eor	r3, r6, #1
   13540:	ands	r2, r2, r3
   13544:	beq	140b8 <__assert_fail@plt+0x315c>
   13548:	ldr	r3, [sp, #68]	; 0x44
   1354c:	cmp	r3, #0
   13550:	beq	140f0 <__assert_fail@plt+0x3194>
   13554:	ldr	r3, [sp, #72]	; 0x48
   13558:	cmp	r3, #0
   1355c:	beq	14094 <__assert_fail@plt+0x3138>
   13560:	ldr	r3, [sp, #160]	; 0xa0
   13564:	ldr	r2, [sp, #44]	; 0x2c
   13568:	str	r3, [sp, #16]
   1356c:	ldr	r3, [sp, #156]	; 0x9c
   13570:	ldr	r1, [sp, #60]	; 0x3c
   13574:	str	r3, [sp, #12]
   13578:	ldr	r3, [sp, #152]	; 0x98
   1357c:	str	r3, [sp, #8]
   13580:	ldr	r3, [sp, #148]	; 0x94
   13584:	str	r3, [sp, #4]
   13588:	mov	r3, #5
   1358c:	str	r3, [sp]
   13590:	ldr	r3, [sp, #36]	; 0x24
   13594:	mov	r0, r8
   13598:	bl	13418 <__assert_fail@plt+0x24bc>
   1359c:	mov	r4, r0
   135a0:	b	140e4 <__assert_fail@plt+0x3188>
   135a4:	cmp	sl, #10
   135a8:	beq	13604 <__assert_fail@plt+0x26a8>
   135ac:	ldr	r4, [pc, #2956]	; 14140 <__assert_fail@plt+0x31e4>
   135b0:	mov	r2, #5
   135b4:	mov	r1, r4
   135b8:	mov	r0, #0
   135bc:	bl	10d94 <dcgettext@plt>
   135c0:	cmp	r0, r4
   135c4:	str	r0, [sp, #156]	; 0x9c
   135c8:	bne	135d8 <__assert_fail@plt+0x267c>
   135cc:	mov	r1, sl
   135d0:	bl	13304 <__assert_fail@plt+0x23a8>
   135d4:	str	r0, [sp, #156]	; 0x9c
   135d8:	ldr	r4, [pc, #2916]	; 14144 <__assert_fail@plt+0x31e8>
   135dc:	mov	r2, #5
   135e0:	mov	r1, r4
   135e4:	mov	r0, #0
   135e8:	bl	10d94 <dcgettext@plt>
   135ec:	cmp	r0, r4
   135f0:	str	r0, [sp, #160]	; 0xa0
   135f4:	bne	13604 <__assert_fail@plt+0x26a8>
   135f8:	mov	r1, sl
   135fc:	bl	13304 <__assert_fail@plt+0x23a8>
   13600:	str	r0, [sp, #160]	; 0xa0
   13604:	cmp	r6, #0
   13608:	moveq	r4, r6
   1360c:	beq	13624 <__assert_fail@plt+0x26c8>
   13610:	mov	r4, #0
   13614:	b	13634 <__assert_fail@plt+0x26d8>
   13618:	cmp	r5, r4
   1361c:	strbhi	r3, [r8, r4]
   13620:	add	r4, r4, #1
   13624:	ldr	r3, [sp, #156]	; 0x9c
   13628:	ldrb	r3, [r3, r4]
   1362c:	cmp	r3, #0
   13630:	bne	13618 <__assert_fail@plt+0x26bc>
   13634:	ldr	r0, [sp, #160]	; 0xa0
   13638:	bl	10e60 <strlen@plt>
   1363c:	ldr	r3, [sp, #160]	; 0xa0
   13640:	str	r3, [sp, #40]	; 0x28
   13644:	mov	r3, #1
   13648:	str	r3, [sp, #24]
   1364c:	str	r0, [sp, #32]
   13650:	b	134d8 <__assert_fail@plt+0x257c>
   13654:	mov	r3, #1
   13658:	cmp	r6, #0
   1365c:	streq	r3, [sp, #24]
   13660:	beq	13680 <__assert_fail@plt+0x2724>
   13664:	str	r3, [sp, #32]
   13668:	ldr	r3, [pc, #2772]	; 14144 <__assert_fail@plt+0x31e8>
   1366c:	mov	r4, #0
   13670:	str	r3, [sp, #40]	; 0x28
   13674:	b	136a4 <__assert_fail@plt+0x2748>
   13678:	cmp	r6, #0
   1367c:	bne	136ec <__assert_fail@plt+0x2790>
   13680:	cmp	r5, #0
   13684:	movne	r3, #39	; 0x27
   13688:	strbne	r3, [r8]
   1368c:	mov	r3, #1
   13690:	str	r3, [sp, #32]
   13694:	mov	r6, #0
   13698:	ldr	r3, [pc, #2724]	; 14144 <__assert_fail@plt+0x31e8>
   1369c:	mov	r4, #1
   136a0:	str	r3, [sp, #40]	; 0x28
   136a4:	mov	sl, #2
   136a8:	b	134d8 <__assert_fail@plt+0x257c>
   136ac:	bl	10f44 <abort@plt>
   136b0:	mov	r6, #0
   136b4:	mov	r3, #1
   136b8:	str	r3, [sp, #24]
   136bc:	mov	r4, r6
   136c0:	b	134d8 <__assert_fail@plt+0x257c>
   136c4:	mov	r6, #1
   136c8:	str	r6, [sp, #24]
   136cc:	str	r6, [sp, #32]
   136d0:	b	13668 <__assert_fail@plt+0x270c>
   136d4:	mov	r3, #1
   136d8:	str	r3, [sp, #32]
   136dc:	ldr	r3, [pc, #2648]	; 1413c <__assert_fail@plt+0x31e0>
   136e0:	str	r6, [sp, #24]
   136e4:	str	r3, [sp, #40]	; 0x28
   136e8:	b	134a4 <__assert_fail@plt+0x2548>
   136ec:	mov	r3, #1
   136f0:	str	r3, [sp, #32]
   136f4:	ldr	r3, [pc, #2632]	; 14144 <__assert_fail@plt+0x31e8>
   136f8:	b	136e4 <__assert_fail@plt+0x2788>
   136fc:	ldr	r3, [sp, #32]
   13700:	ldr	fp, [sp, #24]
   13704:	cmp	sl, #2
   13708:	moveq	fp, #0
   1370c:	andne	fp, fp, #1
   13710:	adds	r5, r3, #0
   13714:	movne	r5, #1
   13718:	ands	r3, r5, fp
   1371c:	str	r3, [sp, #64]	; 0x40
   13720:	beq	137f0 <__assert_fail@plt+0x2894>
   13724:	ldr	r2, [sp, #32]
   13728:	ldr	r3, [sp, #28]
   1372c:	add	r7, r3, r2
   13730:	mov	r3, r2
   13734:	ldr	r2, [sp, #36]	; 0x24
   13738:	cmp	r3, #1
   1373c:	movls	r3, #0
   13740:	movhi	r3, #1
   13744:	cmn	r2, #1
   13748:	movne	r3, #0
   1374c:	cmp	r3, #0
   13750:	beq	13760 <__assert_fail@plt+0x2804>
   13754:	ldr	r0, [sp, #44]	; 0x2c
   13758:	bl	10e60 <strlen@plt>
   1375c:	str	r0, [sp, #36]	; 0x24
   13760:	ldr	r3, [sp, #36]	; 0x24
   13764:	cmp	r3, r7
   13768:	bcc	137e8 <__assert_fail@plt+0x288c>
   1376c:	ldr	r3, [sp, #44]	; 0x2c
   13770:	ldr	r0, [sp, #28]
   13774:	ldr	r2, [sp, #32]
   13778:	ldr	r1, [sp, #40]	; 0x28
   1377c:	add	r0, r3, r0
   13780:	bl	10d70 <memcmp@plt>
   13784:	cmp	r0, #0
   13788:	bne	137e8 <__assert_fail@plt+0x288c>
   1378c:	cmp	r6, #0
   13790:	beq	137f0 <__assert_fail@plt+0x2894>
   13794:	str	r6, [sp, #24]
   13798:	ldr	r3, [sp, #24]
   1379c:	ldr	r2, [sp, #44]	; 0x2c
   137a0:	cmp	sl, #2
   137a4:	movne	r3, #0
   137a8:	andeq	r3, r3, #1
   137ac:	cmp	r3, #0
   137b0:	ldr	r3, [sp, #160]	; 0xa0
   137b4:	movne	sl, #4
   137b8:	str	r3, [sp, #16]
   137bc:	ldr	r3, [sp, #156]	; 0x9c
   137c0:	str	sl, [sp]
   137c4:	str	r3, [sp, #12]
   137c8:	mov	r3, #0
   137cc:	str	r3, [sp, #8]
   137d0:	ldr	r3, [sp, #148]	; 0x94
   137d4:	mov	r1, r9
   137d8:	bic	r3, r3, #2
   137dc:	str	r3, [sp, #4]
   137e0:	ldr	r3, [sp, #36]	; 0x24
   137e4:	b	13594 <__assert_fail@plt+0x2638>
   137e8:	mov	r3, #0
   137ec:	str	r3, [sp, #64]	; 0x40
   137f0:	ldr	r2, [sp, #28]
   137f4:	ldr	r3, [sp, #44]	; 0x2c
   137f8:	add	r3, r3, r2
   137fc:	str	r3, [sp, #80]	; 0x50
   13800:	ldr	r3, [sp, #44]	; 0x2c
   13804:	ldrb	r7, [r3, r2]
   13808:	cmp	r7, #58	; 0x3a
   1380c:	bhi	13974 <__assert_fail@plt+0x2a18>
   13810:	cmp	r7, #43	; 0x2b
   13814:	bcs	139c8 <__assert_fail@plt+0x2a6c>
   13818:	cmp	r7, #32
   1381c:	beq	13a20 <__assert_fail@plt+0x2ac4>
   13820:	bhi	138cc <__assert_fail@plt+0x2970>
   13824:	cmp	r7, #9
   13828:	beq	13cd4 <__assert_fail@plt+0x2d78>
   1382c:	bhi	13890 <__assert_fail@plt+0x2934>
   13830:	cmp	r7, #7
   13834:	beq	13d80 <__assert_fail@plt+0x2e24>
   13838:	bhi	13a3c <__assert_fail@plt+0x2ae0>
   1383c:	cmp	r7, #0
   13840:	beq	13a58 <__assert_fail@plt+0x2afc>
   13844:	ldr	r3, [sp, #76]	; 0x4c
   13848:	cmp	r3, #1
   1384c:	bne	13dc4 <__assert_fail@plt+0x2e68>
   13850:	bl	10e48 <__ctype_b_loc@plt>
   13854:	sxth	r3, r7
   13858:	lsl	r3, r3, #1
   1385c:	ldr	r2, [r0]
   13860:	ldrh	r5, [r2, r3]
   13864:	ldr	r3, [sp, #76]	; 0x4c
   13868:	str	r3, [sp, #56]	; 0x38
   1386c:	lsr	r5, r5, #14
   13870:	and	r5, r5, #1
   13874:	ldr	r3, [sp, #24]
   13878:	eor	fp, r5, #1
   1387c:	and	fp, fp, r3
   13880:	ands	fp, fp, #255	; 0xff
   13884:	beq	13c0c <__assert_fail@plt+0x2cb0>
   13888:	mov	r5, #0
   1388c:	b	13e70 <__assert_fail@plt+0x2f14>
   13890:	cmp	r7, #11
   13894:	beq	13cdc <__assert_fail@plt+0x2d80>
   13898:	bcc	13d78 <__assert_fail@plt+0x2e1c>
   1389c:	cmp	r7, #12
   138a0:	beq	13d88 <__assert_fail@plt+0x2e2c>
   138a4:	cmp	r7, #13
   138a8:	moveq	r3, #114	; 0x72
   138ac:	bne	13844 <__assert_fail@plt+0x28e8>
   138b0:	cmp	sl, #2
   138b4:	movne	r2, #0
   138b8:	andeq	r2, r6, #1
   138bc:	cmp	r2, #0
   138c0:	beq	13a40 <__assert_fail@plt+0x2ae4>
   138c4:	mov	sl, #2
   138c8:	b	13798 <__assert_fail@plt+0x283c>
   138cc:	cmp	r7, #37	; 0x25
   138d0:	beq	139c8 <__assert_fail@plt+0x2a6c>
   138d4:	bhi	138e8 <__assert_fail@plt+0x298c>
   138d8:	cmp	r7, #35	; 0x23
   138dc:	beq	13a14 <__assert_fail@plt+0x2ab8>
   138e0:	mov	r5, #0
   138e4:	b	13a24 <__assert_fail@plt+0x2ac8>
   138e8:	cmp	r7, #39	; 0x27
   138ec:	bne	138e0 <__assert_fail@plt+0x2984>
   138f0:	cmp	sl, #2
   138f4:	ldrne	r5, [sp, #52]	; 0x34
   138f8:	movne	r3, r5
   138fc:	strne	r3, [sp, #68]	; 0x44
   13900:	bne	139cc <__assert_fail@plt+0x2a70>
   13904:	cmp	r6, #0
   13908:	bne	13798 <__assert_fail@plt+0x283c>
   1390c:	ldr	r2, [sp, #60]	; 0x3c
   13910:	adds	r3, r9, #0
   13914:	movne	r3, #1
   13918:	cmp	r2, #0
   1391c:	movne	r3, #0
   13920:	cmp	r3, #0
   13924:	strne	r9, [sp, #60]	; 0x3c
   13928:	movne	r9, #0
   1392c:	bne	1393c <__assert_fail@plt+0x29e0>
   13930:	cmp	r9, r4
   13934:	movhi	r3, #39	; 0x27
   13938:	strbhi	r3, [r8, r4]
   1393c:	add	r3, r4, #1
   13940:	cmp	r3, r9
   13944:	movcc	r2, #92	; 0x5c
   13948:	strbcc	r2, [r8, r3]
   1394c:	add	r3, r4, #2
   13950:	cmp	r3, r9
   13954:	ldr	r5, [sp, #52]	; 0x34
   13958:	movcc	r2, #39	; 0x27
   1395c:	strbcc	r2, [r8, r3]
   13960:	add	r4, r4, #3
   13964:	mov	fp, r6
   13968:	str	r5, [sp, #68]	; 0x44
   1396c:	str	r6, [sp, #48]	; 0x30
   13970:	b	13c0c <__assert_fail@plt+0x2cb0>
   13974:	cmp	r7, #94	; 0x5e
   13978:	beq	138e0 <__assert_fail@plt+0x2984>
   1397c:	bhi	139d4 <__assert_fail@plt+0x2a78>
   13980:	cmp	r7, #90	; 0x5a
   13984:	bhi	139bc <__assert_fail@plt+0x2a60>
   13988:	cmp	r7, #65	; 0x41
   1398c:	bcs	139c8 <__assert_fail@plt+0x2a6c>
   13990:	cmp	r7, #62	; 0x3e
   13994:	bls	138e0 <__assert_fail@plt+0x2984>
   13998:	cmp	r7, #63	; 0x3f
   1399c:	bne	13844 <__assert_fail@plt+0x28e8>
   139a0:	cmp	sl, #2
   139a4:	beq	13b48 <__assert_fail@plt+0x2bec>
   139a8:	cmp	sl, #5
   139ac:	beq	13b58 <__assert_fail@plt+0x2bfc>
   139b0:	mov	fp, #0
   139b4:	mov	r5, fp
   139b8:	b	13c0c <__assert_fail@plt+0x2cb0>
   139bc:	cmp	r7, #92	; 0x5c
   139c0:	beq	13ce4 <__assert_fail@plt+0x2d88>
   139c4:	bls	138e0 <__assert_fail@plt+0x2984>
   139c8:	ldr	r5, [sp, #52]	; 0x34
   139cc:	mov	fp, #0
   139d0:	b	13c0c <__assert_fail@plt+0x2cb0>
   139d4:	cmp	r7, #122	; 0x7a
   139d8:	bhi	139f8 <__assert_fail@plt+0x2a9c>
   139dc:	cmp	r7, #97	; 0x61
   139e0:	bcs	139c8 <__assert_fail@plt+0x2a6c>
   139e4:	cmp	r7, #95	; 0x5f
   139e8:	beq	139c8 <__assert_fail@plt+0x2a6c>
   139ec:	cmp	r7, #96	; 0x60
   139f0:	bne	13844 <__assert_fail@plt+0x28e8>
   139f4:	b	138e0 <__assert_fail@plt+0x2984>
   139f8:	cmp	r7, #124	; 0x7c
   139fc:	beq	138e0 <__assert_fail@plt+0x2984>
   13a00:	bcc	13d90 <__assert_fail@plt+0x2e34>
   13a04:	cmp	r7, #125	; 0x7d
   13a08:	beq	13d90 <__assert_fail@plt+0x2e34>
   13a0c:	cmp	r7, #126	; 0x7e
   13a10:	bne	13844 <__assert_fail@plt+0x28e8>
   13a14:	ldr	r3, [sp, #28]
   13a18:	cmp	r3, #0
   13a1c:	bne	13b50 <__assert_fail@plt+0x2bf4>
   13a20:	ldr	r5, [sp, #52]	; 0x34
   13a24:	cmp	sl, #2
   13a28:	movne	fp, #0
   13a2c:	andeq	fp, r6, #1
   13a30:	cmp	fp, #0
   13a34:	beq	13c0c <__assert_fail@plt+0x2cb0>
   13a38:	b	138c4 <__assert_fail@plt+0x2968>
   13a3c:	mov	r3, #98	; 0x62
   13a40:	ldr	r2, [sp, #24]
   13a44:	cmp	r2, #0
   13a48:	beq	13b50 <__assert_fail@plt+0x2bf4>
   13a4c:	mov	r7, r3
   13a50:	mov	r5, #0
   13a54:	b	13c64 <__assert_fail@plt+0x2d08>
   13a58:	ldr	r3, [sp, #24]
   13a5c:	cmp	r3, #0
   13a60:	beq	13b2c <__assert_fail@plt+0x2bd0>
   13a64:	cmp	r6, #0
   13a68:	bne	13794 <__assert_fail@plt+0x2838>
   13a6c:	ldr	r3, [sp, #48]	; 0x30
   13a70:	eor	r2, r3, #1
   13a74:	cmp	sl, #2
   13a78:	movne	r2, #0
   13a7c:	andeq	r2, r2, #1
   13a80:	cmp	r2, #0
   13a84:	moveq	r3, r4
   13a88:	beq	13ac0 <__assert_fail@plt+0x2b64>
   13a8c:	cmp	r9, r4
   13a90:	movhi	r3, #39	; 0x27
   13a94:	strbhi	r3, [r8, r4]
   13a98:	add	r3, r4, #1
   13a9c:	cmp	r9, r3
   13aa0:	movhi	r1, #36	; 0x24
   13aa4:	strbhi	r1, [r8, r3]
   13aa8:	add	r3, r4, #2
   13aac:	cmp	r9, r3
   13ab0:	movhi	r1, #39	; 0x27
   13ab4:	strbhi	r1, [r8, r3]
   13ab8:	add	r3, r4, #3
   13abc:	str	r2, [sp, #48]	; 0x30
   13ac0:	cmp	r9, r3
   13ac4:	movhi	r2, #92	; 0x5c
   13ac8:	strbhi	r2, [r8, r3]
   13acc:	cmp	fp, #0
   13ad0:	add	r4, r3, #1
   13ad4:	beq	14064 <__assert_fail@plt+0x3108>
   13ad8:	ldr	r2, [sp, #28]
   13adc:	ldr	r1, [sp, #36]	; 0x24
   13ae0:	add	r2, r2, #1
   13ae4:	cmp	r1, r2
   13ae8:	bls	13b24 <__assert_fail@plt+0x2bc8>
   13aec:	ldr	r1, [sp, #44]	; 0x2c
   13af0:	mov	r7, #48	; 0x30
   13af4:	ldrb	r2, [r1, r2]
   13af8:	sub	r2, r2, #48	; 0x30
   13afc:	cmp	r2, #9
   13b00:	movhi	r5, r6
   13b04:	bhi	13c0c <__assert_fail@plt+0x2cb0>
   13b08:	cmp	r9, r4
   13b0c:	add	r2, r3, #2
   13b10:	strbhi	r7, [r8, r4]
   13b14:	cmp	r9, r2
   13b18:	add	r4, r3, #3
   13b1c:	movhi	r1, #48	; 0x30
   13b20:	strbhi	r1, [r8, r2]
   13b24:	mov	r5, r6
   13b28:	b	1406c <__assert_fail@plt+0x3110>
   13b2c:	ldr	r3, [sp, #148]	; 0x94
   13b30:	tst	r3, #1
   13b34:	ldreq	r5, [sp, #24]
   13b38:	beq	14078 <__assert_fail@plt+0x311c>
   13b3c:	ldr	r3, [sp, #28]
   13b40:	add	r3, r3, #1
   13b44:	b	134e4 <__assert_fail@plt+0x2588>
   13b48:	cmp	r6, #0
   13b4c:	bne	13798 <__assert_fail@plt+0x283c>
   13b50:	mov	r5, #0
   13b54:	b	139cc <__assert_fail@plt+0x2a70>
   13b58:	ldr	r3, [sp, #148]	; 0x94
   13b5c:	tst	r3, #4
   13b60:	beq	13b50 <__assert_fail@plt+0x2bf4>
   13b64:	ldr	r3, [sp, #28]
   13b68:	add	r2, r3, #2
   13b6c:	ldr	r3, [sp, #36]	; 0x24
   13b70:	cmp	r3, r2
   13b74:	bls	13b50 <__assert_fail@plt+0x2bf4>
   13b78:	ldr	r3, [sp, #44]	; 0x2c
   13b7c:	ldr	r1, [sp, #28]
   13b80:	add	r3, r3, r1
   13b84:	ldrb	r0, [r3, #1]
   13b88:	cmp	r0, #63	; 0x3f
   13b8c:	bne	13b50 <__assert_fail@plt+0x2bf4>
   13b90:	ldr	r3, [sp, #44]	; 0x2c
   13b94:	ldrb	r1, [r3, r2]
   13b98:	sub	r3, r1, #33	; 0x21
   13b9c:	uxtb	r3, r3
   13ba0:	cmp	r3, #29
   13ba4:	bhi	14074 <__assert_fail@plt+0x3118>
   13ba8:	mov	ip, #1
   13bac:	ldr	r5, [pc, #1428]	; 14148 <__assert_fail@plt+0x31ec>
   13bb0:	ands	r5, r5, ip, lsl r3
   13bb4:	beq	139cc <__assert_fail@plt+0x2a70>
   13bb8:	cmp	r6, #0
   13bbc:	bne	13798 <__assert_fail@plt+0x283c>
   13bc0:	add	r3, r4, #1
   13bc4:	cmp	r9, r4
   13bc8:	strbhi	r0, [r8, r4]
   13bcc:	cmp	r9, r3
   13bd0:	movhi	r0, #34	; 0x22
   13bd4:	strbhi	r0, [r8, r3]
   13bd8:	add	r3, r4, #2
   13bdc:	cmp	r9, r3
   13be0:	movhi	r0, #34	; 0x22
   13be4:	strbhi	r0, [r8, r3]
   13be8:	add	r3, r4, #3
   13bec:	cmp	r9, r3
   13bf0:	add	r4, r4, #4
   13bf4:	mov	r5, r6
   13bf8:	mov	fp, r6
   13bfc:	mov	r7, r1
   13c00:	movhi	r0, #63	; 0x3f
   13c04:	strbhi	r0, [r8, r3]
   13c08:	str	r2, [sp, #28]
   13c0c:	ldr	r3, [sp, #24]
   13c10:	eor	r3, r3, #1
   13c14:	cmp	sl, #2
   13c18:	orreq	r3, r3, #1
   13c1c:	eor	r3, r3, #1
   13c20:	orr	r3, r6, r3
   13c24:	tst	r3, #255	; 0xff
   13c28:	beq	13c58 <__assert_fail@plt+0x2cfc>
   13c2c:	ldr	r3, [sp, #152]	; 0x98
   13c30:	cmp	r3, #0
   13c34:	beq	13c58 <__assert_fail@plt+0x2cfc>
   13c38:	lsr	r2, r7, #5
   13c3c:	ldr	r1, [sp, #152]	; 0x98
   13c40:	uxtb	r2, r2
   13c44:	and	r3, r7, #31
   13c48:	ldr	r2, [r1, r2, lsl #2]
   13c4c:	lsr	r3, r2, r3
   13c50:	tst	r3, #1
   13c54:	bne	13c64 <__assert_fail@plt+0x2d08>
   13c58:	ldr	r3, [sp, #64]	; 0x40
   13c5c:	cmp	r3, #0
   13c60:	beq	13cfc <__assert_fail@plt+0x2da0>
   13c64:	cmp	r6, #0
   13c68:	bne	13798 <__assert_fail@plt+0x283c>
   13c6c:	ldr	r3, [sp, #48]	; 0x30
   13c70:	eor	r3, r3, #1
   13c74:	cmp	sl, #2
   13c78:	movne	r3, #0
   13c7c:	andeq	r3, r3, #1
   13c80:	cmp	r3, #0
   13c84:	beq	13cbc <__assert_fail@plt+0x2d60>
   13c88:	cmp	r9, r4
   13c8c:	movhi	r2, #39	; 0x27
   13c90:	strbhi	r2, [r8, r4]
   13c94:	add	r2, r4, #1
   13c98:	cmp	r9, r2
   13c9c:	movhi	r1, #36	; 0x24
   13ca0:	strbhi	r1, [r8, r2]
   13ca4:	add	r2, r4, #2
   13ca8:	cmp	r9, r2
   13cac:	add	r4, r4, #3
   13cb0:	movhi	r1, #39	; 0x27
   13cb4:	strbhi	r1, [r8, r2]
   13cb8:	str	r3, [sp, #48]	; 0x30
   13cbc:	cmp	r9, r4
   13cc0:	movhi	r3, #92	; 0x5c
   13cc4:	strbhi	r3, [r8, r4]
   13cc8:	ldr	fp, [sp, #52]	; 0x34
   13ccc:	add	r4, r4, #1
   13cd0:	b	13cfc <__assert_fail@plt+0x2da0>
   13cd4:	mov	r3, #116	; 0x74
   13cd8:	b	138b0 <__assert_fail@plt+0x2954>
   13cdc:	mov	r3, #118	; 0x76
   13ce0:	b	13a40 <__assert_fail@plt+0x2ae4>
   13ce4:	cmp	sl, #2
   13ce8:	bne	13d58 <__assert_fail@plt+0x2dfc>
   13cec:	cmp	r6, #0
   13cf0:	bne	13798 <__assert_fail@plt+0x283c>
   13cf4:	mov	r5, r6
   13cf8:	mov	fp, r6
   13cfc:	ldr	r3, [sp, #48]	; 0x30
   13d00:	eor	fp, fp, #1
   13d04:	and	fp, fp, r3
   13d08:	tst	fp, #255	; 0xff
   13d0c:	beq	13d38 <__assert_fail@plt+0x2ddc>
   13d10:	cmp	r9, r4
   13d14:	movhi	r3, #39	; 0x27
   13d18:	strbhi	r3, [r8, r4]
   13d1c:	add	r3, r4, #1
   13d20:	cmp	r9, r3
   13d24:	movhi	r2, #39	; 0x27
   13d28:	add	r4, r4, #2
   13d2c:	strbhi	r2, [r8, r3]
   13d30:	mov	r3, #0
   13d34:	str	r3, [sp, #48]	; 0x30
   13d38:	cmp	r9, r4
   13d3c:	strbhi	r7, [r8, r4]
   13d40:	ldr	r3, [sp, #72]	; 0x48
   13d44:	cmp	r5, #0
   13d48:	moveq	r3, #0
   13d4c:	add	r4, r4, #1
   13d50:	str	r3, [sp, #72]	; 0x48
   13d54:	b	13b3c <__assert_fail@plt+0x2be0>
   13d58:	ldr	r3, [sp, #24]
   13d5c:	and	r3, r3, r6
   13d60:	tst	r5, r3
   13d64:	moveq	r3, r7
   13d68:	beq	138b0 <__assert_fail@plt+0x2954>
   13d6c:	mov	fp, #0
   13d70:	mov	r5, fp
   13d74:	b	13cfc <__assert_fail@plt+0x2da0>
   13d78:	mov	r3, #110	; 0x6e
   13d7c:	b	138b0 <__assert_fail@plt+0x2954>
   13d80:	mov	r3, #97	; 0x61
   13d84:	b	13a40 <__assert_fail@plt+0x2ae4>
   13d88:	mov	r3, #102	; 0x66
   13d8c:	b	13a40 <__assert_fail@plt+0x2ae4>
   13d90:	ldr	r3, [sp, #36]	; 0x24
   13d94:	cmn	r3, #1
   13d98:	bne	13db8 <__assert_fail@plt+0x2e5c>
   13d9c:	ldr	r3, [sp, #44]	; 0x2c
   13da0:	ldrb	r3, [r3, #1]
   13da4:	adds	r3, r3, #0
   13da8:	movne	r3, #1
   13dac:	cmp	r3, #0
   13db0:	bne	13b50 <__assert_fail@plt+0x2bf4>
   13db4:	b	13a14 <__assert_fail@plt+0x2ab8>
   13db8:	ldr	r3, [sp, #36]	; 0x24
   13dbc:	subs	r3, r3, #1
   13dc0:	b	13da8 <__assert_fail@plt+0x2e4c>
   13dc4:	mov	r3, #0
   13dc8:	str	r3, [sp, #96]	; 0x60
   13dcc:	str	r3, [sp, #100]	; 0x64
   13dd0:	ldr	r3, [sp, #36]	; 0x24
   13dd4:	cmn	r3, #1
   13dd8:	bne	13de8 <__assert_fail@plt+0x2e8c>
   13ddc:	ldr	r0, [sp, #44]	; 0x2c
   13de0:	bl	10e60 <strlen@plt>
   13de4:	str	r0, [sp, #36]	; 0x24
   13de8:	ldr	r5, [sp, #52]	; 0x34
   13dec:	mov	r3, #0
   13df0:	str	r3, [sp, #56]	; 0x38
   13df4:	ldr	r3, [sp, #28]
   13df8:	ldr	r2, [sp, #56]	; 0x38
   13dfc:	ldr	r1, [sp, #36]	; 0x24
   13e00:	add	r2, r3, r2
   13e04:	ldr	r3, [sp, #44]	; 0x2c
   13e08:	add	r0, sp, #92	; 0x5c
   13e0c:	add	fp, r3, r2
   13e10:	sub	r2, r1, r2
   13e14:	add	r3, sp, #96	; 0x60
   13e18:	mov	r1, fp
   13e1c:	bl	159c0 <__assert_fail@plt+0x4a64>
   13e20:	subs	r2, r0, #0
   13e24:	beq	13e64 <__assert_fail@plt+0x2f08>
   13e28:	cmn	r2, #1
   13e2c:	beq	1403c <__assert_fail@plt+0x30e0>
   13e30:	cmn	r2, #2
   13e34:	bne	13fac <__assert_fail@plt+0x3050>
   13e38:	ldr	r2, [sp, #56]	; 0x38
   13e3c:	ldr	r3, [sp, #28]
   13e40:	add	r3, r3, r2
   13e44:	ldr	r2, [sp, #36]	; 0x24
   13e48:	cmp	r2, r3
   13e4c:	bls	1403c <__assert_fail@plt+0x30e0>
   13e50:	ldr	r3, [sp, #80]	; 0x50
   13e54:	ldr	r2, [sp, #56]	; 0x38
   13e58:	ldrb	r5, [r3, r2]
   13e5c:	cmp	r5, #0
   13e60:	bne	13f9c <__assert_fail@plt+0x3040>
   13e64:	ldr	r3, [sp, #56]	; 0x38
   13e68:	cmp	r3, #1
   13e6c:	bls	13874 <__assert_fail@plt+0x2918>
   13e70:	ldr	r2, [sp, #56]	; 0x38
   13e74:	ldr	r3, [sp, #28]
   13e78:	mov	fp, #0
   13e7c:	add	r3, r3, r2
   13e80:	ldr	r2, [sp, #24]
   13e84:	str	r3, [sp, #52]	; 0x34
   13e88:	eor	r3, r5, #1
   13e8c:	and	r3, r3, r2
   13e90:	mov	ip, #92	; 0x5c
   13e94:	uxtb	r3, r3
   13e98:	mov	r2, #39	; 0x27
   13e9c:	cmp	r3, #0
   13ea0:	beq	14044 <__assert_fail@plt+0x30e8>
   13ea4:	cmp	r6, #0
   13ea8:	bne	13794 <__assert_fail@plt+0x2838>
   13eac:	ldr	r1, [sp, #48]	; 0x30
   13eb0:	eor	r1, r1, #1
   13eb4:	cmp	sl, #2
   13eb8:	movne	r1, #0
   13ebc:	andeq	r1, r1, #1
   13ec0:	cmp	r1, #0
   13ec4:	beq	13ef4 <__assert_fail@plt+0x2f98>
   13ec8:	add	r0, r4, #1
   13ecc:	cmp	r9, r4
   13ed0:	strbhi	r2, [r8, r4]
   13ed4:	cmp	r9, r0
   13ed8:	movhi	lr, #36	; 0x24
   13edc:	strbhi	lr, [r8, r0]
   13ee0:	add	r0, r4, #2
   13ee4:	add	r4, r4, #3
   13ee8:	cmp	r9, r0
   13eec:	strbhi	r2, [r8, r0]
   13ef0:	str	r1, [sp, #48]	; 0x30
   13ef4:	add	r0, r4, #1
   13ef8:	cmp	r9, r4
   13efc:	strbhi	ip, [r8, r4]
   13f00:	cmp	r9, r0
   13f04:	lsrhi	r1, r7, #6
   13f08:	addhi	r1, r1, #48	; 0x30
   13f0c:	strbhi	r1, [r8, r0]
   13f10:	add	r0, r4, #2
   13f14:	cmp	r9, r0
   13f18:	lsrhi	r1, r7, #3
   13f1c:	and	r7, r7, #7
   13f20:	andhi	r1, r1, #7
   13f24:	add	r4, r4, #3
   13f28:	add	r7, r7, #48	; 0x30
   13f2c:	mov	fp, r3
   13f30:	addhi	r1, r1, #48	; 0x30
   13f34:	strbhi	r1, [r8, r0]
   13f38:	ldr	r1, [sp, #28]
   13f3c:	ldr	r0, [sp, #52]	; 0x34
   13f40:	add	r1, r1, #1
   13f44:	cmp	r0, r1
   13f48:	bls	13cfc <__assert_fail@plt+0x2da0>
   13f4c:	ldr	lr, [sp, #48]	; 0x30
   13f50:	eor	r0, fp, #1
   13f54:	and	r0, r0, lr
   13f58:	tst	r0, #255	; 0xff
   13f5c:	beq	13f80 <__assert_fail@plt+0x3024>
   13f60:	add	r0, r4, #1
   13f64:	cmp	r9, r4
   13f68:	strbhi	r2, [r8, r4]
   13f6c:	cmp	r9, r0
   13f70:	add	r4, r4, #2
   13f74:	strbhi	r2, [r8, r0]
   13f78:	mov	r0, #0
   13f7c:	str	r0, [sp, #48]	; 0x30
   13f80:	ldr	r0, [sp, #44]	; 0x2c
   13f84:	cmp	r9, r4
   13f88:	strbhi	r7, [r8, r4]
   13f8c:	str	r1, [sp, #28]
   13f90:	add	r4, r4, #1
   13f94:	ldrb	r7, [r0, r1]
   13f98:	b	13e9c <__assert_fail@plt+0x2f40>
   13f9c:	ldr	r3, [sp, #56]	; 0x38
   13fa0:	add	r3, r3, #1
   13fa4:	str	r3, [sp, #56]	; 0x38
   13fa8:	b	13e38 <__assert_fail@plt+0x2edc>
   13fac:	cmp	sl, #2
   13fb0:	movne	r3, #0
   13fb4:	andeq	r3, r6, #1
   13fb8:	cmp	r3, #0
   13fbc:	movne	r1, #1
   13fc0:	bne	1401c <__assert_fail@plt+0x30c0>
   13fc4:	ldr	r0, [sp, #92]	; 0x5c
   13fc8:	str	r2, [sp, #84]	; 0x54
   13fcc:	bl	10db8 <iswprint@plt>
   13fd0:	ldr	r3, [sp, #56]	; 0x38
   13fd4:	ldr	r2, [sp, #84]	; 0x54
   13fd8:	add	r3, r3, r2
   13fdc:	str	r3, [sp, #56]	; 0x38
   13fe0:	cmp	r0, #0
   13fe4:	add	r0, sp, #96	; 0x60
   13fe8:	moveq	r5, #0
   13fec:	bl	10d58 <mbsinit@plt>
   13ff0:	cmp	r0, #0
   13ff4:	beq	13df4 <__assert_fail@plt+0x2e98>
   13ff8:	b	13e64 <__assert_fail@plt+0x2f08>
   13ffc:	ldrb	r3, [fp, r1]
   14000:	cmp	r3, #94	; 0x5e
   14004:	beq	138c4 <__assert_fail@plt+0x2968>
   14008:	bhi	14028 <__assert_fail@plt+0x30cc>
   1400c:	sub	r3, r3, #91	; 0x5b
   14010:	cmp	r3, #1
   14014:	bls	138c4 <__assert_fail@plt+0x2968>
   14018:	add	r1, r1, #1
   1401c:	cmp	r1, r2
   14020:	bne	13ffc <__assert_fail@plt+0x30a0>
   14024:	b	13fc4 <__assert_fail@plt+0x3068>
   14028:	cmp	r3, #96	; 0x60
   1402c:	beq	138c4 <__assert_fail@plt+0x2968>
   14030:	cmp	r3, #124	; 0x7c
   14034:	bne	14018 <__assert_fail@plt+0x30bc>
   14038:	b	138c4 <__assert_fail@plt+0x2968>
   1403c:	mov	r5, #0
   14040:	b	13e64 <__assert_fail@plt+0x2f08>
   14044:	ldr	r1, [sp, #64]	; 0x40
   14048:	cmp	r1, #0
   1404c:	beq	13f38 <__assert_fail@plt+0x2fdc>
   14050:	cmp	r9, r4
   14054:	strbhi	ip, [r8, r4]
   14058:	str	r3, [sp, #64]	; 0x40
   1405c:	add	r4, r4, #1
   14060:	b	13f38 <__assert_fail@plt+0x2fdc>
   14064:	mov	r5, fp
   14068:	ldr	fp, [sp, #24]
   1406c:	mov	r7, #48	; 0x30
   14070:	b	13c0c <__assert_fail@plt+0x2cb0>
   14074:	mov	r5, #0
   14078:	mov	fp, r5
   1407c:	b	13c0c <__assert_fail@plt+0x2cb0>
   14080:	ldr	r3, [sp, #36]	; 0x24
   14084:	ldr	r2, [sp, #28]
   14088:	subs	r3, r3, r2
   1408c:	movne	r3, #1
   14090:	b	13508 <__assert_fail@plt+0x25ac>
   14094:	ldr	r3, [sp, #60]	; 0x3c
   14098:	clz	r7, r9
   1409c:	cmp	r3, #0
   140a0:	lsr	r7, r7, #5
   140a4:	moveq	r7, #0
   140a8:	cmp	r7, #0
   140ac:	mov	r5, r3
   140b0:	bne	13468 <__assert_fail@plt+0x250c>
   140b4:	ldr	r3, [sp, #68]	; 0x44
   140b8:	ldr	r2, [sp, #40]	; 0x28
   140bc:	cmp	r2, #0
   140c0:	moveq	r3, #0
   140c4:	andne	r3, r3, #1
   140c8:	cmp	r3, #0
   140cc:	movne	r3, r2
   140d0:	subne	r2, r3, #1
   140d4:	bne	14104 <__assert_fail@plt+0x31a8>
   140d8:	cmp	r9, r4
   140dc:	movhi	r3, #0
   140e0:	strbhi	r3, [r8, r4]
   140e4:	mov	r0, r4
   140e8:	add	sp, sp, #108	; 0x6c
   140ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140f0:	mov	r3, r2
   140f4:	b	140b8 <__assert_fail@plt+0x315c>
   140f8:	cmp	r9, r4
   140fc:	strbhi	r3, [r8, r4]
   14100:	add	r4, r4, #1
   14104:	ldrb	r3, [r2, #1]!
   14108:	cmp	r3, #0
   1410c:	bne	140f8 <__assert_fail@plt+0x319c>
   14110:	b	140d8 <__assert_fail@plt+0x317c>
   14114:	ldr	r3, [pc, #32]	; 1413c <__assert_fail@plt+0x31e0>
   14118:	mov	r6, #1
   1411c:	str	r6, [sp, #24]
   14120:	str	r6, [sp, #32]
   14124:	str	r3, [sp, #40]	; 0x28
   14128:	mov	r4, #0
   1412c:	mov	sl, #5
   14130:	b	134d8 <__assert_fail@plt+0x257c>
   14134:	mov	r6, #1
   14138:	b	136cc <__assert_fail@plt+0x2770>
   1413c:	andeq	r7, r1, r7, lsr r5
   14140:	andeq	r7, r1, r9, lsr r5
   14144:	andeq	r6, r1, r0, lsl #9
   14148:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1414c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14150:	sub	sp, sp, #52	; 0x34
   14154:	mov	r6, r0
   14158:	mov	r5, r3
   1415c:	mov	r8, r1
   14160:	mov	r9, r2
   14164:	bl	10e78 <__errno_location@plt>
   14168:	ldr	r7, [pc, #380]	; 142ec <__assert_fail@plt+0x3390>
   1416c:	cmn	r6, #-2147483647	; 0x80000001
   14170:	ldr	r4, [r7]
   14174:	ldr	r3, [r0]
   14178:	str	r0, [sp, #24]
   1417c:	str	r3, [sp, #32]
   14180:	movne	r3, #0
   14184:	moveq	r3, #1
   14188:	orrs	r3, r3, r6, lsr #31
   1418c:	beq	14194 <__assert_fail@plt+0x3238>
   14190:	bl	10f44 <abort@plt>
   14194:	ldr	r2, [r7, #4]
   14198:	cmp	r6, r2
   1419c:	blt	1420c <__assert_fail@plt+0x32b0>
   141a0:	add	r1, sp, #48	; 0x30
   141a4:	add	sl, r7, #8
   141a8:	str	r2, [r1, #-4]!
   141ac:	cmp	r4, sl
   141b0:	mov	r3, #8
   141b4:	sub	r2, r6, r2
   141b8:	movne	r0, r4
   141bc:	str	r3, [sp]
   141c0:	add	r2, r2, #1
   141c4:	mvn	r3, #-2147483648	; 0x80000000
   141c8:	moveq	r0, #0
   141cc:	bl	14f4c <__assert_fail@plt+0x3ff0>
   141d0:	cmp	r4, sl
   141d4:	ldr	r2, [sp, #44]	; 0x2c
   141d8:	mov	fp, r0
   141dc:	str	r0, [r7]
   141e0:	ldmeq	r4, {r0, r1}
   141e4:	mov	r4, fp
   141e8:	stmeq	fp, {r0, r1}
   141ec:	ldr	r0, [r7, #4]
   141f0:	mov	r1, #0
   141f4:	sub	r2, r2, r0
   141f8:	add	r0, fp, r0, lsl #3
   141fc:	lsl	r2, r2, #3
   14200:	bl	10e9c <memset@plt>
   14204:	ldr	r3, [sp, #44]	; 0x2c
   14208:	str	r3, [r7, #4]
   1420c:	ldr	r3, [r5, #4]
   14210:	add	sl, r4, r6, lsl #3
   14214:	orr	r3, r3, #1
   14218:	str	r3, [sp, #28]
   1421c:	add	r3, r5, #8
   14220:	str	r3, [sp, #36]	; 0x24
   14224:	ldr	r3, [r5, #44]	; 0x2c
   14228:	ldr	fp, [r4, r6, lsl #3]
   1422c:	ldr	r7, [sl, #4]
   14230:	str	r3, [sp, #16]
   14234:	ldr	r3, [r5, #40]	; 0x28
   14238:	mov	r2, r8
   1423c:	str	r3, [sp, #12]
   14240:	add	r3, r5, #8
   14244:	str	r3, [sp, #8]
   14248:	ldr	r3, [sp, #28]
   1424c:	mov	r1, fp
   14250:	str	r3, [sp, #4]
   14254:	ldr	r3, [r5]
   14258:	mov	r0, r7
   1425c:	str	r3, [sp]
   14260:	mov	r3, r9
   14264:	bl	13418 <__assert_fail@plt+0x24bc>
   14268:	cmp	fp, r0
   1426c:	bhi	142d4 <__assert_fail@plt+0x3378>
   14270:	ldr	r3, [pc, #120]	; 142f0 <__assert_fail@plt+0x3394>
   14274:	add	fp, r0, #1
   14278:	cmp	r7, r3
   1427c:	str	fp, [r4, r6, lsl #3]
   14280:	beq	1428c <__assert_fail@plt+0x3330>
   14284:	mov	r0, r7
   14288:	bl	131d4 <__assert_fail@plt+0x2278>
   1428c:	mov	r0, fp
   14290:	bl	14e04 <__assert_fail@plt+0x3ea8>
   14294:	ldr	r3, [r5, #44]	; 0x2c
   14298:	mov	r2, r8
   1429c:	mov	r1, fp
   142a0:	str	r0, [sl, #4]
   142a4:	str	r3, [sp, #16]
   142a8:	ldr	r3, [r5, #40]	; 0x28
   142ac:	mov	r7, r0
   142b0:	str	r3, [sp, #12]
   142b4:	add	r3, r5, #8
   142b8:	str	r3, [sp, #8]
   142bc:	ldr	r3, [sp, #28]
   142c0:	str	r3, [sp, #4]
   142c4:	ldr	r3, [r5]
   142c8:	str	r3, [sp]
   142cc:	mov	r3, r9
   142d0:	bl	13418 <__assert_fail@plt+0x24bc>
   142d4:	ldr	r3, [sp, #24]
   142d8:	ldr	r2, [sp, #32]
   142dc:	mov	r0, r7
   142e0:	str	r2, [r3]
   142e4:	add	sp, sp, #52	; 0x34
   142e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142ec:	strdeq	r8, [r2], -ip
   142f0:	andeq	sl, r2, r4, ror r4
   142f4:	push	{r4, r5, r6, lr}
   142f8:	mov	r5, r0
   142fc:	bl	10e78 <__errno_location@plt>
   14300:	cmp	r5, #0
   14304:	mov	r1, #48	; 0x30
   14308:	ldr	r6, [r0]
   1430c:	mov	r4, r0
   14310:	ldr	r0, [pc, #12]	; 14324 <__assert_fail@plt+0x33c8>
   14314:	movne	r0, r5
   14318:	bl	151e0 <__assert_fail@plt+0x4284>
   1431c:	str	r6, [r4]
   14320:	pop	{r4, r5, r6, pc}
   14324:	andeq	sl, r2, r4, ror r5
   14328:	ldr	r3, [pc, #12]	; 1433c <__assert_fail@plt+0x33e0>
   1432c:	cmp	r0, #0
   14330:	moveq	r0, r3
   14334:	ldr	r0, [r0]
   14338:	bx	lr
   1433c:	andeq	sl, r2, r4, ror r5
   14340:	ldr	r3, [pc, #12]	; 14354 <__assert_fail@plt+0x33f8>
   14344:	cmp	r0, #0
   14348:	moveq	r0, r3
   1434c:	str	r1, [r0]
   14350:	bx	lr
   14354:	andeq	sl, r2, r4, ror r5
   14358:	ldr	r3, [pc, #52]	; 14394 <__assert_fail@plt+0x3438>
   1435c:	cmp	r0, #0
   14360:	moveq	r0, r3
   14364:	add	r3, r0, #8
   14368:	push	{lr}		; (str lr, [sp, #-4]!)
   1436c:	lsr	lr, r1, #5
   14370:	and	r1, r1, #31
   14374:	ldr	ip, [r3, lr, lsl #2]
   14378:	lsr	r0, ip, r1
   1437c:	eor	r2, r2, r0
   14380:	and	r2, r2, #1
   14384:	and	r0, r0, #1
   14388:	eor	r1, ip, r2, lsl r1
   1438c:	str	r1, [r3, lr, lsl #2]
   14390:	pop	{pc}		; (ldr pc, [sp], #4)
   14394:	andeq	sl, r2, r4, ror r5
   14398:	ldr	r3, [pc, #16]	; 143b0 <__assert_fail@plt+0x3454>
   1439c:	cmp	r0, #0
   143a0:	movne	r3, r0
   143a4:	ldr	r0, [r3, #4]
   143a8:	str	r1, [r3, #4]
   143ac:	bx	lr
   143b0:	andeq	sl, r2, r4, ror r5
   143b4:	ldr	r3, [pc, #44]	; 143e8 <__assert_fail@plt+0x348c>
   143b8:	cmp	r0, #0
   143bc:	moveq	r0, r3
   143c0:	mov	r3, #10
   143c4:	cmp	r2, #0
   143c8:	cmpne	r1, #0
   143cc:	str	r3, [r0]
   143d0:	bne	143dc <__assert_fail@plt+0x3480>
   143d4:	push	{r4, lr}
   143d8:	bl	10f44 <abort@plt>
   143dc:	str	r1, [r0, #40]	; 0x28
   143e0:	str	r2, [r0, #44]	; 0x2c
   143e4:	bx	lr
   143e8:	andeq	sl, r2, r4, ror r5
   143ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   143f0:	sub	sp, sp, #24
   143f4:	mov	sl, r3
   143f8:	ldr	r4, [sp, #56]	; 0x38
   143fc:	ldr	r3, [pc, #100]	; 14468 <__assert_fail@plt+0x350c>
   14400:	cmp	r4, #0
   14404:	moveq	r4, r3
   14408:	mov	r7, r0
   1440c:	mov	r8, r1
   14410:	mov	r9, r2
   14414:	bl	10e78 <__errno_location@plt>
   14418:	ldr	r3, [r4, #44]	; 0x2c
   1441c:	mov	r2, r9
   14420:	mov	r1, r8
   14424:	ldr	r6, [r0]
   14428:	str	r3, [sp, #16]
   1442c:	ldr	r3, [r4, #40]	; 0x28
   14430:	mov	r5, r0
   14434:	str	r3, [sp, #12]
   14438:	add	r3, r4, #8
   1443c:	str	r3, [sp, #8]
   14440:	ldr	r3, [r4, #4]
   14444:	mov	r0, r7
   14448:	str	r3, [sp, #4]
   1444c:	ldr	r3, [r4]
   14450:	str	r3, [sp]
   14454:	mov	r3, sl
   14458:	bl	13418 <__assert_fail@plt+0x24bc>
   1445c:	str	r6, [r5]
   14460:	add	sp, sp, #24
   14464:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14468:	andeq	sl, r2, r4, ror r5
   1446c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14470:	cmp	r3, #0
   14474:	sub	sp, sp, #44	; 0x2c
   14478:	ldr	r4, [pc, #188]	; 1453c <__assert_fail@plt+0x35e0>
   1447c:	mov	r6, r2
   14480:	movne	r4, r3
   14484:	mov	sl, r1
   14488:	mov	r9, r0
   1448c:	bl	10e78 <__errno_location@plt>
   14490:	ldr	r5, [r4, #4]
   14494:	add	fp, r4, #8
   14498:	cmp	r6, #0
   1449c:	orreq	r5, r5, #1
   144a0:	mov	r1, #0
   144a4:	mov	r2, r9
   144a8:	ldr	r3, [r0]
   144ac:	mov	r8, r0
   144b0:	str	r3, [sp, #28]
   144b4:	ldr	r3, [r4, #44]	; 0x2c
   144b8:	mov	r0, r1
   144bc:	str	r3, [sp, #16]
   144c0:	ldr	r3, [r4, #40]	; 0x28
   144c4:	stmib	sp, {r5, fp}
   144c8:	str	r3, [sp, #12]
   144cc:	ldr	r3, [r4]
   144d0:	str	r3, [sp]
   144d4:	mov	r3, sl
   144d8:	bl	13418 <__assert_fail@plt+0x24bc>
   144dc:	add	r1, r0, #1
   144e0:	mov	r7, r0
   144e4:	mov	r0, r1
   144e8:	str	r1, [sp, #36]	; 0x24
   144ec:	bl	14e04 <__assert_fail@plt+0x3ea8>
   144f0:	ldr	r3, [r4, #44]	; 0x2c
   144f4:	mov	r2, r9
   144f8:	str	r3, [sp, #16]
   144fc:	ldr	r3, [r4, #40]	; 0x28
   14500:	stmib	sp, {r5, fp}
   14504:	str	r3, [sp, #12]
   14508:	ldr	r3, [r4]
   1450c:	ldr	r1, [sp, #36]	; 0x24
   14510:	str	r3, [sp]
   14514:	mov	r3, sl
   14518:	str	r0, [sp, #32]
   1451c:	bl	13418 <__assert_fail@plt+0x24bc>
   14520:	ldr	r3, [sp, #28]
   14524:	cmp	r6, #0
   14528:	str	r3, [r8]
   1452c:	ldr	r0, [sp, #32]
   14530:	strne	r7, [r6]
   14534:	add	sp, sp, #44	; 0x2c
   14538:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1453c:	andeq	sl, r2, r4, ror r5
   14540:	mov	r3, r2
   14544:	mov	r2, #0
   14548:	b	1446c <__assert_fail@plt+0x3510>
   1454c:	push	{r4, r5, r6, r7, r8, lr}
   14550:	mov	r6, #1
   14554:	ldr	r4, [pc, #104]	; 145c4 <__assert_fail@plt+0x3668>
   14558:	ldr	r5, [r4]
   1455c:	add	r7, r5, #12
   14560:	ldr	r3, [r4, #4]
   14564:	add	r7, r7, #8
   14568:	cmp	r6, r3
   1456c:	blt	145b4 <__assert_fail@plt+0x3658>
   14570:	ldr	r0, [r5, #4]
   14574:	ldr	r6, [pc, #76]	; 145c8 <__assert_fail@plt+0x366c>
   14578:	cmp	r0, r6
   1457c:	beq	14590 <__assert_fail@plt+0x3634>
   14580:	bl	131d4 <__assert_fail@plt+0x2278>
   14584:	mov	r3, #256	; 0x100
   14588:	str	r3, [r4, #8]
   1458c:	str	r6, [r4, #12]
   14590:	ldr	r6, [pc, #52]	; 145cc <__assert_fail@plt+0x3670>
   14594:	cmp	r5, r6
   14598:	beq	145a8 <__assert_fail@plt+0x364c>
   1459c:	mov	r0, r5
   145a0:	bl	131d4 <__assert_fail@plt+0x2278>
   145a4:	str	r6, [r4]
   145a8:	mov	r3, #1
   145ac:	str	r3, [r4, #4]
   145b0:	pop	{r4, r5, r6, r7, r8, pc}
   145b4:	ldr	r0, [r7, #-8]
   145b8:	bl	131d4 <__assert_fail@plt+0x2278>
   145bc:	add	r6, r6, #1
   145c0:	b	14560 <__assert_fail@plt+0x3604>
   145c4:	strdeq	r8, [r2], -ip
   145c8:	andeq	sl, r2, r4, ror r4
   145cc:	andeq	r8, r2, r4, lsl #2
   145d0:	ldr	r3, [pc, #4]	; 145dc <__assert_fail@plt+0x3680>
   145d4:	mvn	r2, #0
   145d8:	b	1414c <__assert_fail@plt+0x31f0>
   145dc:	andeq	sl, r2, r4, ror r5
   145e0:	ldr	r3, [pc]	; 145e8 <__assert_fail@plt+0x368c>
   145e4:	b	1414c <__assert_fail@plt+0x31f0>
   145e8:	andeq	sl, r2, r4, ror r5
   145ec:	mov	r1, r0
   145f0:	mov	r0, #0
   145f4:	b	145d0 <__assert_fail@plt+0x3674>
   145f8:	mov	r2, r1
   145fc:	mov	r1, r0
   14600:	mov	r0, #0
   14604:	b	145e0 <__assert_fail@plt+0x3684>
   14608:	push	{r4, r5, lr}
   1460c:	sub	sp, sp, #52	; 0x34
   14610:	mov	r5, r2
   14614:	mov	r4, r0
   14618:	mov	r0, sp
   1461c:	bl	132d4 <__assert_fail@plt+0x2378>
   14620:	mov	r3, sp
   14624:	mvn	r2, #0
   14628:	mov	r1, r5
   1462c:	mov	r0, r4
   14630:	bl	1414c <__assert_fail@plt+0x31f0>
   14634:	add	sp, sp, #52	; 0x34
   14638:	pop	{r4, r5, pc}
   1463c:	push	{r4, r5, r6, lr}
   14640:	sub	sp, sp, #48	; 0x30
   14644:	mov	r5, r2
   14648:	mov	r6, r3
   1464c:	mov	r4, r0
   14650:	mov	r0, sp
   14654:	bl	132d4 <__assert_fail@plt+0x2378>
   14658:	mov	r3, sp
   1465c:	mov	r2, r6
   14660:	mov	r1, r5
   14664:	mov	r0, r4
   14668:	bl	1414c <__assert_fail@plt+0x31f0>
   1466c:	add	sp, sp, #48	; 0x30
   14670:	pop	{r4, r5, r6, pc}
   14674:	mov	r2, r1
   14678:	mov	r1, r0
   1467c:	mov	r0, #0
   14680:	b	14608 <__assert_fail@plt+0x36ac>
   14684:	mov	r3, r2
   14688:	mov	r2, r1
   1468c:	mov	r1, r0
   14690:	mov	r0, #0
   14694:	b	1463c <__assert_fail@plt+0x36e0>
   14698:	push	{r4, r5, r6, lr}
   1469c:	mov	r4, r0
   146a0:	ldr	lr, [pc, #80]	; 146f8 <__assert_fail@plt+0x379c>
   146a4:	mov	r5, r1
   146a8:	mov	r6, r2
   146ac:	ldm	lr!, {r0, r1, r2, r3}
   146b0:	sub	sp, sp, #48	; 0x30
   146b4:	mov	ip, sp
   146b8:	stmia	ip!, {r0, r1, r2, r3}
   146bc:	ldm	lr!, {r0, r1, r2, r3}
   146c0:	stmia	ip!, {r0, r1, r2, r3}
   146c4:	ldm	lr, {r0, r1, r2, r3}
   146c8:	stm	ip, {r0, r1, r2, r3}
   146cc:	mov	r1, r6
   146d0:	mov	r2, #1
   146d4:	mov	r0, sp
   146d8:	bl	14358 <__assert_fail@plt+0x33fc>
   146dc:	mov	r3, sp
   146e0:	mov	r2, r5
   146e4:	mov	r1, r4
   146e8:	mov	r0, #0
   146ec:	bl	1414c <__assert_fail@plt+0x31f0>
   146f0:	add	sp, sp, #48	; 0x30
   146f4:	pop	{r4, r5, r6, pc}
   146f8:	andeq	sl, r2, r4, ror r5
   146fc:	mov	r2, r1
   14700:	mvn	r1, #0
   14704:	b	14698 <__assert_fail@plt+0x373c>
   14708:	mov	r1, #58	; 0x3a
   1470c:	b	146fc <__assert_fail@plt+0x37a0>
   14710:	mov	r2, #58	; 0x3a
   14714:	b	14698 <__assert_fail@plt+0x373c>
   14718:	push	{r4, r5, lr}
   1471c:	sub	sp, sp, #100	; 0x64
   14720:	mov	r4, r0
   14724:	mov	r0, sp
   14728:	mov	r5, r2
   1472c:	bl	132d4 <__assert_fail@plt+0x2378>
   14730:	mov	ip, sp
   14734:	add	lr, sp, #48	; 0x30
   14738:	ldm	ip!, {r0, r1, r2, r3}
   1473c:	stmia	lr!, {r0, r1, r2, r3}
   14740:	ldm	ip!, {r0, r1, r2, r3}
   14744:	stmia	lr!, {r0, r1, r2, r3}
   14748:	ldm	ip, {r0, r1, r2, r3}
   1474c:	stm	lr, {r0, r1, r2, r3}
   14750:	mov	r2, #1
   14754:	mov	r1, #58	; 0x3a
   14758:	add	r0, sp, #48	; 0x30
   1475c:	bl	14358 <__assert_fail@plt+0x33fc>
   14760:	add	r3, sp, #48	; 0x30
   14764:	mvn	r2, #0
   14768:	mov	r1, r5
   1476c:	mov	r0, r4
   14770:	bl	1414c <__assert_fail@plt+0x31f0>
   14774:	add	sp, sp, #100	; 0x64
   14778:	pop	{r4, r5, pc}
   1477c:	push	{r4, r5, r6, r7, lr}
   14780:	mov	r4, r0
   14784:	ldr	lr, [pc, #84]	; 147e0 <__assert_fail@plt+0x3884>
   14788:	mov	r6, r1
   1478c:	mov	r7, r2
   14790:	mov	r5, r3
   14794:	ldm	lr!, {r0, r1, r2, r3}
   14798:	sub	sp, sp, #52	; 0x34
   1479c:	mov	ip, sp
   147a0:	stmia	ip!, {r0, r1, r2, r3}
   147a4:	ldm	lr!, {r0, r1, r2, r3}
   147a8:	stmia	ip!, {r0, r1, r2, r3}
   147ac:	ldm	lr, {r0, r1, r2, r3}
   147b0:	stm	ip, {r0, r1, r2, r3}
   147b4:	mov	r2, r7
   147b8:	mov	r1, r6
   147bc:	mov	r0, sp
   147c0:	bl	143b4 <__assert_fail@plt+0x3458>
   147c4:	mov	r3, sp
   147c8:	ldr	r2, [sp, #72]	; 0x48
   147cc:	mov	r1, r5
   147d0:	mov	r0, r4
   147d4:	bl	1414c <__assert_fail@plt+0x31f0>
   147d8:	add	sp, sp, #52	; 0x34
   147dc:	pop	{r4, r5, r6, r7, pc}
   147e0:	andeq	sl, r2, r4, ror r5
   147e4:	mvn	ip, #0
   147e8:	push	{r0, r1, r2, lr}
   147ec:	str	ip, [sp]
   147f0:	bl	1477c <__assert_fail@plt+0x3820>
   147f4:	add	sp, sp, #12
   147f8:	pop	{pc}		; (ldr pc, [sp], #4)
   147fc:	mov	r3, r2
   14800:	mov	r2, r1
   14804:	mov	r1, r0
   14808:	mov	r0, #0
   1480c:	b	147e4 <__assert_fail@plt+0x3888>
   14810:	push	{r0, r1, r2, lr}
   14814:	str	r3, [sp]
   14818:	mov	r3, r2
   1481c:	mov	r2, r1
   14820:	mov	r1, r0
   14824:	mov	r0, #0
   14828:	bl	1477c <__assert_fail@plt+0x3820>
   1482c:	add	sp, sp, #12
   14830:	pop	{pc}		; (ldr pc, [sp], #4)
   14834:	ldr	r3, [pc]	; 1483c <__assert_fail@plt+0x38e0>
   14838:	b	1414c <__assert_fail@plt+0x31f0>
   1483c:	andeq	r8, r2, ip, lsl #2
   14840:	mov	r2, r1
   14844:	mov	r1, r0
   14848:	mov	r0, #0
   1484c:	b	14834 <__assert_fail@plt+0x38d8>
   14850:	mvn	r2, #0
   14854:	b	14834 <__assert_fail@plt+0x38d8>
   14858:	mov	r1, r0
   1485c:	mov	r0, #0
   14860:	b	14850 <__assert_fail@plt+0x38f4>
   14864:	push	{r4, r5, r6, r7, r8, lr}
   14868:	mov	r7, r0
   1486c:	ldr	r5, [pc, #88]	; 148cc <__assert_fail@plt+0x3970>
   14870:	mov	r8, r1
   14874:	mov	r4, r2
   14878:	mov	r2, r4
   1487c:	mov	r1, r8
   14880:	mov	r0, r7
   14884:	bl	10d10 <read@plt>
   14888:	subs	r6, r0, #0
   1488c:	bge	148bc <__assert_fail@plt+0x3960>
   14890:	bl	10e78 <__errno_location@plt>
   14894:	ldr	r3, [r0]
   14898:	cmp	r3, #4
   1489c:	beq	14878 <__assert_fail@plt+0x391c>
   148a0:	cmp	r4, r5
   148a4:	movls	r4, #0
   148a8:	movhi	r4, #1
   148ac:	cmp	r3, #22
   148b0:	movne	r4, #0
   148b4:	cmp	r4, #0
   148b8:	bne	148c4 <__assert_fail@plt+0x3968>
   148bc:	mov	r0, r6
   148c0:	pop	{r4, r5, r6, r7, r8, pc}
   148c4:	mov	r4, r5
   148c8:	b	14878 <__assert_fail@plt+0x391c>
   148cc:	svcvc	0x00f00000	; IMB
   148d0:	push	{r4, r5, r6, lr}
   148d4:	sub	sp, sp, #32
   148d8:	cmp	r1, #0
   148dc:	mov	r5, r0
   148e0:	ldr	r4, [sp, #48]	; 0x30
   148e4:	ldr	r6, [sp, #52]	; 0x34
   148e8:	beq	1499c <__assert_fail@plt+0x3a40>
   148ec:	stm	sp, {r2, r3}
   148f0:	mov	r3, r1
   148f4:	ldr	r2, [pc, #860]	; 14c58 <__assert_fail@plt+0x3cfc>
   148f8:	mov	r1, #1
   148fc:	bl	10ecc <__fprintf_chk@plt>
   14900:	mov	r2, #5
   14904:	ldr	r1, [pc, #848]	; 14c5c <__assert_fail@plt+0x3d00>
   14908:	mov	r0, #0
   1490c:	bl	10d94 <dcgettext@plt>
   14910:	ldr	r3, [pc, #840]	; 14c60 <__assert_fail@plt+0x3d04>
   14914:	ldr	r2, [pc, #840]	; 14c64 <__assert_fail@plt+0x3d08>
   14918:	str	r3, [sp]
   1491c:	mov	r1, #1
   14920:	mov	r3, r0
   14924:	mov	r0, r5
   14928:	bl	10ecc <__fprintf_chk@plt>
   1492c:	mov	r1, r5
   14930:	mov	r0, #10
   14934:	bl	10d88 <fputc_unlocked@plt>
   14938:	mov	r2, #5
   1493c:	ldr	r1, [pc, #804]	; 14c68 <__assert_fail@plt+0x3d0c>
   14940:	mov	r0, #0
   14944:	bl	10d94 <dcgettext@plt>
   14948:	mov	r1, #1
   1494c:	ldr	r3, [pc, #792]	; 14c6c <__assert_fail@plt+0x3d10>
   14950:	mov	r2, r0
   14954:	mov	r0, r5
   14958:	bl	10ecc <__fprintf_chk@plt>
   1495c:	mov	r1, r5
   14960:	mov	r0, #10
   14964:	bl	10d88 <fputc_unlocked@plt>
   14968:	cmp	r6, #9
   1496c:	ldrls	pc, [pc, r6, lsl #2]
   14970:	b	14c4c <__assert_fail@plt+0x3cf0>
   14974:	andeq	r4, r1, ip, lsl #21
   14978:			; <UNDEFINED> instruction: 0x000149b4
   1497c:	andeq	r4, r1, r0, ror #19
   14980:	andeq	r4, r1, r4, lsl sl
   14984:	andeq	r4, r1, r0, asr sl
   14988:	muleq	r1, r4, sl
   1498c:	ldrdeq	r4, [r1], -ip
   14990:	andeq	r4, r1, ip, lsr #22
   14994:	andeq	r4, r1, r4, lsl #23
   14998:	andeq	r4, r1, r4, ror #23
   1499c:	str	r3, [sp]
   149a0:	mov	r1, #1
   149a4:	mov	r3, r2
   149a8:	ldr	r2, [pc, #704]	; 14c70 <__assert_fail@plt+0x3d14>
   149ac:	bl	10ecc <__fprintf_chk@plt>
   149b0:	b	14900 <__assert_fail@plt+0x39a4>
   149b4:	mov	r2, #5
   149b8:	ldr	r1, [pc, #692]	; 14c74 <__assert_fail@plt+0x3d18>
   149bc:	mov	r0, #0
   149c0:	bl	10d94 <dcgettext@plt>
   149c4:	ldr	r3, [r4]
   149c8:	mov	r1, #1
   149cc:	mov	r2, r0
   149d0:	mov	r0, r5
   149d4:	add	sp, sp, #32
   149d8:	pop	{r4, r5, r6, lr}
   149dc:	b	10ecc <__fprintf_chk@plt>
   149e0:	mov	r2, #5
   149e4:	ldr	r1, [pc, #652]	; 14c78 <__assert_fail@plt+0x3d1c>
   149e8:	mov	r0, #0
   149ec:	bl	10d94 <dcgettext@plt>
   149f0:	ldr	r3, [r4, #4]
   149f4:	mov	r1, #1
   149f8:	str	r3, [sp, #48]	; 0x30
   149fc:	ldr	r3, [r4]
   14a00:	mov	r2, r0
   14a04:	mov	r0, r5
   14a08:	add	sp, sp, #32
   14a0c:	pop	{r4, r5, r6, lr}
   14a10:	b	10ecc <__fprintf_chk@plt>
   14a14:	mov	r2, #5
   14a18:	ldr	r1, [pc, #604]	; 14c7c <__assert_fail@plt+0x3d20>
   14a1c:	mov	r0, #0
   14a20:	bl	10d94 <dcgettext@plt>
   14a24:	ldr	r3, [r4, #8]
   14a28:	mov	r1, #1
   14a2c:	str	r3, [sp, #52]	; 0x34
   14a30:	ldr	r3, [r4, #4]
   14a34:	str	r3, [sp, #48]	; 0x30
   14a38:	ldr	r3, [r4]
   14a3c:	mov	r2, r0
   14a40:	mov	r0, r5
   14a44:	add	sp, sp, #32
   14a48:	pop	{r4, r5, r6, lr}
   14a4c:	b	10ecc <__fprintf_chk@plt>
   14a50:	mov	r2, #5
   14a54:	ldr	r1, [pc, #548]	; 14c80 <__assert_fail@plt+0x3d24>
   14a58:	mov	r0, #0
   14a5c:	bl	10d94 <dcgettext@plt>
   14a60:	ldr	r3, [r4, #12]
   14a64:	mov	r1, #1
   14a68:	str	r3, [sp, #8]
   14a6c:	ldr	r3, [r4, #8]
   14a70:	str	r3, [sp, #4]
   14a74:	ldr	r3, [r4, #4]
   14a78:	str	r3, [sp]
   14a7c:	ldr	r3, [r4]
   14a80:	mov	r2, r0
   14a84:	mov	r0, r5
   14a88:	bl	10ecc <__fprintf_chk@plt>
   14a8c:	add	sp, sp, #32
   14a90:	pop	{r4, r5, r6, pc}
   14a94:	mov	r2, #5
   14a98:	ldr	r1, [pc, #484]	; 14c84 <__assert_fail@plt+0x3d28>
   14a9c:	mov	r0, #0
   14aa0:	bl	10d94 <dcgettext@plt>
   14aa4:	ldr	r3, [r4, #16]
   14aa8:	mov	r1, #1
   14aac:	str	r3, [sp, #12]
   14ab0:	ldr	r3, [r4, #12]
   14ab4:	str	r3, [sp, #8]
   14ab8:	ldr	r3, [r4, #8]
   14abc:	str	r3, [sp, #4]
   14ac0:	ldr	r3, [r4, #4]
   14ac4:	str	r3, [sp]
   14ac8:	ldr	r3, [r4]
   14acc:	mov	r2, r0
   14ad0:	mov	r0, r5
   14ad4:	bl	10ecc <__fprintf_chk@plt>
   14ad8:	b	14a8c <__assert_fail@plt+0x3b30>
   14adc:	mov	r2, #5
   14ae0:	ldr	r1, [pc, #416]	; 14c88 <__assert_fail@plt+0x3d2c>
   14ae4:	mov	r0, #0
   14ae8:	bl	10d94 <dcgettext@plt>
   14aec:	ldr	r3, [r4, #20]
   14af0:	mov	r1, #1
   14af4:	str	r3, [sp, #16]
   14af8:	ldr	r3, [r4, #16]
   14afc:	str	r3, [sp, #12]
   14b00:	ldr	r3, [r4, #12]
   14b04:	str	r3, [sp, #8]
   14b08:	ldr	r3, [r4, #8]
   14b0c:	str	r3, [sp, #4]
   14b10:	ldr	r3, [r4, #4]
   14b14:	str	r3, [sp]
   14b18:	ldr	r3, [r4]
   14b1c:	mov	r2, r0
   14b20:	mov	r0, r5
   14b24:	bl	10ecc <__fprintf_chk@plt>
   14b28:	b	14a8c <__assert_fail@plt+0x3b30>
   14b2c:	mov	r2, #5
   14b30:	ldr	r1, [pc, #340]	; 14c8c <__assert_fail@plt+0x3d30>
   14b34:	mov	r0, #0
   14b38:	bl	10d94 <dcgettext@plt>
   14b3c:	ldr	r3, [r4, #24]
   14b40:	mov	r1, #1
   14b44:	str	r3, [sp, #20]
   14b48:	ldr	r3, [r4, #20]
   14b4c:	str	r3, [sp, #16]
   14b50:	ldr	r3, [r4, #16]
   14b54:	str	r3, [sp, #12]
   14b58:	ldr	r3, [r4, #12]
   14b5c:	str	r3, [sp, #8]
   14b60:	ldr	r3, [r4, #8]
   14b64:	str	r3, [sp, #4]
   14b68:	ldr	r3, [r4, #4]
   14b6c:	str	r3, [sp]
   14b70:	ldr	r3, [r4]
   14b74:	mov	r2, r0
   14b78:	mov	r0, r5
   14b7c:	bl	10ecc <__fprintf_chk@plt>
   14b80:	b	14a8c <__assert_fail@plt+0x3b30>
   14b84:	mov	r2, #5
   14b88:	ldr	r1, [pc, #256]	; 14c90 <__assert_fail@plt+0x3d34>
   14b8c:	mov	r0, #0
   14b90:	bl	10d94 <dcgettext@plt>
   14b94:	ldr	r3, [r4, #28]
   14b98:	mov	r1, #1
   14b9c:	str	r3, [sp, #24]
   14ba0:	ldr	r3, [r4, #24]
   14ba4:	str	r3, [sp, #20]
   14ba8:	ldr	r3, [r4, #20]
   14bac:	str	r3, [sp, #16]
   14bb0:	ldr	r3, [r4, #16]
   14bb4:	str	r3, [sp, #12]
   14bb8:	ldr	r3, [r4, #12]
   14bbc:	str	r3, [sp, #8]
   14bc0:	ldr	r3, [r4, #8]
   14bc4:	str	r3, [sp, #4]
   14bc8:	ldr	r3, [r4, #4]
   14bcc:	str	r3, [sp]
   14bd0:	ldr	r3, [r4]
   14bd4:	mov	r2, r0
   14bd8:	mov	r0, r5
   14bdc:	bl	10ecc <__fprintf_chk@plt>
   14be0:	b	14a8c <__assert_fail@plt+0x3b30>
   14be4:	ldr	r1, [pc, #168]	; 14c94 <__assert_fail@plt+0x3d38>
   14be8:	mov	r2, #5
   14bec:	mov	r0, #0
   14bf0:	bl	10d94 <dcgettext@plt>
   14bf4:	ldr	r3, [r4, #32]
   14bf8:	mov	r1, #1
   14bfc:	str	r3, [sp, #28]
   14c00:	ldr	r3, [r4, #28]
   14c04:	str	r3, [sp, #24]
   14c08:	ldr	r3, [r4, #24]
   14c0c:	str	r3, [sp, #20]
   14c10:	ldr	r3, [r4, #20]
   14c14:	str	r3, [sp, #16]
   14c18:	ldr	r3, [r4, #16]
   14c1c:	str	r3, [sp, #12]
   14c20:	ldr	r3, [r4, #12]
   14c24:	str	r3, [sp, #8]
   14c28:	ldr	r3, [r4, #8]
   14c2c:	str	r3, [sp, #4]
   14c30:	ldr	r3, [r4, #4]
   14c34:	str	r3, [sp]
   14c38:	ldr	r3, [r4]
   14c3c:	mov	r2, r0
   14c40:	mov	r0, r5
   14c44:	bl	10ecc <__fprintf_chk@plt>
   14c48:	b	14a8c <__assert_fail@plt+0x3b30>
   14c4c:	mov	r2, #5
   14c50:	ldr	r1, [pc, #64]	; 14c98 <__assert_fail@plt+0x3d3c>
   14c54:	b	14bec <__assert_fail@plt+0x3c90>
   14c58:	andeq	r7, r1, r7, lsl #11
   14c5c:	muleq	r1, sl, r5
   14c60:	andeq	r0, r0, r6, ror #15
   14c64:	andeq	r7, r1, r8, ror #16
   14c68:	muleq	r1, lr, r5
   14c6c:	andeq	r7, r1, r9, asr #12
   14c70:	muleq	r1, r3, r5
   14c74:	andeq	r7, r1, fp, ror #12
   14c78:	andeq	r7, r1, fp, ror r6
   14c7c:	muleq	r1, r2, r6
   14c80:	andeq	r7, r1, lr, lsr #13
   14c84:	andeq	r7, r1, lr, asr #13
   14c88:	strdeq	r7, [r1], -r2
   14c8c:	andeq	r7, r1, sl, lsl r7
   14c90:	andeq	r7, r1, r6, asr #14
   14c94:	andeq	r7, r1, r6, ror r7
   14c98:	andeq	r7, r1, sl, lsr #15
   14c9c:	push	{r0, r1, r4, lr}
   14ca0:	mov	ip, #0
   14ca4:	ldr	lr, [sp, #16]
   14ca8:	ldr	r4, [lr, ip, lsl #2]
   14cac:	cmp	r4, #0
   14cb0:	bne	14cc8 <__assert_fail@plt+0x3d6c>
   14cb4:	str	ip, [sp, #4]
   14cb8:	str	lr, [sp]
   14cbc:	bl	148d0 <__assert_fail@plt+0x3974>
   14cc0:	add	sp, sp, #8
   14cc4:	pop	{r4, pc}
   14cc8:	add	ip, ip, #1
   14ccc:	b	14ca8 <__assert_fail@plt+0x3d4c>
   14cd0:	push	{r4, r5, lr}
   14cd4:	sub	sp, sp, #52	; 0x34
   14cd8:	mov	ip, #0
   14cdc:	ldr	r5, [sp, #64]	; 0x40
   14ce0:	add	lr, sp, #8
   14ce4:	ldr	r4, [r5, ip, lsl #2]
   14ce8:	cmp	r4, #0
   14cec:	str	r4, [lr, ip, lsl #2]
   14cf0:	beq	14d00 <__assert_fail@plt+0x3da4>
   14cf4:	add	ip, ip, #1
   14cf8:	cmp	ip, #10
   14cfc:	bne	14ce4 <__assert_fail@plt+0x3d88>
   14d00:	str	ip, [sp, #4]
   14d04:	str	lr, [sp]
   14d08:	bl	148d0 <__assert_fail@plt+0x3974>
   14d0c:	add	sp, sp, #52	; 0x34
   14d10:	pop	{r4, r5, pc}
   14d14:	push	{r3}		; (str r3, [sp, #-4]!)
   14d18:	push	{r0, r1, r2, r3, lr}
   14d1c:	add	r3, sp, #24
   14d20:	str	r3, [sp, #12]
   14d24:	str	r3, [sp]
   14d28:	ldr	r3, [sp, #20]
   14d2c:	bl	14cd0 <__assert_fail@plt+0x3d74>
   14d30:	add	sp, sp, #16
   14d34:	pop	{lr}		; (ldr lr, [sp], #4)
   14d38:	add	sp, sp, #4
   14d3c:	bx	lr
   14d40:	ldr	r3, [pc, #116]	; 14dbc <__assert_fail@plt+0x3e60>
   14d44:	push	{r4, lr}
   14d48:	mov	r0, #10
   14d4c:	ldr	r1, [r3]
   14d50:	bl	10d88 <fputc_unlocked@plt>
   14d54:	mov	r2, #5
   14d58:	ldr	r1, [pc, #96]	; 14dc0 <__assert_fail@plt+0x3e64>
   14d5c:	mov	r0, #0
   14d60:	bl	10d94 <dcgettext@plt>
   14d64:	ldr	r2, [pc, #88]	; 14dc4 <__assert_fail@plt+0x3e68>
   14d68:	mov	r1, r0
   14d6c:	mov	r0, #1
   14d70:	bl	10ea8 <__printf_chk@plt>
   14d74:	mov	r2, #5
   14d78:	ldr	r1, [pc, #72]	; 14dc8 <__assert_fail@plt+0x3e6c>
   14d7c:	mov	r0, #0
   14d80:	bl	10d94 <dcgettext@plt>
   14d84:	ldr	r3, [pc, #64]	; 14dcc <__assert_fail@plt+0x3e70>
   14d88:	ldr	r2, [pc, #64]	; 14dd0 <__assert_fail@plt+0x3e74>
   14d8c:	mov	r1, r0
   14d90:	mov	r0, #1
   14d94:	bl	10ea8 <__printf_chk@plt>
   14d98:	mov	r2, #5
   14d9c:	ldr	r1, [pc, #48]	; 14dd4 <__assert_fail@plt+0x3e78>
   14da0:	mov	r0, #0
   14da4:	bl	10d94 <dcgettext@plt>
   14da8:	ldr	r2, [pc, #40]	; 14dd8 <__assert_fail@plt+0x3e7c>
   14dac:	pop	{r4, lr}
   14db0:	mov	r1, r0
   14db4:	mov	r0, #1
   14db8:	b	10ea8 <__printf_chk@plt>
   14dbc:	andeq	r8, r2, ip, asr r1
   14dc0:	andeq	r7, r1, r6, ror #15
   14dc4:	strdeq	r7, [r1], -sl
   14dc8:	andeq	r7, r1, r0, lsl r8
   14dcc:			; <UNDEFINED> instruction: 0x00016eb7
   14dd0:	ldrdeq	r6, [r1], -pc	; <UNPREDICTABLE>
   14dd4:	andeq	r7, r1, r4, lsr #16
   14dd8:	andeq	r7, r1, fp, asr #16
   14ddc:	push	{r4, lr}
   14de0:	bl	156f4 <__assert_fail@plt+0x4798>
   14de4:	cmp	r0, #0
   14de8:	popne	{r4, pc}
   14dec:	bl	15270 <__assert_fail@plt+0x4314>
   14df0:	push	{r4, lr}
   14df4:	bl	156f4 <__assert_fail@plt+0x4798>
   14df8:	cmp	r0, #0
   14dfc:	popne	{r4, pc}
   14e00:	bl	15270 <__assert_fail@plt+0x4314>
   14e04:	b	14ddc <__assert_fail@plt+0x3e80>
   14e08:	push	{r4, r5, r6, lr}
   14e0c:	mov	r5, r0
   14e10:	mov	r4, r1
   14e14:	bl	15734 <__assert_fail@plt+0x47d8>
   14e18:	cmp	r0, #0
   14e1c:	popne	{r4, r5, r6, pc}
   14e20:	adds	r4, r4, #0
   14e24:	movne	r4, #1
   14e28:	cmp	r5, #0
   14e2c:	orreq	r4, r4, #1
   14e30:	cmp	r4, #0
   14e34:	popeq	{r4, r5, r6, pc}
   14e38:	bl	15270 <__assert_fail@plt+0x4314>
   14e3c:	push	{r4, lr}
   14e40:	cmp	r1, #0
   14e44:	orreq	r1, r1, #1
   14e48:	bl	15734 <__assert_fail@plt+0x47d8>
   14e4c:	cmp	r0, #0
   14e50:	popne	{r4, pc}
   14e54:	bl	15270 <__assert_fail@plt+0x4314>
   14e58:	push	{r4, r5, r6, lr}
   14e5c:	mov	r6, r0
   14e60:	mov	r5, r1
   14e64:	mov	r4, r2
   14e68:	bl	15a10 <__assert_fail@plt+0x4ab4>
   14e6c:	cmp	r0, #0
   14e70:	popne	{r4, r5, r6, pc}
   14e74:	cmp	r6, #0
   14e78:	beq	14e88 <__assert_fail@plt+0x3f2c>
   14e7c:	cmp	r5, #0
   14e80:	cmpne	r4, #0
   14e84:	popeq	{r4, r5, r6, pc}
   14e88:	bl	15270 <__assert_fail@plt+0x4314>
   14e8c:	b	14e58 <__assert_fail@plt+0x3efc>
   14e90:	cmp	r2, #0
   14e94:	cmpne	r1, #0
   14e98:	moveq	r2, #1
   14e9c:	moveq	r1, r2
   14ea0:	push	{r4, lr}
   14ea4:	bl	15a10 <__assert_fail@plt+0x4ab4>
   14ea8:	cmp	r0, #0
   14eac:	popne	{r4, pc}
   14eb0:	bl	15270 <__assert_fail@plt+0x4314>
   14eb4:	mov	r2, r1
   14eb8:	mov	r1, r0
   14ebc:	mov	r0, #0
   14ec0:	b	14e58 <__assert_fail@plt+0x3efc>
   14ec4:	mov	r2, r1
   14ec8:	mov	r1, r0
   14ecc:	mov	r0, #0
   14ed0:	b	14e90 <__assert_fail@plt+0x3f34>
   14ed4:	push	{r4, r5, r6, r7, r8, lr}
   14ed8:	subs	r7, r0, #0
   14edc:	mov	r5, r1
   14ee0:	mov	r6, r2
   14ee4:	ldr	r4, [r1]
   14ee8:	bne	14f24 <__assert_fail@plt+0x3fc8>
   14eec:	cmp	r4, #0
   14ef0:	bne	14f0c <__assert_fail@plt+0x3fb0>
   14ef4:	mov	r1, r2
   14ef8:	mov	r0, #64	; 0x40
   14efc:	bl	15b3c <__assert_fail@plt+0x4be0>
   14f00:	cmp	r0, #0
   14f04:	movne	r4, r0
   14f08:	addeq	r4, r0, #1
   14f0c:	mov	r2, r6
   14f10:	mov	r1, r4
   14f14:	mov	r0, r7
   14f18:	bl	14e58 <__assert_fail@plt+0x3efc>
   14f1c:	str	r4, [r5]
   14f20:	pop	{r4, r5, r6, r7, r8, pc}
   14f24:	lsr	r2, r4, #1
   14f28:	add	r3, r2, #1
   14f2c:	mvn	r3, r3
   14f30:	cmp	r4, r3
   14f34:	addls	r4, r4, #1
   14f38:	addls	r4, r4, r2
   14f3c:	bls	14f0c <__assert_fail@plt+0x3fb0>
   14f40:	bl	15270 <__assert_fail@plt+0x4314>
   14f44:	mov	r2, #1
   14f48:	b	14ed4 <__assert_fail@plt+0x3f78>
   14f4c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f50:	mov	sl, r0
   14f54:	ldr	r8, [r1]
   14f58:	mov	fp, r1
   14f5c:	mov	r5, r2
   14f60:	asrs	r4, r8, #1
   14f64:	mov	r9, r3
   14f68:	ldr	r7, [sp, #48]	; 0x30
   14f6c:	bpl	15008 <__assert_fail@plt+0x40ac>
   14f70:	rsb	r2, r4, #-2147483648	; 0x80000000
   14f74:	cmp	r8, r2
   14f78:	movge	r2, #0
   14f7c:	movlt	r2, #1
   14f80:	mvn	r3, r9
   14f84:	cmp	r2, #0
   14f88:	lsr	r3, r3, #31
   14f8c:	addeq	r4, r4, r8
   14f90:	mvnne	r4, #-2147483648	; 0x80000000
   14f94:	mov	r0, r3
   14f98:	cmp	r9, r4
   14f9c:	movge	r0, #0
   14fa0:	andlt	r0, r0, #1
   14fa4:	cmp	r0, #0
   14fa8:	str	r3, [sp, #4]
   14fac:	bne	1517c <__assert_fail@plt+0x4220>
   14fb0:	cmp	r7, #0
   14fb4:	bge	150c8 <__assert_fail@plt+0x416c>
   14fb8:	cmp	r4, #0
   14fbc:	bge	15020 <__assert_fail@plt+0x40c4>
   14fc0:	mov	r1, r7
   14fc4:	mvn	r0, #-2147483648	; 0x80000000
   14fc8:	bl	15d48 <__assert_fail@plt+0x4dec>
   14fcc:	cmp	r0, r4
   14fd0:	movle	r0, #0
   14fd4:	movgt	r0, #1
   14fd8:	cmp	r0, #0
   14fdc:	mvnne	r6, #-2147483648	; 0x80000000
   14fe0:	beq	15030 <__assert_fail@plt+0x40d4>
   14fe4:	mov	r1, r7
   14fe8:	mov	r0, r6
   14fec:	bl	15d48 <__assert_fail@plt+0x4dec>
   14ff0:	mov	r1, r7
   14ff4:	mov	r4, r0
   14ff8:	mov	r0, r6
   14ffc:	bl	15f68 <__assert_fail@plt+0x500c>
   15000:	sub	r1, r6, r1
   15004:	b	15040 <__assert_fail@plt+0x40e4>
   15008:	mvn	r2, #-2147483648	; 0x80000000
   1500c:	sub	r2, r2, r4
   15010:	cmp	r8, r2
   15014:	movle	r2, #0
   15018:	movgt	r2, #1
   1501c:	b	14f80 <__assert_fail@plt+0x4024>
   15020:	cmn	r7, #1
   15024:	movne	r1, r7
   15028:	movne	r0, #-2147483648	; 0x80000000
   1502c:	bne	15194 <__assert_fail@plt+0x4238>
   15030:	mul	r1, r7, r4
   15034:	cmp	r1, #63	; 0x3f
   15038:	movle	r6, #64	; 0x40
   1503c:	ble	14fe4 <__assert_fail@plt+0x4088>
   15040:	cmp	sl, #0
   15044:	sub	r2, r4, r8
   15048:	streq	sl, [fp]
   1504c:	cmp	r2, r5
   15050:	bge	15124 <__assert_fail@plt+0x41c8>
   15054:	cmp	r5, #0
   15058:	bge	150f0 <__assert_fail@plt+0x4194>
   1505c:	rsb	r2, r5, #-2147483648	; 0x80000000
   15060:	cmp	r8, r2
   15064:	movge	r2, #0
   15068:	movlt	r2, #1
   1506c:	cmp	r2, #0
   15070:	bne	150c4 <__assert_fail@plt+0x4168>
   15074:	ldr	r0, [sp, #4]
   15078:	add	r5, r8, r5
   1507c:	cmp	r9, r5
   15080:	movge	r0, #0
   15084:	andlt	r0, r0, #1
   15088:	cmp	r0, #0
   1508c:	mov	r4, r5
   15090:	bne	150c4 <__assert_fail@plt+0x4168>
   15094:	cmp	r7, #0
   15098:	bge	15138 <__assert_fail@plt+0x41dc>
   1509c:	cmp	r5, #0
   150a0:	bge	15110 <__assert_fail@plt+0x41b4>
   150a4:	mov	r1, r7
   150a8:	mvn	r0, #-2147483648	; 0x80000000
   150ac:	bl	15d48 <__assert_fail@plt+0x4dec>
   150b0:	cmp	r5, r0
   150b4:	movge	r0, #0
   150b8:	movlt	r0, #1
   150bc:	cmp	r0, #0
   150c0:	beq	15120 <__assert_fail@plt+0x41c4>
   150c4:	bl	15270 <__assert_fail@plt+0x4314>
   150c8:	beq	15030 <__assert_fail@plt+0x40d4>
   150cc:	cmp	r4, #0
   150d0:	bge	1518c <__assert_fail@plt+0x4230>
   150d4:	cmn	r4, #1
   150d8:	beq	15030 <__assert_fail@plt+0x40d4>
   150dc:	mov	r1, r4
   150e0:	mov	r0, #-2147483648	; 0x80000000
   150e4:	bl	15d48 <__assert_fail@plt+0x4dec>
   150e8:	cmp	r7, r0
   150ec:	b	14fd0 <__assert_fail@plt+0x4074>
   150f0:	cmp	r8, #0
   150f4:	blt	15074 <__assert_fail@plt+0x4118>
   150f8:	mvn	r2, #-2147483648	; 0x80000000
   150fc:	sub	r2, r2, r5
   15100:	cmp	r8, r2
   15104:	movle	r2, #0
   15108:	movgt	r2, #1
   1510c:	b	1506c <__assert_fail@plt+0x4110>
   15110:	cmn	r7, #1
   15114:	movne	r1, r7
   15118:	movne	r0, #-2147483648	; 0x80000000
   1511c:	bne	15170 <__assert_fail@plt+0x4214>
   15120:	mul	r1, r5, r7
   15124:	mov	r0, sl
   15128:	bl	14e08 <__assert_fail@plt+0x3eac>
   1512c:	str	r4, [fp]
   15130:	add	sp, sp, #12
   15134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15138:	beq	15120 <__assert_fail@plt+0x41c4>
   1513c:	cmp	r5, #0
   15140:	movge	r1, r7
   15144:	mvnge	r0, #-2147483648	; 0x80000000
   15148:	bge	15170 <__assert_fail@plt+0x4214>
   1514c:	cmn	r5, #1
   15150:	beq	15120 <__assert_fail@plt+0x41c4>
   15154:	mov	r1, r5
   15158:	mov	r0, #-2147483648	; 0x80000000
   1515c:	bl	15d48 <__assert_fail@plt+0x4dec>
   15160:	cmp	r7, r0
   15164:	movle	r0, #0
   15168:	movgt	r0, #1
   1516c:	b	150bc <__assert_fail@plt+0x4160>
   15170:	bl	15d48 <__assert_fail@plt+0x4dec>
   15174:	cmp	r5, r0
   15178:	b	15164 <__assert_fail@plt+0x4208>
   1517c:	cmp	r7, #0
   15180:	mov	r4, r9
   15184:	blt	15020 <__assert_fail@plt+0x40c4>
   15188:	beq	15030 <__assert_fail@plt+0x40d4>
   1518c:	mov	r1, r7
   15190:	mvn	r0, #-2147483648	; 0x80000000
   15194:	bl	15d48 <__assert_fail@plt+0x4dec>
   15198:	cmp	r0, r4
   1519c:	movge	r0, #0
   151a0:	movlt	r0, #1
   151a4:	b	14fd8 <__assert_fail@plt+0x407c>
   151a8:	push	{r4, lr}
   151ac:	bl	156ac <__assert_fail@plt+0x4750>
   151b0:	cmp	r0, #0
   151b4:	popne	{r4, pc}
   151b8:	bl	15270 <__assert_fail@plt+0x4314>
   151bc:	mov	r1, #1
   151c0:	b	151a8 <__assert_fail@plt+0x424c>
   151c4:	push	{r4, lr}
   151c8:	bl	156ac <__assert_fail@plt+0x4750>
   151cc:	cmp	r0, #0
   151d0:	popne	{r4, pc}
   151d4:	bl	15270 <__assert_fail@plt+0x4314>
   151d8:	mov	r1, #1
   151dc:	b	151c4 <__assert_fail@plt+0x4268>
   151e0:	push	{r4, r5, r6, lr}
   151e4:	mov	r4, r1
   151e8:	mov	r5, r0
   151ec:	mov	r0, r1
   151f0:	bl	14ddc <__assert_fail@plt+0x3e80>
   151f4:	mov	r2, r4
   151f8:	mov	r1, r5
   151fc:	pop	{r4, r5, r6, lr}
   15200:	b	10d40 <memcpy@plt>
   15204:	push	{r4, r5, r6, lr}
   15208:	mov	r4, r1
   1520c:	mov	r5, r0
   15210:	mov	r0, r1
   15214:	bl	14df0 <__assert_fail@plt+0x3e94>
   15218:	mov	r2, r4
   1521c:	mov	r1, r5
   15220:	pop	{r4, r5, r6, lr}
   15224:	b	10d40 <memcpy@plt>
   15228:	push	{r4, r5, r6, lr}
   1522c:	mov	r5, r0
   15230:	add	r0, r1, #1
   15234:	mov	r4, r1
   15238:	bl	14df0 <__assert_fail@plt+0x3e94>
   1523c:	mov	r2, #0
   15240:	mov	r1, r5
   15244:	strb	r2, [r0, r4]
   15248:	mov	r2, r4
   1524c:	pop	{r4, r5, r6, lr}
   15250:	b	10d40 <memcpy@plt>
   15254:	push	{r4, lr}
   15258:	mov	r4, r0
   1525c:	bl	10e60 <strlen@plt>
   15260:	add	r1, r0, #1
   15264:	mov	r0, r4
   15268:	pop	{r4, lr}
   1526c:	b	151e0 <__assert_fail@plt+0x4284>
   15270:	ldr	r3, [pc, #44]	; 152a4 <__assert_fail@plt+0x4348>
   15274:	push	{r4, lr}
   15278:	mov	r2, #5
   1527c:	ldr	r1, [pc, #36]	; 152a8 <__assert_fail@plt+0x434c>
   15280:	mov	r0, #0
   15284:	ldr	r4, [r3]
   15288:	bl	10d94 <dcgettext@plt>
   1528c:	ldr	r2, [pc, #24]	; 152ac <__assert_fail@plt+0x4350>
   15290:	mov	r1, #0
   15294:	mov	r3, r0
   15298:	mov	r0, r4
   1529c:	bl	10e00 <error@plt>
   152a0:	bl	10f44 <abort@plt>
   152a4:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   152a8:	muleq	r1, r7, r8
   152ac:	andeq	r7, r1, ip, lsl #9
   152b0:	push	{r4, r5, r6, lr}
   152b4:	subs	r5, r1, #0
   152b8:	mov	r4, r0
   152bc:	bge	152fc <__assert_fail@plt+0x43a0>
   152c0:	ldm	r0, {r0, r3}
   152c4:	orr	r0, r0, r3
   152c8:	adds	r0, r0, #0
   152cc:	movne	r0, #1
   152d0:	cmp	r0, #0
   152d4:	bne	15330 <__assert_fail@plt+0x43d4>
   152d8:	ldr	r2, [r4]
   152dc:	asr	r3, r5, #31
   152e0:	ldr	r1, [r4, #4]
   152e4:	mul	r3, r3, r2
   152e8:	mla	r1, r5, r1, r3
   152ec:	umull	r2, r3, r2, r5
   152f0:	add	r3, r1, r3
   152f4:	strd	r2, [r4]
   152f8:	pop	{r4, r5, r6, pc}
   152fc:	moveq	r0, r5
   15300:	beq	152d0 <__assert_fail@plt+0x4374>
   15304:	mov	r2, r5
   15308:	asr	r3, r5, #31
   1530c:	mvn	r0, #0
   15310:	mvn	r1, #0
   15314:	bl	15f88 <__assert_fail@plt+0x502c>
   15318:	ldrd	r2, [r4]
   1531c:	cmp	r1, r3
   15320:	cmpeq	r0, r2
   15324:	movcc	r0, #1
   15328:	movcs	r0, #0
   1532c:	b	152d0 <__assert_fail@plt+0x4374>
   15330:	mvn	r2, #0
   15334:	mvn	r3, #0
   15338:	mov	r0, #1
   1533c:	strd	r2, [r4]
   15340:	pop	{r4, r5, r6, pc}
   15344:	push	{r4, r5, r6, r7, r8, lr}
   15348:	mov	r6, r0
   1534c:	mov	r7, r1
   15350:	mov	r5, r2
   15354:	mov	r4, #0
   15358:	cmp	r5, #0
   1535c:	bne	15368 <__assert_fail@plt+0x440c>
   15360:	mov	r0, r4
   15364:	pop	{r4, r5, r6, r7, r8, pc}
   15368:	mov	r1, r7
   1536c:	mov	r0, r6
   15370:	bl	152b0 <__assert_fail@plt+0x4354>
   15374:	sub	r5, r5, #1
   15378:	orr	r4, r4, r0
   1537c:	b	15358 <__assert_fail@plt+0x43fc>
   15380:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15384:	sub	sp, sp, #20
   15388:	cmp	r2, #36	; 0x24
   1538c:	ldr	r9, [sp, #56]	; 0x38
   15390:	bls	153a8 <__assert_fail@plt+0x444c>
   15394:	ldr	r3, [pc, #772]	; 156a0 <__assert_fail@plt+0x4744>
   15398:	mov	r2, #85	; 0x55
   1539c:	ldr	r1, [pc, #768]	; 156a4 <__assert_fail@plt+0x4748>
   153a0:	ldr	r0, [pc, #768]	; 156a8 <__assert_fail@plt+0x474c>
   153a4:	bl	10f5c <__assert_fail@plt>
   153a8:	cmp	r1, #0
   153ac:	mov	r7, r1
   153b0:	mov	r4, r0
   153b4:	mov	fp, r2
   153b8:	mov	r8, r3
   153bc:	addeq	r7, sp, #4
   153c0:	bl	10e78 <__errno_location@plt>
   153c4:	mov	r3, #0
   153c8:	str	r3, [r0]
   153cc:	mov	sl, r0
   153d0:	bl	10e48 <__ctype_b_loc@plt>
   153d4:	ldrb	r6, [r4]
   153d8:	mov	r3, r4
   153dc:	ldr	r1, [r0]
   153e0:	lsl	r2, r6, #1
   153e4:	ldrh	r5, [r1, r2]
   153e8:	ands	r5, r5, #8192	; 0x2000
   153ec:	bne	15408 <__assert_fail@plt+0x44ac>
   153f0:	cmp	r6, #45	; 0x2d
   153f4:	bne	15410 <__assert_fail@plt+0x44b4>
   153f8:	mov	r5, #4
   153fc:	mov	r0, r5
   15400:	add	sp, sp, #20
   15404:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15408:	ldrb	r6, [r3, #1]!
   1540c:	b	153e0 <__assert_fail@plt+0x4484>
   15410:	mov	r2, fp
   15414:	mov	r1, r7
   15418:	mov	r0, r4
   1541c:	bl	10ec0 <strtoumax@plt>
   15420:	ldr	r6, [r7]
   15424:	cmp	r4, r6
   15428:	strd	r0, [sp, #8]
   1542c:	bne	15490 <__assert_fail@plt+0x4534>
   15430:	cmp	r9, #0
   15434:	beq	153f8 <__assert_fail@plt+0x449c>
   15438:	ldrb	r1, [r6]
   1543c:	cmp	r1, #0
   15440:	beq	153f8 <__assert_fail@plt+0x449c>
   15444:	mov	r0, r9
   15448:	bl	10e6c <strchr@plt>
   1544c:	cmp	r0, #0
   15450:	beq	153f8 <__assert_fail@plt+0x449c>
   15454:	mov	r2, #1
   15458:	mov	r3, #0
   1545c:	strd	r2, [sp, #8]
   15460:	ldrb	r4, [r6]
   15464:	cmp	r4, #0
   15468:	beq	155a0 <__assert_fail@plt+0x4644>
   1546c:	mov	r1, r4
   15470:	mov	r0, r9
   15474:	bl	10e6c <strchr@plt>
   15478:	cmp	r0, #0
   1547c:	bne	154b8 <__assert_fail@plt+0x455c>
   15480:	ldrd	r2, [sp, #8]
   15484:	orr	r5, r5, #2
   15488:	strd	r2, [r8]
   1548c:	b	153fc <__assert_fail@plt+0x44a0>
   15490:	ldr	r5, [sl]
   15494:	cmp	r5, #0
   15498:	beq	154a8 <__assert_fail@plt+0x454c>
   1549c:	cmp	r5, #34	; 0x22
   154a0:	bne	153f8 <__assert_fail@plt+0x449c>
   154a4:	mov	r5, #1
   154a8:	cmp	r9, #0
   154ac:	bne	15460 <__assert_fail@plt+0x4504>
   154b0:	strd	r0, [r8]
   154b4:	b	153fc <__assert_fail@plt+0x44a0>
   154b8:	cmp	r4, #84	; 0x54
   154bc:	beq	15510 <__assert_fail@plt+0x45b4>
   154c0:	bhi	154f8 <__assert_fail@plt+0x459c>
   154c4:	cmp	r4, #75	; 0x4b
   154c8:	beq	15510 <__assert_fail@plt+0x45b4>
   154cc:	bhi	154e8 <__assert_fail@plt+0x458c>
   154d0:	cmp	r4, #69	; 0x45
   154d4:	beq	15510 <__assert_fail@plt+0x45b4>
   154d8:	cmp	r4, #71	; 0x47
   154dc:	beq	15510 <__assert_fail@plt+0x45b4>
   154e0:	mov	r6, #1
   154e4:	b	155d4 <__assert_fail@plt+0x4678>
   154e8:	cmp	r4, #77	; 0x4d
   154ec:	beq	15510 <__assert_fail@plt+0x45b4>
   154f0:	cmp	r4, #80	; 0x50
   154f4:	b	154dc <__assert_fail@plt+0x4580>
   154f8:	cmp	r4, #103	; 0x67
   154fc:	beq	15510 <__assert_fail@plt+0x45b4>
   15500:	bhi	155ac <__assert_fail@plt+0x4650>
   15504:	sub	r3, r4, #89	; 0x59
   15508:	cmp	r3, #1
   1550c:	bhi	154e0 <__assert_fail@plt+0x4584>
   15510:	mov	r1, #48	; 0x30
   15514:	mov	r0, r9
   15518:	bl	10e6c <strchr@plt>
   1551c:	cmp	r0, #0
   15520:	beq	154e0 <__assert_fail@plt+0x4584>
   15524:	ldrb	r3, [r6, #1]
   15528:	cmp	r3, #68	; 0x44
   1552c:	beq	15540 <__assert_fail@plt+0x45e4>
   15530:	cmp	r3, #105	; 0x69
   15534:	beq	155c4 <__assert_fail@plt+0x4668>
   15538:	cmp	r3, #66	; 0x42
   1553c:	bne	154e0 <__assert_fail@plt+0x4584>
   15540:	mov	r6, #2
   15544:	mov	r1, #1000	; 0x3e8
   15548:	cmp	r4, #89	; 0x59
   1554c:	beq	15688 <__assert_fail@plt+0x472c>
   15550:	bhi	155fc <__assert_fail@plt+0x46a0>
   15554:	cmp	r4, #75	; 0x4b
   15558:	beq	1563c <__assert_fail@plt+0x46e0>
   1555c:	bhi	155dc <__assert_fail@plt+0x4680>
   15560:	cmp	r4, #69	; 0x45
   15564:	beq	15664 <__assert_fail@plt+0x4708>
   15568:	cmp	r4, #71	; 0x47
   1556c:	beq	15670 <__assert_fail@plt+0x4714>
   15570:	cmp	r4, #66	; 0x42
   15574:	moveq	r1, #1024	; 0x400
   15578:	bne	15480 <__assert_fail@plt+0x4524>
   1557c:	add	r0, sp, #8
   15580:	bl	152b0 <__assert_fail@plt+0x4354>
   15584:	ldr	r3, [r7]
   15588:	orr	r5, r5, r0
   1558c:	add	r2, r3, r6
   15590:	str	r2, [r7]
   15594:	ldrb	r3, [r3, r6]
   15598:	cmp	r3, #0
   1559c:	orrne	r5, r5, #2
   155a0:	ldrd	r2, [sp, #8]
   155a4:	strd	r2, [r8]
   155a8:	b	153fc <__assert_fail@plt+0x44a0>
   155ac:	cmp	r4, #109	; 0x6d
   155b0:	beq	15510 <__assert_fail@plt+0x45b4>
   155b4:	cmp	r4, #116	; 0x74
   155b8:	beq	15510 <__assert_fail@plt+0x45b4>
   155bc:	cmp	r4, #107	; 0x6b
   155c0:	b	154dc <__assert_fail@plt+0x4580>
   155c4:	ldrb	r6, [r6, #2]
   155c8:	cmp	r6, #66	; 0x42
   155cc:	movne	r6, #1
   155d0:	moveq	r6, #3
   155d4:	mov	r1, #1024	; 0x400
   155d8:	b	15548 <__assert_fail@plt+0x45ec>
   155dc:	cmp	r4, #80	; 0x50
   155e0:	beq	15678 <__assert_fail@plt+0x471c>
   155e4:	cmp	r4, #84	; 0x54
   155e8:	beq	15680 <__assert_fail@plt+0x4724>
   155ec:	cmp	r4, #77	; 0x4d
   155f0:	bne	15480 <__assert_fail@plt+0x4524>
   155f4:	mov	r2, #2
   155f8:	b	15668 <__assert_fail@plt+0x470c>
   155fc:	cmp	r4, #103	; 0x67
   15600:	beq	15670 <__assert_fail@plt+0x4714>
   15604:	bhi	15628 <__assert_fail@plt+0x46cc>
   15608:	cmp	r4, #98	; 0x62
   1560c:	beq	1565c <__assert_fail@plt+0x4700>
   15610:	cmp	r4, #99	; 0x63
   15614:	beq	15698 <__assert_fail@plt+0x473c>
   15618:	cmp	r4, #90	; 0x5a
   1561c:	bne	15480 <__assert_fail@plt+0x4524>
   15620:	mov	r2, #7
   15624:	b	15668 <__assert_fail@plt+0x470c>
   15628:	cmp	r4, #109	; 0x6d
   1562c:	beq	155f4 <__assert_fail@plt+0x4698>
   15630:	bhi	15644 <__assert_fail@plt+0x46e8>
   15634:	cmp	r4, #107	; 0x6b
   15638:	bne	15480 <__assert_fail@plt+0x4524>
   1563c:	mov	r2, #1
   15640:	b	15668 <__assert_fail@plt+0x470c>
   15644:	cmp	r4, #116	; 0x74
   15648:	beq	15680 <__assert_fail@plt+0x4724>
   1564c:	cmp	r4, #119	; 0x77
   15650:	moveq	r1, #2
   15654:	beq	1557c <__assert_fail@plt+0x4620>
   15658:	b	15480 <__assert_fail@plt+0x4524>
   1565c:	mov	r1, #512	; 0x200
   15660:	b	1557c <__assert_fail@plt+0x4620>
   15664:	mov	r2, #6
   15668:	add	r0, sp, #8
   1566c:	b	15690 <__assert_fail@plt+0x4734>
   15670:	mov	r2, #3
   15674:	b	15668 <__assert_fail@plt+0x470c>
   15678:	mov	r2, #5
   1567c:	b	15668 <__assert_fail@plt+0x470c>
   15680:	mov	r2, #4
   15684:	b	15668 <__assert_fail@plt+0x470c>
   15688:	mov	r2, #8
   1568c:	add	r0, sp, r2
   15690:	bl	15344 <__assert_fail@plt+0x43e8>
   15694:	b	15584 <__assert_fail@plt+0x4628>
   15698:	mov	r0, #0
   1569c:	b	15584 <__assert_fail@plt+0x4628>
   156a0:	andeq	r7, r1, r8, lsr #17
   156a4:			; <UNDEFINED> instruction: 0x000178b3
   156a8:	andeq	r7, r1, r1, asr #17
   156ac:	cmp	r1, #0
   156b0:	cmpne	r0, #0
   156b4:	moveq	r1, #1
   156b8:	moveq	r0, r1
   156bc:	umull	r2, r3, r0, r1
   156c0:	adds	r3, r3, #0
   156c4:	movne	r3, #1
   156c8:	cmp	r2, #0
   156cc:	blt	156dc <__assert_fail@plt+0x4780>
   156d0:	cmp	r3, #0
   156d4:	bne	156dc <__assert_fail@plt+0x4780>
   156d8:	b	10cd4 <calloc@plt>
   156dc:	push	{r4, lr}
   156e0:	bl	10e78 <__errno_location@plt>
   156e4:	mov	r3, #12
   156e8:	str	r3, [r0]
   156ec:	mov	r0, #0
   156f0:	pop	{r4, pc}
   156f4:	cmp	r0, #0
   156f8:	mov	r3, #0
   156fc:	moveq	r0, #1
   15700:	adds	r3, r3, #0
   15704:	movne	r3, #1
   15708:	cmp	r0, #0
   1570c:	blt	1571c <__assert_fail@plt+0x47c0>
   15710:	cmp	r3, #0
   15714:	bne	1571c <__assert_fail@plt+0x47c0>
   15718:	b	10e0c <malloc@plt>
   1571c:	push	{r4, lr}
   15720:	bl	10e78 <__errno_location@plt>
   15724:	mov	r3, #12
   15728:	str	r3, [r0]
   1572c:	mov	r0, #0
   15730:	pop	{r4, pc}
   15734:	cmp	r0, #0
   15738:	push	{r4, lr}
   1573c:	mov	r4, r1
   15740:	bne	15750 <__assert_fail@plt+0x47f4>
   15744:	mov	r0, r1
   15748:	pop	{r4, lr}
   1574c:	b	156f4 <__assert_fail@plt+0x4798>
   15750:	cmp	r1, #0
   15754:	bne	15764 <__assert_fail@plt+0x4808>
   15758:	bl	131d4 <__assert_fail@plt+0x2278>
   1575c:	mov	r0, #0
   15760:	pop	{r4, pc}
   15764:	cmp	r1, #0
   15768:	blt	15778 <__assert_fail@plt+0x481c>
   1576c:	mov	r3, #0
   15770:	cmp	r3, r3
   15774:	beq	15788 <__assert_fail@plt+0x482c>
   15778:	bl	10e78 <__errno_location@plt>
   1577c:	mov	r3, #12
   15780:	str	r3, [r0]
   15784:	b	1575c <__assert_fail@plt+0x4800>
   15788:	pop	{r4, lr}
   1578c:	b	10da0 <realloc@plt>
   15790:	push	{r4, r5, r6, lr}
   15794:	mov	r4, r0
   15798:	bl	10ddc <__fpending@plt>
   1579c:	mov	r5, r0
   157a0:	mov	r0, r4
   157a4:	bl	10de8 <ferror_unlocked@plt>
   157a8:	mov	r6, r0
   157ac:	mov	r0, r4
   157b0:	bl	15800 <__assert_fail@plt+0x48a4>
   157b4:	cmp	r6, #0
   157b8:	mov	r4, r0
   157bc:	bne	157e8 <__assert_fail@plt+0x488c>
   157c0:	cmp	r0, #0
   157c4:	beq	157e0 <__assert_fail@plt+0x4884>
   157c8:	cmp	r5, #0
   157cc:	bne	157f8 <__assert_fail@plt+0x489c>
   157d0:	bl	10e78 <__errno_location@plt>
   157d4:	ldr	r4, [r0]
   157d8:	subs	r4, r4, #9
   157dc:	mvnne	r4, #0
   157e0:	mov	r0, r4
   157e4:	pop	{r4, r5, r6, pc}
   157e8:	cmp	r0, #0
   157ec:	bne	157f8 <__assert_fail@plt+0x489c>
   157f0:	bl	10e78 <__errno_location@plt>
   157f4:	str	r4, [r0]
   157f8:	mvn	r4, #0
   157fc:	b	157e0 <__assert_fail@plt+0x4884>
   15800:	push	{r0, r1, r2, r4, r5, lr}
   15804:	mov	r4, r0
   15808:	bl	10eb4 <fileno@plt>
   1580c:	cmp	r0, #0
   15810:	mov	r0, r4
   15814:	bge	15824 <__assert_fail@plt+0x48c8>
   15818:	add	sp, sp, #12
   1581c:	pop	{r4, r5, lr}
   15820:	b	10ed8 <fclose@plt>
   15824:	bl	10e24 <__freading@plt>
   15828:	cmp	r0, #0
   1582c:	bne	15868 <__assert_fail@plt+0x490c>
   15830:	mov	r0, r4
   15834:	bl	158a8 <__assert_fail@plt+0x494c>
   15838:	cmp	r0, #0
   1583c:	bne	1589c <__assert_fail@plt+0x4940>
   15840:	mov	r5, #0
   15844:	mov	r0, r4
   15848:	bl	10ed8 <fclose@plt>
   1584c:	cmp	r5, #0
   15850:	beq	15860 <__assert_fail@plt+0x4904>
   15854:	bl	10e78 <__errno_location@plt>
   15858:	str	r5, [r0]
   1585c:	mvn	r0, #0
   15860:	add	sp, sp, #12
   15864:	pop	{r4, r5, pc}
   15868:	mov	r0, r4
   1586c:	bl	10eb4 <fileno@plt>
   15870:	mov	r3, #1
   15874:	str	r3, [sp]
   15878:	mov	r2, #0
   1587c:	mov	r3, #0
   15880:	bl	10dc4 <lseek64@plt>
   15884:	mvn	r3, #0
   15888:	mvn	r2, #0
   1588c:	cmp	r1, r3
   15890:	cmpeq	r0, r2
   15894:	bne	15830 <__assert_fail@plt+0x48d4>
   15898:	b	15840 <__assert_fail@plt+0x48e4>
   1589c:	bl	10e78 <__errno_location@plt>
   158a0:	ldr	r5, [r0]
   158a4:	b	15844 <__assert_fail@plt+0x48e8>
   158a8:	push	{r0, r1, r4, lr}
   158ac:	subs	r4, r0, #0
   158b0:	bne	158c4 <__assert_fail@plt+0x4968>
   158b4:	mov	r0, r4
   158b8:	add	sp, sp, #8
   158bc:	pop	{r4, lr}
   158c0:	b	10d1c <fflush@plt>
   158c4:	bl	10e24 <__freading@plt>
   158c8:	cmp	r0, #0
   158cc:	beq	158b4 <__assert_fail@plt+0x4958>
   158d0:	ldr	r3, [r4]
   158d4:	tst	r3, #256	; 0x100
   158d8:	beq	158b4 <__assert_fail@plt+0x4958>
   158dc:	mov	r3, #1
   158e0:	str	r3, [sp]
   158e4:	mov	r2, #0
   158e8:	mov	r3, #0
   158ec:	mov	r0, r4
   158f0:	bl	158f8 <__assert_fail@plt+0x499c>
   158f4:	b	158b4 <__assert_fail@plt+0x4958>
   158f8:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   158fc:	mov	r4, r0
   15900:	ldmib	r0, {ip, lr}
   15904:	ldr	r8, [sp, #32]
   15908:	cmp	lr, ip
   1590c:	bne	15978 <__assert_fail@plt+0x4a1c>
   15910:	ldr	lr, [r0, #20]
   15914:	ldr	ip, [r0, #16]
   15918:	cmp	lr, ip
   1591c:	bne	15978 <__assert_fail@plt+0x4a1c>
   15920:	ldr	r5, [r0, #36]	; 0x24
   15924:	cmp	r5, #0
   15928:	bne	15978 <__assert_fail@plt+0x4a1c>
   1592c:	mov	r6, r2
   15930:	mov	r7, r3
   15934:	bl	10eb4 <fileno@plt>
   15938:	mov	r2, r6
   1593c:	mov	r3, r7
   15940:	str	r8, [sp]
   15944:	bl	10dc4 <lseek64@plt>
   15948:	mvn	r3, #0
   1594c:	mvn	r2, #0
   15950:	cmp	r1, r3
   15954:	cmpeq	r0, r2
   15958:	mvneq	r0, #0
   1595c:	ldrne	r3, [r4]
   15960:	strdne	r0, [r4, #80]	; 0x50
   15964:	movne	r0, r5
   15968:	bicne	r3, r3, #16
   1596c:	strne	r3, [r4]
   15970:	add	sp, sp, #8
   15974:	pop	{r4, r5, r6, r7, r8, pc}
   15978:	str	r8, [sp, #32]
   1597c:	mov	r0, r4
   15980:	add	sp, sp, #8
   15984:	pop	{r4, r5, r6, r7, r8, lr}
   15988:	b	10ee4 <fseeko64@plt>
   1598c:	push	{r4, lr}
   15990:	mov	r0, #14
   15994:	bl	10f14 <nl_langinfo@plt>
   15998:	ldr	r3, [pc, #24]	; 159b8 <__assert_fail@plt+0x4a5c>
   1599c:	cmp	r0, #0
   159a0:	moveq	r0, r3
   159a4:	ldr	r3, [pc, #16]	; 159bc <__assert_fail@plt+0x4a60>
   159a8:	ldrb	r2, [r0]
   159ac:	cmp	r2, #0
   159b0:	moveq	r0, r3
   159b4:	pop	{r4, pc}
   159b8:	andeq	r6, r1, r5, lsl #31
   159bc:	andeq	r7, r1, r7, ror #17
   159c0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   159c4:	subs	r5, r0, #0
   159c8:	addeq	r5, sp, #4
   159cc:	mov	r0, r5
   159d0:	mov	r7, r2
   159d4:	mov	r6, r1
   159d8:	bl	10df4 <mbrtowc@plt>
   159dc:	cmp	r7, #0
   159e0:	cmnne	r0, #3
   159e4:	mov	r4, r0
   159e8:	bls	15a04 <__assert_fail@plt+0x4aa8>
   159ec:	mov	r0, #0
   159f0:	bl	15a5c <__assert_fail@plt+0x4b00>
   159f4:	cmp	r0, #0
   159f8:	moveq	r4, #1
   159fc:	ldrbeq	r3, [r6]
   15a00:	streq	r3, [r5]
   15a04:	mov	r0, r4
   15a08:	add	sp, sp, #12
   15a0c:	pop	{r4, r5, r6, r7, pc}
   15a10:	push	{r4, r5, r6, lr}
   15a14:	subs	r4, r2, #0
   15a18:	mov	r6, r0
   15a1c:	mov	r5, r1
   15a20:	beq	15a38 <__assert_fail@plt+0x4adc>
   15a24:	mov	r1, r4
   15a28:	mvn	r0, #0
   15a2c:	bl	15b3c <__assert_fail@plt+0x4be0>
   15a30:	cmp	r0, r5
   15a34:	bcc	15a48 <__assert_fail@plt+0x4aec>
   15a38:	mul	r1, r5, r4
   15a3c:	mov	r0, r6
   15a40:	pop	{r4, r5, r6, lr}
   15a44:	b	15734 <__assert_fail@plt+0x47d8>
   15a48:	bl	10e78 <__errno_location@plt>
   15a4c:	mov	r3, #12
   15a50:	str	r3, [r0]
   15a54:	mov	r0, #0
   15a58:	pop	{r4, r5, r6, pc}
   15a5c:	push	{lr}		; (str lr, [sp, #-4]!)
   15a60:	sub	sp, sp, #268	; 0x10c
   15a64:	ldr	r2, [pc, #64]	; 15aac <__assert_fail@plt+0x4b50>
   15a68:	add	r1, sp, #4
   15a6c:	bl	15ab8 <__assert_fail@plt+0x4b5c>
   15a70:	cmp	r0, #0
   15a74:	movne	r0, #0
   15a78:	bne	15aa4 <__assert_fail@plt+0x4b48>
   15a7c:	ldr	r1, [pc, #44]	; 15ab0 <__assert_fail@plt+0x4b54>
   15a80:	add	r0, sp, #4
   15a84:	bl	10cf8 <strcmp@plt>
   15a88:	cmp	r0, #0
   15a8c:	beq	15aa4 <__assert_fail@plt+0x4b48>
   15a90:	ldr	r1, [pc, #28]	; 15ab4 <__assert_fail@plt+0x4b58>
   15a94:	add	r0, sp, #4
   15a98:	bl	10cf8 <strcmp@plt>
   15a9c:	adds	r0, r0, #0
   15aa0:	movne	r0, #1
   15aa4:	add	sp, sp, #268	; 0x10c
   15aa8:	pop	{pc}		; (ldr pc, [sp], #4)
   15aac:	andeq	r0, r0, r1, lsl #2
   15ab0:	andeq	r7, r1, lr
   15ab4:	andeq	r7, r1, sp, ror #17
   15ab8:	push	{r4, r5, r6, lr}
   15abc:	mov	r5, r1
   15ac0:	mov	r1, #0
   15ac4:	mov	r4, r2
   15ac8:	bl	10ef0 <setlocale@plt>
   15acc:	subs	r6, r0, #0
   15ad0:	bne	15ae4 <__assert_fail@plt+0x4b88>
   15ad4:	cmp	r4, #0
   15ad8:	strbne	r6, [r5]
   15adc:	mov	r0, #22
   15ae0:	pop	{r4, r5, r6, pc}
   15ae4:	bl	10e60 <strlen@plt>
   15ae8:	cmp	r4, r0
   15aec:	bls	15b08 <__assert_fail@plt+0x4bac>
   15af0:	add	r2, r0, #1
   15af4:	mov	r1, r6
   15af8:	mov	r0, r5
   15afc:	bl	10d40 <memcpy@plt>
   15b00:	mov	r0, #0
   15b04:	pop	{r4, r5, r6, pc}
   15b08:	cmp	r4, #0
   15b0c:	beq	15b2c <__assert_fail@plt+0x4bd0>
   15b10:	sub	r4, r4, #1
   15b14:	mov	r2, r4
   15b18:	mov	r1, r6
   15b1c:	mov	r0, r5
   15b20:	bl	10d40 <memcpy@plt>
   15b24:	mov	r3, #0
   15b28:	strb	r3, [r5, r4]
   15b2c:	mov	r0, #34	; 0x22
   15b30:	pop	{r4, r5, r6, pc}
   15b34:	mov	r1, #0
   15b38:	b	10ef0 <setlocale@plt>
   15b3c:	subs	r2, r1, #1
   15b40:	bxeq	lr
   15b44:	bcc	15d1c <__assert_fail@plt+0x4dc0>
   15b48:	cmp	r0, r1
   15b4c:	bls	15d00 <__assert_fail@plt+0x4da4>
   15b50:	tst	r1, r2
   15b54:	beq	15d0c <__assert_fail@plt+0x4db0>
   15b58:	clz	r3, r0
   15b5c:	clz	r2, r1
   15b60:	sub	r3, r2, r3
   15b64:	rsbs	r3, r3, #31
   15b68:	addne	r3, r3, r3, lsl #1
   15b6c:	mov	r2, #0
   15b70:	addne	pc, pc, r3, lsl #2
   15b74:	nop			; (mov r0, r0)
   15b78:	cmp	r0, r1, lsl #31
   15b7c:	adc	r2, r2, r2
   15b80:	subcs	r0, r0, r1, lsl #31
   15b84:	cmp	r0, r1, lsl #30
   15b88:	adc	r2, r2, r2
   15b8c:	subcs	r0, r0, r1, lsl #30
   15b90:	cmp	r0, r1, lsl #29
   15b94:	adc	r2, r2, r2
   15b98:	subcs	r0, r0, r1, lsl #29
   15b9c:	cmp	r0, r1, lsl #28
   15ba0:	adc	r2, r2, r2
   15ba4:	subcs	r0, r0, r1, lsl #28
   15ba8:	cmp	r0, r1, lsl #27
   15bac:	adc	r2, r2, r2
   15bb0:	subcs	r0, r0, r1, lsl #27
   15bb4:	cmp	r0, r1, lsl #26
   15bb8:	adc	r2, r2, r2
   15bbc:	subcs	r0, r0, r1, lsl #26
   15bc0:	cmp	r0, r1, lsl #25
   15bc4:	adc	r2, r2, r2
   15bc8:	subcs	r0, r0, r1, lsl #25
   15bcc:	cmp	r0, r1, lsl #24
   15bd0:	adc	r2, r2, r2
   15bd4:	subcs	r0, r0, r1, lsl #24
   15bd8:	cmp	r0, r1, lsl #23
   15bdc:	adc	r2, r2, r2
   15be0:	subcs	r0, r0, r1, lsl #23
   15be4:	cmp	r0, r1, lsl #22
   15be8:	adc	r2, r2, r2
   15bec:	subcs	r0, r0, r1, lsl #22
   15bf0:	cmp	r0, r1, lsl #21
   15bf4:	adc	r2, r2, r2
   15bf8:	subcs	r0, r0, r1, lsl #21
   15bfc:	cmp	r0, r1, lsl #20
   15c00:	adc	r2, r2, r2
   15c04:	subcs	r0, r0, r1, lsl #20
   15c08:	cmp	r0, r1, lsl #19
   15c0c:	adc	r2, r2, r2
   15c10:	subcs	r0, r0, r1, lsl #19
   15c14:	cmp	r0, r1, lsl #18
   15c18:	adc	r2, r2, r2
   15c1c:	subcs	r0, r0, r1, lsl #18
   15c20:	cmp	r0, r1, lsl #17
   15c24:	adc	r2, r2, r2
   15c28:	subcs	r0, r0, r1, lsl #17
   15c2c:	cmp	r0, r1, lsl #16
   15c30:	adc	r2, r2, r2
   15c34:	subcs	r0, r0, r1, lsl #16
   15c38:	cmp	r0, r1, lsl #15
   15c3c:	adc	r2, r2, r2
   15c40:	subcs	r0, r0, r1, lsl #15
   15c44:	cmp	r0, r1, lsl #14
   15c48:	adc	r2, r2, r2
   15c4c:	subcs	r0, r0, r1, lsl #14
   15c50:	cmp	r0, r1, lsl #13
   15c54:	adc	r2, r2, r2
   15c58:	subcs	r0, r0, r1, lsl #13
   15c5c:	cmp	r0, r1, lsl #12
   15c60:	adc	r2, r2, r2
   15c64:	subcs	r0, r0, r1, lsl #12
   15c68:	cmp	r0, r1, lsl #11
   15c6c:	adc	r2, r2, r2
   15c70:	subcs	r0, r0, r1, lsl #11
   15c74:	cmp	r0, r1, lsl #10
   15c78:	adc	r2, r2, r2
   15c7c:	subcs	r0, r0, r1, lsl #10
   15c80:	cmp	r0, r1, lsl #9
   15c84:	adc	r2, r2, r2
   15c88:	subcs	r0, r0, r1, lsl #9
   15c8c:	cmp	r0, r1, lsl #8
   15c90:	adc	r2, r2, r2
   15c94:	subcs	r0, r0, r1, lsl #8
   15c98:	cmp	r0, r1, lsl #7
   15c9c:	adc	r2, r2, r2
   15ca0:	subcs	r0, r0, r1, lsl #7
   15ca4:	cmp	r0, r1, lsl #6
   15ca8:	adc	r2, r2, r2
   15cac:	subcs	r0, r0, r1, lsl #6
   15cb0:	cmp	r0, r1, lsl #5
   15cb4:	adc	r2, r2, r2
   15cb8:	subcs	r0, r0, r1, lsl #5
   15cbc:	cmp	r0, r1, lsl #4
   15cc0:	adc	r2, r2, r2
   15cc4:	subcs	r0, r0, r1, lsl #4
   15cc8:	cmp	r0, r1, lsl #3
   15ccc:	adc	r2, r2, r2
   15cd0:	subcs	r0, r0, r1, lsl #3
   15cd4:	cmp	r0, r1, lsl #2
   15cd8:	adc	r2, r2, r2
   15cdc:	subcs	r0, r0, r1, lsl #2
   15ce0:	cmp	r0, r1, lsl #1
   15ce4:	adc	r2, r2, r2
   15ce8:	subcs	r0, r0, r1, lsl #1
   15cec:	cmp	r0, r1
   15cf0:	adc	r2, r2, r2
   15cf4:	subcs	r0, r0, r1
   15cf8:	mov	r0, r2
   15cfc:	bx	lr
   15d00:	moveq	r0, #1
   15d04:	movne	r0, #0
   15d08:	bx	lr
   15d0c:	clz	r2, r1
   15d10:	rsb	r2, r2, #31
   15d14:	lsr	r0, r0, r2
   15d18:	bx	lr
   15d1c:	cmp	r0, #0
   15d20:	mvnne	r0, #0
   15d24:	b	15fc4 <__assert_fail@plt+0x5068>
   15d28:	cmp	r1, #0
   15d2c:	beq	15d1c <__assert_fail@plt+0x4dc0>
   15d30:	push	{r0, r1, lr}
   15d34:	bl	15b3c <__assert_fail@plt+0x4be0>
   15d38:	pop	{r1, r2, lr}
   15d3c:	mul	r3, r2, r0
   15d40:	sub	r1, r1, r3
   15d44:	bx	lr
   15d48:	cmp	r1, #0
   15d4c:	beq	15f58 <__assert_fail@plt+0x4ffc>
   15d50:	eor	ip, r0, r1
   15d54:	rsbmi	r1, r1, #0
   15d58:	subs	r2, r1, #1
   15d5c:	beq	15f24 <__assert_fail@plt+0x4fc8>
   15d60:	movs	r3, r0
   15d64:	rsbmi	r3, r0, #0
   15d68:	cmp	r3, r1
   15d6c:	bls	15f30 <__assert_fail@plt+0x4fd4>
   15d70:	tst	r1, r2
   15d74:	beq	15f40 <__assert_fail@plt+0x4fe4>
   15d78:	clz	r2, r3
   15d7c:	clz	r0, r1
   15d80:	sub	r2, r0, r2
   15d84:	rsbs	r2, r2, #31
   15d88:	addne	r2, r2, r2, lsl #1
   15d8c:	mov	r0, #0
   15d90:	addne	pc, pc, r2, lsl #2
   15d94:	nop			; (mov r0, r0)
   15d98:	cmp	r3, r1, lsl #31
   15d9c:	adc	r0, r0, r0
   15da0:	subcs	r3, r3, r1, lsl #31
   15da4:	cmp	r3, r1, lsl #30
   15da8:	adc	r0, r0, r0
   15dac:	subcs	r3, r3, r1, lsl #30
   15db0:	cmp	r3, r1, lsl #29
   15db4:	adc	r0, r0, r0
   15db8:	subcs	r3, r3, r1, lsl #29
   15dbc:	cmp	r3, r1, lsl #28
   15dc0:	adc	r0, r0, r0
   15dc4:	subcs	r3, r3, r1, lsl #28
   15dc8:	cmp	r3, r1, lsl #27
   15dcc:	adc	r0, r0, r0
   15dd0:	subcs	r3, r3, r1, lsl #27
   15dd4:	cmp	r3, r1, lsl #26
   15dd8:	adc	r0, r0, r0
   15ddc:	subcs	r3, r3, r1, lsl #26
   15de0:	cmp	r3, r1, lsl #25
   15de4:	adc	r0, r0, r0
   15de8:	subcs	r3, r3, r1, lsl #25
   15dec:	cmp	r3, r1, lsl #24
   15df0:	adc	r0, r0, r0
   15df4:	subcs	r3, r3, r1, lsl #24
   15df8:	cmp	r3, r1, lsl #23
   15dfc:	adc	r0, r0, r0
   15e00:	subcs	r3, r3, r1, lsl #23
   15e04:	cmp	r3, r1, lsl #22
   15e08:	adc	r0, r0, r0
   15e0c:	subcs	r3, r3, r1, lsl #22
   15e10:	cmp	r3, r1, lsl #21
   15e14:	adc	r0, r0, r0
   15e18:	subcs	r3, r3, r1, lsl #21
   15e1c:	cmp	r3, r1, lsl #20
   15e20:	adc	r0, r0, r0
   15e24:	subcs	r3, r3, r1, lsl #20
   15e28:	cmp	r3, r1, lsl #19
   15e2c:	adc	r0, r0, r0
   15e30:	subcs	r3, r3, r1, lsl #19
   15e34:	cmp	r3, r1, lsl #18
   15e38:	adc	r0, r0, r0
   15e3c:	subcs	r3, r3, r1, lsl #18
   15e40:	cmp	r3, r1, lsl #17
   15e44:	adc	r0, r0, r0
   15e48:	subcs	r3, r3, r1, lsl #17
   15e4c:	cmp	r3, r1, lsl #16
   15e50:	adc	r0, r0, r0
   15e54:	subcs	r3, r3, r1, lsl #16
   15e58:	cmp	r3, r1, lsl #15
   15e5c:	adc	r0, r0, r0
   15e60:	subcs	r3, r3, r1, lsl #15
   15e64:	cmp	r3, r1, lsl #14
   15e68:	adc	r0, r0, r0
   15e6c:	subcs	r3, r3, r1, lsl #14
   15e70:	cmp	r3, r1, lsl #13
   15e74:	adc	r0, r0, r0
   15e78:	subcs	r3, r3, r1, lsl #13
   15e7c:	cmp	r3, r1, lsl #12
   15e80:	adc	r0, r0, r0
   15e84:	subcs	r3, r3, r1, lsl #12
   15e88:	cmp	r3, r1, lsl #11
   15e8c:	adc	r0, r0, r0
   15e90:	subcs	r3, r3, r1, lsl #11
   15e94:	cmp	r3, r1, lsl #10
   15e98:	adc	r0, r0, r0
   15e9c:	subcs	r3, r3, r1, lsl #10
   15ea0:	cmp	r3, r1, lsl #9
   15ea4:	adc	r0, r0, r0
   15ea8:	subcs	r3, r3, r1, lsl #9
   15eac:	cmp	r3, r1, lsl #8
   15eb0:	adc	r0, r0, r0
   15eb4:	subcs	r3, r3, r1, lsl #8
   15eb8:	cmp	r3, r1, lsl #7
   15ebc:	adc	r0, r0, r0
   15ec0:	subcs	r3, r3, r1, lsl #7
   15ec4:	cmp	r3, r1, lsl #6
   15ec8:	adc	r0, r0, r0
   15ecc:	subcs	r3, r3, r1, lsl #6
   15ed0:	cmp	r3, r1, lsl #5
   15ed4:	adc	r0, r0, r0
   15ed8:	subcs	r3, r3, r1, lsl #5
   15edc:	cmp	r3, r1, lsl #4
   15ee0:	adc	r0, r0, r0
   15ee4:	subcs	r3, r3, r1, lsl #4
   15ee8:	cmp	r3, r1, lsl #3
   15eec:	adc	r0, r0, r0
   15ef0:	subcs	r3, r3, r1, lsl #3
   15ef4:	cmp	r3, r1, lsl #2
   15ef8:	adc	r0, r0, r0
   15efc:	subcs	r3, r3, r1, lsl #2
   15f00:	cmp	r3, r1, lsl #1
   15f04:	adc	r0, r0, r0
   15f08:	subcs	r3, r3, r1, lsl #1
   15f0c:	cmp	r3, r1
   15f10:	adc	r0, r0, r0
   15f14:	subcs	r3, r3, r1
   15f18:	cmp	ip, #0
   15f1c:	rsbmi	r0, r0, #0
   15f20:	bx	lr
   15f24:	teq	ip, r0
   15f28:	rsbmi	r0, r0, #0
   15f2c:	bx	lr
   15f30:	movcc	r0, #0
   15f34:	asreq	r0, ip, #31
   15f38:	orreq	r0, r0, #1
   15f3c:	bx	lr
   15f40:	clz	r2, r1
   15f44:	rsb	r2, r2, #31
   15f48:	cmp	ip, #0
   15f4c:	lsr	r0, r3, r2
   15f50:	rsbmi	r0, r0, #0
   15f54:	bx	lr
   15f58:	cmp	r0, #0
   15f5c:	mvngt	r0, #-2147483648	; 0x80000000
   15f60:	movlt	r0, #-2147483648	; 0x80000000
   15f64:	b	15fc4 <__assert_fail@plt+0x5068>
   15f68:	cmp	r1, #0
   15f6c:	beq	15f58 <__assert_fail@plt+0x4ffc>
   15f70:	push	{r0, r1, lr}
   15f74:	bl	15d50 <__assert_fail@plt+0x4df4>
   15f78:	pop	{r1, r2, lr}
   15f7c:	mul	r3, r2, r0
   15f80:	sub	r1, r1, r3
   15f84:	bx	lr
   15f88:	cmp	r3, #0
   15f8c:	cmpeq	r2, #0
   15f90:	bne	15fa8 <__assert_fail@plt+0x504c>
   15f94:	cmp	r1, #0
   15f98:	cmpeq	r0, #0
   15f9c:	mvnne	r1, #0
   15fa0:	mvnne	r0, #0
   15fa4:	b	15fc4 <__assert_fail@plt+0x5068>
   15fa8:	sub	sp, sp, #8
   15fac:	push	{sp, lr}
   15fb0:	bl	15fd4 <__assert_fail@plt+0x5078>
   15fb4:	ldr	lr, [sp, #4]
   15fb8:	add	sp, sp, #8
   15fbc:	pop	{r2, r3}
   15fc0:	bx	lr
   15fc4:	push	{r1, lr}
   15fc8:	mov	r0, #8
   15fcc:	bl	10cec <raise@plt>
   15fd0:	pop	{r1, pc}
   15fd4:	cmp	r1, r3
   15fd8:	push	{r4, r5, r6, r7, r8, r9, lr}
   15fdc:	cmpeq	r0, r2
   15fe0:	mov	r4, r0
   15fe4:	mov	r5, r1
   15fe8:	ldr	r9, [sp, #28]
   15fec:	movcc	r0, #0
   15ff0:	movcc	r1, #0
   15ff4:	bcc	160ec <__assert_fail@plt+0x5190>
   15ff8:	cmp	r3, #0
   15ffc:	clzeq	ip, r2
   16000:	clzne	ip, r3
   16004:	addeq	ip, ip, #32
   16008:	cmp	r5, #0
   1600c:	clzeq	r1, r4
   16010:	addeq	r1, r1, #32
   16014:	clzne	r1, r5
   16018:	sub	ip, ip, r1
   1601c:	sub	lr, ip, #32
   16020:	lsl	r7, r3, ip
   16024:	rsb	r8, ip, #32
   16028:	orr	r7, r7, r2, lsl lr
   1602c:	orr	r7, r7, r2, lsr r8
   16030:	lsl	r6, r2, ip
   16034:	cmp	r5, r7
   16038:	cmpeq	r4, r6
   1603c:	movcc	r0, #0
   16040:	movcc	r1, #0
   16044:	bcc	16060 <__assert_fail@plt+0x5104>
   16048:	mov	r3, #1
   1604c:	subs	r4, r4, r6
   16050:	lsl	r1, r3, lr
   16054:	lsl	r0, r3, ip
   16058:	orr	r1, r1, r3, lsr r8
   1605c:	sbc	r5, r5, r7
   16060:	cmp	ip, #0
   16064:	beq	160ec <__assert_fail@plt+0x5190>
   16068:	lsrs	r3, r7, #1
   1606c:	rrx	r2, r6
   16070:	mov	r6, ip
   16074:	b	16098 <__assert_fail@plt+0x513c>
   16078:	subs	r4, r4, r2
   1607c:	sbc	r5, r5, r3
   16080:	adds	r4, r4, r4
   16084:	adc	r5, r5, r5
   16088:	adds	r4, r4, #1
   1608c:	adc	r5, r5, #0
   16090:	subs	r6, r6, #1
   16094:	beq	160b4 <__assert_fail@plt+0x5158>
   16098:	cmp	r5, r3
   1609c:	cmpeq	r4, r2
   160a0:	bcs	16078 <__assert_fail@plt+0x511c>
   160a4:	adds	r4, r4, r4
   160a8:	adc	r5, r5, r5
   160ac:	subs	r6, r6, #1
   160b0:	bne	16098 <__assert_fail@plt+0x513c>
   160b4:	lsr	r6, r4, ip
   160b8:	lsr	r7, r5, ip
   160bc:	orr	r6, r6, r5, lsl r8
   160c0:	adds	r2, r0, r4
   160c4:	orr	r6, r6, r5, lsr lr
   160c8:	adc	r3, r1, r5
   160cc:	lsl	r1, r7, ip
   160d0:	orr	r1, r1, r6, lsl lr
   160d4:	lsl	r0, r6, ip
   160d8:	orr	r1, r1, r6, lsr r8
   160dc:	subs	r0, r2, r0
   160e0:	mov	r4, r6
   160e4:	mov	r5, r7
   160e8:	sbc	r1, r3, r1
   160ec:	cmp	r9, #0
   160f0:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   160f4:	strd	r4, [r9]
   160f8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   160fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16100:	mov	r7, r0
   16104:	ldr	r6, [pc, #72]	; 16154 <__assert_fail@plt+0x51f8>
   16108:	ldr	r5, [pc, #72]	; 16158 <__assert_fail@plt+0x51fc>
   1610c:	add	r6, pc, r6
   16110:	add	r5, pc, r5
   16114:	sub	r6, r6, r5
   16118:	mov	r8, r1
   1611c:	mov	r9, r2
   16120:	bl	10cb4 <calloc@plt-0x20>
   16124:	asrs	r6, r6, #2
   16128:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1612c:	mov	r4, #0
   16130:	add	r4, r4, #1
   16134:	ldr	r3, [r5], #4
   16138:	mov	r2, r9
   1613c:	mov	r1, r8
   16140:	mov	r0, r7
   16144:	blx	r3
   16148:	cmp	r6, r4
   1614c:	bne	16130 <__assert_fail@plt+0x51d4>
   16150:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16154:	strdeq	r1, [r1], -ip
   16158:	strdeq	r1, [r1], -r4
   1615c:	bx	lr
   16160:	ldr	r3, [pc, #12]	; 16174 <__assert_fail@plt+0x5218>
   16164:	mov	r1, #0
   16168:	add	r3, pc, r3
   1616c:	ldr	r2, [r3]
   16170:	b	10e90 <__cxa_atexit@plt>
   16174:	andeq	r1, r1, r0, lsl #31

Disassembly of section .fini:

00016178 <.fini>:
   16178:	push	{r3, lr}
   1617c:	pop	{r3, pc}
