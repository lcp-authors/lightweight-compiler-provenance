
../repos/coreutils/src/stat:     file format elf32-littlearm


Disassembly of section .init:

000113fc <.init>:
   113fc:	push	{r3, lr}
   11400:	bl	11d1c <__assert_fail@plt+0x4c8>
   11404:	pop	{r3, pc}

Disassembly of section .plt:

00011408 <calloc@plt-0x14>:
   11408:	push	{lr}		; (str lr, [sp, #-4]!)
   1140c:	ldr	lr, [pc, #4]	; 11418 <calloc@plt-0x4>
   11410:	add	lr, pc, lr
   11414:	ldr	pc, [lr, #8]!
   11418:	andeq	sp, r1, r8, ror #23

0001141c <calloc@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #118784	; 0x1d000
   11424:	ldr	pc, [ip, #3048]!	; 0xbe8

00011428 <fputs_unlocked@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #118784	; 0x1d000
   11430:	ldr	pc, [ip, #3040]!	; 0xbe0

00011434 <raise@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #118784	; 0x1d000
   1143c:	ldr	pc, [ip, #3032]!	; 0xbd8

00011440 <gmtime_r@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #118784	; 0x1d000
   11448:	ldr	pc, [ip, #3024]!	; 0xbd0

0001144c <__getdelim@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #118784	; 0x1d000
   11454:	ldr	pc, [ip, #3016]!	; 0xbc8

00011458 <is_selinux_enabled@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #118784	; 0x1d000
   11460:	ldr	pc, [ip, #3008]!	; 0xbc0

00011464 <strcmp@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #118784	; 0x1d000
   1146c:	ldr	pc, [ip, #3000]!	; 0xbb8

00011470 <strtol@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #118784	; 0x1d000
   11478:	ldr	pc, [ip, #2992]!	; 0xbb0

0001147c <getpwuid@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #118784	; 0x1d000
   11484:	ldr	pc, [ip, #2984]!	; 0xba8

00011488 <mktime@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #118784	; 0x1d000
   11490:	ldr	pc, [ip, #2976]!	; 0xba0

00011494 <fflush@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #118784	; 0x1d000
   1149c:	ldr	pc, [ip, #2968]!	; 0xb98

000114a0 <free@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #118784	; 0x1d000
   114a8:	ldr	pc, [ip, #2960]!	; 0xb90

000114ac <_exit@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #118784	; 0x1d000
   114b4:	ldr	pc, [ip, #2952]!	; 0xb88

000114b8 <memcpy@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #118784	; 0x1d000
   114c0:	ldr	pc, [ip, #2944]!	; 0xb80

000114c4 <mbsinit@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #118784	; 0x1d000
   114cc:	ldr	pc, [ip, #2936]!	; 0xb78

000114d0 <memcmp@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #118784	; 0x1d000
   114d8:	ldr	pc, [ip, #2928]!	; 0xb70

000114dc <fputc_unlocked@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #118784	; 0x1d000
   114e4:	ldr	pc, [ip, #2920]!	; 0xb68

000114e8 <dcgettext@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #118784	; 0x1d000
   114f0:	ldr	pc, [ip, #2912]!	; 0xb60

000114f4 <realloc@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #118784	; 0x1d000
   114fc:	ldr	pc, [ip, #2904]!	; 0xb58

00011500 <fgetfilecon@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #118784	; 0x1d000
   11508:	ldr	pc, [ip, #2896]!	; 0xb50

0001150c <localtime_r@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #118784	; 0x1d000
   11514:	ldr	pc, [ip, #2888]!	; 0xb48

00011518 <textdomain@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #118784	; 0x1d000
   11520:	ldr	pc, [ip, #2880]!	; 0xb40

00011524 <chdir@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #118784	; 0x1d000
   1152c:	ldr	pc, [ip, #2872]!	; 0xb38

00011530 <iswprint@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #118784	; 0x1d000
   11538:	ldr	pc, [ip, #2864]!	; 0xb30

0001153c <tzset@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #118784	; 0x1d000
   11544:	ldr	pc, [ip, #2856]!	; 0xb28

00011548 <readlink@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #118784	; 0x1d000
   11550:	ldr	pc, [ip, #2848]!	; 0xb20

00011554 <fwrite@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #118784	; 0x1d000
   1155c:	ldr	pc, [ip, #2840]!	; 0xb18

00011560 <lseek64@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #118784	; 0x1d000
   11568:	ldr	pc, [ip, #2832]!	; 0xb10

0001156c <__ctype_get_mb_cur_max@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #118784	; 0x1d000
   11574:	ldr	pc, [ip, #2824]!	; 0xb08

00011578 <hasmntopt@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #118784	; 0x1d000
   11580:	ldr	pc, [ip, #2816]!	; 0xb00

00011584 <strcpy@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #118784	; 0x1d000
   1158c:	ldr	pc, [ip, #2808]!	; 0xaf8

00011590 <__fpending@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #118784	; 0x1d000
   11598:	ldr	pc, [ip, #2800]!	; 0xaf0

0001159c <mbrtowc@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #118784	; 0x1d000
   115a4:	ldr	pc, [ip, #2792]!	; 0xae8

000115a8 <error@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #118784	; 0x1d000
   115b0:	ldr	pc, [ip, #2784]!	; 0xae0

000115b4 <getmntent@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #118784	; 0x1d000
   115bc:	ldr	pc, [ip, #2776]!	; 0xad8

000115c0 <open64@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #118784	; 0x1d000
   115c8:	ldr	pc, [ip, #2768]!	; 0xad0

000115cc <getenv@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #118784	; 0x1d000
   115d4:	ldr	pc, [ip, #2760]!	; 0xac8

000115d8 <lgetfilecon@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #118784	; 0x1d000
   115e0:	ldr	pc, [ip, #2752]!	; 0xac0

000115e4 <malloc@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #118784	; 0x1d000
   115ec:	ldr	pc, [ip, #2744]!	; 0xab8

000115f0 <__libc_start_main@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #118784	; 0x1d000
   115f8:	ldr	pc, [ip, #2736]!	; 0xab0

000115fc <strftime@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #118784	; 0x1d000
   11604:	ldr	pc, [ip, #2728]!	; 0xaa8

00011608 <__freading@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #118784	; 0x1d000
   11610:	ldr	pc, [ip, #2720]!	; 0xaa0

00011614 <__ctype_tolower_loc@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #118784	; 0x1d000
   1161c:	ldr	pc, [ip, #2712]!	; 0xa98

00011620 <__ctype_toupper_loc@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #118784	; 0x1d000
   11628:	ldr	pc, [ip, #2704]!	; 0xa90

0001162c <__gmon_start__@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #118784	; 0x1d000
   11634:	ldr	pc, [ip, #2696]!	; 0xa88

00011638 <getopt_long@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #118784	; 0x1d000
   11640:	ldr	pc, [ip, #2688]!	; 0xa80

00011644 <__ctype_b_loc@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #118784	; 0x1d000
   1164c:	ldr	pc, [ip, #2680]!	; 0xa78

00011650 <getcwd@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #118784	; 0x1d000
   11658:	ldr	pc, [ip, #2672]!	; 0xa70

0001165c <exit@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #118784	; 0x1d000
   11664:	ldr	pc, [ip, #2664]!	; 0xa68

00011668 <getfilecon@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #118784	; 0x1d000
   11670:	ldr	pc, [ip, #2656]!	; 0xa60

00011674 <strlen@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #118784	; 0x1d000
   1167c:	ldr	pc, [ip, #2648]!	; 0xa58

00011680 <strchr@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #118784	; 0x1d000
   11688:	ldr	pc, [ip, #2640]!	; 0xa50

0001168c <setenv@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #118784	; 0x1d000
   11694:	ldr	pc, [ip, #2632]!	; 0xa48

00011698 <openat64@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #118784	; 0x1d000
   116a0:	ldr	pc, [ip, #2624]!	; 0xa40

000116a4 <memrchr@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #118784	; 0x1d000
   116ac:	ldr	pc, [ip, #2616]!	; 0xa38

000116b0 <__errno_location@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #118784	; 0x1d000
   116b8:	ldr	pc, [ip, #2608]!	; 0xa30

000116bc <__sprintf_chk@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #118784	; 0x1d000
   116c4:	ldr	pc, [ip, #2600]!	; 0xa28

000116c8 <__cxa_atexit@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #118784	; 0x1d000
   116d0:	ldr	pc, [ip, #2592]!	; 0xa20

000116d4 <__vasprintf_chk@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #118784	; 0x1d000
   116dc:	ldr	pc, [ip, #2584]!	; 0xa18

000116e0 <memset@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #118784	; 0x1d000
   116e8:	ldr	pc, [ip, #2576]!	; 0xa10

000116ec <__printf_chk@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #118784	; 0x1d000
   116f4:	ldr	pc, [ip, #2568]!	; 0xa08

000116f8 <fileno@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #118784	; 0x1d000
   11700:	ldr	pc, [ip, #2560]!	; 0xa00

00011704 <__fprintf_chk@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #118784	; 0x1d000
   1170c:	ldr	pc, [ip, #2552]!	; 0x9f8

00011710 <memchr@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #118784	; 0x1d000
   11718:	ldr	pc, [ip, #2544]!	; 0x9f0

0001171c <fclose@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #118784	; 0x1d000
   11724:	ldr	pc, [ip, #2536]!	; 0x9e8

00011728 <fseeko64@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #118784	; 0x1d000
   11730:	ldr	pc, [ip, #2528]!	; 0x9e0

00011734 <statx@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #118784	; 0x1d000
   1173c:	ldr	pc, [ip, #2520]!	; 0x9d8

00011740 <endmntent@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #118784	; 0x1d000
   11748:	ldr	pc, [ip, #2512]!	; 0x9d0

0001174c <fcntl64@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #118784	; 0x1d000
   11754:	ldr	pc, [ip, #2504]!	; 0x9c8

00011758 <__overflow@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #118784	; 0x1d000
   11760:	ldr	pc, [ip, #2496]!	; 0x9c0

00011764 <setlocale@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #118784	; 0x1d000
   1176c:	ldr	pc, [ip, #2488]!	; 0x9b8

00011770 <strrchr@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #118784	; 0x1d000
   11778:	ldr	pc, [ip, #2480]!	; 0x9b0

0001177c <statfs64@plt>:
   1177c:	add	ip, pc, #0, 12
   11780:	add	ip, ip, #118784	; 0x1d000
   11784:	ldr	pc, [ip, #2472]!	; 0x9a8

00011788 <nl_langinfo@plt>:
   11788:	add	ip, pc, #0, 12
   1178c:	add	ip, ip, #118784	; 0x1d000
   11790:	ldr	pc, [ip, #2464]!	; 0x9a0

00011794 <sscanf@plt>:
   11794:	add	ip, pc, #0, 12
   11798:	add	ip, ip, #118784	; 0x1d000
   1179c:	ldr	pc, [ip, #2456]!	; 0x998

000117a0 <localeconv@plt>:
   117a0:	add	ip, pc, #0, 12
   117a4:	add	ip, ip, #118784	; 0x1d000
   117a8:	ldr	pc, [ip, #2448]!	; 0x990

000117ac <timegm@plt>:
   117ac:	add	ip, pc, #0, 12
   117b0:	add	ip, ip, #118784	; 0x1d000
   117b4:	ldr	pc, [ip, #2440]!	; 0x988

000117b8 <fchdir@plt>:
   117b8:	add	ip, pc, #0, 12
   117bc:	add	ip, ip, #118784	; 0x1d000
   117c0:	ldr	pc, [ip, #2432]!	; 0x980

000117c4 <canonicalize_file_name@plt>:
   117c4:	add	ip, pc, #0, 12
   117c8:	add	ip, ip, #118784	; 0x1d000
   117cc:	ldr	pc, [ip, #2424]!	; 0x978

000117d0 <fopen64@plt>:
   117d0:	add	ip, pc, #0, 12
   117d4:	add	ip, ip, #118784	; 0x1d000
   117d8:	ldr	pc, [ip, #2416]!	; 0x970

000117dc <freecon@plt>:
   117dc:	add	ip, pc, #0, 12
   117e0:	add	ip, ip, #118784	; 0x1d000
   117e4:	ldr	pc, [ip, #2408]!	; 0x968

000117e8 <setmntent@plt>:
   117e8:	add	ip, pc, #0, 12
   117ec:	add	ip, ip, #118784	; 0x1d000
   117f0:	ldr	pc, [ip, #2400]!	; 0x960

000117f4 <bindtextdomain@plt>:
   117f4:	add	ip, pc, #0, 12
   117f8:	add	ip, ip, #118784	; 0x1d000
   117fc:	ldr	pc, [ip, #2392]!	; 0x958

00011800 <__xstat64@plt>:
   11800:	add	ip, pc, #0, 12
   11804:	add	ip, ip, #118784	; 0x1d000
   11808:	ldr	pc, [ip, #2384]!	; 0x950

0001180c <unsetenv@plt>:
   1180c:	add	ip, pc, #0, 12
   11810:	add	ip, ip, #118784	; 0x1d000
   11814:	ldr	pc, [ip, #2376]!	; 0x948

00011818 <strncmp@plt>:
   11818:	add	ip, pc, #0, 12
   1181c:	add	ip, ip, #118784	; 0x1d000
   11820:	ldr	pc, [ip, #2368]!	; 0x940

00011824 <abort@plt>:
   11824:	add	ip, pc, #0, 12
   11828:	add	ip, ip, #118784	; 0x1d000
   1182c:	ldr	pc, [ip, #2360]!	; 0x938

00011830 <close@plt>:
   11830:	add	ip, pc, #0, 12
   11834:	add	ip, ip, #118784	; 0x1d000
   11838:	ldr	pc, [ip, #2352]!	; 0x930

0001183c <getgrgid@plt>:
   1183c:	add	ip, pc, #0, 12
   11840:	add	ip, ip, #118784	; 0x1d000
   11844:	ldr	pc, [ip, #2344]!	; 0x928

00011848 <strspn@plt>:
   11848:	add	ip, pc, #0, 12
   1184c:	add	ip, ip, #118784	; 0x1d000
   11850:	ldr	pc, [ip, #2336]!	; 0x920

00011854 <__assert_fail@plt>:
   11854:	add	ip, pc, #0, 12
   11858:	add	ip, ip, #118784	; 0x1d000
   1185c:	ldr	pc, [ip, #2328]!	; 0x918

Disassembly of section .text:

00011860 <.text>:
   11860:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11864:	mov	r7, r0
   11868:	sub	sp, sp, #124	; 0x7c
   1186c:	ldr	r0, [r1]
   11870:	mov	r6, r1
   11874:	bl	17e90 <__assert_fail@plt+0x663c>
   11878:	ldr	r1, [pc, #1000]	; 11c68 <__assert_fail@plt+0x414>
   1187c:	mov	r0, #6
   11880:	bl	11764 <setlocale@plt>
   11884:	ldr	r1, [pc, #992]	; 11c6c <__assert_fail@plt+0x418>
   11888:	ldr	r0, [pc, #992]	; 11c70 <__assert_fail@plt+0x41c>
   1188c:	bl	117f4 <bindtextdomain@plt>
   11890:	ldr	r0, [pc, #984]	; 11c70 <__assert_fail@plt+0x41c>
   11894:	bl	11518 <textdomain@plt>
   11898:	bl	117a0 <localeconv@plt>
   1189c:	ldr	r3, [pc, #976]	; 11c74 <__assert_fail@plt+0x420>
   118a0:	mov	r9, #0
   118a4:	add	fp, r3, #360	; 0x168
   118a8:	ldr	r2, [pc, #968]	; 11c78 <__assert_fail@plt+0x424>
   118ac:	ldr	r8, [pc, #968]	; 11c7c <__assert_fail@plt+0x428>
   118b0:	str	r9, [sp, #24]
   118b4:	str	r9, [sp, #20]
   118b8:	ldr	sl, [pc, #960]	; 11c80 <__assert_fail@plt+0x42c>
   118bc:	ldr	r3, [r0]
   118c0:	ldrb	r1, [r3]
   118c4:	cmp	r1, r9
   118c8:	moveq	r3, r2
   118cc:	mov	r0, r3
   118d0:	str	r3, [r8, #100]	; 0x64
   118d4:	bl	11674 <strlen@plt>
   118d8:	str	r0, [r8, #96]	; 0x60
   118dc:	ldr	r0, [pc, #928]	; 11c84 <__assert_fail@plt+0x430>
   118e0:	bl	1c9a4 <__assert_fail@plt+0xb150>
   118e4:	mov	r5, #0
   118e8:	str	r5, [sp]
   118ec:	mov	r3, fp
   118f0:	mov	r2, sl
   118f4:	mov	r1, r6
   118f8:	mov	r0, r7
   118fc:	bl	11638 <getopt_long@plt>
   11900:	cmn	r0, #1
   11904:	mov	r4, r0
   11908:	beq	11a68 <__assert_fail@plt+0x214>
   1190c:	cmp	r4, #76	; 0x4c
   11910:	beq	11a44 <__assert_fail@plt+0x1f0>
   11914:	ble	11954 <__assert_fail@plt+0x100>
   11918:	cmp	r4, #102	; 0x66
   1191c:	beq	11a00 <__assert_fail@plt+0x1ac>
   11920:	ble	119dc <__assert_fail@plt+0x188>
   11924:	cmp	r4, #116	; 0x74
   11928:	beq	119d0 <__assert_fail@plt+0x17c>
   1192c:	cmp	r4, #256	; 0x100
   11930:	bne	1196c <__assert_fail@plt+0x118>
   11934:	mov	r3, #1
   11938:	ldr	r2, [pc, #840]	; 11c88 <__assert_fail@plt+0x434>
   1193c:	strb	r3, [r8, #117]	; 0x75
   11940:	ldr	r3, [pc, #836]	; 11c8c <__assert_fail@plt+0x438>
   11944:	ldr	r1, [pc, #796]	; 11c68 <__assert_fail@plt+0x414>
   11948:	ldr	r9, [r3]
   1194c:	str	r1, [r2]
   11950:	b	118e4 <__assert_fail@plt+0x90>
   11954:	cmn	r4, #2
   11958:	beq	11a0c <__assert_fail@plt+0x1b8>
   1195c:	cmp	r4, #0
   11960:	beq	11974 <__assert_fail@plt+0x120>
   11964:	cmn	r4, #3
   11968:	beq	11a14 <__assert_fail@plt+0x1c0>
   1196c:	mov	r0, #1
   11970:	bl	148f0 <__assert_fail@plt+0x309c>
   11974:	ldr	r2, [pc, #788]	; 11c90 <__assert_fail@plt+0x43c>
   11978:	mov	r1, #4
   1197c:	ldr	r3, [pc, #784]	; 11c94 <__assert_fail@plt+0x440>
   11980:	ldr	r2, [r2]
   11984:	str	r1, [sp]
   11988:	ldr	r1, [pc, #764]	; 11c8c <__assert_fail@plt+0x438>
   1198c:	mov	r5, #1
   11990:	str	r2, [sp, #4]
   11994:	str	r5, [sp, #8]
   11998:	add	r2, r3, #12
   1199c:	ldr	r1, [r1]
   119a0:	ldr	r0, [pc, #752]	; 11c98 <__assert_fail@plt+0x444>
   119a4:	bl	15434 <__assert_fail@plt+0x3be0>
   119a8:	ldr	r3, [pc, #708]	; 11c74 <__assert_fail@plt+0x420>
   119ac:	add	r0, r3, r0, lsl #2
   119b0:	ldr	r3, [r0, #332]	; 0x14c
   119b4:	cmp	r3, r5
   119b8:	beq	11a5c <__assert_fail@plt+0x208>
   119bc:	bcc	11a50 <__assert_fail@plt+0x1fc>
   119c0:	cmp	r3, #2
   119c4:	strbeq	r4, [r8, #119]	; 0x77
   119c8:	strbeq	r5, [r8, #118]	; 0x76
   119cc:	b	118e4 <__assert_fail@plt+0x90>
   119d0:	mov	r3, #1
   119d4:	str	r3, [sp, #24]
   119d8:	b	118e4 <__assert_fail@plt+0x90>
   119dc:	cmp	r4, #99	; 0x63
   119e0:	bne	1196c <__assert_fail@plt+0x118>
   119e4:	ldr	r3, [pc, #668]	; 11c88 <__assert_fail@plt+0x434>
   119e8:	ldr	r2, [pc, #684]	; 11c9c <__assert_fail@plt+0x448>
   119ec:	strb	r5, [r8, #117]	; 0x75
   119f0:	str	r2, [r3]
   119f4:	ldr	r3, [pc, #656]	; 11c8c <__assert_fail@plt+0x438>
   119f8:	ldr	r9, [r3]
   119fc:	b	118e4 <__assert_fail@plt+0x90>
   11a00:	mov	r3, #1
   11a04:	str	r3, [sp, #20]
   11a08:	b	118e4 <__assert_fail@plt+0x90>
   11a0c:	mov	r0, r5
   11a10:	bl	148f0 <__assert_fail@plt+0x309c>
   11a14:	ldr	r1, [pc, #644]	; 11ca0 <__assert_fail@plt+0x44c>
   11a18:	ldr	r3, [pc, #644]	; 11ca4 <__assert_fail@plt+0x450>
   11a1c:	ldr	r2, [pc, #644]	; 11ca8 <__assert_fail@plt+0x454>
   11a20:	str	r5, [sp, #4]
   11a24:	ldr	r0, [r1]
   11a28:	ldr	r3, [r3]
   11a2c:	ldr	r1, [pc, #632]	; 11cac <__assert_fail@plt+0x458>
   11a30:	str	r2, [sp]
   11a34:	ldr	r2, [pc, #628]	; 11cb0 <__assert_fail@plt+0x45c>
   11a38:	bl	1a764 <__assert_fail@plt+0x8f10>
   11a3c:	mov	r0, r5
   11a40:	bl	1165c <exit@plt>
   11a44:	mov	r3, #1
   11a48:	strb	r3, [r8, #116]	; 0x74
   11a4c:	b	118e4 <__assert_fail@plt+0x90>
   11a50:	strb	r4, [r8, #119]	; 0x77
   11a54:	strb	r4, [r8, #118]	; 0x76
   11a58:	b	118e4 <__assert_fail@plt+0x90>
   11a5c:	strb	r3, [r8, #119]	; 0x77
   11a60:	strb	r4, [r8, #118]	; 0x76
   11a64:	b	118e4 <__assert_fail@plt+0x90>
   11a68:	ldr	r4, [pc, #580]	; 11cb4 <__assert_fail@plt+0x460>
   11a6c:	ldr	r3, [r4]
   11a70:	cmp	r7, r3
   11a74:	beq	11c00 <__assert_fail@plt+0x3ac>
   11a78:	cmp	r9, #0
   11a7c:	beq	11c24 <__assert_fail@plt+0x3d0>
   11a80:	ldr	r1, [pc, #560]	; 11cb8 <__assert_fail@plt+0x464>
   11a84:	mov	r0, r9
   11a88:	bl	1b3e4 <__assert_fail@plt+0x9b90>
   11a8c:	cmp	r0, #0
   11a90:	streq	r9, [sp, #28]
   11a94:	beq	11ad4 <__assert_fail@plt+0x280>
   11a98:	ldr	r0, [pc, #540]	; 11cbc <__assert_fail@plt+0x468>
   11a9c:	bl	115cc <getenv@plt>
   11aa0:	subs	sl, r0, #0
   11aa4:	beq	11c58 <__assert_fail@plt+0x404>
   11aa8:	ldr	r8, [pc, #528]	; 11cc0 <__assert_fail@plt+0x46c>
   11aac:	mov	r3, #4
   11ab0:	mov	r2, r8
   11ab4:	ldr	r1, [pc, #520]	; 11cc4 <__assert_fail@plt+0x470>
   11ab8:	bl	15170 <__assert_fail@plt+0x391c>
   11abc:	cmp	r0, #0
   11ac0:	blt	11bbc <__assert_fail@plt+0x368>
   11ac4:	ldr	r1, [r8, r0, lsl #2]
   11ac8:	mov	r0, r5
   11acc:	bl	197bc <__assert_fail@plt+0x7f68>
   11ad0:	str	r9, [sp, #28]
   11ad4:	str	r9, [sp, #24]
   11ad8:	ldr	r5, [r4]
   11adc:	mov	r8, #1
   11ae0:	add	fp, sp, #32
   11ae4:	ldr	r9, [sp, #20]
   11ae8:	b	11b40 <__assert_fail@plt+0x2ec>
   11aec:	ldr	sl, [r6, r5, lsl #2]
   11af0:	ldr	r1, [pc, #464]	; 11cc8 <__assert_fail@plt+0x474>
   11af4:	mov	r0, sl
   11af8:	bl	11464 <strcmp@plt>
   11afc:	subs	r4, r0, #0
   11b00:	beq	11b64 <__assert_fail@plt+0x310>
   11b04:	mov	r1, fp
   11b08:	mov	r0, sl
   11b0c:	bl	1177c <statfs64@plt>
   11b10:	cmp	r0, #0
   11b14:	bne	11b9c <__assert_fail@plt+0x348>
   11b18:	str	fp, [sp]
   11b1c:	mov	r2, sl
   11b20:	ldr	r3, [pc, #420]	; 11ccc <__assert_fail@plt+0x478>
   11b24:	mvn	r1, #0
   11b28:	ldr	r0, [sp, #24]
   11b2c:	bl	13d0c <__assert_fail@plt+0x24b8>
   11b30:	eor	r0, r0, #1
   11b34:	uxtb	r0, r0
   11b38:	and	r8, r8, r0
   11b3c:	add	r5, r5, #1
   11b40:	cmp	r5, r7
   11b44:	bge	11bb4 <__assert_fail@plt+0x360>
   11b48:	cmp	r9, #0
   11b4c:	bne	11aec <__assert_fail@plt+0x298>
   11b50:	ldr	r2, [sp, #28]
   11b54:	ldr	r1, [sp, #24]
   11b58:	ldr	r0, [r6, r5, lsl #2]
   11b5c:	bl	14358 <__assert_fail@plt+0x2b04>
   11b60:	b	11b38 <__assert_fail@plt+0x2e4>
   11b64:	ldr	r1, [pc, #356]	; 11cd0 <__assert_fail@plt+0x47c>
   11b68:	mov	r2, #5
   11b6c:	bl	114e8 <dcgettext@plt>
   11b70:	mov	r1, sl
   11b74:	str	r0, [sp, #20]
   11b78:	mov	r0, #4
   11b7c:	bl	19b10 <__assert_fail@plt+0x82bc>
   11b80:	ldr	r2, [sp, #20]
   11b84:	mov	r1, r4
   11b88:	mov	r3, r0
   11b8c:	mov	r0, #0
   11b90:	bl	115a8 <error@plt>
   11b94:	mov	r0, #0
   11b98:	b	11b38 <__assert_fail@plt+0x2e4>
   11b9c:	bl	116b0 <__errno_location@plt>
   11ba0:	mov	r2, #5
   11ba4:	ldr	r1, [pc, #296]	; 11cd4 <__assert_fail@plt+0x480>
   11ba8:	ldr	r4, [r0]
   11bac:	mov	r0, #0
   11bb0:	b	11b6c <__assert_fail@plt+0x318>
   11bb4:	eor	r0, r8, #1
   11bb8:	bl	1165c <exit@plt>
   11bbc:	mov	r1, #4
   11bc0:	mov	r0, r5
   11bc4:	bl	197bc <__assert_fail@plt+0x7f68>
   11bc8:	mov	r2, #5
   11bcc:	ldr	r1, [pc, #260]	; 11cd8 <__assert_fail@plt+0x484>
   11bd0:	mov	r0, r5
   11bd4:	bl	114e8 <dcgettext@plt>
   11bd8:	mov	r8, r0
   11bdc:	mov	r0, sl
   11be0:	bl	19d50 <__assert_fail@plt+0x84fc>
   11be4:	mov	r2, r8
   11be8:	mov	r1, r5
   11bec:	mov	r3, r0
   11bf0:	mov	r0, r5
   11bf4:	bl	115a8 <error@plt>
   11bf8:	str	r9, [sp, #28]
   11bfc:	b	11ad4 <__assert_fail@plt+0x280>
   11c00:	mov	r2, #5
   11c04:	ldr	r1, [pc, #208]	; 11cdc <__assert_fail@plt+0x488>
   11c08:	mov	r0, r5
   11c0c:	bl	114e8 <dcgettext@plt>
   11c10:	mov	r1, r5
   11c14:	mov	r2, r0
   11c18:	mov	r0, r5
   11c1c:	bl	115a8 <error@plt>
   11c20:	b	1196c <__assert_fail@plt+0x118>
   11c24:	ldr	r8, [sp, #24]
   11c28:	ldr	r5, [sp, #20]
   11c2c:	mov	r2, r9
   11c30:	mov	r1, r8
   11c34:	mov	r0, r5
   11c38:	bl	1476c <__assert_fail@plt+0x2f18>
   11c3c:	mov	r1, r8
   11c40:	mov	r2, #1
   11c44:	mov	r9, r0
   11c48:	mov	r0, r5
   11c4c:	bl	1476c <__assert_fail@plt+0x2f18>
   11c50:	str	r0, [sp, #28]
   11c54:	b	11ad4 <__assert_fail@plt+0x280>
   11c58:	mov	r1, #4
   11c5c:	bl	197bc <__assert_fail@plt+0x7f68>
   11c60:	str	r9, [sp, #28]
   11c64:	b	11ad4 <__assert_fail@plt+0x280>
   11c68:	andeq	sp, r1, r0, asr #6
   11c6c:	andeq	lr, r1, ip, asr #5
   11c70:	andeq	lr, r1, r0, lsr #4
   11c74:	andeq	ip, r1, r8, asr #19
   11c78:	andeq	lr, r1, r8, asr #5
   11c7c:	strdeq	pc, [r2], -r8
   11c80:	andeq	lr, r1, r0, lsl #6
   11c84:	andeq	r5, r1, ip, lsr #10
   11c88:	andeq	pc, r2, r4, lsl #3
   11c8c:	strdeq	pc, [r2], -r0
   11c90:	andeq	pc, r2, ip, lsl #3
   11c94:	andeq	ip, r1, r4, lsl fp
   11c98:	andeq	lr, r1, r4, ror #5
   11c9c:			; <UNDEFINED> instruction: 0x0001deb0
   11ca0:	andeq	pc, r2, ip, ror #3
   11ca4:	andeq	pc, r2, r8, lsl #3
   11ca8:	strdeq	lr, [r1], -r0
   11cac:	andeq	sp, r1, r4, lsl #7
   11cb0:	andeq	lr, r1, ip, lsl r2
   11cb4:	andeq	pc, r2, r0, ror #3
   11cb8:	andeq	lr, r1, r8, lsl r3
   11cbc:	andeq	lr, r1, ip, lsl r3
   11cc0:	andeq	lr, r1, r0, ror #14
   11cc4:	andeq	lr, r1, r8, lsl #15
   11cc8:	andeq	ip, r1, r8, asr #23
   11ccc:	andeq	r1, r1, r4, lsr #31
   11cd0:	andeq	lr, r1, r0, ror r3
   11cd4:			; <UNDEFINED> instruction: 0x0001e3b4
   11cd8:	andeq	lr, r1, ip, lsr #6
   11cdc:	andeq	lr, r1, r8, lsl #6
   11ce0:	mov	fp, #0
   11ce4:	mov	lr, #0
   11ce8:	pop	{r1}		; (ldr r1, [sp], #4)
   11cec:	mov	r2, sp
   11cf0:	push	{r2}		; (str r2, [sp, #-4]!)
   11cf4:	push	{r0}		; (str r0, [sp, #-4]!)
   11cf8:	ldr	ip, [pc, #16]	; 11d10 <__assert_fail@plt+0x4bc>
   11cfc:	push	{ip}		; (str ip, [sp, #-4]!)
   11d00:	ldr	r0, [pc, #12]	; 11d14 <__assert_fail@plt+0x4c0>
   11d04:	ldr	r3, [pc, #12]	; 11d18 <__assert_fail@plt+0x4c4>
   11d08:	bl	115f0 <__libc_start_main@plt>
   11d0c:	bl	11824 <abort@plt>
   11d10:	andeq	ip, r1, r0, lsr #19
   11d14:	andeq	r1, r1, r0, ror #16
   11d18:	andeq	ip, r1, r0, asr #18
   11d1c:	ldr	r3, [pc, #20]	; 11d38 <__assert_fail@plt+0x4e4>
   11d20:	ldr	r2, [pc, #20]	; 11d3c <__assert_fail@plt+0x4e8>
   11d24:	add	r3, pc, r3
   11d28:	ldr	r2, [r3, r2]
   11d2c:	cmp	r2, #0
   11d30:	bxeq	lr
   11d34:	b	1162c <__gmon_start__@plt>
   11d38:	ldrdeq	sp, [r1], -r4
   11d3c:	andeq	r0, r0, r8, ror r1
   11d40:	ldr	r3, [pc, #28]	; 11d64 <__assert_fail@plt+0x510>
   11d44:	ldr	r0, [pc, #28]	; 11d68 <__assert_fail@plt+0x514>
   11d48:	sub	r3, r3, r0
   11d4c:	cmp	r3, #6
   11d50:	bxls	lr
   11d54:	ldr	r3, [pc, #16]	; 11d6c <__assert_fail@plt+0x518>
   11d58:	cmp	r3, #0
   11d5c:	bxeq	lr
   11d60:	bx	r3
   11d64:	ldrdeq	pc, [r2], -r7
   11d68:	ldrdeq	pc, [r2], -r4
   11d6c:	andeq	r0, r0, r0
   11d70:	ldr	r1, [pc, #36]	; 11d9c <__assert_fail@plt+0x548>
   11d74:	ldr	r0, [pc, #36]	; 11da0 <__assert_fail@plt+0x54c>
   11d78:	sub	r1, r1, r0
   11d7c:	asr	r1, r1, #2
   11d80:	add	r1, r1, r1, lsr #31
   11d84:	asrs	r1, r1, #1
   11d88:	bxeq	lr
   11d8c:	ldr	r3, [pc, #16]	; 11da4 <__assert_fail@plt+0x550>
   11d90:	cmp	r3, #0
   11d94:	bxeq	lr
   11d98:	bx	r3
   11d9c:	ldrdeq	pc, [r2], -r4
   11da0:	ldrdeq	pc, [r2], -r4
   11da4:	andeq	r0, r0, r0
   11da8:	push	{r4, lr}
   11dac:	ldr	r4, [pc, #24]	; 11dcc <__assert_fail@plt+0x578>
   11db0:	ldrb	r3, [r4]
   11db4:	cmp	r3, #0
   11db8:	popne	{r4, pc}
   11dbc:	bl	11d40 <__assert_fail@plt+0x4ec>
   11dc0:	mov	r3, #1
   11dc4:	strb	r3, [r4]
   11dc8:	pop	{r4, pc}
   11dcc:	strdeq	pc, [r2], -r4
   11dd0:	ldr	r0, [pc, #40]	; 11e00 <__assert_fail@plt+0x5ac>
   11dd4:	ldr	r3, [r0]
   11dd8:	cmp	r3, #0
   11ddc:	bne	11de4 <__assert_fail@plt+0x590>
   11de0:	b	11d70 <__assert_fail@plt+0x51c>
   11de4:	ldr	r3, [pc, #24]	; 11e04 <__assert_fail@plt+0x5b0>
   11de8:	cmp	r3, #0
   11dec:	beq	11de0 <__assert_fail@plt+0x58c>
   11df0:	push	{r4, lr}
   11df4:	blx	r3
   11df8:	pop	{r4, lr}
   11dfc:	b	11d70 <__assert_fail@plt+0x51c>
   11e00:	andeq	lr, r2, ip, lsl #30
   11e04:	andeq	r0, r0, r0
   11e08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e0c:	add	r7, r0, r1
   11e10:	sub	sp, sp, #12
   11e14:	add	r6, r0, #1
   11e18:	cmp	r6, r7
   11e1c:	str	r3, [sp, #4]
   11e20:	bcs	11ea4 <__assert_fail@plt+0x650>
   11e24:	mov	r8, r2
   11e28:	ldr	r9, [pc, #136]	; 11eb8 <__assert_fail@plt+0x664>
   11e2c:	mov	r4, r6
   11e30:	b	11e50 <__assert_fail@plt+0x5fc>
   11e34:	bl	11680 <strchr@plt>
   11e38:	mov	r4, fp
   11e3c:	cmp	r0, #0
   11e40:	strbne	r5, [r6]
   11e44:	addne	r6, r6, #1
   11e48:	cmp	r7, fp
   11e4c:	bls	11ea4 <__assert_fail@plt+0x650>
   11e50:	mov	fp, r4
   11e54:	mov	r0, r9
   11e58:	ldrb	r5, [fp], #1
   11e5c:	mov	sl, r4
   11e60:	mov	r1, r5
   11e64:	bl	11680 <strchr@plt>
   11e68:	mov	r1, r5
   11e6c:	cmp	r0, #0
   11e70:	mov	r0, r8
   11e74:	bne	11e34 <__assert_fail@plt+0x5e0>
   11e78:	cmp	r7, r4
   11e7c:	bls	11ea4 <__assert_fail@plt+0x650>
   11e80:	sub	r3, r6, #1
   11e84:	sub	r2, r7, #1
   11e88:	b	11e90 <__assert_fail@plt+0x63c>
   11e8c:	ldrb	r5, [r4, #1]!
   11e90:	cmp	r4, r2
   11e94:	strb	r5, [r3, #1]!
   11e98:	bne	11e8c <__assert_fail@plt+0x638>
   11e9c:	sub	r7, r7, sl
   11ea0:	add	r6, r6, r7
   11ea4:	ldr	r1, [sp, #4]
   11ea8:	mov	r0, r6
   11eac:	add	sp, sp, #12
   11eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11eb4:	b	11584 <strcpy@plt>
   11eb8:	andeq	ip, r1, r8, asr #19
   11ebc:	push	{r4, r6, r7, lr}
   11ec0:	mov	r4, r0
   11ec4:	mov	r6, r2
   11ec8:	mov	r7, r3
   11ecc:	ldr	r2, [pc, #28]	; 11ef0 <__assert_fail@plt+0x69c>
   11ed0:	ldr	r3, [pc, #28]	; 11ef4 <__assert_fail@plt+0x6a0>
   11ed4:	bl	11e08 <__assert_fail@plt+0x5b4>
   11ed8:	mov	r2, r6
   11edc:	mov	r3, r7
   11ee0:	mov	r1, r4
   11ee4:	mov	r0, #1
   11ee8:	pop	{r4, r6, r7, lr}
   11eec:	b	116ec <__printf_chk@plt>
   11ef0:	andeq	ip, r1, r4, asr #23
   11ef4:	andeq	ip, r1, r0, asr #23
   11ef8:	push	{r4, r5, r6, lr}
   11efc:	mov	r4, r0
   11f00:	mov	r5, r2
   11f04:	ldr	r3, [pc, #24]	; 11f24 <__assert_fail@plt+0x6d0>
   11f08:	ldr	r2, [pc, #24]	; 11f28 <__assert_fail@plt+0x6d4>
   11f0c:	bl	11e08 <__assert_fail@plt+0x5b4>
   11f10:	mov	r2, r5
   11f14:	mov	r1, r4
   11f18:	mov	r0, #1
   11f1c:	pop	{r4, r5, r6, lr}
   11f20:	b	116ec <__printf_chk@plt>
   11f24:	strdeq	sp, [r1], -r4
   11f28:	andeq	ip, r1, r8, asr #23
   11f2c:	push	{r4, r6, r7, lr}
   11f30:	mov	r4, r0
   11f34:	mov	r6, r2
   11f38:	mov	r7, r3
   11f3c:	ldr	r2, [pc, #28]	; 11f60 <__assert_fail@plt+0x70c>
   11f40:	ldr	r3, [pc, #28]	; 11f64 <__assert_fail@plt+0x710>
   11f44:	bl	11e08 <__assert_fail@plt+0x5b4>
   11f48:	mov	r2, r6
   11f4c:	mov	r3, r7
   11f50:	mov	r1, r4
   11f54:	mov	r0, #1
   11f58:	pop	{r4, r6, r7, lr}
   11f5c:	b	116ec <__printf_chk@plt>
   11f60:	ldrdeq	ip, [r1], -r0
   11f64:	andeq	ip, r1, ip, asr #23
   11f68:	push	{r4, r6, r7, lr}
   11f6c:	mov	r4, r0
   11f70:	mov	r6, r2
   11f74:	mov	r7, r3
   11f78:	ldr	r2, [pc, #28]	; 11f9c <__assert_fail@plt+0x748>
   11f7c:	ldr	r3, [pc, #28]	; 11fa0 <__assert_fail@plt+0x74c>
   11f80:	bl	11e08 <__assert_fail@plt+0x5b4>
   11f84:	mov	r2, r6
   11f88:	mov	r3, r7
   11f8c:	mov	r1, r4
   11f90:	mov	r0, #1
   11f94:	pop	{r4, r6, r7, lr}
   11f98:	b	116ec <__printf_chk@plt>
   11f9c:	ldrdeq	ip, [r1], -r8
   11fa0:	ldrdeq	ip, [r1], -r4
   11fa4:	sub	r3, r3, #83	; 0x53
   11fa8:	push	{r4, r5, lr}
   11fac:	mov	r4, r0
   11fb0:	sub	sp, sp, #12
   11fb4:	mov	r5, r1
   11fb8:	cmp	r3, #33	; 0x21
   11fbc:	ldrls	pc, [pc, r3, lsl #2]
   11fc0:	b	121c8 <__assert_fail@plt+0x974>
   11fc4:	strheq	r2, [r1], -ip
   11fc8:	andeq	r2, r1, r4, ror #1
   11fcc:	andeq	r2, r1, r8, asr #3
   11fd0:	andeq	r2, r1, r8, asr #3
   11fd4:	andeq	r2, r1, r8, asr #3
   11fd8:	andeq	r2, r1, r8, asr #3
   11fdc:	andeq	r2, r1, r8, asr #3
   11fe0:	andeq	r2, r1, r8, asr #3
   11fe4:	andeq	r2, r1, r8, asr #3
   11fe8:	andeq	r2, r1, r8, asr #3
   11fec:	andeq	r2, r1, r8, asr #3
   11ff0:	andeq	r2, r1, r8, asr #3
   11ff4:	andeq	r2, r1, r8, asr #3
   11ff8:	andeq	r2, r1, r8, asr #3
   11ffc:	andeq	r2, r1, r8, ror r1
   12000:	andeq	r2, r1, r8, lsl #3
   12004:	muleq	r1, r8, r1
   12008:	andeq	r2, r1, r8, lsr #3
   1200c:	andeq	r2, r1, r8, asr #3
   12010:			; <UNDEFINED> instruction: 0x000121b8
   12014:	andeq	r2, r1, r8, asr #3
   12018:	andeq	r2, r1, r8, asr #3
   1201c:	andeq	r2, r1, ip, asr #32
   12020:	andeq	r2, r1, r8, asr #3
   12024:	andeq	r2, r1, r8, asr #3
   12028:	andeq	r2, r1, r4, ror r0
   1202c:	andeq	r2, r1, r8, asr #3
   12030:	andeq	r2, r1, r8, lsl #1
   12034:	andeq	r2, r1, r8, asr #3
   12038:	andeq	r2, r1, r8, asr #3
   1203c:	andeq	r2, r1, r8, asr #3
   12040:	andeq	r2, r1, r8, asr #3
   12044:	muleq	r1, r4, r0
   12048:	andeq	r2, r1, r8, lsr #1
   1204c:	ldr	r1, [sp, #32]
   12050:	mov	r2, #0
   12054:	ldr	ip, [r1, #52]	; 0x34
   12058:	ldr	r3, [r1, #48]	; 0x30
   1205c:	orr	r2, r2, ip
   12060:	mov	r1, r5
   12064:	bl	11ebc <__assert_fail@plt+0x668>
   12068:	mov	r0, #0
   1206c:	add	sp, sp, #12
   12070:	pop	{r4, r5, pc}
   12074:	ldr	r3, [sp, #32]
   12078:	ldr	r2, [r3, #56]	; 0x38
   1207c:	asr	r3, r2, #31
   12080:	bl	11f2c <__assert_fail@plt+0x6d8>
   12084:	b	12068 <__assert_fail@plt+0x814>
   12088:	ldr	r2, [sp, #28]
   1208c:	bl	11ef8 <__assert_fail@plt+0x6a4>
   12090:	b	12068 <__assert_fail@plt+0x814>
   12094:	ldr	r3, [sp, #32]
   12098:	ldr	r2, [r3, #4]
   1209c:	asr	r3, r2, #31
   120a0:	bl	11f2c <__assert_fail@plt+0x6d8>
   120a4:	b	12068 <__assert_fail@plt+0x814>
   120a8:	ldr	r3, [sp, #32]
   120ac:	ldr	r2, [r3]
   120b0:	asr	r3, r2, #31
   120b4:	bl	11ebc <__assert_fail@plt+0x668>
   120b8:	b	12068 <__assert_fail@plt+0x814>
   120bc:	ldr	r3, [sp, #32]
   120c0:	ldr	r2, [r3, #60]	; 0x3c
   120c4:	asr	r3, r2, #31
   120c8:	orrs	r1, r2, r3
   120cc:	mov	r1, r5
   120d0:	ldreq	r3, [sp, #32]
   120d4:	ldreq	r2, [r3, #4]
   120d8:	asreq	r3, r2, #31
   120dc:	bl	11f2c <__assert_fail@plt+0x6d8>
   120e0:	b	12068 <__assert_fail@plt+0x814>
   120e4:	ldr	r3, [sp, #32]
   120e8:	ldr	r2, [pc, #2824]	; 12bf8 <__assert_fail@plt+0x13a4>
   120ec:	ldr	r3, [r3]
   120f0:	cmp	r3, r2
   120f4:	beq	12a0c <__assert_fail@plt+0x11b8>
   120f8:	ble	121fc <__assert_fail@plt+0x9a8>
   120fc:	ldr	r2, [pc, #2808]	; 12bfc <__assert_fail@plt+0x13a8>
   12100:	cmp	r3, r2
   12104:	beq	12a5c <__assert_fail@plt+0x1208>
   12108:	bgt	1226c <__assert_fail@plt+0xa18>
   1210c:	ldr	r2, [pc, #2796]	; 12c00 <__assert_fail@plt+0x13ac>
   12110:	cmp	r3, r2
   12114:	beq	12ae0 <__assert_fail@plt+0x128c>
   12118:	bgt	123a0 <__assert_fail@plt+0xb4c>
   1211c:	ldr	r2, [pc, #2784]	; 12c04 <__assert_fail@plt+0x13b0>
   12120:	cmp	r3, r2
   12124:	beq	12a14 <__assert_fail@plt+0x11c0>
   12128:	bgt	12614 <__assert_fail@plt+0xdc0>
   1212c:	ldr	r2, [pc, #2772]	; 12c08 <__assert_fail@plt+0x13b4>
   12130:	cmp	r3, r2
   12134:	beq	12a34 <__assert_fail@plt+0x11e0>
   12138:	bgt	12784 <__assert_fail@plt+0xf30>
   1213c:	ldr	r2, [pc, #2760]	; 12c0c <__assert_fail@plt+0x13b8>
   12140:	cmp	r3, r2
   12144:	beq	12a44 <__assert_fail@plt+0x11f0>
   12148:	ldr	r2, [pc, #2752]	; 12c10 <__assert_fail@plt+0x13bc>
   1214c:	cmp	r3, r2
   12150:	ldreq	r2, [pc, #2748]	; 12c14 <__assert_fail@plt+0x13c0>
   12154:	beq	12168 <__assert_fail@plt+0x914>
   12158:	ldr	r2, [pc, #2744]	; 12c18 <__assert_fail@plt+0x13c4>
   1215c:	cmp	r3, r2
   12160:	bne	122cc <__assert_fail@plt+0xa78>
   12164:	ldr	r2, [pc, #2736]	; 12c1c <__assert_fail@plt+0x13c8>
   12168:	mov	r1, r5
   1216c:	mov	r0, r4
   12170:	bl	11ef8 <__assert_fail@plt+0x6a4>
   12174:	b	12068 <__assert_fail@plt+0x814>
   12178:	ldr	r3, [sp, #32]
   1217c:	ldrd	r2, [r3, #24]
   12180:	bl	11f68 <__assert_fail@plt+0x714>
   12184:	b	12068 <__assert_fail@plt+0x814>
   12188:	ldr	r3, [sp, #32]
   1218c:	ldrd	r2, [r3, #8]
   12190:	bl	11f68 <__assert_fail@plt+0x714>
   12194:	b	12068 <__assert_fail@plt+0x814>
   12198:	ldr	r3, [sp, #32]
   1219c:	ldrd	r2, [r3, #32]
   121a0:	bl	11f2c <__assert_fail@plt+0x6d8>
   121a4:	b	12068 <__assert_fail@plt+0x814>
   121a8:	ldr	r3, [sp, #32]
   121ac:	ldrd	r2, [r3, #40]	; 0x28
   121b0:	bl	11f68 <__assert_fail@plt+0x714>
   121b4:	b	12068 <__assert_fail@plt+0x814>
   121b8:	ldr	r3, [sp, #32]
   121bc:	ldrd	r2, [r3, #16]
   121c0:	bl	11f68 <__assert_fail@plt+0x714>
   121c4:	b	12068 <__assert_fail@plt+0x814>
   121c8:	ldr	r3, [pc, #2640]	; 12c20 <__assert_fail@plt+0x13cc>
   121cc:	ldr	r0, [r3]
   121d0:	ldr	r3, [r0, #20]
   121d4:	ldr	r2, [r0, #24]
   121d8:	cmp	r3, r2
   121dc:	addcc	r1, r3, #1
   121e0:	movcc	r2, #63	; 0x3f
   121e4:	strcc	r1, [r0, #20]
   121e8:	strbcc	r2, [r3]
   121ec:	bcc	12068 <__assert_fail@plt+0x814>
   121f0:	mov	r1, #63	; 0x3f
   121f4:	bl	11758 <__overflow@plt>
   121f8:	b	12068 <__assert_fail@plt+0x814>
   121fc:	ldr	r2, [pc, #2592]	; 12c24 <__assert_fail@plt+0x13d0>
   12200:	cmp	r3, r2
   12204:	beq	129c8 <__assert_fail@plt+0x1174>
   12208:	bgt	122ec <__assert_fail@plt+0xa98>
   1220c:	ldr	r2, [pc, #2580]	; 12c28 <__assert_fail@plt+0x13d4>
   12210:	cmp	r3, r2
   12214:	beq	12ae8 <__assert_fail@plt+0x1294>
   12218:	bgt	123f4 <__assert_fail@plt+0xba0>
   1221c:	ldr	r2, [pc, #2568]	; 12c2c <__assert_fail@plt+0x13d8>
   12220:	cmp	r3, r2
   12224:	beq	1299c <__assert_fail@plt+0x1148>
   12228:	bgt	124d8 <__assert_fail@plt+0xc84>
   1222c:	ldr	r2, [pc, #2556]	; 12c30 <__assert_fail@plt+0x13dc>
   12230:	cmp	r3, r2
   12234:	beq	12b8c <__assert_fail@plt+0x1338>
   12238:	bgt	127b4 <__assert_fail@plt+0xf60>
   1223c:	ldr	r2, [pc, #2544]	; 12c34 <__assert_fail@plt+0x13e0>
   12240:	cmp	r3, r2
   12244:	beq	12a4c <__assert_fail@plt+0x11f8>
   12248:	ldr	r2, [pc, #2536]	; 12c38 <__assert_fail@plt+0x13e4>
   1224c:	cmp	r3, r2
   12250:	ldreq	r2, [pc, #2532]	; 12c3c <__assert_fail@plt+0x13e8>
   12254:	beq	12168 <__assert_fail@plt+0x914>
   12258:	add	r2, r2, #-268435456	; 0xf0000000
   1225c:	cmp	r3, r2
   12260:	bne	122cc <__assert_fail@plt+0xa78>
   12264:	ldr	r2, [pc, #2516]	; 12c40 <__assert_fail@plt+0x13ec>
   12268:	b	12168 <__assert_fail@plt+0x914>
   1226c:	ldr	r2, [pc, #2512]	; 12c44 <__assert_fail@plt+0x13f0>
   12270:	cmp	r3, r2
   12274:	beq	12a54 <__assert_fail@plt+0x1200>
   12278:	bgt	1234c <__assert_fail@plt+0xaf8>
   1227c:	ldr	r2, [pc, #2500]	; 12c48 <__assert_fail@plt+0x13f4>
   12280:	cmp	r3, r2
   12284:	beq	12b6c <__assert_fail@plt+0x1318>
   12288:	ble	12498 <__assert_fail@plt+0xc44>
   1228c:	ldr	r2, [pc, #2488]	; 12c4c <__assert_fail@plt+0x13f8>
   12290:	cmp	r3, r2
   12294:	beq	12af8 <__assert_fail@plt+0x12a4>
   12298:	ble	128d0 <__assert_fail@plt+0x107c>
   1229c:	ldr	r2, [pc, #2476]	; 12c50 <__assert_fail@plt+0x13fc>
   122a0:	cmp	r3, r2
   122a4:	beq	12b5c <__assert_fail@plt+0x1308>
   122a8:	ble	129b4 <__assert_fail@plt+0x1160>
   122ac:	ldr	r2, [pc, #2464]	; 12c54 <__assert_fail@plt+0x1400>
   122b0:	cmp	r3, r2
   122b4:	ldreq	r2, [pc, #2460]	; 12c58 <__assert_fail@plt+0x1404>
   122b8:	beq	12168 <__assert_fail@plt+0x914>
   122bc:	ldr	r2, [pc, #2456]	; 12c5c <__assert_fail@plt+0x1408>
   122c0:	cmp	r3, r2
   122c4:	ldreq	r2, [pc, #2452]	; 12c60 <__assert_fail@plt+0x140c>
   122c8:	beq	12168 <__assert_fail@plt+0x914>
   122cc:	str	r3, [sp]
   122d0:	mov	r2, #21
   122d4:	ldr	r3, [pc, #2440]	; 12c64 <__assert_fail@plt+0x1410>
   122d8:	mov	r1, #1
   122dc:	ldr	r0, [pc, #2436]	; 12c68 <__assert_fail@plt+0x1414>
   122e0:	bl	116bc <__sprintf_chk@plt>
   122e4:	ldr	r2, [pc, #2428]	; 12c68 <__assert_fail@plt+0x1414>
   122e8:	b	12168 <__assert_fail@plt+0x914>
   122ec:	ldr	r2, [pc, #2424]	; 12c6c <__assert_fail@plt+0x1418>
   122f0:	cmp	r3, r2
   122f4:	beq	12af0 <__assert_fail@plt+0x129c>
   122f8:	bgt	12444 <__assert_fail@plt+0xbf0>
   122fc:	sub	r2, r2, #20480	; 0x5000
   12300:	cmp	r3, r2
   12304:	beq	12ac0 <__assert_fail@plt+0x126c>
   12308:	bgt	12654 <__assert_fail@plt+0xe00>
   1230c:	ldr	r2, [pc, #2396]	; 12c70 <__assert_fail@plt+0x141c>
   12310:	cmp	r3, r2
   12314:	beq	12b7c <__assert_fail@plt+0x1328>
   12318:	bgt	126f4 <__assert_fail@plt+0xea0>
   1231c:	ldr	r2, [pc, #2384]	; 12c74 <__assert_fail@plt+0x1420>
   12320:	cmp	r3, r2
   12324:	beq	12b74 <__assert_fail@plt+0x1320>
   12328:	add	r2, r2, #45	; 0x2d
   1232c:	cmp	r3, r2
   12330:	ldreq	r2, [pc, #2368]	; 12c78 <__assert_fail@plt+0x1424>
   12334:	beq	12168 <__assert_fail@plt+0x914>
   12338:	ldr	r2, [pc, #2364]	; 12c7c <__assert_fail@plt+0x1428>
   1233c:	cmp	r3, r2
   12340:	bne	122cc <__assert_fail@plt+0xa78>
   12344:	ldr	r2, [pc, #2356]	; 12c80 <__assert_fail@plt+0x142c>
   12348:	b	12168 <__assert_fail@plt+0x914>
   1234c:	ldr	r2, [pc, #2352]	; 12c84 <__assert_fail@plt+0x1430>
   12350:	cmp	r3, r2
   12354:	beq	12a80 <__assert_fail@plt+0x122c>
   12358:	ble	1259c <__assert_fail@plt+0xd48>
   1235c:	ldr	r2, [pc, #2340]	; 12c88 <__assert_fail@plt+0x1434>
   12360:	cmp	r3, r2
   12364:	beq	12be8 <__assert_fail@plt+0x1394>
   12368:	ble	12968 <__assert_fail@plt+0x1114>
   1236c:	ldr	r2, [pc, #2328]	; 12c8c <__assert_fail@plt+0x1438>
   12370:	cmp	r3, r2
   12374:	beq	12a78 <__assert_fail@plt+0x1224>
   12378:	ble	12a64 <__assert_fail@plt+0x1210>
   1237c:	ldr	r2, [pc, #2316]	; 12c90 <__assert_fail@plt+0x143c>
   12380:	cmp	r3, r2
   12384:	ldreq	r2, [pc, #2312]	; 12c94 <__assert_fail@plt+0x1440>
   12388:	beq	12168 <__assert_fail@plt+0x914>
   1238c:	ldr	r2, [pc, #2308]	; 12c98 <__assert_fail@plt+0x1444>
   12390:	cmp	r3, r2
   12394:	ldreq	r2, [pc, #2304]	; 12c9c <__assert_fail@plt+0x1448>
   12398:	beq	12168 <__assert_fail@plt+0x914>
   1239c:	b	122cc <__assert_fail@plt+0xa78>
   123a0:	ldr	r2, [pc, #2296]	; 12ca0 <__assert_fail@plt+0x144c>
   123a4:	cmp	r3, r2
   123a8:	beq	129ec <__assert_fail@plt+0x1198>
   123ac:	ble	12558 <__assert_fail@plt+0xd04>
   123b0:	ldr	r2, [pc, #2284]	; 12ca4 <__assert_fail@plt+0x1450>
   123b4:	cmp	r3, r2
   123b8:	beq	12bd8 <__assert_fail@plt+0x1384>
   123bc:	ble	128a0 <__assert_fail@plt+0x104c>
   123c0:	ldr	r2, [pc, #2272]	; 12ca8 <__assert_fail@plt+0x1454>
   123c4:	cmp	r3, r2
   123c8:	beq	129e4 <__assert_fail@plt+0x1190>
   123cc:	ble	129d0 <__assert_fail@plt+0x117c>
   123d0:	ldr	r2, [pc, #2260]	; 12cac <__assert_fail@plt+0x1458>
   123d4:	cmp	r3, r2
   123d8:	ldreq	r2, [pc, #2256]	; 12cb0 <__assert_fail@plt+0x145c>
   123dc:	beq	12168 <__assert_fail@plt+0x914>
   123e0:	ldr	r2, [pc, #2252]	; 12cb4 <__assert_fail@plt+0x1460>
   123e4:	cmp	r3, r2
   123e8:	ldreq	r2, [pc, #2248]	; 12cb8 <__assert_fail@plt+0x1464>
   123ec:	beq	12168 <__assert_fail@plt+0x914>
   123f0:	b	122cc <__assert_fail@plt+0xa78>
   123f4:	ldr	r2, [pc, #2240]	; 12cbc <__assert_fail@plt+0x1468>
   123f8:	cmp	r3, r2
   123fc:	beq	12aa0 <__assert_fail@plt+0x124c>
   12400:	ble	125dc <__assert_fail@plt+0xd88>
   12404:	ldr	r2, [pc, #2228]	; 12cc0 <__assert_fail@plt+0x146c>
   12408:	cmp	r3, r2
   1240c:	beq	12bc8 <__assert_fail@plt+0x1374>
   12410:	ble	12938 <__assert_fail@plt+0x10e4>
   12414:	ldr	r2, [pc, #2216]	; 12cc4 <__assert_fail@plt+0x1470>
   12418:	cmp	r3, r2
   1241c:	beq	12bc0 <__assert_fail@plt+0x136c>
   12420:	ble	12bac <__assert_fail@plt+0x1358>
   12424:	cmp	r3, #16384	; 0x4000
   12428:	ldreq	r2, [pc, #2200]	; 12cc8 <__assert_fail@plt+0x1474>
   1242c:	beq	12168 <__assert_fail@plt+0x914>
   12430:	ldr	r2, [pc, #2196]	; 12ccc <__assert_fail@plt+0x1478>
   12434:	cmp	r3, r2
   12438:	ldreq	r2, [pc, #2184]	; 12cc8 <__assert_fail@plt+0x1474>
   1243c:	beq	12168 <__assert_fail@plt+0x914>
   12440:	b	122cc <__assert_fail@plt+0xa78>
   12444:	ldr	r2, [pc, #2180]	; 12cd0 <__assert_fail@plt+0x147c>
   12448:	cmp	r3, r2
   1244c:	beq	12b20 <__assert_fail@plt+0x12cc>
   12450:	ble	12518 <__assert_fail@plt+0xcc4>
   12454:	ldr	r2, [pc, #2168]	; 12cd4 <__assert_fail@plt+0x1480>
   12458:	cmp	r3, r2
   1245c:	beq	12b9c <__assert_fail@plt+0x1348>
   12460:	ble	12908 <__assert_fail@plt+0x10b4>
   12464:	ldr	r2, [pc, #2156]	; 12cd8 <__assert_fail@plt+0x1484>
   12468:	cmp	r3, r2
   1246c:	beq	12b54 <__assert_fail@plt+0x1300>
   12470:	ble	12b40 <__assert_fail@plt+0x12ec>
   12474:	ldr	r2, [pc, #2144]	; 12cdc <__assert_fail@plt+0x1488>
   12478:	cmp	r3, r2
   1247c:	ldreq	r2, [pc, #2140]	; 12ce0 <__assert_fail@plt+0x148c>
   12480:	beq	12168 <__assert_fail@plt+0x914>
   12484:	add	r2, r2, #1
   12488:	cmp	r3, r2
   1248c:	ldreq	r2, [pc, #2128]	; 12ce4 <__assert_fail@plt+0x1490>
   12490:	beq	12168 <__assert_fail@plt+0x914>
   12494:	b	122cc <__assert_fail@plt+0xa78>
   12498:	ldr	r2, [pc, #2120]	; 12ce8 <__assert_fail@plt+0x1494>
   1249c:	cmp	r3, r2
   124a0:	beq	12b00 <__assert_fail@plt+0x12ac>
   124a4:	bgt	12694 <__assert_fail@plt+0xe40>
   124a8:	ldr	r2, [pc, #2108]	; 12cec <__assert_fail@plt+0x1498>
   124ac:	cmp	r3, r2
   124b0:	beq	129a4 <__assert_fail@plt+0x1150>
   124b4:	ldr	r2, [pc, #2100]	; 12cf0 <__assert_fail@plt+0x149c>
   124b8:	cmp	r3, r2
   124bc:	ldreq	r2, [pc, #2096]	; 12cf4 <__assert_fail@plt+0x14a0>
   124c0:	beq	12168 <__assert_fail@plt+0x914>
   124c4:	ldr	r2, [pc, #2092]	; 12cf8 <__assert_fail@plt+0x14a4>
   124c8:	cmp	r3, r2
   124cc:	bne	122cc <__assert_fail@plt+0xa78>
   124d0:	ldr	r2, [pc, #2084]	; 12cfc <__assert_fail@plt+0x14a8>
   124d4:	b	12168 <__assert_fail@plt+0x914>
   124d8:	ldr	r2, [pc, #2080]	; 12d00 <__assert_fail@plt+0x14ac>
   124dc:	cmp	r3, r2
   124e0:	beq	12b30 <__assert_fail@plt+0x12dc>
   124e4:	bgt	12754 <__assert_fail@plt+0xf00>
   124e8:	ldr	r2, [pc, #2068]	; 12d04 <__assert_fail@plt+0x14b0>
   124ec:	cmp	r3, r2
   124f0:	beq	12b28 <__assert_fail@plt+0x12d4>
   124f4:	ldr	r2, [pc, #2060]	; 12d08 <__assert_fail@plt+0x14b4>
   124f8:	cmp	r3, r2
   124fc:	ldreq	r2, [pc, #2056]	; 12d0c <__assert_fail@plt+0x14b8>
   12500:	beq	12168 <__assert_fail@plt+0x914>
   12504:	ldr	r2, [pc, #2052]	; 12d10 <__assert_fail@plt+0x14bc>
   12508:	cmp	r3, r2
   1250c:	bne	122cc <__assert_fail@plt+0xa78>
   12510:	ldr	r2, [pc, #2044]	; 12d14 <__assert_fail@plt+0x14c0>
   12514:	b	12168 <__assert_fail@plt+0x914>
   12518:	ldr	r2, [pc, #2040]	; 12d18 <__assert_fail@plt+0x14c4>
   1251c:	cmp	r3, r2
   12520:	beq	129fc <__assert_fail@plt+0x11a8>
   12524:	bgt	126c4 <__assert_fail@plt+0xe70>
   12528:	ldr	r2, [pc, #2028]	; 12d1c <__assert_fail@plt+0x14c8>
   1252c:	cmp	r3, r2
   12530:	beq	129f4 <__assert_fail@plt+0x11a0>
   12534:	add	r2, r2, #2
   12538:	cmp	r3, r2
   1253c:	ldreq	r2, [pc, #2012]	; 12d20 <__assert_fail@plt+0x14cc>
   12540:	beq	12168 <__assert_fail@plt+0x914>
   12544:	ldr	r2, [pc, #2008]	; 12d24 <__assert_fail@plt+0x14d0>
   12548:	cmp	r3, r2
   1254c:	bne	122cc <__assert_fail@plt+0xa78>
   12550:	ldr	r2, [pc, #2000]	; 12d28 <__assert_fail@plt+0x14d4>
   12554:	b	12168 <__assert_fail@plt+0x914>
   12558:	ldr	r2, [pc, #1996]	; 12d2c <__assert_fail@plt+0x14d8>
   1255c:	cmp	r3, r2
   12560:	beq	12a90 <__assert_fail@plt+0x123c>
   12564:	bgt	12724 <__assert_fail@plt+0xed0>
   12568:	ldr	r2, [pc, #1984]	; 12d30 <__assert_fail@plt+0x14dc>
   1256c:	cmp	r3, r2
   12570:	beq	12a88 <__assert_fail@plt+0x1234>
   12574:	add	r2, r2, #194560	; 0x2f800
   12578:	add	r2, r2, #796	; 0x31c
   1257c:	cmp	r3, r2
   12580:	ldreq	r2, [pc, #1964]	; 12d34 <__assert_fail@plt+0x14e0>
   12584:	beq	12168 <__assert_fail@plt+0x914>
   12588:	ldr	r2, [pc, #1960]	; 12d38 <__assert_fail@plt+0x14e4>
   1258c:	cmp	r3, r2
   12590:	bne	122cc <__assert_fail@plt+0xa78>
   12594:	ldr	r2, [pc, #1952]	; 12d3c <__assert_fail@plt+0x14e8>
   12598:	b	12168 <__assert_fail@plt+0x914>
   1259c:	ldr	r2, [pc, #1948]	; 12d40 <__assert_fail@plt+0x14ec>
   125a0:	cmp	r3, r2
   125a4:	beq	12ab0 <__assert_fail@plt+0x125c>
   125a8:	bgt	127e4 <__assert_fail@plt+0xf90>
   125ac:	ldr	r2, [pc, #1936]	; 12d44 <__assert_fail@plt+0x14f0>
   125b0:	cmp	r3, r2
   125b4:	beq	12aa8 <__assert_fail@plt+0x1254>
   125b8:	ldr	r2, [pc, #1928]	; 12d48 <__assert_fail@plt+0x14f4>
   125bc:	cmp	r3, r2
   125c0:	ldreq	r2, [pc, #1924]	; 12d4c <__assert_fail@plt+0x14f8>
   125c4:	beq	12168 <__assert_fail@plt+0x914>
   125c8:	ldr	r2, [pc, #1920]	; 12d50 <__assert_fail@plt+0x14fc>
   125cc:	cmp	r3, r2
   125d0:	bne	122cc <__assert_fail@plt+0xa78>
   125d4:	ldr	r2, [pc, #1912]	; 12d54 <__assert_fail@plt+0x1500>
   125d8:	b	12168 <__assert_fail@plt+0x914>
   125dc:	cmp	r3, #51	; 0x33
   125e0:	beq	12a24 <__assert_fail@plt+0x11d0>
   125e4:	bgt	12814 <__assert_fail@plt+0xfc0>
   125e8:	ldr	r2, [pc, #1896]	; 12d58 <__assert_fail@plt+0x1504>
   125ec:	cmp	r3, r2
   125f0:	beq	12a1c <__assert_fail@plt+0x11c8>
   125f4:	cmp	r3, #47	; 0x2f
   125f8:	ldreq	r2, [pc, #1884]	; 12d5c <__assert_fail@plt+0x1508>
   125fc:	beq	12168 <__assert_fail@plt+0x914>
   12600:	add	r2, r2, #-16777216	; 0xff000000
   12604:	cmp	r3, r2
   12608:	bne	122cc <__assert_fail@plt+0xa78>
   1260c:	ldr	r2, [pc, #1868]	; 12d60 <__assert_fail@plt+0x150c>
   12610:	b	12168 <__assert_fail@plt+0x914>
   12614:	ldr	r2, [pc, #1864]	; 12d64 <__assert_fail@plt+0x1510>
   12618:	cmp	r3, r2
   1261c:	beq	12ad0 <__assert_fail@plt+0x127c>
   12620:	bgt	12870 <__assert_fail@plt+0x101c>
   12624:	ldr	r2, [pc, #1852]	; 12d68 <__assert_fail@plt+0x1514>
   12628:	cmp	r3, r2
   1262c:	beq	12ac8 <__assert_fail@plt+0x1274>
   12630:	ldr	r2, [pc, #1844]	; 12d6c <__assert_fail@plt+0x1518>
   12634:	cmp	r3, r2
   12638:	ldreq	r2, [pc, #1840]	; 12d70 <__assert_fail@plt+0x151c>
   1263c:	beq	12168 <__assert_fail@plt+0x914>
   12640:	ldr	r2, [pc, #1836]	; 12d74 <__assert_fail@plt+0x1520>
   12644:	cmp	r3, r2
   12648:	bne	122cc <__assert_fail@plt+0xa78>
   1264c:	ldr	r2, [pc, #1828]	; 12d78 <__assert_fail@plt+0x1524>
   12650:	b	12168 <__assert_fail@plt+0x914>
   12654:	ldr	r2, [pc, #1824]	; 12d7c <__assert_fail@plt+0x1528>
   12658:	cmp	r3, r2
   1265c:	beq	12b10 <__assert_fail@plt+0x12bc>
   12660:	bgt	12840 <__assert_fail@plt+0xfec>
   12664:	ldr	r2, [pc, #1812]	; 12d80 <__assert_fail@plt+0x152c>
   12668:	cmp	r3, r2
   1266c:	beq	12b08 <__assert_fail@plt+0x12b4>
   12670:	add	r2, r2, #65	; 0x41
   12674:	cmp	r3, r2
   12678:	ldreq	r2, [pc, #1796]	; 12d84 <__assert_fail@plt+0x1530>
   1267c:	beq	12168 <__assert_fail@plt+0x914>
   12680:	ldr	r2, [pc, #1792]	; 12d88 <__assert_fail@plt+0x1534>
   12684:	cmp	r3, r2
   12688:	bne	122cc <__assert_fail@plt+0xa78>
   1268c:	ldr	r2, [pc, #1784]	; 12d8c <__assert_fail@plt+0x1538>
   12690:	b	12168 <__assert_fail@plt+0x914>
   12694:	ldr	r2, [pc, #1780]	; 12d90 <__assert_fail@plt+0x153c>
   12698:	cmp	r3, r2
   1269c:	beq	12a04 <__assert_fail@plt+0x11b0>
   126a0:	ldr	r2, [pc, #1772]	; 12d94 <__assert_fail@plt+0x1540>
   126a4:	cmp	r3, r2
   126a8:	ldreq	r2, [pc, #1768]	; 12d98 <__assert_fail@plt+0x1544>
   126ac:	beq	12168 <__assert_fail@plt+0x914>
   126b0:	ldr	r2, [pc, #1764]	; 12d9c <__assert_fail@plt+0x1548>
   126b4:	cmp	r3, r2
   126b8:	bne	122cc <__assert_fail@plt+0xa78>
   126bc:	ldr	r2, [pc, #1756]	; 12da0 <__assert_fail@plt+0x154c>
   126c0:	b	12168 <__assert_fail@plt+0x914>
   126c4:	ldr	r2, [pc, #1752]	; 12da4 <__assert_fail@plt+0x1550>
   126c8:	cmp	r3, r2
   126cc:	beq	12b84 <__assert_fail@plt+0x1330>
   126d0:	ldr	r2, [pc, #1744]	; 12da8 <__assert_fail@plt+0x1554>
   126d4:	cmp	r3, r2
   126d8:	ldreq	r2, [pc, #1740]	; 12dac <__assert_fail@plt+0x1558>
   126dc:	beq	12168 <__assert_fail@plt+0x914>
   126e0:	ldr	r2, [pc, #1736]	; 12db0 <__assert_fail@plt+0x155c>
   126e4:	cmp	r3, r2
   126e8:	bne	122cc <__assert_fail@plt+0xa78>
   126ec:	ldr	r2, [pc, #1544]	; 12cfc <__assert_fail@plt+0x14a8>
   126f0:	b	12168 <__assert_fail@plt+0x914>
   126f4:	ldr	r2, [pc, #1720]	; 12db4 <__assert_fail@plt+0x1560>
   126f8:	cmp	r3, r2
   126fc:	beq	12a98 <__assert_fail@plt+0x1244>
   12700:	ldr	r2, [pc, #1712]	; 12db8 <__assert_fail@plt+0x1564>
   12704:	cmp	r3, r2
   12708:	ldreq	r2, [pc, #1708]	; 12dbc <__assert_fail@plt+0x1568>
   1270c:	beq	12168 <__assert_fail@plt+0x914>
   12710:	ldr	r2, [pc, #1704]	; 12dc0 <__assert_fail@plt+0x156c>
   12714:	cmp	r3, r2
   12718:	bne	122cc <__assert_fail@plt+0xa78>
   1271c:	ldr	r2, [pc, #1696]	; 12dc4 <__assert_fail@plt+0x1570>
   12720:	b	12168 <__assert_fail@plt+0x914>
   12724:	ldr	r2, [pc, #1692]	; 12dc8 <__assert_fail@plt+0x1574>
   12728:	cmp	r3, r2
   1272c:	beq	12b38 <__assert_fail@plt+0x12e4>
   12730:	ldr	r2, [pc, #1684]	; 12dcc <__assert_fail@plt+0x1578>
   12734:	cmp	r3, r2
   12738:	ldreq	r2, [pc, #1680]	; 12dd0 <__assert_fail@plt+0x157c>
   1273c:	beq	12168 <__assert_fail@plt+0x914>
   12740:	ldr	r2, [pc, #1676]	; 12dd4 <__assert_fail@plt+0x1580>
   12744:	cmp	r3, r2
   12748:	bne	122cc <__assert_fail@plt+0xa78>
   1274c:	ldr	r2, [pc, #1668]	; 12dd8 <__assert_fail@plt+0x1584>
   12750:	b	12168 <__assert_fail@plt+0x914>
   12754:	ldr	r2, [pc, #1664]	; 12ddc <__assert_fail@plt+0x1588>
   12758:	cmp	r3, r2
   1275c:	beq	12a3c <__assert_fail@plt+0x11e8>
   12760:	ldr	r2, [pc, #1656]	; 12de0 <__assert_fail@plt+0x158c>
   12764:	cmp	r3, r2
   12768:	ldreq	r2, [pc, #1652]	; 12de4 <__assert_fail@plt+0x1590>
   1276c:	beq	12168 <__assert_fail@plt+0x914>
   12770:	ldr	r2, [pc, #1648]	; 12de8 <__assert_fail@plt+0x1594>
   12774:	cmp	r3, r2
   12778:	bne	122cc <__assert_fail@plt+0xa78>
   1277c:	ldr	r2, [pc, #1640]	; 12dec <__assert_fail@plt+0x1598>
   12780:	b	12168 <__assert_fail@plt+0x914>
   12784:	ldr	r2, [pc, #1636]	; 12df0 <__assert_fail@plt+0x159c>
   12788:	cmp	r3, r2
   1278c:	beq	12b94 <__assert_fail@plt+0x1340>
   12790:	ldr	r2, [pc, #1628]	; 12df4 <__assert_fail@plt+0x15a0>
   12794:	cmp	r3, r2
   12798:	ldreq	r2, [pc, #1624]	; 12df8 <__assert_fail@plt+0x15a4>
   1279c:	beq	12168 <__assert_fail@plt+0x914>
   127a0:	ldr	r2, [pc, #1620]	; 12dfc <__assert_fail@plt+0x15a8>
   127a4:	cmp	r3, r2
   127a8:	bne	122cc <__assert_fail@plt+0xa78>
   127ac:	ldr	r2, [pc, #1612]	; 12e00 <__assert_fail@plt+0x15ac>
   127b0:	b	12168 <__assert_fail@plt+0x914>
   127b4:	ldr	r2, [pc, #1608]	; 12e04 <__assert_fail@plt+0x15b0>
   127b8:	cmp	r3, r2
   127bc:	beq	12ab8 <__assert_fail@plt+0x1264>
   127c0:	ldr	r2, [pc, #1600]	; 12e08 <__assert_fail@plt+0x15b4>
   127c4:	cmp	r3, r2
   127c8:	ldreq	r2, [pc, #1596]	; 12e0c <__assert_fail@plt+0x15b8>
   127cc:	beq	12168 <__assert_fail@plt+0x914>
   127d0:	ldr	r2, [pc, #1592]	; 12e10 <__assert_fail@plt+0x15bc>
   127d4:	cmp	r3, r2
   127d8:	bne	122cc <__assert_fail@plt+0xa78>
   127dc:	ldr	r2, [pc, #1584]	; 12e14 <__assert_fail@plt+0x15c0>
   127e0:	b	12168 <__assert_fail@plt+0x914>
   127e4:	ldr	r2, [pc, #1580]	; 12e18 <__assert_fail@plt+0x15c4>
   127e8:	cmp	r3, r2
   127ec:	beq	12a2c <__assert_fail@plt+0x11d8>
   127f0:	ldr	r2, [pc, #1572]	; 12e1c <__assert_fail@plt+0x15c8>
   127f4:	cmp	r3, r2
   127f8:	ldreq	r2, [pc, #1568]	; 12e20 <__assert_fail@plt+0x15cc>
   127fc:	beq	12168 <__assert_fail@plt+0x914>
   12800:	ldr	r2, [pc, #1564]	; 12e24 <__assert_fail@plt+0x15d0>
   12804:	cmp	r3, r2
   12808:	bne	122cc <__assert_fail@plt+0xa78>
   1280c:	ldr	r2, [pc, #1556]	; 12e28 <__assert_fail@plt+0x15d4>
   12810:	b	12168 <__assert_fail@plt+0x914>
   12814:	cmp	r3, #1984	; 0x7c0
   12818:	beq	12b18 <__assert_fail@plt+0x12c4>
   1281c:	ldr	r2, [pc, #1544]	; 12e2c <__assert_fail@plt+0x15d8>
   12820:	cmp	r3, r2
   12824:	ldreq	r2, [pc, #1540]	; 12e30 <__assert_fail@plt+0x15dc>
   12828:	beq	12168 <__assert_fail@plt+0x914>
   1282c:	ldr	r2, [pc, #1536]	; 12e34 <__assert_fail@plt+0x15e0>
   12830:	cmp	r3, r2
   12834:	bne	122cc <__assert_fail@plt+0xa78>
   12838:	ldr	r2, [pc, #1528]	; 12e38 <__assert_fail@plt+0x15e4>
   1283c:	b	12168 <__assert_fail@plt+0x914>
   12840:	ldr	r2, [pc, #1524]	; 12e3c <__assert_fail@plt+0x15e8>
   12844:	cmp	r3, r2
   12848:	beq	12ad8 <__assert_fail@plt+0x1284>
   1284c:	add	r2, r2, #1
   12850:	cmp	r3, r2
   12854:	ldreq	r2, [pc, #1508]	; 12e40 <__assert_fail@plt+0x15ec>
   12858:	beq	12168 <__assert_fail@plt+0x914>
   1285c:	sub	r2, r2, #2
   12860:	cmp	r3, r2
   12864:	bne	122cc <__assert_fail@plt+0xa78>
   12868:	ldr	r2, [pc, #1492]	; 12e44 <__assert_fail@plt+0x15f0>
   1286c:	b	12168 <__assert_fail@plt+0x914>
   12870:	ldr	r2, [pc, #1488]	; 12e48 <__assert_fail@plt+0x15f4>
   12874:	cmp	r3, r2
   12878:	beq	12be0 <__assert_fail@plt+0x138c>
   1287c:	ldr	r2, [pc, #1480]	; 12e4c <__assert_fail@plt+0x15f8>
   12880:	cmp	r3, r2
   12884:	ldreq	r2, [pc, #1476]	; 12e50 <__assert_fail@plt+0x15fc>
   12888:	beq	12168 <__assert_fail@plt+0x914>
   1288c:	ldr	r2, [pc, #1472]	; 12e54 <__assert_fail@plt+0x1600>
   12890:	cmp	r3, r2
   12894:	bne	122cc <__assert_fail@plt+0xa78>
   12898:	ldr	r2, [pc, #1464]	; 12e58 <__assert_fail@plt+0x1604>
   1289c:	b	12168 <__assert_fail@plt+0x914>
   128a0:	ldr	r2, [pc, #1460]	; 12e5c <__assert_fail@plt+0x1608>
   128a4:	cmp	r3, r2
   128a8:	beq	12b64 <__assert_fail@plt+0x1310>
   128ac:	ldr	r2, [pc, #1452]	; 12e60 <__assert_fail@plt+0x160c>
   128b0:	cmp	r3, r2
   128b4:	ldreq	r2, [pc, #1448]	; 12e64 <__assert_fail@plt+0x1610>
   128b8:	beq	12168 <__assert_fail@plt+0x914>
   128bc:	ldr	r2, [pc, #1444]	; 12e68 <__assert_fail@plt+0x1614>
   128c0:	cmp	r3, r2
   128c4:	bne	122cc <__assert_fail@plt+0xa78>
   128c8:	ldr	r2, [pc, #1436]	; 12e6c <__assert_fail@plt+0x1618>
   128cc:	b	12168 <__assert_fail@plt+0x914>
   128d0:	ldr	r2, [pc, #1432]	; 12e70 <__assert_fail@plt+0x161c>
   128d4:	cmp	r3, r2
   128d8:	beq	12ba4 <__assert_fail@plt+0x1350>
   128dc:	add	r2, r2, #15597568	; 0xee0000
   128e0:	add	r2, r2, #65280	; 0xff00
   128e4:	add	r2, r2, #3
   128e8:	cmp	r3, r2
   128ec:	ldreq	r2, [pc, #1408]	; 12e74 <__assert_fail@plt+0x1620>
   128f0:	beq	12168 <__assert_fail@plt+0x914>
   128f4:	ldr	r2, [pc, #1404]	; 12e78 <__assert_fail@plt+0x1624>
   128f8:	cmp	r3, r2
   128fc:	bne	122cc <__assert_fail@plt+0xa78>
   12900:	ldr	r2, [pc, #1396]	; 12e7c <__assert_fail@plt+0x1628>
   12904:	b	12168 <__assert_fail@plt+0x914>
   12908:	ldr	r2, [pc, #1392]	; 12e80 <__assert_fail@plt+0x162c>
   1290c:	cmp	r3, r2
   12910:	beq	12bd0 <__assert_fail@plt+0x137c>
   12914:	add	r2, r2, #3
   12918:	cmp	r3, r2
   1291c:	ldreq	r2, [pc, #1376]	; 12e84 <__assert_fail@plt+0x1630>
   12920:	beq	12168 <__assert_fail@plt+0x914>
   12924:	ldr	r2, [pc, #1372]	; 12e88 <__assert_fail@plt+0x1634>
   12928:	cmp	r3, r2
   1292c:	bne	122cc <__assert_fail@plt+0xa78>
   12930:	ldr	r2, [pc, #1364]	; 12e8c <__assert_fail@plt+0x1638>
   12934:	b	12168 <__assert_fail@plt+0x914>
   12938:	ldr	r2, [pc, #1360]	; 12e90 <__assert_fail@plt+0x163c>
   1293c:	cmp	r3, r2
   12940:	beq	12bf0 <__assert_fail@plt+0x139c>
   12944:	ldr	r2, [pc, #1352]	; 12e94 <__assert_fail@plt+0x1640>
   12948:	cmp	r3, r2
   1294c:	ldreq	r2, [pc, #1348]	; 12e98 <__assert_fail@plt+0x1644>
   12950:	beq	12168 <__assert_fail@plt+0x914>
   12954:	ldr	r2, [pc, #1344]	; 12e9c <__assert_fail@plt+0x1648>
   12958:	cmp	r3, r2
   1295c:	bne	122cc <__assert_fail@plt+0xa78>
   12960:	ldr	r2, [pc, #1336]	; 12ea0 <__assert_fail@plt+0x164c>
   12964:	b	12168 <__assert_fail@plt+0x914>
   12968:	ldr	r2, [pc, #1332]	; 12ea4 <__assert_fail@plt+0x1650>
   1296c:	cmp	r3, r2
   12970:	beq	129ac <__assert_fail@plt+0x1158>
   12974:	add	r2, r2, #195584	; 0x2fc00
   12978:	add	r2, r2, #972	; 0x3cc
   1297c:	cmp	r3, r2
   12980:	ldreq	r2, [pc, #1312]	; 12ea8 <__assert_fail@plt+0x1654>
   12984:	beq	12168 <__assert_fail@plt+0x914>
   12988:	ldr	r2, [pc, #1308]	; 12eac <__assert_fail@plt+0x1658>
   1298c:	cmp	r3, r2
   12990:	bne	122cc <__assert_fail@plt+0xa78>
   12994:	ldr	r2, [pc, #1300]	; 12eb0 <__assert_fail@plt+0x165c>
   12998:	b	12168 <__assert_fail@plt+0x914>
   1299c:	ldr	r2, [pc, #1296]	; 12eb4 <__assert_fail@plt+0x1660>
   129a0:	b	12168 <__assert_fail@plt+0x914>
   129a4:	ldr	r2, [pc, #1292]	; 12eb8 <__assert_fail@plt+0x1664>
   129a8:	b	12168 <__assert_fail@plt+0x914>
   129ac:	ldr	r2, [pc, #1288]	; 12ebc <__assert_fail@plt+0x1668>
   129b0:	b	12168 <__assert_fail@plt+0x914>
   129b4:	ldr	r2, [pc, #1284]	; 12ec0 <__assert_fail@plt+0x166c>
   129b8:	cmp	r3, r2
   129bc:	ldreq	r2, [pc, #1280]	; 12ec4 <__assert_fail@plt+0x1670>
   129c0:	beq	12168 <__assert_fail@plt+0x914>
   129c4:	b	122cc <__assert_fail@plt+0xa78>
   129c8:	ldr	r2, [pc, #1272]	; 12ec8 <__assert_fail@plt+0x1674>
   129cc:	b	12168 <__assert_fail@plt+0x914>
   129d0:	ldr	r2, [pc, #1268]	; 12ecc <__assert_fail@plt+0x1678>
   129d4:	cmp	r3, r2
   129d8:	ldreq	r2, [pc, #1264]	; 12ed0 <__assert_fail@plt+0x167c>
   129dc:	beq	12168 <__assert_fail@plt+0x914>
   129e0:	b	122cc <__assert_fail@plt+0xa78>
   129e4:	ldr	r2, [pc, #1256]	; 12ed4 <__assert_fail@plt+0x1680>
   129e8:	b	12168 <__assert_fail@plt+0x914>
   129ec:	ldr	r2, [pc, #1252]	; 12ed8 <__assert_fail@plt+0x1684>
   129f0:	b	12168 <__assert_fail@plt+0x914>
   129f4:	ldr	r2, [pc, #1248]	; 12edc <__assert_fail@plt+0x1688>
   129f8:	b	12168 <__assert_fail@plt+0x914>
   129fc:	ldr	r2, [pc, #1244]	; 12ee0 <__assert_fail@plt+0x168c>
   12a00:	b	12168 <__assert_fail@plt+0x914>
   12a04:	ldr	r2, [pc, #1240]	; 12ee4 <__assert_fail@plt+0x1690>
   12a08:	b	12168 <__assert_fail@plt+0x914>
   12a0c:	ldr	r2, [pc, #1236]	; 12ee8 <__assert_fail@plt+0x1694>
   12a10:	b	12168 <__assert_fail@plt+0x914>
   12a14:	ldr	r2, [pc, #1232]	; 12eec <__assert_fail@plt+0x1698>
   12a18:	b	12168 <__assert_fail@plt+0x914>
   12a1c:	ldr	r2, [pc, #1228]	; 12ef0 <__assert_fail@plt+0x169c>
   12a20:	b	12168 <__assert_fail@plt+0x914>
   12a24:	ldr	r2, [pc, #1224]	; 12ef4 <__assert_fail@plt+0x16a0>
   12a28:	b	12168 <__assert_fail@plt+0x914>
   12a2c:	ldr	r2, [pc, #1220]	; 12ef8 <__assert_fail@plt+0x16a4>
   12a30:	b	12168 <__assert_fail@plt+0x914>
   12a34:	ldr	r2, [pc, #1216]	; 12efc <__assert_fail@plt+0x16a8>
   12a38:	b	12168 <__assert_fail@plt+0x914>
   12a3c:	ldr	r2, [pc, #1212]	; 12f00 <__assert_fail@plt+0x16ac>
   12a40:	b	12168 <__assert_fail@plt+0x914>
   12a44:	ldr	r2, [pc, #1208]	; 12f04 <__assert_fail@plt+0x16b0>
   12a48:	b	12168 <__assert_fail@plt+0x914>
   12a4c:	ldr	r2, [pc, #1204]	; 12f08 <__assert_fail@plt+0x16b4>
   12a50:	b	12168 <__assert_fail@plt+0x914>
   12a54:	ldr	r2, [pc, #1200]	; 12f0c <__assert_fail@plt+0x16b8>
   12a58:	b	12168 <__assert_fail@plt+0x914>
   12a5c:	ldr	r2, [pc, #1196]	; 12f10 <__assert_fail@plt+0x16bc>
   12a60:	b	12168 <__assert_fail@plt+0x914>
   12a64:	ldr	r2, [pc, #1192]	; 12f14 <__assert_fail@plt+0x16c0>
   12a68:	cmp	r3, r2
   12a6c:	ldreq	r2, [pc, #1188]	; 12f18 <__assert_fail@plt+0x16c4>
   12a70:	beq	12168 <__assert_fail@plt+0x914>
   12a74:	b	122cc <__assert_fail@plt+0xa78>
   12a78:	ldr	r2, [pc, #1180]	; 12f1c <__assert_fail@plt+0x16c8>
   12a7c:	b	12168 <__assert_fail@plt+0x914>
   12a80:	ldr	r2, [pc, #1176]	; 12f20 <__assert_fail@plt+0x16cc>
   12a84:	b	12168 <__assert_fail@plt+0x914>
   12a88:	ldr	r2, [pc, #1172]	; 12f24 <__assert_fail@plt+0x16d0>
   12a8c:	b	12168 <__assert_fail@plt+0x914>
   12a90:	ldr	r2, [pc, #1168]	; 12f28 <__assert_fail@plt+0x16d4>
   12a94:	b	12168 <__assert_fail@plt+0x914>
   12a98:	ldr	r2, [pc, #1164]	; 12f2c <__assert_fail@plt+0x16d8>
   12a9c:	b	12168 <__assert_fail@plt+0x914>
   12aa0:	ldr	r2, [pc, #1160]	; 12f30 <__assert_fail@plt+0x16dc>
   12aa4:	b	12168 <__assert_fail@plt+0x914>
   12aa8:	ldr	r2, [pc, #1156]	; 12f34 <__assert_fail@plt+0x16e0>
   12aac:	b	12168 <__assert_fail@plt+0x914>
   12ab0:	ldr	r2, [pc, #1152]	; 12f38 <__assert_fail@plt+0x16e4>
   12ab4:	b	12168 <__assert_fail@plt+0x914>
   12ab8:	ldr	r2, [pc, #1148]	; 12f3c <__assert_fail@plt+0x16e8>
   12abc:	b	12168 <__assert_fail@plt+0x914>
   12ac0:	ldr	r2, [pc, #1144]	; 12f40 <__assert_fail@plt+0x16ec>
   12ac4:	b	12168 <__assert_fail@plt+0x914>
   12ac8:	ldr	r2, [pc, #1140]	; 12f44 <__assert_fail@plt+0x16f0>
   12acc:	b	12168 <__assert_fail@plt+0x914>
   12ad0:	ldr	r2, [pc, #1136]	; 12f48 <__assert_fail@plt+0x16f4>
   12ad4:	b	12168 <__assert_fail@plt+0x914>
   12ad8:	ldr	r2, [pc, #1132]	; 12f4c <__assert_fail@plt+0x16f8>
   12adc:	b	12168 <__assert_fail@plt+0x914>
   12ae0:	ldr	r2, [pc, #1128]	; 12f50 <__assert_fail@plt+0x16fc>
   12ae4:	b	12168 <__assert_fail@plt+0x914>
   12ae8:	ldr	r2, [pc, #1124]	; 12f54 <__assert_fail@plt+0x1700>
   12aec:	b	12168 <__assert_fail@plt+0x914>
   12af0:	ldr	r2, [pc, #1120]	; 12f58 <__assert_fail@plt+0x1704>
   12af4:	b	12168 <__assert_fail@plt+0x914>
   12af8:	ldr	r2, [pc, #1116]	; 12f5c <__assert_fail@plt+0x1708>
   12afc:	b	12168 <__assert_fail@plt+0x914>
   12b00:	ldr	r2, [pc, #1112]	; 12f60 <__assert_fail@plt+0x170c>
   12b04:	b	12168 <__assert_fail@plt+0x914>
   12b08:	ldr	r2, [pc, #1108]	; 12f64 <__assert_fail@plt+0x1710>
   12b0c:	b	12168 <__assert_fail@plt+0x914>
   12b10:	ldr	r2, [pc, #432]	; 12cc8 <__assert_fail@plt+0x1474>
   12b14:	b	12168 <__assert_fail@plt+0x914>
   12b18:	ldr	r2, [pc, #1096]	; 12f68 <__assert_fail@plt+0x1714>
   12b1c:	b	12168 <__assert_fail@plt+0x914>
   12b20:	ldr	r2, [pc, #1092]	; 12f6c <__assert_fail@plt+0x1718>
   12b24:	b	12168 <__assert_fail@plt+0x914>
   12b28:	ldr	r2, [pc, #1088]	; 12f70 <__assert_fail@plt+0x171c>
   12b2c:	b	12168 <__assert_fail@plt+0x914>
   12b30:	ldr	r2, [pc, #1084]	; 12f74 <__assert_fail@plt+0x1720>
   12b34:	b	12168 <__assert_fail@plt+0x914>
   12b38:	ldr	r2, [pc, #1080]	; 12f78 <__assert_fail@plt+0x1724>
   12b3c:	b	12168 <__assert_fail@plt+0x914>
   12b40:	ldr	r2, [pc, #1076]	; 12f7c <__assert_fail@plt+0x1728>
   12b44:	cmp	r3, r2
   12b48:	ldreq	r2, [pc, #1072]	; 12f80 <__assert_fail@plt+0x172c>
   12b4c:	beq	12168 <__assert_fail@plt+0x914>
   12b50:	b	122cc <__assert_fail@plt+0xa78>
   12b54:	ldr	r2, [pc, #1064]	; 12f84 <__assert_fail@plt+0x1730>
   12b58:	b	12168 <__assert_fail@plt+0x914>
   12b5c:	ldr	r2, [pc, #1060]	; 12f88 <__assert_fail@plt+0x1734>
   12b60:	b	12168 <__assert_fail@plt+0x914>
   12b64:	ldr	r2, [pc, #1056]	; 12f8c <__assert_fail@plt+0x1738>
   12b68:	b	12168 <__assert_fail@plt+0x914>
   12b6c:	ldr	r2, [pc, #1052]	; 12f90 <__assert_fail@plt+0x173c>
   12b70:	b	12168 <__assert_fail@plt+0x914>
   12b74:	ldr	r2, [pc, #1048]	; 12f94 <__assert_fail@plt+0x1740>
   12b78:	b	12168 <__assert_fail@plt+0x914>
   12b7c:	ldr	r2, [pc, #1044]	; 12f98 <__assert_fail@plt+0x1744>
   12b80:	b	12168 <__assert_fail@plt+0x914>
   12b84:	ldr	r2, [pc, #1040]	; 12f9c <__assert_fail@plt+0x1748>
   12b88:	b	12168 <__assert_fail@plt+0x914>
   12b8c:	ldr	r2, [pc, #1036]	; 12fa0 <__assert_fail@plt+0x174c>
   12b90:	b	12168 <__assert_fail@plt+0x914>
   12b94:	ldr	r2, [pc, #1032]	; 12fa4 <__assert_fail@plt+0x1750>
   12b98:	b	12168 <__assert_fail@plt+0x914>
   12b9c:	ldr	r2, [pc, #1028]	; 12fa8 <__assert_fail@plt+0x1754>
   12ba0:	b	12168 <__assert_fail@plt+0x914>
   12ba4:	ldr	r2, [pc, #1024]	; 12fac <__assert_fail@plt+0x1758>
   12ba8:	b	12168 <__assert_fail@plt+0x914>
   12bac:	ldr	r2, [pc, #1020]	; 12fb0 <__assert_fail@plt+0x175c>
   12bb0:	cmp	r3, r2
   12bb4:	ldreq	r2, [pc, #1016]	; 12fb4 <__assert_fail@plt+0x1760>
   12bb8:	beq	12168 <__assert_fail@plt+0x914>
   12bbc:	b	122cc <__assert_fail@plt+0xa78>
   12bc0:	ldr	r2, [pc, #1008]	; 12fb8 <__assert_fail@plt+0x1764>
   12bc4:	b	12168 <__assert_fail@plt+0x914>
   12bc8:	ldr	r2, [pc, #1004]	; 12fbc <__assert_fail@plt+0x1768>
   12bcc:	b	12168 <__assert_fail@plt+0x914>
   12bd0:	ldr	r2, [pc, #1000]	; 12fc0 <__assert_fail@plt+0x176c>
   12bd4:	b	12168 <__assert_fail@plt+0x914>
   12bd8:	ldr	r2, [pc, #996]	; 12fc4 <__assert_fail@plt+0x1770>
   12bdc:	b	12168 <__assert_fail@plt+0x914>
   12be0:	ldr	r2, [pc, #992]	; 12fc8 <__assert_fail@plt+0x1774>
   12be4:	b	12168 <__assert_fail@plt+0x914>
   12be8:	ldr	r2, [pc, #988]	; 12fcc <__assert_fail@plt+0x1778>
   12bec:	b	12168 <__assert_fail@plt+0x914>
   12bf0:	ldr	r2, [pc, #984]	; 12fd0 <__assert_fail@plt+0x177c>
   12bf4:	b	12168 <__assert_fail@plt+0x914>
   12bf8:	msreq	SP_hyp, r7
   12bfc:	movtpl	r4, #62283	; 0xf34b
   12c00:	svccs	0x00c12fc1
   12c04:	strne	r3, [r1, #-838]	; 0xfffffcba
   12c08:	bleq	feb5a3b8 <optarg@@GLIBC_2.4+0xfeb2b1c8>
   12c0c:	strbeq	r5, [r5, -r1, lsr #16]!
   12c10:	stmdbeq	r4, {r2, r4, r5, r8, fp, ip}
   12c14:	andeq	ip, r1, r4, lsl #24
   12c18:	teqeq	r1, r8, lsr #3
   12c1c:	andeq	ip, r1, ip, asr #27
   12c20:	andeq	pc, r2, ip, ror #3
   12c24:	andeq	r4, r0, r6
   12c28:			; <UNDEFINED> instruction: 0xf995e849
   12c2c:	cdplt	14, 14, cr13, cr15, cr13, {5}
   12c30:	strge	pc, [r1, #-3317]	; 0xfffff30b
   12c34:			; <UNDEFINED> instruction: 0x9123683e
   12c38:	strls	r5, [r4, #2294]	; 0x8f6
   12c3c:			; <UNDEFINED> instruction: 0x0001cdb8
   12c40:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   12c44:	ldrbvs	r5, [r3, #-1347]!	; 0xfffffabd
   12c48:	smcvs	13923	; 0x3663
   12c4c:	rsbvs	r6, r5, #112, 10	; 0x1c000000
   12c50:	cmnvs	r7, #112, 4
   12c54:	strbtvs	r6, [r2], #-1824	; 0xfffff8e0
   12c58:	ldrdeq	ip, [r1], -r8
   12c5c:	strbtvs	r6, [r4], #-376	; 0xfffffe88
   12c60:	ldrdeq	ip, [r1], -r0
   12c64:	andeq	sp, r1, ip, lsr #32
   12c68:	strdeq	pc, [r2], -r8
   12c6c:	strdeq	sl, [r0], -r5
   12c70:	andeq	r4, r0, r4, asr #26
   12c74:	andeq	r4, r0, fp, lsr #16
   12c78:	andeq	ip, r1, r0, lsr #27
   12c7c:	andeq	r4, r0, r4, asr #4
   12c80:	muleq	r1, r4, sp
   12c84:	cmnvc	r3, #120586240	; 0x7300000
   12c88:	strbtvc	r6, [r1], #-879	; 0xfffffc91
   12c8c:	stmdavc	pc!, {r1, r2, r4, r6, r9, lr}^	; <UNPREDICTABLE>
   12c90:	stmdbvc	ip, {r4, r5, r9, sl, ip, sp, lr}^
   12c94:			; <UNDEFINED> instruction: 0x0001ceb0
   12c98:	ldclvc	6, cr6, [ip], #-460	; 0xfffffe34
   12c9c:	ldrdeq	ip, [r1], -r0
   12ca0:	ldrbmi	r4, [r8, #-1619]	; 0xfffff9ad
   12ca4:	movtpl	r4, #21325	; 0x534d
   12ca8:	movtpl	r4, #24911	; 0x614f
   12cac:	movtpl	r4, #26694	; 0x6846
   12cb0:	strdeq	ip, [r1], -r0
   12cb4:	movtpl	r5, #25678	; 0x644e
   12cb8:	muleq	r1, r4, lr
   12cbc:	andeq	r1, r0, sp, ror r3
   12cc0:	andeq	r2, r0, r8, ror #8
   12cc4:	andeq	r3, r0, r4, lsr r4
   12cc8:	andeq	ip, r1, r0, ror #27
   12ccc:	andeq	r4, r0, r4
   12cd0:	sbceq	pc, r0, lr, ror #31
   12cd4:	tsteq	r6, r0, ror r9
   12cd8:	msreq	SP_hyp, r4
   12cdc:	msreq	SP_hyp, r5
   12ce0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   12ce4:	andeq	ip, r1, ip, lsl #31
   12ce8:	stmdapl	r6, {r1, r6, r8, r9, ip, lr}^
   12cec:			; <UNDEFINED> instruction: 0x565a4653
   12cf0:	stmdapl	r9!, {r0, r3, r5, fp, ip, lr}
   12cf4:	andeq	sp, r1, r0, lsr #32
   12cf8:	ldrpl	r0, [r9], #-256	; 0xffffff00
   12cfc:			; <UNDEFINED> instruction: 0x0001cfb8
   12d00:	logle<illegal precision>z	f0, f4
   12d04:	ldmdbgt	lr!, {r3, r5, r6, r8, pc}^
   12d08:	bgt	fffa5554 <optarg@@GLIBC_2.4+0xfff76364>
   12d0c:	andeq	ip, r1, r4, asr ip
   12d10:			; <UNDEFINED> instruction: 0xc7571590
   12d14:	andeq	ip, r1, r4, asr #29
   12d18:	andeq	pc, r0, pc, asr r1	; <UNPREDICTABLE>
   12d1c:	andeq	lr, r0, r1, asr pc
   12d20:	andeq	ip, r1, r0, asr #26
   12d24:	strdeq	sl, [r0], -pc	; <UNPREDICTABLE>
   12d28:	strdeq	ip, [r1], -r8
   12d2c:	movtmi	r5, #7507	; 0x1d53
   12d30:	submi	r5, r6, #-1006632960	; 0xc4000000
   12d34:	andeq	ip, r1, ip, asr ip
   12d38:	cmpcc	r3, sl, asr #12
   12d3c:	strdeq	ip, [r1], -r8
   12d40:	blvs	1064694 <optarg@@GLIBC_2.4+0x10354a4>
   12d44:	ldrbvs	r6, [r9, -r9, ror #18]
   12d48:	ldmdavs	r9, {r1, r5, r8, ip}
   12d4c:	strdeq	ip, [r1], -r4
   12d50:	ldrbvs	r5, [r3, #-1350]!	; 0xfffffaba
   12d54:	andeq	ip, r1, r8, ror #26
   12d58:			; <UNDEFINED> instruction: 0xff534d42
   12d5c:	andeq	ip, r1, ip, ror #29
   12d60:	andeq	ip, r1, r0, ror #30
   12d64:			; <UNDEFINED> instruction: 0x2011bab0
   12d68:	stmibne	r3, {r1, r2, r5, r8, r9}
   12d6c:	blne	feb918ac <optarg@@GLIBC_2.4+0xfeb626bc>
   12d70:	andeq	ip, r1, r4, asr #24
   12d74:	stmibne	r0, {r1, r9}
   12d78:	andeq	ip, r1, r0, ror #28
   12d7c:	andeq	r9, r0, r0, ror #12
   12d80:	andeq	r7, r0, r5, ror r2
   12d84:	strdeq	ip, [r1], -r0
   12d88:	andeq	r6, r0, r9, ror #18
   12d8c:	andeq	ip, r1, r8, ror lr
   12d90:	bpl	13e46e4 <optarg@@GLIBC_2.4+0x13b54f4>
   12d94:	stclpl	13, cr2, [sl, #980]	; 0x3d4
   12d98:	andeq	ip, r1, r8, lsr #30
   12d9c:	bpl	f2d564 <optarg@@GLIBC_2.4+0xefe374>
   12da0:	andeq	ip, r1, r0, ror #23
   12da4:	eoreq	lr, r7, fp, ror #1
   12da8:	subeq	r4, r1, r3, asr sl
   12dac:	andeq	ip, r1, r8, lsr #31
   12db0:	andeq	r1, r1, r4, asr r9
   12db4:	andeq	r5, r0, fp, ror r1
   12db8:	andeq	r5, r0, ip, asr #12
   12dbc:	andeq	ip, r1, r0, ror lr
   12dc0:	andeq	r4, r0, sl, asr sp
   12dc4:	andeq	ip, r1, r8, asr lr
   12dc8:	ldrmi	ip, [sp, #-3368]!	; 0xfffff2d8
   12dcc:	strbmi	r4, [sp, #-1101]	; 0xfffffbb3
   12dd0:	andeq	ip, r1, r8, ror #25
   12dd4:	strbmi	r4, [sp], #-322	; 0xfffffebe
   12dd8:	strdeq	ip, [r1], -r8
   12ddc:	vshr.s32	d18, d0, #11
   12de0:			; <UNDEFINED> instruction: 0xf97cff8c
   12de4:	andeq	ip, r1, ip, asr #30
   12de8:	rscs	lr, r5, r2, ror #3
   12dec:	andeq	ip, r1, ip, lsl sp
   12df0:	teqne	r0, r4, asr r8
   12df4:	cmnne	r6, #-1744830463	; 0x98000001
   12df8:	andeq	ip, r1, r4, lsr #24
   12dfc:	bleq	ff415d44 <optarg@@GLIBC_2.4+0xff3e6b54>
   12e00:	andeq	ip, r1, ip, lsl #28
   12e04:	blge	fee993dc <optarg@@GLIBC_2.4+0xfee6a1ec>
   12e08:	blt	ff2fe100 <optarg@@GLIBC_2.4+0xff2cef10>
   12e0c:	ldrdeq	ip, [r1], -r8
   12e10:	bge	ff5fd9c0 <optarg@@GLIBC_2.4+0xff5ce7d0>
   12e14:			; <UNDEFINED> instruction: 0x0001cebc
   12e18:	cdpvs	3, 6, cr7, cr6, cr4, {3}
   12e1c:	mrcvs	6, 3, r6, cr3, cr3, {3}
   12e20:	andeq	ip, r1, ip, lsl #29
   12e24:	stclvs	15, cr6, [pc], #-448	; 12c6c <__assert_fail@plt+0x1418>
   12e28:	andeq	ip, r1, r8, asr #24
   12e2c:	andeq	r1, r0, r3, ror r3
   12e30:	andeq	ip, r1, r0, ror #25
   12e34:	andeq	r0, r0, r7, lsl #3
   12e38:	andeq	ip, r1, ip, lsl ip
   12e3c:	andeq	r9, r0, r1, lsr #31
   12e40:			; <UNDEFINED> instruction: 0x0001cfbc
   12e44:	ldrdeq	ip, [r1], -r8
   12e48:	stmiacs	sp, {r0, r2, r6, r8, sl, fp, ip, sp}^
   12e4c:	blcs	feb5a5fc <optarg@@GLIBC_2.4+0xfeb2b40c>
   12e50:	ldrdeq	ip, [r1], -r4
   12e54:	strcs	r1, [r5], #-2309	; 0xfffff6fb
   12e58:	andeq	ip, r1, ip, lsr #31
   12e5c:	subpl	r5, r9, r5, asr #32
   12e60:	rsbpl	r4, r5, #1884160	; 0x1cc000
   12e64:	andeq	ip, r1, r8, lsl #30
   12e68:			; <UNDEFINED> instruction: 0x47504653
   12e6c:	andeq	ip, r1, ip, lsl #27
   12e70:	cmnvs	r5, r3, ror r6
   12e74:	andeq	ip, r1, ip, lsr ip
   12e78:	cmnvs	r5, ip, ror #14
   12e7c:	andeq	ip, r1, r0, ror #29
   12e80:			; <UNDEFINED> instruction: 0x01021994
   12e84:	andeq	ip, r1, r8, asr #31
   12e88:	sbceq	r6, r3, r0, lsl #8
   12e8c:	andeq	ip, r1, ip, ror ip
   12e90:	andeq	r1, r0, pc, lsl #7
   12e94:	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
   12e98:	strdeq	ip, [r1], -r0
   12e9c:	andeq	r1, r0, pc, ror r3
   12ea0:	andeq	ip, r1, ip, lsl lr
   12ea4:	cmnvc	r2, #-1879048185	; 0x90000007
   12ea8:	andeq	ip, r1, r4, lsr #25
   12eac:	cmnvc	r1, #104, 6	; 0xa0000001
   12eb0:	andeq	ip, r1, r8, ror pc
   12eb4:	andeq	ip, r1, r8, ror #30
   12eb8:	andeq	ip, r1, r8, ror #31
   12ebc:	andeq	ip, r1, r0, ror ip
   12ec0:	rsbvs	r6, r5, #478150656	; 0x1c800000
   12ec4:	andeq	ip, r1, r4, lsl #31
   12ec8:	andeq	ip, r1, ip, asr sp
   12ecc:	movtpl	r3, #24909	; 0x614d
   12ed0:	andeq	ip, r1, r4, lsl lr
   12ed4:	andeq	ip, r1, r0, lsl #24
   12ed8:	andeq	ip, r1, ip, lsr #26
   12edc:	andeq	ip, r1, ip, asr #26
   12ee0:	andeq	ip, r1, r4, lsl #26
   12ee4:	andeq	sp, r1, r8, lsl r0
   12ee8:	andeq	ip, r1, ip, lsr #25
   12eec:			; <UNDEFINED> instruction: 0x0001cfb4
   12ef0:	muleq	r1, ip, ip
   12ef4:	andeq	sp, r1, ip
   12ef8:	andeq	ip, r1, ip, ror lr
   12efc:	andeq	ip, r1, r8, ror sp
   12f00:	andeq	ip, r1, r4, asr sp
   12f04:	andeq	ip, r1, r4, lsl #30
   12f08:	andeq	ip, r1, r8, ror #24
   12f0c:	andeq	ip, r1, r0, ror sp
   12f10:	andeq	ip, r1, r0, ror pc
   12f14:	ldrbtvc	r6, [r2], #-355	; 0xfffffe9d
   12f18:	andeq	ip, r1, r4, lsr #31
   12f1c:	ldrdeq	ip, [r1], -r0
   12f20:	andeq	ip, r1, r0, asr #30
   12f24:	andeq	ip, r1, r4, lsr ip
   12f28:	andeq	ip, r1, r4, asr pc
   12f2c:	andeq	ip, r1, ip, asr pc
   12f30:	andeq	ip, r1, ip, lsr sp
   12f34:	andeq	ip, r1, ip, lsl pc
   12f38:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   12f3c:	strdeq	ip, [r1], -r8
   12f40:	andeq	ip, r1, r4, lsr sp
   12f44:	andeq	ip, r1, r0, ror #26
   12f48:	andeq	ip, r1, r4, lsr #26
   12f4c:	muleq	r1, ip, lr
   12f50:	andeq	sp, r1, r4, lsl r0
   12f54:			; <UNDEFINED> instruction: 0x0001cdb0
   12f58:	strdeq	ip, [r1], -r0
   12f5c:			; <UNDEFINED> instruction: 0x0001ccb0
   12f60:	andeq	ip, r1, ip, ror sp
   12f64:	andeq	ip, r1, r4, lsl pc
   12f68:	andeq	ip, r1, r8, ror #27
   12f6c:	andeq	ip, r1, r8, lsr #27
   12f70:	andeq	ip, r1, r4, lsl #28
   12f74:	andeq	ip, r1, r0, lsl sp
   12f78:	andeq	ip, r1, r4, asr #25
   12f7c:			; <UNDEFINED> instruction: 0x012fd16d
   12f80:	andeq	sp, r1, r8
   12f84:	andeq	sp, r1, r0
   12f88:	muleq	r1, r0, ip
   12f8c:	andeq	ip, r1, r0, lsr #30
   12f90:	andeq	ip, r1, r8, ror #23
   12f94:	muleq	r1, r8, sp
   12f98:	andeq	ip, r1, r8, ror #28
   12f9c:	andeq	ip, r1, r4, lsl #25
   12fa0:	andeq	ip, r1, r0, ror #31
   12fa4:	andeq	ip, r1, r4, asr #27
   12fa8:	andeq	ip, r1, r0, lsl #27
   12fac:	andeq	ip, r1, r4, lsl ip
   12fb0:	andeq	r2, r0, r8, ror r4
   12fb4:	andeq	ip, r1, r4, asr #28
   12fb8:	andeq	ip, r1, r4, lsl #29
   12fbc:	andeq	ip, r1, r8, lsr lr
   12fc0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12fc4:	andeq	ip, r1, r4, lsr pc
   12fc8:			; <UNDEFINED> instruction: 0x0001ccbc
   12fcc:	andeq	ip, r1, r8, lsr #29
   12fd0:	andeq	ip, r1, r4, lsr #28
   12fd4:	push	{r4, r5, r6, r7, lr}
   12fd8:	mov	r5, r0
   12fdc:	ldr	r4, [pc, #280]	; 130fc <__assert_fail@plt+0x18a8>
   12fe0:	sub	sp, sp, #212	; 0xd4
   12fe4:	ldrb	r0, [r4, #21]
   12fe8:	cmp	r0, #0
   12fec:	beq	130ac <__assert_fail@plt+0x1858>
   12ff0:	mov	r2, sp
   12ff4:	mov	r1, r5
   12ff8:	mov	r0, #3
   12ffc:	bl	11800 <__xstat64@plt>
   13000:	cmp	r0, #0
   13004:	bne	130a0 <__assert_fail@plt+0x184c>
   13008:	ldr	r4, [r4, #24]
   1300c:	cmp	r4, #0
   13010:	beq	130a0 <__assert_fail@plt+0x184c>
   13014:	mov	r6, #3
   13018:	b	13028 <__assert_fail@plt+0x17d4>
   1301c:	ldr	r4, [r4, #28]
   13020:	cmp	r4, #0
   13024:	beq	130a0 <__assert_fail@plt+0x184c>
   13028:	ldrb	r3, [r4, #24]
   1302c:	tst	r3, #1
   13030:	beq	1301c <__assert_fail@plt+0x17c8>
   13034:	ldr	r7, [r4]
   13038:	ldrb	r3, [r7]
   1303c:	cmp	r3, #47	; 0x2f
   13040:	bne	1301c <__assert_fail@plt+0x17c8>
   13044:	mov	r1, r5
   13048:	ldr	r0, [r4, #4]
   1304c:	bl	11464 <strcmp@plt>
   13050:	cmp	r0, #0
   13054:	bne	1301c <__assert_fail@plt+0x17c8>
   13058:	mov	r1, r7
   1305c:	add	r2, sp, #104	; 0x68
   13060:	mov	r0, r6
   13064:	bl	11800 <__xstat64@plt>
   13068:	cmp	r0, #0
   1306c:	bne	1301c <__assert_fail@plt+0x17c8>
   13070:	ldrd	r0, [sp, #96]	; 0x60
   13074:	ldrd	r2, [sp, #200]	; 0xc8
   13078:	cmp	r1, r3
   1307c:	cmpeq	r0, r2
   13080:	bne	1301c <__assert_fail@plt+0x17c8>
   13084:	ldrd	r0, [sp]
   13088:	ldrd	r2, [sp, #104]	; 0x68
   1308c:	cmp	r1, r3
   13090:	cmpeq	r0, r2
   13094:	bne	1301c <__assert_fail@plt+0x17c8>
   13098:	ldr	r0, [r4]
   1309c:	b	130a4 <__assert_fail@plt+0x1850>
   130a0:	mov	r0, #0
   130a4:	add	sp, sp, #212	; 0xd4
   130a8:	pop	{r4, r5, r6, r7, pc}
   130ac:	bl	15b38 <__assert_fail@plt+0x42e4>
   130b0:	cmp	r0, #0
   130b4:	mov	r6, r0
   130b8:	str	r0, [r4, #24]
   130bc:	beq	130cc <__assert_fail@plt+0x1878>
   130c0:	mov	r3, #1
   130c4:	strb	r3, [r4, #21]
   130c8:	b	12ff0 <__assert_fail@plt+0x179c>
   130cc:	bl	116b0 <__errno_location@plt>
   130d0:	mov	r2, #5
   130d4:	ldr	r1, [pc, #36]	; 13100 <__assert_fail@plt+0x18ac>
   130d8:	ldr	r7, [r0]
   130dc:	mov	r0, r6
   130e0:	bl	114e8 <dcgettext@plt>
   130e4:	mov	r1, r7
   130e8:	ldr	r2, [pc, #20]	; 13104 <__assert_fail@plt+0x18b0>
   130ec:	mov	r3, r0
   130f0:	mov	r0, r6
   130f4:	bl	115a8 <error@plt>
   130f8:	b	130c0 <__assert_fail@plt+0x186c>
   130fc:	strdeq	pc, [r2], -r8
   13100:	andeq	sp, r1, ip, lsr r0
   13104:	ldrdeq	lr, [r1], -r4
   13108:	push	{r4, r5, lr}
   1310c:	sub	sp, sp, #92	; 0x5c
   13110:	ldr	r5, [pc, #164]	; 131bc <__assert_fail@plt+0x1968>
   13114:	add	r4, sp, #8
   13118:	ldr	r3, [r5, #28]
   1311c:	stm	r4, {r0, r1}
   13120:	cmp	r3, #0
   13124:	beq	131a4 <__assert_fail@plt+0x1950>
   13128:	mov	r1, r4
   1312c:	mov	r0, r3
   13130:	add	r2, sp, #44	; 0x2c
   13134:	ldr	r4, [sp, #12]
   13138:	bl	1a1d4 <__assert_fail@plt+0x8980>
   1313c:	cmp	r0, #0
   13140:	beq	1316c <__assert_fail@plt+0x1918>
   13144:	ldr	r3, [r5, #28]
   13148:	ldr	r2, [pc, #112]	; 131c0 <__assert_fail@plt+0x196c>
   1314c:	mov	r1, #61	; 0x3d
   13150:	stm	sp, {r3, r4}
   13154:	ldr	r0, [pc, #104]	; 131c4 <__assert_fail@plt+0x1970>
   13158:	add	r3, sp, #44	; 0x2c
   1315c:	bl	17e4c <__assert_fail@plt+0x65f8>
   13160:	ldr	r0, [pc, #92]	; 131c4 <__assert_fail@plt+0x1970>
   13164:	add	sp, sp, #92	; 0x5c
   13168:	pop	{r4, r5, pc}
   1316c:	ldr	r0, [sp, #8]
   13170:	add	r2, sp, #20
   13174:	asr	r1, r0, #31
   13178:	bl	15980 <__assert_fail@plt+0x412c>
   1317c:	str	r4, [sp, #4]
   13180:	ldr	r3, [pc, #64]	; 131c8 <__assert_fail@plt+0x1974>
   13184:	mov	r2, #61	; 0x3d
   13188:	mov	r1, #1
   1318c:	str	r0, [sp]
   13190:	ldr	r0, [pc, #44]	; 131c4 <__assert_fail@plt+0x1970>
   13194:	bl	116bc <__sprintf_chk@plt>
   13198:	ldr	r0, [pc, #36]	; 131c4 <__assert_fail@plt+0x1970>
   1319c:	add	sp, sp, #92	; 0x5c
   131a0:	pop	{r4, r5, pc}
   131a4:	ldr	r0, [pc, #32]	; 131cc <__assert_fail@plt+0x1978>
   131a8:	bl	115cc <getenv@plt>
   131ac:	bl	19f5c <__assert_fail@plt+0x8708>
   131b0:	mov	r3, r0
   131b4:	str	r0, [r5, #28]
   131b8:	b	13128 <__assert_fail@plt+0x18d4>
   131bc:	strdeq	pc, [r2], -r8
   131c0:	andeq	sp, r1, ip, rrx
   131c4:	andeq	pc, r2, r8, lsl r2	; <UNPREDICTABLE>
   131c8:	andeq	sp, r1, r4, lsl #1
   131cc:	andeq	sp, r1, r8, rrx
   131d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131d4:	sub	sp, sp, #28
   131d8:	mov	r6, r1
   131dc:	add	r1, sp, #24
   131e0:	mov	r8, r0
   131e4:	stmdb	r1, {r2, r3}
   131e8:	mov	r1, #46	; 0x2e
   131ec:	mov	r2, r6
   131f0:	bl	11710 <memchr@plt>
   131f4:	ldr	sl, [sp, #16]
   131f8:	ldr	r9, [sp, #20]
   131fc:	subs	r4, r0, #0
   13200:	beq	1342c <__assert_fail@plt+0x1bd8>
   13204:	mov	r7, #0
   13208:	strb	r7, [r8, r6]
   1320c:	ldrb	r3, [r4, #1]
   13210:	sub	r6, r4, r8
   13214:	sub	r3, r3, #48	; 0x30
   13218:	cmp	r3, #9
   1321c:	bls	13414 <__assert_fail@plt+0x1bc0>
   13220:	ldrb	r3, [r4, #-1]
   13224:	mov	r5, #9
   13228:	sub	r3, r3, #48	; 0x30
   1322c:	cmp	r3, #9
   13230:	bhi	13450 <__assert_fail@plt+0x1bfc>
   13234:	mov	r2, r4
   13238:	mov	r3, #0
   1323c:	strb	r3, [r2], #-1
   13240:	mov	r4, r2
   13244:	ldrb	r3, [r2, #-1]!
   13248:	sub	r3, r3, #48	; 0x30
   1324c:	cmp	r3, #9
   13250:	bls	13240 <__assert_fail@plt+0x19ec>
   13254:	mov	r2, #10
   13258:	mov	r1, #0
   1325c:	mov	r0, r4
   13260:	bl	11470 <strtol@plt>
   13264:	cmp	r0, #1
   13268:	mov	r7, r0
   1326c:	ble	132f8 <__assert_fail@plt+0x1aa4>
   13270:	ldr	r2, [pc, #536]	; 13490 <__assert_fail@plt+0x1c3c>
   13274:	ldrb	r3, [r4]
   13278:	ldr	r2, [r2, #96]	; 0x60
   1327c:	cmp	r3, #48	; 0x30
   13280:	movne	r3, r4
   13284:	addeq	r3, r4, #1
   13288:	cmp	r2, r0
   1328c:	sub	r6, r3, r8
   13290:	bcs	132f8 <__assert_fail@plt+0x1aa4>
   13294:	sub	r2, r0, r2
   13298:	cmp	r2, #1
   1329c:	ble	132f8 <__assert_fail@plt+0x1aa4>
   132a0:	sub	ip, r2, r5
   132a4:	cmp	ip, #1
   132a8:	ble	132f8 <__assert_fail@plt+0x1aa4>
   132ac:	cmp	r8, r3
   132b0:	bcs	13458 <__assert_fail@plt+0x1c04>
   132b4:	sub	r3, r3, #1
   132b8:	sub	r2, r8, #1
   132bc:	mov	r0, r8
   132c0:	mov	lr, #0
   132c4:	mov	r4, #1
   132c8:	ldrb	r1, [r2, #1]!
   132cc:	cmp	r1, #45	; 0x2d
   132d0:	strbne	r1, [r0]
   132d4:	moveq	lr, r4
   132d8:	addne	r0, r0, #1
   132dc:	cmp	r2, r3
   132e0:	bne	132c8 <__assert_fail@plt+0x1a74>
   132e4:	cmp	lr, #0
   132e8:	sub	r6, r0, r8
   132ec:	movne	r0, #0
   132f0:	beq	13460 <__assert_fail@plt+0x1c0c>
   132f4:	add	r6, r0, r6
   132f8:	cmp	r5, #8
   132fc:	bgt	13450 <__assert_fail@plt+0x1bfc>
   13300:	mov	r3, r5
   13304:	mov	r4, #1
   13308:	add	r4, r4, r4, lsl #2
   1330c:	add	r3, r3, #1
   13310:	cmp	r3, #9
   13314:	lsl	r4, r4, #1
   13318:	bne	13308 <__assert_fail@plt+0x1ab4>
   1331c:	mov	r1, r4
   13320:	mov	r0, r9
   13324:	bl	1c4f4 <__assert_fail@plt+0xaca0>
   13328:	adds	r3, r9, #0
   1332c:	movne	r3, #1
   13330:	ands	r3, r3, sl, lsr #31
   13334:	mov	fp, r0
   13338:	beq	133fc <__assert_fail@plt+0x1ba8>
   1333c:	mov	r1, r4
   13340:	ldr	r0, [pc, #332]	; 13494 <__assert_fail@plt+0x1c40>
   13344:	bl	1c4f4 <__assert_fail@plt+0xaca0>
   13348:	mov	r1, r4
   1334c:	sub	fp, r0, fp
   13350:	mov	r0, r9
   13354:	bl	1c714 <__assert_fail@plt+0xaec0>
   13358:	cmp	r1, #0
   1335c:	subne	fp, fp, #1
   13360:	cmp	fp, #0
   13364:	addne	sl, sl, #1
   13368:	cmp	sl, #0
   1336c:	bne	133fc <__assert_fail@plt+0x1ba8>
   13370:	mov	r1, r6
   13374:	ldr	r3, [pc, #284]	; 13498 <__assert_fail@plt+0x1c44>
   13378:	ldr	r2, [pc, #284]	; 1349c <__assert_fail@plt+0x1c48>
   1337c:	mov	r0, r8
   13380:	bl	11e08 <__assert_fail@plt+0x5b4>
   13384:	mov	r1, r8
   13388:	mov	r2, #0
   1338c:	ldr	r3, [pc, #268]	; 134a0 <__assert_fail@plt+0x1c4c>
   13390:	mov	r0, #1
   13394:	bl	116ec <__printf_chk@plt>
   13398:	cmp	r5, #0
   1339c:	beq	133f4 <__assert_fail@plt+0x1ba0>
   133a0:	bic	r0, r0, r0, asr #31
   133a4:	cmp	r5, #9
   133a8:	movlt	r3, r5
   133ac:	movge	r3, #9
   133b0:	cmp	r0, r7
   133b4:	sub	r5, r5, r3
   133b8:	bge	13438 <__assert_fail@plt+0x1be4>
   133bc:	ldr	r2, [pc, #204]	; 13490 <__assert_fail@plt+0x1c3c>
   133c0:	sub	r0, r7, r0
   133c4:	ldr	r1, [r2, #96]	; 0x60
   133c8:	cmp	r0, r1
   133cc:	movls	r1, #0
   133d0:	bhi	13444 <__assert_fail@plt+0x1bf0>
   133d4:	mov	r0, #0
   133d8:	ldr	r2, [r2, #100]	; 0x64
   133dc:	stmib	sp, {r1, r5}
   133e0:	str	r0, [sp, #12]
   133e4:	str	fp, [sp]
   133e8:	ldr	r1, [pc, #180]	; 134a4 <__assert_fail@plt+0x1c50>
   133ec:	mov	r0, #1
   133f0:	bl	116ec <__printf_chk@plt>
   133f4:	add	sp, sp, #28
   133f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133fc:	mov	r1, r6
   13400:	mov	r0, r8
   13404:	mov	r2, sl
   13408:	asr	r3, sl, #31
   1340c:	bl	11f68 <__assert_fail@plt+0x714>
   13410:	b	13398 <__assert_fail@plt+0x1b44>
   13414:	mov	r2, #10
   13418:	mov	r1, r7
   1341c:	add	r0, r4, #1
   13420:	bl	11470 <strtol@plt>
   13424:	cmp	r0, #0
   13428:	bne	13478 <__assert_fail@plt+0x1c24>
   1342c:	mov	r5, #0
   13430:	mov	r7, r5
   13434:	b	13300 <__assert_fail@plt+0x1aac>
   13438:	mov	r1, #0
   1343c:	ldr	r2, [pc, #76]	; 13490 <__assert_fail@plt+0x1c3c>
   13440:	b	133d4 <__assert_fail@plt+0x1b80>
   13444:	sub	r0, r0, r1
   13448:	sub	r1, r0, r3
   1344c:	b	133d4 <__assert_fail@plt+0x1b80>
   13450:	mov	r4, #1
   13454:	b	1331c <__assert_fail@plt+0x1ac8>
   13458:	mov	r0, r8
   1345c:	mov	r6, #0
   13460:	str	ip, [sp]
   13464:	ldr	r3, [pc, #60]	; 134a8 <__assert_fail@plt+0x1c54>
   13468:	mvn	r2, #0
   1346c:	mov	r1, #1
   13470:	bl	116bc <__sprintf_chk@plt>
   13474:	b	132f4 <__assert_fail@plt+0x1aa0>
   13478:	ldrb	r3, [r4, #-1]
   1347c:	mov	r5, r0
   13480:	sub	r3, r3, #48	; 0x30
   13484:	cmp	r3, #9
   13488:	bhi	132f8 <__assert_fail@plt+0x1aa4>
   1348c:	b	13234 <__assert_fail@plt+0x19e0>
   13490:	strdeq	pc, [r2], -r8
   13494:	blcc	fe6c5c9c <optarg@@GLIBC_2.4+0xfe696aac>
   13498:	muleq	r1, r0, r0
   1349c:	ldrdeq	ip, [r1], -r8
   134a0:	svclt	0x00d00000
   134a4:	muleq	r1, r4, r0
   134a8:	andeq	sp, r1, ip, lsl #1
   134ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   134b0:	sub	sp, sp, #64	; 0x40
   134b4:	mov	r5, r0
   134b8:	ldr	ip, [sp, #104]	; 0x68
   134bc:	mov	r6, r1
   134c0:	mov	r0, ip
   134c4:	sub	r3, r3, #65	; 0x41
   134c8:	ldr	r4, [r0], #4
   134cc:	ldm	r0, {r0, r1}
   134d0:	stm	sp, {r0, r1}
   134d4:	ldr	r1, [ip, #8]
   134d8:	cmp	r3, #57	; 0x39
   134dc:	ldrls	pc, [pc, r3, lsl #2]
   134e0:	b	13a88 <__assert_fail@plt+0x2234>
   134e4:			; <UNDEFINED> instruction: 0x000139b8
   134e8:	muleq	r1, ip, r9
   134ec:	andeq	r3, r1, r8, lsr r9
   134f0:	andeq	r3, r1, r0, lsr #18
   134f4:	andeq	r3, r1, r8, lsl #21
   134f8:	andeq	r3, r1, r4, ror #19
   134fc:	andeq	r3, r1, r0, ror #17
   13500:	andeq	r3, r1, r8, lsl #21
   13504:	andeq	r3, r1, r8, lsl #21
   13508:	andeq	r3, r1, r8, lsl #21
   1350c:	andeq	r3, r1, r8, lsl #21
   13510:	andeq	r3, r1, r8, lsl #21
   13514:	andeq	r3, r1, r8, lsl #21
   13518:	andeq	r3, r1, ip, asr r8
   1351c:	andeq	r3, r1, r8, lsl #21
   13520:	andeq	r3, r1, r8, lsl #21
   13524:	andeq	r3, r1, r8, lsl #21
   13528:	andeq	r3, r1, r4, asr #16
   1352c:	andeq	r3, r1, r8, lsl #21
   13530:	andeq	r3, r1, r0, lsr #20
   13534:	andeq	r3, r1, r8, lsl #20
   13538:	andeq	r3, r1, r8, lsl #21
   1353c:	andeq	r3, r1, r4, asr sl
   13540:	strdeq	r3, [r1], -r8
   13544:	strdeq	r3, [r1], -ip
   13548:	strdeq	r3, [r1], -r0
   1354c:	andeq	r3, r1, r8, lsl #21
   13550:	andeq	r3, r1, r8, lsl #21
   13554:	andeq	r3, r1, r8, lsl #21
   13558:	andeq	r3, r1, r8, lsl #21
   1355c:	andeq	r3, r1, r8, lsl #21
   13560:	andeq	r3, r1, r8, lsl #21
   13564:	andeq	r3, r1, r8, lsl #16
   13568:	strdeq	r3, [r1], -r0
   1356c:	andeq	r3, r1, r8, lsl #21
   13570:	andeq	r3, r1, r8, asr #15
   13574:	andeq	r3, r1, r8, lsl #21
   13578:	andeq	r3, r1, ip, lsr #15
   1357c:	andeq	r3, r1, r4, lsr #15
   13580:	muleq	r1, ip, r7
   13584:	andeq	r3, r1, r4, lsl #15
   13588:	andeq	r3, r1, r8, lsl #21
   1358c:	andeq	r3, r1, r8, lsl #21
   13590:	andeq	r3, r1, r8, lsl #21
   13594:	andeq	r3, r1, r8, lsl r7
   13598:	andeq	r3, r1, r0, lsl #14
   1359c:	ldrdeq	r3, [r1], -r8
   135a0:	andeq	r3, r1, r8, lsl #21
   135a4:	andeq	r3, r1, r8, lsl #21
   135a8:	andeq	r3, r1, r0, lsl #13
   135ac:	andeq	r3, r1, r8, ror #12
   135b0:	andeq	r3, r1, r8, lsr #13
   135b4:	andeq	r3, r1, ip, asr #12
   135b8:	andeq	r3, r1, r8, lsl #21
   135bc:	andeq	r3, r1, r8, lsl r6
   135c0:	andeq	r3, r1, ip, lsl #12
   135c4:	andeq	r3, r1, r0, lsl #12
   135c8:	andeq	r3, r1, ip, asr #11
   135cc:	add	r4, r4, #88	; 0x58
   135d0:	add	r3, sp, #48	; 0x30
   135d4:	ldm	r4, {r0, r1}
   135d8:	mov	r4, #0
   135dc:	stm	r3, {r0, r1}
   135e0:	bl	13108 <__assert_fail@plt+0x18b4>
   135e4:	mov	r1, r6
   135e8:	mov	r2, r0
   135ec:	mov	r0, r5
   135f0:	bl	11ef8 <__assert_fail@plt+0x6a4>
   135f4:	mov	r0, r4
   135f8:	add	sp, sp, #64	; 0x40
   135fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13600:	add	r4, r4, #80	; 0x50
   13604:	add	r3, sp, #32
   13608:	b	135d4 <__assert_fail@plt+0x1d80>
   1360c:	add	r4, r4, #72	; 0x48
   13610:	add	r3, sp, #16
   13614:	b	135d4 <__assert_fail@plt+0x1d80>
   13618:	cmp	r1, #0
   1361c:	blt	13b48 <__assert_fail@plt+0x22f4>
   13620:	stm	sp, {r0, r1}
   13624:	ldm	sp, {r0, r1}
   13628:	bl	13108 <__assert_fail@plt+0x18b4>
   1362c:	mov	r2, r0
   13630:	mov	r0, r5
   13634:	mov	r1, r6
   13638:	bl	11ef8 <__assert_fail@plt+0x6a4>
   1363c:	mov	r4, #0
   13640:	mov	r0, r4
   13644:	add	sp, sp, #64	; 0x40
   13648:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1364c:	ldr	r2, [r4, #24]
   13650:	mov	r1, r6
   13654:	mov	r0, r5
   13658:	mov	r3, #0
   1365c:	bl	11f2c <__assert_fail@plt+0x6d8>
   13660:	mov	r4, #0
   13664:	b	135f4 <__assert_fail@plt+0x1da0>
   13668:	ldrd	r2, [r4, #48]	; 0x30
   1366c:	mov	r1, r6
   13670:	mov	r0, r5
   13674:	bl	11f68 <__assert_fail@plt+0x714>
   13678:	mov	r4, #0
   1367c:	b	135f4 <__assert_fail@plt+0x1da0>
   13680:	cmp	r2, #72	; 0x48
   13684:	beq	13bf8 <__assert_fail@plt+0x23a4>
   13688:	cmp	r2, #76	; 0x4c
   1368c:	beq	13b60 <__assert_fail@plt+0x230c>
   13690:	ldrd	r2, [r4, #32]
   13694:	mov	r1, r6
   13698:	mov	r0, r5
   1369c:	bl	11f2c <__assert_fail@plt+0x6d8>
   136a0:	mov	r4, #0
   136a4:	b	135f4 <__assert_fail@plt+0x1da0>
   136a8:	ldr	r2, [r4, #32]
   136ac:	ldr	r3, [r4, #36]	; 0x24
   136b0:	mov	r1, r6
   136b4:	bic	r3, r3, #4080	; 0xff0
   136b8:	lsl	r2, r2, #12
   136bc:	bic	r3, r3, #15
   136c0:	orr	r2, r3, r2, lsr #20
   136c4:	mov	r0, r5
   136c8:	mov	r3, #0
   136cc:	bl	11ebc <__assert_fail@plt+0x668>
   136d0:	mov	r4, #0
   136d4:	b	135f4 <__assert_fail@plt+0x1da0>
   136d8:	ldr	r2, [r4, #56]	; 0x38
   136dc:	mov	r1, r6
   136e0:	sub	r3, r2, #1
   136e4:	cmn	r3, #-536870911	; 0xe0000001
   136e8:	movhi	r2, #512	; 0x200
   136ec:	mov	r0, r5
   136f0:	asr	r3, r2, #31
   136f4:	bl	11f2c <__assert_fail@plt+0x6d8>
   136f8:	mov	r4, #0
   136fc:	b	135f4 <__assert_fail@plt+0x1da0>
   13700:	mov	r1, r6
   13704:	mov	r0, r5
   13708:	ldr	r2, [sp, #100]	; 0x64
   1370c:	bl	11ef8 <__assert_fail@plt+0x6a4>
   13710:	mov	r4, #0
   13714:	b	135f4 <__assert_fail@plt+0x1da0>
   13718:	ldr	r3, [pc, #1376]	; 13c80 <__assert_fail@plt+0x242c>
   1371c:	ldrb	r3, [r3, #116]	; 0x74
   13720:	cmp	r3, #0
   13724:	bne	13738 <__assert_fail@plt+0x1ee4>
   13728:	ldr	r3, [r4, #16]
   1372c:	and	r3, r3, #61440	; 0xf000
   13730:	cmp	r3, #40960	; 0xa000
   13734:	beq	13ac4 <__assert_fail@plt+0x2270>
   13738:	ldr	r0, [sp, #100]	; 0x64
   1373c:	bl	117c4 <canonicalize_file_name@plt>
   13740:	subs	r7, r0, #0
   13744:	beq	13ba0 <__assert_fail@plt+0x234c>
   13748:	bl	12fd4 <__assert_fail@plt+0x1780>
   1374c:	mov	r8, r0
   13750:	mov	r0, r7
   13754:	bl	15928 <__assert_fail@plt+0x40d4>
   13758:	cmp	r8, #0
   1375c:	movne	r4, #0
   13760:	movne	r7, r4
   13764:	beq	13ac4 <__assert_fail@plt+0x2270>
   13768:	mov	r0, r5
   1376c:	mov	r2, r8
   13770:	mov	r1, r6
   13774:	bl	11ef8 <__assert_fail@plt+0x6a4>
   13778:	mov	r0, r7
   1377c:	bl	15928 <__assert_fail@plt+0x40d4>
   13780:	b	135f4 <__assert_fail@plt+0x1da0>
   13784:	ldrd	r2, [r4, #96]	; 0x60
   13788:	mov	r1, r6
   1378c:	mov	r0, r5
   13790:	bl	11f2c <__assert_fail@plt+0x6d8>
   13794:	mov	r4, #0
   13798:	b	135f4 <__assert_fail@plt+0x1da0>
   1379c:	ldr	r2, [r4, #20]
   137a0:	b	13650 <__assert_fail@plt+0x1dfc>
   137a4:	ldr	r2, [r4, #28]
   137a8:	b	13650 <__assert_fail@plt+0x1dfc>
   137ac:	ldr	r2, [r4, #16]
   137b0:	mov	r1, r6
   137b4:	mov	r0, r5
   137b8:	mov	r3, #0
   137bc:	bl	11ebc <__assert_fail@plt+0x668>
   137c0:	mov	r4, #0
   137c4:	b	135f4 <__assert_fail@plt+0x1da0>
   137c8:	cmp	r2, #72	; 0x48
   137cc:	beq	13c28 <__assert_fail@plt+0x23d4>
   137d0:	cmp	r2, #76	; 0x4c
   137d4:	beq	13b94 <__assert_fail@plt+0x2340>
   137d8:	ldrd	r2, [r4]
   137dc:	mov	r1, r6
   137e0:	mov	r0, r5
   137e4:	bl	11f2c <__assert_fail@plt+0x6d8>
   137e8:	mov	r4, #0
   137ec:	b	135f4 <__assert_fail@plt+0x1da0>
   137f0:	ldrd	r2, [r4, #64]	; 0x40
   137f4:	mov	r1, r6
   137f8:	mov	r0, r5
   137fc:	bl	11f2c <__assert_fail@plt+0x6d8>
   13800:	mov	r4, #0
   13804:	b	135f4 <__assert_fail@plt+0x1da0>
   13808:	ldr	r4, [r4, #16]
   1380c:	mov	r1, r6
   13810:	ldr	r3, [pc, #1132]	; 13c84 <__assert_fail@plt+0x2430>
   13814:	lsl	r4, r4, #20
   13818:	ldr	r2, [pc, #1128]	; 13c88 <__assert_fail@plt+0x2434>
   1381c:	lsr	r4, r4, #20
   13820:	mov	r0, r5
   13824:	bl	11e08 <__assert_fail@plt+0x5b4>
   13828:	mov	r2, r4
   1382c:	mov	r1, r5
   13830:	mov	r3, #0
   13834:	mov	r0, #1
   13838:	bl	116ec <__printf_chk@plt>
   1383c:	mov	r4, #0
   13840:	b	135f4 <__assert_fail@plt+0x1da0>
   13844:	ldrd	r2, [r4, #32]
   13848:	mov	r1, r6
   1384c:	mov	r0, r5
   13850:	bl	11ebc <__assert_fail@plt+0x668>
   13854:	mov	r4, #0
   13858:	b	135f4 <__assert_fail@plt+0x1da0>
   1385c:	mov	r0, #0
   13860:	bl	197a4 <__assert_fail@plt+0x7f50>
   13864:	ldr	r1, [sp, #100]	; 0x64
   13868:	bl	19b10 <__assert_fail@plt+0x82bc>
   1386c:	mov	r1, r6
   13870:	mov	r2, r0
   13874:	mov	r0, r5
   13878:	bl	11ef8 <__assert_fail@plt+0x6a4>
   1387c:	ldr	r3, [r4, #16]
   13880:	and	r3, r3, #61440	; 0xf000
   13884:	cmp	r3, #40960	; 0xa000
   13888:	movne	r4, #0
   1388c:	bne	135f4 <__assert_fail@plt+0x1da0>
   13890:	ldr	r1, [r4, #48]	; 0x30
   13894:	ldr	r0, [sp, #100]	; 0x64
   13898:	bl	15020 <__assert_fail@plt+0x37cc>
   1389c:	subs	r7, r0, #0
   138a0:	beq	13c3c <__assert_fail@plt+0x23e8>
   138a4:	ldr	r1, [pc, #992]	; 13c8c <__assert_fail@plt+0x2438>
   138a8:	mov	r0, #1
   138ac:	bl	116ec <__printf_chk@plt>
   138b0:	mov	r0, #0
   138b4:	bl	197a4 <__assert_fail@plt+0x7f50>
   138b8:	mov	r1, r7
   138bc:	bl	19b10 <__assert_fail@plt+0x82bc>
   138c0:	mov	r1, r6
   138c4:	mov	r4, #0
   138c8:	mov	r2, r0
   138cc:	mov	r0, r5
   138d0:	bl	11ef8 <__assert_fail@plt+0x6a4>
   138d4:	mov	r0, r7
   138d8:	bl	15928 <__assert_fail@plt+0x40d4>
   138dc:	b	135f4 <__assert_fail@plt+0x1da0>
   138e0:	ldr	r0, [r4, #28]
   138e4:	bl	1183c <getgrgid@plt>
   138e8:	cmp	r0, #0
   138ec:	beq	13a18 <__assert_fail@plt+0x21c4>
   138f0:	ldr	r2, [r0]
   138f4:	b	13630 <__assert_fail@plt+0x1ddc>
   138f8:	add	r4, r4, #72	; 0x48
   138fc:	add	r3, sp, #24
   13900:	ldm	r4, {r0, r1}
   13904:	mov	r4, #0
   13908:	stm	r3, {r0, r1}
   1390c:	mov	r1, r6
   13910:	mov	r0, r5
   13914:	ldm	r3, {r2, r3}
   13918:	bl	131d0 <__assert_fail@plt+0x197c>
   1391c:	b	135f4 <__assert_fail@plt+0x1da0>
   13920:	ldrd	r2, [r4]
   13924:	mov	r1, r6
   13928:	mov	r0, r5
   1392c:	bl	11ebc <__assert_fail@plt+0x668>
   13930:	mov	r4, #0
   13934:	b	135f4 <__assert_fail@plt+0x1da0>
   13938:	ldr	r3, [pc, #832]	; 13c80 <__assert_fail@plt+0x242c>
   1393c:	add	r1, sp, #56	; 0x38
   13940:	ldr	r0, [sp, #100]	; 0x64
   13944:	ldrb	r3, [r3, #116]	; 0x74
   13948:	cmp	r3, #0
   1394c:	beq	13ab8 <__assert_fail@plt+0x2264>
   13950:	bl	19e6c <__assert_fail@plt+0x8618>
   13954:	lsr	r4, r0, #31
   13958:	cmp	r4, #0
   1395c:	bne	13af0 <__assert_fail@plt+0x229c>
   13960:	ldr	r3, [pc, #808]	; 13c90 <__assert_fail@plt+0x243c>
   13964:	ldr	r2, [sp, #56]	; 0x38
   13968:	ldr	r1, [pc, #804]	; 13c94 <__assert_fail@plt+0x2440>
   1396c:	ldrh	r3, [r3]
   13970:	cmp	r2, #0
   13974:	moveq	r2, r1
   13978:	strh	r3, [r5, r6]
   1397c:	mov	r1, r5
   13980:	mov	r0, #1
   13984:	bl	116ec <__printf_chk@plt>
   13988:	ldr	r0, [sp, #56]	; 0x38
   1398c:	cmp	r0, #0
   13990:	beq	135f4 <__assert_fail@plt+0x1da0>
   13994:	bl	117dc <freecon@plt>
   13998:	b	135f4 <__assert_fail@plt+0x1da0>
   1399c:	mov	r1, r6
   139a0:	mov	r0, r5
   139a4:	mov	r2, #512	; 0x200
   139a8:	mov	r3, #0
   139ac:	bl	11f2c <__assert_fail@plt+0x6d8>
   139b0:	mov	r4, #0
   139b4:	b	135f4 <__assert_fail@plt+0x1da0>
   139b8:	ldr	r7, [pc, #704]	; 13c80 <__assert_fail@plt+0x242c>
   139bc:	mov	r0, r4
   139c0:	add	r1, r7, #104	; 0x68
   139c4:	bl	15920 <__assert_fail@plt+0x40cc>
   139c8:	mov	r4, #0
   139cc:	mov	r1, r6
   139d0:	mov	r0, r5
   139d4:	add	r2, r7, #104	; 0x68
   139d8:	strb	r4, [r7, #114]	; 0x72
   139dc:	bl	11ef8 <__assert_fail@plt+0x6a4>
   139e0:	b	135f4 <__assert_fail@plt+0x1da0>
   139e4:	mov	r0, r4
   139e8:	bl	156f4 <__assert_fail@plt+0x3ea0>
   139ec:	b	1362c <__assert_fail@plt+0x1dd8>
   139f0:	add	r4, r4, #88	; 0x58
   139f4:	add	r3, sp, #56	; 0x38
   139f8:	b	13900 <__assert_fail@plt+0x20ac>
   139fc:	add	r4, r4, #80	; 0x50
   13a00:	add	r3, sp, #40	; 0x28
   13a04:	b	13900 <__assert_fail@plt+0x20ac>
   13a08:	ldr	r0, [r4, #24]
   13a0c:	bl	1147c <getpwuid@plt>
   13a10:	cmp	r0, #0
   13a14:	bne	138f0 <__assert_fail@plt+0x209c>
   13a18:	ldr	r2, [pc, #632]	; 13c98 <__assert_fail@plt+0x2444>
   13a1c:	b	13630 <__assert_fail@plt+0x1ddc>
   13a20:	ldr	r3, [r4, #32]
   13a24:	ldr	r0, [r4, #36]	; 0x24
   13a28:	mov	r1, r6
   13a2c:	lsr	r2, r3, #12
   13a30:	orr	r2, r2, r0, lsl #20
   13a34:	uxtb	r3, r3
   13a38:	bic	r2, r2, #255	; 0xff
   13a3c:	orr	r2, r2, r3
   13a40:	mov	r0, r5
   13a44:	mov	r3, #0
   13a48:	bl	11ebc <__assert_fail@plt+0x668>
   13a4c:	mov	r4, #0
   13a50:	b	135f4 <__assert_fail@plt+0x1da0>
   13a54:	cmp	r1, #0
   13a58:	movlt	r3, #0
   13a5c:	strlt	r3, [sp, #8]
   13a60:	strlt	r3, [sp, #12]
   13a64:	add	r3, sp, #8
   13a68:	strge	r0, [sp, #8]
   13a6c:	strge	r1, [sp, #12]
   13a70:	mov	r0, r5
   13a74:	mov	r1, r6
   13a78:	ldm	r3, {r2, r3}
   13a7c:	bl	131d0 <__assert_fail@plt+0x197c>
   13a80:	mov	r4, #0
   13a84:	b	135f4 <__assert_fail@plt+0x1da0>
   13a88:	ldr	r3, [pc, #524]	; 13c9c <__assert_fail@plt+0x2448>
   13a8c:	ldr	r0, [r3]
   13a90:	ldr	r3, [r0, #20]
   13a94:	ldr	r2, [r0, #24]
   13a98:	cmp	r3, r2
   13a9c:	bcs	13be8 <__assert_fail@plt+0x2394>
   13aa0:	add	r1, r3, #1
   13aa4:	mov	r2, #63	; 0x3f
   13aa8:	str	r1, [r0, #20]
   13aac:	mov	r4, #0
   13ab0:	strb	r2, [r3]
   13ab4:	b	135f4 <__assert_fail@plt+0x1da0>
   13ab8:	bl	19e84 <__assert_fail@plt+0x8630>
   13abc:	lsr	r4, r0, #31
   13ac0:	b	13958 <__assert_fail@plt+0x2104>
   13ac4:	mov	r1, r4
   13ac8:	ldr	r0, [sp, #100]	; 0x64
   13acc:	bl	14d60 <__assert_fail@plt+0x350c>
   13ad0:	subs	r7, r0, #0
   13ad4:	beq	13c30 <__assert_fail@plt+0x23dc>
   13ad8:	bl	12fd4 <__assert_fail@plt+0x1780>
   13adc:	subs	r8, r0, #0
   13ae0:	moveq	r8, r7
   13ae4:	moveq	r4, r0
   13ae8:	movne	r4, #0
   13aec:	b	13768 <__assert_fail@plt+0x1f14>
   13af0:	bl	116b0 <__errno_location@plt>
   13af4:	mov	r2, #5
   13af8:	ldr	r1, [pc, #416]	; 13ca0 <__assert_fail@plt+0x244c>
   13afc:	ldr	r7, [r0]
   13b00:	mov	r0, #0
   13b04:	bl	114e8 <dcgettext@plt>
   13b08:	ldr	r1, [sp, #100]	; 0x64
   13b0c:	mov	r8, r0
   13b10:	mov	r0, #4
   13b14:	bl	19b10 <__assert_fail@plt+0x82bc>
   13b18:	mov	r2, r8
   13b1c:	mov	r1, r7
   13b20:	mov	r3, r0
   13b24:	mov	r0, #0
   13b28:	bl	115a8 <error@plt>
   13b2c:	ldr	r3, [pc, #348]	; 13c90 <__assert_fail@plt+0x243c>
   13b30:	mov	r1, #0
   13b34:	str	r1, [sp, #56]	; 0x38
   13b38:	ldrh	r3, [r3]
   13b3c:	ldr	r2, [pc, #336]	; 13c94 <__assert_fail@plt+0x2440>
   13b40:	strh	r3, [r5, r6]
   13b44:	b	1397c <__assert_fail@plt+0x2128>
   13b48:	mov	r1, r6
   13b4c:	mov	r0, r5
   13b50:	ldr	r2, [pc, #332]	; 13ca4 <__assert_fail@plt+0x2450>
   13b54:	bl	11ef8 <__assert_fail@plt+0x6a4>
   13b58:	mov	r4, #0
   13b5c:	b	135f4 <__assert_fail@plt+0x1da0>
   13b60:	ldr	r2, [r4, #32]
   13b64:	ldr	r0, [r4, #36]	; 0x24
   13b68:	lsr	r3, r2, #12
   13b6c:	orr	r3, r3, r0, lsl #20
   13b70:	bic	r3, r3, #255	; 0xff
   13b74:	uxtb	r2, r2
   13b78:	orr	r2, r3, r2
   13b7c:	mov	r1, r6
   13b80:	mov	r0, r5
   13b84:	mov	r3, #0
   13b88:	bl	11f2c <__assert_fail@plt+0x6d8>
   13b8c:	mov	r4, #0
   13b90:	b	135f4 <__assert_fail@plt+0x1da0>
   13b94:	ldr	r2, [r4]
   13b98:	ldr	r0, [r4, #4]
   13b9c:	b	13b68 <__assert_fail@plt+0x2314>
   13ba0:	bl	116b0 <__errno_location@plt>
   13ba4:	mov	r2, #5
   13ba8:	ldr	r1, [pc, #248]	; 13ca8 <__assert_fail@plt+0x2454>
   13bac:	mov	r4, #1
   13bb0:	ldr	r8, [pc, #220]	; 13c94 <__assert_fail@plt+0x2440>
   13bb4:	ldr	r9, [r0]
   13bb8:	mov	r0, r7
   13bbc:	bl	114e8 <dcgettext@plt>
   13bc0:	ldr	r1, [sp, #100]	; 0x64
   13bc4:	mov	sl, r0
   13bc8:	mov	r0, #4
   13bcc:	bl	19b10 <__assert_fail@plt+0x82bc>
   13bd0:	mov	r2, sl
   13bd4:	mov	r1, r9
   13bd8:	mov	r3, r0
   13bdc:	mov	r0, r7
   13be0:	bl	115a8 <error@plt>
   13be4:	b	13768 <__assert_fail@plt+0x1f14>
   13be8:	mov	r1, #63	; 0x3f
   13bec:	bl	11758 <__overflow@plt>
   13bf0:	mov	r4, #0
   13bf4:	b	135f4 <__assert_fail@plt+0x1da0>
   13bf8:	ldr	r2, [r4, #32]
   13bfc:	ldr	r3, [r4, #36]	; 0x24
   13c00:	bic	r3, r3, #4080	; 0xff0
   13c04:	lsl	r2, r2, #12
   13c08:	bic	r3, r3, #15
   13c0c:	orr	r2, r3, r2, lsr #20
   13c10:	mov	r1, r6
   13c14:	mov	r0, r5
   13c18:	mov	r3, #0
   13c1c:	bl	11f2c <__assert_fail@plt+0x6d8>
   13c20:	mov	r4, #0
   13c24:	b	135f4 <__assert_fail@plt+0x1da0>
   13c28:	ldm	r4, {r2, r3}
   13c2c:	b	13c00 <__assert_fail@plt+0x23ac>
   13c30:	mov	r4, #1
   13c34:	ldr	r8, [pc, #88]	; 13c94 <__assert_fail@plt+0x2440>
   13c38:	b	13768 <__assert_fail@plt+0x1f14>
   13c3c:	bl	116b0 <__errno_location@plt>
   13c40:	mov	r2, #5
   13c44:	ldr	r1, [pc, #96]	; 13cac <__assert_fail@plt+0x2458>
   13c48:	mov	r4, #1
   13c4c:	ldr	r5, [r0]
   13c50:	mov	r0, r7
   13c54:	bl	114e8 <dcgettext@plt>
   13c58:	ldr	r1, [sp, #100]	; 0x64
   13c5c:	mov	r6, r0
   13c60:	mov	r0, #4
   13c64:	bl	19b10 <__assert_fail@plt+0x82bc>
   13c68:	mov	r2, r6
   13c6c:	mov	r1, r5
   13c70:	mov	r3, r0
   13c74:	mov	r0, r7
   13c78:	bl	115a8 <error@plt>
   13c7c:	b	135f4 <__assert_fail@plt+0x1da0>
   13c80:	strdeq	pc, [r2], -r8
   13c84:	ldrdeq	sp, [r1], -r8
   13c88:	andeq	ip, r1, r4, asr #23
   13c8c:	ldrdeq	sp, [r1], -r0
   13c90:	strdeq	sp, [r1], -r4
   13c94:	andeq	sp, r1, ip, lsr #1
   13c98:	andeq	sp, r1, r4, lsr #1
   13c9c:	andeq	pc, r2, ip, ror #3
   13ca0:	strdeq	sp, [r1], -r8
   13ca4:	andeq	ip, r1, r8, asr #23
   13ca8:	ldrdeq	sp, [r1], -ip
   13cac:	strheq	sp, [r1], -r0
   13cb0:	push	{r4, r5, r6, lr}
   13cb4:	mov	r5, r0
   13cb8:	ldr	r1, [pc, #68]	; 13d04 <__assert_fail@plt+0x24b0>
   13cbc:	add	r0, r0, #1
   13cc0:	bl	11848 <strspn@plt>
   13cc4:	ldr	r1, [pc, #60]	; 13d08 <__assert_fail@plt+0x24b4>
   13cc8:	add	r0, r0, #1
   13ccc:	add	r4, r5, r0
   13cd0:	mov	r0, r4
   13cd4:	bl	11848 <strspn@plt>
   13cd8:	ldrb	r3, [r4, r0]
   13cdc:	add	r6, r4, r0
   13ce0:	cmp	r3, #46	; 0x2e
   13ce4:	bne	13cfc <__assert_fail@plt+0x24a8>
   13ce8:	add	r0, r6, #1
   13cec:	ldr	r1, [pc, #20]	; 13d08 <__assert_fail@plt+0x24b4>
   13cf0:	bl	11848 <strspn@plt>
   13cf4:	add	r0, r0, #1
   13cf8:	add	r6, r6, r0
   13cfc:	sub	r0, r6, r5
   13d00:	pop	{r4, r5, r6, pc}
   13d04:	andeq	ip, r1, r8, asr #19
   13d08:	ldrdeq	ip, [r1], -r0
   13d0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d10:	sub	sp, sp, #36	; 0x24
   13d14:	mov	r4, r0
   13d18:	str	r1, [sp, #24]
   13d1c:	str	r2, [sp, #28]
   13d20:	str	r3, [sp, #20]
   13d24:	bl	11674 <strlen@plt>
   13d28:	add	r0, r0, #4
   13d2c:	bl	1a860 <__assert_fail@plt+0x900c>
   13d30:	ldrb	fp, [r4]
   13d34:	cmp	fp, #0
   13d38:	mov	r9, r0
   13d3c:	beq	142f4 <__assert_fail@plt+0x2aa0>
   13d40:	ldr	r6, [pc, #1524]	; 1433c <__assert_fail@plt+0x2ae8>
   13d44:	ldr	sl, [pc, #1524]	; 14340 <__assert_fail@plt+0x2aec>
   13d48:	mov	r7, #0
   13d4c:	b	13d90 <__assert_fail@plt+0x253c>
   13d50:	ldrb	r3, [sl, #117]	; 0x75
   13d54:	cmp	r3, #0
   13d58:	bne	13e6c <__assert_fail@plt+0x2618>
   13d5c:	ldr	r0, [r6]
   13d60:	ldr	r3, [r0, #20]
   13d64:	ldr	r2, [r0, #24]
   13d68:	cmp	r3, r2
   13d6c:	bcs	13fac <__assert_fail@plt+0x2758>
   13d70:	mov	r5, r4
   13d74:	add	r4, r4, #1
   13d78:	add	r2, r3, #1
   13d7c:	str	r2, [r0, #20]
   13d80:	strb	fp, [r3]
   13d84:	ldrb	fp, [r5, #1]
   13d88:	cmp	fp, #0
   13d8c:	beq	13dd4 <__assert_fail@plt+0x2580>
   13d90:	cmp	fp, #37	; 0x25
   13d94:	beq	13dfc <__assert_fail@plt+0x25a8>
   13d98:	cmp	fp, #92	; 0x5c
   13d9c:	beq	13d50 <__assert_fail@plt+0x24fc>
   13da0:	ldr	r0, [r6]
   13da4:	ldr	r3, [r0, #20]
   13da8:	ldr	r2, [r0, #24]
   13dac:	cmp	r3, r2
   13db0:	bcs	13fac <__assert_fail@plt+0x2758>
   13db4:	mov	r5, r4
   13db8:	add	r2, r3, #1
   13dbc:	str	r2, [r0, #20]
   13dc0:	strb	fp, [r3]
   13dc4:	ldrb	fp, [r5, #1]
   13dc8:	add	r4, r4, #1
   13dcc:	cmp	fp, #0
   13dd0:	bne	13d90 <__assert_fail@plt+0x253c>
   13dd4:	mov	r0, r9
   13dd8:	bl	15928 <__assert_fail@plt+0x40d4>
   13ddc:	ldr	r2, [pc, #1368]	; 1433c <__assert_fail@plt+0x2ae8>
   13de0:	ldr	r3, [pc, #1372]	; 14344 <__assert_fail@plt+0x2af0>
   13de4:	ldr	r1, [r2]
   13de8:	ldr	r0, [r3]
   13dec:	bl	11428 <fputs_unlocked@plt>
   13df0:	mov	r0, r7
   13df4:	add	sp, sp, #36	; 0x24
   13df8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dfc:	mov	r0, r4
   13e00:	bl	13cb0 <__assert_fail@plt+0x245c>
   13e04:	mov	r1, r4
   13e08:	ldrb	fp, [r4, r0]
   13e0c:	mov	r8, r0
   13e10:	mov	r2, r0
   13e14:	mov	r0, r9
   13e18:	bl	114b8 <memcpy@plt>
   13e1c:	cmp	fp, #37	; 0x25
   13e20:	add	r5, r4, r8
   13e24:	beq	13e38 <__assert_fail@plt+0x25e4>
   13e28:	bhi	13ee4 <__assert_fail@plt+0x2690>
   13e2c:	cmp	fp, #0
   13e30:	subeq	r5, r5, #1
   13e34:	bne	13f08 <__assert_fail@plt+0x26b4>
   13e38:	cmp	r8, #1
   13e3c:	bhi	142fc <__assert_fail@plt+0x2aa8>
   13e40:	ldr	r0, [r6]
   13e44:	ldr	r3, [r0, #20]
   13e48:	ldr	r2, [r0, #24]
   13e4c:	cmp	r3, r2
   13e50:	bcs	14258 <__assert_fail@plt+0x2a04>
   13e54:	add	r2, r3, #1
   13e58:	str	r2, [r0, #20]
   13e5c:	mov	r2, #37	; 0x25
   13e60:	add	r4, r5, #1
   13e64:	strb	r2, [r3]
   13e68:	b	13d84 <__assert_fail@plt+0x2530>
   13e6c:	ldrb	r8, [r4, #1]
   13e70:	sub	r1, r8, #48	; 0x30
   13e74:	uxtb	r3, r1
   13e78:	cmp	r3, #7
   13e7c:	bhi	13f48 <__assert_fail@plt+0x26f4>
   13e80:	ldrb	r3, [r4, #2]
   13e84:	add	r0, r4, #2
   13e88:	sub	r3, r3, #48	; 0x30
   13e8c:	uxtb	r2, r3
   13e90:	cmp	r2, #7
   13e94:	bhi	142d4 <__assert_fail@plt+0x2a80>
   13e98:	ldrb	r2, [r4, #3]
   13e9c:	add	r1, r3, r1, lsl #3
   13ea0:	add	r0, r4, #3
   13ea4:	sub	r3, r2, #48	; 0x30
   13ea8:	uxtb	r2, r3
   13eac:	cmp	r2, #7
   13eb0:	bhi	142d4 <__assert_fail@plt+0x2a80>
   13eb4:	add	r1, r3, r1, lsl #3
   13eb8:	add	r4, r4, #4
   13ebc:	ldr	r0, [r6]
   13ec0:	ldr	r3, [r0, #20]
   13ec4:	ldr	r2, [r0, #24]
   13ec8:	cmp	r3, r2
   13ecc:	addcc	r2, r3, #1
   13ed0:	strcc	r2, [r0, #20]
   13ed4:	strbcc	r1, [r3]
   13ed8:	bcs	142c8 <__assert_fail@plt+0x2a74>
   13edc:	sub	r5, r4, #1
   13ee0:	b	13d84 <__assert_fail@plt+0x2530>
   13ee4:	cmp	fp, #72	; 0x48
   13ee8:	beq	13ef4 <__assert_fail@plt+0x26a0>
   13eec:	cmp	fp, #76	; 0x4c
   13ef0:	bne	13f08 <__assert_fail@plt+0x26b4>
   13ef4:	ldr	r3, [sp, #20]
   13ef8:	ldr	r2, [pc, #1096]	; 14348 <__assert_fail@plt+0x2af4>
   13efc:	cmp	r3, r2
   13f00:	ldrb	r3, [r5, #1]
   13f04:	beq	14184 <__assert_fail@plt+0x2930>
   13f08:	mov	r2, #0
   13f0c:	ldr	r3, [sp, #72]	; 0x48
   13f10:	mov	r1, r8
   13f14:	str	r3, [sp, #8]
   13f18:	ldr	r3, [sp, #28]
   13f1c:	mov	r0, r9
   13f20:	str	r3, [sp, #4]
   13f24:	ldr	r3, [sp, #24]
   13f28:	ldr	ip, [sp, #20]
   13f2c:	str	r3, [sp]
   13f30:	mov	r3, fp
   13f34:	blx	ip
   13f38:	add	r4, r5, #1
   13f3c:	orr	r7, r7, r0
   13f40:	uxtb	r7, r7
   13f44:	b	13d84 <__assert_fail@plt+0x2530>
   13f48:	cmp	r8, #120	; 0x78
   13f4c:	add	r5, r4, #1
   13f50:	beq	141a4 <__assert_fail@plt+0x2950>
   13f54:	cmp	r8, #0
   13f58:	bne	13fc0 <__assert_fail@plt+0x276c>
   13f5c:	mov	r2, #5
   13f60:	ldr	r1, [pc, #996]	; 1434c <__assert_fail@plt+0x2af8>
   13f64:	mov	r0, r8
   13f68:	bl	114e8 <dcgettext@plt>
   13f6c:	mov	r1, r8
   13f70:	mov	r2, r0
   13f74:	mov	r0, r8
   13f78:	bl	115a8 <error@plt>
   13f7c:	ldr	r0, [r6]
   13f80:	ldr	r3, [r0, #20]
   13f84:	ldr	r2, [r0, #24]
   13f88:	cmp	r3, r2
   13f8c:	bcs	142dc <__assert_fail@plt+0x2a88>
   13f90:	mov	r2, r5
   13f94:	add	r1, r3, #1
   13f98:	mov	r5, r4
   13f9c:	str	r1, [r0, #20]
   13fa0:	mov	r4, r2
   13fa4:	strb	fp, [r3]
   13fa8:	b	13d84 <__assert_fail@plt+0x2530>
   13fac:	mov	r1, fp
   13fb0:	mov	r5, r4
   13fb4:	bl	11758 <__overflow@plt>
   13fb8:	add	r4, r4, #1
   13fbc:	b	13d84 <__assert_fail@plt+0x2530>
   13fc0:	sub	r3, r8, #34	; 0x22
   13fc4:	mov	fp, r8
   13fc8:	cmp	r3, #84	; 0x54
   13fcc:	ldrls	pc, [pc, r3, lsl #2]
   13fd0:	b	1412c <__assert_fail@plt+0x28d8>
   13fd4:	andeq	r4, r1, r0, asr r1
   13fd8:	andeq	r4, r1, ip, lsr #2
   13fdc:	andeq	r4, r1, ip, lsr #2
   13fe0:	andeq	r4, r1, ip, lsr #2
   13fe4:	andeq	r4, r1, ip, lsr #2
   13fe8:	andeq	r4, r1, ip, lsr #2
   13fec:	andeq	r4, r1, ip, lsr #2
   13ff0:	andeq	r4, r1, ip, lsr #2
   13ff4:	andeq	r4, r1, ip, lsr #2
   13ff8:	andeq	r4, r1, ip, lsr #2
   13ffc:	andeq	r4, r1, ip, lsr #2
   14000:	andeq	r4, r1, ip, lsr #2
   14004:	andeq	r4, r1, ip, lsr #2
   14008:	andeq	r4, r1, ip, lsr #2
   1400c:	andeq	r4, r1, ip, lsr #2
   14010:	andeq	r4, r1, ip, lsr #2
   14014:	andeq	r4, r1, ip, lsr #2
   14018:	andeq	r4, r1, ip, lsr #2
   1401c:	andeq	r4, r1, ip, lsr #2
   14020:	andeq	r4, r1, ip, lsr #2
   14024:	andeq	r4, r1, ip, lsr #2
   14028:	andeq	r4, r1, ip, lsr #2
   1402c:	andeq	r4, r1, ip, lsr #2
   14030:	andeq	r4, r1, ip, lsr #2
   14034:	andeq	r4, r1, ip, lsr #2
   14038:	andeq	r4, r1, ip, lsr #2
   1403c:	andeq	r4, r1, ip, lsr #2
   14040:	andeq	r4, r1, ip, lsr #2
   14044:	andeq	r4, r1, ip, lsr #2
   14048:	andeq	r4, r1, ip, lsr #2
   1404c:	andeq	r4, r1, ip, lsr #2
   14050:	andeq	r4, r1, ip, lsr #2
   14054:	andeq	r4, r1, ip, lsr #2
   14058:	andeq	r4, r1, ip, lsr #2
   1405c:	andeq	r4, r1, ip, lsr #2
   14060:	andeq	r4, r1, ip, lsr #2
   14064:	andeq	r4, r1, ip, lsr #2
   14068:	andeq	r4, r1, ip, lsr #2
   1406c:	andeq	r4, r1, ip, lsr #2
   14070:	andeq	r4, r1, ip, lsr #2
   14074:	andeq	r4, r1, ip, lsr #2
   14078:	andeq	r4, r1, ip, lsr #2
   1407c:	andeq	r4, r1, ip, lsr #2
   14080:	andeq	r4, r1, ip, lsr #2
   14084:	andeq	r4, r1, ip, lsr #2
   14088:	andeq	r4, r1, ip, lsr #2
   1408c:	andeq	r4, r1, ip, lsr #2
   14090:	andeq	r4, r1, ip, lsr #2
   14094:	andeq	r4, r1, ip, lsr #2
   14098:	andeq	r4, r1, ip, lsr #2
   1409c:	andeq	r4, r1, ip, lsr #2
   140a0:	andeq	r4, r1, ip, lsr #2
   140a4:	andeq	r4, r1, ip, lsr #2
   140a8:	andeq	r4, r1, ip, lsr #2
   140ac:	andeq	r4, r1, ip, lsr #2
   140b0:	andeq	r4, r1, ip, lsr #2
   140b4:	andeq	r4, r1, ip, lsr #2
   140b8:	andeq	r4, r1, ip, lsr #2
   140bc:	andeq	r4, r1, r0, asr r1
   140c0:	andeq	r4, r1, ip, lsr #2
   140c4:	andeq	r4, r1, ip, lsr #2
   140c8:	andeq	r4, r1, ip, lsr #2
   140cc:	andeq	r4, r1, ip, lsr #2
   140d0:			; <UNDEFINED> instruction: 0x000142bc
   140d4:	andeq	r4, r1, ip, lsl #5
   140d8:	andeq	r4, r1, ip, lsr #2
   140dc:	andeq	r4, r1, ip, lsr #2
   140e0:	muleq	r1, r8, r2
   140e4:	andeq	r4, r1, r4, lsr #5
   140e8:	andeq	r4, r1, ip, lsr #2
   140ec:	andeq	r4, r1, ip, lsr #2
   140f0:	andeq	r4, r1, ip, lsr #2
   140f4:	andeq	r4, r1, ip, lsr #2
   140f8:	andeq	r4, r1, ip, lsr #2
   140fc:	andeq	r4, r1, ip, lsr #2
   14100:	andeq	r4, r1, ip, lsr #2
   14104:			; <UNDEFINED> instruction: 0x000142b0
   14108:	andeq	r4, r1, ip, lsr #2
   1410c:	andeq	r4, r1, ip, lsr #2
   14110:	andeq	r4, r1, ip, lsr #2
   14114:	andeq	r4, r1, r4, ror r2
   14118:	andeq	r4, r1, ip, lsr #2
   1411c:	andeq	r4, r1, r0, lsl #5
   14120:	andeq	r4, r1, ip, lsr #2
   14124:	andeq	r4, r1, r8, ror #4
   14128:	mov	fp, r8
   1412c:	mov	r2, #5
   14130:	ldr	r1, [pc, #536]	; 14350 <__assert_fail@plt+0x2afc>
   14134:	mov	r0, #0
   14138:	bl	114e8 <dcgettext@plt>
   1413c:	mov	r1, #0
   14140:	mov	r3, r8
   14144:	mov	r2, r0
   14148:	mov	r0, r1
   1414c:	bl	115a8 <error@plt>
   14150:	ldr	r0, [r6]
   14154:	ldr	r3, [r0, #20]
   14158:	ldr	r2, [r0, #24]
   1415c:	cmp	r3, r2
   14160:	addcc	r2, r3, #1
   14164:	strcc	r2, [r0, #20]
   14168:	addcc	r4, r4, #2
   1416c:	strbcc	r8, [r3]
   14170:	bcc	13d84 <__assert_fail@plt+0x2530>
   14174:	mov	r1, fp
   14178:	bl	11758 <__overflow@plt>
   1417c:	add	r4, r4, #2
   14180:	b	13d84 <__assert_fail@plt+0x2530>
   14184:	cmp	r3, #114	; 0x72
   14188:	cmpne	r3, #100	; 0x64
   1418c:	moveq	r2, #1
   14190:	movne	r2, #0
   14194:	moveq	r2, fp
   14198:	addeq	r5, r5, #1
   1419c:	moveq	fp, r3
   141a0:	b	13f0c <__assert_fail@plt+0x26b8>
   141a4:	bl	11644 <__ctype_b_loc@plt>
   141a8:	ldrb	r1, [r4, #2]
   141ac:	lsl	r2, r1, #1
   141b0:	ldr	r3, [r0]
   141b4:	ldrh	r2, [r3, r2]
   141b8:	tst	r2, #4096	; 0x1000
   141bc:	beq	14128 <__assert_fail@plt+0x28d4>
   141c0:	sub	r2, r1, #97	; 0x61
   141c4:	cmp	r2, #5
   141c8:	subls	r1, r1, #87	; 0x57
   141cc:	bls	141e0 <__assert_fail@plt+0x298c>
   141d0:	sub	r2, r1, #65	; 0x41
   141d4:	cmp	r2, #5
   141d8:	subls	r1, r1, #55	; 0x37
   141dc:	subhi	r1, r1, #48	; 0x30
   141e0:	ldrb	r2, [r4, #3]
   141e4:	lsl	r0, r2, #1
   141e8:	ldrh	r3, [r3, r0]
   141ec:	tst	r3, #4096	; 0x1000
   141f0:	addeq	r5, r4, #2
   141f4:	beq	14224 <__assert_fail@plt+0x29d0>
   141f8:	sub	r3, r2, #97	; 0x61
   141fc:	cmp	r3, #5
   14200:	add	r5, r4, #3
   14204:	lsl	r1, r1, #4
   14208:	subls	r2, r2, #87	; 0x57
   1420c:	bls	14220 <__assert_fail@plt+0x29cc>
   14210:	sub	r3, r2, #65	; 0x41
   14214:	cmp	r3, #5
   14218:	subls	r2, r2, #55	; 0x37
   1421c:	subhi	r2, r2, #48	; 0x30
   14220:	add	r1, r2, r1
   14224:	ldr	r0, [r6]
   14228:	ldr	r3, [r0, #20]
   1422c:	ldr	r2, [r0, #24]
   14230:	cmp	r3, r2
   14234:	addcc	r2, r3, #1
   14238:	strcc	r2, [r0, #20]
   1423c:	addcc	r4, r5, #1
   14240:	strbcc	r1, [r3]
   14244:	bcc	13d84 <__assert_fail@plt+0x2530>
   14248:	uxtb	r1, r1
   1424c:	bl	11758 <__overflow@plt>
   14250:	add	r4, r5, #1
   14254:	b	13d84 <__assert_fail@plt+0x2530>
   14258:	mov	r1, #37	; 0x25
   1425c:	bl	11758 <__overflow@plt>
   14260:	add	r4, r5, #1
   14264:	b	13d84 <__assert_fail@plt+0x2530>
   14268:	mov	fp, #11
   1426c:	mov	r8, fp
   14270:	b	14150 <__assert_fail@plt+0x28fc>
   14274:	mov	fp, #13
   14278:	mov	r8, fp
   1427c:	b	14150 <__assert_fail@plt+0x28fc>
   14280:	mov	fp, #9
   14284:	mov	r8, fp
   14288:	b	14150 <__assert_fail@plt+0x28fc>
   1428c:	mov	fp, #8
   14290:	mov	r8, fp
   14294:	b	14150 <__assert_fail@plt+0x28fc>
   14298:	mov	fp, #27
   1429c:	mov	r8, fp
   142a0:	b	14150 <__assert_fail@plt+0x28fc>
   142a4:	mov	fp, #12
   142a8:	mov	r8, fp
   142ac:	b	14150 <__assert_fail@plt+0x28fc>
   142b0:	mov	fp, #10
   142b4:	mov	r8, fp
   142b8:	b	14150 <__assert_fail@plt+0x28fc>
   142bc:	mov	fp, #7
   142c0:	mov	r8, fp
   142c4:	b	14150 <__assert_fail@plt+0x28fc>
   142c8:	uxtb	r1, r1
   142cc:	bl	11758 <__overflow@plt>
   142d0:	b	13edc <__assert_fail@plt+0x2688>
   142d4:	mov	r4, r0
   142d8:	b	13ebc <__assert_fail@plt+0x2668>
   142dc:	mov	r1, fp
   142e0:	bl	11758 <__overflow@plt>
   142e4:	mov	r3, r5
   142e8:	mov	r5, r4
   142ec:	mov	r4, r3
   142f0:	b	13d84 <__assert_fail@plt+0x2530>
   142f4:	mov	r7, fp
   142f8:	b	13dd4 <__assert_fail@plt+0x2580>
   142fc:	mov	r3, r9
   14300:	mov	r4, #0
   14304:	strb	fp, [r3, r8]!
   14308:	mov	r2, #5
   1430c:	ldr	r1, [pc, #64]	; 14354 <__assert_fail@plt+0x2b00>
   14310:	strb	r4, [r3, #1]
   14314:	mov	r0, r4
   14318:	bl	114e8 <dcgettext@plt>
   1431c:	mov	r5, r0
   14320:	mov	r0, r9
   14324:	bl	19d50 <__assert_fail@plt+0x84fc>
   14328:	mov	r2, r5
   1432c:	mov	r1, r4
   14330:	mov	r3, r0
   14334:	mov	r0, #1
   14338:	bl	115a8 <error@plt>
   1433c:	andeq	pc, r2, ip, ror #3
   14340:	strdeq	pc, [r2], -r8
   14344:	andeq	pc, r2, r4, lsl #3
   14348:	andeq	r3, r1, ip, lsr #9
   1434c:	andeq	sp, r1, r8, lsr r1
   14350:	andeq	sp, r1, ip, asr r1
   14354:	andeq	sp, r1, r0, lsr #2
   14358:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1435c:	sub	sp, sp, #420	; 0x1a4
   14360:	mov	r5, r1
   14364:	ldr	r1, [pc, #988]	; 14748 <__assert_fail@plt+0x2ef4>
   14368:	str	r2, [sp, #16]
   1436c:	str	r0, [sp, #20]
   14370:	bl	11464 <strcmp@plt>
   14374:	subs	r3, r0, #0
   14378:	str	r3, [sp, #8]
   1437c:	bne	14664 <__assert_fail@plt+0x2e10>
   14380:	add	r4, sp, #160	; 0xa0
   14384:	mov	r2, #256	; 0x100
   14388:	mov	r0, r4
   1438c:	ldr	r1, [sp, #8]
   14390:	bl	116e0 <memset@plt>
   14394:	mvn	r3, #0
   14398:	str	r3, [sp, #48]	; 0x30
   1439c:	str	r3, [sp, #52]	; 0x34
   143a0:	ldr	r3, [pc, #932]	; 1474c <__assert_fail@plt+0x2ef8>
   143a4:	mov	r6, #4096	; 0x1000
   143a8:	str	r3, [sp, #32]
   143ac:	ldr	r3, [pc, #924]	; 14750 <__assert_fail@plt+0x2efc>
   143b0:	add	r2, sp, #56	; 0x38
   143b4:	str	r2, [sp, #44]	; 0x2c
   143b8:	ldrb	r2, [r3, #118]	; 0x76
   143bc:	cmp	r2, #0
   143c0:	orrne	r6, r6, #16384	; 0x4000
   143c4:	bne	143d4 <__assert_fail@plt+0x2b80>
   143c8:	ldrb	r3, [r3, #119]	; 0x77
   143cc:	cmp	r3, #0
   143d0:	orrne	r6, r6, #8192	; 0x2000
   143d4:	ldrb	r1, [r5]
   143d8:	cmp	r1, #0
   143dc:	beq	14738 <__assert_fail@plt+0x2ee4>
   143e0:	mov	fp, #0
   143e4:	ldr	r9, [pc, #872]	; 14754 <__assert_fail@plt+0x2f00>
   143e8:	mov	r7, fp
   143ec:	mov	sl, r5
   143f0:	ldr	r8, [sp, #16]
   143f4:	b	14408 <__assert_fail@plt+0x2bb4>
   143f8:	ldrb	r1, [r0, #1]
   143fc:	add	sl, r0, #1
   14400:	cmp	r1, #0
   14404:	beq	14454 <__assert_fail@plt+0x2c00>
   14408:	cmp	r1, #37	; 0x25
   1440c:	mov	r0, sl
   14410:	bne	143f8 <__assert_fail@plt+0x2ba4>
   14414:	bl	13cb0 <__assert_fail@plt+0x245c>
   14418:	mov	r1, r7
   1441c:	ldrb	r2, [sl, r0]
   14420:	add	r0, sl, r0
   14424:	sub	r3, r2, #65	; 0x41
   14428:	cmp	r2, #0
   1442c:	uxtb	r3, r3
   14430:	beq	14454 <__assert_fail@plt+0x2c00>
   14434:	cmp	r3, #57	; 0x39
   14438:	add	r2, r9, r3, lsl #1
   1443c:	add	sl, r0, #1
   14440:	ldrhls	r1, [r2, #20]
   14444:	orr	fp, fp, r1
   14448:	ldrb	r1, [r0, #1]
   1444c:	cmp	r1, #0
   14450:	bne	14408 <__assert_fail@plt+0x2bb4>
   14454:	str	r8, [sp, #16]
   14458:	mov	r3, fp
   1445c:	str	r4, [sp]
   14460:	ldr	r1, [sp, #32]
   14464:	ldr	r0, [sp, #8]
   14468:	mov	r2, r6
   1446c:	bl	11734 <statx@plt>
   14470:	subs	r3, r0, #0
   14474:	str	r3, [sp, #32]
   14478:	blt	146b4 <__assert_fail@plt+0x2e60>
   1447c:	ldr	lr, [sp, #296]	; 0x128
   14480:	ldr	r8, [pc, #720]	; 14758 <__assert_fail@plt+0x2f04>
   14484:	mov	r9, #0
   14488:	lsr	r1, lr, #24
   1448c:	lsl	r0, lr, #8
   14490:	and	r9, r9, r1
   14494:	ldr	r2, [sp, #288]	; 0x120
   14498:	mov	r1, r9
   1449c:	and	r8, r8, r0
   144a0:	ldr	r9, [pc, #692]	; 1475c <__assert_fail@plt+0x2f08>
   144a4:	mov	r3, #0
   144a8:	mov	r0, r8
   144ac:	mov	r8, #0
   144b0:	and	r8, r8, r3
   144b4:	and	r9, r9, lr
   144b8:	lsr	fp, r2, #24
   144bc:	mov	r6, r8
   144c0:	mov	r7, r9
   144c4:	ldr	r8, [pc, #652]	; 14758 <__assert_fail@plt+0x2f04>
   144c8:	mov	r9, #0
   144cc:	ldr	ip, [sp, #300]	; 0x12c
   144d0:	lsl	sl, r2, #8
   144d4:	and	r9, r9, fp
   144d8:	orr	fp, r7, r1
   144dc:	ldr	r7, [pc, #632]	; 1475c <__assert_fail@plt+0x2f08>
   144e0:	and	r8, r8, sl
   144e4:	orr	sl, r6, r0
   144e8:	mov	r6, #0
   144ec:	and	r6, r6, r3
   144f0:	and	r7, r7, r2
   144f4:	strd	sl, [sp, #24]
   144f8:	uxtb	r3, ip
   144fc:	mov	r0, r6
   14500:	mov	r1, r7
   14504:	str	r3, [sp, #36]	; 0x24
   14508:	orr	r6, r8, r0
   1450c:	orr	r7, r9, r1
   14510:	ldrd	r0, [sp, #24]
   14514:	lsr	lr, ip, #20
   14518:	lsl	r2, ip, #12
   1451c:	ldr	ip, [sp, #36]	; 0x24
   14520:	str	lr, [sp, #12]
   14524:	ldr	lr, [sp, #292]	; 0x124
   14528:	str	r2, [sp, #8]
   1452c:	orr	r0, r0, ip
   14530:	add	r3, pc, #520	; 0x208
   14534:	ldrd	r2, [r3]
   14538:	mov	r8, r0
   1453c:	mov	r9, r1
   14540:	ldrd	r0, [sp, #8]
   14544:	lsr	fp, lr, #20
   14548:	lsl	sl, lr, #12
   1454c:	uxtb	lr, lr
   14550:	orr	r6, r6, lr
   14554:	and	r0, r0, r2
   14558:	and	r1, r1, r3
   1455c:	strd	r6, [sp, #8]
   14560:	and	r6, r2, sl
   14564:	and	r7, r3, fp
   14568:	orr	r2, r8, r0
   1456c:	orr	r3, r9, r1
   14570:	mov	r0, r2
   14574:	mov	r1, r3
   14578:	mov	r2, r6
   1457c:	mov	r3, r7
   14580:	ldrd	r6, [sp, #8]
   14584:	ldrd	sl, [r4, #32]
   14588:	ldrh	ip, [r4, #28]
   1458c:	orr	r6, r6, r2
   14590:	orr	r7, r7, r3
   14594:	mov	r2, r6
   14598:	mov	r3, r7
   1459c:	ldrd	r8, [r4, #40]	; 0x28
   145a0:	ldrd	r6, [r4, #48]	; 0x30
   145a4:	strd	r0, [sp, #56]	; 0x38
   145a8:	strd	r2, [sp, #88]	; 0x58
   145ac:	ldr	r1, [sp, #176]	; 0xb0
   145b0:	ldr	r3, [sp, #184]	; 0xb8
   145b4:	ldr	r2, [sp, #164]	; 0xa4
   145b8:	ldr	r0, [sp, #180]	; 0xb4
   145bc:	strd	sl, [sp, #152]	; 0x98
   145c0:	ldr	lr, [sp, #232]	; 0xe8
   145c4:	ldr	sl, [r4, #64]	; 0x40
   145c8:	ldr	fp, [sp, #280]	; 0x118
   145cc:	strd	r6, [sp, #120]	; 0x78
   145d0:	str	ip, [sp, #72]	; 0x48
   145d4:	ldr	r6, [r4, #96]	; 0x60
   145d8:	str	r1, [sp, #76]	; 0x4c
   145dc:	and	ip, ip, #45056	; 0xb000
   145e0:	strd	r8, [sp, #104]	; 0x68
   145e4:	str	r0, [sp, #80]	; 0x50
   145e8:	str	r3, [sp, #84]	; 0x54
   145ec:	str	r2, [sp, #112]	; 0x70
   145f0:	ldr	r3, [r4, #112]	; 0x70
   145f4:	ldr	r2, [sp, #160]	; 0xa0
   145f8:	cmp	ip, #8192	; 0x2000
   145fc:	ldr	r1, [sp, #16]
   14600:	str	r3, [sp, #136]	; 0x88
   14604:	movne	r1, r5
   14608:	ldr	r3, [sp, #264]	; 0x108
   1460c:	tst	r2, #2048	; 0x800
   14610:	str	r3, [sp, #148]	; 0x94
   14614:	ldrne	r3, [sp, #248]	; 0xf8
   14618:	ldrne	r2, [r4, #80]	; 0x50
   1461c:	str	r1, [sp, #16]
   14620:	strne	r3, [sp, #52]	; 0x34
   14624:	add	r3, sp, #44	; 0x2c
   14628:	strne	r2, [sp, #48]	; 0x30
   1462c:	str	r3, [sp]
   14630:	ldr	r2, [sp, #20]
   14634:	ldr	r1, [sp, #32]
   14638:	ldr	r0, [sp, #16]
   1463c:	ldr	r3, [pc, #284]	; 14760 <__assert_fail@plt+0x2f0c>
   14640:	str	lr, [sp, #132]	; 0x84
   14644:	str	sl, [sp, #128]	; 0x80
   14648:	str	fp, [sp, #140]	; 0x8c
   1464c:	str	r6, [sp, #144]	; 0x90
   14650:	bl	13d0c <__assert_fail@plt+0x24b8>
   14654:	eor	r0, r0, #1
   14658:	uxtb	r0, r0
   1465c:	add	sp, sp, #420	; 0x1a4
   14660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14664:	add	r4, sp, #160	; 0xa0
   14668:	mov	r2, #256	; 0x100
   1466c:	mov	r1, #0
   14670:	mov	r0, r4
   14674:	bl	116e0 <memset@plt>
   14678:	ldr	r3, [pc, #208]	; 14750 <__assert_fail@plt+0x2efc>
   1467c:	mvn	r2, #0
   14680:	str	r2, [sp, #48]	; 0x30
   14684:	ldrb	r6, [r3, #116]	; 0x74
   14688:	str	r2, [sp, #52]	; 0x34
   1468c:	ldr	r2, [sp, #20]
   14690:	cmp	r6, #0
   14694:	add	r1, sp, #56	; 0x38
   14698:	str	r2, [sp, #32]
   1469c:	mvn	r2, #99	; 0x63
   146a0:	str	r1, [sp, #44]	; 0x2c
   146a4:	moveq	r6, #256	; 0x100
   146a8:	movne	r6, #0
   146ac:	str	r2, [sp, #8]
   146b0:	b	143b8 <__assert_fail@plt+0x2b64>
   146b4:	ands	r6, r6, #4096	; 0x1000
   146b8:	beq	146f0 <__assert_fail@plt+0x2e9c>
   146bc:	bl	116b0 <__errno_location@plt>
   146c0:	mov	r2, #5
   146c4:	ldr	r1, [pc, #152]	; 14764 <__assert_fail@plt+0x2f10>
   146c8:	ldr	r4, [r0]
   146cc:	mov	r0, #0
   146d0:	bl	114e8 <dcgettext@plt>
   146d4:	mov	r1, r4
   146d8:	mov	r2, r0
   146dc:	mov	r0, #0
   146e0:	bl	115a8 <error@plt>
   146e4:	mov	r0, #0
   146e8:	add	sp, sp, #420	; 0x1a4
   146ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146f0:	bl	116b0 <__errno_location@plt>
   146f4:	mov	r2, #5
   146f8:	ldr	r1, [pc, #104]	; 14768 <__assert_fail@plt+0x2f14>
   146fc:	ldr	r4, [r0]
   14700:	mov	r0, r6
   14704:	bl	114e8 <dcgettext@plt>
   14708:	ldr	r1, [sp, #20]
   1470c:	mov	r5, r0
   14710:	mov	r0, #4
   14714:	bl	19b10 <__assert_fail@plt+0x82bc>
   14718:	mov	r2, r5
   1471c:	mov	r1, r4
   14720:	mov	r3, r0
   14724:	mov	r0, r6
   14728:	bl	115a8 <error@plt>
   1472c:	mov	r0, r6
   14730:	add	sp, sp, #420	; 0x1a4
   14734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14738:	mov	fp, r1
   1473c:	b	14458 <__assert_fail@plt+0x2c04>
   14740:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   14744:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   14748:	andeq	ip, r1, r8, asr #23
   1474c:	andeq	sp, r1, r0, asr #6
   14750:	strdeq	pc, [r2], -r8
   14754:	andeq	ip, r1, r8, asr #19
   14758:	andeq	pc, pc, r0, lsl #30
   1475c:			; <UNDEFINED> instruction: 0xfffff000
   14760:	andeq	r3, r1, ip, lsr #9
   14764:	andeq	sp, r1, r0, lsl #3
   14768:	muleq	r1, ip, r1
   1476c:	cmp	r0, #0
   14770:	push	{r4, r5, r6, lr}
   14774:	mov	r4, r1
   14778:	beq	14790 <__assert_fail@plt+0x2f3c>
   1477c:	cmp	r1, #0
   14780:	beq	148a0 <__assert_fail@plt+0x304c>
   14784:	ldr	r0, [pc, #312]	; 148c4 <__assert_fail@plt+0x3070>
   14788:	pop	{r4, r5, r6, lr}
   1478c:	b	1ad8c <__assert_fail@plt+0x9538>
   14790:	cmp	r1, #0
   14794:	beq	147b0 <__assert_fail@plt+0x2f5c>
   14798:	bl	11458 <is_selinux_enabled@plt>
   1479c:	cmp	r0, #0
   147a0:	ble	148b8 <__assert_fail@plt+0x3064>
   147a4:	ldr	r0, [pc, #284]	; 148c8 <__assert_fail@plt+0x3074>
   147a8:	pop	{r4, r5, r6, lr}
   147ac:	b	1ad8c <__assert_fail@plt+0x9538>
   147b0:	ldr	r1, [pc, #276]	; 148cc <__assert_fail@plt+0x3078>
   147b4:	mov	r5, r2
   147b8:	mov	r2, #5
   147bc:	bl	114e8 <dcgettext@plt>
   147c0:	bl	1ad8c <__assert_fail@plt+0x9538>
   147c4:	cmp	r5, #0
   147c8:	movne	r2, #5
   147cc:	ldrne	r1, [pc, #252]	; 148d0 <__assert_fail@plt+0x307c>
   147d0:	moveq	r2, #5
   147d4:	ldreq	r1, [pc, #248]	; 148d4 <__assert_fail@plt+0x3080>
   147d8:	mov	r6, r0
   147dc:	movne	r0, r4
   147e0:	moveq	r0, r5
   147e4:	bl	114e8 <dcgettext@plt>
   147e8:	mov	r1, r6
   147ec:	mov	r2, r0
   147f0:	ldr	r0, [pc, #224]	; 148d8 <__assert_fail@plt+0x3084>
   147f4:	bl	1ae1c <__assert_fail@plt+0x95c8>
   147f8:	mov	r5, r0
   147fc:	mov	r0, r6
   14800:	bl	15928 <__assert_fail@plt+0x40d4>
   14804:	mov	r2, #5
   14808:	ldr	r1, [pc, #204]	; 148dc <__assert_fail@plt+0x3088>
   1480c:	mov	r0, #0
   14810:	bl	114e8 <dcgettext@plt>
   14814:	mov	r1, r5
   14818:	mov	r2, r0
   1481c:	ldr	r0, [pc, #180]	; 148d8 <__assert_fail@plt+0x3084>
   14820:	bl	1ae1c <__assert_fail@plt+0x95c8>
   14824:	mov	r4, r0
   14828:	mov	r0, r5
   1482c:	bl	15928 <__assert_fail@plt+0x40d4>
   14830:	bl	11458 <is_selinux_enabled@plt>
   14834:	cmp	r0, #0
   14838:	ble	1486c <__assert_fail@plt+0x3018>
   1483c:	mov	r2, #5
   14840:	ldr	r1, [pc, #152]	; 148e0 <__assert_fail@plt+0x308c>
   14844:	mov	r0, #0
   14848:	bl	114e8 <dcgettext@plt>
   1484c:	mov	r1, r4
   14850:	mov	r2, r0
   14854:	ldr	r0, [pc, #124]	; 148d8 <__assert_fail@plt+0x3084>
   14858:	bl	1ae1c <__assert_fail@plt+0x95c8>
   1485c:	mov	r5, r0
   14860:	mov	r0, r4
   14864:	bl	15928 <__assert_fail@plt+0x40d4>
   14868:	mov	r4, r5
   1486c:	mov	r2, #5
   14870:	ldr	r1, [pc, #108]	; 148e4 <__assert_fail@plt+0x3090>
   14874:	mov	r0, #0
   14878:	bl	114e8 <dcgettext@plt>
   1487c:	mov	r1, r4
   14880:	mov	r2, r0
   14884:	ldr	r0, [pc, #76]	; 148d8 <__assert_fail@plt+0x3084>
   14888:	bl	1ae1c <__assert_fail@plt+0x95c8>
   1488c:	mov	r5, r0
   14890:	mov	r0, r4
   14894:	bl	15928 <__assert_fail@plt+0x40d4>
   14898:	mov	r0, r5
   1489c:	pop	{r4, r5, r6, pc}
   148a0:	mov	r0, r1
   148a4:	mov	r2, #5
   148a8:	ldr	r1, [pc, #56]	; 148e8 <__assert_fail@plt+0x3094>
   148ac:	bl	114e8 <dcgettext@plt>
   148b0:	pop	{r4, r5, r6, lr}
   148b4:	b	1ad8c <__assert_fail@plt+0x9538>
   148b8:	ldr	r0, [pc, #44]	; 148ec <__assert_fail@plt+0x3098>
   148bc:	pop	{r4, r5, r6, lr}
   148c0:	b	1ad8c <__assert_fail@plt+0x9538>
   148c4:	andeq	ip, r1, r0, asr sl
   148c8:	andeq	ip, r1, r4, ror sl
   148cc:	andeq	sp, r1, r8, asr r2
   148d0:	muleq	r1, r4, r2
   148d4:	ldrdeq	sp, [r1], -ip
   148d8:	ldrdeq	sp, [r1], -r4
   148dc:	andeq	sp, r1, r8, lsl #6
   148e0:	andeq	sp, r1, r4, asr #6
   148e4:	andeq	sp, r1, r4, asr r3
   148e8:	andeq	sp, r1, ip, lsr #3
   148ec:	andeq	ip, r1, r8, lsr #21
   148f0:	subs	r5, r0, #0
   148f4:	push	{r7, lr}
   148f8:	sub	sp, sp, #56	; 0x38
   148fc:	beq	14938 <__assert_fail@plt+0x30e4>
   14900:	ldr	r3, [pc, #972]	; 14cd4 <__assert_fail@plt+0x3480>
   14904:	mov	r2, #5
   14908:	ldr	r1, [pc, #968]	; 14cd8 <__assert_fail@plt+0x3484>
   1490c:	mov	r0, #0
   14910:	ldr	r4, [r3]
   14914:	bl	114e8 <dcgettext@plt>
   14918:	ldr	r3, [pc, #956]	; 14cdc <__assert_fail@plt+0x3488>
   1491c:	mov	r1, #1
   14920:	ldr	r3, [r3]
   14924:	mov	r2, r0
   14928:	mov	r0, r4
   1492c:	bl	11704 <__fprintf_chk@plt>
   14930:	mov	r0, r5
   14934:	bl	1165c <exit@plt>
   14938:	mov	r2, #5
   1493c:	ldr	r1, [pc, #924]	; 14ce0 <__assert_fail@plt+0x348c>
   14940:	bl	114e8 <dcgettext@plt>
   14944:	ldr	r3, [pc, #912]	; 14cdc <__assert_fail@plt+0x3488>
   14948:	ldr	r6, [pc, #916]	; 14ce4 <__assert_fail@plt+0x3490>
   1494c:	ldr	r4, [pc, #916]	; 14ce8 <__assert_fail@plt+0x3494>
   14950:	ldr	r2, [r3]
   14954:	mov	r1, r0
   14958:	mov	r0, #1
   1495c:	bl	116ec <__printf_chk@plt>
   14960:	mov	r2, #5
   14964:	ldr	r1, [pc, #896]	; 14cec <__assert_fail@plt+0x3498>
   14968:	mov	r0, r5
   1496c:	bl	114e8 <dcgettext@plt>
   14970:	ldr	r1, [r6]
   14974:	bl	11428 <fputs_unlocked@plt>
   14978:	mov	r2, #5
   1497c:	ldr	r1, [pc, #876]	; 14cf0 <__assert_fail@plt+0x349c>
   14980:	mov	r0, r5
   14984:	bl	114e8 <dcgettext@plt>
   14988:	ldr	r1, [r6]
   1498c:	bl	11428 <fputs_unlocked@plt>
   14990:	mov	r2, #5
   14994:	ldr	r1, [pc, #856]	; 14cf4 <__assert_fail@plt+0x34a0>
   14998:	mov	r0, r5
   1499c:	bl	114e8 <dcgettext@plt>
   149a0:	ldr	r1, [r6]
   149a4:	bl	11428 <fputs_unlocked@plt>
   149a8:	mov	r2, #5
   149ac:	ldr	r1, [pc, #836]	; 14cf8 <__assert_fail@plt+0x34a4>
   149b0:	mov	r0, r5
   149b4:	bl	114e8 <dcgettext@plt>
   149b8:	ldr	r1, [r6]
   149bc:	bl	11428 <fputs_unlocked@plt>
   149c0:	mov	r2, #5
   149c4:	ldr	r1, [pc, #816]	; 14cfc <__assert_fail@plt+0x34a8>
   149c8:	mov	r0, r5
   149cc:	bl	114e8 <dcgettext@plt>
   149d0:	ldr	r1, [r6]
   149d4:	bl	11428 <fputs_unlocked@plt>
   149d8:	mov	r2, #5
   149dc:	ldr	r1, [pc, #796]	; 14d00 <__assert_fail@plt+0x34ac>
   149e0:	mov	r0, r5
   149e4:	bl	114e8 <dcgettext@plt>
   149e8:	ldr	r1, [r6]
   149ec:	bl	11428 <fputs_unlocked@plt>
   149f0:	mov	r2, #5
   149f4:	ldr	r1, [pc, #776]	; 14d04 <__assert_fail@plt+0x34b0>
   149f8:	mov	r0, r5
   149fc:	bl	114e8 <dcgettext@plt>
   14a00:	ldr	r1, [r6]
   14a04:	bl	11428 <fputs_unlocked@plt>
   14a08:	mov	r2, #5
   14a0c:	ldr	r1, [pc, #756]	; 14d08 <__assert_fail@plt+0x34b4>
   14a10:	mov	r0, r5
   14a14:	bl	114e8 <dcgettext@plt>
   14a18:	ldr	r1, [r6]
   14a1c:	bl	11428 <fputs_unlocked@plt>
   14a20:	mov	r2, #5
   14a24:	ldr	r1, [pc, #736]	; 14d0c <__assert_fail@plt+0x34b8>
   14a28:	mov	r0, r5
   14a2c:	bl	114e8 <dcgettext@plt>
   14a30:	ldr	r1, [r6]
   14a34:	bl	11428 <fputs_unlocked@plt>
   14a38:	mov	r2, #5
   14a3c:	ldr	r1, [pc, #716]	; 14d10 <__assert_fail@plt+0x34bc>
   14a40:	mov	r0, r5
   14a44:	bl	114e8 <dcgettext@plt>
   14a48:	ldr	r1, [r6]
   14a4c:	bl	11428 <fputs_unlocked@plt>
   14a50:	mov	r2, #5
   14a54:	ldr	r1, [pc, #696]	; 14d14 <__assert_fail@plt+0x34c0>
   14a58:	mov	r0, r5
   14a5c:	bl	114e8 <dcgettext@plt>
   14a60:	ldr	r1, [r6]
   14a64:	bl	11428 <fputs_unlocked@plt>
   14a68:	mov	r2, #5
   14a6c:	ldr	r1, [pc, #676]	; 14d18 <__assert_fail@plt+0x34c4>
   14a70:	mov	r0, r5
   14a74:	bl	114e8 <dcgettext@plt>
   14a78:	ldr	r1, [r6]
   14a7c:	bl	11428 <fputs_unlocked@plt>
   14a80:	mov	r2, #5
   14a84:	ldr	r1, [pc, #656]	; 14d1c <__assert_fail@plt+0x34c8>
   14a88:	mov	r0, r5
   14a8c:	bl	114e8 <dcgettext@plt>
   14a90:	ldr	r1, [r6]
   14a94:	bl	11428 <fputs_unlocked@plt>
   14a98:	mov	r2, #5
   14a9c:	ldr	r1, [pc, #636]	; 14d20 <__assert_fail@plt+0x34cc>
   14aa0:	mov	r0, r5
   14aa4:	bl	114e8 <dcgettext@plt>
   14aa8:	ldr	r1, [r6]
   14aac:	bl	11428 <fputs_unlocked@plt>
   14ab0:	mov	r2, #5
   14ab4:	ldr	r1, [pc, #616]	; 14d24 <__assert_fail@plt+0x34d0>
   14ab8:	mov	r0, r5
   14abc:	bl	114e8 <dcgettext@plt>
   14ac0:	ldr	r2, [pc, #608]	; 14d28 <__assert_fail@plt+0x34d4>
   14ac4:	mov	r1, r0
   14ac8:	mov	r0, #1
   14acc:	bl	116ec <__printf_chk@plt>
   14ad0:	mov	r2, #5
   14ad4:	ldr	r1, [pc, #592]	; 14d2c <__assert_fail@plt+0x34d8>
   14ad8:	mov	r0, r5
   14adc:	bl	114e8 <dcgettext@plt>
   14ae0:	ldr	r2, [pc, #584]	; 14d30 <__assert_fail@plt+0x34dc>
   14ae4:	mov	r1, r0
   14ae8:	mov	r0, #1
   14aec:	bl	116ec <__printf_chk@plt>
   14af0:	mov	r2, #5
   14af4:	ldr	r1, [pc, #568]	; 14d34 <__assert_fail@plt+0x34e0>
   14af8:	mov	r0, r5
   14afc:	bl	114e8 <dcgettext@plt>
   14b00:	ldr	r2, [pc, #560]	; 14d38 <__assert_fail@plt+0x34e4>
   14b04:	mov	r1, r0
   14b08:	mov	r0, #1
   14b0c:	bl	116ec <__printf_chk@plt>
   14b10:	ldm	r4!, {r0, r1, r2, r3}
   14b14:	mov	lr, sp
   14b18:	stmia	lr!, {r0, r1, r2, r3}
   14b1c:	ldm	r4!, {r0, r1, r2, r3}
   14b20:	ldr	ip, [sp]
   14b24:	stmia	lr!, {r0, r1, r2, r3}
   14b28:	cmp	ip, #0
   14b2c:	ldm	r4!, {r0, r1, r2, r3}
   14b30:	stmia	lr!, {r0, r1, r2, r3}
   14b34:	ldm	r4, {r0, r1}
   14b38:	moveq	r4, sp
   14b3c:	stm	lr, {r0, r1}
   14b40:	beq	14b70 <__assert_fail@plt+0x331c>
   14b44:	ldr	r7, [pc, #492]	; 14d38 <__assert_fail@plt+0x34e4>
   14b48:	mov	r4, sp
   14b4c:	b	14b5c <__assert_fail@plt+0x3308>
   14b50:	ldr	ip, [r4, #8]!
   14b54:	cmp	ip, #0
   14b58:	beq	14b70 <__assert_fail@plt+0x331c>
   14b5c:	mov	r1, ip
   14b60:	mov	r0, r7
   14b64:	bl	11464 <strcmp@plt>
   14b68:	cmp	r0, #0
   14b6c:	bne	14b50 <__assert_fail@plt+0x32fc>
   14b70:	ldr	r4, [r4, #4]
   14b74:	mov	r2, #5
   14b78:	cmp	r4, #0
   14b7c:	ldr	r1, [pc, #440]	; 14d3c <__assert_fail@plt+0x34e8>
   14b80:	beq	14c28 <__assert_fail@plt+0x33d4>
   14b84:	mov	r0, #0
   14b88:	bl	114e8 <dcgettext@plt>
   14b8c:	ldr	r3, [pc, #428]	; 14d40 <__assert_fail@plt+0x34ec>
   14b90:	ldr	r2, [pc, #428]	; 14d44 <__assert_fail@plt+0x34f0>
   14b94:	mov	r1, r0
   14b98:	mov	r0, #1
   14b9c:	bl	116ec <__printf_chk@plt>
   14ba0:	mov	r1, #0
   14ba4:	mov	r0, #5
   14ba8:	bl	11764 <setlocale@plt>
   14bac:	cmp	r0, #0
   14bb0:	ldreq	r7, [pc, #384]	; 14d38 <__assert_fail@plt+0x34e4>
   14bb4:	beq	14bd0 <__assert_fail@plt+0x337c>
   14bb8:	mov	r2, #3
   14bbc:	ldr	r1, [pc, #388]	; 14d48 <__assert_fail@plt+0x34f4>
   14bc0:	bl	11818 <strncmp@plt>
   14bc4:	ldr	r7, [pc, #364]	; 14d38 <__assert_fail@plt+0x34e4>
   14bc8:	cmp	r0, #0
   14bcc:	bne	14cb8 <__assert_fail@plt+0x3464>
   14bd0:	mov	r2, #5
   14bd4:	ldr	r1, [pc, #368]	; 14d4c <__assert_fail@plt+0x34f8>
   14bd8:	mov	r0, #0
   14bdc:	bl	114e8 <dcgettext@plt>
   14be0:	ldr	r3, [pc, #336]	; 14d38 <__assert_fail@plt+0x34e4>
   14be4:	ldr	r2, [pc, #340]	; 14d40 <__assert_fail@plt+0x34ec>
   14be8:	mov	r1, r0
   14bec:	mov	r0, #1
   14bf0:	bl	116ec <__printf_chk@plt>
   14bf4:	mov	r2, #5
   14bf8:	ldr	r1, [pc, #336]	; 14d50 <__assert_fail@plt+0x34fc>
   14bfc:	mov	r0, #0
   14c00:	bl	114e8 <dcgettext@plt>
   14c04:	ldr	r2, [pc, #328]	; 14d54 <__assert_fail@plt+0x3500>
   14c08:	cmp	r4, r7
   14c0c:	ldr	r3, [pc, #324]	; 14d58 <__assert_fail@plt+0x3504>
   14c10:	movne	r3, r2
   14c14:	mov	r1, r0
   14c18:	mov	r2, r4
   14c1c:	mov	r0, #1
   14c20:	bl	116ec <__printf_chk@plt>
   14c24:	b	14930 <__assert_fail@plt+0x30dc>
   14c28:	mov	r0, r4
   14c2c:	bl	114e8 <dcgettext@plt>
   14c30:	ldr	r3, [pc, #264]	; 14d40 <__assert_fail@plt+0x34ec>
   14c34:	ldr	r2, [pc, #264]	; 14d44 <__assert_fail@plt+0x34f0>
   14c38:	mov	r1, r0
   14c3c:	mov	r0, #1
   14c40:	bl	116ec <__printf_chk@plt>
   14c44:	mov	r1, r4
   14c48:	mov	r0, #5
   14c4c:	bl	11764 <setlocale@plt>
   14c50:	cmp	r0, #0
   14c54:	beq	14c6c <__assert_fail@plt+0x3418>
   14c58:	mov	r2, #3
   14c5c:	ldr	r1, [pc, #228]	; 14d48 <__assert_fail@plt+0x34f4>
   14c60:	bl	11818 <strncmp@plt>
   14c64:	cmp	r0, #0
   14c68:	bne	14cb0 <__assert_fail@plt+0x345c>
   14c6c:	mov	r2, #5
   14c70:	ldr	r1, [pc, #212]	; 14d4c <__assert_fail@plt+0x34f8>
   14c74:	mov	r0, #0
   14c78:	bl	114e8 <dcgettext@plt>
   14c7c:	ldr	r3, [pc, #180]	; 14d38 <__assert_fail@plt+0x34e4>
   14c80:	ldr	r2, [pc, #184]	; 14d40 <__assert_fail@plt+0x34ec>
   14c84:	mov	r4, r3
   14c88:	mov	r1, r0
   14c8c:	mov	r0, #1
   14c90:	bl	116ec <__printf_chk@plt>
   14c94:	ldr	r1, [pc, #180]	; 14d50 <__assert_fail@plt+0x34fc>
   14c98:	mov	r2, #5
   14c9c:	mov	r0, #0
   14ca0:	bl	114e8 <dcgettext@plt>
   14ca4:	ldr	r3, [pc, #172]	; 14d58 <__assert_fail@plt+0x3504>
   14ca8:	mov	r1, r0
   14cac:	b	14c18 <__assert_fail@plt+0x33c4>
   14cb0:	ldr	r7, [pc, #128]	; 14d38 <__assert_fail@plt+0x34e4>
   14cb4:	mov	r4, r7
   14cb8:	mov	r2, #5
   14cbc:	ldr	r1, [pc, #152]	; 14d5c <__assert_fail@plt+0x3508>
   14cc0:	mov	r0, #0
   14cc4:	bl	114e8 <dcgettext@plt>
   14cc8:	ldr	r1, [r6]
   14ccc:	bl	11428 <fputs_unlocked@plt>
   14cd0:	b	14bd0 <__assert_fail@plt+0x337c>
   14cd4:	andeq	pc, r2, r8, ror #3
   14cd8:	andeq	sp, r1, ip, lsl #7
   14cdc:	andeq	pc, r2, r8, ror r2	; <UNPREDICTABLE>
   14ce0:			; <UNDEFINED> instruction: 0x0001d3b4
   14ce4:	andeq	pc, r2, ip, ror #3
   14ce8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   14cec:	ldrdeq	sp, [r1], -r4
   14cf0:	strdeq	sp, [r1], -ip
   14cf4:	andeq	sp, r1, r8, asr #8
   14cf8:			; <UNDEFINED> instruction: 0x0001d4b8
   14cfc:	andeq	sp, r1, r0, asr #10
   14d00:	andeq	sp, r1, r4, ror #13
   14d04:	andeq	sp, r1, r4, lsl r7
   14d08:	andeq	sp, r1, ip, asr #14
   14d0c:	andeq	sp, r1, r4, asr #16
   14d10:	andeq	sp, r1, ip, lsl #19
   14d14:	andeq	sp, r1, r4, lsl #21
   14d18:	ldrdeq	sp, [r1], -r4
   14d1c:			; <UNDEFINED> instruction: 0x0001deb4
   14d20:	andeq	sp, r1, r4, lsr #31
   14d24:	andeq	lr, r1, r0, lsr #1
   14d28:	andeq	ip, r1, r4, ror sl
   14d2c:	ldrdeq	lr, [r1], -r8
   14d30:	andeq	ip, r1, r0, asr sl
   14d34:	andeq	lr, r1, ip, lsl r1
   14d38:	andeq	sp, r1, r4, lsl #7
   14d3c:	ldrdeq	lr, [r1], -ip
   14d40:	strdeq	lr, [r1], -r4
   14d44:	andeq	lr, r1, ip, lsl r2
   14d48:	andeq	lr, r1, ip, lsr #4
   14d4c:	andeq	lr, r1, r8, ror r2
   14d50:	muleq	r1, r4, r2
   14d54:	andeq	sp, r1, r0, asr #6
   14d58:	andeq	lr, r1, r8, ror #7
   14d5c:	andeq	lr, r1, r0, lsr r2
   14d60:	push	{r4, r5, r6, r7, r8, fp, lr}
   14d64:	add	fp, sp, #24
   14d68:	mov	r7, r0
   14d6c:	sub	sp, sp, #220	; 0xdc
   14d70:	sub	r0, fp, #244	; 0xf4
   14d74:	mov	r4, r1
   14d78:	bl	19d68 <__assert_fail@plt+0x8514>
   14d7c:	subs	r6, r0, #0
   14d80:	bne	14fb0 <__assert_fail@plt+0x375c>
   14d84:	ldr	r3, [r4, #16]
   14d88:	and	r3, r3, #61440	; 0xf000
   14d8c:	cmp	r3, #16384	; 0x4000
   14d90:	beq	14eec <__assert_fail@plt+0x3698>
   14d94:	mov	r0, r7
   14d98:	bl	15610 <__assert_fail@plt+0x3dbc>
   14d9c:	mov	r4, r0
   14da0:	bl	11674 <strlen@plt>
   14da4:	mov	r1, r4
   14da8:	add	r3, r0, #15
   14dac:	bic	r3, r3, #7
   14db0:	sub	sp, sp, r3
   14db4:	add	r2, r0, #1
   14db8:	mov	r0, sp
   14dbc:	bl	114b8 <memcpy@plt>
   14dc0:	mov	r7, r0
   14dc4:	mov	r0, r4
   14dc8:	bl	15928 <__assert_fail@plt+0x40d4>
   14dcc:	mov	r0, r7
   14dd0:	bl	11524 <chdir@plt>
   14dd4:	cmp	r0, #0
   14dd8:	blt	14f10 <__assert_fail@plt+0x36bc>
   14ddc:	sub	r5, fp, #236	; 0xec
   14de0:	mov	r2, r5
   14de4:	ldr	r1, [pc, #536]	; 15004 <__assert_fail@plt+0x37b0>
   14de8:	mov	r0, #3
   14dec:	bl	11800 <__xstat64@plt>
   14df0:	cmp	r0, #0
   14df4:	blt	14f68 <__assert_fail@plt+0x3714>
   14df8:	ldr	r4, [pc, #520]	; 15008 <__assert_fail@plt+0x37b4>
   14dfc:	mov	r6, #3
   14e00:	mov	r7, #104	; 0x68
   14e04:	b	14e50 <__assert_fail@plt+0x35fc>
   14e08:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   14e0c:	ldrd	r2, [fp, #-236]	; 0xffffff14
   14e10:	cmp	r1, r3
   14e14:	cmpeq	r0, r2
   14e18:	bne	14ed8 <__assert_fail@plt+0x3684>
   14e1c:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   14e20:	ldrd	r2, [fp, #-140]	; 0xffffff74
   14e24:	cmp	r1, r3
   14e28:	cmpeq	r0, r2
   14e2c:	beq	14ed8 <__assert_fail@plt+0x3684>
   14e30:	mov	r0, r4
   14e34:	bl	11524 <chdir@plt>
   14e38:	cmp	r0, #0
   14e3c:	blt	14f54 <__assert_fail@plt+0x3700>
   14e40:	mov	r2, r7
   14e44:	sub	r1, fp, #132	; 0x84
   14e48:	mov	r0, r5
   14e4c:	bl	114b8 <memcpy@plt>
   14e50:	sub	r2, fp, #132	; 0x84
   14e54:	mov	r1, r4
   14e58:	mov	r0, r6
   14e5c:	bl	11800 <__xstat64@plt>
   14e60:	cmp	r0, #0
   14e64:	bge	14e08 <__assert_fail@plt+0x35b4>
   14e68:	bl	116b0 <__errno_location@plt>
   14e6c:	ldr	r1, [pc, #408]	; 1500c <__assert_fail@plt+0x37b8>
   14e70:	mov	r2, #5
   14e74:	mov	r4, r0
   14e78:	mov	r0, #0
   14e7c:	ldr	r5, [r4]
   14e80:	bl	114e8 <dcgettext@plt>
   14e84:	ldr	r1, [pc, #380]	; 15008 <__assert_fail@plt+0x37b4>
   14e88:	mov	r6, r0
   14e8c:	mov	r0, #4
   14e90:	bl	19b10 <__assert_fail@plt+0x82bc>
   14e94:	mov	r1, r5
   14e98:	mov	r2, r6
   14e9c:	mov	r5, #0
   14ea0:	mov	r3, r0
   14ea4:	mov	r0, #0
   14ea8:	bl	115a8 <error@plt>
   14eac:	sub	r0, fp, #244	; 0xf4
   14eb0:	ldr	r6, [r4]
   14eb4:	bl	19dbc <__assert_fail@plt+0x8568>
   14eb8:	cmp	r0, #0
   14ebc:	bne	14fe0 <__assert_fail@plt+0x378c>
   14ec0:	sub	r0, fp, #244	; 0xf4
   14ec4:	bl	19dd8 <__assert_fail@plt+0x8584>
   14ec8:	str	r6, [r4]
   14ecc:	mov	r0, r5
   14ed0:	sub	sp, fp, #24
   14ed4:	pop	{r4, r5, r6, r7, r8, fp, pc}
   14ed8:	bl	1ade8 <__assert_fail@plt+0x9594>
   14edc:	mov	r5, r0
   14ee0:	bl	116b0 <__errno_location@plt>
   14ee4:	mov	r4, r0
   14ee8:	b	14eac <__assert_fail@plt+0x3658>
   14eec:	sub	r5, fp, #236	; 0xec
   14ef0:	mov	r1, r4
   14ef4:	mov	r2, #104	; 0x68
   14ef8:	mov	r0, r5
   14efc:	bl	114b8 <memcpy@plt>
   14f00:	mov	r0, r7
   14f04:	bl	11524 <chdir@plt>
   14f08:	cmp	r0, #0
   14f0c:	bge	14df8 <__assert_fail@plt+0x35a4>
   14f10:	bl	116b0 <__errno_location@plt>
   14f14:	mov	r2, #5
   14f18:	ldr	r1, [pc, #240]	; 15010 <__assert_fail@plt+0x37bc>
   14f1c:	mov	r5, r6
   14f20:	ldr	r4, [r0]
   14f24:	mov	r0, r6
   14f28:	bl	114e8 <dcgettext@plt>
   14f2c:	mov	r1, r7
   14f30:	mov	r8, r0
   14f34:	mov	r0, #4
   14f38:	bl	19b10 <__assert_fail@plt+0x82bc>
   14f3c:	mov	r2, r8
   14f40:	mov	r1, r4
   14f44:	mov	r3, r0
   14f48:	mov	r0, r6
   14f4c:	bl	115a8 <error@plt>
   14f50:	b	14ecc <__assert_fail@plt+0x3678>
   14f54:	bl	116b0 <__errno_location@plt>
   14f58:	mov	r2, #5
   14f5c:	ldr	r1, [pc, #172]	; 15010 <__assert_fail@plt+0x37bc>
   14f60:	mov	r4, r0
   14f64:	b	14e78 <__assert_fail@plt+0x3624>
   14f68:	bl	116b0 <__errno_location@plt>
   14f6c:	mov	r2, #5
   14f70:	ldr	r1, [pc, #156]	; 15014 <__assert_fail@plt+0x37c0>
   14f74:	mov	r4, r0
   14f78:	mov	r0, r6
   14f7c:	ldr	r5, [r4]
   14f80:	bl	114e8 <dcgettext@plt>
   14f84:	mov	r1, r7
   14f88:	mov	r8, r0
   14f8c:	mov	r0, #4
   14f90:	bl	19b10 <__assert_fail@plt+0x82bc>
   14f94:	mov	r1, r5
   14f98:	mov	r2, r8
   14f9c:	mov	r5, r6
   14fa0:	mov	r3, r0
   14fa4:	mov	r0, r6
   14fa8:	bl	115a8 <error@plt>
   14fac:	b	14eac <__assert_fail@plt+0x3658>
   14fb0:	bl	116b0 <__errno_location@plt>
   14fb4:	mov	r5, #0
   14fb8:	mov	r2, #5
   14fbc:	ldr	r1, [pc, #84]	; 15018 <__assert_fail@plt+0x37c4>
   14fc0:	ldr	r4, [r0]
   14fc4:	mov	r0, r5
   14fc8:	bl	114e8 <dcgettext@plt>
   14fcc:	mov	r1, r4
   14fd0:	mov	r2, r0
   14fd4:	mov	r0, r5
   14fd8:	bl	115a8 <error@plt>
   14fdc:	b	14ecc <__assert_fail@plt+0x3678>
   14fe0:	mov	r2, #5
   14fe4:	ldr	r1, [pc, #48]	; 1501c <__assert_fail@plt+0x37c8>
   14fe8:	mov	r0, #0
   14fec:	ldr	r4, [r4]
   14ff0:	bl	114e8 <dcgettext@plt>
   14ff4:	mov	r1, r4
   14ff8:	mov	r2, r0
   14ffc:	mov	r0, #1
   15000:	bl	115a8 <error@plt>
   15004:	andeq	lr, r1, r8, asr #5
   15008:	andeq	lr, r1, r4, lsl r5
   1500c:	andeq	lr, r1, r8, lsl r5
   15010:	andeq	lr, r1, ip, asr #9
   15014:	andeq	lr, r1, ip, ror #9
   15018:	andeq	lr, r1, ip, lsr #9
   1501c:	andeq	lr, r1, r8, lsr #10
   15020:	push	{r4, r5, r6, r7, r8, lr}
   15024:	subs	r7, r1, #0
   15028:	sub	sp, sp, #128	; 0x80
   1502c:	mov	r8, r0
   15030:	moveq	r4, #128	; 0x80
   15034:	beq	15048 <__assert_fail@plt+0x37f4>
   15038:	cmp	r7, #1024	; 0x400
   1503c:	addls	r4, r7, #1
   15040:	ldrhi	r4, [pc, #284]	; 15164 <__assert_fail@plt+0x3910>
   15044:	mov	r7, #1
   15048:	cmp	r4, #128	; 0x80
   1504c:	moveq	r0, r7
   15050:	orrne	r0, r7, #1
   15054:	cmp	r0, #0
   15058:	moveq	r5, r0
   1505c:	moveq	r6, sp
   15060:	bne	150a8 <__assert_fail@plt+0x3854>
   15064:	mov	r1, r6
   15068:	mov	r2, r4
   1506c:	mov	r0, r8
   15070:	bl	11548 <readlink@plt>
   15074:	subs	r1, r0, #0
   15078:	mov	r0, r5
   1507c:	blt	150d4 <__assert_fail@plt+0x3880>
   15080:	cmp	r4, r1
   15084:	bhi	150e8 <__assert_fail@plt+0x3894>
   15088:	bl	15928 <__assert_fail@plt+0x40d4>
   1508c:	cmn	r4, #-1073741823	; 0xc0000001
   15090:	lslls	r4, r4, #1
   15094:	bls	15048 <__assert_fail@plt+0x37f4>
   15098:	cmn	r4, #-2147483646	; 0x80000002
   1509c:	bhi	15120 <__assert_fail@plt+0x38cc>
   150a0:	mvn	r4, #-2147483648	; 0x80000000
   150a4:	b	15048 <__assert_fail@plt+0x37f4>
   150a8:	mov	r0, r4
   150ac:	bl	1ae94 <__assert_fail@plt+0x9640>
   150b0:	subs	r6, r0, #0
   150b4:	mov	r5, r6
   150b8:	bne	15064 <__assert_fail@plt+0x3810>
   150bc:	bl	116b0 <__errno_location@plt>
   150c0:	mov	r3, #12
   150c4:	str	r3, [r0]
   150c8:	mov	r0, r5
   150cc:	add	sp, sp, #128	; 0x80
   150d0:	pop	{r4, r5, r6, r7, r8, pc}
   150d4:	bl	15928 <__assert_fail@plt+0x40d4>
   150d8:	mov	r5, #0
   150dc:	mov	r0, r5
   150e0:	add	sp, sp, #128	; 0x80
   150e4:	pop	{r4, r5, r6, r7, r8, pc}
   150e8:	mov	r3, #0
   150ec:	cmp	r5, #0
   150f0:	strb	r3, [r6, r1]
   150f4:	beq	1513c <__assert_fail@plt+0x38e8>
   150f8:	add	r1, r1, #1
   150fc:	cmp	r4, r1
   15100:	bls	150dc <__assert_fail@plt+0x3888>
   15104:	mov	r0, r5
   15108:	bl	1aec0 <__assert_fail@plt+0x966c>
   1510c:	cmp	r0, #0
   15110:	movne	r5, r0
   15114:	mov	r0, r5
   15118:	add	sp, sp, #128	; 0x80
   1511c:	pop	{r4, r5, r6, r7, r8, pc}
   15120:	bl	116b0 <__errno_location@plt>
   15124:	mov	r5, #0
   15128:	mov	r3, #12
   1512c:	str	r3, [r0]
   15130:	mov	r0, r5
   15134:	add	sp, sp, #128	; 0x80
   15138:	pop	{r4, r5, r6, r7, r8, pc}
   1513c:	add	r4, r1, #1
   15140:	mov	r0, r4
   15144:	bl	1ae94 <__assert_fail@plt+0x9640>
   15148:	subs	r5, r0, #0
   1514c:	beq	150dc <__assert_fail@plt+0x3888>
   15150:	mov	r2, r4
   15154:	mov	r1, r6
   15158:	bl	114b8 <memcpy@plt>
   1515c:	mov	r5, r0
   15160:	b	150dc <__assert_fail@plt+0x3888>
   15164:	andeq	r0, r0, r1, lsl #8
   15168:	mov	r0, #1
   1516c:	b	148f0 <__assert_fail@plt+0x309c>
   15170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15174:	mov	r5, r1
   15178:	sub	sp, sp, #12
   1517c:	mov	r4, r2
   15180:	str	r2, [sp]
   15184:	mov	r7, r3
   15188:	mov	sl, r0
   1518c:	bl	11674 <strlen@plt>
   15190:	ldr	fp, [r5]
   15194:	cmp	fp, #0
   15198:	beq	15260 <__assert_fail@plt+0x3a0c>
   1519c:	mov	r3, #0
   151a0:	mov	r8, r0
   151a4:	str	r3, [sp, #4]
   151a8:	mov	r6, r3
   151ac:	mvn	r9, #0
   151b0:	b	151dc <__assert_fail@plt+0x3988>
   151b4:	bl	114d0 <memcmp@plt>
   151b8:	ldr	r3, [sp, #4]
   151bc:	cmp	r0, #0
   151c0:	movne	r3, #1
   151c4:	str	r3, [sp, #4]
   151c8:	ldr	fp, [r5, #4]!
   151cc:	add	r6, r6, #1
   151d0:	cmp	fp, #0
   151d4:	add	r4, r4, r7
   151d8:	beq	15238 <__assert_fail@plt+0x39e4>
   151dc:	mov	r2, r8
   151e0:	mov	r1, sl
   151e4:	mov	r0, fp
   151e8:	bl	11818 <strncmp@plt>
   151ec:	cmp	r0, #0
   151f0:	mov	r0, fp
   151f4:	bne	151c8 <__assert_fail@plt+0x3974>
   151f8:	bl	11674 <strlen@plt>
   151fc:	ldr	r3, [sp]
   15200:	mov	r2, r7
   15204:	mov	r1, r4
   15208:	cmp	r8, r0
   1520c:	mla	r0, r7, r9, r3
   15210:	beq	15250 <__assert_fail@plt+0x39fc>
   15214:	cmn	r9, #1
   15218:	moveq	r9, r6
   1521c:	beq	151c8 <__assert_fail@plt+0x3974>
   15220:	ldr	r3, [sp]
   15224:	cmp	r3, #0
   15228:	bne	151b4 <__assert_fail@plt+0x3960>
   1522c:	mov	r3, #1
   15230:	str	r3, [sp, #4]
   15234:	b	151c8 <__assert_fail@plt+0x3974>
   15238:	ldr	r3, [sp, #4]
   1523c:	cmp	r3, #0
   15240:	mvnne	r9, #1
   15244:	mov	r0, r9
   15248:	add	sp, sp, #12
   1524c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15250:	mov	r9, r6
   15254:	mov	r0, r9
   15258:	add	sp, sp, #12
   1525c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15260:	mvn	r9, #0
   15264:	b	15244 <__assert_fail@plt+0x39f0>
   15268:	push	{r4, r5, r6, lr}
   1526c:	mov	r6, r0
   15270:	ldr	r0, [r1]
   15274:	cmp	r0, #0
   15278:	beq	152b0 <__assert_fail@plt+0x3a5c>
   1527c:	mov	r4, r1
   15280:	mov	r5, #0
   15284:	b	15298 <__assert_fail@plt+0x3a44>
   15288:	ldr	r0, [r4, #4]!
   1528c:	add	r5, r5, #1
   15290:	cmp	r0, #0
   15294:	beq	152b0 <__assert_fail@plt+0x3a5c>
   15298:	mov	r1, r6
   1529c:	bl	11464 <strcmp@plt>
   152a0:	cmp	r0, #0
   152a4:	bne	15288 <__assert_fail@plt+0x3a34>
   152a8:	mov	r0, r5
   152ac:	pop	{r4, r5, r6, pc}
   152b0:	mvn	r0, #0
   152b4:	pop	{r4, r5, r6, pc}
   152b8:	cmn	r2, #1
   152bc:	push	{r4, r5, r6, lr}
   152c0:	mov	r2, #5
   152c4:	sub	sp, sp, #8
   152c8:	mov	r4, r1
   152cc:	mov	r5, r0
   152d0:	ldreq	r1, [pc, #76]	; 15324 <__assert_fail@plt+0x3ad0>
   152d4:	ldrne	r1, [pc, #76]	; 15328 <__assert_fail@plt+0x3ad4>
   152d8:	mov	r0, #0
   152dc:	bl	114e8 <dcgettext@plt>
   152e0:	mov	r2, r4
   152e4:	mov	r1, #8
   152e8:	mov	r6, r0
   152ec:	mov	r0, #0
   152f0:	bl	19aa4 <__assert_fail@plt+0x8250>
   152f4:	mov	r1, r5
   152f8:	mov	r4, r0
   152fc:	mov	r0, #1
   15300:	bl	19d40 <__assert_fail@plt+0x84ec>
   15304:	mov	r1, #0
   15308:	mov	r3, r4
   1530c:	mov	r2, r6
   15310:	str	r0, [sp]
   15314:	mov	r0, r1
   15318:	bl	115a8 <error@plt>
   1531c:	add	sp, sp, #8
   15320:	pop	{r4, r5, r6, pc}
   15324:	andeq	lr, r1, r8, ror #10
   15328:	andeq	lr, r1, r4, lsl #11
   1532c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15330:	mov	r6, r0
   15334:	ldr	r9, [pc, #232]	; 15424 <__assert_fail@plt+0x3bd0>
   15338:	mov	r4, r1
   1533c:	mov	r7, r2
   15340:	ldr	r1, [pc, #224]	; 15428 <__assert_fail@plt+0x3bd4>
   15344:	mov	r2, #5
   15348:	mov	r0, #0
   1534c:	bl	114e8 <dcgettext@plt>
   15350:	ldr	r1, [r9]
   15354:	bl	11428 <fputs_unlocked@plt>
   15358:	ldr	fp, [r6]
   1535c:	cmp	fp, #0
   15360:	movne	r8, #0
   15364:	movne	r5, r8
   15368:	movne	sl, #1
   1536c:	bne	153ac <__assert_fail@plt+0x3b58>
   15370:	b	153f0 <__assert_fail@plt+0x3b9c>
   15374:	mov	r0, fp
   15378:	ldr	r8, [r9]
   1537c:	bl	19d50 <__assert_fail@plt+0x84fc>
   15380:	ldr	r2, [pc, #164]	; 1542c <__assert_fail@plt+0x3bd8>
   15384:	mov	r1, sl
   15388:	mov	r3, r0
   1538c:	mov	r0, r8
   15390:	bl	11704 <__fprintf_chk@plt>
   15394:	mov	r8, r4
   15398:	ldr	fp, [r6, #4]!
   1539c:	add	r5, r5, #1
   153a0:	cmp	fp, #0
   153a4:	add	r4, r4, r7
   153a8:	beq	153f0 <__assert_fail@plt+0x3b9c>
   153ac:	cmp	r5, #0
   153b0:	mov	r1, r4
   153b4:	mov	r2, r7
   153b8:	mov	r0, r8
   153bc:	beq	15374 <__assert_fail@plt+0x3b20>
   153c0:	bl	114d0 <memcmp@plt>
   153c4:	cmp	r0, #0
   153c8:	bne	15374 <__assert_fail@plt+0x3b20>
   153cc:	mov	r0, fp
   153d0:	ldr	fp, [r9]
   153d4:	bl	19d50 <__assert_fail@plt+0x84fc>
   153d8:	ldr	r2, [pc, #80]	; 15430 <__assert_fail@plt+0x3bdc>
   153dc:	mov	r1, sl
   153e0:	mov	r3, r0
   153e4:	mov	r0, fp
   153e8:	bl	11704 <__fprintf_chk@plt>
   153ec:	b	15398 <__assert_fail@plt+0x3b44>
   153f0:	ldr	r0, [r9]
   153f4:	ldr	r3, [r0, #20]
   153f8:	ldr	r2, [r0, #24]
   153fc:	cmp	r3, r2
   15400:	bcs	15418 <__assert_fail@plt+0x3bc4>
   15404:	add	r1, r3, #1
   15408:	mov	r2, #10
   1540c:	str	r1, [r0, #20]
   15410:	strb	r2, [r3]
   15414:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15418:	mov	r1, #10
   1541c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15420:	b	11758 <__overflow@plt>
   15424:	andeq	pc, r2, r8, ror #3
   15428:	andeq	lr, r1, r4, lsr #11
   1542c:			; <UNDEFINED> instruction: 0x0001e5bc
   15430:	andeq	lr, r1, r4, asr #11
   15434:	push	{r4, r5, r6, r7, r8, lr}
   15438:	mov	r7, r0
   1543c:	ldrb	ip, [sp, #32]
   15440:	mov	r5, r1
   15444:	mov	r4, r2
   15448:	cmp	ip, #0
   1544c:	mov	r6, r3
   15450:	beq	154a0 <__assert_fail@plt+0x3c4c>
   15454:	ldr	r3, [sp, #24]
   15458:	mov	r2, r6
   1545c:	mov	r1, r4
   15460:	mov	r0, r5
   15464:	bl	15170 <__assert_fail@plt+0x391c>
   15468:	cmp	r0, #0
   1546c:	popge	{r4, r5, r6, r7, r8, pc}
   15470:	mov	r2, r0
   15474:	mov	r1, r5
   15478:	mov	r0, r7
   1547c:	bl	152b8 <__assert_fail@plt+0x3a64>
   15480:	mov	r0, r4
   15484:	ldr	r2, [sp, #24]
   15488:	mov	r1, r6
   1548c:	bl	1532c <__assert_fail@plt+0x3ad8>
   15490:	ldr	r3, [sp, #28]
   15494:	blx	r3
   15498:	mvn	r0, #0
   1549c:	pop	{r4, r5, r6, r7, r8, pc}
   154a0:	mov	r1, r2
   154a4:	mov	r0, r5
   154a8:	bl	15268 <__assert_fail@plt+0x3a14>
   154ac:	cmp	r0, #0
   154b0:	popge	{r4, r5, r6, r7, r8, pc}
   154b4:	b	15470 <__assert_fail@plt+0x3c1c>
   154b8:	push	{r4, r5, r6, r7, r8, lr}
   154bc:	ldr	r7, [r1]
   154c0:	cmp	r7, #0
   154c4:	beq	15504 <__assert_fail@plt+0x3cb0>
   154c8:	mov	r6, r3
   154cc:	mov	r8, r0
   154d0:	mov	r4, r2
   154d4:	mov	r5, r1
   154d8:	b	154e8 <__assert_fail@plt+0x3c94>
   154dc:	ldr	r7, [r5, #4]!
   154e0:	cmp	r7, #0
   154e4:	beq	15504 <__assert_fail@plt+0x3cb0>
   154e8:	mov	r1, r4
   154ec:	mov	r2, r6
   154f0:	mov	r0, r8
   154f4:	bl	114d0 <memcmp@plt>
   154f8:	add	r4, r4, r6
   154fc:	cmp	r0, #0
   15500:	bne	154dc <__assert_fail@plt+0x3c88>
   15504:	mov	r0, r7
   15508:	pop	{r4, r5, r6, r7, r8, pc}
   1550c:	ldr	r3, [pc, #4]	; 15518 <__assert_fail@plt+0x3cc4>
   15510:	str	r0, [r3]
   15514:	bx	lr
   15518:	andeq	pc, r2, r0, ror r2	; <UNPREDICTABLE>
   1551c:	ldr	r3, [pc, #4]	; 15528 <__assert_fail@plt+0x3cd4>
   15520:	strb	r0, [r3, #4]
   15524:	bx	lr
   15528:	andeq	pc, r2, r0, ror r2	; <UNPREDICTABLE>
   1552c:	ldr	r3, [pc, #192]	; 155f4 <__assert_fail@plt+0x3da0>
   15530:	push	{r4, r5, r6, lr}
   15534:	sub	sp, sp, #8
   15538:	ldr	r0, [r3]
   1553c:	bl	1bb48 <__assert_fail@plt+0xa2f4>
   15540:	cmp	r0, #0
   15544:	beq	15568 <__assert_fail@plt+0x3d14>
   15548:	ldr	r4, [pc, #168]	; 155f8 <__assert_fail@plt+0x3da4>
   1554c:	ldrb	r3, [r4, #4]
   15550:	cmp	r3, #0
   15554:	beq	15584 <__assert_fail@plt+0x3d30>
   15558:	bl	116b0 <__errno_location@plt>
   1555c:	ldr	r3, [r0]
   15560:	cmp	r3, #32
   15564:	bne	15584 <__assert_fail@plt+0x3d30>
   15568:	ldr	r3, [pc, #140]	; 155fc <__assert_fail@plt+0x3da8>
   1556c:	ldr	r0, [r3]
   15570:	bl	1bb48 <__assert_fail@plt+0xa2f4>
   15574:	cmp	r0, #0
   15578:	bne	155cc <__assert_fail@plt+0x3d78>
   1557c:	add	sp, sp, #8
   15580:	pop	{r4, r5, r6, pc}
   15584:	mov	r2, #5
   15588:	ldr	r1, [pc, #112]	; 15600 <__assert_fail@plt+0x3dac>
   1558c:	mov	r0, #0
   15590:	bl	114e8 <dcgettext@plt>
   15594:	ldr	r4, [r4]
   15598:	cmp	r4, #0
   1559c:	mov	r5, r0
   155a0:	beq	155d8 <__assert_fail@plt+0x3d84>
   155a4:	bl	116b0 <__errno_location@plt>
   155a8:	ldr	r6, [r0]
   155ac:	mov	r0, r4
   155b0:	bl	19bb8 <__assert_fail@plt+0x8364>
   155b4:	mov	r1, r6
   155b8:	str	r5, [sp]
   155bc:	ldr	r2, [pc, #64]	; 15604 <__assert_fail@plt+0x3db0>
   155c0:	mov	r3, r0
   155c4:	mov	r0, #0
   155c8:	bl	115a8 <error@plt>
   155cc:	ldr	r3, [pc, #52]	; 15608 <__assert_fail@plt+0x3db4>
   155d0:	ldr	r0, [r3]
   155d4:	bl	114ac <_exit@plt>
   155d8:	bl	116b0 <__errno_location@plt>
   155dc:	mov	r3, r5
   155e0:	ldr	r2, [pc, #36]	; 1560c <__assert_fail@plt+0x3db8>
   155e4:	ldr	r1, [r0]
   155e8:	mov	r0, r4
   155ec:	bl	115a8 <error@plt>
   155f0:	b	155cc <__assert_fail@plt+0x3d78>
   155f4:	andeq	pc, r2, ip, ror #3
   155f8:	andeq	pc, r2, r0, ror r2	; <UNPREDICTABLE>
   155fc:	andeq	pc, r2, r8, ror #3
   15600:	andeq	lr, r1, ip, asr #11
   15604:	ldrdeq	lr, [r1], -r8
   15608:	muleq	r2, r0, r1
   1560c:	ldrdeq	lr, [r1], -r4
   15610:	push	{r4, lr}
   15614:	bl	1569c <__assert_fail@plt+0x3e48>
   15618:	cmp	r0, #0
   1561c:	popne	{r4, pc}
   15620:	bl	1ada8 <__assert_fail@plt+0x9554>
   15624:	push	{r4, r5, r6, lr}
   15628:	mov	r5, r0
   1562c:	ldrb	r4, [r0]
   15630:	bl	1b78c <__assert_fail@plt+0x9f38>
   15634:	sub	r4, r4, #47	; 0x2f
   15638:	clz	r4, r4
   1563c:	lsr	r4, r4, #5
   15640:	sub	r0, r0, r5
   15644:	cmp	r0, r4
   15648:	bls	15694 <__assert_fail@plt+0x3e40>
   1564c:	sub	r3, r0, #1
   15650:	add	r2, r5, r3
   15654:	ldrb	r1, [r5, r3]
   15658:	cmp	r1, #47	; 0x2f
   1565c:	beq	15678 <__assert_fail@plt+0x3e24>
   15660:	b	15694 <__assert_fail@plt+0x3e40>
   15664:	ldrb	r1, [r2, #-1]!
   15668:	sub	r0, r3, #1
   1566c:	cmp	r1, #47	; 0x2f
   15670:	bne	15688 <__assert_fail@plt+0x3e34>
   15674:	mov	r3, r0
   15678:	cmp	r4, r3
   1567c:	bne	15664 <__assert_fail@plt+0x3e10>
   15680:	mov	r0, r4
   15684:	pop	{r4, r5, r6, pc}
   15688:	mov	r4, r3
   1568c:	mov	r0, r4
   15690:	pop	{r4, r5, r6, pc}
   15694:	mov	r4, r0
   15698:	b	15680 <__assert_fail@plt+0x3e2c>
   1569c:	push	{r4, r5, r6, lr}
   156a0:	mov	r6, r0
   156a4:	bl	15624 <__assert_fail@plt+0x3dd0>
   156a8:	add	r3, r0, #1
   156ac:	mov	r4, r0
   156b0:	cmp	r0, #0
   156b4:	movne	r0, r3
   156b8:	addeq	r0, r3, #1
   156bc:	bl	1ae94 <__assert_fail@plt+0x9640>
   156c0:	subs	r5, r0, #0
   156c4:	beq	156ec <__assert_fail@plt+0x3e98>
   156c8:	mov	r2, r4
   156cc:	mov	r1, r6
   156d0:	bl	114b8 <memcpy@plt>
   156d4:	cmp	r4, #0
   156d8:	moveq	r3, #46	; 0x2e
   156dc:	moveq	r4, #1
   156e0:	strbeq	r3, [r5]
   156e4:	mov	r3, #0
   156e8:	strb	r3, [r5, r4]
   156ec:	mov	r0, r5
   156f0:	pop	{r4, r5, r6, pc}
   156f4:	ldr	r3, [r0, #16]
   156f8:	and	r3, r3, #61440	; 0xf000
   156fc:	cmp	r3, #32768	; 0x8000
   15700:	beq	15744 <__assert_fail@plt+0x3ef0>
   15704:	cmp	r3, #16384	; 0x4000
   15708:	mov	r2, #5
   1570c:	beq	15778 <__assert_fail@plt+0x3f24>
   15710:	cmp	r3, #40960	; 0xa000
   15714:	beq	15784 <__assert_fail@plt+0x3f30>
   15718:	cmp	r3, #24576	; 0x6000
   1571c:	beq	15790 <__assert_fail@plt+0x3f3c>
   15720:	cmp	r3, #8192	; 0x2000
   15724:	beq	1579c <__assert_fail@plt+0x3f48>
   15728:	cmp	r3, #4096	; 0x1000
   1572c:	beq	157a8 <__assert_fail@plt+0x3f54>
   15730:	cmp	r3, #49152	; 0xc000
   15734:	beq	1576c <__assert_fail@plt+0x3f18>
   15738:	ldr	r1, [pc, #116]	; 157b4 <__assert_fail@plt+0x3f60>
   1573c:	mov	r0, #0
   15740:	b	114e8 <dcgettext@plt>
   15744:	ldrd	r2, [r0, #48]	; 0x30
   15748:	orrs	r3, r2, r3
   1574c:	mov	r2, #5
   15750:	bne	15760 <__assert_fail@plt+0x3f0c>
   15754:	ldr	r1, [pc, #92]	; 157b8 <__assert_fail@plt+0x3f64>
   15758:	mov	r0, #0
   1575c:	b	114e8 <dcgettext@plt>
   15760:	ldr	r1, [pc, #84]	; 157bc <__assert_fail@plt+0x3f68>
   15764:	mov	r0, #0
   15768:	b	114e8 <dcgettext@plt>
   1576c:	ldr	r1, [pc, #76]	; 157c0 <__assert_fail@plt+0x3f6c>
   15770:	mov	r0, #0
   15774:	b	114e8 <dcgettext@plt>
   15778:	ldr	r1, [pc, #68]	; 157c4 <__assert_fail@plt+0x3f70>
   1577c:	mov	r0, #0
   15780:	b	114e8 <dcgettext@plt>
   15784:	ldr	r1, [pc, #60]	; 157c8 <__assert_fail@plt+0x3f74>
   15788:	mov	r0, #0
   1578c:	b	114e8 <dcgettext@plt>
   15790:	ldr	r1, [pc, #52]	; 157cc <__assert_fail@plt+0x3f78>
   15794:	mov	r0, #0
   15798:	b	114e8 <dcgettext@plt>
   1579c:	ldr	r1, [pc, #44]	; 157d0 <__assert_fail@plt+0x3f7c>
   157a0:	mov	r0, #0
   157a4:	b	114e8 <dcgettext@plt>
   157a8:	ldr	r1, [pc, #36]	; 157d4 <__assert_fail@plt+0x3f80>
   157ac:	mov	r0, #0
   157b0:	b	114e8 <dcgettext@plt>
   157b4:	andeq	lr, r1, r0, asr r6
   157b8:	andeq	lr, r1, r0, ror #11
   157bc:	strdeq	lr, [r1], -r4
   157c0:	andeq	lr, r1, r8, asr #12
   157c4:	andeq	lr, r1, ip, asr #10
   157c8:	andeq	lr, r1, r4, lsl #12
   157cc:	andeq	lr, r1, r4, lsl r6
   157d0:	andeq	lr, r1, r8, lsr #12
   157d4:	andeq	lr, r1, r0, asr #12
   157d8:	and	r3, r0, #61440	; 0xf000
   157dc:	cmp	r3, #32768	; 0x8000
   157e0:	moveq	r3, #45	; 0x2d
   157e4:	beq	15830 <__assert_fail@plt+0x3fdc>
   157e8:	cmp	r3, #16384	; 0x4000
   157ec:	moveq	r3, #100	; 0x64
   157f0:	beq	15830 <__assert_fail@plt+0x3fdc>
   157f4:	cmp	r3, #24576	; 0x6000
   157f8:	moveq	r3, #98	; 0x62
   157fc:	beq	15830 <__assert_fail@plt+0x3fdc>
   15800:	cmp	r3, #8192	; 0x2000
   15804:	moveq	r3, #99	; 0x63
   15808:	beq	15830 <__assert_fail@plt+0x3fdc>
   1580c:	cmp	r3, #40960	; 0xa000
   15810:	moveq	r3, #108	; 0x6c
   15814:	beq	15830 <__assert_fail@plt+0x3fdc>
   15818:	cmp	r3, #4096	; 0x1000
   1581c:	moveq	r3, #112	; 0x70
   15820:	beq	15830 <__assert_fail@plt+0x3fdc>
   15824:	cmp	r3, #49152	; 0xc000
   15828:	moveq	r3, #115	; 0x73
   1582c:	movne	r3, #63	; 0x3f
   15830:	tst	r0, #256	; 0x100
   15834:	movne	ip, #114	; 0x72
   15838:	moveq	ip, #45	; 0x2d
   1583c:	tst	r0, #128	; 0x80
   15840:	movne	r2, #119	; 0x77
   15844:	moveq	r2, #45	; 0x2d
   15848:	tst	r0, #2048	; 0x800
   1584c:	strb	r3, [r1]
   15850:	strb	ip, [r1, #1]
   15854:	strb	r2, [r1, #2]
   15858:	beq	158f0 <__assert_fail@plt+0x409c>
   1585c:	tst	r0, #64	; 0x40
   15860:	movne	ip, #115	; 0x73
   15864:	moveq	ip, #83	; 0x53
   15868:	tst	r0, #32
   1586c:	movne	r2, #114	; 0x72
   15870:	moveq	r2, #45	; 0x2d
   15874:	tst	r0, #16
   15878:	movne	r3, #119	; 0x77
   1587c:	moveq	r3, #45	; 0x2d
   15880:	tst	r0, #1024	; 0x400
   15884:	strb	ip, [r1, #3]
   15888:	strb	r2, [r1, #4]
   1588c:	strb	r3, [r1, #5]
   15890:	beq	15910 <__assert_fail@plt+0x40bc>
   15894:	tst	r0, #8
   15898:	movne	ip, #115	; 0x73
   1589c:	moveq	ip, #83	; 0x53
   158a0:	tst	r0, #4
   158a4:	movne	r2, #114	; 0x72
   158a8:	moveq	r2, #45	; 0x2d
   158ac:	tst	r0, #2
   158b0:	movne	r3, #119	; 0x77
   158b4:	moveq	r3, #45	; 0x2d
   158b8:	tst	r0, #512	; 0x200
   158bc:	strb	ip, [r1, #6]
   158c0:	strb	r2, [r1, #7]
   158c4:	strb	r3, [r1, #8]
   158c8:	beq	15900 <__assert_fail@plt+0x40ac>
   158cc:	tst	r0, #1
   158d0:	movne	r0, #116	; 0x74
   158d4:	moveq	r0, #84	; 0x54
   158d8:	mov	r2, #32
   158dc:	mov	r3, #0
   158e0:	strb	r0, [r1, #9]
   158e4:	strb	r2, [r1, #10]
   158e8:	strb	r3, [r1, #11]
   158ec:	bx	lr
   158f0:	tst	r0, #64	; 0x40
   158f4:	movne	ip, #120	; 0x78
   158f8:	moveq	ip, #45	; 0x2d
   158fc:	b	15868 <__assert_fail@plt+0x4014>
   15900:	tst	r0, #1
   15904:	movne	r0, #120	; 0x78
   15908:	moveq	r0, #45	; 0x2d
   1590c:	b	158d8 <__assert_fail@plt+0x4084>
   15910:	tst	r0, #8
   15914:	movne	ip, #120	; 0x78
   15918:	moveq	ip, #45	; 0x2d
   1591c:	b	158a0 <__assert_fail@plt+0x404c>
   15920:	ldr	r0, [r0, #16]
   15924:	b	157d8 <__assert_fail@plt+0x3f84>
   15928:	push	{r4, r5, lr}
   1592c:	sub	sp, sp, #12
   15930:	mov	r5, r0
   15934:	bl	116b0 <__errno_location@plt>
   15938:	mov	r2, #0
   1593c:	mov	r4, r0
   15940:	ldr	r3, [r0]
   15944:	str	r2, [r4]
   15948:	mov	r0, r5
   1594c:	str	r3, [sp]
   15950:	str	r3, [sp, #4]
   15954:	bl	114a0 <free@plt>
   15958:	ldr	r3, [r4]
   1595c:	add	r2, sp, #8
   15960:	cmp	r3, #0
   15964:	moveq	r3, #4
   15968:	movne	r3, #0
   1596c:	add	r3, r2, r3
   15970:	ldr	r3, [r3, #-8]
   15974:	str	r3, [r4]
   15978:	add	sp, sp, #12
   1597c:	pop	{r4, r5, pc}
   15980:	cmp	r0, #0
   15984:	sbcs	r3, r1, #0
   15988:	mov	r3, #0
   1598c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15990:	mov	r4, r0
   15994:	mov	r5, r1
   15998:	strb	r3, [r2, #20]
   1599c:	add	r6, r2, #20
   159a0:	mov	r8, #10
   159a4:	mov	r9, #0
   159a8:	blt	159f8 <__assert_fail@plt+0x41a4>
   159ac:	mov	r0, r4
   159b0:	mov	r1, r5
   159b4:	mov	r2, r8
   159b8:	mov	r3, r9
   159bc:	bl	1c734 <__assert_fail@plt+0xaee0>
   159c0:	mov	r0, r4
   159c4:	mov	r1, r5
   159c8:	mov	r3, r9
   159cc:	add	r2, r2, #48	; 0x30
   159d0:	strb	r2, [r6, #-1]!
   159d4:	mov	r2, r8
   159d8:	bl	1c734 <__assert_fail@plt+0xaee0>
   159dc:	mov	r4, r0
   159e0:	mov	r5, r1
   159e4:	orrs	r3, r4, r5
   159e8:	bne	159ac <__assert_fail@plt+0x4158>
   159ec:	mov	r0, r6
   159f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   159f4:	mov	r6, r7
   159f8:	mov	r0, r4
   159fc:	mov	r1, r5
   15a00:	mov	r2, r8
   15a04:	mov	r3, r9
   15a08:	bl	1c734 <__assert_fail@plt+0xaee0>
   15a0c:	mov	r0, r4
   15a10:	mov	r1, r5
   15a14:	mov	r3, r9
   15a18:	sub	r7, r6, #1
   15a1c:	rsb	r2, r2, #48	; 0x30
   15a20:	strb	r2, [r6, #-1]
   15a24:	mov	r2, r8
   15a28:	bl	1c734 <__assert_fail@plt+0xaee0>
   15a2c:	mov	r4, r0
   15a30:	mov	r5, r1
   15a34:	orrs	r3, r4, r5
   15a38:	bne	159f4 <__assert_fail@plt+0x41a0>
   15a3c:	mov	r3, #45	; 0x2d
   15a40:	sub	r6, r6, #2
   15a44:	strb	r3, [r7, #-1]
   15a48:	mov	r0, r6
   15a4c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15a50:	push	{r4, r5, r6, r7, r8, lr}
   15a54:	mov	r4, r0
   15a58:	bl	11674 <strlen@plt>
   15a5c:	adds	r0, r0, #1
   15a60:	popeq	{r4, r5, r6, r7, r8, pc}
   15a64:	mov	r2, r4
   15a68:	mov	r3, #0
   15a6c:	b	15a84 <__assert_fail@plt+0x4230>
   15a70:	mov	r3, ip
   15a74:	strb	r1, [r2]
   15a78:	cmp	r0, r3
   15a7c:	add	r2, r2, #1
   15a80:	bls	15af4 <__assert_fail@plt+0x42a0>
   15a84:	ldrb	r1, [r4, r3]
   15a88:	add	ip, r3, #1
   15a8c:	cmp	r1, #92	; 0x5c
   15a90:	bne	15a70 <__assert_fail@plt+0x421c>
   15a94:	add	lr, r3, #4
   15a98:	cmp	r0, lr
   15a9c:	bls	15a70 <__assert_fail@plt+0x421c>
   15aa0:	ldrb	r5, [r4, ip]
   15aa4:	add	r3, r4, r3
   15aa8:	sub	r5, r5, #48	; 0x30
   15aac:	uxtb	r6, r5
   15ab0:	cmp	r6, #3
   15ab4:	bhi	15a70 <__assert_fail@plt+0x421c>
   15ab8:	ldrb	r6, [r3, #2]
   15abc:	sub	r6, r6, #48	; 0x30
   15ac0:	uxtb	r7, r6
   15ac4:	cmp	r7, #7
   15ac8:	bhi	15a70 <__assert_fail@plt+0x421c>
   15acc:	ldrb	r7, [r3, #3]
   15ad0:	mov	r3, lr
   15ad4:	add	r5, r6, r5, lsl #3
   15ad8:	sub	lr, r7, #48	; 0x30
   15adc:	uxtb	lr, lr
   15ae0:	cmp	lr, #7
   15ae4:	add	r5, lr, r5, lsl #3
   15ae8:	strbls	r5, [r2]
   15aec:	bls	15a78 <__assert_fail@plt+0x4224>
   15af0:	b	15a70 <__assert_fail@plt+0x421c>
   15af4:	pop	{r4, r5, r6, r7, r8, pc}
   15af8:	push	{r4, lr}
   15afc:	mov	r4, r0
   15b00:	ldr	r0, [r0]
   15b04:	bl	15928 <__assert_fail@plt+0x40d4>
   15b08:	ldr	r0, [r4, #4]
   15b0c:	bl	15928 <__assert_fail@plt+0x40d4>
   15b10:	ldr	r0, [r4, #8]
   15b14:	bl	15928 <__assert_fail@plt+0x40d4>
   15b18:	ldrb	r3, [r4, #24]
   15b1c:	tst	r3, #4
   15b20:	beq	15b2c <__assert_fail@plt+0x42d8>
   15b24:	ldr	r0, [r4, #12]
   15b28:	bl	15928 <__assert_fail@plt+0x40d4>
   15b2c:	mov	r0, r4
   15b30:	pop	{r4, lr}
   15b34:	b	15928 <__assert_fail@plt+0x40d4>
   15b38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b3c:	sub	sp, sp, #68	; 0x44
   15b40:	ldr	r1, [pc, #1264]	; 16038 <__assert_fail@plt+0x47e4>
   15b44:	ldr	r0, [pc, #1264]	; 1603c <__assert_fail@plt+0x47e8>
   15b48:	bl	117d0 <fopen64@plt>
   15b4c:	subs	r7, r0, #0
   15b50:	beq	160c8 <__assert_fail@plt+0x4874>
   15b54:	add	sl, sp, #40	; 0x28
   15b58:	ldr	r9, [pc, #1248]	; 16040 <__assert_fail@plt+0x47ec>
   15b5c:	mov	r5, sl
   15b60:	mov	r3, #0
   15b64:	str	r3, [sp, #44]	; 0x2c
   15b68:	str	r3, [sp, #48]	; 0x30
   15b6c:	mov	r3, r7
   15b70:	mov	r2, #10
   15b74:	add	r1, sp, #48	; 0x30
   15b78:	add	r0, sp, #44	; 0x2c
   15b7c:	bl	1144c <__getdelim@plt>
   15b80:	cmn	r0, #1
   15b84:	beq	15dd4 <__assert_fail@plt+0x4580>
   15b88:	add	r3, sp, #60	; 0x3c
   15b8c:	str	r3, [sp]
   15b90:	ldr	r0, [sp, #44]	; 0x2c
   15b94:	add	r3, sp, #56	; 0x38
   15b98:	add	r2, sp, #52	; 0x34
   15b9c:	mov	r1, r9
   15ba0:	bl	11794 <sscanf@plt>
   15ba4:	sub	r0, r0, #2
   15ba8:	cmp	r0, #1
   15bac:	bhi	15b6c <__assert_fail@plt+0x4318>
   15bb0:	ldr	r3, [sp, #60]	; 0x3c
   15bb4:	ldr	sl, [sp, #44]	; 0x2c
   15bb8:	mov	r1, #32
   15bbc:	add	sl, sl, r3
   15bc0:	mov	r0, sl
   15bc4:	bl	11680 <strchr@plt>
   15bc8:	subs	r6, r0, #0
   15bcc:	beq	15b6c <__assert_fail@plt+0x4318>
   15bd0:	mov	r8, #0
   15bd4:	strb	r8, [r6], #1
   15bd8:	mov	r1, #32
   15bdc:	mov	r0, r6
   15be0:	bl	11680 <strchr@plt>
   15be4:	cmp	r0, #0
   15be8:	beq	15b6c <__assert_fail@plt+0x4318>
   15bec:	ldr	r1, [pc, #1104]	; 16044 <__assert_fail@plt+0x47f0>
   15bf0:	strb	r8, [r0], #1
   15bf4:	bl	1b3e4 <__assert_fail@plt+0x9b90>
   15bf8:	cmp	r0, #0
   15bfc:	beq	15b6c <__assert_fail@plt+0x4318>
   15c00:	add	fp, r0, #3
   15c04:	mov	r0, fp
   15c08:	mov	r1, #32
   15c0c:	bl	11680 <strchr@plt>
   15c10:	subs	r3, r0, #0
   15c14:	beq	15b6c <__assert_fail@plt+0x4318>
   15c18:	strb	r8, [r3], #1
   15c1c:	mov	r1, #32
   15c20:	mov	r0, r3
   15c24:	str	r3, [sp, #32]
   15c28:	bl	11680 <strchr@plt>
   15c2c:	cmp	r0, #0
   15c30:	beq	15b6c <__assert_fail@plt+0x4318>
   15c34:	ldr	r3, [sp, #32]
   15c38:	strb	r8, [r0]
   15c3c:	mov	r0, r3
   15c40:	bl	15a50 <__assert_fail@plt+0x41fc>
   15c44:	mov	r0, r6
   15c48:	bl	15a50 <__assert_fail@plt+0x41fc>
   15c4c:	mov	r0, sl
   15c50:	bl	15a50 <__assert_fail@plt+0x41fc>
   15c54:	mov	r0, fp
   15c58:	bl	15a50 <__assert_fail@plt+0x41fc>
   15c5c:	mov	r0, #32
   15c60:	bl	1a860 <__assert_fail@plt+0x900c>
   15c64:	ldr	r3, [sp, #32]
   15c68:	mov	r4, r0
   15c6c:	mov	r0, r3
   15c70:	bl	1ad8c <__assert_fail@plt+0x9538>
   15c74:	str	r8, [sp, #12]
   15c78:	str	r8, [sp, #20]
   15c7c:	str	r0, [r4]
   15c80:	mov	r0, r6
   15c84:	bl	1ad8c <__assert_fail@plt+0x9538>
   15c88:	str	r0, [r4, #4]
   15c8c:	mov	r0, sl
   15c90:	bl	1ad8c <__assert_fail@plt+0x9538>
   15c94:	ldr	sl, [pc, #940]	; 16048 <__assert_fail@plt+0x47f4>
   15c98:	str	r0, [r4, #8]
   15c9c:	mov	r0, fp
   15ca0:	bl	1ad8c <__assert_fail@plt+0x9538>
   15ca4:	ldr	r3, [sp, #52]	; 0x34
   15ca8:	mov	fp, #0
   15cac:	str	r3, [sp, #28]
   15cb0:	lsr	r2, r3, #24
   15cb4:	lsl	r3, r3, #8
   15cb8:	str	r2, [sp, #12]
   15cbc:	str	r3, [sp, #8]
   15cc0:	ldrd	r2, [sp, #8]
   15cc4:	str	r8, [sp, #24]
   15cc8:	ldr	r1, [sp, #56]	; 0x38
   15ccc:	and	r2, r2, sl
   15cd0:	and	r3, r3, fp
   15cd4:	ldr	fp, [pc, #880]	; 1604c <__assert_fail@plt+0x47f8>
   15cd8:	strd	r2, [sp, #32]
   15cdc:	ldrd	r2, [sp, #24]
   15ce0:	mov	sl, #0
   15ce4:	lsr	ip, r1, #20
   15ce8:	and	sl, sl, r2
   15cec:	and	fp, fp, r3
   15cf0:	mov	r2, sl
   15cf4:	mov	r3, fp
   15cf8:	ldrd	sl, [sp, #32]
   15cfc:	str	ip, [sp, #20]
   15d00:	ldrb	ip, [r4, #24]
   15d04:	orr	sl, sl, r2
   15d08:	orr	fp, fp, r3
   15d0c:	lsl	r3, r1, #12
   15d10:	uxtb	r1, r1
   15d14:	orr	sl, sl, r1
   15d18:	str	r3, [sp, #16]
   15d1c:	strd	sl, [sp, #32]
   15d20:	add	r3, pc, #776	; 0x308
   15d24:	ldrd	r2, [r3]
   15d28:	ldrd	sl, [sp, #16]
   15d2c:	orr	ip, ip, #4
   15d30:	strb	ip, [r4, #24]
   15d34:	and	sl, sl, r2
   15d38:	and	fp, fp, r3
   15d3c:	mov	r2, sl
   15d40:	mov	r3, fp
   15d44:	ldrd	sl, [sp, #32]
   15d48:	ldr	r1, [pc, #780]	; 1605c <__assert_fail@plt+0x4808>
   15d4c:	str	r0, [r4, #12]
   15d50:	orr	sl, sl, r2
   15d54:	orr	fp, fp, r3
   15d58:	mov	r2, sl
   15d5c:	mov	r3, fp
   15d60:	mov	r6, r0
   15d64:	strd	r2, [r4, #16]
   15d68:	bl	11464 <strcmp@plt>
   15d6c:	cmp	r0, r8
   15d70:	beq	15d88 <__assert_fail@plt+0x4534>
   15d74:	ldr	r1, [pc, #740]	; 16060 <__assert_fail@plt+0x480c>
   15d78:	mov	r0, r6
   15d7c:	bl	11464 <strcmp@plt>
   15d80:	cmp	r0, r8
   15d84:	bne	15e10 <__assert_fail@plt+0x45bc>
   15d88:	mov	r0, #1
   15d8c:	ldrb	r3, [r4, #24]
   15d90:	ldr	r8, [r4]
   15d94:	mov	r1, #58	; 0x3a
   15d98:	bic	r3, r3, #1
   15d9c:	orr	r3, r0, r3
   15da0:	strb	r3, [r4, #24]
   15da4:	mov	r0, r8
   15da8:	bl	11680 <strchr@plt>
   15dac:	cmp	r0, #0
   15db0:	beq	15f04 <__assert_fail@plt+0x46b0>
   15db4:	mov	r3, #1
   15db8:	ldrb	r0, [r4, #24]
   15dbc:	bic	r0, r0, #2
   15dc0:	orr	r0, r0, r3, lsl #1
   15dc4:	strb	r0, [r4, #24]
   15dc8:	str	r4, [r5]
   15dcc:	add	r5, r4, #28
   15dd0:	b	15b6c <__assert_fail@plt+0x4318>
   15dd4:	ldr	r0, [sp, #44]	; 0x2c
   15dd8:	bl	15928 <__assert_fail@plt+0x40d4>
   15ddc:	ldr	r3, [r7]
   15de0:	mov	sl, r5
   15de4:	tst	r3, #32
   15de8:	bne	15fdc <__assert_fail@plt+0x4788>
   15dec:	mov	r0, r7
   15df0:	bl	1bbc4 <__assert_fail@plt+0xa370>
   15df4:	cmn	r0, #1
   15df8:	beq	163ac <__assert_fail@plt+0x4b58>
   15dfc:	mov	r3, #0
   15e00:	str	r3, [sl]
   15e04:	ldr	r0, [sp, #40]	; 0x28
   15e08:	add	sp, sp, #68	; 0x44
   15e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e10:	ldr	r1, [pc, #588]	; 16064 <__assert_fail@plt+0x4810>
   15e14:	mov	r0, r6
   15e18:	bl	11464 <strcmp@plt>
   15e1c:	cmp	r0, r8
   15e20:	beq	15d88 <__assert_fail@plt+0x4534>
   15e24:	ldr	r1, [pc, #572]	; 16068 <__assert_fail@plt+0x4814>
   15e28:	mov	r0, r6
   15e2c:	bl	11464 <strcmp@plt>
   15e30:	cmp	r0, r8
   15e34:	beq	15d88 <__assert_fail@plt+0x4534>
   15e38:	ldr	r1, [pc, #556]	; 1606c <__assert_fail@plt+0x4818>
   15e3c:	mov	r0, r6
   15e40:	bl	11464 <strcmp@plt>
   15e44:	cmp	r0, r8
   15e48:	beq	15d88 <__assert_fail@plt+0x4534>
   15e4c:	ldr	r1, [pc, #540]	; 16070 <__assert_fail@plt+0x481c>
   15e50:	mov	r0, r6
   15e54:	bl	11464 <strcmp@plt>
   15e58:	cmp	r0, r8
   15e5c:	beq	15d88 <__assert_fail@plt+0x4534>
   15e60:	ldr	r1, [pc, #524]	; 16074 <__assert_fail@plt+0x4820>
   15e64:	mov	r0, r6
   15e68:	bl	11464 <strcmp@plt>
   15e6c:	cmp	r0, r8
   15e70:	beq	15d88 <__assert_fail@plt+0x4534>
   15e74:	ldr	r1, [pc, #508]	; 16078 <__assert_fail@plt+0x4824>
   15e78:	mov	r0, r6
   15e7c:	bl	11464 <strcmp@plt>
   15e80:	cmp	r0, r8
   15e84:	beq	15d88 <__assert_fail@plt+0x4534>
   15e88:	ldr	r1, [pc, #492]	; 1607c <__assert_fail@plt+0x4828>
   15e8c:	mov	r0, r6
   15e90:	bl	11464 <strcmp@plt>
   15e94:	cmp	r0, r8
   15e98:	beq	15d88 <__assert_fail@plt+0x4534>
   15e9c:	ldr	r1, [pc, #476]	; 16080 <__assert_fail@plt+0x482c>
   15ea0:	mov	r0, r6
   15ea4:	bl	11464 <strcmp@plt>
   15ea8:	cmp	r0, r8
   15eac:	beq	15d88 <__assert_fail@plt+0x4534>
   15eb0:	ldr	r1, [pc, #460]	; 16084 <__assert_fail@plt+0x4830>
   15eb4:	mov	r0, r6
   15eb8:	bl	11464 <strcmp@plt>
   15ebc:	cmp	r0, r8
   15ec0:	beq	15d88 <__assert_fail@plt+0x4534>
   15ec4:	ldr	r1, [pc, #444]	; 16088 <__assert_fail@plt+0x4834>
   15ec8:	mov	r0, r6
   15ecc:	bl	11464 <strcmp@plt>
   15ed0:	cmp	r0, r8
   15ed4:	beq	15d88 <__assert_fail@plt+0x4534>
   15ed8:	ldr	r1, [pc, #428]	; 1608c <__assert_fail@plt+0x4838>
   15edc:	mov	r0, r6
   15ee0:	bl	11464 <strcmp@plt>
   15ee4:	cmp	r0, r8
   15ee8:	beq	15d88 <__assert_fail@plt+0x4534>
   15eec:	ldr	r1, [pc, #412]	; 16090 <__assert_fail@plt+0x483c>
   15ef0:	mov	r0, r6
   15ef4:	bl	11464 <strcmp@plt>
   15ef8:	clz	r0, r0
   15efc:	lsr	r0, r0, #5
   15f00:	b	15d8c <__assert_fail@plt+0x4538>
   15f04:	ldrb	r3, [r8]
   15f08:	cmp	r3, #47	; 0x2f
   15f0c:	beq	163bc <__assert_fail@plt+0x4b68>
   15f10:	ldr	r1, [pc, #380]	; 16094 <__assert_fail@plt+0x4840>
   15f14:	mov	r0, r6
   15f18:	bl	11464 <strcmp@plt>
   15f1c:	cmp	r0, #0
   15f20:	beq	15db4 <__assert_fail@plt+0x4560>
   15f24:	ldr	r1, [pc, #364]	; 16098 <__assert_fail@plt+0x4844>
   15f28:	mov	r0, r6
   15f2c:	bl	11464 <strcmp@plt>
   15f30:	cmp	r0, #0
   15f34:	beq	15db4 <__assert_fail@plt+0x4560>
   15f38:	ldr	r1, [pc, #348]	; 1609c <__assert_fail@plt+0x4848>
   15f3c:	mov	r0, r6
   15f40:	bl	11464 <strcmp@plt>
   15f44:	cmp	r0, #0
   15f48:	beq	15db4 <__assert_fail@plt+0x4560>
   15f4c:	ldr	r1, [pc, #332]	; 160a0 <__assert_fail@plt+0x484c>
   15f50:	mov	r0, r6
   15f54:	bl	11464 <strcmp@plt>
   15f58:	cmp	r0, #0
   15f5c:	beq	15db4 <__assert_fail@plt+0x4560>
   15f60:	ldr	r1, [pc, #316]	; 160a4 <__assert_fail@plt+0x4850>
   15f64:	mov	r0, r6
   15f68:	bl	11464 <strcmp@plt>
   15f6c:	cmp	r0, #0
   15f70:	beq	15db4 <__assert_fail@plt+0x4560>
   15f74:	ldr	r1, [pc, #300]	; 160a8 <__assert_fail@plt+0x4854>
   15f78:	mov	r0, r6
   15f7c:	bl	11464 <strcmp@plt>
   15f80:	cmp	r0, #0
   15f84:	beq	15db4 <__assert_fail@plt+0x4560>
   15f88:	ldr	r1, [pc, #284]	; 160ac <__assert_fail@plt+0x4858>
   15f8c:	mov	r0, r6
   15f90:	bl	11464 <strcmp@plt>
   15f94:	cmp	r0, #0
   15f98:	beq	15db4 <__assert_fail@plt+0x4560>
   15f9c:	ldr	r1, [pc, #268]	; 160b0 <__assert_fail@plt+0x485c>
   15fa0:	mov	r0, r6
   15fa4:	bl	11464 <strcmp@plt>
   15fa8:	cmp	r0, #0
   15fac:	beq	15db4 <__assert_fail@plt+0x4560>
   15fb0:	mov	r0, r6
   15fb4:	ldr	r1, [pc, #248]	; 160b4 <__assert_fail@plt+0x4860>
   15fb8:	bl	11464 <strcmp@plt>
   15fbc:	cmp	r0, #0
   15fc0:	beq	15db4 <__assert_fail@plt+0x4560>
   15fc4:	mov	r1, r8
   15fc8:	ldr	r0, [pc, #232]	; 160b8 <__assert_fail@plt+0x4864>
   15fcc:	bl	11464 <strcmp@plt>
   15fd0:	clz	r3, r0
   15fd4:	lsr	r3, r3, #5
   15fd8:	b	15db8 <__assert_fail@plt+0x4564>
   15fdc:	bl	116b0 <__errno_location@plt>
   15fe0:	mov	r5, r0
   15fe4:	mov	r0, r7
   15fe8:	ldr	r6, [r5]
   15fec:	bl	1bbc4 <__assert_fail@plt+0xa370>
   15ff0:	str	r6, [r5]
   15ff4:	mov	r3, #0
   15ff8:	str	r3, [sl]
   15ffc:	ldr	r0, [sp, #40]	; 0x28
   16000:	cmp	r0, r3
   16004:	beq	1601c <__assert_fail@plt+0x47c8>
   16008:	ldr	r4, [r0, #28]
   1600c:	bl	15af8 <__assert_fail@plt+0x42a4>
   16010:	subs	r0, r4, #0
   16014:	str	r4, [sp, #40]	; 0x28
   16018:	bne	16008 <__assert_fail@plt+0x47b4>
   1601c:	mov	r0, #0
   16020:	str	r6, [r5]
   16024:	add	sp, sp, #68	; 0x44
   16028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1602c:	nop			; (mov r0, r0)
   16030:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   16034:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   16038:	andeq	lr, r1, ip, lsr #13
   1603c:	andeq	lr, r1, ip, asr r6
   16040:	andeq	lr, r1, r4, ror r6
   16044:	andeq	lr, r1, r8, lsl #13
   16048:	andeq	pc, pc, r0, lsl #30
   1604c:			; <UNDEFINED> instruction: 0xfffff000
   16050:	andeq	lr, r1, r0, lsr #9
   16054:	ldrdeq	lr, [r1], -ip
   16058:	andeq	lr, r1, r8, ror #13
   1605c:	andeq	ip, r1, ip, lsl ip
   16060:	ldrdeq	ip, [r1], -r8
   16064:	andeq	lr, r1, ip, lsl #13
   16068:	ldrdeq	ip, [r1], -r8
   1606c:	strdeq	ip, [r1], -r0
   16070:	andeq	ip, r1, r0, ror sp
   16074:	muleq	r1, r4, r6
   16078:	andeq	ip, r1, r0, ror #28
   1607c:	andeq	ip, r1, ip, lsl pc
   16080:	andeq	ip, r1, r4, lsl #31
   16084:	andeq	ip, r1, r0, ror #25
   16088:	andeq	lr, r1, r0, lsr #13
   1608c:	andeq	lr, r1, r8, lsr #13
   16090:			; <UNDEFINED> instruction: 0x0001e6b0
   16094:	andeq	ip, r1, r8, ror #23
   16098:	andeq	ip, r1, r0, lsl #24
   1609c:	andeq	ip, r1, r4, lsr #25
   160a0:	andeq	lr, r1, r8, asr #13
   160a4:	andeq	ip, r1, r0, ror #26
   160a8:	andeq	ip, r1, ip, lsl #27
   160ac:	andeq	ip, r1, ip, asr #27
   160b0:	andeq	ip, r1, r8, lsr #29
   160b4:	andeq	ip, r1, r0, ror #31
   160b8:	ldrdeq	lr, [r1], -r4
   160bc:			; <UNDEFINED> instruction: 0x0001e6b8
   160c0:	andeq	lr, r1, r0, asr #13
   160c4:	muleq	r1, ip, ip
   160c8:	ldr	r1, [pc, #-128]	; 16050 <__assert_fail@plt+0x47fc>
   160cc:	ldr	r0, [pc, #-128]	; 16054 <__assert_fail@plt+0x4800>
   160d0:	bl	117e8 <setmntent@plt>
   160d4:	subs	r5, r0, #0
   160d8:	beq	16454 <__assert_fail@plt+0x4c00>
   160dc:	ldr	r8, [pc, #-140]	; 16058 <__assert_fail@plt+0x4804>
   160e0:	ldr	r7, [pc, #-140]	; 1605c <__assert_fail@plt+0x4808>
   160e4:	ldr	r9, [pc, #-140]	; 16060 <__assert_fail@plt+0x480c>
   160e8:	add	sl, sp, #40	; 0x28
   160ec:	mov	r0, r5
   160f0:	bl	115b4 <getmntent@plt>
   160f4:	subs	r6, r0, #0
   160f8:	beq	1639c <__assert_fail@plt+0x4b48>
   160fc:	mov	r1, r8
   16100:	bl	11578 <hasmntopt@plt>
   16104:	mov	fp, r0
   16108:	mov	r0, #32
   1610c:	bl	1a860 <__assert_fail@plt+0x900c>
   16110:	mov	r4, r0
   16114:	ldr	r0, [r6]
   16118:	bl	1ad8c <__assert_fail@plt+0x9538>
   1611c:	str	r0, [r4]
   16120:	ldr	r0, [r6, #4]
   16124:	bl	1ad8c <__assert_fail@plt+0x9538>
   16128:	mov	r3, #0
   1612c:	stmib	r4, {r0, r3}
   16130:	ldr	r0, [r6, #8]
   16134:	bl	1ad8c <__assert_fail@plt+0x9538>
   16138:	ldrb	r3, [r4, #24]
   1613c:	mov	r1, r7
   16140:	orr	r3, r3, #4
   16144:	strb	r3, [r4, #24]
   16148:	str	r0, [r4, #12]
   1614c:	mov	r6, r0
   16150:	bl	11464 <strcmp@plt>
   16154:	cmp	r0, #0
   16158:	beq	1626c <__assert_fail@plt+0x4a18>
   1615c:	mov	r1, r9
   16160:	mov	r0, r6
   16164:	bl	11464 <strcmp@plt>
   16168:	cmp	r0, #0
   1616c:	beq	1626c <__assert_fail@plt+0x4a18>
   16170:	ldr	r1, [pc, #-276]	; 16064 <__assert_fail@plt+0x4810>
   16174:	mov	r0, r6
   16178:	bl	11464 <strcmp@plt>
   1617c:	cmp	r0, #0
   16180:	beq	1626c <__assert_fail@plt+0x4a18>
   16184:	ldr	r1, [pc, #-292]	; 16068 <__assert_fail@plt+0x4814>
   16188:	mov	r0, r6
   1618c:	bl	11464 <strcmp@plt>
   16190:	cmp	r0, #0
   16194:	beq	1626c <__assert_fail@plt+0x4a18>
   16198:	ldr	r1, [pc, #-308]	; 1606c <__assert_fail@plt+0x4818>
   1619c:	mov	r0, r6
   161a0:	bl	11464 <strcmp@plt>
   161a4:	cmp	r0, #0
   161a8:	beq	1626c <__assert_fail@plt+0x4a18>
   161ac:	ldr	r1, [pc, #-324]	; 16070 <__assert_fail@plt+0x481c>
   161b0:	mov	r0, r6
   161b4:	bl	11464 <strcmp@plt>
   161b8:	cmp	r0, #0
   161bc:	beq	1626c <__assert_fail@plt+0x4a18>
   161c0:	ldr	r1, [pc, #-340]	; 16074 <__assert_fail@plt+0x4820>
   161c4:	mov	r0, r6
   161c8:	bl	11464 <strcmp@plt>
   161cc:	cmp	r0, #0
   161d0:	beq	1626c <__assert_fail@plt+0x4a18>
   161d4:	ldr	r1, [pc, #-356]	; 16078 <__assert_fail@plt+0x4824>
   161d8:	mov	r0, r6
   161dc:	bl	11464 <strcmp@plt>
   161e0:	cmp	r0, #0
   161e4:	beq	1626c <__assert_fail@plt+0x4a18>
   161e8:	ldr	r1, [pc, #-372]	; 1607c <__assert_fail@plt+0x4828>
   161ec:	mov	r0, r6
   161f0:	bl	11464 <strcmp@plt>
   161f4:	cmp	r0, #0
   161f8:	beq	1626c <__assert_fail@plt+0x4a18>
   161fc:	ldr	r1, [pc, #-388]	; 16080 <__assert_fail@plt+0x482c>
   16200:	mov	r0, r6
   16204:	bl	11464 <strcmp@plt>
   16208:	cmp	r0, #0
   1620c:	beq	1626c <__assert_fail@plt+0x4a18>
   16210:	ldr	r1, [pc, #-404]	; 16084 <__assert_fail@plt+0x4830>
   16214:	mov	r0, r6
   16218:	bl	11464 <strcmp@plt>
   1621c:	cmp	r0, #0
   16220:	beq	1626c <__assert_fail@plt+0x4a18>
   16224:	ldr	r1, [pc, #-420]	; 16088 <__assert_fail@plt+0x4834>
   16228:	mov	r0, r6
   1622c:	bl	11464 <strcmp@plt>
   16230:	cmp	r0, #0
   16234:	beq	1626c <__assert_fail@plt+0x4a18>
   16238:	ldr	r1, [pc, #-436]	; 1608c <__assert_fail@plt+0x4838>
   1623c:	mov	r0, r6
   16240:	bl	11464 <strcmp@plt>
   16244:	cmp	r0, #0
   16248:	beq	1626c <__assert_fail@plt+0x4a18>
   1624c:	ldr	r1, [pc, #-452]	; 16090 <__assert_fail@plt+0x483c>
   16250:	mov	r0, r6
   16254:	bl	11464 <strcmp@plt>
   16258:	cmp	r0, #0
   1625c:	cmpeq	fp, #0
   16260:	moveq	r0, #1
   16264:	movne	r0, #0
   16268:	b	16270 <__assert_fail@plt+0x4a1c>
   1626c:	mov	r0, #1
   16270:	ldrb	r3, [r4, #24]
   16274:	ldr	fp, [r4]
   16278:	mov	r1, #58	; 0x3a
   1627c:	bic	r3, r3, #1
   16280:	orr	r3, r0, r3
   16284:	strb	r3, [r4, #24]
   16288:	mov	r0, fp
   1628c:	bl	11680 <strchr@plt>
   16290:	cmp	r0, #0
   16294:	beq	162c4 <__assert_fail@plt+0x4a70>
   16298:	mov	r1, #1
   1629c:	ldrb	r0, [r4, #24]
   162a0:	mvn	r2, #0
   162a4:	mvn	r3, #0
   162a8:	bic	r0, r0, #2
   162ac:	orr	r0, r0, r1, lsl #1
   162b0:	strb	r0, [r4, #24]
   162b4:	strd	r2, [r4, #16]
   162b8:	str	r4, [sl]
   162bc:	add	sl, r4, #28
   162c0:	b	160ec <__assert_fail@plt+0x4898>
   162c4:	ldrb	r3, [fp]
   162c8:	cmp	r3, #47	; 0x2f
   162cc:	beq	16408 <__assert_fail@plt+0x4bb4>
   162d0:	ldr	r1, [pc, #-580]	; 16094 <__assert_fail@plt+0x4840>
   162d4:	mov	r0, r6
   162d8:	bl	11464 <strcmp@plt>
   162dc:	cmp	r0, #0
   162e0:	beq	16298 <__assert_fail@plt+0x4a44>
   162e4:	ldr	r1, [pc, #-596]	; 16098 <__assert_fail@plt+0x4844>
   162e8:	mov	r0, r6
   162ec:	bl	11464 <strcmp@plt>
   162f0:	cmp	r0, #0
   162f4:	beq	16298 <__assert_fail@plt+0x4a44>
   162f8:	ldr	r1, [pc, #-612]	; 1609c <__assert_fail@plt+0x4848>
   162fc:	mov	r0, r6
   16300:	bl	11464 <strcmp@plt>
   16304:	cmp	r0, #0
   16308:	beq	16298 <__assert_fail@plt+0x4a44>
   1630c:	ldr	r1, [pc, #-628]	; 160a0 <__assert_fail@plt+0x484c>
   16310:	mov	r0, r6
   16314:	bl	11464 <strcmp@plt>
   16318:	cmp	r0, #0
   1631c:	beq	16298 <__assert_fail@plt+0x4a44>
   16320:	ldr	r1, [pc, #-644]	; 160a4 <__assert_fail@plt+0x4850>
   16324:	mov	r0, r6
   16328:	bl	11464 <strcmp@plt>
   1632c:	cmp	r0, #0
   16330:	beq	16298 <__assert_fail@plt+0x4a44>
   16334:	ldr	r1, [pc, #-660]	; 160a8 <__assert_fail@plt+0x4854>
   16338:	mov	r0, r6
   1633c:	bl	11464 <strcmp@plt>
   16340:	cmp	r0, #0
   16344:	beq	16298 <__assert_fail@plt+0x4a44>
   16348:	ldr	r1, [pc, #-676]	; 160ac <__assert_fail@plt+0x4858>
   1634c:	mov	r0, r6
   16350:	bl	11464 <strcmp@plt>
   16354:	cmp	r0, #0
   16358:	beq	16298 <__assert_fail@plt+0x4a44>
   1635c:	ldr	r1, [pc, #-692]	; 160b0 <__assert_fail@plt+0x485c>
   16360:	mov	r0, r6
   16364:	bl	11464 <strcmp@plt>
   16368:	cmp	r0, #0
   1636c:	beq	16298 <__assert_fail@plt+0x4a44>
   16370:	mov	r0, r6
   16374:	ldr	r1, [pc, #-712]	; 160b4 <__assert_fail@plt+0x4860>
   16378:	bl	11464 <strcmp@plt>
   1637c:	cmp	r0, #0
   16380:	beq	16298 <__assert_fail@plt+0x4a44>
   16384:	mov	r1, fp
   16388:	ldr	r0, [pc, #-728]	; 160b8 <__assert_fail@plt+0x4864>
   1638c:	bl	11464 <strcmp@plt>
   16390:	clz	r1, r0
   16394:	lsr	r1, r1, #5
   16398:	b	1629c <__assert_fail@plt+0x4a48>
   1639c:	mov	r0, r5
   163a0:	bl	11740 <endmntent@plt>
   163a4:	cmp	r0, #0
   163a8:	bne	15dfc <__assert_fail@plt+0x45a8>
   163ac:	bl	116b0 <__errno_location@plt>
   163b0:	mov	r5, r0
   163b4:	ldr	r6, [r0]
   163b8:	b	15ff4 <__assert_fail@plt+0x47a0>
   163bc:	ldrb	r3, [r8, #1]
   163c0:	cmp	r3, #47	; 0x2f
   163c4:	bne	15f10 <__assert_fail@plt+0x46bc>
   163c8:	ldr	r1, [pc, #-788]	; 160bc <__assert_fail@plt+0x4868>
   163cc:	mov	r0, r6
   163d0:	bl	11464 <strcmp@plt>
   163d4:	cmp	r0, #0
   163d8:	beq	15db4 <__assert_fail@plt+0x4560>
   163dc:	ldr	r1, [pc, #-804]	; 160c0 <__assert_fail@plt+0x486c>
   163e0:	mov	r0, r6
   163e4:	bl	11464 <strcmp@plt>
   163e8:	cmp	r0, #0
   163ec:	beq	15db4 <__assert_fail@plt+0x4560>
   163f0:	ldr	r1, [pc, #-820]	; 160c4 <__assert_fail@plt+0x4870>
   163f4:	mov	r0, r6
   163f8:	bl	11464 <strcmp@plt>
   163fc:	cmp	r0, #0
   16400:	beq	15db4 <__assert_fail@plt+0x4560>
   16404:	b	15f10 <__assert_fail@plt+0x46bc>
   16408:	ldrb	r3, [fp, #1]
   1640c:	cmp	r3, #47	; 0x2f
   16410:	bne	162d0 <__assert_fail@plt+0x4a7c>
   16414:	ldr	r1, [pc, #-864]	; 160bc <__assert_fail@plt+0x4868>
   16418:	mov	r0, r6
   1641c:	bl	11464 <strcmp@plt>
   16420:	cmp	r0, #0
   16424:	beq	16298 <__assert_fail@plt+0x4a44>
   16428:	ldr	r1, [pc, #-880]	; 160c0 <__assert_fail@plt+0x486c>
   1642c:	mov	r0, r6
   16430:	bl	11464 <strcmp@plt>
   16434:	cmp	r0, #0
   16438:	beq	16298 <__assert_fail@plt+0x4a44>
   1643c:	ldr	r1, [pc, #-896]	; 160c4 <__assert_fail@plt+0x4870>
   16440:	mov	r0, r6
   16444:	bl	11464 <strcmp@plt>
   16448:	cmp	r0, #0
   1644c:	beq	16298 <__assert_fail@plt+0x4a44>
   16450:	b	162d0 <__assert_fail@plt+0x4a7c>
   16454:	mov	r0, r5
   16458:	b	15e08 <__assert_fail@plt+0x45b4>
   1645c:	push	{r4, r5, r6, lr}
   16460:	subs	r4, r2, #0
   16464:	mov	r6, r0
   16468:	beq	16494 <__assert_fail@plt+0x4c40>
   1646c:	mov	r5, r1
   16470:	bl	11614 <__ctype_tolower_loc@plt>
   16474:	add	r3, r5, r4
   16478:	add	r2, r6, r4
   1647c:	ldrb	lr, [r3, #-1]!
   16480:	ldr	ip, [r0]
   16484:	cmp	r5, r3
   16488:	ldr	ip, [ip, lr, lsl #2]
   1648c:	strb	ip, [r2, #-1]!
   16490:	bne	1647c <__assert_fail@plt+0x4c28>
   16494:	mov	r0, r6
   16498:	pop	{r4, r5, r6, pc}
   1649c:	push	{r4, r5, r6, lr}
   164a0:	subs	r4, r2, #0
   164a4:	mov	r6, r0
   164a8:	beq	164d4 <__assert_fail@plt+0x4c80>
   164ac:	mov	r5, r1
   164b0:	bl	11620 <__ctype_toupper_loc@plt>
   164b4:	add	r3, r5, r4
   164b8:	add	r2, r6, r4
   164bc:	ldrb	lr, [r3, #-1]!
   164c0:	ldr	ip, [r0]
   164c4:	cmp	r5, r3
   164c8:	ldr	ip, [ip, lr, lsl #2]
   164cc:	strb	ip, [r2, #-1]!
   164d0:	bne	164bc <__assert_fail@plt+0x4c68>
   164d4:	mov	r0, r6
   164d8:	pop	{r4, r5, r6, pc}
   164dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164e0:	sub	sp, sp, #1104	; 0x450
   164e4:	sub	sp, sp, #12
   164e8:	mov	r4, r3
   164ec:	str	r3, [sp, #32]
   164f0:	str	r1, [sp, #28]
   164f4:	mov	r9, r2
   164f8:	mov	fp, r0
   164fc:	bl	116b0 <__errno_location@plt>
   16500:	ldr	r3, [r4, #40]	; 0x28
   16504:	ldr	r2, [r4, #8]
   16508:	mov	r1, r3
   1650c:	ldr	r3, [pc, #3936]	; 17474 <__assert_fail@plt+0x5c20>
   16510:	mov	ip, r2
   16514:	str	r2, [sp, #48]	; 0x30
   16518:	subs	r2, r1, #0
   1651c:	moveq	r2, r3
   16520:	cmp	ip, #12
   16524:	str	r2, [sp, #56]	; 0x38
   16528:	ldr	r6, [sp, #1160]	; 0x488
   1652c:	ldr	r3, [r0]
   16530:	str	r0, [sp, #44]	; 0x2c
   16534:	str	r3, [sp, #60]	; 0x3c
   16538:	ldrb	r3, [sp, #1152]	; 0x480
   1653c:	str	r3, [sp, #52]	; 0x34
   16540:	ble	169c8 <__assert_fail@plt+0x5174>
   16544:	mov	r2, ip
   16548:	sub	r3, ip, #12
   1654c:	str	r3, [sp, #48]	; 0x30
   16550:	ldrb	r3, [r9]
   16554:	cmp	r3, #0
   16558:	beq	17b0c <__assert_fail@plt+0x62b8>
   1655c:	ldr	sl, [pc, #3860]	; 17478 <__assert_fail@plt+0x5c24>
   16560:	mov	r8, #0
   16564:	cmp	r3, #37	; 0x25
   16568:	beq	16634 <__assert_fail@plt+0x4de0>
   1656c:	bic	r6, r6, r6, asr #31
   16570:	ldr	r3, [sp, #28]
   16574:	cmp	r6, #1
   16578:	movcs	r4, r6
   1657c:	movcc	r4, #1
   16580:	sub	r3, r3, r8
   16584:	cmp	r4, r3
   16588:	bcs	16614 <__assert_fail@plt+0x4dc0>
   1658c:	cmp	fp, #0
   16590:	beq	165bc <__assert_fail@plt+0x4d68>
   16594:	cmp	r6, #1
   16598:	ble	165b4 <__assert_fail@plt+0x4d60>
   1659c:	sub	r6, r6, #1
   165a0:	mov	r0, fp
   165a4:	mov	r2, r6
   165a8:	mov	r1, #32
   165ac:	bl	116e0 <memset@plt>
   165b0:	add	fp, fp, r6
   165b4:	ldrb	r3, [r9]
   165b8:	strb	r3, [fp], #1
   165bc:	add	r8, r8, r4
   165c0:	mov	r4, r9
   165c4:	ldrb	r3, [r4, #1]
   165c8:	add	r9, r4, #1
   165cc:	mvn	r6, #0
   165d0:	cmp	r3, #0
   165d4:	bne	16564 <__assert_fail@plt+0x4d10>
   165d8:	ldr	r3, [sp, #28]
   165dc:	ldr	r2, [sp, #60]	; 0x3c
   165e0:	cmp	fp, #0
   165e4:	cmpne	r3, #0
   165e8:	movne	r3, #0
   165ec:	strbne	r3, [fp]
   165f0:	ldr	r3, [sp, #44]	; 0x2c
   165f4:	str	r2, [r3]
   165f8:	b	16624 <__assert_fail@plt+0x4dd0>
   165fc:	ldr	r2, [sp, #28]
   16600:	add	r8, r8, r7
   16604:	sub	r2, r2, r8
   16608:	cmp	r2, #1
   1660c:	sub	r6, r6, r7
   16610:	bhi	16dc8 <__assert_fail@plt+0x5574>
   16614:	ldr	r2, [sp, #44]	; 0x2c
   16618:	mov	r3, #34	; 0x22
   1661c:	str	r3, [r2]
   16620:	mov	r8, #0
   16624:	mov	r0, r8
   16628:	add	sp, sp, #1104	; 0x450
   1662c:	add	sp, sp, #12
   16630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16634:	ldr	r3, [sp, #52]	; 0x34
   16638:	mov	r4, r9
   1663c:	mov	r5, #0
   16640:	str	r5, [sp, #24]
   16644:	str	r3, [sp, #40]	; 0x28
   16648:	ldrb	r1, [r4, #1]!
   1664c:	sub	r3, r1, #35	; 0x23
   16650:	mov	r7, r1
   16654:	cmp	r3, #60	; 0x3c
   16658:	ldrls	pc, [pc, r3, lsl #2]
   1665c:	b	16770 <__assert_fail@plt+0x4f1c>
   16660:	andeq	r6, r1, r8, ror #14
   16664:	andeq	r6, r1, r0, ror r7
   16668:	andeq	r6, r1, r0, ror r7
   1666c:	andeq	r6, r1, r0, ror r7
   16670:	andeq	r6, r1, r0, ror r7
   16674:	andeq	r6, r1, r0, ror r7
   16678:	andeq	r6, r1, r0, ror r7
   1667c:	andeq	r6, r1, r0, ror r7
   16680:	andeq	r6, r1, r0, ror #14
   16684:	andeq	r6, r1, r0, ror r7
   16688:	andeq	r6, r1, r0, ror #14
   1668c:	andeq	r6, r1, r0, ror r7
   16690:	andeq	r6, r1, r0, ror r7
   16694:	andeq	r6, r1, r0, ror #14
   16698:	andeq	r6, r1, r0, ror r7
   1669c:	andeq	r6, r1, r0, ror r7
   166a0:	andeq	r6, r1, r0, ror r7
   166a4:	andeq	r6, r1, r0, ror r7
   166a8:	andeq	r6, r1, r0, ror r7
   166ac:	andeq	r6, r1, r0, ror r7
   166b0:	andeq	r6, r1, r0, ror r7
   166b4:	andeq	r6, r1, r0, ror r7
   166b8:	andeq	r6, r1, r0, ror r7
   166bc:	andeq	r6, r1, r0, ror r7
   166c0:	andeq	r6, r1, r0, ror r7
   166c4:	andeq	r6, r1, r0, ror r7
   166c8:	andeq	r6, r1, r0, ror r7
   166cc:	andeq	r6, r1, r0, ror r7
   166d0:	andeq	r6, r1, r0, ror r7
   166d4:	andeq	r6, r1, r0, ror r7
   166d8:	andeq	r6, r1, r0, ror r7
   166dc:	andeq	r6, r1, r0, ror r7
   166e0:	andeq	r6, r1, r0, ror r7
   166e4:	andeq	r6, r1, r0, ror r7
   166e8:	andeq	r6, r1, r0, ror r7
   166ec:	andeq	r6, r1, r0, ror r7
   166f0:	andeq	r6, r1, r0, ror r7
   166f4:	andeq	r6, r1, r0, ror r7
   166f8:	andeq	r6, r1, r0, ror r7
   166fc:	andeq	r6, r1, r0, ror r7
   16700:	andeq	r6, r1, r0, ror r7
   16704:	andeq	r6, r1, r0, ror r7
   16708:	andeq	r6, r1, r0, ror r7
   1670c:	andeq	r6, r1, r0, ror r7
   16710:	andeq	r6, r1, r0, ror r7
   16714:	andeq	r6, r1, r0, ror r7
   16718:	andeq	r6, r1, r0, ror r7
   1671c:	andeq	r6, r1, r0, ror r7
   16720:	andeq	r6, r1, r0, ror r7
   16724:	andeq	r6, r1, r0, ror r7
   16728:	andeq	r6, r1, r0, ror r7
   1672c:	andeq	r6, r1, r0, ror r7
   16730:	andeq	r6, r1, r0, ror r7
   16734:	andeq	r6, r1, r0, ror r7
   16738:	andeq	r6, r1, r0, ror r7
   1673c:	andeq	r6, r1, r0, ror r7
   16740:	andeq	r6, r1, r0, ror r7
   16744:	andeq	r6, r1, r0, ror r7
   16748:	andeq	r6, r1, r0, ror r7
   1674c:	andeq	r6, r1, r4, asr r7
   16750:	andeq	r6, r1, r0, ror #14
   16754:	mov	r3, #1
   16758:	str	r3, [sp, #40]	; 0x28
   1675c:	b	16648 <__assert_fail@plt+0x4df4>
   16760:	str	r1, [sp, #24]
   16764:	b	16648 <__assert_fail@plt+0x4df4>
   16768:	mov	r5, #1
   1676c:	b	16648 <__assert_fail@plt+0x4df4>
   16770:	sub	r3, r1, #48	; 0x30
   16774:	cmp	r3, #9
   16778:	bhi	167bc <__assert_fail@plt+0x4f68>
   1677c:	mov	r6, #0
   16780:	mvn	r7, #-2147483648	; 0x80000000
   16784:	cmp	r6, #0
   16788:	blt	16a8c <__assert_fail@plt+0x5238>
   1678c:	ldr	r3, [pc, #3304]	; 1747c <__assert_fail@plt+0x5c28>
   16790:	cmp	r6, r3
   16794:	ble	16aa8 <__assert_fail@plt+0x5254>
   16798:	mov	r3, r4
   1679c:	ldrb	r1, [r3, #1]
   167a0:	add	r4, r3, #1
   167a4:	mov	r3, r4
   167a8:	sub	r2, r1, #48	; 0x30
   167ac:	cmp	r2, #9
   167b0:	bls	1679c <__assert_fail@plt+0x4f48>
   167b4:	mov	r7, r1
   167b8:	mvn	r6, #-2147483648	; 0x80000000
   167bc:	cmp	r1, #69	; 0x45
   167c0:	beq	169dc <__assert_fail@plt+0x5188>
   167c4:	cmp	r1, #79	; 0x4f
   167c8:	movne	r7, #0
   167cc:	beq	169dc <__assert_fail@plt+0x5188>
   167d0:	cmp	r1, #122	; 0x7a
   167d4:	ldrls	pc, [pc, r1, lsl #2]
   167d8:	b	169ec <__assert_fail@plt+0x5198>
   167dc:	andeq	r6, r1, r8, ror #19
   167e0:	andeq	r6, r1, ip, ror #19
   167e4:	andeq	r6, r1, ip, ror #19
   167e8:	andeq	r6, r1, ip, ror #19
   167ec:	andeq	r6, r1, ip, ror #19
   167f0:	andeq	r6, r1, ip, ror #19
   167f4:	andeq	r6, r1, ip, ror #19
   167f8:	andeq	r6, r1, ip, ror #19
   167fc:	andeq	r6, r1, ip, ror #19
   16800:	andeq	r6, r1, ip, ror #19
   16804:	andeq	r6, r1, ip, ror #19
   16808:	andeq	r6, r1, ip, ror #19
   1680c:	andeq	r6, r1, ip, ror #19
   16810:	andeq	r6, r1, ip, ror #19
   16814:	andeq	r6, r1, ip, ror #19
   16818:	andeq	r6, r1, ip, ror #19
   1681c:	andeq	r6, r1, ip, ror #19
   16820:	andeq	r6, r1, ip, ror #19
   16824:	andeq	r6, r1, ip, ror #19
   16828:	andeq	r6, r1, ip, ror #19
   1682c:	andeq	r6, r1, ip, ror #19
   16830:	andeq	r6, r1, ip, ror #19
   16834:	andeq	r6, r1, ip, ror #19
   16838:	andeq	r6, r1, ip, ror #19
   1683c:	andeq	r6, r1, ip, ror #19
   16840:	andeq	r6, r1, ip, ror #19
   16844:	andeq	r6, r1, ip, ror #19
   16848:	andeq	r6, r1, ip, ror #19
   1684c:	andeq	r6, r1, ip, ror #19
   16850:	andeq	r6, r1, ip, ror #19
   16854:	andeq	r6, r1, ip, ror #19
   16858:	andeq	r6, r1, ip, ror #19
   1685c:	andeq	r6, r1, ip, ror #19
   16860:	andeq	r6, r1, ip, ror #19
   16864:	andeq	r6, r1, ip, ror #19
   16868:	andeq	r6, r1, ip, ror #19
   1686c:	andeq	r6, r1, ip, ror #19
   16870:	strdeq	r7, [r1], -ip
   16874:	andeq	r6, r1, ip, ror #19
   16878:	andeq	r6, r1, ip, ror #19
   1687c:	andeq	r6, r1, ip, ror #19
   16880:	andeq	r6, r1, ip, ror #19
   16884:	andeq	r6, r1, ip, ror #19
   16888:	andeq	r6, r1, ip, ror #19
   1688c:	andeq	r6, r1, ip, ror #19
   16890:	andeq	r6, r1, ip, ror #19
   16894:	andeq	r6, r1, ip, ror #19
   16898:	andeq	r6, r1, ip, ror #19
   1689c:	andeq	r6, r1, ip, ror #19
   168a0:	andeq	r6, r1, ip, ror #19
   168a4:	andeq	r6, r1, ip, ror #19
   168a8:	andeq	r6, r1, ip, ror #19
   168ac:	andeq	r6, r1, ip, ror #19
   168b0:	andeq	r6, r1, ip, ror #19
   168b4:	andeq	r6, r1, ip, ror #19
   168b8:	andeq	r6, r1, ip, ror #19
   168bc:	andeq	r6, r1, ip, ror #19
   168c0:	andeq	r6, r1, ip, ror #19
   168c4:	strdeq	r7, [r1], -ip
   168c8:	andeq	r6, r1, ip, ror #19
   168cc:	andeq	r6, r1, ip, ror #19
   168d0:	andeq	r6, r1, ip, ror #19
   168d4:	andeq	r6, r1, ip, ror #19
   168d8:	andeq	r6, r1, ip, ror #19
   168dc:	andeq	r6, r1, ip, ror #19
   168e0:	andeq	r6, r1, r4, ror lr
   168e4:	andeq	r6, r1, r0, asr fp
   168e8:	andeq	r7, r1, r8, lsl r2
   168ec:	andeq	r7, r1, r8, lsl #2
   168f0:	andeq	r6, r1, ip, ror #19
   168f4:	ldrdeq	r7, [r1], -ip
   168f8:	andeq	r7, r1, r4, asr r5
   168fc:	andeq	r7, r1, ip, asr sl
   16900:	andeq	r7, r1, r8, lsl #14
   16904:	andeq	r6, r1, ip, ror #19
   16908:	andeq	r6, r1, ip, ror #19
   1690c:	andeq	r6, r1, ip, ror #19
   16910:	andeq	r7, r1, r4, ror #15
   16914:	andeq	r7, r1, r0, asr #17
   16918:	andeq	r6, r1, ip, ror #19
   1691c:			; <UNDEFINED> instruction: 0x000178b8
   16920:	andeq	r6, r1, ip, ror #19
   16924:	andeq	r7, r1, ip, lsr #17
   16928:	muleq	r1, r4, r8
   1692c:	andeq	r7, r1, r8, lsl #17
   16930:	andeq	r7, r1, r4, lsr #5
   16934:	andeq	r7, r1, r4, asr r5
   16938:	andeq	r7, r1, r0, lsr #20
   1693c:	andeq	r6, r1, r8, ror #28
   16940:	andeq	r7, r1, r0, lsr #1
   16944:	strdeq	r6, [r1], -r0
   16948:	andeq	r6, r1, ip, ror #19
   1694c:	andeq	r6, r1, ip, ror #19
   16950:	andeq	r6, r1, ip, ror #19
   16954:	andeq	r6, r1, ip, ror #19
   16958:	andeq	r6, r1, ip, ror #19
   1695c:	andeq	r6, r1, ip, ror #19
   16960:	andeq	r6, r1, r4, ror lr
   16964:	andeq	r6, r1, r8, ror #30
   16968:	andeq	r6, r1, r8, ror #28
   1696c:	andeq	r6, r1, r8, ror ip
   16970:	andeq	r7, r1, r8, lsl r3
   16974:	andeq	r6, r1, ip, ror #19
   16978:	andeq	r7, r1, r4, asr r5
   1697c:	andeq	r6, r1, r8, ror #30
   16980:	andeq	r6, r1, ip, ror #19
   16984:	ldrdeq	r7, [r1], -ip
   16988:	andeq	r7, r1, ip, lsl #8
   1698c:	strdeq	r7, [r1], -ip
   16990:	andeq	r7, r1, r0, asr #7
   16994:	andeq	r7, r1, r0, asr #6
   16998:	andeq	r6, r1, ip, ror #19
   1699c:	andeq	r7, r1, r4, asr r4
   169a0:	andeq	r7, r1, r0, lsr #8
   169a4:	andeq	r6, r1, r4, ror #22
   169a8:			; <UNDEFINED> instruction: 0x000174bc
   169ac:	andeq	r7, r1, r8, ror #14
   169b0:	andeq	r7, r1, r4, lsr r7
   169b4:	andeq	r6, r1, ip, ror #19
   169b8:	andeq	r7, r1, ip, lsl r7
   169bc:	andeq	r6, r1, r8, ror #28
   169c0:	andeq	r6, r1, ip, lsl #31
   169c4:	andeq	r6, r1, ip, lsr #29
   169c8:	ldr	r2, [sp, #48]	; 0x30
   169cc:	subs	r3, r2, #0
   169d0:	moveq	r3, #12
   169d4:	str	r3, [sp, #48]	; 0x30
   169d8:	b	16550 <__assert_fail@plt+0x4cfc>
   169dc:	ldrb	r1, [r4, #1]
   169e0:	add	r4, r4, #1
   169e4:	b	167d0 <__assert_fail@plt+0x4f7c>
   169e8:	sub	r4, r4, #1
   169ec:	ldr	r3, [sp, #24]
   169f0:	sub	r5, r4, r9
   169f4:	subs	r3, r3, #45	; 0x2d
   169f8:	movne	r3, #1
   169fc:	cmp	r6, #0
   16a00:	movlt	r3, #0
   16a04:	cmp	r3, #0
   16a08:	add	r5, r5, #1
   16a0c:	moveq	r6, #0
   16a10:	ldr	r3, [sp, #28]
   16a14:	cmp	r5, r6
   16a18:	movcs	r7, r5
   16a1c:	movcc	r7, r6
   16a20:	sub	r3, r3, r8
   16a24:	cmp	r7, r3
   16a28:	bcs	16614 <__assert_fail@plt+0x4dc0>
   16a2c:	cmp	fp, #0
   16a30:	beq	16a84 <__assert_fail@plt+0x5230>
   16a34:	cmp	r5, r6
   16a38:	bcs	16a64 <__assert_fail@plt+0x5210>
   16a3c:	ldr	r3, [sp, #24]
   16a40:	sub	r6, r6, r5
   16a44:	cmp	r3, #43	; 0x2b
   16a48:	cmpne	r3, #48	; 0x30
   16a4c:	mov	r0, fp
   16a50:	mov	r2, r6
   16a54:	moveq	r1, #48	; 0x30
   16a58:	movne	r1, #32
   16a5c:	bl	116e0 <memset@plt>
   16a60:	add	fp, fp, r6
   16a64:	ldr	r3, [sp, #40]	; 0x28
   16a68:	mov	r1, r9
   16a6c:	cmp	r3, #0
   16a70:	mov	r2, r5
   16a74:	mov	r0, fp
   16a78:	beq	16e60 <__assert_fail@plt+0x560c>
   16a7c:	bl	1649c <__assert_fail@plt+0x4c48>
   16a80:	add	fp, fp, r5
   16a84:	add	r8, r8, r7
   16a88:	b	165c4 <__assert_fail@plt+0x4d70>
   16a8c:	cmn	r6, #1
   16a90:	beq	16b24 <__assert_fail@plt+0x52d0>
   16a94:	mov	r1, r6
   16a98:	mov	r0, #-2147483648	; 0x80000000
   16a9c:	bl	1c4f4 <__assert_fail@plt+0xaca0>
   16aa0:	cmp	r0, #9
   16aa4:	ble	16798 <__assert_fail@plt+0x4f44>
   16aa8:	ldrb	r0, [r4]
   16aac:	add	r6, r6, r6, lsl #2
   16ab0:	cmp	r0, #47	; 0x2f
   16ab4:	lsl	r3, r6, #1
   16ab8:	mov	r1, r3
   16abc:	ble	16b3c <__assert_fail@plt+0x52e8>
   16ac0:	cmp	r3, #0
   16ac4:	blt	16b00 <__assert_fail@plt+0x52ac>
   16ac8:	sub	r2, r0, #48	; 0x30
   16acc:	sub	r2, r7, r2
   16ad0:	cmp	r3, r2
   16ad4:	movle	r2, #0
   16ad8:	movgt	r2, #1
   16adc:	cmp	r2, #0
   16ae0:	beq	16b00 <__assert_fail@plt+0x52ac>
   16ae4:	ldrb	r1, [r4, #1]
   16ae8:	add	r3, r4, #1
   16aec:	sub	r2, r1, #48	; 0x30
   16af0:	cmp	r2, #9
   16af4:	bls	1679c <__assert_fail@plt+0x4f48>
   16af8:	mov	r4, r3
   16afc:	b	167b4 <__assert_fail@plt+0x4f60>
   16b00:	ldrb	r1, [r4, #1]
   16b04:	add	r3, r0, r3
   16b08:	sub	r6, r3, #48	; 0x30
   16b0c:	sub	r3, r1, #48	; 0x30
   16b10:	cmp	r3, #9
   16b14:	add	r4, r4, #1
   16b18:	bls	16784 <__assert_fail@plt+0x4f30>
   16b1c:	mov	r7, r1
   16b20:	b	167bc <__assert_fail@plt+0x4f68>
   16b24:	ldrb	r0, [r4]
   16b28:	cmp	r0, #47	; 0x2f
   16b2c:	mvngt	r3, #9
   16b30:	bgt	16b00 <__assert_fail@plt+0x52ac>
   16b34:	mvn	r1, #9
   16b38:	mov	r3, r1
   16b3c:	rsb	r2, r0, #-2147483600	; 0x80000030
   16b40:	cmp	r2, r1
   16b44:	movle	r2, #0
   16b48:	movgt	r2, #1
   16b4c:	b	16adc <__assert_fail@plt+0x5288>
   16b50:	cmp	r7, #69	; 0x45
   16b54:	beq	169ec <__assert_fail@plt+0x5198>
   16b58:	cmp	r5, #0
   16b5c:	beq	16b68 <__assert_fail@plt+0x5314>
   16b60:	str	r5, [sp, #40]	; 0x28
   16b64:	mov	r5, #0
   16b68:	cmp	r7, #0
   16b6c:	mov	r2, #32
   16b70:	mov	r3, #37	; 0x25
   16b74:	strb	r2, [sp, #72]	; 0x48
   16b78:	strb	r3, [sp, #73]	; 0x49
   16b7c:	addeq	r9, sp, #72	; 0x48
   16b80:	addeq	ip, sp, #74	; 0x4a
   16b84:	bne	16c68 <__assert_fail@plt+0x5414>
   16b88:	mov	lr, #0
   16b8c:	strb	r1, [ip]
   16b90:	mov	r2, r9
   16b94:	add	r0, sp, #88	; 0x58
   16b98:	ldr	r3, [sp, #32]
   16b9c:	strb	lr, [ip, #1]
   16ba0:	mov	r1, #1024	; 0x400
   16ba4:	bl	115fc <strftime@plt>
   16ba8:	cmp	r0, #0
   16bac:	beq	165c4 <__assert_fail@plt+0x4d70>
   16bb0:	ldr	r2, [sp, #24]
   16bb4:	mvn	r3, r6
   16bb8:	cmp	r2, #45	; 0x2d
   16bbc:	lsr	r3, r3, #31
   16bc0:	moveq	r3, #0
   16bc4:	cmp	r3, #0
   16bc8:	sub	r7, r0, #1
   16bcc:	moveq	r6, #0
   16bd0:	ldr	r3, [sp, #28]
   16bd4:	cmp	r7, r6
   16bd8:	movcs	r9, r7
   16bdc:	movcc	r9, r6
   16be0:	sub	r3, r3, r8
   16be4:	cmp	r9, r3
   16be8:	bcs	16614 <__assert_fail@plt+0x4dc0>
   16bec:	cmp	fp, #0
   16bf0:	beq	16c4c <__assert_fail@plt+0x53f8>
   16bf4:	cmp	r7, r6
   16bf8:	bcs	16c24 <__assert_fail@plt+0x53d0>
   16bfc:	ldr	r3, [sp, #24]
   16c00:	sub	r6, r6, r7
   16c04:	cmp	r3, #43	; 0x2b
   16c08:	cmpne	r3, #48	; 0x30
   16c0c:	mov	r0, fp
   16c10:	mov	r2, r6
   16c14:	moveq	r1, #48	; 0x30
   16c18:	movne	r1, #32
   16c1c:	bl	116e0 <memset@plt>
   16c20:	add	fp, fp, r6
   16c24:	cmp	r5, #0
   16c28:	bne	17a94 <__assert_fail@plt+0x6240>
   16c2c:	ldr	r3, [sp, #40]	; 0x28
   16c30:	add	r1, sp, #89	; 0x59
   16c34:	cmp	r3, #0
   16c38:	mov	r2, r7
   16c3c:	mov	r0, fp
   16c40:	beq	16e58 <__assert_fail@plt+0x5604>
   16c44:	bl	1649c <__assert_fail@plt+0x4c48>
   16c48:	add	fp, fp, r7
   16c4c:	add	r8, r8, r9
   16c50:	b	165c4 <__assert_fail@plt+0x4d70>
   16c54:	mov	r5, #0
   16c58:	mov	r2, #32
   16c5c:	mov	r3, #37	; 0x25
   16c60:	strb	r2, [sp, #72]	; 0x48
   16c64:	strb	r3, [sp, #73]	; 0x49
   16c68:	add	r9, sp, #72	; 0x48
   16c6c:	strb	r7, [sp, #74]	; 0x4a
   16c70:	add	ip, r9, #3
   16c74:	b	16b88 <__assert_fail@plt+0x5334>
   16c78:	cmp	r7, #69	; 0x45
   16c7c:	beq	169ec <__assert_fail@plt+0x5198>
   16c80:	ldr	r3, [sp, #32]
   16c84:	mov	lr, #2
   16c88:	ldr	r2, [r3, #12]
   16c8c:	mov	r3, r2
   16c90:	mov	r0, #0
   16c94:	lsr	r2, r2, #31
   16c98:	cmp	r3, r0
   16c9c:	str	r2, [sp, #36]	; 0x24
   16ca0:	mov	ip, r0
   16ca4:	movlt	r2, #0
   16ca8:	movge	r2, #1
   16cac:	cmp	r7, #79	; 0x4f
   16cb0:	movne	r2, #0
   16cb4:	andeq	r2, r2, #1
   16cb8:	cmp	r2, #0
   16cbc:	uxtbne	r1, r1
   16cc0:	bne	16c54 <__assert_fail@plt+0x5400>
   16cc4:	ldr	r2, [sp, #36]	; 0x24
   16cc8:	cmp	r2, #0
   16ccc:	rsbne	r3, r3, #0
   16cd0:	add	r9, sp, #72	; 0x48
   16cd4:	add	r5, r9, #14
   16cd8:	mov	r2, r5
   16cdc:	mov	r5, r3
   16ce0:	mov	r3, r2
   16ce4:	tst	r0, #1
   16ce8:	movne	r2, #58	; 0x3a
   16cec:	mov	r7, r3
   16cf0:	strbne	r2, [r3, #-1]
   16cf4:	subne	r7, r3, #1
   16cf8:	ldr	r3, [pc, #1920]	; 17480 <__assert_fail@plt+0x5c2c>
   16cfc:	asrs	r0, r0, #1
   16d00:	movne	r1, #1
   16d04:	umull	r3, r2, r3, r5
   16d08:	moveq	r1, #0
   16d0c:	lsr	r2, r2, #3
   16d10:	cmp	r2, #0
   16d14:	orrne	r1, r1, #1
   16d18:	add	r3, r2, r2, lsl #2
   16d1c:	cmp	r1, #0
   16d20:	sub	r3, r5, r3, lsl #1
   16d24:	add	r3, r3, #48	; 0x30
   16d28:	strb	r3, [r7, #-1]
   16d2c:	mov	r5, r2
   16d30:	sub	r3, r7, #1
   16d34:	bne	16ce4 <__assert_fail@plt+0x5490>
   16d38:	mov	r5, r3
   16d3c:	ldr	r3, [sp, #24]
   16d40:	cmp	r3, #0
   16d44:	beq	17a80 <__assert_fail@plt+0x622c>
   16d48:	subs	r3, r3, #45	; 0x2d
   16d4c:	movne	r3, #1
   16d50:	str	r3, [sp, #64]	; 0x40
   16d54:	ldr	r3, [sp, #36]	; 0x24
   16d58:	cmp	r6, #0
   16d5c:	movlt	r6, lr
   16d60:	cmp	r3, #0
   16d64:	bne	17a74 <__assert_fail@plt+0x6220>
   16d68:	cmp	ip, #0
   16d6c:	beq	17aa8 <__assert_fail@plt+0x6254>
   16d70:	mov	r3, #43	; 0x2b
   16d74:	str	r3, [sp, #36]	; 0x24
   16d78:	add	r3, r9, #14
   16d7c:	sub	r3, r3, r5
   16d80:	sub	r7, r6, #1
   16d84:	ldr	r2, [sp, #64]	; 0x40
   16d88:	sub	r7, r7, r3
   16d8c:	cmp	r7, #0
   16d90:	movle	r2, #0
   16d94:	andgt	r2, r2, #1
   16d98:	cmp	r2, #0
   16d9c:	ldr	r2, [sp, #24]
   16da0:	moveq	r7, #0
   16da4:	cmp	r2, #95	; 0x5f
   16da8:	beq	17adc <__assert_fail@plt+0x6288>
   16dac:	ldr	r2, [sp, #28]
   16db0:	sub	r2, r2, r8
   16db4:	cmp	r2, #1
   16db8:	bls	16614 <__assert_fail@plt+0x4dc0>
   16dbc:	cmp	fp, #0
   16dc0:	ldrbne	r2, [sp, #36]	; 0x24
   16dc4:	strbne	r2, [fp], #1
   16dc8:	ldr	r9, [sp, #64]	; 0x40
   16dcc:	sub	r6, r6, #1
   16dd0:	cmp	r6, #0
   16dd4:	movlt	r9, #0
   16dd8:	andge	r9, r9, #1
   16ddc:	cmp	r9, #0
   16de0:	add	r8, r8, #1
   16de4:	mov	r7, r3
   16de8:	moveq	r6, r9
   16dec:	ldr	r3, [sp, #28]
   16df0:	cmp	r6, r7
   16df4:	movcs	r9, r6
   16df8:	movcc	r9, r7
   16dfc:	sub	r3, r3, r8
   16e00:	cmp	r9, r3
   16e04:	bcs	16614 <__assert_fail@plt+0x4dc0>
   16e08:	cmp	fp, #0
   16e0c:	beq	16c4c <__assert_fail@plt+0x53f8>
   16e10:	cmp	r6, r7
   16e14:	bls	16e40 <__assert_fail@plt+0x55ec>
   16e18:	ldr	r3, [sp, #24]
   16e1c:	sub	r6, r6, r7
   16e20:	cmp	r3, #43	; 0x2b
   16e24:	cmpne	r3, #48	; 0x30
   16e28:	mov	r0, fp
   16e2c:	mov	r2, r6
   16e30:	moveq	r1, #48	; 0x30
   16e34:	movne	r1, #32
   16e38:	bl	116e0 <memset@plt>
   16e3c:	add	fp, fp, r6
   16e40:	ldr	r3, [sp, #40]	; 0x28
   16e44:	mov	r1, r5
   16e48:	cmp	r3, #0
   16e4c:	mov	r2, r7
   16e50:	mov	r0, fp
   16e54:	bne	16c44 <__assert_fail@plt+0x53f0>
   16e58:	bl	114b8 <memcpy@plt>
   16e5c:	b	16c48 <__assert_fail@plt+0x53f4>
   16e60:	bl	114b8 <memcpy@plt>
   16e64:	b	16a80 <__assert_fail@plt+0x522c>
   16e68:	cmp	r7, #79	; 0x4f
   16e6c:	bne	16b64 <__assert_fail@plt+0x5310>
   16e70:	b	169ec <__assert_fail@plt+0x5198>
   16e74:	cmp	r7, #0
   16e78:	bne	169ec <__assert_fail@plt+0x5198>
   16e7c:	ldr	r3, [sp, #40]	; 0x28
   16e80:	cmp	r5, #0
   16e84:	moveq	r5, r3
   16e88:	mov	r2, #32
   16e8c:	mov	r3, #37	; 0x25
   16e90:	add	r9, sp, #72	; 0x48
   16e94:	str	r5, [sp, #40]	; 0x28
   16e98:	strb	r2, [sp, #72]	; 0x48
   16e9c:	strb	r3, [sp, #73]	; 0x49
   16ea0:	add	ip, r9, #2
   16ea4:	mov	r5, #0
   16ea8:	b	16b88 <__assert_fail@plt+0x5334>
   16eac:	mov	lr, #0
   16eb0:	ldr	r2, [sp, #32]
   16eb4:	ldr	r3, [r2, #32]
   16eb8:	cmp	r3, #0
   16ebc:	blt	165c4 <__assert_fail@plt+0x4d70>
   16ec0:	ldr	ip, [r2, #36]	; 0x24
   16ec4:	mov	r3, r2
   16ec8:	cmp	ip, #0
   16ecc:	blt	17d88 <__assert_fail@plt+0x6534>
   16ed0:	movne	r3, #0
   16ed4:	strne	r3, [sp, #36]	; 0x24
   16ed8:	bne	16ef4 <__assert_fail@plt+0x56a0>
   16edc:	ldr	r3, [sp, #56]	; 0x38
   16ee0:	ldrb	r3, [r3]
   16ee4:	sub	r3, r3, #45	; 0x2d
   16ee8:	clz	r3, r3
   16eec:	lsr	r3, r3, #5
   16ef0:	str	r3, [sp, #36]	; 0x24
   16ef4:	ldr	r3, [pc, #1416]	; 17484 <__assert_fail@plt+0x5c30>
   16ef8:	smull	r3, r2, r3, ip
   16efc:	ldr	r3, [pc, #1412]	; 17488 <__assert_fail@plt+0x5c34>
   16f00:	add	r2, r2, ip
   16f04:	smull	r3, r5, r3, ip
   16f08:	add	r0, r5, ip
   16f0c:	asr	r3, ip, #31
   16f10:	str	r0, [sp, #64]	; 0x40
   16f14:	ldr	r0, [pc, #1384]	; 17484 <__assert_fail@plt+0x5c30>
   16f18:	rsb	r2, r3, r2, asr #5
   16f1c:	smull	r5, r0, r0, r2
   16f20:	add	r0, r0, r2
   16f24:	asr	r5, r2, #31
   16f28:	rsb	r0, r5, r0, asr #5
   16f2c:	rsb	r5, r2, r2, lsl #4
   16f30:	rsb	r0, r0, r0, lsl #4
   16f34:	str	r0, [sp, #68]	; 0x44
   16f38:	ldr	r0, [sp, #64]	; 0x40
   16f3c:	sub	ip, ip, r5, lsl #2
   16f40:	rsb	r3, r3, r0, asr #11
   16f44:	ldr	r0, [sp, #68]	; 0x44
   16f48:	sub	r0, r2, r0, lsl #2
   16f4c:	cmp	lr, #3
   16f50:	ldrls	pc, [pc, lr, lsl #2]
   16f54:	b	169ec <__assert_fail@plt+0x5198>
   16f58:	andeq	r7, r1, ip, lsr #28
   16f5c:	andeq	r7, r1, ip, lsl #28
   16f60:	andeq	r7, r1, r0, ror #27
   16f64:			; <UNDEFINED> instruction: 0x00017dbc
   16f68:	ldr	r3, [sp, #40]	; 0x28
   16f6c:	cmp	r5, #0
   16f70:	movne	r3, r5
   16f74:	cmp	r7, #69	; 0x45
   16f78:	str	r3, [sp, #40]	; 0x28
   16f7c:	beq	169ec <__assert_fail@plt+0x5198>
   16f80:	uxtb	r1, r1
   16f84:	mov	r5, #0
   16f88:	b	16b68 <__assert_fail@plt+0x5314>
   16f8c:	cmp	r7, #69	; 0x45
   16f90:	beq	16c54 <__assert_fail@plt+0x5400>
   16f94:	ldr	r3, [sp, #32]
   16f98:	mov	r0, #100	; 0x64
   16f9c:	ldr	r2, [r3, #20]
   16fa0:	ldr	r3, [pc, #1272]	; 174a0 <__assert_fail@plt+0x5c4c>
   16fa4:	smull	r3, ip, r3, r2
   16fa8:	asr	r3, r2, #31
   16fac:	rsb	r3, r3, ip, asr #5
   16fb0:	mul	r3, r0, r3
   16fb4:	subs	r3, r2, r3
   16fb8:	bmi	17cec <__assert_fail@plt+0x6498>
   16fbc:	ldr	r2, [sp, #24]
   16fc0:	cmp	r2, #0
   16fc4:	beq	176b8 <__assert_fail@plt+0x5e64>
   16fc8:	mov	r2, #1
   16fcc:	mov	r0, #0
   16fd0:	str	r0, [sp, #36]	; 0x24
   16fd4:	ldr	r0, [sp, #24]
   16fd8:	cmp	r0, #43	; 0x2b
   16fdc:	beq	17b44 <__assert_fail@plt+0x62f0>
   16fe0:	mov	ip, #0
   16fe4:	mov	lr, #2
   16fe8:	mov	r0, #0
   16fec:	b	16cac <__assert_fail@plt+0x5458>
   16ff0:	ldr	r0, [sp, #56]	; 0x38
   16ff4:	bl	11674 <strlen@plt>
   16ff8:	ldr	r2, [sp, #24]
   16ffc:	mvn	r3, r6
   17000:	cmp	r2, #45	; 0x2d
   17004:	lsr	r3, r3, #31
   17008:	moveq	r3, #0
   1700c:	cmp	r3, #0
   17010:	moveq	r6, #0
   17014:	ldr	r3, [sp, #40]	; 0x28
   17018:	cmp	r5, #0
   1701c:	movne	r3, #0
   17020:	str	r3, [sp, #40]	; 0x28
   17024:	ldr	r3, [sp, #28]
   17028:	sub	r3, r3, r8
   1702c:	cmp	r0, r6
   17030:	movcs	r9, r0
   17034:	movcc	r9, r6
   17038:	cmp	r9, r3
   1703c:	mov	r7, r0
   17040:	bcs	16614 <__assert_fail@plt+0x4dc0>
   17044:	cmp	fp, #0
   17048:	beq	16c4c <__assert_fail@plt+0x53f8>
   1704c:	cmp	r0, r6
   17050:	bcs	1707c <__assert_fail@plt+0x5828>
   17054:	ldr	r3, [sp, #24]
   17058:	sub	r6, r6, r0
   1705c:	cmp	r3, #43	; 0x2b
   17060:	cmpne	r3, #48	; 0x30
   17064:	mov	r0, fp
   17068:	mov	r2, r6
   1706c:	moveq	r1, #48	; 0x30
   17070:	movne	r1, #32
   17074:	bl	116e0 <memset@plt>
   17078:	add	fp, fp, r6
   1707c:	cmp	r5, #0
   17080:	bne	17c2c <__assert_fail@plt+0x63d8>
   17084:	ldr	r3, [sp, #40]	; 0x28
   17088:	mov	r2, r7
   1708c:	cmp	r3, #0
   17090:	ldr	r1, [sp, #56]	; 0x38
   17094:	mov	r0, fp
   17098:	beq	16e58 <__assert_fail@plt+0x5604>
   1709c:	b	16c44 <__assert_fail@plt+0x53f0>
   170a0:	cmp	r7, #69	; 0x45
   170a4:	beq	16c54 <__assert_fail@plt+0x5400>
   170a8:	cmp	r7, #79	; 0x4f
   170ac:	beq	169ec <__assert_fail@plt+0x5198>
   170b0:	ldr	r3, [sp, #32]
   170b4:	ldr	r0, [pc, #1012]	; 174b0 <__assert_fail@plt+0x5c5c>
   170b8:	ldr	r2, [r3, #20]
   170bc:	cmp	r2, r0
   170c0:	movge	ip, #0
   170c4:	movlt	ip, #1
   170c8:	str	ip, [sp, #36]	; 0x24
   170cc:	ldr	ip, [sp, #24]
   170d0:	add	r3, r2, #1888	; 0x760
   170d4:	cmp	ip, #0
   170d8:	add	r3, r3, #12
   170dc:	bne	17b14 <__assert_fail@plt+0x62c0>
   170e0:	ldr	ip, [sp, #1156]	; 0x484
   170e4:	cmp	r2, r0
   170e8:	movlt	r2, #0
   170ec:	movge	r2, #1
   170f0:	cmp	ip, #43	; 0x2b
   170f4:	beq	17d94 <__assert_fail@plt+0x6540>
   170f8:	str	ip, [sp, #24]
   170fc:	mov	lr, #4
   17100:	mov	ip, #0
   17104:	b	16fe8 <__assert_fail@plt+0x5794>
   17108:	cmp	r7, #0
   1710c:	bne	169ec <__assert_fail@plt+0x5198>
   17110:	ldr	r7, [pc, #884]	; 1748c <__assert_fail@plt+0x5c38>
   17114:	mvn	r5, #0
   17118:	ldr	r3, [sp, #1172]	; 0x494
   1711c:	ldr	r2, [sp, #40]	; 0x28
   17120:	str	r3, [sp, #20]
   17124:	ldr	r3, [sp, #1168]	; 0x490
   17128:	str	r2, [sp]
   1712c:	str	r3, [sp, #16]
   17130:	ldr	r3, [sp, #1164]	; 0x48c
   17134:	str	r5, [sp, #8]
   17138:	str	r3, [sp, #12]
   1713c:	ldr	r3, [sp, #24]
   17140:	mov	r2, r7
   17144:	str	r3, [sp, #4]
   17148:	mvn	r1, #0
   1714c:	ldr	r3, [sp, #32]
   17150:	mov	r0, #0
   17154:	bl	164dc <__assert_fail@plt+0x4c88>
   17158:	ldr	r3, [sp, #24]
   1715c:	cmp	r3, #45	; 0x2d
   17160:	moveq	r3, #0
   17164:	bicne	r3, r6, r6, asr #31
   17168:	mov	r9, r0
   1716c:	ldr	r1, [sp, #28]
   17170:	cmp	r3, r9
   17174:	movcs	r2, r3
   17178:	movcc	r2, r9
   1717c:	sub	r1, r1, r8
   17180:	cmp	r2, r1
   17184:	str	r2, [sp, #36]	; 0x24
   17188:	str	r1, [sp, #64]	; 0x40
   1718c:	bcs	16614 <__assert_fail@plt+0x4dc0>
   17190:	cmp	fp, #0
   17194:	beq	1720c <__assert_fail@plt+0x59b8>
   17198:	cmp	r3, r9
   1719c:	bls	171c8 <__assert_fail@plt+0x5974>
   171a0:	ldr	r2, [sp, #24]
   171a4:	sub	r6, r3, r9
   171a8:	cmp	r2, #43	; 0x2b
   171ac:	cmpne	r2, #48	; 0x30
   171b0:	mov	r0, fp
   171b4:	mov	r2, r6
   171b8:	moveq	r1, #48	; 0x30
   171bc:	movne	r1, #32
   171c0:	bl	116e0 <memset@plt>
   171c4:	add	fp, fp, r6
   171c8:	ldr	r3, [sp, #1172]	; 0x494
   171cc:	mov	r0, fp
   171d0:	str	r3, [sp, #20]
   171d4:	ldr	r3, [sp, #1168]	; 0x490
   171d8:	str	r5, [sp, #8]
   171dc:	str	r3, [sp, #16]
   171e0:	ldr	r3, [sp, #1164]	; 0x48c
   171e4:	mov	r2, r7
   171e8:	str	r3, [sp, #12]
   171ec:	ldr	r3, [sp, #24]
   171f0:	ldr	r1, [sp, #64]	; 0x40
   171f4:	str	r3, [sp, #4]
   171f8:	ldr	r3, [sp, #40]	; 0x28
   171fc:	add	fp, fp, r9
   17200:	str	r3, [sp]
   17204:	ldr	r3, [sp, #32]
   17208:	bl	164dc <__assert_fail@plt+0x4c88>
   1720c:	ldr	r3, [sp, #36]	; 0x24
   17210:	add	r8, r8, r3
   17214:	b	165c4 <__assert_fail@plt+0x4d70>
   17218:	cmp	r7, #69	; 0x45
   1721c:	beq	16c54 <__assert_fail@plt+0x5400>
   17220:	ldr	r3, [sp, #32]
   17224:	ldr	r0, [pc, #612]	; 17490 <__assert_fail@plt+0x5c3c>
   17228:	mvn	ip, #98	; 0x62
   1722c:	ldr	r2, [r3, #20]
   17230:	add	r3, r2, #1888	; 0x760
   17234:	add	r3, r3, #12
   17238:	cmp	r3, r0
   1723c:	ldr	r0, [pc, #620]	; 174b0 <__assert_fail@plt+0x5c5c>
   17240:	movhi	r3, #0
   17244:	movls	r3, #1
   17248:	cmp	r2, r0
   1724c:	mla	r3, ip, r3, r2
   17250:	movge	ip, #0
   17254:	movlt	ip, #1
   17258:	str	ip, [sp, #36]	; 0x24
   1725c:	ldr	ip, [sp, #24]
   17260:	cmp	ip, #0
   17264:	ldr	ip, [pc, #564]	; 174a0 <__assert_fail@plt+0x5c4c>
   17268:	smull	lr, ip, ip, r3
   1726c:	asr	r3, r3, #31
   17270:	rsb	r3, r3, ip, asr #5
   17274:	add	r3, r3, #19
   17278:	bne	17b34 <__assert_fail@plt+0x62e0>
   1727c:	ldr	ip, [sp, #1156]	; 0x484
   17280:	cmp	r2, r0
   17284:	movlt	r2, #0
   17288:	movge	r2, #1
   1728c:	cmp	ip, #43	; 0x2b
   17290:	beq	17b44 <__assert_fail@plt+0x62f0>
   17294:	str	ip, [sp, #24]
   17298:	mov	lr, #2
   1729c:	mov	ip, #0
   172a0:	b	16fe8 <__assert_fail@plt+0x5794>
   172a4:	cmp	r7, #69	; 0x45
   172a8:	beq	169ec <__assert_fail@plt+0x5198>
   172ac:	ldr	r2, [sp, #32]
   172b0:	mov	lr, #2
   172b4:	ldr	r3, [r2, #28]
   172b8:	ldr	r2, [r2, #24]
   172bc:	sub	r3, r3, r2
   172c0:	ldr	r2, [pc, #484]	; 174ac <__assert_fail@plt+0x5c58>
   172c4:	add	r3, r3, #7
   172c8:	smull	r0, r2, r2, r3
   172cc:	add	r2, r2, r3
   172d0:	asr	r3, r3, #31
   172d4:	rsb	r2, r3, r2, asr lr
   172d8:	b	16c8c <__assert_fail@plt+0x5438>
   172dc:	cmp	r7, #69	; 0x45
   172e0:	beq	169ec <__assert_fail@plt+0x5198>
   172e4:	ldr	r3, [sp, #32]
   172e8:	mov	r0, #0
   172ec:	mov	ip, r0
   172f0:	ldr	r3, [r3, #28]
   172f4:	mov	lr, #3
   172f8:	cmn	r3, #1
   172fc:	movlt	r2, #1
   17300:	movge	r2, r0
   17304:	str	r2, [sp, #36]	; 0x24
   17308:	add	r3, r3, #1
   1730c:	movge	r2, #1
   17310:	movlt	r2, r0
   17314:	b	16cac <__assert_fail@plt+0x5458>
   17318:	cmp	r7, #69	; 0x45
   1731c:	beq	169ec <__assert_fail@plt+0x5198>
   17320:	ldr	r3, [sp, #32]
   17324:	ldr	r2, [r3, #12]
   17328:	ldr	r3, [sp, #24]
   1732c:	mov	lr, #2
   17330:	cmp	r3, #0
   17334:	moveq	r3, #95	; 0x5f
   17338:	streq	r3, [sp, #24]
   1733c:	b	16c8c <__assert_fail@plt+0x5438>
   17340:	ldr	r2, [sp, #24]
   17344:	mvn	r3, r6
   17348:	cmp	r2, #45	; 0x2d
   1734c:	lsr	r3, r3, #31
   17350:	moveq	r3, #0
   17354:	cmp	r3, #0
   17358:	beq	17db0 <__assert_fail@plt+0x655c>
   1735c:	cmp	r6, #1
   17360:	movcs	r5, r6
   17364:	movcc	r5, #1
   17368:	ldr	r3, [sp, #28]
   1736c:	sub	r3, r3, r8
   17370:	cmp	r3, r5
   17374:	bls	16614 <__assert_fail@plt+0x4dc0>
   17378:	cmp	fp, #0
   1737c:	beq	173b8 <__assert_fail@plt+0x5b64>
   17380:	cmp	r6, #1
   17384:	bls	173b0 <__assert_fail@plt+0x5b5c>
   17388:	ldr	r3, [sp, #24]
   1738c:	sub	r6, r6, #1
   17390:	cmp	r3, #43	; 0x2b
   17394:	cmpne	r3, #48	; 0x30
   17398:	mov	r0, fp
   1739c:	mov	r2, r6
   173a0:	moveq	r1, #48	; 0x30
   173a4:	movne	r1, #32
   173a8:	bl	116e0 <memset@plt>
   173ac:	add	fp, fp, r6
   173b0:	mov	r3, #10
   173b4:	strb	r3, [fp], #1
   173b8:	add	r8, r8, r5
   173bc:	b	165c4 <__assert_fail@plt+0x4d70>
   173c0:	cmp	r7, #69	; 0x45
   173c4:	beq	169ec <__assert_fail@plt+0x5198>
   173c8:	ldr	r3, [sp, #32]
   173cc:	mov	r0, #0
   173d0:	mov	ip, r0
   173d4:	ldr	r3, [r3, #16]
   173d8:	mov	lr, #2
   173dc:	cmn	r3, #1
   173e0:	movlt	r2, #1
   173e4:	movge	r2, r0
   173e8:	str	r2, [sp, #36]	; 0x24
   173ec:	add	r3, r3, #1
   173f0:	movge	r2, #1
   173f4:	movlt	r2, r0
   173f8:	b	16cac <__assert_fail@plt+0x5458>
   173fc:	cmp	r7, #69	; 0x45
   17400:	beq	169ec <__assert_fail@plt+0x5198>
   17404:	ldr	r2, [sp, #48]	; 0x30
   17408:	b	17328 <__assert_fail@plt+0x5ad4>
   1740c:	cmp	r7, #69	; 0x45
   17410:	beq	169ec <__assert_fail@plt+0x5198>
   17414:	ldr	r3, [sp, #32]
   17418:	ldr	r2, [r3, #8]
   1741c:	b	17328 <__assert_fail@plt+0x5ad4>
   17420:	ldr	r3, [sp, #32]
   17424:	cmp	r7, #79	; 0x4f
   17428:	ldr	r3, [r3, #16]
   1742c:	beq	16c54 <__assert_fail@plt+0x5400>
   17430:	add	r2, r3, r3, lsl #2
   17434:	mov	ip, #0
   17438:	add	r3, r3, r2, lsl #1
   1743c:	str	ip, [sp, #36]	; 0x24
   17440:	asr	r3, r3, #5
   17444:	add	r3, r3, #1
   17448:	mov	r0, ip
   1744c:	mov	lr, #1
   17450:	b	16cd0 <__assert_fail@plt+0x547c>
   17454:	mov	r3, #0
   17458:	cmp	r5, #0
   1745c:	moveq	r5, r3
   17460:	moveq	r1, #112	; 0x70
   17464:	movne	r3, #0
   17468:	movne	r1, #112	; 0x70
   1746c:	strne	r3, [sp, #40]	; 0x28
   17470:	b	16b68 <__assert_fail@plt+0x5314>
   17474:	andeq	sp, r1, r0, asr #6
   17478:	strbtvs	r6, [r6], -r7, ror #12
   1747c:	stcleq	12, cr12, [ip], {204}	; 0xcc
   17480:	stclgt	12, cr12, [ip], {205}	; 0xcd
   17484:	stmhi	r8, {r0, r3, r7, fp, pc}
   17488:			; <UNDEFINED> instruction: 0x91a2b3c5
   1748c:	strdeq	lr, [r1], -r8
   17490:	andeq	r0, r0, fp, ror #14
   17494:	andeq	lr, r1, r4, lsl #14
   17498:	strdeq	lr, [r1], -r0
   1749c:	andeq	lr, r1, r0, lsl r7
   174a0:	mvnpl	r8, pc, lsl r5
   174a4:	andeq	r0, r0, lr, ror #2
   174a8:	andeq	r0, r0, sp, ror #2
   174ac:	subls	r2, r9, #-1828716544	; 0x93000000
   174b0:			; <UNDEFINED> instruction: 0xfffff894
   174b4:	andeq	r2, r0, pc, lsl #14
   174b8:	andeq	r2, r0, r0, lsl r7
   174bc:	ldr	lr, [sp, #32]
   174c0:	add	ip, sp, #88	; 0x58
   174c4:	mvn	r5, #0
   174c8:	ldm	lr!, {r0, r1, r2, r3}
   174cc:	stmia	ip!, {r0, r1, r2, r3}
   174d0:	ldm	lr!, {r0, r1, r2, r3}
   174d4:	stmia	ip!, {r0, r1, r2, r3}
   174d8:	ldm	lr, {r0, r1, r2}
   174dc:	str	r5, [sp, #116]	; 0x74
   174e0:	stm	ip, {r0, r1, r2}
   174e4:	add	r1, sp, #88	; 0x58
   174e8:	ldr	r0, [sp, #1168]	; 0x490
   174ec:	bl	1a258 <__assert_fail@plt+0x8a04>
   174f0:	ldr	r3, [sp, #116]	; 0x74
   174f4:	cmp	r3, #0
   174f8:	blt	17da0 <__assert_fail@plt+0x654c>
   174fc:	add	r9, sp, #72	; 0x48
   17500:	add	lr, r9, #13
   17504:	mov	r1, r0
   17508:	lsr	r3, r0, #31
   1750c:	str	r3, [sp, #36]	; 0x24
   17510:	smull	r2, r3, sl, r1
   17514:	asr	ip, r1, #31
   17518:	rsb	ip, ip, r3, asr #2
   1751c:	cmp	r0, #0
   17520:	add	r3, ip, ip, lsl #2
   17524:	mov	r5, lr
   17528:	sub	r3, r1, r3, lsl #1
   1752c:	add	r2, r3, #48	; 0x30
   17530:	rsblt	r3, r3, #48	; 0x30
   17534:	uxtb	r2, r2
   17538:	uxtblt	r2, r3
   1753c:	cmp	ip, #0
   17540:	mov	r1, ip
   17544:	strb	r2, [lr], #-1
   17548:	bne	17510 <__assert_fail@plt+0x5cbc>
   1754c:	mov	lr, #1
   17550:	b	16d3c <__assert_fail@plt+0x54e8>
   17554:	cmp	r7, #69	; 0x45
   17558:	beq	169ec <__assert_fail@plt+0x5198>
   1755c:	ldr	r3, [sp, #32]
   17560:	ldr	r9, [r3, #28]
   17564:	ldr	r2, [r3, #24]
   17568:	ldr	r5, [r3, #20]
   1756c:	str	r2, [sp, #36]	; 0x24
   17570:	sub	r2, r9, r2
   17574:	add	r2, r2, #380	; 0x17c
   17578:	ldr	r3, [pc, #-212]	; 174ac <__assert_fail@plt+0x5c58>
   1757c:	add	r2, r2, #2
   17580:	cmp	r5, #0
   17584:	smull	r0, r3, r3, r2
   17588:	add	r3, r3, r2
   1758c:	asr	r0, r2, #31
   17590:	rsb	r0, r0, r3, asr #2
   17594:	mvnge	r3, #99	; 0x63
   17598:	rsb	r0, r0, r0, lsl #3
   1759c:	sub	r2, r2, r0
   175a0:	sub	r2, r9, r2
   175a4:	movlt	r3, #300	; 0x12c
   175a8:	adds	r2, r2, #3
   175ac:	str	r2, [sp, #64]	; 0x40
   175b0:	add	r3, r3, r5
   175b4:	bmi	17c40 <__assert_fail@plt+0x63ec>
   175b8:	tst	r3, #3
   175bc:	ldrne	r3, [pc, #-284]	; 174a8 <__assert_fail@plt+0x5c54>
   175c0:	bne	17608 <__assert_fail@plt+0x5db4>
   175c4:	ldr	r2, [pc, #-300]	; 174a0 <__assert_fail@plt+0x5c4c>
   175c8:	mov	r0, #100	; 0x64
   175cc:	smull	r2, ip, r2, r3
   175d0:	asr	r2, r3, #31
   175d4:	rsb	lr, r2, ip, asr #5
   175d8:	mul	r0, r0, lr
   175dc:	cmp	r3, r0
   175e0:	ldrne	r3, [pc, #-324]	; 174a4 <__assert_fail@plt+0x5c50>
   175e4:	bne	17608 <__assert_fail@plt+0x5db4>
   175e8:	rsb	r2, r2, ip, asr #7
   175ec:	mov	ip, #400	; 0x190
   175f0:	ldr	r0, [pc, #-336]	; 174a8 <__assert_fail@plt+0x5c54>
   175f4:	mul	r2, ip, r2
   175f8:	sub	ip, ip, #34	; 0x22
   175fc:	cmp	r3, r2
   17600:	movne	r3, r0
   17604:	moveq	r3, ip
   17608:	ldr	r2, [sp, #36]	; 0x24
   1760c:	sub	r3, r9, r3
   17610:	sub	r2, r3, r2
   17614:	ldr	r0, [pc, #-368]	; 174ac <__assert_fail@plt+0x5c58>
   17618:	add	r2, r2, #380	; 0x17c
   1761c:	add	r2, r2, #2
   17620:	smull	r0, ip, r0, r2
   17624:	add	ip, ip, r2
   17628:	asr	r0, r2, #31
   1762c:	rsb	r0, r0, ip, asr #2
   17630:	rsb	r0, r0, r0, lsl #3
   17634:	sub	r2, r2, r0
   17638:	sub	r3, r3, r2
   1763c:	adds	r3, r3, #3
   17640:	movmi	lr, #0
   17644:	ldrmi	r3, [sp, #64]	; 0x40
   17648:	movpl	lr, #1
   1764c:	cmp	r1, #71	; 0x47
   17650:	beq	17d30 <__assert_fail@plt+0x64dc>
   17654:	cmp	r1, #103	; 0x67
   17658:	bne	17d10 <__assert_fail@plt+0x64bc>
   1765c:	ldr	r3, [pc, #-452]	; 174a0 <__assert_fail@plt+0x5c4c>
   17660:	mov	r0, #100	; 0x64
   17664:	smull	r2, r3, r3, r5
   17668:	asr	r2, r5, #31
   1766c:	rsb	r2, r2, r3, asr #5
   17670:	ldr	r3, [pc, #-472]	; 174a0 <__assert_fail@plt+0x5c4c>
   17674:	mul	r2, r0, r2
   17678:	sub	r2, r5, r2
   1767c:	add	r2, r2, lr
   17680:	smull	r3, ip, r3, r2
   17684:	asr	r3, r2, #31
   17688:	rsb	r3, r3, ip, asr #5
   1768c:	mul	r3, r0, r3
   17690:	subs	r3, r2, r3
   17694:	bpl	16fbc <__assert_fail@plt+0x5768>
   17698:	ldr	r2, [pc, #-496]	; 174b0 <__assert_fail@plt+0x5c5c>
   1769c:	sub	r2, r2, lr
   176a0:	cmp	r5, r2
   176a4:	ldr	r2, [sp, #24]
   176a8:	bge	17d00 <__assert_fail@plt+0x64ac>
   176ac:	cmp	r2, #0
   176b0:	rsb	r3, r3, #0
   176b4:	bne	16fc8 <__assert_fail@plt+0x5774>
   176b8:	ldr	r2, [sp, #1156]	; 0x484
   176bc:	cmp	r2, #43	; 0x2b
   176c0:	beq	17cd4 <__assert_fail@plt+0x6480>
   176c4:	mov	ip, #0
   176c8:	str	r2, [sp, #24]
   176cc:	str	ip, [sp, #36]	; 0x24
   176d0:	mov	r2, #1
   176d4:	mov	lr, #2
   176d8:	b	16fe8 <__assert_fail@plt+0x5794>
   176dc:	cmp	r7, #0
   176e0:	bne	169ec <__assert_fail@plt+0x5198>
   176e4:	ldr	r3, [sp, #24]
   176e8:	clz	r3, r3
   176ec:	lsr	r3, r3, #5
   176f0:	ands	r3, r3, r6, lsr #31
   176f4:	bne	17bb4 <__assert_fail@plt+0x6360>
   176f8:	sub	r5, r6, #6
   176fc:	ldr	r7, [pc, #-616]	; 1749c <__assert_fail@plt+0x5c48>
   17700:	bic	r5, r5, r5, asr #31
   17704:	b	17118 <__assert_fail@plt+0x58c4>
   17708:	cmp	r7, #69	; 0x45
   1770c:	beq	169ec <__assert_fail@plt+0x5198>
   17710:	ldr	r2, [sp, #48]	; 0x30
   17714:	mov	lr, #2
   17718:	b	16c8c <__assert_fail@plt+0x5438>
   1771c:	cmp	r7, #69	; 0x45
   17720:	beq	169ec <__assert_fail@plt+0x5198>
   17724:	ldr	r3, [sp, #32]
   17728:	mov	lr, #1
   1772c:	ldr	r2, [r3, #24]
   17730:	b	16c8c <__assert_fail@plt+0x5438>
   17734:	ldr	r3, [sp, #32]
   17738:	ldr	r2, [pc, #-660]	; 174ac <__assert_fail@plt+0x5c58>
   1773c:	mov	lr, #1
   17740:	ldr	r3, [r3, #24]
   17744:	add	r3, r3, #6
   17748:	smull	r0, r2, r2, r3
   1774c:	add	r0, r2, r3
   17750:	asr	r2, r3, #31
   17754:	rsb	r2, r2, r0, asr #2
   17758:	rsb	r2, r2, r2, lsl #3
   1775c:	sub	r3, r3, r2
   17760:	add	r2, r3, lr
   17764:	b	16c8c <__assert_fail@plt+0x5438>
   17768:	ldr	r3, [sp, #24]
   1776c:	subs	r3, r3, #45	; 0x2d
   17770:	movne	r3, #1
   17774:	cmp	r6, #0
   17778:	movlt	r3, #0
   1777c:	cmp	r3, #0
   17780:	beq	17c20 <__assert_fail@plt+0x63cc>
   17784:	cmp	r6, #1
   17788:	movcs	r5, r6
   1778c:	movcc	r5, #1
   17790:	ldr	r3, [sp, #28]
   17794:	sub	r3, r3, r8
   17798:	cmp	r3, r5
   1779c:	bls	16614 <__assert_fail@plt+0x4dc0>
   177a0:	cmp	fp, #0
   177a4:	beq	173b8 <__assert_fail@plt+0x5b64>
   177a8:	cmp	r6, #1
   177ac:	bls	177d8 <__assert_fail@plt+0x5f84>
   177b0:	ldr	r3, [sp, #24]
   177b4:	sub	r6, r6, #1
   177b8:	cmp	r3, #43	; 0x2b
   177bc:	cmpne	r3, #48	; 0x30
   177c0:	mov	r0, fp
   177c4:	mov	r2, r6
   177c8:	moveq	r1, #48	; 0x30
   177cc:	movne	r1, #32
   177d0:	bl	116e0 <memset@plt>
   177d4:	add	fp, fp, r6
   177d8:	mov	r3, #9
   177dc:	strb	r3, [fp], #1
   177e0:	b	173b8 <__assert_fail@plt+0x5b64>
   177e4:	cmp	r7, #69	; 0x45
   177e8:	beq	169ec <__assert_fail@plt+0x5198>
   177ec:	ldr	r3, [sp, #32]
   177f0:	mov	lr, #2
   177f4:	ldr	r2, [r3, #4]
   177f8:	b	16c8c <__assert_fail@plt+0x5438>
   177fc:	sub	r3, r4, #1
   17800:	cmp	r3, r9
   17804:	movne	r4, r3
   17808:	bne	169ec <__assert_fail@plt+0x5198>
   1780c:	ldr	r2, [sp, #24]
   17810:	mvn	r3, r6
   17814:	cmp	r2, #45	; 0x2d
   17818:	lsr	r3, r3, #31
   1781c:	moveq	r3, #0
   17820:	cmp	r3, #0
   17824:	beq	17b70 <__assert_fail@plt+0x631c>
   17828:	cmp	r6, #1
   1782c:	movcs	r5, r6
   17830:	movcc	r5, #1
   17834:	ldr	r3, [sp, #28]
   17838:	sub	r3, r3, r8
   1783c:	cmp	r3, r5
   17840:	bls	16614 <__assert_fail@plt+0x4dc0>
   17844:	cmp	fp, #0
   17848:	beq	173b8 <__assert_fail@plt+0x5b64>
   1784c:	cmp	r6, #1
   17850:	bls	17880 <__assert_fail@plt+0x602c>
   17854:	ldr	r3, [sp, #24]
   17858:	sub	r6, r6, #1
   1785c:	cmp	r3, #43	; 0x2b
   17860:	cmpne	r3, #48	; 0x30
   17864:	mov	r2, r6
   17868:	bne	17b7c <__assert_fail@plt+0x6328>
   1786c:	mov	r1, #48	; 0x30
   17870:	mov	r0, fp
   17874:	bl	116e0 <memset@plt>
   17878:	ldrb	r1, [r4]
   1787c:	add	fp, fp, r6
   17880:	strb	r1, [fp], #1
   17884:	b	173b8 <__assert_fail@plt+0x5b64>
   17888:	ldr	r7, [pc, #-1020]	; 17494 <__assert_fail@plt+0x5c40>
   1788c:	mvn	r5, #0
   17890:	b	17118 <__assert_fail@plt+0x58c4>
   17894:	cmp	r7, #69	; 0x45
   17898:	beq	169ec <__assert_fail@plt+0x5198>
   1789c:	ldr	r3, [sp, #32]
   178a0:	mov	lr, #2
   178a4:	ldr	r2, [r3]
   178a8:	b	16c8c <__assert_fail@plt+0x5438>
   178ac:	mvn	r5, #0
   178b0:	ldr	r7, [pc, #-1056]	; 17498 <__assert_fail@plt+0x5c44>
   178b4:	b	17118 <__assert_fail@plt+0x58c4>
   178b8:	mov	r3, #1
   178bc:	b	17458 <__assert_fail@plt+0x5c04>
   178c0:	cmp	r7, #69	; 0x45
   178c4:	beq	169ec <__assert_fail@plt+0x5198>
   178c8:	cmp	r6, #0
   178cc:	movle	r6, #9
   178d0:	ldr	r3, [sp, #1172]	; 0x494
   178d4:	mov	r7, #9
   178d8:	b	178ec <__assert_fail@plt+0x6098>
   178dc:	asr	r2, r3, #31
   178e0:	smull	r1, r3, sl, r3
   178e4:	sub	r7, r7, #1
   178e8:	rsb	r3, r2, r3, asr #2
   178ec:	cmp	r7, r6
   178f0:	bgt	178dc <__assert_fail@plt+0x6088>
   178f4:	smull	r2, r1, sl, r3
   178f8:	asr	r2, r3, #31
   178fc:	rsb	r1, r2, r1, asr #2
   17900:	cmp	r7, #1
   17904:	add	r1, r1, r1, lsl #2
   17908:	ble	17c0c <__assert_fail@plt+0x63b8>
   1790c:	cmp	r3, r1, lsl #1
   17910:	beq	178e0 <__assert_fail@plt+0x608c>
   17914:	add	r0, sp, #72	; 0x48
   17918:	add	r1, r0, r7
   1791c:	b	17924 <__assert_fail@plt+0x60d0>
   17920:	asr	r2, r2, #31
   17924:	smull	lr, ip, sl, r3
   17928:	rsb	r2, r2, ip, asr #2
   1792c:	add	ip, r2, r2, lsl #2
   17930:	sub	r3, r3, ip, lsl #1
   17934:	add	r3, r3, #48	; 0x30
   17938:	strb	r3, [r1, #-1]!
   1793c:	cmp	r1, r0
   17940:	mov	r3, r2
   17944:	bne	17920 <__assert_fail@plt+0x60cc>
   17948:	ldr	r2, [sp, #24]
   1794c:	subs	r3, r2, #0
   17950:	moveq	r3, #48	; 0x30
   17954:	str	r3, [sp, #24]
   17958:	ldr	r3, [sp, #28]
   1795c:	cmp	r7, #0
   17960:	movcs	r5, r7
   17964:	movcc	r5, #0
   17968:	sub	r3, r3, r8
   1796c:	cmp	r5, r3
   17970:	bcs	16614 <__assert_fail@plt+0x4dc0>
   17974:	cmp	fp, #0
   17978:	beq	1799c <__assert_fail@plt+0x6148>
   1797c:	ldr	r3, [sp, #40]	; 0x28
   17980:	mov	r2, r7
   17984:	cmp	r3, #0
   17988:	add	r1, sp, #72	; 0x48
   1798c:	mov	r0, fp
   17990:	beq	17c18 <__assert_fail@plt+0x63c4>
   17994:	bl	1649c <__assert_fail@plt+0x4c48>
   17998:	add	fp, fp, r7
   1799c:	ldr	r3, [sp, #24]
   179a0:	add	r8, r5, r8
   179a4:	cmp	r3, #45	; 0x2d
   179a8:	subne	r5, r6, r7
   179ac:	ldr	r3, [sp, #28]
   179b0:	bicne	r5, r5, r5, asr #31
   179b4:	moveq	r5, #0
   179b8:	sub	r3, r3, r8
   179bc:	cmp	r5, r3
   179c0:	bcs	16614 <__assert_fail@plt+0x4dc0>
   179c4:	cmp	fp, #0
   179c8:	beq	173b8 <__assert_fail@plt+0x5b64>
   179cc:	cmp	r5, #0
   179d0:	beq	173b8 <__assert_fail@plt+0x5b64>
   179d4:	ldr	r3, [sp, #24]
   179d8:	mov	r0, fp
   179dc:	cmp	r3, #43	; 0x2b
   179e0:	cmpne	r3, #48	; 0x30
   179e4:	mov	r2, r5
   179e8:	moveq	r1, #48	; 0x30
   179ec:	movne	r1, #32
   179f0:	bl	116e0 <memset@plt>
   179f4:	add	fp, fp, r5
   179f8:	b	173b8 <__assert_fail@plt+0x5b64>
   179fc:	ldrb	r3, [r4, #1]
   17a00:	add	r0, r4, #1
   17a04:	cmp	r3, #58	; 0x3a
   17a08:	movne	lr, #1
   17a0c:	beq	17b94 <__assert_fail@plt+0x6340>
   17a10:	cmp	r3, #122	; 0x7a
   17a14:	moveq	r4, r0
   17a18:	bne	169ec <__assert_fail@plt+0x5198>
   17a1c:	b	16eb0 <__assert_fail@plt+0x565c>
   17a20:	cmp	r7, #69	; 0x45
   17a24:	beq	169ec <__assert_fail@plt+0x5198>
   17a28:	ldr	r3, [sp, #32]
   17a2c:	ldr	r0, [pc, #-1416]	; 174ac <__assert_fail@plt+0x5c58>
   17a30:	mov	lr, #2
   17a34:	ldr	r2, [r3, #24]
   17a38:	ldr	r3, [r3, #28]
   17a3c:	add	r2, r2, #6
   17a40:	smull	ip, r0, r0, r2
   17a44:	add	ip, r0, r2
   17a48:	asr	r0, r2, #31
   17a4c:	rsb	r0, r0, ip, asr #2
   17a50:	rsb	r0, r0, r0, lsl #3
   17a54:	sub	r2, r2, r0
   17a58:	b	172bc <__assert_fail@plt+0x5a68>
   17a5c:	cmp	r7, #69	; 0x45
   17a60:	beq	169ec <__assert_fail@plt+0x5198>
   17a64:	ldr	r3, [sp, #32]
   17a68:	mov	lr, #2
   17a6c:	ldr	r2, [r3, #8]
   17a70:	b	16c8c <__assert_fail@plt+0x5438>
   17a74:	mov	r3, #45	; 0x2d
   17a78:	str	r3, [sp, #36]	; 0x24
   17a7c:	b	16d78 <__assert_fail@plt+0x5524>
   17a80:	mov	r3, #1
   17a84:	str	r3, [sp, #64]	; 0x40
   17a88:	mov	r3, #48	; 0x30
   17a8c:	str	r3, [sp, #24]
   17a90:	b	16d54 <__assert_fail@plt+0x5500>
   17a94:	add	r1, sp, #89	; 0x59
   17a98:	mov	r2, r7
   17a9c:	mov	r0, fp
   17aa0:	bl	1645c <__assert_fail@plt+0x4c08>
   17aa4:	b	16c48 <__assert_fail@plt+0x53f4>
   17aa8:	add	r7, r9, #14
   17aac:	sub	r7, r7, r5
   17ab0:	ldr	r2, [sp, #64]	; 0x40
   17ab4:	sub	r3, r6, r7
   17ab8:	cmp	r3, #0
   17abc:	movle	r2, #0
   17ac0:	andgt	r2, r2, #1
   17ac4:	cmp	r2, #0
   17ac8:	bne	16dec <__assert_fail@plt+0x5598>
   17acc:	ldr	r3, [sp, #64]	; 0x40
   17ad0:	cmp	r3, #0
   17ad4:	moveq	r6, r3
   17ad8:	b	16dec <__assert_fail@plt+0x5598>
   17adc:	cmp	fp, #0
   17ae0:	beq	165fc <__assert_fail@plt+0x4da8>
   17ae4:	mov	r0, fp
   17ae8:	mov	r2, r7
   17aec:	mov	r1, #32
   17af0:	str	r3, [sp, #68]	; 0x44
   17af4:	add	r8, r8, r7
   17af8:	bl	116e0 <memset@plt>
   17afc:	sub	r6, r6, r7
   17b00:	add	fp, fp, r7
   17b04:	ldr	r3, [sp, #68]	; 0x44
   17b08:	b	16dac <__assert_fail@plt+0x5558>
   17b0c:	mov	r8, r3
   17b10:	b	165d8 <__assert_fail@plt+0x4d84>
   17b14:	ldr	r2, [sp, #24]
   17b18:	cmp	r2, #43	; 0x2b
   17b1c:	ldr	r2, [sp, #36]	; 0x24
   17b20:	eor	r2, r2, #1
   17b24:	beq	17d94 <__assert_fail@plt+0x6540>
   17b28:	mov	ip, #0
   17b2c:	mov	lr, #4
   17b30:	b	16fe8 <__assert_fail@plt+0x5794>
   17b34:	cmp	r2, r0
   17b38:	movlt	r2, #0
   17b3c:	movge	r2, #1
   17b40:	b	16fd4 <__assert_fail@plt+0x5780>
   17b44:	mov	lr, #2
   17b48:	mov	r0, #99	; 0x63
   17b4c:	cmp	r0, r3
   17b50:	movcs	r0, #0
   17b54:	movcc	r0, #1
   17b58:	cmp	r6, lr
   17b5c:	movle	ip, r0
   17b60:	orrgt	ip, r0, #1
   17b64:	mov	r0, #43	; 0x2b
   17b68:	str	r0, [sp, #24]
   17b6c:	b	16fe8 <__assert_fail@plt+0x5794>
   17b70:	mov	r6, r3
   17b74:	mov	r5, #1
   17b78:	b	17834 <__assert_fail@plt+0x5fe0>
   17b7c:	mov	r1, #32
   17b80:	mov	r0, fp
   17b84:	bl	116e0 <memset@plt>
   17b88:	add	fp, fp, r6
   17b8c:	ldrb	r1, [r4]
   17b90:	b	17880 <__assert_fail@plt+0x602c>
   17b94:	add	r2, r4, #2
   17b98:	mov	lr, #1
   17b9c:	mov	r0, r2
   17ba0:	ldrb	r3, [r2], #1
   17ba4:	add	lr, lr, #1
   17ba8:	cmp	r3, #58	; 0x3a
   17bac:	bne	17a10 <__assert_fail@plt+0x61bc>
   17bb0:	b	17b9c <__assert_fail@plt+0x6348>
   17bb4:	ldr	r3, [sp, #1172]	; 0x494
   17bb8:	mov	ip, #43	; 0x2b
   17bbc:	str	r3, [sp, #20]
   17bc0:	ldr	r3, [sp, #1168]	; 0x490
   17bc4:	mov	r5, #4
   17bc8:	str	r3, [sp, #16]
   17bcc:	ldr	r3, [sp, #1164]	; 0x48c
   17bd0:	mov	r0, r7
   17bd4:	str	r3, [sp, #12]
   17bd8:	ldr	r3, [sp, #40]	; 0x28
   17bdc:	str	r5, [sp, #8]
   17be0:	str	r3, [sp]
   17be4:	str	ip, [sp, #4]
   17be8:	ldr	r3, [sp, #32]
   17bec:	ldr	r2, [pc, #-1880]	; 1749c <__assert_fail@plt+0x5c48>
   17bf0:	mvn	r1, #0
   17bf4:	str	ip, [sp, #24]
   17bf8:	bl	164dc <__assert_fail@plt+0x4c88>
   17bfc:	mov	r3, r7
   17c00:	ldr	r7, [pc, #-1900]	; 1749c <__assert_fail@plt+0x5c48>
   17c04:	mov	r9, r0
   17c08:	b	1716c <__assert_fail@plt+0x5918>
   17c0c:	cmp	r7, #0
   17c10:	bgt	17914 <__assert_fail@plt+0x60c0>
   17c14:	b	17948 <__assert_fail@plt+0x60f4>
   17c18:	bl	114b8 <memcpy@plt>
   17c1c:	b	17998 <__assert_fail@plt+0x6144>
   17c20:	mov	r6, r3
   17c24:	mov	r5, #1
   17c28:	b	17790 <__assert_fail@plt+0x5f3c>
   17c2c:	mov	r2, r7
   17c30:	ldr	r1, [sp, #56]	; 0x38
   17c34:	mov	r0, fp
   17c38:	bl	1645c <__assert_fail@plt+0x4c08>
   17c3c:	b	16c48 <__assert_fail@plt+0x53f4>
   17c40:	sub	r3, r3, #1
   17c44:	tst	r3, #3
   17c48:	ldrne	r3, [pc, #-1960]	; 174a8 <__assert_fail@plt+0x5c54>
   17c4c:	bne	17c94 <__assert_fail@plt+0x6440>
   17c50:	ldr	r2, [pc, #-1976]	; 174a0 <__assert_fail@plt+0x5c4c>
   17c54:	mov	r0, #100	; 0x64
   17c58:	smull	r2, ip, r2, r3
   17c5c:	asr	r2, r3, #31
   17c60:	rsb	lr, r2, ip, asr #5
   17c64:	mul	r0, r0, lr
   17c68:	cmp	r3, r0
   17c6c:	ldrne	r3, [pc, #-2000]	; 174a4 <__assert_fail@plt+0x5c50>
   17c70:	bne	17c94 <__assert_fail@plt+0x6440>
   17c74:	rsb	r2, r2, ip, asr #7
   17c78:	mov	ip, #400	; 0x190
   17c7c:	ldr	r0, [pc, #-2012]	; 174a8 <__assert_fail@plt+0x5c54>
   17c80:	mul	r2, ip, r2
   17c84:	sub	ip, ip, #34	; 0x22
   17c88:	cmp	r3, r2
   17c8c:	movne	r3, r0
   17c90:	moveq	r3, ip
   17c94:	ldr	r2, [sp, #36]	; 0x24
   17c98:	add	r3, r9, r3
   17c9c:	sub	r2, r3, r2
   17ca0:	ldr	r0, [pc, #-2044]	; 174ac <__assert_fail@plt+0x5c58>
   17ca4:	add	r2, r2, #380	; 0x17c
   17ca8:	add	r2, r2, #2
   17cac:	mvn	lr, #0
   17cb0:	smull	r0, ip, r0, r2
   17cb4:	add	ip, ip, r2
   17cb8:	asr	r0, r2, #31
   17cbc:	rsb	r0, r0, ip, asr #2
   17cc0:	rsb	r0, r0, r0, lsl #3
   17cc4:	sub	r2, r2, r0
   17cc8:	sub	r3, r3, r2
   17ccc:	add	r3, r3, #3
   17cd0:	b	1764c <__assert_fail@plt+0x5df8>
   17cd4:	ldr	r2, [sp, #24]
   17cd8:	mov	lr, #2
   17cdc:	str	r2, [sp, #36]	; 0x24
   17ce0:	mov	r0, #99	; 0x63
   17ce4:	mov	r2, #1
   17ce8:	b	17b4c <__assert_fail@plt+0x62f8>
   17cec:	sub	r0, r0, #2000	; 0x7d0
   17cf0:	cmp	r2, r0
   17cf4:	rsblt	r3, r3, #0
   17cf8:	addge	r3, r3, #100	; 0x64
   17cfc:	b	16fbc <__assert_fail@plt+0x5768>
   17d00:	cmp	r2, #0
   17d04:	add	r3, r3, #100	; 0x64
   17d08:	beq	176b8 <__assert_fail@plt+0x5e64>
   17d0c:	b	16fc8 <__assert_fail@plt+0x5774>
   17d10:	ldr	r2, [pc, #-2156]	; 174ac <__assert_fail@plt+0x5c58>
   17d14:	mov	lr, #2
   17d18:	smull	r0, r2, r2, r3
   17d1c:	add	r0, r2, r3
   17d20:	asr	r2, r3, #31
   17d24:	rsb	r2, r2, r0, asr #2
   17d28:	add	r2, r2, #1
   17d2c:	b	16c8c <__assert_fail@plt+0x5438>
   17d30:	ldr	r2, [pc, #-2184]	; 174b0 <__assert_fail@plt+0x5c5c>
   17d34:	add	r3, r5, #1888	; 0x760
   17d38:	sub	r2, r2, lr
   17d3c:	cmp	r5, r2
   17d40:	movge	r0, #0
   17d44:	movlt	r0, #1
   17d48:	str	r0, [sp, #36]	; 0x24
   17d4c:	ldr	r0, [sp, #24]
   17d50:	add	r3, r3, #12
   17d54:	cmp	r0, #0
   17d58:	add	r3, r3, lr
   17d5c:	bne	17b14 <__assert_fail@plt+0x62c0>
   17d60:	ldr	r0, [sp, #1156]	; 0x484
   17d64:	cmp	r5, r2
   17d68:	movlt	r2, #0
   17d6c:	movge	r2, #1
   17d70:	cmp	r0, #43	; 0x2b
   17d74:	beq	17d94 <__assert_fail@plt+0x6540>
   17d78:	str	r0, [sp, #24]
   17d7c:	mov	ip, #0
   17d80:	mov	lr, #4
   17d84:	b	16fe8 <__assert_fail@plt+0x5794>
   17d88:	mov	r3, #1
   17d8c:	str	r3, [sp, #36]	; 0x24
   17d90:	b	16ef4 <__assert_fail@plt+0x56a0>
   17d94:	mov	lr, #4
   17d98:	ldr	r0, [pc, #-2284]	; 174b4 <__assert_fail@plt+0x5c60>
   17d9c:	b	17b4c <__assert_fail@plt+0x62f8>
   17da0:	ldr	r2, [sp, #44]	; 0x2c
   17da4:	mov	r3, #75	; 0x4b
   17da8:	str	r3, [r2]
   17dac:	b	16620 <__assert_fail@plt+0x4dcc>
   17db0:	mov	r6, r3
   17db4:	mov	r5, #1
   17db8:	b	17368 <__assert_fail@plt+0x5b14>
   17dbc:	cmp	ip, #0
   17dc0:	bne	17de0 <__assert_fail@plt+0x658c>
   17dc4:	cmp	r0, #0
   17dc8:	bne	17e0c <__assert_fail@plt+0x65b8>
   17dcc:	ldr	r2, [sp, #36]	; 0x24
   17dd0:	mov	ip, #1
   17dd4:	eor	r2, r2, #1
   17dd8:	mov	lr, #3
   17ddc:	b	16cac <__assert_fail@plt+0x5458>
   17de0:	mov	r2, #100	; 0x64
   17de4:	ldr	lr, [pc, #-2356]	; 174b8 <__assert_fail@plt+0x5c64>
   17de8:	mul	r0, r2, r0
   17dec:	ldr	r2, [sp, #36]	; 0x24
   17df0:	mla	r3, lr, r3, r0
   17df4:	eor	r2, r2, #1
   17df8:	add	r3, r3, ip
   17dfc:	mov	r0, #20
   17e00:	mov	ip, #1
   17e04:	mov	lr, #9
   17e08:	b	16cac <__assert_fail@plt+0x5458>
   17e0c:	mov	ip, #100	; 0x64
   17e10:	ldr	r2, [sp, #36]	; 0x24
   17e14:	mla	r3, ip, r3, r0
   17e18:	eor	r2, r2, #1
   17e1c:	mov	ip, #1
   17e20:	mov	r0, #4
   17e24:	mov	lr, #6
   17e28:	b	16cac <__assert_fail@plt+0x5458>
   17e2c:	mov	ip, #100	; 0x64
   17e30:	ldr	r2, [sp, #36]	; 0x24
   17e34:	mla	r3, ip, r3, r0
   17e38:	eor	r2, r2, #1
   17e3c:	mov	ip, #1
   17e40:	mov	r0, #0
   17e44:	mov	lr, #5
   17e48:	b	16cac <__assert_fail@plt+0x5458>
   17e4c:	push	{r4, r5, lr}
   17e50:	sub	sp, sp, #36	; 0x24
   17e54:	add	lr, sp, #32
   17e58:	mov	ip, #0
   17e5c:	ldr	r5, [sp, #48]	; 0x30
   17e60:	ldr	r4, [sp, #52]	; 0x34
   17e64:	strb	ip, [lr, #-1]!
   17e68:	str	lr, [sp, #12]
   17e6c:	mvn	lr, #0
   17e70:	str	ip, [sp, #4]
   17e74:	str	ip, [sp]
   17e78:	str	r5, [sp, #16]
   17e7c:	str	r4, [sp, #20]
   17e80:	str	lr, [sp, #8]
   17e84:	bl	164dc <__assert_fail@plt+0x4c88>
   17e88:	add	sp, sp, #36	; 0x24
   17e8c:	pop	{r4, r5, pc}
   17e90:	push	{r4, r5, r6, lr}
   17e94:	subs	r4, r0, #0
   17e98:	beq	17f0c <__assert_fail@plt+0x66b8>
   17e9c:	mov	r1, #47	; 0x2f
   17ea0:	bl	11770 <strrchr@plt>
   17ea4:	subs	r5, r0, #0
   17ea8:	beq	17ef8 <__assert_fail@plt+0x66a4>
   17eac:	add	r6, r5, #1
   17eb0:	sub	r3, r6, r4
   17eb4:	cmp	r3, #6
   17eb8:	ble	17ef8 <__assert_fail@plt+0x66a4>
   17ebc:	mov	r2, #7
   17ec0:	ldr	r1, [pc, #96]	; 17f28 <__assert_fail@plt+0x66d4>
   17ec4:	sub	r0, r5, #6
   17ec8:	bl	11818 <strncmp@plt>
   17ecc:	cmp	r0, #0
   17ed0:	bne	17ef8 <__assert_fail@plt+0x66a4>
   17ed4:	mov	r2, #3
   17ed8:	ldr	r1, [pc, #76]	; 17f2c <__assert_fail@plt+0x66d8>
   17edc:	mov	r0, r6
   17ee0:	bl	11818 <strncmp@plt>
   17ee4:	cmp	r0, #0
   17ee8:	movne	r4, r6
   17eec:	ldreq	r3, [pc, #60]	; 17f30 <__assert_fail@plt+0x66dc>
   17ef0:	addeq	r4, r5, #4
   17ef4:	streq	r4, [r3]
   17ef8:	ldr	r2, [pc, #52]	; 17f34 <__assert_fail@plt+0x66e0>
   17efc:	ldr	r3, [pc, #52]	; 17f38 <__assert_fail@plt+0x66e4>
   17f00:	str	r4, [r2]
   17f04:	str	r4, [r3]
   17f08:	pop	{r4, r5, r6, pc}
   17f0c:	ldr	r3, [pc, #40]	; 17f3c <__assert_fail@plt+0x66e8>
   17f10:	mov	r2, #55	; 0x37
   17f14:	mov	r1, #1
   17f18:	ldr	r3, [r3]
   17f1c:	ldr	r0, [pc, #28]	; 17f40 <__assert_fail@plt+0x66ec>
   17f20:	bl	11554 <fwrite@plt>
   17f24:	bl	11824 <abort@plt>
   17f28:	andeq	lr, r1, r4, asr r7
   17f2c:	andeq	lr, r1, ip, asr r7
   17f30:	ldrdeq	pc, [r2], -r8
   17f34:	andeq	pc, r2, r8, ror r2	; <UNPREDICTABLE>
   17f38:	ldrdeq	pc, [r2], -ip
   17f3c:	andeq	pc, r2, r8, ror #3
   17f40:	andeq	lr, r1, ip, lsl r7
   17f44:	push	{r4, r5, r6, lr}
   17f48:	mov	r2, #48	; 0x30
   17f4c:	mov	r4, r1
   17f50:	mov	r1, #0
   17f54:	mov	r5, r0
   17f58:	bl	116e0 <memset@plt>
   17f5c:	cmp	r4, #10
   17f60:	beq	17f70 <__assert_fail@plt+0x671c>
   17f64:	str	r4, [r5]
   17f68:	mov	r0, r5
   17f6c:	pop	{r4, r5, r6, pc}
   17f70:	bl	11824 <abort@plt>
   17f74:	push	{r4, r5, r6, lr}
   17f78:	mov	r4, r0
   17f7c:	mov	r5, r1
   17f80:	bl	1bd9c <__assert_fail@plt+0xa548>
   17f84:	ldrb	r3, [r0]
   17f88:	bic	r3, r3, #32
   17f8c:	cmp	r3, #85	; 0x55
   17f90:	bne	17ff0 <__assert_fail@plt+0x679c>
   17f94:	ldrb	r3, [r0, #1]
   17f98:	bic	r3, r3, #32
   17f9c:	cmp	r3, #84	; 0x54
   17fa0:	bne	1802c <__assert_fail@plt+0x67d8>
   17fa4:	ldrb	r3, [r0, #2]
   17fa8:	bic	r3, r3, #32
   17fac:	cmp	r3, #70	; 0x46
   17fb0:	bne	1802c <__assert_fail@plt+0x67d8>
   17fb4:	ldrb	r3, [r0, #3]
   17fb8:	cmp	r3, #45	; 0x2d
   17fbc:	bne	1802c <__assert_fail@plt+0x67d8>
   17fc0:	ldrb	r3, [r0, #4]
   17fc4:	cmp	r3, #56	; 0x38
   17fc8:	bne	1802c <__assert_fail@plt+0x67d8>
   17fcc:	ldrb	r3, [r0, #5]
   17fd0:	cmp	r3, #0
   17fd4:	bne	1802c <__assert_fail@plt+0x67d8>
   17fd8:	ldrb	r2, [r4]
   17fdc:	ldr	r3, [pc, #152]	; 1807c <__assert_fail@plt+0x6828>
   17fe0:	ldr	r0, [pc, #152]	; 18080 <__assert_fail@plt+0x682c>
   17fe4:	cmp	r2, #96	; 0x60
   17fe8:	movne	r0, r3
   17fec:	pop	{r4, r5, r6, pc}
   17ff0:	cmp	r3, #71	; 0x47
   17ff4:	bne	1802c <__assert_fail@plt+0x67d8>
   17ff8:	ldrb	r3, [r0, #1]
   17ffc:	bic	r3, r3, #32
   18000:	cmp	r3, #66	; 0x42
   18004:	bne	1802c <__assert_fail@plt+0x67d8>
   18008:	ldrb	r3, [r0, #2]
   1800c:	cmp	r3, #49	; 0x31
   18010:	bne	1802c <__assert_fail@plt+0x67d8>
   18014:	ldrb	r3, [r0, #3]
   18018:	cmp	r3, #56	; 0x38
   1801c:	bne	1802c <__assert_fail@plt+0x67d8>
   18020:	ldrb	r3, [r0, #4]
   18024:	cmp	r3, #48	; 0x30
   18028:	beq	18040 <__assert_fail@plt+0x67ec>
   1802c:	ldr	r3, [pc, #80]	; 18084 <__assert_fail@plt+0x6830>
   18030:	cmp	r5, #9
   18034:	ldr	r0, [pc, #76]	; 18088 <__assert_fail@plt+0x6834>
   18038:	movne	r0, r3
   1803c:	pop	{r4, r5, r6, pc}
   18040:	ldrb	r3, [r0, #5]
   18044:	cmp	r3, #51	; 0x33
   18048:	bne	1802c <__assert_fail@plt+0x67d8>
   1804c:	ldrb	r3, [r0, #6]
   18050:	cmp	r3, #48	; 0x30
   18054:	bne	1802c <__assert_fail@plt+0x67d8>
   18058:	ldrb	r3, [r0, #7]
   1805c:	cmp	r3, #0
   18060:	bne	1802c <__assert_fail@plt+0x67d8>
   18064:	ldrb	r2, [r4]
   18068:	ldr	r3, [pc, #28]	; 1808c <__assert_fail@plt+0x6838>
   1806c:	ldr	r0, [pc, #28]	; 18090 <__assert_fail@plt+0x683c>
   18070:	cmp	r2, #96	; 0x60
   18074:	movne	r0, r3
   18078:	pop	{r4, r5, r6, pc}
   1807c:			; <UNDEFINED> instruction: 0x0001e7b8
   18080:			; <UNDEFINED> instruction: 0x0001e7b4
   18084:	andeq	lr, r1, r8, asr #15
   18088:	andeq	lr, r1, r4, asr #15
   1808c:	andeq	lr, r1, r0, asr #15
   18090:			; <UNDEFINED> instruction: 0x0001e7bc
   18094:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18098:	sub	sp, sp, #116	; 0x74
   1809c:	mov	sl, r0
   180a0:	str	r3, [sp, #24]
   180a4:	mov	r3, #1
   180a8:	mov	r8, r1
   180ac:	str	r2, [sp, #56]	; 0x38
   180b0:	str	r3, [sp, #36]	; 0x24
   180b4:	bl	1156c <__ctype_get_mb_cur_max@plt>
   180b8:	ldr	r3, [sp, #156]	; 0x9c
   180bc:	mov	fp, r8
   180c0:	mov	r2, #0
   180c4:	lsr	r3, r3, #1
   180c8:	and	r3, r3, #1
   180cc:	str	r2, [sp, #68]	; 0x44
   180d0:	str	r3, [sp, #28]
   180d4:	str	r2, [sp, #40]	; 0x28
   180d8:	str	r2, [sp, #44]	; 0x2c
   180dc:	str	r2, [sp, #52]	; 0x34
   180e0:	str	r2, [sp, #64]	; 0x40
   180e4:	str	r2, [sp, #72]	; 0x48
   180e8:	str	sl, [sp, #32]
   180ec:	str	r0, [sp, #76]	; 0x4c
   180f0:	ldr	r3, [sp, #152]	; 0x98
   180f4:	cmp	r3, #10
   180f8:	ldrls	pc, [pc, r3, lsl #2]
   180fc:	b	192bc <__assert_fail@plt+0x7a68>
   18100:	andeq	r8, r1, ip, lsr #2
   18104:	andeq	r8, r1, r4, lsl r4
   18108:	andeq	r8, r1, r8, lsr r4
   1810c:	andeq	r8, r1, ip, asr r4
   18110:	andeq	r8, r1, r8, lsl #11
   18114:	andeq	r8, r1, ip, asr r5
   18118:	andeq	r8, r1, r4, lsr r5
   1811c:	andeq	r8, r1, r0, ror r4
   18120:	andeq	r8, r1, r8, lsl #9
   18124:	andeq	r8, r1, r8, lsl #9
   18128:	andeq	r8, r1, r8, lsl #9
   1812c:	mov	r3, #0
   18130:	mov	r7, r3
   18134:	str	r3, [sp, #28]
   18138:	ldr	r3, [sp, #44]	; 0x2c
   1813c:	mov	sl, #0
   18140:	eor	r3, r3, #1
   18144:	str	r3, [sp, #60]	; 0x3c
   18148:	ldr	r3, [sp, #24]
   1814c:	cmn	r3, #1
   18150:	beq	186b4 <__assert_fail@plt+0x6e60>
   18154:	ldr	r3, [sp, #24]
   18158:	subs	r5, r3, sl
   1815c:	movne	r5, #1
   18160:	cmp	r5, #0
   18164:	beq	186cc <__assert_fail@plt+0x6e78>
   18168:	ldr	r3, [sp, #152]	; 0x98
   1816c:	ldr	r8, [sp, #44]	; 0x2c
   18170:	cmp	r3, #2
   18174:	moveq	r8, #0
   18178:	andne	r8, r8, #1
   1817c:	ldr	r3, [sp, #52]	; 0x34
   18180:	adds	r9, r3, #0
   18184:	movne	r9, #1
   18188:	ands	r6, r9, r8
   1818c:	beq	18b34 <__assert_fail@plt+0x72e0>
   18190:	ldr	r2, [sp, #52]	; 0x34
   18194:	ldr	r1, [sp, #24]
   18198:	cmp	r2, #1
   1819c:	mov	r3, r2
   181a0:	movls	r3, #0
   181a4:	movhi	r3, #1
   181a8:	cmn	r1, #1
   181ac:	movne	r3, #0
   181b0:	cmp	r3, #0
   181b4:	add	r4, sl, r2
   181b8:	beq	181c8 <__assert_fail@plt+0x6974>
   181bc:	ldr	r0, [sp, #56]	; 0x38
   181c0:	bl	11674 <strlen@plt>
   181c4:	str	r0, [sp, #24]
   181c8:	ldr	r3, [sp, #24]
   181cc:	cmp	r3, r4
   181d0:	ldr	r3, [sp, #56]	; 0x38
   181d4:	add	r3, r3, sl
   181d8:	str	r3, [sp, #48]	; 0x30
   181dc:	bcc	18b40 <__assert_fail@plt+0x72ec>
   181e0:	mov	r0, r3
   181e4:	ldr	r2, [sp, #52]	; 0x34
   181e8:	ldr	r1, [sp, #64]	; 0x40
   181ec:	bl	114d0 <memcmp@plt>
   181f0:	cmp	r0, #0
   181f4:	bne	18b40 <__assert_fail@plt+0x72ec>
   181f8:	ldr	r3, [sp, #28]
   181fc:	cmp	r3, #0
   18200:	bne	193bc <__assert_fail@plt+0x7b68>
   18204:	ldr	r3, [sp, #48]	; 0x30
   18208:	ldrb	r4, [r3]
   1820c:	cmp	r4, #126	; 0x7e
   18210:	ldrls	pc, [pc, r4, lsl #2]
   18214:	b	18ad4 <__assert_fail@plt+0x7280>
   18218:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1821c:	ldrdeq	r8, [r1], -r4
   18220:	ldrdeq	r8, [r1], -r4
   18224:	ldrdeq	r8, [r1], -r4
   18228:	ldrdeq	r8, [r1], -r4
   1822c:	ldrdeq	r8, [r1], -r4
   18230:	ldrdeq	r8, [r1], -r4
   18234:	ldrdeq	r8, [r1], -ip
   18238:	andeq	r8, r1, r0, asr #17
   1823c:			; <UNDEFINED> instruction: 0x00018abc
   18240:	andeq	r8, r1, r0, lsr #16
   18244:	andeq	r8, r1, r4, lsl #16
   18248:	muleq	r1, r8, sl
   1824c:	andeq	r8, r1, r4, ror sl
   18250:	ldrdeq	r8, [r1], -r4
   18254:	ldrdeq	r8, [r1], -r4
   18258:	ldrdeq	r8, [r1], -r4
   1825c:	ldrdeq	r8, [r1], -r4
   18260:	ldrdeq	r8, [r1], -r4
   18264:	ldrdeq	r8, [r1], -r4
   18268:	ldrdeq	r8, [r1], -r4
   1826c:	ldrdeq	r8, [r1], -r4
   18270:	ldrdeq	r8, [r1], -r4
   18274:	ldrdeq	r8, [r1], -r4
   18278:	ldrdeq	r8, [r1], -r4
   1827c:	ldrdeq	r8, [r1], -r4
   18280:	ldrdeq	r8, [r1], -r4
   18284:	ldrdeq	r8, [r1], -r4
   18288:	ldrdeq	r8, [r1], -r4
   1828c:	ldrdeq	r8, [r1], -r4
   18290:	ldrdeq	r8, [r1], -r4
   18294:	ldrdeq	r8, [r1], -r4
   18298:			; <UNDEFINED> instruction: 0x00018ab4
   1829c:	andeq	r8, r1, r8, ror #19
   182a0:	andeq	r8, r1, r8, ror #19
   182a4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182a8:	andeq	r8, r1, r8, ror #19
   182ac:	andeq	r8, r1, r0, lsl #21
   182b0:	andeq	r8, r1, r8, ror #19
   182b4:	andeq	r8, r1, r4, asr sl
   182b8:	andeq	r8, r1, r8, ror #19
   182bc:	andeq	r8, r1, r8, ror #19
   182c0:	andeq	r8, r1, r8, ror #19
   182c4:	andeq	r8, r1, r0, lsl #21
   182c8:	andeq	r8, r1, r0, lsl #21
   182cc:	andeq	r8, r1, r0, lsl #21
   182d0:	andeq	r8, r1, r0, lsl #21
   182d4:	andeq	r8, r1, r0, lsl #21
   182d8:	andeq	r8, r1, r0, lsl #21
   182dc:	andeq	r8, r1, r0, lsl #21
   182e0:	andeq	r8, r1, r0, lsl #21
   182e4:	andeq	r8, r1, r0, lsl #21
   182e8:	andeq	r8, r1, r0, lsl #21
   182ec:	andeq	r8, r1, r0, lsl #21
   182f0:	andeq	r8, r1, r0, lsl #21
   182f4:	andeq	r8, r1, r0, lsl #21
   182f8:	andeq	r8, r1, r0, lsl #21
   182fc:	andeq	r8, r1, r0, lsl #21
   18300:	andeq	r8, r1, r0, lsl #21
   18304:	andeq	r8, r1, r8, ror #19
   18308:	andeq	r8, r1, r8, ror #19
   1830c:	andeq	r8, r1, r8, ror #19
   18310:	andeq	r8, r1, r8, ror #19
   18314:	andeq	r8, r1, r4, lsr #20
   18318:	ldrdeq	r8, [r1], -r4
   1831c:	andeq	r8, r1, r0, lsl #21
   18320:	andeq	r8, r1, r0, lsl #21
   18324:	andeq	r8, r1, r0, lsl #21
   18328:	andeq	r8, r1, r0, lsl #21
   1832c:	andeq	r8, r1, r0, lsl #21
   18330:	andeq	r8, r1, r0, lsl #21
   18334:	andeq	r8, r1, r0, lsl #21
   18338:	andeq	r8, r1, r0, lsl #21
   1833c:	andeq	r8, r1, r0, lsl #21
   18340:	andeq	r8, r1, r0, lsl #21
   18344:	andeq	r8, r1, r0, lsl #21
   18348:	andeq	r8, r1, r0, lsl #21
   1834c:	andeq	r8, r1, r0, lsl #21
   18350:	andeq	r8, r1, r0, lsl #21
   18354:	andeq	r8, r1, r0, lsl #21
   18358:	andeq	r8, r1, r0, lsl #21
   1835c:	andeq	r8, r1, r0, lsl #21
   18360:	andeq	r8, r1, r0, lsl #21
   18364:	andeq	r8, r1, r0, lsl #21
   18368:	andeq	r8, r1, r0, lsl #21
   1836c:	andeq	r8, r1, r0, lsl #21
   18370:	andeq	r8, r1, r0, lsl #21
   18374:	andeq	r8, r1, r0, lsl #21
   18378:	andeq	r8, r1, r0, lsl #21
   1837c:	andeq	r8, r1, r0, lsl #21
   18380:	andeq	r8, r1, r0, lsl #21
   18384:	andeq	r8, r1, r8, ror #19
   18388:	andeq	r8, r1, r4, asr #14
   1838c:	andeq	r8, r1, r0, lsl #21
   18390:	andeq	r8, r1, r8, ror #19
   18394:	andeq	r8, r1, r0, lsl #21
   18398:	andeq	r8, r1, r8, ror #19
   1839c:	andeq	r8, r1, r0, lsl #21
   183a0:	andeq	r8, r1, r0, lsl #21
   183a4:	andeq	r8, r1, r0, lsl #21
   183a8:	andeq	r8, r1, r0, lsl #21
   183ac:	andeq	r8, r1, r0, lsl #21
   183b0:	andeq	r8, r1, r0, lsl #21
   183b4:	andeq	r8, r1, r0, lsl #21
   183b8:	andeq	r8, r1, r0, lsl #21
   183bc:	andeq	r8, r1, r0, lsl #21
   183c0:	andeq	r8, r1, r0, lsl #21
   183c4:	andeq	r8, r1, r0, lsl #21
   183c8:	andeq	r8, r1, r0, lsl #21
   183cc:	andeq	r8, r1, r0, lsl #21
   183d0:	andeq	r8, r1, r0, lsl #21
   183d4:	andeq	r8, r1, r0, lsl #21
   183d8:	andeq	r8, r1, r0, lsl #21
   183dc:	andeq	r8, r1, r0, lsl #21
   183e0:	andeq	r8, r1, r0, lsl #21
   183e4:	andeq	r8, r1, r0, lsl #21
   183e8:	andeq	r8, r1, r0, lsl #21
   183ec:	andeq	r8, r1, r0, lsl #21
   183f0:	andeq	r8, r1, r0, lsl #21
   183f4:	andeq	r8, r1, r0, lsl #21
   183f8:	andeq	r8, r1, r0, lsl #21
   183fc:	andeq	r8, r1, r0, lsl #21
   18400:	andeq	r8, r1, r0, lsl #21
   18404:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18408:	andeq	r8, r1, r8, ror #19
   1840c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18410:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18414:	mov	r3, #1
   18418:	str	r3, [sp, #28]
   1841c:	str	r3, [sp, #52]	; 0x34
   18420:	ldr	r3, [pc, #4000]	; 193c8 <__assert_fail@plt+0x7b74>
   18424:	mov	r7, #0
   18428:	str	r3, [sp, #64]	; 0x40
   1842c:	mov	r3, #2
   18430:	str	r3, [sp, #152]	; 0x98
   18434:	b	18138 <__assert_fail@plt+0x68e4>
   18438:	ldr	r3, [sp, #28]
   1843c:	cmp	r3, #0
   18440:	beq	1859c <__assert_fail@plt+0x6d48>
   18444:	mov	r3, #1
   18448:	str	r3, [sp, #52]	; 0x34
   1844c:	ldr	r3, [pc, #3956]	; 193c8 <__assert_fail@plt+0x7b74>
   18450:	mov	r7, #0
   18454:	str	r3, [sp, #64]	; 0x40
   18458:	b	18138 <__assert_fail@plt+0x68e4>
   1845c:	mov	r3, #1
   18460:	str	r3, [sp, #44]	; 0x2c
   18464:	str	r3, [sp, #52]	; 0x34
   18468:	str	r3, [sp, #28]
   1846c:	b	18420 <__assert_fail@plt+0x6bcc>
   18470:	mov	r3, #0
   18474:	str	r3, [sp, #28]
   18478:	mov	r3, #1
   1847c:	str	r3, [sp, #44]	; 0x2c
   18480:	mov	r7, #0
   18484:	b	18138 <__assert_fail@plt+0x68e4>
   18488:	ldr	r3, [sp, #152]	; 0x98
   1848c:	cmp	r3, #10
   18490:	beq	184d4 <__assert_fail@plt+0x6c80>
   18494:	mov	r2, #5
   18498:	ldr	r1, [pc, #3884]	; 193cc <__assert_fail@plt+0x7b78>
   1849c:	mov	r0, #0
   184a0:	bl	114e8 <dcgettext@plt>
   184a4:	ldr	r2, [pc, #3872]	; 193cc <__assert_fail@plt+0x7b78>
   184a8:	cmp	r0, r2
   184ac:	str	r0, [sp, #164]	; 0xa4
   184b0:	beq	194b8 <__assert_fail@plt+0x7c64>
   184b4:	mov	r2, #5
   184b8:	ldr	r1, [pc, #3848]	; 193c8 <__assert_fail@plt+0x7b74>
   184bc:	mov	r0, #0
   184c0:	bl	114e8 <dcgettext@plt>
   184c4:	ldr	r2, [pc, #3836]	; 193c8 <__assert_fail@plt+0x7b74>
   184c8:	cmp	r0, r2
   184cc:	str	r0, [sp, #168]	; 0xa8
   184d0:	beq	194a8 <__assert_fail@plt+0x7c54>
   184d4:	ldr	r7, [sp, #28]
   184d8:	cmp	r7, #0
   184dc:	movne	r7, #0
   184e0:	bne	18514 <__assert_fail@plt+0x6cc0>
   184e4:	ldr	r3, [sp, #164]	; 0xa4
   184e8:	ldrb	r3, [r3]
   184ec:	cmp	r3, #0
   184f0:	beq	194c8 <__assert_fail@plt+0x7c74>
   184f4:	ldr	r2, [sp, #164]	; 0xa4
   184f8:	ldr	r1, [sp, #32]
   184fc:	cmp	fp, r7
   18500:	strbhi	r3, [r1, r7]
   18504:	ldrb	r3, [r2, #1]!
   18508:	add	r7, r7, #1
   1850c:	cmp	r3, #0
   18510:	bne	184fc <__assert_fail@plt+0x6ca8>
   18514:	ldr	r0, [sp, #168]	; 0xa8
   18518:	bl	11674 <strlen@plt>
   1851c:	ldr	r3, [sp, #168]	; 0xa8
   18520:	str	r3, [sp, #64]	; 0x40
   18524:	mov	r3, #1
   18528:	str	r3, [sp, #44]	; 0x2c
   1852c:	str	r0, [sp, #52]	; 0x34
   18530:	b	18138 <__assert_fail@plt+0x68e4>
   18534:	mov	r3, #1
   18538:	str	r3, [sp, #44]	; 0x2c
   1853c:	str	r3, [sp, #52]	; 0x34
   18540:	str	r3, [sp, #28]
   18544:	ldr	r3, [pc, #3716]	; 193d0 <__assert_fail@plt+0x7b7c>
   18548:	mov	r7, #0
   1854c:	str	r3, [sp, #64]	; 0x40
   18550:	mov	r3, #5
   18554:	str	r3, [sp, #152]	; 0x98
   18558:	b	18138 <__assert_fail@plt+0x68e4>
   1855c:	ldr	r3, [sp, #28]
   18560:	cmp	r3, #0
   18564:	beq	19264 <__assert_fail@plt+0x7a10>
   18568:	ldr	r3, [sp, #28]
   1856c:	mov	r7, #0
   18570:	str	r3, [sp, #44]	; 0x2c
   18574:	mov	r3, #1
   18578:	str	r3, [sp, #52]	; 0x34
   1857c:	ldr	r3, [pc, #3660]	; 193d0 <__assert_fail@plt+0x7b7c>
   18580:	str	r3, [sp, #64]	; 0x40
   18584:	b	18138 <__assert_fail@plt+0x68e4>
   18588:	ldr	r3, [sp, #28]
   1858c:	cmp	r3, #0
   18590:	mov	r3, #1
   18594:	streq	r3, [sp, #44]	; 0x2c
   18598:	bne	1841c <__assert_fail@plt+0x6bc8>
   1859c:	cmp	fp, #0
   185a0:	beq	19294 <__assert_fail@plt+0x7a40>
   185a4:	ldr	r3, [sp, #32]
   185a8:	mov	r2, #39	; 0x27
   185ac:	mov	r7, #1
   185b0:	strb	r2, [r3]
   185b4:	mov	r3, #0
   185b8:	str	r3, [sp, #28]
   185bc:	mov	r3, #1
   185c0:	str	r3, [sp, #52]	; 0x34
   185c4:	ldr	r3, [pc, #3580]	; 193c8 <__assert_fail@plt+0x7b74>
   185c8:	str	r3, [sp, #64]	; 0x40
   185cc:	mov	r3, #2
   185d0:	str	r3, [sp, #152]	; 0x98
   185d4:	b	18138 <__assert_fail@plt+0x68e4>
   185d8:	ldr	r3, [sp, #24]
   185dc:	cmn	r3, #1
   185e0:	beq	191f8 <__assert_fail@plt+0x79a4>
   185e4:	ldr	r3, [sp, #24]
   185e8:	subs	r3, r3, #1
   185ec:	movne	r3, #1
   185f0:	cmp	r3, #0
   185f4:	bne	18600 <__assert_fail@plt+0x6dac>
   185f8:	cmp	sl, #0
   185fc:	beq	189ec <__assert_fail@plt+0x7198>
   18600:	ldr	r3, [sp, #152]	; 0x98
   18604:	mov	r5, #0
   18608:	sub	r2, r3, #2
   1860c:	mov	r8, r5
   18610:	clz	r2, r2
   18614:	lsr	r2, r2, #5
   18618:	ldr	r3, [sp, #60]	; 0x3c
   1861c:	ldr	r1, [sp, #28]
   18620:	orr	r3, r2, r3
   18624:	eor	r3, r3, #1
   18628:	orr	r3, r1, r3
   1862c:	tst	r3, #255	; 0xff
   18630:	bne	18d5c <__assert_fail@plt+0x7508>
   18634:	cmp	r6, #0
   18638:	bne	18788 <__assert_fail@plt+0x6f34>
   1863c:	ldr	r3, [sp, #40]	; 0x28
   18640:	eor	r8, r8, #1
   18644:	and	r8, r8, r3
   18648:	add	sl, sl, #1
   1864c:	uxtb	r6, r8
   18650:	cmp	r6, #0
   18654:	beq	18688 <__assert_fail@plt+0x6e34>
   18658:	cmp	fp, r7
   1865c:	movhi	r2, #39	; 0x27
   18660:	ldrhi	r3, [sp, #32]
   18664:	strbhi	r2, [r3, r7]
   18668:	add	r3, r7, #1
   1866c:	cmp	fp, r3
   18670:	movhi	r1, #39	; 0x27
   18674:	ldrhi	r2, [sp, #32]
   18678:	add	r7, r7, #2
   1867c:	strbhi	r1, [r2, r3]
   18680:	mov	r3, #0
   18684:	str	r3, [sp, #40]	; 0x28
   18688:	cmp	r7, fp
   1868c:	ldrcc	r3, [sp, #32]
   18690:	strbcc	r4, [r3, r7]
   18694:	ldr	r3, [sp, #36]	; 0x24
   18698:	cmp	r5, #0
   1869c:	moveq	r3, #0
   186a0:	str	r3, [sp, #36]	; 0x24
   186a4:	ldr	r3, [sp, #24]
   186a8:	add	r7, r7, #1
   186ac:	cmn	r3, #1
   186b0:	bne	18154 <__assert_fail@plt+0x6900>
   186b4:	ldr	r3, [sp, #56]	; 0x38
   186b8:	ldrb	r5, [r3, sl]
   186bc:	adds	r5, r5, #0
   186c0:	movne	r5, #1
   186c4:	cmp	r5, #0
   186c8:	bne	18168 <__assert_fail@plt+0x6914>
   186cc:	ldr	r3, [sp, #152]	; 0x98
   186d0:	ldr	r1, [sp, #28]
   186d4:	sub	r3, r3, #2
   186d8:	clz	r3, r3
   186dc:	lsr	r3, r3, #5
   186e0:	and	r9, r1, r3
   186e4:	cmp	r7, #0
   186e8:	movne	r2, #0
   186ec:	andeq	r2, r9, #1
   186f0:	cmp	r2, #0
   186f4:	bne	190d0 <__assert_fail@plt+0x787c>
   186f8:	eor	r2, r1, #1
   186fc:	ands	r3, r3, r2
   18700:	beq	1958c <__assert_fail@plt+0x7d38>
   18704:	ldr	r2, [sp, #68]	; 0x44
   18708:	cmp	r2, #0
   1870c:	beq	19578 <__assert_fail@plt+0x7d24>
   18710:	ldr	r3, [sp, #36]	; 0x24
   18714:	cmp	r3, #0
   18718:	bne	19530 <__assert_fail@plt+0x7cdc>
   1871c:	ldr	r2, [sp, #72]	; 0x48
   18720:	clz	r3, fp
   18724:	cmp	r2, #0
   18728:	lsr	r3, r3, #5
   1872c:	moveq	r3, #0
   18730:	cmp	r3, #0
   18734:	beq	194d0 <__assert_fail@plt+0x7c7c>
   18738:	str	r3, [sp, #68]	; 0x44
   1873c:	ldr	fp, [sp, #72]	; 0x48
   18740:	b	180f0 <__assert_fail@plt+0x689c>
   18744:	ldr	r3, [sp, #152]	; 0x98
   18748:	cmp	r3, #2
   1874c:	beq	18da0 <__assert_fail@plt+0x754c>
   18750:	ldr	r3, [sp, #44]	; 0x2c
   18754:	ldr	r2, [sp, #28]
   18758:	and	r2, r3, r2
   1875c:	ands	r2, r9, r2
   18760:	bne	18dac <__assert_fail@plt+0x7558>
   18764:	mov	r4, #92	; 0x5c
   18768:	mov	r3, r4
   1876c:	ldr	r1, [sp, #44]	; 0x2c
   18770:	cmp	r1, #0
   18774:	moveq	r5, #0
   18778:	moveq	r8, r1
   1877c:	beq	18618 <__assert_fail@plt+0x6dc4>
   18780:	mov	r4, r3
   18784:	mov	r5, #0
   18788:	ldr	r3, [sp, #28]
   1878c:	cmp	r3, #0
   18790:	bne	18d94 <__assert_fail@plt+0x7540>
   18794:	ldr	r3, [sp, #40]	; 0x28
   18798:	eor	r9, r3, #1
   1879c:	and	r9, r9, r2
   187a0:	ands	r9, r9, #255	; 0xff
   187a4:	beq	187e8 <__assert_fail@plt+0x6f94>
   187a8:	cmp	fp, r7
   187ac:	movhi	r2, #39	; 0x27
   187b0:	ldrhi	r3, [sp, #32]
   187b4:	str	r9, [sp, #40]	; 0x28
   187b8:	strbhi	r2, [r3, r7]
   187bc:	add	r3, r7, #1
   187c0:	cmp	fp, r3
   187c4:	movhi	r1, #36	; 0x24
   187c8:	ldrhi	r2, [sp, #32]
   187cc:	strbhi	r1, [r2, r3]
   187d0:	add	r3, r7, #2
   187d4:	cmp	fp, r3
   187d8:	add	r7, r7, #3
   187dc:	ldrhi	r2, [sp, #32]
   187e0:	movhi	r1, #39	; 0x27
   187e4:	strbhi	r1, [r2, r3]
   187e8:	cmp	fp, r7
   187ec:	movhi	r2, #92	; 0x5c
   187f0:	ldrhi	r3, [sp, #32]
   187f4:	add	sl, sl, #1
   187f8:	strbhi	r2, [r3, r7]
   187fc:	add	r7, r7, #1
   18800:	b	18688 <__assert_fail@plt+0x6e34>
   18804:	ldr	r3, [sp, #152]	; 0x98
   18808:	mov	r4, #11
   1880c:	sub	r2, r3, #2
   18810:	mov	r3, #118	; 0x76
   18814:	clz	r2, r2
   18818:	lsr	r2, r2, #5
   1881c:	b	1876c <__assert_fail@plt+0x6f18>
   18820:	mov	r4, #10
   18824:	mov	r3, #110	; 0x6e
   18828:	ldr	r2, [sp, #152]	; 0x98
   1882c:	ldr	r1, [sp, #28]
   18830:	sub	r2, r2, #2
   18834:	clz	r2, r2
   18838:	lsr	r2, r2, #5
   1883c:	ands	r1, r1, r2
   18840:	beq	1876c <__assert_fail@plt+0x6f18>
   18844:	ldr	sl, [sp, #32]
   18848:	mov	r8, fp
   1884c:	mov	r2, r1
   18850:	mov	r3, #2
   18854:	str	r3, [sp, #152]	; 0x98
   18858:	ldr	r9, [sp, #44]	; 0x2c
   1885c:	ldr	r3, [sp, #152]	; 0x98
   18860:	and	r9, r9, r2
   18864:	tst	r9, #255	; 0xff
   18868:	movne	r3, #4
   1886c:	str	r3, [sp, #152]	; 0x98
   18870:	ldr	r3, [sp, #156]	; 0x9c
   18874:	mov	ip, #0
   18878:	bic	r3, r3, #2
   1887c:	str	r3, [sp, #4]
   18880:	ldr	r3, [sp, #168]	; 0xa8
   18884:	ldr	r2, [sp, #56]	; 0x38
   18888:	str	r3, [sp, #16]
   1888c:	ldr	r3, [sp, #164]	; 0xa4
   18890:	mov	r1, r8
   18894:	str	r3, [sp, #12]
   18898:	ldr	r3, [sp, #152]	; 0x98
   1889c:	mov	r0, sl
   188a0:	str	r3, [sp]
   188a4:	str	ip, [sp, #8]
   188a8:	ldr	r3, [sp, #24]
   188ac:	bl	18094 <__assert_fail@plt+0x6840>
   188b0:	mov	fp, r0
   188b4:	mov	r0, fp
   188b8:	add	sp, sp, #116	; 0x74
   188bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188c0:	ldr	r3, [sp, #152]	; 0x98
   188c4:	mov	r4, #8
   188c8:	sub	r2, r3, #2
   188cc:	mov	r3, #98	; 0x62
   188d0:	clz	r2, r2
   188d4:	lsr	r2, r2, #5
   188d8:	b	1876c <__assert_fail@plt+0x6f18>
   188dc:	ldr	r3, [sp, #152]	; 0x98
   188e0:	mov	r4, #7
   188e4:	sub	r2, r3, #2
   188e8:	mov	r3, #97	; 0x61
   188ec:	clz	r2, r2
   188f0:	lsr	r2, r2, #5
   188f4:	b	1876c <__assert_fail@plt+0x6f18>
   188f8:	ldr	r3, [sp, #44]	; 0x2c
   188fc:	cmp	r3, #0
   18900:	beq	190e4 <__assert_fail@plt+0x7890>
   18904:	ldr	r3, [sp, #28]
   18908:	cmp	r3, #0
   1890c:	bne	193bc <__assert_fail@plt+0x7b68>
   18910:	ldr	r3, [sp, #152]	; 0x98
   18914:	sub	r2, r3, #2
   18918:	ldr	r3, [sp, #40]	; 0x28
   1891c:	clz	r2, r2
   18920:	eor	r3, r3, #1
   18924:	lsr	r2, r2, #5
   18928:	ands	r3, r2, r3
   1892c:	moveq	r1, r7
   18930:	beq	18974 <__assert_fail@plt+0x7120>
   18934:	cmp	fp, r7
   18938:	movhi	r0, #39	; 0x27
   1893c:	ldrhi	r1, [sp, #32]
   18940:	str	r3, [sp, #40]	; 0x28
   18944:	strbhi	r0, [r1, r7]
   18948:	add	r1, r7, #1
   1894c:	cmp	fp, r1
   18950:	movhi	ip, #36	; 0x24
   18954:	ldrhi	r0, [sp, #32]
   18958:	strbhi	ip, [r0, r1]
   1895c:	add	r1, r7, #2
   18960:	cmp	fp, r1
   18964:	movhi	ip, #39	; 0x27
   18968:	ldrhi	r0, [sp, #32]
   1896c:	strbhi	ip, [r0, r1]
   18970:	add	r1, r7, #3
   18974:	cmp	fp, r1
   18978:	movhi	r0, #92	; 0x5c
   1897c:	ldrhi	r3, [sp, #32]
   18980:	add	r7, r1, #1
   18984:	strbhi	r0, [r3, r1]
   18988:	cmp	r8, #0
   1898c:	beq	192d0 <__assert_fail@plt+0x7a7c>
   18990:	ldr	r0, [sp, #24]
   18994:	add	r3, sl, #1
   18998:	cmp	r3, r0
   1899c:	bcs	1920c <__assert_fail@plt+0x79b8>
   189a0:	ldr	r0, [sp, #56]	; 0x38
   189a4:	ldrb	r3, [r0, r3]
   189a8:	sub	r3, r3, #48	; 0x30
   189ac:	cmp	r3, #9
   189b0:	bhi	1920c <__assert_fail@plt+0x79b8>
   189b4:	cmp	fp, r7
   189b8:	movhi	r3, #48	; 0x30
   189bc:	ldrhi	r0, [sp, #32]
   189c0:	ldr	r5, [sp, #28]
   189c4:	mov	r4, #48	; 0x30
   189c8:	strbhi	r3, [r0, r7]
   189cc:	add	r3, r1, #2
   189d0:	cmp	fp, r3
   189d4:	movhi	r0, #48	; 0x30
   189d8:	ldrhi	ip, [sp, #32]
   189dc:	add	r7, r1, #3
   189e0:	strbhi	r0, [ip, r3]
   189e4:	b	18618 <__assert_fail@plt+0x6dc4>
   189e8:	mov	r5, #0
   189ec:	ldr	r3, [sp, #152]	; 0x98
   189f0:	sub	r2, r3, #2
   189f4:	ldr	r3, [sp, #28]
   189f8:	clz	r2, r2
   189fc:	lsr	r2, r2, #5
   18a00:	ands	r8, r3, r2
   18a04:	beq	18618 <__assert_fail@plt+0x6dc4>
   18a08:	mov	r3, r8
   18a0c:	mov	r2, r3
   18a10:	mov	r3, #2
   18a14:	ldr	sl, [sp, #32]
   18a18:	mov	r8, fp
   18a1c:	str	r3, [sp, #152]	; 0x98
   18a20:	b	18858 <__assert_fail@plt+0x7004>
   18a24:	ldr	r3, [sp, #152]	; 0x98
   18a28:	cmp	r3, #2
   18a2c:	beq	19150 <__assert_fail@plt+0x78fc>
   18a30:	cmp	r3, #5
   18a34:	beq	19110 <__assert_fail@plt+0x78bc>
   18a38:	mov	r5, #0
   18a3c:	sub	r2, r3, #2
   18a40:	mov	r8, r5
   18a44:	clz	r2, r2
   18a48:	mov	r4, #63	; 0x3f
   18a4c:	lsr	r2, r2, #5
   18a50:	b	18618 <__assert_fail@plt+0x6dc4>
   18a54:	ldr	r3, [sp, #152]	; 0x98
   18a58:	cmp	r3, #2
   18a5c:	beq	19170 <__assert_fail@plt+0x791c>
   18a60:	mov	r2, #0
   18a64:	str	r5, [sp, #68]	; 0x44
   18a68:	mov	r8, r2
   18a6c:	mov	r4, #39	; 0x27
   18a70:	b	18618 <__assert_fail@plt+0x6dc4>
   18a74:	mov	r4, #13
   18a78:	mov	r3, #114	; 0x72
   18a7c:	b	18828 <__assert_fail@plt+0x6fd4>
   18a80:	ldr	r3, [sp, #152]	; 0x98
   18a84:	mov	r8, #0
   18a88:	sub	r2, r3, #2
   18a8c:	clz	r2, r2
   18a90:	lsr	r2, r2, #5
   18a94:	b	18618 <__assert_fail@plt+0x6dc4>
   18a98:	ldr	r3, [sp, #152]	; 0x98
   18a9c:	mov	r4, #12
   18aa0:	sub	r2, r3, #2
   18aa4:	mov	r3, #102	; 0x66
   18aa8:	clz	r2, r2
   18aac:	lsr	r2, r2, #5
   18ab0:	b	1876c <__assert_fail@plt+0x6f18>
   18ab4:	mov	r5, r6
   18ab8:	b	189ec <__assert_fail@plt+0x7198>
   18abc:	ldr	r3, [sp, #152]	; 0x98
   18ac0:	sub	r2, r3, #2
   18ac4:	mov	r3, #116	; 0x74
   18ac8:	clz	r2, r2
   18acc:	lsr	r2, r2, #5
   18ad0:	b	1876c <__assert_fail@plt+0x6f18>
   18ad4:	ldr	r8, [sp, #76]	; 0x4c
   18ad8:	cmp	r8, #1
   18adc:	bne	18f8c <__assert_fail@plt+0x7738>
   18ae0:	bl	11644 <__ctype_b_loc@plt>
   18ae4:	sxth	r3, r4
   18ae8:	mov	ip, r8
   18aec:	lsl	r3, r3, #1
   18af0:	ldr	r2, [r0]
   18af4:	ldrh	r3, [r2, r3]
   18af8:	and	r3, r3, #16384	; 0x4000
   18afc:	cmp	r3, #0
   18b00:	movne	r5, #1
   18b04:	moveq	r5, #0
   18b08:	moveq	r3, #1
   18b0c:	movne	r3, #0
   18b10:	ldr	r2, [sp, #44]	; 0x2c
   18b14:	and	r3, r3, r2
   18b18:	ands	r8, r3, #255	; 0xff
   18b1c:	bne	18e20 <__assert_fail@plt+0x75cc>
   18b20:	ldr	r3, [sp, #152]	; 0x98
   18b24:	sub	r2, r3, #2
   18b28:	clz	r2, r2
   18b2c:	lsr	r2, r2, #5
   18b30:	b	18618 <__assert_fail@plt+0x6dc4>
   18b34:	ldr	r3, [sp, #56]	; 0x38
   18b38:	add	r3, r3, sl
   18b3c:	str	r3, [sp, #48]	; 0x30
   18b40:	ldr	r3, [sp, #48]	; 0x30
   18b44:	mov	r6, #0
   18b48:	ldrb	r4, [r3]
   18b4c:	cmp	r4, #126	; 0x7e
   18b50:	ldrls	pc, [pc, r4, lsl #2]
   18b54:	b	18ad4 <__assert_fail@plt+0x7280>
   18b58:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18b5c:	ldrdeq	r8, [r1], -r4
   18b60:	ldrdeq	r8, [r1], -r4
   18b64:	ldrdeq	r8, [r1], -r4
   18b68:	ldrdeq	r8, [r1], -r4
   18b6c:	ldrdeq	r8, [r1], -r4
   18b70:	ldrdeq	r8, [r1], -r4
   18b74:	ldrdeq	r8, [r1], -ip
   18b78:	andeq	r8, r1, r0, asr #17
   18b7c:	andeq	r8, r1, r4, asr sp
   18b80:	andeq	r8, r1, r0, lsr #16
   18b84:	andeq	r8, r1, r4, lsl #16
   18b88:	muleq	r1, r8, sl
   18b8c:	andeq	r8, r1, r4, ror sl
   18b90:	ldrdeq	r8, [r1], -r4
   18b94:	ldrdeq	r8, [r1], -r4
   18b98:	ldrdeq	r8, [r1], -r4
   18b9c:	ldrdeq	r8, [r1], -r4
   18ba0:	ldrdeq	r8, [r1], -r4
   18ba4:	ldrdeq	r8, [r1], -r4
   18ba8:	ldrdeq	r8, [r1], -r4
   18bac:	ldrdeq	r8, [r1], -r4
   18bb0:	ldrdeq	r8, [r1], -r4
   18bb4:	ldrdeq	r8, [r1], -r4
   18bb8:	ldrdeq	r8, [r1], -r4
   18bbc:	ldrdeq	r8, [r1], -r4
   18bc0:	ldrdeq	r8, [r1], -r4
   18bc4:	ldrdeq	r8, [r1], -r4
   18bc8:	ldrdeq	r8, [r1], -r4
   18bcc:	ldrdeq	r8, [r1], -r4
   18bd0:	ldrdeq	r8, [r1], -r4
   18bd4:	ldrdeq	r8, [r1], -r4
   18bd8:	andeq	r8, r1, ip, ror #19
   18bdc:	andeq	r8, r1, r8, ror #19
   18be0:	andeq	r8, r1, r8, ror #19
   18be4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18be8:	andeq	r8, r1, r8, ror #19
   18bec:	andeq	r8, r1, r0, lsl #21
   18bf0:	andeq	r8, r1, r8, ror #19
   18bf4:	andeq	r8, r1, r4, asr sl
   18bf8:	andeq	r8, r1, r8, ror #19
   18bfc:	andeq	r8, r1, r8, ror #19
   18c00:	andeq	r8, r1, r8, ror #19
   18c04:	andeq	r8, r1, r0, lsl #21
   18c08:	andeq	r8, r1, r0, lsl #21
   18c0c:	andeq	r8, r1, r0, lsl #21
   18c10:	andeq	r8, r1, r0, lsl #21
   18c14:	andeq	r8, r1, r0, lsl #21
   18c18:	andeq	r8, r1, r0, lsl #21
   18c1c:	andeq	r8, r1, r0, lsl #21
   18c20:	andeq	r8, r1, r0, lsl #21
   18c24:	andeq	r8, r1, r0, lsl #21
   18c28:	andeq	r8, r1, r0, lsl #21
   18c2c:	andeq	r8, r1, r0, lsl #21
   18c30:	andeq	r8, r1, r0, lsl #21
   18c34:	andeq	r8, r1, r0, lsl #21
   18c38:	andeq	r8, r1, r0, lsl #21
   18c3c:	andeq	r8, r1, r0, lsl #21
   18c40:	andeq	r8, r1, r0, lsl #21
   18c44:	andeq	r8, r1, r8, ror #19
   18c48:	andeq	r8, r1, r8, ror #19
   18c4c:	andeq	r8, r1, r8, ror #19
   18c50:	andeq	r8, r1, r8, ror #19
   18c54:	andeq	r8, r1, r4, lsr #20
   18c58:	ldrdeq	r8, [r1], -r4
   18c5c:	andeq	r8, r1, r0, lsl #21
   18c60:	andeq	r8, r1, r0, lsl #21
   18c64:	andeq	r8, r1, r0, lsl #21
   18c68:	andeq	r8, r1, r0, lsl #21
   18c6c:	andeq	r8, r1, r0, lsl #21
   18c70:	andeq	r8, r1, r0, lsl #21
   18c74:	andeq	r8, r1, r0, lsl #21
   18c78:	andeq	r8, r1, r0, lsl #21
   18c7c:	andeq	r8, r1, r0, lsl #21
   18c80:	andeq	r8, r1, r0, lsl #21
   18c84:	andeq	r8, r1, r0, lsl #21
   18c88:	andeq	r8, r1, r0, lsl #21
   18c8c:	andeq	r8, r1, r0, lsl #21
   18c90:	andeq	r8, r1, r0, lsl #21
   18c94:	andeq	r8, r1, r0, lsl #21
   18c98:	andeq	r8, r1, r0, lsl #21
   18c9c:	andeq	r8, r1, r0, lsl #21
   18ca0:	andeq	r8, r1, r0, lsl #21
   18ca4:	andeq	r8, r1, r0, lsl #21
   18ca8:	andeq	r8, r1, r0, lsl #21
   18cac:	andeq	r8, r1, r0, lsl #21
   18cb0:	andeq	r8, r1, r0, lsl #21
   18cb4:	andeq	r8, r1, r0, lsl #21
   18cb8:	andeq	r8, r1, r0, lsl #21
   18cbc:	andeq	r8, r1, r0, lsl #21
   18cc0:	andeq	r8, r1, r0, lsl #21
   18cc4:	andeq	r8, r1, r8, ror #19
   18cc8:	andeq	r8, r1, r4, asr #14
   18ccc:	andeq	r8, r1, r0, lsl #21
   18cd0:	andeq	r8, r1, r8, ror #19
   18cd4:	andeq	r8, r1, r0, lsl #21
   18cd8:	andeq	r8, r1, r8, ror #19
   18cdc:	andeq	r8, r1, r0, lsl #21
   18ce0:	andeq	r8, r1, r0, lsl #21
   18ce4:	andeq	r8, r1, r0, lsl #21
   18ce8:	andeq	r8, r1, r0, lsl #21
   18cec:	andeq	r8, r1, r0, lsl #21
   18cf0:	andeq	r8, r1, r0, lsl #21
   18cf4:	andeq	r8, r1, r0, lsl #21
   18cf8:	andeq	r8, r1, r0, lsl #21
   18cfc:	andeq	r8, r1, r0, lsl #21
   18d00:	andeq	r8, r1, r0, lsl #21
   18d04:	andeq	r8, r1, r0, lsl #21
   18d08:	andeq	r8, r1, r0, lsl #21
   18d0c:	andeq	r8, r1, r0, lsl #21
   18d10:	andeq	r8, r1, r0, lsl #21
   18d14:	andeq	r8, r1, r0, lsl #21
   18d18:	andeq	r8, r1, r0, lsl #21
   18d1c:	andeq	r8, r1, r0, lsl #21
   18d20:	andeq	r8, r1, r0, lsl #21
   18d24:	andeq	r8, r1, r0, lsl #21
   18d28:	andeq	r8, r1, r0, lsl #21
   18d2c:	andeq	r8, r1, r0, lsl #21
   18d30:	andeq	r8, r1, r0, lsl #21
   18d34:	andeq	r8, r1, r0, lsl #21
   18d38:	andeq	r8, r1, r0, lsl #21
   18d3c:	andeq	r8, r1, r0, lsl #21
   18d40:	andeq	r8, r1, r0, lsl #21
   18d44:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d48:	andeq	r8, r1, r8, ror #19
   18d4c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d50:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d54:	mov	r3, #116	; 0x74
   18d58:	b	18828 <__assert_fail@plt+0x6fd4>
   18d5c:	ldr	r3, [sp, #160]	; 0xa0
   18d60:	cmp	r3, #0
   18d64:	beq	18634 <__assert_fail@plt+0x6de0>
   18d68:	lsr	r3, r4, #5
   18d6c:	ldr	r0, [sp, #160]	; 0xa0
   18d70:	uxtb	r3, r3
   18d74:	and	r1, r4, #31
   18d78:	ldr	r0, [r0, r3, lsl #2]
   18d7c:	lsr	r3, r0, r1
   18d80:	tst	r3, #1
   18d84:	beq	18634 <__assert_fail@plt+0x6de0>
   18d88:	ldr	r3, [sp, #28]
   18d8c:	cmp	r3, #0
   18d90:	beq	18794 <__assert_fail@plt+0x6f40>
   18d94:	ldr	sl, [sp, #32]
   18d98:	mov	r8, fp
   18d9c:	b	18858 <__assert_fail@plt+0x7004>
   18da0:	ldr	r3, [sp, #28]
   18da4:	cmp	r3, #0
   18da8:	bne	192fc <__assert_fail@plt+0x7aa8>
   18dac:	add	sl, sl, #1
   18db0:	ldr	r6, [sp, #40]	; 0x28
   18db4:	mov	r5, #0
   18db8:	mov	r4, #92	; 0x5c
   18dbc:	b	18650 <__assert_fail@plt+0x6dfc>
   18dc0:	cmp	r9, r8
   18dc4:	bne	19034 <__assert_fail@plt+0x77e0>
   18dc8:	ldr	r0, [sp, #100]	; 0x64
   18dcc:	bl	11530 <iswprint@plt>
   18dd0:	add	r5, r5, r4
   18dd4:	cmp	r0, #0
   18dd8:	add	r0, sp, #104	; 0x68
   18ddc:	moveq	r6, #0
   18de0:	bl	114c4 <mbsinit@plt>
   18de4:	cmp	r0, #0
   18de8:	beq	18fc8 <__assert_fail@plt+0x7774>
   18dec:	mov	r2, r6
   18df0:	mov	ip, r5
   18df4:	eor	r5, r2, #1
   18df8:	ldr	r4, [sp, #80]	; 0x50
   18dfc:	ldr	r6, [sp, #84]	; 0x54
   18e00:	ldr	r7, [sp, #88]	; 0x58
   18e04:	uxtb	r5, r5
   18e08:	cmp	ip, #1
   18e0c:	bls	1930c <__assert_fail@plt+0x7ab8>
   18e10:	ldr	r3, [sp, #44]	; 0x2c
   18e14:	and	r8, r3, r5
   18e18:	mov	r5, r2
   18e1c:	uxtb	r8, r8
   18e20:	add	r2, sl, ip
   18e24:	ldr	r0, [sp, #48]	; 0x30
   18e28:	mov	r1, #0
   18e2c:	str	r5, [sp, #48]	; 0x30
   18e30:	ldr	r9, [sp, #28]
   18e34:	ldr	ip, [sp, #40]	; 0x28
   18e38:	ldr	r3, [sp, #32]
   18e3c:	ldr	r5, [sp, #152]	; 0x98
   18e40:	b	18efc <__assert_fail@plt+0x76a8>
   18e44:	cmp	r9, #0
   18e48:	bne	19220 <__assert_fail@plt+0x79cc>
   18e4c:	eor	r1, ip, #1
   18e50:	cmp	r5, #2
   18e54:	movne	r1, #0
   18e58:	andeq	r1, r1, #1
   18e5c:	cmp	r1, #0
   18e60:	beq	18e98 <__assert_fail@plt+0x7644>
   18e64:	cmp	fp, r7
   18e68:	movhi	ip, #39	; 0x27
   18e6c:	strbhi	ip, [r3, r7]
   18e70:	add	ip, r7, #1
   18e74:	cmp	fp, ip
   18e78:	movhi	lr, #36	; 0x24
   18e7c:	strbhi	lr, [r3, ip]
   18e80:	add	ip, r7, #2
   18e84:	cmp	fp, ip
   18e88:	movhi	lr, #39	; 0x27
   18e8c:	strbhi	lr, [r3, ip]
   18e90:	add	r7, r7, #3
   18e94:	mov	ip, r1
   18e98:	cmp	fp, r7
   18e9c:	movhi	r1, #92	; 0x5c
   18ea0:	strbhi	r1, [r3, r7]
   18ea4:	add	r1, r7, #1
   18ea8:	cmp	fp, r1
   18eac:	lsrhi	lr, r4, #6
   18eb0:	addhi	lr, lr, #48	; 0x30
   18eb4:	strbhi	lr, [r3, r1]
   18eb8:	add	lr, r7, #2
   18ebc:	cmp	fp, lr
   18ec0:	lsrhi	r1, r4, #3
   18ec4:	andhi	r1, r1, #7
   18ec8:	addhi	r1, r1, #48	; 0x30
   18ecc:	add	sl, sl, #1
   18ed0:	strbhi	r1, [r3, lr]
   18ed4:	and	r4, r4, #7
   18ed8:	cmp	r2, sl
   18edc:	add	r4, r4, #48	; 0x30
   18ee0:	add	r7, r7, #3
   18ee4:	bls	19244 <__assert_fail@plt+0x79f0>
   18ee8:	mov	r1, r8
   18eec:	cmp	fp, r7
   18ef0:	strbhi	r4, [r3, r7]
   18ef4:	ldrb	r4, [r0, #1]!
   18ef8:	add	r7, r7, #1
   18efc:	cmp	r8, #0
   18f00:	bne	18e44 <__assert_fail@plt+0x75f0>
   18f04:	cmp	r6, #0
   18f08:	bne	18f58 <__assert_fail@plt+0x7704>
   18f0c:	eor	r6, r1, #1
   18f10:	and	r6, r6, ip
   18f14:	add	sl, sl, #1
   18f18:	cmp	r2, sl
   18f1c:	uxtb	r6, r6
   18f20:	bls	18f80 <__assert_fail@plt+0x772c>
   18f24:	cmp	r6, #0
   18f28:	beq	18eec <__assert_fail@plt+0x7698>
   18f2c:	cmp	fp, r7
   18f30:	movhi	ip, #39	; 0x27
   18f34:	strbhi	ip, [r3, r7]
   18f38:	add	ip, r7, #1
   18f3c:	cmp	fp, ip
   18f40:	movhi	lr, #39	; 0x27
   18f44:	strbhi	lr, [r3, ip]
   18f48:	add	r7, r7, #2
   18f4c:	mov	r6, r8
   18f50:	mov	ip, r8
   18f54:	b	18eec <__assert_fail@plt+0x7698>
   18f58:	cmp	fp, r7
   18f5c:	eor	r6, r1, #1
   18f60:	movhi	lr, #92	; 0x5c
   18f64:	and	r6, r6, ip
   18f68:	add	sl, sl, #1
   18f6c:	strbhi	lr, [r3, r7]
   18f70:	cmp	r2, sl
   18f74:	add	r7, r7, #1
   18f78:	uxtb	r6, r6
   18f7c:	bhi	18f24 <__assert_fail@plt+0x76d0>
   18f80:	str	ip, [sp, #40]	; 0x28
   18f84:	ldr	r5, [sp, #48]	; 0x30
   18f88:	b	18650 <__assert_fail@plt+0x6dfc>
   18f8c:	ldr	r3, [sp, #24]
   18f90:	cmn	r3, #1
   18f94:	mov	r3, #0
   18f98:	str	r3, [sp, #104]	; 0x68
   18f9c:	str	r3, [sp, #108]	; 0x6c
   18fa0:	beq	192c0 <__assert_fail@plt+0x7a6c>
   18fa4:	mov	r2, r5
   18fa8:	mov	r3, #0
   18fac:	str	r7, [sp, #88]	; 0x58
   18fb0:	ldr	r7, [sp, #152]	; 0x98
   18fb4:	str	r5, [sp, #92]	; 0x5c
   18fb8:	str	r6, [sp, #84]	; 0x54
   18fbc:	mov	r5, r3
   18fc0:	mov	r6, r2
   18fc4:	str	r4, [sp, #80]	; 0x50
   18fc8:	ldr	r3, [sp, #56]	; 0x38
   18fcc:	add	r9, sl, r5
   18fd0:	add	r8, r3, r9
   18fd4:	ldr	r3, [sp, #24]
   18fd8:	mov	r1, r8
   18fdc:	sub	r2, r3, r9
   18fe0:	add	r0, sp, #100	; 0x64
   18fe4:	add	r3, sp, #104	; 0x68
   18fe8:	bl	1bdd0 <__assert_fail@plt+0xa57c>
   18fec:	subs	r4, r0, #0
   18ff0:	beq	19398 <__assert_fail@plt+0x7b44>
   18ff4:	cmn	r4, #1
   18ff8:	beq	19378 <__assert_fail@plt+0x7b24>
   18ffc:	cmn	r4, #2
   19000:	beq	19318 <__assert_fail@plt+0x7ac4>
   19004:	ldr	r2, [sp, #28]
   19008:	cmp	r7, #2
   1900c:	movne	r2, #0
   19010:	andeq	r2, r2, #1
   19014:	cmp	r2, #0
   19018:	beq	18dc8 <__assert_fail@plt+0x7574>
   1901c:	cmp	r4, #1
   19020:	beq	18dc8 <__assert_fail@plt+0x7574>
   19024:	sub	r3, r4, #1
   19028:	add	r9, r3, r9
   1902c:	ldr	r3, [sp, #56]	; 0x38
   19030:	add	r9, r3, r9
   19034:	ldrb	r3, [r8, #1]!
   19038:	sub	r3, r3, #91	; 0x5b
   1903c:	cmp	r3, #33	; 0x21
   19040:	ldrls	pc, [pc, r3, lsl #2]
   19044:	b	18dc0 <__assert_fail@plt+0x756c>
   19048:	ldrdeq	r9, [r1], -r0
   1904c:	ldrdeq	r9, [r1], -r0
   19050:	andeq	r8, r1, r0, asr #27
   19054:	ldrdeq	r9, [r1], -r0
   19058:	andeq	r8, r1, r0, asr #27
   1905c:	ldrdeq	r9, [r1], -r0
   19060:	andeq	r8, r1, r0, asr #27
   19064:	andeq	r8, r1, r0, asr #27
   19068:	andeq	r8, r1, r0, asr #27
   1906c:	andeq	r8, r1, r0, asr #27
   19070:	andeq	r8, r1, r0, asr #27
   19074:	andeq	r8, r1, r0, asr #27
   19078:	andeq	r8, r1, r0, asr #27
   1907c:	andeq	r8, r1, r0, asr #27
   19080:	andeq	r8, r1, r0, asr #27
   19084:	andeq	r8, r1, r0, asr #27
   19088:	andeq	r8, r1, r0, asr #27
   1908c:	andeq	r8, r1, r0, asr #27
   19090:	andeq	r8, r1, r0, asr #27
   19094:	andeq	r8, r1, r0, asr #27
   19098:	andeq	r8, r1, r0, asr #27
   1909c:	andeq	r8, r1, r0, asr #27
   190a0:	andeq	r8, r1, r0, asr #27
   190a4:	andeq	r8, r1, r0, asr #27
   190a8:	andeq	r8, r1, r0, asr #27
   190ac:	andeq	r8, r1, r0, asr #27
   190b0:	andeq	r8, r1, r0, asr #27
   190b4:	andeq	r8, r1, r0, asr #27
   190b8:	andeq	r8, r1, r0, asr #27
   190bc:	andeq	r8, r1, r0, asr #27
   190c0:	andeq	r8, r1, r0, asr #27
   190c4:	andeq	r8, r1, r0, asr #27
   190c8:	andeq	r8, r1, r0, asr #27
   190cc:	ldrdeq	r9, [r1], -r0
   190d0:	mov	r3, #2
   190d4:	ldr	sl, [sp, #32]
   190d8:	mov	r8, fp
   190dc:	str	r3, [sp, #152]	; 0x98
   190e0:	b	18858 <__assert_fail@plt+0x7004>
   190e4:	ldr	r3, [sp, #156]	; 0x9c
   190e8:	tst	r3, #1
   190ec:	bne	19218 <__assert_fail@plt+0x79c4>
   190f0:	ldr	r3, [sp, #152]	; 0x98
   190f4:	ldr	r4, [sp, #44]	; 0x2c
   190f8:	sub	r2, r3, #2
   190fc:	mov	r5, #0
   19100:	clz	r2, r2
   19104:	mov	r8, r4
   19108:	lsr	r2, r2, #5
   1910c:	b	18618 <__assert_fail@plt+0x6dc4>
   19110:	ldr	r3, [sp, #156]	; 0x9c
   19114:	ands	r9, r3, #4
   19118:	beq	19250 <__assert_fail@plt+0x79fc>
   1911c:	ldr	r2, [sp, #24]
   19120:	add	r3, sl, #2
   19124:	cmp	r3, r2
   19128:	bcs	1913c <__assert_fail@plt+0x78e8>
   1912c:	ldr	r2, [sp, #48]	; 0x30
   19130:	ldrb	r4, [r2, #1]
   19134:	cmp	r4, #63	; 0x3f
   19138:	beq	193d8 <__assert_fail@plt+0x7b84>
   1913c:	mov	r2, #0
   19140:	mov	r8, r2
   19144:	mov	r5, r2
   19148:	mov	r4, #63	; 0x3f
   1914c:	b	18618 <__assert_fail@plt+0x6dc4>
   19150:	ldr	r3, [sp, #28]
   19154:	cmp	r3, #0
   19158:	bne	1947c <__assert_fail@plt+0x7c28>
   1915c:	mov	r2, r5
   19160:	mov	r8, r3
   19164:	mov	r5, #0
   19168:	mov	r4, #63	; 0x3f
   1916c:	b	18618 <__assert_fail@plt+0x6dc4>
   19170:	ldr	r3, [sp, #28]
   19174:	cmp	r3, #0
   19178:	bne	1947c <__assert_fail@plt+0x7c28>
   1917c:	ldr	r2, [sp, #72]	; 0x48
   19180:	adds	r3, fp, #0
   19184:	movne	r3, #1
   19188:	cmp	r2, #0
   1918c:	movne	r3, #0
   19190:	cmp	r3, #0
   19194:	strne	fp, [sp, #72]	; 0x48
   19198:	movne	fp, #0
   1919c:	bne	191d8 <__assert_fail@plt+0x7984>
   191a0:	cmp	fp, r7
   191a4:	movhi	r2, #39	; 0x27
   191a8:	ldrhi	r3, [sp, #32]
   191ac:	strbhi	r2, [r3, r7]
   191b0:	add	r3, r7, #1
   191b4:	cmp	fp, r3
   191b8:	movhi	r1, #92	; 0x5c
   191bc:	ldrhi	r2, [sp, #32]
   191c0:	strbhi	r1, [r2, r3]
   191c4:	add	r3, r7, #2
   191c8:	cmp	fp, r3
   191cc:	movhi	r1, #39	; 0x27
   191d0:	ldrhi	r2, [sp, #32]
   191d4:	strbhi	r1, [r2, r3]
   191d8:	ldr	r3, [sp, #28]
   191dc:	add	r7, r7, #3
   191e0:	mov	r2, r5
   191e4:	mov	r8, r3
   191e8:	str	r5, [sp, #68]	; 0x44
   191ec:	str	r3, [sp, #40]	; 0x28
   191f0:	mov	r4, #39	; 0x27
   191f4:	b	18618 <__assert_fail@plt+0x6dc4>
   191f8:	ldr	r3, [sp, #56]	; 0x38
   191fc:	ldrb	r3, [r3, #1]
   19200:	adds	r3, r3, #0
   19204:	movne	r3, #1
   19208:	b	185f0 <__assert_fail@plt+0x6d9c>
   1920c:	ldr	r5, [sp, #28]
   19210:	mov	r4, #48	; 0x30
   19214:	b	18618 <__assert_fail@plt+0x6dc4>
   19218:	add	sl, sl, #1
   1921c:	b	18148 <__assert_fail@plt+0x68f4>
   19220:	mov	sl, r3
   19224:	ldr	r3, [sp, #28]
   19228:	mov	r8, fp
   1922c:	str	r3, [sp, #44]	; 0x2c
   19230:	ldr	r3, [sp, #152]	; 0x98
   19234:	sub	r2, r3, #2
   19238:	clz	r2, r2
   1923c:	lsr	r2, r2, #5
   19240:	b	18858 <__assert_fail@plt+0x7004>
   19244:	str	ip, [sp, #40]	; 0x28
   19248:	ldr	r5, [sp, #48]	; 0x30
   1924c:	b	18688 <__assert_fail@plt+0x6e34>
   19250:	mov	r2, r9
   19254:	mov	r8, r9
   19258:	mov	r5, #0
   1925c:	mov	r4, #63	; 0x3f
   19260:	b	18618 <__assert_fail@plt+0x6dc4>
   19264:	cmp	fp, #0
   19268:	beq	192e0 <__assert_fail@plt+0x7a8c>
   1926c:	ldr	r1, [sp, #32]
   19270:	mov	r3, #34	; 0x22
   19274:	mov	r2, #1
   19278:	strb	r3, [r1]
   1927c:	ldr	r3, [pc, #332]	; 193d0 <__assert_fail@plt+0x7b7c>
   19280:	str	r2, [sp, #52]	; 0x34
   19284:	mov	r7, r2
   19288:	str	r2, [sp, #44]	; 0x2c
   1928c:	str	r3, [sp, #64]	; 0x40
   19290:	b	18138 <__assert_fail@plt+0x68e4>
   19294:	ldr	r3, [pc, #300]	; 193c8 <__assert_fail@plt+0x7b74>
   19298:	str	r3, [sp, #64]	; 0x40
   1929c:	mov	r3, #0
   192a0:	str	r3, [sp, #28]
   192a4:	mov	r3, #1
   192a8:	str	r3, [sp, #52]	; 0x34
   192ac:	mov	r7, r3
   192b0:	mov	r3, #2
   192b4:	str	r3, [sp, #152]	; 0x98
   192b8:	b	18138 <__assert_fail@plt+0x68e4>
   192bc:	bl	11824 <abort@plt>
   192c0:	ldr	r0, [sp, #56]	; 0x38
   192c4:	bl	11674 <strlen@plt>
   192c8:	str	r0, [sp, #24]
   192cc:	b	18fa4 <__assert_fail@plt+0x7750>
   192d0:	mov	r5, r8
   192d4:	mov	r4, #48	; 0x30
   192d8:	ldr	r8, [sp, #44]	; 0x2c
   192dc:	b	18618 <__assert_fail@plt+0x6dc4>
   192e0:	mov	r3, #1
   192e4:	str	r3, [sp, #52]	; 0x34
   192e8:	mov	r7, r3
   192ec:	str	r3, [sp, #44]	; 0x2c
   192f0:	ldr	r3, [pc, #216]	; 193d0 <__assert_fail@plt+0x7b7c>
   192f4:	str	r3, [sp, #64]	; 0x40
   192f8:	b	18138 <__assert_fail@plt+0x68e4>
   192fc:	ldr	sl, [sp, #32]
   19300:	mov	r8, fp
   19304:	mov	r2, r3
   19308:	b	18858 <__assert_fail@plt+0x7004>
   1930c:	mov	r3, r5
   19310:	mov	r5, r2
   19314:	b	18b10 <__assert_fail@plt+0x72bc>
   19318:	ldr	r1, [sp, #24]
   1931c:	mov	r2, r5
   19320:	cmp	r1, r9
   19324:	mov	ip, r5
   19328:	ldr	r4, [sp, #80]	; 0x50
   1932c:	ldr	r5, [sp, #92]	; 0x5c
   19330:	ldr	r6, [sp, #84]	; 0x54
   19334:	ldr	r7, [sp, #88]	; 0x58
   19338:	bls	1936c <__assert_fail@plt+0x7b18>
   1933c:	ldrb	r3, [r8]
   19340:	cmp	r3, #0
   19344:	bne	19358 <__assert_fail@plt+0x7b04>
   19348:	b	19370 <__assert_fail@plt+0x7b1c>
   1934c:	ldrb	r3, [r8, #1]!
   19350:	cmp	r3, #0
   19354:	beq	19470 <__assert_fail@plt+0x7c1c>
   19358:	add	r2, r2, #1
   1935c:	add	r3, sl, r2
   19360:	cmp	r1, r3
   19364:	bhi	1934c <__assert_fail@plt+0x7af8>
   19368:	mov	ip, r2
   1936c:	mov	r3, #0
   19370:	mov	r2, r3
   19374:	b	18e08 <__assert_fail@plt+0x75b4>
   19378:	mov	r3, #0
   1937c:	mov	ip, r5
   19380:	ldr	r4, [sp, #80]	; 0x50
   19384:	ldr	r5, [sp, #92]	; 0x5c
   19388:	ldr	r6, [sp, #84]	; 0x54
   1938c:	ldr	r7, [sp, #88]	; 0x58
   19390:	mov	r2, r3
   19394:	b	18e08 <__assert_fail@plt+0x75b4>
   19398:	mov	r3, r6
   1939c:	mov	ip, r5
   193a0:	eor	r5, r3, #1
   193a4:	mov	r2, r6
   193a8:	ldr	r4, [sp, #80]	; 0x50
   193ac:	ldr	r6, [sp, #84]	; 0x54
   193b0:	ldr	r7, [sp, #88]	; 0x58
   193b4:	uxtb	r5, r5
   193b8:	b	18e08 <__assert_fail@plt+0x75b4>
   193bc:	ldr	sl, [sp, #32]
   193c0:	mov	r8, fp
   193c4:	b	1922c <__assert_fail@plt+0x79d8>
   193c8:	andeq	lr, r1, r8, asr #15
   193cc:	andeq	lr, r1, ip, asr #15
   193d0:	andeq	lr, r1, r4, asr #15
   193d4:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   193d8:	ldr	r2, [sp, #56]	; 0x38
   193dc:	ldrb	r1, [r2, r3]
   193e0:	sub	r2, r1, #33	; 0x21
   193e4:	uxtb	r2, r2
   193e8:	cmp	r2, #29
   193ec:	bhi	1948c <__assert_fail@plt+0x7c38>
   193f0:	ldr	r0, [pc, #-36]	; 193d4 <__assert_fail@plt+0x7b80>
   193f4:	mov	ip, #1
   193f8:	ands	r2, r0, ip, lsl r2
   193fc:	beq	1949c <__assert_fail@plt+0x7c48>
   19400:	ldr	r2, [sp, #28]
   19404:	cmp	r2, #0
   19408:	bne	1959c <__assert_fail@plt+0x7d48>
   1940c:	cmp	fp, r7
   19410:	ldr	r8, [sp, #28]
   19414:	ldrhi	r2, [sp, #32]
   19418:	mov	sl, r3
   1941c:	mov	r5, r8
   19420:	strbhi	r4, [r2, r7]
   19424:	add	r2, r7, #1
   19428:	cmp	fp, r2
   1942c:	movhi	r0, #34	; 0x22
   19430:	ldrhi	ip, [sp, #32]
   19434:	mov	r4, r1
   19438:	strbhi	r0, [ip, r2]
   1943c:	add	r2, r7, #2
   19440:	cmp	fp, r2
   19444:	movhi	r0, #34	; 0x22
   19448:	ldrhi	ip, [sp, #32]
   1944c:	strbhi	r0, [ip, r2]
   19450:	add	r2, r7, #3
   19454:	cmp	fp, r2
   19458:	movhi	r0, #63	; 0x3f
   1945c:	ldrhi	ip, [sp, #32]
   19460:	add	r7, r7, #4
   19464:	strbhi	r0, [ip, r2]
   19468:	mov	r2, r8
   1946c:	b	18618 <__assert_fail@plt+0x6dc4>
   19470:	mov	ip, r2
   19474:	mov	r2, r3
   19478:	b	18e08 <__assert_fail@plt+0x75b4>
   1947c:	ldr	sl, [sp, #32]
   19480:	mov	r8, fp
   19484:	ldr	r2, [sp, #28]
   19488:	b	18858 <__assert_fail@plt+0x7004>
   1948c:	mov	r2, #0
   19490:	mov	r8, r2
   19494:	mov	r5, r2
   19498:	b	18618 <__assert_fail@plt+0x6dc4>
   1949c:	mov	r8, r2
   194a0:	mov	r5, #0
   194a4:	b	18618 <__assert_fail@plt+0x6dc4>
   194a8:	ldr	r1, [sp, #152]	; 0x98
   194ac:	bl	17f74 <__assert_fail@plt+0x6720>
   194b0:	str	r0, [sp, #168]	; 0xa8
   194b4:	b	184d4 <__assert_fail@plt+0x6c80>
   194b8:	ldr	r1, [sp, #152]	; 0x98
   194bc:	bl	17f74 <__assert_fail@plt+0x6720>
   194c0:	str	r0, [sp, #164]	; 0xa4
   194c4:	b	184b4 <__assert_fail@plt+0x6c60>
   194c8:	ldr	r7, [sp, #28]
   194cc:	b	18514 <__assert_fail@plt+0x6cc0>
   194d0:	ldr	sl, [sp, #32]
   194d4:	ldr	r2, [sp, #68]	; 0x44
   194d8:	mov	r8, fp
   194dc:	mov	fp, r7
   194e0:	ldr	r3, [sp, #64]	; 0x40
   194e4:	cmp	r3, #0
   194e8:	moveq	r2, #0
   194ec:	andne	r2, r2, #1
   194f0:	cmp	r2, #0
   194f4:	beq	19520 <__assert_fail@plt+0x7ccc>
   194f8:	mov	r2, r3
   194fc:	ldrb	r3, [r3]
   19500:	cmp	r3, #0
   19504:	beq	19520 <__assert_fail@plt+0x7ccc>
   19508:	cmp	r8, fp
   1950c:	strbhi	r3, [sl, fp]
   19510:	ldrb	r3, [r2, #1]!
   19514:	add	fp, fp, #1
   19518:	cmp	r3, #0
   1951c:	bne	19508 <__assert_fail@plt+0x7cb4>
   19520:	cmp	r8, fp
   19524:	movhi	r3, #0
   19528:	strbhi	r3, [sl, fp]
   1952c:	b	188b4 <__assert_fail@plt+0x7060>
   19530:	ldr	r3, [sp, #168]	; 0xa8
   19534:	ldr	sl, [sp, #32]
   19538:	str	r3, [sp, #16]
   1953c:	ldr	r3, [sp, #164]	; 0xa4
   19540:	mov	ip, #5
   19544:	str	r3, [sp, #12]
   19548:	ldr	r3, [sp, #160]	; 0xa0
   1954c:	ldr	r2, [sp, #56]	; 0x38
   19550:	str	r3, [sp, #8]
   19554:	ldr	r3, [sp, #156]	; 0x9c
   19558:	ldr	r1, [sp, #72]	; 0x48
   1955c:	str	r3, [sp, #4]
   19560:	mov	r0, sl
   19564:	ldr	r3, [sp, #24]
   19568:	str	ip, [sp]
   1956c:	bl	18094 <__assert_fail@plt+0x6840>
   19570:	mov	fp, r0
   19574:	b	188b4 <__assert_fail@plt+0x7060>
   19578:	mov	r8, fp
   1957c:	ldr	sl, [sp, #32]
   19580:	mov	fp, r7
   19584:	mov	r2, r3
   19588:	b	194e0 <__assert_fail@plt+0x7c8c>
   1958c:	mov	r8, fp
   19590:	ldr	sl, [sp, #32]
   19594:	mov	fp, r7
   19598:	b	194e0 <__assert_fail@plt+0x7c8c>
   1959c:	ldr	sl, [sp, #32]
   195a0:	mov	r8, fp
   195a4:	b	18870 <__assert_fail@plt+0x701c>
   195a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195ac:	sub	sp, sp, #52	; 0x34
   195b0:	mov	r4, r0
   195b4:	mov	r5, r3
   195b8:	mov	sl, r1
   195bc:	mov	fp, r2
   195c0:	bl	116b0 <__errno_location@plt>
   195c4:	ldr	r7, [pc, #412]	; 19768 <__assert_fail@plt+0x7f14>
   195c8:	cmn	r4, #-2147483647	; 0x80000001
   195cc:	ldr	r6, [r7]
   195d0:	mov	r8, r0
   195d4:	movne	r0, #0
   195d8:	moveq	r0, #1
   195dc:	ldr	r3, [r8]
   195e0:	orrs	r0, r0, r4, lsr #31
   195e4:	str	r3, [sp, #24]
   195e8:	bne	19764 <__assert_fail@plt+0x7f10>
   195ec:	ldr	r2, [r7, #4]
   195f0:	cmp	r4, r2
   195f4:	blt	19654 <__assert_fail@plt+0x7e00>
   195f8:	add	r9, r7, #8
   195fc:	cmp	r6, r9
   19600:	str	r2, [sp, #44]	; 0x2c
   19604:	beq	19734 <__assert_fail@plt+0x7ee0>
   19608:	mov	r3, #8
   1960c:	sub	r2, r4, r2
   19610:	mov	r0, r6
   19614:	str	r3, [sp]
   19618:	add	r2, r2, #1
   1961c:	mvn	r3, #-2147483648	; 0x80000000
   19620:	add	r1, sp, #44	; 0x2c
   19624:	bl	1a9ec <__assert_fail@plt+0x9198>
   19628:	mov	r6, r0
   1962c:	str	r0, [r7]
   19630:	ldr	r0, [r7, #4]
   19634:	ldr	r2, [sp, #44]	; 0x2c
   19638:	mov	r1, #0
   1963c:	sub	r2, r2, r0
   19640:	add	r0, r6, r0, lsl #3
   19644:	lsl	r2, r2, #3
   19648:	bl	116e0 <memset@plt>
   1964c:	ldr	r3, [sp, #44]	; 0x2c
   19650:	str	r3, [r7, #4]
   19654:	add	r3, r6, r4, lsl #3
   19658:	ldr	r1, [r5, #4]
   1965c:	ldr	r7, [r3, #4]
   19660:	ldr	r9, [r6, r4, lsl #3]
   19664:	ldr	r2, [r5, #40]	; 0x28
   19668:	ldr	ip, [r5, #44]	; 0x2c
   1966c:	add	r0, r5, #8
   19670:	str	r3, [sp, #28]
   19674:	ldr	r3, [r5]
   19678:	orr	r1, r1, #1
   1967c:	mov	lr, r0
   19680:	str	r1, [sp, #32]
   19684:	str	r0, [sp, #36]	; 0x24
   19688:	str	r1, [sp, #4]
   1968c:	str	r2, [sp, #12]
   19690:	str	r3, [sp]
   19694:	mov	r0, r7
   19698:	mov	r1, r9
   1969c:	str	ip, [sp, #16]
   196a0:	str	lr, [sp, #8]
   196a4:	mov	r3, fp
   196a8:	mov	r2, sl
   196ac:	bl	18094 <__assert_fail@plt+0x6840>
   196b0:	cmp	r9, r0
   196b4:	bhi	19720 <__assert_fail@plt+0x7ecc>
   196b8:	ldr	r3, [pc, #172]	; 1976c <__assert_fail@plt+0x7f18>
   196bc:	add	r9, r0, #1
   196c0:	cmp	r7, r3
   196c4:	str	r9, [r6, r4, lsl #3]
   196c8:	beq	196d4 <__assert_fail@plt+0x7e80>
   196cc:	mov	r0, r7
   196d0:	bl	15928 <__assert_fail@plt+0x40d4>
   196d4:	mov	r0, r9
   196d8:	bl	1a888 <__assert_fail@plt+0x9034>
   196dc:	ldr	lr, [sp, #28]
   196e0:	ldr	ip, [r5, #44]	; 0x2c
   196e4:	ldr	r4, [r5, #40]	; 0x28
   196e8:	mov	r3, fp
   196ec:	mov	r2, sl
   196f0:	mov	r1, r9
   196f4:	str	r0, [lr, #4]
   196f8:	ldr	lr, [r5]
   196fc:	ldr	r5, [sp, #36]	; 0x24
   19700:	str	ip, [sp, #16]
   19704:	str	r5, [sp, #8]
   19708:	ldr	r5, [sp, #32]
   1970c:	str	r4, [sp, #12]
   19710:	str	r5, [sp, #4]
   19714:	str	lr, [sp]
   19718:	mov	r7, r0
   1971c:	bl	18094 <__assert_fail@plt+0x6840>
   19720:	ldr	r3, [sp, #24]
   19724:	mov	r0, r7
   19728:	str	r3, [r8]
   1972c:	add	sp, sp, #52	; 0x34
   19730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19734:	mov	r3, #8
   19738:	sub	r2, r4, r2
   1973c:	str	r3, [sp]
   19740:	add	r1, sp, #44	; 0x2c
   19744:	add	r2, r2, #1
   19748:	mvn	r3, #-2147483648	; 0x80000000
   1974c:	bl	1a9ec <__assert_fail@plt+0x9198>
   19750:	mov	r6, r0
   19754:	ldm	r9, {r0, r1}
   19758:	str	r6, [r7]
   1975c:	stm	r6, {r0, r1}
   19760:	b	19630 <__assert_fail@plt+0x7ddc>
   19764:	bl	11824 <abort@plt>
   19768:	muleq	r2, r4, r1
   1976c:	andeq	pc, r2, ip, ror r2	; <UNPREDICTABLE>
   19770:	push	{r4, r5, r6, lr}
   19774:	mov	r5, r0
   19778:	bl	116b0 <__errno_location@plt>
   1977c:	cmp	r5, #0
   19780:	mov	r1, #48	; 0x30
   19784:	mov	r4, r0
   19788:	ldr	r0, [pc, #16]	; 197a0 <__assert_fail@plt+0x7f4c>
   1978c:	ldr	r6, [r4]
   19790:	movne	r0, r5
   19794:	bl	1ace8 <__assert_fail@plt+0x9494>
   19798:	str	r6, [r4]
   1979c:	pop	{r4, r5, r6, pc}
   197a0:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   197a4:	ldr	r3, [pc, #12]	; 197b8 <__assert_fail@plt+0x7f64>
   197a8:	cmp	r0, #0
   197ac:	moveq	r0, r3
   197b0:	ldr	r0, [r0]
   197b4:	bx	lr
   197b8:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   197bc:	ldr	r3, [pc, #12]	; 197d0 <__assert_fail@plt+0x7f7c>
   197c0:	cmp	r0, #0
   197c4:	moveq	r0, r3
   197c8:	str	r1, [r0]
   197cc:	bx	lr
   197d0:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   197d4:	ldr	r3, [pc, #52]	; 19810 <__assert_fail@plt+0x7fbc>
   197d8:	cmp	r0, #0
   197dc:	moveq	r0, r3
   197e0:	add	r3, r0, #8
   197e4:	push	{lr}		; (str lr, [sp, #-4]!)
   197e8:	lsr	lr, r1, #5
   197ec:	and	r1, r1, #31
   197f0:	ldr	ip, [r3, lr, lsl #2]
   197f4:	lsr	r0, ip, r1
   197f8:	eor	r2, r2, r0
   197fc:	and	r2, r2, #1
   19800:	and	r0, r0, #1
   19804:	eor	r1, ip, r2, lsl r1
   19808:	str	r1, [r3, lr, lsl #2]
   1980c:	pop	{pc}		; (ldr pc, [sp], #4)
   19810:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   19814:	ldr	r3, [pc, #16]	; 1982c <__assert_fail@plt+0x7fd8>
   19818:	cmp	r0, #0
   1981c:	movne	r3, r0
   19820:	ldr	r0, [r3, #4]
   19824:	str	r1, [r3, #4]
   19828:	bx	lr
   1982c:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   19830:	ldr	r3, [pc, #44]	; 19864 <__assert_fail@plt+0x8010>
   19834:	cmp	r0, #0
   19838:	moveq	r0, r3
   1983c:	mov	ip, #10
   19840:	cmp	r2, #0
   19844:	cmpne	r1, #0
   19848:	str	ip, [r0]
   1984c:	beq	1985c <__assert_fail@plt+0x8008>
   19850:	str	r1, [r0, #40]	; 0x28
   19854:	str	r2, [r0, #44]	; 0x2c
   19858:	bx	lr
   1985c:	push	{r4, lr}
   19860:	bl	11824 <abort@plt>
   19864:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   19868:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1986c:	sub	sp, sp, #24
   19870:	ldr	ip, [pc, #108]	; 198e4 <__assert_fail@plt+0x8090>
   19874:	ldr	r4, [sp, #56]	; 0x38
   19878:	mov	r9, r2
   1987c:	cmp	r4, #0
   19880:	moveq	r4, ip
   19884:	mov	sl, r3
   19888:	mov	r7, r0
   1988c:	mov	r8, r1
   19890:	bl	116b0 <__errno_location@plt>
   19894:	ldr	r3, [r4, #44]	; 0x2c
   19898:	mov	r1, r8
   1989c:	ldr	r6, [r0]
   198a0:	str	r3, [sp, #16]
   198a4:	ldr	r2, [r4, #40]	; 0x28
   198a8:	add	r3, r4, #8
   198ac:	str	r3, [sp, #8]
   198b0:	str	r2, [sp, #12]
   198b4:	ldr	r2, [r4, #4]
   198b8:	mov	r5, r0
   198bc:	str	r2, [sp, #4]
   198c0:	ldr	ip, [r4]
   198c4:	mov	r3, sl
   198c8:	mov	r2, r9
   198cc:	mov	r0, r7
   198d0:	str	ip, [sp]
   198d4:	bl	18094 <__assert_fail@plt+0x6840>
   198d8:	str	r6, [r5]
   198dc:	add	sp, sp, #24
   198e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   198e4:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   198e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198ec:	cmp	r3, #0
   198f0:	sub	sp, sp, #44	; 0x2c
   198f4:	ldr	r4, [pc, #192]	; 199bc <__assert_fail@plt+0x8168>
   198f8:	mov	r6, r2
   198fc:	movne	r4, r3
   19900:	mov	r9, r1
   19904:	mov	r8, r0
   19908:	bl	116b0 <__errno_location@plt>
   1990c:	ldr	r3, [r4, #44]	; 0x2c
   19910:	ldr	r5, [r4, #4]
   19914:	add	sl, r4, #8
   19918:	cmp	r6, #0
   1991c:	orreq	r5, r5, #1
   19920:	mov	r1, #0
   19924:	ldr	r2, [r0]
   19928:	str	r3, [sp, #16]
   1992c:	ldr	r3, [r4, #40]	; 0x28
   19930:	stmib	sp, {r5, sl}
   19934:	str	r3, [sp, #12]
   19938:	ldr	r3, [r4]
   1993c:	mov	r7, r0
   19940:	str	r2, [sp, #28]
   19944:	str	r3, [sp]
   19948:	mov	r2, r8
   1994c:	mov	r3, r9
   19950:	mov	r0, r1
   19954:	bl	18094 <__assert_fail@plt+0x6840>
   19958:	add	r1, r0, #1
   1995c:	mov	fp, r0
   19960:	mov	r0, r1
   19964:	str	r1, [sp, #36]	; 0x24
   19968:	bl	1a888 <__assert_fail@plt+0x9034>
   1996c:	ldr	r3, [r4, #44]	; 0x2c
   19970:	mov	r2, r8
   19974:	str	r3, [sp, #16]
   19978:	ldr	r3, [r4, #40]	; 0x28
   1997c:	str	r5, [sp, #4]
   19980:	str	r3, [sp, #12]
   19984:	str	sl, [sp, #8]
   19988:	ldr	ip, [r4]
   1998c:	ldr	r1, [sp, #36]	; 0x24
   19990:	mov	r3, r9
   19994:	str	ip, [sp]
   19998:	str	r0, [sp, #32]
   1999c:	bl	18094 <__assert_fail@plt+0x6840>
   199a0:	ldr	r2, [sp, #28]
   199a4:	cmp	r6, #0
   199a8:	str	r2, [r7]
   199ac:	ldr	r0, [sp, #32]
   199b0:	strne	fp, [r6]
   199b4:	add	sp, sp, #44	; 0x2c
   199b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   199bc:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   199c0:	mov	r3, r2
   199c4:	mov	r2, #0
   199c8:	b	198e8 <__assert_fail@plt+0x8094>
   199cc:	push	{r4, r5, r6, r7, r8, lr}
   199d0:	ldr	r6, [pc, #116]	; 19a4c <__assert_fail@plt+0x81f8>
   199d4:	ldr	r3, [r6, #4]
   199d8:	ldr	r7, [r6]
   199dc:	cmp	r3, #1
   199e0:	movgt	r5, r7
   199e4:	movgt	r4, #1
   199e8:	ble	19a08 <__assert_fail@plt+0x81b4>
   199ec:	ldr	r0, [r5, #12]
   199f0:	bl	15928 <__assert_fail@plt+0x40d4>
   199f4:	ldr	r3, [r6, #4]
   199f8:	add	r4, r4, #1
   199fc:	cmp	r3, r4
   19a00:	add	r5, r5, #8
   19a04:	bgt	199ec <__assert_fail@plt+0x8198>
   19a08:	ldr	r0, [r7, #4]
   19a0c:	ldr	r4, [pc, #60]	; 19a50 <__assert_fail@plt+0x81fc>
   19a10:	cmp	r0, r4
   19a14:	beq	19a28 <__assert_fail@plt+0x81d4>
   19a18:	bl	15928 <__assert_fail@plt+0x40d4>
   19a1c:	mov	r3, #256	; 0x100
   19a20:	str	r4, [r6, #12]
   19a24:	str	r3, [r6, #8]
   19a28:	ldr	r4, [pc, #36]	; 19a54 <__assert_fail@plt+0x8200>
   19a2c:	cmp	r7, r4
   19a30:	beq	19a40 <__assert_fail@plt+0x81ec>
   19a34:	mov	r0, r7
   19a38:	bl	15928 <__assert_fail@plt+0x40d4>
   19a3c:	str	r4, [r6]
   19a40:	mov	r3, #1
   19a44:	str	r3, [r6, #4]
   19a48:	pop	{r4, r5, r6, r7, r8, pc}
   19a4c:	muleq	r2, r4, r1
   19a50:	andeq	pc, r2, ip, ror r2	; <UNPREDICTABLE>
   19a54:	muleq	r2, ip, r1
   19a58:	ldr	r3, [pc, #4]	; 19a64 <__assert_fail@plt+0x8210>
   19a5c:	mvn	r2, #0
   19a60:	b	195a8 <__assert_fail@plt+0x7d54>
   19a64:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   19a68:	ldr	r3, [pc]	; 19a70 <__assert_fail@plt+0x821c>
   19a6c:	b	195a8 <__assert_fail@plt+0x7d54>
   19a70:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   19a74:	mov	r1, r0
   19a78:	ldr	r3, [pc, #8]	; 19a88 <__assert_fail@plt+0x8234>
   19a7c:	mvn	r2, #0
   19a80:	mov	r0, #0
   19a84:	b	195a8 <__assert_fail@plt+0x7d54>
   19a88:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   19a8c:	mov	r2, r1
   19a90:	ldr	r3, [pc, #8]	; 19aa0 <__assert_fail@plt+0x824c>
   19a94:	mov	r1, r0
   19a98:	mov	r0, #0
   19a9c:	b	195a8 <__assert_fail@plt+0x7d54>
   19aa0:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   19aa4:	push	{r4, r5, lr}
   19aa8:	sub	sp, sp, #52	; 0x34
   19aac:	mov	r5, r2
   19ab0:	mov	r4, r0
   19ab4:	mov	r0, sp
   19ab8:	bl	17f44 <__assert_fail@plt+0x66f0>
   19abc:	mov	r3, sp
   19ac0:	mov	r1, r5
   19ac4:	mov	r0, r4
   19ac8:	mvn	r2, #0
   19acc:	bl	195a8 <__assert_fail@plt+0x7d54>
   19ad0:	add	sp, sp, #52	; 0x34
   19ad4:	pop	{r4, r5, pc}
   19ad8:	push	{r4, r5, r6, lr}
   19adc:	sub	sp, sp, #48	; 0x30
   19ae0:	mov	r5, r2
   19ae4:	mov	r6, r3
   19ae8:	mov	r4, r0
   19aec:	mov	r0, sp
   19af0:	bl	17f44 <__assert_fail@plt+0x66f0>
   19af4:	mov	r3, sp
   19af8:	mov	r2, r6
   19afc:	mov	r1, r5
   19b00:	mov	r0, r4
   19b04:	bl	195a8 <__assert_fail@plt+0x7d54>
   19b08:	add	sp, sp, #48	; 0x30
   19b0c:	pop	{r4, r5, r6, pc}
   19b10:	mov	r2, r1
   19b14:	mov	r1, r0
   19b18:	mov	r0, #0
   19b1c:	b	19aa4 <__assert_fail@plt+0x8250>
   19b20:	mov	r3, r2
   19b24:	mov	r2, r1
   19b28:	mov	r1, r0
   19b2c:	mov	r0, #0
   19b30:	b	19ad8 <__assert_fail@plt+0x8284>
   19b34:	push	{r4, r5, r6, r7, r8, lr}
   19b38:	mov	r7, r0
   19b3c:	ldr	lr, [pc, #100]	; 19ba8 <__assert_fail@plt+0x8354>
   19b40:	mov	r8, r1
   19b44:	mov	r4, r2
   19b48:	ldm	lr!, {r0, r1, r2, r3}
   19b4c:	sub	sp, sp, #48	; 0x30
   19b50:	mov	ip, sp
   19b54:	lsr	r5, r4, #5
   19b58:	stmia	ip!, {r0, r1, r2, r3}
   19b5c:	add	r6, sp, #8
   19b60:	ldm	lr!, {r0, r1, r2, r3}
   19b64:	and	r4, r4, #31
   19b68:	stmia	ip!, {r0, r1, r2, r3}
   19b6c:	ldm	lr, {r0, r1, r2, r3}
   19b70:	stm	ip, {r0, r1, r2, r3}
   19b74:	mov	r2, r8
   19b78:	ldr	lr, [r6, r5, lsl #2]
   19b7c:	mov	r1, r7
   19b80:	mov	r3, sp
   19b84:	lsr	ip, lr, r4
   19b88:	eor	ip, ip, #1
   19b8c:	and	ip, ip, #1
   19b90:	mov	r0, #0
   19b94:	eor	r4, lr, ip, lsl r4
   19b98:	str	r4, [r6, r5, lsl #2]
   19b9c:	bl	195a8 <__assert_fail@plt+0x7d54>
   19ba0:	add	sp, sp, #48	; 0x30
   19ba4:	pop	{r4, r5, r6, r7, r8, pc}
   19ba8:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   19bac:	mov	r2, r1
   19bb0:	mvn	r1, #0
   19bb4:	b	19b34 <__assert_fail@plt+0x82e0>
   19bb8:	mov	r2, #58	; 0x3a
   19bbc:	mvn	r1, #0
   19bc0:	b	19b34 <__assert_fail@plt+0x82e0>
   19bc4:	mov	r2, #58	; 0x3a
   19bc8:	b	19b34 <__assert_fail@plt+0x82e0>
   19bcc:	push	{r4, r5, r6, r7, lr}
   19bd0:	sub	sp, sp, #100	; 0x64
   19bd4:	mov	r6, r0
   19bd8:	mov	r0, sp
   19bdc:	mov	r7, r2
   19be0:	bl	17f44 <__assert_fail@plt+0x66f0>
   19be4:	mov	ip, sp
   19be8:	add	lr, sp, #48	; 0x30
   19bec:	ldm	ip!, {r0, r1, r2, r3}
   19bf0:	stmia	lr!, {r0, r1, r2, r3}
   19bf4:	ldm	ip!, {r0, r1, r2, r3}
   19bf8:	ldr	r5, [sp, #60]	; 0x3c
   19bfc:	stmia	lr!, {r0, r1, r2, r3}
   19c00:	mvn	r4, r5
   19c04:	ldm	ip, {r0, r1, r2, r3}
   19c08:	and	ip, r4, #67108864	; 0x4000000
   19c0c:	eor	ip, ip, r5
   19c10:	str	ip, [sp, #60]	; 0x3c
   19c14:	stm	lr, {r0, r1, r2, r3}
   19c18:	mov	r1, r7
   19c1c:	mov	r0, r6
   19c20:	add	r3, sp, #48	; 0x30
   19c24:	mvn	r2, #0
   19c28:	bl	195a8 <__assert_fail@plt+0x7d54>
   19c2c:	add	sp, sp, #100	; 0x64
   19c30:	pop	{r4, r5, r6, r7, pc}
   19c34:	push	{r4, r5, r6, r7, r8, lr}
   19c38:	mov	r5, r1
   19c3c:	ldr	lr, [pc, #100]	; 19ca8 <__assert_fail@plt+0x8454>
   19c40:	mov	r4, r2
   19c44:	mov	r7, r0
   19c48:	mov	r8, r3
   19c4c:	ldm	lr!, {r0, r1, r2, r3}
   19c50:	sub	sp, sp, #48	; 0x30
   19c54:	mov	ip, sp
   19c58:	mov	r6, #10
   19c5c:	stmia	ip!, {r0, r1, r2, r3}
   19c60:	cmp	r4, #0
   19c64:	cmpne	r5, #0
   19c68:	ldm	lr!, {r0, r1, r2, r3}
   19c6c:	str	r6, [sp]
   19c70:	stmia	ip!, {r0, r1, r2, r3}
   19c74:	ldm	lr, {r0, r1, r2, r3}
   19c78:	stm	ip, {r0, r1, r2, r3}
   19c7c:	beq	19ca4 <__assert_fail@plt+0x8450>
   19c80:	mov	r3, sp
   19c84:	mov	r1, r8
   19c88:	mov	r0, r7
   19c8c:	ldr	r2, [sp, #72]	; 0x48
   19c90:	str	r5, [sp, #40]	; 0x28
   19c94:	str	r4, [sp, #44]	; 0x2c
   19c98:	bl	195a8 <__assert_fail@plt+0x7d54>
   19c9c:	add	sp, sp, #48	; 0x30
   19ca0:	pop	{r4, r5, r6, r7, r8, pc}
   19ca4:	bl	11824 <abort@plt>
   19ca8:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   19cac:	push	{lr}		; (str lr, [sp, #-4]!)
   19cb0:	sub	sp, sp, #12
   19cb4:	mvn	ip, #0
   19cb8:	str	ip, [sp]
   19cbc:	bl	19c34 <__assert_fail@plt+0x83e0>
   19cc0:	add	sp, sp, #12
   19cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   19cc8:	push	{lr}		; (str lr, [sp, #-4]!)
   19ccc:	sub	sp, sp, #12
   19cd0:	mvn	ip, #0
   19cd4:	mov	r3, r2
   19cd8:	str	ip, [sp]
   19cdc:	mov	r2, r1
   19ce0:	mov	r1, r0
   19ce4:	mov	r0, #0
   19ce8:	bl	19c34 <__assert_fail@plt+0x83e0>
   19cec:	add	sp, sp, #12
   19cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   19cf4:	push	{lr}		; (str lr, [sp, #-4]!)
   19cf8:	sub	sp, sp, #12
   19cfc:	str	r3, [sp]
   19d00:	mov	r3, r2
   19d04:	mov	r2, r1
   19d08:	mov	r1, r0
   19d0c:	mov	r0, #0
   19d10:	bl	19c34 <__assert_fail@plt+0x83e0>
   19d14:	add	sp, sp, #12
   19d18:	pop	{pc}		; (ldr pc, [sp], #4)
   19d1c:	ldr	r3, [pc]	; 19d24 <__assert_fail@plt+0x84d0>
   19d20:	b	195a8 <__assert_fail@plt+0x7d54>
   19d24:	andeq	pc, r2, r4, lsr #3
   19d28:	mov	r2, r1
   19d2c:	ldr	r3, [pc, #8]	; 19d3c <__assert_fail@plt+0x84e8>
   19d30:	mov	r1, r0
   19d34:	mov	r0, #0
   19d38:	b	195a8 <__assert_fail@plt+0x7d54>
   19d3c:	andeq	pc, r2, r4, lsr #3
   19d40:	ldr	r3, [pc, #4]	; 19d4c <__assert_fail@plt+0x84f8>
   19d44:	mvn	r2, #0
   19d48:	b	195a8 <__assert_fail@plt+0x7d54>
   19d4c:	andeq	pc, r2, r4, lsr #3
   19d50:	mov	r1, r0
   19d54:	ldr	r3, [pc, #8]	; 19d64 <__assert_fail@plt+0x8510>
   19d58:	mvn	r2, #0
   19d5c:	mov	r0, #0
   19d60:	b	195a8 <__assert_fail@plt+0x7d54>
   19d64:	andeq	pc, r2, r4, lsr #3
   19d68:	push	{r4, r5, r6, lr}
   19d6c:	mov	r4, #0
   19d70:	mov	r5, r0
   19d74:	str	r4, [r0, #4]
   19d78:	mov	r1, #524288	; 0x80000
   19d7c:	ldr	r0, [pc, #52]	; 19db8 <__assert_fail@plt+0x8564>
   19d80:	bl	1bc64 <__assert_fail@plt+0xa410>
   19d84:	cmp	r0, r4
   19d88:	str	r0, [r5]
   19d8c:	blt	19d98 <__assert_fail@plt+0x8544>
   19d90:	mov	r0, r4
   19d94:	pop	{r4, r5, r6, pc}
   19d98:	mov	r1, r4
   19d9c:	mov	r0, r4
   19da0:	bl	11650 <getcwd@plt>
   19da4:	cmp	r0, r4
   19da8:	str	r0, [r5, #4]
   19dac:	movne	r0, #0
   19db0:	mvneq	r0, #0
   19db4:	pop	{r4, r5, r6, pc}
   19db8:	andeq	lr, r1, r8, asr #5
   19dbc:	ldr	r3, [r0]
   19dc0:	cmp	r3, #0
   19dc4:	blt	19dd0 <__assert_fail@plt+0x857c>
   19dc8:	mov	r0, r3
   19dcc:	b	117b8 <fchdir@plt>
   19dd0:	ldr	r0, [r0, #4]
   19dd4:	b	1b8ac <__assert_fail@plt+0xa058>
   19dd8:	push	{r4, lr}
   19ddc:	mov	r4, r0
   19de0:	ldr	r0, [r0]
   19de4:	cmp	r0, #0
   19de8:	blt	19df0 <__assert_fail@plt+0x859c>
   19dec:	bl	11830 <close@plt>
   19df0:	ldr	r0, [r4, #4]
   19df4:	pop	{r4, lr}
   19df8:	b	15928 <__assert_fail@plt+0x40d4>
   19dfc:	push	{r4, r5, r6, r7, r8, lr}
   19e00:	subs	r4, r0, #0
   19e04:	beq	19e54 <__assert_fail@plt+0x8600>
   19e08:	cmp	r4, #10
   19e0c:	beq	19e18 <__assert_fail@plt+0x85c4>
   19e10:	mov	r0, r4
   19e14:	pop	{r4, r5, r6, r7, r8, pc}
   19e18:	ldr	r6, [r1]
   19e1c:	mov	r5, r1
   19e20:	mov	r0, r6
   19e24:	ldr	r1, [pc, #60]	; 19e68 <__assert_fail@plt+0x8614>
   19e28:	bl	11464 <strcmp@plt>
   19e2c:	subs	r7, r0, #0
   19e30:	bne	19e10 <__assert_fail@plt+0x85bc>
   19e34:	mov	r0, r6
   19e38:	bl	117dc <freecon@plt>
   19e3c:	str	r7, [r5]
   19e40:	bl	116b0 <__errno_location@plt>
   19e44:	mov	r3, #61	; 0x3d
   19e48:	mvn	r4, #0
   19e4c:	str	r3, [r0]
   19e50:	b	19e10 <__assert_fail@plt+0x85bc>
   19e54:	bl	116b0 <__errno_location@plt>
   19e58:	mov	r3, #95	; 0x5f
   19e5c:	mvn	r4, #0
   19e60:	str	r3, [r0]
   19e64:	b	19e10 <__assert_fail@plt+0x85bc>
   19e68:	andeq	lr, r1, r8, lsr r8
   19e6c:	push	{r4, lr}
   19e70:	mov	r4, r1
   19e74:	bl	11668 <getfilecon@plt>
   19e78:	mov	r1, r4
   19e7c:	pop	{r4, lr}
   19e80:	b	19dfc <__assert_fail@plt+0x85a8>
   19e84:	push	{r4, lr}
   19e88:	mov	r4, r1
   19e8c:	bl	115d8 <lgetfilecon@plt>
   19e90:	mov	r1, r4
   19e94:	pop	{r4, lr}
   19e98:	b	19dfc <__assert_fail@plt+0x85a8>
   19e9c:	push	{r4, lr}
   19ea0:	mov	r4, r1
   19ea4:	bl	11500 <fgetfilecon@plt>
   19ea8:	mov	r1, r4
   19eac:	pop	{r4, lr}
   19eb0:	b	19dfc <__assert_fail@plt+0x85a8>
   19eb4:	push	{r4, lr}
   19eb8:	ldrb	r3, [r0, #4]
   19ebc:	cmp	r3, #0
   19ec0:	bne	19edc <__assert_fail@plt+0x8688>
   19ec4:	ldr	r0, [pc, #52]	; 19f00 <__assert_fail@plt+0x86ac>
   19ec8:	bl	1180c <unsetenv@plt>
   19ecc:	cmp	r0, #0
   19ed0:	beq	19ef4 <__assert_fail@plt+0x86a0>
   19ed4:	mov	r0, #0
   19ed8:	pop	{r4, pc}
   19edc:	add	r1, r0, #5
   19ee0:	mov	r2, #1
   19ee4:	ldr	r0, [pc, #20]	; 19f00 <__assert_fail@plt+0x86ac>
   19ee8:	bl	1168c <setenv@plt>
   19eec:	cmp	r0, #0
   19ef0:	bne	19ed4 <__assert_fail@plt+0x8680>
   19ef4:	bl	1153c <tzset@plt>
   19ef8:	mov	r0, #1
   19efc:	pop	{r4, pc}
   19f00:	andeq	sp, r1, r8, rrx
   19f04:	cmp	r0, #1
   19f08:	push	{r4, r5, r6, r7, r8, lr}
   19f0c:	mov	r4, r0
   19f10:	moveq	r7, r0
   19f14:	beq	19f54 <__assert_fail@plt+0x8700>
   19f18:	bl	116b0 <__errno_location@plt>
   19f1c:	mov	r6, r0
   19f20:	mov	r0, r4
   19f24:	ldr	r8, [r6]
   19f28:	bl	19eb4 <__assert_fail@plt+0x8660>
   19f2c:	subs	r7, r0, #0
   19f30:	ldreq	r8, [r6]
   19f34:	cmp	r4, #0
   19f38:	beq	19f50 <__assert_fail@plt+0x86fc>
   19f3c:	ldr	r5, [r4]
   19f40:	mov	r0, r4
   19f44:	bl	15928 <__assert_fail@plt+0x40d4>
   19f48:	subs	r4, r5, #0
   19f4c:	bne	19f3c <__assert_fail@plt+0x86e8>
   19f50:	str	r8, [r6]
   19f54:	mov	r0, r7
   19f58:	pop	{r4, r5, r6, r7, r8, pc}
   19f5c:	push	{r4, r5, r6, r7, r8, lr}
   19f60:	subs	r7, r0, #0
   19f64:	beq	19fc0 <__assert_fail@plt+0x876c>
   19f68:	bl	11674 <strlen@plt>
   19f6c:	add	r5, r0, #1
   19f70:	cmp	r5, #58	; 0x3a
   19f74:	addhi	r0, r0, #10
   19f78:	bichi	r0, r0, #3
   19f7c:	movls	r0, #64	; 0x40
   19f80:	bl	1ae94 <__assert_fail@plt+0x9640>
   19f84:	subs	r4, r0, #0
   19f88:	beq	19fb8 <__assert_fail@plt+0x8764>
   19f8c:	mov	r3, r4
   19f90:	mov	r6, #0
   19f94:	mov	r2, #1
   19f98:	strb	r2, [r4, #4]
   19f9c:	str	r6, [r4]
   19fa0:	mov	r1, r7
   19fa4:	strb	r6, [r3, #5]!
   19fa8:	mov	r2, r5
   19fac:	mov	r0, r3
   19fb0:	bl	114b8 <memcpy@plt>
   19fb4:	strb	r6, [r0, r5]
   19fb8:	mov	r0, r4
   19fbc:	pop	{r4, r5, r6, r7, r8, pc}
   19fc0:	mov	r0, #64	; 0x40
   19fc4:	bl	1ae94 <__assert_fail@plt+0x9640>
   19fc8:	subs	r4, r0, #0
   19fcc:	beq	19fb8 <__assert_fail@plt+0x8764>
   19fd0:	str	r7, [r4]
   19fd4:	strb	r7, [r4, #4]
   19fd8:	strb	r7, [r4, #5]
   19fdc:	mov	r0, r4
   19fe0:	pop	{r4, r5, r6, r7, r8, pc}
   19fe4:	push	{r4, r5, r6, r7, r8, lr}
   19fe8:	ldr	r6, [r1, #40]	; 0x28
   19fec:	cmp	r6, #0
   19ff0:	beq	1a0b8 <__assert_fail@plt+0x8864>
   19ff4:	cmp	r1, r6
   19ff8:	mov	r7, r1
   19ffc:	mov	r5, r0
   1a000:	bhi	1a010 <__assert_fail@plt+0x87bc>
   1a004:	add	r3, r1, #44	; 0x2c
   1a008:	cmp	r6, r3
   1a00c:	bcc	1a0b8 <__assert_fail@plt+0x8864>
   1a010:	ldrb	r3, [r6]
   1a014:	cmp	r3, #0
   1a018:	addne	r4, r5, #5
   1a01c:	beq	1a0b0 <__assert_fail@plt+0x885c>
   1a020:	mov	r1, r6
   1a024:	mov	r0, r4
   1a028:	bl	11464 <strcmp@plt>
   1a02c:	add	r2, r5, #5
   1a030:	cmp	r0, #0
   1a034:	mov	r0, r4
   1a038:	beq	1a0a4 <__assert_fail@plt+0x8850>
   1a03c:	ldrb	r3, [r4]
   1a040:	cmp	r3, #0
   1a044:	bne	1a05c <__assert_fail@plt+0x8808>
   1a048:	cmp	r4, r2
   1a04c:	bne	1a0c0 <__assert_fail@plt+0x886c>
   1a050:	ldrb	r3, [r5, #4]
   1a054:	cmp	r3, #0
   1a058:	beq	1a0c0 <__assert_fail@plt+0x886c>
   1a05c:	bl	11674 <strlen@plt>
   1a060:	add	r0, r0, #1
   1a064:	ldrb	r3, [r4, r0]!
   1a068:	cmp	r3, #0
   1a06c:	bne	1a020 <__assert_fail@plt+0x87cc>
   1a070:	ldr	r3, [r5]
   1a074:	cmp	r3, #0
   1a078:	addne	r4, r3, #5
   1a07c:	movne	r5, r3
   1a080:	b	1a020 <__assert_fail@plt+0x87cc>
   1a084:	mov	r0, r6
   1a088:	bl	19f5c <__assert_fail@plt+0x8708>
   1a08c:	cmp	r0, #0
   1a090:	str	r0, [r5]
   1a094:	popeq	{r4, r5, r6, r7, r8, pc}
   1a098:	add	r4, r0, #5
   1a09c:	mov	r3, #0
   1a0a0:	strb	r3, [r0, #4]
   1a0a4:	str	r4, [r7, #40]	; 0x28
   1a0a8:	mov	r0, #1
   1a0ac:	pop	{r4, r5, r6, r7, r8, pc}
   1a0b0:	ldr	r4, [pc, #64]	; 1a0f8 <__assert_fail@plt+0x88a4>
   1a0b4:	b	1a0a4 <__assert_fail@plt+0x8850>
   1a0b8:	mov	r0, #1
   1a0bc:	pop	{r4, r5, r6, r7, r8, pc}
   1a0c0:	mov	r0, r6
   1a0c4:	bl	11674 <strlen@plt>
   1a0c8:	add	r3, r5, #64	; 0x40
   1a0cc:	sub	r3, r3, r4
   1a0d0:	add	r8, r0, #1
   1a0d4:	cmp	r8, r3
   1a0d8:	bge	1a084 <__assert_fail@plt+0x8830>
   1a0dc:	mov	r1, r6
   1a0e0:	mov	r2, r8
   1a0e4:	mov	r0, r4
   1a0e8:	bl	114b8 <memcpy@plt>
   1a0ec:	mov	r3, #0
   1a0f0:	strb	r3, [r4, r8]
   1a0f4:	b	1a0a4 <__assert_fail@plt+0x8850>
   1a0f8:	andeq	sp, r1, r0, asr #6
   1a0fc:	push	{r4, r5, r6, r7, r8, lr}
   1a100:	mov	r4, r0
   1a104:	ldr	r0, [pc, #152]	; 1a1a4 <__assert_fail@plt+0x8950>
   1a108:	bl	115cc <getenv@plt>
   1a10c:	ldrb	r3, [r4, #4]
   1a110:	subs	r5, r0, #0
   1a114:	beq	1a15c <__assert_fail@plt+0x8908>
   1a118:	cmp	r3, #0
   1a11c:	beq	1a134 <__assert_fail@plt+0x88e0>
   1a120:	mov	r1, r5
   1a124:	add	r0, r4, #5
   1a128:	bl	11464 <strcmp@plt>
   1a12c:	cmp	r0, #0
   1a130:	beq	1a164 <__assert_fail@plt+0x8910>
   1a134:	mov	r0, r5
   1a138:	bl	19f5c <__assert_fail@plt+0x8708>
   1a13c:	subs	r5, r0, #0
   1a140:	beq	1a154 <__assert_fail@plt+0x8900>
   1a144:	mov	r0, r4
   1a148:	bl	19eb4 <__assert_fail@plt+0x8660>
   1a14c:	cmp	r0, #0
   1a150:	beq	1a170 <__assert_fail@plt+0x891c>
   1a154:	mov	r0, r5
   1a158:	pop	{r4, r5, r6, r7, r8, pc}
   1a15c:	cmp	r3, #0
   1a160:	bne	1a134 <__assert_fail@plt+0x88e0>
   1a164:	mov	r5, #1
   1a168:	mov	r0, r5
   1a16c:	pop	{r4, r5, r6, r7, r8, pc}
   1a170:	bl	116b0 <__errno_location@plt>
   1a174:	cmp	r5, #1
   1a178:	mov	r6, r0
   1a17c:	ldr	r7, [r0]
   1a180:	beq	1a198 <__assert_fail@plt+0x8944>
   1a184:	ldr	r4, [r5]
   1a188:	mov	r0, r5
   1a18c:	bl	15928 <__assert_fail@plt+0x40d4>
   1a190:	subs	r5, r4, #0
   1a194:	bne	1a184 <__assert_fail@plt+0x8930>
   1a198:	str	r7, [r6]
   1a19c:	mov	r5, #0
   1a1a0:	b	1a154 <__assert_fail@plt+0x8900>
   1a1a4:	andeq	sp, r1, r8, rrx
   1a1a8:	cmp	r0, #1
   1a1ac:	bxeq	lr
   1a1b0:	cmp	r0, #0
   1a1b4:	beq	1a1d0 <__assert_fail@plt+0x897c>
   1a1b8:	push	{r4, lr}
   1a1bc:	ldr	r4, [r0]
   1a1c0:	bl	15928 <__assert_fail@plt+0x40d4>
   1a1c4:	subs	r0, r4, #0
   1a1c8:	bne	1a1bc <__assert_fail@plt+0x8968>
   1a1cc:	pop	{r4, pc}
   1a1d0:	bx	lr
   1a1d4:	subs	ip, r0, #0
   1a1d8:	push	{r4, r5, r6, r7, r8, lr}
   1a1dc:	mov	r5, r1
   1a1e0:	beq	1a248 <__assert_fail@plt+0x89f4>
   1a1e4:	mov	r4, r2
   1a1e8:	mov	r6, ip
   1a1ec:	bl	1a0fc <__assert_fail@plt+0x88a8>
   1a1f0:	subs	r7, r0, #0
   1a1f4:	beq	1a240 <__assert_fail@plt+0x89ec>
   1a1f8:	mov	r0, r5
   1a1fc:	mov	r1, r4
   1a200:	bl	1150c <localtime_r@plt>
   1a204:	cmp	r0, #0
   1a208:	beq	1a238 <__assert_fail@plt+0x89e4>
   1a20c:	mov	r0, r6
   1a210:	mov	r1, r4
   1a214:	bl	19fe4 <__assert_fail@plt+0x8790>
   1a218:	cmp	r0, #0
   1a21c:	beq	1a238 <__assert_fail@plt+0x89e4>
   1a220:	mov	r0, r7
   1a224:	bl	19f04 <__assert_fail@plt+0x86b0>
   1a228:	cmp	r0, #0
   1a22c:	beq	1a240 <__assert_fail@plt+0x89ec>
   1a230:	mov	r0, r4
   1a234:	pop	{r4, r5, r6, r7, r8, pc}
   1a238:	mov	r0, r7
   1a23c:	bl	19f04 <__assert_fail@plt+0x86b0>
   1a240:	mov	r0, #0
   1a244:	pop	{r4, r5, r6, r7, r8, pc}
   1a248:	mov	r0, r5
   1a24c:	mov	r1, r2
   1a250:	pop	{r4, r5, r6, r7, r8, lr}
   1a254:	b	11440 <gmtime_r@plt>
   1a258:	push	{r4, r5, r6, r7, lr}
   1a25c:	subs	r7, r0, #0
   1a260:	sub	sp, sp, #52	; 0x34
   1a264:	mov	r4, r1
   1a268:	beq	1a328 <__assert_fail@plt+0x8ad4>
   1a26c:	bl	1a0fc <__assert_fail@plt+0x88a8>
   1a270:	subs	r6, r0, #0
   1a274:	beq	1a320 <__assert_fail@plt+0x8acc>
   1a278:	ldm	r4, {r1, r2, ip}
   1a27c:	ldr	r0, [r4, #12]
   1a280:	ldr	r3, [r4, #16]
   1a284:	str	r1, [sp, #4]
   1a288:	str	r2, [sp, #8]
   1a28c:	ldr	r1, [r4, #20]
   1a290:	ldr	r2, [r4, #32]
   1a294:	str	r0, [sp, #16]
   1a298:	str	r3, [sp, #20]
   1a29c:	add	r0, sp, #4
   1a2a0:	mvn	r3, #0
   1a2a4:	str	r3, [sp, #32]
   1a2a8:	str	ip, [sp, #12]
   1a2ac:	str	r1, [sp, #24]
   1a2b0:	str	r2, [sp, #36]	; 0x24
   1a2b4:	bl	11488 <mktime@plt>
   1a2b8:	ldr	r3, [sp, #32]
   1a2bc:	cmp	r3, #0
   1a2c0:	mov	r5, r0
   1a2c4:	blt	1a318 <__assert_fail@plt+0x8ac4>
   1a2c8:	mov	r0, r7
   1a2cc:	add	r1, sp, #4
   1a2d0:	bl	19fe4 <__assert_fail@plt+0x8790>
   1a2d4:	cmp	r0, #0
   1a2d8:	beq	1a318 <__assert_fail@plt+0x8ac4>
   1a2dc:	mov	r0, r6
   1a2e0:	bl	19f04 <__assert_fail@plt+0x86b0>
   1a2e4:	cmp	r0, #0
   1a2e8:	beq	1a320 <__assert_fail@plt+0x8acc>
   1a2ec:	add	lr, sp, #4
   1a2f0:	mov	ip, r4
   1a2f4:	ldm	lr!, {r0, r1, r2, r3}
   1a2f8:	stmia	ip!, {r0, r1, r2, r3}
   1a2fc:	ldm	lr!, {r0, r1, r2, r3}
   1a300:	stmia	ip!, {r0, r1, r2, r3}
   1a304:	ldm	lr, {r0, r1, r2}
   1a308:	stm	ip, {r0, r1, r2}
   1a30c:	mov	r0, r5
   1a310:	add	sp, sp, #52	; 0x34
   1a314:	pop	{r4, r5, r6, r7, pc}
   1a318:	mov	r0, r6
   1a31c:	bl	19f04 <__assert_fail@plt+0x86b0>
   1a320:	mvn	r5, #0
   1a324:	b	1a30c <__assert_fail@plt+0x8ab8>
   1a328:	mov	r0, r1
   1a32c:	bl	117ac <timegm@plt>
   1a330:	mov	r5, r0
   1a334:	mov	r0, r5
   1a338:	add	sp, sp, #52	; 0x34
   1a33c:	pop	{r4, r5, r6, r7, pc}
   1a340:	push	{r4, r5, r6, lr}
   1a344:	sub	sp, sp, #32
   1a348:	cmp	r1, #0
   1a34c:	mov	r4, r0
   1a350:	ldr	r5, [sp, #48]	; 0x30
   1a354:	ldr	r6, [sp, #52]	; 0x34
   1a358:	beq	1a670 <__assert_fail@plt+0x8e1c>
   1a35c:	stm	sp, {r2, r3}
   1a360:	mov	r3, r1
   1a364:	ldr	r2, [pc, #808]	; 1a694 <__assert_fail@plt+0x8e40>
   1a368:	mov	r1, #1
   1a36c:	bl	11704 <__fprintf_chk@plt>
   1a370:	mov	r2, #5
   1a374:	ldr	r1, [pc, #796]	; 1a698 <__assert_fail@plt+0x8e44>
   1a378:	mov	r0, #0
   1a37c:	bl	114e8 <dcgettext@plt>
   1a380:	ldr	r3, [pc, #788]	; 1a69c <__assert_fail@plt+0x8e48>
   1a384:	ldr	r2, [pc, #788]	; 1a6a0 <__assert_fail@plt+0x8e4c>
   1a388:	str	r3, [sp]
   1a38c:	mov	r1, #1
   1a390:	mov	r3, r0
   1a394:	mov	r0, r4
   1a398:	bl	11704 <__fprintf_chk@plt>
   1a39c:	mov	r1, r4
   1a3a0:	mov	r0, #10
   1a3a4:	bl	114dc <fputc_unlocked@plt>
   1a3a8:	mov	r2, #5
   1a3ac:	ldr	r1, [pc, #752]	; 1a6a4 <__assert_fail@plt+0x8e50>
   1a3b0:	mov	r0, #0
   1a3b4:	bl	114e8 <dcgettext@plt>
   1a3b8:	mov	r1, #1
   1a3bc:	ldr	r3, [pc, #740]	; 1a6a8 <__assert_fail@plt+0x8e54>
   1a3c0:	mov	r2, r0
   1a3c4:	mov	r0, r4
   1a3c8:	bl	11704 <__fprintf_chk@plt>
   1a3cc:	mov	r1, r4
   1a3d0:	mov	r0, #10
   1a3d4:	bl	114dc <fputc_unlocked@plt>
   1a3d8:	cmp	r6, #9
   1a3dc:	ldrls	pc, [pc, r6, lsl #2]
   1a3e0:	b	1a688 <__assert_fail@plt+0x8e34>
   1a3e4:	andeq	sl, r1, r8, ror #8
   1a3e8:	andeq	sl, r1, r0, ror r4
   1a3ec:	muleq	r1, ip, r4
   1a3f0:	ldrdeq	sl, [r1], -r0
   1a3f4:	andeq	sl, r1, ip, lsl #10
   1a3f8:	andeq	sl, r1, r8, asr #10
   1a3fc:	andeq	sl, r1, r4, lsl #11
   1a400:	andeq	sl, r1, r8, asr #11
   1a404:	andeq	sl, r1, r8, lsl r6
   1a408:	andeq	sl, r1, ip, lsl #8
   1a40c:	ldr	r1, [pc, #664]	; 1a6ac <__assert_fail@plt+0x8e58>
   1a410:	mov	r2, #5
   1a414:	mov	r0, #0
   1a418:	bl	114e8 <dcgettext@plt>
   1a41c:	ldr	ip, [r5, #32]
   1a420:	ldr	r1, [r5, #28]
   1a424:	ldr	r2, [r5, #24]
   1a428:	ldr	r3, [r5]
   1a42c:	ldr	r6, [r5, #20]
   1a430:	str	ip, [sp, #28]
   1a434:	ldr	lr, [r5, #16]
   1a438:	str	r1, [sp, #24]
   1a43c:	ldr	ip, [r5, #12]
   1a440:	str	r2, [sp, #20]
   1a444:	ldr	r1, [r5, #8]
   1a448:	ldr	r2, [r5, #4]
   1a44c:	str	r6, [sp, #16]
   1a450:	stmib	sp, {r1, ip, lr}
   1a454:	mov	r1, #1
   1a458:	str	r2, [sp]
   1a45c:	mov	r2, r0
   1a460:	mov	r0, r4
   1a464:	bl	11704 <__fprintf_chk@plt>
   1a468:	add	sp, sp, #32
   1a46c:	pop	{r4, r5, r6, pc}
   1a470:	mov	r2, #5
   1a474:	ldr	r1, [pc, #564]	; 1a6b0 <__assert_fail@plt+0x8e5c>
   1a478:	mov	r0, #0
   1a47c:	bl	114e8 <dcgettext@plt>
   1a480:	ldr	r3, [r5]
   1a484:	mov	r1, #1
   1a488:	mov	r2, r0
   1a48c:	mov	r0, r4
   1a490:	add	sp, sp, #32
   1a494:	pop	{r4, r5, r6, lr}
   1a498:	b	11704 <__fprintf_chk@plt>
   1a49c:	mov	r2, #5
   1a4a0:	ldr	r1, [pc, #524]	; 1a6b4 <__assert_fail@plt+0x8e60>
   1a4a4:	mov	r0, #0
   1a4a8:	bl	114e8 <dcgettext@plt>
   1a4ac:	ldr	r2, [r5, #4]
   1a4b0:	ldr	r3, [r5]
   1a4b4:	mov	r1, #1
   1a4b8:	str	r2, [sp, #48]	; 0x30
   1a4bc:	mov	r2, r0
   1a4c0:	mov	r0, r4
   1a4c4:	add	sp, sp, #32
   1a4c8:	pop	{r4, r5, r6, lr}
   1a4cc:	b	11704 <__fprintf_chk@plt>
   1a4d0:	mov	r2, #5
   1a4d4:	ldr	r1, [pc, #476]	; 1a6b8 <__assert_fail@plt+0x8e64>
   1a4d8:	mov	r0, #0
   1a4dc:	bl	114e8 <dcgettext@plt>
   1a4e0:	ldr	r1, [r5, #8]
   1a4e4:	ldr	r2, [r5, #4]
   1a4e8:	ldr	r3, [r5]
   1a4ec:	str	r1, [sp, #52]	; 0x34
   1a4f0:	str	r2, [sp, #48]	; 0x30
   1a4f4:	mov	r1, #1
   1a4f8:	mov	r2, r0
   1a4fc:	mov	r0, r4
   1a500:	add	sp, sp, #32
   1a504:	pop	{r4, r5, r6, lr}
   1a508:	b	11704 <__fprintf_chk@plt>
   1a50c:	mov	r2, #5
   1a510:	ldr	r1, [pc, #420]	; 1a6bc <__assert_fail@plt+0x8e68>
   1a514:	mov	r0, #0
   1a518:	bl	114e8 <dcgettext@plt>
   1a51c:	ldr	r1, [r5, #8]
   1a520:	ldr	ip, [r5, #12]
   1a524:	ldr	r2, [r5, #4]
   1a528:	ldr	r3, [r5]
   1a52c:	stmib	sp, {r1, ip}
   1a530:	str	r2, [sp]
   1a534:	mov	r1, #1
   1a538:	mov	r2, r0
   1a53c:	mov	r0, r4
   1a540:	bl	11704 <__fprintf_chk@plt>
   1a544:	b	1a468 <__assert_fail@plt+0x8c14>
   1a548:	mov	r2, #5
   1a54c:	ldr	r1, [pc, #364]	; 1a6c0 <__assert_fail@plt+0x8e6c>
   1a550:	mov	r0, #0
   1a554:	bl	114e8 <dcgettext@plt>
   1a558:	add	r1, r5, #8
   1a55c:	ldr	r2, [r5, #4]
   1a560:	ldm	r1, {r1, ip, lr}
   1a564:	ldr	r3, [r5]
   1a568:	str	r2, [sp]
   1a56c:	stmib	sp, {r1, ip, lr}
   1a570:	mov	r1, #1
   1a574:	mov	r2, r0
   1a578:	mov	r0, r4
   1a57c:	bl	11704 <__fprintf_chk@plt>
   1a580:	b	1a468 <__assert_fail@plt+0x8c14>
   1a584:	mov	r2, #5
   1a588:	ldr	r1, [pc, #308]	; 1a6c4 <__assert_fail@plt+0x8e70>
   1a58c:	mov	r0, #0
   1a590:	bl	114e8 <dcgettext@plt>
   1a594:	add	r1, r5, #8
   1a598:	ldr	r2, [r5, #4]
   1a59c:	ldm	r1, {r1, ip, lr}
   1a5a0:	ldr	r6, [r5, #20]
   1a5a4:	ldr	r3, [r5]
   1a5a8:	stmib	sp, {r1, ip, lr}
   1a5ac:	mov	r1, #1
   1a5b0:	str	r2, [sp]
   1a5b4:	str	r6, [sp, #16]
   1a5b8:	mov	r2, r0
   1a5bc:	mov	r0, r4
   1a5c0:	bl	11704 <__fprintf_chk@plt>
   1a5c4:	b	1a468 <__assert_fail@plt+0x8c14>
   1a5c8:	mov	r2, #5
   1a5cc:	ldr	r1, [pc, #244]	; 1a6c8 <__assert_fail@plt+0x8e74>
   1a5d0:	mov	r0, #0
   1a5d4:	bl	114e8 <dcgettext@plt>
   1a5d8:	ldr	r2, [r5, #24]
   1a5dc:	ldr	r3, [r5]
   1a5e0:	ldr	r6, [r5, #20]
   1a5e4:	ldr	lr, [r5, #16]
   1a5e8:	ldr	ip, [r5, #12]
   1a5ec:	str	r2, [sp, #20]
   1a5f0:	ldr	r1, [r5, #8]
   1a5f4:	ldr	r2, [r5, #4]
   1a5f8:	str	r6, [sp, #16]
   1a5fc:	stmib	sp, {r1, ip, lr}
   1a600:	mov	r1, #1
   1a604:	str	r2, [sp]
   1a608:	mov	r2, r0
   1a60c:	mov	r0, r4
   1a610:	bl	11704 <__fprintf_chk@plt>
   1a614:	b	1a468 <__assert_fail@plt+0x8c14>
   1a618:	mov	r2, #5
   1a61c:	ldr	r1, [pc, #168]	; 1a6cc <__assert_fail@plt+0x8e78>
   1a620:	mov	r0, #0
   1a624:	bl	114e8 <dcgettext@plt>
   1a628:	ldr	r1, [r5, #28]
   1a62c:	ldr	r2, [r5, #24]
   1a630:	ldr	r3, [r5]
   1a634:	ldr	r6, [r5, #20]
   1a638:	ldr	lr, [r5, #16]
   1a63c:	str	r1, [sp, #24]
   1a640:	ldr	ip, [r5, #12]
   1a644:	str	r2, [sp, #20]
   1a648:	ldr	r1, [r5, #8]
   1a64c:	ldr	r2, [r5, #4]
   1a650:	str	r6, [sp, #16]
   1a654:	stmib	sp, {r1, ip, lr}
   1a658:	mov	r1, #1
   1a65c:	str	r2, [sp]
   1a660:	mov	r2, r0
   1a664:	mov	r0, r4
   1a668:	bl	11704 <__fprintf_chk@plt>
   1a66c:	b	1a468 <__assert_fail@plt+0x8c14>
   1a670:	str	r3, [sp]
   1a674:	mov	r1, #1
   1a678:	mov	r3, r2
   1a67c:	ldr	r2, [pc, #76]	; 1a6d0 <__assert_fail@plt+0x8e7c>
   1a680:	bl	11704 <__fprintf_chk@plt>
   1a684:	b	1a370 <__assert_fail@plt+0x8b1c>
   1a688:	mov	r2, #5
   1a68c:	ldr	r1, [pc, #64]	; 1a6d4 <__assert_fail@plt+0x8e80>
   1a690:	b	1a414 <__assert_fail@plt+0x8bc0>
   1a694:	andeq	lr, r1, r4, asr #16
   1a698:	andeq	lr, r1, r8, asr r8
   1a69c:	andeq	r0, r0, r6, ror #15
   1a6a0:	andeq	lr, r1, r0, lsr fp
   1a6a4:	andeq	lr, r1, ip, asr r8
   1a6a8:	andeq	lr, r1, r8, lsl #18
   1a6ac:	andeq	lr, r1, r8, lsr sl
   1a6b0:	andeq	lr, r1, ip, lsr #18
   1a6b4:	andeq	lr, r1, ip, lsr r9
   1a6b8:	andeq	lr, r1, r4, asr r9
   1a6bc:	andeq	lr, r1, r0, ror r9
   1a6c0:	muleq	r1, r0, r9
   1a6c4:			; <UNDEFINED> instruction: 0x0001e9b4
   1a6c8:	ldrdeq	lr, [r1], -ip
   1a6cc:	andeq	lr, r1, r8, lsl #20
   1a6d0:	andeq	lr, r1, r0, asr r8
   1a6d4:	andeq	lr, r1, ip, ror #20
   1a6d8:	push	{r4, r5, lr}
   1a6dc:	sub	sp, sp, #12
   1a6e0:	ldr	r5, [sp, #24]
   1a6e4:	ldr	ip, [r5]
   1a6e8:	cmp	ip, #0
   1a6ec:	beq	1a708 <__assert_fail@plt+0x8eb4>
   1a6f0:	mov	lr, r5
   1a6f4:	mov	ip, #0
   1a6f8:	ldr	r4, [lr, #4]!
   1a6fc:	add	ip, ip, #1
   1a700:	cmp	r4, #0
   1a704:	bne	1a6f8 <__assert_fail@plt+0x8ea4>
   1a708:	stm	sp, {r5, ip}
   1a70c:	bl	1a340 <__assert_fail@plt+0x8aec>
   1a710:	add	sp, sp, #12
   1a714:	pop	{r4, r5, pc}
   1a718:	push	{r4, r5, lr}
   1a71c:	sub	sp, sp, #52	; 0x34
   1a720:	add	r5, sp, #4
   1a724:	ldr	r4, [sp, #64]	; 0x40
   1a728:	mov	ip, #0
   1a72c:	sub	r4, r4, #4
   1a730:	ldr	lr, [r4, #4]!
   1a734:	cmp	lr, #0
   1a738:	str	lr, [r5, #4]!
   1a73c:	beq	1a74c <__assert_fail@plt+0x8ef8>
   1a740:	add	ip, ip, #1
   1a744:	cmp	ip, #10
   1a748:	bne	1a730 <__assert_fail@plt+0x8edc>
   1a74c:	add	lr, sp, #8
   1a750:	str	ip, [sp, #4]
   1a754:	str	lr, [sp]
   1a758:	bl	1a340 <__assert_fail@plt+0x8aec>
   1a75c:	add	sp, sp, #52	; 0x34
   1a760:	pop	{r4, r5, pc}
   1a764:	push	{r3}		; (str r3, [sp, #-4]!)
   1a768:	push	{r4, lr}
   1a76c:	sub	sp, sp, #60	; 0x3c
   1a770:	add	lr, sp, #56	; 0x38
   1a774:	add	r3, sp, #72	; 0x48
   1a778:	str	r3, [lr, #-44]!	; 0xffffffd4
   1a77c:	add	r4, sp, #68	; 0x44
   1a780:	mov	r3, #0
   1a784:	ldr	ip, [r4, #4]!
   1a788:	cmp	ip, #0
   1a78c:	str	ip, [lr, #4]!
   1a790:	beq	1a7a0 <__assert_fail@plt+0x8f4c>
   1a794:	add	r3, r3, #1
   1a798:	cmp	r3, #10
   1a79c:	bne	1a784 <__assert_fail@plt+0x8f30>
   1a7a0:	add	ip, sp, #16
   1a7a4:	str	r3, [sp, #4]
   1a7a8:	str	ip, [sp]
   1a7ac:	ldr	r3, [sp, #68]	; 0x44
   1a7b0:	bl	1a340 <__assert_fail@plt+0x8aec>
   1a7b4:	add	sp, sp, #60	; 0x3c
   1a7b8:	pop	{r4, lr}
   1a7bc:	add	sp, sp, #4
   1a7c0:	bx	lr
   1a7c4:	ldr	r3, [pc, #116]	; 1a840 <__assert_fail@plt+0x8fec>
   1a7c8:	push	{r4, lr}
   1a7cc:	mov	r0, #10
   1a7d0:	ldr	r1, [r3]
   1a7d4:	bl	114dc <fputc_unlocked@plt>
   1a7d8:	mov	r2, #5
   1a7dc:	ldr	r1, [pc, #96]	; 1a844 <__assert_fail@plt+0x8ff0>
   1a7e0:	mov	r0, #0
   1a7e4:	bl	114e8 <dcgettext@plt>
   1a7e8:	ldr	r2, [pc, #88]	; 1a848 <__assert_fail@plt+0x8ff4>
   1a7ec:	mov	r1, r0
   1a7f0:	mov	r0, #1
   1a7f4:	bl	116ec <__printf_chk@plt>
   1a7f8:	mov	r2, #5
   1a7fc:	ldr	r1, [pc, #72]	; 1a84c <__assert_fail@plt+0x8ff8>
   1a800:	mov	r0, #0
   1a804:	bl	114e8 <dcgettext@plt>
   1a808:	ldr	r3, [pc, #64]	; 1a850 <__assert_fail@plt+0x8ffc>
   1a80c:	ldr	r2, [pc, #64]	; 1a854 <__assert_fail@plt+0x9000>
   1a810:	mov	r1, r0
   1a814:	mov	r0, #1
   1a818:	bl	116ec <__printf_chk@plt>
   1a81c:	mov	r2, #5
   1a820:	ldr	r1, [pc, #48]	; 1a858 <__assert_fail@plt+0x9004>
   1a824:	mov	r0, #0
   1a828:	bl	114e8 <dcgettext@plt>
   1a82c:	ldr	r2, [pc, #40]	; 1a85c <__assert_fail@plt+0x9008>
   1a830:	pop	{r4, lr}
   1a834:	mov	r1, r0
   1a838:	mov	r0, #1
   1a83c:	b	116ec <__printf_chk@plt>
   1a840:	andeq	pc, r2, ip, ror #3
   1a844:	andeq	lr, r1, r8, lsr #21
   1a848:			; <UNDEFINED> instruction: 0x0001eabc
   1a84c:	ldrdeq	lr, [r1], -r4
   1a850:	strdeq	lr, [r1], -r4
   1a854:	andeq	lr, r1, ip, lsl r2
   1a858:	andeq	lr, r1, r8, ror #21
   1a85c:	andeq	lr, r1, r0, lsl fp
   1a860:	push	{r4, lr}
   1a864:	bl	1ae94 <__assert_fail@plt+0x9640>
   1a868:	cmp	r0, #0
   1a86c:	popne	{r4, pc}
   1a870:	bl	1ada8 <__assert_fail@plt+0x9554>
   1a874:	push	{r4, lr}
   1a878:	bl	1ae94 <__assert_fail@plt+0x9640>
   1a87c:	cmp	r0, #0
   1a880:	popne	{r4, pc}
   1a884:	bl	1ada8 <__assert_fail@plt+0x9554>
   1a888:	push	{r4, lr}
   1a88c:	bl	1ae94 <__assert_fail@plt+0x9640>
   1a890:	cmp	r0, #0
   1a894:	popne	{r4, pc}
   1a898:	bl	1ada8 <__assert_fail@plt+0x9554>
   1a89c:	push	{r4, r5, r6, lr}
   1a8a0:	mov	r5, r0
   1a8a4:	mov	r4, r1
   1a8a8:	bl	1aec0 <__assert_fail@plt+0x966c>
   1a8ac:	cmp	r0, #0
   1a8b0:	popne	{r4, r5, r6, pc}
   1a8b4:	adds	r4, r4, #0
   1a8b8:	movne	r4, #1
   1a8bc:	cmp	r5, #0
   1a8c0:	orreq	r4, r4, #1
   1a8c4:	cmp	r4, #0
   1a8c8:	popeq	{r4, r5, r6, pc}
   1a8cc:	bl	1ada8 <__assert_fail@plt+0x9554>
   1a8d0:	push	{r4, lr}
   1a8d4:	cmp	r1, #0
   1a8d8:	orreq	r1, r1, #1
   1a8dc:	bl	1aec0 <__assert_fail@plt+0x966c>
   1a8e0:	cmp	r0, #0
   1a8e4:	popne	{r4, pc}
   1a8e8:	bl	1ada8 <__assert_fail@plt+0x9554>
   1a8ec:	push	{r4, r5, r6, lr}
   1a8f0:	mov	r6, r0
   1a8f4:	mov	r5, r1
   1a8f8:	mov	r4, r2
   1a8fc:	bl	1be24 <__assert_fail@plt+0xa5d0>
   1a900:	cmp	r0, #0
   1a904:	popne	{r4, r5, r6, pc}
   1a908:	cmp	r6, #0
   1a90c:	beq	1a91c <__assert_fail@plt+0x90c8>
   1a910:	cmp	r5, #0
   1a914:	cmpne	r4, #0
   1a918:	popeq	{r4, r5, r6, pc}
   1a91c:	bl	1ada8 <__assert_fail@plt+0x9554>
   1a920:	b	1a8ec <__assert_fail@plt+0x9098>
   1a924:	cmp	r2, #0
   1a928:	cmpne	r1, #0
   1a92c:	moveq	r2, #1
   1a930:	moveq	r1, r2
   1a934:	push	{r4, lr}
   1a938:	bl	1be24 <__assert_fail@plt+0xa5d0>
   1a93c:	cmp	r0, #0
   1a940:	popne	{r4, pc}
   1a944:	bl	1ada8 <__assert_fail@plt+0x9554>
   1a948:	mov	r2, r1
   1a94c:	mov	r1, r0
   1a950:	mov	r0, #0
   1a954:	b	1a8ec <__assert_fail@plt+0x9098>
   1a958:	mov	r2, r1
   1a95c:	mov	r1, r0
   1a960:	mov	r0, #0
   1a964:	b	1a924 <__assert_fail@plt+0x90d0>
   1a968:	push	{r4, r5, r6, lr}
   1a96c:	subs	r6, r0, #0
   1a970:	sub	sp, sp, #8
   1a974:	mov	r5, r1
   1a978:	ldr	r4, [r1]
   1a97c:	beq	1a9b8 <__assert_fail@plt+0x9164>
   1a980:	lsr	r1, r4, #1
   1a984:	add	r3, r1, #1
   1a988:	mvn	r3, r3
   1a98c:	cmp	r4, r3
   1a990:	bhi	1a9b4 <__assert_fail@plt+0x9160>
   1a994:	add	r4, r4, #1
   1a998:	add	r4, r4, r1
   1a99c:	mov	r0, r6
   1a9a0:	mov	r1, r4
   1a9a4:	bl	1a8ec <__assert_fail@plt+0x9098>
   1a9a8:	str	r4, [r5]
   1a9ac:	add	sp, sp, #8
   1a9b0:	pop	{r4, r5, r6, pc}
   1a9b4:	bl	1ada8 <__assert_fail@plt+0x9554>
   1a9b8:	cmp	r4, #0
   1a9bc:	bne	1a99c <__assert_fail@plt+0x9148>
   1a9c0:	mov	r1, r2
   1a9c4:	mov	r0, #64	; 0x40
   1a9c8:	str	r2, [sp, #4]
   1a9cc:	bl	1c2e8 <__assert_fail@plt+0xaa94>
   1a9d0:	ldr	r2, [sp, #4]
   1a9d4:	cmp	r0, #0
   1a9d8:	movne	r4, r0
   1a9dc:	addeq	r4, r0, #1
   1a9e0:	b	1a99c <__assert_fail@plt+0x9148>
   1a9e4:	mov	r2, #1
   1a9e8:	b	1a968 <__assert_fail@plt+0x9114>
   1a9ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a9f0:	sub	sp, sp, #12
   1a9f4:	ldr	r6, [r1]
   1a9f8:	mov	sl, r1
   1a9fc:	mov	r9, r0
   1aa00:	asrs	r4, r6, #1
   1aa04:	mov	r5, r2
   1aa08:	mov	fp, r3
   1aa0c:	ldr	r7, [sp, #48]	; 0x30
   1aa10:	bmi	1ab7c <__assert_fail@plt+0x9328>
   1aa14:	mvn	r3, #-2147483648	; 0x80000000
   1aa18:	sub	r3, r3, r4
   1aa1c:	cmp	r6, r3
   1aa20:	movle	r3, #0
   1aa24:	movgt	r3, #1
   1aa28:	mvn	r8, fp
   1aa2c:	cmp	r3, #0
   1aa30:	addeq	r4, r4, r6
   1aa34:	mvnne	r4, #-2147483648	; 0x80000000
   1aa38:	lsr	r8, r8, #31
   1aa3c:	cmp	fp, r4
   1aa40:	movge	r3, #0
   1aa44:	andlt	r3, r8, #1
   1aa48:	cmp	r3, #0
   1aa4c:	beq	1ab34 <__assert_fail@plt+0x92e0>
   1aa50:	cmp	r7, #0
   1aa54:	blt	1ac04 <__assert_fail@plt+0x93b0>
   1aa58:	bne	1abfc <__assert_fail@plt+0x93a8>
   1aa5c:	mov	r2, #64	; 0x40
   1aa60:	mov	r1, r7
   1aa64:	mov	r0, r2
   1aa68:	str	r2, [sp, #4]
   1aa6c:	bl	1c4f4 <__assert_fail@plt+0xaca0>
   1aa70:	ldr	r2, [sp, #4]
   1aa74:	mov	r1, r7
   1aa78:	mov	r4, r0
   1aa7c:	mov	r0, r2
   1aa80:	bl	1c714 <__assert_fail@plt+0xaec0>
   1aa84:	ldr	r2, [sp, #4]
   1aa88:	sub	r1, r2, r1
   1aa8c:	cmp	r9, #0
   1aa90:	sub	r3, r4, r6
   1aa94:	streq	r9, [sl]
   1aa98:	cmp	r3, r5
   1aa9c:	bge	1ab20 <__assert_fail@plt+0x92cc>
   1aaa0:	cmp	r5, #0
   1aaa4:	blt	1ab90 <__assert_fail@plt+0x933c>
   1aaa8:	cmp	r6, #0
   1aaac:	blt	1aacc <__assert_fail@plt+0x9278>
   1aab0:	mvn	r3, #-2147483648	; 0x80000000
   1aab4:	sub	r3, r3, r5
   1aab8:	cmp	r6, r3
   1aabc:	movle	r3, #0
   1aac0:	movgt	r3, #1
   1aac4:	cmp	r3, #0
   1aac8:	bne	1ac8c <__assert_fail@plt+0x9438>
   1aacc:	add	r5, r6, r5
   1aad0:	cmp	fp, r5
   1aad4:	movge	r8, #0
   1aad8:	andlt	r8, r8, #1
   1aadc:	cmp	r8, #0
   1aae0:	mov	r4, r5
   1aae4:	bne	1ac8c <__assert_fail@plt+0x9438>
   1aae8:	cmp	r7, #0
   1aaec:	blt	1aba4 <__assert_fail@plt+0x9350>
   1aaf0:	beq	1ab1c <__assert_fail@plt+0x92c8>
   1aaf4:	cmp	r5, #0
   1aaf8:	blt	1ac4c <__assert_fail@plt+0x93f8>
   1aafc:	mov	r1, r7
   1ab00:	mvn	r0, #-2147483648	; 0x80000000
   1ab04:	bl	1c4f4 <__assert_fail@plt+0xaca0>
   1ab08:	cmp	r5, r0
   1ab0c:	movle	r0, #0
   1ab10:	movgt	r0, #1
   1ab14:	cmp	r0, #0
   1ab18:	bne	1ac8c <__assert_fail@plt+0x9438>
   1ab1c:	mul	r1, r5, r7
   1ab20:	mov	r0, r9
   1ab24:	bl	1a89c <__assert_fail@plt+0x9048>
   1ab28:	str	r4, [sl]
   1ab2c:	add	sp, sp, #12
   1ab30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab34:	cmp	r7, #0
   1ab38:	blt	1abd0 <__assert_fail@plt+0x937c>
   1ab3c:	beq	1aa5c <__assert_fail@plt+0x9208>
   1ab40:	cmp	r4, #0
   1ab44:	blt	1ac0c <__assert_fail@plt+0x93b8>
   1ab48:	mov	r1, r7
   1ab4c:	mvn	r0, #-2147483648	; 0x80000000
   1ab50:	bl	1c4f4 <__assert_fail@plt+0xaca0>
   1ab54:	cmp	r0, r4
   1ab58:	movge	r0, #0
   1ab5c:	movlt	r0, #1
   1ab60:	cmp	r0, #0
   1ab64:	mvnne	r2, #-2147483648	; 0x80000000
   1ab68:	bne	1aa60 <__assert_fail@plt+0x920c>
   1ab6c:	mul	r1, r7, r4
   1ab70:	cmp	r1, #63	; 0x3f
   1ab74:	bgt	1aa8c <__assert_fail@plt+0x9238>
   1ab78:	b	1aa5c <__assert_fail@plt+0x9208>
   1ab7c:	rsb	r3, r4, #-2147483648	; 0x80000000
   1ab80:	cmp	r6, r3
   1ab84:	movge	r3, #0
   1ab88:	movlt	r3, #1
   1ab8c:	b	1aa28 <__assert_fail@plt+0x91d4>
   1ab90:	rsb	r3, r5, #-2147483648	; 0x80000000
   1ab94:	cmp	r6, r3
   1ab98:	movge	r3, #0
   1ab9c:	movlt	r3, #1
   1aba0:	b	1aac4 <__assert_fail@plt+0x9270>
   1aba4:	cmp	r5, #0
   1aba8:	blt	1ac30 <__assert_fail@plt+0x93dc>
   1abac:	cmn	r7, #1
   1abb0:	beq	1ab1c <__assert_fail@plt+0x92c8>
   1abb4:	mov	r1, r7
   1abb8:	mov	r0, #-2147483648	; 0x80000000
   1abbc:	bl	1c4f4 <__assert_fail@plt+0xaca0>
   1abc0:	cmp	r5, r0
   1abc4:	movle	r0, #0
   1abc8:	movgt	r0, #1
   1abcc:	b	1ab14 <__assert_fail@plt+0x92c0>
   1abd0:	cmp	r4, #0
   1abd4:	blt	1ac70 <__assert_fail@plt+0x941c>
   1abd8:	cmn	r7, #1
   1abdc:	beq	1ab6c <__assert_fail@plt+0x9318>
   1abe0:	mov	r1, r7
   1abe4:	mov	r0, #-2147483648	; 0x80000000
   1abe8:	bl	1c4f4 <__assert_fail@plt+0xaca0>
   1abec:	cmp	r0, r4
   1abf0:	movge	r0, #0
   1abf4:	movlt	r0, #1
   1abf8:	b	1ab60 <__assert_fail@plt+0x930c>
   1abfc:	mov	r4, fp
   1ac00:	b	1ab48 <__assert_fail@plt+0x92f4>
   1ac04:	mov	r4, fp
   1ac08:	b	1abd8 <__assert_fail@plt+0x9384>
   1ac0c:	cmn	r4, #1
   1ac10:	beq	1ab6c <__assert_fail@plt+0x9318>
   1ac14:	mov	r1, r4
   1ac18:	mov	r0, #-2147483648	; 0x80000000
   1ac1c:	bl	1c4f4 <__assert_fail@plt+0xaca0>
   1ac20:	cmp	r7, r0
   1ac24:	movle	r0, #0
   1ac28:	movgt	r0, #1
   1ac2c:	b	1ab60 <__assert_fail@plt+0x930c>
   1ac30:	mov	r1, r7
   1ac34:	mvn	r0, #-2147483648	; 0x80000000
   1ac38:	bl	1c4f4 <__assert_fail@plt+0xaca0>
   1ac3c:	cmp	r5, r0
   1ac40:	movge	r0, #0
   1ac44:	movlt	r0, #1
   1ac48:	b	1ab14 <__assert_fail@plt+0x92c0>
   1ac4c:	cmn	r5, #1
   1ac50:	beq	1ab1c <__assert_fail@plt+0x92c8>
   1ac54:	mov	r1, r5
   1ac58:	mov	r0, #-2147483648	; 0x80000000
   1ac5c:	bl	1c4f4 <__assert_fail@plt+0xaca0>
   1ac60:	cmp	r7, r0
   1ac64:	movle	r0, #0
   1ac68:	movgt	r0, #1
   1ac6c:	b	1ab14 <__assert_fail@plt+0x92c0>
   1ac70:	mov	r1, r7
   1ac74:	mvn	r0, #-2147483648	; 0x80000000
   1ac78:	bl	1c4f4 <__assert_fail@plt+0xaca0>
   1ac7c:	cmp	r0, r4
   1ac80:	movle	r0, #0
   1ac84:	movgt	r0, #1
   1ac88:	b	1ab60 <__assert_fail@plt+0x930c>
   1ac8c:	bl	1ada8 <__assert_fail@plt+0x9554>
   1ac90:	push	{r4, lr}
   1ac94:	mov	r1, #1
   1ac98:	bl	1ae4c <__assert_fail@plt+0x95f8>
   1ac9c:	cmp	r0, #0
   1aca0:	popne	{r4, pc}
   1aca4:	bl	1ada8 <__assert_fail@plt+0x9554>
   1aca8:	push	{r4, lr}
   1acac:	mov	r1, #1
   1acb0:	bl	1ae4c <__assert_fail@plt+0x95f8>
   1acb4:	cmp	r0, #0
   1acb8:	popne	{r4, pc}
   1acbc:	bl	1ada8 <__assert_fail@plt+0x9554>
   1acc0:	push	{r4, lr}
   1acc4:	bl	1ae4c <__assert_fail@plt+0x95f8>
   1acc8:	cmp	r0, #0
   1accc:	popne	{r4, pc}
   1acd0:	bl	1ada8 <__assert_fail@plt+0x9554>
   1acd4:	push	{r4, lr}
   1acd8:	bl	1ae4c <__assert_fail@plt+0x95f8>
   1acdc:	cmp	r0, #0
   1ace0:	popne	{r4, pc}
   1ace4:	bl	1ada8 <__assert_fail@plt+0x9554>
   1ace8:	push	{r4, r5, r6, lr}
   1acec:	mov	r6, r0
   1acf0:	mov	r0, r1
   1acf4:	mov	r4, r1
   1acf8:	bl	1ae94 <__assert_fail@plt+0x9640>
   1acfc:	subs	r5, r0, #0
   1ad00:	beq	1ad18 <__assert_fail@plt+0x94c4>
   1ad04:	mov	r2, r4
   1ad08:	mov	r1, r6
   1ad0c:	bl	114b8 <memcpy@plt>
   1ad10:	mov	r0, r5
   1ad14:	pop	{r4, r5, r6, pc}
   1ad18:	bl	1ada8 <__assert_fail@plt+0x9554>
   1ad1c:	push	{r4, r5, r6, lr}
   1ad20:	mov	r6, r0
   1ad24:	mov	r0, r1
   1ad28:	mov	r4, r1
   1ad2c:	bl	1ae94 <__assert_fail@plt+0x9640>
   1ad30:	subs	r5, r0, #0
   1ad34:	beq	1ad4c <__assert_fail@plt+0x94f8>
   1ad38:	mov	r2, r4
   1ad3c:	mov	r1, r6
   1ad40:	bl	114b8 <memcpy@plt>
   1ad44:	mov	r0, r5
   1ad48:	pop	{r4, r5, r6, pc}
   1ad4c:	bl	1ada8 <__assert_fail@plt+0x9554>
   1ad50:	push	{r4, r5, r6, lr}
   1ad54:	mov	r6, r0
   1ad58:	add	r0, r1, #1
   1ad5c:	mov	r4, r1
   1ad60:	bl	1ae94 <__assert_fail@plt+0x9640>
   1ad64:	subs	r5, r0, #0
   1ad68:	beq	1ad88 <__assert_fail@plt+0x9534>
   1ad6c:	mov	r3, #0
   1ad70:	mov	r1, r6
   1ad74:	strb	r3, [r5, r4]
   1ad78:	mov	r2, r4
   1ad7c:	bl	114b8 <memcpy@plt>
   1ad80:	mov	r0, r5
   1ad84:	pop	{r4, r5, r6, pc}
   1ad88:	bl	1ada8 <__assert_fail@plt+0x9554>
   1ad8c:	push	{r4, lr}
   1ad90:	mov	r4, r0
   1ad94:	bl	11674 <strlen@plt>
   1ad98:	add	r1, r0, #1
   1ad9c:	mov	r0, r4
   1ada0:	pop	{r4, lr}
   1ada4:	b	1ace8 <__assert_fail@plt+0x9494>
   1ada8:	ldr	r3, [pc, #44]	; 1addc <__assert_fail@plt+0x9588>
   1adac:	push	{r4, lr}
   1adb0:	mov	r2, #5
   1adb4:	ldr	r1, [pc, #36]	; 1ade0 <__assert_fail@plt+0x958c>
   1adb8:	mov	r0, #0
   1adbc:	ldr	r4, [r3]
   1adc0:	bl	114e8 <dcgettext@plt>
   1adc4:	ldr	r2, [pc, #24]	; 1ade4 <__assert_fail@plt+0x9590>
   1adc8:	mov	r1, #0
   1adcc:	mov	r3, r0
   1add0:	mov	r0, r4
   1add4:	bl	115a8 <error@plt>
   1add8:	bl	11824 <abort@plt>
   1addc:	muleq	r2, r0, r1
   1ade0:	andeq	lr, r1, r0, ror #22
   1ade4:	ldrdeq	lr, [r1], -r4
   1ade8:	mov	r1, #0
   1adec:	push	{r4, lr}
   1adf0:	mov	r0, r1
   1adf4:	bl	11650 <getcwd@plt>
   1adf8:	subs	r4, r0, #0
   1adfc:	beq	1ae08 <__assert_fail@plt+0x95b4>
   1ae00:	mov	r0, r4
   1ae04:	pop	{r4, pc}
   1ae08:	bl	116b0 <__errno_location@plt>
   1ae0c:	ldr	r3, [r0]
   1ae10:	cmp	r3, #12
   1ae14:	bne	1ae00 <__assert_fail@plt+0x95ac>
   1ae18:	bl	1ada8 <__assert_fail@plt+0x9554>
   1ae1c:	push	{r0, r1, r2, r3}
   1ae20:	push	{lr}		; (str lr, [sp, #-4]!)
   1ae24:	sub	sp, sp, #12
   1ae28:	add	r3, sp, #20
   1ae2c:	mov	r1, r3
   1ae30:	ldr	r0, [sp, #16]
   1ae34:	str	r3, [sp, #4]
   1ae38:	bl	1bf70 <__assert_fail@plt+0xa71c>
   1ae3c:	add	sp, sp, #12
   1ae40:	pop	{lr}		; (ldr lr, [sp], #4)
   1ae44:	add	sp, sp, #16
   1ae48:	bx	lr
   1ae4c:	cmp	r1, #0
   1ae50:	cmpne	r0, #0
   1ae54:	moveq	r1, #1
   1ae58:	moveq	r0, r1
   1ae5c:	umull	r2, r3, r0, r1
   1ae60:	adds	r3, r3, #0
   1ae64:	movne	r3, #1
   1ae68:	cmp	r2, #0
   1ae6c:	blt	1ae7c <__assert_fail@plt+0x9628>
   1ae70:	cmp	r3, #0
   1ae74:	bne	1ae7c <__assert_fail@plt+0x9628>
   1ae78:	b	1141c <calloc@plt>
   1ae7c:	push	{r4, lr}
   1ae80:	bl	116b0 <__errno_location@plt>
   1ae84:	mov	r3, #12
   1ae88:	str	r3, [r0]
   1ae8c:	mov	r0, #0
   1ae90:	pop	{r4, pc}
   1ae94:	cmp	r0, #0
   1ae98:	moveq	r0, #1
   1ae9c:	cmp	r0, #0
   1aea0:	blt	1aea8 <__assert_fail@plt+0x9654>
   1aea4:	b	115e4 <malloc@plt>
   1aea8:	push	{r4, lr}
   1aeac:	bl	116b0 <__errno_location@plt>
   1aeb0:	mov	r3, #12
   1aeb4:	str	r3, [r0]
   1aeb8:	mov	r0, #0
   1aebc:	pop	{r4, pc}
   1aec0:	cmp	r0, #0
   1aec4:	beq	1aee8 <__assert_fail@plt+0x9694>
   1aec8:	cmp	r1, #0
   1aecc:	push	{lr}		; (str lr, [sp, #-4]!)
   1aed0:	sub	sp, sp, #12
   1aed4:	beq	1aef0 <__assert_fail@plt+0x969c>
   1aed8:	blt	1af08 <__assert_fail@plt+0x96b4>
   1aedc:	add	sp, sp, #12
   1aee0:	pop	{lr}		; (ldr lr, [sp], #4)
   1aee4:	b	114f4 <realloc@plt>
   1aee8:	mov	r0, r1
   1aeec:	b	1ae94 <__assert_fail@plt+0x9640>
   1aef0:	str	r1, [sp, #4]
   1aef4:	bl	15928 <__assert_fail@plt+0x40d4>
   1aef8:	ldr	r3, [sp, #4]
   1aefc:	mov	r0, r3
   1af00:	add	sp, sp, #12
   1af04:	pop	{pc}		; (ldr pc, [sp], #4)
   1af08:	bl	116b0 <__errno_location@plt>
   1af0c:	mov	r2, #12
   1af10:	mov	r3, #0
   1af14:	str	r2, [r0]
   1af18:	b	1aefc <__assert_fail@plt+0x96a8>
   1af1c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1af20:	mov	r6, #1
   1af24:	mov	ip, r6
   1af28:	mov	r8, r6
   1af2c:	mov	lr, #0
   1af30:	mvn	r4, #0
   1af34:	add	r3, ip, lr
   1af38:	cmp	r3, r1
   1af3c:	add	r5, r0, r4
   1af40:	bcs	1af70 <__assert_fail@plt+0x971c>
   1af44:	ldrb	r5, [r5, ip]
   1af48:	ldrb	r7, [r0, r3]
   1af4c:	cmp	r7, r5
   1af50:	bcs	1afdc <__assert_fail@plt+0x9788>
   1af54:	mov	lr, r3
   1af58:	mov	ip, #1
   1af5c:	sub	r6, r3, r4
   1af60:	add	r3, ip, lr
   1af64:	cmp	r3, r1
   1af68:	add	r5, r0, r4
   1af6c:	bcc	1af44 <__assert_fail@plt+0x96f0>
   1af70:	mov	r8, #1
   1af74:	mov	ip, r8
   1af78:	mov	r9, r8
   1af7c:	mov	lr, #0
   1af80:	mvn	r5, #0
   1af84:	str	r6, [r2]
   1af88:	add	r3, ip, lr
   1af8c:	cmp	r1, r3
   1af90:	add	r6, r0, r5
   1af94:	bls	1afc4 <__assert_fail@plt+0x9770>
   1af98:	ldrb	r6, [r6, ip]
   1af9c:	ldrb	r7, [r0, r3]
   1afa0:	cmp	r7, r6
   1afa4:	bls	1aff4 <__assert_fail@plt+0x97a0>
   1afa8:	mov	lr, r3
   1afac:	mov	ip, #1
   1afb0:	sub	r8, r3, r5
   1afb4:	add	r3, ip, lr
   1afb8:	cmp	r1, r3
   1afbc:	add	r6, r0, r5
   1afc0:	bhi	1af98 <__assert_fail@plt+0x9744>
   1afc4:	add	r0, r4, #1
   1afc8:	add	r5, r5, #1
   1afcc:	cmp	r5, r0
   1afd0:	strcs	r8, [r2]
   1afd4:	movcs	r0, r5
   1afd8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1afdc:	beq	1b00c <__assert_fail@plt+0x97b8>
   1afe0:	mov	r4, lr
   1afe4:	mov	r6, r8
   1afe8:	add	lr, lr, #1
   1afec:	mov	ip, #1
   1aff0:	b	1af34 <__assert_fail@plt+0x96e0>
   1aff4:	beq	1b020 <__assert_fail@plt+0x97cc>
   1aff8:	mov	r5, lr
   1affc:	mov	r8, r9
   1b000:	add	lr, lr, #1
   1b004:	mov	ip, #1
   1b008:	b	1af88 <__assert_fail@plt+0x9734>
   1b00c:	cmp	ip, r6
   1b010:	addne	ip, ip, #1
   1b014:	moveq	lr, r3
   1b018:	moveq	ip, #1
   1b01c:	b	1af34 <__assert_fail@plt+0x96e0>
   1b020:	cmp	ip, r8
   1b024:	addne	ip, ip, #1
   1b028:	moveq	lr, r3
   1b02c:	moveq	ip, #1
   1b030:	b	1af88 <__assert_fail@plt+0x9734>
   1b034:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b038:	cmp	r3, #2
   1b03c:	sub	sp, sp, #1056	; 0x420
   1b040:	sub	sp, sp, #4
   1b044:	mov	r4, r3
   1b048:	mov	r5, r0
   1b04c:	mov	fp, r1
   1b050:	mov	r8, r2
   1b054:	bhi	1b3b8 <__assert_fail@plt+0x9b64>
   1b058:	sub	r2, r4, #1
   1b05c:	mov	r9, r2
   1b060:	add	r6, sp, #32
   1b064:	mov	r3, #1
   1b068:	str	r3, [sp]
   1b06c:	str	r3, [sp, #28]
   1b070:	add	r2, sp, #1040	; 0x410
   1b074:	sub	r3, r6, #4
   1b078:	add	r2, r2, #12
   1b07c:	str	r4, [r3, #4]!
   1b080:	cmp	r2, r3
   1b084:	bne	1b07c <__assert_fail@plt+0x9828>
   1b088:	cmp	r4, #0
   1b08c:	subne	r3, r4, #1
   1b090:	subne	r1, r8, #1
   1b094:	beq	1b0b0 <__assert_fail@plt+0x985c>
   1b098:	ldrb	r2, [r1, #1]!
   1b09c:	add	r0, sp, #1056	; 0x420
   1b0a0:	add	r2, r0, r2, lsl #2
   1b0a4:	str	r3, [r2, #-1024]	; 0xfffffc00
   1b0a8:	subs	r3, r3, #1
   1b0ac:	bcs	1b098 <__assert_fail@plt+0x9844>
   1b0b0:	ldr	r7, [sp]
   1b0b4:	mov	r2, r9
   1b0b8:	add	r1, r8, r7
   1b0bc:	mov	r0, r8
   1b0c0:	bl	114d0 <memcmp@plt>
   1b0c4:	mov	r6, r9
   1b0c8:	subs	sl, r0, #0
   1b0cc:	bne	1b250 <__assert_fail@plt+0x99fc>
   1b0d0:	sub	r2, r9, #1
   1b0d4:	str	r2, [sp, #4]
   1b0d8:	add	r2, r8, r2
   1b0dc:	mov	r3, r9
   1b0e0:	str	r2, [sp, #16]
   1b0e4:	sub	r2, r4, r7
   1b0e8:	str	r2, [sp, #12]
   1b0ec:	rsb	r2, r3, #1
   1b0f0:	str	r8, [sp, #8]
   1b0f4:	mov	r9, sl
   1b0f8:	sub	r6, r4, #1
   1b0fc:	str	r2, [sp, #20]
   1b100:	mov	r0, fp
   1b104:	mov	r8, r3
   1b108:	b	1b128 <__assert_fail@plt+0x98d4>
   1b10c:	ldr	r3, [sp]
   1b110:	cmp	sl, #0
   1b114:	cmpne	ip, r3
   1b118:	mov	sl, #0
   1b11c:	ldrcc	ip, [sp, #12]
   1b120:	add	r9, r9, ip
   1b124:	mov	r0, r7
   1b128:	add	r7, r9, r4
   1b12c:	sub	r2, r7, r0
   1b130:	mov	r1, #0
   1b134:	add	r0, r5, r0
   1b138:	bl	11710 <memchr@plt>
   1b13c:	adds	r3, r7, #0
   1b140:	movne	r3, #1
   1b144:	cmp	r0, #0
   1b148:	movne	r3, #0
   1b14c:	cmp	r3, #0
   1b150:	mov	r0, r3
   1b154:	beq	1b38c <__assert_fail@plt+0x9b38>
   1b158:	add	r3, r5, r7
   1b15c:	add	r2, sp, #1056	; 0x420
   1b160:	ldrb	r3, [r3, #-1]
   1b164:	add	r3, r2, r3, lsl #2
   1b168:	ldr	ip, [r3, #-1024]	; 0xfffffc00
   1b16c:	cmp	ip, #0
   1b170:	bne	1b10c <__assert_fail@plt+0x98b8>
   1b174:	cmp	sl, r8
   1b178:	movcs	r3, sl
   1b17c:	movcc	r3, r8
   1b180:	cmp	r3, r6
   1b184:	bcs	1b1c8 <__assert_fail@plt+0x9974>
   1b188:	ldr	r1, [sp, #8]
   1b18c:	add	r2, r9, r3
   1b190:	ldrb	r0, [r1, r3]
   1b194:	ldrb	lr, [r5, r2]
   1b198:	add	r1, r1, r3
   1b19c:	add	r2, r5, r2
   1b1a0:	cmp	lr, r0
   1b1a4:	beq	1b1bc <__assert_fail@plt+0x9968>
   1b1a8:	b	1b23c <__assert_fail@plt+0x99e8>
   1b1ac:	ldrb	lr, [r1, #1]!
   1b1b0:	ldrb	r0, [r2, #1]!
   1b1b4:	cmp	lr, r0
   1b1b8:	bne	1b23c <__assert_fail@plt+0x99e8>
   1b1bc:	add	r3, r3, #1
   1b1c0:	cmp	r3, r6
   1b1c4:	bcc	1b1ac <__assert_fail@plt+0x9958>
   1b1c8:	cmp	sl, r8
   1b1cc:	ldr	r1, [sp, #4]
   1b1d0:	bcs	1b3dc <__assert_fail@plt+0x9b88>
   1b1d4:	ldr	r3, [sp, #4]
   1b1d8:	ldr	ip, [sp, #16]
   1b1dc:	add	r2, r9, r3
   1b1e0:	ldrb	r3, [ip]
   1b1e4:	ldrb	r0, [r5, r2]
   1b1e8:	add	r2, r5, r2
   1b1ec:	cmp	r3, r0
   1b1f0:	bne	1b3dc <__assert_fail@plt+0x9b88>
   1b1f4:	mov	r0, ip
   1b1f8:	sub	fp, sl, #1
   1b1fc:	b	1b214 <__assert_fail@plt+0x99c0>
   1b200:	ldrb	lr, [r0, #-1]!
   1b204:	ldrb	ip, [r2, #-1]!
   1b208:	cmp	lr, ip
   1b20c:	bne	1b220 <__assert_fail@plt+0x99cc>
   1b210:	mov	r1, r3
   1b214:	sub	r3, r1, #1
   1b218:	cmp	r3, fp
   1b21c:	bne	1b200 <__assert_fail@plt+0x99ac>
   1b220:	add	sl, sl, #1
   1b224:	cmp	sl, r1
   1b228:	bhi	1b388 <__assert_fail@plt+0x9b34>
   1b22c:	ldr	r3, [sp]
   1b230:	ldr	sl, [sp, #12]
   1b234:	add	r9, r9, r3
   1b238:	b	1b124 <__assert_fail@plt+0x98d0>
   1b23c:	ldr	r2, [sp, #20]
   1b240:	mov	sl, ip
   1b244:	add	r9, r2, r9
   1b248:	add	r9, r3, r9
   1b24c:	b	1b124 <__assert_fail@plt+0x98d0>
   1b250:	sub	r3, r4, r9
   1b254:	cmp	r3, r9
   1b258:	movcc	r3, r9
   1b25c:	sub	r1, r6, #1
   1b260:	add	r3, r3, #1
   1b264:	mov	r2, r9
   1b268:	str	r3, [sp, #8]
   1b26c:	mov	r9, #0
   1b270:	add	r3, r8, r1
   1b274:	str	r3, [sp, #12]
   1b278:	sub	r6, r4, #1
   1b27c:	add	r3, r8, r2
   1b280:	mov	r0, fp
   1b284:	mov	sl, r9
   1b288:	mov	fp, r8
   1b28c:	mov	r8, r4
   1b290:	mov	r4, r2
   1b294:	str	r3, [sp]
   1b298:	rsb	r3, r2, #1
   1b29c:	str	r1, [sp, #4]
   1b2a0:	str	r3, [sp, #16]
   1b2a4:	add	r7, r9, r8
   1b2a8:	sub	r2, r7, r0
   1b2ac:	mov	r1, sl
   1b2b0:	add	r0, r5, r0
   1b2b4:	bl	11710 <memchr@plt>
   1b2b8:	cmp	r7, #0
   1b2bc:	clz	r0, r0
   1b2c0:	lsr	r0, r0, #5
   1b2c4:	moveq	r0, #0
   1b2c8:	cmp	r0, #0
   1b2cc:	beq	1b38c <__assert_fail@plt+0x9b38>
   1b2d0:	add	r2, r5, r7
   1b2d4:	add	r3, sp, #1056	; 0x420
   1b2d8:	ldrb	r2, [r2, #-1]
   1b2dc:	add	r2, r3, r2, lsl #2
   1b2e0:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   1b2e4:	cmp	r2, #0
   1b2e8:	bne	1b3a0 <__assert_fail@plt+0x9b4c>
   1b2ec:	cmp	r4, r6
   1b2f0:	bcs	1b33c <__assert_fail@plt+0x9ae8>
   1b2f4:	ldr	r3, [sp]
   1b2f8:	add	r1, r9, r4
   1b2fc:	ldrb	r0, [r3]
   1b300:	ldrb	r2, [r5, r1]
   1b304:	add	r1, r5, r1
   1b308:	cmp	r0, r2
   1b30c:	movne	r2, r4
   1b310:	bne	1b398 <__assert_fail@plt+0x9b44>
   1b314:	ldr	r0, [sp]
   1b318:	mov	r2, r4
   1b31c:	b	1b330 <__assert_fail@plt+0x9adc>
   1b320:	ldrb	ip, [r0, #1]!
   1b324:	ldrb	r3, [r1, #1]!
   1b328:	cmp	ip, r3
   1b32c:	bne	1b398 <__assert_fail@plt+0x9b44>
   1b330:	add	r2, r2, #1
   1b334:	cmp	r2, r6
   1b338:	bcc	1b320 <__assert_fail@plt+0x9acc>
   1b33c:	ldr	r3, [sp, #4]
   1b340:	cmn	r3, #1
   1b344:	beq	1b388 <__assert_fail@plt+0x9b34>
   1b348:	ldr	r3, [sp, #4]
   1b34c:	add	r1, r9, r3
   1b350:	ldr	r3, [sp, #12]
   1b354:	ldrb	r2, [r5, r1]
   1b358:	add	r1, r5, r1
   1b35c:	ldrb	r0, [r3]
   1b360:	cmp	r0, r2
   1b364:	bne	1b3ac <__assert_fail@plt+0x9b58>
   1b368:	mov	r2, r3
   1b36c:	b	1b380 <__assert_fail@plt+0x9b2c>
   1b370:	ldrb	r0, [r2, #-1]!
   1b374:	ldrb	r3, [r1, #-1]!
   1b378:	cmp	r0, r3
   1b37c:	bne	1b3ac <__assert_fail@plt+0x9b58>
   1b380:	cmp	fp, r2
   1b384:	bne	1b370 <__assert_fail@plt+0x9b1c>
   1b388:	add	r0, r5, r9
   1b38c:	add	sp, sp, #1056	; 0x420
   1b390:	add	sp, sp, #4
   1b394:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b398:	ldr	r3, [sp, #16]
   1b39c:	add	r9, r3, r9
   1b3a0:	add	r9, r9, r2
   1b3a4:	mov	r0, r7
   1b3a8:	b	1b2a4 <__assert_fail@plt+0x9a50>
   1b3ac:	ldr	r3, [sp, #8]
   1b3b0:	add	r9, r9, r3
   1b3b4:	b	1b3a4 <__assert_fail@plt+0x9b50>
   1b3b8:	add	r6, sp, #32
   1b3bc:	mov	r1, r3
   1b3c0:	sub	r2, r6, #4
   1b3c4:	mov	r0, r8
   1b3c8:	bl	1af1c <__assert_fail@plt+0x96c8>
   1b3cc:	ldr	r3, [sp, #28]
   1b3d0:	str	r3, [sp]
   1b3d4:	mov	r9, r0
   1b3d8:	b	1b070 <__assert_fail@plt+0x981c>
   1b3dc:	mov	r1, r8
   1b3e0:	b	1b220 <__assert_fail@plt+0x99cc>
   1b3e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3e8:	sub	sp, sp, #36	; 0x24
   1b3ec:	ldrb	r2, [r0]
   1b3f0:	cmp	r2, #0
   1b3f4:	beq	1b778 <__assert_fail@plt+0x9f24>
   1b3f8:	ldrb	ip, [r1]
   1b3fc:	cmp	ip, #0
   1b400:	beq	1b4a8 <__assert_fail@plt+0x9c54>
   1b404:	mov	r8, r0
   1b408:	add	lr, r1, #1
   1b40c:	mov	sl, #1
   1b410:	b	1b420 <__assert_fail@plt+0x9bcc>
   1b414:	ldrb	ip, [lr], #1
   1b418:	cmp	ip, #0
   1b41c:	beq	1b448 <__assert_fail@plt+0x9bf4>
   1b420:	cmp	ip, r2
   1b424:	movne	sl, #0
   1b428:	andeq	sl, sl, #1
   1b42c:	ldrb	r2, [r8, #1]!
   1b430:	mov	r6, lr
   1b434:	cmp	r2, #0
   1b438:	bne	1b414 <__assert_fail@plt+0x9bc0>
   1b43c:	ldrb	r3, [r6]
   1b440:	cmp	r3, #0
   1b444:	bne	1b4b0 <__assert_fail@plt+0x9c5c>
   1b448:	cmp	sl, #0
   1b44c:	bne	1b4a8 <__assert_fail@plt+0x9c54>
   1b450:	mov	r4, r1
   1b454:	mov	r5, r0
   1b458:	ldrb	r1, [r1]
   1b45c:	add	r0, r0, #1
   1b460:	bl	11680 <strchr@plt>
   1b464:	sub	r4, r6, r4
   1b468:	subs	r7, r0, #0
   1b46c:	beq	1b4b0 <__assert_fail@plt+0x9c5c>
   1b470:	cmp	r4, #1
   1b474:	beq	1b770 <__assert_fail@plt+0x9f1c>
   1b478:	add	r0, r5, r4
   1b47c:	cmp	r7, r0
   1b480:	subls	r1, r0, r7
   1b484:	movhi	r1, #1
   1b488:	cmp	r4, #31
   1b48c:	sub	r6, r6, r4
   1b490:	mov	r8, r1
   1b494:	bls	1b4bc <__assert_fail@plt+0x9c68>
   1b498:	mov	r3, r4
   1b49c:	mov	r2, r6
   1b4a0:	mov	r0, r7
   1b4a4:	bl	1b034 <__assert_fail@plt+0x97e0>
   1b4a8:	add	sp, sp, #36	; 0x24
   1b4ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4b0:	mov	r0, #0
   1b4b4:	add	sp, sp, #36	; 0x24
   1b4b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4bc:	cmp	r4, #2
   1b4c0:	bhi	1b748 <__assert_fail@plt+0x9ef4>
   1b4c4:	sub	r9, r4, #1
   1b4c8:	mov	r3, #1
   1b4cc:	str	r3, [sp, #8]
   1b4d0:	str	r3, [sp, #28]
   1b4d4:	ldr	r5, [sp, #8]
   1b4d8:	mov	r2, r9
   1b4dc:	add	r1, r6, r5
   1b4e0:	mov	r0, r6
   1b4e4:	bl	114d0 <memcmp@plt>
   1b4e8:	subs	fp, r0, #0
   1b4ec:	bne	1b624 <__assert_fail@plt+0x9dd0>
   1b4f0:	sub	r3, r9, #1
   1b4f4:	str	r3, [sp, #4]
   1b4f8:	add	r3, r6, r3
   1b4fc:	str	r3, [sp, #20]
   1b500:	mov	sl, fp
   1b504:	sub	r3, r4, r5
   1b508:	mov	r0, r8
   1b50c:	str	r3, [sp, #16]
   1b510:	rsb	r3, r9, #1
   1b514:	str	r3, [sp, #12]
   1b518:	add	r5, r4, sl
   1b51c:	sub	r2, r5, r0
   1b520:	mov	r1, #0
   1b524:	add	r0, r7, r0
   1b528:	bl	11710 <memchr@plt>
   1b52c:	adds	r3, r5, #0
   1b530:	movne	r3, #1
   1b534:	cmp	r0, #0
   1b538:	movne	r3, #0
   1b53c:	cmp	r3, #0
   1b540:	mov	r0, r3
   1b544:	beq	1b4a8 <__assert_fail@plt+0x9c54>
   1b548:	cmp	r9, fp
   1b54c:	movcs	r3, r9
   1b550:	movcc	r3, fp
   1b554:	cmp	r4, r3
   1b558:	bls	1b598 <__assert_fail@plt+0x9d44>
   1b55c:	add	r2, r3, sl
   1b560:	ldrb	r1, [r6, r3]
   1b564:	ldrb	r0, [r7, r2]
   1b568:	add	ip, r6, r3
   1b56c:	add	r2, r7, r2
   1b570:	cmp	r0, r1
   1b574:	beq	1b58c <__assert_fail@plt+0x9d38>
   1b578:	b	1b610 <__assert_fail@plt+0x9dbc>
   1b57c:	ldrb	r0, [ip, #1]!
   1b580:	ldrb	r1, [r2, #1]!
   1b584:	cmp	r0, r1
   1b588:	bne	1b610 <__assert_fail@plt+0x9dbc>
   1b58c:	add	r3, r3, #1
   1b590:	cmp	r4, r3
   1b594:	bne	1b57c <__assert_fail@plt+0x9d28>
   1b598:	cmp	r9, fp
   1b59c:	ldr	r1, [sp, #4]
   1b5a0:	bls	1b768 <__assert_fail@plt+0x9f14>
   1b5a4:	ldr	r3, [sp, #4]
   1b5a8:	ldr	ip, [sp, #20]
   1b5ac:	add	r2, sl, r3
   1b5b0:	ldrb	r3, [ip]
   1b5b4:	ldrb	r0, [r7, r2]
   1b5b8:	add	r2, r7, r2
   1b5bc:	cmp	r3, r0
   1b5c0:	bne	1b768 <__assert_fail@plt+0x9f14>
   1b5c4:	mov	r0, ip
   1b5c8:	sub	r8, fp, #1
   1b5cc:	b	1b5e4 <__assert_fail@plt+0x9d90>
   1b5d0:	ldrb	lr, [r0, #-1]!
   1b5d4:	ldrb	ip, [r2, #-1]!
   1b5d8:	cmp	lr, ip
   1b5dc:	bne	1b5f0 <__assert_fail@plt+0x9d9c>
   1b5e0:	mov	r1, r3
   1b5e4:	sub	r3, r1, #1
   1b5e8:	cmp	r3, r8
   1b5ec:	bne	1b5d0 <__assert_fail@plt+0x9d7c>
   1b5f0:	add	fp, fp, #1
   1b5f4:	cmp	fp, r1
   1b5f8:	bhi	1b784 <__assert_fail@plt+0x9f30>
   1b5fc:	ldr	r3, [sp, #8]
   1b600:	ldr	fp, [sp, #16]
   1b604:	add	sl, sl, r3
   1b608:	mov	r0, r5
   1b60c:	b	1b518 <__assert_fail@plt+0x9cc4>
   1b610:	ldr	r2, [sp, #12]
   1b614:	mov	fp, #0
   1b618:	add	sl, r2, sl
   1b61c:	add	sl, sl, r3
   1b620:	b	1b608 <__assert_fail@plt+0x9db4>
   1b624:	sub	r3, r4, r9
   1b628:	cmp	r3, r9
   1b62c:	movcc	r3, r9
   1b630:	sub	r2, r9, #1
   1b634:	add	r3, r3, #1
   1b638:	str	r3, [sp, #8]
   1b63c:	mov	r0, r8
   1b640:	add	r3, r6, r2
   1b644:	mov	r5, #0
   1b648:	add	sl, r6, r9
   1b64c:	mov	r8, r2
   1b650:	str	r3, [sp, #12]
   1b654:	rsb	r3, r9, #1
   1b658:	str	r3, [sp, #4]
   1b65c:	add	fp, r4, r5
   1b660:	sub	r2, fp, r0
   1b664:	mov	r1, #0
   1b668:	add	r0, r7, r0
   1b66c:	bl	11710 <memchr@plt>
   1b670:	adds	r3, fp, #0
   1b674:	movne	r3, #1
   1b678:	cmp	r0, #0
   1b67c:	movne	r3, #0
   1b680:	cmp	r3, #0
   1b684:	mov	r0, r3
   1b688:	beq	1b4a8 <__assert_fail@plt+0x9c54>
   1b68c:	cmp	r4, r9
   1b690:	bls	1b6d8 <__assert_fail@plt+0x9e84>
   1b694:	add	r1, r9, r5
   1b698:	ldrb	r0, [sl]
   1b69c:	ldrb	r2, [r7, r1]
   1b6a0:	add	r1, r7, r1
   1b6a4:	cmp	r0, r2
   1b6a8:	movne	r2, r9
   1b6ac:	bne	1b728 <__assert_fail@plt+0x9ed4>
   1b6b0:	mov	r0, sl
   1b6b4:	mov	r2, r9
   1b6b8:	b	1b6cc <__assert_fail@plt+0x9e78>
   1b6bc:	ldrb	ip, [r0, #1]!
   1b6c0:	ldrb	r3, [r1, #1]!
   1b6c4:	cmp	ip, r3
   1b6c8:	bne	1b728 <__assert_fail@plt+0x9ed4>
   1b6cc:	add	r2, r2, #1
   1b6d0:	cmp	r4, r2
   1b6d4:	bhi	1b6bc <__assert_fail@plt+0x9e68>
   1b6d8:	cmn	r8, #1
   1b6dc:	beq	1b71c <__assert_fail@plt+0x9ec8>
   1b6e0:	ldr	r3, [sp, #12]
   1b6e4:	add	r1, r5, r8
   1b6e8:	ldrb	r0, [r3]
   1b6ec:	ldrb	r2, [r7, r1]
   1b6f0:	add	r1, r7, r1
   1b6f4:	cmp	r0, r2
   1b6f8:	bne	1b73c <__assert_fail@plt+0x9ee8>
   1b6fc:	mov	r2, r3
   1b700:	b	1b714 <__assert_fail@plt+0x9ec0>
   1b704:	ldrb	r0, [r2, #-1]!
   1b708:	ldrb	r3, [r1, #-1]!
   1b70c:	cmp	r0, r3
   1b710:	bne	1b73c <__assert_fail@plt+0x9ee8>
   1b714:	cmp	r6, r2
   1b718:	bne	1b704 <__assert_fail@plt+0x9eb0>
   1b71c:	add	r0, r7, r5
   1b720:	add	sp, sp, #36	; 0x24
   1b724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b728:	ldr	r3, [sp, #4]
   1b72c:	add	r5, r3, r5
   1b730:	add	r5, r5, r2
   1b734:	mov	r0, fp
   1b738:	b	1b65c <__assert_fail@plt+0x9e08>
   1b73c:	ldr	r3, [sp, #8]
   1b740:	add	r5, r5, r3
   1b744:	b	1b734 <__assert_fail@plt+0x9ee0>
   1b748:	add	r2, sp, #28
   1b74c:	mov	r1, r4
   1b750:	mov	r0, r6
   1b754:	bl	1af1c <__assert_fail@plt+0x96c8>
   1b758:	ldr	r3, [sp, #28]
   1b75c:	str	r3, [sp, #8]
   1b760:	mov	r9, r0
   1b764:	b	1b4d4 <__assert_fail@plt+0x9c80>
   1b768:	mov	r1, r9
   1b76c:	b	1b5f0 <__assert_fail@plt+0x9d9c>
   1b770:	mov	r0, r7
   1b774:	b	1b4a8 <__assert_fail@plt+0x9c54>
   1b778:	mov	r6, r1
   1b77c:	mov	sl, #1
   1b780:	b	1b43c <__assert_fail@plt+0x9be8>
   1b784:	add	r0, r7, sl
   1b788:	b	1b4a8 <__assert_fail@plt+0x9c54>
   1b78c:	ldrb	r3, [r0]
   1b790:	cmp	r3, #47	; 0x2f
   1b794:	bne	1b7a4 <__assert_fail@plt+0x9f50>
   1b798:	ldrb	r3, [r0, #1]!
   1b79c:	cmp	r3, #47	; 0x2f
   1b7a0:	beq	1b798 <__assert_fail@plt+0x9f44>
   1b7a4:	cmp	r3, #0
   1b7a8:	bxeq	lr
   1b7ac:	mov	r2, #0
   1b7b0:	push	{lr}		; (str lr, [sp, #-4]!)
   1b7b4:	mov	ip, r2
   1b7b8:	mov	r1, r0
   1b7bc:	mov	lr, #1
   1b7c0:	cmp	r3, #47	; 0x2f
   1b7c4:	moveq	r2, lr
   1b7c8:	beq	1b7d8 <__assert_fail@plt+0x9f84>
   1b7cc:	cmp	r2, #0
   1b7d0:	movne	r0, r1
   1b7d4:	movne	r2, ip
   1b7d8:	ldrb	r3, [r1, #1]!
   1b7dc:	cmp	r3, #0
   1b7e0:	bne	1b7c0 <__assert_fail@plt+0x9f6c>
   1b7e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b7e8:	push	{r4, lr}
   1b7ec:	mov	r4, r0
   1b7f0:	bl	11674 <strlen@plt>
   1b7f4:	cmp	r0, #1
   1b7f8:	popls	{r4, pc}
   1b7fc:	sub	r3, r0, #1
   1b800:	add	r2, r4, r3
   1b804:	ldrb	r1, [r4, r3]
   1b808:	cmp	r1, #47	; 0x2f
   1b80c:	popne	{r4, pc}
   1b810:	cmp	r3, #1
   1b814:	beq	1b828 <__assert_fail@plt+0x9fd4>
   1b818:	ldrb	r1, [r2, #-1]!
   1b81c:	sub	r0, r3, #1
   1b820:	cmp	r1, #47	; 0x2f
   1b824:	beq	1b830 <__assert_fail@plt+0x9fdc>
   1b828:	mov	r0, r3
   1b82c:	pop	{r4, pc}
   1b830:	mov	r3, r0
   1b834:	b	1b810 <__assert_fail@plt+0x9fbc>
   1b838:	ldr	r0, [r0]
   1b83c:	cmp	r0, #0
   1b840:	bxlt	lr
   1b844:	push	{r4, lr}
   1b848:	bl	11830 <close@plt>
   1b84c:	cmp	r0, #0
   1b850:	popeq	{r4, pc}
   1b854:	ldr	r3, [pc, #12]	; 1b868 <__assert_fail@plt+0xa014>
   1b858:	mov	r2, #64	; 0x40
   1b85c:	ldr	r1, [pc, #8]	; 1b86c <__assert_fail@plt+0xa018>
   1b860:	ldr	r0, [pc, #8]	; 1b870 <__assert_fail@plt+0xa01c>
   1b864:	bl	11854 <__assert_fail@plt>
   1b868:	andeq	lr, r1, r4, ror fp
   1b86c:	andeq	lr, r1, ip, lsl #23
   1b870:	andeq	lr, r1, r0, lsr #23
   1b874:	push	{r4, r5, r6, lr}
   1b878:	mov	r2, #18688	; 0x4900
   1b87c:	mov	r4, r0
   1b880:	ldr	r0, [r0]
   1b884:	bl	11698 <openat64@plt>
   1b888:	subs	r5, r0, #0
   1b88c:	blt	1b8a4 <__assert_fail@plt+0xa050>
   1b890:	mov	r0, r4
   1b894:	bl	1b838 <__assert_fail@plt+0x9fe4>
   1b898:	str	r5, [r4]
   1b89c:	mov	r0, #0
   1b8a0:	pop	{r4, r5, r6, pc}
   1b8a4:	mvn	r0, #0
   1b8a8:	pop	{r4, r5, r6, pc}
   1b8ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8b0:	sub	sp, sp, #20
   1b8b4:	mov	r6, r0
   1b8b8:	bl	11524 <chdir@plt>
   1b8bc:	subs	r4, r0, #0
   1b8c0:	beq	1b8d8 <__assert_fail@plt+0xa084>
   1b8c4:	bl	116b0 <__errno_location@plt>
   1b8c8:	ldr	r5, [r0]
   1b8cc:	str	r0, [sp, #4]
   1b8d0:	cmp	r5, #36	; 0x24
   1b8d4:	beq	1b8e4 <__assert_fail@plt+0xa090>
   1b8d8:	mov	r0, r4
   1b8dc:	add	sp, sp, #20
   1b8e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8e4:	mov	r0, r6
   1b8e8:	bl	11674 <strlen@plt>
   1b8ec:	mvn	r3, #99	; 0x63
   1b8f0:	str	r3, [sp, #12]
   1b8f4:	subs	r4, r0, #0
   1b8f8:	beq	1bafc <__assert_fail@plt+0xa2a8>
   1b8fc:	cmp	r4, #4096	; 0x1000
   1b900:	bcc	1bb10 <__assert_fail@plt+0xa2bc>
   1b904:	ldr	r1, [pc, #536]	; 1bb24 <__assert_fail@plt+0xa2d0>
   1b908:	mov	r0, r6
   1b90c:	bl	11848 <strspn@plt>
   1b910:	cmp	r0, #2
   1b914:	mov	fp, r0
   1b918:	beq	1b9dc <__assert_fail@plt+0xa188>
   1b91c:	cmp	r0, #0
   1b920:	moveq	fp, r6
   1b924:	bne	1baa0 <__assert_fail@plt+0xa24c>
   1b928:	ldrb	r2, [fp]
   1b92c:	cmp	r2, #47	; 0x2f
   1b930:	beq	1bad4 <__assert_fail@plt+0xa280>
   1b934:	add	r6, r6, r4
   1b938:	cmp	fp, r6
   1b93c:	bhi	1bae8 <__assert_fail@plt+0xa294>
   1b940:	ldr	r4, [pc, #480]	; 1bb28 <__assert_fail@plt+0xa2d4>
   1b944:	sub	r2, r6, fp
   1b948:	cmp	r2, r4
   1b94c:	addle	r7, sp, #12
   1b950:	ble	1ba34 <__assert_fail@plt+0xa1e0>
   1b954:	mov	r8, #4096	; 0x1000
   1b958:	mov	r5, #47	; 0x2f
   1b95c:	mov	r9, #0
   1b960:	b	1b9b0 <__assert_fail@plt+0xa15c>
   1b964:	sub	r1, sl, fp
   1b968:	cmp	r1, r4
   1b96c:	strb	r9, [sl]
   1b970:	bgt	1bac0 <__assert_fail@plt+0xa26c>
   1b974:	mov	r1, fp
   1b978:	add	r0, sp, #12
   1b97c:	bl	1b874 <__assert_fail@plt+0xa020>
   1b980:	add	r7, sp, #12
   1b984:	strb	r5, [sl]
   1b988:	cmp	r0, #0
   1b98c:	bne	1ba50 <__assert_fail@plt+0xa1fc>
   1b990:	add	fp, sl, #1
   1b994:	mov	r0, fp
   1b998:	ldr	r1, [pc, #388]	; 1bb24 <__assert_fail@plt+0xa2d0>
   1b99c:	bl	11848 <strspn@plt>
   1b9a0:	add	fp, fp, r0
   1b9a4:	sub	r2, r6, fp
   1b9a8:	cmp	r2, r4
   1b9ac:	ble	1ba34 <__assert_fail@plt+0xa1e0>
   1b9b0:	mov	r2, r8
   1b9b4:	mov	r1, r5
   1b9b8:	mov	r0, fp
   1b9bc:	bl	116a4 <memrchr@plt>
   1b9c0:	subs	sl, r0, #0
   1b9c4:	bne	1b964 <__assert_fail@plt+0xa110>
   1b9c8:	ldr	r2, [sp, #4]
   1b9cc:	mov	r3, #36	; 0x24
   1b9d0:	mvn	r4, #0
   1b9d4:	str	r3, [r2]
   1b9d8:	b	1b8d8 <__assert_fail@plt+0xa084>
   1b9dc:	sub	r2, r4, #3
   1b9e0:	mov	r1, #47	; 0x2f
   1b9e4:	add	r0, r6, #3
   1b9e8:	bl	11710 <memchr@plt>
   1b9ec:	subs	r8, r0, #0
   1b9f0:	beq	1ba90 <__assert_fail@plt+0xa23c>
   1b9f4:	mov	r3, #0
   1b9f8:	add	r7, sp, #12
   1b9fc:	strb	r3, [r8]
   1ba00:	mov	r0, r7
   1ba04:	mov	r1, r6
   1ba08:	bl	1b874 <__assert_fail@plt+0xa020>
   1ba0c:	mov	r3, #47	; 0x2f
   1ba10:	strb	r3, [r8]
   1ba14:	cmp	r0, #0
   1ba18:	bne	1ba50 <__assert_fail@plt+0xa1fc>
   1ba1c:	add	r8, r8, #1
   1ba20:	mov	r0, r8
   1ba24:	ldr	r1, [pc, #248]	; 1bb24 <__assert_fail@plt+0xa2d0>
   1ba28:	bl	11848 <strspn@plt>
   1ba2c:	add	fp, r8, r0
   1ba30:	b	1b928 <__assert_fail@plt+0xa0d4>
   1ba34:	cmp	r6, fp
   1ba38:	bls	1ba74 <__assert_fail@plt+0xa220>
   1ba3c:	mov	r1, fp
   1ba40:	mov	r0, r7
   1ba44:	bl	1b874 <__assert_fail@plt+0xa020>
   1ba48:	cmp	r0, #0
   1ba4c:	beq	1ba74 <__assert_fail@plt+0xa220>
   1ba50:	ldr	r6, [sp, #4]
   1ba54:	mov	r0, r7
   1ba58:	mvn	r4, #0
   1ba5c:	ldr	r5, [r6]
   1ba60:	bl	1b838 <__assert_fail@plt+0x9fe4>
   1ba64:	mov	r0, r4
   1ba68:	str	r5, [r6]
   1ba6c:	add	sp, sp, #20
   1ba70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba74:	ldr	r0, [sp, #12]
   1ba78:	bl	117b8 <fchdir@plt>
   1ba7c:	subs	r4, r0, #0
   1ba80:	bne	1ba50 <__assert_fail@plt+0xa1fc>
   1ba84:	mov	r0, r7
   1ba88:	bl	1b838 <__assert_fail@plt+0x9fe4>
   1ba8c:	b	1b8d8 <__assert_fail@plt+0xa084>
   1ba90:	ldr	r3, [sp, #4]
   1ba94:	mvn	r4, #0
   1ba98:	str	r5, [r3]
   1ba9c:	b	1b8d8 <__assert_fail@plt+0xa084>
   1baa0:	add	r7, sp, #12
   1baa4:	mov	r0, r7
   1baa8:	ldr	r1, [pc, #116]	; 1bb24 <__assert_fail@plt+0xa2d0>
   1baac:	bl	1b874 <__assert_fail@plt+0xa020>
   1bab0:	cmp	r0, #0
   1bab4:	addeq	fp, r6, fp
   1bab8:	beq	1b928 <__assert_fail@plt+0xa0d4>
   1babc:	b	1ba50 <__assert_fail@plt+0xa1fc>
   1bac0:	ldr	r3, [pc, #100]	; 1bb2c <__assert_fail@plt+0xa2d8>
   1bac4:	mov	r2, #179	; 0xb3
   1bac8:	ldr	r1, [pc, #96]	; 1bb30 <__assert_fail@plt+0xa2dc>
   1bacc:	ldr	r0, [pc, #96]	; 1bb34 <__assert_fail@plt+0xa2e0>
   1bad0:	bl	11854 <__assert_fail@plt>
   1bad4:	ldr	r3, [pc, #80]	; 1bb2c <__assert_fail@plt+0xa2d8>
   1bad8:	mov	r2, #162	; 0xa2
   1badc:	ldr	r1, [pc, #76]	; 1bb30 <__assert_fail@plt+0xa2dc>
   1bae0:	ldr	r0, [pc, #80]	; 1bb38 <__assert_fail@plt+0xa2e4>
   1bae4:	bl	11854 <__assert_fail@plt>
   1bae8:	ldr	r3, [pc, #60]	; 1bb2c <__assert_fail@plt+0xa2d8>
   1baec:	mov	r2, #163	; 0xa3
   1baf0:	ldr	r1, [pc, #56]	; 1bb30 <__assert_fail@plt+0xa2dc>
   1baf4:	ldr	r0, [pc, #64]	; 1bb3c <__assert_fail@plt+0xa2e8>
   1baf8:	bl	11854 <__assert_fail@plt>
   1bafc:	ldr	r3, [pc, #40]	; 1bb2c <__assert_fail@plt+0xa2d8>
   1bb00:	mov	r2, #126	; 0x7e
   1bb04:	ldr	r1, [pc, #36]	; 1bb30 <__assert_fail@plt+0xa2dc>
   1bb08:	ldr	r0, [pc, #48]	; 1bb40 <__assert_fail@plt+0xa2ec>
   1bb0c:	bl	11854 <__assert_fail@plt>
   1bb10:	ldr	r3, [pc, #20]	; 1bb2c <__assert_fail@plt+0xa2d8>
   1bb14:	mov	r2, #127	; 0x7f
   1bb18:	ldr	r1, [pc, #16]	; 1bb30 <__assert_fail@plt+0xa2dc>
   1bb1c:	ldr	r0, [pc, #32]	; 1bb44 <__assert_fail@plt+0xa2f0>
   1bb20:	bl	11854 <__assert_fail@plt>
   1bb24:	andeq	lr, r1, r4, asr #23
   1bb28:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1bb2c:	andeq	lr, r1, r0, lsl #23
   1bb30:	andeq	lr, r1, ip, lsl #23
   1bb34:	andeq	lr, r1, r4, ror #23
   1bb38:	andeq	lr, r1, r8, asr #23
   1bb3c:	ldrdeq	lr, [r1], -r4
   1bb40:			; <UNDEFINED> instruction: 0x0001ebb0
   1bb44:			; <UNDEFINED> instruction: 0x0001ebb8
   1bb48:	push	{r4, r5, r6, lr}
   1bb4c:	mov	r4, r0
   1bb50:	bl	11590 <__fpending@plt>
   1bb54:	ldr	r5, [r4]
   1bb58:	and	r5, r5, #32
   1bb5c:	mov	r6, r0
   1bb60:	mov	r0, r4
   1bb64:	bl	1bbc4 <__assert_fail@plt+0xa370>
   1bb68:	cmp	r5, #0
   1bb6c:	mov	r4, r0
   1bb70:	bne	1bb90 <__assert_fail@plt+0xa33c>
   1bb74:	cmp	r0, #0
   1bb78:	beq	1bb88 <__assert_fail@plt+0xa334>
   1bb7c:	cmp	r6, #0
   1bb80:	beq	1bbac <__assert_fail@plt+0xa358>
   1bb84:	mvn	r4, #0
   1bb88:	mov	r0, r4
   1bb8c:	pop	{r4, r5, r6, pc}
   1bb90:	cmp	r0, #0
   1bb94:	bne	1bb84 <__assert_fail@plt+0xa330>
   1bb98:	bl	116b0 <__errno_location@plt>
   1bb9c:	str	r4, [r0]
   1bba0:	mvn	r4, #0
   1bba4:	mov	r0, r4
   1bba8:	pop	{r4, r5, r6, pc}
   1bbac:	bl	116b0 <__errno_location@plt>
   1bbb0:	ldr	r4, [r0]
   1bbb4:	subs	r4, r4, #9
   1bbb8:	mvnne	r4, #0
   1bbbc:	mov	r0, r4
   1bbc0:	pop	{r4, r5, r6, pc}
   1bbc4:	push	{r4, r5, lr}
   1bbc8:	sub	sp, sp, #12
   1bbcc:	mov	r4, r0
   1bbd0:	bl	116f8 <fileno@plt>
   1bbd4:	cmp	r0, #0
   1bbd8:	mov	r0, r4
   1bbdc:	blt	1bc58 <__assert_fail@plt+0xa404>
   1bbe0:	bl	11608 <__freading@plt>
   1bbe4:	cmp	r0, #0
   1bbe8:	bne	1bc24 <__assert_fail@plt+0xa3d0>
   1bbec:	mov	r0, r4
   1bbf0:	bl	1bc9c <__assert_fail@plt+0xa448>
   1bbf4:	cmp	r0, #0
   1bbf8:	beq	1bc54 <__assert_fail@plt+0xa400>
   1bbfc:	bl	116b0 <__errno_location@plt>
   1bc00:	mov	r5, r0
   1bc04:	mov	r0, r4
   1bc08:	ldr	r4, [r5]
   1bc0c:	bl	1171c <fclose@plt>
   1bc10:	cmp	r4, #0
   1bc14:	mvnne	r0, #0
   1bc18:	strne	r4, [r5]
   1bc1c:	add	sp, sp, #12
   1bc20:	pop	{r4, r5, pc}
   1bc24:	mov	r0, r4
   1bc28:	bl	116f8 <fileno@plt>
   1bc2c:	mov	r3, #1
   1bc30:	str	r3, [sp]
   1bc34:	mov	r2, #0
   1bc38:	mov	r3, #0
   1bc3c:	bl	11560 <lseek64@plt>
   1bc40:	mvn	r3, #0
   1bc44:	mvn	r2, #0
   1bc48:	cmp	r1, r3
   1bc4c:	cmpeq	r0, r2
   1bc50:	bne	1bbec <__assert_fail@plt+0xa398>
   1bc54:	mov	r0, r4
   1bc58:	add	sp, sp, #12
   1bc5c:	pop	{r4, r5, lr}
   1bc60:	b	1171c <fclose@plt>
   1bc64:	push	{r1, r2, r3}
   1bc68:	push	{lr}		; (str lr, [sp, #-4]!)
   1bc6c:	sub	sp, sp, #8
   1bc70:	ldr	r1, [sp, #12]
   1bc74:	ands	r2, r1, #64	; 0x40
   1bc78:	addne	r3, sp, #16
   1bc7c:	ldrne	r2, [sp, #16]
   1bc80:	strne	r3, [sp, #4]
   1bc84:	bl	115c0 <open64@plt>
   1bc88:	bl	1be70 <__assert_fail@plt+0xa61c>
   1bc8c:	add	sp, sp, #8
   1bc90:	pop	{lr}		; (ldr lr, [sp], #4)
   1bc94:	add	sp, sp, #12
   1bc98:	bx	lr
   1bc9c:	push	{r4, lr}
   1bca0:	subs	r4, r0, #0
   1bca4:	sub	sp, sp, #8
   1bca8:	beq	1bcc4 <__assert_fail@plt+0xa470>
   1bcac:	bl	11608 <__freading@plt>
   1bcb0:	cmp	r0, #0
   1bcb4:	beq	1bcc4 <__assert_fail@plt+0xa470>
   1bcb8:	ldr	r3, [r4]
   1bcbc:	tst	r3, #256	; 0x100
   1bcc0:	bne	1bcd4 <__assert_fail@plt+0xa480>
   1bcc4:	mov	r0, r4
   1bcc8:	add	sp, sp, #8
   1bccc:	pop	{r4, lr}
   1bcd0:	b	11494 <fflush@plt>
   1bcd4:	mov	r3, #1
   1bcd8:	str	r3, [sp]
   1bcdc:	mov	r2, #0
   1bce0:	mov	r3, #0
   1bce4:	mov	r0, r4
   1bce8:	bl	1bcfc <__assert_fail@plt+0xa4a8>
   1bcec:	mov	r0, r4
   1bcf0:	add	sp, sp, #8
   1bcf4:	pop	{r4, lr}
   1bcf8:	b	11494 <fflush@plt>
   1bcfc:	push	{r4, r5, r6, r7, r8, lr}
   1bd00:	sub	sp, sp, #8
   1bd04:	ldmib	r0, {ip, lr}
   1bd08:	mov	r4, r0
   1bd0c:	ldr	r5, [sp, #32]
   1bd10:	cmp	lr, ip
   1bd14:	beq	1bd2c <__assert_fail@plt+0xa4d8>
   1bd18:	str	r5, [sp, #32]
   1bd1c:	mov	r0, r4
   1bd20:	add	sp, sp, #8
   1bd24:	pop	{r4, r5, r6, r7, r8, lr}
   1bd28:	b	11728 <fseeko64@plt>
   1bd2c:	ldr	lr, [r0, #20]
   1bd30:	ldr	ip, [r0, #16]
   1bd34:	cmp	lr, ip
   1bd38:	bne	1bd18 <__assert_fail@plt+0xa4c4>
   1bd3c:	ldr	r8, [r0, #36]	; 0x24
   1bd40:	cmp	r8, #0
   1bd44:	bne	1bd18 <__assert_fail@plt+0xa4c4>
   1bd48:	mov	r6, r2
   1bd4c:	mov	r7, r3
   1bd50:	bl	116f8 <fileno@plt>
   1bd54:	mov	r2, r6
   1bd58:	mov	r3, r7
   1bd5c:	str	r5, [sp]
   1bd60:	bl	11560 <lseek64@plt>
   1bd64:	mvn	r3, #0
   1bd68:	mvn	r2, #0
   1bd6c:	cmp	r1, r3
   1bd70:	cmpeq	r0, r2
   1bd74:	beq	1bd94 <__assert_fail@plt+0xa540>
   1bd78:	ldr	r3, [r4]
   1bd7c:	strd	r0, [r4, #80]	; 0x50
   1bd80:	mov	r0, r8
   1bd84:	bic	r3, r3, #16
   1bd88:	str	r3, [r4]
   1bd8c:	add	sp, sp, #8
   1bd90:	pop	{r4, r5, r6, r7, r8, pc}
   1bd94:	mvn	r0, #0
   1bd98:	b	1bd8c <__assert_fail@plt+0xa538>
   1bd9c:	push	{r4, lr}
   1bda0:	mov	r0, #14
   1bda4:	bl	11788 <nl_langinfo@plt>
   1bda8:	cmp	r0, #0
   1bdac:	beq	1bdc4 <__assert_fail@plt+0xa570>
   1bdb0:	ldrb	r2, [r0]
   1bdb4:	ldr	r3, [pc, #16]	; 1bdcc <__assert_fail@plt+0xa578>
   1bdb8:	cmp	r2, #0
   1bdbc:	moveq	r0, r3
   1bdc0:	pop	{r4, pc}
   1bdc4:	ldr	r0, [pc]	; 1bdcc <__assert_fail@plt+0xa578>
   1bdc8:	pop	{r4, pc}
   1bdcc:	strdeq	lr, [r1], -r8
   1bdd0:	push	{r4, r5, r6, r7, lr}
   1bdd4:	subs	r6, r0, #0
   1bdd8:	sub	sp, sp, #12
   1bddc:	addeq	r6, sp, #4
   1bde0:	mov	r0, r6
   1bde4:	mov	r5, r2
   1bde8:	mov	r7, r1
   1bdec:	bl	1159c <mbrtowc@plt>
   1bdf0:	cmp	r5, #0
   1bdf4:	cmnne	r0, #3
   1bdf8:	mov	r4, r0
   1bdfc:	bls	1be18 <__assert_fail@plt+0xa5c4>
   1be00:	mov	r0, #0
   1be04:	bl	1c014 <__assert_fail@plt+0xa7c0>
   1be08:	cmp	r0, #0
   1be0c:	moveq	r4, #1
   1be10:	ldrbeq	r3, [r7]
   1be14:	streq	r3, [r6]
   1be18:	mov	r0, r4
   1be1c:	add	sp, sp, #12
   1be20:	pop	{r4, r5, r6, r7, pc}
   1be24:	push	{r4, r5, r6, lr}
   1be28:	subs	r4, r2, #0
   1be2c:	mov	r6, r0
   1be30:	mov	r5, r1
   1be34:	beq	1be60 <__assert_fail@plt+0xa60c>
   1be38:	mov	r1, r4
   1be3c:	mvn	r0, #0
   1be40:	bl	1c2e8 <__assert_fail@plt+0xaa94>
   1be44:	cmp	r0, r5
   1be48:	bcs	1be60 <__assert_fail@plt+0xa60c>
   1be4c:	bl	116b0 <__errno_location@plt>
   1be50:	mov	r3, #12
   1be54:	str	r3, [r0]
   1be58:	mov	r0, #0
   1be5c:	pop	{r4, r5, r6, pc}
   1be60:	mul	r1, r5, r4
   1be64:	mov	r0, r6
   1be68:	pop	{r4, r5, r6, lr}
   1be6c:	b	1aec0 <__assert_fail@plt+0x966c>
   1be70:	cmp	r0, #2
   1be74:	push	{r4, r5, r6, r7, r8, lr}
   1be78:	mov	r4, r0
   1be7c:	bhi	1bea4 <__assert_fail@plt+0xa650>
   1be80:	bl	1c108 <__assert_fail@plt+0xa8b4>
   1be84:	mov	r7, r0
   1be88:	bl	116b0 <__errno_location@plt>
   1be8c:	mov	r5, r0
   1be90:	mov	r0, r4
   1be94:	ldr	r6, [r5]
   1be98:	mov	r4, r7
   1be9c:	bl	11830 <close@plt>
   1bea0:	str	r6, [r5]
   1bea4:	mov	r0, r4
   1bea8:	pop	{r4, r5, r6, r7, r8, pc}
   1beac:	push	{r4, r5, r6, r7, r8, r9, lr}
   1beb0:	sub	sp, sp, #12
   1beb4:	subs	r7, r0, #0
   1beb8:	str	r1, [sp, #4]
   1bebc:	beq	1bf5c <__assert_fail@plt+0xa708>
   1bec0:	mov	r9, r1
   1bec4:	mov	r5, r1
   1bec8:	mov	r6, r7
   1becc:	mov	r4, #0
   1bed0:	add	r5, r5, #4
   1bed4:	str	r5, [sp, #4]
   1bed8:	ldr	r0, [r5, #-4]
   1bedc:	bl	11674 <strlen@plt>
   1bee0:	adds	r4, r0, r4
   1bee4:	mvncs	r4, #0
   1bee8:	subs	r6, r6, #1
   1beec:	bne	1bed0 <__assert_fail@plt+0xa67c>
   1bef0:	cmp	r4, #0
   1bef4:	blt	1bf4c <__assert_fail@plt+0xa6f8>
   1bef8:	add	r0, r4, #1
   1befc:	bl	1a860 <__assert_fail@plt+0x900c>
   1bf00:	sub	r9, r9, #4
   1bf04:	mov	r6, r0
   1bf08:	mov	r4, r0
   1bf0c:	ldr	r8, [r9, #4]!
   1bf10:	mov	r0, r8
   1bf14:	bl	11674 <strlen@plt>
   1bf18:	mov	r1, r8
   1bf1c:	mov	r5, r0
   1bf20:	mov	r2, r0
   1bf24:	mov	r0, r4
   1bf28:	bl	114b8 <memcpy@plt>
   1bf2c:	subs	r7, r7, #1
   1bf30:	add	r4, r4, r5
   1bf34:	bne	1bf0c <__assert_fail@plt+0xa6b8>
   1bf38:	mov	r3, #0
   1bf3c:	strb	r3, [r4]
   1bf40:	mov	r0, r6
   1bf44:	add	sp, sp, #12
   1bf48:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1bf4c:	bl	116b0 <__errno_location@plt>
   1bf50:	mov	r3, #75	; 0x4b
   1bf54:	str	r3, [r0]
   1bf58:	b	1bf40 <__assert_fail@plt+0xa6ec>
   1bf5c:	mov	r0, #1
   1bf60:	bl	1a860 <__assert_fail@plt+0x900c>
   1bf64:	mov	r4, r0
   1bf68:	mov	r6, r0
   1bf6c:	b	1bf38 <__assert_fail@plt+0xa6e4>
   1bf70:	push	{r4, lr}
   1bf74:	sub	sp, sp, #8
   1bf78:	ldrb	r4, [r0]
   1bf7c:	cmp	r4, #0
   1bf80:	beq	1bfcc <__assert_fail@plt+0xa778>
   1bf84:	cmp	r4, #37	; 0x25
   1bf88:	bne	1bfdc <__assert_fail@plt+0xa788>
   1bf8c:	ldrb	r3, [r0, #1]
   1bf90:	cmp	r3, #115	; 0x73
   1bf94:	bne	1bfdc <__assert_fail@plt+0xa788>
   1bf98:	mov	ip, r0
   1bf9c:	mov	r4, #0
   1bfa0:	b	1bfbc <__assert_fail@plt+0xa768>
   1bfa4:	cmp	lr, #37	; 0x25
   1bfa8:	bne	1bfdc <__assert_fail@plt+0xa788>
   1bfac:	add	ip, ip, #2
   1bfb0:	ldrb	lr, [ip, #1]
   1bfb4:	cmp	lr, #115	; 0x73
   1bfb8:	bne	1bfdc <__assert_fail@plt+0xa788>
   1bfbc:	ldrb	lr, [ip, #2]
   1bfc0:	add	r4, r4, #1
   1bfc4:	cmp	lr, #0
   1bfc8:	bne	1bfa4 <__assert_fail@plt+0xa750>
   1bfcc:	mov	r0, r4
   1bfd0:	bl	1beac <__assert_fail@plt+0xa658>
   1bfd4:	add	sp, sp, #8
   1bfd8:	pop	{r4, pc}
   1bfdc:	mov	r3, r1
   1bfe0:	mov	r2, r0
   1bfe4:	mov	r1, #1
   1bfe8:	add	r0, sp, #4
   1bfec:	bl	116d4 <__vasprintf_chk@plt>
   1bff0:	cmp	r0, #0
   1bff4:	ldrge	r0, [sp, #4]
   1bff8:	bge	1bfd4 <__assert_fail@plt+0xa780>
   1bffc:	bl	116b0 <__errno_location@plt>
   1c000:	ldr	r3, [r0]
   1c004:	cmp	r3, #12
   1c008:	movne	r0, #0
   1c00c:	bne	1bfd4 <__assert_fail@plt+0xa780>
   1c010:	bl	1ada8 <__assert_fail@plt+0x9554>
   1c014:	push	{lr}		; (str lr, [sp, #-4]!)
   1c018:	sub	sp, sp, #268	; 0x10c
   1c01c:	add	r1, sp, #4
   1c020:	ldr	r2, [pc, #60]	; 1c064 <__assert_fail@plt+0xa810>
   1c024:	bl	1c070 <__assert_fail@plt+0xa81c>
   1c028:	cmp	r0, #0
   1c02c:	movne	r0, #0
   1c030:	bne	1c05c <__assert_fail@plt+0xa808>
   1c034:	ldr	r1, [pc, #44]	; 1c068 <__assert_fail@plt+0xa814>
   1c038:	add	r0, sp, #4
   1c03c:	bl	11464 <strcmp@plt>
   1c040:	cmp	r0, #0
   1c044:	beq	1c05c <__assert_fail@plt+0xa808>
   1c048:	add	r0, sp, #4
   1c04c:	ldr	r1, [pc, #24]	; 1c06c <__assert_fail@plt+0xa818>
   1c050:	bl	11464 <strcmp@plt>
   1c054:	adds	r0, r0, #0
   1c058:	movne	r0, #1
   1c05c:	add	sp, sp, #268	; 0x10c
   1c060:	pop	{pc}		; (ldr pc, [sp], #4)
   1c064:	andeq	r0, r0, r1, lsl #2
   1c068:	andeq	lr, r1, r0, lsl #24
   1c06c:	andeq	lr, r1, r4, lsl #24
   1c070:	push	{r4, r5, r6, lr}
   1c074:	mov	r5, r1
   1c078:	mov	r1, #0
   1c07c:	mov	r4, r2
   1c080:	bl	11764 <setlocale@plt>
   1c084:	subs	r6, r0, #0
   1c088:	beq	1c0e4 <__assert_fail@plt+0xa890>
   1c08c:	bl	11674 <strlen@plt>
   1c090:	cmp	r4, r0
   1c094:	bhi	1c0cc <__assert_fail@plt+0xa878>
   1c098:	cmp	r4, #0
   1c09c:	bne	1c0a8 <__assert_fail@plt+0xa854>
   1c0a0:	mov	r0, #34	; 0x22
   1c0a4:	pop	{r4, r5, r6, pc}
   1c0a8:	sub	r4, r4, #1
   1c0ac:	mov	r1, r6
   1c0b0:	mov	r2, r4
   1c0b4:	mov	r0, r5
   1c0b8:	bl	114b8 <memcpy@plt>
   1c0bc:	mov	r3, #0
   1c0c0:	strb	r3, [r5, r4]
   1c0c4:	mov	r0, #34	; 0x22
   1c0c8:	pop	{r4, r5, r6, pc}
   1c0cc:	add	r2, r0, #1
   1c0d0:	mov	r1, r6
   1c0d4:	mov	r0, r5
   1c0d8:	bl	114b8 <memcpy@plt>
   1c0dc:	mov	r0, #0
   1c0e0:	pop	{r4, r5, r6, pc}
   1c0e4:	cmp	r4, #0
   1c0e8:	beq	1c0f8 <__assert_fail@plt+0xa8a4>
   1c0ec:	strb	r6, [r5]
   1c0f0:	mov	r0, #22
   1c0f4:	pop	{r4, r5, r6, pc}
   1c0f8:	mov	r0, #22
   1c0fc:	pop	{r4, r5, r6, pc}
   1c100:	mov	r1, #0
   1c104:	b	11764 <setlocale@plt>
   1c108:	mov	r2, #3
   1c10c:	mov	r1, #0
   1c110:	b	1c114 <__assert_fail@plt+0xa8c0>
   1c114:	push	{r1, r2, r3}
   1c118:	push	{r4, r5, r6, r7, lr}
   1c11c:	sub	sp, sp, #8
   1c120:	add	r3, sp, #32
   1c124:	ldr	r1, [sp, #28]
   1c128:	str	r3, [sp, #4]
   1c12c:	cmp	r1, #0
   1c130:	beq	1c1c8 <__assert_fail@plt+0xa974>
   1c134:	ldr	r2, [pc, #412]	; 1c2d8 <__assert_fail@plt+0xaa84>
   1c138:	mov	r5, r0
   1c13c:	cmp	r1, r2
   1c140:	bne	1c18c <__assert_fail@plt+0xa938>
   1c144:	ldr	r6, [pc, #400]	; 1c2dc <__assert_fail@plt+0xaa88>
   1c148:	ldr	r7, [r3]
   1c14c:	add	r2, sp, #36	; 0x24
   1c150:	ldr	r3, [r6]
   1c154:	str	r2, [sp, #4]
   1c158:	cmp	r3, #0
   1c15c:	mov	r2, r7
   1c160:	blt	1c28c <__assert_fail@plt+0xaa38>
   1c164:	bl	1174c <fcntl64@plt>
   1c168:	subs	r4, r0, #0
   1c16c:	blt	1c210 <__assert_fail@plt+0xa9bc>
   1c170:	mov	r3, #1
   1c174:	str	r3, [r6]
   1c178:	mov	r0, r4
   1c17c:	add	sp, sp, #8
   1c180:	pop	{r4, r5, r6, r7, lr}
   1c184:	add	sp, sp, #12
   1c188:	bx	lr
   1c18c:	cmp	r1, #11
   1c190:	beq	1c1b8 <__assert_fail@plt+0xa964>
   1c194:	bgt	1c1d8 <__assert_fail@plt+0xa984>
   1c198:	cmp	r1, #3
   1c19c:	beq	1c1b8 <__assert_fail@plt+0xa964>
   1c1a0:	ble	1c2cc <__assert_fail@plt+0xaa78>
   1c1a4:	cmp	r1, #8
   1c1a8:	beq	1c1f8 <__assert_fail@plt+0xa9a4>
   1c1ac:	ble	1c1f8 <__assert_fail@plt+0xa9a4>
   1c1b0:	cmp	r1, #9
   1c1b4:	bne	1c1f8 <__assert_fail@plt+0xa9a4>
   1c1b8:	mov	r0, r5
   1c1bc:	bl	1174c <fcntl64@plt>
   1c1c0:	mov	r4, r0
   1c1c4:	b	1c178 <__assert_fail@plt+0xa924>
   1c1c8:	ldr	r2, [sp, #32]
   1c1cc:	bl	1174c <fcntl64@plt>
   1c1d0:	mov	r4, r0
   1c1d4:	b	1c178 <__assert_fail@plt+0xa924>
   1c1d8:	ldr	r3, [pc, #256]	; 1c2e0 <__assert_fail@plt+0xaa8c>
   1c1dc:	cmp	r1, r3
   1c1e0:	bgt	1c2ac <__assert_fail@plt+0xaa58>
   1c1e4:	cmp	r1, r2
   1c1e8:	bge	1c1f8 <__assert_fail@plt+0xa9a4>
   1c1ec:	sub	r3, r3, #6
   1c1f0:	cmp	r1, r3
   1c1f4:	beq	1c1b8 <__assert_fail@plt+0xa964>
   1c1f8:	ldr	r3, [sp, #4]
   1c1fc:	mov	r0, r5
   1c200:	ldr	r2, [r3]
   1c204:	bl	1174c <fcntl64@plt>
   1c208:	mov	r4, r0
   1c20c:	b	1c178 <__assert_fail@plt+0xa924>
   1c210:	bl	116b0 <__errno_location@plt>
   1c214:	ldr	r3, [r0]
   1c218:	cmp	r3, #22
   1c21c:	bne	1c170 <__assert_fail@plt+0xa91c>
   1c220:	mov	r2, r7
   1c224:	mov	r0, r5
   1c228:	mov	r1, #0
   1c22c:	bl	1174c <fcntl64@plt>
   1c230:	subs	r4, r0, #0
   1c234:	blt	1c178 <__assert_fail@plt+0xa924>
   1c238:	mvn	r3, #0
   1c23c:	str	r3, [r6]
   1c240:	mov	r1, #1
   1c244:	mov	r0, r4
   1c248:	bl	1174c <fcntl64@plt>
   1c24c:	subs	r2, r0, #0
   1c250:	blt	1c26c <__assert_fail@plt+0xaa18>
   1c254:	orr	r2, r2, #1
   1c258:	mov	r1, #2
   1c25c:	mov	r0, r4
   1c260:	bl	1174c <fcntl64@plt>
   1c264:	cmn	r0, #1
   1c268:	bne	1c178 <__assert_fail@plt+0xa924>
   1c26c:	bl	116b0 <__errno_location@plt>
   1c270:	mov	r5, r0
   1c274:	mov	r0, r4
   1c278:	ldr	r6, [r5]
   1c27c:	mvn	r4, #0
   1c280:	bl	11830 <close@plt>
   1c284:	str	r6, [r5]
   1c288:	b	1c178 <__assert_fail@plt+0xa924>
   1c28c:	mov	r1, #0
   1c290:	bl	1174c <fcntl64@plt>
   1c294:	subs	r4, r0, #0
   1c298:	blt	1c178 <__assert_fail@plt+0xa924>
   1c29c:	ldr	r3, [r6]
   1c2a0:	cmn	r3, #1
   1c2a4:	beq	1c240 <__assert_fail@plt+0xa9ec>
   1c2a8:	b	1c178 <__assert_fail@plt+0xa924>
   1c2ac:	ldr	r3, [pc, #48]	; 1c2e4 <__assert_fail@plt+0xaa90>
   1c2b0:	cmp	r1, r3
   1c2b4:	beq	1c1f8 <__assert_fail@plt+0xa9a4>
   1c2b8:	blt	1c1b8 <__assert_fail@plt+0xa964>
   1c2bc:	add	r3, r3, #1
   1c2c0:	cmp	r1, r3
   1c2c4:	bne	1c1f8 <__assert_fail@plt+0xa9a4>
   1c2c8:	b	1c1b8 <__assert_fail@plt+0xa964>
   1c2cc:	cmp	r1, #1
   1c2d0:	bne	1c1f8 <__assert_fail@plt+0xa9a4>
   1c2d4:	b	1c1b8 <__assert_fail@plt+0xa964>
   1c2d8:	andeq	r0, r0, r6, lsl #8
   1c2dc:	andeq	pc, r2, ip, lsr #7
   1c2e0:	andeq	r0, r0, r7, lsl #8
   1c2e4:	andeq	r0, r0, r9, lsl #8
   1c2e8:	subs	r2, r1, #1
   1c2ec:	bxeq	lr
   1c2f0:	bcc	1c4c8 <__assert_fail@plt+0xac74>
   1c2f4:	cmp	r0, r1
   1c2f8:	bls	1c4ac <__assert_fail@plt+0xac58>
   1c2fc:	tst	r1, r2
   1c300:	beq	1c4b8 <__assert_fail@plt+0xac64>
   1c304:	clz	r3, r0
   1c308:	clz	r2, r1
   1c30c:	sub	r3, r2, r3
   1c310:	rsbs	r3, r3, #31
   1c314:	addne	r3, r3, r3, lsl #1
   1c318:	mov	r2, #0
   1c31c:	addne	pc, pc, r3, lsl #2
   1c320:	nop			; (mov r0, r0)
   1c324:	cmp	r0, r1, lsl #31
   1c328:	adc	r2, r2, r2
   1c32c:	subcs	r0, r0, r1, lsl #31
   1c330:	cmp	r0, r1, lsl #30
   1c334:	adc	r2, r2, r2
   1c338:	subcs	r0, r0, r1, lsl #30
   1c33c:	cmp	r0, r1, lsl #29
   1c340:	adc	r2, r2, r2
   1c344:	subcs	r0, r0, r1, lsl #29
   1c348:	cmp	r0, r1, lsl #28
   1c34c:	adc	r2, r2, r2
   1c350:	subcs	r0, r0, r1, lsl #28
   1c354:	cmp	r0, r1, lsl #27
   1c358:	adc	r2, r2, r2
   1c35c:	subcs	r0, r0, r1, lsl #27
   1c360:	cmp	r0, r1, lsl #26
   1c364:	adc	r2, r2, r2
   1c368:	subcs	r0, r0, r1, lsl #26
   1c36c:	cmp	r0, r1, lsl #25
   1c370:	adc	r2, r2, r2
   1c374:	subcs	r0, r0, r1, lsl #25
   1c378:	cmp	r0, r1, lsl #24
   1c37c:	adc	r2, r2, r2
   1c380:	subcs	r0, r0, r1, lsl #24
   1c384:	cmp	r0, r1, lsl #23
   1c388:	adc	r2, r2, r2
   1c38c:	subcs	r0, r0, r1, lsl #23
   1c390:	cmp	r0, r1, lsl #22
   1c394:	adc	r2, r2, r2
   1c398:	subcs	r0, r0, r1, lsl #22
   1c39c:	cmp	r0, r1, lsl #21
   1c3a0:	adc	r2, r2, r2
   1c3a4:	subcs	r0, r0, r1, lsl #21
   1c3a8:	cmp	r0, r1, lsl #20
   1c3ac:	adc	r2, r2, r2
   1c3b0:	subcs	r0, r0, r1, lsl #20
   1c3b4:	cmp	r0, r1, lsl #19
   1c3b8:	adc	r2, r2, r2
   1c3bc:	subcs	r0, r0, r1, lsl #19
   1c3c0:	cmp	r0, r1, lsl #18
   1c3c4:	adc	r2, r2, r2
   1c3c8:	subcs	r0, r0, r1, lsl #18
   1c3cc:	cmp	r0, r1, lsl #17
   1c3d0:	adc	r2, r2, r2
   1c3d4:	subcs	r0, r0, r1, lsl #17
   1c3d8:	cmp	r0, r1, lsl #16
   1c3dc:	adc	r2, r2, r2
   1c3e0:	subcs	r0, r0, r1, lsl #16
   1c3e4:	cmp	r0, r1, lsl #15
   1c3e8:	adc	r2, r2, r2
   1c3ec:	subcs	r0, r0, r1, lsl #15
   1c3f0:	cmp	r0, r1, lsl #14
   1c3f4:	adc	r2, r2, r2
   1c3f8:	subcs	r0, r0, r1, lsl #14
   1c3fc:	cmp	r0, r1, lsl #13
   1c400:	adc	r2, r2, r2
   1c404:	subcs	r0, r0, r1, lsl #13
   1c408:	cmp	r0, r1, lsl #12
   1c40c:	adc	r2, r2, r2
   1c410:	subcs	r0, r0, r1, lsl #12
   1c414:	cmp	r0, r1, lsl #11
   1c418:	adc	r2, r2, r2
   1c41c:	subcs	r0, r0, r1, lsl #11
   1c420:	cmp	r0, r1, lsl #10
   1c424:	adc	r2, r2, r2
   1c428:	subcs	r0, r0, r1, lsl #10
   1c42c:	cmp	r0, r1, lsl #9
   1c430:	adc	r2, r2, r2
   1c434:	subcs	r0, r0, r1, lsl #9
   1c438:	cmp	r0, r1, lsl #8
   1c43c:	adc	r2, r2, r2
   1c440:	subcs	r0, r0, r1, lsl #8
   1c444:	cmp	r0, r1, lsl #7
   1c448:	adc	r2, r2, r2
   1c44c:	subcs	r0, r0, r1, lsl #7
   1c450:	cmp	r0, r1, lsl #6
   1c454:	adc	r2, r2, r2
   1c458:	subcs	r0, r0, r1, lsl #6
   1c45c:	cmp	r0, r1, lsl #5
   1c460:	adc	r2, r2, r2
   1c464:	subcs	r0, r0, r1, lsl #5
   1c468:	cmp	r0, r1, lsl #4
   1c46c:	adc	r2, r2, r2
   1c470:	subcs	r0, r0, r1, lsl #4
   1c474:	cmp	r0, r1, lsl #3
   1c478:	adc	r2, r2, r2
   1c47c:	subcs	r0, r0, r1, lsl #3
   1c480:	cmp	r0, r1, lsl #2
   1c484:	adc	r2, r2, r2
   1c488:	subcs	r0, r0, r1, lsl #2
   1c48c:	cmp	r0, r1, lsl #1
   1c490:	adc	r2, r2, r2
   1c494:	subcs	r0, r0, r1, lsl #1
   1c498:	cmp	r0, r1
   1c49c:	adc	r2, r2, r2
   1c4a0:	subcs	r0, r0, r1
   1c4a4:	mov	r0, r2
   1c4a8:	bx	lr
   1c4ac:	moveq	r0, #1
   1c4b0:	movne	r0, #0
   1c4b4:	bx	lr
   1c4b8:	clz	r2, r1
   1c4bc:	rsb	r2, r2, #31
   1c4c0:	lsr	r0, r0, r2
   1c4c4:	bx	lr
   1c4c8:	cmp	r0, #0
   1c4cc:	mvnne	r0, #0
   1c4d0:	b	1c808 <__assert_fail@plt+0xafb4>
   1c4d4:	cmp	r1, #0
   1c4d8:	beq	1c4c8 <__assert_fail@plt+0xac74>
   1c4dc:	push	{r0, r1, lr}
   1c4e0:	bl	1c2e8 <__assert_fail@plt+0xaa94>
   1c4e4:	pop	{r1, r2, lr}
   1c4e8:	mul	r3, r2, r0
   1c4ec:	sub	r1, r1, r3
   1c4f0:	bx	lr
   1c4f4:	cmp	r1, #0
   1c4f8:	beq	1c704 <__assert_fail@plt+0xaeb0>
   1c4fc:	eor	ip, r0, r1
   1c500:	rsbmi	r1, r1, #0
   1c504:	subs	r2, r1, #1
   1c508:	beq	1c6d0 <__assert_fail@plt+0xae7c>
   1c50c:	movs	r3, r0
   1c510:	rsbmi	r3, r0, #0
   1c514:	cmp	r3, r1
   1c518:	bls	1c6dc <__assert_fail@plt+0xae88>
   1c51c:	tst	r1, r2
   1c520:	beq	1c6ec <__assert_fail@plt+0xae98>
   1c524:	clz	r2, r3
   1c528:	clz	r0, r1
   1c52c:	sub	r2, r0, r2
   1c530:	rsbs	r2, r2, #31
   1c534:	addne	r2, r2, r2, lsl #1
   1c538:	mov	r0, #0
   1c53c:	addne	pc, pc, r2, lsl #2
   1c540:	nop			; (mov r0, r0)
   1c544:	cmp	r3, r1, lsl #31
   1c548:	adc	r0, r0, r0
   1c54c:	subcs	r3, r3, r1, lsl #31
   1c550:	cmp	r3, r1, lsl #30
   1c554:	adc	r0, r0, r0
   1c558:	subcs	r3, r3, r1, lsl #30
   1c55c:	cmp	r3, r1, lsl #29
   1c560:	adc	r0, r0, r0
   1c564:	subcs	r3, r3, r1, lsl #29
   1c568:	cmp	r3, r1, lsl #28
   1c56c:	adc	r0, r0, r0
   1c570:	subcs	r3, r3, r1, lsl #28
   1c574:	cmp	r3, r1, lsl #27
   1c578:	adc	r0, r0, r0
   1c57c:	subcs	r3, r3, r1, lsl #27
   1c580:	cmp	r3, r1, lsl #26
   1c584:	adc	r0, r0, r0
   1c588:	subcs	r3, r3, r1, lsl #26
   1c58c:	cmp	r3, r1, lsl #25
   1c590:	adc	r0, r0, r0
   1c594:	subcs	r3, r3, r1, lsl #25
   1c598:	cmp	r3, r1, lsl #24
   1c59c:	adc	r0, r0, r0
   1c5a0:	subcs	r3, r3, r1, lsl #24
   1c5a4:	cmp	r3, r1, lsl #23
   1c5a8:	adc	r0, r0, r0
   1c5ac:	subcs	r3, r3, r1, lsl #23
   1c5b0:	cmp	r3, r1, lsl #22
   1c5b4:	adc	r0, r0, r0
   1c5b8:	subcs	r3, r3, r1, lsl #22
   1c5bc:	cmp	r3, r1, lsl #21
   1c5c0:	adc	r0, r0, r0
   1c5c4:	subcs	r3, r3, r1, lsl #21
   1c5c8:	cmp	r3, r1, lsl #20
   1c5cc:	adc	r0, r0, r0
   1c5d0:	subcs	r3, r3, r1, lsl #20
   1c5d4:	cmp	r3, r1, lsl #19
   1c5d8:	adc	r0, r0, r0
   1c5dc:	subcs	r3, r3, r1, lsl #19
   1c5e0:	cmp	r3, r1, lsl #18
   1c5e4:	adc	r0, r0, r0
   1c5e8:	subcs	r3, r3, r1, lsl #18
   1c5ec:	cmp	r3, r1, lsl #17
   1c5f0:	adc	r0, r0, r0
   1c5f4:	subcs	r3, r3, r1, lsl #17
   1c5f8:	cmp	r3, r1, lsl #16
   1c5fc:	adc	r0, r0, r0
   1c600:	subcs	r3, r3, r1, lsl #16
   1c604:	cmp	r3, r1, lsl #15
   1c608:	adc	r0, r0, r0
   1c60c:	subcs	r3, r3, r1, lsl #15
   1c610:	cmp	r3, r1, lsl #14
   1c614:	adc	r0, r0, r0
   1c618:	subcs	r3, r3, r1, lsl #14
   1c61c:	cmp	r3, r1, lsl #13
   1c620:	adc	r0, r0, r0
   1c624:	subcs	r3, r3, r1, lsl #13
   1c628:	cmp	r3, r1, lsl #12
   1c62c:	adc	r0, r0, r0
   1c630:	subcs	r3, r3, r1, lsl #12
   1c634:	cmp	r3, r1, lsl #11
   1c638:	adc	r0, r0, r0
   1c63c:	subcs	r3, r3, r1, lsl #11
   1c640:	cmp	r3, r1, lsl #10
   1c644:	adc	r0, r0, r0
   1c648:	subcs	r3, r3, r1, lsl #10
   1c64c:	cmp	r3, r1, lsl #9
   1c650:	adc	r0, r0, r0
   1c654:	subcs	r3, r3, r1, lsl #9
   1c658:	cmp	r3, r1, lsl #8
   1c65c:	adc	r0, r0, r0
   1c660:	subcs	r3, r3, r1, lsl #8
   1c664:	cmp	r3, r1, lsl #7
   1c668:	adc	r0, r0, r0
   1c66c:	subcs	r3, r3, r1, lsl #7
   1c670:	cmp	r3, r1, lsl #6
   1c674:	adc	r0, r0, r0
   1c678:	subcs	r3, r3, r1, lsl #6
   1c67c:	cmp	r3, r1, lsl #5
   1c680:	adc	r0, r0, r0
   1c684:	subcs	r3, r3, r1, lsl #5
   1c688:	cmp	r3, r1, lsl #4
   1c68c:	adc	r0, r0, r0
   1c690:	subcs	r3, r3, r1, lsl #4
   1c694:	cmp	r3, r1, lsl #3
   1c698:	adc	r0, r0, r0
   1c69c:	subcs	r3, r3, r1, lsl #3
   1c6a0:	cmp	r3, r1, lsl #2
   1c6a4:	adc	r0, r0, r0
   1c6a8:	subcs	r3, r3, r1, lsl #2
   1c6ac:	cmp	r3, r1, lsl #1
   1c6b0:	adc	r0, r0, r0
   1c6b4:	subcs	r3, r3, r1, lsl #1
   1c6b8:	cmp	r3, r1
   1c6bc:	adc	r0, r0, r0
   1c6c0:	subcs	r3, r3, r1
   1c6c4:	cmp	ip, #0
   1c6c8:	rsbmi	r0, r0, #0
   1c6cc:	bx	lr
   1c6d0:	teq	ip, r0
   1c6d4:	rsbmi	r0, r0, #0
   1c6d8:	bx	lr
   1c6dc:	movcc	r0, #0
   1c6e0:	asreq	r0, ip, #31
   1c6e4:	orreq	r0, r0, #1
   1c6e8:	bx	lr
   1c6ec:	clz	r2, r1
   1c6f0:	rsb	r2, r2, #31
   1c6f4:	cmp	ip, #0
   1c6f8:	lsr	r0, r3, r2
   1c6fc:	rsbmi	r0, r0, #0
   1c700:	bx	lr
   1c704:	cmp	r0, #0
   1c708:	mvngt	r0, #-2147483648	; 0x80000000
   1c70c:	movlt	r0, #-2147483648	; 0x80000000
   1c710:	b	1c808 <__assert_fail@plt+0xafb4>
   1c714:	cmp	r1, #0
   1c718:	beq	1c704 <__assert_fail@plt+0xaeb0>
   1c71c:	push	{r0, r1, lr}
   1c720:	bl	1c4fc <__assert_fail@plt+0xaca8>
   1c724:	pop	{r1, r2, lr}
   1c728:	mul	r3, r2, r0
   1c72c:	sub	r1, r1, r3
   1c730:	bx	lr
   1c734:	cmp	r3, #0
   1c738:	cmpeq	r2, #0
   1c73c:	bne	1c760 <__assert_fail@plt+0xaf0c>
   1c740:	cmp	r1, #0
   1c744:	movlt	r1, #-2147483648	; 0x80000000
   1c748:	movlt	r0, #0
   1c74c:	blt	1c75c <__assert_fail@plt+0xaf08>
   1c750:	cmpeq	r0, #0
   1c754:	mvnne	r1, #-2147483648	; 0x80000000
   1c758:	mvnne	r0, #0
   1c75c:	b	1c808 <__assert_fail@plt+0xafb4>
   1c760:	sub	sp, sp, #8
   1c764:	push	{sp, lr}
   1c768:	cmp	r1, #0
   1c76c:	blt	1c78c <__assert_fail@plt+0xaf38>
   1c770:	cmp	r3, #0
   1c774:	blt	1c7c0 <__assert_fail@plt+0xaf6c>
   1c778:	bl	1c818 <__assert_fail@plt+0xafc4>
   1c77c:	ldr	lr, [sp, #4]
   1c780:	add	sp, sp, #8
   1c784:	pop	{r2, r3}
   1c788:	bx	lr
   1c78c:	rsbs	r0, r0, #0
   1c790:	sbc	r1, r1, r1, lsl #1
   1c794:	cmp	r3, #0
   1c798:	blt	1c7e4 <__assert_fail@plt+0xaf90>
   1c79c:	bl	1c818 <__assert_fail@plt+0xafc4>
   1c7a0:	ldr	lr, [sp, #4]
   1c7a4:	add	sp, sp, #8
   1c7a8:	pop	{r2, r3}
   1c7ac:	rsbs	r0, r0, #0
   1c7b0:	sbc	r1, r1, r1, lsl #1
   1c7b4:	rsbs	r2, r2, #0
   1c7b8:	sbc	r3, r3, r3, lsl #1
   1c7bc:	bx	lr
   1c7c0:	rsbs	r2, r2, #0
   1c7c4:	sbc	r3, r3, r3, lsl #1
   1c7c8:	bl	1c818 <__assert_fail@plt+0xafc4>
   1c7cc:	ldr	lr, [sp, #4]
   1c7d0:	add	sp, sp, #8
   1c7d4:	pop	{r2, r3}
   1c7d8:	rsbs	r0, r0, #0
   1c7dc:	sbc	r1, r1, r1, lsl #1
   1c7e0:	bx	lr
   1c7e4:	rsbs	r2, r2, #0
   1c7e8:	sbc	r3, r3, r3, lsl #1
   1c7ec:	bl	1c818 <__assert_fail@plt+0xafc4>
   1c7f0:	ldr	lr, [sp, #4]
   1c7f4:	add	sp, sp, #8
   1c7f8:	pop	{r2, r3}
   1c7fc:	rsbs	r2, r2, #0
   1c800:	sbc	r3, r3, r3, lsl #1
   1c804:	bx	lr
   1c808:	push	{r1, lr}
   1c80c:	mov	r0, #8
   1c810:	bl	11434 <raise@plt>
   1c814:	pop	{r1, pc}
   1c818:	cmp	r1, r3
   1c81c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c820:	cmpeq	r0, r2
   1c824:	mov	r4, r0
   1c828:	mov	r5, r1
   1c82c:	ldr	r9, [sp, #28]
   1c830:	movcc	r0, #0
   1c834:	movcc	r1, #0
   1c838:	bcc	1c930 <__assert_fail@plt+0xb0dc>
   1c83c:	cmp	r3, #0
   1c840:	clzeq	ip, r2
   1c844:	clzne	ip, r3
   1c848:	addeq	ip, ip, #32
   1c84c:	cmp	r5, #0
   1c850:	clzeq	r1, r4
   1c854:	addeq	r1, r1, #32
   1c858:	clzne	r1, r5
   1c85c:	sub	ip, ip, r1
   1c860:	sub	lr, ip, #32
   1c864:	lsl	r7, r3, ip
   1c868:	rsb	r8, ip, #32
   1c86c:	orr	r7, r7, r2, lsl lr
   1c870:	orr	r7, r7, r2, lsr r8
   1c874:	lsl	r6, r2, ip
   1c878:	cmp	r5, r7
   1c87c:	cmpeq	r4, r6
   1c880:	movcc	r0, #0
   1c884:	movcc	r1, #0
   1c888:	bcc	1c8a4 <__assert_fail@plt+0xb050>
   1c88c:	mov	r3, #1
   1c890:	subs	r4, r4, r6
   1c894:	lsl	r1, r3, lr
   1c898:	lsl	r0, r3, ip
   1c89c:	orr	r1, r1, r3, lsr r8
   1c8a0:	sbc	r5, r5, r7
   1c8a4:	cmp	ip, #0
   1c8a8:	beq	1c930 <__assert_fail@plt+0xb0dc>
   1c8ac:	lsrs	r3, r7, #1
   1c8b0:	rrx	r2, r6
   1c8b4:	mov	r6, ip
   1c8b8:	b	1c8dc <__assert_fail@plt+0xb088>
   1c8bc:	subs	r4, r4, r2
   1c8c0:	sbc	r5, r5, r3
   1c8c4:	adds	r4, r4, r4
   1c8c8:	adc	r5, r5, r5
   1c8cc:	adds	r4, r4, #1
   1c8d0:	adc	r5, r5, #0
   1c8d4:	subs	r6, r6, #1
   1c8d8:	beq	1c8f8 <__assert_fail@plt+0xb0a4>
   1c8dc:	cmp	r5, r3
   1c8e0:	cmpeq	r4, r2
   1c8e4:	bcs	1c8bc <__assert_fail@plt+0xb068>
   1c8e8:	adds	r4, r4, r4
   1c8ec:	adc	r5, r5, r5
   1c8f0:	subs	r6, r6, #1
   1c8f4:	bne	1c8dc <__assert_fail@plt+0xb088>
   1c8f8:	lsr	r6, r4, ip
   1c8fc:	lsr	r7, r5, ip
   1c900:	orr	r6, r6, r5, lsl r8
   1c904:	adds	r2, r0, r4
   1c908:	orr	r6, r6, r5, lsr lr
   1c90c:	adc	r3, r1, r5
   1c910:	lsl	r1, r7, ip
   1c914:	orr	r1, r1, r6, lsl lr
   1c918:	lsl	r0, r6, ip
   1c91c:	orr	r1, r1, r6, lsr r8
   1c920:	subs	r0, r2, r0
   1c924:	mov	r4, r6
   1c928:	mov	r5, r7
   1c92c:	sbc	r1, r3, r1
   1c930:	cmp	r9, #0
   1c934:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1c938:	strd	r4, [r9]
   1c93c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c940:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c944:	mov	r7, r0
   1c948:	ldr	r6, [pc, #72]	; 1c998 <__assert_fail@plt+0xb144>
   1c94c:	ldr	r5, [pc, #72]	; 1c99c <__assert_fail@plt+0xb148>
   1c950:	add	r6, pc, r6
   1c954:	add	r5, pc, r5
   1c958:	sub	r6, r6, r5
   1c95c:	mov	r8, r1
   1c960:	mov	r9, r2
   1c964:	bl	113fc <calloc@plt-0x20>
   1c968:	asrs	r6, r6, #2
   1c96c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c970:	mov	r4, #0
   1c974:	add	r4, r4, #1
   1c978:	ldr	r3, [r5], #4
   1c97c:	mov	r2, r9
   1c980:	mov	r1, r8
   1c984:	mov	r0, r7
   1c988:	blx	r3
   1c98c:	cmp	r6, r4
   1c990:	bne	1c974 <__assert_fail@plt+0xb120>
   1c994:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c998:			; <UNDEFINED> instruction: 0x000125b0
   1c99c:	andeq	r2, r1, r8, lsr #11
   1c9a0:	bx	lr
   1c9a4:	ldr	r3, [pc, #12]	; 1c9b8 <__assert_fail@plt+0xb164>
   1c9a8:	mov	r1, #0
   1c9ac:	add	r3, pc, r3
   1c9b0:	ldr	r2, [r3]
   1c9b4:	b	116c8 <__cxa_atexit@plt>
   1c9b8:	andeq	r2, r1, ip, asr #15

Disassembly of section .fini:

0001c9bc <.fini>:
   1c9bc:	push	{r3, lr}
   1c9c0:	pop	{r3, pc}
