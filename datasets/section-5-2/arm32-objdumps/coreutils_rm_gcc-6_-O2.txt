
../repos/coreutils/src/rm:     file format elf32-littlearm


Disassembly of section .init:

00010f80 <.init>:
   10f80:	push	{r3, lr}
   10f84:	bl	119a4 <__assert_fail@plt+0x6d4>
   10f88:	pop	{r3, pc}

Disassembly of section .plt:

00010f8c <fstatfs64@plt-0x14>:
   10f8c:	push	{lr}		; (str lr, [sp, #-4]!)
   10f90:	ldr	lr, [pc, #4]	; 10f9c <fstatfs64@plt-0x4>
   10f94:	add	lr, pc, lr
   10f98:	ldr	pc, [lr, #8]!
   10f9c:	andeq	fp, r1, r4, rrx

00010fa0 <fstatfs64@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #110592	; 0x1b000
   10fa8:	ldr	pc, [ip, #100]!	; 0x64

00010fac <calloc@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #110592	; 0x1b000
   10fb4:	ldr	pc, [ip, #92]!	; 0x5c

00010fb8 <fputs_unlocked@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #110592	; 0x1b000
   10fc0:	ldr	pc, [ip, #84]!	; 0x54

00010fc4 <raise@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #110592	; 0x1b000
   10fcc:	ldr	pc, [ip, #76]!	; 0x4c

00010fd0 <__getdelim@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #110592	; 0x1b000
   10fd8:	ldr	pc, [ip, #68]!	; 0x44

00010fdc <strcmp@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #110592	; 0x1b000
   10fe4:	ldr	pc, [ip, #60]!	; 0x3c

00010fe8 <fflush@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #110592	; 0x1b000
   10ff0:	ldr	pc, [ip, #52]!	; 0x34

00010ff4 <unlinkat@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #110592	; 0x1b000
   10ffc:	ldr	pc, [ip, #44]!	; 0x2c

00011000 <memmove@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #110592	; 0x1b000
   11008:	ldr	pc, [ip, #36]!	; 0x24

0001100c <free@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #110592	; 0x1b000
   11014:	ldr	pc, [ip, #28]!

00011018 <faccessat@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #110592	; 0x1b000
   11020:	ldr	pc, [ip, #20]!

00011024 <_exit@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #110592	; 0x1b000
   1102c:	ldr	pc, [ip, #12]!

00011030 <memcpy@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #110592	; 0x1b000
   11038:	ldr	pc, [ip, #4]!

0001103c <mbsinit@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #106496	; 0x1a000
   11044:	ldr	pc, [ip, #4092]!	; 0xffc

00011048 <memcmp@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #106496	; 0x1a000
   11050:	ldr	pc, [ip, #4084]!	; 0xff4

00011054 <fputc_unlocked@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #106496	; 0x1a000
   1105c:	ldr	pc, [ip, #4076]!	; 0xfec

00011060 <dcgettext@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #106496	; 0x1a000
   11068:	ldr	pc, [ip, #4068]!	; 0xfe4

0001106c <realloc@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #106496	; 0x1a000
   11074:	ldr	pc, [ip, #4060]!	; 0xfdc

00011078 <textdomain@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #106496	; 0x1a000
   11080:	ldr	pc, [ip, #4052]!	; 0xfd4

00011084 <geteuid@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #106496	; 0x1a000
   1108c:	ldr	pc, [ip, #4044]!	; 0xfcc

00011090 <__fxstatat64@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #106496	; 0x1a000
   11098:	ldr	pc, [ip, #4036]!	; 0xfc4

0001109c <iswprint@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #106496	; 0x1a000
   110a4:	ldr	pc, [ip, #4028]!	; 0xfbc

000110a8 <__fxstat64@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #106496	; 0x1a000
   110b0:	ldr	pc, [ip, #4020]!	; 0xfb4

000110b4 <fwrite@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #106496	; 0x1a000
   110bc:	ldr	pc, [ip, #4012]!	; 0xfac

000110c0 <lseek64@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #106496	; 0x1a000
   110c8:	ldr	pc, [ip, #4004]!	; 0xfa4

000110cc <__ctype_get_mb_cur_max@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #106496	; 0x1a000
   110d4:	ldr	pc, [ip, #3996]!	; 0xf9c

000110d8 <__fpending@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #106496	; 0x1a000
   110e0:	ldr	pc, [ip, #3988]!	; 0xf94

000110e4 <mbrtowc@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #106496	; 0x1a000
   110ec:	ldr	pc, [ip, #3980]!	; 0xf8c

000110f0 <error@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #106496	; 0x1a000
   110f8:	ldr	pc, [ip, #3972]!	; 0xf84

000110fc <open64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #106496	; 0x1a000
   11104:	ldr	pc, [ip, #3964]!	; 0xf7c

00011108 <malloc@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #106496	; 0x1a000
   11110:	ldr	pc, [ip, #3956]!	; 0xf74

00011114 <__libc_start_main@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #106496	; 0x1a000
   1111c:	ldr	pc, [ip, #3948]!	; 0xf6c

00011120 <__freading@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #106496	; 0x1a000
   11128:	ldr	pc, [ip, #3940]!	; 0xf64

0001112c <__gmon_start__@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #106496	; 0x1a000
   11134:	ldr	pc, [ip, #3932]!	; 0xf5c

00011138 <mempcpy@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #106496	; 0x1a000
   11140:	ldr	pc, [ip, #3924]!	; 0xf54

00011144 <getopt_long@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #106496	; 0x1a000
   1114c:	ldr	pc, [ip, #3916]!	; 0xf4c

00011150 <__ctype_b_loc@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #106496	; 0x1a000
   11158:	ldr	pc, [ip, #3908]!	; 0xf44

0001115c <exit@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #106496	; 0x1a000
   11164:	ldr	pc, [ip, #3900]!	; 0xf3c

00011168 <strlen@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #106496	; 0x1a000
   11170:	ldr	pc, [ip, #3892]!	; 0xf34

00011174 <openat64@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #106496	; 0x1a000
   1117c:	ldr	pc, [ip, #3884]!	; 0xf2c

00011180 <__errno_location@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #106496	; 0x1a000
   11188:	ldr	pc, [ip, #3876]!	; 0xf24

0001118c <__cxa_atexit@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #106496	; 0x1a000
   11194:	ldr	pc, [ip, #3868]!	; 0xf1c

00011198 <memset@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #106496	; 0x1a000
   111a0:	ldr	pc, [ip, #3860]!	; 0xf14

000111a4 <__printf_chk@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #106496	; 0x1a000
   111ac:	ldr	pc, [ip, #3852]!	; 0xf0c

000111b0 <fileno@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #106496	; 0x1a000
   111b8:	ldr	pc, [ip, #3844]!	; 0xf04

000111bc <__fprintf_chk@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #106496	; 0x1a000
   111c4:	ldr	pc, [ip, #3836]!	; 0xefc

000111c8 <fclose@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #106496	; 0x1a000
   111d0:	ldr	pc, [ip, #3828]!	; 0xef4

000111d4 <fseeko64@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #106496	; 0x1a000
   111dc:	ldr	pc, [ip, #3820]!	; 0xeec

000111e0 <fcntl64@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #106496	; 0x1a000
   111e8:	ldr	pc, [ip, #3812]!	; 0xee4

000111ec <rpmatch@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #106496	; 0x1a000
   111f4:	ldr	pc, [ip, #3804]!	; 0xedc

000111f8 <__overflow@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #106496	; 0x1a000
   11200:	ldr	pc, [ip, #3796]!	; 0xed4

00011204 <setlocale@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #106496	; 0x1a000
   1120c:	ldr	pc, [ip, #3788]!	; 0xecc

00011210 <strrchr@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #106496	; 0x1a000
   11218:	ldr	pc, [ip, #3780]!	; 0xec4

0001121c <nl_langinfo@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #106496	; 0x1a000
   11224:	ldr	pc, [ip, #3772]!	; 0xebc

00011228 <readdir64@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #106496	; 0x1a000
   11230:	ldr	pc, [ip, #3764]!	; 0xeb4

00011234 <fdopendir@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #106496	; 0x1a000
   1123c:	ldr	pc, [ip, #3756]!	; 0xeac

00011240 <dirfd@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #106496	; 0x1a000
   11248:	ldr	pc, [ip, #3748]!	; 0xea4

0001124c <fchdir@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #106496	; 0x1a000
   11254:	ldr	pc, [ip, #3740]!	; 0xe9c

00011258 <qsort@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #106496	; 0x1a000
   11260:	ldr	pc, [ip, #3732]!	; 0xe94

00011264 <bindtextdomain@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #106496	; 0x1a000
   1126c:	ldr	pc, [ip, #3724]!	; 0xe8c

00011270 <__xstat64@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #106496	; 0x1a000
   11278:	ldr	pc, [ip, #3716]!	; 0xe84

0001127c <isatty@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #106496	; 0x1a000
   11284:	ldr	pc, [ip, #3708]!	; 0xe7c

00011288 <strncmp@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #106496	; 0x1a000
   11290:	ldr	pc, [ip, #3700]!	; 0xe74

00011294 <abort@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #106496	; 0x1a000
   1129c:	ldr	pc, [ip, #3692]!	; 0xe6c

000112a0 <close@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #106496	; 0x1a000
   112a8:	ldr	pc, [ip, #3684]!	; 0xe64

000112ac <__lxstat64@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #106496	; 0x1a000
   112b4:	ldr	pc, [ip, #3676]!	; 0xe5c

000112b8 <dcngettext@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #106496	; 0x1a000
   112c0:	ldr	pc, [ip, #3668]!	; 0xe54

000112c4 <closedir@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #106496	; 0x1a000
   112cc:	ldr	pc, [ip, #3660]!	; 0xe4c

000112d0 <__assert_fail@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #106496	; 0x1a000
   112d8:	ldr	pc, [ip, #3652]!	; 0xe44

Disassembly of section .text:

000112e0 <.text>:
   112e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112e4:	mov	r4, r0
   112e8:	sub	sp, sp, #164	; 0xa4
   112ec:	ldr	r0, [r1]
   112f0:	mov	r6, r1
   112f4:	bl	169a4 <__assert_fail@plt+0x56d4>
   112f8:	ldr	r1, [pc, #1476]	; 118c4 <__assert_fail@plt+0x5f4>
   112fc:	mov	r0, #6
   11300:	bl	11204 <setlocale@plt>
   11304:	ldr	r1, [pc, #1468]	; 118c8 <__assert_fail@plt+0x5f8>
   11308:	ldr	r0, [pc, #1468]	; 118cc <__assert_fail@plt+0x5fc>
   1130c:	bl	11264 <bindtextdomain@plt>
   11310:	ldr	r0, [pc, #1460]	; 118cc <__assert_fail@plt+0x5fc>
   11314:	mov	r5, #0
   11318:	bl	11078 <textdomain@plt>
   1131c:	ldr	r0, [pc, #1452]	; 118d0 <__assert_fail@plt+0x600>
   11320:	bl	1a1c0 <__assert_fail@plt+0x8ef0>
   11324:	mov	r3, #4
   11328:	mov	r0, r5
   1132c:	strb	r5, [sp, #36]	; 0x24
   11330:	strb	r5, [sp, #44]	; 0x2c
   11334:	strb	r5, [sp, #46]	; 0x2e
   11338:	strb	r5, [sp, #45]	; 0x2d
   1133c:	str	r5, [sp, #48]	; 0x30
   11340:	strb	r5, [sp, #52]	; 0x34
   11344:	str	r3, [sp, #40]	; 0x28
   11348:	bl	1127c <isatty@plt>
   1134c:	ldr	fp, [pc, #1408]	; 118d4 <__assert_fail@plt+0x604>
   11350:	mov	r9, #1
   11354:	ldr	r7, [pc, #1404]	; 118d8 <__assert_fail@plt+0x608>
   11358:	add	r8, fp, #108	; 0x6c
   1135c:	mov	sl, r9
   11360:	strb	r5, [sp, #54]	; 0x36
   11364:	strb	r5, [sp, #55]	; 0x37
   11368:	str	r5, [sp, #28]
   1136c:	subs	r0, r0, r5
   11370:	movne	r0, #1
   11374:	strb	r0, [sp, #53]	; 0x35
   11378:	mov	r5, #0
   1137c:	str	r5, [sp]
   11380:	mov	r3, r8
   11384:	mov	r2, r7
   11388:	mov	r1, r6
   1138c:	mov	r0, r4
   11390:	bl	11144 <getopt_long@plt>
   11394:	cmn	r0, #1
   11398:	beq	11670 <__assert_fail@plt+0x3a0>
   1139c:	cmp	r0, #105	; 0x69
   113a0:	beq	11648 <__assert_fail@plt+0x378>
   113a4:	ble	113d8 <__assert_fail@plt+0x108>
   113a8:	ldr	r3, [pc, #1324]	; 118dc <__assert_fail@plt+0x60c>
   113ac:	cmp	r0, r3
   113b0:	beq	11640 <__assert_fail@plt+0x370>
   113b4:	ble	11408 <__assert_fail@plt+0x138>
   113b8:	ldr	r3, [pc, #1312]	; 118e0 <__assert_fail@plt+0x610>
   113bc:	cmp	r0, r3
   113c0:	beq	11614 <__assert_fail@plt+0x344>
   113c4:	blt	114e0 <__assert_fail@plt+0x210>
   113c8:	cmp	r0, #260	; 0x104
   113cc:	bne	11528 <__assert_fail@plt+0x258>
   113d0:	strb	sl, [sp, #53]	; 0x35
   113d4:	b	11378 <__assert_fail@plt+0xa8>
   113d8:	cmp	r0, #73	; 0x49
   113dc:	beq	11600 <__assert_fail@plt+0x330>
   113e0:	ble	11488 <__assert_fail@plt+0x1b8>
   113e4:	cmp	r0, #100	; 0x64
   113e8:	beq	115f8 <__assert_fail@plt+0x328>
   113ec:	cmp	r0, #102	; 0x66
   113f0:	bne	115e0 <__assert_fail@plt+0x310>
   113f4:	mov	r3, #5
   113f8:	strb	sl, [sp, #36]	; 0x24
   113fc:	str	r5, [sp, #28]
   11400:	str	r3, [sp, #40]	; 0x28
   11404:	b	11378 <__assert_fail@plt+0xa8>
   11408:	cmp	r0, #118	; 0x76
   1140c:	beq	115f0 <__assert_fail@plt+0x320>
   11410:	cmp	r0, #256	; 0x100
   11414:	bne	11520 <__assert_fail@plt+0x250>
   11418:	ldr	r3, [pc, #1220]	; 118e4 <__assert_fail@plt+0x614>
   1141c:	ldr	r1, [r3]
   11420:	cmp	r1, #0
   11424:	beq	11470 <__assert_fail@plt+0x1a0>
   11428:	ldr	r2, [pc, #1208]	; 118e8 <__assert_fail@plt+0x618>
   1142c:	ldr	r3, [pc, #1208]	; 118ec <__assert_fail@plt+0x61c>
   11430:	mov	r0, #1
   11434:	ldr	r2, [r2]
   11438:	str	r0, [sp, #8]
   1143c:	mov	r0, #4
   11440:	str	r2, [sp, #4]
   11444:	str	r0, [sp]
   11448:	add	r2, r3, #24
   1144c:	ldr	r0, [pc, #1180]	; 118f0 <__assert_fail@plt+0x620>
   11450:	bl	13068 <__assert_fail@plt+0x1d98>
   11454:	add	r0, fp, r0, lsl #2
   11458:	ldr	r3, [r0, #56]	; 0x38
   1145c:	cmp	r3, #1
   11460:	beq	1165c <__assert_fail@plt+0x38c>
   11464:	bcc	11768 <__assert_fail@plt+0x498>
   11468:	cmp	r3, #2
   1146c:	bne	11378 <__assert_fail@plt+0xa8>
   11470:	mov	r3, #0
   11474:	mov	r2, #3
   11478:	str	r2, [sp, #40]	; 0x28
   1147c:	strb	r3, [sp, #36]	; 0x24
   11480:	str	r3, [sp, #28]
   11484:	b	11378 <__assert_fail@plt+0xa8>
   11488:	cmn	r0, #3
   1148c:	beq	114a0 <__assert_fail@plt+0x1d0>
   11490:	cmn	r0, #2
   11494:	bne	11528 <__assert_fail@plt+0x258>
   11498:	mov	r0, r5
   1149c:	bl	11a90 <__assert_fail@plt+0x7c0>
   114a0:	ldr	lr, [pc, #1100]	; 118f4 <__assert_fail@plt+0x624>
   114a4:	ldr	ip, [pc, #1100]	; 118f8 <__assert_fail@plt+0x628>
   114a8:	ldr	r1, [pc, #1100]	; 118fc <__assert_fail@plt+0x62c>
   114ac:	ldr	r3, [pc, #1100]	; 11900 <__assert_fail@plt+0x630>
   114b0:	ldr	r0, [pc, #1100]	; 11904 <__assert_fail@plt+0x634>
   114b4:	ldr	r2, [pc, #1100]	; 11908 <__assert_fail@plt+0x638>
   114b8:	str	r5, [sp, #16]
   114bc:	ldr	r0, [r0]
   114c0:	ldr	r3, [r3]
   114c4:	stmib	sp, {r1, ip, lr}
   114c8:	str	r2, [sp]
   114cc:	ldr	r1, [pc, #1080]	; 1190c <__assert_fail@plt+0x63c>
   114d0:	ldr	r2, [pc, #1080]	; 11910 <__assert_fail@plt+0x640>
   114d4:	bl	18d2c <__assert_fail@plt+0x7a5c>
   114d8:	mov	r0, r5
   114dc:	bl	1115c <exit@plt>
   114e0:	ldr	r3, [pc, #1068]	; 11914 <__assert_fail@plt+0x644>
   114e4:	ldr	r1, [pc, #1068]	; 11918 <__assert_fail@plt+0x648>
   114e8:	ldr	r3, [r3]
   114ec:	sub	r3, r3, #-1073741823	; 0xc0000001
   114f0:	ldr	r0, [r6, r3, lsl #2]
   114f4:	bl	10fdc <strcmp@plt>
   114f8:	subs	r9, r0, #0
   114fc:	beq	11378 <__assert_fail@plt+0xa8>
   11500:	mov	r2, #5
   11504:	ldr	r1, [pc, #1040]	; 1191c <__assert_fail@plt+0x64c>
   11508:	mov	r0, r5
   1150c:	bl	11060 <dcgettext@plt>
   11510:	mov	r1, r5
   11514:	mov	r2, r0
   11518:	mov	r0, #1
   1151c:	bl	110f0 <error@plt>
   11520:	cmp	r0, #114	; 0x72
   11524:	beq	115e8 <__assert_fail@plt+0x318>
   11528:	cmp	r4, #1
   1152c:	movgt	r8, r6
   11530:	movgt	r5, #1
   11534:	movgt	r9, #3
   11538:	bgt	1154c <__assert_fail@plt+0x27c>
   1153c:	b	115d8 <__assert_fail@plt+0x308>
   11540:	add	r5, r5, #1
   11544:	cmp	r4, r5
   11548:	beq	115d8 <__assert_fail@plt+0x308>
   1154c:	ldr	r7, [r8, #4]!
   11550:	ldrb	r3, [r7]
   11554:	cmp	r3, #45	; 0x2d
   11558:	bne	11540 <__assert_fail@plt+0x270>
   1155c:	ldrb	r3, [r7, #1]
   11560:	cmp	r3, #0
   11564:	beq	11540 <__assert_fail@plt+0x270>
   11568:	add	r2, sp, #56	; 0x38
   1156c:	mov	r1, r7
   11570:	mov	r0, r9
   11574:	bl	112ac <__lxstat64@plt>
   11578:	cmp	r0, #0
   1157c:	bne	11540 <__assert_fail@plt+0x270>
   11580:	ldr	r3, [pc, #920]	; 11920 <__assert_fail@plt+0x650>
   11584:	mov	r2, #5
   11588:	ldr	r1, [pc, #916]	; 11924 <__assert_fail@plt+0x654>
   1158c:	ldr	r4, [r3]
   11590:	bl	11060 <dcgettext@plt>
   11594:	mov	r2, r7
   11598:	mov	r1, #3
   1159c:	ldr	r6, [r6]
   115a0:	mov	r5, r0
   115a4:	mov	r0, #1
   115a8:	bl	185b8 <__assert_fail@plt+0x72e8>
   115ac:	mov	r1, r7
   115b0:	mov	r8, r0
   115b4:	mov	r0, #4
   115b8:	bl	18624 <__assert_fail@plt+0x7354>
   115bc:	str	r8, [sp]
   115c0:	mov	r3, r6
   115c4:	mov	r2, r5
   115c8:	mov	r1, #1
   115cc:	str	r0, [sp, #4]
   115d0:	mov	r0, r4
   115d4:	bl	111bc <__fprintf_chk@plt>
   115d8:	mov	r0, #1
   115dc:	bl	11a90 <__assert_fail@plt+0x7c0>
   115e0:	cmp	r0, #82	; 0x52
   115e4:	bne	11528 <__assert_fail@plt+0x258>
   115e8:	strb	sl, [sp, #45]	; 0x2d
   115ec:	b	11378 <__assert_fail@plt+0xa8>
   115f0:	strb	sl, [sp, #54]	; 0x36
   115f4:	b	11378 <__assert_fail@plt+0xa8>
   115f8:	strb	sl, [sp, #46]	; 0x2e
   115fc:	b	11378 <__assert_fail@plt+0xa8>
   11600:	mov	r3, #4
   11604:	strb	r5, [sp, #36]	; 0x24
   11608:	str	r3, [sp, #40]	; 0x28
   1160c:	str	sl, [sp, #28]
   11610:	b	11378 <__assert_fail@plt+0xa8>
   11614:	ldr	r3, [pc, #712]	; 118e4 <__assert_fail@plt+0x614>
   11618:	ldr	r0, [r3]
   1161c:	cmp	r0, #0
   11620:	beq	11790 <__assert_fail@plt+0x4c0>
   11624:	ldr	r1, [pc, #764]	; 11928 <__assert_fail@plt+0x658>
   11628:	bl	10fdc <strcmp@plt>
   1162c:	cmp	r0, #0
   11630:	bne	1188c <__assert_fail@plt+0x5bc>
   11634:	strb	sl, [sp, #52]	; 0x34
   11638:	mov	r9, #1
   1163c:	b	11378 <__assert_fail@plt+0xa8>
   11640:	strb	sl, [sp, #44]	; 0x2c
   11644:	b	11378 <__assert_fail@plt+0xa8>
   11648:	mov	r3, #3
   1164c:	strb	r5, [sp, #36]	; 0x24
   11650:	str	r5, [sp, #28]
   11654:	str	r3, [sp, #40]	; 0x28
   11658:	b	11378 <__assert_fail@plt+0xa8>
   1165c:	mov	r3, #4
   11660:	str	r3, [sp, #40]	; 0x28
   11664:	strb	r5, [sp, #36]	; 0x24
   11668:	str	sl, [sp, #28]
   1166c:	b	11378 <__assert_fail@plt+0xa8>
   11670:	ldr	r5, [pc, #668]	; 11914 <__assert_fail@plt+0x644>
   11674:	ldr	r3, [r5]
   11678:	cmp	r4, r3
   1167c:	ble	1177c <__assert_fail@plt+0x4ac>
   11680:	ldrb	r3, [sp, #45]	; 0x2d
   11684:	tst	r9, r3
   11688:	bne	117f0 <__assert_fail@plt+0x520>
   1168c:	ldr	r3, [r5]
   11690:	ldr	r2, [sp, #28]
   11694:	cmp	r2, #0
   11698:	add	r6, r6, r3, lsl #2
   1169c:	beq	1173c <__assert_fail@plt+0x46c>
   116a0:	ldrb	r2, [sp, #45]	; 0x2d
   116a4:	sub	r4, r4, r3
   116a8:	mov	r8, r4
   116ac:	cmp	r2, #0
   116b0:	asr	r9, r4, #31
   116b4:	bne	11798 <__assert_fail@plt+0x4c8>
   116b8:	cmp	r9, #0
   116bc:	cmpeq	r4, #3
   116c0:	bls	1173c <__assert_fail@plt+0x46c>
   116c4:	ldr	r3, [pc, #596]	; 11920 <__assert_fail@plt+0x650>
   116c8:	mov	r1, #0
   116cc:	mvn	r0, #0
   116d0:	cmp	r9, r1
   116d4:	cmpeq	r4, r0
   116d8:	ldr	r5, [r3]
   116dc:	bls	11844 <__assert_fail@plt+0x574>
   116e0:	ldr	r2, [pc, #580]	; 1192c <__assert_fail@plt+0x65c>
   116e4:	mov	r3, #0
   116e8:	mov	r0, r8
   116ec:	mov	r1, r9
   116f0:	bl	19fe8 <__assert_fail@plt+0x8d18>
   116f4:	add	r3, r2, #999424	; 0xf4000
   116f8:	add	r3, r3, #576	; 0x240
   116fc:	mov	r2, #5
   11700:	str	r2, [sp]
   11704:	ldr	r1, [pc, #548]	; 11930 <__assert_fail@plt+0x660>
   11708:	ldr	r2, [pc, #548]	; 11934 <__assert_fail@plt+0x664>
   1170c:	mov	r0, #0
   11710:	bl	112b8 <dcngettext@plt>
   11714:	mov	r2, r0
   11718:	ldr	r3, [pc, #536]	; 11938 <__assert_fail@plt+0x668>
   1171c:	strd	r8, [sp]
   11720:	mov	r1, #1
   11724:	ldr	r3, [r3]
   11728:	mov	r0, r5
   1172c:	bl	111bc <__fprintf_chk@plt>
   11730:	bl	1946c <__assert_fail@plt+0x819c>
   11734:	cmp	r0, #0
   11738:	beq	11788 <__assert_fail@plt+0x4b8>
   1173c:	mov	r0, r6
   11740:	add	r1, sp, #36	; 0x24
   11744:	bl	1251c <__assert_fail@plt+0x124c>
   11748:	sub	r3, r0, #2
   1174c:	cmp	r3, #2
   11750:	subls	r0, r0, #4
   11754:	clzls	r0, r0
   11758:	lsrls	r0, r0, #5
   1175c:	bhi	11854 <__assert_fail@plt+0x584>
   11760:	add	sp, sp, #164	; 0xa4
   11764:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11768:	mov	r3, #5
   1176c:	str	r3, [sp, #40]	; 0x28
   11770:	mov	r3, #0
   11774:	str	r3, [sp, #28]
   11778:	b	11378 <__assert_fail@plt+0xa8>
   1177c:	ldrb	r4, [sp, #36]	; 0x24
   11780:	cmp	r4, #0
   11784:	beq	11868 <__assert_fail@plt+0x598>
   11788:	mov	r0, #0
   1178c:	b	11760 <__assert_fail@plt+0x490>
   11790:	mov	r9, sl
   11794:	b	11378 <__assert_fail@plt+0xa8>
   11798:	mov	r3, #0
   1179c:	mvn	r2, #0
   117a0:	cmp	r9, r3
   117a4:	cmpeq	r4, r2
   117a8:	bls	1184c <__assert_fail@plt+0x57c>
   117ac:	ldr	r2, [pc, #376]	; 1192c <__assert_fail@plt+0x65c>
   117b0:	mov	r3, #0
   117b4:	mov	r0, r8
   117b8:	mov	r1, r9
   117bc:	bl	19fe8 <__assert_fail@plt+0x8d18>
   117c0:	add	r3, r2, #999424	; 0xf4000
   117c4:	add	r3, r3, #576	; 0x240
   117c8:	ldr	ip, [pc, #336]	; 11920 <__assert_fail@plt+0x650>
   117cc:	mov	r2, #5
   117d0:	str	r2, [sp]
   117d4:	ldr	r1, [pc, #352]	; 1193c <__assert_fail@plt+0x66c>
   117d8:	ldr	r2, [pc, #352]	; 11940 <__assert_fail@plt+0x670>
   117dc:	mov	r0, #0
   117e0:	ldr	r5, [ip]
   117e4:	bl	112b8 <dcngettext@plt>
   117e8:	mov	r2, r0
   117ec:	b	11718 <__assert_fail@plt+0x448>
   117f0:	ldr	r0, [pc, #332]	; 11944 <__assert_fail@plt+0x674>
   117f4:	bl	1887c <__assert_fail@plt+0x75ac>
   117f8:	cmp	r0, #0
   117fc:	mov	r7, r0
   11800:	str	r0, [sp, #48]	; 0x30
   11804:	bne	1168c <__assert_fail@plt+0x3bc>
   11808:	bl	11180 <__errno_location@plt>
   1180c:	mov	r2, #5
   11810:	ldr	r1, [pc, #304]	; 11948 <__assert_fail@plt+0x678>
   11814:	ldr	r4, [r0]
   11818:	mov	r0, r7
   1181c:	bl	11060 <dcgettext@plt>
   11820:	ldr	r1, [pc, #292]	; 1194c <__assert_fail@plt+0x67c>
   11824:	mov	r5, r0
   11828:	mov	r0, #4
   1182c:	bl	18624 <__assert_fail@plt+0x7354>
   11830:	mov	r2, r5
   11834:	mov	r1, r4
   11838:	mov	r3, r0
   1183c:	mov	r0, #1
   11840:	bl	110f0 <error@plt>
   11844:	mov	r3, r4
   11848:	b	116fc <__assert_fail@plt+0x42c>
   1184c:	mov	r3, r4
   11850:	b	117c8 <__assert_fail@plt+0x4f8>
   11854:	ldr	r3, [pc, #244]	; 11950 <__assert_fail@plt+0x680>
   11858:	ldr	r2, [pc, #244]	; 11954 <__assert_fail@plt+0x684>
   1185c:	ldr	r1, [pc, #244]	; 11958 <__assert_fail@plt+0x688>
   11860:	ldr	r0, [pc, #244]	; 1195c <__assert_fail@plt+0x68c>
   11864:	bl	112d0 <__assert_fail@plt>
   11868:	mov	r2, #5
   1186c:	ldr	r1, [pc, #236]	; 11960 <__assert_fail@plt+0x690>
   11870:	mov	r0, r4
   11874:	bl	11060 <dcgettext@plt>
   11878:	mov	r1, r4
   1187c:	mov	r2, r0
   11880:	mov	r0, r4
   11884:	bl	110f0 <error@plt>
   11888:	b	115d8 <__assert_fail@plt+0x308>
   1188c:	mov	r2, #5
   11890:	ldr	r1, [pc, #204]	; 11964 <__assert_fail@plt+0x694>
   11894:	mov	r0, r5
   11898:	bl	11060 <dcgettext@plt>
   1189c:	ldr	r3, [pc, #64]	; 118e4 <__assert_fail@plt+0x614>
   118a0:	ldr	r1, [r3]
   118a4:	mov	r4, r0
   118a8:	mov	r0, #4
   118ac:	bl	18624 <__assert_fail@plt+0x7354>
   118b0:	mov	r2, r4
   118b4:	mov	r1, r5
   118b8:	mov	r3, r0
   118bc:	mov	r0, #1
   118c0:	bl	110f0 <error@plt>
   118c4:	andeq	fp, r1, ip, lsr #7
   118c8:	andeq	sl, r1, r4, ror #22
   118cc:			; <UNDEFINED> instruction: 0x0001aabc
   118d0:	strdeq	r3, [r1], -ip
   118d4:	andeq	sl, r1, r4, ror #3
   118d8:	andeq	sl, r1, r0, ror ip
   118dc:	andeq	r0, r0, r1, lsl #2
   118e0:	andeq	r0, r0, r3, lsl #2
   118e4:	muleq	r2, r8, r1
   118e8:	andeq	ip, r2, r0, lsr r1
   118ec:	andeq	sl, r1, ip, lsl r2
   118f0:	andeq	sl, r1, ip, ror fp
   118f4:	andeq	sl, r1, r8, lsl #24
   118f8:	andeq	sl, r1, r8, lsl ip
   118fc:	andeq	sl, r1, ip, lsr #24
   11900:	andeq	ip, r2, ip, lsr #2
   11904:	muleq	r2, r4, r1
   11908:	andeq	sl, r1, ip, lsr ip
   1190c:	andeq	sl, r1, r8, lsl r3
   11910:			; <UNDEFINED> instruction: 0x0001aab8
   11914:	andeq	ip, r2, r0, lsl #3
   11918:	andeq	sl, r1, ip, lsl #23
   1191c:	andeq	sl, r1, r0, lsr #23
   11920:	andeq	ip, r2, r8, lsl #3
   11924:	andeq	sl, r1, r8, asr #24
   11928:	ldrdeq	sl, [r1], -r8
   1192c:	andeq	r4, pc, r0, asr #4
   11930:	andeq	sl, r1, r8, lsl sp
   11934:	strdeq	sl, [r1], -ip
   11938:			; <UNDEFINED> instruction: 0x0002c1bc
   1193c:	ldrdeq	sl, [r1], -r4
   11940:	andeq	sl, r1, ip, lsr #25
   11944:	andeq	ip, r2, r0, lsr #3
   11948:	andeq	sl, r1, r8, lsl #25
   1194c:	andeq	sl, r1, r8, lsr #25
   11950:	andeq	sl, r1, r0, lsl r3
   11954:	andeq	r0, r0, r3, ror r1
   11958:	andeq	sl, r1, r4, lsr sp
   1195c:	andeq	sl, r1, r0, asr #26
   11960:	andeq	sl, r1, r8, ror ip
   11964:	ldrdeq	sl, [r1], -ip
   11968:	mov	fp, #0
   1196c:	mov	lr, #0
   11970:	pop	{r1}		; (ldr r1, [sp], #4)
   11974:	mov	r2, sp
   11978:	push	{r2}		; (str r2, [sp, #-4]!)
   1197c:	push	{r0}		; (str r0, [sp, #-4]!)
   11980:	ldr	ip, [pc, #16]	; 11998 <__assert_fail@plt+0x6c8>
   11984:	push	{ip}		; (str ip, [sp, #-4]!)
   11988:	ldr	r0, [pc, #12]	; 1199c <__assert_fail@plt+0x6cc>
   1198c:	ldr	r3, [pc, #12]	; 119a0 <__assert_fail@plt+0x6d0>
   11990:	bl	11114 <__libc_start_main@plt>
   11994:	bl	11294 <abort@plt>
   11998:			; <UNDEFINED> instruction: 0x0001a1bc
   1199c:	andeq	r1, r1, r0, ror #5
   119a0:	andeq	sl, r1, ip, asr r1
   119a4:	ldr	r3, [pc, #20]	; 119c0 <__assert_fail@plt+0x6f0>
   119a8:	ldr	r2, [pc, #20]	; 119c4 <__assert_fail@plt+0x6f4>
   119ac:	add	r3, pc, r3
   119b0:	ldr	r2, [r3, r2]
   119b4:	cmp	r2, #0
   119b8:	bxeq	lr
   119bc:	b	1112c <__gmon_start__@plt>
   119c0:	andeq	sl, r1, ip, asr #12
   119c4:	andeq	r0, r0, r0, lsr #2
   119c8:	ldr	r3, [pc, #28]	; 119ec <__assert_fail@plt+0x71c>
   119cc:	ldr	r0, [pc, #28]	; 119f0 <__assert_fail@plt+0x720>
   119d0:	sub	r3, r3, r0
   119d4:	cmp	r3, #6
   119d8:	bxls	lr
   119dc:	ldr	r3, [pc, #16]	; 119f4 <__assert_fail@plt+0x724>
   119e0:	cmp	r3, #0
   119e4:	bxeq	lr
   119e8:	bx	r3
   119ec:	andeq	ip, r2, fp, ror r1
   119f0:	andeq	ip, r2, r8, ror r1
   119f4:	andeq	r0, r0, r0
   119f8:	ldr	r1, [pc, #36]	; 11a24 <__assert_fail@plt+0x754>
   119fc:	ldr	r0, [pc, #36]	; 11a28 <__assert_fail@plt+0x758>
   11a00:	sub	r1, r1, r0
   11a04:	asr	r1, r1, #2
   11a08:	add	r1, r1, r1, lsr #31
   11a0c:	asrs	r1, r1, #1
   11a10:	bxeq	lr
   11a14:	ldr	r3, [pc, #16]	; 11a2c <__assert_fail@plt+0x75c>
   11a18:	cmp	r3, #0
   11a1c:	bxeq	lr
   11a20:	bx	r3
   11a24:	andeq	ip, r2, r8, ror r1
   11a28:	andeq	ip, r2, r8, ror r1
   11a2c:	andeq	r0, r0, r0
   11a30:	push	{r4, lr}
   11a34:	ldr	r4, [pc, #24]	; 11a54 <__assert_fail@plt+0x784>
   11a38:	ldrb	r3, [r4]
   11a3c:	cmp	r3, #0
   11a40:	popne	{r4, pc}
   11a44:	bl	119c8 <__assert_fail@plt+0x6f8>
   11a48:	mov	r3, #1
   11a4c:	strb	r3, [r4]
   11a50:	pop	{r4, pc}
   11a54:	muleq	r2, ip, r1
   11a58:	ldr	r0, [pc, #40]	; 11a88 <__assert_fail@plt+0x7b8>
   11a5c:	ldr	r3, [r0]
   11a60:	cmp	r3, #0
   11a64:	bne	11a6c <__assert_fail@plt+0x79c>
   11a68:	b	119f8 <__assert_fail@plt+0x728>
   11a6c:	ldr	r3, [pc, #24]	; 11a8c <__assert_fail@plt+0x7bc>
   11a70:	cmp	r3, #0
   11a74:	beq	11a68 <__assert_fail@plt+0x798>
   11a78:	push	{r4, lr}
   11a7c:	blx	r3
   11a80:	pop	{r4, lr}
   11a84:	b	119f8 <__assert_fail@plt+0x728>
   11a88:	andeq	fp, r2, r4, lsl pc
   11a8c:	andeq	r0, r0, r0
   11a90:	subs	r5, r0, #0
   11a94:	push	{r7, lr}
   11a98:	sub	sp, sp, #56	; 0x38
   11a9c:	beq	11ad8 <__assert_fail@plt+0x808>
   11aa0:	ldr	r3, [pc, #792]	; 11dc0 <__assert_fail@plt+0xaf0>
   11aa4:	mov	r2, #5
   11aa8:	ldr	r1, [pc, #788]	; 11dc4 <__assert_fail@plt+0xaf4>
   11aac:	mov	r0, #0
   11ab0:	ldr	r4, [r3]
   11ab4:	bl	11060 <dcgettext@plt>
   11ab8:	ldr	r3, [pc, #776]	; 11dc8 <__assert_fail@plt+0xaf8>
   11abc:	mov	r1, #1
   11ac0:	ldr	r3, [r3]
   11ac4:	mov	r2, r0
   11ac8:	mov	r0, r4
   11acc:	bl	111bc <__fprintf_chk@plt>
   11ad0:	mov	r0, r5
   11ad4:	bl	1115c <exit@plt>
   11ad8:	mov	r2, #5
   11adc:	ldr	r1, [pc, #744]	; 11dcc <__assert_fail@plt+0xafc>
   11ae0:	bl	11060 <dcgettext@plt>
   11ae4:	ldr	r4, [pc, #732]	; 11dc8 <__assert_fail@plt+0xaf8>
   11ae8:	ldr	r7, [pc, #736]	; 11dd0 <__assert_fail@plt+0xb00>
   11aec:	ldr	r2, [r4]
   11af0:	mov	r1, r0
   11af4:	mov	r0, #1
   11af8:	bl	111a4 <__printf_chk@plt>
   11afc:	mov	r2, #5
   11b00:	ldr	r1, [pc, #716]	; 11dd4 <__assert_fail@plt+0xb04>
   11b04:	mov	r0, r5
   11b08:	bl	11060 <dcgettext@plt>
   11b0c:	ldr	r1, [r7]
   11b10:	bl	10fb8 <fputs_unlocked@plt>
   11b14:	mov	r2, #5
   11b18:	ldr	r1, [pc, #696]	; 11dd8 <__assert_fail@plt+0xb08>
   11b1c:	mov	r0, r5
   11b20:	bl	11060 <dcgettext@plt>
   11b24:	ldr	r1, [r7]
   11b28:	bl	10fb8 <fputs_unlocked@plt>
   11b2c:	mov	r2, #5
   11b30:	ldr	r1, [pc, #676]	; 11ddc <__assert_fail@plt+0xb0c>
   11b34:	mov	r0, r5
   11b38:	bl	11060 <dcgettext@plt>
   11b3c:	ldr	r1, [r7]
   11b40:	bl	10fb8 <fputs_unlocked@plt>
   11b44:	mov	r2, #5
   11b48:	ldr	r1, [pc, #656]	; 11de0 <__assert_fail@plt+0xb10>
   11b4c:	mov	r0, r5
   11b50:	bl	11060 <dcgettext@plt>
   11b54:	ldr	r1, [r7]
   11b58:	bl	10fb8 <fputs_unlocked@plt>
   11b5c:	mov	r2, #5
   11b60:	ldr	r1, [pc, #636]	; 11de4 <__assert_fail@plt+0xb14>
   11b64:	mov	r0, r5
   11b68:	bl	11060 <dcgettext@plt>
   11b6c:	ldr	r1, [r7]
   11b70:	bl	10fb8 <fputs_unlocked@plt>
   11b74:	mov	r2, #5
   11b78:	ldr	r1, [pc, #616]	; 11de8 <__assert_fail@plt+0xb18>
   11b7c:	mov	r0, r5
   11b80:	bl	11060 <dcgettext@plt>
   11b84:	ldr	r1, [r7]
   11b88:	bl	10fb8 <fputs_unlocked@plt>
   11b8c:	mov	r2, #5
   11b90:	ldr	r1, [pc, #596]	; 11dec <__assert_fail@plt+0xb1c>
   11b94:	mov	r0, r5
   11b98:	bl	11060 <dcgettext@plt>
   11b9c:	ldr	r1, [r7]
   11ba0:	bl	10fb8 <fputs_unlocked@plt>
   11ba4:	mov	r2, #5
   11ba8:	ldr	r1, [pc, #576]	; 11df0 <__assert_fail@plt+0xb20>
   11bac:	mov	r0, r5
   11bb0:	bl	11060 <dcgettext@plt>
   11bb4:	ldr	r1, [r7]
   11bb8:	bl	10fb8 <fputs_unlocked@plt>
   11bbc:	mov	r2, #5
   11bc0:	ldr	r1, [pc, #556]	; 11df4 <__assert_fail@plt+0xb24>
   11bc4:	mov	r0, r5
   11bc8:	bl	11060 <dcgettext@plt>
   11bcc:	ldr	r3, [r4]
   11bd0:	ldr	r4, [pc, #544]	; 11df8 <__assert_fail@plt+0xb28>
   11bd4:	mov	r2, r3
   11bd8:	mov	r1, r0
   11bdc:	mov	r0, #1
   11be0:	bl	111a4 <__printf_chk@plt>
   11be4:	mov	r2, #5
   11be8:	ldr	r1, [pc, #524]	; 11dfc <__assert_fail@plt+0xb2c>
   11bec:	mov	r0, r5
   11bf0:	bl	11060 <dcgettext@plt>
   11bf4:	ldr	r1, [r7]
   11bf8:	bl	10fb8 <fputs_unlocked@plt>
   11bfc:	ldm	r4!, {r0, r1, r2, r3}
   11c00:	mov	lr, sp
   11c04:	stmia	lr!, {r0, r1, r2, r3}
   11c08:	ldm	r4!, {r0, r1, r2, r3}
   11c0c:	ldr	ip, [sp]
   11c10:	stmia	lr!, {r0, r1, r2, r3}
   11c14:	cmp	ip, #0
   11c18:	ldm	r4!, {r0, r1, r2, r3}
   11c1c:	stmia	lr!, {r0, r1, r2, r3}
   11c20:	ldm	r4, {r0, r1}
   11c24:	moveq	r4, sp
   11c28:	stm	lr, {r0, r1}
   11c2c:	beq	11c5c <__assert_fail@plt+0x98c>
   11c30:	ldr	r6, [pc, #456]	; 11e00 <__assert_fail@plt+0xb30>
   11c34:	mov	r4, sp
   11c38:	b	11c48 <__assert_fail@plt+0x978>
   11c3c:	ldr	ip, [r4, #8]!
   11c40:	cmp	ip, #0
   11c44:	beq	11c5c <__assert_fail@plt+0x98c>
   11c48:	mov	r1, ip
   11c4c:	mov	r0, r6
   11c50:	bl	10fdc <strcmp@plt>
   11c54:	cmp	r0, #0
   11c58:	bne	11c3c <__assert_fail@plt+0x96c>
   11c5c:	ldr	r4, [r4, #4]
   11c60:	mov	r2, #5
   11c64:	cmp	r4, #0
   11c68:	ldr	r1, [pc, #404]	; 11e04 <__assert_fail@plt+0xb34>
   11c6c:	beq	11d14 <__assert_fail@plt+0xa44>
   11c70:	mov	r0, #0
   11c74:	bl	11060 <dcgettext@plt>
   11c78:	ldr	r3, [pc, #392]	; 11e08 <__assert_fail@plt+0xb38>
   11c7c:	ldr	r2, [pc, #392]	; 11e0c <__assert_fail@plt+0xb3c>
   11c80:	mov	r1, r0
   11c84:	mov	r0, #1
   11c88:	bl	111a4 <__printf_chk@plt>
   11c8c:	mov	r1, #0
   11c90:	mov	r0, #5
   11c94:	bl	11204 <setlocale@plt>
   11c98:	cmp	r0, #0
   11c9c:	ldreq	r6, [pc, #348]	; 11e00 <__assert_fail@plt+0xb30>
   11ca0:	beq	11cbc <__assert_fail@plt+0x9ec>
   11ca4:	mov	r2, #3
   11ca8:	ldr	r1, [pc, #352]	; 11e10 <__assert_fail@plt+0xb40>
   11cac:	bl	11288 <strncmp@plt>
   11cb0:	ldr	r6, [pc, #328]	; 11e00 <__assert_fail@plt+0xb30>
   11cb4:	cmp	r0, #0
   11cb8:	bne	11da4 <__assert_fail@plt+0xad4>
   11cbc:	mov	r2, #5
   11cc0:	ldr	r1, [pc, #332]	; 11e14 <__assert_fail@plt+0xb44>
   11cc4:	mov	r0, #0
   11cc8:	bl	11060 <dcgettext@plt>
   11ccc:	ldr	r3, [pc, #300]	; 11e00 <__assert_fail@plt+0xb30>
   11cd0:	ldr	r2, [pc, #304]	; 11e08 <__assert_fail@plt+0xb38>
   11cd4:	mov	r1, r0
   11cd8:	mov	r0, #1
   11cdc:	bl	111a4 <__printf_chk@plt>
   11ce0:	mov	r2, #5
   11ce4:	ldr	r1, [pc, #300]	; 11e18 <__assert_fail@plt+0xb48>
   11ce8:	mov	r0, #0
   11cec:	bl	11060 <dcgettext@plt>
   11cf0:	ldr	r2, [pc, #292]	; 11e1c <__assert_fail@plt+0xb4c>
   11cf4:	cmp	r4, r6
   11cf8:	ldr	r3, [pc, #288]	; 11e20 <__assert_fail@plt+0xb50>
   11cfc:	movne	r3, r2
   11d00:	mov	r1, r0
   11d04:	mov	r2, r4
   11d08:	mov	r0, #1
   11d0c:	bl	111a4 <__printf_chk@plt>
   11d10:	b	11ad0 <__assert_fail@plt+0x800>
   11d14:	mov	r0, r4
   11d18:	bl	11060 <dcgettext@plt>
   11d1c:	ldr	r3, [pc, #228]	; 11e08 <__assert_fail@plt+0xb38>
   11d20:	ldr	r2, [pc, #228]	; 11e0c <__assert_fail@plt+0xb3c>
   11d24:	mov	r1, r0
   11d28:	mov	r0, #1
   11d2c:	bl	111a4 <__printf_chk@plt>
   11d30:	mov	r1, r4
   11d34:	mov	r0, #5
   11d38:	bl	11204 <setlocale@plt>
   11d3c:	cmp	r0, #0
   11d40:	beq	11d58 <__assert_fail@plt+0xa88>
   11d44:	mov	r2, #3
   11d48:	ldr	r1, [pc, #192]	; 11e10 <__assert_fail@plt+0xb40>
   11d4c:	bl	11288 <strncmp@plt>
   11d50:	cmp	r0, #0
   11d54:	bne	11d9c <__assert_fail@plt+0xacc>
   11d58:	mov	r2, #5
   11d5c:	ldr	r1, [pc, #176]	; 11e14 <__assert_fail@plt+0xb44>
   11d60:	mov	r0, #0
   11d64:	bl	11060 <dcgettext@plt>
   11d68:	ldr	r3, [pc, #144]	; 11e00 <__assert_fail@plt+0xb30>
   11d6c:	ldr	r2, [pc, #148]	; 11e08 <__assert_fail@plt+0xb38>
   11d70:	mov	r4, r3
   11d74:	mov	r1, r0
   11d78:	mov	r0, #1
   11d7c:	bl	111a4 <__printf_chk@plt>
   11d80:	ldr	r1, [pc, #144]	; 11e18 <__assert_fail@plt+0xb48>
   11d84:	mov	r2, #5
   11d88:	mov	r0, #0
   11d8c:	bl	11060 <dcgettext@plt>
   11d90:	ldr	r3, [pc, #136]	; 11e20 <__assert_fail@plt+0xb50>
   11d94:	mov	r1, r0
   11d98:	b	11d04 <__assert_fail@plt+0xa34>
   11d9c:	ldr	r6, [pc, #92]	; 11e00 <__assert_fail@plt+0xb30>
   11da0:	mov	r4, r6
   11da4:	mov	r2, #5
   11da8:	ldr	r1, [pc, #116]	; 11e24 <__assert_fail@plt+0xb54>
   11dac:	mov	r0, #0
   11db0:	bl	11060 <dcgettext@plt>
   11db4:	ldr	r1, [r7]
   11db8:	bl	10fb8 <fputs_unlocked@plt>
   11dbc:	b	11cbc <__assert_fail@plt+0x9ec>
   11dc0:	andeq	ip, r2, r8, lsl #3
   11dc4:	andeq	sl, r1, ip, lsl r3
   11dc8:			; <UNDEFINED> instruction: 0x0002c1bc
   11dcc:	andeq	sl, r1, r4, asr #6
   11dd0:	muleq	r2, r4, r1
   11dd4:	andeq	sl, r1, r8, ror #6
   11dd8:	andeq	sl, r1, r8, lsl #8
   11ddc:	andeq	sl, r1, r0, lsl #11
   11de0:	andeq	sl, r1, r0, ror #12
   11de4:	andeq	sl, r1, r0, ror #14
   11de8:	andeq	sl, r1, r0, lsl r8
   11dec:	andeq	sl, r1, r0, asr #16
   11df0:	andeq	sl, r1, r8, ror r8
   11df4:	andeq	sl, r1, r4, lsl r9
   11df8:	andeq	sl, r1, r4, ror #3
   11dfc:	muleq	r1, r0, r9
   11e00:	andeq	sl, r1, r8, lsl r3
   11e04:	andeq	sl, r1, r8, ror sl
   11e08:	muleq	r1, r0, sl
   11e0c:			; <UNDEFINED> instruction: 0x0001aab8
   11e10:	andeq	sl, r1, r8, asr #21
   11e14:	andeq	sl, r1, r4, lsl fp
   11e18:	andeq	sl, r1, r0, lsr fp
   11e1c:	andeq	fp, r1, ip, lsr #7
   11e20:	andeq	sl, r1, r0, ror #26
   11e24:	andeq	sl, r1, ip, asr #21
   11e28:	cmp	r3, #0
   11e2c:	push	{r4, r5, r6, r7, r8, lr}
   11e30:	mov	r6, r2
   11e34:	sub	sp, sp, #112	; 0x70
   11e38:	movne	r2, #512	; 0x200
   11e3c:	moveq	r2, #0
   11e40:	mov	r5, r0
   11e44:	mov	r4, r1
   11e48:	ldr	r0, [r0]
   11e4c:	ldr	r1, [r1, #24]
   11e50:	mov	r7, r3
   11e54:	bl	10ff4 <unlinkat@plt>
   11e58:	cmp	r0, #0
   11e5c:	bne	11eac <__assert_fail@plt+0xbdc>
   11e60:	ldrb	r3, [r6, #18]
   11e64:	cmp	r3, #0
   11e68:	beq	11f78 <__assert_fail@plt+0xca8>
   11e6c:	cmp	r7, #0
   11e70:	mov	r2, #5
   11e74:	ldrne	r1, [pc, #396]	; 12008 <__assert_fail@plt+0xd38>
   11e78:	ldreq	r1, [pc, #396]	; 1200c <__assert_fail@plt+0xd3c>
   11e7c:	bl	11060 <dcgettext@plt>
   11e80:	ldr	r1, [r4, #28]
   11e84:	mov	r5, r0
   11e88:	mov	r0, #4
   11e8c:	bl	18624 <__assert_fail@plt+0x7354>
   11e90:	mov	r1, r5
   11e94:	mov	r2, r0
   11e98:	mov	r0, #1
   11e9c:	bl	111a4 <__printf_chk@plt>
   11ea0:	mov	r0, #2
   11ea4:	add	sp, sp, #112	; 0x70
   11ea8:	pop	{r4, r5, r6, r7, r8, pc}
   11eac:	bl	11180 <__errno_location@plt>
   11eb0:	ldr	r7, [r0]
   11eb4:	mov	r8, r0
   11eb8:	cmp	r7, #30
   11ebc:	beq	11f90 <__assert_fail@plt+0xcc0>
   11ec0:	ldrb	r3, [r6]
   11ec4:	cmp	r3, #0
   11ec8:	bne	11f5c <__assert_fail@plt+0xc8c>
   11ecc:	ldrh	r3, [r4, #56]	; 0x38
   11ed0:	cmp	r3, #4
   11ed4:	beq	11fc0 <__assert_fail@plt+0xcf0>
   11ed8:	mov	r2, #5
   11edc:	ldr	r1, [pc, #300]	; 12010 <__assert_fail@plt+0xd40>
   11ee0:	mov	r0, #0
   11ee4:	bl	11060 <dcgettext@plt>
   11ee8:	ldr	r1, [r4, #28]
   11eec:	mov	r5, r0
   11ef0:	mov	r0, #4
   11ef4:	bl	18624 <__assert_fail@plt+0x7354>
   11ef8:	mov	r2, r5
   11efc:	mov	r1, r7
   11f00:	mov	r3, r0
   11f04:	mov	r0, #0
   11f08:	bl	110f0 <error@plt>
   11f0c:	ldr	r3, [r4, #4]
   11f10:	ldr	r2, [r3, #48]	; 0x30
   11f14:	cmp	r2, #0
   11f18:	blt	11f50 <__assert_fail@plt+0xc80>
   11f1c:	ldr	r2, [r3, #16]
   11f20:	cmp	r2, #0
   11f24:	moveq	r1, #1
   11f28:	beq	11f3c <__assert_fail@plt+0xc6c>
   11f2c:	b	11f50 <__assert_fail@plt+0xc80>
   11f30:	ldr	r2, [r3, #16]
   11f34:	cmp	r2, #0
   11f38:	bne	11f50 <__assert_fail@plt+0xc80>
   11f3c:	str	r1, [r3, #16]
   11f40:	ldr	r3, [r3, #4]
   11f44:	ldr	r2, [r3, #48]	; 0x30
   11f48:	cmp	r2, #0
   11f4c:	bge	11f30 <__assert_fail@plt+0xc60>
   11f50:	mov	r0, #4
   11f54:	add	sp, sp, #112	; 0x70
   11f58:	pop	{r4, r5, r6, r7, r8, pc}
   11f5c:	cmp	r7, #20
   11f60:	beq	11f78 <__assert_fail@plt+0xca8>
   11f64:	ble	11f84 <__assert_fail@plt+0xcb4>
   11f68:	cmp	r7, #22
   11f6c:	beq	11f78 <__assert_fail@plt+0xca8>
   11f70:	cmp	r7, #84	; 0x54
   11f74:	bne	11ecc <__assert_fail@plt+0xbfc>
   11f78:	mov	r0, #2
   11f7c:	add	sp, sp, #112	; 0x70
   11f80:	pop	{r4, r5, r6, r7, r8, pc}
   11f84:	cmp	r7, #2
   11f88:	bne	11ecc <__assert_fail@plt+0xbfc>
   11f8c:	b	11f78 <__assert_fail@plt+0xca8>
   11f90:	mov	r3, #256	; 0x100
   11f94:	ldr	r1, [r5]
   11f98:	ldr	r2, [r4, #24]
   11f9c:	mov	r0, #3
   11fa0:	str	r3, [sp]
   11fa4:	add	r3, sp, #8
   11fa8:	bl	11090 <__fxstatat64@plt>
   11fac:	cmp	r0, #0
   11fb0:	bne	11ff4 <__assert_fail@plt+0xd24>
   11fb4:	mov	r3, #30
   11fb8:	str	r3, [r8]
   11fbc:	b	11ec0 <__assert_fail@plt+0xbf0>
   11fc0:	sub	r2, r7, #17
   11fc4:	cmp	r2, #22
   11fc8:	bhi	11ed8 <__assert_fail@plt+0xc08>
   11fcc:	ldr	r3, [pc, #64]	; 12014 <__assert_fail@plt+0xd44>
   11fd0:	mvn	r3, r3, lsr r2
   11fd4:	tst	r3, #1
   11fd8:	bne	11ed8 <__assert_fail@plt+0xc08>
   11fdc:	ldr	r3, [r4, #32]
   11fe0:	cmp	r3, #13
   11fe4:	cmpne	r3, #1
   11fe8:	moveq	r7, r3
   11fec:	streq	r3, [r8]
   11ff0:	b	11ed8 <__assert_fail@plt+0xc08>
   11ff4:	ldr	r3, [r8]
   11ff8:	cmp	r3, #2
   11ffc:	moveq	r7, r3
   12000:	bne	11fb4 <__assert_fail@plt+0xce4>
   12004:	b	11ec0 <__assert_fail@plt+0xbf0>
   12008:	andeq	sl, r1, r4, ror lr
   1200c:	andeq	sl, r1, ip, lsl #29
   12010:	muleq	r1, r8, lr
   12014:	subeq	r0, r0, r9, lsl r0
   12018:	push	{r4, r5, r6, r8, r9, lr}
   1201c:	mvn	r9, #0
   12020:	ldrd	r4, [r2, #48]	; 0x30
   12024:	mvn	r8, #0
   12028:	sub	sp, sp, #8
   1202c:	cmp	r5, r9
   12030:	cmpeq	r4, r8
   12034:	mov	r6, r2
   12038:	beq	12054 <__assert_fail@plt+0xd84>
   1203c:	cmp	r4, #0
   12040:	sbcs	r3, r5, #0
   12044:	movge	r0, #0
   12048:	blt	120a4 <__assert_fail@plt+0xdd4>
   1204c:	add	sp, sp, #8
   12050:	pop	{r4, r5, r6, r8, r9, pc}
   12054:	mov	r3, #256	; 0x100
   12058:	mov	r2, r1
   1205c:	str	r3, [sp]
   12060:	mov	r1, r0
   12064:	mov	r3, r6
   12068:	mov	r0, #3
   1206c:	bl	11090 <__fxstatat64@plt>
   12070:	cmp	r0, #0
   12074:	ldrdeq	r4, [r6, #48]	; 0x30
   12078:	beq	1203c <__assert_fail@plt+0xd6c>
   1207c:	mvn	r2, #1
   12080:	mvn	r3, #0
   12084:	strd	r2, [r6, #48]	; 0x30
   12088:	bl	11180 <__errno_location@plt>
   1208c:	ldr	r2, [r0]
   12090:	asr	r3, r2, #31
   12094:	strd	r2, [r6, #96]	; 0x60
   12098:	str	r2, [r0]
   1209c:	mvn	r0, #0
   120a0:	b	1204c <__assert_fail@plt+0xd7c>
   120a4:	bl	11180 <__errno_location@plt>
   120a8:	ldrd	r2, [r6, #96]	; 0x60
   120ac:	b	12098 <__assert_fail@plt+0xdc8>
   120b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120b4:	sub	sp, sp, #132	; 0x84
   120b8:	mov	r8, r3
   120bc:	ldr	r7, [sp, #172]	; 0xac
   120c0:	ldr	r3, [r1, #28]
   120c4:	cmp	r7, #0
   120c8:	mov	r6, r1
   120cc:	mov	r4, r2
   120d0:	str	r3, [sp, #12]
   120d4:	ldr	r9, [r1, #24]
   120d8:	str	r0, [sp, #16]
   120dc:	beq	12384 <__assert_fail@plt+0x10b4>
   120e0:	mvn	fp, #0
   120e4:	mov	r3, #2
   120e8:	mvn	sl, #0
   120ec:	str	r3, [r7]
   120f0:	mov	r2, #51456	; 0xc900
   120f4:	mov	r1, r9
   120f8:	strd	sl, [sp, #72]	; 0x48
   120fc:	bl	11174 <openat64@plt>
   12100:	cmp	r4, #0
   12104:	movne	fp, #4
   12108:	moveq	fp, #0
   1210c:	subs	r4, r0, #0
   12110:	blt	121c0 <__assert_fail@plt+0xef0>
   12114:	bl	11234 <fdopendir@plt>
   12118:	subs	r5, r0, #0
   1211c:	beq	12494 <__assert_fail@plt+0x11c4>
   12120:	bl	11180 <__errno_location@plt>
   12124:	mov	r3, #0
   12128:	mov	sl, r0
   1212c:	str	r3, [r0]
   12130:	b	1215c <__assert_fail@plt+0xe8c>
   12134:	ldrb	r3, [r0, #20]
   12138:	cmp	r3, #46	; 0x2e
   1213c:	movne	r3, #1
   12140:	moveq	r3, #2
   12144:	ldrb	r4, [r2, r3]
   12148:	cmp	r4, #47	; 0x2f
   1214c:	cmpne	r4, #0
   12150:	moveq	r4, #1
   12154:	movne	r4, #0
   12158:	bne	12364 <__assert_fail@plt+0x1094>
   1215c:	mov	r0, r5
   12160:	bl	11228 <readdir64@plt>
   12164:	cmp	r0, #0
   12168:	beq	121a0 <__assert_fail@plt+0xed0>
   1216c:	ldrb	r3, [r0, #19]
   12170:	add	r2, r0, #19
   12174:	cmp	r3, #46	; 0x2e
   12178:	beq	12134 <__assert_fail@plt+0xe64>
   1217c:	ldr	r3, [sl]
   12180:	mov	r0, r5
   12184:	str	r3, [sp, #20]
   12188:	bl	112c4 <closedir@plt>
   1218c:	ldr	r3, [sp, #20]
   12190:	mov	r4, #0
   12194:	str	r3, [sl]
   12198:	mov	r3, #3
   1219c:	b	121c8 <__assert_fail@plt+0xef8>
   121a0:	ldr	r4, [sl]
   121a4:	mov	r0, r5
   121a8:	bl	112c4 <closedir@plt>
   121ac:	cmp	r4, #0
   121b0:	str	r4, [sl]
   121b4:	moveq	r3, #4
   121b8:	moveq	r4, #1
   121bc:	beq	121c8 <__assert_fail@plt+0xef8>
   121c0:	mov	r4, #0
   121c4:	mov	r3, #3
   121c8:	str	r3, [r7]
   121cc:	ldr	r3, [r6, #16]
   121d0:	cmp	r3, #0
   121d4:	bne	12330 <__assert_fail@plt+0x1060>
   121d8:	ldr	r3, [r8, #4]
   121dc:	cmp	r3, #5
   121e0:	beq	122ac <__assert_fail@plt+0xfdc>
   121e4:	ldrb	r2, [r8]
   121e8:	cmp	r2, #0
   121ec:	beq	1233c <__assert_fail@plt+0x106c>
   121f0:	cmp	r3, #3
   121f4:	bne	122ac <__assert_fail@plt+0xfdc>
   121f8:	cmp	fp, #0
   121fc:	movne	r6, #0
   12200:	beq	124ec <__assert_fail@plt+0x121c>
   12204:	cmp	fp, #4
   12208:	orrne	r4, r4, #1
   1220c:	bne	122c4 <__assert_fail@plt+0xff4>
   12210:	ldrb	r3, [r8, #9]
   12214:	cmp	r3, #0
   12218:	bne	122b8 <__assert_fail@plt+0xfe8>
   1221c:	ldrb	r3, [r8, #10]
   12220:	tst	r4, r3
   12224:	beq	124f8 <__assert_fail@plt+0x1228>
   12228:	ldr	r1, [sp, #12]
   1222c:	mov	r0, #4
   12230:	bl	18624 <__assert_fail@plt+0x7354>
   12234:	add	r5, sp, #24
   12238:	mov	r7, r0
   1223c:	mov	r1, r9
   12240:	ldr	r0, [sp, #16]
   12244:	mov	r2, r5
   12248:	bl	12018 <__assert_fail@plt+0xd48>
   1224c:	cmp	r0, #0
   12250:	bne	124b8 <__assert_fail@plt+0x11e8>
   12254:	cmp	r6, #0
   12258:	ldr	r3, [pc, #672]	; 12500 <__assert_fail@plt+0x1230>
   1225c:	ldrne	r1, [pc, #672]	; 12504 <__assert_fail@plt+0x1234>
   12260:	ldreq	r1, [pc, #672]	; 12508 <__assert_fail@plt+0x1238>
   12264:	mov	r2, #5
   12268:	ldr	r4, [r3]
   1226c:	bl	11060 <dcgettext@plt>
   12270:	ldr	r3, [pc, #660]	; 1250c <__assert_fail@plt+0x123c>
   12274:	mov	r6, r0
   12278:	mov	r0, r5
   1227c:	ldr	r5, [r3]
   12280:	bl	13480 <__assert_fail@plt+0x21b0>
   12284:	mov	r3, r5
   12288:	mov	r2, r6
   1228c:	mov	r1, #1
   12290:	str	r7, [sp, #4]
   12294:	str	r0, [sp]
   12298:	mov	r0, r4
   1229c:	bl	111bc <__fprintf_chk@plt>
   122a0:	bl	1946c <__assert_fail@plt+0x819c>
   122a4:	cmp	r0, #0
   122a8:	beq	12330 <__assert_fail@plt+0x1060>
   122ac:	mov	r0, #2
   122b0:	add	sp, sp, #132	; 0x84
   122b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122b8:	ldr	r3, [sp, #168]	; 0xa8
   122bc:	cmp	r3, #2
   122c0:	orrne	r4, r4, #1
   122c4:	ldr	r1, [sp, #12]
   122c8:	mov	r0, #4
   122cc:	bl	18624 <__assert_fail@plt+0x7354>
   122d0:	cmp	r4, #0
   122d4:	addne	r5, sp, #24
   122d8:	mov	r7, r0
   122dc:	bne	1223c <__assert_fail@plt+0xf6c>
   122e0:	cmp	r6, #0
   122e4:	ldr	r3, [pc, #532]	; 12500 <__assert_fail@plt+0x1230>
   122e8:	movne	r2, #5
   122ec:	ldrne	r1, [pc, #540]	; 12510 <__assert_fail@plt+0x1240>
   122f0:	moveq	r2, #5
   122f4:	ldreq	r1, [pc, #536]	; 12514 <__assert_fail@plt+0x1244>
   122f8:	movne	r0, r4
   122fc:	moveq	r0, r6
   12300:	ldr	r5, [r3]
   12304:	bl	11060 <dcgettext@plt>
   12308:	ldr	r3, [pc, #508]	; 1250c <__assert_fail@plt+0x123c>
   1230c:	str	r7, [sp]
   12310:	mov	r1, #1
   12314:	ldr	r3, [r3]
   12318:	mov	r2, r0
   1231c:	mov	r0, r5
   12320:	bl	111bc <__fprintf_chk@plt>
   12324:	bl	1946c <__assert_fail@plt+0x819c>
   12328:	cmp	r0, #0
   1232c:	bne	122ac <__assert_fail@plt+0xfdc>
   12330:	mov	r0, #3
   12334:	add	sp, sp, #132	; 0x84
   12338:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1233c:	cmp	r3, #3
   12340:	beq	12350 <__assert_fail@plt+0x1080>
   12344:	ldrb	r3, [r8, #17]
   12348:	cmp	r3, #0
   1234c:	beq	122ac <__assert_fail@plt+0xfdc>
   12350:	bl	18e28 <__assert_fail@plt+0x7b58>
   12354:	cmp	r0, #0
   12358:	beq	123a4 <__assert_fail@plt+0x10d4>
   1235c:	ldr	r3, [r8, #4]
   12360:	b	121f0 <__assert_fail@plt+0xf20>
   12364:	ldr	r3, [sl]
   12368:	mov	r0, r5
   1236c:	str	r3, [sp, #20]
   12370:	bl	112c4 <closedir@plt>
   12374:	ldr	r3, [sp, #20]
   12378:	str	r3, [sl]
   1237c:	mov	r3, #3
   12380:	b	121c8 <__assert_fail@plt+0xef8>
   12384:	mvn	r2, #0
   12388:	mvn	r3, #0
   1238c:	cmp	r4, #0
   12390:	strd	r2, [sp, #72]	; 0x48
   12394:	movne	r4, r7
   12398:	movne	fp, #4
   1239c:	moveq	fp, r4
   123a0:	b	121cc <__assert_fail@plt+0xefc>
   123a4:	ldr	r6, [sp, #16]
   123a8:	add	r5, sp, #24
   123ac:	mov	r2, r5
   123b0:	mov	r1, r9
   123b4:	mov	r0, r6
   123b8:	bl	12018 <__assert_fail@plt+0xd48>
   123bc:	cmp	r0, #0
   123c0:	bne	12450 <__assert_fail@plt+0x1180>
   123c4:	ldr	r3, [sp, #40]	; 0x28
   123c8:	and	r3, r3, #61440	; 0xf000
   123cc:	cmp	r3, #40960	; 0xa000
   123d0:	beq	1235c <__assert_fail@plt+0x108c>
   123d4:	mov	r3, #512	; 0x200
   123d8:	mov	r2, #2
   123dc:	mov	r1, r9
   123e0:	mov	r0, r6
   123e4:	bl	11018 <faccessat@plt>
   123e8:	cmp	r0, #0
   123ec:	beq	1235c <__assert_fail@plt+0x108c>
   123f0:	bl	11180 <__errno_location@plt>
   123f4:	ldr	r6, [r0]
   123f8:	cmp	r6, #13
   123fc:	bne	12458 <__assert_fail@plt+0x1188>
   12400:	cmp	fp, #0
   12404:	mov	r6, #1
   12408:	bne	12204 <__assert_fail@plt+0xf34>
   1240c:	mov	r2, r5
   12410:	mov	r1, r9
   12414:	ldr	r0, [sp, #16]
   12418:	bl	12018 <__assert_fail@plt+0xd48>
   1241c:	cmp	r0, #0
   12420:	bne	12450 <__assert_fail@plt+0x1180>
   12424:	ldr	r3, [sp, #40]	; 0x28
   12428:	and	r3, r3, #61440	; 0xf000
   1242c:	cmp	r3, #40960	; 0xa000
   12430:	beq	124a8 <__assert_fail@plt+0x11d8>
   12434:	cmp	r3, #16384	; 0x4000
   12438:	beq	12210 <__assert_fail@plt+0xf40>
   1243c:	ldr	r1, [sp, #12]
   12440:	mov	r0, #4
   12444:	bl	18624 <__assert_fail@plt+0x7354>
   12448:	mov	r7, r0
   1244c:	b	1223c <__assert_fail@plt+0xf6c>
   12450:	bl	11180 <__errno_location@plt>
   12454:	ldr	r6, [r0]
   12458:	ldr	r1, [sp, #12]
   1245c:	mov	r0, #4
   12460:	bl	18624 <__assert_fail@plt+0x7354>
   12464:	mov	r2, #5
   12468:	ldr	r1, [pc, #168]	; 12518 <__assert_fail@plt+0x1248>
   1246c:	mov	r4, r0
   12470:	mov	r0, #0
   12474:	bl	11060 <dcgettext@plt>
   12478:	mov	r3, r4
   1247c:	mov	r1, r6
   12480:	mov	r2, r0
   12484:	mov	r0, #0
   12488:	bl	110f0 <error@plt>
   1248c:	mov	r0, #4
   12490:	b	122b0 <__assert_fail@plt+0xfe0>
   12494:	mov	r0, r4
   12498:	bl	112a0 <close@plt>
   1249c:	mov	r4, r5
   124a0:	mov	r3, #3
   124a4:	b	121c8 <__assert_fail@plt+0xef8>
   124a8:	ldr	r3, [r8, #4]
   124ac:	cmp	r3, #3
   124b0:	bne	122ac <__assert_fail@plt+0xfdc>
   124b4:	b	1243c <__assert_fail@plt+0x116c>
   124b8:	bl	11180 <__errno_location@plt>
   124bc:	mov	r2, #5
   124c0:	ldr	r1, [pc, #80]	; 12518 <__assert_fail@plt+0x1248>
   124c4:	ldr	r4, [r0]
   124c8:	mov	r0, #0
   124cc:	bl	11060 <dcgettext@plt>
   124d0:	mov	r3, r7
   124d4:	mov	r1, r4
   124d8:	mov	r2, r0
   124dc:	mov	r0, #0
   124e0:	bl	110f0 <error@plt>
   124e4:	mov	r0, #4
   124e8:	b	122b0 <__assert_fail@plt+0xfe0>
   124ec:	mov	r6, fp
   124f0:	add	r5, sp, #24
   124f4:	b	1240c <__assert_fail@plt+0x113c>
   124f8:	mov	r6, #21
   124fc:	b	12458 <__assert_fail@plt+0x1188>
   12500:	andeq	ip, r2, r8, lsl #3
   12504:	strdeq	sl, [r1], -ip
   12508:	andeq	sl, r1, r0, lsr #30
   1250c:			; <UNDEFINED> instruction: 0x0002c1bc
   12510:	andeq	sl, r1, ip, lsr #29
   12514:	ldrdeq	sl, [r1], -ip
   12518:	muleq	r1, r8, lr
   1251c:	ldr	r3, [r0]
   12520:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12524:	cmp	r3, #0
   12528:	sub	sp, sp, #116	; 0x74
   1252c:	beq	12998 <__assert_fail@plt+0x16c8>
   12530:	mov	r9, r1
   12534:	ldrb	r1, [r1, #8]
   12538:	mov	r2, #0
   1253c:	mov	r4, #2
   12540:	cmp	r1, r2
   12544:	movne	r1, #600	; 0x258
   12548:	moveq	r1, #536	; 0x218
   1254c:	bl	193ec <__assert_fail@plt+0x811c>
   12550:	ldr	sl, [pc, #2032]	; 12d48 <__assert_fail@plt+0x1a78>
   12554:	mov	r6, r4
   12558:	mov	r8, r0
   1255c:	mov	r0, r8
   12560:	bl	15050 <__assert_fail@plt+0x3d80>
   12564:	subs	r7, r0, #0
   12568:	beq	1261c <__assert_fail@plt+0x134c>
   1256c:	ldrh	r2, [r7, #56]	; 0x38
   12570:	sub	r3, r2, #1
   12574:	cmp	r3, #12
   12578:	ldrls	pc, [pc, r3, lsl #2]
   1257c:	b	127b0 <__assert_fail@plt+0x14e0>
   12580:	andeq	r2, r1, r8, lsl r7
   12584:	andeq	r2, r1, r4, ror #13
   12588:	andeq	r2, r1, r4, ror r6
   1258c:	andeq	r2, r1, r4, ror r6
   12590:			; <UNDEFINED> instruction: 0x000127b0
   12594:	andeq	r2, r1, r4, ror r6
   12598:			; <UNDEFINED> instruction: 0x000125b4
   1259c:	andeq	r2, r1, r4, ror r6
   125a0:			; <UNDEFINED> instruction: 0x000127b0
   125a4:	andeq	r2, r1, r4, ror r6
   125a8:	andeq	r2, r1, r4, ror r6
   125ac:	andeq	r2, r1, r4, ror r6
   125b0:	andeq	r2, r1, r4, ror r6
   125b4:	mov	r2, #5
   125b8:	mov	r1, sl
   125bc:	mov	r0, #0
   125c0:	ldr	r4, [r7, #32]
   125c4:	bl	11060 <dcgettext@plt>
   125c8:	ldr	r2, [r7, #28]
   125cc:	mov	r1, #3
   125d0:	mov	r5, r0
   125d4:	mov	r0, #0
   125d8:	bl	186e0 <__assert_fail@plt+0x7410>
   125dc:	mov	r2, r5
   125e0:	mov	r1, r4
   125e4:	mov	r3, r0
   125e8:	mov	r0, #0
   125ec:	bl	110f0 <error@plt>
   125f0:	mov	r1, r7
   125f4:	mov	r2, #4
   125f8:	mov	r0, r8
   125fc:	bl	15708 <__assert_fail@plt+0x4438>
   12600:	mov	r0, r8
   12604:	bl	15050 <__assert_fail@plt+0x3d80>
   12608:	mov	r0, r8
   1260c:	bl	15050 <__assert_fail@plt+0x3d80>
   12610:	mov	r6, #4
   12614:	subs	r7, r0, #0
   12618:	bne	1256c <__assert_fail@plt+0x129c>
   1261c:	bl	11180 <__errno_location@plt>
   12620:	mov	r5, r7
   12624:	mov	r4, r6
   12628:	ldr	r7, [r0]
   1262c:	mov	r6, r0
   12630:	cmp	r7, #0
   12634:	bne	12b4c <__assert_fail@plt+0x187c>
   12638:	mov	r0, r8
   1263c:	bl	14ef0 <__assert_fail@plt+0x3c20>
   12640:	cmp	r0, #0
   12644:	beq	1299c <__assert_fail@plt+0x16cc>
   12648:	mov	r2, #5
   1264c:	ldr	r1, [pc, #1784]	; 12d4c <__assert_fail@plt+0x1a7c>
   12650:	mov	r0, #0
   12654:	ldr	r4, [r6]
   12658:	bl	11060 <dcgettext@plt>
   1265c:	mov	r1, r4
   12660:	mov	r4, #4
   12664:	mov	r2, r0
   12668:	mov	r0, #0
   1266c:	bl	110f0 <error@plt>
   12670:	b	1299c <__assert_fail@plt+0x16cc>
   12674:	cmp	r2, #6
   12678:	beq	128ec <__assert_fail@plt+0x161c>
   1267c:	bic	r2, r2, #2
   12680:	sub	r4, r2, #4
   12684:	mov	r1, #0
   12688:	mov	r3, #3
   1268c:	clz	r4, r4
   12690:	lsr	r4, r4, #5
   12694:	str	r1, [sp, #4]
   12698:	str	r3, [sp]
   1269c:	ldr	r0, [r8, #32]
   126a0:	mov	r2, r4
   126a4:	mov	r3, r9
   126a8:	mov	r1, r7
   126ac:	bl	120b0 <__assert_fail@plt+0xde0>
   126b0:	cmp	r0, #2
   126b4:	mov	r5, r0
   126b8:	beq	129a8 <__assert_fail@plt+0x16d8>
   126bc:	sub	r3, r5, #2
   126c0:	cmp	r3, #2
   126c4:	bhi	12d34 <__assert_fail@plt+0x1a64>
   126c8:	cmp	r5, #4
   126cc:	moveq	r6, r5
   126d0:	beq	1255c <__assert_fail@plt+0x128c>
   126d4:	cmp	r5, #3
   126d8:	cmpeq	r6, #2
   126dc:	moveq	r6, r5
   126e0:	b	1255c <__assert_fail@plt+0x128c>
   126e4:	mov	r2, #5
   126e8:	ldr	r1, [pc, #1632]	; 12d50 <__assert_fail@plt+0x1a80>
   126ec:	mov	r0, #0
   126f0:	bl	11060 <dcgettext@plt>
   126f4:	ldr	r2, [r7, #28]
   126f8:	mov	r1, #3
   126fc:	mov	r4, r0
   12700:	mov	r0, #0
   12704:	bl	186e0 <__assert_fail@plt+0x7410>
   12708:	mov	r2, r4
   1270c:	mov	r1, #0
   12710:	mov	r3, r0
   12714:	b	125e8 <__assert_fail@plt+0x1318>
   12718:	ldrb	r4, [r9, #9]
   1271c:	cmp	r4, #0
   12720:	bne	12810 <__assert_fail@plt+0x1540>
   12724:	ldrb	r3, [r9, #10]
   12728:	cmp	r3, #0
   1272c:	bne	12a6c <__assert_fail@plt+0x179c>
   12730:	mov	r5, #21
   12734:	mov	r2, #5
   12738:	ldr	r1, [pc, #1556]	; 12d54 <__assert_fail@plt+0x1a84>
   1273c:	mov	r0, #0
   12740:	bl	11060 <dcgettext@plt>
   12744:	ldr	r1, [r7, #28]
   12748:	mov	r4, r0
   1274c:	mov	r0, #4
   12750:	bl	18624 <__assert_fail@plt+0x7354>
   12754:	mov	r2, r4
   12758:	mov	r1, r5
   1275c:	mov	r3, r0
   12760:	mov	r0, #0
   12764:	bl	110f0 <error@plt>
   12768:	ldr	r3, [r7, #4]
   1276c:	ldr	r2, [r3, #48]	; 0x30
   12770:	cmp	r2, #0
   12774:	blt	125f0 <__assert_fail@plt+0x1320>
   12778:	ldr	r2, [r3, #16]
   1277c:	cmp	r2, #0
   12780:	moveq	r1, #1
   12784:	beq	12798 <__assert_fail@plt+0x14c8>
   12788:	b	125f0 <__assert_fail@plt+0x1320>
   1278c:	ldr	r2, [r3, #16]
   12790:	cmp	r2, #0
   12794:	bne	125f0 <__assert_fail@plt+0x1320>
   12798:	str	r1, [r3, #16]
   1279c:	ldr	r3, [r3, #4]
   127a0:	ldr	r2, [r3, #48]	; 0x30
   127a4:	cmp	r2, #0
   127a8:	bge	1278c <__assert_fail@plt+0x14bc>
   127ac:	b	125f0 <__assert_fail@plt+0x1320>
   127b0:	mov	r2, #5
   127b4:	ldr	r1, [pc, #1436]	; 12d58 <__assert_fail@plt+0x1a88>
   127b8:	mov	r0, #0
   127bc:	bl	11060 <dcgettext@plt>
   127c0:	ldr	r2, [r7, #28]
   127c4:	mov	r1, #3
   127c8:	ldrh	r5, [r7, #56]	; 0x38
   127cc:	mov	r4, r0
   127d0:	mov	r0, #0
   127d4:	bl	186e0 <__assert_fail@plt+0x7410>
   127d8:	ldr	ip, [pc, #1404]	; 12d5c <__assert_fail@plt+0x1a8c>
   127dc:	mov	r1, #0
   127e0:	mov	r3, r5
   127e4:	mov	r2, r4
   127e8:	stm	sp, {r0, ip}
   127ec:	mov	r0, r1
   127f0:	bl	110f0 <error@plt>
   127f4:	bl	11294 <abort@plt>
   127f8:	ldr	r4, [fp]
   127fc:	mov	r0, r5
   12800:	bl	112c4 <closedir@plt>
   12804:	cmp	r4, #0
   12808:	str	r4, [fp]
   1280c:	bne	12af0 <__assert_fail@plt+0x1820>
   12810:	ldr	r5, [r7, #48]	; 0x30
   12814:	cmp	r5, #0
   12818:	bne	12860 <__assert_fail@plt+0x1590>
   1281c:	ldr	r4, [r7, #24]
   12820:	mov	r0, r4
   12824:	bl	13140 <__assert_fail@plt+0x1e70>
   12828:	ldrb	r3, [r0]
   1282c:	cmp	r3, #46	; 0x2e
   12830:	beq	129c4 <__assert_fail@plt+0x16f4>
   12834:	ldr	ip, [r9, #12]
   12838:	cmp	ip, #0
   1283c:	beq	12854 <__assert_fail@plt+0x1584>
   12840:	ldrd	r0, [r7, #160]	; 0xa0
   12844:	ldrd	r2, [ip]
   12848:	cmp	r1, r3
   1284c:	cmpeq	r0, r2
   12850:	beq	12b74 <__assert_fail@plt+0x18a4>
   12854:	ldrb	r3, [r9, #16]
   12858:	cmp	r3, #0
   1285c:	bne	12bf0 <__assert_fail@plt+0x1920>
   12860:	add	r4, sp, #8
   12864:	mov	r3, #2
   12868:	ldr	r0, [r8, #32]
   1286c:	stm	sp, {r3, r4}
   12870:	mov	r2, #1
   12874:	mov	r3, r9
   12878:	mov	r1, r7
   1287c:	bl	120b0 <__assert_fail@plt+0xde0>
   12880:	cmp	r0, #2
   12884:	mov	r5, r0
   12888:	beq	12b04 <__assert_fail@plt+0x1834>
   1288c:	ldr	r3, [r7, #4]
   12890:	ldr	r2, [r3, #48]	; 0x30
   12894:	cmp	r2, #0
   12898:	blt	128d0 <__assert_fail@plt+0x1600>
   1289c:	ldr	r2, [r3, #16]
   128a0:	cmp	r2, #0
   128a4:	moveq	r1, #1
   128a8:	beq	128bc <__assert_fail@plt+0x15ec>
   128ac:	b	128d0 <__assert_fail@plt+0x1600>
   128b0:	ldr	r2, [r3, #16]
   128b4:	cmp	r2, #0
   128b8:	bne	128d0 <__assert_fail@plt+0x1600>
   128bc:	str	r1, [r3, #16]
   128c0:	ldr	r3, [r3, #4]
   128c4:	ldr	r2, [r3, #48]	; 0x30
   128c8:	cmp	r2, #0
   128cc:	bge	128b0 <__assert_fail@plt+0x15e0>
   128d0:	mov	r1, r7
   128d4:	mov	r2, #4
   128d8:	mov	r0, r8
   128dc:	bl	15708 <__assert_fail@plt+0x4438>
   128e0:	mov	r0, r8
   128e4:	bl	15050 <__assert_fail@plt+0x3d80>
   128e8:	b	126bc <__assert_fail@plt+0x13ec>
   128ec:	ldrb	r3, [r9, #8]
   128f0:	cmp	r3, #0
   128f4:	beq	1267c <__assert_fail@plt+0x13ac>
   128f8:	ldr	r3, [r7, #48]	; 0x30
   128fc:	cmp	r3, #0
   12900:	ble	1267c <__assert_fail@plt+0x13ac>
   12904:	ldrd	r4, [r7, #64]	; 0x40
   12908:	ldrd	r0, [r8, #16]
   1290c:	cmp	r5, r1
   12910:	cmpeq	r4, r0
   12914:	beq	1267c <__assert_fail@plt+0x13ac>
   12918:	ldr	r3, [r7, #4]
   1291c:	ldr	r2, [r3, #48]	; 0x30
   12920:	cmp	r2, #0
   12924:	blt	1295c <__assert_fail@plt+0x168c>
   12928:	ldr	r2, [r3, #16]
   1292c:	cmp	r2, #0
   12930:	moveq	r1, #1
   12934:	beq	12948 <__assert_fail@plt+0x1678>
   12938:	b	1295c <__assert_fail@plt+0x168c>
   1293c:	ldr	r2, [r3, #16]
   12940:	cmp	r2, #0
   12944:	bne	1295c <__assert_fail@plt+0x168c>
   12948:	str	r1, [r3, #16]
   1294c:	ldr	r3, [r3, #4]
   12950:	ldr	r2, [r3, #48]	; 0x30
   12954:	cmp	r2, #0
   12958:	bge	1293c <__assert_fail@plt+0x166c>
   1295c:	mov	r2, #5
   12960:	ldr	r1, [pc, #1016]	; 12d60 <__assert_fail@plt+0x1a90>
   12964:	mov	r0, #0
   12968:	bl	11060 <dcgettext@plt>
   1296c:	ldr	r1, [r7, #28]
   12970:	mov	r6, #4
   12974:	mov	r4, r0
   12978:	mov	r0, #4
   1297c:	bl	18624 <__assert_fail@plt+0x7354>
   12980:	mov	r1, #0
   12984:	mov	r2, r4
   12988:	mov	r3, r0
   1298c:	mov	r0, r1
   12990:	bl	110f0 <error@plt>
   12994:	b	1255c <__assert_fail@plt+0x128c>
   12998:	mov	r4, #2
   1299c:	mov	r0, r4
   129a0:	add	sp, sp, #116	; 0x74
   129a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129a8:	mov	r3, r4
   129ac:	mov	r1, r7
   129b0:	mov	r2, r9
   129b4:	add	r0, r8, #32
   129b8:	bl	11e28 <__assert_fail@plt+0xb58>
   129bc:	mov	r5, r0
   129c0:	b	126bc <__assert_fail@plt+0x13ec>
   129c4:	ldrb	r3, [r0, #1]
   129c8:	cmp	r3, #46	; 0x2e
   129cc:	movne	r3, #1
   129d0:	moveq	r3, #2
   129d4:	ldrb	r3, [r0, r3]
   129d8:	cmp	r3, #47	; 0x2f
   129dc:	cmpne	r3, #0
   129e0:	bne	12834 <__assert_fail@plt+0x1564>
   129e4:	mov	r2, #5
   129e8:	ldr	r1, [pc, #884]	; 12d64 <__assert_fail@plt+0x1a94>
   129ec:	mov	r0, r5
   129f0:	bl	11060 <dcgettext@plt>
   129f4:	ldr	r2, [pc, #876]	; 12d68 <__assert_fail@plt+0x1a98>
   129f8:	mov	r1, #4
   129fc:	mov	r4, r0
   12a00:	mov	r0, r5
   12a04:	bl	185b8 <__assert_fail@plt+0x72e8>
   12a08:	ldr	r2, [pc, #860]	; 12d6c <__assert_fail@plt+0x1a9c>
   12a0c:	mov	r1, #4
   12a10:	mov	r6, r0
   12a14:	mov	r0, #1
   12a18:	bl	185b8 <__assert_fail@plt+0x72e8>
   12a1c:	ldr	r2, [r7, #28]
   12a20:	mov	r1, #4
   12a24:	mov	fp, r0
   12a28:	mov	r0, #2
   12a2c:	bl	185b8 <__assert_fail@plt+0x72e8>
   12a30:	mov	r3, r6
   12a34:	mov	r2, r4
   12a38:	mov	r1, r5
   12a3c:	str	fp, [sp]
   12a40:	mov	r6, #4
   12a44:	str	r0, [sp, #4]
   12a48:	mov	r0, r5
   12a4c:	bl	110f0 <error@plt>
   12a50:	mov	r1, r7
   12a54:	mov	r2, r6
   12a58:	mov	r0, r8
   12a5c:	bl	15708 <__assert_fail@plt+0x4438>
   12a60:	mov	r0, r8
   12a64:	bl	15050 <__assert_fail@plt+0x3d80>
   12a68:	b	1255c <__assert_fail@plt+0x128c>
   12a6c:	mov	r2, #51456	; 0xc900
   12a70:	ldr	r1, [r7, #24]
   12a74:	ldr	r0, [r8, #32]
   12a78:	bl	11174 <openat64@plt>
   12a7c:	subs	fp, r0, #0
   12a80:	blt	12af0 <__assert_fail@plt+0x1820>
   12a84:	bl	11234 <fdopendir@plt>
   12a88:	subs	r5, r0, #0
   12a8c:	beq	12d28 <__assert_fail@plt+0x1a58>
   12a90:	bl	11180 <__errno_location@plt>
   12a94:	mov	fp, r0
   12a98:	str	r4, [r0]
   12a9c:	b	12ac0 <__assert_fail@plt+0x17f0>
   12aa0:	ldrb	r3, [r0, #20]
   12aa4:	cmp	r3, #46	; 0x2e
   12aa8:	movne	r3, #1
   12aac:	moveq	r3, #2
   12ab0:	ldrb	r3, [r2, r3]
   12ab4:	cmp	r3, #47	; 0x2f
   12ab8:	cmpne	r3, #0
   12abc:	bne	12ae0 <__assert_fail@plt+0x1810>
   12ac0:	mov	r0, r5
   12ac4:	bl	11228 <readdir64@plt>
   12ac8:	cmp	r0, #0
   12acc:	beq	127f8 <__assert_fail@plt+0x1528>
   12ad0:	ldrb	r3, [r0, #19]
   12ad4:	add	r2, r0, #19
   12ad8:	cmp	r3, #46	; 0x2e
   12adc:	beq	12aa0 <__assert_fail@plt+0x17d0>
   12ae0:	ldr	r4, [fp]
   12ae4:	mov	r0, r5
   12ae8:	bl	112c4 <closedir@plt>
   12aec:	str	r4, [fp]
   12af0:	ldrb	r3, [r9, #10]
   12af4:	cmp	r3, #0
   12af8:	movne	r5, #39	; 0x27
   12afc:	bne	12734 <__assert_fail@plt+0x1464>
   12b00:	b	12730 <__assert_fail@plt+0x1460>
   12b04:	ldr	r4, [sp, #8]
   12b08:	cmp	r4, #4
   12b0c:	bne	1255c <__assert_fail@plt+0x128c>
   12b10:	mov	r3, #1
   12b14:	mov	r2, r9
   12b18:	mov	r1, r7
   12b1c:	add	r0, r8, #32
   12b20:	bl	11e28 <__assert_fail@plt+0xb58>
   12b24:	cmp	r0, #2
   12b28:	mov	r5, r0
   12b2c:	bne	1288c <__assert_fail@plt+0x15bc>
   12b30:	mov	r2, r4
   12b34:	mov	r1, r7
   12b38:	mov	r0, r8
   12b3c:	bl	15708 <__assert_fail@plt+0x4438>
   12b40:	mov	r0, r8
   12b44:	bl	15050 <__assert_fail@plt+0x3d80>
   12b48:	b	1255c <__assert_fail@plt+0x128c>
   12b4c:	mov	r2, #5
   12b50:	ldr	r1, [pc, #536]	; 12d70 <__assert_fail@plt+0x1aa0>
   12b54:	mov	r0, r5
   12b58:	bl	11060 <dcgettext@plt>
   12b5c:	mov	r1, r7
   12b60:	mov	r4, #4
   12b64:	mov	r2, r0
   12b68:	mov	r0, r5
   12b6c:	bl	110f0 <error@plt>
   12b70:	b	12638 <__assert_fail@plt+0x1368>
   12b74:	ldrd	r0, [r7, #64]	; 0x40
   12b78:	ldrd	r2, [ip, #8]
   12b7c:	cmp	r1, r3
   12b80:	cmpeq	r0, r2
   12b84:	bne	12854 <__assert_fail@plt+0x1584>
   12b88:	ldr	r1, [pc, #484]	; 12d74 <__assert_fail@plt+0x1aa4>
   12b8c:	ldr	r0, [r7, #28]
   12b90:	bl	10fdc <strcmp@plt>
   12b94:	mov	r2, #5
   12b98:	subs	r4, r0, #0
   12b9c:	bne	12cd8 <__assert_fail@plt+0x1a08>
   12ba0:	ldr	r1, [pc, #464]	; 12d78 <__assert_fail@plt+0x1aa8>
   12ba4:	bl	11060 <dcgettext@plt>
   12ba8:	ldr	r1, [r7, #28]
   12bac:	mov	r5, r0
   12bb0:	mov	r0, #4
   12bb4:	bl	18624 <__assert_fail@plt+0x7354>
   12bb8:	mov	r2, r5
   12bbc:	mov	r1, r4
   12bc0:	mov	r3, r0
   12bc4:	mov	r0, r4
   12bc8:	bl	110f0 <error@plt>
   12bcc:	ldr	r1, [pc, #424]	; 12d7c <__assert_fail@plt+0x1aac>
   12bd0:	mov	r2, #5
   12bd4:	mov	r0, #0
   12bd8:	bl	11060 <dcgettext@plt>
   12bdc:	mov	r1, #0
   12be0:	mov	r2, r0
   12be4:	mov	r0, r1
   12be8:	bl	110f0 <error@plt>
   12bec:	b	125f0 <__assert_fail@plt+0x1320>
   12bf0:	mov	r0, r4
   12bf4:	mov	r2, #0
   12bf8:	ldr	r1, [pc, #364]	; 12d6c <__assert_fail@plt+0x1a9c>
   12bfc:	bl	13564 <__assert_fail@plt+0x2294>
   12c00:	add	r4, sp, #8
   12c04:	mov	r2, r4
   12c08:	mov	r1, r0
   12c0c:	mov	fp, r0
   12c10:	mov	r0, #3
   12c14:	bl	112ac <__lxstat64@plt>
   12c18:	subs	r5, r0, #0
   12c1c:	bne	12c7c <__assert_fail@plt+0x19ac>
   12c20:	mov	r0, fp
   12c24:	bl	13684 <__assert_fail@plt+0x23b4>
   12c28:	ldrd	r0, [r8, #16]
   12c2c:	ldrd	r2, [sp, #8]
   12c30:	cmp	r1, r3
   12c34:	cmpeq	r0, r2
   12c38:	beq	12864 <__assert_fail@plt+0x1594>
   12c3c:	mov	r2, #5
   12c40:	ldr	r1, [pc, #280]	; 12d60 <__assert_fail@plt+0x1a90>
   12c44:	mov	r0, r5
   12c48:	bl	11060 <dcgettext@plt>
   12c4c:	ldr	r1, [r7, #28]
   12c50:	mov	r4, r0
   12c54:	mov	r0, #4
   12c58:	bl	18624 <__assert_fail@plt+0x7354>
   12c5c:	mov	r2, r4
   12c60:	mov	r1, r5
   12c64:	mov	r3, r0
   12c68:	mov	r0, r5
   12c6c:	bl	110f0 <error@plt>
   12c70:	mov	r2, #5
   12c74:	ldr	r1, [pc, #260]	; 12d80 <__assert_fail@plt+0x1ab0>
   12c78:	b	12bd4 <__assert_fail@plt+0x1904>
   12c7c:	mov	r2, #5
   12c80:	ldr	r1, [pc, #252]	; 12d84 <__assert_fail@plt+0x1ab4>
   12c84:	mov	r0, #0
   12c88:	bl	11060 <dcgettext@plt>
   12c8c:	mov	r2, fp
   12c90:	mov	r1, #4
   12c94:	mov	r4, r0
   12c98:	mov	r0, #0
   12c9c:	bl	185b8 <__assert_fail@plt+0x72e8>
   12ca0:	ldr	r2, [r7, #24]
   12ca4:	mov	r1, #4
   12ca8:	mov	r5, r0
   12cac:	mov	r0, #1
   12cb0:	bl	185b8 <__assert_fail@plt+0x72e8>
   12cb4:	mov	r1, #0
   12cb8:	mov	r3, r5
   12cbc:	mov	r2, r4
   12cc0:	str	r0, [sp]
   12cc4:	mov	r0, r1
   12cc8:	bl	110f0 <error@plt>
   12ccc:	mov	r0, fp
   12cd0:	bl	13684 <__assert_fail@plt+0x23b4>
   12cd4:	b	125f0 <__assert_fail@plt+0x1320>
   12cd8:	ldr	r1, [pc, #168]	; 12d88 <__assert_fail@plt+0x1ab8>
   12cdc:	mov	r0, #0
   12ce0:	bl	11060 <dcgettext@plt>
   12ce4:	ldr	r2, [r7, #28]
   12ce8:	mov	r1, #4
   12cec:	mov	r4, r0
   12cf0:	mov	r0, #0
   12cf4:	bl	185b8 <__assert_fail@plt+0x72e8>
   12cf8:	ldr	r2, [pc, #116]	; 12d74 <__assert_fail@plt+0x1aa4>
   12cfc:	mov	r1, #4
   12d00:	mov	r5, r0
   12d04:	mov	r0, #1
   12d08:	bl	185b8 <__assert_fail@plt+0x72e8>
   12d0c:	mov	r1, #0
   12d10:	mov	r3, r5
   12d14:	mov	r2, r4
   12d18:	str	r0, [sp]
   12d1c:	mov	r0, r1
   12d20:	bl	110f0 <error@plt>
   12d24:	b	12bcc <__assert_fail@plt+0x18fc>
   12d28:	mov	r0, fp
   12d2c:	bl	112a0 <close@plt>
   12d30:	b	12af0 <__assert_fail@plt+0x1820>
   12d34:	ldr	r3, [pc, #80]	; 12d8c <__assert_fail@plt+0x1abc>
   12d38:	ldr	r2, [pc, #80]	; 12d90 <__assert_fail@plt+0x1ac0>
   12d3c:	ldr	r1, [pc, #80]	; 12d94 <__assert_fail@plt+0x1ac4>
   12d40:	ldr	r0, [pc, #80]	; 12d98 <__assert_fail@plt+0x1ac8>
   12d44:	bl	112d0 <__assert_fail@plt>
   12d48:	andeq	fp, r1, r4, asr r1
   12d4c:	andeq	fp, r1, r0, ror #3
   12d50:	muleq	r1, r8, r0
   12d54:	muleq	r1, r8, lr
   12d58:	andeq	fp, r1, ip, ror #2
   12d5c:	andeq	fp, r1, r4, lsr #3
   12d60:	andeq	fp, r1, r0, asr #32
   12d64:	andeq	sl, r1, r4, asr #30
   12d68:	andeq	sl, r1, r8, ror pc
   12d6c:	andeq	sl, r1, ip, ror pc
   12d70:	andeq	sl, r1, r4, lsr pc
   12d74:	andeq	sl, r1, r8, lsr #25
   12d78:	andeq	sl, r1, r0, lsl #31
   12d7c:	andeq	sl, r1, ip, ror #31
   12d80:	andeq	fp, r1, r0, ror r0
   12d84:	andeq	fp, r1, r0, lsr #32
   12d88:			; <UNDEFINED> instruction: 0x0001afb0
   12d8c:	andeq	sl, r1, r0, ror lr
   12d90:	andeq	r0, r0, r2, ror #4
   12d94:			; <UNDEFINED> instruction: 0x0001b1bc
   12d98:	andeq	fp, r1, ip, asr #3
   12d9c:	mov	r0, #1
   12da0:	b	11a90 <__assert_fail@plt+0x7c0>
   12da4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12da8:	mov	r5, r1
   12dac:	sub	sp, sp, #12
   12db0:	mov	r4, r2
   12db4:	str	r2, [sp]
   12db8:	mov	r7, r3
   12dbc:	mov	sl, r0
   12dc0:	bl	11168 <strlen@plt>
   12dc4:	ldr	fp, [r5]
   12dc8:	cmp	fp, #0
   12dcc:	beq	12e94 <__assert_fail@plt+0x1bc4>
   12dd0:	mov	r3, #0
   12dd4:	mov	r8, r0
   12dd8:	str	r3, [sp, #4]
   12ddc:	mov	r6, r3
   12de0:	mvn	r9, #0
   12de4:	b	12e10 <__assert_fail@plt+0x1b40>
   12de8:	bl	11048 <memcmp@plt>
   12dec:	ldr	r3, [sp, #4]
   12df0:	cmp	r0, #0
   12df4:	movne	r3, #1
   12df8:	str	r3, [sp, #4]
   12dfc:	ldr	fp, [r5, #4]!
   12e00:	add	r6, r6, #1
   12e04:	cmp	fp, #0
   12e08:	add	r4, r4, r7
   12e0c:	beq	12e6c <__assert_fail@plt+0x1b9c>
   12e10:	mov	r2, r8
   12e14:	mov	r1, sl
   12e18:	mov	r0, fp
   12e1c:	bl	11288 <strncmp@plt>
   12e20:	cmp	r0, #0
   12e24:	mov	r0, fp
   12e28:	bne	12dfc <__assert_fail@plt+0x1b2c>
   12e2c:	bl	11168 <strlen@plt>
   12e30:	ldr	r3, [sp]
   12e34:	mov	r2, r7
   12e38:	mov	r1, r4
   12e3c:	cmp	r8, r0
   12e40:	mla	r0, r7, r9, r3
   12e44:	beq	12e84 <__assert_fail@plt+0x1bb4>
   12e48:	cmn	r9, #1
   12e4c:	moveq	r9, r6
   12e50:	beq	12dfc <__assert_fail@plt+0x1b2c>
   12e54:	ldr	r3, [sp]
   12e58:	cmp	r3, #0
   12e5c:	bne	12de8 <__assert_fail@plt+0x1b18>
   12e60:	mov	r3, #1
   12e64:	str	r3, [sp, #4]
   12e68:	b	12dfc <__assert_fail@plt+0x1b2c>
   12e6c:	ldr	r3, [sp, #4]
   12e70:	cmp	r3, #0
   12e74:	mvnne	r9, #1
   12e78:	mov	r0, r9
   12e7c:	add	sp, sp, #12
   12e80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e84:	mov	r9, r6
   12e88:	mov	r0, r9
   12e8c:	add	sp, sp, #12
   12e90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e94:	mvn	r9, #0
   12e98:	b	12e78 <__assert_fail@plt+0x1ba8>
   12e9c:	push	{r4, r5, r6, lr}
   12ea0:	mov	r6, r0
   12ea4:	ldr	r0, [r1]
   12ea8:	cmp	r0, #0
   12eac:	beq	12ee4 <__assert_fail@plt+0x1c14>
   12eb0:	mov	r4, r1
   12eb4:	mov	r5, #0
   12eb8:	b	12ecc <__assert_fail@plt+0x1bfc>
   12ebc:	ldr	r0, [r4, #4]!
   12ec0:	add	r5, r5, #1
   12ec4:	cmp	r0, #0
   12ec8:	beq	12ee4 <__assert_fail@plt+0x1c14>
   12ecc:	mov	r1, r6
   12ed0:	bl	10fdc <strcmp@plt>
   12ed4:	cmp	r0, #0
   12ed8:	bne	12ebc <__assert_fail@plt+0x1bec>
   12edc:	mov	r0, r5
   12ee0:	pop	{r4, r5, r6, pc}
   12ee4:	mvn	r0, #0
   12ee8:	pop	{r4, r5, r6, pc}
   12eec:	cmn	r2, #1
   12ef0:	push	{r4, r5, r6, lr}
   12ef4:	mov	r2, #5
   12ef8:	sub	sp, sp, #8
   12efc:	mov	r4, r1
   12f00:	mov	r5, r0
   12f04:	ldreq	r1, [pc, #76]	; 12f58 <__assert_fail@plt+0x1c88>
   12f08:	ldrne	r1, [pc, #76]	; 12f5c <__assert_fail@plt+0x1c8c>
   12f0c:	mov	r0, #0
   12f10:	bl	11060 <dcgettext@plt>
   12f14:	mov	r2, r4
   12f18:	mov	r1, #8
   12f1c:	mov	r6, r0
   12f20:	mov	r0, #0
   12f24:	bl	185b8 <__assert_fail@plt+0x72e8>
   12f28:	mov	r1, r5
   12f2c:	mov	r4, r0
   12f30:	mov	r0, #1
   12f34:	bl	18854 <__assert_fail@plt+0x7584>
   12f38:	mov	r1, #0
   12f3c:	mov	r3, r4
   12f40:	mov	r2, r6
   12f44:	str	r0, [sp]
   12f48:	mov	r0, r1
   12f4c:	bl	110f0 <error@plt>
   12f50:	add	sp, sp, #8
   12f54:	pop	{r4, r5, r6, pc}
   12f58:	andeq	fp, r1, r4, lsl #4
   12f5c:	andeq	fp, r1, r0, lsr #4
   12f60:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f64:	mov	r6, r0
   12f68:	ldr	r9, [pc, #232]	; 13058 <__assert_fail@plt+0x1d88>
   12f6c:	mov	r4, r1
   12f70:	mov	r7, r2
   12f74:	ldr	r1, [pc, #224]	; 1305c <__assert_fail@plt+0x1d8c>
   12f78:	mov	r2, #5
   12f7c:	mov	r0, #0
   12f80:	bl	11060 <dcgettext@plt>
   12f84:	ldr	r1, [r9]
   12f88:	bl	10fb8 <fputs_unlocked@plt>
   12f8c:	ldr	fp, [r6]
   12f90:	cmp	fp, #0
   12f94:	movne	r8, #0
   12f98:	movne	r5, r8
   12f9c:	movne	sl, #1
   12fa0:	bne	12fe0 <__assert_fail@plt+0x1d10>
   12fa4:	b	13024 <__assert_fail@plt+0x1d54>
   12fa8:	mov	r0, fp
   12fac:	ldr	r8, [r9]
   12fb0:	bl	18864 <__assert_fail@plt+0x7594>
   12fb4:	ldr	r2, [pc, #164]	; 13060 <__assert_fail@plt+0x1d90>
   12fb8:	mov	r1, sl
   12fbc:	mov	r3, r0
   12fc0:	mov	r0, r8
   12fc4:	bl	111bc <__fprintf_chk@plt>
   12fc8:	mov	r8, r4
   12fcc:	ldr	fp, [r6, #4]!
   12fd0:	add	r5, r5, #1
   12fd4:	cmp	fp, #0
   12fd8:	add	r4, r4, r7
   12fdc:	beq	13024 <__assert_fail@plt+0x1d54>
   12fe0:	cmp	r5, #0
   12fe4:	mov	r1, r4
   12fe8:	mov	r2, r7
   12fec:	mov	r0, r8
   12ff0:	beq	12fa8 <__assert_fail@plt+0x1cd8>
   12ff4:	bl	11048 <memcmp@plt>
   12ff8:	cmp	r0, #0
   12ffc:	bne	12fa8 <__assert_fail@plt+0x1cd8>
   13000:	mov	r0, fp
   13004:	ldr	fp, [r9]
   13008:	bl	18864 <__assert_fail@plt+0x7594>
   1300c:	ldr	r2, [pc, #80]	; 13064 <__assert_fail@plt+0x1d94>
   13010:	mov	r1, sl
   13014:	mov	r3, r0
   13018:	mov	r0, fp
   1301c:	bl	111bc <__fprintf_chk@plt>
   13020:	b	12fcc <__assert_fail@plt+0x1cfc>
   13024:	ldr	r0, [r9]
   13028:	ldr	r3, [r0, #20]
   1302c:	ldr	r2, [r0, #24]
   13030:	cmp	r3, r2
   13034:	bcs	1304c <__assert_fail@plt+0x1d7c>
   13038:	add	r1, r3, #1
   1303c:	mov	r2, #10
   13040:	str	r1, [r0, #20]
   13044:	strb	r2, [r3]
   13048:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1304c:	mov	r1, #10
   13050:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13054:	b	111f8 <__overflow@plt>
   13058:	andeq	ip, r2, r8, lsl #3
   1305c:	andeq	fp, r1, r0, asr #4
   13060:	andeq	fp, r1, r8, asr r2
   13064:	andeq	fp, r1, r0, ror #4
   13068:	push	{r4, r5, r6, r7, r8, lr}
   1306c:	mov	r7, r0
   13070:	ldrb	ip, [sp, #32]
   13074:	mov	r5, r1
   13078:	mov	r4, r2
   1307c:	cmp	ip, #0
   13080:	mov	r6, r3
   13084:	beq	130d4 <__assert_fail@plt+0x1e04>
   13088:	ldr	r3, [sp, #24]
   1308c:	mov	r2, r6
   13090:	mov	r1, r4
   13094:	mov	r0, r5
   13098:	bl	12da4 <__assert_fail@plt+0x1ad4>
   1309c:	cmp	r0, #0
   130a0:	popge	{r4, r5, r6, r7, r8, pc}
   130a4:	mov	r2, r0
   130a8:	mov	r1, r5
   130ac:	mov	r0, r7
   130b0:	bl	12eec <__assert_fail@plt+0x1c1c>
   130b4:	mov	r0, r4
   130b8:	ldr	r2, [sp, #24]
   130bc:	mov	r1, r6
   130c0:	bl	12f60 <__assert_fail@plt+0x1c90>
   130c4:	ldr	r3, [sp, #28]
   130c8:	blx	r3
   130cc:	mvn	r0, #0
   130d0:	pop	{r4, r5, r6, r7, r8, pc}
   130d4:	mov	r1, r2
   130d8:	mov	r0, r5
   130dc:	bl	12e9c <__assert_fail@plt+0x1bcc>
   130e0:	cmp	r0, #0
   130e4:	popge	{r4, r5, r6, r7, r8, pc}
   130e8:	b	130a4 <__assert_fail@plt+0x1dd4>
   130ec:	push	{r4, r5, r6, r7, r8, lr}
   130f0:	ldr	r7, [r1]
   130f4:	cmp	r7, #0
   130f8:	beq	13138 <__assert_fail@plt+0x1e68>
   130fc:	mov	r6, r3
   13100:	mov	r8, r0
   13104:	mov	r4, r2
   13108:	mov	r5, r1
   1310c:	b	1311c <__assert_fail@plt+0x1e4c>
   13110:	ldr	r7, [r5, #4]!
   13114:	cmp	r7, #0
   13118:	beq	13138 <__assert_fail@plt+0x1e68>
   1311c:	mov	r1, r4
   13120:	mov	r2, r6
   13124:	mov	r0, r8
   13128:	bl	11048 <memcmp@plt>
   1312c:	add	r4, r4, r6
   13130:	cmp	r0, #0
   13134:	bne	13110 <__assert_fail@plt+0x1e40>
   13138:	mov	r0, r7
   1313c:	pop	{r4, r5, r6, r7, r8, pc}
   13140:	ldrb	r3, [r0]
   13144:	cmp	r3, #47	; 0x2f
   13148:	bne	13158 <__assert_fail@plt+0x1e88>
   1314c:	ldrb	r3, [r0, #1]!
   13150:	cmp	r3, #47	; 0x2f
   13154:	beq	1314c <__assert_fail@plt+0x1e7c>
   13158:	cmp	r3, #0
   1315c:	bxeq	lr
   13160:	mov	r2, #0
   13164:	push	{lr}		; (str lr, [sp, #-4]!)
   13168:	mov	ip, r2
   1316c:	mov	r1, r0
   13170:	mov	lr, #1
   13174:	cmp	r3, #47	; 0x2f
   13178:	moveq	r2, lr
   1317c:	beq	1318c <__assert_fail@plt+0x1ebc>
   13180:	cmp	r2, #0
   13184:	movne	r0, r1
   13188:	movne	r2, ip
   1318c:	ldrb	r3, [r1, #1]!
   13190:	cmp	r3, #0
   13194:	bne	13174 <__assert_fail@plt+0x1ea4>
   13198:	pop	{pc}		; (ldr pc, [sp], #4)
   1319c:	push	{r4, lr}
   131a0:	mov	r4, r0
   131a4:	bl	11168 <strlen@plt>
   131a8:	cmp	r0, #1
   131ac:	popls	{r4, pc}
   131b0:	sub	r3, r0, #1
   131b4:	add	r2, r4, r3
   131b8:	ldrb	r1, [r4, r3]
   131bc:	cmp	r1, #47	; 0x2f
   131c0:	popne	{r4, pc}
   131c4:	cmp	r3, #1
   131c8:	beq	131dc <__assert_fail@plt+0x1f0c>
   131cc:	ldrb	r1, [r2, #-1]!
   131d0:	sub	r0, r3, #1
   131d4:	cmp	r1, #47	; 0x2f
   131d8:	beq	131e4 <__assert_fail@plt+0x1f14>
   131dc:	mov	r0, r3
   131e0:	pop	{r4, pc}
   131e4:	mov	r3, r0
   131e8:	b	131c4 <__assert_fail@plt+0x1ef4>
   131ec:	ldr	r3, [pc, #4]	; 131f8 <__assert_fail@plt+0x1f28>
   131f0:	str	r0, [r3]
   131f4:	bx	lr
   131f8:			; <UNDEFINED> instruction: 0x0002c1b0
   131fc:	push	{r4, r5, r6, lr}
   13200:	sub	sp, sp, #8
   13204:	ldr	r4, [pc, #248]	; 13304 <__assert_fail@plt+0x2034>
   13208:	ldr	r5, [r4]
   1320c:	mov	r0, r5
   13210:	bl	13648 <__assert_fail@plt+0x2378>
   13214:	cmp	r0, #0
   13218:	moveq	r4, r0
   1321c:	bne	13248 <__assert_fail@plt+0x1f78>
   13220:	mov	r0, r5
   13224:	bl	195b0 <__assert_fail@plt+0x82e0>
   13228:	cmp	r0, #0
   1322c:	moveq	r0, r4
   13230:	orrne	r0, r4, #1
   13234:	cmp	r0, #0
   13238:	bne	13274 <__assert_fail@plt+0x1fa4>
   1323c:	add	sp, sp, #8
   13240:	pop	{r4, r5, r6, lr}
   13244:	b	1333c <__assert_fail@plt+0x206c>
   13248:	mov	r3, #1
   1324c:	str	r3, [sp]
   13250:	mov	r0, r5
   13254:	mov	r2, #0
   13258:	mov	r3, #0
   1325c:	bl	136dc <__assert_fail@plt+0x240c>
   13260:	cmp	r0, #0
   13264:	beq	132d0 <__assert_fail@plt+0x2000>
   13268:	ldr	r5, [r4]
   1326c:	mov	r4, #0
   13270:	b	13220 <__assert_fail@plt+0x1f50>
   13274:	mov	r2, #5
   13278:	ldr	r1, [pc, #136]	; 13308 <__assert_fail@plt+0x2038>
   1327c:	mov	r0, #0
   13280:	bl	11060 <dcgettext@plt>
   13284:	ldr	r2, [pc, #128]	; 1330c <__assert_fail@plt+0x203c>
   13288:	ldr	r4, [r2]
   1328c:	cmp	r4, #0
   13290:	mov	r5, r0
   13294:	beq	132e8 <__assert_fail@plt+0x2018>
   13298:	bl	11180 <__errno_location@plt>
   1329c:	ldr	r6, [r0]
   132a0:	mov	r0, r4
   132a4:	bl	186cc <__assert_fail@plt+0x73fc>
   132a8:	mov	r1, r6
   132ac:	str	r5, [sp]
   132b0:	ldr	r2, [pc, #88]	; 13310 <__assert_fail@plt+0x2040>
   132b4:	mov	r3, r0
   132b8:	mov	r0, #0
   132bc:	bl	110f0 <error@plt>
   132c0:	bl	1333c <__assert_fail@plt+0x206c>
   132c4:	ldr	r3, [pc, #72]	; 13314 <__assert_fail@plt+0x2044>
   132c8:	ldr	r0, [r3]
   132cc:	bl	11024 <_exit@plt>
   132d0:	ldr	r0, [r4]
   132d4:	bl	13420 <__assert_fail@plt+0x2150>
   132d8:	ldr	r5, [r4]
   132dc:	adds	r4, r0, #0
   132e0:	movne	r4, #1
   132e4:	b	13220 <__assert_fail@plt+0x1f50>
   132e8:	bl	11180 <__errno_location@plt>
   132ec:	mov	r3, r5
   132f0:	ldr	r2, [pc, #32]	; 13318 <__assert_fail@plt+0x2048>
   132f4:	ldr	r1, [r0]
   132f8:	mov	r0, r4
   132fc:	bl	110f0 <error@plt>
   13300:	b	132c0 <__assert_fail@plt+0x1ff0>
   13304:	muleq	r2, r0, r1
   13308:	andeq	fp, r1, r8, ror #4
   1330c:			; <UNDEFINED> instruction: 0x0002c1b0
   13310:	andeq	fp, r1, ip, ror r2
   13314:	andeq	ip, r2, r4, lsr r1
   13318:	andeq	fp, r1, r0, lsl #5
   1331c:	ldr	r3, [pc, #4]	; 13328 <__assert_fail@plt+0x2058>
   13320:	str	r0, [r3]
   13324:	bx	lr
   13328:			; <UNDEFINED> instruction: 0x0002c1b4
   1332c:	ldr	r3, [pc, #4]	; 13338 <__assert_fail@plt+0x2068>
   13330:	strb	r0, [r3, #4]
   13334:	bx	lr
   13338:			; <UNDEFINED> instruction: 0x0002c1b4
   1333c:	ldr	r3, [pc, #192]	; 13404 <__assert_fail@plt+0x2134>
   13340:	push	{r4, r5, r6, lr}
   13344:	sub	sp, sp, #8
   13348:	ldr	r0, [r3]
   1334c:	bl	195b0 <__assert_fail@plt+0x82e0>
   13350:	cmp	r0, #0
   13354:	beq	13378 <__assert_fail@plt+0x20a8>
   13358:	ldr	r4, [pc, #168]	; 13408 <__assert_fail@plt+0x2138>
   1335c:	ldrb	r3, [r4, #4]
   13360:	cmp	r3, #0
   13364:	beq	13394 <__assert_fail@plt+0x20c4>
   13368:	bl	11180 <__errno_location@plt>
   1336c:	ldr	r3, [r0]
   13370:	cmp	r3, #32
   13374:	bne	13394 <__assert_fail@plt+0x20c4>
   13378:	ldr	r3, [pc, #140]	; 1340c <__assert_fail@plt+0x213c>
   1337c:	ldr	r0, [r3]
   13380:	bl	195b0 <__assert_fail@plt+0x82e0>
   13384:	cmp	r0, #0
   13388:	bne	133dc <__assert_fail@plt+0x210c>
   1338c:	add	sp, sp, #8
   13390:	pop	{r4, r5, r6, pc}
   13394:	mov	r2, #5
   13398:	ldr	r1, [pc, #112]	; 13410 <__assert_fail@plt+0x2140>
   1339c:	mov	r0, #0
   133a0:	bl	11060 <dcgettext@plt>
   133a4:	ldr	r4, [r4]
   133a8:	cmp	r4, #0
   133ac:	mov	r5, r0
   133b0:	beq	133e8 <__assert_fail@plt+0x2118>
   133b4:	bl	11180 <__errno_location@plt>
   133b8:	ldr	r6, [r0]
   133bc:	mov	r0, r4
   133c0:	bl	186cc <__assert_fail@plt+0x73fc>
   133c4:	mov	r1, r6
   133c8:	str	r5, [sp]
   133cc:	ldr	r2, [pc, #64]	; 13414 <__assert_fail@plt+0x2144>
   133d0:	mov	r3, r0
   133d4:	mov	r0, #0
   133d8:	bl	110f0 <error@plt>
   133dc:	ldr	r3, [pc, #52]	; 13418 <__assert_fail@plt+0x2148>
   133e0:	ldr	r0, [r3]
   133e4:	bl	11024 <_exit@plt>
   133e8:	bl	11180 <__errno_location@plt>
   133ec:	mov	r3, r5
   133f0:	ldr	r2, [pc, #36]	; 1341c <__assert_fail@plt+0x214c>
   133f4:	ldr	r1, [r0]
   133f8:	mov	r0, r4
   133fc:	bl	110f0 <error@plt>
   13400:	b	133dc <__assert_fail@plt+0x210c>
   13404:	muleq	r2, r4, r1
   13408:			; <UNDEFINED> instruction: 0x0002c1b4
   1340c:	andeq	ip, r2, r8, lsl #3
   13410:	andeq	fp, r1, r4, lsl #5
   13414:	andeq	fp, r1, ip, ror r2
   13418:	andeq	ip, r2, r4, lsr r1
   1341c:	andeq	fp, r1, r0, lsl #5
   13420:	push	{r4, lr}
   13424:	subs	r4, r0, #0
   13428:	sub	sp, sp, #8
   1342c:	beq	13448 <__assert_fail@plt+0x2178>
   13430:	bl	11120 <__freading@plt>
   13434:	cmp	r0, #0
   13438:	beq	13448 <__assert_fail@plt+0x2178>
   1343c:	ldr	r3, [r4]
   13440:	tst	r3, #256	; 0x100
   13444:	bne	13458 <__assert_fail@plt+0x2188>
   13448:	mov	r0, r4
   1344c:	add	sp, sp, #8
   13450:	pop	{r4, lr}
   13454:	b	10fe8 <fflush@plt>
   13458:	mov	r3, #1
   1345c:	str	r3, [sp]
   13460:	mov	r2, #0
   13464:	mov	r3, #0
   13468:	mov	r0, r4
   1346c:	bl	136dc <__assert_fail@plt+0x240c>
   13470:	mov	r0, r4
   13474:	add	sp, sp, #8
   13478:	pop	{r4, lr}
   1347c:	b	10fe8 <fflush@plt>
   13480:	ldr	r3, [r0, #16]
   13484:	and	r3, r3, #61440	; 0xf000
   13488:	cmp	r3, #32768	; 0x8000
   1348c:	beq	134d0 <__assert_fail@plt+0x2200>
   13490:	cmp	r3, #16384	; 0x4000
   13494:	mov	r2, #5
   13498:	beq	13504 <__assert_fail@plt+0x2234>
   1349c:	cmp	r3, #40960	; 0xa000
   134a0:	beq	13510 <__assert_fail@plt+0x2240>
   134a4:	cmp	r3, #24576	; 0x6000
   134a8:	beq	1351c <__assert_fail@plt+0x224c>
   134ac:	cmp	r3, #8192	; 0x2000
   134b0:	beq	13528 <__assert_fail@plt+0x2258>
   134b4:	cmp	r3, #4096	; 0x1000
   134b8:	beq	13534 <__assert_fail@plt+0x2264>
   134bc:	cmp	r3, #49152	; 0xc000
   134c0:	beq	134f8 <__assert_fail@plt+0x2228>
   134c4:	ldr	r1, [pc, #116]	; 13540 <__assert_fail@plt+0x2270>
   134c8:	mov	r0, #0
   134cc:	b	11060 <dcgettext@plt>
   134d0:	ldrd	r2, [r0, #48]	; 0x30
   134d4:	orrs	r3, r2, r3
   134d8:	mov	r2, #5
   134dc:	bne	134ec <__assert_fail@plt+0x221c>
   134e0:	ldr	r1, [pc, #92]	; 13544 <__assert_fail@plt+0x2274>
   134e4:	mov	r0, #0
   134e8:	b	11060 <dcgettext@plt>
   134ec:	ldr	r1, [pc, #84]	; 13548 <__assert_fail@plt+0x2278>
   134f0:	mov	r0, #0
   134f4:	b	11060 <dcgettext@plt>
   134f8:	ldr	r1, [pc, #76]	; 1354c <__assert_fail@plt+0x227c>
   134fc:	mov	r0, #0
   13500:	b	11060 <dcgettext@plt>
   13504:	ldr	r1, [pc, #68]	; 13550 <__assert_fail@plt+0x2280>
   13508:	mov	r0, #0
   1350c:	b	11060 <dcgettext@plt>
   13510:	ldr	r1, [pc, #60]	; 13554 <__assert_fail@plt+0x2284>
   13514:	mov	r0, #0
   13518:	b	11060 <dcgettext@plt>
   1351c:	ldr	r1, [pc, #52]	; 13558 <__assert_fail@plt+0x2288>
   13520:	mov	r0, #0
   13524:	b	11060 <dcgettext@plt>
   13528:	ldr	r1, [pc, #44]	; 1355c <__assert_fail@plt+0x228c>
   1352c:	mov	r0, #0
   13530:	b	11060 <dcgettext@plt>
   13534:	ldr	r1, [pc, #36]	; 13560 <__assert_fail@plt+0x2290>
   13538:	mov	r0, #0
   1353c:	b	11060 <dcgettext@plt>
   13540:	andeq	fp, r1, ip, lsl #6
   13544:	muleq	r1, r0, r2
   13548:	andeq	fp, r1, r4, lsr #5
   1354c:	andeq	fp, r1, r4, lsl #6
   13550:			; <UNDEFINED> instruction: 0x0001b2b4
   13554:	andeq	fp, r1, r0, asr #5
   13558:	ldrdeq	fp, [r1], -r0
   1355c:	andeq	fp, r1, r4, ror #5
   13560:	strdeq	fp, [r1], -ip
   13564:	push	{r4, lr}
   13568:	bl	13578 <__assert_fail@plt+0x22a8>
   1356c:	cmp	r0, #0
   13570:	popne	{r4, pc}
   13574:	bl	193ac <__assert_fail@plt+0x80dc>
   13578:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1357c:	mov	r6, r1
   13580:	mov	r8, r2
   13584:	mov	fp, r0
   13588:	bl	13140 <__assert_fail@plt+0x1e70>
   1358c:	mov	r4, r0
   13590:	bl	1319c <__assert_fail@plt+0x1ecc>
   13594:	sub	r4, r4, fp
   13598:	mov	r5, r0
   1359c:	mov	r0, r6
   135a0:	bl	11168 <strlen@plt>
   135a4:	cmp	r5, #0
   135a8:	add	r4, r4, r5
   135ac:	mov	r7, r0
   135b0:	beq	13624 <__assert_fail@plt+0x2354>
   135b4:	add	r3, fp, r4
   135b8:	ldrb	r3, [r3, #-1]
   135bc:	cmp	r3, #47	; 0x2f
   135c0:	beq	1363c <__assert_fail@plt+0x236c>
   135c4:	ldrb	r3, [r6]
   135c8:	cmp	r3, #47	; 0x2f
   135cc:	beq	1363c <__assert_fail@plt+0x236c>
   135d0:	mov	r5, #1
   135d4:	mov	sl, #47	; 0x2f
   135d8:	add	r0, r7, #1
   135dc:	add	r0, r0, r4
   135e0:	add	r0, r0, r5
   135e4:	bl	19528 <__assert_fail@plt+0x8258>
   135e8:	subs	r9, r0, #0
   135ec:	beq	1361c <__assert_fail@plt+0x234c>
   135f0:	mov	r2, r4
   135f4:	mov	r1, fp
   135f8:	bl	11138 <mempcpy@plt>
   135fc:	cmp	r8, #0
   13600:	mov	r2, r7
   13604:	mov	r1, r6
   13608:	strb	sl, [r0], r5
   1360c:	strne	r0, [r8]
   13610:	bl	11138 <mempcpy@plt>
   13614:	mov	r3, #0
   13618:	strb	r3, [r0]
   1361c:	mov	r0, r9
   13620:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13624:	ldrb	r3, [r6]
   13628:	cmp	r3, #47	; 0x2f
   1362c:	moveq	r5, #1
   13630:	moveq	sl, #46	; 0x2e
   13634:	movne	sl, r5
   13638:	b	135d8 <__assert_fail@plt+0x2308>
   1363c:	mov	r5, #0
   13640:	mov	sl, r5
   13644:	b	135d8 <__assert_fail@plt+0x2308>
   13648:	ldr	r2, [r0, #20]
   1364c:	ldr	r3, [r0, #16]
   13650:	cmp	r2, r3
   13654:	bhi	1367c <__assert_fail@plt+0x23ac>
   13658:	ldr	r3, [r0]
   1365c:	ldmib	r0, {r1, r2}
   13660:	ands	r3, r3, #256	; 0x100
   13664:	ldrne	r3, [r0, #44]	; 0x2c
   13668:	ldrne	r0, [r0, #36]	; 0x24
   1366c:	sub	r2, r2, r1
   13670:	subne	r3, r3, r0
   13674:	add	r0, r3, r2
   13678:	bx	lr
   1367c:	mov	r0, #0
   13680:	bx	lr
   13684:	push	{r4, r5, lr}
   13688:	sub	sp, sp, #12
   1368c:	mov	r5, r0
   13690:	bl	11180 <__errno_location@plt>
   13694:	mov	r2, #0
   13698:	mov	r4, r0
   1369c:	ldr	r3, [r0]
   136a0:	str	r2, [r4]
   136a4:	mov	r0, r5
   136a8:	str	r3, [sp]
   136ac:	str	r3, [sp, #4]
   136b0:	bl	1100c <free@plt>
   136b4:	ldr	r3, [r4]
   136b8:	add	r2, sp, #8
   136bc:	cmp	r3, #0
   136c0:	moveq	r3, #4
   136c4:	movne	r3, #0
   136c8:	add	r3, r2, r3
   136cc:	ldr	r3, [r3, #-8]
   136d0:	str	r3, [r4]
   136d4:	add	sp, sp, #12
   136d8:	pop	{r4, r5, pc}
   136dc:	push	{r4, r5, r6, r7, r8, lr}
   136e0:	sub	sp, sp, #8
   136e4:	ldmib	r0, {ip, lr}
   136e8:	mov	r4, r0
   136ec:	ldr	r5, [sp, #32]
   136f0:	cmp	lr, ip
   136f4:	beq	1370c <__assert_fail@plt+0x243c>
   136f8:	str	r5, [sp, #32]
   136fc:	mov	r0, r4
   13700:	add	sp, sp, #8
   13704:	pop	{r4, r5, r6, r7, r8, lr}
   13708:	b	111d4 <fseeko64@plt>
   1370c:	ldr	lr, [r0, #20]
   13710:	ldr	ip, [r0, #16]
   13714:	cmp	lr, ip
   13718:	bne	136f8 <__assert_fail@plt+0x2428>
   1371c:	ldr	r8, [r0, #36]	; 0x24
   13720:	cmp	r8, #0
   13724:	bne	136f8 <__assert_fail@plt+0x2428>
   13728:	mov	r6, r2
   1372c:	mov	r7, r3
   13730:	bl	111b0 <fileno@plt>
   13734:	mov	r2, r6
   13738:	mov	r3, r7
   1373c:	str	r5, [sp]
   13740:	bl	110c0 <lseek64@plt>
   13744:	mvn	r3, #0
   13748:	mvn	r2, #0
   1374c:	cmp	r1, r3
   13750:	cmpeq	r0, r2
   13754:	beq	13774 <__assert_fail@plt+0x24a4>
   13758:	ldr	r3, [r4]
   1375c:	strd	r0, [r4, #80]	; 0x50
   13760:	mov	r0, r8
   13764:	bic	r3, r3, #16
   13768:	str	r3, [r4]
   1376c:	add	sp, sp, #8
   13770:	pop	{r4, r5, r6, r7, r8, pc}
   13774:	mvn	r0, #0
   13778:	b	1376c <__assert_fail@plt+0x249c>
   1377c:	ldrd	r2, [r1, #8]
   13780:	push	{r4, r5}
   13784:	ldrd	r4, [r0, #8]
   13788:	cmp	r5, r3
   1378c:	cmpeq	r4, r2
   13790:	movne	r0, #0
   13794:	beq	137a0 <__assert_fail@plt+0x24d0>
   13798:	pop	{r4, r5}
   1379c:	bx	lr
   137a0:	ldrd	r4, [r0]
   137a4:	ldrd	r2, [r1]
   137a8:	cmp	r5, r3
   137ac:	cmpeq	r4, r2
   137b0:	moveq	r0, #1
   137b4:	movne	r0, #0
   137b8:	pop	{r4, r5}
   137bc:	bx	lr
   137c0:	push	{r4, lr}
   137c4:	mov	r2, r1
   137c8:	mov	r3, #0
   137cc:	ldrd	r0, [r0, #8]
   137d0:	bl	19fe8 <__assert_fail@plt+0x8d18>
   137d4:	mov	r0, r2
   137d8:	pop	{r4, pc}
   137dc:	push	{r4, lr}
   137e0:	mov	r2, r1
   137e4:	mov	r3, #0
   137e8:	ldrd	r0, [r0]
   137ec:	bl	19fe8 <__assert_fail@plt+0x8d18>
   137f0:	mov	r0, r2
   137f4:	pop	{r4, pc}
   137f8:	push	{r4, r5}
   137fc:	ldrd	r2, [r1]
   13800:	ldrd	r4, [r0]
   13804:	cmp	r5, r3
   13808:	cmpeq	r4, r2
   1380c:	moveq	r0, #1
   13810:	movne	r0, #0
   13814:	pop	{r4, r5}
   13818:	bx	lr
   1381c:	ldr	r2, [r0]
   13820:	ldr	r3, [r1]
   13824:	ldrd	r0, [r2, #160]	; 0xa0
   13828:	ldrd	r2, [r3, #160]	; 0xa0
   1382c:	cmp	r1, r3
   13830:	cmpeq	r0, r2
   13834:	movhi	r0, #1
   13838:	movls	r0, #0
   1383c:	movcc	r3, #1
   13840:	movcs	r3, #0
   13844:	sub	r0, r0, r3
   13848:	bx	lr
   1384c:	ldr	r3, [r0, #40]	; 0x28
   13850:	push	{r4, r5, r6, r7, r8, lr}
   13854:	cmp	r3, r2
   13858:	mov	r6, r0
   1385c:	mov	r5, r2
   13860:	mov	r4, r1
   13864:	ldr	r7, [r0, #44]	; 0x2c
   13868:	bcc	138e0 <__assert_fail@plt+0x2610>
   1386c:	ldr	r0, [r0, #8]
   13870:	cmp	r4, #0
   13874:	movne	r2, r0
   13878:	beq	1388c <__assert_fail@plt+0x25bc>
   1387c:	str	r4, [r2], #4
   13880:	ldr	r4, [r4, #8]
   13884:	cmp	r4, #0
   13888:	bne	1387c <__assert_fail@plt+0x25ac>
   1388c:	mov	r3, r7
   13890:	mov	r2, #4
   13894:	mov	r1, r5
   13898:	bl	11258 <qsort@plt>
   1389c:	ldr	lr, [r6, #8]
   138a0:	subs	r3, r5, #1
   138a4:	ldr	r0, [lr]
   138a8:	beq	13924 <__assert_fail@plt+0x2654>
   138ac:	mov	r2, lr
   138b0:	mov	ip, r0
   138b4:	b	138bc <__assert_fail@plt+0x25ec>
   138b8:	ldr	ip, [r2, #4]!
   138bc:	ldr	r1, [r2, #4]
   138c0:	subs	r3, r3, #1
   138c4:	str	r1, [ip, #8]
   138c8:	bne	138b8 <__assert_fail@plt+0x25e8>
   138cc:	add	r5, lr, r5, lsl #2
   138d0:	ldr	r2, [r5, #-4]
   138d4:	mov	r3, #0
   138d8:	str	r3, [r2, #8]
   138dc:	pop	{r4, r5, r6, r7, r8, pc}
   138e0:	add	r1, r2, #40	; 0x28
   138e4:	cmn	r1, #-1073741823	; 0xc0000001
   138e8:	str	r1, [r0, #40]	; 0x28
   138ec:	bhi	13908 <__assert_fail@plt+0x2638>
   138f0:	lsl	r1, r1, #2
   138f4:	ldr	r0, [r0, #8]
   138f8:	bl	19554 <__assert_fail@plt+0x8284>
   138fc:	cmp	r0, #0
   13900:	strne	r0, [r6, #8]
   13904:	bne	13870 <__assert_fail@plt+0x25a0>
   13908:	ldr	r0, [r6, #8]
   1390c:	bl	13684 <__assert_fail@plt+0x23b4>
   13910:	mov	r3, #0
   13914:	mov	r0, r4
   13918:	str	r3, [r6, #8]
   1391c:	str	r3, [r6, #40]	; 0x28
   13920:	pop	{r4, r5, r6, r7, r8, pc}
   13924:	mov	r2, r0
   13928:	b	138d4 <__assert_fail@plt+0x2604>
   1392c:	add	r3, r2, #176	; 0xb0
   13930:	push	{r4, r5, r6, r7, r8, lr}
   13934:	mov	r6, r0
   13938:	bic	r0, r3, #7
   1393c:	mov	r5, r2
   13940:	mov	r7, r1
   13944:	bl	19528 <__assert_fail@plt+0x8258>
   13948:	subs	r4, r0, #0
   1394c:	beq	13998 <__assert_fail@plt+0x26c8>
   13950:	mov	r1, r7
   13954:	mov	r2, r5
   13958:	add	r0, r4, #168	; 0xa8
   1395c:	bl	11030 <memcpy@plt>
   13960:	add	r0, r4, r5
   13964:	ldr	r1, [r6, #24]
   13968:	mov	r3, #0
   1396c:	mov	r2, #3
   13970:	strb	r3, [r0, #168]	; 0xa8
   13974:	str	r3, [r4, #32]
   13978:	str	r3, [r4, #12]
   1397c:	strh	r3, [r4, #58]	; 0x3a
   13980:	str	r3, [r4, #16]
   13984:	str	r3, [r4, #20]
   13988:	str	r5, [r4, #52]	; 0x34
   1398c:	str	r6, [r4, #44]	; 0x2c
   13990:	str	r1, [r4, #28]
   13994:	strh	r2, [r4, #60]	; 0x3c
   13998:	mov	r0, r4
   1399c:	pop	{r4, r5, r6, r7, r8, pc}
   139a0:	push	{r4, r5, r6, lr}
   139a4:	subs	r4, r0, #0
   139a8:	popeq	{r4, r5, r6, pc}
   139ac:	ldr	r3, [r4, #12]
   139b0:	ldr	r5, [r4, #8]
   139b4:	subs	r0, r3, #0
   139b8:	beq	139c0 <__assert_fail@plt+0x26f0>
   139bc:	bl	112c4 <closedir@plt>
   139c0:	mov	r0, r4
   139c4:	bl	13684 <__assert_fail@plt+0x23b4>
   139c8:	subs	r4, r5, #0
   139cc:	bne	139ac <__assert_fail@plt+0x26dc>
   139d0:	pop	{r4, r5, r6, pc}
   139d4:	push	{r4, lr}
   139d8:	mov	r4, r0
   139dc:	b	139ec <__assert_fail@plt+0x271c>
   139e0:	bl	168d0 <__assert_fail@plt+0x5600>
   139e4:	cmp	r0, #0
   139e8:	bge	13a04 <__assert_fail@plt+0x2734>
   139ec:	mov	r0, r4
   139f0:	bl	16884 <__assert_fail@plt+0x55b4>
   139f4:	cmp	r0, #0
   139f8:	mov	r0, r4
   139fc:	beq	139e0 <__assert_fail@plt+0x2710>
   13a00:	pop	{r4, pc}
   13a04:	bl	112a0 <close@plt>
   13a08:	b	139ec <__assert_fail@plt+0x271c>
   13a0c:	push	{r4, r5, r6, r7, lr}
   13a10:	sub	sp, sp, #100	; 0x64
   13a14:	ldr	r4, [r0, #44]	; 0x2c
   13a18:	ldr	r3, [r4, #48]	; 0x30
   13a1c:	tst	r3, #512	; 0x200
   13a20:	beq	13a94 <__assert_fail@plt+0x27c4>
   13a24:	ldr	r6, [r4, #52]	; 0x34
   13a28:	mov	r7, r1
   13a2c:	cmp	r6, #0
   13a30:	mov	r5, r0
   13a34:	beq	13a60 <__assert_fail@plt+0x2790>
   13a38:	ldrd	r2, [r5, #64]	; 0x40
   13a3c:	add	r1, sp, #96	; 0x60
   13a40:	mov	r0, r6
   13a44:	strd	r2, [r1, #-88]!	; 0xffffffa8
   13a48:	bl	15e80 <__assert_fail@plt+0x4bb0>
   13a4c:	cmp	r0, #0
   13a50:	beq	13a8c <__assert_fail@plt+0x27bc>
   13a54:	ldr	r0, [r0, #8]
   13a58:	add	sp, sp, #100	; 0x64
   13a5c:	pop	{r4, r5, r6, r7, pc}
   13a60:	ldr	r3, [pc, #168]	; 13b10 <__assert_fail@plt+0x2840>
   13a64:	mov	r1, r6
   13a68:	str	r3, [sp]
   13a6c:	ldr	r2, [pc, #160]	; 13b14 <__assert_fail@plt+0x2844>
   13a70:	ldr	r3, [pc, #160]	; 13b18 <__assert_fail@plt+0x2848>
   13a74:	mov	r0, #13
   13a78:	bl	16120 <__assert_fail@plt+0x4e50>
   13a7c:	cmp	r0, #0
   13a80:	mov	r6, r0
   13a84:	str	r0, [r4, #52]	; 0x34
   13a88:	bne	13a38 <__assert_fail@plt+0x2768>
   13a8c:	cmp	r7, #0
   13a90:	bge	13aa0 <__assert_fail@plt+0x27d0>
   13a94:	mov	r0, #0
   13a98:	add	sp, sp, #100	; 0x64
   13a9c:	pop	{r4, r5, r6, r7, pc}
   13aa0:	mov	r0, r7
   13aa4:	add	r1, sp, #8
   13aa8:	bl	10fa0 <fstatfs64@plt>
   13aac:	cmp	r0, #0
   13ab0:	bne	13a94 <__assert_fail@plt+0x27c4>
   13ab4:	cmp	r6, #0
   13ab8:	beq	13b04 <__assert_fail@plt+0x2834>
   13abc:	mov	r0, #16
   13ac0:	bl	19528 <__assert_fail@plt+0x8258>
   13ac4:	subs	r4, r0, #0
   13ac8:	beq	13b04 <__assert_fail@plt+0x2834>
   13acc:	ldrd	r2, [r5, #64]	; 0x40
   13ad0:	ldr	r1, [sp, #8]
   13ad4:	mov	r0, r6
   13ad8:	str	r1, [r4, #8]
   13adc:	strd	r2, [r4]
   13ae0:	mov	r1, r4
   13ae4:	bl	16714 <__assert_fail@plt+0x5444>
   13ae8:	cmp	r0, #0
   13aec:	beq	13afc <__assert_fail@plt+0x282c>
   13af0:	cmp	r4, r0
   13af4:	beq	13b04 <__assert_fail@plt+0x2834>
   13af8:	bl	11294 <abort@plt>
   13afc:	mov	r0, r4
   13b00:	bl	13684 <__assert_fail@plt+0x23b4>
   13b04:	ldr	r0, [sp, #8]
   13b08:	add	sp, sp, #100	; 0x64
   13b0c:	pop	{r4, r5, r6, r7, pc}
   13b10:	andeq	r3, r1, r4, lsl #13
   13b14:	ldrdeq	r3, [r1], -ip
   13b18:	strdeq	r3, [r1], -r8
   13b1c:	push	{r4, r5, r6, lr}
   13b20:	mov	r5, r1
   13b24:	ldr	r1, [r0, #32]
   13b28:	cmn	r1, #100	; 0x64
   13b2c:	sub	r3, r1, r5
   13b30:	clz	r3, r3
   13b34:	lsr	r3, r3, #5
   13b38:	moveq	r3, #0
   13b3c:	cmp	r3, #0
   13b40:	bne	13b98 <__assert_fail@plt+0x28c8>
   13b44:	cmp	r2, #0
   13b48:	mov	r4, r0
   13b4c:	bne	13b80 <__assert_fail@plt+0x28b0>
   13b50:	ldr	r3, [r0, #48]	; 0x30
   13b54:	lsr	r3, r3, #2
   13b58:	eor	r3, r3, #1
   13b5c:	cmp	r1, #0
   13b60:	movlt	r3, #0
   13b64:	andge	r3, r3, #1
   13b68:	cmp	r3, #0
   13b6c:	beq	13b78 <__assert_fail@plt+0x28a8>
   13b70:	mov	r0, r1
   13b74:	bl	112a0 <close@plt>
   13b78:	str	r5, [r4, #32]
   13b7c:	pop	{r4, r5, r6, pc}
   13b80:	add	r0, r0, #60	; 0x3c
   13b84:	bl	1688c <__assert_fail@plt+0x55bc>
   13b88:	cmp	r0, #0
   13b8c:	bge	13b74 <__assert_fail@plt+0x28a4>
   13b90:	str	r5, [r4, #32]
   13b94:	pop	{r4, r5, r6, pc}
   13b98:	bl	11294 <abort@plt>
   13b9c:	ldr	r3, [r0, #48]	; 0x30
   13ba0:	push	{r4, r5, r6, lr}
   13ba4:	ands	r5, r3, #4
   13ba8:	mov	r4, r0
   13bac:	movne	r5, #0
   13bb0:	bne	13bcc <__assert_fail@plt+0x28fc>
   13bb4:	tst	r3, #512	; 0x200
   13bb8:	bne	13bdc <__assert_fail@plt+0x290c>
   13bbc:	ldr	r0, [r0, #28]
   13bc0:	bl	1124c <fchdir@plt>
   13bc4:	adds	r5, r0, #0
   13bc8:	movne	r5, #1
   13bcc:	add	r0, r4, #60	; 0x3c
   13bd0:	bl	139d4 <__assert_fail@plt+0x2704>
   13bd4:	mov	r0, r5
   13bd8:	pop	{r4, r5, r6, pc}
   13bdc:	mov	r2, #1
   13be0:	mvn	r1, #99	; 0x63
   13be4:	bl	13b1c <__assert_fail@plt+0x284c>
   13be8:	b	13bcc <__assert_fail@plt+0x28fc>
   13bec:	push	{r4, r5, r6, lr}
   13bf0:	mov	r4, r2
   13bf4:	ldr	r2, [r2, #48]	; 0x30
   13bf8:	sub	sp, sp, #8
   13bfc:	cmp	r2, #0
   13c00:	add	r5, r4, #64	; 0x40
   13c04:	bne	13c5c <__assert_fail@plt+0x298c>
   13c08:	tst	r1, #1
   13c0c:	beq	13c5c <__assert_fail@plt+0x298c>
   13c10:	mov	r2, r5
   13c14:	ldr	r1, [r4, #24]
   13c18:	mov	r0, #3
   13c1c:	bl	11270 <__xstat64@plt>
   13c20:	cmp	r0, #0
   13c24:	beq	13c98 <__assert_fail@plt+0x29c8>
   13c28:	bl	11180 <__errno_location@plt>
   13c2c:	ldr	r3, [r0]
   13c30:	mov	r6, r0
   13c34:	cmp	r3, #2
   13c38:	beq	13d10 <__assert_fail@plt+0x2a40>
   13c3c:	str	r3, [r4, #32]
   13c40:	mov	r0, r5
   13c44:	mov	r2, #104	; 0x68
   13c48:	mov	r1, #0
   13c4c:	bl	11198 <memset@plt>
   13c50:	mov	r0, #10
   13c54:	add	sp, sp, #8
   13c58:	pop	{r4, r5, r6, pc}
   13c5c:	lsl	r1, r1, #30
   13c60:	orrs	r3, r3, r1, lsr #31
   13c64:	bne	13c10 <__assert_fail@plt+0x2940>
   13c68:	mov	r3, #256	; 0x100
   13c6c:	ldr	r2, [r4, #24]
   13c70:	mov	r1, r0
   13c74:	str	r3, [sp]
   13c78:	mov	r0, #3
   13c7c:	mov	r3, r5
   13c80:	bl	11090 <__fxstatat64@plt>
   13c84:	cmp	r0, #0
   13c88:	beq	13c98 <__assert_fail@plt+0x29c8>
   13c8c:	bl	11180 <__errno_location@plt>
   13c90:	ldr	r3, [r0]
   13c94:	b	13c3c <__assert_fail@plt+0x296c>
   13c98:	ldr	r0, [r4, #80]	; 0x50
   13c9c:	and	r0, r0, #61440	; 0xf000
   13ca0:	cmp	r0, #16384	; 0x4000
   13ca4:	beq	13cc8 <__assert_fail@plt+0x29f8>
   13ca8:	cmp	r0, #40960	; 0xa000
   13cac:	moveq	r0, #12
   13cb0:	beq	13c54 <__assert_fail@plt+0x2984>
   13cb4:	cmp	r0, #32768	; 0x8000
   13cb8:	movne	r0, #3
   13cbc:	moveq	r0, #8
   13cc0:	add	sp, sp, #8
   13cc4:	pop	{r4, r5, r6, pc}
   13cc8:	ldrb	r3, [r4, #168]	; 0xa8
   13ccc:	cmp	r3, #46	; 0x2e
   13cd0:	beq	13cdc <__assert_fail@plt+0x2a0c>
   13cd4:	mov	r0, #1
   13cd8:	b	13c54 <__assert_fail@plt+0x2984>
   13cdc:	ldrb	r3, [r4, #169]	; 0xa9
   13ce0:	cmp	r3, #0
   13ce4:	beq	13cfc <__assert_fail@plt+0x2a2c>
   13ce8:	ldr	r3, [r4, #168]	; 0xa8
   13cec:	bic	r3, r3, #-16777216	; 0xff000000
   13cf0:	bic	r3, r3, #255	; 0xff
   13cf4:	cmp	r3, #11776	; 0x2e00
   13cf8:	bne	13cd4 <__assert_fail@plt+0x2a04>
   13cfc:	ldr	r0, [r4, #48]	; 0x30
   13d00:	cmp	r0, #0
   13d04:	movne	r0, #5
   13d08:	moveq	r0, #1
   13d0c:	b	13c54 <__assert_fail@plt+0x2984>
   13d10:	mov	r2, r5
   13d14:	ldr	r1, [r4, #24]
   13d18:	mov	r0, #3
   13d1c:	bl	112ac <__lxstat64@plt>
   13d20:	cmp	r0, #0
   13d24:	streq	r0, [r6]
   13d28:	moveq	r0, #13
   13d2c:	beq	13c54 <__assert_fail@plt+0x2984>
   13d30:	ldr	r3, [r6]
   13d34:	b	13c3c <__assert_fail@plt+0x296c>
   13d38:	push	{r4, r5, r6, lr}
   13d3c:	mov	r5, r0
   13d40:	ldr	r0, [r1]
   13d44:	add	r3, r0, #256	; 0x100
   13d48:	add	r2, r3, r2
   13d4c:	cmp	r0, r2
   13d50:	bhi	13d7c <__assert_fail@plt+0x2aac>
   13d54:	str	r2, [r1]
   13d58:	ldr	r0, [r5]
   13d5c:	mov	r1, r2
   13d60:	bl	19554 <__assert_fail@plt+0x8284>
   13d64:	subs	r4, r0, #0
   13d68:	movne	r3, #1
   13d6c:	strne	r4, [r5]
   13d70:	beq	13da4 <__assert_fail@plt+0x2ad4>
   13d74:	mov	r0, r3
   13d78:	pop	{r4, r5, r6, pc}
   13d7c:	ldr	r0, [r5]
   13d80:	mov	r4, #0
   13d84:	bl	13684 <__assert_fail@plt+0x23b4>
   13d88:	str	r4, [r5]
   13d8c:	bl	11180 <__errno_location@plt>
   13d90:	mov	r2, #36	; 0x24
   13d94:	mov	r3, r4
   13d98:	str	r2, [r0]
   13d9c:	mov	r0, r3
   13da0:	pop	{r4, r5, r6, pc}
   13da4:	ldr	r0, [r5]
   13da8:	bl	13684 <__assert_fail@plt+0x23b4>
   13dac:	str	r4, [r5]
   13db0:	mov	r3, r4
   13db4:	b	13d74 <__assert_fail@plt+0x2aa4>
   13db8:	ldr	r3, [pc, #104]	; 13e28 <__assert_fail@plt+0x2b58>
   13dbc:	push	{r4, lr}
   13dc0:	and	r3, r3, r0
   13dc4:	cmp	r3, #0
   13dc8:	sub	sp, sp, #8
   13dcc:	mov	r4, r1
   13dd0:	beq	13e04 <__assert_fail@plt+0x2b34>
   13dd4:	ldr	r2, [pc, #80]	; 13e2c <__assert_fail@plt+0x2b5c>
   13dd8:	ldr	r3, [pc, #80]	; 13e30 <__assert_fail@plt+0x2b60>
   13ddc:	str	r2, [sp]
   13de0:	mov	r1, #0
   13de4:	ldr	r2, [pc, #72]	; 13e34 <__assert_fail@plt+0x2b64>
   13de8:	mov	r0, #31
   13dec:	bl	16120 <__assert_fail@plt+0x4e50>
   13df0:	str	r0, [r4]
   13df4:	adds	r0, r0, #0
   13df8:	movne	r0, #1
   13dfc:	add	sp, sp, #8
   13e00:	pop	{r4, pc}
   13e04:	mov	r0, #32
   13e08:	bl	19528 <__assert_fail@plt+0x8258>
   13e0c:	cmp	r0, #0
   13e10:	str	r0, [r4]
   13e14:	beq	13dfc <__assert_fail@plt+0x2b2c>
   13e18:	bl	1962c <__assert_fail@plt+0x835c>
   13e1c:	mov	r0, #1
   13e20:	add	sp, sp, #8
   13e24:	pop	{r4, pc}
   13e28:	andeq	r0, r0, r2, lsl #2
   13e2c:	andeq	r3, r1, r4, lsl #13
   13e30:	andeq	r3, r1, ip, ror r7
   13e34:	andeq	r3, r1, r0, asr #15
   13e38:	ldr	ip, [pc, #44]	; 13e6c <__assert_fail@plt+0x2b9c>
   13e3c:	tst	r1, #16
   13e40:	ldr	r3, [pc, #40]	; 13e70 <__assert_fail@plt+0x2ba0>
   13e44:	moveq	r3, ip
   13e48:	tst	r1, #512	; 0x200
   13e4c:	mov	ip, r2
   13e50:	bne	13e60 <__assert_fail@plt+0x2b90>
   13e54:	mov	r1, r3
   13e58:	mov	r0, r2
   13e5c:	b	19990 <__assert_fail@plt+0x86c0>
   13e60:	mov	r2, r3
   13e64:	mov	r1, ip
   13e68:	b	16918 <__assert_fail@plt+0x5648>
   13e6c:	andeq	r4, r8, r0, lsl #18
   13e70:	andeq	ip, r8, r0, lsl #18
   13e74:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13e78:	subs	sl, r3, #0
   13e7c:	sub	sp, sp, #104	; 0x68
   13e80:	mov	r5, r0
   13e84:	mov	r6, r1
   13e88:	mov	r4, r2
   13e8c:	ldr	r9, [r0, #48]	; 0x30
   13e90:	beq	13ee4 <__assert_fail@plt+0x2c14>
   13e94:	ldr	r1, [pc, #432]	; 1404c <__assert_fail@plt+0x2d7c>
   13e98:	mov	r0, sl
   13e9c:	bl	10fdc <strcmp@plt>
   13ea0:	cmp	r0, #0
   13ea4:	bne	13ee4 <__assert_fail@plt+0x2c14>
   13ea8:	tst	r9, #4
   13eac:	bne	13eec <__assert_fail@plt+0x2c1c>
   13eb0:	cmp	r4, #0
   13eb4:	bge	14038 <__assert_fail@plt+0x2d68>
   13eb8:	tst	r9, #512	; 0x200
   13ebc:	bne	13fd8 <__assert_fail@plt+0x2d08>
   13ec0:	mov	r8, #1
   13ec4:	mov	r1, r9
   13ec8:	mov	r2, sl
   13ecc:	ldr	r0, [r5, #32]
   13ed0:	bl	13e38 <__assert_fail@plt+0x2b68>
   13ed4:	subs	r7, r0, #0
   13ed8:	blt	14030 <__assert_fail@plt+0x2d60>
   13edc:	ldr	r9, [r5, #48]	; 0x30
   13ee0:	b	13f20 <__assert_fail@plt+0x2c50>
   13ee4:	ands	r8, r9, #4
   13ee8:	beq	13f14 <__assert_fail@plt+0x2c44>
   13eec:	mvn	r3, r4
   13ef0:	lsr	r3, r3, #31
   13ef4:	ands	r9, r3, r9, lsr #9
   13ef8:	beq	13f08 <__assert_fail@plt+0x2c38>
   13efc:	mov	r0, r4
   13f00:	bl	112a0 <close@plt>
   13f04:	mov	r9, #0
   13f08:	mov	r0, r9
   13f0c:	add	sp, sp, #104	; 0x68
   13f10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13f14:	cmp	r4, #0
   13f18:	movge	r7, r4
   13f1c:	blt	13ec4 <__assert_fail@plt+0x2bf4>
   13f20:	tst	r9, #2
   13f24:	bne	13f44 <__assert_fail@plt+0x2c74>
   13f28:	cmp	sl, #0
   13f2c:	beq	13f9c <__assert_fail@plt+0x2ccc>
   13f30:	mov	r0, sl
   13f34:	ldr	r1, [pc, #272]	; 1404c <__assert_fail@plt+0x2d7c>
   13f38:	bl	10fdc <strcmp@plt>
   13f3c:	cmp	r0, #0
   13f40:	bne	13f9c <__assert_fail@plt+0x2ccc>
   13f44:	mov	r2, sp
   13f48:	mov	r1, r7
   13f4c:	mov	r0, #3
   13f50:	bl	110a8 <__fxstat64@plt>
   13f54:	cmp	r0, #0
   13f58:	beq	13fb4 <__assert_fail@plt+0x2ce4>
   13f5c:	mvn	r9, #0
   13f60:	cmp	r4, #0
   13f64:	bge	13f08 <__assert_fail@plt+0x2c38>
   13f68:	bl	11180 <__errno_location@plt>
   13f6c:	mov	r4, r0
   13f70:	mov	r0, r7
   13f74:	ldr	r5, [r4]
   13f78:	bl	112a0 <close@plt>
   13f7c:	str	r5, [r4]
   13f80:	b	13f08 <__assert_fail@plt+0x2c38>
   13f84:	ldrd	r0, [r6, #160]	; 0xa0
   13f88:	ldrd	r2, [sp, #96]	; 0x60
   13f8c:	cmp	r1, r3
   13f90:	cmpeq	r0, r2
   13f94:	bne	13fc8 <__assert_fail@plt+0x2cf8>
   13f98:	ldr	r9, [r5, #48]	; 0x30
   13f9c:	tst	r9, #512	; 0x200
   13fa0:	bne	14014 <__assert_fail@plt+0x2d44>
   13fa4:	mov	r0, r7
   13fa8:	bl	1124c <fchdir@plt>
   13fac:	mov	r9, r0
   13fb0:	b	13f60 <__assert_fail@plt+0x2c90>
   13fb4:	ldrd	r0, [r6, #64]	; 0x40
   13fb8:	ldrd	r2, [sp]
   13fbc:	cmp	r1, r3
   13fc0:	cmpeq	r0, r2
   13fc4:	beq	13f84 <__assert_fail@plt+0x2cb4>
   13fc8:	bl	11180 <__errno_location@plt>
   13fcc:	mov	r3, #2
   13fd0:	str	r3, [r0]
   13fd4:	b	13f5c <__assert_fail@plt+0x2c8c>
   13fd8:	add	r7, r5, #60	; 0x3c
   13fdc:	mov	r0, r7
   13fe0:	bl	16884 <__assert_fail@plt+0x55b4>
   13fe4:	subs	r8, r0, #0
   13fe8:	bne	13ec4 <__assert_fail@plt+0x2bf4>
   13fec:	mov	r0, r7
   13ff0:	bl	168d0 <__assert_fail@plt+0x5600>
   13ff4:	ldr	r9, [r5, #48]	; 0x30
   13ff8:	subs	r7, r0, #0
   13ffc:	blt	13ec0 <__assert_fail@plt+0x2bf0>
   14000:	tst	r9, #2
   14004:	mov	r4, r7
   14008:	mov	r8, #1
   1400c:	beq	13f9c <__assert_fail@plt+0x2ccc>
   14010:	b	13f44 <__assert_fail@plt+0x2c74>
   14014:	eor	r2, r8, #1
   14018:	mov	r1, r7
   1401c:	uxtb	r2, r2
   14020:	mov	r0, r5
   14024:	bl	13b1c <__assert_fail@plt+0x284c>
   14028:	mov	r9, #0
   1402c:	b	13f08 <__assert_fail@plt+0x2c38>
   14030:	mvn	r9, #0
   14034:	b	13f08 <__assert_fail@plt+0x2c38>
   14038:	tst	r9, #2
   1403c:	mov	r7, r4
   14040:	mov	r8, #1
   14044:	beq	13f30 <__assert_fail@plt+0x2c60>
   14048:	b	13f44 <__assert_fail@plt+0x2c74>
   1404c:	andeq	sl, r1, ip, ror pc
   14050:	ldr	r3, [pc, #164]	; 140fc <__assert_fail@plt+0x2e2c>
   14054:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14058:	and	r3, r3, r0
   1405c:	cmp	r3, #0
   14060:	mov	sl, r1
   14064:	mov	r8, r2
   14068:	beq	140d0 <__assert_fail@plt+0x2e00>
   1406c:	mov	r0, #24
   14070:	bl	19528 <__assert_fail@plt+0x8258>
   14074:	subs	r9, r0, #0
   14078:	beq	140f4 <__assert_fail@plt+0x2e24>
   1407c:	ldrd	r4, [r8, #160]	; 0xa0
   14080:	ldrd	r6, [r8, #64]	; 0x40
   14084:	str	r8, [r9, #16]
   14088:	strd	r4, [r9, #8]
   1408c:	ldr	r0, [sl]
   14090:	strd	r6, [r9]
   14094:	mov	r1, r9
   14098:	bl	16714 <__assert_fail@plt+0x5444>
   1409c:	cmp	r9, r0
   140a0:	mov	r4, r0
   140a4:	beq	140c8 <__assert_fail@plt+0x2df8>
   140a8:	mov	r0, r9
   140ac:	bl	13684 <__assert_fail@plt+0x23b4>
   140b0:	cmp	r4, #0
   140b4:	beq	140f4 <__assert_fail@plt+0x2e24>
   140b8:	ldr	r2, [r4, #16]
   140bc:	mov	r3, #2
   140c0:	str	r2, [r8]
   140c4:	strh	r3, [r8, #56]	; 0x38
   140c8:	mov	r0, #1
   140cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   140d0:	ldr	r0, [r1]
   140d4:	add	r1, r2, #64	; 0x40
   140d8:	bl	19650 <__assert_fail@plt+0x8380>
   140dc:	cmp	r0, #0
   140e0:	beq	140c8 <__assert_fail@plt+0x2df8>
   140e4:	mov	r3, #2
   140e8:	str	r8, [r8]
   140ec:	strh	r3, [r8, #56]	; 0x38
   140f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   140f4:	mov	r0, #0
   140f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   140fc:	andeq	r0, r0, r2, lsl #2
   14100:	ldr	r3, [pc, #172]	; 141b4 <__assert_fail@plt+0x2ee4>
   14104:	push	{r4, r5, lr}
   14108:	and	r3, r3, r0
   1410c:	cmp	r3, #0
   14110:	sub	sp, sp, #28
   14114:	bne	1415c <__assert_fail@plt+0x2e8c>
   14118:	ldr	r3, [r2, #4]
   1411c:	cmp	r3, #0
   14120:	beq	14154 <__assert_fail@plt+0x2e84>
   14124:	ldr	r0, [r3, #48]	; 0x30
   14128:	cmp	r0, #0
   1412c:	blt	14154 <__assert_fail@plt+0x2e84>
   14130:	ldr	ip, [r1]
   14134:	ldrd	r0, [ip, #16]
   14138:	orrs	r1, r0, r1
   1413c:	beq	141b0 <__assert_fail@plt+0x2ee0>
   14140:	ldrd	r4, [ip]
   14144:	ldrd	r0, [r2, #160]	; 0xa0
   14148:	cmp	r5, r1
   1414c:	cmpeq	r4, r0
   14150:	beq	1418c <__assert_fail@plt+0x2ebc>
   14154:	add	sp, sp, #28
   14158:	pop	{r4, r5, pc}
   1415c:	ldrd	r4, [r2, #64]	; 0x40
   14160:	ldrd	r2, [r2, #160]	; 0xa0
   14164:	ldr	r0, [r1]
   14168:	mov	r1, sp
   1416c:	strd	r4, [sp]
   14170:	strd	r2, [sp, #8]
   14174:	bl	1674c <__assert_fail@plt+0x547c>
   14178:	cmp	r0, #0
   1417c:	beq	141b0 <__assert_fail@plt+0x2ee0>
   14180:	bl	13684 <__assert_fail@plt+0x23b4>
   14184:	add	sp, sp, #28
   14188:	pop	{r4, r5, pc}
   1418c:	ldrd	r0, [ip, #8]
   14190:	ldrd	r4, [r2, #64]	; 0x40
   14194:	cmp	r1, r5
   14198:	cmpeq	r0, r4
   1419c:	ldrdeq	r0, [r3, #64]	; 0x40
   141a0:	ldrdeq	r2, [r3, #160]	; 0xa0
   141a4:	strdeq	r0, [ip, #8]
   141a8:	strdeq	r2, [ip]
   141ac:	b	14154 <__assert_fail@plt+0x2e84>
   141b0:	bl	11294 <abort@plt>
   141b4:	andeq	r0, r0, r2, lsl #2
   141b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141bc:	sub	sp, sp, #68	; 0x44
   141c0:	ldr	sl, [r0]
   141c4:	mov	r5, r0
   141c8:	str	r1, [sp, #40]	; 0x28
   141cc:	ldr	r3, [sl, #12]
   141d0:	cmp	r3, #0
   141d4:	str	r3, [sp, #44]	; 0x2c
   141d8:	beq	1459c <__assert_fail@plt+0x32cc>
   141dc:	mov	r0, r3
   141e0:	bl	11240 <dirfd@plt>
   141e4:	cmp	r0, #0
   141e8:	str	r0, [sp, #60]	; 0x3c
   141ec:	blt	14978 <__assert_fail@plt+0x36a8>
   141f0:	ldr	r3, [r5, #44]	; 0x2c
   141f4:	cmp	r3, #0
   141f8:	beq	14b14 <__assert_fail@plt+0x3844>
   141fc:	mvn	r3, #0
   14200:	str	r3, [sp, #20]
   14204:	ldr	r0, [r5, #48]	; 0x30
   14208:	mov	r3, #1
   1420c:	str	r3, [sp, #52]	; 0x34
   14210:	ldr	r3, [sl, #40]	; 0x28
   14214:	ldr	r2, [sl, #28]
   14218:	mov	r1, r3
   1421c:	sub	r3, r3, #1
   14220:	str	sl, [sp, #12]
   14224:	ldrb	r2, [r2, r3]
   14228:	cmp	r2, #47	; 0x2f
   1422c:	moveq	r1, r3
   14230:	ands	r0, r0, #4
   14234:	mov	r2, r1
   14238:	ldrne	r3, [r5, #24]
   1423c:	movne	r0, r2
   14240:	str	r1, [sp, #32]
   14244:	addne	r2, r3, r2
   14248:	movne	r1, #47	; 0x2f
   1424c:	strbne	r1, [r3, r0]
   14250:	addne	r3, r2, #1
   14254:	ldr	r2, [sp, #32]
   14258:	strne	r3, [sp, #28]
   1425c:	add	r2, r2, #1
   14260:	ldr	r3, [sl, #48]	; 0x30
   14264:	ldr	fp, [r5, #36]	; 0x24
   14268:	mov	r1, r2
   1426c:	str	r2, [sp, #8]
   14270:	sub	r1, fp, r1
   14274:	mov	r2, #0
   14278:	add	r3, r3, #1
   1427c:	streq	r0, [sp, #28]
   14280:	str	r2, [sp, #48]	; 0x30
   14284:	str	r1, [sp, #16]
   14288:	str	r3, [sp, #24]
   1428c:	str	r2, [sp, #36]	; 0x24
   14290:	mov	r7, r2
   14294:	str	r2, [sp, #4]
   14298:	mov	r8, r2
   1429c:	mov	sl, r2
   142a0:	b	14320 <__assert_fail@plt+0x3050>
   142a4:	tst	r3, #251	; 0xfb
   142a8:	beq	143f4 <__assert_fail@plt+0x3124>
   142ac:	lsr	r2, r2, #4
   142b0:	cmp	r3, #10
   142b4:	orrne	r2, r2, #1
   142b8:	tst	r2, #1
   142bc:	beq	146c4 <__assert_fail@plt+0x33f4>
   142c0:	sub	r3, r3, #1
   142c4:	mov	r2, #11
   142c8:	cmp	r3, #11
   142cc:	strh	r2, [r4, #56]	; 0x38
   142d0:	bhi	14b04 <__assert_fail@plt+0x3834>
   142d4:	ldr	r2, [pc, #2128]	; 14b2c <__assert_fail@plt+0x385c>
   142d8:	ldr	r1, [r2, r3, lsl #2]
   142dc:	mov	r2, #1
   142e0:	mov	r3, #0
   142e4:	str	r1, [r4, #80]	; 0x50
   142e8:	strd	r2, [r4, #112]	; 0x70
   142ec:	ldr	r3, [sp, #4]
   142f0:	str	r8, [r4, #8]
   142f4:	cmp	r3, #0
   142f8:	ldr	r3, [pc, #2096]	; 14b30 <__assert_fail@plt+0x3860>
   142fc:	strne	r4, [sl, #8]
   14300:	streq	r4, [sp, #4]
   14304:	cmp	r7, r3
   14308:	beq	1450c <__assert_fail@plt+0x323c>
   1430c:	ldr	r3, [sp, #20]
   14310:	add	r7, r7, #1
   14314:	cmp	r7, r3
   14318:	bcs	14940 <__assert_fail@plt+0x3670>
   1431c:	mov	sl, r4
   14320:	ldr	r3, [sp, #12]
   14324:	ldr	r4, [r3, #12]
   14328:	cmp	r4, #0
   1432c:	beq	14794 <__assert_fail@plt+0x34c4>
   14330:	bl	11180 <__errno_location@plt>
   14334:	mov	r9, r0
   14338:	mov	r0, r4
   1433c:	str	r8, [r9]
   14340:	bl	11228 <readdir64@plt>
   14344:	subs	fp, r0, #0
   14348:	beq	1486c <__assert_fail@plt+0x359c>
   1434c:	ldr	r2, [r5, #48]	; 0x30
   14350:	tst	r2, #32
   14354:	bne	14364 <__assert_fail@plt+0x3094>
   14358:	ldrb	r2, [fp, #19]
   1435c:	cmp	r2, #46	; 0x2e
   14360:	beq	14574 <__assert_fail@plt+0x32a4>
   14364:	add	r4, fp, #19
   14368:	mov	r0, r4
   1436c:	bl	11168 <strlen@plt>
   14370:	mov	r1, r4
   14374:	mov	r2, r0
   14378:	mov	r6, r0
   1437c:	mov	r0, r5
   14380:	bl	1392c <__assert_fail@plt+0x265c>
   14384:	subs	r4, r0, #0
   14388:	beq	14744 <__assert_fail@plt+0x3474>
   1438c:	ldr	r3, [sp, #16]
   14390:	cmp	r3, r6
   14394:	bls	1442c <__assert_fail@plt+0x315c>
   14398:	ldr	r3, [sp, #8]
   1439c:	adds	r6, r3, r6
   143a0:	bcs	14498 <__assert_fail@plt+0x31c8>
   143a4:	ldrd	r0, [fp]
   143a8:	ldr	r2, [r5, #48]	; 0x30
   143ac:	ldr	ip, [r5]
   143b0:	tst	r2, #4
   143b4:	ldr	r3, [sp, #24]
   143b8:	strd	r0, [r4, #160]	; 0xa0
   143bc:	addeq	r1, r4, #168	; 0xa8
   143c0:	str	r3, [r4, #48]	; 0x30
   143c4:	str	ip, [r4, #4]
   143c8:	str	r6, [r4, #40]	; 0x28
   143cc:	streq	r1, [r4, #24]
   143d0:	bne	144e8 <__assert_fail@plt+0x3218>
   143d4:	ldr	r1, [r5, #44]	; 0x2c
   143d8:	cmp	r1, #0
   143dc:	beq	143e8 <__assert_fail@plt+0x3118>
   143e0:	tst	r2, #1024	; 0x400
   143e4:	beq	14558 <__assert_fail@plt+0x3288>
   143e8:	tst	r2, #8
   143ec:	ldrb	r3, [fp, #18]
   143f0:	bne	142a4 <__assert_fail@plt+0x2fd4>
   143f4:	sub	r3, r3, #1
   143f8:	cmp	r3, #11
   143fc:	mov	r2, #11
   14400:	strh	r2, [r4, #56]	; 0x38
   14404:	strhi	r8, [r4, #80]	; 0x50
   14408:	movhi	r2, #2
   1440c:	movhi	r3, #0
   14410:	bhi	142e8 <__assert_fail@plt+0x3018>
   14414:	ldr	r2, [pc, #1808]	; 14b2c <__assert_fail@plt+0x385c>
   14418:	ldr	r1, [r2, r3, lsl #2]
   1441c:	mov	r2, #2
   14420:	mov	r3, #0
   14424:	str	r1, [r4, #80]	; 0x50
   14428:	b	142e8 <__assert_fail@plt+0x3018>
   1442c:	ldr	r3, [sp, #32]
   14430:	add	r1, r5, #36	; 0x24
   14434:	add	r2, r3, #2
   14438:	ldr	r3, [r5, #24]
   1443c:	add	r2, r2, r6
   14440:	add	r0, r5, #24
   14444:	str	r3, [sp, #16]
   14448:	bl	13d38 <__assert_fail@plt+0x2a68>
   1444c:	cmp	r0, #0
   14450:	beq	14744 <__assert_fail@plt+0x3474>
   14454:	ldr	r2, [r5, #24]
   14458:	ldr	r3, [sp, #16]
   1445c:	cmp	r3, r2
   14460:	beq	14594 <__assert_fail@plt+0x32c4>
   14464:	ldr	r1, [r5, #48]	; 0x30
   14468:	tst	r1, #4
   1446c:	ldrne	r3, [sp, #8]
   14470:	addne	r3, r2, r3
   14474:	strne	r3, [sp, #28]
   14478:	ldr	r3, [r5, #36]	; 0x24
   1447c:	ldr	r2, [sp, #8]
   14480:	str	r0, [sp, #36]	; 0x24
   14484:	sub	r3, r3, r2
   14488:	str	r3, [sp, #16]
   1448c:	ldr	r3, [sp, #8]
   14490:	adds	r6, r3, r6
   14494:	bcc	143a4 <__assert_fail@plt+0x30d4>
   14498:	ldr	sl, [sp, #12]
   1449c:	mov	r0, r4
   144a0:	bl	13684 <__assert_fail@plt+0x23b4>
   144a4:	ldr	r0, [sp, #4]
   144a8:	bl	139a0 <__assert_fail@plt+0x26d0>
   144ac:	ldr	r0, [sl, #12]
   144b0:	bl	112c4 <closedir@plt>
   144b4:	ldr	r3, [r5, #48]	; 0x30
   144b8:	mov	r2, #0
   144bc:	orr	r3, r3, #8192	; 0x2000
   144c0:	mov	r0, #7
   144c4:	mov	r1, #36	; 0x24
   144c8:	str	r2, [sp, #4]
   144cc:	strh	r0, [sl, #56]	; 0x38
   144d0:	str	r2, [sl, #12]
   144d4:	ldr	r0, [sp, #4]
   144d8:	str	r3, [r5, #48]	; 0x30
   144dc:	str	r1, [r9]
   144e0:	add	sp, sp, #68	; 0x44
   144e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144e8:	ldr	r1, [r4, #28]
   144ec:	ldr	r2, [r4, #52]	; 0x34
   144f0:	str	r1, [r4, #24]
   144f4:	add	r2, r2, #1
   144f8:	add	r1, r4, #168	; 0xa8
   144fc:	ldr	r0, [sp, #28]
   14500:	bl	11000 <memmove@plt>
   14504:	ldr	r2, [r5, #48]	; 0x30
   14508:	b	143d4 <__assert_fail@plt+0x3104>
   1450c:	ldr	r3, [r5, #44]	; 0x2c
   14510:	cmp	r3, #0
   14514:	bne	1430c <__assert_fail@plt+0x303c>
   14518:	ldr	r1, [sp, #60]	; 0x3c
   1451c:	ldr	r0, [sp, #12]
   14520:	bl	13a0c <__assert_fail@plt+0x273c>
   14524:	ldr	r3, [pc, #1544]	; 14b34 <__assert_fail@plt+0x3864>
   14528:	cmp	r0, r3
   1452c:	beq	14550 <__assert_fail@plt+0x3280>
   14530:	ldr	r3, [pc, #1536]	; 14b38 <__assert_fail@plt+0x3868>
   14534:	cmp	r0, r3
   14538:	beq	14550 <__assert_fail@plt+0x3280>
   1453c:	ldr	r3, [pc, #1528]	; 14b3c <__assert_fail@plt+0x386c>
   14540:	cmp	r0, r3
   14544:	movne	r3, #1
   14548:	strne	r3, [sp, #48]	; 0x30
   1454c:	bne	1430c <__assert_fail@plt+0x303c>
   14550:	str	r8, [sp, #48]	; 0x30
   14554:	b	1430c <__assert_fail@plt+0x303c>
   14558:	mov	r1, r2
   1455c:	mov	r3, r8
   14560:	mov	r2, r4
   14564:	ldr	r0, [r5, #32]
   14568:	bl	13bec <__assert_fail@plt+0x291c>
   1456c:	strh	r0, [r4, #56]	; 0x38
   14570:	b	142ec <__assert_fail@plt+0x301c>
   14574:	ldrb	r2, [fp, #20]
   14578:	cmp	r2, #0
   1457c:	beq	1458c <__assert_fail@plt+0x32bc>
   14580:	ldrh	r2, [fp, #20]
   14584:	cmp	r2, #46	; 0x2e
   14588:	bne	14364 <__assert_fail@plt+0x3094>
   1458c:	mov	r4, sl
   14590:	b	1431c <__assert_fail@plt+0x304c>
   14594:	ldr	r0, [sp, #36]	; 0x24
   14598:	b	14478 <__assert_fail@plt+0x31a8>
   1459c:	ldr	r3, [r0, #48]	; 0x30
   145a0:	ldr	r1, [sl, #24]
   145a4:	and	r2, r3, #516	; 0x204
   145a8:	cmp	r2, #512	; 0x200
   145ac:	mvnne	r0, #99	; 0x63
   145b0:	ldreq	r0, [r0, #32]
   145b4:	ands	r2, r3, #16
   145b8:	bne	146d4 <__assert_fail@plt+0x3404>
   145bc:	add	r3, sp, #60	; 0x3c
   145c0:	bl	16950 <__assert_fail@plt+0x5680>
   145c4:	cmp	r0, #0
   145c8:	mov	r4, r0
   145cc:	str	r0, [sl, #12]
   145d0:	beq	14a2c <__assert_fail@plt+0x375c>
   145d4:	ldrh	r3, [sl, #56]	; 0x38
   145d8:	cmp	r3, #11
   145dc:	beq	14a54 <__assert_fail@plt+0x3784>
   145e0:	ldr	r0, [r5, #48]	; 0x30
   145e4:	tst	r0, #256	; 0x100
   145e8:	bne	146f4 <__assert_fail@plt+0x3424>
   145ec:	ldr	r2, [r5, #44]	; 0x2c
   145f0:	ldr	r3, [pc, #1352]	; 14b40 <__assert_fail@plt+0x3870>
   145f4:	cmp	r2, #0
   145f8:	mvnne	r3, #0
   145fc:	str	r3, [sp, #20]
   14600:	ldr	r3, [sp, #40]	; 0x28
   14604:	cmp	r3, #2
   14608:	beq	149e8 <__assert_fail@plt+0x3718>
   1460c:	ldr	r3, [r5, #48]	; 0x30
   14610:	and	r3, r3, #56	; 0x38
   14614:	cmp	r3, #24
   14618:	beq	14a70 <__assert_fail@plt+0x37a0>
   1461c:	ldr	r3, [sp, #40]	; 0x28
   14620:	mov	r4, #1
   14624:	sub	r6, r3, #3
   14628:	clz	r6, r6
   1462c:	lsr	r6, r6, #5
   14630:	ldr	r3, [r5, #48]	; 0x30
   14634:	tst	r3, #512	; 0x200
   14638:	bne	14a10 <__assert_fail@plt+0x3740>
   1463c:	ldr	r2, [sp, #60]	; 0x3c
   14640:	cmp	r2, #0
   14644:	blt	14660 <__assert_fail@plt+0x3390>
   14648:	mov	r3, #0
   1464c:	mov	r1, sl
   14650:	mov	r0, r5
   14654:	bl	13e74 <__assert_fail@plt+0x2ba4>
   14658:	cmp	r0, #0
   1465c:	beq	14204 <__assert_fail@plt+0x2f34>
   14660:	tst	r4, r6
   14664:	beq	14674 <__assert_fail@plt+0x33a4>
   14668:	bl	11180 <__errno_location@plt>
   1466c:	ldr	r3, [r0]
   14670:	str	r3, [sl, #32]
   14674:	ldrh	r3, [sl, #58]	; 0x3a
   14678:	ldr	r0, [sl, #12]
   1467c:	orr	r3, r3, #1
   14680:	strh	r3, [sl, #58]	; 0x3a
   14684:	bl	112c4 <closedir@plt>
   14688:	ldr	r0, [r5, #48]	; 0x30
   1468c:	mov	r3, #0
   14690:	tst	r0, #512	; 0x200
   14694:	str	r3, [sl, #12]
   14698:	beq	146b4 <__assert_fail@plt+0x33e4>
   1469c:	ldr	r3, [sp, #60]	; 0x3c
   146a0:	cmp	r3, #0
   146a4:	blt	146b4 <__assert_fail@plt+0x33e4>
   146a8:	mov	r0, r3
   146ac:	bl	112a0 <close@plt>
   146b0:	ldr	r0, [r5, #48]	; 0x30
   146b4:	mov	r3, #0
   146b8:	str	r3, [sl, #12]
   146bc:	str	r3, [sp, #52]	; 0x34
   146c0:	b	14210 <__assert_fail@plt+0x2f40>
   146c4:	mov	r3, #11
   146c8:	strh	r3, [r4, #56]	; 0x38
   146cc:	mov	r3, #9
   146d0:	b	14414 <__assert_fail@plt+0x3144>
   146d4:	tst	r3, #1
   146d8:	moveq	r2, #32768	; 0x8000
   146dc:	beq	145bc <__assert_fail@plt+0x32ec>
   146e0:	ldr	r2, [sl, #48]	; 0x30
   146e4:	cmp	r2, #0
   146e8:	movne	r2, #32768	; 0x8000
   146ec:	moveq	r2, #0
   146f0:	b	145bc <__assert_fail@plt+0x32ec>
   146f4:	add	r4, r5, #56	; 0x38
   146f8:	mov	r1, r4
   146fc:	mov	r2, sl
   14700:	bl	14100 <__assert_fail@plt+0x2e30>
   14704:	mov	r3, #0
   14708:	mov	r2, sl
   1470c:	ldr	r1, [r5, #48]	; 0x30
   14710:	ldr	r0, [r5, #32]
   14714:	bl	13bec <__assert_fail@plt+0x291c>
   14718:	mov	r1, r4
   1471c:	mov	r2, sl
   14720:	ldr	r0, [r5, #48]	; 0x30
   14724:	bl	14050 <__assert_fail@plt+0x2d80>
   14728:	subs	r4, r0, #0
   1472c:	bne	145ec <__assert_fail@plt+0x331c>
   14730:	bl	11180 <__errno_location@plt>
   14734:	mov	r3, #12
   14738:	str	r4, [sp, #4]
   1473c:	str	r3, [r0]
   14740:	b	14788 <__assert_fail@plt+0x34b8>
   14744:	ldr	sl, [sp, #12]
   14748:	mov	r0, r4
   1474c:	ldr	r4, [r9]
   14750:	bl	13684 <__assert_fail@plt+0x23b4>
   14754:	ldr	r0, [sp, #4]
   14758:	bl	139a0 <__assert_fail@plt+0x26d0>
   1475c:	ldr	r0, [sl, #12]
   14760:	bl	112c4 <closedir@plt>
   14764:	ldr	r3, [r5, #48]	; 0x30
   14768:	mov	r2, #0
   1476c:	orr	r3, r3, #8192	; 0x2000
   14770:	mov	r1, #7
   14774:	str	r2, [sl, #12]
   14778:	strh	r1, [sl, #56]	; 0x38
   1477c:	str	r2, [sp, #4]
   14780:	str	r3, [r5, #48]	; 0x30
   14784:	str	r4, [r9]
   14788:	ldr	r0, [sp, #4]
   1478c:	add	sp, sp, #68	; 0x44
   14790:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14794:	mov	sl, r3
   14798:	ldr	r3, [sp, #36]	; 0x24
   1479c:	cmp	r3, #0
   147a0:	bne	148bc <__assert_fail@plt+0x35ec>
   147a4:	ldr	r3, [r5, #48]	; 0x30
   147a8:	tst	r3, #4
   147ac:	beq	147d8 <__assert_fail@plt+0x3508>
   147b0:	ldr	r3, [r5, #36]	; 0x24
   147b4:	ldr	r2, [sp, #8]
   147b8:	cmp	r7, #0
   147bc:	cmpne	r3, r2
   147c0:	ldreq	r3, [sp, #28]
   147c4:	subeq	r3, r3, #1
   147c8:	streq	r3, [sp, #28]
   147cc:	ldr	r2, [sp, #28]
   147d0:	mov	r3, #0
   147d4:	strb	r3, [r2]
   147d8:	ldr	r3, [sp, #52]	; 0x34
   147dc:	ldr	r2, [sp, #44]	; 0x2c
   147e0:	cmp	r2, #0
   147e4:	movne	r3, #0
   147e8:	andeq	r3, r3, #1
   147ec:	cmp	r3, #0
   147f0:	beq	14828 <__assert_fail@plt+0x3558>
   147f4:	ldr	r3, [sp, #40]	; 0x28
   147f8:	cmp	r7, #0
   147fc:	cmpne	r3, #1
   14800:	bne	14830 <__assert_fail@plt+0x3560>
   14804:	ldr	r3, [sl, #48]	; 0x30
   14808:	cmp	r3, #0
   1480c:	bne	149a8 <__assert_fail@plt+0x36d8>
   14810:	mov	r0, r5
   14814:	bl	13b9c <__assert_fail@plt+0x28cc>
   14818:	adds	r0, r0, #0
   1481c:	movne	r0, #1
   14820:	cmp	r0, #0
   14824:	bne	14ac8 <__assert_fail@plt+0x37f8>
   14828:	cmp	r7, #0
   1482c:	beq	149c8 <__assert_fail@plt+0x36f8>
   14830:	ldr	r3, [sp, #48]	; 0x30
   14834:	cmp	r3, #0
   14838:	bne	14948 <__assert_fail@plt+0x3678>
   1483c:	ldr	r3, [r5, #44]	; 0x2c
   14840:	cmp	r3, #0
   14844:	cmpne	r7, #1
   14848:	bls	14788 <__assert_fail@plt+0x34b8>
   1484c:	mov	r2, r7
   14850:	ldr	r1, [sp, #4]
   14854:	mov	r0, r5
   14858:	bl	1384c <__assert_fail@plt+0x257c>
   1485c:	str	r0, [sp, #4]
   14860:	ldr	r0, [sp, #4]
   14864:	add	sp, sp, #68	; 0x44
   14868:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1486c:	ldr	r3, [r9]
   14870:	ldr	sl, [sp, #12]
   14874:	cmp	r3, #0
   14878:	beq	14898 <__assert_fail@plt+0x35c8>
   1487c:	ldr	r2, [sp, #44]	; 0x2c
   14880:	str	r3, [sl, #32]
   14884:	cmp	r7, #0
   14888:	cmpeq	r2, #0
   1488c:	moveq	r2, #4
   14890:	movne	r2, #7
   14894:	strh	r2, [sl, #56]	; 0x38
   14898:	ldr	r0, [sl, #12]
   1489c:	cmp	r0, #0
   148a0:	beq	14798 <__assert_fail@plt+0x34c8>
   148a4:	bl	112c4 <closedir@plt>
   148a8:	mov	r3, #0
   148ac:	str	r3, [sl, #12]
   148b0:	ldr	r3, [sp, #36]	; 0x24
   148b4:	cmp	r3, #0
   148b8:	beq	147a4 <__assert_fail@plt+0x34d4>
   148bc:	ldr	r1, [r5, #4]
   148c0:	ldr	r0, [r5, #24]
   148c4:	cmp	r1, #0
   148c8:	beq	148f8 <__assert_fail@plt+0x3628>
   148cc:	ldr	r3, [r1, #24]
   148d0:	add	r2, r1, #168	; 0xa8
   148d4:	cmp	r3, r2
   148d8:	ldrne	r2, [r1, #28]
   148dc:	str	r0, [r1, #28]
   148e0:	subne	r3, r3, r2
   148e4:	addne	r3, r0, r3
   148e8:	strne	r3, [r1, #24]
   148ec:	ldr	r1, [r1, #8]
   148f0:	cmp	r1, #0
   148f4:	bne	148cc <__assert_fail@plt+0x35fc>
   148f8:	ldr	r3, [sp, #4]
   148fc:	b	1492c <__assert_fail@plt+0x365c>
   14900:	ldr	r2, [r3, #24]
   14904:	cmp	r2, r1
   14908:	ldrne	r1, [r3, #28]
   1490c:	str	r0, [r3, #28]
   14910:	subne	r2, r2, r1
   14914:	addne	r2, r0, r2
   14918:	strne	r2, [r3, #24]
   1491c:	ldr	r2, [r3, #8]
   14920:	cmp	r2, #0
   14924:	ldreq	r2, [r3, #4]
   14928:	mov	r3, r2
   1492c:	ldr	r2, [r3, #48]	; 0x30
   14930:	add	r1, r3, #168	; 0xa8
   14934:	cmp	r2, #0
   14938:	bge	14900 <__assert_fail@plt+0x3630>
   1493c:	b	147a4 <__assert_fail@plt+0x34d4>
   14940:	ldr	sl, [sp, #12]
   14944:	b	14798 <__assert_fail@plt+0x34c8>
   14948:	ldr	r3, [pc, #500]	; 14b44 <__assert_fail@plt+0x3874>
   1494c:	mov	r2, r7
   14950:	str	r3, [r5, #44]	; 0x2c
   14954:	ldr	r1, [sp, #4]
   14958:	mov	r0, r5
   1495c:	bl	1384c <__assert_fail@plt+0x257c>
   14960:	mov	r3, #0
   14964:	str	r3, [r5, #44]	; 0x2c
   14968:	str	r0, [sp, #4]
   1496c:	ldr	r0, [sp, #4]
   14970:	add	sp, sp, #68	; 0x44
   14974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14978:	ldr	r0, [sl, #12]
   1497c:	bl	112c4 <closedir@plt>
   14980:	ldr	r3, [sp, #40]	; 0x28
   14984:	mov	r4, #0
   14988:	cmp	r3, #3
   1498c:	str	r4, [sl, #12]
   14990:	beq	14a38 <__assert_fail@plt+0x3768>
   14994:	mov	r3, #0
   14998:	str	r3, [sp, #4]
   1499c:	ldr	r0, [sp, #4]
   149a0:	add	sp, sp, #68	; 0x44
   149a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149a8:	ldr	r3, [pc, #408]	; 14b48 <__assert_fail@plt+0x3878>
   149ac:	mvn	r2, #0
   149b0:	ldr	r1, [sl, #4]
   149b4:	mov	r0, r5
   149b8:	bl	13e74 <__assert_fail@plt+0x2ba4>
   149bc:	adds	r0, r0, #0
   149c0:	movne	r0, #1
   149c4:	b	14820 <__assert_fail@plt+0x3550>
   149c8:	ldr	r3, [sp, #40]	; 0x28
   149cc:	cmp	r3, #3
   149d0:	beq	149f8 <__assert_fail@plt+0x3728>
   149d4:	ldr	r0, [sp, #4]
   149d8:	bl	139a0 <__assert_fail@plt+0x26d0>
   149dc:	mov	r3, #0
   149e0:	str	r3, [sp, #4]
   149e4:	b	14788 <__assert_fail@plt+0x34b8>
   149e8:	mov	r3, #0
   149ec:	str	r3, [sp, #52]	; 0x34
   149f0:	ldr	r0, [r5, #48]	; 0x30
   149f4:	b	14210 <__assert_fail@plt+0x2f40>
   149f8:	ldrh	r3, [sl, #56]	; 0x38
   149fc:	cmp	r3, #4
   14a00:	cmpne	r3, #7
   14a04:	movne	r3, #6
   14a08:	strhne	r3, [sl, #56]	; 0x38
   14a0c:	b	149d4 <__assert_fail@plt+0x3704>
   14a10:	mov	r2, #3
   14a14:	ldr	r1, [pc, #304]	; 14b4c <__assert_fail@plt+0x387c>
   14a18:	ldr	r0, [sp, #60]	; 0x3c
   14a1c:	bl	197bc <__assert_fail@plt+0x84ec>
   14a20:	mov	r2, r0
   14a24:	str	r0, [sp, #60]	; 0x3c
   14a28:	b	14640 <__assert_fail@plt+0x3370>
   14a2c:	ldr	r3, [sp, #40]	; 0x28
   14a30:	cmp	r3, #3
   14a34:	bne	14994 <__assert_fail@plt+0x36c4>
   14a38:	mov	r3, #4
   14a3c:	strh	r3, [sl, #56]	; 0x38
   14a40:	bl	11180 <__errno_location@plt>
   14a44:	str	r4, [sp, #4]
   14a48:	ldr	r3, [r0]
   14a4c:	str	r3, [sl, #32]
   14a50:	b	14788 <__assert_fail@plt+0x34b8>
   14a54:	mov	r3, #0
   14a58:	mov	r2, sl
   14a5c:	ldr	r1, [r5, #48]	; 0x30
   14a60:	ldr	r0, [r5, #32]
   14a64:	bl	13bec <__assert_fail@plt+0x291c>
   14a68:	strh	r0, [sl, #56]	; 0x38
   14a6c:	b	145ec <__assert_fail@plt+0x331c>
   14a70:	ldr	r3, [sl, #84]	; 0x54
   14a74:	cmp	r3, #2
   14a78:	bne	1461c <__assert_fail@plt+0x334c>
   14a7c:	ldr	r1, [sp, #60]	; 0x3c
   14a80:	mov	r0, sl
   14a84:	bl	13a0c <__assert_fail@plt+0x273c>
   14a88:	ldr	r3, [pc, #164]	; 14b34 <__assert_fail@plt+0x3864>
   14a8c:	cmp	r0, r3
   14a90:	beq	1461c <__assert_fail@plt+0x334c>
   14a94:	bgt	14ae8 <__assert_fail@plt+0x3818>
   14a98:	ldr	r3, [pc, #156]	; 14b3c <__assert_fail@plt+0x386c>
   14a9c:	cmp	r0, r3
   14aa0:	beq	1461c <__assert_fail@plt+0x334c>
   14aa4:	cmp	r0, #0
   14aa8:	beq	1461c <__assert_fail@plt+0x334c>
   14aac:	ldr	r3, [sp, #40]	; 0x28
   14ab0:	cmp	r3, #3
   14ab4:	moveq	r6, #1
   14ab8:	movne	r6, #0
   14abc:	bne	149e8 <__assert_fail@plt+0x3718>
   14ac0:	mov	r4, #0
   14ac4:	b	14630 <__assert_fail@plt+0x3360>
   14ac8:	ldr	r3, [r5, #48]	; 0x30
   14acc:	mov	r2, #7
   14ad0:	orr	r3, r3, #8192	; 0x2000
   14ad4:	strh	r2, [sl, #56]	; 0x38
   14ad8:	ldr	r0, [sp, #4]
   14adc:	str	r3, [r5, #48]	; 0x30
   14ae0:	bl	139a0 <__assert_fail@plt+0x26d0>
   14ae4:	b	14994 <__assert_fail@plt+0x36c4>
   14ae8:	ldr	r3, [pc, #96]	; 14b50 <__assert_fail@plt+0x3880>
   14aec:	cmp	r0, r3
   14af0:	beq	1461c <__assert_fail@plt+0x334c>
   14af4:	ldr	r3, [pc, #88]	; 14b54 <__assert_fail@plt+0x3884>
   14af8:	cmp	r0, r3
   14afc:	bne	14aac <__assert_fail@plt+0x37dc>
   14b00:	b	1461c <__assert_fail@plt+0x334c>
   14b04:	str	r8, [r4, #80]	; 0x50
   14b08:	mov	r2, #1
   14b0c:	mov	r3, #0
   14b10:	b	142e8 <__assert_fail@plt+0x3018>
   14b14:	ldr	r3, [pc, #36]	; 14b40 <__assert_fail@plt+0x3870>
   14b18:	ldr	r0, [r5, #48]	; 0x30
   14b1c:	str	r3, [sp, #20]
   14b20:	mov	r3, #1
   14b24:	str	r3, [sp, #52]	; 0x34
   14b28:	b	14210 <__assert_fail@plt+0x2f40>
   14b2c:	andeq	fp, r1, r8, lsl r3
   14b30:	andeq	r2, r0, r0, lsl r7
   14b34:	andeq	r6, r0, r9, ror #18
   14b38:			; <UNDEFINED> instruction: 0x01021994
   14b3c:			; <UNDEFINED> instruction: 0xff534d42
   14b40:	andeq	r8, r1, r0, lsr #13
   14b44:	andeq	r3, r1, ip, lsl r8
   14b48:	andeq	sl, r1, ip, ror pc
   14b4c:	andeq	r0, r0, r6, lsl #8
   14b50:	andeq	r9, r0, r0, lsr #31
   14b54:	movtpl	r4, #24911	; 0x614f
   14b58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b5c:	bic	r5, r1, #4080	; 0xff0
   14b60:	bic	r5, r5, #15
   14b64:	cmp	r5, #0
   14b68:	sub	sp, sp, #20
   14b6c:	bne	14ea4 <__assert_fail@plt+0x3bd4>
   14b70:	and	r3, r1, #516	; 0x204
   14b74:	cmp	r3, #516	; 0x204
   14b78:	mov	r6, r1
   14b7c:	beq	14e44 <__assert_fail@plt+0x3b74>
   14b80:	ands	r5, r1, #18
   14b84:	beq	14e44 <__assert_fail@plt+0x3b74>
   14b88:	mov	r7, r0
   14b8c:	mov	r1, #96	; 0x60
   14b90:	mov	r0, #1
   14b94:	mov	r9, r2
   14b98:	bl	194e0 <__assert_fail@plt+0x8210>
   14b9c:	subs	r5, r0, #0
   14ba0:	beq	14dec <__assert_fail@plt+0x3b1c>
   14ba4:	tst	r6, #2
   14ba8:	bicne	r3, r6, #512	; 0x200
   14bac:	orrne	r3, r3, #4
   14bb0:	strne	r3, [r5, #48]	; 0x30
   14bb4:	ldr	r3, [r7]
   14bb8:	streq	r6, [r5, #48]	; 0x30
   14bbc:	mvn	r2, #99	; 0x63
   14bc0:	cmp	r3, #0
   14bc4:	str	r9, [r5, #44]	; 0x2c
   14bc8:	str	r2, [r5, #32]
   14bcc:	beq	14ed8 <__assert_fail@plt+0x3c08>
   14bd0:	mov	r8, r7
   14bd4:	mov	r4, #0
   14bd8:	mov	r0, r3
   14bdc:	bl	11168 <strlen@plt>
   14be0:	ldr	r3, [r8, #4]!
   14be4:	cmp	r4, r0
   14be8:	movcc	r4, r0
   14bec:	cmp	r3, #0
   14bf0:	bne	14bd8 <__assert_fail@plt+0x3908>
   14bf4:	add	r2, r4, #1
   14bf8:	cmp	r2, #4096	; 0x1000
   14bfc:	movcc	r2, #4096	; 0x1000
   14c00:	add	r1, r5, #36	; 0x24
   14c04:	add	r0, r5, #24
   14c08:	bl	13d38 <__assert_fail@plt+0x2a68>
   14c0c:	subs	r3, r0, #0
   14c10:	str	r3, [sp, #4]
   14c14:	beq	14e2c <__assert_fail@plt+0x3b5c>
   14c18:	ldr	r4, [r7]
   14c1c:	cmp	r4, #0
   14c20:	beq	14e5c <__assert_fail@plt+0x3b8c>
   14c24:	mov	r2, #0
   14c28:	ldr	r1, [pc, #696]	; 14ee8 <__assert_fail@plt+0x3c18>
   14c2c:	mov	r0, r5
   14c30:	bl	1392c <__assert_fail@plt+0x265c>
   14c34:	subs	fp, r0, #0
   14c38:	beq	14e24 <__assert_fail@plt+0x3b54>
   14c3c:	mvn	r3, #0
   14c40:	cmp	r9, #0
   14c44:	str	r3, [fp, #48]	; 0x30
   14c48:	ldr	r4, [r7]
   14c4c:	beq	14c60 <__assert_fail@plt+0x3990>
   14c50:	ldr	r3, [r5, #48]	; 0x30
   14c54:	lsr	r3, r3, #10
   14c58:	and	r3, r3, #1
   14c5c:	str	r3, [sp, #4]
   14c60:	cmp	r4, #0
   14c64:	beq	14ee0 <__assert_fail@plt+0x3c10>
   14c68:	lsr	r6, r6, #11
   14c6c:	mov	r3, #0
   14c70:	eor	r6, r6, #1
   14c74:	mov	sl, r3
   14c78:	str	r3, [sp, #12]
   14c7c:	and	r3, r6, #1
   14c80:	str	r3, [sp, #8]
   14c84:	mov	r8, sl
   14c88:	mov	r6, sl
   14c8c:	b	14cc4 <__assert_fail@plt+0x39f4>
   14c90:	mov	r3, #11
   14c94:	strh	r3, [r4, #56]	; 0x38
   14c98:	mov	r2, #2
   14c9c:	mov	r3, #0
   14ca0:	cmp	r9, #0
   14ca4:	strd	r2, [r4, #112]	; 0x70
   14ca8:	beq	14d58 <__assert_fail@plt+0x3a88>
   14cac:	str	r6, [r4, #8]
   14cb0:	mov	r6, r4
   14cb4:	ldr	r4, [r7, #4]!
   14cb8:	add	r8, r8, #1
   14cbc:	cmp	r4, #0
   14cc0:	beq	14d84 <__assert_fail@plt+0x3ab4>
   14cc4:	mov	r0, r4
   14cc8:	bl	11168 <strlen@plt>
   14ccc:	ldr	r3, [sp, #8]
   14cd0:	cmp	r0, #2
   14cd4:	movls	r3, #0
   14cd8:	andhi	r3, r3, #1
   14cdc:	cmp	r3, #0
   14ce0:	mov	r2, r0
   14ce4:	beq	14cfc <__assert_fail@plt+0x3a2c>
   14ce8:	sub	r1, r0, #1
   14cec:	add	r3, r4, r1
   14cf0:	ldrb	r1, [r4, r1]
   14cf4:	cmp	r1, #47	; 0x2f
   14cf8:	beq	14df8 <__assert_fail@plt+0x3b28>
   14cfc:	mov	r1, r4
   14d00:	mov	r0, r5
   14d04:	bl	1392c <__assert_fail@plt+0x265c>
   14d08:	subs	r4, r0, #0
   14d0c:	beq	14e14 <__assert_fail@plt+0x3b44>
   14d10:	ldr	r3, [sp, #4]
   14d14:	str	sl, [r4, #48]	; 0x30
   14d18:	cmp	r6, #0
   14d1c:	moveq	r3, #0
   14d20:	andne	r3, r3, #1
   14d24:	cmp	r3, #0
   14d28:	add	r3, r4, #168	; 0xa8
   14d2c:	str	fp, [r4, #4]
   14d30:	str	r3, [r4, #24]
   14d34:	bne	14c90 <__assert_fail@plt+0x39c0>
   14d38:	mov	r3, sl
   14d3c:	mov	r2, r4
   14d40:	ldr	r1, [r5, #48]	; 0x30
   14d44:	ldr	r0, [r5, #32]
   14d48:	bl	13bec <__assert_fail@plt+0x291c>
   14d4c:	cmp	r9, #0
   14d50:	strh	r0, [r4, #56]	; 0x38
   14d54:	bne	14cac <__assert_fail@plt+0x39dc>
   14d58:	cmp	r6, #0
   14d5c:	str	r9, [r4, #8]
   14d60:	ldrne	r3, [sp, #12]
   14d64:	streq	r4, [sp, #12]
   14d68:	strne	r4, [sp, #12]
   14d6c:	strne	r4, [r3, #8]
   14d70:	moveq	r6, r4
   14d74:	ldr	r4, [r7, #4]!
   14d78:	add	r8, r8, #1
   14d7c:	cmp	r4, #0
   14d80:	bne	14cc4 <__assert_fail@plt+0x39f4>
   14d84:	cmp	r9, #0
   14d88:	cmpne	r8, #1
   14d8c:	bhi	14ec0 <__assert_fail@plt+0x3bf0>
   14d90:	mov	r2, #0
   14d94:	ldr	r1, [pc, #332]	; 14ee8 <__assert_fail@plt+0x3c18>
   14d98:	mov	r0, r5
   14d9c:	bl	1392c <__assert_fail@plt+0x265c>
   14da0:	cmp	r0, #0
   14da4:	str	r0, [r5]
   14da8:	beq	14e14 <__assert_fail@plt+0x3b44>
   14dac:	mov	r2, #1
   14db0:	mov	r3, #9
   14db4:	str	r6, [r0, #8]
   14db8:	str	r2, [r0, #48]	; 0x30
   14dbc:	strh	r3, [r0, #56]	; 0x38
   14dc0:	add	r1, r5, #56	; 0x38
   14dc4:	ldr	r0, [r5, #48]	; 0x30
   14dc8:	bl	13db8 <__assert_fail@plt+0x2ae8>
   14dcc:	cmp	r0, #0
   14dd0:	beq	14e14 <__assert_fail@plt+0x3b44>
   14dd4:	ldr	r1, [r5, #48]	; 0x30
   14dd8:	tst	r1, #516	; 0x204
   14ddc:	beq	14e74 <__assert_fail@plt+0x3ba4>
   14de0:	mvn	r1, #0
   14de4:	add	r0, r5, #60	; 0x3c
   14de8:	bl	16858 <__assert_fail@plt+0x5588>
   14dec:	mov	r0, r5
   14df0:	add	sp, sp, #20
   14df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14df8:	ldrb	r1, [r3, #-1]!
   14dfc:	cmp	r1, #47	; 0x2f
   14e00:	bne	14cfc <__assert_fail@plt+0x3a2c>
   14e04:	sub	r2, r2, #1
   14e08:	cmp	r2, #1
   14e0c:	bne	14df8 <__assert_fail@plt+0x3b28>
   14e10:	b	14cfc <__assert_fail@plt+0x3a2c>
   14e14:	mov	r0, r6
   14e18:	bl	139a0 <__assert_fail@plt+0x26d0>
   14e1c:	mov	r0, fp
   14e20:	bl	13684 <__assert_fail@plt+0x23b4>
   14e24:	ldr	r0, [r5, #24]
   14e28:	bl	13684 <__assert_fail@plt+0x23b4>
   14e2c:	mov	r0, r5
   14e30:	bl	13684 <__assert_fail@plt+0x23b4>
   14e34:	mov	r5, #0
   14e38:	mov	r0, r5
   14e3c:	add	sp, sp, #20
   14e40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e44:	bl	11180 <__errno_location@plt>
   14e48:	mov	r3, #22
   14e4c:	str	r3, [r0]
   14e50:	mov	r0, r5
   14e54:	add	sp, sp, #20
   14e58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e5c:	cmp	r9, #0
   14e60:	movne	fp, r4
   14e64:	bne	14c50 <__assert_fail@plt+0x3980>
   14e68:	mov	fp, r9
   14e6c:	mov	r6, r9
   14e70:	b	14d90 <__assert_fail@plt+0x3ac0>
   14e74:	ldr	r2, [pc, #112]	; 14eec <__assert_fail@plt+0x3c1c>
   14e78:	ldr	r0, [r5, #32]
   14e7c:	bl	13e38 <__assert_fail@plt+0x2b68>
   14e80:	mvn	r1, #0
   14e84:	cmp	r0, #0
   14e88:	str	r0, [r5, #28]
   14e8c:	ldrlt	r3, [r5, #48]	; 0x30
   14e90:	add	r0, r5, #60	; 0x3c
   14e94:	orrlt	r3, r3, #4
   14e98:	strlt	r3, [r5, #48]	; 0x30
   14e9c:	bl	16858 <__assert_fail@plt+0x5588>
   14ea0:	b	14dec <__assert_fail@plt+0x3b1c>
   14ea4:	bl	11180 <__errno_location@plt>
   14ea8:	mov	r5, #0
   14eac:	mov	r3, #22
   14eb0:	str	r3, [r0]
   14eb4:	mov	r0, r5
   14eb8:	add	sp, sp, #20
   14ebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ec0:	mov	r1, r6
   14ec4:	mov	r2, r8
   14ec8:	mov	r0, r5
   14ecc:	bl	1384c <__assert_fail@plt+0x257c>
   14ed0:	mov	r6, r0
   14ed4:	b	14d90 <__assert_fail@plt+0x3ac0>
   14ed8:	mov	r2, #4096	; 0x1000
   14edc:	b	14c00 <__assert_fail@plt+0x3930>
   14ee0:	mov	r6, r4
   14ee4:	b	14d90 <__assert_fail@plt+0x3ac0>
   14ee8:	andeq	fp, r1, ip, lsr #7
   14eec:	andeq	sl, r1, r8, ror pc
   14ef0:	ldr	r3, [r0]
   14ef4:	push	{r4, r5, r6, lr}
   14ef8:	cmp	r3, #0
   14efc:	mov	r5, r0
   14f00:	beq	14f3c <__assert_fail@plt+0x3c6c>
   14f04:	ldr	r2, [r3, #48]	; 0x30
   14f08:	cmp	r2, #0
   14f0c:	blt	1502c <__assert_fail@plt+0x3d5c>
   14f10:	ldr	r4, [r3, #8]
   14f14:	mov	r0, r3
   14f18:	cmp	r4, #0
   14f1c:	ldreq	r4, [r3, #4]
   14f20:	bl	13684 <__assert_fail@plt+0x23b4>
   14f24:	mov	r3, r4
   14f28:	ldr	r2, [r4, #48]	; 0x30
   14f2c:	cmp	r2, #0
   14f30:	bge	14f10 <__assert_fail@plt+0x3c40>
   14f34:	mov	r0, r4
   14f38:	bl	13684 <__assert_fail@plt+0x23b4>
   14f3c:	ldr	r0, [r5, #4]
   14f40:	cmp	r0, #0
   14f44:	beq	14f4c <__assert_fail@plt+0x3c7c>
   14f48:	bl	139a0 <__assert_fail@plt+0x26d0>
   14f4c:	ldr	r0, [r5, #8]
   14f50:	bl	13684 <__assert_fail@plt+0x23b4>
   14f54:	ldr	r0, [r5, #24]
   14f58:	bl	13684 <__assert_fail@plt+0x23b4>
   14f5c:	ldr	r3, [r5, #48]	; 0x30
   14f60:	tst	r3, #512	; 0x200
   14f64:	beq	14fd8 <__assert_fail@plt+0x3d08>
   14f68:	ldr	r0, [r5, #32]
   14f6c:	cmp	r0, #0
   14f70:	blt	14f80 <__assert_fail@plt+0x3cb0>
   14f74:	bl	112a0 <close@plt>
   14f78:	cmp	r0, #0
   14f7c:	bne	15018 <__assert_fail@plt+0x3d48>
   14f80:	mov	r4, #0
   14f84:	add	r0, r5, #60	; 0x3c
   14f88:	bl	139d4 <__assert_fail@plt+0x2704>
   14f8c:	ldr	r0, [r5, #52]	; 0x34
   14f90:	cmp	r0, #0
   14f94:	beq	14f9c <__assert_fail@plt+0x3ccc>
   14f98:	bl	1631c <__assert_fail@plt+0x504c>
   14f9c:	ldr	r2, [r5, #48]	; 0x30
   14fa0:	ldr	r3, [pc, #164]	; 1504c <__assert_fail@plt+0x3d7c>
   14fa4:	ldr	r0, [r5, #56]	; 0x38
   14fa8:	and	r3, r3, r2
   14fac:	cmp	r3, #0
   14fb0:	beq	15024 <__assert_fail@plt+0x3d54>
   14fb4:	cmp	r0, #0
   14fb8:	beq	14fc0 <__assert_fail@plt+0x3cf0>
   14fbc:	bl	1631c <__assert_fail@plt+0x504c>
   14fc0:	mov	r0, r5
   14fc4:	bl	13684 <__assert_fail@plt+0x23b4>
   14fc8:	cmp	r4, #0
   14fcc:	bne	1503c <__assert_fail@plt+0x3d6c>
   14fd0:	mov	r0, r4
   14fd4:	pop	{r4, r5, r6, pc}
   14fd8:	tst	r3, #4
   14fdc:	bne	14f80 <__assert_fail@plt+0x3cb0>
   14fe0:	ldr	r0, [r5, #28]
   14fe4:	bl	1124c <fchdir@plt>
   14fe8:	cmp	r0, #0
   14fec:	beq	15034 <__assert_fail@plt+0x3d64>
   14ff0:	bl	11180 <__errno_location@plt>
   14ff4:	ldr	r4, [r0]
   14ff8:	ldr	r0, [r5, #28]
   14ffc:	bl	112a0 <close@plt>
   15000:	clz	r3, r4
   15004:	lsr	r3, r3, #5
   15008:	cmp	r0, #0
   1500c:	moveq	r3, #0
   15010:	cmp	r3, #0
   15014:	beq	14f84 <__assert_fail@plt+0x3cb4>
   15018:	bl	11180 <__errno_location@plt>
   1501c:	ldr	r4, [r0]
   15020:	b	14f84 <__assert_fail@plt+0x3cb4>
   15024:	bl	13684 <__assert_fail@plt+0x23b4>
   15028:	b	14fc0 <__assert_fail@plt+0x3cf0>
   1502c:	mov	r4, r3
   15030:	b	14f34 <__assert_fail@plt+0x3c64>
   15034:	ldr	r0, [r5, #28]
   15038:	b	14f74 <__assert_fail@plt+0x3ca4>
   1503c:	bl	11180 <__errno_location@plt>
   15040:	str	r4, [r0]
   15044:	mvn	r4, #0
   15048:	b	14fd0 <__assert_fail@plt+0x3d00>
   1504c:	andeq	r0, r0, r2, lsl #2
   15050:	push	{r4, r5, r6, r7, r8, lr}
   15054:	ldr	r5, [r0]
   15058:	cmp	r5, #0
   1505c:	beq	15190 <__assert_fail@plt+0x3ec0>
   15060:	ldr	r1, [r0, #48]	; 0x30
   15064:	ands	r3, r1, #8192	; 0x2000
   15068:	bne	15190 <__assert_fail@plt+0x3ec0>
   1506c:	ldrh	r2, [r5, #60]	; 0x3c
   15070:	mov	r8, r0
   15074:	mov	r0, #3
   15078:	cmp	r2, #1
   1507c:	strh	r0, [r5, #60]	; 0x3c
   15080:	beq	153fc <__assert_fail@plt+0x412c>
   15084:	cmp	r2, #2
   15088:	ldrh	r3, [r5, #56]	; 0x38
   1508c:	beq	1519c <__assert_fail@plt+0x3ecc>
   15090:	cmp	r3, #1
   15094:	bne	150cc <__assert_fail@plt+0x3dfc>
   15098:	cmp	r2, #4
   1509c:	bne	151b0 <__assert_fail@plt+0x3ee0>
   150a0:	b	151cc <__assert_fail@plt+0x3efc>
   150a4:	mov	r0, r5
   150a8:	str	r4, [r8]
   150ac:	bl	13684 <__assert_fail@plt+0x23b4>
   150b0:	ldr	r5, [r4, #48]	; 0x30
   150b4:	cmp	r5, #0
   150b8:	beq	15214 <__assert_fail@plt+0x3f44>
   150bc:	ldrh	r3, [r4, #60]	; 0x3c
   150c0:	mov	r5, r4
   150c4:	cmp	r3, #4
   150c8:	bne	15310 <__assert_fail@plt+0x4040>
   150cc:	ldr	r4, [r5, #8]
   150d0:	cmp	r4, #0
   150d4:	bne	150a4 <__assert_fail@plt+0x3dd4>
   150d8:	ldr	r4, [r5, #4]
   150dc:	ldr	r3, [r4, #12]
   150e0:	cmp	r3, #0
   150e4:	bne	1558c <__assert_fail@plt+0x42bc>
   150e8:	str	r4, [r8]
   150ec:	mov	r0, r5
   150f0:	bl	13684 <__assert_fail@plt+0x23b4>
   150f4:	ldr	r3, [r4, #48]	; 0x30
   150f8:	cmn	r3, #1
   150fc:	beq	154c8 <__assert_fail@plt+0x41f8>
   15100:	ldrh	r3, [r4, #56]	; 0x38
   15104:	cmp	r3, #11
   15108:	beq	15384 <__assert_fail@plt+0x40b4>
   1510c:	ldr	r3, [r4, #40]	; 0x28
   15110:	ldr	r2, [r8, #24]
   15114:	mov	r1, #0
   15118:	strb	r1, [r2, r3]
   1511c:	ldr	r3, [r4, #48]	; 0x30
   15120:	cmp	r3, r1
   15124:	beq	15454 <__assert_fail@plt+0x4184>
   15128:	ldrh	r3, [r4, #58]	; 0x3a
   1512c:	tst	r3, #2
   15130:	beq	15414 <__assert_fail@plt+0x4144>
   15134:	ldr	r3, [r8, #48]	; 0x30
   15138:	tst	r3, #4
   1513c:	beq	15478 <__assert_fail@plt+0x41a8>
   15140:	ldr	r0, [r4, #36]	; 0x24
   15144:	bl	112a0 <close@plt>
   15148:	ldr	r3, [r8, #48]	; 0x30
   1514c:	ldrh	r2, [r4, #56]	; 0x38
   15150:	cmp	r2, #2
   15154:	beq	15188 <__assert_fail@plt+0x3eb8>
   15158:	ldr	r2, [r4, #32]
   1515c:	cmp	r2, #0
   15160:	movne	r2, #7
   15164:	strhne	r2, [r4, #56]	; 0x38
   15168:	bne	15188 <__assert_fail@plt+0x3eb8>
   1516c:	mov	r2, #6
   15170:	mov	r0, r3
   15174:	strh	r2, [r4, #56]	; 0x38
   15178:	add	r1, r8, #56	; 0x38
   1517c:	mov	r2, r4
   15180:	bl	14100 <__assert_fail@plt+0x2e30>
   15184:	ldr	r3, [r8, #48]	; 0x30
   15188:	tst	r3, #8192	; 0x2000
   1518c:	beq	1520c <__assert_fail@plt+0x3f3c>
   15190:	mov	r4, #0
   15194:	mov	r0, r4
   15198:	pop	{r4, r5, r6, r7, r8, pc}
   1519c:	sub	r2, r3, #12
   151a0:	cmp	r2, #1
   151a4:	bls	15494 <__assert_fail@plt+0x41c4>
   151a8:	cmp	r3, #1
   151ac:	bne	150cc <__assert_fail@plt+0x3dfc>
   151b0:	tst	r1, #64	; 0x40
   151b4:	beq	15388 <__assert_fail@plt+0x40b8>
   151b8:	ldrd	r6, [r5, #64]	; 0x40
   151bc:	ldrd	r2, [r8, #16]
   151c0:	cmp	r7, r3
   151c4:	cmpeq	r6, r2
   151c8:	beq	15388 <__assert_fail@plt+0x40b8>
   151cc:	ldrh	r3, [r5, #58]	; 0x3a
   151d0:	tst	r3, #2
   151d4:	bne	15580 <__assert_fail@plt+0x42b0>
   151d8:	ldr	r0, [r8, #4]
   151dc:	cmp	r0, #0
   151e0:	beq	151f0 <__assert_fail@plt+0x3f20>
   151e4:	bl	139a0 <__assert_fail@plt+0x26d0>
   151e8:	mov	r3, #0
   151ec:	str	r3, [r8, #4]
   151f0:	mov	r3, #6
   151f4:	strh	r3, [r5, #56]	; 0x38
   151f8:	mov	r2, r5
   151fc:	add	r1, r8, #56	; 0x38
   15200:	ldr	r0, [r8, #48]	; 0x30
   15204:	mov	r4, r5
   15208:	bl	14100 <__assert_fail@plt+0x2e30>
   1520c:	mov	r0, r4
   15210:	pop	{r4, r5, r6, r7, r8, pc}
   15214:	mov	r0, r8
   15218:	bl	13b9c <__assert_fail@plt+0x28cc>
   1521c:	cmp	r0, #0
   15220:	bne	1556c <__assert_fail@plt+0x429c>
   15224:	ldr	r2, [r8, #48]	; 0x30
   15228:	ldr	r3, [pc, #1228]	; 156fc <__assert_fail@plt+0x442c>
   1522c:	ldr	r0, [r8, #56]	; 0x38
   15230:	and	r3, r3, r2
   15234:	cmp	r3, #0
   15238:	beq	154e8 <__assert_fail@plt+0x4218>
   1523c:	cmp	r0, #0
   15240:	beq	15248 <__assert_fail@plt+0x3f78>
   15244:	bl	1631c <__assert_fail@plt+0x504c>
   15248:	ldr	r2, [r4, #52]	; 0x34
   1524c:	add	r6, r4, #168	; 0xa8
   15250:	str	r2, [r4, #40]	; 0x28
   15254:	mov	r1, r6
   15258:	add	r2, r2, #1
   1525c:	ldr	r0, [r8, #24]
   15260:	bl	11000 <memmove@plt>
   15264:	mov	r0, r6
   15268:	mov	r1, #47	; 0x2f
   1526c:	bl	11210 <strrchr@plt>
   15270:	cmp	r0, #0
   15274:	beq	152a4 <__assert_fail@plt+0x3fd4>
   15278:	cmp	r6, r0
   1527c:	beq	1555c <__assert_fail@plt+0x428c>
   15280:	add	r5, r0, #1
   15284:	mov	r0, r5
   15288:	bl	11168 <strlen@plt>
   1528c:	mov	r1, r5
   15290:	mov	r7, r0
   15294:	add	r2, r7, #1
   15298:	mov	r0, r6
   1529c:	bl	11000 <memmove@plt>
   152a0:	str	r7, [r4, #52]	; 0x34
   152a4:	ldr	r3, [r8, #24]
   152a8:	add	r1, r8, #56	; 0x38
   152ac:	str	r3, [r4, #28]
   152b0:	str	r3, [r4, #24]
   152b4:	ldr	r0, [r8, #48]	; 0x30
   152b8:	bl	13db8 <__assert_fail@plt+0x2ae8>
   152bc:	ldrh	r3, [r4, #56]	; 0x38
   152c0:	cmp	r3, #11
   152c4:	str	r4, [r8]
   152c8:	beq	15368 <__assert_fail@plt+0x4098>
   152cc:	cmp	r3, #1
   152d0:	bne	1520c <__assert_fail@plt+0x3f3c>
   152d4:	ldr	r3, [r4, #48]	; 0x30
   152d8:	cmp	r3, #0
   152dc:	ldrdeq	r2, [r4, #64]	; 0x40
   152e0:	strdeq	r2, [r8, #16]
   152e4:	mov	r2, r4
   152e8:	add	r1, r8, #56	; 0x38
   152ec:	ldr	r0, [r8, #48]	; 0x30
   152f0:	bl	14050 <__assert_fail@plt+0x2d80>
   152f4:	subs	r5, r0, #0
   152f8:	bne	1520c <__assert_fail@plt+0x3f3c>
   152fc:	bl	11180 <__errno_location@plt>
   15300:	mov	r3, #12
   15304:	mov	r4, r5
   15308:	str	r3, [r0]
   1530c:	b	1520c <__assert_fail@plt+0x3f3c>
   15310:	cmp	r3, #2
   15314:	beq	155c0 <__assert_fail@plt+0x42f0>
   15318:	ldr	r3, [r4, #4]
   1531c:	mov	ip, #47	; 0x2f
   15320:	ldr	r2, [r8, #24]
   15324:	ldr	r0, [r3, #40]	; 0x28
   15328:	ldr	lr, [r3, #28]
   1532c:	sub	r3, r0, #1
   15330:	add	r1, r4, #168	; 0xa8
   15334:	ldrb	lr, [lr, r3]
   15338:	cmp	lr, ip
   1533c:	movne	r3, r0
   15340:	add	r0, r2, r3
   15344:	strb	ip, [r2, r3]
   15348:	ldr	r2, [r4, #52]	; 0x34
   1534c:	add	r0, r0, #1
   15350:	add	r2, r2, #1
   15354:	bl	11000 <memmove@plt>
   15358:	ldrh	r3, [r4, #56]	; 0x38
   1535c:	str	r4, [r8]
   15360:	cmp	r3, #11
   15364:	bne	152cc <__assert_fail@plt+0x3ffc>
   15368:	ldrd	r2, [r4, #112]	; 0x70
   1536c:	cmp	r3, #0
   15370:	cmpeq	r2, #2
   15374:	beq	155ec <__assert_fail@plt+0x431c>
   15378:	cmp	r3, #0
   1537c:	cmpeq	r2, #1
   15380:	beq	1520c <__assert_fail@plt+0x3f3c>
   15384:	bl	11294 <abort@plt>
   15388:	ldr	r0, [r8, #4]
   1538c:	cmp	r0, #0
   15390:	beq	15504 <__assert_fail@plt+0x4234>
   15394:	tst	r1, #4096	; 0x1000
   15398:	bne	154f0 <__assert_fail@plt+0x4220>
   1539c:	ldr	r3, [r5, #24]
   153a0:	mvn	r2, #0
   153a4:	mov	r1, r5
   153a8:	mov	r0, r8
   153ac:	bl	13e74 <__assert_fail@plt+0x2ba4>
   153b0:	cmp	r0, #0
   153b4:	beq	15468 <__assert_fail@plt+0x4198>
   153b8:	bl	11180 <__errno_location@plt>
   153bc:	ldrh	r3, [r5, #58]	; 0x3a
   153c0:	ldr	r4, [r8, #4]
   153c4:	orr	r3, r3, #1
   153c8:	cmp	r4, #0
   153cc:	ldr	r2, [r0]
   153d0:	strh	r3, [r5, #58]	; 0x3a
   153d4:	str	r2, [r5, #32]
   153d8:	beq	1546c <__assert_fail@plt+0x419c>
   153dc:	mov	r3, r4
   153e0:	ldr	r2, [r3, #4]
   153e4:	ldr	r2, [r2, #24]
   153e8:	str	r2, [r3, #24]
   153ec:	ldr	r3, [r3, #8]
   153f0:	cmp	r3, #0
   153f4:	bne	153e0 <__assert_fail@plt+0x4110>
   153f8:	b	1546c <__assert_fail@plt+0x419c>
   153fc:	ldr	r0, [r8, #32]
   15400:	mov	r2, r5
   15404:	bl	13bec <__assert_fail@plt+0x291c>
   15408:	mov	r4, r5
   1540c:	strh	r0, [r5, #56]	; 0x38
   15410:	b	1520c <__assert_fail@plt+0x3f3c>
   15414:	tst	r3, #1
   15418:	bne	15148 <__assert_fail@plt+0x3e78>
   1541c:	ldr	r3, [pc, #732]	; 15700 <__assert_fail@plt+0x4430>
   15420:	mvn	r2, #0
   15424:	ldr	r1, [r4, #4]
   15428:	mov	r0, r8
   1542c:	bl	13e74 <__assert_fail@plt+0x2ba4>
   15430:	cmp	r0, #0
   15434:	beq	15148 <__assert_fail@plt+0x3e78>
   15438:	bl	11180 <__errno_location@plt>
   1543c:	ldr	r3, [r8, #48]	; 0x30
   15440:	orr	r3, r3, #8192	; 0x2000
   15444:	ldr	r2, [r0]
   15448:	str	r2, [r4, #32]
   1544c:	str	r3, [r8, #48]	; 0x30
   15450:	b	1514c <__assert_fail@plt+0x3e7c>
   15454:	mov	r0, r8
   15458:	bl	13b9c <__assert_fail@plt+0x28cc>
   1545c:	cmp	r0, #0
   15460:	bne	15438 <__assert_fail@plt+0x4168>
   15464:	b	15148 <__assert_fail@plt+0x3e78>
   15468:	ldr	r4, [r8, #4]
   1546c:	mov	r3, #0
   15470:	str	r3, [r8, #4]
   15474:	b	15318 <__assert_fail@plt+0x4048>
   15478:	tst	r3, #512	; 0x200
   1547c:	beq	1560c <__assert_fail@plt+0x433c>
   15480:	mov	r2, #1
   15484:	ldr	r1, [r4, #36]	; 0x24
   15488:	mov	r0, r8
   1548c:	bl	13b1c <__assert_fail@plt+0x284c>
   15490:	b	15140 <__assert_fail@plt+0x3e70>
   15494:	mov	r3, #1
   15498:	mov	r2, r5
   1549c:	ldr	r0, [r8, #32]
   154a0:	bl	13bec <__assert_fail@plt+0x291c>
   154a4:	cmp	r0, #1
   154a8:	mov	r3, r0
   154ac:	strh	r0, [r5, #56]	; 0x38
   154b0:	beq	1564c <__assert_fail@plt+0x437c>
   154b4:	cmp	r0, #11
   154b8:	mov	r4, r5
   154bc:	str	r5, [r8]
   154c0:	bne	1520c <__assert_fail@plt+0x3f3c>
   154c4:	b	15368 <__assert_fail@plt+0x4098>
   154c8:	mov	r0, r4
   154cc:	bl	13684 <__assert_fail@plt+0x23b4>
   154d0:	bl	11180 <__errno_location@plt>
   154d4:	mov	r3, #0
   154d8:	mov	r4, r3
   154dc:	str	r3, [r0]
   154e0:	str	r3, [r8]
   154e4:	b	1520c <__assert_fail@plt+0x3f3c>
   154e8:	bl	13684 <__assert_fail@plt+0x23b4>
   154ec:	b	15248 <__assert_fail@plt+0x3f78>
   154f0:	bic	r1, r1, #4096	; 0x1000
   154f4:	str	r1, [r8, #48]	; 0x30
   154f8:	bl	139a0 <__assert_fail@plt+0x26d0>
   154fc:	mov	r3, #0
   15500:	str	r3, [r8, #4]
   15504:	mov	r1, #3
   15508:	mov	r0, r8
   1550c:	bl	141b8 <__assert_fail@plt+0x2ee8>
   15510:	cmp	r0, #0
   15514:	mov	r4, r0
   15518:	str	r0, [r8, #4]
   1551c:	bne	1546c <__assert_fail@plt+0x419c>
   15520:	ldr	r0, [r8, #48]	; 0x30
   15524:	tst	r0, #8192	; 0x2000
   15528:	bne	15190 <__assert_fail@plt+0x3ec0>
   1552c:	ldr	r3, [r5, #32]
   15530:	cmp	r3, #0
   15534:	beq	15548 <__assert_fail@plt+0x4278>
   15538:	ldrh	r3, [r5, #56]	; 0x38
   1553c:	cmp	r3, #4
   15540:	movne	r3, #7
   15544:	strhne	r3, [r5, #56]	; 0x38
   15548:	add	r1, r8, #56	; 0x38
   1554c:	mov	r2, r5
   15550:	bl	14100 <__assert_fail@plt+0x2e30>
   15554:	mov	r4, r5
   15558:	b	1520c <__assert_fail@plt+0x3f3c>
   1555c:	ldrb	r3, [r4, #169]	; 0xa9
   15560:	cmp	r3, #0
   15564:	bne	15280 <__assert_fail@plt+0x3fb0>
   15568:	b	152a4 <__assert_fail@plt+0x3fd4>
   1556c:	ldr	r3, [r8, #48]	; 0x30
   15570:	mov	r4, r5
   15574:	orr	r3, r3, #8192	; 0x2000
   15578:	str	r3, [r8, #48]	; 0x30
   1557c:	b	1520c <__assert_fail@plt+0x3f3c>
   15580:	ldr	r0, [r5, #36]	; 0x24
   15584:	bl	112a0 <close@plt>
   15588:	b	151d8 <__assert_fail@plt+0x3f08>
   1558c:	ldr	r3, [r4, #40]	; 0x28
   15590:	ldr	r2, [r8, #24]
   15594:	mov	r0, #0
   15598:	str	r4, [r8]
   1559c:	mov	r1, #3
   155a0:	strb	r0, [r2, r3]
   155a4:	mov	r0, r8
   155a8:	bl	141b8 <__assert_fail@plt+0x2ee8>
   155ac:	subs	r4, r0, #0
   155b0:	beq	15638 <__assert_fail@plt+0x4368>
   155b4:	mov	r0, r5
   155b8:	bl	13684 <__assert_fail@plt+0x23b4>
   155bc:	b	15318 <__assert_fail@plt+0x4048>
   155c0:	mov	r3, #1
   155c4:	mov	r2, r4
   155c8:	ldr	r1, [r8, #48]	; 0x30
   155cc:	ldr	r0, [r8, #32]
   155d0:	bl	13bec <__assert_fail@plt+0x291c>
   155d4:	cmp	r0, #1
   155d8:	strh	r0, [r4, #56]	; 0x38
   155dc:	beq	15664 <__assert_fail@plt+0x4394>
   155e0:	mov	r3, #3
   155e4:	strh	r3, [r4, #60]	; 0x3c
   155e8:	b	15318 <__assert_fail@plt+0x4048>
   155ec:	mov	r3, #0
   155f0:	mov	r2, r4
   155f4:	ldr	r1, [r8, #48]	; 0x30
   155f8:	ldr	r0, [r8, #32]
   155fc:	bl	13bec <__assert_fail@plt+0x291c>
   15600:	mov	r3, r0
   15604:	strh	r0, [r4, #56]	; 0x38
   15608:	b	152cc <__assert_fail@plt+0x3ffc>
   1560c:	ldr	r0, [r4, #36]	; 0x24
   15610:	bl	1124c <fchdir@plt>
   15614:	cmp	r0, #0
   15618:	beq	15140 <__assert_fail@plt+0x3e70>
   1561c:	bl	11180 <__errno_location@plt>
   15620:	ldr	r3, [r8, #48]	; 0x30
   15624:	orr	r3, r3, #8192	; 0x2000
   15628:	ldr	r2, [r0]
   1562c:	str	r2, [r4, #32]
   15630:	str	r3, [r8, #48]	; 0x30
   15634:	b	15140 <__assert_fail@plt+0x3e70>
   15638:	ldr	r3, [r8, #48]	; 0x30
   1563c:	tst	r3, #8192	; 0x2000
   15640:	bne	15190 <__assert_fail@plt+0x3ec0>
   15644:	ldr	r4, [r5, #4]
   15648:	b	150e8 <__assert_fail@plt+0x3e18>
   1564c:	ldr	r1, [r8, #48]	; 0x30
   15650:	tst	r1, #4
   15654:	beq	15698 <__assert_fail@plt+0x43c8>
   15658:	str	r5, [r8]
   1565c:	mov	r4, r5
   15660:	b	152cc <__assert_fail@plt+0x3ffc>
   15664:	ldr	r1, [r8, #48]	; 0x30
   15668:	tst	r1, #4
   1566c:	bne	155e0 <__assert_fail@plt+0x4310>
   15670:	ldr	r2, [pc, #140]	; 15704 <__assert_fail@plt+0x4434>
   15674:	ldr	r0, [r8, #32]
   15678:	bl	13e38 <__assert_fail@plt+0x2b68>
   1567c:	cmp	r0, #0
   15680:	str	r0, [r4, #36]	; 0x24
   15684:	blt	156c8 <__assert_fail@plt+0x43f8>
   15688:	ldrh	r3, [r4, #58]	; 0x3a
   1568c:	orr	r3, r3, #2
   15690:	strh	r3, [r4, #58]	; 0x3a
   15694:	b	155e0 <__assert_fail@plt+0x4310>
   15698:	ldr	r2, [pc, #100]	; 15704 <__assert_fail@plt+0x4434>
   1569c:	ldr	r0, [r8, #32]
   156a0:	bl	13e38 <__assert_fail@plt+0x2b68>
   156a4:	cmp	r0, #0
   156a8:	str	r0, [r5, #36]	; 0x24
   156ac:	blt	156e0 <__assert_fail@plt+0x4410>
   156b0:	ldrh	r2, [r5, #58]	; 0x3a
   156b4:	ldrh	r3, [r5, #56]	; 0x38
   156b8:	mov	r4, r5
   156bc:	orr	r2, r2, #2
   156c0:	strh	r2, [r5, #58]	; 0x3a
   156c4:	b	152c0 <__assert_fail@plt+0x3ff0>
   156c8:	bl	11180 <__errno_location@plt>
   156cc:	mov	r2, #7
   156d0:	ldr	r3, [r0]
   156d4:	strh	r2, [r4, #56]	; 0x38
   156d8:	str	r3, [r4, #32]
   156dc:	b	155e0 <__assert_fail@plt+0x4310>
   156e0:	bl	11180 <__errno_location@plt>
   156e4:	mov	r2, #7
   156e8:	mov	r3, r2
   156ec:	ldr	r1, [r0]
   156f0:	strh	r2, [r5, #56]	; 0x38
   156f4:	str	r1, [r5, #32]
   156f8:	b	15658 <__assert_fail@plt+0x4388>
   156fc:	andeq	r0, r0, r2, lsl #2
   15700:	andeq	sl, r1, ip, ror pc
   15704:	andeq	sl, r1, r8, ror pc
   15708:	cmp	r2, #4
   1570c:	bhi	15720 <__assert_fail@plt+0x4450>
   15710:	mov	r3, #0
   15714:	strh	r2, [r1, #60]	; 0x3c
   15718:	mov	r0, r3
   1571c:	bx	lr
   15720:	push	{r4, lr}
   15724:	bl	11180 <__errno_location@plt>
   15728:	mov	r2, #22
   1572c:	mov	r3, #1
   15730:	str	r2, [r0]
   15734:	mov	r0, r3
   15738:	pop	{r4, pc}
   1573c:	push	{r4, r5, r6, r7, r8, lr}
   15740:	bics	r8, r1, #4096	; 0x1000
   15744:	bne	15844 <__assert_fail@plt+0x4574>
   15748:	mov	r5, r0
   1574c:	mov	r4, r1
   15750:	bl	11180 <__errno_location@plt>
   15754:	ldr	r6, [r5]
   15758:	str	r8, [r0]
   1575c:	ldr	r3, [r5, #48]	; 0x30
   15760:	mov	r7, r0
   15764:	ands	r3, r3, #8192	; 0x2000
   15768:	bne	1585c <__assert_fail@plt+0x458c>
   1576c:	ldrh	r2, [r6, #56]	; 0x38
   15770:	cmp	r2, #9
   15774:	ldreq	r3, [r6, #8]
   15778:	beq	157e8 <__assert_fail@plt+0x4518>
   1577c:	cmp	r2, #1
   15780:	bne	157e8 <__assert_fail@plt+0x4518>
   15784:	ldr	r0, [r5, #4]
   15788:	cmp	r0, #0
   1578c:	beq	15794 <__assert_fail@plt+0x44c4>
   15790:	bl	139a0 <__assert_fail@plt+0x26d0>
   15794:	cmp	r4, #4096	; 0x1000
   15798:	moveq	r8, #2
   1579c:	ldreq	r3, [r5, #48]	; 0x30
   157a0:	movne	r8, #1
   157a4:	orreq	r3, r3, #4096	; 0x1000
   157a8:	streq	r3, [r5, #48]	; 0x30
   157ac:	ldr	r3, [r6, #48]	; 0x30
   157b0:	cmp	r3, #0
   157b4:	bne	157d4 <__assert_fail@plt+0x4504>
   157b8:	ldr	r3, [r6, #24]
   157bc:	ldrb	r3, [r3]
   157c0:	cmp	r3, #47	; 0x2f
   157c4:	beq	157d4 <__assert_fail@plt+0x4504>
   157c8:	ldr	r1, [r5, #48]	; 0x30
   157cc:	ands	r4, r1, #4
   157d0:	beq	157f0 <__assert_fail@plt+0x4520>
   157d4:	mov	r1, r8
   157d8:	mov	r0, r5
   157dc:	bl	141b8 <__assert_fail@plt+0x2ee8>
   157e0:	mov	r3, r0
   157e4:	str	r0, [r5, #4]
   157e8:	mov	r0, r3
   157ec:	pop	{r4, r5, r6, r7, r8, pc}
   157f0:	ldr	r2, [pc, #160]	; 15898 <__assert_fail@plt+0x45c8>
   157f4:	ldr	r0, [r5, #32]
   157f8:	bl	13e38 <__assert_fail@plt+0x2b68>
   157fc:	subs	r6, r0, #0
   15800:	strlt	r4, [r5, #4]
   15804:	movlt	r3, r4
   15808:	blt	157e8 <__assert_fail@plt+0x4518>
   1580c:	mov	r1, r8
   15810:	mov	r0, r5
   15814:	bl	141b8 <__assert_fail@plt+0x2ee8>
   15818:	ldr	r3, [r5, #48]	; 0x30
   1581c:	ands	r4, r3, #512	; 0x200
   15820:	str	r0, [r5, #4]
   15824:	beq	15864 <__assert_fail@plt+0x4594>
   15828:	mov	r1, r6
   1582c:	mov	r2, #1
   15830:	mov	r0, r5
   15834:	bl	13b1c <__assert_fail@plt+0x284c>
   15838:	ldr	r3, [r5, #4]
   1583c:	mov	r0, r3
   15840:	pop	{r4, r5, r6, r7, r8, pc}
   15844:	bl	11180 <__errno_location@plt>
   15848:	mov	r2, #22
   1584c:	mov	r3, #0
   15850:	str	r2, [r0]
   15854:	mov	r0, r3
   15858:	pop	{r4, r5, r6, r7, r8, pc}
   1585c:	mov	r3, r8
   15860:	b	157e8 <__assert_fail@plt+0x4518>
   15864:	mov	r0, r6
   15868:	bl	1124c <fchdir@plt>
   1586c:	cmp	r0, #0
   15870:	bne	15880 <__assert_fail@plt+0x45b0>
   15874:	mov	r0, r6
   15878:	bl	112a0 <close@plt>
   1587c:	b	15838 <__assert_fail@plt+0x4568>
   15880:	ldr	r5, [r7]
   15884:	mov	r0, r6
   15888:	bl	112a0 <close@plt>
   1588c:	str	r5, [r7]
   15890:	mov	r3, r4
   15894:	b	157e8 <__assert_fail@plt+0x4518>
   15898:	andeq	sl, r1, r8, ror pc
   1589c:	andeq	r0, r0, r0
   158a0:	cmp	r0, #10
   158a4:	movcc	r0, #10
   158a8:	push	{r4, r5, r6, r7, r8, lr}
   158ac:	orr	r7, r0, #1
   158b0:	cmn	r7, #1
   158b4:	ldrne	r8, [pc, #132]	; 15940 <__assert_fail@plt+0x4670>
   158b8:	beq	15930 <__assert_fail@plt+0x4660>
   158bc:	cmp	r7, #9
   158c0:	bls	15938 <__assert_fail@plt+0x4668>
   158c4:	umull	r2, r3, r8, r7
   158c8:	lsr	r3, r3, #1
   158cc:	add	r3, r3, r3, lsl #1
   158d0:	cmp	r7, r3
   158d4:	beq	15924 <__assert_fail@plt+0x4654>
   158d8:	mov	r6, #16
   158dc:	mov	r5, #9
   158e0:	mov	r4, #3
   158e4:	b	158f8 <__assert_fail@plt+0x4628>
   158e8:	bl	19d88 <__assert_fail@plt+0x8ab8>
   158ec:	add	r6, r6, #8
   158f0:	cmp	r1, #0
   158f4:	beq	15924 <__assert_fail@plt+0x4654>
   158f8:	add	r5, r5, r6
   158fc:	add	r4, r4, #2
   15900:	cmp	r5, r7
   15904:	mov	r0, r7
   15908:	mov	r1, r4
   1590c:	bcc	158e8 <__assert_fail@plt+0x4618>
   15910:	mov	r1, r4
   15914:	mov	r0, r7
   15918:	bl	19d88 <__assert_fail@plt+0x8ab8>
   1591c:	cmp	r1, #0
   15920:	bne	15930 <__assert_fail@plt+0x4660>
   15924:	add	r7, r7, #2
   15928:	cmn	r7, #1
   1592c:	bne	158bc <__assert_fail@plt+0x45ec>
   15930:	mov	r0, r7
   15934:	pop	{r4, r5, r6, r7, r8, pc}
   15938:	mov	r4, #3
   1593c:	b	15910 <__assert_fail@plt+0x4640>
   15940:	bge	feac03f4 <optarg@@GLIBC_2.4+0xfea9425c>
   15944:	push	{r4, lr}
   15948:	ror	r0, r0, #3
   1594c:	bl	19d88 <__assert_fail@plt+0x8ab8>
   15950:	mov	r0, r1
   15954:	pop	{r4, pc}
   15958:	sub	r0, r1, r0
   1595c:	clz	r0, r0
   15960:	lsr	r0, r0, #5
   15964:	bx	lr
   15968:	push	{r4, lr}
   1596c:	mov	r4, r0
   15970:	mov	r0, r1
   15974:	ldr	r3, [r4, #24]
   15978:	ldr	r1, [r4, #8]
   1597c:	blx	r3
   15980:	ldr	r3, [r4, #8]
   15984:	cmp	r0, r3
   15988:	bcs	15998 <__assert_fail@plt+0x46c8>
   1598c:	ldr	r3, [r4]
   15990:	add	r0, r3, r0, lsl #3
   15994:	pop	{r4, pc}
   15998:	bl	11294 <abort@plt>
   1599c:	push	{r4, r5, r6, r7, r8, lr}
   159a0:	mov	r7, r2
   159a4:	mov	r8, r3
   159a8:	mov	r6, r0
   159ac:	mov	r5, r1
   159b0:	bl	15968 <__assert_fail@plt+0x4698>
   159b4:	str	r0, [r7]
   159b8:	ldr	r3, [r0]
   159bc:	cmp	r3, #0
   159c0:	beq	15a58 <__assert_fail@plt+0x4788>
   159c4:	cmp	r5, r3
   159c8:	mov	r4, r0
   159cc:	beq	159ec <__assert_fail@plt+0x471c>
   159d0:	mov	r1, r3
   159d4:	mov	r0, r5
   159d8:	ldr	r3, [r6, #28]
   159dc:	blx	r3
   159e0:	cmp	r0, #0
   159e4:	beq	15a4c <__assert_fail@plt+0x477c>
   159e8:	ldr	r3, [r4]
   159ec:	cmp	r8, #0
   159f0:	beq	15a1c <__assert_fail@plt+0x474c>
   159f4:	ldr	r2, [r4, #4]
   159f8:	cmp	r2, #0
   159fc:	movne	ip, #0
   15a00:	ldmne	r2, {r0, r1}
   15a04:	streq	r2, [r4]
   15a08:	stmne	r4, {r0, r1}
   15a0c:	strne	ip, [r2]
   15a10:	ldrne	r1, [r6, #36]	; 0x24
   15a14:	strne	r1, [r2, #4]
   15a18:	strne	r2, [r6, #36]	; 0x24
   15a1c:	mov	r0, r3
   15a20:	pop	{r4, r5, r6, r7, r8, pc}
   15a24:	ldr	r3, [r2]
   15a28:	cmp	r5, r3
   15a2c:	beq	15a6c <__assert_fail@plt+0x479c>
   15a30:	mov	r1, r3
   15a34:	mov	r0, r5
   15a38:	ldr	r3, [r6, #28]
   15a3c:	blx	r3
   15a40:	cmp	r0, #0
   15a44:	bne	15a64 <__assert_fail@plt+0x4794>
   15a48:	ldr	r4, [r4, #4]
   15a4c:	ldr	r2, [r4, #4]
   15a50:	cmp	r2, #0
   15a54:	bne	15a24 <__assert_fail@plt+0x4754>
   15a58:	mov	r3, #0
   15a5c:	mov	r0, r3
   15a60:	pop	{r4, r5, r6, r7, r8, pc}
   15a64:	ldr	r2, [r4, #4]
   15a68:	ldr	r3, [r2]
   15a6c:	cmp	r8, #0
   15a70:	beq	15a1c <__assert_fail@plt+0x474c>
   15a74:	ldr	r0, [r2, #4]
   15a78:	mov	r1, #0
   15a7c:	str	r0, [r4, #4]
   15a80:	str	r1, [r2]
   15a84:	ldr	r1, [r6, #36]	; 0x24
   15a88:	mov	r0, r3
   15a8c:	str	r1, [r2, #4]
   15a90:	str	r2, [r6, #36]	; 0x24
   15a94:	pop	{r4, r5, r6, r7, r8, pc}
   15a98:	ldr	r2, [pc, #164]	; 15b44 <__assert_fail@plt+0x4874>
   15a9c:	ldr	r3, [r0]
   15aa0:	cmp	r3, r2
   15aa4:	beq	15b2c <__assert_fail@plt+0x485c>
   15aa8:	vldr	s15, [r3, #8]
   15aac:	vldr	s14, [pc, #128]	; 15b34 <__assert_fail@plt+0x4864>
   15ab0:	vcmpe.f32	s15, s14
   15ab4:	vmrs	APSR_nzcv, fpscr
   15ab8:	ble	15b20 <__assert_fail@plt+0x4850>
   15abc:	vldr	s13, [pc, #116]	; 15b38 <__assert_fail@plt+0x4868>
   15ac0:	vcmpe.f32	s15, s13
   15ac4:	vmrs	APSR_nzcv, fpscr
   15ac8:	bpl	15b20 <__assert_fail@plt+0x4850>
   15acc:	vldr	s13, [pc, #104]	; 15b3c <__assert_fail@plt+0x486c>
   15ad0:	vldr	s12, [r3, #12]
   15ad4:	vcmpe.f32	s12, s13
   15ad8:	vmrs	APSR_nzcv, fpscr
   15adc:	ble	15b20 <__assert_fail@plt+0x4850>
   15ae0:	vldr	s13, [r3]
   15ae4:	vcmpe.f32	s13, #0.0
   15ae8:	vmrs	APSR_nzcv, fpscr
   15aec:	blt	15b20 <__assert_fail@plt+0x4850>
   15af0:	vadd.f32	s14, s13, s14
   15af4:	vldr	s13, [r3, #4]
   15af8:	vcmpe.f32	s14, s13
   15afc:	vmrs	APSR_nzcv, fpscr
   15b00:	bpl	15b20 <__assert_fail@plt+0x4850>
   15b04:	vldr	s12, [pc, #52]	; 15b40 <__assert_fail@plt+0x4870>
   15b08:	vcmpe.f32	s13, s12
   15b0c:	vmrs	APSR_nzcv, fpscr
   15b10:	bhi	15b20 <__assert_fail@plt+0x4850>
   15b14:	vcmpe.f32	s15, s14
   15b18:	vmrs	APSR_nzcv, fpscr
   15b1c:	bgt	15b2c <__assert_fail@plt+0x485c>
   15b20:	str	r2, [r0]
   15b24:	mov	r0, #0
   15b28:	bx	lr
   15b2c:	mov	r0, #1
   15b30:	bx	lr
   15b34:	stclcc	12, cr12, [ip, #820]	; 0x334
   15b38:	svccc	0x00666666
   15b3c:	svccc	0x008ccccd
   15b40:	svccc	0x00800000
   15b44:	andeq	fp, r1, r8, asr #6
   15b48:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b4c:	ldm	r1, {r6, ip}
   15b50:	cmp	r6, ip
   15b54:	bcs	15c10 <__assert_fail@plt+0x4940>
   15b58:	mov	sl, r2
   15b5c:	mov	r5, r0
   15b60:	mov	r8, r1
   15b64:	add	r6, r6, #8
   15b68:	mov	r9, #0
   15b6c:	ldr	fp, [r6, #-8]
   15b70:	mov	r7, r6
   15b74:	cmp	fp, #0
   15b78:	beq	15c04 <__assert_fail@plt+0x4934>
   15b7c:	ldr	r4, [r6, #-4]
   15b80:	cmp	r4, #0
   15b84:	bne	15ba4 <__assert_fail@plt+0x48d4>
   15b88:	b	15bf4 <__assert_fail@plt+0x4924>
   15b8c:	ldr	r3, [r0, #4]
   15b90:	cmp	r2, #0
   15b94:	str	r3, [r4, #4]
   15b98:	str	r4, [r0, #4]
   15b9c:	mov	r4, r2
   15ba0:	beq	15bf0 <__assert_fail@plt+0x4920>
   15ba4:	ldr	fp, [r4]
   15ba8:	mov	r0, r5
   15bac:	mov	r1, fp
   15bb0:	bl	15968 <__assert_fail@plt+0x4698>
   15bb4:	ldr	r2, [r4, #4]
   15bb8:	ldr	r1, [r0]
   15bbc:	cmp	r1, #0
   15bc0:	bne	15b8c <__assert_fail@plt+0x48bc>
   15bc4:	ldr	ip, [r5, #12]
   15bc8:	str	fp, [r0]
   15bcc:	add	r3, ip, #1
   15bd0:	str	r3, [r5, #12]
   15bd4:	str	r1, [r4]
   15bd8:	ldr	r3, [r5, #36]	; 0x24
   15bdc:	cmp	r2, #0
   15be0:	str	r3, [r4, #4]
   15be4:	str	r4, [r5, #36]	; 0x24
   15be8:	mov	r4, r2
   15bec:	bne	15ba4 <__assert_fail@plt+0x48d4>
   15bf0:	ldr	fp, [r6, #-8]
   15bf4:	cmp	sl, #0
   15bf8:	str	r9, [r6, #-4]
   15bfc:	beq	15c18 <__assert_fail@plt+0x4948>
   15c00:	ldr	ip, [r8, #4]
   15c04:	cmp	ip, r7
   15c08:	add	r6, r6, #8
   15c0c:	bhi	15b6c <__assert_fail@plt+0x489c>
   15c10:	mov	r0, #1
   15c14:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c18:	mov	r1, fp
   15c1c:	mov	r0, r5
   15c20:	bl	15968 <__assert_fail@plt+0x4698>
   15c24:	ldr	r2, [r0]
   15c28:	mov	r4, r0
   15c2c:	cmp	r2, #0
   15c30:	beq	15c7c <__assert_fail@plt+0x49ac>
   15c34:	ldr	r0, [r5, #36]	; 0x24
   15c38:	cmp	r0, #0
   15c3c:	beq	15c90 <__assert_fail@plt+0x49c0>
   15c40:	ldr	r2, [r0, #4]
   15c44:	str	r2, [r5, #36]	; 0x24
   15c48:	ldr	r2, [r4, #4]
   15c4c:	str	fp, [r0]
   15c50:	str	r2, [r0, #4]
   15c54:	str	r0, [r4, #4]
   15c58:	str	r9, [r6, #-8]
   15c5c:	ldr	r3, [r8, #12]
   15c60:	ldr	ip, [r8, #4]
   15c64:	sub	r3, r3, #1
   15c68:	cmp	ip, r7
   15c6c:	str	r3, [r8, #12]
   15c70:	add	r6, r6, #8
   15c74:	bhi	15b6c <__assert_fail@plt+0x489c>
   15c78:	b	15c10 <__assert_fail@plt+0x4940>
   15c7c:	ldr	r2, [r5, #12]
   15c80:	str	fp, [r0]
   15c84:	add	r3, r2, #1
   15c88:	str	r3, [r5, #12]
   15c8c:	b	15c58 <__assert_fail@plt+0x4988>
   15c90:	mov	r0, #8
   15c94:	bl	19528 <__assert_fail@plt+0x8258>
   15c98:	cmp	r0, #0
   15c9c:	bne	15c48 <__assert_fail@plt+0x4978>
   15ca0:	mov	r0, sl
   15ca4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ca8:	ldr	r0, [r0, #8]
   15cac:	bx	lr
   15cb0:	ldr	r0, [r0, #12]
   15cb4:	bx	lr
   15cb8:	ldr	r0, [r0, #16]
   15cbc:	bx	lr
   15cc0:	ldm	r0, {r1, ip}
   15cc4:	mov	r0, #0
   15cc8:	cmp	r1, ip
   15ccc:	bcs	15d14 <__assert_fail@plt+0x4a44>
   15cd0:	ldr	r3, [r1]
   15cd4:	cmp	r3, #0
   15cd8:	beq	15d04 <__assert_fail@plt+0x4a34>
   15cdc:	ldr	r3, [r1, #4]
   15ce0:	mov	r2, #1
   15ce4:	cmp	r3, #0
   15ce8:	beq	15cfc <__assert_fail@plt+0x4a2c>
   15cec:	ldr	r3, [r3, #4]
   15cf0:	add	r2, r2, #1
   15cf4:	cmp	r3, #0
   15cf8:	bne	15cec <__assert_fail@plt+0x4a1c>
   15cfc:	cmp	r0, r2
   15d00:	movcc	r0, r2
   15d04:	add	r1, r1, #8
   15d08:	cmp	r1, ip
   15d0c:	bcc	15cd0 <__assert_fail@plt+0x4a00>
   15d10:	bx	lr
   15d14:	bx	lr
   15d18:	push	{lr}		; (str lr, [sp, #-4]!)
   15d1c:	mov	r2, #0
   15d20:	ldm	r0, {r1, lr}
   15d24:	mov	ip, r2
   15d28:	cmp	r1, lr
   15d2c:	bcs	15d6c <__assert_fail@plt+0x4a9c>
   15d30:	ldr	r3, [r1]
   15d34:	cmp	r3, #0
   15d38:	beq	15d60 <__assert_fail@plt+0x4a90>
   15d3c:	ldr	r3, [r1, #4]
   15d40:	add	ip, ip, #1
   15d44:	cmp	r3, #0
   15d48:	add	r2, r2, #1
   15d4c:	beq	15d60 <__assert_fail@plt+0x4a90>
   15d50:	ldr	r3, [r3, #4]
   15d54:	add	r2, r2, #1
   15d58:	cmp	r3, #0
   15d5c:	bne	15d50 <__assert_fail@plt+0x4a80>
   15d60:	add	r1, r1, #8
   15d64:	cmp	r1, lr
   15d68:	bcc	15d30 <__assert_fail@plt+0x4a60>
   15d6c:	ldr	r3, [r0, #12]
   15d70:	cmp	r3, ip
   15d74:	ldreq	r0, [r0, #16]
   15d78:	subeq	r0, r0, r2
   15d7c:	clzeq	r0, r0
   15d80:	lsreq	r0, r0, #5
   15d84:	movne	r0, #0
   15d88:	pop	{pc}		; (ldr pc, [sp], #4)
   15d8c:	push	{r4, r5, r6, r7, lr}
   15d90:	mov	r5, r1
   15d94:	ldm	r0, {ip, lr}
   15d98:	sub	sp, sp, #12
   15d9c:	ldr	r3, [r0, #16]
   15da0:	cmp	ip, lr
   15da4:	mov	r4, #0
   15da8:	ldr	r6, [r0, #8]
   15dac:	ldr	r7, [r0, #12]
   15db0:	bcs	15df4 <__assert_fail@plt+0x4b24>
   15db4:	ldr	r2, [ip]
   15db8:	cmp	r2, #0
   15dbc:	beq	15de8 <__assert_fail@plt+0x4b18>
   15dc0:	ldr	r2, [ip, #4]
   15dc4:	mov	r1, #1
   15dc8:	cmp	r2, #0
   15dcc:	beq	15de0 <__assert_fail@plt+0x4b10>
   15dd0:	ldr	r2, [r2, #4]
   15dd4:	add	r1, r1, #1
   15dd8:	cmp	r2, #0
   15ddc:	bne	15dd0 <__assert_fail@plt+0x4b00>
   15de0:	cmp	r4, r1
   15de4:	movcc	r4, r1
   15de8:	add	ip, ip, #8
   15dec:	cmp	ip, lr
   15df0:	bcc	15db4 <__assert_fail@plt+0x4ae4>
   15df4:	ldr	r2, [pc, #116]	; 15e70 <__assert_fail@plt+0x4ba0>
   15df8:	mov	r1, #1
   15dfc:	mov	r0, r5
   15e00:	bl	111bc <__fprintf_chk@plt>
   15e04:	mov	r3, r6
   15e08:	ldr	r2, [pc, #100]	; 15e74 <__assert_fail@plt+0x4ba4>
   15e0c:	mov	r1, #1
   15e10:	mov	r0, r5
   15e14:	bl	111bc <__fprintf_chk@plt>
   15e18:	vmov	s15, r7
   15e1c:	vldr	d5, [pc, #68]	; 15e68 <__assert_fail@plt+0x4b98>
   15e20:	mov	r3, r7
   15e24:	ldr	r2, [pc, #76]	; 15e78 <__assert_fail@plt+0x4ba8>
   15e28:	vcvt.f64.u32	d6, s15
   15e2c:	vmov	s15, r6
   15e30:	mov	r1, #1
   15e34:	mov	r0, r5
   15e38:	vcvt.f64.u32	d7, s15
   15e3c:	vmul.f64	d6, d6, d5
   15e40:	vdiv.f64	d5, d6, d7
   15e44:	vstr	d5, [sp]
   15e48:	bl	111bc <__fprintf_chk@plt>
   15e4c:	mov	r3, r4
   15e50:	mov	r0, r5
   15e54:	ldr	r2, [pc, #32]	; 15e7c <__assert_fail@plt+0x4bac>
   15e58:	mov	r1, #1
   15e5c:	add	sp, sp, #12
   15e60:	pop	{r4, r5, r6, r7, lr}
   15e64:	b	111bc <__fprintf_chk@plt>
   15e68:	andeq	r0, r0, r0
   15e6c:	subsmi	r0, r9, r0
   15e70:	andeq	fp, r1, ip, asr r3
   15e74:	andeq	fp, r1, r4, ror r3
   15e78:	andeq	fp, r1, ip, lsl #7
   15e7c:			; <UNDEFINED> instruction: 0x0001b3b0
   15e80:	push	{r4, r5, r6, lr}
   15e84:	mov	r6, r0
   15e88:	mov	r5, r1
   15e8c:	bl	15968 <__assert_fail@plt+0x4698>
   15e90:	ldr	r3, [r0]
   15e94:	cmp	r3, #0
   15e98:	movne	r4, r0
   15e9c:	bne	15ea8 <__assert_fail@plt+0x4bd8>
   15ea0:	b	15ed4 <__assert_fail@plt+0x4c04>
   15ea4:	ldr	r3, [r4]
   15ea8:	cmp	r5, r3
   15eac:	mov	r1, r3
   15eb0:	mov	r0, r5
   15eb4:	beq	15edc <__assert_fail@plt+0x4c0c>
   15eb8:	ldr	r3, [r6, #28]
   15ebc:	blx	r3
   15ec0:	cmp	r0, #0
   15ec4:	bne	15ee4 <__assert_fail@plt+0x4c14>
   15ec8:	ldr	r4, [r4, #4]
   15ecc:	cmp	r4, #0
   15ed0:	bne	15ea4 <__assert_fail@plt+0x4bd4>
   15ed4:	mov	r0, #0
   15ed8:	pop	{r4, r5, r6, pc}
   15edc:	mov	r0, r5
   15ee0:	pop	{r4, r5, r6, pc}
   15ee4:	ldr	r0, [r4]
   15ee8:	pop	{r4, r5, r6, pc}
   15eec:	ldr	r3, [r0, #16]
   15ef0:	cmp	r3, #0
   15ef4:	beq	15f28 <__assert_fail@plt+0x4c58>
   15ef8:	ldr	r3, [r0]
   15efc:	ldr	r2, [r0, #4]
   15f00:	cmp	r3, r2
   15f04:	bcc	15f18 <__assert_fail@plt+0x4c48>
   15f08:	b	15f30 <__assert_fail@plt+0x4c60>
   15f0c:	add	r3, r3, #8
   15f10:	cmp	r3, r2
   15f14:	bcs	15f30 <__assert_fail@plt+0x4c60>
   15f18:	ldr	r0, [r3]
   15f1c:	cmp	r0, #0
   15f20:	beq	15f0c <__assert_fail@plt+0x4c3c>
   15f24:	bx	lr
   15f28:	mov	r0, r3
   15f2c:	bx	lr
   15f30:	push	{r4, lr}
   15f34:	bl	11294 <abort@plt>
   15f38:	push	{r4, r5, r6, lr}
   15f3c:	mov	r5, r0
   15f40:	mov	r4, r1
   15f44:	bl	15968 <__assert_fail@plt+0x4698>
   15f48:	mov	r2, r0
   15f4c:	mov	r3, r0
   15f50:	b	15f5c <__assert_fail@plt+0x4c8c>
   15f54:	cmp	r3, #0
   15f58:	beq	15f70 <__assert_fail@plt+0x4ca0>
   15f5c:	ldm	r3, {r1, r3}
   15f60:	cmp	r4, r1
   15f64:	bne	15f54 <__assert_fail@plt+0x4c84>
   15f68:	cmp	r3, #0
   15f6c:	bne	15f98 <__assert_fail@plt+0x4cc8>
   15f70:	ldr	r3, [r5, #4]
   15f74:	b	15f84 <__assert_fail@plt+0x4cb4>
   15f78:	ldr	r0, [r2]
   15f7c:	cmp	r0, #0
   15f80:	popne	{r4, r5, r6, pc}
   15f84:	add	r2, r2, #8
   15f88:	cmp	r2, r3
   15f8c:	bcc	15f78 <__assert_fail@plt+0x4ca8>
   15f90:	mov	r0, #0
   15f94:	pop	{r4, r5, r6, pc}
   15f98:	ldr	r0, [r3]
   15f9c:	pop	{r4, r5, r6, pc}
   15fa0:	push	{r4, r5, r6, lr}
   15fa4:	ldm	r0, {r5, lr}
   15fa8:	cmp	r5, lr
   15fac:	bcs	16030 <__assert_fail@plt+0x4d60>
   15fb0:	add	r5, r5, #8
   15fb4:	mov	ip, #0
   15fb8:	ldr	r3, [r5, #-8]
   15fbc:	mov	r6, r5
   15fc0:	cmp	r3, #0
   15fc4:	beq	16010 <__assert_fail@plt+0x4d40>
   15fc8:	cmp	r2, ip
   15fcc:	bls	1601c <__assert_fail@plt+0x4d4c>
   15fd0:	str	r3, [r1, ip, lsl #2]
   15fd4:	ldr	r3, [r5, #-4]
   15fd8:	add	r4, ip, #1
   15fdc:	cmp	r3, #0
   15fe0:	add	lr, r1, ip, lsl #2
   15fe4:	beq	16024 <__assert_fail@plt+0x4d54>
   15fe8:	mov	ip, r4
   15fec:	cmp	r2, ip
   15ff0:	beq	1601c <__assert_fail@plt+0x4d4c>
   15ff4:	ldr	r4, [r3]
   15ff8:	add	ip, ip, #1
   15ffc:	str	r4, [lr, #4]!
   16000:	ldr	r3, [r3, #4]
   16004:	cmp	r3, #0
   16008:	bne	15fec <__assert_fail@plt+0x4d1c>
   1600c:	ldr	lr, [r0, #4]
   16010:	cmp	lr, r6
   16014:	add	r5, r5, #8
   16018:	bhi	15fb8 <__assert_fail@plt+0x4ce8>
   1601c:	mov	r0, ip
   16020:	pop	{r4, r5, r6, pc}
   16024:	ldr	lr, [r0, #4]
   16028:	mov	ip, r4
   1602c:	b	16010 <__assert_fail@plt+0x4d40>
   16030:	mov	ip, #0
   16034:	b	1601c <__assert_fail@plt+0x4d4c>
   16038:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1603c:	ldr	r3, [r0, #4]
   16040:	ldr	r8, [r0]
   16044:	cmp	r8, r3
   16048:	bcs	160ac <__assert_fail@plt+0x4ddc>
   1604c:	mov	r7, r2
   16050:	mov	r6, r1
   16054:	mov	r9, r0
   16058:	mov	r5, #0
   1605c:	ldr	r0, [r8]
   16060:	cmp	r0, #0
   16064:	beq	16098 <__assert_fail@plt+0x4dc8>
   16068:	mov	r4, r8
   1606c:	b	16074 <__assert_fail@plt+0x4da4>
   16070:	ldr	r0, [r4]
   16074:	mov	r1, r7
   16078:	blx	r6
   1607c:	cmp	r0, #0
   16080:	beq	160a4 <__assert_fail@plt+0x4dd4>
   16084:	ldr	r4, [r4, #4]
   16088:	add	r5, r5, #1
   1608c:	cmp	r4, #0
   16090:	bne	16070 <__assert_fail@plt+0x4da0>
   16094:	ldr	r3, [r9, #4]
   16098:	add	r8, r8, #8
   1609c:	cmp	r3, r8
   160a0:	bhi	1605c <__assert_fail@plt+0x4d8c>
   160a4:	mov	r0, r5
   160a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   160ac:	mov	r5, #0
   160b0:	b	160a4 <__assert_fail@plt+0x4dd4>
   160b4:	push	{r4, r5, r6, lr}
   160b8:	mov	r4, r0
   160bc:	ldrb	r0, [r0]
   160c0:	cmp	r0, #0
   160c4:	beq	160f4 <__assert_fail@plt+0x4e24>
   160c8:	mov	r5, r1
   160cc:	mov	r1, #0
   160d0:	rsb	r1, r1, r1, lsl #5
   160d4:	add	r0, r1, r0
   160d8:	mov	r1, r5
   160dc:	bl	19d88 <__assert_fail@plt+0x8ab8>
   160e0:	ldrb	r0, [r4, #1]!
   160e4:	cmp	r0, #0
   160e8:	bne	160d0 <__assert_fail@plt+0x4e00>
   160ec:	mov	r0, r1
   160f0:	pop	{r4, r5, r6, pc}
   160f4:	mov	r1, r0
   160f8:	b	160ec <__assert_fail@plt+0x4e1c>
   160fc:	push	{lr}		; (str lr, [sp, #-4]!)
   16100:	mov	ip, r0
   16104:	ldr	lr, [pc, #16]	; 1611c <__assert_fail@plt+0x4e4c>
   16108:	ldm	lr!, {r0, r1, r2, r3}
   1610c:	ldr	lr, [lr]
   16110:	stmia	ip!, {r0, r1, r2, r3}
   16114:	str	lr, [ip]
   16118:	pop	{pc}		; (ldr pc, [sp], #4)
   1611c:	andeq	fp, r1, r8, asr #6
   16120:	push	{r4, r5, r6, r7, lr}
   16124:	sub	sp, sp, #12
   16128:	cmp	r2, #0
   1612c:	str	r0, [sp, #4]
   16130:	ldr	r6, [pc, #304]	; 16268 <__assert_fail@plt+0x4f98>
   16134:	mov	r0, #40	; 0x28
   16138:	movne	r6, r2
   1613c:	cmp	r3, #0
   16140:	ldr	r7, [pc, #292]	; 1626c <__assert_fail@plt+0x4f9c>
   16144:	mov	r5, r1
   16148:	movne	r7, r3
   1614c:	bl	19528 <__assert_fail@plt+0x8258>
   16150:	subs	r4, r0, #0
   16154:	beq	161ec <__assert_fail@plt+0x4f1c>
   16158:	cmp	r5, #0
   1615c:	beq	16240 <__assert_fail@plt+0x4f70>
   16160:	mov	r0, r4
   16164:	str	r5, [r0, #20]!
   16168:	bl	15a98 <__assert_fail@plt+0x47c8>
   1616c:	cmp	r0, #0
   16170:	beq	16228 <__assert_fail@plt+0x4f58>
   16174:	ldrb	r3, [r5, #16]
   16178:	cmp	r3, #0
   1617c:	beq	161f8 <__assert_fail@plt+0x4f28>
   16180:	ldr	r0, [sp, #4]
   16184:	bl	158a0 <__assert_fail@plt+0x45d0>
   16188:	lsrs	r2, r0, #30
   1618c:	movne	r5, #1
   16190:	moveq	r5, #0
   16194:	tst	r0, #536870912	; 0x20000000
   16198:	bne	16220 <__assert_fail@plt+0x4f50>
   1619c:	cmp	r5, #0
   161a0:	bne	16220 <__assert_fail@plt+0x4f50>
   161a4:	cmp	r0, #0
   161a8:	str	r0, [r4, #8]
   161ac:	beq	16228 <__assert_fail@plt+0x4f58>
   161b0:	mov	r1, #8
   161b4:	bl	194e0 <__assert_fail@plt+0x8210>
   161b8:	cmp	r0, #0
   161bc:	str	r0, [r4]
   161c0:	beq	16228 <__assert_fail@plt+0x4f58>
   161c4:	ldr	r3, [r4, #8]
   161c8:	str	r5, [r4, #12]
   161cc:	str	r5, [r4, #16]
   161d0:	add	r0, r0, r3, lsl #3
   161d4:	ldr	r3, [sp, #32]
   161d8:	str	r6, [r4, #24]
   161dc:	str	r7, [r4, #28]
   161e0:	str	r3, [r4, #32]
   161e4:	str	r5, [r4, #36]	; 0x24
   161e8:	str	r0, [r4, #4]
   161ec:	mov	r0, r4
   161f0:	add	sp, sp, #12
   161f4:	pop	{r4, r5, r6, r7, pc}
   161f8:	vldr	s12, [r5, #8]
   161fc:	vldr	s15, [sp, #4]
   16200:	vldr	s14, [pc, #88]	; 16260 <__assert_fail@plt+0x4f90>
   16204:	vcvt.f32.u32	s13, s15
   16208:	vdiv.f32	s15, s13, s12
   1620c:	vcmpe.f32	s15, s14
   16210:	vmrs	APSR_nzcv, fpscr
   16214:	vcvtlt.u32.f32	s15, s15
   16218:	vstrlt	s15, [sp, #4]
   1621c:	blt	16180 <__assert_fail@plt+0x4eb0>
   16220:	mov	r3, #0
   16224:	str	r3, [r4, #8]
   16228:	mov	r0, r4
   1622c:	bl	13684 <__assert_fail@plt+0x23b4>
   16230:	mov	r4, #0
   16234:	mov	r0, r4
   16238:	add	sp, sp, #12
   1623c:	pop	{r4, r5, r6, r7, pc}
   16240:	ldr	r3, [pc, #40]	; 16270 <__assert_fail@plt+0x4fa0>
   16244:	mov	r0, r4
   16248:	str	r3, [r0, #20]!
   1624c:	bl	15a98 <__assert_fail@plt+0x47c8>
   16250:	cmp	r0, #0
   16254:	vldrne	s12, [pc, #8]	; 16264 <__assert_fail@plt+0x4f94>
   16258:	bne	161fc <__assert_fail@plt+0x4f2c>
   1625c:	b	16228 <__assert_fail@plt+0x4f58>
   16260:	svcmi	0x00800000
   16264:	svccc	0x004ccccd
   16268:	andeq	r5, r1, r4, asr #18
   1626c:	andeq	r5, r1, r8, asr r9
   16270:	andeq	fp, r1, r8, asr #6
   16274:	push	{r4, r5, r6, r7, r8, lr}
   16278:	mov	r5, r0
   1627c:	ldr	r7, [r0]
   16280:	ldr	r3, [r0, #4]
   16284:	cmp	r7, r3
   16288:	addcc	r7, r7, #8
   1628c:	movcc	r6, #0
   16290:	bcs	1630c <__assert_fail@plt+0x503c>
   16294:	ldr	r2, [r7, #-8]
   16298:	mov	r8, r7
   1629c:	cmp	r2, #0
   162a0:	beq	16300 <__assert_fail@plt+0x5030>
   162a4:	ldr	r4, [r7, #-4]
   162a8:	ldr	r2, [r5, #32]
   162ac:	cmp	r4, #0
   162b0:	beq	162e4 <__assert_fail@plt+0x5014>
   162b4:	cmp	r2, #0
   162b8:	beq	162c8 <__assert_fail@plt+0x4ff8>
   162bc:	ldr	r0, [r4]
   162c0:	blx	r2
   162c4:	ldr	r2, [r5, #32]
   162c8:	ldr	r3, [r4, #4]
   162cc:	ldr	r1, [r5, #36]	; 0x24
   162d0:	str	r6, [r4]
   162d4:	str	r1, [r4, #4]
   162d8:	str	r4, [r5, #36]	; 0x24
   162dc:	subs	r4, r3, #0
   162e0:	bne	162b4 <__assert_fail@plt+0x4fe4>
   162e4:	cmp	r2, #0
   162e8:	beq	162f4 <__assert_fail@plt+0x5024>
   162ec:	ldr	r0, [r7, #-8]
   162f0:	blx	r2
   162f4:	str	r6, [r7, #-8]
   162f8:	str	r6, [r7, #-4]
   162fc:	ldr	r3, [r5, #4]
   16300:	cmp	r3, r8
   16304:	add	r7, r7, #8
   16308:	bhi	16294 <__assert_fail@plt+0x4fc4>
   1630c:	mov	r3, #0
   16310:	str	r3, [r5, #12]
   16314:	str	r3, [r5, #16]
   16318:	pop	{r4, r5, r6, r7, r8, pc}
   1631c:	ldr	r3, [r0, #32]
   16320:	push	{r4, r5, r6, lr}
   16324:	cmp	r3, #0
   16328:	mov	r5, r0
   1632c:	beq	1638c <__assert_fail@plt+0x50bc>
   16330:	ldr	r3, [r0, #16]
   16334:	cmp	r3, #0
   16338:	beq	1638c <__assert_fail@plt+0x50bc>
   1633c:	ldr	r6, [r0]
   16340:	ldr	r3, [r0, #4]
   16344:	cmp	r6, r3
   16348:	bcs	163c8 <__assert_fail@plt+0x50f8>
   1634c:	ldr	r0, [r6]
   16350:	cmp	r0, #0
   16354:	movne	r4, r6
   16358:	bne	16364 <__assert_fail@plt+0x5094>
   1635c:	b	1637c <__assert_fail@plt+0x50ac>
   16360:	ldr	r0, [r4]
   16364:	ldr	r3, [r5, #32]
   16368:	blx	r3
   1636c:	ldr	r4, [r4, #4]
   16370:	cmp	r4, #0
   16374:	bne	16360 <__assert_fail@plt+0x5090>
   16378:	ldr	r3, [r5, #4]
   1637c:	add	r6, r6, #8
   16380:	cmp	r3, r6
   16384:	bhi	1634c <__assert_fail@plt+0x507c>
   16388:	b	16390 <__assert_fail@plt+0x50c0>
   1638c:	ldr	r3, [r5, #4]
   16390:	ldr	r6, [r5]
   16394:	cmp	r3, r6
   16398:	bls	163c8 <__assert_fail@plt+0x50f8>
   1639c:	ldr	r0, [r6, #4]
   163a0:	cmp	r0, #0
   163a4:	beq	163bc <__assert_fail@plt+0x50ec>
   163a8:	ldr	r4, [r0, #4]
   163ac:	bl	13684 <__assert_fail@plt+0x23b4>
   163b0:	subs	r0, r4, #0
   163b4:	bne	163a8 <__assert_fail@plt+0x50d8>
   163b8:	ldr	r3, [r5, #4]
   163bc:	add	r6, r6, #8
   163c0:	cmp	r3, r6
   163c4:	bhi	1639c <__assert_fail@plt+0x50cc>
   163c8:	ldr	r0, [r5, #36]	; 0x24
   163cc:	cmp	r0, #0
   163d0:	beq	163e4 <__assert_fail@plt+0x5114>
   163d4:	ldr	r4, [r0, #4]
   163d8:	bl	13684 <__assert_fail@plt+0x23b4>
   163dc:	subs	r0, r4, #0
   163e0:	bne	163d4 <__assert_fail@plt+0x5104>
   163e4:	ldr	r0, [r5]
   163e8:	bl	13684 <__assert_fail@plt+0x23b4>
   163ec:	mov	r0, r5
   163f0:	pop	{r4, r5, r6, lr}
   163f4:	b	13684 <__assert_fail@plt+0x23b4>
   163f8:	ldr	r3, [r0, #20]
   163fc:	push	{r4, r5, r6, r7, lr}
   16400:	sub	sp, sp, #52	; 0x34
   16404:	ldrb	r2, [r3, #16]
   16408:	mov	r5, r0
   1640c:	str	r1, [sp, #4]
   16410:	cmp	r2, #0
   16414:	bne	16440 <__assert_fail@plt+0x5170>
   16418:	vmov	s15, r1
   1641c:	vldr	s13, [r3, #8]
   16420:	vldr	s14, [pc, #352]	; 16588 <__assert_fail@plt+0x52b8>
   16424:	vcvt.f32.u32	s12, s15
   16428:	vdiv.f32	s15, s12, s13
   1642c:	vcmpe.f32	s15, s14
   16430:	vmrs	APSR_nzcv, fpscr
   16434:	bge	16544 <__assert_fail@plt+0x5274>
   16438:	vcvt.u32.f32	s15, s15
   1643c:	vstr	s15, [sp, #4]
   16440:	ldr	r0, [sp, #4]
   16444:	bl	158a0 <__assert_fail@plt+0x45d0>
   16448:	lsrs	r3, r0, #30
   1644c:	movne	r2, #1
   16450:	moveq	r2, #0
   16454:	tst	r0, #536870912	; 0x20000000
   16458:	movne	r2, #1
   1645c:	cmp	r0, #0
   16460:	movne	r4, r2
   16464:	orreq	r4, r2, #1
   16468:	cmp	r4, #0
   1646c:	mov	r6, r0
   16470:	bne	16544 <__assert_fail@plt+0x5274>
   16474:	ldr	r3, [r5, #8]
   16478:	cmp	r3, r0
   1647c:	beq	16534 <__assert_fail@plt+0x5264>
   16480:	mov	r1, #8
   16484:	bl	194e0 <__assert_fail@plt+0x8210>
   16488:	cmp	r0, #0
   1648c:	str	r0, [sp, #8]
   16490:	beq	16544 <__assert_fail@plt+0x5274>
   16494:	ldr	r1, [r5, #24]
   16498:	ldr	r7, [r5, #20]
   1649c:	ldr	lr, [r5, #28]
   164a0:	ldr	ip, [r5, #32]
   164a4:	add	r0, r0, r6, lsl #3
   164a8:	ldr	r3, [r5, #36]	; 0x24
   164ac:	str	r0, [sp, #12]
   164b0:	mov	r2, r4
   164b4:	str	r1, [sp, #32]
   164b8:	add	r0, sp, #8
   164bc:	mov	r1, r5
   164c0:	str	r4, [sp, #20]
   164c4:	str	r4, [sp, #24]
   164c8:	str	r6, [sp, #16]
   164cc:	str	r7, [sp, #28]
   164d0:	str	lr, [sp, #36]	; 0x24
   164d4:	str	ip, [sp, #40]	; 0x28
   164d8:	str	r3, [sp, #44]	; 0x2c
   164dc:	bl	15b48 <__assert_fail@plt+0x4878>
   164e0:	subs	r4, r0, #0
   164e4:	bne	16554 <__assert_fail@plt+0x5284>
   164e8:	ldr	r3, [sp, #44]	; 0x2c
   164ec:	mov	r2, #1
   164f0:	str	r3, [r5, #36]	; 0x24
   164f4:	add	r1, sp, #8
   164f8:	mov	r0, r5
   164fc:	bl	15b48 <__assert_fail@plt+0x4878>
   16500:	cmp	r0, #0
   16504:	beq	16584 <__assert_fail@plt+0x52b4>
   16508:	add	r1, sp, #8
   1650c:	mov	r0, r5
   16510:	mov	r2, r4
   16514:	bl	15b48 <__assert_fail@plt+0x4878>
   16518:	cmp	r0, #0
   1651c:	beq	16584 <__assert_fail@plt+0x52b4>
   16520:	ldr	r0, [sp, #8]
   16524:	bl	13684 <__assert_fail@plt+0x23b4>
   16528:	mov	r0, r4
   1652c:	add	sp, sp, #52	; 0x34
   16530:	pop	{r4, r5, r6, r7, pc}
   16534:	mov	r4, #1
   16538:	mov	r0, r4
   1653c:	add	sp, sp, #52	; 0x34
   16540:	pop	{r4, r5, r6, r7, pc}
   16544:	mov	r4, #0
   16548:	mov	r0, r4
   1654c:	add	sp, sp, #52	; 0x34
   16550:	pop	{r4, r5, r6, r7, pc}
   16554:	ldr	r0, [r5]
   16558:	bl	13684 <__assert_fail@plt+0x23b4>
   1655c:	add	r0, sp, #12
   16560:	ldr	ip, [sp, #8]
   16564:	ldm	r0, {r0, r1, r2}
   16568:	ldr	r3, [sp, #44]	; 0x2c
   1656c:	str	ip, [r5]
   16570:	stmib	r5, {r0, r1, r2}
   16574:	mov	r0, r4
   16578:	str	r3, [r5, #36]	; 0x24
   1657c:	add	sp, sp, #52	; 0x34
   16580:	pop	{r4, r5, r6, r7, pc}
   16584:	bl	11294 <abort@plt>
   16588:	svcmi	0x00800000
   1658c:	push	{r4, r5, r6, lr}
   16590:	subs	r6, r1, #0
   16594:	sub	sp, sp, #8
   16598:	beq	166cc <__assert_fail@plt+0x53fc>
   1659c:	mov	r4, r2
   165a0:	mov	r3, #0
   165a4:	add	r2, sp, #4
   165a8:	mov	r5, r0
   165ac:	bl	1599c <__assert_fail@plt+0x46cc>
   165b0:	cmp	r0, #0
   165b4:	beq	165d0 <__assert_fail@plt+0x5300>
   165b8:	cmp	r4, #0
   165bc:	moveq	r0, r4
   165c0:	strne	r0, [r4]
   165c4:	movne	r0, #0
   165c8:	add	sp, sp, #8
   165cc:	pop	{r4, r5, r6, pc}
   165d0:	vldr	s15, [r5, #8]
   165d4:	ldr	r3, [r5, #20]
   165d8:	vldr	s14, [r5, #12]
   165dc:	vcvt.f32.u32	s15, s15
   165e0:	vldr	s13, [r3, #8]
   165e4:	vcvt.f32.u32	s14, s14
   165e8:	vmul.f32	s15, s15, s13
   165ec:	vcmpe.f32	s14, s15
   165f0:	vmrs	APSR_nzcv, fpscr
   165f4:	bgt	16644 <__assert_fail@plt+0x5374>
   165f8:	ldr	r2, [sp, #4]
   165fc:	ldr	r3, [r2]
   16600:	cmp	r3, #0
   16604:	beq	166d0 <__assert_fail@plt+0x5400>
   16608:	ldr	r3, [r5, #36]	; 0x24
   1660c:	cmp	r3, #0
   16610:	beq	166f4 <__assert_fail@plt+0x5424>
   16614:	ldr	r1, [r3, #4]
   16618:	str	r1, [r5, #36]	; 0x24
   1661c:	ldr	r1, [r5, #16]
   16620:	ldr	r0, [r2, #4]
   16624:	add	r1, r1, #1
   16628:	str	r0, [r3, #4]
   1662c:	str	r6, [r3]
   16630:	mov	r0, #1
   16634:	str	r3, [r2, #4]
   16638:	str	r1, [r5, #16]
   1663c:	add	sp, sp, #8
   16640:	pop	{r4, r5, r6, pc}
   16644:	add	r0, r5, #20
   16648:	bl	15a98 <__assert_fail@plt+0x47c8>
   1664c:	vldr	s15, [r5, #8]
   16650:	ldr	r3, [r5, #20]
   16654:	vldr	s14, [r5, #12]
   16658:	vcvt.f32.u32	s15, s15
   1665c:	vldr	s13, [r3, #8]
   16660:	vcvt.f32.u32	s14, s14
   16664:	vmul.f32	s12, s13, s15
   16668:	vcmpe.f32	s14, s12
   1666c:	vmrs	APSR_nzcv, fpscr
   16670:	ble	165f8 <__assert_fail@plt+0x5328>
   16674:	vldr	s14, [r3, #12]
   16678:	ldrb	r2, [r3, #16]
   1667c:	vmul.f32	s15, s15, s14
   16680:	cmp	r2, #0
   16684:	vldr	s14, [pc, #132]	; 16710 <__assert_fail@plt+0x5440>
   16688:	vmuleq.f32	s15, s15, s13
   1668c:	vcmpe.f32	s15, s14
   16690:	vmrs	APSR_nzcv, fpscr
   16694:	bge	16708 <__assert_fail@plt+0x5438>
   16698:	vcvt.u32.f32	s15, s15
   1669c:	mov	r0, r5
   166a0:	vmov	r1, s15
   166a4:	bl	163f8 <__assert_fail@plt+0x5128>
   166a8:	cmp	r0, #0
   166ac:	beq	16708 <__assert_fail@plt+0x5438>
   166b0:	add	r2, sp, #4
   166b4:	mov	r3, #0
   166b8:	mov	r1, r6
   166bc:	mov	r0, r5
   166c0:	bl	1599c <__assert_fail@plt+0x46cc>
   166c4:	cmp	r0, #0
   166c8:	beq	165f8 <__assert_fail@plt+0x5328>
   166cc:	bl	11294 <abort@plt>
   166d0:	ldr	r1, [r5, #16]
   166d4:	ldr	r3, [r5, #12]
   166d8:	add	r1, r1, #1
   166dc:	add	r3, r3, #1
   166e0:	str	r6, [r2]
   166e4:	mov	r0, #1
   166e8:	str	r1, [r5, #16]
   166ec:	str	r3, [r5, #12]
   166f0:	b	165c8 <__assert_fail@plt+0x52f8>
   166f4:	mov	r0, #8
   166f8:	bl	19528 <__assert_fail@plt+0x8258>
   166fc:	subs	r3, r0, #0
   16700:	ldrne	r2, [sp, #4]
   16704:	bne	1661c <__assert_fail@plt+0x534c>
   16708:	mvn	r0, #0
   1670c:	b	165c8 <__assert_fail@plt+0x52f8>
   16710:	svcmi	0x00800000
   16714:	push	{r4, lr}
   16718:	sub	sp, sp, #8
   1671c:	add	r2, sp, #4
   16720:	mov	r4, r1
   16724:	bl	1658c <__assert_fail@plt+0x52bc>
   16728:	cmn	r0, #1
   1672c:	beq	16744 <__assert_fail@plt+0x5474>
   16730:	cmp	r0, #0
   16734:	movne	r0, r4
   16738:	ldreq	r0, [sp, #4]
   1673c:	add	sp, sp, #8
   16740:	pop	{r4, pc}
   16744:	mov	r0, #0
   16748:	b	1673c <__assert_fail@plt+0x546c>
   1674c:	push	{r4, r5, r6, lr}
   16750:	sub	sp, sp, #8
   16754:	mov	r3, #1
   16758:	add	r2, sp, #4
   1675c:	mov	r4, r0
   16760:	bl	1599c <__assert_fail@plt+0x46cc>
   16764:	subs	r5, r0, #0
   16768:	beq	16788 <__assert_fail@plt+0x54b8>
   1676c:	ldr	r2, [sp, #4]
   16770:	ldr	r3, [r4, #16]
   16774:	ldr	r2, [r2]
   16778:	sub	r3, r3, #1
   1677c:	cmp	r2, #0
   16780:	str	r3, [r4, #16]
   16784:	beq	16794 <__assert_fail@plt+0x54c4>
   16788:	mov	r0, r5
   1678c:	add	sp, sp, #8
   16790:	pop	{r4, r5, r6, pc}
   16794:	vldr	s15, [r4, #8]
   16798:	ldr	r3, [r4, #12]
   1679c:	ldr	r2, [r4, #20]
   167a0:	sub	r3, r3, #1
   167a4:	vcvt.f32.u32	s14, s15
   167a8:	vldr	s13, [r2]
   167ac:	vmov	s15, r3
   167b0:	str	r3, [r4, #12]
   167b4:	vcvt.f32.u32	s15, s15
   167b8:	vmul.f32	s14, s14, s13
   167bc:	vcmpe.f32	s15, s14
   167c0:	vmrs	APSR_nzcv, fpscr
   167c4:	bpl	16788 <__assert_fail@plt+0x54b8>
   167c8:	add	r0, r4, #20
   167cc:	bl	15a98 <__assert_fail@plt+0x47c8>
   167d0:	vldr	s15, [r4, #8]
   167d4:	ldr	r3, [r4, #20]
   167d8:	vldr	s13, [r4, #12]
   167dc:	vcvt.f32.u32	s15, s15
   167e0:	vldr	s14, [r3]
   167e4:	vcvt.f32.u32	s13, s13
   167e8:	vmul.f32	s14, s15, s14
   167ec:	vcmpe.f32	s13, s14
   167f0:	vmrs	APSR_nzcv, fpscr
   167f4:	bpl	16788 <__assert_fail@plt+0x54b8>
   167f8:	ldrb	r2, [r3, #16]
   167fc:	mov	r0, r4
   16800:	cmp	r2, #0
   16804:	vldreq	s13, [r3, #4]
   16808:	vldrne	s14, [r3, #4]
   1680c:	vldreq	s14, [r3, #8]
   16810:	vmuleq.f32	s15, s15, s13
   16814:	vmul.f32	s15, s15, s14
   16818:	vcvt.u32.f32	s15, s15
   1681c:	vmov	r1, s15
   16820:	bl	163f8 <__assert_fail@plt+0x5128>
   16824:	cmp	r0, #0
   16828:	bne	16788 <__assert_fail@plt+0x54b8>
   1682c:	ldr	r0, [r4, #36]	; 0x24
   16830:	cmp	r0, #0
   16834:	beq	16848 <__assert_fail@plt+0x5578>
   16838:	ldr	r6, [r0, #4]
   1683c:	bl	13684 <__assert_fail@plt+0x23b4>
   16840:	subs	r0, r6, #0
   16844:	bne	16838 <__assert_fail@plt+0x5568>
   16848:	mov	r3, #0
   1684c:	str	r3, [r4, #36]	; 0x24
   16850:	b	16788 <__assert_fail@plt+0x54b8>
   16854:	b	1674c <__assert_fail@plt+0x547c>
   16858:	mov	r3, #0
   1685c:	mov	r2, #1
   16860:	str	r1, [r0]
   16864:	str	r1, [r0, #4]
   16868:	str	r1, [r0, #8]
   1686c:	str	r1, [r0, #12]
   16870:	str	r1, [r0, #16]
   16874:	strb	r2, [r0, #28]
   16878:	str	r3, [r0, #20]
   1687c:	str	r3, [r0, #24]
   16880:	bx	lr
   16884:	ldrb	r0, [r0, #28]
   16888:	bx	lr
   1688c:	ldrb	ip, [r0, #28]
   16890:	ldr	r3, [r0, #20]
   16894:	mov	r2, r0
   16898:	eor	ip, ip, #1
   1689c:	add	r3, ip, r3
   168a0:	and	r3, r3, #3
   168a4:	ldr	r0, [r0, r3, lsl #2]
   168a8:	str	r1, [r2, r3, lsl #2]
   168ac:	ldr	r1, [r2, #24]
   168b0:	str	r3, [r2, #20]
   168b4:	cmp	r3, r1
   168b8:	addeq	r3, ip, r3
   168bc:	andeq	r3, r3, #3
   168c0:	streq	r3, [r2, #24]
   168c4:	mov	r3, #0
   168c8:	strb	r3, [r2, #28]
   168cc:	bx	lr
   168d0:	ldrb	r3, [r0, #28]
   168d4:	cmp	r3, #0
   168d8:	bne	16910 <__assert_fail@plt+0x5640>
   168dc:	ldr	r3, [r0, #20]
   168e0:	ldr	r1, [r0, #16]
   168e4:	ldr	r2, [r0, r3, lsl #2]
   168e8:	str	r1, [r0, r3, lsl #2]
   168ec:	ldr	r1, [r0, #24]
   168f0:	cmp	r3, r1
   168f4:	addne	r3, r3, #3
   168f8:	moveq	r3, #1
   168fc:	andne	r3, r3, #3
   16900:	strbeq	r3, [r0, #28]
   16904:	strne	r3, [r0, #20]
   16908:	mov	r0, r2
   1690c:	bx	lr
   16910:	push	{r4, lr}
   16914:	bl	11294 <abort@plt>
   16918:	push	{r2, r3}
   1691c:	push	{lr}		; (str lr, [sp, #-4]!)
   16920:	sub	sp, sp, #12
   16924:	ldr	r2, [sp, #16]
   16928:	ands	r3, r2, #64	; 0x40
   1692c:	addne	r3, sp, #20
   16930:	strne	r3, [sp, #4]
   16934:	ldrne	r3, [sp, #20]
   16938:	bl	11174 <openat64@plt>
   1693c:	bl	188cc <__assert_fail@plt+0x75fc>
   16940:	add	sp, sp, #12
   16944:	pop	{lr}		; (ldr lr, [sp], #4)
   16948:	add	sp, sp, #8
   1694c:	bx	lr
   16950:	orr	r2, r2, #540672	; 0x84000
   16954:	push	{r4, r5, r6, lr}
   16958:	orr	r2, r2, #2304	; 0x900
   1695c:	mov	r6, r3
   16960:	bl	16918 <__assert_fail@plt+0x5648>
   16964:	subs	r5, r0, #0
   16968:	blt	1699c <__assert_fail@plt+0x56cc>
   1696c:	bl	11234 <fdopendir@plt>
   16970:	subs	r4, r0, #0
   16974:	beq	16984 <__assert_fail@plt+0x56b4>
   16978:	str	r5, [r6]
   1697c:	mov	r0, r4
   16980:	pop	{r4, r5, r6, pc}
   16984:	bl	11180 <__errno_location@plt>
   16988:	mov	r6, r0
   1698c:	mov	r0, r5
   16990:	ldr	r5, [r6]
   16994:	bl	112a0 <close@plt>
   16998:	b	16978 <__assert_fail@plt+0x56a8>
   1699c:	mov	r4, #0
   169a0:	b	1697c <__assert_fail@plt+0x56ac>
   169a4:	push	{r4, r5, r6, lr}
   169a8:	subs	r4, r0, #0
   169ac:	beq	16a20 <__assert_fail@plt+0x5750>
   169b0:	mov	r1, #47	; 0x2f
   169b4:	bl	11210 <strrchr@plt>
   169b8:	subs	r5, r0, #0
   169bc:	beq	16a0c <__assert_fail@plt+0x573c>
   169c0:	add	r6, r5, #1
   169c4:	sub	r3, r6, r4
   169c8:	cmp	r3, #6
   169cc:	ble	16a0c <__assert_fail@plt+0x573c>
   169d0:	mov	r2, #7
   169d4:	ldr	r1, [pc, #96]	; 16a3c <__assert_fail@plt+0x576c>
   169d8:	sub	r0, r5, #6
   169dc:	bl	11288 <strncmp@plt>
   169e0:	cmp	r0, #0
   169e4:	bne	16a0c <__assert_fail@plt+0x573c>
   169e8:	mov	r2, #3
   169ec:	ldr	r1, [pc, #76]	; 16a40 <__assert_fail@plt+0x5770>
   169f0:	mov	r0, r6
   169f4:	bl	11288 <strncmp@plt>
   169f8:	cmp	r0, #0
   169fc:	movne	r4, r6
   16a00:	ldreq	r3, [pc, #60]	; 16a44 <__assert_fail@plt+0x5774>
   16a04:	addeq	r4, r5, #4
   16a08:	streq	r4, [r3]
   16a0c:	ldr	r2, [pc, #52]	; 16a48 <__assert_fail@plt+0x5778>
   16a10:	ldr	r3, [pc, #52]	; 16a4c <__assert_fail@plt+0x577c>
   16a14:	str	r4, [r2]
   16a18:	str	r4, [r3]
   16a1c:	pop	{r4, r5, r6, pc}
   16a20:	ldr	r3, [pc, #40]	; 16a50 <__assert_fail@plt+0x5780>
   16a24:	mov	r2, #55	; 0x37
   16a28:	mov	r1, #1
   16a2c:	ldr	r3, [r3]
   16a30:	ldr	r0, [pc, #28]	; 16a54 <__assert_fail@plt+0x5784>
   16a34:	bl	110b4 <fwrite@plt>
   16a38:	bl	11294 <abort@plt>
   16a3c:	andeq	fp, r1, r0, lsl #8
   16a40:	andeq	fp, r1, r8, lsl #8
   16a44:	andeq	ip, r2, r8, ror r1
   16a48:			; <UNDEFINED> instruction: 0x0002c1bc
   16a4c:	andeq	ip, r2, ip, ror r1
   16a50:	andeq	ip, r2, r8, lsl #3
   16a54:	andeq	fp, r1, r8, asr #7
   16a58:	push	{r4, r5, r6, lr}
   16a5c:	mov	r2, #48	; 0x30
   16a60:	mov	r4, r1
   16a64:	mov	r1, #0
   16a68:	mov	r5, r0
   16a6c:	bl	11198 <memset@plt>
   16a70:	cmp	r4, #10
   16a74:	beq	16a84 <__assert_fail@plt+0x57b4>
   16a78:	str	r4, [r5]
   16a7c:	mov	r0, r5
   16a80:	pop	{r4, r5, r6, pc}
   16a84:	bl	11294 <abort@plt>
   16a88:	push	{r4, r5, r6, lr}
   16a8c:	mov	r4, r0
   16a90:	mov	r5, r1
   16a94:	bl	199c8 <__assert_fail@plt+0x86f8>
   16a98:	ldrb	r3, [r0]
   16a9c:	bic	r3, r3, #32
   16aa0:	cmp	r3, #85	; 0x55
   16aa4:	bne	16b04 <__assert_fail@plt+0x5834>
   16aa8:	ldrb	r3, [r0, #1]
   16aac:	bic	r3, r3, #32
   16ab0:	cmp	r3, #84	; 0x54
   16ab4:	bne	16b40 <__assert_fail@plt+0x5870>
   16ab8:	ldrb	r3, [r0, #2]
   16abc:	bic	r3, r3, #32
   16ac0:	cmp	r3, #70	; 0x46
   16ac4:	bne	16b40 <__assert_fail@plt+0x5870>
   16ac8:	ldrb	r3, [r0, #3]
   16acc:	cmp	r3, #45	; 0x2d
   16ad0:	bne	16b40 <__assert_fail@plt+0x5870>
   16ad4:	ldrb	r3, [r0, #4]
   16ad8:	cmp	r3, #56	; 0x38
   16adc:	bne	16b40 <__assert_fail@plt+0x5870>
   16ae0:	ldrb	r3, [r0, #5]
   16ae4:	cmp	r3, #0
   16ae8:	bne	16b40 <__assert_fail@plt+0x5870>
   16aec:	ldrb	r2, [r4]
   16af0:	ldr	r3, [pc, #152]	; 16b90 <__assert_fail@plt+0x58c0>
   16af4:	ldr	r0, [pc, #152]	; 16b94 <__assert_fail@plt+0x58c4>
   16af8:	cmp	r2, #96	; 0x60
   16afc:	movne	r0, r3
   16b00:	pop	{r4, r5, r6, pc}
   16b04:	cmp	r3, #71	; 0x47
   16b08:	bne	16b40 <__assert_fail@plt+0x5870>
   16b0c:	ldrb	r3, [r0, #1]
   16b10:	bic	r3, r3, #32
   16b14:	cmp	r3, #66	; 0x42
   16b18:	bne	16b40 <__assert_fail@plt+0x5870>
   16b1c:	ldrb	r3, [r0, #2]
   16b20:	cmp	r3, #49	; 0x31
   16b24:	bne	16b40 <__assert_fail@plt+0x5870>
   16b28:	ldrb	r3, [r0, #3]
   16b2c:	cmp	r3, #56	; 0x38
   16b30:	bne	16b40 <__assert_fail@plt+0x5870>
   16b34:	ldrb	r3, [r0, #4]
   16b38:	cmp	r3, #48	; 0x30
   16b3c:	beq	16b54 <__assert_fail@plt+0x5884>
   16b40:	ldr	r3, [pc, #80]	; 16b98 <__assert_fail@plt+0x58c8>
   16b44:	cmp	r5, #9
   16b48:	ldr	r0, [pc, #76]	; 16b9c <__assert_fail@plt+0x58cc>
   16b4c:	movne	r0, r3
   16b50:	pop	{r4, r5, r6, pc}
   16b54:	ldrb	r3, [r0, #5]
   16b58:	cmp	r3, #51	; 0x33
   16b5c:	bne	16b40 <__assert_fail@plt+0x5870>
   16b60:	ldrb	r3, [r0, #6]
   16b64:	cmp	r3, #48	; 0x30
   16b68:	bne	16b40 <__assert_fail@plt+0x5870>
   16b6c:	ldrb	r3, [r0, #7]
   16b70:	cmp	r3, #0
   16b74:	bne	16b40 <__assert_fail@plt+0x5870>
   16b78:	ldrb	r2, [r4]
   16b7c:	ldr	r3, [pc, #28]	; 16ba0 <__assert_fail@plt+0x58d0>
   16b80:	ldr	r0, [pc, #28]	; 16ba4 <__assert_fail@plt+0x58d4>
   16b84:	cmp	r2, #96	; 0x60
   16b88:	movne	r0, r3
   16b8c:	pop	{r4, r5, r6, pc}
   16b90:	andeq	fp, r1, r4, ror #8
   16b94:	andeq	fp, r1, r0, ror #8
   16b98:	andeq	fp, r1, r4, ror r4
   16b9c:	andeq	fp, r1, r0, ror r4
   16ba0:	andeq	fp, r1, ip, ror #8
   16ba4:	andeq	fp, r1, r8, ror #8
   16ba8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bac:	sub	sp, sp, #116	; 0x74
   16bb0:	mov	sl, r0
   16bb4:	str	r3, [sp, #24]
   16bb8:	mov	r3, #1
   16bbc:	mov	r8, r1
   16bc0:	str	r2, [sp, #56]	; 0x38
   16bc4:	str	r3, [sp, #36]	; 0x24
   16bc8:	bl	110cc <__ctype_get_mb_cur_max@plt>
   16bcc:	ldr	r3, [sp, #156]	; 0x9c
   16bd0:	mov	fp, r8
   16bd4:	mov	r2, #0
   16bd8:	lsr	r3, r3, #1
   16bdc:	and	r3, r3, #1
   16be0:	str	r2, [sp, #68]	; 0x44
   16be4:	str	r3, [sp, #28]
   16be8:	str	r2, [sp, #40]	; 0x28
   16bec:	str	r2, [sp, #44]	; 0x2c
   16bf0:	str	r2, [sp, #52]	; 0x34
   16bf4:	str	r2, [sp, #64]	; 0x40
   16bf8:	str	r2, [sp, #72]	; 0x48
   16bfc:	str	sl, [sp, #32]
   16c00:	str	r0, [sp, #76]	; 0x4c
   16c04:	ldr	r3, [sp, #152]	; 0x98
   16c08:	cmp	r3, #10
   16c0c:	ldrls	pc, [pc, r3, lsl #2]
   16c10:	b	17dd0 <__assert_fail@plt+0x6b00>
   16c14:	andeq	r6, r1, r0, asr #24
   16c18:	andeq	r6, r1, r8, lsr #30
   16c1c:	andeq	r6, r1, ip, asr #30
   16c20:	andeq	r6, r1, r0, ror pc
   16c24:	muleq	r1, ip, r0
   16c28:	andeq	r7, r1, r0, ror r0
   16c2c:	andeq	r7, r1, r8, asr #32
   16c30:	andeq	r6, r1, r4, lsl #31
   16c34:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   16c38:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   16c3c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   16c40:	mov	r3, #0
   16c44:	mov	r7, r3
   16c48:	str	r3, [sp, #28]
   16c4c:	ldr	r3, [sp, #44]	; 0x2c
   16c50:	mov	sl, #0
   16c54:	eor	r3, r3, #1
   16c58:	str	r3, [sp, #60]	; 0x3c
   16c5c:	ldr	r3, [sp, #24]
   16c60:	cmn	r3, #1
   16c64:	beq	171c8 <__assert_fail@plt+0x5ef8>
   16c68:	ldr	r3, [sp, #24]
   16c6c:	subs	r5, r3, sl
   16c70:	movne	r5, #1
   16c74:	cmp	r5, #0
   16c78:	beq	171e0 <__assert_fail@plt+0x5f10>
   16c7c:	ldr	r3, [sp, #152]	; 0x98
   16c80:	ldr	r8, [sp, #44]	; 0x2c
   16c84:	cmp	r3, #2
   16c88:	moveq	r8, #0
   16c8c:	andne	r8, r8, #1
   16c90:	ldr	r3, [sp, #52]	; 0x34
   16c94:	adds	r9, r3, #0
   16c98:	movne	r9, #1
   16c9c:	ands	r6, r9, r8
   16ca0:	beq	17648 <__assert_fail@plt+0x6378>
   16ca4:	ldr	r2, [sp, #52]	; 0x34
   16ca8:	ldr	r1, [sp, #24]
   16cac:	cmp	r2, #1
   16cb0:	mov	r3, r2
   16cb4:	movls	r3, #0
   16cb8:	movhi	r3, #1
   16cbc:	cmn	r1, #1
   16cc0:	movne	r3, #0
   16cc4:	cmp	r3, #0
   16cc8:	add	r4, sl, r2
   16ccc:	beq	16cdc <__assert_fail@plt+0x5a0c>
   16cd0:	ldr	r0, [sp, #56]	; 0x38
   16cd4:	bl	11168 <strlen@plt>
   16cd8:	str	r0, [sp, #24]
   16cdc:	ldr	r3, [sp, #24]
   16ce0:	cmp	r3, r4
   16ce4:	ldr	r3, [sp, #56]	; 0x38
   16ce8:	add	r3, r3, sl
   16cec:	str	r3, [sp, #48]	; 0x30
   16cf0:	bcc	17654 <__assert_fail@plt+0x6384>
   16cf4:	mov	r0, r3
   16cf8:	ldr	r2, [sp, #52]	; 0x34
   16cfc:	ldr	r1, [sp, #64]	; 0x40
   16d00:	bl	11048 <memcmp@plt>
   16d04:	cmp	r0, #0
   16d08:	bne	17654 <__assert_fail@plt+0x6384>
   16d0c:	ldr	r3, [sp, #28]
   16d10:	cmp	r3, #0
   16d14:	bne	17ed0 <__assert_fail@plt+0x6c00>
   16d18:	ldr	r3, [sp, #48]	; 0x30
   16d1c:	ldrb	r4, [r3]
   16d20:	cmp	r4, #126	; 0x7e
   16d24:	ldrls	pc, [pc, r4, lsl #2]
   16d28:	b	175e8 <__assert_fail@plt+0x6318>
   16d2c:	andeq	r7, r1, ip, lsl #8
   16d30:	andeq	r7, r1, r8, ror #11
   16d34:	andeq	r7, r1, r8, ror #11
   16d38:	andeq	r7, r1, r8, ror #11
   16d3c:	andeq	r7, r1, r8, ror #11
   16d40:	andeq	r7, r1, r8, ror #11
   16d44:	andeq	r7, r1, r8, ror #11
   16d48:	strdeq	r7, [r1], -r0
   16d4c:	ldrdeq	r7, [r1], -r4
   16d50:	ldrdeq	r7, [r1], -r0
   16d54:	andeq	r7, r1, r4, lsr r3
   16d58:	andeq	r7, r1, r8, lsl r3
   16d5c:	andeq	r7, r1, ip, lsr #11
   16d60:	andeq	r7, r1, r8, lsl #11
   16d64:	andeq	r7, r1, r8, ror #11
   16d68:	andeq	r7, r1, r8, ror #11
   16d6c:	andeq	r7, r1, r8, ror #11
   16d70:	andeq	r7, r1, r8, ror #11
   16d74:	andeq	r7, r1, r8, ror #11
   16d78:	andeq	r7, r1, r8, ror #11
   16d7c:	andeq	r7, r1, r8, ror #11
   16d80:	andeq	r7, r1, r8, ror #11
   16d84:	andeq	r7, r1, r8, ror #11
   16d88:	andeq	r7, r1, r8, ror #11
   16d8c:	andeq	r7, r1, r8, ror #11
   16d90:	andeq	r7, r1, r8, ror #11
   16d94:	andeq	r7, r1, r8, ror #11
   16d98:	andeq	r7, r1, r8, ror #11
   16d9c:	andeq	r7, r1, r8, ror #11
   16da0:	andeq	r7, r1, r8, ror #11
   16da4:	andeq	r7, r1, r8, ror #11
   16da8:	andeq	r7, r1, r8, ror #11
   16dac:	andeq	r7, r1, r8, asr #11
   16db0:	strdeq	r7, [r1], -ip
   16db4:	strdeq	r7, [r1], -ip
   16db8:	andeq	r7, r1, ip, lsl #2
   16dbc:	strdeq	r7, [r1], -ip
   16dc0:	muleq	r1, r4, r5
   16dc4:	strdeq	r7, [r1], -ip
   16dc8:	andeq	r7, r1, r8, ror #10
   16dcc:	strdeq	r7, [r1], -ip
   16dd0:	strdeq	r7, [r1], -ip
   16dd4:	strdeq	r7, [r1], -ip
   16dd8:	muleq	r1, r4, r5
   16ddc:	muleq	r1, r4, r5
   16de0:	muleq	r1, r4, r5
   16de4:	muleq	r1, r4, r5
   16de8:	muleq	r1, r4, r5
   16dec:	muleq	r1, r4, r5
   16df0:	muleq	r1, r4, r5
   16df4:	muleq	r1, r4, r5
   16df8:	muleq	r1, r4, r5
   16dfc:	muleq	r1, r4, r5
   16e00:	muleq	r1, r4, r5
   16e04:	muleq	r1, r4, r5
   16e08:	muleq	r1, r4, r5
   16e0c:	muleq	r1, r4, r5
   16e10:	muleq	r1, r4, r5
   16e14:	muleq	r1, r4, r5
   16e18:	strdeq	r7, [r1], -ip
   16e1c:	strdeq	r7, [r1], -ip
   16e20:	strdeq	r7, [r1], -ip
   16e24:	strdeq	r7, [r1], -ip
   16e28:	andeq	r7, r1, r8, lsr r5
   16e2c:	andeq	r7, r1, r8, ror #11
   16e30:	muleq	r1, r4, r5
   16e34:	muleq	r1, r4, r5
   16e38:	muleq	r1, r4, r5
   16e3c:	muleq	r1, r4, r5
   16e40:	muleq	r1, r4, r5
   16e44:	muleq	r1, r4, r5
   16e48:	muleq	r1, r4, r5
   16e4c:	muleq	r1, r4, r5
   16e50:	muleq	r1, r4, r5
   16e54:	muleq	r1, r4, r5
   16e58:	muleq	r1, r4, r5
   16e5c:	muleq	r1, r4, r5
   16e60:	muleq	r1, r4, r5
   16e64:	muleq	r1, r4, r5
   16e68:	muleq	r1, r4, r5
   16e6c:	muleq	r1, r4, r5
   16e70:	muleq	r1, r4, r5
   16e74:	muleq	r1, r4, r5
   16e78:	muleq	r1, r4, r5
   16e7c:	muleq	r1, r4, r5
   16e80:	muleq	r1, r4, r5
   16e84:	muleq	r1, r4, r5
   16e88:	muleq	r1, r4, r5
   16e8c:	muleq	r1, r4, r5
   16e90:	muleq	r1, r4, r5
   16e94:	muleq	r1, r4, r5
   16e98:	strdeq	r7, [r1], -ip
   16e9c:	andeq	r7, r1, r8, asr r2
   16ea0:	muleq	r1, r4, r5
   16ea4:	strdeq	r7, [r1], -ip
   16ea8:	muleq	r1, r4, r5
   16eac:	strdeq	r7, [r1], -ip
   16eb0:	muleq	r1, r4, r5
   16eb4:	muleq	r1, r4, r5
   16eb8:	muleq	r1, r4, r5
   16ebc:	muleq	r1, r4, r5
   16ec0:	muleq	r1, r4, r5
   16ec4:	muleq	r1, r4, r5
   16ec8:	muleq	r1, r4, r5
   16ecc:	muleq	r1, r4, r5
   16ed0:	muleq	r1, r4, r5
   16ed4:	muleq	r1, r4, r5
   16ed8:	muleq	r1, r4, r5
   16edc:	muleq	r1, r4, r5
   16ee0:	muleq	r1, r4, r5
   16ee4:	muleq	r1, r4, r5
   16ee8:	muleq	r1, r4, r5
   16eec:	muleq	r1, r4, r5
   16ef0:	muleq	r1, r4, r5
   16ef4:	muleq	r1, r4, r5
   16ef8:	muleq	r1, r4, r5
   16efc:	muleq	r1, r4, r5
   16f00:	muleq	r1, r4, r5
   16f04:	muleq	r1, r4, r5
   16f08:	muleq	r1, r4, r5
   16f0c:	muleq	r1, r4, r5
   16f10:	muleq	r1, r4, r5
   16f14:	muleq	r1, r4, r5
   16f18:	andeq	r7, r1, ip, ror #1
   16f1c:	strdeq	r7, [r1], -ip
   16f20:	andeq	r7, r1, ip, ror #1
   16f24:	andeq	r7, r1, ip, lsl #2
   16f28:	mov	r3, #1
   16f2c:	str	r3, [sp, #28]
   16f30:	str	r3, [sp, #52]	; 0x34
   16f34:	ldr	r3, [pc, #4000]	; 17edc <__assert_fail@plt+0x6c0c>
   16f38:	mov	r7, #0
   16f3c:	str	r3, [sp, #64]	; 0x40
   16f40:	mov	r3, #2
   16f44:	str	r3, [sp, #152]	; 0x98
   16f48:	b	16c4c <__assert_fail@plt+0x597c>
   16f4c:	ldr	r3, [sp, #28]
   16f50:	cmp	r3, #0
   16f54:	beq	170b0 <__assert_fail@plt+0x5de0>
   16f58:	mov	r3, #1
   16f5c:	str	r3, [sp, #52]	; 0x34
   16f60:	ldr	r3, [pc, #3956]	; 17edc <__assert_fail@plt+0x6c0c>
   16f64:	mov	r7, #0
   16f68:	str	r3, [sp, #64]	; 0x40
   16f6c:	b	16c4c <__assert_fail@plt+0x597c>
   16f70:	mov	r3, #1
   16f74:	str	r3, [sp, #44]	; 0x2c
   16f78:	str	r3, [sp, #52]	; 0x34
   16f7c:	str	r3, [sp, #28]
   16f80:	b	16f34 <__assert_fail@plt+0x5c64>
   16f84:	mov	r3, #0
   16f88:	str	r3, [sp, #28]
   16f8c:	mov	r3, #1
   16f90:	str	r3, [sp, #44]	; 0x2c
   16f94:	mov	r7, #0
   16f98:	b	16c4c <__assert_fail@plt+0x597c>
   16f9c:	ldr	r3, [sp, #152]	; 0x98
   16fa0:	cmp	r3, #10
   16fa4:	beq	16fe8 <__assert_fail@plt+0x5d18>
   16fa8:	mov	r2, #5
   16fac:	ldr	r1, [pc, #3884]	; 17ee0 <__assert_fail@plt+0x6c10>
   16fb0:	mov	r0, #0
   16fb4:	bl	11060 <dcgettext@plt>
   16fb8:	ldr	r2, [pc, #3872]	; 17ee0 <__assert_fail@plt+0x6c10>
   16fbc:	cmp	r0, r2
   16fc0:	str	r0, [sp, #164]	; 0xa4
   16fc4:	beq	17fcc <__assert_fail@plt+0x6cfc>
   16fc8:	mov	r2, #5
   16fcc:	ldr	r1, [pc, #3848]	; 17edc <__assert_fail@plt+0x6c0c>
   16fd0:	mov	r0, #0
   16fd4:	bl	11060 <dcgettext@plt>
   16fd8:	ldr	r2, [pc, #3836]	; 17edc <__assert_fail@plt+0x6c0c>
   16fdc:	cmp	r0, r2
   16fe0:	str	r0, [sp, #168]	; 0xa8
   16fe4:	beq	17fbc <__assert_fail@plt+0x6cec>
   16fe8:	ldr	r7, [sp, #28]
   16fec:	cmp	r7, #0
   16ff0:	movne	r7, #0
   16ff4:	bne	17028 <__assert_fail@plt+0x5d58>
   16ff8:	ldr	r3, [sp, #164]	; 0xa4
   16ffc:	ldrb	r3, [r3]
   17000:	cmp	r3, #0
   17004:	beq	17fdc <__assert_fail@plt+0x6d0c>
   17008:	ldr	r2, [sp, #164]	; 0xa4
   1700c:	ldr	r1, [sp, #32]
   17010:	cmp	fp, r7
   17014:	strbhi	r3, [r1, r7]
   17018:	ldrb	r3, [r2, #1]!
   1701c:	add	r7, r7, #1
   17020:	cmp	r3, #0
   17024:	bne	17010 <__assert_fail@plt+0x5d40>
   17028:	ldr	r0, [sp, #168]	; 0xa8
   1702c:	bl	11168 <strlen@plt>
   17030:	ldr	r3, [sp, #168]	; 0xa8
   17034:	str	r3, [sp, #64]	; 0x40
   17038:	mov	r3, #1
   1703c:	str	r3, [sp, #44]	; 0x2c
   17040:	str	r0, [sp, #52]	; 0x34
   17044:	b	16c4c <__assert_fail@plt+0x597c>
   17048:	mov	r3, #1
   1704c:	str	r3, [sp, #44]	; 0x2c
   17050:	str	r3, [sp, #52]	; 0x34
   17054:	str	r3, [sp, #28]
   17058:	ldr	r3, [pc, #3716]	; 17ee4 <__assert_fail@plt+0x6c14>
   1705c:	mov	r7, #0
   17060:	str	r3, [sp, #64]	; 0x40
   17064:	mov	r3, #5
   17068:	str	r3, [sp, #152]	; 0x98
   1706c:	b	16c4c <__assert_fail@plt+0x597c>
   17070:	ldr	r3, [sp, #28]
   17074:	cmp	r3, #0
   17078:	beq	17d78 <__assert_fail@plt+0x6aa8>
   1707c:	ldr	r3, [sp, #28]
   17080:	mov	r7, #0
   17084:	str	r3, [sp, #44]	; 0x2c
   17088:	mov	r3, #1
   1708c:	str	r3, [sp, #52]	; 0x34
   17090:	ldr	r3, [pc, #3660]	; 17ee4 <__assert_fail@plt+0x6c14>
   17094:	str	r3, [sp, #64]	; 0x40
   17098:	b	16c4c <__assert_fail@plt+0x597c>
   1709c:	ldr	r3, [sp, #28]
   170a0:	cmp	r3, #0
   170a4:	mov	r3, #1
   170a8:	streq	r3, [sp, #44]	; 0x2c
   170ac:	bne	16f30 <__assert_fail@plt+0x5c60>
   170b0:	cmp	fp, #0
   170b4:	beq	17da8 <__assert_fail@plt+0x6ad8>
   170b8:	ldr	r3, [sp, #32]
   170bc:	mov	r2, #39	; 0x27
   170c0:	mov	r7, #1
   170c4:	strb	r2, [r3]
   170c8:	mov	r3, #0
   170cc:	str	r3, [sp, #28]
   170d0:	mov	r3, #1
   170d4:	str	r3, [sp, #52]	; 0x34
   170d8:	ldr	r3, [pc, #3580]	; 17edc <__assert_fail@plt+0x6c0c>
   170dc:	str	r3, [sp, #64]	; 0x40
   170e0:	mov	r3, #2
   170e4:	str	r3, [sp, #152]	; 0x98
   170e8:	b	16c4c <__assert_fail@plt+0x597c>
   170ec:	ldr	r3, [sp, #24]
   170f0:	cmn	r3, #1
   170f4:	beq	17d0c <__assert_fail@plt+0x6a3c>
   170f8:	ldr	r3, [sp, #24]
   170fc:	subs	r3, r3, #1
   17100:	movne	r3, #1
   17104:	cmp	r3, #0
   17108:	bne	17114 <__assert_fail@plt+0x5e44>
   1710c:	cmp	sl, #0
   17110:	beq	17500 <__assert_fail@plt+0x6230>
   17114:	ldr	r3, [sp, #152]	; 0x98
   17118:	mov	r5, #0
   1711c:	sub	r2, r3, #2
   17120:	mov	r8, r5
   17124:	clz	r2, r2
   17128:	lsr	r2, r2, #5
   1712c:	ldr	r3, [sp, #60]	; 0x3c
   17130:	ldr	r1, [sp, #28]
   17134:	orr	r3, r2, r3
   17138:	eor	r3, r3, #1
   1713c:	orr	r3, r1, r3
   17140:	tst	r3, #255	; 0xff
   17144:	bne	17870 <__assert_fail@plt+0x65a0>
   17148:	cmp	r6, #0
   1714c:	bne	1729c <__assert_fail@plt+0x5fcc>
   17150:	ldr	r3, [sp, #40]	; 0x28
   17154:	eor	r8, r8, #1
   17158:	and	r8, r8, r3
   1715c:	add	sl, sl, #1
   17160:	uxtb	r6, r8
   17164:	cmp	r6, #0
   17168:	beq	1719c <__assert_fail@plt+0x5ecc>
   1716c:	cmp	fp, r7
   17170:	movhi	r2, #39	; 0x27
   17174:	ldrhi	r3, [sp, #32]
   17178:	strbhi	r2, [r3, r7]
   1717c:	add	r3, r7, #1
   17180:	cmp	fp, r3
   17184:	movhi	r1, #39	; 0x27
   17188:	ldrhi	r2, [sp, #32]
   1718c:	add	r7, r7, #2
   17190:	strbhi	r1, [r2, r3]
   17194:	mov	r3, #0
   17198:	str	r3, [sp, #40]	; 0x28
   1719c:	cmp	r7, fp
   171a0:	ldrcc	r3, [sp, #32]
   171a4:	strbcc	r4, [r3, r7]
   171a8:	ldr	r3, [sp, #36]	; 0x24
   171ac:	cmp	r5, #0
   171b0:	moveq	r3, #0
   171b4:	str	r3, [sp, #36]	; 0x24
   171b8:	ldr	r3, [sp, #24]
   171bc:	add	r7, r7, #1
   171c0:	cmn	r3, #1
   171c4:	bne	16c68 <__assert_fail@plt+0x5998>
   171c8:	ldr	r3, [sp, #56]	; 0x38
   171cc:	ldrb	r5, [r3, sl]
   171d0:	adds	r5, r5, #0
   171d4:	movne	r5, #1
   171d8:	cmp	r5, #0
   171dc:	bne	16c7c <__assert_fail@plt+0x59ac>
   171e0:	ldr	r3, [sp, #152]	; 0x98
   171e4:	ldr	r1, [sp, #28]
   171e8:	sub	r3, r3, #2
   171ec:	clz	r3, r3
   171f0:	lsr	r3, r3, #5
   171f4:	and	r9, r1, r3
   171f8:	cmp	r7, #0
   171fc:	movne	r2, #0
   17200:	andeq	r2, r9, #1
   17204:	cmp	r2, #0
   17208:	bne	17be4 <__assert_fail@plt+0x6914>
   1720c:	eor	r2, r1, #1
   17210:	ands	r3, r3, r2
   17214:	beq	180a0 <__assert_fail@plt+0x6dd0>
   17218:	ldr	r2, [sp, #68]	; 0x44
   1721c:	cmp	r2, #0
   17220:	beq	1808c <__assert_fail@plt+0x6dbc>
   17224:	ldr	r3, [sp, #36]	; 0x24
   17228:	cmp	r3, #0
   1722c:	bne	18044 <__assert_fail@plt+0x6d74>
   17230:	ldr	r2, [sp, #72]	; 0x48
   17234:	clz	r3, fp
   17238:	cmp	r2, #0
   1723c:	lsr	r3, r3, #5
   17240:	moveq	r3, #0
   17244:	cmp	r3, #0
   17248:	beq	17fe4 <__assert_fail@plt+0x6d14>
   1724c:	str	r3, [sp, #68]	; 0x44
   17250:	ldr	fp, [sp, #72]	; 0x48
   17254:	b	16c04 <__assert_fail@plt+0x5934>
   17258:	ldr	r3, [sp, #152]	; 0x98
   1725c:	cmp	r3, #2
   17260:	beq	178b4 <__assert_fail@plt+0x65e4>
   17264:	ldr	r3, [sp, #44]	; 0x2c
   17268:	ldr	r2, [sp, #28]
   1726c:	and	r2, r3, r2
   17270:	ands	r2, r9, r2
   17274:	bne	178c0 <__assert_fail@plt+0x65f0>
   17278:	mov	r4, #92	; 0x5c
   1727c:	mov	r3, r4
   17280:	ldr	r1, [sp, #44]	; 0x2c
   17284:	cmp	r1, #0
   17288:	moveq	r5, #0
   1728c:	moveq	r8, r1
   17290:	beq	1712c <__assert_fail@plt+0x5e5c>
   17294:	mov	r4, r3
   17298:	mov	r5, #0
   1729c:	ldr	r3, [sp, #28]
   172a0:	cmp	r3, #0
   172a4:	bne	178a8 <__assert_fail@plt+0x65d8>
   172a8:	ldr	r3, [sp, #40]	; 0x28
   172ac:	eor	r9, r3, #1
   172b0:	and	r9, r9, r2
   172b4:	ands	r9, r9, #255	; 0xff
   172b8:	beq	172fc <__assert_fail@plt+0x602c>
   172bc:	cmp	fp, r7
   172c0:	movhi	r2, #39	; 0x27
   172c4:	ldrhi	r3, [sp, #32]
   172c8:	str	r9, [sp, #40]	; 0x28
   172cc:	strbhi	r2, [r3, r7]
   172d0:	add	r3, r7, #1
   172d4:	cmp	fp, r3
   172d8:	movhi	r1, #36	; 0x24
   172dc:	ldrhi	r2, [sp, #32]
   172e0:	strbhi	r1, [r2, r3]
   172e4:	add	r3, r7, #2
   172e8:	cmp	fp, r3
   172ec:	add	r7, r7, #3
   172f0:	ldrhi	r2, [sp, #32]
   172f4:	movhi	r1, #39	; 0x27
   172f8:	strbhi	r1, [r2, r3]
   172fc:	cmp	fp, r7
   17300:	movhi	r2, #92	; 0x5c
   17304:	ldrhi	r3, [sp, #32]
   17308:	add	sl, sl, #1
   1730c:	strbhi	r2, [r3, r7]
   17310:	add	r7, r7, #1
   17314:	b	1719c <__assert_fail@plt+0x5ecc>
   17318:	ldr	r3, [sp, #152]	; 0x98
   1731c:	mov	r4, #11
   17320:	sub	r2, r3, #2
   17324:	mov	r3, #118	; 0x76
   17328:	clz	r2, r2
   1732c:	lsr	r2, r2, #5
   17330:	b	17280 <__assert_fail@plt+0x5fb0>
   17334:	mov	r4, #10
   17338:	mov	r3, #110	; 0x6e
   1733c:	ldr	r2, [sp, #152]	; 0x98
   17340:	ldr	r1, [sp, #28]
   17344:	sub	r2, r2, #2
   17348:	clz	r2, r2
   1734c:	lsr	r2, r2, #5
   17350:	ands	r1, r1, r2
   17354:	beq	17280 <__assert_fail@plt+0x5fb0>
   17358:	ldr	sl, [sp, #32]
   1735c:	mov	r8, fp
   17360:	mov	r2, r1
   17364:	mov	r3, #2
   17368:	str	r3, [sp, #152]	; 0x98
   1736c:	ldr	r9, [sp, #44]	; 0x2c
   17370:	ldr	r3, [sp, #152]	; 0x98
   17374:	and	r9, r9, r2
   17378:	tst	r9, #255	; 0xff
   1737c:	movne	r3, #4
   17380:	str	r3, [sp, #152]	; 0x98
   17384:	ldr	r3, [sp, #156]	; 0x9c
   17388:	mov	ip, #0
   1738c:	bic	r3, r3, #2
   17390:	str	r3, [sp, #4]
   17394:	ldr	r3, [sp, #168]	; 0xa8
   17398:	ldr	r2, [sp, #56]	; 0x38
   1739c:	str	r3, [sp, #16]
   173a0:	ldr	r3, [sp, #164]	; 0xa4
   173a4:	mov	r1, r8
   173a8:	str	r3, [sp, #12]
   173ac:	ldr	r3, [sp, #152]	; 0x98
   173b0:	mov	r0, sl
   173b4:	str	r3, [sp]
   173b8:	str	ip, [sp, #8]
   173bc:	ldr	r3, [sp, #24]
   173c0:	bl	16ba8 <__assert_fail@plt+0x58d8>
   173c4:	mov	fp, r0
   173c8:	mov	r0, fp
   173cc:	add	sp, sp, #116	; 0x74
   173d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173d4:	ldr	r3, [sp, #152]	; 0x98
   173d8:	mov	r4, #8
   173dc:	sub	r2, r3, #2
   173e0:	mov	r3, #98	; 0x62
   173e4:	clz	r2, r2
   173e8:	lsr	r2, r2, #5
   173ec:	b	17280 <__assert_fail@plt+0x5fb0>
   173f0:	ldr	r3, [sp, #152]	; 0x98
   173f4:	mov	r4, #7
   173f8:	sub	r2, r3, #2
   173fc:	mov	r3, #97	; 0x61
   17400:	clz	r2, r2
   17404:	lsr	r2, r2, #5
   17408:	b	17280 <__assert_fail@plt+0x5fb0>
   1740c:	ldr	r3, [sp, #44]	; 0x2c
   17410:	cmp	r3, #0
   17414:	beq	17bf8 <__assert_fail@plt+0x6928>
   17418:	ldr	r3, [sp, #28]
   1741c:	cmp	r3, #0
   17420:	bne	17ed0 <__assert_fail@plt+0x6c00>
   17424:	ldr	r3, [sp, #152]	; 0x98
   17428:	sub	r2, r3, #2
   1742c:	ldr	r3, [sp, #40]	; 0x28
   17430:	clz	r2, r2
   17434:	eor	r3, r3, #1
   17438:	lsr	r2, r2, #5
   1743c:	ands	r3, r2, r3
   17440:	moveq	r1, r7
   17444:	beq	17488 <__assert_fail@plt+0x61b8>
   17448:	cmp	fp, r7
   1744c:	movhi	r0, #39	; 0x27
   17450:	ldrhi	r1, [sp, #32]
   17454:	str	r3, [sp, #40]	; 0x28
   17458:	strbhi	r0, [r1, r7]
   1745c:	add	r1, r7, #1
   17460:	cmp	fp, r1
   17464:	movhi	ip, #36	; 0x24
   17468:	ldrhi	r0, [sp, #32]
   1746c:	strbhi	ip, [r0, r1]
   17470:	add	r1, r7, #2
   17474:	cmp	fp, r1
   17478:	movhi	ip, #39	; 0x27
   1747c:	ldrhi	r0, [sp, #32]
   17480:	strbhi	ip, [r0, r1]
   17484:	add	r1, r7, #3
   17488:	cmp	fp, r1
   1748c:	movhi	r0, #92	; 0x5c
   17490:	ldrhi	r3, [sp, #32]
   17494:	add	r7, r1, #1
   17498:	strbhi	r0, [r3, r1]
   1749c:	cmp	r8, #0
   174a0:	beq	17de4 <__assert_fail@plt+0x6b14>
   174a4:	ldr	r0, [sp, #24]
   174a8:	add	r3, sl, #1
   174ac:	cmp	r3, r0
   174b0:	bcs	17d20 <__assert_fail@plt+0x6a50>
   174b4:	ldr	r0, [sp, #56]	; 0x38
   174b8:	ldrb	r3, [r0, r3]
   174bc:	sub	r3, r3, #48	; 0x30
   174c0:	cmp	r3, #9
   174c4:	bhi	17d20 <__assert_fail@plt+0x6a50>
   174c8:	cmp	fp, r7
   174cc:	movhi	r3, #48	; 0x30
   174d0:	ldrhi	r0, [sp, #32]
   174d4:	ldr	r5, [sp, #28]
   174d8:	mov	r4, #48	; 0x30
   174dc:	strbhi	r3, [r0, r7]
   174e0:	add	r3, r1, #2
   174e4:	cmp	fp, r3
   174e8:	movhi	r0, #48	; 0x30
   174ec:	ldrhi	ip, [sp, #32]
   174f0:	add	r7, r1, #3
   174f4:	strbhi	r0, [ip, r3]
   174f8:	b	1712c <__assert_fail@plt+0x5e5c>
   174fc:	mov	r5, #0
   17500:	ldr	r3, [sp, #152]	; 0x98
   17504:	sub	r2, r3, #2
   17508:	ldr	r3, [sp, #28]
   1750c:	clz	r2, r2
   17510:	lsr	r2, r2, #5
   17514:	ands	r8, r3, r2
   17518:	beq	1712c <__assert_fail@plt+0x5e5c>
   1751c:	mov	r3, r8
   17520:	mov	r2, r3
   17524:	mov	r3, #2
   17528:	ldr	sl, [sp, #32]
   1752c:	mov	r8, fp
   17530:	str	r3, [sp, #152]	; 0x98
   17534:	b	1736c <__assert_fail@plt+0x609c>
   17538:	ldr	r3, [sp, #152]	; 0x98
   1753c:	cmp	r3, #2
   17540:	beq	17c64 <__assert_fail@plt+0x6994>
   17544:	cmp	r3, #5
   17548:	beq	17c24 <__assert_fail@plt+0x6954>
   1754c:	mov	r5, #0
   17550:	sub	r2, r3, #2
   17554:	mov	r8, r5
   17558:	clz	r2, r2
   1755c:	mov	r4, #63	; 0x3f
   17560:	lsr	r2, r2, #5
   17564:	b	1712c <__assert_fail@plt+0x5e5c>
   17568:	ldr	r3, [sp, #152]	; 0x98
   1756c:	cmp	r3, #2
   17570:	beq	17c84 <__assert_fail@plt+0x69b4>
   17574:	mov	r2, #0
   17578:	str	r5, [sp, #68]	; 0x44
   1757c:	mov	r8, r2
   17580:	mov	r4, #39	; 0x27
   17584:	b	1712c <__assert_fail@plt+0x5e5c>
   17588:	mov	r4, #13
   1758c:	mov	r3, #114	; 0x72
   17590:	b	1733c <__assert_fail@plt+0x606c>
   17594:	ldr	r3, [sp, #152]	; 0x98
   17598:	mov	r8, #0
   1759c:	sub	r2, r3, #2
   175a0:	clz	r2, r2
   175a4:	lsr	r2, r2, #5
   175a8:	b	1712c <__assert_fail@plt+0x5e5c>
   175ac:	ldr	r3, [sp, #152]	; 0x98
   175b0:	mov	r4, #12
   175b4:	sub	r2, r3, #2
   175b8:	mov	r3, #102	; 0x66
   175bc:	clz	r2, r2
   175c0:	lsr	r2, r2, #5
   175c4:	b	17280 <__assert_fail@plt+0x5fb0>
   175c8:	mov	r5, r6
   175cc:	b	17500 <__assert_fail@plt+0x6230>
   175d0:	ldr	r3, [sp, #152]	; 0x98
   175d4:	sub	r2, r3, #2
   175d8:	mov	r3, #116	; 0x74
   175dc:	clz	r2, r2
   175e0:	lsr	r2, r2, #5
   175e4:	b	17280 <__assert_fail@plt+0x5fb0>
   175e8:	ldr	r8, [sp, #76]	; 0x4c
   175ec:	cmp	r8, #1
   175f0:	bne	17aa0 <__assert_fail@plt+0x67d0>
   175f4:	bl	11150 <__ctype_b_loc@plt>
   175f8:	sxth	r3, r4
   175fc:	mov	ip, r8
   17600:	lsl	r3, r3, #1
   17604:	ldr	r2, [r0]
   17608:	ldrh	r3, [r2, r3]
   1760c:	and	r3, r3, #16384	; 0x4000
   17610:	cmp	r3, #0
   17614:	movne	r5, #1
   17618:	moveq	r5, #0
   1761c:	moveq	r3, #1
   17620:	movne	r3, #0
   17624:	ldr	r2, [sp, #44]	; 0x2c
   17628:	and	r3, r3, r2
   1762c:	ands	r8, r3, #255	; 0xff
   17630:	bne	17934 <__assert_fail@plt+0x6664>
   17634:	ldr	r3, [sp, #152]	; 0x98
   17638:	sub	r2, r3, #2
   1763c:	clz	r2, r2
   17640:	lsr	r2, r2, #5
   17644:	b	1712c <__assert_fail@plt+0x5e5c>
   17648:	ldr	r3, [sp, #56]	; 0x38
   1764c:	add	r3, r3, sl
   17650:	str	r3, [sp, #48]	; 0x30
   17654:	ldr	r3, [sp, #48]	; 0x30
   17658:	mov	r6, #0
   1765c:	ldrb	r4, [r3]
   17660:	cmp	r4, #126	; 0x7e
   17664:	ldrls	pc, [pc, r4, lsl #2]
   17668:	b	175e8 <__assert_fail@plt+0x6318>
   1766c:	andeq	r7, r1, ip, lsl #8
   17670:	andeq	r7, r1, r8, ror #11
   17674:	andeq	r7, r1, r8, ror #11
   17678:	andeq	r7, r1, r8, ror #11
   1767c:	andeq	r7, r1, r8, ror #11
   17680:	andeq	r7, r1, r8, ror #11
   17684:	andeq	r7, r1, r8, ror #11
   17688:	strdeq	r7, [r1], -r0
   1768c:	ldrdeq	r7, [r1], -r4
   17690:	andeq	r7, r1, r8, ror #16
   17694:	andeq	r7, r1, r4, lsr r3
   17698:	andeq	r7, r1, r8, lsl r3
   1769c:	andeq	r7, r1, ip, lsr #11
   176a0:	andeq	r7, r1, r8, lsl #11
   176a4:	andeq	r7, r1, r8, ror #11
   176a8:	andeq	r7, r1, r8, ror #11
   176ac:	andeq	r7, r1, r8, ror #11
   176b0:	andeq	r7, r1, r8, ror #11
   176b4:	andeq	r7, r1, r8, ror #11
   176b8:	andeq	r7, r1, r8, ror #11
   176bc:	andeq	r7, r1, r8, ror #11
   176c0:	andeq	r7, r1, r8, ror #11
   176c4:	andeq	r7, r1, r8, ror #11
   176c8:	andeq	r7, r1, r8, ror #11
   176cc:	andeq	r7, r1, r8, ror #11
   176d0:	andeq	r7, r1, r8, ror #11
   176d4:	andeq	r7, r1, r8, ror #11
   176d8:	andeq	r7, r1, r8, ror #11
   176dc:	andeq	r7, r1, r8, ror #11
   176e0:	andeq	r7, r1, r8, ror #11
   176e4:	andeq	r7, r1, r8, ror #11
   176e8:	andeq	r7, r1, r8, ror #11
   176ec:	andeq	r7, r1, r0, lsl #10
   176f0:	strdeq	r7, [r1], -ip
   176f4:	strdeq	r7, [r1], -ip
   176f8:	andeq	r7, r1, ip, lsl #2
   176fc:	strdeq	r7, [r1], -ip
   17700:	muleq	r1, r4, r5
   17704:	strdeq	r7, [r1], -ip
   17708:	andeq	r7, r1, r8, ror #10
   1770c:	strdeq	r7, [r1], -ip
   17710:	strdeq	r7, [r1], -ip
   17714:	strdeq	r7, [r1], -ip
   17718:	muleq	r1, r4, r5
   1771c:	muleq	r1, r4, r5
   17720:	muleq	r1, r4, r5
   17724:	muleq	r1, r4, r5
   17728:	muleq	r1, r4, r5
   1772c:	muleq	r1, r4, r5
   17730:	muleq	r1, r4, r5
   17734:	muleq	r1, r4, r5
   17738:	muleq	r1, r4, r5
   1773c:	muleq	r1, r4, r5
   17740:	muleq	r1, r4, r5
   17744:	muleq	r1, r4, r5
   17748:	muleq	r1, r4, r5
   1774c:	muleq	r1, r4, r5
   17750:	muleq	r1, r4, r5
   17754:	muleq	r1, r4, r5
   17758:	strdeq	r7, [r1], -ip
   1775c:	strdeq	r7, [r1], -ip
   17760:	strdeq	r7, [r1], -ip
   17764:	strdeq	r7, [r1], -ip
   17768:	andeq	r7, r1, r8, lsr r5
   1776c:	andeq	r7, r1, r8, ror #11
   17770:	muleq	r1, r4, r5
   17774:	muleq	r1, r4, r5
   17778:	muleq	r1, r4, r5
   1777c:	muleq	r1, r4, r5
   17780:	muleq	r1, r4, r5
   17784:	muleq	r1, r4, r5
   17788:	muleq	r1, r4, r5
   1778c:	muleq	r1, r4, r5
   17790:	muleq	r1, r4, r5
   17794:	muleq	r1, r4, r5
   17798:	muleq	r1, r4, r5
   1779c:	muleq	r1, r4, r5
   177a0:	muleq	r1, r4, r5
   177a4:	muleq	r1, r4, r5
   177a8:	muleq	r1, r4, r5
   177ac:	muleq	r1, r4, r5
   177b0:	muleq	r1, r4, r5
   177b4:	muleq	r1, r4, r5
   177b8:	muleq	r1, r4, r5
   177bc:	muleq	r1, r4, r5
   177c0:	muleq	r1, r4, r5
   177c4:	muleq	r1, r4, r5
   177c8:	muleq	r1, r4, r5
   177cc:	muleq	r1, r4, r5
   177d0:	muleq	r1, r4, r5
   177d4:	muleq	r1, r4, r5
   177d8:	strdeq	r7, [r1], -ip
   177dc:	andeq	r7, r1, r8, asr r2
   177e0:	muleq	r1, r4, r5
   177e4:	strdeq	r7, [r1], -ip
   177e8:	muleq	r1, r4, r5
   177ec:	strdeq	r7, [r1], -ip
   177f0:	muleq	r1, r4, r5
   177f4:	muleq	r1, r4, r5
   177f8:	muleq	r1, r4, r5
   177fc:	muleq	r1, r4, r5
   17800:	muleq	r1, r4, r5
   17804:	muleq	r1, r4, r5
   17808:	muleq	r1, r4, r5
   1780c:	muleq	r1, r4, r5
   17810:	muleq	r1, r4, r5
   17814:	muleq	r1, r4, r5
   17818:	muleq	r1, r4, r5
   1781c:	muleq	r1, r4, r5
   17820:	muleq	r1, r4, r5
   17824:	muleq	r1, r4, r5
   17828:	muleq	r1, r4, r5
   1782c:	muleq	r1, r4, r5
   17830:	muleq	r1, r4, r5
   17834:	muleq	r1, r4, r5
   17838:	muleq	r1, r4, r5
   1783c:	muleq	r1, r4, r5
   17840:	muleq	r1, r4, r5
   17844:	muleq	r1, r4, r5
   17848:	muleq	r1, r4, r5
   1784c:	muleq	r1, r4, r5
   17850:	muleq	r1, r4, r5
   17854:	muleq	r1, r4, r5
   17858:	andeq	r7, r1, ip, ror #1
   1785c:	strdeq	r7, [r1], -ip
   17860:	andeq	r7, r1, ip, ror #1
   17864:	andeq	r7, r1, ip, lsl #2
   17868:	mov	r3, #116	; 0x74
   1786c:	b	1733c <__assert_fail@plt+0x606c>
   17870:	ldr	r3, [sp, #160]	; 0xa0
   17874:	cmp	r3, #0
   17878:	beq	17148 <__assert_fail@plt+0x5e78>
   1787c:	lsr	r3, r4, #5
   17880:	ldr	r0, [sp, #160]	; 0xa0
   17884:	uxtb	r3, r3
   17888:	and	r1, r4, #31
   1788c:	ldr	r0, [r0, r3, lsl #2]
   17890:	lsr	r3, r0, r1
   17894:	tst	r3, #1
   17898:	beq	17148 <__assert_fail@plt+0x5e78>
   1789c:	ldr	r3, [sp, #28]
   178a0:	cmp	r3, #0
   178a4:	beq	172a8 <__assert_fail@plt+0x5fd8>
   178a8:	ldr	sl, [sp, #32]
   178ac:	mov	r8, fp
   178b0:	b	1736c <__assert_fail@plt+0x609c>
   178b4:	ldr	r3, [sp, #28]
   178b8:	cmp	r3, #0
   178bc:	bne	17e10 <__assert_fail@plt+0x6b40>
   178c0:	add	sl, sl, #1
   178c4:	ldr	r6, [sp, #40]	; 0x28
   178c8:	mov	r5, #0
   178cc:	mov	r4, #92	; 0x5c
   178d0:	b	17164 <__assert_fail@plt+0x5e94>
   178d4:	cmp	r9, r8
   178d8:	bne	17b48 <__assert_fail@plt+0x6878>
   178dc:	ldr	r0, [sp, #100]	; 0x64
   178e0:	bl	1109c <iswprint@plt>
   178e4:	add	r5, r5, r4
   178e8:	cmp	r0, #0
   178ec:	add	r0, sp, #104	; 0x68
   178f0:	moveq	r6, #0
   178f4:	bl	1103c <mbsinit@plt>
   178f8:	cmp	r0, #0
   178fc:	beq	17adc <__assert_fail@plt+0x680c>
   17900:	mov	r2, r6
   17904:	mov	ip, r5
   17908:	eor	r5, r2, #1
   1790c:	ldr	r4, [sp, #80]	; 0x50
   17910:	ldr	r6, [sp, #84]	; 0x54
   17914:	ldr	r7, [sp, #88]	; 0x58
   17918:	uxtb	r5, r5
   1791c:	cmp	ip, #1
   17920:	bls	17e20 <__assert_fail@plt+0x6b50>
   17924:	ldr	r3, [sp, #44]	; 0x2c
   17928:	and	r8, r3, r5
   1792c:	mov	r5, r2
   17930:	uxtb	r8, r8
   17934:	add	r2, sl, ip
   17938:	ldr	r0, [sp, #48]	; 0x30
   1793c:	mov	r1, #0
   17940:	str	r5, [sp, #48]	; 0x30
   17944:	ldr	r9, [sp, #28]
   17948:	ldr	ip, [sp, #40]	; 0x28
   1794c:	ldr	r3, [sp, #32]
   17950:	ldr	r5, [sp, #152]	; 0x98
   17954:	b	17a10 <__assert_fail@plt+0x6740>
   17958:	cmp	r9, #0
   1795c:	bne	17d34 <__assert_fail@plt+0x6a64>
   17960:	eor	r1, ip, #1
   17964:	cmp	r5, #2
   17968:	movne	r1, #0
   1796c:	andeq	r1, r1, #1
   17970:	cmp	r1, #0
   17974:	beq	179ac <__assert_fail@plt+0x66dc>
   17978:	cmp	fp, r7
   1797c:	movhi	ip, #39	; 0x27
   17980:	strbhi	ip, [r3, r7]
   17984:	add	ip, r7, #1
   17988:	cmp	fp, ip
   1798c:	movhi	lr, #36	; 0x24
   17990:	strbhi	lr, [r3, ip]
   17994:	add	ip, r7, #2
   17998:	cmp	fp, ip
   1799c:	movhi	lr, #39	; 0x27
   179a0:	strbhi	lr, [r3, ip]
   179a4:	add	r7, r7, #3
   179a8:	mov	ip, r1
   179ac:	cmp	fp, r7
   179b0:	movhi	r1, #92	; 0x5c
   179b4:	strbhi	r1, [r3, r7]
   179b8:	add	r1, r7, #1
   179bc:	cmp	fp, r1
   179c0:	lsrhi	lr, r4, #6
   179c4:	addhi	lr, lr, #48	; 0x30
   179c8:	strbhi	lr, [r3, r1]
   179cc:	add	lr, r7, #2
   179d0:	cmp	fp, lr
   179d4:	lsrhi	r1, r4, #3
   179d8:	andhi	r1, r1, #7
   179dc:	addhi	r1, r1, #48	; 0x30
   179e0:	add	sl, sl, #1
   179e4:	strbhi	r1, [r3, lr]
   179e8:	and	r4, r4, #7
   179ec:	cmp	r2, sl
   179f0:	add	r4, r4, #48	; 0x30
   179f4:	add	r7, r7, #3
   179f8:	bls	17d58 <__assert_fail@plt+0x6a88>
   179fc:	mov	r1, r8
   17a00:	cmp	fp, r7
   17a04:	strbhi	r4, [r3, r7]
   17a08:	ldrb	r4, [r0, #1]!
   17a0c:	add	r7, r7, #1
   17a10:	cmp	r8, #0
   17a14:	bne	17958 <__assert_fail@plt+0x6688>
   17a18:	cmp	r6, #0
   17a1c:	bne	17a6c <__assert_fail@plt+0x679c>
   17a20:	eor	r6, r1, #1
   17a24:	and	r6, r6, ip
   17a28:	add	sl, sl, #1
   17a2c:	cmp	r2, sl
   17a30:	uxtb	r6, r6
   17a34:	bls	17a94 <__assert_fail@plt+0x67c4>
   17a38:	cmp	r6, #0
   17a3c:	beq	17a00 <__assert_fail@plt+0x6730>
   17a40:	cmp	fp, r7
   17a44:	movhi	ip, #39	; 0x27
   17a48:	strbhi	ip, [r3, r7]
   17a4c:	add	ip, r7, #1
   17a50:	cmp	fp, ip
   17a54:	movhi	lr, #39	; 0x27
   17a58:	strbhi	lr, [r3, ip]
   17a5c:	add	r7, r7, #2
   17a60:	mov	r6, r8
   17a64:	mov	ip, r8
   17a68:	b	17a00 <__assert_fail@plt+0x6730>
   17a6c:	cmp	fp, r7
   17a70:	eor	r6, r1, #1
   17a74:	movhi	lr, #92	; 0x5c
   17a78:	and	r6, r6, ip
   17a7c:	add	sl, sl, #1
   17a80:	strbhi	lr, [r3, r7]
   17a84:	cmp	r2, sl
   17a88:	add	r7, r7, #1
   17a8c:	uxtb	r6, r6
   17a90:	bhi	17a38 <__assert_fail@plt+0x6768>
   17a94:	str	ip, [sp, #40]	; 0x28
   17a98:	ldr	r5, [sp, #48]	; 0x30
   17a9c:	b	17164 <__assert_fail@plt+0x5e94>
   17aa0:	ldr	r3, [sp, #24]
   17aa4:	cmn	r3, #1
   17aa8:	mov	r3, #0
   17aac:	str	r3, [sp, #104]	; 0x68
   17ab0:	str	r3, [sp, #108]	; 0x6c
   17ab4:	beq	17dd4 <__assert_fail@plt+0x6b04>
   17ab8:	mov	r2, r5
   17abc:	mov	r3, #0
   17ac0:	str	r7, [sp, #88]	; 0x58
   17ac4:	ldr	r7, [sp, #152]	; 0x98
   17ac8:	str	r5, [sp, #92]	; 0x5c
   17acc:	str	r6, [sp, #84]	; 0x54
   17ad0:	mov	r5, r3
   17ad4:	mov	r6, r2
   17ad8:	str	r4, [sp, #80]	; 0x50
   17adc:	ldr	r3, [sp, #56]	; 0x38
   17ae0:	add	r9, sl, r5
   17ae4:	add	r8, r3, r9
   17ae8:	ldr	r3, [sp, #24]
   17aec:	mov	r1, r8
   17af0:	sub	r2, r3, r9
   17af4:	add	r0, sp, #100	; 0x64
   17af8:	add	r3, sp, #104	; 0x68
   17afc:	bl	199fc <__assert_fail@plt+0x872c>
   17b00:	subs	r4, r0, #0
   17b04:	beq	17eac <__assert_fail@plt+0x6bdc>
   17b08:	cmn	r4, #1
   17b0c:	beq	17e8c <__assert_fail@plt+0x6bbc>
   17b10:	cmn	r4, #2
   17b14:	beq	17e2c <__assert_fail@plt+0x6b5c>
   17b18:	ldr	r2, [sp, #28]
   17b1c:	cmp	r7, #2
   17b20:	movne	r2, #0
   17b24:	andeq	r2, r2, #1
   17b28:	cmp	r2, #0
   17b2c:	beq	178dc <__assert_fail@plt+0x660c>
   17b30:	cmp	r4, #1
   17b34:	beq	178dc <__assert_fail@plt+0x660c>
   17b38:	sub	r3, r4, #1
   17b3c:	add	r9, r3, r9
   17b40:	ldr	r3, [sp, #56]	; 0x38
   17b44:	add	r9, r3, r9
   17b48:	ldrb	r3, [r8, #1]!
   17b4c:	sub	r3, r3, #91	; 0x5b
   17b50:	cmp	r3, #33	; 0x21
   17b54:	ldrls	pc, [pc, r3, lsl #2]
   17b58:	b	178d4 <__assert_fail@plt+0x6604>
   17b5c:	andeq	r7, r1, r4, ror #23
   17b60:	andeq	r7, r1, r4, ror #23
   17b64:	ldrdeq	r7, [r1], -r4
   17b68:	andeq	r7, r1, r4, ror #23
   17b6c:	ldrdeq	r7, [r1], -r4
   17b70:	andeq	r7, r1, r4, ror #23
   17b74:	ldrdeq	r7, [r1], -r4
   17b78:	ldrdeq	r7, [r1], -r4
   17b7c:	ldrdeq	r7, [r1], -r4
   17b80:	ldrdeq	r7, [r1], -r4
   17b84:	ldrdeq	r7, [r1], -r4
   17b88:	ldrdeq	r7, [r1], -r4
   17b8c:	ldrdeq	r7, [r1], -r4
   17b90:	ldrdeq	r7, [r1], -r4
   17b94:	ldrdeq	r7, [r1], -r4
   17b98:	ldrdeq	r7, [r1], -r4
   17b9c:	ldrdeq	r7, [r1], -r4
   17ba0:	ldrdeq	r7, [r1], -r4
   17ba4:	ldrdeq	r7, [r1], -r4
   17ba8:	ldrdeq	r7, [r1], -r4
   17bac:	ldrdeq	r7, [r1], -r4
   17bb0:	ldrdeq	r7, [r1], -r4
   17bb4:	ldrdeq	r7, [r1], -r4
   17bb8:	ldrdeq	r7, [r1], -r4
   17bbc:	ldrdeq	r7, [r1], -r4
   17bc0:	ldrdeq	r7, [r1], -r4
   17bc4:	ldrdeq	r7, [r1], -r4
   17bc8:	ldrdeq	r7, [r1], -r4
   17bcc:	ldrdeq	r7, [r1], -r4
   17bd0:	ldrdeq	r7, [r1], -r4
   17bd4:	ldrdeq	r7, [r1], -r4
   17bd8:	ldrdeq	r7, [r1], -r4
   17bdc:	ldrdeq	r7, [r1], -r4
   17be0:	andeq	r7, r1, r4, ror #23
   17be4:	mov	r3, #2
   17be8:	ldr	sl, [sp, #32]
   17bec:	mov	r8, fp
   17bf0:	str	r3, [sp, #152]	; 0x98
   17bf4:	b	1736c <__assert_fail@plt+0x609c>
   17bf8:	ldr	r3, [sp, #156]	; 0x9c
   17bfc:	tst	r3, #1
   17c00:	bne	17d2c <__assert_fail@plt+0x6a5c>
   17c04:	ldr	r3, [sp, #152]	; 0x98
   17c08:	ldr	r4, [sp, #44]	; 0x2c
   17c0c:	sub	r2, r3, #2
   17c10:	mov	r5, #0
   17c14:	clz	r2, r2
   17c18:	mov	r8, r4
   17c1c:	lsr	r2, r2, #5
   17c20:	b	1712c <__assert_fail@plt+0x5e5c>
   17c24:	ldr	r3, [sp, #156]	; 0x9c
   17c28:	ands	r9, r3, #4
   17c2c:	beq	17d64 <__assert_fail@plt+0x6a94>
   17c30:	ldr	r2, [sp, #24]
   17c34:	add	r3, sl, #2
   17c38:	cmp	r3, r2
   17c3c:	bcs	17c50 <__assert_fail@plt+0x6980>
   17c40:	ldr	r2, [sp, #48]	; 0x30
   17c44:	ldrb	r4, [r2, #1]
   17c48:	cmp	r4, #63	; 0x3f
   17c4c:	beq	17eec <__assert_fail@plt+0x6c1c>
   17c50:	mov	r2, #0
   17c54:	mov	r8, r2
   17c58:	mov	r5, r2
   17c5c:	mov	r4, #63	; 0x3f
   17c60:	b	1712c <__assert_fail@plt+0x5e5c>
   17c64:	ldr	r3, [sp, #28]
   17c68:	cmp	r3, #0
   17c6c:	bne	17f90 <__assert_fail@plt+0x6cc0>
   17c70:	mov	r2, r5
   17c74:	mov	r8, r3
   17c78:	mov	r5, #0
   17c7c:	mov	r4, #63	; 0x3f
   17c80:	b	1712c <__assert_fail@plt+0x5e5c>
   17c84:	ldr	r3, [sp, #28]
   17c88:	cmp	r3, #0
   17c8c:	bne	17f90 <__assert_fail@plt+0x6cc0>
   17c90:	ldr	r2, [sp, #72]	; 0x48
   17c94:	adds	r3, fp, #0
   17c98:	movne	r3, #1
   17c9c:	cmp	r2, #0
   17ca0:	movne	r3, #0
   17ca4:	cmp	r3, #0
   17ca8:	strne	fp, [sp, #72]	; 0x48
   17cac:	movne	fp, #0
   17cb0:	bne	17cec <__assert_fail@plt+0x6a1c>
   17cb4:	cmp	fp, r7
   17cb8:	movhi	r2, #39	; 0x27
   17cbc:	ldrhi	r3, [sp, #32]
   17cc0:	strbhi	r2, [r3, r7]
   17cc4:	add	r3, r7, #1
   17cc8:	cmp	fp, r3
   17ccc:	movhi	r1, #92	; 0x5c
   17cd0:	ldrhi	r2, [sp, #32]
   17cd4:	strbhi	r1, [r2, r3]
   17cd8:	add	r3, r7, #2
   17cdc:	cmp	fp, r3
   17ce0:	movhi	r1, #39	; 0x27
   17ce4:	ldrhi	r2, [sp, #32]
   17ce8:	strbhi	r1, [r2, r3]
   17cec:	ldr	r3, [sp, #28]
   17cf0:	add	r7, r7, #3
   17cf4:	mov	r2, r5
   17cf8:	mov	r8, r3
   17cfc:	str	r5, [sp, #68]	; 0x44
   17d00:	str	r3, [sp, #40]	; 0x28
   17d04:	mov	r4, #39	; 0x27
   17d08:	b	1712c <__assert_fail@plt+0x5e5c>
   17d0c:	ldr	r3, [sp, #56]	; 0x38
   17d10:	ldrb	r3, [r3, #1]
   17d14:	adds	r3, r3, #0
   17d18:	movne	r3, #1
   17d1c:	b	17104 <__assert_fail@plt+0x5e34>
   17d20:	ldr	r5, [sp, #28]
   17d24:	mov	r4, #48	; 0x30
   17d28:	b	1712c <__assert_fail@plt+0x5e5c>
   17d2c:	add	sl, sl, #1
   17d30:	b	16c5c <__assert_fail@plt+0x598c>
   17d34:	mov	sl, r3
   17d38:	ldr	r3, [sp, #28]
   17d3c:	mov	r8, fp
   17d40:	str	r3, [sp, #44]	; 0x2c
   17d44:	ldr	r3, [sp, #152]	; 0x98
   17d48:	sub	r2, r3, #2
   17d4c:	clz	r2, r2
   17d50:	lsr	r2, r2, #5
   17d54:	b	1736c <__assert_fail@plt+0x609c>
   17d58:	str	ip, [sp, #40]	; 0x28
   17d5c:	ldr	r5, [sp, #48]	; 0x30
   17d60:	b	1719c <__assert_fail@plt+0x5ecc>
   17d64:	mov	r2, r9
   17d68:	mov	r8, r9
   17d6c:	mov	r5, #0
   17d70:	mov	r4, #63	; 0x3f
   17d74:	b	1712c <__assert_fail@plt+0x5e5c>
   17d78:	cmp	fp, #0
   17d7c:	beq	17df4 <__assert_fail@plt+0x6b24>
   17d80:	ldr	r1, [sp, #32]
   17d84:	mov	r3, #34	; 0x22
   17d88:	mov	r2, #1
   17d8c:	strb	r3, [r1]
   17d90:	ldr	r3, [pc, #332]	; 17ee4 <__assert_fail@plt+0x6c14>
   17d94:	str	r2, [sp, #52]	; 0x34
   17d98:	mov	r7, r2
   17d9c:	str	r2, [sp, #44]	; 0x2c
   17da0:	str	r3, [sp, #64]	; 0x40
   17da4:	b	16c4c <__assert_fail@plt+0x597c>
   17da8:	ldr	r3, [pc, #300]	; 17edc <__assert_fail@plt+0x6c0c>
   17dac:	str	r3, [sp, #64]	; 0x40
   17db0:	mov	r3, #0
   17db4:	str	r3, [sp, #28]
   17db8:	mov	r3, #1
   17dbc:	str	r3, [sp, #52]	; 0x34
   17dc0:	mov	r7, r3
   17dc4:	mov	r3, #2
   17dc8:	str	r3, [sp, #152]	; 0x98
   17dcc:	b	16c4c <__assert_fail@plt+0x597c>
   17dd0:	bl	11294 <abort@plt>
   17dd4:	ldr	r0, [sp, #56]	; 0x38
   17dd8:	bl	11168 <strlen@plt>
   17ddc:	str	r0, [sp, #24]
   17de0:	b	17ab8 <__assert_fail@plt+0x67e8>
   17de4:	mov	r5, r8
   17de8:	mov	r4, #48	; 0x30
   17dec:	ldr	r8, [sp, #44]	; 0x2c
   17df0:	b	1712c <__assert_fail@plt+0x5e5c>
   17df4:	mov	r3, #1
   17df8:	str	r3, [sp, #52]	; 0x34
   17dfc:	mov	r7, r3
   17e00:	str	r3, [sp, #44]	; 0x2c
   17e04:	ldr	r3, [pc, #216]	; 17ee4 <__assert_fail@plt+0x6c14>
   17e08:	str	r3, [sp, #64]	; 0x40
   17e0c:	b	16c4c <__assert_fail@plt+0x597c>
   17e10:	ldr	sl, [sp, #32]
   17e14:	mov	r8, fp
   17e18:	mov	r2, r3
   17e1c:	b	1736c <__assert_fail@plt+0x609c>
   17e20:	mov	r3, r5
   17e24:	mov	r5, r2
   17e28:	b	17624 <__assert_fail@plt+0x6354>
   17e2c:	ldr	r1, [sp, #24]
   17e30:	mov	r2, r5
   17e34:	cmp	r1, r9
   17e38:	mov	ip, r5
   17e3c:	ldr	r4, [sp, #80]	; 0x50
   17e40:	ldr	r5, [sp, #92]	; 0x5c
   17e44:	ldr	r6, [sp, #84]	; 0x54
   17e48:	ldr	r7, [sp, #88]	; 0x58
   17e4c:	bls	17e80 <__assert_fail@plt+0x6bb0>
   17e50:	ldrb	r3, [r8]
   17e54:	cmp	r3, #0
   17e58:	bne	17e6c <__assert_fail@plt+0x6b9c>
   17e5c:	b	17e84 <__assert_fail@plt+0x6bb4>
   17e60:	ldrb	r3, [r8, #1]!
   17e64:	cmp	r3, #0
   17e68:	beq	17f84 <__assert_fail@plt+0x6cb4>
   17e6c:	add	r2, r2, #1
   17e70:	add	r3, sl, r2
   17e74:	cmp	r1, r3
   17e78:	bhi	17e60 <__assert_fail@plt+0x6b90>
   17e7c:	mov	ip, r2
   17e80:	mov	r3, #0
   17e84:	mov	r2, r3
   17e88:	b	1791c <__assert_fail@plt+0x664c>
   17e8c:	mov	r3, #0
   17e90:	mov	ip, r5
   17e94:	ldr	r4, [sp, #80]	; 0x50
   17e98:	ldr	r5, [sp, #92]	; 0x5c
   17e9c:	ldr	r6, [sp, #84]	; 0x54
   17ea0:	ldr	r7, [sp, #88]	; 0x58
   17ea4:	mov	r2, r3
   17ea8:	b	1791c <__assert_fail@plt+0x664c>
   17eac:	mov	r3, r6
   17eb0:	mov	ip, r5
   17eb4:	eor	r5, r3, #1
   17eb8:	mov	r2, r6
   17ebc:	ldr	r4, [sp, #80]	; 0x50
   17ec0:	ldr	r6, [sp, #84]	; 0x54
   17ec4:	ldr	r7, [sp, #88]	; 0x58
   17ec8:	uxtb	r5, r5
   17ecc:	b	1791c <__assert_fail@plt+0x664c>
   17ed0:	ldr	sl, [sp, #32]
   17ed4:	mov	r8, fp
   17ed8:	b	17d40 <__assert_fail@plt+0x6a70>
   17edc:	andeq	fp, r1, r4, ror r4
   17ee0:	andeq	fp, r1, r8, ror r4
   17ee4:	andeq	fp, r1, r0, ror r4
   17ee8:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   17eec:	ldr	r2, [sp, #56]	; 0x38
   17ef0:	ldrb	r1, [r2, r3]
   17ef4:	sub	r2, r1, #33	; 0x21
   17ef8:	uxtb	r2, r2
   17efc:	cmp	r2, #29
   17f00:	bhi	17fa0 <__assert_fail@plt+0x6cd0>
   17f04:	ldr	r0, [pc, #-36]	; 17ee8 <__assert_fail@plt+0x6c18>
   17f08:	mov	ip, #1
   17f0c:	ands	r2, r0, ip, lsl r2
   17f10:	beq	17fb0 <__assert_fail@plt+0x6ce0>
   17f14:	ldr	r2, [sp, #28]
   17f18:	cmp	r2, #0
   17f1c:	bne	180b0 <__assert_fail@plt+0x6de0>
   17f20:	cmp	fp, r7
   17f24:	ldr	r8, [sp, #28]
   17f28:	ldrhi	r2, [sp, #32]
   17f2c:	mov	sl, r3
   17f30:	mov	r5, r8
   17f34:	strbhi	r4, [r2, r7]
   17f38:	add	r2, r7, #1
   17f3c:	cmp	fp, r2
   17f40:	movhi	r0, #34	; 0x22
   17f44:	ldrhi	ip, [sp, #32]
   17f48:	mov	r4, r1
   17f4c:	strbhi	r0, [ip, r2]
   17f50:	add	r2, r7, #2
   17f54:	cmp	fp, r2
   17f58:	movhi	r0, #34	; 0x22
   17f5c:	ldrhi	ip, [sp, #32]
   17f60:	strbhi	r0, [ip, r2]
   17f64:	add	r2, r7, #3
   17f68:	cmp	fp, r2
   17f6c:	movhi	r0, #63	; 0x3f
   17f70:	ldrhi	ip, [sp, #32]
   17f74:	add	r7, r7, #4
   17f78:	strbhi	r0, [ip, r2]
   17f7c:	mov	r2, r8
   17f80:	b	1712c <__assert_fail@plt+0x5e5c>
   17f84:	mov	ip, r2
   17f88:	mov	r2, r3
   17f8c:	b	1791c <__assert_fail@plt+0x664c>
   17f90:	ldr	sl, [sp, #32]
   17f94:	mov	r8, fp
   17f98:	ldr	r2, [sp, #28]
   17f9c:	b	1736c <__assert_fail@plt+0x609c>
   17fa0:	mov	r2, #0
   17fa4:	mov	r8, r2
   17fa8:	mov	r5, r2
   17fac:	b	1712c <__assert_fail@plt+0x5e5c>
   17fb0:	mov	r8, r2
   17fb4:	mov	r5, #0
   17fb8:	b	1712c <__assert_fail@plt+0x5e5c>
   17fbc:	ldr	r1, [sp, #152]	; 0x98
   17fc0:	bl	16a88 <__assert_fail@plt+0x57b8>
   17fc4:	str	r0, [sp, #168]	; 0xa8
   17fc8:	b	16fe8 <__assert_fail@plt+0x5d18>
   17fcc:	ldr	r1, [sp, #152]	; 0x98
   17fd0:	bl	16a88 <__assert_fail@plt+0x57b8>
   17fd4:	str	r0, [sp, #164]	; 0xa4
   17fd8:	b	16fc8 <__assert_fail@plt+0x5cf8>
   17fdc:	ldr	r7, [sp, #28]
   17fe0:	b	17028 <__assert_fail@plt+0x5d58>
   17fe4:	ldr	sl, [sp, #32]
   17fe8:	ldr	r2, [sp, #68]	; 0x44
   17fec:	mov	r8, fp
   17ff0:	mov	fp, r7
   17ff4:	ldr	r3, [sp, #64]	; 0x40
   17ff8:	cmp	r3, #0
   17ffc:	moveq	r2, #0
   18000:	andne	r2, r2, #1
   18004:	cmp	r2, #0
   18008:	beq	18034 <__assert_fail@plt+0x6d64>
   1800c:	mov	r2, r3
   18010:	ldrb	r3, [r3]
   18014:	cmp	r3, #0
   18018:	beq	18034 <__assert_fail@plt+0x6d64>
   1801c:	cmp	r8, fp
   18020:	strbhi	r3, [sl, fp]
   18024:	ldrb	r3, [r2, #1]!
   18028:	add	fp, fp, #1
   1802c:	cmp	r3, #0
   18030:	bne	1801c <__assert_fail@plt+0x6d4c>
   18034:	cmp	r8, fp
   18038:	movhi	r3, #0
   1803c:	strbhi	r3, [sl, fp]
   18040:	b	173c8 <__assert_fail@plt+0x60f8>
   18044:	ldr	r3, [sp, #168]	; 0xa8
   18048:	ldr	sl, [sp, #32]
   1804c:	str	r3, [sp, #16]
   18050:	ldr	r3, [sp, #164]	; 0xa4
   18054:	mov	ip, #5
   18058:	str	r3, [sp, #12]
   1805c:	ldr	r3, [sp, #160]	; 0xa0
   18060:	ldr	r2, [sp, #56]	; 0x38
   18064:	str	r3, [sp, #8]
   18068:	ldr	r3, [sp, #156]	; 0x9c
   1806c:	ldr	r1, [sp, #72]	; 0x48
   18070:	str	r3, [sp, #4]
   18074:	mov	r0, sl
   18078:	ldr	r3, [sp, #24]
   1807c:	str	ip, [sp]
   18080:	bl	16ba8 <__assert_fail@plt+0x58d8>
   18084:	mov	fp, r0
   18088:	b	173c8 <__assert_fail@plt+0x60f8>
   1808c:	mov	r8, fp
   18090:	ldr	sl, [sp, #32]
   18094:	mov	fp, r7
   18098:	mov	r2, r3
   1809c:	b	17ff4 <__assert_fail@plt+0x6d24>
   180a0:	mov	r8, fp
   180a4:	ldr	sl, [sp, #32]
   180a8:	mov	fp, r7
   180ac:	b	17ff4 <__assert_fail@plt+0x6d24>
   180b0:	ldr	sl, [sp, #32]
   180b4:	mov	r8, fp
   180b8:	b	17384 <__assert_fail@plt+0x60b4>
   180bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180c0:	sub	sp, sp, #52	; 0x34
   180c4:	mov	r4, r0
   180c8:	mov	r5, r3
   180cc:	mov	sl, r1
   180d0:	mov	fp, r2
   180d4:	bl	11180 <__errno_location@plt>
   180d8:	ldr	r7, [pc, #412]	; 1827c <__assert_fail@plt+0x6fac>
   180dc:	cmn	r4, #-2147483647	; 0x80000001
   180e0:	ldr	r6, [r7]
   180e4:	mov	r8, r0
   180e8:	movne	r0, #0
   180ec:	moveq	r0, #1
   180f0:	ldr	r3, [r8]
   180f4:	orrs	r0, r0, r4, lsr #31
   180f8:	str	r3, [sp, #24]
   180fc:	bne	18278 <__assert_fail@plt+0x6fa8>
   18100:	ldr	r2, [r7, #4]
   18104:	cmp	r4, r2
   18108:	blt	18168 <__assert_fail@plt+0x6e98>
   1810c:	add	r9, r7, #8
   18110:	cmp	r6, r9
   18114:	str	r2, [sp, #44]	; 0x2c
   18118:	beq	18248 <__assert_fail@plt+0x6f78>
   1811c:	mov	r3, #8
   18120:	sub	r2, r4, r2
   18124:	mov	r0, r6
   18128:	str	r3, [sp]
   1812c:	add	r2, r2, #1
   18130:	mvn	r3, #-2147483648	; 0x80000000
   18134:	add	r1, sp, #44	; 0x2c
   18138:	bl	18ff0 <__assert_fail@plt+0x7d20>
   1813c:	mov	r6, r0
   18140:	str	r0, [r7]
   18144:	ldr	r0, [r7, #4]
   18148:	ldr	r2, [sp, #44]	; 0x2c
   1814c:	mov	r1, #0
   18150:	sub	r2, r2, r0
   18154:	add	r0, r6, r0, lsl #3
   18158:	lsl	r2, r2, #3
   1815c:	bl	11198 <memset@plt>
   18160:	ldr	r3, [sp, #44]	; 0x2c
   18164:	str	r3, [r7, #4]
   18168:	add	r3, r6, r4, lsl #3
   1816c:	ldr	r1, [r5, #4]
   18170:	ldr	r7, [r3, #4]
   18174:	ldr	r9, [r6, r4, lsl #3]
   18178:	ldr	r2, [r5, #40]	; 0x28
   1817c:	ldr	ip, [r5, #44]	; 0x2c
   18180:	add	r0, r5, #8
   18184:	str	r3, [sp, #28]
   18188:	ldr	r3, [r5]
   1818c:	orr	r1, r1, #1
   18190:	mov	lr, r0
   18194:	str	r1, [sp, #32]
   18198:	str	r0, [sp, #36]	; 0x24
   1819c:	str	r1, [sp, #4]
   181a0:	str	r2, [sp, #12]
   181a4:	str	r3, [sp]
   181a8:	mov	r0, r7
   181ac:	mov	r1, r9
   181b0:	str	ip, [sp, #16]
   181b4:	str	lr, [sp, #8]
   181b8:	mov	r3, fp
   181bc:	mov	r2, sl
   181c0:	bl	16ba8 <__assert_fail@plt+0x58d8>
   181c4:	cmp	r9, r0
   181c8:	bhi	18234 <__assert_fail@plt+0x6f64>
   181cc:	ldr	r3, [pc, #172]	; 18280 <__assert_fail@plt+0x6fb0>
   181d0:	add	r9, r0, #1
   181d4:	cmp	r7, r3
   181d8:	str	r9, [r6, r4, lsl #3]
   181dc:	beq	181e8 <__assert_fail@plt+0x6f18>
   181e0:	mov	r0, r7
   181e4:	bl	13684 <__assert_fail@plt+0x23b4>
   181e8:	mov	r0, r9
   181ec:	bl	18e8c <__assert_fail@plt+0x7bbc>
   181f0:	ldr	lr, [sp, #28]
   181f4:	ldr	ip, [r5, #44]	; 0x2c
   181f8:	ldr	r4, [r5, #40]	; 0x28
   181fc:	mov	r3, fp
   18200:	mov	r2, sl
   18204:	mov	r1, r9
   18208:	str	r0, [lr, #4]
   1820c:	ldr	lr, [r5]
   18210:	ldr	r5, [sp, #36]	; 0x24
   18214:	str	ip, [sp, #16]
   18218:	str	r5, [sp, #8]
   1821c:	ldr	r5, [sp, #32]
   18220:	str	r4, [sp, #12]
   18224:	str	r5, [sp, #4]
   18228:	str	lr, [sp]
   1822c:	mov	r7, r0
   18230:	bl	16ba8 <__assert_fail@plt+0x58d8>
   18234:	ldr	r3, [sp, #24]
   18238:	mov	r0, r7
   1823c:	str	r3, [r8]
   18240:	add	sp, sp, #52	; 0x34
   18244:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18248:	mov	r3, #8
   1824c:	sub	r2, r4, r2
   18250:	str	r3, [sp]
   18254:	add	r1, sp, #44	; 0x2c
   18258:	add	r2, r2, #1
   1825c:	mvn	r3, #-2147483648	; 0x80000000
   18260:	bl	18ff0 <__assert_fail@plt+0x7d20>
   18264:	mov	r6, r0
   18268:	ldm	r9, {r0, r1}
   1826c:	str	r6, [r7]
   18270:	stm	r6, {r0, r1}
   18274:	b	18144 <__assert_fail@plt+0x6e74>
   18278:	bl	11294 <abort@plt>
   1827c:	andeq	ip, r2, r8, lsr r1
   18280:	andeq	ip, r2, r0, asr #3
   18284:	push	{r4, r5, r6, lr}
   18288:	mov	r5, r0
   1828c:	bl	11180 <__errno_location@plt>
   18290:	cmp	r5, #0
   18294:	mov	r1, #48	; 0x30
   18298:	mov	r4, r0
   1829c:	ldr	r0, [pc, #16]	; 182b4 <__assert_fail@plt+0x6fe4>
   182a0:	ldr	r6, [r4]
   182a4:	movne	r0, r5
   182a8:	bl	192ec <__assert_fail@plt+0x801c>
   182ac:	str	r6, [r4]
   182b0:	pop	{r4, r5, r6, pc}
   182b4:	andeq	ip, r2, r0, asr #5
   182b8:	ldr	r3, [pc, #12]	; 182cc <__assert_fail@plt+0x6ffc>
   182bc:	cmp	r0, #0
   182c0:	moveq	r0, r3
   182c4:	ldr	r0, [r0]
   182c8:	bx	lr
   182cc:	andeq	ip, r2, r0, asr #5
   182d0:	ldr	r3, [pc, #12]	; 182e4 <__assert_fail@plt+0x7014>
   182d4:	cmp	r0, #0
   182d8:	moveq	r0, r3
   182dc:	str	r1, [r0]
   182e0:	bx	lr
   182e4:	andeq	ip, r2, r0, asr #5
   182e8:	ldr	r3, [pc, #52]	; 18324 <__assert_fail@plt+0x7054>
   182ec:	cmp	r0, #0
   182f0:	moveq	r0, r3
   182f4:	add	r3, r0, #8
   182f8:	push	{lr}		; (str lr, [sp, #-4]!)
   182fc:	lsr	lr, r1, #5
   18300:	and	r1, r1, #31
   18304:	ldr	ip, [r3, lr, lsl #2]
   18308:	lsr	r0, ip, r1
   1830c:	eor	r2, r2, r0
   18310:	and	r2, r2, #1
   18314:	and	r0, r0, #1
   18318:	eor	r1, ip, r2, lsl r1
   1831c:	str	r1, [r3, lr, lsl #2]
   18320:	pop	{pc}		; (ldr pc, [sp], #4)
   18324:	andeq	ip, r2, r0, asr #5
   18328:	ldr	r3, [pc, #16]	; 18340 <__assert_fail@plt+0x7070>
   1832c:	cmp	r0, #0
   18330:	movne	r3, r0
   18334:	ldr	r0, [r3, #4]
   18338:	str	r1, [r3, #4]
   1833c:	bx	lr
   18340:	andeq	ip, r2, r0, asr #5
   18344:	ldr	r3, [pc, #44]	; 18378 <__assert_fail@plt+0x70a8>
   18348:	cmp	r0, #0
   1834c:	moveq	r0, r3
   18350:	mov	ip, #10
   18354:	cmp	r2, #0
   18358:	cmpne	r1, #0
   1835c:	str	ip, [r0]
   18360:	beq	18370 <__assert_fail@plt+0x70a0>
   18364:	str	r1, [r0, #40]	; 0x28
   18368:	str	r2, [r0, #44]	; 0x2c
   1836c:	bx	lr
   18370:	push	{r4, lr}
   18374:	bl	11294 <abort@plt>
   18378:	andeq	ip, r2, r0, asr #5
   1837c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18380:	sub	sp, sp, #24
   18384:	ldr	ip, [pc, #108]	; 183f8 <__assert_fail@plt+0x7128>
   18388:	ldr	r4, [sp, #56]	; 0x38
   1838c:	mov	r9, r2
   18390:	cmp	r4, #0
   18394:	moveq	r4, ip
   18398:	mov	sl, r3
   1839c:	mov	r7, r0
   183a0:	mov	r8, r1
   183a4:	bl	11180 <__errno_location@plt>
   183a8:	ldr	r3, [r4, #44]	; 0x2c
   183ac:	mov	r1, r8
   183b0:	ldr	r6, [r0]
   183b4:	str	r3, [sp, #16]
   183b8:	ldr	r2, [r4, #40]	; 0x28
   183bc:	add	r3, r4, #8
   183c0:	str	r3, [sp, #8]
   183c4:	str	r2, [sp, #12]
   183c8:	ldr	r2, [r4, #4]
   183cc:	mov	r5, r0
   183d0:	str	r2, [sp, #4]
   183d4:	ldr	ip, [r4]
   183d8:	mov	r3, sl
   183dc:	mov	r2, r9
   183e0:	mov	r0, r7
   183e4:	str	ip, [sp]
   183e8:	bl	16ba8 <__assert_fail@plt+0x58d8>
   183ec:	str	r6, [r5]
   183f0:	add	sp, sp, #24
   183f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   183f8:	andeq	ip, r2, r0, asr #5
   183fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18400:	cmp	r3, #0
   18404:	sub	sp, sp, #44	; 0x2c
   18408:	ldr	r4, [pc, #192]	; 184d0 <__assert_fail@plt+0x7200>
   1840c:	mov	r6, r2
   18410:	movne	r4, r3
   18414:	mov	r9, r1
   18418:	mov	r8, r0
   1841c:	bl	11180 <__errno_location@plt>
   18420:	ldr	r3, [r4, #44]	; 0x2c
   18424:	ldr	r5, [r4, #4]
   18428:	add	sl, r4, #8
   1842c:	cmp	r6, #0
   18430:	orreq	r5, r5, #1
   18434:	mov	r1, #0
   18438:	ldr	r2, [r0]
   1843c:	str	r3, [sp, #16]
   18440:	ldr	r3, [r4, #40]	; 0x28
   18444:	stmib	sp, {r5, sl}
   18448:	str	r3, [sp, #12]
   1844c:	ldr	r3, [r4]
   18450:	mov	r7, r0
   18454:	str	r2, [sp, #28]
   18458:	str	r3, [sp]
   1845c:	mov	r2, r8
   18460:	mov	r3, r9
   18464:	mov	r0, r1
   18468:	bl	16ba8 <__assert_fail@plt+0x58d8>
   1846c:	add	r1, r0, #1
   18470:	mov	fp, r0
   18474:	mov	r0, r1
   18478:	str	r1, [sp, #36]	; 0x24
   1847c:	bl	18e8c <__assert_fail@plt+0x7bbc>
   18480:	ldr	r3, [r4, #44]	; 0x2c
   18484:	mov	r2, r8
   18488:	str	r3, [sp, #16]
   1848c:	ldr	r3, [r4, #40]	; 0x28
   18490:	str	r5, [sp, #4]
   18494:	str	r3, [sp, #12]
   18498:	str	sl, [sp, #8]
   1849c:	ldr	ip, [r4]
   184a0:	ldr	r1, [sp, #36]	; 0x24
   184a4:	mov	r3, r9
   184a8:	str	ip, [sp]
   184ac:	str	r0, [sp, #32]
   184b0:	bl	16ba8 <__assert_fail@plt+0x58d8>
   184b4:	ldr	r2, [sp, #28]
   184b8:	cmp	r6, #0
   184bc:	str	r2, [r7]
   184c0:	ldr	r0, [sp, #32]
   184c4:	strne	fp, [r6]
   184c8:	add	sp, sp, #44	; 0x2c
   184cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184d0:	andeq	ip, r2, r0, asr #5
   184d4:	mov	r3, r2
   184d8:	mov	r2, #0
   184dc:	b	183fc <__assert_fail@plt+0x712c>
   184e0:	push	{r4, r5, r6, r7, r8, lr}
   184e4:	ldr	r6, [pc, #116]	; 18560 <__assert_fail@plt+0x7290>
   184e8:	ldr	r3, [r6, #4]
   184ec:	ldr	r7, [r6]
   184f0:	cmp	r3, #1
   184f4:	movgt	r5, r7
   184f8:	movgt	r4, #1
   184fc:	ble	1851c <__assert_fail@plt+0x724c>
   18500:	ldr	r0, [r5, #12]
   18504:	bl	13684 <__assert_fail@plt+0x23b4>
   18508:	ldr	r3, [r6, #4]
   1850c:	add	r4, r4, #1
   18510:	cmp	r3, r4
   18514:	add	r5, r5, #8
   18518:	bgt	18500 <__assert_fail@plt+0x7230>
   1851c:	ldr	r0, [r7, #4]
   18520:	ldr	r4, [pc, #60]	; 18564 <__assert_fail@plt+0x7294>
   18524:	cmp	r0, r4
   18528:	beq	1853c <__assert_fail@plt+0x726c>
   1852c:	bl	13684 <__assert_fail@plt+0x23b4>
   18530:	mov	r3, #256	; 0x100
   18534:	str	r4, [r6, #12]
   18538:	str	r3, [r6, #8]
   1853c:	ldr	r4, [pc, #36]	; 18568 <__assert_fail@plt+0x7298>
   18540:	cmp	r7, r4
   18544:	beq	18554 <__assert_fail@plt+0x7284>
   18548:	mov	r0, r7
   1854c:	bl	13684 <__assert_fail@plt+0x23b4>
   18550:	str	r4, [r6]
   18554:	mov	r3, #1
   18558:	str	r3, [r6, #4]
   1855c:	pop	{r4, r5, r6, r7, r8, pc}
   18560:	andeq	ip, r2, r8, lsr r1
   18564:	andeq	ip, r2, r0, asr #3
   18568:	andeq	ip, r2, r0, asr #2
   1856c:	ldr	r3, [pc, #4]	; 18578 <__assert_fail@plt+0x72a8>
   18570:	mvn	r2, #0
   18574:	b	180bc <__assert_fail@plt+0x6dec>
   18578:	andeq	ip, r2, r0, asr #5
   1857c:	ldr	r3, [pc]	; 18584 <__assert_fail@plt+0x72b4>
   18580:	b	180bc <__assert_fail@plt+0x6dec>
   18584:	andeq	ip, r2, r0, asr #5
   18588:	mov	r1, r0
   1858c:	ldr	r3, [pc, #8]	; 1859c <__assert_fail@plt+0x72cc>
   18590:	mvn	r2, #0
   18594:	mov	r0, #0
   18598:	b	180bc <__assert_fail@plt+0x6dec>
   1859c:	andeq	ip, r2, r0, asr #5
   185a0:	mov	r2, r1
   185a4:	ldr	r3, [pc, #8]	; 185b4 <__assert_fail@plt+0x72e4>
   185a8:	mov	r1, r0
   185ac:	mov	r0, #0
   185b0:	b	180bc <__assert_fail@plt+0x6dec>
   185b4:	andeq	ip, r2, r0, asr #5
   185b8:	push	{r4, r5, lr}
   185bc:	sub	sp, sp, #52	; 0x34
   185c0:	mov	r5, r2
   185c4:	mov	r4, r0
   185c8:	mov	r0, sp
   185cc:	bl	16a58 <__assert_fail@plt+0x5788>
   185d0:	mov	r3, sp
   185d4:	mov	r1, r5
   185d8:	mov	r0, r4
   185dc:	mvn	r2, #0
   185e0:	bl	180bc <__assert_fail@plt+0x6dec>
   185e4:	add	sp, sp, #52	; 0x34
   185e8:	pop	{r4, r5, pc}
   185ec:	push	{r4, r5, r6, lr}
   185f0:	sub	sp, sp, #48	; 0x30
   185f4:	mov	r5, r2
   185f8:	mov	r6, r3
   185fc:	mov	r4, r0
   18600:	mov	r0, sp
   18604:	bl	16a58 <__assert_fail@plt+0x5788>
   18608:	mov	r3, sp
   1860c:	mov	r2, r6
   18610:	mov	r1, r5
   18614:	mov	r0, r4
   18618:	bl	180bc <__assert_fail@plt+0x6dec>
   1861c:	add	sp, sp, #48	; 0x30
   18620:	pop	{r4, r5, r6, pc}
   18624:	mov	r2, r1
   18628:	mov	r1, r0
   1862c:	mov	r0, #0
   18630:	b	185b8 <__assert_fail@plt+0x72e8>
   18634:	mov	r3, r2
   18638:	mov	r2, r1
   1863c:	mov	r1, r0
   18640:	mov	r0, #0
   18644:	b	185ec <__assert_fail@plt+0x731c>
   18648:	push	{r4, r5, r6, r7, r8, lr}
   1864c:	mov	r7, r0
   18650:	ldr	lr, [pc, #100]	; 186bc <__assert_fail@plt+0x73ec>
   18654:	mov	r8, r1
   18658:	mov	r4, r2
   1865c:	ldm	lr!, {r0, r1, r2, r3}
   18660:	sub	sp, sp, #48	; 0x30
   18664:	mov	ip, sp
   18668:	lsr	r5, r4, #5
   1866c:	stmia	ip!, {r0, r1, r2, r3}
   18670:	add	r6, sp, #8
   18674:	ldm	lr!, {r0, r1, r2, r3}
   18678:	and	r4, r4, #31
   1867c:	stmia	ip!, {r0, r1, r2, r3}
   18680:	ldm	lr, {r0, r1, r2, r3}
   18684:	stm	ip, {r0, r1, r2, r3}
   18688:	mov	r2, r8
   1868c:	ldr	lr, [r6, r5, lsl #2]
   18690:	mov	r1, r7
   18694:	mov	r3, sp
   18698:	lsr	ip, lr, r4
   1869c:	eor	ip, ip, #1
   186a0:	and	ip, ip, #1
   186a4:	mov	r0, #0
   186a8:	eor	r4, lr, ip, lsl r4
   186ac:	str	r4, [r6, r5, lsl #2]
   186b0:	bl	180bc <__assert_fail@plt+0x6dec>
   186b4:	add	sp, sp, #48	; 0x30
   186b8:	pop	{r4, r5, r6, r7, r8, pc}
   186bc:	andeq	ip, r2, r0, asr #5
   186c0:	mov	r2, r1
   186c4:	mvn	r1, #0
   186c8:	b	18648 <__assert_fail@plt+0x7378>
   186cc:	mov	r2, #58	; 0x3a
   186d0:	mvn	r1, #0
   186d4:	b	18648 <__assert_fail@plt+0x7378>
   186d8:	mov	r2, #58	; 0x3a
   186dc:	b	18648 <__assert_fail@plt+0x7378>
   186e0:	push	{r4, r5, r6, r7, lr}
   186e4:	sub	sp, sp, #100	; 0x64
   186e8:	mov	r6, r0
   186ec:	mov	r0, sp
   186f0:	mov	r7, r2
   186f4:	bl	16a58 <__assert_fail@plt+0x5788>
   186f8:	mov	ip, sp
   186fc:	add	lr, sp, #48	; 0x30
   18700:	ldm	ip!, {r0, r1, r2, r3}
   18704:	stmia	lr!, {r0, r1, r2, r3}
   18708:	ldm	ip!, {r0, r1, r2, r3}
   1870c:	ldr	r5, [sp, #60]	; 0x3c
   18710:	stmia	lr!, {r0, r1, r2, r3}
   18714:	mvn	r4, r5
   18718:	ldm	ip, {r0, r1, r2, r3}
   1871c:	and	ip, r4, #67108864	; 0x4000000
   18720:	eor	ip, ip, r5
   18724:	str	ip, [sp, #60]	; 0x3c
   18728:	stm	lr, {r0, r1, r2, r3}
   1872c:	mov	r1, r7
   18730:	mov	r0, r6
   18734:	add	r3, sp, #48	; 0x30
   18738:	mvn	r2, #0
   1873c:	bl	180bc <__assert_fail@plt+0x6dec>
   18740:	add	sp, sp, #100	; 0x64
   18744:	pop	{r4, r5, r6, r7, pc}
   18748:	push	{r4, r5, r6, r7, r8, lr}
   1874c:	mov	r5, r1
   18750:	ldr	lr, [pc, #100]	; 187bc <__assert_fail@plt+0x74ec>
   18754:	mov	r4, r2
   18758:	mov	r7, r0
   1875c:	mov	r8, r3
   18760:	ldm	lr!, {r0, r1, r2, r3}
   18764:	sub	sp, sp, #48	; 0x30
   18768:	mov	ip, sp
   1876c:	mov	r6, #10
   18770:	stmia	ip!, {r0, r1, r2, r3}
   18774:	cmp	r4, #0
   18778:	cmpne	r5, #0
   1877c:	ldm	lr!, {r0, r1, r2, r3}
   18780:	str	r6, [sp]
   18784:	stmia	ip!, {r0, r1, r2, r3}
   18788:	ldm	lr, {r0, r1, r2, r3}
   1878c:	stm	ip, {r0, r1, r2, r3}
   18790:	beq	187b8 <__assert_fail@plt+0x74e8>
   18794:	mov	r3, sp
   18798:	mov	r1, r8
   1879c:	mov	r0, r7
   187a0:	ldr	r2, [sp, #72]	; 0x48
   187a4:	str	r5, [sp, #40]	; 0x28
   187a8:	str	r4, [sp, #44]	; 0x2c
   187ac:	bl	180bc <__assert_fail@plt+0x6dec>
   187b0:	add	sp, sp, #48	; 0x30
   187b4:	pop	{r4, r5, r6, r7, r8, pc}
   187b8:	bl	11294 <abort@plt>
   187bc:	andeq	ip, r2, r0, asr #5
   187c0:	push	{lr}		; (str lr, [sp, #-4]!)
   187c4:	sub	sp, sp, #12
   187c8:	mvn	ip, #0
   187cc:	str	ip, [sp]
   187d0:	bl	18748 <__assert_fail@plt+0x7478>
   187d4:	add	sp, sp, #12
   187d8:	pop	{pc}		; (ldr pc, [sp], #4)
   187dc:	push	{lr}		; (str lr, [sp, #-4]!)
   187e0:	sub	sp, sp, #12
   187e4:	mvn	ip, #0
   187e8:	mov	r3, r2
   187ec:	str	ip, [sp]
   187f0:	mov	r2, r1
   187f4:	mov	r1, r0
   187f8:	mov	r0, #0
   187fc:	bl	18748 <__assert_fail@plt+0x7478>
   18800:	add	sp, sp, #12
   18804:	pop	{pc}		; (ldr pc, [sp], #4)
   18808:	push	{lr}		; (str lr, [sp, #-4]!)
   1880c:	sub	sp, sp, #12
   18810:	str	r3, [sp]
   18814:	mov	r3, r2
   18818:	mov	r2, r1
   1881c:	mov	r1, r0
   18820:	mov	r0, #0
   18824:	bl	18748 <__assert_fail@plt+0x7478>
   18828:	add	sp, sp, #12
   1882c:	pop	{pc}		; (ldr pc, [sp], #4)
   18830:	ldr	r3, [pc]	; 18838 <__assert_fail@plt+0x7568>
   18834:	b	180bc <__assert_fail@plt+0x6dec>
   18838:	andeq	ip, r2, r8, asr #2
   1883c:	mov	r2, r1
   18840:	ldr	r3, [pc, #8]	; 18850 <__assert_fail@plt+0x7580>
   18844:	mov	r1, r0
   18848:	mov	r0, #0
   1884c:	b	180bc <__assert_fail@plt+0x6dec>
   18850:	andeq	ip, r2, r8, asr #2
   18854:	ldr	r3, [pc, #4]	; 18860 <__assert_fail@plt+0x7590>
   18858:	mvn	r2, #0
   1885c:	b	180bc <__assert_fail@plt+0x6dec>
   18860:	andeq	ip, r2, r8, asr #2
   18864:	mov	r1, r0
   18868:	ldr	r3, [pc, #8]	; 18878 <__assert_fail@plt+0x75a8>
   1886c:	mvn	r2, #0
   18870:	mov	r0, #0
   18874:	b	180bc <__assert_fail@plt+0x6dec>
   18878:	andeq	ip, r2, r8, asr #2
   1887c:	push	{r4, r6, r7, lr}
   18880:	sub	sp, sp, #104	; 0x68
   18884:	mov	r4, r0
   18888:	mov	r2, sp
   1888c:	ldr	r1, [pc, #52]	; 188c8 <__assert_fail@plt+0x75f8>
   18890:	mov	r0, #3
   18894:	bl	112ac <__lxstat64@plt>
   18898:	cmp	r0, #0
   1889c:	bne	188bc <__assert_fail@plt+0x75ec>
   188a0:	ldrd	r6, [sp, #96]	; 0x60
   188a4:	ldrd	r2, [sp]
   188a8:	mov	r0, r4
   188ac:	strd	r6, [r4]
   188b0:	strd	r2, [r4, #8]
   188b4:	add	sp, sp, #104	; 0x68
   188b8:	pop	{r4, r6, r7, pc}
   188bc:	mov	r0, #0
   188c0:	add	sp, sp, #104	; 0x68
   188c4:	pop	{r4, r6, r7, pc}
   188c8:	andeq	sl, r1, r8, lsr #25
   188cc:	cmp	r0, #2
   188d0:	push	{r4, r5, r6, r7, r8, lr}
   188d4:	mov	r4, r0
   188d8:	bhi	18900 <__assert_fail@plt+0x7630>
   188dc:	bl	19a9c <__assert_fail@plt+0x87cc>
   188e0:	mov	r7, r0
   188e4:	bl	11180 <__errno_location@plt>
   188e8:	mov	r5, r0
   188ec:	mov	r0, r4
   188f0:	ldr	r6, [r5]
   188f4:	mov	r4, r7
   188f8:	bl	112a0 <close@plt>
   188fc:	str	r6, [r5]
   18900:	mov	r0, r4
   18904:	pop	{r4, r5, r6, r7, r8, pc}
   18908:	push	{r4, r5, r6, lr}
   1890c:	sub	sp, sp, #32
   18910:	cmp	r1, #0
   18914:	mov	r4, r0
   18918:	ldr	r5, [sp, #48]	; 0x30
   1891c:	ldr	r6, [sp, #52]	; 0x34
   18920:	beq	18c38 <__assert_fail@plt+0x7968>
   18924:	stm	sp, {r2, r3}
   18928:	mov	r3, r1
   1892c:	ldr	r2, [pc, #808]	; 18c5c <__assert_fail@plt+0x798c>
   18930:	mov	r1, #1
   18934:	bl	111bc <__fprintf_chk@plt>
   18938:	mov	r2, #5
   1893c:	ldr	r1, [pc, #796]	; 18c60 <__assert_fail@plt+0x7990>
   18940:	mov	r0, #0
   18944:	bl	11060 <dcgettext@plt>
   18948:	ldr	r3, [pc, #788]	; 18c64 <__assert_fail@plt+0x7994>
   1894c:	ldr	r2, [pc, #788]	; 18c68 <__assert_fail@plt+0x7998>
   18950:	str	r3, [sp]
   18954:	mov	r1, #1
   18958:	mov	r3, r0
   1895c:	mov	r0, r4
   18960:	bl	111bc <__fprintf_chk@plt>
   18964:	mov	r1, r4
   18968:	mov	r0, #10
   1896c:	bl	11054 <fputc_unlocked@plt>
   18970:	mov	r2, #5
   18974:	ldr	r1, [pc, #752]	; 18c6c <__assert_fail@plt+0x799c>
   18978:	mov	r0, #0
   1897c:	bl	11060 <dcgettext@plt>
   18980:	mov	r1, #1
   18984:	ldr	r3, [pc, #740]	; 18c70 <__assert_fail@plt+0x79a0>
   18988:	mov	r2, r0
   1898c:	mov	r0, r4
   18990:	bl	111bc <__fprintf_chk@plt>
   18994:	mov	r1, r4
   18998:	mov	r0, #10
   1899c:	bl	11054 <fputc_unlocked@plt>
   189a0:	cmp	r6, #9
   189a4:	ldrls	pc, [pc, r6, lsl #2]
   189a8:	b	18c50 <__assert_fail@plt+0x7980>
   189ac:	andeq	r8, r1, r0, lsr sl
   189b0:	andeq	r8, r1, r8, lsr sl
   189b4:	andeq	r8, r1, r4, ror #20
   189b8:	muleq	r1, r8, sl
   189bc:	ldrdeq	r8, [r1], -r4
   189c0:	andeq	r8, r1, r0, lsl fp
   189c4:	andeq	r8, r1, ip, asr #22
   189c8:	muleq	r1, r0, fp
   189cc:	andeq	r8, r1, r0, ror #23
   189d0:	ldrdeq	r8, [r1], -r4
   189d4:	ldr	r1, [pc, #664]	; 18c74 <__assert_fail@plt+0x79a4>
   189d8:	mov	r2, #5
   189dc:	mov	r0, #0
   189e0:	bl	11060 <dcgettext@plt>
   189e4:	ldr	ip, [r5, #32]
   189e8:	ldr	r1, [r5, #28]
   189ec:	ldr	r2, [r5, #24]
   189f0:	ldr	r3, [r5]
   189f4:	ldr	r6, [r5, #20]
   189f8:	str	ip, [sp, #28]
   189fc:	ldr	lr, [r5, #16]
   18a00:	str	r1, [sp, #24]
   18a04:	ldr	ip, [r5, #12]
   18a08:	str	r2, [sp, #20]
   18a0c:	ldr	r1, [r5, #8]
   18a10:	ldr	r2, [r5, #4]
   18a14:	str	r6, [sp, #16]
   18a18:	stmib	sp, {r1, ip, lr}
   18a1c:	mov	r1, #1
   18a20:	str	r2, [sp]
   18a24:	mov	r2, r0
   18a28:	mov	r0, r4
   18a2c:	bl	111bc <__fprintf_chk@plt>
   18a30:	add	sp, sp, #32
   18a34:	pop	{r4, r5, r6, pc}
   18a38:	mov	r2, #5
   18a3c:	ldr	r1, [pc, #564]	; 18c78 <__assert_fail@plt+0x79a8>
   18a40:	mov	r0, #0
   18a44:	bl	11060 <dcgettext@plt>
   18a48:	ldr	r3, [r5]
   18a4c:	mov	r1, #1
   18a50:	mov	r2, r0
   18a54:	mov	r0, r4
   18a58:	add	sp, sp, #32
   18a5c:	pop	{r4, r5, r6, lr}
   18a60:	b	111bc <__fprintf_chk@plt>
   18a64:	mov	r2, #5
   18a68:	ldr	r1, [pc, #524]	; 18c7c <__assert_fail@plt+0x79ac>
   18a6c:	mov	r0, #0
   18a70:	bl	11060 <dcgettext@plt>
   18a74:	ldr	r2, [r5, #4]
   18a78:	ldr	r3, [r5]
   18a7c:	mov	r1, #1
   18a80:	str	r2, [sp, #48]	; 0x30
   18a84:	mov	r2, r0
   18a88:	mov	r0, r4
   18a8c:	add	sp, sp, #32
   18a90:	pop	{r4, r5, r6, lr}
   18a94:	b	111bc <__fprintf_chk@plt>
   18a98:	mov	r2, #5
   18a9c:	ldr	r1, [pc, #476]	; 18c80 <__assert_fail@plt+0x79b0>
   18aa0:	mov	r0, #0
   18aa4:	bl	11060 <dcgettext@plt>
   18aa8:	ldr	r1, [r5, #8]
   18aac:	ldr	r2, [r5, #4]
   18ab0:	ldr	r3, [r5]
   18ab4:	str	r1, [sp, #52]	; 0x34
   18ab8:	str	r2, [sp, #48]	; 0x30
   18abc:	mov	r1, #1
   18ac0:	mov	r2, r0
   18ac4:	mov	r0, r4
   18ac8:	add	sp, sp, #32
   18acc:	pop	{r4, r5, r6, lr}
   18ad0:	b	111bc <__fprintf_chk@plt>
   18ad4:	mov	r2, #5
   18ad8:	ldr	r1, [pc, #420]	; 18c84 <__assert_fail@plt+0x79b4>
   18adc:	mov	r0, #0
   18ae0:	bl	11060 <dcgettext@plt>
   18ae4:	ldr	r1, [r5, #8]
   18ae8:	ldr	ip, [r5, #12]
   18aec:	ldr	r2, [r5, #4]
   18af0:	ldr	r3, [r5]
   18af4:	stmib	sp, {r1, ip}
   18af8:	str	r2, [sp]
   18afc:	mov	r1, #1
   18b00:	mov	r2, r0
   18b04:	mov	r0, r4
   18b08:	bl	111bc <__fprintf_chk@plt>
   18b0c:	b	18a30 <__assert_fail@plt+0x7760>
   18b10:	mov	r2, #5
   18b14:	ldr	r1, [pc, #364]	; 18c88 <__assert_fail@plt+0x79b8>
   18b18:	mov	r0, #0
   18b1c:	bl	11060 <dcgettext@plt>
   18b20:	add	r1, r5, #8
   18b24:	ldr	r2, [r5, #4]
   18b28:	ldm	r1, {r1, ip, lr}
   18b2c:	ldr	r3, [r5]
   18b30:	str	r2, [sp]
   18b34:	stmib	sp, {r1, ip, lr}
   18b38:	mov	r1, #1
   18b3c:	mov	r2, r0
   18b40:	mov	r0, r4
   18b44:	bl	111bc <__fprintf_chk@plt>
   18b48:	b	18a30 <__assert_fail@plt+0x7760>
   18b4c:	mov	r2, #5
   18b50:	ldr	r1, [pc, #308]	; 18c8c <__assert_fail@plt+0x79bc>
   18b54:	mov	r0, #0
   18b58:	bl	11060 <dcgettext@plt>
   18b5c:	add	r1, r5, #8
   18b60:	ldr	r2, [r5, #4]
   18b64:	ldm	r1, {r1, ip, lr}
   18b68:	ldr	r6, [r5, #20]
   18b6c:	ldr	r3, [r5]
   18b70:	stmib	sp, {r1, ip, lr}
   18b74:	mov	r1, #1
   18b78:	str	r2, [sp]
   18b7c:	str	r6, [sp, #16]
   18b80:	mov	r2, r0
   18b84:	mov	r0, r4
   18b88:	bl	111bc <__fprintf_chk@plt>
   18b8c:	b	18a30 <__assert_fail@plt+0x7760>
   18b90:	mov	r2, #5
   18b94:	ldr	r1, [pc, #244]	; 18c90 <__assert_fail@plt+0x79c0>
   18b98:	mov	r0, #0
   18b9c:	bl	11060 <dcgettext@plt>
   18ba0:	ldr	r2, [r5, #24]
   18ba4:	ldr	r3, [r5]
   18ba8:	ldr	r6, [r5, #20]
   18bac:	ldr	lr, [r5, #16]
   18bb0:	ldr	ip, [r5, #12]
   18bb4:	str	r2, [sp, #20]
   18bb8:	ldr	r1, [r5, #8]
   18bbc:	ldr	r2, [r5, #4]
   18bc0:	str	r6, [sp, #16]
   18bc4:	stmib	sp, {r1, ip, lr}
   18bc8:	mov	r1, #1
   18bcc:	str	r2, [sp]
   18bd0:	mov	r2, r0
   18bd4:	mov	r0, r4
   18bd8:	bl	111bc <__fprintf_chk@plt>
   18bdc:	b	18a30 <__assert_fail@plt+0x7760>
   18be0:	mov	r2, #5
   18be4:	ldr	r1, [pc, #168]	; 18c94 <__assert_fail@plt+0x79c4>
   18be8:	mov	r0, #0
   18bec:	bl	11060 <dcgettext@plt>
   18bf0:	ldr	r1, [r5, #28]
   18bf4:	ldr	r2, [r5, #24]
   18bf8:	ldr	r3, [r5]
   18bfc:	ldr	r6, [r5, #20]
   18c00:	ldr	lr, [r5, #16]
   18c04:	str	r1, [sp, #24]
   18c08:	ldr	ip, [r5, #12]
   18c0c:	str	r2, [sp, #20]
   18c10:	ldr	r1, [r5, #8]
   18c14:	ldr	r2, [r5, #4]
   18c18:	str	r6, [sp, #16]
   18c1c:	stmib	sp, {r1, ip, lr}
   18c20:	mov	r1, #1
   18c24:	str	r2, [sp]
   18c28:	mov	r2, r0
   18c2c:	mov	r0, r4
   18c30:	bl	111bc <__fprintf_chk@plt>
   18c34:	b	18a30 <__assert_fail@plt+0x7760>
   18c38:	str	r3, [sp]
   18c3c:	mov	r1, #1
   18c40:	mov	r3, r2
   18c44:	ldr	r2, [pc, #76]	; 18c98 <__assert_fail@plt+0x79c8>
   18c48:	bl	111bc <__fprintf_chk@plt>
   18c4c:	b	18938 <__assert_fail@plt+0x7668>
   18c50:	mov	r2, #5
   18c54:	ldr	r1, [pc, #64]	; 18c9c <__assert_fail@plt+0x79cc>
   18c58:	b	189dc <__assert_fail@plt+0x770c>
   18c5c:	andeq	fp, r1, r0, ror #9
   18c60:	strdeq	fp, [r1], -r4
   18c64:	andeq	r0, r0, r6, ror #15
   18c68:			; <UNDEFINED> instruction: 0x0001b7b4
   18c6c:	strdeq	fp, [r1], -r8
   18c70:	andeq	fp, r1, r4, lsr #11
   18c74:	ldrdeq	fp, [r1], -r4
   18c78:	andeq	fp, r1, r8, asr #11
   18c7c:	ldrdeq	fp, [r1], -r8
   18c80:	strdeq	fp, [r1], -r0
   18c84:	andeq	fp, r1, ip, lsl #12
   18c88:	andeq	fp, r1, ip, lsr #12
   18c8c:	andeq	fp, r1, r0, asr r6
   18c90:	andeq	fp, r1, r8, ror r6
   18c94:	andeq	fp, r1, r4, lsr #13
   18c98:	andeq	fp, r1, ip, ror #9
   18c9c:	andeq	fp, r1, r8, lsl #14
   18ca0:	push	{r4, r5, lr}
   18ca4:	sub	sp, sp, #12
   18ca8:	ldr	r5, [sp, #24]
   18cac:	ldr	ip, [r5]
   18cb0:	cmp	ip, #0
   18cb4:	beq	18cd0 <__assert_fail@plt+0x7a00>
   18cb8:	mov	lr, r5
   18cbc:	mov	ip, #0
   18cc0:	ldr	r4, [lr, #4]!
   18cc4:	add	ip, ip, #1
   18cc8:	cmp	r4, #0
   18ccc:	bne	18cc0 <__assert_fail@plt+0x79f0>
   18cd0:	stm	sp, {r5, ip}
   18cd4:	bl	18908 <__assert_fail@plt+0x7638>
   18cd8:	add	sp, sp, #12
   18cdc:	pop	{r4, r5, pc}
   18ce0:	push	{r4, r5, lr}
   18ce4:	sub	sp, sp, #52	; 0x34
   18ce8:	add	r5, sp, #4
   18cec:	ldr	r4, [sp, #64]	; 0x40
   18cf0:	mov	ip, #0
   18cf4:	sub	r4, r4, #4
   18cf8:	ldr	lr, [r4, #4]!
   18cfc:	cmp	lr, #0
   18d00:	str	lr, [r5, #4]!
   18d04:	beq	18d14 <__assert_fail@plt+0x7a44>
   18d08:	add	ip, ip, #1
   18d0c:	cmp	ip, #10
   18d10:	bne	18cf8 <__assert_fail@plt+0x7a28>
   18d14:	add	lr, sp, #8
   18d18:	str	ip, [sp, #4]
   18d1c:	str	lr, [sp]
   18d20:	bl	18908 <__assert_fail@plt+0x7638>
   18d24:	add	sp, sp, #52	; 0x34
   18d28:	pop	{r4, r5, pc}
   18d2c:	push	{r3}		; (str r3, [sp, #-4]!)
   18d30:	push	{r4, lr}
   18d34:	sub	sp, sp, #60	; 0x3c
   18d38:	add	lr, sp, #56	; 0x38
   18d3c:	add	r3, sp, #72	; 0x48
   18d40:	str	r3, [lr, #-44]!	; 0xffffffd4
   18d44:	add	r4, sp, #68	; 0x44
   18d48:	mov	r3, #0
   18d4c:	ldr	ip, [r4, #4]!
   18d50:	cmp	ip, #0
   18d54:	str	ip, [lr, #4]!
   18d58:	beq	18d68 <__assert_fail@plt+0x7a98>
   18d5c:	add	r3, r3, #1
   18d60:	cmp	r3, #10
   18d64:	bne	18d4c <__assert_fail@plt+0x7a7c>
   18d68:	add	ip, sp, #16
   18d6c:	str	r3, [sp, #4]
   18d70:	str	ip, [sp]
   18d74:	ldr	r3, [sp, #68]	; 0x44
   18d78:	bl	18908 <__assert_fail@plt+0x7638>
   18d7c:	add	sp, sp, #60	; 0x3c
   18d80:	pop	{r4, lr}
   18d84:	add	sp, sp, #4
   18d88:	bx	lr
   18d8c:	ldr	r3, [pc, #116]	; 18e08 <__assert_fail@plt+0x7b38>
   18d90:	push	{r4, lr}
   18d94:	mov	r0, #10
   18d98:	ldr	r1, [r3]
   18d9c:	bl	11054 <fputc_unlocked@plt>
   18da0:	mov	r2, #5
   18da4:	ldr	r1, [pc, #96]	; 18e0c <__assert_fail@plt+0x7b3c>
   18da8:	mov	r0, #0
   18dac:	bl	11060 <dcgettext@plt>
   18db0:	ldr	r2, [pc, #88]	; 18e10 <__assert_fail@plt+0x7b40>
   18db4:	mov	r1, r0
   18db8:	mov	r0, #1
   18dbc:	bl	111a4 <__printf_chk@plt>
   18dc0:	mov	r2, #5
   18dc4:	ldr	r1, [pc, #72]	; 18e14 <__assert_fail@plt+0x7b44>
   18dc8:	mov	r0, #0
   18dcc:	bl	11060 <dcgettext@plt>
   18dd0:	ldr	r3, [pc, #64]	; 18e18 <__assert_fail@plt+0x7b48>
   18dd4:	ldr	r2, [pc, #64]	; 18e1c <__assert_fail@plt+0x7b4c>
   18dd8:	mov	r1, r0
   18ddc:	mov	r0, #1
   18de0:	bl	111a4 <__printf_chk@plt>
   18de4:	mov	r2, #5
   18de8:	ldr	r1, [pc, #48]	; 18e20 <__assert_fail@plt+0x7b50>
   18dec:	mov	r0, #0
   18df0:	bl	11060 <dcgettext@plt>
   18df4:	ldr	r2, [pc, #40]	; 18e24 <__assert_fail@plt+0x7b54>
   18df8:	pop	{r4, lr}
   18dfc:	mov	r1, r0
   18e00:	mov	r0, #1
   18e04:	b	111a4 <__printf_chk@plt>
   18e08:	muleq	r2, r4, r1
   18e0c:	andeq	fp, r1, r4, asr #14
   18e10:	andeq	fp, r1, r4, lsr #3
   18e14:	andeq	fp, r1, r8, asr r7
   18e18:	muleq	r1, r0, sl
   18e1c:			; <UNDEFINED> instruction: 0x0001aab8
   18e20:	andeq	fp, r1, ip, ror #14
   18e24:	muleq	r1, r4, r7
   18e28:	push	{r4, lr}
   18e2c:	ldr	r4, [pc, #44]	; 18e60 <__assert_fail@plt+0x7b90>
   18e30:	ldrb	r3, [r4]
   18e34:	cmp	r3, #0
   18e38:	beq	18e44 <__assert_fail@plt+0x7b74>
   18e3c:	ldrb	r0, [r4, #1]
   18e40:	pop	{r4, pc}
   18e44:	bl	11084 <geteuid@plt>
   18e48:	mov	r3, #1
   18e4c:	strb	r3, [r4]
   18e50:	clz	r0, r0
   18e54:	lsr	r0, r0, #5
   18e58:	strb	r0, [r4, #1]
   18e5c:	pop	{r4, pc}
   18e60:	strdeq	ip, [r2], -r0
   18e64:	push	{r4, lr}
   18e68:	bl	19528 <__assert_fail@plt+0x8258>
   18e6c:	cmp	r0, #0
   18e70:	popne	{r4, pc}
   18e74:	bl	193ac <__assert_fail@plt+0x80dc>
   18e78:	push	{r4, lr}
   18e7c:	bl	19528 <__assert_fail@plt+0x8258>
   18e80:	cmp	r0, #0
   18e84:	popne	{r4, pc}
   18e88:	bl	193ac <__assert_fail@plt+0x80dc>
   18e8c:	push	{r4, lr}
   18e90:	bl	19528 <__assert_fail@plt+0x8258>
   18e94:	cmp	r0, #0
   18e98:	popne	{r4, pc}
   18e9c:	bl	193ac <__assert_fail@plt+0x80dc>
   18ea0:	push	{r4, r5, r6, lr}
   18ea4:	mov	r5, r0
   18ea8:	mov	r4, r1
   18eac:	bl	19554 <__assert_fail@plt+0x8284>
   18eb0:	cmp	r0, #0
   18eb4:	popne	{r4, r5, r6, pc}
   18eb8:	adds	r4, r4, #0
   18ebc:	movne	r4, #1
   18ec0:	cmp	r5, #0
   18ec4:	orreq	r4, r4, #1
   18ec8:	cmp	r4, #0
   18ecc:	popeq	{r4, r5, r6, pc}
   18ed0:	bl	193ac <__assert_fail@plt+0x80dc>
   18ed4:	push	{r4, lr}
   18ed8:	cmp	r1, #0
   18edc:	orreq	r1, r1, #1
   18ee0:	bl	19554 <__assert_fail@plt+0x8284>
   18ee4:	cmp	r0, #0
   18ee8:	popne	{r4, pc}
   18eec:	bl	193ac <__assert_fail@plt+0x80dc>
   18ef0:	push	{r4, r5, r6, lr}
   18ef4:	mov	r6, r0
   18ef8:	mov	r5, r1
   18efc:	mov	r4, r2
   18f00:	bl	19a50 <__assert_fail@plt+0x8780>
   18f04:	cmp	r0, #0
   18f08:	popne	{r4, r5, r6, pc}
   18f0c:	cmp	r6, #0
   18f10:	beq	18f20 <__assert_fail@plt+0x7c50>
   18f14:	cmp	r5, #0
   18f18:	cmpne	r4, #0
   18f1c:	popeq	{r4, r5, r6, pc}
   18f20:	bl	193ac <__assert_fail@plt+0x80dc>
   18f24:	b	18ef0 <__assert_fail@plt+0x7c20>
   18f28:	cmp	r2, #0
   18f2c:	cmpne	r1, #0
   18f30:	moveq	r2, #1
   18f34:	moveq	r1, r2
   18f38:	push	{r4, lr}
   18f3c:	bl	19a50 <__assert_fail@plt+0x8780>
   18f40:	cmp	r0, #0
   18f44:	popne	{r4, pc}
   18f48:	bl	193ac <__assert_fail@plt+0x80dc>
   18f4c:	mov	r2, r1
   18f50:	mov	r1, r0
   18f54:	mov	r0, #0
   18f58:	b	18ef0 <__assert_fail@plt+0x7c20>
   18f5c:	mov	r2, r1
   18f60:	mov	r1, r0
   18f64:	mov	r0, #0
   18f68:	b	18f28 <__assert_fail@plt+0x7c58>
   18f6c:	push	{r4, r5, r6, lr}
   18f70:	subs	r6, r0, #0
   18f74:	sub	sp, sp, #8
   18f78:	mov	r5, r1
   18f7c:	ldr	r4, [r1]
   18f80:	beq	18fbc <__assert_fail@plt+0x7cec>
   18f84:	lsr	r1, r4, #1
   18f88:	add	r3, r1, #1
   18f8c:	mvn	r3, r3
   18f90:	cmp	r4, r3
   18f94:	bhi	18fb8 <__assert_fail@plt+0x7ce8>
   18f98:	add	r4, r4, #1
   18f9c:	add	r4, r4, r1
   18fa0:	mov	r0, r6
   18fa4:	mov	r1, r4
   18fa8:	bl	18ef0 <__assert_fail@plt+0x7c20>
   18fac:	str	r4, [r5]
   18fb0:	add	sp, sp, #8
   18fb4:	pop	{r4, r5, r6, pc}
   18fb8:	bl	193ac <__assert_fail@plt+0x80dc>
   18fbc:	cmp	r4, #0
   18fc0:	bne	18fa0 <__assert_fail@plt+0x7cd0>
   18fc4:	mov	r1, r2
   18fc8:	mov	r0, #64	; 0x40
   18fcc:	str	r2, [sp, #4]
   18fd0:	bl	19b9c <__assert_fail@plt+0x88cc>
   18fd4:	ldr	r2, [sp, #4]
   18fd8:	cmp	r0, #0
   18fdc:	movne	r4, r0
   18fe0:	addeq	r4, r0, #1
   18fe4:	b	18fa0 <__assert_fail@plt+0x7cd0>
   18fe8:	mov	r2, #1
   18fec:	b	18f6c <__assert_fail@plt+0x7c9c>
   18ff0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ff4:	sub	sp, sp, #12
   18ff8:	ldr	r6, [r1]
   18ffc:	mov	sl, r1
   19000:	mov	r9, r0
   19004:	asrs	r4, r6, #1
   19008:	mov	r5, r2
   1900c:	mov	fp, r3
   19010:	ldr	r7, [sp, #48]	; 0x30
   19014:	bmi	19180 <__assert_fail@plt+0x7eb0>
   19018:	mvn	r3, #-2147483648	; 0x80000000
   1901c:	sub	r3, r3, r4
   19020:	cmp	r6, r3
   19024:	movle	r3, #0
   19028:	movgt	r3, #1
   1902c:	mvn	r8, fp
   19030:	cmp	r3, #0
   19034:	addeq	r4, r4, r6
   19038:	mvnne	r4, #-2147483648	; 0x80000000
   1903c:	lsr	r8, r8, #31
   19040:	cmp	fp, r4
   19044:	movge	r3, #0
   19048:	andlt	r3, r8, #1
   1904c:	cmp	r3, #0
   19050:	beq	19138 <__assert_fail@plt+0x7e68>
   19054:	cmp	r7, #0
   19058:	blt	19208 <__assert_fail@plt+0x7f38>
   1905c:	bne	19200 <__assert_fail@plt+0x7f30>
   19060:	mov	r2, #64	; 0x40
   19064:	mov	r1, r7
   19068:	mov	r0, r2
   1906c:	str	r2, [sp, #4]
   19070:	bl	19da8 <__assert_fail@plt+0x8ad8>
   19074:	ldr	r2, [sp, #4]
   19078:	mov	r1, r7
   1907c:	mov	r4, r0
   19080:	mov	r0, r2
   19084:	bl	19fc8 <__assert_fail@plt+0x8cf8>
   19088:	ldr	r2, [sp, #4]
   1908c:	sub	r1, r2, r1
   19090:	cmp	r9, #0
   19094:	sub	r3, r4, r6
   19098:	streq	r9, [sl]
   1909c:	cmp	r3, r5
   190a0:	bge	19124 <__assert_fail@plt+0x7e54>
   190a4:	cmp	r5, #0
   190a8:	blt	19194 <__assert_fail@plt+0x7ec4>
   190ac:	cmp	r6, #0
   190b0:	blt	190d0 <__assert_fail@plt+0x7e00>
   190b4:	mvn	r3, #-2147483648	; 0x80000000
   190b8:	sub	r3, r3, r5
   190bc:	cmp	r6, r3
   190c0:	movle	r3, #0
   190c4:	movgt	r3, #1
   190c8:	cmp	r3, #0
   190cc:	bne	19290 <__assert_fail@plt+0x7fc0>
   190d0:	add	r5, r6, r5
   190d4:	cmp	fp, r5
   190d8:	movge	r8, #0
   190dc:	andlt	r8, r8, #1
   190e0:	cmp	r8, #0
   190e4:	mov	r4, r5
   190e8:	bne	19290 <__assert_fail@plt+0x7fc0>
   190ec:	cmp	r7, #0
   190f0:	blt	191a8 <__assert_fail@plt+0x7ed8>
   190f4:	beq	19120 <__assert_fail@plt+0x7e50>
   190f8:	cmp	r5, #0
   190fc:	blt	19250 <__assert_fail@plt+0x7f80>
   19100:	mov	r1, r7
   19104:	mvn	r0, #-2147483648	; 0x80000000
   19108:	bl	19da8 <__assert_fail@plt+0x8ad8>
   1910c:	cmp	r5, r0
   19110:	movle	r0, #0
   19114:	movgt	r0, #1
   19118:	cmp	r0, #0
   1911c:	bne	19290 <__assert_fail@plt+0x7fc0>
   19120:	mul	r1, r5, r7
   19124:	mov	r0, r9
   19128:	bl	18ea0 <__assert_fail@plt+0x7bd0>
   1912c:	str	r4, [sl]
   19130:	add	sp, sp, #12
   19134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19138:	cmp	r7, #0
   1913c:	blt	191d4 <__assert_fail@plt+0x7f04>
   19140:	beq	19060 <__assert_fail@plt+0x7d90>
   19144:	cmp	r4, #0
   19148:	blt	19210 <__assert_fail@plt+0x7f40>
   1914c:	mov	r1, r7
   19150:	mvn	r0, #-2147483648	; 0x80000000
   19154:	bl	19da8 <__assert_fail@plt+0x8ad8>
   19158:	cmp	r0, r4
   1915c:	movge	r0, #0
   19160:	movlt	r0, #1
   19164:	cmp	r0, #0
   19168:	mvnne	r2, #-2147483648	; 0x80000000
   1916c:	bne	19064 <__assert_fail@plt+0x7d94>
   19170:	mul	r1, r7, r4
   19174:	cmp	r1, #63	; 0x3f
   19178:	bgt	19090 <__assert_fail@plt+0x7dc0>
   1917c:	b	19060 <__assert_fail@plt+0x7d90>
   19180:	rsb	r3, r4, #-2147483648	; 0x80000000
   19184:	cmp	r6, r3
   19188:	movge	r3, #0
   1918c:	movlt	r3, #1
   19190:	b	1902c <__assert_fail@plt+0x7d5c>
   19194:	rsb	r3, r5, #-2147483648	; 0x80000000
   19198:	cmp	r6, r3
   1919c:	movge	r3, #0
   191a0:	movlt	r3, #1
   191a4:	b	190c8 <__assert_fail@plt+0x7df8>
   191a8:	cmp	r5, #0
   191ac:	blt	19234 <__assert_fail@plt+0x7f64>
   191b0:	cmn	r7, #1
   191b4:	beq	19120 <__assert_fail@plt+0x7e50>
   191b8:	mov	r1, r7
   191bc:	mov	r0, #-2147483648	; 0x80000000
   191c0:	bl	19da8 <__assert_fail@plt+0x8ad8>
   191c4:	cmp	r5, r0
   191c8:	movle	r0, #0
   191cc:	movgt	r0, #1
   191d0:	b	19118 <__assert_fail@plt+0x7e48>
   191d4:	cmp	r4, #0
   191d8:	blt	19274 <__assert_fail@plt+0x7fa4>
   191dc:	cmn	r7, #1
   191e0:	beq	19170 <__assert_fail@plt+0x7ea0>
   191e4:	mov	r1, r7
   191e8:	mov	r0, #-2147483648	; 0x80000000
   191ec:	bl	19da8 <__assert_fail@plt+0x8ad8>
   191f0:	cmp	r0, r4
   191f4:	movge	r0, #0
   191f8:	movlt	r0, #1
   191fc:	b	19164 <__assert_fail@plt+0x7e94>
   19200:	mov	r4, fp
   19204:	b	1914c <__assert_fail@plt+0x7e7c>
   19208:	mov	r4, fp
   1920c:	b	191dc <__assert_fail@plt+0x7f0c>
   19210:	cmn	r4, #1
   19214:	beq	19170 <__assert_fail@plt+0x7ea0>
   19218:	mov	r1, r4
   1921c:	mov	r0, #-2147483648	; 0x80000000
   19220:	bl	19da8 <__assert_fail@plt+0x8ad8>
   19224:	cmp	r7, r0
   19228:	movle	r0, #0
   1922c:	movgt	r0, #1
   19230:	b	19164 <__assert_fail@plt+0x7e94>
   19234:	mov	r1, r7
   19238:	mvn	r0, #-2147483648	; 0x80000000
   1923c:	bl	19da8 <__assert_fail@plt+0x8ad8>
   19240:	cmp	r5, r0
   19244:	movge	r0, #0
   19248:	movlt	r0, #1
   1924c:	b	19118 <__assert_fail@plt+0x7e48>
   19250:	cmn	r5, #1
   19254:	beq	19120 <__assert_fail@plt+0x7e50>
   19258:	mov	r1, r5
   1925c:	mov	r0, #-2147483648	; 0x80000000
   19260:	bl	19da8 <__assert_fail@plt+0x8ad8>
   19264:	cmp	r7, r0
   19268:	movle	r0, #0
   1926c:	movgt	r0, #1
   19270:	b	19118 <__assert_fail@plt+0x7e48>
   19274:	mov	r1, r7
   19278:	mvn	r0, #-2147483648	; 0x80000000
   1927c:	bl	19da8 <__assert_fail@plt+0x8ad8>
   19280:	cmp	r0, r4
   19284:	movle	r0, #0
   19288:	movgt	r0, #1
   1928c:	b	19164 <__assert_fail@plt+0x7e94>
   19290:	bl	193ac <__assert_fail@plt+0x80dc>
   19294:	push	{r4, lr}
   19298:	mov	r1, #1
   1929c:	bl	194e0 <__assert_fail@plt+0x8210>
   192a0:	cmp	r0, #0
   192a4:	popne	{r4, pc}
   192a8:	bl	193ac <__assert_fail@plt+0x80dc>
   192ac:	push	{r4, lr}
   192b0:	mov	r1, #1
   192b4:	bl	194e0 <__assert_fail@plt+0x8210>
   192b8:	cmp	r0, #0
   192bc:	popne	{r4, pc}
   192c0:	bl	193ac <__assert_fail@plt+0x80dc>
   192c4:	push	{r4, lr}
   192c8:	bl	194e0 <__assert_fail@plt+0x8210>
   192cc:	cmp	r0, #0
   192d0:	popne	{r4, pc}
   192d4:	bl	193ac <__assert_fail@plt+0x80dc>
   192d8:	push	{r4, lr}
   192dc:	bl	194e0 <__assert_fail@plt+0x8210>
   192e0:	cmp	r0, #0
   192e4:	popne	{r4, pc}
   192e8:	bl	193ac <__assert_fail@plt+0x80dc>
   192ec:	push	{r4, r5, r6, lr}
   192f0:	mov	r6, r0
   192f4:	mov	r0, r1
   192f8:	mov	r4, r1
   192fc:	bl	19528 <__assert_fail@plt+0x8258>
   19300:	subs	r5, r0, #0
   19304:	beq	1931c <__assert_fail@plt+0x804c>
   19308:	mov	r2, r4
   1930c:	mov	r1, r6
   19310:	bl	11030 <memcpy@plt>
   19314:	mov	r0, r5
   19318:	pop	{r4, r5, r6, pc}
   1931c:	bl	193ac <__assert_fail@plt+0x80dc>
   19320:	push	{r4, r5, r6, lr}
   19324:	mov	r6, r0
   19328:	mov	r0, r1
   1932c:	mov	r4, r1
   19330:	bl	19528 <__assert_fail@plt+0x8258>
   19334:	subs	r5, r0, #0
   19338:	beq	19350 <__assert_fail@plt+0x8080>
   1933c:	mov	r2, r4
   19340:	mov	r1, r6
   19344:	bl	11030 <memcpy@plt>
   19348:	mov	r0, r5
   1934c:	pop	{r4, r5, r6, pc}
   19350:	bl	193ac <__assert_fail@plt+0x80dc>
   19354:	push	{r4, r5, r6, lr}
   19358:	mov	r6, r0
   1935c:	add	r0, r1, #1
   19360:	mov	r4, r1
   19364:	bl	19528 <__assert_fail@plt+0x8258>
   19368:	subs	r5, r0, #0
   1936c:	beq	1938c <__assert_fail@plt+0x80bc>
   19370:	mov	r3, #0
   19374:	mov	r1, r6
   19378:	strb	r3, [r5, r4]
   1937c:	mov	r2, r4
   19380:	bl	11030 <memcpy@plt>
   19384:	mov	r0, r5
   19388:	pop	{r4, r5, r6, pc}
   1938c:	bl	193ac <__assert_fail@plt+0x80dc>
   19390:	push	{r4, lr}
   19394:	mov	r4, r0
   19398:	bl	11168 <strlen@plt>
   1939c:	add	r1, r0, #1
   193a0:	mov	r0, r4
   193a4:	pop	{r4, lr}
   193a8:	b	192ec <__assert_fail@plt+0x801c>
   193ac:	ldr	r3, [pc, #44]	; 193e0 <__assert_fail@plt+0x8110>
   193b0:	push	{r4, lr}
   193b4:	mov	r2, #5
   193b8:	ldr	r1, [pc, #36]	; 193e4 <__assert_fail@plt+0x8114>
   193bc:	mov	r0, #0
   193c0:	ldr	r4, [r3]
   193c4:	bl	11060 <dcgettext@plt>
   193c8:	ldr	r2, [pc, #24]	; 193e8 <__assert_fail@plt+0x8118>
   193cc:	mov	r1, #0
   193d0:	mov	r3, r0
   193d4:	mov	r0, r4
   193d8:	bl	110f0 <error@plt>
   193dc:	bl	11294 <abort@plt>
   193e0:	andeq	ip, r2, r4, lsr r1
   193e4:	andeq	fp, r1, r4, ror #15
   193e8:	andeq	fp, r1, r0, lsl #5
   193ec:	push	{r4, lr}
   193f0:	orr	r1, r1, #512	; 0x200
   193f4:	bl	14b58 <__assert_fail@plt+0x3888>
   193f8:	cmp	r0, #0
   193fc:	popne	{r4, pc}
   19400:	bl	11180 <__errno_location@plt>
   19404:	ldr	r3, [r0]
   19408:	cmp	r3, #22
   1940c:	beq	19414 <__assert_fail@plt+0x8144>
   19410:	bl	193ac <__assert_fail@plt+0x80dc>
   19414:	ldr	r3, [pc, #12]	; 19428 <__assert_fail@plt+0x8158>
   19418:	mov	r2, #41	; 0x29
   1941c:	ldr	r1, [pc, #8]	; 1942c <__assert_fail@plt+0x815c>
   19420:	ldr	r0, [pc, #8]	; 19430 <__assert_fail@plt+0x8160>
   19424:	bl	112d0 <__assert_fail@plt>
   19428:	strdeq	fp, [r1], -r8
   1942c:	andeq	fp, r1, r4, lsl #16
   19430:	andeq	fp, r1, r0, lsl r8
   19434:	ldr	r3, [r0, #48]	; 0x30
   19438:	and	r3, r3, #17
   1943c:	cmp	r3, #16
   19440:	beq	19464 <__assert_fail@plt+0x8194>
   19444:	cmp	r3, #17
   19448:	beq	19454 <__assert_fail@plt+0x8184>
   1944c:	mov	r0, #0
   19450:	bx	lr
   19454:	ldr	r0, [r1, #48]	; 0x30
   19458:	adds	r0, r0, #0
   1945c:	movne	r0, #1
   19460:	bx	lr
   19464:	mov	r0, #1
   19468:	bx	lr
   1946c:	push	{r4, lr}
   19470:	sub	sp, sp, #8
   19474:	ldr	r3, [pc, #96]	; 194dc <__assert_fail@plt+0x820c>
   19478:	add	r1, sp, #8
   1947c:	mov	r4, #0
   19480:	ldr	r3, [r3]
   19484:	str	r4, [r1, #-4]!
   19488:	mov	r2, #10
   1948c:	mov	r0, sp
   19490:	str	r4, [sp]
   19494:	bl	10fd0 <__getdelim@plt>
   19498:	subs	r3, r0, #0
   1949c:	ble	194c8 <__assert_fail@plt+0x81f8>
   194a0:	ldr	r0, [sp]
   194a4:	sub	r3, r3, #1
   194a8:	ldrb	r2, [r0, r3]
   194ac:	cmp	r2, #10
   194b0:	strbeq	r4, [r0, r3]
   194b4:	ldreq	r0, [sp]
   194b8:	bl	111ec <rpmatch@plt>
   194bc:	cmp	r0, #0
   194c0:	movle	r4, #0
   194c4:	movgt	r4, #1
   194c8:	ldr	r0, [sp]
   194cc:	bl	13684 <__assert_fail@plt+0x23b4>
   194d0:	mov	r0, r4
   194d4:	add	sp, sp, #8
   194d8:	pop	{r4, pc}
   194dc:	muleq	r2, r0, r1
   194e0:	cmp	r1, #0
   194e4:	cmpne	r0, #0
   194e8:	moveq	r1, #1
   194ec:	moveq	r0, r1
   194f0:	umull	r2, r3, r0, r1
   194f4:	adds	r3, r3, #0
   194f8:	movne	r3, #1
   194fc:	cmp	r2, #0
   19500:	blt	19510 <__assert_fail@plt+0x8240>
   19504:	cmp	r3, #0
   19508:	bne	19510 <__assert_fail@plt+0x8240>
   1950c:	b	10fac <calloc@plt>
   19510:	push	{r4, lr}
   19514:	bl	11180 <__errno_location@plt>
   19518:	mov	r3, #12
   1951c:	str	r3, [r0]
   19520:	mov	r0, #0
   19524:	pop	{r4, pc}
   19528:	cmp	r0, #0
   1952c:	moveq	r0, #1
   19530:	cmp	r0, #0
   19534:	blt	1953c <__assert_fail@plt+0x826c>
   19538:	b	11108 <malloc@plt>
   1953c:	push	{r4, lr}
   19540:	bl	11180 <__errno_location@plt>
   19544:	mov	r3, #12
   19548:	str	r3, [r0]
   1954c:	mov	r0, #0
   19550:	pop	{r4, pc}
   19554:	cmp	r0, #0
   19558:	beq	1957c <__assert_fail@plt+0x82ac>
   1955c:	cmp	r1, #0
   19560:	push	{lr}		; (str lr, [sp, #-4]!)
   19564:	sub	sp, sp, #12
   19568:	beq	19584 <__assert_fail@plt+0x82b4>
   1956c:	blt	1959c <__assert_fail@plt+0x82cc>
   19570:	add	sp, sp, #12
   19574:	pop	{lr}		; (ldr lr, [sp], #4)
   19578:	b	1106c <realloc@plt>
   1957c:	mov	r0, r1
   19580:	b	19528 <__assert_fail@plt+0x8258>
   19584:	str	r1, [sp, #4]
   19588:	bl	13684 <__assert_fail@plt+0x23b4>
   1958c:	ldr	r3, [sp, #4]
   19590:	mov	r0, r3
   19594:	add	sp, sp, #12
   19598:	pop	{pc}		; (ldr pc, [sp], #4)
   1959c:	bl	11180 <__errno_location@plt>
   195a0:	mov	r2, #12
   195a4:	mov	r3, #0
   195a8:	str	r2, [r0]
   195ac:	b	19590 <__assert_fail@plt+0x82c0>
   195b0:	push	{r4, r5, r6, lr}
   195b4:	mov	r4, r0
   195b8:	bl	110d8 <__fpending@plt>
   195bc:	ldr	r5, [r4]
   195c0:	and	r5, r5, #32
   195c4:	mov	r6, r0
   195c8:	mov	r0, r4
   195cc:	bl	1971c <__assert_fail@plt+0x844c>
   195d0:	cmp	r5, #0
   195d4:	mov	r4, r0
   195d8:	bne	195f8 <__assert_fail@plt+0x8328>
   195dc:	cmp	r0, #0
   195e0:	beq	195f0 <__assert_fail@plt+0x8320>
   195e4:	cmp	r6, #0
   195e8:	beq	19614 <__assert_fail@plt+0x8344>
   195ec:	mvn	r4, #0
   195f0:	mov	r0, r4
   195f4:	pop	{r4, r5, r6, pc}
   195f8:	cmp	r0, #0
   195fc:	bne	195ec <__assert_fail@plt+0x831c>
   19600:	bl	11180 <__errno_location@plt>
   19604:	str	r4, [r0]
   19608:	mvn	r4, #0
   1960c:	mov	r0, r4
   19610:	pop	{r4, r5, r6, pc}
   19614:	bl	11180 <__errno_location@plt>
   19618:	ldr	r4, [r0]
   1961c:	subs	r4, r4, #9
   19620:	mvnne	r4, #0
   19624:	mov	r0, r4
   19628:	pop	{r4, r5, r6, pc}
   1962c:	push	{r4, r5}
   19630:	mov	r4, #0
   19634:	mov	r5, #0
   19638:	ldr	r3, [pc, #12]	; 1964c <__assert_fail@plt+0x837c>
   1963c:	strd	r4, [r0, #16]
   19640:	str	r3, [r0, #24]
   19644:	pop	{r4, r5}
   19648:	bx	lr
   1964c:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   19650:	ldr	r3, [pc, #180]	; 1970c <__assert_fail@plt+0x843c>
   19654:	ldr	r2, [r0, #24]
   19658:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1965c:	cmp	r2, r3
   19660:	bne	196f8 <__assert_fail@plt+0x8428>
   19664:	ldrd	r6, [r0, #16]
   19668:	orrs	r3, r6, r7
   1966c:	bne	19698 <__assert_fail@plt+0x83c8>
   19670:	mov	r2, #1
   19674:	mov	r3, #0
   19678:	ldrd	r8, [r1, #96]	; 0x60
   1967c:	strd	r2, [r0, #16]
   19680:	ldrd	r2, [r1]
   19684:	mov	r1, #0
   19688:	strd	r8, [r0]
   1968c:	strd	r2, [r0, #8]
   19690:	mov	r0, r1
   19694:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19698:	ldrd	r8, [r1, #96]	; 0x60
   1969c:	ldrd	r2, [r0]
   196a0:	cmp	r9, r3
   196a4:	cmpeq	r8, r2
   196a8:	beq	196e0 <__assert_fail@plt+0x8410>
   196ac:	adds	r2, r6, #1
   196b0:	adc	r3, r7, #0
   196b4:	and	r6, r6, r2
   196b8:	and	r7, r7, r3
   196bc:	orrs	ip, r6, r7
   196c0:	strd	r2, [r0, #16]
   196c4:	movne	r1, #0
   196c8:	bne	19690 <__assert_fail@plt+0x83c0>
   196cc:	orrs	r3, r2, r3
   196d0:	bne	19680 <__assert_fail@plt+0x83b0>
   196d4:	mov	r1, #1
   196d8:	mov	r0, r1
   196dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   196e0:	ldrd	r4, [r1]
   196e4:	ldrd	r2, [r0, #8]
   196e8:	cmp	r5, r3
   196ec:	cmpeq	r4, r2
   196f0:	bne	196ac <__assert_fail@plt+0x83dc>
   196f4:	b	196d4 <__assert_fail@plt+0x8404>
   196f8:	ldr	r3, [pc, #16]	; 19710 <__assert_fail@plt+0x8440>
   196fc:	mov	r2, #60	; 0x3c
   19700:	ldr	r1, [pc, #12]	; 19714 <__assert_fail@plt+0x8444>
   19704:	ldr	r0, [pc, #12]	; 19718 <__assert_fail@plt+0x8448>
   19708:	bl	112d0 <__assert_fail@plt>
   1970c:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   19710:	andeq	fp, r1, r0, lsr #16
   19714:	andeq	fp, r1, ip, lsr #16
   19718:	andeq	fp, r1, r0, asr #16
   1971c:	push	{r4, r5, lr}
   19720:	sub	sp, sp, #12
   19724:	mov	r4, r0
   19728:	bl	111b0 <fileno@plt>
   1972c:	cmp	r0, #0
   19730:	mov	r0, r4
   19734:	blt	197b0 <__assert_fail@plt+0x84e0>
   19738:	bl	11120 <__freading@plt>
   1973c:	cmp	r0, #0
   19740:	bne	1977c <__assert_fail@plt+0x84ac>
   19744:	mov	r0, r4
   19748:	bl	13420 <__assert_fail@plt+0x2150>
   1974c:	cmp	r0, #0
   19750:	beq	197ac <__assert_fail@plt+0x84dc>
   19754:	bl	11180 <__errno_location@plt>
   19758:	mov	r5, r0
   1975c:	mov	r0, r4
   19760:	ldr	r4, [r5]
   19764:	bl	111c8 <fclose@plt>
   19768:	cmp	r4, #0
   1976c:	mvnne	r0, #0
   19770:	strne	r4, [r5]
   19774:	add	sp, sp, #12
   19778:	pop	{r4, r5, pc}
   1977c:	mov	r0, r4
   19780:	bl	111b0 <fileno@plt>
   19784:	mov	r3, #1
   19788:	str	r3, [sp]
   1978c:	mov	r2, #0
   19790:	mov	r3, #0
   19794:	bl	110c0 <lseek64@plt>
   19798:	mvn	r3, #0
   1979c:	mvn	r2, #0
   197a0:	cmp	r1, r3
   197a4:	cmpeq	r0, r2
   197a8:	bne	19744 <__assert_fail@plt+0x8474>
   197ac:	mov	r0, r4
   197b0:	add	sp, sp, #12
   197b4:	pop	{r4, r5, lr}
   197b8:	b	111c8 <fclose@plt>
   197bc:	push	{r1, r2, r3}
   197c0:	push	{r4, r5, r6, r7, lr}
   197c4:	sub	sp, sp, #8
   197c8:	add	r3, sp, #32
   197cc:	ldr	r1, [sp, #28]
   197d0:	str	r3, [sp, #4]
   197d4:	cmp	r1, #0
   197d8:	beq	19870 <__assert_fail@plt+0x85a0>
   197dc:	ldr	r2, [pc, #412]	; 19980 <__assert_fail@plt+0x86b0>
   197e0:	mov	r5, r0
   197e4:	cmp	r1, r2
   197e8:	bne	19834 <__assert_fail@plt+0x8564>
   197ec:	ldr	r6, [pc, #400]	; 19984 <__assert_fail@plt+0x86b4>
   197f0:	ldr	r7, [r3]
   197f4:	add	r2, sp, #36	; 0x24
   197f8:	ldr	r3, [r6]
   197fc:	str	r2, [sp, #4]
   19800:	cmp	r3, #0
   19804:	mov	r2, r7
   19808:	blt	19934 <__assert_fail@plt+0x8664>
   1980c:	bl	111e0 <fcntl64@plt>
   19810:	subs	r4, r0, #0
   19814:	blt	198b8 <__assert_fail@plt+0x85e8>
   19818:	mov	r3, #1
   1981c:	str	r3, [r6]
   19820:	mov	r0, r4
   19824:	add	sp, sp, #8
   19828:	pop	{r4, r5, r6, r7, lr}
   1982c:	add	sp, sp, #12
   19830:	bx	lr
   19834:	cmp	r1, #11
   19838:	beq	19860 <__assert_fail@plt+0x8590>
   1983c:	bgt	19880 <__assert_fail@plt+0x85b0>
   19840:	cmp	r1, #3
   19844:	beq	19860 <__assert_fail@plt+0x8590>
   19848:	ble	19974 <__assert_fail@plt+0x86a4>
   1984c:	cmp	r1, #8
   19850:	beq	198a0 <__assert_fail@plt+0x85d0>
   19854:	ble	198a0 <__assert_fail@plt+0x85d0>
   19858:	cmp	r1, #9
   1985c:	bne	198a0 <__assert_fail@plt+0x85d0>
   19860:	mov	r0, r5
   19864:	bl	111e0 <fcntl64@plt>
   19868:	mov	r4, r0
   1986c:	b	19820 <__assert_fail@plt+0x8550>
   19870:	ldr	r2, [sp, #32]
   19874:	bl	111e0 <fcntl64@plt>
   19878:	mov	r4, r0
   1987c:	b	19820 <__assert_fail@plt+0x8550>
   19880:	ldr	r3, [pc, #256]	; 19988 <__assert_fail@plt+0x86b8>
   19884:	cmp	r1, r3
   19888:	bgt	19954 <__assert_fail@plt+0x8684>
   1988c:	cmp	r1, r2
   19890:	bge	198a0 <__assert_fail@plt+0x85d0>
   19894:	sub	r3, r3, #6
   19898:	cmp	r1, r3
   1989c:	beq	19860 <__assert_fail@plt+0x8590>
   198a0:	ldr	r3, [sp, #4]
   198a4:	mov	r0, r5
   198a8:	ldr	r2, [r3]
   198ac:	bl	111e0 <fcntl64@plt>
   198b0:	mov	r4, r0
   198b4:	b	19820 <__assert_fail@plt+0x8550>
   198b8:	bl	11180 <__errno_location@plt>
   198bc:	ldr	r3, [r0]
   198c0:	cmp	r3, #22
   198c4:	bne	19818 <__assert_fail@plt+0x8548>
   198c8:	mov	r2, r7
   198cc:	mov	r0, r5
   198d0:	mov	r1, #0
   198d4:	bl	111e0 <fcntl64@plt>
   198d8:	subs	r4, r0, #0
   198dc:	blt	19820 <__assert_fail@plt+0x8550>
   198e0:	mvn	r3, #0
   198e4:	str	r3, [r6]
   198e8:	mov	r1, #1
   198ec:	mov	r0, r4
   198f0:	bl	111e0 <fcntl64@plt>
   198f4:	subs	r2, r0, #0
   198f8:	blt	19914 <__assert_fail@plt+0x8644>
   198fc:	orr	r2, r2, #1
   19900:	mov	r1, #2
   19904:	mov	r0, r4
   19908:	bl	111e0 <fcntl64@plt>
   1990c:	cmn	r0, #1
   19910:	bne	19820 <__assert_fail@plt+0x8550>
   19914:	bl	11180 <__errno_location@plt>
   19918:	mov	r5, r0
   1991c:	mov	r0, r4
   19920:	ldr	r6, [r5]
   19924:	mvn	r4, #0
   19928:	bl	112a0 <close@plt>
   1992c:	str	r6, [r5]
   19930:	b	19820 <__assert_fail@plt+0x8550>
   19934:	mov	r1, #0
   19938:	bl	111e0 <fcntl64@plt>
   1993c:	subs	r4, r0, #0
   19940:	blt	19820 <__assert_fail@plt+0x8550>
   19944:	ldr	r3, [r6]
   19948:	cmn	r3, #1
   1994c:	beq	198e8 <__assert_fail@plt+0x8618>
   19950:	b	19820 <__assert_fail@plt+0x8550>
   19954:	ldr	r3, [pc, #48]	; 1998c <__assert_fail@plt+0x86bc>
   19958:	cmp	r1, r3
   1995c:	beq	198a0 <__assert_fail@plt+0x85d0>
   19960:	blt	19860 <__assert_fail@plt+0x8590>
   19964:	add	r3, r3, #1
   19968:	cmp	r1, r3
   1996c:	bne	198a0 <__assert_fail@plt+0x85d0>
   19970:	b	19860 <__assert_fail@plt+0x8590>
   19974:	cmp	r1, #1
   19978:	bne	198a0 <__assert_fail@plt+0x85d0>
   1997c:	b	19860 <__assert_fail@plt+0x8590>
   19980:	andeq	r0, r0, r6, lsl #8
   19984:	strdeq	ip, [r2], -r4
   19988:	andeq	r0, r0, r7, lsl #8
   1998c:	andeq	r0, r0, r9, lsl #8
   19990:	push	{r1, r2, r3}
   19994:	push	{lr}		; (str lr, [sp, #-4]!)
   19998:	sub	sp, sp, #8
   1999c:	ldr	r1, [sp, #12]
   199a0:	ands	r2, r1, #64	; 0x40
   199a4:	addne	r3, sp, #16
   199a8:	ldrne	r2, [sp, #16]
   199ac:	strne	r3, [sp, #4]
   199b0:	bl	110fc <open64@plt>
   199b4:	bl	188cc <__assert_fail@plt+0x75fc>
   199b8:	add	sp, sp, #8
   199bc:	pop	{lr}		; (ldr lr, [sp], #4)
   199c0:	add	sp, sp, #12
   199c4:	bx	lr
   199c8:	push	{r4, lr}
   199cc:	mov	r0, #14
   199d0:	bl	1121c <nl_langinfo@plt>
   199d4:	cmp	r0, #0
   199d8:	beq	199f0 <__assert_fail@plt+0x8720>
   199dc:	ldrb	r2, [r0]
   199e0:	ldr	r3, [pc, #16]	; 199f8 <__assert_fail@plt+0x8728>
   199e4:	cmp	r2, #0
   199e8:	moveq	r0, r3
   199ec:	pop	{r4, pc}
   199f0:	ldr	r0, [pc]	; 199f8 <__assert_fail@plt+0x8728>
   199f4:	pop	{r4, pc}
   199f8:	andeq	fp, r1, r8, asr r8
   199fc:	push	{r4, r5, r6, r7, lr}
   19a00:	subs	r6, r0, #0
   19a04:	sub	sp, sp, #12
   19a08:	addeq	r6, sp, #4
   19a0c:	mov	r0, r6
   19a10:	mov	r5, r2
   19a14:	mov	r7, r1
   19a18:	bl	110e4 <mbrtowc@plt>
   19a1c:	cmp	r5, #0
   19a20:	cmnne	r0, #3
   19a24:	mov	r4, r0
   19a28:	bls	19a44 <__assert_fail@plt+0x8774>
   19a2c:	mov	r0, #0
   19a30:	bl	19aa8 <__assert_fail@plt+0x87d8>
   19a34:	cmp	r0, #0
   19a38:	moveq	r4, #1
   19a3c:	ldrbeq	r3, [r7]
   19a40:	streq	r3, [r6]
   19a44:	mov	r0, r4
   19a48:	add	sp, sp, #12
   19a4c:	pop	{r4, r5, r6, r7, pc}
   19a50:	push	{r4, r5, r6, lr}
   19a54:	subs	r4, r2, #0
   19a58:	mov	r6, r0
   19a5c:	mov	r5, r1
   19a60:	beq	19a8c <__assert_fail@plt+0x87bc>
   19a64:	mov	r1, r4
   19a68:	mvn	r0, #0
   19a6c:	bl	19b9c <__assert_fail@plt+0x88cc>
   19a70:	cmp	r0, r5
   19a74:	bcs	19a8c <__assert_fail@plt+0x87bc>
   19a78:	bl	11180 <__errno_location@plt>
   19a7c:	mov	r3, #12
   19a80:	str	r3, [r0]
   19a84:	mov	r0, #0
   19a88:	pop	{r4, r5, r6, pc}
   19a8c:	mul	r1, r5, r4
   19a90:	mov	r0, r6
   19a94:	pop	{r4, r5, r6, lr}
   19a98:	b	19554 <__assert_fail@plt+0x8284>
   19a9c:	mov	r2, #3
   19aa0:	mov	r1, #0
   19aa4:	b	197bc <__assert_fail@plt+0x84ec>
   19aa8:	push	{lr}		; (str lr, [sp, #-4]!)
   19aac:	sub	sp, sp, #268	; 0x10c
   19ab0:	add	r1, sp, #4
   19ab4:	ldr	r2, [pc, #60]	; 19af8 <__assert_fail@plt+0x8828>
   19ab8:	bl	19b04 <__assert_fail@plt+0x8834>
   19abc:	cmp	r0, #0
   19ac0:	movne	r0, #0
   19ac4:	bne	19af0 <__assert_fail@plt+0x8820>
   19ac8:	ldr	r1, [pc, #44]	; 19afc <__assert_fail@plt+0x882c>
   19acc:	add	r0, sp, #4
   19ad0:	bl	10fdc <strcmp@plt>
   19ad4:	cmp	r0, #0
   19ad8:	beq	19af0 <__assert_fail@plt+0x8820>
   19adc:	add	r0, sp, #4
   19ae0:	ldr	r1, [pc, #24]	; 19b00 <__assert_fail@plt+0x8830>
   19ae4:	bl	10fdc <strcmp@plt>
   19ae8:	adds	r0, r0, #0
   19aec:	movne	r0, #1
   19af0:	add	sp, sp, #268	; 0x10c
   19af4:	pop	{pc}		; (ldr pc, [sp], #4)
   19af8:	andeq	r0, r0, r1, lsl #2
   19afc:	andeq	fp, r1, r0, ror #16
   19b00:	andeq	fp, r1, r4, ror #16
   19b04:	push	{r4, r5, r6, lr}
   19b08:	mov	r5, r1
   19b0c:	mov	r1, #0
   19b10:	mov	r4, r2
   19b14:	bl	11204 <setlocale@plt>
   19b18:	subs	r6, r0, #0
   19b1c:	beq	19b78 <__assert_fail@plt+0x88a8>
   19b20:	bl	11168 <strlen@plt>
   19b24:	cmp	r4, r0
   19b28:	bhi	19b60 <__assert_fail@plt+0x8890>
   19b2c:	cmp	r4, #0
   19b30:	bne	19b3c <__assert_fail@plt+0x886c>
   19b34:	mov	r0, #34	; 0x22
   19b38:	pop	{r4, r5, r6, pc}
   19b3c:	sub	r4, r4, #1
   19b40:	mov	r1, r6
   19b44:	mov	r2, r4
   19b48:	mov	r0, r5
   19b4c:	bl	11030 <memcpy@plt>
   19b50:	mov	r3, #0
   19b54:	strb	r3, [r5, r4]
   19b58:	mov	r0, #34	; 0x22
   19b5c:	pop	{r4, r5, r6, pc}
   19b60:	add	r2, r0, #1
   19b64:	mov	r1, r6
   19b68:	mov	r0, r5
   19b6c:	bl	11030 <memcpy@plt>
   19b70:	mov	r0, #0
   19b74:	pop	{r4, r5, r6, pc}
   19b78:	cmp	r4, #0
   19b7c:	beq	19b8c <__assert_fail@plt+0x88bc>
   19b80:	strb	r6, [r5]
   19b84:	mov	r0, #22
   19b88:	pop	{r4, r5, r6, pc}
   19b8c:	mov	r0, #22
   19b90:	pop	{r4, r5, r6, pc}
   19b94:	mov	r1, #0
   19b98:	b	11204 <setlocale@plt>
   19b9c:	subs	r2, r1, #1
   19ba0:	bxeq	lr
   19ba4:	bcc	19d7c <__assert_fail@plt+0x8aac>
   19ba8:	cmp	r0, r1
   19bac:	bls	19d60 <__assert_fail@plt+0x8a90>
   19bb0:	tst	r1, r2
   19bb4:	beq	19d6c <__assert_fail@plt+0x8a9c>
   19bb8:	clz	r3, r0
   19bbc:	clz	r2, r1
   19bc0:	sub	r3, r2, r3
   19bc4:	rsbs	r3, r3, #31
   19bc8:	addne	r3, r3, r3, lsl #1
   19bcc:	mov	r2, #0
   19bd0:	addne	pc, pc, r3, lsl #2
   19bd4:	nop			; (mov r0, r0)
   19bd8:	cmp	r0, r1, lsl #31
   19bdc:	adc	r2, r2, r2
   19be0:	subcs	r0, r0, r1, lsl #31
   19be4:	cmp	r0, r1, lsl #30
   19be8:	adc	r2, r2, r2
   19bec:	subcs	r0, r0, r1, lsl #30
   19bf0:	cmp	r0, r1, lsl #29
   19bf4:	adc	r2, r2, r2
   19bf8:	subcs	r0, r0, r1, lsl #29
   19bfc:	cmp	r0, r1, lsl #28
   19c00:	adc	r2, r2, r2
   19c04:	subcs	r0, r0, r1, lsl #28
   19c08:	cmp	r0, r1, lsl #27
   19c0c:	adc	r2, r2, r2
   19c10:	subcs	r0, r0, r1, lsl #27
   19c14:	cmp	r0, r1, lsl #26
   19c18:	adc	r2, r2, r2
   19c1c:	subcs	r0, r0, r1, lsl #26
   19c20:	cmp	r0, r1, lsl #25
   19c24:	adc	r2, r2, r2
   19c28:	subcs	r0, r0, r1, lsl #25
   19c2c:	cmp	r0, r1, lsl #24
   19c30:	adc	r2, r2, r2
   19c34:	subcs	r0, r0, r1, lsl #24
   19c38:	cmp	r0, r1, lsl #23
   19c3c:	adc	r2, r2, r2
   19c40:	subcs	r0, r0, r1, lsl #23
   19c44:	cmp	r0, r1, lsl #22
   19c48:	adc	r2, r2, r2
   19c4c:	subcs	r0, r0, r1, lsl #22
   19c50:	cmp	r0, r1, lsl #21
   19c54:	adc	r2, r2, r2
   19c58:	subcs	r0, r0, r1, lsl #21
   19c5c:	cmp	r0, r1, lsl #20
   19c60:	adc	r2, r2, r2
   19c64:	subcs	r0, r0, r1, lsl #20
   19c68:	cmp	r0, r1, lsl #19
   19c6c:	adc	r2, r2, r2
   19c70:	subcs	r0, r0, r1, lsl #19
   19c74:	cmp	r0, r1, lsl #18
   19c78:	adc	r2, r2, r2
   19c7c:	subcs	r0, r0, r1, lsl #18
   19c80:	cmp	r0, r1, lsl #17
   19c84:	adc	r2, r2, r2
   19c88:	subcs	r0, r0, r1, lsl #17
   19c8c:	cmp	r0, r1, lsl #16
   19c90:	adc	r2, r2, r2
   19c94:	subcs	r0, r0, r1, lsl #16
   19c98:	cmp	r0, r1, lsl #15
   19c9c:	adc	r2, r2, r2
   19ca0:	subcs	r0, r0, r1, lsl #15
   19ca4:	cmp	r0, r1, lsl #14
   19ca8:	adc	r2, r2, r2
   19cac:	subcs	r0, r0, r1, lsl #14
   19cb0:	cmp	r0, r1, lsl #13
   19cb4:	adc	r2, r2, r2
   19cb8:	subcs	r0, r0, r1, lsl #13
   19cbc:	cmp	r0, r1, lsl #12
   19cc0:	adc	r2, r2, r2
   19cc4:	subcs	r0, r0, r1, lsl #12
   19cc8:	cmp	r0, r1, lsl #11
   19ccc:	adc	r2, r2, r2
   19cd0:	subcs	r0, r0, r1, lsl #11
   19cd4:	cmp	r0, r1, lsl #10
   19cd8:	adc	r2, r2, r2
   19cdc:	subcs	r0, r0, r1, lsl #10
   19ce0:	cmp	r0, r1, lsl #9
   19ce4:	adc	r2, r2, r2
   19ce8:	subcs	r0, r0, r1, lsl #9
   19cec:	cmp	r0, r1, lsl #8
   19cf0:	adc	r2, r2, r2
   19cf4:	subcs	r0, r0, r1, lsl #8
   19cf8:	cmp	r0, r1, lsl #7
   19cfc:	adc	r2, r2, r2
   19d00:	subcs	r0, r0, r1, lsl #7
   19d04:	cmp	r0, r1, lsl #6
   19d08:	adc	r2, r2, r2
   19d0c:	subcs	r0, r0, r1, lsl #6
   19d10:	cmp	r0, r1, lsl #5
   19d14:	adc	r2, r2, r2
   19d18:	subcs	r0, r0, r1, lsl #5
   19d1c:	cmp	r0, r1, lsl #4
   19d20:	adc	r2, r2, r2
   19d24:	subcs	r0, r0, r1, lsl #4
   19d28:	cmp	r0, r1, lsl #3
   19d2c:	adc	r2, r2, r2
   19d30:	subcs	r0, r0, r1, lsl #3
   19d34:	cmp	r0, r1, lsl #2
   19d38:	adc	r2, r2, r2
   19d3c:	subcs	r0, r0, r1, lsl #2
   19d40:	cmp	r0, r1, lsl #1
   19d44:	adc	r2, r2, r2
   19d48:	subcs	r0, r0, r1, lsl #1
   19d4c:	cmp	r0, r1
   19d50:	adc	r2, r2, r2
   19d54:	subcs	r0, r0, r1
   19d58:	mov	r0, r2
   19d5c:	bx	lr
   19d60:	moveq	r0, #1
   19d64:	movne	r0, #0
   19d68:	bx	lr
   19d6c:	clz	r2, r1
   19d70:	rsb	r2, r2, #31
   19d74:	lsr	r0, r0, r2
   19d78:	bx	lr
   19d7c:	cmp	r0, #0
   19d80:	mvnne	r0, #0
   19d84:	b	1a024 <__assert_fail@plt+0x8d54>
   19d88:	cmp	r1, #0
   19d8c:	beq	19d7c <__assert_fail@plt+0x8aac>
   19d90:	push	{r0, r1, lr}
   19d94:	bl	19b9c <__assert_fail@plt+0x88cc>
   19d98:	pop	{r1, r2, lr}
   19d9c:	mul	r3, r2, r0
   19da0:	sub	r1, r1, r3
   19da4:	bx	lr
   19da8:	cmp	r1, #0
   19dac:	beq	19fb8 <__assert_fail@plt+0x8ce8>
   19db0:	eor	ip, r0, r1
   19db4:	rsbmi	r1, r1, #0
   19db8:	subs	r2, r1, #1
   19dbc:	beq	19f84 <__assert_fail@plt+0x8cb4>
   19dc0:	movs	r3, r0
   19dc4:	rsbmi	r3, r0, #0
   19dc8:	cmp	r3, r1
   19dcc:	bls	19f90 <__assert_fail@plt+0x8cc0>
   19dd0:	tst	r1, r2
   19dd4:	beq	19fa0 <__assert_fail@plt+0x8cd0>
   19dd8:	clz	r2, r3
   19ddc:	clz	r0, r1
   19de0:	sub	r2, r0, r2
   19de4:	rsbs	r2, r2, #31
   19de8:	addne	r2, r2, r2, lsl #1
   19dec:	mov	r0, #0
   19df0:	addne	pc, pc, r2, lsl #2
   19df4:	nop			; (mov r0, r0)
   19df8:	cmp	r3, r1, lsl #31
   19dfc:	adc	r0, r0, r0
   19e00:	subcs	r3, r3, r1, lsl #31
   19e04:	cmp	r3, r1, lsl #30
   19e08:	adc	r0, r0, r0
   19e0c:	subcs	r3, r3, r1, lsl #30
   19e10:	cmp	r3, r1, lsl #29
   19e14:	adc	r0, r0, r0
   19e18:	subcs	r3, r3, r1, lsl #29
   19e1c:	cmp	r3, r1, lsl #28
   19e20:	adc	r0, r0, r0
   19e24:	subcs	r3, r3, r1, lsl #28
   19e28:	cmp	r3, r1, lsl #27
   19e2c:	adc	r0, r0, r0
   19e30:	subcs	r3, r3, r1, lsl #27
   19e34:	cmp	r3, r1, lsl #26
   19e38:	adc	r0, r0, r0
   19e3c:	subcs	r3, r3, r1, lsl #26
   19e40:	cmp	r3, r1, lsl #25
   19e44:	adc	r0, r0, r0
   19e48:	subcs	r3, r3, r1, lsl #25
   19e4c:	cmp	r3, r1, lsl #24
   19e50:	adc	r0, r0, r0
   19e54:	subcs	r3, r3, r1, lsl #24
   19e58:	cmp	r3, r1, lsl #23
   19e5c:	adc	r0, r0, r0
   19e60:	subcs	r3, r3, r1, lsl #23
   19e64:	cmp	r3, r1, lsl #22
   19e68:	adc	r0, r0, r0
   19e6c:	subcs	r3, r3, r1, lsl #22
   19e70:	cmp	r3, r1, lsl #21
   19e74:	adc	r0, r0, r0
   19e78:	subcs	r3, r3, r1, lsl #21
   19e7c:	cmp	r3, r1, lsl #20
   19e80:	adc	r0, r0, r0
   19e84:	subcs	r3, r3, r1, lsl #20
   19e88:	cmp	r3, r1, lsl #19
   19e8c:	adc	r0, r0, r0
   19e90:	subcs	r3, r3, r1, lsl #19
   19e94:	cmp	r3, r1, lsl #18
   19e98:	adc	r0, r0, r0
   19e9c:	subcs	r3, r3, r1, lsl #18
   19ea0:	cmp	r3, r1, lsl #17
   19ea4:	adc	r0, r0, r0
   19ea8:	subcs	r3, r3, r1, lsl #17
   19eac:	cmp	r3, r1, lsl #16
   19eb0:	adc	r0, r0, r0
   19eb4:	subcs	r3, r3, r1, lsl #16
   19eb8:	cmp	r3, r1, lsl #15
   19ebc:	adc	r0, r0, r0
   19ec0:	subcs	r3, r3, r1, lsl #15
   19ec4:	cmp	r3, r1, lsl #14
   19ec8:	adc	r0, r0, r0
   19ecc:	subcs	r3, r3, r1, lsl #14
   19ed0:	cmp	r3, r1, lsl #13
   19ed4:	adc	r0, r0, r0
   19ed8:	subcs	r3, r3, r1, lsl #13
   19edc:	cmp	r3, r1, lsl #12
   19ee0:	adc	r0, r0, r0
   19ee4:	subcs	r3, r3, r1, lsl #12
   19ee8:	cmp	r3, r1, lsl #11
   19eec:	adc	r0, r0, r0
   19ef0:	subcs	r3, r3, r1, lsl #11
   19ef4:	cmp	r3, r1, lsl #10
   19ef8:	adc	r0, r0, r0
   19efc:	subcs	r3, r3, r1, lsl #10
   19f00:	cmp	r3, r1, lsl #9
   19f04:	adc	r0, r0, r0
   19f08:	subcs	r3, r3, r1, lsl #9
   19f0c:	cmp	r3, r1, lsl #8
   19f10:	adc	r0, r0, r0
   19f14:	subcs	r3, r3, r1, lsl #8
   19f18:	cmp	r3, r1, lsl #7
   19f1c:	adc	r0, r0, r0
   19f20:	subcs	r3, r3, r1, lsl #7
   19f24:	cmp	r3, r1, lsl #6
   19f28:	adc	r0, r0, r0
   19f2c:	subcs	r3, r3, r1, lsl #6
   19f30:	cmp	r3, r1, lsl #5
   19f34:	adc	r0, r0, r0
   19f38:	subcs	r3, r3, r1, lsl #5
   19f3c:	cmp	r3, r1, lsl #4
   19f40:	adc	r0, r0, r0
   19f44:	subcs	r3, r3, r1, lsl #4
   19f48:	cmp	r3, r1, lsl #3
   19f4c:	adc	r0, r0, r0
   19f50:	subcs	r3, r3, r1, lsl #3
   19f54:	cmp	r3, r1, lsl #2
   19f58:	adc	r0, r0, r0
   19f5c:	subcs	r3, r3, r1, lsl #2
   19f60:	cmp	r3, r1, lsl #1
   19f64:	adc	r0, r0, r0
   19f68:	subcs	r3, r3, r1, lsl #1
   19f6c:	cmp	r3, r1
   19f70:	adc	r0, r0, r0
   19f74:	subcs	r3, r3, r1
   19f78:	cmp	ip, #0
   19f7c:	rsbmi	r0, r0, #0
   19f80:	bx	lr
   19f84:	teq	ip, r0
   19f88:	rsbmi	r0, r0, #0
   19f8c:	bx	lr
   19f90:	movcc	r0, #0
   19f94:	asreq	r0, ip, #31
   19f98:	orreq	r0, r0, #1
   19f9c:	bx	lr
   19fa0:	clz	r2, r1
   19fa4:	rsb	r2, r2, #31
   19fa8:	cmp	ip, #0
   19fac:	lsr	r0, r3, r2
   19fb0:	rsbmi	r0, r0, #0
   19fb4:	bx	lr
   19fb8:	cmp	r0, #0
   19fbc:	mvngt	r0, #-2147483648	; 0x80000000
   19fc0:	movlt	r0, #-2147483648	; 0x80000000
   19fc4:	b	1a024 <__assert_fail@plt+0x8d54>
   19fc8:	cmp	r1, #0
   19fcc:	beq	19fb8 <__assert_fail@plt+0x8ce8>
   19fd0:	push	{r0, r1, lr}
   19fd4:	bl	19db0 <__assert_fail@plt+0x8ae0>
   19fd8:	pop	{r1, r2, lr}
   19fdc:	mul	r3, r2, r0
   19fe0:	sub	r1, r1, r3
   19fe4:	bx	lr
   19fe8:	cmp	r3, #0
   19fec:	cmpeq	r2, #0
   19ff0:	bne	1a008 <__assert_fail@plt+0x8d38>
   19ff4:	cmp	r1, #0
   19ff8:	cmpeq	r0, #0
   19ffc:	mvnne	r1, #0
   1a000:	mvnne	r0, #0
   1a004:	b	1a024 <__assert_fail@plt+0x8d54>
   1a008:	sub	sp, sp, #8
   1a00c:	push	{sp, lr}
   1a010:	bl	1a034 <__assert_fail@plt+0x8d64>
   1a014:	ldr	lr, [sp, #4]
   1a018:	add	sp, sp, #8
   1a01c:	pop	{r2, r3}
   1a020:	bx	lr
   1a024:	push	{r1, lr}
   1a028:	mov	r0, #8
   1a02c:	bl	10fc4 <raise@plt>
   1a030:	pop	{r1, pc}
   1a034:	cmp	r1, r3
   1a038:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a03c:	cmpeq	r0, r2
   1a040:	mov	r4, r0
   1a044:	mov	r5, r1
   1a048:	ldr	r9, [sp, #28]
   1a04c:	movcc	r0, #0
   1a050:	movcc	r1, #0
   1a054:	bcc	1a14c <__assert_fail@plt+0x8e7c>
   1a058:	cmp	r3, #0
   1a05c:	clzeq	ip, r2
   1a060:	clzne	ip, r3
   1a064:	addeq	ip, ip, #32
   1a068:	cmp	r5, #0
   1a06c:	clzeq	r1, r4
   1a070:	addeq	r1, r1, #32
   1a074:	clzne	r1, r5
   1a078:	sub	ip, ip, r1
   1a07c:	sub	lr, ip, #32
   1a080:	lsl	r7, r3, ip
   1a084:	rsb	r8, ip, #32
   1a088:	orr	r7, r7, r2, lsl lr
   1a08c:	orr	r7, r7, r2, lsr r8
   1a090:	lsl	r6, r2, ip
   1a094:	cmp	r5, r7
   1a098:	cmpeq	r4, r6
   1a09c:	movcc	r0, #0
   1a0a0:	movcc	r1, #0
   1a0a4:	bcc	1a0c0 <__assert_fail@plt+0x8df0>
   1a0a8:	mov	r3, #1
   1a0ac:	subs	r4, r4, r6
   1a0b0:	lsl	r1, r3, lr
   1a0b4:	lsl	r0, r3, ip
   1a0b8:	orr	r1, r1, r3, lsr r8
   1a0bc:	sbc	r5, r5, r7
   1a0c0:	cmp	ip, #0
   1a0c4:	beq	1a14c <__assert_fail@plt+0x8e7c>
   1a0c8:	lsrs	r3, r7, #1
   1a0cc:	rrx	r2, r6
   1a0d0:	mov	r6, ip
   1a0d4:	b	1a0f8 <__assert_fail@plt+0x8e28>
   1a0d8:	subs	r4, r4, r2
   1a0dc:	sbc	r5, r5, r3
   1a0e0:	adds	r4, r4, r4
   1a0e4:	adc	r5, r5, r5
   1a0e8:	adds	r4, r4, #1
   1a0ec:	adc	r5, r5, #0
   1a0f0:	subs	r6, r6, #1
   1a0f4:	beq	1a114 <__assert_fail@plt+0x8e44>
   1a0f8:	cmp	r5, r3
   1a0fc:	cmpeq	r4, r2
   1a100:	bcs	1a0d8 <__assert_fail@plt+0x8e08>
   1a104:	adds	r4, r4, r4
   1a108:	adc	r5, r5, r5
   1a10c:	subs	r6, r6, #1
   1a110:	bne	1a0f8 <__assert_fail@plt+0x8e28>
   1a114:	lsr	r6, r4, ip
   1a118:	lsr	r7, r5, ip
   1a11c:	orr	r6, r6, r5, lsl r8
   1a120:	adds	r2, r0, r4
   1a124:	orr	r6, r6, r5, lsr lr
   1a128:	adc	r3, r1, r5
   1a12c:	lsl	r1, r7, ip
   1a130:	orr	r1, r1, r6, lsl lr
   1a134:	lsl	r0, r6, ip
   1a138:	orr	r1, r1, r6, lsr r8
   1a13c:	subs	r0, r2, r0
   1a140:	mov	r4, r6
   1a144:	mov	r5, r7
   1a148:	sbc	r1, r3, r1
   1a14c:	cmp	r9, #0
   1a150:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1a154:	strd	r4, [r9]
   1a158:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a15c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a160:	mov	r7, r0
   1a164:	ldr	r6, [pc, #72]	; 1a1b4 <__assert_fail@plt+0x8ee4>
   1a168:	ldr	r5, [pc, #72]	; 1a1b8 <__assert_fail@plt+0x8ee8>
   1a16c:	add	r6, pc, r6
   1a170:	add	r5, pc, r5
   1a174:	sub	r6, r6, r5
   1a178:	mov	r8, r1
   1a17c:	mov	r9, r2
   1a180:	bl	10f80 <fstatfs64@plt-0x20>
   1a184:	asrs	r6, r6, #2
   1a188:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a18c:	mov	r4, #0
   1a190:	add	r4, r4, #1
   1a194:	ldr	r3, [r5], #4
   1a198:	mov	r2, r9
   1a19c:	mov	r1, r8
   1a1a0:	mov	r0, r7
   1a1a4:	blx	r3
   1a1a8:	cmp	r6, r4
   1a1ac:	bne	1a190 <__assert_fail@plt+0x8ec0>
   1a1b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a1b4:	muleq	r1, ip, sp
   1a1b8:	muleq	r1, r4, sp
   1a1bc:	bx	lr
   1a1c0:	ldr	r3, [pc, #12]	; 1a1d4 <__assert_fail@plt+0x8f04>
   1a1c4:	mov	r1, #0
   1a1c8:	add	r3, pc, r3
   1a1cc:	ldr	r2, [r3]
   1a1d0:	b	1118c <__cxa_atexit@plt>
   1a1d4:	andeq	r1, r1, r8, asr pc

Disassembly of section .fini:

0001a1d8 <.fini>:
   1a1d8:	push	{r3, lr}
   1a1dc:	pop	{r3, pc}
