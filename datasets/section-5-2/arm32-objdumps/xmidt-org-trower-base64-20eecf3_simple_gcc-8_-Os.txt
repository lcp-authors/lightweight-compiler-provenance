
../repos/xmidt-org-trower-base64-20eecf3/tests/simple:     file format elf32-littlearm


Disassembly of section .init:

00010e7c <.init>:
   10e7c:	push	{r3, lr}
   10e80:	bl	110d0 <_start@@Base+0x3c>
   10e84:	pop	{r3, pc}

Disassembly of section .plt:

00010e88 <fdopen@plt-0x14>:
   10e88:	push	{lr}		; (str lr, [sp, #-4]!)
   10e8c:	ldr	lr, [pc, #4]	; 10e98 <fdopen@plt-0x4>
   10e90:	add	lr, pc, lr
   10e94:	ldr	pc, [lr, #8]!
   10e98:	andeq	r6, r1, r8, ror #2

00010e9c <fdopen@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #90112	; 0x16000
   10ea4:	ldr	pc, [ip, #360]!	; 0x168

00010ea8 <CU_basic_set_mode@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #90112	; 0x16000
   10eb0:	ldr	pc, [ip, #352]!	; 0x160

00010eb4 <raise@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #90112	; 0x16000
   10ebc:	ldr	pc, [ip, #344]!	; 0x158

00010ec0 <CU_initialize_registry@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #90112	; 0x16000
   10ec8:	ldr	pc, [ip, #336]!	; 0x150

00010ecc <setbuf@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #90112	; 0x16000
   10ed4:	ldr	pc, [ip, #328]!	; 0x148

00010ed8 <printf@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #90112	; 0x16000
   10ee0:	ldr	pc, [ip, #320]!	; 0x140

00010ee4 <CU_get_number_of_tests_failed@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #90112	; 0x16000
   10eec:	ldr	pc, [ip, #312]!	; 0x138

00010ef0 <CU_cleanup_registry@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #90112	; 0x16000
   10ef8:	ldr	pc, [ip, #304]!	; 0x130

00010efc <free@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #90112	; 0x16000
   10f04:	ldr	pc, [ip, #296]!	; 0x128

00010f08 <CU_add_suite@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #90112	; 0x16000
   10f10:	ldr	pc, [ip, #288]!	; 0x120

00010f14 <memcpy@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #90112	; 0x16000
   10f1c:	ldr	pc, [ip, #280]!	; 0x118

00010f20 <CU_basic_run_tests@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #90112	; 0x16000
   10f28:	ldr	pc, [ip, #272]!	; 0x110

00010f2c <CU_basic_show_failures@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #90112	; 0x16000
   10f34:	ldr	pc, [ip, #264]!	; 0x108

00010f38 <ftell@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #90112	; 0x16000
   10f40:	ldr	pc, [ip, #256]!	; 0x100

00010f44 <fwrite@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #90112	; 0x16000
   10f4c:	ldr	pc, [ip, #248]!	; 0xf8

00010f50 <strcpy@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #90112	; 0x16000
   10f58:	ldr	pc, [ip, #240]!	; 0xf0

00010f5c <fread@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #90112	; 0x16000
   10f64:	ldr	pc, [ip, #232]!	; 0xe8

00010f68 <open64@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #90112	; 0x16000
   10f70:	ldr	pc, [ip, #224]!	; 0xe0

00010f74 <getenv@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #90112	; 0x16000
   10f7c:	ldr	pc, [ip, #216]!	; 0xd8

00010f80 <puts@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #90112	; 0x16000
   10f88:	ldr	pc, [ip, #208]!	; 0xd0

00010f8c <malloc@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #90112	; 0x16000
   10f94:	ldr	pc, [ip, #200]!	; 0xc8

00010f98 <__libc_start_main@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #90112	; 0x16000
   10fa0:	ldr	pc, [ip, #192]!	; 0xc0

00010fa4 <__gmon_start__@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #90112	; 0x16000
   10fac:	ldr	pc, [ip, #184]!	; 0xb8

00010fb0 <CU_assertImplementation@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #90112	; 0x16000
   10fb8:	ldr	pc, [ip, #176]!	; 0xb0

00010fbc <getpid@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #90112	; 0x16000
   10fc4:	ldr	pc, [ip, #168]!	; 0xa8

00010fc8 <strlen@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #90112	; 0x16000
   10fd0:	ldr	pc, [ip, #160]!	; 0xa0

00010fd4 <fprintf@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #90112	; 0x16000
   10fdc:	ldr	pc, [ip, #152]!	; 0x98

00010fe0 <__errno_location@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #90112	; 0x16000
   10fe8:	ldr	pc, [ip, #144]!	; 0x90

00010fec <mkdir@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #90112	; 0x16000
   10ff4:	ldr	pc, [ip, #136]!	; 0x88

00010ff8 <memset@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #90112	; 0x16000
   11000:	ldr	pc, [ip, #128]!	; 0x80

00011004 <putchar@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #90112	; 0x16000
   1100c:	ldr	pc, [ip, #120]!	; 0x78

00011010 <CU_add_test@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #90112	; 0x16000
   11018:	ldr	pc, [ip, #112]!	; 0x70

0001101c <access@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #90112	; 0x16000
   11024:	ldr	pc, [ip, #104]!	; 0x68

00011028 <fclose@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #90112	; 0x16000
   11030:	ldr	pc, [ip, #96]!	; 0x60

00011034 <fcntl64@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #90112	; 0x16000
   1103c:	ldr	pc, [ip, #88]!	; 0x58

00011040 <vfprintf@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #90112	; 0x16000
   11048:	ldr	pc, [ip, #80]!	; 0x50

0001104c <atoi@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #90112	; 0x16000
   11054:	ldr	pc, [ip, #72]!	; 0x48

00011058 <fopen64@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #90112	; 0x16000
   11060:	ldr	pc, [ip, #64]!	; 0x40

00011064 <CU_get_failure_list@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #90112	; 0x16000
   1106c:	ldr	pc, [ip, #56]!	; 0x38

00011070 <fseek@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #90112	; 0x16000
   11078:	ldr	pc, [ip, #48]!	; 0x30

0001107c <abort@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #90112	; 0x16000
   11084:	ldr	pc, [ip, #40]!	; 0x28

00011088 <close@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #90112	; 0x16000
   11090:	ldr	pc, [ip, #32]!

Disassembly of section .text:

00011094 <_start@@Base>:
   11094:	mov	fp, #0
   11098:	mov	lr, #0
   1109c:	pop	{r1}		; (ldr r1, [sp], #4)
   110a0:	mov	r2, sp
   110a4:	push	{r2}		; (str r2, [sp, #-4]!)
   110a8:	push	{r0}		; (str r0, [sp, #-4]!)
   110ac:	ldr	ip, [pc, #16]	; 110c4 <_start@@Base+0x30>
   110b0:	push	{ip}		; (str ip, [sp, #-4]!)
   110b4:	ldr	r0, [pc, #12]	; 110c8 <_start@@Base+0x34>
   110b8:	ldr	r3, [pc, #12]	; 110cc <_start@@Base+0x38>
   110bc:	bl	10f98 <__libc_start_main@plt>
   110c0:	bl	1107c <abort@plt>
   110c4:	andeq	r5, r1, r4, ror #19
   110c8:			; <UNDEFINED> instruction: 0x000128bc
   110cc:	andeq	r5, r1, r4, lsl #19
   110d0:	ldr	r3, [pc, #20]	; 110ec <_start@@Base+0x58>
   110d4:	ldr	r2, [pc, #20]	; 110f0 <_start@@Base+0x5c>
   110d8:	add	r3, pc, r3
   110dc:	ldr	r2, [r3, r2]
   110e0:	cmp	r2, #0
   110e4:	bxeq	lr
   110e8:	b	10fa4 <__gmon_start__@plt>
   110ec:	andeq	r5, r1, r0, lsr #30
   110f0:	strheq	r0, [r0], -r8
   110f4:	ldr	r0, [pc, #24]	; 11114 <_start@@Base+0x80>
   110f8:	ldr	r3, [pc, #24]	; 11118 <_start@@Base+0x84>
   110fc:	cmp	r3, r0
   11100:	bxeq	lr
   11104:	ldr	r3, [pc, #16]	; 1111c <_start@@Base+0x88>
   11108:	cmp	r3, #0
   1110c:	bxeq	lr
   11110:	bx	r3
   11114:	strdeq	r7, [r2], -r8
   11118:	strdeq	r7, [r2], -r8
   1111c:	andeq	r0, r0, r0
   11120:	ldr	r0, [pc, #36]	; 1114c <_start@@Base+0xb8>
   11124:	ldr	r1, [pc, #36]	; 11150 <_start@@Base+0xbc>
   11128:	sub	r1, r1, r0
   1112c:	asr	r1, r1, #2
   11130:	add	r1, r1, r1, lsr #31
   11134:	asrs	r1, r1, #1
   11138:	bxeq	lr
   1113c:	ldr	r3, [pc, #16]	; 11154 <_start@@Base+0xc0>
   11140:	cmp	r3, #0
   11144:	bxeq	lr
   11148:	bx	r3
   1114c:	strdeq	r7, [r2], -r8
   11150:	strdeq	r7, [r2], -r8
   11154:	andeq	r0, r0, r0
   11158:	push	{r4, lr}
   1115c:	ldr	r4, [pc, #24]	; 1117c <_start@@Base+0xe8>
   11160:	ldrb	r3, [r4]
   11164:	cmp	r3, #0
   11168:	popne	{r4, pc}
   1116c:	bl	110f4 <_start@@Base+0x60>
   11170:	mov	r3, #1
   11174:	strb	r3, [r4]
   11178:	pop	{r4, pc}
   1117c:	strdeq	r7, [r2], -r8
   11180:	b	11120 <_start@@Base+0x8c>

00011184 <test_encoded_size@@Base>:
   11184:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11188:	strd	r6, [sp, #8]
   1118c:	strd	r8, [sp, #16]
   11190:	str	fp, [sp, #24]
   11194:	str	lr, [sp, #28]
   11198:	add	fp, sp, #28
   1119c:	sub	sp, sp, #80	; 0x50
   111a0:	movw	r3, #29992	; 0x7528
   111a4:	movt	r3, #2
   111a8:	ldrd	r2, [r3]
   111ac:	adds	r0, r2, #1
   111b0:	adc	r1, r3, #0
   111b4:	movw	r3, #29992	; 0x7528
   111b8:	movt	r3, #2
   111bc:	strd	r0, [r3]
   111c0:	mov	r0, #0
   111c4:	bl	12c04 <b64_get_encoded_buffer_size@@Base>
   111c8:	mov	r1, r0
   111cc:	movw	r3, #29992	; 0x7528
   111d0:	movt	r3, #2
   111d4:	ldrd	r2, [r3, #8]
   111d8:	adds	r4, r2, #1
   111dc:	adc	r5, r3, #0
   111e0:	movw	r3, #29992	; 0x7528
   111e4:	movt	r3, #2
   111e8:	strd	r4, [r3, #8]
   111ec:	cmp	r1, #0
   111f0:	moveq	r3, #1
   111f4:	movne	r3, #0
   111f8:	uxtb	r3, r3
   111fc:	mov	r0, r3
   11200:	mov	r3, #0
   11204:	str	r3, [sp, #4]
   11208:	movw	r3, #23152	; 0x5a70
   1120c:	movt	r3, #1
   11210:	str	r3, [sp]
   11214:	movw	r3, #23028	; 0x59f4
   11218:	movt	r3, #1
   1121c:	movw	r2, #23100	; 0x5a3c
   11220:	movt	r2, #1
   11224:	mov	r1, #29
   11228:	bl	10fb0 <CU_assertImplementation@plt>
   1122c:	movw	r3, #29992	; 0x7528
   11230:	movt	r3, #2
   11234:	ldrd	r2, [r3, #16]
   11238:	adds	r6, r2, #1
   1123c:	adc	r7, r3, #0
   11240:	movw	r3, #29992	; 0x7528
   11244:	movt	r3, #2
   11248:	strd	r6, [r3, #16]
   1124c:	mov	r0, #1
   11250:	bl	12c04 <b64_get_encoded_buffer_size@@Base>
   11254:	mov	r1, r0
   11258:	movw	r3, #29992	; 0x7528
   1125c:	movt	r3, #2
   11260:	ldrd	r2, [r3, #24]
   11264:	adds	r8, r2, #1
   11268:	adc	r9, r3, #0
   1126c:	movw	r3, #29992	; 0x7528
   11270:	movt	r3, #2
   11274:	strd	r8, [r3, #24]
   11278:	cmp	r1, #4
   1127c:	moveq	r3, #1
   11280:	movne	r3, #0
   11284:	uxtb	r3, r3
   11288:	mov	r0, r3
   1128c:	mov	r3, #0
   11290:	str	r3, [sp, #4]
   11294:	movw	r3, #23152	; 0x5a70
   11298:	movt	r3, #1
   1129c:	str	r3, [sp]
   112a0:	movw	r3, #23028	; 0x59f4
   112a4:	movt	r3, #1
   112a8:	movw	r2, #23156	; 0x5a74
   112ac:	movt	r2, #1
   112b0:	mov	r1, #30
   112b4:	bl	10fb0 <CU_assertImplementation@plt>
   112b8:	movw	r3, #29992	; 0x7528
   112bc:	movt	r3, #2
   112c0:	ldrd	r2, [r3, #32]
   112c4:	adds	r1, r2, #1
   112c8:	str	r1, [fp, #-36]	; 0xffffffdc
   112cc:	adc	r3, r3, #0
   112d0:	str	r3, [fp, #-32]	; 0xffffffe0
   112d4:	movw	r3, #29992	; 0x7528
   112d8:	movt	r3, #2
   112dc:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   112e0:	strd	r0, [r3, #32]
   112e4:	mov	r0, #2
   112e8:	bl	12c04 <b64_get_encoded_buffer_size@@Base>
   112ec:	mov	r1, r0
   112f0:	movw	r3, #29992	; 0x7528
   112f4:	movt	r3, #2
   112f8:	ldrd	r2, [r3, #40]	; 0x28
   112fc:	adds	r0, r2, #1
   11300:	str	r0, [fp, #-44]	; 0xffffffd4
   11304:	adc	r3, r3, #0
   11308:	str	r3, [fp, #-40]	; 0xffffffd8
   1130c:	movw	r3, #29992	; 0x7528
   11310:	movt	r3, #2
   11314:	ldrd	r4, [fp, #-44]	; 0xffffffd4
   11318:	strd	r4, [r3, #40]	; 0x28
   1131c:	cmp	r1, #4
   11320:	moveq	r3, #1
   11324:	movne	r3, #0
   11328:	uxtb	r3, r3
   1132c:	mov	r0, r3
   11330:	mov	r3, #0
   11334:	str	r3, [sp, #4]
   11338:	movw	r3, #23152	; 0x5a70
   1133c:	movt	r3, #1
   11340:	str	r3, [sp]
   11344:	movw	r3, #23028	; 0x59f4
   11348:	movt	r3, #1
   1134c:	movw	r2, #23208	; 0x5aa8
   11350:	movt	r2, #1
   11354:	mov	r1, #31
   11358:	bl	10fb0 <CU_assertImplementation@plt>
   1135c:	movw	r3, #29992	; 0x7528
   11360:	movt	r3, #2
   11364:	ldrd	r2, [r3, #48]	; 0x30
   11368:	adds	r1, r2, #1
   1136c:	str	r1, [fp, #-52]	; 0xffffffcc
   11370:	adc	r3, r3, #0
   11374:	str	r3, [fp, #-48]	; 0xffffffd0
   11378:	movw	r3, #29992	; 0x7528
   1137c:	movt	r3, #2
   11380:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   11384:	strd	r0, [r3, #48]	; 0x30
   11388:	mov	r0, #3
   1138c:	bl	12c04 <b64_get_encoded_buffer_size@@Base>
   11390:	mov	r1, r0
   11394:	movw	r3, #29992	; 0x7528
   11398:	movt	r3, #2
   1139c:	ldrd	r2, [r3, #56]	; 0x38
   113a0:	adds	r0, r2, #1
   113a4:	str	r0, [fp, #-60]	; 0xffffffc4
   113a8:	adc	r3, r3, #0
   113ac:	str	r3, [fp, #-56]	; 0xffffffc8
   113b0:	movw	r3, #29992	; 0x7528
   113b4:	movt	r3, #2
   113b8:	ldrd	r4, [fp, #-60]	; 0xffffffc4
   113bc:	strd	r4, [r3, #56]	; 0x38
   113c0:	cmp	r1, #4
   113c4:	moveq	r3, #1
   113c8:	movne	r3, #0
   113cc:	uxtb	r3, r3
   113d0:	mov	r0, r3
   113d4:	mov	r3, #0
   113d8:	str	r3, [sp, #4]
   113dc:	movw	r3, #23152	; 0x5a70
   113e0:	movt	r3, #1
   113e4:	str	r3, [sp]
   113e8:	movw	r3, #23028	; 0x59f4
   113ec:	movt	r3, #1
   113f0:	movw	r2, #23260	; 0x5adc
   113f4:	movt	r2, #1
   113f8:	mov	r1, #32
   113fc:	bl	10fb0 <CU_assertImplementation@plt>
   11400:	movw	r3, #29992	; 0x7528
   11404:	movt	r3, #2
   11408:	ldrd	r2, [r3, #64]	; 0x40
   1140c:	adds	r1, r2, #1
   11410:	str	r1, [fp, #-68]	; 0xffffffbc
   11414:	adc	r3, r3, #0
   11418:	str	r3, [fp, #-64]	; 0xffffffc0
   1141c:	movw	r3, #29992	; 0x7528
   11420:	movt	r3, #2
   11424:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   11428:	strd	r0, [r3, #64]	; 0x40
   1142c:	mov	r0, #4
   11430:	bl	12c04 <b64_get_encoded_buffer_size@@Base>
   11434:	mov	r1, r0
   11438:	movw	r3, #29992	; 0x7528
   1143c:	movt	r3, #2
   11440:	ldrd	r2, [r3, #72]	; 0x48
   11444:	adds	r0, r2, #1
   11448:	str	r0, [fp, #-76]	; 0xffffffb4
   1144c:	adc	r3, r3, #0
   11450:	str	r3, [fp, #-72]	; 0xffffffb8
   11454:	movw	r3, #29992	; 0x7528
   11458:	movt	r3, #2
   1145c:	ldrd	r4, [fp, #-76]	; 0xffffffb4
   11460:	strd	r4, [r3, #72]	; 0x48
   11464:	cmp	r1, #8
   11468:	moveq	r3, #1
   1146c:	movne	r3, #0
   11470:	uxtb	r3, r3
   11474:	mov	r0, r3
   11478:	mov	r3, #0
   1147c:	str	r3, [sp, #4]
   11480:	movw	r3, #23152	; 0x5a70
   11484:	movt	r3, #1
   11488:	str	r3, [sp]
   1148c:	movw	r3, #23028	; 0x59f4
   11490:	movt	r3, #1
   11494:	movw	r2, #23312	; 0x5b10
   11498:	movt	r2, #1
   1149c:	mov	r1, #33	; 0x21
   114a0:	bl	10fb0 <CU_assertImplementation@plt>
   114a4:	movw	r3, #29992	; 0x7528
   114a8:	movt	r3, #2
   114ac:	ldrd	r2, [r3, #80]	; 0x50
   114b0:	adds	r1, r2, #1
   114b4:	str	r1, [fp, #-84]	; 0xffffffac
   114b8:	adc	r3, r3, #0
   114bc:	str	r3, [fp, #-80]	; 0xffffffb0
   114c0:	movw	r3, #29992	; 0x7528
   114c4:	movt	r3, #2
   114c8:	ldrd	r0, [fp, #-84]	; 0xffffffac
   114cc:	strd	r0, [r3, #80]	; 0x50
   114d0:	mov	r0, #300	; 0x12c
   114d4:	bl	12c04 <b64_get_encoded_buffer_size@@Base>
   114d8:	mov	r1, r0
   114dc:	movw	r3, #29992	; 0x7528
   114e0:	movt	r3, #2
   114e4:	ldrd	r2, [r3, #88]	; 0x58
   114e8:	adds	r0, r2, #1
   114ec:	str	r0, [fp, #-92]	; 0xffffffa4
   114f0:	adc	r3, r3, #0
   114f4:	str	r3, [fp, #-88]	; 0xffffffa8
   114f8:	movw	r3, #29992	; 0x7528
   114fc:	movt	r3, #2
   11500:	ldrd	r4, [fp, #-92]	; 0xffffffa4
   11504:	strd	r4, [r3, #88]	; 0x58
   11508:	cmp	r1, #400	; 0x190
   1150c:	moveq	r3, #1
   11510:	movne	r3, #0
   11514:	uxtb	r3, r3
   11518:	mov	r0, r3
   1151c:	mov	r3, #0
   11520:	str	r3, [sp, #4]
   11524:	movw	r3, #23152	; 0x5a70
   11528:	movt	r3, #1
   1152c:	str	r3, [sp]
   11530:	movw	r3, #23028	; 0x59f4
   11534:	movt	r3, #1
   11538:	movw	r2, #23364	; 0x5b44
   1153c:	movt	r2, #1
   11540:	mov	r1, #34	; 0x22
   11544:	bl	10fb0 <CU_assertImplementation@plt>
   11548:	movw	r3, #29992	; 0x7528
   1154c:	movt	r3, #2
   11550:	ldrd	r2, [r3, #96]	; 0x60
   11554:	adds	r1, r2, #1
   11558:	str	r1, [fp, #-100]	; 0xffffff9c
   1155c:	adc	r3, r3, #0
   11560:	str	r3, [fp, #-96]	; 0xffffffa0
   11564:	movw	r3, #29992	; 0x7528
   11568:	movt	r3, #2
   1156c:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   11570:	strd	r0, [r3, #96]	; 0x60
   11574:	nop	{0}
   11578:	sub	sp, fp, #28
   1157c:	ldrd	r4, [sp]
   11580:	ldrd	r6, [sp, #8]
   11584:	ldrd	r8, [sp, #16]
   11588:	ldr	fp, [sp, #24]
   1158c:	add	sp, sp, #28
   11590:	pop	{pc}		; (ldr pc, [sp], #4)

00011594 <test_decoded_size@@Base>:
   11594:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11598:	strd	r6, [sp, #8]
   1159c:	strd	r8, [sp, #16]
   115a0:	str	fp, [sp, #24]
   115a4:	str	lr, [sp, #28]
   115a8:	add	fp, sp, #28
   115ac:	sub	sp, sp, #80	; 0x50
   115b0:	movw	r3, #29888	; 0x74c0
   115b4:	movt	r3, #2
   115b8:	ldrd	r2, [r3]
   115bc:	adds	r0, r2, #1
   115c0:	adc	r1, r3, #0
   115c4:	movw	r3, #29888	; 0x74c0
   115c8:	movt	r3, #2
   115cc:	strd	r0, [r3]
   115d0:	mov	r0, #0
   115d4:	bl	130e8 <b64_get_decoded_buffer_size@@Base>
   115d8:	mov	r1, r0
   115dc:	movw	r3, #29888	; 0x74c0
   115e0:	movt	r3, #2
   115e4:	ldrd	r2, [r3, #8]
   115e8:	adds	r4, r2, #1
   115ec:	adc	r5, r3, #0
   115f0:	movw	r3, #29888	; 0x74c0
   115f4:	movt	r3, #2
   115f8:	strd	r4, [r3, #8]
   115fc:	cmp	r1, #0
   11600:	moveq	r3, #1
   11604:	movne	r3, #0
   11608:	uxtb	r3, r3
   1160c:	mov	r0, r3
   11610:	mov	r3, #0
   11614:	str	r3, [sp, #4]
   11618:	movw	r3, #23152	; 0x5a70
   1161c:	movt	r3, #1
   11620:	str	r3, [sp]
   11624:	movw	r3, #23028	; 0x59f4
   11628:	movt	r3, #1
   1162c:	movw	r2, #23420	; 0x5b7c
   11630:	movt	r2, #1
   11634:	mov	r1, #38	; 0x26
   11638:	bl	10fb0 <CU_assertImplementation@plt>
   1163c:	movw	r3, #29888	; 0x74c0
   11640:	movt	r3, #2
   11644:	ldrd	r2, [r3, #16]
   11648:	adds	r6, r2, #1
   1164c:	adc	r7, r3, #0
   11650:	movw	r3, #29888	; 0x74c0
   11654:	movt	r3, #2
   11658:	strd	r6, [r3, #16]
   1165c:	mov	r0, #1
   11660:	bl	130e8 <b64_get_decoded_buffer_size@@Base>
   11664:	mov	r1, r0
   11668:	movw	r3, #29888	; 0x74c0
   1166c:	movt	r3, #2
   11670:	ldrd	r2, [r3, #24]
   11674:	adds	r8, r2, #1
   11678:	adc	r9, r3, #0
   1167c:	movw	r3, #29888	; 0x74c0
   11680:	movt	r3, #2
   11684:	strd	r8, [r3, #24]
   11688:	cmp	r1, #0
   1168c:	moveq	r3, #1
   11690:	movne	r3, #0
   11694:	uxtb	r3, r3
   11698:	mov	r0, r3
   1169c:	mov	r3, #0
   116a0:	str	r3, [sp, #4]
   116a4:	movw	r3, #23152	; 0x5a70
   116a8:	movt	r3, #1
   116ac:	str	r3, [sp]
   116b0:	movw	r3, #23028	; 0x59f4
   116b4:	movt	r3, #1
   116b8:	movw	r2, #23472	; 0x5bb0
   116bc:	movt	r2, #1
   116c0:	mov	r1, #39	; 0x27
   116c4:	bl	10fb0 <CU_assertImplementation@plt>
   116c8:	movw	r3, #29888	; 0x74c0
   116cc:	movt	r3, #2
   116d0:	ldrd	r2, [r3, #32]
   116d4:	adds	r1, r2, #1
   116d8:	str	r1, [fp, #-36]	; 0xffffffdc
   116dc:	adc	r3, r3, #0
   116e0:	str	r3, [fp, #-32]	; 0xffffffe0
   116e4:	movw	r3, #29888	; 0x74c0
   116e8:	movt	r3, #2
   116ec:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   116f0:	strd	r0, [r3, #32]
   116f4:	mov	r0, #2
   116f8:	bl	130e8 <b64_get_decoded_buffer_size@@Base>
   116fc:	mov	r1, r0
   11700:	movw	r3, #29888	; 0x74c0
   11704:	movt	r3, #2
   11708:	ldrd	r2, [r3, #40]	; 0x28
   1170c:	adds	r0, r2, #1
   11710:	str	r0, [fp, #-44]	; 0xffffffd4
   11714:	adc	r3, r3, #0
   11718:	str	r3, [fp, #-40]	; 0xffffffd8
   1171c:	movw	r3, #29888	; 0x74c0
   11720:	movt	r3, #2
   11724:	ldrd	r4, [fp, #-44]	; 0xffffffd4
   11728:	strd	r4, [r3, #40]	; 0x28
   1172c:	cmp	r1, #0
   11730:	moveq	r3, #1
   11734:	movne	r3, #0
   11738:	uxtb	r3, r3
   1173c:	mov	r0, r3
   11740:	mov	r3, #0
   11744:	str	r3, [sp, #4]
   11748:	movw	r3, #23152	; 0x5a70
   1174c:	movt	r3, #1
   11750:	str	r3, [sp]
   11754:	movw	r3, #23028	; 0x59f4
   11758:	movt	r3, #1
   1175c:	movw	r2, #23524	; 0x5be4
   11760:	movt	r2, #1
   11764:	mov	r1, #40	; 0x28
   11768:	bl	10fb0 <CU_assertImplementation@plt>
   1176c:	movw	r3, #29888	; 0x74c0
   11770:	movt	r3, #2
   11774:	ldrd	r2, [r3, #48]	; 0x30
   11778:	adds	r1, r2, #1
   1177c:	str	r1, [fp, #-52]	; 0xffffffcc
   11780:	adc	r3, r3, #0
   11784:	str	r3, [fp, #-48]	; 0xffffffd0
   11788:	movw	r3, #29888	; 0x74c0
   1178c:	movt	r3, #2
   11790:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   11794:	strd	r0, [r3, #48]	; 0x30
   11798:	mov	r0, #3
   1179c:	bl	130e8 <b64_get_decoded_buffer_size@@Base>
   117a0:	mov	r1, r0
   117a4:	movw	r3, #29888	; 0x74c0
   117a8:	movt	r3, #2
   117ac:	ldrd	r2, [r3, #56]	; 0x38
   117b0:	adds	r0, r2, #1
   117b4:	str	r0, [fp, #-60]	; 0xffffffc4
   117b8:	adc	r3, r3, #0
   117bc:	str	r3, [fp, #-56]	; 0xffffffc8
   117c0:	movw	r3, #29888	; 0x74c0
   117c4:	movt	r3, #2
   117c8:	ldrd	r4, [fp, #-60]	; 0xffffffc4
   117cc:	strd	r4, [r3, #56]	; 0x38
   117d0:	cmp	r1, #0
   117d4:	moveq	r3, #1
   117d8:	movne	r3, #0
   117dc:	uxtb	r3, r3
   117e0:	mov	r0, r3
   117e4:	mov	r3, #0
   117e8:	str	r3, [sp, #4]
   117ec:	movw	r3, #23152	; 0x5a70
   117f0:	movt	r3, #1
   117f4:	str	r3, [sp]
   117f8:	movw	r3, #23028	; 0x59f4
   117fc:	movt	r3, #1
   11800:	movw	r2, #23576	; 0x5c18
   11804:	movt	r2, #1
   11808:	mov	r1, #41	; 0x29
   1180c:	bl	10fb0 <CU_assertImplementation@plt>
   11810:	movw	r3, #29888	; 0x74c0
   11814:	movt	r3, #2
   11818:	ldrd	r2, [r3, #64]	; 0x40
   1181c:	adds	r1, r2, #1
   11820:	str	r1, [fp, #-68]	; 0xffffffbc
   11824:	adc	r3, r3, #0
   11828:	str	r3, [fp, #-64]	; 0xffffffc0
   1182c:	movw	r3, #29888	; 0x74c0
   11830:	movt	r3, #2
   11834:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   11838:	strd	r0, [r3, #64]	; 0x40
   1183c:	mov	r0, #4
   11840:	bl	130e8 <b64_get_decoded_buffer_size@@Base>
   11844:	mov	r1, r0
   11848:	movw	r3, #29888	; 0x74c0
   1184c:	movt	r3, #2
   11850:	ldrd	r2, [r3, #72]	; 0x48
   11854:	adds	r0, r2, #1
   11858:	str	r0, [fp, #-76]	; 0xffffffb4
   1185c:	adc	r3, r3, #0
   11860:	str	r3, [fp, #-72]	; 0xffffffb8
   11864:	movw	r3, #29888	; 0x74c0
   11868:	movt	r3, #2
   1186c:	ldrd	r4, [fp, #-76]	; 0xffffffb4
   11870:	strd	r4, [r3, #72]	; 0x48
   11874:	cmp	r1, #3
   11878:	moveq	r3, #1
   1187c:	movne	r3, #0
   11880:	uxtb	r3, r3
   11884:	mov	r0, r3
   11888:	mov	r3, #0
   1188c:	str	r3, [sp, #4]
   11890:	movw	r3, #23152	; 0x5a70
   11894:	movt	r3, #1
   11898:	str	r3, [sp]
   1189c:	movw	r3, #23028	; 0x59f4
   118a0:	movt	r3, #1
   118a4:	movw	r2, #23628	; 0x5c4c
   118a8:	movt	r2, #1
   118ac:	mov	r1, #42	; 0x2a
   118b0:	bl	10fb0 <CU_assertImplementation@plt>
   118b4:	movw	r3, #29888	; 0x74c0
   118b8:	movt	r3, #2
   118bc:	ldrd	r2, [r3, #80]	; 0x50
   118c0:	adds	r1, r2, #1
   118c4:	str	r1, [fp, #-84]	; 0xffffffac
   118c8:	adc	r3, r3, #0
   118cc:	str	r3, [fp, #-80]	; 0xffffffb0
   118d0:	movw	r3, #29888	; 0x74c0
   118d4:	movt	r3, #2
   118d8:	ldrd	r0, [fp, #-84]	; 0xffffffac
   118dc:	strd	r0, [r3, #80]	; 0x50
   118e0:	mov	r0, #8
   118e4:	bl	130e8 <b64_get_decoded_buffer_size@@Base>
   118e8:	mov	r1, r0
   118ec:	movw	r3, #29888	; 0x74c0
   118f0:	movt	r3, #2
   118f4:	ldrd	r2, [r3, #88]	; 0x58
   118f8:	adds	r0, r2, #1
   118fc:	str	r0, [fp, #-92]	; 0xffffffa4
   11900:	adc	r3, r3, #0
   11904:	str	r3, [fp, #-88]	; 0xffffffa8
   11908:	movw	r3, #29888	; 0x74c0
   1190c:	movt	r3, #2
   11910:	ldrd	r4, [fp, #-92]	; 0xffffffa4
   11914:	strd	r4, [r3, #88]	; 0x58
   11918:	cmp	r1, #6
   1191c:	moveq	r3, #1
   11920:	movne	r3, #0
   11924:	uxtb	r3, r3
   11928:	mov	r0, r3
   1192c:	mov	r3, #0
   11930:	str	r3, [sp, #4]
   11934:	movw	r3, #23152	; 0x5a70
   11938:	movt	r3, #1
   1193c:	str	r3, [sp]
   11940:	movw	r3, #23028	; 0x59f4
   11944:	movt	r3, #1
   11948:	movw	r2, #23680	; 0x5c80
   1194c:	movt	r2, #1
   11950:	mov	r1, #43	; 0x2b
   11954:	bl	10fb0 <CU_assertImplementation@plt>
   11958:	movw	r3, #29888	; 0x74c0
   1195c:	movt	r3, #2
   11960:	ldrd	r2, [r3, #96]	; 0x60
   11964:	adds	r1, r2, #1
   11968:	str	r1, [fp, #-100]	; 0xffffff9c
   1196c:	adc	r3, r3, #0
   11970:	str	r3, [fp, #-96]	; 0xffffffa0
   11974:	movw	r3, #29888	; 0x74c0
   11978:	movt	r3, #2
   1197c:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   11980:	strd	r0, [r3, #96]	; 0x60
   11984:	nop	{0}
   11988:	sub	sp, fp, #28
   1198c:	ldrd	r4, [sp]
   11990:	ldrd	r6, [sp, #8]
   11994:	ldrd	r8, [sp, #16]
   11998:	ldr	fp, [sp, #24]
   1199c:	add	sp, sp, #28
   119a0:	pop	{pc}		; (ldr pc, [sp], #4)

000119a4 <test_encode@@Base>:
   119a4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   119a8:	strd	r6, [sp, #8]
   119ac:	strd	r8, [sp, #16]
   119b0:	str	fp, [sp, #24]
   119b4:	str	lr, [sp, #28]
   119b8:	add	fp, sp, #28
   119bc:	sub	sp, sp, #48	; 0x30
   119c0:	movw	r3, #29816	; 0x7478
   119c4:	movt	r3, #2
   119c8:	ldrd	r2, [r3]
   119cc:	adds	r0, r2, #1
   119d0:	adc	r1, r3, #0
   119d4:	movw	r3, #29816	; 0x7478
   119d8:	movt	r3, #2
   119dc:	strd	r0, [r3]
   119e0:	mov	r3, #12
   119e4:	movw	r2, #23732	; 0x5cb4
   119e8:	movt	r2, #1
   119ec:	mov	r1, #8
   119f0:	movw	r0, #23748	; 0x5cc4
   119f4:	movt	r0, #1
   119f8:	bl	11cac <test_encoded_stuff@@Base>
   119fc:	mov	r3, r0
   11a00:	mov	r1, r3
   11a04:	movw	r3, #29816	; 0x7478
   11a08:	movt	r3, #2
   11a0c:	ldrd	r2, [r3, #8]
   11a10:	adds	r4, r2, #1
   11a14:	adc	r5, r3, #0
   11a18:	movw	r3, #29816	; 0x7478
   11a1c:	movt	r3, #2
   11a20:	strd	r4, [r3, #8]
   11a24:	eor	r3, r1, #1
   11a28:	uxtb	r3, r3
   11a2c:	mov	r0, r3
   11a30:	mov	r3, #0
   11a34:	str	r3, [sp, #4]
   11a38:	movw	r3, #23152	; 0x5a70
   11a3c:	movt	r3, #1
   11a40:	str	r3, [sp]
   11a44:	movw	r3, #23028	; 0x59f4
   11a48:	movt	r3, #1
   11a4c:	movw	r2, #23760	; 0x5cd0
   11a50:	movt	r2, #1
   11a54:	mov	r1, #47	; 0x2f
   11a58:	bl	10fb0 <CU_assertImplementation@plt>
   11a5c:	movw	r3, #29816	; 0x7478
   11a60:	movt	r3, #2
   11a64:	ldrd	r2, [r3, #16]
   11a68:	adds	r6, r2, #1
   11a6c:	adc	r7, r3, #0
   11a70:	movw	r3, #29816	; 0x7478
   11a74:	movt	r3, #2
   11a78:	strd	r6, [r3, #16]
   11a7c:	mov	r3, #12
   11a80:	movw	r2, #23856	; 0x5d30
   11a84:	movt	r2, #1
   11a88:	mov	r1, #7
   11a8c:	movw	r0, #23872	; 0x5d40
   11a90:	movt	r0, #1
   11a94:	bl	11cac <test_encoded_stuff@@Base>
   11a98:	mov	r3, r0
   11a9c:	mov	r1, r3
   11aa0:	movw	r3, #29816	; 0x7478
   11aa4:	movt	r3, #2
   11aa8:	ldrd	r2, [r3, #24]
   11aac:	adds	r8, r2, #1
   11ab0:	adc	r9, r3, #0
   11ab4:	movw	r3, #29816	; 0x7478
   11ab8:	movt	r3, #2
   11abc:	strd	r8, [r3, #24]
   11ac0:	eor	r3, r1, #1
   11ac4:	uxtb	r3, r3
   11ac8:	mov	r0, r3
   11acc:	mov	r3, #0
   11ad0:	str	r3, [sp, #4]
   11ad4:	movw	r3, #23152	; 0x5a70
   11ad8:	movt	r3, #1
   11adc:	str	r3, [sp]
   11ae0:	movw	r3, #23028	; 0x59f4
   11ae4:	movt	r3, #1
   11ae8:	movw	r2, #23880	; 0x5d48
   11aec:	movt	r2, #1
   11af0:	mov	r1, #48	; 0x30
   11af4:	bl	10fb0 <CU_assertImplementation@plt>
   11af8:	movw	r3, #29816	; 0x7478
   11afc:	movt	r3, #2
   11b00:	ldrd	r2, [r3, #32]
   11b04:	adds	r1, r2, #1
   11b08:	str	r1, [fp, #-36]	; 0xffffffdc
   11b0c:	adc	r3, r3, #0
   11b10:	str	r3, [fp, #-32]	; 0xffffffe0
   11b14:	movw	r3, #29816	; 0x7478
   11b18:	movt	r3, #2
   11b1c:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   11b20:	strd	r0, [r3, #32]
   11b24:	mov	r3, #8
   11b28:	movw	r2, #23972	; 0x5da4
   11b2c:	movt	r2, #1
   11b30:	mov	r1, #6
   11b34:	movw	r0, #23984	; 0x5db0
   11b38:	movt	r0, #1
   11b3c:	bl	11cac <test_encoded_stuff@@Base>
   11b40:	mov	r3, r0
   11b44:	mov	r1, r3
   11b48:	movw	r3, #29816	; 0x7478
   11b4c:	movt	r3, #2
   11b50:	ldrd	r2, [r3, #40]	; 0x28
   11b54:	adds	r0, r2, #1
   11b58:	str	r0, [fp, #-44]	; 0xffffffd4
   11b5c:	adc	r3, r3, #0
   11b60:	str	r3, [fp, #-40]	; 0xffffffd8
   11b64:	movw	r3, #29816	; 0x7478
   11b68:	movt	r3, #2
   11b6c:	ldrd	r4, [fp, #-44]	; 0xffffffd4
   11b70:	strd	r4, [r3, #40]	; 0x28
   11b74:	eor	r3, r1, #1
   11b78:	uxtb	r3, r3
   11b7c:	mov	r0, r3
   11b80:	mov	r3, #0
   11b84:	str	r3, [sp, #4]
   11b88:	movw	r3, #23152	; 0x5a70
   11b8c:	movt	r3, #1
   11b90:	str	r3, [sp]
   11b94:	movw	r3, #23028	; 0x59f4
   11b98:	movt	r3, #1
   11b9c:	movw	r2, #23992	; 0x5db8
   11ba0:	movt	r2, #1
   11ba4:	mov	r1, #49	; 0x31
   11ba8:	bl	10fb0 <CU_assertImplementation@plt>
   11bac:	movw	r3, #29816	; 0x7478
   11bb0:	movt	r3, #2
   11bb4:	ldrd	r2, [r3, #48]	; 0x30
   11bb8:	adds	r1, r2, #1
   11bbc:	str	r1, [fp, #-52]	; 0xffffffcc
   11bc0:	adc	r3, r3, #0
   11bc4:	str	r3, [fp, #-48]	; 0xffffffd0
   11bc8:	movw	r3, #29816	; 0x7478
   11bcc:	movt	r3, #2
   11bd0:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   11bd4:	strd	r0, [r3, #48]	; 0x30
   11bd8:	mov	r3, #8
   11bdc:	movw	r2, #24080	; 0x5e10
   11be0:	movt	r2, #1
   11be4:	mov	r1, #5
   11be8:	movw	r0, #24092	; 0x5e1c
   11bec:	movt	r0, #1
   11bf0:	bl	11cac <test_encoded_stuff@@Base>
   11bf4:	mov	r3, r0
   11bf8:	mov	r1, r3
   11bfc:	movw	r3, #29816	; 0x7478
   11c00:	movt	r3, #2
   11c04:	ldrd	r2, [r3, #56]	; 0x38
   11c08:	adds	r0, r2, #1
   11c0c:	str	r0, [fp, #-60]	; 0xffffffc4
   11c10:	adc	r3, r3, #0
   11c14:	str	r3, [fp, #-56]	; 0xffffffc8
   11c18:	movw	r3, #29816	; 0x7478
   11c1c:	movt	r3, #2
   11c20:	ldrd	r4, [fp, #-60]	; 0xffffffc4
   11c24:	strd	r4, [r3, #56]	; 0x38
   11c28:	eor	r3, r1, #1
   11c2c:	uxtb	r3, r3
   11c30:	mov	r0, r3
   11c34:	mov	r3, #0
   11c38:	str	r3, [sp, #4]
   11c3c:	movw	r3, #23152	; 0x5a70
   11c40:	movt	r3, #1
   11c44:	str	r3, [sp]
   11c48:	movw	r3, #23028	; 0x59f4
   11c4c:	movt	r3, #1
   11c50:	movw	r2, #24100	; 0x5e24
   11c54:	movt	r2, #1
   11c58:	mov	r1, #50	; 0x32
   11c5c:	bl	10fb0 <CU_assertImplementation@plt>
   11c60:	movw	r3, #29816	; 0x7478
   11c64:	movt	r3, #2
   11c68:	ldrd	r2, [r3, #64]	; 0x40
   11c6c:	adds	r1, r2, #1
   11c70:	str	r1, [fp, #-68]	; 0xffffffbc
   11c74:	adc	r3, r3, #0
   11c78:	str	r3, [fp, #-64]	; 0xffffffc0
   11c7c:	movw	r3, #29816	; 0x7478
   11c80:	movt	r3, #2
   11c84:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   11c88:	strd	r0, [r3, #64]	; 0x40
   11c8c:	nop	{0}
   11c90:	sub	sp, fp, #28
   11c94:	ldrd	r4, [sp]
   11c98:	ldrd	r6, [sp, #8]
   11c9c:	ldrd	r8, [sp, #16]
   11ca0:	ldr	fp, [sp, #24]
   11ca4:	add	sp, sp, #28
   11ca8:	pop	{pc}		; (ldr pc, [sp], #4)

00011cac <test_encoded_stuff@@Base>:
   11cac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11cb0:	strd	r6, [sp, #8]
   11cb4:	strd	r8, [sp, #16]
   11cb8:	str	fp, [sp, #24]
   11cbc:	str	lr, [sp, #28]
   11cc0:	add	fp, sp, #28
   11cc4:	sub	sp, sp, #96	; 0x60
   11cc8:	str	r0, [fp, #-48]	; 0xffffffd0
   11ccc:	str	r1, [fp, #-52]	; 0xffffffcc
   11cd0:	str	r2, [fp, #-56]	; 0xffffffc8
   11cd4:	str	r3, [fp, #-60]	; 0xffffffc4
   11cd8:	movw	r3, #29752	; 0x7438
   11cdc:	movt	r3, #2
   11ce0:	ldrd	r2, [r3]
   11ce4:	adds	r4, r2, #1
   11ce8:	adc	r5, r3, #0
   11cec:	movw	r3, #29752	; 0x7438
   11cf0:	movt	r3, #2
   11cf4:	strd	r4, [r3]
   11cf8:	mov	r3, #0
   11cfc:	strb	r3, [fp, #-33]	; 0xffffffdf
   11d00:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11d04:	bl	12c04 <b64_get_encoded_buffer_size@@Base>
   11d08:	str	r0, [fp, #-40]	; 0xffffffd8
   11d0c:	movw	r3, #29752	; 0x7438
   11d10:	movt	r3, #2
   11d14:	ldrd	r2, [r3, #8]
   11d18:	adds	r6, r2, #1
   11d1c:	adc	r7, r3, #0
   11d20:	movw	r3, #29752	; 0x7438
   11d24:	movt	r3, #2
   11d28:	strd	r6, [r3, #8]
   11d2c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11d30:	bl	10f8c <malloc@plt>
   11d34:	mov	r3, r0
   11d38:	str	r3, [fp, #-44]	; 0xffffffd4
   11d3c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   11d40:	ldr	r1, [fp, #-52]	; 0xffffffcc
   11d44:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11d48:	bl	12c6c <b64_encode@@Base>
   11d4c:	movw	r3, #29752	; 0x7438
   11d50:	movt	r3, #2
   11d54:	ldrd	r2, [r3, #16]
   11d58:	adds	r8, r2, #1
   11d5c:	adc	r9, r3, #0
   11d60:	movw	r3, #29752	; 0x7438
   11d64:	movt	r3, #2
   11d68:	strd	r8, [r3, #16]
   11d6c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   11d70:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11d74:	cmp	r2, r3
   11d78:	moveq	r3, #1
   11d7c:	movne	r3, #0
   11d80:	uxtb	r3, r3
   11d84:	mov	r0, r3
   11d88:	mov	r3, #0
   11d8c:	str	r3, [sp, #4]
   11d90:	movw	r3, #23152	; 0x5a70
   11d94:	movt	r3, #1
   11d98:	str	r3, [sp]
   11d9c:	movw	r3, #23028	; 0x59f4
   11da0:	movt	r3, #1
   11da4:	movw	r2, #24188	; 0x5e7c
   11da8:	movt	r2, #1
   11dac:	mov	r1, #62	; 0x3e
   11db0:	bl	10fb0 <CU_assertImplementation@plt>
   11db4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   11db8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   11dbc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   11dc0:	cmp	r1, r2
   11dc4:	movne	r2, #1
   11dc8:	moveq	r2, #0
   11dcc:	uxtb	r2, r2
   11dd0:	orr	r3, r3, r2
   11dd4:	cmp	r3, #0
   11dd8:	movne	r3, #1
   11ddc:	moveq	r3, #0
   11de0:	strb	r3, [fp, #-33]	; 0xffffffdf
   11de4:	mov	r3, #0
   11de8:	str	r3, [fp, #-32]	; 0xffffffe0
   11dec:	b	11fa4 <test_encoded_stuff@@Base+0x2f8>
   11df0:	movw	r3, #29752	; 0x7438
   11df4:	movt	r3, #2
   11df8:	ldrd	r2, [r3, #48]	; 0x30
   11dfc:	adds	r1, r2, #1
   11e00:	str	r1, [fp, #-92]	; 0xffffffa4
   11e04:	adc	r3, r3, #0
   11e08:	str	r3, [fp, #-88]	; 0xffffffa8
   11e0c:	movw	r3, #29752	; 0x7438
   11e10:	movt	r3, #2
   11e14:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   11e18:	strd	r0, [r3, #48]	; 0x30
   11e1c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   11e20:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11e24:	add	r3, r2, r3
   11e28:	ldrb	r2, [r3]
   11e2c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   11e30:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11e34:	add	r3, r1, r3
   11e38:	ldrb	r3, [r3]
   11e3c:	cmp	r2, r3
   11e40:	moveq	r3, #1
   11e44:	movne	r3, #0
   11e48:	uxtb	r3, r3
   11e4c:	mov	r0, r3
   11e50:	mov	r3, #0
   11e54:	str	r3, [sp, #4]
   11e58:	movw	r3, #23152	; 0x5a70
   11e5c:	movt	r3, #1
   11e60:	str	r3, [sp]
   11e64:	movw	r3, #23028	; 0x59f4
   11e68:	movt	r3, #1
   11e6c:	movw	r2, #24236	; 0x5eac
   11e70:	movt	r2, #1
   11e74:	mov	r1, #65	; 0x41
   11e78:	bl	10fb0 <CU_assertImplementation@plt>
   11e7c:	movw	r3, #29752	; 0x7438
   11e80:	movt	r3, #2
   11e84:	ldrd	r2, [r3, #24]
   11e88:	adds	r1, r2, #1
   11e8c:	str	r1, [fp, #-68]	; 0xffffffbc
   11e90:	adc	r3, r3, #0
   11e94:	str	r3, [fp, #-64]	; 0xffffffc0
   11e98:	movw	r3, #29752	; 0x7438
   11e9c:	movt	r3, #2
   11ea0:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   11ea4:	strd	r0, [r3, #24]
   11ea8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   11eac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11eb0:	add	r3, r2, r3
   11eb4:	ldrb	r2, [r3]
   11eb8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   11ebc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11ec0:	add	r3, r1, r3
   11ec4:	ldrb	r3, [r3]
   11ec8:	cmp	r2, r3
   11ecc:	beq	11f6c <test_encoded_stuff@@Base+0x2c0>
   11ed0:	movw	r3, #29752	; 0x7438
   11ed4:	movt	r3, #2
   11ed8:	ldrd	r2, [r3, #32]
   11edc:	adds	r1, r2, #1
   11ee0:	str	r1, [fp, #-76]	; 0xffffffb4
   11ee4:	adc	r3, r3, #0
   11ee8:	str	r3, [fp, #-72]	; 0xffffffb8
   11eec:	movw	r3, #29752	; 0x7438
   11ef0:	movt	r3, #2
   11ef4:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   11ef8:	strd	r0, [r3, #32]
   11efc:	mov	r3, #1
   11f00:	strb	r3, [fp, #-33]	; 0xffffffdf
   11f04:	ldr	r2, [fp, #-56]	; 0xffffffc8
   11f08:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11f0c:	add	r3, r2, r3
   11f10:	ldrb	r3, [r3]
   11f14:	mov	ip, r3
   11f18:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11f1c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   11f20:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11f24:	add	r3, r2, r3
   11f28:	ldrb	r3, [r3]
   11f2c:	mov	r1, r3
   11f30:	ldr	r2, [fp, #-40]	; 0xffffffd8
   11f34:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11f38:	str	r3, [sp, #16]
   11f3c:	str	r2, [sp, #12]
   11f40:	str	r1, [sp, #8]
   11f44:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11f48:	str	r3, [sp, #4]
   11f4c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11f50:	str	r3, [sp]
   11f54:	mov	r3, r0
   11f58:	mov	r2, ip
   11f5c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   11f60:	movw	r0, #24280	; 0x5ed8
   11f64:	movt	r0, #1
   11f68:	bl	10ed8 <printf@plt>
   11f6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11f70:	add	r3, r3, #1
   11f74:	str	r3, [fp, #-32]	; 0xffffffe0
   11f78:	movw	r3, #29752	; 0x7438
   11f7c:	movt	r3, #2
   11f80:	ldrd	r2, [r3, #40]	; 0x28
   11f84:	adds	r1, r2, #1
   11f88:	str	r1, [fp, #-84]	; 0xffffffac
   11f8c:	adc	r3, r3, #0
   11f90:	str	r3, [fp, #-80]	; 0xffffffb0
   11f94:	movw	r3, #29752	; 0x7438
   11f98:	movt	r3, #2
   11f9c:	ldrd	r0, [fp, #-84]	; 0xffffffac
   11fa0:	strd	r0, [r3, #40]	; 0x28
   11fa4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11fa8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11fac:	cmp	r2, r3
   11fb0:	bcc	11df0 <test_encoded_stuff@@Base+0x144>
   11fb4:	movw	r3, #29752	; 0x7438
   11fb8:	movt	r3, #2
   11fbc:	ldrd	r2, [r3, #56]	; 0x38
   11fc0:	adds	r1, r2, #1
   11fc4:	str	r1, [fp, #-100]	; 0xffffff9c
   11fc8:	adc	r3, r3, #0
   11fcc:	str	r3, [fp, #-96]	; 0xffffffa0
   11fd0:	movw	r3, #29752	; 0x7438
   11fd4:	movt	r3, #2
   11fd8:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   11fdc:	strd	r0, [r3, #56]	; 0x38
   11fe0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11fe4:	bl	10efc <free@plt>
   11fe8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   11fec:	mov	r0, r3
   11ff0:	sub	sp, fp, #28
   11ff4:	ldrd	r4, [sp]
   11ff8:	ldrd	r6, [sp, #8]
   11ffc:	ldrd	r8, [sp, #16]
   12000:	ldr	fp, [sp, #24]
   12004:	add	sp, sp, #28
   12008:	pop	{pc}		; (ldr pc, [sp], #4)

0001200c <test_decode@@Base>:
   1200c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12010:	strd	r6, [sp, #8]
   12014:	strd	r8, [sp, #16]
   12018:	str	fp, [sp, #24]
   1201c:	str	lr, [sp, #28]
   12020:	add	fp, sp, #28
   12024:	sub	sp, sp, #48	; 0x30
   12028:	movw	r3, #29680	; 0x73f0
   1202c:	movt	r3, #2
   12030:	ldrd	r2, [r3]
   12034:	adds	r0, r2, #1
   12038:	adc	r1, r3, #0
   1203c:	movw	r3, #29680	; 0x73f0
   12040:	movt	r3, #2
   12044:	strd	r0, [r3]
   12048:	mov	r3, #8
   1204c:	movw	r2, #23748	; 0x5cc4
   12050:	movt	r2, #1
   12054:	mov	r1, #12
   12058:	movw	r0, #23732	; 0x5cb4
   1205c:	movt	r0, #1
   12060:	bl	12314 <test_decoded_stuff@@Base>
   12064:	mov	r3, r0
   12068:	mov	r1, r3
   1206c:	movw	r3, #29680	; 0x73f0
   12070:	movt	r3, #2
   12074:	ldrd	r2, [r3, #8]
   12078:	adds	r4, r2, #1
   1207c:	adc	r5, r3, #0
   12080:	movw	r3, #29680	; 0x73f0
   12084:	movt	r3, #2
   12088:	strd	r4, [r3, #8]
   1208c:	eor	r3, r1, #1
   12090:	uxtb	r3, r3
   12094:	mov	r0, r3
   12098:	mov	r3, #0
   1209c:	str	r3, [sp, #4]
   120a0:	movw	r3, #23152	; 0x5a70
   120a4:	movt	r3, #1
   120a8:	str	r3, [sp]
   120ac:	movw	r3, #23028	; 0x59f4
   120b0:	movt	r3, #1
   120b4:	movw	r2, #24324	; 0x5f04
   120b8:	movt	r2, #1
   120bc:	mov	r1, #78	; 0x4e
   120c0:	bl	10fb0 <CU_assertImplementation@plt>
   120c4:	movw	r3, #29680	; 0x73f0
   120c8:	movt	r3, #2
   120cc:	ldrd	r2, [r3, #16]
   120d0:	adds	r6, r2, #1
   120d4:	adc	r7, r3, #0
   120d8:	movw	r3, #29680	; 0x73f0
   120dc:	movt	r3, #2
   120e0:	strd	r6, [r3, #16]
   120e4:	mov	r3, #7
   120e8:	movw	r2, #23872	; 0x5d40
   120ec:	movt	r2, #1
   120f0:	mov	r1, #12
   120f4:	movw	r0, #23856	; 0x5d30
   120f8:	movt	r0, #1
   120fc:	bl	12314 <test_decoded_stuff@@Base>
   12100:	mov	r3, r0
   12104:	mov	r1, r3
   12108:	movw	r3, #29680	; 0x73f0
   1210c:	movt	r3, #2
   12110:	ldrd	r2, [r3, #24]
   12114:	adds	r8, r2, #1
   12118:	adc	r9, r3, #0
   1211c:	movw	r3, #29680	; 0x73f0
   12120:	movt	r3, #2
   12124:	strd	r8, [r3, #24]
   12128:	eor	r3, r1, #1
   1212c:	uxtb	r3, r3
   12130:	mov	r0, r3
   12134:	mov	r3, #0
   12138:	str	r3, [sp, #4]
   1213c:	movw	r3, #23152	; 0x5a70
   12140:	movt	r3, #1
   12144:	str	r3, [sp]
   12148:	movw	r3, #23028	; 0x59f4
   1214c:	movt	r3, #1
   12150:	movw	r2, #24420	; 0x5f64
   12154:	movt	r2, #1
   12158:	mov	r1, #79	; 0x4f
   1215c:	bl	10fb0 <CU_assertImplementation@plt>
   12160:	movw	r3, #29680	; 0x73f0
   12164:	movt	r3, #2
   12168:	ldrd	r2, [r3, #32]
   1216c:	adds	r1, r2, #1
   12170:	str	r1, [fp, #-36]	; 0xffffffdc
   12174:	adc	r3, r3, #0
   12178:	str	r3, [fp, #-32]	; 0xffffffe0
   1217c:	movw	r3, #29680	; 0x73f0
   12180:	movt	r3, #2
   12184:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   12188:	strd	r0, [r3, #32]
   1218c:	mov	r3, #6
   12190:	movw	r2, #23984	; 0x5db0
   12194:	movt	r2, #1
   12198:	mov	r1, #8
   1219c:	movw	r0, #23972	; 0x5da4
   121a0:	movt	r0, #1
   121a4:	bl	12314 <test_decoded_stuff@@Base>
   121a8:	mov	r3, r0
   121ac:	mov	r1, r3
   121b0:	movw	r3, #29680	; 0x73f0
   121b4:	movt	r3, #2
   121b8:	ldrd	r2, [r3, #40]	; 0x28
   121bc:	adds	r0, r2, #1
   121c0:	str	r0, [fp, #-44]	; 0xffffffd4
   121c4:	adc	r3, r3, #0
   121c8:	str	r3, [fp, #-40]	; 0xffffffd8
   121cc:	movw	r3, #29680	; 0x73f0
   121d0:	movt	r3, #2
   121d4:	ldrd	r4, [fp, #-44]	; 0xffffffd4
   121d8:	strd	r4, [r3, #40]	; 0x28
   121dc:	eor	r3, r1, #1
   121e0:	uxtb	r3, r3
   121e4:	mov	r0, r3
   121e8:	mov	r3, #0
   121ec:	str	r3, [sp, #4]
   121f0:	movw	r3, #23152	; 0x5a70
   121f4:	movt	r3, #1
   121f8:	str	r3, [sp]
   121fc:	movw	r3, #23028	; 0x59f4
   12200:	movt	r3, #1
   12204:	movw	r2, #24512	; 0x5fc0
   12208:	movt	r2, #1
   1220c:	mov	r1, #80	; 0x50
   12210:	bl	10fb0 <CU_assertImplementation@plt>
   12214:	movw	r3, #29680	; 0x73f0
   12218:	movt	r3, #2
   1221c:	ldrd	r2, [r3, #48]	; 0x30
   12220:	adds	r1, r2, #1
   12224:	str	r1, [fp, #-52]	; 0xffffffcc
   12228:	adc	r3, r3, #0
   1222c:	str	r3, [fp, #-48]	; 0xffffffd0
   12230:	movw	r3, #29680	; 0x73f0
   12234:	movt	r3, #2
   12238:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   1223c:	strd	r0, [r3, #48]	; 0x30
   12240:	mov	r3, #5
   12244:	movw	r2, #24092	; 0x5e1c
   12248:	movt	r2, #1
   1224c:	mov	r1, #8
   12250:	movw	r0, #24080	; 0x5e10
   12254:	movt	r0, #1
   12258:	bl	12314 <test_decoded_stuff@@Base>
   1225c:	mov	r3, r0
   12260:	mov	r1, r3
   12264:	movw	r3, #29680	; 0x73f0
   12268:	movt	r3, #2
   1226c:	ldrd	r2, [r3, #56]	; 0x38
   12270:	adds	r0, r2, #1
   12274:	str	r0, [fp, #-60]	; 0xffffffc4
   12278:	adc	r3, r3, #0
   1227c:	str	r3, [fp, #-56]	; 0xffffffc8
   12280:	movw	r3, #29680	; 0x73f0
   12284:	movt	r3, #2
   12288:	ldrd	r4, [fp, #-60]	; 0xffffffc4
   1228c:	strd	r4, [r3, #56]	; 0x38
   12290:	eor	r3, r1, #1
   12294:	uxtb	r3, r3
   12298:	mov	r0, r3
   1229c:	mov	r3, #0
   122a0:	str	r3, [sp, #4]
   122a4:	movw	r3, #23152	; 0x5a70
   122a8:	movt	r3, #1
   122ac:	str	r3, [sp]
   122b0:	movw	r3, #23028	; 0x59f4
   122b4:	movt	r3, #1
   122b8:	movw	r2, #24600	; 0x6018
   122bc:	movt	r2, #1
   122c0:	mov	r1, #81	; 0x51
   122c4:	bl	10fb0 <CU_assertImplementation@plt>
   122c8:	movw	r3, #29680	; 0x73f0
   122cc:	movt	r3, #2
   122d0:	ldrd	r2, [r3, #64]	; 0x40
   122d4:	adds	r1, r2, #1
   122d8:	str	r1, [fp, #-68]	; 0xffffffbc
   122dc:	adc	r3, r3, #0
   122e0:	str	r3, [fp, #-64]	; 0xffffffc0
   122e4:	movw	r3, #29680	; 0x73f0
   122e8:	movt	r3, #2
   122ec:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   122f0:	strd	r0, [r3, #64]	; 0x40
   122f4:	nop	{0}
   122f8:	sub	sp, fp, #28
   122fc:	ldrd	r4, [sp]
   12300:	ldrd	r6, [sp, #8]
   12304:	ldrd	r8, [sp, #16]
   12308:	ldr	fp, [sp, #24]
   1230c:	add	sp, sp, #28
   12310:	pop	{pc}		; (ldr pc, [sp], #4)

00012314 <test_decoded_stuff@@Base>:
   12314:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12318:	strd	r6, [sp, #8]
   1231c:	strd	r8, [sp, #16]
   12320:	str	fp, [sp, #24]
   12324:	str	lr, [sp, #28]
   12328:	add	fp, sp, #28
   1232c:	sub	sp, sp, #120	; 0x78
   12330:	str	r0, [fp, #-56]	; 0xffffffc8
   12334:	str	r1, [fp, #-60]	; 0xffffffc4
   12338:	str	r2, [fp, #-64]	; 0xffffffc0
   1233c:	str	r3, [fp, #-68]	; 0xffffffbc
   12340:	movw	r3, #29600	; 0x73a0
   12344:	movt	r3, #2
   12348:	ldrd	r2, [r3]
   1234c:	adds	r4, r2, #1
   12350:	adc	r5, r3, #0
   12354:	movw	r3, #29600	; 0x73a0
   12358:	movt	r3, #2
   1235c:	strd	r4, [r3]
   12360:	mov	r3, #0
   12364:	strb	r3, [fp, #-33]	; 0xffffffdf
   12368:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1236c:	bl	130e8 <b64_get_decoded_buffer_size@@Base>
   12370:	str	r0, [fp, #-40]	; 0xffffffd8
   12374:	movw	r3, #29600	; 0x73a0
   12378:	movt	r3, #2
   1237c:	ldrd	r2, [r3, #8]
   12380:	adds	r6, r2, #1
   12384:	adc	r7, r3, #0
   12388:	movw	r3, #29600	; 0x73a0
   1238c:	movt	r3, #2
   12390:	strd	r6, [r3, #8]
   12394:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12398:	bl	10f8c <malloc@plt>
   1239c:	mov	r3, r0
   123a0:	str	r3, [fp, #-44]	; 0xffffffd4
   123a4:	ldr	r2, [fp, #-44]	; 0xffffffd4
   123a8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   123ac:	ldr	r0, [fp, #-56]	; 0xffffffc8
   123b0:	bl	131c4 <b64_decode@@Base>
   123b4:	str	r0, [fp, #-48]	; 0xffffffd0
   123b8:	movw	r3, #29600	; 0x73a0
   123bc:	movt	r3, #2
   123c0:	ldrd	r2, [r3, #16]
   123c4:	adds	r8, r2, #1
   123c8:	adc	r9, r3, #0
   123cc:	movw	r3, #29600	; 0x73a0
   123d0:	movt	r3, #2
   123d4:	strd	r8, [r3, #16]
   123d8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   123dc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   123e0:	cmp	r2, r3
   123e4:	moveq	r3, #1
   123e8:	movne	r3, #0
   123ec:	uxtb	r3, r3
   123f0:	mov	r0, r3
   123f4:	mov	r3, #0
   123f8:	str	r3, [sp, #4]
   123fc:	movw	r3, #23152	; 0x5a70
   12400:	movt	r3, #1
   12404:	str	r3, [sp]
   12408:	movw	r3, #23028	; 0x59f4
   1240c:	movt	r3, #1
   12410:	movw	r2, #24688	; 0x6070
   12414:	movt	r2, #1
   12418:	mov	r1, #92	; 0x5c
   1241c:	bl	10fb0 <CU_assertImplementation@plt>
   12420:	movw	r3, #29600	; 0x73a0
   12424:	movt	r3, #2
   12428:	ldrd	r2, [r3, #24]
   1242c:	adds	r1, r2, #1
   12430:	str	r1, [fp, #-76]	; 0xffffffb4
   12434:	adc	r3, r3, #0
   12438:	str	r3, [fp, #-72]	; 0xffffffb8
   1243c:	movw	r3, #29600	; 0x73a0
   12440:	movt	r3, #2
   12444:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   12448:	strd	r0, [r3, #24]
   1244c:	ldrb	r1, [fp, #-33]	; 0xffffffdf
   12450:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12454:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12458:	cmp	r2, r3
   1245c:	movne	r3, #1
   12460:	moveq	r3, #0
   12464:	uxtb	r3, r3
   12468:	orr	r3, r1, r3
   1246c:	cmp	r3, #0
   12470:	movne	r3, #1
   12474:	moveq	r3, #0
   12478:	strb	r3, [fp, #-33]	; 0xffffffdf
   1247c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12480:	cmp	r3, #0
   12484:	beq	124cc <test_decoded_stuff@@Base+0x1b8>
   12488:	movw	r3, #29600	; 0x73a0
   1248c:	movt	r3, #2
   12490:	ldrd	r2, [r3, #32]
   12494:	adds	r1, r2, #1
   12498:	str	r1, [fp, #-84]	; 0xffffffac
   1249c:	adc	r3, r3, #0
   124a0:	str	r3, [fp, #-80]	; 0xffffffb0
   124a4:	movw	r3, #29600	; 0x73a0
   124a8:	movt	r3, #2
   124ac:	ldrd	r0, [fp, #-84]	; 0xffffffac
   124b0:	strd	r0, [r3, #32]
   124b4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   124b8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   124bc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   124c0:	movw	r0, #24732	; 0x609c
   124c4:	movt	r0, #1
   124c8:	bl	10ed8 <printf@plt>
   124cc:	mov	r3, #0
   124d0:	str	r3, [fp, #-32]	; 0xffffffe0
   124d4:	movw	r3, #29600	; 0x73a0
   124d8:	movt	r3, #2
   124dc:	ldrd	r2, [r3, #40]	; 0x28
   124e0:	adds	r1, r2, #1
   124e4:	str	r1, [fp, #-92]	; 0xffffffa4
   124e8:	adc	r3, r3, #0
   124ec:	str	r3, [fp, #-88]	; 0xffffffa8
   124f0:	movw	r3, #29600	; 0x73a0
   124f4:	movt	r3, #2
   124f8:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   124fc:	strd	r0, [r3, #40]	; 0x28
   12500:	b	126bc <test_decoded_stuff@@Base+0x3a8>
   12504:	movw	r3, #29600	; 0x73a0
   12508:	movt	r3, #2
   1250c:	ldrd	r2, [r3, #72]	; 0x48
   12510:	adds	r1, r2, #1
   12514:	str	r1, [fp, #-124]	; 0xffffff84
   12518:	adc	r3, r3, #0
   1251c:	str	r3, [fp, #-120]	; 0xffffff88
   12520:	movw	r3, #29600	; 0x73a0
   12524:	movt	r3, #2
   12528:	ldrd	r0, [fp, #-124]	; 0xffffff84
   1252c:	strd	r0, [r3, #72]	; 0x48
   12530:	ldr	r2, [fp, #-44]	; 0xffffffd4
   12534:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12538:	add	r3, r2, r3
   1253c:	ldrb	r2, [r3]
   12540:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12544:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12548:	add	r3, r1, r3
   1254c:	ldrb	r3, [r3]
   12550:	cmp	r2, r3
   12554:	moveq	r3, #1
   12558:	movne	r3, #0
   1255c:	uxtb	r3, r3
   12560:	mov	r0, r3
   12564:	mov	r3, #0
   12568:	str	r3, [sp, #4]
   1256c:	movw	r3, #23152	; 0x5a70
   12570:	movt	r3, #1
   12574:	str	r3, [sp]
   12578:	movw	r3, #23028	; 0x59f4
   1257c:	movt	r3, #1
   12580:	movw	r2, #24236	; 0x5eac
   12584:	movt	r2, #1
   12588:	mov	r1, #99	; 0x63
   1258c:	bl	10fb0 <CU_assertImplementation@plt>
   12590:	movw	r3, #29600	; 0x73a0
   12594:	movt	r3, #2
   12598:	ldrd	r2, [r3, #48]	; 0x30
   1259c:	adds	r1, r2, #1
   125a0:	str	r1, [fp, #-100]	; 0xffffff9c
   125a4:	adc	r3, r3, #0
   125a8:	str	r3, [fp, #-96]	; 0xffffffa0
   125ac:	movw	r3, #29600	; 0x73a0
   125b0:	movt	r3, #2
   125b4:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   125b8:	strd	r0, [r3, #48]	; 0x30
   125bc:	ldr	r2, [fp, #-44]	; 0xffffffd4
   125c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   125c4:	add	r3, r2, r3
   125c8:	ldrb	r2, [r3]
   125cc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   125d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   125d4:	add	r3, r1, r3
   125d8:	ldrb	r3, [r3]
   125dc:	cmp	r2, r3
   125e0:	beq	12684 <test_decoded_stuff@@Base+0x370>
   125e4:	movw	r3, #29600	; 0x73a0
   125e8:	movt	r3, #2
   125ec:	ldrd	r2, [r3, #56]	; 0x38
   125f0:	adds	r1, r2, #1
   125f4:	str	r1, [fp, #-108]	; 0xffffff94
   125f8:	adc	r3, r3, #0
   125fc:	str	r3, [fp, #-104]	; 0xffffff98
   12600:	movw	r3, #29600	; 0x73a0
   12604:	movt	r3, #2
   12608:	ldrd	r0, [fp, #-108]	; 0xffffff94
   1260c:	strd	r0, [r3, #56]	; 0x38
   12610:	mov	r3, #1
   12614:	strb	r3, [fp, #-33]	; 0xffffffdf
   12618:	ldr	ip, [fp, #-32]	; 0xffffffe0
   1261c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12620:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12624:	add	r3, r2, r3
   12628:	ldrb	r3, [r3]
   1262c:	mov	r4, r3
   12630:	ldr	lr, [fp, #-68]	; 0xffffffbc
   12634:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12638:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1263c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12640:	add	r3, r2, r3
   12644:	ldrb	r3, [r3]
   12648:	mov	r0, r3
   1264c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12650:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12654:	str	r3, [sp, #16]
   12658:	str	r2, [sp, #12]
   1265c:	str	r0, [sp, #8]
   12660:	str	r1, [sp, #4]
   12664:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12668:	str	r3, [sp]
   1266c:	mov	r3, lr
   12670:	mov	r2, r4
   12674:	mov	r1, ip
   12678:	movw	r0, #24756	; 0x60b4
   1267c:	movt	r0, #1
   12680:	bl	10ed8 <printf@plt>
   12684:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12688:	add	r3, r3, #1
   1268c:	str	r3, [fp, #-32]	; 0xffffffe0
   12690:	movw	r3, #29600	; 0x73a0
   12694:	movt	r3, #2
   12698:	ldrd	r2, [r3, #64]	; 0x40
   1269c:	adds	r1, r2, #1
   126a0:	str	r1, [fp, #-116]	; 0xffffff8c
   126a4:	adc	r3, r3, #0
   126a8:	str	r3, [fp, #-112]	; 0xffffff90
   126ac:	movw	r3, #29600	; 0x73a0
   126b0:	movt	r3, #2
   126b4:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   126b8:	strd	r0, [r3, #64]	; 0x40
   126bc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   126c0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   126c4:	cmp	r2, r3
   126c8:	bcc	12504 <test_decoded_stuff@@Base+0x1f0>
   126cc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   126d0:	bl	10efc <free@plt>
   126d4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   126d8:	mov	r0, r3
   126dc:	sub	sp, fp, #28
   126e0:	ldrd	r4, [sp]
   126e4:	ldrd	r6, [sp, #8]
   126e8:	ldrd	r8, [sp, #16]
   126ec:	ldr	fp, [sp, #24]
   126f0:	add	sp, sp, #28
   126f4:	pop	{pc}		; (ldr pc, [sp], #4)

000126f8 <add_suites@@Base>:
   126f8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   126fc:	strd	r6, [sp, #8]
   12700:	strd	r8, [sp, #16]
   12704:	str	fp, [sp, #24]
   12708:	str	lr, [sp, #28]
   1270c:	add	fp, sp, #28
   12710:	sub	sp, sp, #32
   12714:	str	r0, [fp, #-32]	; 0xffffffe0
   12718:	movw	r3, #29552	; 0x7370
   1271c:	movt	r3, #2
   12720:	ldrd	r2, [r3]
   12724:	adds	r4, r2, #1
   12728:	adc	r5, r3, #0
   1272c:	movw	r3, #29552	; 0x7370
   12730:	movt	r3, #2
   12734:	strd	r4, [r3]
   12738:	mov	r2, #0
   1273c:	mov	r1, #0
   12740:	movw	r0, #24800	; 0x60e0
   12744:	movt	r0, #1
   12748:	bl	10f08 <CU_add_suite@plt>
   1274c:	mov	r1, r0
   12750:	movw	r3, #29552	; 0x7370
   12754:	movt	r3, #2
   12758:	ldrd	r2, [r3, #8]
   1275c:	adds	r0, r2, #1
   12760:	str	r0, [fp, #-44]	; 0xffffffd4
   12764:	adc	r3, r3, #0
   12768:	str	r3, [fp, #-40]	; 0xffffffd8
   1276c:	movw	r3, #29552	; 0x7370
   12770:	movt	r3, #2
   12774:	ldrd	r4, [fp, #-44]	; 0xffffffd4
   12778:	strd	r4, [r3, #8]
   1277c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12780:	str	r1, [r3]
   12784:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12788:	ldr	r3, [r3]
   1278c:	movw	r2, #4484	; 0x1184
   12790:	movt	r2, #1
   12794:	movw	r1, #24824	; 0x60f8
   12798:	movt	r1, #1
   1279c:	mov	r0, r3
   127a0:	bl	11010 <CU_add_test@plt>
   127a4:	movw	r3, #29552	; 0x7370
   127a8:	movt	r3, #2
   127ac:	ldrd	r2, [r3, #16]
   127b0:	adds	r1, r2, #1
   127b4:	str	r1, [fp, #-52]	; 0xffffffcc
   127b8:	adc	r3, r3, #0
   127bc:	str	r3, [fp, #-48]	; 0xffffffd0
   127c0:	movw	r3, #29552	; 0x7370
   127c4:	movt	r3, #2
   127c8:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   127cc:	strd	r0, [r3, #16]
   127d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   127d4:	ldr	r3, [r3]
   127d8:	movw	r2, #5524	; 0x1594
   127dc:	movt	r2, #1
   127e0:	movw	r1, #24852	; 0x6114
   127e4:	movt	r1, #1
   127e8:	mov	r0, r3
   127ec:	bl	11010 <CU_add_test@plt>
   127f0:	movw	r3, #29552	; 0x7370
   127f4:	movt	r3, #2
   127f8:	ldrd	r2, [r3, #24]
   127fc:	adds	r1, r2, #1
   12800:	str	r1, [fp, #-60]	; 0xffffffc4
   12804:	adc	r3, r3, #0
   12808:	str	r3, [fp, #-56]	; 0xffffffc8
   1280c:	movw	r3, #29552	; 0x7370
   12810:	movt	r3, #2
   12814:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   12818:	strd	r0, [r3, #24]
   1281c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12820:	ldr	r3, [r3]
   12824:	movw	r2, #6564	; 0x19a4
   12828:	movt	r2, #1
   1282c:	movw	r1, #24880	; 0x6130
   12830:	movt	r1, #1
   12834:	mov	r0, r3
   12838:	bl	11010 <CU_add_test@plt>
   1283c:	movw	r3, #29552	; 0x7370
   12840:	movt	r3, #2
   12844:	ldrd	r2, [r3, #32]
   12848:	adds	r8, r2, #1
   1284c:	adc	r9, r3, #0
   12850:	movw	r3, #29552	; 0x7370
   12854:	movt	r3, #2
   12858:	strd	r8, [r3, #32]
   1285c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12860:	ldr	r3, [r3]
   12864:	movw	r2, #8204	; 0x200c
   12868:	movt	r2, #1
   1286c:	movw	r1, #24908	; 0x614c
   12870:	movt	r1, #1
   12874:	mov	r0, r3
   12878:	bl	11010 <CU_add_test@plt>
   1287c:	movw	r3, #29552	; 0x7370
   12880:	movt	r3, #2
   12884:	ldrd	r2, [r3, #40]	; 0x28
   12888:	adds	r6, r2, #1
   1288c:	adc	r7, r3, #0
   12890:	movw	r3, #29552	; 0x7370
   12894:	movt	r3, #2
   12898:	strd	r6, [r3, #40]	; 0x28
   1289c:	nop	{0}
   128a0:	sub	sp, fp, #28
   128a4:	ldrd	r4, [sp]
   128a8:	ldrd	r6, [sp, #8]
   128ac:	ldrd	r8, [sp, #16]
   128b0:	ldr	fp, [sp, #24]
   128b4:	add	sp, sp, #28
   128b8:	pop	{pc}		; (ldr pc, [sp], #4)

000128bc <main@@Base>:
   128bc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   128c0:	strd	r6, [sp, #8]
   128c4:	strd	r8, [sp, #16]
   128c8:	str	fp, [sp, #24]
   128cc:	str	lr, [sp, #28]
   128d0:	add	fp, sp, #28
   128d4:	sub	sp, sp, #88	; 0x58
   128d8:	movw	r3, #29440	; 0x7300
   128dc:	movt	r3, #2
   128e0:	ldrd	r2, [r3]
   128e4:	adds	r0, r2, #1
   128e8:	adc	r1, r3, #0
   128ec:	movw	r3, #29440	; 0x7300
   128f0:	movt	r3, #2
   128f4:	strd	r0, [r3]
   128f8:	mov	r3, #1
   128fc:	str	r3, [fp, #-32]	; 0xffffffe0
   12900:	mov	r3, #0
   12904:	str	r3, [fp, #-36]	; 0xffffffdc
   12908:	bl	10ec0 <CU_initialize_registry@plt>
   1290c:	mov	r1, r0
   12910:	movw	r3, #29440	; 0x7300
   12914:	movt	r3, #2
   12918:	ldrd	r2, [r3, #8]
   1291c:	adds	r4, r2, #1
   12920:	adc	r5, r3, #0
   12924:	movw	r3, #29440	; 0x7300
   12928:	movt	r3, #2
   1292c:	strd	r4, [r3, #8]
   12930:	cmp	r1, #0
   12934:	bne	12b2c <main@@Base+0x270>
   12938:	movw	r3, #29440	; 0x7300
   1293c:	movt	r3, #2
   12940:	ldrd	r2, [r3, #16]
   12944:	adds	r6, r2, #1
   12948:	adc	r7, r3, #0
   1294c:	movw	r3, #29440	; 0x7300
   12950:	movt	r3, #2
   12954:	strd	r6, [r3, #16]
   12958:	sub	r3, fp, #36	; 0x24
   1295c:	mov	r0, r3
   12960:	bl	126f8 <add_suites@@Base>
   12964:	movw	r3, #29440	; 0x7300
   12968:	movt	r3, #2
   1296c:	ldrd	r2, [r3, #24]
   12970:	adds	r8, r2, #1
   12974:	adc	r9, r3, #0
   12978:	movw	r3, #29440	; 0x7300
   1297c:	movt	r3, #2
   12980:	strd	r8, [r3, #24]
   12984:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12988:	cmp	r3, #0
   1298c:	beq	12b28 <main@@Base+0x26c>
   12990:	movw	r3, #29440	; 0x7300
   12994:	movt	r3, #2
   12998:	ldrd	r2, [r3, #32]
   1299c:	adds	r1, r2, #1
   129a0:	str	r1, [fp, #-44]	; 0xffffffd4
   129a4:	adc	r3, r3, #0
   129a8:	str	r3, [fp, #-40]	; 0xffffffd8
   129ac:	movw	r3, #29440	; 0x7300
   129b0:	movt	r3, #2
   129b4:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   129b8:	strd	r0, [r3, #32]
   129bc:	mov	r0, #2
   129c0:	bl	10ea8 <CU_basic_set_mode@plt>
   129c4:	movw	r3, #29440	; 0x7300
   129c8:	movt	r3, #2
   129cc:	ldrd	r2, [r3, #40]	; 0x28
   129d0:	adds	r1, r2, #1
   129d4:	str	r1, [fp, #-52]	; 0xffffffcc
   129d8:	adc	r3, r3, #0
   129dc:	str	r3, [fp, #-48]	; 0xffffffd0
   129e0:	movw	r3, #29440	; 0x7300
   129e4:	movt	r3, #2
   129e8:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   129ec:	strd	r0, [r3, #40]	; 0x28
   129f0:	bl	10f20 <CU_basic_run_tests@plt>
   129f4:	movw	r3, #29440	; 0x7300
   129f8:	movt	r3, #2
   129fc:	ldrd	r2, [r3, #48]	; 0x30
   12a00:	adds	r1, r2, #1
   12a04:	str	r1, [fp, #-60]	; 0xffffffc4
   12a08:	adc	r3, r3, #0
   12a0c:	str	r3, [fp, #-56]	; 0xffffffc8
   12a10:	movw	r3, #29440	; 0x7300
   12a14:	movt	r3, #2
   12a18:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   12a1c:	strd	r0, [r3, #48]	; 0x30
   12a20:	mov	r0, #10
   12a24:	bl	11004 <putchar@plt>
   12a28:	movw	r3, #29440	; 0x7300
   12a2c:	movt	r3, #2
   12a30:	ldrd	r2, [r3, #56]	; 0x38
   12a34:	adds	r1, r2, #1
   12a38:	str	r1, [fp, #-68]	; 0xffffffbc
   12a3c:	adc	r3, r3, #0
   12a40:	str	r3, [fp, #-64]	; 0xffffffc0
   12a44:	movw	r3, #29440	; 0x7300
   12a48:	movt	r3, #2
   12a4c:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   12a50:	strd	r0, [r3, #56]	; 0x38
   12a54:	bl	11064 <CU_get_failure_list@plt>
   12a58:	mov	r1, r0
   12a5c:	movw	r3, #29440	; 0x7300
   12a60:	movt	r3, #2
   12a64:	ldrd	r2, [r3, #64]	; 0x40
   12a68:	adds	r0, r2, #1
   12a6c:	str	r0, [fp, #-76]	; 0xffffffb4
   12a70:	adc	r3, r3, #0
   12a74:	str	r3, [fp, #-72]	; 0xffffffb8
   12a78:	movw	r3, #29440	; 0x7300
   12a7c:	movt	r3, #2
   12a80:	ldrd	r4, [fp, #-76]	; 0xffffffb4
   12a84:	strd	r4, [r3, #64]	; 0x40
   12a88:	mov	r0, r1
   12a8c:	bl	10f2c <CU_basic_show_failures@plt>
   12a90:	movw	r3, #29440	; 0x7300
   12a94:	movt	r3, #2
   12a98:	ldrd	r2, [r3, #72]	; 0x48
   12a9c:	adds	r1, r2, #1
   12aa0:	str	r1, [fp, #-84]	; 0xffffffac
   12aa4:	adc	r3, r3, #0
   12aa8:	str	r3, [fp, #-80]	; 0xffffffb0
   12aac:	movw	r3, #29440	; 0x7300
   12ab0:	movt	r3, #2
   12ab4:	ldrd	r0, [fp, #-84]	; 0xffffffac
   12ab8:	strd	r0, [r3, #72]	; 0x48
   12abc:	movw	r0, #24936	; 0x6168
   12ac0:	movt	r0, #1
   12ac4:	bl	10f80 <puts@plt>
   12ac8:	movw	r3, #29440	; 0x7300
   12acc:	movt	r3, #2
   12ad0:	ldrd	r2, [r3, #80]	; 0x50
   12ad4:	adds	r1, r2, #1
   12ad8:	str	r1, [fp, #-92]	; 0xffffffa4
   12adc:	adc	r3, r3, #0
   12ae0:	str	r3, [fp, #-88]	; 0xffffffa8
   12ae4:	movw	r3, #29440	; 0x7300
   12ae8:	movt	r3, #2
   12aec:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   12af0:	strd	r0, [r3, #80]	; 0x50
   12af4:	bl	10ee4 <CU_get_number_of_tests_failed@plt>
   12af8:	str	r0, [fp, #-32]	; 0xffffffe0
   12afc:	movw	r3, #29440	; 0x7300
   12b00:	movt	r3, #2
   12b04:	ldrd	r2, [r3, #88]	; 0x58
   12b08:	adds	r1, r2, #1
   12b0c:	str	r1, [fp, #-100]	; 0xffffff9c
   12b10:	adc	r3, r3, #0
   12b14:	str	r3, [fp, #-96]	; 0xffffffa0
   12b18:	movw	r3, #29440	; 0x7300
   12b1c:	movt	r3, #2
   12b20:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   12b24:	strd	r0, [r3, #88]	; 0x58
   12b28:	bl	10ef0 <CU_cleanup_registry@plt>
   12b2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12b30:	cmp	r3, #0
   12b34:	beq	12b6c <main@@Base+0x2b0>
   12b38:	movw	r3, #29440	; 0x7300
   12b3c:	movt	r3, #2
   12b40:	ldrd	r2, [r3, #96]	; 0x60
   12b44:	adds	r1, r2, #1
   12b48:	str	r1, [fp, #-108]	; 0xffffff94
   12b4c:	adc	r3, r3, #0
   12b50:	str	r3, [fp, #-104]	; 0xffffff98
   12b54:	movw	r3, #29440	; 0x7300
   12b58:	movt	r3, #2
   12b5c:	ldrd	r0, [fp, #-108]	; 0xffffff94
   12b60:	strd	r0, [r3, #96]	; 0x60
   12b64:	mov	r3, #1
   12b68:	b	12b9c <main@@Base+0x2e0>
   12b6c:	movw	r3, #29440	; 0x7300
   12b70:	movt	r3, #2
   12b74:	ldrd	r2, [r3, #104]	; 0x68
   12b78:	adds	r1, r2, #1
   12b7c:	str	r1, [fp, #-116]	; 0xffffff8c
   12b80:	adc	r3, r3, #0
   12b84:	str	r3, [fp, #-112]	; 0xffffff90
   12b88:	movw	r3, #29440	; 0x7300
   12b8c:	movt	r3, #2
   12b90:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   12b94:	strd	r0, [r3, #104]	; 0x68
   12b98:	mov	r3, #0
   12b9c:	mov	r0, r3
   12ba0:	sub	sp, fp, #28
   12ba4:	ldrd	r4, [sp]
   12ba8:	ldrd	r6, [sp, #8]
   12bac:	ldrd	r8, [sp, #16]
   12bb0:	ldr	fp, [sp, #24]
   12bb4:	add	sp, sp, #28
   12bb8:	pop	{pc}		; (ldr pc, [sp], #4)
   12bbc:	str	fp, [sp, #-8]!
   12bc0:	str	lr, [sp, #4]
   12bc4:	add	fp, sp, #4
   12bc8:	movw	r0, #28904	; 0x70e8
   12bcc:	movt	r0, #2
   12bd0:	bl	1566c <__gcov_sort_n_vals@@Base+0x4a0>
   12bd4:	sub	sp, fp, #4
   12bd8:	ldr	fp, [sp]
   12bdc:	add	sp, sp, #4
   12be0:	pop	{pc}		; (ldr pc, [sp], #4)
   12be4:	str	fp, [sp, #-8]!
   12be8:	str	lr, [sp, #4]
   12bec:	add	fp, sp, #4
   12bf0:	bl	155fc <__gcov_sort_n_vals@@Base+0x430>
   12bf4:	sub	sp, fp, #4
   12bf8:	ldr	fp, [sp]
   12bfc:	add	sp, sp, #4
   12c00:	pop	{pc}		; (ldr pc, [sp], #4)

00012c04 <b64_get_encoded_buffer_size@@Base>:
   12c04:	strd	r4, [sp, #-12]!
   12c08:	str	fp, [sp, #8]
   12c0c:	add	fp, sp, #8
   12c10:	sub	sp, sp, #12
   12c14:	str	r0, [fp, #-16]
   12c18:	movw	r3, #30168	; 0x75d8
   12c1c:	movt	r3, #2
   12c20:	ldrd	r2, [r3]
   12c24:	adds	r4, r2, #1
   12c28:	adc	r5, r3, #0
   12c2c:	movw	r3, #30168	; 0x75d8
   12c30:	movt	r3, #2
   12c34:	strd	r4, [r3]
   12c38:	ldr	r3, [fp, #-16]
   12c3c:	add	r2, r3, #2
   12c40:	movw	r3, #43691	; 0xaaab
   12c44:	movt	r3, #43690	; 0xaaaa
   12c48:	umull	r2, r3, r3, r2
   12c4c:	lsr	r3, r3, #1
   12c50:	lsl	r3, r3, #2
   12c54:	mov	r0, r3
   12c58:	sub	sp, fp, #8
   12c5c:	ldrd	r4, [sp]
   12c60:	ldr	fp, [sp, #8]
   12c64:	add	sp, sp, #12
   12c68:	bx	lr

00012c6c <b64_encode@@Base>:
   12c6c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12c70:	strd	r6, [sp, #8]
   12c74:	strd	r8, [sp, #16]
   12c78:	str	fp, [sp, #24]
   12c7c:	add	fp, sp, #24
   12c80:	sub	sp, sp, #92	; 0x5c
   12c84:	str	r0, [fp, #-56]	; 0xffffffc8
   12c88:	str	r1, [fp, #-60]	; 0xffffffc4
   12c8c:	str	r2, [fp, #-64]	; 0xffffffc0
   12c90:	movw	r3, #30096	; 0x7590
   12c94:	movt	r3, #2
   12c98:	ldrd	r2, [r3]
   12c9c:	adds	r4, r2, #1
   12ca0:	adc	r5, r3, #0
   12ca4:	movw	r3, #30096	; 0x7590
   12ca8:	movt	r3, #2
   12cac:	strd	r4, [r3]
   12cb0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12cb4:	str	r3, [fp, #-32]	; 0xffffffe0
   12cb8:	b	12f60 <b64_encode@@Base+0x2f4>
   12cbc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12cc0:	cmp	r3, #3
   12cc4:	movcc	r3, r3
   12cc8:	movcs	r3, #3
   12ccc:	str	r3, [fp, #-44]	; 0xffffffd4
   12cd0:	ldr	r2, [fp, #-44]	; 0xffffffd4
   12cd4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12cd8:	sub	r3, r3, r2
   12cdc:	str	r3, [fp, #-32]	; 0xffffffe0
   12ce0:	mov	r3, #0
   12ce4:	str	r3, [fp, #-40]	; 0xffffffd8
   12ce8:	mov	r3, #0
   12cec:	str	r3, [fp, #-36]	; 0xffffffdc
   12cf0:	movw	r3, #30096	; 0x7590
   12cf4:	movt	r3, #2
   12cf8:	ldrd	r2, [r3, #8]
   12cfc:	adds	r8, r2, #1
   12d00:	adc	r9, r3, #0
   12d04:	movw	r3, #30096	; 0x7590
   12d08:	movt	r3, #2
   12d0c:	strd	r8, [r3, #8]
   12d10:	b	12d60 <b64_encode@@Base+0xf4>
   12d14:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12d18:	lsl	r1, r3, #8
   12d1c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12d20:	add	r3, r2, #1
   12d24:	str	r3, [fp, #-56]	; 0xffffffc8
   12d28:	ldrb	r3, [r2]
   12d2c:	orr	r3, r1, r3
   12d30:	str	r3, [fp, #-40]	; 0xffffffd8
   12d34:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12d38:	add	r3, r3, #1
   12d3c:	str	r3, [fp, #-36]	; 0xffffffdc
   12d40:	movw	r3, #30096	; 0x7590
   12d44:	movt	r3, #2
   12d48:	ldrd	r2, [r3, #16]
   12d4c:	adds	r6, r2, #1
   12d50:	adc	r7, r3, #0
   12d54:	movw	r3, #30096	; 0x7590
   12d58:	movt	r3, #2
   12d5c:	strd	r6, [r3, #16]
   12d60:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12d64:	cmp	r3, #2
   12d68:	ble	12d14 <b64_encode@@Base+0xa8>
   12d6c:	mov	r3, #4
   12d70:	str	r3, [fp, #-36]	; 0xffffffdc
   12d74:	b	12f3c <b64_encode@@Base+0x2d0>
   12d78:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12d7c:	and	r3, r3, #63	; 0x3f
   12d80:	str	r3, [fp, #-48]	; 0xffffffd0
   12d84:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12d88:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12d8c:	cmp	r2, r3
   12d90:	bgt	12eec <b64_encode@@Base+0x280>
   12d94:	movw	r3, #30096	; 0x7590
   12d98:	movt	r3, #2
   12d9c:	ldrd	r2, [r3, #24]
   12da0:	adds	r1, r2, #1
   12da4:	str	r1, [fp, #-76]	; 0xffffffb4
   12da8:	adc	r3, r3, #0
   12dac:	str	r3, [fp, #-72]	; 0xffffffb8
   12db0:	movw	r3, #30096	; 0x7590
   12db4:	movt	r3, #2
   12db8:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   12dbc:	strd	r0, [r3, #24]
   12dc0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12dc4:	cmp	r3, #25
   12dc8:	bgt	12e0c <b64_encode@@Base+0x1a0>
   12dcc:	movw	r3, #30096	; 0x7590
   12dd0:	movt	r3, #2
   12dd4:	ldrd	r2, [r3, #40]	; 0x28
   12dd8:	adds	r1, r2, #1
   12ddc:	str	r1, [fp, #-92]	; 0xffffffa4
   12de0:	adc	r3, r3, #0
   12de4:	str	r3, [fp, #-88]	; 0xffffffa8
   12de8:	movw	r3, #30096	; 0x7590
   12dec:	movt	r3, #2
   12df0:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   12df4:	strd	r0, [r3, #40]	; 0x28
   12df8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12dfc:	uxtb	r3, r3
   12e00:	add	r3, r3, #65	; 0x41
   12e04:	uxtb	r1, r3
   12e08:	b	12f1c <b64_encode@@Base+0x2b0>
   12e0c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12e10:	cmp	r3, #51	; 0x33
   12e14:	bgt	12e58 <b64_encode@@Base+0x1ec>
   12e18:	movw	r3, #30096	; 0x7590
   12e1c:	movt	r3, #2
   12e20:	ldrd	r2, [r3, #48]	; 0x30
   12e24:	adds	r1, r2, #1
   12e28:	str	r1, [fp, #-100]	; 0xffffff9c
   12e2c:	adc	r3, r3, #0
   12e30:	str	r3, [fp, #-96]	; 0xffffffa0
   12e34:	movw	r3, #30096	; 0x7590
   12e38:	movt	r3, #2
   12e3c:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   12e40:	strd	r0, [r3, #48]	; 0x30
   12e44:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12e48:	uxtb	r3, r3
   12e4c:	add	r3, r3, #71	; 0x47
   12e50:	uxtb	r1, r3
   12e54:	b	12f1c <b64_encode@@Base+0x2b0>
   12e58:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12e5c:	cmp	r3, #61	; 0x3d
   12e60:	bgt	12ea4 <b64_encode@@Base+0x238>
   12e64:	movw	r3, #30096	; 0x7590
   12e68:	movt	r3, #2
   12e6c:	ldrd	r2, [r3, #56]	; 0x38
   12e70:	adds	r1, r2, #1
   12e74:	str	r1, [fp, #-108]	; 0xffffff94
   12e78:	adc	r3, r3, #0
   12e7c:	str	r3, [fp, #-104]	; 0xffffff98
   12e80:	movw	r3, #30096	; 0x7590
   12e84:	movt	r3, #2
   12e88:	ldrd	r0, [fp, #-108]	; 0xffffff94
   12e8c:	strd	r0, [r3, #56]	; 0x38
   12e90:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12e94:	uxtb	r3, r3
   12e98:	sub	r3, r3, #4
   12e9c:	uxtb	r1, r3
   12ea0:	b	12f1c <b64_encode@@Base+0x2b0>
   12ea4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12ea8:	cmp	r3, #62	; 0x3e
   12eac:	bne	12ee4 <b64_encode@@Base+0x278>
   12eb0:	movw	r3, #30096	; 0x7590
   12eb4:	movt	r3, #2
   12eb8:	ldrd	r2, [r3, #64]	; 0x40
   12ebc:	adds	r1, r2, #1
   12ec0:	str	r1, [fp, #-116]	; 0xffffff8c
   12ec4:	adc	r3, r3, #0
   12ec8:	str	r3, [fp, #-112]	; 0xffffff90
   12ecc:	movw	r3, #30096	; 0x7590
   12ed0:	movt	r3, #2
   12ed4:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   12ed8:	strd	r0, [r3, #64]	; 0x40
   12edc:	mov	r1, #43	; 0x2b
   12ee0:	b	12f1c <b64_encode@@Base+0x2b0>
   12ee4:	mov	r1, #47	; 0x2f
   12ee8:	b	12f1c <b64_encode@@Base+0x2b0>
   12eec:	movw	r3, #30096	; 0x7590
   12ef0:	movt	r3, #2
   12ef4:	ldrd	r2, [r3, #32]
   12ef8:	adds	r1, r2, #1
   12efc:	str	r1, [fp, #-84]	; 0xffffffac
   12f00:	adc	r3, r3, #0
   12f04:	str	r3, [fp, #-80]	; 0xffffffb0
   12f08:	movw	r3, #30096	; 0x7590
   12f0c:	movt	r3, #2
   12f10:	ldrd	r0, [fp, #-84]	; 0xffffffac
   12f14:	strd	r0, [r3, #32]
   12f18:	mov	r1, #61	; 0x3d
   12f1c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12f20:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12f24:	add	r2, r3, r2
   12f28:	mov	r3, r1
   12f2c:	strb	r3, [r2]
   12f30:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12f34:	lsr	r3, r3, #6
   12f38:	str	r3, [fp, #-40]	; 0xffffffd8
   12f3c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12f40:	sub	r3, r3, #1
   12f44:	str	r3, [fp, #-36]	; 0xffffffdc
   12f48:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12f4c:	cmp	r3, #0
   12f50:	bge	12d78 <b64_encode@@Base+0x10c>
   12f54:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12f58:	add	r3, r3, #4
   12f5c:	str	r3, [fp, #-64]	; 0xffffffc0
   12f60:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12f64:	cmp	r3, #0
   12f68:	bne	12cbc <b64_encode@@Base+0x50>
   12f6c:	nop	{0}
   12f70:	sub	sp, fp, #24
   12f74:	ldrd	r4, [sp]
   12f78:	ldrd	r6, [sp, #8]
   12f7c:	ldrd	r8, [sp, #16]
   12f80:	ldr	fp, [sp, #24]
   12f84:	add	sp, sp, #28
   12f88:	bx	lr
   12f8c:	str	fp, [sp, #-8]!
   12f90:	str	lr, [sp, #4]
   12f94:	add	fp, sp, #4
   12f98:	movw	r0, #29188	; 0x7204
   12f9c:	movt	r0, #2
   12fa0:	bl	1566c <__gcov_sort_n_vals@@Base+0x4a0>
   12fa4:	sub	sp, fp, #4
   12fa8:	ldr	fp, [sp]
   12fac:	add	sp, sp, #4
   12fb0:	pop	{pc}		; (ldr pc, [sp], #4)
   12fb4:	str	fp, [sp, #-8]!
   12fb8:	str	lr, [sp, #4]
   12fbc:	add	fp, sp, #4
   12fc0:	bl	155fc <__gcov_sort_n_vals@@Base+0x430>
   12fc4:	sub	sp, fp, #4
   12fc8:	ldr	fp, [sp]
   12fcc:	add	sp, sp, #4
   12fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   12fd4:	strd	r4, [sp, #-12]!
   12fd8:	str	fp, [sp, #8]
   12fdc:	add	fp, sp, #8
   12fe0:	sub	sp, sp, #12
   12fe4:	str	r0, [fp, #-16]
   12fe8:	str	r1, [fp, #-20]	; 0xffffffec
   12fec:	movw	r3, #30312	; 0x7668
   12ff0:	movt	r3, #2
   12ff4:	ldrd	r2, [r3]
   12ff8:	adds	r4, r2, #1
   12ffc:	adc	r5, r3, #0
   13000:	movw	r3, #30312	; 0x7668
   13004:	movt	r3, #2
   13008:	strd	r4, [r3]
   1300c:	ldr	r3, [fp, #-16]
   13010:	ldrb	r3, [r3]
   13014:	lsl	r3, r3, #2
   13018:	sxtb	r2, r3
   1301c:	ldr	r3, [fp, #-16]
   13020:	add	r3, r3, #1
   13024:	ldrb	r3, [r3]
   13028:	lsr	r3, r3, #4
   1302c:	uxtb	r3, r3
   13030:	sxtb	r3, r3
   13034:	orr	r3, r2, r3
   13038:	sxtb	r3, r3
   1303c:	uxtb	r2, r3
   13040:	ldr	r3, [fp, #-20]	; 0xffffffec
   13044:	strb	r2, [r3]
   13048:	ldr	r3, [fp, #-16]
   1304c:	add	r3, r3, #1
   13050:	ldrb	r3, [r3]
   13054:	lsl	r3, r3, #4
   13058:	sxtb	r2, r3
   1305c:	ldr	r3, [fp, #-16]
   13060:	add	r3, r3, #2
   13064:	ldrb	r3, [r3]
   13068:	lsr	r3, r3, #2
   1306c:	uxtb	r3, r3
   13070:	sxtb	r3, r3
   13074:	orr	r3, r2, r3
   13078:	sxtb	r2, r3
   1307c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13080:	add	r3, r3, #1
   13084:	uxtb	r2, r2
   13088:	strb	r2, [r3]
   1308c:	ldr	r3, [fp, #-16]
   13090:	add	r3, r3, #2
   13094:	ldrb	r3, [r3]
   13098:	lsl	r3, r3, #6
   1309c:	sxtb	r3, r3
   130a0:	bic	r3, r3, #63	; 0x3f
   130a4:	sxtb	r2, r3
   130a8:	ldr	r3, [fp, #-16]
   130ac:	add	r3, r3, #3
   130b0:	ldrb	r3, [r3]
   130b4:	sxtb	r3, r3
   130b8:	orr	r3, r2, r3
   130bc:	sxtb	r2, r3
   130c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   130c4:	add	r3, r3, #2
   130c8:	uxtb	r2, r2
   130cc:	strb	r2, [r3]
   130d0:	nop	{0}
   130d4:	sub	sp, fp, #8
   130d8:	ldrd	r4, [sp]
   130dc:	ldr	fp, [sp, #8]
   130e0:	add	sp, sp, #12
   130e4:	bx	lr

000130e8 <b64_get_decoded_buffer_size@@Base>:
   130e8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   130ec:	strd	r6, [sp, #8]
   130f0:	strd	r8, [sp, #16]
   130f4:	str	fp, [sp, #24]
   130f8:	add	fp, sp, #24
   130fc:	sub	sp, sp, #20
   13100:	str	r0, [fp, #-40]	; 0xffffffd8
   13104:	movw	r3, #30288	; 0x7650
   13108:	movt	r3, #2
   1310c:	ldrd	r2, [r3]
   13110:	adds	r8, r2, #1
   13114:	adc	r9, r3, #0
   13118:	movw	r3, #30288	; 0x7650
   1311c:	movt	r3, #2
   13120:	strd	r8, [r3]
   13124:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13128:	cmp	r3, #0
   1312c:	beq	13160 <b64_get_decoded_buffer_size@@Base+0x78>
   13130:	movw	r3, #30288	; 0x7650
   13134:	movt	r3, #2
   13138:	ldrd	r2, [r3, #8]
   1313c:	adds	r6, r2, #1
   13140:	adc	r7, r3, #0
   13144:	movw	r3, #30288	; 0x7650
   13148:	movt	r3, #2
   1314c:	strd	r6, [r3, #8]
   13150:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13154:	lsr	r3, r3, #2
   13158:	cmp	r3, #0
   1315c:	bne	13168 <b64_get_decoded_buffer_size@@Base+0x80>
   13160:	mov	r3, #0
   13164:	b	131a4 <b64_get_decoded_buffer_size@@Base+0xbc>
   13168:	movw	r3, #30288	; 0x7650
   1316c:	movt	r3, #2
   13170:	ldrd	r2, [r3, #16]
   13174:	adds	r4, r2, #1
   13178:	adc	r5, r3, #0
   1317c:	movw	r3, #30288	; 0x7650
   13180:	movt	r3, #2
   13184:	strd	r4, [r3, #16]
   13188:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1318c:	lsr	r2, r3, #2
   13190:	mov	r3, r2
   13194:	lsl	r3, r3, #1
   13198:	add	r3, r3, r2
   1319c:	str	r3, [fp, #-32]	; 0xffffffe0
   131a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   131a4:	mov	r0, r3
   131a8:	sub	sp, fp, #24
   131ac:	ldrd	r4, [sp]
   131b0:	ldrd	r6, [sp, #8]
   131b4:	ldrd	r8, [sp, #16]
   131b8:	ldr	fp, [sp, #24]
   131bc:	add	sp, sp, #28
   131c0:	bx	lr

000131c4 <b64_decode@@Base>:
   131c4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   131c8:	strd	r6, [sp, #8]
   131cc:	strd	r8, [sp, #16]
   131d0:	str	fp, [sp, #24]
   131d4:	str	lr, [sp, #28]
   131d8:	add	fp, sp, #28
   131dc:	sub	sp, sp, #136	; 0x88
   131e0:	str	r0, [fp, #-64]	; 0xffffffc0
   131e4:	str	r1, [fp, #-68]	; 0xffffffbc
   131e8:	str	r2, [fp, #-72]	; 0xffffffb8
   131ec:	movw	r3, #30176	; 0x75e0
   131f0:	movt	r3, #2
   131f4:	ldrd	r2, [r3]
   131f8:	adds	r4, r2, #1
   131fc:	adc	r5, r3, #0
   13200:	movw	r3, #30176	; 0x75e0
   13204:	movt	r3, #2
   13208:	strd	r4, [r3]
   1320c:	ldr	r3, [fp, #-72]	; 0xffffffb8
   13210:	str	r3, [fp, #-36]	; 0xffffffdc
   13214:	mov	r3, #0
   13218:	str	r3, [fp, #-48]	; 0xffffffd0
   1321c:	b	135c8 <b64_decode@@Base+0x404>
   13220:	mov	r3, #0
   13224:	str	r3, [fp, #-44]	; 0xffffffd4
   13228:	mov	r3, #0
   1322c:	str	r3, [fp, #-40]	; 0xffffffd8
   13230:	movw	r3, #30176	; 0x75e0
   13234:	movt	r3, #2
   13238:	ldrd	r2, [r3, #8]
   1323c:	adds	r6, r2, #1
   13240:	adc	r7, r3, #0
   13244:	movw	r3, #30176	; 0x75e0
   13248:	movt	r3, #2
   1324c:	strd	r6, [r3, #8]
   13250:	b	134f8 <b64_decode@@Base+0x334>
   13254:	mov	r3, #0
   13258:	strb	r3, [fp, #-29]	; 0xffffffe3
   1325c:	movw	r3, #30176	; 0x75e0
   13260:	movt	r3, #2
   13264:	ldrd	r2, [r3, #16]
   13268:	adds	r8, r2, #1
   1326c:	adc	r9, r3, #0
   13270:	movw	r3, #30176	; 0x75e0
   13274:	movt	r3, #2
   13278:	strd	r8, [r3, #16]
   1327c:	b	133b4 <b64_decode@@Base+0x1f0>
   13280:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13284:	add	r3, r2, #1
   13288:	str	r3, [fp, #-48]	; 0xffffffd0
   1328c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13290:	add	r3, r3, r2
   13294:	ldrb	r3, [r3]
   13298:	strb	r3, [fp, #-29]	; 0xffffffe3
   1329c:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   132a0:	sub	r3, r3, #43	; 0x2b
   132a4:	str	r3, [fp, #-52]	; 0xffffffcc
   132a8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   132ac:	cmp	r3, #79	; 0x4f
   132b0:	bhi	132f8 <b64_decode@@Base+0x134>
   132b4:	movw	r3, #30176	; 0x75e0
   132b8:	movt	r3, #2
   132bc:	ldrd	r2, [r3, #24]
   132c0:	adds	r1, r2, #1
   132c4:	str	r1, [fp, #-84]	; 0xffffffac
   132c8:	adc	r3, r3, #0
   132cc:	str	r3, [fp, #-80]	; 0xffffffb0
   132d0:	movw	r3, #30176	; 0x75e0
   132d4:	movt	r3, #2
   132d8:	ldrd	r0, [fp, #-84]	; 0xffffffac
   132dc:	strd	r0, [r3, #24]
   132e0:	movw	r2, #25144	; 0x6238
   132e4:	movt	r2, #1
   132e8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   132ec:	add	r3, r2, r3
   132f0:	ldrb	r3, [r3]
   132f4:	b	13328 <b64_decode@@Base+0x164>
   132f8:	movw	r3, #30176	; 0x75e0
   132fc:	movt	r3, #2
   13300:	ldrd	r2, [r3, #32]
   13304:	adds	r1, r2, #1
   13308:	str	r1, [fp, #-92]	; 0xffffffa4
   1330c:	adc	r3, r3, #0
   13310:	str	r3, [fp, #-88]	; 0xffffffa8
   13314:	movw	r3, #30176	; 0x75e0
   13318:	movt	r3, #2
   1331c:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   13320:	strd	r0, [r3, #32]
   13324:	mov	r3, #0
   13328:	strb	r3, [fp, #-29]	; 0xffffffe3
   1332c:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   13330:	cmp	r3, #0
   13334:	beq	133b4 <b64_decode@@Base+0x1f0>
   13338:	movw	r3, #30176	; 0x75e0
   1333c:	movt	r3, #2
   13340:	ldrd	r2, [r3, #40]	; 0x28
   13344:	adds	r1, r2, #1
   13348:	str	r1, [fp, #-100]	; 0xffffff9c
   1334c:	adc	r3, r3, #0
   13350:	str	r3, [fp, #-96]	; 0xffffffa0
   13354:	movw	r3, #30176	; 0x75e0
   13358:	movt	r3, #2
   1335c:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   13360:	strd	r0, [r3, #40]	; 0x28
   13364:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   13368:	cmp	r3, #36	; 0x24
   1336c:	beq	133ac <b64_decode@@Base+0x1e8>
   13370:	movw	r3, #30176	; 0x75e0
   13374:	movt	r3, #2
   13378:	ldrd	r2, [r3, #48]	; 0x30
   1337c:	adds	r1, r2, #1
   13380:	str	r1, [fp, #-108]	; 0xffffff94
   13384:	adc	r3, r3, #0
   13388:	str	r3, [fp, #-104]	; 0xffffff98
   1338c:	movw	r3, #30176	; 0x75e0
   13390:	movt	r3, #2
   13394:	ldrd	r0, [fp, #-108]	; 0xffffff94
   13398:	strd	r0, [r3, #48]	; 0x30
   1339c:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   133a0:	sub	r3, r3, #61	; 0x3d
   133a4:	uxtb	r3, r3
   133a8:	b	133b0 <b64_decode@@Base+0x1ec>
   133ac:	mov	r3, #0
   133b0:	strb	r3, [fp, #-29]	; 0xffffffe3
   133b4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   133b8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   133bc:	cmp	r2, r3
   133c0:	bcs	133fc <b64_decode@@Base+0x238>
   133c4:	movw	r3, #30176	; 0x75e0
   133c8:	movt	r3, #2
   133cc:	ldrd	r2, [r3, #56]	; 0x38
   133d0:	adds	r1, r2, #1
   133d4:	str	r1, [fp, #-116]	; 0xffffff8c
   133d8:	adc	r3, r3, #0
   133dc:	str	r3, [fp, #-112]	; 0xffffff90
   133e0:	movw	r3, #30176	; 0x75e0
   133e4:	movt	r3, #2
   133e8:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   133ec:	strd	r0, [r3, #56]	; 0x38
   133f0:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   133f4:	cmp	r3, #0
   133f8:	beq	13280 <b64_decode@@Base+0xbc>
   133fc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13400:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13404:	cmp	r2, r3
   13408:	bcc	13444 <b64_decode@@Base+0x280>
   1340c:	movw	r3, #30176	; 0x75e0
   13410:	movt	r3, #2
   13414:	ldrd	r2, [r3, #64]	; 0x40
   13418:	adds	r1, r2, #1
   1341c:	str	r1, [fp, #-124]	; 0xffffff84
   13420:	adc	r3, r3, #0
   13424:	str	r3, [fp, #-120]	; 0xffffff88
   13428:	movw	r3, #30176	; 0x75e0
   1342c:	movt	r3, #2
   13430:	ldrd	r0, [fp, #-124]	; 0xffffff84
   13434:	strd	r0, [r3, #64]	; 0x40
   13438:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   1343c:	cmp	r3, #0
   13440:	beq	134ac <b64_decode@@Base+0x2e8>
   13444:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13448:	add	r3, r3, #1
   1344c:	str	r3, [fp, #-44]	; 0xffffffd4
   13450:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   13454:	cmp	r3, #0
   13458:	beq	134ec <b64_decode@@Base+0x328>
   1345c:	movw	r3, #30176	; 0x75e0
   13460:	movt	r3, #2
   13464:	ldrd	r2, [r3, #80]	; 0x50
   13468:	adds	r1, r2, #1
   1346c:	str	r1, [fp, #-140]	; 0xffffff74
   13470:	adc	r3, r3, #0
   13474:	str	r3, [fp, #-136]	; 0xffffff78
   13478:	movw	r3, #30176	; 0x75e0
   1347c:	movt	r3, #2
   13480:	ldrd	r0, [fp, #-140]	; 0xffffff74
   13484:	strd	r0, [r3, #80]	; 0x50
   13488:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   1348c:	sub	r3, r3, #1
   13490:	uxtb	r1, r3
   13494:	sub	r2, fp, #56	; 0x38
   13498:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1349c:	add	r2, r2, r3
   134a0:	mov	r3, r1
   134a4:	strb	r3, [r2]
   134a8:	b	134ec <b64_decode@@Base+0x328>
   134ac:	movw	r3, #30176	; 0x75e0
   134b0:	movt	r3, #2
   134b4:	ldrd	r2, [r3, #72]	; 0x48
   134b8:	adds	r1, r2, #1
   134bc:	str	r1, [fp, #-132]	; 0xffffff7c
   134c0:	adc	r3, r3, #0
   134c4:	str	r3, [fp, #-128]	; 0xffffff80
   134c8:	movw	r3, #30176	; 0x75e0
   134cc:	movt	r3, #2
   134d0:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   134d4:	strd	r0, [r3, #72]	; 0x48
   134d8:	sub	r2, fp, #56	; 0x38
   134dc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   134e0:	add	r2, r2, r3
   134e4:	mov	r3, #0
   134e8:	strb	r3, [r2]
   134ec:	ldr	r3, [fp, #-40]	; 0xffffffd8
   134f0:	add	r3, r3, #1
   134f4:	str	r3, [fp, #-40]	; 0xffffffd8
   134f8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   134fc:	cmp	r3, #3
   13500:	bgt	13540 <b64_decode@@Base+0x37c>
   13504:	movw	r3, #30176	; 0x75e0
   13508:	movt	r3, #2
   1350c:	ldrd	r2, [r3, #88]	; 0x58
   13510:	adds	r1, r2, #1
   13514:	str	r1, [fp, #-148]	; 0xffffff6c
   13518:	adc	r3, r3, #0
   1351c:	str	r3, [fp, #-144]	; 0xffffff70
   13520:	movw	r3, #30176	; 0x75e0
   13524:	movt	r3, #2
   13528:	ldrd	r0, [fp, #-148]	; 0xffffff6c
   1352c:	strd	r0, [r3, #88]	; 0x58
   13530:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13534:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13538:	cmp	r2, r3
   1353c:	bcc	13254 <b64_decode@@Base+0x90>
   13540:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13544:	cmp	r3, #0
   13548:	beq	135c8 <b64_decode@@Base+0x404>
   1354c:	movw	r3, #30176	; 0x75e0
   13550:	movt	r3, #2
   13554:	ldrd	r2, [r3, #96]	; 0x60
   13558:	adds	r1, r2, #1
   1355c:	str	r1, [fp, #-156]	; 0xffffff64
   13560:	adc	r3, r3, #0
   13564:	str	r3, [fp, #-152]	; 0xffffff68
   13568:	movw	r3, #30176	; 0x75e0
   1356c:	movt	r3, #2
   13570:	ldrd	r0, [fp, #-156]	; 0xffffff64
   13574:	strd	r0, [r3, #96]	; 0x60
   13578:	sub	r3, fp, #56	; 0x38
   1357c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13580:	mov	r0, r3
   13584:	bl	12fd4 <b64_encode@@Base+0x368>
   13588:	movw	r3, #30176	; 0x75e0
   1358c:	movt	r3, #2
   13590:	ldrd	r2, [r3, #104]	; 0x68
   13594:	adds	r1, r2, #1
   13598:	str	r1, [fp, #-164]	; 0xffffff5c
   1359c:	adc	r3, r3, #0
   135a0:	str	r3, [fp, #-160]	; 0xffffff60
   135a4:	movw	r3, #30176	; 0x75e0
   135a8:	movt	r3, #2
   135ac:	ldrd	r0, [fp, #-164]	; 0xffffff5c
   135b0:	strd	r0, [r3, #104]	; 0x68
   135b4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   135b8:	sub	r2, r3, #1
   135bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   135c0:	add	r3, r3, r2
   135c4:	str	r3, [fp, #-36]	; 0xffffffdc
   135c8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   135cc:	ldr	r3, [fp, #-68]	; 0xffffffbc
   135d0:	cmp	r2, r3
   135d4:	bcc	13220 <b64_decode@@Base+0x5c>
   135d8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   135dc:	ldr	r3, [fp, #-72]	; 0xffffffb8
   135e0:	sub	r3, r2, r3
   135e4:	mov	r0, r3
   135e8:	sub	sp, fp, #28
   135ec:	ldrd	r4, [sp]
   135f0:	ldrd	r6, [sp, #8]
   135f4:	ldrd	r8, [sp, #16]
   135f8:	ldr	fp, [sp, #24]
   135fc:	add	sp, sp, #28
   13600:	pop	{pc}		; (ldr pc, [sp], #4)
   13604:	str	fp, [sp, #-8]!
   13608:	str	lr, [sp, #4]
   1360c:	add	fp, sp, #4
   13610:	movw	r0, #29304	; 0x7278
   13614:	movt	r0, #2
   13618:	bl	1566c <__gcov_sort_n_vals@@Base+0x4a0>
   1361c:	sub	sp, fp, #4
   13620:	ldr	fp, [sp]
   13624:	add	sp, sp, #4
   13628:	pop	{pc}		; (ldr pc, [sp], #4)
   1362c:	str	fp, [sp, #-8]!
   13630:	str	lr, [sp, #4]
   13634:	add	fp, sp, #4
   13638:	bl	155fc <__gcov_sort_n_vals@@Base+0x430>
   1363c:	sub	sp, fp, #4
   13640:	ldr	fp, [sp]
   13644:	add	sp, sp, #4
   13648:	pop	{pc}		; (ldr pc, [sp], #4)
   1364c:	b	148f0 <b64_decode@@Base+0x172c>
   13650:	push	{r4, r5, r6, r7, r8, lr}
   13654:	subs	r5, r1, #0
   13658:	popeq	{r4, r5, r6, r7, r8, pc}
   1365c:	mov	r4, r0
   13660:	bl	1364c <b64_decode@@Base+0x488>
   13664:	ldr	r3, [r4]
   13668:	ldr	r2, [r4, #4]
   1366c:	adds	r6, r3, r0
   13670:	adc	r7, r2, r1
   13674:	subs	r5, r5, #1
   13678:	strd	r6, [r4], #8
   1367c:	bne	13660 <b64_decode@@Base+0x49c>
   13680:	pop	{r4, r5, r6, r7, r8, pc}
   13684:	ldr	r3, [pc, #20]	; 136a0 <b64_decode@@Base+0x4dc>
   13688:	ldr	r2, [pc, #20]	; 136a4 <b64_decode@@Base+0x4e0>
   1368c:	add	r3, pc, r3
   13690:	ldr	r3, [r3, r2]
   13694:	ldmib	r3, {r0, r3}
   13698:	add	r0, r0, r3
   1369c:	bx	lr
   136a0:	andeq	r3, r1, ip, ror #18
   136a4:	andeq	r0, r0, r0, asr #1
   136a8:	ldr	r3, [pc, #28]	; 136cc <b64_decode@@Base+0x508>
   136ac:	ldr	r2, [pc, #28]	; 136d0 <b64_decode@@Base+0x50c>
   136b0:	add	r3, pc, r3
   136b4:	ldr	r3, [r3, r2]
   136b8:	ldr	r2, [r3]
   136bc:	cmp	r2, #0
   136c0:	ldrne	r0, [r3, #20]
   136c4:	moveq	r0, #1
   136c8:	bx	lr
   136cc:	andeq	r3, r1, r8, asr #18
   136d0:	andeq	r0, r0, r0, asr #1
   136d4:	bx	lr
   136d8:	ldr	ip, [pc, #32]	; 13700 <b64_decode@@Base+0x53c>
   136dc:	mov	r3, #32
   136e0:	teq	r0, r1
   136e4:	movmi	r2, ip
   136e8:	movpl	r2, #0
   136ec:	subs	r3, r3, #1
   136f0:	lsl	r1, r1, #1
   136f4:	eor	r0, r2, r0, lsl #1
   136f8:	bne	136e0 <b64_decode@@Base+0x51c>
   136fc:	bx	lr
   13700:	strbeq	r1, [r1], #3511	; 0xdb7
   13704:	ldr	r2, [pc, #60]	; 13748 <b64_decode@@Base+0x584>
   13708:	ldr	r3, [pc, #60]	; 1374c <b64_decode@@Base+0x588>
   1370c:	add	r2, pc, r2
   13710:	push	{r4, lr}
   13714:	ldr	r4, [r2, r3]
   13718:	ldr	r0, [r4]
   1371c:	cmp	r0, #0
   13720:	popeq	{r4, pc}
   13724:	ldr	r3, [pc, #36]	; 13750 <b64_decode@@Base+0x58c>
   13728:	ldr	r3, [r2, r3]
   1372c:	ldr	r3, [r3]
   13730:	cmp	r0, r3
   13734:	popeq	{r4, pc}
   13738:	bl	11028 <fclose@plt>
   1373c:	mov	r3, #0
   13740:	str	r3, [r4]
   13744:	pop	{r4, pc}
   13748:	andeq	r3, r1, ip, ror #17
   1374c:	andeq	r0, r0, r4, asr #1
   13750:	strheq	r0, [r0], -r4
   13754:	ldr	r3, [pc, #76]	; 137a8 <b64_decode@@Base+0x5e4>
   13758:	ldr	r1, [pc, #76]	; 137ac <b64_decode@@Base+0x5e8>
   1375c:	add	r3, pc, r3
   13760:	push	{r4, r5, r6, lr}
   13764:	mov	r5, r0
   13768:	ldr	r4, [r3, r1]
   1376c:	lsl	r1, r0, #2
   13770:	mov	r0, r4
   13774:	mov	r2, #1
   13778:	ldr	r3, [r0], #28
   1377c:	bl	10f44 <fwrite@plt>
   13780:	cmp	r0, #1
   13784:	movne	r3, #1
   13788:	ldr	r0, [r4, #8]
   1378c:	strne	r3, [r4, #20]
   13790:	ldr	r3, [r4, #4]
   13794:	sub	r0, r0, r5
   13798:	add	r3, r3, r5
   1379c:	str	r3, [r4, #4]
   137a0:	str	r0, [r4, #8]
   137a4:	pop	{r4, r5, r6, pc}
   137a8:	muleq	r1, ip, r8
   137ac:	andeq	r0, r0, r0, asr #1
   137b0:	ldr	r3, [pc, #80]	; 13808 <b64_decode@@Base+0x644>
   137b4:	ldr	r2, [pc, #80]	; 1380c <b64_decode@@Base+0x648>
   137b8:	add	r3, pc, r3
   137bc:	push	{r4, r5, r6, lr}
   137c0:	mov	r5, r0
   137c4:	ldr	r4, [r3, r2]
   137c8:	ldr	r3, [r4, #8]
   137cc:	cmp	r3, #1024	; 0x400
   137d0:	bcs	137e8 <b64_decode@@Base+0x624>
   137d4:	add	r0, r3, #7
   137d8:	add	r3, r5, r3
   137dc:	str	r3, [r4, #8]
   137e0:	add	r0, r4, r0, lsl #2
   137e4:	pop	{r4, r5, r6, pc}
   137e8:	mov	r0, #1024	; 0x400
   137ec:	bl	13754 <b64_decode@@Base+0x590>
   137f0:	ldr	r3, [r4, #8]
   137f4:	cmp	r3, #0
   137f8:	addne	r2, r4, #4096	; 0x1000
   137fc:	ldrne	r2, [r2, #28]
   13800:	strne	r2, [r4, #28]
   13804:	b	137d4 <b64_decode@@Base+0x610>
   13808:	andeq	r3, r1, r0, asr #16
   1380c:	andeq	r0, r0, r0, asr #1
   13810:	ldr	r3, [pc, #192]	; 138d8 <b64_decode@@Base+0x714>
   13814:	ldr	r2, [pc, #192]	; 138dc <b64_decode@@Base+0x718>
   13818:	add	r3, pc, r3
   1381c:	push	{r4, r5, r6, lr}
   13820:	ldr	r4, [r3, r2]
   13824:	ldr	r2, [r4, #24]
   13828:	ldr	r3, [r4, #8]
   1382c:	ldr	ip, [r4, #12]
   13830:	cmp	r2, #0
   13834:	sub	ip, ip, r3
   13838:	ble	138b4 <b64_decode@@Base+0x6f0>
   1383c:	cmp	ip, r0
   13840:	mov	r5, r0
   13844:	bcs	138a0 <b64_decode@@Base+0x6dc>
   13848:	ldr	r2, [r4, #4]
   1384c:	cmp	ip, #0
   13850:	add	r2, r2, r3
   13854:	str	r2, [r4, #4]
   13858:	addne	r2, r4, #28
   1385c:	mov	r0, r4
   13860:	ldrne	r3, [r2, r3, lsl #2]
   13864:	mov	r6, #0
   13868:	strne	r3, [r4, #28]
   1386c:	ldr	r3, [r0], #28
   13870:	mov	r2, #4096	; 0x1000
   13874:	add	r0, r0, ip, lsl #2
   13878:	mov	r1, #1
   1387c:	str	ip, [r4, #12]
   13880:	str	r6, [r4, #8]
   13884:	bl	10f5c <fread@plt>
   13888:	ldr	r3, [r4, #12]
   1388c:	add	r0, r3, r0, lsr #2
   13890:	cmp	r0, r5
   13894:	str	r0, [r4, #12]
   13898:	bcc	138bc <b64_decode@@Base+0x6f8>
   1389c:	ldr	r3, [r4, #8]
   138a0:	add	r0, r3, #7
   138a4:	add	r5, r5, r3
   138a8:	str	r5, [r4, #8]
   138ac:	add	r0, r4, r0, lsl #2
   138b0:	pop	{r4, r5, r6, pc}
   138b4:	mov	r0, #0
   138b8:	pop	{r4, r5, r6, pc}
   138bc:	ldr	r3, [r4, #16]
   138c0:	str	r6, [r4, #12]
   138c4:	add	r5, r5, r3
   138c8:	sub	r5, r5, r0
   138cc:	str	r5, [r4, #16]
   138d0:	mov	r0, r6
   138d4:	pop	{r4, r5, r6, pc}
   138d8:	andeq	r3, r1, r0, ror #15
   138dc:	andeq	r0, r0, r0, asr #1
   138e0:	push	{r4, r5, r6, lr}
   138e4:	ldr	r4, [pc, #92]	; 13948 <b64_decode@@Base+0x784>
   138e8:	ldr	r3, [pc, #92]	; 1394c <b64_decode@@Base+0x788>
   138ec:	add	r4, pc, r4
   138f0:	ldr	r5, [r4, r3]
   138f4:	ldr	r0, [r5]
   138f8:	cmp	r0, #0
   138fc:	popne	{r4, r5, r6, pc}
   13900:	ldr	r0, [pc, #72]	; 13950 <b64_decode@@Base+0x78c>
   13904:	add	r0, pc, r0
   13908:	bl	10f74 <getenv@plt>
   1390c:	cmp	r0, #0
   13910:	beq	13940 <b64_decode@@Base+0x77c>
   13914:	ldr	r1, [pc, #56]	; 13954 <b64_decode@@Base+0x790>
   13918:	add	r1, pc, r1
   1391c:	bl	11058 <fopen64@plt>
   13920:	str	r0, [r5]
   13924:	cmp	r0, #0
   13928:	popne	{r4, r5, r6, pc}
   1392c:	ldr	r3, [pc, #36]	; 13958 <b64_decode@@Base+0x794>
   13930:	ldr	r3, [r4, r3]
   13934:	ldr	r0, [r3]
   13938:	str	r0, [r5]
   1393c:	pop	{r4, r5, r6, pc}
   13940:	ldr	r0, [r5]
   13944:	b	13924 <b64_decode@@Base+0x760>
   13948:	andeq	r3, r1, ip, lsl #14
   1394c:	andeq	r0, r0, r4, asr #1
   13950:	andeq	r2, r0, ip, ror #19
   13954:	andeq	r2, r0, r8, ror #19
   13958:	strheq	r0, [r0], -r4
   1395c:	push	{r0, r1, r2, r3}
   13960:	push	{lr}		; (str lr, [sp, #-4]!)
   13964:	sub	sp, sp, #12
   13968:	add	r3, sp, #20
   1396c:	str	r3, [sp, #4]
   13970:	bl	138e0 <b64_decode@@Base+0x71c>
   13974:	ldr	r1, [sp, #16]
   13978:	ldr	r2, [sp, #4]
   1397c:	bl	11040 <vfprintf@plt>
   13980:	add	sp, sp, #12
   13984:	pop	{lr}		; (ldr lr, [sp], #4)
   13988:	add	sp, sp, #16
   1398c:	bx	lr
   13990:	push	{r4, r5, r6, r7, r8, lr}
   13994:	subs	r6, r1, #0
   13998:	beq	139ec <b64_decode@@Base+0x828>
   1399c:	cmp	r2, #0
   139a0:	ldr	r7, [r6]
   139a4:	beq	139dc <b64_decode@@Base+0x818>
   139a8:	add	r4, r0, #12
   139ac:	add	r5, r4, r2, lsl #2
   139b0:	mov	r3, #0
   139b4:	ldr	r2, [r4, #4]!
   139b8:	add	r1, r6, r3, lsl #3
   139bc:	cmp	r2, #0
   139c0:	add	r8, r3, #1
   139c4:	beq	139d4 <b64_decode@@Base+0x810>
   139c8:	ldr	r0, [r1, #28]
   139cc:	bl	10efc <free@plt>
   139d0:	mov	r3, r8
   139d4:	cmp	r4, r5
   139d8:	bne	139b4 <b64_decode@@Base+0x7f0>
   139dc:	mov	r0, r6
   139e0:	bl	10efc <free@plt>
   139e4:	mov	r0, r7
   139e8:	pop	{r4, r5, r6, r7, r8, pc}
   139ec:	mov	r7, r6
   139f0:	b	139e4 <b64_decode@@Base+0x820>
   139f4:	push	{r4, r5}
   139f8:	mov	r4, r0
   139fc:	mov	r5, r1
   13a00:	orrs	r3, r4, r5
   13a04:	beq	13a48 <b64_decode@@Base+0x884>
   13a08:	cmp	r1, #0
   13a0c:	clzeq	r2, r0
   13a10:	addeq	r2, r2, #32
   13a14:	clzne	r2, r1
   13a18:	rsb	r3, r2, #63	; 0x3f
   13a1c:	cmp	r3, #1
   13a20:	bls	13a48 <b64_decode@@Base+0x884>
   13a24:	rsb	r1, r2, #61	; 0x3d
   13a28:	rsb	r0, r1, #32
   13a2c:	lsr	r3, r4, r1
   13a30:	sub	r1, r1, #32
   13a34:	orr	r3, r3, r5, lsl r0
   13a38:	orr	r3, r3, r5, lsr r1
   13a3c:	rsb	r2, r2, #1073741886	; 0x4000003e
   13a40:	and	r0, r3, #3
   13a44:	add	r0, r0, r2, lsl #2
   13a48:	pop	{r4, r5}
   13a4c:	bx	lr
   13a50:	push	{r4, r5, r6, lr}
   13a54:	mov	r1, r3
   13a58:	mov	r6, r0
   13a5c:	mov	r0, r2
   13a60:	mov	r4, r2
   13a64:	mov	r5, r3
   13a68:	bl	139f4 <b64_decode@@Base+0x830>
   13a6c:	add	r0, r0, r0, lsl #1
   13a70:	lsl	r0, r0, #3
   13a74:	add	r3, r6, r0
   13a78:	ldr	r1, [r6, r0]
   13a7c:	ldr	r2, [r3, #16]
   13a80:	add	r1, r1, #1
   13a84:	str	r1, [r6, r0]
   13a88:	ldrd	r0, [r3, #8]
   13a8c:	ldr	ip, [r3, #20]
   13a90:	adds	r2, r2, r4
   13a94:	str	r2, [r3, #16]
   13a98:	adc	r2, ip, r5
   13a9c:	cmp	r4, r0
   13aa0:	sbcs	r1, r5, r1
   13aa4:	str	r2, [r3, #20]
   13aa8:	strdlt	r4, [r3, #8]
   13aac:	pop	{r4, r5, r6, pc}
   13ab0:	ldr	r3, [r1, #8]
   13ab4:	cmp	r3, #0
   13ab8:	bxeq	lr
   13abc:	add	r2, r1, #6016	; 0x1780
   13ac0:	push	{r4, r5, r6, r7, r8, lr}
   13ac4:	mov	r3, r1
   13ac8:	mov	r8, r1
   13acc:	mov	r7, r0
   13ad0:	ldrd	r4, [r1, #24]
   13ad4:	add	r2, r2, #32
   13ad8:	mov	ip, #0
   13adc:	mov	r0, #0
   13ae0:	mov	r1, #0
   13ae4:	str	ip, [r3, #40]	; 0x28
   13ae8:	strd	r4, [r3, #48]	; 0x30
   13aec:	strd	r0, [r3, #56]	; 0x38
   13af0:	add	r3, r3, #24
   13af4:	cmp	r3, r2
   13af8:	bne	13ae4 <b64_decode@@Base+0x920>
   13afc:	cmp	r7, #0
   13b00:	popeq	{r4, r5, r6, r7, r8, pc}
   13b04:	add	r8, r8, #40	; 0x28
   13b08:	ldr	r3, [r7, #16]
   13b0c:	cmp	r3, #0
   13b10:	beq	13b98 <b64_decode@@Base+0x9d4>
   13b14:	ldr	r2, [r7, #52]	; 0x34
   13b18:	cmp	r2, #0
   13b1c:	beq	13b98 <b64_decode@@Base+0x9d4>
   13b20:	mov	r6, #0
   13b24:	b	13b34 <b64_decode@@Base+0x970>
   13b28:	add	r6, r6, #1
   13b2c:	cmp	r2, r6
   13b30:	beq	13b98 <b64_decode@@Base+0x9d4>
   13b34:	ldr	r3, [r7, #56]	; 0x38
   13b38:	ldr	r5, [r3, r6, lsl #2]
   13b3c:	cmp	r5, #0
   13b40:	beq	13b28 <b64_decode@@Base+0x964>
   13b44:	ldr	r3, [r5]
   13b48:	cmp	r3, r7
   13b4c:	bne	13b28 <b64_decode@@Base+0x964>
   13b50:	ldr	r3, [r5, #16]
   13b54:	cmp	r3, #0
   13b58:	beq	13b28 <b64_decode@@Base+0x964>
   13b5c:	mov	r4, #0
   13b60:	ldr	r2, [r5, #20]
   13b64:	lsl	r3, r4, #3
   13b68:	add	r2, r2, r3
   13b6c:	mov	r0, r8
   13b70:	ldrd	r2, [r2]
   13b74:	bl	13a50 <b64_decode@@Base+0x88c>
   13b78:	ldr	r3, [r5, #16]
   13b7c:	add	r4, r4, #1
   13b80:	cmp	r3, r4
   13b84:	bhi	13b60 <b64_decode@@Base+0x99c>
   13b88:	ldr	r2, [r7, #52]	; 0x34
   13b8c:	add	r6, r6, #1
   13b90:	cmp	r2, r6
   13b94:	bne	13b34 <b64_decode@@Base+0x970>
   13b98:	ldr	r7, [r7, #4]
   13b9c:	cmp	r7, #0
   13ba0:	bne	13b08 <b64_decode@@Base+0x944>
   13ba4:	pop	{r4, r5, r6, r7, r8, pc}
   13ba8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13bac:	sub	sp, sp, #12
   13bb0:	mov	r6, r0
   13bb4:	str	r0, [sp, #4]
   13bb8:	mov	r8, r2
   13bbc:	mov	r0, r1
   13bc0:	mov	r4, r1
   13bc4:	ldr	r2, [pc, #364]	; 13d38 <b64_decode@@Base+0xb74>
   13bc8:	mov	r1, #0
   13bcc:	bl	10ff8 <memset@plt>
   13bd0:	mov	r5, #0
   13bd4:	cmp	r6, #0
   13bd8:	str	r5, [r8]
   13bdc:	beq	13d1c <b64_decode@@Base+0xb58>
   13be0:	mov	r9, r5
   13be4:	ldr	r0, [r6, #12]
   13be8:	bl	10fc8 <strlen@plt>
   13bec:	cmp	r5, r0
   13bf0:	strcc	r0, [r8]
   13bf4:	mov	r0, r9
   13bf8:	ldr	r1, [r6, #8]
   13bfc:	bl	136d8 <b64_decode@@Base+0x514>
   13c00:	ldr	r7, [r6, #52]	; 0x34
   13c04:	mov	r1, r7
   13c08:	bl	136d8 <b64_decode@@Base+0x514>
   13c0c:	cmp	r7, #0
   13c10:	mov	r9, r0
   13c14:	beq	13d08 <b64_decode@@Base+0xb44>
   13c18:	ldr	r5, [r6, #56]	; 0x38
   13c1c:	add	r7, r5, r7, lsl #2
   13c20:	sub	r7, r7, #4
   13c24:	sub	r5, r5, #4
   13c28:	b	13c58 <b64_decode@@Base+0xa94>
   13c2c:	ldr	r3, [sl]
   13c30:	mov	r0, r9
   13c34:	cmp	r3, r6
   13c38:	beq	13c74 <b64_decode@@Base+0xab0>
   13c3c:	mov	r1, #0
   13c40:	bl	136d8 <b64_decode@@Base+0x514>
   13c44:	mov	r1, #0
   13c48:	bl	136d8 <b64_decode@@Base+0x514>
   13c4c:	mov	r9, r0
   13c50:	cmp	r5, r7
   13c54:	beq	13d08 <b64_decode@@Base+0xb44>
   13c58:	ldr	sl, [r5, #4]!
   13c5c:	cmp	sl, #0
   13c60:	bne	13c2c <b64_decode@@Base+0xa68>
   13c64:	mov	r1, sl
   13c68:	mov	r0, r9
   13c6c:	bl	136d8 <b64_decode@@Base+0x514>
   13c70:	b	13c44 <b64_decode@@Base+0xa80>
   13c74:	ldr	r1, [sl, #12]
   13c78:	bl	136d8 <b64_decode@@Base+0x514>
   13c7c:	ldr	r1, [sl, #8]
   13c80:	bl	136d8 <b64_decode@@Base+0x514>
   13c84:	ldr	r3, [r6, #16]
   13c88:	cmp	r3, #0
   13c8c:	mov	r9, r0
   13c90:	beq	13c50 <b64_decode@@Base+0xa8c>
   13c94:	ldr	fp, [sl, #16]
   13c98:	ldr	r3, [r4, #8]
   13c9c:	mov	r1, fp
   13ca0:	add	r3, r3, fp
   13ca4:	str	r3, [r4, #8]
   13ca8:	bl	136d8 <b64_decode@@Base+0x514>
   13cac:	cmp	fp, #0
   13cb0:	mov	r9, r0
   13cb4:	beq	13c50 <b64_decode@@Base+0xa8c>
   13cb8:	ldr	r2, [sl, #20]
   13cbc:	ldr	r3, [r4, #16]
   13cc0:	add	lr, r2, fp, lsl #3
   13cc4:	ldr	ip, [r4, #20]
   13cc8:	sub	lr, lr, #8
   13ccc:	sub	r2, r2, #8
   13cd0:	ldrd	r0, [r2, #8]!
   13cd4:	ldrd	sl, [r4, #24]
   13cd8:	adds	r3, r3, r0
   13cdc:	adc	ip, ip, r1
   13ce0:	str	ip, [r4, #20]
   13ce4:	str	r3, [r4, #16]
   13ce8:	ldrd	r0, [r2]
   13cec:	cmp	sl, r0
   13cf0:	sbcs	sl, fp, r1
   13cf4:	strdlt	r0, [r4, #24]
   13cf8:	cmp	lr, r2
   13cfc:	bne	13cd0 <b64_decode@@Base+0xb0c>
   13d00:	cmp	r5, r7
   13d04:	bne	13c58 <b64_decode@@Base+0xa94>
   13d08:	ldr	r6, [r6, #4]
   13d0c:	cmp	r6, #0
   13d10:	beq	13d20 <b64_decode@@Base+0xb5c>
   13d14:	ldr	r5, [r8]
   13d18:	b	13be4 <b64_decode@@Base+0xa20>
   13d1c:	ldr	r9, [sp, #4]
   13d20:	ldr	r0, [sp, #4]
   13d24:	mov	r1, r4
   13d28:	bl	13ab0 <b64_decode@@Base+0x8ec>
   13d2c:	mov	r0, r9
   13d30:	add	sp, sp, #12
   13d34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d38:	andeq	r1, r0, r8, asr #15
   13d3c:	push	{r4, r5, r6, lr}
   13d40:	mov	r4, r0
   13d44:	ldr	r0, [pc, #192]	; 13e0c <b64_decode@@Base+0xc48>
   13d48:	add	r0, pc, r0
   13d4c:	bl	10f74 <getenv@plt>
   13d50:	subs	r3, r0, #0
   13d54:	beq	13d60 <b64_decode@@Base+0xb9c>
   13d58:	bl	1104c <atoi@plt>
   13d5c:	bic	r3, r0, r0, asr #31
   13d60:	ldr	r0, [pc, #168]	; 13e10 <b64_decode@@Base+0xc4c>
   13d64:	str	r3, [r4, #8]
   13d68:	add	r0, pc, r0
   13d6c:	bl	10f74 <getenv@plt>
   13d70:	subs	r6, r0, #0
   13d74:	beq	13de4 <b64_decode@@Base+0xc20>
   13d78:	bl	10fc8 <strlen@plt>
   13d7c:	ldr	r3, [r4, #4]
   13d80:	add	r3, r3, #2
   13d84:	cmp	r0, #0
   13d88:	bne	13dc4 <b64_decode@@Base+0xc00>
   13d8c:	ldr	r2, [r4, #8]
   13d90:	cmp	r2, #0
   13d94:	beq	13df8 <b64_decode@@Base+0xc34>
   13d98:	ldr	r6, [pc, #116]	; 13e14 <b64_decode@@Base+0xc50>
   13d9c:	mov	r5, #1
   13da0:	add	r6, pc, r6
   13da4:	str	r5, [r4, #12]
   13da8:	add	r0, r3, r5
   13dac:	bl	10f8c <malloc@plt>
   13db0:	mov	r2, r5
   13db4:	mov	r1, r6
   13db8:	str	r0, [r4]
   13dbc:	pop	{r4, r5, r6, lr}
   13dc0:	b	10f14 <memcpy@plt>
   13dc4:	sub	r5, r0, #1
   13dc8:	ldrb	r2, [r6, r5]
   13dcc:	cmp	r2, #47	; 0x2f
   13dd0:	movne	r5, r0
   13dd4:	bne	13da4 <b64_decode@@Base+0xbe0>
   13dd8:	cmp	r5, #0
   13ddc:	bne	13da4 <b64_decode@@Base+0xbe0>
   13de0:	b	13d8c <b64_decode@@Base+0xbc8>
   13de4:	ldr	r2, [r4, #8]
   13de8:	ldr	r3, [r4, #4]
   13dec:	cmp	r2, #0
   13df0:	add	r3, r3, #2
   13df4:	bne	13d98 <b64_decode@@Base+0xbd4>
   13df8:	str	r2, [r4, #12]
   13dfc:	mov	r0, r3
   13e00:	bl	10f8c <malloc@plt>
   13e04:	str	r0, [r4]
   13e08:	pop	{r4, r5, r6, pc}
   13e0c:	andeq	r2, r0, r0, asr #11
   13e10:			; <UNDEFINED> instruction: 0x000025b4
   13e14:	andeq	r2, r0, r4, ror #10
   13e18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e1c:	sub	sp, sp, #6080	; 0x17c0
   13e20:	sub	sp, sp, #36	; 0x24
   13e24:	mov	r3, r0
   13e28:	str	r1, [sp, #40]	; 0x28
   13e2c:	mov	r1, #0
   13e30:	mov	r4, r1
   13e34:	str	r0, [sp, #56]	; 0x38
   13e38:	add	r7, r3, #6016	; 0x1780
   13e3c:	add	r0, sp, #64	; 0x40
   13e40:	add	r6, sp, #2016	; 0x7e0
   13e44:	ldr	r2, [pc, #984]	; 14224 <b64_decode@@Base+0x1060>
   13e48:	mov	r5, #251	; 0xfb
   13e4c:	str	r0, [sp, #60]	; 0x3c
   13e50:	str	r5, [sp, #52]	; 0x34
   13e54:	str	r6, [sp, #36]	; 0x24
   13e58:	mov	r9, r4
   13e5c:	bl	10ff8 <memset@plt>
   13e60:	mov	sl, r4
   13e64:	add	r3, r7, #8
   13e68:	mov	r0, r4
   13e6c:	str	r3, [sp, #48]	; 0x30
   13e70:	sub	r3, r6, #1952	; 0x7a0
   13e74:	str	r3, [sp, #44]	; 0x2c
   13e78:	ldr	r3, [sp, #48]	; 0x30
   13e7c:	ldr	r2, [r3, #16]
   13e80:	ldr	r7, [r3]
   13e84:	str	r2, [sp, #16]
   13e88:	ldr	r2, [r3, #20]
   13e8c:	cmp	r7, #0
   13e90:	str	r2, [sp, #20]
   13e94:	beq	141b4 <b64_decode@@Base+0xff0>
   13e98:	ldrd	r2, [r3, #8]
   13e9c:	str	r9, [sp, #12]
   13ea0:	strd	r2, [sp, #24]
   13ea4:	b	13f84 <b64_decode@@Base+0xdc0>
   13ea8:	bls	14218 <b64_decode@@Base+0x1054>
   13eac:	ldr	r3, [sp, #12]
   13eb0:	mov	r2, r4
   13eb4:	umull	r0, r1, r7, r3
   13eb8:	mov	r3, #0
   13ebc:	mla	r1, r7, sl, r1
   13ec0:	bl	15734 <__gcov_sort_n_vals@@Base+0x568>
   13ec4:	mov	r6, r0
   13ec8:	mov	r8, r1
   13ecc:	ldr	r3, [sp, #12]
   13ed0:	sub	r4, r4, r7
   13ed4:	subs	r3, r3, r6
   13ed8:	sbc	sl, sl, r8
   13edc:	mov	fp, r7
   13ee0:	mov	r7, #0
   13ee4:	str	r3, [sp, #12]
   13ee8:	ldr	r0, [sp, #16]
   13eec:	ldr	r3, [sp, #20]
   13ef0:	str	r7, [sp, #16]
   13ef4:	str	r7, [sp, #20]
   13ef8:	adds	r6, r6, r0
   13efc:	ldrd	r0, [sp]
   13f00:	adc	r8, r8, r3
   13f04:	bl	139f4 <b64_decode@@Base+0x830>
   13f08:	ldr	r3, [sp, #44]	; 0x2c
   13f0c:	add	r1, r0, r0, lsl #1
   13f10:	lsl	r1, r1, #3
   13f14:	add	ip, r3, r1
   13f18:	ldr	r3, [sp, #36]	; 0x24
   13f1c:	ldr	lr, [ip, #16]
   13f20:	add	r1, r3, r1
   13f24:	adds	r6, lr, r6
   13f28:	ldr	lr, [ip, #20]
   13f2c:	ldrd	r2, [ip, #8]
   13f30:	adc	lr, lr, r8
   13f34:	ldrd	r8, [sp]
   13f38:	str	lr, [sp, #32]
   13f3c:	orrs	lr, r2, r3
   13f40:	moveq	lr, #1
   13f44:	movne	lr, #0
   13f48:	cmp	r8, r2
   13f4c:	sbcs	r3, r9, r3
   13f50:	orrlt	lr, lr, #1
   13f54:	cmp	lr, #0
   13f58:	str	r6, [ip, #16]
   13f5c:	ldr	r6, [r1, #-1952]	; 0xfffff860
   13f60:	ldr	r3, [sp, #32]
   13f64:	strdne	r8, [ip, #8]
   13f68:	cmp	r4, #0
   13f6c:	add	fp, r6, fp
   13f70:	subeq	r5, r5, #1
   13f74:	cmp	r7, #0
   13f78:	str	r3, [ip, #20]
   13f7c:	str	fp, [r1, #-1952]	; 0xfffff860
   13f80:	beq	141b0 <b64_decode@@Base+0xfec>
   13f84:	cmp	r4, #0
   13f88:	beq	1400c <b64_decode@@Base+0xe48>
   13f8c:	add	r2, r5, r5, lsl #1
   13f90:	ldr	r3, [sp, #40]	; 0x28
   13f94:	add	r2, r3, r2, lsl #3
   13f98:	ldrd	r0, [sp, #24]
   13f9c:	ldr	r3, [r2, #8]
   13fa0:	ldr	r2, [r2, #12]
   13fa4:	adds	r3, r0, r3
   13fa8:	str	r3, [sp]
   13fac:	adc	r3, r1, r2
   13fb0:	cmp	r4, r7
   13fb4:	str	r3, [sp, #4]
   13fb8:	bcs	13ea8 <b64_decode@@Base+0xce4>
   13fbc:	ldr	r6, [sp, #16]
   13fc0:	ldr	r8, [sp, #20]
   13fc4:	mov	r2, r7
   13fc8:	umull	r0, r1, r4, r6
   13fcc:	mov	r3, #0
   13fd0:	mla	r1, r4, r8, r1
   13fd4:	bl	15734 <__gcov_sort_n_vals@@Base+0x568>
   13fd8:	sub	r7, r7, r4
   13fdc:	mov	fp, r4
   13fe0:	mov	r4, #0
   13fe4:	subs	r2, r6, r0
   13fe8:	str	r2, [sp, #16]
   13fec:	sbc	r2, r8, r1
   13ff0:	ldr	r6, [sp, #12]
   13ff4:	mov	r8, sl
   13ff8:	mov	r3, r1
   13ffc:	str	r2, [sp, #20]
   14000:	str	r4, [sp, #12]
   14004:	mov	sl, r4
   14008:	b	13ef8 <b64_decode@@Base+0xd34>
   1400c:	cmp	r5, #0
   14010:	blt	14210 <b64_decode@@Base+0x104c>
   14014:	ldr	r3, [sp, #40]	; 0x28
   14018:	add	r2, r5, r5, lsl #1
   1401c:	ldr	r4, [r3, r2, lsl #3]
   14020:	add	r2, r3, r2, lsl #3
   14024:	cmp	r4, #0
   14028:	bne	141a0 <b64_decode@@Base+0xfdc>
   1402c:	mov	r3, r2
   14030:	ldr	r9, [sp, #12]
   14034:	b	14048 <b64_decode@@Base+0xe84>
   14038:	ldr	r4, [r3]
   1403c:	mov	r2, r3
   14040:	cmp	r4, #0
   14044:	bne	141a0 <b64_decode@@Base+0xfdc>
   14048:	subs	r5, r5, #1
   1404c:	sub	r3, r3, #24
   14050:	bcs	14038 <b64_decode@@Base+0xe74>
   14054:	ldr	r2, [sp, #52]	; 0x34
   14058:	ldr	ip, [sp, #36]	; 0x24
   1405c:	ldr	r4, [sp, #16]
   14060:	lsl	r3, r2, #1
   14064:	add	r1, r3, r2
   14068:	sub	r2, ip, #1952	; 0x7a0
   1406c:	lsl	r1, r1, #3
   14070:	add	r2, r2, r1
   14074:	add	r1, ip, r1
   14078:	ldr	ip, [r2, #16]
   1407c:	ldr	lr, [r1, #-1952]	; 0xfffff860
   14080:	adds	ip, ip, r4
   14084:	add	r7, lr, r7
   14088:	ldrd	r4, [r2, #8]
   1408c:	ldr	lr, [r2, #20]
   14090:	str	r7, [r1, #-1952]	; 0xfffff860
   14094:	ldr	r1, [sp, #20]
   14098:	str	ip, [r2, #16]
   1409c:	adc	lr, lr, r1
   140a0:	orrs	r1, r4, r5
   140a4:	str	lr, [r2, #20]
   140a8:	beq	14180 <b64_decode@@Base+0xfbc>
   140ac:	ldrd	r6, [sp, #24]
   140b0:	cmp	r6, r4
   140b4:	sbcs	r2, r7, r5
   140b8:	blt	14180 <b64_decode@@Base+0xfbc>
   140bc:	ldr	r2, [sp, #52]	; 0x34
   140c0:	ldr	lr, [sp, #60]	; 0x3c
   140c4:	add	ip, r3, r2
   140c8:	ldr	r3, [sp, #56]	; 0x38
   140cc:	lsl	ip, ip, #3
   140d0:	add	r1, lr, ip
   140d4:	add	ip, r3, ip
   140d8:	b	14134 <b64_decode@@Base+0xf70>
   140dc:	ldr	r3, [r1, #-8]
   140e0:	ldr	r6, [ip, #-8]
   140e4:	ldr	r7, [ip, #-4]
   140e8:	ldr	r2, [r1, #-4]
   140ec:	adds	r6, r3, r6
   140f0:	ldrd	r4, [r1, #-16]
   140f4:	adc	r2, r2, r7
   140f8:	ldr	r3, [r1, #-24]	; 0xffffffe8
   140fc:	ldr	r7, [ip, #-24]	; 0xffffffe8
   14100:	orrs	r8, r4, r5
   14104:	add	r3, r3, r7
   14108:	str	r2, [r1, #-4]
   1410c:	str	r3, [r1, #-24]	; 0xffffffe8
   14110:	str	r6, [r1, #-8]
   14114:	ldrd	r2, [ip, #-16]
   14118:	sub	ip, ip, #24
   1411c:	beq	1412c <b64_decode@@Base+0xf68>
   14120:	cmp	r2, r4
   14124:	sbcs	r4, r3, r5
   14128:	bge	14130 <b64_decode@@Base+0xf6c>
   1412c:	strd	r2, [r1, #-16]
   14130:	sub	r1, r1, #24
   14134:	cmp	r1, lr
   14138:	bne	140dc <b64_decode@@Base+0xf18>
   1413c:	ldr	r3, [sp, #36]	; 0x24
   14140:	add	r0, r0, r0, lsl #1
   14144:	sub	r3, r3, #1952	; 0x7a0
   14148:	add	r3, r3, r0, lsl #3
   1414c:	ldr	r1, [sp, #60]	; 0x3c
   14150:	ldr	r2, [r3, #16]
   14154:	ldr	ip, [r3, #20]
   14158:	adds	r9, r2, r9
   1415c:	adc	sl, ip, sl
   14160:	ldr	r0, [sp, #56]	; 0x38
   14164:	ldr	r2, [pc, #184]	; 14224 <b64_decode@@Base+0x1060>
   14168:	str	r9, [r3, #16]
   1416c:	str	sl, [r3, #20]
   14170:	bl	10f14 <memcpy@plt>
   14174:	add	sp, sp, #6080	; 0x17c0
   14178:	add	sp, sp, #36	; 0x24
   1417c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14180:	ldr	r2, [sp, #52]	; 0x34
   14184:	ldrd	r4, [sp, #24]
   14188:	add	r1, r3, r2
   1418c:	ldr	r2, [sp, #36]	; 0x24
   14190:	sub	r2, r2, #1952	; 0x7a0
   14194:	add	r2, r2, r1, lsl #3
   14198:	strd	r4, [r2, #8]
   1419c:	b	140bc <b64_decode@@Base+0xef8>
   141a0:	ldr	r3, [r2, #16]
   141a4:	ldr	sl, [r2, #20]
   141a8:	str	r3, [sp, #12]
   141ac:	b	13f98 <b64_decode@@Base+0xdd4>
   141b0:	ldr	r9, [sp, #12]
   141b4:	ldr	r3, [sp, #52]	; 0x34
   141b8:	sub	r3, r3, #1
   141bc:	str	r3, [sp, #52]	; 0x34
   141c0:	cmn	r3, #1
   141c4:	ldr	r3, [sp, #48]	; 0x30
   141c8:	sub	r3, r3, #24
   141cc:	str	r3, [sp, #48]	; 0x30
   141d0:	bne	13e78 <b64_decode@@Base+0xcb4>
   141d4:	cmp	r4, #0
   141d8:	subne	r5, r5, #1
   141dc:	cmp	r5, #0
   141e0:	blt	1413c <b64_decode@@Base+0xf78>
   141e4:	add	r5, r5, r5, lsl #1
   141e8:	ldr	ip, [sp, #40]	; 0x28
   141ec:	add	r3, ip, r5, lsl #3
   141f0:	ldr	r2, [r3, #16]
   141f4:	ldr	r1, [r3, #20]
   141f8:	adds	r9, r9, r2
   141fc:	adc	sl, sl, r1
   14200:	cmp	ip, r3
   14204:	sub	r3, r3, #24
   14208:	bne	141f0 <b64_decode@@Base+0x102c>
   1420c:	b	1413c <b64_decode@@Base+0xf78>
   14210:	ldr	r9, [sp, #12]
   14214:	b	14054 <b64_decode@@Base+0xe90>
   14218:	ldr	r6, [sp, #12]
   1421c:	mov	r8, sl
   14220:	b	13ecc <b64_decode@@Base+0xd08>
   14224:	andeq	r1, r0, r0, lsr #15
   14228:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1422c:	ldrb	r4, [r0]
   14230:	cmp	r4, #47	; 0x2f
   14234:	addeq	r5, r0, #1
   14238:	ldrbeq	r4, [r0, #1]
   1423c:	movne	r5, r0
   14240:	cmp	r4, #0
   14244:	beq	14298 <b64_decode@@Base+0x10d4>
   14248:	mov	r6, r0
   1424c:	mov	r7, #0
   14250:	mov	r8, #47	; 0x2f
   14254:	ldr	sl, [pc, #136]	; 142e4 <b64_decode@@Base+0x1120>
   14258:	b	14268 <b64_decode@@Base+0x10a4>
   1425c:	ldrb	r4, [r5, #1]!
   14260:	cmp	r4, #0
   14264:	beq	14298 <b64_decode@@Base+0x10d4>
   14268:	cmp	r4, #47	; 0x2f
   1426c:	bne	1425c <b64_decode@@Base+0x1098>
   14270:	strb	r7, [r5]
   14274:	mov	r1, #0
   14278:	mov	r0, r6
   1427c:	bl	1101c <access@plt>
   14280:	cmn	r0, #1
   14284:	beq	142a4 <b64_decode@@Base+0x10e0>
   14288:	strb	r8, [r5]
   1428c:	ldrb	r4, [r5, #1]!
   14290:	cmp	r4, #0
   14294:	bne	14268 <b64_decode@@Base+0x10a4>
   14298:	mov	r9, #0
   1429c:	mov	r0, r9
   142a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   142a4:	mov	r1, sl
   142a8:	mov	r0, r6
   142ac:	bl	10fec <mkdir@plt>
   142b0:	cmn	r0, #1
   142b4:	mov	r9, r0
   142b8:	bne	14288 <b64_decode@@Base+0x10c4>
   142bc:	bl	10fe0 <__errno_location@plt>
   142c0:	ldr	r3, [r0]
   142c4:	cmp	r3, #17
   142c8:	beq	14288 <b64_decode@@Base+0x10c4>
   142cc:	ldr	r0, [pc, #20]	; 142e8 <b64_decode@@Base+0x1124>
   142d0:	mov	r1, r6
   142d4:	add	r0, pc, r0
   142d8:	bl	1395c <b64_decode@@Base+0x798>
   142dc:	strb	r4, [r5]
   142e0:	b	1429c <b64_decode@@Base+0x10d8>
   142e4:	andeq	r0, r0, sp, ror #3
   142e8:	andeq	r2, r0, r4, asr r0
   142ec:	ldr	r3, [pc, #76]	; 14340 <b64_decode@@Base+0x117c>
   142f0:	cmp	r1, r3
   142f4:	beq	14338 <b64_decode@@Base+0x1174>
   142f8:	cmp	r2, #0
   142fc:	ldr	ip, [pc, #64]	; 14344 <b64_decode@@Base+0x1180>
   14300:	push	{lr}		; (str lr, [sp, #-4]!)
   14304:	rev	r3, r1
   14308:	sub	sp, sp, #12
   1430c:	ldreq	r2, [r0]
   14310:	ldr	r0, [pc, #48]	; 14348 <b64_decode@@Base+0x1184>
   14314:	stm	sp, {r3, ip}
   14318:	mov	r1, r2
   1431c:	mov	r3, sp
   14320:	add	r2, sp, #4
   14324:	add	r0, pc, r0
   14328:	bl	1395c <b64_decode@@Base+0x798>
   1432c:	mov	r0, #0
   14330:	add	sp, sp, #12
   14334:	pop	{pc}		; (ldr pc, [sp], #4)
   14338:	mov	r0, #1
   1433c:	bx	lr
   14340:	teqmi	r8, sl, lsr #6
   14344:	bcs	ce2450 <__bss_end__@@Base+0xcb9da4>
   14348:	andeq	r2, r0, ip, lsr #32
   1434c:	ldr	r2, [r2]
   14350:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14354:	cmp	r2, #0
   14358:	mov	r4, r3
   1435c:	ldr	r2, [r3, #12]
   14360:	ldr	r3, [sp, #32]
   14364:	beq	14450 <b64_decode@@Base+0x128c>
   14368:	cmp	r1, #0
   1436c:	addeq	r1, r2, #1
   14370:	streq	r1, [r4, #12]
   14374:	cmp	r2, #0
   14378:	ldr	r0, [r4, #16]
   1437c:	ldr	lr, [r4, #20]
   14380:	ldrd	r6, [r4, #24]
   14384:	ldr	r2, [r4, #32]
   14388:	ldr	r1, [r4, #36]	; 0x24
   1438c:	bne	143fc <b64_decode@@Base+0x1238>
   14390:	ldr	ip, [r3, #8]
   14394:	str	ip, [r4, #8]
   14398:	ldr	ip, [r3, #16]
   1439c:	ldr	r5, [r3, #20]
   143a0:	adds	r0, ip, r0
   143a4:	adc	lr, r5, lr
   143a8:	str	r0, [r4, #16]
   143ac:	str	lr, [r4, #20]
   143b0:	ldrd	r8, [r3, #24]
   143b4:	cmp	r6, r8
   143b8:	sbcs	r0, r7, r9
   143bc:	bge	14470 <b64_decode@@Base+0x12ac>
   143c0:	strd	r8, [r4, #24]
   143c4:	ldr	r0, [r3, #24]
   143c8:	ldr	ip, [r3, #28]
   143cc:	adds	r2, r0, r2
   143d0:	adc	r1, ip, r1
   143d4:	str	r1, [r4, #36]	; 0x24
   143d8:	str	r2, [r4, #32]
   143dc:	add	r1, r3, #40	; 0x28
   143e0:	ldr	r2, [pc, #176]	; 14498 <b64_decode@@Base+0x12d4>
   143e4:	add	r0, r4, #40	; 0x28
   143e8:	bl	10f14 <memcpy@plt>
   143ec:	ldr	r3, [sp, #36]	; 0x24
   143f0:	mov	r0, #0
   143f4:	str	r3, [r4]
   143f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   143fc:	ldr	ip, [r3, #16]
   14400:	ldr	r5, [r3, #20]
   14404:	adds	r0, ip, r0
   14408:	adc	lr, r5, lr
   1440c:	str	r0, [r4, #16]
   14410:	str	lr, [r4, #20]
   14414:	ldrd	r8, [r3, #24]
   14418:	cmp	r6, r8
   1441c:	sbcs	r0, r7, r9
   14420:	bge	14484 <b64_decode@@Base+0x12c0>
   14424:	strd	r8, [r4, #24]
   14428:	ldr	r0, [r3, #24]
   1442c:	ldr	ip, [r3, #28]
   14430:	adds	r2, r0, r2
   14434:	adc	r1, ip, r1
   14438:	str	r1, [r4, #36]	; 0x24
   1443c:	str	r2, [r4, #32]
   14440:	add	r1, r3, #40	; 0x28
   14444:	add	r0, r4, #40	; 0x28
   14448:	bl	13e18 <b64_decode@@Base+0xc54>
   1444c:	b	143ec <b64_decode@@Base+0x1228>
   14450:	cmp	r2, #0
   14454:	beq	143ec <b64_decode@@Base+0x1228>
   14458:	mov	r1, r0
   1445c:	ldr	r0, [pc, #56]	; 1449c <b64_decode@@Base+0x12d8>
   14460:	add	r0, pc, r0
   14464:	bl	1395c <b64_decode@@Base+0x798>
   14468:	mvn	r0, #0
   1446c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14470:	adds	r2, r2, r8
   14474:	adc	r1, r1, r9
   14478:	str	r1, [r4, #36]	; 0x24
   1447c:	str	r2, [r4, #32]
   14480:	b	143dc <b64_decode@@Base+0x1218>
   14484:	adds	r2, r2, r8
   14488:	adc	r1, r1, r9
   1448c:	str	r1, [r4, #36]	; 0x24
   14490:	str	r2, [r4, #32]
   14494:	b	14440 <b64_decode@@Base+0x127c>
   14498:	andeq	r1, r0, r0, lsr #15
   1449c:	andeq	r1, r0, r8, lsr #30
   144a0:	ldr	r0, [pc, #52]	; 144dc <b64_decode@@Base+0x1318>
   144a4:	ldr	r3, [pc, #52]	; 144e0 <b64_decode@@Base+0x131c>
   144a8:	add	r0, pc, r0
   144ac:	push	{lr}		; (str lr, [sp, #-4]!)
   144b0:	mov	ip, #0
   144b4:	ldr	r3, [r0, r3]
   144b8:	mvn	lr, #0
   144bc:	mov	r2, ip
   144c0:	str	lr, [r3, #24]
   144c4:	mov	r1, ip
   144c8:	ldr	r0, [r3]
   144cc:	pop	{lr}		; (ldr lr, [sp], #4)
   144d0:	str	ip, [r3, #4]
   144d4:	str	ip, [r3, #8]
   144d8:	b	11070 <fseek@plt>
   144dc:	andeq	r2, r1, r0, asr fp
   144e0:	andeq	r0, r0, r0, asr #1
   144e4:	push	{r4, r5, r6, r7, lr}
   144e8:	mov	r2, #0
   144ec:	sub	sp, sp, #36	; 0x24
   144f0:	mov	r3, #0
   144f4:	mov	r4, #0
   144f8:	mov	r6, r0
   144fc:	strd	r2, [sp, #8]
   14500:	strd	r2, [sp, #16]
   14504:	strh	r4, [sp, #2]
   14508:	bl	10fbc <getpid@plt>
   1450c:	ldr	r3, [pc, #196]	; 145d8 <b64_decode@@Base+0x1414>
   14510:	ldr	ip, [pc, #196]	; 145dc <b64_decode@@Base+0x1418>
   14514:	add	r3, pc, r3
   14518:	mvn	lr, #0
   1451c:	mov	r7, #1
   14520:	ldr	r2, [pc, #184]	; 145e0 <b64_decode@@Base+0x141c>
   14524:	mov	r1, #66	; 0x42
   14528:	str	r0, [sp, #24]
   1452c:	ldr	r5, [r3, ip]
   14530:	mov	r0, r6
   14534:	strh	r7, [sp]
   14538:	str	r4, [r5, #4]
   1453c:	str	r4, [r5, #12]
   14540:	str	r4, [r5, #8]
   14544:	str	r4, [r5, #20]
   14548:	str	lr, [r5, #16]
   1454c:	bl	10f68 <open64@plt>
   14550:	subs	r6, r0, #0
   14554:	movlt	r0, r4
   14558:	blt	145bc <b64_decode@@Base+0x13f8>
   1455c:	mov	r4, sp
   14560:	mov	r2, r4
   14564:	mov	r1, #14
   14568:	mov	r0, r6
   1456c:	bl	11034 <fcntl64@plt>
   14570:	cmp	r0, #0
   14574:	beq	14588 <b64_decode@@Base+0x13c4>
   14578:	bl	10fe0 <__errno_location@plt>
   1457c:	ldr	r3, [r0]
   14580:	cmp	r3, #4
   14584:	beq	14560 <b64_decode@@Base+0x139c>
   14588:	ldr	r1, [pc, #84]	; 145e4 <b64_decode@@Base+0x1420>
   1458c:	mov	r0, r6
   14590:	add	r1, pc, r1
   14594:	bl	10e9c <fdopen@plt>
   14598:	cmp	r0, #0
   1459c:	mov	r4, r0
   145a0:	str	r0, [r5]
   145a4:	beq	145c4 <b64_decode@@Base+0x1400>
   145a8:	mov	r4, #1
   145ac:	mov	r1, #0
   145b0:	str	r4, [r5, #24]
   145b4:	bl	10ecc <setbuf@plt>
   145b8:	mov	r0, r4
   145bc:	add	sp, sp, #36	; 0x24
   145c0:	pop	{r4, r5, r6, r7, pc}
   145c4:	mov	r0, r6
   145c8:	bl	11088 <close@plt>
   145cc:	mov	r0, r4
   145d0:	add	sp, sp, #36	; 0x24
   145d4:	pop	{r4, r5, r6, r7, pc}
   145d8:	andeq	r2, r1, r4, ror #21
   145dc:	andeq	r0, r0, r0, asr #1
   145e0:			; <UNDEFINED> instruction: 0x000001b6
   145e4:	andeq	r1, r0, r4, lsr #28
   145e8:	push	{r4, r5, r6, lr}
   145ec:	mov	r4, r1
   145f0:	ldr	r5, [pc, #248]	; 146f0 <b64_decode@@Base+0x152c>
   145f4:	ldr	ip, [r4, #8]
   145f8:	ldr	lr, [r4, #12]
   145fc:	ldr	r6, [r4]
   14600:	cmp	ip, #0
   14604:	mov	r1, r0
   14608:	add	r5, pc, r5
   1460c:	add	r0, r6, lr
   14610:	ble	1464c <b64_decode@@Base+0x1488>
   14614:	ldrb	r3, [r1]
   14618:	cmp	r3, #47	; 0x2f
   1461c:	addeq	r2, r1, #1
   14620:	ldrbeq	r3, [r1, #1]
   14624:	movne	r2, r1
   14628:	cmp	r3, #0
   1462c:	beq	1464c <b64_decode@@Base+0x1488>
   14630:	cmp	r3, #47	; 0x2f
   14634:	moveq	r1, r2
   14638:	ldrb	r3, [r2, #1]!
   1463c:	subeq	ip, ip, #1
   14640:	cmp	r3, #0
   14644:	cmpne	ip, #0
   14648:	bne	14630 <b64_decode@@Base+0x146c>
   1464c:	cmp	lr, #0
   14650:	bne	14670 <b64_decode@@Base+0x14ac>
   14654:	bl	10f50 <strcpy@plt>
   14658:	ldr	r0, [r4]
   1465c:	bl	144e4 <b64_decode@@Base+0x1320>
   14660:	cmp	r0, #0
   14664:	beq	14688 <b64_decode@@Base+0x14c4>
   14668:	mov	r0, #0
   1466c:	pop	{r4, r5, r6, pc}
   14670:	ldrb	r3, [r1]
   14674:	cmp	r3, #47	; 0x2f
   14678:	movne	r3, #47	; 0x2f
   1467c:	addne	r0, r0, #1
   14680:	strbne	r3, [r6, lr]
   14684:	b	14654 <b64_decode@@Base+0x1490>
   14688:	ldr	r0, [r4]
   1468c:	bl	14228 <b64_decode@@Base+0x1064>
   14690:	cmp	r0, #0
   14694:	bne	146cc <b64_decode@@Base+0x1508>
   14698:	ldr	r0, [r4]
   1469c:	bl	144e4 <b64_decode@@Base+0x1320>
   146a0:	cmp	r0, #0
   146a4:	bne	14668 <b64_decode@@Base+0x14a4>
   146a8:	ldr	r3, [pc, #68]	; 146f4 <b64_decode@@Base+0x1530>
   146ac:	ldr	r1, [pc, #68]	; 146f8 <b64_decode@@Base+0x1534>
   146b0:	ldr	r2, [r4]
   146b4:	ldr	r3, [r5, r3]
   146b8:	add	r1, pc, r1
   146bc:	ldr	r0, [r3]
   146c0:	bl	10fd4 <fprintf@plt>
   146c4:	mvn	r0, #0
   146c8:	pop	{r4, r5, r6, pc}
   146cc:	ldr	r3, [pc, #32]	; 146f4 <b64_decode@@Base+0x1530>
   146d0:	ldr	r1, [pc, #36]	; 146fc <b64_decode@@Base+0x1538>
   146d4:	ldr	r2, [r4]
   146d8:	ldr	r3, [r5, r3]
   146dc:	add	r1, pc, r1
   146e0:	ldr	r0, [r3]
   146e4:	bl	10fd4 <fprintf@plt>
   146e8:	mvn	r0, #0
   146ec:	pop	{r4, r5, r6, pc}
   146f0:	strdeq	r2, [r1], -r0
   146f4:	strheq	r0, [r0], -r4
   146f8:	andeq	r1, r0, r4, lsl sp
   146fc:	ldrdeq	r1, [r0], -ip
   14700:	ldr	r3, [pc, #96]	; 14768 <b64_decode@@Base+0x15a4>
   14704:	ldr	r2, [pc, #96]	; 1476c <b64_decode@@Base+0x15a8>
   14708:	add	r3, pc, r3
   1470c:	push	{r4, lr}
   14710:	ldr	r4, [r3, r2]
   14714:	ldr	r0, [r4]
   14718:	cmp	r0, #0
   1471c:	beq	1473c <b64_decode@@Base+0x1578>
   14720:	ldr	r3, [r4, #8]
   14724:	cmp	r3, #0
   14728:	bne	1474c <b64_decode@@Base+0x1588>
   1472c:	bl	11028 <fclose@plt>
   14730:	mov	r3, #0
   14734:	str	r3, [r4]
   14738:	str	r3, [r4, #12]
   1473c:	mov	r3, #0
   14740:	str	r3, [r4, #24]
   14744:	ldr	r0, [r4, #20]
   14748:	pop	{r4, pc}
   1474c:	ldr	r2, [r4, #24]
   14750:	cmp	r2, #0
   14754:	bge	1472c <b64_decode@@Base+0x1568>
   14758:	mov	r0, r3
   1475c:	bl	13754 <b64_decode@@Base+0x590>
   14760:	ldr	r0, [r4]
   14764:	b	1472c <b64_decode@@Base+0x1568>
   14768:	strdeq	r2, [r1], -r0
   1476c:	andeq	r0, r0, r0, asr #1
   14770:	push	{r4, lr}
   14774:	mov	r4, r0
   14778:	mov	r0, #1
   1477c:	bl	137b0 <b64_decode@@Base+0x5ec>
   14780:	str	r4, [r0]
   14784:	pop	{r4, pc}
   14788:	push	{r4, r5, r6, lr}
   1478c:	mov	r5, r0
   14790:	mov	r0, #2
   14794:	mov	r4, r1
   14798:	bl	137b0 <b64_decode@@Base+0x5ec>
   1479c:	str	r5, [r0]
   147a0:	str	r4, [r0, #4]
   147a4:	pop	{r4, r5, r6, pc}
   147a8:	push	{r4, r5, r6, lr}
   147ac:	mov	r5, r0
   147b0:	mov	r0, #2
   147b4:	mov	r4, r1
   147b8:	bl	137b0 <b64_decode@@Base+0x5ec>
   147bc:	str	r5, [r0]
   147c0:	str	r4, [r0, #4]
   147c4:	pop	{r4, r5, r6, pc}
   147c8:	mov	r2, #0
   147cc:	push	{r4, r5, r6, r7, r8, lr}
   147d0:	mov	r3, r2
   147d4:	sub	sp, sp, #32
   147d8:	mov	r5, r1
   147dc:	mov	r7, r2
   147e0:	mov	r4, r1
   147e4:	mov	r8, #1
   147e8:	str	r2, [sp]
   147ec:	str	r2, [sp, #4]
   147f0:	str	r2, [sp, #8]
   147f4:	str	r2, [sp, #12]
   147f8:	str	r2, [sp, #16]
   147fc:	str	r2, [sp, #20]
   14800:	str	r2, [sp, #24]
   14804:	str	r2, [sp, #28]
   14808:	lsr	r2, r3, #5
   1480c:	ldr	lr, [r1, #40]	; 0x28
   14810:	add	ip, sp, #32
   14814:	cmp	lr, #0
   14818:	add	r2, ip, r2, lsl #2
   1481c:	and	r6, r3, #31
   14820:	ldrne	ip, [r2, #-32]	; 0xffffffe0
   14824:	add	r3, r3, #1
   14828:	orrne	ip, ip, r8, lsl r6
   1482c:	addne	r7, r7, #1
   14830:	strne	ip, [r2, #-32]	; 0xffffffe0
   14834:	cmp	r3, #252	; 0xfc
   14838:	add	r1, r1, #24
   1483c:	bne	14808 <b64_decode@@Base+0x1644>
   14840:	add	r7, r7, r7, lsl #2
   14844:	add	r1, r7, #17
   14848:	bl	147a8 <b64_decode@@Base+0x15e4>
   1484c:	ldr	r0, [r5]
   14850:	bl	14770 <b64_decode@@Base+0x15ac>
   14854:	ldr	r0, [r5, #8]
   14858:	bl	14770 <b64_decode@@Base+0x15ac>
   1485c:	ldr	r0, [r5, #12]
   14860:	bl	14770 <b64_decode@@Base+0x15ac>
   14864:	ldrd	r0, [r5, #16]
   14868:	bl	14788 <b64_decode@@Base+0x15c4>
   1486c:	ldrd	r0, [r5, #24]
   14870:	bl	14788 <b64_decode@@Base+0x15c4>
   14874:	ldrd	r0, [r5, #32]
   14878:	bl	14788 <b64_decode@@Base+0x15c4>
   1487c:	sub	r6, sp, #4
   14880:	add	r7, sp, #28
   14884:	ldr	r0, [r6, #4]!
   14888:	bl	14770 <b64_decode@@Base+0x15ac>
   1488c:	cmp	r7, r6
   14890:	bne	14884 <b64_decode@@Base+0x16c0>
   14894:	add	r5, r5, #6016	; 0x1780
   14898:	add	r5, r5, #32
   1489c:	ldr	r3, [r4, #40]	; 0x28
   148a0:	subs	r0, r3, #0
   148a4:	beq	148bc <b64_decode@@Base+0x16f8>
   148a8:	bl	14770 <b64_decode@@Base+0x15ac>
   148ac:	ldrd	r0, [r4, #48]	; 0x30
   148b0:	bl	14788 <b64_decode@@Base+0x15c4>
   148b4:	ldrd	r0, [r4, #56]	; 0x38
   148b8:	bl	14788 <b64_decode@@Base+0x15c4>
   148bc:	add	r4, r4, #24
   148c0:	cmp	r4, r5
   148c4:	bne	1489c <b64_decode@@Base+0x16d8>
   148c8:	add	sp, sp, #32
   148cc:	pop	{r4, r5, r6, r7, r8, pc}
   148d0:	push	{r4, lr}
   148d4:	mov	r0, #1
   148d8:	bl	13810 <b64_decode@@Base+0x64c>
   148dc:	subs	r3, r0, #0
   148e0:	popeq	{r4, pc}
   148e4:	ldr	r0, [r3]
   148e8:	pop	{r4, lr}
   148ec:	b	136d4 <b64_decode@@Base+0x510>
   148f0:	push	{r4, lr}
   148f4:	mov	r0, #2
   148f8:	bl	13810 <b64_decode@@Base+0x64c>
   148fc:	subs	r2, r0, #0
   14900:	beq	14924 <b64_decode@@Base+0x1760>
   14904:	ldr	r0, [r2]
   14908:	bl	136d4 <b64_decode@@Base+0x510>
   1490c:	mov	r3, r0
   14910:	ldr	r0, [r2, #4]
   14914:	bl	136d4 <b64_decode@@Base+0x510>
   14918:	mov	r1, r0
   1491c:	mov	r0, r3
   14920:	pop	{r4, pc}
   14924:	mov	r3, r2
   14928:	mov	r1, r2
   1492c:	mov	r0, r3
   14930:	pop	{r4, pc}
   14934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14938:	sub	sp, sp, #28
   1493c:	mov	r8, r1
   14940:	str	r3, [sp, #12]
   14944:	mov	r4, #0
   14948:	add	r3, r1, #52	; 0x34
   1494c:	add	r1, r1, #16
   14950:	str	r0, [sp, #20]
   14954:	str	r2, [sp, #16]
   14958:	ldr	r2, [r3, #-4]!
   1495c:	cmp	r2, #0
   14960:	addne	r4, r4, #1
   14964:	cmp	r1, r3
   14968:	bne	14958 <b64_decode@@Base+0x1794>
   1496c:	add	r4, r4, #4
   14970:	lsl	r4, r4, #3
   14974:	mov	r0, r4
   14978:	bl	10f8c <malloc@plt>
   1497c:	subs	r6, r0, #0
   14980:	beq	14a54 <b64_decode@@Base+0x1890>
   14984:	ldr	r3, [sp, #12]
   14988:	mov	r4, #0
   1498c:	str	r3, [r6, #4]
   14990:	str	r4, [r6]
   14994:	bl	148d0 <b64_decode@@Base+0x170c>
   14998:	mov	r7, r4
   1499c:	add	r5, r8, #12
   149a0:	str	r0, [r6, #12]
   149a4:	bl	148d0 <b64_decode@@Base+0x170c>
   149a8:	str	r0, [r6, #16]
   149ac:	bl	148d0 <b64_decode@@Base+0x170c>
   149b0:	str	r0, [r6, #20]
   149b4:	b	149c4 <b64_decode@@Base+0x1800>
   149b8:	add	r4, r4, #1
   149bc:	cmp	r4, #9
   149c0:	beq	14a40 <b64_decode@@Base+0x187c>
   149c4:	ldr	r3, [r5, #4]!
   149c8:	cmp	r3, #0
   149cc:	beq	149b8 <b64_decode@@Base+0x17f4>
   149d0:	bl	148d0 <b64_decode@@Base+0x170c>
   149d4:	lsl	r3, r4, #17
   149d8:	add	r3, r3, #27262976	; 0x1a00000
   149dc:	add	r3, r3, #65536	; 0x10000
   149e0:	cmp	r0, r3
   149e4:	bne	14aa8 <b64_decode@@Base+0x18e4>
   149e8:	bl	148d0 <b64_decode@@Base+0x170c>
   149ec:	lsr	sl, r0, #1
   149f0:	lsl	fp, sl, #3
   149f4:	mov	r0, fp
   149f8:	bl	10f8c <malloc@plt>
   149fc:	subs	r9, r0, #0
   14a00:	beq	14ab8 <b64_decode@@Base+0x18f4>
   14a04:	add	r1, r6, r7, lsl #3
   14a08:	cmp	sl, #0
   14a0c:	str	sl, [r1, #24]
   14a10:	str	r9, [r1, #28]
   14a14:	sub	fp, sl, #1
   14a18:	beq	14a30 <b64_decode@@Base+0x186c>
   14a1c:	bl	148f0 <b64_decode@@Base+0x172c>
   14a20:	sub	fp, fp, #1
   14a24:	cmn	fp, #1
   14a28:	strd	r0, [r9], #8
   14a2c:	bne	14a1c <b64_decode@@Base+0x1858>
   14a30:	add	r4, r4, #1
   14a34:	cmp	r4, #9
   14a38:	add	r7, r7, #1
   14a3c:	bne	149c4 <b64_decode@@Base+0x1800>
   14a40:	ldr	r3, [sp, #16]
   14a44:	mov	r0, r6
   14a48:	str	r6, [r3]
   14a4c:	add	sp, sp, #28
   14a50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a54:	mvn	r5, #0
   14a58:	cmp	r4, #0
   14a5c:	bne	14a9c <b64_decode@@Base+0x18d8>
   14a60:	ldr	r3, [pc, #92]	; 14ac4 <b64_decode@@Base+0x1900>
   14a64:	mov	r4, r5
   14a68:	add	r3, pc, r3
   14a6c:	ldr	r0, [pc, #84]	; 14ac8 <b64_decode@@Base+0x1904>
   14a70:	ldr	r2, [sp, #12]
   14a74:	ldr	r1, [sp, #20]
   14a78:	str	r4, [sp]
   14a7c:	add	r0, pc, r0
   14a80:	bl	1395c <b64_decode@@Base+0x798>
   14a84:	mov	r2, r5
   14a88:	mov	r1, r6
   14a8c:	mov	r0, r8
   14a90:	add	sp, sp, #28
   14a94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a98:	b	13990 <b64_decode@@Base+0x7cc>
   14a9c:	ldr	r3, [pc, #40]	; 14acc <b64_decode@@Base+0x1908>
   14aa0:	add	r3, pc, r3
   14aa4:	b	14a6c <b64_decode@@Base+0x18a8>
   14aa8:	ldr	r3, [pc, #32]	; 14ad0 <b64_decode@@Base+0x190c>
   14aac:	mov	r5, r4
   14ab0:	add	r3, pc, r3
   14ab4:	b	14a6c <b64_decode@@Base+0x18a8>
   14ab8:	mov	r5, r4
   14abc:	mov	r4, fp
   14ac0:	b	14a58 <b64_decode@@Base+0x1894>
   14ac4:	andeq	r1, r0, r0, lsl #19
   14ac8:	muleq	r0, r0, r9
   14acc:	andeq	r1, r0, ip, asr r9
   14ad0:	andeq	r1, r0, r8, lsr r9
   14ad4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ad8:	sub	sp, sp, #36	; 0x24
   14adc:	mov	r9, r0
   14ae0:	bl	148d0 <b64_decode@@Base+0x170c>
   14ae4:	mov	r7, #0
   14ae8:	sub	r4, sp, #4
   14aec:	add	r5, sp, #28
   14af0:	str	r0, [r9]
   14af4:	bl	148d0 <b64_decode@@Base+0x170c>
   14af8:	str	r0, [r9, #8]
   14afc:	bl	148d0 <b64_decode@@Base+0x170c>
   14b00:	str	r0, [r9, #12]
   14b04:	bl	148f0 <b64_decode@@Base+0x172c>
   14b08:	strd	r0, [r9, #16]
   14b0c:	bl	148f0 <b64_decode@@Base+0x172c>
   14b10:	strd	r0, [r9, #24]
   14b14:	bl	148f0 <b64_decode@@Base+0x172c>
   14b18:	ldr	r2, [pc, #264]	; 14c28 <b64_decode@@Base+0x1a64>
   14b1c:	strd	r0, [r9, #32]
   14b20:	add	r0, r9, #40	; 0x28
   14b24:	mov	r1, r7
   14b28:	bl	10ff8 <memset@plt>
   14b2c:	bl	148d0 <b64_decode@@Base+0x170c>
   14b30:	str	r0, [r4, #4]!
   14b34:	bl	15818 <__gcov_sort_n_vals@@Base+0x64c>
   14b38:	cmp	r4, r5
   14b3c:	add	r7, r7, r0
   14b40:	bne	14b2c <b64_decode@@Base+0x1968>
   14b44:	cmp	r7, #0
   14b48:	sub	r7, r7, #1
   14b4c:	beq	14c14 <b64_decode@@Base+0x1a50>
   14b50:	ldr	r8, [pc, #212]	; 14c2c <b64_decode@@Base+0x1a68>
   14b54:	ldr	sl, [pc, #212]	; 14c30 <b64_decode@@Base+0x1a6c>
   14b58:	mov	r4, #0
   14b5c:	add	r8, pc, r8
   14b60:	add	sl, pc, sl
   14b64:	mov	r5, r4
   14b68:	mov	r6, r4
   14b6c:	cmp	r4, #0
   14b70:	addeq	r3, sp, #32
   14b74:	addeq	r6, r3, r5, lsl #2
   14b78:	subeq	r6, r6, #36	; 0x24
   14b7c:	beq	14b98 <b64_decode@@Base+0x19d4>
   14b80:	b	14bc0 <b64_decode@@Base+0x19fc>
   14b84:	ldr	r4, [r6, #4]!
   14b88:	add	r3, r5, #1
   14b8c:	cmp	r4, #0
   14b90:	bne	14bb8 <b64_decode@@Base+0x19f4>
   14b94:	mov	r5, r3
   14b98:	cmp	r5, #7
   14b9c:	bls	14b84 <b64_decode@@Base+0x19c0>
   14ba0:	mov	r0, r8
   14ba4:	bl	1395c <b64_decode@@Base+0x798>
   14ba8:	ldr	r4, [r6, #4]!
   14bac:	add	r3, r5, #1
   14bb0:	cmp	r4, #0
   14bb4:	beq	14b94 <b64_decode@@Base+0x19d0>
   14bb8:	lsl	r6, r5, #5
   14bbc:	mov	r5, r3
   14bc0:	tst	r4, #1
   14bc4:	bne	14bd8 <b64_decode@@Base+0x1a14>
   14bc8:	lsr	r4, r4, #1
   14bcc:	tst	r4, #1
   14bd0:	add	r6, r6, #1
   14bd4:	beq	14bc8 <b64_decode@@Base+0x1a04>
   14bd8:	cmp	r6, #251	; 0xfb
   14bdc:	bhi	14c1c <b64_decode@@Base+0x1a58>
   14be0:	bl	148d0 <b64_decode@@Base+0x170c>
   14be4:	add	fp, r6, r6, lsl #1
   14be8:	sub	r7, r7, #1
   14bec:	add	fp, r9, fp, lsl #3
   14bf0:	lsr	r4, r4, #1
   14bf4:	add	r6, r6, #1
   14bf8:	str	r0, [fp, #40]	; 0x28
   14bfc:	bl	148f0 <b64_decode@@Base+0x172c>
   14c00:	strd	r0, [fp, #48]	; 0x30
   14c04:	bl	148f0 <b64_decode@@Base+0x172c>
   14c08:	cmn	r7, #1
   14c0c:	strd	r0, [fp, #56]	; 0x38
   14c10:	bne	14b6c <b64_decode@@Base+0x19a8>
   14c14:	add	sp, sp, #36	; 0x24
   14c18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c1c:	mov	r0, sl
   14c20:	bl	1395c <b64_decode@@Base+0x798>
   14c24:	b	14be0 <b64_decode@@Base+0x1a1c>
   14c28:	andeq	r1, r0, r0, lsr #15
   14c2c:	ldrdeq	r1, [r0], -r4
   14c30:	andeq	r1, r0, r0, lsl r9
   14c34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c38:	sub	sp, sp, #6080	; 0x17c0
   14c3c:	sub	sp, sp, #28
   14c40:	mov	r4, r1
   14c44:	strd	r2, [sp, #4]
   14c48:	add	r3, sp, #6144	; 0x1800
   14c4c:	mov	r9, r0
   14c50:	ldr	r7, [r3]
   14c54:	add	r3, sp, #6144	; 0x1800
   14c58:	add	r3, r3, #4
   14c5c:	ldr	r6, [r3]
   14c60:	add	r3, sp, #6144	; 0x1800
   14c64:	add	r3, r3, #8
   14c68:	ldr	sl, [r3]
   14c6c:	bl	148d0 <b64_decode@@Base+0x170c>
   14c70:	add	r3, r4, #12
   14c74:	mov	r2, r9
   14c78:	str	r3, [sp, #12]
   14c7c:	mov	r1, r0
   14c80:	mov	r0, r3
   14c84:	bl	142ec <b64_decode@@Base+0x1128>
   14c88:	cmp	r0, #0
   14c8c:	beq	14f14 <b64_decode@@Base+0x1d50>
   14c90:	bl	148d0 <b64_decode@@Base+0x170c>
   14c94:	ldr	r3, [r4, #8]
   14c98:	cmp	r0, r3
   14c9c:	bne	14d30 <b64_decode@@Base+0x1b6c>
   14ca0:	ldr	fp, [pc, #628]	; 14f1c <b64_decode@@Base+0x1d58>
   14ca4:	add	r5, sp, #16
   14ca8:	add	fp, pc, fp
   14cac:	bl	13684 <b64_decode@@Base+0x4c0>
   14cb0:	str	r0, [r6]
   14cb4:	bl	148d0 <b64_decode@@Base+0x170c>
   14cb8:	cmp	r0, #-1560281088	; 0xa3000000
   14cbc:	bne	14d74 <b64_decode@@Base+0x1bb0>
   14cc0:	bl	148d0 <b64_decode@@Base+0x170c>
   14cc4:	mov	r0, r5
   14cc8:	bl	14ad4 <b64_decode@@Base+0x1910>
   14ccc:	bl	136a8 <b64_decode@@Base+0x4e4>
   14cd0:	add	r2, sp, #2000	; 0x7d0
   14cd4:	add	r2, r2, #8
   14cd8:	subs	r8, r0, #0
   14cdc:	bne	14ea8 <b64_decode@@Base+0x1ce4>
   14ce0:	ldr	r3, [r7]
   14ce4:	cmp	r3, #0
   14ce8:	bne	14d40 <b64_decode@@Base+0x1b7c>
   14cec:	ldr	r3, [r2, #-1992]	; 0xfffff838
   14cf0:	cmp	r3, sl
   14cf4:	bne	14cac <b64_decode@@Base+0x1ae8>
   14cf8:	ldr	r3, [sp, #8]
   14cfc:	ldr	r2, [r2, #-1984]	; 0xfffff840
   14d00:	ldr	r3, [r3]
   14d04:	cmp	r2, r3
   14d08:	bne	14cac <b64_decode@@Base+0x1ae8>
   14d0c:	ldr	r2, [pc, #524]	; 14f20 <b64_decode@@Base+0x1d5c>
   14d10:	mov	r1, r5
   14d14:	ldr	r0, [sp, #4]
   14d18:	bl	10f14 <memcpy@plt>
   14d1c:	ldr	r3, [r6]
   14d20:	str	r3, [r7]
   14d24:	b	14cac <b64_decode@@Base+0x1ae8>
   14d28:	cmp	r0, #0
   14d2c:	bne	14ee8 <b64_decode@@Base+0x1d24>
   14d30:	mov	r0, #0
   14d34:	add	sp, sp, #6080	; 0x17c0
   14d38:	add	sp, sp, #28
   14d3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d40:	ldr	r0, [pc, #476]	; 14f24 <b64_decode@@Base+0x1d60>
   14d44:	bl	10f8c <malloc@plt>
   14d48:	ldr	r2, [pc, #464]	; 14f20 <b64_decode@@Base+0x1d5c>
   14d4c:	mov	r1, r5
   14d50:	mov	r3, r0
   14d54:	str	r0, [fp]
   14d58:	add	r0, r0, #8
   14d5c:	str	r3, [sp]
   14d60:	bl	10f14 <memcpy@plt>
   14d64:	ldr	r3, [sp]
   14d68:	str	r8, [r3]
   14d6c:	ldr	fp, [fp]
   14d70:	b	14cac <b64_decode@@Base+0x1ae8>
   14d74:	ldr	r5, [r4, #52]	; 0x34
   14d78:	cmp	r5, #0
   14d7c:	beq	14d28 <b64_decode@@Base+0x1b64>
   14d80:	ldr	r3, [r4, #56]	; 0x38
   14d84:	cmp	r0, #16777216	; 0x1000000
   14d88:	ldr	r8, [r3]
   14d8c:	bne	14ee4 <b64_decode@@Base+0x1d20>
   14d90:	ldr	r6, [pc, #400]	; 14f28 <b64_decode@@Base+0x1d64>
   14d94:	mov	r5, #0
   14d98:	add	r6, pc, r6
   14d9c:	add	r6, r6, #4
   14da0:	b	14de4 <b64_decode@@Base+0x1c20>
   14da4:	mov	r2, r6
   14da8:	mov	r3, r5
   14dac:	mov	r1, r4
   14db0:	mov	r0, r9
   14db4:	bl	14934 <b64_decode@@Base+0x1770>
   14db8:	subs	r6, r0, #0
   14dbc:	beq	14ee8 <b64_decode@@Base+0x1d24>
   14dc0:	bl	148d0 <b64_decode@@Base+0x170c>
   14dc4:	ldr	r3, [r4, #52]	; 0x34
   14dc8:	add	r5, r5, #1
   14dcc:	cmp	r3, r5
   14dd0:	beq	14d28 <b64_decode@@Base+0x1b64>
   14dd4:	ldr	r3, [r4, #56]	; 0x38
   14dd8:	cmp	r0, #16777216	; 0x1000000
   14ddc:	ldr	r8, [r3, r5, lsl #2]
   14de0:	bne	14ee8 <b64_decode@@Base+0x1d24>
   14de4:	bl	148d0 <b64_decode@@Base+0x170c>
   14de8:	cmp	r0, #0
   14dec:	beq	14dc0 <b64_decode@@Base+0x1bfc>
   14df0:	cmp	r0, #3
   14df4:	bne	14ee8 <b64_decode@@Base+0x1d24>
   14df8:	cmp	r8, #0
   14dfc:	beq	14da4 <b64_decode@@Base+0x1be0>
   14e00:	ldr	r3, [r8]
   14e04:	cmp	r4, r3
   14e08:	bne	14da4 <b64_decode@@Base+0x1be0>
   14e0c:	bl	148d0 <b64_decode@@Base+0x170c>
   14e10:	ldr	r3, [r8, #4]
   14e14:	cmp	r0, r3
   14e18:	bne	14ee8 <b64_decode@@Base+0x1d24>
   14e1c:	bl	148d0 <b64_decode@@Base+0x170c>
   14e20:	ldr	r3, [r8, #8]
   14e24:	cmp	r0, r3
   14e28:	bne	14ee8 <b64_decode@@Base+0x1d24>
   14e2c:	bl	148d0 <b64_decode@@Base+0x170c>
   14e30:	ldr	r3, [r8, #12]
   14e34:	cmp	r0, r3
   14e38:	bne	14ee8 <b64_decode@@Base+0x1d24>
   14e3c:	ldr	r7, [pc, #232]	; 14f2c <b64_decode@@Base+0x1d68>
   14e40:	ldr	fp, [sp, #12]
   14e44:	add	r8, r8, #16
   14e48:	ldr	sl, [fp, #4]!
   14e4c:	cmp	sl, #0
   14e50:	beq	14e88 <b64_decode@@Base+0x1cc4>
   14e54:	bl	148d0 <b64_decode@@Base+0x170c>
   14e58:	str	r0, [sp]
   14e5c:	bl	148d0 <b64_decode@@Base+0x170c>
   14e60:	ldr	r3, [sp]
   14e64:	cmp	r3, r7
   14e68:	bne	14ee8 <b64_decode@@Base+0x1d24>
   14e6c:	ldr	r3, [r8]
   14e70:	mov	r1, r3
   14e74:	cmp	r0, r3, lsl #1
   14e78:	bne	14ee8 <b64_decode@@Base+0x1d24>
   14e7c:	ldr	r0, [r8, #4]
   14e80:	blx	sl
   14e84:	add	r8, r8, #8
   14e88:	ldr	r3, [pc, #160]	; 14f30 <b64_decode@@Base+0x1d6c>
   14e8c:	add	r7, r7, #131072	; 0x20000
   14e90:	cmp	r7, r3
   14e94:	bne	14e48 <b64_decode@@Base+0x1c84>
   14e98:	bl	136a8 <b64_decode@@Base+0x4e4>
   14e9c:	cmp	r0, #0
   14ea0:	beq	14dc0 <b64_decode@@Base+0x1bfc>
   14ea4:	mov	r8, r0
   14ea8:	cmp	r8, #0
   14eac:	blt	14ed8 <b64_decode@@Base+0x1d14>
   14eb0:	ldr	r2, [pc, #124]	; 14f34 <b64_decode@@Base+0x1d70>
   14eb4:	add	r2, pc, r2
   14eb8:	ldr	r0, [pc, #120]	; 14f38 <b64_decode@@Base+0x1d74>
   14ebc:	mov	r1, r9
   14ec0:	add	r0, pc, r0
   14ec4:	bl	1395c <b64_decode@@Base+0x798>
   14ec8:	mvn	r0, #0
   14ecc:	add	sp, sp, #6080	; 0x17c0
   14ed0:	add	sp, sp, #28
   14ed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ed8:	ldr	r2, [pc, #92]	; 14f3c <b64_decode@@Base+0x1d78>
   14edc:	add	r2, pc, r2
   14ee0:	b	14eb8 <b64_decode@@Base+0x1cf4>
   14ee4:	mov	r5, #0
   14ee8:	ldr	r2, [pc, #80]	; 14f40 <b64_decode@@Base+0x1d7c>
   14eec:	ldr	r0, [pc, #80]	; 14f44 <b64_decode@@Base+0x1d80>
   14ef0:	mov	r3, r5
   14ef4:	mov	r1, r9
   14ef8:	add	r2, pc, r2
   14efc:	add	r0, pc, r0
   14f00:	bl	1395c <b64_decode@@Base+0x798>
   14f04:	mvn	r0, #0
   14f08:	add	sp, sp, #6080	; 0x17c0
   14f0c:	add	sp, sp, #28
   14f10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f14:	mvn	r0, #0
   14f18:	b	14d34 <b64_decode@@Base+0x1b70>
   14f1c:	andeq	r2, r1, r0, asr #19
   14f20:	andeq	r1, r0, r8, asr #15
   14f24:	ldrdeq	r1, [r0], -r0
   14f28:	ldrdeq	r2, [r1], -r0
   14f2c:			; <UNDEFINED> instruction: 0x01a10000
   14f30:			; <UNDEFINED> instruction: 0x01b30000
   14f34:	andeq	r1, r0, r4, lsl #12
   14f38:	andeq	r1, r0, r4, lsr r6
   14f3c:	ldrdeq	r1, [r0], -r0
   14f40:	andeq	r1, r0, r8, asr #11
   14f44:	ldrdeq	r1, [r0], -r0
   14f48:	ldr	r3, [pc, #72]	; 14f98 <b64_decode@@Base+0x1dd4>
   14f4c:	ldr	r2, [pc, #72]	; 14f9c <b64_decode@@Base+0x1dd8>
   14f50:	add	r3, pc, r3
   14f54:	push	{r4, r5, r6, lr}
   14f58:	mov	r5, r0
   14f5c:	ldr	r4, [r3, r2]
   14f60:	ldr	r0, [r4, #8]
   14f64:	cmp	r0, #0
   14f68:	bne	14f90 <b64_decode@@Base+0x1dcc>
   14f6c:	lsl	r1, r5, #2
   14f70:	mov	r2, #0
   14f74:	ldr	r0, [r4]
   14f78:	bl	11070 <fseek@plt>
   14f7c:	ldr	r0, [r4]
   14f80:	bl	10f38 <ftell@plt>
   14f84:	asr	r0, r0, #2
   14f88:	str	r0, [r4, #4]
   14f8c:	pop	{r4, r5, r6, pc}
   14f90:	bl	13754 <b64_decode@@Base+0x590>
   14f94:	b	14f6c <b64_decode@@Base+0x1da8>
   14f98:	andeq	r2, r1, r8, lsr #1
   14f9c:	andeq	r0, r0, r0, asr #1
   14fa0:	cmp	r2, #0
   14fa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fa8:	mov	r8, r0
   14fac:	sub	sp, sp, #20
   14fb0:	mov	r5, r1
   14fb4:	mov	r4, r3
   14fb8:	beq	15188 <b64_decode@@Base+0x1fc4>
   14fbc:	cmp	r4, #0
   14fc0:	bne	151a4 <b64_decode@@Base+0x1fe0>
   14fc4:	mov	r1, r5
   14fc8:	ldr	r5, [pc, #480]	; 151b0 <b64_decode@@Base+0x1fec>
   14fcc:	mov	r0, #-1560281088	; 0xa3000000
   14fd0:	add	r5, pc, r5
   14fd4:	bl	147c8 <b64_decode@@Base+0x1604>
   14fd8:	ldr	r4, [r5]
   14fdc:	cmp	r4, #0
   14fe0:	beq	1500c <b64_decode@@Base+0x1e48>
   14fe4:	add	r1, r4, #8
   14fe8:	mov	r0, #-1560281088	; 0xa3000000
   14fec:	bl	147c8 <b64_decode@@Base+0x1604>
   14ff0:	ldr	r3, [r5]
   14ff4:	mov	r0, r3
   14ff8:	ldr	r4, [r3]
   14ffc:	bl	10efc <free@plt>
   15000:	cmp	r4, #0
   15004:	str	r4, [r5]
   15008:	bne	14fe4 <b64_decode@@Base+0x1e20>
   1500c:	ldr	r3, [r8, #52]	; 0x34
   15010:	cmp	r3, #0
   15014:	beq	15160 <b64_decode@@Base+0x1f9c>
   15018:	ldr	r3, [pc, #404]	; 151b4 <b64_decode@@Base+0x1ff0>
   1501c:	ldr	r9, [pc, #404]	; 151b8 <b64_decode@@Base+0x1ff4>
   15020:	add	r3, pc, r3
   15024:	str	r3, [sp, #4]
   15028:	ldr	r3, [pc, #396]	; 151bc <b64_decode@@Base+0x1ff8>
   1502c:	mov	r7, #0
   15030:	add	r3, pc, r3
   15034:	str	r3, [sp, #12]
   15038:	b	15074 <b64_decode@@Base+0x1eb0>
   1503c:	ldr	r3, [r8, #56]	; 0x38
   15040:	ldr	r4, [r3, r7, lsl #2]
   15044:	cmp	r4, #0
   15048:	beq	15058 <b64_decode@@Base+0x1e94>
   1504c:	ldr	r3, [r4]
   15050:	cmp	r3, r8
   15054:	beq	15170 <b64_decode@@Base+0x1fac>
   15058:	mov	r1, #0
   1505c:	mov	r0, #16777216	; 0x1000000
   15060:	bl	147a8 <b64_decode@@Base+0x15e4>
   15064:	ldr	r3, [r8, #52]	; 0x34
   15068:	add	r7, r7, #1
   1506c:	cmp	r3, r7
   15070:	beq	15160 <b64_decode@@Base+0x1f9c>
   15074:	ldr	r3, [sp, #4]
   15078:	ldr	r4, [r3, #4]
   1507c:	cmp	r4, #0
   15080:	beq	1503c <b64_decode@@Base+0x1e78>
   15084:	ldr	r3, [r4, #4]
   15088:	cmp	r3, r7
   1508c:	bne	1503c <b64_decode@@Base+0x1e78>
   15090:	mov	r3, #1
   15094:	mov	r1, #3
   15098:	mov	r0, #16777216	; 0x1000000
   1509c:	add	r4, r4, #8
   150a0:	str	r3, [sp, #8]
   150a4:	bl	147a8 <b64_decode@@Base+0x15e4>
   150a8:	ldr	r0, [r4, #4]
   150ac:	bl	14770 <b64_decode@@Base+0x15ac>
   150b0:	ldr	r0, [r4, #8]
   150b4:	bl	14770 <b64_decode@@Base+0x15ac>
   150b8:	ldr	r0, [r4, #12]
   150bc:	bl	14770 <b64_decode@@Base+0x15ac>
   150c0:	ldr	r5, [pc, #248]	; 151c0 <b64_decode@@Base+0x1ffc>
   150c4:	add	r4, r4, #16
   150c8:	add	r6, r8, #12
   150cc:	b	150dc <b64_decode@@Base+0x1f18>
   150d0:	add	r5, r5, #131072	; 0x20000
   150d4:	cmp	r5, r9
   150d8:	beq	1512c <b64_decode@@Base+0x1f68>
   150dc:	ldr	r3, [r6, #4]!
   150e0:	cmp	r3, #0
   150e4:	beq	150d0 <b64_decode@@Base+0x1f0c>
   150e8:	ldr	fp, [r4]
   150ec:	mov	r0, r5
   150f0:	sub	sl, fp, #1
   150f4:	lsl	r1, fp, #1
   150f8:	bl	147a8 <b64_decode@@Base+0x15e4>
   150fc:	cmp	fp, #0
   15100:	ldr	fp, [r4, #4]
   15104:	beq	1511c <b64_decode@@Base+0x1f58>
   15108:	sub	sl, sl, #1
   1510c:	ldrd	r0, [fp], #8
   15110:	bl	14788 <b64_decode@@Base+0x15c4>
   15114:	cmn	sl, #1
   15118:	bne	15108 <b64_decode@@Base+0x1f44>
   1511c:	add	r5, r5, #131072	; 0x20000
   15120:	cmp	r5, r9
   15124:	add	r4, r4, #8
   15128:	bne	150dc <b64_decode@@Base+0x1f18>
   1512c:	ldr	r3, [sp, #8]
   15130:	cmp	r3, #0
   15134:	beq	15064 <b64_decode@@Base+0x1ea0>
   15138:	ldr	r4, [sp, #12]
   1513c:	mov	r2, #9
   15140:	mov	r0, r8
   15144:	ldr	r1, [r4, #4]
   15148:	bl	13990 <b64_decode@@Base+0x7cc>
   1514c:	ldr	r3, [r8, #52]	; 0x34
   15150:	add	r7, r7, #1
   15154:	cmp	r3, r7
   15158:	str	r0, [r4, #4]
   1515c:	bne	15074 <b64_decode@@Base+0x1eb0>
   15160:	mov	r0, #0
   15164:	add	sp, sp, #20
   15168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1516c:	b	14770 <b64_decode@@Base+0x15ac>
   15170:	mov	r1, #3
   15174:	mov	r0, #16777216	; 0x1000000
   15178:	bl	147a8 <b64_decode@@Base+0x15e4>
   1517c:	mov	r3, #0
   15180:	str	r3, [sp, #8]
   15184:	b	150a8 <b64_decode@@Base+0x1ee4>
   15188:	ldr	r1, [pc, #52]	; 151c4 <b64_decode@@Base+0x2000>
   1518c:	ldr	r0, [pc, #52]	; 151c8 <b64_decode@@Base+0x2004>
   15190:	bl	147a8 <b64_decode@@Base+0x15e4>
   15194:	ldr	r0, [r8, #8]
   15198:	bl	14770 <b64_decode@@Base+0x15ac>
   1519c:	cmp	r4, #0
   151a0:	beq	14fc4 <b64_decode@@Base+0x1e00>
   151a4:	mov	r0, r4
   151a8:	bl	14f48 <b64_decode@@Base+0x1d84>
   151ac:	b	14fc4 <b64_decode@@Base+0x1e00>
   151b0:	muleq	r1, r8, r6
   151b4:	andeq	r2, r1, r8, asr #12
   151b8:			; <UNDEFINED> instruction: 0x01b30000
   151bc:	andeq	r2, r1, r8, lsr r6
   151c0:			; <UNDEFINED> instruction: 0x01a10000
   151c4:	teqmi	r8, sl, lsr #6
   151c8:	strbvs	r6, [r3, -r1, ror #8]!

000151cc <__gcov_sort_n_vals@@Base>:
   151cc:	cmp	r1, #2
   151d0:	bxle	lr
   151d4:	sub	r1, r1, #3
   151d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151dc:	add	r2, r0, #8
   151e0:	sub	sp, sp, #20
   151e4:	mov	r6, r0
   151e8:	bic	r7, r1, #1
   151ec:	mvn	r8, #15
   151f0:	mov	lr, #0
   151f4:	ldrd	r0, [r2]
   151f8:	ldrd	r4, [r2, #16]
   151fc:	ldrd	sl, [r2, #8]
   15200:	add	r9, r2, #16
   15204:	cmp	r0, r4
   15208:	sbcs	r3, r1, r5
   1520c:	mov	ip, r9
   15210:	sub	r1, r6, r8
   15214:	strd	sl, [sp]
   15218:	mov	r3, lr
   1521c:	bge	15284 <__gcov_sort_n_vals@@Base+0xb8>
   15220:	add	sl, r8, #16
   15224:	mvn	fp, #1
   15228:	add	sl, r2, sl
   1522c:	orr	fp, lr, fp
   15230:	str	r7, [sp, #8]
   15234:	str	r6, [sp, #12]
   15238:	b	15250 <__gcov_sort_n_vals@@Base+0x84>
   1523c:	ldrd	r6, [ip, #-16]
   15240:	sub	r2, r2, #16
   15244:	cmp	r6, r4
   15248:	sbcs	r1, r7, r5
   1524c:	bge	152ac <__gcov_sort_n_vals@@Base+0xe0>
   15250:	ldrd	r6, [r2, #-8]
   15254:	lsl	r1, r3, #3
   15258:	mov	r0, r3
   1525c:	strd	r6, [r2, #8]
   15260:	ldrd	r6, [sl, r1]
   15264:	sub	r3, r3, #2
   15268:	cmp	r3, fp
   1526c:	strd	r6, [r2, #16]
   15270:	mov	ip, r2
   15274:	bne	1523c <__gcov_sort_n_vals@@Base+0x70>
   15278:	ldr	r6, [sp, #12]
   1527c:	ldr	r7, [sp, #8]
   15280:	add	r1, r6, r1
   15284:	ldrd	r2, [sp]
   15288:	cmp	lr, r7
   1528c:	sub	r8, r8, #16
   15290:	strd	r2, [r1]
   15294:	add	lr, lr, #2
   15298:	strd	r4, [ip]
   1529c:	mov	r2, r9
   152a0:	bne	151f4 <__gcov_sort_n_vals@@Base+0x28>
   152a4:	add	sp, sp, #20
   152a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152ac:	ldr	r6, [sp, #12]
   152b0:	ldr	r7, [sp, #8]
   152b4:	add	r1, r6, r0, lsl #3
   152b8:	b	15284 <__gcov_sort_n_vals@@Base+0xb8>
   152bc:	push	{r4, r5, r6, lr}
   152c0:	ldr	r4, [pc, #76]	; 15314 <__gcov_sort_n_vals@@Base+0x148>
   152c4:	smull	r2, r3, r4, r0
   152c8:	asr	r4, r0, #31
   152cc:	rsb	r4, r4, r3, asr #1
   152d0:	add	r4, r4, r4, lsl #3
   152d4:	subs	r4, r0, r4
   152d8:	bne	15310 <__gcov_sort_n_vals@@Base+0x144>
   152dc:	cmp	r0, #0
   152e0:	mov	r6, r0
   152e4:	ldr	r5, [r1]
   152e8:	pople	{r4, r5, r6, pc}
   152ec:	add	r5, r5, #8
   152f0:	mov	r0, r5
   152f4:	add	r4, r4, #9
   152f8:	mov	r1, #8
   152fc:	bl	151cc <__gcov_sort_n_vals@@Base>
   15300:	cmp	r6, r4
   15304:	add	r5, r5, #72	; 0x48
   15308:	bgt	152f0 <__gcov_sort_n_vals@@Base+0x124>
   1530c:	pop	{r4, r5, r6, pc}
   15310:	bl	1107c <abort@plt>
   15314:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   15318:	ldr	r3, [r0, #48]	; 0x30
   1531c:	cmp	r3, #0
   15320:	bxeq	lr
   15324:	push	{r4, r5, r6, lr}
   15328:	ldr	lr, [r0, #52]	; 0x34
   1532c:	cmp	lr, #0
   15330:	popeq	{r4, r5, r6, pc}
   15334:	mov	r5, r0
   15338:	mov	r4, #0
   1533c:	add	r6, r0, #12
   15340:	ldr	r1, [r5, #56]	; 0x38
   15344:	mov	r2, r6
   15348:	mov	r3, #0
   1534c:	ldr	r1, [r1, r4, lsl #2]
   15350:	add	r1, r1, #16
   15354:	ldr	ip, [r2, #4]!
   15358:	cmp	ip, #0
   1535c:	beq	1536c <__gcov_sort_n_vals@@Base+0x1a0>
   15360:	cmp	r3, #8
   15364:	beq	15388 <__gcov_sort_n_vals@@Base+0x1bc>
   15368:	add	r1, r1, #8
   1536c:	add	r3, r3, #1
   15370:	cmp	r3, #9
   15374:	bne	15354 <__gcov_sort_n_vals@@Base+0x188>
   15378:	add	r4, r4, #1
   1537c:	cmp	lr, r4
   15380:	bne	15340 <__gcov_sort_n_vals@@Base+0x174>
   15384:	pop	{r4, r5, r6, pc}
   15388:	ldr	r0, [r1], #4
   1538c:	bl	152bc <__gcov_sort_n_vals@@Base+0xf0>
   15390:	ldr	lr, [r5, #52]	; 0x34
   15394:	b	15378 <__gcov_sort_n_vals@@Base+0x1ac>
   15398:	push	{r4, r5, r6, r7, r8, r9, lr}
   1539c:	sub	sp, sp, #6080	; 0x17c0
   153a0:	ldr	ip, [pc, #396]	; 15534 <__gcov_sort_n_vals@@Base+0x368>
   153a4:	sub	sp, sp, #36	; 0x24
   153a8:	add	ip, pc, ip
   153ac:	add	r5, sp, #2016	; 0x7e0
   153b0:	mov	r4, r0
   153b4:	mov	r6, r1
   153b8:	mov	r1, #0
   153bc:	str	r1, [ip, #4]
   153c0:	str	r1, [ip]
   153c4:	mov	r8, r2
   153c8:	mov	r7, r3
   153cc:	str	r1, [r5, #-2000]	; 0xfffff830
   153d0:	str	r1, [r5, #-1996]	; 0xfffff834
   153d4:	bl	15318 <__gcov_sort_n_vals@@Base+0x14c>
   153d8:	mov	r1, r6
   153dc:	ldr	r0, [r4, #12]
   153e0:	bl	145e8 <b64_decode@@Base+0x1424>
   153e4:	cmn	r0, #1
   153e8:	beq	15464 <__gcov_sort_n_vals@@Base+0x298>
   153ec:	bl	148d0 <b64_decode@@Base+0x170c>
   153f0:	cmp	r0, #0
   153f4:	beq	15470 <__gcov_sort_n_vals@@Base+0x2a4>
   153f8:	ldr	r2, [pc, #312]	; 15538 <__gcov_sort_n_vals@@Base+0x36c>
   153fc:	ldr	r1, [r6]
   15400:	cmp	r0, r2
   15404:	beq	154c8 <__gcov_sort_n_vals@@Base+0x2fc>
   15408:	ldr	r0, [pc, #300]	; 1553c <__gcov_sort_n_vals@@Base+0x370>
   1540c:	add	r0, pc, r0
   15410:	bl	1395c <b64_decode@@Base+0x798>
   15414:	ldr	r5, [pc, #292]	; 15540 <__gcov_sort_n_vals@@Base+0x374>
   15418:	add	r5, pc, r5
   1541c:	ldr	r1, [r5, #4]
   15420:	cmp	r1, #0
   15424:	beq	15444 <__gcov_sort_n_vals@@Base+0x278>
   15428:	mov	r2, #9
   1542c:	mov	r0, r4
   15430:	bl	13990 <b64_decode@@Base+0x7cc>
   15434:	cmp	r0, #0
   15438:	mov	r1, r0
   1543c:	str	r0, [r5, #4]
   15440:	bne	15428 <__gcov_sort_n_vals@@Base+0x25c>
   15444:	bl	14700 <b64_decode@@Base+0x153c>
   15448:	cmp	r0, #0
   1544c:	beq	15464 <__gcov_sort_n_vals@@Base+0x298>
   15450:	blt	15528 <__gcov_sort_n_vals@@Base+0x35c>
   15454:	ldr	r0, [pc, #232]	; 15544 <__gcov_sort_n_vals@@Base+0x378>
   15458:	add	r0, pc, r0
   1545c:	ldr	r1, [r6]
   15460:	bl	1395c <b64_decode@@Base+0x798>
   15464:	add	sp, sp, #6080	; 0x17c0
   15468:	add	sp, sp, #36	; 0x24
   1546c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15470:	bl	144a0 <b64_decode@@Base+0x12dc>
   15474:	ldr	r1, [r5, #-2000]	; 0xfffff830
   15478:	add	r9, sp, #24
   1547c:	cmp	r1, #0
   15480:	beq	15510 <__gcov_sort_n_vals@@Base+0x344>
   15484:	add	r3, sp, #6144	; 0x1800
   15488:	str	r7, [sp, #4]
   1548c:	ldr	r3, [r3]
   15490:	mov	r1, r8
   15494:	str	r3, [sp]
   15498:	add	r2, r4, #16
   1549c:	mov	r3, r9
   154a0:	ldr	r0, [r6]
   154a4:	bl	1434c <b64_decode@@Base+0x1188>
   154a8:	cmn	r0, #1
   154ac:	beq	15414 <__gcov_sort_n_vals@@Base+0x248>
   154b0:	mov	r1, r9
   154b4:	ldr	r3, [r5, #-2000]	; 0xfffff830
   154b8:	ldr	r2, [r5, #-1996]	; 0xfffff834
   154bc:	mov	r0, r4
   154c0:	bl	14fa0 <b64_decode@@Base+0x1ddc>
   154c4:	b	15414 <__gcov_sort_n_vals@@Base+0x248>
   154c8:	add	ip, sp, #20
   154cc:	add	r3, sp, #16
   154d0:	str	r7, [sp, #8]
   154d4:	stm	sp, {r3, ip}
   154d8:	add	r3, sp, #6144	; 0x1800
   154dc:	add	r9, sp, #24
   154e0:	ldr	r3, [r3]
   154e4:	mov	r0, r1
   154e8:	mov	r2, r9
   154ec:	add	r3, r3, #8
   154f0:	mov	r1, r4
   154f4:	bl	14c34 <b64_decode@@Base+0x1a70>
   154f8:	cmn	r0, #1
   154fc:	beq	15414 <__gcov_sort_n_vals@@Base+0x248>
   15500:	bl	144a0 <b64_decode@@Base+0x12dc>
   15504:	ldr	r1, [r5, #-2000]	; 0xfffff830
   15508:	cmp	r1, #0
   1550c:	bne	15484 <__gcov_sort_n_vals@@Base+0x2b8>
   15510:	ldr	r2, [pc, #48]	; 15548 <__gcov_sort_n_vals@@Base+0x37c>
   15514:	mov	r0, r9
   15518:	bl	10ff8 <memset@plt>
   1551c:	ldr	r3, [r5, #-1996]	; 0xfffff834
   15520:	str	r3, [r5, #-2000]	; 0xfffff830
   15524:	b	15484 <__gcov_sort_n_vals@@Base+0x2b8>
   15528:	ldr	r0, [pc, #28]	; 1554c <__gcov_sort_n_vals@@Base+0x380>
   1552c:	add	r0, pc, r0
   15530:	b	1545c <__gcov_sort_n_vals@@Base+0x290>
   15534:	andeq	r2, r1, r0, asr #5
   15538:	strbvs	r6, [r3, -r1, ror #8]!
   1553c:	andeq	r1, r0, r0, asr #2
   15540:	andeq	r2, r1, r0, asr r2
   15544:	ldrdeq	r1, [r0], -r8
   15548:	andeq	r1, r0, r8, asr #15
   1554c:	andeq	r0, r0, r4, ror #31
   15550:	push	{r4, r5, r6, r7, r8, lr}
   15554:	sub	sp, sp, #6080	; 0x17c0
   15558:	sub	sp, sp, #32
   1555c:	add	r6, sp, #24
   15560:	add	r2, sp, #12
   15564:	mov	r8, r1
   15568:	mov	r1, r6
   1556c:	mov	r4, r0
   15570:	bl	13ba8 <b64_decode@@Base+0x9e4>
   15574:	add	r5, sp, #8
   15578:	mov	r7, r0
   1557c:	mov	r0, r5
   15580:	bl	13d3c <b64_decode@@Base+0xb78>
   15584:	cmp	r4, #0
   15588:	beq	155b0 <__gcov_sort_n_vals@@Base+0x3e4>
   1558c:	mov	r0, r4
   15590:	str	r6, [sp]
   15594:	mov	r3, r7
   15598:	mov	r2, r8
   1559c:	mov	r1, r5
   155a0:	bl	15398 <__gcov_sort_n_vals@@Base+0x1cc>
   155a4:	ldr	r4, [r4, #4]
   155a8:	cmp	r4, #0
   155ac:	bne	1558c <__gcov_sort_n_vals@@Base+0x3c0>
   155b0:	ldr	r0, [sp, #8]
   155b4:	bl	10efc <free@plt>
   155b8:	add	sp, sp, #6080	; 0x17c0
   155bc:	add	sp, sp, #32
   155c0:	pop	{r4, r5, r6, r7, r8, pc}
   155c4:	ldrb	r1, [r0, #4]
   155c8:	tst	r1, #1
   155cc:	bxne	lr
   155d0:	push	{r4, lr}
   155d4:	lsr	r1, r1, #1
   155d8:	mov	r4, r0
   155dc:	and	r1, r1, #1
   155e0:	ldr	r0, [r0]
   155e4:	bl	15550 <__gcov_sort_n_vals@@Base+0x384>
   155e8:	ldrb	r3, [r4, #4]
   155ec:	bic	r3, r3, #3
   155f0:	orr	r3, r3, #3
   155f4:	strb	r3, [r4, #4]
   155f8:	pop	{r4, pc}
   155fc:	push	{r4, r5, r6, lr}
   15600:	ldr	r4, [pc, #84]	; 1565c <__gcov_sort_n_vals@@Base+0x490>
   15604:	ldr	r5, [pc, #84]	; 15660 <__gcov_sort_n_vals@@Base+0x494>
   15608:	add	r4, pc, r4
   1560c:	mov	r0, r4
   15610:	bl	155c4 <__gcov_sort_n_vals@@Base+0x3f8>
   15614:	ldr	r3, [r4, #8]
   15618:	add	r5, pc, r5
   1561c:	cmp	r3, #0
   15620:	ldrne	r2, [r4, #12]
   15624:	strne	r2, [r3, #12]
   15628:	ldr	r2, [pc, #52]	; 15664 <__gcov_sort_n_vals@@Base+0x498>
   1562c:	add	r2, pc, r2
   15630:	ldr	r2, [r2, #12]
   15634:	cmp	r2, #0
   15638:	strne	r3, [r2, #8]
   1563c:	beq	15648 <__gcov_sort_n_vals@@Base+0x47c>
   15640:	pop	{r4, r5, r6, lr}
   15644:	b	13704 <b64_decode@@Base+0x540>
   15648:	ldr	r2, [pc, #24]	; 15668 <__gcov_sort_n_vals@@Base+0x49c>
   1564c:	ldr	r2, [r5, r2]
   15650:	pop	{r4, r5, r6, lr}
   15654:	str	r3, [r2, #4]
   15658:	b	13704 <b64_decode@@Base+0x540>
   1565c:	andeq	r2, r1, ip, rrx
   15660:	andeq	r1, r1, r0, ror #19
   15664:	andeq	r2, r1, r8, asr #32
   15668:	strheq	r0, [r0], -ip
   1566c:	ldr	r1, [r0]
   15670:	push	{r4, r5, r6, lr}
   15674:	cmp	r1, #0
   15678:	ldr	r5, [pc, #156]	; 1571c <__gcov_sort_n_vals@@Base+0x550>
   1567c:	add	r5, pc, r5
   15680:	popeq	{r4, r5, r6, pc}
   15684:	ldr	r3, [r0, #52]	; 0x34
   15688:	cmp	r3, #0
   1568c:	popeq	{r4, r5, r6, pc}
   15690:	mov	r4, r0
   15694:	mov	r2, #0
   15698:	add	r0, r0, #12
   1569c:	bl	142ec <b64_decode@@Base+0x1128>
   156a0:	cmp	r0, #0
   156a4:	popeq	{r4, r5, r6, pc}
   156a8:	ldr	r6, [pc, #112]	; 15720 <__gcov_sort_n_vals@@Base+0x554>
   156ac:	add	r6, pc, r6
   156b0:	ldr	r2, [r6]
   156b4:	cmp	r2, #0
   156b8:	beq	156d0 <__gcov_sort_n_vals@@Base+0x504>
   156bc:	ldr	r3, [pc, #96]	; 15724 <__gcov_sort_n_vals@@Base+0x558>
   156c0:	str	r2, [r4, #4]
   156c4:	add	r3, pc, r3
   156c8:	str	r4, [r3]
   156cc:	pop	{r4, r5, r6, pc}
   156d0:	ldr	r3, [pc, #80]	; 15728 <__gcov_sort_n_vals@@Base+0x55c>
   156d4:	ldr	r2, [pc, #80]	; 1572c <__gcov_sort_n_vals@@Base+0x560>
   156d8:	mov	r0, #12
   156dc:	ldr	r5, [r5, r3]
   156e0:	add	r2, pc, r2
   156e4:	ldr	r1, [r5]
   156e8:	bl	142ec <b64_decode@@Base+0x1128>
   156ec:	cmp	r0, #0
   156f0:	ldreq	r2, [r6]
   156f4:	beq	156bc <__gcov_sort_n_vals@@Base+0x4f0>
   156f8:	ldr	r3, [r5, #4]
   156fc:	cmp	r3, #0
   15700:	str	r3, [r6, #8]
   15704:	strne	r6, [r3, #12]
   15708:	ldr	r3, [pc, #32]	; 15730 <__gcov_sort_n_vals@@Base+0x564>
   1570c:	add	r3, pc, r3
   15710:	str	r3, [r5, #4]
   15714:	ldr	r2, [r3]
   15718:	b	156bc <__gcov_sort_n_vals@@Base+0x4f0>
   1571c:	andeq	r1, r1, ip, ror r9
   15720:	andeq	r1, r1, r8, asr #31
   15724:			; <UNDEFINED> instruction: 0x00011fb0
   15728:	strheq	r0, [r0], -ip
   1572c:	muleq	r0, r0, lr
   15730:	andeq	r1, r1, r8, ror #30
   15734:	cmp	r3, #0
   15738:	cmpeq	r2, #0
   1573c:	bne	15760 <__gcov_sort_n_vals@@Base+0x594>
   15740:	cmp	r1, #0
   15744:	movlt	r1, #-2147483648	; 0x80000000
   15748:	movlt	r0, #0
   1574c:	blt	1575c <__gcov_sort_n_vals@@Base+0x590>
   15750:	cmpeq	r0, #0
   15754:	mvnne	r1, #-2147483648	; 0x80000000
   15758:	mvnne	r0, #0
   1575c:	b	15808 <__gcov_sort_n_vals@@Base+0x63c>
   15760:	sub	sp, sp, #8
   15764:	push	{sp, lr}
   15768:	cmp	r1, #0
   1576c:	blt	1578c <__gcov_sort_n_vals@@Base+0x5c0>
   15770:	cmp	r3, #0
   15774:	blt	157c0 <__gcov_sort_n_vals@@Base+0x5f4>
   15778:	bl	1585c <__gcov_sort_n_vals@@Base+0x690>
   1577c:	ldr	lr, [sp, #4]
   15780:	add	sp, sp, #8
   15784:	pop	{r2, r3}
   15788:	bx	lr
   1578c:	rsbs	r0, r0, #0
   15790:	sbc	r1, r1, r1, lsl #1
   15794:	cmp	r3, #0
   15798:	blt	157e4 <__gcov_sort_n_vals@@Base+0x618>
   1579c:	bl	1585c <__gcov_sort_n_vals@@Base+0x690>
   157a0:	ldr	lr, [sp, #4]
   157a4:	add	sp, sp, #8
   157a8:	pop	{r2, r3}
   157ac:	rsbs	r0, r0, #0
   157b0:	sbc	r1, r1, r1, lsl #1
   157b4:	rsbs	r2, r2, #0
   157b8:	sbc	r3, r3, r3, lsl #1
   157bc:	bx	lr
   157c0:	rsbs	r2, r2, #0
   157c4:	sbc	r3, r3, r3, lsl #1
   157c8:	bl	1585c <__gcov_sort_n_vals@@Base+0x690>
   157cc:	ldr	lr, [sp, #4]
   157d0:	add	sp, sp, #8
   157d4:	pop	{r2, r3}
   157d8:	rsbs	r0, r0, #0
   157dc:	sbc	r1, r1, r1, lsl #1
   157e0:	bx	lr
   157e4:	rsbs	r2, r2, #0
   157e8:	sbc	r3, r3, r3, lsl #1
   157ec:	bl	1585c <__gcov_sort_n_vals@@Base+0x690>
   157f0:	ldr	lr, [sp, #4]
   157f4:	add	sp, sp, #8
   157f8:	pop	{r2, r3}
   157fc:	rsbs	r2, r2, #0
   15800:	sbc	r3, r3, r3, lsl #1
   15804:	bx	lr
   15808:	push	{r1, lr}
   1580c:	mov	r0, #8
   15810:	bl	10eb4 <raise@plt>
   15814:	pop	{r1, pc}
   15818:	ldr	r3, [pc, #48]	; 15850 <__gcov_sort_n_vals@@Base+0x684>
   1581c:	ldr	r2, [pc, #48]	; 15854 <__gcov_sort_n_vals@@Base+0x688>
   15820:	and	r3, r3, r0, lsr #1
   15824:	sub	r0, r0, r3
   15828:	and	r3, r0, r2
   1582c:	and	r0, r2, r0, lsr #2
   15830:	add	r3, r3, r0
   15834:	ldr	r0, [pc, #28]	; 15858 <__gcov_sort_n_vals@@Base+0x68c>
   15838:	add	r3, r3, r3, lsr #4
   1583c:	and	r0, r0, r3
   15840:	add	r0, r0, r0, lsl #8
   15844:	add	r0, r0, r0, lsl #16
   15848:	lsr	r0, r0, #24
   1584c:	bx	lr
   15850:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   15854:	teqcc	r3, #-872415232	; 0xcc000000
   15858:	svceq	0x000f0f0f
   1585c:	cmp	r1, r3
   15860:	cmpeq	r0, r2
   15864:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15868:	mov	r4, r0
   1586c:	movcc	r0, #0
   15870:	mov	r5, r1
   15874:	ldr	lr, [sp, #36]	; 0x24
   15878:	movcc	r1, r0
   1587c:	bcc	15978 <__gcov_sort_n_vals@@Base+0x7ac>
   15880:	cmp	r3, #0
   15884:	clzeq	ip, r2
   15888:	clzne	ip, r3
   1588c:	addeq	ip, ip, #32
   15890:	cmp	r5, #0
   15894:	clzeq	r1, r4
   15898:	addeq	r1, r1, #32
   1589c:	clzne	r1, r5
   158a0:	sub	ip, ip, r1
   158a4:	sub	sl, ip, #32
   158a8:	lsl	r9, r3, ip
   158ac:	rsb	fp, ip, #32
   158b0:	orr	r9, r9, r2, lsl sl
   158b4:	orr	r9, r9, r2, lsr fp
   158b8:	lsl	r8, r2, ip
   158bc:	cmp	r5, r9
   158c0:	cmpeq	r4, r8
   158c4:	movcc	r0, #0
   158c8:	movcc	r1, r0
   158cc:	bcc	158e8 <__gcov_sort_n_vals@@Base+0x71c>
   158d0:	mov	r0, #1
   158d4:	subs	r4, r4, r8
   158d8:	lsl	r1, r0, sl
   158dc:	orr	r1, r1, r0, lsr fp
   158e0:	lsl	r0, r0, ip
   158e4:	sbc	r5, r5, r9
   158e8:	cmp	ip, #0
   158ec:	beq	15978 <__gcov_sort_n_vals@@Base+0x7ac>
   158f0:	lsr	r6, r8, #1
   158f4:	orr	r6, r6, r9, lsl #31
   158f8:	lsr	r7, r9, #1
   158fc:	mov	r2, ip
   15900:	b	15924 <__gcov_sort_n_vals@@Base+0x758>
   15904:	subs	r3, r4, r6
   15908:	sbc	r8, r5, r7
   1590c:	adds	r3, r3, r3
   15910:	adc	r8, r8, r8
   15914:	adds	r4, r3, #1
   15918:	adc	r5, r8, #0
   1591c:	subs	r2, r2, #1
   15920:	beq	15940 <__gcov_sort_n_vals@@Base+0x774>
   15924:	cmp	r5, r7
   15928:	cmpeq	r4, r6
   1592c:	bcs	15904 <__gcov_sort_n_vals@@Base+0x738>
   15930:	adds	r4, r4, r4
   15934:	adc	r5, r5, r5
   15938:	subs	r2, r2, #1
   1593c:	bne	15924 <__gcov_sort_n_vals@@Base+0x758>
   15940:	lsr	r3, r4, ip
   15944:	orr	r3, r3, r5, lsl fp
   15948:	lsr	r2, r5, ip
   1594c:	orr	r3, r3, r5, lsr sl
   15950:	adds	r0, r0, r4
   15954:	mov	r4, r3
   15958:	lsl	r3, r2, ip
   1595c:	orr	r3, r3, r4, lsl sl
   15960:	lsl	ip, r4, ip
   15964:	orr	r3, r3, r4, lsr fp
   15968:	adc	r1, r1, r5
   1596c:	subs	r0, r0, ip
   15970:	mov	r5, r2
   15974:	sbc	r1, r1, r3
   15978:	cmp	lr, #0
   1597c:	strdne	r4, [lr]
   15980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015984 <__libc_csu_init@@Base>:
   15984:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15988:	mov	r7, r0
   1598c:	ldr	r6, [pc, #72]	; 159dc <__libc_csu_init@@Base+0x58>
   15990:	ldr	r5, [pc, #72]	; 159e0 <__libc_csu_init@@Base+0x5c>
   15994:	add	r6, pc, r6
   15998:	add	r5, pc, r5
   1599c:	sub	r6, r6, r5
   159a0:	mov	r8, r1
   159a4:	mov	r9, r2
   159a8:	bl	10e7c <fdopen@plt-0x20>
   159ac:	asrs	r6, r6, #2
   159b0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   159b4:	mov	r4, #0
   159b8:	add	r4, r4, #1
   159bc:	ldr	r3, [r5], #4
   159c0:	mov	r2, r9
   159c4:	mov	r1, r8
   159c8:	mov	r0, r7
   159cc:	blx	r3
   159d0:	cmp	r6, r4
   159d4:	bne	159b8 <__libc_csu_init@@Base+0x34>
   159d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   159dc:	andeq	r1, r1, r4, ror #10
   159e0:	andeq	r1, r1, r0, asr r5

000159e4 <__libc_csu_fini@@Base>:
   159e4:	bx	lr

Disassembly of section .fini:

000159e8 <.fini>:
   159e8:	push	{r3, lr}
   159ec:	pop	{r3, pc}
