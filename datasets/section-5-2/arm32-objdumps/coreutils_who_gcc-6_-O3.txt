
../repos/coreutils/src/who:     file format elf32-littlearm


Disassembly of section .init:

00010e78 <.init>:
   10e78:	push	{r3, lr}
   10e7c:	bl	11520 <__assert_fail@plt+0x394>
   10e80:	pop	{r3, pc}

Disassembly of section .plt:

00010e84 <calloc@plt-0x14>:
   10e84:	push	{lr}		; (str lr, [sp, #-4]!)
   10e88:	ldr	lr, [pc, #4]	; 10e94 <calloc@plt-0x4>
   10e8c:	add	lr, pc, lr
   10e90:	ldr	pc, [lr, #8]!
   10e94:	andeq	r9, r1, ip, ror #2

00010e98 <calloc@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #102400	; 0x19000
   10ea0:	ldr	pc, [ip, #364]!	; 0x16c

00010ea4 <fputs_unlocked@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #102400	; 0x19000
   10eac:	ldr	pc, [ip, #356]!	; 0x164

00010eb0 <raise@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #102400	; 0x19000
   10eb8:	ldr	pc, [ip, #348]!	; 0x15c

00010ebc <strcmp@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #102400	; 0x19000
   10ec4:	ldr	pc, [ip, #340]!	; 0x154

00010ec8 <fflush@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #102400	; 0x19000
   10ed0:	ldr	pc, [ip, #332]!	; 0x14c

00010ed4 <utmpxname@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #102400	; 0x19000
   10edc:	ldr	pc, [ip, #324]!	; 0x144

00010ee0 <free@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #102400	; 0x19000
   10ee8:	ldr	pc, [ip, #316]!	; 0x13c

00010eec <gai_strerror@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #102400	; 0x19000
   10ef4:	ldr	pc, [ip, #308]!	; 0x134

00010ef8 <_exit@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #102400	; 0x19000
   10f00:	ldr	pc, [ip, #300]!	; 0x12c

00010f04 <memcpy@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #102400	; 0x19000
   10f0c:	ldr	pc, [ip, #292]!	; 0x124

00010f10 <mbsinit@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #102400	; 0x19000
   10f18:	ldr	pc, [ip, #284]!	; 0x11c

00010f1c <time@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #102400	; 0x19000
   10f24:	ldr	pc, [ip, #276]!	; 0x114

00010f28 <memcmp@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #102400	; 0x19000
   10f30:	ldr	pc, [ip, #268]!	; 0x10c

00010f34 <stpcpy@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #102400	; 0x19000
   10f3c:	ldr	pc, [ip, #260]!	; 0x104

00010f40 <fputc_unlocked@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #102400	; 0x19000
   10f48:	ldr	pc, [ip, #252]!	; 0xfc

00010f4c <dcgettext@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #102400	; 0x19000
   10f54:	ldr	pc, [ip, #244]!	; 0xf4

00010f58 <strdup@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #102400	; 0x19000
   10f60:	ldr	pc, [ip, #236]!	; 0xec

00010f64 <setutxent@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #102400	; 0x19000
   10f6c:	ldr	pc, [ip, #228]!	; 0xe4

00010f70 <realloc@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #102400	; 0x19000
   10f78:	ldr	pc, [ip, #220]!	; 0xdc

00010f7c <textdomain@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #102400	; 0x19000
   10f84:	ldr	pc, [ip, #212]!	; 0xd4

00010f88 <iswprint@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #102400	; 0x19000
   10f90:	ldr	pc, [ip, #204]!	; 0xcc

00010f94 <fwrite@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #102400	; 0x19000
   10f9c:	ldr	pc, [ip, #196]!	; 0xc4

00010fa0 <lseek64@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #102400	; 0x19000
   10fa8:	ldr	pc, [ip, #188]!	; 0xbc

00010fac <__ctype_get_mb_cur_max@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #102400	; 0x19000
   10fb4:	ldr	pc, [ip, #180]!	; 0xb4

00010fb8 <__fpending@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #102400	; 0x19000
   10fc0:	ldr	pc, [ip, #172]!	; 0xac

00010fc4 <mbrtowc@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #102400	; 0x19000
   10fcc:	ldr	pc, [ip, #164]!	; 0xa4

00010fd0 <error@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #102400	; 0x19000
   10fd8:	ldr	pc, [ip, #156]!	; 0x9c

00010fdc <__asprintf_chk@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #102400	; 0x19000
   10fe4:	ldr	pc, [ip, #148]!	; 0x94

00010fe8 <puts@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #102400	; 0x19000
   10ff0:	ldr	pc, [ip, #140]!	; 0x8c

00010ff4 <malloc@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #102400	; 0x19000
   10ffc:	ldr	pc, [ip, #132]!	; 0x84

00011000 <__libc_start_main@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #102400	; 0x19000
   11008:	ldr	pc, [ip, #124]!	; 0x7c

0001100c <strftime@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #102400	; 0x19000
   11014:	ldr	pc, [ip, #116]!	; 0x74

00011018 <__freading@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #102400	; 0x19000
   11020:	ldr	pc, [ip, #108]!	; 0x6c

00011024 <localtime@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #102400	; 0x19000
   1102c:	ldr	pc, [ip, #100]!	; 0x64

00011030 <__gmon_start__@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #102400	; 0x19000
   11038:	ldr	pc, [ip, #92]!	; 0x5c

0001103c <getopt_long@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #102400	; 0x19000
   11044:	ldr	pc, [ip, #84]!	; 0x54

00011048 <kill@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #102400	; 0x19000
   11050:	ldr	pc, [ip, #76]!	; 0x4c

00011054 <__ctype_b_loc@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #102400	; 0x19000
   1105c:	ldr	pc, [ip, #68]!	; 0x44

00011060 <exit@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #102400	; 0x19000
   11068:	ldr	pc, [ip, #60]!	; 0x3c

0001106c <ttyname@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #102400	; 0x19000
   11074:	ldr	pc, [ip, #52]!	; 0x34

00011078 <strlen@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #102400	; 0x19000
   11080:	ldr	pc, [ip, #44]!	; 0x2c

00011084 <strchr@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #102400	; 0x19000
   1108c:	ldr	pc, [ip, #36]!	; 0x24

00011090 <__errno_location@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #102400	; 0x19000
   11098:	ldr	pc, [ip, #28]!

0001109c <__sprintf_chk@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #102400	; 0x19000
   110a4:	ldr	pc, [ip, #20]!

000110a8 <__cxa_atexit@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #102400	; 0x19000
   110b0:	ldr	pc, [ip, #12]!

000110b4 <memset@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #102400	; 0x19000
   110bc:	ldr	pc, [ip, #4]!

000110c0 <strncpy@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #24, 20	; 0x18000
   110c8:	ldr	pc, [ip, #4092]!	; 0xffc

000110cc <__printf_chk@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #24, 20	; 0x18000
   110d4:	ldr	pc, [ip, #4084]!	; 0xff4

000110d8 <fileno@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #24, 20	; 0x18000
   110e0:	ldr	pc, [ip, #4076]!	; 0xfec

000110e4 <__fprintf_chk@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #24, 20	; 0x18000
   110ec:	ldr	pc, [ip, #4068]!	; 0xfe4

000110f0 <fclose@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #24, 20	; 0x18000
   110f8:	ldr	pc, [ip, #4060]!	; 0xfdc

000110fc <fseeko64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #24, 20	; 0x18000
   11104:	ldr	pc, [ip, #4052]!	; 0xfd4

00011108 <endutxent@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #24, 20	; 0x18000
   11110:	ldr	pc, [ip, #4044]!	; 0xfcc

00011114 <setlocale@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #24, 20	; 0x18000
   1111c:	ldr	pc, [ip, #4036]!	; 0xfc4

00011120 <strrchr@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #24, 20	; 0x18000
   11128:	ldr	pc, [ip, #4028]!	; 0xfbc

0001112c <nl_langinfo@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #24, 20	; 0x18000
   11134:	ldr	pc, [ip, #4020]!	; 0xfb4

00011138 <freeaddrinfo@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #24, 20	; 0x18000
   11140:	ldr	pc, [ip, #4012]!	; 0xfac

00011144 <getaddrinfo@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #24, 20	; 0x18000
   1114c:	ldr	pc, [ip, #4004]!	; 0xfa4

00011150 <bindtextdomain@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #24, 20	; 0x18000
   11158:	ldr	pc, [ip, #3996]!	; 0xf9c

0001115c <__xstat64@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #24, 20	; 0x18000
   11164:	ldr	pc, [ip, #3988]!	; 0xf94

00011168 <strncmp@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #24, 20	; 0x18000
   11170:	ldr	pc, [ip, #3980]!	; 0xf8c

00011174 <abort@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #24, 20	; 0x18000
   1117c:	ldr	pc, [ip, #3972]!	; 0xf84

00011180 <getutxent@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #24, 20	; 0x18000
   11188:	ldr	pc, [ip, #3964]!	; 0xf7c

0001118c <__assert_fail@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #24, 20	; 0x18000
   11194:	ldr	pc, [ip, #3956]!	; 0xf74

Disassembly of section .text:

00011198 <.text>:
   11198:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1119c:	mov	r8, r0
   111a0:	sub	sp, sp, #20
   111a4:	ldr	r0, [r1]
   111a8:	mov	r7, r1
   111ac:	bl	12d98 <__assert_fail@plt+0x1c0c>
   111b0:	ldr	r1, [pc, #736]	; 11498 <__assert_fail@plt+0x30c>
   111b4:	mov	r0, #6
   111b8:	bl	11114 <setlocale@plt>
   111bc:	ldr	r1, [pc, #728]	; 1149c <__assert_fail@plt+0x310>
   111c0:	ldr	r0, [pc, #728]	; 114a0 <__assert_fail@plt+0x314>
   111c4:	bl	11150 <bindtextdomain@plt>
   111c8:	ldr	r0, [pc, #720]	; 114a0 <__assert_fail@plt+0x314>
   111cc:	bl	10f7c <textdomain@plt>
   111d0:	ldr	r0, [pc, #716]	; 114a4 <__assert_fail@plt+0x318>
   111d4:	bl	18c00 <__assert_fail@plt+0x7a74>
   111d8:	mov	fp, #1
   111dc:	ldr	sl, [pc, #708]	; 114a8 <__assert_fail@plt+0x31c>
   111e0:	ldr	r9, [pc, #708]	; 114ac <__assert_fail@plt+0x320>
   111e4:	ldr	r4, [pc, #708]	; 114b0 <__assert_fail@plt+0x324>
   111e8:	mov	r5, fp
   111ec:	mov	r6, #0
   111f0:	str	r6, [sp]
   111f4:	mov	r3, sl
   111f8:	mov	r2, r9
   111fc:	mov	r1, r7
   11200:	mov	r0, r8
   11204:	bl	1103c <getopt_long@plt>
   11208:	cmn	r0, #1
   1120c:	beq	113b4 <__assert_fail@plt+0x228>
   11210:	cmp	r0, #109	; 0x6d
   11214:	beq	1134c <__assert_fail@plt+0x1c0>
   11218:	bgt	11254 <__assert_fail@plt+0xc8>
   1121c:	cmp	r0, #84	; 0x54
   11220:	beq	112f0 <__assert_fail@plt+0x164>
   11224:	ble	11284 <__assert_fail@plt+0xf8>
   11228:	cmp	r0, #98	; 0x62
   1122c:	beq	11340 <__assert_fail@plt+0x1b4>
   11230:	ble	112f8 <__assert_fail@plt+0x16c>
   11234:	cmp	r0, #100	; 0x64
   11238:	beq	112c4 <__assert_fail@plt+0x138>
   1123c:	cmp	r0, #108	; 0x6c
   11240:	bne	1129c <__assert_fail@plt+0x110>
   11244:	strb	r5, [r4, #83]	; 0x53
   11248:	strb	r5, [r4]
   1124c:	mov	fp, r6
   11250:	b	111f0 <__assert_fail@plt+0x64>
   11254:	cmp	r0, #115	; 0x73
   11258:	beq	11330 <__assert_fail@plt+0x1a4>
   1125c:	ble	112a4 <__assert_fail@plt+0x118>
   11260:	cmp	r0, #117	; 0x75
   11264:	beq	113a4 <__assert_fail@plt+0x218>
   11268:	blt	11398 <__assert_fail@plt+0x20c>
   1126c:	cmp	r0, #119	; 0x77
   11270:	beq	112f0 <__assert_fail@plt+0x164>
   11274:	cmp	r0, #256	; 0x100
   11278:	bne	1129c <__assert_fail@plt+0x110>
   1127c:	strb	r5, [r4, #49]	; 0x31
   11280:	b	111f0 <__assert_fail@plt+0x64>
   11284:	cmn	r0, #2
   11288:	beq	11390 <__assert_fail@plt+0x204>
   1128c:	cmp	r0, #72	; 0x48
   11290:	beq	112e8 <__assert_fail@plt+0x15c>
   11294:	cmn	r0, #3
   11298:	beq	11354 <__assert_fail@plt+0x1c8>
   1129c:	mov	r0, #1
   112a0:	bl	12668 <__assert_fail@plt+0x14dc>
   112a4:	cmp	r0, #113	; 0x71
   112a8:	beq	11338 <__assert_fail@plt+0x1ac>
   112ac:	bgt	112d8 <__assert_fail@plt+0x14c>
   112b0:	cmp	r0, #112	; 0x70
   112b4:	bne	1129c <__assert_fail@plt+0x110>
   112b8:	strb	r5, [r4, #82]	; 0x52
   112bc:	mov	fp, r6
   112c0:	b	111f0 <__assert_fail@plt+0x64>
   112c4:	strb	r5, [r4, #84]	; 0x54
   112c8:	strb	r5, [r4]
   112cc:	strb	r5, [r4, #2]
   112d0:	mov	fp, r6
   112d4:	b	111f0 <__assert_fail@plt+0x64>
   112d8:	strb	r5, [r4, #68]	; 0x44
   112dc:	strb	r5, [r4]
   112e0:	mov	fp, r6
   112e4:	b	111f0 <__assert_fail@plt+0x64>
   112e8:	strb	r5, [r4, #65]	; 0x41
   112ec:	b	111f0 <__assert_fail@plt+0x64>
   112f0:	strb	r5, [r4, #3]
   112f4:	b	111f0 <__assert_fail@plt+0x64>
   112f8:	cmp	r0, #97	; 0x61
   112fc:	bne	1129c <__assert_fail@plt+0x110>
   11300:	strb	r5, [r4, #80]	; 0x50
   11304:	strb	r5, [r4, #84]	; 0x54
   11308:	strb	r5, [r4, #83]	; 0x53
   1130c:	strb	r5, [r4, #82]	; 0x52
   11310:	strb	r5, [r4, #68]	; 0x44
   11314:	strb	r5, [r4, #81]	; 0x51
   11318:	strb	r5, [r4, #67]	; 0x43
   1131c:	strb	r5, [r4, #3]
   11320:	strb	r5, [r4]
   11324:	strb	r5, [r4, #2]
   11328:	mov	fp, r6
   1132c:	b	111f0 <__assert_fail@plt+0x64>
   11330:	strb	r5, [r4, #1]
   11334:	b	111f0 <__assert_fail@plt+0x64>
   11338:	strb	r5, [r4, #64]	; 0x40
   1133c:	b	111f0 <__assert_fail@plt+0x64>
   11340:	strb	r5, [r4, #80]	; 0x50
   11344:	mov	fp, r6
   11348:	b	111f0 <__assert_fail@plt+0x64>
   1134c:	strb	r5, [r4, #66]	; 0x42
   11350:	b	111f0 <__assert_fail@plt+0x64>
   11354:	ldr	ip, [pc, #344]	; 114b4 <__assert_fail@plt+0x328>
   11358:	ldr	r1, [pc, #344]	; 114b8 <__assert_fail@plt+0x32c>
   1135c:	ldr	r3, [pc, #344]	; 114bc <__assert_fail@plt+0x330>
   11360:	ldr	r0, [pc, #344]	; 114c0 <__assert_fail@plt+0x334>
   11364:	ldr	r2, [pc, #344]	; 114c4 <__assert_fail@plt+0x338>
   11368:	str	r6, [sp, #12]
   1136c:	ldr	r0, [r0]
   11370:	ldr	r3, [r3]
   11374:	stmib	sp, {r1, ip}
   11378:	str	r2, [sp]
   1137c:	ldr	r1, [pc, #324]	; 114c8 <__assert_fail@plt+0x33c>
   11380:	ldr	r2, [pc, #324]	; 114cc <__assert_fail@plt+0x340>
   11384:	bl	17914 <__assert_fail@plt+0x6788>
   11388:	mov	r0, #0
   1138c:	bl	11060 <exit@plt>
   11390:	mov	r0, #0
   11394:	bl	12668 <__assert_fail@plt+0x14dc>
   11398:	strb	r5, [r4, #81]	; 0x51
   1139c:	mov	fp, r6
   113a0:	b	111f0 <__assert_fail@plt+0x64>
   113a4:	strb	r5, [r4, #67]	; 0x43
   113a8:	strb	r5, [r4]
   113ac:	mov	fp, r6
   113b0:	b	111f0 <__assert_fail@plt+0x64>
   113b4:	ldr	r4, [pc, #244]	; 114b0 <__assert_fail@plt+0x324>
   113b8:	cmp	fp, #0
   113bc:	movne	r3, #1
   113c0:	strbne	r3, [r4, #1]
   113c4:	strbne	r3, [r4, #67]	; 0x43
   113c8:	ldrb	r3, [r4, #2]
   113cc:	mov	r0, #2
   113d0:	ldr	r5, [pc, #248]	; 114d0 <__assert_fail@plt+0x344>
   113d4:	cmp	r3, #0
   113d8:	movne	r3, #0
   113dc:	strbne	r3, [r4, #1]
   113e0:	bl	12c6c <__assert_fail@plt+0x1ae0>
   113e4:	ldr	r2, [r5]
   113e8:	ldr	r1, [pc, #228]	; 114d4 <__assert_fail@plt+0x348>
   113ec:	ldr	r3, [pc, #228]	; 114d8 <__assert_fail@plt+0x34c>
   113f0:	sub	r8, r8, r2
   113f4:	add	r8, r8, #1
   113f8:	cmp	r0, #0
   113fc:	moveq	r3, r1
   11400:	movne	r1, #16
   11404:	moveq	r1, #12
   11408:	str	r3, [r4, #60]	; 0x3c
   1140c:	str	r1, [r4, #4]
   11410:	cmp	r8, #3
   11414:	ldrls	pc, [pc, r8, lsl #2]
   11418:	b	1145c <__assert_fail@plt+0x2d0>
   1141c:	andeq	r1, r1, r4, lsr r4
   11420:	andeq	r1, r1, r4, lsr r4
   11424:	andeq	r1, r1, ip, asr #8
   11428:	andeq	r1, r1, ip, lsr #8
   1142c:	mov	r3, #1
   11430:	strb	r3, [r4, #66]	; 0x42
   11434:	mov	r1, #1
   11438:	ldr	r0, [pc, #156]	; 114dc <__assert_fail@plt+0x350>
   1143c:	bl	11cc8 <__assert_fail@plt+0xb3c>
   11440:	mov	r0, #0
   11444:	add	sp, sp, #20
   11448:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1144c:	ldr	r0, [r7, r2, lsl #2]
   11450:	mov	r1, #0
   11454:	bl	11cc8 <__assert_fail@plt+0xb3c>
   11458:	b	11440 <__assert_fail@plt+0x2b4>
   1145c:	mov	r2, #5
   11460:	ldr	r1, [pc, #120]	; 114e0 <__assert_fail@plt+0x354>
   11464:	mov	r0, #0
   11468:	bl	10f4c <dcgettext@plt>
   1146c:	ldr	r3, [r5]
   11470:	add	r3, r3, #2
   11474:	mov	r4, r0
   11478:	ldr	r0, [r7, r3, lsl #2]
   1147c:	bl	16c64 <__assert_fail@plt+0x5ad8>
   11480:	mov	r1, #0
   11484:	mov	r2, r4
   11488:	mov	r3, r0
   1148c:	mov	r0, r1
   11490:	bl	10fd0 <error@plt>
   11494:	b	1129c <__assert_fail@plt+0x110>
   11498:	muleq	r1, ip, r3
   1149c:	andeq	r9, r1, r8, asr #9
   114a0:	andeq	r9, r1, r4, lsl #8
   114a4:	andeq	r2, r1, r0, lsr fp
   114a8:	andeq	r8, r1, r8, ror #24
   114ac:	andeq	r9, r1, r4, lsl r5
   114b0:	andeq	sl, r2, r4, lsl #3
   114b4:	andeq	r9, r1, r0, ror #9
   114b8:	strdeq	r9, [r1], -r0
   114bc:	andeq	sl, r2, r0, lsr #2
   114c0:	andeq	sl, r2, ip, ror r1
   114c4:	andeq	r9, r1, r0, lsl #10
   114c8:	andeq	r8, r1, ip, ror #29
   114cc:	andeq	r9, r1, r0, lsl #8
   114d0:	andeq	sl, r2, r0, ror r1
   114d4:			; <UNDEFINED> instruction: 0x000194bc
   114d8:	andeq	r9, r1, ip, lsr #9
   114dc:			; <UNDEFINED> instruction: 0x000193b0
   114e0:	andeq	r9, r1, r4, lsr #10
   114e4:	mov	fp, #0
   114e8:	mov	lr, #0
   114ec:	pop	{r1}		; (ldr r1, [sp], #4)
   114f0:	mov	r2, sp
   114f4:	push	{r2}		; (str r2, [sp, #-4]!)
   114f8:	push	{r0}		; (str r0, [sp, #-4]!)
   114fc:	ldr	ip, [pc, #16]	; 11514 <__assert_fail@plt+0x388>
   11500:	push	{ip}		; (str ip, [sp, #-4]!)
   11504:	ldr	r0, [pc, #12]	; 11518 <__assert_fail@plt+0x38c>
   11508:	ldr	r3, [pc, #12]	; 1151c <__assert_fail@plt+0x390>
   1150c:	bl	11000 <__libc_start_main@plt>
   11510:	bl	11174 <abort@plt>
   11514:	strdeq	r8, [r1], -ip
   11518:	muleq	r1, r8, r1
   1151c:	muleq	r1, ip, fp
   11520:	ldr	r3, [pc, #20]	; 1153c <__assert_fail@plt+0x3b0>
   11524:	ldr	r2, [pc, #20]	; 11540 <__assert_fail@plt+0x3b4>
   11528:	add	r3, pc, r3
   1152c:	ldr	r2, [r3, r2]
   11530:	cmp	r2, #0
   11534:	bxeq	lr
   11538:	b	11030 <__gmon_start__@plt>
   1153c:	ldrdeq	r8, [r1], -r0
   11540:	andeq	r0, r0, ip, lsl #2
   11544:	ldr	r3, [pc, #28]	; 11568 <__assert_fail@plt+0x3dc>
   11548:	ldr	r0, [pc, #28]	; 1156c <__assert_fail@plt+0x3e0>
   1154c:	sub	r3, r3, r0
   11550:	cmp	r3, #6
   11554:	bxls	lr
   11558:	ldr	r3, [pc, #16]	; 11570 <__assert_fail@plt+0x3e4>
   1155c:	cmp	r3, #0
   11560:	bxeq	lr
   11564:	bx	r3
   11568:	andeq	sl, r2, fp, ror #2
   1156c:	andeq	sl, r2, r8, ror #2
   11570:	andeq	r0, r0, r0
   11574:	ldr	r1, [pc, #36]	; 115a0 <__assert_fail@plt+0x414>
   11578:	ldr	r0, [pc, #36]	; 115a4 <__assert_fail@plt+0x418>
   1157c:	sub	r1, r1, r0
   11580:	asr	r1, r1, #2
   11584:	add	r1, r1, r1, lsr #31
   11588:	asrs	r1, r1, #1
   1158c:	bxeq	lr
   11590:	ldr	r3, [pc, #16]	; 115a8 <__assert_fail@plt+0x41c>
   11594:	cmp	r3, #0
   11598:	bxeq	lr
   1159c:	bx	r3
   115a0:	andeq	sl, r2, r8, ror #2
   115a4:	andeq	sl, r2, r8, ror #2
   115a8:	andeq	r0, r0, r0
   115ac:	push	{r4, lr}
   115b0:	ldr	r4, [pc, #24]	; 115d0 <__assert_fail@plt+0x444>
   115b4:	ldrb	r3, [r4]
   115b8:	cmp	r3, #0
   115bc:	popne	{r4, pc}
   115c0:	bl	11544 <__assert_fail@plt+0x3b8>
   115c4:	mov	r3, #1
   115c8:	strb	r3, [r4]
   115cc:	pop	{r4, pc}
   115d0:	andeq	sl, r2, r0, lsl #3
   115d4:	ldr	r0, [pc, #40]	; 11604 <__assert_fail@plt+0x478>
   115d8:	ldr	r3, [r0]
   115dc:	cmp	r3, #0
   115e0:	bne	115e8 <__assert_fail@plt+0x45c>
   115e4:	b	11574 <__assert_fail@plt+0x3e8>
   115e8:	ldr	r3, [pc, #24]	; 11608 <__assert_fail@plt+0x47c>
   115ec:	cmp	r3, #0
   115f0:	beq	115e4 <__assert_fail@plt+0x458>
   115f4:	push	{r4, lr}
   115f8:	blx	r3
   115fc:	pop	{r4, lr}
   11600:	b	11574 <__assert_fail@plt+0x3e8>
   11604:	andeq	r9, r2, r4, lsl pc
   11608:	andeq	r0, r0, r0
   1160c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11610:	mov	r9, r0
   11614:	ldr	r4, [pc, #468]	; 117f0 <__assert_fail@plt+0x664>
   11618:	ldr	ip, [pc, #468]	; 117f4 <__assert_fail@plt+0x668>
   1161c:	sub	sp, sp, #76	; 0x4c
   11620:	ldrb	r0, [r4]
   11624:	mov	r5, r1
   11628:	mov	sl, r3
   1162c:	cmp	r0, #0
   11630:	strb	r2, [ip, #1]
   11634:	ldr	fp, [sp, #128]	; 0x80
   11638:	ldrb	r7, [r4, #1]
   1163c:	beq	11648 <__assert_fail@plt+0x4bc>
   11640:	cmp	r7, #0
   11644:	beq	11774 <__assert_fail@plt+0x5e8>
   11648:	add	r6, sp, #72	; 0x48
   1164c:	mov	r3, #0
   11650:	strb	r3, [r6, #-24]!	; 0xffffffe8
   11654:	cmp	r7, #0
   11658:	bne	1166c <__assert_fail@plt+0x4e0>
   1165c:	ldr	r0, [sp, #124]	; 0x7c
   11660:	bl	11078 <strlen@plt>
   11664:	cmp	r0, #11
   11668:	bls	117c8 <__assert_fail@plt+0x63c>
   1166c:	add	r7, sp, #72	; 0x48
   11670:	mov	r3, #0
   11674:	strb	r3, [r7, #-16]!
   11678:	ldrb	r3, [r4, #2]
   1167c:	cmp	r3, #0
   11680:	moveq	r0, #1
   11684:	beq	1169c <__assert_fail@plt+0x510>
   11688:	ldr	r0, [sp, #132]	; 0x84
   1168c:	bl	11078 <strlen@plt>
   11690:	cmp	r0, #11
   11694:	addhi	r0, r0, #2
   11698:	movls	r0, #14
   1169c:	bl	17afc <__assert_fail@plt+0x6970>
   116a0:	ldrb	r3, [r4, #2]
   116a4:	cmp	r3, #0
   116a8:	mov	r8, r0
   116ac:	strbeq	r3, [r0]
   116b0:	bne	117ac <__assert_fail@plt+0x620>
   116b4:	ldrb	r0, [r4, #3]
   116b8:	ldr	r3, [pc, #308]	; 117f4 <__assert_fail@plt+0x668>
   116bc:	ldr	r2, [pc, #308]	; 117f8 <__assert_fail@plt+0x66c>
   116c0:	cmp	r0, #0
   116c4:	movne	r2, r3
   116c8:	ldr	r3, [pc, #300]	; 117fc <__assert_fail@plt+0x670>
   116cc:	cmp	r5, #0
   116d0:	moveq	r5, r3
   116d4:	ldr	r3, [sp, #116]	; 0x74
   116d8:	ldr	r1, [r4, #4]
   116dc:	str	r3, [sp, #20]
   116e0:	ldr	r3, [sp, #112]	; 0x70
   116e4:	str	r1, [sp, #16]
   116e8:	str	r3, [sp, #12]
   116ec:	str	r2, [sp, #4]
   116f0:	str	r8, [sp, #36]	; 0x24
   116f4:	str	fp, [sp, #32]
   116f8:	str	r7, [sp, #28]
   116fc:	str	r6, [sp, #24]
   11700:	str	sl, [sp, #8]
   11704:	mov	r3, r9
   11708:	str	r5, [sp]
   1170c:	ldr	r2, [pc, #236]	; 11800 <__assert_fail@plt+0x674>
   11710:	mov	r1, #1
   11714:	add	r0, sp, #44	; 0x2c
   11718:	bl	10fdc <__asprintf_chk@plt>
   1171c:	cmn	r0, #1
   11720:	beq	117ec <__assert_fail@plt+0x660>
   11724:	ldr	r4, [sp, #44]	; 0x2c
   11728:	mov	r0, r4
   1172c:	bl	11078 <strlen@plt>
   11730:	add	r0, r4, r0
   11734:	b	1173c <__assert_fail@plt+0x5b0>
   11738:	mov	r0, r2
   1173c:	ldrb	r3, [r0, #-1]
   11740:	sub	r2, r0, #1
   11744:	cmp	r3, #32
   11748:	beq	11738 <__assert_fail@plt+0x5ac>
   1174c:	mov	r3, #0
   11750:	strb	r3, [r0]
   11754:	ldr	r0, [sp, #44]	; 0x2c
   11758:	bl	10fe8 <puts@plt>
   1175c:	ldr	r0, [sp, #44]	; 0x2c
   11760:	bl	12c14 <__assert_fail@plt+0x1a88>
   11764:	mov	r0, r8
   11768:	bl	12c14 <__assert_fail@plt+0x1a88>
   1176c:	add	sp, sp, #76	; 0x4c
   11770:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11774:	ldr	r0, [sp, #120]	; 0x78
   11778:	bl	11078 <strlen@plt>
   1177c:	cmp	r0, #6
   11780:	bhi	11648 <__assert_fail@plt+0x4bc>
   11784:	ldr	r3, [sp, #120]	; 0x78
   11788:	add	r6, sp, #48	; 0x30
   1178c:	str	r3, [sp]
   11790:	mov	r0, r6
   11794:	ldr	r3, [pc, #104]	; 11804 <__assert_fail@plt+0x678>
   11798:	mov	r2, #8
   1179c:	mov	r1, #1
   117a0:	bl	1109c <__sprintf_chk@plt>
   117a4:	ldrb	r7, [r4, #1]
   117a8:	b	11654 <__assert_fail@plt+0x4c8>
   117ac:	ldr	r3, [sp, #132]	; 0x84
   117b0:	mvn	r2, #0
   117b4:	str	r3, [sp]
   117b8:	mov	r1, #1
   117bc:	ldr	r3, [pc, #68]	; 11808 <__assert_fail@plt+0x67c>
   117c0:	bl	1109c <__sprintf_chk@plt>
   117c4:	b	116b4 <__assert_fail@plt+0x528>
   117c8:	ldr	r3, [sp, #124]	; 0x7c
   117cc:	add	r7, sp, #56	; 0x38
   117d0:	str	r3, [sp]
   117d4:	mov	r0, r7
   117d8:	ldr	r3, [pc, #44]	; 1180c <__assert_fail@plt+0x680>
   117dc:	mov	r2, #13
   117e0:	mov	r1, #1
   117e4:	bl	1109c <__sprintf_chk@plt>
   117e8:	b	11678 <__assert_fail@plt+0x4ec>
   117ec:	bl	18144 <__assert_fail@plt+0x6fb8>
   117f0:	andeq	sl, r2, r4, lsl #3
   117f4:	andeq	sl, r2, r8, lsl r1
   117f8:	muleq	r1, ip, r3
   117fc:	andeq	r8, r1, r8, lsl #27
   11800:	andeq	r8, r1, r8, lsr #27
   11804:	muleq	r1, r0, sp
   11808:	andeq	r8, r1, r0, lsr #27
   1180c:	muleq	r1, r8, sp
   11810:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11814:	sub	sp, sp, #468	; 0x1d4
   11818:	ldr	r3, [r0, #4]
   1181c:	mov	r4, r0
   11820:	add	r8, sp, #44	; 0x2c
   11824:	str	r3, [sp]
   11828:	mov	r5, r1
   1182c:	ldr	r3, [pc, #1088]	; 11c74 <__assert_fail@plt+0xae8>
   11830:	mov	r0, r8
   11834:	mov	r2, #12
   11838:	mov	r1, #1
   1183c:	bl	1109c <__sprintf_chk@plt>
   11840:	ldrb	r3, [r4, #8]
   11844:	cmp	r3, #47	; 0x2f
   11848:	beq	11b44 <__assert_fail@plt+0x9b8>
   1184c:	ldr	r2, [pc, #1060]	; 11c78 <__assert_fail@plt+0xaec>
   11850:	add	ip, sp, #56	; 0x38
   11854:	cmp	r3, #0
   11858:	ldm	r2, {r0, r1}
   1185c:	add	r9, r4, #8
   11860:	str	r0, [sp, #56]	; 0x38
   11864:	strh	r1, [sp, #60]	; 0x3c
   11868:	add	r0, ip, #5
   1186c:	add	r1, r4, #40	; 0x28
   11870:	beq	11894 <__assert_fail@plt+0x708>
   11874:	add	r2, r9, #1
   11878:	b	11888 <__assert_fail@plt+0x6fc>
   1187c:	ldrb	r3, [r2], #1
   11880:	cmp	r3, #0
   11884:	beq	11894 <__assert_fail@plt+0x708>
   11888:	cmp	r2, r1
   1188c:	strb	r3, [r0], #1
   11890:	bcc	1187c <__assert_fail@plt+0x6f0>
   11894:	mov	r3, #0
   11898:	strb	r3, [r0]
   1189c:	mov	r1, ip
   118a0:	add	r2, sp, #96	; 0x60
   118a4:	mov	r0, #3
   118a8:	bl	1115c <__xstat64@plt>
   118ac:	cmp	r0, #0
   118b0:	bne	11980 <__assert_fail@plt+0x7f4>
   118b4:	ldr	r3, [sp, #112]	; 0x70
   118b8:	ldr	r6, [sp, #168]	; 0xa8
   118bc:	tst	r3, #16
   118c0:	moveq	fp, #45	; 0x2d
   118c4:	movne	fp, #43	; 0x2b
   118c8:	cmp	r6, #0
   118cc:	beq	11984 <__assert_fail@plt+0x7f8>
   118d0:	ldr	r7, [pc, #932]	; 11c7c <__assert_fail@plt+0xaf0>
   118d4:	ldr	r3, [r7, #4]
   118d8:	cmp	r3, #-2147483648	; 0x80000000
   118dc:	beq	11be0 <__assert_fail@plt+0xa54>
   118e0:	cmp	r6, r5
   118e4:	ble	11b0c <__assert_fail@plt+0x980>
   118e8:	ldr	r2, [r7, #4]
   118ec:	ldr	r3, [pc, #908]	; 11c80 <__assert_fail@plt+0xaf4>
   118f0:	add	r3, r2, r3
   118f4:	cmp	r6, r3
   118f8:	movlt	r3, #0
   118fc:	movge	r3, #1
   11900:	cmp	r6, r2
   11904:	movgt	r3, #0
   11908:	cmp	r3, #0
   1190c:	beq	11b0c <__assert_fail@plt+0x980>
   11910:	sub	r2, r2, r6
   11914:	cmp	r2, #59	; 0x3b
   11918:	ble	11c40 <__assert_fail@plt+0xab4>
   1191c:	ldr	r3, [pc, #864]	; 11c84 <__assert_fail@plt+0xaf8>
   11920:	cmp	r2, r3
   11924:	bgt	11c60 <__assert_fail@plt+0xad4>
   11928:	ldr	r3, [pc, #856]	; 11c88 <__assert_fail@plt+0xafc>
   1192c:	asr	r0, r2, #31
   11930:	mov	r6, #3600	; 0xe10
   11934:	smull	r1, r3, r3, r2
   11938:	ldr	r1, [pc, #844]	; 11c8c <__assert_fail@plt+0xb00>
   1193c:	add	r3, r3, r2
   11940:	rsb	r3, r0, r3, asr #11
   11944:	str	r3, [sp]
   11948:	mul	r6, r6, r3
   1194c:	ldr	r3, [pc, #828]	; 11c90 <__assert_fail@plt+0xb04>
   11950:	sub	r6, r2, r6
   11954:	mov	r2, #6
   11958:	smull	r0, r1, r1, r6
   1195c:	ldr	r0, [pc, #816]	; 11c94 <__assert_fail@plt+0xb08>
   11960:	add	ip, r1, r6
   11964:	asr	r1, r6, #31
   11968:	rsb	r1, r1, ip, asr #5
   1196c:	str	r1, [sp, #4]
   11970:	mov	r1, #1
   11974:	bl	1109c <__sprintf_chk@plt>
   11978:	ldr	r0, [pc, #788]	; 11c94 <__assert_fail@plt+0xb08>
   1197c:	b	11b1c <__assert_fail@plt+0x990>
   11980:	mov	fp, #63	; 0x3f
   11984:	ldr	r3, [pc, #780]	; 11c98 <__assert_fail@plt+0xb0c>
   11988:	add	r7, sp, #464	; 0x1d0
   1198c:	str	r3, [r7, #-428]!	; 0xfffffe54
   11990:	ldrb	r3, [r4, #76]	; 0x4c
   11994:	cmp	r3, #0
   11998:	beq	11a7c <__assert_fail@plt+0x8f0>
   1199c:	add	r6, sp, #204	; 0xcc
   119a0:	mov	ip, r6
   119a4:	add	r1, r4, #332	; 0x14c
   119a8:	add	r2, r4, #77	; 0x4d
   119ac:	b	119bc <__assert_fail@plt+0x830>
   119b0:	ldrb	r3, [r2], #1
   119b4:	cmp	r3, #0
   119b8:	beq	119c8 <__assert_fail@plt+0x83c>
   119bc:	cmp	r1, r2
   119c0:	strb	r3, [ip], #1
   119c4:	bhi	119b0 <__assert_fail@plt+0x824>
   119c8:	mov	r5, #0
   119cc:	mov	r1, #58	; 0x3a
   119d0:	mov	r0, r6
   119d4:	strb	r5, [ip]
   119d8:	bl	11084 <strchr@plt>
   119dc:	cmp	r0, #0
   119e0:	beq	11ba0 <__assert_fail@plt+0xa14>
   119e4:	strb	r5, [r0]
   119e8:	ldrb	r3, [sp, #204]	; 0xcc
   119ec:	add	r2, r0, #1
   119f0:	str	r2, [sp, #24]
   119f4:	cmp	r3, r5
   119f8:	beq	11b6c <__assert_fail@plt+0x9e0>
   119fc:	ldr	r5, [pc, #664]	; 11c9c <__assert_fail@plt+0xb10>
   11a00:	ldrb	r3, [r5, #49]	; 0x31
   11a04:	cmp	r3, #0
   11a08:	moveq	sl, r6
   11a0c:	moveq	r3, r2
   11a10:	bne	11bc4 <__assert_fail@plt+0xa38>
   11a14:	cmp	r3, #0
   11a18:	beq	11c0c <__assert_fail@plt+0xa80>
   11a1c:	mov	r0, sl
   11a20:	bl	11078 <strlen@plt>
   11a24:	str	r0, [sp, #28]
   11a28:	ldr	r0, [sp, #24]
   11a2c:	bl	11078 <strlen@plt>
   11a30:	ldr	r3, [sp, #28]
   11a34:	ldr	r2, [r5, #52]	; 0x34
   11a38:	add	r3, r3, r0
   11a3c:	add	r3, r3, #4
   11a40:	cmp	r3, r2
   11a44:	ldr	r0, [r5, #56]	; 0x38
   11a48:	bhi	11bec <__assert_fail@plt+0xa60>
   11a4c:	ldr	r3, [sp, #24]
   11a50:	str	sl, [sp]
   11a54:	str	r3, [sp, #4]
   11a58:	mvn	r2, #0
   11a5c:	ldr	r3, [pc, #572]	; 11ca0 <__assert_fail@plt+0xb14>
   11a60:	mov	r1, #1
   11a64:	bl	1109c <__sprintf_chk@plt>
   11a68:	cmp	sl, r6
   11a6c:	beq	11a9c <__assert_fail@plt+0x910>
   11a70:	mov	r0, sl
   11a74:	bl	12c14 <__assert_fail@plt+0x1a88>
   11a78:	b	11a9c <__assert_fail@plt+0x910>
   11a7c:	ldr	r5, [pc, #536]	; 11c9c <__assert_fail@plt+0xb10>
   11a80:	ldr	r3, [r5, #52]	; 0x34
   11a84:	cmp	r3, #0
   11a88:	beq	11b7c <__assert_fail@plt+0x9f0>
   11a8c:	ldr	r2, [r5, #56]	; 0x38
   11a90:	add	r6, sp, #204	; 0xcc
   11a94:	mov	r3, #0
   11a98:	strb	r3, [r2]
   11a9c:	ldr	r3, [r4, #340]	; 0x154
   11aa0:	mov	r0, r6
   11aa4:	str	r3, [sp, #204]	; 0xcc
   11aa8:	bl	11024 <localtime@plt>
   11aac:	add	r4, r4, #44	; 0x2c
   11ab0:	subs	r3, r0, #0
   11ab4:	beq	11b58 <__assert_fail@plt+0x9cc>
   11ab8:	ldr	r2, [r5, #60]	; 0x3c
   11abc:	mov	r1, #33	; 0x21
   11ac0:	ldr	r0, [pc, #476]	; 11ca4 <__assert_fail@plt+0xb18>
   11ac4:	bl	1100c <strftime@plt>
   11ac8:	ldr	r0, [pc, #468]	; 11ca4 <__assert_fail@plt+0xb18>
   11acc:	ldr	r3, [r5, #56]	; 0x38
   11ad0:	ldr	r1, [pc, #464]	; 11ca8 <__assert_fail@plt+0xb1c>
   11ad4:	cmp	r3, #0
   11ad8:	moveq	r2, r1
   11adc:	movne	r2, r3
   11ae0:	mov	r3, #32
   11ae4:	str	r1, [sp, #20]
   11ae8:	str	r2, [sp, #16]
   11aec:	stmib	sp, {r0, r7, r8}
   11af0:	mov	r2, fp
   11af4:	str	r9, [sp]
   11af8:	mov	r1, r4
   11afc:	mov	r0, r3
   11b00:	bl	1160c <__assert_fail@plt+0x480>
   11b04:	add	sp, sp, #468	; 0x1d4
   11b08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b0c:	mov	r2, #5
   11b10:	ldr	r1, [pc, #404]	; 11cac <__assert_fail@plt+0xb20>
   11b14:	mov	r0, #0
   11b18:	bl	10f4c <dcgettext@plt>
   11b1c:	add	r7, sp, #36	; 0x24
   11b20:	mov	r3, #6
   11b24:	str	r0, [sp, #4]
   11b28:	str	r3, [sp]
   11b2c:	mov	r0, r7
   11b30:	ldr	r3, [pc, #376]	; 11cb0 <__assert_fail@plt+0xb24>
   11b34:	mov	r2, #7
   11b38:	mov	r1, #1
   11b3c:	bl	1109c <__sprintf_chk@plt>
   11b40:	b	11990 <__assert_fail@plt+0x804>
   11b44:	add	ip, sp, #56	; 0x38
   11b48:	mov	r0, ip
   11b4c:	add	r9, r4, #8
   11b50:	add	r1, r4, #40	; 0x28
   11b54:	b	11874 <__assert_fail@plt+0x6e8>
   11b58:	ldr	r0, [sp, #204]	; 0xcc
   11b5c:	ldr	r2, [pc, #320]	; 11ca4 <__assert_fail@plt+0xb18>
   11b60:	asr	r1, r0, #31
   11b64:	bl	12cc8 <__assert_fail@plt+0x1b3c>
   11b68:	b	11acc <__assert_fail@plt+0x940>
   11b6c:	mov	sl, r6
   11b70:	ldr	r5, [pc, #292]	; 11c9c <__assert_fail@plt+0xb10>
   11b74:	mov	r3, r2
   11b78:	b	11a14 <__assert_fail@plt+0x888>
   11b7c:	mov	r3, #1
   11b80:	ldr	r0, [r5, #56]	; 0x38
   11b84:	str	r3, [r5, #52]	; 0x34
   11b88:	bl	12c14 <__assert_fail@plt+0x1a88>
   11b8c:	ldr	r0, [r5, #52]	; 0x34
   11b90:	bl	17afc <__assert_fail@plt+0x6970>
   11b94:	mov	r2, r0
   11b98:	str	r0, [r5, #56]	; 0x38
   11b9c:	b	11a90 <__assert_fail@plt+0x904>
   11ba0:	ldrb	r3, [sp, #204]	; 0xcc
   11ba4:	cmp	r3, #0
   11ba8:	beq	11c04 <__assert_fail@plt+0xa78>
   11bac:	ldr	r5, [pc, #232]	; 11c9c <__assert_fail@plt+0xb10>
   11bb0:	ldrb	r3, [r5, #49]	; 0x31
   11bb4:	cmp	r3, #0
   11bb8:	moveq	sl, r6
   11bbc:	beq	11c0c <__assert_fail@plt+0xa80>
   11bc0:	str	r0, [sp, #24]
   11bc4:	mov	r0, r6
   11bc8:	bl	129ec <__assert_fail@plt+0x1860>
   11bcc:	ldr	r3, [sp, #24]
   11bd0:	cmp	r0, #0
   11bd4:	movne	sl, r0
   11bd8:	moveq	sl, r6
   11bdc:	b	11a14 <__assert_fail@plt+0x888>
   11be0:	add	r0, r7, #4
   11be4:	bl	10f1c <time@plt>
   11be8:	b	118e0 <__assert_fail@plt+0x754>
   11bec:	str	r3, [r5, #52]	; 0x34
   11bf0:	bl	12c14 <__assert_fail@plt+0x1a88>
   11bf4:	ldr	r0, [r5, #52]	; 0x34
   11bf8:	bl	17afc <__assert_fail@plt+0x6970>
   11bfc:	str	r0, [r5, #56]	; 0x38
   11c00:	b	11a4c <__assert_fail@plt+0x8c0>
   11c04:	ldr	r5, [pc, #144]	; 11c9c <__assert_fail@plt+0xb10>
   11c08:	mov	sl, r6
   11c0c:	mov	r0, sl
   11c10:	bl	11078 <strlen@plt>
   11c14:	ldr	r2, [r5, #52]	; 0x34
   11c18:	add	r3, r0, #3
   11c1c:	cmp	r3, r2
   11c20:	ldr	r0, [r5, #56]	; 0x38
   11c24:	bhi	11c48 <__assert_fail@plt+0xabc>
   11c28:	str	sl, [sp]
   11c2c:	ldr	r3, [pc, #128]	; 11cb4 <__assert_fail@plt+0xb28>
   11c30:	mvn	r2, #0
   11c34:	mov	r1, #1
   11c38:	bl	1109c <__sprintf_chk@plt>
   11c3c:	b	11a68 <__assert_fail@plt+0x8dc>
   11c40:	ldr	r0, [pc, #112]	; 11cb8 <__assert_fail@plt+0xb2c>
   11c44:	b	11b1c <__assert_fail@plt+0x990>
   11c48:	str	r3, [r5, #52]	; 0x34
   11c4c:	bl	12c14 <__assert_fail@plt+0x1a88>
   11c50:	ldr	r0, [r5, #52]	; 0x34
   11c54:	bl	17afc <__assert_fail@plt+0x6970>
   11c58:	str	r0, [r5, #56]	; 0x38
   11c5c:	b	11c28 <__assert_fail@plt+0xa9c>
   11c60:	ldr	r3, [pc, #84]	; 11cbc <__assert_fail@plt+0xb30>
   11c64:	mov	r2, #205	; 0xcd
   11c68:	ldr	r1, [pc, #80]	; 11cc0 <__assert_fail@plt+0xb34>
   11c6c:	ldr	r0, [pc, #80]	; 11cc4 <__assert_fail@plt+0xb38>
   11c70:	bl	1118c <__assert_fail@plt>
   11c74:	ldrdeq	r8, [r1], -r4
   11c78:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   11c7c:	andeq	sl, r2, r8, lsl r1
   11c80:			; <UNDEFINED> instruction: 0xfffeae81
   11c84:	andeq	r5, r1, pc, ror r1
   11c88:			; <UNDEFINED> instruction: 0x91a2b3c5
   11c8c:	stmhi	r8, {r0, r3, r7, fp, pc}
   11c90:	andeq	r8, r1, ip, lsl #28
   11c94:	andeq	sl, r2, ip, lsl #3
   11c98:	eorseq	r2, pc, r0, lsr #32
   11c9c:	andeq	sl, r2, r4, lsl #3
   11ca0:	andeq	r8, r1, r8, lsr #28
   11ca4:	muleq	r2, r4, r1
   11ca8:	muleq	r1, ip, r3
   11cac:	andeq	r8, r1, r8, lsl lr
   11cb0:	andeq	r8, r1, r0, lsr #28
   11cb4:	andeq	r8, r1, r0, lsr lr
   11cb8:	andeq	r8, r1, ip, asr #27
   11cbc:	andeq	r8, r1, r4, lsr #24
   11cc0:	andeq	r8, r1, r0, ror #27
   11cc4:	andeq	r8, r1, ip, ror #27
   11cc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ccc:	sub	sp, sp, #68	; 0x44
   11cd0:	mov	r3, r1
   11cd4:	add	r2, sp, #44	; 0x2c
   11cd8:	add	r1, sp, #40	; 0x28
   11cdc:	mov	r4, r0
   11ce0:	bl	16e58 <__assert_fail@plt+0x5ccc>
   11ce4:	subs	r1, r0, #0
   11ce8:	bne	125d0 <__assert_fail@plt+0x1444>
   11cec:	ldr	sl, [pc, #2312]	; 125fc <__assert_fail@plt+0x1470>
   11cf0:	ldrb	r6, [sl, #64]	; 0x40
   11cf4:	cmp	r6, #0
   11cf8:	bne	11fa4 <__assert_fail@plt+0xe18>
   11cfc:	ldrb	r2, [sl, #65]	; 0x41
   11d00:	ldr	r5, [sp, #40]	; 0x28
   11d04:	ldr	r4, [sp, #44]	; 0x2c
   11d08:	cmp	r2, #0
   11d0c:	bne	123ec <__assert_fail@plt+0x1260>
   11d10:	ldrb	r3, [sl, #66]	; 0x42
   11d14:	cmp	r3, #0
   11d18:	streq	r3, [sp, #24]
   11d1c:	bne	1249c <__assert_fail@plt+0x1310>
   11d20:	cmp	r5, #0
   11d24:	sub	r5, r5, #1
   11d28:	beq	12014 <__assert_fail@plt+0xe88>
   11d2c:	mov	r3, #-2147483648	; 0x80000000
   11d30:	add	fp, r4, #384	; 0x180
   11d34:	add	r6, r4, #8
   11d38:	add	r9, r4, #41	; 0x29
   11d3c:	str	r3, [sp, #28]
   11d40:	add	r4, r4, #44	; 0x2c
   11d44:	b	11d8c <__assert_fail@plt+0xc00>
   11d48:	mov	r2, #32
   11d4c:	mov	r1, r6
   11d50:	ldr	r0, [sp, #24]
   11d54:	bl	11168 <strncmp@plt>
   11d58:	cmp	r0, #0
   11d5c:	beq	11d9c <__assert_fail@plt+0xc10>
   11d60:	ldrsh	r8, [r6, #-8]
   11d64:	cmp	r8, #2
   11d68:	sub	r5, r5, #1
   11d6c:	ldreq	r3, [fp, #-44]	; 0xffffffd4
   11d70:	add	r6, r6, #384	; 0x180
   11d74:	streq	r3, [sp, #28]
   11d78:	cmn	r5, #1
   11d7c:	add	fp, fp, #384	; 0x180
   11d80:	add	r9, r9, #384	; 0x180
   11d84:	add	r4, r4, #384	; 0x180
   11d88:	beq	12014 <__assert_fail@plt+0xe88>
   11d8c:	ldrb	r3, [sl, #66]	; 0x42
   11d90:	sub	r7, r6, #8
   11d94:	cmp	r3, #0
   11d98:	bne	11d48 <__assert_fail@plt+0xbbc>
   11d9c:	ldrb	r3, [sl, #67]	; 0x43
   11da0:	cmp	r3, #0
   11da4:	beq	11f9c <__assert_fail@plt+0xe10>
   11da8:	ldrb	r3, [r6, #36]	; 0x24
   11dac:	ldrsh	r8, [r6, #-8]
   11db0:	cmp	r3, #0
   11db4:	beq	11dc0 <__assert_fail@plt+0xc34>
   11db8:	cmp	r8, #7
   11dbc:	beq	124fc <__assert_fail@plt+0x1370>
   11dc0:	ldrb	r3, [sl, #68]	; 0x44
   11dc4:	cmp	r3, #0
   11dc8:	beq	11dd4 <__assert_fail@plt+0xc48>
   11dcc:	cmp	r8, #1
   11dd0:	beq	12098 <__assert_fail@plt+0xf0c>
   11dd4:	ldrb	r3, [sl, #80]	; 0x50
   11dd8:	cmp	r3, #0
   11ddc:	beq	11df0 <__assert_fail@plt+0xc64>
   11de0:	cmp	r8, #2
   11de4:	moveq	r2, #5
   11de8:	ldreq	r1, [pc, #2064]	; 12600 <__assert_fail@plt+0x1474>
   11dec:	beq	1202c <__assert_fail@plt+0xea0>
   11df0:	ldrb	r3, [sl, #81]	; 0x51
   11df4:	cmp	r3, #0
   11df8:	beq	11e04 <__assert_fail@plt+0xc78>
   11dfc:	cmp	r8, #3
   11e00:	beq	12024 <__assert_fail@plt+0xe98>
   11e04:	ldrb	r3, [sl, #82]	; 0x52
   11e08:	cmp	r3, #0
   11e0c:	beq	11e18 <__assert_fail@plt+0xc8c>
   11e10:	cmp	r8, #5
   11e14:	beq	121f4 <__assert_fail@plt+0x1068>
   11e18:	ldrb	r3, [sl, #83]	; 0x53
   11e1c:	cmp	r3, #0
   11e20:	beq	11e2c <__assert_fail@plt+0xca0>
   11e24:	cmp	r8, #6
   11e28:	beq	122f0 <__assert_fail@plt+0x1164>
   11e2c:	ldrb	r3, [sl, #84]	; 0x54
   11e30:	cmp	r3, #0
   11e34:	beq	11d64 <__assert_fail@plt+0xbd8>
   11e38:	cmp	r8, #8
   11e3c:	bne	11d64 <__assert_fail@plt+0xbd8>
   11e40:	mov	r2, #5
   11e44:	ldr	r1, [pc, #1976]	; 12604 <__assert_fail@plt+0x1478>
   11e48:	mov	r0, #0
   11e4c:	bl	10f4c <dcgettext@plt>
   11e50:	bl	11078 <strlen@plt>
   11e54:	add	r0, r0, #5
   11e58:	bl	17afc <__assert_fail@plt+0x6970>
   11e5c:	mov	r2, #5
   11e60:	ldr	r1, [pc, #1948]	; 12604 <__assert_fail@plt+0x1478>
   11e64:	mov	r8, r0
   11e68:	mov	r0, #0
   11e6c:	bl	10f4c <dcgettext@plt>
   11e70:	mov	r1, r0
   11e74:	mov	r0, r8
   11e78:	bl	10f34 <stpcpy@plt>
   11e7c:	ldrb	r3, [r6, #32]
   11e80:	cmp	r3, #0
   11e84:	beq	11ea8 <__assert_fail@plt+0xd1c>
   11e88:	mov	r2, r9
   11e8c:	b	11e9c <__assert_fail@plt+0xd10>
   11e90:	ldrb	r3, [r2], #1
   11e94:	cmp	r3, #0
   11e98:	beq	11ea8 <__assert_fail@plt+0xd1c>
   11e9c:	cmp	r4, r2
   11ea0:	strb	r3, [r0], #1
   11ea4:	bhi	11e90 <__assert_fail@plt+0xd04>
   11ea8:	mov	r3, #0
   11eac:	strb	r3, [r0]
   11eb0:	ldr	r2, [r6, #-4]
   11eb4:	ldr	r3, [pc, #1868]	; 12608 <__assert_fail@plt+0x147c>
   11eb8:	str	r2, [sp]
   11ebc:	mov	r1, #1
   11ec0:	mov	r2, #12
   11ec4:	add	r0, sp, #52	; 0x34
   11ec8:	bl	1109c <__sprintf_chk@plt>
   11ecc:	ldr	r7, [sl, #88]	; 0x58
   11ed0:	cmp	r7, #0
   11ed4:	beq	1254c <__assert_fail@plt+0x13c0>
   11ed8:	ldr	r3, [sl, #88]	; 0x58
   11edc:	mov	r2, #5
   11ee0:	ldr	r1, [pc, #1828]	; 1260c <__assert_fail@plt+0x1480>
   11ee4:	mov	r0, #0
   11ee8:	str	r3, [sp, #32]
   11eec:	bl	10f4c <dcgettext@plt>
   11ef0:	mov	r2, #5
   11ef4:	ldr	r1, [pc, #1812]	; 12610 <__assert_fail@plt+0x1484>
   11ef8:	ldrsh	r7, [fp, #-52]	; 0xffffffcc
   11efc:	str	r0, [sp, #36]	; 0x24
   11f00:	mov	r0, #0
   11f04:	bl	10f4c <dcgettext@plt>
   11f08:	ldrsh	r2, [fp, #-50]	; 0xffffffce
   11f0c:	ldr	r1, [sp, #36]	; 0x24
   11f10:	ldr	r3, [pc, #1788]	; 12614 <__assert_fail@plt+0x1488>
   11f14:	str	r1, [sp]
   11f18:	str	r2, [sp, #12]
   11f1c:	mov	r1, #1
   11f20:	mvn	r2, #0
   11f24:	str	r7, [sp, #4]
   11f28:	str	r0, [sp, #8]
   11f2c:	ldr	r0, [sp, #32]
   11f30:	bl	1109c <__sprintf_chk@plt>
   11f34:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11f38:	add	r0, sp, #48	; 0x30
   11f3c:	str	r3, [sp, #48]	; 0x30
   11f40:	bl	11024 <localtime@plt>
   11f44:	subs	r3, r0, #0
   11f48:	beq	12538 <__assert_fail@plt+0x13ac>
   11f4c:	ldr	r2, [sl, #60]	; 0x3c
   11f50:	mov	r1, #33	; 0x21
   11f54:	ldr	r0, [pc, #1724]	; 12618 <__assert_fail@plt+0x148c>
   11f58:	bl	1100c <strftime@plt>
   11f5c:	ldr	r0, [pc, #1716]	; 12618 <__assert_fail@plt+0x148c>
   11f60:	add	r1, sp, #52	; 0x34
   11f64:	ldr	r2, [sl, #88]	; 0x58
   11f68:	str	r1, [sp, #12]
   11f6c:	ldr	r1, [pc, #1704]	; 1261c <__assert_fail@plt+0x1490>
   11f70:	mov	r3, #32
   11f74:	str	r2, [sp, #20]
   11f78:	stmib	sp, {r0, r1}
   11f7c:	str	r8, [sp, #16]
   11f80:	str	r6, [sp]
   11f84:	mov	r2, r3
   11f88:	mvn	r0, #0
   11f8c:	bl	1160c <__assert_fail@plt+0x480>
   11f90:	mov	r0, r8
   11f94:	bl	12c14 <__assert_fail@plt+0x1a88>
   11f98:	b	11d60 <__assert_fail@plt+0xbd4>
   11f9c:	ldrsh	r8, [r6, #-8]
   11fa0:	b	11dc0 <__assert_fail@plt+0xc34>
   11fa4:	ldr	r6, [sp, #40]	; 0x28
   11fa8:	ldr	r4, [sp, #44]	; 0x2c
   11fac:	cmp	r6, #0
   11fb0:	sub	r5, r6, #1
   11fb4:	beq	11ff4 <__assert_fail@plt+0xe68>
   11fb8:	ldr	sl, [pc, #1628]	; 1261c <__assert_fail@plt+0x1490>
   11fbc:	ldr	r8, [pc, #1628]	; 12620 <__assert_fail@plt+0x1494>
   11fc0:	ldr	r7, [pc, #1628]	; 12624 <__assert_fail@plt+0x1498>
   11fc4:	mov	r6, r1
   11fc8:	mov	r9, #1
   11fcc:	ldrb	r3, [r4, #44]	; 0x2c
   11fd0:	cmp	r3, #0
   11fd4:	beq	11fe4 <__assert_fail@plt+0xe58>
   11fd8:	ldrsh	r3, [r4]
   11fdc:	cmp	r3, #7
   11fe0:	beq	121c0 <__assert_fail@plt+0x1034>
   11fe4:	sub	r5, r5, #1
   11fe8:	cmn	r5, #1
   11fec:	add	r4, r4, #384	; 0x180
   11ff0:	bne	11fcc <__assert_fail@plt+0xe40>
   11ff4:	mov	r2, #5
   11ff8:	ldr	r1, [pc, #1576]	; 12628 <__assert_fail@plt+0x149c>
   11ffc:	mov	r0, #0
   12000:	bl	10f4c <dcgettext@plt>
   12004:	mov	r2, r6
   12008:	mov	r1, r0
   1200c:	mov	r0, #1
   12010:	bl	110cc <__printf_chk@plt>
   12014:	ldr	r0, [sp, #44]	; 0x2c
   12018:	bl	12c14 <__assert_fail@plt+0x1a88>
   1201c:	add	sp, sp, #68	; 0x44
   12020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12024:	ldr	r1, [pc, #1536]	; 1262c <__assert_fail@plt+0x14a0>
   12028:	mov	r2, #5
   1202c:	mov	r0, #0
   12030:	bl	10f4c <dcgettext@plt>
   12034:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12038:	str	r3, [sp, #52]	; 0x34
   1203c:	mov	r7, r0
   12040:	add	r0, sp, #52	; 0x34
   12044:	bl	11024 <localtime@plt>
   12048:	subs	r3, r0, #0
   1204c:	beq	124d4 <__assert_fail@plt+0x1348>
   12050:	ldr	r2, [sl, #60]	; 0x3c
   12054:	mov	r1, #33	; 0x21
   12058:	ldr	r0, [pc, #1464]	; 12618 <__assert_fail@plt+0x148c>
   1205c:	bl	1100c <strftime@plt>
   12060:	ldr	r0, [pc, #1456]	; 12618 <__assert_fail@plt+0x148c>
   12064:	ldr	r2, [pc, #1456]	; 1261c <__assert_fail@plt+0x1490>
   12068:	mvn	r3, #0
   1206c:	str	r2, [sp, #20]
   12070:	stmib	sp, {r0, r2}
   12074:	str	r2, [sp, #16]
   12078:	str	r2, [sp, #12]
   1207c:	str	r7, [sp]
   12080:	mov	r0, r3
   12084:	mov	r2, #32
   12088:	ldr	r1, [pc, #1420]	; 1261c <__assert_fail@plt+0x1490>
   1208c:	bl	1160c <__assert_fail@plt+0x480>
   12090:	ldrsh	r8, [r6, #-8]
   12094:	b	11d64 <__assert_fail@plt+0xbd8>
   12098:	ldr	r3, [r6, #-4]
   1209c:	ldr	r0, [sl, #72]	; 0x48
   120a0:	cmp	r3, #0
   120a4:	add	r7, r3, #255	; 0xff
   120a8:	movge	r7, r3
   120ac:	rsbs	r2, r3, #0
   120b0:	asr	r7, r7, #8
   120b4:	uxtb	r2, r2
   120b8:	uxtb	r8, r3
   120bc:	rsbpl	r8, r2, #0
   120c0:	cmp	r0, #0
   120c4:	uxtb	r7, r7
   120c8:	beq	12590 <__assert_fail@plt+0x1404>
   120cc:	ldr	r3, [sl, #72]	; 0x48
   120d0:	mov	r2, #5
   120d4:	ldr	r1, [pc, #1364]	; 12630 <__assert_fail@plt+0x14a4>
   120d8:	mov	r0, #0
   120dc:	str	r3, [sp, #32]
   120e0:	bl	10f4c <dcgettext@plt>
   120e4:	uxtb	r3, r8
   120e8:	str	r3, [sp, #4]
   120ec:	mvn	r2, #0
   120f0:	ldr	r3, [pc, #1340]	; 12634 <__assert_fail@plt+0x14a8>
   120f4:	mov	r1, #1
   120f8:	str	r0, [sp]
   120fc:	ldr	r0, [sp, #32]
   12100:	bl	1109c <__sprintf_chk@plt>
   12104:	ldr	r0, [sl, #76]	; 0x4c
   12108:	cmp	r0, #0
   1210c:	beq	125b0 <__assert_fail@plt+0x1424>
   12110:	mov	r2, #5
   12114:	ldr	r1, [pc, #1308]	; 12638 <__assert_fail@plt+0x14ac>
   12118:	mov	r0, #0
   1211c:	ldr	r8, [sl, #76]	; 0x4c
   12120:	bl	10f4c <dcgettext@plt>
   12124:	cmp	r7, #78	; 0x4e
   12128:	movne	r3, r7
   1212c:	moveq	r3, #83	; 0x53
   12130:	mvn	r2, #0
   12134:	mov	r1, #1
   12138:	str	r3, [sp, #4]
   1213c:	str	r0, [sp]
   12140:	ldr	r3, [pc, #1268]	; 1263c <__assert_fail@plt+0x14b0>
   12144:	mov	r0, r8
   12148:	bl	1109c <__sprintf_chk@plt>
   1214c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12150:	add	r0, sp, #52	; 0x34
   12154:	str	r3, [sp, #52]	; 0x34
   12158:	ldr	r8, [sl, #72]	; 0x48
   1215c:	bl	11024 <localtime@plt>
   12160:	subs	r3, r0, #0
   12164:	beq	12510 <__assert_fail@plt+0x1384>
   12168:	ldr	r2, [sl, #60]	; 0x3c
   1216c:	mov	r1, #33	; 0x21
   12170:	ldr	r0, [pc, #1184]	; 12618 <__assert_fail@plt+0x148c>
   12174:	bl	1100c <strftime@plt>
   12178:	ldr	r0, [pc, #1176]	; 12618 <__assert_fail@plt+0x148c>
   1217c:	sub	r7, r7, #32
   12180:	cmp	r7, #94	; 0x5e
   12184:	ldr	r1, [pc, #1168]	; 1261c <__assert_fail@plt+0x1490>
   12188:	ldrls	r2, [sl, #76]	; 0x4c
   1218c:	ldrhi	r2, [pc, #1160]	; 1261c <__assert_fail@plt+0x1490>
   12190:	mvn	r3, #0
   12194:	str	r2, [sp, #16]
   12198:	mov	r2, r1
   1219c:	str	r8, [sp]
   121a0:	stmib	sp, {r0, r2}
   121a4:	str	r1, [sp, #20]
   121a8:	str	r1, [sp, #12]
   121ac:	mov	r0, r3
   121b0:	mov	r2, #32
   121b4:	bl	1160c <__assert_fail@plt+0x480>
   121b8:	ldrsh	r8, [r6, #-8]
   121bc:	b	11d64 <__assert_fail@plt+0xbd8>
   121c0:	mov	r0, r4
   121c4:	bl	16de4 <__assert_fail@plt+0x5c58>
   121c8:	mov	r2, sl
   121cc:	mov	r1, r8
   121d0:	add	r6, r6, #1
   121d4:	mov	sl, r7
   121d8:	mov	r3, r0
   121dc:	mov	fp, r0
   121e0:	mov	r0, r9
   121e4:	bl	110cc <__printf_chk@plt>
   121e8:	mov	r0, fp
   121ec:	bl	12c14 <__assert_fail@plt+0x1a88>
   121f0:	b	11fe4 <__assert_fail@plt+0xe58>
   121f4:	mov	r2, r8
   121f8:	ldr	r1, [pc, #1028]	; 12604 <__assert_fail@plt+0x1478>
   121fc:	mov	r0, #0
   12200:	bl	10f4c <dcgettext@plt>
   12204:	bl	11078 <strlen@plt>
   12208:	add	r0, r0, #5
   1220c:	bl	17afc <__assert_fail@plt+0x6970>
   12210:	mov	r2, r8
   12214:	ldr	r1, [pc, #1000]	; 12604 <__assert_fail@plt+0x1478>
   12218:	mov	r7, r0
   1221c:	mov	r0, #0
   12220:	bl	10f4c <dcgettext@plt>
   12224:	mov	r1, r0
   12228:	mov	r0, r7
   1222c:	bl	10f34 <stpcpy@plt>
   12230:	ldrb	r3, [r6, #32]
   12234:	cmp	r3, #0
   12238:	beq	1225c <__assert_fail@plt+0x10d0>
   1223c:	mov	r2, r9
   12240:	b	12250 <__assert_fail@plt+0x10c4>
   12244:	ldrb	r3, [r2], #1
   12248:	cmp	r3, #0
   1224c:	beq	1225c <__assert_fail@plt+0x10d0>
   12250:	cmp	r4, r2
   12254:	strb	r3, [r0], #1
   12258:	bhi	12244 <__assert_fail@plt+0x10b8>
   1225c:	mov	r3, #0
   12260:	strb	r3, [r0]
   12264:	ldr	r2, [r6, #-4]
   12268:	ldr	r3, [pc, #920]	; 12608 <__assert_fail@plt+0x147c>
   1226c:	str	r2, [sp]
   12270:	mov	r1, #1
   12274:	mov	r2, #12
   12278:	add	r0, sp, #52	; 0x34
   1227c:	bl	1109c <__sprintf_chk@plt>
   12280:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12284:	add	r0, sp, #48	; 0x30
   12288:	str	r3, [sp, #48]	; 0x30
   1228c:	bl	11024 <localtime@plt>
   12290:	subs	r3, r0, #0
   12294:	beq	124e8 <__assert_fail@plt+0x135c>
   12298:	ldr	r2, [sl, #60]	; 0x3c
   1229c:	mov	r1, #33	; 0x21
   122a0:	ldr	r0, [pc, #880]	; 12618 <__assert_fail@plt+0x148c>
   122a4:	bl	1100c <strftime@plt>
   122a8:	ldr	r0, [pc, #872]	; 12618 <__assert_fail@plt+0x148c>
   122ac:	ldr	r2, [pc, #872]	; 1261c <__assert_fail@plt+0x1490>
   122b0:	mov	r3, #32
   122b4:	str	r2, [sp, #20]
   122b8:	add	r2, sp, #52	; 0x34
   122bc:	str	r2, [sp, #12]
   122c0:	ldr	r2, [pc, #852]	; 1261c <__assert_fail@plt+0x1490>
   122c4:	ldr	r1, [pc, #848]	; 1261c <__assert_fail@plt+0x1490>
   122c8:	str	r7, [sp, #16]
   122cc:	stmib	sp, {r0, r2}
   122d0:	mov	r2, r3
   122d4:	str	r6, [sp]
   122d8:	mvn	r0, #0
   122dc:	bl	1160c <__assert_fail@plt+0x480>
   122e0:	mov	r0, r7
   122e4:	bl	12c14 <__assert_fail@plt+0x1a88>
   122e8:	ldrsh	r8, [r6, #-8]
   122ec:	b	11d64 <__assert_fail@plt+0xbd8>
   122f0:	mov	r2, #5
   122f4:	ldr	r1, [pc, #776]	; 12604 <__assert_fail@plt+0x1478>
   122f8:	mov	r0, #0
   122fc:	bl	10f4c <dcgettext@plt>
   12300:	bl	11078 <strlen@plt>
   12304:	add	r0, r0, #5
   12308:	bl	17afc <__assert_fail@plt+0x6970>
   1230c:	mov	r2, #5
   12310:	ldr	r1, [pc, #748]	; 12604 <__assert_fail@plt+0x1478>
   12314:	mov	r7, r0
   12318:	mov	r0, #0
   1231c:	bl	10f4c <dcgettext@plt>
   12320:	mov	r1, r0
   12324:	mov	r0, r7
   12328:	bl	10f34 <stpcpy@plt>
   1232c:	ldrb	r3, [r6, #32]
   12330:	cmp	r3, #0
   12334:	beq	12358 <__assert_fail@plt+0x11cc>
   12338:	mov	r2, r9
   1233c:	b	1234c <__assert_fail@plt+0x11c0>
   12340:	ldrb	r3, [r2], #1
   12344:	cmp	r3, #0
   12348:	beq	12358 <__assert_fail@plt+0x11cc>
   1234c:	cmp	r2, r4
   12350:	strb	r3, [r0], #1
   12354:	bcc	12340 <__assert_fail@plt+0x11b4>
   12358:	mov	r8, #0
   1235c:	strb	r8, [r0]
   12360:	ldr	r2, [r6, #-4]
   12364:	ldr	r3, [pc, #668]	; 12608 <__assert_fail@plt+0x147c>
   12368:	str	r2, [sp]
   1236c:	mov	r1, #1
   12370:	mov	r2, #12
   12374:	add	r0, sp, #52	; 0x34
   12378:	bl	1109c <__sprintf_chk@plt>
   1237c:	mov	r0, r8
   12380:	mov	r2, #5
   12384:	ldr	r1, [pc, #692]	; 12640 <__assert_fail@plt+0x14b4>
   12388:	bl	10f4c <dcgettext@plt>
   1238c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12390:	str	r3, [sp, #48]	; 0x30
   12394:	mov	r8, r0
   12398:	add	r0, sp, #48	; 0x30
   1239c:	bl	11024 <localtime@plt>
   123a0:	subs	r3, r0, #0
   123a4:	beq	12524 <__assert_fail@plt+0x1398>
   123a8:	ldr	r2, [sl, #60]	; 0x3c
   123ac:	mov	r1, #33	; 0x21
   123b0:	ldr	r0, [pc, #608]	; 12618 <__assert_fail@plt+0x148c>
   123b4:	bl	1100c <strftime@plt>
   123b8:	ldr	r0, [pc, #600]	; 12618 <__assert_fail@plt+0x148c>
   123bc:	ldr	r2, [pc, #600]	; 1261c <__assert_fail@plt+0x1490>
   123c0:	mov	r3, #32
   123c4:	str	r2, [sp, #20]
   123c8:	add	r2, sp, #52	; 0x34
   123cc:	str	r2, [sp, #12]
   123d0:	ldr	r2, [pc, #580]	; 1261c <__assert_fail@plt+0x1490>
   123d4:	str	r7, [sp, #16]
   123d8:	str	r6, [sp]
   123dc:	stmib	sp, {r0, r2}
   123e0:	mov	r1, r8
   123e4:	mov	r2, r3
   123e8:	b	122d8 <__assert_fail@plt+0x114c>
   123ec:	mov	r2, #5
   123f0:	ldr	r1, [pc, #588]	; 12644 <__assert_fail@plt+0x14b8>
   123f4:	bl	10f4c <dcgettext@plt>
   123f8:	mov	r2, #5
   123fc:	ldr	r1, [pc, #580]	; 12648 <__assert_fail@plt+0x14bc>
   12400:	str	r0, [sp, #24]
   12404:	mov	r0, r6
   12408:	bl	10f4c <dcgettext@plt>
   1240c:	mov	r2, #5
   12410:	ldr	r1, [pc, #564]	; 1264c <__assert_fail@plt+0x14c0>
   12414:	mov	fp, r0
   12418:	mov	r0, r6
   1241c:	bl	10f4c <dcgettext@plt>
   12420:	mov	r2, #5
   12424:	ldr	r1, [pc, #548]	; 12650 <__assert_fail@plt+0x14c4>
   12428:	mov	r7, r0
   1242c:	mov	r0, r6
   12430:	bl	10f4c <dcgettext@plt>
   12434:	mov	r2, #5
   12438:	ldr	r1, [pc, #532]	; 12654 <__assert_fail@plt+0x14c8>
   1243c:	mov	r8, r0
   12440:	mov	r0, r6
   12444:	bl	10f4c <dcgettext@plt>
   12448:	mov	r2, #5
   1244c:	ldr	r1, [pc, #516]	; 12658 <__assert_fail@plt+0x14cc>
   12450:	mov	r9, r0
   12454:	mov	r0, r6
   12458:	bl	10f4c <dcgettext@plt>
   1245c:	mov	r2, #5
   12460:	ldr	r1, [pc, #500]	; 1265c <__assert_fail@plt+0x14d0>
   12464:	str	r0, [sp, #28]
   12468:	mov	r0, r6
   1246c:	bl	10f4c <dcgettext@plt>
   12470:	ldr	r2, [sp, #28]
   12474:	mvn	r3, #0
   12478:	str	r2, [sp, #16]
   1247c:	str	fp, [sp]
   12480:	stmib	sp, {r7, r8, r9}
   12484:	mov	r2, #32
   12488:	ldr	r1, [sp, #24]
   1248c:	str	r0, [sp, #20]
   12490:	mov	r0, r3
   12494:	bl	1160c <__assert_fail@plt+0x480>
   12498:	b	11d10 <__assert_fail@plt+0xb84>
   1249c:	mov	r0, #0
   124a0:	bl	1106c <ttyname@plt>
   124a4:	subs	r3, r0, #0
   124a8:	mov	r6, r3
   124ac:	str	r3, [sp, #24]
   124b0:	beq	12014 <__assert_fail@plt+0xe88>
   124b4:	mov	r2, #5
   124b8:	ldr	r1, [pc, #416]	; 12660 <__assert_fail@plt+0x14d4>
   124bc:	bl	11168 <strncmp@plt>
   124c0:	cmp	r0, #0
   124c4:	moveq	r3, r6
   124c8:	addeq	r3, r3, #5
   124cc:	streq	r3, [sp, #24]
   124d0:	b	11d20 <__assert_fail@plt+0xb94>
   124d4:	ldr	r0, [sp, #52]	; 0x34
   124d8:	ldr	r2, [pc, #312]	; 12618 <__assert_fail@plt+0x148c>
   124dc:	asr	r1, r0, #31
   124e0:	bl	12cc8 <__assert_fail@plt+0x1b3c>
   124e4:	b	12064 <__assert_fail@plt+0xed8>
   124e8:	ldr	r0, [sp, #48]	; 0x30
   124ec:	ldr	r2, [pc, #292]	; 12618 <__assert_fail@plt+0x148c>
   124f0:	asr	r1, r0, #31
   124f4:	bl	12cc8 <__assert_fail@plt+0x1b3c>
   124f8:	b	122ac <__assert_fail@plt+0x1120>
   124fc:	mov	r0, r7
   12500:	ldr	r1, [sp, #28]
   12504:	bl	11810 <__assert_fail@plt+0x684>
   12508:	ldrsh	r8, [r6, #-8]
   1250c:	b	11d64 <__assert_fail@plt+0xbd8>
   12510:	ldr	r0, [sp, #52]	; 0x34
   12514:	ldr	r2, [pc, #252]	; 12618 <__assert_fail@plt+0x148c>
   12518:	asr	r1, r0, #31
   1251c:	bl	12cc8 <__assert_fail@plt+0x1b3c>
   12520:	b	1217c <__assert_fail@plt+0xff0>
   12524:	ldr	r0, [sp, #48]	; 0x30
   12528:	ldr	r2, [pc, #232]	; 12618 <__assert_fail@plt+0x148c>
   1252c:	asr	r1, r0, #31
   12530:	bl	12cc8 <__assert_fail@plt+0x1b3c>
   12534:	b	123bc <__assert_fail@plt+0x1230>
   12538:	ldr	r0, [sp, #48]	; 0x30
   1253c:	ldr	r2, [pc, #212]	; 12618 <__assert_fail@plt+0x148c>
   12540:	asr	r1, r0, #31
   12544:	bl	12cc8 <__assert_fail@plt+0x1b3c>
   12548:	b	11f60 <__assert_fail@plt+0xdd4>
   1254c:	mov	r2, #5
   12550:	ldr	r1, [pc, #180]	; 1260c <__assert_fail@plt+0x1480>
   12554:	mov	r0, r7
   12558:	bl	10f4c <dcgettext@plt>
   1255c:	bl	11078 <strlen@plt>
   12560:	mov	r2, #5
   12564:	ldr	r1, [pc, #164]	; 12610 <__assert_fail@plt+0x1484>
   12568:	str	r0, [sp, #32]
   1256c:	mov	r0, r7
   12570:	bl	10f4c <dcgettext@plt>
   12574:	bl	11078 <strlen@plt>
   12578:	ldr	r3, [sp, #32]
   1257c:	add	r0, r3, r0
   12580:	add	r0, r0, #14
   12584:	bl	17afc <__assert_fail@plt+0x6970>
   12588:	str	r0, [sl, #88]	; 0x58
   1258c:	b	11ed8 <__assert_fail@plt+0xd4c>
   12590:	mov	r2, #5
   12594:	ldr	r1, [pc, #148]	; 12630 <__assert_fail@plt+0x14a4>
   12598:	bl	10f4c <dcgettext@plt>
   1259c:	bl	11078 <strlen@plt>
   125a0:	add	r0, r0, #3
   125a4:	bl	17afc <__assert_fail@plt+0x6970>
   125a8:	str	r0, [sl, #72]	; 0x48
   125ac:	b	120cc <__assert_fail@plt+0xf40>
   125b0:	mov	r2, #5
   125b4:	ldr	r1, [pc, #124]	; 12638 <__assert_fail@plt+0x14ac>
   125b8:	bl	10f4c <dcgettext@plt>
   125bc:	bl	11078 <strlen@plt>
   125c0:	add	r0, r0, #2
   125c4:	bl	17afc <__assert_fail@plt+0x6970>
   125c8:	str	r0, [sl, #76]	; 0x4c
   125cc:	b	12110 <__assert_fail@plt+0xf84>
   125d0:	bl	11090 <__errno_location@plt>
   125d4:	mov	r2, r4
   125d8:	mov	r1, #3
   125dc:	ldr	r4, [r0]
   125e0:	mov	r0, #0
   125e4:	bl	15d70 <__assert_fail@plt+0x4be4>
   125e8:	mov	r1, r4
   125ec:	ldr	r2, [pc, #112]	; 12664 <__assert_fail@plt+0x14d8>
   125f0:	mov	r3, r0
   125f4:	mov	r0, #1
   125f8:	bl	10fd0 <error@plt>
   125fc:	andeq	sl, r2, r4, lsl #3
   12600:	andeq	r8, r1, r8, lsr #29
   12604:	andeq	r8, r1, r4, asr #29
   12608:	ldrdeq	r8, [r1], -r4
   1260c:	ldrdeq	r8, [r1], -r0
   12610:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12614:	andeq	r8, r1, r0, ror #29
   12618:	muleq	r2, r4, r1
   1261c:	muleq	r1, ip, r3
   12620:	andeq	r8, r1, r8, lsr lr
   12624:	ldrdeq	r8, [r1], -r0
   12628:	andeq	r8, r1, r0, asr #28
   1262c:			; <UNDEFINED> instruction: 0x00018eb4
   12630:	andeq	r8, r1, r4, lsl #29
   12634:	muleq	r1, r0, lr
   12638:	muleq	r1, r8, lr
   1263c:	andeq	r8, r1, r0, lsr #29
   12640:	andeq	r8, r1, r8, asr #29
   12644:	andeq	r8, r1, r0, asr lr
   12648:	andeq	r8, r1, r8, asr lr
   1264c:	andeq	r8, r1, r0, ror #28
   12650:	andeq	r8, r1, r8, ror #28
   12654:	andeq	r8, r1, r0, ror lr
   12658:	andeq	r8, r1, r4, ror lr
   1265c:	andeq	r8, r1, ip, ror lr
   12660:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12664:	andeq	r9, r1, r0, asr r6
   12668:	subs	r5, r0, #0
   1266c:	push	{r7, lr}
   12670:	sub	sp, sp, #56	; 0x38
   12674:	beq	126b0 <__assert_fail@plt+0x1524>
   12678:	ldr	r3, [pc, #768]	; 12980 <__assert_fail@plt+0x17f4>
   1267c:	mov	r2, #5
   12680:	ldr	r1, [pc, #764]	; 12984 <__assert_fail@plt+0x17f8>
   12684:	mov	r0, #0
   12688:	ldr	r4, [r3]
   1268c:	bl	10f4c <dcgettext@plt>
   12690:	ldr	r3, [pc, #752]	; 12988 <__assert_fail@plt+0x17fc>
   12694:	mov	r1, #1
   12698:	ldr	r3, [r3]
   1269c:	mov	r2, r0
   126a0:	mov	r0, r4
   126a4:	bl	110e4 <__fprintf_chk@plt>
   126a8:	mov	r0, r5
   126ac:	bl	11060 <exit@plt>
   126b0:	mov	r2, #5
   126b4:	ldr	r1, [pc, #720]	; 1298c <__assert_fail@plt+0x1800>
   126b8:	bl	10f4c <dcgettext@plt>
   126bc:	ldr	r3, [pc, #708]	; 12988 <__assert_fail@plt+0x17fc>
   126c0:	ldr	r7, [pc, #712]	; 12990 <__assert_fail@plt+0x1804>
   126c4:	ldr	r4, [pc, #712]	; 12994 <__assert_fail@plt+0x1808>
   126c8:	ldr	r2, [r3]
   126cc:	mov	r1, r0
   126d0:	mov	r0, #1
   126d4:	bl	110cc <__printf_chk@plt>
   126d8:	mov	r2, #5
   126dc:	ldr	r1, [pc, #692]	; 12998 <__assert_fail@plt+0x180c>
   126e0:	mov	r0, r5
   126e4:	bl	10f4c <dcgettext@plt>
   126e8:	ldr	r1, [r7]
   126ec:	bl	10ea4 <fputs_unlocked@plt>
   126f0:	mov	r2, #5
   126f4:	ldr	r1, [pc, #672]	; 1299c <__assert_fail@plt+0x1810>
   126f8:	mov	r0, r5
   126fc:	bl	10f4c <dcgettext@plt>
   12700:	ldr	r1, [r7]
   12704:	bl	10ea4 <fputs_unlocked@plt>
   12708:	mov	r2, #5
   1270c:	ldr	r1, [pc, #652]	; 129a0 <__assert_fail@plt+0x1814>
   12710:	mov	r0, r5
   12714:	bl	10f4c <dcgettext@plt>
   12718:	ldr	r1, [r7]
   1271c:	bl	10ea4 <fputs_unlocked@plt>
   12720:	mov	r2, #5
   12724:	ldr	r1, [pc, #632]	; 129a4 <__assert_fail@plt+0x1818>
   12728:	mov	r0, r5
   1272c:	bl	10f4c <dcgettext@plt>
   12730:	ldr	r1, [r7]
   12734:	bl	10ea4 <fputs_unlocked@plt>
   12738:	mov	r2, #5
   1273c:	ldr	r1, [pc, #612]	; 129a8 <__assert_fail@plt+0x181c>
   12740:	mov	r0, r5
   12744:	bl	10f4c <dcgettext@plt>
   12748:	ldr	r1, [r7]
   1274c:	bl	10ea4 <fputs_unlocked@plt>
   12750:	mov	r2, #5
   12754:	ldr	r1, [pc, #592]	; 129ac <__assert_fail@plt+0x1820>
   12758:	mov	r0, r5
   1275c:	bl	10f4c <dcgettext@plt>
   12760:	ldr	r1, [r7]
   12764:	bl	10ea4 <fputs_unlocked@plt>
   12768:	mov	r2, #5
   1276c:	ldr	r1, [pc, #572]	; 129b0 <__assert_fail@plt+0x1824>
   12770:	mov	r0, r5
   12774:	bl	10f4c <dcgettext@plt>
   12778:	ldr	r1, [r7]
   1277c:	bl	10ea4 <fputs_unlocked@plt>
   12780:	mov	r2, #5
   12784:	ldr	r1, [pc, #552]	; 129b4 <__assert_fail@plt+0x1828>
   12788:	mov	r0, r5
   1278c:	bl	10f4c <dcgettext@plt>
   12790:	ldr	r1, [r7]
   12794:	bl	10ea4 <fputs_unlocked@plt>
   12798:	mov	r2, #5
   1279c:	ldr	r1, [pc, #532]	; 129b8 <__assert_fail@plt+0x182c>
   127a0:	mov	r0, r5
   127a4:	bl	10f4c <dcgettext@plt>
   127a8:	ldr	r3, [pc, #524]	; 129bc <__assert_fail@plt+0x1830>
   127ac:	ldr	r2, [pc, #524]	; 129c0 <__assert_fail@plt+0x1834>
   127b0:	mov	r1, r0
   127b4:	mov	r0, #1
   127b8:	bl	110cc <__printf_chk@plt>
   127bc:	ldm	r4!, {r0, r1, r2, r3}
   127c0:	mov	lr, sp
   127c4:	stmia	lr!, {r0, r1, r2, r3}
   127c8:	ldm	r4!, {r0, r1, r2, r3}
   127cc:	ldr	ip, [sp]
   127d0:	stmia	lr!, {r0, r1, r2, r3}
   127d4:	cmp	ip, #0
   127d8:	ldm	r4!, {r0, r1, r2, r3}
   127dc:	stmia	lr!, {r0, r1, r2, r3}
   127e0:	ldm	r4, {r0, r1}
   127e4:	moveq	r4, sp
   127e8:	stm	lr, {r0, r1}
   127ec:	beq	1281c <__assert_fail@plt+0x1690>
   127f0:	ldr	r6, [pc, #460]	; 129c4 <__assert_fail@plt+0x1838>
   127f4:	mov	r4, sp
   127f8:	b	12808 <__assert_fail@plt+0x167c>
   127fc:	ldr	ip, [r4, #8]!
   12800:	cmp	ip, #0
   12804:	beq	1281c <__assert_fail@plt+0x1690>
   12808:	mov	r1, ip
   1280c:	mov	r0, r6
   12810:	bl	10ebc <strcmp@plt>
   12814:	cmp	r0, #0
   12818:	bne	127fc <__assert_fail@plt+0x1670>
   1281c:	ldr	r4, [r4, #4]
   12820:	mov	r2, #5
   12824:	cmp	r4, #0
   12828:	ldr	r1, [pc, #408]	; 129c8 <__assert_fail@plt+0x183c>
   1282c:	beq	128d4 <__assert_fail@plt+0x1748>
   12830:	mov	r0, #0
   12834:	bl	10f4c <dcgettext@plt>
   12838:	ldr	r3, [pc, #396]	; 129cc <__assert_fail@plt+0x1840>
   1283c:	ldr	r2, [pc, #396]	; 129d0 <__assert_fail@plt+0x1844>
   12840:	mov	r1, r0
   12844:	mov	r0, #1
   12848:	bl	110cc <__printf_chk@plt>
   1284c:	mov	r1, #0
   12850:	mov	r0, #5
   12854:	bl	11114 <setlocale@plt>
   12858:	cmp	r0, #0
   1285c:	ldreq	r6, [pc, #352]	; 129c4 <__assert_fail@plt+0x1838>
   12860:	beq	1287c <__assert_fail@plt+0x16f0>
   12864:	mov	r2, #3
   12868:	ldr	r1, [pc, #356]	; 129d4 <__assert_fail@plt+0x1848>
   1286c:	bl	11168 <strncmp@plt>
   12870:	ldr	r6, [pc, #332]	; 129c4 <__assert_fail@plt+0x1838>
   12874:	cmp	r0, #0
   12878:	bne	12964 <__assert_fail@plt+0x17d8>
   1287c:	mov	r2, #5
   12880:	ldr	r1, [pc, #336]	; 129d8 <__assert_fail@plt+0x184c>
   12884:	mov	r0, #0
   12888:	bl	10f4c <dcgettext@plt>
   1288c:	ldr	r3, [pc, #304]	; 129c4 <__assert_fail@plt+0x1838>
   12890:	ldr	r2, [pc, #308]	; 129cc <__assert_fail@plt+0x1840>
   12894:	mov	r1, r0
   12898:	mov	r0, #1
   1289c:	bl	110cc <__printf_chk@plt>
   128a0:	mov	r2, #5
   128a4:	ldr	r1, [pc, #304]	; 129dc <__assert_fail@plt+0x1850>
   128a8:	mov	r0, #0
   128ac:	bl	10f4c <dcgettext@plt>
   128b0:	ldr	r2, [pc, #296]	; 129e0 <__assert_fail@plt+0x1854>
   128b4:	cmp	r4, r6
   128b8:	ldr	r3, [pc, #292]	; 129e4 <__assert_fail@plt+0x1858>
   128bc:	movne	r3, r2
   128c0:	mov	r1, r0
   128c4:	mov	r2, r4
   128c8:	mov	r0, #1
   128cc:	bl	110cc <__printf_chk@plt>
   128d0:	b	126a8 <__assert_fail@plt+0x151c>
   128d4:	mov	r0, r4
   128d8:	bl	10f4c <dcgettext@plt>
   128dc:	ldr	r3, [pc, #232]	; 129cc <__assert_fail@plt+0x1840>
   128e0:	ldr	r2, [pc, #232]	; 129d0 <__assert_fail@plt+0x1844>
   128e4:	mov	r1, r0
   128e8:	mov	r0, #1
   128ec:	bl	110cc <__printf_chk@plt>
   128f0:	mov	r1, r4
   128f4:	mov	r0, #5
   128f8:	bl	11114 <setlocale@plt>
   128fc:	cmp	r0, #0
   12900:	beq	12918 <__assert_fail@plt+0x178c>
   12904:	mov	r2, #3
   12908:	ldr	r1, [pc, #196]	; 129d4 <__assert_fail@plt+0x1848>
   1290c:	bl	11168 <strncmp@plt>
   12910:	cmp	r0, #0
   12914:	bne	1295c <__assert_fail@plt+0x17d0>
   12918:	mov	r2, #5
   1291c:	ldr	r1, [pc, #180]	; 129d8 <__assert_fail@plt+0x184c>
   12920:	mov	r0, #0
   12924:	bl	10f4c <dcgettext@plt>
   12928:	ldr	r3, [pc, #148]	; 129c4 <__assert_fail@plt+0x1838>
   1292c:	ldr	r2, [pc, #152]	; 129cc <__assert_fail@plt+0x1840>
   12930:	mov	r4, r3
   12934:	mov	r1, r0
   12938:	mov	r0, #1
   1293c:	bl	110cc <__printf_chk@plt>
   12940:	ldr	r1, [pc, #148]	; 129dc <__assert_fail@plt+0x1850>
   12944:	mov	r2, #5
   12948:	mov	r0, #0
   1294c:	bl	10f4c <dcgettext@plt>
   12950:	ldr	r3, [pc, #140]	; 129e4 <__assert_fail@plt+0x1858>
   12954:	mov	r1, r0
   12958:	b	128c4 <__assert_fail@plt+0x1738>
   1295c:	ldr	r6, [pc, #96]	; 129c4 <__assert_fail@plt+0x1838>
   12960:	mov	r4, r6
   12964:	mov	r2, #5
   12968:	ldr	r1, [pc, #120]	; 129e8 <__assert_fail@plt+0x185c>
   1296c:	mov	r0, #0
   12970:	bl	10f4c <dcgettext@plt>
   12974:	ldr	r1, [r7]
   12978:	bl	10ea4 <fputs_unlocked@plt>
   1297c:	b	1287c <__assert_fail@plt+0x16f0>
   12980:	andeq	sl, r2, r8, ror r1
   12984:	strdeq	r8, [r1], -r0
   12988:	andeq	sl, r2, ip, lsl #4
   1298c:	andeq	r8, r1, r8, lsl pc
   12990:	andeq	sl, r2, ip, ror r1
   12994:	andeq	r8, r1, r0, lsr ip
   12998:	andeq	r8, r1, r4, asr #30
   1299c:	andeq	r8, r1, r0, lsl #31
   129a0:	andeq	r9, r1, r4, asr #32
   129a4:	andeq	r9, r1, r8, ror r0
   129a8:	andeq	r9, r1, r4, lsr r1
   129ac:	andeq	r9, r1, r4, lsl r2
   129b0:			; <UNDEFINED> instruction: 0x000192b8
   129b4:	andeq	r9, r1, r8, ror #5
   129b8:	andeq	r9, r1, r0, lsr #6
   129bc:	andeq	r9, r1, r0, lsr #7
   129c0:			; <UNDEFINED> instruction: 0x000193b0
   129c4:	andeq	r8, r1, ip, ror #29
   129c8:	andeq	r9, r1, r0, asr #7
   129cc:	ldrdeq	r9, [r1], -r8
   129d0:	andeq	r9, r1, r0, lsl #8
   129d4:	andeq	r9, r1, r0, lsl r4
   129d8:	andeq	r9, r1, ip, asr r4
   129dc:	andeq	r9, r1, r8, ror r4
   129e0:	muleq	r1, ip, r3
   129e4:	andeq	r9, r1, r0, asr #10
   129e8:	andeq	r9, r1, r4, lsl r4
   129ec:	push	{r4, r5, r6, r7, lr}
   129f0:	sub	sp, sp, #12
   129f4:	ldr	r5, [pc, #96]	; 12a5c <__assert_fail@plt+0x18d0>
   129f8:	add	r3, sp, #8
   129fc:	mov	r4, #0
   12a00:	mov	ip, #2
   12a04:	str	r4, [r3, #-4]!
   12a08:	mov	r1, r4
   12a0c:	mov	r2, r5
   12a10:	str	ip, [r5]
   12a14:	mov	r7, r0
   12a18:	bl	11144 <getaddrinfo@plt>
   12a1c:	cmp	r0, #0
   12a20:	strne	r0, [r5, #32]
   12a24:	bne	12a50 <__assert_fail@plt+0x18c4>
   12a28:	ldr	r6, [sp, #4]
   12a2c:	ldr	r0, [r6, #24]
   12a30:	cmp	r0, r4
   12a34:	moveq	r0, r7
   12a38:	bl	10f58 <strdup@plt>
   12a3c:	subs	r4, r0, #0
   12a40:	mvneq	r3, #9
   12a44:	mov	r0, r6
   12a48:	streq	r3, [r5, #32]
   12a4c:	bl	11138 <freeaddrinfo@plt>
   12a50:	mov	r0, r4
   12a54:	add	sp, sp, #12
   12a58:	pop	{r4, r5, r6, r7, pc}
   12a5c:	andeq	sl, r2, r0, ror #3
   12a60:	push	{r4, r5, r6, r7, lr}
   12a64:	sub	sp, sp, #12
   12a68:	ldr	ip, [pc, #140]	; 12afc <__assert_fail@plt+0x1970>
   12a6c:	add	r3, sp, #8
   12a70:	mov	r4, #0
   12a74:	mov	lr, #2
   12a78:	mov	r5, r1
   12a7c:	str	r4, [r3, #-4]!
   12a80:	mov	r1, r4
   12a84:	mov	r2, ip
   12a88:	str	lr, [ip]
   12a8c:	mov	r7, r0
   12a90:	bl	11144 <getaddrinfo@plt>
   12a94:	cmp	r0, #0
   12a98:	bne	12ae4 <__assert_fail@plt+0x1958>
   12a9c:	ldr	r6, [sp, #4]
   12aa0:	ldr	r0, [r6, #24]
   12aa4:	cmp	r0, r4
   12aa8:	moveq	r0, r7
   12aac:	bl	10f58 <strdup@plt>
   12ab0:	cmp	r5, #0
   12ab4:	clz	r3, r0
   12ab8:	lsr	r3, r3, #5
   12abc:	moveq	r3, #0
   12ac0:	cmp	r3, #0
   12ac4:	mvnne	r3, #9
   12ac8:	mov	r4, r0
   12acc:	strne	r3, [r5]
   12ad0:	mov	r0, r6
   12ad4:	bl	11138 <freeaddrinfo@plt>
   12ad8:	mov	r0, r4
   12adc:	add	sp, sp, #12
   12ae0:	pop	{r4, r5, r6, r7, pc}
   12ae4:	cmp	r5, #0
   12ae8:	moveq	r4, r5
   12aec:	strne	r0, [r5]
   12af0:	mov	r0, r4
   12af4:	add	sp, sp, #12
   12af8:	pop	{r4, r5, r6, r7, pc}
   12afc:	andeq	sl, r2, r0, ror #3
   12b00:	ldr	r3, [pc, #4]	; 12b0c <__assert_fail@plt+0x1980>
   12b04:	ldr	r0, [r3, #32]
   12b08:	b	10eec <gai_strerror@plt>
   12b0c:	andeq	sl, r2, r0, ror #3
   12b10:	ldr	r3, [pc, #4]	; 12b1c <__assert_fail@plt+0x1990>
   12b14:	str	r0, [r3]
   12b18:	bx	lr
   12b1c:	andeq	sl, r2, r4, lsl #4
   12b20:	ldr	r3, [pc, #4]	; 12b2c <__assert_fail@plt+0x19a0>
   12b24:	strb	r0, [r3, #4]
   12b28:	bx	lr
   12b2c:	andeq	sl, r2, r4, lsl #4
   12b30:	ldr	r3, [pc, #192]	; 12bf8 <__assert_fail@plt+0x1a6c>
   12b34:	push	{r4, r5, r6, lr}
   12b38:	sub	sp, sp, #8
   12b3c:	ldr	r0, [r3]
   12b40:	bl	18254 <__assert_fail@plt+0x70c8>
   12b44:	cmp	r0, #0
   12b48:	beq	12b6c <__assert_fail@plt+0x19e0>
   12b4c:	ldr	r4, [pc, #168]	; 12bfc <__assert_fail@plt+0x1a70>
   12b50:	ldrb	r3, [r4, #4]
   12b54:	cmp	r3, #0
   12b58:	beq	12b88 <__assert_fail@plt+0x19fc>
   12b5c:	bl	11090 <__errno_location@plt>
   12b60:	ldr	r3, [r0]
   12b64:	cmp	r3, #32
   12b68:	bne	12b88 <__assert_fail@plt+0x19fc>
   12b6c:	ldr	r3, [pc, #140]	; 12c00 <__assert_fail@plt+0x1a74>
   12b70:	ldr	r0, [r3]
   12b74:	bl	18254 <__assert_fail@plt+0x70c8>
   12b78:	cmp	r0, #0
   12b7c:	bne	12bd0 <__assert_fail@plt+0x1a44>
   12b80:	add	sp, sp, #8
   12b84:	pop	{r4, r5, r6, pc}
   12b88:	mov	r2, #5
   12b8c:	ldr	r1, [pc, #112]	; 12c04 <__assert_fail@plt+0x1a78>
   12b90:	mov	r0, #0
   12b94:	bl	10f4c <dcgettext@plt>
   12b98:	ldr	r4, [r4]
   12b9c:	cmp	r4, #0
   12ba0:	mov	r5, r0
   12ba4:	beq	12bdc <__assert_fail@plt+0x1a50>
   12ba8:	bl	11090 <__errno_location@plt>
   12bac:	ldr	r6, [r0]
   12bb0:	mov	r0, r4
   12bb4:	bl	15a04 <__assert_fail@plt+0x4878>
   12bb8:	mov	r1, r6
   12bbc:	str	r5, [sp]
   12bc0:	ldr	r2, [pc, #64]	; 12c08 <__assert_fail@plt+0x1a7c>
   12bc4:	mov	r3, r0
   12bc8:	mov	r0, #0
   12bcc:	bl	10fd0 <error@plt>
   12bd0:	ldr	r3, [pc, #52]	; 12c0c <__assert_fail@plt+0x1a80>
   12bd4:	ldr	r0, [r3]
   12bd8:	bl	10ef8 <_exit@plt>
   12bdc:	bl	11090 <__errno_location@plt>
   12be0:	mov	r3, r5
   12be4:	ldr	r2, [pc, #36]	; 12c10 <__assert_fail@plt+0x1a84>
   12be8:	ldr	r1, [r0]
   12bec:	mov	r0, r4
   12bf0:	bl	10fd0 <error@plt>
   12bf4:	b	12bd0 <__assert_fail@plt+0x1a44>
   12bf8:	andeq	sl, r2, ip, ror r1
   12bfc:	andeq	sl, r2, r4, lsl #4
   12c00:	andeq	sl, r2, r8, ror r1
   12c04:	andeq	r9, r1, r0, asr #12
   12c08:	andeq	r9, r1, ip, asr #12
   12c0c:	andeq	sl, r2, r4, lsr #2
   12c10:	andeq	r9, r1, r0, asr r6
   12c14:	push	{r4, r5, lr}
   12c18:	sub	sp, sp, #12
   12c1c:	mov	r5, r0
   12c20:	bl	11090 <__errno_location@plt>
   12c24:	mov	r2, #0
   12c28:	mov	r4, r0
   12c2c:	ldr	r3, [r0]
   12c30:	str	r2, [r4]
   12c34:	mov	r0, r5
   12c38:	str	r3, [sp]
   12c3c:	str	r3, [sp, #4]
   12c40:	bl	10ee0 <free@plt>
   12c44:	ldr	r3, [r4]
   12c48:	add	r2, sp, #8
   12c4c:	cmp	r3, #0
   12c50:	moveq	r3, #4
   12c54:	movne	r3, #0
   12c58:	add	r3, r2, r3
   12c5c:	ldr	r3, [r3, #-8]
   12c60:	str	r3, [r4]
   12c64:	add	sp, sp, #12
   12c68:	pop	{r4, r5, pc}
   12c6c:	push	{lr}		; (str lr, [sp, #-4]!)
   12c70:	sub	sp, sp, #268	; 0x10c
   12c74:	add	r1, sp, #4
   12c78:	ldr	r2, [pc, #60]	; 12cbc <__assert_fail@plt+0x1b30>
   12c7c:	bl	17028 <__assert_fail@plt+0x5e9c>
   12c80:	cmp	r0, #0
   12c84:	movne	r0, #0
   12c88:	bne	12cb4 <__assert_fail@plt+0x1b28>
   12c8c:	ldr	r1, [pc, #44]	; 12cc0 <__assert_fail@plt+0x1b34>
   12c90:	add	r0, sp, #4
   12c94:	bl	10ebc <strcmp@plt>
   12c98:	cmp	r0, #0
   12c9c:	beq	12cb4 <__assert_fail@plt+0x1b28>
   12ca0:	add	r0, sp, #4
   12ca4:	ldr	r1, [pc, #24]	; 12cc4 <__assert_fail@plt+0x1b38>
   12ca8:	bl	10ebc <strcmp@plt>
   12cac:	adds	r0, r0, #0
   12cb0:	movne	r0, #1
   12cb4:	add	sp, sp, #268	; 0x10c
   12cb8:	pop	{pc}		; (ldr pc, [sp], #4)
   12cbc:	andeq	r0, r0, r1, lsl #2
   12cc0:	andeq	r9, r1, r4, asr r6
   12cc4:	andeq	r9, r1, r8, asr r6
   12cc8:	cmp	r0, #0
   12ccc:	sbcs	r3, r1, #0
   12cd0:	mov	r3, #0
   12cd4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12cd8:	mov	r4, r0
   12cdc:	mov	r5, r1
   12ce0:	strb	r3, [r2, #20]
   12ce4:	add	r6, r2, #20
   12ce8:	mov	r8, #10
   12cec:	mov	r9, #0
   12cf0:	blt	12d40 <__assert_fail@plt+0x1bb4>
   12cf4:	mov	r0, r4
   12cf8:	mov	r1, r5
   12cfc:	mov	r2, r8
   12d00:	mov	r3, r9
   12d04:	bl	18990 <__assert_fail@plt+0x7804>
   12d08:	mov	r0, r4
   12d0c:	mov	r1, r5
   12d10:	mov	r3, r9
   12d14:	add	r2, r2, #48	; 0x30
   12d18:	strb	r2, [r6, #-1]!
   12d1c:	mov	r2, r8
   12d20:	bl	18990 <__assert_fail@plt+0x7804>
   12d24:	mov	r4, r0
   12d28:	mov	r5, r1
   12d2c:	orrs	r3, r4, r5
   12d30:	bne	12cf4 <__assert_fail@plt+0x1b68>
   12d34:	mov	r0, r6
   12d38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12d3c:	mov	r6, r7
   12d40:	mov	r0, r4
   12d44:	mov	r1, r5
   12d48:	mov	r2, r8
   12d4c:	mov	r3, r9
   12d50:	bl	18990 <__assert_fail@plt+0x7804>
   12d54:	mov	r0, r4
   12d58:	mov	r1, r5
   12d5c:	mov	r3, r9
   12d60:	sub	r7, r6, #1
   12d64:	rsb	r2, r2, #48	; 0x30
   12d68:	strb	r2, [r6, #-1]
   12d6c:	mov	r2, r8
   12d70:	bl	18990 <__assert_fail@plt+0x7804>
   12d74:	mov	r4, r0
   12d78:	mov	r5, r1
   12d7c:	orrs	r3, r4, r5
   12d80:	bne	12d3c <__assert_fail@plt+0x1bb0>
   12d84:	mov	r3, #45	; 0x2d
   12d88:	sub	r6, r6, #2
   12d8c:	strb	r3, [r7, #-1]
   12d90:	mov	r0, r6
   12d94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12d98:	push	{r4, r5, r6, lr}
   12d9c:	subs	r4, r0, #0
   12da0:	beq	12e14 <__assert_fail@plt+0x1c88>
   12da4:	mov	r1, #47	; 0x2f
   12da8:	bl	11120 <strrchr@plt>
   12dac:	subs	r5, r0, #0
   12db0:	beq	12e00 <__assert_fail@plt+0x1c74>
   12db4:	add	r6, r5, #1
   12db8:	sub	r3, r6, r4
   12dbc:	cmp	r3, #6
   12dc0:	ble	12e00 <__assert_fail@plt+0x1c74>
   12dc4:	mov	r2, #7
   12dc8:	ldr	r1, [pc, #96]	; 12e30 <__assert_fail@plt+0x1ca4>
   12dcc:	sub	r0, r5, #6
   12dd0:	bl	11168 <strncmp@plt>
   12dd4:	cmp	r0, #0
   12dd8:	bne	12e00 <__assert_fail@plt+0x1c74>
   12ddc:	mov	r2, #3
   12de0:	ldr	r1, [pc, #76]	; 12e34 <__assert_fail@plt+0x1ca8>
   12de4:	mov	r0, r6
   12de8:	bl	11168 <strncmp@plt>
   12dec:	cmp	r0, #0
   12df0:	movne	r4, r6
   12df4:	ldreq	r3, [pc, #60]	; 12e38 <__assert_fail@plt+0x1cac>
   12df8:	addeq	r4, r5, #4
   12dfc:	streq	r4, [r3]
   12e00:	ldr	r2, [pc, #52]	; 12e3c <__assert_fail@plt+0x1cb0>
   12e04:	ldr	r3, [pc, #52]	; 12e40 <__assert_fail@plt+0x1cb4>
   12e08:	str	r4, [r2]
   12e0c:	str	r4, [r3]
   12e10:	pop	{r4, r5, r6, pc}
   12e14:	ldr	r3, [pc, #40]	; 12e44 <__assert_fail@plt+0x1cb8>
   12e18:	mov	r2, #55	; 0x37
   12e1c:	mov	r1, #1
   12e20:	ldr	r3, [r3]
   12e24:	ldr	r0, [pc, #28]	; 12e48 <__assert_fail@plt+0x1cbc>
   12e28:	bl	10f94 <fwrite@plt>
   12e2c:	bl	11174 <abort@plt>
   12e30:	muleq	r1, r8, r6
   12e34:	andeq	r9, r1, r0, lsr #13
   12e38:	andeq	sl, r2, r8, ror #2
   12e3c:	andeq	sl, r2, ip, lsl #4
   12e40:	andeq	sl, r2, ip, ror #2
   12e44:	andeq	sl, r2, r8, ror r1
   12e48:	andeq	r9, r1, r0, ror #12
   12e4c:	push	{r4, r5, r6, lr}
   12e50:	mov	r4, r0
   12e54:	mov	r5, r1
   12e58:	bl	18470 <__assert_fail@plt+0x72e4>
   12e5c:	ldrb	r3, [r0]
   12e60:	bic	r3, r3, #32
   12e64:	cmp	r3, #85	; 0x55
   12e68:	bne	12ec8 <__assert_fail@plt+0x1d3c>
   12e6c:	ldrb	r3, [r0, #1]
   12e70:	bic	r3, r3, #32
   12e74:	cmp	r3, #84	; 0x54
   12e78:	bne	12f04 <__assert_fail@plt+0x1d78>
   12e7c:	ldrb	r3, [r0, #2]
   12e80:	bic	r3, r3, #32
   12e84:	cmp	r3, #70	; 0x46
   12e88:	bne	12f04 <__assert_fail@plt+0x1d78>
   12e8c:	ldrb	r3, [r0, #3]
   12e90:	cmp	r3, #45	; 0x2d
   12e94:	bne	12f04 <__assert_fail@plt+0x1d78>
   12e98:	ldrb	r3, [r0, #4]
   12e9c:	cmp	r3, #56	; 0x38
   12ea0:	bne	12f04 <__assert_fail@plt+0x1d78>
   12ea4:	ldrb	r3, [r0, #5]
   12ea8:	cmp	r3, #0
   12eac:	bne	12f04 <__assert_fail@plt+0x1d78>
   12eb0:	ldrb	r2, [r4]
   12eb4:	ldr	r3, [pc, #152]	; 12f54 <__assert_fail@plt+0x1dc8>
   12eb8:	ldr	r0, [pc, #152]	; 12f58 <__assert_fail@plt+0x1dcc>
   12ebc:	cmp	r2, #96	; 0x60
   12ec0:	movne	r0, r3
   12ec4:	pop	{r4, r5, r6, pc}
   12ec8:	cmp	r3, #71	; 0x47
   12ecc:	bne	12f04 <__assert_fail@plt+0x1d78>
   12ed0:	ldrb	r3, [r0, #1]
   12ed4:	bic	r3, r3, #32
   12ed8:	cmp	r3, #66	; 0x42
   12edc:	bne	12f04 <__assert_fail@plt+0x1d78>
   12ee0:	ldrb	r3, [r0, #2]
   12ee4:	cmp	r3, #49	; 0x31
   12ee8:	bne	12f04 <__assert_fail@plt+0x1d78>
   12eec:	ldrb	r3, [r0, #3]
   12ef0:	cmp	r3, #56	; 0x38
   12ef4:	bne	12f04 <__assert_fail@plt+0x1d78>
   12ef8:	ldrb	r3, [r0, #4]
   12efc:	cmp	r3, #48	; 0x30
   12f00:	beq	12f18 <__assert_fail@plt+0x1d8c>
   12f04:	ldr	r3, [pc, #80]	; 12f5c <__assert_fail@plt+0x1dd0>
   12f08:	cmp	r5, #9
   12f0c:	ldr	r0, [pc, #76]	; 12f60 <__assert_fail@plt+0x1dd4>
   12f10:	movne	r0, r3
   12f14:	pop	{r4, r5, r6, pc}
   12f18:	ldrb	r3, [r0, #5]
   12f1c:	cmp	r3, #51	; 0x33
   12f20:	bne	12f04 <__assert_fail@plt+0x1d78>
   12f24:	ldrb	r3, [r0, #6]
   12f28:	cmp	r3, #48	; 0x30
   12f2c:	bne	12f04 <__assert_fail@plt+0x1d78>
   12f30:	ldrb	r3, [r0, #7]
   12f34:	cmp	r3, #0
   12f38:	bne	12f04 <__assert_fail@plt+0x1d78>
   12f3c:	ldrb	r2, [r4]
   12f40:	ldr	r3, [pc, #28]	; 12f64 <__assert_fail@plt+0x1dd8>
   12f44:	ldr	r0, [pc, #28]	; 12f68 <__assert_fail@plt+0x1ddc>
   12f48:	cmp	r2, #96	; 0x60
   12f4c:	movne	r0, r3
   12f50:	pop	{r4, r5, r6, pc}
   12f54:	strdeq	r9, [r1], -ip
   12f58:	strdeq	r9, [r1], -r8
   12f5c:	andeq	r9, r1, ip, lsl #14
   12f60:	andeq	r9, r1, r8, lsl #14
   12f64:	andeq	r9, r1, r4, lsl #14
   12f68:	andeq	r9, r1, r0, lsl #14
   12f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f70:	sub	sp, sp, #140	; 0x8c
   12f74:	mov	r9, r1
   12f78:	str	r3, [sp, #24]
   12f7c:	mov	r3, #1
   12f80:	mov	sl, r0
   12f84:	str	r2, [sp, #44]	; 0x2c
   12f88:	str	r3, [sp, #28]
   12f8c:	bl	10fac <__ctype_get_mb_cur_max@plt>
   12f90:	ldr	r3, [sp, #180]	; 0xb4
   12f94:	mov	fp, r9
   12f98:	mov	r9, sl
   12f9c:	lsr	r3, r3, #1
   12fa0:	and	r3, r3, #1
   12fa4:	str	r3, [sp, #40]	; 0x28
   12fa8:	ldr	r3, [sp, #180]	; 0xb4
   12fac:	mov	r2, #0
   12fb0:	and	r3, r3, #4
   12fb4:	str	r3, [sp, #100]	; 0x64
   12fb8:	ldr	r3, [sp, #180]	; 0xb4
   12fbc:	str	r2, [sp, #76]	; 0x4c
   12fc0:	and	r3, r3, #1
   12fc4:	str	r3, [sp, #96]	; 0x60
   12fc8:	str	r2, [sp, #36]	; 0x24
   12fcc:	str	r2, [sp, #56]	; 0x38
   12fd0:	str	r2, [sp, #68]	; 0x44
   12fd4:	str	r2, [sp, #72]	; 0x48
   12fd8:	str	r2, [sp, #84]	; 0x54
   12fdc:	str	r0, [sp, #80]	; 0x50
   12fe0:	ldr	r3, [sp, #176]	; 0xb0
   12fe4:	cmp	r3, #10
   12fe8:	ldrls	pc, [pc, r3, lsl #2]
   12fec:	b	141c4 <__assert_fail@plt+0x3038>
   12ff0:	andeq	r3, r1, ip, lsl r0
   12ff4:	andeq	r3, r1, ip, lsr r3
   12ff8:	muleq	r1, r4, r4
   12ffc:	andeq	r3, r1, r0, ror r3
   13000:	andeq	r3, r1, r8, ror #9
   13004:	andeq	r3, r1, r8, asr #9
   13008:	muleq	r1, r0, r3
   1300c:			; <UNDEFINED> instruction: 0x000133b4
   13010:	ldrdeq	r3, [r1], -ip
   13014:	ldrdeq	r3, [r1], -ip
   13018:	ldrdeq	r3, [r1], -ip
   1301c:	mov	r3, #0
   13020:	ldr	r1, [sp, #56]	; 0x38
   13024:	ldr	r2, [sp, #176]	; 0xb0
   13028:	ldr	lr, [sp, #176]	; 0xb0
   1302c:	mov	r8, r3
   13030:	mov	ip, r3
   13034:	str	r3, [sp, #40]	; 0x28
   13038:	mov	r3, r1
   1303c:	cmp	r2, #2
   13040:	moveq	r3, #0
   13044:	andne	r3, r3, #1
   13048:	mov	r0, r3
   1304c:	str	r3, [sp, #92]	; 0x5c
   13050:	ldr	r3, [sp, #68]	; 0x44
   13054:	sub	lr, lr, #2
   13058:	adds	r2, r3, #0
   1305c:	movne	r2, #1
   13060:	and	r3, r1, ip
   13064:	and	r3, r2, r3
   13068:	clz	lr, lr
   1306c:	str	r3, [sp, #88]	; 0x58
   13070:	lsr	lr, lr, #5
   13074:	mov	r3, ip
   13078:	and	r3, r3, lr
   1307c:	mov	sl, #0
   13080:	and	r0, r2, r0
   13084:	str	r3, [sp, #64]	; 0x40
   13088:	eor	r3, r1, #1
   1308c:	str	lr, [sp, #52]	; 0x34
   13090:	str	r0, [sp, #48]	; 0x30
   13094:	str	r3, [sp, #60]	; 0x3c
   13098:	ldr	r3, [sp, #24]
   1309c:	cmn	r3, #1
   130a0:	beq	135d0 <__assert_fail@plt+0x2444>
   130a4:	subs	r7, r3, sl
   130a8:	movne	r7, #1
   130ac:	cmp	r7, #0
   130b0:	beq	135e8 <__assert_fail@plt+0x245c>
   130b4:	ldr	r3, [sp, #48]	; 0x30
   130b8:	cmp	r3, #0
   130bc:	beq	13954 <__assert_fail@plt+0x27c8>
   130c0:	ldr	r2, [sp, #68]	; 0x44
   130c4:	ldr	r1, [sp, #24]
   130c8:	cmp	r2, #1
   130cc:	mov	r3, r2
   130d0:	movls	r3, #0
   130d4:	movhi	r3, #1
   130d8:	cmn	r1, #1
   130dc:	movne	r3, #0
   130e0:	cmp	r3, #0
   130e4:	add	r4, sl, r2
   130e8:	beq	130f8 <__assert_fail@plt+0x1f6c>
   130ec:	ldr	r0, [sp, #44]	; 0x2c
   130f0:	bl	11078 <strlen@plt>
   130f4:	str	r0, [sp, #24]
   130f8:	ldr	r3, [sp, #24]
   130fc:	cmp	r3, r4
   13100:	ldr	r3, [sp, #44]	; 0x2c
   13104:	add	r5, r3, sl
   13108:	bcc	1395c <__assert_fail@plt+0x27d0>
   1310c:	mov	r0, r5
   13110:	ldr	r2, [sp, #68]	; 0x44
   13114:	ldr	r1, [sp, #72]	; 0x48
   13118:	bl	10f28 <memcmp@plt>
   1311c:	cmp	r0, #0
   13120:	bne	1395c <__assert_fail@plt+0x27d0>
   13124:	ldr	r3, [sp, #40]	; 0x28
   13128:	cmp	r3, #0
   1312c:	bne	14318 <__assert_fail@plt+0x318c>
   13130:	ldrb	r4, [r5]
   13134:	cmp	r4, #126	; 0x7e
   13138:	ldrls	pc, [pc, r4, lsl #2]
   1313c:	b	14254 <__assert_fail@plt+0x30c8>
   13140:	andeq	r3, r1, r4, lsl r8
   13144:	andeq	r4, r1, r4, asr r2
   13148:	andeq	r4, r1, r4, asr r2
   1314c:	andeq	r4, r1, r4, asr r2
   13150:	andeq	r4, r1, r4, asr r2
   13154:	andeq	r4, r1, r4, asr r2
   13158:	andeq	r4, r1, r4, asr r2
   1315c:	andeq	r3, r1, r0, lsl #16
   13160:	andeq	r3, r1, ip, ror #15
   13164:	andeq	r3, r1, r8, asr #15
   13168:	andeq	r3, r1, r8, lsr #15
   1316c:	ldrdeq	r3, [r1], -r8
   13170:	andeq	r3, r1, r0, lsl r7
   13174:	andeq	r3, r1, r4, asr #18
   13178:	andeq	r4, r1, r4, asr r2
   1317c:	andeq	r4, r1, r4, asr r2
   13180:	andeq	r4, r1, r4, asr r2
   13184:	andeq	r4, r1, r4, asr r2
   13188:	andeq	r4, r1, r4, asr r2
   1318c:	andeq	r4, r1, r4, asr r2
   13190:	andeq	r4, r1, r4, asr r2
   13194:	andeq	r4, r1, r4, asr r2
   13198:	andeq	r4, r1, r4, asr r2
   1319c:	andeq	r4, r1, r4, asr r2
   131a0:	andeq	r4, r1, r4, asr r2
   131a4:	andeq	r4, r1, r4, asr r2
   131a8:	andeq	r4, r1, r4, asr r2
   131ac:	andeq	r4, r1, r4, asr r2
   131b0:	andeq	r4, r1, r4, asr r2
   131b4:	andeq	r4, r1, r4, asr r2
   131b8:	andeq	r4, r1, r4, asr r2
   131bc:	andeq	r4, r1, r4, asr r2
   131c0:	andeq	r3, r1, r4, lsr r9
   131c4:	andeq	r3, r1, r4, lsl r9
   131c8:	andeq	r3, r1, r4, lsl r9
   131cc:	strdeq	r3, [r1], -r4
   131d0:	andeq	r3, r1, r4, lsl r9
   131d4:	andeq	r3, r1, r0, lsl #14
   131d8:	andeq	r3, r1, r4, lsl r9
   131dc:	ldrdeq	r3, [r1], -ip
   131e0:	andeq	r3, r1, r4, lsl r9
   131e4:	andeq	r3, r1, r4, lsl r9
   131e8:	andeq	r3, r1, r4, lsl r9
   131ec:	andeq	r3, r1, r0, lsl #14
   131f0:	andeq	r3, r1, r0, lsl #14
   131f4:	andeq	r3, r1, r0, lsl #14
   131f8:	andeq	r3, r1, r0, lsl #14
   131fc:	andeq	r3, r1, r0, lsl #14
   13200:	andeq	r3, r1, r0, lsl #14
   13204:	andeq	r3, r1, r0, lsl #14
   13208:	andeq	r3, r1, r0, lsl #14
   1320c:	andeq	r3, r1, r0, lsl #14
   13210:	andeq	r3, r1, r0, lsl #14
   13214:	andeq	r3, r1, r0, lsl #14
   13218:	andeq	r3, r1, r0, lsl #14
   1321c:	andeq	r3, r1, r0, lsl #14
   13220:	andeq	r3, r1, r0, lsl #14
   13224:	andeq	r3, r1, r0, lsl #14
   13228:	andeq	r3, r1, r0, lsl #14
   1322c:	andeq	r3, r1, r4, lsl r9
   13230:	andeq	r3, r1, r4, lsl r9
   13234:	andeq	r3, r1, r4, lsl r9
   13238:	andeq	r3, r1, r4, lsl r9
   1323c:	andeq	r3, r1, ip, lsl #13
   13240:	andeq	r4, r1, r4, asr r2
   13244:	andeq	r3, r1, r0, lsl #14
   13248:	andeq	r3, r1, r0, lsl #14
   1324c:	andeq	r3, r1, r0, lsl #14
   13250:	andeq	r3, r1, r0, lsl #14
   13254:	andeq	r3, r1, r0, lsl #14
   13258:	andeq	r3, r1, r0, lsl #14
   1325c:	andeq	r3, r1, r0, lsl #14
   13260:	andeq	r3, r1, r0, lsl #14
   13264:	andeq	r3, r1, r0, lsl #14
   13268:	andeq	r3, r1, r0, lsl #14
   1326c:	andeq	r3, r1, r0, lsl #14
   13270:	andeq	r3, r1, r0, lsl #14
   13274:	andeq	r3, r1, r0, lsl #14
   13278:	andeq	r3, r1, r0, lsl #14
   1327c:	andeq	r3, r1, r0, lsl #14
   13280:	andeq	r3, r1, r0, lsl #14
   13284:	andeq	r3, r1, r0, lsl #14
   13288:	andeq	r3, r1, r0, lsl #14
   1328c:	andeq	r3, r1, r0, lsl #14
   13290:	andeq	r3, r1, r0, lsl #14
   13294:	andeq	r3, r1, r0, lsl #14
   13298:	andeq	r3, r1, r0, lsl #14
   1329c:	andeq	r3, r1, r0, lsl #14
   132a0:	andeq	r3, r1, r0, lsl #14
   132a4:	andeq	r3, r1, r0, lsl #14
   132a8:	andeq	r3, r1, r0, lsl #14
   132ac:	andeq	r3, r1, r4, lsl r9
   132b0:	andeq	r3, r1, r8, asr r6
   132b4:	andeq	r3, r1, r0, lsl #14
   132b8:	andeq	r3, r1, r4, lsl r9
   132bc:	andeq	r3, r1, r0, lsl #14
   132c0:	andeq	r3, r1, r4, lsl r9
   132c4:	andeq	r3, r1, r0, lsl #14
   132c8:	andeq	r3, r1, r0, lsl #14
   132cc:	andeq	r3, r1, r0, lsl #14
   132d0:	andeq	r3, r1, r0, lsl #14
   132d4:	andeq	r3, r1, r0, lsl #14
   132d8:	andeq	r3, r1, r0, lsl #14
   132dc:	andeq	r3, r1, r0, lsl #14
   132e0:	andeq	r3, r1, r0, lsl #14
   132e4:	andeq	r3, r1, r0, lsl #14
   132e8:	andeq	r3, r1, r0, lsl #14
   132ec:	andeq	r3, r1, r0, lsl #14
   132f0:	andeq	r3, r1, r0, lsl #14
   132f4:	andeq	r3, r1, r0, lsl #14
   132f8:	andeq	r3, r1, r0, lsl #14
   132fc:	andeq	r3, r1, r0, lsl #14
   13300:	andeq	r3, r1, r0, lsl #14
   13304:	andeq	r3, r1, r0, lsl #14
   13308:	andeq	r3, r1, r0, lsl #14
   1330c:	andeq	r3, r1, r0, lsl #14
   13310:	andeq	r3, r1, r0, lsl #14
   13314:	andeq	r3, r1, r0, lsl #14
   13318:	andeq	r3, r1, r0, lsl #14
   1331c:	andeq	r3, r1, r0, lsl #14
   13320:	andeq	r3, r1, r0, lsl #14
   13324:	andeq	r3, r1, r0, lsl #14
   13328:	andeq	r3, r1, r0, lsl #14
   1332c:	andeq	r3, r1, r0, lsl r5
   13330:	andeq	r3, r1, r4, lsl r9
   13334:	andeq	r3, r1, r0, lsl r5
   13338:	strdeq	r3, [r1], -r4
   1333c:	mov	r3, #1
   13340:	str	r3, [sp, #40]	; 0x28
   13344:	str	r3, [sp, #68]	; 0x44
   13348:	mov	r8, #0
   1334c:	ldr	r3, [pc, #4056]	; 1432c <__assert_fail@plt+0x31a0>
   13350:	str	r3, [sp, #72]	; 0x48
   13354:	mov	r3, #2
   13358:	str	r3, [sp, #176]	; 0xb0
   1335c:	ldr	r1, [sp, #56]	; 0x38
   13360:	mov	r2, r3
   13364:	ldr	ip, [sp, #40]	; 0x28
   13368:	mov	lr, r3
   1336c:	b	13038 <__assert_fail@plt+0x1eac>
   13370:	mov	r3, #1
   13374:	str	r3, [sp, #56]	; 0x38
   13378:	str	r3, [sp, #68]	; 0x44
   1337c:	str	r3, [sp, #40]	; 0x28
   13380:	ldr	r3, [pc, #4004]	; 1432c <__assert_fail@plt+0x31a0>
   13384:	mov	r8, #0
   13388:	str	r3, [sp, #72]	; 0x48
   1338c:	b	13354 <__assert_fail@plt+0x21c8>
   13390:	mov	r3, #1
   13394:	str	r3, [sp, #56]	; 0x38
   13398:	str	r3, [sp, #68]	; 0x44
   1339c:	str	r3, [sp, #40]	; 0x28
   133a0:	ldr	r3, [pc, #3976]	; 14330 <__assert_fail@plt+0x31a4>
   133a4:	mov	r8, #0
   133a8:	str	r3, [sp, #72]	; 0x48
   133ac:	mov	r3, #5
   133b0:	b	13358 <__assert_fail@plt+0x21cc>
   133b4:	mov	r3, #0
   133b8:	str	r3, [sp, #40]	; 0x28
   133bc:	mov	r3, #1
   133c0:	str	r3, [sp, #56]	; 0x38
   133c4:	mov	r8, #0
   133c8:	mov	r1, r3
   133cc:	ldr	r2, [sp, #176]	; 0xb0
   133d0:	ldr	ip, [sp, #40]	; 0x28
   133d4:	ldr	lr, [sp, #176]	; 0xb0
   133d8:	b	13038 <__assert_fail@plt+0x1eac>
   133dc:	ldr	r3, [sp, #176]	; 0xb0
   133e0:	cmp	r3, #10
   133e4:	beq	13428 <__assert_fail@plt+0x229c>
   133e8:	mov	r2, #5
   133ec:	ldr	r1, [pc, #3904]	; 14334 <__assert_fail@plt+0x31a8>
   133f0:	mov	r0, #0
   133f4:	bl	10f4c <dcgettext@plt>
   133f8:	ldr	r2, [pc, #3892]	; 14334 <__assert_fail@plt+0x31a8>
   133fc:	cmp	r0, r2
   13400:	str	r0, [sp, #188]	; 0xbc
   13404:	beq	144c0 <__assert_fail@plt+0x3334>
   13408:	mov	r2, #5
   1340c:	ldr	r1, [pc, #3864]	; 1432c <__assert_fail@plt+0x31a0>
   13410:	mov	r0, #0
   13414:	bl	10f4c <dcgettext@plt>
   13418:	ldr	r2, [pc, #3852]	; 1432c <__assert_fail@plt+0x31a0>
   1341c:	cmp	r0, r2
   13420:	str	r0, [sp, #192]	; 0xc0
   13424:	beq	144b0 <__assert_fail@plt+0x3324>
   13428:	ldr	r8, [sp, #40]	; 0x28
   1342c:	cmp	r8, #0
   13430:	movne	r8, #0
   13434:	bne	13464 <__assert_fail@plt+0x22d8>
   13438:	ldr	r3, [sp, #188]	; 0xbc
   1343c:	ldrb	r3, [r3]
   13440:	cmp	r3, #0
   13444:	beq	13464 <__assert_fail@plt+0x22d8>
   13448:	ldr	r2, [sp, #188]	; 0xbc
   1344c:	cmp	fp, r8
   13450:	strbhi	r3, [r9, r8]
   13454:	ldrb	r3, [r2, #1]!
   13458:	add	r8, r8, #1
   1345c:	cmp	r3, #0
   13460:	bne	1344c <__assert_fail@plt+0x22c0>
   13464:	ldr	r0, [sp, #192]	; 0xc0
   13468:	bl	11078 <strlen@plt>
   1346c:	ldr	r3, [sp, #192]	; 0xc0
   13470:	ldr	r2, [sp, #176]	; 0xb0
   13474:	str	r3, [sp, #72]	; 0x48
   13478:	mov	r3, #1
   1347c:	str	r3, [sp, #56]	; 0x38
   13480:	mov	r1, r3
   13484:	ldr	ip, [sp, #40]	; 0x28
   13488:	ldr	lr, [sp, #176]	; 0xb0
   1348c:	str	r0, [sp, #68]	; 0x44
   13490:	b	13038 <__assert_fail@plt+0x1eac>
   13494:	ldr	r3, [sp, #40]	; 0x28
   13498:	cmp	r3, #0
   1349c:	beq	14144 <__assert_fail@plt+0x2fb8>
   134a0:	mov	r3, #1
   134a4:	str	r3, [sp, #68]	; 0x44
   134a8:	ldr	r3, [pc, #3708]	; 1432c <__assert_fail@plt+0x31a0>
   134ac:	str	r3, [sp, #72]	; 0x48
   134b0:	mov	r8, #0
   134b4:	ldr	r1, [sp, #56]	; 0x38
   134b8:	ldr	r2, [sp, #176]	; 0xb0
   134bc:	ldr	ip, [sp, #40]	; 0x28
   134c0:	ldr	lr, [sp, #176]	; 0xb0
   134c4:	b	13038 <__assert_fail@plt+0x1eac>
   134c8:	ldr	r3, [sp, #40]	; 0x28
   134cc:	cmp	r3, #0
   134d0:	beq	141c8 <__assert_fail@plt+0x303c>
   134d4:	str	r3, [sp, #56]	; 0x38
   134d8:	mov	r3, #1
   134dc:	str	r3, [sp, #68]	; 0x44
   134e0:	ldr	r3, [pc, #3656]	; 14330 <__assert_fail@plt+0x31a4>
   134e4:	b	134ac <__assert_fail@plt+0x2320>
   134e8:	ldr	r3, [sp, #40]	; 0x28
   134ec:	cmp	r3, #0
   134f0:	mov	r3, #1
   134f4:	streq	r3, [sp, #56]	; 0x38
   134f8:	beq	14144 <__assert_fail@plt+0x2fb8>
   134fc:	str	r3, [sp, #68]	; 0x44
   13500:	ldr	r3, [pc, #3620]	; 1432c <__assert_fail@plt+0x31a0>
   13504:	mov	r8, #0
   13508:	str	r3, [sp, #72]	; 0x48
   1350c:	b	13354 <__assert_fail@plt+0x21c8>
   13510:	ldr	r3, [sp, #24]
   13514:	ldr	r6, [sp, #48]	; 0x30
   13518:	cmn	r3, #1
   1351c:	beq	13b78 <__assert_fail@plt+0x29ec>
   13520:	subs	r3, r3, #1
   13524:	movne	r3, #1
   13528:	cmp	r3, #0
   1352c:	beq	138f8 <__assert_fail@plt+0x276c>
   13530:	ldr	r1, [sp, #52]	; 0x34
   13534:	mov	r7, r3
   13538:	mov	r3, #0
   1353c:	str	r3, [sp, #32]
   13540:	ldr	r3, [sp, #60]	; 0x3c
   13544:	orr	r2, r1, r3
   13548:	ldr	r3, [sp, #40]	; 0x28
   1354c:	eor	r2, r2, #1
   13550:	orr	r2, r3, r2
   13554:	tst	r2, #255	; 0xff
   13558:	bne	13e7c <__assert_fail@plt+0x2cf0>
   1355c:	cmp	r6, #0
   13560:	bne	1373c <__assert_fail@plt+0x25b0>
   13564:	ldr	r3, [sp, #36]	; 0x24
   13568:	add	sl, sl, #1
   1356c:	and	r3, r3, r7
   13570:	uxtb	r6, r3
   13574:	cmp	r6, #0
   13578:	beq	135a4 <__assert_fail@plt+0x2418>
   1357c:	cmp	fp, r8
   13580:	movhi	r3, #39	; 0x27
   13584:	strbhi	r3, [r9, r8]
   13588:	add	r3, r8, #1
   1358c:	cmp	fp, r3
   13590:	movhi	r2, #39	; 0x27
   13594:	add	r8, r8, #2
   13598:	strbhi	r2, [r9, r3]
   1359c:	mov	r3, #0
   135a0:	str	r3, [sp, #36]	; 0x24
   135a4:	ldr	r2, [sp, #32]
   135a8:	cmp	r8, fp
   135ac:	ldr	r3, [sp, #28]
   135b0:	strbcc	r4, [r9, r8]
   135b4:	cmp	r2, #0
   135b8:	moveq	r3, #0
   135bc:	str	r3, [sp, #28]
   135c0:	ldr	r3, [sp, #24]
   135c4:	add	r8, r8, #1
   135c8:	cmn	r3, #1
   135cc:	bne	130a4 <__assert_fail@plt+0x1f18>
   135d0:	ldr	r3, [sp, #44]	; 0x2c
   135d4:	ldrb	r3, [r3, sl]
   135d8:	adds	r7, r3, #0
   135dc:	movne	r7, #1
   135e0:	cmp	r7, #0
   135e4:	bne	130b4 <__assert_fail@plt+0x1f28>
   135e8:	ldr	r3, [sp, #64]	; 0x40
   135ec:	cmp	r8, #0
   135f0:	movne	r3, #0
   135f4:	andeq	r3, r3, #1
   135f8:	cmp	r3, #0
   135fc:	str	r3, [sp, #64]	; 0x40
   13600:	bne	140a4 <__assert_fail@plt+0x2f18>
   13604:	ldr	r3, [sp, #40]	; 0x28
   13608:	ldr	r2, [sp, #52]	; 0x34
   1360c:	eor	r3, r3, #1
   13610:	ands	r2, r2, r3
   13614:	beq	144d0 <__assert_fail@plt+0x3344>
   13618:	ldr	r3, [sp, #76]	; 0x4c
   1361c:	cmp	r3, #0
   13620:	beq	144a0 <__assert_fail@plt+0x3314>
   13624:	ldr	r3, [sp, #28]
   13628:	cmp	r3, #0
   1362c:	bne	1445c <__assert_fail@plt+0x32d0>
   13630:	ldr	r2, [sp, #84]	; 0x54
   13634:	clz	r3, fp
   13638:	cmp	r2, #0
   1363c:	lsr	r3, r3, #5
   13640:	moveq	r3, #0
   13644:	cmp	r3, #0
   13648:	beq	143fc <__assert_fail@plt+0x3270>
   1364c:	mov	fp, r2
   13650:	str	r3, [sp, #76]	; 0x4c
   13654:	b	12fe0 <__assert_fail@plt+0x1e54>
   13658:	ldr	r3, [sp, #176]	; 0xb0
   1365c:	ldr	r6, [sp, #48]	; 0x30
   13660:	cmp	r3, #2
   13664:	beq	13b9c <__assert_fail@plt+0x2a10>
   13668:	ldr	r3, [sp, #88]	; 0x58
   1366c:	cmp	r3, #0
   13670:	beq	14120 <__assert_fail@plt+0x2f94>
   13674:	mov	r3, #0
   13678:	add	sl, sl, #1
   1367c:	ldr	r6, [sp, #36]	; 0x24
   13680:	str	r3, [sp, #32]
   13684:	mov	r4, #92	; 0x5c
   13688:	b	13574 <__assert_fail@plt+0x23e8>
   1368c:	ldr	r3, [sp, #176]	; 0xb0
   13690:	ldr	r6, [sp, #48]	; 0x30
   13694:	cmp	r3, #2
   13698:	beq	13bcc <__assert_fail@plt+0x2a40>
   1369c:	cmp	r3, #5
   136a0:	bne	14130 <__assert_fail@plt+0x2fa4>
   136a4:	ldr	r3, [sp, #100]	; 0x64
   136a8:	cmp	r3, #0
   136ac:	beq	14194 <__assert_fail@plt+0x3008>
   136b0:	ldr	r2, [sp, #24]
   136b4:	add	r3, sl, #2
   136b8:	cmp	r2, r3
   136bc:	bls	136cc <__assert_fail@plt+0x2540>
   136c0:	ldrb	r4, [r5, #1]
   136c4:	cmp	r4, #63	; 0x3f
   136c8:	beq	1433c <__assert_fail@plt+0x31b0>
   136cc:	mov	r1, #0
   136d0:	str	r1, [sp, #32]
   136d4:	mov	r4, #63	; 0x3f
   136d8:	b	13540 <__assert_fail@plt+0x23b4>
   136dc:	ldr	r3, [sp, #176]	; 0xb0
   136e0:	ldr	r6, [sp, #48]	; 0x30
   136e4:	cmp	r3, #2
   136e8:	beq	13bf8 <__assert_fail@plt+0x2a6c>
   136ec:	str	r7, [sp, #32]
   136f0:	str	r7, [sp, #76]	; 0x4c
   136f4:	mov	r1, #0
   136f8:	mov	r4, #39	; 0x27
   136fc:	b	13540 <__assert_fail@plt+0x23b4>
   13700:	ldr	r6, [sp, #48]	; 0x30
   13704:	ldr	r1, [sp, #52]	; 0x34
   13708:	str	r7, [sp, #32]
   1370c:	b	13540 <__assert_fail@plt+0x23b4>
   13710:	ldr	r6, [sp, #48]	; 0x30
   13714:	ldr	r1, [sp, #52]	; 0x34
   13718:	mov	r4, #12
   1371c:	mov	r3, #102	; 0x66
   13720:	ldr	r2, [sp, #56]	; 0x38
   13724:	cmp	r2, #0
   13728:	streq	r2, [sp, #32]
   1372c:	beq	13540 <__assert_fail@plt+0x23b4>
   13730:	mov	r4, r3
   13734:	mov	r3, #0
   13738:	str	r3, [sp, #32]
   1373c:	ldr	r3, [sp, #40]	; 0x28
   13740:	cmp	r3, #0
   13744:	bne	13eb4 <__assert_fail@plt+0x2d28>
   13748:	ldr	r3, [sp, #36]	; 0x24
   1374c:	eor	r3, r3, #1
   13750:	and	r3, r3, r1
   13754:	ands	r3, r3, #255	; 0xff
   13758:	beq	13790 <__assert_fail@plt+0x2604>
   1375c:	cmp	fp, r8
   13760:	movhi	r2, #39	; 0x27
   13764:	strbhi	r2, [r9, r8]
   13768:	add	r2, r8, #1
   1376c:	cmp	fp, r2
   13770:	movhi	r1, #36	; 0x24
   13774:	strbhi	r1, [r9, r2]
   13778:	add	r2, r8, #2
   1377c:	cmp	fp, r2
   13780:	add	r8, r8, #3
   13784:	movhi	r1, #39	; 0x27
   13788:	strbhi	r1, [r9, r2]
   1378c:	str	r3, [sp, #36]	; 0x24
   13790:	cmp	fp, r8
   13794:	movhi	r3, #92	; 0x5c
   13798:	strbhi	r3, [r9, r8]
   1379c:	add	sl, sl, #1
   137a0:	add	r8, r8, #1
   137a4:	b	135a4 <__assert_fail@plt+0x2418>
   137a8:	ldr	r6, [sp, #48]	; 0x30
   137ac:	mov	r4, #10
   137b0:	mov	r3, #110	; 0x6e
   137b4:	ldr	r2, [sp, #64]	; 0x40
   137b8:	cmp	r2, #0
   137bc:	bne	1423c <__assert_fail@plt+0x30b0>
   137c0:	ldr	r1, [sp, #52]	; 0x34
   137c4:	b	13720 <__assert_fail@plt+0x2594>
   137c8:	ldr	r6, [sp, #48]	; 0x30
   137cc:	ldr	r1, [sp, #52]	; 0x34
   137d0:	mov	r3, #116	; 0x74
   137d4:	b	13720 <__assert_fail@plt+0x2594>
   137d8:	ldr	r6, [sp, #48]	; 0x30
   137dc:	ldr	r1, [sp, #52]	; 0x34
   137e0:	mov	r4, #11
   137e4:	mov	r3, #118	; 0x76
   137e8:	b	13720 <__assert_fail@plt+0x2594>
   137ec:	ldr	r6, [sp, #48]	; 0x30
   137f0:	ldr	r1, [sp, #52]	; 0x34
   137f4:	mov	r4, #8
   137f8:	mov	r3, #98	; 0x62
   137fc:	b	13720 <__assert_fail@plt+0x2594>
   13800:	ldr	r6, [sp, #48]	; 0x30
   13804:	ldr	r1, [sp, #52]	; 0x34
   13808:	mov	r4, #7
   1380c:	mov	r3, #97	; 0x61
   13810:	b	13720 <__assert_fail@plt+0x2594>
   13814:	ldr	r3, [sp, #56]	; 0x38
   13818:	ldr	r6, [sp, #48]	; 0x30
   1381c:	cmp	r3, #0
   13820:	beq	13ce4 <__assert_fail@plt+0x2b58>
   13824:	ldr	r3, [sp, #40]	; 0x28
   13828:	cmp	r3, #0
   1382c:	bne	14318 <__assert_fail@plt+0x318c>
   13830:	ldr	r3, [sp, #36]	; 0x24
   13834:	ldr	r2, [sp, #52]	; 0x34
   13838:	eor	r3, r3, #1
   1383c:	ands	r3, r2, r3
   13840:	moveq	r2, r8
   13844:	beq	1387c <__assert_fail@plt+0x26f0>
   13848:	cmp	fp, r8
   1384c:	movhi	r2, #39	; 0x27
   13850:	strbhi	r2, [r9, r8]
   13854:	add	r2, r8, #1
   13858:	cmp	fp, r2
   1385c:	movhi	r1, #36	; 0x24
   13860:	strbhi	r1, [r9, r2]
   13864:	add	r2, r8, #2
   13868:	cmp	fp, r2
   1386c:	movhi	r1, #39	; 0x27
   13870:	strbhi	r1, [r9, r2]
   13874:	add	r2, r8, #3
   13878:	str	r3, [sp, #36]	; 0x24
   1387c:	cmp	fp, r2
   13880:	movhi	r3, #92	; 0x5c
   13884:	strbhi	r3, [r9, r2]
   13888:	ldr	r3, [sp, #92]	; 0x5c
   1388c:	add	r8, r2, #1
   13890:	cmp	r3, #0
   13894:	beq	14218 <__assert_fail@plt+0x308c>
   13898:	ldr	r1, [sp, #24]
   1389c:	add	r3, sl, #1
   138a0:	cmp	r1, r3
   138a4:	bls	138dc <__assert_fail@plt+0x2750>
   138a8:	ldr	r1, [sp, #44]	; 0x2c
   138ac:	ldrb	r3, [r1, r3]
   138b0:	sub	r3, r3, #48	; 0x30
   138b4:	cmp	r3, #9
   138b8:	bhi	138dc <__assert_fail@plt+0x2750>
   138bc:	cmp	fp, r8
   138c0:	movhi	r3, #48	; 0x30
   138c4:	strbhi	r3, [r9, r8]
   138c8:	add	r3, r2, #2
   138cc:	cmp	fp, r3
   138d0:	add	r8, r2, #3
   138d4:	movhi	r1, #48	; 0x30
   138d8:	strbhi	r1, [r9, r3]
   138dc:	ldr	r3, [sp, #40]	; 0x28
   138e0:	ldr	r1, [sp, #52]	; 0x34
   138e4:	mov	r7, r3
   138e8:	str	r3, [sp, #32]
   138ec:	mov	r4, #48	; 0x30
   138f0:	b	13540 <__assert_fail@plt+0x23b4>
   138f4:	ldr	r6, [sp, #48]	; 0x30
   138f8:	cmp	sl, #0
   138fc:	streq	r7, [sp, #32]
   13900:	beq	13920 <__assert_fail@plt+0x2794>
   13904:	mov	r3, #0
   13908:	ldr	r1, [sp, #52]	; 0x34
   1390c:	str	r3, [sp, #32]
   13910:	b	13540 <__assert_fail@plt+0x23b4>
   13914:	ldr	r6, [sp, #48]	; 0x30
   13918:	mov	r3, #0
   1391c:	str	r3, [sp, #32]
   13920:	ldr	r3, [sp, #64]	; 0x40
   13924:	cmp	r3, #0
   13928:	bne	140a4 <__assert_fail@plt+0x2f18>
   1392c:	ldr	r1, [sp, #52]	; 0x34
   13930:	b	13540 <__assert_fail@plt+0x23b4>
   13934:	ldr	r3, [sp, #48]	; 0x30
   13938:	mov	r6, r3
   1393c:	str	r3, [sp, #32]
   13940:	b	13920 <__assert_fail@plt+0x2794>
   13944:	ldr	r6, [sp, #48]	; 0x30
   13948:	mov	r4, #13
   1394c:	mov	r3, #114	; 0x72
   13950:	b	137b4 <__assert_fail@plt+0x2628>
   13954:	ldr	r3, [sp, #44]	; 0x2c
   13958:	add	r5, r3, sl
   1395c:	ldrb	r4, [r5]
   13960:	cmp	r4, #126	; 0x7e
   13964:	ldrls	pc, [pc, r4, lsl #2]
   13968:	b	13d04 <__assert_fail@plt+0x2b78>
   1396c:	ldrdeq	r3, [r1], -r4
   13970:	andeq	r3, r1, r4, lsl #26
   13974:	andeq	r3, r1, r4, lsl #26
   13978:	andeq	r3, r1, r4, lsl #26
   1397c:	andeq	r3, r1, r4, lsl #26
   13980:	andeq	r3, r1, r4, lsl #26
   13984:	andeq	r3, r1, r4, lsl #26
   13988:	andeq	r3, r1, ip, asr #25
   1398c:	andeq	r3, r1, r4, asr #25
   13990:			; <UNDEFINED> instruction: 0x00013cb8
   13994:			; <UNDEFINED> instruction: 0x00013cb0
   13998:	andeq	r3, r1, r8, lsr #25
   1399c:	andeq	r3, r1, r0, lsr #25
   139a0:	muleq	r1, r8, ip
   139a4:	andeq	r3, r1, r4, lsl #26
   139a8:	andeq	r3, r1, r4, lsl #26
   139ac:	andeq	r3, r1, r4, lsl #26
   139b0:	andeq	r3, r1, r4, lsl #26
   139b4:	andeq	r3, r1, r4, lsl #26
   139b8:	andeq	r3, r1, r4, lsl #26
   139bc:	andeq	r3, r1, r4, lsl #26
   139c0:	andeq	r3, r1, r4, lsl #26
   139c4:	andeq	r3, r1, r4, lsl #26
   139c8:	andeq	r3, r1, r4, lsl #26
   139cc:	andeq	r3, r1, r4, lsl #26
   139d0:	andeq	r3, r1, r4, lsl #26
   139d4:	andeq	r3, r1, r4, lsl #26
   139d8:	andeq	r3, r1, r4, lsl #26
   139dc:	andeq	r3, r1, r4, lsl #26
   139e0:	andeq	r3, r1, r4, lsl #26
   139e4:	andeq	r3, r1, r4, lsl #26
   139e8:	andeq	r3, r1, r4, lsl #26
   139ec:	andeq	r3, r1, ip, lsl #25
   139f0:	andeq	r3, r1, r4, lsl #25
   139f4:	andeq	r3, r1, r4, lsl #25
   139f8:	andeq	r3, r1, ip, ror ip
   139fc:	andeq	r3, r1, r4, lsl #25
   13a00:	andeq	r3, r1, r4, ror ip
   13a04:	andeq	r3, r1, r4, lsl #25
   13a08:	andeq	r3, r1, r8, ror #23
   13a0c:	andeq	r3, r1, r4, lsl #25
   13a10:	andeq	r3, r1, r4, lsl #25
   13a14:	andeq	r3, r1, r4, lsl #25
   13a18:	andeq	r3, r1, r4, ror ip
   13a1c:	andeq	r3, r1, r4, ror ip
   13a20:	andeq	r3, r1, r4, ror ip
   13a24:	andeq	r3, r1, r4, ror ip
   13a28:	andeq	r3, r1, r4, ror ip
   13a2c:	andeq	r3, r1, r4, ror ip
   13a30:	andeq	r3, r1, r4, ror ip
   13a34:	andeq	r3, r1, r4, ror ip
   13a38:	andeq	r3, r1, r4, ror ip
   13a3c:	andeq	r3, r1, r4, ror ip
   13a40:	andeq	r3, r1, r4, ror ip
   13a44:	andeq	r3, r1, r4, ror ip
   13a48:	andeq	r3, r1, r4, ror ip
   13a4c:	andeq	r3, r1, r4, ror ip
   13a50:	andeq	r3, r1, r4, ror ip
   13a54:	andeq	r3, r1, r4, ror ip
   13a58:	andeq	r3, r1, r4, lsl #25
   13a5c:	andeq	r3, r1, r4, lsl #25
   13a60:	andeq	r3, r1, r4, lsl #25
   13a64:	andeq	r3, r1, r4, lsl #25
   13a68:			; <UNDEFINED> instruction: 0x00013bbc
   13a6c:	andeq	r3, r1, r4, lsl #26
   13a70:	andeq	r3, r1, r4, ror ip
   13a74:	andeq	r3, r1, r4, ror ip
   13a78:	andeq	r3, r1, r4, ror ip
   13a7c:	andeq	r3, r1, r4, ror ip
   13a80:	andeq	r3, r1, r4, ror ip
   13a84:	andeq	r3, r1, r4, ror ip
   13a88:	andeq	r3, r1, r4, ror ip
   13a8c:	andeq	r3, r1, r4, ror ip
   13a90:	andeq	r3, r1, r4, ror ip
   13a94:	andeq	r3, r1, r4, ror ip
   13a98:	andeq	r3, r1, r4, ror ip
   13a9c:	andeq	r3, r1, r4, ror ip
   13aa0:	andeq	r3, r1, r4, ror ip
   13aa4:	andeq	r3, r1, r4, ror ip
   13aa8:	andeq	r3, r1, r4, ror ip
   13aac:	andeq	r3, r1, r4, ror ip
   13ab0:	andeq	r3, r1, r4, ror ip
   13ab4:	andeq	r3, r1, r4, ror ip
   13ab8:	andeq	r3, r1, r4, ror ip
   13abc:	andeq	r3, r1, r4, ror ip
   13ac0:	andeq	r3, r1, r4, ror ip
   13ac4:	andeq	r3, r1, r4, ror ip
   13ac8:	andeq	r3, r1, r4, ror ip
   13acc:	andeq	r3, r1, r4, ror ip
   13ad0:	andeq	r3, r1, r4, ror ip
   13ad4:	andeq	r3, r1, r4, ror ip
   13ad8:	andeq	r3, r1, r4, lsl #25
   13adc:	andeq	r3, r1, ip, lsl #23
   13ae0:	andeq	r3, r1, r4, ror ip
   13ae4:	andeq	r3, r1, r4, lsl #25
   13ae8:	andeq	r3, r1, r4, ror ip
   13aec:	andeq	r3, r1, r4, lsl #25
   13af0:	andeq	r3, r1, r4, ror ip
   13af4:	andeq	r3, r1, r4, ror ip
   13af8:	andeq	r3, r1, r4, ror ip
   13afc:	andeq	r3, r1, r4, ror ip
   13b00:	andeq	r3, r1, r4, ror ip
   13b04:	andeq	r3, r1, r4, ror ip
   13b08:	andeq	r3, r1, r4, ror ip
   13b0c:	andeq	r3, r1, r4, ror ip
   13b10:	andeq	r3, r1, r4, ror ip
   13b14:	andeq	r3, r1, r4, ror ip
   13b18:	andeq	r3, r1, r4, ror ip
   13b1c:	andeq	r3, r1, r4, ror ip
   13b20:	andeq	r3, r1, r4, ror ip
   13b24:	andeq	r3, r1, r4, ror ip
   13b28:	andeq	r3, r1, r4, ror ip
   13b2c:	andeq	r3, r1, r4, ror ip
   13b30:	andeq	r3, r1, r4, ror ip
   13b34:	andeq	r3, r1, r4, ror ip
   13b38:	andeq	r3, r1, r4, ror ip
   13b3c:	andeq	r3, r1, r4, ror ip
   13b40:	andeq	r3, r1, r4, ror ip
   13b44:	andeq	r3, r1, r4, ror ip
   13b48:	andeq	r3, r1, r4, ror ip
   13b4c:	andeq	r3, r1, r4, ror ip
   13b50:	andeq	r3, r1, r4, ror ip
   13b54:	andeq	r3, r1, r4, ror ip
   13b58:	andeq	r3, r1, r8, ror #22
   13b5c:	andeq	r3, r1, r4, lsl #25
   13b60:	andeq	r3, r1, r8, ror #22
   13b64:	andeq	r3, r1, ip, ror ip
   13b68:	ldr	r3, [sp, #24]
   13b6c:	mov	r6, #0
   13b70:	cmn	r3, #1
   13b74:	bne	13520 <__assert_fail@plt+0x2394>
   13b78:	ldr	r3, [sp, #44]	; 0x2c
   13b7c:	ldrb	r3, [r3, #1]
   13b80:	adds	r3, r3, #0
   13b84:	movne	r3, #1
   13b88:	b	13528 <__assert_fail@plt+0x239c>
   13b8c:	ldr	r3, [sp, #176]	; 0xb0
   13b90:	mov	r6, #0
   13b94:	cmp	r3, #2
   13b98:	bne	13668 <__assert_fail@plt+0x24dc>
   13b9c:	ldr	r3, [sp, #64]	; 0x40
   13ba0:	cmp	r3, #0
   13ba4:	bne	143dc <__assert_fail@plt+0x3250>
   13ba8:	add	sl, sl, #1
   13bac:	ldr	r6, [sp, #36]	; 0x24
   13bb0:	str	r3, [sp, #32]
   13bb4:	mov	r4, #92	; 0x5c
   13bb8:	b	13574 <__assert_fail@plt+0x23e8>
   13bbc:	ldr	r3, [sp, #176]	; 0xb0
   13bc0:	mov	r6, #0
   13bc4:	cmp	r3, #2
   13bc8:	bne	1369c <__assert_fail@plt+0x2510>
   13bcc:	ldr	r3, [sp, #40]	; 0x28
   13bd0:	cmp	r3, #0
   13bd4:	bne	13eb8 <__assert_fail@plt+0x2d2c>
   13bd8:	mov	r1, r7
   13bdc:	str	r3, [sp, #32]
   13be0:	mov	r4, #63	; 0x3f
   13be4:	b	13540 <__assert_fail@plt+0x23b4>
   13be8:	ldr	r3, [sp, #176]	; 0xb0
   13bec:	mov	r6, #0
   13bf0:	cmp	r3, #2
   13bf4:	bne	136ec <__assert_fail@plt+0x2560>
   13bf8:	ldr	r3, [sp, #64]	; 0x40
   13bfc:	cmp	r3, #0
   13c00:	bne	143dc <__assert_fail@plt+0x3250>
   13c04:	ldr	r2, [sp, #84]	; 0x54
   13c08:	adds	r3, fp, #0
   13c0c:	movne	r3, #1
   13c10:	cmp	r2, #0
   13c14:	movne	r3, #0
   13c18:	cmp	r3, #0
   13c1c:	strne	fp, [sp, #84]	; 0x54
   13c20:	movne	fp, #0
   13c24:	bne	13c54 <__assert_fail@plt+0x2ac8>
   13c28:	cmp	fp, r8
   13c2c:	movhi	r3, #39	; 0x27
   13c30:	strbhi	r3, [r9, r8]
   13c34:	add	r3, r8, #1
   13c38:	cmp	fp, r3
   13c3c:	movhi	r2, #92	; 0x5c
   13c40:	strbhi	r2, [r9, r3]
   13c44:	add	r3, r8, #2
   13c48:	cmp	fp, r3
   13c4c:	movhi	r2, #39	; 0x27
   13c50:	strbhi	r2, [r9, r3]
   13c54:	ldr	r3, [sp, #64]	; 0x40
   13c58:	add	r8, r8, #3
   13c5c:	mov	r1, r7
   13c60:	str	r7, [sp, #32]
   13c64:	str	r7, [sp, #76]	; 0x4c
   13c68:	str	r3, [sp, #36]	; 0x24
   13c6c:	mov	r4, #39	; 0x27
   13c70:	b	13540 <__assert_fail@plt+0x23b4>
   13c74:	mov	r6, #0
   13c78:	b	13704 <__assert_fail@plt+0x2578>
   13c7c:	mov	r6, #0
   13c80:	b	138f8 <__assert_fail@plt+0x276c>
   13c84:	mov	r6, #0
   13c88:	b	13918 <__assert_fail@plt+0x278c>
   13c8c:	str	r7, [sp, #32]
   13c90:	mov	r6, #0
   13c94:	b	13920 <__assert_fail@plt+0x2794>
   13c98:	mov	r6, #0
   13c9c:	b	13948 <__assert_fail@plt+0x27bc>
   13ca0:	mov	r6, #0
   13ca4:	b	13714 <__assert_fail@plt+0x2588>
   13ca8:	mov	r6, #0
   13cac:	b	137dc <__assert_fail@plt+0x2650>
   13cb0:	mov	r6, #0
   13cb4:	b	137ac <__assert_fail@plt+0x2620>
   13cb8:	mov	r6, #0
   13cbc:	mov	r3, #116	; 0x74
   13cc0:	b	137b4 <__assert_fail@plt+0x2628>
   13cc4:	mov	r6, #0
   13cc8:	b	137f0 <__assert_fail@plt+0x2664>
   13ccc:	mov	r6, #0
   13cd0:	b	13804 <__assert_fail@plt+0x2678>
   13cd4:	ldr	r3, [sp, #56]	; 0x38
   13cd8:	mov	r6, #0
   13cdc:	cmp	r3, #0
   13ce0:	bne	13824 <__assert_fail@plt+0x2698>
   13ce4:	ldr	r3, [sp, #96]	; 0x60
   13ce8:	cmp	r3, #0
   13cec:	addne	sl, sl, #1
   13cf0:	bne	13098 <__assert_fail@plt+0x1f0c>
   13cf4:	ldr	r1, [sp, #52]	; 0x34
   13cf8:	str	r3, [sp, #32]
   13cfc:	mov	r4, r3
   13d00:	b	13540 <__assert_fail@plt+0x23b4>
   13d04:	mov	r6, #0
   13d08:	ldr	r3, [sp, #80]	; 0x50
   13d0c:	cmp	r3, #1
   13d10:	bne	13f00 <__assert_fail@plt+0x2d74>
   13d14:	bl	11054 <__ctype_b_loc@plt>
   13d18:	ldr	r2, [sp, #80]	; 0x50
   13d1c:	sxth	r3, r4
   13d20:	mov	r1, r2
   13d24:	lsl	r3, r3, #1
   13d28:	ldr	r2, [r0]
   13d2c:	ldrh	r3, [r2, r3]
   13d30:	and	r3, r3, #16384	; 0x4000
   13d34:	cmp	r3, #0
   13d38:	movne	r3, #1
   13d3c:	moveq	r3, #0
   13d40:	str	r3, [sp, #32]
   13d44:	moveq	r3, #1
   13d48:	movne	r3, #0
   13d4c:	ldr	r2, [sp, #56]	; 0x38
   13d50:	and	r3, r3, r2
   13d54:	ands	r3, r3, #255	; 0xff
   13d58:	beq	1392c <__assert_fail@plt+0x27a0>
   13d5c:	add	r1, sl, r1
   13d60:	mov	r0, #0
   13d64:	ldr	r7, [sp, #40]	; 0x28
   13d68:	ldr	r2, [sp, #36]	; 0x24
   13d6c:	ldr	lr, [sp, #52]	; 0x34
   13d70:	b	13e20 <__assert_fail@plt+0x2c94>
   13d74:	cmp	r7, #0
   13d78:	bne	14174 <__assert_fail@plt+0x2fe8>
   13d7c:	eor	r0, r2, #1
   13d80:	ands	r0, lr, r0
   13d84:	beq	13dbc <__assert_fail@plt+0x2c30>
   13d88:	cmp	fp, r8
   13d8c:	movhi	r2, #39	; 0x27
   13d90:	strbhi	r2, [r9, r8]
   13d94:	add	r2, r8, #1
   13d98:	cmp	fp, r2
   13d9c:	movhi	ip, #36	; 0x24
   13da0:	strbhi	ip, [r9, r2]
   13da4:	add	r2, r8, #2
   13da8:	cmp	fp, r2
   13dac:	movhi	ip, #39	; 0x27
   13db0:	strbhi	ip, [r9, r2]
   13db4:	add	r8, r8, #3
   13db8:	mov	r2, r0
   13dbc:	cmp	fp, r8
   13dc0:	movhi	r0, #92	; 0x5c
   13dc4:	strbhi	r0, [r9, r8]
   13dc8:	add	r0, r8, #1
   13dcc:	cmp	fp, r0
   13dd0:	lsrhi	ip, r4, #6
   13dd4:	addhi	ip, ip, #48	; 0x30
   13dd8:	strbhi	ip, [r9, r0]
   13ddc:	add	ip, r8, #2
   13de0:	cmp	fp, ip
   13de4:	lsrhi	r0, r4, #3
   13de8:	andhi	r0, r0, #7
   13dec:	addhi	r0, r0, #48	; 0x30
   13df0:	add	sl, sl, #1
   13df4:	strbhi	r0, [r9, ip]
   13df8:	and	r4, r4, #7
   13dfc:	cmp	sl, r1
   13e00:	add	r4, r4, #48	; 0x30
   13e04:	add	r8, r8, #3
   13e08:	bcs	1418c <__assert_fail@plt+0x3000>
   13e0c:	mov	r0, r3
   13e10:	cmp	fp, r8
   13e14:	strbhi	r4, [r9, r8]
   13e18:	ldrb	r4, [r5, #1]!
   13e1c:	add	r8, r8, #1
   13e20:	cmp	r3, #0
   13e24:	bne	13d74 <__assert_fail@plt+0x2be8>
   13e28:	cmp	r6, #0
   13e2c:	bne	13ed0 <__assert_fail@plt+0x2d44>
   13e30:	eor	r6, r0, #1
   13e34:	and	r6, r6, r2
   13e38:	add	sl, sl, #1
   13e3c:	cmp	r1, sl
   13e40:	uxtb	r6, r6
   13e44:	bls	13ef8 <__assert_fail@plt+0x2d6c>
   13e48:	cmp	r6, #0
   13e4c:	beq	13e10 <__assert_fail@plt+0x2c84>
   13e50:	cmp	fp, r8
   13e54:	movhi	r2, #39	; 0x27
   13e58:	strbhi	r2, [r9, r8]
   13e5c:	add	r2, r8, #1
   13e60:	cmp	fp, r2
   13e64:	movhi	ip, #39	; 0x27
   13e68:	strbhi	ip, [r9, r2]
   13e6c:	add	r8, r8, #2
   13e70:	mov	r6, r3
   13e74:	mov	r2, r3
   13e78:	b	13e10 <__assert_fail@plt+0x2c84>
   13e7c:	ldr	r3, [sp, #184]	; 0xb8
   13e80:	cmp	r3, #0
   13e84:	beq	1355c <__assert_fail@plt+0x23d0>
   13e88:	lsr	r2, r4, #5
   13e8c:	mov	r0, r3
   13e90:	uxtb	r2, r2
   13e94:	and	r3, r4, #31
   13e98:	ldr	r2, [r0, r2, lsl #2]
   13e9c:	lsr	r3, r2, r3
   13ea0:	tst	r3, #1
   13ea4:	beq	1355c <__assert_fail@plt+0x23d0>
   13ea8:	ldr	r3, [sp, #40]	; 0x28
   13eac:	cmp	r3, #0
   13eb0:	beq	13748 <__assert_fail@plt+0x25bc>
   13eb4:	mov	r3, r1
   13eb8:	str	r3, [sp, #64]	; 0x40
   13ebc:	mov	sl, r9
   13ec0:	ldr	r3, [sp, #56]	; 0x38
   13ec4:	mov	r9, fp
   13ec8:	ldr	r2, [sp, #64]	; 0x40
   13ecc:	b	140bc <__assert_fail@plt+0x2f30>
   13ed0:	cmp	fp, r8
   13ed4:	eor	r6, r0, #1
   13ed8:	movhi	ip, #92	; 0x5c
   13edc:	and	r6, r6, r2
   13ee0:	add	sl, sl, #1
   13ee4:	strbhi	ip, [r9, r8]
   13ee8:	cmp	r1, sl
   13eec:	add	r8, r8, #1
   13ef0:	uxtb	r6, r6
   13ef4:	bhi	13e48 <__assert_fail@plt+0x2cbc>
   13ef8:	str	r2, [sp, #36]	; 0x24
   13efc:	b	13574 <__assert_fail@plt+0x23e8>
   13f00:	ldr	r3, [sp, #24]
   13f04:	cmn	r3, #1
   13f08:	mov	r3, #0
   13f0c:	str	r3, [sp, #128]	; 0x80
   13f10:	str	r3, [sp, #132]	; 0x84
   13f14:	beq	14208 <__assert_fail@plt+0x307c>
   13f18:	mov	r2, r7
   13f1c:	mov	r3, #0
   13f20:	str	r7, [sp, #104]	; 0x68
   13f24:	str	r5, [sp, #116]	; 0x74
   13f28:	mov	r7, r3
   13f2c:	mov	r5, r2
   13f30:	str	r4, [sp, #32]
   13f34:	str	r6, [sp, #108]	; 0x6c
   13f38:	str	r8, [sp, #112]	; 0x70
   13f3c:	ldr	r3, [sp, #44]	; 0x2c
   13f40:	add	r6, sl, r7
   13f44:	add	r4, r3, r6
   13f48:	ldr	r3, [sp, #24]
   13f4c:	mov	r1, r4
   13f50:	sub	r2, r3, r6
   13f54:	add	r0, sp, #124	; 0x7c
   13f58:	add	r3, sp, #128	; 0x80
   13f5c:	bl	184a4 <__assert_fail@plt+0x7318>
   13f60:	subs	r8, r0, #0
   13f64:	beq	142ec <__assert_fail@plt+0x3160>
   13f68:	cmn	r8, #1
   13f6c:	beq	142c4 <__assert_fail@plt+0x3138>
   13f70:	cmn	r8, #2
   13f74:	beq	1425c <__assert_fail@plt+0x30d0>
   13f78:	ldr	r3, [sp, #64]	; 0x40
   13f7c:	cmp	r3, #0
   13f80:	beq	14040 <__assert_fail@plt+0x2eb4>
   13f84:	cmp	r8, #1
   13f88:	beq	14040 <__assert_fail@plt+0x2eb4>
   13f8c:	sub	r3, r8, #1
   13f90:	add	r6, r3, r6
   13f94:	ldr	r3, [sp, #44]	; 0x2c
   13f98:	add	r6, r3, r6
   13f9c:	ldrb	r3, [r4, #1]!
   13fa0:	sub	r3, r3, #91	; 0x5b
   13fa4:	cmp	r3, #33	; 0x21
   13fa8:	ldrls	pc, [pc, r3, lsl #2]
   13fac:	b	14038 <__assert_fail@plt+0x2eac>
   13fb0:	andeq	r4, r1, r4, lsr #1
   13fb4:	andeq	r4, r1, r4, lsr #1
   13fb8:	andeq	r4, r1, r8, lsr r0
   13fbc:	andeq	r4, r1, r4, lsr #1
   13fc0:	andeq	r4, r1, r8, lsr r0
   13fc4:	andeq	r4, r1, r4, lsr #1
   13fc8:	andeq	r4, r1, r8, lsr r0
   13fcc:	andeq	r4, r1, r8, lsr r0
   13fd0:	andeq	r4, r1, r8, lsr r0
   13fd4:	andeq	r4, r1, r8, lsr r0
   13fd8:	andeq	r4, r1, r8, lsr r0
   13fdc:	andeq	r4, r1, r8, lsr r0
   13fe0:	andeq	r4, r1, r8, lsr r0
   13fe4:	andeq	r4, r1, r8, lsr r0
   13fe8:	andeq	r4, r1, r8, lsr r0
   13fec:	andeq	r4, r1, r8, lsr r0
   13ff0:	andeq	r4, r1, r8, lsr r0
   13ff4:	andeq	r4, r1, r8, lsr r0
   13ff8:	andeq	r4, r1, r8, lsr r0
   13ffc:	andeq	r4, r1, r8, lsr r0
   14000:	andeq	r4, r1, r8, lsr r0
   14004:	andeq	r4, r1, r8, lsr r0
   14008:	andeq	r4, r1, r8, lsr r0
   1400c:	andeq	r4, r1, r8, lsr r0
   14010:	andeq	r4, r1, r8, lsr r0
   14014:	andeq	r4, r1, r8, lsr r0
   14018:	andeq	r4, r1, r8, lsr r0
   1401c:	andeq	r4, r1, r8, lsr r0
   14020:	andeq	r4, r1, r8, lsr r0
   14024:	andeq	r4, r1, r8, lsr r0
   14028:	andeq	r4, r1, r8, lsr r0
   1402c:	andeq	r4, r1, r8, lsr r0
   14030:	andeq	r4, r1, r8, lsr r0
   14034:	andeq	r4, r1, r4, lsr #1
   14038:	cmp	r6, r4
   1403c:	bne	13f9c <__assert_fail@plt+0x2e10>
   14040:	ldr	r0, [sp, #124]	; 0x7c
   14044:	bl	10f88 <iswprint@plt>
   14048:	add	r7, r7, r8
   1404c:	cmp	r0, #0
   14050:	add	r0, sp, #128	; 0x80
   14054:	moveq	r5, #0
   14058:	bl	10f10 <mbsinit@plt>
   1405c:	cmp	r0, #0
   14060:	beq	13f3c <__assert_fail@plt+0x2db0>
   14064:	ldr	r4, [sp, #32]
   14068:	str	r5, [sp, #32]
   1406c:	ldr	r3, [sp, #32]
   14070:	mov	r1, r7
   14074:	eor	r3, r3, #1
   14078:	ldr	r7, [sp, #104]	; 0x68
   1407c:	ldr	r6, [sp, #108]	; 0x6c
   14080:	ldr	r8, [sp, #112]	; 0x70
   14084:	ldr	r5, [sp, #116]	; 0x74
   14088:	uxtb	r3, r3
   1408c:	cmp	r1, #1
   14090:	bls	13d4c <__assert_fail@plt+0x2bc0>
   14094:	ldr	r2, [sp, #56]	; 0x38
   14098:	and	r3, r3, r2
   1409c:	uxtb	r3, r3
   140a0:	b	13d5c <__assert_fail@plt+0x2bd0>
   140a4:	mov	r3, #2
   140a8:	str	r3, [sp, #176]	; 0xb0
   140ac:	ldr	r2, [sp, #64]	; 0x40
   140b0:	ldr	r3, [sp, #56]	; 0x38
   140b4:	mov	sl, r9
   140b8:	mov	r9, fp
   140bc:	and	r3, r3, r2
   140c0:	tst	r3, #255	; 0xff
   140c4:	ldr	r3, [sp, #176]	; 0xb0
   140c8:	movne	r3, #4
   140cc:	str	r3, [sp, #176]	; 0xb0
   140d0:	ldr	r3, [sp, #180]	; 0xb4
   140d4:	mov	ip, #0
   140d8:	bic	r3, r3, #2
   140dc:	str	r3, [sp, #4]
   140e0:	ldr	r3, [sp, #192]	; 0xc0
   140e4:	ldr	r2, [sp, #44]	; 0x2c
   140e8:	str	r3, [sp, #16]
   140ec:	ldr	r3, [sp, #188]	; 0xbc
   140f0:	mov	r1, r9
   140f4:	str	r3, [sp, #12]
   140f8:	ldr	r3, [sp, #176]	; 0xb0
   140fc:	mov	r0, sl
   14100:	str	r3, [sp]
   14104:	str	ip, [sp, #8]
   14108:	ldr	r3, [sp, #24]
   1410c:	bl	12f6c <__assert_fail@plt+0x1de0>
   14110:	mov	fp, r0
   14114:	mov	r0, fp
   14118:	add	sp, sp, #140	; 0x8c
   1411c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14120:	mov	r4, #92	; 0x5c
   14124:	mov	r1, #0
   14128:	mov	r3, r4
   1412c:	b	13720 <__assert_fail@plt+0x2594>
   14130:	mov	r3, #0
   14134:	ldr	r1, [sp, #52]	; 0x34
   14138:	str	r3, [sp, #32]
   1413c:	mov	r4, #63	; 0x3f
   14140:	b	13540 <__assert_fail@plt+0x23b4>
   14144:	cmp	fp, #0
   14148:	beq	141a4 <__assert_fail@plt+0x3018>
   1414c:	mov	r3, #39	; 0x27
   14150:	strb	r3, [r9]
   14154:	mov	r3, #0
   14158:	str	r3, [sp, #40]	; 0x28
   1415c:	mov	r3, #1
   14160:	str	r3, [sp, #68]	; 0x44
   14164:	ldr	r3, [pc, #448]	; 1432c <__assert_fail@plt+0x31a0>
   14168:	mov	r8, #1
   1416c:	str	r3, [sp, #72]	; 0x48
   14170:	b	13354 <__assert_fail@plt+0x21c8>
   14174:	ldr	r3, [sp, #40]	; 0x28
   14178:	mov	sl, r9
   1417c:	str	r3, [sp, #56]	; 0x38
   14180:	mov	r9, fp
   14184:	ldr	r2, [sp, #64]	; 0x40
   14188:	b	140bc <__assert_fail@plt+0x2f30>
   1418c:	str	r2, [sp, #36]	; 0x24
   14190:	b	135a4 <__assert_fail@plt+0x2418>
   14194:	mov	r1, #0
   14198:	str	r3, [sp, #32]
   1419c:	mov	r4, #63	; 0x3f
   141a0:	b	13540 <__assert_fail@plt+0x23b4>
   141a4:	ldr	r3, [pc, #384]	; 1432c <__assert_fail@plt+0x31a0>
   141a8:	str	r3, [sp, #72]	; 0x48
   141ac:	mov	r3, #0
   141b0:	str	r3, [sp, #40]	; 0x28
   141b4:	mov	r3, #1
   141b8:	str	r3, [sp, #68]	; 0x44
   141bc:	mov	r8, r3
   141c0:	b	13354 <__assert_fail@plt+0x21c8>
   141c4:	bl	11174 <abort@plt>
   141c8:	cmp	fp, #0
   141cc:	beq	1422c <__assert_fail@plt+0x30a0>
   141d0:	mov	r2, #1
   141d4:	mov	r3, #34	; 0x22
   141d8:	strb	r3, [r9]
   141dc:	mov	r8, r2
   141e0:	mov	r3, r2
   141e4:	str	r2, [sp, #68]	; 0x44
   141e8:	str	r3, [sp, #56]	; 0x38
   141ec:	ldr	r3, [pc, #316]	; 14330 <__assert_fail@plt+0x31a4>
   141f0:	ldr	r1, [sp, #56]	; 0x38
   141f4:	str	r3, [sp, #72]	; 0x48
   141f8:	ldr	r2, [sp, #176]	; 0xb0
   141fc:	ldr	ip, [sp, #40]	; 0x28
   14200:	ldr	lr, [sp, #176]	; 0xb0
   14204:	b	13038 <__assert_fail@plt+0x1eac>
   14208:	ldr	r0, [sp, #44]	; 0x2c
   1420c:	bl	11078 <strlen@plt>
   14210:	str	r0, [sp, #24]
   14214:	b	13f18 <__assert_fail@plt+0x2d8c>
   14218:	mov	r7, #0
   1421c:	ldr	r1, [sp, #52]	; 0x34
   14220:	str	r3, [sp, #32]
   14224:	mov	r4, #48	; 0x30
   14228:	b	13540 <__assert_fail@plt+0x23b4>
   1422c:	mov	r3, #1
   14230:	str	r3, [sp, #68]	; 0x44
   14234:	mov	r8, r3
   14238:	b	141e8 <__assert_fail@plt+0x305c>
   1423c:	mov	r3, #2
   14240:	mov	sl, r9
   14244:	str	r3, [sp, #176]	; 0xb0
   14248:	mov	r9, fp
   1424c:	ldr	r3, [sp, #56]	; 0x38
   14250:	b	140bc <__assert_fail@plt+0x2f30>
   14254:	ldr	r6, [sp, #48]	; 0x30
   14258:	b	13d08 <__assert_fail@plt+0x2b7c>
   1425c:	ldr	r0, [sp, #24]
   14260:	mov	ip, r6
   14264:	cmp	r0, ip
   14268:	mov	r1, r7
   1426c:	mov	r2, r4
   14270:	ldr	r7, [sp, #104]	; 0x68
   14274:	ldr	r4, [sp, #32]
   14278:	ldr	r6, [sp, #108]	; 0x6c
   1427c:	ldr	r8, [sp, #112]	; 0x70
   14280:	ldr	r5, [sp, #116]	; 0x74
   14284:	bls	142b4 <__assert_fail@plt+0x3128>
   14288:	ldrb	r3, [r2]
   1428c:	cmp	r3, #0
   14290:	bne	142a4 <__assert_fail@plt+0x3118>
   14294:	b	143c4 <__assert_fail@plt+0x3238>
   14298:	ldrb	r3, [r2, #1]!
   1429c:	cmp	r3, #0
   142a0:	beq	143c4 <__assert_fail@plt+0x3238>
   142a4:	add	r1, r1, #1
   142a8:	add	r3, sl, r1
   142ac:	cmp	r0, r3
   142b0:	bhi	14298 <__assert_fail@plt+0x310c>
   142b4:	mov	r2, #0
   142b8:	mov	r3, r7
   142bc:	str	r2, [sp, #32]
   142c0:	b	1408c <__assert_fail@plt+0x2f00>
   142c4:	mov	r1, r7
   142c8:	ldr	r7, [sp, #104]	; 0x68
   142cc:	mov	r2, #0
   142d0:	ldr	r4, [sp, #32]
   142d4:	ldr	r6, [sp, #108]	; 0x6c
   142d8:	ldr	r8, [sp, #112]	; 0x70
   142dc:	ldr	r5, [sp, #116]	; 0x74
   142e0:	mov	r3, r7
   142e4:	str	r2, [sp, #32]
   142e8:	b	1408c <__assert_fail@plt+0x2f00>
   142ec:	mov	r3, r5
   142f0:	eor	r3, r3, #1
   142f4:	ldr	r4, [sp, #32]
   142f8:	mov	r1, r7
   142fc:	str	r5, [sp, #32]
   14300:	ldr	r7, [sp, #104]	; 0x68
   14304:	ldr	r6, [sp, #108]	; 0x6c
   14308:	ldr	r8, [sp, #112]	; 0x70
   1430c:	ldr	r5, [sp, #116]	; 0x74
   14310:	uxtb	r3, r3
   14314:	b	1408c <__assert_fail@plt+0x2f00>
   14318:	mov	sl, r9
   1431c:	str	r3, [sp, #56]	; 0x38
   14320:	mov	r9, fp
   14324:	ldr	r2, [sp, #64]	; 0x40
   14328:	b	140bc <__assert_fail@plt+0x2f30>
   1432c:	andeq	r9, r1, ip, lsl #14
   14330:	andeq	r9, r1, r8, lsl #14
   14334:	andeq	r9, r1, r0, lsl r7
   14338:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1433c:	ldr	r2, [sp, #44]	; 0x2c
   14340:	ldrb	r1, [r2, r3]
   14344:	sub	r2, r1, #33	; 0x21
   14348:	uxtb	r2, r2
   1434c:	cmp	r2, #29
   14350:	bhi	143d0 <__assert_fail@plt+0x3244>
   14354:	ldr	r0, [pc, #-36]	; 14338 <__assert_fail@plt+0x31ac>
   14358:	mov	ip, #1
   1435c:	ands	r2, r0, ip, lsl r2
   14360:	beq	143f0 <__assert_fail@plt+0x3264>
   14364:	ldr	r2, [sp, #40]	; 0x28
   14368:	cmp	r2, #0
   1436c:	bne	144e4 <__assert_fail@plt+0x3358>
   14370:	add	r2, r8, #1
   14374:	cmp	fp, r8
   14378:	strbhi	r4, [r9, r8]
   1437c:	cmp	fp, r2
   14380:	movhi	r0, #34	; 0x22
   14384:	strbhi	r0, [r9, r2]
   14388:	add	r2, r8, #2
   1438c:	cmp	fp, r2
   14390:	movhi	r0, #34	; 0x22
   14394:	strbhi	r0, [r9, r2]
   14398:	add	r2, r8, #3
   1439c:	cmp	fp, r2
   143a0:	mov	sl, r3
   143a4:	ldr	r3, [sp, #40]	; 0x28
   143a8:	movhi	r0, #63	; 0x3f
   143ac:	mov	r4, r1
   143b0:	strbhi	r0, [r9, r2]
   143b4:	add	r8, r8, #4
   143b8:	mov	r1, r3
   143bc:	str	r3, [sp, #32]
   143c0:	b	13540 <__assert_fail@plt+0x23b4>
   143c4:	str	r3, [sp, #32]
   143c8:	mov	r3, r7
   143cc:	b	1408c <__assert_fail@plt+0x2f00>
   143d0:	mov	r1, #0
   143d4:	str	r1, [sp, #32]
   143d8:	b	13540 <__assert_fail@plt+0x23b4>
   143dc:	mov	sl, r9
   143e0:	ldr	r3, [sp, #56]	; 0x38
   143e4:	mov	r9, fp
   143e8:	ldr	r2, [sp, #64]	; 0x40
   143ec:	b	140bc <__assert_fail@plt+0x2f30>
   143f0:	str	r2, [sp, #32]
   143f4:	mov	r1, #0
   143f8:	b	13540 <__assert_fail@plt+0x23b4>
   143fc:	ldr	r2, [sp, #76]	; 0x4c
   14400:	mov	sl, r9
   14404:	mov	r9, fp
   14408:	mov	fp, r8
   1440c:	ldr	r1, [sp, #72]	; 0x48
   14410:	cmp	r1, #0
   14414:	moveq	r3, #0
   14418:	andne	r3, r2, #1
   1441c:	cmp	r3, #0
   14420:	beq	1444c <__assert_fail@plt+0x32c0>
   14424:	ldrb	r3, [r1]
   14428:	cmp	r3, #0
   1442c:	beq	1444c <__assert_fail@plt+0x32c0>
   14430:	mov	r2, r1
   14434:	cmp	r9, fp
   14438:	strbhi	r3, [sl, fp]
   1443c:	ldrb	r3, [r2, #1]!
   14440:	add	fp, fp, #1
   14444:	cmp	r3, #0
   14448:	bne	14434 <__assert_fail@plt+0x32a8>
   1444c:	cmp	r9, fp
   14450:	movhi	r3, #0
   14454:	strbhi	r3, [sl, fp]
   14458:	b	14114 <__assert_fail@plt+0x2f88>
   1445c:	ldr	r3, [sp, #192]	; 0xc0
   14460:	mov	ip, #5
   14464:	str	r3, [sp, #16]
   14468:	ldr	r3, [sp, #188]	; 0xbc
   1446c:	ldr	r2, [sp, #44]	; 0x2c
   14470:	str	r3, [sp, #12]
   14474:	ldr	r3, [sp, #184]	; 0xb8
   14478:	ldr	r1, [sp, #84]	; 0x54
   1447c:	str	r3, [sp, #8]
   14480:	ldr	r3, [sp, #180]	; 0xb4
   14484:	mov	r0, r9
   14488:	str	r3, [sp, #4]
   1448c:	str	ip, [sp]
   14490:	ldr	r3, [sp, #24]
   14494:	bl	12f6c <__assert_fail@plt+0x1de0>
   14498:	mov	fp, r0
   1449c:	b	14114 <__assert_fail@plt+0x2f88>
   144a0:	mov	sl, r9
   144a4:	mov	r9, fp
   144a8:	mov	fp, r8
   144ac:	b	1440c <__assert_fail@plt+0x3280>
   144b0:	ldr	r1, [sp, #176]	; 0xb0
   144b4:	bl	12e4c <__assert_fail@plt+0x1cc0>
   144b8:	str	r0, [sp, #192]	; 0xc0
   144bc:	b	13428 <__assert_fail@plt+0x229c>
   144c0:	ldr	r1, [sp, #176]	; 0xb0
   144c4:	bl	12e4c <__assert_fail@plt+0x1cc0>
   144c8:	str	r0, [sp, #188]	; 0xbc
   144cc:	b	13408 <__assert_fail@plt+0x227c>
   144d0:	mov	sl, r9
   144d4:	mov	r2, r3
   144d8:	mov	r9, fp
   144dc:	mov	fp, r8
   144e0:	b	1440c <__assert_fail@plt+0x3280>
   144e4:	mov	sl, r9
   144e8:	mov	r9, fp
   144ec:	b	140d0 <__assert_fail@plt+0x2f44>
   144f0:	push	{r4, r5, r6, lr}
   144f4:	mov	r5, r0
   144f8:	bl	11090 <__errno_location@plt>
   144fc:	cmp	r5, #0
   14500:	mov	r1, #48	; 0x30
   14504:	mov	r4, r0
   14508:	ldr	r0, [pc, #16]	; 14520 <__assert_fail@plt+0x3394>
   1450c:	ldr	r6, [r4]
   14510:	movne	r0, r5
   14514:	bl	18068 <__assert_fail@plt+0x6edc>
   14518:	str	r6, [r4]
   1451c:	pop	{r4, r5, r6, pc}
   14520:	andeq	sl, r2, r0, lsl r2
   14524:	ldr	r3, [pc, #12]	; 14538 <__assert_fail@plt+0x33ac>
   14528:	cmp	r0, #0
   1452c:	moveq	r0, r3
   14530:	ldr	r0, [r0]
   14534:	bx	lr
   14538:	andeq	sl, r2, r0, lsl r2
   1453c:	ldr	r3, [pc, #12]	; 14550 <__assert_fail@plt+0x33c4>
   14540:	cmp	r0, #0
   14544:	moveq	r0, r3
   14548:	str	r1, [r0]
   1454c:	bx	lr
   14550:	andeq	sl, r2, r0, lsl r2
   14554:	ldr	r3, [pc, #52]	; 14590 <__assert_fail@plt+0x3404>
   14558:	cmp	r0, #0
   1455c:	moveq	r0, r3
   14560:	add	r3, r0, #8
   14564:	push	{lr}		; (str lr, [sp, #-4]!)
   14568:	lsr	lr, r1, #5
   1456c:	and	r1, r1, #31
   14570:	ldr	ip, [r3, lr, lsl #2]
   14574:	lsr	r0, ip, r1
   14578:	eor	r2, r2, r0
   1457c:	and	r2, r2, #1
   14580:	and	r0, r0, #1
   14584:	eor	r1, ip, r2, lsl r1
   14588:	str	r1, [r3, lr, lsl #2]
   1458c:	pop	{pc}		; (ldr pc, [sp], #4)
   14590:	andeq	sl, r2, r0, lsl r2
   14594:	ldr	r3, [pc, #16]	; 145ac <__assert_fail@plt+0x3420>
   14598:	cmp	r0, #0
   1459c:	movne	r3, r0
   145a0:	ldr	r0, [r3, #4]
   145a4:	str	r1, [r3, #4]
   145a8:	bx	lr
   145ac:	andeq	sl, r2, r0, lsl r2
   145b0:	ldr	r3, [pc, #44]	; 145e4 <__assert_fail@plt+0x3458>
   145b4:	cmp	r0, #0
   145b8:	moveq	r0, r3
   145bc:	mov	ip, #10
   145c0:	cmp	r2, #0
   145c4:	cmpne	r1, #0
   145c8:	str	ip, [r0]
   145cc:	beq	145dc <__assert_fail@plt+0x3450>
   145d0:	str	r1, [r0, #40]	; 0x28
   145d4:	str	r2, [r0, #44]	; 0x2c
   145d8:	bx	lr
   145dc:	push	{r4, lr}
   145e0:	bl	11174 <abort@plt>
   145e4:	andeq	sl, r2, r0, lsl r2
   145e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   145ec:	sub	sp, sp, #24
   145f0:	ldr	ip, [pc, #108]	; 14664 <__assert_fail@plt+0x34d8>
   145f4:	ldr	r4, [sp, #56]	; 0x38
   145f8:	mov	r9, r2
   145fc:	cmp	r4, #0
   14600:	moveq	r4, ip
   14604:	mov	sl, r3
   14608:	mov	r7, r0
   1460c:	mov	r8, r1
   14610:	bl	11090 <__errno_location@plt>
   14614:	ldr	r3, [r4, #44]	; 0x2c
   14618:	mov	r1, r8
   1461c:	ldr	r6, [r0]
   14620:	str	r3, [sp, #16]
   14624:	ldr	r2, [r4, #40]	; 0x28
   14628:	add	r3, r4, #8
   1462c:	str	r3, [sp, #8]
   14630:	str	r2, [sp, #12]
   14634:	ldr	r2, [r4, #4]
   14638:	mov	r5, r0
   1463c:	str	r2, [sp, #4]
   14640:	ldr	ip, [r4]
   14644:	mov	r3, sl
   14648:	mov	r2, r9
   1464c:	mov	r0, r7
   14650:	str	ip, [sp]
   14654:	bl	12f6c <__assert_fail@plt+0x1de0>
   14658:	str	r6, [r5]
   1465c:	add	sp, sp, #24
   14660:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14664:	andeq	sl, r2, r0, lsl r2
   14668:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1466c:	cmp	r2, #0
   14670:	sub	sp, sp, #36	; 0x24
   14674:	ldr	r4, [pc, #164]	; 14720 <__assert_fail@plt+0x3594>
   14678:	mov	r8, r1
   1467c:	movne	r4, r2
   14680:	mov	r7, r0
   14684:	bl	11090 <__errno_location@plt>
   14688:	ldr	r3, [r4, #44]	; 0x2c
   1468c:	ldr	r5, [r4, #4]
   14690:	add	r9, r4, #8
   14694:	orr	r5, r5, #1
   14698:	mov	r1, #0
   1469c:	mov	r2, r7
   146a0:	ldr	fp, [r0]
   146a4:	str	r3, [sp, #16]
   146a8:	ldr	r3, [r4, #40]	; 0x28
   146ac:	stmib	sp, {r5, r9}
   146b0:	str	r3, [sp, #12]
   146b4:	ldr	r3, [r4]
   146b8:	mov	r6, r0
   146bc:	str	r3, [sp]
   146c0:	mov	r0, r1
   146c4:	mov	r3, r8
   146c8:	bl	12f6c <__assert_fail@plt+0x1de0>
   146cc:	add	r1, r0, #1
   146d0:	mov	r0, r1
   146d4:	str	r1, [sp, #28]
   146d8:	bl	17b24 <__assert_fail@plt+0x6998>
   146dc:	ldr	r3, [r4, #44]	; 0x2c
   146e0:	ldr	r1, [sp, #28]
   146e4:	str	r3, [sp, #16]
   146e8:	ldr	r3, [r4, #40]	; 0x28
   146ec:	str	r5, [sp, #4]
   146f0:	str	r3, [sp, #12]
   146f4:	str	r9, [sp, #8]
   146f8:	ldr	ip, [r4]
   146fc:	mov	r3, r8
   14700:	mov	r2, r7
   14704:	str	ip, [sp]
   14708:	mov	sl, r0
   1470c:	bl	12f6c <__assert_fail@plt+0x1de0>
   14710:	mov	r0, sl
   14714:	str	fp, [r6]
   14718:	add	sp, sp, #36	; 0x24
   1471c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14720:	andeq	sl, r2, r0, lsl r2
   14724:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14728:	cmp	r3, #0
   1472c:	sub	sp, sp, #44	; 0x2c
   14730:	ldr	r4, [pc, #192]	; 147f8 <__assert_fail@plt+0x366c>
   14734:	mov	r6, r2
   14738:	movne	r4, r3
   1473c:	mov	r9, r1
   14740:	mov	r8, r0
   14744:	bl	11090 <__errno_location@plt>
   14748:	ldr	r3, [r4, #44]	; 0x2c
   1474c:	ldr	r5, [r4, #4]
   14750:	add	sl, r4, #8
   14754:	cmp	r6, #0
   14758:	orreq	r5, r5, #1
   1475c:	mov	r1, #0
   14760:	ldr	r2, [r0]
   14764:	str	r3, [sp, #16]
   14768:	ldr	r3, [r4, #40]	; 0x28
   1476c:	stmib	sp, {r5, sl}
   14770:	str	r3, [sp, #12]
   14774:	ldr	r3, [r4]
   14778:	mov	r7, r0
   1477c:	str	r2, [sp, #28]
   14780:	str	r3, [sp]
   14784:	mov	r2, r8
   14788:	mov	r3, r9
   1478c:	mov	r0, r1
   14790:	bl	12f6c <__assert_fail@plt+0x1de0>
   14794:	add	r1, r0, #1
   14798:	mov	fp, r0
   1479c:	mov	r0, r1
   147a0:	str	r1, [sp, #36]	; 0x24
   147a4:	bl	17b24 <__assert_fail@plt+0x6998>
   147a8:	ldr	r3, [r4, #44]	; 0x2c
   147ac:	mov	r2, r8
   147b0:	str	r3, [sp, #16]
   147b4:	ldr	r3, [r4, #40]	; 0x28
   147b8:	str	r5, [sp, #4]
   147bc:	str	r3, [sp, #12]
   147c0:	str	sl, [sp, #8]
   147c4:	ldr	ip, [r4]
   147c8:	ldr	r1, [sp, #36]	; 0x24
   147cc:	mov	r3, r9
   147d0:	str	ip, [sp]
   147d4:	str	r0, [sp, #32]
   147d8:	bl	12f6c <__assert_fail@plt+0x1de0>
   147dc:	ldr	r2, [sp, #28]
   147e0:	cmp	r6, #0
   147e4:	str	r2, [r7]
   147e8:	ldr	r0, [sp, #32]
   147ec:	strne	fp, [r6]
   147f0:	add	sp, sp, #44	; 0x2c
   147f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147f8:	andeq	sl, r2, r0, lsl r2
   147fc:	push	{r4, r5, r6, r7, r8, lr}
   14800:	ldr	r6, [pc, #116]	; 1487c <__assert_fail@plt+0x36f0>
   14804:	ldr	r3, [r6, #4]
   14808:	ldr	r7, [r6]
   1480c:	cmp	r3, #1
   14810:	movgt	r5, r7
   14814:	movgt	r4, #1
   14818:	ble	14838 <__assert_fail@plt+0x36ac>
   1481c:	ldr	r0, [r5, #12]
   14820:	bl	12c14 <__assert_fail@plt+0x1a88>
   14824:	ldr	r3, [r6, #4]
   14828:	add	r4, r4, #1
   1482c:	cmp	r3, r4
   14830:	add	r5, r5, #8
   14834:	bgt	1481c <__assert_fail@plt+0x3690>
   14838:	ldr	r0, [r7, #4]
   1483c:	ldr	r4, [pc, #60]	; 14880 <__assert_fail@plt+0x36f4>
   14840:	cmp	r0, r4
   14844:	beq	14858 <__assert_fail@plt+0x36cc>
   14848:	bl	12c14 <__assert_fail@plt+0x1a88>
   1484c:	mov	r3, #256	; 0x100
   14850:	str	r4, [r6, #12]
   14854:	str	r3, [r6, #8]
   14858:	ldr	r4, [pc, #36]	; 14884 <__assert_fail@plt+0x36f8>
   1485c:	cmp	r7, r4
   14860:	beq	14870 <__assert_fail@plt+0x36e4>
   14864:	mov	r0, r7
   14868:	bl	12c14 <__assert_fail@plt+0x1a88>
   1486c:	str	r4, [r6]
   14870:	mov	r3, #1
   14874:	str	r3, [r6, #4]
   14878:	pop	{r4, r5, r6, r7, r8, pc}
   1487c:	andeq	sl, r2, r8, lsr #2
   14880:	andeq	sl, r2, r0, asr #4
   14884:	andeq	sl, r2, r0, lsr r1
   14888:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1488c:	sub	sp, sp, #44	; 0x2c
   14890:	mov	r5, r0
   14894:	mov	sl, r1
   14898:	bl	11090 <__errno_location@plt>
   1489c:	ldr	r4, [pc, #400]	; 14a34 <__assert_fail@plt+0x38a8>
   148a0:	cmn	r5, #-2147483647	; 0x80000001
   148a4:	ldr	r6, [r4]
   148a8:	mov	r8, r0
   148ac:	movne	r0, #0
   148b0:	moveq	r0, #1
   148b4:	ldr	r3, [r8]
   148b8:	orrs	r0, r0, r5, lsr #31
   148bc:	str	r3, [sp, #24]
   148c0:	bne	14a30 <__assert_fail@plt+0x38a4>
   148c4:	ldr	r2, [r4, #4]
   148c8:	cmp	r5, r2
   148cc:	blt	1492c <__assert_fail@plt+0x37a0>
   148d0:	add	r7, r4, #8
   148d4:	cmp	r6, r7
   148d8:	str	r2, [sp, #36]	; 0x24
   148dc:	beq	14a00 <__assert_fail@plt+0x3874>
   148e0:	mov	r3, #8
   148e4:	sub	r2, r5, r2
   148e8:	mov	r0, r6
   148ec:	str	r3, [sp]
   148f0:	add	r2, r2, #1
   148f4:	mvn	r3, #-2147483648	; 0x80000000
   148f8:	add	r1, sp, #36	; 0x24
   148fc:	bl	17d40 <__assert_fail@plt+0x6bb4>
   14900:	mov	r6, r0
   14904:	str	r0, [r4]
   14908:	ldr	r0, [r4, #4]
   1490c:	ldr	r2, [sp, #36]	; 0x24
   14910:	mov	r1, #0
   14914:	sub	r2, r2, r0
   14918:	add	r0, r6, r0, lsl #3
   1491c:	lsl	r2, r2, #3
   14920:	bl	110b4 <memset@plt>
   14924:	ldr	r3, [sp, #36]	; 0x24
   14928:	str	r3, [r4, #4]
   1492c:	ldr	r4, [pc, #260]	; 14a38 <__assert_fail@plt+0x38ac>
   14930:	add	fp, r6, r5, lsl #3
   14934:	ldr	r9, [r6, r5, lsl #3]
   14938:	ldr	r0, [r4, #4]
   1493c:	ldr	r3, [r4]
   14940:	ldr	r7, [fp, #4]
   14944:	ldr	r1, [r4, #44]	; 0x2c
   14948:	ldr	r2, [r4, #40]	; 0x28
   1494c:	orr	r0, r0, #1
   14950:	str	r3, [sp]
   14954:	add	r3, r4, #8
   14958:	str	r0, [sp, #28]
   1495c:	str	r0, [sp, #4]
   14960:	str	r1, [sp, #16]
   14964:	str	r2, [sp, #12]
   14968:	str	r3, [sp, #8]
   1496c:	mov	r0, r7
   14970:	mov	r1, r9
   14974:	mvn	r3, #0
   14978:	mov	r2, sl
   1497c:	bl	12f6c <__assert_fail@plt+0x1de0>
   14980:	cmp	r9, r0
   14984:	bhi	149ec <__assert_fail@plt+0x3860>
   14988:	add	r3, r4, #48	; 0x30
   1498c:	add	r9, r0, #1
   14990:	cmp	r7, r3
   14994:	str	r9, [r6, r5, lsl #3]
   14998:	beq	149a4 <__assert_fail@plt+0x3818>
   1499c:	mov	r0, r7
   149a0:	bl	12c14 <__assert_fail@plt+0x1a88>
   149a4:	mov	r0, r9
   149a8:	bl	17b24 <__assert_fail@plt+0x6998>
   149ac:	ldr	ip, [r4, #44]	; 0x2c
   149b0:	ldr	r3, [r4]
   149b4:	ldr	lr, [r4, #40]	; 0x28
   149b8:	ldr	r4, [pc, #124]	; 14a3c <__assert_fail@plt+0x38b0>
   149bc:	mov	r2, sl
   149c0:	mov	r1, r9
   149c4:	str	r0, [fp, #4]
   149c8:	str	r4, [sp, #8]
   149cc:	ldr	r4, [sp, #28]
   149d0:	str	r3, [sp]
   149d4:	str	r4, [sp, #4]
   149d8:	str	ip, [sp, #16]
   149dc:	str	lr, [sp, #12]
   149e0:	mvn	r3, #0
   149e4:	mov	r7, r0
   149e8:	bl	12f6c <__assert_fail@plt+0x1de0>
   149ec:	ldr	r3, [sp, #24]
   149f0:	mov	r0, r7
   149f4:	str	r3, [r8]
   149f8:	add	sp, sp, #44	; 0x2c
   149fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a00:	mov	r3, #8
   14a04:	sub	r2, r5, r2
   14a08:	str	r3, [sp]
   14a0c:	add	r1, sp, #36	; 0x24
   14a10:	add	r2, r2, #1
   14a14:	mvn	r3, #-2147483648	; 0x80000000
   14a18:	bl	17d40 <__assert_fail@plt+0x6bb4>
   14a1c:	mov	r6, r0
   14a20:	ldm	r7, {r0, r1}
   14a24:	str	r6, [r4]
   14a28:	stm	r6, {r0, r1}
   14a2c:	b	14908 <__assert_fail@plt+0x377c>
   14a30:	bl	11174 <abort@plt>
   14a34:	andeq	sl, r2, r8, lsr #2
   14a38:	andeq	sl, r2, r0, lsl r2
   14a3c:	andeq	sl, r2, r8, lsl r2
   14a40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a44:	sub	sp, sp, #52	; 0x34
   14a48:	mov	r5, r0
   14a4c:	mov	sl, r1
   14a50:	mov	fp, r2
   14a54:	bl	11090 <__errno_location@plt>
   14a58:	ldr	r4, [pc, #408]	; 14bf8 <__assert_fail@plt+0x3a6c>
   14a5c:	cmn	r5, #-2147483647	; 0x80000001
   14a60:	ldr	r6, [r4]
   14a64:	mov	r8, r0
   14a68:	movne	r0, #0
   14a6c:	moveq	r0, #1
   14a70:	ldr	r3, [r8]
   14a74:	orrs	r0, r0, r5, lsr #31
   14a78:	str	r3, [sp, #28]
   14a7c:	bne	14bf4 <__assert_fail@plt+0x3a68>
   14a80:	ldr	r2, [r4, #4]
   14a84:	cmp	r5, r2
   14a88:	blt	14ae8 <__assert_fail@plt+0x395c>
   14a8c:	add	r7, r4, #8
   14a90:	cmp	r6, r7
   14a94:	str	r2, [sp, #44]	; 0x2c
   14a98:	beq	14bc4 <__assert_fail@plt+0x3a38>
   14a9c:	mov	r3, #8
   14aa0:	sub	r2, r5, r2
   14aa4:	mov	r0, r6
   14aa8:	str	r3, [sp]
   14aac:	add	r2, r2, #1
   14ab0:	mvn	r3, #-2147483648	; 0x80000000
   14ab4:	add	r1, sp, #44	; 0x2c
   14ab8:	bl	17d40 <__assert_fail@plt+0x6bb4>
   14abc:	mov	r6, r0
   14ac0:	str	r0, [r4]
   14ac4:	ldr	r0, [r4, #4]
   14ac8:	ldr	r2, [sp, #44]	; 0x2c
   14acc:	mov	r1, #0
   14ad0:	sub	r2, r2, r0
   14ad4:	add	r0, r6, r0, lsl #3
   14ad8:	lsl	r2, r2, #3
   14adc:	bl	110b4 <memset@plt>
   14ae0:	ldr	r3, [sp, #44]	; 0x2c
   14ae4:	str	r3, [r4, #4]
   14ae8:	ldr	r4, [pc, #268]	; 14bfc <__assert_fail@plt+0x3a70>
   14aec:	add	r3, r6, r5, lsl #3
   14af0:	str	r3, [sp, #32]
   14af4:	ldr	r7, [r3, #4]
   14af8:	ldr	r0, [r4, #4]
   14afc:	ldr	r3, [r4]
   14b00:	ldr	r9, [r6, r5, lsl #3]
   14b04:	ldr	r1, [r4, #44]	; 0x2c
   14b08:	ldr	r2, [r4, #40]	; 0x28
   14b0c:	orr	r0, r0, #1
   14b10:	str	r3, [sp]
   14b14:	add	r3, r4, #8
   14b18:	str	r0, [sp, #36]	; 0x24
   14b1c:	str	r0, [sp, #4]
   14b20:	str	r1, [sp, #16]
   14b24:	str	r2, [sp, #12]
   14b28:	str	r3, [sp, #8]
   14b2c:	mov	r0, r7
   14b30:	mov	r1, r9
   14b34:	mov	r3, fp
   14b38:	mov	r2, sl
   14b3c:	bl	12f6c <__assert_fail@plt+0x1de0>
   14b40:	cmp	r9, r0
   14b44:	bhi	14bb0 <__assert_fail@plt+0x3a24>
   14b48:	add	r3, r4, #48	; 0x30
   14b4c:	add	r9, r0, #1
   14b50:	cmp	r7, r3
   14b54:	str	r9, [r6, r5, lsl #3]
   14b58:	beq	14b64 <__assert_fail@plt+0x39d8>
   14b5c:	mov	r0, r7
   14b60:	bl	12c14 <__assert_fail@plt+0x1a88>
   14b64:	mov	r0, r9
   14b68:	bl	17b24 <__assert_fail@plt+0x6998>
   14b6c:	ldr	ip, [sp, #32]
   14b70:	ldr	lr, [r4, #44]	; 0x2c
   14b74:	ldr	r5, [r4, #40]	; 0x28
   14b78:	mov	r3, fp
   14b7c:	mov	r2, sl
   14b80:	mov	r1, r9
   14b84:	str	r0, [ip, #4]
   14b88:	ldr	ip, [r4]
   14b8c:	ldr	r4, [pc, #108]	; 14c00 <__assert_fail@plt+0x3a74>
   14b90:	str	lr, [sp, #16]
   14b94:	str	r4, [sp, #8]
   14b98:	ldr	r4, [sp, #36]	; 0x24
   14b9c:	str	r5, [sp, #12]
   14ba0:	str	r4, [sp, #4]
   14ba4:	str	ip, [sp]
   14ba8:	mov	r7, r0
   14bac:	bl	12f6c <__assert_fail@plt+0x1de0>
   14bb0:	ldr	r3, [sp, #28]
   14bb4:	mov	r0, r7
   14bb8:	str	r3, [r8]
   14bbc:	add	sp, sp, #52	; 0x34
   14bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bc4:	mov	r3, #8
   14bc8:	sub	r2, r5, r2
   14bcc:	str	r3, [sp]
   14bd0:	add	r1, sp, #44	; 0x2c
   14bd4:	add	r2, r2, #1
   14bd8:	mvn	r3, #-2147483648	; 0x80000000
   14bdc:	bl	17d40 <__assert_fail@plt+0x6bb4>
   14be0:	mov	r6, r0
   14be4:	ldm	r7, {r0, r1}
   14be8:	str	r6, [r4]
   14bec:	stm	r6, {r0, r1}
   14bf0:	b	14ac4 <__assert_fail@plt+0x3938>
   14bf4:	bl	11174 <abort@plt>
   14bf8:	andeq	sl, r2, r8, lsr #2
   14bfc:	andeq	sl, r2, r0, lsl r2
   14c00:	andeq	sl, r2, r8, lsl r2
   14c04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c08:	sub	sp, sp, #44	; 0x2c
   14c0c:	mov	sl, r0
   14c10:	bl	11090 <__errno_location@plt>
   14c14:	ldr	r4, [pc, #352]	; 14d7c <__assert_fail@plt+0x3bf0>
   14c18:	ldr	r2, [r4, #4]
   14c1c:	ldr	r5, [r4]
   14c20:	cmp	r2, #0
   14c24:	ldr	r3, [r0]
   14c28:	mov	r8, r0
   14c2c:	str	r3, [sp, #28]
   14c30:	bgt	14c8c <__assert_fail@plt+0x3b00>
   14c34:	add	r6, r4, #8
   14c38:	cmp	r5, r6
   14c3c:	str	r2, [sp, #36]	; 0x24
   14c40:	beq	14d4c <__assert_fail@plt+0x3bc0>
   14c44:	mov	r3, #8
   14c48:	mov	r0, r5
   14c4c:	str	r3, [sp]
   14c50:	rsb	r2, r2, #1
   14c54:	mvn	r3, #-2147483648	; 0x80000000
   14c58:	add	r1, sp, #36	; 0x24
   14c5c:	bl	17d40 <__assert_fail@plt+0x6bb4>
   14c60:	mov	r5, r0
   14c64:	str	r0, [r4]
   14c68:	ldr	r0, [r4, #4]
   14c6c:	ldr	r2, [sp, #36]	; 0x24
   14c70:	mov	r1, #0
   14c74:	sub	r2, r2, r0
   14c78:	add	r0, r5, r0, lsl #3
   14c7c:	lsl	r2, r2, #3
   14c80:	bl	110b4 <memset@plt>
   14c84:	ldr	r3, [sp, #36]	; 0x24
   14c88:	str	r3, [r4, #4]
   14c8c:	ldr	r4, [pc, #236]	; 14d80 <__assert_fail@plt+0x3bf4>
   14c90:	ldr	r9, [r5]
   14c94:	ldr	r6, [r5, #4]
   14c98:	ldr	r7, [r4, #4]
   14c9c:	ldr	r1, [r4, #44]	; 0x2c
   14ca0:	ldr	r2, [r4, #40]	; 0x28
   14ca4:	ldr	r3, [r4]
   14ca8:	orr	r7, r7, #1
   14cac:	add	fp, r4, #8
   14cb0:	str	r1, [sp, #16]
   14cb4:	str	r2, [sp, #12]
   14cb8:	str	r3, [sp]
   14cbc:	str	r7, [sp, #4]
   14cc0:	str	fp, [sp, #8]
   14cc4:	mov	r1, r9
   14cc8:	mov	r0, r6
   14ccc:	mvn	r3, #0
   14cd0:	mov	r2, sl
   14cd4:	bl	12f6c <__assert_fail@plt+0x1de0>
   14cd8:	cmp	r9, r0
   14cdc:	bhi	14d38 <__assert_fail@plt+0x3bac>
   14ce0:	add	r3, r4, #48	; 0x30
   14ce4:	add	r9, r0, #1
   14ce8:	cmp	r6, r3
   14cec:	str	r9, [r5]
   14cf0:	beq	14cfc <__assert_fail@plt+0x3b70>
   14cf4:	mov	r0, r6
   14cf8:	bl	12c14 <__assert_fail@plt+0x1a88>
   14cfc:	mov	r0, r9
   14d00:	bl	17b24 <__assert_fail@plt+0x6998>
   14d04:	ldr	ip, [r4, #44]	; 0x2c
   14d08:	ldr	r3, [r4]
   14d0c:	ldr	lr, [r4, #40]	; 0x28
   14d10:	mov	r2, sl
   14d14:	mov	r1, r9
   14d18:	str	r0, [r5, #4]
   14d1c:	str	r3, [sp]
   14d20:	stmib	sp, {r7, fp}
   14d24:	str	ip, [sp, #16]
   14d28:	str	lr, [sp, #12]
   14d2c:	mvn	r3, #0
   14d30:	mov	r6, r0
   14d34:	bl	12f6c <__assert_fail@plt+0x1de0>
   14d38:	ldr	r3, [sp, #28]
   14d3c:	mov	r0, r6
   14d40:	str	r3, [r8]
   14d44:	add	sp, sp, #44	; 0x2c
   14d48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d4c:	mov	r3, #8
   14d50:	str	r3, [sp]
   14d54:	add	r1, sp, #36	; 0x24
   14d58:	rsb	r2, r2, #1
   14d5c:	mvn	r3, #-2147483648	; 0x80000000
   14d60:	mov	r0, #0
   14d64:	bl	17d40 <__assert_fail@plt+0x6bb4>
   14d68:	mov	r5, r0
   14d6c:	ldm	r6, {r0, r1}
   14d70:	str	r5, [r4]
   14d74:	stm	r5, {r0, r1}
   14d78:	b	14c68 <__assert_fail@plt+0x3adc>
   14d7c:	andeq	sl, r2, r8, lsr #2
   14d80:	andeq	sl, r2, r0, lsl r2
   14d84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d88:	sub	sp, sp, #44	; 0x2c
   14d8c:	mov	r9, r0
   14d90:	mov	sl, r1
   14d94:	bl	11090 <__errno_location@plt>
   14d98:	ldr	r4, [pc, #364]	; 14f0c <__assert_fail@plt+0x3d80>
   14d9c:	ldr	r2, [r4, #4]
   14da0:	ldr	r5, [r4]
   14da4:	cmp	r2, #0
   14da8:	ldr	r3, [r0]
   14dac:	mov	r7, r0
   14db0:	str	r3, [sp, #24]
   14db4:	bgt	14e10 <__assert_fail@plt+0x3c84>
   14db8:	add	r6, r4, #8
   14dbc:	cmp	r5, r6
   14dc0:	str	r2, [sp, #36]	; 0x24
   14dc4:	beq	14edc <__assert_fail@plt+0x3d50>
   14dc8:	mov	r3, #8
   14dcc:	mov	r0, r5
   14dd0:	str	r3, [sp]
   14dd4:	rsb	r2, r2, #1
   14dd8:	mvn	r3, #-2147483648	; 0x80000000
   14ddc:	add	r1, sp, #36	; 0x24
   14de0:	bl	17d40 <__assert_fail@plt+0x6bb4>
   14de4:	mov	r5, r0
   14de8:	str	r0, [r4]
   14dec:	ldr	r0, [r4, #4]
   14df0:	ldr	r2, [sp, #36]	; 0x24
   14df4:	mov	r1, #0
   14df8:	sub	r2, r2, r0
   14dfc:	add	r0, r5, r0, lsl #3
   14e00:	lsl	r2, r2, #3
   14e04:	bl	110b4 <memset@plt>
   14e08:	ldr	r3, [sp, #36]	; 0x24
   14e0c:	str	r3, [r4, #4]
   14e10:	ldr	r4, [pc, #248]	; 14f10 <__assert_fail@plt+0x3d84>
   14e14:	ldr	r8, [r5]
   14e18:	ldr	r6, [r5, #4]
   14e1c:	ldr	r0, [r4, #4]
   14e20:	ldr	r1, [r4, #44]	; 0x2c
   14e24:	ldr	r2, [r4, #40]	; 0x28
   14e28:	ldr	r3, [r4]
   14e2c:	orr	r0, r0, #1
   14e30:	add	fp, r4, #8
   14e34:	str	r0, [sp, #28]
   14e38:	str	r0, [sp, #4]
   14e3c:	str	r1, [sp, #16]
   14e40:	str	r2, [sp, #12]
   14e44:	str	r3, [sp]
   14e48:	str	fp, [sp, #8]
   14e4c:	mov	r1, r8
   14e50:	mov	r0, r6
   14e54:	mov	r3, sl
   14e58:	mov	r2, r9
   14e5c:	bl	12f6c <__assert_fail@plt+0x1de0>
   14e60:	cmp	r8, r0
   14e64:	bhi	14ec8 <__assert_fail@plt+0x3d3c>
   14e68:	add	r3, r4, #48	; 0x30
   14e6c:	add	r8, r0, #1
   14e70:	cmp	r6, r3
   14e74:	str	r8, [r5]
   14e78:	beq	14e84 <__assert_fail@plt+0x3cf8>
   14e7c:	mov	r0, r6
   14e80:	bl	12c14 <__assert_fail@plt+0x1a88>
   14e84:	mov	r0, r8
   14e88:	bl	17b24 <__assert_fail@plt+0x6998>
   14e8c:	ldr	lr, [r4, #44]	; 0x2c
   14e90:	ldr	ip, [r4]
   14e94:	mov	r3, sl
   14e98:	mov	r2, r9
   14e9c:	mov	r1, r8
   14ea0:	str	r0, [r5, #4]
   14ea4:	ldr	r5, [r4, #40]	; 0x28
   14ea8:	ldr	r4, [sp, #28]
   14eac:	str	fp, [sp, #8]
   14eb0:	str	r4, [sp, #4]
   14eb4:	str	lr, [sp, #16]
   14eb8:	str	r5, [sp, #12]
   14ebc:	str	ip, [sp]
   14ec0:	mov	r6, r0
   14ec4:	bl	12f6c <__assert_fail@plt+0x1de0>
   14ec8:	ldr	r3, [sp, #24]
   14ecc:	mov	r0, r6
   14ed0:	str	r3, [r7]
   14ed4:	add	sp, sp, #44	; 0x2c
   14ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14edc:	mov	r3, #8
   14ee0:	str	r3, [sp]
   14ee4:	add	r1, sp, #36	; 0x24
   14ee8:	rsb	r2, r2, #1
   14eec:	mvn	r3, #-2147483648	; 0x80000000
   14ef0:	mov	r0, #0
   14ef4:	bl	17d40 <__assert_fail@plt+0x6bb4>
   14ef8:	mov	r5, r0
   14efc:	ldm	r6, {r0, r1}
   14f00:	str	r5, [r4]
   14f04:	stm	r5, {r0, r1}
   14f08:	b	14dec <__assert_fail@plt+0x3c60>
   14f0c:	andeq	sl, r2, r8, lsr #2
   14f10:	andeq	sl, r2, r0, lsl r2
   14f14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f18:	sub	sp, sp, #132	; 0x84
   14f1c:	mov	r5, r1
   14f20:	mov	r4, r0
   14f24:	mov	r9, r2
   14f28:	add	r0, sp, #80	; 0x50
   14f2c:	mov	r2, #48	; 0x30
   14f30:	mov	r1, #0
   14f34:	bl	110b4 <memset@plt>
   14f38:	cmp	r5, #10
   14f3c:	beq	150f4 <__assert_fail@plt+0x3f68>
   14f40:	add	lr, sp, #80	; 0x50
   14f44:	str	r5, [sp, #80]	; 0x50
   14f48:	ldm	lr!, {r0, r1, r2, r3}
   14f4c:	add	ip, sp, #32
   14f50:	ldr	r6, [pc, #416]	; 150f8 <__assert_fail@plt+0x3f6c>
   14f54:	stmia	ip!, {r0, r1, r2, r3}
   14f58:	ldm	lr!, {r0, r1, r2, r3}
   14f5c:	stmia	ip!, {r0, r1, r2, r3}
   14f60:	ldm	lr, {r0, r1, r2, r3}
   14f64:	stm	ip, {r0, r1, r2, r3}
   14f68:	bl	11090 <__errno_location@plt>
   14f6c:	cmn	r4, #-2147483647	; 0x80000001
   14f70:	ldr	r5, [r6]
   14f74:	mov	r7, r0
   14f78:	movne	r0, #0
   14f7c:	moveq	r0, #1
   14f80:	ldr	r3, [r7]
   14f84:	orrs	r0, r0, r4, lsr #31
   14f88:	str	r3, [sp, #24]
   14f8c:	bne	150f4 <__assert_fail@plt+0x3f68>
   14f90:	ldr	r2, [r6, #4]
   14f94:	cmp	r4, r2
   14f98:	blt	14ff8 <__assert_fail@plt+0x3e6c>
   14f9c:	add	r8, r6, #8
   14fa0:	cmp	r5, r8
   14fa4:	str	r2, [sp, #80]	; 0x50
   14fa8:	beq	150c4 <__assert_fail@plt+0x3f38>
   14fac:	mov	r3, #8
   14fb0:	sub	r2, r4, r2
   14fb4:	mov	r0, r5
   14fb8:	str	r3, [sp]
   14fbc:	add	r2, r2, #1
   14fc0:	add	r1, sp, #80	; 0x50
   14fc4:	mvn	r3, #-2147483648	; 0x80000000
   14fc8:	bl	17d40 <__assert_fail@plt+0x6bb4>
   14fcc:	mov	r5, r0
   14fd0:	str	r0, [r6]
   14fd4:	ldr	r0, [r6, #4]
   14fd8:	ldr	r2, [sp, #80]	; 0x50
   14fdc:	mov	r1, #0
   14fe0:	sub	r2, r2, r0
   14fe4:	add	r0, r5, r0, lsl #3
   14fe8:	lsl	r2, r2, #3
   14fec:	bl	110b4 <memset@plt>
   14ff0:	ldr	r3, [sp, #80]	; 0x50
   14ff4:	str	r3, [r6, #4]
   14ff8:	add	fp, r5, r4, lsl #3
   14ffc:	ldr	r1, [sp, #36]	; 0x24
   15000:	ldr	r8, [r5, r4, lsl #3]
   15004:	ldr	r6, [fp, #4]
   15008:	ldr	r2, [sp, #72]	; 0x48
   1500c:	ldr	r3, [sp, #32]
   15010:	ldr	ip, [sp, #76]	; 0x4c
   15014:	orr	r1, r1, #1
   15018:	add	sl, sp, #40	; 0x28
   1501c:	str	r1, [sp, #28]
   15020:	str	r1, [sp, #4]
   15024:	str	r2, [sp, #12]
   15028:	str	r3, [sp]
   1502c:	mov	r0, r6
   15030:	mov	r1, r8
   15034:	str	ip, [sp, #16]
   15038:	str	sl, [sp, #8]
   1503c:	mvn	r3, #0
   15040:	mov	r2, r9
   15044:	bl	12f6c <__assert_fail@plt+0x1de0>
   15048:	cmp	r8, r0
   1504c:	bhi	150b0 <__assert_fail@plt+0x3f24>
   15050:	ldr	r3, [pc, #164]	; 150fc <__assert_fail@plt+0x3f70>
   15054:	add	r8, r0, #1
   15058:	cmp	r6, r3
   1505c:	str	r8, [r5, r4, lsl #3]
   15060:	beq	1506c <__assert_fail@plt+0x3ee0>
   15064:	mov	r0, r6
   15068:	bl	12c14 <__assert_fail@plt+0x1a88>
   1506c:	mov	r0, r8
   15070:	bl	17b24 <__assert_fail@plt+0x6998>
   15074:	ldr	lr, [sp, #76]	; 0x4c
   15078:	ldr	r3, [sp, #32]
   1507c:	ldr	ip, [sp, #72]	; 0x48
   15080:	ldr	r4, [sp, #28]
   15084:	mov	r2, r9
   15088:	mov	r1, r8
   1508c:	str	r0, [fp, #4]
   15090:	str	r3, [sp]
   15094:	str	sl, [sp, #8]
   15098:	str	r4, [sp, #4]
   1509c:	str	lr, [sp, #16]
   150a0:	str	ip, [sp, #12]
   150a4:	mvn	r3, #0
   150a8:	mov	r6, r0
   150ac:	bl	12f6c <__assert_fail@plt+0x1de0>
   150b0:	ldr	r3, [sp, #24]
   150b4:	mov	r0, r6
   150b8:	str	r3, [r7]
   150bc:	add	sp, sp, #132	; 0x84
   150c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150c4:	mov	r3, #8
   150c8:	sub	r2, r4, r2
   150cc:	add	r1, sp, #80	; 0x50
   150d0:	str	r3, [sp]
   150d4:	add	r2, r2, #1
   150d8:	mvn	r3, #-2147483648	; 0x80000000
   150dc:	bl	17d40 <__assert_fail@plt+0x6bb4>
   150e0:	mov	r5, r0
   150e4:	ldm	r8, {r0, r1}
   150e8:	str	r5, [r6]
   150ec:	stm	r5, {r0, r1}
   150f0:	b	14fd4 <__assert_fail@plt+0x3e48>
   150f4:	bl	11174 <abort@plt>
   150f8:	andeq	sl, r2, r8, lsr #2
   150fc:	andeq	sl, r2, r0, asr #4
   15100:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15104:	sub	sp, sp, #132	; 0x84
   15108:	mov	r5, r1
   1510c:	mov	r4, r0
   15110:	mov	r9, r2
   15114:	add	r0, sp, #80	; 0x50
   15118:	mov	r2, #48	; 0x30
   1511c:	mov	r1, #0
   15120:	mov	sl, r3
   15124:	bl	110b4 <memset@plt>
   15128:	cmp	r5, #10
   1512c:	beq	152e8 <__assert_fail@plt+0x415c>
   15130:	add	lr, sp, #80	; 0x50
   15134:	str	r5, [sp, #80]	; 0x50
   15138:	ldm	lr!, {r0, r1, r2, r3}
   1513c:	add	ip, sp, #32
   15140:	ldr	r6, [pc, #420]	; 152ec <__assert_fail@plt+0x4160>
   15144:	stmia	ip!, {r0, r1, r2, r3}
   15148:	ldm	lr!, {r0, r1, r2, r3}
   1514c:	stmia	ip!, {r0, r1, r2, r3}
   15150:	ldm	lr, {r0, r1, r2, r3}
   15154:	stm	ip, {r0, r1, r2, r3}
   15158:	bl	11090 <__errno_location@plt>
   1515c:	cmn	r4, #-2147483647	; 0x80000001
   15160:	ldr	r5, [r6]
   15164:	mov	r7, r0
   15168:	movne	r0, #0
   1516c:	moveq	r0, #1
   15170:	ldr	r3, [r7]
   15174:	orrs	r0, r0, r4, lsr #31
   15178:	str	r3, [sp, #24]
   1517c:	bne	152e8 <__assert_fail@plt+0x415c>
   15180:	ldr	r2, [r6, #4]
   15184:	cmp	r4, r2
   15188:	blt	151e8 <__assert_fail@plt+0x405c>
   1518c:	add	r8, r6, #8
   15190:	cmp	r5, r8
   15194:	str	r2, [sp, #80]	; 0x50
   15198:	beq	152b8 <__assert_fail@plt+0x412c>
   1519c:	mov	r3, #8
   151a0:	sub	r2, r4, r2
   151a4:	mov	r0, r5
   151a8:	str	r3, [sp]
   151ac:	add	r2, r2, #1
   151b0:	add	r1, sp, #80	; 0x50
   151b4:	mvn	r3, #-2147483648	; 0x80000000
   151b8:	bl	17d40 <__assert_fail@plt+0x6bb4>
   151bc:	mov	r5, r0
   151c0:	str	r0, [r6]
   151c4:	ldr	r0, [r6, #4]
   151c8:	ldr	r2, [sp, #80]	; 0x50
   151cc:	mov	r1, #0
   151d0:	sub	r2, r2, r0
   151d4:	add	r0, r5, r0, lsl #3
   151d8:	lsl	r2, r2, #3
   151dc:	bl	110b4 <memset@plt>
   151e0:	ldr	r3, [sp, #80]	; 0x50
   151e4:	str	r3, [r6, #4]
   151e8:	add	fp, r5, r4, lsl #3
   151ec:	ldr	r3, [sp, #32]
   151f0:	ldr	r1, [sp, #36]	; 0x24
   151f4:	ldr	r8, [r5, r4, lsl #3]
   151f8:	ldr	r6, [fp, #4]
   151fc:	ldr	r2, [sp, #72]	; 0x48
   15200:	ldr	ip, [sp, #76]	; 0x4c
   15204:	orr	r1, r1, #1
   15208:	str	r3, [sp]
   1520c:	add	r3, sp, #40	; 0x28
   15210:	str	r1, [sp, #28]
   15214:	str	r1, [sp, #4]
   15218:	str	r2, [sp, #12]
   1521c:	str	r3, [sp, #8]
   15220:	mov	r0, r6
   15224:	mov	r1, r8
   15228:	str	ip, [sp, #16]
   1522c:	mov	r3, sl
   15230:	mov	r2, r9
   15234:	bl	12f6c <__assert_fail@plt+0x1de0>
   15238:	cmp	r8, r0
   1523c:	bhi	152a4 <__assert_fail@plt+0x4118>
   15240:	ldr	r3, [pc, #168]	; 152f0 <__assert_fail@plt+0x4164>
   15244:	add	r8, r0, #1
   15248:	cmp	r6, r3
   1524c:	str	r8, [r5, r4, lsl #3]
   15250:	beq	1525c <__assert_fail@plt+0x40d0>
   15254:	mov	r0, r6
   15258:	bl	12c14 <__assert_fail@plt+0x1a88>
   1525c:	mov	r0, r8
   15260:	bl	17b24 <__assert_fail@plt+0x6998>
   15264:	add	lr, sp, #40	; 0x28
   15268:	ldr	ip, [sp, #76]	; 0x4c
   1526c:	ldr	r4, [sp, #72]	; 0x48
   15270:	ldr	r5, [sp, #28]
   15274:	mov	r3, sl
   15278:	mov	r2, r9
   1527c:	mov	r1, r8
   15280:	str	r0, [fp, #4]
   15284:	str	lr, [sp, #8]
   15288:	ldr	lr, [sp, #32]
   1528c:	str	r5, [sp, #4]
   15290:	str	ip, [sp, #16]
   15294:	str	r4, [sp, #12]
   15298:	str	lr, [sp]
   1529c:	mov	r6, r0
   152a0:	bl	12f6c <__assert_fail@plt+0x1de0>
   152a4:	ldr	r3, [sp, #24]
   152a8:	mov	r0, r6
   152ac:	str	r3, [r7]
   152b0:	add	sp, sp, #132	; 0x84
   152b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152b8:	mov	r3, #8
   152bc:	sub	r2, r4, r2
   152c0:	add	r1, sp, #80	; 0x50
   152c4:	str	r3, [sp]
   152c8:	add	r2, r2, #1
   152cc:	mvn	r3, #-2147483648	; 0x80000000
   152d0:	bl	17d40 <__assert_fail@plt+0x6bb4>
   152d4:	mov	r5, r0
   152d8:	ldm	r8, {r0, r1}
   152dc:	str	r5, [r6]
   152e0:	stm	r5, {r0, r1}
   152e4:	b	151c4 <__assert_fail@plt+0x4038>
   152e8:	bl	11174 <abort@plt>
   152ec:	andeq	sl, r2, r8, lsr #2
   152f0:	andeq	sl, r2, r0, asr #4
   152f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152f8:	sub	sp, sp, #124	; 0x7c
   152fc:	mov	r4, r0
   15300:	mov	r9, r1
   15304:	add	r0, sp, #72	; 0x48
   15308:	mov	r2, #48	; 0x30
   1530c:	mov	r1, #0
   15310:	bl	110b4 <memset@plt>
   15314:	cmp	r4, #10
   15318:	beq	154a4 <__assert_fail@plt+0x4318>
   1531c:	add	lr, sp, #72	; 0x48
   15320:	str	r4, [sp, #72]	; 0x48
   15324:	ldm	lr!, {r0, r1, r2, r3}
   15328:	add	ip, sp, #24
   1532c:	ldr	r5, [pc, #372]	; 154a8 <__assert_fail@plt+0x431c>
   15330:	stmia	ip!, {r0, r1, r2, r3}
   15334:	ldm	lr!, {r0, r1, r2, r3}
   15338:	stmia	ip!, {r0, r1, r2, r3}
   1533c:	ldm	lr, {r0, r1, r2, r3}
   15340:	stm	ip, {r0, r1, r2, r3}
   15344:	bl	11090 <__errno_location@plt>
   15348:	ldr	r2, [r5, #4]
   1534c:	ldr	r4, [r5]
   15350:	cmp	r2, #0
   15354:	mov	r7, r0
   15358:	ldr	fp, [r0]
   1535c:	bgt	153b8 <__assert_fail@plt+0x422c>
   15360:	add	r6, r5, #8
   15364:	cmp	r4, r6
   15368:	str	r2, [sp, #72]	; 0x48
   1536c:	beq	15474 <__assert_fail@plt+0x42e8>
   15370:	mov	r3, #8
   15374:	mov	r0, r4
   15378:	str	r3, [sp]
   1537c:	rsb	r2, r2, #1
   15380:	add	r1, sp, #72	; 0x48
   15384:	mvn	r3, #-2147483648	; 0x80000000
   15388:	bl	17d40 <__assert_fail@plt+0x6bb4>
   1538c:	mov	r4, r0
   15390:	str	r0, [r5]
   15394:	ldr	r0, [r5, #4]
   15398:	ldr	r2, [sp, #72]	; 0x48
   1539c:	mov	r1, #0
   153a0:	sub	r2, r2, r0
   153a4:	add	r0, r4, r0, lsl #3
   153a8:	lsl	r2, r2, #3
   153ac:	bl	110b4 <memset@plt>
   153b0:	ldr	r3, [sp, #72]	; 0x48
   153b4:	str	r3, [r5, #4]
   153b8:	ldr	r6, [sp, #28]
   153bc:	ldr	r8, [r4]
   153c0:	ldr	r5, [r4, #4]
   153c4:	ldr	r2, [sp, #64]	; 0x40
   153c8:	ldr	r3, [sp, #24]
   153cc:	ldr	ip, [sp, #68]	; 0x44
   153d0:	orr	r6, r6, #1
   153d4:	add	sl, sp, #32
   153d8:	str	r2, [sp, #12]
   153dc:	str	r3, [sp]
   153e0:	str	r6, [sp, #4]
   153e4:	mov	r1, r8
   153e8:	mov	r0, r5
   153ec:	str	ip, [sp, #16]
   153f0:	str	sl, [sp, #8]
   153f4:	mvn	r3, #0
   153f8:	mov	r2, r9
   153fc:	bl	12f6c <__assert_fail@plt+0x1de0>
   15400:	cmp	r8, r0
   15404:	bhi	15464 <__assert_fail@plt+0x42d8>
   15408:	ldr	r3, [pc, #156]	; 154ac <__assert_fail@plt+0x4320>
   1540c:	add	r8, r0, #1
   15410:	cmp	r5, r3
   15414:	str	r8, [r4]
   15418:	beq	15424 <__assert_fail@plt+0x4298>
   1541c:	mov	r0, r5
   15420:	bl	12c14 <__assert_fail@plt+0x1a88>
   15424:	mov	r0, r8
   15428:	bl	17b24 <__assert_fail@plt+0x6998>
   1542c:	ldr	lr, [sp, #68]	; 0x44
   15430:	ldr	r3, [sp, #24]
   15434:	ldr	ip, [sp, #64]	; 0x40
   15438:	mov	r2, r9
   1543c:	mov	r1, r8
   15440:	str	r0, [r4, #4]
   15444:	str	r3, [sp]
   15448:	str	sl, [sp, #8]
   1544c:	str	r6, [sp, #4]
   15450:	str	lr, [sp, #16]
   15454:	str	ip, [sp, #12]
   15458:	mvn	r3, #0
   1545c:	mov	r5, r0
   15460:	bl	12f6c <__assert_fail@plt+0x1de0>
   15464:	mov	r0, r5
   15468:	str	fp, [r7]
   1546c:	add	sp, sp, #124	; 0x7c
   15470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15474:	mov	r3, #8
   15478:	add	r1, sp, #72	; 0x48
   1547c:	str	r3, [sp]
   15480:	rsb	r2, r2, #1
   15484:	mvn	r3, #-2147483648	; 0x80000000
   15488:	mov	r0, #0
   1548c:	bl	17d40 <__assert_fail@plt+0x6bb4>
   15490:	mov	r4, r0
   15494:	ldm	r6, {r0, r1}
   15498:	str	r4, [r5]
   1549c:	stm	r4, {r0, r1}
   154a0:	b	15394 <__assert_fail@plt+0x4208>
   154a4:	bl	11174 <abort@plt>
   154a8:	andeq	sl, r2, r8, lsr #2
   154ac:	andeq	sl, r2, r0, asr #4
   154b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154b4:	sub	sp, sp, #132	; 0x84
   154b8:	mov	r4, r0
   154bc:	mov	r9, r1
   154c0:	mov	sl, r2
   154c4:	add	r0, sp, #80	; 0x50
   154c8:	mov	r2, #48	; 0x30
   154cc:	mov	r1, #0
   154d0:	bl	110b4 <memset@plt>
   154d4:	cmp	r4, #10
   154d8:	beq	1566c <__assert_fail@plt+0x44e0>
   154dc:	add	lr, sp, #80	; 0x50
   154e0:	str	r4, [sp, #80]	; 0x50
   154e4:	ldm	lr!, {r0, r1, r2, r3}
   154e8:	add	ip, sp, #32
   154ec:	ldr	r5, [pc, #380]	; 15670 <__assert_fail@plt+0x44e4>
   154f0:	stmia	ip!, {r0, r1, r2, r3}
   154f4:	ldm	lr!, {r0, r1, r2, r3}
   154f8:	stmia	ip!, {r0, r1, r2, r3}
   154fc:	ldm	lr, {r0, r1, r2, r3}
   15500:	stm	ip, {r0, r1, r2, r3}
   15504:	bl	11090 <__errno_location@plt>
   15508:	ldr	r2, [r5, #4]
   1550c:	ldr	r4, [r5]
   15510:	cmp	r2, #0
   15514:	ldr	r3, [r0]
   15518:	mov	r7, r0
   1551c:	str	r3, [sp, #28]
   15520:	bgt	1557c <__assert_fail@plt+0x43f0>
   15524:	add	r6, r5, #8
   15528:	cmp	r4, r6
   1552c:	str	r2, [sp, #80]	; 0x50
   15530:	beq	1563c <__assert_fail@plt+0x44b0>
   15534:	mov	r3, #8
   15538:	mov	r0, r4
   1553c:	str	r3, [sp]
   15540:	rsb	r2, r2, #1
   15544:	add	r1, sp, #80	; 0x50
   15548:	mvn	r3, #-2147483648	; 0x80000000
   1554c:	bl	17d40 <__assert_fail@plt+0x6bb4>
   15550:	mov	r4, r0
   15554:	str	r0, [r5]
   15558:	ldr	r0, [r5, #4]
   1555c:	ldr	r2, [sp, #80]	; 0x50
   15560:	mov	r1, #0
   15564:	sub	r2, r2, r0
   15568:	add	r0, r4, r0, lsl #3
   1556c:	lsl	r2, r2, #3
   15570:	bl	110b4 <memset@plt>
   15574:	ldr	r3, [sp, #80]	; 0x50
   15578:	str	r3, [r5, #4]
   1557c:	ldr	r6, [sp, #36]	; 0x24
   15580:	ldr	r8, [r4]
   15584:	ldr	r5, [r4, #4]
   15588:	ldr	r2, [sp, #72]	; 0x48
   1558c:	ldr	r3, [sp, #32]
   15590:	ldr	ip, [sp, #76]	; 0x4c
   15594:	orr	r6, r6, #1
   15598:	add	fp, sp, #40	; 0x28
   1559c:	str	r2, [sp, #12]
   155a0:	str	r3, [sp]
   155a4:	str	r6, [sp, #4]
   155a8:	mov	r1, r8
   155ac:	mov	r0, r5
   155b0:	str	ip, [sp, #16]
   155b4:	str	fp, [sp, #8]
   155b8:	mov	r3, sl
   155bc:	mov	r2, r9
   155c0:	bl	12f6c <__assert_fail@plt+0x1de0>
   155c4:	cmp	r8, r0
   155c8:	bhi	15628 <__assert_fail@plt+0x449c>
   155cc:	ldr	r3, [pc, #160]	; 15674 <__assert_fail@plt+0x44e8>
   155d0:	add	r8, r0, #1
   155d4:	cmp	r5, r3
   155d8:	str	r8, [r4]
   155dc:	beq	155e8 <__assert_fail@plt+0x445c>
   155e0:	mov	r0, r5
   155e4:	bl	12c14 <__assert_fail@plt+0x1a88>
   155e8:	mov	r0, r8
   155ec:	bl	17b24 <__assert_fail@plt+0x6998>
   155f0:	ldr	ip, [sp, #76]	; 0x4c
   155f4:	ldr	lr, [sp, #32]
   155f8:	mov	r3, sl
   155fc:	mov	r2, r9
   15600:	mov	r1, r8
   15604:	str	r0, [r4, #4]
   15608:	ldr	r4, [sp, #72]	; 0x48
   1560c:	str	fp, [sp, #8]
   15610:	str	r6, [sp, #4]
   15614:	str	ip, [sp, #16]
   15618:	str	r4, [sp, #12]
   1561c:	str	lr, [sp]
   15620:	mov	r5, r0
   15624:	bl	12f6c <__assert_fail@plt+0x1de0>
   15628:	ldr	r3, [sp, #28]
   1562c:	mov	r0, r5
   15630:	str	r3, [r7]
   15634:	add	sp, sp, #132	; 0x84
   15638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1563c:	mov	r3, #8
   15640:	add	r1, sp, #80	; 0x50
   15644:	str	r3, [sp]
   15648:	rsb	r2, r2, #1
   1564c:	mvn	r3, #-2147483648	; 0x80000000
   15650:	mov	r0, #0
   15654:	bl	17d40 <__assert_fail@plt+0x6bb4>
   15658:	mov	r4, r0
   1565c:	ldm	r6, {r0, r1}
   15660:	str	r4, [r5]
   15664:	stm	r4, {r0, r1}
   15668:	b	15558 <__assert_fail@plt+0x43cc>
   1566c:	bl	11174 <abort@plt>
   15670:	andeq	sl, r2, r8, lsr #2
   15674:	andeq	sl, r2, r0, asr #4
   15678:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1567c:	mov	r4, r2
   15680:	ldr	lr, [pc, #432]	; 15838 <__assert_fail@plt+0x46ac>
   15684:	mov	sl, r0
   15688:	mov	fp, r1
   1568c:	ldm	lr!, {r0, r1, r2, r3}
   15690:	sub	sp, sp, #92	; 0x5c
   15694:	add	ip, sp, #40	; 0x28
   15698:	lsr	r7, r4, #5
   1569c:	stmia	ip!, {r0, r1, r2, r3}
   156a0:	add	r6, sp, #48	; 0x30
   156a4:	ldm	lr!, {r0, r1, r2, r3}
   156a8:	and	r4, r4, #31
   156ac:	ldr	r5, [pc, #392]	; 1583c <__assert_fail@plt+0x46b0>
   156b0:	stmia	ip!, {r0, r1, r2, r3}
   156b4:	ldm	lr, {r0, r1, r2, r3}
   156b8:	stm	ip, {r0, r1, r2, r3}
   156bc:	ldr	r2, [r6, r7, lsl #2]
   156c0:	lsr	r3, r2, r4
   156c4:	eor	r3, r3, #1
   156c8:	and	r3, r3, #1
   156cc:	eor	r4, r2, r3, lsl r4
   156d0:	str	r4, [r6, r7, lsl #2]
   156d4:	bl	11090 <__errno_location@plt>
   156d8:	ldr	r2, [r5, #4]
   156dc:	ldr	r4, [r5]
   156e0:	cmp	r2, #0
   156e4:	ldr	r3, [r0]
   156e8:	mov	r8, r0
   156ec:	str	r3, [sp, #28]
   156f0:	bgt	1574c <__assert_fail@plt+0x45c0>
   156f4:	add	r7, r5, #8
   156f8:	cmp	r4, r7
   156fc:	str	r2, [sp, #36]	; 0x24
   15700:	beq	15808 <__assert_fail@plt+0x467c>
   15704:	mov	r3, #8
   15708:	mov	r0, r4
   1570c:	str	r3, [sp]
   15710:	rsb	r2, r2, #1
   15714:	mvn	r3, #-2147483648	; 0x80000000
   15718:	add	r1, sp, #36	; 0x24
   1571c:	bl	17d40 <__assert_fail@plt+0x6bb4>
   15720:	mov	r4, r0
   15724:	str	r0, [r5]
   15728:	ldr	r0, [r5, #4]
   1572c:	ldr	r2, [sp, #36]	; 0x24
   15730:	mov	r1, #0
   15734:	sub	r2, r2, r0
   15738:	add	r0, r4, r0, lsl #3
   1573c:	lsl	r2, r2, #3
   15740:	bl	110b4 <memset@plt>
   15744:	ldr	r3, [sp, #36]	; 0x24
   15748:	str	r3, [r5, #4]
   1574c:	ldr	r7, [sp, #44]	; 0x2c
   15750:	ldr	r9, [r4]
   15754:	ldr	r5, [r4, #4]
   15758:	ldr	r2, [sp, #80]	; 0x50
   1575c:	ldr	r3, [sp, #40]	; 0x28
   15760:	ldr	ip, [sp, #84]	; 0x54
   15764:	orr	r7, r7, #1
   15768:	str	r2, [sp, #12]
   1576c:	str	r3, [sp]
   15770:	str	r7, [sp, #4]
   15774:	str	r6, [sp, #8]
   15778:	mov	r1, r9
   1577c:	mov	r0, r5
   15780:	str	ip, [sp, #16]
   15784:	mov	r3, fp
   15788:	mov	r2, sl
   1578c:	bl	12f6c <__assert_fail@plt+0x1de0>
   15790:	cmp	r9, r0
   15794:	bhi	157f4 <__assert_fail@plt+0x4668>
   15798:	ldr	r3, [pc, #160]	; 15840 <__assert_fail@plt+0x46b4>
   1579c:	add	r9, r0, #1
   157a0:	cmp	r5, r3
   157a4:	str	r9, [r4]
   157a8:	beq	157b4 <__assert_fail@plt+0x4628>
   157ac:	mov	r0, r5
   157b0:	bl	12c14 <__assert_fail@plt+0x1a88>
   157b4:	mov	r0, r9
   157b8:	bl	17b24 <__assert_fail@plt+0x6998>
   157bc:	ldr	ip, [sp, #84]	; 0x54
   157c0:	ldr	lr, [sp, #40]	; 0x28
   157c4:	mov	r3, fp
   157c8:	mov	r2, sl
   157cc:	mov	r1, r9
   157d0:	str	r0, [r4, #4]
   157d4:	ldr	r4, [sp, #80]	; 0x50
   157d8:	str	r6, [sp, #8]
   157dc:	str	r7, [sp, #4]
   157e0:	str	ip, [sp, #16]
   157e4:	str	r4, [sp, #12]
   157e8:	str	lr, [sp]
   157ec:	mov	r5, r0
   157f0:	bl	12f6c <__assert_fail@plt+0x1de0>
   157f4:	ldr	r3, [sp, #28]
   157f8:	mov	r0, r5
   157fc:	str	r3, [r8]
   15800:	add	sp, sp, #92	; 0x5c
   15804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15808:	mov	r3, #8
   1580c:	str	r3, [sp]
   15810:	add	r1, sp, #36	; 0x24
   15814:	rsb	r2, r2, #1
   15818:	mvn	r3, #-2147483648	; 0x80000000
   1581c:	mov	r0, #0
   15820:	bl	17d40 <__assert_fail@plt+0x6bb4>
   15824:	mov	r4, r0
   15828:	ldm	r7, {r0, r1}
   1582c:	str	r4, [r5]
   15830:	stm	r4, {r0, r1}
   15834:	b	15728 <__assert_fail@plt+0x459c>
   15838:	andeq	sl, r2, r0, lsl r2
   1583c:	andeq	sl, r2, r8, lsr #2
   15840:	andeq	sl, r2, r0, asr #4
   15844:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15848:	mov	r4, r1
   1584c:	ldr	lr, [pc, #420]	; 159f8 <__assert_fail@plt+0x486c>
   15850:	mov	r6, r0
   15854:	sub	sp, sp, #84	; 0x54
   15858:	ldm	lr!, {r0, r1, r2, r3}
   1585c:	add	ip, sp, #32
   15860:	lsr	r8, r4, #5
   15864:	add	r5, sp, #40	; 0x28
   15868:	stmia	ip!, {r0, r1, r2, r3}
   1586c:	and	r4, r4, #31
   15870:	ldm	lr!, {r0, r1, r2, r3}
   15874:	ldr	r7, [pc, #384]	; 159fc <__assert_fail@plt+0x4870>
   15878:	stmia	ip!, {r0, r1, r2, r3}
   1587c:	ldm	lr, {r0, r1, r2, r3}
   15880:	stm	ip, {r0, r1, r2, r3}
   15884:	ldr	r2, [r5, r8, lsl #2]
   15888:	lsr	r3, r2, r4
   1588c:	eor	r3, r3, #1
   15890:	and	r3, r3, #1
   15894:	eor	r4, r2, r3, lsl r4
   15898:	str	r4, [r5, r8, lsl #2]
   1589c:	bl	11090 <__errno_location@plt>
   158a0:	ldr	r2, [r7, #4]
   158a4:	ldr	r4, [r7]
   158a8:	cmp	r2, #0
   158ac:	mov	r9, r0
   158b0:	ldr	sl, [r0]
   158b4:	bgt	15910 <__assert_fail@plt+0x4784>
   158b8:	add	r8, r7, #8
   158bc:	cmp	r4, r8
   158c0:	str	r2, [sp, #28]
   158c4:	beq	159c8 <__assert_fail@plt+0x483c>
   158c8:	mov	r3, #8
   158cc:	mov	r0, r4
   158d0:	str	r3, [sp]
   158d4:	rsb	r2, r2, #1
   158d8:	mvn	r3, #-2147483648	; 0x80000000
   158dc:	add	r1, sp, #28
   158e0:	bl	17d40 <__assert_fail@plt+0x6bb4>
   158e4:	mov	r4, r0
   158e8:	str	r0, [r7]
   158ec:	ldr	r0, [r7, #4]
   158f0:	ldr	r2, [sp, #28]
   158f4:	mov	r1, #0
   158f8:	sub	r2, r2, r0
   158fc:	add	r0, r4, r0, lsl #3
   15900:	lsl	r2, r2, #3
   15904:	bl	110b4 <memset@plt>
   15908:	ldr	r3, [sp, #28]
   1590c:	str	r3, [r7, #4]
   15910:	ldr	r8, [sp, #36]	; 0x24
   15914:	ldr	fp, [r4]
   15918:	ldr	r7, [r4, #4]
   1591c:	ldr	r2, [sp, #72]	; 0x48
   15920:	ldr	r3, [sp, #32]
   15924:	ldr	ip, [sp, #76]	; 0x4c
   15928:	orr	r8, r8, #1
   1592c:	str	r2, [sp, #12]
   15930:	str	r3, [sp]
   15934:	str	r8, [sp, #4]
   15938:	str	r5, [sp, #8]
   1593c:	mov	r1, fp
   15940:	mov	r0, r7
   15944:	str	ip, [sp, #16]
   15948:	mvn	r3, #0
   1594c:	mov	r2, r6
   15950:	bl	12f6c <__assert_fail@plt+0x1de0>
   15954:	cmp	fp, r0
   15958:	bhi	159b8 <__assert_fail@plt+0x482c>
   1595c:	ldr	r3, [pc, #156]	; 15a00 <__assert_fail@plt+0x4874>
   15960:	add	fp, r0, #1
   15964:	cmp	r7, r3
   15968:	str	fp, [r4]
   1596c:	beq	15978 <__assert_fail@plt+0x47ec>
   15970:	mov	r0, r7
   15974:	bl	12c14 <__assert_fail@plt+0x1a88>
   15978:	mov	r0, fp
   1597c:	bl	17b24 <__assert_fail@plt+0x6998>
   15980:	ldr	lr, [sp, #76]	; 0x4c
   15984:	ldr	r3, [sp, #32]
   15988:	ldr	ip, [sp, #72]	; 0x48
   1598c:	mov	r2, r6
   15990:	mov	r1, fp
   15994:	str	r0, [r4, #4]
   15998:	str	r3, [sp]
   1599c:	str	r5, [sp, #8]
   159a0:	str	r8, [sp, #4]
   159a4:	str	lr, [sp, #16]
   159a8:	str	ip, [sp, #12]
   159ac:	mvn	r3, #0
   159b0:	mov	r7, r0
   159b4:	bl	12f6c <__assert_fail@plt+0x1de0>
   159b8:	mov	r0, r7
   159bc:	str	sl, [r9]
   159c0:	add	sp, sp, #84	; 0x54
   159c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159c8:	mov	r3, #8
   159cc:	str	r3, [sp]
   159d0:	add	r1, sp, #28
   159d4:	rsb	r2, r2, #1
   159d8:	mvn	r3, #-2147483648	; 0x80000000
   159dc:	mov	r0, #0
   159e0:	bl	17d40 <__assert_fail@plt+0x6bb4>
   159e4:	mov	r4, r0
   159e8:	ldm	r8, {r0, r1}
   159ec:	str	r4, [r7]
   159f0:	stm	r4, {r0, r1}
   159f4:	b	158ec <__assert_fail@plt+0x4760>
   159f8:	andeq	sl, r2, r0, lsl r2
   159fc:	andeq	sl, r2, r8, lsr #2
   15a00:	andeq	sl, r2, r0, asr #4
   15a04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a08:	mov	r6, r0
   15a0c:	ldr	lr, [pc, #404]	; 15ba8 <__assert_fail@plt+0x4a1c>
   15a10:	sub	sp, sp, #84	; 0x54
   15a14:	add	ip, sp, #32
   15a18:	ldm	lr!, {r0, r1, r2, r3}
   15a1c:	ldr	r5, [pc, #392]	; 15bac <__assert_fail@plt+0x4a20>
   15a20:	stmia	ip!, {r0, r1, r2, r3}
   15a24:	ldm	lr!, {r0, r1, r2, r3}
   15a28:	ldr	r4, [sp, #44]	; 0x2c
   15a2c:	stmia	ip!, {r0, r1, r2, r3}
   15a30:	ldm	lr, {r0, r1, r2, r3}
   15a34:	mvn	lr, r4
   15a38:	and	lr, lr, #67108864	; 0x4000000
   15a3c:	eor	lr, lr, r4
   15a40:	stm	ip, {r0, r1, r2, r3}
   15a44:	str	lr, [sp, #44]	; 0x2c
   15a48:	bl	11090 <__errno_location@plt>
   15a4c:	ldr	r2, [r5, #4]
   15a50:	ldr	r4, [r5]
   15a54:	cmp	r2, #0
   15a58:	mov	r8, r0
   15a5c:	ldr	sl, [r0]
   15a60:	bgt	15abc <__assert_fail@plt+0x4930>
   15a64:	add	r7, r5, #8
   15a68:	cmp	r4, r7
   15a6c:	str	r2, [sp, #28]
   15a70:	beq	15b78 <__assert_fail@plt+0x49ec>
   15a74:	mov	r3, #8
   15a78:	mov	r0, r4
   15a7c:	str	r3, [sp]
   15a80:	rsb	r2, r2, #1
   15a84:	mvn	r3, #-2147483648	; 0x80000000
   15a88:	add	r1, sp, #28
   15a8c:	bl	17d40 <__assert_fail@plt+0x6bb4>
   15a90:	mov	r4, r0
   15a94:	str	r0, [r5]
   15a98:	ldr	r0, [r5, #4]
   15a9c:	ldr	r2, [sp, #28]
   15aa0:	mov	r1, #0
   15aa4:	sub	r2, r2, r0
   15aa8:	add	r0, r4, r0, lsl #3
   15aac:	lsl	r2, r2, #3
   15ab0:	bl	110b4 <memset@plt>
   15ab4:	ldr	r3, [sp, #28]
   15ab8:	str	r3, [r5, #4]
   15abc:	ldr	r7, [sp, #36]	; 0x24
   15ac0:	ldr	r9, [r4]
   15ac4:	ldr	r5, [r4, #4]
   15ac8:	ldr	r2, [sp, #72]	; 0x48
   15acc:	ldr	r3, [sp, #32]
   15ad0:	ldr	ip, [sp, #76]	; 0x4c
   15ad4:	orr	r7, r7, #1
   15ad8:	add	fp, sp, #40	; 0x28
   15adc:	str	r2, [sp, #12]
   15ae0:	str	r3, [sp]
   15ae4:	str	r7, [sp, #4]
   15ae8:	mov	r1, r9
   15aec:	mov	r0, r5
   15af0:	str	ip, [sp, #16]
   15af4:	str	fp, [sp, #8]
   15af8:	mvn	r3, #0
   15afc:	mov	r2, r6
   15b00:	bl	12f6c <__assert_fail@plt+0x1de0>
   15b04:	cmp	r9, r0
   15b08:	bhi	15b68 <__assert_fail@plt+0x49dc>
   15b0c:	ldr	r3, [pc, #156]	; 15bb0 <__assert_fail@plt+0x4a24>
   15b10:	add	r9, r0, #1
   15b14:	cmp	r5, r3
   15b18:	str	r9, [r4]
   15b1c:	beq	15b28 <__assert_fail@plt+0x499c>
   15b20:	mov	r0, r5
   15b24:	bl	12c14 <__assert_fail@plt+0x1a88>
   15b28:	mov	r0, r9
   15b2c:	bl	17b24 <__assert_fail@plt+0x6998>
   15b30:	ldr	lr, [sp, #76]	; 0x4c
   15b34:	ldr	r3, [sp, #32]
   15b38:	ldr	ip, [sp, #72]	; 0x48
   15b3c:	mov	r2, r6
   15b40:	mov	r1, r9
   15b44:	str	r0, [r4, #4]
   15b48:	str	r3, [sp]
   15b4c:	str	fp, [sp, #8]
   15b50:	str	r7, [sp, #4]
   15b54:	str	lr, [sp, #16]
   15b58:	str	ip, [sp, #12]
   15b5c:	mvn	r3, #0
   15b60:	mov	r5, r0
   15b64:	bl	12f6c <__assert_fail@plt+0x1de0>
   15b68:	mov	r0, r5
   15b6c:	str	sl, [r8]
   15b70:	add	sp, sp, #84	; 0x54
   15b74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b78:	mov	r3, #8
   15b7c:	str	r3, [sp]
   15b80:	add	r1, sp, #28
   15b84:	rsb	r2, r2, #1
   15b88:	mvn	r3, #-2147483648	; 0x80000000
   15b8c:	mov	r0, #0
   15b90:	bl	17d40 <__assert_fail@plt+0x6bb4>
   15b94:	mov	r4, r0
   15b98:	ldm	r7, {r0, r1}
   15b9c:	str	r4, [r5]
   15ba0:	stm	r4, {r0, r1}
   15ba4:	b	15a98 <__assert_fail@plt+0x490c>
   15ba8:	andeq	sl, r2, r0, lsl r2
   15bac:	andeq	sl, r2, r8, lsr #2
   15bb0:	andeq	sl, r2, r0, asr #4
   15bb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bb8:	mov	r9, r0
   15bbc:	ldr	lr, [pc, #416]	; 15d64 <__assert_fail@plt+0x4bd8>
   15bc0:	mov	sl, r1
   15bc4:	sub	sp, sp, #92	; 0x5c
   15bc8:	ldm	lr!, {r0, r1, r2, r3}
   15bcc:	add	ip, sp, #40	; 0x28
   15bd0:	ldr	r5, [pc, #400]	; 15d68 <__assert_fail@plt+0x4bdc>
   15bd4:	stmia	ip!, {r0, r1, r2, r3}
   15bd8:	ldm	lr!, {r0, r1, r2, r3}
   15bdc:	ldr	r4, [sp, #52]	; 0x34
   15be0:	stmia	ip!, {r0, r1, r2, r3}
   15be4:	ldm	lr, {r0, r1, r2, r3}
   15be8:	mvn	lr, r4
   15bec:	and	lr, lr, #67108864	; 0x4000000
   15bf0:	eor	lr, lr, r4
   15bf4:	stm	ip, {r0, r1, r2, r3}
   15bf8:	str	lr, [sp, #52]	; 0x34
   15bfc:	bl	11090 <__errno_location@plt>
   15c00:	ldr	r2, [r5, #4]
   15c04:	ldr	r4, [r5]
   15c08:	cmp	r2, #0
   15c0c:	ldr	r3, [r0]
   15c10:	mov	r7, r0
   15c14:	str	r3, [sp, #28]
   15c18:	bgt	15c74 <__assert_fail@plt+0x4ae8>
   15c1c:	add	r6, r5, #8
   15c20:	cmp	r4, r6
   15c24:	str	r2, [sp, #36]	; 0x24
   15c28:	beq	15d34 <__assert_fail@plt+0x4ba8>
   15c2c:	mov	r3, #8
   15c30:	mov	r0, r4
   15c34:	str	r3, [sp]
   15c38:	rsb	r2, r2, #1
   15c3c:	mvn	r3, #-2147483648	; 0x80000000
   15c40:	add	r1, sp, #36	; 0x24
   15c44:	bl	17d40 <__assert_fail@plt+0x6bb4>
   15c48:	mov	r4, r0
   15c4c:	str	r0, [r5]
   15c50:	ldr	r0, [r5, #4]
   15c54:	ldr	r2, [sp, #36]	; 0x24
   15c58:	mov	r1, #0
   15c5c:	sub	r2, r2, r0
   15c60:	add	r0, r4, r0, lsl #3
   15c64:	lsl	r2, r2, #3
   15c68:	bl	110b4 <memset@plt>
   15c6c:	ldr	r3, [sp, #36]	; 0x24
   15c70:	str	r3, [r5, #4]
   15c74:	ldr	r6, [sp, #44]	; 0x2c
   15c78:	ldr	r8, [r4]
   15c7c:	ldr	r5, [r4, #4]
   15c80:	ldr	r2, [sp, #80]	; 0x50
   15c84:	ldr	r3, [sp, #40]	; 0x28
   15c88:	ldr	ip, [sp, #84]	; 0x54
   15c8c:	orr	r6, r6, #1
   15c90:	add	fp, sp, #48	; 0x30
   15c94:	str	r2, [sp, #12]
   15c98:	str	r3, [sp]
   15c9c:	str	r6, [sp, #4]
   15ca0:	mov	r1, r8
   15ca4:	mov	r0, r5
   15ca8:	str	ip, [sp, #16]
   15cac:	str	fp, [sp, #8]
   15cb0:	mov	r3, sl
   15cb4:	mov	r2, r9
   15cb8:	bl	12f6c <__assert_fail@plt+0x1de0>
   15cbc:	cmp	r8, r0
   15cc0:	bhi	15d20 <__assert_fail@plt+0x4b94>
   15cc4:	ldr	r3, [pc, #160]	; 15d6c <__assert_fail@plt+0x4be0>
   15cc8:	add	r8, r0, #1
   15ccc:	cmp	r5, r3
   15cd0:	str	r8, [r4]
   15cd4:	beq	15ce0 <__assert_fail@plt+0x4b54>
   15cd8:	mov	r0, r5
   15cdc:	bl	12c14 <__assert_fail@plt+0x1a88>
   15ce0:	mov	r0, r8
   15ce4:	bl	17b24 <__assert_fail@plt+0x6998>
   15ce8:	ldr	ip, [sp, #84]	; 0x54
   15cec:	ldr	lr, [sp, #40]	; 0x28
   15cf0:	mov	r3, sl
   15cf4:	mov	r2, r9
   15cf8:	mov	r1, r8
   15cfc:	str	r0, [r4, #4]
   15d00:	ldr	r4, [sp, #80]	; 0x50
   15d04:	str	fp, [sp, #8]
   15d08:	str	r6, [sp, #4]
   15d0c:	str	ip, [sp, #16]
   15d10:	str	r4, [sp, #12]
   15d14:	str	lr, [sp]
   15d18:	mov	r5, r0
   15d1c:	bl	12f6c <__assert_fail@plt+0x1de0>
   15d20:	ldr	r3, [sp, #28]
   15d24:	mov	r0, r5
   15d28:	str	r3, [r7]
   15d2c:	add	sp, sp, #92	; 0x5c
   15d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d34:	mov	r3, #8
   15d38:	str	r3, [sp]
   15d3c:	add	r1, sp, #36	; 0x24
   15d40:	rsb	r2, r2, #1
   15d44:	mvn	r3, #-2147483648	; 0x80000000
   15d48:	mov	r0, #0
   15d4c:	bl	17d40 <__assert_fail@plt+0x6bb4>
   15d50:	mov	r4, r0
   15d54:	ldm	r6, {r0, r1}
   15d58:	str	r4, [r5]
   15d5c:	stm	r4, {r0, r1}
   15d60:	b	15c50 <__assert_fail@plt+0x4ac4>
   15d64:	andeq	sl, r2, r0, lsl r2
   15d68:	andeq	sl, r2, r8, lsr #2
   15d6c:	andeq	sl, r2, r0, asr #4
   15d70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d74:	sub	sp, sp, #180	; 0xb4
   15d78:	mov	r6, r1
   15d7c:	mov	r4, r0
   15d80:	mov	r9, r2
   15d84:	add	r0, sp, #80	; 0x50
   15d88:	mov	r2, #48	; 0x30
   15d8c:	mov	r1, #0
   15d90:	bl	110b4 <memset@plt>
   15d94:	cmp	r6, #10
   15d98:	beq	15f78 <__assert_fail@plt+0x4dec>
   15d9c:	add	r5, sp, #80	; 0x50
   15da0:	str	r6, [sp, #80]	; 0x50
   15da4:	ldm	r5!, {r0, r1, r2, r3}
   15da8:	add	ip, sp, #128	; 0x80
   15dac:	mov	r7, ip
   15db0:	add	lr, sp, #32
   15db4:	stmia	ip!, {r0, r1, r2, r3}
   15db8:	mov	r8, #67108864	; 0x4000000
   15dbc:	ldm	r5!, {r0, r1, r2, r3}
   15dc0:	ldr	r6, [pc, #436]	; 15f7c <__assert_fail@plt+0x4df0>
   15dc4:	stmia	ip!, {r0, r1, r2, r3}
   15dc8:	ldm	r5, {r0, r1, r2, r3}
   15dcc:	stm	ip, {r0, r1, r2, r3}
   15dd0:	ldm	r7!, {r0, r1, r2, r3}
   15dd4:	stmia	lr!, {r0, r1, r2, r3}
   15dd8:	ldm	r7!, {r0, r1, r2, r3}
   15ddc:	str	r8, [sp, #44]	; 0x2c
   15de0:	stmia	lr!, {r0, r1, r2, r3}
   15de4:	ldm	ip, {r0, r1, r2, r3}
   15de8:	stm	lr, {r0, r1, r2, r3}
   15dec:	bl	11090 <__errno_location@plt>
   15df0:	cmn	r4, #-2147483647	; 0x80000001
   15df4:	ldr	r5, [r6]
   15df8:	mov	r7, r0
   15dfc:	movne	r0, #0
   15e00:	moveq	r0, #1
   15e04:	ldr	r3, [r7]
   15e08:	orrs	r0, r0, r4, lsr #31
   15e0c:	str	r3, [sp, #24]
   15e10:	bne	15f78 <__assert_fail@plt+0x4dec>
   15e14:	ldr	r2, [r6, #4]
   15e18:	cmp	r4, r2
   15e1c:	blt	15e7c <__assert_fail@plt+0x4cf0>
   15e20:	add	r8, r6, #8
   15e24:	cmp	r5, r8
   15e28:	str	r2, [sp, #80]	; 0x50
   15e2c:	beq	15f48 <__assert_fail@plt+0x4dbc>
   15e30:	mov	r3, #8
   15e34:	sub	r2, r4, r2
   15e38:	mov	r0, r5
   15e3c:	str	r3, [sp]
   15e40:	add	r2, r2, #1
   15e44:	add	r1, sp, #80	; 0x50
   15e48:	mvn	r3, #-2147483648	; 0x80000000
   15e4c:	bl	17d40 <__assert_fail@plt+0x6bb4>
   15e50:	mov	r5, r0
   15e54:	str	r0, [r6]
   15e58:	ldr	r0, [r6, #4]
   15e5c:	ldr	r2, [sp, #80]	; 0x50
   15e60:	mov	r1, #0
   15e64:	sub	r2, r2, r0
   15e68:	add	r0, r5, r0, lsl #3
   15e6c:	lsl	r2, r2, #3
   15e70:	bl	110b4 <memset@plt>
   15e74:	ldr	r3, [sp, #80]	; 0x50
   15e78:	str	r3, [r6, #4]
   15e7c:	add	fp, r5, r4, lsl #3
   15e80:	ldr	r1, [sp, #36]	; 0x24
   15e84:	ldr	r8, [r5, r4, lsl #3]
   15e88:	ldr	r6, [fp, #4]
   15e8c:	ldr	r2, [sp, #72]	; 0x48
   15e90:	ldr	r3, [sp, #32]
   15e94:	ldr	ip, [sp, #76]	; 0x4c
   15e98:	orr	r1, r1, #1
   15e9c:	add	sl, sp, #40	; 0x28
   15ea0:	str	r1, [sp, #28]
   15ea4:	str	r1, [sp, #4]
   15ea8:	str	r2, [sp, #12]
   15eac:	str	r3, [sp]
   15eb0:	mov	r0, r6
   15eb4:	mov	r1, r8
   15eb8:	str	ip, [sp, #16]
   15ebc:	str	sl, [sp, #8]
   15ec0:	mvn	r3, #0
   15ec4:	mov	r2, r9
   15ec8:	bl	12f6c <__assert_fail@plt+0x1de0>
   15ecc:	cmp	r8, r0
   15ed0:	bhi	15f34 <__assert_fail@plt+0x4da8>
   15ed4:	ldr	r3, [pc, #164]	; 15f80 <__assert_fail@plt+0x4df4>
   15ed8:	add	r8, r0, #1
   15edc:	cmp	r6, r3
   15ee0:	str	r8, [r5, r4, lsl #3]
   15ee4:	beq	15ef0 <__assert_fail@plt+0x4d64>
   15ee8:	mov	r0, r6
   15eec:	bl	12c14 <__assert_fail@plt+0x1a88>
   15ef0:	mov	r0, r8
   15ef4:	bl	17b24 <__assert_fail@plt+0x6998>
   15ef8:	ldr	lr, [sp, #76]	; 0x4c
   15efc:	ldr	r3, [sp, #32]
   15f00:	ldr	ip, [sp, #72]	; 0x48
   15f04:	ldr	r4, [sp, #28]
   15f08:	mov	r2, r9
   15f0c:	mov	r1, r8
   15f10:	str	r0, [fp, #4]
   15f14:	str	r3, [sp]
   15f18:	str	sl, [sp, #8]
   15f1c:	str	r4, [sp, #4]
   15f20:	str	lr, [sp, #16]
   15f24:	str	ip, [sp, #12]
   15f28:	mvn	r3, #0
   15f2c:	mov	r6, r0
   15f30:	bl	12f6c <__assert_fail@plt+0x1de0>
   15f34:	ldr	r3, [sp, #24]
   15f38:	mov	r0, r6
   15f3c:	str	r3, [r7]
   15f40:	add	sp, sp, #180	; 0xb4
   15f44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f48:	mov	r3, #8
   15f4c:	sub	r2, r4, r2
   15f50:	add	r1, sp, #80	; 0x50
   15f54:	str	r3, [sp]
   15f58:	add	r2, r2, #1
   15f5c:	mvn	r3, #-2147483648	; 0x80000000
   15f60:	bl	17d40 <__assert_fail@plt+0x6bb4>
   15f64:	mov	r5, r0
   15f68:	ldm	r8, {r0, r1}
   15f6c:	str	r5, [r6]
   15f70:	stm	r5, {r0, r1}
   15f74:	b	15e58 <__assert_fail@plt+0x4ccc>
   15f78:	bl	11174 <abort@plt>
   15f7c:	andeq	sl, r2, r8, lsr #2
   15f80:	andeq	sl, r2, r0, asr #4
   15f84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f88:	mov	r7, r1
   15f8c:	ldr	lr, [pc, #492]	; 16180 <__assert_fail@plt+0x4ff4>
   15f90:	mov	r8, r2
   15f94:	mov	r4, r0
   15f98:	mov	fp, r3
   15f9c:	ldm	lr!, {r0, r1, r2, r3}
   15fa0:	sub	sp, sp, #100	; 0x64
   15fa4:	add	ip, sp, #48	; 0x30
   15fa8:	mov	sl, #10
   15fac:	stmia	ip!, {r0, r1, r2, r3}
   15fb0:	cmp	r8, #0
   15fb4:	cmpne	r7, #0
   15fb8:	ldm	lr!, {r0, r1, r2, r3}
   15fbc:	str	sl, [sp, #48]	; 0x30
   15fc0:	stmia	ip!, {r0, r1, r2, r3}
   15fc4:	ldm	lr, {r0, r1, r2, r3}
   15fc8:	stm	ip, {r0, r1, r2, r3}
   15fcc:	beq	1617c <__assert_fail@plt+0x4ff0>
   15fd0:	str	r7, [sp, #88]	; 0x58
   15fd4:	str	r8, [sp, #92]	; 0x5c
   15fd8:	bl	11090 <__errno_location@plt>
   15fdc:	ldr	r6, [pc, #416]	; 16184 <__assert_fail@plt+0x4ff8>
   15fe0:	cmn	r4, #-2147483647	; 0x80000001
   15fe4:	ldr	r5, [r6]
   15fe8:	mov	r9, r0
   15fec:	movne	r0, #0
   15ff0:	moveq	r0, #1
   15ff4:	ldr	r3, [r9]
   15ff8:	orrs	r0, r0, r4, lsr #31
   15ffc:	str	r3, [sp, #28]
   16000:	bne	1617c <__assert_fail@plt+0x4ff0>
   16004:	ldr	r2, [r6, #4]
   16008:	cmp	r4, r2
   1600c:	movlt	r3, sl
   16010:	blt	1607c <__assert_fail@plt+0x4ef0>
   16014:	add	r7, r6, #8
   16018:	cmp	r5, r7
   1601c:	str	r2, [sp, #44]	; 0x2c
   16020:	beq	1614c <__assert_fail@plt+0x4fc0>
   16024:	mov	r3, #8
   16028:	sub	r2, r4, r2
   1602c:	mov	r0, r5
   16030:	str	r3, [sp]
   16034:	add	r2, r2, #1
   16038:	mvn	r3, #-2147483648	; 0x80000000
   1603c:	add	r1, sp, #44	; 0x2c
   16040:	bl	17d40 <__assert_fail@plt+0x6bb4>
   16044:	mov	r5, r0
   16048:	str	r0, [r6]
   1604c:	ldr	r0, [r6, #4]
   16050:	ldr	r2, [sp, #44]	; 0x2c
   16054:	mov	r1, #0
   16058:	sub	r2, r2, r0
   1605c:	add	r0, r5, r0, lsl #3
   16060:	lsl	r2, r2, #3
   16064:	bl	110b4 <memset@plt>
   16068:	ldr	r3, [sp, #48]	; 0x30
   1606c:	ldr	r7, [sp, #88]	; 0x58
   16070:	ldr	r8, [sp, #92]	; 0x5c
   16074:	ldr	r2, [sp, #44]	; 0x2c
   16078:	str	r2, [r6, #4]
   1607c:	add	r2, r5, r4, lsl #3
   16080:	mov	r1, r2
   16084:	str	r2, [sp, #32]
   16088:	ldr	r2, [sp, #52]	; 0x34
   1608c:	ldr	r6, [r1, #4]
   16090:	ldr	sl, [r5, r4, lsl #3]
   16094:	orr	r2, r2, #1
   16098:	str	r3, [sp]
   1609c:	add	r3, sp, #56	; 0x38
   160a0:	str	r2, [sp, #36]	; 0x24
   160a4:	str	r2, [sp, #4]
   160a8:	str	r3, [sp, #8]
   160ac:	mov	r0, r6
   160b0:	str	r8, [sp, #16]
   160b4:	str	r7, [sp, #12]
   160b8:	mov	r1, sl
   160bc:	mvn	r3, #0
   160c0:	mov	r2, fp
   160c4:	bl	12f6c <__assert_fail@plt+0x1de0>
   160c8:	cmp	sl, r0
   160cc:	bhi	16138 <__assert_fail@plt+0x4fac>
   160d0:	ldr	r3, [pc, #176]	; 16188 <__assert_fail@plt+0x4ffc>
   160d4:	add	r7, r0, #1
   160d8:	cmp	r6, r3
   160dc:	str	r7, [r5, r4, lsl #3]
   160e0:	beq	160ec <__assert_fail@plt+0x4f60>
   160e4:	mov	r0, r6
   160e8:	bl	12c14 <__assert_fail@plt+0x1a88>
   160ec:	mov	r0, r7
   160f0:	bl	17b24 <__assert_fail@plt+0x6998>
   160f4:	ldr	r3, [sp, #32]
   160f8:	ldr	lr, [sp, #92]	; 0x5c
   160fc:	ldr	ip, [sp, #88]	; 0x58
   16100:	ldr	r4, [sp, #36]	; 0x24
   16104:	mov	r2, fp
   16108:	mov	r1, r7
   1610c:	str	r0, [r3, #4]
   16110:	add	r3, sp, #56	; 0x38
   16114:	str	r3, [sp, #8]
   16118:	ldr	r3, [sp, #48]	; 0x30
   1611c:	str	r4, [sp, #4]
   16120:	str	r3, [sp]
   16124:	str	lr, [sp, #16]
   16128:	str	ip, [sp, #12]
   1612c:	mvn	r3, #0
   16130:	mov	r6, r0
   16134:	bl	12f6c <__assert_fail@plt+0x1de0>
   16138:	ldr	r3, [sp, #28]
   1613c:	mov	r0, r6
   16140:	str	r3, [r9]
   16144:	add	sp, sp, #100	; 0x64
   16148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1614c:	mov	r3, #8
   16150:	sub	r2, r4, r2
   16154:	str	r3, [sp]
   16158:	add	r1, sp, #44	; 0x2c
   1615c:	add	r2, r2, #1
   16160:	mvn	r3, #-2147483648	; 0x80000000
   16164:	bl	17d40 <__assert_fail@plt+0x6bb4>
   16168:	mov	r5, r0
   1616c:	ldm	r7, {r0, r1}
   16170:	str	r5, [r6]
   16174:	stm	r5, {r0, r1}
   16178:	b	1604c <__assert_fail@plt+0x4ec0>
   1617c:	bl	11174 <abort@plt>
   16180:	andeq	sl, r2, r0, lsl r2
   16184:	andeq	sl, r2, r8, lsr #2
   16188:	andeq	sl, r2, r0, asr #4
   1618c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16190:	mov	r7, r1
   16194:	ldr	lr, [pc, #492]	; 16388 <__assert_fail@plt+0x51fc>
   16198:	mov	r8, r2
   1619c:	mov	r4, r0
   161a0:	mov	fp, r3
   161a4:	ldm	lr!, {r0, r1, r2, r3}
   161a8:	sub	sp, sp, #100	; 0x64
   161ac:	add	ip, sp, #48	; 0x30
   161b0:	mov	sl, #10
   161b4:	stmia	ip!, {r0, r1, r2, r3}
   161b8:	cmp	r8, #0
   161bc:	cmpne	r7, #0
   161c0:	ldm	lr!, {r0, r1, r2, r3}
   161c4:	str	sl, [sp, #48]	; 0x30
   161c8:	stmia	ip!, {r0, r1, r2, r3}
   161cc:	ldm	lr, {r0, r1, r2, r3}
   161d0:	stm	ip, {r0, r1, r2, r3}
   161d4:	beq	16384 <__assert_fail@plt+0x51f8>
   161d8:	str	r7, [sp, #88]	; 0x58
   161dc:	str	r8, [sp, #92]	; 0x5c
   161e0:	bl	11090 <__errno_location@plt>
   161e4:	ldr	r6, [pc, #416]	; 1638c <__assert_fail@plt+0x5200>
   161e8:	cmn	r4, #-2147483647	; 0x80000001
   161ec:	ldr	r5, [r6]
   161f0:	mov	r9, r0
   161f4:	movne	r0, #0
   161f8:	moveq	r0, #1
   161fc:	ldr	r3, [r9]
   16200:	orrs	r0, r0, r4, lsr #31
   16204:	str	r3, [sp, #28]
   16208:	bne	16384 <__assert_fail@plt+0x51f8>
   1620c:	ldr	r2, [r6, #4]
   16210:	cmp	r4, r2
   16214:	movlt	r3, sl
   16218:	blt	16284 <__assert_fail@plt+0x50f8>
   1621c:	add	r7, r6, #8
   16220:	cmp	r5, r7
   16224:	str	r2, [sp, #44]	; 0x2c
   16228:	beq	16354 <__assert_fail@plt+0x51c8>
   1622c:	mov	r3, #8
   16230:	sub	r2, r4, r2
   16234:	mov	r0, r5
   16238:	str	r3, [sp]
   1623c:	add	r2, r2, #1
   16240:	mvn	r3, #-2147483648	; 0x80000000
   16244:	add	r1, sp, #44	; 0x2c
   16248:	bl	17d40 <__assert_fail@plt+0x6bb4>
   1624c:	mov	r5, r0
   16250:	str	r0, [r6]
   16254:	ldr	r0, [r6, #4]
   16258:	ldr	r2, [sp, #44]	; 0x2c
   1625c:	mov	r1, #0
   16260:	sub	r2, r2, r0
   16264:	add	r0, r5, r0, lsl #3
   16268:	lsl	r2, r2, #3
   1626c:	bl	110b4 <memset@plt>
   16270:	ldr	r3, [sp, #48]	; 0x30
   16274:	ldr	r7, [sp, #88]	; 0x58
   16278:	ldr	r8, [sp, #92]	; 0x5c
   1627c:	ldr	r2, [sp, #44]	; 0x2c
   16280:	str	r2, [r6, #4]
   16284:	add	r2, r5, r4, lsl #3
   16288:	mov	r1, r2
   1628c:	str	r2, [sp, #32]
   16290:	ldr	r2, [sp, #52]	; 0x34
   16294:	ldr	r6, [r1, #4]
   16298:	ldr	sl, [r5, r4, lsl #3]
   1629c:	orr	r2, r2, #1
   162a0:	str	r3, [sp]
   162a4:	add	r3, sp, #56	; 0x38
   162a8:	str	r2, [sp, #36]	; 0x24
   162ac:	str	r2, [sp, #4]
   162b0:	str	r3, [sp, #8]
   162b4:	mov	r0, r6
   162b8:	str	r8, [sp, #16]
   162bc:	str	r7, [sp, #12]
   162c0:	mov	r1, sl
   162c4:	ldr	r3, [sp, #136]	; 0x88
   162c8:	mov	r2, fp
   162cc:	bl	12f6c <__assert_fail@plt+0x1de0>
   162d0:	cmp	sl, r0
   162d4:	bhi	16340 <__assert_fail@plt+0x51b4>
   162d8:	ldr	r3, [pc, #176]	; 16390 <__assert_fail@plt+0x5204>
   162dc:	add	r7, r0, #1
   162e0:	cmp	r6, r3
   162e4:	str	r7, [r5, r4, lsl #3]
   162e8:	beq	162f4 <__assert_fail@plt+0x5168>
   162ec:	mov	r0, r6
   162f0:	bl	12c14 <__assert_fail@plt+0x1a88>
   162f4:	mov	r0, r7
   162f8:	bl	17b24 <__assert_fail@plt+0x6998>
   162fc:	ldr	r3, [sp, #32]
   16300:	ldr	lr, [sp, #92]	; 0x5c
   16304:	ldr	ip, [sp, #88]	; 0x58
   16308:	ldr	r4, [sp, #36]	; 0x24
   1630c:	mov	r2, fp
   16310:	mov	r1, r7
   16314:	str	r0, [r3, #4]
   16318:	add	r3, sp, #56	; 0x38
   1631c:	str	r3, [sp, #8]
   16320:	ldr	r3, [sp, #48]	; 0x30
   16324:	str	r4, [sp, #4]
   16328:	str	r3, [sp]
   1632c:	str	lr, [sp, #16]
   16330:	str	ip, [sp, #12]
   16334:	ldr	r3, [sp, #136]	; 0x88
   16338:	mov	r6, r0
   1633c:	bl	12f6c <__assert_fail@plt+0x1de0>
   16340:	ldr	r3, [sp, #28]
   16344:	mov	r0, r6
   16348:	str	r3, [r9]
   1634c:	add	sp, sp, #100	; 0x64
   16350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16354:	mov	r3, #8
   16358:	sub	r2, r4, r2
   1635c:	str	r3, [sp]
   16360:	add	r1, sp, #44	; 0x2c
   16364:	add	r2, r2, #1
   16368:	mvn	r3, #-2147483648	; 0x80000000
   1636c:	bl	17d40 <__assert_fail@plt+0x6bb4>
   16370:	mov	r5, r0
   16374:	ldm	r7, {r0, r1}
   16378:	str	r5, [r6]
   1637c:	stm	r5, {r0, r1}
   16380:	b	16254 <__assert_fail@plt+0x50c8>
   16384:	bl	11174 <abort@plt>
   16388:	andeq	sl, r2, r0, lsl r2
   1638c:	andeq	sl, r2, r8, lsr #2
   16390:	andeq	sl, r2, r0, asr #4
   16394:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16398:	mov	r5, r0
   1639c:	ldr	lr, [pc, #452]	; 16568 <__assert_fail@plt+0x53dc>
   163a0:	mov	r6, r1
   163a4:	mov	sl, r2
   163a8:	ldm	lr!, {r0, r1, r2, r3}
   163ac:	sub	sp, sp, #92	; 0x5c
   163b0:	add	ip, sp, #40	; 0x28
   163b4:	cmp	r6, #0
   163b8:	cmpne	r5, #0
   163bc:	stmia	ip!, {r0, r1, r2, r3}
   163c0:	mov	r9, #10
   163c4:	ldm	lr!, {r0, r1, r2, r3}
   163c8:	moveq	fp, #1
   163cc:	movne	fp, #0
   163d0:	str	r9, [sp, #40]	; 0x28
   163d4:	stmia	ip!, {r0, r1, r2, r3}
   163d8:	ldm	lr, {r0, r1, r2, r3}
   163dc:	stm	ip, {r0, r1, r2, r3}
   163e0:	beq	16564 <__assert_fail@plt+0x53d8>
   163e4:	str	r5, [sp, #80]	; 0x50
   163e8:	str	r6, [sp, #84]	; 0x54
   163ec:	bl	11090 <__errno_location@plt>
   163f0:	ldr	r7, [pc, #372]	; 1656c <__assert_fail@plt+0x53e0>
   163f4:	ldr	r2, [r7, #4]
   163f8:	ldr	r4, [r7]
   163fc:	cmp	r2, #0
   16400:	ldr	r3, [r0]
   16404:	mov	r8, r0
   16408:	str	r3, [sp, #24]
   1640c:	movgt	r3, r9
   16410:	bgt	16478 <__assert_fail@plt+0x52ec>
   16414:	add	r5, r7, #8
   16418:	cmp	r4, r5
   1641c:	str	r2, [sp, #36]	; 0x24
   16420:	beq	16534 <__assert_fail@plt+0x53a8>
   16424:	mov	r3, #8
   16428:	mov	r0, r4
   1642c:	str	r3, [sp]
   16430:	rsb	r2, r2, #1
   16434:	mvn	r3, #-2147483648	; 0x80000000
   16438:	add	r1, sp, #36	; 0x24
   1643c:	bl	17d40 <__assert_fail@plt+0x6bb4>
   16440:	mov	r4, r0
   16444:	str	r0, [r7]
   16448:	ldr	r0, [r7, #4]
   1644c:	ldr	r2, [sp, #36]	; 0x24
   16450:	mov	r1, #0
   16454:	sub	r2, r2, r0
   16458:	add	r0, r4, r0, lsl #3
   1645c:	lsl	r2, r2, #3
   16460:	bl	110b4 <memset@plt>
   16464:	ldr	r3, [sp, #40]	; 0x28
   16468:	ldr	r5, [sp, #80]	; 0x50
   1646c:	ldr	r6, [sp, #84]	; 0x54
   16470:	ldr	r2, [sp, #36]	; 0x24
   16474:	str	r2, [r7, #4]
   16478:	ldr	r2, [sp, #44]	; 0x2c
   1647c:	ldr	r9, [r4]
   16480:	ldr	r7, [r4, #4]
   16484:	orr	r2, r2, #1
   16488:	add	fp, sp, #48	; 0x30
   1648c:	str	r2, [sp, #28]
   16490:	str	r2, [sp, #4]
   16494:	str	r3, [sp]
   16498:	str	r6, [sp, #16]
   1649c:	str	r5, [sp, #12]
   164a0:	mov	r1, r9
   164a4:	mov	r0, r7
   164a8:	str	fp, [sp, #8]
   164ac:	mvn	r3, #0
   164b0:	mov	r2, sl
   164b4:	bl	12f6c <__assert_fail@plt+0x1de0>
   164b8:	cmp	r9, r0
   164bc:	bhi	16520 <__assert_fail@plt+0x5394>
   164c0:	ldr	r3, [pc, #168]	; 16570 <__assert_fail@plt+0x53e4>
   164c4:	add	r5, r0, #1
   164c8:	cmp	r7, r3
   164cc:	str	r5, [r4]
   164d0:	beq	164dc <__assert_fail@plt+0x5350>
   164d4:	mov	r0, r7
   164d8:	bl	12c14 <__assert_fail@plt+0x1a88>
   164dc:	mov	r0, r5
   164e0:	bl	17b24 <__assert_fail@plt+0x6998>
   164e4:	ldr	lr, [sp, #84]	; 0x54
   164e8:	ldr	r3, [sp, #40]	; 0x28
   164ec:	ldr	ip, [sp, #80]	; 0x50
   164f0:	mov	r2, sl
   164f4:	mov	r1, r5
   164f8:	str	r0, [r4, #4]
   164fc:	ldr	r4, [sp, #28]
   16500:	str	r3, [sp]
   16504:	str	fp, [sp, #8]
   16508:	str	r4, [sp, #4]
   1650c:	str	lr, [sp, #16]
   16510:	str	ip, [sp, #12]
   16514:	mvn	r3, #0
   16518:	mov	r7, r0
   1651c:	bl	12f6c <__assert_fail@plt+0x1de0>
   16520:	ldr	r3, [sp, #24]
   16524:	mov	r0, r7
   16528:	str	r3, [r8]
   1652c:	add	sp, sp, #92	; 0x5c
   16530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16534:	mov	r3, #8
   16538:	str	r3, [sp]
   1653c:	add	r1, sp, #36	; 0x24
   16540:	rsb	r2, r2, #1
   16544:	mov	r0, fp
   16548:	mvn	r3, #-2147483648	; 0x80000000
   1654c:	bl	17d40 <__assert_fail@plt+0x6bb4>
   16550:	mov	r4, r0
   16554:	ldm	r5, {r0, r1}
   16558:	str	r4, [r7]
   1655c:	stm	r4, {r0, r1}
   16560:	b	16448 <__assert_fail@plt+0x52bc>
   16564:	bl	11174 <abort@plt>
   16568:	andeq	sl, r2, r0, lsl r2
   1656c:	andeq	sl, r2, r8, lsr #2
   16570:	andeq	sl, r2, r0, asr #4
   16574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16578:	mov	r5, r0
   1657c:	ldr	lr, [pc, #464]	; 16754 <__assert_fail@plt+0x55c8>
   16580:	mov	r6, r1
   16584:	mov	sl, r2
   16588:	mov	fp, r3
   1658c:	ldm	lr!, {r0, r1, r2, r3}
   16590:	sub	sp, sp, #92	; 0x5c
   16594:	add	ip, sp, #40	; 0x28
   16598:	cmp	r6, #0
   1659c:	cmpne	r5, #0
   165a0:	stmia	ip!, {r0, r1, r2, r3}
   165a4:	moveq	r4, #1
   165a8:	ldm	lr!, {r0, r1, r2, r3}
   165ac:	movne	r4, #0
   165b0:	mov	r9, #10
   165b4:	str	r4, [sp, #28]
   165b8:	stmia	ip!, {r0, r1, r2, r3}
   165bc:	ldm	lr, {r0, r1, r2, r3}
   165c0:	str	r9, [sp, #40]	; 0x28
   165c4:	stm	ip, {r0, r1, r2, r3}
   165c8:	beq	16750 <__assert_fail@plt+0x55c4>
   165cc:	str	r5, [sp, #80]	; 0x50
   165d0:	str	r6, [sp, #84]	; 0x54
   165d4:	bl	11090 <__errno_location@plt>
   165d8:	ldr	r7, [pc, #376]	; 16758 <__assert_fail@plt+0x55cc>
   165dc:	ldr	r2, [r7, #4]
   165e0:	ldr	r4, [r7]
   165e4:	cmp	r2, #0
   165e8:	ldr	r3, [r0]
   165ec:	mov	r8, r0
   165f0:	str	r3, [sp, #24]
   165f4:	movgt	r3, r9
   165f8:	bgt	16660 <__assert_fail@plt+0x54d4>
   165fc:	add	r5, r7, #8
   16600:	cmp	r4, r5
   16604:	str	r2, [sp, #36]	; 0x24
   16608:	beq	16720 <__assert_fail@plt+0x5594>
   1660c:	mov	r3, #8
   16610:	mov	r0, r4
   16614:	str	r3, [sp]
   16618:	rsb	r2, r2, #1
   1661c:	mvn	r3, #-2147483648	; 0x80000000
   16620:	add	r1, sp, #36	; 0x24
   16624:	bl	17d40 <__assert_fail@plt+0x6bb4>
   16628:	mov	r4, r0
   1662c:	str	r0, [r7]
   16630:	ldr	r0, [r7, #4]
   16634:	ldr	r2, [sp, #36]	; 0x24
   16638:	mov	r1, #0
   1663c:	sub	r2, r2, r0
   16640:	add	r0, r4, r0, lsl #3
   16644:	lsl	r2, r2, #3
   16648:	bl	110b4 <memset@plt>
   1664c:	ldr	r3, [sp, #40]	; 0x28
   16650:	ldr	r5, [sp, #80]	; 0x50
   16654:	ldr	r6, [sp, #84]	; 0x54
   16658:	ldr	r2, [sp, #36]	; 0x24
   1665c:	str	r2, [r7, #4]
   16660:	ldr	r2, [sp, #44]	; 0x2c
   16664:	ldr	r9, [r4]
   16668:	ldr	r7, [r4, #4]
   1666c:	orr	r2, r2, #1
   16670:	str	r3, [sp]
   16674:	add	r3, sp, #48	; 0x30
   16678:	str	r2, [sp, #28]
   1667c:	str	r2, [sp, #4]
   16680:	str	r3, [sp, #8]
   16684:	str	r6, [sp, #16]
   16688:	str	r5, [sp, #12]
   1668c:	mov	r1, r9
   16690:	mov	r0, r7
   16694:	mov	r3, fp
   16698:	mov	r2, sl
   1669c:	bl	12f6c <__assert_fail@plt+0x1de0>
   166a0:	cmp	r9, r0
   166a4:	bhi	1670c <__assert_fail@plt+0x5580>
   166a8:	ldr	r3, [pc, #172]	; 1675c <__assert_fail@plt+0x55d0>
   166ac:	add	r5, r0, #1
   166b0:	cmp	r7, r3
   166b4:	str	r5, [r4]
   166b8:	beq	166c4 <__assert_fail@plt+0x5538>
   166bc:	mov	r0, r7
   166c0:	bl	12c14 <__assert_fail@plt+0x1a88>
   166c4:	mov	r0, r5
   166c8:	bl	17b24 <__assert_fail@plt+0x6998>
   166cc:	add	lr, sp, #48	; 0x30
   166d0:	ldr	ip, [sp, #84]	; 0x54
   166d4:	mov	r1, r5
   166d8:	ldr	r5, [sp, #28]
   166dc:	mov	r3, fp
   166e0:	mov	r2, sl
   166e4:	str	r0, [r4, #4]
   166e8:	ldr	r4, [sp, #80]	; 0x50
   166ec:	str	lr, [sp, #8]
   166f0:	ldr	lr, [sp, #40]	; 0x28
   166f4:	str	r5, [sp, #4]
   166f8:	str	ip, [sp, #16]
   166fc:	str	r4, [sp, #12]
   16700:	str	lr, [sp]
   16704:	mov	r7, r0
   16708:	bl	12f6c <__assert_fail@plt+0x1de0>
   1670c:	ldr	r3, [sp, #24]
   16710:	mov	r0, r7
   16714:	str	r3, [r8]
   16718:	add	sp, sp, #92	; 0x5c
   1671c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16720:	mov	r3, #8
   16724:	str	r3, [sp]
   16728:	add	r1, sp, #36	; 0x24
   1672c:	rsb	r2, r2, #1
   16730:	ldr	r0, [sp, #28]
   16734:	mvn	r3, #-2147483648	; 0x80000000
   16738:	bl	17d40 <__assert_fail@plt+0x6bb4>
   1673c:	mov	r4, r0
   16740:	ldm	r5, {r0, r1}
   16744:	str	r4, [r7]
   16748:	stm	r4, {r0, r1}
   1674c:	b	16630 <__assert_fail@plt+0x54a4>
   16750:	bl	11174 <abort@plt>
   16754:	andeq	sl, r2, r0, lsl r2
   16758:	andeq	sl, r2, r8, lsr #2
   1675c:	andeq	sl, r2, r0, asr #4
   16760:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16764:	sub	sp, sp, #52	; 0x34
   16768:	mov	r5, r0
   1676c:	mov	sl, r1
   16770:	mov	fp, r2
   16774:	bl	11090 <__errno_location@plt>
   16778:	ldr	r4, [pc, #404]	; 16914 <__assert_fail@plt+0x5788>
   1677c:	cmn	r5, #-2147483647	; 0x80000001
   16780:	ldr	r6, [r4]
   16784:	mov	r8, r0
   16788:	movne	r0, #0
   1678c:	moveq	r0, #1
   16790:	ldr	r3, [r8]
   16794:	orrs	r0, r0, r5, lsr #31
   16798:	str	r3, [sp, #28]
   1679c:	bne	16910 <__assert_fail@plt+0x5784>
   167a0:	ldr	r2, [r4, #4]
   167a4:	cmp	r5, r2
   167a8:	blt	16808 <__assert_fail@plt+0x567c>
   167ac:	add	r7, r4, #8
   167b0:	cmp	r6, r7
   167b4:	str	r2, [sp, #44]	; 0x2c
   167b8:	beq	168e0 <__assert_fail@plt+0x5754>
   167bc:	mov	r3, #8
   167c0:	sub	r2, r5, r2
   167c4:	mov	r0, r6
   167c8:	str	r3, [sp]
   167cc:	add	r2, r2, #1
   167d0:	mvn	r3, #-2147483648	; 0x80000000
   167d4:	add	r1, sp, #44	; 0x2c
   167d8:	bl	17d40 <__assert_fail@plt+0x6bb4>
   167dc:	mov	r6, r0
   167e0:	str	r0, [r4]
   167e4:	ldr	r0, [r4, #4]
   167e8:	ldr	r2, [sp, #44]	; 0x2c
   167ec:	mov	r1, #0
   167f0:	sub	r2, r2, r0
   167f4:	add	r0, r6, r0, lsl #3
   167f8:	lsl	r2, r2, #3
   167fc:	bl	110b4 <memset@plt>
   16800:	ldr	r3, [sp, #44]	; 0x2c
   16804:	str	r3, [r4, #4]
   16808:	ldr	r2, [r4, #56]	; 0x38
   1680c:	add	r3, r6, r5, lsl #3
   16810:	ldr	r1, [r4, #20]
   16814:	ldr	r7, [r3, #4]
   16818:	ldr	r9, [r6, r5, lsl #3]
   1681c:	ldr	ip, [r4, #60]	; 0x3c
   16820:	str	r3, [sp, #32]
   16824:	ldr	r3, [r4, #16]
   16828:	str	r2, [sp, #12]
   1682c:	ldr	r2, [pc, #228]	; 16918 <__assert_fail@plt+0x578c>
   16830:	orr	r1, r1, #1
   16834:	str	r1, [sp, #36]	; 0x24
   16838:	str	r1, [sp, #4]
   1683c:	str	r2, [sp, #8]
   16840:	str	r3, [sp]
   16844:	mov	r0, r7
   16848:	mov	r1, r9
   1684c:	str	ip, [sp, #16]
   16850:	mov	r3, fp
   16854:	mov	r2, sl
   16858:	bl	12f6c <__assert_fail@plt+0x1de0>
   1685c:	cmp	r9, r0
   16860:	bhi	168cc <__assert_fail@plt+0x5740>
   16864:	ldr	r3, [pc, #176]	; 1691c <__assert_fail@plt+0x5790>
   16868:	add	r9, r0, #1
   1686c:	cmp	r7, r3
   16870:	str	r9, [r6, r5, lsl #3]
   16874:	beq	16880 <__assert_fail@plt+0x56f4>
   16878:	mov	r0, r7
   1687c:	bl	12c14 <__assert_fail@plt+0x1a88>
   16880:	mov	r0, r9
   16884:	bl	17b24 <__assert_fail@plt+0x6998>
   16888:	ldr	ip, [sp, #32]
   1688c:	ldr	lr, [r4, #60]	; 0x3c
   16890:	ldr	r5, [r4, #56]	; 0x38
   16894:	mov	r3, fp
   16898:	mov	r2, sl
   1689c:	mov	r1, r9
   168a0:	str	r0, [ip, #4]
   168a4:	ldr	ip, [r4, #16]
   168a8:	ldr	r4, [pc, #104]	; 16918 <__assert_fail@plt+0x578c>
   168ac:	str	lr, [sp, #16]
   168b0:	str	r4, [sp, #8]
   168b4:	ldr	r4, [sp, #36]	; 0x24
   168b8:	str	r5, [sp, #12]
   168bc:	str	r4, [sp, #4]
   168c0:	str	ip, [sp]
   168c4:	mov	r7, r0
   168c8:	bl	12f6c <__assert_fail@plt+0x1de0>
   168cc:	ldr	r3, [sp, #28]
   168d0:	mov	r0, r7
   168d4:	str	r3, [r8]
   168d8:	add	sp, sp, #52	; 0x34
   168dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168e0:	mov	r3, #8
   168e4:	sub	r2, r5, r2
   168e8:	str	r3, [sp]
   168ec:	add	r1, sp, #44	; 0x2c
   168f0:	add	r2, r2, #1
   168f4:	mvn	r3, #-2147483648	; 0x80000000
   168f8:	bl	17d40 <__assert_fail@plt+0x6bb4>
   168fc:	mov	r6, r0
   16900:	ldm	r7, {r0, r1}
   16904:	str	r6, [r4]
   16908:	stm	r6, {r0, r1}
   1690c:	b	167e4 <__assert_fail@plt+0x5658>
   16910:	bl	11174 <abort@plt>
   16914:	andeq	sl, r2, r8, lsr #2
   16918:	andeq	sl, r2, r0, asr #2
   1691c:	andeq	sl, r2, r0, asr #4
   16920:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16924:	sub	sp, sp, #44	; 0x2c
   16928:	mov	r9, r0
   1692c:	mov	sl, r1
   16930:	bl	11090 <__errno_location@plt>
   16934:	ldr	r4, [pc, #360]	; 16aa4 <__assert_fail@plt+0x5918>
   16938:	ldr	r2, [r4, #4]
   1693c:	ldr	r5, [r4]
   16940:	cmp	r2, #0
   16944:	ldr	r3, [r0]
   16948:	mov	r7, r0
   1694c:	str	r3, [sp, #24]
   16950:	bgt	169ac <__assert_fail@plt+0x5820>
   16954:	add	r6, r4, #8
   16958:	cmp	r5, r6
   1695c:	str	r2, [sp, #36]	; 0x24
   16960:	beq	16a74 <__assert_fail@plt+0x58e8>
   16964:	mov	r3, #8
   16968:	mov	r0, r5
   1696c:	str	r3, [sp]
   16970:	rsb	r2, r2, #1
   16974:	mvn	r3, #-2147483648	; 0x80000000
   16978:	add	r1, sp, #36	; 0x24
   1697c:	bl	17d40 <__assert_fail@plt+0x6bb4>
   16980:	mov	r5, r0
   16984:	str	r0, [r4]
   16988:	ldr	r0, [r4, #4]
   1698c:	ldr	r2, [sp, #36]	; 0x24
   16990:	mov	r1, #0
   16994:	sub	r2, r2, r0
   16998:	add	r0, r5, r0, lsl #3
   1699c:	lsl	r2, r2, #3
   169a0:	bl	110b4 <memset@plt>
   169a4:	ldr	r3, [sp, #36]	; 0x24
   169a8:	str	r3, [r4, #4]
   169ac:	ldr	r1, [r4, #20]
   169b0:	ldr	r8, [r5]
   169b4:	ldr	r6, [r5, #4]
   169b8:	ldr	r2, [r4, #56]	; 0x38
   169bc:	ldr	r3, [r4, #16]
   169c0:	ldr	ip, [r4, #60]	; 0x3c
   169c4:	ldr	fp, [pc, #220]	; 16aa8 <__assert_fail@plt+0x591c>
   169c8:	orr	r1, r1, #1
   169cc:	str	r1, [sp, #28]
   169d0:	str	r1, [sp, #4]
   169d4:	str	r2, [sp, #12]
   169d8:	str	r3, [sp]
   169dc:	mov	r1, r8
   169e0:	mov	r0, r6
   169e4:	str	ip, [sp, #16]
   169e8:	str	fp, [sp, #8]
   169ec:	mov	r3, sl
   169f0:	mov	r2, r9
   169f4:	bl	12f6c <__assert_fail@plt+0x1de0>
   169f8:	cmp	r8, r0
   169fc:	bhi	16a60 <__assert_fail@plt+0x58d4>
   16a00:	ldr	r3, [pc, #164]	; 16aac <__assert_fail@plt+0x5920>
   16a04:	add	r8, r0, #1
   16a08:	cmp	r6, r3
   16a0c:	str	r8, [r5]
   16a10:	beq	16a1c <__assert_fail@plt+0x5890>
   16a14:	mov	r0, r6
   16a18:	bl	12c14 <__assert_fail@plt+0x1a88>
   16a1c:	mov	r0, r8
   16a20:	bl	17b24 <__assert_fail@plt+0x6998>
   16a24:	ldr	lr, [r4, #60]	; 0x3c
   16a28:	ldr	ip, [r4, #16]
   16a2c:	mov	r3, sl
   16a30:	mov	r2, r9
   16a34:	mov	r1, r8
   16a38:	str	r0, [r5, #4]
   16a3c:	ldr	r5, [r4, #56]	; 0x38
   16a40:	ldr	r4, [sp, #28]
   16a44:	str	fp, [sp, #8]
   16a48:	str	r4, [sp, #4]
   16a4c:	str	lr, [sp, #16]
   16a50:	str	r5, [sp, #12]
   16a54:	str	ip, [sp]
   16a58:	mov	r6, r0
   16a5c:	bl	12f6c <__assert_fail@plt+0x1de0>
   16a60:	ldr	r3, [sp, #24]
   16a64:	mov	r0, r6
   16a68:	str	r3, [r7]
   16a6c:	add	sp, sp, #44	; 0x2c
   16a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a74:	mov	r3, #8
   16a78:	str	r3, [sp]
   16a7c:	add	r1, sp, #36	; 0x24
   16a80:	rsb	r2, r2, #1
   16a84:	mvn	r3, #-2147483648	; 0x80000000
   16a88:	mov	r0, #0
   16a8c:	bl	17d40 <__assert_fail@plt+0x6bb4>
   16a90:	mov	r5, r0
   16a94:	ldm	r6, {r0, r1}
   16a98:	str	r5, [r4]
   16a9c:	stm	r5, {r0, r1}
   16aa0:	b	16988 <__assert_fail@plt+0x57fc>
   16aa4:	andeq	sl, r2, r8, lsr #2
   16aa8:	andeq	sl, r2, r0, asr #2
   16aac:	andeq	sl, r2, r0, asr #4
   16ab0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ab4:	sub	sp, sp, #44	; 0x2c
   16ab8:	mov	r5, r0
   16abc:	mov	sl, r1
   16ac0:	bl	11090 <__errno_location@plt>
   16ac4:	ldr	r4, [pc, #396]	; 16c58 <__assert_fail@plt+0x5acc>
   16ac8:	cmn	r5, #-2147483647	; 0x80000001
   16acc:	ldr	r6, [r4]
   16ad0:	mov	r8, r0
   16ad4:	movne	r0, #0
   16ad8:	moveq	r0, #1
   16adc:	ldr	r3, [r8]
   16ae0:	orrs	r0, r0, r5, lsr #31
   16ae4:	str	r3, [sp, #24]
   16ae8:	bne	16c54 <__assert_fail@plt+0x5ac8>
   16aec:	ldr	r2, [r4, #4]
   16af0:	cmp	r5, r2
   16af4:	blt	16b54 <__assert_fail@plt+0x59c8>
   16af8:	add	r7, r4, #8
   16afc:	cmp	r6, r7
   16b00:	str	r2, [sp, #36]	; 0x24
   16b04:	beq	16c24 <__assert_fail@plt+0x5a98>
   16b08:	mov	r3, #8
   16b0c:	sub	r2, r5, r2
   16b10:	mov	r0, r6
   16b14:	str	r3, [sp]
   16b18:	add	r2, r2, #1
   16b1c:	mvn	r3, #-2147483648	; 0x80000000
   16b20:	add	r1, sp, #36	; 0x24
   16b24:	bl	17d40 <__assert_fail@plt+0x6bb4>
   16b28:	mov	r6, r0
   16b2c:	str	r0, [r4]
   16b30:	ldr	r0, [r4, #4]
   16b34:	ldr	r2, [sp, #36]	; 0x24
   16b38:	mov	r1, #0
   16b3c:	sub	r2, r2, r0
   16b40:	add	r0, r6, r0, lsl #3
   16b44:	lsl	r2, r2, #3
   16b48:	bl	110b4 <memset@plt>
   16b4c:	ldr	r3, [sp, #36]	; 0x24
   16b50:	str	r3, [r4, #4]
   16b54:	ldr	r2, [r4, #56]	; 0x38
   16b58:	add	fp, r6, r5, lsl #3
   16b5c:	ldr	r1, [r4, #20]
   16b60:	ldr	r9, [r6, r5, lsl #3]
   16b64:	ldr	r7, [fp, #4]
   16b68:	ldr	r3, [r4, #16]
   16b6c:	ldr	ip, [r4, #60]	; 0x3c
   16b70:	str	r2, [sp, #12]
   16b74:	ldr	r2, [pc, #224]	; 16c5c <__assert_fail@plt+0x5ad0>
   16b78:	orr	r1, r1, #1
   16b7c:	str	r1, [sp, #28]
   16b80:	str	r1, [sp, #4]
   16b84:	str	r2, [sp, #8]
   16b88:	str	r3, [sp]
   16b8c:	mov	r0, r7
   16b90:	mov	r1, r9
   16b94:	str	ip, [sp, #16]
   16b98:	mvn	r3, #0
   16b9c:	mov	r2, sl
   16ba0:	bl	12f6c <__assert_fail@plt+0x1de0>
   16ba4:	cmp	r9, r0
   16ba8:	bhi	16c10 <__assert_fail@plt+0x5a84>
   16bac:	ldr	r3, [pc, #172]	; 16c60 <__assert_fail@plt+0x5ad4>
   16bb0:	add	r9, r0, #1
   16bb4:	cmp	r7, r3
   16bb8:	str	r9, [r6, r5, lsl #3]
   16bbc:	beq	16bc8 <__assert_fail@plt+0x5a3c>
   16bc0:	mov	r0, r7
   16bc4:	bl	12c14 <__assert_fail@plt+0x1a88>
   16bc8:	mov	r0, r9
   16bcc:	bl	17b24 <__assert_fail@plt+0x6998>
   16bd0:	ldr	ip, [r4, #60]	; 0x3c
   16bd4:	ldr	r3, [r4, #16]
   16bd8:	ldr	lr, [r4, #56]	; 0x38
   16bdc:	ldr	r4, [pc, #120]	; 16c5c <__assert_fail@plt+0x5ad0>
   16be0:	mov	r2, sl
   16be4:	mov	r1, r9
   16be8:	str	r0, [fp, #4]
   16bec:	str	r4, [sp, #8]
   16bf0:	ldr	r4, [sp, #28]
   16bf4:	str	r3, [sp]
   16bf8:	str	r4, [sp, #4]
   16bfc:	str	ip, [sp, #16]
   16c00:	str	lr, [sp, #12]
   16c04:	mvn	r3, #0
   16c08:	mov	r7, r0
   16c0c:	bl	12f6c <__assert_fail@plt+0x1de0>
   16c10:	ldr	r3, [sp, #24]
   16c14:	mov	r0, r7
   16c18:	str	r3, [r8]
   16c1c:	add	sp, sp, #44	; 0x2c
   16c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c24:	mov	r3, #8
   16c28:	sub	r2, r5, r2
   16c2c:	str	r3, [sp]
   16c30:	add	r1, sp, #36	; 0x24
   16c34:	add	r2, r2, #1
   16c38:	mvn	r3, #-2147483648	; 0x80000000
   16c3c:	bl	17d40 <__assert_fail@plt+0x6bb4>
   16c40:	mov	r6, r0
   16c44:	ldm	r7, {r0, r1}
   16c48:	str	r6, [r4]
   16c4c:	stm	r6, {r0, r1}
   16c50:	b	16b30 <__assert_fail@plt+0x59a4>
   16c54:	bl	11174 <abort@plt>
   16c58:	andeq	sl, r2, r8, lsr #2
   16c5c:	andeq	sl, r2, r0, asr #2
   16c60:	andeq	sl, r2, r0, asr #4
   16c64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c68:	sub	sp, sp, #44	; 0x2c
   16c6c:	mov	sl, r0
   16c70:	bl	11090 <__errno_location@plt>
   16c74:	ldr	r4, [pc, #348]	; 16dd8 <__assert_fail@plt+0x5c4c>
   16c78:	ldr	r2, [r4, #4]
   16c7c:	ldr	r5, [r4]
   16c80:	cmp	r2, #0
   16c84:	ldr	r3, [r0]
   16c88:	mov	r8, r0
   16c8c:	str	r3, [sp, #28]
   16c90:	bgt	16cec <__assert_fail@plt+0x5b60>
   16c94:	add	r6, r4, #8
   16c98:	cmp	r5, r6
   16c9c:	str	r2, [sp, #36]	; 0x24
   16ca0:	beq	16da8 <__assert_fail@plt+0x5c1c>
   16ca4:	mov	r3, #8
   16ca8:	mov	r0, r5
   16cac:	str	r3, [sp]
   16cb0:	rsb	r2, r2, #1
   16cb4:	mvn	r3, #-2147483648	; 0x80000000
   16cb8:	add	r1, sp, #36	; 0x24
   16cbc:	bl	17d40 <__assert_fail@plt+0x6bb4>
   16cc0:	mov	r5, r0
   16cc4:	str	r0, [r4]
   16cc8:	ldr	r0, [r4, #4]
   16ccc:	ldr	r2, [sp, #36]	; 0x24
   16cd0:	mov	r1, #0
   16cd4:	sub	r2, r2, r0
   16cd8:	add	r0, r5, r0, lsl #3
   16cdc:	lsl	r2, r2, #3
   16ce0:	bl	110b4 <memset@plt>
   16ce4:	ldr	r3, [sp, #36]	; 0x24
   16ce8:	str	r3, [r4, #4]
   16cec:	ldr	r7, [r4, #20]
   16cf0:	ldr	r9, [r5]
   16cf4:	ldr	r6, [r5, #4]
   16cf8:	ldr	r2, [r4, #56]	; 0x38
   16cfc:	ldr	r3, [r4, #16]
   16d00:	ldr	ip, [r4, #60]	; 0x3c
   16d04:	ldr	fp, [pc, #208]	; 16ddc <__assert_fail@plt+0x5c50>
   16d08:	orr	r7, r7, #1
   16d0c:	str	r2, [sp, #12]
   16d10:	str	r3, [sp]
   16d14:	str	r7, [sp, #4]
   16d18:	mov	r1, r9
   16d1c:	mov	r0, r6
   16d20:	str	ip, [sp, #16]
   16d24:	str	fp, [sp, #8]
   16d28:	mvn	r3, #0
   16d2c:	mov	r2, sl
   16d30:	bl	12f6c <__assert_fail@plt+0x1de0>
   16d34:	cmp	r9, r0
   16d38:	bhi	16d94 <__assert_fail@plt+0x5c08>
   16d3c:	ldr	r3, [pc, #156]	; 16de0 <__assert_fail@plt+0x5c54>
   16d40:	add	r9, r0, #1
   16d44:	cmp	r6, r3
   16d48:	str	r9, [r5]
   16d4c:	beq	16d58 <__assert_fail@plt+0x5bcc>
   16d50:	mov	r0, r6
   16d54:	bl	12c14 <__assert_fail@plt+0x1a88>
   16d58:	mov	r0, r9
   16d5c:	bl	17b24 <__assert_fail@plt+0x6998>
   16d60:	ldr	ip, [r4, #60]	; 0x3c
   16d64:	ldr	r3, [r4, #16]
   16d68:	ldr	lr, [r4, #56]	; 0x38
   16d6c:	mov	r2, sl
   16d70:	mov	r1, r9
   16d74:	str	r0, [r5, #4]
   16d78:	str	r3, [sp]
   16d7c:	stmib	sp, {r7, fp}
   16d80:	str	ip, [sp, #16]
   16d84:	str	lr, [sp, #12]
   16d88:	mvn	r3, #0
   16d8c:	mov	r6, r0
   16d90:	bl	12f6c <__assert_fail@plt+0x1de0>
   16d94:	ldr	r3, [sp, #28]
   16d98:	mov	r0, r6
   16d9c:	str	r3, [r8]
   16da0:	add	sp, sp, #44	; 0x2c
   16da4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16da8:	mov	r3, #8
   16dac:	str	r3, [sp]
   16db0:	add	r1, sp, #36	; 0x24
   16db4:	rsb	r2, r2, #1
   16db8:	mvn	r3, #-2147483648	; 0x80000000
   16dbc:	mov	r0, #0
   16dc0:	bl	17d40 <__assert_fail@plt+0x6bb4>
   16dc4:	mov	r5, r0
   16dc8:	ldm	r6, {r0, r1}
   16dcc:	str	r5, [r4]
   16dd0:	stm	r5, {r0, r1}
   16dd4:	b	16cc8 <__assert_fail@plt+0x5b3c>
   16dd8:	andeq	sl, r2, r8, lsr #2
   16ddc:	andeq	sl, r2, r0, asr #2
   16de0:	andeq	sl, r2, r0, asr #4
   16de4:	push	{r4, r5, r6, lr}
   16de8:	mov	r5, r0
   16dec:	mov	r0, #33	; 0x21
   16df0:	bl	17afc <__assert_fail@plt+0x6970>
   16df4:	add	r1, r5, #44	; 0x2c
   16df8:	mov	r2, #32
   16dfc:	mov	r5, #0
   16e00:	mov	r4, r0
   16e04:	bl	110c0 <strncpy@plt>
   16e08:	mov	r0, r4
   16e0c:	strb	r5, [r4, #32]
   16e10:	bl	11078 <strlen@plt>
   16e14:	add	r0, r4, r0
   16e18:	cmp	r4, r0
   16e1c:	bcs	16e2c <__assert_fail@plt+0x5ca0>
   16e20:	ldrb	r3, [r0, #-1]
   16e24:	cmp	r3, #32
   16e28:	beq	16e34 <__assert_fail@plt+0x5ca8>
   16e2c:	mov	r0, r4
   16e30:	pop	{r4, r5, r6, pc}
   16e34:	sub	r0, r0, #1
   16e38:	cmp	r0, r4
   16e3c:	strb	r5, [r0]
   16e40:	beq	16e2c <__assert_fail@plt+0x5ca0>
   16e44:	ldrb	r3, [r0, #-1]!
   16e48:	cmp	r3, #32
   16e4c:	beq	16e38 <__assert_fail@plt+0x5cac>
   16e50:	mov	r0, r4
   16e54:	pop	{r4, r5, r6, pc}
   16e58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e5c:	sub	sp, sp, #28
   16e60:	mov	r8, r3
   16e64:	add	sl, sp, #24
   16e68:	mov	ip, #0
   16e6c:	and	fp, r8, #2
   16e70:	mov	r7, ip
   16e74:	str	r1, [sp, #8]
   16e78:	str	r2, [sp, #12]
   16e7c:	str	ip, [sl, #-4]!
   16e80:	mov	r9, ip
   16e84:	bl	10ed4 <utmpxname@plt>
   16e88:	bl	10f64 <setutxent@plt>
   16e8c:	cmp	fp, #0
   16e90:	mov	r5, r7
   16e94:	mov	r6, r7
   16e98:	and	r8, r8, #1
   16e9c:	beq	16f20 <__assert_fail@plt+0x5d94>
   16ea0:	cmp	r8, #0
   16ea4:	beq	16ff0 <__assert_fail@plt+0x5e64>
   16ea8:	bl	11180 <getutxent@plt>
   16eac:	subs	r4, r0, #0
   16eb0:	beq	16fbc <__assert_fail@plt+0x5e30>
   16eb4:	ldrb	r2, [r4, #44]	; 0x2c
   16eb8:	ldrsh	r3, [r4]
   16ebc:	cmp	r2, #0
   16ec0:	sub	r3, r3, #7
   16ec4:	clz	r3, r3
   16ec8:	lsr	r3, r3, #5
   16ecc:	moveq	r3, #0
   16ed0:	cmp	r3, #0
   16ed4:	beq	16ea8 <__assert_fail@plt+0x5d1c>
   16ed8:	ldr	r3, [r4, #4]
   16edc:	mov	r1, r6
   16ee0:	subs	r0, r3, #0
   16ee4:	ble	16ef4 <__assert_fail@plt+0x5d68>
   16ee8:	bl	11048 <kill@plt>
   16eec:	cmp	r0, #0
   16ef0:	blt	16fdc <__assert_fail@plt+0x5e50>
   16ef4:	ldr	r3, [sp, #20]
   16ef8:	cmp	r5, r3
   16efc:	beq	16f8c <__assert_fail@plt+0x5e00>
   16f00:	add	r0, r9, r7
   16f04:	mov	r1, r4
   16f08:	mov	r2, #384	; 0x180
   16f0c:	bl	10f04 <memcpy@plt>
   16f10:	cmp	fp, #0
   16f14:	add	r5, r5, #1
   16f18:	add	r7, r7, #384	; 0x180
   16f1c:	bne	16ea0 <__assert_fail@plt+0x5d14>
   16f20:	cmp	r8, #0
   16f24:	beq	16fb0 <__assert_fail@plt+0x5e24>
   16f28:	bl	11180 <getutxent@plt>
   16f2c:	subs	r4, r0, #0
   16f30:	beq	16fbc <__assert_fail@plt+0x5e30>
   16f34:	ldrb	r3, [r4, #44]	; 0x2c
   16f38:	ldrsh	r2, [r4]
   16f3c:	adds	r3, r3, #0
   16f40:	movne	r3, #1
   16f44:	cmp	r2, #7
   16f48:	movne	r3, #0
   16f4c:	cmp	r3, #0
   16f50:	beq	16ef4 <__assert_fail@plt+0x5d68>
   16f54:	ldr	r3, [r4, #4]
   16f58:	mov	r1, r6
   16f5c:	subs	r0, r3, #0
   16f60:	ble	16ef4 <__assert_fail@plt+0x5d68>
   16f64:	bl	11048 <kill@plt>
   16f68:	cmp	r0, #0
   16f6c:	bge	16ef4 <__assert_fail@plt+0x5d68>
   16f70:	bl	11090 <__errno_location@plt>
   16f74:	ldr	r3, [r0]
   16f78:	cmp	r3, #3
   16f7c:	beq	16f28 <__assert_fail@plt+0x5d9c>
   16f80:	ldr	r3, [sp, #20]
   16f84:	cmp	r5, r3
   16f88:	bne	16f00 <__assert_fail@plt+0x5d74>
   16f8c:	mov	r3, #384	; 0x180
   16f90:	str	r3, [sp]
   16f94:	mov	r0, r9
   16f98:	mvn	r3, #0
   16f9c:	mov	r2, #1
   16fa0:	mov	r1, sl
   16fa4:	bl	17d40 <__assert_fail@plt+0x6bb4>
   16fa8:	mov	r9, r0
   16fac:	b	16f00 <__assert_fail@plt+0x5d74>
   16fb0:	bl	11180 <getutxent@plt>
   16fb4:	subs	r4, r0, #0
   16fb8:	bne	16ef4 <__assert_fail@plt+0x5d68>
   16fbc:	bl	11108 <endutxent@plt>
   16fc0:	ldr	r3, [sp, #8]
   16fc4:	mov	r0, #0
   16fc8:	str	r5, [r3]
   16fcc:	ldr	r3, [sp, #12]
   16fd0:	str	r9, [r3]
   16fd4:	add	sp, sp, #28
   16fd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fdc:	bl	11090 <__errno_location@plt>
   16fe0:	ldr	r3, [r0]
   16fe4:	cmp	r3, #3
   16fe8:	bne	16ef4 <__assert_fail@plt+0x5d68>
   16fec:	b	16ea8 <__assert_fail@plt+0x5d1c>
   16ff0:	bl	11180 <getutxent@plt>
   16ff4:	cmp	r0, #0
   16ff8:	beq	16fbc <__assert_fail@plt+0x5e30>
   16ffc:	ldrb	r2, [r0, #44]	; 0x2c
   17000:	ldrsh	r3, [r0]
   17004:	cmp	r2, #0
   17008:	sub	r3, r3, #7
   1700c:	clz	r3, r3
   17010:	lsr	r3, r3, #5
   17014:	moveq	r3, #0
   17018:	cmp	r3, #0
   1701c:	beq	16ff0 <__assert_fail@plt+0x5e64>
   17020:	mov	r4, r0
   17024:	b	16ef4 <__assert_fail@plt+0x5d68>
   17028:	push	{r4, r5, r6, lr}
   1702c:	mov	r5, r1
   17030:	mov	r1, #0
   17034:	mov	r4, r2
   17038:	bl	11114 <setlocale@plt>
   1703c:	subs	r6, r0, #0
   17040:	beq	1709c <__assert_fail@plt+0x5f10>
   17044:	bl	11078 <strlen@plt>
   17048:	cmp	r4, r0
   1704c:	bhi	17084 <__assert_fail@plt+0x5ef8>
   17050:	cmp	r4, #0
   17054:	bne	17060 <__assert_fail@plt+0x5ed4>
   17058:	mov	r0, #34	; 0x22
   1705c:	pop	{r4, r5, r6, pc}
   17060:	sub	r4, r4, #1
   17064:	mov	r1, r6
   17068:	mov	r2, r4
   1706c:	mov	r0, r5
   17070:	bl	10f04 <memcpy@plt>
   17074:	mov	r3, #0
   17078:	strb	r3, [r5, r4]
   1707c:	mov	r0, #34	; 0x22
   17080:	pop	{r4, r5, r6, pc}
   17084:	add	r2, r0, #1
   17088:	mov	r1, r6
   1708c:	mov	r0, r5
   17090:	bl	10f04 <memcpy@plt>
   17094:	mov	r0, #0
   17098:	pop	{r4, r5, r6, pc}
   1709c:	cmp	r4, #0
   170a0:	beq	170b0 <__assert_fail@plt+0x5f24>
   170a4:	strb	r6, [r5]
   170a8:	mov	r0, #22
   170ac:	pop	{r4, r5, r6, pc}
   170b0:	mov	r0, #22
   170b4:	pop	{r4, r5, r6, pc}
   170b8:	mov	r1, #0
   170bc:	b	11114 <setlocale@plt>
   170c0:	push	{r4, r5, r6, lr}
   170c4:	sub	sp, sp, #32
   170c8:	cmp	r1, #0
   170cc:	mov	r4, r0
   170d0:	ldr	r5, [sp, #48]	; 0x30
   170d4:	ldr	r6, [sp, #52]	; 0x34
   170d8:	beq	173f0 <__assert_fail@plt+0x6264>
   170dc:	stm	sp, {r2, r3}
   170e0:	mov	r3, r1
   170e4:	ldr	r2, [pc, #808]	; 17414 <__assert_fail@plt+0x6288>
   170e8:	mov	r1, #1
   170ec:	bl	110e4 <__fprintf_chk@plt>
   170f0:	mov	r2, #5
   170f4:	ldr	r1, [pc, #796]	; 17418 <__assert_fail@plt+0x628c>
   170f8:	mov	r0, #0
   170fc:	bl	10f4c <dcgettext@plt>
   17100:	ldr	r3, [pc, #788]	; 1741c <__assert_fail@plt+0x6290>
   17104:	ldr	r2, [pc, #788]	; 17420 <__assert_fail@plt+0x6294>
   17108:	str	r3, [sp]
   1710c:	mov	r1, #1
   17110:	mov	r3, r0
   17114:	mov	r0, r4
   17118:	bl	110e4 <__fprintf_chk@plt>
   1711c:	mov	r1, r4
   17120:	mov	r0, #10
   17124:	bl	10f40 <fputc_unlocked@plt>
   17128:	mov	r2, #5
   1712c:	ldr	r1, [pc, #752]	; 17424 <__assert_fail@plt+0x6298>
   17130:	mov	r0, #0
   17134:	bl	10f4c <dcgettext@plt>
   17138:	mov	r1, #1
   1713c:	ldr	r3, [pc, #740]	; 17428 <__assert_fail@plt+0x629c>
   17140:	mov	r2, r0
   17144:	mov	r0, r4
   17148:	bl	110e4 <__fprintf_chk@plt>
   1714c:	mov	r1, r4
   17150:	mov	r0, #10
   17154:	bl	10f40 <fputc_unlocked@plt>
   17158:	cmp	r6, #9
   1715c:	ldrls	pc, [pc, r6, lsl #2]
   17160:	b	17408 <__assert_fail@plt+0x627c>
   17164:	andeq	r7, r1, r8, ror #3
   17168:	strdeq	r7, [r1], -r0
   1716c:	andeq	r7, r1, ip, lsl r2
   17170:	andeq	r7, r1, r0, asr r2
   17174:	andeq	r7, r1, ip, lsl #5
   17178:	andeq	r7, r1, r8, asr #5
   1717c:	andeq	r7, r1, r4, lsl #6
   17180:	andeq	r7, r1, r8, asr #6
   17184:	muleq	r1, r8, r3
   17188:	andeq	r7, r1, ip, lsl #3
   1718c:	ldr	r1, [pc, #664]	; 1742c <__assert_fail@plt+0x62a0>
   17190:	mov	r2, #5
   17194:	mov	r0, #0
   17198:	bl	10f4c <dcgettext@plt>
   1719c:	ldr	ip, [r5, #32]
   171a0:	ldr	r1, [r5, #28]
   171a4:	ldr	r2, [r5, #24]
   171a8:	ldr	r3, [r5]
   171ac:	ldr	r6, [r5, #20]
   171b0:	str	ip, [sp, #28]
   171b4:	ldr	lr, [r5, #16]
   171b8:	str	r1, [sp, #24]
   171bc:	ldr	ip, [r5, #12]
   171c0:	str	r2, [sp, #20]
   171c4:	ldr	r1, [r5, #8]
   171c8:	ldr	r2, [r5, #4]
   171cc:	str	r6, [sp, #16]
   171d0:	stmib	sp, {r1, ip, lr}
   171d4:	mov	r1, #1
   171d8:	str	r2, [sp]
   171dc:	mov	r2, r0
   171e0:	mov	r0, r4
   171e4:	bl	110e4 <__fprintf_chk@plt>
   171e8:	add	sp, sp, #32
   171ec:	pop	{r4, r5, r6, pc}
   171f0:	mov	r2, #5
   171f4:	ldr	r1, [pc, #564]	; 17430 <__assert_fail@plt+0x62a4>
   171f8:	mov	r0, #0
   171fc:	bl	10f4c <dcgettext@plt>
   17200:	ldr	r3, [r5]
   17204:	mov	r1, #1
   17208:	mov	r2, r0
   1720c:	mov	r0, r4
   17210:	add	sp, sp, #32
   17214:	pop	{r4, r5, r6, lr}
   17218:	b	110e4 <__fprintf_chk@plt>
   1721c:	mov	r2, #5
   17220:	ldr	r1, [pc, #524]	; 17434 <__assert_fail@plt+0x62a8>
   17224:	mov	r0, #0
   17228:	bl	10f4c <dcgettext@plt>
   1722c:	ldr	r2, [r5, #4]
   17230:	ldr	r3, [r5]
   17234:	mov	r1, #1
   17238:	str	r2, [sp, #48]	; 0x30
   1723c:	mov	r2, r0
   17240:	mov	r0, r4
   17244:	add	sp, sp, #32
   17248:	pop	{r4, r5, r6, lr}
   1724c:	b	110e4 <__fprintf_chk@plt>
   17250:	mov	r2, #5
   17254:	ldr	r1, [pc, #476]	; 17438 <__assert_fail@plt+0x62ac>
   17258:	mov	r0, #0
   1725c:	bl	10f4c <dcgettext@plt>
   17260:	ldr	r1, [r5, #8]
   17264:	ldr	r2, [r5, #4]
   17268:	ldr	r3, [r5]
   1726c:	str	r1, [sp, #52]	; 0x34
   17270:	str	r2, [sp, #48]	; 0x30
   17274:	mov	r1, #1
   17278:	mov	r2, r0
   1727c:	mov	r0, r4
   17280:	add	sp, sp, #32
   17284:	pop	{r4, r5, r6, lr}
   17288:	b	110e4 <__fprintf_chk@plt>
   1728c:	mov	r2, #5
   17290:	ldr	r1, [pc, #420]	; 1743c <__assert_fail@plt+0x62b0>
   17294:	mov	r0, #0
   17298:	bl	10f4c <dcgettext@plt>
   1729c:	ldr	r1, [r5, #8]
   172a0:	ldr	ip, [r5, #12]
   172a4:	ldr	r2, [r5, #4]
   172a8:	ldr	r3, [r5]
   172ac:	stmib	sp, {r1, ip}
   172b0:	str	r2, [sp]
   172b4:	mov	r1, #1
   172b8:	mov	r2, r0
   172bc:	mov	r0, r4
   172c0:	bl	110e4 <__fprintf_chk@plt>
   172c4:	b	171e8 <__assert_fail@plt+0x605c>
   172c8:	mov	r2, #5
   172cc:	ldr	r1, [pc, #364]	; 17440 <__assert_fail@plt+0x62b4>
   172d0:	mov	r0, #0
   172d4:	bl	10f4c <dcgettext@plt>
   172d8:	add	r1, r5, #8
   172dc:	ldr	r2, [r5, #4]
   172e0:	ldm	r1, {r1, ip, lr}
   172e4:	ldr	r3, [r5]
   172e8:	str	r2, [sp]
   172ec:	stmib	sp, {r1, ip, lr}
   172f0:	mov	r1, #1
   172f4:	mov	r2, r0
   172f8:	mov	r0, r4
   172fc:	bl	110e4 <__fprintf_chk@plt>
   17300:	b	171e8 <__assert_fail@plt+0x605c>
   17304:	mov	r2, #5
   17308:	ldr	r1, [pc, #308]	; 17444 <__assert_fail@plt+0x62b8>
   1730c:	mov	r0, #0
   17310:	bl	10f4c <dcgettext@plt>
   17314:	add	r1, r5, #8
   17318:	ldr	r2, [r5, #4]
   1731c:	ldm	r1, {r1, ip, lr}
   17320:	ldr	r6, [r5, #20]
   17324:	ldr	r3, [r5]
   17328:	stmib	sp, {r1, ip, lr}
   1732c:	mov	r1, #1
   17330:	str	r2, [sp]
   17334:	str	r6, [sp, #16]
   17338:	mov	r2, r0
   1733c:	mov	r0, r4
   17340:	bl	110e4 <__fprintf_chk@plt>
   17344:	b	171e8 <__assert_fail@plt+0x605c>
   17348:	mov	r2, #5
   1734c:	ldr	r1, [pc, #244]	; 17448 <__assert_fail@plt+0x62bc>
   17350:	mov	r0, #0
   17354:	bl	10f4c <dcgettext@plt>
   17358:	ldr	r2, [r5, #24]
   1735c:	ldr	r3, [r5]
   17360:	ldr	r6, [r5, #20]
   17364:	ldr	lr, [r5, #16]
   17368:	ldr	ip, [r5, #12]
   1736c:	str	r2, [sp, #20]
   17370:	ldr	r1, [r5, #8]
   17374:	ldr	r2, [r5, #4]
   17378:	str	r6, [sp, #16]
   1737c:	stmib	sp, {r1, ip, lr}
   17380:	mov	r1, #1
   17384:	str	r2, [sp]
   17388:	mov	r2, r0
   1738c:	mov	r0, r4
   17390:	bl	110e4 <__fprintf_chk@plt>
   17394:	b	171e8 <__assert_fail@plt+0x605c>
   17398:	mov	r2, #5
   1739c:	ldr	r1, [pc, #168]	; 1744c <__assert_fail@plt+0x62c0>
   173a0:	mov	r0, #0
   173a4:	bl	10f4c <dcgettext@plt>
   173a8:	ldr	r1, [r5, #28]
   173ac:	ldr	r2, [r5, #24]
   173b0:	ldr	r3, [r5]
   173b4:	ldr	r6, [r5, #20]
   173b8:	ldr	lr, [r5, #16]
   173bc:	str	r1, [sp, #24]
   173c0:	ldr	ip, [r5, #12]
   173c4:	str	r2, [sp, #20]
   173c8:	ldr	r1, [r5, #8]
   173cc:	ldr	r2, [r5, #4]
   173d0:	str	r6, [sp, #16]
   173d4:	stmib	sp, {r1, ip, lr}
   173d8:	mov	r1, #1
   173dc:	str	r2, [sp]
   173e0:	mov	r2, r0
   173e4:	mov	r0, r4
   173e8:	bl	110e4 <__fprintf_chk@plt>
   173ec:	b	171e8 <__assert_fail@plt+0x605c>
   173f0:	str	r3, [sp]
   173f4:	mov	r1, #1
   173f8:	mov	r3, r2
   173fc:	ldr	r2, [pc, #76]	; 17450 <__assert_fail@plt+0x62c4>
   17400:	bl	110e4 <__fprintf_chk@plt>
   17404:	b	170f0 <__assert_fail@plt+0x5f64>
   17408:	mov	r2, #5
   1740c:	ldr	r1, [pc, #64]	; 17454 <__assert_fail@plt+0x62c8>
   17410:	b	17194 <__assert_fail@plt+0x6008>
   17414:	andeq	r9, r1, r8, ror r7
   17418:	andeq	r9, r1, ip, lsl #15
   1741c:	andeq	r0, r0, r6, ror #15
   17420:	andeq	r9, r1, r4, ror #20
   17424:	muleq	r1, r0, r7
   17428:	andeq	r9, r1, ip, lsr r8
   1742c:	andeq	r9, r1, ip, ror #18
   17430:	andeq	r9, r1, r0, ror #16
   17434:	andeq	r9, r1, r0, ror r8
   17438:	andeq	r9, r1, r8, lsl #17
   1743c:	andeq	r9, r1, r4, lsr #17
   17440:	andeq	r9, r1, r4, asr #17
   17444:	andeq	r9, r1, r8, ror #17
   17448:	andeq	r9, r1, r0, lsl r9
   1744c:	andeq	r9, r1, ip, lsr r9
   17450:	andeq	r9, r1, r4, lsl #15
   17454:	andeq	r9, r1, r0, lsr #19
   17458:	push	{r4, r5, lr}
   1745c:	sub	sp, sp, #12
   17460:	ldr	r5, [sp, #24]
   17464:	ldr	ip, [r5]
   17468:	cmp	ip, #0
   1746c:	beq	17488 <__assert_fail@plt+0x62fc>
   17470:	mov	lr, r5
   17474:	mov	ip, #0
   17478:	ldr	r4, [lr, #4]!
   1747c:	add	ip, ip, #1
   17480:	cmp	r4, #0
   17484:	bne	17478 <__assert_fail@plt+0x62ec>
   17488:	stm	sp, {r5, ip}
   1748c:	bl	170c0 <__assert_fail@plt+0x5f34>
   17490:	add	sp, sp, #12
   17494:	pop	{r4, r5, pc}
   17498:	push	{r4, r5, lr}
   1749c:	sub	sp, sp, #76	; 0x4c
   174a0:	mov	r5, r0
   174a4:	ldr	ip, [sp, #88]	; 0x58
   174a8:	ldr	r0, [ip]
   174ac:	cmp	r0, #0
   174b0:	str	r0, [sp, #32]
   174b4:	beq	17888 <__assert_fail@plt+0x66fc>
   174b8:	ldr	r0, [ip, #4]
   174bc:	cmp	r0, #0
   174c0:	str	r0, [sp, #36]	; 0x24
   174c4:	beq	17890 <__assert_fail@plt+0x6704>
   174c8:	ldr	r0, [ip, #8]
   174cc:	cmp	r0, #0
   174d0:	str	r0, [sp, #40]	; 0x28
   174d4:	beq	17898 <__assert_fail@plt+0x670c>
   174d8:	ldr	r0, [ip, #12]
   174dc:	cmp	r0, #0
   174e0:	str	r0, [sp, #44]	; 0x2c
   174e4:	beq	178a0 <__assert_fail@plt+0x6714>
   174e8:	ldr	r0, [ip, #16]
   174ec:	cmp	r0, #0
   174f0:	str	r0, [sp, #48]	; 0x30
   174f4:	beq	178a8 <__assert_fail@plt+0x671c>
   174f8:	ldr	r0, [ip, #20]
   174fc:	cmp	r0, #0
   17500:	str	r0, [sp, #52]	; 0x34
   17504:	beq	178b0 <__assert_fail@plt+0x6724>
   17508:	ldr	r0, [ip, #24]
   1750c:	cmp	r0, #0
   17510:	str	r0, [sp, #56]	; 0x38
   17514:	beq	178b8 <__assert_fail@plt+0x672c>
   17518:	ldr	r0, [ip, #28]
   1751c:	cmp	r0, #0
   17520:	str	r0, [sp, #60]	; 0x3c
   17524:	beq	178c0 <__assert_fail@plt+0x6734>
   17528:	ldr	r0, [ip, #32]
   1752c:	cmp	r0, #0
   17530:	str	r0, [sp, #64]	; 0x40
   17534:	beq	178c8 <__assert_fail@plt+0x673c>
   17538:	ldr	r0, [ip, #36]	; 0x24
   1753c:	cmp	r0, #0
   17540:	movne	r4, #10
   17544:	moveq	r4, #9
   17548:	cmp	r1, #0
   1754c:	beq	17860 <__assert_fail@plt+0x66d4>
   17550:	stm	sp, {r2, r3}
   17554:	mov	r0, r5
   17558:	mov	r3, r1
   1755c:	ldr	r2, [pc, #876]	; 178d0 <__assert_fail@plt+0x6744>
   17560:	mov	r1, #1
   17564:	bl	110e4 <__fprintf_chk@plt>
   17568:	mov	r2, #5
   1756c:	ldr	r1, [pc, #864]	; 178d4 <__assert_fail@plt+0x6748>
   17570:	mov	r0, #0
   17574:	bl	10f4c <dcgettext@plt>
   17578:	ldr	r3, [pc, #856]	; 178d8 <__assert_fail@plt+0x674c>
   1757c:	ldr	r2, [pc, #856]	; 178dc <__assert_fail@plt+0x6750>
   17580:	str	r3, [sp]
   17584:	mov	r1, #1
   17588:	mov	r3, r0
   1758c:	mov	r0, r5
   17590:	bl	110e4 <__fprintf_chk@plt>
   17594:	mov	r1, r5
   17598:	mov	r0, #10
   1759c:	bl	10f40 <fputc_unlocked@plt>
   175a0:	mov	r2, #5
   175a4:	ldr	r1, [pc, #820]	; 178e0 <__assert_fail@plt+0x6754>
   175a8:	mov	r0, #0
   175ac:	bl	10f4c <dcgettext@plt>
   175b0:	mov	r1, #1
   175b4:	ldr	r3, [pc, #808]	; 178e4 <__assert_fail@plt+0x6758>
   175b8:	mov	r2, r0
   175bc:	mov	r0, r5
   175c0:	bl	110e4 <__fprintf_chk@plt>
   175c4:	mov	r1, r5
   175c8:	mov	r0, #10
   175cc:	bl	10f40 <fputc_unlocked@plt>
   175d0:	cmp	r4, #9
   175d4:	ldrls	pc, [pc, r4, lsl #2]
   175d8:	b	1787c <__assert_fail@plt+0x66f0>
   175dc:	andeq	r7, r1, r0, ror #12
   175e0:	andeq	r7, r1, r8, ror #12
   175e4:	muleq	r1, r4, r6
   175e8:	andeq	r7, r1, r8, asr #13
   175ec:	andeq	r7, r1, r0, lsl #14
   175f0:	andeq	r7, r1, ip, lsr r7
   175f4:	andeq	r7, r1, r8, ror r7
   175f8:			; <UNDEFINED> instruction: 0x000177bc
   175fc:	andeq	r7, r1, r8, lsl #16
   17600:	andeq	r7, r1, r4, lsl #12
   17604:	ldr	r1, [pc, #732]	; 178e8 <__assert_fail@plt+0x675c>
   17608:	mov	r2, #5
   1760c:	mov	r0, #0
   17610:	bl	10f4c <dcgettext@plt>
   17614:	ldr	ip, [sp, #64]	; 0x40
   17618:	ldr	r1, [sp, #60]	; 0x3c
   1761c:	ldr	r2, [sp, #56]	; 0x38
   17620:	ldr	lr, [sp, #48]	; 0x30
   17624:	str	ip, [sp, #28]
   17628:	str	r1, [sp, #24]
   1762c:	ldr	ip, [sp, #44]	; 0x2c
   17630:	ldr	r1, [sp, #40]	; 0x28
   17634:	ldr	r4, [sp, #52]	; 0x34
   17638:	str	r2, [sp, #20]
   1763c:	ldr	r2, [sp, #36]	; 0x24
   17640:	stmib	sp, {r1, ip, lr}
   17644:	mov	r1, #1
   17648:	str	r2, [sp]
   1764c:	ldr	r3, [sp, #32]
   17650:	str	r4, [sp, #16]
   17654:	mov	r2, r0
   17658:	mov	r0, r5
   1765c:	bl	110e4 <__fprintf_chk@plt>
   17660:	add	sp, sp, #76	; 0x4c
   17664:	pop	{r4, r5, pc}
   17668:	mov	r2, #5
   1766c:	ldr	r1, [pc, #632]	; 178ec <__assert_fail@plt+0x6760>
   17670:	mov	r0, #0
   17674:	bl	10f4c <dcgettext@plt>
   17678:	ldr	r3, [sp, #32]
   1767c:	mov	r1, #1
   17680:	mov	r2, r0
   17684:	mov	r0, r5
   17688:	add	sp, sp, #76	; 0x4c
   1768c:	pop	{r4, r5, lr}
   17690:	b	110e4 <__fprintf_chk@plt>
   17694:	mov	r2, #5
   17698:	ldr	r1, [pc, #592]	; 178f0 <__assert_fail@plt+0x6764>
   1769c:	mov	r0, #0
   176a0:	bl	10f4c <dcgettext@plt>
   176a4:	ldr	r2, [sp, #36]	; 0x24
   176a8:	ldr	r3, [sp, #32]
   176ac:	str	r2, [sp, #88]	; 0x58
   176b0:	mov	r1, #1
   176b4:	mov	r2, r0
   176b8:	mov	r0, r5
   176bc:	add	sp, sp, #76	; 0x4c
   176c0:	pop	{r4, r5, lr}
   176c4:	b	110e4 <__fprintf_chk@plt>
   176c8:	mov	r2, #5
   176cc:	ldr	r1, [pc, #544]	; 178f4 <__assert_fail@plt+0x6768>
   176d0:	mov	r0, #0
   176d4:	bl	10f4c <dcgettext@plt>
   176d8:	ldr	r1, [sp, #40]	; 0x28
   176dc:	ldr	r2, [sp, #36]	; 0x24
   176e0:	str	r1, [sp, #4]
   176e4:	str	r2, [sp]
   176e8:	ldr	r3, [sp, #32]
   176ec:	mov	r1, #1
   176f0:	mov	r2, r0
   176f4:	mov	r0, r5
   176f8:	bl	110e4 <__fprintf_chk@plt>
   176fc:	b	17660 <__assert_fail@plt+0x64d4>
   17700:	mov	r2, #5
   17704:	ldr	r1, [pc, #492]	; 178f8 <__assert_fail@plt+0x676c>
   17708:	mov	r0, #0
   1770c:	bl	10f4c <dcgettext@plt>
   17710:	ldr	r1, [sp, #40]	; 0x28
   17714:	ldr	ip, [sp, #44]	; 0x2c
   17718:	ldr	r2, [sp, #36]	; 0x24
   1771c:	ldr	r3, [sp, #32]
   17720:	stmib	sp, {r1, ip}
   17724:	str	r2, [sp]
   17728:	mov	r1, #1
   1772c:	mov	r2, r0
   17730:	mov	r0, r5
   17734:	bl	110e4 <__fprintf_chk@plt>
   17738:	b	17660 <__assert_fail@plt+0x64d4>
   1773c:	mov	r2, #5
   17740:	ldr	r1, [pc, #436]	; 178fc <__assert_fail@plt+0x6770>
   17744:	mov	r0, #0
   17748:	bl	10f4c <dcgettext@plt>
   1774c:	add	r1, sp, #40	; 0x28
   17750:	ldr	r2, [sp, #36]	; 0x24
   17754:	ldm	r1, {r1, ip, lr}
   17758:	ldr	r3, [sp, #32]
   1775c:	str	r2, [sp]
   17760:	stmib	sp, {r1, ip, lr}
   17764:	mov	r1, #1
   17768:	mov	r2, r0
   1776c:	mov	r0, r5
   17770:	bl	110e4 <__fprintf_chk@plt>
   17774:	b	17660 <__assert_fail@plt+0x64d4>
   17778:	mov	r2, #5
   1777c:	ldr	r1, [pc, #380]	; 17900 <__assert_fail@plt+0x6774>
   17780:	mov	r0, #0
   17784:	bl	10f4c <dcgettext@plt>
   17788:	add	r1, sp, #40	; 0x28
   1778c:	ldr	r2, [sp, #36]	; 0x24
   17790:	ldm	r1, {r1, ip, lr}
   17794:	ldr	r4, [sp, #52]	; 0x34
   17798:	str	r2, [sp]
   1779c:	stmib	sp, {r1, ip, lr}
   177a0:	mov	r1, #1
   177a4:	ldr	r3, [sp, #32]
   177a8:	str	r4, [sp, #16]
   177ac:	mov	r2, r0
   177b0:	mov	r0, r5
   177b4:	bl	110e4 <__fprintf_chk@plt>
   177b8:	b	17660 <__assert_fail@plt+0x64d4>
   177bc:	mov	r2, #5
   177c0:	ldr	r1, [pc, #316]	; 17904 <__assert_fail@plt+0x6778>
   177c4:	mov	r0, #0
   177c8:	bl	10f4c <dcgettext@plt>
   177cc:	add	r1, sp, #40	; 0x28
   177d0:	ldr	r2, [sp, #56]	; 0x38
   177d4:	ldm	r1, {r1, ip, lr}
   177d8:	ldr	r4, [sp, #52]	; 0x34
   177dc:	str	r2, [sp, #20]
   177e0:	ldr	r2, [sp, #36]	; 0x24
   177e4:	stmib	sp, {r1, ip, lr}
   177e8:	mov	r1, #1
   177ec:	str	r2, [sp]
   177f0:	ldr	r3, [sp, #32]
   177f4:	str	r4, [sp, #16]
   177f8:	mov	r2, r0
   177fc:	mov	r0, r5
   17800:	bl	110e4 <__fprintf_chk@plt>
   17804:	b	17660 <__assert_fail@plt+0x64d4>
   17808:	mov	r2, #5
   1780c:	ldr	r1, [pc, #244]	; 17908 <__assert_fail@plt+0x677c>
   17810:	mov	r0, #0
   17814:	bl	10f4c <dcgettext@plt>
   17818:	ldr	r1, [sp, #60]	; 0x3c
   1781c:	ldr	r2, [sp, #56]	; 0x38
   17820:	ldr	lr, [sp, #48]	; 0x30
   17824:	ldr	ip, [sp, #44]	; 0x2c
   17828:	str	r1, [sp, #24]
   1782c:	ldr	r1, [sp, #40]	; 0x28
   17830:	ldr	r4, [sp, #52]	; 0x34
   17834:	str	r2, [sp, #20]
   17838:	ldr	r2, [sp, #36]	; 0x24
   1783c:	stmib	sp, {r1, ip, lr}
   17840:	mov	r1, #1
   17844:	str	r2, [sp]
   17848:	ldr	r3, [sp, #32]
   1784c:	str	r4, [sp, #16]
   17850:	mov	r2, r0
   17854:	mov	r0, r5
   17858:	bl	110e4 <__fprintf_chk@plt>
   1785c:	b	17660 <__assert_fail@plt+0x64d4>
   17860:	str	r3, [sp]
   17864:	mov	r1, #1
   17868:	mov	r3, r2
   1786c:	mov	r0, r5
   17870:	ldr	r2, [pc, #148]	; 1790c <__assert_fail@plt+0x6780>
   17874:	bl	110e4 <__fprintf_chk@plt>
   17878:	b	17568 <__assert_fail@plt+0x63dc>
   1787c:	mov	r2, #5
   17880:	ldr	r1, [pc, #136]	; 17910 <__assert_fail@plt+0x6784>
   17884:	b	1760c <__assert_fail@plt+0x6480>
   17888:	mov	r4, r0
   1788c:	b	17548 <__assert_fail@plt+0x63bc>
   17890:	mov	r4, #1
   17894:	b	17548 <__assert_fail@plt+0x63bc>
   17898:	mov	r4, #2
   1789c:	b	17548 <__assert_fail@plt+0x63bc>
   178a0:	mov	r4, #3
   178a4:	b	17548 <__assert_fail@plt+0x63bc>
   178a8:	mov	r4, #4
   178ac:	b	17548 <__assert_fail@plt+0x63bc>
   178b0:	mov	r4, #5
   178b4:	b	17548 <__assert_fail@plt+0x63bc>
   178b8:	mov	r4, #6
   178bc:	b	17548 <__assert_fail@plt+0x63bc>
   178c0:	mov	r4, #7
   178c4:	b	17548 <__assert_fail@plt+0x63bc>
   178c8:	mov	r4, #8
   178cc:	b	17548 <__assert_fail@plt+0x63bc>
   178d0:	andeq	r9, r1, r8, ror r7
   178d4:	andeq	r9, r1, ip, lsl #15
   178d8:	andeq	r0, r0, r6, ror #15
   178dc:	andeq	r9, r1, r4, ror #20
   178e0:	muleq	r1, r0, r7
   178e4:	andeq	r9, r1, ip, lsr r8
   178e8:	andeq	r9, r1, ip, ror #18
   178ec:	andeq	r9, r1, r0, ror #16
   178f0:	andeq	r9, r1, r0, ror r8
   178f4:	andeq	r9, r1, r8, lsl #17
   178f8:	andeq	r9, r1, r4, lsr #17
   178fc:	andeq	r9, r1, r4, asr #17
   17900:	andeq	r9, r1, r8, ror #17
   17904:	andeq	r9, r1, r0, lsl r9
   17908:	andeq	r9, r1, ip, lsr r9
   1790c:	andeq	r9, r1, r4, lsl #15
   17910:	andeq	r9, r1, r0, lsr #19
   17914:	push	{r3}		; (str r3, [sp, #-4]!)
   17918:	push	{lr}		; (str lr, [sp, #-4]!)
   1791c:	sub	sp, sp, #56	; 0x38
   17920:	add	r3, sp, #64	; 0x40
   17924:	ldr	ip, [sp, #64]	; 0x40
   17928:	str	r3, [sp, #12]
   1792c:	cmp	ip, #0
   17930:	str	ip, [sp, #16]
   17934:	beq	179cc <__assert_fail@plt+0x6840>
   17938:	ldr	ip, [sp, #68]	; 0x44
   1793c:	cmp	ip, #0
   17940:	str	ip, [sp, #20]
   17944:	beq	179ec <__assert_fail@plt+0x6860>
   17948:	ldr	ip, [sp, #72]	; 0x48
   1794c:	cmp	ip, #0
   17950:	str	ip, [sp, #24]
   17954:	beq	179f4 <__assert_fail@plt+0x6868>
   17958:	ldr	ip, [sp, #76]	; 0x4c
   1795c:	cmp	ip, #0
   17960:	str	ip, [sp, #28]
   17964:	beq	179fc <__assert_fail@plt+0x6870>
   17968:	ldr	ip, [sp, #80]	; 0x50
   1796c:	cmp	ip, #0
   17970:	str	ip, [sp, #32]
   17974:	beq	17a04 <__assert_fail@plt+0x6878>
   17978:	ldr	ip, [sp, #84]	; 0x54
   1797c:	cmp	ip, #0
   17980:	str	ip, [sp, #36]	; 0x24
   17984:	beq	17a0c <__assert_fail@plt+0x6880>
   17988:	ldr	ip, [sp, #88]	; 0x58
   1798c:	cmp	ip, #0
   17990:	str	ip, [sp, #40]	; 0x28
   17994:	beq	17a14 <__assert_fail@plt+0x6888>
   17998:	ldr	ip, [sp, #92]	; 0x5c
   1799c:	cmp	ip, #0
   179a0:	str	ip, [sp, #44]	; 0x2c
   179a4:	beq	17a1c <__assert_fail@plt+0x6890>
   179a8:	ldr	ip, [sp, #96]	; 0x60
   179ac:	cmp	ip, #0
   179b0:	str	ip, [sp, #48]	; 0x30
   179b4:	beq	17a24 <__assert_fail@plt+0x6898>
   179b8:	ldr	ip, [sp, #100]	; 0x64
   179bc:	cmp	ip, #0
   179c0:	str	ip, [sp, #52]	; 0x34
   179c4:	movne	ip, #10
   179c8:	moveq	ip, #9
   179cc:	add	r3, sp, #16
   179d0:	stm	sp, {r3, ip}
   179d4:	ldr	r3, [sp, #60]	; 0x3c
   179d8:	bl	170c0 <__assert_fail@plt+0x5f34>
   179dc:	add	sp, sp, #56	; 0x38
   179e0:	pop	{lr}		; (ldr lr, [sp], #4)
   179e4:	add	sp, sp, #4
   179e8:	bx	lr
   179ec:	mov	ip, #1
   179f0:	b	179cc <__assert_fail@plt+0x6840>
   179f4:	mov	ip, #2
   179f8:	b	179cc <__assert_fail@plt+0x6840>
   179fc:	mov	ip, #3
   17a00:	b	179cc <__assert_fail@plt+0x6840>
   17a04:	mov	ip, #4
   17a08:	b	179cc <__assert_fail@plt+0x6840>
   17a0c:	mov	ip, #5
   17a10:	b	179cc <__assert_fail@plt+0x6840>
   17a14:	mov	ip, #6
   17a18:	b	179cc <__assert_fail@plt+0x6840>
   17a1c:	mov	ip, #7
   17a20:	b	179cc <__assert_fail@plt+0x6840>
   17a24:	mov	ip, #8
   17a28:	b	179cc <__assert_fail@plt+0x6840>
   17a2c:	ldr	r3, [pc, #116]	; 17aa8 <__assert_fail@plt+0x691c>
   17a30:	push	{r4, lr}
   17a34:	mov	r0, #10
   17a38:	ldr	r1, [r3]
   17a3c:	bl	10f40 <fputc_unlocked@plt>
   17a40:	mov	r2, #5
   17a44:	ldr	r1, [pc, #96]	; 17aac <__assert_fail@plt+0x6920>
   17a48:	mov	r0, #0
   17a4c:	bl	10f4c <dcgettext@plt>
   17a50:	ldr	r2, [pc, #88]	; 17ab0 <__assert_fail@plt+0x6924>
   17a54:	mov	r1, r0
   17a58:	mov	r0, #1
   17a5c:	bl	110cc <__printf_chk@plt>
   17a60:	mov	r2, #5
   17a64:	ldr	r1, [pc, #72]	; 17ab4 <__assert_fail@plt+0x6928>
   17a68:	mov	r0, #0
   17a6c:	bl	10f4c <dcgettext@plt>
   17a70:	ldr	r3, [pc, #64]	; 17ab8 <__assert_fail@plt+0x692c>
   17a74:	ldr	r2, [pc, #64]	; 17abc <__assert_fail@plt+0x6930>
   17a78:	mov	r1, r0
   17a7c:	mov	r0, #1
   17a80:	bl	110cc <__printf_chk@plt>
   17a84:	mov	r2, #5
   17a88:	ldr	r1, [pc, #48]	; 17ac0 <__assert_fail@plt+0x6934>
   17a8c:	mov	r0, #0
   17a90:	bl	10f4c <dcgettext@plt>
   17a94:	ldr	r2, [pc, #40]	; 17ac4 <__assert_fail@plt+0x6938>
   17a98:	pop	{r4, lr}
   17a9c:	mov	r1, r0
   17aa0:	mov	r0, #1
   17aa4:	b	110cc <__printf_chk@plt>
   17aa8:	andeq	sl, r2, ip, ror r1
   17aac:	ldrdeq	r9, [r1], -ip
   17ab0:	strdeq	r9, [r1], -r0
   17ab4:	andeq	r9, r1, r8, lsl #20
   17ab8:	ldrdeq	r9, [r1], -r8
   17abc:	andeq	r9, r1, r0, lsl #8
   17ac0:	andeq	r9, r1, ip, lsl sl
   17ac4:	andeq	r9, r1, r4, asr #20
   17ac8:	push	{r4, r5, r6, lr}
   17acc:	mov	r6, r0
   17ad0:	mov	r5, r1
   17ad4:	mov	r4, r2
   17ad8:	bl	184f8 <__assert_fail@plt+0x736c>
   17adc:	cmp	r0, #0
   17ae0:	popne	{r4, r5, r6, pc}
   17ae4:	cmp	r6, #0
   17ae8:	beq	17af8 <__assert_fail@plt+0x696c>
   17aec:	cmp	r5, #0
   17af0:	cmpne	r4, #0
   17af4:	popeq	{r4, r5, r6, pc}
   17af8:	bl	18144 <__assert_fail@plt+0x6fb8>
   17afc:	push	{r4, lr}
   17b00:	bl	181cc <__assert_fail@plt+0x7040>
   17b04:	cmp	r0, #0
   17b08:	popne	{r4, pc}
   17b0c:	bl	18144 <__assert_fail@plt+0x6fb8>
   17b10:	push	{r4, lr}
   17b14:	bl	181cc <__assert_fail@plt+0x7040>
   17b18:	cmp	r0, #0
   17b1c:	popne	{r4, pc}
   17b20:	bl	18144 <__assert_fail@plt+0x6fb8>
   17b24:	push	{r4, lr}
   17b28:	bl	181cc <__assert_fail@plt+0x7040>
   17b2c:	cmp	r0, #0
   17b30:	popne	{r4, pc}
   17b34:	bl	18144 <__assert_fail@plt+0x6fb8>
   17b38:	push	{r4, r5, r6, lr}
   17b3c:	mov	r5, r0
   17b40:	mov	r4, r1
   17b44:	bl	181f8 <__assert_fail@plt+0x706c>
   17b48:	cmp	r0, #0
   17b4c:	popne	{r4, r5, r6, pc}
   17b50:	adds	r4, r4, #0
   17b54:	movne	r4, #1
   17b58:	cmp	r5, #0
   17b5c:	orreq	r4, r4, #1
   17b60:	cmp	r4, #0
   17b64:	popeq	{r4, r5, r6, pc}
   17b68:	bl	18144 <__assert_fail@plt+0x6fb8>
   17b6c:	push	{r4, lr}
   17b70:	cmp	r1, #0
   17b74:	orreq	r1, r1, #1
   17b78:	bl	181f8 <__assert_fail@plt+0x706c>
   17b7c:	cmp	r0, #0
   17b80:	popne	{r4, pc}
   17b84:	bl	18144 <__assert_fail@plt+0x6fb8>
   17b88:	push	{r4, r5, r6, lr}
   17b8c:	mov	r6, r0
   17b90:	mov	r5, r1
   17b94:	mov	r4, r2
   17b98:	bl	184f8 <__assert_fail@plt+0x736c>
   17b9c:	cmp	r0, #0
   17ba0:	popne	{r4, r5, r6, pc}
   17ba4:	cmp	r6, #0
   17ba8:	beq	17bb8 <__assert_fail@plt+0x6a2c>
   17bac:	cmp	r5, #0
   17bb0:	cmpne	r4, #0
   17bb4:	popeq	{r4, r5, r6, pc}
   17bb8:	bl	18144 <__assert_fail@plt+0x6fb8>
   17bbc:	cmp	r2, #0
   17bc0:	cmpne	r1, #0
   17bc4:	moveq	r2, #1
   17bc8:	moveq	r1, r2
   17bcc:	push	{r4, lr}
   17bd0:	bl	184f8 <__assert_fail@plt+0x736c>
   17bd4:	cmp	r0, #0
   17bd8:	popne	{r4, pc}
   17bdc:	bl	18144 <__assert_fail@plt+0x6fb8>
   17be0:	push	{r4, lr}
   17be4:	mov	r2, r1
   17be8:	mov	r1, r0
   17bec:	mov	r0, #0
   17bf0:	bl	184f8 <__assert_fail@plt+0x736c>
   17bf4:	cmp	r0, #0
   17bf8:	popne	{r4, pc}
   17bfc:	bl	18144 <__assert_fail@plt+0x6fb8>
   17c00:	cmp	r1, #0
   17c04:	cmpne	r0, #0
   17c08:	moveq	r2, #1
   17c0c:	movne	r2, r1
   17c10:	moveq	r1, r2
   17c14:	movne	r1, r0
   17c18:	push	{r4, lr}
   17c1c:	mov	r0, #0
   17c20:	bl	184f8 <__assert_fail@plt+0x736c>
   17c24:	cmp	r0, #0
   17c28:	popne	{r4, pc}
   17c2c:	bl	18144 <__assert_fail@plt+0x6fb8>
   17c30:	cmp	r0, #0
   17c34:	push	{r4, r5, r6, lr}
   17c38:	mov	r5, r1
   17c3c:	ldr	r4, [r1]
   17c40:	beq	17c7c <__assert_fail@plt+0x6af0>
   17c44:	lsr	r2, r4, #1
   17c48:	add	r3, r2, #1
   17c4c:	mvn	r3, r3
   17c50:	cmp	r4, r3
   17c54:	bhi	17c98 <__assert_fail@plt+0x6b0c>
   17c58:	add	r4, r4, #1
   17c5c:	add	r4, r4, r2
   17c60:	mov	r1, r4
   17c64:	mov	r2, #1
   17c68:	bl	184f8 <__assert_fail@plt+0x736c>
   17c6c:	cmp	r0, #0
   17c70:	beq	17c9c <__assert_fail@plt+0x6b10>
   17c74:	str	r4, [r5]
   17c78:	pop	{r4, r5, r6, pc}
   17c7c:	cmp	r4, #0
   17c80:	moveq	r4, #64	; 0x40
   17c84:	mov	r1, r4
   17c88:	mov	r2, #1
   17c8c:	bl	184f8 <__assert_fail@plt+0x736c>
   17c90:	cmp	r0, #0
   17c94:	bne	17c74 <__assert_fail@plt+0x6ae8>
   17c98:	bl	18144 <__assert_fail@plt+0x6fb8>
   17c9c:	cmp	r4, #0
   17ca0:	bne	17c98 <__assert_fail@plt+0x6b0c>
   17ca4:	str	r4, [r5]
   17ca8:	pop	{r4, r5, r6, pc}
   17cac:	cmp	r0, #0
   17cb0:	push	{r4, r5, r6, lr}
   17cb4:	mov	r5, r1
   17cb8:	ldr	r4, [r1]
   17cbc:	mov	r6, r2
   17cc0:	beq	17d04 <__assert_fail@plt+0x6b78>
   17cc4:	lsr	r1, r4, #1
   17cc8:	add	r3, r1, #1
   17ccc:	mvn	r3, r3
   17cd0:	cmp	r4, r3
   17cd4:	bhi	17d3c <__assert_fail@plt+0x6bb0>
   17cd8:	add	r4, r4, #1
   17cdc:	add	r4, r4, r1
   17ce0:	mov	r1, r4
   17ce4:	bl	184f8 <__assert_fail@plt+0x736c>
   17ce8:	cmp	r0, #0
   17cec:	bne	17cfc <__assert_fail@plt+0x6b70>
   17cf0:	cmp	r4, #0
   17cf4:	cmpne	r6, #0
   17cf8:	bne	17d3c <__assert_fail@plt+0x6bb0>
   17cfc:	str	r4, [r5]
   17d00:	pop	{r4, r5, r6, pc}
   17d04:	cmp	r4, #0
   17d08:	bne	17d24 <__assert_fail@plt+0x6b98>
   17d0c:	mov	r1, r2
   17d10:	mov	r0, #64	; 0x40
   17d14:	bl	18544 <__assert_fail@plt+0x73b8>
   17d18:	cmp	r0, #0
   17d1c:	movne	r4, r0
   17d20:	addeq	r4, r0, #1
   17d24:	mov	r2, r6
   17d28:	mov	r1, r4
   17d2c:	mov	r0, #0
   17d30:	bl	184f8 <__assert_fail@plt+0x736c>
   17d34:	cmp	r0, #0
   17d38:	bne	17cfc <__assert_fail@plt+0x6b70>
   17d3c:	bl	18144 <__assert_fail@plt+0x6fb8>
   17d40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d44:	sub	sp, sp, #12
   17d48:	ldr	r6, [r1]
   17d4c:	mov	r8, r1
   17d50:	mov	r9, r0
   17d54:	asrs	r4, r6, #1
   17d58:	mov	sl, r2
   17d5c:	mov	fp, r3
   17d60:	ldr	r7, [sp, #48]	; 0x30
   17d64:	bmi	17ee0 <__assert_fail@plt+0x6d54>
   17d68:	mvn	r1, #-2147483648	; 0x80000000
   17d6c:	sub	r1, r1, r4
   17d70:	cmp	r6, r1
   17d74:	movle	r1, #0
   17d78:	movgt	r1, #1
   17d7c:	mvn	r3, fp
   17d80:	cmp	r1, #0
   17d84:	addeq	r4, r4, r6
   17d88:	mvnne	r4, #-2147483648	; 0x80000000
   17d8c:	lsr	r3, r3, #31
   17d90:	cmp	fp, r4
   17d94:	movge	r2, #0
   17d98:	andlt	r2, r3, #1
   17d9c:	cmp	r2, #0
   17da0:	beq	17e90 <__assert_fail@plt+0x6d04>
   17da4:	cmp	r7, #0
   17da8:	blt	17f78 <__assert_fail@plt+0x6dec>
   17dac:	bne	17f70 <__assert_fail@plt+0x6de4>
   17db0:	mov	r5, #64	; 0x40
   17db4:	mov	r1, r7
   17db8:	mov	r0, r5
   17dbc:	str	r3, [sp, #4]
   17dc0:	bl	18750 <__assert_fail@plt+0x75c4>
   17dc4:	mov	r1, r7
   17dc8:	mov	r4, r0
   17dcc:	mov	r0, r5
   17dd0:	bl	18970 <__assert_fail@plt+0x77e4>
   17dd4:	ldr	r3, [sp, #4]
   17dd8:	sub	r5, r5, r1
   17ddc:	cmp	r9, #0
   17de0:	sub	r2, r4, r6
   17de4:	streq	r9, [r8]
   17de8:	cmp	r2, sl
   17dec:	bge	17e70 <__assert_fail@plt+0x6ce4>
   17df0:	cmp	sl, #0
   17df4:	blt	17f10 <__assert_fail@plt+0x6d84>
   17df8:	cmp	r6, #0
   17dfc:	blt	17e1c <__assert_fail@plt+0x6c90>
   17e00:	mvn	r2, #-2147483648	; 0x80000000
   17e04:	sub	r2, r2, sl
   17e08:	cmp	r6, r2
   17e0c:	movle	r2, #0
   17e10:	movgt	r2, #1
   17e14:	cmp	r2, #0
   17e18:	bne	17f0c <__assert_fail@plt+0x6d80>
   17e1c:	add	r6, r6, sl
   17e20:	cmp	fp, r6
   17e24:	movge	r3, #0
   17e28:	andlt	r3, r3, #1
   17e2c:	cmp	r3, #0
   17e30:	mov	r4, r6
   17e34:	bne	17f0c <__assert_fail@plt+0x6d80>
   17e38:	cmp	r7, #0
   17e3c:	blt	17f24 <__assert_fail@plt+0x6d98>
   17e40:	beq	17e6c <__assert_fail@plt+0x6ce0>
   17e44:	cmp	r6, #0
   17e48:	blt	17fc8 <__assert_fail@plt+0x6e3c>
   17e4c:	mov	r1, r7
   17e50:	mvn	r0, #-2147483648	; 0x80000000
   17e54:	bl	18750 <__assert_fail@plt+0x75c4>
   17e58:	cmp	r6, r0
   17e5c:	movle	r0, #0
   17e60:	movgt	r0, #1
   17e64:	cmp	r0, #0
   17e68:	bne	17f0c <__assert_fail@plt+0x6d80>
   17e6c:	mul	r5, r6, r7
   17e70:	mov	r1, r5
   17e74:	mov	r0, r9
   17e78:	bl	181f8 <__assert_fail@plt+0x706c>
   17e7c:	cmp	r0, #0
   17e80:	beq	17ef4 <__assert_fail@plt+0x6d68>
   17e84:	str	r4, [r8]
   17e88:	add	sp, sp, #12
   17e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e90:	cmp	r7, #0
   17e94:	blt	17f50 <__assert_fail@plt+0x6dc4>
   17e98:	beq	17db0 <__assert_fail@plt+0x6c24>
   17e9c:	cmp	r4, #0
   17ea0:	blt	17f80 <__assert_fail@plt+0x6df4>
   17ea4:	mov	r1, r7
   17ea8:	mvn	r0, #-2147483648	; 0x80000000
   17eac:	str	r3, [sp, #4]
   17eb0:	bl	18750 <__assert_fail@plt+0x75c4>
   17eb4:	ldr	r3, [sp, #4]
   17eb8:	cmp	r0, r4
   17ebc:	movge	r0, #0
   17ec0:	movlt	r0, #1
   17ec4:	cmp	r0, #0
   17ec8:	mvnne	r5, #-2147483648	; 0x80000000
   17ecc:	bne	17db4 <__assert_fail@plt+0x6c28>
   17ed0:	mul	r5, r7, r4
   17ed4:	cmp	r5, #63	; 0x3f
   17ed8:	bgt	17ddc <__assert_fail@plt+0x6c50>
   17edc:	b	17db0 <__assert_fail@plt+0x6c24>
   17ee0:	rsb	r1, r4, #-2147483648	; 0x80000000
   17ee4:	cmp	r6, r1
   17ee8:	movge	r1, #0
   17eec:	movlt	r1, #1
   17ef0:	b	17d7c <__assert_fail@plt+0x6bf0>
   17ef4:	adds	r5, r5, #0
   17ef8:	movne	r5, #1
   17efc:	cmp	r9, #0
   17f00:	orreq	r5, r5, #1
   17f04:	cmp	r5, #0
   17f08:	beq	17e84 <__assert_fail@plt+0x6cf8>
   17f0c:	bl	18144 <__assert_fail@plt+0x6fb8>
   17f10:	rsb	r2, sl, #-2147483648	; 0x80000000
   17f14:	cmp	r6, r2
   17f18:	movge	r2, #0
   17f1c:	movlt	r2, #1
   17f20:	b	17e14 <__assert_fail@plt+0x6c88>
   17f24:	cmp	r6, #0
   17f28:	blt	17fac <__assert_fail@plt+0x6e20>
   17f2c:	cmn	r7, #1
   17f30:	beq	17e6c <__assert_fail@plt+0x6ce0>
   17f34:	mov	r1, r7
   17f38:	mov	r0, #-2147483648	; 0x80000000
   17f3c:	bl	18750 <__assert_fail@plt+0x75c4>
   17f40:	cmp	r6, r0
   17f44:	movle	r0, #0
   17f48:	movgt	r0, #1
   17f4c:	b	17e64 <__assert_fail@plt+0x6cd8>
   17f50:	cmp	r4, #0
   17f54:	blt	17fec <__assert_fail@plt+0x6e60>
   17f58:	cmn	r7, #1
   17f5c:	beq	17ed0 <__assert_fail@plt+0x6d44>
   17f60:	str	r3, [sp, #4]
   17f64:	mov	r1, r7
   17f68:	mov	r0, #-2147483648	; 0x80000000
   17f6c:	b	17eb0 <__assert_fail@plt+0x6d24>
   17f70:	mov	r4, fp
   17f74:	b	17ea4 <__assert_fail@plt+0x6d18>
   17f78:	mov	r4, fp
   17f7c:	b	17f58 <__assert_fail@plt+0x6dcc>
   17f80:	cmn	r4, #1
   17f84:	beq	17ed0 <__assert_fail@plt+0x6d44>
   17f88:	mov	r1, r4
   17f8c:	mov	r0, #-2147483648	; 0x80000000
   17f90:	str	r3, [sp, #4]
   17f94:	bl	18750 <__assert_fail@plt+0x75c4>
   17f98:	ldr	r3, [sp, #4]
   17f9c:	cmp	r7, r0
   17fa0:	movle	r0, #0
   17fa4:	movgt	r0, #1
   17fa8:	b	17ec4 <__assert_fail@plt+0x6d38>
   17fac:	mov	r1, r7
   17fb0:	mvn	r0, #-2147483648	; 0x80000000
   17fb4:	bl	18750 <__assert_fail@plt+0x75c4>
   17fb8:	cmp	r6, r0
   17fbc:	movge	r0, #0
   17fc0:	movlt	r0, #1
   17fc4:	b	17e64 <__assert_fail@plt+0x6cd8>
   17fc8:	cmn	r6, #1
   17fcc:	beq	17e6c <__assert_fail@plt+0x6ce0>
   17fd0:	mov	r1, r6
   17fd4:	mov	r0, #-2147483648	; 0x80000000
   17fd8:	bl	18750 <__assert_fail@plt+0x75c4>
   17fdc:	cmp	r7, r0
   17fe0:	movle	r0, #0
   17fe4:	movgt	r0, #1
   17fe8:	b	17e64 <__assert_fail@plt+0x6cd8>
   17fec:	mov	r1, r7
   17ff0:	mvn	r0, #-2147483648	; 0x80000000
   17ff4:	str	r3, [sp, #4]
   17ff8:	bl	18750 <__assert_fail@plt+0x75c4>
   17ffc:	ldr	r3, [sp, #4]
   18000:	cmp	r0, r4
   18004:	movle	r0, #0
   18008:	movgt	r0, #1
   1800c:	b	17ec4 <__assert_fail@plt+0x6d38>
   18010:	push	{r4, lr}
   18014:	mov	r1, #1
   18018:	bl	18184 <__assert_fail@plt+0x6ff8>
   1801c:	cmp	r0, #0
   18020:	popne	{r4, pc}
   18024:	bl	18144 <__assert_fail@plt+0x6fb8>
   18028:	push	{r4, lr}
   1802c:	mov	r1, #1
   18030:	bl	18184 <__assert_fail@plt+0x6ff8>
   18034:	cmp	r0, #0
   18038:	popne	{r4, pc}
   1803c:	bl	18144 <__assert_fail@plt+0x6fb8>
   18040:	push	{r4, lr}
   18044:	bl	18184 <__assert_fail@plt+0x6ff8>
   18048:	cmp	r0, #0
   1804c:	popne	{r4, pc}
   18050:	bl	18144 <__assert_fail@plt+0x6fb8>
   18054:	push	{r4, lr}
   18058:	bl	18184 <__assert_fail@plt+0x6ff8>
   1805c:	cmp	r0, #0
   18060:	popne	{r4, pc}
   18064:	bl	18144 <__assert_fail@plt+0x6fb8>
   18068:	push	{r4, r5, r6, lr}
   1806c:	mov	r6, r0
   18070:	mov	r0, r1
   18074:	mov	r4, r1
   18078:	bl	181cc <__assert_fail@plt+0x7040>
   1807c:	subs	r5, r0, #0
   18080:	beq	18098 <__assert_fail@plt+0x6f0c>
   18084:	mov	r2, r4
   18088:	mov	r1, r6
   1808c:	bl	10f04 <memcpy@plt>
   18090:	mov	r0, r5
   18094:	pop	{r4, r5, r6, pc}
   18098:	bl	18144 <__assert_fail@plt+0x6fb8>
   1809c:	push	{r4, r5, r6, lr}
   180a0:	mov	r6, r0
   180a4:	mov	r0, r1
   180a8:	mov	r4, r1
   180ac:	bl	181cc <__assert_fail@plt+0x7040>
   180b0:	subs	r5, r0, #0
   180b4:	beq	180cc <__assert_fail@plt+0x6f40>
   180b8:	mov	r2, r4
   180bc:	mov	r1, r6
   180c0:	bl	10f04 <memcpy@plt>
   180c4:	mov	r0, r5
   180c8:	pop	{r4, r5, r6, pc}
   180cc:	bl	18144 <__assert_fail@plt+0x6fb8>
   180d0:	push	{r4, r5, r6, lr}
   180d4:	mov	r6, r0
   180d8:	add	r0, r1, #1
   180dc:	mov	r4, r1
   180e0:	bl	181cc <__assert_fail@plt+0x7040>
   180e4:	subs	r5, r0, #0
   180e8:	beq	18108 <__assert_fail@plt+0x6f7c>
   180ec:	mov	r3, #0
   180f0:	mov	r1, r6
   180f4:	strb	r3, [r5, r4]
   180f8:	mov	r2, r4
   180fc:	bl	10f04 <memcpy@plt>
   18100:	mov	r0, r5
   18104:	pop	{r4, r5, r6, pc}
   18108:	bl	18144 <__assert_fail@plt+0x6fb8>
   1810c:	push	{r4, r5, r6, lr}
   18110:	mov	r6, r0
   18114:	bl	11078 <strlen@plt>
   18118:	add	r4, r0, #1
   1811c:	mov	r0, r4
   18120:	bl	181cc <__assert_fail@plt+0x7040>
   18124:	subs	r5, r0, #0
   18128:	beq	18140 <__assert_fail@plt+0x6fb4>
   1812c:	mov	r2, r4
   18130:	mov	r1, r6
   18134:	bl	10f04 <memcpy@plt>
   18138:	mov	r0, r5
   1813c:	pop	{r4, r5, r6, pc}
   18140:	bl	18144 <__assert_fail@plt+0x6fb8>
   18144:	ldr	r3, [pc, #44]	; 18178 <__assert_fail@plt+0x6fec>
   18148:	push	{r4, lr}
   1814c:	mov	r2, #5
   18150:	ldr	r1, [pc, #36]	; 1817c <__assert_fail@plt+0x6ff0>
   18154:	mov	r0, #0
   18158:	ldr	r4, [r3]
   1815c:	bl	10f4c <dcgettext@plt>
   18160:	ldr	r2, [pc, #24]	; 18180 <__assert_fail@plt+0x6ff4>
   18164:	mov	r1, #0
   18168:	mov	r3, r0
   1816c:	mov	r0, r4
   18170:	bl	10fd0 <error@plt>
   18174:	bl	11174 <abort@plt>
   18178:	andeq	sl, r2, r4, lsr #2
   1817c:	muleq	r1, r4, sl
   18180:	andeq	r9, r1, r0, asr r6
   18184:	cmp	r1, #0
   18188:	cmpne	r0, #0
   1818c:	moveq	r1, #1
   18190:	moveq	r0, r1
   18194:	umull	r2, r3, r0, r1
   18198:	adds	r3, r3, #0
   1819c:	movne	r3, #1
   181a0:	cmp	r2, #0
   181a4:	blt	181b4 <__assert_fail@plt+0x7028>
   181a8:	cmp	r3, #0
   181ac:	bne	181b4 <__assert_fail@plt+0x7028>
   181b0:	b	10e98 <calloc@plt>
   181b4:	push	{r4, lr}
   181b8:	bl	11090 <__errno_location@plt>
   181bc:	mov	r3, #12
   181c0:	str	r3, [r0]
   181c4:	mov	r0, #0
   181c8:	pop	{r4, pc}
   181cc:	cmp	r0, #0
   181d0:	moveq	r0, #1
   181d4:	cmp	r0, #0
   181d8:	blt	181e0 <__assert_fail@plt+0x7054>
   181dc:	b	10ff4 <malloc@plt>
   181e0:	push	{r4, lr}
   181e4:	bl	11090 <__errno_location@plt>
   181e8:	mov	r3, #12
   181ec:	str	r3, [r0]
   181f0:	mov	r0, #0
   181f4:	pop	{r4, pc}
   181f8:	cmp	r0, #0
   181fc:	beq	18220 <__assert_fail@plt+0x7094>
   18200:	cmp	r1, #0
   18204:	push	{lr}		; (str lr, [sp, #-4]!)
   18208:	sub	sp, sp, #12
   1820c:	beq	18228 <__assert_fail@plt+0x709c>
   18210:	blt	18240 <__assert_fail@plt+0x70b4>
   18214:	add	sp, sp, #12
   18218:	pop	{lr}		; (ldr lr, [sp], #4)
   1821c:	b	10f70 <realloc@plt>
   18220:	mov	r0, r1
   18224:	b	181cc <__assert_fail@plt+0x7040>
   18228:	str	r1, [sp, #4]
   1822c:	bl	12c14 <__assert_fail@plt+0x1a88>
   18230:	ldr	r3, [sp, #4]
   18234:	mov	r0, r3
   18238:	add	sp, sp, #12
   1823c:	pop	{pc}		; (ldr pc, [sp], #4)
   18240:	bl	11090 <__errno_location@plt>
   18244:	mov	r2, #12
   18248:	mov	r3, #0
   1824c:	str	r2, [r0]
   18250:	b	18234 <__assert_fail@plt+0x70a8>
   18254:	push	{r4, r5, r6, lr}
   18258:	mov	r4, r0
   1825c:	bl	10fb8 <__fpending@plt>
   18260:	ldr	r5, [r4]
   18264:	and	r5, r5, #32
   18268:	mov	r6, r0
   1826c:	mov	r0, r4
   18270:	bl	182d0 <__assert_fail@plt+0x7144>
   18274:	cmp	r5, #0
   18278:	mov	r4, r0
   1827c:	bne	1829c <__assert_fail@plt+0x7110>
   18280:	cmp	r0, #0
   18284:	beq	18294 <__assert_fail@plt+0x7108>
   18288:	cmp	r6, #0
   1828c:	beq	182b8 <__assert_fail@plt+0x712c>
   18290:	mvn	r4, #0
   18294:	mov	r0, r4
   18298:	pop	{r4, r5, r6, pc}
   1829c:	cmp	r0, #0
   182a0:	bne	18290 <__assert_fail@plt+0x7104>
   182a4:	bl	11090 <__errno_location@plt>
   182a8:	str	r4, [r0]
   182ac:	mvn	r4, #0
   182b0:	mov	r0, r4
   182b4:	pop	{r4, r5, r6, pc}
   182b8:	bl	11090 <__errno_location@plt>
   182bc:	ldr	r4, [r0]
   182c0:	subs	r4, r4, #9
   182c4:	mvnne	r4, #0
   182c8:	mov	r0, r4
   182cc:	pop	{r4, r5, r6, pc}
   182d0:	push	{r4, r5, lr}
   182d4:	sub	sp, sp, #12
   182d8:	mov	r4, r0
   182dc:	bl	110d8 <fileno@plt>
   182e0:	cmp	r0, #0
   182e4:	mov	r0, r4
   182e8:	blt	18364 <__assert_fail@plt+0x71d8>
   182ec:	bl	11018 <__freading@plt>
   182f0:	cmp	r0, #0
   182f4:	bne	18330 <__assert_fail@plt+0x71a4>
   182f8:	mov	r0, r4
   182fc:	bl	18370 <__assert_fail@plt+0x71e4>
   18300:	cmp	r0, #0
   18304:	beq	18360 <__assert_fail@plt+0x71d4>
   18308:	bl	11090 <__errno_location@plt>
   1830c:	mov	r5, r0
   18310:	mov	r0, r4
   18314:	ldr	r4, [r5]
   18318:	bl	110f0 <fclose@plt>
   1831c:	cmp	r4, #0
   18320:	mvnne	r0, #0
   18324:	strne	r4, [r5]
   18328:	add	sp, sp, #12
   1832c:	pop	{r4, r5, pc}
   18330:	mov	r0, r4
   18334:	bl	110d8 <fileno@plt>
   18338:	mov	r3, #1
   1833c:	str	r3, [sp]
   18340:	mov	r2, #0
   18344:	mov	r3, #0
   18348:	bl	10fa0 <lseek64@plt>
   1834c:	mvn	r3, #0
   18350:	mvn	r2, #0
   18354:	cmp	r1, r3
   18358:	cmpeq	r0, r2
   1835c:	bne	182f8 <__assert_fail@plt+0x716c>
   18360:	mov	r0, r4
   18364:	add	sp, sp, #12
   18368:	pop	{r4, r5, lr}
   1836c:	b	110f0 <fclose@plt>
   18370:	push	{r4, lr}
   18374:	subs	r4, r0, #0
   18378:	sub	sp, sp, #8
   1837c:	beq	18398 <__assert_fail@plt+0x720c>
   18380:	bl	11018 <__freading@plt>
   18384:	cmp	r0, #0
   18388:	beq	18398 <__assert_fail@plt+0x720c>
   1838c:	ldr	r3, [r4]
   18390:	tst	r3, #256	; 0x100
   18394:	bne	183a8 <__assert_fail@plt+0x721c>
   18398:	mov	r0, r4
   1839c:	add	sp, sp, #8
   183a0:	pop	{r4, lr}
   183a4:	b	10ec8 <fflush@plt>
   183a8:	mov	r3, #1
   183ac:	str	r3, [sp]
   183b0:	mov	r2, #0
   183b4:	mov	r3, #0
   183b8:	mov	r0, r4
   183bc:	bl	183d0 <__assert_fail@plt+0x7244>
   183c0:	mov	r0, r4
   183c4:	add	sp, sp, #8
   183c8:	pop	{r4, lr}
   183cc:	b	10ec8 <fflush@plt>
   183d0:	push	{r4, r5, r6, r7, r8, lr}
   183d4:	sub	sp, sp, #8
   183d8:	ldmib	r0, {ip, lr}
   183dc:	mov	r4, r0
   183e0:	ldr	r5, [sp, #32]
   183e4:	cmp	lr, ip
   183e8:	beq	18400 <__assert_fail@plt+0x7274>
   183ec:	str	r5, [sp, #32]
   183f0:	mov	r0, r4
   183f4:	add	sp, sp, #8
   183f8:	pop	{r4, r5, r6, r7, r8, lr}
   183fc:	b	110fc <fseeko64@plt>
   18400:	ldr	lr, [r0, #20]
   18404:	ldr	ip, [r0, #16]
   18408:	cmp	lr, ip
   1840c:	bne	183ec <__assert_fail@plt+0x7260>
   18410:	ldr	r8, [r0, #36]	; 0x24
   18414:	cmp	r8, #0
   18418:	bne	183ec <__assert_fail@plt+0x7260>
   1841c:	mov	r6, r2
   18420:	mov	r7, r3
   18424:	bl	110d8 <fileno@plt>
   18428:	mov	r2, r6
   1842c:	mov	r3, r7
   18430:	str	r5, [sp]
   18434:	bl	10fa0 <lseek64@plt>
   18438:	mvn	r3, #0
   1843c:	mvn	r2, #0
   18440:	cmp	r1, r3
   18444:	cmpeq	r0, r2
   18448:	beq	18468 <__assert_fail@plt+0x72dc>
   1844c:	ldr	r3, [r4]
   18450:	strd	r0, [r4, #80]	; 0x50
   18454:	mov	r0, r8
   18458:	bic	r3, r3, #16
   1845c:	str	r3, [r4]
   18460:	add	sp, sp, #8
   18464:	pop	{r4, r5, r6, r7, r8, pc}
   18468:	mvn	r0, #0
   1846c:	b	18460 <__assert_fail@plt+0x72d4>
   18470:	push	{r4, lr}
   18474:	mov	r0, #14
   18478:	bl	1112c <nl_langinfo@plt>
   1847c:	cmp	r0, #0
   18480:	beq	18498 <__assert_fail@plt+0x730c>
   18484:	ldrb	r2, [r0]
   18488:	ldr	r3, [pc, #16]	; 184a0 <__assert_fail@plt+0x7314>
   1848c:	cmp	r2, #0
   18490:	moveq	r0, r3
   18494:	pop	{r4, pc}
   18498:	ldr	r0, [pc]	; 184a0 <__assert_fail@plt+0x7314>
   1849c:	pop	{r4, pc}
   184a0:	andeq	r9, r1, r8, lsr #21
   184a4:	push	{r4, r5, r6, r7, lr}
   184a8:	subs	r6, r0, #0
   184ac:	sub	sp, sp, #12
   184b0:	addeq	r6, sp, #4
   184b4:	mov	r0, r6
   184b8:	mov	r5, r2
   184bc:	mov	r7, r1
   184c0:	bl	10fc4 <mbrtowc@plt>
   184c4:	cmp	r5, #0
   184c8:	cmnne	r0, #3
   184cc:	mov	r4, r0
   184d0:	bls	184ec <__assert_fail@plt+0x7360>
   184d4:	mov	r0, #0
   184d8:	bl	12c6c <__assert_fail@plt+0x1ae0>
   184dc:	cmp	r0, #0
   184e0:	moveq	r4, #1
   184e4:	ldrbeq	r3, [r7]
   184e8:	streq	r3, [r6]
   184ec:	mov	r0, r4
   184f0:	add	sp, sp, #12
   184f4:	pop	{r4, r5, r6, r7, pc}
   184f8:	push	{r4, r5, r6, lr}
   184fc:	subs	r4, r2, #0
   18500:	mov	r6, r0
   18504:	mov	r5, r1
   18508:	beq	18534 <__assert_fail@plt+0x73a8>
   1850c:	mov	r1, r4
   18510:	mvn	r0, #0
   18514:	bl	18544 <__assert_fail@plt+0x73b8>
   18518:	cmp	r0, r5
   1851c:	bcs	18534 <__assert_fail@plt+0x73a8>
   18520:	bl	11090 <__errno_location@plt>
   18524:	mov	r3, #12
   18528:	str	r3, [r0]
   1852c:	mov	r0, #0
   18530:	pop	{r4, r5, r6, pc}
   18534:	mul	r1, r5, r4
   18538:	mov	r0, r6
   1853c:	pop	{r4, r5, r6, lr}
   18540:	b	181f8 <__assert_fail@plt+0x706c>
   18544:	subs	r2, r1, #1
   18548:	bxeq	lr
   1854c:	bcc	18724 <__assert_fail@plt+0x7598>
   18550:	cmp	r0, r1
   18554:	bls	18708 <__assert_fail@plt+0x757c>
   18558:	tst	r1, r2
   1855c:	beq	18714 <__assert_fail@plt+0x7588>
   18560:	clz	r3, r0
   18564:	clz	r2, r1
   18568:	sub	r3, r2, r3
   1856c:	rsbs	r3, r3, #31
   18570:	addne	r3, r3, r3, lsl #1
   18574:	mov	r2, #0
   18578:	addne	pc, pc, r3, lsl #2
   1857c:	nop			; (mov r0, r0)
   18580:	cmp	r0, r1, lsl #31
   18584:	adc	r2, r2, r2
   18588:	subcs	r0, r0, r1, lsl #31
   1858c:	cmp	r0, r1, lsl #30
   18590:	adc	r2, r2, r2
   18594:	subcs	r0, r0, r1, lsl #30
   18598:	cmp	r0, r1, lsl #29
   1859c:	adc	r2, r2, r2
   185a0:	subcs	r0, r0, r1, lsl #29
   185a4:	cmp	r0, r1, lsl #28
   185a8:	adc	r2, r2, r2
   185ac:	subcs	r0, r0, r1, lsl #28
   185b0:	cmp	r0, r1, lsl #27
   185b4:	adc	r2, r2, r2
   185b8:	subcs	r0, r0, r1, lsl #27
   185bc:	cmp	r0, r1, lsl #26
   185c0:	adc	r2, r2, r2
   185c4:	subcs	r0, r0, r1, lsl #26
   185c8:	cmp	r0, r1, lsl #25
   185cc:	adc	r2, r2, r2
   185d0:	subcs	r0, r0, r1, lsl #25
   185d4:	cmp	r0, r1, lsl #24
   185d8:	adc	r2, r2, r2
   185dc:	subcs	r0, r0, r1, lsl #24
   185e0:	cmp	r0, r1, lsl #23
   185e4:	adc	r2, r2, r2
   185e8:	subcs	r0, r0, r1, lsl #23
   185ec:	cmp	r0, r1, lsl #22
   185f0:	adc	r2, r2, r2
   185f4:	subcs	r0, r0, r1, lsl #22
   185f8:	cmp	r0, r1, lsl #21
   185fc:	adc	r2, r2, r2
   18600:	subcs	r0, r0, r1, lsl #21
   18604:	cmp	r0, r1, lsl #20
   18608:	adc	r2, r2, r2
   1860c:	subcs	r0, r0, r1, lsl #20
   18610:	cmp	r0, r1, lsl #19
   18614:	adc	r2, r2, r2
   18618:	subcs	r0, r0, r1, lsl #19
   1861c:	cmp	r0, r1, lsl #18
   18620:	adc	r2, r2, r2
   18624:	subcs	r0, r0, r1, lsl #18
   18628:	cmp	r0, r1, lsl #17
   1862c:	adc	r2, r2, r2
   18630:	subcs	r0, r0, r1, lsl #17
   18634:	cmp	r0, r1, lsl #16
   18638:	adc	r2, r2, r2
   1863c:	subcs	r0, r0, r1, lsl #16
   18640:	cmp	r0, r1, lsl #15
   18644:	adc	r2, r2, r2
   18648:	subcs	r0, r0, r1, lsl #15
   1864c:	cmp	r0, r1, lsl #14
   18650:	adc	r2, r2, r2
   18654:	subcs	r0, r0, r1, lsl #14
   18658:	cmp	r0, r1, lsl #13
   1865c:	adc	r2, r2, r2
   18660:	subcs	r0, r0, r1, lsl #13
   18664:	cmp	r0, r1, lsl #12
   18668:	adc	r2, r2, r2
   1866c:	subcs	r0, r0, r1, lsl #12
   18670:	cmp	r0, r1, lsl #11
   18674:	adc	r2, r2, r2
   18678:	subcs	r0, r0, r1, lsl #11
   1867c:	cmp	r0, r1, lsl #10
   18680:	adc	r2, r2, r2
   18684:	subcs	r0, r0, r1, lsl #10
   18688:	cmp	r0, r1, lsl #9
   1868c:	adc	r2, r2, r2
   18690:	subcs	r0, r0, r1, lsl #9
   18694:	cmp	r0, r1, lsl #8
   18698:	adc	r2, r2, r2
   1869c:	subcs	r0, r0, r1, lsl #8
   186a0:	cmp	r0, r1, lsl #7
   186a4:	adc	r2, r2, r2
   186a8:	subcs	r0, r0, r1, lsl #7
   186ac:	cmp	r0, r1, lsl #6
   186b0:	adc	r2, r2, r2
   186b4:	subcs	r0, r0, r1, lsl #6
   186b8:	cmp	r0, r1, lsl #5
   186bc:	adc	r2, r2, r2
   186c0:	subcs	r0, r0, r1, lsl #5
   186c4:	cmp	r0, r1, lsl #4
   186c8:	adc	r2, r2, r2
   186cc:	subcs	r0, r0, r1, lsl #4
   186d0:	cmp	r0, r1, lsl #3
   186d4:	adc	r2, r2, r2
   186d8:	subcs	r0, r0, r1, lsl #3
   186dc:	cmp	r0, r1, lsl #2
   186e0:	adc	r2, r2, r2
   186e4:	subcs	r0, r0, r1, lsl #2
   186e8:	cmp	r0, r1, lsl #1
   186ec:	adc	r2, r2, r2
   186f0:	subcs	r0, r0, r1, lsl #1
   186f4:	cmp	r0, r1
   186f8:	adc	r2, r2, r2
   186fc:	subcs	r0, r0, r1
   18700:	mov	r0, r2
   18704:	bx	lr
   18708:	moveq	r0, #1
   1870c:	movne	r0, #0
   18710:	bx	lr
   18714:	clz	r2, r1
   18718:	rsb	r2, r2, #31
   1871c:	lsr	r0, r0, r2
   18720:	bx	lr
   18724:	cmp	r0, #0
   18728:	mvnne	r0, #0
   1872c:	b	18a64 <__assert_fail@plt+0x78d8>
   18730:	cmp	r1, #0
   18734:	beq	18724 <__assert_fail@plt+0x7598>
   18738:	push	{r0, r1, lr}
   1873c:	bl	18544 <__assert_fail@plt+0x73b8>
   18740:	pop	{r1, r2, lr}
   18744:	mul	r3, r2, r0
   18748:	sub	r1, r1, r3
   1874c:	bx	lr
   18750:	cmp	r1, #0
   18754:	beq	18960 <__assert_fail@plt+0x77d4>
   18758:	eor	ip, r0, r1
   1875c:	rsbmi	r1, r1, #0
   18760:	subs	r2, r1, #1
   18764:	beq	1892c <__assert_fail@plt+0x77a0>
   18768:	movs	r3, r0
   1876c:	rsbmi	r3, r0, #0
   18770:	cmp	r3, r1
   18774:	bls	18938 <__assert_fail@plt+0x77ac>
   18778:	tst	r1, r2
   1877c:	beq	18948 <__assert_fail@plt+0x77bc>
   18780:	clz	r2, r3
   18784:	clz	r0, r1
   18788:	sub	r2, r0, r2
   1878c:	rsbs	r2, r2, #31
   18790:	addne	r2, r2, r2, lsl #1
   18794:	mov	r0, #0
   18798:	addne	pc, pc, r2, lsl #2
   1879c:	nop			; (mov r0, r0)
   187a0:	cmp	r3, r1, lsl #31
   187a4:	adc	r0, r0, r0
   187a8:	subcs	r3, r3, r1, lsl #31
   187ac:	cmp	r3, r1, lsl #30
   187b0:	adc	r0, r0, r0
   187b4:	subcs	r3, r3, r1, lsl #30
   187b8:	cmp	r3, r1, lsl #29
   187bc:	adc	r0, r0, r0
   187c0:	subcs	r3, r3, r1, lsl #29
   187c4:	cmp	r3, r1, lsl #28
   187c8:	adc	r0, r0, r0
   187cc:	subcs	r3, r3, r1, lsl #28
   187d0:	cmp	r3, r1, lsl #27
   187d4:	adc	r0, r0, r0
   187d8:	subcs	r3, r3, r1, lsl #27
   187dc:	cmp	r3, r1, lsl #26
   187e0:	adc	r0, r0, r0
   187e4:	subcs	r3, r3, r1, lsl #26
   187e8:	cmp	r3, r1, lsl #25
   187ec:	adc	r0, r0, r0
   187f0:	subcs	r3, r3, r1, lsl #25
   187f4:	cmp	r3, r1, lsl #24
   187f8:	adc	r0, r0, r0
   187fc:	subcs	r3, r3, r1, lsl #24
   18800:	cmp	r3, r1, lsl #23
   18804:	adc	r0, r0, r0
   18808:	subcs	r3, r3, r1, lsl #23
   1880c:	cmp	r3, r1, lsl #22
   18810:	adc	r0, r0, r0
   18814:	subcs	r3, r3, r1, lsl #22
   18818:	cmp	r3, r1, lsl #21
   1881c:	adc	r0, r0, r0
   18820:	subcs	r3, r3, r1, lsl #21
   18824:	cmp	r3, r1, lsl #20
   18828:	adc	r0, r0, r0
   1882c:	subcs	r3, r3, r1, lsl #20
   18830:	cmp	r3, r1, lsl #19
   18834:	adc	r0, r0, r0
   18838:	subcs	r3, r3, r1, lsl #19
   1883c:	cmp	r3, r1, lsl #18
   18840:	adc	r0, r0, r0
   18844:	subcs	r3, r3, r1, lsl #18
   18848:	cmp	r3, r1, lsl #17
   1884c:	adc	r0, r0, r0
   18850:	subcs	r3, r3, r1, lsl #17
   18854:	cmp	r3, r1, lsl #16
   18858:	adc	r0, r0, r0
   1885c:	subcs	r3, r3, r1, lsl #16
   18860:	cmp	r3, r1, lsl #15
   18864:	adc	r0, r0, r0
   18868:	subcs	r3, r3, r1, lsl #15
   1886c:	cmp	r3, r1, lsl #14
   18870:	adc	r0, r0, r0
   18874:	subcs	r3, r3, r1, lsl #14
   18878:	cmp	r3, r1, lsl #13
   1887c:	adc	r0, r0, r0
   18880:	subcs	r3, r3, r1, lsl #13
   18884:	cmp	r3, r1, lsl #12
   18888:	adc	r0, r0, r0
   1888c:	subcs	r3, r3, r1, lsl #12
   18890:	cmp	r3, r1, lsl #11
   18894:	adc	r0, r0, r0
   18898:	subcs	r3, r3, r1, lsl #11
   1889c:	cmp	r3, r1, lsl #10
   188a0:	adc	r0, r0, r0
   188a4:	subcs	r3, r3, r1, lsl #10
   188a8:	cmp	r3, r1, lsl #9
   188ac:	adc	r0, r0, r0
   188b0:	subcs	r3, r3, r1, lsl #9
   188b4:	cmp	r3, r1, lsl #8
   188b8:	adc	r0, r0, r0
   188bc:	subcs	r3, r3, r1, lsl #8
   188c0:	cmp	r3, r1, lsl #7
   188c4:	adc	r0, r0, r0
   188c8:	subcs	r3, r3, r1, lsl #7
   188cc:	cmp	r3, r1, lsl #6
   188d0:	adc	r0, r0, r0
   188d4:	subcs	r3, r3, r1, lsl #6
   188d8:	cmp	r3, r1, lsl #5
   188dc:	adc	r0, r0, r0
   188e0:	subcs	r3, r3, r1, lsl #5
   188e4:	cmp	r3, r1, lsl #4
   188e8:	adc	r0, r0, r0
   188ec:	subcs	r3, r3, r1, lsl #4
   188f0:	cmp	r3, r1, lsl #3
   188f4:	adc	r0, r0, r0
   188f8:	subcs	r3, r3, r1, lsl #3
   188fc:	cmp	r3, r1, lsl #2
   18900:	adc	r0, r0, r0
   18904:	subcs	r3, r3, r1, lsl #2
   18908:	cmp	r3, r1, lsl #1
   1890c:	adc	r0, r0, r0
   18910:	subcs	r3, r3, r1, lsl #1
   18914:	cmp	r3, r1
   18918:	adc	r0, r0, r0
   1891c:	subcs	r3, r3, r1
   18920:	cmp	ip, #0
   18924:	rsbmi	r0, r0, #0
   18928:	bx	lr
   1892c:	teq	ip, r0
   18930:	rsbmi	r0, r0, #0
   18934:	bx	lr
   18938:	movcc	r0, #0
   1893c:	asreq	r0, ip, #31
   18940:	orreq	r0, r0, #1
   18944:	bx	lr
   18948:	clz	r2, r1
   1894c:	rsb	r2, r2, #31
   18950:	cmp	ip, #0
   18954:	lsr	r0, r3, r2
   18958:	rsbmi	r0, r0, #0
   1895c:	bx	lr
   18960:	cmp	r0, #0
   18964:	mvngt	r0, #-2147483648	; 0x80000000
   18968:	movlt	r0, #-2147483648	; 0x80000000
   1896c:	b	18a64 <__assert_fail@plt+0x78d8>
   18970:	cmp	r1, #0
   18974:	beq	18960 <__assert_fail@plt+0x77d4>
   18978:	push	{r0, r1, lr}
   1897c:	bl	18758 <__assert_fail@plt+0x75cc>
   18980:	pop	{r1, r2, lr}
   18984:	mul	r3, r2, r0
   18988:	sub	r1, r1, r3
   1898c:	bx	lr
   18990:	cmp	r3, #0
   18994:	cmpeq	r2, #0
   18998:	bne	189bc <__assert_fail@plt+0x7830>
   1899c:	cmp	r1, #0
   189a0:	movlt	r1, #-2147483648	; 0x80000000
   189a4:	movlt	r0, #0
   189a8:	blt	189b8 <__assert_fail@plt+0x782c>
   189ac:	cmpeq	r0, #0
   189b0:	mvnne	r1, #-2147483648	; 0x80000000
   189b4:	mvnne	r0, #0
   189b8:	b	18a64 <__assert_fail@plt+0x78d8>
   189bc:	sub	sp, sp, #8
   189c0:	push	{sp, lr}
   189c4:	cmp	r1, #0
   189c8:	blt	189e8 <__assert_fail@plt+0x785c>
   189cc:	cmp	r3, #0
   189d0:	blt	18a1c <__assert_fail@plt+0x7890>
   189d4:	bl	18a74 <__assert_fail@plt+0x78e8>
   189d8:	ldr	lr, [sp, #4]
   189dc:	add	sp, sp, #8
   189e0:	pop	{r2, r3}
   189e4:	bx	lr
   189e8:	rsbs	r0, r0, #0
   189ec:	sbc	r1, r1, r1, lsl #1
   189f0:	cmp	r3, #0
   189f4:	blt	18a40 <__assert_fail@plt+0x78b4>
   189f8:	bl	18a74 <__assert_fail@plt+0x78e8>
   189fc:	ldr	lr, [sp, #4]
   18a00:	add	sp, sp, #8
   18a04:	pop	{r2, r3}
   18a08:	rsbs	r0, r0, #0
   18a0c:	sbc	r1, r1, r1, lsl #1
   18a10:	rsbs	r2, r2, #0
   18a14:	sbc	r3, r3, r3, lsl #1
   18a18:	bx	lr
   18a1c:	rsbs	r2, r2, #0
   18a20:	sbc	r3, r3, r3, lsl #1
   18a24:	bl	18a74 <__assert_fail@plt+0x78e8>
   18a28:	ldr	lr, [sp, #4]
   18a2c:	add	sp, sp, #8
   18a30:	pop	{r2, r3}
   18a34:	rsbs	r0, r0, #0
   18a38:	sbc	r1, r1, r1, lsl #1
   18a3c:	bx	lr
   18a40:	rsbs	r2, r2, #0
   18a44:	sbc	r3, r3, r3, lsl #1
   18a48:	bl	18a74 <__assert_fail@plt+0x78e8>
   18a4c:	ldr	lr, [sp, #4]
   18a50:	add	sp, sp, #8
   18a54:	pop	{r2, r3}
   18a58:	rsbs	r2, r2, #0
   18a5c:	sbc	r3, r3, r3, lsl #1
   18a60:	bx	lr
   18a64:	push	{r1, lr}
   18a68:	mov	r0, #8
   18a6c:	bl	10eb0 <raise@plt>
   18a70:	pop	{r1, pc}
   18a74:	cmp	r1, r3
   18a78:	push	{r4, r5, r6, r7, r8, r9, lr}
   18a7c:	cmpeq	r0, r2
   18a80:	mov	r4, r0
   18a84:	mov	r5, r1
   18a88:	ldr	r9, [sp, #28]
   18a8c:	movcc	r0, #0
   18a90:	movcc	r1, #0
   18a94:	bcc	18b8c <__assert_fail@plt+0x7a00>
   18a98:	cmp	r3, #0
   18a9c:	clzeq	ip, r2
   18aa0:	clzne	ip, r3
   18aa4:	addeq	ip, ip, #32
   18aa8:	cmp	r5, #0
   18aac:	clzeq	r1, r4
   18ab0:	addeq	r1, r1, #32
   18ab4:	clzne	r1, r5
   18ab8:	sub	ip, ip, r1
   18abc:	sub	lr, ip, #32
   18ac0:	lsl	r7, r3, ip
   18ac4:	rsb	r8, ip, #32
   18ac8:	orr	r7, r7, r2, lsl lr
   18acc:	orr	r7, r7, r2, lsr r8
   18ad0:	lsl	r6, r2, ip
   18ad4:	cmp	r5, r7
   18ad8:	cmpeq	r4, r6
   18adc:	movcc	r0, #0
   18ae0:	movcc	r1, #0
   18ae4:	bcc	18b00 <__assert_fail@plt+0x7974>
   18ae8:	mov	r3, #1
   18aec:	subs	r4, r4, r6
   18af0:	lsl	r1, r3, lr
   18af4:	lsl	r0, r3, ip
   18af8:	orr	r1, r1, r3, lsr r8
   18afc:	sbc	r5, r5, r7
   18b00:	cmp	ip, #0
   18b04:	beq	18b8c <__assert_fail@plt+0x7a00>
   18b08:	lsrs	r3, r7, #1
   18b0c:	rrx	r2, r6
   18b10:	mov	r6, ip
   18b14:	b	18b38 <__assert_fail@plt+0x79ac>
   18b18:	subs	r4, r4, r2
   18b1c:	sbc	r5, r5, r3
   18b20:	adds	r4, r4, r4
   18b24:	adc	r5, r5, r5
   18b28:	adds	r4, r4, #1
   18b2c:	adc	r5, r5, #0
   18b30:	subs	r6, r6, #1
   18b34:	beq	18b54 <__assert_fail@plt+0x79c8>
   18b38:	cmp	r5, r3
   18b3c:	cmpeq	r4, r2
   18b40:	bcs	18b18 <__assert_fail@plt+0x798c>
   18b44:	adds	r4, r4, r4
   18b48:	adc	r5, r5, r5
   18b4c:	subs	r6, r6, #1
   18b50:	bne	18b38 <__assert_fail@plt+0x79ac>
   18b54:	lsr	r6, r4, ip
   18b58:	lsr	r7, r5, ip
   18b5c:	orr	r6, r6, r5, lsl r8
   18b60:	adds	r2, r0, r4
   18b64:	orr	r6, r6, r5, lsr lr
   18b68:	adc	r3, r1, r5
   18b6c:	lsl	r1, r7, ip
   18b70:	orr	r1, r1, r6, lsl lr
   18b74:	lsl	r0, r6, ip
   18b78:	orr	r1, r1, r6, lsr r8
   18b7c:	subs	r0, r2, r0
   18b80:	mov	r4, r6
   18b84:	mov	r5, r7
   18b88:	sbc	r1, r3, r1
   18b8c:	cmp	r9, #0
   18b90:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   18b94:	strd	r4, [r9]
   18b98:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18b9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18ba0:	mov	r7, r0
   18ba4:	ldr	r6, [pc, #72]	; 18bf4 <__assert_fail@plt+0x7a68>
   18ba8:	ldr	r5, [pc, #72]	; 18bf8 <__assert_fail@plt+0x7a6c>
   18bac:	add	r6, pc, r6
   18bb0:	add	r5, pc, r5
   18bb4:	sub	r6, r6, r5
   18bb8:	mov	r8, r1
   18bbc:	mov	r9, r2
   18bc0:	bl	10e78 <calloc@plt-0x20>
   18bc4:	asrs	r6, r6, #2
   18bc8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18bcc:	mov	r4, #0
   18bd0:	add	r4, r4, #1
   18bd4:	ldr	r3, [r5], #4
   18bd8:	mov	r2, r9
   18bdc:	mov	r1, r8
   18be0:	mov	r0, r7
   18be4:	blx	r3
   18be8:	cmp	r6, r4
   18bec:	bne	18bd0 <__assert_fail@plt+0x7a44>
   18bf0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18bf4:	andeq	r1, r1, ip, asr r3
   18bf8:	andeq	r1, r1, r4, asr r3
   18bfc:	bx	lr
   18c00:	ldr	r3, [pc, #12]	; 18c14 <__assert_fail@plt+0x7a88>
   18c04:	mov	r1, #0
   18c08:	add	r3, pc, r3
   18c0c:	ldr	r2, [r3]
   18c10:	b	110a8 <__cxa_atexit@plt>
   18c14:	andeq	r1, r1, r4, lsl #10

Disassembly of section .fini:

00018c18 <.fini>:
   18c18:	push	{r3, lr}
   18c1c:	pop	{r3, pc}
