
../repos/coreutils/src/who:     file format elf32-littlearm


Disassembly of section .init:

00010e78 <.init>:
   10e78:	push	{r3, lr}
   10e7c:	bl	11588 <__assert_fail@plt+0x3fc>
   10e80:	pop	{r3, pc}

Disassembly of section .plt:

00010e84 <calloc@plt-0x14>:
   10e84:	push	{lr}		; (str lr, [sp, #-4]!)
   10e88:	ldr	lr, [pc, #4]	; 10e94 <calloc@plt-0x4>
   10e8c:	add	lr, pc, lr
   10e90:	ldr	pc, [lr, #8]!
   10e94:	andeq	r7, r1, ip, ror #2

00010e98 <calloc@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #94208	; 0x17000
   10ea0:	ldr	pc, [ip, #364]!	; 0x16c

00010ea4 <fputs_unlocked@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #94208	; 0x17000
   10eac:	ldr	pc, [ip, #356]!	; 0x164

00010eb0 <raise@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #94208	; 0x17000
   10eb8:	ldr	pc, [ip, #348]!	; 0x15c

00010ebc <strcmp@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #94208	; 0x17000
   10ec4:	ldr	pc, [ip, #340]!	; 0x154

00010ec8 <fflush@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #94208	; 0x17000
   10ed0:	ldr	pc, [ip, #332]!	; 0x14c

00010ed4 <utmpxname@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #94208	; 0x17000
   10edc:	ldr	pc, [ip, #324]!	; 0x144

00010ee0 <free@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #94208	; 0x17000
   10ee8:	ldr	pc, [ip, #316]!	; 0x13c

00010eec <gai_strerror@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #94208	; 0x17000
   10ef4:	ldr	pc, [ip, #308]!	; 0x134

00010ef8 <_exit@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #94208	; 0x17000
   10f00:	ldr	pc, [ip, #300]!	; 0x12c

00010f04 <memcpy@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #94208	; 0x17000
   10f0c:	ldr	pc, [ip, #292]!	; 0x124

00010f10 <mbsinit@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #94208	; 0x17000
   10f18:	ldr	pc, [ip, #284]!	; 0x11c

00010f1c <time@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #94208	; 0x17000
   10f24:	ldr	pc, [ip, #276]!	; 0x114

00010f28 <memcmp@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #94208	; 0x17000
   10f30:	ldr	pc, [ip, #268]!	; 0x10c

00010f34 <stpcpy@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #94208	; 0x17000
   10f3c:	ldr	pc, [ip, #260]!	; 0x104

00010f40 <fputc_unlocked@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #94208	; 0x17000
   10f48:	ldr	pc, [ip, #252]!	; 0xfc

00010f4c <dcgettext@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #94208	; 0x17000
   10f54:	ldr	pc, [ip, #244]!	; 0xf4

00010f58 <strdup@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #94208	; 0x17000
   10f60:	ldr	pc, [ip, #236]!	; 0xec

00010f64 <setutxent@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #94208	; 0x17000
   10f6c:	ldr	pc, [ip, #228]!	; 0xe4

00010f70 <realloc@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #94208	; 0x17000
   10f78:	ldr	pc, [ip, #220]!	; 0xdc

00010f7c <textdomain@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #94208	; 0x17000
   10f84:	ldr	pc, [ip, #212]!	; 0xd4

00010f88 <iswprint@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #94208	; 0x17000
   10f90:	ldr	pc, [ip, #204]!	; 0xcc

00010f94 <fwrite@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #94208	; 0x17000
   10f9c:	ldr	pc, [ip, #196]!	; 0xc4

00010fa0 <lseek64@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #94208	; 0x17000
   10fa8:	ldr	pc, [ip, #188]!	; 0xbc

00010fac <__ctype_get_mb_cur_max@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #94208	; 0x17000
   10fb4:	ldr	pc, [ip, #180]!	; 0xb4

00010fb8 <__fpending@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #94208	; 0x17000
   10fc0:	ldr	pc, [ip, #172]!	; 0xac

00010fc4 <mbrtowc@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #94208	; 0x17000
   10fcc:	ldr	pc, [ip, #164]!	; 0xa4

00010fd0 <error@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #94208	; 0x17000
   10fd8:	ldr	pc, [ip, #156]!	; 0x9c

00010fdc <__asprintf_chk@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #94208	; 0x17000
   10fe4:	ldr	pc, [ip, #148]!	; 0x94

00010fe8 <puts@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #94208	; 0x17000
   10ff0:	ldr	pc, [ip, #140]!	; 0x8c

00010ff4 <malloc@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #94208	; 0x17000
   10ffc:	ldr	pc, [ip, #132]!	; 0x84

00011000 <__libc_start_main@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #94208	; 0x17000
   11008:	ldr	pc, [ip, #124]!	; 0x7c

0001100c <strftime@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #94208	; 0x17000
   11014:	ldr	pc, [ip, #116]!	; 0x74

00011018 <__freading@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #94208	; 0x17000
   11020:	ldr	pc, [ip, #108]!	; 0x6c

00011024 <localtime@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #94208	; 0x17000
   1102c:	ldr	pc, [ip, #100]!	; 0x64

00011030 <__gmon_start__@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #94208	; 0x17000
   11038:	ldr	pc, [ip, #92]!	; 0x5c

0001103c <getopt_long@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #94208	; 0x17000
   11044:	ldr	pc, [ip, #84]!	; 0x54

00011048 <kill@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #94208	; 0x17000
   11050:	ldr	pc, [ip, #76]!	; 0x4c

00011054 <__ctype_b_loc@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #94208	; 0x17000
   1105c:	ldr	pc, [ip, #68]!	; 0x44

00011060 <exit@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #94208	; 0x17000
   11068:	ldr	pc, [ip, #60]!	; 0x3c

0001106c <ttyname@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #94208	; 0x17000
   11074:	ldr	pc, [ip, #52]!	; 0x34

00011078 <strlen@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #94208	; 0x17000
   11080:	ldr	pc, [ip, #44]!	; 0x2c

00011084 <strchr@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #94208	; 0x17000
   1108c:	ldr	pc, [ip, #36]!	; 0x24

00011090 <__errno_location@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #94208	; 0x17000
   11098:	ldr	pc, [ip, #28]!

0001109c <__sprintf_chk@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #94208	; 0x17000
   110a4:	ldr	pc, [ip, #20]!

000110a8 <__cxa_atexit@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #94208	; 0x17000
   110b0:	ldr	pc, [ip, #12]!

000110b4 <memset@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #94208	; 0x17000
   110bc:	ldr	pc, [ip, #4]!

000110c0 <strncpy@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #90112	; 0x16000
   110c8:	ldr	pc, [ip, #4092]!	; 0xffc

000110cc <__printf_chk@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #90112	; 0x16000
   110d4:	ldr	pc, [ip, #4084]!	; 0xff4

000110d8 <fileno@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #90112	; 0x16000
   110e0:	ldr	pc, [ip, #4076]!	; 0xfec

000110e4 <__fprintf_chk@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #90112	; 0x16000
   110ec:	ldr	pc, [ip, #4068]!	; 0xfe4

000110f0 <fclose@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #90112	; 0x16000
   110f8:	ldr	pc, [ip, #4060]!	; 0xfdc

000110fc <fseeko64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #90112	; 0x16000
   11104:	ldr	pc, [ip, #4052]!	; 0xfd4

00011108 <endutxent@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #90112	; 0x16000
   11110:	ldr	pc, [ip, #4044]!	; 0xfcc

00011114 <setlocale@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #90112	; 0x16000
   1111c:	ldr	pc, [ip, #4036]!	; 0xfc4

00011120 <strrchr@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #90112	; 0x16000
   11128:	ldr	pc, [ip, #4028]!	; 0xfbc

0001112c <nl_langinfo@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #90112	; 0x16000
   11134:	ldr	pc, [ip, #4020]!	; 0xfb4

00011138 <freeaddrinfo@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #90112	; 0x16000
   11140:	ldr	pc, [ip, #4012]!	; 0xfac

00011144 <getaddrinfo@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #90112	; 0x16000
   1114c:	ldr	pc, [ip, #4004]!	; 0xfa4

00011150 <bindtextdomain@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #90112	; 0x16000
   11158:	ldr	pc, [ip, #3996]!	; 0xf9c

0001115c <__xstat64@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #90112	; 0x16000
   11164:	ldr	pc, [ip, #3988]!	; 0xf94

00011168 <strncmp@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #90112	; 0x16000
   11170:	ldr	pc, [ip, #3980]!	; 0xf8c

00011174 <abort@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #90112	; 0x16000
   1117c:	ldr	pc, [ip, #3972]!	; 0xf84

00011180 <getutxent@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #90112	; 0x16000
   11188:	ldr	pc, [ip, #3964]!	; 0xf7c

0001118c <__assert_fail@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #90112	; 0x16000
   11194:	ldr	pc, [ip, #3956]!	; 0xf74

Disassembly of section .text:

00011198 <.text>:
   11198:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1119c:	movw	r5, #33156	; 0x8184
   111a0:	movt	r5, #2
   111a4:	strd	r6, [sp, #8]
   111a8:	mov	r7, r0
   111ac:	movw	r6, #27816	; 0x6ca8
   111b0:	movt	r6, #1
   111b4:	strd	r8, [sp, #16]
   111b8:	mov	r8, r1
   111bc:	str	sl, [sp, #24]
   111c0:	mov	sl, #1
   111c4:	str	lr, [sp, #28]
   111c8:	sub	sp, sp, #16
   111cc:	ldr	r0, [r1]
   111d0:	bl	12cd0 <__assert_fail@plt+0x1b44>
   111d4:	movw	r1, #27468	; 0x6b4c
   111d8:	movt	r1, #1
   111dc:	ldr	r9, [pc, #868]	; 11548 <__assert_fail@plt+0x3bc>
   111e0:	mov	r0, #6
   111e4:	bl	11114 <setlocale@plt>
   111e8:	movw	r1, #27740	; 0x6c5c
   111ec:	movt	r1, #1
   111f0:	movw	r0, #27572	; 0x6bb4
   111f4:	movt	r0, #1
   111f8:	bl	11150 <bindtextdomain@plt>
   111fc:	movw	r0, #27572	; 0x6bb4
   11200:	movt	r0, #1
   11204:	bl	10f7c <textdomain@plt>
   11208:	movw	r0, #10828	; 0x2a4c
   1120c:	movt	r0, #1
   11210:	bl	163b0 <__assert_fail@plt+0x5224>
   11214:	mov	r4, #0
   11218:	mov	r3, r9
   1121c:	mov	r2, r6
   11220:	mov	r1, r8
   11224:	mov	r0, r7
   11228:	str	r4, [sp]
   1122c:	bl	1103c <getopt_long@plt>
   11230:	cmn	r0, #1
   11234:	beq	11424 <__assert_fail@plt+0x298>
   11238:	cmp	r0, #109	; 0x6d
   1123c:	beq	113e8 <__assert_fail@plt+0x25c>
   11240:	ble	11278 <__assert_fail@plt+0xec>
   11244:	cmp	r0, #115	; 0x73
   11248:	beq	113cc <__assert_fail@plt+0x240>
   1124c:	ble	112b0 <__assert_fail@plt+0x124>
   11250:	cmp	r0, #117	; 0x75
   11254:	beq	11410 <__assert_fail@plt+0x284>
   11258:	blt	11400 <__assert_fail@plt+0x274>
   1125c:	cmp	r0, #119	; 0x77
   11260:	beq	113f4 <__assert_fail@plt+0x268>
   11264:	cmp	r0, #256	; 0x100
   11268:	bne	11364 <__assert_fail@plt+0x1d8>
   1126c:	mov	r3, #1
   11270:	strb	r3, [r5, #54]	; 0x36
   11274:	b	11214 <__assert_fail@plt+0x88>
   11278:	cmp	r0, #84	; 0x54
   1127c:	beq	113f4 <__assert_fail@plt+0x268>
   11280:	ble	11328 <__assert_fail@plt+0x19c>
   11284:	cmp	r0, #98	; 0x62
   11288:	beq	113d8 <__assert_fail@plt+0x24c>
   1128c:	ble	112ec <__assert_fail@plt+0x160>
   11290:	cmp	r0, #100	; 0x64
   11294:	bne	112d0 <__assert_fail@plt+0x144>
   11298:	mov	r3, #1
   1129c:	mov	sl, r4
   112a0:	strb	r3, [r5, #1]
   112a4:	strb	r3, [r5, #2]
   112a8:	strb	r3, [r5, #84]	; 0x54
   112ac:	b	11214 <__assert_fail@plt+0x88>
   112b0:	cmp	r0, #113	; 0x71
   112b4:	beq	1136c <__assert_fail@plt+0x1e0>
   112b8:	ble	11344 <__assert_fail@plt+0x1b8>
   112bc:	mov	r3, #1
   112c0:	mov	sl, r4
   112c4:	strb	r3, [r5, #1]
   112c8:	strb	r3, [r5, #68]	; 0x44
   112cc:	b	11214 <__assert_fail@plt+0x88>
   112d0:	cmp	r0, #108	; 0x6c
   112d4:	bne	11364 <__assert_fail@plt+0x1d8>
   112d8:	mov	r3, #1
   112dc:	mov	sl, r4
   112e0:	strb	r3, [r5, #1]
   112e4:	strb	r3, [r5, #83]	; 0x53
   112e8:	b	11214 <__assert_fail@plt+0x88>
   112ec:	cmp	r0, #97	; 0x61
   112f0:	bne	11364 <__assert_fail@plt+0x1d8>
   112f4:	mov	r3, #1
   112f8:	mov	sl, r4
   112fc:	strb	r3, [r5, #1]
   11300:	strb	r3, [r5, #2]
   11304:	strb	r3, [r5, #3]
   11308:	strb	r3, [r5, #67]	; 0x43
   1130c:	strb	r3, [r5, #68]	; 0x44
   11310:	strb	r3, [r5, #80]	; 0x50
   11314:	strb	r3, [r5, #81]	; 0x51
   11318:	strb	r3, [r5, #82]	; 0x52
   1131c:	strb	r3, [r5, #83]	; 0x53
   11320:	strb	r3, [r5, #84]	; 0x54
   11324:	b	11214 <__assert_fail@plt+0x88>
   11328:	cmn	r0, #2
   1132c:	beq	11500 <__assert_fail@plt+0x374>
   11330:	cmp	r0, #72	; 0x48
   11334:	bne	1135c <__assert_fail@plt+0x1d0>
   11338:	mov	r3, #1
   1133c:	strb	r3, [r5, #65]	; 0x41
   11340:	b	11214 <__assert_fail@plt+0x88>
   11344:	cmp	r0, #112	; 0x70
   11348:	bne	11364 <__assert_fail@plt+0x1d8>
   1134c:	mov	r3, #1
   11350:	mov	sl, r4
   11354:	strb	r3, [r5, #82]	; 0x52
   11358:	b	11214 <__assert_fail@plt+0x88>
   1135c:	cmn	r0, #3
   11360:	beq	11378 <__assert_fail@plt+0x1ec>
   11364:	mov	r0, #1
   11368:	bl	12590 <__assert_fail@plt+0x1404>
   1136c:	mov	r3, #1
   11370:	strb	r3, [r5, #64]	; 0x40
   11374:	b	11214 <__assert_fail@plt+0x88>
   11378:	movw	r3, #27764	; 0x6c74
   1137c:	movt	r3, #1
   11380:	movw	r1, #27780	; 0x6c84
   11384:	movt	r1, #1
   11388:	movw	r2, #27796	; 0x6c94
   1138c:	movt	r2, #1
   11390:	movw	r0, #33148	; 0x817c
   11394:	movt	r0, #2
   11398:	str	r2, [sp]
   1139c:	movw	r2, #27568	; 0x6bb0
   113a0:	movt	r2, #1
   113a4:	stmib	sp, {r1, r3, r4}
   113a8:	movw	r3, #33056	; 0x8120
   113ac:	movt	r3, #2
   113b0:	movw	r1, #26268	; 0x669c
   113b4:	movt	r1, #1
   113b8:	ldr	r0, [r0]
   113bc:	ldr	r3, [r3]
   113c0:	bl	156d0 <__assert_fail@plt+0x4544>
   113c4:	mov	r0, r4
   113c8:	bl	11060 <exit@plt>
   113cc:	mov	r3, #1
   113d0:	strb	r3, [r5]
   113d4:	b	11214 <__assert_fail@plt+0x88>
   113d8:	mov	r3, #1
   113dc:	mov	sl, r4
   113e0:	strb	r3, [r5, #80]	; 0x50
   113e4:	b	11214 <__assert_fail@plt+0x88>
   113e8:	mov	r3, #1
   113ec:	strb	r3, [r5, #66]	; 0x42
   113f0:	b	11214 <__assert_fail@plt+0x88>
   113f4:	mov	r3, #1
   113f8:	strb	r3, [r5, #3]
   113fc:	b	11214 <__assert_fail@plt+0x88>
   11400:	mov	r3, #1
   11404:	mov	sl, r4
   11408:	strb	r3, [r5, #81]	; 0x51
   1140c:	b	11214 <__assert_fail@plt+0x88>
   11410:	mov	r3, #1
   11414:	mov	sl, r4
   11418:	strb	r3, [r5, #1]
   1141c:	strb	r3, [r5, #67]	; 0x43
   11420:	b	11214 <__assert_fail@plt+0x88>
   11424:	cmp	sl, r4
   11428:	movw	r4, #33156	; 0x8184
   1142c:	movt	r4, #2
   11430:	movne	r3, #1
   11434:	mov	r0, #2
   11438:	strbne	r3, [r4]
   1143c:	strbne	r3, [r4, #67]	; 0x43
   11440:	ldrb	r3, [r4, #2]
   11444:	cmp	r3, #0
   11448:	movne	r3, #0
   1144c:	strbne	r3, [r4]
   11450:	bl	12b98 <__assert_fail@plt+0x1a0c>
   11454:	cmp	r0, #0
   11458:	bne	114a0 <__assert_fail@plt+0x314>
   1145c:	movw	r3, #27848	; 0x6cc8
   11460:	movt	r3, #1
   11464:	mov	r2, #12
   11468:	str	r2, [r4, #4]
   1146c:	str	r3, [r4, #44]	; 0x2c
   11470:	movw	r5, #33136	; 0x8170
   11474:	movt	r5, #2
   11478:	ldr	r3, [r5]
   1147c:	sub	r7, r7, r3
   11480:	add	r7, r7, #1
   11484:	cmp	r7, #3
   11488:	ldrls	pc, [pc, r7, lsl #2]
   1148c:	b	11508 <__assert_fail@plt+0x37c>
   11490:	andeq	r1, r1, r0, asr #9
   11494:	andeq	r1, r1, r0, asr #9
   11498:	strdeq	r1, [r1], -r0
   1149c:			; <UNDEFINED> instruction: 0x000114b8
   114a0:	movw	r3, #27832	; 0x6cb8
   114a4:	movt	r3, #1
   114a8:	mov	r2, #16
   114ac:	str	r2, [r4, #4]
   114b0:	str	r3, [r4, #44]	; 0x2c
   114b4:	b	11470 <__assert_fail@plt+0x2e4>
   114b8:	mov	r3, #1
   114bc:	strb	r3, [r4, #66]	; 0x42
   114c0:	movw	r0, #27488	; 0x6b60
   114c4:	movt	r0, #1
   114c8:	mov	r1, #1
   114cc:	bl	11e38 <__assert_fail@plt+0xcac>
   114d0:	mov	r0, #0
   114d4:	add	sp, sp, #16
   114d8:	ldrd	r4, [sp]
   114dc:	ldrd	r6, [sp, #8]
   114e0:	ldrd	r8, [sp, #16]
   114e4:	ldr	sl, [sp, #24]
   114e8:	add	sp, sp, #28
   114ec:	pop	{pc}		; (ldr pc, [sp], #4)
   114f0:	mov	r1, #0
   114f4:	ldr	r0, [r8, r3, lsl #2]
   114f8:	bl	11e38 <__assert_fail@plt+0xcac>
   114fc:	b	114d0 <__assert_fail@plt+0x344>
   11500:	mov	r0, r4
   11504:	bl	12590 <__assert_fail@plt+0x1404>
   11508:	mov	r2, #5
   1150c:	movw	r1, #27860	; 0x6cd4
   11510:	movt	r1, #1
   11514:	mov	r0, #0
   11518:	bl	10f4c <dcgettext@plt>
   1151c:	ldr	r3, [r5]
   11520:	mov	r4, r0
   11524:	add	r3, r3, #2
   11528:	ldr	r0, [r8, r3, lsl #2]
   1152c:	bl	14fc0 <__assert_fail@plt+0x3e34>
   11530:	mov	r1, #0
   11534:	mov	r3, r0
   11538:	mov	r2, r4
   1153c:	mov	r0, r1
   11540:	bl	10fd0 <error@plt>
   11544:	b	11364 <__assert_fail@plt+0x1d8>
   11548:	andeq	r6, r1, r8, lsl r4
   1154c:	mov	fp, #0
   11550:	mov	lr, #0
   11554:	pop	{r1}		; (ldr r1, [sp], #4)
   11558:	mov	r2, sp
   1155c:	push	{r2}		; (str r2, [sp, #-4]!)
   11560:	push	{r0}		; (str r0, [sp, #-4]!)
   11564:	ldr	ip, [pc, #16]	; 1157c <__assert_fail@plt+0x3f0>
   11568:	push	{ip}		; (str ip, [sp, #-4]!)
   1156c:	ldr	r0, [pc, #12]	; 11580 <__assert_fail@plt+0x3f4>
   11570:	ldr	r3, [pc, #12]	; 11584 <__assert_fail@plt+0x3f8>
   11574:	bl	11000 <__libc_start_main@plt>
   11578:	bl	11174 <abort@plt>
   1157c:	andeq	r6, r1, ip, lsr #7
   11580:	muleq	r1, r8, r1
   11584:	andeq	r6, r1, ip, asr #6
   11588:	ldr	r3, [pc, #20]	; 115a4 <__assert_fail@plt+0x418>
   1158c:	ldr	r2, [pc, #20]	; 115a8 <__assert_fail@plt+0x41c>
   11590:	add	r3, pc, r3
   11594:	ldr	r2, [r3, r2]
   11598:	cmp	r2, #0
   1159c:	bxeq	lr
   115a0:	b	11030 <__gmon_start__@plt>
   115a4:	andeq	r6, r1, r8, ror #20
   115a8:	andeq	r0, r0, ip, lsl #2
   115ac:	ldr	r0, [pc, #24]	; 115cc <__assert_fail@plt+0x440>
   115b0:	ldr	r3, [pc, #24]	; 115d0 <__assert_fail@plt+0x444>
   115b4:	cmp	r3, r0
   115b8:	bxeq	lr
   115bc:	ldr	r3, [pc, #16]	; 115d4 <__assert_fail@plt+0x448>
   115c0:	cmp	r3, #0
   115c4:	bxeq	lr
   115c8:	bx	r3
   115cc:	andeq	r8, r2, r8, ror #2
   115d0:	andeq	r8, r2, r8, ror #2
   115d4:	andeq	r0, r0, r0
   115d8:	ldr	r0, [pc, #36]	; 11604 <__assert_fail@plt+0x478>
   115dc:	ldr	r1, [pc, #36]	; 11608 <__assert_fail@plt+0x47c>
   115e0:	sub	r1, r1, r0
   115e4:	asr	r1, r1, #2
   115e8:	add	r1, r1, r1, lsr #31
   115ec:	asrs	r1, r1, #1
   115f0:	bxeq	lr
   115f4:	ldr	r3, [pc, #16]	; 1160c <__assert_fail@plt+0x480>
   115f8:	cmp	r3, #0
   115fc:	bxeq	lr
   11600:	bx	r3
   11604:	andeq	r8, r2, r8, ror #2
   11608:	andeq	r8, r2, r8, ror #2
   1160c:	andeq	r0, r0, r0
   11610:	push	{r4, lr}
   11614:	ldr	r4, [pc, #24]	; 11634 <__assert_fail@plt+0x4a8>
   11618:	ldrb	r3, [r4]
   1161c:	cmp	r3, #0
   11620:	popne	{r4, pc}
   11624:	bl	115ac <__assert_fail@plt+0x420>
   11628:	mov	r3, #1
   1162c:	strb	r3, [r4]
   11630:	pop	{r4, pc}
   11634:	andeq	r8, r2, r0, lsl #3
   11638:	b	115d8 <__assert_fail@plt+0x44c>
   1163c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11640:	movw	r4, #33156	; 0x8184
   11644:	movt	r4, #2
   11648:	movw	ip, #33048	; 0x8118
   1164c:	movt	ip, #2
   11650:	strd	r6, [sp, #8]
   11654:	str	lr, [sp, #32]
   11658:	mov	r5, r1
   1165c:	ldrb	lr, [r4, #1]
   11660:	strd	r8, [sp, #16]
   11664:	strd	sl, [sp, #24]
   11668:	sub	sp, sp, #76	; 0x4c
   1166c:	mov	fp, r0
   11670:	mov	sl, r3
   11674:	ldrb	r6, [r4]
   11678:	strb	r2, [ip, #1]
   1167c:	cmp	lr, #0
   11680:	ldr	r9, [sp, #112]	; 0x70
   11684:	beq	11690 <__assert_fail@plt+0x504>
   11688:	cmp	r6, #0
   1168c:	beq	117e0 <__assert_fail@plt+0x654>
   11690:	mov	r3, #0
   11694:	add	r8, sp, #48	; 0x30
   11698:	strb	r3, [sp, #48]	; 0x30
   1169c:	cmp	r6, #0
   116a0:	bne	116b4 <__assert_fail@plt+0x528>
   116a4:	ldr	r0, [sp, #124]	; 0x7c
   116a8:	bl	11078 <strlen@plt>
   116ac:	cmp	r0, #11
   116b0:	bls	1183c <__assert_fail@plt+0x6b0>
   116b4:	mov	r3, #0
   116b8:	add	r7, sp, #56	; 0x38
   116bc:	strb	r3, [sp, #56]	; 0x38
   116c0:	ldrb	r3, [r4, #2]
   116c4:	cmp	r3, #0
   116c8:	moveq	r0, #1
   116cc:	beq	116e4 <__assert_fail@plt+0x558>
   116d0:	ldr	r0, [sp, #132]	; 0x84
   116d4:	bl	11078 <strlen@plt>
   116d8:	cmp	r0, #11
   116dc:	addhi	r0, r0, #2
   116e0:	movls	r0, #14
   116e4:	bl	157e0 <__assert_fail@plt+0x4654>
   116e8:	ldrb	r3, [r4, #2]
   116ec:	mov	r6, r0
   116f0:	cmp	r3, #0
   116f4:	strbeq	r3, [r0]
   116f8:	bne	1181c <__assert_fail@plt+0x690>
   116fc:	ldrb	lr, [r4, #3]
   11700:	cmp	r5, #0
   11704:	movw	r1, #25912	; 0x6538
   11708:	movt	r1, #1
   1170c:	str	sl, [sp, #8]
   11710:	movw	r2, #33048	; 0x8118
   11714:	movt	r2, #2
   11718:	ldr	ip, [r4, #4]
   1171c:	moveq	r5, r1
   11720:	movw	r0, #27468	; 0x6b4c
   11724:	movt	r0, #1
   11728:	mov	r3, fp
   1172c:	mov	r1, #1
   11730:	str	r5, [sp]
   11734:	cmp	lr, #0
   11738:	str	r9, [sp, #12]
   1173c:	movne	r0, r2
   11740:	movw	r2, #25944	; 0x6558
   11744:	movt	r2, #1
   11748:	str	ip, [sp, #16]
   1174c:	ldr	ip, [sp, #116]	; 0x74
   11750:	str	r0, [sp, #4]
   11754:	add	r0, sp, #44	; 0x2c
   11758:	str	r8, [sp, #24]
   1175c:	str	r7, [sp, #28]
   11760:	str	r6, [sp, #36]	; 0x24
   11764:	str	ip, [sp, #20]
   11768:	ldr	ip, [sp, #128]	; 0x80
   1176c:	str	ip, [sp, #32]
   11770:	bl	10fdc <__asprintf_chk@plt>
   11774:	cmn	r0, #1
   11778:	beq	11864 <__assert_fail@plt+0x6d8>
   1177c:	ldr	r4, [sp, #44]	; 0x2c
   11780:	mov	r0, r4
   11784:	bl	11078 <strlen@plt>
   11788:	add	r0, r4, r0
   1178c:	b	11794 <__assert_fail@plt+0x608>
   11790:	mov	r0, r2
   11794:	ldrb	r3, [r0, #-1]
   11798:	sub	r2, r0, #1
   1179c:	cmp	r3, #32
   117a0:	beq	11790 <__assert_fail@plt+0x604>
   117a4:	mov	r3, #0
   117a8:	strb	r3, [r0]
   117ac:	ldr	r0, [sp, #44]	; 0x2c
   117b0:	bl	10fe8 <puts@plt>
   117b4:	ldr	r0, [sp, #44]	; 0x2c
   117b8:	bl	12b38 <__assert_fail@plt+0x19ac>
   117bc:	mov	r0, r6
   117c0:	bl	12b38 <__assert_fail@plt+0x19ac>
   117c4:	add	sp, sp, #76	; 0x4c
   117c8:	ldrd	r4, [sp]
   117cc:	ldrd	r6, [sp, #8]
   117d0:	ldrd	r8, [sp, #16]
   117d4:	ldrd	sl, [sp, #24]
   117d8:	add	sp, sp, #32
   117dc:	pop	{pc}		; (ldr pc, [sp], #4)
   117e0:	ldr	r0, [sp, #120]	; 0x78
   117e4:	bl	11078 <strlen@plt>
   117e8:	cmp	r0, #6
   117ec:	bhi	11690 <__assert_fail@plt+0x504>
   117f0:	ldr	r2, [sp, #120]	; 0x78
   117f4:	add	r8, sp, #48	; 0x30
   117f8:	movw	r3, #25920	; 0x6540
   117fc:	movt	r3, #1
   11800:	mov	r0, r8
   11804:	mov	r1, #1
   11808:	str	r2, [sp]
   1180c:	mov	r2, #8
   11810:	bl	1109c <__sprintf_chk@plt>
   11814:	ldrb	r6, [r4]
   11818:	b	1169c <__assert_fail@plt+0x510>
   1181c:	ldr	r2, [sp, #132]	; 0x84
   11820:	movw	r3, #25936	; 0x6550
   11824:	movt	r3, #1
   11828:	mov	r1, #1
   1182c:	str	r2, [sp]
   11830:	mvn	r2, #0
   11834:	bl	1109c <__sprintf_chk@plt>
   11838:	b	116fc <__assert_fail@plt+0x570>
   1183c:	ldr	r2, [sp, #124]	; 0x7c
   11840:	add	r7, sp, #56	; 0x38
   11844:	movw	r3, #25928	; 0x6548
   11848:	movt	r3, #1
   1184c:	mov	r0, r7
   11850:	mov	r1, #1
   11854:	str	r2, [sp]
   11858:	mov	r2, #13
   1185c:	bl	1109c <__sprintf_chk@plt>
   11860:	b	116c0 <__assert_fail@plt+0x534>
   11864:	bl	15c58 <__assert_fail@plt+0x4acc>
   11868:	mov	r2, #5
   1186c:	movw	r1, #25980	; 0x657c
   11870:	movt	r1, #1
   11874:	strd	r4, [sp, #-16]!
   11878:	mov	r4, r0
   1187c:	mov	r0, #0
   11880:	str	r6, [sp, #8]
   11884:	str	lr, [sp, #12]
   11888:	bl	10f4c <dcgettext@plt>
   1188c:	bl	11078 <strlen@plt>
   11890:	add	r0, r0, #5
   11894:	bl	157e0 <__assert_fail@plt+0x4654>
   11898:	mov	r5, r0
   1189c:	mov	r2, #5
   118a0:	movw	r1, #25980	; 0x657c
   118a4:	movt	r1, #1
   118a8:	mov	r0, #0
   118ac:	bl	10f4c <dcgettext@plt>
   118b0:	mov	r1, r0
   118b4:	mov	r0, r5
   118b8:	bl	10f34 <stpcpy@plt>
   118bc:	ldrb	r3, [r4, #40]	; 0x28
   118c0:	mov	r2, r0
   118c4:	cmp	r3, #0
   118c8:	beq	118f0 <__assert_fail@plt+0x764>
   118cc:	add	r1, r4, #44	; 0x2c
   118d0:	add	r0, r4, #41	; 0x29
   118d4:	b	118e4 <__assert_fail@plt+0x758>
   118d8:	ldrb	r3, [r0], #1
   118dc:	cmp	r3, #0
   118e0:	beq	118f0 <__assert_fail@plt+0x764>
   118e4:	cmp	r1, r0
   118e8:	strb	r3, [r2], #1
   118ec:	bhi	118d8 <__assert_fail@plt+0x74c>
   118f0:	mov	r3, #0
   118f4:	mov	r0, r5
   118f8:	strb	r3, [r2]
   118fc:	ldrd	r4, [sp]
   11900:	ldr	r6, [sp, #8]
   11904:	add	sp, sp, #12
   11908:	pop	{pc}		; (ldr pc, [sp], #4)
   1190c:	str	r4, [sp, #-8]!
   11910:	str	lr, [sp, #4]
   11914:	sub	sp, sp, #8
   11918:	str	r0, [sp, #4]
   1191c:	add	r0, sp, #4
   11920:	bl	11024 <localtime@plt>
   11924:	subs	r3, r0, #0
   11928:	beq	11958 <__assert_fail@plt+0x7cc>
   1192c:	movw	r4, #33156	; 0x8184
   11930:	movt	r4, #2
   11934:	ldr	r2, [r4, #44]	; 0x2c
   11938:	add	r0, r4, #8
   1193c:	mov	r1, #33	; 0x21
   11940:	bl	1100c <strftime@plt>
   11944:	add	r0, r4, #8
   11948:	add	sp, sp, #8
   1194c:	ldr	r4, [sp]
   11950:	add	sp, sp, #4
   11954:	pop	{pc}		; (ldr pc, [sp], #4)
   11958:	ldr	r0, [sp, #4]
   1195c:	ldr	r2, [pc, #20]	; 11978 <__assert_fail@plt+0x7ec>
   11960:	asr	r1, r0, #31
   11964:	bl	12bf0 <__assert_fail@plt+0x1a64>
   11968:	add	sp, sp, #8
   1196c:	ldr	r4, [sp]
   11970:	add	sp, sp, #4
   11974:	pop	{pc}		; (ldr pc, [sp], #4)
   11978:	andeq	r8, r2, ip, lsl #3
   1197c:	ldr	ip, [r0, #4]
   11980:	movw	r3, #25992	; 0x6588
   11984:	movt	r3, #1
   11988:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1198c:	mov	r2, #12
   11990:	mov	r4, r0
   11994:	strd	r6, [sp, #8]
   11998:	mov	r5, r1
   1199c:	mov	r1, #1
   119a0:	strd	r8, [sp, #16]
   119a4:	strd	sl, [sp, #24]
   119a8:	str	lr, [sp, #32]
   119ac:	sub	sp, sp, #476	; 0x1dc
   119b0:	add	r6, sp, #52	; 0x34
   119b4:	mov	r0, r6
   119b8:	str	ip, [sp]
   119bc:	bl	1109c <__sprintf_chk@plt>
   119c0:	ldrb	r3, [r4, #8]
   119c4:	cmp	r3, #47	; 0x2f
   119c8:	bne	11c78 <__assert_fail@plt+0xaec>
   119cc:	add	r1, sp, #64	; 0x40
   119d0:	add	sl, r4, #8
   119d4:	mov	ip, r1
   119d8:	add	r0, r4, #40	; 0x28
   119dc:	add	r2, r4, #9
   119e0:	b	119f0 <__assert_fail@plt+0x864>
   119e4:	ldrb	r3, [r2], #1
   119e8:	cmp	r3, #0
   119ec:	beq	119fc <__assert_fail@plt+0x870>
   119f0:	cmp	r2, r0
   119f4:	strb	r3, [ip], #1
   119f8:	bcc	119e4 <__assert_fail@plt+0x858>
   119fc:	mov	r3, #0
   11a00:	add	r2, sp, #104	; 0x68
   11a04:	mov	r0, #3
   11a08:	strb	r3, [ip]
   11a0c:	bl	1115c <__xstat64@plt>
   11a10:	cmp	r0, #0
   11a14:	bne	11cac <__assert_fail@plt+0xb20>
   11a18:	ldr	r3, [sp, #120]	; 0x78
   11a1c:	ldr	r7, [sp, #176]	; 0xb0
   11a20:	tst	r3, #16
   11a24:	movne	fp, #43	; 0x2b
   11a28:	moveq	fp, #45	; 0x2d
   11a2c:	cmp	r7, #0
   11a30:	bne	11b60 <__assert_fail@plt+0x9d4>
   11a34:	movw	r3, #8224	; 0x2020
   11a38:	movt	r3, #63	; 0x3f
   11a3c:	add	r8, sp, #44	; 0x2c
   11a40:	str	r3, [sp, #44]	; 0x2c
   11a44:	ldrb	r3, [r4, #76]	; 0x4c
   11a48:	cmp	r3, #0
   11a4c:	beq	11adc <__assert_fail@plt+0x950>
   11a50:	add	r7, sp, #212	; 0xd4
   11a54:	add	r1, r4, #332	; 0x14c
   11a58:	mov	ip, r7
   11a5c:	add	r2, r4, #77	; 0x4d
   11a60:	b	11a70 <__assert_fail@plt+0x8e4>
   11a64:	ldrb	r3, [r2], #1
   11a68:	cmp	r3, #0
   11a6c:	beq	11a7c <__assert_fail@plt+0x8f0>
   11a70:	cmp	r1, r2
   11a74:	strb	r3, [ip], #1
   11a78:	bhi	11a64 <__assert_fail@plt+0x8d8>
   11a7c:	mov	r5, #0
   11a80:	mov	r1, #58	; 0x3a
   11a84:	mov	r0, r7
   11a88:	strb	r5, [ip]
   11a8c:	bl	11084 <strchr@plt>
   11a90:	subs	r1, r0, #0
   11a94:	beq	11cd0 <__assert_fail@plt+0xb44>
   11a98:	strb	r5, [r1], #1
   11a9c:	ldrb	r3, [sp, #212]	; 0xd4
   11aa0:	cmp	r3, r5
   11aa4:	movw	r5, #33156	; 0x8184
   11aa8:	movt	r5, #2
   11aac:	beq	11be8 <__assert_fail@plt+0xa5c>
   11ab0:	ldrb	r3, [r5, #54]	; 0x36
   11ab4:	cmp	r3, #0
   11ab8:	beq	11be8 <__assert_fail@plt+0xa5c>
   11abc:	mov	r0, r7
   11ac0:	str	r1, [sp, #24]
   11ac4:	bl	12a10 <__assert_fail@plt+0x1884>
   11ac8:	cmp	r0, #0
   11acc:	ldr	r1, [sp, #24]
   11ad0:	movne	r9, r0
   11ad4:	moveq	r9, r7
   11ad8:	b	11bec <__assert_fail@plt+0xa60>
   11adc:	movw	r5, #33156	; 0x8184
   11ae0:	movt	r5, #2
   11ae4:	ldr	r3, [r5, #56]	; 0x38
   11ae8:	ldr	r0, [r5, #60]	; 0x3c
   11aec:	cmp	r3, #0
   11af0:	beq	11cb4 <__assert_fail@plt+0xb28>
   11af4:	mov	r3, #0
   11af8:	strb	r3, [r0]
   11afc:	ldr	r0, [r4, #340]	; 0x154
   11b00:	add	r4, r4, #44	; 0x2c
   11b04:	bl	1190c <__assert_fail@plt+0x780>
   11b08:	ldr	lr, [r5, #60]	; 0x3c
   11b0c:	movw	ip, #27468	; 0x6b4c
   11b10:	movt	ip, #1
   11b14:	mov	r3, #32
   11b18:	mov	r2, fp
   11b1c:	str	sl, [sp]
   11b20:	mov	r1, r4
   11b24:	stmib	sp, {r0, r8}
   11b28:	mov	r0, r3
   11b2c:	str	r6, [sp, #12]
   11b30:	str	ip, [sp, #20]
   11b34:	cmp	lr, #0
   11b38:	moveq	lr, ip
   11b3c:	str	lr, [sp, #16]
   11b40:	bl	1163c <__assert_fail@plt+0x4b0>
   11b44:	add	sp, sp, #476	; 0x1dc
   11b48:	ldrd	r4, [sp]
   11b4c:	ldrd	r6, [sp, #8]
   11b50:	ldrd	r8, [sp, #16]
   11b54:	ldrd	sl, [sp, #24]
   11b58:	add	sp, sp, #32
   11b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   11b60:	movw	r8, #33048	; 0x8118
   11b64:	movt	r8, #2
   11b68:	ldr	r3, [r8, #4]
   11b6c:	cmp	r3, #-2147483648	; 0x80000000
   11b70:	beq	11d60 <__assert_fail@plt+0xbd4>
   11b74:	cmp	r7, r5
   11b78:	ble	11ba8 <__assert_fail@plt+0xa1c>
   11b7c:	ldr	r2, [r8, #4]
   11b80:	movw	r1, #44673	; 0xae81
   11b84:	movt	r1, #65534	; 0xfffe
   11b88:	add	r1, r2, r1
   11b8c:	cmp	r7, r1
   11b90:	movlt	r3, #0
   11b94:	movge	r3, #1
   11b98:	cmp	r7, r2
   11b9c:	movgt	r3, #0
   11ba0:	cmp	r3, #0
   11ba4:	bne	11d8c <__assert_fail@plt+0xc00>
   11ba8:	movw	r1, #26060	; 0x65cc
   11bac:	movt	r1, #1
   11bb0:	mov	r2, #5
   11bb4:	mov	r0, #0
   11bb8:	bl	10f4c <dcgettext@plt>
   11bbc:	mov	r1, #6
   11bc0:	add	r8, sp, #44	; 0x2c
   11bc4:	movw	r3, #26068	; 0x65d4
   11bc8:	movt	r3, #1
   11bcc:	mov	r2, #7
   11bd0:	str	r1, [sp]
   11bd4:	mov	r1, #1
   11bd8:	str	r0, [sp, #4]
   11bdc:	mov	r0, r8
   11be0:	bl	1109c <__sprintf_chk@plt>
   11be4:	b	11a44 <__assert_fail@plt+0x8b8>
   11be8:	mov	r9, r7
   11bec:	mov	r0, r9
   11bf0:	str	r1, [sp, #24]
   11bf4:	bl	11078 <strlen@plt>
   11bf8:	ldr	r1, [sp, #24]
   11bfc:	str	r0, [sp, #36]	; 0x24
   11c00:	ldr	r2, [r5, #56]	; 0x38
   11c04:	cmp	r1, #0
   11c08:	str	r2, [sp, #24]
   11c0c:	ldr	r2, [r5, #60]	; 0x3c
   11c10:	beq	11d08 <__assert_fail@plt+0xb7c>
   11c14:	mov	r0, r1
   11c18:	str	r1, [sp, #28]
   11c1c:	str	r2, [sp, #32]
   11c20:	bl	11078 <strlen@plt>
   11c24:	ldr	r2, [sp, #24]
   11c28:	ldr	r3, [sp, #36]	; 0x24
   11c2c:	ldr	r1, [sp, #28]
   11c30:	add	r3, r3, #4
   11c34:	add	r3, r3, r0
   11c38:	cmp	r3, r2
   11c3c:	ldr	r2, [sp, #32]
   11c40:	bhi	11d38 <__assert_fail@plt+0xbac>
   11c44:	mov	r0, r2
   11c48:	movw	r3, #26076	; 0x65dc
   11c4c:	movt	r3, #1
   11c50:	mvn	r2, #0
   11c54:	str	r9, [sp]
   11c58:	str	r1, [sp, #4]
   11c5c:	mov	r1, #1
   11c60:	bl	1109c <__sprintf_chk@plt>
   11c64:	cmp	r9, r7
   11c68:	beq	11afc <__assert_fail@plt+0x970>
   11c6c:	mov	r0, r9
   11c70:	bl	12b38 <__assert_fail@plt+0x19ac>
   11c74:	b	11afc <__assert_fail@plt+0x970>
   11c78:	movw	r2, #25996	; 0x658c
   11c7c:	movt	r2, #1
   11c80:	ldrh	ip, [r2, #4]
   11c84:	add	r1, sp, #64	; 0x40
   11c88:	cmp	r3, #0
   11c8c:	add	sl, r4, #8
   11c90:	add	r0, r4, #40	; 0x28
   11c94:	ldr	r2, [r2]
   11c98:	str	r2, [sp, #64]	; 0x40
   11c9c:	strh	ip, [r1, #4]
   11ca0:	add	ip, r1, #5
   11ca4:	bne	119dc <__assert_fail@plt+0x850>
   11ca8:	b	119fc <__assert_fail@plt+0x870>
   11cac:	mov	fp, #63	; 0x3f
   11cb0:	b	11a34 <__assert_fail@plt+0x8a8>
   11cb4:	mov	r3, #1
   11cb8:	str	r3, [r5, #56]	; 0x38
   11cbc:	bl	12b38 <__assert_fail@plt+0x19ac>
   11cc0:	ldr	r0, [r5, #56]	; 0x38
   11cc4:	bl	157e0 <__assert_fail@plt+0x4654>
   11cc8:	str	r0, [r5, #60]	; 0x3c
   11ccc:	b	11af4 <__assert_fail@plt+0x968>
   11cd0:	ldrb	r3, [sp, #212]	; 0xd4
   11cd4:	movw	r5, #33156	; 0x8184
   11cd8:	movt	r5, #2
   11cdc:	cmp	r3, #0
   11ce0:	beq	11cf0 <__assert_fail@plt+0xb64>
   11ce4:	ldrb	r3, [r5, #54]	; 0x36
   11ce8:	cmp	r3, #0
   11cec:	bne	11df4 <__assert_fail@plt+0xc68>
   11cf0:	mov	r0, r7
   11cf4:	mov	r9, r7
   11cf8:	bl	11078 <strlen@plt>
   11cfc:	ldr	r3, [r5, #56]	; 0x38
   11d00:	ldr	r2, [r5, #60]	; 0x3c
   11d04:	str	r3, [sp, #24]
   11d08:	ldr	r1, [sp, #24]
   11d0c:	add	r3, r0, #3
   11d10:	cmp	r3, r1
   11d14:	bhi	11d6c <__assert_fail@plt+0xbe0>
   11d18:	mov	r0, r2
   11d1c:	movw	r3, #26084	; 0x65e4
   11d20:	movt	r3, #1
   11d24:	mvn	r2, #0
   11d28:	str	r9, [sp]
   11d2c:	mov	r1, #1
   11d30:	bl	1109c <__sprintf_chk@plt>
   11d34:	b	11c64 <__assert_fail@plt+0xad8>
   11d38:	mov	r0, r2
   11d3c:	str	r1, [sp, #24]
   11d40:	str	r3, [r5, #56]	; 0x38
   11d44:	bl	12b38 <__assert_fail@plt+0x19ac>
   11d48:	ldr	r0, [r5, #56]	; 0x38
   11d4c:	bl	157e0 <__assert_fail@plt+0x4654>
   11d50:	mov	r2, r0
   11d54:	str	r0, [r5, #60]	; 0x3c
   11d58:	ldr	r1, [sp, #24]
   11d5c:	b	11c44 <__assert_fail@plt+0xab8>
   11d60:	add	r0, r8, #4
   11d64:	bl	10f1c <time@plt>
   11d68:	b	11b74 <__assert_fail@plt+0x9e8>
   11d6c:	mov	r0, r2
   11d70:	str	r3, [r5, #56]	; 0x38
   11d74:	bl	12b38 <__assert_fail@plt+0x19ac>
   11d78:	ldr	r0, [r5, #56]	; 0x38
   11d7c:	bl	157e0 <__assert_fail@plt+0x4654>
   11d80:	mov	r2, r0
   11d84:	str	r0, [r5, #60]	; 0x3c
   11d88:	b	11d18 <__assert_fail@plt+0xb8c>
   11d8c:	sub	r7, r2, r7
   11d90:	cmp	r7, #59	; 0x3b
   11d94:	ble	11e08 <__assert_fail@plt+0xc7c>
   11d98:	movw	r3, #20863	; 0x517f
   11d9c:	movt	r3, #1
   11da0:	cmp	r7, r3
   11da4:	bgt	11e14 <__assert_fail@plt+0xc88>
   11da8:	movw	r3, #46021	; 0xb3c5
   11dac:	movt	r3, #37282	; 0x91a2
   11db0:	ldr	r0, [pc, #124]	; 11e34 <__assert_fail@plt+0xca8>
   11db4:	mov	ip, #3600	; 0xe10
   11db8:	movw	lr, #34953	; 0x8889
   11dbc:	movt	lr, #34952	; 0x8888
   11dc0:	umull	r3, r1, r3, r7
   11dc4:	mov	r2, #6
   11dc8:	movw	r3, #26048	; 0x65c0
   11dcc:	movt	r3, #1
   11dd0:	lsr	r1, r1, #11
   11dd4:	mls	ip, ip, r1, r7
   11dd8:	umull	lr, ip, lr, ip
   11ddc:	lsr	ip, ip, #5
   11de0:	stm	sp, {r1, ip}
   11de4:	mov	r1, #1
   11de8:	bl	1109c <__sprintf_chk@plt>
   11dec:	ldr	r0, [pc, #64]	; 11e34 <__assert_fail@plt+0xca8>
   11df0:	b	11bbc <__assert_fail@plt+0xa30>
   11df4:	mov	r0, r7
   11df8:	bl	12a10 <__assert_fail@plt+0x1884>
   11dfc:	subs	r9, r0, #0
   11e00:	bne	11cf8 <__assert_fail@plt+0xb6c>
   11e04:	b	11cf0 <__assert_fail@plt+0xb64>
   11e08:	movw	r0, #25984	; 0x6580
   11e0c:	movt	r0, #1
   11e10:	b	11bbc <__assert_fail@plt+0xa30>
   11e14:	movw	r3, #25556	; 0x63d4
   11e18:	movt	r3, #1
   11e1c:	movw	r1, #26004	; 0x6594
   11e20:	movt	r1, #1
   11e24:	movw	r0, #26016	; 0x65a0
   11e28:	movt	r0, #1
   11e2c:	mov	r2, #205	; 0xcd
   11e30:	bl	1118c <__assert_fail@plt>
   11e34:			; <UNDEFINED> instruction: 0x000281b4
   11e38:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11e3c:	mov	r3, r1
   11e40:	mov	r4, r0
   11e44:	strd	r6, [sp, #8]
   11e48:	strd	r8, [sp, #16]
   11e4c:	strd	sl, [sp, #24]
   11e50:	str	lr, [sp, #32]
   11e54:	sub	sp, sp, #76	; 0x4c
   11e58:	add	r2, sp, #56	; 0x38
   11e5c:	add	r1, sp, #52	; 0x34
   11e60:	bl	1505c <__assert_fail@plt+0x3ed0>
   11e64:	subs	r2, r0, #0
   11e68:	bne	12560 <__assert_fail@plt+0x13d4>
   11e6c:	movw	r9, #33156	; 0x8184
   11e70:	movt	r9, #2
   11e74:	ldr	r5, [sp, #52]	; 0x34
   11e78:	ldrb	r6, [r9, #64]	; 0x40
   11e7c:	ldr	r4, [sp, #56]	; 0x38
   11e80:	cmp	r6, #0
   11e84:	bne	11fc8 <__assert_fail@plt+0xe3c>
   11e88:	ldrb	r2, [r9, #65]	; 0x41
   11e8c:	cmp	r2, #0
   11e90:	bne	122fc <__assert_fail@plt+0x1170>
   11e94:	ldrb	r3, [r9, #66]	; 0x42
   11e98:	cmp	r3, #0
   11e9c:	moveq	sl, r3
   11ea0:	bne	122d0 <__assert_fail@plt+0x1144>
   11ea4:	cmp	r5, #0
   11ea8:	sub	r5, r5, #1
   11eac:	beq	1203c <__assert_fail@plt+0xeb0>
   11eb0:	movw	r3, #26240	; 0x6680
   11eb4:	movt	r3, #1
   11eb8:	movw	fp, #25992	; 0x6588
   11ebc:	movt	fp, #1
   11ec0:	str	r3, [sp, #32]
   11ec4:	movw	r3, #26248	; 0x6688
   11ec8:	movt	r3, #1
   11ecc:	add	r4, r4, #8
   11ed0:	str	r3, [sp, #36]	; 0x24
   11ed4:	mov	r3, #-2147483648	; 0x80000000
   11ed8:	str	r3, [sp, #28]
   11edc:	ldrb	r3, [r9, #66]	; 0x42
   11ee0:	sub	r7, r4, #8
   11ee4:	ldrsh	r6, [r4, #-8]
   11ee8:	cmp	r3, #0
   11eec:	beq	11f08 <__assert_fail@plt+0xd7c>
   11ef0:	mov	r2, #32
   11ef4:	mov	r1, r4
   11ef8:	mov	r0, sl
   11efc:	bl	11168 <strncmp@plt>
   11f00:	cmp	r0, #0
   11f04:	bne	11fa8 <__assert_fail@plt+0xe1c>
   11f08:	ldrb	r3, [r9, #67]	; 0x43
   11f0c:	cmp	r3, #0
   11f10:	beq	11f28 <__assert_fail@plt+0xd9c>
   11f14:	ldrb	r3, [r4, #36]	; 0x24
   11f18:	cmp	r3, #0
   11f1c:	beq	11f28 <__assert_fail@plt+0xd9c>
   11f20:	cmp	r6, #7
   11f24:	beq	124bc <__assert_fail@plt+0x1330>
   11f28:	ldrb	r3, [r9, #68]	; 0x44
   11f2c:	cmp	r3, #0
   11f30:	beq	11f3c <__assert_fail@plt+0xdb0>
   11f34:	cmp	r6, #1
   11f38:	beq	120ec <__assert_fail@plt+0xf60>
   11f3c:	ldrb	r3, [r9, #80]	; 0x50
   11f40:	cmp	r3, #0
   11f44:	beq	11f58 <__assert_fail@plt+0xdcc>
   11f48:	cmp	r6, #2
   11f4c:	movweq	r1, #26204	; 0x665c
   11f50:	movteq	r1, #1
   11f54:	beq	12068 <__assert_fail@plt+0xedc>
   11f58:	ldrb	r3, [r9, #81]	; 0x51
   11f5c:	cmp	r3, #0
   11f60:	beq	11f6c <__assert_fail@plt+0xde0>
   11f64:	cmp	r6, #3
   11f68:	beq	12060 <__assert_fail@plt+0xed4>
   11f6c:	ldrb	r3, [r9, #82]	; 0x52
   11f70:	cmp	r3, #0
   11f74:	beq	11f80 <__assert_fail@plt+0xdf4>
   11f78:	cmp	r6, #5
   11f7c:	beq	121f8 <__assert_fail@plt+0x106c>
   11f80:	ldrb	r3, [r9, #83]	; 0x53
   11f84:	cmp	r3, #0
   11f88:	beq	11f94 <__assert_fail@plt+0xe08>
   11f8c:	cmp	r6, #6
   11f90:	beq	1226c <__assert_fail@plt+0x10e0>
   11f94:	ldrb	r3, [r9, #84]	; 0x54
   11f98:	cmp	r3, #0
   11f9c:	beq	11fa8 <__assert_fail@plt+0xe1c>
   11fa0:	cmp	r6, #8
   11fa4:	beq	123d0 <__assert_fail@plt+0x1244>
   11fa8:	cmp	r6, #2
   11fac:	sub	r5, r5, #1
   11fb0:	ldreq	r3, [r4, #332]	; 0x14c
   11fb4:	add	r4, r4, #384	; 0x180
   11fb8:	streq	r3, [sp, #28]
   11fbc:	cmn	r5, #1
   11fc0:	bne	11edc <__assert_fail@plt+0xd50>
   11fc4:	b	1203c <__assert_fail@plt+0xeb0>
   11fc8:	cmp	r5, #0
   11fcc:	sub	r6, r5, #1
   11fd0:	beq	12018 <__assert_fail@plt+0xe8c>
   11fd4:	movw	r7, #27468	; 0x6b4c
   11fd8:	movt	r7, #1
   11fdc:	movw	r9, #26092	; 0x65ec
   11fe0:	movt	r9, #1
   11fe4:	movw	r8, #25988	; 0x6584
   11fe8:	movt	r8, #1
   11fec:	mov	r5, r2
   11ff0:	ldrb	r3, [r4, #44]	; 0x2c
   11ff4:	cmp	r3, #0
   11ff8:	beq	12008 <__assert_fail@plt+0xe7c>
   11ffc:	ldrsh	r3, [r4]
   12000:	cmp	r3, #7
   12004:	beq	120b8 <__assert_fail@plt+0xf2c>
   12008:	sub	r6, r6, #1
   1200c:	add	r4, r4, #384	; 0x180
   12010:	cmn	r6, #1
   12014:	bne	11ff0 <__assert_fail@plt+0xe64>
   12018:	mov	r2, #5
   1201c:	movw	r1, #26100	; 0x65f4
   12020:	movt	r1, #1
   12024:	mov	r0, #0
   12028:	bl	10f4c <dcgettext@plt>
   1202c:	mov	r1, r0
   12030:	mov	r2, r5
   12034:	mov	r0, #1
   12038:	bl	110cc <__printf_chk@plt>
   1203c:	ldr	r0, [sp, #56]	; 0x38
   12040:	bl	12b38 <__assert_fail@plt+0x19ac>
   12044:	add	sp, sp, #76	; 0x4c
   12048:	ldrd	r4, [sp]
   1204c:	ldrd	r6, [sp, #8]
   12050:	ldrd	r8, [sp, #16]
   12054:	ldrd	sl, [sp, #24]
   12058:	add	sp, sp, #32
   1205c:	pop	{pc}		; (ldr pc, [sp], #4)
   12060:	movw	r1, #26216	; 0x6668
   12064:	movt	r1, #1
   12068:	mov	r2, #5
   1206c:	mov	r0, #0
   12070:	bl	10f4c <dcgettext@plt>
   12074:	mov	r6, r0
   12078:	ldr	r0, [r4, #332]	; 0x14c
   1207c:	bl	1190c <__assert_fail@plt+0x780>
   12080:	movw	ip, #27468	; 0x6b4c
   12084:	movt	ip, #1
   12088:	str	r6, [sp]
   1208c:	mvn	r3, #0
   12090:	mov	r1, ip
   12094:	mov	r2, #32
   12098:	stmib	sp, {r0, ip}
   1209c:	mov	r0, r3
   120a0:	str	ip, [sp, #12]
   120a4:	str	ip, [sp, #16]
   120a8:	str	ip, [sp, #20]
   120ac:	bl	1163c <__assert_fail@plt+0x4b0>
   120b0:	ldrsh	r6, [r4, #-8]
   120b4:	b	11fa8 <__assert_fail@plt+0xe1c>
   120b8:	mov	r0, r4
   120bc:	add	r5, r5, #1
   120c0:	bl	14fd8 <__assert_fail@plt+0x3e4c>
   120c4:	mov	sl, r0
   120c8:	mov	r3, r0
   120cc:	mov	r2, r7
   120d0:	mov	r1, r9
   120d4:	mov	r0, #1
   120d8:	mov	r7, r8
   120dc:	bl	110cc <__printf_chk@plt>
   120e0:	mov	r0, sl
   120e4:	bl	12b38 <__assert_fail@plt+0x19ac>
   120e8:	b	12008 <__assert_fail@plt+0xe7c>
   120ec:	ldr	r3, [r4, #-4]
   120f0:	ldr	r0, [r9, #72]	; 0x48
   120f4:	cmp	r3, #0
   120f8:	add	r6, r3, #255	; 0xff
   120fc:	movge	r6, r3
   12100:	rsbs	r2, r3, #0
   12104:	uxtb	r2, r2
   12108:	uxtb	r8, r3
   1210c:	ubfx	r6, r6, #8, #8
   12110:	rsbpl	r8, r2, #0
   12114:	cmp	r0, #0
   12118:	beq	124f4 <__assert_fail@plt+0x1368>
   1211c:	ldr	r7, [r9, #72]	; 0x48
   12120:	mov	r2, #5
   12124:	movw	r1, #26168	; 0x6638
   12128:	movt	r1, #1
   1212c:	mov	r0, #0
   12130:	uxtb	r8, r8
   12134:	bl	10f4c <dcgettext@plt>
   12138:	movw	r3, #26180	; 0x6644
   1213c:	movt	r3, #1
   12140:	stm	sp, {r0, r8}
   12144:	mvn	r2, #0
   12148:	mov	r1, #1
   1214c:	mov	r0, r7
   12150:	bl	1109c <__sprintf_chk@plt>
   12154:	ldr	r0, [r9, #76]	; 0x4c
   12158:	cmp	r0, #0
   1215c:	beq	124d0 <__assert_fail@plt+0x1344>
   12160:	ldr	r7, [r9, #76]	; 0x4c
   12164:	mov	r2, #5
   12168:	movw	r1, #26188	; 0x664c
   1216c:	movt	r1, #1
   12170:	mov	r0, #0
   12174:	bl	10f4c <dcgettext@plt>
   12178:	cmp	r6, #78	; 0x4e
   1217c:	mvn	r2, #0
   12180:	movne	r1, r6
   12184:	moveq	r1, #83	; 0x53
   12188:	movw	r3, #26196	; 0x6654
   1218c:	movt	r3, #1
   12190:	strd	r0, [sp]
   12194:	mov	r1, #1
   12198:	mov	r0, r7
   1219c:	bl	1109c <__sprintf_chk@plt>
   121a0:	sub	r6, r6, #32
   121a4:	ldr	r0, [r4, #332]	; 0x14c
   121a8:	ldr	r7, [r9, #72]	; 0x48
   121ac:	bl	1190c <__assert_fail@plt+0x780>
   121b0:	cmp	r6, #94	; 0x5e
   121b4:	movw	ip, #27468	; 0x6b4c
   121b8:	movt	ip, #1
   121bc:	ldrls	r2, [r9, #76]	; 0x4c
   121c0:	mvn	r3, #0
   121c4:	movhi	r2, ip
   121c8:	movw	r1, #27468	; 0x6b4c
   121cc:	movt	r1, #1
   121d0:	str	r7, [sp]
   121d4:	stmib	sp, {r0, ip}
   121d8:	mov	r0, r3
   121dc:	str	ip, [sp, #12]
   121e0:	str	r2, [sp, #16]
   121e4:	mov	r2, #32
   121e8:	str	ip, [sp, #20]
   121ec:	bl	1163c <__assert_fail@plt+0x4b0>
   121f0:	ldrsh	r6, [r4, #-8]
   121f4:	b	11fa8 <__assert_fail@plt+0xe1c>
   121f8:	mov	r0, r7
   121fc:	add	r7, sp, #60	; 0x3c
   12200:	bl	11868 <__assert_fail@plt+0x6dc>
   12204:	ldr	ip, [r4, #-4]
   12208:	mov	r3, fp
   1220c:	mov	r1, #1
   12210:	mov	r2, #12
   12214:	mov	r6, r0
   12218:	mov	r0, r7
   1221c:	str	ip, [sp]
   12220:	bl	1109c <__sprintf_chk@plt>
   12224:	ldr	r0, [r4, #332]	; 0x14c
   12228:	bl	1190c <__assert_fail@plt+0x780>
   1222c:	movw	ip, #27468	; 0x6b4c
   12230:	movt	ip, #1
   12234:	str	r4, [sp]
   12238:	mov	r3, #32
   1223c:	mov	r1, ip
   12240:	mov	r2, r3
   12244:	stmib	sp, {r0, ip}
   12248:	mvn	r0, #0
   1224c:	str	r7, [sp, #12]
   12250:	str	r6, [sp, #16]
   12254:	str	ip, [sp, #20]
   12258:	bl	1163c <__assert_fail@plt+0x4b0>
   1225c:	mov	r0, r6
   12260:	bl	12b38 <__assert_fail@plt+0x19ac>
   12264:	ldrsh	r6, [r4, #-8]
   12268:	b	11fa8 <__assert_fail@plt+0xe1c>
   1226c:	mov	r0, r7
   12270:	add	r7, sp, #60	; 0x3c
   12274:	bl	11868 <__assert_fail@plt+0x6dc>
   12278:	ldr	ip, [r4, #-4]
   1227c:	mov	r3, fp
   12280:	mov	r2, #12
   12284:	mov	r1, #1
   12288:	mov	r6, r0
   1228c:	mov	r0, r7
   12290:	str	ip, [sp]
   12294:	bl	1109c <__sprintf_chk@plt>
   12298:	mov	r2, #5
   1229c:	movw	r1, #26232	; 0x6678
   122a0:	movt	r1, #1
   122a4:	mov	r0, #0
   122a8:	bl	10f4c <dcgettext@plt>
   122ac:	mov	r8, r0
   122b0:	ldr	r0, [r4, #332]	; 0x14c
   122b4:	bl	1190c <__assert_fail@plt+0x780>
   122b8:	movw	ip, #27468	; 0x6b4c
   122bc:	movt	ip, #1
   122c0:	str	r4, [sp]
   122c4:	mov	r3, #32
   122c8:	mov	r1, r8
   122cc:	b	12240 <__assert_fail@plt+0x10b4>
   122d0:	mov	r0, #0
   122d4:	bl	1106c <ttyname@plt>
   122d8:	subs	sl, r0, #0
   122dc:	beq	1203c <__assert_fail@plt+0xeb0>
   122e0:	movw	r1, #25996	; 0x658c
   122e4:	movt	r1, #1
   122e8:	mov	r2, #5
   122ec:	bl	11168 <strncmp@plt>
   122f0:	cmp	r0, #0
   122f4:	addeq	sl, sl, #5
   122f8:	b	11ea4 <__assert_fail@plt+0xd18>
   122fc:	mov	r2, #5
   12300:	movw	r1, #26116	; 0x6604
   12304:	movt	r1, #1
   12308:	bl	10f4c <dcgettext@plt>
   1230c:	mov	fp, r0
   12310:	mov	r2, #5
   12314:	mov	r0, r6
   12318:	movw	r1, #26124	; 0x660c
   1231c:	movt	r1, #1
   12320:	bl	10f4c <dcgettext@plt>
   12324:	mov	sl, r0
   12328:	mov	r2, #5
   1232c:	mov	r0, r6
   12330:	movw	r1, #26132	; 0x6614
   12334:	movt	r1, #1
   12338:	bl	10f4c <dcgettext@plt>
   1233c:	mov	r2, #5
   12340:	movw	r1, #26140	; 0x661c
   12344:	movt	r1, #1
   12348:	str	r0, [sp, #28]
   1234c:	mov	r0, r6
   12350:	bl	10f4c <dcgettext@plt>
   12354:	mov	r8, r0
   12358:	mov	r2, #5
   1235c:	mov	r0, r6
   12360:	movw	r1, #26148	; 0x6624
   12364:	movt	r1, #1
   12368:	bl	10f4c <dcgettext@plt>
   1236c:	mov	r7, r0
   12370:	mov	r2, #5
   12374:	mov	r0, r6
   12378:	movw	r1, #26152	; 0x6628
   1237c:	movt	r1, #1
   12380:	bl	10f4c <dcgettext@plt>
   12384:	mov	r2, #5
   12388:	movw	r1, #26160	; 0x6630
   1238c:	movt	r1, #1
   12390:	str	r0, [sp, #32]
   12394:	mov	r0, r6
   12398:	bl	10f4c <dcgettext@plt>
   1239c:	ldr	ip, [sp, #28]
   123a0:	mvn	r3, #0
   123a4:	mov	r1, fp
   123a8:	mov	r2, #32
   123ac:	stm	sp, {sl, ip}
   123b0:	ldr	ip, [sp, #32]
   123b4:	str	r8, [sp, #8]
   123b8:	str	r7, [sp, #12]
   123bc:	str	ip, [sp, #16]
   123c0:	str	r0, [sp, #20]
   123c4:	mov	r0, r3
   123c8:	bl	1163c <__assert_fail@plt+0x4b0>
   123cc:	b	11e94 <__assert_fail@plt+0xd08>
   123d0:	mov	r0, r7
   123d4:	add	r7, sp, #60	; 0x3c
   123d8:	bl	11868 <__assert_fail@plt+0x6dc>
   123dc:	ldr	ip, [r4, #-4]
   123e0:	mov	r8, r0
   123e4:	mov	r3, fp
   123e8:	mov	r0, r7
   123ec:	mov	r2, #12
   123f0:	mov	r1, #1
   123f4:	str	ip, [sp]
   123f8:	bl	1109c <__sprintf_chk@plt>
   123fc:	ldr	r6, [r9, #88]	; 0x58
   12400:	cmp	r6, #0
   12404:	beq	12518 <__assert_fail@plt+0x138c>
   12408:	mov	r2, #5
   1240c:	mov	r0, #0
   12410:	ldr	r1, [sp, #32]
   12414:	ldr	r6, [r9, #88]	; 0x58
   12418:	bl	10f4c <dcgettext@plt>
   1241c:	add	r3, r4, #324	; 0x144
   12420:	mov	r2, #5
   12424:	str	r0, [sp, #40]	; 0x28
   12428:	ldrsh	r3, [r3]
   1242c:	mov	r0, #0
   12430:	ldr	r1, [sp, #36]	; 0x24
   12434:	str	r3, [sp, #44]	; 0x2c
   12438:	bl	10f4c <dcgettext@plt>
   1243c:	movw	r2, #326	; 0x146
   12440:	ldr	r1, [sp, #40]	; 0x28
   12444:	movw	r3, #26256	; 0x6690
   12448:	movt	r3, #1
   1244c:	ldrsh	ip, [r4, r2]
   12450:	mvn	r2, #0
   12454:	str	r0, [sp, #8]
   12458:	mov	r0, r6
   1245c:	ldr	lr, [sp, #44]	; 0x2c
   12460:	stm	sp, {r1, lr}
   12464:	mov	r1, #1
   12468:	str	ip, [sp, #12]
   1246c:	bl	1109c <__sprintf_chk@plt>
   12470:	ldr	r0, [r4, #332]	; 0x14c
   12474:	bl	1190c <__assert_fail@plt+0x780>
   12478:	ldr	lr, [r9, #88]	; 0x58
   1247c:	movw	ip, #27468	; 0x6b4c
   12480:	movt	ip, #1
   12484:	mov	r3, #32
   12488:	mov	r1, ip
   1248c:	str	r4, [sp]
   12490:	mov	r2, r3
   12494:	stmib	sp, {r0, ip}
   12498:	mvn	r0, #0
   1249c:	str	r7, [sp, #12]
   124a0:	str	r8, [sp, #16]
   124a4:	str	lr, [sp, #20]
   124a8:	bl	1163c <__assert_fail@plt+0x4b0>
   124ac:	mov	r0, r8
   124b0:	bl	12b38 <__assert_fail@plt+0x19ac>
   124b4:	ldrsh	r6, [r4, #-8]
   124b8:	b	11fa8 <__assert_fail@plt+0xe1c>
   124bc:	mov	r0, r7
   124c0:	ldr	r1, [sp, #28]
   124c4:	bl	1197c <__assert_fail@plt+0x7f0>
   124c8:	ldrsh	r6, [r4, #-8]
   124cc:	b	11fa8 <__assert_fail@plt+0xe1c>
   124d0:	mov	r2, #5
   124d4:	movw	r1, #26188	; 0x664c
   124d8:	movt	r1, #1
   124dc:	bl	10f4c <dcgettext@plt>
   124e0:	bl	11078 <strlen@plt>
   124e4:	add	r0, r0, #2
   124e8:	bl	157e0 <__assert_fail@plt+0x4654>
   124ec:	str	r0, [r9, #76]	; 0x4c
   124f0:	b	12160 <__assert_fail@plt+0xfd4>
   124f4:	mov	r2, #5
   124f8:	movw	r1, #26168	; 0x6638
   124fc:	movt	r1, #1
   12500:	bl	10f4c <dcgettext@plt>
   12504:	bl	11078 <strlen@plt>
   12508:	add	r0, r0, #3
   1250c:	bl	157e0 <__assert_fail@plt+0x4654>
   12510:	str	r0, [r9, #72]	; 0x48
   12514:	b	1211c <__assert_fail@plt+0xf90>
   12518:	mov	r2, #5
   1251c:	mov	r0, r6
   12520:	ldr	r1, [sp, #32]
   12524:	bl	10f4c <dcgettext@plt>
   12528:	bl	11078 <strlen@plt>
   1252c:	mov	r3, r0
   12530:	mov	r2, #5
   12534:	ldr	r1, [sp, #36]	; 0x24
   12538:	mov	r0, r6
   1253c:	str	r3, [sp, #40]	; 0x28
   12540:	bl	10f4c <dcgettext@plt>
   12544:	bl	11078 <strlen@plt>
   12548:	ldr	r3, [sp, #40]	; 0x28
   1254c:	add	r0, r3, r0
   12550:	add	r0, r0, #14
   12554:	bl	157e0 <__assert_fail@plt+0x4654>
   12558:	str	r0, [r9, #88]	; 0x58
   1255c:	b	12408 <__assert_fail@plt+0x127c>
   12560:	bl	11090 <__errno_location@plt>
   12564:	ldr	r5, [r0]
   12568:	mov	r2, r4
   1256c:	mov	r1, #3
   12570:	mov	r0, #0
   12574:	bl	14de8 <__assert_fail@plt+0x3c5c>
   12578:	mov	r3, r0
   1257c:	movw	r2, #28160	; 0x6e00
   12580:	movt	r2, #1
   12584:	mov	r0, #1
   12588:	mov	r1, r5
   1258c:	bl	10fd0 <error@plt>
   12590:	subs	r4, r0, #0
   12594:	str	r7, [sp, #-8]!
   12598:	str	lr, [sp, #4]
   1259c:	sub	sp, sp, #56	; 0x38
   125a0:	beq	125e8 <__assert_fail@plt+0x145c>
   125a4:	movw	r3, #33144	; 0x8178
   125a8:	movt	r3, #2
   125ac:	ldr	r5, [r3]
   125b0:	mov	r2, #5
   125b4:	movw	r1, #26272	; 0x66a0
   125b8:	movt	r1, #1
   125bc:	mov	r0, #0
   125c0:	bl	10f4c <dcgettext@plt>
   125c4:	movw	r3, #33292	; 0x820c
   125c8:	movt	r3, #2
   125cc:	mov	r2, r0
   125d0:	mov	r1, #1
   125d4:	ldr	r3, [r3]
   125d8:	mov	r0, r5
   125dc:	bl	110e4 <__fprintf_chk@plt>
   125e0:	mov	r0, r4
   125e4:	bl	11060 <exit@plt>
   125e8:	mov	r2, #5
   125ec:	movw	r1, #26312	; 0x66c8
   125f0:	movt	r1, #1
   125f4:	movw	r5, #33148	; 0x817c
   125f8:	movt	r5, #2
   125fc:	bl	10f4c <dcgettext@plt>
   12600:	movw	r3, #33292	; 0x820c
   12604:	movt	r3, #2
   12608:	mov	r1, r0
   1260c:	mov	r0, #1
   12610:	ldr	r2, [r3]
   12614:	bl	110cc <__printf_chk@plt>
   12618:	mov	r2, #5
   1261c:	movw	r1, #26356	; 0x66f4
   12620:	movt	r1, #1
   12624:	mov	r0, r4
   12628:	bl	10f4c <dcgettext@plt>
   1262c:	ldr	r1, [r5]
   12630:	bl	10ea4 <fputs_unlocked@plt>
   12634:	mov	r2, #5
   12638:	movw	r1, #26416	; 0x6730
   1263c:	movt	r1, #1
   12640:	mov	r0, r4
   12644:	bl	10f4c <dcgettext@plt>
   12648:	ldr	r1, [r5]
   1264c:	bl	10ea4 <fputs_unlocked@plt>
   12650:	mov	r2, #5
   12654:	movw	r1, #26612	; 0x67f4
   12658:	movt	r1, #1
   1265c:	mov	r0, r4
   12660:	bl	10f4c <dcgettext@plt>
   12664:	ldr	r1, [r5]
   12668:	bl	10ea4 <fputs_unlocked@plt>
   1266c:	mov	r2, #5
   12670:	movw	r1, #26664	; 0x6828
   12674:	movt	r1, #1
   12678:	mov	r0, r4
   1267c:	bl	10f4c <dcgettext@plt>
   12680:	ldr	r1, [r5]
   12684:	bl	10ea4 <fputs_unlocked@plt>
   12688:	mov	r2, #5
   1268c:	movw	r1, #26852	; 0x68e4
   12690:	movt	r1, #1
   12694:	mov	r0, r4
   12698:	bl	10f4c <dcgettext@plt>
   1269c:	ldr	r1, [r5]
   126a0:	bl	10ea4 <fputs_unlocked@plt>
   126a4:	mov	r2, #5
   126a8:	movw	r1, #27076	; 0x69c4
   126ac:	movt	r1, #1
   126b0:	mov	r0, r4
   126b4:	bl	10f4c <dcgettext@plt>
   126b8:	ldr	r1, [r5]
   126bc:	bl	10ea4 <fputs_unlocked@plt>
   126c0:	mov	r2, #5
   126c4:	movw	r1, #27240	; 0x6a68
   126c8:	movt	r1, #1
   126cc:	mov	r0, r4
   126d0:	bl	10f4c <dcgettext@plt>
   126d4:	ldr	r1, [r5]
   126d8:	bl	10ea4 <fputs_unlocked@plt>
   126dc:	mov	r2, #5
   126e0:	movw	r1, #27288	; 0x6a98
   126e4:	movt	r1, #1
   126e8:	mov	r0, r4
   126ec:	bl	10f4c <dcgettext@plt>
   126f0:	ldr	r1, [r5]
   126f4:	bl	10ea4 <fputs_unlocked@plt>
   126f8:	mov	r2, #5
   126fc:	movw	r1, #27344	; 0x6ad0
   12700:	movt	r1, #1
   12704:	mov	r0, r4
   12708:	bl	10f4c <dcgettext@plt>
   1270c:	mov	r1, r0
   12710:	movw	r3, #27472	; 0x6b50
   12714:	movt	r3, #1
   12718:	movw	r2, #27488	; 0x6b60
   1271c:	movt	r2, #1
   12720:	mov	r0, #1
   12724:	bl	110cc <__printf_chk@plt>
   12728:	movw	r0, #25556	; 0x63d4
   1272c:	movt	r0, #1
   12730:	ldr	ip, [r0, #12]
   12734:	ldrd	r2, [r0, #20]
   12738:	ldr	r6, [r0, #16]
   1273c:	subs	r1, ip, #0
   12740:	str	ip, [sp]
   12744:	ldrd	r8, [r0, #28]
   12748:	strd	r2, [sp, #8]
   1274c:	ldrd	r2, [r0, #36]	; 0x24
   12750:	str	r6, [sp, #4]
   12754:	ldrd	r6, [r0, #44]	; 0x2c
   12758:	strd	r8, [sp, #16]
   1275c:	ldrd	r8, [r0, #52]	; 0x34
   12760:	strd	r2, [sp, #24]
   12764:	ldrd	r2, [r0, #60]	; 0x3c
   12768:	strd	r6, [sp, #32]
   1276c:	movwne	r7, #26268	; 0x669c
   12770:	mov	r6, sp
   12774:	movtne	r7, #1
   12778:	strd	r8, [sp, #40]	; 0x28
   1277c:	strd	r2, [sp, #48]	; 0x30
   12780:	bne	12878 <__assert_fail@plt+0x16ec>
   12784:	ldr	r6, [r6, #4]
   12788:	movw	r1, #27504	; 0x6b70
   1278c:	movt	r1, #1
   12790:	mov	r2, #5
   12794:	cmp	r6, #0
   12798:	beq	1288c <__assert_fail@plt+0x1700>
   1279c:	mov	r0, #0
   127a0:	bl	10f4c <dcgettext@plt>
   127a4:	mov	r1, r0
   127a8:	movw	r3, #27528	; 0x6b88
   127ac:	movt	r3, #1
   127b0:	movw	r2, #27568	; 0x6bb0
   127b4:	movt	r2, #1
   127b8:	mov	r0, #1
   127bc:	bl	110cc <__printf_chk@plt>
   127c0:	mov	r1, #0
   127c4:	mov	r0, #5
   127c8:	bl	11114 <setlocale@plt>
   127cc:	cmp	r0, #0
   127d0:	movweq	r7, #26268	; 0x669c
   127d4:	movteq	r7, #1
   127d8:	beq	127fc <__assert_fail@plt+0x1670>
   127dc:	movw	r1, #27584	; 0x6bc0
   127e0:	movt	r1, #1
   127e4:	mov	r2, #3
   127e8:	movw	r7, #26268	; 0x669c
   127ec:	movt	r7, #1
   127f0:	bl	11168 <strncmp@plt>
   127f4:	cmp	r0, #0
   127f8:	bne	12944 <__assert_fail@plt+0x17b8>
   127fc:	mov	r2, #5
   12800:	movw	r1, #27660	; 0x6c0c
   12804:	movt	r1, #1
   12808:	mov	r0, #0
   1280c:	bl	10f4c <dcgettext@plt>
   12810:	mov	r1, r0
   12814:	movw	r3, #26268	; 0x669c
   12818:	movt	r3, #1
   1281c:	movw	r2, #27528	; 0x6b88
   12820:	movt	r2, #1
   12824:	mov	r0, #1
   12828:	bl	110cc <__printf_chk@plt>
   1282c:	mov	r2, #5
   12830:	movw	r1, #27688	; 0x6c28
   12834:	movt	r1, #1
   12838:	mov	r0, #0
   1283c:	bl	10f4c <dcgettext@plt>
   12840:	movw	r2, #27888	; 0x6cf0
   12844:	movt	r2, #1
   12848:	cmp	r6, r7
   1284c:	movw	r3, #27468	; 0x6b4c
   12850:	movt	r3, #1
   12854:	mov	r1, r0
   12858:	moveq	r3, r2
   1285c:	mov	r2, r6
   12860:	mov	r0, #1
   12864:	bl	110cc <__printf_chk@plt>
   12868:	b	125e0 <__assert_fail@plt+0x1454>
   1286c:	ldr	r1, [r6, #8]!
   12870:	cmp	r1, #0
   12874:	beq	12784 <__assert_fail@plt+0x15f8>
   12878:	mov	r0, r7
   1287c:	bl	10ebc <strcmp@plt>
   12880:	cmp	r0, #0
   12884:	bne	1286c <__assert_fail@plt+0x16e0>
   12888:	b	12784 <__assert_fail@plt+0x15f8>
   1288c:	mov	r0, r6
   12890:	bl	10f4c <dcgettext@plt>
   12894:	mov	r1, r0
   12898:	movw	r3, #27528	; 0x6b88
   1289c:	movt	r3, #1
   128a0:	movw	r2, #27568	; 0x6bb0
   128a4:	movt	r2, #1
   128a8:	mov	r0, #1
   128ac:	bl	110cc <__printf_chk@plt>
   128b0:	mov	r1, r6
   128b4:	mov	r0, #5
   128b8:	bl	11114 <setlocale@plt>
   128bc:	cmp	r0, #0
   128c0:	beq	128dc <__assert_fail@plt+0x1750>
   128c4:	movw	r1, #27584	; 0x6bc0
   128c8:	movt	r1, #1
   128cc:	mov	r2, #3
   128d0:	bl	11168 <strncmp@plt>
   128d4:	cmp	r0, #0
   128d8:	bne	12938 <__assert_fail@plt+0x17ac>
   128dc:	mov	r2, #5
   128e0:	movw	r1, #27660	; 0x6c0c
   128e4:	movt	r1, #1
   128e8:	mov	r0, #0
   128ec:	bl	10f4c <dcgettext@plt>
   128f0:	mov	r1, r0
   128f4:	movw	r3, #26268	; 0x669c
   128f8:	movt	r3, #1
   128fc:	movw	r2, #27528	; 0x6b88
   12900:	movt	r2, #1
   12904:	mov	r0, #1
   12908:	bl	110cc <__printf_chk@plt>
   1290c:	movw	r1, #27688	; 0x6c28
   12910:	movt	r1, #1
   12914:	mov	r2, #5
   12918:	mov	r0, #0
   1291c:	bl	10f4c <dcgettext@plt>
   12920:	movw	r6, #26268	; 0x669c
   12924:	movt	r6, #1
   12928:	movw	r3, #27888	; 0x6cf0
   1292c:	movt	r3, #1
   12930:	mov	r1, r0
   12934:	b	1285c <__assert_fail@plt+0x16d0>
   12938:	movw	r7, #26268	; 0x669c
   1293c:	movt	r7, #1
   12940:	mov	r6, r7
   12944:	mov	r2, #5
   12948:	movw	r1, #27588	; 0x6bc4
   1294c:	movt	r1, #1
   12950:	mov	r0, #0
   12954:	bl	10f4c <dcgettext@plt>
   12958:	ldr	r1, [r5]
   1295c:	bl	10ea4 <fputs_unlocked@plt>
   12960:	b	127fc <__assert_fail@plt+0x1670>
   12964:	movw	ip, #33248	; 0x81e0
   12968:	movt	ip, #2
   1296c:	strd	r4, [sp, #-20]!	; 0xffffffec
   12970:	mov	r4, #0
   12974:	strd	r6, [sp, #8]
   12978:	mov	r5, r1
   1297c:	str	lr, [sp, #16]
   12980:	sub	sp, sp, #12
   12984:	mov	lr, #2
   12988:	mov	r2, ip
   1298c:	mov	r1, r4
   12990:	add	r3, sp, #4
   12994:	mov	r7, r0
   12998:	str	lr, [ip]
   1299c:	str	r4, [sp, #4]
   129a0:	bl	11144 <getaddrinfo@plt>
   129a4:	cmp	r0, #0
   129a8:	bne	12a00 <__assert_fail@plt+0x1874>
   129ac:	ldr	r6, [sp, #4]
   129b0:	ldr	r0, [r6, #24]
   129b4:	cmp	r0, r4
   129b8:	moveq	r0, r7
   129bc:	bl	10f58 <strdup@plt>
   129c0:	adds	r3, r5, #0
   129c4:	mov	r4, r0
   129c8:	movne	r3, #1
   129cc:	cmp	r0, #0
   129d0:	movne	r3, #0
   129d4:	mov	r0, r6
   129d8:	cmp	r3, #0
   129dc:	mvnne	r3, #9
   129e0:	strne	r3, [r5]
   129e4:	bl	11138 <freeaddrinfo@plt>
   129e8:	mov	r0, r4
   129ec:	add	sp, sp, #12
   129f0:	ldrd	r4, [sp]
   129f4:	ldrd	r6, [sp, #8]
   129f8:	add	sp, sp, #16
   129fc:	pop	{pc}		; (ldr pc, [sp], #4)
   12a00:	cmp	r5, #0
   12a04:	moveq	r4, r5
   12a08:	strne	r0, [r5]
   12a0c:	b	129e8 <__assert_fail@plt+0x185c>
   12a10:	ldr	r1, [pc]	; 12a18 <__assert_fail@plt+0x188c>
   12a14:	b	12964 <__assert_fail@plt+0x17d8>
   12a18:	andeq	r8, r2, r0, lsl #4
   12a1c:	movw	r3, #33248	; 0x81e0
   12a20:	movt	r3, #2
   12a24:	ldr	r0, [r3, #32]
   12a28:	b	10eec <gai_strerror@plt>
   12a2c:	movw	r3, #33284	; 0x8204
   12a30:	movt	r3, #2
   12a34:	str	r0, [r3]
   12a38:	bx	lr
   12a3c:	movw	r3, #33284	; 0x8204
   12a40:	movt	r3, #2
   12a44:	strb	r0, [r3, #4]
   12a48:	bx	lr
   12a4c:	movw	r3, #33148	; 0x817c
   12a50:	movt	r3, #2
   12a54:	strd	r4, [sp, #-16]!
   12a58:	ldr	r0, [r3]
   12a5c:	str	r6, [sp, #8]
   12a60:	str	lr, [sp, #12]
   12a64:	sub	sp, sp, #8
   12a68:	bl	15da4 <__assert_fail@plt+0x4c18>
   12a6c:	cmp	r0, #0
   12a70:	beq	12a9c <__assert_fail@plt+0x1910>
   12a74:	movw	r4, #33284	; 0x8204
   12a78:	movt	r4, #2
   12a7c:	ldrb	r6, [r4, #4]
   12a80:	bl	11090 <__errno_location@plt>
   12a84:	mov	r5, r0
   12a88:	cmp	r6, #0
   12a8c:	beq	12ac8 <__assert_fail@plt+0x193c>
   12a90:	ldr	r3, [r0]
   12a94:	cmp	r3, #32
   12a98:	bne	12ac8 <__assert_fail@plt+0x193c>
   12a9c:	movw	r3, #33144	; 0x8178
   12aa0:	movt	r3, #2
   12aa4:	ldr	r0, [r3]
   12aa8:	bl	15da4 <__assert_fail@plt+0x4c18>
   12aac:	cmp	r0, #0
   12ab0:	bne	12b10 <__assert_fail@plt+0x1984>
   12ab4:	add	sp, sp, #8
   12ab8:	ldrd	r4, [sp]
   12abc:	ldr	r6, [sp, #8]
   12ac0:	add	sp, sp, #12
   12ac4:	pop	{pc}		; (ldr pc, [sp], #4)
   12ac8:	movw	r1, #28144	; 0x6df0
   12acc:	movt	r1, #1
   12ad0:	mov	r2, #5
   12ad4:	mov	r0, #0
   12ad8:	bl	10f4c <dcgettext@plt>
   12adc:	mov	r6, r0
   12ae0:	ldr	r0, [r4]
   12ae4:	cmp	r0, #0
   12ae8:	beq	12b20 <__assert_fail@plt+0x1994>
   12aec:	ldr	r4, [r5]
   12af0:	bl	14dd4 <__assert_fail@plt+0x3c48>
   12af4:	mov	r3, r0
   12af8:	movw	r2, #28156	; 0x6dfc
   12afc:	movt	r2, #1
   12b00:	mov	r0, #0
   12b04:	str	r6, [sp]
   12b08:	mov	r1, r4
   12b0c:	bl	10fd0 <error@plt>
   12b10:	movw	r3, #33060	; 0x8124
   12b14:	movt	r3, #2
   12b18:	ldr	r0, [r3]
   12b1c:	bl	10ef8 <_exit@plt>
   12b20:	mov	r3, r6
   12b24:	movw	r2, #28160	; 0x6e00
   12b28:	movt	r2, #1
   12b2c:	ldr	r1, [r5]
   12b30:	bl	10fd0 <error@plt>
   12b34:	b	12b10 <__assert_fail@plt+0x1984>
   12b38:	strd	r4, [sp, #-12]!
   12b3c:	mov	r5, r0
   12b40:	str	lr, [sp, #8]
   12b44:	sub	sp, sp, #12
   12b48:	bl	11090 <__errno_location@plt>
   12b4c:	mov	r4, r0
   12b50:	mov	r2, #0
   12b54:	ldr	r3, [r4]
   12b58:	mov	r0, r5
   12b5c:	str	r2, [r4]
   12b60:	str	r3, [sp]
   12b64:	str	r3, [sp, #4]
   12b68:	bl	10ee0 <free@plt>
   12b6c:	ldr	r3, [r4]
   12b70:	add	r2, sp, #8
   12b74:	clz	r3, r3
   12b78:	lsr	r3, r3, #5
   12b7c:	add	r3, r2, r3, lsl #2
   12b80:	ldr	r3, [r3, #-8]
   12b84:	str	r3, [r4]
   12b88:	add	sp, sp, #12
   12b8c:	ldrd	r4, [sp]
   12b90:	add	sp, sp, #8
   12b94:	pop	{pc}		; (ldr pc, [sp], #4)
   12b98:	push	{lr}		; (str lr, [sp, #-4]!)
   12b9c:	sub	sp, sp, #268	; 0x10c
   12ba0:	movw	r2, #257	; 0x101
   12ba4:	add	r1, sp, #4
   12ba8:	bl	15188 <__assert_fail@plt+0x3ffc>
   12bac:	cmp	r0, #0
   12bb0:	movne	r0, #0
   12bb4:	bne	12be8 <__assert_fail@plt+0x1a5c>
   12bb8:	movw	r1, #28164	; 0x6e04
   12bbc:	movt	r1, #1
   12bc0:	add	r0, sp, #4
   12bc4:	bl	10ebc <strcmp@plt>
   12bc8:	cmp	r0, #0
   12bcc:	beq	12be8 <__assert_fail@plt+0x1a5c>
   12bd0:	add	r0, sp, #4
   12bd4:	movw	r1, #28168	; 0x6e08
   12bd8:	movt	r1, #1
   12bdc:	bl	10ebc <strcmp@plt>
   12be0:	adds	r0, r0, #0
   12be4:	movne	r0, #1
   12be8:	add	sp, sp, #268	; 0x10c
   12bec:	pop	{pc}		; (ldr pc, [sp], #4)
   12bf0:	mov	r3, #0
   12bf4:	cmp	r0, #0
   12bf8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12bfc:	mov	r5, r1
   12c00:	sbcs	r1, r1, #0
   12c04:	strd	r6, [sp, #8]
   12c08:	mov	r4, r0
   12c0c:	add	r6, r2, #20
   12c10:	str	r8, [sp, #16]
   12c14:	str	lr, [sp, #20]
   12c18:	strb	r3, [r2, #20]
   12c1c:	blt	12c7c <__assert_fail@plt+0x1af0>
   12c20:	mov	r0, r4
   12c24:	mov	r1, r5
   12c28:	mov	r2, #10
   12c2c:	mov	r3, #0
   12c30:	bl	16104 <__assert_fail@plt+0x4f78>
   12c34:	add	ip, r2, #48	; 0x30
   12c38:	mov	r0, r4
   12c3c:	mov	r1, r5
   12c40:	mov	r3, #0
   12c44:	mov	r2, #10
   12c48:	strb	ip, [r6, #-1]!
   12c4c:	bl	16104 <__assert_fail@plt+0x4f78>
   12c50:	mov	r4, r0
   12c54:	mov	r5, r1
   12c58:	orrs	r3, r4, r5
   12c5c:	bne	12c20 <__assert_fail@plt+0x1a94>
   12c60:	mov	r0, r6
   12c64:	ldrd	r4, [sp]
   12c68:	ldrd	r6, [sp, #8]
   12c6c:	ldr	r8, [sp, #16]
   12c70:	add	sp, sp, #20
   12c74:	pop	{pc}		; (ldr pc, [sp], #4)
   12c78:	mov	r6, r7
   12c7c:	mov	r0, r4
   12c80:	mov	r1, r5
   12c84:	mov	r2, #10
   12c88:	mov	r3, #0
   12c8c:	bl	16104 <__assert_fail@plt+0x4f78>
   12c90:	rsb	ip, r2, #48	; 0x30
   12c94:	mov	r0, r4
   12c98:	mov	r1, r5
   12c9c:	mov	r3, #0
   12ca0:	mov	r2, #10
   12ca4:	strb	ip, [r6, #-1]
   12ca8:	sub	r7, r6, #1
   12cac:	bl	16104 <__assert_fail@plt+0x4f78>
   12cb0:	mov	r4, r0
   12cb4:	mov	r5, r1
   12cb8:	orrs	r3, r4, r5
   12cbc:	bne	12c78 <__assert_fail@plt+0x1aec>
   12cc0:	mov	r3, #45	; 0x2d
   12cc4:	sub	r6, r6, #2
   12cc8:	strb	r3, [r7, #-1]
   12ccc:	b	12c60 <__assert_fail@plt+0x1ad4>
   12cd0:	strd	r4, [sp, #-16]!
   12cd4:	subs	r4, r0, #0
   12cd8:	str	r6, [sp, #8]
   12cdc:	str	lr, [sp, #12]
   12ce0:	beq	12d78 <__assert_fail@plt+0x1bec>
   12ce4:	mov	r1, #47	; 0x2f
   12ce8:	bl	11120 <strrchr@plt>
   12cec:	subs	r5, r0, #0
   12cf0:	beq	12d50 <__assert_fail@plt+0x1bc4>
   12cf4:	add	r6, r5, #1
   12cf8:	sub	r3, r6, r4
   12cfc:	cmp	r3, #6
   12d00:	ble	12d50 <__assert_fail@plt+0x1bc4>
   12d04:	movw	r1, #28232	; 0x6e48
   12d08:	movt	r1, #1
   12d0c:	mov	r2, #7
   12d10:	sub	r0, r5, #6
   12d14:	bl	11168 <strncmp@plt>
   12d18:	cmp	r0, #0
   12d1c:	bne	12d50 <__assert_fail@plt+0x1bc4>
   12d20:	movw	r1, #28240	; 0x6e50
   12d24:	movt	r1, #1
   12d28:	mov	r2, #3
   12d2c:	mov	r0, r6
   12d30:	bl	11168 <strncmp@plt>
   12d34:	cmp	r0, #0
   12d38:	movne	r4, r6
   12d3c:	bne	12d50 <__assert_fail@plt+0x1bc4>
   12d40:	add	r4, r5, #4
   12d44:	movw	r3, #33128	; 0x8168
   12d48:	movt	r3, #2
   12d4c:	str	r4, [r3]
   12d50:	movw	r2, #33292	; 0x820c
   12d54:	movt	r2, #2
   12d58:	ldr	r6, [sp, #8]
   12d5c:	movw	r3, #33132	; 0x816c
   12d60:	movt	r3, #2
   12d64:	str	r4, [r2]
   12d68:	str	r4, [r3]
   12d6c:	ldrd	r4, [sp]
   12d70:	add	sp, sp, #12
   12d74:	pop	{pc}		; (ldr pc, [sp], #4)
   12d78:	movw	r3, #33144	; 0x8178
   12d7c:	movt	r3, #2
   12d80:	movw	r0, #28176	; 0x6e10
   12d84:	movt	r0, #1
   12d88:	ldr	r3, [r3]
   12d8c:	mov	r2, #55	; 0x37
   12d90:	mov	r1, #1
   12d94:	bl	10f94 <fwrite@plt>
   12d98:	bl	11174 <abort@plt>
   12d9c:	strd	r4, [sp, #-16]!
   12da0:	mov	r4, #0
   12da4:	mov	r5, #0
   12da8:	cmp	r1, #10
   12dac:	str	r6, [sp, #8]
   12db0:	strd	r4, [r0]
   12db4:	strd	r4, [r0, #8]
   12db8:	str	lr, [sp, #12]
   12dbc:	strd	r4, [r0, #16]
   12dc0:	strd	r4, [r0, #24]
   12dc4:	strd	r4, [r0, #32]
   12dc8:	strd	r4, [r0, #40]	; 0x28
   12dcc:	beq	12de4 <__assert_fail@plt+0x1c58>
   12dd0:	ldrd	r4, [sp]
   12dd4:	str	r1, [r0]
   12dd8:	ldr	r6, [sp, #8]
   12ddc:	add	sp, sp, #12
   12de0:	pop	{pc}		; (ldr pc, [sp], #4)
   12de4:	bl	11174 <abort@plt>
   12de8:	mov	r2, #5
   12dec:	strd	r4, [sp, #-16]!
   12df0:	mov	r5, r0
   12df4:	str	r6, [sp, #8]
   12df8:	mov	r6, r1
   12dfc:	mov	r1, r0
   12e00:	mov	r0, #0
   12e04:	str	lr, [sp, #12]
   12e08:	bl	10f4c <dcgettext@plt>
   12e0c:	cmp	r5, r0
   12e10:	mov	r4, r0
   12e14:	beq	12e2c <__assert_fail@plt+0x1ca0>
   12e18:	mov	r0, r4
   12e1c:	ldrd	r4, [sp]
   12e20:	ldr	r6, [sp, #8]
   12e24:	add	sp, sp, #12
   12e28:	pop	{pc}		; (ldr pc, [sp], #4)
   12e2c:	bl	16010 <__assert_fail@plt+0x4e84>
   12e30:	ldrb	r3, [r0]
   12e34:	bic	r3, r3, #32
   12e38:	cmp	r3, #85	; 0x55
   12e3c:	bne	12ea4 <__assert_fail@plt+0x1d18>
   12e40:	ldrb	r3, [r0, #1]
   12e44:	bic	r3, r3, #32
   12e48:	cmp	r3, #84	; 0x54
   12e4c:	bne	12f24 <__assert_fail@plt+0x1d98>
   12e50:	ldrb	r3, [r0, #2]
   12e54:	bic	r3, r3, #32
   12e58:	cmp	r3, #70	; 0x46
   12e5c:	bne	12f24 <__assert_fail@plt+0x1d98>
   12e60:	ldrb	r3, [r0, #3]
   12e64:	cmp	r3, #45	; 0x2d
   12e68:	bne	12f24 <__assert_fail@plt+0x1d98>
   12e6c:	ldrb	r3, [r0, #4]
   12e70:	cmp	r3, #56	; 0x38
   12e74:	bne	12f24 <__assert_fail@plt+0x1d98>
   12e78:	ldrb	r3, [r0, #5]
   12e7c:	cmp	r3, #0
   12e80:	bne	12f24 <__assert_fail@plt+0x1d98>
   12e84:	ldrb	r2, [r4]
   12e88:	movw	r3, #28332	; 0x6eac
   12e8c:	movt	r3, #1
   12e90:	movw	r4, #28344	; 0x6eb8
   12e94:	movt	r4, #1
   12e98:	cmp	r2, #96	; 0x60
   12e9c:	movne	r4, r3
   12ea0:	b	12e18 <__assert_fail@plt+0x1c8c>
   12ea4:	cmp	r3, #71	; 0x47
   12ea8:	bne	12f24 <__assert_fail@plt+0x1d98>
   12eac:	ldrb	r3, [r0, #1]
   12eb0:	bic	r3, r3, #32
   12eb4:	cmp	r3, #66	; 0x42
   12eb8:	bne	12f24 <__assert_fail@plt+0x1d98>
   12ebc:	ldrb	r3, [r0, #2]
   12ec0:	cmp	r3, #49	; 0x31
   12ec4:	bne	12f24 <__assert_fail@plt+0x1d98>
   12ec8:	ldrb	r3, [r0, #3]
   12ecc:	cmp	r3, #56	; 0x38
   12ed0:	bne	12f24 <__assert_fail@plt+0x1d98>
   12ed4:	ldrb	r3, [r0, #4]
   12ed8:	cmp	r3, #48	; 0x30
   12edc:	bne	12f24 <__assert_fail@plt+0x1d98>
   12ee0:	ldrb	r3, [r0, #5]
   12ee4:	cmp	r3, #51	; 0x33
   12ee8:	bne	12f24 <__assert_fail@plt+0x1d98>
   12eec:	ldrb	r3, [r0, #6]
   12ef0:	cmp	r3, #48	; 0x30
   12ef4:	bne	12f24 <__assert_fail@plt+0x1d98>
   12ef8:	ldrb	r3, [r0, #7]
   12efc:	cmp	r3, #0
   12f00:	bne	12f24 <__assert_fail@plt+0x1d98>
   12f04:	ldrb	r2, [r4]
   12f08:	movw	r3, #28336	; 0x6eb0
   12f0c:	movt	r3, #1
   12f10:	movw	r4, #28340	; 0x6eb4
   12f14:	movt	r4, #1
   12f18:	cmp	r2, #96	; 0x60
   12f1c:	movne	r4, r3
   12f20:	b	12e18 <__assert_fail@plt+0x1c8c>
   12f24:	movw	r3, #28348	; 0x6ebc
   12f28:	movt	r3, #1
   12f2c:	cmp	r6, #9
   12f30:	movw	r4, #28328	; 0x6ea8
   12f34:	movt	r4, #1
   12f38:	movne	r4, r3
   12f3c:	b	12e18 <__assert_fail@plt+0x1c8c>
   12f40:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12f44:	strd	r6, [sp, #8]
   12f48:	strd	r8, [sp, #16]
   12f4c:	strd	sl, [sp, #24]
   12f50:	mov	fp, r0
   12f54:	mov	sl, r1
   12f58:	str	lr, [sp, #32]
   12f5c:	sub	sp, sp, #116	; 0x74
   12f60:	ldr	r8, [sp, #152]	; 0x98
   12f64:	str	r3, [sp, #28]
   12f68:	ldr	r3, [sp, #156]	; 0x9c
   12f6c:	str	r2, [sp, #32]
   12f70:	and	r4, r3, #2
   12f74:	ubfx	r3, r3, #1, #1
   12f78:	str	r3, [sp, #44]	; 0x2c
   12f7c:	bl	10fac <__ctype_get_mb_cur_max@plt>
   12f80:	str	r0, [sp, #64]	; 0x40
   12f84:	cmp	r8, #10
   12f88:	ldrls	pc, [pc, r8, lsl #2]
   12f8c:	b	146fc <__assert_fail@plt+0x3570>
   12f90:	muleq	r1, r4, r3
   12f94:	andeq	r3, r1, r0, lsr r4
   12f98:	andeq	r3, r1, ip, lsl #20
   12f9c:	andeq	r3, r1, r0, asr r4
   12fa0:	strdeq	r3, [r1], -r8
   12fa4:	andeq	r3, r1, r4, asr #6
   12fa8:	andeq	r3, r1, r4, asr #7
   12fac:	andeq	r3, r1, r0, lsl #8
   12fb0:			; <UNDEFINED> instruction: 0x00012fbc
   12fb4:			; <UNDEFINED> instruction: 0x00012fbc
   12fb8:			; <UNDEFINED> instruction: 0x00012fbc
   12fbc:	cmp	r8, #10
   12fc0:	beq	12fec <__assert_fail@plt+0x1e60>
   12fc4:	mov	r1, r8
   12fc8:	movw	r0, #28352	; 0x6ec0
   12fcc:	movt	r0, #1
   12fd0:	bl	12de8 <__assert_fail@plt+0x1c5c>
   12fd4:	mov	r1, r8
   12fd8:	str	r0, [sp, #164]	; 0xa4
   12fdc:	movw	r0, #28348	; 0x6ebc
   12fe0:	movt	r0, #1
   12fe4:	bl	12de8 <__assert_fail@plt+0x1c5c>
   12fe8:	str	r0, [sp, #168]	; 0xa8
   12fec:	cmp	r4, #0
   12ff0:	movne	r4, #0
   12ff4:	beq	143d8 <__assert_fail@plt+0x324c>
   12ff8:	mov	r3, #1
   12ffc:	mov	r5, #0
   13000:	ldr	r0, [sp, #168]	; 0xa8
   13004:	str	r3, [sp, #36]	; 0x24
   13008:	str	r3, [sp, #40]	; 0x28
   1300c:	str	r5, [sp, #68]	; 0x44
   13010:	bl	11078 <strlen@plt>
   13014:	ldr	r3, [sp, #168]	; 0xa8
   13018:	str	r5, [sp, #48]	; 0x30
   1301c:	str	r0, [sp, #56]	; 0x38
   13020:	str	r3, [sp, #60]	; 0x3c
   13024:	str	r5, [sp, #72]	; 0x48
   13028:	str	r8, [sp, #152]	; 0x98
   1302c:	mov	r8, fp
   13030:	mov	r9, #0
   13034:	ldr	fp, [sp, #152]	; 0x98
   13038:	ldr	r3, [sp, #28]
   1303c:	cmn	r3, #1
   13040:	beq	135a0 <__assert_fail@plt+0x2414>
   13044:	ldr	r3, [sp, #28]
   13048:	subs	r6, r3, r9
   1304c:	movne	r6, #1
   13050:	cmp	r6, #0
   13054:	beq	135b8 <__assert_fail@plt+0x242c>
   13058:	ldr	r0, [sp, #32]
   1305c:	ldr	r7, [sp, #40]	; 0x28
   13060:	add	r3, r0, r9
   13064:	cmp	fp, #2
   13068:	moveq	r7, #0
   1306c:	andne	r7, r7, #1
   13070:	str	r3, [sp, #52]	; 0x34
   13074:	cmp	r7, #0
   13078:	beq	13a54 <__assert_fail@plt+0x28c8>
   1307c:	ldr	r2, [sp, #56]	; 0x38
   13080:	cmp	r2, #0
   13084:	beq	13cf0 <__assert_fail@plt+0x2b64>
   13088:	ldr	r1, [sp, #28]
   1308c:	cmp	r2, #1
   13090:	mov	r3, r2
   13094:	movls	r3, #0
   13098:	movhi	r3, #1
   1309c:	add	r5, r9, r2
   130a0:	cmn	r1, #1
   130a4:	movne	r3, #0
   130a8:	cmp	r3, #0
   130ac:	beq	130b8 <__assert_fail@plt+0x1f2c>
   130b0:	bl	11078 <strlen@plt>
   130b4:	str	r0, [sp, #28]
   130b8:	ldr	r3, [sp, #28]
   130bc:	cmp	r5, r3
   130c0:	bhi	13cf0 <__assert_fail@plt+0x2b64>
   130c4:	ldr	r0, [sp, #52]	; 0x34
   130c8:	ldr	r2, [sp, #56]	; 0x38
   130cc:	ldr	r1, [sp, #60]	; 0x3c
   130d0:	bl	10f28 <memcmp@plt>
   130d4:	cmp	r0, #0
   130d8:	bne	13cf0 <__assert_fail@plt+0x2b64>
   130dc:	ldr	r3, [sp, #44]	; 0x2c
   130e0:	cmp	r3, #0
   130e4:	bne	14620 <__assert_fail@plt+0x3494>
   130e8:	ldr	r3, [sp, #52]	; 0x34
   130ec:	ldrb	r5, [r3]
   130f0:	cmp	r5, #126	; 0x7e
   130f4:	ldrls	pc, [pc, r5, lsl #2]
   130f8:	b	139b0 <__assert_fail@plt+0x2824>
   130fc:			; <UNDEFINED> instruction: 0x000138b4
   13100:			; <UNDEFINED> instruction: 0x000139b0
   13104:			; <UNDEFINED> instruction: 0x000139b0
   13108:			; <UNDEFINED> instruction: 0x000139b0
   1310c:			; <UNDEFINED> instruction: 0x000139b0
   13110:			; <UNDEFINED> instruction: 0x000139b0
   13114:			; <UNDEFINED> instruction: 0x000139b0
   13118:	andeq	r3, r1, r8, lsl #17
   1311c:	andeq	r3, r1, r0, lsl #17
   13120:	andeq	r3, r1, r8, asr #15
   13124:	andeq	r3, r1, r4, ror r8
   13128:	andeq	r3, r1, r0, asr #15
   1312c:	andeq	r3, r1, r0, asr r8
   13130:	muleq	r1, ip, r8
   13134:			; <UNDEFINED> instruction: 0x000139b0
   13138:			; <UNDEFINED> instruction: 0x000139b0
   1313c:			; <UNDEFINED> instruction: 0x000139b0
   13140:			; <UNDEFINED> instruction: 0x000139b0
   13144:			; <UNDEFINED> instruction: 0x000139b0
   13148:			; <UNDEFINED> instruction: 0x000139b0
   1314c:			; <UNDEFINED> instruction: 0x000139b0
   13150:			; <UNDEFINED> instruction: 0x000139b0
   13154:			; <UNDEFINED> instruction: 0x000139b0
   13158:			; <UNDEFINED> instruction: 0x000139b0
   1315c:			; <UNDEFINED> instruction: 0x000139b0
   13160:			; <UNDEFINED> instruction: 0x000139b0
   13164:			; <UNDEFINED> instruction: 0x000139b0
   13168:			; <UNDEFINED> instruction: 0x000139b0
   1316c:			; <UNDEFINED> instruction: 0x000139b0
   13170:			; <UNDEFINED> instruction: 0x000139b0
   13174:			; <UNDEFINED> instruction: 0x000139b0
   13178:			; <UNDEFINED> instruction: 0x000139b0
   1317c:	andeq	r3, r1, ip, lsl #19
   13180:	muleq	r1, r4, r8
   13184:	muleq	r1, r4, r8
   13188:	andeq	r3, r1, r0, ror r9
   1318c:	muleq	r1, r4, r8
   13190:	andeq	r3, r1, r4, lsr #19
   13194:	muleq	r1, r4, r8
   13198:	strdeq	r3, [r1], -r0
   1319c:	muleq	r1, r4, r8
   131a0:	muleq	r1, r4, r8
   131a4:	muleq	r1, r4, r8
   131a8:	andeq	r3, r1, r4, lsr #19
   131ac:	andeq	r3, r1, r4, lsr #19
   131b0:	andeq	r3, r1, r4, lsr #19
   131b4:	andeq	r3, r1, r4, lsr #19
   131b8:	andeq	r3, r1, r4, lsr #19
   131bc:	andeq	r3, r1, r4, lsr #19
   131c0:	andeq	r3, r1, r4, lsr #19
   131c4:	andeq	r3, r1, r4, lsr #19
   131c8:	andeq	r3, r1, r4, lsr #19
   131cc:	andeq	r3, r1, r4, lsr #19
   131d0:	andeq	r3, r1, r4, lsr #19
   131d4:	andeq	r3, r1, r4, lsr #19
   131d8:	andeq	r3, r1, r4, lsr #19
   131dc:	andeq	r3, r1, r4, lsr #19
   131e0:	andeq	r3, r1, r4, lsr #19
   131e4:	andeq	r3, r1, r4, lsr #19
   131e8:	muleq	r1, r4, r8
   131ec:	muleq	r1, r4, r8
   131f0:	muleq	r1, r4, r8
   131f4:	muleq	r1, r4, r8
   131f8:	andeq	r3, r1, r4, asr #13
   131fc:			; <UNDEFINED> instruction: 0x000139b0
   13200:	andeq	r3, r1, r4, lsr #19
   13204:	andeq	r3, r1, r4, lsr #19
   13208:	andeq	r3, r1, r4, lsr #19
   1320c:	andeq	r3, r1, r4, lsr #19
   13210:	andeq	r3, r1, r4, lsr #19
   13214:	andeq	r3, r1, r4, lsr #19
   13218:	andeq	r3, r1, r4, lsr #19
   1321c:	andeq	r3, r1, r4, lsr #19
   13220:	andeq	r3, r1, r4, lsr #19
   13224:	andeq	r3, r1, r4, lsr #19
   13228:	andeq	r3, r1, r4, lsr #19
   1322c:	andeq	r3, r1, r4, lsr #19
   13230:	andeq	r3, r1, r4, lsr #19
   13234:	andeq	r3, r1, r4, lsr #19
   13238:	andeq	r3, r1, r4, lsr #19
   1323c:	andeq	r3, r1, r4, lsr #19
   13240:	andeq	r3, r1, r4, lsr #19
   13244:	andeq	r3, r1, r4, lsr #19
   13248:	andeq	r3, r1, r4, lsr #19
   1324c:	andeq	r3, r1, r4, lsr #19
   13250:	andeq	r3, r1, r4, lsr #19
   13254:	andeq	r3, r1, r4, lsr #19
   13258:	andeq	r3, r1, r4, lsr #19
   1325c:	andeq	r3, r1, r4, lsr #19
   13260:	andeq	r3, r1, r4, lsr #19
   13264:	andeq	r3, r1, r4, lsr #19
   13268:	muleq	r1, r4, r8
   1326c:	andeq	r3, r1, ip, ror #12
   13270:	andeq	r3, r1, r4, lsr #19
   13274:	muleq	r1, r4, r8
   13278:	andeq	r3, r1, r4, lsr #19
   1327c:	muleq	r1, r4, r8
   13280:	andeq	r3, r1, r4, lsr #19
   13284:	andeq	r3, r1, r4, lsr #19
   13288:	andeq	r3, r1, r4, lsr #19
   1328c:	andeq	r3, r1, r4, lsr #19
   13290:	andeq	r3, r1, r4, lsr #19
   13294:	andeq	r3, r1, r4, lsr #19
   13298:	andeq	r3, r1, r4, lsr #19
   1329c:	andeq	r3, r1, r4, lsr #19
   132a0:	andeq	r3, r1, r4, lsr #19
   132a4:	andeq	r3, r1, r4, lsr #19
   132a8:	andeq	r3, r1, r4, lsr #19
   132ac:	andeq	r3, r1, r4, lsr #19
   132b0:	andeq	r3, r1, r4, lsr #19
   132b4:	andeq	r3, r1, r4, lsr #19
   132b8:	andeq	r3, r1, r4, lsr #19
   132bc:	andeq	r3, r1, r4, lsr #19
   132c0:	andeq	r3, r1, r4, lsr #19
   132c4:	andeq	r3, r1, r4, lsr #19
   132c8:	andeq	r3, r1, r4, lsr #19
   132cc:	andeq	r3, r1, r4, lsr #19
   132d0:	andeq	r3, r1, r4, lsr #19
   132d4:	andeq	r3, r1, r4, lsr #19
   132d8:	andeq	r3, r1, r4, lsr #19
   132dc:	andeq	r3, r1, r4, lsr #19
   132e0:	andeq	r3, r1, r4, lsr #19
   132e4:	andeq	r3, r1, r4, lsr #19
   132e8:	muleq	r1, r0, r4
   132ec:	muleq	r1, r4, r8
   132f0:	muleq	r1, r0, r4
   132f4:	andeq	r3, r1, r0, ror r9
   132f8:	cmp	r4, #0
   132fc:	moveq	r3, #1
   13300:	streq	r3, [sp, #40]	; 0x28
   13304:	beq	13a18 <__assert_fail@plt+0x288c>
   13308:	mov	r3, #0
   1330c:	mov	r2, #1
   13310:	mov	r4, r3
   13314:	str	r2, [sp, #36]	; 0x24
   13318:	str	r2, [sp, #44]	; 0x2c
   1331c:	str	r2, [sp, #56]	; 0x38
   13320:	str	r3, [sp, #68]	; 0x44
   13324:	movw	r3, #28348	; 0x6ebc
   13328:	movt	r3, #1
   1332c:	str	r4, [sp, #40]	; 0x28
   13330:	mov	r8, #2
   13334:	str	r4, [sp, #48]	; 0x30
   13338:	str	r3, [sp, #60]	; 0x3c
   1333c:	str	r4, [sp, #72]	; 0x48
   13340:	b	13028 <__assert_fail@plt+0x1e9c>
   13344:	cmp	r4, #0
   13348:	bne	14594 <__assert_fail@plt+0x3408>
   1334c:	cmp	sl, #0
   13350:	beq	14354 <__assert_fail@plt+0x31c8>
   13354:	mov	r3, #34	; 0x22
   13358:	mov	r1, r4
   1335c:	mov	r2, #1
   13360:	strb	r3, [fp]
   13364:	movw	r3, #28328	; 0x6ea8
   13368:	movt	r3, #1
   1336c:	mov	r4, r2
   13370:	str	r2, [sp, #36]	; 0x24
   13374:	str	r2, [sp, #40]	; 0x28
   13378:	str	r1, [sp, #44]	; 0x2c
   1337c:	str	r1, [sp, #48]	; 0x30
   13380:	str	r2, [sp, #56]	; 0x38
   13384:	str	r3, [sp, #60]	; 0x3c
   13388:	str	r1, [sp, #68]	; 0x44
   1338c:	str	r1, [sp, #72]	; 0x48
   13390:	b	13028 <__assert_fail@plt+0x1e9c>
   13394:	mov	r3, #0
   13398:	mov	r4, r8
   1339c:	str	r3, [sp, #40]	; 0x28
   133a0:	str	r3, [sp, #44]	; 0x2c
   133a4:	str	r3, [sp, #48]	; 0x30
   133a8:	str	r8, [sp, #56]	; 0x38
   133ac:	str	r3, [sp, #60]	; 0x3c
   133b0:	str	r3, [sp, #68]	; 0x44
   133b4:	mov	r3, #1
   133b8:	str	r3, [sp, #36]	; 0x24
   133bc:	str	r8, [sp, #72]	; 0x48
   133c0:	b	13028 <__assert_fail@plt+0x1e9c>
   133c4:	mov	r3, #1
   133c8:	mov	r2, #0
   133cc:	mov	r4, r2
   133d0:	mov	r8, #5
   133d4:	str	r3, [sp, #36]	; 0x24
   133d8:	str	r3, [sp, #40]	; 0x28
   133dc:	str	r3, [sp, #44]	; 0x2c
   133e0:	str	r2, [sp, #48]	; 0x30
   133e4:	str	r3, [sp, #56]	; 0x38
   133e8:	movw	r3, #28328	; 0x6ea8
   133ec:	movt	r3, #1
   133f0:	str	r3, [sp, #60]	; 0x3c
   133f4:	str	r2, [sp, #68]	; 0x44
   133f8:	str	r2, [sp, #72]	; 0x48
   133fc:	b	13028 <__assert_fail@plt+0x1e9c>
   13400:	mov	r3, #0
   13404:	mov	r2, #1
   13408:	mov	r4, r3
   1340c:	str	r2, [sp, #36]	; 0x24
   13410:	str	r2, [sp, #40]	; 0x28
   13414:	str	r3, [sp, #44]	; 0x2c
   13418:	str	r3, [sp, #48]	; 0x30
   1341c:	str	r3, [sp, #56]	; 0x38
   13420:	str	r3, [sp, #60]	; 0x3c
   13424:	str	r3, [sp, #68]	; 0x44
   13428:	str	r3, [sp, #72]	; 0x48
   1342c:	b	13028 <__assert_fail@plt+0x1e9c>
   13430:	mov	r2, #1
   13434:	mov	r3, #0
   13438:	mov	r4, r3
   1343c:	str	r2, [sp, #36]	; 0x24
   13440:	str	r2, [sp, #44]	; 0x2c
   13444:	str	r8, [sp, #56]	; 0x38
   13448:	str	r3, [sp, #68]	; 0x44
   1344c:	b	13324 <__assert_fail@plt+0x2198>
   13450:	mov	r3, #1
   13454:	mov	r2, #0
   13458:	mov	r4, r2
   1345c:	mov	r8, #2
   13460:	str	r3, [sp, #36]	; 0x24
   13464:	str	r3, [sp, #40]	; 0x28
   13468:	str	r3, [sp, #44]	; 0x2c
   1346c:	str	r2, [sp, #48]	; 0x30
   13470:	str	r3, [sp, #56]	; 0x38
   13474:	movw	r3, #28348	; 0x6ebc
   13478:	movt	r3, #1
   1347c:	str	r3, [sp, #60]	; 0x3c
   13480:	str	r2, [sp, #68]	; 0x44
   13484:	str	r2, [sp, #72]	; 0x48
   13488:	b	13028 <__assert_fail@plt+0x1e9c>
   1348c:	mov	r7, #0
   13490:	ldr	r3, [sp, #28]
   13494:	cmn	r3, #1
   13498:	beq	13f70 <__assert_fail@plt+0x2de4>
   1349c:	ldr	r3, [sp, #28]
   134a0:	subs	r2, r3, #1
   134a4:	movne	r2, #1
   134a8:	sub	r3, fp, #2
   134ac:	cmp	r2, #0
   134b0:	clz	r3, r3
   134b4:	lsr	r3, r3, #5
   134b8:	bne	134c4 <__assert_fail@plt+0x2338>
   134bc:	cmp	r9, #0
   134c0:	beq	13cd0 <__assert_fail@plt+0x2b44>
   134c4:	mov	r6, #0
   134c8:	ldr	r2, [sp, #40]	; 0x28
   134cc:	eor	r2, r2, #1
   134d0:	orrs	r3, r3, r2
   134d4:	bne	136ac <__assert_fail@plt+0x2520>
   134d8:	ldr	r2, [sp, #160]	; 0xa0
   134dc:	cmp	r2, #0
   134e0:	beq	13500 <__assert_fail@plt+0x2374>
   134e4:	ldr	r0, [sp, #160]	; 0xa0
   134e8:	ubfx	r1, r5, #5, #8
   134ec:	and	r2, r5, #31
   134f0:	ldr	r1, [r0, r1, lsl #2]
   134f4:	lsr	r2, r1, r2
   134f8:	tst	r2, #1
   134fc:	bne	13508 <__assert_fail@plt+0x237c>
   13500:	cmp	r7, #0
   13504:	beq	13778 <__assert_fail@plt+0x25ec>
   13508:	ldr	r2, [sp, #44]	; 0x2c
   1350c:	sub	r3, fp, #2
   13510:	clz	r3, r3
   13514:	lsr	r3, r3, #5
   13518:	cmp	r2, #0
   1351c:	bne	142c4 <__assert_fail@plt+0x3138>
   13520:	ldr	r2, [sp, #48]	; 0x30
   13524:	eor	r2, r2, #1
   13528:	ands	r3, r3, r2
   1352c:	beq	13564 <__assert_fail@plt+0x23d8>
   13530:	cmp	sl, r4
   13534:	str	r3, [sp, #48]	; 0x30
   13538:	movhi	r2, #39	; 0x27
   1353c:	strbhi	r2, [r8, r4]
   13540:	add	r2, r4, #1
   13544:	cmp	sl, r2
   13548:	movhi	r1, #36	; 0x24
   1354c:	strbhi	r1, [r8, r2]
   13550:	add	r2, r4, #2
   13554:	add	r4, r4, #3
   13558:	cmp	sl, r2
   1355c:	movhi	r1, #39	; 0x27
   13560:	strbhi	r1, [r8, r2]
   13564:	cmp	r4, sl
   13568:	add	r9, r9, #1
   1356c:	movcc	r3, #92	; 0x5c
   13570:	strbcc	r3, [r8, r4]
   13574:	add	r4, r4, #1
   13578:	cmp	r4, sl
   1357c:	ldr	r3, [sp, #36]	; 0x24
   13580:	strbcc	r5, [r8, r4]
   13584:	cmp	r6, #0
   13588:	add	r4, r4, #1
   1358c:	moveq	r3, #0
   13590:	str	r3, [sp, #36]	; 0x24
   13594:	ldr	r3, [sp, #28]
   13598:	cmn	r3, #1
   1359c:	bne	13044 <__assert_fail@plt+0x1eb8>
   135a0:	ldr	r3, [sp, #32]
   135a4:	ldrb	r6, [r3, r9]
   135a8:	adds	r6, r6, #0
   135ac:	movne	r6, #1
   135b0:	cmp	r6, #0
   135b4:	bne	13058 <__assert_fail@plt+0x1ecc>
   135b8:	str	fp, [sp, #152]	; 0x98
   135bc:	mov	fp, r8
   135c0:	cmp	r4, #0
   135c4:	ldr	r1, [sp, #44]	; 0x2c
   135c8:	movne	r3, #0
   135cc:	ldr	r8, [sp, #152]	; 0x98
   135d0:	sub	r2, r8, #2
   135d4:	clz	r2, r2
   135d8:	lsr	r2, r2, #5
   135dc:	andeq	r3, r2, r1
   135e0:	cmp	r3, #0
   135e4:	bne	146a0 <__assert_fail@plt+0x3514>
   135e8:	eor	r3, r1, #1
   135ec:	ands	r2, r2, r3
   135f0:	beq	145cc <__assert_fail@plt+0x3440>
   135f4:	ldr	r3, [sp, #68]	; 0x44
   135f8:	cmp	r3, #0
   135fc:	beq	145d0 <__assert_fail@plt+0x3444>
   13600:	ldr	r3, [sp, #36]	; 0x24
   13604:	cmp	r3, #0
   13608:	bne	1465c <__assert_fail@plt+0x34d0>
   1360c:	ldr	r3, [sp, #72]	; 0x48
   13610:	adds	r3, r3, #0
   13614:	movne	r3, #1
   13618:	cmp	sl, #0
   1361c:	movne	r3, #0
   13620:	cmp	r3, #0
   13624:	ldreq	r2, [sp, #68]	; 0x44
   13628:	beq	145d0 <__assert_fail@plt+0x3444>
   1362c:	ldr	r2, [sp, #72]	; 0x48
   13630:	str	r3, [sp, #68]	; 0x44
   13634:	movw	r3, #28348	; 0x6ebc
   13638:	movt	r3, #1
   1363c:	mov	r1, #39	; 0x27
   13640:	mov	r4, #1
   13644:	ldr	sl, [sp, #72]	; 0x48
   13648:	mov	r8, #2
   1364c:	str	r3, [sp, #60]	; 0x3c
   13650:	mov	r3, #0
   13654:	strb	r1, [fp]
   13658:	str	r3, [sp, #44]	; 0x2c
   1365c:	str	r4, [sp, #56]	; 0x38
   13660:	str	r2, [sp, #72]	; 0x48
   13664:	b	13028 <__assert_fail@plt+0x1e9c>
   13668:	mov	r7, #0
   1366c:	cmp	fp, #2
   13670:	beq	13f50 <__assert_fail@plt+0x2dc4>
   13674:	ldr	r2, [sp, #40]	; 0x28
   13678:	ldr	r3, [sp, #56]	; 0x38
   1367c:	ldr	r1, [sp, #44]	; 0x2c
   13680:	cmp	r3, #0
   13684:	moveq	r3, #0
   13688:	andne	r3, r2, r1
   1368c:	cmp	r3, #0
   13690:	moveq	r5, #92	; 0x5c
   13694:	moveq	r3, r5
   13698:	bne	13f5c <__assert_fail@plt+0x2dd0>
   1369c:	ldr	r2, [sp, #40]	; 0x28
   136a0:	cmp	r2, #0
   136a4:	bne	14398 <__assert_fail@plt+0x320c>
   136a8:	mov	r6, #0
   136ac:	ldr	r3, [sp, #44]	; 0x2c
   136b0:	cmp	r3, #0
   136b4:	beq	13f48 <__assert_fail@plt+0x2dbc>
   136b8:	mov	r3, #0
   136bc:	b	134d8 <__assert_fail@plt+0x234c>
   136c0:	mov	r7, #0
   136c4:	cmp	fp, #2
   136c8:	beq	13fc0 <__assert_fail@plt+0x2e34>
   136cc:	cmp	fp, #5
   136d0:	beq	13f84 <__assert_fail@plt+0x2df8>
   136d4:	sub	r3, fp, #2
   136d8:	mov	r6, #0
   136dc:	clz	r3, r3
   136e0:	mov	r5, #63	; 0x3f
   136e4:	lsr	r3, r3, #5
   136e8:	b	134c8 <__assert_fail@plt+0x233c>
   136ec:	mov	r7, #0
   136f0:	cmp	fp, #2
   136f4:	movne	r3, #0
   136f8:	movne	r5, #39	; 0x27
   136fc:	strne	r6, [sp, #68]	; 0x44
   13700:	bne	134c8 <__assert_fail@plt+0x233c>
   13704:	ldr	r3, [sp, #44]	; 0x2c
   13708:	cmp	r3, #0
   1370c:	bne	143c8 <__assert_fail@plt+0x323c>
   13710:	ldr	r3, [sp, #72]	; 0x48
   13714:	cmp	sl, #0
   13718:	clz	r3, r3
   1371c:	lsr	r3, r3, #5
   13720:	moveq	r3, #0
   13724:	cmp	r3, #0
   13728:	bne	142f4 <__assert_fail@plt+0x3168>
   1372c:	cmp	sl, r4
   13730:	movhi	r3, #39	; 0x27
   13734:	strbhi	r3, [r8, r4]
   13738:	add	r3, r4, #1
   1373c:	cmp	sl, r3
   13740:	movhi	r2, #92	; 0x5c
   13744:	strbhi	r2, [r8, r3]
   13748:	add	r3, r4, #2
   1374c:	cmp	sl, r3
   13750:	bls	1375c <__assert_fail@plt+0x25d0>
   13754:	mov	r2, #39	; 0x27
   13758:	strb	r2, [r8, r3]
   1375c:	mov	r3, #0
   13760:	cmp	r7, #0
   13764:	add	r4, r4, #3
   13768:	mov	r5, #39	; 0x27
   1376c:	str	r3, [sp, #48]	; 0x30
   13770:	str	r6, [sp, #68]	; 0x44
   13774:	bne	13508 <__assert_fail@plt+0x237c>
   13778:	ldr	r2, [sp, #48]	; 0x30
   1377c:	eor	r3, r3, #1
   13780:	add	r9, r9, #1
   13784:	and	r3, r3, r2
   13788:	uxtb	r3, r3
   1378c:	cmp	r3, #0
   13790:	beq	13578 <__assert_fail@plt+0x23ec>
   13794:	cmp	sl, r4
   13798:	movhi	r3, #39	; 0x27
   1379c:	strbhi	r3, [r8, r4]
   137a0:	add	r3, r4, #1
   137a4:	add	r4, r4, #2
   137a8:	cmp	sl, r3
   137ac:	movhi	r2, #39	; 0x27
   137b0:	strbhi	r2, [r8, r3]
   137b4:	mov	r3, #0
   137b8:	str	r3, [sp, #48]	; 0x30
   137bc:	b	13578 <__assert_fail@plt+0x23ec>
   137c0:	mov	r3, #118	; 0x76
   137c4:	b	1369c <__assert_fail@plt+0x2510>
   137c8:	mov	r3, #116	; 0x74
   137cc:	ldr	r2, [sp, #44]	; 0x2c
   137d0:	cmp	fp, #2
   137d4:	movne	r2, #0
   137d8:	andeq	r2, r2, #1
   137dc:	cmp	r2, #0
   137e0:	beq	1369c <__assert_fail@plt+0x2510>
   137e4:	mov	fp, r8
   137e8:	mov	r8, #2
   137ec:	ldr	r3, [sp, #40]	; 0x28
   137f0:	cmp	r3, #0
   137f4:	movne	r8, #4
   137f8:	mov	lr, #0
   137fc:	mov	r0, fp
   13800:	ldr	r2, [sp, #32]
   13804:	ldr	r3, [sp, #156]	; 0x9c
   13808:	ldr	r1, [sp, #164]	; 0xa4
   1380c:	bic	ip, r3, #2
   13810:	ldr	r3, [sp, #28]
   13814:	stm	sp, {r8, ip, lr}
   13818:	ldr	ip, [sp, #168]	; 0xa8
   1381c:	str	r1, [sp, #12]
   13820:	mov	r1, sl
   13824:	str	ip, [sp, #16]
   13828:	bl	12f40 <__assert_fail@plt+0x1db4>
   1382c:	mov	r4, r0
   13830:	mov	r0, r4
   13834:	add	sp, sp, #116	; 0x74
   13838:	ldrd	r4, [sp]
   1383c:	ldrd	r6, [sp, #8]
   13840:	ldrd	r8, [sp, #16]
   13844:	ldrd	sl, [sp, #24]
   13848:	add	sp, sp, #32
   1384c:	pop	{pc}		; (ldr pc, [sp], #4)
   13850:	mov	r5, #102	; 0x66
   13854:	ldr	r2, [sp, #44]	; 0x2c
   13858:	sub	r3, fp, #2
   1385c:	clz	r3, r3
   13860:	lsr	r3, r3, #5
   13864:	cmp	r2, #0
   13868:	bne	142c4 <__assert_fail@plt+0x3138>
   1386c:	mov	r6, r2
   13870:	b	13564 <__assert_fail@plt+0x23d8>
   13874:	mov	r5, #110	; 0x6e
   13878:	mov	r6, #0
   1387c:	b	13508 <__assert_fail@plt+0x237c>
   13880:	mov	r5, #98	; 0x62
   13884:	b	13854 <__assert_fail@plt+0x26c8>
   13888:	mov	r5, #97	; 0x61
   1388c:	b	13854 <__assert_fail@plt+0x26c8>
   13890:	mov	r7, #0
   13894:	mov	r6, #0
   13898:	b	136b8 <__assert_fail@plt+0x252c>
   1389c:	mov	r5, #114	; 0x72
   138a0:	b	13878 <__assert_fail@plt+0x26ec>
   138a4:	ldr	r3, [sp, #44]	; 0x2c
   138a8:	cmp	r3, #0
   138ac:	bne	1463c <__assert_fail@plt+0x34b0>
   138b0:	mov	r7, r3
   138b4:	ldr	r3, [sp, #48]	; 0x30
   138b8:	sub	r2, fp, #2
   138bc:	clz	r2, r2
   138c0:	lsr	r2, r2, #5
   138c4:	eor	r3, r3, #1
   138c8:	ands	r3, r2, r3
   138cc:	beq	142e0 <__assert_fail@plt+0x3154>
   138d0:	cmp	sl, r4
   138d4:	movhi	r1, #39	; 0x27
   138d8:	strbhi	r1, [r8, r4]
   138dc:	add	r1, r4, #1
   138e0:	cmp	sl, r1
   138e4:	movhi	r0, #36	; 0x24
   138e8:	strbhi	r0, [r8, r1]
   138ec:	add	r1, r4, #2
   138f0:	cmp	sl, r1
   138f4:	movhi	r0, #39	; 0x27
   138f8:	strbhi	r0, [r8, r1]
   138fc:	add	r1, r4, #3
   13900:	cmp	sl, r1
   13904:	bls	14338 <__assert_fail@plt+0x31ac>
   13908:	mov	r4, r1
   1390c:	mov	r1, #92	; 0x5c
   13910:	mov	r0, r4
   13914:	str	r3, [sp, #48]	; 0x30
   13918:	strb	r1, [r8, r4]
   1391c:	cmp	fp, #2
   13920:	add	r4, r4, #1
   13924:	beq	14388 <__assert_fail@plt+0x31fc>
   13928:	ldr	r1, [sp, #28]
   1392c:	add	r3, r9, #1
   13930:	cmp	r3, r1
   13934:	bcs	1394c <__assert_fail@plt+0x27c0>
   13938:	ldr	r1, [sp, #32]
   1393c:	ldrb	r3, [r1, r3]
   13940:	sub	r3, r3, #48	; 0x30
   13944:	cmp	r3, #9
   13948:	bls	143a0 <__assert_fail@plt+0x3214>
   1394c:	mov	r5, #48	; 0x30
   13950:	ldr	r3, [sp, #40]	; 0x28
   13954:	eor	r3, r3, #1
   13958:	orrs	r2, r2, r3
   1395c:	mov	r3, r6
   13960:	moveq	r6, r2
   13964:	beq	134d8 <__assert_fail@plt+0x234c>
   13968:	mov	r6, #0
   1396c:	b	13500 <__assert_fail@plt+0x2374>
   13970:	cmp	r9, #0
   13974:	mov	r2, r7
   13978:	bne	13f18 <__assert_fail@plt+0x2d8c>
   1397c:	mov	r6, r7
   13980:	mov	r3, r9
   13984:	mov	r7, r2
   13988:	b	134c8 <__assert_fail@plt+0x233c>
   1398c:	mov	r2, r7
   13990:	mov	r6, r7
   13994:	mov	r3, #0
   13998:	mov	r7, r2
   1399c:	mov	r5, #32
   139a0:	b	134c8 <__assert_fail@plt+0x233c>
   139a4:	mov	r6, r7
   139a8:	b	136b8 <__assert_fail@plt+0x252c>
   139ac:	mov	r7, #0
   139b0:	ldr	r3, [sp, #64]	; 0x40
   139b4:	cmp	r3, #1
   139b8:	bne	13fd8 <__assert_fail@plt+0x2e4c>
   139bc:	bl	11054 <__ctype_b_loc@plt>
   139c0:	ldr	r2, [r0]
   139c4:	sxth	r3, r5
   139c8:	lsl	r3, r3, #1
   139cc:	ldr	r1, [sp, #64]	; 0x40
   139d0:	ldrh	r3, [r2, r3]
   139d4:	mov	ip, r1
   139d8:	and	r3, r3, #16384	; 0x4000
   139dc:	cmp	r3, #0
   139e0:	ldr	r3, [sp, #40]	; 0x28
   139e4:	movne	r6, #1
   139e8:	moveq	r6, #0
   139ec:	movne	r2, #0
   139f0:	andeq	r2, r3, #1
   139f4:	cmp	r2, #0
   139f8:	bne	14320 <__assert_fail@plt+0x3194>
   139fc:	sub	r3, fp, #2
   13a00:	clz	r3, r3
   13a04:	lsr	r3, r3, #5
   13a08:	b	134c8 <__assert_fail@plt+0x233c>
   13a0c:	cmp	r4, #0
   13a10:	bne	146b0 <__assert_fail@plt+0x3524>
   13a14:	str	r4, [sp, #40]	; 0x28
   13a18:	cmp	sl, #0
   13a1c:	bne	146e0 <__assert_fail@plt+0x3554>
   13a20:	mov	r3, #1
   13a24:	movw	r2, #28348	; 0x6ebc
   13a28:	movt	r2, #1
   13a2c:	mov	r4, r3
   13a30:	mov	r8, #2
   13a34:	str	r3, [sp, #36]	; 0x24
   13a38:	str	sl, [sp, #44]	; 0x2c
   13a3c:	str	sl, [sp, #48]	; 0x30
   13a40:	str	r3, [sp, #56]	; 0x38
   13a44:	str	r2, [sp, #60]	; 0x3c
   13a48:	str	sl, [sp, #68]	; 0x44
   13a4c:	str	sl, [sp, #72]	; 0x48
   13a50:	b	13028 <__assert_fail@plt+0x1e9c>
   13a54:	ldr	r3, [sp, #32]
   13a58:	ldrb	r5, [r3, r9]
   13a5c:	cmp	r5, #126	; 0x7e
   13a60:	ldrls	pc, [pc, r5, lsl #2]
   13a64:	b	139b0 <__assert_fail@plt+0x2824>
   13a68:	andeq	r3, r1, ip, lsl #25
   13a6c:			; <UNDEFINED> instruction: 0x000139b0
   13a70:			; <UNDEFINED> instruction: 0x000139b0
   13a74:			; <UNDEFINED> instruction: 0x000139b0
   13a78:			; <UNDEFINED> instruction: 0x000139b0
   13a7c:			; <UNDEFINED> instruction: 0x000139b0
   13a80:			; <UNDEFINED> instruction: 0x000139b0
   13a84:	andeq	r3, r1, r4, lsl #25
   13a88:	andeq	r3, r1, ip, ror ip
   13a8c:	andeq	r3, r1, r8, asr #15
   13a90:	andeq	r3, r1, r4, ror ip
   13a94:	andeq	r3, r1, r0, asr #15
   13a98:	andeq	r3, r1, ip, ror #24
   13a9c:	andeq	r3, r1, r4, ror #24
   13aa0:			; <UNDEFINED> instruction: 0x000139b0
   13aa4:			; <UNDEFINED> instruction: 0x000139b0
   13aa8:			; <UNDEFINED> instruction: 0x000139b0
   13aac:			; <UNDEFINED> instruction: 0x000139b0
   13ab0:			; <UNDEFINED> instruction: 0x000139b0
   13ab4:			; <UNDEFINED> instruction: 0x000139b0
   13ab8:			; <UNDEFINED> instruction: 0x000139b0
   13abc:			; <UNDEFINED> instruction: 0x000139b0
   13ac0:			; <UNDEFINED> instruction: 0x000139b0
   13ac4:			; <UNDEFINED> instruction: 0x000139b0
   13ac8:			; <UNDEFINED> instruction: 0x000139b0
   13acc:			; <UNDEFINED> instruction: 0x000139b0
   13ad0:			; <UNDEFINED> instruction: 0x000139b0
   13ad4:			; <UNDEFINED> instruction: 0x000139b0
   13ad8:			; <UNDEFINED> instruction: 0x000139b0
   13adc:			; <UNDEFINED> instruction: 0x000139b0
   13ae0:			; <UNDEFINED> instruction: 0x000139b0
   13ae4:			; <UNDEFINED> instruction: 0x000139b0
   13ae8:	andeq	r3, r1, r0, ror #25
   13aec:	andeq	r3, r1, r0, asr #25
   13af0:	andeq	r3, r1, r0, asr #25
   13af4:			; <UNDEFINED> instruction: 0x00013cb0
   13af8:	andeq	r3, r1, r0, asr #25
   13afc:	strdeq	r3, [r1], -ip
   13b00:	andeq	r3, r1, r0, asr #25
   13b04:	strdeq	r3, [r1], -r0
   13b08:	andeq	r3, r1, r0, asr #25
   13b0c:	andeq	r3, r1, r0, asr #25
   13b10:	andeq	r3, r1, r0, asr #25
   13b14:	strdeq	r3, [r1], -ip
   13b18:	strdeq	r3, [r1], -ip
   13b1c:	strdeq	r3, [r1], -ip
   13b20:	strdeq	r3, [r1], -ip
   13b24:	strdeq	r3, [r1], -ip
   13b28:	strdeq	r3, [r1], -ip
   13b2c:	strdeq	r3, [r1], -ip
   13b30:	strdeq	r3, [r1], -ip
   13b34:	strdeq	r3, [r1], -ip
   13b38:	strdeq	r3, [r1], -ip
   13b3c:	strdeq	r3, [r1], -ip
   13b40:	strdeq	r3, [r1], -ip
   13b44:	strdeq	r3, [r1], -ip
   13b48:	strdeq	r3, [r1], -ip
   13b4c:	strdeq	r3, [r1], -ip
   13b50:	strdeq	r3, [r1], -ip
   13b54:	andeq	r3, r1, r0, asr #25
   13b58:	andeq	r3, r1, r0, asr #25
   13b5c:	andeq	r3, r1, r0, asr #25
   13b60:	andeq	r3, r1, r0, asr #25
   13b64:	andeq	r3, r1, r4, asr #13
   13b68:			; <UNDEFINED> instruction: 0x000139b0
   13b6c:	strdeq	r3, [r1], -ip
   13b70:	strdeq	r3, [r1], -ip
   13b74:	strdeq	r3, [r1], -ip
   13b78:	strdeq	r3, [r1], -ip
   13b7c:	strdeq	r3, [r1], -ip
   13b80:	strdeq	r3, [r1], -ip
   13b84:	strdeq	r3, [r1], -ip
   13b88:	strdeq	r3, [r1], -ip
   13b8c:	strdeq	r3, [r1], -ip
   13b90:	strdeq	r3, [r1], -ip
   13b94:	strdeq	r3, [r1], -ip
   13b98:	strdeq	r3, [r1], -ip
   13b9c:	strdeq	r3, [r1], -ip
   13ba0:	strdeq	r3, [r1], -ip
   13ba4:	strdeq	r3, [r1], -ip
   13ba8:	strdeq	r3, [r1], -ip
   13bac:	strdeq	r3, [r1], -ip
   13bb0:	strdeq	r3, [r1], -ip
   13bb4:	strdeq	r3, [r1], -ip
   13bb8:	strdeq	r3, [r1], -ip
   13bbc:	strdeq	r3, [r1], -ip
   13bc0:	strdeq	r3, [r1], -ip
   13bc4:	strdeq	r3, [r1], -ip
   13bc8:	strdeq	r3, [r1], -ip
   13bcc:	strdeq	r3, [r1], -ip
   13bd0:	strdeq	r3, [r1], -ip
   13bd4:	andeq	r3, r1, r0, asr #25
   13bd8:	andeq	r3, r1, ip, ror #12
   13bdc:	strdeq	r3, [r1], -ip
   13be0:	andeq	r3, r1, r0, asr #25
   13be4:	strdeq	r3, [r1], -ip
   13be8:	andeq	r3, r1, r0, asr #25
   13bec:	strdeq	r3, [r1], -ip
   13bf0:	strdeq	r3, [r1], -ip
   13bf4:	strdeq	r3, [r1], -ip
   13bf8:	strdeq	r3, [r1], -ip
   13bfc:	strdeq	r3, [r1], -ip
   13c00:	strdeq	r3, [r1], -ip
   13c04:	strdeq	r3, [r1], -ip
   13c08:	strdeq	r3, [r1], -ip
   13c0c:	strdeq	r3, [r1], -ip
   13c10:	strdeq	r3, [r1], -ip
   13c14:	strdeq	r3, [r1], -ip
   13c18:	strdeq	r3, [r1], -ip
   13c1c:	strdeq	r3, [r1], -ip
   13c20:	strdeq	r3, [r1], -ip
   13c24:	strdeq	r3, [r1], -ip
   13c28:	strdeq	r3, [r1], -ip
   13c2c:	strdeq	r3, [r1], -ip
   13c30:	strdeq	r3, [r1], -ip
   13c34:	strdeq	r3, [r1], -ip
   13c38:	strdeq	r3, [r1], -ip
   13c3c:	strdeq	r3, [r1], -ip
   13c40:	strdeq	r3, [r1], -ip
   13c44:	strdeq	r3, [r1], -ip
   13c48:	strdeq	r3, [r1], -ip
   13c4c:	strdeq	r3, [r1], -ip
   13c50:	strdeq	r3, [r1], -ip
   13c54:	muleq	r1, r0, r4
   13c58:	andeq	r3, r1, r0, asr #25
   13c5c:	muleq	r1, r0, r4
   13c60:			; <UNDEFINED> instruction: 0x00013cb0
   13c64:	mov	r3, #114	; 0x72
   13c68:	b	137cc <__assert_fail@plt+0x2640>
   13c6c:	mov	r3, #102	; 0x66
   13c70:	b	1369c <__assert_fail@plt+0x2510>
   13c74:	mov	r3, #110	; 0x6e
   13c78:	b	137cc <__assert_fail@plt+0x2640>
   13c7c:	mov	r3, #98	; 0x62
   13c80:	b	1369c <__assert_fail@plt+0x2510>
   13c84:	mov	r3, #97	; 0x61
   13c88:	b	1369c <__assert_fail@plt+0x2510>
   13c8c:	ldr	r3, [sp, #40]	; 0x28
   13c90:	cmp	r3, #0
   13c94:	bne	138a4 <__assert_fail@plt+0x2718>
   13c98:	ldr	r3, [sp, #156]	; 0x9c
   13c9c:	tst	r3, #1
   13ca0:	addne	r9, r9, #1
   13ca4:	bne	13038 <__assert_fail@plt+0x1eac>
   13ca8:	ldr	r7, [sp, #40]	; 0x28
   13cac:	b	136a8 <__assert_fail@plt+0x251c>
   13cb0:	sub	r3, fp, #2
   13cb4:	clz	r3, r3
   13cb8:	lsr	r3, r3, #5
   13cbc:	b	134bc <__assert_fail@plt+0x2330>
   13cc0:	sub	r3, fp, #2
   13cc4:	mov	r6, #0
   13cc8:	clz	r3, r3
   13ccc:	lsr	r3, r3, #5
   13cd0:	ldr	r2, [sp, #44]	; 0x2c
   13cd4:	tst	r2, r3
   13cd8:	beq	134c8 <__assert_fail@plt+0x233c>
   13cdc:	b	137e4 <__assert_fail@plt+0x2658>
   13ce0:	sub	r3, fp, #2
   13ce4:	clz	r3, r3
   13ce8:	lsr	r3, r3, #5
   13cec:	b	13cd0 <__assert_fail@plt+0x2b44>
   13cf0:	ldr	r3, [sp, #52]	; 0x34
   13cf4:	ldrb	r5, [r3]
   13cf8:	cmp	r5, #126	; 0x7e
   13cfc:	ldrls	pc, [pc, r5, lsl #2]
   13d00:	b	139ac <__assert_fail@plt+0x2820>
   13d04:	andeq	r3, r1, r4, lsr #17
   13d08:	andeq	r3, r1, ip, lsr #19
   13d0c:	andeq	r3, r1, ip, lsr #19
   13d10:	andeq	r3, r1, ip, lsr #19
   13d14:	andeq	r3, r1, ip, lsr #19
   13d18:	andeq	r3, r1, ip, lsr #19
   13d1c:	andeq	r3, r1, ip, lsr #19
   13d20:	andeq	r3, r1, r8, lsl #17
   13d24:	andeq	r3, r1, r0, lsl #17
   13d28:	andeq	r3, r1, ip, lsr pc
   13d2c:	andeq	r3, r1, r4, ror r8
   13d30:	andeq	r3, r1, r0, lsr pc
   13d34:	andeq	r3, r1, r0, asr r8
   13d38:	muleq	r1, ip, r8
   13d3c:	andeq	r3, r1, ip, lsr #19
   13d40:	andeq	r3, r1, ip, lsr #19
   13d44:	andeq	r3, r1, ip, lsr #19
   13d48:	andeq	r3, r1, ip, lsr #19
   13d4c:	andeq	r3, r1, ip, lsr #19
   13d50:	andeq	r3, r1, ip, lsr #19
   13d54:	andeq	r3, r1, ip, lsr #19
   13d58:	andeq	r3, r1, ip, lsr #19
   13d5c:	andeq	r3, r1, ip, lsr #19
   13d60:	andeq	r3, r1, ip, lsr #19
   13d64:	andeq	r3, r1, ip, lsr #19
   13d68:	andeq	r3, r1, ip, lsr #19
   13d6c:	andeq	r3, r1, ip, lsr #19
   13d70:	andeq	r3, r1, ip, lsr #19
   13d74:	andeq	r3, r1, ip, lsr #19
   13d78:	andeq	r3, r1, ip, lsr #19
   13d7c:	andeq	r3, r1, ip, lsr #19
   13d80:	andeq	r3, r1, ip, lsr #19
   13d84:	andeq	r3, r1, r8, lsr #30
   13d88:	muleq	r1, r0, r8
   13d8c:	muleq	r1, r0, r8
   13d90:	andeq	r3, r1, ip, lsl #30
   13d94:	muleq	r1, r0, r8
   13d98:	andeq	r3, r1, r0, lsl #30
   13d9c:	muleq	r1, r0, r8
   13da0:	andeq	r3, r1, ip, ror #13
   13da4:	muleq	r1, r0, r8
   13da8:	muleq	r1, r0, r8
   13dac:	muleq	r1, r0, r8
   13db0:	andeq	r3, r1, r0, lsl #30
   13db4:	andeq	r3, r1, r0, lsl #30
   13db8:	andeq	r3, r1, r0, lsl #30
   13dbc:	andeq	r3, r1, r0, lsl #30
   13dc0:	andeq	r3, r1, r0, lsl #30
   13dc4:	andeq	r3, r1, r0, lsl #30
   13dc8:	andeq	r3, r1, r0, lsl #30
   13dcc:	andeq	r3, r1, r0, lsl #30
   13dd0:	andeq	r3, r1, r0, lsl #30
   13dd4:	andeq	r3, r1, r0, lsl #30
   13dd8:	andeq	r3, r1, r0, lsl #30
   13ddc:	andeq	r3, r1, r0, lsl #30
   13de0:	andeq	r3, r1, r0, lsl #30
   13de4:	andeq	r3, r1, r0, lsl #30
   13de8:	andeq	r3, r1, r0, lsl #30
   13dec:	andeq	r3, r1, r0, lsl #30
   13df0:	muleq	r1, r0, r8
   13df4:	muleq	r1, r0, r8
   13df8:	muleq	r1, r0, r8
   13dfc:	muleq	r1, r0, r8
   13e00:	andeq	r3, r1, r0, asr #13
   13e04:	andeq	r3, r1, ip, lsr #19
   13e08:	andeq	r3, r1, r0, lsl #30
   13e0c:	andeq	r3, r1, r0, lsl #30
   13e10:	andeq	r3, r1, r0, lsl #30
   13e14:	andeq	r3, r1, r0, lsl #30
   13e18:	andeq	r3, r1, r0, lsl #30
   13e1c:	andeq	r3, r1, r0, lsl #30
   13e20:	andeq	r3, r1, r0, lsl #30
   13e24:	andeq	r3, r1, r0, lsl #30
   13e28:	andeq	r3, r1, r0, lsl #30
   13e2c:	andeq	r3, r1, r0, lsl #30
   13e30:	andeq	r3, r1, r0, lsl #30
   13e34:	andeq	r3, r1, r0, lsl #30
   13e38:	andeq	r3, r1, r0, lsl #30
   13e3c:	andeq	r3, r1, r0, lsl #30
   13e40:	andeq	r3, r1, r0, lsl #30
   13e44:	andeq	r3, r1, r0, lsl #30
   13e48:	andeq	r3, r1, r0, lsl #30
   13e4c:	andeq	r3, r1, r0, lsl #30
   13e50:	andeq	r3, r1, r0, lsl #30
   13e54:	andeq	r3, r1, r0, lsl #30
   13e58:	andeq	r3, r1, r0, lsl #30
   13e5c:	andeq	r3, r1, r0, lsl #30
   13e60:	andeq	r3, r1, r0, lsl #30
   13e64:	andeq	r3, r1, r0, lsl #30
   13e68:	andeq	r3, r1, r0, lsl #30
   13e6c:	andeq	r3, r1, r0, lsl #30
   13e70:	muleq	r1, r0, r8
   13e74:	andeq	r3, r1, r8, ror #12
   13e78:	andeq	r3, r1, r0, lsl #30
   13e7c:	muleq	r1, r0, r8
   13e80:	andeq	r3, r1, r0, lsl #30
   13e84:	muleq	r1, r0, r8
   13e88:	andeq	r3, r1, r0, lsl #30
   13e8c:	andeq	r3, r1, r0, lsl #30
   13e90:	andeq	r3, r1, r0, lsl #30
   13e94:	andeq	r3, r1, r0, lsl #30
   13e98:	andeq	r3, r1, r0, lsl #30
   13e9c:	andeq	r3, r1, r0, lsl #30
   13ea0:	andeq	r3, r1, r0, lsl #30
   13ea4:	andeq	r3, r1, r0, lsl #30
   13ea8:	andeq	r3, r1, r0, lsl #30
   13eac:	andeq	r3, r1, r0, lsl #30
   13eb0:	andeq	r3, r1, r0, lsl #30
   13eb4:	andeq	r3, r1, r0, lsl #30
   13eb8:	andeq	r3, r1, r0, lsl #30
   13ebc:	andeq	r3, r1, r0, lsl #30
   13ec0:	andeq	r3, r1, r0, lsl #30
   13ec4:	andeq	r3, r1, r0, lsl #30
   13ec8:	andeq	r3, r1, r0, lsl #30
   13ecc:	andeq	r3, r1, r0, lsl #30
   13ed0:	andeq	r3, r1, r0, lsl #30
   13ed4:	andeq	r3, r1, r0, lsl #30
   13ed8:	andeq	r3, r1, r0, lsl #30
   13edc:	andeq	r3, r1, r0, lsl #30
   13ee0:	andeq	r3, r1, r0, lsl #30
   13ee4:	andeq	r3, r1, r0, lsl #30
   13ee8:	andeq	r3, r1, r0, lsl #30
   13eec:	andeq	r3, r1, r0, lsl #30
   13ef0:	andeq	r3, r1, ip, lsl #9
   13ef4:	muleq	r1, r0, r8
   13ef8:	andeq	r3, r1, ip, lsl #9
   13efc:	andeq	r3, r1, ip, lsl #30
   13f00:	mov	r6, r7
   13f04:	mov	r7, #0
   13f08:	b	136b8 <__assert_fail@plt+0x252c>
   13f0c:	cmp	r9, #0
   13f10:	mov	r2, #0
   13f14:	beq	1397c <__assert_fail@plt+0x27f0>
   13f18:	mov	r6, #0
   13f1c:	mov	r7, r2
   13f20:	mov	r3, r6
   13f24:	b	134d8 <__assert_fail@plt+0x234c>
   13f28:	mov	r2, #0
   13f2c:	b	13990 <__assert_fail@plt+0x2804>
   13f30:	mov	r7, #0
   13f34:	mov	r3, #118	; 0x76
   13f38:	b	1369c <__assert_fail@plt+0x2510>
   13f3c:	mov	r7, #0
   13f40:	mov	r3, #116	; 0x74
   13f44:	b	137cc <__assert_fail@plt+0x2640>
   13f48:	ldr	r3, [sp, #44]	; 0x2c
   13f4c:	b	13500 <__assert_fail@plt+0x2374>
   13f50:	ldr	r3, [sp, #44]	; 0x2c
   13f54:	cmp	r3, #0
   13f58:	bne	143c8 <__assert_fail@plt+0x323c>
   13f5c:	add	r9, r9, #1
   13f60:	mov	r6, #0
   13f64:	ldr	r3, [sp, #48]	; 0x30
   13f68:	mov	r5, #92	; 0x5c
   13f6c:	b	1378c <__assert_fail@plt+0x2600>
   13f70:	ldr	r3, [sp, #32]
   13f74:	ldrb	r2, [r3, #1]
   13f78:	adds	r2, r2, #0
   13f7c:	movne	r2, #1
   13f80:	b	134a8 <__assert_fail@plt+0x231c>
   13f84:	ldr	r3, [sp, #156]	; 0x9c
   13f88:	ands	r3, r3, #4
   13f8c:	beq	13fb4 <__assert_fail@plt+0x2e28>
   13f90:	ldr	r2, [sp, #28]
   13f94:	add	r3, r9, #2
   13f98:	cmp	r3, r2
   13f9c:	bcs	13fb0 <__assert_fail@plt+0x2e24>
   13fa0:	ldr	r2, [sp, #52]	; 0x34
   13fa4:	ldrb	r5, [r2, #1]
   13fa8:	cmp	r5, #63	; 0x3f
   13fac:	beq	1442c <__assert_fail@plt+0x32a0>
   13fb0:	mov	r3, #0
   13fb4:	mov	r5, #63	; 0x3f
   13fb8:	mov	r6, r3
   13fbc:	b	134c8 <__assert_fail@plt+0x233c>
   13fc0:	ldr	r3, [sp, #44]	; 0x2c
   13fc4:	cmp	r3, #0
   13fc8:	bne	143c8 <__assert_fail@plt+0x323c>
   13fcc:	mov	r6, r3
   13fd0:	mov	r5, #63	; 0x3f
   13fd4:	b	13500 <__assert_fail@plt+0x2374>
   13fd8:	ldr	r1, [sp, #28]
   13fdc:	mov	r2, #0
   13fe0:	mov	r3, #0
   13fe4:	strd	r2, [sp, #104]	; 0x68
   13fe8:	cmn	r1, #1
   13fec:	bne	13ffc <__assert_fail@plt+0x2e70>
   13ff0:	ldr	r0, [sp, #32]
   13ff4:	bl	11078 <strlen@plt>
   13ff8:	str	r0, [sp, #28]
   13ffc:	str	r8, [sp, #76]	; 0x4c
   14000:	mov	r3, #0
   14004:	str	sl, [sp, #80]	; 0x50
   14008:	ldr	sl, [sp, #32]
   1400c:	str	r5, [sp, #84]	; 0x54
   14010:	mov	r5, r3
   14014:	ldr	r8, [sp, #44]	; 0x2c
   14018:	str	r7, [sp, #88]	; 0x58
   1401c:	str	r4, [sp, #92]	; 0x5c
   14020:	ldr	r2, [sp, #28]
   14024:	add	r4, r9, r5
   14028:	add	r3, sp, #104	; 0x68
   1402c:	add	r7, sl, r4
   14030:	add	r0, sp, #100	; 0x64
   14034:	mov	r1, r7
   14038:	sub	r2, r2, r4
   1403c:	bl	1605c <__assert_fail@plt+0x4ed0>
   14040:	subs	r1, r0, #0
   14044:	beq	14090 <__assert_fail@plt+0x2f04>
   14048:	cmn	r1, #1
   1404c:	beq	14408 <__assert_fail@plt+0x327c>
   14050:	cmn	r1, #2
   14054:	beq	14528 <__assert_fail@plt+0x339c>
   14058:	cmp	fp, #2
   1405c:	movne	r3, #0
   14060:	andeq	r3, r8, #1
   14064:	cmp	r3, #0
   14068:	bne	141f4 <__assert_fail@plt+0x3068>
   1406c:	ldr	r0, [sp, #100]	; 0x64
   14070:	add	r5, r5, r1
   14074:	bl	10f88 <iswprint@plt>
   14078:	cmp	r0, #0
   1407c:	add	r0, sp, #104	; 0x68
   14080:	moveq	r6, #0
   14084:	bl	10f10 <mbsinit@plt>
   14088:	cmp	r0, #0
   1408c:	beq	14020 <__assert_fail@plt+0x2e94>
   14090:	ldr	r3, [sp, #40]	; 0x28
   14094:	mov	ip, r5
   14098:	eor	r2, r6, #1
   1409c:	ldr	r8, [sp, #76]	; 0x4c
   140a0:	ldr	sl, [sp, #80]	; 0x50
   140a4:	and	r2, r2, r3
   140a8:	ldr	r5, [sp, #84]	; 0x54
   140ac:	ldr	r7, [sp, #88]	; 0x58
   140b0:	ldr	r4, [sp, #92]	; 0x5c
   140b4:	cmp	ip, #1
   140b8:	bls	139f4 <__assert_fail@plt+0x2868>
   140bc:	add	r1, ip, r9
   140c0:	mov	r0, #39	; 0x27
   140c4:	ldr	lr, [sp, #52]	; 0x34
   140c8:	mov	ip, #0
   140cc:	str	r6, [sp, #52]	; 0x34
   140d0:	ldr	r6, [sp, #48]	; 0x30
   140d4:	b	14190 <__assert_fail@plt+0x3004>
   140d8:	ldr	ip, [sp, #44]	; 0x2c
   140dc:	sub	r3, fp, #2
   140e0:	clz	r3, r3
   140e4:	lsr	r3, r3, #5
   140e8:	cmp	ip, #0
   140ec:	bne	14300 <__assert_fail@plt+0x3174>
   140f0:	eor	ip, r6, #1
   140f4:	ands	r3, r3, ip
   140f8:	beq	14128 <__assert_fail@plt+0x2f9c>
   140fc:	cmp	sl, r4
   14100:	add	ip, r4, #1
   14104:	strbhi	r0, [r8, r4]
   14108:	cmp	sl, ip
   1410c:	movhi	r6, #36	; 0x24
   14110:	strbhi	r6, [r8, ip]
   14114:	add	ip, r4, #2
   14118:	mov	r6, r3
   1411c:	cmp	sl, ip
   14120:	add	r4, r4, #3
   14124:	strbhi	r0, [r8, ip]
   14128:	cmp	sl, r4
   1412c:	movhi	r3, #92	; 0x5c
   14130:	strbhi	r3, [r8, r4]
   14134:	add	r3, r4, #1
   14138:	cmp	sl, r3
   1413c:	bls	1414c <__assert_fail@plt+0x2fc0>
   14140:	lsr	ip, r5, #6
   14144:	add	ip, ip, #48	; 0x30
   14148:	strb	ip, [r8, r3]
   1414c:	add	r3, r4, #2
   14150:	cmp	sl, r3
   14154:	bls	14164 <__assert_fail@plt+0x2fd8>
   14158:	ubfx	ip, r5, #3, #3
   1415c:	add	ip, ip, #48	; 0x30
   14160:	strb	ip, [r8, r3]
   14164:	add	r9, r9, #1
   14168:	and	r5, r5, #7
   1416c:	cmp	r9, r1
   14170:	add	r5, r5, #48	; 0x30
   14174:	add	r4, r4, #3
   14178:	bcs	1432c <__assert_fail@plt+0x31a0>
   1417c:	mov	ip, r2
   14180:	cmp	sl, r4
   14184:	strbhi	r5, [r8, r4]
   14188:	add	r4, r4, #1
   1418c:	ldrb	r5, [lr, #1]!
   14190:	cmp	r2, #0
   14194:	bne	140d8 <__assert_fail@plt+0x2f4c>
   14198:	eor	r3, ip, #1
   1419c:	cmp	r7, #0
   141a0:	and	r3, r3, r6
   141a4:	uxtb	r3, r3
   141a8:	beq	141bc <__assert_fail@plt+0x3030>
   141ac:	cmp	sl, r4
   141b0:	movhi	r7, #92	; 0x5c
   141b4:	strbhi	r7, [r8, r4]
   141b8:	add	r4, r4, #1
   141bc:	add	r9, r9, #1
   141c0:	cmp	r9, r1
   141c4:	bcs	14314 <__assert_fail@plt+0x3188>
   141c8:	cmp	r3, #0
   141cc:	beq	1434c <__assert_fail@plt+0x31c0>
   141d0:	cmp	sl, r4
   141d4:	add	r3, r4, #1
   141d8:	mov	r7, #0
   141dc:	strbhi	r0, [r8, r4]
   141e0:	cmp	sl, r3
   141e4:	add	r4, r4, #2
   141e8:	mov	r6, r7
   141ec:	strbhi	r0, [r8, r3]
   141f0:	b	14180 <__assert_fail@plt+0x2ff4>
   141f4:	cmp	r1, #1
   141f8:	beq	1406c <__assert_fail@plt+0x2ee0>
   141fc:	add	r2, r4, #1
   14200:	add	r3, sl, r1
   14204:	add	r2, sl, r2
   14208:	add	r4, r3, r4
   1420c:	ldrb	r3, [r2], #1
   14210:	sub	r3, r3, #91	; 0x5b
   14214:	cmp	r3, #33	; 0x21
   14218:	ldrls	pc, [pc, r3, lsl #2]
   1421c:	b	142a8 <__assert_fail@plt+0x311c>
   14220:			; <UNDEFINED> instruction: 0x000142b4
   14224:			; <UNDEFINED> instruction: 0x000142b4
   14228:	andeq	r4, r1, r8, lsr #5
   1422c:			; <UNDEFINED> instruction: 0x000142b4
   14230:	andeq	r4, r1, r8, lsr #5
   14234:			; <UNDEFINED> instruction: 0x000142b4
   14238:	andeq	r4, r1, r8, lsr #5
   1423c:	andeq	r4, r1, r8, lsr #5
   14240:	andeq	r4, r1, r8, lsr #5
   14244:	andeq	r4, r1, r8, lsr #5
   14248:	andeq	r4, r1, r8, lsr #5
   1424c:	andeq	r4, r1, r8, lsr #5
   14250:	andeq	r4, r1, r8, lsr #5
   14254:	andeq	r4, r1, r8, lsr #5
   14258:	andeq	r4, r1, r8, lsr #5
   1425c:	andeq	r4, r1, r8, lsr #5
   14260:	andeq	r4, r1, r8, lsr #5
   14264:	andeq	r4, r1, r8, lsr #5
   14268:	andeq	r4, r1, r8, lsr #5
   1426c:	andeq	r4, r1, r8, lsr #5
   14270:	andeq	r4, r1, r8, lsr #5
   14274:	andeq	r4, r1, r8, lsr #5
   14278:	andeq	r4, r1, r8, lsr #5
   1427c:	andeq	r4, r1, r8, lsr #5
   14280:	andeq	r4, r1, r8, lsr #5
   14284:	andeq	r4, r1, r8, lsr #5
   14288:	andeq	r4, r1, r8, lsr #5
   1428c:	andeq	r4, r1, r8, lsr #5
   14290:	andeq	r4, r1, r8, lsr #5
   14294:	andeq	r4, r1, r8, lsr #5
   14298:	andeq	r4, r1, r8, lsr #5
   1429c:	andeq	r4, r1, r8, lsr #5
   142a0:	andeq	r4, r1, r8, lsr #5
   142a4:			; <UNDEFINED> instruction: 0x000142b4
   142a8:	cmp	r4, r2
   142ac:	bne	1420c <__assert_fail@plt+0x3080>
   142b0:	b	1406c <__assert_fail@plt+0x2ee0>
   142b4:	mov	r8, #2
   142b8:	ldr	fp, [sp, #76]	; 0x4c
   142bc:	ldr	sl, [sp, #80]	; 0x50
   142c0:	b	137ec <__assert_fail@plt+0x2660>
   142c4:	ldr	r2, [sp, #40]	; 0x28
   142c8:	str	fp, [sp, #152]	; 0x98
   142cc:	mov	fp, r8
   142d0:	ldr	r8, [sp, #152]	; 0x98
   142d4:	and	r2, r2, r3
   142d8:	str	r2, [sp, #40]	; 0x28
   142dc:	b	137ec <__assert_fail@plt+0x2660>
   142e0:	cmp	sl, r4
   142e4:	movls	r0, r4
   142e8:	bls	1391c <__assert_fail@plt+0x2790>
   142ec:	ldr	r3, [sp, #48]	; 0x30
   142f0:	b	1390c <__assert_fail@plt+0x2780>
   142f4:	str	sl, [sp, #72]	; 0x48
   142f8:	ldr	sl, [sp, #44]	; 0x2c
   142fc:	b	1375c <__assert_fail@plt+0x25d0>
   14300:	str	r3, [sp, #40]	; 0x28
   14304:	str	fp, [sp, #152]	; 0x98
   14308:	mov	fp, r8
   1430c:	ldr	r8, [sp, #152]	; 0x98
   14310:	b	137ec <__assert_fail@plt+0x2660>
   14314:	str	r6, [sp, #48]	; 0x30
   14318:	ldr	r6, [sp, #52]	; 0x34
   1431c:	b	1378c <__assert_fail@plt+0x2600>
   14320:	mov	r6, #0
   14324:	ldr	r2, [sp, #40]	; 0x28
   14328:	b	140bc <__assert_fail@plt+0x2f30>
   1432c:	str	r6, [sp, #48]	; 0x30
   14330:	ldr	r6, [sp, #52]	; 0x34
   14334:	b	13578 <__assert_fail@plt+0x23ec>
   14338:	add	r4, r4, #4
   1433c:	mov	r6, #0
   14340:	str	r3, [sp, #48]	; 0x30
   14344:	mov	r5, #48	; 0x30
   14348:	b	13500 <__assert_fail@plt+0x2374>
   1434c:	mov	r7, r3
   14350:	b	14180 <__assert_fail@plt+0x2ff4>
   14354:	mov	r3, #1
   14358:	movw	r2, #28328	; 0x6ea8
   1435c:	movt	r2, #1
   14360:	mov	r4, r3
   14364:	str	r3, [sp, #36]	; 0x24
   14368:	str	r3, [sp, #40]	; 0x28
   1436c:	str	sl, [sp, #44]	; 0x2c
   14370:	str	sl, [sp, #48]	; 0x30
   14374:	str	r3, [sp, #56]	; 0x38
   14378:	str	r2, [sp, #60]	; 0x3c
   1437c:	str	sl, [sp, #68]	; 0x44
   14380:	str	sl, [sp, #72]	; 0x48
   14384:	b	13028 <__assert_fail@plt+0x1e9c>
   14388:	mov	r3, r6
   1438c:	mov	r5, #48	; 0x30
   14390:	mov	r6, #0
   14394:	b	13500 <__assert_fail@plt+0x2374>
   14398:	mov	r5, r3
   1439c:	b	13878 <__assert_fail@plt+0x26ec>
   143a0:	cmp	sl, r4
   143a4:	mov	r5, #48	; 0x30
   143a8:	movhi	r3, #48	; 0x30
   143ac:	strbhi	r3, [r8, r4]
   143b0:	add	r3, r0, #2
   143b4:	add	r4, r0, #3
   143b8:	cmp	sl, r3
   143bc:	movhi	r1, #48	; 0x30
   143c0:	strbhi	r1, [r8, r3]
   143c4:	b	13950 <__assert_fail@plt+0x27c4>
   143c8:	str	fp, [sp, #152]	; 0x98
   143cc:	mov	fp, r8
   143d0:	ldr	r8, [sp, #152]	; 0x98
   143d4:	b	137ec <__assert_fail@plt+0x2660>
   143d8:	ldr	r3, [sp, #164]	; 0xa4
   143dc:	ldrb	r3, [r3]
   143e0:	cmp	r3, #0
   143e4:	beq	12ff8 <__assert_fail@plt+0x1e6c>
   143e8:	ldr	r2, [sp, #164]	; 0xa4
   143ec:	cmp	sl, r4
   143f0:	strbhi	r3, [fp, r4]
   143f4:	add	r4, r4, #1
   143f8:	ldrb	r3, [r2, #1]!
   143fc:	cmp	r3, #0
   14400:	bne	143ec <__assert_fail@plt+0x3260>
   14404:	b	12ff8 <__assert_fail@plt+0x1e6c>
   14408:	mov	ip, r5
   1440c:	mov	r6, #0
   14410:	ldr	r2, [sp, #40]	; 0x28
   14414:	ldr	r8, [sp, #76]	; 0x4c
   14418:	ldr	sl, [sp, #80]	; 0x50
   1441c:	ldr	r5, [sp, #84]	; 0x54
   14420:	ldr	r7, [sp, #88]	; 0x58
   14424:	ldr	r4, [sp, #92]	; 0x5c
   14428:	b	140b4 <__assert_fail@plt+0x2f28>
   1442c:	ldr	r2, [sp, #32]
   14430:	ldrb	r1, [r2, r3]
   14434:	sub	r2, r1, #33	; 0x21
   14438:	cmp	r2, #29
   1443c:	ldrls	pc, [pc, r2, lsl #2]
   14440:	b	1451c <__assert_fail@plt+0x3390>
   14444:			; <UNDEFINED> instruction: 0x000144bc
   14448:	andeq	r4, r1, ip, lsl r5
   1444c:	andeq	r4, r1, ip, lsl r5
   14450:	andeq	r4, r1, ip, lsl r5
   14454:	andeq	r4, r1, ip, lsl r5
   14458:	andeq	r4, r1, ip, lsl r5
   1445c:			; <UNDEFINED> instruction: 0x000144bc
   14460:			; <UNDEFINED> instruction: 0x000144bc
   14464:			; <UNDEFINED> instruction: 0x000144bc
   14468:	andeq	r4, r1, ip, lsl r5
   1446c:	andeq	r4, r1, ip, lsl r5
   14470:	andeq	r4, r1, ip, lsl r5
   14474:			; <UNDEFINED> instruction: 0x000144bc
   14478:	andeq	r4, r1, ip, lsl r5
   1447c:			; <UNDEFINED> instruction: 0x000144bc
   14480:	andeq	r4, r1, ip, lsl r5
   14484:	andeq	r4, r1, ip, lsl r5
   14488:	andeq	r4, r1, ip, lsl r5
   1448c:	andeq	r4, r1, ip, lsl r5
   14490:	andeq	r4, r1, ip, lsl r5
   14494:	andeq	r4, r1, ip, lsl r5
   14498:	andeq	r4, r1, ip, lsl r5
   1449c:	andeq	r4, r1, ip, lsl r5
   144a0:	andeq	r4, r1, ip, lsl r5
   144a4:	andeq	r4, r1, ip, lsl r5
   144a8:	andeq	r4, r1, ip, lsl r5
   144ac:	andeq	r4, r1, ip, lsl r5
   144b0:			; <UNDEFINED> instruction: 0x000144bc
   144b4:			; <UNDEFINED> instruction: 0x000144bc
   144b8:			; <UNDEFINED> instruction: 0x000144bc
   144bc:	ldr	r2, [sp, #44]	; 0x2c
   144c0:	cmp	r2, #0
   144c4:	bne	14620 <__assert_fail@plt+0x3494>
   144c8:	cmp	sl, r4
   144cc:	mov	r5, r1
   144d0:	movhi	r2, #63	; 0x3f
   144d4:	mov	r9, r3
   144d8:	strbhi	r2, [r8, r4]
   144dc:	add	r2, r4, #1
   144e0:	cmp	sl, r2
   144e4:	movhi	r0, #34	; 0x22
   144e8:	strbhi	r0, [r8, r2]
   144ec:	add	r2, r4, #2
   144f0:	cmp	sl, r2
   144f4:	movhi	r0, #34	; 0x22
   144f8:	strbhi	r0, [r8, r2]
   144fc:	add	r2, r4, #3
   14500:	add	r4, r4, #4
   14504:	cmp	sl, r2
   14508:	movhi	r0, #63	; 0x3f
   1450c:	strbhi	r0, [r8, r2]
   14510:	mov	r2, #0
   14514:	mov	r6, r2
   14518:	b	13950 <__assert_fail@plt+0x27c4>
   1451c:	mov	r3, #0
   14520:	mov	r6, r3
   14524:	b	134c8 <__assert_fail@plt+0x233c>
   14528:	ldr	r0, [sp, #28]
   1452c:	mov	r1, r4
   14530:	mov	r2, r7
   14534:	mov	r3, r5
   14538:	mov	ip, r5
   1453c:	ldr	r8, [sp, #76]	; 0x4c
   14540:	ldr	sl, [sp, #80]	; 0x50
   14544:	cmp	r1, r0
   14548:	ldr	r5, [sp, #84]	; 0x54
   1454c:	ldr	r7, [sp, #88]	; 0x58
   14550:	ldr	r4, [sp, #92]	; 0x5c
   14554:	bcs	14588 <__assert_fail@plt+0x33fc>
   14558:	ldrb	r6, [r2]
   1455c:	cmp	r6, #0
   14560:	bne	14574 <__assert_fail@plt+0x33e8>
   14564:	b	146a8 <__assert_fail@plt+0x351c>
   14568:	ldrb	r6, [r2, #1]!
   1456c:	cmp	r6, #0
   14570:	beq	14630 <__assert_fail@plt+0x34a4>
   14574:	add	r3, r3, #1
   14578:	add	r1, r9, r3
   1457c:	cmp	r1, r0
   14580:	bcc	14568 <__assert_fail@plt+0x33dc>
   14584:	mov	ip, r3
   14588:	mov	r6, #0
   1458c:	ldr	r2, [sp, #40]	; 0x28
   14590:	b	140b4 <__assert_fail@plt+0x2f28>
   14594:	mov	r3, #1
   14598:	mov	r2, #0
   1459c:	mov	r4, r2
   145a0:	str	r3, [sp, #36]	; 0x24
   145a4:	str	r3, [sp, #40]	; 0x28
   145a8:	str	r3, [sp, #44]	; 0x2c
   145ac:	str	r2, [sp, #48]	; 0x30
   145b0:	str	r3, [sp, #56]	; 0x38
   145b4:	movw	r3, #28328	; 0x6ea8
   145b8:	movt	r3, #1
   145bc:	str	r3, [sp, #60]	; 0x3c
   145c0:	str	r2, [sp, #68]	; 0x44
   145c4:	str	r2, [sp, #72]	; 0x48
   145c8:	b	13028 <__assert_fail@plt+0x1e9c>
   145cc:	mov	r2, r3
   145d0:	ldr	r3, [sp, #60]	; 0x3c
   145d4:	cmp	r3, #0
   145d8:	moveq	r2, #0
   145dc:	andne	r2, r2, #1
   145e0:	cmp	r2, #0
   145e4:	beq	14610 <__assert_fail@plt+0x3484>
   145e8:	mov	r2, r3
   145ec:	ldrb	r3, [r3]
   145f0:	cmp	r3, #0
   145f4:	beq	14610 <__assert_fail@plt+0x3484>
   145f8:	cmp	sl, r4
   145fc:	strbhi	r3, [fp, r4]
   14600:	add	r4, r4, #1
   14604:	ldrb	r3, [r2, #1]!
   14608:	cmp	r3, #0
   1460c:	bne	145f8 <__assert_fail@plt+0x346c>
   14610:	cmp	sl, r4
   14614:	movhi	r3, #0
   14618:	strbhi	r3, [fp, r4]
   1461c:	b	13830 <__assert_fail@plt+0x26a4>
   14620:	str	fp, [sp, #152]	; 0x98
   14624:	mov	fp, r8
   14628:	ldr	r8, [sp, #152]	; 0x98
   1462c:	b	137f8 <__assert_fail@plt+0x266c>
   14630:	mov	ip, r3
   14634:	ldr	r2, [sp, #40]	; 0x28
   14638:	b	140b4 <__assert_fail@plt+0x2f28>
   1463c:	str	fp, [sp, #152]	; 0x98
   14640:	mov	fp, r8
   14644:	ldr	r8, [sp, #152]	; 0x98
   14648:	sub	r3, r8, #2
   1464c:	clz	r3, r3
   14650:	lsr	r3, r3, #5
   14654:	str	r3, [sp, #40]	; 0x28
   14658:	b	137ec <__assert_fail@plt+0x2660>
   1465c:	mov	ip, #5
   14660:	ldr	r3, [sp, #28]
   14664:	str	ip, [sp]
   14668:	ldr	r2, [sp, #156]	; 0x9c
   1466c:	ldr	ip, [sp, #164]	; 0xa4
   14670:	ldr	r0, [sp, #160]	; 0xa0
   14674:	str	r2, [sp, #4]
   14678:	ldr	r2, [sp, #32]
   1467c:	ldr	r1, [sp, #72]	; 0x48
   14680:	str	ip, [sp, #12]
   14684:	ldr	ip, [sp, #168]	; 0xa8
   14688:	str	r0, [sp, #8]
   1468c:	mov	r0, fp
   14690:	str	ip, [sp, #16]
   14694:	bl	12f40 <__assert_fail@plt+0x1db4>
   14698:	mov	r4, r0
   1469c:	b	13830 <__assert_fail@plt+0x26a4>
   146a0:	mov	r8, #2
   146a4:	b	137ec <__assert_fail@plt+0x2660>
   146a8:	ldr	r2, [sp, #40]	; 0x28
   146ac:	b	140b4 <__assert_fail@plt+0x2f28>
   146b0:	mov	r3, #0
   146b4:	mov	r2, #1
   146b8:	mov	r4, r3
   146bc:	strd	r2, [sp, #36]	; 0x24
   146c0:	strd	r2, [sp, #44]	; 0x2c
   146c4:	str	r2, [sp, #56]	; 0x38
   146c8:	str	r3, [sp, #68]	; 0x44
   146cc:	str	r3, [sp, #72]	; 0x48
   146d0:	movw	r3, #28348	; 0x6ebc
   146d4:	movt	r3, #1
   146d8:	str	r3, [sp, #60]	; 0x3c
   146dc:	b	13028 <__assert_fail@plt+0x1e9c>
   146e0:	mov	r3, #0
   146e4:	mov	r1, #1
   146e8:	mov	r2, r3
   146ec:	str	r1, [sp, #36]	; 0x24
   146f0:	str	r3, [sp, #48]	; 0x30
   146f4:	str	sl, [sp, #72]	; 0x48
   146f8:	b	13630 <__assert_fail@plt+0x24a4>
   146fc:	bl	11174 <abort@plt>
   14700:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14704:	mov	r4, r0
   14708:	mov	r5, r3
   1470c:	strd	r6, [sp, #8]
   14710:	movw	r7, #33064	; 0x8128
   14714:	movt	r7, #2
   14718:	strd	r8, [sp, #16]
   1471c:	strd	sl, [sp, #24]
   14720:	mov	sl, r1
   14724:	mov	fp, r2
   14728:	str	lr, [sp, #32]
   1472c:	sub	sp, sp, #60	; 0x3c
   14730:	bl	11090 <__errno_location@plt>
   14734:	mov	r8, r0
   14738:	cmn	r4, #-2147483647	; 0x80000001
   1473c:	ldr	r6, [r7]
   14740:	movne	r0, #0
   14744:	moveq	r0, #1
   14748:	ldr	r3, [r8]
   1474c:	orrs	r0, r0, r4, lsr #31
   14750:	str	r3, [sp, #28]
   14754:	bne	148e4 <__assert_fail@plt+0x3758>
   14758:	ldr	r3, [r7, #4]
   1475c:	cmp	r3, r4
   14760:	bgt	147c0 <__assert_fail@plt+0x3634>
   14764:	add	r1, r7, #8
   14768:	sub	r2, r4, r3
   1476c:	str	r3, [sp, #52]	; 0x34
   14770:	cmp	r6, r1
   14774:	add	r2, r2, #1
   14778:	beq	148bc <__assert_fail@plt+0x3730>
   1477c:	mov	r1, #8
   14780:	mov	r0, r6
   14784:	mvn	r3, #-2147483648	; 0x80000000
   14788:	str	r1, [sp]
   1478c:	add	r1, sp, #52	; 0x34
   14790:	bl	159d8 <__assert_fail@plt+0x484c>
   14794:	mov	r6, r0
   14798:	str	r0, [r7]
   1479c:	ldr	r0, [r7, #4]
   147a0:	mov	r1, #0
   147a4:	ldr	r2, [sp, #52]	; 0x34
   147a8:	sub	r2, r2, r0
   147ac:	add	r0, r6, r0, lsl #3
   147b0:	lsl	r2, r2, #3
   147b4:	bl	110b4 <memset@plt>
   147b8:	ldr	r3, [sp, #52]	; 0x34
   147bc:	str	r3, [r7, #4]
   147c0:	ldr	r1, [r5, #4]
   147c4:	add	r0, r6, r4, lsl #3
   147c8:	add	ip, r5, #8
   147cc:	mov	r3, fp
   147d0:	mov	r2, sl
   147d4:	ldr	r7, [r0, #4]
   147d8:	str	r0, [sp, #36]	; 0x24
   147dc:	str	ip, [sp, #40]	; 0x28
   147e0:	orr	r0, r1, #1
   147e4:	ldr	r9, [r6, r4, lsl #3]
   147e8:	str	ip, [sp, #8]
   147ec:	ldr	lr, [r5, #44]	; 0x2c
   147f0:	str	r0, [sp, #4]
   147f4:	ldr	ip, [r5]
   147f8:	mov	r1, r9
   147fc:	str	ip, [sp, #32]
   14800:	ldr	ip, [r5, #40]	; 0x28
   14804:	str	ip, [sp, #12]
   14808:	ldr	ip, [sp, #32]
   1480c:	str	lr, [sp, #16]
   14810:	str	r0, [sp, #44]	; 0x2c
   14814:	mov	r0, r7
   14818:	str	ip, [sp]
   1481c:	bl	12f40 <__assert_fail@plt+0x1db4>
   14820:	cmp	r9, r0
   14824:	bhi	14894 <__assert_fail@plt+0x3708>
   14828:	add	r9, r0, #1
   1482c:	movw	r3, #33296	; 0x8210
   14830:	movt	r3, #2
   14834:	cmp	r7, r3
   14838:	str	r9, [r6, r4, lsl #3]
   1483c:	beq	14848 <__assert_fail@plt+0x36bc>
   14840:	mov	r0, r7
   14844:	bl	12b38 <__assert_fail@plt+0x19ac>
   14848:	mov	r0, r9
   1484c:	bl	15828 <__assert_fail@plt+0x469c>
   14850:	ldr	ip, [r5]
   14854:	mov	r3, fp
   14858:	mov	r2, sl
   1485c:	mov	r1, r9
   14860:	mov	r7, r0
   14864:	ldr	lr, [sp, #36]	; 0x24
   14868:	ldr	r4, [r5, #40]	; 0x28
   1486c:	str	r0, [lr, #4]
   14870:	ldr	lr, [r5, #44]	; 0x2c
   14874:	str	ip, [sp]
   14878:	ldr	ip, [sp, #44]	; 0x2c
   1487c:	str	ip, [sp, #4]
   14880:	ldr	ip, [sp, #40]	; 0x28
   14884:	str	r4, [sp, #12]
   14888:	str	lr, [sp, #16]
   1488c:	str	ip, [sp, #8]
   14890:	bl	12f40 <__assert_fail@plt+0x1db4>
   14894:	ldr	r3, [sp, #28]
   14898:	mov	r0, r7
   1489c:	str	r3, [r8]
   148a0:	add	sp, sp, #60	; 0x3c
   148a4:	ldrd	r4, [sp]
   148a8:	ldrd	r6, [sp, #8]
   148ac:	ldrd	r8, [sp, #16]
   148b0:	ldrd	sl, [sp, #24]
   148b4:	add	sp, sp, #32
   148b8:	pop	{pc}		; (ldr pc, [sp], #4)
   148bc:	mov	r1, #8
   148c0:	mvn	r3, #-2147483648	; 0x80000000
   148c4:	str	r1, [sp]
   148c8:	add	r1, sp, #52	; 0x34
   148cc:	bl	159d8 <__assert_fail@plt+0x484c>
   148d0:	ldrd	r2, [r7, #8]
   148d4:	mov	r6, r0
   148d8:	str	r0, [r7]
   148dc:	strd	r2, [r0]
   148e0:	b	1479c <__assert_fail@plt+0x3610>
   148e4:	bl	11174 <abort@plt>
   148e8:	strd	r4, [sp, #-16]!
   148ec:	mov	r5, r0
   148f0:	str	r6, [sp, #8]
   148f4:	str	lr, [sp, #12]
   148f8:	bl	11090 <__errno_location@plt>
   148fc:	mov	r4, r0
   14900:	cmp	r5, #0
   14904:	ldr	r0, [pc, #32]	; 1492c <__assert_fail@plt+0x37a0>
   14908:	mov	r1, #48	; 0x30
   1490c:	movne	r0, r5
   14910:	ldr	r6, [r4]
   14914:	bl	15b50 <__assert_fail@plt+0x49c4>
   14918:	str	r6, [r4]
   1491c:	ldrd	r4, [sp]
   14920:	ldr	r6, [sp, #8]
   14924:	add	sp, sp, #12
   14928:	pop	{pc}		; (ldr pc, [sp], #4)
   1492c:	andeq	r8, r2, r0, lsl r3
   14930:	ldr	r3, [pc, #12]	; 14944 <__assert_fail@plt+0x37b8>
   14934:	cmp	r0, #0
   14938:	moveq	r0, r3
   1493c:	ldr	r0, [r0]
   14940:	bx	lr
   14944:	andeq	r8, r2, r0, lsl r3
   14948:	ldr	r3, [pc, #12]	; 1495c <__assert_fail@plt+0x37d0>
   1494c:	cmp	r0, #0
   14950:	moveq	r0, r3
   14954:	str	r1, [r0]
   14958:	bx	lr
   1495c:	andeq	r8, r2, r0, lsl r3
   14960:	ldr	r3, [pc, #52]	; 1499c <__assert_fail@plt+0x3810>
   14964:	cmp	r0, #0
   14968:	push	{lr}		; (str lr, [sp, #-4]!)
   1496c:	lsr	lr, r1, #5
   14970:	and	r1, r1, #31
   14974:	moveq	r0, r3
   14978:	add	r3, r0, #8
   1497c:	ldr	ip, [r3, lr, lsl #2]
   14980:	lsr	r0, ip, r1
   14984:	eor	r2, r2, r0
   14988:	and	r0, r0, #1
   1498c:	and	r2, r2, #1
   14990:	eor	r1, ip, r2, lsl r1
   14994:	str	r1, [r3, lr, lsl #2]
   14998:	pop	{pc}		; (ldr pc, [sp], #4)
   1499c:	andeq	r8, r2, r0, lsl r3
   149a0:	ldr	r3, [pc, #16]	; 149b8 <__assert_fail@plt+0x382c>
   149a4:	cmp	r0, #0
   149a8:	movne	r3, r0
   149ac:	ldr	r0, [r3, #4]
   149b0:	str	r1, [r3, #4]
   149b4:	bx	lr
   149b8:	andeq	r8, r2, r0, lsl r3
   149bc:	ldr	r3, [pc, #48]	; 149f4 <__assert_fail@plt+0x3868>
   149c0:	cmp	r0, #0
   149c4:	mov	ip, #10
   149c8:	moveq	r0, r3
   149cc:	cmp	r2, #0
   149d0:	cmpne	r1, #0
   149d4:	str	ip, [r0]
   149d8:	beq	149e8 <__assert_fail@plt+0x385c>
   149dc:	str	r1, [r0, #40]	; 0x28
   149e0:	str	r2, [r0, #44]	; 0x2c
   149e4:	bx	lr
   149e8:	str	r4, [sp, #-8]!
   149ec:	str	lr, [sp, #4]
   149f0:	bl	11174 <abort@plt>
   149f4:	andeq	r8, r2, r0, lsl r3
   149f8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   149fc:	strd	r6, [sp, #8]
   14a00:	mov	r7, r0
   14a04:	mov	r6, r1
   14a08:	strd	r8, [sp, #16]
   14a0c:	mov	r8, r2
   14a10:	mov	r9, r3
   14a14:	str	lr, [sp, #24]
   14a18:	sub	sp, sp, #28
   14a1c:	ldr	r4, [sp, #56]	; 0x38
   14a20:	ldr	ip, [pc, #104]	; 14a90 <__assert_fail@plt+0x3904>
   14a24:	cmp	r4, #0
   14a28:	moveq	r4, ip
   14a2c:	bl	11090 <__errno_location@plt>
   14a30:	ldr	ip, [r4, #44]	; 0x2c
   14a34:	mov	r5, r0
   14a38:	mov	r1, r6
   14a3c:	add	lr, r4, #8
   14a40:	mov	r3, r9
   14a44:	ldr	r6, [r5]
   14a48:	mov	r2, r8
   14a4c:	mov	r0, r7
   14a50:	str	ip, [sp, #16]
   14a54:	ldr	ip, [r4, #40]	; 0x28
   14a58:	str	lr, [sp, #8]
   14a5c:	str	ip, [sp, #12]
   14a60:	ldr	ip, [r4, #4]
   14a64:	str	ip, [sp, #4]
   14a68:	ldr	ip, [r4]
   14a6c:	str	ip, [sp]
   14a70:	bl	12f40 <__assert_fail@plt+0x1db4>
   14a74:	str	r6, [r5]
   14a78:	add	sp, sp, #28
   14a7c:	ldrd	r4, [sp]
   14a80:	ldrd	r6, [sp, #8]
   14a84:	ldrd	r8, [sp, #16]
   14a88:	add	sp, sp, #24
   14a8c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a90:	andeq	r8, r2, r0, lsl r3
   14a94:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14a98:	cmp	r3, #0
   14a9c:	ldr	r4, [pc, #220]	; 14b80 <__assert_fail@plt+0x39f4>
   14aa0:	movne	r4, r3
   14aa4:	strd	r6, [sp, #8]
   14aa8:	mov	r6, r2
   14aac:	strd	r8, [sp, #16]
   14ab0:	mov	r9, r0
   14ab4:	strd	sl, [sp, #24]
   14ab8:	mov	sl, r1
   14abc:	str	lr, [sp, #32]
   14ac0:	sub	sp, sp, #44	; 0x2c
   14ac4:	bl	11090 <__errno_location@plt>
   14ac8:	ldr	r5, [r4, #4]
   14acc:	mov	r7, r0
   14ad0:	mov	r1, #0
   14ad4:	add	r8, r4, #8
   14ad8:	mov	r3, sl
   14adc:	ldr	ip, [r4, #44]	; 0x2c
   14ae0:	mov	r2, r9
   14ae4:	mov	r0, r1
   14ae8:	ldr	lr, [r7]
   14aec:	cmp	r6, r1
   14af0:	orreq	r5, r5, #1
   14af4:	str	ip, [sp, #16]
   14af8:	ldr	ip, [r4, #40]	; 0x28
   14afc:	stmib	sp, {r5, r8, ip}
   14b00:	ldr	ip, [r4]
   14b04:	str	lr, [sp, #28]
   14b08:	str	ip, [sp]
   14b0c:	bl	12f40 <__assert_fail@plt+0x1db4>
   14b10:	add	r1, r0, #1
   14b14:	mov	fp, r0
   14b18:	mov	r0, r1
   14b1c:	str	r1, [sp, #36]	; 0x24
   14b20:	bl	15828 <__assert_fail@plt+0x469c>
   14b24:	ldr	ip, [r4, #44]	; 0x2c
   14b28:	mov	r3, sl
   14b2c:	mov	r2, r9
   14b30:	ldr	r1, [sp, #36]	; 0x24
   14b34:	str	ip, [sp, #16]
   14b38:	ldr	ip, [r4, #40]	; 0x28
   14b3c:	str	r0, [sp, #32]
   14b40:	stmib	sp, {r5, r8, ip}
   14b44:	ldr	ip, [r4]
   14b48:	str	ip, [sp]
   14b4c:	bl	12f40 <__assert_fail@plt+0x1db4>
   14b50:	ldr	lr, [sp, #28]
   14b54:	cmp	r6, #0
   14b58:	ldr	r0, [sp, #32]
   14b5c:	str	lr, [r7]
   14b60:	strne	fp, [r6]
   14b64:	add	sp, sp, #44	; 0x2c
   14b68:	ldrd	r4, [sp]
   14b6c:	ldrd	r6, [sp, #8]
   14b70:	ldrd	r8, [sp, #16]
   14b74:	ldrd	sl, [sp, #24]
   14b78:	add	sp, sp, #32
   14b7c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b80:	andeq	r8, r2, r0, lsl r3
   14b84:	mov	r3, r2
   14b88:	mov	r2, #0
   14b8c:	b	14a94 <__assert_fail@plt+0x3908>
   14b90:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14b94:	movw	r5, #33064	; 0x8128
   14b98:	movt	r5, #2
   14b9c:	ldr	r3, [r5, #4]
   14ba0:	strd	r6, [sp, #8]
   14ba4:	str	r8, [sp, #16]
   14ba8:	str	lr, [sp, #20]
   14bac:	ldr	r7, [r5]
   14bb0:	cmp	r3, #1
   14bb4:	ble	14bd8 <__assert_fail@plt+0x3a4c>
   14bb8:	mov	r4, #1
   14bbc:	add	r6, r7, #4
   14bc0:	ldr	r0, [r6, r4, lsl #3]
   14bc4:	add	r4, r4, #1
   14bc8:	bl	12b38 <__assert_fail@plt+0x19ac>
   14bcc:	ldr	r3, [r5, #4]
   14bd0:	cmp	r3, r4
   14bd4:	bgt	14bc0 <__assert_fail@plt+0x3a34>
   14bd8:	ldr	r0, [r7, #4]
   14bdc:	movw	r4, #33296	; 0x8210
   14be0:	movt	r4, #2
   14be4:	cmp	r0, r4
   14be8:	beq	14bfc <__assert_fail@plt+0x3a70>
   14bec:	bl	12b38 <__assert_fail@plt+0x19ac>
   14bf0:	mov	r3, #256	; 0x100
   14bf4:	str	r3, [r5, #8]
   14bf8:	str	r4, [r5, #12]
   14bfc:	ldr	r4, [pc, #44]	; 14c30 <__assert_fail@plt+0x3aa4>
   14c00:	cmp	r7, r4
   14c04:	beq	14c14 <__assert_fail@plt+0x3a88>
   14c08:	mov	r0, r7
   14c0c:	bl	12b38 <__assert_fail@plt+0x19ac>
   14c10:	str	r4, [r5]
   14c14:	mov	r3, #1
   14c18:	ldrd	r6, [sp, #8]
   14c1c:	str	r3, [r5, #4]
   14c20:	ldrd	r4, [sp]
   14c24:	ldr	r8, [sp, #16]
   14c28:	add	sp, sp, #20
   14c2c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c30:	andeq	r8, r2, r0, lsr r1
   14c34:	ldr	r3, [pc, #4]	; 14c40 <__assert_fail@plt+0x3ab4>
   14c38:	mvn	r2, #0
   14c3c:	b	14700 <__assert_fail@plt+0x3574>
   14c40:	andeq	r8, r2, r0, lsl r3
   14c44:	ldr	r3, [pc]	; 14c4c <__assert_fail@plt+0x3ac0>
   14c48:	b	14700 <__assert_fail@plt+0x3574>
   14c4c:	andeq	r8, r2, r0, lsl r3
   14c50:	mov	r1, r0
   14c54:	ldr	r3, [pc, #8]	; 14c64 <__assert_fail@plt+0x3ad8>
   14c58:	mvn	r2, #0
   14c5c:	mov	r0, #0
   14c60:	b	14700 <__assert_fail@plt+0x3574>
   14c64:	andeq	r8, r2, r0, lsl r3
   14c68:	mov	r2, r1
   14c6c:	ldr	r3, [pc, #8]	; 14c7c <__assert_fail@plt+0x3af0>
   14c70:	mov	r1, r0
   14c74:	mov	r0, #0
   14c78:	b	14700 <__assert_fail@plt+0x3574>
   14c7c:	andeq	r8, r2, r0, lsl r3
   14c80:	strd	r4, [sp, #-12]!
   14c84:	mov	r5, r2
   14c88:	mov	r4, r0
   14c8c:	str	lr, [sp, #8]
   14c90:	sub	sp, sp, #52	; 0x34
   14c94:	mov	r0, sp
   14c98:	bl	12d9c <__assert_fail@plt+0x1c10>
   14c9c:	mov	r3, sp
   14ca0:	mov	r1, r5
   14ca4:	mov	r0, r4
   14ca8:	mvn	r2, #0
   14cac:	bl	14700 <__assert_fail@plt+0x3574>
   14cb0:	add	sp, sp, #52	; 0x34
   14cb4:	ldrd	r4, [sp]
   14cb8:	add	sp, sp, #8
   14cbc:	pop	{pc}		; (ldr pc, [sp], #4)
   14cc0:	strd	r4, [sp, #-16]!
   14cc4:	mov	r5, r2
   14cc8:	mov	r4, r0
   14ccc:	str	r6, [sp, #8]
   14cd0:	mov	r6, r3
   14cd4:	str	lr, [sp, #12]
   14cd8:	sub	sp, sp, #48	; 0x30
   14cdc:	mov	r0, sp
   14ce0:	bl	12d9c <__assert_fail@plt+0x1c10>
   14ce4:	mov	r3, sp
   14ce8:	mov	r2, r6
   14cec:	mov	r1, r5
   14cf0:	mov	r0, r4
   14cf4:	bl	14700 <__assert_fail@plt+0x3574>
   14cf8:	add	sp, sp, #48	; 0x30
   14cfc:	ldrd	r4, [sp]
   14d00:	ldr	r6, [sp, #8]
   14d04:	add	sp, sp, #12
   14d08:	pop	{pc}		; (ldr pc, [sp], #4)
   14d0c:	mov	r2, r1
   14d10:	mov	r1, r0
   14d14:	mov	r0, #0
   14d18:	b	14c80 <__assert_fail@plt+0x3af4>
   14d1c:	mov	r3, r2
   14d20:	mov	r2, r1
   14d24:	mov	r1, r0
   14d28:	mov	r0, #0
   14d2c:	b	14cc0 <__assert_fail@plt+0x3b34>
   14d30:	ldr	ip, [pc, #140]	; 14dc4 <__assert_fail@plt+0x3c38>
   14d34:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14d38:	ldrd	r4, [ip]
   14d3c:	strd	r6, [sp, #8]
   14d40:	ldrd	r6, [ip, #8]
   14d44:	strd	r8, [sp, #16]
   14d48:	lsr	r9, r2, #5
   14d4c:	str	lr, [sp, #24]
   14d50:	sub	sp, sp, #52	; 0x34
   14d54:	and	lr, r2, #31
   14d58:	add	r8, sp, #8
   14d5c:	mov	r2, r1
   14d60:	strd	r4, [sp]
   14d64:	mov	r1, r0
   14d68:	mov	r3, sp
   14d6c:	strd	r6, [sp, #8]
   14d70:	mov	r0, #0
   14d74:	ldrd	r4, [ip, #16]
   14d78:	ldrd	r6, [ip, #24]
   14d7c:	strd	r4, [sp, #16]
   14d80:	ldrd	r4, [ip, #32]
   14d84:	strd	r6, [sp, #24]
   14d88:	ldrd	r6, [ip, #40]	; 0x28
   14d8c:	strd	r4, [sp, #32]
   14d90:	strd	r6, [sp, #40]	; 0x28
   14d94:	ldr	ip, [r8, r9, lsl #2]
   14d98:	mvn	r4, ip, lsr lr
   14d9c:	and	r4, r4, #1
   14da0:	eor	lr, ip, r4, lsl lr
   14da4:	str	lr, [r8, r9, lsl #2]
   14da8:	bl	14700 <__assert_fail@plt+0x3574>
   14dac:	add	sp, sp, #52	; 0x34
   14db0:	ldrd	r4, [sp]
   14db4:	ldrd	r6, [sp, #8]
   14db8:	ldrd	r8, [sp, #16]
   14dbc:	add	sp, sp, #24
   14dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   14dc4:	andeq	r8, r2, r0, lsl r3
   14dc8:	mov	r2, r1
   14dcc:	mvn	r1, #0
   14dd0:	b	14d30 <__assert_fail@plt+0x3ba4>
   14dd4:	mov	r2, #58	; 0x3a
   14dd8:	mvn	r1, #0
   14ddc:	b	14d30 <__assert_fail@plt+0x3ba4>
   14de0:	mov	r2, #58	; 0x3a
   14de4:	b	14d30 <__assert_fail@plt+0x3ba4>
   14de8:	strd	r4, [sp, #-20]!	; 0xffffffec
   14dec:	strd	r6, [sp, #8]
   14df0:	mov	r6, r0
   14df4:	mov	r7, r2
   14df8:	str	lr, [sp, #16]
   14dfc:	sub	sp, sp, #100	; 0x64
   14e00:	mov	r0, sp
   14e04:	bl	12d9c <__assert_fail@plt+0x1c10>
   14e08:	ldrd	r4, [sp, #8]
   14e0c:	mov	r1, r7
   14e10:	mov	r0, r6
   14e14:	add	r3, sp, #48	; 0x30
   14e18:	mvn	r2, #0
   14e1c:	ldrd	r6, [sp]
   14e20:	strd	r4, [sp, #56]	; 0x38
   14e24:	ldrd	r4, [sp, #16]
   14e28:	strd	r6, [sp, #48]	; 0x30
   14e2c:	ldrd	r6, [sp, #32]
   14e30:	ldr	lr, [sp, #60]	; 0x3c
   14e34:	strd	r4, [sp, #64]	; 0x40
   14e38:	ldrd	r4, [sp, #24]
   14e3c:	mvn	ip, lr
   14e40:	and	ip, ip, #67108864	; 0x4000000
   14e44:	strd	r4, [sp, #72]	; 0x48
   14e48:	eor	ip, ip, lr
   14e4c:	ldrd	r4, [sp, #40]	; 0x28
   14e50:	str	ip, [sp, #60]	; 0x3c
   14e54:	strd	r6, [sp, #80]	; 0x50
   14e58:	strd	r4, [sp, #88]	; 0x58
   14e5c:	bl	14700 <__assert_fail@plt+0x3574>
   14e60:	add	sp, sp, #100	; 0x64
   14e64:	ldrd	r4, [sp]
   14e68:	ldrd	r6, [sp, #8]
   14e6c:	add	sp, sp, #16
   14e70:	pop	{pc}		; (ldr pc, [sp], #4)
   14e74:	ldr	ip, [pc, #156]	; 14f18 <__assert_fail@plt+0x3d8c>
   14e78:	cmp	r2, #0
   14e7c:	cmpne	r1, #0
   14e80:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14e84:	strd	r6, [sp, #8]
   14e88:	mov	r6, r2
   14e8c:	str	r8, [sp, #16]
   14e90:	mov	r8, r3
   14e94:	strd	sl, [sp, #20]
   14e98:	ldrd	r4, [ip]
   14e9c:	str	lr, [sp, #28]
   14ea0:	sub	sp, sp, #48	; 0x30
   14ea4:	mov	lr, #10
   14ea8:	ldrd	r2, [ip, #8]
   14eac:	ldrd	sl, [ip, #16]
   14eb0:	strd	r4, [sp]
   14eb4:	ldrd	r4, [ip, #32]
   14eb8:	str	lr, [sp]
   14ebc:	strd	r2, [sp, #8]
   14ec0:	strd	sl, [sp, #16]
   14ec4:	ldrd	r2, [ip, #24]
   14ec8:	ldrd	sl, [ip, #40]	; 0x28
   14ecc:	strd	r2, [sp, #24]
   14ed0:	strd	r4, [sp, #32]
   14ed4:	strd	sl, [sp, #40]	; 0x28
   14ed8:	beq	14f14 <__assert_fail@plt+0x3d88>
   14edc:	ldr	r2, [sp, #80]	; 0x50
   14ee0:	mov	r7, r1
   14ee4:	mov	r3, sp
   14ee8:	mov	r1, r8
   14eec:	str	r7, [sp, #40]	; 0x28
   14ef0:	str	r6, [sp, #44]	; 0x2c
   14ef4:	bl	14700 <__assert_fail@plt+0x3574>
   14ef8:	add	sp, sp, #48	; 0x30
   14efc:	ldrd	r4, [sp]
   14f00:	ldrd	r6, [sp, #8]
   14f04:	ldr	r8, [sp, #16]
   14f08:	ldrd	sl, [sp, #20]
   14f0c:	add	sp, sp, #28
   14f10:	pop	{pc}		; (ldr pc, [sp], #4)
   14f14:	bl	11174 <abort@plt>
   14f18:	andeq	r8, r2, r0, lsl r3
   14f1c:	mvn	ip, #0
   14f20:	push	{lr}		; (str lr, [sp, #-4]!)
   14f24:	sub	sp, sp, #12
   14f28:	str	ip, [sp]
   14f2c:	bl	14e74 <__assert_fail@plt+0x3ce8>
   14f30:	add	sp, sp, #12
   14f34:	pop	{pc}		; (ldr pc, [sp], #4)
   14f38:	mvn	ip, #0
   14f3c:	push	{lr}		; (str lr, [sp, #-4]!)
   14f40:	sub	sp, sp, #12
   14f44:	mov	r3, r2
   14f48:	mov	r2, r1
   14f4c:	mov	r1, r0
   14f50:	mov	r0, #0
   14f54:	str	ip, [sp]
   14f58:	bl	14e74 <__assert_fail@plt+0x3ce8>
   14f5c:	add	sp, sp, #12
   14f60:	pop	{pc}		; (ldr pc, [sp], #4)
   14f64:	push	{lr}		; (str lr, [sp, #-4]!)
   14f68:	sub	sp, sp, #12
   14f6c:	str	r3, [sp]
   14f70:	mov	r3, r2
   14f74:	mov	r2, r1
   14f78:	mov	r1, r0
   14f7c:	mov	r0, #0
   14f80:	bl	14e74 <__assert_fail@plt+0x3ce8>
   14f84:	add	sp, sp, #12
   14f88:	pop	{pc}		; (ldr pc, [sp], #4)
   14f8c:	ldr	r3, [pc]	; 14f94 <__assert_fail@plt+0x3e08>
   14f90:	b	14700 <__assert_fail@plt+0x3574>
   14f94:	andeq	r8, r2, r8, lsr r1
   14f98:	mov	r2, r1
   14f9c:	ldr	r3, [pc, #8]	; 14fac <__assert_fail@plt+0x3e20>
   14fa0:	mov	r1, r0
   14fa4:	mov	r0, #0
   14fa8:	b	14700 <__assert_fail@plt+0x3574>
   14fac:	andeq	r8, r2, r8, lsr r1
   14fb0:	ldr	r3, [pc, #4]	; 14fbc <__assert_fail@plt+0x3e30>
   14fb4:	mvn	r2, #0
   14fb8:	b	14700 <__assert_fail@plt+0x3574>
   14fbc:	andeq	r8, r2, r8, lsr r1
   14fc0:	mov	r1, r0
   14fc4:	ldr	r3, [pc, #8]	; 14fd4 <__assert_fail@plt+0x3e48>
   14fc8:	mvn	r2, #0
   14fcc:	mov	r0, #0
   14fd0:	b	14700 <__assert_fail@plt+0x3574>
   14fd4:	andeq	r8, r2, r8, lsr r1
   14fd8:	strd	r4, [sp, #-16]!
   14fdc:	mov	r5, r0
   14fe0:	mov	r0, #33	; 0x21
   14fe4:	str	r6, [sp, #8]
   14fe8:	str	lr, [sp, #12]
   14fec:	bl	157e0 <__assert_fail@plt+0x4654>
   14ff0:	mov	r4, r0
   14ff4:	add	r1, r5, #44	; 0x2c
   14ff8:	mov	r2, #32
   14ffc:	mov	r5, #0
   15000:	bl	110c0 <strncpy@plt>
   15004:	mov	r0, r4
   15008:	strb	r5, [r4, #32]
   1500c:	bl	11078 <strlen@plt>
   15010:	add	r0, r4, r0
   15014:	cmp	r4, r0
   15018:	bcs	15028 <__assert_fail@plt+0x3e9c>
   1501c:	ldrb	r3, [r0, #-1]
   15020:	cmp	r3, #32
   15024:	beq	1503c <__assert_fail@plt+0x3eb0>
   15028:	mov	r0, r4
   1502c:	ldrd	r4, [sp]
   15030:	ldr	r6, [sp, #8]
   15034:	add	sp, sp, #12
   15038:	pop	{pc}		; (ldr pc, [sp], #4)
   1503c:	sub	r0, r0, #1
   15040:	cmp	r0, r4
   15044:	strb	r5, [r0]
   15048:	beq	15028 <__assert_fail@plt+0x3e9c>
   1504c:	ldrb	r3, [r0, #-1]!
   15050:	cmp	r3, #32
   15054:	bne	15028 <__assert_fail@plt+0x3e9c>
   15058:	b	15040 <__assert_fail@plt+0x3eb4>
   1505c:	mov	ip, #0
   15060:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15064:	strd	r6, [sp, #8]
   15068:	mov	r5, ip
   1506c:	and	r6, r3, #2
   15070:	strd	r8, [sp, #16]
   15074:	and	r7, r3, #1
   15078:	mov	r9, r2
   1507c:	str	sl, [sp, #24]
   15080:	mov	r8, ip
   15084:	mov	sl, r1
   15088:	str	lr, [sp, #28]
   1508c:	sub	sp, sp, #16
   15090:	str	ip, [sp, #12]
   15094:	bl	10ed4 <utmpxname@plt>
   15098:	bl	10f64 <setutxent@plt>
   1509c:	bl	11180 <getutxent@plt>
   150a0:	subs	r4, r0, #0
   150a4:	beq	150f8 <__assert_fail@plt+0x3f6c>
   150a8:	ldrb	r3, [r4, #44]	; 0x2c
   150ac:	cmp	r3, #0
   150b0:	beq	150c0 <__assert_fail@plt+0x3f34>
   150b4:	ldrsh	r3, [r4]
   150b8:	cmp	r3, #7
   150bc:	beq	15124 <__assert_fail@plt+0x3f98>
   150c0:	cmp	r6, #0
   150c4:	bne	1509c <__assert_fail@plt+0x3f10>
   150c8:	ldr	r2, [sp, #12]
   150cc:	cmp	r2, r5
   150d0:	beq	15164 <__assert_fail@plt+0x3fd8>
   150d4:	add	r0, r5, r5, lsl #1
   150d8:	mov	r1, r4
   150dc:	mov	r2, #384	; 0x180
   150e0:	add	r5, r5, #1
   150e4:	add	r0, r8, r0, lsl #7
   150e8:	bl	10f04 <memcpy@plt>
   150ec:	bl	11180 <getutxent@plt>
   150f0:	subs	r4, r0, #0
   150f4:	bne	150a8 <__assert_fail@plt+0x3f1c>
   150f8:	bl	11108 <endutxent@plt>
   150fc:	mov	r0, r4
   15100:	str	r5, [sl]
   15104:	str	r8, [r9]
   15108:	add	sp, sp, #16
   1510c:	ldrd	r4, [sp]
   15110:	ldrd	r6, [sp, #8]
   15114:	ldrd	r8, [sp, #16]
   15118:	ldr	sl, [sp, #24]
   1511c:	add	sp, sp, #28
   15120:	pop	{pc}		; (ldr pc, [sp], #4)
   15124:	cmp	r7, #0
   15128:	beq	150c8 <__assert_fail@plt+0x3f3c>
   1512c:	ldr	r0, [r4, #4]
   15130:	cmp	r0, #0
   15134:	ble	150c8 <__assert_fail@plt+0x3f3c>
   15138:	mov	r1, #0
   1513c:	bl	11048 <kill@plt>
   15140:	cmp	r0, #0
   15144:	bge	150c8 <__assert_fail@plt+0x3f3c>
   15148:	bl	11090 <__errno_location@plt>
   1514c:	ldr	r3, [r0]
   15150:	cmp	r3, #3
   15154:	beq	1509c <__assert_fail@plt+0x3f10>
   15158:	ldr	r2, [sp, #12]
   1515c:	cmp	r2, r5
   15160:	bne	150d4 <__assert_fail@plt+0x3f48>
   15164:	mov	r1, #384	; 0x180
   15168:	mov	r0, r8
   1516c:	mvn	r3, #0
   15170:	mov	r2, #1
   15174:	str	r1, [sp]
   15178:	add	r1, sp, #12
   1517c:	bl	159d8 <__assert_fail@plt+0x484c>
   15180:	mov	r8, r0
   15184:	b	150d4 <__assert_fail@plt+0x3f48>
   15188:	strd	r4, [sp, #-16]!
   1518c:	mov	r5, r1
   15190:	mov	r1, #0
   15194:	mov	r4, r2
   15198:	str	r6, [sp, #8]
   1519c:	str	lr, [sp, #12]
   151a0:	bl	11114 <setlocale@plt>
   151a4:	subs	r6, r0, #0
   151a8:	beq	15228 <__assert_fail@plt+0x409c>
   151ac:	bl	11078 <strlen@plt>
   151b0:	cmp	r4, r0
   151b4:	bhi	151d4 <__assert_fail@plt+0x4048>
   151b8:	cmp	r4, #0
   151bc:	moveq	r0, #34	; 0x22
   151c0:	bne	151f8 <__assert_fail@plt+0x406c>
   151c4:	ldrd	r4, [sp]
   151c8:	ldr	r6, [sp, #8]
   151cc:	add	sp, sp, #12
   151d0:	pop	{pc}		; (ldr pc, [sp], #4)
   151d4:	add	r2, r0, #1
   151d8:	mov	r1, r6
   151dc:	mov	r0, r5
   151e0:	bl	10f04 <memcpy@plt>
   151e4:	ldrd	r4, [sp]
   151e8:	mov	r0, #0
   151ec:	ldr	r6, [sp, #8]
   151f0:	add	sp, sp, #12
   151f4:	pop	{pc}		; (ldr pc, [sp], #4)
   151f8:	sub	r4, r4, #1
   151fc:	mov	r1, r6
   15200:	mov	r2, r4
   15204:	mov	r0, r5
   15208:	bl	10f04 <memcpy@plt>
   1520c:	mov	r3, #0
   15210:	mov	r0, #34	; 0x22
   15214:	strb	r3, [r5, r4]
   15218:	ldrd	r4, [sp]
   1521c:	ldr	r6, [sp, #8]
   15220:	add	sp, sp, #12
   15224:	pop	{pc}		; (ldr pc, [sp], #4)
   15228:	cmp	r4, #0
   1522c:	mov	r0, #22
   15230:	strbne	r6, [r5]
   15234:	ldrd	r4, [sp]
   15238:	ldr	r6, [sp, #8]
   1523c:	add	sp, sp, #12
   15240:	pop	{pc}		; (ldr pc, [sp], #4)
   15244:	mov	r1, #0
   15248:	b	11114 <setlocale@plt>
   1524c:	cmp	r1, #0
   15250:	strd	r4, [sp, #-16]!
   15254:	mov	ip, r3
   15258:	str	r6, [sp, #8]
   1525c:	mov	r4, r0
   15260:	str	lr, [sp, #12]
   15264:	sub	sp, sp, #32
   15268:	ldr	r5, [sp, #48]	; 0x30
   1526c:	ldr	r6, [sp, #52]	; 0x34
   15270:	beq	153b4 <__assert_fail@plt+0x4228>
   15274:	mov	r3, r1
   15278:	mov	r1, #1
   1527c:	stm	sp, {r2, ip}
   15280:	movw	r2, #28456	; 0x6f28
   15284:	movt	r2, #1
   15288:	bl	110e4 <__fprintf_chk@plt>
   1528c:	mov	r2, #5
   15290:	movw	r1, #28476	; 0x6f3c
   15294:	movt	r1, #1
   15298:	mov	r0, #0
   1529c:	bl	10f4c <dcgettext@plt>
   152a0:	movw	ip, #2022	; 0x7e6
   152a4:	mov	r3, r0
   152a8:	mov	r1, #1
   152ac:	movw	r2, #29204	; 0x7214
   152b0:	movt	r2, #1
   152b4:	mov	r0, r4
   152b8:	str	ip, [sp]
   152bc:	bl	110e4 <__fprintf_chk@plt>
   152c0:	mov	r1, r4
   152c4:	mov	r0, #10
   152c8:	bl	10f40 <fputc_unlocked@plt>
   152cc:	mov	r2, #5
   152d0:	movw	r1, #28480	; 0x6f40
   152d4:	movt	r1, #1
   152d8:	mov	r0, #0
   152dc:	bl	10f4c <dcgettext@plt>
   152e0:	mov	r2, r0
   152e4:	mov	r1, #1
   152e8:	movw	r3, #28652	; 0x6fec
   152ec:	movt	r3, #1
   152f0:	mov	r0, r4
   152f4:	bl	110e4 <__fprintf_chk@plt>
   152f8:	mov	r1, r4
   152fc:	mov	r0, #10
   15300:	bl	10f40 <fputc_unlocked@plt>
   15304:	cmp	r6, #9
   15308:	ldrls	pc, [pc, r6, lsl #2]
   1530c:	b	15620 <__assert_fail@plt+0x4494>
   15310:	andeq	r5, r1, r0, lsr #7
   15314:	ldrdeq	r5, [r1], -r0
   15318:	andeq	r5, r1, ip, lsl #8
   1531c:	andeq	r5, r1, ip, asr #8
   15320:	muleq	r1, r4, r4
   15324:	andeq	r5, r1, ip, asr #9
   15328:	andeq	r5, r1, r4, lsl r5
   1532c:	andeq	r5, r1, r8, ror #10
   15330:	andeq	r5, r1, r0, asr #11
   15334:	andeq	r5, r1, r8, lsr r3
   15338:	movw	r1, #28956	; 0x711c
   1533c:	movt	r1, #1
   15340:	mov	r2, #5
   15344:	mov	r0, #0
   15348:	bl	10f4c <dcgettext@plt>
   1534c:	ldr	lr, [r5, #4]
   15350:	mov	r2, r0
   15354:	mov	r1, #1
   15358:	mov	r0, r4
   1535c:	ldr	r3, [r5, #8]
   15360:	ldr	ip, [r5, #32]
   15364:	str	lr, [sp]
   15368:	ldr	lr, [r5, #12]
   1536c:	str	ip, [sp, #28]
   15370:	ldr	ip, [r5, #28]
   15374:	str	r3, [sp, #4]
   15378:	ldr	r3, [r5, #16]
   1537c:	str	lr, [sp, #8]
   15380:	ldr	lr, [r5, #20]
   15384:	str	ip, [sp, #24]
   15388:	ldr	ip, [r5, #24]
   1538c:	str	r3, [sp, #12]
   15390:	ldr	r3, [r5]
   15394:	str	lr, [sp, #16]
   15398:	str	ip, [sp, #20]
   1539c:	bl	110e4 <__fprintf_chk@plt>
   153a0:	add	sp, sp, #32
   153a4:	ldrd	r4, [sp]
   153a8:	ldr	r6, [sp, #8]
   153ac:	add	sp, sp, #12
   153b0:	pop	{pc}		; (ldr pc, [sp], #4)
   153b4:	mov	r3, r2
   153b8:	mov	r1, #1
   153bc:	str	ip, [sp]
   153c0:	movw	r2, #28468	; 0x6f34
   153c4:	movt	r2, #1
   153c8:	bl	110e4 <__fprintf_chk@plt>
   153cc:	b	1528c <__assert_fail@plt+0x4100>
   153d0:	mov	r2, #5
   153d4:	movw	r1, #28688	; 0x7010
   153d8:	movt	r1, #1
   153dc:	mov	r0, #0
   153e0:	bl	10f4c <dcgettext@plt>
   153e4:	ldr	r3, [r5]
   153e8:	mov	r2, r0
   153ec:	mov	r1, #1
   153f0:	mov	r0, r4
   153f4:	add	sp, sp, #32
   153f8:	ldrd	r4, [sp]
   153fc:	ldr	r6, [sp, #8]
   15400:	ldr	lr, [sp, #12]
   15404:	add	sp, sp, #16
   15408:	b	110e4 <__fprintf_chk@plt>
   1540c:	mov	r2, #5
   15410:	movw	r1, #28704	; 0x7020
   15414:	movt	r1, #1
   15418:	mov	r0, #0
   1541c:	bl	10f4c <dcgettext@plt>
   15420:	ldm	r5, {r3, ip}
   15424:	mov	r2, r0
   15428:	mov	r1, #1
   1542c:	mov	r0, r4
   15430:	str	ip, [sp, #48]	; 0x30
   15434:	add	sp, sp, #32
   15438:	ldrd	r4, [sp]
   1543c:	ldr	r6, [sp, #8]
   15440:	ldr	lr, [sp, #12]
   15444:	add	sp, sp, #16
   15448:	b	110e4 <__fprintf_chk@plt>
   1544c:	mov	r2, #5
   15450:	movw	r1, #28728	; 0x7038
   15454:	movt	r1, #1
   15458:	mov	r0, #0
   1545c:	bl	10f4c <dcgettext@plt>
   15460:	ldm	r5, {r3, lr}
   15464:	mov	r2, r0
   15468:	mov	r1, #1
   1546c:	mov	r0, r4
   15470:	ldr	ip, [r5, #8]
   15474:	str	lr, [sp, #48]	; 0x30
   15478:	str	ip, [sp, #52]	; 0x34
   1547c:	add	sp, sp, #32
   15480:	ldrd	r4, [sp]
   15484:	ldr	r6, [sp, #8]
   15488:	ldr	lr, [sp, #12]
   1548c:	add	sp, sp, #16
   15490:	b	110e4 <__fprintf_chk@plt>
   15494:	mov	r2, #5
   15498:	movw	r1, #28756	; 0x7054
   1549c:	movt	r1, #1
   154a0:	mov	r0, #0
   154a4:	bl	10f4c <dcgettext@plt>
   154a8:	ldmib	r5, {r3, ip, lr}
   154ac:	mov	r2, r0
   154b0:	mov	r1, #1
   154b4:	mov	r0, r4
   154b8:	str	r3, [sp]
   154bc:	ldr	r3, [r5]
   154c0:	stmib	sp, {ip, lr}
   154c4:	bl	110e4 <__fprintf_chk@plt>
   154c8:	b	153a0 <__assert_fail@plt+0x4214>
   154cc:	mov	r2, #5
   154d0:	movw	r1, #28788	; 0x7074
   154d4:	movt	r1, #1
   154d8:	mov	r0, #0
   154dc:	bl	10f4c <dcgettext@plt>
   154e0:	ldmib	r5, {ip, lr}
   154e4:	mov	r2, r0
   154e8:	mov	r1, #1
   154ec:	mov	r0, r4
   154f0:	ldr	r3, [r5, #16]
   154f4:	str	ip, [sp]
   154f8:	ldr	ip, [r5, #12]
   154fc:	str	r3, [sp, #12]
   15500:	ldr	r3, [r5]
   15504:	str	lr, [sp, #4]
   15508:	str	ip, [sp, #8]
   1550c:	bl	110e4 <__fprintf_chk@plt>
   15510:	b	153a0 <__assert_fail@plt+0x4214>
   15514:	mov	r2, #5
   15518:	movw	r1, #28824	; 0x7098
   1551c:	movt	r1, #1
   15520:	mov	r0, #0
   15524:	bl	10f4c <dcgettext@plt>
   15528:	ldr	lr, [r5, #4]
   1552c:	mov	r2, r0
   15530:	mov	r1, #1
   15534:	mov	r0, r4
   15538:	ldr	r3, [r5, #8]
   1553c:	ldr	ip, [r5, #20]
   15540:	str	lr, [sp]
   15544:	ldr	lr, [r5, #12]
   15548:	str	ip, [sp, #16]
   1554c:	ldr	ip, [r5, #16]
   15550:	str	r3, [sp, #4]
   15554:	ldr	r3, [r5]
   15558:	str	lr, [sp, #8]
   1555c:	str	ip, [sp, #12]
   15560:	bl	110e4 <__fprintf_chk@plt>
   15564:	b	153a0 <__assert_fail@plt+0x4214>
   15568:	mov	r2, #5
   1556c:	movw	r1, #28864	; 0x70c0
   15570:	movt	r1, #1
   15574:	mov	r0, #0
   15578:	bl	10f4c <dcgettext@plt>
   1557c:	ldmib	r5, {r3, ip}
   15580:	mov	r2, r0
   15584:	mov	r1, #1
   15588:	mov	r0, r4
   1558c:	ldr	lr, [r5, #24]
   15590:	str	r3, [sp]
   15594:	ldr	r3, [r5, #12]
   15598:	str	lr, [sp, #20]
   1559c:	ldr	lr, [r5, #20]
   155a0:	str	ip, [sp, #4]
   155a4:	ldr	ip, [r5, #16]
   155a8:	str	r3, [sp, #8]
   155ac:	ldr	r3, [r5]
   155b0:	str	ip, [sp, #12]
   155b4:	str	lr, [sp, #16]
   155b8:	bl	110e4 <__fprintf_chk@plt>
   155bc:	b	153a0 <__assert_fail@plt+0x4214>
   155c0:	mov	r2, #5
   155c4:	movw	r1, #28908	; 0x70ec
   155c8:	movt	r1, #1
   155cc:	mov	r0, #0
   155d0:	bl	10f4c <dcgettext@plt>
   155d4:	ldmib	r5, {ip, lr}
   155d8:	mov	r2, r0
   155dc:	mov	r1, #1
   155e0:	mov	r0, r4
   155e4:	ldr	r3, [r5, #28]
   155e8:	str	ip, [sp]
   155ec:	ldr	ip, [r5, #12]
   155f0:	str	r3, [sp, #24]
   155f4:	ldr	r3, [r5, #24]
   155f8:	str	lr, [sp, #4]
   155fc:	ldr	lr, [r5, #16]
   15600:	str	ip, [sp, #8]
   15604:	ldr	ip, [r5, #20]
   15608:	str	r3, [sp, #20]
   1560c:	ldr	r3, [r5]
   15610:	str	lr, [sp, #12]
   15614:	str	ip, [sp, #16]
   15618:	bl	110e4 <__fprintf_chk@plt>
   1561c:	b	153a0 <__assert_fail@plt+0x4214>
   15620:	movw	r1, #29008	; 0x7150
   15624:	movt	r1, #1
   15628:	b	15340 <__assert_fail@plt+0x41b4>
   1562c:	strd	r4, [sp, #-12]!
   15630:	str	lr, [sp, #8]
   15634:	sub	sp, sp, #12
   15638:	ldr	r5, [sp, #24]
   1563c:	ldr	ip, [r5]
   15640:	cmp	ip, #0
   15644:	beq	15660 <__assert_fail@plt+0x44d4>
   15648:	mov	lr, r5
   1564c:	mov	ip, #0
   15650:	ldr	r4, [lr, #4]!
   15654:	add	ip, ip, #1
   15658:	cmp	r4, #0
   1565c:	bne	15650 <__assert_fail@plt+0x44c4>
   15660:	stm	sp, {r5, ip}
   15664:	bl	1524c <__assert_fail@plt+0x40c0>
   15668:	add	sp, sp, #12
   1566c:	ldrd	r4, [sp]
   15670:	add	sp, sp, #8
   15674:	pop	{pc}		; (ldr pc, [sp], #4)
   15678:	strd	r4, [sp, #-16]!
   1567c:	mov	ip, #0
   15680:	str	r6, [sp, #8]
   15684:	str	lr, [sp, #12]
   15688:	sub	sp, sp, #48	; 0x30
   1568c:	ldr	r5, [sp, #64]	; 0x40
   15690:	add	r6, sp, #8
   15694:	mov	r4, r6
   15698:	ldr	lr, [r5], #4
   1569c:	cmp	lr, #0
   156a0:	str	lr, [r4], #4
   156a4:	beq	156b4 <__assert_fail@plt+0x4528>
   156a8:	add	ip, ip, #1
   156ac:	cmp	ip, #10
   156b0:	bne	15698 <__assert_fail@plt+0x450c>
   156b4:	stm	sp, {r6, ip}
   156b8:	bl	1524c <__assert_fail@plt+0x40c0>
   156bc:	add	sp, sp, #48	; 0x30
   156c0:	ldrd	r4, [sp]
   156c4:	ldr	r6, [sp, #8]
   156c8:	add	sp, sp, #12
   156cc:	pop	{pc}		; (ldr pc, [sp], #4)
   156d0:	push	{r3}		; (str r3, [sp, #-4]!)
   156d4:	mov	ip, #0
   156d8:	strd	r4, [sp, #-12]!
   156dc:	str	lr, [sp, #8]
   156e0:	sub	sp, sp, #56	; 0x38
   156e4:	add	r3, sp, #72	; 0x48
   156e8:	add	r5, sp, #16
   156ec:	mov	r4, r3
   156f0:	mov	lr, r5
   156f4:	str	r3, [sp, #12]
   156f8:	ldr	r3, [r4], #4
   156fc:	cmp	r3, #0
   15700:	str	r3, [lr], #4
   15704:	beq	15714 <__assert_fail@plt+0x4588>
   15708:	add	ip, ip, #1
   1570c:	cmp	ip, #10
   15710:	bne	156f8 <__assert_fail@plt+0x456c>
   15714:	ldr	r3, [sp, #68]	; 0x44
   15718:	stm	sp, {r5, ip}
   1571c:	bl	1524c <__assert_fail@plt+0x40c0>
   15720:	add	sp, sp, #56	; 0x38
   15724:	ldrd	r4, [sp]
   15728:	ldr	lr, [sp, #8]
   1572c:	add	sp, sp, #12
   15730:	add	sp, sp, #4
   15734:	bx	lr
   15738:	movw	r3, #33148	; 0x817c
   1573c:	movt	r3, #2
   15740:	str	r4, [sp, #-8]!
   15744:	mov	r0, #10
   15748:	ldr	r1, [r3]
   1574c:	str	lr, [sp, #4]
   15750:	bl	10f40 <fputc_unlocked@plt>
   15754:	mov	r2, #5
   15758:	movw	r1, #29068	; 0x718c
   1575c:	movt	r1, #1
   15760:	mov	r0, #0
   15764:	bl	10f4c <dcgettext@plt>
   15768:	mov	r1, r0
   1576c:	movw	r2, #29088	; 0x71a0
   15770:	movt	r2, #1
   15774:	mov	r0, #1
   15778:	bl	110cc <__printf_chk@plt>
   1577c:	mov	r2, #5
   15780:	movw	r1, #29112	; 0x71b8
   15784:	movt	r1, #1
   15788:	mov	r0, #0
   1578c:	bl	10f4c <dcgettext@plt>
   15790:	mov	r1, r0
   15794:	movw	r3, #27528	; 0x6b88
   15798:	movt	r3, #1
   1579c:	movw	r2, #27568	; 0x6bb0
   157a0:	movt	r2, #1
   157a4:	mov	r0, #1
   157a8:	bl	110cc <__printf_chk@plt>
   157ac:	mov	r2, #5
   157b0:	movw	r1, #29132	; 0x71cc
   157b4:	movt	r1, #1
   157b8:	mov	r0, #0
   157bc:	bl	10f4c <dcgettext@plt>
   157c0:	mov	r1, r0
   157c4:	movw	r2, #29172	; 0x71f4
   157c8:	movt	r2, #1
   157cc:	mov	r0, #1
   157d0:	ldr	r4, [sp]
   157d4:	ldr	lr, [sp, #4]
   157d8:	add	sp, sp, #8
   157dc:	b	110cc <__printf_chk@plt>
   157e0:	str	r4, [sp, #-8]!
   157e4:	str	lr, [sp, #4]
   157e8:	bl	15d10 <__assert_fail@plt+0x4b84>
   157ec:	cmp	r0, #0
   157f0:	beq	15800 <__assert_fail@plt+0x4674>
   157f4:	ldr	r4, [sp]
   157f8:	add	sp, sp, #4
   157fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15800:	bl	15c58 <__assert_fail@plt+0x4acc>
   15804:	str	r4, [sp, #-8]!
   15808:	str	lr, [sp, #4]
   1580c:	bl	15d10 <__assert_fail@plt+0x4b84>
   15810:	cmp	r0, #0
   15814:	beq	15824 <__assert_fail@plt+0x4698>
   15818:	ldr	r4, [sp]
   1581c:	add	sp, sp, #4
   15820:	pop	{pc}		; (ldr pc, [sp], #4)
   15824:	bl	15c58 <__assert_fail@plt+0x4acc>
   15828:	str	r4, [sp, #-8]!
   1582c:	str	lr, [sp, #4]
   15830:	bl	15d10 <__assert_fail@plt+0x4b84>
   15834:	cmp	r0, #0
   15838:	beq	15848 <__assert_fail@plt+0x46bc>
   1583c:	ldr	r4, [sp]
   15840:	add	sp, sp, #4
   15844:	pop	{pc}		; (ldr pc, [sp], #4)
   15848:	bl	15c58 <__assert_fail@plt+0x4acc>
   1584c:	strd	r4, [sp, #-16]!
   15850:	mov	r5, r0
   15854:	mov	r4, r1
   15858:	str	r6, [sp, #8]
   1585c:	str	lr, [sp, #12]
   15860:	bl	15d4c <__assert_fail@plt+0x4bc0>
   15864:	cmp	r0, #0
   15868:	beq	1587c <__assert_fail@plt+0x46f0>
   1586c:	ldrd	r4, [sp]
   15870:	ldr	r6, [sp, #8]
   15874:	add	sp, sp, #12
   15878:	pop	{pc}		; (ldr pc, [sp], #4)
   1587c:	adds	r4, r4, #0
   15880:	movne	r4, #1
   15884:	cmp	r5, #0
   15888:	moveq	r4, #1
   1588c:	cmp	r4, #0
   15890:	beq	1586c <__assert_fail@plt+0x46e0>
   15894:	bl	15c58 <__assert_fail@plt+0x4acc>
   15898:	cmp	r1, #0
   1589c:	orreq	r1, r1, #1
   158a0:	str	r4, [sp, #-8]!
   158a4:	str	lr, [sp, #4]
   158a8:	bl	15d4c <__assert_fail@plt+0x4bc0>
   158ac:	cmp	r0, #0
   158b0:	beq	158c0 <__assert_fail@plt+0x4734>
   158b4:	ldr	r4, [sp]
   158b8:	add	sp, sp, #4
   158bc:	pop	{pc}		; (ldr pc, [sp], #4)
   158c0:	bl	15c58 <__assert_fail@plt+0x4acc>
   158c4:	strd	r4, [sp, #-16]!
   158c8:	mov	r4, r0
   158cc:	mov	r5, r2
   158d0:	str	r6, [sp, #8]
   158d4:	mov	r6, r1
   158d8:	str	lr, [sp, #12]
   158dc:	bl	160cc <__assert_fail@plt+0x4f40>
   158e0:	cmp	r0, #0
   158e4:	beq	158f8 <__assert_fail@plt+0x476c>
   158e8:	ldrd	r4, [sp]
   158ec:	ldr	r6, [sp, #8]
   158f0:	add	sp, sp, #12
   158f4:	pop	{pc}		; (ldr pc, [sp], #4)
   158f8:	cmp	r4, #0
   158fc:	beq	1590c <__assert_fail@plt+0x4780>
   15900:	cmp	r6, #0
   15904:	cmpne	r5, #0
   15908:	beq	158e8 <__assert_fail@plt+0x475c>
   1590c:	bl	15c58 <__assert_fail@plt+0x4acc>
   15910:	b	158c4 <__assert_fail@plt+0x4738>
   15914:	cmp	r2, #0
   15918:	cmpne	r1, #0
   1591c:	str	r4, [sp, #-8]!
   15920:	moveq	r2, #1
   15924:	str	lr, [sp, #4]
   15928:	moveq	r1, r2
   1592c:	bl	160cc <__assert_fail@plt+0x4f40>
   15930:	cmp	r0, #0
   15934:	beq	15944 <__assert_fail@plt+0x47b8>
   15938:	ldr	r4, [sp]
   1593c:	add	sp, sp, #4
   15940:	pop	{pc}		; (ldr pc, [sp], #4)
   15944:	bl	15c58 <__assert_fail@plt+0x4acc>
   15948:	mov	r2, r1
   1594c:	mov	r1, r0
   15950:	mov	r0, #0
   15954:	b	158c4 <__assert_fail@plt+0x4738>
   15958:	mov	r2, r1
   1595c:	mov	r1, r0
   15960:	mov	r0, #0
   15964:	b	15914 <__assert_fail@plt+0x4788>
   15968:	cmp	r0, #0
   1596c:	strd	r4, [sp, #-16]!
   15970:	mov	r5, r1
   15974:	ldr	r4, [r1]
   15978:	str	r6, [sp, #8]
   1597c:	str	lr, [sp, #12]
   15980:	beq	159b0 <__assert_fail@plt+0x4824>
   15984:	lsr	r3, r4, #1
   15988:	add	r3, r3, #1
   1598c:	adds	r4, r4, r3
   15990:	bcs	159cc <__assert_fail@plt+0x4840>
   15994:	mov	r1, r4
   15998:	bl	158c4 <__assert_fail@plt+0x4738>
   1599c:	ldr	r6, [sp, #8]
   159a0:	str	r4, [r5]
   159a4:	ldrd	r4, [sp]
   159a8:	add	sp, sp, #12
   159ac:	pop	{pc}		; (ldr pc, [sp], #4)
   159b0:	cmp	r4, #0
   159b4:	bne	15994 <__assert_fail@plt+0x4808>
   159b8:	mov	r4, #64	; 0x40
   159bc:	udiv	r4, r4, r2
   159c0:	cmp	r2, #64	; 0x40
   159c4:	addhi	r4, r4, #1
   159c8:	b	15994 <__assert_fail@plt+0x4808>
   159cc:	bl	15c58 <__assert_fail@plt+0x4acc>
   159d0:	mov	r2, #1
   159d4:	b	15968 <__assert_fail@plt+0x47dc>
   159d8:	ldr	ip, [r1]
   159dc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   159e0:	mov	r5, r1
   159e4:	strd	r6, [sp, #8]
   159e8:	str	lr, [sp, #28]
   159ec:	strd	r8, [sp, #16]
   159f0:	asr	lr, ip, #1
   159f4:	ldr	r8, [sp, #32]
   159f8:	str	sl, [sp, #24]
   159fc:	adds	r4, ip, lr
   15a00:	mvn	lr, r3
   15a04:	lsr	lr, lr, #31
   15a08:	mvnvs	r4, #-2147483648	; 0x80000000
   15a0c:	cmp	r3, r4
   15a10:	movge	r1, #0
   15a14:	andlt	r1, lr, #1
   15a18:	cmp	r1, #0
   15a1c:	movne	r4, r3
   15a20:	smull	r6, r7, r4, r8
   15a24:	cmp	r7, r6, asr #31
   15a28:	bne	15ab0 <__assert_fail@plt+0x4924>
   15a2c:	cmp	r6, #63	; 0x3f
   15a30:	mov	r1, r6
   15a34:	ble	15a98 <__assert_fail@plt+0x490c>
   15a38:	cmp	r0, #0
   15a3c:	sub	r6, r4, ip
   15a40:	streq	r0, [r5]
   15a44:	cmp	r6, r2
   15a48:	bge	15a78 <__assert_fail@plt+0x48ec>
   15a4c:	adds	r4, ip, r2
   15a50:	bvs	15aac <__assert_fail@plt+0x4920>
   15a54:	cmp	r4, r3
   15a58:	movle	r3, #0
   15a5c:	andgt	r3, lr, #1
   15a60:	cmp	r3, #0
   15a64:	bne	15aac <__assert_fail@plt+0x4920>
   15a68:	smull	r8, r9, r4, r8
   15a6c:	cmp	r9, r8, asr #31
   15a70:	mov	r1, r8
   15a74:	bne	15aac <__assert_fail@plt+0x4920>
   15a78:	bl	1584c <__assert_fail@plt+0x46c0>
   15a7c:	ldrd	r6, [sp, #8]
   15a80:	ldrd	r8, [sp, #16]
   15a84:	ldr	sl, [sp, #24]
   15a88:	str	r4, [r5]
   15a8c:	ldrd	r4, [sp]
   15a90:	add	sp, sp, #28
   15a94:	pop	{pc}		; (ldr pc, [sp], #4)
   15a98:	mov	r6, #64	; 0x40
   15a9c:	sdiv	r4, r6, r8
   15aa0:	mls	r1, r8, r4, r6
   15aa4:	sub	r1, r6, r1
   15aa8:	b	15a38 <__assert_fail@plt+0x48ac>
   15aac:	bl	15c58 <__assert_fail@plt+0x4acc>
   15ab0:	mvn	r6, #-2147483648	; 0x80000000
   15ab4:	b	15a9c <__assert_fail@plt+0x4910>
   15ab8:	mov	r1, #1
   15abc:	str	r4, [sp, #-8]!
   15ac0:	str	lr, [sp, #4]
   15ac4:	bl	15c9c <__assert_fail@plt+0x4b10>
   15ac8:	cmp	r0, #0
   15acc:	beq	15adc <__assert_fail@plt+0x4950>
   15ad0:	ldr	r4, [sp]
   15ad4:	add	sp, sp, #4
   15ad8:	pop	{pc}		; (ldr pc, [sp], #4)
   15adc:	bl	15c58 <__assert_fail@plt+0x4acc>
   15ae0:	mov	r1, #1
   15ae4:	str	r4, [sp, #-8]!
   15ae8:	str	lr, [sp, #4]
   15aec:	bl	15c9c <__assert_fail@plt+0x4b10>
   15af0:	cmp	r0, #0
   15af4:	beq	15b04 <__assert_fail@plt+0x4978>
   15af8:	ldr	r4, [sp]
   15afc:	add	sp, sp, #4
   15b00:	pop	{pc}		; (ldr pc, [sp], #4)
   15b04:	bl	15c58 <__assert_fail@plt+0x4acc>
   15b08:	str	r4, [sp, #-8]!
   15b0c:	str	lr, [sp, #4]
   15b10:	bl	15c9c <__assert_fail@plt+0x4b10>
   15b14:	cmp	r0, #0
   15b18:	beq	15b28 <__assert_fail@plt+0x499c>
   15b1c:	ldr	r4, [sp]
   15b20:	add	sp, sp, #4
   15b24:	pop	{pc}		; (ldr pc, [sp], #4)
   15b28:	bl	15c58 <__assert_fail@plt+0x4acc>
   15b2c:	str	r4, [sp, #-8]!
   15b30:	str	lr, [sp, #4]
   15b34:	bl	15c9c <__assert_fail@plt+0x4b10>
   15b38:	cmp	r0, #0
   15b3c:	beq	15b4c <__assert_fail@plt+0x49c0>
   15b40:	ldr	r4, [sp]
   15b44:	add	sp, sp, #4
   15b48:	pop	{pc}		; (ldr pc, [sp], #4)
   15b4c:	bl	15c58 <__assert_fail@plt+0x4acc>
   15b50:	strd	r4, [sp, #-16]!
   15b54:	mov	r4, r1
   15b58:	str	r6, [sp, #8]
   15b5c:	mov	r6, r0
   15b60:	mov	r0, r1
   15b64:	str	lr, [sp, #12]
   15b68:	bl	15d10 <__assert_fail@plt+0x4b84>
   15b6c:	subs	r5, r0, #0
   15b70:	beq	15b94 <__assert_fail@plt+0x4a08>
   15b74:	mov	r2, r4
   15b78:	mov	r1, r6
   15b7c:	bl	10f04 <memcpy@plt>
   15b80:	mov	r0, r5
   15b84:	ldrd	r4, [sp]
   15b88:	ldr	r6, [sp, #8]
   15b8c:	add	sp, sp, #12
   15b90:	pop	{pc}		; (ldr pc, [sp], #4)
   15b94:	bl	15c58 <__assert_fail@plt+0x4acc>
   15b98:	strd	r4, [sp, #-16]!
   15b9c:	mov	r4, r1
   15ba0:	str	r6, [sp, #8]
   15ba4:	mov	r6, r0
   15ba8:	mov	r0, r1
   15bac:	str	lr, [sp, #12]
   15bb0:	bl	15d10 <__assert_fail@plt+0x4b84>
   15bb4:	subs	r5, r0, #0
   15bb8:	beq	15bdc <__assert_fail@plt+0x4a50>
   15bbc:	mov	r2, r4
   15bc0:	mov	r1, r6
   15bc4:	bl	10f04 <memcpy@plt>
   15bc8:	mov	r0, r5
   15bcc:	ldrd	r4, [sp]
   15bd0:	ldr	r6, [sp, #8]
   15bd4:	add	sp, sp, #12
   15bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   15bdc:	bl	15c58 <__assert_fail@plt+0x4acc>
   15be0:	strd	r4, [sp, #-16]!
   15be4:	mov	r4, r1
   15be8:	str	r6, [sp, #8]
   15bec:	mov	r6, r0
   15bf0:	add	r0, r1, #1
   15bf4:	str	lr, [sp, #12]
   15bf8:	bl	15d10 <__assert_fail@plt+0x4b84>
   15bfc:	subs	r5, r0, #0
   15c00:	beq	15c2c <__assert_fail@plt+0x4aa0>
   15c04:	mov	r3, #0
   15c08:	mov	r1, r6
   15c0c:	mov	r2, r4
   15c10:	strb	r3, [r5, r4]
   15c14:	bl	10f04 <memcpy@plt>
   15c18:	mov	r0, r5
   15c1c:	ldrd	r4, [sp]
   15c20:	ldr	r6, [sp, #8]
   15c24:	add	sp, sp, #12
   15c28:	pop	{pc}		; (ldr pc, [sp], #4)
   15c2c:	bl	15c58 <__assert_fail@plt+0x4acc>
   15c30:	str	r4, [sp, #-8]!
   15c34:	mov	r4, r0
   15c38:	str	lr, [sp, #4]
   15c3c:	bl	11078 <strlen@plt>
   15c40:	add	r1, r0, #1
   15c44:	mov	r0, r4
   15c48:	ldr	r4, [sp]
   15c4c:	ldr	lr, [sp, #4]
   15c50:	add	sp, sp, #8
   15c54:	b	15b50 <__assert_fail@plt+0x49c4>
   15c58:	movw	r3, #33060	; 0x8124
   15c5c:	movt	r3, #2
   15c60:	str	r4, [sp, #-8]!
   15c64:	ldr	r4, [r3]
   15c68:	mov	r2, #5
   15c6c:	movw	r1, #29252	; 0x7244
   15c70:	movt	r1, #1
   15c74:	mov	r0, #0
   15c78:	str	lr, [sp, #4]
   15c7c:	bl	10f4c <dcgettext@plt>
   15c80:	mov	r3, r0
   15c84:	movw	r2, #28160	; 0x6e00
   15c88:	movt	r2, #1
   15c8c:	mov	r1, #0
   15c90:	mov	r0, r4
   15c94:	bl	10fd0 <error@plt>
   15c98:	bl	11174 <abort@plt>
   15c9c:	cmp	r1, #0
   15ca0:	cmpne	r0, #0
   15ca4:	beq	15cf0 <__assert_fail@plt+0x4b64>
   15ca8:	strd	r4, [sp, #-16]!
   15cac:	umull	r4, r5, r0, r1
   15cb0:	str	r6, [sp, #8]
   15cb4:	str	lr, [sp, #12]
   15cb8:	adds	r3, r5, #0
   15cbc:	movne	r3, #1
   15cc0:	cmp	r4, #0
   15cc4:	blt	15cd0 <__assert_fail@plt+0x4b44>
   15cc8:	cmp	r3, #0
   15ccc:	beq	15cfc <__assert_fail@plt+0x4b70>
   15cd0:	bl	11090 <__errno_location@plt>
   15cd4:	mov	r3, #12
   15cd8:	ldrd	r4, [sp]
   15cdc:	ldr	r6, [sp, #8]
   15ce0:	add	sp, sp, #12
   15ce4:	str	r3, [r0]
   15ce8:	mov	r0, #0
   15cec:	pop	{pc}		; (ldr pc, [sp], #4)
   15cf0:	mov	r1, #1
   15cf4:	mov	r0, r1
   15cf8:	b	10e98 <calloc@plt>
   15cfc:	ldrd	r4, [sp]
   15d00:	ldr	r6, [sp, #8]
   15d04:	ldr	lr, [sp, #12]
   15d08:	add	sp, sp, #16
   15d0c:	b	10e98 <calloc@plt>
   15d10:	cmp	r0, #0
   15d14:	beq	15d20 <__assert_fail@plt+0x4b94>
   15d18:	blt	15d28 <__assert_fail@plt+0x4b9c>
   15d1c:	b	10ff4 <malloc@plt>
   15d20:	mov	r0, #1
   15d24:	b	10ff4 <malloc@plt>
   15d28:	str	r4, [sp, #-8]!
   15d2c:	str	lr, [sp, #4]
   15d30:	bl	11090 <__errno_location@plt>
   15d34:	mov	r3, #12
   15d38:	ldr	r4, [sp]
   15d3c:	add	sp, sp, #4
   15d40:	str	r3, [r0]
   15d44:	mov	r0, #0
   15d48:	pop	{pc}		; (ldr pc, [sp], #4)
   15d4c:	cmp	r0, #0
   15d50:	beq	15d78 <__assert_fail@plt+0x4bec>
   15d54:	cmp	r1, #0
   15d58:	str	r4, [sp, #-8]!
   15d5c:	str	lr, [sp, #4]
   15d60:	beq	15d80 <__assert_fail@plt+0x4bf4>
   15d64:	blt	15d94 <__assert_fail@plt+0x4c08>
   15d68:	ldr	r4, [sp]
   15d6c:	ldr	lr, [sp, #4]
   15d70:	add	sp, sp, #8
   15d74:	b	10f70 <realloc@plt>
   15d78:	mov	r0, r1
   15d7c:	b	15d10 <__assert_fail@plt+0x4b84>
   15d80:	bl	12b38 <__assert_fail@plt+0x19ac>
   15d84:	ldr	r4, [sp]
   15d88:	add	sp, sp, #4
   15d8c:	mov	r0, #0
   15d90:	pop	{pc}		; (ldr pc, [sp], #4)
   15d94:	bl	11090 <__errno_location@plt>
   15d98:	mov	r3, #12
   15d9c:	str	r3, [r0]
   15da0:	b	15d84 <__assert_fail@plt+0x4bf8>
   15da4:	strd	r4, [sp, #-16]!
   15da8:	mov	r4, r0
   15dac:	str	r6, [sp, #8]
   15db0:	str	lr, [sp, #12]
   15db4:	bl	10fb8 <__fpending@plt>
   15db8:	ldr	r5, [r4]
   15dbc:	mov	r6, r0
   15dc0:	mov	r0, r4
   15dc4:	bl	15e2c <__assert_fail@plt+0x4ca0>
   15dc8:	mov	r4, r0
   15dcc:	and	r5, r5, #32
   15dd0:	cmp	r5, #0
   15dd4:	bne	15e0c <__assert_fail@plt+0x4c80>
   15dd8:	cmp	r0, #0
   15ddc:	beq	15df8 <__assert_fail@plt+0x4c6c>
   15de0:	cmp	r6, #0
   15de4:	bne	15e24 <__assert_fail@plt+0x4c98>
   15de8:	bl	11090 <__errno_location@plt>
   15dec:	ldr	r4, [r0]
   15df0:	subs	r4, r4, #9
   15df4:	mvnne	r4, #0
   15df8:	mov	r0, r4
   15dfc:	ldrd	r4, [sp]
   15e00:	ldr	r6, [sp, #8]
   15e04:	add	sp, sp, #12
   15e08:	pop	{pc}		; (ldr pc, [sp], #4)
   15e0c:	cmp	r0, #0
   15e10:	bne	15e24 <__assert_fail@plt+0x4c98>
   15e14:	bl	11090 <__errno_location@plt>
   15e18:	str	r4, [r0]
   15e1c:	mvn	r4, #0
   15e20:	b	15df8 <__assert_fail@plt+0x4c6c>
   15e24:	mvn	r4, #0
   15e28:	b	15df8 <__assert_fail@plt+0x4c6c>
   15e2c:	strd	r4, [sp, #-12]!
   15e30:	mov	r4, r0
   15e34:	str	lr, [sp, #8]
   15e38:	sub	sp, sp, #12
   15e3c:	bl	110d8 <fileno@plt>
   15e40:	cmp	r0, #0
   15e44:	mov	r0, r4
   15e48:	blt	15ecc <__assert_fail@plt+0x4d40>
   15e4c:	bl	11018 <__freading@plt>
   15e50:	cmp	r0, #0
   15e54:	bne	15e98 <__assert_fail@plt+0x4d0c>
   15e58:	mov	r0, r4
   15e5c:	bl	15ee0 <__assert_fail@plt+0x4d54>
   15e60:	cmp	r0, #0
   15e64:	beq	15ec8 <__assert_fail@plt+0x4d3c>
   15e68:	bl	11090 <__errno_location@plt>
   15e6c:	mov	r5, r0
   15e70:	mov	r0, r4
   15e74:	ldr	r4, [r5]
   15e78:	bl	110f0 <fclose@plt>
   15e7c:	cmp	r4, #0
   15e80:	mvnne	r0, #0
   15e84:	strne	r4, [r5]
   15e88:	add	sp, sp, #12
   15e8c:	ldrd	r4, [sp]
   15e90:	add	sp, sp, #8
   15e94:	pop	{pc}		; (ldr pc, [sp], #4)
   15e98:	mov	r0, r4
   15e9c:	bl	110d8 <fileno@plt>
   15ea0:	mov	r1, #1
   15ea4:	mov	r2, #0
   15ea8:	mov	r3, #0
   15eac:	str	r1, [sp]
   15eb0:	bl	10fa0 <lseek64@plt>
   15eb4:	mvn	r3, #0
   15eb8:	mvn	r2, #0
   15ebc:	cmp	r1, r3
   15ec0:	cmpeq	r0, r2
   15ec4:	bne	15e58 <__assert_fail@plt+0x4ccc>
   15ec8:	mov	r0, r4
   15ecc:	add	sp, sp, #12
   15ed0:	ldrd	r4, [sp]
   15ed4:	ldr	lr, [sp, #8]
   15ed8:	add	sp, sp, #12
   15edc:	b	110f0 <fclose@plt>
   15ee0:	str	r4, [sp, #-8]!
   15ee4:	subs	r4, r0, #0
   15ee8:	str	lr, [sp, #4]
   15eec:	sub	sp, sp, #8
   15ef0:	beq	15f0c <__assert_fail@plt+0x4d80>
   15ef4:	bl	11018 <__freading@plt>
   15ef8:	cmp	r0, #0
   15efc:	beq	15f0c <__assert_fail@plt+0x4d80>
   15f00:	ldr	r3, [r4]
   15f04:	tst	r3, #256	; 0x100
   15f08:	bne	15f24 <__assert_fail@plt+0x4d98>
   15f0c:	mov	r0, r4
   15f10:	add	sp, sp, #8
   15f14:	ldr	r4, [sp]
   15f18:	ldr	lr, [sp, #4]
   15f1c:	add	sp, sp, #8
   15f20:	b	10ec8 <fflush@plt>
   15f24:	mov	r1, #1
   15f28:	mov	r2, #0
   15f2c:	mov	r3, #0
   15f30:	mov	r0, r4
   15f34:	str	r1, [sp]
   15f38:	bl	15f40 <__assert_fail@plt+0x4db4>
   15f3c:	b	15f0c <__assert_fail@plt+0x4d80>
   15f40:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15f44:	mov	r4, r0
   15f48:	ldr	ip, [r0, #4]
   15f4c:	strd	r6, [sp, #8]
   15f50:	str	lr, [sp, #20]
   15f54:	ldr	lr, [r0, #8]
   15f58:	str	r8, [sp, #16]
   15f5c:	sub	sp, sp, #8
   15f60:	ldr	r5, [sp, #32]
   15f64:	cmp	lr, ip
   15f68:	beq	15f90 <__assert_fail@plt+0x4e04>
   15f6c:	mov	r0, r4
   15f70:	str	r5, [sp, #32]
   15f74:	add	sp, sp, #8
   15f78:	ldrd	r4, [sp]
   15f7c:	ldrd	r6, [sp, #8]
   15f80:	ldr	r8, [sp, #16]
   15f84:	ldr	lr, [sp, #20]
   15f88:	add	sp, sp, #24
   15f8c:	b	110fc <fseeko64@plt>
   15f90:	ldr	ip, [r0, #16]
   15f94:	ldr	lr, [r0, #20]
   15f98:	cmp	lr, ip
   15f9c:	bne	15f6c <__assert_fail@plt+0x4de0>
   15fa0:	ldr	r8, [r0, #36]	; 0x24
   15fa4:	cmp	r8, #0
   15fa8:	bne	15f6c <__assert_fail@plt+0x4de0>
   15fac:	mov	r6, r2
   15fb0:	mov	r7, r3
   15fb4:	bl	110d8 <fileno@plt>
   15fb8:	mov	r2, r6
   15fbc:	mov	r3, r7
   15fc0:	str	r5, [sp]
   15fc4:	bl	10fa0 <lseek64@plt>
   15fc8:	mvn	r3, #0
   15fcc:	mvn	r2, #0
   15fd0:	cmp	r1, r3
   15fd4:	cmpeq	r0, r2
   15fd8:	beq	16008 <__assert_fail@plt+0x4e7c>
   15fdc:	ldr	r3, [r4]
   15fe0:	strd	r0, [r4, #80]	; 0x50
   15fe4:	bic	r3, r3, #16
   15fe8:	str	r3, [r4]
   15fec:	mov	r0, r8
   15ff0:	add	sp, sp, #8
   15ff4:	ldrd	r4, [sp]
   15ff8:	ldrd	r6, [sp, #8]
   15ffc:	ldr	r8, [sp, #16]
   16000:	add	sp, sp, #20
   16004:	pop	{pc}		; (ldr pc, [sp], #4)
   16008:	mvn	r8, #0
   1600c:	b	15fec <__assert_fail@plt+0x4e60>
   16010:	mov	r0, #14
   16014:	str	r4, [sp, #-8]!
   16018:	str	lr, [sp, #4]
   1601c:	bl	1112c <nl_langinfo@plt>
   16020:	cmp	r0, #0
   16024:	beq	16048 <__assert_fail@plt+0x4ebc>
   16028:	ldrb	r2, [r0]
   1602c:	movw	r3, #29272	; 0x7258
   16030:	movt	r3, #1
   16034:	ldr	r4, [sp]
   16038:	add	sp, sp, #4
   1603c:	cmp	r2, #0
   16040:	moveq	r0, r3
   16044:	pop	{pc}		; (ldr pc, [sp], #4)
   16048:	ldr	r4, [sp]
   1604c:	add	sp, sp, #4
   16050:	movw	r0, #29272	; 0x7258
   16054:	movt	r0, #1
   16058:	pop	{pc}		; (ldr pc, [sp], #4)
   1605c:	strd	r4, [sp, #-20]!	; 0xffffffec
   16060:	mov	r5, r2
   16064:	strd	r6, [sp, #8]
   16068:	subs	r6, r0, #0
   1606c:	mov	r7, r1
   16070:	str	lr, [sp, #16]
   16074:	sub	sp, sp, #12
   16078:	addeq	r6, sp, #4
   1607c:	mov	r0, r6
   16080:	bl	10fc4 <mbrtowc@plt>
   16084:	cmp	r5, #0
   16088:	cmnne	r0, #3
   1608c:	mov	r4, r0
   16090:	bhi	160ac <__assert_fail@plt+0x4f20>
   16094:	mov	r0, r4
   16098:	add	sp, sp, #12
   1609c:	ldrd	r4, [sp]
   160a0:	ldrd	r6, [sp, #8]
   160a4:	add	sp, sp, #16
   160a8:	pop	{pc}		; (ldr pc, [sp], #4)
   160ac:	mov	r0, #0
   160b0:	bl	12b98 <__assert_fail@plt+0x1a0c>
   160b4:	cmp	r0, #0
   160b8:	bne	16094 <__assert_fail@plt+0x4f08>
   160bc:	ldrb	r3, [r7]
   160c0:	mov	r4, #1
   160c4:	str	r3, [r6]
   160c8:	b	16094 <__assert_fail@plt+0x4f08>
   160cc:	umull	r2, r3, r1, r2
   160d0:	cmp	r3, #0
   160d4:	bne	160e0 <__assert_fail@plt+0x4f54>
   160d8:	mov	r1, r2
   160dc:	b	15d4c <__assert_fail@plt+0x4bc0>
   160e0:	str	r4, [sp, #-8]!
   160e4:	str	lr, [sp, #4]
   160e8:	bl	11090 <__errno_location@plt>
   160ec:	mov	r3, #12
   160f0:	ldr	r4, [sp]
   160f4:	add	sp, sp, #4
   160f8:	str	r3, [r0]
   160fc:	mov	r0, #0
   16100:	pop	{pc}		; (ldr pc, [sp], #4)
   16104:	cmp	r3, #0
   16108:	cmpeq	r2, #0
   1610c:	bne	16130 <__assert_fail@plt+0x4fa4>
   16110:	cmp	r1, #0
   16114:	movlt	r1, #-2147483648	; 0x80000000
   16118:	movlt	r0, #0
   1611c:	blt	1612c <__assert_fail@plt+0x4fa0>
   16120:	cmpeq	r0, #0
   16124:	mvnne	r1, #-2147483648	; 0x80000000
   16128:	mvnne	r0, #0
   1612c:	b	16214 <__assert_fail@plt+0x5088>
   16130:	sub	sp, sp, #8
   16134:	push	{sp, lr}
   16138:	cmp	r1, #0
   1613c:	blt	1615c <__assert_fail@plt+0x4fd0>
   16140:	cmp	r3, #0
   16144:	blt	16190 <__assert_fail@plt+0x5004>
   16148:	bl	16224 <__assert_fail@plt+0x5098>
   1614c:	ldr	lr, [sp, #4]
   16150:	add	sp, sp, #8
   16154:	pop	{r2, r3}
   16158:	bx	lr
   1615c:	rsbs	r0, r0, #0
   16160:	sbc	r1, r1, r1, lsl #1
   16164:	cmp	r3, #0
   16168:	blt	161b4 <__assert_fail@plt+0x5028>
   1616c:	bl	16224 <__assert_fail@plt+0x5098>
   16170:	ldr	lr, [sp, #4]
   16174:	add	sp, sp, #8
   16178:	pop	{r2, r3}
   1617c:	rsbs	r0, r0, #0
   16180:	sbc	r1, r1, r1, lsl #1
   16184:	rsbs	r2, r2, #0
   16188:	sbc	r3, r3, r3, lsl #1
   1618c:	bx	lr
   16190:	rsbs	r2, r2, #0
   16194:	sbc	r3, r3, r3, lsl #1
   16198:	bl	16224 <__assert_fail@plt+0x5098>
   1619c:	ldr	lr, [sp, #4]
   161a0:	add	sp, sp, #8
   161a4:	pop	{r2, r3}
   161a8:	rsbs	r0, r0, #0
   161ac:	sbc	r1, r1, r1, lsl #1
   161b0:	bx	lr
   161b4:	rsbs	r2, r2, #0
   161b8:	sbc	r3, r3, r3, lsl #1
   161bc:	bl	16224 <__assert_fail@plt+0x5098>
   161c0:	ldr	lr, [sp, #4]
   161c4:	add	sp, sp, #8
   161c8:	pop	{r2, r3}
   161cc:	rsbs	r2, r2, #0
   161d0:	sbc	r3, r3, r3, lsl #1
   161d4:	bx	lr
   161d8:	cmp	r3, #0
   161dc:	cmpeq	r2, #0
   161e0:	bne	161f8 <__assert_fail@plt+0x506c>
   161e4:	cmp	r1, #0
   161e8:	cmpeq	r0, #0
   161ec:	mvnne	r1, #0
   161f0:	mvnne	r0, #0
   161f4:	b	16214 <__assert_fail@plt+0x5088>
   161f8:	sub	sp, sp, #8
   161fc:	push	{sp, lr}
   16200:	bl	16224 <__assert_fail@plt+0x5098>
   16204:	ldr	lr, [sp, #4]
   16208:	add	sp, sp, #8
   1620c:	pop	{r2, r3}
   16210:	bx	lr
   16214:	push	{r1, lr}
   16218:	mov	r0, #8
   1621c:	bl	10eb0 <raise@plt>
   16220:	pop	{r1, pc}
   16224:	cmp	r1, r3
   16228:	cmpeq	r0, r2
   1622c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16230:	mov	r4, r0
   16234:	movcc	r0, #0
   16238:	mov	r5, r1
   1623c:	ldr	lr, [sp, #36]	; 0x24
   16240:	movcc	r1, r0
   16244:	bcc	16340 <__assert_fail@plt+0x51b4>
   16248:	cmp	r3, #0
   1624c:	clzeq	ip, r2
   16250:	clzne	ip, r3
   16254:	addeq	ip, ip, #32
   16258:	cmp	r5, #0
   1625c:	clzeq	r1, r4
   16260:	addeq	r1, r1, #32
   16264:	clzne	r1, r5
   16268:	sub	ip, ip, r1
   1626c:	sub	sl, ip, #32
   16270:	lsl	r9, r3, ip
   16274:	rsb	fp, ip, #32
   16278:	orr	r9, r9, r2, lsl sl
   1627c:	orr	r9, r9, r2, lsr fp
   16280:	lsl	r8, r2, ip
   16284:	cmp	r5, r9
   16288:	cmpeq	r4, r8
   1628c:	movcc	r0, #0
   16290:	movcc	r1, r0
   16294:	bcc	162b0 <__assert_fail@plt+0x5124>
   16298:	mov	r0, #1
   1629c:	subs	r4, r4, r8
   162a0:	lsl	r1, r0, sl
   162a4:	orr	r1, r1, r0, lsr fp
   162a8:	lsl	r0, r0, ip
   162ac:	sbc	r5, r5, r9
   162b0:	cmp	ip, #0
   162b4:	beq	16340 <__assert_fail@plt+0x51b4>
   162b8:	lsr	r6, r8, #1
   162bc:	orr	r6, r6, r9, lsl #31
   162c0:	lsr	r7, r9, #1
   162c4:	mov	r2, ip
   162c8:	b	162ec <__assert_fail@plt+0x5160>
   162cc:	subs	r3, r4, r6
   162d0:	sbc	r8, r5, r7
   162d4:	adds	r3, r3, r3
   162d8:	adc	r8, r8, r8
   162dc:	adds	r4, r3, #1
   162e0:	adc	r5, r8, #0
   162e4:	subs	r2, r2, #1
   162e8:	beq	16308 <__assert_fail@plt+0x517c>
   162ec:	cmp	r5, r7
   162f0:	cmpeq	r4, r6
   162f4:	bcs	162cc <__assert_fail@plt+0x5140>
   162f8:	adds	r4, r4, r4
   162fc:	adc	r5, r5, r5
   16300:	subs	r2, r2, #1
   16304:	bne	162ec <__assert_fail@plt+0x5160>
   16308:	lsr	r3, r4, ip
   1630c:	orr	r3, r3, r5, lsl fp
   16310:	lsr	r2, r5, ip
   16314:	orr	r3, r3, r5, lsr sl
   16318:	adds	r0, r0, r4
   1631c:	mov	r4, r3
   16320:	lsl	r3, r2, ip
   16324:	orr	r3, r3, r4, lsl sl
   16328:	lsl	ip, r4, ip
   1632c:	orr	r3, r3, r4, lsr fp
   16330:	adc	r1, r1, r5
   16334:	subs	r0, r0, ip
   16338:	mov	r5, r2
   1633c:	sbc	r1, r1, r3
   16340:	cmp	lr, #0
   16344:	strdne	r4, [lr]
   16348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1634c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16350:	mov	r7, r0
   16354:	ldr	r6, [pc, #72]	; 163a4 <__assert_fail@plt+0x5218>
   16358:	ldr	r5, [pc, #72]	; 163a8 <__assert_fail@plt+0x521c>
   1635c:	add	r6, pc, r6
   16360:	add	r5, pc, r5
   16364:	sub	r6, r6, r5
   16368:	mov	r8, r1
   1636c:	mov	r9, r2
   16370:	bl	10e78 <calloc@plt-0x20>
   16374:	asrs	r6, r6, #2
   16378:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1637c:	mov	r4, #0
   16380:	add	r4, r4, #1
   16384:	ldr	r3, [r5], #4
   16388:	mov	r2, r9
   1638c:	mov	r1, r8
   16390:	mov	r0, r7
   16394:	blx	r3
   16398:	cmp	r6, r4
   1639c:	bne	16380 <__assert_fail@plt+0x51f4>
   163a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   163a4:			; <UNDEFINED> instruction: 0x00011bb0
   163a8:	andeq	r1, r1, r8, lsr #23
   163ac:	bx	lr
   163b0:	ldr	r3, [pc, #12]	; 163c4 <__assert_fail@plt+0x5238>
   163b4:	mov	r1, #0
   163b8:	add	r3, pc, r3
   163bc:	ldr	r2, [r3]
   163c0:	b	110a8 <__cxa_atexit@plt>
   163c4:	andeq	r1, r1, r4, asr sp

Disassembly of section .fini:

000163c8 <.fini>:
   163c8:	push	{r3, lr}
   163cc:	pop	{r3, pc}
