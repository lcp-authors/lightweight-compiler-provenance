
../repos/coreutils/src/id:     file format elf32-littlearm


Disassembly of section .init:

00011080 <.init>:
   11080:	push	{r3, lr}
   11084:	bl	113b8 <__assert_fail@plt+0x48>
   11088:	pop	{r3, pc}

Disassembly of section .plt:

0001108c <calloc@plt-0x14>:
   1108c:	push	{lr}		; (str lr, [sp, #-4]!)
   11090:	ldr	lr, [pc, #4]	; 1109c <calloc@plt-0x4>
   11094:	add	lr, pc, lr
   11098:	ldr	pc, [lr, #8]!
   1109c:	andeq	r6, r1, r4, ror #30

000110a0 <calloc@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #90112	; 0x16000
   110a8:	ldr	pc, [ip, #3940]!	; 0xf64

000110ac <endgrent@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #90112	; 0x16000
   110b4:	ldr	pc, [ip, #3932]!	; 0xf5c

000110b8 <fputs_unlocked@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #90112	; 0x16000
   110c0:	ldr	pc, [ip, #3924]!	; 0xf54

000110c4 <raise@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #90112	; 0x16000
   110cc:	ldr	pc, [ip, #3916]!	; 0xf4c

000110d0 <getpwnam@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #90112	; 0x16000
   110d8:	ldr	pc, [ip, #3908]!	; 0xf44

000110dc <is_selinux_enabled@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #90112	; 0x16000
   110e4:	ldr	pc, [ip, #3900]!	; 0xf3c

000110e8 <strcmp@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #90112	; 0x16000
   110f0:	ldr	pc, [ip, #3892]!	; 0xf34

000110f4 <getpwuid@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #90112	; 0x16000
   110fc:	ldr	pc, [ip, #3884]!	; 0xf2c

00011100 <fflush@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #90112	; 0x16000
   11108:	ldr	pc, [ip, #3876]!	; 0xf24

0001110c <getuid@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #90112	; 0x16000
   11114:	ldr	pc, [ip, #3868]!	; 0xf1c

00011118 <free@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #90112	; 0x16000
   11120:	ldr	pc, [ip, #3860]!	; 0xf14

00011124 <_exit@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #90112	; 0x16000
   1112c:	ldr	pc, [ip, #3852]!	; 0xf0c

00011130 <memcpy@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #90112	; 0x16000
   11138:	ldr	pc, [ip, #3844]!	; 0xf04

0001113c <mbsinit@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #90112	; 0x16000
   11144:	ldr	pc, [ip, #3836]!	; 0xefc

00011148 <dcgettext@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #90112	; 0x16000
   11150:	ldr	pc, [ip, #3828]!	; 0xef4

00011154 <realloc@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #90112	; 0x16000
   1115c:	ldr	pc, [ip, #3820]!	; 0xeec

00011160 <textdomain@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #90112	; 0x16000
   11168:	ldr	pc, [ip, #3812]!	; 0xee4

0001116c <geteuid@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #90112	; 0x16000
   11174:	ldr	pc, [ip, #3804]!	; 0xedc

00011178 <iswprint@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #90112	; 0x16000
   11180:	ldr	pc, [ip, #3796]!	; 0xed4

00011184 <getegid@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #90112	; 0x16000
   1118c:	ldr	pc, [ip, #3788]!	; 0xecc

00011190 <fwrite@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #90112	; 0x16000
   11198:	ldr	pc, [ip, #3780]!	; 0xec4

0001119c <lseek64@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #90112	; 0x16000
   111a4:	ldr	pc, [ip, #3772]!	; 0xebc

000111a8 <__ctype_get_mb_cur_max@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #90112	; 0x16000
   111b0:	ldr	pc, [ip, #3764]!	; 0xeb4

000111b4 <getcon@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #90112	; 0x16000
   111bc:	ldr	pc, [ip, #3756]!	; 0xeac

000111c0 <__fpending@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #90112	; 0x16000
   111c8:	ldr	pc, [ip, #3748]!	; 0xea4

000111cc <mbrtowc@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #90112	; 0x16000
   111d4:	ldr	pc, [ip, #3740]!	; 0xe9c

000111d8 <error@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #90112	; 0x16000
   111e0:	ldr	pc, [ip, #3732]!	; 0xe94

000111e4 <getenv@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #90112	; 0x16000
   111ec:	ldr	pc, [ip, #3724]!	; 0xe8c

000111f0 <malloc@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #90112	; 0x16000
   111f8:	ldr	pc, [ip, #3716]!	; 0xe84

000111fc <__libc_start_main@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #90112	; 0x16000
   11204:	ldr	pc, [ip, #3708]!	; 0xe7c

00011208 <__freading@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #90112	; 0x16000
   11210:	ldr	pc, [ip, #3700]!	; 0xe74

00011214 <__gmon_start__@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #90112	; 0x16000
   1121c:	ldr	pc, [ip, #3692]!	; 0xe6c

00011220 <getopt_long@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #90112	; 0x16000
   11228:	ldr	pc, [ip, #3684]!	; 0xe64

0001122c <__ctype_b_loc@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #90112	; 0x16000
   11234:	ldr	pc, [ip, #3676]!	; 0xe5c

00011238 <exit@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #90112	; 0x16000
   11240:	ldr	pc, [ip, #3668]!	; 0xe54

00011244 <bcmp@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #90112	; 0x16000
   1124c:	ldr	pc, [ip, #3660]!	; 0xe4c

00011250 <strtoul@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #90112	; 0x16000
   11258:	ldr	pc, [ip, #3652]!	; 0xe44

0001125c <strlen@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #90112	; 0x16000
   11264:	ldr	pc, [ip, #3644]!	; 0xe3c

00011268 <strchr@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #90112	; 0x16000
   11270:	ldr	pc, [ip, #3636]!	; 0xe34

00011274 <__errno_location@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #90112	; 0x16000
   1127c:	ldr	pc, [ip, #3628]!	; 0xe2c

00011280 <__cxa_atexit@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #90112	; 0x16000
   11288:	ldr	pc, [ip, #3620]!	; 0xe24

0001128c <getgid@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #90112	; 0x16000
   11294:	ldr	pc, [ip, #3612]!	; 0xe1c

00011298 <getgrouplist@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #90112	; 0x16000
   112a0:	ldr	pc, [ip, #3604]!	; 0xe14

000112a4 <memset@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #90112	; 0x16000
   112ac:	ldr	pc, [ip, #3596]!	; 0xe0c

000112b0 <__printf_chk@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #90112	; 0x16000
   112b8:	ldr	pc, [ip, #3588]!	; 0xe04

000112bc <fileno@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #90112	; 0x16000
   112c4:	ldr	pc, [ip, #3580]!	; 0xdfc

000112c8 <__fprintf_chk@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #90112	; 0x16000
   112d0:	ldr	pc, [ip, #3572]!	; 0xdf4

000112d4 <fclose@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #90112	; 0x16000
   112dc:	ldr	pc, [ip, #3564]!	; 0xdec

000112e0 <fseeko64@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #90112	; 0x16000
   112e8:	ldr	pc, [ip, #3556]!	; 0xde4

000112ec <__overflow@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #90112	; 0x16000
   112f4:	ldr	pc, [ip, #3548]!	; 0xddc

000112f8 <setlocale@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #90112	; 0x16000
   11300:	ldr	pc, [ip, #3540]!	; 0xdd4

00011304 <endpwent@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #90112	; 0x16000
   1130c:	ldr	pc, [ip, #3532]!	; 0xdcc

00011310 <strrchr@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #90112	; 0x16000
   11318:	ldr	pc, [ip, #3524]!	; 0xdc4

0001131c <nl_langinfo@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #90112	; 0x16000
   11324:	ldr	pc, [ip, #3516]!	; 0xdbc

00011328 <getgroups@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #90112	; 0x16000
   11330:	ldr	pc, [ip, #3508]!	; 0xdb4

00011334 <bindtextdomain@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #90112	; 0x16000
   1133c:	ldr	pc, [ip, #3500]!	; 0xdac

00011340 <strncmp@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #90112	; 0x16000
   11348:	ldr	pc, [ip, #3492]!	; 0xda4

0001134c <abort@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #90112	; 0x16000
   11354:	ldr	pc, [ip, #3484]!	; 0xd9c

00011358 <getgrgid@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #90112	; 0x16000
   11360:	ldr	pc, [ip, #3476]!	; 0xd94

00011364 <getgrnam@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #90112	; 0x16000
   1136c:	ldr	pc, [ip, #3468]!	; 0xd8c

00011370 <__assert_fail@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #90112	; 0x16000
   11378:	ldr	pc, [ip, #3460]!	; 0xd84

Disassembly of section .text:

0001137c <.text>:
   1137c:	mov	fp, #0
   11380:	mov	lr, #0
   11384:	pop	{r1}		; (ldr r1, [sp], #4)
   11388:	mov	r2, sp
   1138c:	push	{r2}		; (str r2, [sp, #-4]!)
   11390:	push	{r0}		; (str r0, [sp, #-4]!)
   11394:	ldr	ip, [pc, #16]	; 113ac <__assert_fail@plt+0x3c>
   11398:	push	{ip}		; (str ip, [sp, #-4]!)
   1139c:	ldr	r0, [pc, #12]	; 113b0 <__assert_fail@plt+0x40>
   113a0:	ldr	r3, [pc, #12]	; 113b4 <__assert_fail@plt+0x44>
   113a4:	bl	111fc <__libc_start_main@plt>
   113a8:	bl	1134c <abort@plt>
   113ac:	andeq	r6, r1, ip, lsl #25
   113b0:	andeq	r1, r1, r8, ror #13
   113b4:	andeq	r6, r1, ip, lsr #24
   113b8:	ldr	r3, [pc, #20]	; 113d4 <__assert_fail@plt+0x64>
   113bc:	ldr	r2, [pc, #20]	; 113d8 <__assert_fail@plt+0x68>
   113c0:	add	r3, pc, r3
   113c4:	ldr	r2, [r3, r2]
   113c8:	cmp	r2, #0
   113cc:	bxeq	lr
   113d0:	b	11214 <__gmon_start__@plt>
   113d4:	andeq	r6, r1, r8, lsr ip
   113d8:	andeq	r0, r0, r0, lsl #2
   113dc:	ldr	r0, [pc, #24]	; 113fc <__assert_fail@plt+0x8c>
   113e0:	ldr	r3, [pc, #24]	; 11400 <__assert_fail@plt+0x90>
   113e4:	cmp	r3, r0
   113e8:	bxeq	lr
   113ec:	ldr	r3, [pc, #16]	; 11404 <__assert_fail@plt+0x94>
   113f0:	cmp	r3, #0
   113f4:	bxeq	lr
   113f8:	bx	r3
   113fc:	andeq	r8, r2, r0, ror #2
   11400:	andeq	r8, r2, r0, ror #2
   11404:	andeq	r0, r0, r0
   11408:	ldr	r0, [pc, #36]	; 11434 <__assert_fail@plt+0xc4>
   1140c:	ldr	r1, [pc, #36]	; 11438 <__assert_fail@plt+0xc8>
   11410:	sub	r1, r1, r0
   11414:	asr	r1, r1, #2
   11418:	add	r1, r1, r1, lsr #31
   1141c:	asrs	r1, r1, #1
   11420:	bxeq	lr
   11424:	ldr	r3, [pc, #16]	; 1143c <__assert_fail@plt+0xcc>
   11428:	cmp	r3, #0
   1142c:	bxeq	lr
   11430:	bx	r3
   11434:	andeq	r8, r2, r0, ror #2
   11438:	andeq	r8, r2, r0, ror #2
   1143c:	andeq	r0, r0, r0
   11440:	push	{r4, lr}
   11444:	ldr	r4, [pc, #24]	; 11464 <__assert_fail@plt+0xf4>
   11448:	ldrb	r3, [r4]
   1144c:	cmp	r3, #0
   11450:	popne	{r4, pc}
   11454:	bl	113dc <__assert_fail@plt+0x6c>
   11458:	mov	r3, #1
   1145c:	strb	r3, [r4]
   11460:	pop	{r4, pc}
   11464:	andeq	r8, r2, r8, ror r1
   11468:	b	11408 <__assert_fail@plt+0x98>
   1146c:	push	{fp, lr}
   11470:	mov	fp, sp
   11474:	sub	sp, sp, #56	; 0x38
   11478:	mov	r4, r0
   1147c:	cmp	r0, #0
   11480:	bne	116a4 <__assert_fail@plt+0x334>
   11484:	movw	r1, #27867	; 0x6cdb
   11488:	mov	r0, #0
   1148c:	mov	r2, #5
   11490:	movt	r1, #1
   11494:	bl	11148 <dcgettext@plt>
   11498:	mov	r1, r0
   1149c:	movw	r0, #33248	; 0x81e0
   114a0:	movt	r0, #2
   114a4:	ldr	r2, [r0]
   114a8:	mov	r0, #1
   114ac:	bl	112b0 <__printf_chk@plt>
   114b0:	movw	r1, #27900	; 0x6cfc
   114b4:	mov	r0, #0
   114b8:	mov	r2, #5
   114bc:	movt	r1, #1
   114c0:	bl	11148 <dcgettext@plt>
   114c4:	movw	r7, #33140	; 0x8174
   114c8:	movt	r7, #2
   114cc:	ldr	r1, [r7]
   114d0:	bl	110b8 <fputs_unlocked@plt>
   114d4:	movw	r1, #28008	; 0x6d68
   114d8:	mov	r0, #0
   114dc:	mov	r2, #5
   114e0:	movt	r1, #1
   114e4:	bl	11148 <dcgettext@plt>
   114e8:	ldr	r1, [r7]
   114ec:	bl	110b8 <fputs_unlocked@plt>
   114f0:	movw	r1, #28529	; 0x6f71
   114f4:	mov	r0, #0
   114f8:	mov	r2, #5
   114fc:	movt	r1, #1
   11500:	bl	11148 <dcgettext@plt>
   11504:	ldr	r1, [r7]
   11508:	bl	110b8 <fputs_unlocked@plt>
   1150c:	movw	r1, #28574	; 0x6f9e
   11510:	mov	r0, #0
   11514:	mov	r2, #5
   11518:	movt	r1, #1
   1151c:	bl	11148 <dcgettext@plt>
   11520:	ldr	r1, [r7]
   11524:	bl	110b8 <fputs_unlocked@plt>
   11528:	movw	r1, #28628	; 0x6fd4
   1152c:	mov	r0, #0
   11530:	mov	r2, #5
   11534:	movt	r1, #1
   11538:	bl	11148 <dcgettext@plt>
   1153c:	ldr	r1, [r7]
   11540:	bl	110b8 <fputs_unlocked@plt>
   11544:	movw	r0, #29848	; 0x7498
   11548:	mov	r2, #48	; 0x30
   1154c:	mov	r6, sp
   11550:	movw	r5, #28699	; 0x701b
   11554:	movt	r0, #1
   11558:	movt	r5, #1
   1155c:	add	r1, r0, #32
   11560:	add	r3, r0, #16
   11564:	vld1.64	{d18-d19}, [r0], r2
   11568:	vld1.64	{d16-d17}, [r1]
   1156c:	vld1.64	{d20-d21}, [r3]
   11570:	vldr	d22, [r0]
   11574:	add	r1, r6, #32
   11578:	add	r0, r6, #16
   1157c:	vst1.64	{d16-d17}, [r1]
   11580:	movw	r1, #29178	; 0x71fa
   11584:	vst1.64	{d20-d21}, [r0]
   11588:	mov	r0, r6
   1158c:	movt	r1, #1
   11590:	vst1.64	{d18-d19}, [r0], r2
   11594:	vstr	d22, [r0]
   11598:	mov	r0, r5
   1159c:	bl	110e8 <strcmp@plt>
   115a0:	cmp	r0, #0
   115a4:	ldrne	r1, [r6, #8]!
   115a8:	cmpne	r1, #0
   115ac:	bne	11598 <__assert_fail@plt+0x228>
   115b0:	movw	r1, #29273	; 0x7259
   115b4:	ldr	r6, [r6, #4]
   115b8:	mov	r0, #0
   115bc:	mov	r2, #5
   115c0:	movt	r1, #1
   115c4:	bl	11148 <dcgettext@plt>
   115c8:	movw	r2, #28790	; 0x7076
   115cc:	movw	r3, #29296	; 0x7270
   115d0:	mov	r1, r0
   115d4:	mov	r0, #1
   115d8:	movt	r2, #1
   115dc:	movt	r3, #1
   115e0:	bl	112b0 <__printf_chk@plt>
   115e4:	cmp	r6, #0
   115e8:	mov	r0, #5
   115ec:	mov	r1, #0
   115f0:	moveq	r6, r5
   115f4:	bl	112f8 <setlocale@plt>
   115f8:	cmp	r0, #0
   115fc:	beq	11634 <__assert_fail@plt+0x2c4>
   11600:	movw	r1, #29336	; 0x7298
   11604:	mov	r2, #3
   11608:	movt	r1, #1
   1160c:	bl	11340 <strncmp@plt>
   11610:	cmp	r0, #0
   11614:	beq	11634 <__assert_fail@plt+0x2c4>
   11618:	movw	r1, #29340	; 0x729c
   1161c:	mov	r0, #0
   11620:	mov	r2, #5
   11624:	movt	r1, #1
   11628:	bl	11148 <dcgettext@plt>
   1162c:	ldr	r1, [r7]
   11630:	bl	110b8 <fputs_unlocked@plt>
   11634:	movw	r1, #29411	; 0x72e3
   11638:	mov	r0, #0
   1163c:	mov	r2, #5
   11640:	movt	r1, #1
   11644:	bl	11148 <dcgettext@plt>
   11648:	movw	r2, #29296	; 0x7270
   1164c:	mov	r1, r0
   11650:	mov	r0, #1
   11654:	mov	r3, r5
   11658:	movt	r2, #1
   1165c:	bl	112b0 <__printf_chk@plt>
   11660:	movw	r1, #29438	; 0x72fe
   11664:	mov	r0, #0
   11668:	mov	r2, #5
   1166c:	movt	r1, #1
   11670:	bl	11148 <dcgettext@plt>
   11674:	mov	r1, r0
   11678:	movw	r0, #29206	; 0x7216
   1167c:	movw	r3, #28007	; 0x6d67
   11680:	cmp	r6, r5
   11684:	mov	r2, r6
   11688:	movt	r0, #1
   1168c:	movt	r3, #1
   11690:	moveq	r3, r0
   11694:	mov	r0, #1
   11698:	bl	112b0 <__printf_chk@plt>
   1169c:	mov	r0, r4
   116a0:	bl	11238 <exit@plt>
   116a4:	movw	r0, #33136	; 0x8170
   116a8:	movw	r1, #27828	; 0x6cb4
   116ac:	mov	r2, #5
   116b0:	movt	r0, #2
   116b4:	movt	r1, #1
   116b8:	ldr	r5, [r0]
   116bc:	mov	r0, #0
   116c0:	bl	11148 <dcgettext@plt>
   116c4:	mov	r2, r0
   116c8:	movw	r0, #33248	; 0x81e0
   116cc:	mov	r1, #1
   116d0:	movt	r0, #2
   116d4:	ldr	r3, [r0]
   116d8:	mov	r0, r5
   116dc:	bl	112c8 <__fprintf_chk@plt>
   116e0:	mov	r0, r4
   116e4:	bl	11238 <exit@plt>
   116e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116ec:	add	fp, sp, #28
   116f0:	sub	sp, sp, #36	; 0x24
   116f4:	mov	r4, r1
   116f8:	mov	r5, r0
   116fc:	bl	110dc <is_selinux_enabled@plt>
   11700:	mov	r7, r0
   11704:	ldr	r0, [r4]
   11708:	bl	12aa0 <__assert_fail@plt+0x1730>
   1170c:	movw	r1, #28007	; 0x6d67
   11710:	mov	r0, #6
   11714:	movt	r1, #1
   11718:	bl	112f8 <setlocale@plt>
   1171c:	movw	r6, #28794	; 0x707a
   11720:	movw	r1, #28702	; 0x701e
   11724:	movt	r6, #1
   11728:	movt	r1, #1
   1172c:	mov	r0, r6
   11730:	bl	11334 <bindtextdomain@plt>
   11734:	mov	r0, r6
   11738:	bl	11160 <textdomain@plt>
   1173c:	movw	r0, #10544	; 0x2930
   11740:	movt	r0, #1
   11744:	bl	16c90 <__assert_fail@plt+0x5920>
   11748:	mov	r9, #0
   1174c:	cmp	r7, #0
   11750:	str	r7, [sp, #32]
   11754:	ble	118f4 <__assert_fail@plt+0x584>
   11758:	movw	r0, #33148	; 0x817c
   1175c:	movw	r7, #28726	; 0x7036
   11760:	movw	r6, #29688	; 0x73f8
   11764:	mov	sl, #1
   11768:	movt	r0, #2
   1176c:	movt	r7, #1
   11770:	movt	r6, #1
   11774:	add	r1, r0, #1
   11778:	add	r8, r0, #6
   1177c:	str	r1, [sp, #28]
   11780:	add	r1, r0, #2
   11784:	str	r1, [sp, #24]
   11788:	add	r1, r0, #3
   1178c:	str	r1, [sp, #20]
   11790:	add	r1, r0, #4
   11794:	add	r0, r0, #5
   11798:	str	r1, [sp, #16]
   1179c:	str	r0, [sp, #12]
   117a0:	b	117b0 <__assert_fail@plt+0x440>
   117a4:	movw	r0, #33148	; 0x817c
   117a8:	movt	r0, #2
   117ac:	strb	sl, [r0]
   117b0:	mov	r0, r5
   117b4:	mov	r1, r4
   117b8:	mov	r2, r7
   117bc:	mov	r3, r6
   117c0:	str	r9, [sp]
   117c4:	bl	11220 <getopt_long@plt>
   117c8:	cmp	r0, #70	; 0x46
   117cc:	ble	11a80 <__assert_fail@plt+0x710>
   117d0:	sub	r1, r0, #71	; 0x47
   117d4:	cmp	r1, #51	; 0x33
   117d8:	bhi	11e64 <__assert_fail@plt+0xaf4>
   117dc:	add	r2, pc, #4
   117e0:	mov	r0, r8
   117e4:	ldr	pc, [r2, r1, lsl #2]
   117e8:	andeq	r1, r1, ip, lsr #15
   117ec:	andeq	r1, r1, r4, ror #28
   117f0:	andeq	r1, r1, r4, ror #28
   117f4:	andeq	r1, r1, r4, ror #28
   117f8:	andeq	r1, r1, r4, ror #28
   117fc:	andeq	r1, r1, r4, ror #28
   11800:	andeq	r1, r1, r4, ror #28
   11804:	andeq	r1, r1, r4, ror #28
   11808:	andeq	r1, r1, r4, ror #28
   1180c:	andeq	r1, r1, r4, ror #28
   11810:	andeq	r1, r1, r4, ror #28
   11814:	andeq	r1, r1, r4, ror #28
   11818:	andeq	r1, r1, r4, ror #28
   1181c:	andeq	r1, r1, r4, ror #28
   11820:	andeq	r1, r1, r4, ror #28
   11824:	andeq	r1, r1, r4, ror #28
   11828:	andeq	r1, r1, r4, ror #28
   1182c:	andeq	r1, r1, r4, ror #28
   11830:	andeq	r1, r1, r4, ror #28
   11834:	andeq	r1, r1, r4, lsr #15
   11838:	andeq	r1, r1, r4, ror #28
   1183c:	andeq	r1, r1, r4, ror #28
   11840:	andeq	r1, r1, r4, ror #28
   11844:	andeq	r1, r1, r4, ror #28
   11848:	andeq	r1, r1, r4, ror #28
   1184c:	andeq	r1, r1, r4, ror #28
   11850:			; <UNDEFINED> instruction: 0x000117b0
   11854:	andeq	r1, r1, r4, ror #28
   11858:	andeq	r1, r1, r4, ror #28
   1185c:	andeq	r1, r1, r4, ror #28
   11860:	andeq	r1, r1, r4, ror #28
   11864:	andeq	r1, r1, r4, ror #28
   11868:			; <UNDEFINED> instruction: 0x000118b8
   1186c:	andeq	r1, r1, r4, ror #28
   11870:	andeq	r1, r1, r4, ror #28
   11874:	andeq	r1, r1, r4, ror #28
   11878:	andeq	r1, r1, r4, ror #28
   1187c:	andeq	r1, r1, r4, ror #28
   11880:	andeq	r1, r1, r4, ror #28
   11884:	andeq	r1, r1, r4, asr #17
   11888:	andeq	r1, r1, r4, ror #28
   1188c:	andeq	r1, r1, r4, ror #28
   11890:	andeq	r1, r1, r4, ror #28
   11894:	andeq	r1, r1, r8, ror #17
   11898:	andeq	r1, r1, r4, ror #28
   1189c:	andeq	r1, r1, r4, ror #28
   118a0:	ldrdeq	r1, [r1], -r0
   118a4:	andeq	r1, r1, r4, ror #28
   118a8:	andeq	r1, r1, r4, ror #28
   118ac:	andeq	r1, r1, r4, ror #28
   118b0:	andeq	r1, r1, r4, ror #28
   118b4:	ldrdeq	r1, [r1], -ip
   118b8:	ldr	r0, [sp, #28]
   118bc:	strb	sl, [r0]
   118c0:	b	117b0 <__assert_fail@plt+0x440>
   118c4:	ldr	r0, [sp, #24]
   118c8:	strb	sl, [r0]
   118cc:	b	117b0 <__assert_fail@plt+0x440>
   118d0:	ldr	r0, [sp, #16]
   118d4:	strb	sl, [r0]
   118d8:	b	117b0 <__assert_fail@plt+0x440>
   118dc:	ldr	r0, [sp, #12]
   118e0:	strb	sl, [r0]
   118e4:	b	117b0 <__assert_fail@plt+0x440>
   118e8:	ldr	r0, [sp, #20]
   118ec:	strb	sl, [r0]
   118f0:	b	117b0 <__assert_fail@plt+0x440>
   118f4:	movw	r0, #33148	; 0x817c
   118f8:	movw	r8, #28726	; 0x7036
   118fc:	movw	r6, #29688	; 0x73f8
   11900:	mov	sl, #1
   11904:	movt	r0, #2
   11908:	movt	r8, #1
   1190c:	movt	r6, #1
   11910:	add	r1, r0, #6
   11914:	add	r7, r0, #1
   11918:	str	r1, [sp, #28]
   1191c:	add	r1, r0, #2
   11920:	str	r1, [sp, #24]
   11924:	add	r1, r0, #3
   11928:	str	r1, [sp, #20]
   1192c:	add	r1, r0, #4
   11930:	add	r0, r0, #5
   11934:	str	r1, [sp, #16]
   11938:	str	r0, [sp, #12]
   1193c:	b	11948 <__assert_fail@plt+0x5d8>
   11940:	ldr	r0, [sp, #24]
   11944:	strb	sl, [r0]
   11948:	mov	r0, r5
   1194c:	mov	r1, r4
   11950:	mov	r2, r8
   11954:	mov	r3, r6
   11958:	str	r9, [sp]
   1195c:	bl	11220 <getopt_long@plt>
   11960:	cmp	r0, #70	; 0x46
   11964:	ble	11a80 <__assert_fail@plt+0x710>
   11968:	sub	r1, r0, #71	; 0x47
   1196c:	cmp	r1, #51	; 0x33
   11970:	bhi	11e64 <__assert_fail@plt+0xaf4>
   11974:	add	r2, pc, #4
   11978:	mov	r0, r7
   1197c:	ldr	pc, [r2, r1, lsl #2]
   11980:	andeq	r1, r1, r0, asr sl
   11984:	andeq	r1, r1, r4, ror #28
   11988:	andeq	r1, r1, r4, ror #28
   1198c:	andeq	r1, r1, r4, ror #28
   11990:	andeq	r1, r1, r4, ror #28
   11994:	andeq	r1, r1, r4, ror #28
   11998:	andeq	r1, r1, r4, ror #28
   1199c:	andeq	r1, r1, r4, ror #28
   119a0:	andeq	r1, r1, r4, ror #28
   119a4:	andeq	r1, r1, r4, ror #28
   119a8:	andeq	r1, r1, r4, ror #28
   119ac:	andeq	r1, r1, r4, ror #28
   119b0:	andeq	r1, r1, r4, ror #28
   119b4:	andeq	r1, r1, r4, ror #28
   119b8:	andeq	r1, r1, r4, ror #28
   119bc:	andeq	r1, r1, r4, ror #28
   119c0:	andeq	r1, r1, r4, ror #28
   119c4:	andeq	r1, r1, r4, ror #28
   119c8:	andeq	r1, r1, r4, ror #28
   119cc:	andeq	r1, r1, ip, ror #28
   119d0:	andeq	r1, r1, r4, ror #28
   119d4:	andeq	r1, r1, r4, ror #28
   119d8:	andeq	r1, r1, r4, ror #28
   119dc:	andeq	r1, r1, r4, ror #28
   119e0:	andeq	r1, r1, r4, ror #28
   119e4:	andeq	r1, r1, r4, ror #28
   119e8:	andeq	r1, r1, r8, asr #18
   119ec:	andeq	r1, r1, r4, ror #28
   119f0:	andeq	r1, r1, r4, ror #28
   119f4:	andeq	r1, r1, r4, ror #28
   119f8:	andeq	r1, r1, r4, ror #28
   119fc:	andeq	r1, r1, r4, ror #28
   11a00:	andeq	r1, r1, r4, asr #18
   11a04:	andeq	r1, r1, r4, ror #28
   11a08:	andeq	r1, r1, r4, ror #28
   11a0c:	andeq	r1, r1, r4, ror #28
   11a10:	andeq	r1, r1, r4, ror #28
   11a14:	andeq	r1, r1, r4, ror #28
   11a18:	andeq	r1, r1, r4, ror #28
   11a1c:	andeq	r1, r1, r0, asr #18
   11a20:	andeq	r1, r1, r4, ror #28
   11a24:	andeq	r1, r1, r4, ror #28
   11a28:	andeq	r1, r1, r4, ror #28
   11a2c:	andeq	r1, r1, r4, ror sl
   11a30:	andeq	r1, r1, r4, ror #28
   11a34:	andeq	r1, r1, r4, ror #28
   11a38:	andeq	r1, r1, r8, ror #20
   11a3c:	andeq	r1, r1, r4, ror #28
   11a40:	andeq	r1, r1, r4, ror #28
   11a44:	andeq	r1, r1, r4, ror #28
   11a48:	andeq	r1, r1, r4, ror #28
   11a4c:	andeq	r1, r1, ip, asr sl
   11a50:	ldr	r0, [sp, #28]
   11a54:	strb	sl, [r0]
   11a58:	b	11948 <__assert_fail@plt+0x5d8>
   11a5c:	ldr	r0, [sp, #12]
   11a60:	strb	sl, [r0]
   11a64:	b	11948 <__assert_fail@plt+0x5d8>
   11a68:	ldr	r0, [sp, #16]
   11a6c:	strb	sl, [r0]
   11a70:	b	11948 <__assert_fail@plt+0x5d8>
   11a74:	ldr	r0, [sp, #20]
   11a78:	strb	sl, [r0]
   11a7c:	b	11948 <__assert_fail@plt+0x5d8>
   11a80:	cmn	r0, #1
   11a84:	bne	11df8 <__assert_fail@plt+0xa88>
   11a88:	movw	sl, #33128	; 0x8168
   11a8c:	movw	r8, #33148	; 0x817c
   11a90:	movt	sl, #2
   11a94:	movt	r8, #2
   11a98:	ldr	r0, [sl]
   11a9c:	ldrb	r2, [r8]
   11aa0:	subs	ip, r5, r0
   11aa4:	cmpne	r2, #0
   11aa8:	bne	11e78 <__assert_fail@plt+0xb08>
   11aac:	clz	r3, ip
   11ab0:	ldrb	r7, [r8, #4]
   11ab4:	ldrb	r6, [r8, #6]
   11ab8:	lsr	r3, r3, #5
   11abc:	and	r2, r3, r2
   11ac0:	ldrb	r3, [r8, #1]
   11ac4:	add	r1, r3, r7
   11ac8:	add	r1, r1, r6
   11acc:	add	r1, r1, r2
   11ad0:	cmp	r1, #2
   11ad4:	bcs	11e84 <__assert_fail@plt+0xb14>
   11ad8:	orr	r1, r6, r2
   11adc:	orr	r3, r7, r3
   11ae0:	orrs	r3, r3, r1
   11ae4:	bne	11b0c <__assert_fail@plt+0x79c>
   11ae8:	ldrb	r1, [r8, #3]
   11aec:	cmp	r1, #0
   11af0:	bne	11e90 <__assert_fail@plt+0xb20>
   11af4:	ldrb	r1, [r8, #2]
   11af8:	cmp	r1, #1
   11afc:	beq	11e90 <__assert_fail@plt+0xb20>
   11b00:	ldrb	r1, [r8, #5]
   11b04:	cmp	r1, #1
   11b08:	beq	11e9c <__assert_fail@plt+0xb2c>
   11b0c:	cmp	ip, #0
   11b10:	beq	11c30 <__assert_fail@plt+0x8c0>
   11b14:	subs	r1, ip, #1
   11b18:	movwne	r1, #1
   11b1c:	cmp	r0, r5
   11b20:	strb	r1, [r8, #7]
   11b24:	bcs	11de0 <__assert_fail@plt+0xa70>
   11b28:	movw	r1, #33148	; 0x817c
   11b2c:	mov	r8, #0
   11b30:	movt	r1, #2
   11b34:	add	r9, r1, #12
   11b38:	ldr	r0, [r4, r0, lsl #2]
   11b3c:	ldrb	r1, [r0]
   11b40:	cmp	r1, #0
   11b44:	bne	11bb8 <__assert_fail@plt+0x848>
   11b48:	bl	11274 <__errno_location@plt>
   11b4c:	movw	r1, #29071	; 0x718f
   11b50:	ldr	r6, [r0]
   11b54:	mov	r0, #0
   11b58:	mov	r2, #5
   11b5c:	movt	r1, #1
   11b60:	bl	11148 <dcgettext@plt>
   11b64:	mov	r7, r0
   11b68:	ldr	r0, [sl]
   11b6c:	ldr	r0, [r4, r0, lsl #2]
   11b70:	bl	14a64 <__assert_fail@plt+0x36f4>
   11b74:	mov	r3, r0
   11b78:	mov	r0, #0
   11b7c:	mov	r1, r6
   11b80:	mov	r2, r7
   11b84:	bl	111d8 <error@plt>
   11b88:	movw	r0, #33040	; 0x8110
   11b8c:	movt	r0, #2
   11b90:	strb	r8, [r0]
   11b94:	ldr	r0, [sl]
   11b98:	add	r0, r0, #1
   11b9c:	cmp	r0, r5
   11ba0:	str	r0, [sl]
   11ba4:	bcs	11de0 <__assert_fail@plt+0xa70>
   11ba8:	ldr	r0, [r4, r0, lsl #2]
   11bac:	ldrb	r1, [r0]
   11bb0:	cmp	r1, #0
   11bb4:	beq	11b48 <__assert_fail@plt+0x7d8>
   11bb8:	mov	r1, r9
   11bbc:	mov	r2, #0
   11bc0:	mov	r3, #0
   11bc4:	str	r8, [sp]
   11bc8:	bl	14a7c <__assert_fail@plt+0x370c>
   11bcc:	cmp	r0, #0
   11bd0:	bne	11b48 <__assert_fail@plt+0x7d8>
   11bd4:	movw	r0, #33148	; 0x817c
   11bd8:	movt	r0, #2
   11bdc:	ldr	r0, [r0, #12]
   11be0:	bl	110f4 <getpwuid@plt>
   11be4:	cmp	r0, #0
   11be8:	beq	11b48 <__assert_fail@plt+0x7d8>
   11bec:	mov	r6, r0
   11bf0:	ldr	r0, [r0]
   11bf4:	bl	15a34 <__assert_fail@plt+0x46c4>
   11bf8:	mov	r7, r0
   11bfc:	ldr	r0, [r6, #8]
   11c00:	movw	r1, #33148	; 0x817c
   11c04:	movt	r1, #2
   11c08:	str	r0, [r1, #12]
   11c0c:	str	r0, [r1, #16]
   11c10:	ldr	r0, [r6, #12]
   11c14:	str	r0, [r1, #20]
   11c18:	str	r0, [r1, #24]
   11c1c:	mov	r0, r7
   11c20:	bl	11f20 <__assert_fail@plt+0xbb0>
   11c24:	mov	r0, r7
   11c28:	bl	12a1c <__assert_fail@plt+0x16ac>
   11c2c:	b	11b94 <__assert_fail@plt+0x824>
   11c30:	cmp	r2, #0
   11c34:	bne	11c54 <__assert_fail@plt+0x8e4>
   11c38:	cmp	r3, #0
   11c3c:	bne	11c7c <__assert_fail@plt+0x90c>
   11c40:	movw	r0, #29029	; 0x7165
   11c44:	movt	r0, #1
   11c48:	bl	111e4 <getenv@plt>
   11c4c:	cmp	r0, #0
   11c50:	bne	11c7c <__assert_fail@plt+0x90c>
   11c54:	ldr	r0, [sp, #32]
   11c58:	cmp	r0, #1
   11c5c:	blt	11c7c <__assert_fail@plt+0x90c>
   11c60:	add	r0, r8, #8
   11c64:	bl	111b4 <getcon@plt>
   11c68:	cmp	r0, #0
   11c6c:	beq	11c7c <__assert_fail@plt+0x90c>
   11c70:	ldrb	r0, [r8]
   11c74:	cmp	r0, #1
   11c78:	beq	11ec0 <__assert_fail@plt+0xb50>
   11c7c:	ldrb	r0, [r8, #4]
   11c80:	cmp	r0, #1
   11c84:	bne	11ccc <__assert_fail@plt+0x95c>
   11c88:	ldrb	r0, [r8, #3]
   11c8c:	cmp	r0, #0
   11c90:	bne	11d30 <__assert_fail@plt+0x9c0>
   11c94:	bl	11274 <__errno_location@plt>
   11c98:	mov	r4, r0
   11c9c:	mov	r0, #0
   11ca0:	str	r0, [r4]
   11ca4:	bl	1116c <geteuid@plt>
   11ca8:	cmn	r0, #1
   11cac:	str	r0, [r8, #12]
   11cb0:	bne	11cf0 <__assert_fail@plt+0x980>
   11cb4:	ldr	r4, [r4]
   11cb8:	cmp	r4, #0
   11cbc:	beq	11cf0 <__assert_fail@plt+0x980>
   11cc0:	movw	r1, #29088	; 0x71a0
   11cc4:	movt	r1, #1
   11cc8:	b	11f04 <__assert_fail@plt+0xb94>
   11ccc:	ldrb	r0, [r8, #1]
   11cd0:	cmp	r0, #0
   11cd4:	bne	11d8c <__assert_fail@plt+0xa1c>
   11cd8:	ldrb	r0, [r8, #6]
   11cdc:	cmp	r0, #0
   11ce0:	bne	11d30 <__assert_fail@plt+0x9c0>
   11ce4:	ldrb	r0, [r8]
   11ce8:	cmp	r0, #0
   11cec:	beq	11c94 <__assert_fail@plt+0x924>
   11cf0:	ldrb	r0, [r8, #4]
   11cf4:	cmp	r0, #1
   11cf8:	bne	11d0c <__assert_fail@plt+0x99c>
   11cfc:	ldrb	r0, [r8, #3]
   11d00:	cmp	r0, #0
   11d04:	bne	11d30 <__assert_fail@plt+0x9c0>
   11d08:	b	11dd8 <__assert_fail@plt+0xa68>
   11d0c:	ldrb	r0, [r8, #1]
   11d10:	cmp	r0, #0
   11d14:	bne	11d8c <__assert_fail@plt+0xa1c>
   11d18:	ldrb	r0, [r8, #6]
   11d1c:	cmp	r0, #0
   11d20:	bne	11d30 <__assert_fail@plt+0x9c0>
   11d24:	ldrb	r0, [r8]
   11d28:	cmp	r0, #0
   11d2c:	bne	11d5c <__assert_fail@plt+0x9ec>
   11d30:	bl	11274 <__errno_location@plt>
   11d34:	mov	r4, r0
   11d38:	mov	r0, #0
   11d3c:	str	r0, [r4]
   11d40:	bl	1110c <getuid@plt>
   11d44:	cmn	r0, #1
   11d48:	str	r0, [r8, #16]
   11d4c:	bne	11d5c <__assert_fail@plt+0x9ec>
   11d50:	ldr	r4, [r4]
   11d54:	cmp	r4, #0
   11d58:	bne	11efc <__assert_fail@plt+0xb8c>
   11d5c:	ldrb	r0, [r8, #4]
   11d60:	cmp	r0, #0
   11d64:	bne	11dd8 <__assert_fail@plt+0xa68>
   11d68:	ldrb	r0, [r8, #1]
   11d6c:	cmp	r0, #0
   11d70:	bne	11d8c <__assert_fail@plt+0xa1c>
   11d74:	ldrb	r0, [r8, #6]
   11d78:	cmp	r0, #0
   11d7c:	bne	11d8c <__assert_fail@plt+0xa1c>
   11d80:	ldrb	r0, [r8]
   11d84:	cmp	r0, #0
   11d88:	bne	11dd8 <__assert_fail@plt+0xa68>
   11d8c:	bl	11274 <__errno_location@plt>
   11d90:	mov	r6, #0
   11d94:	mov	r4, r0
   11d98:	str	r6, [r0]
   11d9c:	bl	11184 <getegid@plt>
   11da0:	cmn	r0, #1
   11da4:	str	r0, [r8, #20]
   11da8:	bne	11db8 <__assert_fail@plt+0xa48>
   11dac:	ldr	r5, [r4]
   11db0:	cmp	r5, #0
   11db4:	bne	11ecc <__assert_fail@plt+0xb5c>
   11db8:	str	r6, [r4]
   11dbc:	bl	1128c <getgid@plt>
   11dc0:	cmn	r0, #1
   11dc4:	str	r0, [r8, #24]
   11dc8:	bne	11dd8 <__assert_fail@plt+0xa68>
   11dcc:	ldr	r4, [r4]
   11dd0:	cmp	r4, #0
   11dd4:	bne	11ef0 <__assert_fail@plt+0xb80>
   11dd8:	mov	r0, #0
   11ddc:	bl	11f20 <__assert_fail@plt+0xbb0>
   11de0:	movw	r0, #33040	; 0x8110
   11de4:	movt	r0, #2
   11de8:	ldrb	r0, [r0]
   11dec:	eor	r0, r0, #1
   11df0:	sub	sp, fp, #28
   11df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11df8:	cmn	r0, #3
   11dfc:	bne	11e54 <__assert_fail@plt+0xae4>
   11e00:	movw	r0, #33044	; 0x8114
   11e04:	movw	r2, #28819	; 0x7093
   11e08:	mov	r1, #0
   11e0c:	movw	r7, #28804	; 0x7084
   11e10:	movt	r0, #2
   11e14:	movt	r2, #1
   11e18:	str	r1, [sp, #8]
   11e1c:	movw	r1, #28699	; 0x701b
   11e20:	movt	r7, #1
   11e24:	movt	r1, #1
   11e28:	ldr	r3, [r0]
   11e2c:	movw	r0, #33140	; 0x8174
   11e30:	str	r2, [sp, #4]
   11e34:	movw	r2, #28790	; 0x7076
   11e38:	str	r7, [sp]
   11e3c:	movt	r0, #2
   11e40:	movt	r2, #1
   11e44:	ldr	r0, [r0]
   11e48:	bl	152fc <__assert_fail@plt+0x3f8c>
   11e4c:	mov	r0, #0
   11e50:	bl	11238 <exit@plt>
   11e54:	cmn	r0, #2
   11e58:	bne	11e64 <__assert_fail@plt+0xaf4>
   11e5c:	mov	r0, #0
   11e60:	bl	1146c <__assert_fail@plt+0xfc>
   11e64:	mov	r0, #1
   11e68:	bl	1146c <__assert_fail@plt+0xfc>
   11e6c:	movw	r1, #28735	; 0x703f
   11e70:	movt	r1, #1
   11e74:	b	11ea4 <__assert_fail@plt+0xb34>
   11e78:	movw	r1, #28835	; 0x70a3
   11e7c:	movt	r1, #1
   11e80:	b	11ea4 <__assert_fail@plt+0xb34>
   11e84:	movw	r1, #28885	; 0x70d5
   11e88:	movt	r1, #1
   11e8c:	b	11ea4 <__assert_fail@plt+0xb34>
   11e90:	movw	r1, #28929	; 0x7101
   11e94:	movt	r1, #1
   11e98:	b	11ea4 <__assert_fail@plt+0xb34>
   11e9c:	movw	r1, #28983	; 0x7137
   11ea0:	movt	r1, #1
   11ea4:	mov	r0, #0
   11ea8:	mov	r2, #5
   11eac:	bl	11148 <dcgettext@plt>
   11eb0:	mov	r2, r0
   11eb4:	mov	r0, #1
   11eb8:	mov	r1, #0
   11ebc:	bl	111d8 <error@plt>
   11ec0:	movw	r1, #29045	; 0x7175
   11ec4:	movt	r1, #1
   11ec8:	b	11ea4 <__assert_fail@plt+0xb34>
   11ecc:	movw	r1, #29133	; 0x71cd
   11ed0:	mov	r0, #0
   11ed4:	mov	r2, #5
   11ed8:	movt	r1, #1
   11edc:	bl	11148 <dcgettext@plt>
   11ee0:	mov	r2, r0
   11ee4:	mov	r0, #1
   11ee8:	mov	r1, r5
   11eec:	bl	111d8 <error@plt>
   11ef0:	movw	r1, #29158	; 0x71e6
   11ef4:	movt	r1, #1
   11ef8:	b	11f04 <__assert_fail@plt+0xb94>
   11efc:	movw	r1, #29113	; 0x71b9
   11f00:	movt	r1, #1
   11f04:	mov	r0, #0
   11f08:	mov	r2, #5
   11f0c:	bl	11148 <dcgettext@plt>
   11f10:	mov	r2, r0
   11f14:	mov	r0, #1
   11f18:	mov	r1, r4
   11f1c:	bl	111d8 <error@plt>
   11f20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f24:	add	fp, sp, #28
   11f28:	sub	sp, sp, #12
   11f2c:	movw	r7, #33148	; 0x817c
   11f30:	mov	r4, r0
   11f34:	movt	r7, #2
   11f38:	ldrb	r0, [r7, #4]
   11f3c:	cmp	r0, #1
   11f40:	bne	11f7c <__assert_fail@plt+0xc0c>
   11f44:	ldrb	r1, [r7, #3]
   11f48:	ldrb	r0, [r7, #2]
   11f4c:	add	r2, r7, #12
   11f50:	cmp	r1, #0
   11f54:	addne	r2, r7, #16
   11f58:	cmp	r0, #0
   11f5c:	ldr	r4, [r2]
   11f60:	beq	11fa8 <__assert_fail@plt+0xc38>
   11f64:	mov	r0, r4
   11f68:	bl	110f4 <getpwuid@plt>
   11f6c:	cmp	r0, #0
   11f70:	beq	1203c <__assert_fail@plt+0xccc>
   11f74:	ldr	r0, [r0]
   11f78:	b	12098 <__assert_fail@plt+0xd28>
   11f7c:	ldrb	r0, [r7, #1]
   11f80:	cmp	r0, #1
   11f84:	bne	11fb0 <__assert_fail@plt+0xc40>
   11f88:	ldrb	r0, [r7, #3]
   11f8c:	add	r2, r7, #20
   11f90:	ldrb	r1, [r7, #2]
   11f94:	cmp	r0, #0
   11f98:	addne	r2, r7, #24
   11f9c:	ldr	r0, [r2]
   11fa0:	bl	12884 <__assert_fail@plt+0x1514>
   11fa4:	b	11fe8 <__assert_fail@plt+0xc78>
   11fa8:	mov	r5, #0
   11fac:	b	12088 <__assert_fail@plt+0xd18>
   11fb0:	ldrb	r0, [r7, #6]
   11fb4:	cmp	r0, #1
   11fb8:	bne	1200c <__assert_fail@plt+0xc9c>
   11fbc:	ldrb	r6, [r7, #5]
   11fc0:	ldrb	r0, [r7, #2]
   11fc4:	ldr	r1, [r7, #16]
   11fc8:	ldr	r3, [r7, #20]
   11fcc:	ldr	r2, [r7, #24]
   11fd0:	mov	r5, #32
   11fd4:	cmp	r6, #0
   11fd8:	movwne	r5, #0
   11fdc:	stm	sp, {r0, r5}
   11fe0:	mov	r0, r4
   11fe4:	bl	12500 <__assert_fail@plt+0x1190>
   11fe8:	movw	r1, #33040	; 0x8110
   11fec:	movt	r1, #2
   11ff0:	ldrb	r2, [r1]
   11ff4:	and	r0, r2, r0
   11ff8:	strb	r0, [r1]
   11ffc:	ldrb	r0, [r7, #5]
   12000:	cmp	r0, #1
   12004:	beq	120b4 <__assert_fail@plt+0xd44>
   12008:	b	120c8 <__assert_fail@plt+0xd58>
   1200c:	ldrb	r0, [r7]
   12010:	cmp	r0, #1
   12014:	bne	12170 <__assert_fail@plt+0xe00>
   12018:	movw	r0, #33140	; 0x8174
   1201c:	movt	r0, #2
   12020:	ldr	r1, [r0]
   12024:	ldr	r0, [r7, #8]
   12028:	bl	110b8 <fputs_unlocked@plt>
   1202c:	ldrb	r0, [r7, #5]
   12030:	cmp	r0, #1
   12034:	beq	120b4 <__assert_fail@plt+0xd44>
   12038:	b	120c8 <__assert_fail@plt+0xd58>
   1203c:	movw	r1, #29524	; 0x7354
   12040:	mov	r0, #0
   12044:	mov	r2, #5
   12048:	mov	r5, #0
   1204c:	movt	r1, #1
   12050:	bl	11148 <dcgettext@plt>
   12054:	mov	r6, r0
   12058:	add	r2, r7, #28
   1205c:	mov	r0, r4
   12060:	mov	r1, #0
   12064:	bl	12a44 <__assert_fail@plt+0x16d4>
   12068:	mov	r3, r0
   1206c:	mov	r0, #0
   12070:	mov	r1, #0
   12074:	mov	r2, r6
   12078:	bl	111d8 <error@plt>
   1207c:	movw	r0, #33040	; 0x8110
   12080:	movt	r0, #2
   12084:	strb	r5, [r0]
   12088:	add	r2, r7, #28
   1208c:	mov	r0, r4
   12090:	mov	r1, r5
   12094:	bl	12a44 <__assert_fail@plt+0x16d4>
   12098:	movw	r1, #33140	; 0x8174
   1209c:	movt	r1, #2
   120a0:	ldr	r1, [r1]
   120a4:	bl	110b8 <fputs_unlocked@plt>
   120a8:	ldrb	r0, [r7, #5]
   120ac:	cmp	r0, #1
   120b0:	bne	120c8 <__assert_fail@plt+0xd58>
   120b4:	ldrb	r1, [r7, #7]
   120b8:	cmp	r1, #0
   120bc:	ldrbne	r1, [r7, #6]
   120c0:	cmpne	r1, #0
   120c4:	bne	1210c <__assert_fail@plt+0xd9c>
   120c8:	cmp	r0, #0
   120cc:	movw	r0, #33140	; 0x8174
   120d0:	mov	r1, #10
   120d4:	movt	r0, #2
   120d8:	movwne	r1, #0
   120dc:	ldr	r0, [r0]
   120e0:	ldr	r2, [r0, #20]
   120e4:	ldr	r3, [r0, #24]
   120e8:	cmp	r2, r3
   120ec:	addcc	r3, r2, #1
   120f0:	strcc	r3, [r0, #20]
   120f4:	strbcc	r1, [r2]
   120f8:	subcc	sp, fp, #28
   120fc:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12100:	bl	112ec <__overflow@plt>
   12104:	sub	sp, fp, #28
   12108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1210c:	movw	r4, #33140	; 0x8174
   12110:	movt	r4, #2
   12114:	ldr	r0, [r4]
   12118:	ldr	r1, [r0, #20]
   1211c:	ldr	r2, [r0, #24]
   12120:	cmp	r1, r2
   12124:	bcs	124f4 <__assert_fail@plt+0x1184>
   12128:	add	r2, r1, #1
   1212c:	str	r2, [r0, #20]
   12130:	mov	r0, #0
   12134:	strb	r0, [r1]
   12138:	ldr	r0, [r4]
   1213c:	ldr	r1, [r0, #20]
   12140:	ldr	r2, [r0, #24]
   12144:	cmp	r1, r2
   12148:	addcc	r2, r1, #1
   1214c:	strcc	r2, [r0, #20]
   12150:	movcc	r0, #0
   12154:	strbcc	r0, [r1]
   12158:	subcc	sp, fp, #28
   1215c:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12160:	mov	r1, #0
   12164:	bl	112ec <__overflow@plt>
   12168:	sub	sp, fp, #28
   1216c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12170:	movw	r1, #29571	; 0x7383
   12174:	mov	r0, #0
   12178:	mov	r2, #5
   1217c:	movt	r1, #1
   12180:	bl	11148 <dcgettext@plt>
   12184:	mov	r5, r0
   12188:	ldr	r0, [r7, #16]
   1218c:	add	r8, r7, #28
   12190:	mov	r1, #0
   12194:	mov	r2, r8
   12198:	bl	12a44 <__assert_fail@plt+0x16d4>
   1219c:	mov	r2, r0
   121a0:	mov	r0, #1
   121a4:	mov	r1, r5
   121a8:	bl	112b0 <__printf_chk@plt>
   121ac:	ldr	r0, [r7, #16]
   121b0:	bl	110f4 <getpwuid@plt>
   121b4:	mov	r9, r0
   121b8:	cmp	r0, #0
   121bc:	beq	121d4 <__assert_fail@plt+0xe64>
   121c0:	ldr	r2, [r9]
   121c4:	movw	r1, #29556	; 0x7374
   121c8:	mov	r0, #1
   121cc:	movt	r1, #1
   121d0:	bl	112b0 <__printf_chk@plt>
   121d4:	movw	r1, #29561	; 0x7379
   121d8:	mov	r0, #0
   121dc:	mov	r2, #5
   121e0:	movt	r1, #1
   121e4:	bl	11148 <dcgettext@plt>
   121e8:	mov	r6, r0
   121ec:	ldr	r0, [r7, #24]
   121f0:	add	sl, r7, #49	; 0x31
   121f4:	mov	r1, #0
   121f8:	mov	r2, sl
   121fc:	bl	12a44 <__assert_fail@plt+0x16d4>
   12200:	mov	r2, r0
   12204:	mov	r0, #1
   12208:	mov	r1, r6
   1220c:	bl	112b0 <__printf_chk@plt>
   12210:	ldr	r0, [r7, #24]
   12214:	bl	11358 <getgrgid@plt>
   12218:	cmp	r0, #0
   1221c:	beq	12234 <__assert_fail@plt+0xec4>
   12220:	ldr	r2, [r0]
   12224:	movw	r1, #29556	; 0x7374
   12228:	mov	r0, #1
   1222c:	movt	r1, #1
   12230:	bl	112b0 <__printf_chk@plt>
   12234:	ldr	r0, [r7, #12]
   12238:	ldr	r1, [r7, #16]
   1223c:	cmp	r0, r1
   12240:	beq	122ac <__assert_fail@plt+0xf3c>
   12244:	movw	r1, #29569	; 0x7381
   12248:	mov	r0, #0
   1224c:	mov	r2, #5
   12250:	mov	r9, #0
   12254:	movt	r1, #1
   12258:	bl	11148 <dcgettext@plt>
   1225c:	mov	r6, r0
   12260:	ldr	r0, [r7, #12]
   12264:	mov	r1, #0
   12268:	mov	r2, r8
   1226c:	bl	12a44 <__assert_fail@plt+0x16d4>
   12270:	mov	r2, r0
   12274:	mov	r0, #1
   12278:	mov	r1, r6
   1227c:	bl	112b0 <__printf_chk@plt>
   12280:	ldr	r0, [r7, #12]
   12284:	bl	110f4 <getpwuid@plt>
   12288:	cmp	r0, #0
   1228c:	beq	122ac <__assert_fail@plt+0xf3c>
   12290:	ldr	r2, [r0]
   12294:	movw	r1, #29556	; 0x7374
   12298:	mov	r6, r0
   1229c:	mov	r0, #1
   122a0:	movt	r1, #1
   122a4:	bl	112b0 <__printf_chk@plt>
   122a8:	mov	r9, r6
   122ac:	ldr	r0, [r7, #20]
   122b0:	ldr	r1, [r7, #24]
   122b4:	cmp	r0, r1
   122b8:	beq	12318 <__assert_fail@plt+0xfa8>
   122bc:	movw	r1, #29578	; 0x738a
   122c0:	mov	r0, #0
   122c4:	mov	r2, #5
   122c8:	movt	r1, #1
   122cc:	bl	11148 <dcgettext@plt>
   122d0:	mov	r6, r0
   122d4:	ldr	r0, [r7, #20]
   122d8:	mov	r1, #0
   122dc:	mov	r2, sl
   122e0:	bl	12a44 <__assert_fail@plt+0x16d4>
   122e4:	mov	r2, r0
   122e8:	mov	r0, #1
   122ec:	mov	r1, r6
   122f0:	bl	112b0 <__printf_chk@plt>
   122f4:	ldr	r0, [r7, #20]
   122f8:	bl	11358 <getgrgid@plt>
   122fc:	cmp	r0, #0
   12300:	beq	12318 <__assert_fail@plt+0xfa8>
   12304:	ldr	r2, [r0]
   12308:	movw	r1, #29556	; 0x7374
   1230c:	mov	r0, #1
   12310:	movt	r1, #1
   12314:	bl	112b0 <__printf_chk@plt>
   12318:	cmp	r4, #0
   1231c:	beq	12330 <__assert_fail@plt+0xfc0>
   12320:	cmp	r9, #0
   12324:	beq	12338 <__assert_fail@plt+0xfc8>
   12328:	ldr	r1, [r9, #12]
   1232c:	b	1233c <__assert_fail@plt+0xfcc>
   12330:	ldr	r1, [r7, #20]
   12334:	b	1233c <__assert_fail@plt+0xfcc>
   12338:	mvn	r1, #0
   1233c:	add	r2, sp, #8
   12340:	mov	r0, r4
   12344:	bl	15ab0 <__assert_fail@plt+0x4740>
   12348:	cmn	r0, #1
   1234c:	ble	12468 <__assert_fail@plt+0x10f8>
   12350:	mov	r6, r0
   12354:	cmp	r0, #0
   12358:	beq	12420 <__assert_fail@plt+0x10b0>
   1235c:	movw	r1, #29665	; 0x73e1
   12360:	mov	r0, #0
   12364:	mov	r2, #5
   12368:	mov	r4, #0
   1236c:	movt	r1, #1
   12370:	bl	11148 <dcgettext@plt>
   12374:	movw	r5, #33140	; 0x8174
   12378:	movt	r5, #2
   1237c:	ldr	r1, [r5]
   12380:	bl	110b8 <fputs_unlocked@plt>
   12384:	movw	r8, #29556	; 0x7374
   12388:	mov	r9, #44	; 0x2c
   1238c:	movt	r8, #1
   12390:	cmp	r4, #0
   12394:	bne	123b0 <__assert_fail@plt+0x1040>
   12398:	b	123d0 <__assert_fail@plt+0x1060>
   1239c:	add	r4, r4, #1
   123a0:	cmp	r6, r4
   123a4:	beq	12420 <__assert_fail@plt+0x10b0>
   123a8:	cmp	r4, #0
   123ac:	beq	123d0 <__assert_fail@plt+0x1060>
   123b0:	ldr	r0, [r5]
   123b4:	ldr	r1, [r0, #20]
   123b8:	ldr	r2, [r0, #24]
   123bc:	cmp	r1, r2
   123c0:	bcs	12414 <__assert_fail@plt+0x10a4>
   123c4:	add	r2, r1, #1
   123c8:	str	r2, [r0, #20]
   123cc:	strb	r9, [r1]
   123d0:	ldr	r0, [sp, #8]
   123d4:	mov	r1, #0
   123d8:	mov	r2, sl
   123dc:	ldr	r0, [r0, r4, lsl #2]
   123e0:	bl	12a44 <__assert_fail@plt+0x16d4>
   123e4:	ldr	r1, [r5]
   123e8:	bl	110b8 <fputs_unlocked@plt>
   123ec:	ldr	r0, [sp, #8]
   123f0:	ldr	r0, [r0, r4, lsl #2]
   123f4:	bl	11358 <getgrgid@plt>
   123f8:	cmp	r0, #0
   123fc:	beq	1239c <__assert_fail@plt+0x102c>
   12400:	ldr	r2, [r0]
   12404:	mov	r0, #1
   12408:	mov	r1, r8
   1240c:	bl	112b0 <__printf_chk@plt>
   12410:	b	1239c <__assert_fail@plt+0x102c>
   12414:	mov	r1, #44	; 0x2c
   12418:	bl	112ec <__overflow@plt>
   1241c:	b	123d0 <__assert_fail@plt+0x1060>
   12420:	ldr	r0, [sp, #8]
   12424:	bl	12a1c <__assert_fail@plt+0x16ac>
   12428:	ldr	r0, [r7, #8]
   1242c:	cmp	r0, #0
   12430:	beq	120a8 <__assert_fail@plt+0xd38>
   12434:	movw	r1, #29674	; 0x73ea
   12438:	mov	r0, #0
   1243c:	mov	r2, #5
   12440:	movt	r1, #1
   12444:	bl	11148 <dcgettext@plt>
   12448:	ldr	r2, [r7, #8]
   1244c:	mov	r1, r0
   12450:	mov	r0, #1
   12454:	bl	112b0 <__printf_chk@plt>
   12458:	ldrb	r0, [r7, #5]
   1245c:	cmp	r0, #1
   12460:	beq	120b4 <__assert_fail@plt+0xd44>
   12464:	b	120c8 <__assert_fail@plt+0xd58>
   12468:	bl	11274 <__errno_location@plt>
   1246c:	ldr	r5, [r0]
   12470:	cmp	r4, #0
   12474:	beq	124b0 <__assert_fail@plt+0x1140>
   12478:	movw	r1, #29587	; 0x7393
   1247c:	mov	r0, #0
   12480:	mov	r2, #5
   12484:	movt	r1, #1
   12488:	bl	11148 <dcgettext@plt>
   1248c:	mov	r6, r0
   12490:	mov	r0, r4
   12494:	bl	14a64 <__assert_fail@plt+0x36f4>
   12498:	mov	r3, r0
   1249c:	mov	r0, #0
   124a0:	mov	r1, r5
   124a4:	mov	r2, r6
   124a8:	bl	111d8 <error@plt>
   124ac:	b	124d4 <__assert_fail@plt+0x1164>
   124b0:	movw	r1, #29620	; 0x73b4
   124b4:	mov	r0, #0
   124b8:	mov	r2, #5
   124bc:	movt	r1, #1
   124c0:	bl	11148 <dcgettext@plt>
   124c4:	mov	r2, r0
   124c8:	mov	r0, #0
   124cc:	mov	r1, r5
   124d0:	bl	111d8 <error@plt>
   124d4:	movw	r0, #33040	; 0x8110
   124d8:	mov	r1, #0
   124dc:	movt	r0, #2
   124e0:	strb	r1, [r0]
   124e4:	ldrb	r0, [r7, #5]
   124e8:	cmp	r0, #1
   124ec:	beq	120b4 <__assert_fail@plt+0xd44>
   124f0:	b	120c8 <__assert_fail@plt+0xd58>
   124f4:	mov	r1, #0
   124f8:	bl	112ec <__overflow@plt>
   124fc:	b	12138 <__assert_fail@plt+0xdc8>
   12500:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12504:	add	fp, sp, #28
   12508:	sub	sp, sp, #12
   1250c:	ldr	r7, [fp, #8]
   12510:	mov	r4, r3
   12514:	mov	r5, r2
   12518:	mov	r9, r0
   1251c:	cmp	r0, #0
   12520:	beq	1255c <__assert_fail@plt+0x11ec>
   12524:	mov	r0, r1
   12528:	bl	110f4 <getpwuid@plt>
   1252c:	cmp	r0, #0
   12530:	mov	r8, r0
   12534:	mov	r6, r0
   12538:	movwne	r8, #1
   1253c:	cmp	r7, #0
   12540:	beq	1259c <__assert_fail@plt+0x122c>
   12544:	mov	r0, r5
   12548:	bl	11358 <getgrgid@plt>
   1254c:	cmp	r0, #0
   12550:	beq	12570 <__assert_fail@plt+0x1200>
   12554:	ldr	r0, [r0]
   12558:	b	125b0 <__assert_fail@plt+0x1240>
   1255c:	mov	r6, #0
   12560:	mov	r8, #1
   12564:	cmp	r7, #0
   12568:	bne	12544 <__assert_fail@plt+0x11d4>
   1256c:	b	1259c <__assert_fail@plt+0x122c>
   12570:	movw	r1, #29904	; 0x74d0
   12574:	mov	r0, #0
   12578:	mov	r2, #5
   1257c:	mov	r8, #0
   12580:	movt	r1, #1
   12584:	bl	11148 <dcgettext@plt>
   12588:	mov	r2, r0
   1258c:	mov	r0, #0
   12590:	mov	r1, #0
   12594:	mov	r3, r5
   12598:	bl	111d8 <error@plt>
   1259c:	movw	r2, #33218	; 0x81c2
   125a0:	mov	r0, r5
   125a4:	mov	r1, #0
   125a8:	movt	r2, #2
   125ac:	bl	12a44 <__assert_fail@plt+0x16d4>
   125b0:	movw	sl, #33140	; 0x8174
   125b4:	movt	sl, #2
   125b8:	ldr	r1, [sl]
   125bc:	bl	110b8 <fputs_unlocked@plt>
   125c0:	cmp	r4, r5
   125c4:	beq	12658 <__assert_fail@plt+0x12e8>
   125c8:	ldr	r0, [sl]
   125cc:	ldr	r1, [r0, #20]
   125d0:	ldr	r2, [r0, #24]
   125d4:	cmp	r1, r2
   125d8:	bcs	1286c <__assert_fail@plt+0x14fc>
   125dc:	add	r2, r1, #1
   125e0:	str	r2, [r0, #20]
   125e4:	ldr	r0, [fp, #12]
   125e8:	strb	r0, [r1]
   125ec:	ldr	r0, [fp, #8]
   125f0:	cmp	r0, #0
   125f4:	beq	1263c <__assert_fail@plt+0x12cc>
   125f8:	mov	r0, r4
   125fc:	bl	11358 <getgrgid@plt>
   12600:	cmp	r0, #0
   12604:	beq	12610 <__assert_fail@plt+0x12a0>
   12608:	ldr	r0, [r0]
   1260c:	b	12650 <__assert_fail@plt+0x12e0>
   12610:	movw	r1, #29904	; 0x74d0
   12614:	mov	r0, #0
   12618:	mov	r2, #5
   1261c:	mov	r8, #0
   12620:	movt	r1, #1
   12624:	bl	11148 <dcgettext@plt>
   12628:	mov	r2, r0
   1262c:	mov	r0, #0
   12630:	mov	r1, #0
   12634:	mov	r3, r4
   12638:	bl	111d8 <error@plt>
   1263c:	movw	r2, #33218	; 0x81c2
   12640:	mov	r0, r4
   12644:	mov	r1, #0
   12648:	movt	r2, #2
   1264c:	bl	12a44 <__assert_fail@plt+0x16d4>
   12650:	ldr	r1, [sl]
   12654:	bl	110b8 <fputs_unlocked@plt>
   12658:	cmp	r6, #0
   1265c:	mov	r1, r4
   12660:	add	r2, sp, #8
   12664:	mov	r0, r9
   12668:	ldrne	r1, [r6, #12]
   1266c:	bl	15ab0 <__assert_fail@plt+0x4740>
   12670:	cmp	r0, #0
   12674:	bmi	12754 <__assert_fail@plt+0x13e4>
   12678:	str	r8, [sp, #4]
   1267c:	beq	12824 <__assert_fail@plt+0x14b4>
   12680:	mov	r6, r0
   12684:	ldr	r0, [fp, #8]
   12688:	cmp	r0, #0
   1268c:	beq	127a8 <__assert_fail@plt+0x1438>
   12690:	ldr	r8, [fp, #12]
   12694:	mov	r9, #0
   12698:	b	126f4 <__assert_fail@plt+0x1384>
   1269c:	movw	r1, #29904	; 0x74d0
   126a0:	mov	r0, #0
   126a4:	mov	r2, #5
   126a8:	movt	r1, #1
   126ac:	str	r0, [sp, #4]
   126b0:	mov	r0, #0
   126b4:	bl	11148 <dcgettext@plt>
   126b8:	mov	r2, r0
   126bc:	mov	r0, #0
   126c0:	mov	r1, #0
   126c4:	mov	r3, r7
   126c8:	bl	111d8 <error@plt>
   126cc:	movw	r2, #33218	; 0x81c2
   126d0:	mov	r0, r7
   126d4:	mov	r1, #0
   126d8:	movt	r2, #2
   126dc:	bl	12a44 <__assert_fail@plt+0x16d4>
   126e0:	ldr	r1, [sl]
   126e4:	bl	110b8 <fputs_unlocked@plt>
   126e8:	add	r9, r9, #1
   126ec:	cmp	r6, r9
   126f0:	beq	12824 <__assert_fail@plt+0x14b4>
   126f4:	ldr	r0, [sp, #8]
   126f8:	ldr	r0, [r0, r9, lsl #2]
   126fc:	cmp	r0, r5
   12700:	cmpne	r0, r4
   12704:	beq	126e8 <__assert_fail@plt+0x1378>
   12708:	ldr	r0, [sl]
   1270c:	ldr	r1, [r0, #20]
   12710:	ldr	r2, [r0, #24]
   12714:	cmp	r1, r2
   12718:	bcs	12748 <__assert_fail@plt+0x13d8>
   1271c:	add	r2, r1, #1
   12720:	str	r2, [r0, #20]
   12724:	strb	r8, [r1]
   12728:	ldr	r0, [sp, #8]
   1272c:	ldr	r7, [r0, r9, lsl #2]
   12730:	mov	r0, r7
   12734:	bl	11358 <getgrgid@plt>
   12738:	cmp	r0, #0
   1273c:	beq	1269c <__assert_fail@plt+0x132c>
   12740:	ldr	r0, [r0]
   12744:	b	126e0 <__assert_fail@plt+0x1370>
   12748:	mov	r1, r8
   1274c:	bl	112ec <__overflow@plt>
   12750:	b	12728 <__assert_fail@plt+0x13b8>
   12754:	bl	11274 <__errno_location@plt>
   12758:	ldr	r4, [r0]
   1275c:	mov	r6, #0
   12760:	cmp	r9, #0
   12764:	beq	1283c <__assert_fail@plt+0x14cc>
   12768:	movw	r1, #29587	; 0x7393
   1276c:	mov	r0, #0
   12770:	mov	r2, #5
   12774:	movt	r1, #1
   12778:	bl	11148 <dcgettext@plt>
   1277c:	mov	r5, r0
   12780:	mov	r0, r9
   12784:	bl	14a64 <__assert_fail@plt+0x36f4>
   12788:	mov	r3, r0
   1278c:	mov	r0, #0
   12790:	mov	r1, r4
   12794:	mov	r2, r5
   12798:	bl	111d8 <error@plt>
   1279c:	and	r0, r6, #1
   127a0:	sub	sp, fp, #28
   127a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127a8:	ldr	r8, [fp, #12]
   127ac:	movw	r9, #33218	; 0x81c2
   127b0:	mov	r7, #0
   127b4:	movt	r9, #2
   127b8:	b	127f0 <__assert_fail@plt+0x1480>
   127bc:	add	r2, r1, #1
   127c0:	str	r2, [r0, #20]
   127c4:	strb	r8, [r1]
   127c8:	ldr	r0, [sp, #8]
   127cc:	mov	r1, #0
   127d0:	mov	r2, r9
   127d4:	ldr	r0, [r0, r7, lsl #2]
   127d8:	bl	12a44 <__assert_fail@plt+0x16d4>
   127dc:	ldr	r1, [sl]
   127e0:	bl	110b8 <fputs_unlocked@plt>
   127e4:	add	r7, r7, #1
   127e8:	cmp	r6, r7
   127ec:	beq	12824 <__assert_fail@plt+0x14b4>
   127f0:	ldr	r0, [sp, #8]
   127f4:	ldr	r0, [r0, r7, lsl #2]
   127f8:	cmp	r0, r5
   127fc:	cmpne	r0, r4
   12800:	beq	127e4 <__assert_fail@plt+0x1474>
   12804:	ldr	r0, [sl]
   12808:	ldr	r1, [r0, #20]
   1280c:	ldr	r2, [r0, #24]
   12810:	cmp	r1, r2
   12814:	bcc	127bc <__assert_fail@plt+0x144c>
   12818:	mov	r1, r8
   1281c:	bl	112ec <__overflow@plt>
   12820:	b	127c8 <__assert_fail@plt+0x1458>
   12824:	ldr	r0, [sp, #8]
   12828:	bl	12a1c <__assert_fail@plt+0x16ac>
   1282c:	ldr	r6, [sp, #4]
   12830:	and	r0, r6, #1
   12834:	sub	sp, fp, #28
   12838:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1283c:	movw	r1, #29620	; 0x73b4
   12840:	mov	r0, #0
   12844:	mov	r2, #5
   12848:	movt	r1, #1
   1284c:	bl	11148 <dcgettext@plt>
   12850:	mov	r2, r0
   12854:	mov	r0, #0
   12858:	mov	r1, r4
   1285c:	bl	111d8 <error@plt>
   12860:	and	r0, r6, #1
   12864:	sub	sp, fp, #28
   12868:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1286c:	ldr	r1, [fp, #12]
   12870:	bl	112ec <__overflow@plt>
   12874:	ldr	r0, [fp, #8]
   12878:	cmp	r0, #0
   1287c:	bne	125f8 <__assert_fail@plt+0x1288>
   12880:	b	1263c <__assert_fail@plt+0x12cc>
   12884:	push	{r4, r5, fp, lr}
   12888:	add	fp, sp, #8
   1288c:	mov	r5, r0
   12890:	mov	r4, #1
   12894:	cmp	r1, #0
   12898:	beq	128e4 <__assert_fail@plt+0x1574>
   1289c:	mov	r0, r5
   128a0:	bl	11358 <getgrgid@plt>
   128a4:	cmp	r0, #0
   128a8:	beq	128b8 <__assert_fail@plt+0x1548>
   128ac:	ldr	r0, [r0]
   128b0:	mov	r4, #1
   128b4:	b	128f8 <__assert_fail@plt+0x1588>
   128b8:	movw	r1, #29904	; 0x74d0
   128bc:	mov	r0, #0
   128c0:	mov	r2, #5
   128c4:	mov	r4, #0
   128c8:	movt	r1, #1
   128cc:	bl	11148 <dcgettext@plt>
   128d0:	mov	r2, r0
   128d4:	mov	r0, #0
   128d8:	mov	r1, #0
   128dc:	mov	r3, r5
   128e0:	bl	111d8 <error@plt>
   128e4:	movw	r2, #33218	; 0x81c2
   128e8:	mov	r0, r5
   128ec:	mov	r1, #0
   128f0:	movt	r2, #2
   128f4:	bl	12a44 <__assert_fail@plt+0x16d4>
   128f8:	movw	r1, #33140	; 0x8174
   128fc:	movt	r1, #2
   12900:	ldr	r1, [r1]
   12904:	bl	110b8 <fputs_unlocked@plt>
   12908:	mov	r0, r4
   1290c:	pop	{r4, r5, fp, pc}
   12910:	movw	r1, #33240	; 0x81d8
   12914:	movt	r1, #2
   12918:	str	r0, [r1, #4]
   1291c:	bx	lr
   12920:	movw	r1, #33240	; 0x81d8
   12924:	movt	r1, #2
   12928:	strb	r0, [r1]
   1292c:	bx	lr
   12930:	push	{r4, r5, r6, sl, fp, lr}
   12934:	add	fp, sp, #16
   12938:	sub	sp, sp, #8
   1293c:	movw	r0, #33140	; 0x8174
   12940:	movt	r0, #2
   12944:	ldr	r0, [r0]
   12948:	bl	1643c <__assert_fail@plt+0x50cc>
   1294c:	cmp	r0, #0
   12950:	beq	12978 <__assert_fail@plt+0x1608>
   12954:	movw	r5, #33240	; 0x81d8
   12958:	movt	r5, #2
   1295c:	ldrb	r0, [r5]
   12960:	cmp	r0, #0
   12964:	beq	129a4 <__assert_fail@plt+0x1634>
   12968:	bl	11274 <__errno_location@plt>
   1296c:	ldr	r0, [r0]
   12970:	cmp	r0, #32
   12974:	bne	129a4 <__assert_fail@plt+0x1634>
   12978:	movw	r0, #33136	; 0x8170
   1297c:	movt	r0, #2
   12980:	ldr	r0, [r0]
   12984:	bl	1643c <__assert_fail@plt+0x50cc>
   12988:	cmp	r0, #0
   1298c:	subeq	sp, fp, #16
   12990:	popeq	{r4, r5, r6, sl, fp, pc}
   12994:	movw	r0, #33048	; 0x8118
   12998:	movt	r0, #2
   1299c:	ldr	r0, [r0]
   129a0:	bl	11124 <_exit@plt>
   129a4:	movw	r1, #29953	; 0x7501
   129a8:	mov	r0, #0
   129ac:	mov	r2, #5
   129b0:	movt	r1, #1
   129b4:	bl	11148 <dcgettext@plt>
   129b8:	ldr	r6, [r5, #4]
   129bc:	mov	r4, r0
   129c0:	bl	11274 <__errno_location@plt>
   129c4:	ldr	r5, [r0]
   129c8:	cmp	r6, #0
   129cc:	bne	129e8 <__assert_fail@plt+0x1678>
   129d0:	movw	r2, #29969	; 0x7511
   129d4:	mov	r0, #0
   129d8:	mov	r1, r5
   129dc:	mov	r3, r4
   129e0:	movt	r2, #1
   129e4:	b	12a08 <__assert_fail@plt+0x1698>
   129e8:	mov	r0, r6
   129ec:	bl	146dc <__assert_fail@plt+0x336c>
   129f0:	movw	r2, #29965	; 0x750d
   129f4:	mov	r3, r0
   129f8:	str	r4, [sp]
   129fc:	mov	r0, #0
   12a00:	mov	r1, r5
   12a04:	movt	r2, #1
   12a08:	bl	111d8 <error@plt>
   12a0c:	movw	r0, #33048	; 0x8118
   12a10:	movt	r0, #2
   12a14:	ldr	r0, [r0]
   12a18:	bl	11124 <_exit@plt>
   12a1c:	push	{r4, r5, r6, sl, fp, lr}
   12a20:	add	fp, sp, #16
   12a24:	mov	r4, r0
   12a28:	bl	11274 <__errno_location@plt>
   12a2c:	ldr	r6, [r0]
   12a30:	mov	r5, r0
   12a34:	mov	r0, r4
   12a38:	bl	11118 <free@plt>
   12a3c:	str	r6, [r5]
   12a40:	pop	{r4, r5, r6, sl, fp, pc}
   12a44:	push	{r4, r5, r6, sl, fp, lr}
   12a48:	add	fp, sp, #16
   12a4c:	mov	r5, r0
   12a50:	mov	r0, #0
   12a54:	mov	r4, r1
   12a58:	add	r6, r2, #19
   12a5c:	strb	r0, [r2, #20]
   12a60:	mov	r0, r5
   12a64:	mov	r1, r4
   12a68:	mov	r2, #10
   12a6c:	mov	r3, #0
   12a70:	bl	16ab8 <__assert_fail@plt+0x5748>
   12a74:	add	r2, r0, r0, lsl #2
   12a78:	sub	r2, r5, r2, lsl #1
   12a7c:	orr	r2, r2, #48	; 0x30
   12a80:	strb	r2, [r6], #-1
   12a84:	rsbs	r2, r5, #9
   12a88:	mov	r5, r0
   12a8c:	rscs	r2, r4, #0
   12a90:	mov	r4, r1
   12a94:	bcc	12a60 <__assert_fail@plt+0x16f0>
   12a98:	add	r0, r6, #1
   12a9c:	pop	{r4, r5, r6, sl, fp, pc}
   12aa0:	push	{r4, r5, fp, lr}
   12aa4:	add	fp, sp, #8
   12aa8:	cmp	r0, #0
   12aac:	beq	12b40 <__assert_fail@plt+0x17d0>
   12ab0:	mov	r1, #47	; 0x2f
   12ab4:	mov	r4, r0
   12ab8:	bl	11310 <strrchr@plt>
   12abc:	cmp	r0, #0
   12ac0:	mov	r5, r4
   12ac4:	addne	r5, r0, #1
   12ac8:	sub	r0, r5, r4
   12acc:	cmp	r0, #7
   12ad0:	blt	12b24 <__assert_fail@plt+0x17b4>
   12ad4:	movw	r1, #30028	; 0x754c
   12ad8:	sub	r0, r5, #7
   12adc:	mov	r2, #7
   12ae0:	movt	r1, #1
   12ae4:	bl	11340 <strncmp@plt>
   12ae8:	cmp	r0, #0
   12aec:	bne	12b24 <__assert_fail@plt+0x17b4>
   12af0:	movw	r1, #30036	; 0x7554
   12af4:	mov	r0, r5
   12af8:	mov	r2, #3
   12afc:	movt	r1, #1
   12b00:	bl	11340 <strncmp@plt>
   12b04:	cmp	r0, #0
   12b08:	beq	12b14 <__assert_fail@plt+0x17a4>
   12b0c:	mov	r4, r5
   12b10:	b	12b24 <__assert_fail@plt+0x17b4>
   12b14:	movw	r0, #33120	; 0x8160
   12b18:	add	r4, r5, #3
   12b1c:	movt	r0, #2
   12b20:	str	r4, [r0]
   12b24:	movw	r0, #33124	; 0x8164
   12b28:	movt	r0, #2
   12b2c:	str	r4, [r0]
   12b30:	movw	r0, #33248	; 0x81e0
   12b34:	movt	r0, #2
   12b38:	str	r4, [r0]
   12b3c:	pop	{r4, r5, fp, pc}
   12b40:	movw	r0, #33136	; 0x8170
   12b44:	mov	r1, #55	; 0x37
   12b48:	mov	r2, #1
   12b4c:	movt	r0, #2
   12b50:	ldr	r3, [r0]
   12b54:	movw	r0, #29972	; 0x7514
   12b58:	movt	r0, #1
   12b5c:	bl	11190 <fwrite@plt>
   12b60:	bl	1134c <abort@plt>
   12b64:	push	{r4, r5, r6, sl, fp, lr}
   12b68:	add	fp, sp, #16
   12b6c:	mov	r4, r0
   12b70:	movw	r0, #33256	; 0x81e8
   12b74:	movt	r0, #2
   12b78:	cmp	r4, #0
   12b7c:	moveq	r4, r0
   12b80:	bl	11274 <__errno_location@plt>
   12b84:	ldr	r6, [r0]
   12b88:	mov	r5, r0
   12b8c:	mov	r0, r4
   12b90:	mov	r1, #48	; 0x30
   12b94:	bl	15990 <__assert_fail@plt+0x4620>
   12b98:	str	r6, [r5]
   12b9c:	pop	{r4, r5, r6, sl, fp, pc}
   12ba0:	movw	r1, #33256	; 0x81e8
   12ba4:	cmp	r0, #0
   12ba8:	movt	r1, #2
   12bac:	movne	r1, r0
   12bb0:	ldr	r0, [r1]
   12bb4:	bx	lr
   12bb8:	movw	r2, #33256	; 0x81e8
   12bbc:	cmp	r0, #0
   12bc0:	movt	r2, #2
   12bc4:	movne	r2, r0
   12bc8:	str	r1, [r2]
   12bcc:	bx	lr
   12bd0:	movw	r3, #33256	; 0x81e8
   12bd4:	cmp	r0, #0
   12bd8:	and	r2, r2, #1
   12bdc:	movt	r3, #2
   12be0:	movne	r3, r0
   12be4:	ubfx	r0, r1, #5, #3
   12be8:	and	r1, r1, #31
   12bec:	add	ip, r3, r0, lsl #2
   12bf0:	mov	r0, #1
   12bf4:	ldr	r3, [ip, #8]
   12bf8:	and	r0, r0, r3, lsr r1
   12bfc:	eor	r2, r0, r2
   12c00:	eor	r1, r3, r2, lsl r1
   12c04:	str	r1, [ip, #8]
   12c08:	bx	lr
   12c0c:	movw	r2, #33256	; 0x81e8
   12c10:	cmp	r0, #0
   12c14:	movt	r2, #2
   12c18:	movne	r2, r0
   12c1c:	ldr	r0, [r2, #4]
   12c20:	str	r1, [r2, #4]
   12c24:	bx	lr
   12c28:	push	{fp, lr}
   12c2c:	mov	fp, sp
   12c30:	movw	r3, #33256	; 0x81e8
   12c34:	cmp	r0, #0
   12c38:	movt	r3, #2
   12c3c:	movne	r3, r0
   12c40:	cmp	r1, #0
   12c44:	mov	r0, #10
   12c48:	cmpne	r2, #0
   12c4c:	str	r0, [r3]
   12c50:	bne	12c58 <__assert_fail@plt+0x18e8>
   12c54:	bl	1134c <abort@plt>
   12c58:	str	r1, [r3, #40]	; 0x28
   12c5c:	str	r2, [r3, #44]	; 0x2c
   12c60:	pop	{fp, pc}
   12c64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c68:	add	fp, sp, #28
   12c6c:	sub	sp, sp, #20
   12c70:	mov	r7, r0
   12c74:	ldr	r0, [fp, #8]
   12c78:	movw	r5, #33256	; 0x81e8
   12c7c:	mov	r8, r3
   12c80:	mov	r9, r2
   12c84:	mov	sl, r1
   12c88:	movt	r5, #2
   12c8c:	cmp	r0, #0
   12c90:	movne	r5, r0
   12c94:	bl	11274 <__errno_location@plt>
   12c98:	ldr	r2, [r5, #40]	; 0x28
   12c9c:	ldr	r3, [r5, #44]	; 0x2c
   12ca0:	mov	r4, r0
   12ca4:	ldm	r5, {r0, r1}
   12ca8:	add	r5, r5, #8
   12cac:	ldr	r6, [r4]
   12cb0:	stm	sp, {r0, r1, r5}
   12cb4:	mov	r0, r7
   12cb8:	mov	r1, sl
   12cbc:	str	r2, [sp, #12]
   12cc0:	str	r3, [sp, #16]
   12cc4:	mov	r2, r9
   12cc8:	mov	r3, r8
   12ccc:	bl	12cdc <__assert_fail@plt+0x196c>
   12cd0:	str	r6, [r4]
   12cd4:	sub	sp, fp, #28
   12cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ce0:	add	fp, sp, #28
   12ce4:	sub	sp, sp, #156	; 0x9c
   12ce8:	str	r0, [fp, #-84]	; 0xffffffac
   12cec:	add	r0, r2, #1
   12cf0:	mov	r6, r1
   12cf4:	mov	r7, r3
   12cf8:	str	r2, [fp, #-80]	; 0xffffffb0
   12cfc:	str	r0, [sp, #80]	; 0x50
   12d00:	ldr	r0, [fp, #12]
   12d04:	and	r1, r0, #1
   12d08:	str	r1, [sp, #36]	; 0x24
   12d0c:	and	r1, r0, #4
   12d10:	str	r1, [sp, #32]
   12d14:	ubfx	r8, r0, #1, #1
   12d18:	bl	111a8 <__ctype_get_mb_cur_max@plt>
   12d1c:	str	r0, [sp, #40]	; 0x28
   12d20:	ldr	r0, [fp, #24]
   12d24:	ldr	r4, [fp, #8]
   12d28:	mov	r1, #0
   12d2c:	str	r1, [fp, #-52]	; 0xffffffcc
   12d30:	mov	r1, #0
   12d34:	str	r1, [sp, #60]	; 0x3c
   12d38:	mov	r1, #1
   12d3c:	str	r1, [sp, #84]	; 0x54
   12d40:	str	r0, [sp, #76]	; 0x4c
   12d44:	ldr	r0, [fp, #20]
   12d48:	str	r0, [sp, #72]	; 0x48
   12d4c:	mov	r0, #0
   12d50:	str	r0, [sp, #56]	; 0x38
   12d54:	mov	r0, #0
   12d58:	str	r0, [fp, #-88]	; 0xffffffa8
   12d5c:	mov	r0, #0
   12d60:	str	r0, [fp, #-72]	; 0xffffffb8
   12d64:	mov	r0, #0
   12d68:	cmp	r4, #10
   12d6c:	bhi	14088 <__assert_fail@plt+0x2d18>
   12d70:	add	r1, pc, #24
   12d74:	ldr	ip, [fp, #-84]	; 0xffffffac
   12d78:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12d7c:	mov	r5, r6
   12d80:	mov	r9, #0
   12d84:	mov	r2, #1
   12d88:	mov	r3, #0
   12d8c:	ldr	pc, [r1, r4, lsl #2]
   12d90:	andeq	r2, r1, r8, asr lr
   12d94:	muleq	r1, r4, lr
   12d98:	andeq	r2, r1, r8, ror #28
   12d9c:	andeq	r2, r1, r0, asr lr
   12da0:	andeq	r2, r1, r8, lsl #29
   12da4:	andeq	r2, r1, ip, ror #29
   12da8:	andeq	r2, r1, r8, ror lr
   12dac:	andeq	r3, r1, r4, ror #2
   12db0:			; <UNDEFINED> instruction: 0x00012dbc
   12db4:			; <UNDEFINED> instruction: 0x00012dbc
   12db8:	strdeq	r2, [r1], -r4
   12dbc:	movw	r6, #30118	; 0x75a6
   12dc0:	mov	r0, #0
   12dc4:	mov	r2, #5
   12dc8:	movt	r6, #1
   12dcc:	mov	r1, r6
   12dd0:	bl	11148 <dcgettext@plt>
   12dd4:	cmp	r0, r6
   12dd8:	str	r0, [sp, #72]	; 0x48
   12ddc:	bne	12fcc <__assert_fail@plt+0x1c5c>
   12de0:	bl	16660 <__assert_fail@plt+0x52f0>
   12de4:	ldrb	r1, [r0]
   12de8:	and	r1, r1, #223	; 0xdf
   12dec:	cmp	r1, #71	; 0x47
   12df0:	beq	12f4c <__assert_fail@plt+0x1bdc>
   12df4:	cmp	r1, #85	; 0x55
   12df8:	bne	12fb0 <__assert_fail@plt+0x1c40>
   12dfc:	ldrb	r1, [r0, #1]
   12e00:	and	r1, r1, #223	; 0xdf
   12e04:	cmp	r1, #84	; 0x54
   12e08:	bne	12fb0 <__assert_fail@plt+0x1c40>
   12e0c:	ldrb	r1, [r0, #2]
   12e10:	and	r1, r1, #223	; 0xdf
   12e14:	cmp	r1, #70	; 0x46
   12e18:	bne	12fb0 <__assert_fail@plt+0x1c40>
   12e1c:	ldrb	r1, [r0, #3]
   12e20:	cmp	r1, #45	; 0x2d
   12e24:	bne	12fb0 <__assert_fail@plt+0x1c40>
   12e28:	ldrb	r1, [r0, #4]
   12e2c:	cmp	r1, #56	; 0x38
   12e30:	bne	12fb0 <__assert_fail@plt+0x1c40>
   12e34:	ldrb	r0, [r0, #5]
   12e38:	cmp	r0, #0
   12e3c:	movw	r0, #30122	; 0x75aa
   12e40:	movt	r0, #1
   12e44:	str	r0, [sp, #72]	; 0x48
   12e48:	bne	12fb0 <__assert_fail@plt+0x1c40>
   12e4c:	b	12fcc <__assert_fail@plt+0x1c5c>
   12e50:	mov	r0, #1
   12e54:	b	12e94 <__assert_fail@plt+0x1b24>
   12e58:	mov	r4, #0
   12e5c:	mov	r9, #0
   12e60:	mov	r2, r0
   12e64:	b	12ee4 <__assert_fail@plt+0x1b74>
   12e68:	tst	r8, #1
   12e6c:	bne	12e94 <__assert_fail@plt+0x1b24>
   12e70:	mov	r2, r0
   12e74:	b	12ebc <__assert_fail@plt+0x1b4c>
   12e78:	mov	r0, #1
   12e7c:	mov	r9, #0
   12e80:	mov	r4, #5
   12e84:	b	12f00 <__assert_fail@plt+0x1b90>
   12e88:	mov	r2, #1
   12e8c:	tst	r8, #1
   12e90:	beq	12ebc <__assert_fail@plt+0x1b4c>
   12e94:	mov	r1, #1
   12e98:	mov	r9, #0
   12e9c:	mov	r4, #2
   12ea0:	mov	r2, r0
   12ea4:	mov	r3, #1
   12ea8:	str	r1, [fp, #-72]	; 0xffffffb8
   12eac:	movw	r1, #30120	; 0x75a8
   12eb0:	movt	r1, #1
   12eb4:	str	r1, [fp, #-88]	; 0xffffffa8
   12eb8:	b	13164 <__assert_fail@plt+0x1df4>
   12ebc:	cmp	r5, #0
   12ec0:	mov	r9, #1
   12ec4:	mov	r4, #2
   12ec8:	movne	r0, #39	; 0x27
   12ecc:	strbne	r0, [ip]
   12ed0:	movw	r0, #30120	; 0x75a8
   12ed4:	movt	r0, #1
   12ed8:	str	r0, [fp, #-88]	; 0xffffffa8
   12edc:	mov	r0, #1
   12ee0:	str	r0, [fp, #-72]	; 0xffffffb8
   12ee4:	mov	r3, #0
   12ee8:	b	13164 <__assert_fail@plt+0x1df4>
   12eec:	mov	r4, #5
   12ef0:	tst	r8, #1
   12ef4:	beq	12f1c <__assert_fail@plt+0x1bac>
   12ef8:	mov	r0, #1
   12efc:	mov	r9, #0
   12f00:	str	r0, [fp, #-72]	; 0xffffffb8
   12f04:	movw	r0, #30116	; 0x75a4
   12f08:	mov	r2, #1
   12f0c:	mov	r3, #1
   12f10:	movt	r0, #1
   12f14:	str	r0, [fp, #-88]	; 0xffffffa8
   12f18:	b	13164 <__assert_fail@plt+0x1df4>
   12f1c:	cmp	r5, #0
   12f20:	mov	r3, #0
   12f24:	mov	r9, #1
   12f28:	mov	r2, #1
   12f2c:	movne	r0, #34	; 0x22
   12f30:	strbne	r0, [ip]
   12f34:	movw	r0, #30116	; 0x75a4
   12f38:	movt	r0, #1
   12f3c:	str	r0, [fp, #-88]	; 0xffffffa8
   12f40:	mov	r0, #1
   12f44:	str	r0, [fp, #-72]	; 0xffffffb8
   12f48:	b	13164 <__assert_fail@plt+0x1df4>
   12f4c:	ldrb	r1, [r0, #1]
   12f50:	and	r1, r1, #223	; 0xdf
   12f54:	cmp	r1, #66	; 0x42
   12f58:	bne	12fb0 <__assert_fail@plt+0x1c40>
   12f5c:	ldrb	r1, [r0, #2]
   12f60:	cmp	r1, #49	; 0x31
   12f64:	bne	12fb0 <__assert_fail@plt+0x1c40>
   12f68:	ldrb	r1, [r0, #3]
   12f6c:	cmp	r1, #56	; 0x38
   12f70:	bne	12fb0 <__assert_fail@plt+0x1c40>
   12f74:	ldrb	r1, [r0, #4]
   12f78:	cmp	r1, #48	; 0x30
   12f7c:	bne	12fb0 <__assert_fail@plt+0x1c40>
   12f80:	ldrb	r1, [r0, #5]
   12f84:	cmp	r1, #51	; 0x33
   12f88:	bne	12fb0 <__assert_fail@plt+0x1c40>
   12f8c:	ldrb	r1, [r0, #6]
   12f90:	cmp	r1, #48	; 0x30
   12f94:	bne	12fb0 <__assert_fail@plt+0x1c40>
   12f98:	ldrb	r0, [r0, #7]
   12f9c:	cmp	r0, #0
   12fa0:	movw	r0, #30130	; 0x75b2
   12fa4:	movt	r0, #1
   12fa8:	str	r0, [sp, #72]	; 0x48
   12fac:	beq	12fcc <__assert_fail@plt+0x1c5c>
   12fb0:	movw	r1, #30116	; 0x75a4
   12fb4:	movw	r0, #30120	; 0x75a8
   12fb8:	cmp	r4, #9
   12fbc:	movt	r1, #1
   12fc0:	movt	r0, #1
   12fc4:	moveq	r0, r1
   12fc8:	str	r0, [sp, #72]	; 0x48
   12fcc:	movw	r6, #30120	; 0x75a8
   12fd0:	mov	r0, #0
   12fd4:	mov	r2, #5
   12fd8:	movt	r6, #1
   12fdc:	mov	r1, r6
   12fe0:	bl	11148 <dcgettext@plt>
   12fe4:	cmp	r0, r6
   12fe8:	str	r0, [sp, #76]	; 0x4c
   12fec:	beq	13038 <__assert_fail@plt+0x1cc8>
   12ff0:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ff4:	mov	r9, #0
   12ff8:	tst	r8, #1
   12ffc:	bne	13140 <__assert_fail@plt+0x1dd0>
   13000:	ldr	r0, [sp, #72]	; 0x48
   13004:	ldrb	r0, [r0]
   13008:	cmp	r0, #0
   1300c:	beq	13140 <__assert_fail@plt+0x1dd0>
   13010:	ldr	r1, [sp, #72]	; 0x48
   13014:	mov	r9, #0
   13018:	add	r1, r1, #1
   1301c:	cmp	r9, r5
   13020:	strbcc	r0, [ip, r9]
   13024:	ldrb	r0, [r1, r9]
   13028:	add	r9, r9, #1
   1302c:	cmp	r0, #0
   13030:	bne	1301c <__assert_fail@plt+0x1cac>
   13034:	b	13140 <__assert_fail@plt+0x1dd0>
   13038:	bl	16660 <__assert_fail@plt+0x52f0>
   1303c:	ldrb	r1, [r0]
   13040:	and	r1, r1, #223	; 0xdf
   13044:	cmp	r1, #71	; 0x47
   13048:	beq	130b8 <__assert_fail@plt+0x1d48>
   1304c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13050:	cmp	r1, #85	; 0x55
   13054:	bne	13114 <__assert_fail@plt+0x1da4>
   13058:	ldrb	r1, [r0, #1]
   1305c:	and	r1, r1, #223	; 0xdf
   13060:	cmp	r1, #84	; 0x54
   13064:	bne	13114 <__assert_fail@plt+0x1da4>
   13068:	ldrb	r1, [r0, #2]
   1306c:	and	r1, r1, #223	; 0xdf
   13070:	cmp	r1, #70	; 0x46
   13074:	bne	13114 <__assert_fail@plt+0x1da4>
   13078:	ldrb	r1, [r0, #3]
   1307c:	cmp	r1, #45	; 0x2d
   13080:	bne	13114 <__assert_fail@plt+0x1da4>
   13084:	ldrb	r1, [r0, #4]
   13088:	cmp	r1, #56	; 0x38
   1308c:	bne	13114 <__assert_fail@plt+0x1da4>
   13090:	ldrb	r0, [r0, #5]
   13094:	cmp	r0, #0
   13098:	bne	13114 <__assert_fail@plt+0x1da4>
   1309c:	movw	r0, #30126	; 0x75ae
   130a0:	movt	r0, #1
   130a4:	str	r0, [sp, #76]	; 0x4c
   130a8:	mov	r9, #0
   130ac:	tst	r8, #1
   130b0:	beq	13000 <__assert_fail@plt+0x1c90>
   130b4:	b	13140 <__assert_fail@plt+0x1dd0>
   130b8:	ldrb	r1, [r0, #1]
   130bc:	ldr	ip, [fp, #-84]	; 0xffffffac
   130c0:	and	r1, r1, #223	; 0xdf
   130c4:	cmp	r1, #66	; 0x42
   130c8:	bne	13114 <__assert_fail@plt+0x1da4>
   130cc:	ldrb	r1, [r0, #2]
   130d0:	cmp	r1, #49	; 0x31
   130d4:	bne	13114 <__assert_fail@plt+0x1da4>
   130d8:	ldrb	r1, [r0, #3]
   130dc:	cmp	r1, #56	; 0x38
   130e0:	bne	13114 <__assert_fail@plt+0x1da4>
   130e4:	ldrb	r1, [r0, #4]
   130e8:	cmp	r1, #48	; 0x30
   130ec:	bne	13114 <__assert_fail@plt+0x1da4>
   130f0:	ldrb	r1, [r0, #5]
   130f4:	cmp	r1, #51	; 0x33
   130f8:	bne	13114 <__assert_fail@plt+0x1da4>
   130fc:	ldrb	r1, [r0, #6]
   13100:	cmp	r1, #48	; 0x30
   13104:	bne	13114 <__assert_fail@plt+0x1da4>
   13108:	ldrb	r0, [r0, #7]
   1310c:	cmp	r0, #0
   13110:	beq	13f28 <__assert_fail@plt+0x2bb8>
   13114:	movw	r0, #30120	; 0x75a8
   13118:	cmp	r4, #9
   1311c:	movt	r0, #1
   13120:	mov	r1, r0
   13124:	movw	r0, #30116	; 0x75a4
   13128:	movt	r0, #1
   1312c:	moveq	r1, r0
   13130:	str	r1, [sp, #76]	; 0x4c
   13134:	mov	r9, #0
   13138:	tst	r8, #1
   1313c:	beq	13000 <__assert_fail@plt+0x1c90>
   13140:	ldr	r6, [sp, #76]	; 0x4c
   13144:	mov	r0, r6
   13148:	bl	1125c <strlen@plt>
   1314c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13150:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13154:	str	r0, [fp, #-72]	; 0xffffffb8
   13158:	str	r6, [fp, #-88]	; 0xffffffa8
   1315c:	mov	r2, #1
   13160:	mov	r3, r8
   13164:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13168:	str	r4, [fp, #-64]	; 0xffffffc0
   1316c:	mov	sl, #0
   13170:	str	r3, [fp, #-76]	; 0xffffffb4
   13174:	str	r2, [sp, #88]	; 0x58
   13178:	cmp	r0, #0
   1317c:	movwne	r0, #1
   13180:	and	r1, r0, r3
   13184:	and	r1, r2, r1
   13188:	str	r1, [sp, #48]	; 0x30
   1318c:	sub	r1, r4, #2
   13190:	clz	r1, r1
   13194:	lsr	r1, r1, #5
   13198:	and	r1, r1, r3
   1319c:	str	r1, [sp, #44]	; 0x2c
   131a0:	subs	r1, r4, #2
   131a4:	eor	r4, r3, #1
   131a8:	movwne	r1, #1
   131ac:	str	r4, [sp, #92]	; 0x5c
   131b0:	orr	r4, r1, r4
   131b4:	and	r1, r1, r2
   131b8:	and	r0, r0, r1
   131bc:	str	r4, [sp, #64]	; 0x40
   131c0:	ldr	r4, [sp, #84]	; 0x54
   131c4:	str	r0, [fp, #-60]	; 0xffffffc4
   131c8:	orr	r0, r1, r3
   131cc:	ldr	r1, [fp, #16]
   131d0:	eor	r0, r0, #1
   131d4:	clz	r1, r1
   131d8:	lsr	r1, r1, #5
   131dc:	orr	r0, r1, r0
   131e0:	str	r0, [fp, #-68]	; 0xffffffbc
   131e4:	eor	r0, r2, #1
   131e8:	str	r0, [sp, #52]	; 0x34
   131ec:	cmn	r7, #1
   131f0:	beq	13200 <__assert_fail@plt+0x1e90>
   131f4:	cmp	sl, r7
   131f8:	bne	1320c <__assert_fail@plt+0x1e9c>
   131fc:	b	13ea0 <__assert_fail@plt+0x2b30>
   13200:	ldrb	r0, [lr, sl]
   13204:	cmp	r0, #0
   13208:	beq	13ea8 <__assert_fail@plt+0x2b38>
   1320c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13210:	cmp	r0, #0
   13214:	beq	13274 <__assert_fail@plt+0x1f04>
   13218:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1321c:	mov	r6, r5
   13220:	add	r5, sl, r0
   13224:	cmp	r0, #2
   13228:	bcc	13294 <__assert_fail@plt+0x1f24>
   1322c:	mov	r0, #0
   13230:	cmn	r7, #1
   13234:	str	r0, [fp, #-56]	; 0xffffffc8
   13238:	bne	13250 <__assert_fail@plt+0x1ee0>
   1323c:	mov	r0, lr
   13240:	bl	1125c <strlen@plt>
   13244:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13248:	ldr	ip, [fp, #-84]	; 0xffffffac
   1324c:	mov	r7, r0
   13250:	cmp	r5, r7
   13254:	bls	132a4 <__assert_fail@plt+0x1f34>
   13258:	mov	r0, #0
   1325c:	mov	r5, r6
   13260:	str	r0, [fp, #-48]	; 0xffffffd0
   13264:	ldrb	r6, [lr, sl]
   13268:	cmp	r6, #126	; 0x7e
   1326c:	bls	132f4 <__assert_fail@plt+0x1f84>
   13270:	b	13850 <__assert_fail@plt+0x24e0>
   13274:	mov	r0, #0
   13278:	str	r0, [fp, #-56]	; 0xffffffc8
   1327c:	mov	r0, #0
   13280:	str	r0, [fp, #-48]	; 0xffffffd0
   13284:	ldrb	r6, [lr, sl]
   13288:	cmp	r6, #126	; 0x7e
   1328c:	bls	132f4 <__assert_fail@plt+0x1f84>
   13290:	b	13850 <__assert_fail@plt+0x24e0>
   13294:	mov	r0, #0
   13298:	str	r0, [fp, #-56]	; 0xffffffc8
   1329c:	cmp	r5, r7
   132a0:	bhi	13258 <__assert_fail@plt+0x1ee8>
   132a4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   132a8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   132ac:	add	r0, lr, sl
   132b0:	bl	11244 <bcmp@plt>
   132b4:	ldr	r2, [sp, #92]	; 0x5c
   132b8:	cmp	r0, #0
   132bc:	mov	r1, r0
   132c0:	mov	r5, r6
   132c4:	movwne	r1, #1
   132c8:	orr	r1, r1, r2
   132cc:	tst	r1, #1
   132d0:	beq	13f68 <__assert_fail@plt+0x2bf8>
   132d4:	ldr	ip, [fp, #-84]	; 0xffffffac
   132d8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   132dc:	clz	r0, r0
   132e0:	lsr	r0, r0, #5
   132e4:	str	r0, [fp, #-48]	; 0xffffffd0
   132e8:	ldrb	r6, [lr, sl]
   132ec:	cmp	r6, #126	; 0x7e
   132f0:	bhi	13850 <__assert_fail@plt+0x24e0>
   132f4:	add	r3, pc, #16
   132f8:	mov	r8, #1
   132fc:	mov	r2, #110	; 0x6e
   13300:	mov	r0, #97	; 0x61
   13304:	mov	r1, #0
   13308:	ldr	pc, [r3, r6, lsl #2]
   1330c:	andeq	r3, r1, r8, lsl #12
   13310:	andeq	r3, r1, r0, asr r8
   13314:	andeq	r3, r1, r0, asr r8
   13318:	andeq	r3, r1, r0, asr r8
   1331c:	andeq	r3, r1, r0, asr r8
   13320:	andeq	r3, r1, r0, asr r8
   13324:	andeq	r3, r1, r0, asr r8
   13328:	andeq	r3, r1, r4, lsl #18
   1332c:	andeq	r3, r1, r8, ror #11
   13330:	andeq	r3, r1, r0, ror #11
   13334:	strdeq	r3, [r1], -r4
   13338:	andeq	r3, r1, r4, lsr #14
   1333c:	ldrdeq	r3, [r1], -r8
   13340:	strdeq	r3, [r1], -r0
   13344:	andeq	r3, r1, r0, asr r8
   13348:	andeq	r3, r1, r0, asr r8
   1334c:	andeq	r3, r1, r0, asr r8
   13350:	andeq	r3, r1, r0, asr r8
   13354:	andeq	r3, r1, r0, asr r8
   13358:	andeq	r3, r1, r0, asr r8
   1335c:	andeq	r3, r1, r0, asr r8
   13360:	andeq	r3, r1, r0, asr r8
   13364:	andeq	r3, r1, r0, asr r8
   13368:	andeq	r3, r1, r0, asr r8
   1336c:	andeq	r3, r1, r0, asr r8
   13370:	andeq	r3, r1, r0, asr r8
   13374:	andeq	r3, r1, r0, asr r8
   13378:	andeq	r3, r1, r0, asr r8
   1337c:	andeq	r3, r1, r0, asr r8
   13380:	andeq	r3, r1, r0, asr r8
   13384:	andeq	r3, r1, r0, asr r8
   13388:	andeq	r3, r1, r0, asr r8
   1338c:	andeq	r3, r1, ip, ror r5
   13390:	andeq	r3, r1, r0, lsl #11
   13394:	andeq	r3, r1, r0, lsl #11
   13398:	andeq	r3, r1, r0, ror r5
   1339c:	andeq	r3, r1, r0, lsl #11
   133a0:	andeq	r3, r1, r8, lsl #10
   133a4:	andeq	r3, r1, r0, lsl #11
   133a8:	andeq	r3, r1, ip, lsr #14
   133ac:	andeq	r3, r1, r0, lsl #11
   133b0:	andeq	r3, r1, r0, lsl #11
   133b4:	andeq	r3, r1, r0, lsl #11
   133b8:	andeq	r3, r1, r8, lsl #10
   133bc:	andeq	r3, r1, r8, lsl #10
   133c0:	andeq	r3, r1, r8, lsl #10
   133c4:	andeq	r3, r1, r8, lsl #10
   133c8:	andeq	r3, r1, r8, lsl #10
   133cc:	andeq	r3, r1, r8, lsl #10
   133d0:	andeq	r3, r1, r8, lsl #10
   133d4:	andeq	r3, r1, r8, lsl #10
   133d8:	andeq	r3, r1, r8, lsl #10
   133dc:	andeq	r3, r1, r8, lsl #10
   133e0:	andeq	r3, r1, r8, lsl #10
   133e4:	andeq	r3, r1, r8, lsl #10
   133e8:	andeq	r3, r1, r8, lsl #10
   133ec:	andeq	r3, r1, r8, lsl #10
   133f0:	andeq	r3, r1, r8, lsl #10
   133f4:	andeq	r3, r1, r8, lsl #10
   133f8:	andeq	r3, r1, r0, lsl #11
   133fc:	andeq	r3, r1, r0, lsl #11
   13400:	andeq	r3, r1, r0, lsl #11
   13404:	andeq	r3, r1, r0, lsl #11
   13408:	strdeq	r3, [r1], -r0
   1340c:	andeq	r3, r1, r0, asr r8
   13410:	andeq	r3, r1, r8, lsl #10
   13414:	andeq	r3, r1, r8, lsl #10
   13418:	andeq	r3, r1, r8, lsl #10
   1341c:	andeq	r3, r1, r8, lsl #10
   13420:	andeq	r3, r1, r8, lsl #10
   13424:	andeq	r3, r1, r8, lsl #10
   13428:	andeq	r3, r1, r8, lsl #10
   1342c:	andeq	r3, r1, r8, lsl #10
   13430:	andeq	r3, r1, r8, lsl #10
   13434:	andeq	r3, r1, r8, lsl #10
   13438:	andeq	r3, r1, r8, lsl #10
   1343c:	andeq	r3, r1, r8, lsl #10
   13440:	andeq	r3, r1, r8, lsl #10
   13444:	andeq	r3, r1, r8, lsl #10
   13448:	andeq	r3, r1, r8, lsl #10
   1344c:	andeq	r3, r1, r8, lsl #10
   13450:	andeq	r3, r1, r8, lsl #10
   13454:	andeq	r3, r1, r8, lsl #10
   13458:	andeq	r3, r1, r8, lsl #10
   1345c:	andeq	r3, r1, r8, lsl #10
   13460:	andeq	r3, r1, r8, lsl #10
   13464:	andeq	r3, r1, r8, lsl #10
   13468:	andeq	r3, r1, r8, lsl #10
   1346c:	andeq	r3, r1, r8, lsl #10
   13470:	andeq	r3, r1, r8, lsl #10
   13474:	andeq	r3, r1, r8, lsl #10
   13478:	andeq	r3, r1, r0, lsl #11
   1347c:			; <UNDEFINED> instruction: 0x000135b4
   13480:	andeq	r3, r1, r8, lsl #10
   13484:	andeq	r3, r1, r0, lsl #11
   13488:	andeq	r3, r1, r8, lsl #10
   1348c:	andeq	r3, r1, r0, lsl #11
   13490:	andeq	r3, r1, r8, lsl #10
   13494:	andeq	r3, r1, r8, lsl #10
   13498:	andeq	r3, r1, r8, lsl #10
   1349c:	andeq	r3, r1, r8, lsl #10
   134a0:	andeq	r3, r1, r8, lsl #10
   134a4:	andeq	r3, r1, r8, lsl #10
   134a8:	andeq	r3, r1, r8, lsl #10
   134ac:	andeq	r3, r1, r8, lsl #10
   134b0:	andeq	r3, r1, r8, lsl #10
   134b4:	andeq	r3, r1, r8, lsl #10
   134b8:	andeq	r3, r1, r8, lsl #10
   134bc:	andeq	r3, r1, r8, lsl #10
   134c0:	andeq	r3, r1, r8, lsl #10
   134c4:	andeq	r3, r1, r8, lsl #10
   134c8:	andeq	r3, r1, r8, lsl #10
   134cc:	andeq	r3, r1, r8, lsl #10
   134d0:	andeq	r3, r1, r8, lsl #10
   134d4:	andeq	r3, r1, r8, lsl #10
   134d8:	andeq	r3, r1, r8, lsl #10
   134dc:	andeq	r3, r1, r8, lsl #10
   134e0:	andeq	r3, r1, r8, lsl #10
   134e4:	andeq	r3, r1, r8, lsl #10
   134e8:	andeq	r3, r1, r8, lsl #10
   134ec:	andeq	r3, r1, r8, lsl #10
   134f0:	andeq	r3, r1, r8, lsl #10
   134f4:	andeq	r3, r1, r8, lsl #10
   134f8:	andeq	r3, r1, r8, asr #10
   134fc:	andeq	r3, r1, r0, lsl #11
   13500:	andeq	r3, r1, r8, asr #10
   13504:	andeq	r3, r1, r0, ror r5
   13508:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1350c:	tst	r0, #1
   13510:	bne	137c8 <__assert_fail@plt+0x2458>
   13514:	ldr	r1, [fp, #16]
   13518:	ubfx	r0, r6, #5, #3
   1351c:	mov	r2, #1
   13520:	ldr	r0, [r1, r0, lsl #2]
   13524:	and	r1, r6, #31
   13528:	tst	r0, r2, lsl r1
   1352c:	beq	137c8 <__assert_fail@plt+0x2458>
   13530:	mov	r0, r6
   13534:	mov	r1, r8
   13538:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1353c:	tst	r2, #1
   13540:	beq	137e8 <__assert_fail@plt+0x2478>
   13544:	b	13f44 <__assert_fail@plt+0x2bd4>
   13548:	cmp	r7, #1
   1354c:	beq	13570 <__assert_fail@plt+0x2200>
   13550:	mov	r8, #0
   13554:	cmn	r7, #1
   13558:	bne	137b4 <__assert_fail@plt+0x2444>
   1355c:	ldrb	r0, [lr, #1]
   13560:	cmp	r0, #0
   13564:	beq	13570 <__assert_fail@plt+0x2200>
   13568:	mvn	r7, #0
   1356c:	b	137b4 <__assert_fail@plt+0x2444>
   13570:	mov	r8, #0
   13574:	cmp	sl, #0
   13578:	bne	137b4 <__assert_fail@plt+0x2444>
   1357c:	mov	r1, #1
   13580:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13584:	cmp	r0, #2
   13588:	bne	135a0 <__assert_fail@plt+0x2230>
   1358c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13590:	mov	r8, r1
   13594:	tst	r0, #1
   13598:	beq	13508 <__assert_fail@plt+0x2198>
   1359c:	b	13f44 <__assert_fail@plt+0x2bd4>
   135a0:	mov	r8, r1
   135a4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   135a8:	tst	r0, #1
   135ac:	beq	13514 <__assert_fail@plt+0x21a4>
   135b0:	b	137c8 <__assert_fail@plt+0x2458>
   135b4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   135b8:	cmp	r0, #2
   135bc:	bne	1387c <__assert_fail@plt+0x250c>
   135c0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   135c4:	tst	r0, #1
   135c8:	bne	13f44 <__assert_fail@plt+0x2bd4>
   135cc:	mov	r0, #0
   135d0:	str	r0, [fp, #-56]	; 0xffffffc8
   135d4:	b	13894 <__assert_fail@plt+0x2524>
   135d8:	mov	r0, #102	; 0x66
   135dc:	b	13904 <__assert_fail@plt+0x2594>
   135e0:	mov	r2, #116	; 0x74
   135e4:	b	135f4 <__assert_fail@plt+0x2284>
   135e8:	mov	r0, #98	; 0x62
   135ec:	b	13904 <__assert_fail@plt+0x2594>
   135f0:	mov	r2, #114	; 0x72
   135f4:	ldr	r0, [sp, #64]	; 0x40
   135f8:	tst	r0, #1
   135fc:	mov	r0, r2
   13600:	bne	13904 <__assert_fail@plt+0x2594>
   13604:	b	13f44 <__assert_fail@plt+0x2bd4>
   13608:	ldr	r0, [sp, #88]	; 0x58
   1360c:	tst	r0, #1
   13610:	beq	13924 <__assert_fail@plt+0x25b4>
   13614:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13618:	tst	r0, #1
   1361c:	bne	14080 <__assert_fail@plt+0x2d10>
   13620:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13624:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13628:	subs	r0, r0, #2
   1362c:	movwne	r0, #1
   13630:	orr	r0, r0, r1
   13634:	tst	r0, #1
   13638:	bne	13674 <__assert_fail@plt+0x2304>
   1363c:	cmp	r9, r5
   13640:	movcc	r0, #39	; 0x27
   13644:	strbcc	r0, [ip, r9]
   13648:	add	r0, r9, #1
   1364c:	cmp	r0, r5
   13650:	movcc	r1, #36	; 0x24
   13654:	strbcc	r1, [ip, r0]
   13658:	add	r0, r9, #2
   1365c:	add	r9, r9, #3
   13660:	cmp	r0, r5
   13664:	movcc	r1, #39	; 0x27
   13668:	strbcc	r1, [ip, r0]
   1366c:	mov	r0, #1
   13670:	str	r0, [fp, #-52]	; 0xffffffcc
   13674:	mov	r1, #1
   13678:	cmp	r9, r5
   1367c:	mov	r8, #0
   13680:	mov	r6, #48	; 0x30
   13684:	str	r1, [fp, #-56]	; 0xffffffc8
   13688:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1368c:	movcc	r0, #92	; 0x5c
   13690:	strbcc	r0, [ip, r9]
   13694:	add	r0, r9, #1
   13698:	cmp	r1, #2
   1369c:	beq	13af0 <__assert_fail@plt+0x2780>
   136a0:	add	r1, sl, #1
   136a4:	cmp	r1, r7
   136a8:	bcs	13af0 <__assert_fail@plt+0x2780>
   136ac:	ldrb	r1, [lr, r1]
   136b0:	sub	r1, r1, #48	; 0x30
   136b4:	uxtb	r1, r1
   136b8:	cmp	r1, #9
   136bc:	bhi	13af0 <__assert_fail@plt+0x2780>
   136c0:	cmp	r0, r5
   136c4:	movcc	r1, #48	; 0x30
   136c8:	strbcc	r1, [ip, r0]
   136cc:	add	r0, r9, #2
   136d0:	add	r9, r9, #3
   136d4:	cmp	r0, r5
   136d8:	movcc	r1, #48	; 0x30
   136dc:	strbcc	r1, [ip, r0]
   136e0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   136e4:	tst	r0, #1
   136e8:	beq	13514 <__assert_fail@plt+0x21a4>
   136ec:	b	137c8 <__assert_fail@plt+0x2458>
   136f0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   136f4:	mov	r6, #63	; 0x3f
   136f8:	cmp	r0, #5
   136fc:	beq	13b04 <__assert_fail@plt+0x2794>
   13700:	mov	r1, #0
   13704:	cmp	r0, #2
   13708:	str	r1, [fp, #-56]	; 0xffffffc8
   1370c:	bne	13bcc <__assert_fail@plt+0x285c>
   13710:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13714:	mov	r8, #0
   13718:	tst	r0, #1
   1371c:	beq	13508 <__assert_fail@plt+0x2198>
   13720:	b	13f44 <__assert_fail@plt+0x2bd4>
   13724:	mov	r0, #118	; 0x76
   13728:	b	13904 <__assert_fail@plt+0x2594>
   1372c:	mov	r0, #1
   13730:	mov	r6, #39	; 0x27
   13734:	str	r0, [sp, #60]	; 0x3c
   13738:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1373c:	cmp	r0, #2
   13740:	bne	13944 <__assert_fail@plt+0x25d4>
   13744:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13748:	tst	r0, #1
   1374c:	bne	13f44 <__assert_fail@plt+0x2bd4>
   13750:	ldr	r2, [sp, #56]	; 0x38
   13754:	clz	r1, r5
   13758:	mov	r8, #1
   1375c:	lsr	r1, r1, #5
   13760:	cmp	r2, #0
   13764:	mov	r0, r2
   13768:	movwne	r0, #1
   1376c:	orrs	r0, r0, r1
   13770:	moveq	r2, r5
   13774:	moveq	r5, r0
   13778:	cmp	r9, r5
   1377c:	str	r2, [sp, #56]	; 0x38
   13780:	movcc	r0, #39	; 0x27
   13784:	strbcc	r0, [ip, r9]
   13788:	add	r0, r9, #1
   1378c:	cmp	r0, r5
   13790:	movcc	r1, #92	; 0x5c
   13794:	strbcc	r1, [ip, r0]
   13798:	add	r0, r9, #2
   1379c:	add	r9, r9, #3
   137a0:	cmp	r0, r5
   137a4:	movcc	r1, #39	; 0x27
   137a8:	strbcc	r1, [ip, r0]
   137ac:	mov	r0, #0
   137b0:	str	r0, [fp, #-52]	; 0xffffffcc
   137b4:	mov	r0, #0
   137b8:	str	r0, [fp, #-56]	; 0xffffffc8
   137bc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   137c0:	tst	r0, #1
   137c4:	beq	13514 <__assert_fail@plt+0x21a4>
   137c8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   137cc:	mov	r1, r8
   137d0:	cmp	r0, #0
   137d4:	mov	r0, r6
   137d8:	beq	1389c <__assert_fail@plt+0x252c>
   137dc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   137e0:	tst	r2, #1
   137e4:	bne	13f44 <__assert_fail@plt+0x2bd4>
   137e8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   137ec:	ldr	r3, [fp, #-52]	; 0xffffffcc
   137f0:	subs	r2, r2, #2
   137f4:	movwne	r2, #1
   137f8:	orr	r2, r2, r3
   137fc:	tst	r2, #1
   13800:	bne	1383c <__assert_fail@plt+0x24cc>
   13804:	cmp	r9, r5
   13808:	movcc	r2, #39	; 0x27
   1380c:	strbcc	r2, [ip, r9]
   13810:	add	r2, r9, #1
   13814:	cmp	r2, r5
   13818:	movcc	r3, #36	; 0x24
   1381c:	strbcc	r3, [ip, r2]
   13820:	add	r2, r9, #2
   13824:	add	r9, r9, #3
   13828:	cmp	r2, r5
   1382c:	movcc	r3, #39	; 0x27
   13830:	strbcc	r3, [ip, r2]
   13834:	mov	r2, #1
   13838:	str	r2, [fp, #-52]	; 0xffffffcc
   1383c:	cmp	r9, r5
   13840:	movcc	r2, #92	; 0x5c
   13844:	strbcc	r2, [ip, r9]
   13848:	add	r9, r9, #1
   1384c:	b	138e4 <__assert_fail@plt+0x2574>
   13850:	ldr	r0, [sp, #40]	; 0x28
   13854:	cmp	r0, #1
   13858:	bne	13958 <__assert_fail@plt+0x25e8>
   1385c:	bl	1122c <__ctype_b_loc@plt>
   13860:	ldr	r0, [r0]
   13864:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13868:	mov	r1, #1
   1386c:	add	r0, r0, r6, lsl #1
   13870:	ldrb	r0, [r0, #1]
   13874:	ubfx	r8, r0, #6, #1
   13878:	b	13cb0 <__assert_fail@plt+0x2940>
   1387c:	ldr	r1, [sp, #48]	; 0x30
   13880:	mov	r0, #0
   13884:	str	r0, [fp, #-56]	; 0xffffffc8
   13888:	mov	r0, #92	; 0x5c
   1388c:	cmp	r1, #0
   13890:	beq	13904 <__assert_fail@plt+0x2594>
   13894:	mov	r6, #92	; 0x5c
   13898:	mov	r8, #0
   1389c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   138a0:	cmp	r0, #0
   138a4:	bne	138dc <__assert_fail@plt+0x256c>
   138a8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   138ac:	tst	r0, #1
   138b0:	beq	138dc <__assert_fail@plt+0x256c>
   138b4:	cmp	r9, r5
   138b8:	movcc	r0, #39	; 0x27
   138bc:	strbcc	r0, [ip, r9]
   138c0:	add	r0, r9, #1
   138c4:	add	r9, r9, #2
   138c8:	cmp	r0, r5
   138cc:	movcc	r1, #39	; 0x27
   138d0:	strbcc	r1, [ip, r0]
   138d4:	mov	r0, #0
   138d8:	str	r0, [fp, #-52]	; 0xffffffcc
   138dc:	mov	r1, r8
   138e0:	mov	r0, r6
   138e4:	cmp	r9, r5
   138e8:	and	r4, r4, r1
   138ec:	strbcc	r0, [ip, r9]
   138f0:	add	r9, r9, #1
   138f4:	add	sl, sl, #1
   138f8:	cmn	r7, #1
   138fc:	bne	131f4 <__assert_fail@plt+0x1e84>
   13900:	b	13200 <__assert_fail@plt+0x1e90>
   13904:	mov	r1, #0
   13908:	mov	r8, #0
   1390c:	str	r1, [fp, #-56]	; 0xffffffc8
   13910:	ldr	r1, [sp, #88]	; 0x58
   13914:	tst	r1, #1
   13918:	mov	r1, #0
   1391c:	beq	13508 <__assert_fail@plt+0x2198>
   13920:	b	137dc <__assert_fail@plt+0x246c>
   13924:	ldr	r0, [sp, #36]	; 0x24
   13928:	mov	r6, #0
   1392c:	mov	r8, #0
   13930:	cmp	r0, #0
   13934:	mov	r0, #0
   13938:	str	r0, [fp, #-56]	; 0xffffffc8
   1393c:	bne	138f4 <__assert_fail@plt+0x2584>
   13940:	b	13508 <__assert_fail@plt+0x2198>
   13944:	mov	r8, #1
   13948:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1394c:	tst	r0, #1
   13950:	beq	13514 <__assert_fail@plt+0x21a4>
   13954:	b	137c8 <__assert_fail@plt+0x2458>
   13958:	mov	r0, #0
   1395c:	cmn	r7, #1
   13960:	str	r0, [fp, #-36]	; 0xffffffdc
   13964:	str	r0, [fp, #-40]	; 0xffffffd8
   13968:	bne	1397c <__assert_fail@plt+0x260c>
   1396c:	mov	r0, lr
   13970:	bl	1125c <strlen@plt>
   13974:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13978:	mov	r7, r0
   1397c:	ldr	r0, [sp, #44]	; 0x2c
   13980:	str	r4, [sp, #84]	; 0x54
   13984:	str	r5, [sp, #28]
   13988:	cmp	r0, #0
   1398c:	beq	13be0 <__assert_fail@plt+0x2870>
   13990:	ldr	r0, [sp, #80]	; 0x50
   13994:	mov	r8, #1
   13998:	mov	r5, #0
   1399c:	add	r0, r0, sl
   139a0:	str	r0, [sp, #24]
   139a4:	sub	r0, fp, #40	; 0x28
   139a8:	mov	r3, r0
   139ac:	b	139e8 <__assert_fail@plt+0x2678>
   139b0:	ldr	r5, [sp, #68]	; 0x44
   139b4:	add	r5, r0, r5
   139b8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   139bc:	bl	11178 <iswprint@plt>
   139c0:	cmp	r0, #0
   139c4:	sub	r4, fp, #40	; 0x28
   139c8:	movwne	r0, #1
   139cc:	and	r8, r8, r0
   139d0:	mov	r0, r4
   139d4:	bl	1113c <mbsinit@plt>
   139d8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   139dc:	mov	r3, r4
   139e0:	cmp	r0, #0
   139e4:	bne	13ca4 <__assert_fail@plt+0x2934>
   139e8:	str	r5, [sp, #68]	; 0x44
   139ec:	add	r5, r5, sl
   139f0:	sub	r0, fp, #44	; 0x2c
   139f4:	add	r1, lr, r5
   139f8:	sub	r2, r7, r5
   139fc:	bl	16698 <__assert_fail@plt+0x5328>
   13a00:	cmn	r0, #2
   13a04:	beq	13c64 <__assert_fail@plt+0x28f4>
   13a08:	ldr	ip, [fp, #-84]	; 0xffffffac
   13a0c:	cmn	r0, #1
   13a10:	beq	13c58 <__assert_fail@plt+0x28e8>
   13a14:	cmp	r0, #0
   13a18:	beq	13c5c <__assert_fail@plt+0x28ec>
   13a1c:	cmp	r0, #2
   13a20:	bcc	139b0 <__assert_fail@plt+0x2640>
   13a24:	ldr	r1, [sp, #68]	; 0x44
   13a28:	ldr	r2, [sp, #24]
   13a2c:	add	r1, r2, r1
   13a30:	sub	r2, r0, #1
   13a34:	ldrb	r3, [r1]
   13a38:	sub	r3, r3, #91	; 0x5b
   13a3c:	cmp	r3, #33	; 0x21
   13a40:	bls	13a60 <__assert_fail@plt+0x26f0>
   13a44:	add	r1, r1, #1
   13a48:	subs	r2, r2, #1
   13a4c:	beq	139b0 <__assert_fail@plt+0x2640>
   13a50:	ldrb	r3, [r1]
   13a54:	sub	r3, r3, #91	; 0x5b
   13a58:	cmp	r3, #33	; 0x21
   13a5c:	bhi	13a44 <__assert_fail@plt+0x26d4>
   13a60:	add	r5, pc, #0
   13a64:	ldr	pc, [r5, r3, lsl #2]
   13a68:	andeq	r3, r1, ip, ror pc
   13a6c:	andeq	r3, r1, ip, ror pc
   13a70:	andeq	r3, r1, r4, asr #20
   13a74:	andeq	r3, r1, ip, ror pc
   13a78:	andeq	r3, r1, r4, asr #20
   13a7c:	andeq	r3, r1, ip, ror pc
   13a80:	andeq	r3, r1, r4, asr #20
   13a84:	andeq	r3, r1, r4, asr #20
   13a88:	andeq	r3, r1, r4, asr #20
   13a8c:	andeq	r3, r1, r4, asr #20
   13a90:	andeq	r3, r1, r4, asr #20
   13a94:	andeq	r3, r1, r4, asr #20
   13a98:	andeq	r3, r1, r4, asr #20
   13a9c:	andeq	r3, r1, r4, asr #20
   13aa0:	andeq	r3, r1, r4, asr #20
   13aa4:	andeq	r3, r1, r4, asr #20
   13aa8:	andeq	r3, r1, r4, asr #20
   13aac:	andeq	r3, r1, r4, asr #20
   13ab0:	andeq	r3, r1, r4, asr #20
   13ab4:	andeq	r3, r1, r4, asr #20
   13ab8:	andeq	r3, r1, r4, asr #20
   13abc:	andeq	r3, r1, r4, asr #20
   13ac0:	andeq	r3, r1, r4, asr #20
   13ac4:	andeq	r3, r1, r4, asr #20
   13ac8:	andeq	r3, r1, r4, asr #20
   13acc:	andeq	r3, r1, r4, asr #20
   13ad0:	andeq	r3, r1, r4, asr #20
   13ad4:	andeq	r3, r1, r4, asr #20
   13ad8:	andeq	r3, r1, r4, asr #20
   13adc:	andeq	r3, r1, r4, asr #20
   13ae0:	andeq	r3, r1, r4, asr #20
   13ae4:	andeq	r3, r1, r4, asr #20
   13ae8:	andeq	r3, r1, r4, asr #20
   13aec:	andeq	r3, r1, ip, ror pc
   13af0:	mov	r9, r0
   13af4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13af8:	tst	r0, #1
   13afc:	beq	13514 <__assert_fail@plt+0x21a4>
   13b00:	b	137c8 <__assert_fail@plt+0x2458>
   13b04:	mov	r0, #0
   13b08:	str	r0, [fp, #-56]	; 0xffffffc8
   13b0c:	ldr	r0, [sp, #32]
   13b10:	cmp	r0, #0
   13b14:	beq	13bcc <__assert_fail@plt+0x285c>
   13b18:	add	r0, sl, #2
   13b1c:	mov	r1, r7
   13b20:	cmp	r0, r7
   13b24:	bcs	13bcc <__assert_fail@plt+0x285c>
   13b28:	add	r1, sl, lr
   13b2c:	ldrb	r1, [r1, #1]
   13b30:	cmp	r1, #63	; 0x3f
   13b34:	bne	13bcc <__assert_fail@plt+0x285c>
   13b38:	ldrb	r8, [lr, r0]
   13b3c:	sub	r2, r8, #33	; 0x21
   13b40:	cmp	r2, #29
   13b44:	bhi	13bcc <__assert_fail@plt+0x285c>
   13b48:	mov	r1, r4
   13b4c:	movw	r4, #20929	; 0x51c1
   13b50:	mov	r3, #1
   13b54:	movt	r4, #14336	; 0x3800
   13b58:	tst	r4, r3, lsl r2
   13b5c:	beq	13e88 <__assert_fail@plt+0x2b18>
   13b60:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13b64:	tst	r2, #1
   13b68:	bne	13f44 <__assert_fail@plt+0x2bd4>
   13b6c:	cmp	r9, r5
   13b70:	mov	r6, r8
   13b74:	mov	r4, r1
   13b78:	mov	sl, r0
   13b7c:	mov	r8, #0
   13b80:	movcc	r2, #63	; 0x3f
   13b84:	strbcc	r2, [ip, r9]
   13b88:	add	r2, r9, #1
   13b8c:	cmp	r2, r5
   13b90:	movcc	r3, #34	; 0x22
   13b94:	strbcc	r3, [ip, r2]
   13b98:	add	r2, r9, #2
   13b9c:	cmp	r2, r5
   13ba0:	movcc	r3, #34	; 0x22
   13ba4:	strbcc	r3, [ip, r2]
   13ba8:	add	r2, r9, #3
   13bac:	add	r9, r9, #4
   13bb0:	cmp	r2, r5
   13bb4:	movcc	r3, #63	; 0x3f
   13bb8:	strbcc	r3, [ip, r2]
   13bbc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13bc0:	tst	r0, #1
   13bc4:	beq	13514 <__assert_fail@plt+0x21a4>
   13bc8:	b	137c8 <__assert_fail@plt+0x2458>
   13bcc:	mov	r8, #0
   13bd0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13bd4:	tst	r0, #1
   13bd8:	beq	13514 <__assert_fail@plt+0x21a4>
   13bdc:	b	137c8 <__assert_fail@plt+0x2458>
   13be0:	mov	r8, #1
   13be4:	mov	r5, #0
   13be8:	sub	r4, fp, #40	; 0x28
   13bec:	str	r5, [sp, #68]	; 0x44
   13bf0:	add	r5, r5, sl
   13bf4:	sub	r0, fp, #44	; 0x2c
   13bf8:	mov	r3, r4
   13bfc:	add	r1, lr, r5
   13c00:	sub	r2, r7, r5
   13c04:	bl	16698 <__assert_fail@plt+0x5328>
   13c08:	cmn	r0, #2
   13c0c:	beq	13c64 <__assert_fail@plt+0x28f4>
   13c10:	cmn	r0, #1
   13c14:	beq	13c58 <__assert_fail@plt+0x28e8>
   13c18:	ldr	r5, [sp, #68]	; 0x44
   13c1c:	cmp	r0, #0
   13c20:	beq	13ca0 <__assert_fail@plt+0x2930>
   13c24:	add	r5, r0, r5
   13c28:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13c2c:	bl	11178 <iswprint@plt>
   13c30:	cmp	r0, #0
   13c34:	sub	r4, fp, #40	; 0x28
   13c38:	movwne	r0, #1
   13c3c:	and	r8, r8, r0
   13c40:	mov	r0, r4
   13c44:	bl	1113c <mbsinit@plt>
   13c48:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13c4c:	cmp	r0, #0
   13c50:	beq	13bec <__assert_fail@plt+0x287c>
   13c54:	b	13ca4 <__assert_fail@plt+0x2934>
   13c58:	mov	r8, #0
   13c5c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13c60:	b	13c98 <__assert_fail@plt+0x2928>
   13c64:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13c68:	mov	r8, #0
   13c6c:	cmp	r5, r7
   13c70:	bcs	13c98 <__assert_fail@plt+0x2928>
   13c74:	ldrb	r0, [lr, r5]
   13c78:	cmp	r0, #0
   13c7c:	beq	13c98 <__assert_fail@plt+0x2928>
   13c80:	ldr	r0, [sp, #68]	; 0x44
   13c84:	add	r0, r0, #1
   13c88:	add	r5, r0, sl
   13c8c:	str	r0, [sp, #68]	; 0x44
   13c90:	cmp	r5, r7
   13c94:	bcc	13c74 <__assert_fail@plt+0x2904>
   13c98:	ldr	r5, [sp, #68]	; 0x44
   13c9c:	b	13ca4 <__assert_fail@plt+0x2934>
   13ca0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13ca4:	mov	r1, r5
   13ca8:	ldr	r5, [sp, #28]
   13cac:	ldr	r4, [sp, #84]	; 0x54
   13cb0:	ldr	r0, [sp, #52]	; 0x34
   13cb4:	ldr	ip, [fp, #-84]	; 0xffffffac
   13cb8:	cmp	r1, #1
   13cbc:	orr	r2, r8, r0
   13cc0:	mov	r0, r1
   13cc4:	bhi	13cd0 <__assert_fail@plt+0x2960>
   13cc8:	tst	r2, #1
   13ccc:	bne	13508 <__assert_fail@plt+0x2198>
   13cd0:	add	r0, r0, sl
   13cd4:	str	r2, [sp, #84]	; 0x54
   13cd8:	str	r0, [fp, #-56]	; 0xffffffc8
   13cdc:	mov	r0, #0
   13ce0:	tst	r2, #1
   13ce4:	bne	13dc4 <__assert_fail@plt+0x2a54>
   13ce8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13cec:	tst	r1, #1
   13cf0:	bne	13f44 <__assert_fail@plt+0x2bd4>
   13cf4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13cf8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13cfc:	subs	r2, r1, #2
   13d00:	movwne	r2, #1
   13d04:	orr	r2, r2, r0
   13d08:	tst	r2, #1
   13d0c:	bne	13d48 <__assert_fail@plt+0x29d8>
   13d10:	cmp	r9, r5
   13d14:	add	r2, r9, #1
   13d18:	mov	r0, #1
   13d1c:	movcc	r1, #39	; 0x27
   13d20:	str	r0, [fp, #-52]	; 0xffffffcc
   13d24:	strbcc	r1, [ip, r9]
   13d28:	cmp	r2, r5
   13d2c:	movcc	r1, #36	; 0x24
   13d30:	strbcc	r1, [ip, r2]
   13d34:	add	r2, r9, #2
   13d38:	add	r9, r9, #3
   13d3c:	cmp	r2, r5
   13d40:	movcc	r1, #39	; 0x27
   13d44:	strbcc	r1, [ip, r2]
   13d48:	cmp	r9, r5
   13d4c:	add	r2, r9, #1
   13d50:	movcc	r1, #92	; 0x5c
   13d54:	strbcc	r1, [ip, r9]
   13d58:	cmp	r2, r5
   13d5c:	bcs	13d70 <__assert_fail@plt+0x2a00>
   13d60:	uxtb	r3, r6
   13d64:	mov	r1, #48	; 0x30
   13d68:	orr	r3, r1, r3, lsr #6
   13d6c:	strb	r3, [ip, r2]
   13d70:	add	r2, r9, #2
   13d74:	add	r9, r9, #3
   13d78:	cmp	r2, r5
   13d7c:	lsrcc	r3, r6, #3
   13d80:	movcc	r1, #6
   13d84:	bficc	r3, r1, #3, #29
   13d88:	mov	r1, #6
   13d8c:	bfi	r6, r1, #3, #29
   13d90:	strbcc	r3, [ip, r2]
   13d94:	mov	r2, #1
   13d98:	b	13df8 <__assert_fail@plt+0x2a88>
   13d9c:	ldr	r1, [sp, #80]	; 0x50
   13da0:	cmp	r9, r2
   13da4:	mov	r5, r2
   13da8:	ldr	r2, [sp, #84]	; 0x54
   13dac:	strbcc	r6, [ip, r9]
   13db0:	add	r9, r9, #1
   13db4:	ldrb	r6, [r1, sl]
   13db8:	mov	sl, r3
   13dbc:	tst	r2, #1
   13dc0:	beq	13ce8 <__assert_fail@plt+0x2978>
   13dc4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   13dc8:	tst	r1, #1
   13dcc:	beq	13dec <__assert_fail@plt+0x2a7c>
   13dd0:	cmp	r9, r5
   13dd4:	mov	r2, r0
   13dd8:	movcc	r1, #92	; 0x5c
   13ddc:	strbcc	r1, [ip, r9]
   13de0:	add	r9, r9, #1
   13de4:	mov	r1, #0
   13de8:	b	13df4 <__assert_fail@plt+0x2a84>
   13dec:	mov	r1, #0
   13df0:	mov	r2, r0
   13df4:	str	r1, [fp, #-48]	; 0xffffffd0
   13df8:	mov	r0, r2
   13dfc:	and	r1, r2, #1
   13e00:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13e04:	add	r3, sl, #1
   13e08:	cmp	r2, r3
   13e0c:	bls	13e6c <__assert_fail@plt+0x2afc>
   13e10:	mov	r2, r5
   13e14:	ldr	r5, [fp, #-52]	; 0xffffffcc
   13e18:	cmp	r1, #0
   13e1c:	movwne	r1, #1
   13e20:	mvn	r5, r5
   13e24:	orr	r5, r5, r1
   13e28:	tst	r5, #1
   13e2c:	bne	13d9c <__assert_fail@plt+0x2a2c>
   13e30:	cmp	r9, r2
   13e34:	movcc	r5, r4
   13e38:	movcc	r4, #39	; 0x27
   13e3c:	strbcc	r4, [ip, r9]
   13e40:	movcc	r4, r5
   13e44:	add	r5, r9, #1
   13e48:	add	r9, r9, #2
   13e4c:	cmp	r5, r2
   13e50:	movcc	r1, r4
   13e54:	movcc	r4, #39	; 0x27
   13e58:	strbcc	r4, [ip, r5]
   13e5c:	movcc	r4, r1
   13e60:	mov	r1, #0
   13e64:	str	r1, [fp, #-52]	; 0xffffffcc
   13e68:	b	13d9c <__assert_fail@plt+0x2a2c>
   13e6c:	cmp	r1, #0
   13e70:	movwne	r1, #1
   13e74:	str	r1, [fp, #-56]	; 0xffffffc8
   13e78:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13e7c:	cmp	r0, #0
   13e80:	beq	138a8 <__assert_fail@plt+0x2538>
   13e84:	b	138dc <__assert_fail@plt+0x256c>
   13e88:	mov	r8, #0
   13e8c:	mov	r4, r1
   13e90:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13e94:	tst	r0, #1
   13e98:	beq	13514 <__assert_fail@plt+0x21a4>
   13e9c:	b	137c8 <__assert_fail@plt+0x2458>
   13ea0:	mov	r7, sl
   13ea4:	b	13eac <__assert_fail@plt+0x2b3c>
   13ea8:	mvn	r7, #0
   13eac:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13eb0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13eb4:	ldr	r2, [sp, #88]	; 0x58
   13eb8:	eor	r0, r1, #2
   13ebc:	orr	r0, r0, r9
   13ec0:	clz	r0, r0
   13ec4:	lsr	r0, r0, #5
   13ec8:	tst	r3, r0
   13ecc:	bne	13f44 <__assert_fail@plt+0x2bd4>
   13ed0:	subs	r0, r1, #2
   13ed4:	movwne	r0, #1
   13ed8:	orr	r0, r3, r0
   13edc:	tst	r0, #1
   13ee0:	ldreq	r0, [sp, #60]	; 0x3c
   13ee4:	eoreq	r0, r0, #1
   13ee8:	tsteq	r0, #1
   13eec:	bne	14020 <__assert_fail@plt+0x2cb0>
   13ef0:	tst	r4, #1
   13ef4:	bne	13fe4 <__assert_fail@plt+0x2c74>
   13ef8:	ldr	r6, [sp, #56]	; 0x38
   13efc:	mov	r8, #0
   13f00:	cmp	r6, #0
   13f04:	beq	1401c <__assert_fail@plt+0x2cac>
   13f08:	mov	r1, #0
   13f0c:	mov	r4, #2
   13f10:	cmp	r5, #0
   13f14:	mov	r0, r2
   13f18:	mov	r3, #0
   13f1c:	str	r1, [sp, #84]	; 0x54
   13f20:	beq	12d68 <__assert_fail@plt+0x19f8>
   13f24:	b	14020 <__assert_fail@plt+0x2cb0>
   13f28:	movw	r0, #30134	; 0x75b6
   13f2c:	movt	r0, #1
   13f30:	str	r0, [sp, #76]	; 0x4c
   13f34:	mov	r9, #0
   13f38:	tst	r8, #1
   13f3c:	beq	13000 <__assert_fail@plt+0x1c90>
   13f40:	b	13140 <__assert_fail@plt+0x1dd0>
   13f44:	ldr	r1, [sp, #88]	; 0x58
   13f48:	mov	r0, #2
   13f4c:	tst	r1, #1
   13f50:	movwne	r0, #4
   13f54:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13f58:	ldr	r1, [fp, #12]
   13f5c:	cmp	r2, #2
   13f60:	moveq	r2, r0
   13f64:	b	13f9c <__assert_fail@plt+0x2c2c>
   13f68:	ldr	ip, [fp, #-84]	; 0xffffffac
   13f6c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13f70:	ldr	r1, [fp, #12]
   13f74:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13f78:	b	13f9c <__assert_fail@plt+0x2c2c>
   13f7c:	ldr	r1, [sp, #88]	; 0x58
   13f80:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13f84:	ldr	r5, [sp, #28]
   13f88:	mov	r0, #2
   13f8c:	tst	r1, #1
   13f90:	ldr	r1, [fp, #12]
   13f94:	movwne	r0, #4
   13f98:	mov	r2, r0
   13f9c:	mov	r0, #0
   13fa0:	bic	r1, r1, #2
   13fa4:	str	r2, [sp]
   13fa8:	mov	r2, lr
   13fac:	str	r0, [sp, #8]
   13fb0:	ldr	r0, [sp, #72]	; 0x48
   13fb4:	str	r1, [sp, #4]
   13fb8:	mov	r1, r5
   13fbc:	str	r0, [sp, #12]
   13fc0:	ldr	r0, [sp, #76]	; 0x4c
   13fc4:	str	r0, [sp, #16]
   13fc8:	mov	r0, ip
   13fcc:	mov	r3, r7
   13fd0:	bl	12cdc <__assert_fail@plt+0x196c>
   13fd4:	mov	r9, r0
   13fd8:	mov	r0, r9
   13fdc:	sub	sp, fp, #28
   13fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fe4:	mov	r0, #5
   13fe8:	ldr	r1, [sp, #56]	; 0x38
   13fec:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13ff0:	str	r0, [sp]
   13ff4:	ldr	r0, [fp, #12]
   13ff8:	str	r0, [sp, #4]
   13ffc:	ldr	r0, [fp, #16]
   14000:	str	r0, [sp, #8]
   14004:	ldr	r0, [sp, #72]	; 0x48
   14008:	str	r0, [sp, #12]
   1400c:	ldr	r0, [sp, #76]	; 0x4c
   14010:	str	r0, [sp, #16]
   14014:	ldr	r0, [fp, #-84]	; 0xffffffac
   14018:	b	13fcc <__assert_fail@plt+0x2c5c>
   1401c:	mov	r3, #0
   14020:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14024:	cmp	r1, #0
   14028:	beq	14064 <__assert_fail@plt+0x2cf4>
   1402c:	ldr	r2, [fp, #-84]	; 0xffffffac
   14030:	tst	r3, #1
   14034:	bne	14068 <__assert_fail@plt+0x2cf8>
   14038:	ldrb	r0, [r1]
   1403c:	cmp	r0, #0
   14040:	beq	14068 <__assert_fail@plt+0x2cf8>
   14044:	add	r1, r1, #1
   14048:	cmp	r9, r5
   1404c:	strbcc	r0, [r2, r9]
   14050:	add	r9, r9, #1
   14054:	ldrb	r0, [r1], #1
   14058:	cmp	r0, #0
   1405c:	bne	14048 <__assert_fail@plt+0x2cd8>
   14060:	b	14068 <__assert_fail@plt+0x2cf8>
   14064:	ldr	r2, [fp, #-84]	; 0xffffffac
   14068:	cmp	r9, r5
   1406c:	movcc	r0, #0
   14070:	strbcc	r0, [r2, r9]
   14074:	mov	r0, r9
   14078:	sub	sp, fp, #28
   1407c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14080:	mov	r0, #4
   14084:	b	13f54 <__assert_fail@plt+0x2be4>
   14088:	bl	1134c <abort@plt>
   1408c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14090:	add	fp, sp, #28
   14094:	sub	sp, sp, #28
   14098:	movw	r5, #33256	; 0x81e8
   1409c:	cmp	r2, #0
   140a0:	mov	r4, r1
   140a4:	mov	r7, r0
   140a8:	str	r0, [sp, #20]
   140ac:	movt	r5, #2
   140b0:	movne	r5, r2
   140b4:	bl	11274 <__errno_location@plt>
   140b8:	mov	sl, r0
   140bc:	ldr	r2, [r5, #40]	; 0x28
   140c0:	ldr	r3, [r5, #44]	; 0x2c
   140c4:	ldm	r5, {r0, r1}
   140c8:	orr	r8, r1, #1
   140cc:	add	r9, r5, #8
   140d0:	mov	r1, #0
   140d4:	ldr	r6, [sl]
   140d8:	stm	sp, {r0, r8, r9}
   140dc:	mov	r0, #0
   140e0:	str	r2, [sp, #12]
   140e4:	str	r3, [sp, #16]
   140e8:	mov	r2, r7
   140ec:	mov	r3, r4
   140f0:	str	r6, [sp, #24]
   140f4:	mov	r6, r4
   140f8:	bl	12cdc <__assert_fail@plt+0x196c>
   140fc:	add	r7, r0, #1
   14100:	mov	r0, r7
   14104:	bl	15560 <__assert_fail@plt+0x41f0>
   14108:	mov	r4, r0
   1410c:	ldr	r0, [r5]
   14110:	ldr	r2, [r5, #44]	; 0x2c
   14114:	ldr	r1, [r5, #40]	; 0x28
   14118:	mov	r3, r6
   1411c:	stm	sp, {r0, r8, r9}
   14120:	str	r2, [sp, #16]
   14124:	ldr	r2, [sp, #20]
   14128:	str	r1, [sp, #12]
   1412c:	mov	r0, r4
   14130:	mov	r1, r7
   14134:	bl	12cdc <__assert_fail@plt+0x196c>
   14138:	ldr	r0, [sp, #24]
   1413c:	str	r0, [sl]
   14140:	mov	r0, r4
   14144:	sub	sp, fp, #28
   14148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1414c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14150:	add	fp, sp, #28
   14154:	sub	sp, sp, #36	; 0x24
   14158:	movw	r8, #33256	; 0x81e8
   1415c:	cmp	r3, #0
   14160:	mov	r4, r2
   14164:	str	r2, [sp, #24]
   14168:	mov	r5, r1
   1416c:	mov	r6, r0
   14170:	str	r0, [sp, #20]
   14174:	movt	r8, #2
   14178:	movne	r8, r3
   1417c:	bl	11274 <__errno_location@plt>
   14180:	str	r0, [sp, #28]
   14184:	ldr	r1, [r8, #40]	; 0x28
   14188:	ldr	r2, [r8, #44]	; 0x2c
   1418c:	ldr	r7, [r0]
   14190:	cmp	r4, #0
   14194:	add	sl, r8, #8
   14198:	mov	r0, #0
   1419c:	ldm	r8, {r3, r9}
   141a0:	orreq	r9, r9, #1
   141a4:	stm	sp, {r3, r9, sl}
   141a8:	str	r1, [sp, #12]
   141ac:	str	r2, [sp, #16]
   141b0:	mov	r1, #0
   141b4:	mov	r2, r6
   141b8:	mov	r3, r5
   141bc:	str	r7, [sp, #32]
   141c0:	mov	r7, r5
   141c4:	bl	12cdc <__assert_fail@plt+0x196c>
   141c8:	add	r4, r0, #1
   141cc:	mov	r5, r0
   141d0:	mov	r0, r4
   141d4:	bl	15560 <__assert_fail@plt+0x41f0>
   141d8:	mov	r6, r0
   141dc:	ldr	r0, [r8]
   141e0:	ldr	r2, [r8, #44]	; 0x2c
   141e4:	ldr	r1, [r8, #40]	; 0x28
   141e8:	mov	r3, r7
   141ec:	stm	sp, {r0, r9, sl}
   141f0:	str	r2, [sp, #16]
   141f4:	ldr	r2, [sp, #20]
   141f8:	str	r1, [sp, #12]
   141fc:	mov	r0, r6
   14200:	mov	r1, r4
   14204:	bl	12cdc <__assert_fail@plt+0x196c>
   14208:	ldr	r0, [sp, #24]
   1420c:	ldr	r1, [sp, #32]
   14210:	ldr	r2, [sp, #28]
   14214:	cmp	r0, #0
   14218:	str	r1, [r2]
   1421c:	strne	r5, [r0]
   14220:	mov	r0, r6
   14224:	sub	sp, fp, #28
   14228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1422c:	push	{r4, r5, r6, r7, fp, lr}
   14230:	add	fp, sp, #16
   14234:	movw	r4, #33104	; 0x8150
   14238:	movt	r4, #2
   1423c:	ldrd	r6, [r4]
   14240:	cmp	r7, #2
   14244:	blt	14270 <__assert_fail@plt+0x2f00>
   14248:	add	r5, r6, #12
   1424c:	mov	r7, #0
   14250:	ldr	r0, [r5, r7, lsl #3]
   14254:	bl	12a1c <__assert_fail@plt+0x16ac>
   14258:	ldr	r1, [r4, #4]
   1425c:	add	r2, r7, #2
   14260:	add	r0, r7, #1
   14264:	mov	r7, r0
   14268:	cmp	r2, r1
   1426c:	blt	14250 <__assert_fail@plt+0x2ee0>
   14270:	ldr	r0, [r6, #4]
   14274:	movw	r5, #33304	; 0x8218
   14278:	movt	r5, #2
   1427c:	cmp	r0, r5
   14280:	beq	14294 <__assert_fail@plt+0x2f24>
   14284:	bl	12a1c <__assert_fail@plt+0x16ac>
   14288:	mov	r0, #256	; 0x100
   1428c:	str	r0, [r4, #8]
   14290:	str	r5, [r4, #12]
   14294:	add	r5, r4, #8
   14298:	cmp	r6, r5
   1429c:	beq	142ac <__assert_fail@plt+0x2f3c>
   142a0:	mov	r0, r6
   142a4:	bl	12a1c <__assert_fail@plt+0x16ac>
   142a8:	str	r5, [r4]
   142ac:	mov	r0, #1
   142b0:	str	r0, [r4, #4]
   142b4:	pop	{r4, r5, r6, r7, fp, pc}
   142b8:	movw	r3, #33256	; 0x81e8
   142bc:	mvn	r2, #0
   142c0:	movt	r3, #2
   142c4:	b	142c8 <__assert_fail@plt+0x2f58>
   142c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142cc:	add	fp, sp, #28
   142d0:	sub	sp, sp, #44	; 0x2c
   142d4:	mov	r7, r3
   142d8:	str	r2, [sp, #36]	; 0x24
   142dc:	str	r1, [sp, #32]
   142e0:	mov	r5, r0
   142e4:	bl	11274 <__errno_location@plt>
   142e8:	cmp	r5, #0
   142ec:	bmi	14454 <__assert_fail@plt+0x30e4>
   142f0:	cmn	r5, #-2147483647	; 0x80000001
   142f4:	beq	14454 <__assert_fail@plt+0x30e4>
   142f8:	movw	r8, #33104	; 0x8150
   142fc:	mov	r4, r0
   14300:	ldr	r0, [r0]
   14304:	movt	r8, #2
   14308:	str	r4, [sp, #28]
   1430c:	ldr	r1, [r8, #4]
   14310:	ldr	r6, [r8]
   14314:	str	r0, [sp, #24]
   14318:	cmp	r1, r5
   1431c:	ble	14328 <__assert_fail@plt+0x2fb8>
   14320:	mov	sl, r6
   14324:	b	14390 <__assert_fail@plt+0x3020>
   14328:	mov	r0, #8
   1432c:	add	r9, r8, #8
   14330:	str	r1, [fp, #-32]	; 0xffffffe0
   14334:	sub	r1, r5, r1
   14338:	mvn	r3, #-2147483648	; 0x80000000
   1433c:	str	r0, [sp]
   14340:	subs	r0, r6, r9
   14344:	add	r2, r1, #1
   14348:	sub	r1, fp, #32
   1434c:	movne	r0, r6
   14350:	bl	15760 <__assert_fail@plt+0x43f0>
   14354:	mov	sl, r0
   14358:	cmp	r6, r9
   1435c:	str	r0, [r8]
   14360:	bne	1436c <__assert_fail@plt+0x2ffc>
   14364:	ldrd	r0, [r8, #8]
   14368:	stm	sl, {r0, r1}
   1436c:	ldr	r1, [r8, #4]
   14370:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14374:	add	r0, sl, r1, lsl #3
   14378:	sub	r1, r2, r1
   1437c:	lsl	r2, r1, #3
   14380:	mov	r1, #0
   14384:	bl	112a4 <memset@plt>
   14388:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1438c:	str	r0, [r8, #4]
   14390:	mov	r9, sl
   14394:	ldm	r7, {r0, r1}
   14398:	orr	r8, r1, #1
   1439c:	add	r1, r7, #8
   143a0:	ldr	r2, [r7, #40]	; 0x28
   143a4:	ldr	r3, [r7, #44]	; 0x2c
   143a8:	ldr	r6, [r9, r5, lsl #3]!
   143ac:	str	r1, [sp, #20]
   143b0:	ldr	r4, [r9, #4]!
   143b4:	stm	sp, {r0, r8}
   143b8:	add	r0, sp, #8
   143bc:	stm	r0, {r1, r2, r3}
   143c0:	ldr	r2, [sp, #32]
   143c4:	ldr	r3, [sp, #36]	; 0x24
   143c8:	mov	r1, r6
   143cc:	mov	r0, r4
   143d0:	bl	12cdc <__assert_fail@plt+0x196c>
   143d4:	cmp	r6, r0
   143d8:	bhi	1443c <__assert_fail@plt+0x30cc>
   143dc:	add	r6, r0, #1
   143e0:	movw	r0, #33304	; 0x8218
   143e4:	movt	r0, #2
   143e8:	str	r6, [sl, r5, lsl #3]
   143ec:	cmp	r4, r0
   143f0:	beq	143fc <__assert_fail@plt+0x308c>
   143f4:	mov	r0, r4
   143f8:	bl	12a1c <__assert_fail@plt+0x16ac>
   143fc:	mov	r0, r6
   14400:	bl	15560 <__assert_fail@plt+0x41f0>
   14404:	str	r0, [r9]
   14408:	mov	r4, r0
   1440c:	add	r3, sp, #8
   14410:	ldr	r0, [r7]
   14414:	ldr	r1, [r7, #40]	; 0x28
   14418:	ldr	r2, [r7, #44]	; 0x2c
   1441c:	stm	sp, {r0, r8}
   14420:	ldr	r0, [sp, #20]
   14424:	stm	r3, {r0, r1, r2}
   14428:	ldr	r2, [sp, #32]
   1442c:	ldr	r3, [sp, #36]	; 0x24
   14430:	mov	r0, r4
   14434:	mov	r1, r6
   14438:	bl	12cdc <__assert_fail@plt+0x196c>
   1443c:	ldr	r1, [sp, #24]
   14440:	ldr	r0, [sp, #28]
   14444:	str	r1, [r0]
   14448:	mov	r0, r4
   1444c:	sub	sp, fp, #28
   14450:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14454:	bl	1134c <abort@plt>
   14458:	movw	r3, #33256	; 0x81e8
   1445c:	movt	r3, #2
   14460:	b	142c8 <__assert_fail@plt+0x2f58>
   14464:	movw	r3, #33256	; 0x81e8
   14468:	mov	r1, r0
   1446c:	mov	r0, #0
   14470:	mvn	r2, #0
   14474:	movt	r3, #2
   14478:	b	142c8 <__assert_fail@plt+0x2f58>
   1447c:	movw	r3, #33256	; 0x81e8
   14480:	mov	r2, r1
   14484:	mov	r1, r0
   14488:	mov	r0, #0
   1448c:	movt	r3, #2
   14490:	b	142c8 <__assert_fail@plt+0x2f58>
   14494:	push	{fp, lr}
   14498:	mov	fp, sp
   1449c:	sub	sp, sp, #48	; 0x30
   144a0:	vmov.i32	q8, #0	; 0x00000000
   144a4:	mov	ip, #32
   144a8:	mov	r3, sp
   144ac:	mov	lr, r2
   144b0:	cmp	r1, #10
   144b4:	add	r2, r3, #16
   144b8:	vst1.64	{d16-d17}, [r3], ip
   144bc:	vst1.64	{d16-d17}, [r2]
   144c0:	vst1.64	{d16-d17}, [r3]
   144c4:	beq	144e4 <__assert_fail@plt+0x3174>
   144c8:	str	r1, [sp]
   144cc:	mov	r3, sp
   144d0:	mov	r1, lr
   144d4:	mvn	r2, #0
   144d8:	bl	142c8 <__assert_fail@plt+0x2f58>
   144dc:	mov	sp, fp
   144e0:	pop	{fp, pc}
   144e4:	bl	1134c <abort@plt>
   144e8:	push	{r4, sl, fp, lr}
   144ec:	add	fp, sp, #8
   144f0:	sub	sp, sp, #48	; 0x30
   144f4:	vmov.i32	q8, #0	; 0x00000000
   144f8:	mov	ip, r3
   144fc:	mov	r3, sp
   14500:	mov	lr, #32
   14504:	cmp	r1, #10
   14508:	add	r4, r3, #16
   1450c:	vst1.64	{d16-d17}, [r3], lr
   14510:	vst1.64	{d16-d17}, [r4]
   14514:	vst1.64	{d16-d17}, [r3]
   14518:	beq	14538 <__assert_fail@plt+0x31c8>
   1451c:	str	r1, [sp]
   14520:	mov	r1, r2
   14524:	mov	r3, sp
   14528:	mov	r2, ip
   1452c:	bl	142c8 <__assert_fail@plt+0x2f58>
   14530:	sub	sp, fp, #8
   14534:	pop	{r4, sl, fp, pc}
   14538:	bl	1134c <abort@plt>
   1453c:	push	{fp, lr}
   14540:	mov	fp, sp
   14544:	sub	sp, sp, #48	; 0x30
   14548:	vmov.i32	q8, #0	; 0x00000000
   1454c:	mov	r3, sp
   14550:	mov	ip, #32
   14554:	cmp	r0, #10
   14558:	add	r2, r3, #16
   1455c:	vst1.64	{d16-d17}, [r3], ip
   14560:	vst1.64	{d16-d17}, [r2]
   14564:	vst1.64	{d16-d17}, [r3]
   14568:	beq	14588 <__assert_fail@plt+0x3218>
   1456c:	str	r0, [sp]
   14570:	mov	r3, sp
   14574:	mov	r0, #0
   14578:	mvn	r2, #0
   1457c:	bl	142c8 <__assert_fail@plt+0x2f58>
   14580:	mov	sp, fp
   14584:	pop	{fp, pc}
   14588:	bl	1134c <abort@plt>
   1458c:	push	{fp, lr}
   14590:	mov	fp, sp
   14594:	sub	sp, sp, #48	; 0x30
   14598:	vmov.i32	q8, #0	; 0x00000000
   1459c:	mov	r3, sp
   145a0:	mov	ip, #32
   145a4:	cmp	r0, #10
   145a8:	add	lr, r3, #16
   145ac:	vst1.64	{d16-d17}, [r3], ip
   145b0:	vst1.64	{d16-d17}, [lr]
   145b4:	vst1.64	{d16-d17}, [r3]
   145b8:	beq	145d4 <__assert_fail@plt+0x3264>
   145bc:	str	r0, [sp]
   145c0:	mov	r3, sp
   145c4:	mov	r0, #0
   145c8:	bl	142c8 <__assert_fail@plt+0x2f58>
   145cc:	mov	sp, fp
   145d0:	pop	{fp, pc}
   145d4:	bl	1134c <abort@plt>
   145d8:	push	{r4, sl, fp, lr}
   145dc:	add	fp, sp, #8
   145e0:	sub	sp, sp, #48	; 0x30
   145e4:	mov	lr, r0
   145e8:	movw	r0, #33256	; 0x81e8
   145ec:	mov	ip, r1
   145f0:	mov	r1, #32
   145f4:	mov	r4, #1
   145f8:	movt	r0, #2
   145fc:	add	r3, r0, #16
   14600:	vld1.64	{d16-d17}, [r0], r1
   14604:	vld1.64	{d20-d21}, [r0]
   14608:	vld1.64	{d18-d19}, [r3]
   1460c:	mov	r3, sp
   14610:	add	r0, r3, #32
   14614:	add	r1, r3, #16
   14618:	vst1.64	{d20-d21}, [r0]
   1461c:	mov	r0, #28
   14620:	vst1.64	{d18-d19}, [r1]
   14624:	mov	r1, r3
   14628:	and	r0, r0, r2, lsr #3
   1462c:	and	r2, r2, #31
   14630:	vst1.64	{d16-d17}, [r1], r0
   14634:	ldr	r0, [r1, #8]
   14638:	bic	r4, r4, r0, lsr r2
   1463c:	eor	r0, r0, r4, lsl r2
   14640:	mov	r2, ip
   14644:	str	r0, [r1, #8]
   14648:	mov	r0, #0
   1464c:	mov	r1, lr
   14650:	bl	142c8 <__assert_fail@plt+0x2f58>
   14654:	sub	sp, fp, #8
   14658:	pop	{r4, sl, fp, pc}
   1465c:	push	{fp, lr}
   14660:	mov	fp, sp
   14664:	sub	sp, sp, #48	; 0x30
   14668:	mov	ip, r0
   1466c:	movw	r0, #33256	; 0x81e8
   14670:	mov	r2, #32
   14674:	movt	r0, #2
   14678:	add	r3, r0, #16
   1467c:	vld1.64	{d16-d17}, [r0], r2
   14680:	vld1.64	{d20-d21}, [r0]
   14684:	vld1.64	{d18-d19}, [r3]
   14688:	mov	r3, sp
   1468c:	add	r0, r3, #32
   14690:	add	r2, r3, #16
   14694:	vst1.64	{d20-d21}, [r0]
   14698:	mov	r0, #28
   1469c:	vst1.64	{d18-d19}, [r2]
   146a0:	mov	r2, r3
   146a4:	and	r0, r0, r1, lsr #3
   146a8:	and	r1, r1, #31
   146ac:	vst1.64	{d16-d17}, [r2], r0
   146b0:	mov	r0, #1
   146b4:	ldr	lr, [r2, #8]
   146b8:	bic	r0, r0, lr, lsr r1
   146bc:	eor	r0, lr, r0, lsl r1
   146c0:	mov	r1, ip
   146c4:	str	r0, [r2, #8]
   146c8:	mov	r0, #0
   146cc:	mvn	r2, #0
   146d0:	bl	142c8 <__assert_fail@plt+0x2f58>
   146d4:	mov	sp, fp
   146d8:	pop	{fp, pc}
   146dc:	push	{fp, lr}
   146e0:	mov	fp, sp
   146e4:	sub	sp, sp, #48	; 0x30
   146e8:	mov	r1, r0
   146ec:	movw	r0, #33256	; 0x81e8
   146f0:	mov	r3, #32
   146f4:	movt	r0, #2
   146f8:	add	r2, r0, #16
   146fc:	vld1.64	{d16-d17}, [r0], r3
   14700:	mov	r3, sp
   14704:	vld1.64	{d18-d19}, [r2]
   14708:	vld1.64	{d20-d21}, [r0]
   1470c:	add	r2, r3, #16
   14710:	add	r0, r3, #32
   14714:	vst1.64	{d18-d19}, [r2]
   14718:	vst1.64	{d20-d21}, [r0]
   1471c:	mov	r0, #12
   14720:	mov	r2, r3
   14724:	vst1.64	{d16-d17}, [r2], r0
   14728:	ldr	r0, [r2]
   1472c:	orr	r0, r0, #67108864	; 0x4000000
   14730:	str	r0, [r2]
   14734:	mov	r0, #0
   14738:	mvn	r2, #0
   1473c:	bl	142c8 <__assert_fail@plt+0x2f58>
   14740:	mov	sp, fp
   14744:	pop	{fp, pc}
   14748:	push	{fp, lr}
   1474c:	mov	fp, sp
   14750:	sub	sp, sp, #48	; 0x30
   14754:	mov	ip, r1
   14758:	mov	r1, r0
   1475c:	movw	r0, #33256	; 0x81e8
   14760:	mov	r2, #32
   14764:	movt	r0, #2
   14768:	add	r3, r0, #16
   1476c:	vld1.64	{d16-d17}, [r0], r2
   14770:	vld1.64	{d18-d19}, [r3]
   14774:	vld1.64	{d20-d21}, [r0]
   14778:	mov	r3, sp
   1477c:	add	r2, r3, #16
   14780:	add	r0, r3, #32
   14784:	vst1.64	{d18-d19}, [r2]
   14788:	vst1.64	{d20-d21}, [r0]
   1478c:	mov	r0, #12
   14790:	mov	r2, r3
   14794:	vst1.64	{d16-d17}, [r2], r0
   14798:	ldr	r0, [r2]
   1479c:	orr	r0, r0, #67108864	; 0x4000000
   147a0:	str	r0, [r2]
   147a4:	mov	r0, #0
   147a8:	mov	r2, ip
   147ac:	bl	142c8 <__assert_fail@plt+0x2f58>
   147b0:	mov	sp, fp
   147b4:	pop	{fp, pc}
   147b8:	push	{r4, sl, fp, lr}
   147bc:	add	fp, sp, #8
   147c0:	sub	sp, sp, #96	; 0x60
   147c4:	vmov.i32	q8, #0	; 0x00000000
   147c8:	mov	ip, r2
   147cc:	mov	r2, sp
   147d0:	mov	r4, #28
   147d4:	cmp	r1, #10
   147d8:	mov	r3, r2
   147dc:	add	lr, r2, #16
   147e0:	vst1.64	{d16-d17}, [r3], r4
   147e4:	vst1.64	{d16-d17}, [lr]
   147e8:	vst1.32	{d16-d17}, [r3]
   147ec:	beq	1483c <__assert_fail@plt+0x34cc>
   147f0:	vld1.64	{d16-d17}, [r2], r4
   147f4:	vld1.64	{d18-d19}, [lr]
   147f8:	add	r3, sp, #48	; 0x30
   147fc:	vld1.32	{d20-d21}, [r2]
   14800:	add	r2, r3, #20
   14804:	add	r4, r3, #4
   14808:	vst1.32	{d18-d19}, [r2]
   1480c:	add	r2, r3, #32
   14810:	vst1.32	{d16-d17}, [r4]
   14814:	vst1.32	{d20-d21}, [r2]
   14818:	str	r1, [sp, #48]	; 0x30
   1481c:	mvn	r2, #0
   14820:	ldr	r1, [sp, #60]	; 0x3c
   14824:	orr	r1, r1, #67108864	; 0x4000000
   14828:	str	r1, [sp, #60]	; 0x3c
   1482c:	mov	r1, ip
   14830:	bl	142c8 <__assert_fail@plt+0x2f58>
   14834:	sub	sp, fp, #8
   14838:	pop	{r4, sl, fp, pc}
   1483c:	bl	1134c <abort@plt>
   14840:	push	{r4, r5, r6, sl, fp, lr}
   14844:	add	fp, sp, #16
   14848:	sub	sp, sp, #48	; 0x30
   1484c:	mov	ip, r3
   14850:	movw	r3, #33256	; 0x81e8
   14854:	mov	r6, #32
   14858:	cmp	r1, #0
   1485c:	mov	r4, sp
   14860:	movt	r3, #2
   14864:	cmpne	r2, #0
   14868:	add	r5, r4, #16
   1486c:	add	lr, r3, #16
   14870:	vld1.64	{d16-d17}, [r3], r6
   14874:	vld1.64	{d18-d19}, [lr]
   14878:	vld1.64	{d20-d21}, [r3]
   1487c:	mov	r3, #10
   14880:	vst1.64	{d16-d17}, [r4], r6
   14884:	vst1.64	{d18-d19}, [r5]
   14888:	vst1.64	{d20-d21}, [r4]
   1488c:	str	r3, [sp]
   14890:	bne	14898 <__assert_fail@plt+0x3528>
   14894:	bl	1134c <abort@plt>
   14898:	str	r2, [sp, #44]	; 0x2c
   1489c:	str	r1, [sp, #40]	; 0x28
   148a0:	mov	r3, sp
   148a4:	mov	r1, ip
   148a8:	mvn	r2, #0
   148ac:	bl	142c8 <__assert_fail@plt+0x2f58>
   148b0:	sub	sp, fp, #16
   148b4:	pop	{r4, r5, r6, sl, fp, pc}
   148b8:	push	{r4, r5, r6, sl, fp, lr}
   148bc:	add	fp, sp, #16
   148c0:	sub	sp, sp, #48	; 0x30
   148c4:	mov	lr, r3
   148c8:	movw	r3, #33256	; 0x81e8
   148cc:	mov	r6, #32
   148d0:	cmp	r1, #0
   148d4:	mov	r4, sp
   148d8:	movt	r3, #2
   148dc:	cmpne	r2, #0
   148e0:	add	r5, r4, #16
   148e4:	add	ip, r3, #16
   148e8:	vld1.64	{d16-d17}, [r3], r6
   148ec:	vld1.64	{d18-d19}, [ip]
   148f0:	vld1.64	{d20-d21}, [r3]
   148f4:	mov	r3, #10
   148f8:	vst1.64	{d16-d17}, [r4], r6
   148fc:	vst1.64	{d18-d19}, [r5]
   14900:	vst1.64	{d20-d21}, [r4]
   14904:	str	r3, [sp]
   14908:	bne	14910 <__assert_fail@plt+0x35a0>
   1490c:	bl	1134c <abort@plt>
   14910:	ldr	ip, [fp, #8]
   14914:	str	r2, [sp, #44]	; 0x2c
   14918:	str	r1, [sp, #40]	; 0x28
   1491c:	mov	r3, sp
   14920:	mov	r1, lr
   14924:	mov	r2, ip
   14928:	bl	142c8 <__assert_fail@plt+0x2f58>
   1492c:	sub	sp, fp, #16
   14930:	pop	{r4, r5, r6, sl, fp, pc}
   14934:	push	{r4, sl, fp, lr}
   14938:	add	fp, sp, #8
   1493c:	sub	sp, sp, #48	; 0x30
   14940:	movw	r3, #33256	; 0x81e8
   14944:	mov	lr, #32
   14948:	mov	ip, r2
   1494c:	cmp	r0, #0
   14950:	movt	r3, #2
   14954:	cmpne	r1, #0
   14958:	add	r2, r3, #16
   1495c:	vld1.64	{d16-d17}, [r3], lr
   14960:	vld1.64	{d20-d21}, [r3]
   14964:	vld1.64	{d18-d19}, [r2]
   14968:	mov	r2, sp
   1496c:	add	r4, r2, #16
   14970:	vst1.64	{d16-d17}, [r2], lr
   14974:	vst1.64	{d20-d21}, [r2]
   14978:	mov	r2, #10
   1497c:	vst1.64	{d18-d19}, [r4]
   14980:	str	r2, [sp]
   14984:	bne	1498c <__assert_fail@plt+0x361c>
   14988:	bl	1134c <abort@plt>
   1498c:	str	r1, [sp, #44]	; 0x2c
   14990:	str	r0, [sp, #40]	; 0x28
   14994:	mov	r3, sp
   14998:	mov	r0, #0
   1499c:	mov	r1, ip
   149a0:	mvn	r2, #0
   149a4:	bl	142c8 <__assert_fail@plt+0x2f58>
   149a8:	sub	sp, fp, #8
   149ac:	pop	{r4, sl, fp, pc}
   149b0:	push	{r4, r5, fp, lr}
   149b4:	add	fp, sp, #8
   149b8:	sub	sp, sp, #48	; 0x30
   149bc:	mov	ip, r3
   149c0:	movw	r3, #33256	; 0x81e8
   149c4:	mov	r4, #32
   149c8:	mov	lr, r2
   149cc:	cmp	r0, #0
   149d0:	movt	r3, #2
   149d4:	cmpne	r1, #0
   149d8:	add	r2, r3, #16
   149dc:	vld1.64	{d16-d17}, [r3], r4
   149e0:	vld1.64	{d20-d21}, [r3]
   149e4:	vld1.64	{d18-d19}, [r2]
   149e8:	mov	r2, sp
   149ec:	add	r5, r2, #16
   149f0:	vst1.64	{d16-d17}, [r2], r4
   149f4:	vst1.64	{d20-d21}, [r2]
   149f8:	mov	r2, #10
   149fc:	vst1.64	{d18-d19}, [r5]
   14a00:	str	r2, [sp]
   14a04:	bne	14a0c <__assert_fail@plt+0x369c>
   14a08:	bl	1134c <abort@plt>
   14a0c:	str	r1, [sp, #44]	; 0x2c
   14a10:	str	r0, [sp, #40]	; 0x28
   14a14:	mov	r3, sp
   14a18:	mov	r0, #0
   14a1c:	mov	r1, lr
   14a20:	mov	r2, ip
   14a24:	bl	142c8 <__assert_fail@plt+0x2f58>
   14a28:	sub	sp, fp, #8
   14a2c:	pop	{r4, r5, fp, pc}
   14a30:	movw	r3, #33056	; 0x8120
   14a34:	movt	r3, #2
   14a38:	b	142c8 <__assert_fail@plt+0x2f58>
   14a3c:	movw	r3, #33056	; 0x8120
   14a40:	mov	r2, r1
   14a44:	mov	r1, r0
   14a48:	mov	r0, #0
   14a4c:	movt	r3, #2
   14a50:	b	142c8 <__assert_fail@plt+0x2f58>
   14a54:	movw	r3, #33056	; 0x8120
   14a58:	mvn	r2, #0
   14a5c:	movt	r3, #2
   14a60:	b	142c8 <__assert_fail@plt+0x2f58>
   14a64:	movw	r3, #33056	; 0x8120
   14a68:	mov	r1, r0
   14a6c:	mov	r0, #0
   14a70:	mvn	r2, #0
   14a74:	movt	r3, #2
   14a78:	b	142c8 <__assert_fail@plt+0x2f58>
   14a7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a80:	add	fp, sp, #28
   14a84:	sub	sp, sp, #12
   14a88:	ldr	sl, [fp, #8]
   14a8c:	mov	r9, r3
   14a90:	mov	r8, r1
   14a94:	mov	r5, r0
   14a98:	cmp	r2, #0
   14a9c:	beq	14b28 <__assert_fail@plt+0x37b8>
   14aa0:	mov	r0, r5
   14aa4:	mov	r1, #58	; 0x3a
   14aa8:	mov	r6, r2
   14aac:	bl	11268 <strchr@plt>
   14ab0:	mov	r7, r0
   14ab4:	mov	r0, r5
   14ab8:	mov	r2, r8
   14abc:	mov	r3, r6
   14ac0:	stm	sp, {r9, sl}
   14ac4:	mov	r1, r7
   14ac8:	bl	14b48 <__assert_fail@plt+0x37d8>
   14acc:	mov	r4, r0
   14ad0:	cmp	r0, #0
   14ad4:	beq	14b1c <__assert_fail@plt+0x37ac>
   14ad8:	cmp	r7, #0
   14adc:	bne	14b1c <__assert_fail@plt+0x37ac>
   14ae0:	mov	r0, r5
   14ae4:	mov	r1, #46	; 0x2e
   14ae8:	bl	11268 <strchr@plt>
   14aec:	cmp	r0, #0
   14af0:	beq	14b1c <__assert_fail@plt+0x37ac>
   14af4:	mov	r1, r0
   14af8:	mov	r0, r5
   14afc:	mov	r2, r8
   14b00:	mov	r3, r6
   14b04:	stm	sp, {r9, sl}
   14b08:	bl	14b48 <__assert_fail@plt+0x37d8>
   14b0c:	cmp	r0, #0
   14b10:	movne	r0, r4
   14b14:	sub	sp, fp, #28
   14b18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b1c:	mov	r0, r4
   14b20:	sub	sp, fp, #28
   14b24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b28:	mov	r0, r5
   14b2c:	mov	r1, #0
   14b30:	mov	r2, r8
   14b34:	mov	r3, #0
   14b38:	stm	sp, {r9, sl}
   14b3c:	bl	14b48 <__assert_fail@plt+0x37d8>
   14b40:	sub	sp, fp, #28
   14b44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b4c:	add	fp, sp, #28
   14b50:	sub	sp, sp, #36	; 0x24
   14b54:	mov	sl, r3
   14b58:	mov	r9, r2
   14b5c:	ldr	r3, [r2]
   14b60:	ldr	r2, [fp, #8]
   14b64:	mov	r4, r1
   14b68:	cmp	sl, #0
   14b6c:	beq	14b78 <__assert_fail@plt+0x3808>
   14b70:	ldr	r1, [sl]
   14b74:	b	14b7c <__assert_fail@plt+0x380c>
   14b78:	mvn	r1, #0
   14b7c:	ldr	r8, [fp, #12]
   14b80:	cmp	r2, #0
   14b84:	str	r1, [sp, #8]
   14b88:	str	r3, [sp, #4]
   14b8c:	movne	r1, #0
   14b90:	strne	r1, [r2]
   14b94:	cmp	r8, #0
   14b98:	movne	r1, #0
   14b9c:	strne	r1, [r8]
   14ba0:	cmp	r4, #0
   14ba4:	beq	14c2c <__assert_fail@plt+0x38bc>
   14ba8:	subs	r5, r4, r0
   14bac:	beq	14d1c <__assert_fail@plt+0x39ac>
   14bb0:	add	r1, r5, #1
   14bb4:	bl	159c4 <__assert_fail@plt+0x4654>
   14bb8:	mov	r7, r0
   14bbc:	mov	r0, #0
   14bc0:	mov	r6, r4
   14bc4:	strb	r0, [r7, r5]
   14bc8:	ldrb	r0, [r6, #1]!
   14bcc:	cmp	r0, #0
   14bd0:	moveq	r6, r0
   14bd4:	ldrb	r0, [r7]
   14bd8:	cmp	r0, #43	; 0x2b
   14bdc:	beq	14c50 <__assert_fail@plt+0x38e0>
   14be0:	mov	r0, r7
   14be4:	bl	110d0 <getpwnam@plt>
   14be8:	cmp	r0, #0
   14bec:	beq	14c50 <__assert_fail@plt+0x38e0>
   14bf0:	ldr	r1, [r0, #8]
   14bf4:	mov	r5, #0
   14bf8:	cmp	r4, #0
   14bfc:	str	r1, [sp, #4]
   14c00:	beq	14e30 <__assert_fail@plt+0x3ac0>
   14c04:	cmp	r6, #0
   14c08:	bne	14e30 <__assert_fail@plt+0x3ac0>
   14c0c:	ldr	r4, [r0, #12]
   14c10:	mov	r0, r4
   14c14:	bl	11358 <getgrgid@plt>
   14c18:	cmp	r0, #0
   14c1c:	str	r4, [sp, #8]
   14c20:	beq	14e44 <__assert_fail@plt+0x3ad4>
   14c24:	ldr	r0, [r0]
   14c28:	b	14e54 <__assert_fail@plt+0x3ae4>
   14c2c:	ldrb	r1, [r0]
   14c30:	cmp	r1, #0
   14c34:	beq	14db8 <__assert_fail@plt+0x3a48>
   14c38:	bl	15a34 <__assert_fail@plt+0x46c4>
   14c3c:	mov	r7, r0
   14c40:	mov	r6, #0
   14c44:	ldrb	r0, [r7]
   14c48:	cmp	r0, #43	; 0x2b
   14c4c:	bne	14be0 <__assert_fail@plt+0x3870>
   14c50:	cmp	r4, #0
   14c54:	beq	14d50 <__assert_fail@plt+0x39e0>
   14c58:	cmp	r6, #0
   14c5c:	bne	14d50 <__assert_fail@plt+0x39e0>
   14c60:	movw	r5, #30251	; 0x762b
   14c64:	mov	r4, #0
   14c68:	movt	r5, #1
   14c6c:	bl	11304 <endpwent@plt>
   14c70:	cmp	r6, #0
   14c74:	beq	14d40 <__assert_fail@plt+0x39d0>
   14c78:	cmp	r5, #0
   14c7c:	bne	14d40 <__assert_fail@plt+0x39d0>
   14c80:	ldrb	r0, [r6]
   14c84:	cmp	r0, #43	; 0x2b
   14c88:	beq	14ca8 <__assert_fail@plt+0x3938>
   14c8c:	mov	r0, r6
   14c90:	bl	11364 <getgrnam@plt>
   14c94:	cmp	r0, #0
   14c98:	beq	14ca8 <__assert_fail@plt+0x3938>
   14c9c:	ldr	r0, [r0, #8]
   14ca0:	mov	r5, #0
   14ca4:	b	14cf8 <__assert_fail@plt+0x3988>
   14ca8:	movw	r0, #28007	; 0x6d67
   14cac:	add	r3, sp, #12
   14cb0:	mov	r1, #0
   14cb4:	mov	r2, #10
   14cb8:	movt	r0, #1
   14cbc:	str	r0, [sp]
   14cc0:	mov	r0, r6
   14cc4:	bl	15ae4 <__assert_fail@plt+0x4774>
   14cc8:	ldr	r1, [sp, #12]
   14ccc:	mvn	r2, #0
   14cd0:	clz	r0, r0
   14cd4:	movw	r5, #30237	; 0x761d
   14cd8:	lsr	r0, r0, #5
   14cdc:	movt	r5, #1
   14ce0:	subs	r2, r1, r2
   14ce4:	movwne	r2, #1
   14ce8:	ands	r0, r0, r2
   14cec:	ldr	r0, [sp, #8]
   14cf0:	movne	r0, r1
   14cf4:	movwne	r5, #0
   14cf8:	str	r0, [sp, #8]
   14cfc:	bl	110ac <endgrent@plt>
   14d00:	mov	r0, r6
   14d04:	bl	15a34 <__assert_fail@plt+0x46c4>
   14d08:	mov	r4, r0
   14d0c:	mov	r6, #0
   14d10:	cmp	r5, #0
   14d14:	bne	14dfc <__assert_fail@plt+0x3a8c>
   14d18:	b	14dc0 <__assert_fail@plt+0x3a50>
   14d1c:	ldrb	r0, [r4, #1]!
   14d20:	mov	r7, #0
   14d24:	mov	r5, #0
   14d28:	cmp	r0, #0
   14d2c:	moveq	r4, r0
   14d30:	mov	r6, r4
   14d34:	mov	r4, #0
   14d38:	cmp	r6, #0
   14d3c:	bne	14c78 <__assert_fail@plt+0x3908>
   14d40:	mov	r6, #0
   14d44:	cmp	r5, #0
   14d48:	bne	14dfc <__assert_fail@plt+0x3a8c>
   14d4c:	b	14dc0 <__assert_fail@plt+0x3a50>
   14d50:	movw	r0, #28007	; 0x6d67
   14d54:	add	r3, sp, #12
   14d58:	mov	r1, #0
   14d5c:	mov	r2, #10
   14d60:	mov	r4, #0
   14d64:	movt	r0, #1
   14d68:	str	r0, [sp]
   14d6c:	mov	r0, r7
   14d70:	bl	15ae4 <__assert_fail@plt+0x4774>
   14d74:	ldr	r1, [sp, #12]
   14d78:	mvn	r2, #0
   14d7c:	clz	r0, r0
   14d80:	movw	r5, #30224	; 0x7610
   14d84:	lsr	r0, r0, #5
   14d88:	movt	r5, #1
   14d8c:	subs	r2, r1, r2
   14d90:	movwne	r2, #1
   14d94:	ands	r0, r0, r2
   14d98:	ldr	r0, [sp, #4]
   14d9c:	movne	r0, r1
   14da0:	movwne	r5, #0
   14da4:	str	r0, [sp, #4]
   14da8:	bl	11304 <endpwent@plt>
   14dac:	cmp	r6, #0
   14db0:	bne	14c78 <__assert_fail@plt+0x3908>
   14db4:	b	14d40 <__assert_fail@plt+0x39d0>
   14db8:	mov	r4, #0
   14dbc:	mov	r7, #0
   14dc0:	ldr	r0, [sp, #4]
   14dc4:	cmp	sl, #0
   14dc8:	mov	r6, #1
   14dcc:	str	r0, [r9]
   14dd0:	ldrne	r0, [sp, #8]
   14dd4:	strne	r0, [sl]
   14dd8:	ldr	r0, [fp, #8]
   14ddc:	cmp	r0, #0
   14de0:	strne	r7, [r0]
   14de4:	movne	r7, #0
   14de8:	cmp	r8, #0
   14dec:	moveq	r5, #0
   14df0:	strne	r4, [r8]
   14df4:	movne	r5, #0
   14df8:	movne	r4, #0
   14dfc:	mov	r0, r7
   14e00:	bl	12a1c <__assert_fail@plt+0x16ac>
   14e04:	mov	r0, r4
   14e08:	bl	12a1c <__assert_fail@plt+0x16ac>
   14e0c:	mov	r0, #0
   14e10:	cmp	r6, #0
   14e14:	bne	14e28 <__assert_fail@plt+0x3ab8>
   14e18:	mov	r0, #0
   14e1c:	mov	r1, r5
   14e20:	mov	r2, #5
   14e24:	bl	11148 <dcgettext@plt>
   14e28:	sub	sp, fp, #28
   14e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e30:	mov	r4, #0
   14e34:	bl	11304 <endpwent@plt>
   14e38:	cmp	r6, #0
   14e3c:	bne	14c78 <__assert_fail@plt+0x3908>
   14e40:	b	14d40 <__assert_fail@plt+0x39d0>
   14e44:	add	r2, sp, #12
   14e48:	mov	r0, r4
   14e4c:	mov	r1, #0
   14e50:	bl	12a44 <__assert_fail@plt+0x16d4>
   14e54:	bl	15a34 <__assert_fail@plt+0x46c4>
   14e58:	mov	r4, r0
   14e5c:	bl	110ac <endgrent@plt>
   14e60:	bl	11304 <endpwent@plt>
   14e64:	cmp	r6, #0
   14e68:	bne	14c78 <__assert_fail@plt+0x3908>
   14e6c:	b	14d40 <__assert_fail@plt+0x39d0>
   14e70:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e74:	add	fp, sp, #24
   14e78:	sub	sp, sp, #32
   14e7c:	ldr	r6, [fp, #12]
   14e80:	ldr	r7, [fp, #8]
   14e84:	mov	r4, r2
   14e88:	mov	r8, r0
   14e8c:	cmp	r1, #0
   14e90:	beq	14eb8 <__assert_fail@plt+0x3b48>
   14e94:	movw	r2, #30264	; 0x7638
   14e98:	mov	r5, r1
   14e9c:	str	r3, [sp, #4]
   14ea0:	str	r4, [sp]
   14ea4:	mov	r0, r8
   14ea8:	mov	r1, #1
   14eac:	movt	r2, #1
   14eb0:	mov	r3, r5
   14eb4:	b	14ed0 <__assert_fail@plt+0x3b60>
   14eb8:	movw	r2, #30276	; 0x7644
   14ebc:	str	r3, [sp]
   14ec0:	mov	r0, r8
   14ec4:	mov	r1, #1
   14ec8:	mov	r3, r4
   14ecc:	movt	r2, #1
   14ed0:	bl	112c8 <__fprintf_chk@plt>
   14ed4:	movw	r1, #30283	; 0x764b
   14ed8:	mov	r0, #0
   14edc:	mov	r2, #5
   14ee0:	movt	r1, #1
   14ee4:	bl	11148 <dcgettext@plt>
   14ee8:	movw	r2, #31001	; 0x7919
   14eec:	mov	r3, r0
   14ef0:	movw	r0, #2022	; 0x7e6
   14ef4:	mov	r1, #1
   14ef8:	movt	r2, #1
   14efc:	str	r0, [sp]
   14f00:	mov	r0, r8
   14f04:	bl	112c8 <__fprintf_chk@plt>
   14f08:	movw	r4, #28006	; 0x6d66
   14f0c:	mov	r1, r8
   14f10:	movt	r4, #1
   14f14:	mov	r0, r4
   14f18:	bl	110b8 <fputs_unlocked@plt>
   14f1c:	movw	r1, #30287	; 0x764f
   14f20:	mov	r0, #0
   14f24:	mov	r2, #5
   14f28:	movt	r1, #1
   14f2c:	bl	11148 <dcgettext@plt>
   14f30:	movw	r3, #30458	; 0x76fa
   14f34:	mov	r2, r0
   14f38:	mov	r0, r8
   14f3c:	mov	r1, #1
   14f40:	movt	r3, #1
   14f44:	bl	112c8 <__fprintf_chk@plt>
   14f48:	mov	r0, r4
   14f4c:	mov	r1, r8
   14f50:	bl	110b8 <fputs_unlocked@plt>
   14f54:	cmp	r6, #9
   14f58:	bhi	14f94 <__assert_fail@plt+0x3c24>
   14f5c:	add	r0, pc, #0
   14f60:	ldr	pc, [r0, r6, lsl #2]
   14f64:	andeq	r4, r1, ip, lsl #31
   14f68:	andeq	r4, r1, r0, lsr #31
   14f6c:	ldrdeq	r4, [r1], -r0
   14f70:	strdeq	r4, [r1], -r8
   14f74:	andeq	r5, r1, r0, lsr #32
   14f78:	andeq	r5, r1, r8, asr #32
   14f7c:	andeq	r5, r1, r0, ror r0
   14f80:	andeq	r5, r1, r8, lsr #1
   14f84:	andeq	r5, r1, r0, asr r1
   14f88:	strdeq	r5, [r1], -r8
   14f8c:	sub	sp, fp, #24
   14f90:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f94:	movw	r1, #30811	; 0x785b
   14f98:	movt	r1, #1
   14f9c:	b	15100 <__assert_fail@plt+0x3d90>
   14fa0:	movw	r1, #30492	; 0x771c
   14fa4:	mov	r0, #0
   14fa8:	mov	r2, #5
   14fac:	movt	r1, #1
   14fb0:	bl	11148 <dcgettext@plt>
   14fb4:	ldr	r3, [r7]
   14fb8:	mov	r2, r0
   14fbc:	mov	r0, r8
   14fc0:	mov	r1, #1
   14fc4:	sub	sp, fp, #24
   14fc8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14fcc:	b	112c8 <__fprintf_chk@plt>
   14fd0:	movw	r1, #30508	; 0x772c
   14fd4:	mov	r0, #0
   14fd8:	mov	r2, #5
   14fdc:	movt	r1, #1
   14fe0:	bl	11148 <dcgettext@plt>
   14fe4:	mov	r2, r0
   14fe8:	ldr	r3, [r7]
   14fec:	ldr	r0, [r7, #4]
   14ff0:	str	r0, [sp]
   14ff4:	b	150e4 <__assert_fail@plt+0x3d74>
   14ff8:	movw	r1, #30531	; 0x7743
   14ffc:	mov	r0, #0
   15000:	mov	r2, #5
   15004:	movt	r1, #1
   15008:	bl	11148 <dcgettext@plt>
   1500c:	mov	r2, r0
   15010:	ldr	r3, [r7]
   15014:	ldmib	r7, {r0, r1}
   15018:	stm	sp, {r0, r1}
   1501c:	b	150e4 <__assert_fail@plt+0x3d74>
   15020:	movw	r1, #30559	; 0x775f
   15024:	mov	r0, #0
   15028:	mov	r2, #5
   1502c:	movt	r1, #1
   15030:	bl	11148 <dcgettext@plt>
   15034:	ldr	r3, [r7]
   15038:	mov	r2, r0
   1503c:	ldmib	r7, {r0, r1, r7}
   15040:	stm	sp, {r0, r1, r7}
   15044:	b	150e4 <__assert_fail@plt+0x3d74>
   15048:	movw	r1, #30591	; 0x777f
   1504c:	mov	r0, #0
   15050:	mov	r2, #5
   15054:	movt	r1, #1
   15058:	bl	11148 <dcgettext@plt>
   1505c:	ldr	r3, [r7]
   15060:	mov	r2, r0
   15064:	ldmib	r7, {r0, r1, r6, r7}
   15068:	stm	sp, {r0, r1, r6, r7}
   1506c:	b	150e4 <__assert_fail@plt+0x3d74>
   15070:	movw	r1, #30627	; 0x77a3
   15074:	mov	r0, #0
   15078:	mov	r2, #5
   1507c:	movt	r1, #1
   15080:	bl	11148 <dcgettext@plt>
   15084:	mov	r2, r0
   15088:	ldr	r3, [r7]
   1508c:	ldmib	r7, {r0, r1, r6}
   15090:	ldr	r5, [r7, #16]
   15094:	ldr	r7, [r7, #20]
   15098:	stm	sp, {r0, r1, r6}
   1509c:	str	r5, [sp, #12]
   150a0:	str	r7, [sp, #16]
   150a4:	b	150e4 <__assert_fail@plt+0x3d74>
   150a8:	movw	r1, #30667	; 0x77cb
   150ac:	mov	r0, #0
   150b0:	mov	r2, #5
   150b4:	movt	r1, #1
   150b8:	bl	11148 <dcgettext@plt>
   150bc:	mov	r2, r0
   150c0:	ldr	r3, [r7]
   150c4:	ldmib	r7, {r0, r1, r6}
   150c8:	ldr	r5, [r7, #16]
   150cc:	ldr	r4, [r7, #20]
   150d0:	ldr	r7, [r7, #24]
   150d4:	stm	sp, {r0, r1, r6}
   150d8:	str	r5, [sp, #12]
   150dc:	str	r4, [sp, #16]
   150e0:	str	r7, [sp, #20]
   150e4:	mov	r0, r8
   150e8:	mov	r1, #1
   150ec:	bl	112c8 <__fprintf_chk@plt>
   150f0:	sub	sp, fp, #24
   150f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   150f8:	movw	r1, #30759	; 0x7827
   150fc:	movt	r1, #1
   15100:	mov	r0, #0
   15104:	mov	r2, #5
   15108:	bl	11148 <dcgettext@plt>
   1510c:	mov	ip, r0
   15110:	ldr	r3, [r7]
   15114:	ldr	r0, [r7, #4]
   15118:	ldr	r1, [r7, #8]
   1511c:	ldr	r6, [r7, #12]
   15120:	ldr	r5, [r7, #16]
   15124:	ldr	r4, [r7, #20]
   15128:	ldr	r2, [r7, #24]
   1512c:	ldr	lr, [r7, #28]
   15130:	ldr	r7, [r7, #32]
   15134:	stm	sp, {r0, r1, r6}
   15138:	str	r5, [sp, #12]
   1513c:	str	r4, [sp, #16]
   15140:	str	r2, [sp, #20]
   15144:	str	lr, [sp, #24]
   15148:	str	r7, [sp, #28]
   1514c:	b	15194 <__assert_fail@plt+0x3e24>
   15150:	movw	r1, #30711	; 0x77f7
   15154:	mov	r0, #0
   15158:	mov	r2, #5
   1515c:	movt	r1, #1
   15160:	bl	11148 <dcgettext@plt>
   15164:	mov	ip, r0
   15168:	ldr	r3, [r7]
   1516c:	ldmib	r7, {r0, r1, r6}
   15170:	ldr	r5, [r7, #16]
   15174:	ldr	r4, [r7, #20]
   15178:	ldr	r2, [r7, #24]
   1517c:	ldr	r7, [r7, #28]
   15180:	stm	sp, {r0, r1, r6}
   15184:	str	r5, [sp, #12]
   15188:	str	r4, [sp, #16]
   1518c:	str	r2, [sp, #20]
   15190:	str	r7, [sp, #24]
   15194:	mov	r0, r8
   15198:	mov	r1, #1
   1519c:	mov	r2, ip
   151a0:	bl	112c8 <__fprintf_chk@plt>
   151a4:	sub	sp, fp, #24
   151a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   151ac:	push	{r4, sl, fp, lr}
   151b0:	add	fp, sp, #8
   151b4:	sub	sp, sp, #8
   151b8:	ldr	ip, [fp, #8]
   151bc:	mov	lr, #0
   151c0:	ldr	r4, [ip, lr, lsl #2]
   151c4:	add	lr, lr, #1
   151c8:	cmp	r4, #0
   151cc:	bne	151c0 <__assert_fail@plt+0x3e50>
   151d0:	sub	r4, lr, #1
   151d4:	str	ip, [sp]
   151d8:	str	r4, [sp, #4]
   151dc:	bl	14e70 <__assert_fail@plt+0x3b00>
   151e0:	sub	sp, fp, #8
   151e4:	pop	{r4, sl, fp, pc}
   151e8:	push	{fp, lr}
   151ec:	mov	fp, sp
   151f0:	sub	sp, sp, #48	; 0x30
   151f4:	ldr	ip, [fp, #8]
   151f8:	ldr	lr, [ip]
   151fc:	cmp	lr, #0
   15200:	str	lr, [sp, #8]
   15204:	beq	152a0 <__assert_fail@plt+0x3f30>
   15208:	ldr	lr, [ip, #4]
   1520c:	cmp	lr, #0
   15210:	str	lr, [sp, #12]
   15214:	beq	152a8 <__assert_fail@plt+0x3f38>
   15218:	ldr	lr, [ip, #8]
   1521c:	cmp	lr, #0
   15220:	str	lr, [sp, #16]
   15224:	beq	152b0 <__assert_fail@plt+0x3f40>
   15228:	ldr	lr, [ip, #12]
   1522c:	cmp	lr, #0
   15230:	str	lr, [sp, #20]
   15234:	beq	152b8 <__assert_fail@plt+0x3f48>
   15238:	ldr	lr, [ip, #16]
   1523c:	cmp	lr, #0
   15240:	str	lr, [sp, #24]
   15244:	beq	152c0 <__assert_fail@plt+0x3f50>
   15248:	ldr	lr, [ip, #20]
   1524c:	cmp	lr, #0
   15250:	str	lr, [sp, #28]
   15254:	beq	152c8 <__assert_fail@plt+0x3f58>
   15258:	ldr	lr, [ip, #24]
   1525c:	cmp	lr, #0
   15260:	str	lr, [sp, #32]
   15264:	beq	152d0 <__assert_fail@plt+0x3f60>
   15268:	ldr	lr, [ip, #28]
   1526c:	cmp	lr, #0
   15270:	str	lr, [sp, #36]	; 0x24
   15274:	beq	152d8 <__assert_fail@plt+0x3f68>
   15278:	ldr	lr, [ip, #32]
   1527c:	cmp	lr, #0
   15280:	str	lr, [sp, #40]	; 0x28
   15284:	beq	152e0 <__assert_fail@plt+0x3f70>
   15288:	ldr	lr, [ip, #36]	; 0x24
   1528c:	mov	ip, #10
   15290:	cmp	lr, #0
   15294:	str	lr, [sp, #44]	; 0x2c
   15298:	movweq	ip, #9
   1529c:	b	152e4 <__assert_fail@plt+0x3f74>
   152a0:	mov	ip, #0
   152a4:	b	152e4 <__assert_fail@plt+0x3f74>
   152a8:	mov	ip, #1
   152ac:	b	152e4 <__assert_fail@plt+0x3f74>
   152b0:	mov	ip, #2
   152b4:	b	152e4 <__assert_fail@plt+0x3f74>
   152b8:	mov	ip, #3
   152bc:	b	152e4 <__assert_fail@plt+0x3f74>
   152c0:	mov	ip, #4
   152c4:	b	152e4 <__assert_fail@plt+0x3f74>
   152c8:	mov	ip, #5
   152cc:	b	152e4 <__assert_fail@plt+0x3f74>
   152d0:	mov	ip, #6
   152d4:	b	152e4 <__assert_fail@plt+0x3f74>
   152d8:	mov	ip, #7
   152dc:	b	152e4 <__assert_fail@plt+0x3f74>
   152e0:	mov	ip, #8
   152e4:	add	lr, sp, #8
   152e8:	str	ip, [sp, #4]
   152ec:	str	lr, [sp]
   152f0:	bl	14e70 <__assert_fail@plt+0x3b00>
   152f4:	mov	sp, fp
   152f8:	pop	{fp, pc}
   152fc:	push	{fp, lr}
   15300:	mov	fp, sp
   15304:	sub	sp, sp, #56	; 0x38
   15308:	add	ip, fp, #8
   1530c:	str	ip, [sp, #12]
   15310:	ldr	lr, [fp, #8]
   15314:	cmp	lr, #0
   15318:	str	lr, [sp, #16]
   1531c:	beq	153b8 <__assert_fail@plt+0x4048>
   15320:	ldr	lr, [ip, #4]
   15324:	cmp	lr, #0
   15328:	str	lr, [sp, #20]
   1532c:	beq	153c0 <__assert_fail@plt+0x4050>
   15330:	ldr	lr, [ip, #8]
   15334:	cmp	lr, #0
   15338:	str	lr, [sp, #24]
   1533c:	beq	153c8 <__assert_fail@plt+0x4058>
   15340:	ldr	lr, [ip, #12]
   15344:	cmp	lr, #0
   15348:	str	lr, [sp, #28]
   1534c:	beq	153d0 <__assert_fail@plt+0x4060>
   15350:	ldr	lr, [ip, #16]
   15354:	cmp	lr, #0
   15358:	str	lr, [sp, #32]
   1535c:	beq	153d8 <__assert_fail@plt+0x4068>
   15360:	ldr	lr, [ip, #20]
   15364:	cmp	lr, #0
   15368:	str	lr, [sp, #36]	; 0x24
   1536c:	beq	153e0 <__assert_fail@plt+0x4070>
   15370:	ldr	lr, [ip, #24]
   15374:	cmp	lr, #0
   15378:	str	lr, [sp, #40]	; 0x28
   1537c:	beq	153e8 <__assert_fail@plt+0x4078>
   15380:	ldr	lr, [ip, #28]
   15384:	cmp	lr, #0
   15388:	str	lr, [sp, #44]	; 0x2c
   1538c:	beq	153f0 <__assert_fail@plt+0x4080>
   15390:	ldr	lr, [ip, #32]
   15394:	cmp	lr, #0
   15398:	str	lr, [sp, #48]	; 0x30
   1539c:	beq	153f8 <__assert_fail@plt+0x4088>
   153a0:	ldr	lr, [ip, #36]	; 0x24
   153a4:	mov	ip, #10
   153a8:	cmp	lr, #0
   153ac:	str	lr, [sp, #52]	; 0x34
   153b0:	movweq	ip, #9
   153b4:	b	153fc <__assert_fail@plt+0x408c>
   153b8:	mov	ip, #0
   153bc:	b	153fc <__assert_fail@plt+0x408c>
   153c0:	mov	ip, #1
   153c4:	b	153fc <__assert_fail@plt+0x408c>
   153c8:	mov	ip, #2
   153cc:	b	153fc <__assert_fail@plt+0x408c>
   153d0:	mov	ip, #3
   153d4:	b	153fc <__assert_fail@plt+0x408c>
   153d8:	mov	ip, #4
   153dc:	b	153fc <__assert_fail@plt+0x408c>
   153e0:	mov	ip, #5
   153e4:	b	153fc <__assert_fail@plt+0x408c>
   153e8:	mov	ip, #6
   153ec:	b	153fc <__assert_fail@plt+0x408c>
   153f0:	mov	ip, #7
   153f4:	b	153fc <__assert_fail@plt+0x408c>
   153f8:	mov	ip, #8
   153fc:	add	lr, sp, #16
   15400:	str	ip, [sp, #4]
   15404:	str	lr, [sp]
   15408:	bl	14e70 <__assert_fail@plt+0x3b00>
   1540c:	mov	sp, fp
   15410:	pop	{fp, pc}
   15414:	push	{fp, lr}
   15418:	mov	fp, sp
   1541c:	movw	r0, #33140	; 0x8174
   15420:	movt	r0, #2
   15424:	ldr	r1, [r0]
   15428:	movw	r0, #28006	; 0x6d66
   1542c:	movt	r0, #1
   15430:	bl	110b8 <fputs_unlocked@plt>
   15434:	movw	r1, #30871	; 0x7897
   15438:	mov	r0, #0
   1543c:	mov	r2, #5
   15440:	movt	r1, #1
   15444:	bl	11148 <dcgettext@plt>
   15448:	movw	r2, #30891	; 0x78ab
   1544c:	mov	r1, r0
   15450:	mov	r0, #1
   15454:	movt	r2, #1
   15458:	bl	112b0 <__printf_chk@plt>
   1545c:	movw	r1, #30913	; 0x78c1
   15460:	mov	r0, #0
   15464:	mov	r2, #5
   15468:	movt	r1, #1
   1546c:	bl	11148 <dcgettext@plt>
   15470:	movw	r2, #28790	; 0x7076
   15474:	movw	r3, #29296	; 0x7270
   15478:	mov	r1, r0
   1547c:	mov	r0, #1
   15480:	movt	r2, #1
   15484:	movt	r3, #1
   15488:	bl	112b0 <__printf_chk@plt>
   1548c:	movw	r1, #30933	; 0x78d5
   15490:	mov	r0, #0
   15494:	mov	r2, #5
   15498:	movt	r1, #1
   1549c:	bl	11148 <dcgettext@plt>
   154a0:	movw	r2, #30972	; 0x78fc
   154a4:	mov	r1, r0
   154a8:	mov	r0, #1
   154ac:	movt	r2, #1
   154b0:	pop	{fp, lr}
   154b4:	b	112b0 <__printf_chk@plt>
   154b8:	push	{r4, r5, r6, sl, fp, lr}
   154bc:	add	fp, sp, #16
   154c0:	mov	r4, r2
   154c4:	mov	r5, r1
   154c8:	mov	r6, r0
   154cc:	bl	16970 <__assert_fail@plt+0x5600>
   154d0:	cmp	r0, #0
   154d4:	popne	{r4, r5, r6, sl, fp, pc}
   154d8:	cmp	r6, #0
   154dc:	beq	154f0 <__assert_fail@plt+0x4180>
   154e0:	cmp	r5, #0
   154e4:	cmpne	r4, #0
   154e8:	bne	154f0 <__assert_fail@plt+0x4180>
   154ec:	pop	{r4, r5, r6, sl, fp, pc}
   154f0:	bl	15a6c <__assert_fail@plt+0x46fc>
   154f4:	push	{r4, r5, r6, sl, fp, lr}
   154f8:	add	fp, sp, #16
   154fc:	mov	r4, r2
   15500:	mov	r5, r1
   15504:	mov	r6, r0
   15508:	bl	16970 <__assert_fail@plt+0x5600>
   1550c:	cmp	r0, #0
   15510:	popne	{r4, r5, r6, sl, fp, pc}
   15514:	cmp	r6, #0
   15518:	beq	1552c <__assert_fail@plt+0x41bc>
   1551c:	cmp	r5, #0
   15520:	cmpne	r4, #0
   15524:	bne	1552c <__assert_fail@plt+0x41bc>
   15528:	pop	{r4, r5, r6, sl, fp, pc}
   1552c:	bl	15a6c <__assert_fail@plt+0x46fc>
   15530:	push	{fp, lr}
   15534:	mov	fp, sp
   15538:	bl	163b8 <__assert_fail@plt+0x5048>
   1553c:	cmp	r0, #0
   15540:	popne	{fp, pc}
   15544:	bl	15a6c <__assert_fail@plt+0x46fc>
   15548:	push	{fp, lr}
   1554c:	mov	fp, sp
   15550:	bl	163b8 <__assert_fail@plt+0x5048>
   15554:	cmp	r0, #0
   15558:	popne	{fp, pc}
   1555c:	bl	15a6c <__assert_fail@plt+0x46fc>
   15560:	push	{fp, lr}
   15564:	mov	fp, sp
   15568:	bl	163b8 <__assert_fail@plt+0x5048>
   1556c:	cmp	r0, #0
   15570:	popne	{fp, pc}
   15574:	bl	15a6c <__assert_fail@plt+0x46fc>
   15578:	push	{r4, r5, fp, lr}
   1557c:	add	fp, sp, #8
   15580:	mov	r4, r1
   15584:	mov	r5, r0
   15588:	bl	163e8 <__assert_fail@plt+0x5078>
   1558c:	cmp	r0, #0
   15590:	popne	{r4, r5, fp, pc}
   15594:	cmp	r5, #0
   15598:	beq	155a8 <__assert_fail@plt+0x4238>
   1559c:	cmp	r4, #0
   155a0:	bne	155a8 <__assert_fail@plt+0x4238>
   155a4:	pop	{r4, r5, fp, pc}
   155a8:	bl	15a6c <__assert_fail@plt+0x46fc>
   155ac:	push	{fp, lr}
   155b0:	mov	fp, sp
   155b4:	cmp	r1, #0
   155b8:	orreq	r1, r1, #1
   155bc:	bl	163e8 <__assert_fail@plt+0x5078>
   155c0:	cmp	r0, #0
   155c4:	popne	{fp, pc}
   155c8:	bl	15a6c <__assert_fail@plt+0x46fc>
   155cc:	push	{fp, lr}
   155d0:	mov	fp, sp
   155d4:	clz	r3, r2
   155d8:	lsr	ip, r3, #5
   155dc:	clz	r3, r1
   155e0:	lsr	r3, r3, #5
   155e4:	orrs	r3, r3, ip
   155e8:	movwne	r1, #1
   155ec:	movwne	r2, #1
   155f0:	bl	16970 <__assert_fail@plt+0x5600>
   155f4:	cmp	r0, #0
   155f8:	popne	{fp, pc}
   155fc:	bl	15a6c <__assert_fail@plt+0x46fc>
   15600:	push	{fp, lr}
   15604:	mov	fp, sp
   15608:	mov	r2, r1
   1560c:	mov	r1, r0
   15610:	mov	r0, #0
   15614:	bl	16970 <__assert_fail@plt+0x5600>
   15618:	cmp	r0, #0
   1561c:	popne	{fp, pc}
   15620:	bl	15a6c <__assert_fail@plt+0x46fc>
   15624:	push	{fp, lr}
   15628:	mov	fp, sp
   1562c:	mov	r2, r1
   15630:	mov	r1, r0
   15634:	clz	r0, r2
   15638:	clz	r3, r1
   1563c:	lsr	r0, r0, #5
   15640:	lsr	r3, r3, #5
   15644:	orrs	r0, r3, r0
   15648:	mov	r0, #0
   1564c:	movwne	r1, #1
   15650:	movwne	r2, #1
   15654:	bl	16970 <__assert_fail@plt+0x5600>
   15658:	cmp	r0, #0
   1565c:	popne	{fp, pc}
   15660:	bl	15a6c <__assert_fail@plt+0x46fc>
   15664:	push	{r4, r5, r6, sl, fp, lr}
   15668:	add	fp, sp, #16
   1566c:	ldr	r5, [r1]
   15670:	mov	r4, r1
   15674:	mov	r6, r0
   15678:	cmp	r0, #0
   1567c:	beq	15694 <__assert_fail@plt+0x4324>
   15680:	mov	r0, #1
   15684:	add	r0, r0, r5, lsr #1
   15688:	adds	r5, r5, r0
   1568c:	bcc	1569c <__assert_fail@plt+0x432c>
   15690:	b	156d8 <__assert_fail@plt+0x4368>
   15694:	cmp	r5, #0
   15698:	movweq	r5, #64	; 0x40
   1569c:	mov	r0, r6
   156a0:	mov	r1, r5
   156a4:	mov	r2, #1
   156a8:	bl	16970 <__assert_fail@plt+0x5600>
   156ac:	cmp	r5, #0
   156b0:	mov	r1, r5
   156b4:	movwne	r1, #1
   156b8:	cmp	r0, #0
   156bc:	bne	156d0 <__assert_fail@plt+0x4360>
   156c0:	clz	r2, r6
   156c4:	lsr	r2, r2, #5
   156c8:	orrs	r1, r2, r1
   156cc:	bne	156d8 <__assert_fail@plt+0x4368>
   156d0:	str	r5, [r4]
   156d4:	pop	{r4, r5, r6, sl, fp, pc}
   156d8:	bl	15a6c <__assert_fail@plt+0x46fc>
   156dc:	push	{r4, r5, r6, r7, fp, lr}
   156e0:	add	fp, sp, #16
   156e4:	ldr	r5, [r1]
   156e8:	mov	r6, r2
   156ec:	mov	r4, r1
   156f0:	mov	r7, r0
   156f4:	cmp	r0, #0
   156f8:	beq	15710 <__assert_fail@plt+0x43a0>
   156fc:	mov	r0, #1
   15700:	add	r0, r0, r5, lsr #1
   15704:	adds	r5, r5, r0
   15708:	bcc	15728 <__assert_fail@plt+0x43b8>
   1570c:	b	1575c <__assert_fail@plt+0x43ec>
   15710:	cmp	r5, #0
   15714:	bne	15728 <__assert_fail@plt+0x43b8>
   15718:	mov	r0, #64	; 0x40
   1571c:	cmp	r6, #64	; 0x40
   15720:	udiv	r5, r0, r6
   15724:	addhi	r5, r5, #1
   15728:	mov	r0, r7
   1572c:	mov	r1, r5
   15730:	mov	r2, r6
   15734:	bl	16970 <__assert_fail@plt+0x5600>
   15738:	cmp	r0, #0
   1573c:	bne	15754 <__assert_fail@plt+0x43e4>
   15740:	cmp	r7, #0
   15744:	beq	1575c <__assert_fail@plt+0x43ec>
   15748:	cmp	r6, #0
   1574c:	cmpne	r5, #0
   15750:	bne	1575c <__assert_fail@plt+0x43ec>
   15754:	str	r5, [r4]
   15758:	pop	{r4, r5, r6, r7, fp, pc}
   1575c:	bl	15a6c <__assert_fail@plt+0x46fc>
   15760:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15764:	add	fp, sp, #24
   15768:	mov	r8, r1
   1576c:	ldr	r1, [r1]
   15770:	mov	r5, r0
   15774:	add	r0, r1, r1, asr #1
   15778:	cmp	r0, r1
   1577c:	mvnvs	r0, #-2147483648	; 0x80000000
   15780:	cmp	r0, r3
   15784:	mov	r7, r0
   15788:	movgt	r7, r3
   1578c:	cmn	r3, #1
   15790:	movle	r7, r0
   15794:	ldr	r0, [fp, #8]
   15798:	cmn	r0, #1
   1579c:	ble	157c4 <__assert_fail@plt+0x4454>
   157a0:	cmp	r0, #0
   157a4:	beq	15818 <__assert_fail@plt+0x44a8>
   157a8:	cmn	r7, #1
   157ac:	ble	157ec <__assert_fail@plt+0x447c>
   157b0:	mvn	r4, #-2147483648	; 0x80000000
   157b4:	udiv	r6, r4, r0
   157b8:	cmp	r6, r7
   157bc:	bge	15818 <__assert_fail@plt+0x44a8>
   157c0:	b	15828 <__assert_fail@plt+0x44b8>
   157c4:	cmn	r7, #1
   157c8:	ble	15808 <__assert_fail@plt+0x4498>
   157cc:	cmn	r0, #1
   157d0:	beq	15818 <__assert_fail@plt+0x44a8>
   157d4:	mov	r6, #-2147483648	; 0x80000000
   157d8:	mvn	r4, #-2147483648	; 0x80000000
   157dc:	sdiv	r6, r6, r0
   157e0:	cmp	r6, r7
   157e4:	bge	15818 <__assert_fail@plt+0x44a8>
   157e8:	b	15828 <__assert_fail@plt+0x44b8>
   157ec:	beq	15818 <__assert_fail@plt+0x44a8>
   157f0:	mov	r6, #-2147483648	; 0x80000000
   157f4:	mvn	r4, #-2147483648	; 0x80000000
   157f8:	sdiv	r6, r6, r7
   157fc:	cmp	r6, r0
   15800:	bge	15818 <__assert_fail@plt+0x44a8>
   15804:	b	15828 <__assert_fail@plt+0x44b8>
   15808:	mvn	r4, #-2147483648	; 0x80000000
   1580c:	sdiv	r6, r4, r0
   15810:	cmp	r7, r6
   15814:	blt	15828 <__assert_fail@plt+0x44b8>
   15818:	mul	r6, r7, r0
   1581c:	mov	r4, #64	; 0x40
   15820:	cmp	r6, #63	; 0x3f
   15824:	bgt	15830 <__assert_fail@plt+0x44c0>
   15828:	sdiv	r7, r4, r0
   1582c:	mul	r6, r7, r0
   15830:	cmp	r5, #0
   15834:	moveq	r4, #0
   15838:	streq	r4, [r8]
   1583c:	sub	r4, r7, r1
   15840:	cmp	r4, r2
   15844:	bge	158f0 <__assert_fail@plt+0x4580>
   15848:	add	r7, r1, r2
   1584c:	mov	r6, #0
   15850:	mov	r2, #0
   15854:	cmp	r7, r3
   15858:	movwgt	r6, #1
   1585c:	cmn	r3, #1
   15860:	movwgt	r2, #1
   15864:	cmp	r7, r1
   15868:	bvs	15924 <__assert_fail@plt+0x45b4>
   1586c:	ands	r1, r2, r6
   15870:	bne	15924 <__assert_fail@plt+0x45b4>
   15874:	cmn	r0, #1
   15878:	ble	158a0 <__assert_fail@plt+0x4530>
   1587c:	cmp	r0, #0
   15880:	beq	158ec <__assert_fail@plt+0x457c>
   15884:	cmn	r7, #1
   15888:	ble	158c4 <__assert_fail@plt+0x4554>
   1588c:	mvn	r1, #-2147483648	; 0x80000000
   15890:	udiv	r1, r1, r0
   15894:	cmp	r1, r7
   15898:	bge	158ec <__assert_fail@plt+0x457c>
   1589c:	b	15924 <__assert_fail@plt+0x45b4>
   158a0:	cmn	r7, #1
   158a4:	ble	158dc <__assert_fail@plt+0x456c>
   158a8:	cmn	r0, #1
   158ac:	beq	158ec <__assert_fail@plt+0x457c>
   158b0:	mov	r1, #-2147483648	; 0x80000000
   158b4:	sdiv	r1, r1, r0
   158b8:	cmp	r1, r7
   158bc:	bge	158ec <__assert_fail@plt+0x457c>
   158c0:	b	15924 <__assert_fail@plt+0x45b4>
   158c4:	beq	158ec <__assert_fail@plt+0x457c>
   158c8:	mov	r1, #-2147483648	; 0x80000000
   158cc:	sdiv	r1, r1, r7
   158d0:	cmp	r1, r0
   158d4:	bge	158ec <__assert_fail@plt+0x457c>
   158d8:	b	15924 <__assert_fail@plt+0x45b4>
   158dc:	mvn	r1, #-2147483648	; 0x80000000
   158e0:	sdiv	r1, r1, r0
   158e4:	cmp	r7, r1
   158e8:	blt	15924 <__assert_fail@plt+0x45b4>
   158ec:	mul	r6, r7, r0
   158f0:	mov	r0, r5
   158f4:	mov	r1, r6
   158f8:	bl	163e8 <__assert_fail@plt+0x5078>
   158fc:	cmp	r6, #0
   15900:	movwne	r6, #1
   15904:	cmp	r0, #0
   15908:	bne	1591c <__assert_fail@plt+0x45ac>
   1590c:	clz	r1, r5
   15910:	lsr	r1, r1, #5
   15914:	orrs	r1, r1, r6
   15918:	bne	15924 <__assert_fail@plt+0x45b4>
   1591c:	str	r7, [r8]
   15920:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15924:	bl	15a6c <__assert_fail@plt+0x46fc>
   15928:	push	{fp, lr}
   1592c:	mov	fp, sp
   15930:	mov	r1, #1
   15934:	bl	16364 <__assert_fail@plt+0x4ff4>
   15938:	cmp	r0, #0
   1593c:	popne	{fp, pc}
   15940:	bl	15a6c <__assert_fail@plt+0x46fc>
   15944:	push	{fp, lr}
   15948:	mov	fp, sp
   1594c:	bl	16364 <__assert_fail@plt+0x4ff4>
   15950:	cmp	r0, #0
   15954:	popne	{fp, pc}
   15958:	bl	15a6c <__assert_fail@plt+0x46fc>
   1595c:	push	{fp, lr}
   15960:	mov	fp, sp
   15964:	mov	r1, #1
   15968:	bl	16364 <__assert_fail@plt+0x4ff4>
   1596c:	cmp	r0, #0
   15970:	popne	{fp, pc}
   15974:	bl	15a6c <__assert_fail@plt+0x46fc>
   15978:	push	{fp, lr}
   1597c:	mov	fp, sp
   15980:	bl	16364 <__assert_fail@plt+0x4ff4>
   15984:	cmp	r0, #0
   15988:	popne	{fp, pc}
   1598c:	bl	15a6c <__assert_fail@plt+0x46fc>
   15990:	push	{r4, r5, fp, lr}
   15994:	add	fp, sp, #8
   15998:	mov	r5, r0
   1599c:	mov	r0, r1
   159a0:	mov	r4, r1
   159a4:	bl	163b8 <__assert_fail@plt+0x5048>
   159a8:	cmp	r0, #0
   159ac:	beq	159c0 <__assert_fail@plt+0x4650>
   159b0:	mov	r1, r5
   159b4:	mov	r2, r4
   159b8:	pop	{r4, r5, fp, lr}
   159bc:	b	11130 <memcpy@plt>
   159c0:	bl	15a6c <__assert_fail@plt+0x46fc>
   159c4:	push	{r4, r5, fp, lr}
   159c8:	add	fp, sp, #8
   159cc:	mov	r5, r0
   159d0:	mov	r0, r1
   159d4:	mov	r4, r1
   159d8:	bl	163b8 <__assert_fail@plt+0x5048>
   159dc:	cmp	r0, #0
   159e0:	beq	159f4 <__assert_fail@plt+0x4684>
   159e4:	mov	r1, r5
   159e8:	mov	r2, r4
   159ec:	pop	{r4, r5, fp, lr}
   159f0:	b	11130 <memcpy@plt>
   159f4:	bl	15a6c <__assert_fail@plt+0x46fc>
   159f8:	push	{r4, r5, fp, lr}
   159fc:	add	fp, sp, #8
   15a00:	mov	r5, r0
   15a04:	add	r0, r1, #1
   15a08:	mov	r4, r1
   15a0c:	bl	163b8 <__assert_fail@plt+0x5048>
   15a10:	cmp	r0, #0
   15a14:	beq	15a30 <__assert_fail@plt+0x46c0>
   15a18:	mov	r1, #0
   15a1c:	mov	r2, r4
   15a20:	strb	r1, [r0, r4]
   15a24:	mov	r1, r5
   15a28:	pop	{r4, r5, fp, lr}
   15a2c:	b	11130 <memcpy@plt>
   15a30:	bl	15a6c <__assert_fail@plt+0x46fc>
   15a34:	push	{r4, r5, fp, lr}
   15a38:	add	fp, sp, #8
   15a3c:	mov	r4, r0
   15a40:	bl	1125c <strlen@plt>
   15a44:	add	r5, r0, #1
   15a48:	mov	r0, r5
   15a4c:	bl	163b8 <__assert_fail@plt+0x5048>
   15a50:	cmp	r0, #0
   15a54:	beq	15a68 <__assert_fail@plt+0x46f8>
   15a58:	mov	r1, r4
   15a5c:	mov	r2, r5
   15a60:	pop	{r4, r5, fp, lr}
   15a64:	b	11130 <memcpy@plt>
   15a68:	bl	15a6c <__assert_fail@plt+0x46fc>
   15a6c:	push	{fp, lr}
   15a70:	mov	fp, sp
   15a74:	movw	r0, #33048	; 0x8118
   15a78:	movw	r1, #31048	; 0x7948
   15a7c:	mov	r2, #5
   15a80:	movt	r0, #2
   15a84:	movt	r1, #1
   15a88:	ldr	r4, [r0]
   15a8c:	mov	r0, #0
   15a90:	bl	11148 <dcgettext@plt>
   15a94:	movw	r2, #29969	; 0x7511
   15a98:	mov	r3, r0
   15a9c:	mov	r0, r4
   15aa0:	mov	r1, #0
   15aa4:	movt	r2, #1
   15aa8:	bl	111d8 <error@plt>
   15aac:	bl	1134c <abort@plt>
   15ab0:	push	{r4, sl, fp, lr}
   15ab4:	add	fp, sp, #8
   15ab8:	bl	166fc <__assert_fail@plt+0x538c>
   15abc:	mov	r4, r0
   15ac0:	cmn	r0, #1
   15ac4:	bne	15ad8 <__assert_fail@plt+0x4768>
   15ac8:	bl	11274 <__errno_location@plt>
   15acc:	ldr	r0, [r0]
   15ad0:	cmp	r0, #12
   15ad4:	beq	15ae0 <__assert_fail@plt+0x4770>
   15ad8:	mov	r0, r4
   15adc:	pop	{r4, sl, fp, pc}
   15ae0:	bl	15a6c <__assert_fail@plt+0x46fc>
   15ae4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ae8:	add	fp, sp, #28
   15aec:	sub	sp, sp, #20
   15af0:	cmp	r2, #37	; 0x25
   15af4:	bcs	16344 <__assert_fail@plt+0x4fd4>
   15af8:	ldr	r9, [fp, #8]
   15afc:	mov	r5, r2
   15b00:	mov	r4, r1
   15b04:	mov	r7, r0
   15b08:	str	r3, [sp, #12]
   15b0c:	bl	11274 <__errno_location@plt>
   15b10:	mov	r8, r0
   15b14:	mov	r0, #0
   15b18:	str	r0, [r8]
   15b1c:	bl	1122c <__ctype_b_loc@plt>
   15b20:	ldr	r1, [r0]
   15b24:	mov	r2, r7
   15b28:	ldrb	r0, [r2], #1
   15b2c:	add	r3, r1, r0, lsl #1
   15b30:	ldrb	r3, [r3, #1]
   15b34:	tst	r3, #32
   15b38:	bne	15b28 <__assert_fail@plt+0x47b8>
   15b3c:	cmp	r4, #0
   15b40:	add	r6, sp, #16
   15b44:	mov	sl, #4
   15b48:	movne	r6, r4
   15b4c:	cmp	r0, #45	; 0x2d
   15b50:	bne	15b60 <__assert_fail@plt+0x47f0>
   15b54:	mov	r0, sl
   15b58:	sub	sp, fp, #28
   15b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b60:	mov	r0, r7
   15b64:	mov	r1, r6
   15b68:	mov	r2, r5
   15b6c:	bl	11250 <strtoul@plt>
   15b70:	ldr	r5, [r6]
   15b74:	cmp	r5, r7
   15b78:	beq	15bb0 <__assert_fail@plt+0x4840>
   15b7c:	mov	r4, r0
   15b80:	ldr	r0, [r8]
   15b84:	cmp	r0, #0
   15b88:	beq	15d14 <__assert_fail@plt+0x49a4>
   15b8c:	cmp	r0, #34	; 0x22
   15b90:	bne	15b54 <__assert_fail@plt+0x47e4>
   15b94:	mov	sl, #1
   15b98:	cmp	r9, #0
   15b9c:	beq	16330 <__assert_fail@plt+0x4fc0>
   15ba0:	ldrb	r7, [r5]
   15ba4:	cmp	r7, #0
   15ba8:	bne	15be8 <__assert_fail@plt+0x4878>
   15bac:	b	16330 <__assert_fail@plt+0x4fc0>
   15bb0:	cmp	r9, #0
   15bb4:	beq	15b54 <__assert_fail@plt+0x47e4>
   15bb8:	ldrb	r1, [r7]
   15bbc:	cmp	r1, #0
   15bc0:	beq	15b54 <__assert_fail@plt+0x47e4>
   15bc4:	mov	r0, r9
   15bc8:	bl	11268 <strchr@plt>
   15bcc:	cmp	r0, #0
   15bd0:	beq	15b54 <__assert_fail@plt+0x47e4>
   15bd4:	mov	r4, #1
   15bd8:	mov	sl, #0
   15bdc:	ldrb	r7, [r5]
   15be0:	cmp	r7, #0
   15be4:	beq	16330 <__assert_fail@plt+0x4fc0>
   15be8:	mov	r0, r9
   15bec:	mov	r1, r7
   15bf0:	bl	11268 <strchr@plt>
   15bf4:	cmp	r0, #0
   15bf8:	beq	15eb0 <__assert_fail@plt+0x4b40>
   15bfc:	sub	r0, r7, #69	; 0x45
   15c00:	mov	lr, #1
   15c04:	mov	r8, #1024	; 0x400
   15c08:	cmp	r0, #47	; 0x2f
   15c0c:	bhi	15d64 <__assert_fail@plt+0x49f4>
   15c10:	add	r1, pc, #0
   15c14:	ldr	pc, [r1, r0, lsl #2]
   15c18:	ldrdeq	r5, [r1], -r8
   15c1c:	andeq	r5, r1, r4, ror #26
   15c20:	ldrdeq	r5, [r1], -r8
   15c24:	andeq	r5, r1, r4, ror #26
   15c28:	andeq	r5, r1, r4, ror #26
   15c2c:	andeq	r5, r1, r4, ror #26
   15c30:	ldrdeq	r5, [r1], -r8
   15c34:	andeq	r5, r1, r4, ror #26
   15c38:	ldrdeq	r5, [r1], -r8
   15c3c:	andeq	r5, r1, r4, ror #26
   15c40:	andeq	r5, r1, r4, ror #26
   15c44:	ldrdeq	r5, [r1], -r8
   15c48:	andeq	r5, r1, r4, ror #26
   15c4c:	andeq	r5, r1, r4, ror #26
   15c50:	andeq	r5, r1, r4, ror #26
   15c54:	ldrdeq	r5, [r1], -r8
   15c58:	andeq	r5, r1, r4, ror #26
   15c5c:	andeq	r5, r1, r4, ror #26
   15c60:	andeq	r5, r1, r4, ror #26
   15c64:	andeq	r5, r1, r4, ror #26
   15c68:	ldrdeq	r5, [r1], -r8
   15c6c:	ldrdeq	r5, [r1], -r8
   15c70:	andeq	r5, r1, r4, ror #26
   15c74:	andeq	r5, r1, r4, ror #26
   15c78:	andeq	r5, r1, r4, ror #26
   15c7c:	andeq	r5, r1, r4, ror #26
   15c80:	andeq	r5, r1, r4, ror #26
   15c84:	andeq	r5, r1, r4, ror #26
   15c88:	andeq	r5, r1, r4, ror #26
   15c8c:	andeq	r5, r1, r4, ror #26
   15c90:	andeq	r5, r1, r4, ror #26
   15c94:	andeq	r5, r1, r4, ror #26
   15c98:	andeq	r5, r1, r4, ror #26
   15c9c:	andeq	r5, r1, r4, ror #26
   15ca0:	ldrdeq	r5, [r1], -r8
   15ca4:	andeq	r5, r1, r4, ror #26
   15ca8:	andeq	r5, r1, r4, ror #26
   15cac:	andeq	r5, r1, r4, ror #26
   15cb0:	ldrdeq	r5, [r1], -r8
   15cb4:	andeq	r5, r1, r4, ror #26
   15cb8:	ldrdeq	r5, [r1], -r8
   15cbc:	andeq	r5, r1, r4, ror #26
   15cc0:	andeq	r5, r1, r4, ror #26
   15cc4:	andeq	r5, r1, r4, ror #26
   15cc8:	andeq	r5, r1, r4, ror #26
   15ccc:	andeq	r5, r1, r4, ror #26
   15cd0:	andeq	r5, r1, r4, ror #26
   15cd4:	ldrdeq	r5, [r1], -r8
   15cd8:	mov	r0, r9
   15cdc:	mov	r1, #48	; 0x30
   15ce0:	bl	11268 <strchr@plt>
   15ce4:	cmp	r0, #0
   15ce8:	beq	15d24 <__assert_fail@plt+0x49b4>
   15cec:	ldrb	r0, [r5, #1]
   15cf0:	cmp	r0, #66	; 0x42
   15cf4:	cmpne	r0, #68	; 0x44
   15cf8:	bne	15d38 <__assert_fail@plt+0x49c8>
   15cfc:	mov	lr, #2
   15d00:	mov	r8, #1000	; 0x3e8
   15d04:	sub	r1, r7, #66	; 0x42
   15d08:	cmp	r1, #53	; 0x35
   15d0c:	bls	15d70 <__assert_fail@plt+0x4a00>
   15d10:	b	15eb0 <__assert_fail@plt+0x4b40>
   15d14:	mov	sl, r0
   15d18:	cmp	r9, #0
   15d1c:	bne	15ba0 <__assert_fail@plt+0x4830>
   15d20:	b	16330 <__assert_fail@plt+0x4fc0>
   15d24:	mov	lr, #1
   15d28:	sub	r1, r7, #66	; 0x42
   15d2c:	cmp	r1, #53	; 0x35
   15d30:	bls	15d70 <__assert_fail@plt+0x4a00>
   15d34:	b	15eb0 <__assert_fail@plt+0x4b40>
   15d38:	cmp	r0, #105	; 0x69
   15d3c:	bne	15d60 <__assert_fail@plt+0x49f0>
   15d40:	ldrb	r0, [r5, #2]
   15d44:	mov	lr, #1
   15d48:	cmp	r0, #66	; 0x42
   15d4c:	movweq	lr, #3
   15d50:	sub	r1, r7, #66	; 0x42
   15d54:	cmp	r1, #53	; 0x35
   15d58:	bls	15d70 <__assert_fail@plt+0x4a00>
   15d5c:	b	15eb0 <__assert_fail@plt+0x4b40>
   15d60:	mov	lr, #1
   15d64:	sub	r1, r7, #66	; 0x42
   15d68:	cmp	r1, #53	; 0x35
   15d6c:	bhi	15eb0 <__assert_fail@plt+0x4b40>
   15d70:	add	r2, pc, #4
   15d74:	mov	r0, #0
   15d78:	ldr	pc, [r2, r1, lsl #2]
   15d7c:	andeq	r6, r1, r8, ror r0
   15d80:			; <UNDEFINED> instruction: 0x00015eb0
   15d84:			; <UNDEFINED> instruction: 0x00015eb0
   15d88:	muleq	r1, r4, r0
   15d8c:			; <UNDEFINED> instruction: 0x00015eb0
   15d90:	andeq	r5, r1, r4, asr lr
   15d94:			; <UNDEFINED> instruction: 0x00015eb0
   15d98:			; <UNDEFINED> instruction: 0x00015eb0
   15d9c:			; <UNDEFINED> instruction: 0x00015eb0
   15da0:	andeq	r5, r1, r8, asr #29
   15da4:			; <UNDEFINED> instruction: 0x00015eb0
   15da8:	andeq	r5, r1, r8, ror #29
   15dac:			; <UNDEFINED> instruction: 0x00015eb0
   15db0:			; <UNDEFINED> instruction: 0x00015eb0
   15db4:	andeq	r6, r1, ip, asr #2
   15db8:			; <UNDEFINED> instruction: 0x00015eb0
   15dbc:			; <UNDEFINED> instruction: 0x00015eb0
   15dc0:			; <UNDEFINED> instruction: 0x00015eb0
   15dc4:	andeq	r5, r1, r8, lsr #30
   15dc8:			; <UNDEFINED> instruction: 0x00015eb0
   15dcc:			; <UNDEFINED> instruction: 0x00015eb0
   15dd0:			; <UNDEFINED> instruction: 0x00015eb0
   15dd4:			; <UNDEFINED> instruction: 0x00015eb0
   15dd8:	andeq	r6, r1, r8, ror #3
   15ddc:	andeq	r5, r1, r0, lsr #31
   15de0:			; <UNDEFINED> instruction: 0x00015eb0
   15de4:			; <UNDEFINED> instruction: 0x00015eb0
   15de8:			; <UNDEFINED> instruction: 0x00015eb0
   15dec:			; <UNDEFINED> instruction: 0x00015eb0
   15df0:			; <UNDEFINED> instruction: 0x00015eb0
   15df4:			; <UNDEFINED> instruction: 0x00015eb0
   15df8:			; <UNDEFINED> instruction: 0x00015eb0
   15dfc:	andeq	r6, r1, r0, ror #5
   15e00:	andeq	r6, r1, r8, lsl r3
   15e04:			; <UNDEFINED> instruction: 0x00015eb0
   15e08:			; <UNDEFINED> instruction: 0x00015eb0
   15e0c:			; <UNDEFINED> instruction: 0x00015eb0
   15e10:	andeq	r5, r1, r4, asr lr
   15e14:			; <UNDEFINED> instruction: 0x00015eb0
   15e18:			; <UNDEFINED> instruction: 0x00015eb0
   15e1c:			; <UNDEFINED> instruction: 0x00015eb0
   15e20:	andeq	r5, r1, r8, asr #29
   15e24:			; <UNDEFINED> instruction: 0x00015eb0
   15e28:	andeq	r5, r1, r8, ror #29
   15e2c:			; <UNDEFINED> instruction: 0x00015eb0
   15e30:			; <UNDEFINED> instruction: 0x00015eb0
   15e34:			; <UNDEFINED> instruction: 0x00015eb0
   15e38:			; <UNDEFINED> instruction: 0x00015eb0
   15e3c:			; <UNDEFINED> instruction: 0x00015eb0
   15e40:			; <UNDEFINED> instruction: 0x00015eb0
   15e44:	andeq	r5, r1, r8, lsr #30
   15e48:			; <UNDEFINED> instruction: 0x00015eb0
   15e4c:			; <UNDEFINED> instruction: 0x00015eb0
   15e50:	andeq	r6, r1, r4, lsl #6
   15e54:	mvn	r0, #0
   15e58:	mul	r1, r4, r8
   15e5c:	mov	r7, #0
   15e60:	udiv	r0, r0, r8
   15e64:	cmp	r0, r4
   15e68:	mvncc	r1, #0
   15e6c:	cmp	r0, r1
   15e70:	mul	r2, r1, r8
   15e74:	mvncc	r2, #0
   15e78:	cmp	r0, r2
   15e7c:	mul	r3, r2, r8
   15e80:	mov	r2, #0
   15e84:	mvncc	r3, #0
   15e88:	movwcc	r7, #1
   15e8c:	cmp	r0, r1
   15e90:	mov	r1, #0
   15e94:	movwcc	r1, #1
   15e98:	cmp	r0, r4
   15e9c:	mov	r4, r3
   15ea0:	movwcc	r2, #1
   15ea4:	orr	r0, r2, r1
   15ea8:	orr	r0, r0, r7
   15eac:	b	16318 <__assert_fail@plt+0x4fa8>
   15eb0:	ldr	r0, [sp, #12]
   15eb4:	orr	sl, sl, #2
   15eb8:	str	r4, [r0]
   15ebc:	mov	r0, sl
   15ec0:	sub	sp, fp, #28
   15ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ec8:	mvn	r0, #0
   15ecc:	mul	r1, r4, r8
   15ed0:	udiv	r0, r0, r8
   15ed4:	cmp	r0, r4
   15ed8:	mov	r0, #0
   15edc:	mvncc	r1, #0
   15ee0:	movwcc	r0, #1
   15ee4:	b	16314 <__assert_fail@plt+0x4fa4>
   15ee8:	mvn	r0, #0
   15eec:	mul	r1, r4, r8
   15ef0:	mov	r3, #0
   15ef4:	udiv	r0, r0, r8
   15ef8:	cmp	r0, r4
   15efc:	mvncc	r1, #0
   15f00:	cmp	r0, r1
   15f04:	mul	r2, r1, r8
   15f08:	mov	r1, #0
   15f0c:	mvncc	r2, #0
   15f10:	movwcc	r3, #1
   15f14:	cmp	r0, r4
   15f18:	movwcc	r1, #1
   15f1c:	mov	r4, r2
   15f20:	orr	r0, r1, r3
   15f24:	b	16318 <__assert_fail@plt+0x4fa8>
   15f28:	mvn	r0, #0
   15f2c:	mul	r1, r4, r8
   15f30:	mov	r7, #0
   15f34:	udiv	r0, r0, r8
   15f38:	cmp	r0, r4
   15f3c:	mvncc	r1, #0
   15f40:	cmp	r0, r1
   15f44:	mul	r2, r1, r8
   15f48:	mvncc	r2, #0
   15f4c:	cmp	r0, r2
   15f50:	mul	r3, r2, r8
   15f54:	mvncc	r3, #0
   15f58:	cmp	r0, r3
   15f5c:	mul	ip, r3, r8
   15f60:	mov	r3, #0
   15f64:	mvncc	ip, #0
   15f68:	movwcc	r7, #1
   15f6c:	cmp	r0, r2
   15f70:	mov	r2, #0
   15f74:	movwcc	r2, #1
   15f78:	cmp	r0, r1
   15f7c:	mov	r1, #0
   15f80:	movwcc	r1, #1
   15f84:	cmp	r0, r4
   15f88:	mov	r4, ip
   15f8c:	movwcc	r3, #1
   15f90:	orr	r0, r3, r1
   15f94:	orr	r0, r0, r2
   15f98:	orr	r0, r0, r7
   15f9c:	b	16318 <__assert_fail@plt+0x4fa8>
   15fa0:	mvn	r0, #0
   15fa4:	str	lr, [sp, #8]
   15fa8:	mul	lr, r4, r8
   15fac:	udiv	r0, r0, r8
   15fb0:	cmp	r0, r4
   15fb4:	mvncc	lr, #0
   15fb8:	cmp	r0, lr
   15fbc:	mul	r9, lr, r8
   15fc0:	mvncc	r9, #0
   15fc4:	cmp	r0, r9
   15fc8:	mul	r7, r9, r8
   15fcc:	mvncc	r7, #0
   15fd0:	cmp	r0, r7
   15fd4:	mul	r3, r7, r8
   15fd8:	mvncc	r3, #0
   15fdc:	cmp	r0, r3
   15fe0:	mul	r1, r3, r8
   15fe4:	mvncc	r1, #0
   15fe8:	cmp	r0, r1
   15fec:	mul	r2, r1, r8
   15ff0:	mvncc	r2, #0
   15ff4:	cmp	r0, r2
   15ff8:	mul	ip, r2, r8
   15ffc:	mov	r8, #0
   16000:	mov	r2, #0
   16004:	mvncc	ip, #0
   16008:	movwcc	r8, #1
   1600c:	cmp	r0, r1
   16010:	mov	r1, #0
   16014:	movwcc	r1, #1
   16018:	cmp	r0, r3
   1601c:	mov	r3, #0
   16020:	movwcc	r3, #1
   16024:	cmp	r0, r7
   16028:	mov	r7, #0
   1602c:	movwcc	r7, #1
   16030:	cmp	r0, r9
   16034:	mov	r9, #0
   16038:	movwcc	r9, #1
   1603c:	cmp	r0, lr
   16040:	mov	lr, #0
   16044:	movwcc	lr, #1
   16048:	cmp	r0, r4
   1604c:	mov	r4, ip
   16050:	movwcc	r2, #1
   16054:	orr	r0, r2, lr
   16058:	ldr	lr, [sp, #8]
   1605c:	orr	r0, r0, r9
   16060:	orr	r0, r0, r7
   16064:	orr	r0, r0, r3
   16068:	orr	r0, r0, r1
   1606c:	orr	r0, r0, r8
   16070:	and	r0, r0, #1
   16074:	b	16318 <__assert_fail@plt+0x4fa8>
   16078:	mov	r1, #0
   1607c:	lsr	r0, r4, #22
   16080:	cmp	r1, r4, lsr #22
   16084:	lsl	r4, r4, #10
   16088:	movwne	r0, #1
   1608c:	mvnne	r4, #0
   16090:	b	16318 <__assert_fail@plt+0x4fa8>
   16094:	mvn	r0, #0
   16098:	mul	ip, r4, r8
   1609c:	str	lr, [sp, #8]
   160a0:	mov	r9, #0
   160a4:	udiv	r0, r0, r8
   160a8:	cmp	r0, r4
   160ac:	mvncc	ip, #0
   160b0:	cmp	r0, ip
   160b4:	mul	r2, ip, r8
   160b8:	mvncc	r2, #0
   160bc:	cmp	r0, r2
   160c0:	mul	r3, r2, r8
   160c4:	mvncc	r3, #0
   160c8:	cmp	r0, r3
   160cc:	mul	r7, r3, r8
   160d0:	mvncc	r7, #0
   160d4:	cmp	r0, r7
   160d8:	mul	r1, r7, r8
   160dc:	mvncc	r1, #0
   160e0:	cmp	r0, r1
   160e4:	mul	lr, r1, r8
   160e8:	mov	r8, #0
   160ec:	mov	r1, #0
   160f0:	mvncc	lr, #0
   160f4:	movwcc	r8, #1
   160f8:	cmp	r0, r7
   160fc:	mov	r7, #0
   16100:	movwcc	r7, #1
   16104:	cmp	r0, r3
   16108:	mov	r3, #0
   1610c:	movwcc	r3, #1
   16110:	cmp	r0, r2
   16114:	mov	r2, #0
   16118:	movwcc	r2, #1
   1611c:	cmp	r0, ip
   16120:	movwcc	r1, #1
   16124:	cmp	r0, r4
   16128:	mov	r4, lr
   1612c:	ldr	lr, [sp, #8]
   16130:	movwcc	r9, #1
   16134:	orr	r0, r9, r1
   16138:	orr	r0, r0, r2
   1613c:	orr	r0, r0, r3
   16140:	orr	r0, r0, r7
   16144:	orr	r0, r0, r8
   16148:	b	16318 <__assert_fail@plt+0x4fa8>
   1614c:	mvn	r0, #0
   16150:	mul	r1, r4, r8
   16154:	udiv	r0, r0, r8
   16158:	cmp	r0, r4
   1615c:	mvncc	r1, #0
   16160:	cmp	r0, r1
   16164:	mul	r2, r1, r8
   16168:	mvncc	r2, #0
   1616c:	cmp	r0, r2
   16170:	mul	r3, r2, r8
   16174:	mvncc	r3, #0
   16178:	cmp	r0, r3
   1617c:	mul	r7, r3, r8
   16180:	mvncc	r7, #0
   16184:	cmp	r0, r7
   16188:	mul	ip, r7, r8
   1618c:	mov	r8, lr
   16190:	mov	lr, #0
   16194:	mov	r7, #0
   16198:	mvncc	ip, #0
   1619c:	movwcc	lr, #1
   161a0:	cmp	r0, r3
   161a4:	mov	r3, #0
   161a8:	movwcc	r3, #1
   161ac:	cmp	r0, r2
   161b0:	mov	r2, #0
   161b4:	movwcc	r2, #1
   161b8:	cmp	r0, r1
   161bc:	mov	r1, #0
   161c0:	movwcc	r1, #1
   161c4:	cmp	r0, r4
   161c8:	mov	r4, ip
   161cc:	movwcc	r7, #1
   161d0:	orr	r0, r7, r1
   161d4:	orr	r0, r0, r2
   161d8:	orr	r0, r0, r3
   161dc:	orr	r0, r0, lr
   161e0:	mov	lr, r8
   161e4:	b	16318 <__assert_fail@plt+0x4fa8>
   161e8:	mvn	r0, #0
   161ec:	str	lr, [sp, #8]
   161f0:	mul	lr, r4, r8
   161f4:	udiv	r0, r0, r8
   161f8:	cmp	r0, r4
   161fc:	mvncc	lr, #0
   16200:	cmp	r0, lr
   16204:	mul	r9, lr, r8
   16208:	mvncc	r9, #0
   1620c:	cmp	r0, r9
   16210:	mul	r7, r9, r8
   16214:	mvncc	r7, #0
   16218:	cmp	r0, r7
   1621c:	mul	r3, r7, r8
   16220:	mvncc	r3, #0
   16224:	cmp	r0, r3
   16228:	mul	r1, r3, r8
   1622c:	mvncc	r1, #0
   16230:	cmp	r0, r1
   16234:	mul	r2, r1, r8
   16238:	mvncc	r2, #0
   1623c:	cmp	r0, r2
   16240:	mul	ip, r2, r8
   16244:	mvncc	ip, #0
   16248:	cmp	r0, ip
   1624c:	mul	r8, ip, r8
   16250:	mov	ip, #0
   16254:	mvncc	r8, #0
   16258:	str	r8, [sp, #4]
   1625c:	mov	r8, #0
   16260:	movwcc	r8, #1
   16264:	cmp	r0, r2
   16268:	mov	r2, #0
   1626c:	movwcc	r2, #1
   16270:	cmp	r0, r1
   16274:	mov	r1, #0
   16278:	movwcc	r1, #1
   1627c:	cmp	r0, r3
   16280:	mov	r3, #0
   16284:	movwcc	r3, #1
   16288:	cmp	r0, r7
   1628c:	mov	r7, #0
   16290:	movwcc	r7, #1
   16294:	cmp	r0, r9
   16298:	mov	r9, #0
   1629c:	movwcc	r9, #1
   162a0:	cmp	r0, lr
   162a4:	mov	lr, #0
   162a8:	movwcc	lr, #1
   162ac:	cmp	r0, r4
   162b0:	ldr	r4, [sp, #4]
   162b4:	movwcc	ip, #1
   162b8:	orr	r0, ip, lr
   162bc:	ldr	lr, [sp, #8]
   162c0:	orr	r0, r0, r9
   162c4:	orr	r0, r0, r7
   162c8:	orr	r0, r0, r3
   162cc:	orr	r0, r0, r1
   162d0:	orr	r0, r0, r2
   162d4:	orr	r0, r0, r8
   162d8:	and	r0, r0, #1
   162dc:	b	16318 <__assert_fail@plt+0x4fa8>
   162e0:	movw	r0, #65535	; 0xffff
   162e4:	movt	r0, #63	; 0x3f
   162e8:	orr	r1, r0, #4194304	; 0x400000
   162ec:	mov	r0, #0
   162f0:	cmp	r4, r1
   162f4:	lsl	r4, r4, #9
   162f8:	movwhi	r0, #1
   162fc:	mvnhi	r4, #0
   16300:	b	16318 <__assert_fail@plt+0x4fa8>
   16304:	cmp	r4, #0
   16308:	lsl	r1, r4, #1
   1630c:	lsr	r0, r4, #31
   16310:	mvnmi	r1, #0
   16314:	mov	r4, r1
   16318:	add	r1, r5, lr
   1631c:	orr	sl, r0, sl
   16320:	str	r1, [r6]
   16324:	ldrb	r1, [r5, lr]
   16328:	cmp	r1, #0
   1632c:	orrne	sl, sl, #2
   16330:	ldr	r0, [sp, #12]
   16334:	str	r4, [r0]
   16338:	mov	r0, sl
   1633c:	sub	sp, fp, #28
   16340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16344:	movw	r0, #31065	; 0x7959
   16348:	movw	r1, #31103	; 0x797f
   1634c:	movw	r3, #31119	; 0x798f
   16350:	mov	r2, #85	; 0x55
   16354:	movt	r0, #1
   16358:	movt	r1, #1
   1635c:	movt	r3, #1
   16360:	bl	11370 <__assert_fail@plt>
   16364:	clz	r2, r1
   16368:	clz	r3, r0
   1636c:	lsr	r2, r2, #5
   16370:	lsr	r3, r3, #5
   16374:	orrs	r2, r3, r2
   16378:	movwne	r1, #1
   1637c:	movwne	r0, #1
   16380:	cmp	r1, #0
   16384:	beq	163b4 <__assert_fail@plt+0x5044>
   16388:	mvn	r2, #-2147483648	; 0x80000000
   1638c:	udiv	r2, r2, r1
   16390:	cmp	r2, r0
   16394:	bcs	163b4 <__assert_fail@plt+0x5044>
   16398:	push	{fp, lr}
   1639c:	mov	fp, sp
   163a0:	bl	11274 <__errno_location@plt>
   163a4:	mov	r1, #12
   163a8:	str	r1, [r0]
   163ac:	mov	r0, #0
   163b0:	pop	{fp, pc}
   163b4:	b	110a0 <calloc@plt>
   163b8:	cmp	r0, #0
   163bc:	movweq	r0, #1
   163c0:	cmn	r0, #1
   163c4:	ble	163cc <__assert_fail@plt+0x505c>
   163c8:	b	111f0 <malloc@plt>
   163cc:	push	{fp, lr}
   163d0:	mov	fp, sp
   163d4:	bl	11274 <__errno_location@plt>
   163d8:	mov	r1, #12
   163dc:	str	r1, [r0]
   163e0:	mov	r0, #0
   163e4:	pop	{fp, pc}
   163e8:	push	{fp, lr}
   163ec:	mov	fp, sp
   163f0:	cmp	r0, #0
   163f4:	beq	16410 <__assert_fail@plt+0x50a0>
   163f8:	cmp	r1, #0
   163fc:	beq	1641c <__assert_fail@plt+0x50ac>
   16400:	cmn	r1, #1
   16404:	ble	16428 <__assert_fail@plt+0x50b8>
   16408:	pop	{fp, lr}
   1640c:	b	11154 <realloc@plt>
   16410:	mov	r0, r1
   16414:	pop	{fp, lr}
   16418:	b	163b8 <__assert_fail@plt+0x5048>
   1641c:	bl	12a1c <__assert_fail@plt+0x16ac>
   16420:	mov	r0, #0
   16424:	pop	{fp, pc}
   16428:	bl	11274 <__errno_location@plt>
   1642c:	mov	r1, #12
   16430:	str	r1, [r0]
   16434:	mov	r0, #0
   16438:	pop	{fp, pc}
   1643c:	push	{r4, r5, r6, sl, fp, lr}
   16440:	add	fp, sp, #16
   16444:	mov	r4, r0
   16448:	bl	111c0 <__fpending@plt>
   1644c:	ldr	r6, [r4]
   16450:	mov	r5, r0
   16454:	mov	r0, r4
   16458:	bl	164c0 <__assert_fail@plt+0x5150>
   1645c:	tst	r6, #32
   16460:	bne	16498 <__assert_fail@plt+0x5128>
   16464:	cmp	r0, #0
   16468:	mov	r4, r0
   1646c:	mvnne	r4, #0
   16470:	cmp	r5, #0
   16474:	bne	164a4 <__assert_fail@plt+0x5134>
   16478:	cmp	r0, #0
   1647c:	beq	164a4 <__assert_fail@plt+0x5134>
   16480:	bl	11274 <__errno_location@plt>
   16484:	ldr	r0, [r0]
   16488:	subs	r4, r0, #9
   1648c:	mvnne	r4, #0
   16490:	mov	r0, r4
   16494:	pop	{r4, r5, r6, sl, fp, pc}
   16498:	mvn	r4, #0
   1649c:	cmp	r0, #0
   164a0:	beq	164ac <__assert_fail@plt+0x513c>
   164a4:	mov	r0, r4
   164a8:	pop	{r4, r5, r6, sl, fp, pc}
   164ac:	bl	11274 <__errno_location@plt>
   164b0:	mov	r1, #0
   164b4:	str	r1, [r0]
   164b8:	mov	r0, r4
   164bc:	pop	{r4, r5, r6, sl, fp, pc}
   164c0:	push	{r4, r5, r6, sl, fp, lr}
   164c4:	add	fp, sp, #16
   164c8:	sub	sp, sp, #8
   164cc:	mov	r4, r0
   164d0:	bl	112bc <fileno@plt>
   164d4:	cmn	r0, #1
   164d8:	ble	1654c <__assert_fail@plt+0x51dc>
   164dc:	mov	r0, r4
   164e0:	bl	11208 <__freading@plt>
   164e4:	cmp	r0, #0
   164e8:	beq	16514 <__assert_fail@plt+0x51a4>
   164ec:	mov	r0, r4
   164f0:	bl	112bc <fileno@plt>
   164f4:	mov	r1, #1
   164f8:	mov	r2, #0
   164fc:	mov	r3, #0
   16500:	str	r1, [sp]
   16504:	bl	1119c <lseek64@plt>
   16508:	and	r0, r0, r1
   1650c:	cmn	r0, #1
   16510:	beq	1654c <__assert_fail@plt+0x51dc>
   16514:	mov	r0, r4
   16518:	bl	1655c <__assert_fail@plt+0x51ec>
   1651c:	cmp	r0, #0
   16520:	beq	1654c <__assert_fail@plt+0x51dc>
   16524:	bl	11274 <__errno_location@plt>
   16528:	ldr	r6, [r0]
   1652c:	mov	r5, r0
   16530:	mov	r0, r4
   16534:	bl	112d4 <fclose@plt>
   16538:	cmp	r6, #0
   1653c:	strne	r6, [r5]
   16540:	mvnne	r0, #0
   16544:	sub	sp, fp, #16
   16548:	pop	{r4, r5, r6, sl, fp, pc}
   1654c:	mov	r0, r4
   16550:	sub	sp, fp, #16
   16554:	pop	{r4, r5, r6, sl, fp, lr}
   16558:	b	112d4 <fclose@plt>
   1655c:	push	{r4, sl, fp, lr}
   16560:	add	fp, sp, #8
   16564:	sub	sp, sp, #8
   16568:	mov	r4, r0
   1656c:	cmp	r0, #0
   16570:	beq	165a8 <__assert_fail@plt+0x5238>
   16574:	mov	r0, r4
   16578:	bl	11208 <__freading@plt>
   1657c:	cmp	r0, #0
   16580:	beq	165a8 <__assert_fail@plt+0x5238>
   16584:	ldrb	r0, [r4, #1]
   16588:	tst	r0, #1
   1658c:	beq	165a8 <__assert_fail@plt+0x5238>
   16590:	mov	r0, #1
   16594:	mov	r2, #0
   16598:	mov	r3, #0
   1659c:	str	r0, [sp]
   165a0:	mov	r0, r4
   165a4:	bl	165b8 <__assert_fail@plt+0x5248>
   165a8:	mov	r0, r4
   165ac:	sub	sp, fp, #8
   165b0:	pop	{r4, sl, fp, lr}
   165b4:	b	11100 <fflush@plt>
   165b8:	push	{r4, r5, r6, r7, fp, lr}
   165bc:	add	fp, sp, #16
   165c0:	sub	sp, sp, #8
   165c4:	mov	r4, r0
   165c8:	ldr	r0, [r0, #4]
   165cc:	mov	r5, r3
   165d0:	mov	r6, r2
   165d4:	ldr	r1, [r4, #8]
   165d8:	cmp	r1, r0
   165dc:	bne	165f8 <__assert_fail@plt+0x5288>
   165e0:	ldrd	r0, [r4, #16]
   165e4:	cmp	r1, r0
   165e8:	bne	165f8 <__assert_fail@plt+0x5288>
   165ec:	ldr	r0, [r4, #36]	; 0x24
   165f0:	cmp	r0, #0
   165f4:	beq	16610 <__assert_fail@plt+0x52a0>
   165f8:	mov	r0, r4
   165fc:	mov	r2, r6
   16600:	mov	r3, r5
   16604:	sub	sp, fp, #16
   16608:	pop	{r4, r5, r6, r7, fp, lr}
   1660c:	b	112e0 <fseeko64@plt>
   16610:	ldr	r7, [fp, #8]
   16614:	mov	r0, r4
   16618:	bl	112bc <fileno@plt>
   1661c:	mov	r2, r6
   16620:	mov	r3, r5
   16624:	str	r7, [sp]
   16628:	bl	1119c <lseek64@plt>
   1662c:	and	r2, r0, r1
   16630:	cmn	r2, #1
   16634:	beq	16654 <__assert_fail@plt+0x52e4>
   16638:	strd	r0, [r4, #80]	; 0x50
   1663c:	ldr	r0, [r4]
   16640:	bic	r0, r0, #16
   16644:	str	r0, [r4]
   16648:	mov	r0, #0
   1664c:	sub	sp, fp, #16
   16650:	pop	{r4, r5, r6, r7, fp, pc}
   16654:	mvn	r0, #0
   16658:	sub	sp, fp, #16
   1665c:	pop	{r4, r5, r6, r7, fp, pc}
   16660:	push	{fp, lr}
   16664:	mov	fp, sp
   16668:	mov	r0, #14
   1666c:	bl	1131c <nl_langinfo@plt>
   16670:	movw	r1, #28007	; 0x6d67
   16674:	cmp	r0, #0
   16678:	movt	r1, #1
   1667c:	movne	r1, r0
   16680:	movw	r0, #31200	; 0x79e0
   16684:	ldrb	r2, [r1]
   16688:	movt	r0, #1
   1668c:	cmp	r2, #0
   16690:	movne	r0, r1
   16694:	pop	{fp, pc}
   16698:	push	{r4, r5, r6, r7, fp, lr}
   1669c:	add	fp, sp, #16
   166a0:	sub	sp, sp, #8
   166a4:	cmp	r0, #0
   166a8:	add	r5, sp, #4
   166ac:	mov	r7, r2
   166b0:	mov	r4, r1
   166b4:	movne	r5, r0
   166b8:	mov	r0, r5
   166bc:	bl	111cc <mbrtowc@plt>
   166c0:	mov	r6, r0
   166c4:	cmp	r7, #0
   166c8:	beq	166f0 <__assert_fail@plt+0x5380>
   166cc:	cmn	r6, #2
   166d0:	bcc	166f0 <__assert_fail@plt+0x5380>
   166d4:	mov	r0, #0
   166d8:	bl	169ac <__assert_fail@plt+0x563c>
   166dc:	cmp	r0, #0
   166e0:	bne	166f0 <__assert_fail@plt+0x5380>
   166e4:	ldrb	r0, [r4]
   166e8:	mov	r6, #1
   166ec:	str	r0, [r5]
   166f0:	mov	r0, r6
   166f4:	sub	sp, fp, #16
   166f8:	pop	{r4, r5, r6, r7, fp, pc}
   166fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16700:	add	fp, sp, #28
   16704:	sub	sp, sp, #12
   16708:	mov	sl, r2
   1670c:	mov	r6, r1
   16710:	cmp	r0, #0
   16714:	beq	167a8 <__assert_fail@plt+0x5438>
   16718:	mov	r7, r0
   1671c:	mov	r8, #10
   16720:	mov	r0, #0
   16724:	mov	r1, #40	; 0x28
   16728:	str	r8, [sp, #8]
   1672c:	bl	163e8 <__assert_fail@plt+0x5078>
   16730:	mvn	r9, #0
   16734:	cmp	r0, #0
   16738:	beq	16940 <__assert_fail@plt+0x55d0>
   1673c:	str	sl, [sp, #4]
   16740:	mov	r5, r0
   16744:	add	sl, sp, #8
   16748:	mov	r0, r7
   1674c:	mov	r1, r6
   16750:	mov	r2, r5
   16754:	mov	r3, sl
   16758:	bl	11298 <getgrouplist@plt>
   1675c:	mov	r4, r0
   16760:	ldr	r0, [sp, #8]
   16764:	cmn	r4, #1
   16768:	bgt	16778 <__assert_fail@plt+0x5408>
   1676c:	cmp	r8, r0
   16770:	lsleq	r0, r8, #1
   16774:	streq	r0, [sp, #8]
   16778:	cmp	r0, #536870912	; 0x20000000
   1677c:	bcs	16840 <__assert_fail@plt+0x54d0>
   16780:	lsl	r1, r0, #2
   16784:	mov	r0, r5
   16788:	bl	163e8 <__assert_fail@plt+0x5078>
   1678c:	cmp	r0, #0
   16790:	beq	1684c <__assert_fail@plt+0x54dc>
   16794:	cmn	r4, #1
   16798:	bgt	16860 <__assert_fail@plt+0x54f0>
   1679c:	ldr	r8, [sp, #8]
   167a0:	mov	r5, r0
   167a4:	b	16748 <__assert_fail@plt+0x53d8>
   167a8:	mov	r0, #0
   167ac:	mov	r1, #0
   167b0:	bl	11328 <getgroups@plt>
   167b4:	cmn	r0, #1
   167b8:	str	r0, [sp, #8]
   167bc:	ble	167f8 <__assert_fail@plt+0x5488>
   167c0:	mov	r4, r0
   167c4:	cmn	r6, #1
   167c8:	bne	16878 <__assert_fail@plt+0x5508>
   167cc:	cmp	r4, #0
   167d0:	beq	16878 <__assert_fail@plt+0x5508>
   167d4:	cmp	r4, #536870912	; 0x20000000
   167d8:	bcc	16888 <__assert_fail@plt+0x5518>
   167dc:	bl	11274 <__errno_location@plt>
   167e0:	mov	r1, #12
   167e4:	mvn	r9, #0
   167e8:	str	r1, [r0]
   167ec:	mov	r0, r9
   167f0:	sub	sp, fp, #28
   167f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167f8:	bl	11274 <__errno_location@plt>
   167fc:	ldr	r0, [r0]
   16800:	mvn	r9, #0
   16804:	cmp	r0, #38	; 0x26
   16808:	bne	16940 <__assert_fail@plt+0x55d0>
   1680c:	mov	r0, #0
   16810:	mov	r1, #4
   16814:	bl	163e8 <__assert_fail@plt+0x5078>
   16818:	cmp	r0, #0
   1681c:	beq	16940 <__assert_fail@plt+0x55d0>
   16820:	str	r0, [sl]
   16824:	str	r6, [r0]
   16828:	mvn	r0, #0
   1682c:	subs	r9, r6, r0
   16830:	movwne	r9, #1
   16834:	mov	r0, r9
   16838:	sub	sp, fp, #28
   1683c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16840:	bl	11274 <__errno_location@plt>
   16844:	mov	r1, #12
   16848:	str	r1, [r0]
   1684c:	mov	r0, r5
   16850:	bl	12a1c <__assert_fail@plt+0x16ac>
   16854:	mov	r0, r9
   16858:	sub	sp, fp, #28
   1685c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16860:	ldr	r1, [sp, #4]
   16864:	str	r0, [r1]
   16868:	ldr	r9, [sp, #8]
   1686c:	mov	r0, r9
   16870:	sub	sp, fp, #28
   16874:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16878:	add	r4, r4, #1
   1687c:	str	r4, [sp, #8]
   16880:	cmp	r4, #536870912	; 0x20000000
   16884:	bcs	167dc <__assert_fail@plt+0x546c>
   16888:	lsl	r1, r4, #2
   1688c:	mov	r0, #0
   16890:	bl	163e8 <__assert_fail@plt+0x5078>
   16894:	cmp	r0, #0
   16898:	beq	1693c <__assert_fail@plt+0x55cc>
   1689c:	mvn	r9, #0
   168a0:	mov	r7, r0
   168a4:	subs	r1, r6, r9
   168a8:	movwne	r1, #1
   168ac:	sub	r0, r4, r1
   168b0:	add	r1, r7, r1, lsl #2
   168b4:	bl	11328 <getgroups@plt>
   168b8:	cmn	r0, #1
   168bc:	ble	1695c <__assert_fail@plt+0x55ec>
   168c0:	cmn	r6, #1
   168c4:	addne	r0, r0, #1
   168c8:	strne	r6, [r7]
   168cc:	str	r7, [sl]
   168d0:	cmp	r0, #2
   168d4:	blt	1694c <__assert_fail@plt+0x55dc>
   168d8:	mov	r2, r7
   168dc:	add	r1, r7, r0, lsl #2
   168e0:	ldr	r6, [r2], #4
   168e4:	cmp	r1, r2
   168e8:	bls	1694c <__assert_fail@plt+0x55dc>
   168ec:	mov	r3, r6
   168f0:	mov	r9, r0
   168f4:	ldr	r0, [r2]
   168f8:	cmp	r0, r6
   168fc:	cmpne	r0, r3
   16900:	beq	16928 <__assert_fail@plt+0x55b8>
   16904:	str	r0, [r7, #4]!
   16908:	mov	r3, r0
   1690c:	add	r2, r2, #4
   16910:	cmp	r2, r1
   16914:	bcs	16940 <__assert_fail@plt+0x55d0>
   16918:	ldr	r0, [r2]
   1691c:	cmp	r0, r6
   16920:	cmpne	r0, r3
   16924:	bne	16904 <__assert_fail@plt+0x5594>
   16928:	sub	r9, r9, #1
   1692c:	add	r2, r2, #4
   16930:	cmp	r2, r1
   16934:	bcc	16918 <__assert_fail@plt+0x55a8>
   16938:	b	16940 <__assert_fail@plt+0x55d0>
   1693c:	mvn	r9, #0
   16940:	mov	r0, r9
   16944:	sub	sp, fp, #28
   16948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1694c:	mov	r9, r0
   16950:	mov	r0, r9
   16954:	sub	sp, fp, #28
   16958:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1695c:	mov	r0, r7
   16960:	bl	12a1c <__assert_fail@plt+0x16ac>
   16964:	mov	r0, r9
   16968:	sub	sp, fp, #28
   1696c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16970:	cmp	r2, #0
   16974:	beq	169a4 <__assert_fail@plt+0x5634>
   16978:	mvn	r3, #0
   1697c:	udiv	r3, r3, r2
   16980:	cmp	r3, r1
   16984:	bcs	169a4 <__assert_fail@plt+0x5634>
   16988:	push	{fp, lr}
   1698c:	mov	fp, sp
   16990:	bl	11274 <__errno_location@plt>
   16994:	mov	r1, #12
   16998:	str	r1, [r0]
   1699c:	mov	r0, #0
   169a0:	pop	{fp, pc}
   169a4:	mul	r1, r2, r1
   169a8:	b	163e8 <__assert_fail@plt+0x5078>
   169ac:	push	{r4, sl, fp, lr}
   169b0:	add	fp, sp, #8
   169b4:	sub	sp, sp, #264	; 0x108
   169b8:	add	r1, sp, #7
   169bc:	movw	r2, #257	; 0x101
   169c0:	bl	16a18 <__assert_fail@plt+0x56a8>
   169c4:	mov	r4, #0
   169c8:	cmp	r0, #0
   169cc:	bne	16a0c <__assert_fail@plt+0x569c>
   169d0:	movw	r1, #31206	; 0x79e6
   169d4:	add	r0, sp, #7
   169d8:	mov	r2, #2
   169dc:	movt	r1, #1
   169e0:	bl	11244 <bcmp@plt>
   169e4:	cmp	r0, #0
   169e8:	beq	16a0c <__assert_fail@plt+0x569c>
   169ec:	movw	r1, #31208	; 0x79e8
   169f0:	add	r0, sp, #7
   169f4:	mov	r2, #6
   169f8:	movt	r1, #1
   169fc:	bl	11244 <bcmp@plt>
   16a00:	cmp	r0, #0
   16a04:	mov	r4, r0
   16a08:	movwne	r4, #1
   16a0c:	mov	r0, r4
   16a10:	sub	sp, fp, #8
   16a14:	pop	{r4, sl, fp, pc}
   16a18:	push	{r4, r5, r6, r7, fp, lr}
   16a1c:	add	fp, sp, #16
   16a20:	mov	r4, r1
   16a24:	mov	r1, #0
   16a28:	mov	r6, r2
   16a2c:	bl	112f8 <setlocale@plt>
   16a30:	cmp	r0, #0
   16a34:	beq	16a64 <__assert_fail@plt+0x56f4>
   16a38:	mov	r7, r0
   16a3c:	bl	1125c <strlen@plt>
   16a40:	cmp	r0, r6
   16a44:	bcs	16a80 <__assert_fail@plt+0x5710>
   16a48:	add	r2, r0, #1
   16a4c:	mov	r0, r4
   16a50:	mov	r1, r7
   16a54:	bl	11130 <memcpy@plt>
   16a58:	mov	r5, #0
   16a5c:	mov	r0, r5
   16a60:	pop	{r4, r5, r6, r7, fp, pc}
   16a64:	mov	r5, #22
   16a68:	cmp	r6, #0
   16a6c:	beq	16aa8 <__assert_fail@plt+0x5738>
   16a70:	mov	r0, #0
   16a74:	strb	r0, [r4]
   16a78:	mov	r0, r5
   16a7c:	pop	{r4, r5, r6, r7, fp, pc}
   16a80:	mov	r5, #34	; 0x22
   16a84:	cmp	r6, #0
   16a88:	beq	16aa8 <__assert_fail@plt+0x5738>
   16a8c:	sub	r6, r6, #1
   16a90:	mov	r0, r4
   16a94:	mov	r1, r7
   16a98:	mov	r2, r6
   16a9c:	bl	11130 <memcpy@plt>
   16aa0:	mov	r0, #0
   16aa4:	strb	r0, [r4, r6]
   16aa8:	mov	r0, r5
   16aac:	pop	{r4, r5, r6, r7, fp, pc}
   16ab0:	mov	r1, #0
   16ab4:	b	112f8 <setlocale@plt>
   16ab8:	cmp	r3, #0
   16abc:	cmpeq	r2, #0
   16ac0:	bne	16ad8 <__assert_fail@plt+0x5768>
   16ac4:	cmp	r1, #0
   16ac8:	cmpeq	r0, #0
   16acc:	mvnne	r1, #0
   16ad0:	mvnne	r0, #0
   16ad4:	b	16af4 <__assert_fail@plt+0x5784>
   16ad8:	sub	sp, sp, #8
   16adc:	push	{sp, lr}
   16ae0:	bl	16b04 <__assert_fail@plt+0x5794>
   16ae4:	ldr	lr, [sp, #4]
   16ae8:	add	sp, sp, #8
   16aec:	pop	{r2, r3}
   16af0:	bx	lr
   16af4:	push	{r1, lr}
   16af8:	mov	r0, #8
   16afc:	bl	110c4 <raise@plt>
   16b00:	pop	{r1, pc}
   16b04:	cmp	r1, r3
   16b08:	cmpeq	r0, r2
   16b0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b10:	mov	r4, r0
   16b14:	movcc	r0, #0
   16b18:	mov	r5, r1
   16b1c:	ldr	lr, [sp, #36]	; 0x24
   16b20:	movcc	r1, r0
   16b24:	bcc	16c20 <__assert_fail@plt+0x58b0>
   16b28:	cmp	r3, #0
   16b2c:	clzeq	ip, r2
   16b30:	clzne	ip, r3
   16b34:	addeq	ip, ip, #32
   16b38:	cmp	r5, #0
   16b3c:	clzeq	r1, r4
   16b40:	addeq	r1, r1, #32
   16b44:	clzne	r1, r5
   16b48:	sub	ip, ip, r1
   16b4c:	sub	sl, ip, #32
   16b50:	lsl	r9, r3, ip
   16b54:	rsb	fp, ip, #32
   16b58:	orr	r9, r9, r2, lsl sl
   16b5c:	orr	r9, r9, r2, lsr fp
   16b60:	lsl	r8, r2, ip
   16b64:	cmp	r5, r9
   16b68:	cmpeq	r4, r8
   16b6c:	movcc	r0, #0
   16b70:	movcc	r1, r0
   16b74:	bcc	16b90 <__assert_fail@plt+0x5820>
   16b78:	mov	r0, #1
   16b7c:	subs	r4, r4, r8
   16b80:	lsl	r1, r0, sl
   16b84:	orr	r1, r1, r0, lsr fp
   16b88:	lsl	r0, r0, ip
   16b8c:	sbc	r5, r5, r9
   16b90:	cmp	ip, #0
   16b94:	beq	16c20 <__assert_fail@plt+0x58b0>
   16b98:	lsr	r6, r8, #1
   16b9c:	orr	r6, r6, r9, lsl #31
   16ba0:	lsr	r7, r9, #1
   16ba4:	mov	r2, ip
   16ba8:	b	16bcc <__assert_fail@plt+0x585c>
   16bac:	subs	r3, r4, r6
   16bb0:	sbc	r8, r5, r7
   16bb4:	adds	r3, r3, r3
   16bb8:	adc	r8, r8, r8
   16bbc:	adds	r4, r3, #1
   16bc0:	adc	r5, r8, #0
   16bc4:	subs	r2, r2, #1
   16bc8:	beq	16be8 <__assert_fail@plt+0x5878>
   16bcc:	cmp	r5, r7
   16bd0:	cmpeq	r4, r6
   16bd4:	bcs	16bac <__assert_fail@plt+0x583c>
   16bd8:	adds	r4, r4, r4
   16bdc:	adc	r5, r5, r5
   16be0:	subs	r2, r2, #1
   16be4:	bne	16bcc <__assert_fail@plt+0x585c>
   16be8:	lsr	r3, r4, ip
   16bec:	orr	r3, r3, r5, lsl fp
   16bf0:	lsr	r2, r5, ip
   16bf4:	orr	r3, r3, r5, lsr sl
   16bf8:	adds	r0, r0, r4
   16bfc:	mov	r4, r3
   16c00:	lsl	r3, r2, ip
   16c04:	orr	r3, r3, r4, lsl sl
   16c08:	lsl	ip, r4, ip
   16c0c:	orr	r3, r3, r4, lsr fp
   16c10:	adc	r1, r1, r5
   16c14:	subs	r0, r0, ip
   16c18:	mov	r5, r2
   16c1c:	sbc	r1, r1, r3
   16c20:	cmp	lr, #0
   16c24:	strdne	r4, [lr]
   16c28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16c30:	mov	r7, r0
   16c34:	ldr	r6, [pc, #72]	; 16c84 <__assert_fail@plt+0x5914>
   16c38:	ldr	r5, [pc, #72]	; 16c88 <__assert_fail@plt+0x5918>
   16c3c:	add	r6, pc, r6
   16c40:	add	r5, pc, r5
   16c44:	sub	r6, r6, r5
   16c48:	mov	r8, r1
   16c4c:	mov	r9, r2
   16c50:	bl	11080 <calloc@plt-0x20>
   16c54:	asrs	r6, r6, #2
   16c58:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c5c:	mov	r4, #0
   16c60:	add	r4, r4, #1
   16c64:	ldr	r3, [r5], #4
   16c68:	mov	r2, r9
   16c6c:	mov	r1, r8
   16c70:	mov	r0, r7
   16c74:	blx	r3
   16c78:	cmp	r6, r4
   16c7c:	bne	16c60 <__assert_fail@plt+0x58f0>
   16c80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c84:	andeq	r1, r1, r0, asr #5
   16c88:			; <UNDEFINED> instruction: 0x000112b8
   16c8c:	bx	lr
   16c90:	ldr	r3, [pc, #12]	; 16ca4 <__assert_fail@plt+0x5934>
   16c94:	mov	r1, #0
   16c98:	add	r3, pc, r3
   16c9c:	ldr	r2, [r3]
   16ca0:	b	11280 <__cxa_atexit@plt>
   16ca4:	andeq	r1, r1, ip, ror #8

Disassembly of section .fini:

00016ca8 <.fini>:
   16ca8:	push	{r3, lr}
   16cac:	pop	{r3, pc}
