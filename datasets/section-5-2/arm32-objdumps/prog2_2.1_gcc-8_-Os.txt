
../repos/prog2/2.1:     file format elf32-littlearm


Disassembly of section .init:

0001063c <.init>:
   1063c:	push	{r3, lr}
   10640:	bl	10858 <_start@@Base+0x3c>
   10644:	pop	{r3, pc}

Disassembly of section .plt:

00010648 <printf@plt-0x14>:
   10648:	push	{lr}		; (str lr, [sp, #-4]!)
   1064c:	ldr	lr, [pc, #4]	; 10658 <printf@plt-0x4>
   10650:	add	lr, pc, lr
   10654:	ldr	pc, [lr, #8]!
   10658:	andeq	r0, r1, r8, lsr #19

0001065c <printf@plt>:
   1065c:	add	ip, pc, #0, 12
   10660:	add	ip, ip, #16, 20	; 0x10000
   10664:	ldr	pc, [ip, #2472]!	; 0x9a8

00010668 <free@plt>:
   10668:	add	ip, pc, #0, 12
   1066c:	add	ip, ip, #16, 20	; 0x10000
   10670:	ldr	pc, [ip, #2464]!	; 0x9a0

00010674 <realloc@plt>:
   10674:	add	ip, pc, #0, 12
   10678:	add	ip, ip, #16, 20	; 0x10000
   1067c:	ldr	pc, [ip, #2456]!	; 0x998

00010680 <puts@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2448]!	; 0x990

0001068c <malloc@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2440]!	; 0x988

00010698 <__libc_start_main@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #16, 20	; 0x10000
   106a0:	ldr	pc, [ip, #2432]!	; 0x980

000106a4 <__gmon_start__@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2424]!	; 0x978

000106b0 <putchar@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2416]!	; 0x970

000106bc <__isoc99_scanf@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #16, 20	; 0x10000
   106c4:	ldr	pc, [ip, #2408]!	; 0x968

000106c8 <abort@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #16, 20	; 0x10000
   106d0:	ldr	pc, [ip, #2400]!	; 0x960

Disassembly of section .text:

000106d4 <main@@Base>:
   106d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   106d8:	sub	sp, sp, #20
   106dc:	mov	r4, #0
   106e0:	mov	r5, r4
   106e4:	mov	r6, r4
   106e8:	ldr	r0, [pc, #276]	; 10804 <main@@Base+0x130>
   106ec:	bl	1065c <printf@plt>
   106f0:	add	r1, sp, #12
   106f4:	ldr	r0, [pc, #268]	; 10808 <main@@Base+0x134>
   106f8:	bl	106bc <__isoc99_scanf@plt>
   106fc:	ldr	r0, [sp, #12]
   10700:	lsl	r0, r0, #2
   10704:	bl	1068c <malloc@plt>
   10708:	mov	r7, r0
   1070c:	mov	fp, r0
   10710:	ldr	r0, [sp, #12]
   10714:	lsl	r0, r0, #2
   10718:	bl	1068c <malloc@plt>
   1071c:	mov	sl, r0
   10720:	ldr	r0, [sp, #12]
   10724:	lsl	r0, r0, #2
   10728:	bl	1068c <malloc@plt>
   1072c:	mov	r8, r0
   10730:	ldr	r1, [sp, #12]
   10734:	lsl	r9, r5, #2
   10738:	lsl	r2, r6, #2
   1073c:	cmp	r1, r4
   10740:	bgt	107c4 <main@@Base+0xf0>
   10744:	mov	r1, r2
   10748:	mov	r0, sl
   1074c:	bl	10674 <realloc@plt>
   10750:	mov	sl, r0
   10754:	mov	r1, r9
   10758:	mov	r0, r8
   1075c:	bl	10674 <realloc@plt>
   10760:	mov	r4, r0
   10764:	ldr	r0, [pc, #160]	; 1080c <main@@Base+0x138>
   10768:	bl	1065c <printf@plt>
   1076c:	mov	r0, r7
   10770:	ldr	r1, [sp, #12]
   10774:	bl	1090c <PrintArray@@Base>
   10778:	ldr	r0, [pc, #144]	; 10810 <main@@Base+0x13c>
   1077c:	bl	1065c <printf@plt>
   10780:	mov	r1, r6
   10784:	mov	r0, sl
   10788:	bl	1090c <PrintArray@@Base>
   1078c:	ldr	r0, [pc, #128]	; 10814 <main@@Base+0x140>
   10790:	bl	1065c <printf@plt>
   10794:	mov	r1, r5
   10798:	mov	r0, r4
   1079c:	bl	1090c <PrintArray@@Base>
   107a0:	mov	r0, r7
   107a4:	bl	10668 <free@plt>
   107a8:	mov	r0, sl
   107ac:	bl	10668 <free@plt>
   107b0:	mov	r0, r4
   107b4:	bl	10668 <free@plt>
   107b8:	mov	r0, #0
   107bc:	add	sp, sp, #20
   107c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   107c4:	add	r4, r4, #1
   107c8:	ldr	r0, [pc, #72]	; 10818 <main@@Base+0x144>
   107cc:	mov	r1, r4
   107d0:	str	r2, [sp, #4]
   107d4:	bl	1065c <printf@plt>
   107d8:	mov	r1, fp
   107dc:	ldr	r0, [pc, #36]	; 10808 <main@@Base+0x134>
   107e0:	bl	106bc <__isoc99_scanf@plt>
   107e4:	ldr	r1, [fp], #4
   107e8:	ldr	r2, [sp, #4]
   107ec:	tst	r1, #1
   107f0:	addne	r5, r5, #1
   107f4:	addeq	r6, r6, #1
   107f8:	strne	r1, [r8, r9]
   107fc:	streq	r1, [sl, r2]
   10800:	b	10730 <main@@Base+0x5c>
   10804:	andeq	r0, r1, pc, asr #19
   10808:	andeq	r0, r1, r9, asr #19
   1080c:	andeq	r0, r1, r1, lsl #20
   10810:	andeq	r0, r1, r2, lsl sl
   10814:	andeq	r0, r1, r2, lsr #20
   10818:	andeq	r0, r1, r5, ror #19

0001081c <_start@@Base>:
   1081c:	mov	fp, #0
   10820:	mov	lr, #0
   10824:	pop	{r1}		; (ldr r1, [sp], #4)
   10828:	mov	r2, sp
   1082c:	push	{r2}		; (str r2, [sp, #-4]!)
   10830:	push	{r0}		; (str r0, [sp, #-4]!)
   10834:	ldr	ip, [pc, #16]	; 1084c <_start@@Base+0x30>
   10838:	push	{ip}		; (str ip, [sp, #-4]!)
   1083c:	ldr	r0, [pc, #12]	; 10850 <_start@@Base+0x34>
   10840:	ldr	r3, [pc, #12]	; 10854 <_start@@Base+0x38>
   10844:	bl	10698 <__libc_start_main@plt>
   10848:	bl	106c8 <abort@plt>
   1084c:			; <UNDEFINED> instruction: 0x000109b8
   10850:	ldrdeq	r0, [r1], -r4
   10854:	andeq	r0, r1, r8, asr r9
   10858:	ldr	r3, [pc, #20]	; 10874 <_start@@Base+0x58>
   1085c:	ldr	r2, [pc, #20]	; 10878 <_start@@Base+0x5c>
   10860:	add	r3, pc, r3
   10864:	ldr	r2, [r3, r2]
   10868:	cmp	r2, #0
   1086c:	bxeq	lr
   10870:	b	106a4 <__gmon_start__@plt>
   10874:	muleq	r1, r8, r7
   10878:	andeq	r0, r0, r4, lsr r0
   1087c:	ldr	r0, [pc, #24]	; 1089c <_start@@Base+0x80>
   10880:	ldr	r3, [pc, #24]	; 108a0 <_start@@Base+0x84>
   10884:	cmp	r3, r0
   10888:	bxeq	lr
   1088c:	ldr	r3, [pc, #16]	; 108a4 <_start@@Base+0x88>
   10890:	cmp	r3, #0
   10894:	bxeq	lr
   10898:	bx	r3
   1089c:	andeq	r1, r2, r0, asr #32
   108a0:	andeq	r1, r2, r0, asr #32
   108a4:	andeq	r0, r0, r0
   108a8:	ldr	r0, [pc, #36]	; 108d4 <_start@@Base+0xb8>
   108ac:	ldr	r1, [pc, #36]	; 108d8 <_start@@Base+0xbc>
   108b0:	sub	r1, r1, r0
   108b4:	asr	r1, r1, #2
   108b8:	add	r1, r1, r1, lsr #31
   108bc:	asrs	r1, r1, #1
   108c0:	bxeq	lr
   108c4:	ldr	r3, [pc, #16]	; 108dc <_start@@Base+0xc0>
   108c8:	cmp	r3, #0
   108cc:	bxeq	lr
   108d0:	bx	r3
   108d4:	andeq	r1, r2, r0, asr #32
   108d8:	andeq	r1, r2, r0, asr #32
   108dc:	andeq	r0, r0, r0
   108e0:	push	{r4, lr}
   108e4:	ldr	r4, [pc, #24]	; 10904 <_start@@Base+0xe8>
   108e8:	ldrb	r3, [r4]
   108ec:	cmp	r3, #0
   108f0:	popne	{r4, pc}
   108f4:	bl	1087c <_start@@Base+0x60>
   108f8:	mov	r3, #1
   108fc:	strb	r3, [r4]
   10900:	pop	{r4, pc}
   10904:	andeq	r1, r2, r0, asr #32
   10908:	b	108a8 <_start@@Base+0x8c>

0001090c <PrintArray@@Base>:
   1090c:	push	{r4, r5, r6, r7, r8, lr}
   10910:	mov	r6, r0
   10914:	mov	r4, #0
   10918:	mov	r0, #91	; 0x5b
   1091c:	mov	r5, r1
   10920:	ldr	r7, [pc, #40]	; 10950 <PrintArray@@Base+0x44>
   10924:	bl	106b0 <putchar@plt>
   10928:	cmp	r4, r5
   1092c:	blt	1093c <PrintArray@@Base+0x30>
   10930:	ldr	r0, [pc, #28]	; 10954 <PrintArray@@Base+0x48>
   10934:	pop	{r4, r5, r6, r7, r8, lr}
   10938:	b	10680 <puts@plt>
   1093c:	mov	r0, r7
   10940:	ldr	r1, [r6, r4, lsl #2]
   10944:	add	r4, r4, #1
   10948:	bl	1065c <printf@plt>
   1094c:	b	10928 <PrintArray@@Base+0x1c>
   10950:	andeq	r0, r1, r8, asr #19
   10954:	andeq	r0, r1, ip, asr #19

00010958 <__libc_csu_init@@Base>:
   10958:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1095c:	mov	r7, r0
   10960:	ldr	r6, [pc, #72]	; 109b0 <__libc_csu_init@@Base+0x58>
   10964:	ldr	r5, [pc, #72]	; 109b4 <__libc_csu_init@@Base+0x5c>
   10968:	add	r6, pc, r6
   1096c:	add	r5, pc, r5
   10970:	sub	r6, r6, r5
   10974:	mov	r8, r1
   10978:	mov	r9, r2
   1097c:	bl	1063c <printf@plt-0x20>
   10980:	asrs	r6, r6, #2
   10984:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10988:	mov	r4, #0
   1098c:	add	r4, r4, #1
   10990:	ldr	r3, [r5], #4
   10994:	mov	r2, r9
   10998:	mov	r1, r8
   1099c:	mov	r0, r7
   109a0:	blx	r3
   109a4:	cmp	r6, r4
   109a8:	bne	1098c <__libc_csu_init@@Base+0x34>
   109ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   109b0:	andeq	r0, r1, r4, lsr #11
   109b4:	muleq	r1, ip, r5

000109b8 <__libc_csu_fini@@Base>:
   109b8:	bx	lr

Disassembly of section .fini:

000109bc <.fini>:
   109bc:	push	{r3, lr}
   109c0:	pop	{r3, pc}
