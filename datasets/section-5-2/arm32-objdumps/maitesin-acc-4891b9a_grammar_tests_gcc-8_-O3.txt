
../repos/maitesin-acc-4891b9a/bin/grammar_tests:     file format elf32-littlearm


Disassembly of section .init:

00011800 <.init>:
   11800:	push	{r3, lr}
   11804:	bl	12238 <_start@@Base+0x3c>
   11808:	pop	{r3, pc}

Disassembly of section .plt:

0001180c <fdopen@plt-0x14>:
   1180c:	push	{lr}		; (str lr, [sp, #-4]!)
   11810:	ldr	lr, [pc, #4]	; 1181c <fdopen@plt-0x4>
   11814:	add	lr, pc, lr
   11818:	ldr	pc, [lr, #8]!
   1181c:	andeq	r8, r1, r4, ror #15

00011820 <fdopen@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #24, 20	; 0x18000
   11828:	ldr	pc, [ip, #2020]!	; 0x7e4

0001182c <raise@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #24, 20	; 0x18000
   11834:	ldr	pc, [ip, #2012]!	; 0x7dc

00011838 <setbuf@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #24, 20	; 0x18000
   11840:	ldr	pc, [ip, #2004]!	; 0x7d4

00011844 <printf@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #24, 20	; 0x18000
   1184c:	ldr	pc, [ip, #1996]!	; 0x7cc

00011850 <fflush@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #24, 20	; 0x18000
   11858:	ldr	pc, [ip, #1988]!	; 0x7c4

0001185c <free@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #24, 20	; 0x18000
   11864:	ldr	pc, [ip, #1980]!	; 0x7bc

00011868 <memcpy@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #24, 20	; 0x18000
   11870:	ldr	pc, [ip, #1972]!	; 0x7b4

00011874 <ftell@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #24, 20	; 0x18000
   1187c:	ldr	pc, [ip, #1964]!	; 0x7ac

00011880 <fwrite@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #24, 20	; 0x18000
   11888:	ldr	pc, [ip, #1956]!	; 0x7a4

0001188c <strcpy@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #24, 20	; 0x18000
   11894:	ldr	pc, [ip, #1948]!	; 0x79c

00011898 <fread@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #24, 20	; 0x18000
   118a0:	ldr	pc, [ip, #1940]!	; 0x794

000118a4 <open64@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #24, 20	; 0x18000
   118ac:	ldr	pc, [ip, #1932]!	; 0x78c

000118b0 <getenv@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #24, 20	; 0x18000
   118b8:	ldr	pc, [ip, #1924]!	; 0x784

000118bc <puts@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #24, 20	; 0x18000
   118c4:	ldr	pc, [ip, #1916]!	; 0x77c

000118c8 <malloc@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #24, 20	; 0x18000
   118d0:	ldr	pc, [ip, #1908]!	; 0x774

000118d4 <__libc_start_main@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #24, 20	; 0x18000
   118dc:	ldr	pc, [ip, #1900]!	; 0x76c

000118e0 <__gmon_start__@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #24, 20	; 0x18000
   118e8:	ldr	pc, [ip, #1892]!	; 0x764

000118ec <getpid@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #24, 20	; 0x18000
   118f4:	ldr	pc, [ip, #1884]!	; 0x75c

000118f8 <exit@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #24, 20	; 0x18000
   11900:	ldr	pc, [ip, #1876]!	; 0x754

00011904 <strlen@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #24, 20	; 0x18000
   1190c:	ldr	pc, [ip, #1868]!	; 0x74c

00011910 <fprintf@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #24, 20	; 0x18000
   11918:	ldr	pc, [ip, #1860]!	; 0x744

0001191c <__errno_location@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #24, 20	; 0x18000
   11924:	ldr	pc, [ip, #1852]!	; 0x73c

00011928 <mkdir@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #24, 20	; 0x18000
   11930:	ldr	pc, [ip, #1844]!	; 0x734

00011934 <memset@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #24, 20	; 0x18000
   1193c:	ldr	pc, [ip, #1836]!	; 0x72c

00011940 <access@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #24, 20	; 0x18000
   11948:	ldr	pc, [ip, #1828]!	; 0x724

0001194c <fclose@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #24, 20	; 0x18000
   11954:	ldr	pc, [ip, #1820]!	; 0x71c

00011958 <strnlen@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #24, 20	; 0x18000
   11960:	ldr	pc, [ip, #1812]!	; 0x714

00011964 <fcntl64@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #24, 20	; 0x18000
   1196c:	ldr	pc, [ip, #1804]!	; 0x70c

00011970 <vfprintf@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #24, 20	; 0x18000
   11978:	ldr	pc, [ip, #1796]!	; 0x704

0001197c <atoi@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #24, 20	; 0x18000
   11984:	ldr	pc, [ip, #1788]!	; 0x6fc

00011988 <fopen64@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #24, 20	; 0x18000
   11990:	ldr	pc, [ip, #1780]!	; 0x6f4

00011994 <fseek@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #24, 20	; 0x18000
   1199c:	ldr	pc, [ip, #1772]!	; 0x6ec

000119a0 <strncmp@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #24, 20	; 0x18000
   119a8:	ldr	pc, [ip, #1764]!	; 0x6e4

000119ac <abort@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #24, 20	; 0x18000
   119b4:	ldr	pc, [ip, #1756]!	; 0x6dc

000119b8 <close@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #24, 20	; 0x18000
   119c0:	ldr	pc, [ip, #1748]!	; 0x6d4

000119c4 <__assert_fail@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #24, 20	; 0x18000
   119cc:	ldr	pc, [ip, #1740]!	; 0x6cc

Disassembly of section .text:

000119d0 <main@@Base-0x10>:
   119d0:	b	18ba4 <__gcov_sort_n_vals@@Base+0x430>
   119d4:	b	18ba4 <__gcov_sort_n_vals@@Base+0x430>
   119d8:	b	18ba4 <__gcov_sort_n_vals@@Base+0x430>
   119dc:	b	18ba4 <__gcov_sort_n_vals@@Base+0x430>

000119e0 <main@@Base>:
   119e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   119e4:	movw	r5, #43400	; 0xa988
   119e8:	movt	r5, #2
   119ec:	add	r4, r5, #1504	; 0x5e0
   119f0:	ldr	r3, [r4, #-8]
   119f4:	mov	r1, #0
   119f8:	ldr	r2, [r4, #-4]
   119fc:	strd	r6, [sp, #8]
   11a00:	movw	r7, #37896	; 0x9408
   11a04:	movt	r7, #1
   11a08:	strd	r8, [sp, #16]
   11a0c:	movw	r9, #43388	; 0xa97c
   11a10:	movt	r9, #2
   11a14:	adds	r3, r3, #1
   11a18:	strd	sl, [sp, #24]
   11a1c:	movw	sl, #37812	; 0x93b4
   11a20:	movt	sl, #1
   11a24:	str	lr, [sp, #32]
   11a28:	sub	sp, sp, #12
   11a2c:	adc	r2, r2, r1
   11a30:	ldr	r0, [r9]
   11a34:	movw	r8, #37884	; 0x93fc
   11a38:	movt	r8, #1
   11a3c:	str	r3, [r4, #-8]
   11a40:	movw	r6, #37916	; 0x941c
   11a44:	movt	r6, #1
   11a48:	str	r2, [r4, #-4]
   11a4c:	bl	11838 <setbuf@plt>
   11a50:	ldm	r4, {r3, ip}
   11a54:	mov	r1, #1
   11a58:	mov	r0, sl
   11a5c:	mov	r2, #14
   11a60:	str	sl, [sp, #4]
   11a64:	adds	r3, r3, r1
   11a68:	adc	ip, ip, #0
   11a6c:	stm	r4, {r3, ip}
   11a70:	ldr	r3, [r9]
   11a74:	bl	11880 <fwrite@plt>
   11a78:	ldr	r3, [r4, #8]
   11a7c:	mov	r1, #1
   11a80:	mov	r2, #14
   11a84:	movw	r0, #37828	; 0x93c4
   11a88:	movt	r0, #1
   11a8c:	ldr	ip, [r4, #12]
   11a90:	adds	r3, r3, r1
   11a94:	adc	ip, ip, #0
   11a98:	str	r3, [r4, #8]
   11a9c:	ldr	r3, [r9]
   11aa0:	str	ip, [r4, #12]
   11aa4:	bl	11880 <fwrite@plt>
   11aa8:	ldr	ip, [r4, #16]
   11aac:	mov	r1, #1
   11ab0:	mov	r2, #15
   11ab4:	movw	r0, #37844	; 0x93d4
   11ab8:	movt	r0, #1
   11abc:	ldr	lr, [r4, #20]
   11ac0:	ldr	r3, [r9]
   11ac4:	adds	ip, ip, r1
   11ac8:	adc	lr, lr, #0
   11acc:	str	ip, [r4, #16]
   11ad0:	str	lr, [r4, #20]
   11ad4:	bl	11880 <fwrite@plt>
   11ad8:	ldr	r2, [r4, #24]
   11adc:	mov	r0, #0
   11ae0:	ldr	r1, [r4, #28]
   11ae4:	adds	r2, r2, #1
   11ae8:	adc	r1, r1, r0
   11aec:	str	r2, [r4, #24]
   11af0:	str	r1, [r4, #28]
   11af4:	bl	11850 <fflush@plt>
   11af8:	ldr	r2, [r4, #32]
   11afc:	mov	r1, r8
   11b00:	mov	r0, r7
   11b04:	ldr	ip, [r4, #36]	; 0x24
   11b08:	adds	r2, r2, #1
   11b0c:	adc	ip, ip, #0
   11b10:	str	r2, [r4, #32]
   11b14:	movw	r2, #37860	; 0x93e4
   11b18:	movt	r2, #1
   11b1c:	str	ip, [r4, #36]	; 0x24
   11b20:	bl	11844 <printf@plt>
   11b24:	ldr	r2, [r4, #40]	; 0x28
   11b28:	ldr	r1, [r4, #44]	; 0x2c
   11b2c:	adds	r2, r2, #1
   11b30:	adc	r1, r1, #0
   11b34:	str	r2, [r4, #40]	; 0x28
   11b38:	str	r1, [r4, #44]	; 0x2c
   11b3c:	bl	12660 <setup@@Base>
   11b40:	ldr	r2, [r4, #48]	; 0x30
   11b44:	ldr	r1, [r4, #52]	; 0x34
   11b48:	adds	r2, r2, #1
   11b4c:	adc	r1, r1, #0
   11b50:	str	r2, [r4, #48]	; 0x30
   11b54:	str	r1, [r4, #52]	; 0x34
   11b58:	bl	126d8 <no_int_as_first_stuff@@Base>
   11b5c:	ldr	r2, [r4, #56]	; 0x38
   11b60:	mov	r0, r6
   11b64:	ldr	r1, [r4, #60]	; 0x3c
   11b68:	adds	r2, r2, #1
   11b6c:	adc	r1, r1, #0
   11b70:	str	r2, [r4, #56]	; 0x38
   11b74:	str	r1, [r4, #60]	; 0x3c
   11b78:	bl	118bc <puts@plt>
   11b7c:	ldr	r2, [r4, #64]	; 0x40
   11b80:	mov	r1, r8
   11b84:	mov	r0, r7
   11b88:	ldr	ip, [r4, #68]	; 0x44
   11b8c:	adds	r2, r2, #1
   11b90:	adc	ip, ip, #0
   11b94:	str	r2, [r4, #64]	; 0x40
   11b98:	movw	r2, #37928	; 0x9428
   11b9c:	movt	r2, #1
   11ba0:	str	ip, [r4, #68]	; 0x44
   11ba4:	bl	11844 <printf@plt>
   11ba8:	ldr	r2, [r4, #72]	; 0x48
   11bac:	ldr	r1, [r4, #76]	; 0x4c
   11bb0:	adds	r2, r2, #1
   11bb4:	adc	r1, r1, #0
   11bb8:	str	r2, [r4, #72]	; 0x48
   11bbc:	str	r1, [r4, #76]	; 0x4c
   11bc0:	bl	12660 <setup@@Base>
   11bc4:	ldr	r2, [r4, #80]	; 0x50
   11bc8:	ldr	r1, [r4, #84]	; 0x54
   11bcc:	adds	r2, r2, #1
   11bd0:	adc	r1, r1, #0
   11bd4:	str	r2, [r4, #80]	; 0x50
   11bd8:	str	r1, [r4, #84]	; 0x54
   11bdc:	bl	12818 <int_but_not_followed_by_function@@Base>
   11be0:	ldr	r2, [r4, #88]	; 0x58
   11be4:	mov	r0, r6
   11be8:	ldr	r1, [r4, #92]	; 0x5c
   11bec:	adds	r2, r2, #1
   11bf0:	adc	r1, r1, #0
   11bf4:	str	r2, [r4, #88]	; 0x58
   11bf8:	str	r1, [r4, #92]	; 0x5c
   11bfc:	bl	118bc <puts@plt>
   11c00:	ldr	r2, [r4, #96]	; 0x60
   11c04:	mov	r1, r8
   11c08:	mov	r0, r7
   11c0c:	ldr	ip, [r4, #100]	; 0x64
   11c10:	adds	r2, r2, #1
   11c14:	adc	ip, ip, #0
   11c18:	str	r2, [r4, #96]	; 0x60
   11c1c:	movw	r2, #37964	; 0x944c
   11c20:	movt	r2, #1
   11c24:	str	ip, [r4, #100]	; 0x64
   11c28:	bl	11844 <printf@plt>
   11c2c:	ldr	r2, [r4, #104]	; 0x68
   11c30:	ldr	r1, [r4, #108]	; 0x6c
   11c34:	adds	r2, r2, #1
   11c38:	adc	r1, r1, #0
   11c3c:	str	r2, [r4, #104]	; 0x68
   11c40:	str	r1, [r4, #108]	; 0x6c
   11c44:	bl	12660 <setup@@Base>
   11c48:	ldr	r2, [r4, #112]	; 0x70
   11c4c:	ldr	r1, [r4, #116]	; 0x74
   11c50:	adds	r2, r2, #1
   11c54:	adc	r1, r1, #0
   11c58:	str	r2, [r4, #112]	; 0x70
   11c5c:	str	r1, [r4, #116]	; 0x74
   11c60:	bl	131b0 <boolean_unary_operator_is_read_properly@@Base>
   11c64:	ldr	r2, [r4, #120]	; 0x78
   11c68:	mov	r0, r6
   11c6c:	ldr	r1, [r4, #124]	; 0x7c
   11c70:	adds	r2, r2, #1
   11c74:	adc	r1, r1, #0
   11c78:	str	r2, [r4, #120]	; 0x78
   11c7c:	str	r1, [r4, #124]	; 0x7c
   11c80:	bl	118bc <puts@plt>
   11c84:	ldr	r2, [r4, #128]	; 0x80
   11c88:	mov	r1, r8
   11c8c:	mov	r0, r7
   11c90:	ldr	ip, [r4, #132]	; 0x84
   11c94:	adds	r2, r2, #1
   11c98:	adc	ip, ip, #0
   11c9c:	str	r2, [r4, #128]	; 0x80
   11ca0:	movw	r2, #38004	; 0x9474
   11ca4:	movt	r2, #1
   11ca8:	str	ip, [r4, #132]	; 0x84
   11cac:	bl	11844 <printf@plt>
   11cb0:	ldr	r2, [r4, #136]	; 0x88
   11cb4:	ldr	r1, [r4, #140]	; 0x8c
   11cb8:	adds	r2, r2, #1
   11cbc:	adc	r1, r1, #0
   11cc0:	str	r2, [r4, #136]	; 0x88
   11cc4:	str	r1, [r4, #140]	; 0x8c
   11cc8:	bl	12660 <setup@@Base>
   11ccc:	ldr	r2, [r4, #144]	; 0x90
   11cd0:	ldr	r1, [r4, #148]	; 0x94
   11cd4:	adds	r2, r2, #1
   11cd8:	adc	r1, r1, #0
   11cdc:	str	r2, [r4, #144]	; 0x90
   11ce0:	str	r1, [r4, #148]	; 0x94
   11ce4:	bl	12f1c <boolean_binary_operator_is_read_properly@@Base>
   11ce8:	ldr	r2, [r4, #152]	; 0x98
   11cec:	mov	r0, r6
   11cf0:	ldr	r1, [r4, #156]	; 0x9c
   11cf4:	adds	r2, r2, #1
   11cf8:	adc	r1, r1, #0
   11cfc:	str	r2, [r4, #152]	; 0x98
   11d00:	str	r1, [r4, #156]	; 0x9c
   11d04:	bl	118bc <puts@plt>
   11d08:	ldr	r2, [r4, #160]	; 0xa0
   11d0c:	mov	r1, r8
   11d10:	mov	r0, r7
   11d14:	ldr	ip, [r4, #164]	; 0xa4
   11d18:	adds	r2, r2, #1
   11d1c:	adc	ip, ip, #0
   11d20:	str	r2, [r4, #160]	; 0xa0
   11d24:	movw	r2, #38048	; 0x94a0
   11d28:	movt	r2, #1
   11d2c:	str	ip, [r4, #164]	; 0xa4
   11d30:	bl	11844 <printf@plt>
   11d34:	ldr	r2, [r4, #168]	; 0xa8
   11d38:	ldr	r1, [r4, #172]	; 0xac
   11d3c:	adds	r2, r2, #1
   11d40:	adc	r1, r1, #0
   11d44:	str	r2, [r4, #168]	; 0xa8
   11d48:	str	r1, [r4, #172]	; 0xac
   11d4c:	bl	12660 <setup@@Base>
   11d50:	ldr	r2, [r4, #176]	; 0xb0
   11d54:	ldr	r1, [r4, #180]	; 0xb4
   11d58:	adds	r2, r2, #1
   11d5c:	adc	r1, r1, #0
   11d60:	str	r2, [r4, #176]	; 0xb0
   11d64:	str	r1, [r4, #180]	; 0xb4
   11d68:	bl	12990 <boolean_expression_is_read_properly@@Base>
   11d6c:	ldr	r2, [r4, #184]	; 0xb8
   11d70:	mov	r0, r6
   11d74:	ldr	r1, [r4, #188]	; 0xbc
   11d78:	adds	r2, r2, #1
   11d7c:	adc	r1, r1, #0
   11d80:	str	r2, [r4, #184]	; 0xb8
   11d84:	str	r1, [r4, #188]	; 0xbc
   11d88:	bl	118bc <puts@plt>
   11d8c:	ldr	r2, [r4, #192]	; 0xc0
   11d90:	mov	r1, r8
   11d94:	mov	r0, r7
   11d98:	ldr	ip, [r4, #196]	; 0xc4
   11d9c:	adds	r2, r2, #1
   11da0:	adc	ip, ip, #0
   11da4:	str	r2, [r4, #192]	; 0xc0
   11da8:	movw	r2, #38084	; 0x94c4
   11dac:	movt	r2, #1
   11db0:	str	ip, [r4, #196]	; 0xc4
   11db4:	bl	11844 <printf@plt>
   11db8:	ldr	r2, [r4, #200]	; 0xc8
   11dbc:	ldr	r1, [r4, #204]	; 0xcc
   11dc0:	adds	r2, r2, #1
   11dc4:	adc	r1, r1, #0
   11dc8:	str	r2, [r4, #200]	; 0xc8
   11dcc:	str	r1, [r4, #204]	; 0xcc
   11dd0:	bl	12660 <setup@@Base>
   11dd4:	ldr	r2, [r4, #208]	; 0xd0
   11dd8:	ldr	r1, [r4, #212]	; 0xd4
   11ddc:	adds	r2, r2, #1
   11de0:	adc	r1, r1, #0
   11de4:	str	r2, [r4, #208]	; 0xd0
   11de8:	str	r1, [r4, #212]	; 0xd4
   11dec:	bl	12be8 <boolean_expression_complex@@Base>
   11df0:	ldr	r2, [r4, #216]	; 0xd8
   11df4:	mov	r0, r6
   11df8:	ldr	r1, [r4, #220]	; 0xdc
   11dfc:	adds	r2, r2, #1
   11e00:	adc	r1, r1, #0
   11e04:	str	r2, [r4, #216]	; 0xd8
   11e08:	str	r1, [r4, #220]	; 0xdc
   11e0c:	bl	118bc <puts@plt>
   11e10:	ldr	r2, [r4, #224]	; 0xe0
   11e14:	mov	r1, r8
   11e18:	mov	r0, r7
   11e1c:	ldr	ip, [r4, #228]	; 0xe4
   11e20:	adds	r2, r2, #1
   11e24:	adc	ip, ip, #0
   11e28:	str	r2, [r4, #224]	; 0xe0
   11e2c:	movw	r2, #38112	; 0x94e0
   11e30:	movt	r2, #1
   11e34:	str	ip, [r4, #228]	; 0xe4
   11e38:	bl	11844 <printf@plt>
   11e3c:	ldr	r2, [r4, #232]	; 0xe8
   11e40:	ldr	r1, [r4, #236]	; 0xec
   11e44:	adds	r2, r2, #1
   11e48:	adc	r1, r1, #0
   11e4c:	str	r2, [r4, #232]	; 0xe8
   11e50:	str	r1, [r4, #236]	; 0xec
   11e54:	bl	12660 <setup@@Base>
   11e58:	ldr	r2, [r4, #240]	; 0xf0
   11e5c:	ldr	r1, [r4, #244]	; 0xf4
   11e60:	adds	r2, r2, #1
   11e64:	adc	r1, r1, #0
   11e68:	str	r2, [r4, #240]	; 0xf0
   11e6c:	str	r1, [r4, #244]	; 0xf4
   11e70:	bl	1340c <if_statement_only@@Base>
   11e74:	ldr	r2, [r4, #248]	; 0xf8
   11e78:	mov	r0, r6
   11e7c:	ldr	r1, [r4, #252]	; 0xfc
   11e80:	adds	r2, r2, #1
   11e84:	adc	r1, r1, #0
   11e88:	str	r2, [r4, #248]	; 0xf8
   11e8c:	str	r1, [r4, #252]	; 0xfc
   11e90:	bl	118bc <puts@plt>
   11e94:	ldr	r2, [r5, #1760]	; 0x6e0
   11e98:	mov	r1, r8
   11e9c:	mov	r0, r7
   11ea0:	ldr	lr, [r5, #1764]	; 0x6e4
   11ea4:	adds	r2, r2, #1
   11ea8:	adc	lr, lr, #0
   11eac:	str	r2, [r5, #1760]	; 0x6e0
   11eb0:	movw	r2, #38132	; 0x94f4
   11eb4:	movt	r2, #1
   11eb8:	str	lr, [r5, #1764]	; 0x6e4
   11ebc:	bl	11844 <printf@plt>
   11ec0:	ldr	r2, [r4, #264]	; 0x108
   11ec4:	add	r3, r4, #272	; 0x110
   11ec8:	ldr	r1, [r4, #268]	; 0x10c
   11ecc:	adds	r2, r2, #1
   11ed0:	adc	r1, r1, #0
   11ed4:	str	r2, [r3, #-8]
   11ed8:	str	r1, [r3, #-4]
   11edc:	bl	12660 <setup@@Base>
   11ee0:	ldr	r2, [r5, #1776]	; 0x6f0
   11ee4:	ldr	r1, [r5, #1780]	; 0x6f4
   11ee8:	adds	r2, r2, #1
   11eec:	adc	r1, r1, #0
   11ef0:	str	r2, [r5, #1776]	; 0x6f0
   11ef4:	str	r1, [r5, #1780]	; 0x6f4
   11ef8:	bl	13708 <if_else_statements@@Base>
   11efc:	ldr	r3, [r5, #1784]	; 0x6f8
   11f00:	mov	r0, r6
   11f04:	ldr	r2, [r5, #1788]	; 0x6fc
   11f08:	adds	r3, r3, #1
   11f0c:	adc	r2, r2, #0
   11f10:	str	r3, [r5, #1784]	; 0x6f8
   11f14:	str	r2, [r5, #1788]	; 0x6fc
   11f18:	bl	118bc <puts@plt>
   11f1c:	ldr	r3, [r5, #1792]	; 0x700
   11f20:	mov	r1, r8
   11f24:	mov	r0, r7
   11f28:	ldr	r2, [r5, #1796]	; 0x704
   11f2c:	adds	r3, r3, #1
   11f30:	adc	r2, r2, #0
   11f34:	str	r3, [r5, #1792]	; 0x700
   11f38:	str	r2, [r5, #1796]	; 0x704
   11f3c:	movw	r2, #38152	; 0x9508
   11f40:	movt	r2, #1
   11f44:	bl	11844 <printf@plt>
   11f48:	ldr	r2, [r5, #1800]	; 0x708
   11f4c:	ldr	r1, [r5, #1804]	; 0x70c
   11f50:	adds	r2, r2, #1
   11f54:	adc	r1, r1, #0
   11f58:	str	r2, [r5, #1800]	; 0x708
   11f5c:	str	r1, [r5, #1804]	; 0x70c
   11f60:	bl	12660 <setup@@Base>
   11f64:	ldr	r2, [r5, #1808]	; 0x710
   11f68:	ldr	r1, [r5, #1812]	; 0x714
   11f6c:	adds	r2, r2, #1
   11f70:	adc	r1, r1, #0
   11f74:	str	r2, [r5, #1808]	; 0x710
   11f78:	str	r1, [r5, #1812]	; 0x714
   11f7c:	bl	13ffc <if_statement_inside_if_statement@@Base>
   11f80:	ldr	r2, [r5, #1816]	; 0x718
   11f84:	mov	r0, r6
   11f88:	ldr	r1, [r5, #1820]	; 0x71c
   11f8c:	adds	r2, r2, #1
   11f90:	adc	r1, r1, #0
   11f94:	str	r2, [r5, #1816]	; 0x718
   11f98:	str	r1, [r5, #1820]	; 0x71c
   11f9c:	bl	118bc <puts@plt>
   11fa0:	ldr	r2, [r5, #1824]	; 0x720
   11fa4:	mov	r1, r8
   11fa8:	mov	r0, r7
   11fac:	ldr	ip, [r5, #1828]	; 0x724
   11fb0:	adds	r2, r2, #1
   11fb4:	adc	ip, ip, #0
   11fb8:	str	r2, [r5, #1824]	; 0x720
   11fbc:	movw	r2, #38188	; 0x952c
   11fc0:	movt	r2, #1
   11fc4:	str	ip, [r5, #1828]	; 0x724
   11fc8:	bl	11844 <printf@plt>
   11fcc:	ldr	r2, [r5, #1832]	; 0x728
   11fd0:	ldr	r1, [r5, #1836]	; 0x72c
   11fd4:	adds	r2, r2, #1
   11fd8:	adc	r1, r1, #0
   11fdc:	str	r2, [r5, #1832]	; 0x728
   11fe0:	str	r1, [r5, #1836]	; 0x72c
   11fe4:	bl	12660 <setup@@Base>
   11fe8:	ldr	r2, [r5, #1840]	; 0x730
   11fec:	ldr	r1, [r5, #1844]	; 0x734
   11ff0:	adds	r2, r2, #1
   11ff4:	adc	r1, r1, #0
   11ff8:	str	r2, [r5, #1840]	; 0x730
   11ffc:	str	r1, [r5, #1844]	; 0x734
   12000:	bl	144b4 <if_statement_inside_else_statement@@Base>
   12004:	ldr	r2, [r5, #1848]	; 0x738
   12008:	mov	r0, r6
   1200c:	ldr	r1, [r5, #1852]	; 0x73c
   12010:	adds	r2, r2, #1
   12014:	adc	r1, r1, #0
   12018:	str	r2, [r5, #1848]	; 0x738
   1201c:	str	r1, [r5, #1852]	; 0x73c
   12020:	bl	118bc <puts@plt>
   12024:	ldr	r2, [r5, #1856]	; 0x740
   12028:	mov	r1, r8
   1202c:	mov	r0, r7
   12030:	ldr	ip, [r5, #1860]	; 0x744
   12034:	adds	r2, r2, #1
   12038:	adc	ip, ip, #0
   1203c:	str	r2, [r5, #1856]	; 0x740
   12040:	movw	r2, #38224	; 0x9550
   12044:	movt	r2, #1
   12048:	str	ip, [r5, #1860]	; 0x744
   1204c:	bl	11844 <printf@plt>
   12050:	ldr	r2, [r5, #1864]	; 0x748
   12054:	ldr	r1, [r5, #1868]	; 0x74c
   12058:	adds	r2, r2, #1
   1205c:	adc	r1, r1, #0
   12060:	str	r2, [r5, #1864]	; 0x748
   12064:	str	r1, [r5, #1868]	; 0x74c
   12068:	bl	12660 <setup@@Base>
   1206c:	ldr	r2, [r5, #1872]	; 0x750
   12070:	ldr	r1, [r5, #1876]	; 0x754
   12074:	adds	r2, r2, #1
   12078:	adc	r1, r1, #0
   1207c:	str	r2, [r5, #1872]	; 0x750
   12080:	str	r1, [r5, #1876]	; 0x754
   12084:	bl	13d88 <body_with_one_return@@Base>
   12088:	ldr	r2, [r5, #1880]	; 0x758
   1208c:	mov	r0, r6
   12090:	ldr	r1, [r5, #1884]	; 0x75c
   12094:	adds	r2, r2, #1
   12098:	adc	r1, r1, #0
   1209c:	str	r2, [r5, #1880]	; 0x758
   120a0:	str	r1, [r5, #1884]	; 0x75c
   120a4:	bl	118bc <puts@plt>
   120a8:	ldr	ip, [r5, #1888]	; 0x760
   120ac:	mov	r1, r8
   120b0:	mov	r0, r7
   120b4:	movw	r2, #38248	; 0x9568
   120b8:	movt	r2, #1
   120bc:	ldr	lr, [r5, #1892]	; 0x764
   120c0:	adds	ip, ip, #1
   120c4:	adc	lr, lr, #0
   120c8:	str	ip, [r5, #1888]	; 0x760
   120cc:	str	lr, [r5, #1892]	; 0x764
   120d0:	bl	11844 <printf@plt>
   120d4:	ldr	r2, [r5, #1896]	; 0x768
   120d8:	ldr	r1, [r5, #1900]	; 0x76c
   120dc:	adds	r2, r2, #1
   120e0:	adc	r1, r1, #0
   120e4:	str	r2, [r5, #1896]	; 0x768
   120e8:	str	r1, [r5, #1900]	; 0x76c
   120ec:	bl	12660 <setup@@Base>
   120f0:	ldr	r2, [r5, #1904]	; 0x770
   120f4:	ldr	r1, [r5, #1908]	; 0x774
   120f8:	adds	r2, r2, #1
   120fc:	adc	r1, r1, #0
   12100:	str	r2, [r5, #1904]	; 0x770
   12104:	str	r1, [r5, #1908]	; 0x774
   12108:	bl	13a54 <body_with_two_returns@@Base>
   1210c:	ldr	r2, [r5, #1912]	; 0x778
   12110:	mov	r0, r6
   12114:	ldr	r1, [r5, #1916]	; 0x77c
   12118:	adds	r2, r2, #1
   1211c:	adc	r1, r1, #0
   12120:	str	r2, [r5, #1912]	; 0x778
   12124:	str	r1, [r5, #1916]	; 0x77c
   12128:	bl	118bc <puts@plt>
   1212c:	ldr	r2, [r5, #1920]	; 0x780
   12130:	movw	r0, #38272	; 0x9580
   12134:	movt	r0, #1
   12138:	ldr	r1, [r5, #1924]	; 0x784
   1213c:	adds	r2, r2, #1
   12140:	adc	r1, r1, #0
   12144:	str	r2, [r5, #1920]	; 0x780
   12148:	str	r1, [r5, #1924]	; 0x784
   1214c:	bl	118bc <puts@plt>
   12150:	ldr	r3, [r5, #1928]	; 0x788
   12154:	movw	r0, #38288	; 0x9590
   12158:	movt	r0, #1
   1215c:	ldr	r2, [r5, #1932]	; 0x78c
   12160:	adds	r3, r3, #1
   12164:	adc	r2, r2, #0
   12168:	str	r3, [r5, #1928]	; 0x788
   1216c:	str	r2, [r5, #1932]	; 0x78c
   12170:	bl	118bc <puts@plt>
   12174:	ldr	r3, [r5, #1936]	; 0x790
   12178:	ldr	r2, [r5, #1940]	; 0x794
   1217c:	ldr	r0, [sp, #4]
   12180:	adds	r3, r3, #1
   12184:	adc	r2, r2, #0
   12188:	str	r3, [r5, #1936]	; 0x790
   1218c:	str	r2, [r5, #1940]	; 0x794
   12190:	bl	118bc <puts@plt>
   12194:	ldr	r3, [r5, #1944]	; 0x798
   12198:	mov	r0, #0
   1219c:	ldr	r2, [r5, #1948]	; 0x79c
   121a0:	adds	r3, r3, #1
   121a4:	adc	r2, r2, r0
   121a8:	str	r3, [r5, #1944]	; 0x798
   121ac:	str	r2, [r5, #1948]	; 0x79c
   121b0:	add	sp, sp, #12
   121b4:	ldrd	r4, [sp]
   121b8:	ldrd	r6, [sp, #8]
   121bc:	ldrd	r8, [sp, #16]
   121c0:	ldrd	sl, [sp, #24]
   121c4:	add	sp, sp, #32
   121c8:	pop	{pc}		; (ldr pc, [sp], #4)
   121cc:	movw	r0, #41144	; 0xa0b8
   121d0:	movt	r0, #2
   121d4:	b	18c14 <__gcov_sort_n_vals@@Base+0x4a0>
   121d8:	movw	r0, #41708	; 0xa2ec
   121dc:	movt	r0, #2
   121e0:	b	18c14 <__gcov_sort_n_vals@@Base+0x4a0>
   121e4:	movw	r0, #42496	; 0xa600
   121e8:	movt	r0, #2
   121ec:	b	18c14 <__gcov_sort_n_vals@@Base+0x4a0>
   121f0:	movw	r0, #43004	; 0xa7fc
   121f4:	movt	r0, #2
   121f8:	b	18c14 <__gcov_sort_n_vals@@Base+0x4a0>

000121fc <_start@@Base>:
   121fc:	mov	fp, #0
   12200:	mov	lr, #0
   12204:	pop	{r1}		; (ldr r1, [sp], #4)
   12208:	mov	r2, sp
   1220c:	push	{r2}		; (str r2, [sp, #-4]!)
   12210:	push	{r0}		; (str r0, [sp, #-4]!)
   12214:	ldr	ip, [pc, #16]	; 1222c <_start@@Base+0x30>
   12218:	push	{ip}		; (str ip, [sp, #-4]!)
   1221c:	ldr	r0, [pc, #12]	; 12230 <_start@@Base+0x34>
   12220:	ldr	r3, [pc, #12]	; 12234 <_start@@Base+0x38>
   12224:	bl	118d4 <__libc_start_main@plt>
   12228:	bl	119ac <abort@plt>
   1222c:	andeq	r8, r1, ip, lsl #31
   12230:	andeq	r1, r1, r0, ror #19
   12234:	andeq	r8, r1, ip, lsr #30
   12238:	ldr	r3, [pc, #20]	; 12254 <_start@@Base+0x58>
   1223c:	ldr	r2, [pc, #20]	; 12258 <_start@@Base+0x5c>
   12240:	add	r3, pc, r3
   12244:	ldr	r2, [r3, r2]
   12248:	cmp	r2, #0
   1224c:	bxeq	lr
   12250:	b	118e0 <__gmon_start__@plt>
   12254:			; <UNDEFINED> instruction: 0x00017db8
   12258:	andeq	r0, r0, r0, lsr #1
   1225c:	ldr	r0, [pc, #24]	; 1227c <_start@@Base+0x80>
   12260:	ldr	r3, [pc, #24]	; 12280 <_start@@Base+0x84>
   12264:	cmp	r3, r0
   12268:	bxeq	lr
   1226c:	ldr	r3, [pc, #16]	; 12284 <_start@@Base+0x88>
   12270:	cmp	r3, #0
   12274:	bxeq	lr
   12278:	bx	r3
   1227c:	andeq	sl, r2, r4, ror r9
   12280:	andeq	sl, r2, r4, ror r9
   12284:	andeq	r0, r0, r0
   12288:	ldr	r0, [pc, #36]	; 122b4 <_start@@Base+0xb8>
   1228c:	ldr	r1, [pc, #36]	; 122b8 <_start@@Base+0xbc>
   12290:	sub	r1, r1, r0
   12294:	asr	r1, r1, #2
   12298:	add	r1, r1, r1, lsr #31
   1229c:	asrs	r1, r1, #1
   122a0:	bxeq	lr
   122a4:	ldr	r3, [pc, #16]	; 122bc <_start@@Base+0xc0>
   122a8:	cmp	r3, #0
   122ac:	bxeq	lr
   122b0:	bx	r3
   122b4:	andeq	sl, r2, r4, ror r9
   122b8:	andeq	sl, r2, r4, ror r9
   122bc:	andeq	r0, r0, r0
   122c0:	push	{r4, lr}
   122c4:	ldr	r4, [pc, #24]	; 122e4 <_start@@Base+0xe8>
   122c8:	ldrb	r3, [r4]
   122cc:	cmp	r3, #0
   122d0:	popne	{r4, pc}
   122d4:	bl	1225c <_start@@Base+0x60>
   122d8:	mov	r3, #1
   122dc:	strb	r3, [r4]
   122e0:	pop	{r4, pc}
   122e4:	andeq	sl, r2, r0, lsl #19
   122e8:	b	12288 <_start@@Base+0x8c>

000122ec <next@@Base>:
   122ec:	movw	r3, #47324	; 0xb8dc
   122f0:	movt	r3, #2
   122f4:	strd	r4, [sp, #-16]!
   122f8:	ldr	r2, [r3, #204]	; 0xcc
   122fc:	movw	r4, #43400	; 0xa988
   12300:	movt	r4, #2
   12304:	str	r6, [sp, #8]
   12308:	str	lr, [sp, #12]
   1230c:	str	r0, [r3]
   12310:	cmp	r2, #49	; 0x31
   12314:	add	r2, r2, #1
   12318:	bhi	123b4 <next@@Base+0xc8>
   1231c:	ldm	r4, {r1, ip}
   12320:	str	r0, [r3, r2, lsl #2]
   12324:	ldr	r2, [r3, #204]	; 0xcc
   12328:	adds	r1, r1, #1
   1232c:	adc	ip, ip, #0
   12330:	add	r2, r2, #1
   12334:	stm	r4, {r1, ip}
   12338:	movw	r1, #47560	; 0xb9c8
   1233c:	movt	r1, #2
   12340:	str	r2, [r3, #204]	; 0xcc
   12344:	ldr	ip, [r1, #200]	; 0xc8
   12348:	cmp	ip, #49	; 0x31
   1234c:	bhi	1237c <next@@Base+0x90>
   12350:	ldr	r2, [r4, #16]
   12354:	movw	r5, #8940	; 0x22ec
   12358:	movt	r5, #1
   1235c:	add	r6, ip, #1
   12360:	ldr	lr, [r4, #20]
   12364:	str	r5, [r1, ip, lsl #2]
   12368:	str	r6, [r1, #200]	; 0xc8
   1236c:	adds	r2, r2, #1
   12370:	adc	r1, lr, #0
   12374:	str	r2, [r4, #16]
   12378:	str	r1, [r4, #20]
   1237c:	ldr	r2, [r3, #232]	; 0xe8
   12380:	cmp	r2, #0
   12384:	beq	123dc <next@@Base+0xf0>
   12388:	blx	r2
   1238c:	ldr	r3, [r4, #24]
   12390:	ldr	r2, [r4, #28]
   12394:	ldr	r6, [sp, #8]
   12398:	adds	r3, r3, #1
   1239c:	adc	r2, r2, #0
   123a0:	str	r3, [r4, #24]
   123a4:	str	r2, [r4, #28]
   123a8:	ldrd	r4, [sp]
   123ac:	add	sp, sp, #12
   123b0:	pop	{pc}		; (ldr pc, [sp], #4)
   123b4:	ldr	r1, [r4, #8]
   123b8:	ldr	ip, [r4, #12]
   123bc:	ldr	lr, [r3, #212]	; 0xd4
   123c0:	adds	r1, r1, #1
   123c4:	adc	ip, ip, #0
   123c8:	str	r1, [r4, #8]
   123cc:	add	lr, lr, #1
   123d0:	str	ip, [r4, #12]
   123d4:	str	lr, [r3, #212]	; 0xd4
   123d8:	b	12338 <next@@Base+0x4c>
   123dc:	ldr	r2, [r3, #220]	; 0xdc
   123e0:	cmp	r2, #0
   123e4:	beq	1242c <next@@Base+0x140>
   123e8:	ldr	r1, [r3, #224]	; 0xe0
   123ec:	ldr	r0, [r3, #228]	; 0xe4
   123f0:	cmp	r2, r1
   123f4:	ble	12454 <next@@Base+0x168>
   123f8:	ldr	r2, [r4, #40]	; 0x28
   123fc:	add	lr, r1, #1
   12400:	ldr	ip, [r4, #44]	; 0x2c
   12404:	ldr	r0, [r0, r1, lsl #2]
   12408:	adds	r2, r2, #1
   1240c:	str	lr, [r3, #224]	; 0xe0
   12410:	ldr	r6, [sp, #8]
   12414:	adc	r3, ip, #0
   12418:	str	r2, [r4, #40]	; 0x28
   1241c:	str	r3, [r4, #44]	; 0x2c
   12420:	ldrd	r4, [sp]
   12424:	add	sp, sp, #12
   12428:	pop	{pc}		; (ldr pc, [sp], #4)
   1242c:	ldr	r2, [r4, #32]
   12430:	ldr	r1, [r4, #36]	; 0x24
   12434:	ldr	r0, [r3, #216]	; 0xd8
   12438:	adds	r2, r2, #1
   1243c:	ldr	r6, [sp, #8]
   12440:	adc	r3, r1, #0
   12444:	strd	r2, [r4, #32]
   12448:	ldrd	r4, [sp]
   1244c:	add	sp, sp, #12
   12450:	pop	{pc}		; (ldr pc, [sp], #4)
   12454:	ldr	r3, [r4, #48]	; 0x30
   12458:	sub	r2, r2, #-1073741823	; 0xc0000001
   1245c:	ldr	r1, [r4, #52]	; 0x34
   12460:	ldr	r0, [r0, r2, lsl #2]
   12464:	adds	r3, r3, #1
   12468:	ldr	r6, [sp, #8]
   1246c:	adc	r2, r1, #0
   12470:	str	r3, [r4, #48]	; 0x30
   12474:	str	r2, [r4, #52]	; 0x34
   12478:	ldrd	r4, [sp]
   1247c:	add	sp, sp, #12
   12480:	pop	{pc}		; (ldr pc, [sp], #4)

00012484 <push_back@@Base>:
   12484:	movw	r3, #46900	; 0xb734
   12488:	movt	r3, #2
   1248c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12490:	ldr	r2, [r3, #408]	; 0x198
   12494:	strd	r6, [sp, #8]
   12498:	str	r8, [sp, #16]
   1249c:	str	lr, [sp, #20]
   124a0:	str	r0, [r3]
   124a4:	cmp	r2, #49	; 0x31
   124a8:	add	r2, r2, #1
   124ac:	str	r1, [r3, #204]	; 0xcc
   124b0:	bhi	1256c <push_back@@Base+0xe8>
   124b4:	str	r0, [r3, r2, lsl #2]
   124b8:	movw	r4, #43400	; 0xa988
   124bc:	movt	r4, #2
   124c0:	ldr	ip, [r3, #408]	; 0x198
   124c4:	ldr	r2, [r4, #56]	; 0x38
   124c8:	ldr	lr, [r4, #60]	; 0x3c
   124cc:	add	ip, ip, #52	; 0x34
   124d0:	str	r1, [r3, ip, lsl #2]
   124d4:	adds	ip, r2, #1
   124d8:	ldr	r2, [r3, #408]	; 0x198
   124dc:	adc	lr, lr, #0
   124e0:	str	ip, [r4, #56]	; 0x38
   124e4:	str	lr, [r4, #60]	; 0x3c
   124e8:	add	r2, r2, #1
   124ec:	movw	ip, #47560	; 0xb9c8
   124f0:	movt	ip, #2
   124f4:	str	r2, [r3, #408]	; 0x198
   124f8:	ldr	lr, [ip, #200]	; 0xc8
   124fc:	cmp	lr, #49	; 0x31
   12500:	bhi	12530 <push_back@@Base+0xac>
   12504:	ldr	r2, [r4, #72]	; 0x48
   12508:	movw	r6, #9348	; 0x2484
   1250c:	movt	r6, #1
   12510:	add	r7, lr, #1
   12514:	ldr	r5, [r4, #76]	; 0x4c
   12518:	str	r6, [ip, lr, lsl #2]
   1251c:	str	r7, [ip, #200]	; 0xc8
   12520:	adds	r2, r2, #1
   12524:	adc	ip, r5, #0
   12528:	str	r2, [r4, #72]	; 0x48
   1252c:	str	ip, [r4, #76]	; 0x4c
   12530:	ldr	r3, [r3, #420]	; 0x1a4
   12534:	cmp	r3, #0
   12538:	beq	1259c <push_back@@Base+0x118>
   1253c:	blx	r3
   12540:	ldr	r3, [r4, #88]	; 0x58
   12544:	ldr	r2, [r4, #92]	; 0x5c
   12548:	adds	r3, r3, #1
   1254c:	adc	r2, r2, #0
   12550:	str	r3, [r4, #88]	; 0x58
   12554:	str	r2, [r4, #92]	; 0x5c
   12558:	ldrd	r4, [sp]
   1255c:	ldrd	r6, [sp, #8]
   12560:	ldr	r8, [sp, #16]
   12564:	add	sp, sp, #20
   12568:	pop	{pc}		; (ldr pc, [sp], #4)
   1256c:	movw	r4, #43400	; 0xa988
   12570:	movt	r4, #2
   12574:	ldr	r5, [r3, #416]	; 0x1a0
   12578:	ldr	ip, [r4, #64]	; 0x40
   1257c:	ldr	lr, [r4, #68]	; 0x44
   12580:	add	r5, r5, #1
   12584:	adds	ip, ip, #1
   12588:	str	r5, [r3, #416]	; 0x1a0
   1258c:	adc	lr, lr, #0
   12590:	str	ip, [r4, #64]	; 0x40
   12594:	str	lr, [r4, #68]	; 0x44
   12598:	b	124ec <push_back@@Base+0x68>
   1259c:	ldr	r3, [r4, #80]	; 0x50
   125a0:	ldr	r2, [r4, #84]	; 0x54
   125a4:	adds	r3, r3, #1
   125a8:	adc	r2, r2, #0
   125ac:	str	r3, [r4, #80]	; 0x50
   125b0:	str	r2, [r4, #84]	; 0x54
   125b4:	b	12558 <push_back@@Base+0xd4>

000125b8 <next_reset@@Base>:
   125b8:	movw	r3, #43400	; 0xa988
   125bc:	movt	r3, #2
   125c0:	str	r4, [sp, #-8]!
   125c4:	ldr	ip, [r3, #96]	; 0x60
   125c8:	mov	r1, #0
   125cc:	movw	r4, #47324	; 0xb8dc
   125d0:	movt	r4, #2
   125d4:	str	lr, [sp, #4]
   125d8:	mov	r2, #236	; 0xec
   125dc:	ldr	lr, [r3, #100]	; 0x64
   125e0:	mov	r0, r4
   125e4:	adds	ip, ip, #1
   125e8:	adc	lr, lr, r1
   125ec:	str	ip, [r3, #96]	; 0x60
   125f0:	str	lr, [r3, #100]	; 0x64
   125f4:	bl	11934 <memset@plt>
   125f8:	mov	r3, #50	; 0x32
   125fc:	str	r3, [r4, #208]	; 0xd0
   12600:	ldr	r4, [sp]
   12604:	add	sp, sp, #4
   12608:	pop	{pc}		; (ldr pc, [sp], #4)

0001260c <push_back_reset@@Base>:
   1260c:	movw	r3, #43400	; 0xa988
   12610:	movt	r3, #2
   12614:	str	r4, [sp, #-8]!
   12618:	ldr	ip, [r3, #104]	; 0x68
   1261c:	mov	r1, #0
   12620:	movw	r4, #46900	; 0xb734
   12624:	movt	r4, #2
   12628:	str	lr, [sp, #4]
   1262c:	mov	r2, #424	; 0x1a8
   12630:	ldr	lr, [r3, #108]	; 0x6c
   12634:	mov	r0, r4
   12638:	adds	ip, ip, #1
   1263c:	adc	lr, lr, r1
   12640:	str	ip, [r3, #104]	; 0x68
   12644:	str	lr, [r3, #108]	; 0x6c
   12648:	bl	11934 <memset@plt>
   1264c:	mov	r3, #50	; 0x32
   12650:	str	r3, [r4, #412]	; 0x19c
   12654:	ldr	r4, [sp]
   12658:	add	sp, sp, #4
   1265c:	pop	{pc}		; (ldr pc, [sp], #4)

00012660 <setup@@Base>:
   12660:	movw	r3, #43400	; 0xa988
   12664:	movt	r3, #2
   12668:	strd	r4, [sp, #-16]!
   1266c:	ldr	ip, [r3, #112]	; 0x70
   12670:	mov	r1, #0
   12674:	movw	r5, #47324	; 0xb8dc
   12678:	movt	r5, #2
   1267c:	mov	r2, #236	; 0xec
   12680:	str	r6, [sp, #8]
   12684:	str	lr, [sp, #12]
   12688:	mov	r6, #50	; 0x32
   1268c:	mov	r0, r5
   12690:	ldr	lr, [r3, #116]	; 0x74
   12694:	movw	r4, #46900	; 0xb734
   12698:	movt	r4, #2
   1269c:	adds	ip, ip, #1
   126a0:	str	ip, [r3, #112]	; 0x70
   126a4:	adc	lr, lr, r1
   126a8:	str	lr, [r3, #116]	; 0x74
   126ac:	bl	11934 <memset@plt>
   126b0:	mov	r0, r4
   126b4:	mov	r2, #424	; 0x1a8
   126b8:	str	r6, [r5, #208]	; 0xd0
   126bc:	mov	r1, #0
   126c0:	bl	11934 <memset@plt>
   126c4:	str	r6, [r4, #412]	; 0x19c
   126c8:	ldrd	r4, [sp]
   126cc:	ldr	r6, [sp, #8]
   126d0:	add	sp, sp, #12
   126d4:	pop	{pc}		; (ldr pc, [sp], #4)

000126d8 <no_int_as_first_stuff@@Base>:
   126d8:	strd	r4, [sp, #-16]!
   126dc:	movw	r4, #43400	; 0xa988
   126e0:	movt	r4, #2
   126e4:	ldr	r3, [r4, #120]	; 0x78
   126e8:	movw	r5, #47324	; 0xb8dc
   126ec:	movt	r5, #2
   126f0:	str	r6, [sp, #8]
   126f4:	ldr	r2, [r4, #124]	; 0x7c
   126f8:	str	lr, [sp, #12]
   126fc:	sub	sp, sp, #16
   12700:	add	r1, sp, #4
   12704:	mov	r0, sp
   12708:	adds	r3, r3, #1
   1270c:	adc	r2, r2, #0
   12710:	str	r3, [r4, #120]	; 0x78
   12714:	str	r2, [r4, #124]	; 0x7c
   12718:	bl	15ae4 <init_grammar@@Base>
   1271c:	ldr	r3, [r4, #128]	; 0x80
   12720:	mov	r0, #4
   12724:	ldr	r2, [r4, #132]	; 0x84
   12728:	adds	r3, r3, #1
   1272c:	adc	r2, r2, #0
   12730:	str	r3, [r4, #128]	; 0x80
   12734:	str	r2, [r4, #132]	; 0x84
   12738:	bl	118c8 <malloc@plt>
   1273c:	mov	r6, r0
   12740:	bl	14a50 <init_token_opar@@Base>
   12744:	ldr	r3, [r4, #136]	; 0x88
   12748:	mov	r0, sp
   1274c:	str	r6, [r5, #216]	; 0xd8
   12750:	ldr	r2, [r4, #140]	; 0x8c
   12754:	adds	r3, r3, #1
   12758:	adc	r2, r2, #0
   1275c:	str	r3, [r4, #136]	; 0x88
   12760:	str	r2, [r4, #140]	; 0x8c
   12764:	bl	16968 <read_function_ast_node@@Base>
   12768:	ldr	r3, [r5, #204]	; 0xcc
   1276c:	cmp	r3, #1
   12770:	bne	127a8 <no_int_as_first_stuff@@Base+0xd0>
   12774:	cmp	r0, #0
   12778:	bne	127e0 <no_int_as_first_stuff@@Base+0x108>
   1277c:	ldr	r3, [r4, #152]	; 0x98
   12780:	ldr	r2, [r4, #156]	; 0x9c
   12784:	adds	r3, r3, #1
   12788:	adc	r2, r2, #0
   1278c:	str	r3, [r4, #152]	; 0x98
   12790:	str	r2, [r4, #156]	; 0x9c
   12794:	add	sp, sp, #16
   12798:	ldrd	r4, [sp]
   1279c:	ldr	r6, [sp, #8]
   127a0:	add	sp, sp, #12
   127a4:	pop	{pc}		; (ldr pc, [sp], #4)
   127a8:	ldr	ip, [r4, #144]	; 0x90
   127ac:	movw	r3, #36764	; 0x8f9c
   127b0:	movt	r3, #1
   127b4:	movw	r1, #37132	; 0x910c
   127b8:	movt	r1, #1
   127bc:	ldr	lr, [r4, #148]	; 0x94
   127c0:	movw	r0, #37200	; 0x9150
   127c4:	movt	r0, #1
   127c8:	mov	r2, #41	; 0x29
   127cc:	adds	ip, ip, #1
   127d0:	adc	lr, lr, #0
   127d4:	str	ip, [r4, #144]	; 0x90
   127d8:	str	lr, [r4, #148]	; 0x94
   127dc:	bl	119c4 <__assert_fail@plt>
   127e0:	ldr	ip, [r4, #160]	; 0xa0
   127e4:	movw	r3, #36764	; 0x8f9c
   127e8:	movt	r3, #1
   127ec:	movw	r1, #37132	; 0x910c
   127f0:	movt	r1, #1
   127f4:	ldr	lr, [r4, #164]	; 0xa4
   127f8:	movw	r0, #37228	; 0x916c
   127fc:	movt	r0, #1
   12800:	mov	r2, #42	; 0x2a
   12804:	adds	ip, ip, #1
   12808:	adc	lr, lr, #0
   1280c:	str	ip, [r4, #160]	; 0xa0
   12810:	str	lr, [r4, #164]	; 0xa4
   12814:	bl	119c4 <__assert_fail@plt>

00012818 <int_but_not_followed_by_function@@Base>:
   12818:	strd	r4, [sp, #-16]!
   1281c:	movw	r4, #43400	; 0xa988
   12820:	movt	r4, #2
   12824:	ldr	r3, [r4, #168]	; 0xa8
   12828:	movw	r5, #47324	; 0xb8dc
   1282c:	movt	r5, #2
   12830:	str	r6, [sp, #8]
   12834:	ldr	r2, [r4, #172]	; 0xac
   12838:	str	lr, [sp, #12]
   1283c:	sub	sp, sp, #16
   12840:	add	r1, sp, #4
   12844:	mov	r0, sp
   12848:	adds	r3, r3, #1
   1284c:	adc	r2, r2, #0
   12850:	str	r3, [r4, #168]	; 0xa8
   12854:	str	r2, [r4, #172]	; 0xac
   12858:	bl	15ae4 <init_grammar@@Base>
   1285c:	ldr	r3, [r4, #176]	; 0xb0
   12860:	mov	r0, #8
   12864:	ldr	r2, [r4, #180]	; 0xb4
   12868:	adds	r3, r3, #1
   1286c:	adc	r2, r2, #0
   12870:	str	r3, [r4, #176]	; 0xb0
   12874:	str	r2, [r4, #180]	; 0xb4
   12878:	bl	118c8 <malloc@plt>
   1287c:	mov	r6, r0
   12880:	mov	r0, #4
   12884:	bl	118c8 <malloc@plt>
   12888:	str	r0, [r6]
   1288c:	bl	149bc <init_token_int_type@@Base>
   12890:	ldr	r3, [r4, #184]	; 0xb8
   12894:	mov	r0, #4
   12898:	ldr	r2, [r4, #188]	; 0xbc
   1289c:	adds	r3, r3, #1
   128a0:	adc	r2, r2, #0
   128a4:	str	r3, [r4, #184]	; 0xb8
   128a8:	str	r2, [r4, #188]	; 0xbc
   128ac:	bl	118c8 <malloc@plt>
   128b0:	str	r0, [r6, #4]
   128b4:	bl	14a50 <init_token_opar@@Base>
   128b8:	ldr	r3, [r4, #192]	; 0xc0
   128bc:	mov	r1, #2
   128c0:	mov	r0, sp
   128c4:	ldr	r2, [r4, #196]	; 0xc4
   128c8:	str	r1, [r5, #220]	; 0xdc
   128cc:	str	r6, [r5, #228]	; 0xe4
   128d0:	adds	r3, r3, #1
   128d4:	adc	r2, r2, #0
   128d8:	str	r3, [r4, #192]	; 0xc0
   128dc:	str	r2, [r4, #196]	; 0xc4
   128e0:	bl	16968 <read_function_ast_node@@Base>
   128e4:	ldr	r3, [r5, #204]	; 0xcc
   128e8:	cmp	r3, #2
   128ec:	bne	12924 <int_but_not_followed_by_function@@Base+0x10c>
   128f0:	cmp	r0, #0
   128f4:	bne	12958 <int_but_not_followed_by_function@@Base+0x140>
   128f8:	ldr	r3, [r4, #208]	; 0xd0
   128fc:	ldr	r2, [r4, #212]	; 0xd4
   12900:	adds	r3, r3, #1
   12904:	adc	r2, r2, #0
   12908:	str	r3, [r4, #208]	; 0xd0
   1290c:	str	r2, [r4, #212]	; 0xd4
   12910:	add	sp, sp, #16
   12914:	ldrd	r4, [sp]
   12918:	ldr	r6, [sp, #8]
   1291c:	add	sp, sp, #12
   12920:	pop	{pc}		; (ldr pc, [sp], #4)
   12924:	ldr	r3, [r4, #200]	; 0xc8
   12928:	movw	r1, #37132	; 0x910c
   1292c:	movt	r1, #1
   12930:	movw	r0, #37240	; 0x9178
   12934:	movt	r0, #1
   12938:	ldr	lr, [r4, #204]	; 0xcc
   1293c:	mov	r2, #67	; 0x43
   12940:	adds	ip, r3, #1
   12944:	ldr	r3, [pc, #64]	; 1298c <int_but_not_followed_by_function@@Base+0x174>
   12948:	adc	lr, lr, #0
   1294c:	str	ip, [r4, #200]	; 0xc8
   12950:	str	lr, [r4, #204]	; 0xcc
   12954:	bl	119c4 <__assert_fail@plt>
   12958:	ldr	r3, [r4, #216]	; 0xd8
   1295c:	movw	r1, #37132	; 0x910c
   12960:	movt	r1, #1
   12964:	movw	r0, #37228	; 0x916c
   12968:	movt	r0, #1
   1296c:	ldr	lr, [r4, #220]	; 0xdc
   12970:	mov	r2, #68	; 0x44
   12974:	adds	ip, r3, #1
   12978:	ldr	r3, [pc, #12]	; 1298c <int_but_not_followed_by_function@@Base+0x174>
   1297c:	adc	lr, lr, #0
   12980:	str	ip, [r4, #216]	; 0xd8
   12984:	str	lr, [r4, #220]	; 0xdc
   12988:	bl	119c4 <__assert_fail@plt>
   1298c:			; <UNDEFINED> instruction: 0x00018fb4

00012990 <boolean_expression_is_read_properly@@Base>:
   12990:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12994:	movw	r4, #43400	; 0xa988
   12998:	movt	r4, #2
   1299c:	ldr	r3, [r4, #224]	; 0xe0
   129a0:	mov	r0, #3
   129a4:	ldr	r2, [r4, #228]	; 0xe4
   129a8:	strd	r6, [sp, #8]
   129ac:	movw	r7, #47324	; 0xb8dc
   129b0:	movt	r7, #2
   129b4:	str	r8, [sp, #16]
   129b8:	adds	r3, r3, #1
   129bc:	str	lr, [sp, #20]
   129c0:	sub	sp, sp, #16
   129c4:	adc	r2, r2, #0
   129c8:	str	r3, [r4, #224]	; 0xe0
   129cc:	str	r2, [r4, #228]	; 0xe4
   129d0:	bl	118c8 <malloc@plt>
   129d4:	mov	r8, r0
   129d8:	movw	r2, #15649	; 0x3d21
   129dc:	mov	r3, #0
   129e0:	add	r1, sp, #4
   129e4:	mov	r0, sp
   129e8:	strh	r2, [r8]
   129ec:	strb	r3, [r8, #2]
   129f0:	bl	15ae4 <init_grammar@@Base>
   129f4:	ldr	r3, [r4, #232]	; 0xe8
   129f8:	mov	r0, #20
   129fc:	ldr	r2, [r4, #236]	; 0xec
   12a00:	adds	r3, r3, #1
   12a04:	adc	r2, r2, #0
   12a08:	str	r3, [r4, #232]	; 0xe8
   12a0c:	str	r2, [r4, #236]	; 0xec
   12a10:	bl	118c8 <malloc@plt>
   12a14:	mov	r6, r0
   12a18:	mov	r0, #8
   12a1c:	bl	118c8 <malloc@plt>
   12a20:	mov	r1, #2
   12a24:	str	r0, [r6]
   12a28:	bl	149e8 <init_token_int_value@@Base>
   12a2c:	ldr	r3, [r4, #240]	; 0xf0
   12a30:	mov	r0, #8
   12a34:	ldr	r2, [r4, #244]	; 0xf4
   12a38:	adds	r3, r3, #1
   12a3c:	adc	r2, r2, #0
   12a40:	str	r3, [r4, #240]	; 0xf0
   12a44:	str	r2, [r4, #244]	; 0xf4
   12a48:	bl	118c8 <malloc@plt>
   12a4c:	mov	r1, #2
   12a50:	str	r0, [r6, #4]
   12a54:	bl	149e8 <init_token_int_value@@Base>
   12a58:	ldr	r3, [r4, #248]	; 0xf8
   12a5c:	mov	r0, #8
   12a60:	ldr	r2, [r4, #252]	; 0xfc
   12a64:	adds	r3, r3, #1
   12a68:	adc	r2, r2, #0
   12a6c:	str	r3, [r4, #248]	; 0xf8
   12a70:	str	r2, [r4, #252]	; 0xfc
   12a74:	bl	118c8 <malloc@plt>
   12a78:	mov	r1, r8
   12a7c:	str	r0, [r6, #8]
   12a80:	bl	14bdc <init_token_boolean_op@@Base>
   12a84:	ldr	r3, [r4, #256]	; 0x100
   12a88:	mov	r0, #8
   12a8c:	ldr	r1, [r4, #260]	; 0x104
   12a90:	adds	r3, r3, #1
   12a94:	adc	r1, r1, #0
   12a98:	str	r3, [r4, #256]	; 0x100
   12a9c:	str	r1, [r4, #260]	; 0x104
   12aa0:	bl	118c8 <malloc@plt>
   12aa4:	mov	r1, #1
   12aa8:	str	r0, [r6, #12]
   12aac:	bl	149e8 <init_token_int_value@@Base>
   12ab0:	ldr	r3, [r4, #264]	; 0x108
   12ab4:	mov	r0, #4
   12ab8:	ldr	r2, [r4, #268]	; 0x10c
   12abc:	adds	r3, r3, #1
   12ac0:	adc	r2, r2, #0
   12ac4:	str	r3, [r4, #264]	; 0x108
   12ac8:	str	r2, [r4, #268]	; 0x10c
   12acc:	bl	118c8 <malloc@plt>
   12ad0:	str	r0, [r6, #16]
   12ad4:	bl	14a7c <init_token_cpar@@Base>
   12ad8:	ldr	r3, [r4, #272]	; 0x110
   12adc:	mov	r1, #5
   12ae0:	mov	r0, sp
   12ae4:	ldr	r2, [r4, #276]	; 0x114
   12ae8:	str	r1, [r7, #220]	; 0xdc
   12aec:	str	r6, [r7, #228]	; 0xe4
   12af0:	adds	r3, r3, #1
   12af4:	adc	r2, r2, #0
   12af8:	str	r3, [r4, #272]	; 0x110
   12afc:	str	r2, [r4, #276]	; 0x114
   12b00:	bl	162c4 <read_boolean_expression@@Base>
   12b04:	ldr	r3, [r7, #204]	; 0xcc
   12b08:	cmp	r3, #5
   12b0c:	bne	12b60 <boolean_expression_is_read_properly@@Base+0x1d0>
   12b10:	movw	r3, #46900	; 0xb734
   12b14:	movt	r3, #2
   12b18:	ldr	r3, [r3, #408]	; 0x198
   12b1c:	cmp	r3, #1
   12b20:	bne	12bc4 <boolean_expression_is_read_properly@@Base+0x234>
   12b24:	ldr	r3, [r0]
   12b28:	cmp	r3, #5
   12b2c:	bne	12b90 <boolean_expression_is_read_properly@@Base+0x200>
   12b30:	ldr	r3, [r4, #296]	; 0x128
   12b34:	ldr	r2, [r4, #300]	; 0x12c
   12b38:	adds	r3, r3, #1
   12b3c:	adc	r2, r2, #0
   12b40:	str	r3, [r4, #296]	; 0x128
   12b44:	str	r2, [r4, #300]	; 0x12c
   12b48:	add	sp, sp, #16
   12b4c:	ldrd	r4, [sp]
   12b50:	ldrd	r6, [sp, #8]
   12b54:	ldr	r8, [sp, #16]
   12b58:	add	sp, sp, #20
   12b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   12b60:	add	r4, r4, #288	; 0x120
   12b64:	movw	r1, #37132	; 0x910c
   12b68:	movt	r1, #1
   12b6c:	ldmdb	r4, {r3, lr}
   12b70:	movw	r0, #37268	; 0x9194
   12b74:	movt	r0, #1
   12b78:	mov	r2, #105	; 0x69
   12b7c:	adds	ip, r3, #1
   12b80:	ldr	r3, [pc, #92]	; 12be4 <boolean_expression_is_read_properly@@Base+0x254>
   12b84:	adc	lr, lr, #0
   12b88:	stmdb	r4, {ip, lr}
   12b8c:	bl	119c4 <__assert_fail@plt>
   12b90:	add	r4, r4, #304	; 0x130
   12b94:	ldr	r3, [r4]
   12b98:	movw	r1, #37132	; 0x910c
   12b9c:	movt	r1, #1
   12ba0:	movw	r0, #37328	; 0x91d0
   12ba4:	movt	r0, #1
   12ba8:	mov	r2, #107	; 0x6b
   12bac:	ldr	lr, [r4, #4]
   12bb0:	adds	ip, r3, #1
   12bb4:	ldr	r3, [pc, #40]	; 12be4 <boolean_expression_is_read_properly@@Base+0x254>
   12bb8:	adc	lr, lr, #0
   12bbc:	stm	r4, {ip, lr}
   12bc0:	bl	119c4 <__assert_fail@plt>
   12bc4:	add	r4, r4, #288	; 0x120
   12bc8:	movw	r1, #37132	; 0x910c
   12bcc:	movt	r1, #1
   12bd0:	movw	r0, #37296	; 0x91b0
   12bd4:	movt	r0, #1
   12bd8:	mov	r2, #106	; 0x6a
   12bdc:	ldr	r3, [r4]
   12be0:	b	12bac <boolean_expression_is_read_properly@@Base+0x21c>
   12be4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>

00012be8 <boolean_expression_complex@@Base>:
   12be8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12bec:	mov	r0, #3
   12bf0:	ldr	r4, [pc, #796]	; 12f14 <boolean_expression_complex@@Base+0x32c>
   12bf4:	strd	r6, [sp, #8]
   12bf8:	movw	r6, #47324	; 0xb8dc
   12bfc:	movt	r6, #2
   12c00:	strd	r8, [sp, #16]
   12c04:	str	lr, [sp, #24]
   12c08:	sub	sp, sp, #20
   12c0c:	ldr	r3, [r4, #-8]
   12c10:	ldr	r2, [r4, #-4]
   12c14:	adds	r3, r3, #1
   12c18:	adc	r2, r2, #0
   12c1c:	str	r3, [r4, #-8]
   12c20:	str	r2, [r4, #-4]
   12c24:	bl	118c8 <malloc@plt>
   12c28:	mov	r9, r0
   12c2c:	mov	r0, #3
   12c30:	bl	118c8 <malloc@plt>
   12c34:	mov	r8, r0
   12c38:	mov	r0, #3
   12c3c:	bl	118c8 <malloc@plt>
   12c40:	movw	r3, #15676	; 0x3d3c
   12c44:	movw	r1, #9766	; 0x2626
   12c48:	mov	r7, r0
   12c4c:	movw	r2, #15677	; 0x3d3d
   12c50:	strh	r3, [r9]
   12c54:	mov	r3, #0
   12c58:	mov	r0, sp
   12c5c:	strh	r1, [r8]
   12c60:	add	r1, sp, #4
   12c64:	strh	r2, [r7]
   12c68:	strb	r3, [r7, #2]
   12c6c:	strb	r3, [r8, #2]
   12c70:	strb	r3, [r9, #2]
   12c74:	bl	15ae4 <init_grammar@@Base>
   12c78:	ldr	r3, [r4]
   12c7c:	mov	r0, #40	; 0x28
   12c80:	ldr	r2, [r4, #4]
   12c84:	adds	r3, r3, #1
   12c88:	adc	r2, r2, #0
   12c8c:	str	r3, [r4]
   12c90:	str	r2, [r4, #4]
   12c94:	bl	118c8 <malloc@plt>
   12c98:	mov	r5, r0
   12c9c:	mov	r0, #8
   12ca0:	bl	118c8 <malloc@plt>
   12ca4:	mov	r1, #2
   12ca8:	str	r0, [r5]
   12cac:	bl	149e8 <init_token_int_value@@Base>
   12cb0:	ldr	r3, [r4, #8]
   12cb4:	mov	r0, #8
   12cb8:	ldr	r2, [r4, #12]
   12cbc:	adds	r3, r3, #1
   12cc0:	adc	r2, r2, #0
   12cc4:	str	r3, [r4, #8]
   12cc8:	str	r2, [r4, #12]
   12ccc:	bl	118c8 <malloc@plt>
   12cd0:	mov	r1, #2
   12cd4:	str	r0, [r5, #4]
   12cd8:	bl	149e8 <init_token_int_value@@Base>
   12cdc:	ldr	r3, [r4, #16]
   12ce0:	mov	r0, #8
   12ce4:	ldr	r2, [r4, #20]
   12ce8:	adds	r3, r3, #1
   12cec:	adc	r2, r2, #0
   12cf0:	str	r3, [r4, #16]
   12cf4:	str	r2, [r4, #20]
   12cf8:	bl	118c8 <malloc@plt>
   12cfc:	mov	r1, r9
   12d00:	str	r0, [r5, #8]
   12d04:	bl	14bdc <init_token_boolean_op@@Base>
   12d08:	ldr	r3, [r4, #24]
   12d0c:	mov	r0, #8
   12d10:	ldr	r2, [r4, #28]
   12d14:	adds	r3, r3, #1
   12d18:	adc	r2, r2, #0
   12d1c:	str	r3, [r4, #24]
   12d20:	str	r2, [r4, #28]
   12d24:	bl	118c8 <malloc@plt>
   12d28:	mov	r1, #1
   12d2c:	str	r0, [r5, #12]
   12d30:	bl	149e8 <init_token_int_value@@Base>
   12d34:	ldr	r3, [r4, #32]
   12d38:	mov	r0, #8
   12d3c:	ldr	r2, [r4, #36]	; 0x24
   12d40:	adds	r3, r3, #1
   12d44:	adc	r2, r2, #0
   12d48:	str	r3, [r4, #32]
   12d4c:	str	r2, [r4, #36]	; 0x24
   12d50:	bl	118c8 <malloc@plt>
   12d54:	mov	r1, r8
   12d58:	str	r0, [r5, #16]
   12d5c:	bl	14bdc <init_token_boolean_op@@Base>
   12d60:	ldr	r3, [r4, #40]	; 0x28
   12d64:	mov	r0, #8
   12d68:	ldr	r2, [r4, #44]	; 0x2c
   12d6c:	adds	r3, r3, #1
   12d70:	adc	r2, r2, #0
   12d74:	str	r3, [r4, #40]	; 0x28
   12d78:	str	r2, [r4, #44]	; 0x2c
   12d7c:	bl	118c8 <malloc@plt>
   12d80:	mov	r1, #4
   12d84:	str	r0, [r5, #20]
   12d88:	bl	149e8 <init_token_int_value@@Base>
   12d8c:	ldr	r3, [r4, #48]	; 0x30
   12d90:	mov	r0, #8
   12d94:	ldr	r2, [r4, #52]	; 0x34
   12d98:	adds	r3, r3, #1
   12d9c:	adc	r2, r2, #0
   12da0:	str	r3, [r4, #48]	; 0x30
   12da4:	str	r2, [r4, #52]	; 0x34
   12da8:	bl	118c8 <malloc@plt>
   12dac:	mov	r1, #4
   12db0:	str	r0, [r5, #24]
   12db4:	bl	149e8 <init_token_int_value@@Base>
   12db8:	ldr	r3, [r4, #56]	; 0x38
   12dbc:	mov	r0, #8
   12dc0:	ldr	r2, [r4, #60]	; 0x3c
   12dc4:	adds	r3, r3, #1
   12dc8:	adc	r2, r2, #0
   12dcc:	str	r3, [r4, #56]	; 0x38
   12dd0:	str	r2, [r4, #60]	; 0x3c
   12dd4:	bl	118c8 <malloc@plt>
   12dd8:	mov	r1, r7
   12ddc:	str	r0, [r5, #28]
   12de0:	bl	14bdc <init_token_boolean_op@@Base>
   12de4:	ldr	r3, [r4, #64]	; 0x40
   12de8:	mov	r0, #8
   12dec:	ldr	r2, [r4, #68]	; 0x44
   12df0:	adds	r3, r3, #1
   12df4:	adc	r2, r2, #0
   12df8:	str	r3, [r4, #64]	; 0x40
   12dfc:	str	r2, [r4, #68]	; 0x44
   12e00:	bl	118c8 <malloc@plt>
   12e04:	mov	r1, #4
   12e08:	str	r0, [r5, #32]
   12e0c:	bl	149e8 <init_token_int_value@@Base>
   12e10:	ldr	r3, [r4, #72]	; 0x48
   12e14:	mov	r0, #4
   12e18:	ldr	r2, [r4, #76]	; 0x4c
   12e1c:	adds	r3, r3, #1
   12e20:	adc	r2, r2, #0
   12e24:	str	r3, [r4, #72]	; 0x48
   12e28:	str	r2, [r4, #76]	; 0x4c
   12e2c:	bl	118c8 <malloc@plt>
   12e30:	str	r0, [r5, #36]	; 0x24
   12e34:	bl	14a7c <init_token_cpar@@Base>
   12e38:	ldr	r3, [r4, #80]	; 0x50
   12e3c:	mov	r1, #10
   12e40:	mov	r0, sp
   12e44:	ldr	r2, [r4, #84]	; 0x54
   12e48:	str	r1, [r6, #220]	; 0xdc
   12e4c:	str	r5, [r6, #228]	; 0xe4
   12e50:	adds	r3, r3, #1
   12e54:	adc	r2, r2, #0
   12e58:	str	r3, [r4, #80]	; 0x50
   12e5c:	str	r2, [r4, #84]	; 0x54
   12e60:	bl	162c4 <read_boolean_expression@@Base>
   12e64:	ldr	r3, [r6, #204]	; 0xcc
   12e68:	cmp	r3, #10
   12e6c:	bne	12eac <boolean_expression_complex@@Base+0x2c4>
   12e70:	ldr	r3, [r0]
   12e74:	cmp	r3, #5
   12e78:	bne	12ee0 <boolean_expression_complex@@Base+0x2f8>
   12e7c:	ldr	r3, [r4, #96]	; 0x60
   12e80:	ldr	r2, [r4, #100]	; 0x64
   12e84:	adds	r3, r3, #1
   12e88:	adc	r2, r2, #0
   12e8c:	str	r3, [r4, #96]	; 0x60
   12e90:	str	r2, [r4, #100]	; 0x64
   12e94:	add	sp, sp, #20
   12e98:	ldrd	r4, [sp]
   12e9c:	ldrd	r6, [sp, #8]
   12ea0:	ldrd	r8, [sp, #16]
   12ea4:	add	sp, sp, #24
   12ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   12eac:	ldr	r3, [r4, #88]	; 0x58
   12eb0:	movw	r1, #37132	; 0x910c
   12eb4:	movt	r1, #1
   12eb8:	movw	r0, #37360	; 0x91f0
   12ebc:	movt	r0, #1
   12ec0:	ldr	lr, [r4, #92]	; 0x5c
   12ec4:	mov	r2, #166	; 0xa6
   12ec8:	adds	ip, r3, #1
   12ecc:	ldr	r3, [pc, #68]	; 12f18 <boolean_expression_complex@@Base+0x330>
   12ed0:	adc	lr, lr, #0
   12ed4:	str	ip, [r4, #88]	; 0x58
   12ed8:	str	lr, [r4, #92]	; 0x5c
   12edc:	bl	119c4 <__assert_fail@plt>
   12ee0:	ldr	r3, [r4, #104]	; 0x68
   12ee4:	movw	r1, #37132	; 0x910c
   12ee8:	movt	r1, #1
   12eec:	movw	r0, #37328	; 0x91d0
   12ef0:	movt	r0, #1
   12ef4:	ldr	lr, [r4, #108]	; 0x6c
   12ef8:	mov	r2, #167	; 0xa7
   12efc:	adds	ip, r3, #1
   12f00:	ldr	r3, [pc, #16]	; 12f18 <boolean_expression_complex@@Base+0x330>
   12f04:	adc	lr, lr, #0
   12f08:	str	ip, [r4, #104]	; 0x68
   12f0c:	str	lr, [r4, #108]	; 0x6c
   12f10:	bl	119c4 <__assert_fail@plt>
   12f14:	andeq	sl, r2, r8, asr #21
   12f18:	strdeq	r8, [r1], -ip

00012f1c <boolean_binary_operator_is_read_properly@@Base>:
   12f1c:	strd	r4, [sp, #-20]!	; 0xffffffec
   12f20:	mov	r0, #3
   12f24:	movw	r5, #47324	; 0xb8dc
   12f28:	movt	r5, #2
   12f2c:	ldr	r4, [pc, #628]	; 131a8 <boolean_binary_operator_is_read_properly@@Base+0x28c>
   12f30:	strd	r6, [sp, #8]
   12f34:	str	lr, [sp, #16]
   12f38:	sub	sp, sp, #20
   12f3c:	ldr	r3, [r4]
   12f40:	ldr	r2, [r4, #4]
   12f44:	adds	r3, r3, #1
   12f48:	adc	r2, r2, #0
   12f4c:	str	r3, [r4]
   12f50:	str	r2, [r4, #4]
   12f54:	bl	118c8 <malloc@plt>
   12f58:	mov	r7, r0
   12f5c:	movw	r2, #15649	; 0x3d21
   12f60:	mov	r3, #0
   12f64:	add	r1, sp, #4
   12f68:	mov	r0, sp
   12f6c:	strh	r2, [r7]
   12f70:	strb	r3, [r7, #2]
   12f74:	bl	15ae4 <init_grammar@@Base>
   12f78:	ldr	r3, [r4, #8]
   12f7c:	mov	r0, #12
   12f80:	ldr	r2, [r4, #12]
   12f84:	adds	r3, r3, #1
   12f88:	adc	r2, r2, #0
   12f8c:	str	r3, [r4, #8]
   12f90:	str	r2, [r4, #12]
   12f94:	bl	118c8 <malloc@plt>
   12f98:	mov	r6, r0
   12f9c:	mov	r0, #8
   12fa0:	bl	118c8 <malloc@plt>
   12fa4:	mov	r1, #2
   12fa8:	str	r0, [r6]
   12fac:	bl	149e8 <init_token_int_value@@Base>
   12fb0:	ldr	r3, [r4, #16]
   12fb4:	mov	r0, #8
   12fb8:	ldr	r2, [r4, #20]
   12fbc:	adds	r3, r3, #1
   12fc0:	adc	r2, r2, #0
   12fc4:	str	r3, [r4, #16]
   12fc8:	str	r2, [r4, #20]
   12fcc:	bl	118c8 <malloc@plt>
   12fd0:	mov	r1, r7
   12fd4:	str	r0, [r6, #4]
   12fd8:	bl	14bdc <init_token_boolean_op@@Base>
   12fdc:	ldr	r3, [r4, #24]
   12fe0:	mov	r0, #8
   12fe4:	ldr	r2, [r4, #28]
   12fe8:	adds	r3, r3, #1
   12fec:	adc	r2, r2, #0
   12ff0:	str	r3, [r4, #24]
   12ff4:	str	r2, [r4, #28]
   12ff8:	bl	118c8 <malloc@plt>
   12ffc:	mov	r1, #1
   13000:	str	r0, [r6, #8]
   13004:	bl	149e8 <init_token_int_value@@Base>
   13008:	ldr	r3, [r4, #32]
   1300c:	mov	r1, #3
   13010:	mov	r0, sp
   13014:	ldr	r2, [r4, #36]	; 0x24
   13018:	str	r1, [r5, #220]	; 0xdc
   1301c:	str	r6, [r5, #228]	; 0xe4
   13020:	adds	r3, r3, #1
   13024:	adc	r2, r2, #0
   13028:	str	r3, [r4, #32]
   1302c:	str	r2, [r4, #36]	; 0x24
   13030:	bl	15ea4 <read_boolean_binary_expression@@Base>
   13034:	ldr	r3, [r5, #204]	; 0xcc
   13038:	cmp	r3, #3
   1303c:	bne	130a4 <boolean_binary_operator_is_read_properly@@Base+0x188>
   13040:	ldr	r3, [r0]
   13044:	cmp	r3, #5
   13048:	bne	13174 <boolean_binary_operator_is_read_properly@@Base+0x258>
   1304c:	ldr	r3, [r0, #8]
   13050:	ldr	r3, [r3]
   13054:	cmp	r3, #1
   13058:	bne	13140 <boolean_binary_operator_is_read_properly@@Base+0x224>
   1305c:	ldr	r3, [r0, #16]
   13060:	cmp	r3, #1
   13064:	bne	1310c <boolean_binary_operator_is_read_properly@@Base+0x1f0>
   13068:	ldr	r3, [r0, #12]
   1306c:	ldr	r3, [r3]
   13070:	cmp	r3, #1
   13074:	bne	130d8 <boolean_binary_operator_is_read_properly@@Base+0x1bc>
   13078:	ldr	r3, [r4, #72]	; 0x48
   1307c:	ldr	r2, [r4, #76]	; 0x4c
   13080:	adds	r3, r3, #1
   13084:	adc	r2, r2, #0
   13088:	str	r3, [r4, #72]	; 0x48
   1308c:	str	r2, [r4, #76]	; 0x4c
   13090:	add	sp, sp, #20
   13094:	ldrd	r4, [sp]
   13098:	ldrd	r6, [sp, #8]
   1309c:	add	sp, sp, #16
   130a0:	pop	{pc}		; (ldr pc, [sp], #4)
   130a4:	ldr	r3, [r4, #40]	; 0x28
   130a8:	movw	r1, #37132	; 0x910c
   130ac:	movt	r1, #1
   130b0:	movw	r0, #37388	; 0x920c
   130b4:	movt	r0, #1
   130b8:	ldr	lr, [r4, #44]	; 0x2c
   130bc:	mov	r2, #200	; 0xc8
   130c0:	adds	ip, r3, #1
   130c4:	ldr	r3, [pc, #224]	; 131ac <boolean_binary_operator_is_read_properly@@Base+0x290>
   130c8:	adc	lr, lr, #0
   130cc:	str	ip, [r4, #40]	; 0x28
   130d0:	str	lr, [r4, #44]	; 0x2c
   130d4:	bl	119c4 <__assert_fail@plt>
   130d8:	ldr	r3, [r4, #80]	; 0x50
   130dc:	movw	r1, #37132	; 0x910c
   130e0:	movt	r1, #1
   130e4:	movw	r0, #37472	; 0x9260
   130e8:	movt	r0, #1
   130ec:	ldr	lr, [r4, #84]	; 0x54
   130f0:	mov	r2, #205	; 0xcd
   130f4:	adds	ip, r3, #1
   130f8:	ldr	r3, [pc, #172]	; 131ac <boolean_binary_operator_is_read_properly@@Base+0x290>
   130fc:	adc	lr, lr, #0
   13100:	str	ip, [r4, #80]	; 0x50
   13104:	str	lr, [r4, #84]	; 0x54
   13108:	bl	119c4 <__assert_fail@plt>
   1310c:	ldr	r3, [r4, #64]	; 0x40
   13110:	movw	r1, #37132	; 0x910c
   13114:	movt	r1, #1
   13118:	movw	r0, #37444	; 0x9244
   1311c:	movt	r0, #1
   13120:	ldr	lr, [r4, #68]	; 0x44
   13124:	mov	r2, #204	; 0xcc
   13128:	adds	ip, r3, #1
   1312c:	ldr	r3, [pc, #120]	; 131ac <boolean_binary_operator_is_read_properly@@Base+0x290>
   13130:	adc	lr, lr, #0
   13134:	str	ip, [r4, #64]	; 0x40
   13138:	str	lr, [r4, #68]	; 0x44
   1313c:	bl	119c4 <__assert_fail@plt>
   13140:	ldr	r3, [r4, #56]	; 0x38
   13144:	movw	r1, #37132	; 0x910c
   13148:	movt	r1, #1
   1314c:	movw	r0, #37416	; 0x9228
   13150:	movt	r0, #1
   13154:	ldr	lr, [r4, #60]	; 0x3c
   13158:	mov	r2, #203	; 0xcb
   1315c:	adds	ip, r3, #1
   13160:	ldr	r3, [pc, #68]	; 131ac <boolean_binary_operator_is_read_properly@@Base+0x290>
   13164:	adc	lr, lr, #0
   13168:	str	ip, [r4, #56]	; 0x38
   1316c:	str	lr, [r4, #60]	; 0x3c
   13170:	bl	119c4 <__assert_fail@plt>
   13174:	ldr	r3, [r4, #48]	; 0x30
   13178:	movw	r1, #37132	; 0x910c
   1317c:	movt	r1, #1
   13180:	movw	r0, #37328	; 0x91d0
   13184:	movt	r0, #1
   13188:	ldr	lr, [r4, #52]	; 0x34
   1318c:	mov	r2, #201	; 0xc9
   13190:	adds	ip, r3, #1
   13194:	ldr	r3, [pc, #16]	; 131ac <boolean_binary_operator_is_read_properly@@Base+0x290>
   13198:	adc	lr, lr, #0
   1319c:	str	ip, [r4, #48]	; 0x30
   131a0:	str	lr, [r4, #52]	; 0x34
   131a4:	bl	119c4 <__assert_fail@plt>
   131a8:	andeq	sl, r2, r8, lsr fp
   131ac:	andeq	r9, r1, r8, lsl r0

000131b0 <boolean_unary_operator_is_read_properly@@Base>:
   131b0:	strd	r4, [sp, #-20]!	; 0xffffffec
   131b4:	mov	r0, #2
   131b8:	movw	r5, #47324	; 0xb8dc
   131bc:	movt	r5, #2
   131c0:	ldr	r4, [pc, #572]	; 13404 <boolean_unary_operator_is_read_properly@@Base+0x254>
   131c4:	strd	r6, [sp, #8]
   131c8:	str	lr, [sp, #16]
   131cc:	sub	sp, sp, #20
   131d0:	ldr	r3, [r4, #-8]
   131d4:	ldr	r2, [r4, #-4]
   131d8:	adds	r3, r3, #1
   131dc:	adc	r2, r2, #0
   131e0:	str	r3, [r4, #-8]
   131e4:	str	r2, [r4, #-4]
   131e8:	bl	118c8 <malloc@plt>
   131ec:	mov	r7, r0
   131f0:	mov	r3, #33	; 0x21
   131f4:	add	r1, sp, #4
   131f8:	mov	r0, sp
   131fc:	strh	r3, [r7]
   13200:	bl	15ae4 <init_grammar@@Base>
   13204:	ldr	r3, [r4]
   13208:	mov	r0, #8
   1320c:	ldr	r2, [r4, #4]
   13210:	adds	r3, r3, #1
   13214:	adc	r2, r2, #0
   13218:	str	r3, [r4]
   1321c:	str	r2, [r4, #4]
   13220:	bl	118c8 <malloc@plt>
   13224:	mov	r6, r0
   13228:	mov	r0, #8
   1322c:	bl	118c8 <malloc@plt>
   13230:	mov	r1, r7
   13234:	str	r0, [r6]
   13238:	bl	14bdc <init_token_boolean_op@@Base>
   1323c:	ldr	r3, [r4, #8]
   13240:	mov	r0, #8
   13244:	ldr	r2, [r4, #12]
   13248:	adds	r3, r3, #1
   1324c:	adc	r2, r2, #0
   13250:	str	r3, [r4, #8]
   13254:	str	r2, [r4, #12]
   13258:	bl	118c8 <malloc@plt>
   1325c:	mov	r1, #1
   13260:	str	r0, [r6, #4]
   13264:	bl	149e8 <init_token_int_value@@Base>
   13268:	ldr	r3, [r4, #16]
   1326c:	mov	r1, #2
   13270:	mov	r0, sp
   13274:	ldr	r2, [r4, #20]
   13278:	str	r1, [r5, #220]	; 0xdc
   1327c:	str	r6, [r5, #228]	; 0xe4
   13280:	adds	r3, r3, #1
   13284:	adc	r2, r2, #0
   13288:	str	r3, [r4, #16]
   1328c:	str	r2, [r4, #20]
   13290:	bl	15cac <read_boolean_unary_expression@@Base>
   13294:	ldr	r3, [r5, #204]	; 0xcc
   13298:	cmp	r3, #2
   1329c:	bne	13300 <boolean_unary_operator_is_read_properly@@Base+0x150>
   132a0:	ldr	r3, [r0]
   132a4:	cmp	r3, #5
   132a8:	bne	133d0 <boolean_unary_operator_is_read_properly@@Base+0x220>
   132ac:	ldr	r3, [r0, #8]
   132b0:	ldr	r3, [r3]
   132b4:	cmp	r3, #1
   132b8:	bne	1339c <boolean_unary_operator_is_read_properly@@Base+0x1ec>
   132bc:	ldr	r3, [r0, #16]
   132c0:	cmp	r3, #8
   132c4:	bne	13368 <boolean_unary_operator_is_read_properly@@Base+0x1b8>
   132c8:	ldr	r3, [r0, #12]
   132cc:	cmp	r3, #0
   132d0:	bne	13334 <boolean_unary_operator_is_read_properly@@Base+0x184>
   132d4:	ldr	r3, [r4, #56]	; 0x38
   132d8:	ldr	r2, [r4, #60]	; 0x3c
   132dc:	adds	r3, r3, #1
   132e0:	adc	r2, r2, #0
   132e4:	str	r3, [r4, #56]	; 0x38
   132e8:	str	r2, [r4, #60]	; 0x3c
   132ec:	add	sp, sp, #20
   132f0:	ldrd	r4, [sp]
   132f4:	ldrd	r6, [sp, #8]
   132f8:	add	sp, sp, #16
   132fc:	pop	{pc}		; (ldr pc, [sp], #4)
   13300:	ldr	r3, [r4, #24]
   13304:	movw	r1, #37132	; 0x910c
   13308:	movt	r1, #1
   1330c:	movw	r0, #37240	; 0x9178
   13310:	movt	r0, #1
   13314:	ldr	lr, [r4, #28]
   13318:	mov	r2, #235	; 0xeb
   1331c:	adds	ip, r3, #1
   13320:	ldr	r3, [pc, #224]	; 13408 <boolean_unary_operator_is_read_properly@@Base+0x258>
   13324:	adc	lr, lr, #0
   13328:	str	ip, [r4, #24]
   1332c:	str	lr, [r4, #28]
   13330:	bl	119c4 <__assert_fail@plt>
   13334:	ldr	r3, [r4, #64]	; 0x40
   13338:	movw	r1, #37132	; 0x910c
   1333c:	movt	r1, #1
   13340:	movw	r0, #37520	; 0x9290
   13344:	movt	r0, #1
   13348:	ldr	lr, [r4, #68]	; 0x44
   1334c:	mov	r2, #240	; 0xf0
   13350:	adds	ip, r3, #1
   13354:	ldr	r3, [pc, #172]	; 13408 <boolean_unary_operator_is_read_properly@@Base+0x258>
   13358:	adc	lr, lr, #0
   1335c:	str	ip, [r4, #64]	; 0x40
   13360:	str	lr, [r4, #68]	; 0x44
   13364:	bl	119c4 <__assert_fail@plt>
   13368:	ldr	r3, [r4, #48]	; 0x30
   1336c:	movw	r1, #37132	; 0x910c
   13370:	movt	r1, #1
   13374:	movw	r0, #37500	; 0x927c
   13378:	movt	r0, #1
   1337c:	ldr	lr, [r4, #52]	; 0x34
   13380:	mov	r2, #239	; 0xef
   13384:	adds	ip, r3, #1
   13388:	ldr	r3, [pc, #120]	; 13408 <boolean_unary_operator_is_read_properly@@Base+0x258>
   1338c:	adc	lr, lr, #0
   13390:	str	ip, [r4, #48]	; 0x30
   13394:	str	lr, [r4, #52]	; 0x34
   13398:	bl	119c4 <__assert_fail@plt>
   1339c:	ldr	r3, [r4, #40]	; 0x28
   133a0:	movw	r1, #37132	; 0x910c
   133a4:	movt	r1, #1
   133a8:	movw	r0, #37416	; 0x9228
   133ac:	movt	r0, #1
   133b0:	ldr	lr, [r4, #44]	; 0x2c
   133b4:	mov	r2, #238	; 0xee
   133b8:	adds	ip, r3, #1
   133bc:	ldr	r3, [pc, #68]	; 13408 <boolean_unary_operator_is_read_properly@@Base+0x258>
   133c0:	adc	lr, lr, #0
   133c4:	str	ip, [r4, #40]	; 0x28
   133c8:	str	lr, [r4, #44]	; 0x2c
   133cc:	bl	119c4 <__assert_fail@plt>
   133d0:	ldr	r3, [r4, #32]
   133d4:	movw	r1, #37132	; 0x910c
   133d8:	movt	r1, #1
   133dc:	movw	r0, #37328	; 0x91d0
   133e0:	movt	r0, #1
   133e4:	ldr	lr, [r4, #36]	; 0x24
   133e8:	mov	r2, #236	; 0xec
   133ec:	adds	ip, r3, #1
   133f0:	ldr	r3, [pc, #16]	; 13408 <boolean_unary_operator_is_read_properly@@Base+0x258>
   133f4:	adc	lr, lr, #0
   133f8:	str	ip, [r4, #32]
   133fc:	str	lr, [r4, #36]	; 0x24
   13400:	bl	119c4 <__assert_fail@plt>
   13404:	muleq	r2, r8, fp
   13408:	andeq	r9, r1, r4, asr #32

0001340c <if_statement_only@@Base>:
   1340c:	strd	r4, [sp, #-20]!	; 0xffffffec
   13410:	ldr	r4, [pc, #744]	; 13700 <if_statement_only@@Base+0x2f4>
   13414:	strd	r6, [sp, #8]
   13418:	movw	r6, #47324	; 0xb8dc
   1341c:	movt	r6, #2
   13420:	str	lr, [sp, #16]
   13424:	sub	sp, sp, #20
   13428:	add	r1, sp, #4
   1342c:	mov	r0, sp
   13430:	ldr	r3, [r4, #-8]
   13434:	ldr	r2, [r4, #-4]
   13438:	adds	r3, r3, #1
   1343c:	adc	r2, r2, #0
   13440:	str	r3, [r4, #-8]
   13444:	str	r2, [r4, #-4]
   13448:	bl	15ae4 <init_grammar@@Base>
   1344c:	ldr	r3, [r4]
   13450:	mov	r0, #3
   13454:	ldr	r2, [r4, #4]
   13458:	adds	r3, r3, #1
   1345c:	adc	r2, r2, #0
   13460:	str	r3, [r4]
   13464:	str	r2, [r4, #4]
   13468:	bl	118c8 <malloc@plt>
   1346c:	mov	r7, r0
   13470:	movw	r2, #15649	; 0x3d21
   13474:	mov	r3, #0
   13478:	mov	r0, #36	; 0x24
   1347c:	strh	r2, [r7]
   13480:	strb	r3, [r7, #2]
   13484:	bl	118c8 <malloc@plt>
   13488:	mov	r5, r0
   1348c:	mov	r0, #4
   13490:	bl	118c8 <malloc@plt>
   13494:	str	r0, [r5]
   13498:	bl	14a50 <init_token_opar@@Base>
   1349c:	ldr	r3, [r4, #8]
   134a0:	mov	r0, #8
   134a4:	ldr	r2, [r4, #12]
   134a8:	adds	r3, r3, #1
   134ac:	adc	r2, r2, #0
   134b0:	str	r3, [r4, #8]
   134b4:	str	r2, [r4, #12]
   134b8:	bl	118c8 <malloc@plt>
   134bc:	mov	r1, #1
   134c0:	str	r0, [r5, #4]
   134c4:	bl	149e8 <init_token_int_value@@Base>
   134c8:	ldr	r3, [r4, #16]
   134cc:	mov	r0, #8
   134d0:	ldr	r2, [r4, #20]
   134d4:	adds	r3, r3, #1
   134d8:	adc	r2, r2, #0
   134dc:	str	r3, [r4, #16]
   134e0:	str	r2, [r4, #20]
   134e4:	bl	118c8 <malloc@plt>
   134e8:	mov	r1, #1
   134ec:	str	r0, [r5, #8]
   134f0:	bl	149e8 <init_token_int_value@@Base>
   134f4:	ldr	r3, [r4, #24]
   134f8:	mov	r0, #8
   134fc:	ldr	r2, [r4, #28]
   13500:	adds	r3, r3, #1
   13504:	adc	r2, r2, #0
   13508:	str	r3, [r4, #24]
   1350c:	str	r2, [r4, #28]
   13510:	bl	118c8 <malloc@plt>
   13514:	mov	r1, r7
   13518:	str	r0, [r5, #12]
   1351c:	bl	14bdc <init_token_boolean_op@@Base>
   13520:	ldr	r3, [r4, #32]
   13524:	mov	r0, #8
   13528:	ldr	r2, [r4, #36]	; 0x24
   1352c:	adds	r3, r3, #1
   13530:	adc	r2, r2, #0
   13534:	str	r3, [r4, #32]
   13538:	str	r2, [r4, #36]	; 0x24
   1353c:	bl	118c8 <malloc@plt>
   13540:	mov	r1, #1
   13544:	str	r0, [r5, #16]
   13548:	bl	149e8 <init_token_int_value@@Base>
   1354c:	ldr	r3, [r4, #40]	; 0x28
   13550:	mov	r0, #4
   13554:	ldr	r2, [r4, #44]	; 0x2c
   13558:	adds	r3, r3, #1
   1355c:	adc	r2, r2, #0
   13560:	str	r3, [r4, #40]	; 0x28
   13564:	str	r2, [r4, #44]	; 0x2c
   13568:	bl	118c8 <malloc@plt>
   1356c:	str	r0, [r5, #20]
   13570:	bl	14a7c <init_token_cpar@@Base>
   13574:	ldr	r3, [r4, #48]	; 0x30
   13578:	mov	r0, #4
   1357c:	ldr	r2, [r4, #52]	; 0x34
   13580:	adds	r3, r3, #1
   13584:	adc	r2, r2, #0
   13588:	str	r3, [r4, #48]	; 0x30
   1358c:	str	r2, [r4, #52]	; 0x34
   13590:	bl	118c8 <malloc@plt>
   13594:	str	r0, [r5, #24]
   13598:	bl	14aa8 <init_token_obra@@Base>
   1359c:	ldr	r3, [r4, #56]	; 0x38
   135a0:	mov	r0, #4
   135a4:	ldr	r2, [r4, #60]	; 0x3c
   135a8:	adds	r3, r3, #1
   135ac:	adc	r2, r2, #0
   135b0:	str	r3, [r4, #56]	; 0x38
   135b4:	str	r2, [r4, #60]	; 0x3c
   135b8:	bl	118c8 <malloc@plt>
   135bc:	str	r0, [r5, #28]
   135c0:	bl	14ad4 <init_token_cbra@@Base>
   135c4:	ldr	r3, [r4, #64]	; 0x40
   135c8:	mov	r0, #4
   135cc:	ldr	r2, [r4, #68]	; 0x44
   135d0:	adds	r3, r3, #1
   135d4:	adc	r2, r2, #0
   135d8:	str	r3, [r4, #64]	; 0x40
   135dc:	str	r2, [r4, #68]	; 0x44
   135e0:	bl	118c8 <malloc@plt>
   135e4:	str	r0, [r5, #32]
   135e8:	bl	14b58 <init_token_eof@@Base>
   135ec:	ldr	r3, [r4, #72]	; 0x48
   135f0:	mov	r1, #9
   135f4:	mov	r0, sp
   135f8:	ldr	r2, [r4, #76]	; 0x4c
   135fc:	str	r1, [r6, #220]	; 0xdc
   13600:	str	r5, [r6, #228]	; 0xe4
   13604:	adds	r3, r3, #1
   13608:	adc	r2, r2, #0
   1360c:	str	r3, [r4, #72]	; 0x48
   13610:	str	r2, [r4, #76]	; 0x4c
   13614:	bl	16504 <read_if_statement@@Base>
   13618:	ldr	r3, [r6, #204]	; 0xcc
   1361c:	cmp	r3, #9
   13620:	bne	13664 <if_statement_only@@Base+0x258>
   13624:	cmp	r0, #0
   13628:	beq	136cc <if_statement_only@@Base+0x2c0>
   1362c:	ldr	r3, [r0]
   13630:	cmp	r3, #4
   13634:	bne	13698 <if_statement_only@@Base+0x28c>
   13638:	ldr	r3, [r4, #96]	; 0x60
   1363c:	ldr	r2, [r4, #100]	; 0x64
   13640:	adds	r3, r3, #1
   13644:	adc	r2, r2, #0
   13648:	str	r3, [r4, #96]	; 0x60
   1364c:	str	r2, [r4, #100]	; 0x64
   13650:	add	sp, sp, #20
   13654:	ldrd	r4, [sp]
   13658:	ldrd	r6, [sp, #8]
   1365c:	add	sp, sp, #16
   13660:	pop	{pc}		; (ldr pc, [sp], #4)
   13664:	ldr	r3, [r4, #80]	; 0x50
   13668:	movw	r1, #37132	; 0x910c
   1366c:	movt	r1, #1
   13670:	movw	r0, #37544	; 0x92a8
   13674:	movt	r0, #1
   13678:	ldr	lr, [r4, #84]	; 0x54
   1367c:	movw	r2, #283	; 0x11b
   13680:	adds	ip, r3, #1
   13684:	ldr	r3, [pc, #120]	; 13704 <if_statement_only@@Base+0x2f8>
   13688:	adc	lr, lr, #0
   1368c:	str	ip, [r4, #80]	; 0x50
   13690:	str	lr, [r4, #84]	; 0x54
   13694:	bl	119c4 <__assert_fail@plt>
   13698:	ldr	r3, [r4, #104]	; 0x68
   1369c:	movw	r1, #37132	; 0x910c
   136a0:	movt	r1, #1
   136a4:	movw	r0, #37584	; 0x92d0
   136a8:	movt	r0, #1
   136ac:	ldr	lr, [r4, #108]	; 0x6c
   136b0:	movw	r2, #285	; 0x11d
   136b4:	adds	ip, r3, #1
   136b8:	ldr	r3, [pc, #68]	; 13704 <if_statement_only@@Base+0x2f8>
   136bc:	adc	lr, lr, #0
   136c0:	str	ip, [r4, #104]	; 0x68
   136c4:	str	lr, [r4, #108]	; 0x6c
   136c8:	bl	119c4 <__assert_fail@plt>
   136cc:	ldr	r3, [r4, #88]	; 0x58
   136d0:	movw	r1, #37132	; 0x910c
   136d4:	movt	r1, #1
   136d8:	movw	r0, #37572	; 0x92c4
   136dc:	movt	r0, #1
   136e0:	ldr	lr, [r4, #92]	; 0x5c
   136e4:	mov	r2, #284	; 0x11c
   136e8:	adds	ip, r3, #1
   136ec:	ldr	r3, [pc, #16]	; 13704 <if_statement_only@@Base+0x2f8>
   136f0:	adc	lr, lr, #0
   136f4:	str	ip, [r4, #88]	; 0x58
   136f8:	str	lr, [r4, #92]	; 0x5c
   136fc:	bl	119c4 <__assert_fail@plt>
   13700:	andeq	sl, r2, r8, ror #23
   13704:	andeq	r9, r1, ip, rrx

00013708 <if_else_statements@@Base>:
   13708:	strd	r4, [sp, #-20]!	; 0xffffffec
   1370c:	ldr	r4, [pc, #824]	; 13a4c <if_else_statements@@Base+0x344>
   13710:	strd	r6, [sp, #8]
   13714:	movw	r6, #47324	; 0xb8dc
   13718:	movt	r6, #2
   1371c:	str	lr, [sp, #16]
   13720:	sub	sp, sp, #20
   13724:	add	r1, sp, #4
   13728:	mov	r0, sp
   1372c:	ldr	r3, [r4]
   13730:	ldr	r2, [r4, #4]
   13734:	adds	r3, r3, #1
   13738:	adc	r2, r2, #0
   1373c:	str	r3, [r4]
   13740:	str	r2, [r4, #4]
   13744:	bl	15ae4 <init_grammar@@Base>
   13748:	ldr	r3, [r4, #8]
   1374c:	mov	r0, #3
   13750:	ldr	r2, [r4, #12]
   13754:	adds	r3, r3, #1
   13758:	adc	r2, r2, #0
   1375c:	str	r3, [r4, #8]
   13760:	str	r2, [r4, #12]
   13764:	bl	118c8 <malloc@plt>
   13768:	mov	r7, r0
   1376c:	movw	r2, #15649	; 0x3d21
   13770:	mov	r3, #0
   13774:	mov	r0, #44	; 0x2c
   13778:	strh	r2, [r7]
   1377c:	strb	r3, [r7, #2]
   13780:	bl	118c8 <malloc@plt>
   13784:	mov	r5, r0
   13788:	mov	r0, #4
   1378c:	bl	118c8 <malloc@plt>
   13790:	str	r0, [r5]
   13794:	bl	14a50 <init_token_opar@@Base>
   13798:	ldr	r3, [r4, #16]
   1379c:	mov	r0, #8
   137a0:	ldr	r2, [r4, #20]
   137a4:	adds	r3, r3, #1
   137a8:	adc	r2, r2, #0
   137ac:	str	r3, [r4, #16]
   137b0:	str	r2, [r4, #20]
   137b4:	bl	118c8 <malloc@plt>
   137b8:	mov	r1, #1
   137bc:	str	r0, [r5, #4]
   137c0:	bl	149e8 <init_token_int_value@@Base>
   137c4:	ldr	r3, [r4, #24]
   137c8:	mov	r0, #8
   137cc:	ldr	r2, [r4, #28]
   137d0:	adds	r3, r3, #1
   137d4:	adc	r2, r2, #0
   137d8:	str	r3, [r4, #24]
   137dc:	str	r2, [r4, #28]
   137e0:	bl	118c8 <malloc@plt>
   137e4:	mov	r1, #1
   137e8:	str	r0, [r5, #8]
   137ec:	bl	149e8 <init_token_int_value@@Base>
   137f0:	ldr	r3, [r4, #32]
   137f4:	mov	r0, #8
   137f8:	ldr	r2, [r4, #36]	; 0x24
   137fc:	adds	r3, r3, #1
   13800:	adc	r2, r2, #0
   13804:	str	r3, [r4, #32]
   13808:	str	r2, [r4, #36]	; 0x24
   1380c:	bl	118c8 <malloc@plt>
   13810:	mov	r1, r7
   13814:	str	r0, [r5, #12]
   13818:	bl	14bdc <init_token_boolean_op@@Base>
   1381c:	ldr	r3, [r4, #40]	; 0x28
   13820:	mov	r0, #8
   13824:	ldr	r2, [r4, #44]	; 0x2c
   13828:	adds	r3, r3, #1
   1382c:	adc	r2, r2, #0
   13830:	str	r3, [r4, #40]	; 0x28
   13834:	str	r2, [r4, #44]	; 0x2c
   13838:	bl	118c8 <malloc@plt>
   1383c:	mov	r1, #1
   13840:	str	r0, [r5, #16]
   13844:	bl	149e8 <init_token_int_value@@Base>
   13848:	ldr	r3, [r4, #48]	; 0x30
   1384c:	mov	r0, #4
   13850:	ldr	r2, [r4, #52]	; 0x34
   13854:	adds	r3, r3, #1
   13858:	adc	r2, r2, #0
   1385c:	str	r3, [r4, #48]	; 0x30
   13860:	str	r2, [r4, #52]	; 0x34
   13864:	bl	118c8 <malloc@plt>
   13868:	str	r0, [r5, #20]
   1386c:	bl	14a7c <init_token_cpar@@Base>
   13870:	ldr	r3, [r4, #56]	; 0x38
   13874:	mov	r0, #4
   13878:	ldr	r2, [r4, #60]	; 0x3c
   1387c:	adds	r3, r3, #1
   13880:	adc	r2, r2, #0
   13884:	str	r3, [r4, #56]	; 0x38
   13888:	str	r2, [r4, #60]	; 0x3c
   1388c:	bl	118c8 <malloc@plt>
   13890:	str	r0, [r5, #24]
   13894:	bl	14aa8 <init_token_obra@@Base>
   13898:	ldr	r3, [r4, #64]	; 0x40
   1389c:	mov	r0, #4
   138a0:	ldr	r2, [r4, #68]	; 0x44
   138a4:	adds	r3, r3, #1
   138a8:	adc	r2, r2, #0
   138ac:	str	r3, [r4, #64]	; 0x40
   138b0:	str	r2, [r4, #68]	; 0x44
   138b4:	bl	118c8 <malloc@plt>
   138b8:	str	r0, [r5, #28]
   138bc:	bl	14ad4 <init_token_cbra@@Base>
   138c0:	ldr	r3, [r4, #72]	; 0x48
   138c4:	mov	r0, #4
   138c8:	ldr	r2, [r4, #76]	; 0x4c
   138cc:	adds	r3, r3, #1
   138d0:	adc	r2, r2, #0
   138d4:	str	r3, [r4, #72]	; 0x48
   138d8:	str	r2, [r4, #76]	; 0x4c
   138dc:	bl	118c8 <malloc@plt>
   138e0:	str	r0, [r5, #32]
   138e4:	bl	14bb0 <init_token_else@@Base>
   138e8:	ldr	r3, [r4, #80]	; 0x50
   138ec:	mov	r0, #4
   138f0:	ldr	r2, [r4, #84]	; 0x54
   138f4:	adds	r3, r3, #1
   138f8:	adc	r2, r2, #0
   138fc:	str	r3, [r4, #80]	; 0x50
   13900:	str	r2, [r4, #84]	; 0x54
   13904:	bl	118c8 <malloc@plt>
   13908:	str	r0, [r5, #36]	; 0x24
   1390c:	bl	14aa8 <init_token_obra@@Base>
   13910:	ldr	r3, [r4, #88]	; 0x58
   13914:	mov	r0, #4
   13918:	ldr	r2, [r4, #92]	; 0x5c
   1391c:	adds	r3, r3, #1
   13920:	adc	r2, r2, #0
   13924:	str	r3, [r4, #88]	; 0x58
   13928:	str	r2, [r4, #92]	; 0x5c
   1392c:	bl	118c8 <malloc@plt>
   13930:	str	r0, [r5, #40]	; 0x28
   13934:	bl	14ad4 <init_token_cbra@@Base>
   13938:	ldr	r3, [r4, #96]	; 0x60
   1393c:	mov	r1, #11
   13940:	mov	r0, sp
   13944:	ldr	r2, [r4, #100]	; 0x64
   13948:	str	r1, [r6, #220]	; 0xdc
   1394c:	str	r5, [r6, #228]	; 0xe4
   13950:	adds	r3, r3, #1
   13954:	adc	r2, r2, #0
   13958:	str	r3, [r4, #96]	; 0x60
   1395c:	str	r2, [r4, #100]	; 0x64
   13960:	bl	16504 <read_if_statement@@Base>
   13964:	ldr	r3, [r6, #204]	; 0xcc
   13968:	cmp	r3, #11
   1396c:	bne	139b0 <if_else_statements@@Base+0x2a8>
   13970:	cmp	r0, #0
   13974:	beq	13a18 <if_else_statements@@Base+0x310>
   13978:	ldr	r3, [r0]
   1397c:	cmp	r3, #4
   13980:	bne	139e4 <if_else_statements@@Base+0x2dc>
   13984:	ldr	r3, [r4, #120]	; 0x78
   13988:	ldr	r2, [r4, #124]	; 0x7c
   1398c:	adds	r3, r3, #1
   13990:	adc	r2, r2, #0
   13994:	str	r3, [r4, #120]	; 0x78
   13998:	str	r2, [r4, #124]	; 0x7c
   1399c:	add	sp, sp, #20
   139a0:	ldrd	r4, [sp]
   139a4:	ldrd	r6, [sp, #8]
   139a8:	add	sp, sp, #16
   139ac:	pop	{pc}		; (ldr pc, [sp], #4)
   139b0:	ldr	r3, [r4, #104]	; 0x68
   139b4:	movw	r1, #37132	; 0x910c
   139b8:	movt	r1, #1
   139bc:	movw	r0, #37604	; 0x92e4
   139c0:	movt	r0, #1
   139c4:	ldr	lr, [r4, #108]	; 0x6c
   139c8:	mov	r2, #332	; 0x14c
   139cc:	adds	ip, r3, #1
   139d0:	ldr	r3, [pc, #120]	; 13a50 <if_else_statements@@Base+0x348>
   139d4:	adc	lr, lr, #0
   139d8:	str	ip, [r4, #104]	; 0x68
   139dc:	str	lr, [r4, #108]	; 0x6c
   139e0:	bl	119c4 <__assert_fail@plt>
   139e4:	ldr	r3, [r4, #128]	; 0x80
   139e8:	movw	r1, #37132	; 0x910c
   139ec:	movt	r1, #1
   139f0:	movw	r0, #37584	; 0x92d0
   139f4:	movt	r0, #1
   139f8:	ldr	lr, [r4, #132]	; 0x84
   139fc:	movw	r2, #334	; 0x14e
   13a00:	adds	ip, r3, #1
   13a04:	ldr	r3, [pc, #68]	; 13a50 <if_else_statements@@Base+0x348>
   13a08:	adc	lr, lr, #0
   13a0c:	str	ip, [r4, #128]	; 0x80
   13a10:	str	lr, [r4, #132]	; 0x84
   13a14:	bl	119c4 <__assert_fail@plt>
   13a18:	ldr	r3, [r4, #112]	; 0x70
   13a1c:	movw	r1, #37132	; 0x910c
   13a20:	movt	r1, #1
   13a24:	movw	r0, #37572	; 0x92c4
   13a28:	movt	r0, #1
   13a2c:	ldr	lr, [r4, #116]	; 0x74
   13a30:	movw	r2, #333	; 0x14d
   13a34:	adds	ip, r3, #1
   13a38:	ldr	r3, [pc, #16]	; 13a50 <if_else_statements@@Base+0x348>
   13a3c:	adc	lr, lr, #0
   13a40:	str	ip, [r4, #112]	; 0x70
   13a44:	str	lr, [r4, #116]	; 0x74
   13a48:	bl	119c4 <__assert_fail@plt>
   13a4c:	andeq	sl, r2, r8, asr ip
   13a50:	andeq	r9, r1, r0, lsl #1

00013a54 <body_with_two_returns@@Base>:
   13a54:	strd	r4, [sp, #-16]!
   13a58:	ldr	r4, [pc, #800]	; 13d80 <body_with_two_returns@@Base+0x32c>
   13a5c:	str	r6, [sp, #8]
   13a60:	movw	r6, #47324	; 0xb8dc
   13a64:	movt	r6, #2
   13a68:	str	lr, [sp, #12]
   13a6c:	sub	sp, sp, #16
   13a70:	add	r1, sp, #4
   13a74:	mov	r0, sp
   13a78:	ldr	r3, [r4, #-8]
   13a7c:	ldr	r2, [r4, #-4]
   13a80:	adds	r3, r3, #1
   13a84:	adc	r2, r2, #0
   13a88:	str	r3, [r4, #-8]
   13a8c:	str	r2, [r4, #-4]
   13a90:	bl	15ae4 <init_grammar@@Base>
   13a94:	ldr	r3, [r4]
   13a98:	mov	r0, #32
   13a9c:	ldr	r2, [r4, #4]
   13aa0:	adds	r3, r3, #1
   13aa4:	adc	r2, r2, #0
   13aa8:	str	r3, [r4]
   13aac:	str	r2, [r4, #4]
   13ab0:	bl	118c8 <malloc@plt>
   13ab4:	mov	r5, r0
   13ab8:	mov	r0, #4
   13abc:	bl	118c8 <malloc@plt>
   13ac0:	str	r0, [r5]
   13ac4:	bl	14aa8 <init_token_obra@@Base>
   13ac8:	ldr	r3, [r4, #8]
   13acc:	mov	r0, #4
   13ad0:	ldr	r2, [r4, #12]
   13ad4:	adds	r3, r3, #1
   13ad8:	adc	r2, r2, #0
   13adc:	str	r3, [r4, #8]
   13ae0:	str	r2, [r4, #12]
   13ae4:	bl	118c8 <malloc@plt>
   13ae8:	str	r0, [r5, #4]
   13aec:	bl	14b00 <init_token_return@@Base>
   13af0:	ldr	r3, [r4, #16]
   13af4:	mov	r0, #8
   13af8:	ldr	r2, [r4, #20]
   13afc:	adds	r3, r3, #1
   13b00:	adc	r2, r2, #0
   13b04:	str	r3, [r4, #16]
   13b08:	str	r2, [r4, #20]
   13b0c:	bl	118c8 <malloc@plt>
   13b10:	mov	r1, #1
   13b14:	str	r0, [r5, #8]
   13b18:	bl	149e8 <init_token_int_value@@Base>
   13b1c:	ldr	r3, [r4, #24]
   13b20:	mov	r0, #4
   13b24:	ldr	r2, [r4, #28]
   13b28:	adds	r3, r3, #1
   13b2c:	adc	r2, r2, #0
   13b30:	str	r3, [r4, #24]
   13b34:	str	r2, [r4, #28]
   13b38:	bl	118c8 <malloc@plt>
   13b3c:	str	r0, [r5, #12]
   13b40:	bl	14b2c <init_token_semicolon@@Base>
   13b44:	ldr	r3, [r4, #32]
   13b48:	mov	r0, #4
   13b4c:	ldr	r2, [r4, #36]	; 0x24
   13b50:	adds	r3, r3, #1
   13b54:	adc	r2, r2, #0
   13b58:	str	r3, [r4, #32]
   13b5c:	str	r2, [r4, #36]	; 0x24
   13b60:	bl	118c8 <malloc@plt>
   13b64:	str	r0, [r5, #16]
   13b68:	bl	14b00 <init_token_return@@Base>
   13b6c:	ldr	r3, [r4, #40]	; 0x28
   13b70:	mov	r0, #8
   13b74:	ldr	r2, [r4, #44]	; 0x2c
   13b78:	adds	r3, r3, #1
   13b7c:	adc	r2, r2, #0
   13b80:	str	r3, [r4, #40]	; 0x28
   13b84:	str	r2, [r4, #44]	; 0x2c
   13b88:	bl	118c8 <malloc@plt>
   13b8c:	mov	r1, #1
   13b90:	str	r0, [r5, #20]
   13b94:	bl	149e8 <init_token_int_value@@Base>
   13b98:	ldr	r3, [r4, #48]	; 0x30
   13b9c:	mov	r0, #4
   13ba0:	ldr	r2, [r4, #52]	; 0x34
   13ba4:	adds	r3, r3, #1
   13ba8:	adc	r2, r2, #0
   13bac:	str	r3, [r4, #48]	; 0x30
   13bb0:	str	r2, [r4, #52]	; 0x34
   13bb4:	bl	118c8 <malloc@plt>
   13bb8:	str	r0, [r5, #24]
   13bbc:	bl	14b2c <init_token_semicolon@@Base>
   13bc0:	ldr	r3, [r4, #56]	; 0x38
   13bc4:	mov	r0, #4
   13bc8:	ldr	r2, [r4, #60]	; 0x3c
   13bcc:	adds	r3, r3, #1
   13bd0:	adc	r2, r2, #0
   13bd4:	str	r3, [r4, #56]	; 0x38
   13bd8:	str	r2, [r4, #60]	; 0x3c
   13bdc:	bl	118c8 <malloc@plt>
   13be0:	str	r0, [r5, #28]
   13be4:	bl	14ad4 <init_token_cbra@@Base>
   13be8:	ldr	r3, [r4, #64]	; 0x40
   13bec:	mov	r1, #8
   13bf0:	mov	r0, sp
   13bf4:	ldr	r2, [r4, #68]	; 0x44
   13bf8:	str	r1, [r6, #220]	; 0xdc
   13bfc:	str	r5, [r6, #228]	; 0xe4
   13c00:	adds	r3, r3, #1
   13c04:	adc	r2, r2, #0
   13c08:	str	r3, [r4, #64]	; 0x40
   13c0c:	str	r2, [r4, #68]	; 0x44
   13c10:	bl	166e4 <read_body@@Base>
   13c14:	ldr	r3, [r6, #204]	; 0xcc
   13c18:	cmp	r3, #8
   13c1c:	bne	13c7c <body_with_two_returns@@Base+0x228>
   13c20:	cmp	r0, #0
   13c24:	beq	13d4c <body_with_two_returns@@Base+0x2f8>
   13c28:	ldr	r3, [r0]
   13c2c:	cmp	r3, #3
   13c30:	bne	13d18 <body_with_two_returns@@Base+0x2c4>
   13c34:	ldr	r3, [r0, #4]
   13c38:	ldr	r2, [r3]
   13c3c:	cmp	r2, #3
   13c40:	bne	13ce4 <body_with_two_returns@@Base+0x290>
   13c44:	ldr	r3, [r3, #4]
   13c48:	cmp	r3, #0
   13c4c:	bne	13cb0 <body_with_two_returns@@Base+0x25c>
   13c50:	ldr	r3, [r4, #104]	; 0x68
   13c54:	ldr	r2, [r4, #108]	; 0x6c
   13c58:	adds	r3, r3, #1
   13c5c:	adc	r2, r2, #0
   13c60:	str	r3, [r4, #104]	; 0x68
   13c64:	str	r2, [r4, #108]	; 0x6c
   13c68:	add	sp, sp, #16
   13c6c:	ldrd	r4, [sp]
   13c70:	ldr	r6, [sp, #8]
   13c74:	add	sp, sp, #12
   13c78:	pop	{pc}		; (ldr pc, [sp], #4)
   13c7c:	ldr	r3, [r4, #72]	; 0x48
   13c80:	movw	r1, #37132	; 0x910c
   13c84:	movt	r1, #1
   13c88:	movw	r0, #37632	; 0x9300
   13c8c:	movt	r0, #1
   13c90:	ldr	lr, [r4, #76]	; 0x4c
   13c94:	movw	r2, #371	; 0x173
   13c98:	adds	ip, r3, #1
   13c9c:	ldr	r3, [pc, #224]	; 13d84 <body_with_two_returns@@Base+0x330>
   13ca0:	adc	lr, lr, #0
   13ca4:	str	ip, [r4, #72]	; 0x48
   13ca8:	str	lr, [r4, #76]	; 0x4c
   13cac:	bl	119c4 <__assert_fail@plt>
   13cb0:	ldr	r3, [r4, #112]	; 0x70
   13cb4:	movw	r1, #37132	; 0x910c
   13cb8:	movt	r1, #1
   13cbc:	movw	r0, #37712	; 0x9350
   13cc0:	movt	r0, #1
   13cc4:	ldr	lr, [r4, #116]	; 0x74
   13cc8:	movw	r2, #375	; 0x177
   13ccc:	adds	ip, r3, #1
   13cd0:	ldr	r3, [pc, #172]	; 13d84 <body_with_two_returns@@Base+0x330>
   13cd4:	adc	lr, lr, #0
   13cd8:	str	ip, [r4, #112]	; 0x70
   13cdc:	str	lr, [r4, #116]	; 0x74
   13ce0:	bl	119c4 <__assert_fail@plt>
   13ce4:	ldr	r3, [r4, #96]	; 0x60
   13ce8:	movw	r1, #37132	; 0x910c
   13cec:	movt	r1, #1
   13cf0:	movw	r0, #37684	; 0x9334
   13cf4:	movt	r0, #1
   13cf8:	ldr	lr, [r4, #100]	; 0x64
   13cfc:	movw	r2, #374	; 0x176
   13d00:	adds	ip, r3, #1
   13d04:	ldr	r3, [pc, #120]	; 13d84 <body_with_two_returns@@Base+0x330>
   13d08:	adc	lr, lr, #0
   13d0c:	str	ip, [r4, #96]	; 0x60
   13d10:	str	lr, [r4, #100]	; 0x64
   13d14:	bl	119c4 <__assert_fail@plt>
   13d18:	ldr	r3, [r4, #88]	; 0x58
   13d1c:	movw	r1, #37132	; 0x910c
   13d20:	movt	r1, #1
   13d24:	movw	r0, #37660	; 0x931c
   13d28:	movt	r0, #1
   13d2c:	ldr	lr, [r4, #92]	; 0x5c
   13d30:	movw	r2, #373	; 0x175
   13d34:	adds	ip, r3, #1
   13d38:	ldr	r3, [pc, #68]	; 13d84 <body_with_two_returns@@Base+0x330>
   13d3c:	adc	lr, lr, #0
   13d40:	str	ip, [r4, #88]	; 0x58
   13d44:	str	lr, [r4, #92]	; 0x5c
   13d48:	bl	119c4 <__assert_fail@plt>
   13d4c:	ldr	r3, [r4, #80]	; 0x50
   13d50:	movw	r1, #37132	; 0x910c
   13d54:	movt	r1, #1
   13d58:	movw	r0, #37572	; 0x92c4
   13d5c:	movt	r0, #1
   13d60:	ldr	lr, [r4, #84]	; 0x54
   13d64:	mov	r2, #372	; 0x174
   13d68:	adds	ip, r3, #1
   13d6c:	ldr	r3, [pc, #16]	; 13d84 <body_with_two_returns@@Base+0x330>
   13d70:	adc	lr, lr, #0
   13d74:	str	ip, [r4, #80]	; 0x50
   13d78:	str	lr, [r4, #84]	; 0x54
   13d7c:	bl	119c4 <__assert_fail@plt>
   13d80:	andeq	sl, r2, r8, ror #25
   13d84:	muleq	r1, r4, r0

00013d88 <body_with_one_return@@Base>:
   13d88:	strd	r4, [sp, #-16]!
   13d8c:	ldr	r4, [pc, #608]	; 13ff4 <body_with_one_return@@Base+0x26c>
   13d90:	str	r6, [sp, #8]
   13d94:	movw	r6, #47324	; 0xb8dc
   13d98:	movt	r6, #2
   13d9c:	str	lr, [sp, #12]
   13da0:	sub	sp, sp, #16
   13da4:	add	r1, sp, #4
   13da8:	mov	r0, sp
   13dac:	ldr	r3, [r4, #-8]
   13db0:	ldr	r2, [r4, #-4]
   13db4:	adds	r3, r3, #1
   13db8:	adc	r2, r2, #0
   13dbc:	str	r3, [r4, #-8]
   13dc0:	str	r2, [r4, #-4]
   13dc4:	bl	15ae4 <init_grammar@@Base>
   13dc8:	ldr	r3, [r4]
   13dcc:	mov	r0, #20
   13dd0:	ldr	r2, [r4, #4]
   13dd4:	adds	r3, r3, #1
   13dd8:	adc	r2, r2, #0
   13ddc:	str	r3, [r4]
   13de0:	str	r2, [r4, #4]
   13de4:	bl	118c8 <malloc@plt>
   13de8:	mov	r5, r0
   13dec:	mov	r0, #4
   13df0:	bl	118c8 <malloc@plt>
   13df4:	str	r0, [r5]
   13df8:	bl	14aa8 <init_token_obra@@Base>
   13dfc:	ldr	r3, [r4, #8]
   13e00:	mov	r0, #4
   13e04:	ldr	r2, [r4, #12]
   13e08:	adds	r3, r3, #1
   13e0c:	adc	r2, r2, #0
   13e10:	str	r3, [r4, #8]
   13e14:	str	r2, [r4, #12]
   13e18:	bl	118c8 <malloc@plt>
   13e1c:	str	r0, [r5, #4]
   13e20:	bl	14b00 <init_token_return@@Base>
   13e24:	ldr	r3, [r4, #16]
   13e28:	mov	r0, #8
   13e2c:	ldr	r2, [r4, #20]
   13e30:	adds	r3, r3, #1
   13e34:	adc	r2, r2, #0
   13e38:	str	r3, [r4, #16]
   13e3c:	str	r2, [r4, #20]
   13e40:	bl	118c8 <malloc@plt>
   13e44:	mov	r1, #1
   13e48:	str	r0, [r5, #8]
   13e4c:	bl	149e8 <init_token_int_value@@Base>
   13e50:	ldr	r3, [r4, #24]
   13e54:	mov	r0, #4
   13e58:	ldr	r2, [r4, #28]
   13e5c:	adds	r3, r3, #1
   13e60:	adc	r2, r2, #0
   13e64:	str	r3, [r4, #24]
   13e68:	str	r2, [r4, #28]
   13e6c:	bl	118c8 <malloc@plt>
   13e70:	str	r0, [r5, #12]
   13e74:	bl	14b2c <init_token_semicolon@@Base>
   13e78:	ldr	r3, [r4, #32]
   13e7c:	mov	r0, #4
   13e80:	ldr	r2, [r4, #36]	; 0x24
   13e84:	adds	r3, r3, #1
   13e88:	adc	r2, r2, #0
   13e8c:	str	r3, [r4, #32]
   13e90:	str	r2, [r4, #36]	; 0x24
   13e94:	bl	118c8 <malloc@plt>
   13e98:	str	r0, [r5, #16]
   13e9c:	bl	14ad4 <init_token_cbra@@Base>
   13ea0:	ldr	r3, [r4, #40]	; 0x28
   13ea4:	mov	r1, #5
   13ea8:	mov	r0, sp
   13eac:	ldr	r2, [r4, #44]	; 0x2c
   13eb0:	str	r1, [r6, #220]	; 0xdc
   13eb4:	str	r5, [r6, #228]	; 0xe4
   13eb8:	adds	r3, r3, #1
   13ebc:	adc	r2, r2, #0
   13ec0:	str	r3, [r4, #40]	; 0x28
   13ec4:	str	r2, [r4, #44]	; 0x2c
   13ec8:	bl	166e4 <read_body@@Base>
   13ecc:	ldr	r3, [r6, #204]	; 0xcc
   13ed0:	cmp	r3, #5
   13ed4:	bne	13f24 <body_with_one_return@@Base+0x19c>
   13ed8:	cmp	r0, #0
   13edc:	beq	13fc0 <body_with_one_return@@Base+0x238>
   13ee0:	ldr	r3, [r0]
   13ee4:	cmp	r3, #3
   13ee8:	bne	13f8c <body_with_one_return@@Base+0x204>
   13eec:	ldr	r3, [r0, #4]
   13ef0:	cmp	r3, #0
   13ef4:	bne	13f58 <body_with_one_return@@Base+0x1d0>
   13ef8:	ldr	r3, [r4, #72]	; 0x48
   13efc:	ldr	r2, [r4, #76]	; 0x4c
   13f00:	adds	r3, r3, #1
   13f04:	adc	r2, r2, #0
   13f08:	str	r3, [r4, #72]	; 0x48
   13f0c:	str	r2, [r4, #76]	; 0x4c
   13f10:	add	sp, sp, #16
   13f14:	ldrd	r4, [sp]
   13f18:	ldr	r6, [sp, #8]
   13f1c:	add	sp, sp, #12
   13f20:	pop	{pc}		; (ldr pc, [sp], #4)
   13f24:	ldr	r3, [r4, #48]	; 0x30
   13f28:	movw	r1, #37132	; 0x910c
   13f2c:	movt	r1, #1
   13f30:	movw	r0, #37268	; 0x9194
   13f34:	movt	r0, #1
   13f38:	ldr	lr, [r4, #52]	; 0x34
   13f3c:	movw	r2, #406	; 0x196
   13f40:	adds	ip, r3, #1
   13f44:	ldr	r3, [pc, #172]	; 13ff8 <body_with_one_return@@Base+0x270>
   13f48:	adc	lr, lr, #0
   13f4c:	str	ip, [r4, #48]	; 0x30
   13f50:	str	lr, [r4, #52]	; 0x34
   13f54:	bl	119c4 <__assert_fail@plt>
   13f58:	ldr	r3, [r4, #80]	; 0x50
   13f5c:	movw	r1, #37132	; 0x910c
   13f60:	movt	r1, #1
   13f64:	movw	r0, #37736	; 0x9368
   13f68:	movt	r0, #1
   13f6c:	ldr	lr, [r4, #84]	; 0x54
   13f70:	movw	r2, #409	; 0x199
   13f74:	adds	ip, r3, #1
   13f78:	ldr	r3, [pc, #120]	; 13ff8 <body_with_one_return@@Base+0x270>
   13f7c:	adc	lr, lr, #0
   13f80:	str	ip, [r4, #80]	; 0x50
   13f84:	str	lr, [r4, #84]	; 0x54
   13f88:	bl	119c4 <__assert_fail@plt>
   13f8c:	ldr	r3, [r4, #64]	; 0x40
   13f90:	movw	r1, #37132	; 0x910c
   13f94:	movt	r1, #1
   13f98:	movw	r0, #37660	; 0x931c
   13f9c:	movt	r0, #1
   13fa0:	ldr	lr, [r4, #68]	; 0x44
   13fa4:	mov	r2, #408	; 0x198
   13fa8:	adds	ip, r3, #1
   13fac:	ldr	r3, [pc, #68]	; 13ff8 <body_with_one_return@@Base+0x270>
   13fb0:	adc	lr, lr, #0
   13fb4:	str	ip, [r4, #64]	; 0x40
   13fb8:	str	lr, [r4, #68]	; 0x44
   13fbc:	bl	119c4 <__assert_fail@plt>
   13fc0:	ldr	r3, [r4, #56]	; 0x38
   13fc4:	movw	r1, #37132	; 0x910c
   13fc8:	movt	r1, #1
   13fcc:	movw	r0, #37572	; 0x92c4
   13fd0:	movt	r0, #1
   13fd4:	ldr	lr, [r4, #60]	; 0x3c
   13fd8:	movw	r2, #407	; 0x197
   13fdc:	adds	ip, r3, #1
   13fe0:	ldr	r3, [pc, #16]	; 13ff8 <body_with_one_return@@Base+0x270>
   13fe4:	adc	lr, lr, #0
   13fe8:	str	ip, [r4, #56]	; 0x38
   13fec:	str	lr, [r4, #60]	; 0x3c
   13ff0:	bl	119c4 <__assert_fail@plt>
   13ff4:	andeq	sl, r2, r8, ror #26
   13ff8:	andeq	r9, r1, ip, lsr #1

00013ffc <if_statement_inside_if_statement@@Base>:
   13ffc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14000:	ldr	r4, [pc, #1188]	; 144ac <if_statement_inside_if_statement@@Base+0x4b0>
   14004:	strd	r6, [sp, #8]
   14008:	movw	r6, #47324	; 0xb8dc
   1400c:	movt	r6, #2
   14010:	str	r8, [sp, #16]
   14014:	str	lr, [sp, #20]
   14018:	sub	sp, sp, #16
   1401c:	add	r1, sp, #4
   14020:	mov	r0, sp
   14024:	ldr	r3, [r4, #-8]
   14028:	ldr	r2, [r4, #-4]
   1402c:	adds	r3, r3, #1
   14030:	adc	r2, r2, #0
   14034:	str	r3, [r4, #-8]
   14038:	str	r2, [r4, #-4]
   1403c:	bl	15ae4 <init_grammar@@Base>
   14040:	ldr	r3, [r4]
   14044:	mov	r0, #3
   14048:	ldr	r2, [r4, #4]
   1404c:	adds	r3, r3, #1
   14050:	adc	r2, r2, #0
   14054:	str	r3, [r4]
   14058:	str	r2, [r4, #4]
   1405c:	bl	118c8 <malloc@plt>
   14060:	mov	r8, r0
   14064:	mov	r0, #3
   14068:	bl	118c8 <malloc@plt>
   1406c:	mov	r7, r0
   14070:	movw	r2, #15649	; 0x3d21
   14074:	mov	r3, #0
   14078:	mov	r0, #76	; 0x4c
   1407c:	strh	r2, [r7]
   14080:	strh	r2, [r8]
   14084:	strb	r3, [r7, #2]
   14088:	strb	r3, [r8, #2]
   1408c:	bl	118c8 <malloc@plt>
   14090:	mov	r5, r0
   14094:	mov	r0, #4
   14098:	bl	118c8 <malloc@plt>
   1409c:	str	r0, [r5]
   140a0:	bl	14a50 <init_token_opar@@Base>
   140a4:	ldr	r3, [r4, #8]
   140a8:	mov	r0, #8
   140ac:	ldr	r2, [r4, #12]
   140b0:	adds	r3, r3, #1
   140b4:	adc	r2, r2, #0
   140b8:	str	r3, [r4, #8]
   140bc:	str	r2, [r4, #12]
   140c0:	bl	118c8 <malloc@plt>
   140c4:	mov	r1, #1
   140c8:	str	r0, [r5, #4]
   140cc:	bl	149e8 <init_token_int_value@@Base>
   140d0:	ldr	r3, [r4, #16]
   140d4:	mov	r0, #8
   140d8:	ldr	r2, [r4, #20]
   140dc:	adds	r3, r3, #1
   140e0:	adc	r2, r2, #0
   140e4:	str	r3, [r4, #16]
   140e8:	str	r2, [r4, #20]
   140ec:	bl	118c8 <malloc@plt>
   140f0:	mov	r1, #1
   140f4:	str	r0, [r5, #8]
   140f8:	bl	149e8 <init_token_int_value@@Base>
   140fc:	ldr	r3, [r4, #24]
   14100:	mov	r0, #8
   14104:	ldr	r2, [r4, #28]
   14108:	adds	r3, r3, #1
   1410c:	adc	r2, r2, #0
   14110:	str	r3, [r4, #24]
   14114:	str	r2, [r4, #28]
   14118:	bl	118c8 <malloc@plt>
   1411c:	mov	r1, r8
   14120:	str	r0, [r5, #12]
   14124:	bl	14bdc <init_token_boolean_op@@Base>
   14128:	ldr	r3, [r4, #32]
   1412c:	mov	r0, #8
   14130:	ldr	r2, [r4, #36]	; 0x24
   14134:	adds	r3, r3, #1
   14138:	adc	r2, r2, #0
   1413c:	str	r3, [r4, #32]
   14140:	str	r2, [r4, #36]	; 0x24
   14144:	bl	118c8 <malloc@plt>
   14148:	mov	r1, #1
   1414c:	str	r0, [r5, #16]
   14150:	bl	149e8 <init_token_int_value@@Base>
   14154:	ldr	r3, [r4, #40]	; 0x28
   14158:	mov	r0, #4
   1415c:	ldr	r2, [r4, #44]	; 0x2c
   14160:	adds	r3, r3, #1
   14164:	adc	r2, r2, #0
   14168:	str	r3, [r4, #40]	; 0x28
   1416c:	str	r2, [r4, #44]	; 0x2c
   14170:	bl	118c8 <malloc@plt>
   14174:	str	r0, [r5, #20]
   14178:	bl	14a7c <init_token_cpar@@Base>
   1417c:	ldr	r3, [r4, #48]	; 0x30
   14180:	mov	r0, #4
   14184:	ldr	r2, [r4, #52]	; 0x34
   14188:	adds	r3, r3, #1
   1418c:	adc	r2, r2, #0
   14190:	str	r3, [r4, #48]	; 0x30
   14194:	str	r2, [r4, #52]	; 0x34
   14198:	bl	118c8 <malloc@plt>
   1419c:	str	r0, [r5, #24]
   141a0:	bl	14aa8 <init_token_obra@@Base>
   141a4:	ldr	r3, [r4, #56]	; 0x38
   141a8:	mov	r0, #4
   141ac:	ldr	r2, [r4, #60]	; 0x3c
   141b0:	adds	r3, r3, #1
   141b4:	adc	r2, r2, #0
   141b8:	str	r3, [r4, #56]	; 0x38
   141bc:	str	r2, [r4, #60]	; 0x3c
   141c0:	bl	118c8 <malloc@plt>
   141c4:	str	r0, [r5, #28]
   141c8:	bl	14b84 <init_token_if@@Base>
   141cc:	ldr	r3, [r4, #64]	; 0x40
   141d0:	mov	r0, #4
   141d4:	ldr	r2, [r4, #68]	; 0x44
   141d8:	adds	r3, r3, #1
   141dc:	adc	r2, r2, #0
   141e0:	str	r3, [r4, #64]	; 0x40
   141e4:	str	r2, [r4, #68]	; 0x44
   141e8:	bl	118c8 <malloc@plt>
   141ec:	str	r0, [r5, #32]
   141f0:	bl	14a50 <init_token_opar@@Base>
   141f4:	ldr	r3, [r4, #72]	; 0x48
   141f8:	mov	r0, #8
   141fc:	ldr	r2, [r4, #76]	; 0x4c
   14200:	adds	r3, r3, #1
   14204:	adc	r2, r2, #0
   14208:	str	r3, [r4, #72]	; 0x48
   1420c:	str	r2, [r4, #76]	; 0x4c
   14210:	bl	118c8 <malloc@plt>
   14214:	mov	r1, #1
   14218:	str	r0, [r5, #36]	; 0x24
   1421c:	bl	149e8 <init_token_int_value@@Base>
   14220:	ldr	r3, [r4, #80]	; 0x50
   14224:	mov	r0, #8
   14228:	ldr	r2, [r4, #84]	; 0x54
   1422c:	adds	r3, r3, #1
   14230:	adc	r2, r2, #0
   14234:	str	r3, [r4, #80]	; 0x50
   14238:	str	r2, [r4, #84]	; 0x54
   1423c:	bl	118c8 <malloc@plt>
   14240:	mov	r1, #1
   14244:	str	r0, [r5, #40]	; 0x28
   14248:	bl	149e8 <init_token_int_value@@Base>
   1424c:	ldr	r3, [r4, #88]	; 0x58
   14250:	mov	r0, #8
   14254:	ldr	r2, [r4, #92]	; 0x5c
   14258:	adds	r3, r3, #1
   1425c:	adc	r2, r2, #0
   14260:	str	r3, [r4, #88]	; 0x58
   14264:	str	r2, [r4, #92]	; 0x5c
   14268:	bl	118c8 <malloc@plt>
   1426c:	mov	r1, r7
   14270:	str	r0, [r5, #44]	; 0x2c
   14274:	bl	14bdc <init_token_boolean_op@@Base>
   14278:	ldr	r3, [r4, #96]	; 0x60
   1427c:	mov	r0, #8
   14280:	ldr	r2, [r4, #100]	; 0x64
   14284:	adds	r3, r3, #1
   14288:	adc	r2, r2, #0
   1428c:	str	r3, [r4, #96]	; 0x60
   14290:	str	r2, [r4, #100]	; 0x64
   14294:	bl	118c8 <malloc@plt>
   14298:	mov	r1, #1
   1429c:	str	r0, [r5, #48]	; 0x30
   142a0:	bl	149e8 <init_token_int_value@@Base>
   142a4:	ldr	r3, [r4, #104]	; 0x68
   142a8:	mov	r0, #4
   142ac:	ldr	r2, [r4, #108]	; 0x6c
   142b0:	adds	r3, r3, #1
   142b4:	adc	r2, r2, #0
   142b8:	str	r3, [r4, #104]	; 0x68
   142bc:	str	r2, [r4, #108]	; 0x6c
   142c0:	bl	118c8 <malloc@plt>
   142c4:	str	r0, [r5, #52]	; 0x34
   142c8:	bl	14a7c <init_token_cpar@@Base>
   142cc:	ldr	r3, [r4, #112]	; 0x70
   142d0:	mov	r0, #4
   142d4:	ldr	r2, [r4, #116]	; 0x74
   142d8:	adds	r3, r3, #1
   142dc:	adc	r2, r2, #0
   142e0:	str	r3, [r4, #112]	; 0x70
   142e4:	str	r2, [r4, #116]	; 0x74
   142e8:	bl	118c8 <malloc@plt>
   142ec:	str	r0, [r5, #56]	; 0x38
   142f0:	bl	14aa8 <init_token_obra@@Base>
   142f4:	ldr	r3, [r4, #120]	; 0x78
   142f8:	mov	r0, #4
   142fc:	ldr	r2, [r4, #124]	; 0x7c
   14300:	adds	r3, r3, #1
   14304:	adc	r2, r2, #0
   14308:	str	r3, [r4, #120]	; 0x78
   1430c:	str	r2, [r4, #124]	; 0x7c
   14310:	bl	118c8 <malloc@plt>
   14314:	str	r0, [r5, #60]	; 0x3c
   14318:	bl	14ad4 <init_token_cbra@@Base>
   1431c:	ldr	r3, [r4, #128]	; 0x80
   14320:	mov	r0, #4
   14324:	ldr	r2, [r4, #132]	; 0x84
   14328:	adds	r3, r3, #1
   1432c:	adc	r2, r2, #0
   14330:	str	r3, [r4, #128]	; 0x80
   14334:	str	r2, [r4, #132]	; 0x84
   14338:	bl	118c8 <malloc@plt>
   1433c:	str	r0, [r5, #64]	; 0x40
   14340:	bl	14ad4 <init_token_cbra@@Base>
   14344:	ldr	r3, [r4, #136]	; 0x88
   14348:	mov	r0, #4
   1434c:	ldr	r2, [r4, #140]	; 0x8c
   14350:	adds	r3, r3, #1
   14354:	adc	r2, r2, #0
   14358:	str	r3, [r4, #136]	; 0x88
   1435c:	str	r2, [r4, #140]	; 0x8c
   14360:	bl	118c8 <malloc@plt>
   14364:	str	r0, [r5, #68]	; 0x44
   14368:	bl	14ad4 <init_token_cbra@@Base>
   1436c:	ldr	r3, [r4, #144]	; 0x90
   14370:	mov	r0, #4
   14374:	ldr	r2, [r4, #148]	; 0x94
   14378:	adds	r3, r3, #1
   1437c:	adc	r2, r2, #0
   14380:	str	r3, [r4, #144]	; 0x90
   14384:	str	r2, [r4, #148]	; 0x94
   14388:	bl	118c8 <malloc@plt>
   1438c:	str	r0, [r5, #72]	; 0x48
   14390:	bl	14b58 <init_token_eof@@Base>
   14394:	ldr	r3, [r4, #152]	; 0x98
   14398:	mov	r1, #19
   1439c:	mov	r0, sp
   143a0:	ldr	r2, [r4, #156]	; 0x9c
   143a4:	str	r1, [r6, #220]	; 0xdc
   143a8:	str	r5, [r6, #228]	; 0xe4
   143ac:	adds	r3, r3, #1
   143b0:	adc	r2, r2, #0
   143b4:	str	r3, [r4, #152]	; 0x98
   143b8:	str	r2, [r4, #156]	; 0x9c
   143bc:	bl	16504 <read_if_statement@@Base>
   143c0:	ldr	r3, [r6, #204]	; 0xcc
   143c4:	cmp	r3, #19
   143c8:	bne	14410 <if_statement_inside_if_statement@@Base+0x414>
   143cc:	cmp	r0, #0
   143d0:	beq	14478 <if_statement_inside_if_statement@@Base+0x47c>
   143d4:	ldr	r3, [r0]
   143d8:	cmp	r3, #4
   143dc:	bne	14444 <if_statement_inside_if_statement@@Base+0x448>
   143e0:	ldr	r3, [r4, #176]	; 0xb0
   143e4:	ldr	r2, [r4, #180]	; 0xb4
   143e8:	adds	r3, r3, #1
   143ec:	adc	r2, r2, #0
   143f0:	str	r3, [r4, #176]	; 0xb0
   143f4:	str	r2, [r4, #180]	; 0xb4
   143f8:	add	sp, sp, #16
   143fc:	ldrd	r4, [sp]
   14400:	ldrd	r6, [sp, #8]
   14404:	ldr	r8, [sp, #16]
   14408:	add	sp, sp, #20
   1440c:	pop	{pc}		; (ldr pc, [sp], #4)
   14410:	ldr	r3, [r4, #160]	; 0xa0
   14414:	movw	r1, #37132	; 0x910c
   14418:	movt	r1, #1
   1441c:	movw	r0, #37756	; 0x937c
   14420:	movt	r0, #1
   14424:	ldr	lr, [r4, #164]	; 0xa4
   14428:	mov	r2, #480	; 0x1e0
   1442c:	adds	ip, r3, #1
   14430:	ldr	r3, [pc, #120]	; 144b0 <if_statement_inside_if_statement@@Base+0x4b4>
   14434:	adc	lr, lr, #0
   14438:	str	ip, [r4, #160]	; 0xa0
   1443c:	str	lr, [r4, #164]	; 0xa4
   14440:	bl	119c4 <__assert_fail@plt>
   14444:	ldr	r3, [r4, #184]	; 0xb8
   14448:	movw	r1, #37132	; 0x910c
   1444c:	movt	r1, #1
   14450:	movw	r0, #37584	; 0x92d0
   14454:	movt	r0, #1
   14458:	ldr	lr, [r4, #188]	; 0xbc
   1445c:	movw	r2, #482	; 0x1e2
   14460:	adds	ip, r3, #1
   14464:	ldr	r3, [pc, #68]	; 144b0 <if_statement_inside_if_statement@@Base+0x4b4>
   14468:	adc	lr, lr, #0
   1446c:	str	ip, [r4, #184]	; 0xb8
   14470:	str	lr, [r4, #188]	; 0xbc
   14474:	bl	119c4 <__assert_fail@plt>
   14478:	ldr	r3, [r4, #168]	; 0xa8
   1447c:	movw	r1, #37132	; 0x910c
   14480:	movt	r1, #1
   14484:	movw	r0, #37572	; 0x92c4
   14488:	movt	r0, #1
   1448c:	ldr	lr, [r4, #172]	; 0xac
   14490:	movw	r2, #481	; 0x1e1
   14494:	adds	ip, r3, #1
   14498:	ldr	r3, [pc, #16]	; 144b0 <if_statement_inside_if_statement@@Base+0x4b4>
   1449c:	adc	lr, lr, #0
   144a0:	str	ip, [r4, #168]	; 0xa8
   144a4:	str	lr, [r4, #172]	; 0xac
   144a8:	bl	119c4 <__assert_fail@plt>
   144ac:	andeq	sl, r2, r8, asr #27
   144b0:	andeq	r9, r1, r4, asr #1

000144b4 <if_statement_inside_else_statement@@Base>:
   144b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   144b8:	ldr	r4, [pc, #1268]	; 149b4 <if_statement_inside_else_statement@@Base+0x500>
   144bc:	strd	r6, [sp, #8]
   144c0:	movw	r6, #47324	; 0xb8dc
   144c4:	movt	r6, #2
   144c8:	str	r8, [sp, #16]
   144cc:	str	lr, [sp, #20]
   144d0:	sub	sp, sp, #16
   144d4:	add	r1, sp, #4
   144d8:	mov	r0, sp
   144dc:	ldr	r3, [r4]
   144e0:	ldr	r2, [r4, #4]
   144e4:	adds	r3, r3, #1
   144e8:	adc	r2, r2, #0
   144ec:	str	r3, [r4]
   144f0:	str	r2, [r4, #4]
   144f4:	bl	15ae4 <init_grammar@@Base>
   144f8:	ldr	r3, [r4, #8]
   144fc:	mov	r0, #3
   14500:	ldr	r2, [r4, #12]
   14504:	adds	r3, r3, #1
   14508:	adc	r2, r2, #0
   1450c:	str	r3, [r4, #8]
   14510:	str	r2, [r4, #12]
   14514:	bl	118c8 <malloc@plt>
   14518:	mov	r8, r0
   1451c:	mov	r0, #3
   14520:	bl	118c8 <malloc@plt>
   14524:	mov	r7, r0
   14528:	movw	r2, #15649	; 0x3d21
   1452c:	mov	r3, #0
   14530:	mov	r0, #84	; 0x54
   14534:	strh	r2, [r7]
   14538:	strh	r2, [r8]
   1453c:	strb	r3, [r7, #2]
   14540:	strb	r3, [r8, #2]
   14544:	bl	118c8 <malloc@plt>
   14548:	mov	r5, r0
   1454c:	mov	r0, #4
   14550:	bl	118c8 <malloc@plt>
   14554:	str	r0, [r5]
   14558:	bl	14a50 <init_token_opar@@Base>
   1455c:	ldr	r3, [r4, #16]
   14560:	mov	r0, #8
   14564:	ldr	r2, [r4, #20]
   14568:	adds	r3, r3, #1
   1456c:	adc	r2, r2, #0
   14570:	str	r3, [r4, #16]
   14574:	str	r2, [r4, #20]
   14578:	bl	118c8 <malloc@plt>
   1457c:	mov	r1, #1
   14580:	str	r0, [r5, #4]
   14584:	bl	149e8 <init_token_int_value@@Base>
   14588:	ldr	r3, [r4, #24]
   1458c:	mov	r0, #8
   14590:	ldr	r2, [r4, #28]
   14594:	adds	r3, r3, #1
   14598:	adc	r2, r2, #0
   1459c:	str	r3, [r4, #24]
   145a0:	str	r2, [r4, #28]
   145a4:	bl	118c8 <malloc@plt>
   145a8:	mov	r1, #1
   145ac:	str	r0, [r5, #8]
   145b0:	bl	149e8 <init_token_int_value@@Base>
   145b4:	ldr	r3, [r4, #32]
   145b8:	mov	r0, #8
   145bc:	ldr	r2, [r4, #36]	; 0x24
   145c0:	adds	r3, r3, #1
   145c4:	adc	r2, r2, #0
   145c8:	str	r3, [r4, #32]
   145cc:	str	r2, [r4, #36]	; 0x24
   145d0:	bl	118c8 <malloc@plt>
   145d4:	mov	r1, r8
   145d8:	str	r0, [r5, #12]
   145dc:	bl	14bdc <init_token_boolean_op@@Base>
   145e0:	ldr	r3, [r4, #40]	; 0x28
   145e4:	mov	r0, #8
   145e8:	ldr	r2, [r4, #44]	; 0x2c
   145ec:	adds	r3, r3, #1
   145f0:	adc	r2, r2, #0
   145f4:	str	r3, [r4, #40]	; 0x28
   145f8:	str	r2, [r4, #44]	; 0x2c
   145fc:	bl	118c8 <malloc@plt>
   14600:	mov	r1, #1
   14604:	str	r0, [r5, #16]
   14608:	bl	149e8 <init_token_int_value@@Base>
   1460c:	ldr	r3, [r4, #48]	; 0x30
   14610:	mov	r0, #4
   14614:	ldr	r2, [r4, #52]	; 0x34
   14618:	adds	r3, r3, #1
   1461c:	adc	r2, r2, #0
   14620:	str	r3, [r4, #48]	; 0x30
   14624:	str	r2, [r4, #52]	; 0x34
   14628:	bl	118c8 <malloc@plt>
   1462c:	str	r0, [r5, #20]
   14630:	bl	14a7c <init_token_cpar@@Base>
   14634:	ldr	r3, [r4, #56]	; 0x38
   14638:	mov	r0, #4
   1463c:	ldr	r2, [r4, #60]	; 0x3c
   14640:	adds	r3, r3, #1
   14644:	adc	r2, r2, #0
   14648:	str	r3, [r4, #56]	; 0x38
   1464c:	str	r2, [r4, #60]	; 0x3c
   14650:	bl	118c8 <malloc@plt>
   14654:	str	r0, [r5, #24]
   14658:	bl	14aa8 <init_token_obra@@Base>
   1465c:	ldr	r3, [r4, #64]	; 0x40
   14660:	mov	r0, #4
   14664:	ldr	r2, [r4, #68]	; 0x44
   14668:	adds	r3, r3, #1
   1466c:	adc	r2, r2, #0
   14670:	str	r3, [r4, #64]	; 0x40
   14674:	str	r2, [r4, #68]	; 0x44
   14678:	bl	118c8 <malloc@plt>
   1467c:	str	r0, [r5, #28]
   14680:	bl	14ad4 <init_token_cbra@@Base>
   14684:	ldr	r3, [r4, #72]	; 0x48
   14688:	mov	r0, #4
   1468c:	ldr	r2, [r4, #76]	; 0x4c
   14690:	adds	r3, r3, #1
   14694:	adc	r2, r2, #0
   14698:	str	r3, [r4, #72]	; 0x48
   1469c:	str	r2, [r4, #76]	; 0x4c
   146a0:	bl	118c8 <malloc@plt>
   146a4:	str	r0, [r5, #32]
   146a8:	bl	14bb0 <init_token_else@@Base>
   146ac:	ldr	r3, [r4, #80]	; 0x50
   146b0:	mov	r0, #4
   146b4:	ldr	r2, [r4, #84]	; 0x54
   146b8:	adds	r3, r3, #1
   146bc:	adc	r2, r2, #0
   146c0:	str	r3, [r4, #80]	; 0x50
   146c4:	str	r2, [r4, #84]	; 0x54
   146c8:	bl	118c8 <malloc@plt>
   146cc:	str	r0, [r5, #36]	; 0x24
   146d0:	bl	14aa8 <init_token_obra@@Base>
   146d4:	ldr	r3, [r4, #88]	; 0x58
   146d8:	mov	r0, #4
   146dc:	ldr	r2, [r4, #92]	; 0x5c
   146e0:	adds	r3, r3, #1
   146e4:	adc	r2, r2, #0
   146e8:	str	r3, [r4, #88]	; 0x58
   146ec:	str	r2, [r4, #92]	; 0x5c
   146f0:	bl	118c8 <malloc@plt>
   146f4:	str	r0, [r5, #40]	; 0x28
   146f8:	bl	14b84 <init_token_if@@Base>
   146fc:	ldr	r3, [r4, #96]	; 0x60
   14700:	mov	r0, #4
   14704:	ldr	r2, [r4, #100]	; 0x64
   14708:	adds	r3, r3, #1
   1470c:	adc	r2, r2, #0
   14710:	str	r3, [r4, #96]	; 0x60
   14714:	str	r2, [r4, #100]	; 0x64
   14718:	bl	118c8 <malloc@plt>
   1471c:	str	r0, [r5, #44]	; 0x2c
   14720:	bl	14a50 <init_token_opar@@Base>
   14724:	ldr	r3, [r4, #104]	; 0x68
   14728:	mov	r0, #8
   1472c:	ldr	r2, [r4, #108]	; 0x6c
   14730:	adds	r3, r3, #1
   14734:	adc	r2, r2, #0
   14738:	str	r3, [r4, #104]	; 0x68
   1473c:	str	r2, [r4, #108]	; 0x6c
   14740:	bl	118c8 <malloc@plt>
   14744:	mov	r1, #1
   14748:	str	r0, [r5, #48]	; 0x30
   1474c:	bl	149e8 <init_token_int_value@@Base>
   14750:	ldr	r3, [r4, #112]	; 0x70
   14754:	mov	r0, #8
   14758:	ldr	r2, [r4, #116]	; 0x74
   1475c:	adds	r3, r3, #1
   14760:	adc	r2, r2, #0
   14764:	str	r3, [r4, #112]	; 0x70
   14768:	str	r2, [r4, #116]	; 0x74
   1476c:	bl	118c8 <malloc@plt>
   14770:	mov	r1, #1
   14774:	str	r0, [r5, #52]	; 0x34
   14778:	bl	149e8 <init_token_int_value@@Base>
   1477c:	ldr	r3, [r4, #120]	; 0x78
   14780:	mov	r0, #8
   14784:	ldr	r2, [r4, #124]	; 0x7c
   14788:	adds	r3, r3, #1
   1478c:	adc	r2, r2, #0
   14790:	str	r3, [r4, #120]	; 0x78
   14794:	str	r2, [r4, #124]	; 0x7c
   14798:	bl	118c8 <malloc@plt>
   1479c:	mov	r1, r7
   147a0:	str	r0, [r5, #56]	; 0x38
   147a4:	bl	14bdc <init_token_boolean_op@@Base>
   147a8:	ldr	r3, [r4, #128]	; 0x80
   147ac:	mov	r0, #8
   147b0:	ldr	r2, [r4, #132]	; 0x84
   147b4:	adds	r3, r3, #1
   147b8:	adc	r2, r2, #0
   147bc:	str	r3, [r4, #128]	; 0x80
   147c0:	str	r2, [r4, #132]	; 0x84
   147c4:	bl	118c8 <malloc@plt>
   147c8:	mov	r1, #1
   147cc:	str	r0, [r5, #60]	; 0x3c
   147d0:	bl	149e8 <init_token_int_value@@Base>
   147d4:	ldr	r3, [r4, #136]	; 0x88
   147d8:	mov	r0, #4
   147dc:	ldr	r2, [r4, #140]	; 0x8c
   147e0:	adds	r3, r3, #1
   147e4:	adc	r2, r2, #0
   147e8:	str	r3, [r4, #136]	; 0x88
   147ec:	str	r2, [r4, #140]	; 0x8c
   147f0:	bl	118c8 <malloc@plt>
   147f4:	str	r0, [r5, #64]	; 0x40
   147f8:	bl	14a7c <init_token_cpar@@Base>
   147fc:	ldr	r3, [r4, #144]	; 0x90
   14800:	mov	r0, #4
   14804:	ldr	r2, [r4, #148]	; 0x94
   14808:	adds	r3, r3, #1
   1480c:	adc	r2, r2, #0
   14810:	str	r3, [r4, #144]	; 0x90
   14814:	str	r2, [r4, #148]	; 0x94
   14818:	bl	118c8 <malloc@plt>
   1481c:	str	r0, [r5, #68]	; 0x44
   14820:	bl	14aa8 <init_token_obra@@Base>
   14824:	ldr	r3, [r4, #152]	; 0x98
   14828:	mov	r0, #4
   1482c:	ldr	r2, [r4, #156]	; 0x9c
   14830:	adds	r3, r3, #1
   14834:	adc	r2, r2, #0
   14838:	str	r3, [r4, #152]	; 0x98
   1483c:	str	r2, [r4, #156]	; 0x9c
   14840:	bl	118c8 <malloc@plt>
   14844:	str	r0, [r5, #72]	; 0x48
   14848:	bl	14ad4 <init_token_cbra@@Base>
   1484c:	ldr	r3, [r4, #160]	; 0xa0
   14850:	mov	r0, #4
   14854:	ldr	r2, [r4, #164]	; 0xa4
   14858:	adds	r3, r3, #1
   1485c:	adc	r2, r2, #0
   14860:	str	r3, [r4, #160]	; 0xa0
   14864:	str	r2, [r4, #164]	; 0xa4
   14868:	bl	118c8 <malloc@plt>
   1486c:	str	r0, [r5, #76]	; 0x4c
   14870:	bl	14ad4 <init_token_cbra@@Base>
   14874:	ldr	r3, [r4, #168]	; 0xa8
   14878:	mov	r0, #4
   1487c:	ldr	r2, [r4, #172]	; 0xac
   14880:	adds	r3, r3, #1
   14884:	adc	r2, r2, #0
   14888:	str	r3, [r4, #168]	; 0xa8
   1488c:	str	r2, [r4, #172]	; 0xac
   14890:	bl	118c8 <malloc@plt>
   14894:	str	r0, [r5, #80]	; 0x50
   14898:	bl	14ad4 <init_token_cbra@@Base>
   1489c:	ldr	r3, [r4, #176]	; 0xb0
   148a0:	mov	r1, #21
   148a4:	mov	r0, sp
   148a8:	ldr	r2, [r4, #180]	; 0xb4
   148ac:	str	r1, [r6, #220]	; 0xdc
   148b0:	str	r5, [r6, #228]	; 0xe4
   148b4:	adds	r3, r3, #1
   148b8:	adc	r2, r2, #0
   148bc:	str	r3, [r4, #176]	; 0xb0
   148c0:	str	r2, [r4, #180]	; 0xb4
   148c4:	bl	16504 <read_if_statement@@Base>
   148c8:	ldr	r3, [r6, #204]	; 0xcc
   148cc:	cmp	r3, #21
   148d0:	bne	14918 <if_statement_inside_else_statement@@Base+0x464>
   148d4:	cmp	r0, #0
   148d8:	beq	14980 <if_statement_inside_else_statement@@Base+0x4cc>
   148dc:	ldr	r3, [r0]
   148e0:	cmp	r3, #4
   148e4:	bne	1494c <if_statement_inside_else_statement@@Base+0x498>
   148e8:	ldr	r3, [r4, #200]	; 0xc8
   148ec:	ldr	r2, [r4, #204]	; 0xcc
   148f0:	adds	r3, r3, #1
   148f4:	adc	r2, r2, #0
   148f8:	str	r3, [r4, #200]	; 0xc8
   148fc:	str	r2, [r4, #204]	; 0xcc
   14900:	add	sp, sp, #16
   14904:	ldrd	r4, [sp]
   14908:	ldrd	r6, [sp, #8]
   1490c:	ldr	r8, [sp, #16]
   14910:	add	sp, sp, #20
   14914:	pop	{pc}		; (ldr pc, [sp], #4)
   14918:	ldr	r3, [r4, #184]	; 0xb8
   1491c:	movw	r1, #37132	; 0x910c
   14920:	movt	r1, #1
   14924:	movw	r0, #37784	; 0x9398
   14928:	movt	r0, #1
   1492c:	ldr	lr, [r4, #188]	; 0xbc
   14930:	movw	r2, #558	; 0x22e
   14934:	adds	ip, r3, #1
   14938:	ldr	r3, [pc, #120]	; 149b8 <if_statement_inside_else_statement@@Base+0x504>
   1493c:	adc	lr, lr, #0
   14940:	str	ip, [r4, #184]	; 0xb8
   14944:	str	lr, [r4, #188]	; 0xbc
   14948:	bl	119c4 <__assert_fail@plt>
   1494c:	ldr	r3, [r4, #208]	; 0xd0
   14950:	movw	r1, #37132	; 0x910c
   14954:	movt	r1, #1
   14958:	movw	r0, #37584	; 0x92d0
   1495c:	movt	r0, #1
   14960:	ldr	lr, [r4, #212]	; 0xd4
   14964:	mov	r2, #560	; 0x230
   14968:	adds	ip, r3, #1
   1496c:	ldr	r3, [pc, #68]	; 149b8 <if_statement_inside_else_statement@@Base+0x504>
   14970:	adc	lr, lr, #0
   14974:	str	ip, [r4, #208]	; 0xd0
   14978:	str	lr, [r4, #212]	; 0xd4
   1497c:	bl	119c4 <__assert_fail@plt>
   14980:	ldr	r3, [r4, #192]	; 0xc0
   14984:	movw	r1, #37132	; 0x910c
   14988:	movt	r1, #1
   1498c:	movw	r0, #37572	; 0x92c4
   14990:	movt	r0, #1
   14994:	ldr	lr, [r4, #196]	; 0xc4
   14998:	movw	r2, #559	; 0x22f
   1499c:	adds	ip, r3, #1
   149a0:	ldr	r3, [pc, #16]	; 149b8 <if_statement_inside_else_statement@@Base+0x504>
   149a4:	adc	lr, lr, #0
   149a8:	str	ip, [r4, #192]	; 0xc0
   149ac:	str	lr, [r4, #196]	; 0xc4
   149b0:	bl	119c4 <__assert_fail@plt>
   149b4:	andeq	sl, r2, r8, lsl #29
   149b8:	andeq	r9, r1, r8, ror #1

000149bc <init_token_int_type@@Base>:
   149bc:	movw	r3, #45352	; 0xb128
   149c0:	movt	r3, #2
   149c4:	ldr	r2, [r3]
   149c8:	mov	ip, #0
   149cc:	ldr	r1, [r3, #4]
   149d0:	str	ip, [r0]
   149d4:	adds	r2, r2, #1
   149d8:	adc	r1, r1, ip
   149dc:	str	r2, [r3]
   149e0:	str	r1, [r3, #4]
   149e4:	bx	lr

000149e8 <init_token_int_value@@Base>:
   149e8:	movw	r3, #45352	; 0xb128
   149ec:	movt	r3, #2
   149f0:	push	{lr}		; (str lr, [sp, #-4]!)
   149f4:	ldr	r2, [r3, #8]
   149f8:	mov	lr, #1
   149fc:	ldr	ip, [r3, #12]
   14a00:	str	lr, [r0]
   14a04:	str	r1, [r0, #4]
   14a08:	adds	r2, r2, lr
   14a0c:	adc	ip, ip, #0
   14a10:	str	r2, [r3, #8]
   14a14:	str	ip, [r3, #12]
   14a18:	pop	{pc}		; (ldr pc, [sp], #4)

00014a1c <init_token_function@@Base>:
   14a1c:	movw	r3, #45352	; 0xb128
   14a20:	movt	r3, #2
   14a24:	push	{lr}		; (str lr, [sp, #-4]!)
   14a28:	ldr	r2, [r3, #16]
   14a2c:	mov	lr, #2
   14a30:	ldr	ip, [r3, #20]
   14a34:	str	lr, [r0]
   14a38:	str	r1, [r0, #4]
   14a3c:	adds	r2, r2, #1
   14a40:	adc	ip, ip, #0
   14a44:	str	r2, [r3, #16]
   14a48:	str	ip, [r3, #20]
   14a4c:	pop	{pc}		; (ldr pc, [sp], #4)

00014a50 <init_token_opar@@Base>:
   14a50:	movw	r3, #45352	; 0xb128
   14a54:	movt	r3, #2
   14a58:	ldr	r2, [r3, #24]
   14a5c:	mov	ip, #3
   14a60:	ldr	r1, [r3, #28]
   14a64:	str	ip, [r0]
   14a68:	adds	r2, r2, #1
   14a6c:	adc	r1, r1, #0
   14a70:	str	r2, [r3, #24]
   14a74:	str	r1, [r3, #28]
   14a78:	bx	lr

00014a7c <init_token_cpar@@Base>:
   14a7c:	movw	r3, #45352	; 0xb128
   14a80:	movt	r3, #2
   14a84:	ldr	r2, [r3, #32]
   14a88:	mov	ip, #4
   14a8c:	ldr	r1, [r3, #36]	; 0x24
   14a90:	str	ip, [r0]
   14a94:	adds	r2, r2, #1
   14a98:	adc	r1, r1, #0
   14a9c:	str	r2, [r3, #32]
   14aa0:	str	r1, [r3, #36]	; 0x24
   14aa4:	bx	lr

00014aa8 <init_token_obra@@Base>:
   14aa8:	movw	r3, #45352	; 0xb128
   14aac:	movt	r3, #2
   14ab0:	ldr	r2, [r3, #40]	; 0x28
   14ab4:	mov	ip, #5
   14ab8:	ldr	r1, [r3, #44]	; 0x2c
   14abc:	str	ip, [r0]
   14ac0:	adds	r2, r2, #1
   14ac4:	adc	r1, r1, #0
   14ac8:	str	r2, [r3, #40]	; 0x28
   14acc:	str	r1, [r3, #44]	; 0x2c
   14ad0:	bx	lr

00014ad4 <init_token_cbra@@Base>:
   14ad4:	movw	r3, #45352	; 0xb128
   14ad8:	movt	r3, #2
   14adc:	ldr	r2, [r3, #48]	; 0x30
   14ae0:	mov	ip, #6
   14ae4:	ldr	r1, [r3, #52]	; 0x34
   14ae8:	str	ip, [r0]
   14aec:	adds	r2, r2, #1
   14af0:	adc	r1, r1, #0
   14af4:	str	r2, [r3, #48]	; 0x30
   14af8:	str	r1, [r3, #52]	; 0x34
   14afc:	bx	lr

00014b00 <init_token_return@@Base>:
   14b00:	movw	r3, #45352	; 0xb128
   14b04:	movt	r3, #2
   14b08:	ldr	r2, [r3, #56]	; 0x38
   14b0c:	mov	ip, #7
   14b10:	ldr	r1, [r3, #60]	; 0x3c
   14b14:	str	ip, [r0]
   14b18:	adds	r2, r2, #1
   14b1c:	adc	r1, r1, #0
   14b20:	str	r2, [r3, #56]	; 0x38
   14b24:	str	r1, [r3, #60]	; 0x3c
   14b28:	bx	lr

00014b2c <init_token_semicolon@@Base>:
   14b2c:	movw	r3, #45352	; 0xb128
   14b30:	movt	r3, #2
   14b34:	ldr	r2, [r3, #64]	; 0x40
   14b38:	mov	ip, #8
   14b3c:	ldr	r1, [r3, #68]	; 0x44
   14b40:	str	ip, [r0]
   14b44:	adds	r2, r2, #1
   14b48:	adc	r1, r1, #0
   14b4c:	str	r2, [r3, #64]	; 0x40
   14b50:	str	r1, [r3, #68]	; 0x44
   14b54:	bx	lr

00014b58 <init_token_eof@@Base>:
   14b58:	movw	r3, #45352	; 0xb128
   14b5c:	movt	r3, #2
   14b60:	ldr	r2, [r3, #72]	; 0x48
   14b64:	mov	ip, #9
   14b68:	ldr	r1, [r3, #76]	; 0x4c
   14b6c:	str	ip, [r0]
   14b70:	adds	r2, r2, #1
   14b74:	adc	r1, r1, #0
   14b78:	str	r2, [r3, #72]	; 0x48
   14b7c:	str	r1, [r3, #76]	; 0x4c
   14b80:	bx	lr

00014b84 <init_token_if@@Base>:
   14b84:	movw	r3, #45352	; 0xb128
   14b88:	movt	r3, #2
   14b8c:	ldr	r2, [r3, #80]	; 0x50
   14b90:	mov	ip, #10
   14b94:	ldr	r1, [r3, #84]	; 0x54
   14b98:	str	ip, [r0]
   14b9c:	adds	r2, r2, #1
   14ba0:	adc	r1, r1, #0
   14ba4:	str	r2, [r3, #80]	; 0x50
   14ba8:	str	r1, [r3, #84]	; 0x54
   14bac:	bx	lr

00014bb0 <init_token_else@@Base>:
   14bb0:	movw	r3, #45352	; 0xb128
   14bb4:	movt	r3, #2
   14bb8:	ldr	r2, [r3, #88]	; 0x58
   14bbc:	mov	ip, #11
   14bc0:	ldr	r1, [r3, #92]	; 0x5c
   14bc4:	str	ip, [r0]
   14bc8:	adds	r2, r2, #1
   14bcc:	adc	r1, r1, #0
   14bd0:	str	r2, [r3, #88]	; 0x58
   14bd4:	str	r1, [r3, #92]	; 0x5c
   14bd8:	bx	lr

00014bdc <init_token_boolean_op@@Base>:
   14bdc:	movw	r3, #45352	; 0xb128
   14be0:	movt	r3, #2
   14be4:	push	{lr}		; (str lr, [sp, #-4]!)
   14be8:	ldr	r2, [r3, #96]	; 0x60
   14bec:	mov	lr, #12
   14bf0:	ldr	ip, [r3, #100]	; 0x64
   14bf4:	str	lr, [r0]
   14bf8:	str	r1, [r0, #4]
   14bfc:	adds	r2, r2, #1
   14c00:	adc	ip, ip, #0
   14c04:	str	r2, [r3, #96]	; 0x60
   14c08:	str	ip, [r3, #100]	; 0x64
   14c0c:	pop	{pc}		; (ldr pc, [sp], #4)

00014c10 <free_token_int_type@@Base>:
   14c10:	movw	r3, #45352	; 0xb128
   14c14:	movt	r3, #2
   14c18:	ldr	r2, [r3, #104]	; 0x68
   14c1c:	ldr	r1, [r3, #108]	; 0x6c
   14c20:	adds	r2, r2, #1
   14c24:	adc	r1, r1, #0
   14c28:	str	r2, [r3, #104]	; 0x68
   14c2c:	str	r1, [r3, #108]	; 0x6c
   14c30:	b	1185c <free@plt>

00014c34 <free_token_int_value@@Base>:
   14c34:	movw	r3, #45352	; 0xb128
   14c38:	movt	r3, #2
   14c3c:	ldr	r2, [r3, #112]	; 0x70
   14c40:	ldr	r1, [r3, #116]	; 0x74
   14c44:	adds	r2, r2, #1
   14c48:	adc	r1, r1, #0
   14c4c:	str	r2, [r3, #112]	; 0x70
   14c50:	str	r1, [r3, #116]	; 0x74
   14c54:	b	1185c <free@plt>

00014c58 <free_token_function@@Base>:
   14c58:	movw	r3, #45352	; 0xb128
   14c5c:	movt	r3, #2
   14c60:	ldr	r2, [r3, #120]	; 0x78
   14c64:	ldr	r1, [r3, #124]	; 0x7c
   14c68:	adds	r2, r2, #1
   14c6c:	adc	r1, r1, #0
   14c70:	str	r2, [r3, #120]	; 0x78
   14c74:	str	r1, [r3, #124]	; 0x7c
   14c78:	b	1185c <free@plt>

00014c7c <free_token_opar@@Base>:
   14c7c:	movw	r3, #45352	; 0xb128
   14c80:	movt	r3, #2
   14c84:	ldr	r2, [r3, #128]	; 0x80
   14c88:	ldr	r1, [r3, #132]	; 0x84
   14c8c:	adds	r2, r2, #1
   14c90:	adc	r1, r1, #0
   14c94:	str	r2, [r3, #128]	; 0x80
   14c98:	str	r1, [r3, #132]	; 0x84
   14c9c:	b	1185c <free@plt>

00014ca0 <free_token_cpar@@Base>:
   14ca0:	movw	r3, #45352	; 0xb128
   14ca4:	movt	r3, #2
   14ca8:	ldr	r2, [r3, #136]	; 0x88
   14cac:	ldr	r1, [r3, #140]	; 0x8c
   14cb0:	adds	r2, r2, #1
   14cb4:	adc	r1, r1, #0
   14cb8:	str	r2, [r3, #136]	; 0x88
   14cbc:	str	r1, [r3, #140]	; 0x8c
   14cc0:	b	1185c <free@plt>

00014cc4 <free_token_obra@@Base>:
   14cc4:	movw	r3, #45352	; 0xb128
   14cc8:	movt	r3, #2
   14ccc:	ldr	r2, [r3, #144]	; 0x90
   14cd0:	ldr	r1, [r3, #148]	; 0x94
   14cd4:	adds	r2, r2, #1
   14cd8:	adc	r1, r1, #0
   14cdc:	str	r2, [r3, #144]	; 0x90
   14ce0:	str	r1, [r3, #148]	; 0x94
   14ce4:	b	1185c <free@plt>

00014ce8 <free_token_cbra@@Base>:
   14ce8:	movw	r3, #45352	; 0xb128
   14cec:	movt	r3, #2
   14cf0:	ldr	r2, [r3, #152]	; 0x98
   14cf4:	ldr	r1, [r3, #156]	; 0x9c
   14cf8:	adds	r2, r2, #1
   14cfc:	adc	r1, r1, #0
   14d00:	str	r2, [r3, #152]	; 0x98
   14d04:	str	r1, [r3, #156]	; 0x9c
   14d08:	b	1185c <free@plt>

00014d0c <free_token_return@@Base>:
   14d0c:	movw	r3, #45352	; 0xb128
   14d10:	movt	r3, #2
   14d14:	ldr	r2, [r3, #160]	; 0xa0
   14d18:	ldr	r1, [r3, #164]	; 0xa4
   14d1c:	adds	r2, r2, #1
   14d20:	adc	r1, r1, #0
   14d24:	str	r2, [r3, #160]	; 0xa0
   14d28:	str	r1, [r3, #164]	; 0xa4
   14d2c:	b	1185c <free@plt>

00014d30 <free_token_semicolon@@Base>:
   14d30:	movw	r3, #45352	; 0xb128
   14d34:	movt	r3, #2
   14d38:	ldr	r2, [r3, #168]	; 0xa8
   14d3c:	ldr	r1, [r3, #172]	; 0xac
   14d40:	adds	r2, r2, #1
   14d44:	adc	r1, r1, #0
   14d48:	str	r2, [r3, #168]	; 0xa8
   14d4c:	str	r1, [r3, #172]	; 0xac
   14d50:	b	1185c <free@plt>

00014d54 <free_token_eof@@Base>:
   14d54:	movw	r3, #45352	; 0xb128
   14d58:	movt	r3, #2
   14d5c:	ldr	r2, [r3, #176]	; 0xb0
   14d60:	ldr	r1, [r3, #180]	; 0xb4
   14d64:	adds	r2, r2, #1
   14d68:	adc	r1, r1, #0
   14d6c:	str	r2, [r3, #176]	; 0xb0
   14d70:	str	r1, [r3, #180]	; 0xb4
   14d74:	b	1185c <free@plt>

00014d78 <free_token_if@@Base>:
   14d78:	movw	r3, #45352	; 0xb128
   14d7c:	movt	r3, #2
   14d80:	ldr	r2, [r3, #184]	; 0xb8
   14d84:	ldr	r1, [r3, #188]	; 0xbc
   14d88:	adds	r2, r2, #1
   14d8c:	adc	r1, r1, #0
   14d90:	str	r2, [r3, #184]	; 0xb8
   14d94:	str	r1, [r3, #188]	; 0xbc
   14d98:	b	1185c <free@plt>

00014d9c <free_token_else@@Base>:
   14d9c:	movw	r3, #45352	; 0xb128
   14da0:	movt	r3, #2
   14da4:	ldr	r2, [r3, #192]	; 0xc0
   14da8:	ldr	r1, [r3, #196]	; 0xc4
   14dac:	adds	r2, r2, #1
   14db0:	adc	r1, r1, #0
   14db4:	str	r2, [r3, #192]	; 0xc0
   14db8:	str	r1, [r3, #196]	; 0xc4
   14dbc:	b	1185c <free@plt>

00014dc0 <free_token_boolean_op@@Base>:
   14dc0:	str	r4, [sp, #-8]!
   14dc4:	mov	r4, r0
   14dc8:	movw	r3, #45352	; 0xb128
   14dcc:	movt	r3, #2
   14dd0:	ldr	r0, [r0, #4]
   14dd4:	str	lr, [sp, #4]
   14dd8:	cmp	r0, #0
   14ddc:	beq	14e10 <free_token_boolean_op@@Base+0x50>
   14de0:	ldr	r2, [r3, #200]	; 0xc8
   14de4:	ldr	r1, [r3, #204]	; 0xcc
   14de8:	adds	r2, r2, #1
   14dec:	adc	r1, r1, #0
   14df0:	str	r2, [r3, #200]	; 0xc8
   14df4:	str	r1, [r3, #204]	; 0xcc
   14df8:	bl	1185c <free@plt>
   14dfc:	mov	r0, r4
   14e00:	ldr	r4, [sp]
   14e04:	ldr	lr, [sp, #4]
   14e08:	add	sp, sp, #8
   14e0c:	b	1185c <free@plt>
   14e10:	ldr	r2, [r3, #208]	; 0xd0
   14e14:	ldr	r1, [r3, #212]	; 0xd4
   14e18:	adds	r2, r2, #1
   14e1c:	adc	r1, r1, #0
   14e20:	str	r2, [r3, #208]	; 0xd0
   14e24:	str	r1, [r3, #212]	; 0xd4
   14e28:	b	14dfc <free_token_boolean_op@@Base+0x3c>

00014e2c <init_ast_base@@Base>:
   14e2c:	movw	r3, #45568	; 0xb200
   14e30:	movt	r3, #2
   14e34:	push	{lr}		; (str lr, [sp, #-4]!)
   14e38:	ldm	r3, {ip, lr}
   14e3c:	stm	r0, {r1, r2}
   14e40:	adds	ip, ip, #1
   14e44:	adc	lr, lr, #0
   14e48:	stm	r3, {ip, lr}
   14e4c:	pop	{pc}		; (ldr pc, [sp], #4)

00014e50 <init_ast_base_single@@Base>:
   14e50:	movw	r3, #45568	; 0xb200
   14e54:	movt	r3, #2
   14e58:	push	{lr}		; (str lr, [sp, #-4]!)
   14e5c:	ldr	r2, [r3, #8]
   14e60:	mov	lr, #0
   14e64:	ldr	ip, [r3, #12]
   14e68:	stm	r0, {r1, lr}
   14e6c:	adds	r2, r2, #1
   14e70:	adc	ip, ip, lr
   14e74:	str	r2, [r3, #8]
   14e78:	str	ip, [r3, #12]
   14e7c:	pop	{pc}		; (ldr pc, [sp], #4)

00014e80 <init_node_id@@Base>:
   14e80:	movw	r3, #45568	; 0xb200
   14e84:	movt	r3, #2
   14e88:	push	{lr}		; (str lr, [sp, #-4]!)
   14e8c:	ldr	r2, [r3, #16]
   14e90:	mov	lr, #0
   14e94:	ldr	ip, [r3, #20]
   14e98:	str	lr, [r0]
   14e9c:	str	lr, [r0, #4]
   14ea0:	adds	r2, r2, #1
   14ea4:	str	r1, [r0, #8]
   14ea8:	adc	ip, ip, lr
   14eac:	str	r2, [r3, #16]
   14eb0:	str	ip, [r3, #20]
   14eb4:	pop	{pc}		; (ldr pc, [sp], #4)

00014eb8 <init_node_int@@Base>:
   14eb8:	movw	r3, #45568	; 0xb200
   14ebc:	movt	r3, #2
   14ec0:	str	r4, [sp, #-8]!
   14ec4:	ldr	r2, [r3, #24]
   14ec8:	mov	r4, #1
   14ecc:	ldr	ip, [r3, #28]
   14ed0:	str	lr, [sp, #4]
   14ed4:	mov	lr, #0
   14ed8:	str	r4, [r0]
   14edc:	adds	r2, r2, r4
   14ee0:	ldr	r4, [sp]
   14ee4:	add	sp, sp, #4
   14ee8:	str	lr, [r0, #4]
   14eec:	adc	ip, ip, lr
   14ef0:	str	r1, [r0, #8]
   14ef4:	str	r2, [r3, #24]
   14ef8:	str	ip, [r3, #28]
   14efc:	pop	{pc}		; (ldr pc, [sp], #4)

00014f00 <init_node_function@@Base>:
   14f00:	movw	r3, #45568	; 0xb200
   14f04:	movt	r3, #2
   14f08:	strd	r4, [sp, #-12]!
   14f0c:	ldr	ip, [r3, #32]
   14f10:	mov	r4, #0
   14f14:	mov	r5, #2
   14f18:	str	lr, [sp, #8]
   14f1c:	ldr	lr, [r3, #36]	; 0x24
   14f20:	str	r5, [r0]
   14f24:	str	r4, [r0, #4]
   14f28:	adds	ip, ip, #1
   14f2c:	str	r1, [r0, #8]
   14f30:	str	r2, [r0, #12]
   14f34:	adc	lr, lr, r4
   14f38:	ldrd	r4, [sp]
   14f3c:	add	sp, sp, #8
   14f40:	str	ip, [r3, #32]
   14f44:	str	lr, [r3, #36]	; 0x24
   14f48:	pop	{pc}		; (ldr pc, [sp], #4)

00014f4c <init_node_return@@Base>:
   14f4c:	movw	r3, #45568	; 0xb200
   14f50:	movt	r3, #2
   14f54:	str	r4, [sp, #-8]!
   14f58:	ldr	r2, [r3, #40]	; 0x28
   14f5c:	mov	r4, #3
   14f60:	ldr	ip, [r3, #44]	; 0x2c
   14f64:	str	lr, [sp, #4]
   14f68:	mov	lr, #0
   14f6c:	str	r4, [r0]
   14f70:	adds	r2, r2, #1
   14f74:	ldr	r4, [sp]
   14f78:	add	sp, sp, #4
   14f7c:	str	lr, [r0, #4]
   14f80:	adc	ip, ip, lr
   14f84:	str	r1, [r0, #8]
   14f88:	str	r2, [r3, #40]	; 0x28
   14f8c:	str	ip, [r3, #44]	; 0x2c
   14f90:	pop	{pc}		; (ldr pc, [sp], #4)

00014f94 <init_node_if@@Base>:
   14f94:	movw	ip, #45568	; 0xb200
   14f98:	movt	ip, #2
   14f9c:	strd	r4, [sp, #-16]!
   14fa0:	ldr	r4, [ip, #52]	; 0x34
   14fa4:	mov	r5, #0
   14fa8:	str	lr, [sp, #12]
   14fac:	ldr	lr, [ip, #48]	; 0x30
   14fb0:	str	r6, [sp, #8]
   14fb4:	mov	r6, #4
   14fb8:	str	r6, [r0]
   14fbc:	str	r5, [r0, #4]
   14fc0:	adds	lr, lr, #1
   14fc4:	ldr	r6, [sp, #8]
   14fc8:	adc	r4, r4, r5
   14fcc:	str	r1, [r0, #8]
   14fd0:	strd	r2, [r0, #12]
   14fd4:	str	lr, [ip, #48]	; 0x30
   14fd8:	str	r4, [ip, #52]	; 0x34
   14fdc:	ldrd	r4, [sp]
   14fe0:	add	sp, sp, #12
   14fe4:	pop	{pc}		; (ldr pc, [sp], #4)

00014fe8 <init_node_boolean_operator@@Base>:
   14fe8:	movw	ip, #45568	; 0xb200
   14fec:	movt	ip, #2
   14ff0:	strd	r4, [sp, #-16]!
   14ff4:	ldr	r4, [ip, #60]	; 0x3c
   14ff8:	mov	r5, #0
   14ffc:	str	lr, [sp, #12]
   15000:	ldr	lr, [ip, #56]	; 0x38
   15004:	str	r6, [sp, #8]
   15008:	mov	r6, #5
   1500c:	str	r6, [r0]
   15010:	str	r5, [r0, #4]
   15014:	adds	lr, lr, #1
   15018:	ldr	r6, [sp, #8]
   1501c:	adc	r4, r4, r5
   15020:	strd	r2, [r0, #8]
   15024:	str	r1, [r0, #16]
   15028:	str	lr, [ip, #56]	; 0x38
   1502c:	str	r4, [ip, #60]	; 0x3c
   15030:	ldrd	r4, [sp]
   15034:	add	sp, sp, #12
   15038:	pop	{pc}		; (ldr pc, [sp], #4)

0001503c <free_node_boolean_operator@@Base>:
   1503c:	strd	r4, [sp, #-16]!
   15040:	mov	r5, r0
   15044:	movw	r4, #45568	; 0xb200
   15048:	movt	r4, #2
   1504c:	ldr	r0, [r0, #4]
   15050:	str	r6, [sp, #8]
   15054:	str	lr, [sp, #12]
   15058:	cmp	r0, #0
   1505c:	beq	150ec <free_node_boolean_operator@@Base+0xb0>
   15060:	ldr	r3, [r4, #64]	; 0x40
   15064:	ldr	r2, [r4, #68]	; 0x44
   15068:	adds	r3, r3, #1
   1506c:	adc	r2, r2, #0
   15070:	str	r3, [r4, #64]	; 0x40
   15074:	str	r2, [r4, #68]	; 0x44
   15078:	bl	15108 <free_node@@Base>
   1507c:	ldr	r3, [r4, #80]	; 0x50
   15080:	ldr	r2, [r4, #84]	; 0x54
   15084:	adds	r3, r3, #1
   15088:	adc	r2, r2, #0
   1508c:	str	r3, [r4, #80]	; 0x50
   15090:	str	r2, [r4, #84]	; 0x54
   15094:	ldr	r0, [r5, #8]
   15098:	bl	15108 <free_node@@Base>
   1509c:	ldr	r3, [r4, #88]	; 0x58
   150a0:	ldr	r2, [r4, #92]	; 0x5c
   150a4:	ldr	r0, [r5, #12]
   150a8:	adds	r3, r3, #1
   150ac:	adc	r2, r2, #0
   150b0:	str	r3, [r4, #88]	; 0x58
   150b4:	str	r2, [r4, #92]	; 0x5c
   150b8:	bl	15108 <free_node@@Base>
   150bc:	ldr	r3, [r4, #96]	; 0x60
   150c0:	mov	r0, r5
   150c4:	ldr	r2, [r4, #100]	; 0x64
   150c8:	ldr	r6, [sp, #8]
   150cc:	adds	r3, r3, #1
   150d0:	ldr	lr, [sp, #12]
   150d4:	adc	r2, r2, #0
   150d8:	str	r3, [r4, #96]	; 0x60
   150dc:	str	r2, [r4, #100]	; 0x64
   150e0:	ldrd	r4, [sp]
   150e4:	add	sp, sp, #16
   150e8:	b	1185c <free@plt>
   150ec:	ldr	r3, [r4, #72]	; 0x48
   150f0:	ldr	r2, [r4, #76]	; 0x4c
   150f4:	adds	r3, r3, #1
   150f8:	adc	r2, r2, #0
   150fc:	str	r3, [r4, #72]	; 0x48
   15100:	str	r2, [r4, #76]	; 0x4c
   15104:	b	15094 <free_node_boolean_operator@@Base+0x58>

00015108 <free_node@@Base>:
   15108:	ldr	r3, [r0]
   1510c:	strd	r4, [sp, #-16]!
   15110:	movw	r4, #45568	; 0xb200
   15114:	movt	r4, #2
   15118:	mov	r5, r0
   1511c:	str	r6, [sp, #8]
   15120:	str	lr, [sp, #12]
   15124:	cmp	r3, #5
   15128:	ldrls	pc, [pc, r3, lsl #2]
   1512c:	b	15468 <free_node@@Base+0x360>
   15130:	andeq	r5, r1, ip, lsl #3
   15134:	andeq	r5, r1, r4, lsl r2
   15138:	andeq	r5, r1, r4, lsr #6
   1513c:	muleq	r1, ip, r2
   15140:			; <UNDEFINED> instruction: 0x000153b4
   15144:	andeq	r5, r1, r8, asr #2
   15148:	ldr	r3, [r4, #152]	; 0x98
   1514c:	ldr	r2, [r4, #156]	; 0x9c
   15150:	adds	r3, r3, #1
   15154:	adc	r2, r2, #0
   15158:	str	r3, [r4, #152]	; 0x98
   1515c:	str	r2, [r4, #156]	; 0x9c
   15160:	bl	1503c <free_node_boolean_operator@@Base>
   15164:	ldr	r3, [r4, #200]	; 0xc8
   15168:	ldr	r2, [r4, #204]	; 0xcc
   1516c:	ldr	r6, [sp, #8]
   15170:	adds	r3, r3, #1
   15174:	adc	r2, r2, #0
   15178:	str	r3, [r4, #200]	; 0xc8
   1517c:	str	r2, [r4, #204]	; 0xcc
   15180:	ldrd	r4, [sp]
   15184:	add	sp, sp, #12
   15188:	pop	{pc}		; (ldr pc, [sp], #4)
   1518c:	ldr	r3, [r4, #112]	; 0x70
   15190:	ldr	r2, [r4, #116]	; 0x74
   15194:	ldr	r0, [r0, #4]
   15198:	adds	r3, r3, #1
   1519c:	adc	r2, r2, #0
   151a0:	str	r3, [r4, #112]	; 0x70
   151a4:	cmp	r0, #0
   151a8:	str	r2, [r4, #116]	; 0x74
   151ac:	beq	153f8 <free_node@@Base+0x2f0>
   151b0:	ldr	r3, [r4, #216]	; 0xd8
   151b4:	ldr	r2, [r4, #220]	; 0xdc
   151b8:	adds	r3, r3, #1
   151bc:	adc	r2, r2, #0
   151c0:	str	r3, [r4, #216]	; 0xd8
   151c4:	str	r2, [r4, #220]	; 0xdc
   151c8:	bl	15108 <free_node@@Base>
   151cc:	ldr	r3, [r4, #232]	; 0xe8
   151d0:	ldr	r2, [r4, #236]	; 0xec
   151d4:	adds	r3, r3, #1
   151d8:	adc	r2, r2, #0
   151dc:	str	r3, [r4, #232]	; 0xe8
   151e0:	str	r2, [r4, #236]	; 0xec
   151e4:	mov	r0, r5
   151e8:	bl	1185c <free@plt>
   151ec:	ldr	r3, [r4, #160]	; 0xa0
   151f0:	ldr	r2, [r4, #164]	; 0xa4
   151f4:	ldr	r6, [sp, #8]
   151f8:	adds	r3, r3, #1
   151fc:	adc	r2, r2, #0
   15200:	str	r3, [r4, #160]	; 0xa0
   15204:	str	r2, [r4, #164]	; 0xa4
   15208:	ldrd	r4, [sp]
   1520c:	add	sp, sp, #12
   15210:	pop	{pc}		; (ldr pc, [sp], #4)
   15214:	ldr	r3, [r4, #120]	; 0x78
   15218:	ldr	r2, [r4, #124]	; 0x7c
   1521c:	ldr	r0, [r0, #4]
   15220:	adds	r3, r3, #1
   15224:	adc	r2, r2, #0
   15228:	str	r3, [r4, #120]	; 0x78
   1522c:	cmp	r0, #0
   15230:	str	r2, [r4, #124]	; 0x7c
   15234:	beq	15430 <free_node@@Base+0x328>
   15238:	ldr	r3, [r4, #240]	; 0xf0
   1523c:	ldr	r2, [r4, #244]	; 0xf4
   15240:	adds	r3, r3, #1
   15244:	adc	r2, r2, #0
   15248:	str	r3, [r4, #240]	; 0xf0
   1524c:	str	r2, [r4, #244]	; 0xf4
   15250:	bl	15108 <free_node@@Base>
   15254:	ldr	r3, [r4, #256]	; 0x100
   15258:	ldr	r1, [r4, #260]	; 0x104
   1525c:	adds	r3, r3, #1
   15260:	adc	r1, r1, #0
   15264:	str	r3, [r4, #256]	; 0x100
   15268:	str	r1, [r4, #260]	; 0x104
   1526c:	mov	r0, r5
   15270:	bl	1185c <free@plt>
   15274:	ldr	r3, [r4, #168]	; 0xa8
   15278:	ldr	r2, [r4, #172]	; 0xac
   1527c:	ldr	r6, [sp, #8]
   15280:	adds	r3, r3, #1
   15284:	adc	r2, r2, #0
   15288:	str	r3, [r4, #168]	; 0xa8
   1528c:	str	r2, [r4, #172]	; 0xac
   15290:	ldrd	r4, [sp]
   15294:	add	sp, sp, #12
   15298:	pop	{pc}		; (ldr pc, [sp], #4)
   1529c:	ldr	r3, [r4, #136]	; 0x88
   152a0:	ldr	r2, [r4, #140]	; 0x8c
   152a4:	ldr	r0, [r0, #4]
   152a8:	adds	r3, r3, #1
   152ac:	adc	r2, r2, #0
   152b0:	str	r3, [r4, #136]	; 0x88
   152b4:	cmp	r0, #0
   152b8:	str	r2, [r4, #140]	; 0x8c
   152bc:	beq	15414 <free_node@@Base+0x30c>
   152c0:	ldr	r3, [r4, #288]	; 0x120
   152c4:	ldr	r2, [r4, #292]	; 0x124
   152c8:	adds	r3, r3, #1
   152cc:	adc	r2, r2, #0
   152d0:	str	r3, [r4, #288]	; 0x120
   152d4:	str	r2, [r4, #292]	; 0x124
   152d8:	bl	15108 <free_node@@Base>
   152dc:	ldr	r3, [r4, #304]	; 0x130
   152e0:	ldr	r2, [r4, #308]	; 0x134
   152e4:	adds	r3, r3, #1
   152e8:	adc	r2, r2, #0
   152ec:	str	r3, [r4, #304]	; 0x130
   152f0:	str	r2, [r4, #308]	; 0x134
   152f4:	mov	r0, r5
   152f8:	bl	1185c <free@plt>
   152fc:	ldr	r3, [r4, #184]	; 0xb8
   15300:	ldr	r2, [r4, #188]	; 0xbc
   15304:	ldr	r6, [sp, #8]
   15308:	adds	r3, r3, #1
   1530c:	adc	r2, r2, #0
   15310:	str	r3, [r4, #184]	; 0xb8
   15314:	str	r2, [r4, #188]	; 0xbc
   15318:	ldrd	r4, [sp]
   1531c:	add	sp, sp, #12
   15320:	pop	{pc}		; (ldr pc, [sp], #4)
   15324:	ldr	r3, [r4, #128]	; 0x80
   15328:	ldr	r2, [r4, #132]	; 0x84
   1532c:	ldr	r0, [r0, #4]
   15330:	adds	r3, r3, #1
   15334:	adc	r2, r2, #0
   15338:	str	r3, [r4, #128]	; 0x80
   1533c:	cmp	r0, #0
   15340:	str	r2, [r4, #132]	; 0x84
   15344:	beq	1544c <free_node@@Base+0x344>
   15348:	ldr	r3, [r4, #264]	; 0x108
   1534c:	ldr	r2, [r4, #268]	; 0x10c
   15350:	adds	r3, r3, #1
   15354:	adc	r2, r2, #0
   15358:	str	r3, [r4, #264]	; 0x108
   1535c:	str	r2, [r4, #268]	; 0x10c
   15360:	bl	15108 <free_node@@Base>
   15364:	ldr	r3, [r4, #280]	; 0x118
   15368:	ldr	r2, [r4, #284]	; 0x11c
   1536c:	adds	r3, r3, #1
   15370:	adc	r2, r2, #0
   15374:	str	r3, [r4, #280]	; 0x118
   15378:	str	r2, [r4, #284]	; 0x11c
   1537c:	ldr	r0, [r5, #8]
   15380:	bl	1185c <free@plt>
   15384:	mov	r0, r5
   15388:	bl	1185c <free@plt>
   1538c:	ldr	r3, [r4, #176]	; 0xb0
   15390:	ldr	r2, [r4, #180]	; 0xb4
   15394:	ldr	r6, [sp, #8]
   15398:	adds	r3, r3, #1
   1539c:	adc	r2, r2, #0
   153a0:	str	r3, [r4, #176]	; 0xb0
   153a4:	str	r2, [r4, #180]	; 0xb4
   153a8:	ldrd	r4, [sp]
   153ac:	add	sp, sp, #12
   153b0:	pop	{pc}		; (ldr pc, [sp], #4)
   153b4:	ldr	r3, [r4, #144]	; 0x90
   153b8:	ldr	r2, [r4, #148]	; 0x94
   153bc:	adds	r3, r3, #1
   153c0:	adc	r2, r2, #0
   153c4:	str	r3, [r4, #144]	; 0x90
   153c8:	str	r2, [r4, #148]	; 0x94
   153cc:	bl	154c0 <free_node_if@@Base>
   153d0:	ldr	r3, [r4, #192]	; 0xc0
   153d4:	ldr	r2, [r4, #196]	; 0xc4
   153d8:	ldr	r6, [sp, #8]
   153dc:	adds	r3, r3, #1
   153e0:	adc	r2, r2, #0
   153e4:	str	r3, [r4, #192]	; 0xc0
   153e8:	str	r2, [r4, #196]	; 0xc4
   153ec:	ldrd	r4, [sp]
   153f0:	add	sp, sp, #12
   153f4:	pop	{pc}		; (ldr pc, [sp], #4)
   153f8:	ldr	r3, [r4, #224]	; 0xe0
   153fc:	ldr	r2, [r4, #228]	; 0xe4
   15400:	adds	r3, r3, #1
   15404:	adc	r2, r2, #0
   15408:	str	r3, [r4, #224]	; 0xe0
   1540c:	str	r2, [r4, #228]	; 0xe4
   15410:	b	151e4 <free_node@@Base+0xdc>
   15414:	ldr	r3, [r4, #296]	; 0x128
   15418:	ldr	r1, [r4, #300]	; 0x12c
   1541c:	adds	r3, r3, #1
   15420:	adc	r1, r1, #0
   15424:	str	r3, [r4, #296]	; 0x128
   15428:	str	r1, [r4, #300]	; 0x12c
   1542c:	b	152f4 <free_node@@Base+0x1ec>
   15430:	ldr	r3, [r4, #248]	; 0xf8
   15434:	ldr	r2, [r4, #252]	; 0xfc
   15438:	adds	r3, r3, #1
   1543c:	adc	r2, r2, #0
   15440:	str	r3, [r4, #248]	; 0xf8
   15444:	str	r2, [r4, #252]	; 0xfc
   15448:	b	1526c <free_node@@Base+0x164>
   1544c:	ldr	r3, [r4, #272]	; 0x110
   15450:	ldr	r1, [r4, #276]	; 0x114
   15454:	adds	r3, r3, #1
   15458:	adc	r1, r1, #0
   1545c:	str	r3, [r4, #272]	; 0x110
   15460:	str	r1, [r4, #276]	; 0x114
   15464:	b	1537c <free_node@@Base+0x274>
   15468:	ldr	ip, [r4, #104]	; 0x68
   1546c:	mov	r1, #1
   15470:	movw	r3, #43384	; 0xa978
   15474:	movt	r3, #2
   15478:	mov	r2, #31
   1547c:	ldr	lr, [r4, #108]	; 0x6c
   15480:	movw	r0, #38496	; 0x9660
   15484:	movt	r0, #1
   15488:	ldr	r3, [r3]
   1548c:	adds	ip, ip, r1
   15490:	adc	lr, lr, #0
   15494:	str	ip, [r4, #104]	; 0x68
   15498:	str	lr, [r4, #108]	; 0x6c
   1549c:	bl	11880 <fwrite@plt>
   154a0:	ldr	r3, [r4, #208]	; 0xd0
   154a4:	mov	r0, #1
   154a8:	ldr	r2, [r4, #212]	; 0xd4
   154ac:	adds	r3, r3, r0
   154b0:	adc	r2, r2, #0
   154b4:	str	r3, [r4, #208]	; 0xd0
   154b8:	str	r2, [r4, #212]	; 0xd4
   154bc:	bl	118f8 <exit@plt>

000154c0 <free_node_if@@Base>:
   154c0:	strd	r4, [sp, #-16]!
   154c4:	mov	r5, r0
   154c8:	ldr	r0, [r0, #4]
   154cc:	str	r6, [sp, #8]
   154d0:	ldr	r4, [pc, #208]	; 155a8 <free_node_if@@Base+0xe8>
   154d4:	str	lr, [sp, #12]
   154d8:	cmp	r0, #0
   154dc:	beq	1558c <free_node_if@@Base+0xcc>
   154e0:	ldr	r3, [r4, #-8]
   154e4:	ldr	r2, [r4, #-4]
   154e8:	adds	r3, r3, #1
   154ec:	adc	r2, r2, #0
   154f0:	str	r3, [r4, #-8]
   154f4:	str	r2, [r4, #-4]
   154f8:	bl	15108 <free_node@@Base>
   154fc:	ldr	r3, [r4, #8]
   15500:	ldr	r2, [r4, #12]
   15504:	adds	r3, r3, #1
   15508:	adc	r2, r2, #0
   1550c:	str	r3, [r4, #8]
   15510:	str	r2, [r4, #12]
   15514:	ldr	r0, [r5, #8]
   15518:	bl	15108 <free_node@@Base>
   1551c:	ldr	r3, [r4, #16]
   15520:	ldr	r2, [r4, #20]
   15524:	ldr	r0, [r5, #12]
   15528:	adds	r3, r3, #1
   1552c:	adc	r2, r2, #0
   15530:	str	r3, [r4, #16]
   15534:	str	r2, [r4, #20]
   15538:	bl	15108 <free_node@@Base>
   1553c:	ldr	r3, [r4, #24]
   15540:	ldr	r2, [r4, #28]
   15544:	ldr	r0, [r5, #16]
   15548:	adds	r3, r3, #1
   1554c:	adc	r2, r2, #0
   15550:	str	r3, [r4, #24]
   15554:	str	r2, [r4, #28]
   15558:	bl	15108 <free_node@@Base>
   1555c:	ldr	r3, [r4, #32]
   15560:	mov	r0, r5
   15564:	ldr	r2, [r4, #36]	; 0x24
   15568:	ldr	r6, [sp, #8]
   1556c:	adds	r3, r3, #1
   15570:	ldr	lr, [sp, #12]
   15574:	adc	r2, r2, #0
   15578:	str	r3, [r4, #32]
   1557c:	str	r2, [r4, #36]	; 0x24
   15580:	ldrd	r4, [sp]
   15584:	add	sp, sp, #16
   15588:	b	1185c <free@plt>
   1558c:	ldr	r3, [r4]
   15590:	ldr	r2, [r4, #4]
   15594:	adds	r3, r3, #1
   15598:	adc	r2, r2, #0
   1559c:	str	r3, [r4]
   155a0:	str	r2, [r4, #4]
   155a4:	b	15514 <free_node_if@@Base+0x54>
   155a8:	andeq	fp, r2, r0, asr #6

000155ac <free_node_return@@Base>:
   155ac:	strd	r4, [sp, #-16]!
   155b0:	mov	r5, r0
   155b4:	ldr	r0, [r0, #4]
   155b8:	str	r6, [sp, #8]
   155bc:	str	lr, [sp, #12]
   155c0:	cmp	r0, #0
   155c4:	beq	15618 <free_node_return@@Base+0x6c>
   155c8:	ldr	r4, [pc, #104]	; 15638 <free_node_return@@Base+0x8c>
   155cc:	ldr	r3, [r4]
   155d0:	ldr	r2, [r4, #4]
   155d4:	adds	r3, r3, #1
   155d8:	adc	r2, r2, #0
   155dc:	str	r3, [r4]
   155e0:	str	r2, [r4, #4]
   155e4:	bl	15108 <free_node@@Base>
   155e8:	ldr	r3, [r4, #16]
   155ec:	ldr	r2, [r4, #20]
   155f0:	adds	r3, r3, #1
   155f4:	adc	r2, r2, #0
   155f8:	str	r3, [r4, #16]
   155fc:	str	r2, [r4, #20]
   15600:	mov	r0, r5
   15604:	ldrd	r4, [sp]
   15608:	ldr	r6, [sp, #8]
   1560c:	ldr	lr, [sp, #12]
   15610:	add	sp, sp, #16
   15614:	b	1185c <free@plt>
   15618:	ldr	r2, [pc, #24]	; 15638 <free_node_return@@Base+0x8c>
   1561c:	ldr	r3, [r2, #8]
   15620:	ldr	r1, [r2, #12]
   15624:	adds	r3, r3, #1
   15628:	adc	r1, r1, #0
   1562c:	str	r3, [r2, #8]
   15630:	str	r1, [r2, #12]
   15634:	b	15600 <free_node_return@@Base+0x54>
   15638:	andeq	fp, r2, r0, lsr #6

0001563c <free_node_function@@Base>:
   1563c:	strd	r4, [sp, #-16]!
   15640:	mov	r5, r0
   15644:	ldr	r0, [r0, #4]
   15648:	str	r6, [sp, #8]
   1564c:	str	lr, [sp, #12]
   15650:	cmp	r0, #0
   15654:	beq	156b0 <free_node_function@@Base+0x74>
   15658:	ldr	r4, [pc, #112]	; 156d0 <free_node_function@@Base+0x94>
   1565c:	ldr	r3, [r4, #-8]
   15660:	ldr	r2, [r4, #-4]
   15664:	adds	r3, r3, #1
   15668:	adc	r2, r2, #0
   1566c:	str	r3, [r4, #-8]
   15670:	str	r2, [r4, #-4]
   15674:	bl	15108 <free_node@@Base>
   15678:	ldr	r3, [r4, #8]
   1567c:	ldr	r2, [r4, #12]
   15680:	adds	r3, r3, #1
   15684:	adc	r2, r2, #0
   15688:	str	r3, [r4, #8]
   1568c:	str	r2, [r4, #12]
   15690:	ldr	r0, [r5, #8]
   15694:	bl	1185c <free@plt>
   15698:	mov	r0, r5
   1569c:	ldrd	r4, [sp]
   156a0:	ldr	r6, [sp, #8]
   156a4:	ldr	lr, [sp, #12]
   156a8:	add	sp, sp, #16
   156ac:	b	1185c <free@plt>
   156b0:	ldr	r2, [pc, #24]	; 156d0 <free_node_function@@Base+0x94>
   156b4:	ldr	r3, [r2]
   156b8:	ldr	r1, [r2, #4]
   156bc:	adds	r3, r3, #1
   156c0:	adc	r1, r1, #0
   156c4:	str	r3, [r2]
   156c8:	str	r1, [r2, #4]
   156cc:	b	15690 <free_node_function@@Base+0x54>
   156d0:	andeq	fp, r2, r0, lsl r3

000156d4 <free_node_int@@Base>:
   156d4:	strd	r4, [sp, #-16]!
   156d8:	mov	r5, r0
   156dc:	ldr	r0, [r0, #4]
   156e0:	str	r6, [sp, #8]
   156e4:	str	lr, [sp, #12]
   156e8:	cmp	r0, #0
   156ec:	beq	15744 <free_node_int@@Base+0x70>
   156f0:	movw	r4, #45568	; 0xb200
   156f4:	movt	r4, #2
   156f8:	ldr	r3, [r4, #240]	; 0xf0
   156fc:	ldr	r2, [r4, #244]	; 0xf4
   15700:	adds	r3, r3, #1
   15704:	adc	r2, r2, #0
   15708:	str	r3, [r4, #240]	; 0xf0
   1570c:	str	r2, [r4, #244]	; 0xf4
   15710:	bl	15108 <free_node@@Base>
   15714:	ldr	r3, [r4, #256]	; 0x100
   15718:	ldr	r2, [r4, #260]	; 0x104
   1571c:	adds	r3, r3, #1
   15720:	adc	r2, r2, #0
   15724:	str	r3, [r4, #256]	; 0x100
   15728:	str	r2, [r4, #260]	; 0x104
   1572c:	mov	r0, r5
   15730:	ldrd	r4, [sp]
   15734:	ldr	r6, [sp, #8]
   15738:	ldr	lr, [sp, #12]
   1573c:	add	sp, sp, #16
   15740:	b	1185c <free@plt>
   15744:	movw	r3, #45568	; 0xb200
   15748:	movt	r3, #2
   1574c:	ldr	r2, [r3, #248]	; 0xf8
   15750:	ldr	r1, [r3, #252]	; 0xfc
   15754:	adds	r2, r2, #1
   15758:	adc	r1, r1, #0
   1575c:	str	r2, [r3, #248]	; 0xf8
   15760:	str	r1, [r3, #252]	; 0xfc
   15764:	b	1572c <free_node_int@@Base+0x58>

00015768 <free_node_id@@Base>:
   15768:	strd	r4, [sp, #-16]!
   1576c:	mov	r5, r0
   15770:	ldr	r0, [r0, #4]
   15774:	str	r6, [sp, #8]
   15778:	str	lr, [sp, #12]
   1577c:	cmp	r0, #0
   15780:	beq	157d8 <free_node_id@@Base+0x70>
   15784:	movw	r4, #45568	; 0xb200
   15788:	movt	r4, #2
   1578c:	ldr	r3, [r4, #216]	; 0xd8
   15790:	ldr	r2, [r4, #220]	; 0xdc
   15794:	adds	r3, r3, #1
   15798:	adc	r2, r2, #0
   1579c:	str	r3, [r4, #216]	; 0xd8
   157a0:	str	r2, [r4, #220]	; 0xdc
   157a4:	bl	15108 <free_node@@Base>
   157a8:	ldr	r3, [r4, #232]	; 0xe8
   157ac:	ldr	r2, [r4, #236]	; 0xec
   157b0:	adds	r3, r3, #1
   157b4:	adc	r2, r2, #0
   157b8:	str	r3, [r4, #232]	; 0xe8
   157bc:	str	r2, [r4, #236]	; 0xec
   157c0:	mov	r0, r5
   157c4:	ldrd	r4, [sp]
   157c8:	ldr	r6, [sp, #8]
   157cc:	ldr	lr, [sp, #12]
   157d0:	add	sp, sp, #16
   157d4:	b	1185c <free@plt>
   157d8:	movw	r3, #45568	; 0xb200
   157dc:	movt	r3, #2
   157e0:	ldr	r2, [r3, #224]	; 0xe0
   157e4:	ldr	r1, [r3, #228]	; 0xe4
   157e8:	adds	r2, r2, #1
   157ec:	adc	r1, r1, #0
   157f0:	str	r2, [r3, #224]	; 0xe0
   157f4:	str	r1, [r3, #228]	; 0xe4
   157f8:	b	157c0 <free_node_id@@Base+0x58>

000157fc <get_boolean_op_value@@Base>:
   157fc:	strd	r4, [sp, #-16]!
   15800:	mov	r1, #2
   15804:	ldr	r5, [r0, #4]
   15808:	str	r6, [sp, #8]
   1580c:	str	lr, [sp, #12]
   15810:	mov	r0, r5
   15814:	bl	11958 <strnlen@plt>
   15818:	cmp	r0, #2
   1581c:	beq	15910 <get_boolean_op_value@@Base+0x114>
   15820:	ldrb	r3, [r5]
   15824:	cmp	r3, #60	; 0x3c
   15828:	beq	158ec <get_boolean_op_value@@Base+0xf0>
   1582c:	cmp	r3, #62	; 0x3e
   15830:	beq	158c8 <get_boolean_op_value@@Base+0xcc>
   15834:	cmp	r3, #33	; 0x21
   15838:	beq	15894 <get_boolean_op_value@@Base+0x98>
   1583c:	ldr	r4, [pc, #668]	; 15ae0 <get_boolean_op_value@@Base+0x2e4>
   15840:	movw	r3, #43384	; 0xa978
   15844:	movt	r3, #2
   15848:	mov	r2, r5
   1584c:	movw	r1, #38552	; 0x9698
   15850:	movt	r1, #1
   15854:	ldr	r0, [r3]
   15858:	ldr	r3, [r4, #56]	; 0x38
   1585c:	ldr	ip, [r4, #60]	; 0x3c
   15860:	adds	r3, r3, #1
   15864:	adc	ip, ip, #0
   15868:	str	r3, [r4, #56]	; 0x38
   1586c:	str	ip, [r4, #60]	; 0x3c
   15870:	bl	11910 <fprintf@plt>
   15874:	ldr	r3, [r4, #88]	; 0x58
   15878:	mov	r0, #1
   1587c:	ldr	r2, [r4, #92]	; 0x5c
   15880:	adds	r3, r3, r0
   15884:	adc	r2, r2, #0
   15888:	str	r3, [r4, #88]	; 0x58
   1588c:	str	r2, [r4, #92]	; 0x5c
   15890:	bl	118f8 <exit@plt>
   15894:	ldr	r2, [pc, #580]	; 15ae0 <get_boolean_op_value@@Base+0x2e4>
   15898:	mov	r4, #8
   1589c:	ldr	r3, [r2, #64]	; 0x40
   158a0:	ldr	r1, [r2, #68]	; 0x44
   158a4:	adds	r3, r3, #1
   158a8:	adc	r1, r1, #0
   158ac:	str	r3, [r2, #64]	; 0x40
   158b0:	str	r1, [r2, #68]	; 0x44
   158b4:	mov	r0, r4
   158b8:	ldrd	r4, [sp]
   158bc:	ldr	r6, [sp, #8]
   158c0:	add	sp, sp, #12
   158c4:	pop	{pc}		; (ldr pc, [sp], #4)
   158c8:	ldr	r2, [pc, #528]	; 15ae0 <get_boolean_op_value@@Base+0x2e4>
   158cc:	mov	r4, #7
   158d0:	ldr	r3, [r2, #80]	; 0x50
   158d4:	ldr	r1, [r2, #84]	; 0x54
   158d8:	adds	r3, r3, #1
   158dc:	adc	r1, r1, #0
   158e0:	str	r3, [r2, #80]	; 0x50
   158e4:	str	r1, [r2, #84]	; 0x54
   158e8:	b	158b4 <get_boolean_op_value@@Base+0xb8>
   158ec:	ldr	r2, [pc, #492]	; 15ae0 <get_boolean_op_value@@Base+0x2e4>
   158f0:	mov	r4, #6
   158f4:	ldr	r3, [r2, #72]	; 0x48
   158f8:	ldr	r1, [r2, #76]	; 0x4c
   158fc:	adds	r3, r3, #1
   15900:	adc	r1, r1, #0
   15904:	str	r3, [r2, #72]	; 0x48
   15908:	str	r1, [r2, #76]	; 0x4c
   1590c:	b	158b4 <get_boolean_op_value@@Base+0xb8>
   15910:	mov	r2, r0
   15914:	mov	r4, r0
   15918:	movw	r1, #38528	; 0x9680
   1591c:	movt	r1, #1
   15920:	mov	r0, r5
   15924:	bl	119a0 <strncmp@plt>
   15928:	cmp	r0, #0
   1592c:	beq	15a54 <get_boolean_op_value@@Base+0x258>
   15930:	movw	r1, #38532	; 0x9684
   15934:	movt	r1, #1
   15938:	mov	r2, r4
   1593c:	mov	r0, r5
   15940:	bl	119a0 <strncmp@plt>
   15944:	cmp	r0, #0
   15948:	beq	15a30 <get_boolean_op_value@@Base+0x234>
   1594c:	movw	r1, #38536	; 0x9688
   15950:	movt	r1, #1
   15954:	mov	r2, r4
   15958:	mov	r0, r5
   1595c:	bl	119a0 <strncmp@plt>
   15960:	cmp	r0, #0
   15964:	beq	15a78 <get_boolean_op_value@@Base+0x27c>
   15968:	movw	r1, #38540	; 0x968c
   1596c:	movt	r1, #1
   15970:	mov	r2, r4
   15974:	mov	r0, r5
   15978:	bl	119a0 <strncmp@plt>
   1597c:	cmp	r0, #0
   15980:	beq	15a98 <get_boolean_op_value@@Base+0x29c>
   15984:	movw	r1, #38544	; 0x9690
   15988:	movt	r1, #1
   1598c:	mov	r2, r4
   15990:	mov	r0, r5
   15994:	bl	119a0 <strncmp@plt>
   15998:	cmp	r0, #0
   1599c:	beq	15abc <get_boolean_op_value@@Base+0x2c0>
   159a0:	ldr	r6, [pc, #312]	; 15ae0 <get_boolean_op_value@@Base+0x2e4>
   159a4:	mov	r2, r4
   159a8:	movw	r1, #38548	; 0x9694
   159ac:	movt	r1, #1
   159b0:	mov	r0, r5
   159b4:	ldr	r3, [r6, #32]
   159b8:	ldr	ip, [r6, #36]	; 0x24
   159bc:	adds	r3, r3, #1
   159c0:	adc	ip, ip, #0
   159c4:	str	r3, [r6, #32]
   159c8:	str	ip, [r6, #36]	; 0x24
   159cc:	bl	119a0 <strncmp@plt>
   159d0:	cmp	r0, #0
   159d4:	moveq	r4, #5
   159d8:	beq	158b4 <get_boolean_op_value@@Base+0xb8>
   159dc:	ldr	r3, [r6, #40]	; 0x28
   159e0:	movw	r0, #43384	; 0xa978
   159e4:	movt	r0, #2
   159e8:	mov	r2, r5
   159ec:	movw	r1, #38552	; 0x9698
   159f0:	movt	r1, #1
   159f4:	ldr	ip, [r6, #44]	; 0x2c
   159f8:	ldr	r0, [r0]
   159fc:	adds	r3, r3, #1
   15a00:	adc	ip, ip, #0
   15a04:	str	r3, [r6, #40]	; 0x28
   15a08:	str	ip, [r6, #44]	; 0x2c
   15a0c:	bl	11910 <fprintf@plt>
   15a10:	ldr	r3, [r6, #48]	; 0x30
   15a14:	mov	r0, #1
   15a18:	ldr	r2, [r6, #52]	; 0x34
   15a1c:	adds	r3, r3, r0
   15a20:	adc	r2, r2, #0
   15a24:	str	r3, [r6, #48]	; 0x30
   15a28:	str	r2, [r6, #52]	; 0x34
   15a2c:	bl	118f8 <exit@plt>
   15a30:	ldr	r2, [pc, #168]	; 15ae0 <get_boolean_op_value@@Base+0x2e4>
   15a34:	mov	r4, #1
   15a38:	ldr	r3, [r2]
   15a3c:	ldr	r1, [r2, #4]
   15a40:	adds	r3, r3, r4
   15a44:	adc	r1, r1, #0
   15a48:	str	r3, [r2]
   15a4c:	str	r1, [r2, #4]
   15a50:	b	158b4 <get_boolean_op_value@@Base+0xb8>
   15a54:	ldr	r2, [pc, #132]	; 15ae0 <get_boolean_op_value@@Base+0x2e4>
   15a58:	mov	r4, r0
   15a5c:	ldr	r3, [r2, #-8]
   15a60:	ldr	r1, [r2, #-4]
   15a64:	adds	r3, r3, #1
   15a68:	adc	r1, r1, #0
   15a6c:	str	r3, [r2, #-8]
   15a70:	str	r1, [r2, #-4]
   15a74:	b	158b4 <get_boolean_op_value@@Base+0xb8>
   15a78:	ldr	r2, [pc, #96]	; 15ae0 <get_boolean_op_value@@Base+0x2e4>
   15a7c:	ldr	r3, [r2, #8]
   15a80:	ldr	r1, [r2, #12]
   15a84:	adds	r3, r3, #1
   15a88:	adc	r1, r1, #0
   15a8c:	str	r3, [r2, #8]
   15a90:	str	r1, [r2, #12]
   15a94:	b	158b4 <get_boolean_op_value@@Base+0xb8>
   15a98:	ldr	r2, [pc, #64]	; 15ae0 <get_boolean_op_value@@Base+0x2e4>
   15a9c:	mov	r4, #3
   15aa0:	ldr	r3, [r2, #16]
   15aa4:	ldr	r1, [r2, #20]
   15aa8:	adds	r3, r3, #1
   15aac:	adc	r1, r1, #0
   15ab0:	str	r3, [r2, #16]
   15ab4:	str	r1, [r2, #20]
   15ab8:	b	158b4 <get_boolean_op_value@@Base+0xb8>
   15abc:	ldr	r2, [pc, #28]	; 15ae0 <get_boolean_op_value@@Base+0x2e4>
   15ac0:	mov	r4, #4
   15ac4:	ldr	r3, [r2, #24]
   15ac8:	ldr	r1, [r2, #28]
   15acc:	adds	r3, r3, #1
   15ad0:	adc	r1, r1, #0
   15ad4:	str	r3, [r2, #24]
   15ad8:	str	r1, [r2, #28]
   15adc:	b	158b4 <get_boolean_op_value@@Base+0xb8>
   15ae0:	andeq	fp, r2, r0, ror r3

00015ae4 <init_grammar@@Base>:
   15ae4:	movw	r3, #46032	; 0xb3d0
   15ae8:	movt	r3, #2
   15aec:	str	r1, [r0]
   15af0:	ldr	r2, [r3]
   15af4:	ldr	r1, [r3, #4]
   15af8:	adds	r2, r2, #1
   15afc:	adc	r1, r1, #0
   15b00:	str	r2, [r3]
   15b04:	str	r1, [r3, #4]
   15b08:	bx	lr

00015b0c <destroy_grammar@@Base>:
   15b0c:	movw	r3, #46032	; 0xb3d0
   15b10:	movt	r3, #2
   15b14:	ldr	r2, [r3, #8]
   15b18:	ldr	r1, [r3, #12]
   15b1c:	adds	r2, r2, #1
   15b20:	adc	r1, r1, #0
   15b24:	str	r2, [r3, #8]
   15b28:	str	r1, [r3, #12]
   15b2c:	bx	lr

00015b30 <read_return_expression@@Base>:
   15b30:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15b34:	movw	r4, #46032	; 0xb3d0
   15b38:	movt	r4, #2
   15b3c:	ldr	r3, [r4, #16]
   15b40:	mov	r5, r0
   15b44:	ldr	r2, [r4, #20]
   15b48:	ldr	r0, [r0]
   15b4c:	adds	r3, r3, #1
   15b50:	strd	r6, [sp, #8]
   15b54:	str	r8, [sp, #16]
   15b58:	adc	r2, r2, #0
   15b5c:	str	r3, [r4, #16]
   15b60:	str	lr, [sp, #20]
   15b64:	str	r2, [r4, #20]
   15b68:	bl	122ec <next@@Base>
   15b6c:	ldr	r3, [r0]
   15b70:	cmp	r3, #1
   15b74:	bne	15c8c <read_return_expression@@Base+0x15c>
   15b78:	ldr	r3, [r4, #32]
   15b7c:	mov	r6, r0
   15b80:	mov	r0, #12
   15b84:	ldr	r2, [r4, #36]	; 0x24
   15b88:	adds	r3, r3, #1
   15b8c:	adc	r2, r2, #0
   15b90:	str	r3, [r4, #32]
   15b94:	str	r2, [r4, #36]	; 0x24
   15b98:	bl	118c8 <malloc@plt>
   15b9c:	ldr	r1, [r6, #4]
   15ba0:	mov	r7, r0
   15ba4:	bl	14eb8 <init_node_int@@Base>
   15ba8:	ldr	r3, [r4, #40]	; 0x28
   15bac:	mov	r0, r6
   15bb0:	ldr	r2, [r4, #44]	; 0x2c
   15bb4:	adds	r3, r3, #1
   15bb8:	adc	r2, r2, #0
   15bbc:	str	r3, [r4, #40]	; 0x28
   15bc0:	str	r2, [r4, #44]	; 0x2c
   15bc4:	bl	14c34 <free_token_int_value@@Base>
   15bc8:	ldr	r3, [r4, #48]	; 0x30
   15bcc:	mov	r0, #12
   15bd0:	ldr	r2, [r4, #52]	; 0x34
   15bd4:	adds	r3, r3, #1
   15bd8:	adc	r2, r2, #0
   15bdc:	str	r3, [r4, #48]	; 0x30
   15be0:	str	r2, [r4, #52]	; 0x34
   15be4:	bl	118c8 <malloc@plt>
   15be8:	mov	r1, r7
   15bec:	mov	r6, r0
   15bf0:	bl	14f4c <init_node_return@@Base>
   15bf4:	ldr	r3, [r4, #56]	; 0x38
   15bf8:	ldr	r2, [r4, #60]	; 0x3c
   15bfc:	ldr	r0, [r5]
   15c00:	adds	r3, r3, #1
   15c04:	adc	r2, r2, #0
   15c08:	str	r3, [r4, #56]	; 0x38
   15c0c:	str	r2, [r4, #60]	; 0x3c
   15c10:	bl	122ec <next@@Base>
   15c14:	ldr	r3, [r0]
   15c18:	cmp	r3, #8
   15c1c:	bne	15c6c <read_return_expression@@Base+0x13c>
   15c20:	ldr	r3, [r4, #72]	; 0x48
   15c24:	ldr	r2, [r4, #76]	; 0x4c
   15c28:	adds	r3, r3, #1
   15c2c:	adc	r2, r2, #0
   15c30:	str	r3, [r4, #72]	; 0x48
   15c34:	str	r2, [r4, #76]	; 0x4c
   15c38:	bl	14d30 <free_token_semicolon@@Base>
   15c3c:	ldr	r3, [r4, #80]	; 0x50
   15c40:	ldr	r2, [r4, #84]	; 0x54
   15c44:	adds	r3, r3, #1
   15c48:	adc	r2, r2, #0
   15c4c:	str	r3, [r4, #80]	; 0x50
   15c50:	str	r2, [r4, #84]	; 0x54
   15c54:	mov	r0, r6
   15c58:	ldrd	r4, [sp]
   15c5c:	ldrd	r6, [sp, #8]
   15c60:	ldr	r8, [sp, #16]
   15c64:	add	sp, sp, #20
   15c68:	pop	{pc}		; (ldr pc, [sp], #4)
   15c6c:	ldr	r3, [r4, #64]	; 0x40
   15c70:	mov	r6, #0
   15c74:	ldr	r2, [r4, #68]	; 0x44
   15c78:	adds	r3, r3, #1
   15c7c:	adc	r2, r2, r6
   15c80:	str	r3, [r4, #64]	; 0x40
   15c84:	str	r2, [r4, #68]	; 0x44
   15c88:	b	15c54 <read_return_expression@@Base+0x124>
   15c8c:	ldr	r3, [r4, #24]
   15c90:	mov	r6, #0
   15c94:	ldr	r2, [r4, #28]
   15c98:	adds	r3, r3, #1
   15c9c:	adc	r2, r2, r6
   15ca0:	str	r3, [r4, #24]
   15ca4:	str	r2, [r4, #28]
   15ca8:	b	15c54 <read_return_expression@@Base+0x124>

00015cac <read_boolean_unary_expression@@Base>:
   15cac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15cb0:	movw	r4, #46032	; 0xb3d0
   15cb4:	movt	r4, #2
   15cb8:	ldr	r3, [r4, #88]	; 0x58
   15cbc:	mov	r5, r0
   15cc0:	mov	r0, #20
   15cc4:	strd	r6, [sp, #8]
   15cc8:	ldr	r2, [r4, #92]	; 0x5c
   15ccc:	strd	r8, [sp, #16]
   15cd0:	str	sl, [sp, #24]
   15cd4:	adds	r3, r3, #1
   15cd8:	str	lr, [sp, #28]
   15cdc:	adc	r2, r2, #0
   15ce0:	str	r3, [r4, #88]	; 0x58
   15ce4:	str	r2, [r4, #92]	; 0x5c
   15ce8:	bl	118c8 <malloc@plt>
   15cec:	mov	r6, r0
   15cf0:	ldr	r0, [r5]
   15cf4:	bl	122ec <next@@Base>
   15cf8:	ldr	r8, [r0]
   15cfc:	cmp	r8, #12
   15d00:	bne	15e24 <read_boolean_unary_expression@@Base+0x178>
   15d04:	ldr	r3, [r4, #104]	; 0x68
   15d08:	mov	r9, r0
   15d0c:	ldr	r2, [r4, #108]	; 0x6c
   15d10:	adds	r3, r3, #1
   15d14:	adc	r2, r2, #0
   15d18:	str	r3, [r4, #104]	; 0x68
   15d1c:	str	r2, [r4, #108]	; 0x6c
   15d20:	bl	157fc <get_boolean_op_value@@Base>
   15d24:	ldr	r3, [r4, #120]	; 0x78
   15d28:	mov	r7, r0
   15d2c:	mov	r0, r9
   15d30:	ldr	r2, [r4, #124]	; 0x7c
   15d34:	adds	r3, r3, #1
   15d38:	adc	r2, r2, #0
   15d3c:	str	r3, [r4, #120]	; 0x78
   15d40:	str	r2, [r4, #124]	; 0x7c
   15d44:	bl	14dc0 <free_token_boolean_op@@Base>
   15d48:	ldr	r3, [r4, #128]	; 0x80
   15d4c:	ldr	r2, [r4, #132]	; 0x84
   15d50:	ldr	r0, [r5]
   15d54:	adds	r3, r3, #1
   15d58:	adc	r2, r2, #0
   15d5c:	str	r3, [r4, #128]	; 0x80
   15d60:	str	r2, [r4, #132]	; 0x84
   15d64:	bl	122ec <next@@Base>
   15d68:	ldr	r3, [r0]
   15d6c:	mov	r5, r0
   15d70:	cmp	r3, #1
   15d74:	bne	15e64 <read_boolean_unary_expression@@Base+0x1b8>
   15d78:	ldr	r3, [r4, #144]	; 0x90
   15d7c:	mov	r0, r8
   15d80:	ldr	r2, [r4, #148]	; 0x94
   15d84:	adds	r3, r3, #1
   15d88:	adc	r2, r2, #0
   15d8c:	str	r3, [r4, #144]	; 0x90
   15d90:	str	r2, [r4, #148]	; 0x94
   15d94:	bl	118c8 <malloc@plt>
   15d98:	ldr	r1, [r5, #4]
   15d9c:	mov	r8, r0
   15da0:	bl	14eb8 <init_node_int@@Base>
   15da4:	ldr	r3, [r4, #160]	; 0xa0
   15da8:	mov	r0, r5
   15dac:	ldr	r1, [r4, #164]	; 0xa4
   15db0:	adds	r3, r3, #1
   15db4:	adc	r1, r1, #0
   15db8:	str	r3, [r4, #160]	; 0xa0
   15dbc:	str	r1, [r4, #164]	; 0xa4
   15dc0:	bl	14c34 <free_token_int_value@@Base>
   15dc4:	ldr	ip, [r4, #168]	; 0xa8
   15dc8:	mov	r3, #0
   15dcc:	mov	r2, r8
   15dd0:	mov	r1, r7
   15dd4:	mov	r0, r6
   15dd8:	ldr	lr, [r4, #172]	; 0xac
   15ddc:	adds	ip, ip, #1
   15de0:	adc	lr, lr, r3
   15de4:	str	ip, [r4, #168]	; 0xa8
   15de8:	str	lr, [r4, #172]	; 0xac
   15dec:	bl	14fe8 <init_node_boolean_operator@@Base>
   15df0:	ldr	r3, [r4, #176]	; 0xb0
   15df4:	ldr	r2, [r4, #180]	; 0xb4
   15df8:	adds	r3, r3, #1
   15dfc:	adc	r2, r2, #0
   15e00:	str	r3, [r4, #176]	; 0xb0
   15e04:	str	r2, [r4, #180]	; 0xb4
   15e08:	mov	r0, r6
   15e0c:	ldrd	r4, [sp]
   15e10:	ldrd	r6, [sp, #8]
   15e14:	ldrd	r8, [sp, #16]
   15e18:	ldr	sl, [sp, #24]
   15e1c:	add	sp, sp, #28
   15e20:	pop	{pc}		; (ldr pc, [sp], #4)
   15e24:	ldr	r3, [r4, #96]	; 0x60
   15e28:	mov	r0, r6
   15e2c:	mov	r6, #0
   15e30:	ldr	r2, [r4, #100]	; 0x64
   15e34:	adds	r3, r3, #1
   15e38:	adc	r2, r2, r6
   15e3c:	str	r3, [r4, #96]	; 0x60
   15e40:	str	r2, [r4, #100]	; 0x64
   15e44:	bl	1503c <free_node_boolean_operator@@Base>
   15e48:	ldr	r3, [r4, #112]	; 0x70
   15e4c:	ldr	r2, [r4, #116]	; 0x74
   15e50:	adds	r3, r3, #1
   15e54:	adc	r2, r2, r6
   15e58:	str	r3, [r4, #112]	; 0x70
   15e5c:	str	r2, [r4, #116]	; 0x74
   15e60:	b	15e08 <read_boolean_unary_expression@@Base+0x15c>
   15e64:	ldr	r3, [r4, #136]	; 0x88
   15e68:	mov	r0, r6
   15e6c:	mov	r6, #0
   15e70:	ldr	r2, [r4, #140]	; 0x8c
   15e74:	adds	r3, r3, #1
   15e78:	adc	r2, r2, r6
   15e7c:	str	r3, [r4, #136]	; 0x88
   15e80:	str	r2, [r4, #140]	; 0x8c
   15e84:	bl	1503c <free_node_boolean_operator@@Base>
   15e88:	ldr	r3, [r4, #152]	; 0x98
   15e8c:	ldr	r2, [r4, #156]	; 0x9c
   15e90:	adds	r3, r3, #1
   15e94:	adc	r2, r2, r6
   15e98:	str	r3, [r4, #152]	; 0x98
   15e9c:	str	r2, [r4, #156]	; 0x9c
   15ea0:	b	15e08 <read_boolean_unary_expression@@Base+0x15c>

00015ea4 <read_boolean_binary_expression@@Base>:
   15ea4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15ea8:	movw	r4, #46032	; 0xb3d0
   15eac:	movt	r4, #2
   15eb0:	ldr	r3, [r4, #184]	; 0xb8
   15eb4:	mov	r5, r0
   15eb8:	ldr	r2, [r4, #188]	; 0xbc
   15ebc:	ldr	r0, [r0]
   15ec0:	adds	r3, r3, #1
   15ec4:	strd	r6, [sp, #8]
   15ec8:	strd	r8, [sp, #16]
   15ecc:	adc	r2, r2, #0
   15ed0:	str	sl, [sp, #24]
   15ed4:	str	lr, [sp, #28]
   15ed8:	str	r3, [r4, #184]	; 0xb8
   15edc:	str	r2, [r4, #188]	; 0xbc
   15ee0:	bl	122ec <next@@Base>
   15ee4:	ldr	r1, [r0]
   15ee8:	mov	r6, r0
   15eec:	cmp	r1, #1
   15ef0:	beq	15f98 <read_boolean_binary_expression@@Base+0xf4>
   15ef4:	ldr	r3, [r4, #192]	; 0xc0
   15ef8:	ldr	r2, [r4, #196]	; 0xc4
   15efc:	adds	r3, r3, #1
   15f00:	adc	r2, r2, #0
   15f04:	cmp	r1, #12
   15f08:	str	r3, [r4, #192]	; 0xc0
   15f0c:	movne	r5, #0
   15f10:	str	r2, [r4, #196]	; 0xc4
   15f14:	beq	15f34 <read_boolean_binary_expression@@Base+0x90>
   15f18:	mov	r0, r5
   15f1c:	ldrd	r4, [sp]
   15f20:	ldrd	r6, [sp, #8]
   15f24:	ldrd	r8, [sp, #16]
   15f28:	ldr	sl, [sp, #24]
   15f2c:	add	sp, sp, #28
   15f30:	pop	{pc}		; (ldr pc, [sp], #4)
   15f34:	ldr	r3, [r4, #208]	; 0xd0
   15f38:	mov	r1, r0
   15f3c:	ldr	r2, [r4, #212]	; 0xd4
   15f40:	ldr	r0, [r5]
   15f44:	adds	r3, r3, #1
   15f48:	adc	r2, r2, #0
   15f4c:	str	r3, [r4, #208]	; 0xd0
   15f50:	str	r2, [r4, #212]	; 0xd4
   15f54:	bl	12484 <push_back@@Base>
   15f58:	ldr	r3, [r4, #216]	; 0xd8
   15f5c:	mov	r0, r5
   15f60:	ldr	r2, [r4, #220]	; 0xdc
   15f64:	adds	r3, r3, #1
   15f68:	adc	r2, r2, #0
   15f6c:	str	r3, [r4, #216]	; 0xd8
   15f70:	str	r2, [r4, #220]	; 0xdc
   15f74:	bl	15cac <read_boolean_unary_expression@@Base>
   15f78:	ldr	r3, [r4, #224]	; 0xe0
   15f7c:	mov	r5, r0
   15f80:	ldr	r2, [r4, #228]	; 0xe4
   15f84:	adds	r3, r3, #1
   15f88:	adc	r2, r2, #0
   15f8c:	str	r3, [r4, #224]	; 0xe0
   15f90:	str	r2, [r4, #228]	; 0xe4
   15f94:	b	15f18 <read_boolean_binary_expression@@Base+0x74>
   15f98:	ldr	r3, [r4, #200]	; 0xc8
   15f9c:	mov	r0, #12
   15fa0:	ldr	r2, [r4, #204]	; 0xcc
   15fa4:	adds	r3, r3, #1
   15fa8:	adc	r2, r2, #0
   15fac:	str	r3, [r4, #200]	; 0xc8
   15fb0:	str	r2, [r4, #204]	; 0xcc
   15fb4:	bl	118c8 <malloc@plt>
   15fb8:	ldr	r1, [r6, #4]
   15fbc:	mov	r7, r0
   15fc0:	bl	14eb8 <init_node_int@@Base>
   15fc4:	ldr	r3, [r4, #232]	; 0xe8
   15fc8:	mov	r0, r6
   15fcc:	ldr	r2, [r4, #236]	; 0xec
   15fd0:	adds	r3, r3, #1
   15fd4:	adc	r2, r2, #0
   15fd8:	str	r3, [r4, #232]	; 0xe8
   15fdc:	str	r2, [r4, #236]	; 0xec
   15fe0:	bl	14c34 <free_token_int_value@@Base>
   15fe4:	ldr	r3, [r4, #240]	; 0xf0
   15fe8:	ldr	r2, [r4, #244]	; 0xf4
   15fec:	ldr	r0, [r5]
   15ff0:	adds	r3, r3, #1
   15ff4:	adc	r2, r2, #0
   15ff8:	str	r3, [r4, #240]	; 0xf0
   15ffc:	str	r2, [r4, #244]	; 0xf4
   16000:	bl	122ec <next@@Base>
   16004:	ldr	r9, [r0]
   16008:	mov	sl, r0
   1600c:	cmp	r9, #12
   16010:	bne	16120 <read_boolean_binary_expression@@Base+0x27c>
   16014:	ldr	r3, [r4, #256]	; 0x100
   16018:	ldr	r1, [r4, #260]	; 0x104
   1601c:	adds	r3, r3, #1
   16020:	adc	r1, r1, #0
   16024:	str	r3, [r4, #256]	; 0x100
   16028:	str	r1, [r4, #260]	; 0x104
   1602c:	bl	157fc <get_boolean_op_value@@Base>
   16030:	ldr	r3, [r4, #272]	; 0x110
   16034:	mov	r8, r0
   16038:	mov	r0, sl
   1603c:	ldr	r1, [r4, #276]	; 0x114
   16040:	adds	r3, r3, #1
   16044:	adc	r1, r1, #0
   16048:	str	r3, [r4, #272]	; 0x110
   1604c:	str	r1, [r4, #276]	; 0x114
   16050:	bl	14dc0 <free_token_boolean_op@@Base>
   16054:	ldr	r3, [r4, #280]	; 0x118
   16058:	ldr	r2, [r4, #284]	; 0x11c
   1605c:	ldr	r0, [r5]
   16060:	adds	r3, r3, #1
   16064:	adc	r2, r2, #0
   16068:	str	r3, [r4, #280]	; 0x118
   1606c:	str	r2, [r4, #284]	; 0x11c
   16070:	bl	122ec <next@@Base>
   16074:	ldr	r3, [r0]
   16078:	mov	sl, r0
   1607c:	cmp	r3, #1
   16080:	bne	16160 <read_boolean_binary_expression@@Base+0x2bc>
   16084:	ldr	r3, [r4, #296]	; 0x128
   16088:	mov	r0, r9
   1608c:	ldr	r1, [r4, #300]	; 0x12c
   16090:	adds	r3, r3, #1
   16094:	adc	r1, r1, #0
   16098:	str	r3, [r4, #296]	; 0x128
   1609c:	str	r1, [r4, #300]	; 0x12c
   160a0:	bl	118c8 <malloc@plt>
   160a4:	ldr	r1, [sl, #4]
   160a8:	mov	r6, r0
   160ac:	bl	14eb8 <init_node_int@@Base>
   160b0:	ldr	r2, [r4, #312]	; 0x138
   160b4:	mov	r0, sl
   160b8:	ldr	r3, [r4, #316]	; 0x13c
   160bc:	adds	r2, r2, #1
   160c0:	adc	r3, r3, #0
   160c4:	str	r2, [r4, #312]	; 0x138
   160c8:	str	r3, [r4, #316]	; 0x13c
   160cc:	bl	14c34 <free_token_int_value@@Base>
   160d0:	ldr	r2, [r4, #320]	; 0x140
   160d4:	mov	r0, #20
   160d8:	ldr	r3, [r4, #324]	; 0x144
   160dc:	adds	r2, r2, #1
   160e0:	adc	r3, r3, #0
   160e4:	str	r2, [r4, #320]	; 0x140
   160e8:	str	r3, [r4, #324]	; 0x144
   160ec:	bl	118c8 <malloc@plt>
   160f0:	mov	r3, r6
   160f4:	mov	r2, r7
   160f8:	mov	r1, r8
   160fc:	mov	r5, r0
   16100:	bl	14fe8 <init_node_boolean_operator@@Base>
   16104:	ldr	r3, [r4, #328]	; 0x148
   16108:	ldr	r2, [r4, #332]	; 0x14c
   1610c:	adds	r3, r3, #1
   16110:	adc	r2, r2, #0
   16114:	str	r3, [r4, #328]	; 0x148
   16118:	str	r2, [r4, #332]	; 0x14c
   1611c:	b	15f18 <read_boolean_binary_expression@@Base+0x74>
   16120:	ldr	r3, [r4, #248]	; 0xf8
   16124:	mov	r5, #0
   16128:	mov	r0, r7
   1612c:	ldr	r2, [r4, #252]	; 0xfc
   16130:	adds	r3, r3, #1
   16134:	adc	r2, r2, r5
   16138:	str	r3, [r4, #248]	; 0xf8
   1613c:	str	r2, [r4, #252]	; 0xfc
   16140:	bl	15108 <free_node@@Base>
   16144:	ldr	r3, [r4, #264]	; 0x108
   16148:	ldr	r2, [r4, #268]	; 0x10c
   1614c:	adds	r3, r3, #1
   16150:	adc	r2, r2, r5
   16154:	str	r3, [r4, #264]	; 0x108
   16158:	str	r2, [r4, #268]	; 0x10c
   1615c:	b	15f18 <read_boolean_binary_expression@@Base+0x74>
   16160:	ldr	r3, [r4, #288]	; 0x120
   16164:	mov	r5, #0
   16168:	mov	r0, r7
   1616c:	ldr	r2, [r4, #292]	; 0x124
   16170:	adds	r3, r3, #1
   16174:	adc	r2, r2, r5
   16178:	str	r3, [r4, #288]	; 0x120
   1617c:	str	r2, [r4, #292]	; 0x124
   16180:	bl	15108 <free_node@@Base>
   16184:	ldr	r3, [r4, #304]	; 0x130
   16188:	ldr	r2, [r4, #308]	; 0x134
   1618c:	adds	r3, r3, #1
   16190:	adc	r2, r2, r5
   16194:	str	r3, [r4, #304]	; 0x130
   16198:	str	r2, [r4, #308]	; 0x134
   1619c:	b	15f18 <read_boolean_binary_expression@@Base+0x74>

000161a0 <read_single_boolean_expression@@Base>:
   161a0:	cmp	r1, #0
   161a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   161a8:	strd	r6, [sp, #8]
   161ac:	str	r8, [sp, #16]
   161b0:	str	lr, [sp, #20]
   161b4:	beq	1625c <read_single_boolean_expression@@Base+0xbc>
   161b8:	mov	r6, r3
   161bc:	ldr	r3, [r2]
   161c0:	mov	r5, r2
   161c4:	cmp	r3, #0
   161c8:	beq	1629c <read_single_boolean_expression@@Base+0xfc>
   161cc:	ldr	r4, [pc, #236]	; 162c0 <read_single_boolean_expression@@Base+0x120>
   161d0:	ldr	r3, [r4, #16]
   161d4:	ldr	r2, [r4, #20]
   161d8:	adds	r3, r3, #1
   161dc:	adc	r2, r2, #0
   161e0:	str	r3, [r4, #16]
   161e4:	str	r2, [r4, #20]
   161e8:	bl	15ea4 <read_boolean_binary_expression@@Base>
   161ec:	ldr	r2, [r4, #32]
   161f0:	mov	r8, r0
   161f4:	mov	r0, #20
   161f8:	ldr	ip, [r4, #36]	; 0x24
   161fc:	adds	r2, r2, #1
   16200:	adc	ip, ip, #0
   16204:	str	r2, [r4, #32]
   16208:	str	ip, [r4, #36]	; 0x24
   1620c:	bl	118c8 <malloc@plt>
   16210:	mov	r3, r8
   16214:	mov	r1, r6
   16218:	mov	r2, #0
   1621c:	mov	r7, r0
   16220:	bl	14fe8 <init_node_boolean_operator@@Base>
   16224:	ldr	r3, [r4, #40]	; 0x28
   16228:	mov	r1, #0
   1622c:	ldr	r2, [r4, #44]	; 0x2c
   16230:	str	r1, [r5]
   16234:	adds	r3, r3, #1
   16238:	adc	r2, r2, r1
   1623c:	str	r3, [r4, #40]	; 0x28
   16240:	str	r2, [r4, #44]	; 0x2c
   16244:	mov	r0, r7
   16248:	ldrd	r4, [sp]
   1624c:	ldrd	r6, [sp, #8]
   16250:	ldr	r8, [sp, #16]
   16254:	add	sp, sp, #20
   16258:	pop	{pc}		; (ldr pc, [sp], #4)
   1625c:	ldr	r4, [pc, #92]	; 162c0 <read_single_boolean_expression@@Base+0x120>
   16260:	ldr	r3, [r4]
   16264:	ldr	r2, [r4, #4]
   16268:	adds	r3, r3, #1
   1626c:	adc	r2, r2, #0
   16270:	str	r3, [r4]
   16274:	str	r2, [r4, #4]
   16278:	bl	15ea4 <read_boolean_binary_expression@@Base>
   1627c:	ldr	r3, [r4, #8]
   16280:	mov	r7, r0
   16284:	ldr	r2, [r4, #12]
   16288:	adds	r3, r3, #1
   1628c:	adc	r2, r2, #0
   16290:	str	r3, [r4, #8]
   16294:	str	r2, [r4, #12]
   16298:	b	16244 <read_single_boolean_expression@@Base+0xa4>
   1629c:	ldr	r2, [pc, #28]	; 162c0 <read_single_boolean_expression@@Base+0x120>
   162a0:	ldr	r3, [r3, #4]
   162a4:	ldr	r3, [r2, #24]
   162a8:	ldr	r1, [r2, #28]
   162ac:	adds	r3, r3, #1
   162b0:	adc	r1, r1, #0
   162b4:	str	r3, [r2, #24]
   162b8:	str	r1, [r2, #28]
   162bc:	udf	#0
   162c0:	andeq	fp, r2, r0, lsr #10

000162c4 <read_boolean_expression@@Base>:
   162c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   162c8:	mov	r5, r0
   162cc:	ldr	r4, [pc, #556]	; 16500 <read_boolean_expression@@Base+0x23c>
   162d0:	ldr	r0, [r0]
   162d4:	strd	r6, [sp, #8]
   162d8:	mov	r6, #0
   162dc:	str	r8, [sp, #16]
   162e0:	ldr	r3, [r4, #-8]
   162e4:	str	lr, [sp, #20]
   162e8:	sub	sp, sp, #8
   162ec:	ldr	r2, [r4, #-4]
   162f0:	str	r6, [sp, #4]
   162f4:	adds	r3, r3, #1
   162f8:	adc	r2, r2, r6
   162fc:	str	r3, [r4, #-8]
   16300:	str	r2, [r4, #-4]
   16304:	bl	122ec <next@@Base>
   16308:	ldr	r2, [r4]
   1630c:	ldr	r1, [r4, #4]
   16310:	ldr	r3, [r0]
   16314:	adds	r2, r2, #1
   16318:	adc	r1, r1, r6
   1631c:	str	r2, [r4]
   16320:	cmp	r3, #4
   16324:	str	r1, [r4, #4]
   16328:	beq	164b0 <read_boolean_expression@@Base+0x1ec>
   1632c:	mov	r8, #1
   16330:	b	16384 <read_boolean_expression@@Base+0xc0>
   16334:	ldr	r3, [r4, #32]
   16338:	ldr	r2, [r4, #36]	; 0x24
   1633c:	adds	r3, r3, #1
   16340:	adc	r2, r2, #0
   16344:	str	r3, [r4, #32]
   16348:	str	r2, [r4, #36]	; 0x24
   1634c:	bl	157fc <get_boolean_op_value@@Base>
   16350:	ldr	r3, [r4, #56]	; 0x38
   16354:	mov	r7, r0
   16358:	str	r8, [sp, #4]
   1635c:	ldr	r2, [r4, #60]	; 0x3c
   16360:	adds	r3, r3, #1
   16364:	adc	r2, r2, #0
   16368:	str	r3, [r4, #56]	; 0x38
   1636c:	str	r2, [r4, #60]	; 0x3c
   16370:	ldr	r0, [r5]
   16374:	bl	122ec <next@@Base>
   16378:	ldr	r3, [r0]
   1637c:	cmp	r3, #4
   16380:	beq	164b0 <read_boolean_expression@@Base+0x1ec>
   16384:	cmp	r3, #3
   16388:	beq	163f4 <read_boolean_expression@@Base+0x130>
   1638c:	cmp	r3, #12
   16390:	beq	16334 <read_boolean_expression@@Base+0x70>
   16394:	cmp	r3, #1
   16398:	beq	16440 <read_boolean_expression@@Base+0x17c>
   1639c:	ldr	ip, [r4, #8]
   163a0:	mov	r1, #1
   163a4:	movw	r3, #43384	; 0xa978
   163a8:	movt	r3, #2
   163ac:	mov	r2, #33	; 0x21
   163b0:	ldr	lr, [r4, #12]
   163b4:	movw	r0, #38696	; 0x9728
   163b8:	movt	r0, #1
   163bc:	ldr	r3, [r3]
   163c0:	adds	ip, ip, r1
   163c4:	adc	lr, lr, #0
   163c8:	str	ip, [r4, #8]
   163cc:	str	lr, [r4, #12]
   163d0:	bl	11880 <fwrite@plt>
   163d4:	ldr	r3, [r4, #72]	; 0x48
   163d8:	mov	r0, #1
   163dc:	ldr	r2, [r4, #76]	; 0x4c
   163e0:	adds	r3, r3, r0
   163e4:	adc	r2, r2, #0
   163e8:	str	r3, [r4, #72]	; 0x48
   163ec:	str	r2, [r4, #76]	; 0x4c
   163f0:	bl	118f8 <exit@plt>
   163f4:	ldr	ip, [r4, #24]
   163f8:	mov	r1, r6
   163fc:	mov	r3, r7
   16400:	add	r2, sp, #4
   16404:	mov	r0, r5
   16408:	ldr	lr, [r4, #28]
   1640c:	adds	ip, ip, #1
   16410:	adc	lr, lr, #0
   16414:	str	ip, [r4, #24]
   16418:	str	lr, [r4, #28]
   1641c:	bl	161a0 <read_single_boolean_expression@@Base>
   16420:	ldr	r3, [r4, #64]	; 0x40
   16424:	mov	r6, r0
   16428:	ldr	r2, [r4, #68]	; 0x44
   1642c:	adds	r3, r3, #1
   16430:	adc	r2, r2, #0
   16434:	str	r3, [r4, #64]	; 0x40
   16438:	str	r2, [r4, #68]	; 0x44
   1643c:	b	16370 <read_boolean_expression@@Base+0xac>
   16440:	ldr	r3, [r4, #16]
   16444:	mov	r1, r0
   16448:	ldr	r2, [r4, #20]
   1644c:	ldr	r0, [r5]
   16450:	adds	r3, r3, #1
   16454:	adc	r2, r2, #0
   16458:	str	r3, [r4, #16]
   1645c:	str	r2, [r4, #20]
   16460:	bl	12484 <push_back@@Base>
   16464:	ldr	ip, [r4, #40]	; 0x28
   16468:	mov	r1, r6
   1646c:	mov	r3, r7
   16470:	add	r2, sp, #4
   16474:	mov	r0, r5
   16478:	ldr	lr, [r4, #44]	; 0x2c
   1647c:	adds	ip, ip, #1
   16480:	adc	lr, lr, #0
   16484:	str	ip, [r4, #40]	; 0x28
   16488:	str	lr, [r4, #44]	; 0x2c
   1648c:	bl	161a0 <read_single_boolean_expression@@Base>
   16490:	ldr	r3, [r4, #48]	; 0x30
   16494:	mov	r6, r0
   16498:	ldr	r2, [r4, #52]	; 0x34
   1649c:	adds	r3, r3, #1
   164a0:	adc	r2, r2, #0
   164a4:	str	r3, [r4, #48]	; 0x30
   164a8:	str	r2, [r4, #52]	; 0x34
   164ac:	b	16370 <read_boolean_expression@@Base+0xac>
   164b0:	ldr	r3, [r4, #80]	; 0x50
   164b4:	ldr	r2, [r4, #84]	; 0x54
   164b8:	adds	r3, r3, #1
   164bc:	adc	r2, r2, #0
   164c0:	str	r3, [r4, #80]	; 0x50
   164c4:	str	r2, [r4, #84]	; 0x54
   164c8:	bl	14ca0 <free_token_cpar@@Base>
   164cc:	ldr	r3, [r4, #88]	; 0x58
   164d0:	mov	r0, r6
   164d4:	ldr	r2, [r4, #92]	; 0x5c
   164d8:	adds	r3, r3, #1
   164dc:	adc	r2, r2, #0
   164e0:	str	r3, [r4, #88]	; 0x58
   164e4:	str	r2, [r4, #92]	; 0x5c
   164e8:	add	sp, sp, #8
   164ec:	ldrd	r4, [sp]
   164f0:	ldrd	r6, [sp, #8]
   164f4:	ldr	r8, [sp, #16]
   164f8:	add	sp, sp, #20
   164fc:	pop	{pc}		; (ldr pc, [sp], #4)
   16500:	andeq	fp, r2, r0, ror #10

00016504 <read_if_statement@@Base>:
   16504:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16508:	mov	r5, r0
   1650c:	ldr	r4, [pc, #460]	; 166e0 <read_if_statement@@Base+0x1dc>
   16510:	ldr	r0, [r0]
   16514:	strd	r6, [sp, #8]
   16518:	str	r8, [sp, #16]
   1651c:	ldr	r3, [r4]
   16520:	str	lr, [sp, #20]
   16524:	ldr	r2, [r4, #4]
   16528:	adds	r3, r3, #1
   1652c:	adc	r2, r2, #0
   16530:	str	r3, [r4]
   16534:	str	r2, [r4, #4]
   16538:	bl	122ec <next@@Base>
   1653c:	ldr	r3, [r0]
   16540:	cmp	r3, #3
   16544:	bne	16664 <read_if_statement@@Base+0x160>
   16548:	ldr	r3, [r4, #16]
   1654c:	ldr	r2, [r4, #20]
   16550:	adds	r3, r3, #1
   16554:	adc	r2, r2, #0
   16558:	str	r3, [r4, #16]
   1655c:	str	r2, [r4, #20]
   16560:	bl	14c7c <free_token_opar@@Base>
   16564:	ldr	r3, [r4, #24]
   16568:	mov	r0, r5
   1656c:	ldr	r2, [r4, #28]
   16570:	adds	r3, r3, #1
   16574:	adc	r2, r2, #0
   16578:	str	r3, [r4, #24]
   1657c:	str	r2, [r4, #28]
   16580:	bl	162c4 <read_boolean_expression@@Base>
   16584:	ldr	r3, [r4, #32]
   16588:	mov	r6, r0
   1658c:	mov	r0, r5
   16590:	ldr	r2, [r4, #36]	; 0x24
   16594:	adds	r3, r3, #1
   16598:	adc	r2, r2, #0
   1659c:	str	r3, [r4, #32]
   165a0:	str	r2, [r4, #36]	; 0x24
   165a4:	bl	166e4 <read_body@@Base>
   165a8:	ldr	r3, [r4, #40]	; 0x28
   165ac:	mov	r7, r0
   165b0:	ldr	r2, [r4, #44]	; 0x2c
   165b4:	ldr	r0, [r5]
   165b8:	adds	r3, r3, #1
   165bc:	adc	r2, r2, #0
   165c0:	str	r3, [r4, #40]	; 0x28
   165c4:	str	r2, [r4, #44]	; 0x2c
   165c8:	bl	122ec <next@@Base>
   165cc:	ldr	r3, [r0]
   165d0:	mov	r1, r0
   165d4:	cmp	r3, #11
   165d8:	beq	16684 <read_if_statement@@Base+0x180>
   165dc:	ldr	r3, [r4, #56]	; 0x38
   165e0:	mov	r8, #0
   165e4:	ldr	r2, [r4, #60]	; 0x3c
   165e8:	ldr	r0, [r5]
   165ec:	adds	r3, r3, #1
   165f0:	adc	r2, r2, r8
   165f4:	str	r3, [r4, #56]	; 0x38
   165f8:	str	r2, [r4, #60]	; 0x3c
   165fc:	bl	12484 <push_back@@Base>
   16600:	ldr	r3, [r4, #80]	; 0x50
   16604:	ldr	r2, [r4, #84]	; 0x54
   16608:	adds	r3, r3, #1
   1660c:	adc	r2, r2, r8
   16610:	str	r3, [r4, #80]	; 0x50
   16614:	str	r2, [r4, #84]	; 0x54
   16618:	mov	r0, #20
   1661c:	bl	118c8 <malloc@plt>
   16620:	mov	r3, r8
   16624:	mov	r2, r7
   16628:	mov	r1, r6
   1662c:	mov	r5, r0
   16630:	bl	14f94 <init_node_if@@Base>
   16634:	ldr	r3, [r4, #88]	; 0x58
   16638:	ldr	r2, [r4, #92]	; 0x5c
   1663c:	adds	r3, r3, #1
   16640:	adc	r2, r2, #0
   16644:	str	r3, [r4, #88]	; 0x58
   16648:	str	r2, [r4, #92]	; 0x5c
   1664c:	mov	r0, r5
   16650:	ldrd	r4, [sp]
   16654:	ldrd	r6, [sp, #8]
   16658:	ldr	r8, [sp, #16]
   1665c:	add	sp, sp, #20
   16660:	pop	{pc}		; (ldr pc, [sp], #4)
   16664:	ldr	r3, [r4, #8]
   16668:	mov	r5, #0
   1666c:	ldr	r2, [r4, #12]
   16670:	adds	r3, r3, #1
   16674:	adc	r2, r2, r5
   16678:	str	r3, [r4, #8]
   1667c:	str	r2, [r4, #12]
   16680:	b	1664c <read_if_statement@@Base+0x148>
   16684:	ldr	r3, [r4, #48]	; 0x30
   16688:	ldr	r2, [r4, #52]	; 0x34
   1668c:	adds	r3, r3, #1
   16690:	adc	r2, r2, #0
   16694:	str	r3, [r4, #48]	; 0x30
   16698:	str	r2, [r4, #52]	; 0x34
   1669c:	bl	14d9c <free_token_else@@Base>
   166a0:	ldr	r3, [r4, #64]	; 0x40
   166a4:	mov	r0, r5
   166a8:	ldr	r2, [r4, #68]	; 0x44
   166ac:	adds	r3, r3, #1
   166b0:	adc	r2, r2, #0
   166b4:	str	r3, [r4, #64]	; 0x40
   166b8:	str	r2, [r4, #68]	; 0x44
   166bc:	bl	166e4 <read_body@@Base>
   166c0:	ldr	r3, [r4, #72]	; 0x48
   166c4:	mov	r8, r0
   166c8:	ldr	r2, [r4, #76]	; 0x4c
   166cc:	adds	r3, r3, #1
   166d0:	adc	r2, r2, #0
   166d4:	str	r3, [r4, #72]	; 0x48
   166d8:	str	r2, [r4, #76]	; 0x4c
   166dc:	b	16618 <read_if_statement@@Base+0x114>
   166e0:	andeq	fp, r2, r0, asr #11

000166e4 <read_body@@Base>:
   166e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   166e8:	mov	r5, r0
   166ec:	ldr	r4, [pc, #624]	; 16964 <read_body@@Base+0x280>
   166f0:	ldr	r0, [r0]
   166f4:	strd	r6, [sp, #8]
   166f8:	str	r8, [sp, #16]
   166fc:	ldr	r3, [r4]
   16700:	str	lr, [sp, #20]
   16704:	ldr	r2, [r4, #4]
   16708:	adds	r3, r3, #1
   1670c:	adc	r2, r2, #0
   16710:	str	r3, [r4]
   16714:	str	r2, [r4, #4]
   16718:	bl	122ec <next@@Base>
   1671c:	ldr	r3, [r0]
   16720:	cmp	r3, #5
   16724:	bne	16904 <read_body@@Base+0x220>
   16728:	ldr	r3, [r4, #16]
   1672c:	ldr	r2, [r4, #20]
   16730:	adds	r3, r3, #1
   16734:	adc	r2, r2, #0
   16738:	str	r3, [r4, #16]
   1673c:	str	r2, [r4, #20]
   16740:	bl	14cc4 <free_token_obra@@Base>
   16744:	ldr	r3, [r4, #24]
   16748:	ldr	r2, [r4, #28]
   1674c:	ldr	r0, [r5]
   16750:	adds	r3, r3, #1
   16754:	adc	r2, r2, #0
   16758:	str	r3, [r4, #24]
   1675c:	str	r2, [r4, #28]
   16760:	bl	122ec <next@@Base>
   16764:	ldr	r2, [r4, #32]
   16768:	mov	r1, r0
   1676c:	ldr	r3, [r0]
   16770:	ldr	r0, [r4, #36]	; 0x24
   16774:	adds	r2, r2, #1
   16778:	str	r2, [r4, #32]
   1677c:	adc	r0, r0, #0
   16780:	cmp	r3, #6
   16784:	str	r0, [r4, #36]	; 0x24
   16788:	beq	16924 <read_body@@Base+0x240>
   1678c:	mov	r7, #0
   16790:	mov	r6, r7
   16794:	cmp	r3, #7
   16798:	beq	167f8 <read_body@@Base+0x114>
   1679c:	cmp	r3, #10
   167a0:	mov	r0, r1
   167a4:	beq	16880 <read_body@@Base+0x19c>
   167a8:	ldr	r3, [r4, #40]	; 0x28
   167ac:	ldr	r2, [r4, #44]	; 0x2c
   167b0:	ldr	r0, [r5]
   167b4:	adds	r3, r3, #1
   167b8:	adc	r2, r2, #0
   167bc:	str	r3, [r4, #40]	; 0x28
   167c0:	str	r2, [r4, #44]	; 0x2c
   167c4:	bl	12484 <push_back@@Base>
   167c8:	ldr	r3, [r4, #96]	; 0x60
   167cc:	ldr	r2, [r4, #100]	; 0x64
   167d0:	adds	r3, r3, #1
   167d4:	adc	r2, r2, #0
   167d8:	str	r3, [r4, #96]	; 0x60
   167dc:	str	r2, [r4, #100]	; 0x64
   167e0:	mov	r0, r6
   167e4:	ldrd	r4, [sp]
   167e8:	ldrd	r6, [sp, #8]
   167ec:	ldr	r8, [sp, #16]
   167f0:	add	sp, sp, #20
   167f4:	pop	{pc}		; (ldr pc, [sp], #4)
   167f8:	ldr	r3, [r4, #48]	; 0x30
   167fc:	mov	r0, r1
   16800:	ldr	r2, [r4, #52]	; 0x34
   16804:	adds	r3, r3, #1
   16808:	adc	r2, r2, #0
   1680c:	str	r3, [r4, #48]	; 0x30
   16810:	str	r2, [r4, #52]	; 0x34
   16814:	bl	14d0c <free_token_return@@Base>
   16818:	ldr	r3, [r4, #64]	; 0x40
   1681c:	mov	r0, r5
   16820:	ldr	r2, [r4, #68]	; 0x44
   16824:	adds	r3, r3, #1
   16828:	adc	r2, r2, #0
   1682c:	str	r3, [r4, #64]	; 0x40
   16830:	str	r2, [r4, #68]	; 0x44
   16834:	bl	15b30 <read_return_expression@@Base>
   16838:	ldr	r3, [r4, #72]	; 0x48
   1683c:	mov	r8, r0
   16840:	ldr	r2, [r4, #76]	; 0x4c
   16844:	adds	r3, r3, #1
   16848:	adc	r2, r2, #0
   1684c:	cmp	r6, #0
   16850:	str	r3, [r4, #72]	; 0x48
   16854:	str	r2, [r4, #76]	; 0x4c
   16858:	beq	168e0 <read_body@@Base+0x1fc>
   1685c:	ldr	r0, [r5]
   16860:	str	r8, [r7, #4]
   16864:	bl	122ec <next@@Base>
   16868:	ldr	r3, [r0]
   1686c:	mov	r1, r0
   16870:	cmp	r3, #6
   16874:	beq	16928 <read_body@@Base+0x244>
   16878:	mov	r7, r8
   1687c:	b	16794 <read_body@@Base+0xb0>
   16880:	ldr	r3, [r4, #56]	; 0x38
   16884:	ldr	r2, [r4, #60]	; 0x3c
   16888:	adds	r3, r3, #1
   1688c:	adc	r2, r2, #0
   16890:	str	r3, [r4, #56]	; 0x38
   16894:	str	r2, [r4, #60]	; 0x3c
   16898:	bl	14d78 <free_token_if@@Base>
   1689c:	ldr	r3, [r4, #80]	; 0x50
   168a0:	mov	r0, r5
   168a4:	ldr	r2, [r4, #84]	; 0x54
   168a8:	adds	r3, r3, #1
   168ac:	adc	r2, r2, #0
   168b0:	str	r3, [r4, #80]	; 0x50
   168b4:	str	r2, [r4, #84]	; 0x54
   168b8:	bl	16504 <read_if_statement@@Base>
   168bc:	ldr	r3, [r4, #88]	; 0x58
   168c0:	mov	r8, r0
   168c4:	ldr	r2, [r4, #92]	; 0x5c
   168c8:	adds	r3, r3, #1
   168cc:	adc	r2, r2, #0
   168d0:	cmp	r6, #0
   168d4:	str	r3, [r4, #88]	; 0x58
   168d8:	str	r2, [r4, #92]	; 0x5c
   168dc:	bne	1685c <read_body@@Base+0x178>
   168e0:	ldr	r3, [r4, #104]	; 0x68
   168e4:	mov	r6, r8
   168e8:	ldr	r2, [r4, #108]	; 0x6c
   168ec:	ldr	r0, [r5]
   168f0:	adds	r3, r3, #1
   168f4:	adc	r2, r2, #0
   168f8:	str	r3, [r4, #104]	; 0x68
   168fc:	str	r2, [r4, #108]	; 0x6c
   16900:	b	16864 <read_body@@Base+0x180>
   16904:	ldr	r3, [r4, #8]
   16908:	mov	r6, #0
   1690c:	ldr	r2, [r4, #12]
   16910:	adds	r3, r3, #1
   16914:	adc	r2, r2, r6
   16918:	str	r3, [r4, #8]
   1691c:	str	r2, [r4, #12]
   16920:	b	167e0 <read_body@@Base+0xfc>
   16924:	mov	r6, #0
   16928:	ldr	r3, [r4, #112]	; 0x70
   1692c:	mov	r0, r1
   16930:	ldr	r2, [r4, #116]	; 0x74
   16934:	adds	r3, r3, #1
   16938:	adc	r2, r2, #0
   1693c:	str	r3, [r4, #112]	; 0x70
   16940:	str	r2, [r4, #116]	; 0x74
   16944:	bl	14ce8 <free_token_cbra@@Base>
   16948:	ldr	r3, [r4, #120]	; 0x78
   1694c:	ldr	r2, [r4, #124]	; 0x7c
   16950:	adds	r3, r3, #1
   16954:	adc	r2, r2, #0
   16958:	str	r3, [r4, #120]	; 0x78
   1695c:	str	r2, [r4, #124]	; 0x7c
   16960:	b	167e0 <read_body@@Base+0xfc>
   16964:	andeq	fp, r2, r0, lsr #12

00016968 <read_function_ast_node@@Base>:
   16968:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1696c:	ldr	r4, [pc, #556]	; 16ba0 <read_function_ast_node@@Base+0x238>
   16970:	strd	r6, [sp, #8]
   16974:	mov	r6, r0
   16978:	ldr	r0, [r0]
   1697c:	str	r8, [sp, #16]
   16980:	str	lr, [sp, #20]
   16984:	ldr	r3, [r4]
   16988:	ldr	r2, [r4, #4]
   1698c:	adds	r3, r3, #1
   16990:	adc	r2, r2, #0
   16994:	str	r3, [r4]
   16998:	str	r2, [r4, #4]
   1699c:	bl	122ec <next@@Base>
   169a0:	ldr	r5, [r0]
   169a4:	cmp	r5, #0
   169a8:	bne	16b48 <read_function_ast_node@@Base+0x1e0>
   169ac:	ldr	r3, [r4, #16]
   169b0:	ldr	r2, [r4, #20]
   169b4:	adds	r3, r3, #1
   169b8:	adc	r2, r2, #0
   169bc:	str	r3, [r4, #16]
   169c0:	str	r2, [r4, #20]
   169c4:	bl	14c10 <free_token_int_type@@Base>
   169c8:	ldr	r3, [r4, #24]
   169cc:	ldr	r2, [r4, #28]
   169d0:	ldr	r0, [r6]
   169d4:	adds	r3, r3, #1
   169d8:	adc	r2, r2, #0
   169dc:	str	r3, [r4, #24]
   169e0:	str	r2, [r4, #28]
   169e4:	bl	122ec <next@@Base>
   169e8:	ldr	r3, [r0]
   169ec:	mov	r7, r0
   169f0:	cmp	r3, #2
   169f4:	bne	16b18 <read_function_ast_node@@Base+0x1b0>
   169f8:	ldr	r3, [r4, #40]	; 0x28
   169fc:	ldr	r2, [r4, #44]	; 0x2c
   16a00:	ldr	r0, [r6]
   16a04:	adds	r3, r3, #1
   16a08:	adc	r2, r2, #0
   16a0c:	str	r3, [r4, #40]	; 0x28
   16a10:	str	r2, [r4, #44]	; 0x2c
   16a14:	bl	122ec <next@@Base>
   16a18:	ldr	r3, [r0]
   16a1c:	cmp	r3, #3
   16a20:	bne	16b84 <read_function_ast_node@@Base+0x21c>
   16a24:	ldr	r3, [r4, #56]	; 0x38
   16a28:	ldr	r2, [r4, #60]	; 0x3c
   16a2c:	adds	r3, r3, #1
   16a30:	adc	r2, r2, #0
   16a34:	str	r3, [r4, #56]	; 0x38
   16a38:	str	r2, [r4, #60]	; 0x3c
   16a3c:	bl	14c7c <free_token_opar@@Base>
   16a40:	ldr	r3, [r4, #64]	; 0x40
   16a44:	ldr	r2, [r4, #68]	; 0x44
   16a48:	ldr	r0, [r6]
   16a4c:	adds	r3, r3, #1
   16a50:	adc	r2, r2, #0
   16a54:	str	r3, [r4, #64]	; 0x40
   16a58:	str	r2, [r4, #68]	; 0x44
   16a5c:	bl	122ec <next@@Base>
   16a60:	ldr	r3, [r0]
   16a64:	cmp	r3, #4
   16a68:	bne	16b68 <read_function_ast_node@@Base+0x200>
   16a6c:	ldr	r3, [r4, #80]	; 0x50
   16a70:	ldr	r2, [r4, #84]	; 0x54
   16a74:	adds	r3, r3, #1
   16a78:	adc	r2, r2, #0
   16a7c:	str	r3, [r4, #80]	; 0x50
   16a80:	str	r2, [r4, #84]	; 0x54
   16a84:	bl	14ca0 <free_token_cpar@@Base>
   16a88:	ldr	r3, [r4, #88]	; 0x58
   16a8c:	mov	r0, r6
   16a90:	ldr	r2, [r4, #92]	; 0x5c
   16a94:	adds	r3, r3, #1
   16a98:	adc	r2, r2, #0
   16a9c:	str	r3, [r4, #88]	; 0x58
   16aa0:	str	r2, [r4, #92]	; 0x5c
   16aa4:	bl	166e4 <read_body@@Base>
   16aa8:	ldr	r3, [r4, #96]	; 0x60
   16aac:	mov	r6, r0
   16ab0:	mov	r0, #16
   16ab4:	ldr	r1, [r4, #100]	; 0x64
   16ab8:	adds	r3, r3, #1
   16abc:	adc	r1, r1, #0
   16ac0:	str	r3, [r4, #96]	; 0x60
   16ac4:	str	r1, [r4, #100]	; 0x64
   16ac8:	bl	118c8 <malloc@plt>
   16acc:	mov	r2, r6
   16ad0:	ldr	r1, [r7, #4]
   16ad4:	mov	r5, r0
   16ad8:	bl	14f00 <init_node_function@@Base>
   16adc:	ldr	r3, [r4, #104]	; 0x68
   16ae0:	mov	r0, r7
   16ae4:	ldr	r2, [r4, #108]	; 0x6c
   16ae8:	adds	r3, r3, #1
   16aec:	adc	r2, r2, #0
   16af0:	str	r3, [r4, #104]	; 0x68
   16af4:	str	r2, [r4, #108]	; 0x6c
   16af8:	bl	14c58 <free_token_function@@Base>
   16afc:	ldr	r3, [r4, #112]	; 0x70
   16b00:	ldr	r2, [r4, #116]	; 0x74
   16b04:	adds	r3, r3, #1
   16b08:	adc	r2, r2, #0
   16b0c:	str	r3, [r4, #112]	; 0x70
   16b10:	str	r2, [r4, #116]	; 0x74
   16b14:	b	16b30 <read_function_ast_node@@Base+0x1c8>
   16b18:	ldr	r3, [r4, #32]
   16b1c:	ldr	r2, [r4, #36]	; 0x24
   16b20:	adds	r3, r3, #1
   16b24:	adc	r2, r2, #0
   16b28:	str	r3, [r4, #32]
   16b2c:	str	r2, [r4, #36]	; 0x24
   16b30:	mov	r0, r5
   16b34:	ldrd	r4, [sp]
   16b38:	ldrd	r6, [sp, #8]
   16b3c:	ldr	r8, [sp, #16]
   16b40:	add	sp, sp, #20
   16b44:	pop	{pc}		; (ldr pc, [sp], #4)
   16b48:	ldr	r3, [r4, #8]
   16b4c:	mov	r5, #0
   16b50:	ldr	r2, [r4, #12]
   16b54:	adds	r3, r3, #1
   16b58:	adc	r2, r2, r5
   16b5c:	str	r3, [r4, #8]
   16b60:	str	r2, [r4, #12]
   16b64:	b	16b30 <read_function_ast_node@@Base+0x1c8>
   16b68:	ldr	r3, [r4, #72]	; 0x48
   16b6c:	ldr	r2, [r4, #76]	; 0x4c
   16b70:	adds	r3, r3, #1
   16b74:	adc	r2, r2, #0
   16b78:	str	r3, [r4, #72]	; 0x48
   16b7c:	str	r2, [r4, #76]	; 0x4c
   16b80:	b	16b30 <read_function_ast_node@@Base+0x1c8>
   16b84:	ldr	r3, [r4, #48]	; 0x30
   16b88:	ldr	r2, [r4, #52]	; 0x34
   16b8c:	adds	r3, r3, #1
   16b90:	adc	r2, r2, #0
   16b94:	str	r3, [r4, #48]	; 0x30
   16b98:	str	r2, [r4, #52]	; 0x34
   16b9c:	b	16b30 <read_function_ast_node@@Base+0x1c8>
   16ba0:	andeq	fp, r2, r0, lsr #13

00016ba4 <build_ast@@Base>:
   16ba4:	str	r4, [sp, #-8]!
   16ba8:	ldr	r4, [pc, #64]	; 16bf0 <build_ast@@Base+0x4c>
   16bac:	str	lr, [sp, #4]
   16bb0:	ldr	r3, [r4, #-8]
   16bb4:	ldr	r2, [r4, #-4]
   16bb8:	adds	r3, r3, #1
   16bbc:	adc	r2, r2, #0
   16bc0:	str	r3, [r4, #-8]
   16bc4:	str	r2, [r4, #-4]
   16bc8:	bl	16968 <read_function_ast_node@@Base>
   16bcc:	ldr	r3, [r4]
   16bd0:	ldr	r2, [r4, #4]
   16bd4:	adds	r3, r3, #1
   16bd8:	adc	r2, r2, #0
   16bdc:	str	r3, [r4]
   16be0:	str	r2, [r4, #4]
   16be4:	ldr	r4, [sp]
   16be8:	add	sp, sp, #4
   16bec:	pop	{pc}		; (ldr pc, [sp], #4)
   16bf0:	andeq	fp, r2, r0, lsr #14
   16bf4:	b	17e98 <build_ast@@Base+0x12f4>
   16bf8:	push	{r4, r5, r6, r7, r8, lr}
   16bfc:	subs	r5, r1, #0
   16c00:	popeq	{r4, r5, r6, r7, r8, pc}
   16c04:	mov	r4, r0
   16c08:	bl	16bf4 <build_ast@@Base+0x50>
   16c0c:	ldr	r3, [r4]
   16c10:	ldr	r2, [r4, #4]
   16c14:	adds	r6, r3, r0
   16c18:	adc	r7, r2, r1
   16c1c:	subs	r5, r5, #1
   16c20:	strd	r6, [r4], #8
   16c24:	bne	16c08 <build_ast@@Base+0x64>
   16c28:	pop	{r4, r5, r6, r7, r8, pc}
   16c2c:	ldr	r3, [pc, #20]	; 16c48 <build_ast@@Base+0xa4>
   16c30:	ldr	r2, [pc, #20]	; 16c4c <build_ast@@Base+0xa8>
   16c34:	add	r3, pc, r3
   16c38:	ldr	r3, [r3, r2]
   16c3c:	ldmib	r3, {r0, r3}
   16c40:	add	r0, r0, r3
   16c44:	bx	lr
   16c48:	andeq	r3, r1, r4, asr #7
   16c4c:	andeq	r0, r0, r8, lsr #1
   16c50:	ldr	r3, [pc, #28]	; 16c74 <build_ast@@Base+0xd0>
   16c54:	ldr	r2, [pc, #28]	; 16c78 <build_ast@@Base+0xd4>
   16c58:	add	r3, pc, r3
   16c5c:	ldr	r3, [r3, r2]
   16c60:	ldr	r2, [r3]
   16c64:	cmp	r2, #0
   16c68:	ldrne	r0, [r3, #20]
   16c6c:	moveq	r0, #1
   16c70:	bx	lr
   16c74:	andeq	r3, r1, r0, lsr #7
   16c78:	andeq	r0, r0, r8, lsr #1
   16c7c:	bx	lr
   16c80:	ldr	ip, [pc, #32]	; 16ca8 <build_ast@@Base+0x104>
   16c84:	mov	r3, #32
   16c88:	teq	r0, r1
   16c8c:	movmi	r2, ip
   16c90:	movpl	r2, #0
   16c94:	subs	r3, r3, #1
   16c98:	lsl	r1, r1, #1
   16c9c:	eor	r0, r2, r0, lsl #1
   16ca0:	bne	16c88 <build_ast@@Base+0xe4>
   16ca4:	bx	lr
   16ca8:	strbeq	r1, [r1], #3511	; 0xdb7
   16cac:	ldr	r2, [pc, #60]	; 16cf0 <build_ast@@Base+0x14c>
   16cb0:	ldr	r3, [pc, #60]	; 16cf4 <build_ast@@Base+0x150>
   16cb4:	add	r2, pc, r2
   16cb8:	push	{r4, lr}
   16cbc:	ldr	r4, [r2, r3]
   16cc0:	ldr	r0, [r4]
   16cc4:	cmp	r0, #0
   16cc8:	popeq	{r4, pc}
   16ccc:	ldr	r3, [pc, #36]	; 16cf8 <build_ast@@Base+0x154>
   16cd0:	ldr	r3, [r2, r3]
   16cd4:	ldr	r3, [r3]
   16cd8:	cmp	r0, r3
   16cdc:	popeq	{r4, pc}
   16ce0:	bl	1194c <fclose@plt>
   16ce4:	mov	r3, #0
   16ce8:	str	r3, [r4]
   16cec:	pop	{r4, pc}
   16cf0:	andeq	r3, r1, r4, asr #6
   16cf4:	andeq	r0, r0, ip, lsr #1
   16cf8:	muleq	r0, ip, r0
   16cfc:	ldr	r3, [pc, #76]	; 16d50 <build_ast@@Base+0x1ac>
   16d00:	ldr	r1, [pc, #76]	; 16d54 <build_ast@@Base+0x1b0>
   16d04:	add	r3, pc, r3
   16d08:	push	{r4, r5, r6, lr}
   16d0c:	mov	r5, r0
   16d10:	ldr	r4, [r3, r1]
   16d14:	lsl	r1, r0, #2
   16d18:	mov	r0, r4
   16d1c:	mov	r2, #1
   16d20:	ldr	r3, [r0], #28
   16d24:	bl	11880 <fwrite@plt>
   16d28:	cmp	r0, #1
   16d2c:	movne	r3, #1
   16d30:	ldr	r0, [r4, #8]
   16d34:	strne	r3, [r4, #20]
   16d38:	ldr	r3, [r4, #4]
   16d3c:	sub	r0, r0, r5
   16d40:	add	r3, r3, r5
   16d44:	str	r3, [r4, #4]
   16d48:	str	r0, [r4, #8]
   16d4c:	pop	{r4, r5, r6, pc}
   16d50:	strdeq	r3, [r1], -r4
   16d54:	andeq	r0, r0, r8, lsr #1
   16d58:	ldr	r3, [pc, #80]	; 16db0 <build_ast@@Base+0x20c>
   16d5c:	ldr	r2, [pc, #80]	; 16db4 <build_ast@@Base+0x210>
   16d60:	add	r3, pc, r3
   16d64:	push	{r4, r5, r6, lr}
   16d68:	mov	r5, r0
   16d6c:	ldr	r4, [r3, r2]
   16d70:	ldr	r3, [r4, #8]
   16d74:	cmp	r3, #1024	; 0x400
   16d78:	bcs	16d90 <build_ast@@Base+0x1ec>
   16d7c:	add	r0, r3, #7
   16d80:	add	r3, r5, r3
   16d84:	str	r3, [r4, #8]
   16d88:	add	r0, r4, r0, lsl #2
   16d8c:	pop	{r4, r5, r6, pc}
   16d90:	mov	r0, #1024	; 0x400
   16d94:	bl	16cfc <build_ast@@Base+0x158>
   16d98:	ldr	r3, [r4, #8]
   16d9c:	cmp	r3, #0
   16da0:	addne	r2, r4, #4096	; 0x1000
   16da4:	ldrne	r2, [r2, #28]
   16da8:	strne	r2, [r4, #28]
   16dac:	b	16d7c <build_ast@@Base+0x1d8>
   16db0:	muleq	r1, r8, r2
   16db4:	andeq	r0, r0, r8, lsr #1
   16db8:	ldr	r3, [pc, #192]	; 16e80 <build_ast@@Base+0x2dc>
   16dbc:	ldr	r2, [pc, #192]	; 16e84 <build_ast@@Base+0x2e0>
   16dc0:	add	r3, pc, r3
   16dc4:	push	{r4, r5, r6, lr}
   16dc8:	ldr	r4, [r3, r2]
   16dcc:	ldr	r2, [r4, #24]
   16dd0:	ldr	r3, [r4, #8]
   16dd4:	ldr	ip, [r4, #12]
   16dd8:	cmp	r2, #0
   16ddc:	sub	ip, ip, r3
   16de0:	ble	16e5c <build_ast@@Base+0x2b8>
   16de4:	cmp	ip, r0
   16de8:	mov	r5, r0
   16dec:	bcs	16e48 <build_ast@@Base+0x2a4>
   16df0:	ldr	r2, [r4, #4]
   16df4:	cmp	ip, #0
   16df8:	add	r2, r2, r3
   16dfc:	str	r2, [r4, #4]
   16e00:	addne	r2, r4, #28
   16e04:	mov	r0, r4
   16e08:	ldrne	r3, [r2, r3, lsl #2]
   16e0c:	mov	r6, #0
   16e10:	strne	r3, [r4, #28]
   16e14:	ldr	r3, [r0], #28
   16e18:	mov	r2, #4096	; 0x1000
   16e1c:	add	r0, r0, ip, lsl #2
   16e20:	mov	r1, #1
   16e24:	str	ip, [r4, #12]
   16e28:	str	r6, [r4, #8]
   16e2c:	bl	11898 <fread@plt>
   16e30:	ldr	r3, [r4, #12]
   16e34:	add	r0, r3, r0, lsr #2
   16e38:	cmp	r0, r5
   16e3c:	str	r0, [r4, #12]
   16e40:	bcc	16e64 <build_ast@@Base+0x2c0>
   16e44:	ldr	r3, [r4, #8]
   16e48:	add	r0, r3, #7
   16e4c:	add	r5, r5, r3
   16e50:	str	r5, [r4, #8]
   16e54:	add	r0, r4, r0, lsl #2
   16e58:	pop	{r4, r5, r6, pc}
   16e5c:	mov	r0, #0
   16e60:	pop	{r4, r5, r6, pc}
   16e64:	ldr	r3, [r4, #16]
   16e68:	str	r6, [r4, #12]
   16e6c:	add	r5, r5, r3
   16e70:	sub	r5, r5, r0
   16e74:	str	r5, [r4, #16]
   16e78:	mov	r0, r6
   16e7c:	pop	{r4, r5, r6, pc}
   16e80:	andeq	r3, r1, r8, lsr r2
   16e84:	andeq	r0, r0, r8, lsr #1
   16e88:	push	{r4, r5, r6, lr}
   16e8c:	ldr	r4, [pc, #92]	; 16ef0 <build_ast@@Base+0x34c>
   16e90:	ldr	r3, [pc, #92]	; 16ef4 <build_ast@@Base+0x350>
   16e94:	add	r4, pc, r4
   16e98:	ldr	r5, [r4, r3]
   16e9c:	ldr	r0, [r5]
   16ea0:	cmp	r0, #0
   16ea4:	popne	{r4, r5, r6, pc}
   16ea8:	ldr	r0, [pc, #72]	; 16ef8 <build_ast@@Base+0x354>
   16eac:	add	r0, pc, r0
   16eb0:	bl	118b0 <getenv@plt>
   16eb4:	cmp	r0, #0
   16eb8:	beq	16ee8 <build_ast@@Base+0x344>
   16ebc:	ldr	r1, [pc, #56]	; 16efc <build_ast@@Base+0x358>
   16ec0:	add	r1, pc, r1
   16ec4:	bl	11988 <fopen64@plt>
   16ec8:	str	r0, [r5]
   16ecc:	cmp	r0, #0
   16ed0:	popne	{r4, r5, r6, pc}
   16ed4:	ldr	r3, [pc, #36]	; 16f00 <build_ast@@Base+0x35c>
   16ed8:	ldr	r3, [r4, r3]
   16edc:	ldr	r0, [r3]
   16ee0:	str	r0, [r5]
   16ee4:	pop	{r4, r5, r6, pc}
   16ee8:	ldr	r0, [r5]
   16eec:	b	16ecc <build_ast@@Base+0x328>
   16ef0:	andeq	r3, r1, r4, ror #2
   16ef4:	andeq	r0, r0, ip, lsr #1
   16ef8:	strdeq	r2, [r0], -r4
   16efc:	muleq	r0, r4, r7
   16f00:	muleq	r0, ip, r0
   16f04:	push	{r0, r1, r2, r3}
   16f08:	push	{lr}		; (str lr, [sp, #-4]!)
   16f0c:	sub	sp, sp, #12
   16f10:	add	r3, sp, #20
   16f14:	str	r3, [sp, #4]
   16f18:	bl	16e88 <build_ast@@Base+0x2e4>
   16f1c:	ldr	r1, [sp, #16]
   16f20:	ldr	r2, [sp, #4]
   16f24:	bl	11970 <vfprintf@plt>
   16f28:	add	sp, sp, #12
   16f2c:	pop	{lr}		; (ldr lr, [sp], #4)
   16f30:	add	sp, sp, #16
   16f34:	bx	lr
   16f38:	push	{r4, r5, r6, r7, r8, lr}
   16f3c:	subs	r6, r1, #0
   16f40:	beq	16f94 <build_ast@@Base+0x3f0>
   16f44:	cmp	r2, #0
   16f48:	ldr	r7, [r6]
   16f4c:	beq	16f84 <build_ast@@Base+0x3e0>
   16f50:	add	r4, r0, #12
   16f54:	add	r5, r4, r2, lsl #2
   16f58:	mov	r3, #0
   16f5c:	ldr	r2, [r4, #4]!
   16f60:	add	r1, r6, r3, lsl #3
   16f64:	cmp	r2, #0
   16f68:	add	r8, r3, #1
   16f6c:	beq	16f7c <build_ast@@Base+0x3d8>
   16f70:	ldr	r0, [r1, #28]
   16f74:	bl	1185c <free@plt>
   16f78:	mov	r3, r8
   16f7c:	cmp	r4, r5
   16f80:	bne	16f5c <build_ast@@Base+0x3b8>
   16f84:	mov	r0, r6
   16f88:	bl	1185c <free@plt>
   16f8c:	mov	r0, r7
   16f90:	pop	{r4, r5, r6, r7, r8, pc}
   16f94:	mov	r7, r6
   16f98:	b	16f8c <build_ast@@Base+0x3e8>
   16f9c:	push	{r4, r5}
   16fa0:	mov	r4, r0
   16fa4:	mov	r5, r1
   16fa8:	orrs	r3, r4, r5
   16fac:	beq	16ff0 <build_ast@@Base+0x44c>
   16fb0:	cmp	r1, #0
   16fb4:	clzeq	r2, r0
   16fb8:	addeq	r2, r2, #32
   16fbc:	clzne	r2, r1
   16fc0:	rsb	r3, r2, #63	; 0x3f
   16fc4:	cmp	r3, #1
   16fc8:	bls	16ff0 <build_ast@@Base+0x44c>
   16fcc:	rsb	r1, r2, #61	; 0x3d
   16fd0:	rsb	r0, r1, #32
   16fd4:	lsr	r3, r4, r1
   16fd8:	sub	r1, r1, #32
   16fdc:	orr	r3, r3, r5, lsl r0
   16fe0:	orr	r3, r3, r5, lsr r1
   16fe4:	rsb	r2, r2, #1073741886	; 0x4000003e
   16fe8:	and	r0, r3, #3
   16fec:	add	r0, r0, r2, lsl #2
   16ff0:	pop	{r4, r5}
   16ff4:	bx	lr
   16ff8:	push	{r4, r5, r6, lr}
   16ffc:	mov	r1, r3
   17000:	mov	r6, r0
   17004:	mov	r0, r2
   17008:	mov	r4, r2
   1700c:	mov	r5, r3
   17010:	bl	16f9c <build_ast@@Base+0x3f8>
   17014:	add	r0, r0, r0, lsl #1
   17018:	lsl	r0, r0, #3
   1701c:	add	r3, r6, r0
   17020:	ldr	r1, [r6, r0]
   17024:	ldr	r2, [r3, #16]
   17028:	add	r1, r1, #1
   1702c:	str	r1, [r6, r0]
   17030:	ldrd	r0, [r3, #8]
   17034:	ldr	ip, [r3, #20]
   17038:	adds	r2, r2, r4
   1703c:	str	r2, [r3, #16]
   17040:	adc	r2, ip, r5
   17044:	cmp	r4, r0
   17048:	sbcs	r1, r5, r1
   1704c:	str	r2, [r3, #20]
   17050:	strdlt	r4, [r3, #8]
   17054:	pop	{r4, r5, r6, pc}
   17058:	ldr	r3, [r1, #8]
   1705c:	cmp	r3, #0
   17060:	bxeq	lr
   17064:	add	r2, r1, #6016	; 0x1780
   17068:	push	{r4, r5, r6, r7, r8, lr}
   1706c:	mov	r3, r1
   17070:	mov	r8, r1
   17074:	mov	r7, r0
   17078:	ldrd	r4, [r1, #24]
   1707c:	add	r2, r2, #32
   17080:	mov	ip, #0
   17084:	mov	r0, #0
   17088:	mov	r1, #0
   1708c:	str	ip, [r3, #40]	; 0x28
   17090:	strd	r4, [r3, #48]	; 0x30
   17094:	strd	r0, [r3, #56]	; 0x38
   17098:	add	r3, r3, #24
   1709c:	cmp	r3, r2
   170a0:	bne	1708c <build_ast@@Base+0x4e8>
   170a4:	cmp	r7, #0
   170a8:	popeq	{r4, r5, r6, r7, r8, pc}
   170ac:	add	r8, r8, #40	; 0x28
   170b0:	ldr	r3, [r7, #16]
   170b4:	cmp	r3, #0
   170b8:	beq	17140 <build_ast@@Base+0x59c>
   170bc:	ldr	r2, [r7, #52]	; 0x34
   170c0:	cmp	r2, #0
   170c4:	beq	17140 <build_ast@@Base+0x59c>
   170c8:	mov	r6, #0
   170cc:	b	170dc <build_ast@@Base+0x538>
   170d0:	add	r6, r6, #1
   170d4:	cmp	r2, r6
   170d8:	beq	17140 <build_ast@@Base+0x59c>
   170dc:	ldr	r3, [r7, #56]	; 0x38
   170e0:	ldr	r5, [r3, r6, lsl #2]
   170e4:	cmp	r5, #0
   170e8:	beq	170d0 <build_ast@@Base+0x52c>
   170ec:	ldr	r3, [r5]
   170f0:	cmp	r3, r7
   170f4:	bne	170d0 <build_ast@@Base+0x52c>
   170f8:	ldr	r3, [r5, #16]
   170fc:	cmp	r3, #0
   17100:	beq	170d0 <build_ast@@Base+0x52c>
   17104:	mov	r4, #0
   17108:	ldr	r2, [r5, #20]
   1710c:	lsl	r3, r4, #3
   17110:	add	r2, r2, r3
   17114:	mov	r0, r8
   17118:	ldrd	r2, [r2]
   1711c:	bl	16ff8 <build_ast@@Base+0x454>
   17120:	ldr	r3, [r5, #16]
   17124:	add	r4, r4, #1
   17128:	cmp	r3, r4
   1712c:	bhi	17108 <build_ast@@Base+0x564>
   17130:	ldr	r2, [r7, #52]	; 0x34
   17134:	add	r6, r6, #1
   17138:	cmp	r2, r6
   1713c:	bne	170dc <build_ast@@Base+0x538>
   17140:	ldr	r7, [r7, #4]
   17144:	cmp	r7, #0
   17148:	bne	170b0 <build_ast@@Base+0x50c>
   1714c:	pop	{r4, r5, r6, r7, r8, pc}
   17150:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17154:	sub	sp, sp, #12
   17158:	mov	r6, r0
   1715c:	str	r0, [sp, #4]
   17160:	mov	r8, r2
   17164:	mov	r0, r1
   17168:	mov	r4, r1
   1716c:	ldr	r2, [pc, #364]	; 172e0 <build_ast@@Base+0x73c>
   17170:	mov	r1, #0
   17174:	bl	11934 <memset@plt>
   17178:	mov	r5, #0
   1717c:	cmp	r6, #0
   17180:	str	r5, [r8]
   17184:	beq	172c4 <build_ast@@Base+0x720>
   17188:	mov	r9, r5
   1718c:	ldr	r0, [r6, #12]
   17190:	bl	11904 <strlen@plt>
   17194:	cmp	r5, r0
   17198:	strcc	r0, [r8]
   1719c:	mov	r0, r9
   171a0:	ldr	r1, [r6, #8]
   171a4:	bl	16c80 <build_ast@@Base+0xdc>
   171a8:	ldr	r7, [r6, #52]	; 0x34
   171ac:	mov	r1, r7
   171b0:	bl	16c80 <build_ast@@Base+0xdc>
   171b4:	cmp	r7, #0
   171b8:	mov	r9, r0
   171bc:	beq	172b0 <build_ast@@Base+0x70c>
   171c0:	ldr	r5, [r6, #56]	; 0x38
   171c4:	add	r7, r5, r7, lsl #2
   171c8:	sub	r7, r7, #4
   171cc:	sub	r5, r5, #4
   171d0:	b	17200 <build_ast@@Base+0x65c>
   171d4:	ldr	r3, [sl]
   171d8:	mov	r0, r9
   171dc:	cmp	r3, r6
   171e0:	beq	1721c <build_ast@@Base+0x678>
   171e4:	mov	r1, #0
   171e8:	bl	16c80 <build_ast@@Base+0xdc>
   171ec:	mov	r1, #0
   171f0:	bl	16c80 <build_ast@@Base+0xdc>
   171f4:	mov	r9, r0
   171f8:	cmp	r5, r7
   171fc:	beq	172b0 <build_ast@@Base+0x70c>
   17200:	ldr	sl, [r5, #4]!
   17204:	cmp	sl, #0
   17208:	bne	171d4 <build_ast@@Base+0x630>
   1720c:	mov	r1, sl
   17210:	mov	r0, r9
   17214:	bl	16c80 <build_ast@@Base+0xdc>
   17218:	b	171ec <build_ast@@Base+0x648>
   1721c:	ldr	r1, [sl, #12]
   17220:	bl	16c80 <build_ast@@Base+0xdc>
   17224:	ldr	r1, [sl, #8]
   17228:	bl	16c80 <build_ast@@Base+0xdc>
   1722c:	ldr	r3, [r6, #16]
   17230:	cmp	r3, #0
   17234:	mov	r9, r0
   17238:	beq	171f8 <build_ast@@Base+0x654>
   1723c:	ldr	fp, [sl, #16]
   17240:	ldr	r3, [r4, #8]
   17244:	mov	r1, fp
   17248:	add	r3, r3, fp
   1724c:	str	r3, [r4, #8]
   17250:	bl	16c80 <build_ast@@Base+0xdc>
   17254:	cmp	fp, #0
   17258:	mov	r9, r0
   1725c:	beq	171f8 <build_ast@@Base+0x654>
   17260:	ldr	r2, [sl, #20]
   17264:	ldr	r3, [r4, #16]
   17268:	add	lr, r2, fp, lsl #3
   1726c:	ldr	ip, [r4, #20]
   17270:	sub	lr, lr, #8
   17274:	sub	r2, r2, #8
   17278:	ldrd	r0, [r2, #8]!
   1727c:	ldrd	sl, [r4, #24]
   17280:	adds	r3, r3, r0
   17284:	adc	ip, ip, r1
   17288:	str	ip, [r4, #20]
   1728c:	str	r3, [r4, #16]
   17290:	ldrd	r0, [r2]
   17294:	cmp	sl, r0
   17298:	sbcs	sl, fp, r1
   1729c:	strdlt	r0, [r4, #24]
   172a0:	cmp	lr, r2
   172a4:	bne	17278 <build_ast@@Base+0x6d4>
   172a8:	cmp	r5, r7
   172ac:	bne	17200 <build_ast@@Base+0x65c>
   172b0:	ldr	r6, [r6, #4]
   172b4:	cmp	r6, #0
   172b8:	beq	172c8 <build_ast@@Base+0x724>
   172bc:	ldr	r5, [r8]
   172c0:	b	1718c <build_ast@@Base+0x5e8>
   172c4:	ldr	r9, [sp, #4]
   172c8:	ldr	r0, [sp, #4]
   172cc:	mov	r1, r4
   172d0:	bl	17058 <build_ast@@Base+0x4b4>
   172d4:	mov	r0, r9
   172d8:	add	sp, sp, #12
   172dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172e0:	andeq	r1, r0, r8, asr #15
   172e4:	push	{r4, r5, r6, lr}
   172e8:	mov	r4, r0
   172ec:	ldr	r0, [pc, #192]	; 173b4 <build_ast@@Base+0x810>
   172f0:	add	r0, pc, r0
   172f4:	bl	118b0 <getenv@plt>
   172f8:	subs	r3, r0, #0
   172fc:	beq	17308 <build_ast@@Base+0x764>
   17300:	bl	1197c <atoi@plt>
   17304:	bic	r3, r0, r0, asr #31
   17308:	ldr	r0, [pc, #168]	; 173b8 <build_ast@@Base+0x814>
   1730c:	str	r3, [r4, #8]
   17310:	add	r0, pc, r0
   17314:	bl	118b0 <getenv@plt>
   17318:	subs	r6, r0, #0
   1731c:	beq	1738c <build_ast@@Base+0x7e8>
   17320:	bl	11904 <strlen@plt>
   17324:	ldr	r3, [r4, #4]
   17328:	add	r3, r3, #2
   1732c:	cmp	r0, #0
   17330:	bne	1736c <build_ast@@Base+0x7c8>
   17334:	ldr	r2, [r4, #8]
   17338:	cmp	r2, #0
   1733c:	beq	173a0 <build_ast@@Base+0x7fc>
   17340:	ldr	r6, [pc, #116]	; 173bc <build_ast@@Base+0x818>
   17344:	mov	r5, #1
   17348:	add	r6, pc, r6
   1734c:	str	r5, [r4, #12]
   17350:	add	r0, r3, r5
   17354:	bl	118c8 <malloc@plt>
   17358:	mov	r2, r5
   1735c:	mov	r1, r6
   17360:	str	r0, [r4]
   17364:	pop	{r4, r5, r6, lr}
   17368:	b	11868 <memcpy@plt>
   1736c:	sub	r5, r0, #1
   17370:	ldrb	r2, [r6, r5]
   17374:	cmp	r2, #47	; 0x2f
   17378:	movne	r5, r0
   1737c:	bne	1734c <build_ast@@Base+0x7a8>
   17380:	cmp	r5, #0
   17384:	bne	1734c <build_ast@@Base+0x7a8>
   17388:	b	17334 <build_ast@@Base+0x790>
   1738c:	ldr	r2, [r4, #8]
   17390:	ldr	r3, [r4, #4]
   17394:	cmp	r2, #0
   17398:	add	r3, r3, #2
   1739c:	bne	17340 <build_ast@@Base+0x79c>
   173a0:	str	r2, [r4, #12]
   173a4:	mov	r0, r3
   173a8:	bl	118c8 <malloc@plt>
   173ac:	str	r0, [r4]
   173b0:	pop	{r4, r5, r6, pc}
   173b4:	andeq	r2, r0, r4, asr #9
   173b8:			; <UNDEFINED> instruction: 0x000024b8
   173bc:	andeq	r2, r0, r8, ror #8
   173c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173c4:	sub	sp, sp, #6080	; 0x17c0
   173c8:	sub	sp, sp, #36	; 0x24
   173cc:	mov	r3, r0
   173d0:	str	r1, [sp, #40]	; 0x28
   173d4:	mov	r1, #0
   173d8:	mov	r4, r1
   173dc:	str	r0, [sp, #56]	; 0x38
   173e0:	add	r7, r3, #6016	; 0x1780
   173e4:	add	r0, sp, #64	; 0x40
   173e8:	add	r6, sp, #2016	; 0x7e0
   173ec:	ldr	r2, [pc, #984]	; 177cc <build_ast@@Base+0xc28>
   173f0:	mov	r5, #251	; 0xfb
   173f4:	str	r0, [sp, #60]	; 0x3c
   173f8:	str	r5, [sp, #52]	; 0x34
   173fc:	str	r6, [sp, #36]	; 0x24
   17400:	mov	r9, r4
   17404:	bl	11934 <memset@plt>
   17408:	mov	sl, r4
   1740c:	add	r3, r7, #8
   17410:	mov	r0, r4
   17414:	str	r3, [sp, #48]	; 0x30
   17418:	sub	r3, r6, #1952	; 0x7a0
   1741c:	str	r3, [sp, #44]	; 0x2c
   17420:	ldr	r3, [sp, #48]	; 0x30
   17424:	ldr	r2, [r3, #16]
   17428:	ldr	r7, [r3]
   1742c:	str	r2, [sp, #16]
   17430:	ldr	r2, [r3, #20]
   17434:	cmp	r7, #0
   17438:	str	r2, [sp, #20]
   1743c:	beq	1775c <build_ast@@Base+0xbb8>
   17440:	ldrd	r2, [r3, #8]
   17444:	str	r9, [sp, #12]
   17448:	strd	r2, [sp, #24]
   1744c:	b	1752c <build_ast@@Base+0x988>
   17450:	bls	177c0 <build_ast@@Base+0xc1c>
   17454:	ldr	r3, [sp, #12]
   17458:	mov	r2, r4
   1745c:	umull	r0, r1, r7, r3
   17460:	mov	r3, #0
   17464:	mla	r1, r7, sl, r1
   17468:	bl	18cdc <__gcov_sort_n_vals@@Base+0x568>
   1746c:	mov	r6, r0
   17470:	mov	r8, r1
   17474:	ldr	r3, [sp, #12]
   17478:	sub	r4, r4, r7
   1747c:	subs	r3, r3, r6
   17480:	sbc	sl, sl, r8
   17484:	mov	fp, r7
   17488:	mov	r7, #0
   1748c:	str	r3, [sp, #12]
   17490:	ldr	r0, [sp, #16]
   17494:	ldr	r3, [sp, #20]
   17498:	str	r7, [sp, #16]
   1749c:	str	r7, [sp, #20]
   174a0:	adds	r6, r6, r0
   174a4:	ldrd	r0, [sp]
   174a8:	adc	r8, r8, r3
   174ac:	bl	16f9c <build_ast@@Base+0x3f8>
   174b0:	ldr	r3, [sp, #44]	; 0x2c
   174b4:	add	r1, r0, r0, lsl #1
   174b8:	lsl	r1, r1, #3
   174bc:	add	ip, r3, r1
   174c0:	ldr	r3, [sp, #36]	; 0x24
   174c4:	ldr	lr, [ip, #16]
   174c8:	add	r1, r3, r1
   174cc:	adds	r6, lr, r6
   174d0:	ldr	lr, [ip, #20]
   174d4:	ldrd	r2, [ip, #8]
   174d8:	adc	lr, lr, r8
   174dc:	ldrd	r8, [sp]
   174e0:	str	lr, [sp, #32]
   174e4:	orrs	lr, r2, r3
   174e8:	moveq	lr, #1
   174ec:	movne	lr, #0
   174f0:	cmp	r8, r2
   174f4:	sbcs	r3, r9, r3
   174f8:	orrlt	lr, lr, #1
   174fc:	cmp	lr, #0
   17500:	str	r6, [ip, #16]
   17504:	ldr	r6, [r1, #-1952]	; 0xfffff860
   17508:	ldr	r3, [sp, #32]
   1750c:	strdne	r8, [ip, #8]
   17510:	cmp	r4, #0
   17514:	add	fp, r6, fp
   17518:	subeq	r5, r5, #1
   1751c:	cmp	r7, #0
   17520:	str	r3, [ip, #20]
   17524:	str	fp, [r1, #-1952]	; 0xfffff860
   17528:	beq	17758 <build_ast@@Base+0xbb4>
   1752c:	cmp	r4, #0
   17530:	beq	175b4 <build_ast@@Base+0xa10>
   17534:	add	r2, r5, r5, lsl #1
   17538:	ldr	r3, [sp, #40]	; 0x28
   1753c:	add	r2, r3, r2, lsl #3
   17540:	ldrd	r0, [sp, #24]
   17544:	ldr	r3, [r2, #8]
   17548:	ldr	r2, [r2, #12]
   1754c:	adds	r3, r0, r3
   17550:	str	r3, [sp]
   17554:	adc	r3, r1, r2
   17558:	cmp	r4, r7
   1755c:	str	r3, [sp, #4]
   17560:	bcs	17450 <build_ast@@Base+0x8ac>
   17564:	ldr	r6, [sp, #16]
   17568:	ldr	r8, [sp, #20]
   1756c:	mov	r2, r7
   17570:	umull	r0, r1, r4, r6
   17574:	mov	r3, #0
   17578:	mla	r1, r4, r8, r1
   1757c:	bl	18cdc <__gcov_sort_n_vals@@Base+0x568>
   17580:	sub	r7, r7, r4
   17584:	mov	fp, r4
   17588:	mov	r4, #0
   1758c:	subs	r2, r6, r0
   17590:	str	r2, [sp, #16]
   17594:	sbc	r2, r8, r1
   17598:	ldr	r6, [sp, #12]
   1759c:	mov	r8, sl
   175a0:	mov	r3, r1
   175a4:	str	r2, [sp, #20]
   175a8:	str	r4, [sp, #12]
   175ac:	mov	sl, r4
   175b0:	b	174a0 <build_ast@@Base+0x8fc>
   175b4:	cmp	r5, #0
   175b8:	blt	177b8 <build_ast@@Base+0xc14>
   175bc:	ldr	r3, [sp, #40]	; 0x28
   175c0:	add	r2, r5, r5, lsl #1
   175c4:	ldr	r4, [r3, r2, lsl #3]
   175c8:	add	r2, r3, r2, lsl #3
   175cc:	cmp	r4, #0
   175d0:	bne	17748 <build_ast@@Base+0xba4>
   175d4:	mov	r3, r2
   175d8:	ldr	r9, [sp, #12]
   175dc:	b	175f0 <build_ast@@Base+0xa4c>
   175e0:	ldr	r4, [r3]
   175e4:	mov	r2, r3
   175e8:	cmp	r4, #0
   175ec:	bne	17748 <build_ast@@Base+0xba4>
   175f0:	subs	r5, r5, #1
   175f4:	sub	r3, r3, #24
   175f8:	bcs	175e0 <build_ast@@Base+0xa3c>
   175fc:	ldr	r2, [sp, #52]	; 0x34
   17600:	ldr	ip, [sp, #36]	; 0x24
   17604:	ldr	r4, [sp, #16]
   17608:	lsl	r3, r2, #1
   1760c:	add	r1, r3, r2
   17610:	sub	r2, ip, #1952	; 0x7a0
   17614:	lsl	r1, r1, #3
   17618:	add	r2, r2, r1
   1761c:	add	r1, ip, r1
   17620:	ldr	ip, [r2, #16]
   17624:	ldr	lr, [r1, #-1952]	; 0xfffff860
   17628:	adds	ip, ip, r4
   1762c:	add	r7, lr, r7
   17630:	ldrd	r4, [r2, #8]
   17634:	ldr	lr, [r2, #20]
   17638:	str	r7, [r1, #-1952]	; 0xfffff860
   1763c:	ldr	r1, [sp, #20]
   17640:	str	ip, [r2, #16]
   17644:	adc	lr, lr, r1
   17648:	orrs	r1, r4, r5
   1764c:	str	lr, [r2, #20]
   17650:	beq	17728 <build_ast@@Base+0xb84>
   17654:	ldrd	r6, [sp, #24]
   17658:	cmp	r6, r4
   1765c:	sbcs	r2, r7, r5
   17660:	blt	17728 <build_ast@@Base+0xb84>
   17664:	ldr	r2, [sp, #52]	; 0x34
   17668:	ldr	lr, [sp, #60]	; 0x3c
   1766c:	add	ip, r3, r2
   17670:	ldr	r3, [sp, #56]	; 0x38
   17674:	lsl	ip, ip, #3
   17678:	add	r1, lr, ip
   1767c:	add	ip, r3, ip
   17680:	b	176dc <build_ast@@Base+0xb38>
   17684:	ldr	r3, [r1, #-8]
   17688:	ldr	r6, [ip, #-8]
   1768c:	ldr	r7, [ip, #-4]
   17690:	ldr	r2, [r1, #-4]
   17694:	adds	r6, r3, r6
   17698:	ldrd	r4, [r1, #-16]
   1769c:	adc	r2, r2, r7
   176a0:	ldr	r3, [r1, #-24]	; 0xffffffe8
   176a4:	ldr	r7, [ip, #-24]	; 0xffffffe8
   176a8:	orrs	r8, r4, r5
   176ac:	add	r3, r3, r7
   176b0:	str	r2, [r1, #-4]
   176b4:	str	r3, [r1, #-24]	; 0xffffffe8
   176b8:	str	r6, [r1, #-8]
   176bc:	ldrd	r2, [ip, #-16]
   176c0:	sub	ip, ip, #24
   176c4:	beq	176d4 <build_ast@@Base+0xb30>
   176c8:	cmp	r2, r4
   176cc:	sbcs	r4, r3, r5
   176d0:	bge	176d8 <build_ast@@Base+0xb34>
   176d4:	strd	r2, [r1, #-16]
   176d8:	sub	r1, r1, #24
   176dc:	cmp	r1, lr
   176e0:	bne	17684 <build_ast@@Base+0xae0>
   176e4:	ldr	r3, [sp, #36]	; 0x24
   176e8:	add	r0, r0, r0, lsl #1
   176ec:	sub	r3, r3, #1952	; 0x7a0
   176f0:	add	r3, r3, r0, lsl #3
   176f4:	ldr	r1, [sp, #60]	; 0x3c
   176f8:	ldr	r2, [r3, #16]
   176fc:	ldr	ip, [r3, #20]
   17700:	adds	r9, r2, r9
   17704:	adc	sl, ip, sl
   17708:	ldr	r0, [sp, #56]	; 0x38
   1770c:	ldr	r2, [pc, #184]	; 177cc <build_ast@@Base+0xc28>
   17710:	str	r9, [r3, #16]
   17714:	str	sl, [r3, #20]
   17718:	bl	11868 <memcpy@plt>
   1771c:	add	sp, sp, #6080	; 0x17c0
   17720:	add	sp, sp, #36	; 0x24
   17724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17728:	ldr	r2, [sp, #52]	; 0x34
   1772c:	ldrd	r4, [sp, #24]
   17730:	add	r1, r3, r2
   17734:	ldr	r2, [sp, #36]	; 0x24
   17738:	sub	r2, r2, #1952	; 0x7a0
   1773c:	add	r2, r2, r1, lsl #3
   17740:	strd	r4, [r2, #8]
   17744:	b	17664 <build_ast@@Base+0xac0>
   17748:	ldr	r3, [r2, #16]
   1774c:	ldr	sl, [r2, #20]
   17750:	str	r3, [sp, #12]
   17754:	b	17540 <build_ast@@Base+0x99c>
   17758:	ldr	r9, [sp, #12]
   1775c:	ldr	r3, [sp, #52]	; 0x34
   17760:	sub	r3, r3, #1
   17764:	str	r3, [sp, #52]	; 0x34
   17768:	cmn	r3, #1
   1776c:	ldr	r3, [sp, #48]	; 0x30
   17770:	sub	r3, r3, #24
   17774:	str	r3, [sp, #48]	; 0x30
   17778:	bne	17420 <build_ast@@Base+0x87c>
   1777c:	cmp	r4, #0
   17780:	subne	r5, r5, #1
   17784:	cmp	r5, #0
   17788:	blt	176e4 <build_ast@@Base+0xb40>
   1778c:	add	r5, r5, r5, lsl #1
   17790:	ldr	ip, [sp, #40]	; 0x28
   17794:	add	r3, ip, r5, lsl #3
   17798:	ldr	r2, [r3, #16]
   1779c:	ldr	r1, [r3, #20]
   177a0:	adds	r9, r9, r2
   177a4:	adc	sl, sl, r1
   177a8:	cmp	ip, r3
   177ac:	sub	r3, r3, #24
   177b0:	bne	17798 <build_ast@@Base+0xbf4>
   177b4:	b	176e4 <build_ast@@Base+0xb40>
   177b8:	ldr	r9, [sp, #12]
   177bc:	b	175fc <build_ast@@Base+0xa58>
   177c0:	ldr	r6, [sp, #12]
   177c4:	mov	r8, sl
   177c8:	b	17474 <build_ast@@Base+0x8d0>
   177cc:	andeq	r1, r0, r0, lsr #15
   177d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   177d4:	ldrb	r4, [r0]
   177d8:	cmp	r4, #47	; 0x2f
   177dc:	addeq	r5, r0, #1
   177e0:	ldrbeq	r4, [r0, #1]
   177e4:	movne	r5, r0
   177e8:	cmp	r4, #0
   177ec:	beq	17840 <build_ast@@Base+0xc9c>
   177f0:	mov	r6, r0
   177f4:	mov	r7, #0
   177f8:	mov	r8, #47	; 0x2f
   177fc:	ldr	sl, [pc, #136]	; 1788c <build_ast@@Base+0xce8>
   17800:	b	17810 <build_ast@@Base+0xc6c>
   17804:	ldrb	r4, [r5, #1]!
   17808:	cmp	r4, #0
   1780c:	beq	17840 <build_ast@@Base+0xc9c>
   17810:	cmp	r4, #47	; 0x2f
   17814:	bne	17804 <build_ast@@Base+0xc60>
   17818:	strb	r7, [r5]
   1781c:	mov	r1, #0
   17820:	mov	r0, r6
   17824:	bl	11940 <access@plt>
   17828:	cmn	r0, #1
   1782c:	beq	1784c <build_ast@@Base+0xca8>
   17830:	strb	r8, [r5]
   17834:	ldrb	r4, [r5, #1]!
   17838:	cmp	r4, #0
   1783c:	bne	17810 <build_ast@@Base+0xc6c>
   17840:	mov	r9, #0
   17844:	mov	r0, r9
   17848:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1784c:	mov	r1, sl
   17850:	mov	r0, r6
   17854:	bl	11928 <mkdir@plt>
   17858:	cmn	r0, #1
   1785c:	mov	r9, r0
   17860:	bne	17830 <build_ast@@Base+0xc8c>
   17864:	bl	1191c <__errno_location@plt>
   17868:	ldr	r3, [r0]
   1786c:	cmp	r3, #17
   17870:	beq	17830 <build_ast@@Base+0xc8c>
   17874:	ldr	r0, [pc, #20]	; 17890 <build_ast@@Base+0xcec>
   17878:	mov	r1, r6
   1787c:	add	r0, pc, r0
   17880:	bl	16f04 <build_ast@@Base+0x360>
   17884:	strb	r4, [r5]
   17888:	b	17844 <build_ast@@Base+0xca0>
   1788c:	andeq	r0, r0, sp, ror #3
   17890:	andeq	r1, r0, r8, asr pc
   17894:	ldr	r3, [pc, #76]	; 178e8 <build_ast@@Base+0xd44>
   17898:	cmp	r1, r3
   1789c:	beq	178e0 <build_ast@@Base+0xd3c>
   178a0:	cmp	r2, #0
   178a4:	ldr	ip, [pc, #64]	; 178ec <build_ast@@Base+0xd48>
   178a8:	push	{lr}		; (str lr, [sp, #-4]!)
   178ac:	rev	r3, r1
   178b0:	sub	sp, sp, #12
   178b4:	ldreq	r2, [r0]
   178b8:	ldr	r0, [pc, #48]	; 178f0 <build_ast@@Base+0xd4c>
   178bc:	stm	sp, {r3, ip}
   178c0:	mov	r1, r2
   178c4:	mov	r3, sp
   178c8:	add	r2, sp, #4
   178cc:	add	r0, pc, r0
   178d0:	bl	16f04 <build_ast@@Base+0x360>
   178d4:	mov	r0, #0
   178d8:	add	sp, sp, #12
   178dc:	pop	{pc}		; (ldr pc, [sp], #4)
   178e0:	mov	r0, #1
   178e4:	bx	lr
   178e8:	teqmi	r8, sl, lsr #6
   178ec:	bcs	ce59f8 <__bss_end__@@Base+0xcb8f34>
   178f0:	andeq	r1, r0, r0, lsr pc
   178f4:	ldr	r2, [r2]
   178f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   178fc:	cmp	r2, #0
   17900:	mov	r4, r3
   17904:	ldr	r2, [r3, #12]
   17908:	ldr	r3, [sp, #32]
   1790c:	beq	179f8 <build_ast@@Base+0xe54>
   17910:	cmp	r1, #0
   17914:	addeq	r1, r2, #1
   17918:	streq	r1, [r4, #12]
   1791c:	cmp	r2, #0
   17920:	ldr	r0, [r4, #16]
   17924:	ldr	lr, [r4, #20]
   17928:	ldrd	r6, [r4, #24]
   1792c:	ldr	r2, [r4, #32]
   17930:	ldr	r1, [r4, #36]	; 0x24
   17934:	bne	179a4 <build_ast@@Base+0xe00>
   17938:	ldr	ip, [r3, #8]
   1793c:	str	ip, [r4, #8]
   17940:	ldr	ip, [r3, #16]
   17944:	ldr	r5, [r3, #20]
   17948:	adds	r0, ip, r0
   1794c:	adc	lr, r5, lr
   17950:	str	r0, [r4, #16]
   17954:	str	lr, [r4, #20]
   17958:	ldrd	r8, [r3, #24]
   1795c:	cmp	r6, r8
   17960:	sbcs	r0, r7, r9
   17964:	bge	17a18 <build_ast@@Base+0xe74>
   17968:	strd	r8, [r4, #24]
   1796c:	ldr	r0, [r3, #24]
   17970:	ldr	ip, [r3, #28]
   17974:	adds	r2, r0, r2
   17978:	adc	r1, ip, r1
   1797c:	str	r1, [r4, #36]	; 0x24
   17980:	str	r2, [r4, #32]
   17984:	add	r1, r3, #40	; 0x28
   17988:	ldr	r2, [pc, #176]	; 17a40 <build_ast@@Base+0xe9c>
   1798c:	add	r0, r4, #40	; 0x28
   17990:	bl	11868 <memcpy@plt>
   17994:	ldr	r3, [sp, #36]	; 0x24
   17998:	mov	r0, #0
   1799c:	str	r3, [r4]
   179a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   179a4:	ldr	ip, [r3, #16]
   179a8:	ldr	r5, [r3, #20]
   179ac:	adds	r0, ip, r0
   179b0:	adc	lr, r5, lr
   179b4:	str	r0, [r4, #16]
   179b8:	str	lr, [r4, #20]
   179bc:	ldrd	r8, [r3, #24]
   179c0:	cmp	r6, r8
   179c4:	sbcs	r0, r7, r9
   179c8:	bge	17a2c <build_ast@@Base+0xe88>
   179cc:	strd	r8, [r4, #24]
   179d0:	ldr	r0, [r3, #24]
   179d4:	ldr	ip, [r3, #28]
   179d8:	adds	r2, r0, r2
   179dc:	adc	r1, ip, r1
   179e0:	str	r1, [r4, #36]	; 0x24
   179e4:	str	r2, [r4, #32]
   179e8:	add	r1, r3, #40	; 0x28
   179ec:	add	r0, r4, #40	; 0x28
   179f0:	bl	173c0 <build_ast@@Base+0x81c>
   179f4:	b	17994 <build_ast@@Base+0xdf0>
   179f8:	cmp	r2, #0
   179fc:	beq	17994 <build_ast@@Base+0xdf0>
   17a00:	mov	r1, r0
   17a04:	ldr	r0, [pc, #56]	; 17a44 <build_ast@@Base+0xea0>
   17a08:	add	r0, pc, r0
   17a0c:	bl	16f04 <build_ast@@Base+0x360>
   17a10:	mvn	r0, #0
   17a14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17a18:	adds	r2, r2, r8
   17a1c:	adc	r1, r1, r9
   17a20:	str	r1, [r4, #36]	; 0x24
   17a24:	str	r2, [r4, #32]
   17a28:	b	17984 <build_ast@@Base+0xde0>
   17a2c:	adds	r2, r2, r8
   17a30:	adc	r1, r1, r9
   17a34:	str	r1, [r4, #36]	; 0x24
   17a38:	str	r2, [r4, #32]
   17a3c:	b	179e8 <build_ast@@Base+0xe44>
   17a40:	andeq	r1, r0, r0, lsr #15
   17a44:	andeq	r1, r0, ip, lsr #28
   17a48:	ldr	r0, [pc, #52]	; 17a84 <build_ast@@Base+0xee0>
   17a4c:	ldr	r3, [pc, #52]	; 17a88 <build_ast@@Base+0xee4>
   17a50:	add	r0, pc, r0
   17a54:	push	{lr}		; (str lr, [sp, #-4]!)
   17a58:	mov	ip, #0
   17a5c:	ldr	r3, [r0, r3]
   17a60:	mvn	lr, #0
   17a64:	mov	r2, ip
   17a68:	str	lr, [r3, #24]
   17a6c:	mov	r1, ip
   17a70:	ldr	r0, [r3]
   17a74:	pop	{lr}		; (ldr lr, [sp], #4)
   17a78:	str	ip, [r3, #4]
   17a7c:	str	ip, [r3, #8]
   17a80:	b	11994 <fseek@plt>
   17a84:	andeq	r2, r1, r8, lsr #11
   17a88:	andeq	r0, r0, r8, lsr #1
   17a8c:	push	{r4, r5, r6, r7, lr}
   17a90:	mov	r2, #0
   17a94:	sub	sp, sp, #36	; 0x24
   17a98:	mov	r3, #0
   17a9c:	mov	r4, #0
   17aa0:	mov	r6, r0
   17aa4:	strd	r2, [sp, #8]
   17aa8:	strd	r2, [sp, #16]
   17aac:	strh	r4, [sp, #2]
   17ab0:	bl	118ec <getpid@plt>
   17ab4:	ldr	r3, [pc, #196]	; 17b80 <build_ast@@Base+0xfdc>
   17ab8:	ldr	ip, [pc, #196]	; 17b84 <build_ast@@Base+0xfe0>
   17abc:	add	r3, pc, r3
   17ac0:	mvn	lr, #0
   17ac4:	mov	r7, #1
   17ac8:	ldr	r2, [pc, #184]	; 17b88 <build_ast@@Base+0xfe4>
   17acc:	mov	r1, #66	; 0x42
   17ad0:	str	r0, [sp, #24]
   17ad4:	ldr	r5, [r3, ip]
   17ad8:	mov	r0, r6
   17adc:	strh	r7, [sp]
   17ae0:	str	r4, [r5, #4]
   17ae4:	str	r4, [r5, #12]
   17ae8:	str	r4, [r5, #8]
   17aec:	str	r4, [r5, #20]
   17af0:	str	lr, [r5, #16]
   17af4:	bl	118a4 <open64@plt>
   17af8:	subs	r6, r0, #0
   17afc:	movlt	r0, r4
   17b00:	blt	17b64 <build_ast@@Base+0xfc0>
   17b04:	mov	r4, sp
   17b08:	mov	r2, r4
   17b0c:	mov	r1, #14
   17b10:	mov	r0, r6
   17b14:	bl	11964 <fcntl64@plt>
   17b18:	cmp	r0, #0
   17b1c:	beq	17b30 <build_ast@@Base+0xf8c>
   17b20:	bl	1191c <__errno_location@plt>
   17b24:	ldr	r3, [r0]
   17b28:	cmp	r3, #4
   17b2c:	beq	17b08 <build_ast@@Base+0xf64>
   17b30:	ldr	r1, [pc, #84]	; 17b8c <build_ast@@Base+0xfe8>
   17b34:	mov	r0, r6
   17b38:	add	r1, pc, r1
   17b3c:	bl	11820 <fdopen@plt>
   17b40:	cmp	r0, #0
   17b44:	mov	r4, r0
   17b48:	str	r0, [r5]
   17b4c:	beq	17b6c <build_ast@@Base+0xfc8>
   17b50:	mov	r4, #1
   17b54:	mov	r1, #0
   17b58:	str	r4, [r5, #24]
   17b5c:	bl	11838 <setbuf@plt>
   17b60:	mov	r0, r4
   17b64:	add	sp, sp, #36	; 0x24
   17b68:	pop	{r4, r5, r6, r7, pc}
   17b6c:	mov	r0, r6
   17b70:	bl	119b8 <close@plt>
   17b74:	mov	r0, r4
   17b78:	add	sp, sp, #36	; 0x24
   17b7c:	pop	{r4, r5, r6, r7, pc}
   17b80:	andeq	r2, r1, ip, lsr r5
   17b84:	andeq	r0, r0, r8, lsr #1
   17b88:			; <UNDEFINED> instruction: 0x000001b6
   17b8c:	andeq	r1, r0, r8, lsr #26
   17b90:	push	{r4, r5, r6, lr}
   17b94:	mov	r4, r1
   17b98:	ldr	r5, [pc, #248]	; 17c98 <build_ast@@Base+0x10f4>
   17b9c:	ldr	ip, [r4, #8]
   17ba0:	ldr	lr, [r4, #12]
   17ba4:	ldr	r6, [r4]
   17ba8:	cmp	ip, #0
   17bac:	mov	r1, r0
   17bb0:	add	r5, pc, r5
   17bb4:	add	r0, r6, lr
   17bb8:	ble	17bf4 <build_ast@@Base+0x1050>
   17bbc:	ldrb	r3, [r1]
   17bc0:	cmp	r3, #47	; 0x2f
   17bc4:	addeq	r2, r1, #1
   17bc8:	ldrbeq	r3, [r1, #1]
   17bcc:	movne	r2, r1
   17bd0:	cmp	r3, #0
   17bd4:	beq	17bf4 <build_ast@@Base+0x1050>
   17bd8:	cmp	r3, #47	; 0x2f
   17bdc:	moveq	r1, r2
   17be0:	ldrb	r3, [r2, #1]!
   17be4:	subeq	ip, ip, #1
   17be8:	cmp	r3, #0
   17bec:	cmpne	ip, #0
   17bf0:	bne	17bd8 <build_ast@@Base+0x1034>
   17bf4:	cmp	lr, #0
   17bf8:	bne	17c18 <build_ast@@Base+0x1074>
   17bfc:	bl	1188c <strcpy@plt>
   17c00:	ldr	r0, [r4]
   17c04:	bl	17a8c <build_ast@@Base+0xee8>
   17c08:	cmp	r0, #0
   17c0c:	beq	17c30 <build_ast@@Base+0x108c>
   17c10:	mov	r0, #0
   17c14:	pop	{r4, r5, r6, pc}
   17c18:	ldrb	r3, [r1]
   17c1c:	cmp	r3, #47	; 0x2f
   17c20:	movne	r3, #47	; 0x2f
   17c24:	addne	r0, r0, #1
   17c28:	strbne	r3, [r6, lr]
   17c2c:	b	17bfc <build_ast@@Base+0x1058>
   17c30:	ldr	r0, [r4]
   17c34:	bl	177d0 <build_ast@@Base+0xc2c>
   17c38:	cmp	r0, #0
   17c3c:	bne	17c74 <build_ast@@Base+0x10d0>
   17c40:	ldr	r0, [r4]
   17c44:	bl	17a8c <build_ast@@Base+0xee8>
   17c48:	cmp	r0, #0
   17c4c:	bne	17c10 <build_ast@@Base+0x106c>
   17c50:	ldr	r3, [pc, #68]	; 17c9c <build_ast@@Base+0x10f8>
   17c54:	ldr	r1, [pc, #68]	; 17ca0 <build_ast@@Base+0x10fc>
   17c58:	ldr	r2, [r4]
   17c5c:	ldr	r3, [r5, r3]
   17c60:	add	r1, pc, r1
   17c64:	ldr	r0, [r3]
   17c68:	bl	11910 <fprintf@plt>
   17c6c:	mvn	r0, #0
   17c70:	pop	{r4, r5, r6, pc}
   17c74:	ldr	r3, [pc, #32]	; 17c9c <build_ast@@Base+0x10f8>
   17c78:	ldr	r1, [pc, #36]	; 17ca4 <build_ast@@Base+0x1100>
   17c7c:	ldr	r2, [r4]
   17c80:	ldr	r3, [r5, r3]
   17c84:	add	r1, pc, r1
   17c88:	ldr	r0, [r3]
   17c8c:	bl	11910 <fprintf@plt>
   17c90:	mvn	r0, #0
   17c94:	pop	{r4, r5, r6, pc}
   17c98:	andeq	r2, r1, r8, asr #8
   17c9c:	muleq	r0, ip, r0
   17ca0:	andeq	r1, r0, r8, lsl ip
   17ca4:	andeq	r1, r0, r0, ror #23
   17ca8:	ldr	r3, [pc, #96]	; 17d10 <build_ast@@Base+0x116c>
   17cac:	ldr	r2, [pc, #96]	; 17d14 <build_ast@@Base+0x1170>
   17cb0:	add	r3, pc, r3
   17cb4:	push	{r4, lr}
   17cb8:	ldr	r4, [r3, r2]
   17cbc:	ldr	r0, [r4]
   17cc0:	cmp	r0, #0
   17cc4:	beq	17ce4 <build_ast@@Base+0x1140>
   17cc8:	ldr	r3, [r4, #8]
   17ccc:	cmp	r3, #0
   17cd0:	bne	17cf4 <build_ast@@Base+0x1150>
   17cd4:	bl	1194c <fclose@plt>
   17cd8:	mov	r3, #0
   17cdc:	str	r3, [r4]
   17ce0:	str	r3, [r4, #12]
   17ce4:	mov	r3, #0
   17ce8:	str	r3, [r4, #24]
   17cec:	ldr	r0, [r4, #20]
   17cf0:	pop	{r4, pc}
   17cf4:	ldr	r2, [r4, #24]
   17cf8:	cmp	r2, #0
   17cfc:	bge	17cd4 <build_ast@@Base+0x1130>
   17d00:	mov	r0, r3
   17d04:	bl	16cfc <build_ast@@Base+0x158>
   17d08:	ldr	r0, [r4]
   17d0c:	b	17cd4 <build_ast@@Base+0x1130>
   17d10:	andeq	r2, r1, r8, asr #6
   17d14:	andeq	r0, r0, r8, lsr #1
   17d18:	push	{r4, lr}
   17d1c:	mov	r4, r0
   17d20:	mov	r0, #1
   17d24:	bl	16d58 <build_ast@@Base+0x1b4>
   17d28:	str	r4, [r0]
   17d2c:	pop	{r4, pc}
   17d30:	push	{r4, r5, r6, lr}
   17d34:	mov	r5, r0
   17d38:	mov	r0, #2
   17d3c:	mov	r4, r1
   17d40:	bl	16d58 <build_ast@@Base+0x1b4>
   17d44:	str	r5, [r0]
   17d48:	str	r4, [r0, #4]
   17d4c:	pop	{r4, r5, r6, pc}
   17d50:	push	{r4, r5, r6, lr}
   17d54:	mov	r5, r0
   17d58:	mov	r0, #2
   17d5c:	mov	r4, r1
   17d60:	bl	16d58 <build_ast@@Base+0x1b4>
   17d64:	str	r5, [r0]
   17d68:	str	r4, [r0, #4]
   17d6c:	pop	{r4, r5, r6, pc}
   17d70:	mov	r2, #0
   17d74:	push	{r4, r5, r6, r7, r8, lr}
   17d78:	mov	r3, r2
   17d7c:	sub	sp, sp, #32
   17d80:	mov	r5, r1
   17d84:	mov	r7, r2
   17d88:	mov	r4, r1
   17d8c:	mov	r8, #1
   17d90:	str	r2, [sp]
   17d94:	str	r2, [sp, #4]
   17d98:	str	r2, [sp, #8]
   17d9c:	str	r2, [sp, #12]
   17da0:	str	r2, [sp, #16]
   17da4:	str	r2, [sp, #20]
   17da8:	str	r2, [sp, #24]
   17dac:	str	r2, [sp, #28]
   17db0:	lsr	r2, r3, #5
   17db4:	ldr	lr, [r1, #40]	; 0x28
   17db8:	add	ip, sp, #32
   17dbc:	cmp	lr, #0
   17dc0:	add	r2, ip, r2, lsl #2
   17dc4:	and	r6, r3, #31
   17dc8:	ldrne	ip, [r2, #-32]	; 0xffffffe0
   17dcc:	add	r3, r3, #1
   17dd0:	orrne	ip, ip, r8, lsl r6
   17dd4:	addne	r7, r7, #1
   17dd8:	strne	ip, [r2, #-32]	; 0xffffffe0
   17ddc:	cmp	r3, #252	; 0xfc
   17de0:	add	r1, r1, #24
   17de4:	bne	17db0 <build_ast@@Base+0x120c>
   17de8:	add	r7, r7, r7, lsl #2
   17dec:	add	r1, r7, #17
   17df0:	bl	17d50 <build_ast@@Base+0x11ac>
   17df4:	ldr	r0, [r5]
   17df8:	bl	17d18 <build_ast@@Base+0x1174>
   17dfc:	ldr	r0, [r5, #8]
   17e00:	bl	17d18 <build_ast@@Base+0x1174>
   17e04:	ldr	r0, [r5, #12]
   17e08:	bl	17d18 <build_ast@@Base+0x1174>
   17e0c:	ldrd	r0, [r5, #16]
   17e10:	bl	17d30 <build_ast@@Base+0x118c>
   17e14:	ldrd	r0, [r5, #24]
   17e18:	bl	17d30 <build_ast@@Base+0x118c>
   17e1c:	ldrd	r0, [r5, #32]
   17e20:	bl	17d30 <build_ast@@Base+0x118c>
   17e24:	sub	r6, sp, #4
   17e28:	add	r7, sp, #28
   17e2c:	ldr	r0, [r6, #4]!
   17e30:	bl	17d18 <build_ast@@Base+0x1174>
   17e34:	cmp	r7, r6
   17e38:	bne	17e2c <build_ast@@Base+0x1288>
   17e3c:	add	r5, r5, #6016	; 0x1780
   17e40:	add	r5, r5, #32
   17e44:	ldr	r3, [r4, #40]	; 0x28
   17e48:	subs	r0, r3, #0
   17e4c:	beq	17e64 <build_ast@@Base+0x12c0>
   17e50:	bl	17d18 <build_ast@@Base+0x1174>
   17e54:	ldrd	r0, [r4, #48]	; 0x30
   17e58:	bl	17d30 <build_ast@@Base+0x118c>
   17e5c:	ldrd	r0, [r4, #56]	; 0x38
   17e60:	bl	17d30 <build_ast@@Base+0x118c>
   17e64:	add	r4, r4, #24
   17e68:	cmp	r4, r5
   17e6c:	bne	17e44 <build_ast@@Base+0x12a0>
   17e70:	add	sp, sp, #32
   17e74:	pop	{r4, r5, r6, r7, r8, pc}
   17e78:	push	{r4, lr}
   17e7c:	mov	r0, #1
   17e80:	bl	16db8 <build_ast@@Base+0x214>
   17e84:	subs	r3, r0, #0
   17e88:	popeq	{r4, pc}
   17e8c:	ldr	r0, [r3]
   17e90:	pop	{r4, lr}
   17e94:	b	16c7c <build_ast@@Base+0xd8>
   17e98:	push	{r4, lr}
   17e9c:	mov	r0, #2
   17ea0:	bl	16db8 <build_ast@@Base+0x214>
   17ea4:	subs	r2, r0, #0
   17ea8:	beq	17ecc <build_ast@@Base+0x1328>
   17eac:	ldr	r0, [r2]
   17eb0:	bl	16c7c <build_ast@@Base+0xd8>
   17eb4:	mov	r3, r0
   17eb8:	ldr	r0, [r2, #4]
   17ebc:	bl	16c7c <build_ast@@Base+0xd8>
   17ec0:	mov	r1, r0
   17ec4:	mov	r0, r3
   17ec8:	pop	{r4, pc}
   17ecc:	mov	r3, r2
   17ed0:	mov	r1, r2
   17ed4:	mov	r0, r3
   17ed8:	pop	{r4, pc}
   17edc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ee0:	sub	sp, sp, #28
   17ee4:	mov	r8, r1
   17ee8:	str	r3, [sp, #12]
   17eec:	mov	r4, #0
   17ef0:	add	r3, r1, #52	; 0x34
   17ef4:	add	r1, r1, #16
   17ef8:	str	r0, [sp, #20]
   17efc:	str	r2, [sp, #16]
   17f00:	ldr	r2, [r3, #-4]!
   17f04:	cmp	r2, #0
   17f08:	addne	r4, r4, #1
   17f0c:	cmp	r1, r3
   17f10:	bne	17f00 <build_ast@@Base+0x135c>
   17f14:	add	r4, r4, #4
   17f18:	lsl	r4, r4, #3
   17f1c:	mov	r0, r4
   17f20:	bl	118c8 <malloc@plt>
   17f24:	subs	r6, r0, #0
   17f28:	beq	17ffc <build_ast@@Base+0x1458>
   17f2c:	ldr	r3, [sp, #12]
   17f30:	mov	r4, #0
   17f34:	str	r3, [r6, #4]
   17f38:	str	r4, [r6]
   17f3c:	bl	17e78 <build_ast@@Base+0x12d4>
   17f40:	mov	r7, r4
   17f44:	add	r5, r8, #12
   17f48:	str	r0, [r6, #12]
   17f4c:	bl	17e78 <build_ast@@Base+0x12d4>
   17f50:	str	r0, [r6, #16]
   17f54:	bl	17e78 <build_ast@@Base+0x12d4>
   17f58:	str	r0, [r6, #20]
   17f5c:	b	17f6c <build_ast@@Base+0x13c8>
   17f60:	add	r4, r4, #1
   17f64:	cmp	r4, #9
   17f68:	beq	17fe8 <build_ast@@Base+0x1444>
   17f6c:	ldr	r3, [r5, #4]!
   17f70:	cmp	r3, #0
   17f74:	beq	17f60 <build_ast@@Base+0x13bc>
   17f78:	bl	17e78 <build_ast@@Base+0x12d4>
   17f7c:	lsl	r3, r4, #17
   17f80:	add	r3, r3, #27262976	; 0x1a00000
   17f84:	add	r3, r3, #65536	; 0x10000
   17f88:	cmp	r0, r3
   17f8c:	bne	18050 <build_ast@@Base+0x14ac>
   17f90:	bl	17e78 <build_ast@@Base+0x12d4>
   17f94:	lsr	sl, r0, #1
   17f98:	lsl	fp, sl, #3
   17f9c:	mov	r0, fp
   17fa0:	bl	118c8 <malloc@plt>
   17fa4:	subs	r9, r0, #0
   17fa8:	beq	18060 <build_ast@@Base+0x14bc>
   17fac:	add	r1, r6, r7, lsl #3
   17fb0:	cmp	sl, #0
   17fb4:	str	sl, [r1, #24]
   17fb8:	str	r9, [r1, #28]
   17fbc:	sub	fp, sl, #1
   17fc0:	beq	17fd8 <build_ast@@Base+0x1434>
   17fc4:	bl	17e98 <build_ast@@Base+0x12f4>
   17fc8:	sub	fp, fp, #1
   17fcc:	cmn	fp, #1
   17fd0:	strd	r0, [r9], #8
   17fd4:	bne	17fc4 <build_ast@@Base+0x1420>
   17fd8:	add	r4, r4, #1
   17fdc:	cmp	r4, #9
   17fe0:	add	r7, r7, #1
   17fe4:	bne	17f6c <build_ast@@Base+0x13c8>
   17fe8:	ldr	r3, [sp, #16]
   17fec:	mov	r0, r6
   17ff0:	str	r6, [r3]
   17ff4:	add	sp, sp, #28
   17ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ffc:	mvn	r5, #0
   18000:	cmp	r4, #0
   18004:	bne	18044 <build_ast@@Base+0x14a0>
   18008:	ldr	r3, [pc, #92]	; 1806c <build_ast@@Base+0x14c8>
   1800c:	mov	r4, r5
   18010:	add	r3, pc, r3
   18014:	ldr	r0, [pc, #84]	; 18070 <build_ast@@Base+0x14cc>
   18018:	ldr	r2, [sp, #12]
   1801c:	ldr	r1, [sp, #20]
   18020:	str	r4, [sp]
   18024:	add	r0, pc, r0
   18028:	bl	16f04 <build_ast@@Base+0x360>
   1802c:	mov	r2, r5
   18030:	mov	r1, r6
   18034:	mov	r0, r8
   18038:	add	sp, sp, #28
   1803c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18040:	b	16f38 <build_ast@@Base+0x394>
   18044:	ldr	r3, [pc, #40]	; 18074 <build_ast@@Base+0x14d0>
   18048:	add	r3, pc, r3
   1804c:	b	18014 <build_ast@@Base+0x1470>
   18050:	ldr	r3, [pc, #32]	; 18078 <build_ast@@Base+0x14d4>
   18054:	mov	r5, r4
   18058:	add	r3, pc, r3
   1805c:	b	18014 <build_ast@@Base+0x1470>
   18060:	mov	r5, r4
   18064:	mov	r4, fp
   18068:	b	18000 <build_ast@@Base+0x145c>
   1806c:	andeq	r1, r0, r4, lsl #17
   18070:	muleq	r0, r4, r8
   18074:	andeq	r1, r0, r0, ror #16
   18078:	andeq	r1, r0, ip, lsr r8
   1807c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18080:	sub	sp, sp, #36	; 0x24
   18084:	mov	r9, r0
   18088:	bl	17e78 <build_ast@@Base+0x12d4>
   1808c:	mov	r7, #0
   18090:	sub	r4, sp, #4
   18094:	add	r5, sp, #28
   18098:	str	r0, [r9]
   1809c:	bl	17e78 <build_ast@@Base+0x12d4>
   180a0:	str	r0, [r9, #8]
   180a4:	bl	17e78 <build_ast@@Base+0x12d4>
   180a8:	str	r0, [r9, #12]
   180ac:	bl	17e98 <build_ast@@Base+0x12f4>
   180b0:	strd	r0, [r9, #16]
   180b4:	bl	17e98 <build_ast@@Base+0x12f4>
   180b8:	strd	r0, [r9, #24]
   180bc:	bl	17e98 <build_ast@@Base+0x12f4>
   180c0:	ldr	r2, [pc, #264]	; 181d0 <build_ast@@Base+0x162c>
   180c4:	strd	r0, [r9, #32]
   180c8:	add	r0, r9, #40	; 0x28
   180cc:	mov	r1, r7
   180d0:	bl	11934 <memset@plt>
   180d4:	bl	17e78 <build_ast@@Base+0x12d4>
   180d8:	str	r0, [r4, #4]!
   180dc:	bl	18dc0 <__gcov_sort_n_vals@@Base+0x64c>
   180e0:	cmp	r4, r5
   180e4:	add	r7, r7, r0
   180e8:	bne	180d4 <build_ast@@Base+0x1530>
   180ec:	cmp	r7, #0
   180f0:	sub	r7, r7, #1
   180f4:	beq	181bc <build_ast@@Base+0x1618>
   180f8:	ldr	r8, [pc, #212]	; 181d4 <build_ast@@Base+0x1630>
   180fc:	ldr	sl, [pc, #212]	; 181d8 <build_ast@@Base+0x1634>
   18100:	mov	r4, #0
   18104:	add	r8, pc, r8
   18108:	add	sl, pc, sl
   1810c:	mov	r5, r4
   18110:	mov	r6, r4
   18114:	cmp	r4, #0
   18118:	addeq	r3, sp, #32
   1811c:	addeq	r6, r3, r5, lsl #2
   18120:	subeq	r6, r6, #36	; 0x24
   18124:	beq	18140 <build_ast@@Base+0x159c>
   18128:	b	18168 <build_ast@@Base+0x15c4>
   1812c:	ldr	r4, [r6, #4]!
   18130:	add	r3, r5, #1
   18134:	cmp	r4, #0
   18138:	bne	18160 <build_ast@@Base+0x15bc>
   1813c:	mov	r5, r3
   18140:	cmp	r5, #7
   18144:	bls	1812c <build_ast@@Base+0x1588>
   18148:	mov	r0, r8
   1814c:	bl	16f04 <build_ast@@Base+0x360>
   18150:	ldr	r4, [r6, #4]!
   18154:	add	r3, r5, #1
   18158:	cmp	r4, #0
   1815c:	beq	1813c <build_ast@@Base+0x1598>
   18160:	lsl	r6, r5, #5
   18164:	mov	r5, r3
   18168:	tst	r4, #1
   1816c:	bne	18180 <build_ast@@Base+0x15dc>
   18170:	lsr	r4, r4, #1
   18174:	tst	r4, #1
   18178:	add	r6, r6, #1
   1817c:	beq	18170 <build_ast@@Base+0x15cc>
   18180:	cmp	r6, #251	; 0xfb
   18184:	bhi	181c4 <build_ast@@Base+0x1620>
   18188:	bl	17e78 <build_ast@@Base+0x12d4>
   1818c:	add	fp, r6, r6, lsl #1
   18190:	sub	r7, r7, #1
   18194:	add	fp, r9, fp, lsl #3
   18198:	lsr	r4, r4, #1
   1819c:	add	r6, r6, #1
   181a0:	str	r0, [fp, #40]	; 0x28
   181a4:	bl	17e98 <build_ast@@Base+0x12f4>
   181a8:	strd	r0, [fp, #48]	; 0x30
   181ac:	bl	17e98 <build_ast@@Base+0x12f4>
   181b0:	cmn	r7, #1
   181b4:	strd	r0, [fp, #56]	; 0x38
   181b8:	bne	18114 <build_ast@@Base+0x1570>
   181bc:	add	sp, sp, #36	; 0x24
   181c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181c4:	mov	r0, sl
   181c8:	bl	16f04 <build_ast@@Base+0x360>
   181cc:	b	18188 <build_ast@@Base+0x15e4>
   181d0:	andeq	r1, r0, r0, lsr #15
   181d4:	ldrdeq	r1, [r0], -r8
   181d8:	andeq	r1, r0, r4, lsl r8
   181dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181e0:	sub	sp, sp, #6080	; 0x17c0
   181e4:	sub	sp, sp, #28
   181e8:	mov	r4, r1
   181ec:	strd	r2, [sp, #4]
   181f0:	add	r3, sp, #6144	; 0x1800
   181f4:	mov	r9, r0
   181f8:	ldr	r7, [r3]
   181fc:	add	r3, sp, #6144	; 0x1800
   18200:	add	r3, r3, #4
   18204:	ldr	r6, [r3]
   18208:	add	r3, sp, #6144	; 0x1800
   1820c:	add	r3, r3, #8
   18210:	ldr	sl, [r3]
   18214:	bl	17e78 <build_ast@@Base+0x12d4>
   18218:	add	r3, r4, #12
   1821c:	mov	r2, r9
   18220:	str	r3, [sp, #12]
   18224:	mov	r1, r0
   18228:	mov	r0, r3
   1822c:	bl	17894 <build_ast@@Base+0xcf0>
   18230:	cmp	r0, #0
   18234:	beq	184bc <build_ast@@Base+0x1918>
   18238:	bl	17e78 <build_ast@@Base+0x12d4>
   1823c:	ldr	r3, [r4, #8]
   18240:	cmp	r0, r3
   18244:	bne	182d8 <build_ast@@Base+0x1734>
   18248:	ldr	fp, [pc, #628]	; 184c4 <build_ast@@Base+0x1920>
   1824c:	add	r5, sp, #16
   18250:	add	fp, pc, fp
   18254:	bl	16c2c <build_ast@@Base+0x88>
   18258:	str	r0, [r6]
   1825c:	bl	17e78 <build_ast@@Base+0x12d4>
   18260:	cmp	r0, #-1560281088	; 0xa3000000
   18264:	bne	1831c <build_ast@@Base+0x1778>
   18268:	bl	17e78 <build_ast@@Base+0x12d4>
   1826c:	mov	r0, r5
   18270:	bl	1807c <build_ast@@Base+0x14d8>
   18274:	bl	16c50 <build_ast@@Base+0xac>
   18278:	add	r2, sp, #2000	; 0x7d0
   1827c:	add	r2, r2, #8
   18280:	subs	r8, r0, #0
   18284:	bne	18450 <build_ast@@Base+0x18ac>
   18288:	ldr	r3, [r7]
   1828c:	cmp	r3, #0
   18290:	bne	182e8 <build_ast@@Base+0x1744>
   18294:	ldr	r3, [r2, #-1992]	; 0xfffff838
   18298:	cmp	r3, sl
   1829c:	bne	18254 <build_ast@@Base+0x16b0>
   182a0:	ldr	r3, [sp, #8]
   182a4:	ldr	r2, [r2, #-1984]	; 0xfffff840
   182a8:	ldr	r3, [r3]
   182ac:	cmp	r2, r3
   182b0:	bne	18254 <build_ast@@Base+0x16b0>
   182b4:	ldr	r2, [pc, #524]	; 184c8 <build_ast@@Base+0x1924>
   182b8:	mov	r1, r5
   182bc:	ldr	r0, [sp, #4]
   182c0:	bl	11868 <memcpy@plt>
   182c4:	ldr	r3, [r6]
   182c8:	str	r3, [r7]
   182cc:	b	18254 <build_ast@@Base+0x16b0>
   182d0:	cmp	r0, #0
   182d4:	bne	18490 <build_ast@@Base+0x18ec>
   182d8:	mov	r0, #0
   182dc:	add	sp, sp, #6080	; 0x17c0
   182e0:	add	sp, sp, #28
   182e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182e8:	ldr	r0, [pc, #476]	; 184cc <build_ast@@Base+0x1928>
   182ec:	bl	118c8 <malloc@plt>
   182f0:	ldr	r2, [pc, #464]	; 184c8 <build_ast@@Base+0x1924>
   182f4:	mov	r1, r5
   182f8:	mov	r3, r0
   182fc:	str	r0, [fp]
   18300:	add	r0, r0, #8
   18304:	str	r3, [sp]
   18308:	bl	11868 <memcpy@plt>
   1830c:	ldr	r3, [sp]
   18310:	str	r8, [r3]
   18314:	ldr	fp, [fp]
   18318:	b	18254 <build_ast@@Base+0x16b0>
   1831c:	ldr	r5, [r4, #52]	; 0x34
   18320:	cmp	r5, #0
   18324:	beq	182d0 <build_ast@@Base+0x172c>
   18328:	ldr	r3, [r4, #56]	; 0x38
   1832c:	cmp	r0, #16777216	; 0x1000000
   18330:	ldr	r8, [r3]
   18334:	bne	1848c <build_ast@@Base+0x18e8>
   18338:	ldr	r6, [pc, #400]	; 184d0 <build_ast@@Base+0x192c>
   1833c:	mov	r5, #0
   18340:	add	r6, pc, r6
   18344:	add	r6, r6, #4
   18348:	b	1838c <build_ast@@Base+0x17e8>
   1834c:	mov	r2, r6
   18350:	mov	r3, r5
   18354:	mov	r1, r4
   18358:	mov	r0, r9
   1835c:	bl	17edc <build_ast@@Base+0x1338>
   18360:	subs	r6, r0, #0
   18364:	beq	18490 <build_ast@@Base+0x18ec>
   18368:	bl	17e78 <build_ast@@Base+0x12d4>
   1836c:	ldr	r3, [r4, #52]	; 0x34
   18370:	add	r5, r5, #1
   18374:	cmp	r3, r5
   18378:	beq	182d0 <build_ast@@Base+0x172c>
   1837c:	ldr	r3, [r4, #56]	; 0x38
   18380:	cmp	r0, #16777216	; 0x1000000
   18384:	ldr	r8, [r3, r5, lsl #2]
   18388:	bne	18490 <build_ast@@Base+0x18ec>
   1838c:	bl	17e78 <build_ast@@Base+0x12d4>
   18390:	cmp	r0, #0
   18394:	beq	18368 <build_ast@@Base+0x17c4>
   18398:	cmp	r0, #3
   1839c:	bne	18490 <build_ast@@Base+0x18ec>
   183a0:	cmp	r8, #0
   183a4:	beq	1834c <build_ast@@Base+0x17a8>
   183a8:	ldr	r3, [r8]
   183ac:	cmp	r4, r3
   183b0:	bne	1834c <build_ast@@Base+0x17a8>
   183b4:	bl	17e78 <build_ast@@Base+0x12d4>
   183b8:	ldr	r3, [r8, #4]
   183bc:	cmp	r0, r3
   183c0:	bne	18490 <build_ast@@Base+0x18ec>
   183c4:	bl	17e78 <build_ast@@Base+0x12d4>
   183c8:	ldr	r3, [r8, #8]
   183cc:	cmp	r0, r3
   183d0:	bne	18490 <build_ast@@Base+0x18ec>
   183d4:	bl	17e78 <build_ast@@Base+0x12d4>
   183d8:	ldr	r3, [r8, #12]
   183dc:	cmp	r0, r3
   183e0:	bne	18490 <build_ast@@Base+0x18ec>
   183e4:	ldr	r7, [pc, #232]	; 184d4 <build_ast@@Base+0x1930>
   183e8:	ldr	fp, [sp, #12]
   183ec:	add	r8, r8, #16
   183f0:	ldr	sl, [fp, #4]!
   183f4:	cmp	sl, #0
   183f8:	beq	18430 <build_ast@@Base+0x188c>
   183fc:	bl	17e78 <build_ast@@Base+0x12d4>
   18400:	str	r0, [sp]
   18404:	bl	17e78 <build_ast@@Base+0x12d4>
   18408:	ldr	r3, [sp]
   1840c:	cmp	r3, r7
   18410:	bne	18490 <build_ast@@Base+0x18ec>
   18414:	ldr	r3, [r8]
   18418:	mov	r1, r3
   1841c:	cmp	r0, r3, lsl #1
   18420:	bne	18490 <build_ast@@Base+0x18ec>
   18424:	ldr	r0, [r8, #4]
   18428:	blx	sl
   1842c:	add	r8, r8, #8
   18430:	ldr	r3, [pc, #160]	; 184d8 <build_ast@@Base+0x1934>
   18434:	add	r7, r7, #131072	; 0x20000
   18438:	cmp	r7, r3
   1843c:	bne	183f0 <build_ast@@Base+0x184c>
   18440:	bl	16c50 <build_ast@@Base+0xac>
   18444:	cmp	r0, #0
   18448:	beq	18368 <build_ast@@Base+0x17c4>
   1844c:	mov	r8, r0
   18450:	cmp	r8, #0
   18454:	blt	18480 <build_ast@@Base+0x18dc>
   18458:	ldr	r2, [pc, #124]	; 184dc <build_ast@@Base+0x1938>
   1845c:	add	r2, pc, r2
   18460:	ldr	r0, [pc, #120]	; 184e0 <build_ast@@Base+0x193c>
   18464:	mov	r1, r9
   18468:	add	r0, pc, r0
   1846c:	bl	16f04 <build_ast@@Base+0x360>
   18470:	mvn	r0, #0
   18474:	add	sp, sp, #6080	; 0x17c0
   18478:	add	sp, sp, #28
   1847c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18480:	ldr	r2, [pc, #92]	; 184e4 <build_ast@@Base+0x1940>
   18484:	add	r2, pc, r2
   18488:	b	18460 <build_ast@@Base+0x18bc>
   1848c:	mov	r5, #0
   18490:	ldr	r2, [pc, #80]	; 184e8 <build_ast@@Base+0x1944>
   18494:	ldr	r0, [pc, #80]	; 184ec <build_ast@@Base+0x1948>
   18498:	mov	r3, r5
   1849c:	mov	r1, r9
   184a0:	add	r2, pc, r2
   184a4:	add	r0, pc, r0
   184a8:	bl	16f04 <build_ast@@Base+0x360>
   184ac:	mvn	r0, #0
   184b0:	add	sp, sp, #6080	; 0x17c0
   184b4:	add	sp, sp, #28
   184b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184bc:	mvn	r0, #0
   184c0:	b	182dc <build_ast@@Base+0x1738>
   184c4:	ldrdeq	r3, [r1], -r0
   184c8:	andeq	r1, r0, r8, asr #15
   184cc:	ldrdeq	r1, [r0], -r0
   184d0:	andeq	r3, r1, r0, ror #7
   184d4:			; <UNDEFINED> instruction: 0x01a10000
   184d8:			; <UNDEFINED> instruction: 0x01b30000
   184dc:	andeq	r1, r0, r8, lsl #10
   184e0:	andeq	r1, r0, ip, lsr #10
   184e4:	ldrdeq	r1, [r0], -r4
   184e8:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   184ec:	andeq	r1, r0, r8, asr #9
   184f0:	ldr	r3, [pc, #72]	; 18540 <build_ast@@Base+0x199c>
   184f4:	ldr	r2, [pc, #72]	; 18544 <build_ast@@Base+0x19a0>
   184f8:	add	r3, pc, r3
   184fc:	push	{r4, r5, r6, lr}
   18500:	mov	r5, r0
   18504:	ldr	r4, [r3, r2]
   18508:	ldr	r0, [r4, #8]
   1850c:	cmp	r0, #0
   18510:	bne	18538 <build_ast@@Base+0x1994>
   18514:	lsl	r1, r5, #2
   18518:	mov	r2, #0
   1851c:	ldr	r0, [r4]
   18520:	bl	11994 <fseek@plt>
   18524:	ldr	r0, [r4]
   18528:	bl	11874 <ftell@plt>
   1852c:	asr	r0, r0, #2
   18530:	str	r0, [r4, #4]
   18534:	pop	{r4, r5, r6, pc}
   18538:	bl	16cfc <build_ast@@Base+0x158>
   1853c:	b	18514 <build_ast@@Base+0x1970>
   18540:	andeq	r1, r1, r0, lsl #22
   18544:	andeq	r0, r0, r8, lsr #1
   18548:	cmp	r2, #0
   1854c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18550:	mov	r8, r0
   18554:	sub	sp, sp, #20
   18558:	mov	r5, r1
   1855c:	mov	r4, r3
   18560:	beq	18730 <build_ast@@Base+0x1b8c>
   18564:	cmp	r4, #0
   18568:	bne	1874c <build_ast@@Base+0x1ba8>
   1856c:	mov	r1, r5
   18570:	ldr	r5, [pc, #480]	; 18758 <build_ast@@Base+0x1bb4>
   18574:	mov	r0, #-1560281088	; 0xa3000000
   18578:	add	r5, pc, r5
   1857c:	bl	17d70 <build_ast@@Base+0x11cc>
   18580:	ldr	r4, [r5]
   18584:	cmp	r4, #0
   18588:	beq	185b4 <build_ast@@Base+0x1a10>
   1858c:	add	r1, r4, #8
   18590:	mov	r0, #-1560281088	; 0xa3000000
   18594:	bl	17d70 <build_ast@@Base+0x11cc>
   18598:	ldr	r3, [r5]
   1859c:	mov	r0, r3
   185a0:	ldr	r4, [r3]
   185a4:	bl	1185c <free@plt>
   185a8:	cmp	r4, #0
   185ac:	str	r4, [r5]
   185b0:	bne	1858c <build_ast@@Base+0x19e8>
   185b4:	ldr	r3, [r8, #52]	; 0x34
   185b8:	cmp	r3, #0
   185bc:	beq	18708 <build_ast@@Base+0x1b64>
   185c0:	ldr	r3, [pc, #404]	; 1875c <build_ast@@Base+0x1bb8>
   185c4:	ldr	r9, [pc, #404]	; 18760 <build_ast@@Base+0x1bbc>
   185c8:	add	r3, pc, r3
   185cc:	str	r3, [sp, #4]
   185d0:	ldr	r3, [pc, #396]	; 18764 <build_ast@@Base+0x1bc0>
   185d4:	mov	r7, #0
   185d8:	add	r3, pc, r3
   185dc:	str	r3, [sp, #12]
   185e0:	b	1861c <build_ast@@Base+0x1a78>
   185e4:	ldr	r3, [r8, #56]	; 0x38
   185e8:	ldr	r4, [r3, r7, lsl #2]
   185ec:	cmp	r4, #0
   185f0:	beq	18600 <build_ast@@Base+0x1a5c>
   185f4:	ldr	r3, [r4]
   185f8:	cmp	r3, r8
   185fc:	beq	18718 <build_ast@@Base+0x1b74>
   18600:	mov	r1, #0
   18604:	mov	r0, #16777216	; 0x1000000
   18608:	bl	17d50 <build_ast@@Base+0x11ac>
   1860c:	ldr	r3, [r8, #52]	; 0x34
   18610:	add	r7, r7, #1
   18614:	cmp	r3, r7
   18618:	beq	18708 <build_ast@@Base+0x1b64>
   1861c:	ldr	r3, [sp, #4]
   18620:	ldr	r4, [r3, #4]
   18624:	cmp	r4, #0
   18628:	beq	185e4 <build_ast@@Base+0x1a40>
   1862c:	ldr	r3, [r4, #4]
   18630:	cmp	r3, r7
   18634:	bne	185e4 <build_ast@@Base+0x1a40>
   18638:	mov	r3, #1
   1863c:	mov	r1, #3
   18640:	mov	r0, #16777216	; 0x1000000
   18644:	add	r4, r4, #8
   18648:	str	r3, [sp, #8]
   1864c:	bl	17d50 <build_ast@@Base+0x11ac>
   18650:	ldr	r0, [r4, #4]
   18654:	bl	17d18 <build_ast@@Base+0x1174>
   18658:	ldr	r0, [r4, #8]
   1865c:	bl	17d18 <build_ast@@Base+0x1174>
   18660:	ldr	r0, [r4, #12]
   18664:	bl	17d18 <build_ast@@Base+0x1174>
   18668:	ldr	r5, [pc, #248]	; 18768 <build_ast@@Base+0x1bc4>
   1866c:	add	r4, r4, #16
   18670:	add	r6, r8, #12
   18674:	b	18684 <build_ast@@Base+0x1ae0>
   18678:	add	r5, r5, #131072	; 0x20000
   1867c:	cmp	r5, r9
   18680:	beq	186d4 <build_ast@@Base+0x1b30>
   18684:	ldr	r3, [r6, #4]!
   18688:	cmp	r3, #0
   1868c:	beq	18678 <build_ast@@Base+0x1ad4>
   18690:	ldr	fp, [r4]
   18694:	mov	r0, r5
   18698:	sub	sl, fp, #1
   1869c:	lsl	r1, fp, #1
   186a0:	bl	17d50 <build_ast@@Base+0x11ac>
   186a4:	cmp	fp, #0
   186a8:	ldr	fp, [r4, #4]
   186ac:	beq	186c4 <build_ast@@Base+0x1b20>
   186b0:	sub	sl, sl, #1
   186b4:	ldrd	r0, [fp], #8
   186b8:	bl	17d30 <build_ast@@Base+0x118c>
   186bc:	cmn	sl, #1
   186c0:	bne	186b0 <build_ast@@Base+0x1b0c>
   186c4:	add	r5, r5, #131072	; 0x20000
   186c8:	cmp	r5, r9
   186cc:	add	r4, r4, #8
   186d0:	bne	18684 <build_ast@@Base+0x1ae0>
   186d4:	ldr	r3, [sp, #8]
   186d8:	cmp	r3, #0
   186dc:	beq	1860c <build_ast@@Base+0x1a68>
   186e0:	ldr	r4, [sp, #12]
   186e4:	mov	r2, #9
   186e8:	mov	r0, r8
   186ec:	ldr	r1, [r4, #4]
   186f0:	bl	16f38 <build_ast@@Base+0x394>
   186f4:	ldr	r3, [r8, #52]	; 0x34
   186f8:	add	r7, r7, #1
   186fc:	cmp	r3, r7
   18700:	str	r0, [r4, #4]
   18704:	bne	1861c <build_ast@@Base+0x1a78>
   18708:	mov	r0, #0
   1870c:	add	sp, sp, #20
   18710:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18714:	b	17d18 <build_ast@@Base+0x1174>
   18718:	mov	r1, #3
   1871c:	mov	r0, #16777216	; 0x1000000
   18720:	bl	17d50 <build_ast@@Base+0x11ac>
   18724:	mov	r3, #0
   18728:	str	r3, [sp, #8]
   1872c:	b	18650 <build_ast@@Base+0x1aac>
   18730:	ldr	r1, [pc, #52]	; 1876c <build_ast@@Base+0x1bc8>
   18734:	ldr	r0, [pc, #52]	; 18770 <build_ast@@Base+0x1bcc>
   18738:	bl	17d50 <build_ast@@Base+0x11ac>
   1873c:	ldr	r0, [r8, #8]
   18740:	bl	17d18 <build_ast@@Base+0x1174>
   18744:	cmp	r4, #0
   18748:	beq	1856c <build_ast@@Base+0x19c8>
   1874c:	mov	r0, r4
   18750:	bl	184f0 <build_ast@@Base+0x194c>
   18754:	b	1856c <build_ast@@Base+0x19c8>
   18758:	andeq	r3, r1, r8, lsr #3
   1875c:	andeq	r3, r1, r8, asr r1
   18760:			; <UNDEFINED> instruction: 0x01b30000
   18764:	andeq	r3, r1, r8, asr #2
   18768:			; <UNDEFINED> instruction: 0x01a10000
   1876c:	teqmi	r8, sl, lsr #6
   18770:	strbvs	r6, [r3, -r1, ror #8]!

00018774 <__gcov_sort_n_vals@@Base>:
   18774:	cmp	r1, #2
   18778:	bxle	lr
   1877c:	sub	r1, r1, #3
   18780:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18784:	add	r2, r0, #8
   18788:	sub	sp, sp, #20
   1878c:	mov	r6, r0
   18790:	bic	r7, r1, #1
   18794:	mvn	r8, #15
   18798:	mov	lr, #0
   1879c:	ldrd	r0, [r2]
   187a0:	ldrd	r4, [r2, #16]
   187a4:	ldrd	sl, [r2, #8]
   187a8:	add	r9, r2, #16
   187ac:	cmp	r0, r4
   187b0:	sbcs	r3, r1, r5
   187b4:	mov	ip, r9
   187b8:	sub	r1, r6, r8
   187bc:	strd	sl, [sp]
   187c0:	mov	r3, lr
   187c4:	bge	1882c <__gcov_sort_n_vals@@Base+0xb8>
   187c8:	add	sl, r8, #16
   187cc:	mvn	fp, #1
   187d0:	add	sl, r2, sl
   187d4:	orr	fp, lr, fp
   187d8:	str	r7, [sp, #8]
   187dc:	str	r6, [sp, #12]
   187e0:	b	187f8 <__gcov_sort_n_vals@@Base+0x84>
   187e4:	ldrd	r6, [ip, #-16]
   187e8:	sub	r2, r2, #16
   187ec:	cmp	r6, r4
   187f0:	sbcs	r1, r7, r5
   187f4:	bge	18854 <__gcov_sort_n_vals@@Base+0xe0>
   187f8:	ldrd	r6, [r2, #-8]
   187fc:	lsl	r1, r3, #3
   18800:	mov	r0, r3
   18804:	strd	r6, [r2, #8]
   18808:	ldrd	r6, [sl, r1]
   1880c:	sub	r3, r3, #2
   18810:	cmp	r3, fp
   18814:	strd	r6, [r2, #16]
   18818:	mov	ip, r2
   1881c:	bne	187e4 <__gcov_sort_n_vals@@Base+0x70>
   18820:	ldr	r6, [sp, #12]
   18824:	ldr	r7, [sp, #8]
   18828:	add	r1, r6, r1
   1882c:	ldrd	r2, [sp]
   18830:	cmp	lr, r7
   18834:	sub	r8, r8, #16
   18838:	strd	r2, [r1]
   1883c:	add	lr, lr, #2
   18840:	strd	r4, [ip]
   18844:	mov	r2, r9
   18848:	bne	1879c <__gcov_sort_n_vals@@Base+0x28>
   1884c:	add	sp, sp, #20
   18850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18854:	ldr	r6, [sp, #12]
   18858:	ldr	r7, [sp, #8]
   1885c:	add	r1, r6, r0, lsl #3
   18860:	b	1882c <__gcov_sort_n_vals@@Base+0xb8>
   18864:	push	{r4, r5, r6, lr}
   18868:	ldr	r4, [pc, #76]	; 188bc <__gcov_sort_n_vals@@Base+0x148>
   1886c:	smull	r2, r3, r4, r0
   18870:	asr	r4, r0, #31
   18874:	rsb	r4, r4, r3, asr #1
   18878:	add	r4, r4, r4, lsl #3
   1887c:	subs	r4, r0, r4
   18880:	bne	188b8 <__gcov_sort_n_vals@@Base+0x144>
   18884:	cmp	r0, #0
   18888:	mov	r6, r0
   1888c:	ldr	r5, [r1]
   18890:	pople	{r4, r5, r6, pc}
   18894:	add	r5, r5, #8
   18898:	mov	r0, r5
   1889c:	add	r4, r4, #9
   188a0:	mov	r1, #8
   188a4:	bl	18774 <__gcov_sort_n_vals@@Base>
   188a8:	cmp	r6, r4
   188ac:	add	r5, r5, #72	; 0x48
   188b0:	bgt	18898 <__gcov_sort_n_vals@@Base+0x124>
   188b4:	pop	{r4, r5, r6, pc}
   188b8:	bl	119ac <abort@plt>
   188bc:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   188c0:	ldr	r3, [r0, #48]	; 0x30
   188c4:	cmp	r3, #0
   188c8:	bxeq	lr
   188cc:	push	{r4, r5, r6, lr}
   188d0:	ldr	lr, [r0, #52]	; 0x34
   188d4:	cmp	lr, #0
   188d8:	popeq	{r4, r5, r6, pc}
   188dc:	mov	r5, r0
   188e0:	mov	r4, #0
   188e4:	add	r6, r0, #12
   188e8:	ldr	r1, [r5, #56]	; 0x38
   188ec:	mov	r2, r6
   188f0:	mov	r3, #0
   188f4:	ldr	r1, [r1, r4, lsl #2]
   188f8:	add	r1, r1, #16
   188fc:	ldr	ip, [r2, #4]!
   18900:	cmp	ip, #0
   18904:	beq	18914 <__gcov_sort_n_vals@@Base+0x1a0>
   18908:	cmp	r3, #8
   1890c:	beq	18930 <__gcov_sort_n_vals@@Base+0x1bc>
   18910:	add	r1, r1, #8
   18914:	add	r3, r3, #1
   18918:	cmp	r3, #9
   1891c:	bne	188fc <__gcov_sort_n_vals@@Base+0x188>
   18920:	add	r4, r4, #1
   18924:	cmp	lr, r4
   18928:	bne	188e8 <__gcov_sort_n_vals@@Base+0x174>
   1892c:	pop	{r4, r5, r6, pc}
   18930:	ldr	r0, [r1], #4
   18934:	bl	18864 <__gcov_sort_n_vals@@Base+0xf0>
   18938:	ldr	lr, [r5, #52]	; 0x34
   1893c:	b	18920 <__gcov_sort_n_vals@@Base+0x1ac>
   18940:	push	{r4, r5, r6, r7, r8, r9, lr}
   18944:	sub	sp, sp, #6080	; 0x17c0
   18948:	ldr	ip, [pc, #396]	; 18adc <__gcov_sort_n_vals@@Base+0x368>
   1894c:	sub	sp, sp, #36	; 0x24
   18950:	add	ip, pc, ip
   18954:	add	r5, sp, #2016	; 0x7e0
   18958:	mov	r4, r0
   1895c:	mov	r6, r1
   18960:	mov	r1, #0
   18964:	str	r1, [ip, #4]
   18968:	str	r1, [ip]
   1896c:	mov	r8, r2
   18970:	mov	r7, r3
   18974:	str	r1, [r5, #-2000]	; 0xfffff830
   18978:	str	r1, [r5, #-1996]	; 0xfffff834
   1897c:	bl	188c0 <__gcov_sort_n_vals@@Base+0x14c>
   18980:	mov	r1, r6
   18984:	ldr	r0, [r4, #12]
   18988:	bl	17b90 <build_ast@@Base+0xfec>
   1898c:	cmn	r0, #1
   18990:	beq	18a0c <__gcov_sort_n_vals@@Base+0x298>
   18994:	bl	17e78 <build_ast@@Base+0x12d4>
   18998:	cmp	r0, #0
   1899c:	beq	18a18 <__gcov_sort_n_vals@@Base+0x2a4>
   189a0:	ldr	r2, [pc, #312]	; 18ae0 <__gcov_sort_n_vals@@Base+0x36c>
   189a4:	ldr	r1, [r6]
   189a8:	cmp	r0, r2
   189ac:	beq	18a70 <__gcov_sort_n_vals@@Base+0x2fc>
   189b0:	ldr	r0, [pc, #300]	; 18ae4 <__gcov_sort_n_vals@@Base+0x370>
   189b4:	add	r0, pc, r0
   189b8:	bl	16f04 <build_ast@@Base+0x360>
   189bc:	ldr	r5, [pc, #292]	; 18ae8 <__gcov_sort_n_vals@@Base+0x374>
   189c0:	add	r5, pc, r5
   189c4:	ldr	r1, [r5, #4]
   189c8:	cmp	r1, #0
   189cc:	beq	189ec <__gcov_sort_n_vals@@Base+0x278>
   189d0:	mov	r2, #9
   189d4:	mov	r0, r4
   189d8:	bl	16f38 <build_ast@@Base+0x394>
   189dc:	cmp	r0, #0
   189e0:	mov	r1, r0
   189e4:	str	r0, [r5, #4]
   189e8:	bne	189d0 <__gcov_sort_n_vals@@Base+0x25c>
   189ec:	bl	17ca8 <build_ast@@Base+0x1104>
   189f0:	cmp	r0, #0
   189f4:	beq	18a0c <__gcov_sort_n_vals@@Base+0x298>
   189f8:	blt	18ad0 <__gcov_sort_n_vals@@Base+0x35c>
   189fc:	ldr	r0, [pc, #232]	; 18aec <__gcov_sort_n_vals@@Base+0x378>
   18a00:	add	r0, pc, r0
   18a04:	ldr	r1, [r6]
   18a08:	bl	16f04 <build_ast@@Base+0x360>
   18a0c:	add	sp, sp, #6080	; 0x17c0
   18a10:	add	sp, sp, #36	; 0x24
   18a14:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18a18:	bl	17a48 <build_ast@@Base+0xea4>
   18a1c:	ldr	r1, [r5, #-2000]	; 0xfffff830
   18a20:	add	r9, sp, #24
   18a24:	cmp	r1, #0
   18a28:	beq	18ab8 <__gcov_sort_n_vals@@Base+0x344>
   18a2c:	add	r3, sp, #6144	; 0x1800
   18a30:	str	r7, [sp, #4]
   18a34:	ldr	r3, [r3]
   18a38:	mov	r1, r8
   18a3c:	str	r3, [sp]
   18a40:	add	r2, r4, #16
   18a44:	mov	r3, r9
   18a48:	ldr	r0, [r6]
   18a4c:	bl	178f4 <build_ast@@Base+0xd50>
   18a50:	cmn	r0, #1
   18a54:	beq	189bc <__gcov_sort_n_vals@@Base+0x248>
   18a58:	mov	r1, r9
   18a5c:	ldr	r3, [r5, #-2000]	; 0xfffff830
   18a60:	ldr	r2, [r5, #-1996]	; 0xfffff834
   18a64:	mov	r0, r4
   18a68:	bl	18548 <build_ast@@Base+0x19a4>
   18a6c:	b	189bc <__gcov_sort_n_vals@@Base+0x248>
   18a70:	add	ip, sp, #20
   18a74:	add	r3, sp, #16
   18a78:	str	r7, [sp, #8]
   18a7c:	stm	sp, {r3, ip}
   18a80:	add	r3, sp, #6144	; 0x1800
   18a84:	add	r9, sp, #24
   18a88:	ldr	r3, [r3]
   18a8c:	mov	r0, r1
   18a90:	mov	r2, r9
   18a94:	add	r3, r3, #8
   18a98:	mov	r1, r4
   18a9c:	bl	181dc <build_ast@@Base+0x1638>
   18aa0:	cmn	r0, #1
   18aa4:	beq	189bc <__gcov_sort_n_vals@@Base+0x248>
   18aa8:	bl	17a48 <build_ast@@Base+0xea4>
   18aac:	ldr	r1, [r5, #-2000]	; 0xfffff830
   18ab0:	cmp	r1, #0
   18ab4:	bne	18a2c <__gcov_sort_n_vals@@Base+0x2b8>
   18ab8:	ldr	r2, [pc, #48]	; 18af0 <__gcov_sort_n_vals@@Base+0x37c>
   18abc:	mov	r0, r9
   18ac0:	bl	11934 <memset@plt>
   18ac4:	ldr	r3, [r5, #-1996]	; 0xfffff834
   18ac8:	str	r3, [r5, #-2000]	; 0xfffff830
   18acc:	b	18a2c <__gcov_sort_n_vals@@Base+0x2b8>
   18ad0:	ldr	r0, [pc, #28]	; 18af4 <__gcov_sort_n_vals@@Base+0x380>
   18ad4:	add	r0, pc, r0
   18ad8:	b	18a04 <__gcov_sort_n_vals@@Base+0x290>
   18adc:	ldrdeq	r2, [r1], -r0
   18ae0:	strbvs	r6, [r3, -r1, ror #8]!
   18ae4:	andeq	r1, r0, r8, lsr r0
   18ae8:	andeq	r2, r1, r0, ror #26
   18aec:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   18af0:	andeq	r1, r0, r8, asr #15
   18af4:	ldrdeq	r0, [r0], -ip
   18af8:	push	{r4, r5, r6, r7, r8, lr}
   18afc:	sub	sp, sp, #6080	; 0x17c0
   18b00:	sub	sp, sp, #32
   18b04:	add	r6, sp, #24
   18b08:	add	r2, sp, #12
   18b0c:	mov	r8, r1
   18b10:	mov	r1, r6
   18b14:	mov	r4, r0
   18b18:	bl	17150 <build_ast@@Base+0x5ac>
   18b1c:	add	r5, sp, #8
   18b20:	mov	r7, r0
   18b24:	mov	r0, r5
   18b28:	bl	172e4 <build_ast@@Base+0x740>
   18b2c:	cmp	r4, #0
   18b30:	beq	18b58 <__gcov_sort_n_vals@@Base+0x3e4>
   18b34:	mov	r0, r4
   18b38:	str	r6, [sp]
   18b3c:	mov	r3, r7
   18b40:	mov	r2, r8
   18b44:	mov	r1, r5
   18b48:	bl	18940 <__gcov_sort_n_vals@@Base+0x1cc>
   18b4c:	ldr	r4, [r4, #4]
   18b50:	cmp	r4, #0
   18b54:	bne	18b34 <__gcov_sort_n_vals@@Base+0x3c0>
   18b58:	ldr	r0, [sp, #8]
   18b5c:	bl	1185c <free@plt>
   18b60:	add	sp, sp, #6080	; 0x17c0
   18b64:	add	sp, sp, #32
   18b68:	pop	{r4, r5, r6, r7, r8, pc}
   18b6c:	ldrb	r1, [r0, #4]
   18b70:	tst	r1, #1
   18b74:	bxne	lr
   18b78:	push	{r4, lr}
   18b7c:	lsr	r1, r1, #1
   18b80:	mov	r4, r0
   18b84:	and	r1, r1, #1
   18b88:	ldr	r0, [r0]
   18b8c:	bl	18af8 <__gcov_sort_n_vals@@Base+0x384>
   18b90:	ldrb	r3, [r4, #4]
   18b94:	bic	r3, r3, #3
   18b98:	orr	r3, r3, #3
   18b9c:	strb	r3, [r4, #4]
   18ba0:	pop	{r4, pc}
   18ba4:	push	{r4, r5, r6, lr}
   18ba8:	ldr	r4, [pc, #84]	; 18c04 <__gcov_sort_n_vals@@Base+0x490>
   18bac:	ldr	r5, [pc, #84]	; 18c08 <__gcov_sort_n_vals@@Base+0x494>
   18bb0:	add	r4, pc, r4
   18bb4:	mov	r0, r4
   18bb8:	bl	18b6c <__gcov_sort_n_vals@@Base+0x3f8>
   18bbc:	ldr	r3, [r4, #8]
   18bc0:	add	r5, pc, r5
   18bc4:	cmp	r3, #0
   18bc8:	ldrne	r2, [r4, #12]
   18bcc:	strne	r2, [r3, #12]
   18bd0:	ldr	r2, [pc, #52]	; 18c0c <__gcov_sort_n_vals@@Base+0x498>
   18bd4:	add	r2, pc, r2
   18bd8:	ldr	r2, [r2, #12]
   18bdc:	cmp	r2, #0
   18be0:	strne	r3, [r2, #8]
   18be4:	beq	18bf0 <__gcov_sort_n_vals@@Base+0x47c>
   18be8:	pop	{r4, r5, r6, lr}
   18bec:	b	16cac <build_ast@@Base+0x108>
   18bf0:	ldr	r2, [pc, #24]	; 18c10 <__gcov_sort_n_vals@@Base+0x49c>
   18bf4:	ldr	r2, [r5, r2]
   18bf8:	pop	{r4, r5, r6, lr}
   18bfc:	str	r3, [r2, #4]
   18c00:	b	16cac <build_ast@@Base+0x108>
   18c04:	ldrdeq	r2, [r1], -ip
   18c08:	andeq	r1, r1, r8, lsr r4
   18c0c:			; <UNDEFINED> instruction: 0x00012eb8
   18c10:	andeq	r0, r0, r4, lsr #1
   18c14:	ldr	r1, [r0]
   18c18:	push	{r4, r5, r6, lr}
   18c1c:	cmp	r1, #0
   18c20:	ldr	r5, [pc, #156]	; 18cc4 <__gcov_sort_n_vals@@Base+0x550>
   18c24:	add	r5, pc, r5
   18c28:	popeq	{r4, r5, r6, pc}
   18c2c:	ldr	r3, [r0, #52]	; 0x34
   18c30:	cmp	r3, #0
   18c34:	popeq	{r4, r5, r6, pc}
   18c38:	mov	r4, r0
   18c3c:	mov	r2, #0
   18c40:	add	r0, r0, #12
   18c44:	bl	17894 <build_ast@@Base+0xcf0>
   18c48:	cmp	r0, #0
   18c4c:	popeq	{r4, r5, r6, pc}
   18c50:	ldr	r6, [pc, #112]	; 18cc8 <__gcov_sort_n_vals@@Base+0x554>
   18c54:	add	r6, pc, r6
   18c58:	ldr	r2, [r6]
   18c5c:	cmp	r2, #0
   18c60:	beq	18c78 <__gcov_sort_n_vals@@Base+0x504>
   18c64:	ldr	r3, [pc, #96]	; 18ccc <__gcov_sort_n_vals@@Base+0x558>
   18c68:	str	r2, [r4, #4]
   18c6c:	add	r3, pc, r3
   18c70:	str	r4, [r3]
   18c74:	pop	{r4, r5, r6, pc}
   18c78:	ldr	r3, [pc, #80]	; 18cd0 <__gcov_sort_n_vals@@Base+0x55c>
   18c7c:	ldr	r2, [pc, #80]	; 18cd4 <__gcov_sort_n_vals@@Base+0x560>
   18c80:	mov	r0, #12
   18c84:	ldr	r5, [r5, r3]
   18c88:	add	r2, pc, r2
   18c8c:	ldr	r1, [r5]
   18c90:	bl	17894 <build_ast@@Base+0xcf0>
   18c94:	cmp	r0, #0
   18c98:	ldreq	r2, [r6]
   18c9c:	beq	18c64 <__gcov_sort_n_vals@@Base+0x4f0>
   18ca0:	ldr	r3, [r5, #4]
   18ca4:	cmp	r3, #0
   18ca8:	str	r3, [r6, #8]
   18cac:	strne	r6, [r3, #12]
   18cb0:	ldr	r3, [pc, #32]	; 18cd8 <__gcov_sort_n_vals@@Base+0x564>
   18cb4:	add	r3, pc, r3
   18cb8:	str	r3, [r5, #4]
   18cbc:	ldr	r2, [r3]
   18cc0:	b	18c64 <__gcov_sort_n_vals@@Base+0x4f0>
   18cc4:	ldrdeq	r1, [r1], -r4
   18cc8:	andeq	r2, r1, r8, lsr lr
   18ccc:	andeq	r2, r1, r0, lsr #28
   18cd0:	andeq	r0, r0, r4, lsr #1
   18cd4:	andeq	r0, r0, r8, lsl #27
   18cd8:	ldrdeq	r2, [r1], -r8
   18cdc:	cmp	r3, #0
   18ce0:	cmpeq	r2, #0
   18ce4:	bne	18d08 <__gcov_sort_n_vals@@Base+0x594>
   18ce8:	cmp	r1, #0
   18cec:	movlt	r1, #-2147483648	; 0x80000000
   18cf0:	movlt	r0, #0
   18cf4:	blt	18d04 <__gcov_sort_n_vals@@Base+0x590>
   18cf8:	cmpeq	r0, #0
   18cfc:	mvnne	r1, #-2147483648	; 0x80000000
   18d00:	mvnne	r0, #0
   18d04:	b	18db0 <__gcov_sort_n_vals@@Base+0x63c>
   18d08:	sub	sp, sp, #8
   18d0c:	push	{sp, lr}
   18d10:	cmp	r1, #0
   18d14:	blt	18d34 <__gcov_sort_n_vals@@Base+0x5c0>
   18d18:	cmp	r3, #0
   18d1c:	blt	18d68 <__gcov_sort_n_vals@@Base+0x5f4>
   18d20:	bl	18e04 <__gcov_sort_n_vals@@Base+0x690>
   18d24:	ldr	lr, [sp, #4]
   18d28:	add	sp, sp, #8
   18d2c:	pop	{r2, r3}
   18d30:	bx	lr
   18d34:	rsbs	r0, r0, #0
   18d38:	sbc	r1, r1, r1, lsl #1
   18d3c:	cmp	r3, #0
   18d40:	blt	18d8c <__gcov_sort_n_vals@@Base+0x618>
   18d44:	bl	18e04 <__gcov_sort_n_vals@@Base+0x690>
   18d48:	ldr	lr, [sp, #4]
   18d4c:	add	sp, sp, #8
   18d50:	pop	{r2, r3}
   18d54:	rsbs	r0, r0, #0
   18d58:	sbc	r1, r1, r1, lsl #1
   18d5c:	rsbs	r2, r2, #0
   18d60:	sbc	r3, r3, r3, lsl #1
   18d64:	bx	lr
   18d68:	rsbs	r2, r2, #0
   18d6c:	sbc	r3, r3, r3, lsl #1
   18d70:	bl	18e04 <__gcov_sort_n_vals@@Base+0x690>
   18d74:	ldr	lr, [sp, #4]
   18d78:	add	sp, sp, #8
   18d7c:	pop	{r2, r3}
   18d80:	rsbs	r0, r0, #0
   18d84:	sbc	r1, r1, r1, lsl #1
   18d88:	bx	lr
   18d8c:	rsbs	r2, r2, #0
   18d90:	sbc	r3, r3, r3, lsl #1
   18d94:	bl	18e04 <__gcov_sort_n_vals@@Base+0x690>
   18d98:	ldr	lr, [sp, #4]
   18d9c:	add	sp, sp, #8
   18da0:	pop	{r2, r3}
   18da4:	rsbs	r2, r2, #0
   18da8:	sbc	r3, r3, r3, lsl #1
   18dac:	bx	lr
   18db0:	push	{r1, lr}
   18db4:	mov	r0, #8
   18db8:	bl	1182c <raise@plt>
   18dbc:	pop	{r1, pc}
   18dc0:	ldr	r3, [pc, #48]	; 18df8 <__gcov_sort_n_vals@@Base+0x684>
   18dc4:	ldr	r2, [pc, #48]	; 18dfc <__gcov_sort_n_vals@@Base+0x688>
   18dc8:	and	r3, r3, r0, lsr #1
   18dcc:	sub	r0, r0, r3
   18dd0:	and	r3, r0, r2
   18dd4:	and	r0, r2, r0, lsr #2
   18dd8:	add	r3, r3, r0
   18ddc:	ldr	r0, [pc, #28]	; 18e00 <__gcov_sort_n_vals@@Base+0x68c>
   18de0:	add	r3, r3, r3, lsr #4
   18de4:	and	r0, r0, r3
   18de8:	add	r0, r0, r0, lsl #8
   18dec:	add	r0, r0, r0, lsl #16
   18df0:	lsr	r0, r0, #24
   18df4:	bx	lr
   18df8:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   18dfc:	teqcc	r3, #-872415232	; 0xcc000000
   18e00:	svceq	0x000f0f0f
   18e04:	cmp	r1, r3
   18e08:	cmpeq	r0, r2
   18e0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e10:	mov	r4, r0
   18e14:	movcc	r0, #0
   18e18:	mov	r5, r1
   18e1c:	ldr	lr, [sp, #36]	; 0x24
   18e20:	movcc	r1, r0
   18e24:	bcc	18f20 <__gcov_sort_n_vals@@Base+0x7ac>
   18e28:	cmp	r3, #0
   18e2c:	clzeq	ip, r2
   18e30:	clzne	ip, r3
   18e34:	addeq	ip, ip, #32
   18e38:	cmp	r5, #0
   18e3c:	clzeq	r1, r4
   18e40:	addeq	r1, r1, #32
   18e44:	clzne	r1, r5
   18e48:	sub	ip, ip, r1
   18e4c:	sub	sl, ip, #32
   18e50:	lsl	r9, r3, ip
   18e54:	rsb	fp, ip, #32
   18e58:	orr	r9, r9, r2, lsl sl
   18e5c:	orr	r9, r9, r2, lsr fp
   18e60:	lsl	r8, r2, ip
   18e64:	cmp	r5, r9
   18e68:	cmpeq	r4, r8
   18e6c:	movcc	r0, #0
   18e70:	movcc	r1, r0
   18e74:	bcc	18e90 <__gcov_sort_n_vals@@Base+0x71c>
   18e78:	mov	r0, #1
   18e7c:	subs	r4, r4, r8
   18e80:	lsl	r1, r0, sl
   18e84:	orr	r1, r1, r0, lsr fp
   18e88:	lsl	r0, r0, ip
   18e8c:	sbc	r5, r5, r9
   18e90:	cmp	ip, #0
   18e94:	beq	18f20 <__gcov_sort_n_vals@@Base+0x7ac>
   18e98:	lsr	r6, r8, #1
   18e9c:	orr	r6, r6, r9, lsl #31
   18ea0:	lsr	r7, r9, #1
   18ea4:	mov	r2, ip
   18ea8:	b	18ecc <__gcov_sort_n_vals@@Base+0x758>
   18eac:	subs	r3, r4, r6
   18eb0:	sbc	r8, r5, r7
   18eb4:	adds	r3, r3, r3
   18eb8:	adc	r8, r8, r8
   18ebc:	adds	r4, r3, #1
   18ec0:	adc	r5, r8, #0
   18ec4:	subs	r2, r2, #1
   18ec8:	beq	18ee8 <__gcov_sort_n_vals@@Base+0x774>
   18ecc:	cmp	r5, r7
   18ed0:	cmpeq	r4, r6
   18ed4:	bcs	18eac <__gcov_sort_n_vals@@Base+0x738>
   18ed8:	adds	r4, r4, r4
   18edc:	adc	r5, r5, r5
   18ee0:	subs	r2, r2, #1
   18ee4:	bne	18ecc <__gcov_sort_n_vals@@Base+0x758>
   18ee8:	lsr	r3, r4, ip
   18eec:	orr	r3, r3, r5, lsl fp
   18ef0:	lsr	r2, r5, ip
   18ef4:	orr	r3, r3, r5, lsr sl
   18ef8:	adds	r0, r0, r4
   18efc:	mov	r4, r3
   18f00:	lsl	r3, r2, ip
   18f04:	orr	r3, r3, r4, lsl sl
   18f08:	lsl	ip, r4, ip
   18f0c:	orr	r3, r3, r4, lsr fp
   18f10:	adc	r1, r1, r5
   18f14:	subs	r0, r0, ip
   18f18:	mov	r5, r2
   18f1c:	sbc	r1, r1, r3
   18f20:	cmp	lr, #0
   18f24:	strdne	r4, [lr]
   18f28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018f2c <__libc_csu_init@@Base>:
   18f2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18f30:	mov	r7, r0
   18f34:	ldr	r6, [pc, #72]	; 18f84 <__libc_csu_init@@Base+0x58>
   18f38:	ldr	r5, [pc, #72]	; 18f88 <__libc_csu_init@@Base+0x5c>
   18f3c:	add	r6, pc, r6
   18f40:	add	r5, pc, r5
   18f44:	sub	r6, r6, r5
   18f48:	mov	r8, r1
   18f4c:	mov	r9, r2
   18f50:	bl	11800 <fdopen@plt-0x20>
   18f54:	asrs	r6, r6, #2
   18f58:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18f5c:	mov	r4, #0
   18f60:	add	r4, r4, #1
   18f64:	ldr	r3, [r5], #4
   18f68:	mov	r2, r9
   18f6c:	mov	r1, r8
   18f70:	mov	r0, r7
   18f74:	blx	r3
   18f78:	cmp	r6, r4
   18f7c:	bne	18f60 <__libc_csu_init@@Base+0x34>
   18f80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18f84:	andeq	r0, r1, r0, asr #31
   18f88:	andeq	r0, r1, r8, lsr #31

00018f8c <__libc_csu_fini@@Base>:
   18f8c:	bx	lr

Disassembly of section .fini:

00018f90 <.fini>:
   18f90:	push	{r3, lr}
   18f94:	pop	{r3, pc}
