
../repos/coreutils/src/sum:     file format elf32-littlearm


Disassembly of section .init:

00010ef4 <.init>:
   10ef4:	push	{r3, lr}
   10ef8:	bl	1120c <__assert_fail@plt+0x4c>
   10efc:	pop	{r3, pc}

Disassembly of section .plt:

00010f00 <fdopen@plt-0x14>:
   10f00:	push	{lr}		; (str lr, [sp, #-4]!)
   10f04:	ldr	lr, [pc, #4]	; 10f10 <fdopen@plt-0x4>
   10f08:	add	lr, pc, lr
   10f0c:	ldr	pc, [lr, #8]!
   10f10:	strdeq	r8, [r1], -r0

00010f14 <fdopen@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #240]!	; 0xf0

00010f20 <calloc@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #232]!	; 0xe8

00010f2c <fputs_unlocked@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #224]!	; 0xe0

00010f38 <raise@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #24, 20	; 0x18000
   10f40:	ldr	pc, [ip, #216]!	; 0xd8

00010f44 <strcmp@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #24, 20	; 0x18000
   10f4c:	ldr	pc, [ip, #208]!	; 0xd0

00010f50 <posix_fadvise64@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #24, 20	; 0x18000
   10f58:	ldr	pc, [ip, #200]!	; 0xc8

00010f5c <fflush@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #24, 20	; 0x18000
   10f64:	ldr	pc, [ip, #192]!	; 0xc0

00010f68 <memmove@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #24, 20	; 0x18000
   10f70:	ldr	pc, [ip, #184]!	; 0xb8

00010f74 <free@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #24, 20	; 0x18000
   10f7c:	ldr	pc, [ip, #176]!	; 0xb0

00010f80 <_exit@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #24, 20	; 0x18000
   10f88:	ldr	pc, [ip, #168]!	; 0xa8

00010f8c <memcpy@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #24, 20	; 0x18000
   10f94:	ldr	pc, [ip, #160]!	; 0xa0

00010f98 <__strtoull_internal@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #24, 20	; 0x18000
   10fa0:	ldr	pc, [ip, #152]!	; 0x98

00010fa4 <mbsinit@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #24, 20	; 0x18000
   10fac:	ldr	pc, [ip, #144]!	; 0x90

00010fb0 <dcgettext@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #24, 20	; 0x18000
   10fb8:	ldr	pc, [ip, #136]!	; 0x88

00010fbc <realloc@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #24, 20	; 0x18000
   10fc4:	ldr	pc, [ip, #128]!	; 0x80

00010fc8 <textdomain@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #24, 20	; 0x18000
   10fd0:	ldr	pc, [ip, #120]!	; 0x78

00010fd4 <iswprint@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #24, 20	; 0x18000
   10fdc:	ldr	pc, [ip, #112]!	; 0x70

00010fe0 <fwrite@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #24, 20	; 0x18000
   10fe8:	ldr	pc, [ip, #104]!	; 0x68

00010fec <lseek64@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #24, 20	; 0x18000
   10ff4:	ldr	pc, [ip, #96]!	; 0x60

00010ff8 <__ctype_get_mb_cur_max@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #24, 20	; 0x18000
   11000:	ldr	pc, [ip, #88]!	; 0x58

00011004 <__fpending@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #24, 20	; 0x18000
   1100c:	ldr	pc, [ip, #80]!	; 0x50

00011010 <mbrtowc@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #24, 20	; 0x18000
   11018:	ldr	pc, [ip, #72]!	; 0x48

0001101c <error@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #24, 20	; 0x18000
   11024:	ldr	pc, [ip, #64]!	; 0x40

00011028 <getenv@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #24, 20	; 0x18000
   11030:	ldr	pc, [ip, #56]!	; 0x38

00011034 <malloc@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #24, 20	; 0x18000
   1103c:	ldr	pc, [ip, #48]!	; 0x30

00011040 <__libc_start_main@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #24, 20	; 0x18000
   11048:	ldr	pc, [ip, #40]!	; 0x28

0001104c <__freading@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #24, 20	; 0x18000
   11054:	ldr	pc, [ip, #32]!

00011058 <__gmon_start__@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #24, 20	; 0x18000
   11060:	ldr	pc, [ip, #24]!

00011064 <getopt_long@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #24, 20	; 0x18000
   1106c:	ldr	pc, [ip, #16]!

00011070 <__ctype_b_loc@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #24, 20	; 0x18000
   11078:	ldr	pc, [ip, #8]!

0001107c <exit@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #24, 20	; 0x18000
   11084:	ldr	pc, [ip, #0]!

00011088 <bcmp@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #94208	; 0x17000
   11090:	ldr	pc, [ip, #4088]!	; 0xff8

00011094 <strlen@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #94208	; 0x17000
   1109c:	ldr	pc, [ip, #4080]!	; 0xff0

000110a0 <strchr@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #94208	; 0x17000
   110a8:	ldr	pc, [ip, #4072]!	; 0xfe8

000110ac <__errno_location@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #94208	; 0x17000
   110b4:	ldr	pc, [ip, #4064]!	; 0xfe0

000110b8 <__sprintf_chk@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #94208	; 0x17000
   110c0:	ldr	pc, [ip, #4056]!	; 0xfd8

000110c4 <__cxa_atexit@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #94208	; 0x17000
   110cc:	ldr	pc, [ip, #4048]!	; 0xfd0

000110d0 <setvbuf@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #94208	; 0x17000
   110d8:	ldr	pc, [ip, #4040]!	; 0xfc8

000110dc <memset@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #94208	; 0x17000
   110e4:	ldr	pc, [ip, #4032]!	; 0xfc0

000110e8 <__printf_chk@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #94208	; 0x17000
   110f0:	ldr	pc, [ip, #4024]!	; 0xfb8

000110f4 <fileno@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #94208	; 0x17000
   110fc:	ldr	pc, [ip, #4016]!	; 0xfb0

00011100 <__fprintf_chk@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #94208	; 0x17000
   11108:	ldr	pc, [ip, #4008]!	; 0xfa8

0001110c <fclose@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #94208	; 0x17000
   11114:	ldr	pc, [ip, #4000]!	; 0xfa0

00011118 <fseeko64@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #94208	; 0x17000
   11120:	ldr	pc, [ip, #3992]!	; 0xf98

00011124 <fcntl64@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #94208	; 0x17000
   1112c:	ldr	pc, [ip, #3984]!	; 0xf90

00011130 <__overflow@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #94208	; 0x17000
   11138:	ldr	pc, [ip, #3976]!	; 0xf88

0001113c <setlocale@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #94208	; 0x17000
   11144:	ldr	pc, [ip, #3968]!	; 0xf80

00011148 <strrchr@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #94208	; 0x17000
   11150:	ldr	pc, [ip, #3960]!	; 0xf78

00011154 <nl_langinfo@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #94208	; 0x17000
   1115c:	ldr	pc, [ip, #3952]!	; 0xf70

00011160 <localeconv@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #94208	; 0x17000
   11168:	ldr	pc, [ip, #3944]!	; 0xf68

0001116c <clearerr_unlocked@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #94208	; 0x17000
   11174:	ldr	pc, [ip, #3936]!	; 0xf60

00011178 <fopen64@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #94208	; 0x17000
   11180:	ldr	pc, [ip, #3928]!	; 0xf58

00011184 <bindtextdomain@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #94208	; 0x17000
   1118c:	ldr	pc, [ip, #3920]!	; 0xf50

00011190 <fread_unlocked@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #94208	; 0x17000
   11198:	ldr	pc, [ip, #3912]!	; 0xf48

0001119c <strncmp@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #94208	; 0x17000
   111a4:	ldr	pc, [ip, #3904]!	; 0xf40

000111a8 <abort@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #94208	; 0x17000
   111b0:	ldr	pc, [ip, #3896]!	; 0xf38

000111b4 <close@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #94208	; 0x17000
   111bc:	ldr	pc, [ip, #3888]!	; 0xf30

000111c0 <__assert_fail@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #94208	; 0x17000
   111c8:	ldr	pc, [ip, #3880]!	; 0xf28

Disassembly of section .text:

000111d0 <.text>:
   111d0:	mov	fp, #0
   111d4:	mov	lr, #0
   111d8:	pop	{r1}		; (ldr r1, [sp], #4)
   111dc:	mov	r2, sp
   111e0:	push	{r2}		; (str r2, [sp, #-4]!)
   111e4:	push	{r0}		; (str r0, [sp, #-4]!)
   111e8:	ldr	ip, [pc, #16]	; 11200 <__assert_fail@plt+0x40>
   111ec:	push	{ip}		; (str ip, [sp, #-4]!)
   111f0:	ldr	r0, [pc, #12]	; 11204 <__assert_fail@plt+0x44>
   111f4:	ldr	r3, [pc, #12]	; 11208 <__assert_fail@plt+0x48>
   111f8:	bl	11040 <__libc_start_main@plt>
   111fc:	bl	111a8 <abort@plt>
   11200:	andeq	r7, r1, r8, lsr #13
   11204:	andeq	r1, r1, r8, ror fp
   11208:	andeq	r7, r1, r8, asr #12
   1120c:	ldr	r3, [pc, #20]	; 11228 <__assert_fail@plt+0x68>
   11210:	ldr	r2, [pc, #20]	; 1122c <__assert_fail@plt+0x6c>
   11214:	add	r3, pc, r3
   11218:	ldr	r2, [r3, r2]
   1121c:	cmp	r2, #0
   11220:	bxeq	lr
   11224:	b	11058 <__gmon_start__@plt>
   11228:	andeq	r7, r1, r4, ror #27
   1122c:	strdeq	r0, [r0], -r4
   11230:	ldr	r0, [pc, #24]	; 11250 <__assert_fail@plt+0x90>
   11234:	ldr	r3, [pc, #24]	; 11254 <__assert_fail@plt+0x94>
   11238:	cmp	r3, r0
   1123c:	bxeq	lr
   11240:	ldr	r3, [pc, #16]	; 11258 <__assert_fail@plt+0x98>
   11244:	cmp	r3, #0
   11248:	bxeq	lr
   1124c:	bx	r3
   11250:	andeq	r9, r2, ip, asr #2
   11254:	andeq	r9, r2, ip, asr #2
   11258:	andeq	r0, r0, r0
   1125c:	ldr	r0, [pc, #36]	; 11288 <__assert_fail@plt+0xc8>
   11260:	ldr	r1, [pc, #36]	; 1128c <__assert_fail@plt+0xcc>
   11264:	sub	r1, r1, r0
   11268:	asr	r1, r1, #2
   1126c:	add	r1, r1, r1, lsr #31
   11270:	asrs	r1, r1, #1
   11274:	bxeq	lr
   11278:	ldr	r3, [pc, #16]	; 11290 <__assert_fail@plt+0xd0>
   1127c:	cmp	r3, #0
   11280:	bxeq	lr
   11284:	bx	r3
   11288:	andeq	r9, r2, ip, asr #2
   1128c:	andeq	r9, r2, ip, asr #2
   11290:	andeq	r0, r0, r0
   11294:	push	{r4, lr}
   11298:	ldr	r4, [pc, #24]	; 112b8 <__assert_fail@plt+0xf8>
   1129c:	ldrb	r3, [r4]
   112a0:	cmp	r3, #0
   112a4:	popne	{r4, pc}
   112a8:	bl	11230 <__assert_fail@plt+0x70>
   112ac:	mov	r3, #1
   112b0:	strb	r3, [r4]
   112b4:	pop	{r4, pc}
   112b8:	andeq	r9, r2, r0, ror r1
   112bc:	b	1125c <__assert_fail@plt+0x9c>
   112c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112c4:	add	fp, sp, #28
   112c8:	sub	sp, sp, #4
   112cc:	mov	r7, r0
   112d0:	mov	r0, #32768	; 0x8000
   112d4:	mov	r5, r2
   112d8:	mov	r9, r1
   112dc:	bl	16680 <__assert_fail@plt+0x54c0>
   112e0:	cmp	r0, #0
   112e4:	beq	11398 <__assert_fail@plt+0x1d8>
   112e8:	str	r5, [sp]
   112ec:	mov	r4, r0
   112f0:	mov	r5, #0
   112f4:	mov	sl, #0
   112f8:	mov	r6, #0
   112fc:	mov	r8, #0
   11300:	add	r0, r4, r8
   11304:	rsb	r2, r8, #32768	; 0x8000
   11308:	mov	r1, #1
   1130c:	mov	r3, r7
   11310:	bl	11190 <fread_unlocked@plt>
   11314:	add	r8, r0, r8
   11318:	cmp	r8, #32768	; 0x8000
   1131c:	beq	11338 <__assert_fail@plt+0x178>
   11320:	ldr	r1, [r7]
   11324:	cmp	r0, #0
   11328:	beq	113a0 <__assert_fail@plt+0x1e0>
   1132c:	tst	r1, #16
   11330:	beq	11300 <__assert_fail@plt+0x140>
   11334:	b	113ac <__assert_fail@plt+0x1ec>
   11338:	mov	r0, #0
   1133c:	mov	r1, r4
   11340:	lsr	r3, r5, #1
   11344:	ldrb	r2, [r1, r0]!
   11348:	add	r3, r3, r5, lsl #15
   1134c:	add	r0, r0, #2
   11350:	cmp	r0, #32768	; 0x8000
   11354:	ldrb	r1, [r1, #1]
   11358:	add	r2, r3, r2
   1135c:	uxth	r2, r2
   11360:	lsr	r3, r2, #1
   11364:	orr	r2, r3, r2, lsl #15
   11368:	add	r1, r2, r1
   1136c:	uxth	r5, r1
   11370:	bne	1133c <__assert_fail@plt+0x17c>
   11374:	movw	r0, #32768	; 0x8000
   11378:	mvn	r1, r6
   1137c:	movt	r0, #65535	; 0xffff
   11380:	eor	r0, sl, r0
   11384:	orrs	r0, r0, r1
   11388:	beq	11440 <__assert_fail@plt+0x280>
   1138c:	adds	sl, sl, #32768	; 0x8000
   11390:	adc	r6, r6, #0
   11394:	b	112fc <__assert_fail@plt+0x13c>
   11398:	mvn	r7, #0
   1139c:	b	11468 <__assert_fail@plt+0x2a8>
   113a0:	mvn	r7, #0
   113a4:	tst	r1, #32
   113a8:	bne	11460 <__assert_fail@plt+0x2a0>
   113ac:	cmp	r8, #0
   113b0:	beq	1142c <__assert_fail@plt+0x26c>
   113b4:	and	ip, r8, #1
   113b8:	cmp	r8, #1
   113bc:	bne	113d0 <__assert_fail@plt+0x210>
   113c0:	mov	r1, #0
   113c4:	cmp	ip, #0
   113c8:	bne	11418 <__assert_fail@plt+0x258>
   113cc:	b	1142c <__assert_fail@plt+0x26c>
   113d0:	sub	r2, r8, ip
   113d4:	mov	r1, #0
   113d8:	mov	r3, r4
   113dc:	lsr	r0, r5, #1
   113e0:	ldrb	r7, [r3, r1]!
   113e4:	add	r0, r0, r5, lsl #15
   113e8:	add	r1, r1, #2
   113ec:	cmp	r2, r1
   113f0:	ldrb	r3, [r3, #1]
   113f4:	add	r0, r0, r7
   113f8:	uxth	r0, r0
   113fc:	lsr	r7, r0, #1
   11400:	orr	r0, r7, r0, lsl #15
   11404:	add	r0, r0, r3
   11408:	uxth	r5, r0
   1140c:	bne	113d8 <__assert_fail@plt+0x218>
   11410:	cmp	ip, #0
   11414:	beq	1142c <__assert_fail@plt+0x26c>
   11418:	ldrb	r0, [r4, r1]
   1141c:	lsr	r1, r5, #1
   11420:	add	r1, r1, r5, lsl #15
   11424:	add	r0, r1, r0
   11428:	uxth	r5, r0
   1142c:	adds	r0, sl, r8
   11430:	mov	r7, #0
   11434:	adcs	r1, r6, #0
   11438:	adcs	r2, r7, #0
   1143c:	beq	11454 <__assert_fail@plt+0x294>
   11440:	bl	110ac <__errno_location@plt>
   11444:	mov	r1, #75	; 0x4b
   11448:	mvn	r7, #0
   1144c:	str	r1, [r0]
   11450:	b	11460 <__assert_fail@plt+0x2a0>
   11454:	ldr	r2, [sp]
   11458:	str	r5, [r9]
   1145c:	strd	r0, [r2]
   11460:	mov	r0, r4
   11464:	bl	12220 <__assert_fail@plt+0x1060>
   11468:	mov	r0, r7
   1146c:	sub	sp, fp, #28
   11470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11474:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11478:	add	fp, sp, #28
   1147c:	sub	sp, sp, #60	; 0x3c
   11480:	mov	r7, r0
   11484:	mov	r0, #32768	; 0x8000
   11488:	mov	r4, r2
   1148c:	mov	r5, r1
   11490:	bl	16680 <__assert_fail@plt+0x54c0>
   11494:	cmp	r0, #0
   11498:	beq	115d0 <__assert_fail@plt+0x410>
   1149c:	mov	sl, r0
   114a0:	mov	r0, #0
   114a4:	str	r4, [sp, #12]
   114a8:	add	r4, sp, #28
   114ac:	add	r6, sp, #32
   114b0:	add	r9, sp, #36	; 0x24
   114b4:	mov	r8, #0
   114b8:	str	r5, [sp, #8]
   114bc:	str	r0, [sp, #20]
   114c0:	mov	r0, #0
   114c4:	str	r0, [sp, #16]
   114c8:	mov	r1, #0
   114cc:	mov	r5, r1
   114d0:	add	r0, sl, r1
   114d4:	rsb	r2, r1, #32768	; 0x8000
   114d8:	mov	r1, #1
   114dc:	mov	r3, r7
   114e0:	bl	11190 <fread_unlocked@plt>
   114e4:	add	r1, r0, r5
   114e8:	cmp	r1, #32768	; 0x8000
   114ec:	beq	11508 <__assert_fail@plt+0x348>
   114f0:	ldr	r2, [r7]
   114f4:	cmp	r0, #0
   114f8:	beq	115d8 <__assert_fail@plt+0x418>
   114fc:	tst	r2, #16
   11500:	beq	114cc <__assert_fail@plt+0x30c>
   11504:	b	115e4 <__assert_fail@plt+0x424>
   11508:	mov	r0, #0
   1150c:	add	r5, sp, #24
   11510:	vdup.32	q8, r0
   11514:	vmov.32	d16[0], r8
   11518:	mov	r1, sl
   1151c:	ldr	r2, [r1, r0]!
   11520:	add	r0, r0, #16
   11524:	cmp	r0, #32768	; 0x8000
   11528:	str	r2, [sp, #24]
   1152c:	ldr	r2, [r1, #4]
   11530:	ldr	r3, [r1, #8]
   11534:	ldr	r1, [r1, #12]
   11538:	vld1.32	{d18[0]}, [r5 :32]
   1153c:	str	r2, [sp, #36]	; 0x24
   11540:	str	r3, [sp, #32]
   11544:	str	r1, [sp, #28]
   11548:	vld1.32	{d19[0]}, [r9 :32]
   1154c:	vld1.32	{d20[0]}, [r6 :32]
   11550:	vmovl.u8	q11, d18
   11554:	vld1.32	{d18[0]}, [r4 :32]
   11558:	vmovl.u16	q11, d22
   1155c:	vmovl.u8	q12, d19
   11560:	vmovl.u8	q10, d20
   11564:	vadd.i32	q8, q8, q11
   11568:	vmovl.u16	q11, d24
   1156c:	vmovl.u8	q9, d18
   11570:	vmovl.u16	q10, d20
   11574:	vadd.i32	q8, q8, q11
   11578:	vmovl.u16	q9, d18
   1157c:	vadd.i32	q8, q8, q10
   11580:	vadd.i32	q8, q8, q9
   11584:	bne	11518 <__assert_fail@plt+0x358>
   11588:	ldr	r3, [sp, #16]
   1158c:	ldr	r2, [sp, #20]
   11590:	movw	r0, #32768	; 0x8000
   11594:	movt	r0, #65535	; 0xffff
   11598:	eor	r0, r2, r0
   1159c:	mvn	r1, r3
   115a0:	orrs	r0, r0, r1
   115a4:	beq	1173c <__assert_fail@plt+0x57c>
   115a8:	vext.8	q9, q8, q8, #8
   115ac:	adds	r2, r2, #32768	; 0x8000
   115b0:	adc	r3, r3, #0
   115b4:	str	r2, [sp, #20]
   115b8:	str	r3, [sp, #16]
   115bc:	vadd.i32	q8, q8, q9
   115c0:	vdup.32	q9, d16[1]
   115c4:	vadd.i32	q8, q8, q9
   115c8:	vmov.32	r8, d16[0]
   115cc:	b	114c8 <__assert_fail@plt+0x308>
   115d0:	mvn	r7, #0
   115d4:	b	11778 <__assert_fail@plt+0x5b8>
   115d8:	mvn	r7, #0
   115dc:	tst	r2, #32
   115e0:	bne	11770 <__assert_fail@plt+0x5b0>
   115e4:	cmp	r1, #0
   115e8:	beq	11720 <__assert_fail@plt+0x560>
   115ec:	mov	r3, #0
   115f0:	cmp	r1, #3
   115f4:	bls	11704 <__assert_fail@plt+0x544>
   115f8:	mov	r3, #0
   115fc:	bic	r7, r1, #3
   11600:	mov	r2, #1
   11604:	vdup.32	q8, r3
   11608:	sub	r6, r7, #4
   1160c:	add	r2, r2, r6, lsr #2
   11610:	cmp	r6, #12
   11614:	and	r4, r2, #3
   11618:	stm	sp, {r4, r7}
   1161c:	vmov.32	d16[0], r8
   11620:	bcc	116ac <__assert_fail@plt+0x4ec>
   11624:	sub	r6, r4, r2
   11628:	mov	r3, #0
   1162c:	sub	r9, fp, #40	; 0x28
   11630:	sub	lr, fp, #36	; 0x24
   11634:	sub	r8, fp, #32
   11638:	mov	r4, sl
   1163c:	add	r2, sp, #44	; 0x2c
   11640:	adds	r6, r6, #4
   11644:	ldr	ip, [r4, r3]!
   11648:	add	r3, r3, #16
   1164c:	str	ip, [sp, #44]	; 0x2c
   11650:	ldr	r7, [r4, #4]
   11654:	ldr	ip, [r4, #8]
   11658:	ldr	r4, [r4, #12]
   1165c:	vld1.32	{d18[0]}, [r2 :32]
   11660:	str	r7, [fp, #-32]	; 0xffffffe0
   11664:	str	ip, [fp, #-36]	; 0xffffffdc
   11668:	str	r4, [fp, #-40]	; 0xffffffd8
   1166c:	vld1.32	{d19[0]}, [r8 :32]
   11670:	vld1.32	{d20[0]}, [lr :32]
   11674:	vmovl.u8	q11, d18
   11678:	vld1.32	{d18[0]}, [r9 :32]
   1167c:	vmovl.u16	q11, d22
   11680:	vmovl.u8	q12, d19
   11684:	vmovl.u8	q10, d20
   11688:	vadd.i32	q8, q8, q11
   1168c:	vmovl.u16	q11, d24
   11690:	vmovl.u8	q9, d18
   11694:	vmovl.u16	q10, d20
   11698:	vadd.i32	q8, q8, q11
   1169c:	vmovl.u16	q9, d18
   116a0:	vadd.i32	q8, q8, q10
   116a4:	vadd.i32	q8, q8, q9
   116a8:	bne	11638 <__assert_fail@plt+0x478>
   116ac:	ldr	r7, [sp]
   116b0:	cmp	r7, #0
   116b4:	beq	116e4 <__assert_fail@plt+0x524>
   116b8:	add	r2, sl, r3
   116bc:	rsb	r3, r7, #0
   116c0:	add	r7, sp, #40	; 0x28
   116c4:	ldr	r6, [r2], #4
   116c8:	adds	r3, r3, #1
   116cc:	str	r6, [sp, #40]	; 0x28
   116d0:	vld1.32	{d18[0]}, [r7 :32]
   116d4:	vmovl.u8	q9, d18
   116d8:	vmovl.u16	q9, d18
   116dc:	vadd.i32	q8, q8, q9
   116e0:	bcc	116c4 <__assert_fail@plt+0x504>
   116e4:	vext.8	q9, q8, q8, #8
   116e8:	ldr	r3, [sp, #4]
   116ec:	vadd.i32	q8, q8, q9
   116f0:	cmp	r1, r3
   116f4:	vdup.32	q9, d16[1]
   116f8:	vadd.i32	q8, q8, q9
   116fc:	vmov.32	r8, d16[0]
   11700:	beq	11720 <__assert_fail@plt+0x560>
   11704:	sub	r0, r0, r3
   11708:	add	r2, sl, r3
   1170c:	add	r0, r0, r5
   11710:	ldrb	r3, [r2], #1
   11714:	subs	r0, r0, #1
   11718:	add	r8, r8, r3
   1171c:	bne	11710 <__assert_fail@plt+0x550>
   11720:	ldr	r0, [sp, #20]
   11724:	mov	r7, #0
   11728:	adds	r0, r0, r1
   1172c:	ldr	r1, [sp, #16]
   11730:	adcs	r1, r1, #0
   11734:	adcs	r2, r7, #0
   11738:	beq	11750 <__assert_fail@plt+0x590>
   1173c:	bl	110ac <__errno_location@plt>
   11740:	mov	r1, #75	; 0x4b
   11744:	mvn	r7, #0
   11748:	str	r1, [r0]
   1174c:	b	11770 <__assert_fail@plt+0x5b0>
   11750:	lsr	r2, r8, #16
   11754:	uxtah	r2, r2, r8
   11758:	lsr	r3, r2, #16
   1175c:	uxtah	r2, r3, r2
   11760:	ldr	r3, [sp, #8]
   11764:	str	r2, [r3]
   11768:	ldr	r2, [sp, #12]
   1176c:	strd	r0, [r2]
   11770:	mov	r0, sl
   11774:	bl	12220 <__assert_fail@plt+0x1060>
   11778:	mov	r0, r7
   1177c:	sub	sp, fp, #28
   11780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11784:	push	{r4, r5, r6, r7, fp, lr}
   11788:	add	fp, sp, #16
   1178c:	sub	sp, sp, #672	; 0x2a0
   11790:	mov	r4, r0
   11794:	ldr	r5, [r2]
   11798:	mov	r2, #1
   1179c:	mov	r0, #0
   117a0:	mov	r1, #1024	; 0x400
   117a4:	mov	r3, #0
   117a8:	str	r2, [sp]
   117ac:	stmib	sp, {r0, r1}
   117b0:	str	r0, [sp, #12]
   117b4:	ldr	r0, [fp, #16]
   117b8:	ldr	r1, [fp, #20]
   117bc:	add	r2, sp, #20
   117c0:	bl	122f0 <__assert_fail@plt+0x1130>
   117c4:	movw	r1, #30420	; 0x76d4
   117c8:	mov	r3, r0
   117cc:	mov	r0, #1
   117d0:	mov	r2, r5
   117d4:	movt	r1, #1
   117d8:	bl	110e8 <__printf_chk@plt>
   117dc:	ldr	r0, [fp, #12]
   117e0:	cmp	r0, #0
   117e4:	beq	117fc <__assert_fail@plt+0x63c>
   117e8:	movw	r1, #32828	; 0x803c
   117ec:	mov	r0, #1
   117f0:	mov	r2, r4
   117f4:	movt	r1, #1
   117f8:	bl	110e8 <__printf_chk@plt>
   117fc:	movw	r0, #37228	; 0x916c
   11800:	ldr	r1, [fp, #8]
   11804:	movt	r0, #2
   11808:	ldr	r0, [r0]
   1180c:	ldr	r2, [r0, #20]
   11810:	ldr	r3, [r0, #24]
   11814:	cmp	r2, r3
   11818:	addcc	r3, r2, #1
   1181c:	strcc	r3, [r0, #20]
   11820:	strbcc	r1, [r2]
   11824:	subcc	sp, fp, #16
   11828:	popcc	{r4, r5, r6, r7, fp, pc}
   1182c:	bl	11130 <__overflow@plt>
   11830:	sub	sp, fp, #16
   11834:	pop	{r4, r5, r6, r7, fp, pc}
   11838:	push	{r4, r5, r6, r7, fp, lr}
   1183c:	add	fp, sp, #16
   11840:	sub	sp, sp, #672	; 0x2a0
   11844:	mov	r4, r0
   11848:	ldr	r5, [r2]
   1184c:	mov	r2, #1
   11850:	mov	r0, #0
   11854:	mov	r1, #512	; 0x200
   11858:	mov	r3, #0
   1185c:	str	r2, [sp]
   11860:	stmib	sp, {r0, r1}
   11864:	str	r0, [sp, #12]
   11868:	ldr	r0, [fp, #16]
   1186c:	ldr	r1, [fp, #20]
   11870:	add	r2, sp, #20
   11874:	bl	122f0 <__assert_fail@plt+0x1130>
   11878:	movw	r1, #30429	; 0x76dd
   1187c:	mov	r3, r0
   11880:	mov	r0, #1
   11884:	mov	r2, r5
   11888:	movt	r1, #1
   1188c:	bl	110e8 <__printf_chk@plt>
   11890:	ldr	r0, [fp, #12]
   11894:	cmp	r0, #0
   11898:	beq	118b0 <__assert_fail@plt+0x6f0>
   1189c:	movw	r1, #32828	; 0x803c
   118a0:	mov	r0, #1
   118a4:	mov	r2, r4
   118a8:	movt	r1, #1
   118ac:	bl	110e8 <__printf_chk@plt>
   118b0:	movw	r0, #37228	; 0x916c
   118b4:	ldr	r1, [fp, #8]
   118b8:	movt	r0, #2
   118bc:	ldr	r0, [r0]
   118c0:	ldr	r2, [r0, #20]
   118c4:	ldr	r3, [r0, #24]
   118c8:	cmp	r2, r3
   118cc:	addcc	r3, r2, #1
   118d0:	strcc	r3, [r0, #20]
   118d4:	strbcc	r1, [r2]
   118d8:	subcc	sp, fp, #16
   118dc:	popcc	{r4, r5, r6, r7, fp, pc}
   118e0:	bl	11130 <__overflow@plt>
   118e4:	sub	sp, fp, #16
   118e8:	pop	{r4, r5, r6, r7, fp, pc}
   118ec:	push	{fp, lr}
   118f0:	mov	fp, sp
   118f4:	sub	sp, sp, #56	; 0x38
   118f8:	mov	r4, r0
   118fc:	cmp	r0, #0
   11900:	bne	11b34 <__assert_fail@plt+0x974>
   11904:	movw	r1, #30474	; 0x770a
   11908:	mov	r0, #0
   1190c:	mov	r2, #5
   11910:	movt	r1, #1
   11914:	bl	10fb0 <dcgettext@plt>
   11918:	mov	r1, r0
   1191c:	movw	r0, #37248	; 0x9180
   11920:	movt	r0, #2
   11924:	ldr	r2, [r0]
   11928:	mov	r0, #1
   1192c:	bl	110e8 <__printf_chk@plt>
   11930:	movw	r1, #30507	; 0x772b
   11934:	mov	r0, #0
   11938:	mov	r2, #5
   1193c:	movt	r1, #1
   11940:	bl	10fb0 <dcgettext@plt>
   11944:	movw	r2, #30546	; 0x7752
   11948:	mov	r1, r0
   1194c:	mov	r0, #1
   11950:	mov	r3, #16
   11954:	movt	r2, #1
   11958:	bl	110e8 <__printf_chk@plt>
   1195c:	movw	r1, #30877	; 0x789d
   11960:	mov	r0, #0
   11964:	mov	r2, #5
   11968:	movt	r1, #1
   1196c:	bl	10fb0 <dcgettext@plt>
   11970:	movw	r7, #37228	; 0x916c
   11974:	movt	r7, #2
   11978:	ldr	r1, [r7]
   1197c:	bl	10f2c <fputs_unlocked@plt>
   11980:	movw	r1, #30550	; 0x7756
   11984:	mov	r0, #0
   11988:	mov	r2, #5
   1198c:	movt	r1, #1
   11990:	bl	10fb0 <dcgettext@plt>
   11994:	ldr	r1, [r7]
   11998:	bl	10f2c <fputs_unlocked@plt>
   1199c:	movw	r1, #30688	; 0x77e0
   119a0:	mov	r0, #0
   119a4:	mov	r2, #5
   119a8:	movt	r1, #1
   119ac:	bl	10fb0 <dcgettext@plt>
   119b0:	ldr	r1, [r7]
   119b4:	bl	10f2c <fputs_unlocked@plt>
   119b8:	movw	r1, #30733	; 0x780d
   119bc:	mov	r0, #0
   119c0:	mov	r2, #5
   119c4:	movt	r1, #1
   119c8:	bl	10fb0 <dcgettext@plt>
   119cc:	ldr	r1, [r7]
   119d0:	bl	10f2c <fputs_unlocked@plt>
   119d4:	movw	r0, #31336	; 0x7a68
   119d8:	mov	r2, #48	; 0x30
   119dc:	mov	r6, sp
   119e0:	movw	r5, #31024	; 0x7930
   119e4:	movt	r0, #1
   119e8:	movt	r5, #1
   119ec:	add	r1, r0, #32
   119f0:	add	r3, r0, #16
   119f4:	vld1.64	{d18-d19}, [r0], r2
   119f8:	vld1.64	{d16-d17}, [r1]
   119fc:	vld1.64	{d20-d21}, [r3]
   11a00:	vldr	d22, [r0]
   11a04:	add	r1, r6, #32
   11a08:	add	r0, r6, #16
   11a0c:	vst1.64	{d16-d17}, [r1]
   11a10:	movw	r1, #30933	; 0x78d5
   11a14:	vst1.64	{d20-d21}, [r0]
   11a18:	mov	r0, r6
   11a1c:	movt	r1, #1
   11a20:	vst1.64	{d18-d19}, [r0], r2
   11a24:	vstr	d22, [r0]
   11a28:	mov	r0, r5
   11a2c:	bl	10f44 <strcmp@plt>
   11a30:	cmp	r0, #0
   11a34:	ldrne	r1, [r6, #8]!
   11a38:	cmpne	r1, #0
   11a3c:	bne	11a28 <__assert_fail@plt+0x868>
   11a40:	movw	r1, #31028	; 0x7934
   11a44:	ldr	r6, [r6, #4]
   11a48:	mov	r0, #0
   11a4c:	mov	r2, #5
   11a50:	movt	r1, #1
   11a54:	bl	10fb0 <dcgettext@plt>
   11a58:	movw	r2, #30814	; 0x785e
   11a5c:	movw	r3, #31051	; 0x794b
   11a60:	mov	r1, r0
   11a64:	mov	r0, #1
   11a68:	movt	r2, #1
   11a6c:	movt	r3, #1
   11a70:	bl	110e8 <__printf_chk@plt>
   11a74:	cmp	r6, #0
   11a78:	mov	r0, #5
   11a7c:	mov	r1, #0
   11a80:	moveq	r6, r5
   11a84:	bl	1113c <setlocale@plt>
   11a88:	cmp	r0, #0
   11a8c:	beq	11ac4 <__assert_fail@plt+0x904>
   11a90:	movw	r1, #31091	; 0x7973
   11a94:	mov	r2, #3
   11a98:	movt	r1, #1
   11a9c:	bl	1119c <strncmp@plt>
   11aa0:	cmp	r0, #0
   11aa4:	beq	11ac4 <__assert_fail@plt+0x904>
   11aa8:	movw	r1, #31095	; 0x7977
   11aac:	mov	r0, #0
   11ab0:	mov	r2, #5
   11ab4:	movt	r1, #1
   11ab8:	bl	10fb0 <dcgettext@plt>
   11abc:	ldr	r1, [r7]
   11ac0:	bl	10f2c <fputs_unlocked@plt>
   11ac4:	movw	r1, #31166	; 0x79be
   11ac8:	mov	r0, #0
   11acc:	mov	r2, #5
   11ad0:	movt	r1, #1
   11ad4:	bl	10fb0 <dcgettext@plt>
   11ad8:	movw	r2, #31051	; 0x794b
   11adc:	mov	r1, r0
   11ae0:	mov	r0, #1
   11ae4:	mov	r3, r5
   11ae8:	movt	r2, #1
   11aec:	bl	110e8 <__printf_chk@plt>
   11af0:	movw	r1, #31193	; 0x79d9
   11af4:	mov	r0, #0
   11af8:	mov	r2, #5
   11afc:	movt	r1, #1
   11b00:	bl	10fb0 <dcgettext@plt>
   11b04:	mov	r1, r0
   11b08:	movw	r0, #30961	; 0x78f1
   11b0c:	movw	r3, #31243	; 0x7a0b
   11b10:	cmp	r6, r5
   11b14:	mov	r2, r6
   11b18:	movt	r0, #1
   11b1c:	movt	r3, #1
   11b20:	moveq	r3, r0
   11b24:	mov	r0, #1
   11b28:	bl	110e8 <__printf_chk@plt>
   11b2c:	mov	r0, r4
   11b30:	bl	1107c <exit@plt>
   11b34:	movw	r0, #37216	; 0x9160
   11b38:	movw	r1, #30435	; 0x76e3
   11b3c:	mov	r2, #5
   11b40:	movt	r0, #2
   11b44:	movt	r1, #1
   11b48:	ldr	r5, [r0]
   11b4c:	mov	r0, #0
   11b50:	bl	10fb0 <dcgettext@plt>
   11b54:	mov	r2, r0
   11b58:	movw	r0, #37248	; 0x9180
   11b5c:	mov	r1, #1
   11b60:	movt	r0, #2
   11b64:	ldr	r3, [r0]
   11b68:	mov	r0, r5
   11b6c:	bl	11100 <__fprintf_chk@plt>
   11b70:	mov	r0, r4
   11b74:	bl	1107c <exit@plt>
   11b78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b7c:	add	fp, sp, #28
   11b80:	sub	sp, sp, #52	; 0x34
   11b84:	str	r0, [sp, #20]
   11b88:	ldr	r0, [r1]
   11b8c:	mov	r7, r1
   11b90:	bl	12fa8 <__assert_fail@plt+0x1de8>
   11b94:	movw	r1, #31243	; 0x7a0b
   11b98:	mov	r0, #6
   11b9c:	movt	r1, #1
   11ba0:	bl	1113c <setlocale@plt>
   11ba4:	movw	r4, #30818	; 0x7862
   11ba8:	movw	r1, #30787	; 0x7843
   11bac:	movt	r4, #1
   11bb0:	movt	r1, #1
   11bb4:	mov	r0, r4
   11bb8:	bl	11184 <bindtextdomain@plt>
   11bbc:	mov	r0, r4
   11bc0:	bl	10fc8 <textdomain@plt>
   11bc4:	movw	r0, #8016	; 0x1f50
   11bc8:	movt	r0, #1
   11bcc:	bl	176ac <__assert_fail@plt+0x64ec>
   11bd0:	movw	r8, #37228	; 0x916c
   11bd4:	mov	r1, #0
   11bd8:	mov	r2, #1
   11bdc:	mov	r3, #0
   11be0:	mov	r5, #0
   11be4:	movt	r8, #2
   11be8:	ldr	r0, [r8]
   11bec:	bl	110d0 <setvbuf@plt>
   11bf0:	sub	r0, fp, #34	; 0x22
   11bf4:	movw	r6, #30811	; 0x785b
   11bf8:	movw	r4, #31264	; 0x7a20
   11bfc:	add	r0, r0, #3
   11c00:	movt	r6, #1
   11c04:	movt	r4, #1
   11c08:	and	r1, r0, #3
   11c0c:	sub	r0, r0, r1
   11c10:	str	r0, [sp, #28]
   11c14:	b	11c24 <__assert_fail@plt+0xa64>
   11c18:	movw	r0, #37236	; 0x9174
   11c1c:	movt	r0, #2
   11c20:	strb	r1, [r0]
   11c24:	ldr	r0, [sp, #20]
   11c28:	mov	r1, r7
   11c2c:	mov	r2, r6
   11c30:	mov	r3, r4
   11c34:	str	r5, [sp]
   11c38:	bl	11064 <getopt_long@plt>
   11c3c:	cmp	r0, #113	; 0x71
   11c40:	ble	11c60 <__assert_fail@plt+0xaa0>
   11c44:	cmp	r0, #114	; 0x72
   11c48:	mov	r1, #0
   11c4c:	beq	11c18 <__assert_fail@plt+0xa58>
   11c50:	cmp	r0, #115	; 0x73
   11c54:	bne	11efc <__assert_fail@plt+0xd3c>
   11c58:	mov	r1, #1
   11c5c:	b	11c18 <__assert_fail@plt+0xa58>
   11c60:	cmn	r0, #1
   11c64:	bne	11e98 <__assert_fail@plt+0xcd8>
   11c68:	movw	r0, #37208	; 0x9158
   11c6c:	ldr	r1, [sp, #20]
   11c70:	movt	r0, #2
   11c74:	ldr	r0, [r0]
   11c78:	add	r6, r7, r1, lsl #2
   11c7c:	cmp	r0, r1
   11c80:	add	r5, r7, r0, lsl #2
   11c84:	mov	r0, #1
   11c88:	movweq	r1, #31622	; 0x7b86
   11c8c:	str	r0, [sp, #24]
   11c90:	movteq	r1, #1
   11c94:	streq	r1, [r6], #4
   11c98:	cmp	r5, r6
   11c9c:	bcs	11e58 <__assert_fail@plt+0xc98>
   11ca0:	mov	r0, #1
   11ca4:	str	r0, [sp, #24]
   11ca8:	b	11d10 <__assert_fail@plt+0xb50>
   11cac:	movw	r1, #37208	; 0x9158
   11cb0:	ldr	r4, [sp, #20]
   11cb4:	movw	r0, #37236	; 0x9174
   11cb8:	ldr	r2, [sp, #32]
   11cbc:	ldr	r3, [sp, #36]	; 0x24
   11cc0:	movt	r1, #2
   11cc4:	movt	r0, #2
   11cc8:	ldr	r1, [r1]
   11ccc:	ldrb	r0, [r0]
   11cd0:	subs	r1, r1, r4
   11cd4:	mov	r4, #10
   11cd8:	movwne	r1, #1
   11cdc:	str	r4, [sp]
   11ce0:	stmib	sp, {r1, r2, r3}
   11ce4:	movw	r1, #31328	; 0x7a60
   11ce8:	ldr	r2, [sp, #28]
   11cec:	mov	r3, #0
   11cf0:	movt	r1, #1
   11cf4:	ldr	r4, [r1, r0, lsl #2]
   11cf8:	mov	r0, r7
   11cfc:	mov	r1, #0
   11d00:	blx	r4
   11d04:	add	r5, r5, #4
   11d08:	cmp	r5, r6
   11d0c:	bcs	11e58 <__assert_fail@plt+0xc98>
   11d10:	ldr	r7, [r5]
   11d14:	movw	r1, #31622	; 0x7b86
   11d18:	movt	r1, #1
   11d1c:	mov	r0, r7
   11d20:	bl	10f44 <strcmp@plt>
   11d24:	mov	r9, r0
   11d28:	cmp	r0, #0
   11d2c:	beq	11d7c <__assert_fail@plt+0xbbc>
   11d30:	movw	r1, #31425	; 0x7ac1
   11d34:	mov	r0, r7
   11d38:	movt	r1, #1
   11d3c:	bl	12170 <__assert_fail@plt+0xfb0>
   11d40:	mov	sl, r0
   11d44:	cmp	r0, #0
   11d48:	bne	11d98 <__assert_fail@plt+0xbd8>
   11d4c:	bl	110ac <__errno_location@plt>
   11d50:	ldr	r4, [r0]
   11d54:	mov	r0, #0
   11d58:	mov	r1, #3
   11d5c:	mov	r2, r7
   11d60:	str	r0, [sp, #24]
   11d64:	mov	r0, #0
   11d68:	bl	14950 <__assert_fail@plt+0x3790>
   11d6c:	mov	r3, r0
   11d70:	mov	r0, #0
   11d74:	mov	r1, r4
   11d78:	b	11e48 <__assert_fail@plt+0xc88>
   11d7c:	movw	r0, #37237	; 0x9175
   11d80:	mov	r1, #1
   11d84:	movt	r0, #2
   11d88:	strb	r1, [r0]
   11d8c:	movw	r0, #37224	; 0x9168
   11d90:	movt	r0, #2
   11d94:	ldr	sl, [r0]
   11d98:	mov	r0, sl
   11d9c:	mov	r1, #2
   11da0:	bl	1203c <__assert_fail@plt+0xe7c>
   11da4:	movw	r0, #37236	; 0x9174
   11da8:	movw	r1, #31392	; 0x7aa0
   11dac:	add	r2, sp, #32
   11db0:	movt	r0, #2
   11db4:	movt	r1, #1
   11db8:	ldrb	r0, [r0]
   11dbc:	ldr	r3, [r1, r0, lsl #2]
   11dc0:	ldr	r1, [sp, #28]
   11dc4:	mov	r0, sl
   11dc8:	blx	r3
   11dcc:	cmp	r0, #0
   11dd0:	beq	11de0 <__assert_fail@plt+0xc20>
   11dd4:	bl	110ac <__errno_location@plt>
   11dd8:	ldr	r8, [r0]
   11ddc:	b	11de4 <__assert_fail@plt+0xc24>
   11de0:	mov	r8, #0
   11de4:	mov	r0, sl
   11de8:	cmp	r9, #0
   11dec:	beq	11e18 <__assert_fail@plt+0xc58>
   11df0:	bl	12078 <__assert_fail@plt+0xeb8>
   11df4:	cmp	r8, #0
   11df8:	bne	11e0c <__assert_fail@plt+0xc4c>
   11dfc:	cmp	r0, #0
   11e00:	beq	11e0c <__assert_fail@plt+0xc4c>
   11e04:	bl	110ac <__errno_location@plt>
   11e08:	ldr	r8, [r0]
   11e0c:	cmp	r8, #0
   11e10:	bne	11e24 <__assert_fail@plt+0xc64>
   11e14:	b	11cac <__assert_fail@plt+0xaec>
   11e18:	bl	1116c <clearerr_unlocked@plt>
   11e1c:	cmp	r8, #0
   11e20:	beq	11cac <__assert_fail@plt+0xaec>
   11e24:	mov	r0, #0
   11e28:	mov	r1, #3
   11e2c:	mov	r2, r7
   11e30:	str	r0, [sp, #24]
   11e34:	mov	r0, #0
   11e38:	bl	14950 <__assert_fail@plt+0x3790>
   11e3c:	mov	r3, r0
   11e40:	mov	r0, #0
   11e44:	mov	r1, r8
   11e48:	movw	r2, #32829	; 0x803d
   11e4c:	movt	r2, #1
   11e50:	bl	1101c <error@plt>
   11e54:	b	11d04 <__assert_fail@plt+0xb44>
   11e58:	movw	r0, #37237	; 0x9175
   11e5c:	movt	r0, #2
   11e60:	ldrb	r0, [r0]
   11e64:	cmp	r0, #0
   11e68:	beq	11e84 <__assert_fail@plt+0xcc4>
   11e6c:	movw	r0, #37224	; 0x9168
   11e70:	movt	r0, #2
   11e74:	ldr	r0, [r0]
   11e78:	bl	12078 <__assert_fail@plt+0xeb8>
   11e7c:	cmn	r0, #1
   11e80:	beq	11f04 <__assert_fail@plt+0xd44>
   11e84:	ldr	r1, [sp, #24]
   11e88:	mov	r0, #1
   11e8c:	bic	r0, r0, r1
   11e90:	sub	sp, fp, #28
   11e94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e98:	cmn	r0, #3
   11e9c:	bne	11eec <__assert_fail@plt+0xd2c>
   11ea0:	movw	r0, #37120	; 0x9100
   11ea4:	movw	r2, #30846	; 0x787e
   11ea8:	mov	r1, #0
   11eac:	movw	r7, #30828	; 0x786c
   11eb0:	movt	r0, #2
   11eb4:	movt	r2, #1
   11eb8:	str	r1, [sp, #8]
   11ebc:	movw	r1, #31024	; 0x7930
   11ec0:	movt	r7, #1
   11ec4:	movt	r1, #1
   11ec8:	ldr	r3, [r0]
   11ecc:	ldr	r0, [r8]
   11ed0:	str	r2, [sp, #4]
   11ed4:	movw	r2, #30814	; 0x785e
   11ed8:	str	r7, [sp]
   11edc:	movt	r2, #1
   11ee0:	bl	151d8 <__assert_fail@plt+0x4018>
   11ee4:	mov	r0, #0
   11ee8:	bl	1107c <exit@plt>
   11eec:	cmn	r0, #2
   11ef0:	bne	11efc <__assert_fail@plt+0xd3c>
   11ef4:	mov	r0, #0
   11ef8:	bl	118ec <__assert_fail@plt+0x72c>
   11efc:	mov	r0, #1
   11f00:	bl	118ec <__assert_fail@plt+0x72c>
   11f04:	bl	110ac <__errno_location@plt>
   11f08:	movw	r1, #30862	; 0x788e
   11f0c:	ldr	r4, [r0]
   11f10:	mov	r0, #0
   11f14:	mov	r2, #5
   11f18:	movt	r1, #1
   11f1c:	bl	10fb0 <dcgettext@plt>
   11f20:	mov	r2, r0
   11f24:	mov	r0, #1
   11f28:	mov	r1, r4
   11f2c:	bl	1101c <error@plt>
   11f30:	movw	r1, #37240	; 0x9178
   11f34:	movt	r1, #2
   11f38:	str	r0, [r1]
   11f3c:	bx	lr
   11f40:	movw	r1, #37244	; 0x917c
   11f44:	movt	r1, #2
   11f48:	strb	r0, [r1]
   11f4c:	bx	lr
   11f50:	push	{r4, r5, r6, sl, fp, lr}
   11f54:	add	fp, sp, #16
   11f58:	sub	sp, sp, #8
   11f5c:	movw	r0, #37228	; 0x916c
   11f60:	movt	r0, #2
   11f64:	ldr	r0, [r0]
   11f68:	bl	16c8c <__assert_fail@plt+0x5acc>
   11f6c:	cmp	r0, #0
   11f70:	beq	11f98 <__assert_fail@plt+0xdd8>
   11f74:	movw	r0, #37244	; 0x917c
   11f78:	movt	r0, #2
   11f7c:	ldrb	r0, [r0]
   11f80:	cmp	r0, #0
   11f84:	beq	11fb8 <__assert_fail@plt+0xdf8>
   11f88:	bl	110ac <__errno_location@plt>
   11f8c:	ldr	r0, [r0]
   11f90:	cmp	r0, #32
   11f94:	bne	11fb8 <__assert_fail@plt+0xdf8>
   11f98:	movw	r0, #37216	; 0x9160
   11f9c:	movt	r0, #2
   11fa0:	ldr	r0, [r0]
   11fa4:	bl	16c8c <__assert_fail@plt+0x5acc>
   11fa8:	cmp	r0, #0
   11fac:	subeq	sp, fp, #16
   11fb0:	popeq	{r4, r5, r6, sl, fp, pc}
   11fb4:	b	12028 <__assert_fail@plt+0xe68>
   11fb8:	movw	r1, #31415	; 0x7ab7
   11fbc:	mov	r0, #0
   11fc0:	mov	r2, #5
   11fc4:	movt	r1, #1
   11fc8:	bl	10fb0 <dcgettext@plt>
   11fcc:	mov	r4, r0
   11fd0:	movw	r0, #37240	; 0x9178
   11fd4:	movt	r0, #2
   11fd8:	ldr	r6, [r0]
   11fdc:	bl	110ac <__errno_location@plt>
   11fe0:	ldr	r5, [r0]
   11fe4:	cmp	r6, #0
   11fe8:	bne	12004 <__assert_fail@plt+0xe44>
   11fec:	movw	r2, #32829	; 0x803d
   11ff0:	mov	r0, #0
   11ff4:	mov	r1, r5
   11ff8:	mov	r3, r4
   11ffc:	movt	r2, #1
   12000:	b	12024 <__assert_fail@plt+0xe64>
   12004:	mov	r0, r6
   12008:	bl	14874 <__assert_fail@plt+0x36b4>
   1200c:	movw	r2, #31427	; 0x7ac3
   12010:	mov	r3, r0
   12014:	str	r4, [sp]
   12018:	mov	r0, #0
   1201c:	mov	r1, r5
   12020:	movt	r2, #1
   12024:	bl	1101c <error@plt>
   12028:	movw	r0, #37124	; 0x9104
   1202c:	movt	r0, #2
   12030:	ldr	r0, [r0]
   12034:	bl	10f80 <_exit@plt>
   12038:	b	10f50 <posix_fadvise64@plt>
   1203c:	cmp	r0, #0
   12040:	bxeq	lr
   12044:	push	{r4, sl, fp, lr}
   12048:	add	fp, sp, #8
   1204c:	sub	sp, sp, #16
   12050:	mov	r4, r1
   12054:	bl	110f4 <fileno@plt>
   12058:	mov	r1, #0
   1205c:	mov	r2, #0
   12060:	mov	r3, #0
   12064:	str	r1, [sp]
   12068:	stmib	sp, {r1, r4}
   1206c:	bl	10f50 <posix_fadvise64@plt>
   12070:	sub	sp, fp, #8
   12074:	pop	{r4, sl, fp, pc}
   12078:	push	{r4, r5, r6, sl, fp, lr}
   1207c:	add	fp, sp, #16
   12080:	sub	sp, sp, #8
   12084:	mov	r4, r0
   12088:	bl	110f4 <fileno@plt>
   1208c:	cmn	r0, #1
   12090:	ble	12104 <__assert_fail@plt+0xf44>
   12094:	mov	r0, r4
   12098:	bl	1104c <__freading@plt>
   1209c:	cmp	r0, #0
   120a0:	beq	120cc <__assert_fail@plt+0xf0c>
   120a4:	mov	r0, r4
   120a8:	bl	110f4 <fileno@plt>
   120ac:	mov	r1, #1
   120b0:	mov	r2, #0
   120b4:	mov	r3, #0
   120b8:	str	r1, [sp]
   120bc:	bl	10fec <lseek64@plt>
   120c0:	and	r0, r0, r1
   120c4:	cmn	r0, #1
   120c8:	beq	12104 <__assert_fail@plt+0xf44>
   120cc:	mov	r0, r4
   120d0:	bl	12114 <__assert_fail@plt+0xf54>
   120d4:	cmp	r0, #0
   120d8:	beq	12104 <__assert_fail@plt+0xf44>
   120dc:	bl	110ac <__errno_location@plt>
   120e0:	ldr	r6, [r0]
   120e4:	mov	r5, r0
   120e8:	mov	r0, r4
   120ec:	bl	1110c <fclose@plt>
   120f0:	cmp	r6, #0
   120f4:	strne	r6, [r5]
   120f8:	mvnne	r0, #0
   120fc:	sub	sp, fp, #16
   12100:	pop	{r4, r5, r6, sl, fp, pc}
   12104:	mov	r0, r4
   12108:	sub	sp, fp, #16
   1210c:	pop	{r4, r5, r6, sl, fp, lr}
   12110:	b	1110c <fclose@plt>
   12114:	push	{r4, sl, fp, lr}
   12118:	add	fp, sp, #8
   1211c:	sub	sp, sp, #8
   12120:	mov	r4, r0
   12124:	cmp	r0, #0
   12128:	beq	12160 <__assert_fail@plt+0xfa0>
   1212c:	mov	r0, r4
   12130:	bl	1104c <__freading@plt>
   12134:	cmp	r0, #0
   12138:	beq	12160 <__assert_fail@plt+0xfa0>
   1213c:	ldrb	r0, [r4, #1]
   12140:	tst	r0, #1
   12144:	beq	12160 <__assert_fail@plt+0xfa0>
   12148:	mov	r0, #1
   1214c:	mov	r2, #0
   12150:	mov	r3, #0
   12154:	str	r0, [sp]
   12158:	mov	r0, r4
   1215c:	bl	12248 <__assert_fail@plt+0x1088>
   12160:	mov	r0, r4
   12164:	sub	sp, fp, #8
   12168:	pop	{r4, sl, fp, lr}
   1216c:	b	10f5c <fflush@plt>
   12170:	push	{r4, r5, r6, r7, fp, lr}
   12174:	add	fp, sp, #16
   12178:	mov	r5, r1
   1217c:	bl	11178 <fopen64@plt>
   12180:	mov	r4, #0
   12184:	cmp	r0, #0
   12188:	beq	121f0 <__assert_fail@plt+0x1030>
   1218c:	mov	r6, r0
   12190:	bl	110f4 <fileno@plt>
   12194:	cmp	r0, #2
   12198:	bhi	121f8 <__assert_fail@plt+0x1038>
   1219c:	bl	14d48 <__assert_fail@plt+0x3b88>
   121a0:	cmn	r0, #1
   121a4:	ble	12200 <__assert_fail@plt+0x1040>
   121a8:	mov	r7, r0
   121ac:	mov	r0, r6
   121b0:	bl	12078 <__assert_fail@plt+0xeb8>
   121b4:	cmp	r0, #0
   121b8:	bne	121d4 <__assert_fail@plt+0x1014>
   121bc:	mov	r0, r7
   121c0:	mov	r1, r5
   121c4:	bl	10f14 <fdopen@plt>
   121c8:	mov	r4, r0
   121cc:	cmp	r0, #0
   121d0:	bne	121f0 <__assert_fail@plt+0x1030>
   121d4:	bl	110ac <__errno_location@plt>
   121d8:	ldr	r5, [r0]
   121dc:	mov	r4, r0
   121e0:	mov	r0, r7
   121e4:	bl	111b4 <close@plt>
   121e8:	str	r5, [r4]
   121ec:	mov	r4, #0
   121f0:	mov	r0, r4
   121f4:	pop	{r4, r5, r6, r7, fp, pc}
   121f8:	mov	r0, r6
   121fc:	pop	{r4, r5, r6, r7, fp, pc}
   12200:	bl	110ac <__errno_location@plt>
   12204:	ldr	r7, [r0]
   12208:	mov	r5, r0
   1220c:	mov	r0, r6
   12210:	bl	12078 <__assert_fail@plt+0xeb8>
   12214:	mov	r0, r4
   12218:	str	r7, [r5]
   1221c:	pop	{r4, r5, r6, r7, fp, pc}
   12220:	push	{r4, r5, r6, sl, fp, lr}
   12224:	add	fp, sp, #16
   12228:	mov	r4, r0
   1222c:	bl	110ac <__errno_location@plt>
   12230:	ldr	r6, [r0]
   12234:	mov	r5, r0
   12238:	mov	r0, r4
   1223c:	bl	10f74 <free@plt>
   12240:	str	r6, [r5]
   12244:	pop	{r4, r5, r6, sl, fp, pc}
   12248:	push	{r4, r5, r6, r7, fp, lr}
   1224c:	add	fp, sp, #16
   12250:	sub	sp, sp, #8
   12254:	mov	r4, r0
   12258:	ldr	r0, [r0, #4]
   1225c:	mov	r5, r3
   12260:	mov	r6, r2
   12264:	ldr	r1, [r4, #8]
   12268:	cmp	r1, r0
   1226c:	bne	12288 <__assert_fail@plt+0x10c8>
   12270:	ldrd	r0, [r4, #16]
   12274:	cmp	r1, r0
   12278:	bne	12288 <__assert_fail@plt+0x10c8>
   1227c:	ldr	r0, [r4, #36]	; 0x24
   12280:	cmp	r0, #0
   12284:	beq	122a0 <__assert_fail@plt+0x10e0>
   12288:	mov	r0, r4
   1228c:	mov	r2, r6
   12290:	mov	r3, r5
   12294:	sub	sp, fp, #16
   12298:	pop	{r4, r5, r6, r7, fp, lr}
   1229c:	b	11118 <fseeko64@plt>
   122a0:	ldr	r7, [fp, #8]
   122a4:	mov	r0, r4
   122a8:	bl	110f4 <fileno@plt>
   122ac:	mov	r2, r6
   122b0:	mov	r3, r5
   122b4:	str	r7, [sp]
   122b8:	bl	10fec <lseek64@plt>
   122bc:	and	r2, r0, r1
   122c0:	cmn	r2, #1
   122c4:	beq	122e4 <__assert_fail@plt+0x1124>
   122c8:	strd	r0, [r4, #80]	; 0x50
   122cc:	ldr	r0, [r4]
   122d0:	bic	r0, r0, #16
   122d4:	str	r0, [r4]
   122d8:	mov	r0, #0
   122dc:	sub	sp, fp, #16
   122e0:	pop	{r4, r5, r6, r7, fp, pc}
   122e4:	mvn	r0, #0
   122e8:	sub	sp, fp, #16
   122ec:	pop	{r4, r5, r6, r7, fp, pc}
   122f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122f4:	add	fp, sp, #28
   122f8:	sub	sp, sp, #4
   122fc:	vpush	{d8-d9}
   12300:	sub	sp, sp, #104	; 0x68
   12304:	mov	r7, r3
   12308:	mov	r5, r2
   1230c:	mov	r8, r1
   12310:	mov	sl, r0
   12314:	bl	11160 <localeconv@plt>
   12318:	ldr	r6, [r0]
   1231c:	mov	r4, r0
   12320:	mov	r0, r6
   12324:	bl	11094 <strlen@plt>
   12328:	sub	r1, r0, #1
   1232c:	movw	r2, #31434	; 0x7aca
   12330:	cmp	r1, #16
   12334:	movt	r2, #1
   12338:	movcs	r0, #1
   1233c:	movcc	r2, r6
   12340:	ldr	r6, [r4, #4]
   12344:	str	r0, [sp, #48]	; 0x30
   12348:	ldr	r0, [r4, #8]
   1234c:	str	r2, [sp, #16]
   12350:	str	r0, [sp, #24]
   12354:	mov	r0, r6
   12358:	bl	11094 <strlen@plt>
   1235c:	cmp	r0, #17
   12360:	movw	r0, #647	; 0x287
   12364:	movw	r1, #31243	; 0x7a0b
   12368:	str	r5, [sp, #36]	; 0x24
   1236c:	str	r7, [sp, #40]	; 0x28
   12370:	ldr	r4, [fp, #20]
   12374:	add	r0, r5, r0
   12378:	movt	r1, #1
   1237c:	movcc	r1, r6
   12380:	ldr	r5, [fp, #16]
   12384:	ldr	r6, [fp, #8]
   12388:	str	r0, [sp, #32]
   1238c:	ands	r0, r7, #32
   12390:	str	r1, [sp, #20]
   12394:	str	r0, [sp, #28]
   12398:	mov	r0, #1000	; 0x3e8
   1239c:	movwne	r0, #1024	; 0x400
   123a0:	str	r0, [sp, #44]	; 0x2c
   123a4:	and	r0, r7, #3
   123a8:	ldr	r7, [fp, #12]
   123ac:	str	r0, [sp, #52]	; 0x34
   123b0:	subs	r0, r6, r5
   123b4:	sbcs	r0, r7, r4
   123b8:	bcs	124a8 <__assert_fail@plt+0x12e8>
   123bc:	orrs	r0, r6, r7
   123c0:	beq	125fc <__assert_fail@plt+0x143c>
   123c4:	ldr	r9, [fp, #16]
   123c8:	ldr	r5, [fp, #20]
   123cc:	mov	r2, r6
   123d0:	mov	r3, r7
   123d4:	mov	r0, r9
   123d8:	mov	r1, r5
   123dc:	bl	17494 <__assert_fail@plt+0x62d4>
   123e0:	mov	r4, r0
   123e4:	mov	r3, r1
   123e8:	umull	r0, r1, r0, r6
   123ec:	mla	r1, r4, r7, r1
   123f0:	mla	r1, r3, r6, r1
   123f4:	subs	r0, r9, r0
   123f8:	sbc	r1, r5, r1
   123fc:	orrs	r0, r0, r1
   12400:	bne	125fc <__assert_fail@plt+0x143c>
   12404:	mov	r0, sl
   12408:	mov	r1, r8
   1240c:	mov	r2, r4
   12410:	mov	r6, r8
   12414:	mov	r8, r3
   12418:	bl	17494 <__assert_fail@plt+0x62d4>
   1241c:	mov	r5, r0
   12420:	mov	r9, r1
   12424:	umull	r0, r1, r0, r4
   12428:	mov	r2, #10
   1242c:	mov	r3, r8
   12430:	mla	r1, r5, r8, r1
   12434:	mla	r1, r9, r4, r1
   12438:	subs	r0, sl, r0
   1243c:	umull	sl, r0, r0, r2
   12440:	mov	r2, r4
   12444:	sbc	r1, r6, r1
   12448:	add	r1, r1, r1, lsl #2
   1244c:	add	r7, r0, r1, lsl #1
   12450:	mov	r0, sl
   12454:	mov	r1, r7
   12458:	bl	17494 <__assert_fail@plt+0x62d4>
   1245c:	mov	r6, r0
   12460:	umull	r0, r2, r0, r4
   12464:	mla	r2, r6, r8, r2
   12468:	mla	r1, r1, r4, r2
   1246c:	mov	r2, #2
   12470:	subs	r0, sl, r0
   12474:	sbc	r1, r7, r1
   12478:	subs	r3, r4, r0, lsl #1
   1247c:	lsl	r1, r1, #1
   12480:	orr	r1, r1, r0, lsr #31
   12484:	orr	r7, r1, r0, lsl #1
   12488:	sbcs	r3, r8, r1
   1248c:	movwcc	r2, #3
   12490:	cmp	r7, #0
   12494:	movwne	r7, #1
   12498:	rsbs	r0, r4, r0, lsl #1
   1249c:	sbcs	r0, r1, r8
   124a0:	movcs	r7, r2
   124a4:	b	12514 <__assert_fail@plt+0x1354>
   124a8:	mov	r0, r6
   124ac:	mov	r1, r7
   124b0:	mov	r2, r5
   124b4:	mov	r3, r4
   124b8:	bl	17494 <__assert_fail@plt+0x62d4>
   124bc:	mov	r2, r0
   124c0:	mov	r3, r1
   124c4:	umull	r0, r1, r0, r5
   124c8:	mla	r1, r2, r4, r1
   124cc:	mla	r1, r3, r5, r1
   124d0:	subs	r0, r6, r0
   124d4:	sbc	r1, r7, r1
   124d8:	orrs	r0, r0, r1
   124dc:	bne	125fc <__assert_fail@plt+0x143c>
   124e0:	umull	r5, r0, r2, sl
   124e4:	mov	r4, r8
   124e8:	mla	r0, r2, r8, r0
   124ec:	mla	r9, r3, sl, r0
   124f0:	mov	r0, r5
   124f4:	mov	r1, r9
   124f8:	bl	17494 <__assert_fail@plt+0x62d4>
   124fc:	eor	r1, r1, r8
   12500:	eor	r0, r0, sl
   12504:	orrs	r0, r0, r1
   12508:	bne	125fc <__assert_fail@plt+0x143c>
   1250c:	mov	r7, #0
   12510:	mov	r6, #0
   12514:	ldr	r0, [sp, #40]	; 0x28
   12518:	ldr	r1, [sp, #32]
   1251c:	ldr	r2, [sp, #44]	; 0x2c
   12520:	ands	r4, r0, #16
   12524:	beq	12870 <__assert_fail@plt+0x16b0>
   12528:	subs	r0, r5, r2
   1252c:	mov	r8, #0
   12530:	sbcs	r0, r9, #0
   12534:	bcs	12548 <__assert_fail@plt+0x1388>
   12538:	ldr	r0, [sp, #32]
   1253c:	mov	sl, r5
   12540:	str	r0, [sp, #12]
   12544:	b	12b90 <__assert_fail@plt+0x19d0>
   12548:	ldr	r2, [sp, #44]	; 0x2c
   1254c:	mov	r0, r5
   12550:	mov	r1, r9
   12554:	mov	r3, #0
   12558:	bl	17494 <__assert_fail@plt+0x62d4>
   1255c:	ldr	r2, [sp, #44]	; 0x2c
   12560:	mov	sl, r0
   12564:	mov	r9, r1
   12568:	mls	r0, r0, r2, r5
   1256c:	add	r0, r0, r0, lsl #2
   12570:	add	r0, r6, r0, lsl #1
   12574:	udiv	r6, r0, r2
   12578:	mls	r0, r6, r2, r0
   1257c:	lsl	r0, r0, #1
   12580:	add	r0, r0, r7, lsr #1
   12584:	cmp	r0, r2
   12588:	bcs	1259c <__assert_fail@plt+0x13dc>
   1258c:	rsb	r1, r7, #0
   12590:	subs	r7, r0, r1
   12594:	movwne	r7, #1
   12598:	b	125ac <__assert_fail@plt+0x13ec>
   1259c:	add	r0, r0, r7
   125a0:	mov	r7, #2
   125a4:	cmp	r2, r0
   125a8:	movwcc	r7, #3
   125ac:	mov	r0, r8
   125b0:	add	r0, r8, #1
   125b4:	mov	r8, r0
   125b8:	cmp	r0, #7
   125bc:	bhi	125d0 <__assert_fail@plt+0x1410>
   125c0:	subs	r0, sl, r2
   125c4:	mov	r5, sl
   125c8:	sbcs	r0, r9, #0
   125cc:	bcs	12548 <__assert_fail@plt+0x1388>
   125d0:	rsbs	r0, sl, #9
   125d4:	rscs	r0, r9, #0
   125d8:	bcc	12af0 <__assert_fail@plt+0x1930>
   125dc:	ldr	r0, [sp, #52]	; 0x34
   125e0:	cmp	r0, #1
   125e4:	bne	12afc <__assert_fail@plt+0x193c>
   125e8:	and	r0, r6, #1
   125ec:	add	r0, r7, r0
   125f0:	cmp	r0, #2
   125f4:	bhi	12b0c <__assert_fail@plt+0x194c>
   125f8:	b	12b44 <__assert_fail@plt+0x1984>
   125fc:	ldr	r9, [fp, #20]
   12600:	ldr	r0, [fp, #16]
   12604:	mov	r1, r9
   12608:	bl	17420 <__assert_fail@plt+0x6260>
   1260c:	vmov	d8, r0, r1
   12610:	mov	r0, sl
   12614:	mov	r1, r8
   12618:	bl	17420 <__assert_fail@plt+0x6260>
   1261c:	mov	r4, r0
   12620:	mov	r5, r1
   12624:	mov	r0, r6
   12628:	mov	r1, r7
   1262c:	bl	17420 <__assert_fail@plt+0x6260>
   12630:	vmov	d16, r0, r1
   12634:	vmov	d17, r4, r5
   12638:	ldr	r7, [sp, #40]	; 0x28
   1263c:	tst	r7, #16
   12640:	vdiv.f64	d16, d16, d8
   12644:	vmul.f64	d8, d16, d17
   12648:	bne	126c8 <__assert_fail@plt+0x1508>
   1264c:	ldr	r6, [sp, #52]	; 0x34
   12650:	cmp	r6, #1
   12654:	beq	12884 <__assert_fail@plt+0x16c4>
   12658:	vldr	d16, [pc, #568]	; 12898 <__assert_fail@plt+0x16d8>
   1265c:	ldr	sl, [sp, #36]	; 0x24
   12660:	ldr	r8, [sp, #32]
   12664:	vcmpe.f64	d8, d16
   12668:	vmrs	APSR_nzcv, fpscr
   1266c:	bpl	1288c <__assert_fail@plt+0x16cc>
   12670:	vmov	r0, r1, d8
   12674:	bl	174e0 <__assert_fail@plt+0x6320>
   12678:	mov	r4, r0
   1267c:	mov	r5, r1
   12680:	mov	r0, #0
   12684:	cmp	r6, #0
   12688:	mov	r2, #0
   1268c:	bne	126b4 <__assert_fail@plt+0x14f4>
   12690:	mov	r0, r4
   12694:	mov	r1, r5
   12698:	bl	17420 <__assert_fail@plt+0x6260>
   1269c:	vmov	d16, r0, r1
   126a0:	mov	r2, #0
   126a4:	mov	r0, #0
   126a8:	vcmp.f64	d8, d16
   126ac:	vmrs	APSR_nzcv, fpscr
   126b0:	movwne	r0, #1
   126b4:	adds	r0, r0, r4
   126b8:	adc	r1, r2, r5
   126bc:	bl	17420 <__assert_fail@plt+0x6260>
   126c0:	vmov	d8, r0, r1
   126c4:	b	1288c <__assert_fail@plt+0x16cc>
   126c8:	ldr	r0, [sp, #44]	; 0x2c
   126cc:	mov	r6, #1
   126d0:	vmov	s0, r0
   126d4:	vcvt.f64.u32	d16, s0
   126d8:	vmul.f64	d17, d16, d16
   126dc:	vcmpe.f64	d17, d8
   126e0:	vmrs	APSR_nzcv, fpscr
   126e4:	bls	126f8 <__assert_fail@plt+0x1538>
   126e8:	ldr	sl, [sp, #48]	; 0x30
   126ec:	ldr	r8, [sp, #32]
   126f0:	vmov.f64	d17, d16
   126f4:	b	12790 <__assert_fail@plt+0x15d0>
   126f8:	vmul.f64	d18, d17, d16
   126fc:	ldr	sl, [sp, #48]	; 0x30
   12700:	ldr	r8, [sp, #32]
   12704:	mov	r6, #2
   12708:	vcmpe.f64	d18, d8
   1270c:	vmrs	APSR_nzcv, fpscr
   12710:	bhi	12790 <__assert_fail@plt+0x15d0>
   12714:	vmul.f64	d19, d18, d16
   12718:	vmov.f64	d17, d18
   1271c:	mov	r6, #3
   12720:	vcmpe.f64	d19, d8
   12724:	vmrs	APSR_nzcv, fpscr
   12728:	bhi	12790 <__assert_fail@plt+0x15d0>
   1272c:	vmul.f64	d18, d19, d16
   12730:	vmov.f64	d17, d19
   12734:	mov	r6, #4
   12738:	vcmpe.f64	d18, d8
   1273c:	vmrs	APSR_nzcv, fpscr
   12740:	bhi	12790 <__assert_fail@plt+0x15d0>
   12744:	vmul.f64	d19, d18, d16
   12748:	vmov.f64	d17, d18
   1274c:	mov	r6, #5
   12750:	vcmpe.f64	d19, d8
   12754:	vmrs	APSR_nzcv, fpscr
   12758:	bhi	12790 <__assert_fail@plt+0x15d0>
   1275c:	vmul.f64	d18, d19, d16
   12760:	vmov.f64	d17, d19
   12764:	mov	r6, #6
   12768:	vcmpe.f64	d18, d8
   1276c:	vmrs	APSR_nzcv, fpscr
   12770:	bhi	12790 <__assert_fail@plt+0x15d0>
   12774:	vmul.f64	d16, d18, d16
   12778:	mov	r6, #7
   1277c:	vmov.f64	d17, d18
   12780:	vcmpe.f64	d16, d8
   12784:	vmrs	APSR_nzcv, fpscr
   12788:	movls	r6, #8
   1278c:	vmovls.f64	d17, d16
   12790:	vdiv.f64	d8, d8, d17
   12794:	ldr	r0, [sp, #52]	; 0x34
   12798:	cmp	r0, #1
   1279c:	vmov.f64	d16, d8
   127a0:	beq	12810 <__assert_fail@plt+0x1650>
   127a4:	vldr	d16, [pc, #236]	; 12898 <__assert_fail@plt+0x16d8>
   127a8:	vcmpe.f64	d8, d16
   127ac:	vmov.f64	d16, d8
   127b0:	vmrs	APSR_nzcv, fpscr
   127b4:	bpl	12810 <__assert_fail@plt+0x1650>
   127b8:	vmov	r0, r1, d8
   127bc:	bl	174e0 <__assert_fail@plt+0x6320>
   127c0:	mov	r5, r1
   127c4:	ldr	r1, [sp, #52]	; 0x34
   127c8:	mov	r4, r0
   127cc:	mov	r0, #0
   127d0:	mov	r2, #0
   127d4:	cmp	r1, #0
   127d8:	bne	12800 <__assert_fail@plt+0x1640>
   127dc:	mov	r0, r4
   127e0:	mov	r1, r5
   127e4:	bl	17420 <__assert_fail@plt+0x6260>
   127e8:	vmov	d16, r0, r1
   127ec:	mov	r2, #0
   127f0:	mov	r0, #0
   127f4:	vcmp.f64	d8, d16
   127f8:	vmrs	APSR_nzcv, fpscr
   127fc:	movwne	r0, #1
   12800:	adds	r0, r0, r4
   12804:	adc	r1, r2, r5
   12808:	bl	17420 <__assert_fail@plt+0x6260>
   1280c:	vmov	d16, r0, r1
   12810:	ldr	r5, [sp, #36]	; 0x24
   12814:	movw	r3, #31442	; 0x7ad2
   12818:	mov	r1, #1
   1281c:	mvn	r2, #0
   12820:	vstr	d16, [sp]
   12824:	movt	r3, #1
   12828:	mov	r0, r5
   1282c:	bl	110b8 <__sprintf_chk@plt>
   12830:	ldr	r1, [sp, #28]
   12834:	mov	r0, #3
   12838:	cmp	r1, #0
   1283c:	movwne	r0, #2
   12840:	add	r4, r0, sl
   12844:	mov	r0, r5
   12848:	bl	11094 <strlen@plt>
   1284c:	cmp	r4, r0
   12850:	bcc	128b4 <__assert_fail@plt+0x16f4>
   12854:	ldr	r7, [sp, #40]	; 0x28
   12858:	mov	r2, r0
   1285c:	add	r5, sl, #1
   12860:	tst	r7, #8
   12864:	bne	128a0 <__assert_fail@plt+0x16e0>
   12868:	ldr	sl, [sp, #36]	; 0x24
   1286c:	b	12964 <__assert_fail@plt+0x17a4>
   12870:	mov	r0, r1
   12874:	mvn	r8, #0
   12878:	str	r1, [sp, #12]
   1287c:	mov	sl, r5
   12880:	b	12b90 <__assert_fail@plt+0x19d0>
   12884:	ldr	sl, [sp, #36]	; 0x24
   12888:	ldr	r8, [sp, #32]
   1288c:	vstr	d8, [sp]
   12890:	mvn	r6, #0
   12894:	b	1293c <__assert_fail@plt+0x177c>
   12898:	andeq	r0, r0, r0
   1289c:	mvnsmi	r0, #0
   128a0:	ldr	r0, [sp, #36]	; 0x24
   128a4:	add	r0, r2, r0
   128a8:	ldrb	r0, [r0, #-1]
   128ac:	cmp	r0, #48	; 0x30
   128b0:	bne	12ae4 <__assert_fail@plt+0x1924>
   128b4:	vmov.f64	d9, #36	; 0x41200000  10.0
   128b8:	ldr	r4, [sp, #52]	; 0x34
   128bc:	vmul.f64	d8, d8, d9
   128c0:	cmp	r4, #1
   128c4:	beq	1292c <__assert_fail@plt+0x176c>
   128c8:	vldr	d16, [pc, #-56]	; 12898 <__assert_fail@plt+0x16d8>
   128cc:	vcmpe.f64	d8, d16
   128d0:	vmrs	APSR_nzcv, fpscr
   128d4:	bpl	1292c <__assert_fail@plt+0x176c>
   128d8:	vmov	r0, r1, d8
   128dc:	bl	174e0 <__assert_fail@plt+0x6320>
   128e0:	mov	sl, r0
   128e4:	mov	r5, r1
   128e8:	mov	r0, #0
   128ec:	cmp	r4, #0
   128f0:	mov	r2, #0
   128f4:	bne	1291c <__assert_fail@plt+0x175c>
   128f8:	mov	r0, sl
   128fc:	mov	r1, r5
   12900:	bl	17420 <__assert_fail@plt+0x6260>
   12904:	vmov	d16, r0, r1
   12908:	mov	r2, #0
   1290c:	mov	r0, #0
   12910:	vcmp.f64	d8, d16
   12914:	vmrs	APSR_nzcv, fpscr
   12918:	movwne	r0, #1
   1291c:	adds	r0, r0, sl
   12920:	adc	r1, r2, r5
   12924:	bl	17420 <__assert_fail@plt+0x6260>
   12928:	vmov	d8, r0, r1
   1292c:	vdiv.f64	d16, d8, d9
   12930:	ldr	sl, [sp, #36]	; 0x24
   12934:	ldr	r7, [sp, #40]	; 0x28
   12938:	vstr	d16, [sp]
   1293c:	movw	r3, #31436	; 0x7acc
   12940:	mov	r0, sl
   12944:	mov	r1, #1
   12948:	mvn	r2, #0
   1294c:	movt	r3, #1
   12950:	bl	110b8 <__sprintf_chk@plt>
   12954:	mov	r0, sl
   12958:	bl	11094 <strlen@plt>
   1295c:	mov	r2, r0
   12960:	mov	r5, #0
   12964:	sub	r4, r8, r2
   12968:	mov	r1, sl
   1296c:	mov	r0, r4
   12970:	bl	10f68 <memmove@plt>
   12974:	sub	r5, r8, r5
   12978:	tst	r7, #4
   1297c:	bne	12c9c <__assert_fail@plt+0x1adc>
   12980:	tst	r7, #128	; 0x80
   12984:	beq	12db4 <__assert_fail@plt+0x1bf4>
   12988:	cmn	r6, #1
   1298c:	bgt	12a78 <__assert_fail@plt+0x18b8>
   12990:	ldr	r0, [fp, #16]
   12994:	mov	r6, #0
   12998:	subs	r0, r0, #2
   1299c:	sbcs	r0, r9, #0
   129a0:	bcc	12a78 <__assert_fail@plt+0x18b8>
   129a4:	ldr	r0, [sp, #44]	; 0x2c
   129a8:	ldr	r1, [fp, #16]
   129ac:	mov	r6, #1
   129b0:	subs	r0, r0, r1
   129b4:	rscs	r0, r9, #0
   129b8:	bcs	12a78 <__assert_fail@plt+0x18b8>
   129bc:	ldr	r0, [sp, #44]	; 0x2c
   129c0:	ldr	r2, [fp, #16]
   129c4:	mov	r6, #2
   129c8:	umull	r1, r0, r0, r0
   129cc:	subs	r2, r1, r2
   129d0:	sbcs	r2, r0, r9
   129d4:	bcs	12a78 <__assert_fail@plt+0x18b8>
   129d8:	ldr	r3, [sp, #44]	; 0x2c
   129dc:	mov	r6, #3
   129e0:	umull	r1, r2, r1, r3
   129e4:	mla	r2, r0, r3, r2
   129e8:	ldr	r0, [fp, #16]
   129ec:	subs	r0, r1, r0
   129f0:	sbcs	r0, r2, r9
   129f4:	bcs	12a78 <__assert_fail@plt+0x18b8>
   129f8:	ldr	r3, [sp, #44]	; 0x2c
   129fc:	mov	r6, #4
   12a00:	umull	r0, r1, r1, r3
   12a04:	mla	r1, r2, r3, r1
   12a08:	ldr	r2, [fp, #16]
   12a0c:	subs	r2, r0, r2
   12a10:	sbcs	r2, r1, r9
   12a14:	bcs	12a78 <__assert_fail@plt+0x18b8>
   12a18:	ldr	r3, [sp, #44]	; 0x2c
   12a1c:	mov	r6, #5
   12a20:	umull	r0, r2, r0, r3
   12a24:	mla	r1, r1, r3, r2
   12a28:	ldr	r2, [fp, #16]
   12a2c:	subs	r2, r0, r2
   12a30:	sbcs	r2, r1, r9
   12a34:	bcs	12a78 <__assert_fail@plt+0x18b8>
   12a38:	ldr	r3, [sp, #44]	; 0x2c
   12a3c:	mov	r6, #6
   12a40:	umull	r0, r2, r0, r3
   12a44:	mla	r1, r1, r3, r2
   12a48:	ldr	r2, [fp, #16]
   12a4c:	subs	r2, r0, r2
   12a50:	sbcs	r2, r1, r9
   12a54:	bcs	12a78 <__assert_fail@plt+0x18b8>
   12a58:	ldr	r3, [sp, #44]	; 0x2c
   12a5c:	mov	r6, #7
   12a60:	umull	r0, r2, r0, r3
   12a64:	mla	r1, r1, r3, r2
   12a68:	ldr	r2, [fp, #16]
   12a6c:	subs	r0, r0, r2
   12a70:	sbcs	r0, r1, r9
   12a74:	movwcc	r6, #8
   12a78:	and	r0, r7, #256	; 0x100
   12a7c:	tst	r7, #64	; 0x40
   12a80:	orrsne	r1, r6, r0
   12a84:	movne	r1, #32
   12a88:	addne	r8, sl, #648	; 0x288
   12a8c:	strbne	r1, [sl, #647]	; 0x287
   12a90:	cmp	r6, #0
   12a94:	beq	12abc <__assert_fail@plt+0x18fc>
   12a98:	ldr	r1, [sp, #28]
   12a9c:	cmp	r1, #0
   12aa0:	moveq	r1, #107	; 0x6b
   12aa4:	cmpeq	r6, #1
   12aa8:	beq	12ab8 <__assert_fail@plt+0x18f8>
   12aac:	movw	r1, #31524	; 0x7b24
   12ab0:	movt	r1, #1
   12ab4:	ldrb	r1, [r1, r6]
   12ab8:	strb	r1, [r8], #1
   12abc:	cmp	r0, #0
   12ac0:	beq	12db4 <__assert_fail@plt+0x1bf4>
   12ac4:	ldr	r0, [sp, #28]
   12ac8:	cmp	r0, #0
   12acc:	cmpne	r6, #0
   12ad0:	movne	r0, #105	; 0x69
   12ad4:	strbne	r0, [r8], #1
   12ad8:	mov	r0, #66	; 0x42
   12adc:	strb	r0, [r8], #1
   12ae0:	b	12db4 <__assert_fail@plt+0x1bf4>
   12ae4:	ldr	sl, [sp, #36]	; 0x24
   12ae8:	ldr	r7, [sp, #40]	; 0x28
   12aec:	b	12964 <__assert_fail@plt+0x17a4>
   12af0:	ldr	r0, [sp, #32]
   12af4:	str	r0, [sp, #12]
   12af8:	b	12b90 <__assert_fail@plt+0x19d0>
   12afc:	cmp	r0, #0
   12b00:	bne	12b44 <__assert_fail@plt+0x1984>
   12b04:	cmp	r7, #0
   12b08:	beq	12b44 <__assert_fail@plt+0x1984>
   12b0c:	adds	r0, sl, #1
   12b10:	add	r6, r6, #1
   12b14:	mov	r7, #0
   12b18:	adc	r1, r9, #0
   12b1c:	cmp	r6, #10
   12b20:	bne	12b44 <__assert_fail@plt+0x1984>
   12b24:	rsbs	r2, r0, #9
   12b28:	mov	r6, #0
   12b2c:	mov	sl, r0
   12b30:	mov	r9, r1
   12b34:	mov	r7, #0
   12b38:	rscs	r2, r1, #0
   12b3c:	ldr	r2, [sp, #44]	; 0x2c
   12b40:	bcc	12dd0 <__assert_fail@plt+0x1c10>
   12b44:	ldr	r0, [sp, #40]	; 0x28
   12b48:	tst	r0, #8
   12b4c:	beq	12b64 <__assert_fail@plt+0x19a4>
   12b50:	cmp	r6, #0
   12b54:	bne	12b64 <__assert_fail@plt+0x19a4>
   12b58:	ldr	r0, [sp, #32]
   12b5c:	str	r0, [sp, #12]
   12b60:	b	12b8c <__assert_fail@plt+0x19cc>
   12b64:	ldr	r1, [sp, #36]	; 0x24
   12b68:	ldr	r2, [sp, #48]	; 0x30
   12b6c:	add	r0, r6, #48	; 0x30
   12b70:	strb	r0, [r1, #646]!	; 0x286
   12b74:	sub	r0, r1, r2
   12b78:	ldr	r1, [sp, #16]
   12b7c:	str	r0, [sp, #12]
   12b80:	bl	10f8c <memcpy@plt>
   12b84:	ldr	r2, [sp, #44]	; 0x2c
   12b88:	mov	r7, #0
   12b8c:	mov	r6, #0
   12b90:	ldr	r0, [sp, #52]	; 0x34
   12b94:	cmp	r0, #0
   12b98:	beq	12bd8 <__assert_fail@plt+0x1a18>
   12b9c:	cmp	r0, #1
   12ba0:	bne	12bcc <__assert_fail@plt+0x1a0c>
   12ba4:	mov	r0, #0
   12ba8:	rsbs	r1, r7, #0
   12bac:	and	r2, sl, #1
   12bb0:	eor	r1, r2, r1
   12bb4:	sbc	r0, r0, #0
   12bb8:	ldr	r2, [sp, #44]	; 0x2c
   12bbc:	orrs	r0, r1, r0
   12bc0:	addne	r6, r6, #1
   12bc4:	cmp	r6, #5
   12bc8:	bgt	12be4 <__assert_fail@plt+0x1a24>
   12bcc:	ldr	r7, [sp, #36]	; 0x24
   12bd0:	ldr	r5, [sp, #40]	; 0x28
   12bd4:	b	12c40 <__assert_fail@plt+0x1a80>
   12bd8:	add	r0, r6, r7
   12bdc:	cmp	r0, #1
   12be0:	blt	12bcc <__assert_fail@plt+0x1a0c>
   12be4:	ldr	r7, [sp, #36]	; 0x24
   12be8:	ldr	r5, [sp, #40]	; 0x28
   12bec:	adds	sl, sl, #1
   12bf0:	adc	r9, r9, #0
   12bf4:	cmp	r8, #7
   12bf8:	bgt	12c40 <__assert_fail@plt+0x1a80>
   12bfc:	cmp	r4, #0
   12c00:	beq	12c40 <__assert_fail@plt+0x1a80>
   12c04:	eor	r0, sl, r2
   12c08:	orrs	r0, r0, r9
   12c0c:	addeq	r8, r8, #1
   12c10:	moveq	r9, #0
   12c14:	moveq	sl, #1
   12c18:	tsteq	r5, #8
   12c1c:	bne	12c40 <__assert_fail@plt+0x1a80>
   12c20:	ldr	r0, [sp, #12]
   12c24:	mov	r1, #48	; 0x30
   12c28:	ldr	r2, [sp, #48]	; 0x30
   12c2c:	strb	r1, [r0, #-1]!
   12c30:	ldr	r1, [sp, #16]
   12c34:	sub	r0, r0, r2
   12c38:	str	r0, [sp, #12]
   12c3c:	bl	10f8c <memcpy@plt>
   12c40:	ldr	r4, [sp, #12]
   12c44:	mov	r0, sl
   12c48:	mov	r1, r9
   12c4c:	mov	r2, #10
   12c50:	mov	r3, #0
   12c54:	bl	17494 <__assert_fail@plt+0x62d4>
   12c58:	add	r2, r0, r0, lsl #2
   12c5c:	sub	r2, sl, r2, lsl #1
   12c60:	orr	r2, r2, #48	; 0x30
   12c64:	strb	r2, [r4, #-1]!
   12c68:	rsbs	r2, sl, #9
   12c6c:	mov	sl, r0
   12c70:	rscs	r2, r9, #0
   12c74:	mov	r9, r1
   12c78:	bcc	12c44 <__assert_fail@plt+0x1a84>
   12c7c:	mov	r6, r8
   12c80:	mov	sl, r7
   12c84:	mov	r7, r5
   12c88:	ldr	r9, [fp, #20]
   12c8c:	ldr	r8, [sp, #32]
   12c90:	ldr	r5, [sp, #12]
   12c94:	tst	r7, #4
   12c98:	beq	12980 <__assert_fail@plt+0x17c0>
   12c9c:	ldr	r9, [sp, #20]
   12ca0:	str	r6, [sp, #16]
   12ca4:	sub	r7, r5, r4
   12ca8:	mov	r0, r9
   12cac:	bl	11094 <strlen@plt>
   12cb0:	str	r0, [sp, #52]	; 0x34
   12cb4:	add	r0, sp, #56	; 0x38
   12cb8:	mov	r1, r4
   12cbc:	mov	r2, r7
   12cc0:	bl	10f8c <memcpy@plt>
   12cc4:	ldr	r6, [sp, #24]
   12cc8:	add	r0, sp, #56	; 0x38
   12ccc:	ldrb	r8, [r6]
   12cd0:	cmp	r8, #255	; 0xff
   12cd4:	mov	sl, r8
   12cd8:	moveq	sl, r7
   12cdc:	cmp	r8, #0
   12ce0:	mvneq	sl, #0
   12ce4:	cmp	sl, r7
   12ce8:	movhi	sl, r7
   12cec:	sub	r4, r5, sl
   12cf0:	sub	r5, r7, sl
   12cf4:	mov	r2, sl
   12cf8:	add	r1, r0, r5
   12cfc:	mov	r0, r4
   12d00:	bl	10f8c <memcpy@plt>
   12d04:	cmp	r5, #0
   12d08:	beq	12d98 <__assert_fail@plt+0x1bd8>
   12d0c:	clz	r0, r8
   12d10:	lsr	r8, r0, #5
   12d14:	ldr	r0, [sp, #52]	; 0x34
   12d18:	rsb	r0, r0, #0
   12d1c:	str	r0, [sp, #48]	; 0x30
   12d20:	ldr	r0, [sp, #48]	; 0x30
   12d24:	ldr	r2, [sp, #52]	; 0x34
   12d28:	mov	r1, r9
   12d2c:	add	r4, r4, r0
   12d30:	mov	r0, r4
   12d34:	bl	10f8c <memcpy@plt>
   12d38:	tst	r8, #1
   12d3c:	add	r0, sp, #56	; 0x38
   12d40:	addeq	r6, r6, #1
   12d44:	mov	r8, r6
   12d48:	ldrb	r6, [r6]
   12d4c:	cmp	r6, #255	; 0xff
   12d50:	mov	r7, r6
   12d54:	moveq	r7, r5
   12d58:	cmp	r6, #0
   12d5c:	moveq	r7, sl
   12d60:	cmp	r5, r7
   12d64:	movcc	r7, r5
   12d68:	sub	r5, r5, r7
   12d6c:	sub	r4, r4, r7
   12d70:	mov	r2, r7
   12d74:	add	r1, r0, r5
   12d78:	mov	r0, r4
   12d7c:	bl	10f8c <memcpy@plt>
   12d80:	clz	r0, r6
   12d84:	mov	r6, r8
   12d88:	cmp	r5, #0
   12d8c:	mov	sl, r7
   12d90:	lsr	r8, r0, #5
   12d94:	bne	12d20 <__assert_fail@plt+0x1b60>
   12d98:	ldr	r8, [sp, #32]
   12d9c:	ldr	sl, [sp, #36]	; 0x24
   12da0:	ldr	r7, [sp, #40]	; 0x28
   12da4:	ldr	r9, [fp, #20]
   12da8:	ldr	r6, [sp, #16]
   12dac:	tst	r7, #128	; 0x80
   12db0:	bne	12988 <__assert_fail@plt+0x17c8>
   12db4:	mov	r0, #0
   12db8:	strb	r0, [r8]
   12dbc:	mov	r0, r4
   12dc0:	sub	sp, fp, #48	; 0x30
   12dc4:	vpop	{d8-d9}
   12dc8:	add	sp, sp, #4
   12dcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dd0:	ldr	r0, [sp, #32]
   12dd4:	mov	r7, #0
   12dd8:	mov	sl, #10
   12ddc:	mov	r9, #0
   12de0:	str	r0, [sp, #12]
   12de4:	b	12b90 <__assert_fail@plt+0x19d0>
   12de8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12dec:	add	fp, sp, #24
   12df0:	sub	sp, sp, #8
   12df4:	mov	r4, r2
   12df8:	mov	r8, r1
   12dfc:	cmp	r0, #0
   12e00:	bne	12e2c <__assert_fail@plt+0x1c6c>
   12e04:	movw	r0, #31448	; 0x7ad8
   12e08:	movt	r0, #1
   12e0c:	bl	11028 <getenv@plt>
   12e10:	cmp	r0, #0
   12e14:	bne	12e2c <__assert_fail@plt+0x1c6c>
   12e18:	movw	r0, #31459	; 0x7ae3
   12e1c:	movt	r0, #1
   12e20:	bl	11028 <getenv@plt>
   12e24:	cmp	r0, #0
   12e28:	beq	12f50 <__assert_fail@plt+0x1d90>
   12e2c:	mov	r6, r0
   12e30:	movw	r7, #31548	; 0x7b3c
   12e34:	movw	r1, #31536	; 0x7b30
   12e38:	mov	r3, #4
   12e3c:	ldrb	r5, [r6], #1
   12e40:	movt	r7, #1
   12e44:	movt	r1, #1
   12e48:	mov	r2, r7
   12e4c:	cmp	r5, #39	; 0x27
   12e50:	movne	r6, r0
   12e54:	mov	r0, r6
   12e58:	bl	1670c <__assert_fail@plt+0x554c>
   12e5c:	sub	r1, r5, #39	; 0x27
   12e60:	cmp	r0, #0
   12e64:	clz	r1, r1
   12e68:	lsr	r1, r1, #5
   12e6c:	lsl	r5, r1, #2
   12e70:	bmi	12e98 <__assert_fail@plt+0x1cd8>
   12e74:	ldr	r0, [r7, r0, lsl #2]
   12e78:	mov	r2, #1
   12e7c:	mov	r1, #0
   12e80:	str	r2, [r4]
   12e84:	str	r1, [r4, #4]
   12e88:	orr	r1, r0, r5
   12e8c:	mov	r0, #0
   12e90:	str	r1, [r8]
   12e94:	b	12ec8 <__assert_fail@plt+0x1d08>
   12e98:	movw	r0, #31469	; 0x7aed
   12e9c:	add	r1, sp, #4
   12ea0:	mov	r2, #0
   12ea4:	mov	r3, r4
   12ea8:	mov	r7, #0
   12eac:	movt	r0, #1
   12eb0:	str	r0, [sp]
   12eb4:	mov	r0, r6
   12eb8:	bl	1598c <__assert_fail@plt+0x47cc>
   12ebc:	cmp	r0, #0
   12ec0:	beq	12f0c <__assert_fail@plt+0x1d4c>
   12ec4:	str	r7, [r8]
   12ec8:	ldrd	r2, [r4]
   12ecc:	orrs	r1, r2, r3
   12ed0:	beq	12edc <__assert_fail@plt+0x1d1c>
   12ed4:	sub	sp, fp, #24
   12ed8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12edc:	movw	r0, #31505	; 0x7b11
   12ee0:	movt	r0, #1
   12ee4:	bl	11028 <getenv@plt>
   12ee8:	cmp	r0, #0
   12eec:	mov	r2, #512	; 0x200
   12ef0:	mov	r0, #4
   12ef4:	mov	r1, #0
   12ef8:	movweq	r2, #1024	; 0x400
   12efc:	str	r2, [r4]
   12f00:	str	r1, [r4, #4]
   12f04:	sub	sp, fp, #24
   12f08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12f0c:	ldrb	r0, [r6]
   12f10:	sub	r0, r0, #48	; 0x30
   12f14:	uxtb	r0, r0
   12f18:	cmp	r0, #10
   12f1c:	bcc	12f48 <__assert_fail@plt+0x1d88>
   12f20:	ldr	r0, [sp, #4]
   12f24:	cmp	r0, r6
   12f28:	beq	12f78 <__assert_fail@plt+0x1db8>
   12f2c:	ldrb	r2, [r6, #1]
   12f30:	add	r1, r6, #1
   12f34:	mov	r6, r1
   12f38:	sub	r2, r2, #48	; 0x30
   12f3c:	uxtb	r2, r2
   12f40:	cmp	r2, #10
   12f44:	bcs	12f24 <__assert_fail@plt+0x1d64>
   12f48:	mov	r1, r5
   12f4c:	b	12e8c <__assert_fail@plt+0x1ccc>
   12f50:	movw	r0, #31505	; 0x7b11
   12f54:	movt	r0, #1
   12f58:	bl	11028 <getenv@plt>
   12f5c:	cmp	r0, #0
   12f60:	mov	r2, #512	; 0x200
   12f64:	mov	r1, #0
   12f68:	movweq	r2, #1024	; 0x400
   12f6c:	str	r2, [r4]
   12f70:	str	r1, [r4, #4]
   12f74:	b	12e8c <__assert_fail@plt+0x1ccc>
   12f78:	ldrb	r2, [r0, #-1]
   12f7c:	orr	r1, r5, #384	; 0x180
   12f80:	cmp	r2, #66	; 0x42
   12f84:	mov	r2, r1
   12f88:	orrne	r2, r5, #128	; 0x80
   12f8c:	bne	12fa0 <__assert_fail@plt+0x1de0>
   12f90:	ldrb	r0, [r0, #-2]
   12f94:	cmp	r0, #105	; 0x69
   12f98:	orreq	r1, r2, #32
   12f9c:	b	12e8c <__assert_fail@plt+0x1ccc>
   12fa0:	orr	r1, r2, #32
   12fa4:	b	12e8c <__assert_fail@plt+0x1ccc>
   12fa8:	push	{r4, r5, fp, lr}
   12fac:	add	fp, sp, #8
   12fb0:	cmp	r0, #0
   12fb4:	beq	13048 <__assert_fail@plt+0x1e88>
   12fb8:	mov	r1, #47	; 0x2f
   12fbc:	mov	r4, r0
   12fc0:	bl	11148 <strrchr@plt>
   12fc4:	cmp	r0, #0
   12fc8:	mov	r5, r4
   12fcc:	addne	r5, r0, #1
   12fd0:	sub	r0, r5, r4
   12fd4:	cmp	r0, #7
   12fd8:	blt	1302c <__assert_fail@plt+0x1e6c>
   12fdc:	movw	r1, #31612	; 0x7b7c
   12fe0:	sub	r0, r5, #7
   12fe4:	mov	r2, #7
   12fe8:	movt	r1, #1
   12fec:	bl	1119c <strncmp@plt>
   12ff0:	cmp	r0, #0
   12ff4:	bne	1302c <__assert_fail@plt+0x1e6c>
   12ff8:	movw	r1, #31620	; 0x7b84
   12ffc:	mov	r0, r5
   13000:	mov	r2, #3
   13004:	movt	r1, #1
   13008:	bl	1119c <strncmp@plt>
   1300c:	cmp	r0, #0
   13010:	beq	1301c <__assert_fail@plt+0x1e5c>
   13014:	mov	r4, r5
   13018:	b	1302c <__assert_fail@plt+0x1e6c>
   1301c:	movw	r0, #37200	; 0x9150
   13020:	add	r4, r5, #3
   13024:	movt	r0, #2
   13028:	str	r4, [r0]
   1302c:	movw	r0, #37204	; 0x9154
   13030:	movt	r0, #2
   13034:	str	r4, [r0]
   13038:	movw	r0, #37248	; 0x9180
   1303c:	movt	r0, #2
   13040:	str	r4, [r0]
   13044:	pop	{r4, r5, fp, pc}
   13048:	movw	r0, #37216	; 0x9160
   1304c:	mov	r1, #55	; 0x37
   13050:	mov	r2, #1
   13054:	movt	r0, #2
   13058:	ldr	r3, [r0]
   1305c:	movw	r0, #31556	; 0x7b44
   13060:	movt	r0, #1
   13064:	bl	10fe0 <fwrite@plt>
   13068:	bl	111a8 <abort@plt>
   1306c:	push	{r4, r5, r6, sl, fp, lr}
   13070:	add	fp, sp, #16
   13074:	mov	r4, r0
   13078:	movw	r0, #37256	; 0x9188
   1307c:	movt	r0, #2
   13080:	cmp	r4, #0
   13084:	moveq	r4, r0
   13088:	bl	110ac <__errno_location@plt>
   1308c:	ldr	r6, [r0]
   13090:	mov	r5, r0
   13094:	mov	r0, r4
   13098:	mov	r1, #48	; 0x30
   1309c:	bl	1586c <__assert_fail@plt+0x46ac>
   130a0:	str	r6, [r5]
   130a4:	pop	{r4, r5, r6, sl, fp, pc}
   130a8:	movw	r1, #37256	; 0x9188
   130ac:	cmp	r0, #0
   130b0:	movt	r1, #2
   130b4:	movne	r1, r0
   130b8:	ldr	r0, [r1]
   130bc:	bx	lr
   130c0:	movw	r2, #37256	; 0x9188
   130c4:	cmp	r0, #0
   130c8:	movt	r2, #2
   130cc:	movne	r2, r0
   130d0:	str	r1, [r2]
   130d4:	bx	lr
   130d8:	movw	r3, #37256	; 0x9188
   130dc:	cmp	r0, #0
   130e0:	and	r2, r2, #1
   130e4:	movt	r3, #2
   130e8:	movne	r3, r0
   130ec:	ubfx	r0, r1, #5, #3
   130f0:	and	r1, r1, #31
   130f4:	add	ip, r3, r0, lsl #2
   130f8:	mov	r0, #1
   130fc:	ldr	r3, [ip, #8]
   13100:	and	r0, r0, r3, lsr r1
   13104:	eor	r2, r0, r2
   13108:	eor	r1, r3, r2, lsl r1
   1310c:	str	r1, [ip, #8]
   13110:	bx	lr
   13114:	movw	r2, #37256	; 0x9188
   13118:	cmp	r0, #0
   1311c:	movt	r2, #2
   13120:	movne	r2, r0
   13124:	ldr	r0, [r2, #4]
   13128:	str	r1, [r2, #4]
   1312c:	bx	lr
   13130:	push	{fp, lr}
   13134:	mov	fp, sp
   13138:	movw	r3, #37256	; 0x9188
   1313c:	cmp	r0, #0
   13140:	movt	r3, #2
   13144:	movne	r3, r0
   13148:	cmp	r1, #0
   1314c:	mov	r0, #10
   13150:	cmpne	r2, #0
   13154:	str	r0, [r3]
   13158:	bne	13160 <__assert_fail@plt+0x1fa0>
   1315c:	bl	111a8 <abort@plt>
   13160:	str	r1, [r3, #40]	; 0x28
   13164:	str	r2, [r3, #44]	; 0x2c
   13168:	pop	{fp, pc}
   1316c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13170:	add	fp, sp, #28
   13174:	sub	sp, sp, #20
   13178:	mov	r7, r0
   1317c:	ldr	r0, [fp, #8]
   13180:	movw	r5, #37256	; 0x9188
   13184:	mov	r8, r3
   13188:	mov	r9, r2
   1318c:	mov	sl, r1
   13190:	movt	r5, #2
   13194:	cmp	r0, #0
   13198:	movne	r5, r0
   1319c:	bl	110ac <__errno_location@plt>
   131a0:	ldr	r2, [r5, #40]	; 0x28
   131a4:	ldr	r3, [r5, #44]	; 0x2c
   131a8:	mov	r4, r0
   131ac:	ldm	r5, {r0, r1}
   131b0:	add	r5, r5, #8
   131b4:	ldr	r6, [r4]
   131b8:	stm	sp, {r0, r1, r5}
   131bc:	mov	r0, r7
   131c0:	mov	r1, sl
   131c4:	str	r2, [sp, #12]
   131c8:	str	r3, [sp, #16]
   131cc:	mov	r2, r9
   131d0:	mov	r3, r8
   131d4:	bl	131e4 <__assert_fail@plt+0x2024>
   131d8:	str	r6, [r4]
   131dc:	sub	sp, fp, #28
   131e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131e8:	add	fp, sp, #28
   131ec:	sub	sp, sp, #156	; 0x9c
   131f0:	mov	r5, r0
   131f4:	add	r0, r2, #1
   131f8:	mov	r6, r1
   131fc:	mov	sl, r3
   13200:	str	r2, [fp, #-80]	; 0xffffffb0
   13204:	str	r0, [sp, #72]	; 0x48
   13208:	ldr	r0, [fp, #12]
   1320c:	and	r1, r0, #1
   13210:	str	r1, [sp, #36]	; 0x24
   13214:	and	r1, r0, #4
   13218:	str	r1, [sp, #32]
   1321c:	ubfx	r9, r0, #1, #1
   13220:	bl	10ff8 <__ctype_get_mb_cur_max@plt>
   13224:	str	r0, [sp, #40]	; 0x28
   13228:	ldr	r0, [fp, #24]
   1322c:	ldr	r7, [fp, #8]
   13230:	mov	r1, #0
   13234:	str	r5, [fp, #-84]	; 0xffffffac
   13238:	str	r1, [fp, #-56]	; 0xffffffc8
   1323c:	mov	r1, #0
   13240:	str	r1, [sp, #60]	; 0x3c
   13244:	mov	r1, #1
   13248:	str	r1, [fp, #-48]	; 0xffffffd0
   1324c:	str	r0, [sp, #80]	; 0x50
   13250:	ldr	r0, [fp, #20]
   13254:	str	r0, [sp, #76]	; 0x4c
   13258:	mov	r0, #0
   1325c:	str	r0, [sp, #56]	; 0x38
   13260:	mov	r0, #0
   13264:	str	r0, [fp, #-88]	; 0xffffffa8
   13268:	mov	r0, #0
   1326c:	str	r0, [fp, #-72]	; 0xffffffb8
   13270:	mov	r0, #0
   13274:	cmp	r7, #10
   13278:	bhi	1420c <__assert_fail@plt+0x304c>
   1327c:	add	r1, pc, #24
   13280:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13284:	mov	r4, r6
   13288:	mov	r8, #0
   1328c:	mov	r2, #1
   13290:	mov	r3, #0
   13294:	mov	lr, sl
   13298:	ldr	pc, [r1, r7, lsl #2]
   1329c:	andeq	r3, r1, r0, ror #6
   132a0:			; <UNDEFINED> instruction: 0x000133b4
   132a4:	andeq	r3, r1, r4, ror r3
   132a8:	andeq	r3, r1, r8, asr r3
   132ac:	andeq	r3, r1, r8, lsr #7
   132b0:	ldrdeq	r3, [r1], -ip
   132b4:	andeq	r3, r1, r4, lsl #7
   132b8:	andeq	r3, r1, r0, ror #8
   132bc:	andeq	r3, r1, r8, asr #5
   132c0:	andeq	r3, r1, r8, asr #5
   132c4:	strdeq	r3, [r1], -r0
   132c8:	movw	r0, #31702	; 0x7bd6
   132cc:	mov	r1, r7
   132d0:	movt	r0, #1
   132d4:	bl	14c14 <__assert_fail@plt+0x3a54>
   132d8:	str	r0, [sp, #76]	; 0x4c
   132dc:	movw	r0, #31704	; 0x7bd8
   132e0:	mov	r1, r7
   132e4:	movt	r0, #1
   132e8:	bl	14c14 <__assert_fail@plt+0x3a54>
   132ec:	str	r0, [sp, #80]	; 0x50
   132f0:	mov	r8, #0
   132f4:	tst	r9, #1
   132f8:	bne	13330 <__assert_fail@plt+0x2170>
   132fc:	ldr	r0, [sp, #76]	; 0x4c
   13300:	ldrb	r0, [r0]
   13304:	cmp	r0, #0
   13308:	beq	13330 <__assert_fail@plt+0x2170>
   1330c:	ldr	r1, [sp, #76]	; 0x4c
   13310:	mov	r8, #0
   13314:	add	r1, r1, #1
   13318:	cmp	r8, r4
   1331c:	strbcc	r0, [r5, r8]
   13320:	ldrb	r0, [r1, r8]
   13324:	add	r8, r8, #1
   13328:	cmp	r0, #0
   1332c:	bne	13318 <__assert_fail@plt+0x2158>
   13330:	ldr	r6, [sp, #80]	; 0x50
   13334:	mov	r0, r6
   13338:	bl	11094 <strlen@plt>
   1333c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13340:	str	r0, [fp, #-72]	; 0xffffffb8
   13344:	str	r6, [fp, #-88]	; 0xffffffa8
   13348:	mov	r2, #1
   1334c:	mov	r3, r9
   13350:	mov	lr, sl
   13354:	b	13460 <__assert_fail@plt+0x22a0>
   13358:	mov	r0, #1
   1335c:	b	133b4 <__assert_fail@plt+0x21f4>
   13360:	mov	r7, #0
   13364:	mov	r8, #0
   13368:	mov	r2, r0
   1336c:	mov	r3, #0
   13370:	b	13460 <__assert_fail@plt+0x22a0>
   13374:	tst	r9, #1
   13378:	bne	133b4 <__assert_fail@plt+0x21f4>
   1337c:	mov	r2, r0
   13380:	b	1340c <__assert_fail@plt+0x224c>
   13384:	mov	r0, #1
   13388:	mov	r8, #0
   1338c:	mov	r7, #5
   13390:	mov	r2, #1
   13394:	str	r0, [fp, #-72]	; 0xffffffb8
   13398:	movw	r0, #31700	; 0x7bd4
   1339c:	movt	r0, #1
   133a0:	str	r0, [fp, #-88]	; 0xffffffa8
   133a4:	b	133d4 <__assert_fail@plt+0x2214>
   133a8:	mov	r2, #1
   133ac:	tst	r9, #1
   133b0:	beq	1340c <__assert_fail@plt+0x224c>
   133b4:	mov	r1, #1
   133b8:	mov	r8, #0
   133bc:	mov	r7, #2
   133c0:	mov	r2, r0
   133c4:	str	r1, [fp, #-72]	; 0xffffffb8
   133c8:	movw	r1, #31704	; 0x7bd8
   133cc:	movt	r1, #1
   133d0:	str	r1, [fp, #-88]	; 0xffffffa8
   133d4:	mov	r3, #1
   133d8:	b	13460 <__assert_fail@plt+0x22a0>
   133dc:	tst	r9, #1
   133e0:	beq	13430 <__assert_fail@plt+0x2270>
   133e4:	mov	r0, #1
   133e8:	mov	r8, #0
   133ec:	mov	r2, #1
   133f0:	mov	r3, #1
   133f4:	mov	r7, #5
   133f8:	str	r0, [fp, #-72]	; 0xffffffb8
   133fc:	movw	r0, #31700	; 0x7bd4
   13400:	movt	r0, #1
   13404:	str	r0, [fp, #-88]	; 0xffffffa8
   13408:	b	13460 <__assert_fail@plt+0x22a0>
   1340c:	cmp	r4, #0
   13410:	mov	r8, #1
   13414:	mov	r3, #0
   13418:	mov	r7, #2
   1341c:	movne	r0, #39	; 0x27
   13420:	strbne	r0, [r5]
   13424:	movw	r0, #31704	; 0x7bd8
   13428:	movt	r0, #1
   1342c:	b	13454 <__assert_fail@plt+0x2294>
   13430:	cmp	r4, #0
   13434:	mov	r8, #1
   13438:	mov	r2, #1
   1343c:	mov	r7, #5
   13440:	mov	r3, #0
   13444:	movne	r0, #34	; 0x22
   13448:	strbne	r0, [r5]
   1344c:	movw	r0, #31700	; 0x7bd4
   13450:	movt	r0, #1
   13454:	str	r0, [fp, #-88]	; 0xffffffa8
   13458:	mov	r0, #1
   1345c:	str	r0, [fp, #-72]	; 0xffffffb8
   13460:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13464:	eor	r6, r3, #1
   13468:	str	r7, [fp, #-68]	; 0xffffffbc
   1346c:	str	r3, [fp, #-76]	; 0xffffffb4
   13470:	str	r2, [sp, #84]	; 0x54
   13474:	str	r6, [sp, #92]	; 0x5c
   13478:	cmp	r0, #0
   1347c:	movwne	r0, #1
   13480:	and	r1, r0, r3
   13484:	and	r1, r2, r1
   13488:	str	r1, [sp, #48]	; 0x30
   1348c:	sub	r1, r7, #2
   13490:	clz	r1, r1
   13494:	lsr	r1, r1, #5
   13498:	and	r1, r1, r3
   1349c:	str	r1, [sp, #64]	; 0x40
   134a0:	subs	r1, r7, #2
   134a4:	mov	r7, #0
   134a8:	movwne	r1, #1
   134ac:	orr	r6, r1, r6
   134b0:	and	r1, r1, r2
   134b4:	and	r0, r0, r1
   134b8:	str	r6, [sp, #68]	; 0x44
   134bc:	str	r0, [fp, #-60]	; 0xffffffc4
   134c0:	orr	r0, r1, r3
   134c4:	ldr	r1, [fp, #16]
   134c8:	eor	r0, r0, #1
   134cc:	clz	r1, r1
   134d0:	lsr	r1, r1, #5
   134d4:	orr	r0, r1, r0
   134d8:	str	r0, [fp, #-64]	; 0xffffffc0
   134dc:	eor	r0, r2, #1
   134e0:	str	r0, [sp, #52]	; 0x34
   134e4:	cmn	lr, #1
   134e8:	beq	134f8 <__assert_fail@plt+0x2338>
   134ec:	cmp	r7, lr
   134f0:	bne	13504 <__assert_fail@plt+0x2344>
   134f4:	b	1404c <__assert_fail@plt+0x2e8c>
   134f8:	ldrb	r0, [ip, r7]
   134fc:	cmp	r0, #0
   13500:	beq	14054 <__assert_fail@plt+0x2e94>
   13504:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13508:	mov	sl, #0
   1350c:	cmp	r0, #0
   13510:	beq	13548 <__assert_fail@plt+0x2388>
   13514:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13518:	add	r5, r7, r0
   1351c:	cmp	r0, #2
   13520:	bcc	1353c <__assert_fail@plt+0x237c>
   13524:	cmn	lr, #1
   13528:	bne	1353c <__assert_fail@plt+0x237c>
   1352c:	mov	r0, ip
   13530:	bl	11094 <strlen@plt>
   13534:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13538:	mov	lr, r0
   1353c:	cmp	r5, lr
   13540:	bls	13550 <__assert_fail@plt+0x2390>
   13544:	ldr	r5, [fp, #-84]	; 0xffffffac
   13548:	mov	r0, #0
   1354c:	b	1359c <__assert_fail@plt+0x23dc>
   13550:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13554:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13558:	add	r0, ip, r7
   1355c:	mov	r6, r4
   13560:	mov	r4, lr
   13564:	bl	11088 <bcmp@plt>
   13568:	ldr	r2, [sp, #92]	; 0x5c
   1356c:	cmp	r0, #0
   13570:	ldr	r5, [fp, #-84]	; 0xffffffac
   13574:	mov	r1, r0
   13578:	movwne	r1, #1
   1357c:	orr	r1, r1, r2
   13580:	tst	r1, #1
   13584:	beq	140dc <__assert_fail@plt+0x2f1c>
   13588:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1358c:	clz	r0, r0
   13590:	mov	lr, r4
   13594:	mov	r4, r6
   13598:	lsr	r0, r0, #5
   1359c:	str	r0, [fp, #-52]	; 0xffffffcc
   135a0:	ldrb	r6, [ip, r7]
   135a4:	cmp	r6, #126	; 0x7e
   135a8:	bhi	13ad8 <__assert_fail@plt+0x2918>
   135ac:	add	r3, pc, #16
   135b0:	mov	r9, #1
   135b4:	mov	r2, #110	; 0x6e
   135b8:	mov	r0, #97	; 0x61
   135bc:	mov	r1, #0
   135c0:	ldr	pc, [r3, r6, lsl #2]
   135c4:	andeq	r3, r1, r8, lsr r9
   135c8:	ldrdeq	r3, [r1], -r8
   135cc:	ldrdeq	r3, [r1], -r8
   135d0:	ldrdeq	r3, [r1], -r8
   135d4:	ldrdeq	r3, [r1], -r8
   135d8:	ldrdeq	r3, [r1], -r8
   135dc:	ldrdeq	r3, [r1], -r8
   135e0:			; <UNDEFINED> instruction: 0x00013bb4
   135e4:	andeq	r3, r1, r8, lsl r9
   135e8:	andeq	r3, r1, r0, lsl r9
   135ec:	andeq	r3, r1, r4, lsr #18
   135f0:	andeq	r3, r1, r0, asr #20
   135f4:	andeq	r3, r1, r8, lsl #18
   135f8:	andeq	r3, r1, r0, lsr #18
   135fc:	ldrdeq	r3, [r1], -r8
   13600:	ldrdeq	r3, [r1], -r8
   13604:	ldrdeq	r3, [r1], -r8
   13608:	ldrdeq	r3, [r1], -r8
   1360c:	ldrdeq	r3, [r1], -r8
   13610:	ldrdeq	r3, [r1], -r8
   13614:	ldrdeq	r3, [r1], -r8
   13618:	ldrdeq	r3, [r1], -r8
   1361c:	ldrdeq	r3, [r1], -r8
   13620:	ldrdeq	r3, [r1], -r8
   13624:	ldrdeq	r3, [r1], -r8
   13628:	ldrdeq	r3, [r1], -r8
   1362c:	ldrdeq	r3, [r1], -r8
   13630:	ldrdeq	r3, [r1], -r8
   13634:	ldrdeq	r3, [r1], -r8
   13638:	ldrdeq	r3, [r1], -r8
   1363c:	ldrdeq	r3, [r1], -r8
   13640:	ldrdeq	r3, [r1], -r8
   13644:			; <UNDEFINED> instruction: 0x000138bc
   13648:	andeq	r3, r1, r0, asr #17
   1364c:	andeq	r3, r1, r0, asr #17
   13650:	andeq	r3, r1, r8, lsr #17
   13654:	andeq	r3, r1, r0, asr #17
   13658:	andeq	r3, r1, r0, asr #15
   1365c:	andeq	r3, r1, r0, asr #17
   13660:	andeq	r3, r1, r8, asr #20
   13664:	andeq	r3, r1, r0, asr #17
   13668:	andeq	r3, r1, r0, asr #17
   1366c:	andeq	r3, r1, r0, asr #17
   13670:	andeq	r3, r1, r0, asr #15
   13674:	andeq	r3, r1, r0, asr #15
   13678:	andeq	r3, r1, r0, asr #15
   1367c:	andeq	r3, r1, r0, asr #15
   13680:	andeq	r3, r1, r0, asr #15
   13684:	andeq	r3, r1, r0, asr #15
   13688:	andeq	r3, r1, r0, asr #15
   1368c:	andeq	r3, r1, r0, asr #15
   13690:	andeq	r3, r1, r0, asr #15
   13694:	andeq	r3, r1, r0, asr #15
   13698:	andeq	r3, r1, r0, asr #15
   1369c:	andeq	r3, r1, r0, asr #15
   136a0:	andeq	r3, r1, r0, asr #15
   136a4:	andeq	r3, r1, r0, asr #15
   136a8:	andeq	r3, r1, r0, asr #15
   136ac:	andeq	r3, r1, r0, asr #15
   136b0:	andeq	r3, r1, r0, asr #17
   136b4:	andeq	r3, r1, r0, asr #17
   136b8:	andeq	r3, r1, r0, asr #17
   136bc:	andeq	r3, r1, r0, asr #17
   136c0:	andeq	r3, r1, r0, lsl sl
   136c4:	ldrdeq	r3, [r1], -r8
   136c8:	andeq	r3, r1, r0, asr #15
   136cc:	andeq	r3, r1, r0, asr #15
   136d0:	andeq	r3, r1, r0, asr #15
   136d4:	andeq	r3, r1, r0, asr #15
   136d8:	andeq	r3, r1, r0, asr #15
   136dc:	andeq	r3, r1, r0, asr #15
   136e0:	andeq	r3, r1, r0, asr #15
   136e4:	andeq	r3, r1, r0, asr #15
   136e8:	andeq	r3, r1, r0, asr #15
   136ec:	andeq	r3, r1, r0, asr #15
   136f0:	andeq	r3, r1, r0, asr #15
   136f4:	andeq	r3, r1, r0, asr #15
   136f8:	andeq	r3, r1, r0, asr #15
   136fc:	andeq	r3, r1, r0, asr #15
   13700:	andeq	r3, r1, r0, asr #15
   13704:	andeq	r3, r1, r0, asr #15
   13708:	andeq	r3, r1, r0, asr #15
   1370c:	andeq	r3, r1, r0, asr #15
   13710:	andeq	r3, r1, r0, asr #15
   13714:	andeq	r3, r1, r0, asr #15
   13718:	andeq	r3, r1, r0, asr #15
   1371c:	andeq	r3, r1, r0, asr #15
   13720:	andeq	r3, r1, r0, asr #15
   13724:	andeq	r3, r1, r0, asr #15
   13728:	andeq	r3, r1, r0, asr #15
   1372c:	andeq	r3, r1, r0, asr #15
   13730:	andeq	r3, r1, r0, asr #17
   13734:	andeq	r3, r1, r8, ror #17
   13738:	andeq	r3, r1, r0, asr #15
   1373c:	andeq	r3, r1, r0, asr #17
   13740:	andeq	r3, r1, r0, asr #15
   13744:	andeq	r3, r1, r0, asr #17
   13748:	andeq	r3, r1, r0, asr #15
   1374c:	andeq	r3, r1, r0, asr #15
   13750:	andeq	r3, r1, r0, asr #15
   13754:	andeq	r3, r1, r0, asr #15
   13758:	andeq	r3, r1, r0, asr #15
   1375c:	andeq	r3, r1, r0, asr #15
   13760:	andeq	r3, r1, r0, asr #15
   13764:	andeq	r3, r1, r0, asr #15
   13768:	andeq	r3, r1, r0, asr #15
   1376c:	andeq	r3, r1, r0, asr #15
   13770:	andeq	r3, r1, r0, asr #15
   13774:	andeq	r3, r1, r0, asr #15
   13778:	andeq	r3, r1, r0, asr #15
   1377c:	andeq	r3, r1, r0, asr #15
   13780:	andeq	r3, r1, r0, asr #15
   13784:	andeq	r3, r1, r0, asr #15
   13788:	andeq	r3, r1, r0, asr #15
   1378c:	andeq	r3, r1, r0, asr #15
   13790:	andeq	r3, r1, r0, asr #15
   13794:	andeq	r3, r1, r0, asr #15
   13798:	andeq	r3, r1, r0, asr #15
   1379c:	andeq	r3, r1, r0, asr #15
   137a0:	andeq	r3, r1, r0, asr #15
   137a4:	andeq	r3, r1, r0, asr #15
   137a8:	andeq	r3, r1, r0, asr #15
   137ac:	andeq	r3, r1, r0, asr #15
   137b0:	andeq	r3, r1, ip, ror r8
   137b4:	andeq	r3, r1, r0, asr #17
   137b8:	andeq	r3, r1, ip, ror r8
   137bc:	andeq	r3, r1, r8, lsr #17
   137c0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   137c4:	tst	r0, #1
   137c8:	bne	137f4 <__assert_fail@plt+0x2634>
   137cc:	ldr	r1, [fp, #16]
   137d0:	ubfx	r0, r6, #5, #3
   137d4:	mov	r2, #1
   137d8:	ldr	r0, [r1, r0, lsl #2]
   137dc:	and	r1, r6, #31
   137e0:	tst	r0, r2, lsl r1
   137e4:	beq	137f4 <__assert_fail@plt+0x2634>
   137e8:	mov	r0, r6
   137ec:	mov	r1, r9
   137f0:	b	13808 <__assert_fail@plt+0x2648>
   137f4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   137f8:	mov	r1, r9
   137fc:	cmp	r0, #0
   13800:	mov	r0, r6
   13804:	beq	13b48 <__assert_fail@plt+0x2988>
   13808:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1380c:	tst	r2, #1
   13810:	bne	14118 <__assert_fail@plt+0x2f58>
   13814:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13818:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1381c:	subs	r2, r2, #2
   13820:	movwne	r2, #1
   13824:	orr	r2, r2, r3
   13828:	tst	r2, #1
   1382c:	bne	13868 <__assert_fail@plt+0x26a8>
   13830:	cmp	r8, r4
   13834:	movcc	r2, #39	; 0x27
   13838:	strbcc	r2, [r5, r8]
   1383c:	add	r2, r8, #1
   13840:	cmp	r2, r4
   13844:	movcc	r3, #36	; 0x24
   13848:	strbcc	r3, [r5, r2]
   1384c:	add	r2, r8, #2
   13850:	add	r8, r8, #3
   13854:	cmp	r2, r4
   13858:	movcc	r3, #39	; 0x27
   1385c:	strbcc	r3, [r5, r2]
   13860:	mov	r2, #1
   13864:	str	r2, [fp, #-56]	; 0xffffffc8
   13868:	cmp	r8, r4
   1386c:	movcc	r2, #92	; 0x5c
   13870:	strbcc	r2, [r5, r8]
   13874:	add	r8, r8, #1
   13878:	b	13b8c <__assert_fail@plt+0x29cc>
   1387c:	cmp	lr, #1
   13880:	beq	138a8 <__assert_fail@plt+0x26e8>
   13884:	mov	r9, #0
   13888:	cmn	lr, #1
   1388c:	bne	138b4 <__assert_fail@plt+0x26f4>
   13890:	ldrb	r0, [ip, #1]
   13894:	cmp	r0, #0
   13898:	beq	138a8 <__assert_fail@plt+0x26e8>
   1389c:	mvn	lr, #0
   138a0:	mov	sl, #0
   138a4:	b	137c0 <__assert_fail@plt+0x2600>
   138a8:	mov	r9, #0
   138ac:	cmp	r7, #0
   138b0:	beq	138bc <__assert_fail@plt+0x26fc>
   138b4:	mov	sl, #0
   138b8:	b	137c0 <__assert_fail@plt+0x2600>
   138bc:	mov	r1, #1
   138c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   138c4:	cmp	r0, #2
   138c8:	bne	138e0 <__assert_fail@plt+0x2720>
   138cc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   138d0:	mov	r9, r1
   138d4:	tst	r0, #1
   138d8:	beq	137c0 <__assert_fail@plt+0x2600>
   138dc:	b	14118 <__assert_fail@plt+0x2f58>
   138e0:	mov	r9, r1
   138e4:	b	137c0 <__assert_fail@plt+0x2600>
   138e8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   138ec:	cmp	r0, #2
   138f0:	bne	13b2c <__assert_fail@plt+0x296c>
   138f4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   138f8:	tst	r0, #1
   138fc:	bne	14118 <__assert_fail@plt+0x2f58>
   13900:	mov	sl, #0
   13904:	b	13b40 <__assert_fail@plt+0x2980>
   13908:	mov	r0, #102	; 0x66
   1390c:	b	13bb4 <__assert_fail@plt+0x29f4>
   13910:	mov	r2, #116	; 0x74
   13914:	b	13924 <__assert_fail@plt+0x2764>
   13918:	mov	r0, #98	; 0x62
   1391c:	b	13bb4 <__assert_fail@plt+0x29f4>
   13920:	mov	r2, #114	; 0x72
   13924:	ldr	r0, [sp, #68]	; 0x44
   13928:	tst	r0, #1
   1392c:	mov	r0, r2
   13930:	bne	13bb4 <__assert_fail@plt+0x29f4>
   13934:	b	14118 <__assert_fail@plt+0x2f58>
   13938:	ldr	r0, [sp, #84]	; 0x54
   1393c:	tst	r0, #1
   13940:	beq	13bd0 <__assert_fail@plt+0x2a10>
   13944:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13948:	tst	r0, #1
   1394c:	bne	14204 <__assert_fail@plt+0x3044>
   13950:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13954:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13958:	subs	r0, r0, #2
   1395c:	movwne	r0, #1
   13960:	orr	r0, r0, r1
   13964:	tst	r0, #1
   13968:	bne	139a4 <__assert_fail@plt+0x27e4>
   1396c:	cmp	r8, r4
   13970:	movcc	r0, #39	; 0x27
   13974:	strbcc	r0, [r5, r8]
   13978:	add	r0, r8, #1
   1397c:	cmp	r0, r4
   13980:	movcc	r1, #36	; 0x24
   13984:	strbcc	r1, [r5, r0]
   13988:	add	r0, r8, #2
   1398c:	add	r8, r8, #3
   13990:	cmp	r0, r4
   13994:	movcc	r1, #39	; 0x27
   13998:	strbcc	r1, [r5, r0]
   1399c:	mov	r0, #1
   139a0:	str	r0, [fp, #-56]	; 0xffffffc8
   139a4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   139a8:	cmp	r8, r4
   139ac:	mov	r9, #0
   139b0:	mov	sl, #1
   139b4:	mov	r6, #48	; 0x30
   139b8:	movcc	r0, #92	; 0x5c
   139bc:	strbcc	r0, [r5, r8]
   139c0:	add	r0, r8, #1
   139c4:	cmp	r1, #2
   139c8:	beq	13d98 <__assert_fail@plt+0x2bd8>
   139cc:	add	r1, r7, #1
   139d0:	cmp	r1, lr
   139d4:	bcs	13d98 <__assert_fail@plt+0x2bd8>
   139d8:	ldrb	r1, [ip, r1]
   139dc:	sub	r1, r1, #48	; 0x30
   139e0:	uxtb	r1, r1
   139e4:	cmp	r1, #9
   139e8:	bhi	13d98 <__assert_fail@plt+0x2bd8>
   139ec:	cmp	r0, r4
   139f0:	movcc	r1, #48	; 0x30
   139f4:	strbcc	r1, [r5, r0]
   139f8:	add	r0, r8, #2
   139fc:	add	r8, r8, #3
   13a00:	cmp	r0, r4
   13a04:	movcc	r1, #48	; 0x30
   13a08:	strbcc	r1, [r5, r0]
   13a0c:	b	137c0 <__assert_fail@plt+0x2600>
   13a10:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13a14:	mov	sl, #0
   13a18:	mov	r6, #63	; 0x3f
   13a1c:	cmp	r0, #5
   13a20:	beq	13da0 <__assert_fail@plt+0x2be0>
   13a24:	cmp	r0, #2
   13a28:	bne	13e48 <__assert_fail@plt+0x2c88>
   13a2c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13a30:	mov	r9, #0
   13a34:	tst	r0, #1
   13a38:	beq	137c0 <__assert_fail@plt+0x2600>
   13a3c:	b	14118 <__assert_fail@plt+0x2f58>
   13a40:	mov	r0, #118	; 0x76
   13a44:	b	13bb4 <__assert_fail@plt+0x29f4>
   13a48:	mov	r0, #1
   13a4c:	mov	r6, #39	; 0x27
   13a50:	str	r0, [sp, #60]	; 0x3c
   13a54:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13a58:	cmp	r0, #2
   13a5c:	bne	13bec <__assert_fail@plt+0x2a2c>
   13a60:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13a64:	tst	r0, #1
   13a68:	bne	14118 <__assert_fail@plt+0x2f58>
   13a6c:	ldr	r2, [sp, #56]	; 0x38
   13a70:	clz	r1, r4
   13a74:	mov	sl, #0
   13a78:	mov	r9, #1
   13a7c:	lsr	r1, r1, #5
   13a80:	cmp	r2, #0
   13a84:	mov	r0, r2
   13a88:	movwne	r0, #1
   13a8c:	orrs	r0, r0, r1
   13a90:	moveq	r2, r4
   13a94:	moveq	r4, r0
   13a98:	cmp	r8, r4
   13a9c:	str	r2, [sp, #56]	; 0x38
   13aa0:	movcc	r0, #39	; 0x27
   13aa4:	strbcc	r0, [r5, r8]
   13aa8:	add	r0, r8, #1
   13aac:	cmp	r0, r4
   13ab0:	movcc	r1, #92	; 0x5c
   13ab4:	strbcc	r1, [r5, r0]
   13ab8:	add	r0, r8, #2
   13abc:	add	r8, r8, #3
   13ac0:	cmp	r0, r4
   13ac4:	movcc	r1, #39	; 0x27
   13ac8:	strbcc	r1, [r5, r0]
   13acc:	mov	r0, #0
   13ad0:	str	r0, [fp, #-56]	; 0xffffffc8
   13ad4:	b	137c0 <__assert_fail@plt+0x2600>
   13ad8:	ldr	r0, [sp, #40]	; 0x28
   13adc:	str	r4, [sp, #88]	; 0x58
   13ae0:	cmp	r0, #1
   13ae4:	bne	13bf4 <__assert_fail@plt+0x2a34>
   13ae8:	str	lr, [sp, #28]
   13aec:	bl	11070 <__ctype_b_loc@plt>
   13af0:	ldr	r0, [r0]
   13af4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13af8:	mov	r2, #1
   13afc:	add	r0, r0, r6, lsl #1
   13b00:	ldrb	r0, [r0, #1]
   13b04:	ubfx	r9, r0, #6, #1
   13b08:	ldr	r0, [sp, #52]	; 0x34
   13b0c:	cmp	r2, #1
   13b10:	orr	r0, r9, r0
   13b14:	bhi	13e50 <__assert_fail@plt+0x2c90>
   13b18:	tst	r0, #1
   13b1c:	beq	13e50 <__assert_fail@plt+0x2c90>
   13b20:	ldr	lr, [sp, #28]
   13b24:	ldr	r4, [sp, #88]	; 0x58
   13b28:	b	137c0 <__assert_fail@plt+0x2600>
   13b2c:	ldr	r1, [sp, #48]	; 0x30
   13b30:	mov	sl, #0
   13b34:	mov	r0, #92	; 0x5c
   13b38:	cmp	r1, #0
   13b3c:	beq	13bb4 <__assert_fail@plt+0x29f4>
   13b40:	mov	r6, #92	; 0x5c
   13b44:	mov	r9, #0
   13b48:	cmp	sl, #0
   13b4c:	bne	13b84 <__assert_fail@plt+0x29c4>
   13b50:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13b54:	tst	r0, #1
   13b58:	beq	13b84 <__assert_fail@plt+0x29c4>
   13b5c:	cmp	r8, r4
   13b60:	movcc	r0, #39	; 0x27
   13b64:	strbcc	r0, [r5, r8]
   13b68:	add	r0, r8, #1
   13b6c:	add	r8, r8, #2
   13b70:	cmp	r0, r4
   13b74:	movcc	r1, #39	; 0x27
   13b78:	strbcc	r1, [r5, r0]
   13b7c:	mov	r0, #0
   13b80:	str	r0, [fp, #-56]	; 0xffffffc8
   13b84:	mov	r1, r9
   13b88:	mov	r0, r6
   13b8c:	cmp	r8, r4
   13b90:	strbcc	r0, [r5, r8]
   13b94:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13b98:	add	r8, r8, #1
   13b9c:	and	r0, r0, r1
   13ba0:	str	r0, [fp, #-48]	; 0xffffffd0
   13ba4:	add	r7, r7, #1
   13ba8:	cmn	lr, #1
   13bac:	bne	134ec <__assert_fail@plt+0x232c>
   13bb0:	b	134f8 <__assert_fail@plt+0x2338>
   13bb4:	ldr	r1, [sp, #84]	; 0x54
   13bb8:	mov	sl, #0
   13bbc:	mov	r9, #0
   13bc0:	tst	r1, #1
   13bc4:	mov	r1, #0
   13bc8:	beq	137c0 <__assert_fail@plt+0x2600>
   13bcc:	b	13808 <__assert_fail@plt+0x2648>
   13bd0:	ldr	r0, [sp, #36]	; 0x24
   13bd4:	mov	r6, #0
   13bd8:	mov	sl, #0
   13bdc:	mov	r9, #0
   13be0:	cmp	r0, #0
   13be4:	beq	137c0 <__assert_fail@plt+0x2600>
   13be8:	b	13ba4 <__assert_fail@plt+0x29e4>
   13bec:	mov	r9, #1
   13bf0:	b	137c0 <__assert_fail@plt+0x2600>
   13bf4:	mov	r0, #0
   13bf8:	cmn	lr, #1
   13bfc:	sub	r4, fp, #40	; 0x28
   13c00:	str	r0, [fp, #-36]	; 0xffffffdc
   13c04:	str	r0, [fp, #-40]	; 0xffffffd8
   13c08:	bne	13c1c <__assert_fail@plt+0x2a5c>
   13c0c:	mov	r0, ip
   13c10:	bl	11094 <strlen@plt>
   13c14:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13c18:	mov	lr, r0
   13c1c:	ldr	r0, [sp, #72]	; 0x48
   13c20:	mov	r9, #1
   13c24:	mov	r2, #0
   13c28:	str	lr, [sp, #28]
   13c2c:	add	r0, r0, r7
   13c30:	str	r0, [sp, #20]
   13c34:	b	13c78 <__assert_fail@plt+0x2ab8>
   13c38:	ldr	r5, [sp, #44]	; 0x2c
   13c3c:	add	r5, r0, r5
   13c40:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13c44:	bl	10fd4 <iswprint@plt>
   13c48:	cmp	r0, #0
   13c4c:	sub	r4, fp, #40	; 0x28
   13c50:	movwne	r0, #1
   13c54:	and	r9, r9, r0
   13c58:	mov	r0, r4
   13c5c:	bl	10fa4 <mbsinit@plt>
   13c60:	mov	r2, r5
   13c64:	ldr	lr, [sp, #28]
   13c68:	ldr	r5, [fp, #-84]	; 0xffffffac
   13c6c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13c70:	cmp	r0, #0
   13c74:	bne	13b08 <__assert_fail@plt+0x2948>
   13c78:	add	r0, r2, r7
   13c7c:	str	r2, [sp, #44]	; 0x2c
   13c80:	mov	r3, r4
   13c84:	add	r1, ip, r0
   13c88:	str	r0, [sp, #24]
   13c8c:	sub	r2, lr, r0
   13c90:	sub	r0, fp, #44	; 0x2c
   13c94:	bl	16f28 <__assert_fail@plt+0x5d68>
   13c98:	cmp	r0, #0
   13c9c:	beq	14040 <__assert_fail@plt+0x2e80>
   13ca0:	cmn	r0, #1
   13ca4:	beq	13ffc <__assert_fail@plt+0x2e3c>
   13ca8:	ldr	lr, [sp, #28]
   13cac:	cmn	r0, #2
   13cb0:	beq	14004 <__assert_fail@plt+0x2e44>
   13cb4:	ldr	r2, [sp, #64]	; 0x40
   13cb8:	ldr	r4, [sp, #88]	; 0x58
   13cbc:	ldr	ip, [sp, #84]	; 0x54
   13cc0:	cmp	r0, #2
   13cc4:	mov	r1, #0
   13cc8:	movwcc	r1, #1
   13ccc:	eor	r2, r2, #1
   13cd0:	orrs	r1, r2, r1
   13cd4:	bne	13c38 <__assert_fail@plt+0x2a78>
   13cd8:	ldr	r1, [sp, #44]	; 0x2c
   13cdc:	ldr	r2, [sp, #20]
   13ce0:	add	r1, r2, r1
   13ce4:	sub	r2, r0, #1
   13ce8:	b	13cf8 <__assert_fail@plt+0x2b38>
   13cec:	add	r1, r1, #1
   13cf0:	subs	r2, r2, #1
   13cf4:	beq	13c38 <__assert_fail@plt+0x2a78>
   13cf8:	ldrb	r3, [r1]
   13cfc:	sub	r3, r3, #91	; 0x5b
   13d00:	cmp	r3, #33	; 0x21
   13d04:	bhi	13cec <__assert_fail@plt+0x2b2c>
   13d08:	add	r5, pc, #0
   13d0c:	ldr	pc, [r5, r3, lsl #2]
   13d10:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13d14:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13d18:	andeq	r3, r1, ip, ror #25
   13d1c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13d20:	andeq	r3, r1, ip, ror #25
   13d24:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13d28:	andeq	r3, r1, ip, ror #25
   13d2c:	andeq	r3, r1, ip, ror #25
   13d30:	andeq	r3, r1, ip, ror #25
   13d34:	andeq	r3, r1, ip, ror #25
   13d38:	andeq	r3, r1, ip, ror #25
   13d3c:	andeq	r3, r1, ip, ror #25
   13d40:	andeq	r3, r1, ip, ror #25
   13d44:	andeq	r3, r1, ip, ror #25
   13d48:	andeq	r3, r1, ip, ror #25
   13d4c:	andeq	r3, r1, ip, ror #25
   13d50:	andeq	r3, r1, ip, ror #25
   13d54:	andeq	r3, r1, ip, ror #25
   13d58:	andeq	r3, r1, ip, ror #25
   13d5c:	andeq	r3, r1, ip, ror #25
   13d60:	andeq	r3, r1, ip, ror #25
   13d64:	andeq	r3, r1, ip, ror #25
   13d68:	andeq	r3, r1, ip, ror #25
   13d6c:	andeq	r3, r1, ip, ror #25
   13d70:	andeq	r3, r1, ip, ror #25
   13d74:	andeq	r3, r1, ip, ror #25
   13d78:	andeq	r3, r1, ip, ror #25
   13d7c:	andeq	r3, r1, ip, ror #25
   13d80:	andeq	r3, r1, ip, ror #25
   13d84:	andeq	r3, r1, ip, ror #25
   13d88:	andeq	r3, r1, ip, ror #25
   13d8c:	andeq	r3, r1, ip, ror #25
   13d90:	andeq	r3, r1, ip, ror #25
   13d94:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13d98:	mov	r8, r0
   13d9c:	b	137c0 <__assert_fail@plt+0x2600>
   13da0:	ldr	r0, [sp, #32]
   13da4:	cmp	r0, #0
   13da8:	beq	13e48 <__assert_fail@plt+0x2c88>
   13dac:	add	r0, r7, #2
   13db0:	cmp	r0, lr
   13db4:	bcs	13e48 <__assert_fail@plt+0x2c88>
   13db8:	add	r1, r7, ip
   13dbc:	ldrb	r1, [r1, #1]
   13dc0:	cmp	r1, #63	; 0x3f
   13dc4:	bne	13e48 <__assert_fail@plt+0x2c88>
   13dc8:	ldrb	r9, [ip, r0]
   13dcc:	sub	r2, r9, #33	; 0x21
   13dd0:	cmp	r2, #29
   13dd4:	bhi	13e48 <__assert_fail@plt+0x2c88>
   13dd8:	movw	r1, #20929	; 0x51c1
   13ddc:	mov	r3, #1
   13de0:	movt	r1, #14336	; 0x3800
   13de4:	tst	r1, r3, lsl r2
   13de8:	beq	13e48 <__assert_fail@plt+0x2c88>
   13dec:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13df0:	tst	r1, #1
   13df4:	bne	14118 <__assert_fail@plt+0x2f58>
   13df8:	cmp	r8, r4
   13dfc:	add	r2, r8, #1
   13e00:	mov	r6, r9
   13e04:	mov	r7, r0
   13e08:	mov	r9, #0
   13e0c:	movcc	r1, #63	; 0x3f
   13e10:	strbcc	r1, [r5, r8]
   13e14:	cmp	r2, r4
   13e18:	movcc	r1, #34	; 0x22
   13e1c:	strbcc	r1, [r5, r2]
   13e20:	add	r2, r8, #2
   13e24:	cmp	r2, r4
   13e28:	movcc	r1, #34	; 0x22
   13e2c:	strbcc	r1, [r5, r2]
   13e30:	add	r2, r8, #3
   13e34:	add	r8, r8, #4
   13e38:	cmp	r2, r4
   13e3c:	movcc	r1, #63	; 0x3f
   13e40:	strbcc	r1, [r5, r2]
   13e44:	b	137c0 <__assert_fail@plt+0x2600>
   13e48:	mov	r9, #0
   13e4c:	b	137c0 <__assert_fail@plt+0x2600>
   13e50:	ldr	lr, [sp, #28]
   13e54:	ldr	r4, [fp, #-56]	; 0xffffffc8
   13e58:	add	r1, r2, r7
   13e5c:	mov	r2, #0
   13e60:	str	r1, [sp, #44]	; 0x2c
   13e64:	tst	r0, #1
   13e68:	bne	13f84 <__assert_fail@plt+0x2dc4>
   13e6c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13e70:	tst	r1, #1
   13e74:	bne	14114 <__assert_fail@plt+0x2f54>
   13e78:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13e7c:	subs	r2, r1, #2
   13e80:	movwne	r2, #1
   13e84:	orr	r2, r2, r4
   13e88:	tst	r2, #1
   13e8c:	bne	13ed0 <__assert_fail@plt+0x2d10>
   13e90:	ldr	r1, [sp, #88]	; 0x58
   13e94:	add	r2, r8, #1
   13e98:	mov	r4, #1
   13e9c:	cmp	r8, r1
   13ea0:	movcc	r1, #39	; 0x27
   13ea4:	strbcc	r1, [r5, r8]
   13ea8:	ldr	r1, [sp, #88]	; 0x58
   13eac:	cmp	r2, r1
   13eb0:	movcc	r1, #36	; 0x24
   13eb4:	strbcc	r1, [r5, r2]
   13eb8:	ldr	r1, [sp, #88]	; 0x58
   13ebc:	add	r2, r8, #2
   13ec0:	add	r8, r8, #3
   13ec4:	cmp	r2, r1
   13ec8:	movcc	r1, #39	; 0x27
   13ecc:	strbcc	r1, [r5, r2]
   13ed0:	ldr	r1, [sp, #88]	; 0x58
   13ed4:	add	r2, r8, #1
   13ed8:	cmp	r8, r1
   13edc:	movcc	r1, #92	; 0x5c
   13ee0:	strbcc	r1, [r5, r8]
   13ee4:	ldr	r1, [sp, #88]	; 0x58
   13ee8:	cmp	r2, r1
   13eec:	bcs	13f00 <__assert_fail@plt+0x2d40>
   13ef0:	uxtb	r3, r6
   13ef4:	mov	r1, #48	; 0x30
   13ef8:	orr	r3, r1, r3, lsr #6
   13efc:	strb	r3, [r5, r2]
   13f00:	ldr	r1, [sp, #88]	; 0x58
   13f04:	add	r2, r8, #2
   13f08:	add	r8, r8, #3
   13f0c:	cmp	r2, r1
   13f10:	lsrcc	r3, r6, #3
   13f14:	movcc	r1, #6
   13f18:	bficc	r3, r1, #3, #29
   13f1c:	mov	r1, #6
   13f20:	bfi	r6, r1, #3, #29
   13f24:	strbcc	r3, [r5, r2]
   13f28:	mov	r2, #1
   13f2c:	b	13fac <__assert_fail@plt+0x2dec>
   13f30:	ldr	r1, [sp, #88]	; 0x58
   13f34:	ldr	r5, [fp, #-84]	; 0xffffffac
   13f38:	ldr	r4, [sp, #88]	; 0x58
   13f3c:	cmp	r8, r1
   13f40:	movcc	r1, #39	; 0x27
   13f44:	strbcc	r1, [r5, r8]
   13f48:	add	r1, r8, #1
   13f4c:	add	r8, r8, #2
   13f50:	cmp	r1, r4
   13f54:	movcc	r4, #39	; 0x27
   13f58:	strbcc	r4, [r5, r1]
   13f5c:	mov	r4, #0
   13f60:	ldr	r1, [sp, #88]	; 0x58
   13f64:	cmp	r8, r1
   13f68:	ldr	r1, [sp, #72]	; 0x48
   13f6c:	strbcc	r6, [r5, r8]
   13f70:	add	r8, r8, #1
   13f74:	ldrb	r6, [r1, r7]
   13f78:	mov	r7, r3
   13f7c:	tst	r0, #1
   13f80:	beq	13e6c <__assert_fail@plt+0x2cac>
   13f84:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13f88:	tst	r1, #1
   13f8c:	beq	13fa4 <__assert_fail@plt+0x2de4>
   13f90:	ldr	r1, [sp, #88]	; 0x58
   13f94:	cmp	r8, r1
   13f98:	movcc	r1, #92	; 0x5c
   13f9c:	strbcc	r1, [r5, r8]
   13fa0:	add	r8, r8, #1
   13fa4:	mov	r1, #0
   13fa8:	str	r1, [fp, #-52]	; 0xffffffcc
   13fac:	ldr	r1, [sp, #44]	; 0x2c
   13fb0:	add	r3, r7, #1
   13fb4:	and	sl, r2, #1
   13fb8:	cmp	r1, r3
   13fbc:	bls	13fe0 <__assert_fail@plt+0x2e20>
   13fc0:	cmp	sl, #0
   13fc4:	mvn	r5, r4
   13fc8:	movwne	sl, #1
   13fcc:	orr	r5, r5, sl
   13fd0:	tst	r5, #1
   13fd4:	beq	13f30 <__assert_fail@plt+0x2d70>
   13fd8:	ldr	r5, [fp, #-84]	; 0xffffffac
   13fdc:	b	13f60 <__assert_fail@plt+0x2da0>
   13fe0:	str	r4, [fp, #-56]	; 0xffffffc8
   13fe4:	ldr	r4, [sp, #88]	; 0x58
   13fe8:	cmp	sl, #0
   13fec:	movwne	sl, #1
   13ff0:	cmp	sl, #0
   13ff4:	beq	13b50 <__assert_fail@plt+0x2990>
   13ff8:	b	13b84 <__assert_fail@plt+0x29c4>
   13ffc:	mov	r9, #0
   14000:	b	14040 <__assert_fail@plt+0x2e80>
   14004:	ldr	r0, [sp, #24]
   14008:	mov	r9, #0
   1400c:	cmp	lr, r0
   14010:	bls	14040 <__assert_fail@plt+0x2e80>
   14014:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14018:	ldr	r2, [sp, #44]	; 0x2c
   1401c:	add	r0, ip, r7
   14020:	ldrb	r1, [r0, r2]
   14024:	cmp	r1, #0
   14028:	beq	13b08 <__assert_fail@plt+0x2948>
   1402c:	add	r2, r2, #1
   14030:	add	r1, r7, r2
   14034:	cmp	r1, lr
   14038:	bcc	14020 <__assert_fail@plt+0x2e60>
   1403c:	b	13b08 <__assert_fail@plt+0x2948>
   14040:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14044:	ldr	r2, [sp, #44]	; 0x2c
   14048:	b	13b08 <__assert_fail@plt+0x2948>
   1404c:	mov	lr, r7
   14050:	b	14058 <__assert_fail@plt+0x2e98>
   14054:	mvn	lr, #0
   14058:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1405c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14060:	eor	r0, r1, #2
   14064:	orr	r0, r0, r8
   14068:	clz	r0, r0
   1406c:	lsr	r0, r0, #5
   14070:	tst	r2, r0
   14074:	bne	14118 <__assert_fail@plt+0x2f58>
   14078:	subs	r0, r1, #2
   1407c:	movwne	r0, #1
   14080:	orr	r0, r2, r0
   14084:	tst	r0, #1
   14088:	ldreq	r0, [sp, #60]	; 0x3c
   1408c:	eoreq	r0, r0, #1
   14090:	tsteq	r0, #1
   14094:	bne	141ac <__assert_fail@plt+0x2fec>
   14098:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1409c:	mov	sl, lr
   140a0:	tst	r0, #1
   140a4:	bne	14178 <__assert_fail@plt+0x2fb8>
   140a8:	ldr	r6, [sp, #56]	; 0x38
   140ac:	mov	r9, #0
   140b0:	cmp	r6, #0
   140b4:	beq	141a4 <__assert_fail@plt+0x2fe4>
   140b8:	ldr	r0, [sp, #84]	; 0x54
   140bc:	mov	r1, #0
   140c0:	mov	r7, #2
   140c4:	cmp	r4, #0
   140c8:	str	r1, [fp, #-48]	; 0xffffffd0
   140cc:	mov	r1, #0
   140d0:	str	r1, [fp, #-76]	; 0xffffffb4
   140d4:	beq	13274 <__assert_fail@plt+0x20b4>
   140d8:	b	141ac <__assert_fail@plt+0x2fec>
   140dc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   140e0:	ldr	r1, [fp, #12]
   140e4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   140e8:	mov	lr, r4
   140ec:	mov	r4, r6
   140f0:	b	14138 <__assert_fail@plt+0x2f78>
   140f4:	tst	ip, #1
   140f8:	ldr	r5, [fp, #-84]	; 0xffffffac
   140fc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14100:	ldr	r1, [fp, #12]
   14104:	mov	r0, #2
   14108:	movwne	r0, #4
   1410c:	mov	r2, r0
   14110:	b	14138 <__assert_fail@plt+0x2f78>
   14114:	ldr	r4, [sp, #88]	; 0x58
   14118:	ldr	r1, [sp, #84]	; 0x54
   1411c:	mov	r0, #2
   14120:	tst	r1, #1
   14124:	movwne	r0, #4
   14128:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1412c:	ldr	r1, [fp, #12]
   14130:	cmp	r2, #2
   14134:	moveq	r2, r0
   14138:	mov	r0, #0
   1413c:	bic	r1, r1, #2
   14140:	str	r2, [sp]
   14144:	mov	r2, ip
   14148:	mov	r3, lr
   1414c:	str	r0, [sp, #8]
   14150:	ldr	r0, [sp, #76]	; 0x4c
   14154:	str	r1, [sp, #4]
   14158:	mov	r1, r4
   1415c:	str	r0, [sp, #12]
   14160:	ldr	r0, [sp, #80]	; 0x50
   14164:	str	r0, [sp, #16]
   14168:	mov	r0, r5
   1416c:	bl	131e4 <__assert_fail@plt+0x2024>
   14170:	mov	r8, r0
   14174:	b	141f8 <__assert_fail@plt+0x3038>
   14178:	mov	r0, #5
   1417c:	ldr	r1, [sp, #56]	; 0x38
   14180:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14184:	mov	r3, sl
   14188:	str	r0, [sp]
   1418c:	ldr	r0, [fp, #12]
   14190:	str	r0, [sp, #4]
   14194:	ldr	r0, [fp, #16]
   14198:	str	r0, [sp, #8]
   1419c:	ldr	r0, [sp, #76]	; 0x4c
   141a0:	b	1415c <__assert_fail@plt+0x2f9c>
   141a4:	mov	r0, #0
   141a8:	str	r0, [fp, #-76]	; 0xffffffb4
   141ac:	ldr	r1, [fp, #-88]	; 0xffffffa8
   141b0:	cmp	r1, #0
   141b4:	beq	141ec <__assert_fail@plt+0x302c>
   141b8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   141bc:	tst	r0, #1
   141c0:	bne	141ec <__assert_fail@plt+0x302c>
   141c4:	ldrb	r0, [r1]
   141c8:	cmp	r0, #0
   141cc:	beq	141ec <__assert_fail@plt+0x302c>
   141d0:	add	r1, r1, #1
   141d4:	cmp	r8, r4
   141d8:	strbcc	r0, [r5, r8]
   141dc:	add	r8, r8, #1
   141e0:	ldrb	r0, [r1], #1
   141e4:	cmp	r0, #0
   141e8:	bne	141d4 <__assert_fail@plt+0x3014>
   141ec:	cmp	r8, r4
   141f0:	movcc	r0, #0
   141f4:	strbcc	r0, [r5, r8]
   141f8:	mov	r0, r8
   141fc:	sub	sp, fp, #28
   14200:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14204:	mov	r0, #4
   14208:	b	14128 <__assert_fail@plt+0x2f68>
   1420c:	bl	111a8 <abort@plt>
   14210:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14214:	add	fp, sp, #28
   14218:	sub	sp, sp, #28
   1421c:	movw	r5, #37256	; 0x9188
   14220:	cmp	r2, #0
   14224:	mov	r4, r1
   14228:	mov	r7, r0
   1422c:	str	r0, [sp, #20]
   14230:	movt	r5, #2
   14234:	movne	r5, r2
   14238:	bl	110ac <__errno_location@plt>
   1423c:	mov	sl, r0
   14240:	ldr	r2, [r5, #40]	; 0x28
   14244:	ldr	r3, [r5, #44]	; 0x2c
   14248:	ldm	r5, {r0, r1}
   1424c:	orr	r8, r1, #1
   14250:	add	r9, r5, #8
   14254:	mov	r1, #0
   14258:	ldr	r6, [sl]
   1425c:	stm	sp, {r0, r8, r9}
   14260:	mov	r0, #0
   14264:	str	r2, [sp, #12]
   14268:	str	r3, [sp, #16]
   1426c:	mov	r2, r7
   14270:	mov	r3, r4
   14274:	str	r6, [sp, #24]
   14278:	mov	r6, r4
   1427c:	bl	131e4 <__assert_fail@plt+0x2024>
   14280:	add	r7, r0, #1
   14284:	mov	r0, r7
   14288:	bl	1543c <__assert_fail@plt+0x427c>
   1428c:	mov	r4, r0
   14290:	ldr	r0, [r5]
   14294:	ldr	r2, [r5, #44]	; 0x2c
   14298:	ldr	r1, [r5, #40]	; 0x28
   1429c:	mov	r3, r6
   142a0:	stm	sp, {r0, r8, r9}
   142a4:	str	r2, [sp, #16]
   142a8:	ldr	r2, [sp, #20]
   142ac:	str	r1, [sp, #12]
   142b0:	mov	r0, r4
   142b4:	mov	r1, r7
   142b8:	bl	131e4 <__assert_fail@plt+0x2024>
   142bc:	ldr	r0, [sp, #24]
   142c0:	str	r0, [sl]
   142c4:	mov	r0, r4
   142c8:	sub	sp, fp, #28
   142cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142d4:	add	fp, sp, #28
   142d8:	sub	sp, sp, #36	; 0x24
   142dc:	movw	r8, #37256	; 0x9188
   142e0:	cmp	r3, #0
   142e4:	mov	r4, r2
   142e8:	str	r2, [sp, #24]
   142ec:	mov	r5, r1
   142f0:	mov	r6, r0
   142f4:	str	r0, [sp, #20]
   142f8:	movt	r8, #2
   142fc:	movne	r8, r3
   14300:	bl	110ac <__errno_location@plt>
   14304:	str	r0, [sp, #28]
   14308:	ldr	r1, [r8, #40]	; 0x28
   1430c:	ldr	r2, [r8, #44]	; 0x2c
   14310:	ldr	r7, [r0]
   14314:	cmp	r4, #0
   14318:	add	sl, r8, #8
   1431c:	mov	r0, #0
   14320:	ldm	r8, {r3, r9}
   14324:	orreq	r9, r9, #1
   14328:	stm	sp, {r3, r9, sl}
   1432c:	str	r1, [sp, #12]
   14330:	str	r2, [sp, #16]
   14334:	mov	r1, #0
   14338:	mov	r2, r6
   1433c:	mov	r3, r5
   14340:	str	r7, [sp, #32]
   14344:	mov	r7, r5
   14348:	bl	131e4 <__assert_fail@plt+0x2024>
   1434c:	add	r4, r0, #1
   14350:	mov	r5, r0
   14354:	mov	r0, r4
   14358:	bl	1543c <__assert_fail@plt+0x427c>
   1435c:	mov	r6, r0
   14360:	ldr	r0, [r8]
   14364:	ldr	r2, [r8, #44]	; 0x2c
   14368:	ldr	r1, [r8, #40]	; 0x28
   1436c:	mov	r3, r7
   14370:	stm	sp, {r0, r9, sl}
   14374:	str	r2, [sp, #16]
   14378:	ldr	r2, [sp, #20]
   1437c:	str	r1, [sp, #12]
   14380:	mov	r0, r6
   14384:	mov	r1, r4
   14388:	bl	131e4 <__assert_fail@plt+0x2024>
   1438c:	ldr	r0, [sp, #24]
   14390:	ldr	r1, [sp, #32]
   14394:	ldr	r2, [sp, #28]
   14398:	cmp	r0, #0
   1439c:	str	r1, [r2]
   143a0:	strne	r5, [r0]
   143a4:	mov	r0, r6
   143a8:	sub	sp, fp, #28
   143ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   143b4:	add	fp, sp, #24
   143b8:	movw	r5, #37132	; 0x910c
   143bc:	movw	r8, #37128	; 0x9108
   143c0:	movt	r5, #2
   143c4:	movt	r8, #2
   143c8:	ldr	r0, [r5]
   143cc:	ldr	r4, [r8]
   143d0:	cmp	r0, #2
   143d4:	blt	14400 <__assert_fail@plt+0x3240>
   143d8:	add	r7, r4, #12
   143dc:	mov	r6, #0
   143e0:	ldr	r0, [r7, r6, lsl #3]
   143e4:	bl	12220 <__assert_fail@plt+0x1060>
   143e8:	ldr	r1, [r5]
   143ec:	add	r2, r6, #2
   143f0:	add	r0, r6, #1
   143f4:	mov	r6, r0
   143f8:	cmp	r2, r1
   143fc:	blt	143e0 <__assert_fail@plt+0x3220>
   14400:	ldr	r0, [r4, #4]
   14404:	movw	r9, #37304	; 0x91b8
   14408:	movw	r7, #37136	; 0x9110
   1440c:	movt	r9, #2
   14410:	movt	r7, #2
   14414:	cmp	r0, r9
   14418:	beq	14428 <__assert_fail@plt+0x3268>
   1441c:	bl	12220 <__assert_fail@plt+0x1060>
   14420:	mov	r0, #256	; 0x100
   14424:	stm	r7, {r0, r9}
   14428:	cmp	r4, r7
   1442c:	beq	1443c <__assert_fail@plt+0x327c>
   14430:	mov	r0, r4
   14434:	bl	12220 <__assert_fail@plt+0x1060>
   14438:	str	r7, [r8]
   1443c:	mov	r0, #1
   14440:	str	r0, [r5]
   14444:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14448:	movw	r3, #37256	; 0x9188
   1444c:	mvn	r2, #0
   14450:	movt	r3, #2
   14454:	b	14458 <__assert_fail@plt+0x3298>
   14458:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1445c:	add	fp, sp, #28
   14460:	sub	sp, sp, #44	; 0x2c
   14464:	mov	r7, r3
   14468:	str	r2, [sp, #36]	; 0x24
   1446c:	str	r1, [sp, #32]
   14470:	mov	r5, r0
   14474:	bl	110ac <__errno_location@plt>
   14478:	cmp	r5, #0
   1447c:	bmi	145ec <__assert_fail@plt+0x342c>
   14480:	cmn	r5, #-2147483647	; 0x80000001
   14484:	beq	145ec <__assert_fail@plt+0x342c>
   14488:	movw	r8, #37132	; 0x910c
   1448c:	movw	r4, #37128	; 0x9108
   14490:	str	r0, [sp, #28]
   14494:	ldr	r0, [r0]
   14498:	movt	r8, #2
   1449c:	movt	r4, #2
   144a0:	ldr	r1, [r8]
   144a4:	ldr	r6, [r4]
   144a8:	str	r0, [sp, #24]
   144ac:	cmp	r1, r5
   144b0:	ble	144bc <__assert_fail@plt+0x32fc>
   144b4:	mov	sl, r6
   144b8:	b	14528 <__assert_fail@plt+0x3368>
   144bc:	movw	r9, #37136	; 0x9110
   144c0:	mov	r0, #8
   144c4:	str	r1, [fp, #-32]	; 0xffffffe0
   144c8:	sub	r1, r5, r1
   144cc:	mvn	r3, #-2147483648	; 0x80000000
   144d0:	movt	r9, #2
   144d4:	str	r0, [sp]
   144d8:	add	r2, r1, #1
   144dc:	sub	r1, fp, #32
   144e0:	subs	r0, r6, r9
   144e4:	movne	r0, r6
   144e8:	bl	1563c <__assert_fail@plt+0x447c>
   144ec:	mov	sl, r0
   144f0:	cmp	r6, r9
   144f4:	str	r0, [r4]
   144f8:	bne	14504 <__assert_fail@plt+0x3344>
   144fc:	ldrd	r0, [r9]
   14500:	stm	sl, {r0, r1}
   14504:	ldr	r1, [r8]
   14508:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1450c:	add	r0, sl, r1, lsl #3
   14510:	sub	r1, r2, r1
   14514:	lsl	r2, r1, #3
   14518:	mov	r1, #0
   1451c:	bl	110dc <memset@plt>
   14520:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14524:	str	r0, [r8]
   14528:	mov	r9, sl
   1452c:	ldm	r7, {r0, r1}
   14530:	orr	r8, r1, #1
   14534:	add	r1, r7, #8
   14538:	ldr	r2, [r7, #40]	; 0x28
   1453c:	ldr	r3, [r7, #44]	; 0x2c
   14540:	ldr	r6, [r9, r5, lsl #3]!
   14544:	str	r1, [sp, #20]
   14548:	ldr	r4, [r9, #4]!
   1454c:	stm	sp, {r0, r8}
   14550:	add	r0, sp, #8
   14554:	stm	r0, {r1, r2, r3}
   14558:	ldr	r2, [sp, #32]
   1455c:	ldr	r3, [sp, #36]	; 0x24
   14560:	mov	r1, r6
   14564:	mov	r0, r4
   14568:	bl	131e4 <__assert_fail@plt+0x2024>
   1456c:	cmp	r6, r0
   14570:	bhi	145d4 <__assert_fail@plt+0x3414>
   14574:	add	r6, r0, #1
   14578:	movw	r0, #37304	; 0x91b8
   1457c:	movt	r0, #2
   14580:	str	r6, [sl, r5, lsl #3]
   14584:	cmp	r4, r0
   14588:	beq	14594 <__assert_fail@plt+0x33d4>
   1458c:	mov	r0, r4
   14590:	bl	12220 <__assert_fail@plt+0x1060>
   14594:	mov	r0, r6
   14598:	bl	1543c <__assert_fail@plt+0x427c>
   1459c:	str	r0, [r9]
   145a0:	mov	r4, r0
   145a4:	add	r3, sp, #8
   145a8:	ldr	r0, [r7]
   145ac:	ldr	r1, [r7, #40]	; 0x28
   145b0:	ldr	r2, [r7, #44]	; 0x2c
   145b4:	stm	sp, {r0, r8}
   145b8:	ldr	r0, [sp, #20]
   145bc:	stm	r3, {r0, r1, r2}
   145c0:	ldr	r2, [sp, #32]
   145c4:	ldr	r3, [sp, #36]	; 0x24
   145c8:	mov	r0, r4
   145cc:	mov	r1, r6
   145d0:	bl	131e4 <__assert_fail@plt+0x2024>
   145d4:	ldr	r0, [sp, #28]
   145d8:	ldr	r1, [sp, #24]
   145dc:	str	r1, [r0]
   145e0:	mov	r0, r4
   145e4:	sub	sp, fp, #28
   145e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145ec:	bl	111a8 <abort@plt>
   145f0:	movw	r3, #37256	; 0x9188
   145f4:	movt	r3, #2
   145f8:	b	14458 <__assert_fail@plt+0x3298>
   145fc:	movw	r3, #37256	; 0x9188
   14600:	mov	r1, r0
   14604:	mov	r0, #0
   14608:	mvn	r2, #0
   1460c:	movt	r3, #2
   14610:	b	14458 <__assert_fail@plt+0x3298>
   14614:	movw	r3, #37256	; 0x9188
   14618:	mov	r2, r1
   1461c:	mov	r1, r0
   14620:	mov	r0, #0
   14624:	movt	r3, #2
   14628:	b	14458 <__assert_fail@plt+0x3298>
   1462c:	push	{fp, lr}
   14630:	mov	fp, sp
   14634:	sub	sp, sp, #48	; 0x30
   14638:	vmov.i32	q8, #0	; 0x00000000
   1463c:	mov	ip, #32
   14640:	mov	r3, sp
   14644:	mov	lr, r2
   14648:	cmp	r1, #10
   1464c:	add	r2, r3, #16
   14650:	vst1.64	{d16-d17}, [r3], ip
   14654:	vst1.64	{d16-d17}, [r2]
   14658:	vst1.64	{d16-d17}, [r3]
   1465c:	beq	1467c <__assert_fail@plt+0x34bc>
   14660:	str	r1, [sp]
   14664:	mov	r3, sp
   14668:	mov	r1, lr
   1466c:	mvn	r2, #0
   14670:	bl	14458 <__assert_fail@plt+0x3298>
   14674:	mov	sp, fp
   14678:	pop	{fp, pc}
   1467c:	bl	111a8 <abort@plt>
   14680:	push	{r4, sl, fp, lr}
   14684:	add	fp, sp, #8
   14688:	sub	sp, sp, #48	; 0x30
   1468c:	vmov.i32	q8, #0	; 0x00000000
   14690:	mov	ip, r3
   14694:	mov	r3, sp
   14698:	mov	lr, #32
   1469c:	cmp	r1, #10
   146a0:	add	r4, r3, #16
   146a4:	vst1.64	{d16-d17}, [r3], lr
   146a8:	vst1.64	{d16-d17}, [r4]
   146ac:	vst1.64	{d16-d17}, [r3]
   146b0:	beq	146d0 <__assert_fail@plt+0x3510>
   146b4:	str	r1, [sp]
   146b8:	mov	r1, r2
   146bc:	mov	r3, sp
   146c0:	mov	r2, ip
   146c4:	bl	14458 <__assert_fail@plt+0x3298>
   146c8:	sub	sp, fp, #8
   146cc:	pop	{r4, sl, fp, pc}
   146d0:	bl	111a8 <abort@plt>
   146d4:	push	{fp, lr}
   146d8:	mov	fp, sp
   146dc:	sub	sp, sp, #48	; 0x30
   146e0:	vmov.i32	q8, #0	; 0x00000000
   146e4:	mov	r3, sp
   146e8:	mov	ip, #32
   146ec:	cmp	r0, #10
   146f0:	add	r2, r3, #16
   146f4:	vst1.64	{d16-d17}, [r3], ip
   146f8:	vst1.64	{d16-d17}, [r2]
   146fc:	vst1.64	{d16-d17}, [r3]
   14700:	beq	14720 <__assert_fail@plt+0x3560>
   14704:	str	r0, [sp]
   14708:	mov	r3, sp
   1470c:	mov	r0, #0
   14710:	mvn	r2, #0
   14714:	bl	14458 <__assert_fail@plt+0x3298>
   14718:	mov	sp, fp
   1471c:	pop	{fp, pc}
   14720:	bl	111a8 <abort@plt>
   14724:	push	{fp, lr}
   14728:	mov	fp, sp
   1472c:	sub	sp, sp, #48	; 0x30
   14730:	vmov.i32	q8, #0	; 0x00000000
   14734:	mov	r3, sp
   14738:	mov	ip, #32
   1473c:	cmp	r0, #10
   14740:	add	lr, r3, #16
   14744:	vst1.64	{d16-d17}, [r3], ip
   14748:	vst1.64	{d16-d17}, [lr]
   1474c:	vst1.64	{d16-d17}, [r3]
   14750:	beq	1476c <__assert_fail@plt+0x35ac>
   14754:	str	r0, [sp]
   14758:	mov	r3, sp
   1475c:	mov	r0, #0
   14760:	bl	14458 <__assert_fail@plt+0x3298>
   14764:	mov	sp, fp
   14768:	pop	{fp, pc}
   1476c:	bl	111a8 <abort@plt>
   14770:	push	{r4, sl, fp, lr}
   14774:	add	fp, sp, #8
   14778:	sub	sp, sp, #48	; 0x30
   1477c:	mov	lr, r0
   14780:	movw	r0, #37256	; 0x9188
   14784:	mov	ip, r1
   14788:	mov	r1, #32
   1478c:	mov	r4, #1
   14790:	movt	r0, #2
   14794:	add	r3, r0, #16
   14798:	vld1.64	{d16-d17}, [r0], r1
   1479c:	vld1.64	{d20-d21}, [r0]
   147a0:	vld1.64	{d18-d19}, [r3]
   147a4:	mov	r3, sp
   147a8:	add	r0, r3, #32
   147ac:	add	r1, r3, #16
   147b0:	vst1.64	{d20-d21}, [r0]
   147b4:	mov	r0, #28
   147b8:	vst1.64	{d18-d19}, [r1]
   147bc:	mov	r1, r3
   147c0:	and	r0, r0, r2, lsr #3
   147c4:	and	r2, r2, #31
   147c8:	vst1.64	{d16-d17}, [r1], r0
   147cc:	ldr	r0, [r1, #8]
   147d0:	bic	r4, r4, r0, lsr r2
   147d4:	eor	r0, r0, r4, lsl r2
   147d8:	mov	r2, ip
   147dc:	str	r0, [r1, #8]
   147e0:	mov	r0, #0
   147e4:	mov	r1, lr
   147e8:	bl	14458 <__assert_fail@plt+0x3298>
   147ec:	sub	sp, fp, #8
   147f0:	pop	{r4, sl, fp, pc}
   147f4:	push	{fp, lr}
   147f8:	mov	fp, sp
   147fc:	sub	sp, sp, #48	; 0x30
   14800:	mov	ip, r0
   14804:	movw	r0, #37256	; 0x9188
   14808:	mov	r2, #32
   1480c:	movt	r0, #2
   14810:	add	r3, r0, #16
   14814:	vld1.64	{d16-d17}, [r0], r2
   14818:	vld1.64	{d20-d21}, [r0]
   1481c:	vld1.64	{d18-d19}, [r3]
   14820:	mov	r3, sp
   14824:	add	r0, r3, #32
   14828:	add	r2, r3, #16
   1482c:	vst1.64	{d20-d21}, [r0]
   14830:	mov	r0, #28
   14834:	vst1.64	{d18-d19}, [r2]
   14838:	mov	r2, r3
   1483c:	and	r0, r0, r1, lsr #3
   14840:	and	r1, r1, #31
   14844:	vst1.64	{d16-d17}, [r2], r0
   14848:	mov	r0, #1
   1484c:	ldr	lr, [r2, #8]
   14850:	bic	r0, r0, lr, lsr r1
   14854:	eor	r0, lr, r0, lsl r1
   14858:	mov	r1, ip
   1485c:	str	r0, [r2, #8]
   14860:	mov	r0, #0
   14864:	mvn	r2, #0
   14868:	bl	14458 <__assert_fail@plt+0x3298>
   1486c:	mov	sp, fp
   14870:	pop	{fp, pc}
   14874:	push	{fp, lr}
   14878:	mov	fp, sp
   1487c:	sub	sp, sp, #48	; 0x30
   14880:	mov	r1, r0
   14884:	movw	r0, #37256	; 0x9188
   14888:	mov	r3, #32
   1488c:	movt	r0, #2
   14890:	add	r2, r0, #16
   14894:	vld1.64	{d16-d17}, [r0], r3
   14898:	mov	r3, sp
   1489c:	vld1.64	{d18-d19}, [r2]
   148a0:	vld1.64	{d20-d21}, [r0]
   148a4:	add	r2, r3, #16
   148a8:	add	r0, r3, #32
   148ac:	vst1.64	{d18-d19}, [r2]
   148b0:	vst1.64	{d20-d21}, [r0]
   148b4:	mov	r0, #12
   148b8:	mov	r2, r3
   148bc:	vst1.64	{d16-d17}, [r2], r0
   148c0:	ldr	r0, [r2]
   148c4:	orr	r0, r0, #67108864	; 0x4000000
   148c8:	str	r0, [r2]
   148cc:	mov	r0, #0
   148d0:	mvn	r2, #0
   148d4:	bl	14458 <__assert_fail@plt+0x3298>
   148d8:	mov	sp, fp
   148dc:	pop	{fp, pc}
   148e0:	push	{fp, lr}
   148e4:	mov	fp, sp
   148e8:	sub	sp, sp, #48	; 0x30
   148ec:	mov	ip, r1
   148f0:	mov	r1, r0
   148f4:	movw	r0, #37256	; 0x9188
   148f8:	mov	r2, #32
   148fc:	movt	r0, #2
   14900:	add	r3, r0, #16
   14904:	vld1.64	{d16-d17}, [r0], r2
   14908:	vld1.64	{d18-d19}, [r3]
   1490c:	vld1.64	{d20-d21}, [r0]
   14910:	mov	r3, sp
   14914:	add	r2, r3, #16
   14918:	add	r0, r3, #32
   1491c:	vst1.64	{d18-d19}, [r2]
   14920:	vst1.64	{d20-d21}, [r0]
   14924:	mov	r0, #12
   14928:	mov	r2, r3
   1492c:	vst1.64	{d16-d17}, [r2], r0
   14930:	ldr	r0, [r2]
   14934:	orr	r0, r0, #67108864	; 0x4000000
   14938:	str	r0, [r2]
   1493c:	mov	r0, #0
   14940:	mov	r2, ip
   14944:	bl	14458 <__assert_fail@plt+0x3298>
   14948:	mov	sp, fp
   1494c:	pop	{fp, pc}
   14950:	push	{r4, sl, fp, lr}
   14954:	add	fp, sp, #8
   14958:	sub	sp, sp, #96	; 0x60
   1495c:	vmov.i32	q8, #0	; 0x00000000
   14960:	mov	ip, r2
   14964:	mov	r2, sp
   14968:	mov	r4, #28
   1496c:	cmp	r1, #10
   14970:	mov	r3, r2
   14974:	add	lr, r2, #16
   14978:	vst1.64	{d16-d17}, [r3], r4
   1497c:	vst1.64	{d16-d17}, [lr]
   14980:	vst1.32	{d16-d17}, [r3]
   14984:	beq	149d4 <__assert_fail@plt+0x3814>
   14988:	vld1.64	{d16-d17}, [r2], r4
   1498c:	vld1.64	{d18-d19}, [lr]
   14990:	add	r3, sp, #48	; 0x30
   14994:	vld1.32	{d20-d21}, [r2]
   14998:	add	r2, r3, #20
   1499c:	add	r4, r3, #4
   149a0:	vst1.32	{d18-d19}, [r2]
   149a4:	add	r2, r3, #32
   149a8:	vst1.32	{d16-d17}, [r4]
   149ac:	vst1.32	{d20-d21}, [r2]
   149b0:	str	r1, [sp, #48]	; 0x30
   149b4:	mvn	r2, #0
   149b8:	ldr	r1, [sp, #60]	; 0x3c
   149bc:	orr	r1, r1, #67108864	; 0x4000000
   149c0:	str	r1, [sp, #60]	; 0x3c
   149c4:	mov	r1, ip
   149c8:	bl	14458 <__assert_fail@plt+0x3298>
   149cc:	sub	sp, fp, #8
   149d0:	pop	{r4, sl, fp, pc}
   149d4:	bl	111a8 <abort@plt>
   149d8:	push	{r4, r5, r6, sl, fp, lr}
   149dc:	add	fp, sp, #16
   149e0:	sub	sp, sp, #48	; 0x30
   149e4:	mov	ip, r3
   149e8:	movw	r3, #37256	; 0x9188
   149ec:	mov	r6, #32
   149f0:	cmp	r1, #0
   149f4:	mov	r4, sp
   149f8:	movt	r3, #2
   149fc:	cmpne	r2, #0
   14a00:	add	r5, r4, #16
   14a04:	add	lr, r3, #16
   14a08:	vld1.64	{d16-d17}, [r3], r6
   14a0c:	vld1.64	{d18-d19}, [lr]
   14a10:	vld1.64	{d20-d21}, [r3]
   14a14:	mov	r3, #10
   14a18:	vst1.64	{d16-d17}, [r4], r6
   14a1c:	vst1.64	{d18-d19}, [r5]
   14a20:	vst1.64	{d20-d21}, [r4]
   14a24:	str	r3, [sp]
   14a28:	bne	14a30 <__assert_fail@plt+0x3870>
   14a2c:	bl	111a8 <abort@plt>
   14a30:	str	r2, [sp, #44]	; 0x2c
   14a34:	str	r1, [sp, #40]	; 0x28
   14a38:	mov	r3, sp
   14a3c:	mov	r1, ip
   14a40:	mvn	r2, #0
   14a44:	bl	14458 <__assert_fail@plt+0x3298>
   14a48:	sub	sp, fp, #16
   14a4c:	pop	{r4, r5, r6, sl, fp, pc}
   14a50:	push	{r4, r5, r6, sl, fp, lr}
   14a54:	add	fp, sp, #16
   14a58:	sub	sp, sp, #48	; 0x30
   14a5c:	mov	lr, r3
   14a60:	movw	r3, #37256	; 0x9188
   14a64:	mov	r6, #32
   14a68:	cmp	r1, #0
   14a6c:	mov	r4, sp
   14a70:	movt	r3, #2
   14a74:	cmpne	r2, #0
   14a78:	add	r5, r4, #16
   14a7c:	add	ip, r3, #16
   14a80:	vld1.64	{d16-d17}, [r3], r6
   14a84:	vld1.64	{d18-d19}, [ip]
   14a88:	vld1.64	{d20-d21}, [r3]
   14a8c:	mov	r3, #10
   14a90:	vst1.64	{d16-d17}, [r4], r6
   14a94:	vst1.64	{d18-d19}, [r5]
   14a98:	vst1.64	{d20-d21}, [r4]
   14a9c:	str	r3, [sp]
   14aa0:	bne	14aa8 <__assert_fail@plt+0x38e8>
   14aa4:	bl	111a8 <abort@plt>
   14aa8:	ldr	ip, [fp, #8]
   14aac:	str	r2, [sp, #44]	; 0x2c
   14ab0:	str	r1, [sp, #40]	; 0x28
   14ab4:	mov	r3, sp
   14ab8:	mov	r1, lr
   14abc:	mov	r2, ip
   14ac0:	bl	14458 <__assert_fail@plt+0x3298>
   14ac4:	sub	sp, fp, #16
   14ac8:	pop	{r4, r5, r6, sl, fp, pc}
   14acc:	push	{r4, sl, fp, lr}
   14ad0:	add	fp, sp, #8
   14ad4:	sub	sp, sp, #48	; 0x30
   14ad8:	movw	r3, #37256	; 0x9188
   14adc:	mov	lr, #32
   14ae0:	mov	ip, r2
   14ae4:	cmp	r0, #0
   14ae8:	movt	r3, #2
   14aec:	cmpne	r1, #0
   14af0:	add	r2, r3, #16
   14af4:	vld1.64	{d16-d17}, [r3], lr
   14af8:	vld1.64	{d20-d21}, [r3]
   14afc:	vld1.64	{d18-d19}, [r2]
   14b00:	mov	r2, sp
   14b04:	add	r4, r2, #16
   14b08:	vst1.64	{d16-d17}, [r2], lr
   14b0c:	vst1.64	{d20-d21}, [r2]
   14b10:	mov	r2, #10
   14b14:	vst1.64	{d18-d19}, [r4]
   14b18:	str	r2, [sp]
   14b1c:	bne	14b24 <__assert_fail@plt+0x3964>
   14b20:	bl	111a8 <abort@plt>
   14b24:	str	r1, [sp, #44]	; 0x2c
   14b28:	str	r0, [sp, #40]	; 0x28
   14b2c:	mov	r3, sp
   14b30:	mov	r0, #0
   14b34:	mov	r1, ip
   14b38:	mvn	r2, #0
   14b3c:	bl	14458 <__assert_fail@plt+0x3298>
   14b40:	sub	sp, fp, #8
   14b44:	pop	{r4, sl, fp, pc}
   14b48:	push	{r4, r5, fp, lr}
   14b4c:	add	fp, sp, #8
   14b50:	sub	sp, sp, #48	; 0x30
   14b54:	mov	ip, r3
   14b58:	movw	r3, #37256	; 0x9188
   14b5c:	mov	r4, #32
   14b60:	mov	lr, r2
   14b64:	cmp	r0, #0
   14b68:	movt	r3, #2
   14b6c:	cmpne	r1, #0
   14b70:	add	r2, r3, #16
   14b74:	vld1.64	{d16-d17}, [r3], r4
   14b78:	vld1.64	{d20-d21}, [r3]
   14b7c:	vld1.64	{d18-d19}, [r2]
   14b80:	mov	r2, sp
   14b84:	add	r5, r2, #16
   14b88:	vst1.64	{d16-d17}, [r2], r4
   14b8c:	vst1.64	{d20-d21}, [r2]
   14b90:	mov	r2, #10
   14b94:	vst1.64	{d18-d19}, [r5]
   14b98:	str	r2, [sp]
   14b9c:	bne	14ba4 <__assert_fail@plt+0x39e4>
   14ba0:	bl	111a8 <abort@plt>
   14ba4:	str	r1, [sp, #44]	; 0x2c
   14ba8:	str	r0, [sp, #40]	; 0x28
   14bac:	mov	r3, sp
   14bb0:	mov	r0, #0
   14bb4:	mov	r1, lr
   14bb8:	mov	r2, ip
   14bbc:	bl	14458 <__assert_fail@plt+0x3298>
   14bc0:	sub	sp, fp, #8
   14bc4:	pop	{r4, r5, fp, pc}
   14bc8:	movw	r3, #37144	; 0x9118
   14bcc:	movt	r3, #2
   14bd0:	b	14458 <__assert_fail@plt+0x3298>
   14bd4:	movw	r3, #37144	; 0x9118
   14bd8:	mov	r2, r1
   14bdc:	mov	r1, r0
   14be0:	mov	r0, #0
   14be4:	movt	r3, #2
   14be8:	b	14458 <__assert_fail@plt+0x3298>
   14bec:	movw	r3, #37144	; 0x9118
   14bf0:	mvn	r2, #0
   14bf4:	movt	r3, #2
   14bf8:	b	14458 <__assert_fail@plt+0x3298>
   14bfc:	movw	r3, #37144	; 0x9118
   14c00:	mov	r1, r0
   14c04:	mov	r0, #0
   14c08:	mvn	r2, #0
   14c0c:	movt	r3, #2
   14c10:	b	14458 <__assert_fail@plt+0x3298>
   14c14:	push	{r4, r5, fp, lr}
   14c18:	add	fp, sp, #8
   14c1c:	mov	r5, r0
   14c20:	mov	r4, r1
   14c24:	mov	r0, #0
   14c28:	mov	r2, #5
   14c2c:	mov	r1, r5
   14c30:	bl	10fb0 <dcgettext@plt>
   14c34:	cmp	r0, r5
   14c38:	popne	{r4, r5, fp, pc}
   14c3c:	bl	16ef0 <__assert_fail@plt+0x5d30>
   14c40:	ldrb	r1, [r0]
   14c44:	and	r1, r1, #223	; 0xdf
   14c48:	cmp	r1, #71	; 0x47
   14c4c:	beq	14cb4 <__assert_fail@plt+0x3af4>
   14c50:	cmp	r1, #85	; 0x55
   14c54:	bne	14d0c <__assert_fail@plt+0x3b4c>
   14c58:	ldrb	r1, [r0, #1]
   14c5c:	and	r1, r1, #223	; 0xdf
   14c60:	cmp	r1, #84	; 0x54
   14c64:	bne	14d0c <__assert_fail@plt+0x3b4c>
   14c68:	ldrb	r1, [r0, #2]
   14c6c:	and	r1, r1, #223	; 0xdf
   14c70:	cmp	r1, #70	; 0x46
   14c74:	bne	14d0c <__assert_fail@plt+0x3b4c>
   14c78:	ldrb	r1, [r0, #3]
   14c7c:	cmp	r1, #45	; 0x2d
   14c80:	bne	14d0c <__assert_fail@plt+0x3b4c>
   14c84:	ldrb	r1, [r0, #4]
   14c88:	cmp	r1, #56	; 0x38
   14c8c:	bne	14d0c <__assert_fail@plt+0x3b4c>
   14c90:	ldrb	r0, [r0, #5]
   14c94:	cmp	r0, #0
   14c98:	bne	14d0c <__assert_fail@plt+0x3b4c>
   14c9c:	ldrb	r1, [r5]
   14ca0:	movw	r2, #31706	; 0x7bda
   14ca4:	movw	r0, #31710	; 0x7bde
   14ca8:	movt	r2, #1
   14cac:	movt	r0, #1
   14cb0:	b	14d3c <__assert_fail@plt+0x3b7c>
   14cb4:	ldrb	r1, [r0, #1]
   14cb8:	and	r1, r1, #223	; 0xdf
   14cbc:	cmp	r1, #66	; 0x42
   14cc0:	bne	14d0c <__assert_fail@plt+0x3b4c>
   14cc4:	ldrb	r1, [r0, #2]
   14cc8:	cmp	r1, #49	; 0x31
   14ccc:	bne	14d0c <__assert_fail@plt+0x3b4c>
   14cd0:	ldrb	r1, [r0, #3]
   14cd4:	cmp	r1, #56	; 0x38
   14cd8:	bne	14d0c <__assert_fail@plt+0x3b4c>
   14cdc:	ldrb	r1, [r0, #4]
   14ce0:	cmp	r1, #48	; 0x30
   14ce4:	bne	14d0c <__assert_fail@plt+0x3b4c>
   14ce8:	ldrb	r1, [r0, #5]
   14cec:	cmp	r1, #51	; 0x33
   14cf0:	bne	14d0c <__assert_fail@plt+0x3b4c>
   14cf4:	ldrb	r1, [r0, #6]
   14cf8:	cmp	r1, #48	; 0x30
   14cfc:	bne	14d0c <__assert_fail@plt+0x3b4c>
   14d00:	ldrb	r0, [r0, #7]
   14d04:	cmp	r0, #0
   14d08:	beq	14d28 <__assert_fail@plt+0x3b68>
   14d0c:	movw	r1, #31700	; 0x7bd4
   14d10:	movw	r0, #31704	; 0x7bd8
   14d14:	cmp	r4, #9
   14d18:	movt	r1, #1
   14d1c:	movt	r0, #1
   14d20:	moveq	r0, r1
   14d24:	pop	{r4, r5, fp, pc}
   14d28:	ldrb	r1, [r5]
   14d2c:	movw	r2, #31714	; 0x7be2
   14d30:	movw	r0, #31718	; 0x7be6
   14d34:	movt	r2, #1
   14d38:	movt	r0, #1
   14d3c:	cmp	r1, #96	; 0x60
   14d40:	moveq	r0, r2
   14d44:	pop	{r4, r5, fp, pc}
   14d48:	mov	r1, #0
   14d4c:	mov	r2, #3
   14d50:	b	16d10 <__assert_fail@plt+0x5b50>
   14d54:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d58:	add	fp, sp, #24
   14d5c:	sub	sp, sp, #32
   14d60:	ldr	r6, [fp, #12]
   14d64:	ldr	r7, [fp, #8]
   14d68:	mov	r4, r2
   14d6c:	mov	r8, r0
   14d70:	cmp	r1, #0
   14d74:	beq	14d9c <__assert_fail@plt+0x3bdc>
   14d78:	movw	r2, #31808	; 0x7c40
   14d7c:	mov	r5, r1
   14d80:	str	r3, [sp, #4]
   14d84:	str	r4, [sp]
   14d88:	mov	r0, r8
   14d8c:	mov	r1, #1
   14d90:	movt	r2, #1
   14d94:	mov	r3, r5
   14d98:	b	14db4 <__assert_fail@plt+0x3bf4>
   14d9c:	movw	r2, #31820	; 0x7c4c
   14da0:	str	r3, [sp]
   14da4:	mov	r0, r8
   14da8:	mov	r1, #1
   14dac:	mov	r3, r4
   14db0:	movt	r2, #1
   14db4:	bl	11100 <__fprintf_chk@plt>
   14db8:	movw	r1, #31827	; 0x7c53
   14dbc:	mov	r0, #0
   14dc0:	mov	r2, #5
   14dc4:	movt	r1, #1
   14dc8:	bl	10fb0 <dcgettext@plt>
   14dcc:	movw	r2, #32545	; 0x7f21
   14dd0:	mov	r3, r0
   14dd4:	movw	r0, #2022	; 0x7e6
   14dd8:	mov	r1, #1
   14ddc:	movt	r2, #1
   14de0:	str	r0, [sp]
   14de4:	mov	r0, r8
   14de8:	bl	11100 <__fprintf_chk@plt>
   14dec:	movw	r4, #31242	; 0x7a0a
   14df0:	mov	r1, r8
   14df4:	movt	r4, #1
   14df8:	mov	r0, r4
   14dfc:	bl	10f2c <fputs_unlocked@plt>
   14e00:	movw	r1, #31831	; 0x7c57
   14e04:	mov	r0, #0
   14e08:	mov	r2, #5
   14e0c:	movt	r1, #1
   14e10:	bl	10fb0 <dcgettext@plt>
   14e14:	movw	r3, #32002	; 0x7d02
   14e18:	mov	r2, r0
   14e1c:	mov	r0, r8
   14e20:	mov	r1, #1
   14e24:	movt	r3, #1
   14e28:	bl	11100 <__fprintf_chk@plt>
   14e2c:	mov	r0, r4
   14e30:	mov	r1, r8
   14e34:	bl	10f2c <fputs_unlocked@plt>
   14e38:	cmp	r6, #9
   14e3c:	bhi	14e78 <__assert_fail@plt+0x3cb8>
   14e40:	add	r0, pc, #0
   14e44:	ldr	pc, [r0, r6, lsl #2]
   14e48:	andeq	r4, r1, r0, ror lr
   14e4c:	andeq	r4, r1, r4, lsl #29
   14e50:			; <UNDEFINED> instruction: 0x00014eb4
   14e54:	ldrdeq	r4, [r1], -ip
   14e58:	andeq	r4, r1, r4, lsl #30
   14e5c:	andeq	r4, r1, ip, lsr #30
   14e60:	andeq	r4, r1, r4, asr pc
   14e64:	andeq	r4, r1, ip, lsl #31
   14e68:	andeq	r5, r1, ip, lsr #32
   14e6c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e70:	sub	sp, fp, #24
   14e74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e78:	movw	r1, #32355	; 0x7e63
   14e7c:	movt	r1, #1
   14e80:	b	14fdc <__assert_fail@plt+0x3e1c>
   14e84:	movw	r1, #32036	; 0x7d24
   14e88:	mov	r0, #0
   14e8c:	mov	r2, #5
   14e90:	movt	r1, #1
   14e94:	bl	10fb0 <dcgettext@plt>
   14e98:	ldr	r3, [r7]
   14e9c:	mov	r2, r0
   14ea0:	mov	r0, r8
   14ea4:	mov	r1, #1
   14ea8:	sub	sp, fp, #24
   14eac:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14eb0:	b	11100 <__fprintf_chk@plt>
   14eb4:	movw	r1, #32052	; 0x7d34
   14eb8:	mov	r0, #0
   14ebc:	mov	r2, #5
   14ec0:	movt	r1, #1
   14ec4:	bl	10fb0 <dcgettext@plt>
   14ec8:	mov	r2, r0
   14ecc:	ldr	r3, [r7]
   14ed0:	ldr	r0, [r7, #4]
   14ed4:	str	r0, [sp]
   14ed8:	b	14fc8 <__assert_fail@plt+0x3e08>
   14edc:	movw	r1, #32075	; 0x7d4b
   14ee0:	mov	r0, #0
   14ee4:	mov	r2, #5
   14ee8:	movt	r1, #1
   14eec:	bl	10fb0 <dcgettext@plt>
   14ef0:	mov	r2, r0
   14ef4:	ldr	r3, [r7]
   14ef8:	ldmib	r7, {r0, r1}
   14efc:	stm	sp, {r0, r1}
   14f00:	b	14fc8 <__assert_fail@plt+0x3e08>
   14f04:	movw	r1, #32103	; 0x7d67
   14f08:	mov	r0, #0
   14f0c:	mov	r2, #5
   14f10:	movt	r1, #1
   14f14:	bl	10fb0 <dcgettext@plt>
   14f18:	ldr	r3, [r7]
   14f1c:	mov	r2, r0
   14f20:	ldmib	r7, {r0, r1, r7}
   14f24:	stm	sp, {r0, r1, r7}
   14f28:	b	14fc8 <__assert_fail@plt+0x3e08>
   14f2c:	movw	r1, #32135	; 0x7d87
   14f30:	mov	r0, #0
   14f34:	mov	r2, #5
   14f38:	movt	r1, #1
   14f3c:	bl	10fb0 <dcgettext@plt>
   14f40:	ldr	r3, [r7]
   14f44:	mov	r2, r0
   14f48:	ldmib	r7, {r0, r1, r6, r7}
   14f4c:	stm	sp, {r0, r1, r6, r7}
   14f50:	b	14fc8 <__assert_fail@plt+0x3e08>
   14f54:	movw	r1, #32171	; 0x7dab
   14f58:	mov	r0, #0
   14f5c:	mov	r2, #5
   14f60:	movt	r1, #1
   14f64:	bl	10fb0 <dcgettext@plt>
   14f68:	mov	r2, r0
   14f6c:	ldr	r3, [r7]
   14f70:	ldmib	r7, {r0, r1, r6}
   14f74:	ldr	r5, [r7, #16]
   14f78:	ldr	r7, [r7, #20]
   14f7c:	stm	sp, {r0, r1, r6}
   14f80:	str	r5, [sp, #12]
   14f84:	str	r7, [sp, #16]
   14f88:	b	14fc8 <__assert_fail@plt+0x3e08>
   14f8c:	movw	r1, #32211	; 0x7dd3
   14f90:	mov	r0, #0
   14f94:	mov	r2, #5
   14f98:	movt	r1, #1
   14f9c:	bl	10fb0 <dcgettext@plt>
   14fa0:	mov	r2, r0
   14fa4:	ldr	r3, [r7]
   14fa8:	ldmib	r7, {r0, r1, r6}
   14fac:	ldr	r5, [r7, #16]
   14fb0:	ldr	r4, [r7, #20]
   14fb4:	ldr	r7, [r7, #24]
   14fb8:	stm	sp, {r0, r1, r6}
   14fbc:	str	r5, [sp, #12]
   14fc0:	str	r4, [sp, #16]
   14fc4:	str	r7, [sp, #20]
   14fc8:	mov	r0, r8
   14fcc:	mov	r1, #1
   14fd0:	b	1507c <__assert_fail@plt+0x3ebc>
   14fd4:	movw	r1, #32303	; 0x7e2f
   14fd8:	movt	r1, #1
   14fdc:	mov	r0, #0
   14fe0:	mov	r2, #5
   14fe4:	bl	10fb0 <dcgettext@plt>
   14fe8:	mov	ip, r0
   14fec:	ldr	r3, [r7]
   14ff0:	ldr	r0, [r7, #4]
   14ff4:	ldr	r1, [r7, #8]
   14ff8:	ldr	r6, [r7, #12]
   14ffc:	ldr	r5, [r7, #16]
   15000:	ldr	r4, [r7, #20]
   15004:	ldr	r2, [r7, #24]
   15008:	ldr	lr, [r7, #28]
   1500c:	ldr	r7, [r7, #32]
   15010:	stm	sp, {r0, r1, r6}
   15014:	str	r5, [sp, #12]
   15018:	str	r4, [sp, #16]
   1501c:	str	r2, [sp, #20]
   15020:	str	lr, [sp, #24]
   15024:	str	r7, [sp, #28]
   15028:	b	15070 <__assert_fail@plt+0x3eb0>
   1502c:	movw	r1, #32255	; 0x7dff
   15030:	mov	r0, #0
   15034:	mov	r2, #5
   15038:	movt	r1, #1
   1503c:	bl	10fb0 <dcgettext@plt>
   15040:	mov	ip, r0
   15044:	ldr	r3, [r7]
   15048:	ldmib	r7, {r0, r1, r6}
   1504c:	ldr	r5, [r7, #16]
   15050:	ldr	r4, [r7, #20]
   15054:	ldr	r2, [r7, #24]
   15058:	ldr	r7, [r7, #28]
   1505c:	stm	sp, {r0, r1, r6}
   15060:	str	r5, [sp, #12]
   15064:	str	r4, [sp, #16]
   15068:	str	r2, [sp, #20]
   1506c:	str	r7, [sp, #24]
   15070:	mov	r0, r8
   15074:	mov	r1, #1
   15078:	mov	r2, ip
   1507c:	bl	11100 <__fprintf_chk@plt>
   15080:	sub	sp, fp, #24
   15084:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15088:	push	{r4, sl, fp, lr}
   1508c:	add	fp, sp, #8
   15090:	sub	sp, sp, #8
   15094:	ldr	ip, [fp, #8]
   15098:	mov	lr, #0
   1509c:	ldr	r4, [ip, lr, lsl #2]
   150a0:	add	lr, lr, #1
   150a4:	cmp	r4, #0
   150a8:	bne	1509c <__assert_fail@plt+0x3edc>
   150ac:	sub	r4, lr, #1
   150b0:	str	ip, [sp]
   150b4:	str	r4, [sp, #4]
   150b8:	bl	14d54 <__assert_fail@plt+0x3b94>
   150bc:	sub	sp, fp, #8
   150c0:	pop	{r4, sl, fp, pc}
   150c4:	push	{fp, lr}
   150c8:	mov	fp, sp
   150cc:	sub	sp, sp, #48	; 0x30
   150d0:	ldr	ip, [fp, #8]
   150d4:	ldr	lr, [ip]
   150d8:	cmp	lr, #0
   150dc:	str	lr, [sp, #8]
   150e0:	beq	1517c <__assert_fail@plt+0x3fbc>
   150e4:	ldr	lr, [ip, #4]
   150e8:	cmp	lr, #0
   150ec:	str	lr, [sp, #12]
   150f0:	beq	15184 <__assert_fail@plt+0x3fc4>
   150f4:	ldr	lr, [ip, #8]
   150f8:	cmp	lr, #0
   150fc:	str	lr, [sp, #16]
   15100:	beq	1518c <__assert_fail@plt+0x3fcc>
   15104:	ldr	lr, [ip, #12]
   15108:	cmp	lr, #0
   1510c:	str	lr, [sp, #20]
   15110:	beq	15194 <__assert_fail@plt+0x3fd4>
   15114:	ldr	lr, [ip, #16]
   15118:	cmp	lr, #0
   1511c:	str	lr, [sp, #24]
   15120:	beq	1519c <__assert_fail@plt+0x3fdc>
   15124:	ldr	lr, [ip, #20]
   15128:	cmp	lr, #0
   1512c:	str	lr, [sp, #28]
   15130:	beq	151a4 <__assert_fail@plt+0x3fe4>
   15134:	ldr	lr, [ip, #24]
   15138:	cmp	lr, #0
   1513c:	str	lr, [sp, #32]
   15140:	beq	151ac <__assert_fail@plt+0x3fec>
   15144:	ldr	lr, [ip, #28]
   15148:	cmp	lr, #0
   1514c:	str	lr, [sp, #36]	; 0x24
   15150:	beq	151b4 <__assert_fail@plt+0x3ff4>
   15154:	ldr	lr, [ip, #32]
   15158:	cmp	lr, #0
   1515c:	str	lr, [sp, #40]	; 0x28
   15160:	beq	151bc <__assert_fail@plt+0x3ffc>
   15164:	ldr	lr, [ip, #36]	; 0x24
   15168:	mov	ip, #10
   1516c:	cmp	lr, #0
   15170:	str	lr, [sp, #44]	; 0x2c
   15174:	movweq	ip, #9
   15178:	b	151c0 <__assert_fail@plt+0x4000>
   1517c:	mov	ip, #0
   15180:	b	151c0 <__assert_fail@plt+0x4000>
   15184:	mov	ip, #1
   15188:	b	151c0 <__assert_fail@plt+0x4000>
   1518c:	mov	ip, #2
   15190:	b	151c0 <__assert_fail@plt+0x4000>
   15194:	mov	ip, #3
   15198:	b	151c0 <__assert_fail@plt+0x4000>
   1519c:	mov	ip, #4
   151a0:	b	151c0 <__assert_fail@plt+0x4000>
   151a4:	mov	ip, #5
   151a8:	b	151c0 <__assert_fail@plt+0x4000>
   151ac:	mov	ip, #6
   151b0:	b	151c0 <__assert_fail@plt+0x4000>
   151b4:	mov	ip, #7
   151b8:	b	151c0 <__assert_fail@plt+0x4000>
   151bc:	mov	ip, #8
   151c0:	add	lr, sp, #8
   151c4:	str	ip, [sp, #4]
   151c8:	str	lr, [sp]
   151cc:	bl	14d54 <__assert_fail@plt+0x3b94>
   151d0:	mov	sp, fp
   151d4:	pop	{fp, pc}
   151d8:	push	{fp, lr}
   151dc:	mov	fp, sp
   151e0:	sub	sp, sp, #56	; 0x38
   151e4:	add	ip, fp, #8
   151e8:	str	ip, [sp, #12]
   151ec:	ldr	lr, [fp, #8]
   151f0:	cmp	lr, #0
   151f4:	str	lr, [sp, #16]
   151f8:	beq	15294 <__assert_fail@plt+0x40d4>
   151fc:	ldr	lr, [ip, #4]
   15200:	cmp	lr, #0
   15204:	str	lr, [sp, #20]
   15208:	beq	1529c <__assert_fail@plt+0x40dc>
   1520c:	ldr	lr, [ip, #8]
   15210:	cmp	lr, #0
   15214:	str	lr, [sp, #24]
   15218:	beq	152a4 <__assert_fail@plt+0x40e4>
   1521c:	ldr	lr, [ip, #12]
   15220:	cmp	lr, #0
   15224:	str	lr, [sp, #28]
   15228:	beq	152ac <__assert_fail@plt+0x40ec>
   1522c:	ldr	lr, [ip, #16]
   15230:	cmp	lr, #0
   15234:	str	lr, [sp, #32]
   15238:	beq	152b4 <__assert_fail@plt+0x40f4>
   1523c:	ldr	lr, [ip, #20]
   15240:	cmp	lr, #0
   15244:	str	lr, [sp, #36]	; 0x24
   15248:	beq	152bc <__assert_fail@plt+0x40fc>
   1524c:	ldr	lr, [ip, #24]
   15250:	cmp	lr, #0
   15254:	str	lr, [sp, #40]	; 0x28
   15258:	beq	152c4 <__assert_fail@plt+0x4104>
   1525c:	ldr	lr, [ip, #28]
   15260:	cmp	lr, #0
   15264:	str	lr, [sp, #44]	; 0x2c
   15268:	beq	152cc <__assert_fail@plt+0x410c>
   1526c:	ldr	lr, [ip, #32]
   15270:	cmp	lr, #0
   15274:	str	lr, [sp, #48]	; 0x30
   15278:	beq	152d4 <__assert_fail@plt+0x4114>
   1527c:	ldr	lr, [ip, #36]	; 0x24
   15280:	mov	ip, #10
   15284:	cmp	lr, #0
   15288:	str	lr, [sp, #52]	; 0x34
   1528c:	movweq	ip, #9
   15290:	b	152d8 <__assert_fail@plt+0x4118>
   15294:	mov	ip, #0
   15298:	b	152d8 <__assert_fail@plt+0x4118>
   1529c:	mov	ip, #1
   152a0:	b	152d8 <__assert_fail@plt+0x4118>
   152a4:	mov	ip, #2
   152a8:	b	152d8 <__assert_fail@plt+0x4118>
   152ac:	mov	ip, #3
   152b0:	b	152d8 <__assert_fail@plt+0x4118>
   152b4:	mov	ip, #4
   152b8:	b	152d8 <__assert_fail@plt+0x4118>
   152bc:	mov	ip, #5
   152c0:	b	152d8 <__assert_fail@plt+0x4118>
   152c4:	mov	ip, #6
   152c8:	b	152d8 <__assert_fail@plt+0x4118>
   152cc:	mov	ip, #7
   152d0:	b	152d8 <__assert_fail@plt+0x4118>
   152d4:	mov	ip, #8
   152d8:	add	lr, sp, #16
   152dc:	str	ip, [sp, #4]
   152e0:	str	lr, [sp]
   152e4:	bl	14d54 <__assert_fail@plt+0x3b94>
   152e8:	mov	sp, fp
   152ec:	pop	{fp, pc}
   152f0:	push	{fp, lr}
   152f4:	mov	fp, sp
   152f8:	movw	r0, #37228	; 0x916c
   152fc:	movt	r0, #2
   15300:	ldr	r1, [r0]
   15304:	movw	r0, #31242	; 0x7a0a
   15308:	movt	r0, #1
   1530c:	bl	10f2c <fputs_unlocked@plt>
   15310:	movw	r1, #32415	; 0x7e9f
   15314:	mov	r0, #0
   15318:	mov	r2, #5
   1531c:	movt	r1, #1
   15320:	bl	10fb0 <dcgettext@plt>
   15324:	movw	r2, #32435	; 0x7eb3
   15328:	mov	r1, r0
   1532c:	mov	r0, #1
   15330:	movt	r2, #1
   15334:	bl	110e8 <__printf_chk@plt>
   15338:	movw	r1, #32457	; 0x7ec9
   1533c:	mov	r0, #0
   15340:	mov	r2, #5
   15344:	movt	r1, #1
   15348:	bl	10fb0 <dcgettext@plt>
   1534c:	movw	r2, #30814	; 0x785e
   15350:	movw	r3, #31051	; 0x794b
   15354:	mov	r1, r0
   15358:	mov	r0, #1
   1535c:	movt	r2, #1
   15360:	movt	r3, #1
   15364:	bl	110e8 <__printf_chk@plt>
   15368:	movw	r1, #32477	; 0x7edd
   1536c:	mov	r0, #0
   15370:	mov	r2, #5
   15374:	movt	r1, #1
   15378:	bl	10fb0 <dcgettext@plt>
   1537c:	movw	r2, #32516	; 0x7f04
   15380:	mov	r1, r0
   15384:	mov	r0, #1
   15388:	movt	r2, #1
   1538c:	pop	{fp, lr}
   15390:	b	110e8 <__printf_chk@plt>
   15394:	push	{r4, r5, r6, sl, fp, lr}
   15398:	add	fp, sp, #16
   1539c:	mov	r4, r2
   153a0:	mov	r5, r1
   153a4:	mov	r6, r0
   153a8:	bl	16f8c <__assert_fail@plt+0x5dcc>
   153ac:	cmp	r0, #0
   153b0:	popne	{r4, r5, r6, sl, fp, pc}
   153b4:	cmp	r6, #0
   153b8:	beq	153cc <__assert_fail@plt+0x420c>
   153bc:	cmp	r5, #0
   153c0:	cmpne	r4, #0
   153c4:	bne	153cc <__assert_fail@plt+0x420c>
   153c8:	pop	{r4, r5, r6, sl, fp, pc}
   153cc:	bl	15948 <__assert_fail@plt+0x4788>
   153d0:	push	{r4, r5, r6, sl, fp, lr}
   153d4:	add	fp, sp, #16
   153d8:	mov	r4, r2
   153dc:	mov	r5, r1
   153e0:	mov	r6, r0
   153e4:	bl	16f8c <__assert_fail@plt+0x5dcc>
   153e8:	cmp	r0, #0
   153ec:	popne	{r4, r5, r6, sl, fp, pc}
   153f0:	cmp	r6, #0
   153f4:	beq	15408 <__assert_fail@plt+0x4248>
   153f8:	cmp	r5, #0
   153fc:	cmpne	r4, #0
   15400:	bne	15408 <__assert_fail@plt+0x4248>
   15404:	pop	{r4, r5, r6, sl, fp, pc}
   15408:	bl	15948 <__assert_fail@plt+0x4788>
   1540c:	push	{fp, lr}
   15410:	mov	fp, sp
   15414:	bl	16680 <__assert_fail@plt+0x54c0>
   15418:	cmp	r0, #0
   1541c:	popne	{fp, pc}
   15420:	bl	15948 <__assert_fail@plt+0x4788>
   15424:	push	{fp, lr}
   15428:	mov	fp, sp
   1542c:	bl	16680 <__assert_fail@plt+0x54c0>
   15430:	cmp	r0, #0
   15434:	popne	{fp, pc}
   15438:	bl	15948 <__assert_fail@plt+0x4788>
   1543c:	push	{fp, lr}
   15440:	mov	fp, sp
   15444:	bl	16680 <__assert_fail@plt+0x54c0>
   15448:	cmp	r0, #0
   1544c:	popne	{fp, pc}
   15450:	bl	15948 <__assert_fail@plt+0x4788>
   15454:	push	{r4, r5, fp, lr}
   15458:	add	fp, sp, #8
   1545c:	mov	r4, r1
   15460:	mov	r5, r0
   15464:	bl	166b0 <__assert_fail@plt+0x54f0>
   15468:	cmp	r0, #0
   1546c:	popne	{r4, r5, fp, pc}
   15470:	cmp	r5, #0
   15474:	beq	15484 <__assert_fail@plt+0x42c4>
   15478:	cmp	r4, #0
   1547c:	bne	15484 <__assert_fail@plt+0x42c4>
   15480:	pop	{r4, r5, fp, pc}
   15484:	bl	15948 <__assert_fail@plt+0x4788>
   15488:	push	{fp, lr}
   1548c:	mov	fp, sp
   15490:	cmp	r1, #0
   15494:	orreq	r1, r1, #1
   15498:	bl	166b0 <__assert_fail@plt+0x54f0>
   1549c:	cmp	r0, #0
   154a0:	popne	{fp, pc}
   154a4:	bl	15948 <__assert_fail@plt+0x4788>
   154a8:	push	{fp, lr}
   154ac:	mov	fp, sp
   154b0:	clz	r3, r2
   154b4:	lsr	ip, r3, #5
   154b8:	clz	r3, r1
   154bc:	lsr	r3, r3, #5
   154c0:	orrs	r3, r3, ip
   154c4:	movwne	r1, #1
   154c8:	movwne	r2, #1
   154cc:	bl	16f8c <__assert_fail@plt+0x5dcc>
   154d0:	cmp	r0, #0
   154d4:	popne	{fp, pc}
   154d8:	bl	15948 <__assert_fail@plt+0x4788>
   154dc:	push	{fp, lr}
   154e0:	mov	fp, sp
   154e4:	mov	r2, r1
   154e8:	mov	r1, r0
   154ec:	mov	r0, #0
   154f0:	bl	16f8c <__assert_fail@plt+0x5dcc>
   154f4:	cmp	r0, #0
   154f8:	popne	{fp, pc}
   154fc:	bl	15948 <__assert_fail@plt+0x4788>
   15500:	push	{fp, lr}
   15504:	mov	fp, sp
   15508:	mov	r2, r1
   1550c:	mov	r1, r0
   15510:	clz	r0, r2
   15514:	clz	r3, r1
   15518:	lsr	r0, r0, #5
   1551c:	lsr	r3, r3, #5
   15520:	orrs	r0, r3, r0
   15524:	mov	r0, #0
   15528:	movwne	r1, #1
   1552c:	movwne	r2, #1
   15530:	bl	16f8c <__assert_fail@plt+0x5dcc>
   15534:	cmp	r0, #0
   15538:	popne	{fp, pc}
   1553c:	bl	15948 <__assert_fail@plt+0x4788>
   15540:	push	{r4, r5, r6, sl, fp, lr}
   15544:	add	fp, sp, #16
   15548:	ldr	r5, [r1]
   1554c:	mov	r4, r1
   15550:	mov	r6, r0
   15554:	cmp	r0, #0
   15558:	beq	15570 <__assert_fail@plt+0x43b0>
   1555c:	mov	r0, #1
   15560:	add	r0, r0, r5, lsr #1
   15564:	adds	r5, r5, r0
   15568:	bcc	15578 <__assert_fail@plt+0x43b8>
   1556c:	b	155b4 <__assert_fail@plt+0x43f4>
   15570:	cmp	r5, #0
   15574:	movweq	r5, #64	; 0x40
   15578:	mov	r0, r6
   1557c:	mov	r1, r5
   15580:	mov	r2, #1
   15584:	bl	16f8c <__assert_fail@plt+0x5dcc>
   15588:	cmp	r5, #0
   1558c:	mov	r1, r5
   15590:	movwne	r1, #1
   15594:	cmp	r0, #0
   15598:	bne	155ac <__assert_fail@plt+0x43ec>
   1559c:	clz	r2, r6
   155a0:	lsr	r2, r2, #5
   155a4:	orrs	r1, r2, r1
   155a8:	bne	155b4 <__assert_fail@plt+0x43f4>
   155ac:	str	r5, [r4]
   155b0:	pop	{r4, r5, r6, sl, fp, pc}
   155b4:	bl	15948 <__assert_fail@plt+0x4788>
   155b8:	push	{r4, r5, r6, r7, fp, lr}
   155bc:	add	fp, sp, #16
   155c0:	ldr	r5, [r1]
   155c4:	mov	r6, r2
   155c8:	mov	r4, r1
   155cc:	mov	r7, r0
   155d0:	cmp	r0, #0
   155d4:	beq	155ec <__assert_fail@plt+0x442c>
   155d8:	mov	r0, #1
   155dc:	add	r0, r0, r5, lsr #1
   155e0:	adds	r5, r5, r0
   155e4:	bcc	15604 <__assert_fail@plt+0x4444>
   155e8:	b	15638 <__assert_fail@plt+0x4478>
   155ec:	cmp	r5, #0
   155f0:	bne	15604 <__assert_fail@plt+0x4444>
   155f4:	mov	r0, #64	; 0x40
   155f8:	cmp	r6, #64	; 0x40
   155fc:	udiv	r5, r0, r6
   15600:	addhi	r5, r5, #1
   15604:	mov	r0, r7
   15608:	mov	r1, r5
   1560c:	mov	r2, r6
   15610:	bl	16f8c <__assert_fail@plt+0x5dcc>
   15614:	cmp	r0, #0
   15618:	bne	15630 <__assert_fail@plt+0x4470>
   1561c:	cmp	r7, #0
   15620:	beq	15638 <__assert_fail@plt+0x4478>
   15624:	cmp	r6, #0
   15628:	cmpne	r5, #0
   1562c:	bne	15638 <__assert_fail@plt+0x4478>
   15630:	str	r5, [r4]
   15634:	pop	{r4, r5, r6, r7, fp, pc}
   15638:	bl	15948 <__assert_fail@plt+0x4788>
   1563c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15640:	add	fp, sp, #24
   15644:	mov	r8, r1
   15648:	ldr	r1, [r1]
   1564c:	mov	r5, r0
   15650:	add	r0, r1, r1, asr #1
   15654:	cmp	r0, r1
   15658:	mvnvs	r0, #-2147483648	; 0x80000000
   1565c:	cmp	r0, r3
   15660:	mov	r7, r0
   15664:	movgt	r7, r3
   15668:	cmn	r3, #1
   1566c:	movle	r7, r0
   15670:	ldr	r0, [fp, #8]
   15674:	cmn	r0, #1
   15678:	ble	156a0 <__assert_fail@plt+0x44e0>
   1567c:	cmp	r0, #0
   15680:	beq	156f4 <__assert_fail@plt+0x4534>
   15684:	cmn	r7, #1
   15688:	ble	156c8 <__assert_fail@plt+0x4508>
   1568c:	mvn	r4, #-2147483648	; 0x80000000
   15690:	udiv	r6, r4, r0
   15694:	cmp	r6, r7
   15698:	bge	156f4 <__assert_fail@plt+0x4534>
   1569c:	b	15704 <__assert_fail@plt+0x4544>
   156a0:	cmn	r7, #1
   156a4:	ble	156e4 <__assert_fail@plt+0x4524>
   156a8:	cmn	r0, #1
   156ac:	beq	156f4 <__assert_fail@plt+0x4534>
   156b0:	mov	r6, #-2147483648	; 0x80000000
   156b4:	mvn	r4, #-2147483648	; 0x80000000
   156b8:	sdiv	r6, r6, r0
   156bc:	cmp	r6, r7
   156c0:	bge	156f4 <__assert_fail@plt+0x4534>
   156c4:	b	15704 <__assert_fail@plt+0x4544>
   156c8:	beq	156f4 <__assert_fail@plt+0x4534>
   156cc:	mov	r6, #-2147483648	; 0x80000000
   156d0:	mvn	r4, #-2147483648	; 0x80000000
   156d4:	sdiv	r6, r6, r7
   156d8:	cmp	r6, r0
   156dc:	bge	156f4 <__assert_fail@plt+0x4534>
   156e0:	b	15704 <__assert_fail@plt+0x4544>
   156e4:	mvn	r4, #-2147483648	; 0x80000000
   156e8:	sdiv	r6, r4, r0
   156ec:	cmp	r7, r6
   156f0:	blt	15704 <__assert_fail@plt+0x4544>
   156f4:	mul	r6, r7, r0
   156f8:	mov	r4, #64	; 0x40
   156fc:	cmp	r6, #63	; 0x3f
   15700:	bgt	1570c <__assert_fail@plt+0x454c>
   15704:	sdiv	r7, r4, r0
   15708:	mul	r6, r7, r0
   1570c:	cmp	r5, #0
   15710:	moveq	r4, #0
   15714:	streq	r4, [r8]
   15718:	sub	r4, r7, r1
   1571c:	cmp	r4, r2
   15720:	bge	157cc <__assert_fail@plt+0x460c>
   15724:	add	r7, r1, r2
   15728:	mov	r6, #0
   1572c:	mov	r2, #0
   15730:	cmp	r7, r3
   15734:	movwgt	r6, #1
   15738:	cmn	r3, #1
   1573c:	movwgt	r2, #1
   15740:	cmp	r7, r1
   15744:	bvs	15800 <__assert_fail@plt+0x4640>
   15748:	ands	r1, r2, r6
   1574c:	bne	15800 <__assert_fail@plt+0x4640>
   15750:	cmn	r0, #1
   15754:	ble	1577c <__assert_fail@plt+0x45bc>
   15758:	cmp	r0, #0
   1575c:	beq	157c8 <__assert_fail@plt+0x4608>
   15760:	cmn	r7, #1
   15764:	ble	157a0 <__assert_fail@plt+0x45e0>
   15768:	mvn	r1, #-2147483648	; 0x80000000
   1576c:	udiv	r1, r1, r0
   15770:	cmp	r1, r7
   15774:	bge	157c8 <__assert_fail@plt+0x4608>
   15778:	b	15800 <__assert_fail@plt+0x4640>
   1577c:	cmn	r7, #1
   15780:	ble	157b8 <__assert_fail@plt+0x45f8>
   15784:	cmn	r0, #1
   15788:	beq	157c8 <__assert_fail@plt+0x4608>
   1578c:	mov	r1, #-2147483648	; 0x80000000
   15790:	sdiv	r1, r1, r0
   15794:	cmp	r1, r7
   15798:	bge	157c8 <__assert_fail@plt+0x4608>
   1579c:	b	15800 <__assert_fail@plt+0x4640>
   157a0:	beq	157c8 <__assert_fail@plt+0x4608>
   157a4:	mov	r1, #-2147483648	; 0x80000000
   157a8:	sdiv	r1, r1, r7
   157ac:	cmp	r1, r0
   157b0:	bge	157c8 <__assert_fail@plt+0x4608>
   157b4:	b	15800 <__assert_fail@plt+0x4640>
   157b8:	mvn	r1, #-2147483648	; 0x80000000
   157bc:	sdiv	r1, r1, r0
   157c0:	cmp	r7, r1
   157c4:	blt	15800 <__assert_fail@plt+0x4640>
   157c8:	mul	r6, r7, r0
   157cc:	mov	r0, r5
   157d0:	mov	r1, r6
   157d4:	bl	166b0 <__assert_fail@plt+0x54f0>
   157d8:	cmp	r6, #0
   157dc:	movwne	r6, #1
   157e0:	cmp	r0, #0
   157e4:	bne	157f8 <__assert_fail@plt+0x4638>
   157e8:	clz	r1, r5
   157ec:	lsr	r1, r1, #5
   157f0:	orrs	r1, r1, r6
   157f4:	bne	15800 <__assert_fail@plt+0x4640>
   157f8:	str	r7, [r8]
   157fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15800:	bl	15948 <__assert_fail@plt+0x4788>
   15804:	push	{fp, lr}
   15808:	mov	fp, sp
   1580c:	mov	r1, #1
   15810:	bl	1662c <__assert_fail@plt+0x546c>
   15814:	cmp	r0, #0
   15818:	popne	{fp, pc}
   1581c:	bl	15948 <__assert_fail@plt+0x4788>
   15820:	push	{fp, lr}
   15824:	mov	fp, sp
   15828:	bl	1662c <__assert_fail@plt+0x546c>
   1582c:	cmp	r0, #0
   15830:	popne	{fp, pc}
   15834:	bl	15948 <__assert_fail@plt+0x4788>
   15838:	push	{fp, lr}
   1583c:	mov	fp, sp
   15840:	mov	r1, #1
   15844:	bl	1662c <__assert_fail@plt+0x546c>
   15848:	cmp	r0, #0
   1584c:	popne	{fp, pc}
   15850:	bl	15948 <__assert_fail@plt+0x4788>
   15854:	push	{fp, lr}
   15858:	mov	fp, sp
   1585c:	bl	1662c <__assert_fail@plt+0x546c>
   15860:	cmp	r0, #0
   15864:	popne	{fp, pc}
   15868:	bl	15948 <__assert_fail@plt+0x4788>
   1586c:	push	{r4, r5, fp, lr}
   15870:	add	fp, sp, #8
   15874:	mov	r5, r0
   15878:	mov	r0, r1
   1587c:	mov	r4, r1
   15880:	bl	16680 <__assert_fail@plt+0x54c0>
   15884:	cmp	r0, #0
   15888:	beq	1589c <__assert_fail@plt+0x46dc>
   1588c:	mov	r1, r5
   15890:	mov	r2, r4
   15894:	pop	{r4, r5, fp, lr}
   15898:	b	10f8c <memcpy@plt>
   1589c:	bl	15948 <__assert_fail@plt+0x4788>
   158a0:	push	{r4, r5, fp, lr}
   158a4:	add	fp, sp, #8
   158a8:	mov	r5, r0
   158ac:	mov	r0, r1
   158b0:	mov	r4, r1
   158b4:	bl	16680 <__assert_fail@plt+0x54c0>
   158b8:	cmp	r0, #0
   158bc:	beq	158d0 <__assert_fail@plt+0x4710>
   158c0:	mov	r1, r5
   158c4:	mov	r2, r4
   158c8:	pop	{r4, r5, fp, lr}
   158cc:	b	10f8c <memcpy@plt>
   158d0:	bl	15948 <__assert_fail@plt+0x4788>
   158d4:	push	{r4, r5, fp, lr}
   158d8:	add	fp, sp, #8
   158dc:	mov	r5, r0
   158e0:	add	r0, r1, #1
   158e4:	mov	r4, r1
   158e8:	bl	16680 <__assert_fail@plt+0x54c0>
   158ec:	cmp	r0, #0
   158f0:	beq	1590c <__assert_fail@plt+0x474c>
   158f4:	mov	r1, #0
   158f8:	mov	r2, r4
   158fc:	strb	r1, [r0, r4]
   15900:	mov	r1, r5
   15904:	pop	{r4, r5, fp, lr}
   15908:	b	10f8c <memcpy@plt>
   1590c:	bl	15948 <__assert_fail@plt+0x4788>
   15910:	push	{r4, r5, fp, lr}
   15914:	add	fp, sp, #8
   15918:	mov	r4, r0
   1591c:	bl	11094 <strlen@plt>
   15920:	add	r5, r0, #1
   15924:	mov	r0, r5
   15928:	bl	16680 <__assert_fail@plt+0x54c0>
   1592c:	cmp	r0, #0
   15930:	beq	15944 <__assert_fail@plt+0x4784>
   15934:	mov	r1, r4
   15938:	mov	r2, r5
   1593c:	pop	{r4, r5, fp, lr}
   15940:	b	10f8c <memcpy@plt>
   15944:	bl	15948 <__assert_fail@plt+0x4788>
   15948:	push	{fp, lr}
   1594c:	mov	fp, sp
   15950:	movw	r0, #37124	; 0x9104
   15954:	movw	r1, #32592	; 0x7f50
   15958:	mov	r2, #5
   1595c:	movt	r0, #2
   15960:	movt	r1, #1
   15964:	ldr	r4, [r0]
   15968:	mov	r0, #0
   1596c:	bl	10fb0 <dcgettext@plt>
   15970:	movw	r2, #32829	; 0x803d
   15974:	mov	r3, r0
   15978:	mov	r0, r4
   1597c:	mov	r1, #0
   15980:	movt	r2, #1
   15984:	bl	1101c <error@plt>
   15988:	bl	111a8 <abort@plt>
   1598c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15990:	add	fp, sp, #28
   15994:	sub	sp, sp, #44	; 0x2c
   15998:	cmp	r2, #37	; 0x25
   1599c:	bcs	1660c <__assert_fail@plt+0x544c>
   159a0:	ldr	sl, [fp, #8]
   159a4:	mov	r6, r2
   159a8:	mov	r7, r1
   159ac:	mov	r4, r0
   159b0:	str	r3, [sp, #36]	; 0x24
   159b4:	bl	110ac <__errno_location@plt>
   159b8:	mov	r5, r0
   159bc:	mov	r0, #0
   159c0:	str	r0, [r5]
   159c4:	bl	11070 <__ctype_b_loc@plt>
   159c8:	ldr	r1, [r0]
   159cc:	mov	r2, r4
   159d0:	ldrb	r0, [r2], #1
   159d4:	add	r3, r1, r0, lsl #1
   159d8:	ldrb	r3, [r3, #1]
   159dc:	tst	r3, #32
   159e0:	bne	159d0 <__assert_fail@plt+0x4810>
   159e4:	cmp	r7, #0
   159e8:	sub	r9, fp, #32
   159ec:	mov	r8, #4
   159f0:	movne	r9, r7
   159f4:	cmp	r0, #45	; 0x2d
   159f8:	beq	16600 <__assert_fail@plt+0x5440>
   159fc:	mov	r0, r4
   15a00:	mov	r1, r9
   15a04:	mov	r2, r6
   15a08:	mov	r3, #0
   15a0c:	bl	10f98 <__strtoull_internal@plt>
   15a10:	mov	r7, r1
   15a14:	ldr	r1, [r9]
   15a18:	cmp	r1, r4
   15a1c:	beq	15a48 <__assert_fail@plt+0x4888>
   15a20:	mov	r6, r0
   15a24:	ldr	r0, [r5]
   15a28:	cmp	r0, #0
   15a2c:	beq	15a84 <__assert_fail@plt+0x48c4>
   15a30:	cmp	r0, #34	; 0x22
   15a34:	bne	16600 <__assert_fail@plt+0x5440>
   15a38:	mov	r8, #1
   15a3c:	cmp	sl, #0
   15a40:	bne	15a90 <__assert_fail@plt+0x48d0>
   15a44:	b	165f8 <__assert_fail@plt+0x5438>
   15a48:	cmp	sl, #0
   15a4c:	beq	16600 <__assert_fail@plt+0x5440>
   15a50:	mov	r5, r1
   15a54:	ldrb	r1, [r4]
   15a58:	cmp	r1, #0
   15a5c:	beq	16600 <__assert_fail@plt+0x5440>
   15a60:	mov	r0, sl
   15a64:	bl	110a0 <strchr@plt>
   15a68:	cmp	r0, #0
   15a6c:	beq	16600 <__assert_fail@plt+0x5440>
   15a70:	mov	r1, r5
   15a74:	mov	r8, #0
   15a78:	mov	r6, #1
   15a7c:	mov	r7, #0
   15a80:	b	15a90 <__assert_fail@plt+0x48d0>
   15a84:	mov	r8, r0
   15a88:	cmp	sl, #0
   15a8c:	beq	165f8 <__assert_fail@plt+0x5438>
   15a90:	ldrb	r4, [r1]
   15a94:	cmp	r4, #0
   15a98:	beq	165f8 <__assert_fail@plt+0x5438>
   15a9c:	str	r1, [sp, #32]
   15aa0:	mov	r0, sl
   15aa4:	mov	r1, r4
   15aa8:	bl	110a0 <strchr@plt>
   15aac:	cmp	r0, #0
   15ab0:	beq	15d78 <__assert_fail@plt+0x4bb8>
   15ab4:	sub	r0, r4, #69	; 0x45
   15ab8:	mov	r1, #1
   15abc:	mov	r3, #0
   15ac0:	mov	r5, #1024	; 0x400
   15ac4:	cmp	r0, #47	; 0x2f
   15ac8:	str	r1, [sp, #28]
   15acc:	bhi	15bd0 <__assert_fail@plt+0x4a10>
   15ad0:	add	r1, pc, #0
   15ad4:	ldr	pc, [r1, r0, lsl #2]
   15ad8:	muleq	r1, r8, fp
   15adc:	ldrdeq	r5, [r1], -r0
   15ae0:	muleq	r1, r8, fp
   15ae4:	ldrdeq	r5, [r1], -r0
   15ae8:	ldrdeq	r5, [r1], -r0
   15aec:	ldrdeq	r5, [r1], -r0
   15af0:	muleq	r1, r8, fp
   15af4:	ldrdeq	r5, [r1], -r0
   15af8:	muleq	r1, r8, fp
   15afc:	ldrdeq	r5, [r1], -r0
   15b00:	ldrdeq	r5, [r1], -r0
   15b04:	muleq	r1, r8, fp
   15b08:	ldrdeq	r5, [r1], -r0
   15b0c:	ldrdeq	r5, [r1], -r0
   15b10:	ldrdeq	r5, [r1], -r0
   15b14:	muleq	r1, r8, fp
   15b18:	ldrdeq	r5, [r1], -r0
   15b1c:	ldrdeq	r5, [r1], -r0
   15b20:	ldrdeq	r5, [r1], -r0
   15b24:	ldrdeq	r5, [r1], -r0
   15b28:	muleq	r1, r8, fp
   15b2c:	muleq	r1, r8, fp
   15b30:	ldrdeq	r5, [r1], -r0
   15b34:	ldrdeq	r5, [r1], -r0
   15b38:	ldrdeq	r5, [r1], -r0
   15b3c:	ldrdeq	r5, [r1], -r0
   15b40:	ldrdeq	r5, [r1], -r0
   15b44:	ldrdeq	r5, [r1], -r0
   15b48:	ldrdeq	r5, [r1], -r0
   15b4c:	ldrdeq	r5, [r1], -r0
   15b50:	ldrdeq	r5, [r1], -r0
   15b54:	ldrdeq	r5, [r1], -r0
   15b58:	ldrdeq	r5, [r1], -r0
   15b5c:	ldrdeq	r5, [r1], -r0
   15b60:	muleq	r1, r8, fp
   15b64:	ldrdeq	r5, [r1], -r0
   15b68:	ldrdeq	r5, [r1], -r0
   15b6c:	ldrdeq	r5, [r1], -r0
   15b70:	muleq	r1, r8, fp
   15b74:	ldrdeq	r5, [r1], -r0
   15b78:	muleq	r1, r8, fp
   15b7c:	ldrdeq	r5, [r1], -r0
   15b80:	ldrdeq	r5, [r1], -r0
   15b84:	ldrdeq	r5, [r1], -r0
   15b88:	ldrdeq	r5, [r1], -r0
   15b8c:	ldrdeq	r5, [r1], -r0
   15b90:	ldrdeq	r5, [r1], -r0
   15b94:	muleq	r1, r8, fp
   15b98:	mov	r0, sl
   15b9c:	mov	r1, #48	; 0x30
   15ba0:	bl	110a0 <strchr@plt>
   15ba4:	cmp	r0, #0
   15ba8:	beq	15bcc <__assert_fail@plt+0x4a0c>
   15bac:	ldr	r1, [sp, #32]
   15bb0:	ldrb	r0, [r1, #1]
   15bb4:	cmp	r0, #66	; 0x42
   15bb8:	cmpne	r0, #68	; 0x44
   15bbc:	bne	15d84 <__assert_fail@plt+0x4bc4>
   15bc0:	mov	r5, #1000	; 0x3e8
   15bc4:	mov	r0, #2
   15bc8:	str	r0, [sp, #28]
   15bcc:	mov	r3, #0
   15bd0:	sub	r0, r4, #66	; 0x42
   15bd4:	cmp	r0, #53	; 0x35
   15bd8:	bhi	15d78 <__assert_fail@plt+0x4bb8>
   15bdc:	add	r1, pc, #0
   15be0:	ldr	pc, [r1, r0, lsl #2]
   15be4:	andeq	r6, r1, r0, lsl #2
   15be8:	andeq	r5, r1, r8, ror sp
   15bec:	andeq	r5, r1, r8, ror sp
   15bf0:	andeq	r6, r1, r8, lsr #2
   15bf4:	andeq	r5, r1, r8, ror sp
   15bf8:			; <UNDEFINED> instruction: 0x00015cbc
   15bfc:	andeq	r5, r1, r8, ror sp
   15c00:	andeq	r5, r1, r8, ror sp
   15c04:	andeq	r5, r1, r8, ror sp
   15c08:	andeq	r5, r1, r8, lsr #27
   15c0c:	andeq	r5, r1, r8, ror sp
   15c10:	strdeq	r5, [r1], -r0
   15c14:	andeq	r5, r1, r8, ror sp
   15c18:	andeq	r5, r1, r8, ror sp
   15c1c:	andeq	r6, r1, r0, lsl #5
   15c20:	andeq	r5, r1, r8, ror sp
   15c24:	andeq	r5, r1, r8, ror sp
   15c28:	andeq	r5, r1, r8, ror sp
   15c2c:	andeq	r5, r1, ip, ror lr
   15c30:	andeq	r5, r1, r8, ror sp
   15c34:	andeq	r5, r1, r8, ror sp
   15c38:	andeq	r5, r1, r8, ror sp
   15c3c:	andeq	r5, r1, r8, ror sp
   15c40:	andeq	r6, r1, r8, lsr #7
   15c44:	andeq	r5, r1, r4, ror #30
   15c48:	andeq	r5, r1, r8, ror sp
   15c4c:	andeq	r5, r1, r8, ror sp
   15c50:	andeq	r5, r1, r8, ror sp
   15c54:	andeq	r5, r1, r8, ror sp
   15c58:	andeq	r5, r1, r8, ror sp
   15c5c:	andeq	r5, r1, r8, ror sp
   15c60:	andeq	r5, r1, r8, ror sp
   15c64:	andeq	r6, r1, r0, lsl #11
   15c68:	ldrdeq	r6, [r1], -r8
   15c6c:	andeq	r5, r1, r8, ror sp
   15c70:	andeq	r5, r1, r8, ror sp
   15c74:	andeq	r5, r1, r8, ror sp
   15c78:			; <UNDEFINED> instruction: 0x00015cbc
   15c7c:	andeq	r5, r1, r8, ror sp
   15c80:	andeq	r5, r1, r8, ror sp
   15c84:	andeq	r5, r1, r8, ror sp
   15c88:	andeq	r5, r1, r8, lsr #27
   15c8c:	andeq	r5, r1, r8, ror sp
   15c90:	strdeq	r5, [r1], -r0
   15c94:	andeq	r5, r1, r8, ror sp
   15c98:	andeq	r5, r1, r8, ror sp
   15c9c:	andeq	r5, r1, r8, ror sp
   15ca0:	andeq	r5, r1, r8, ror sp
   15ca4:	andeq	r5, r1, r8, ror sp
   15ca8:	andeq	r5, r1, r8, ror sp
   15cac:	andeq	r5, r1, ip, ror lr
   15cb0:	andeq	r5, r1, r8, ror sp
   15cb4:	andeq	r5, r1, r8, ror sp
   15cb8:			; <UNDEFINED> instruction: 0x000165b4
   15cbc:	mvn	r0, #0
   15cc0:	mvn	r1, #0
   15cc4:	mov	r2, r5
   15cc8:	mov	sl, r3
   15ccc:	bl	17494 <__assert_fail@plt+0x62d4>
   15cd0:	subs	r3, r0, r6
   15cd4:	umull	r4, r2, r6, r5
   15cd8:	mov	lr, #0
   15cdc:	str	r1, [sp, #20]
   15ce0:	sbcs	r3, r1, r7
   15ce4:	movwcc	lr, #1
   15ce8:	mla	ip, r6, sl, r2
   15cec:	mov	r2, r1
   15cf0:	mov	r2, #0
   15cf4:	cmp	lr, #0
   15cf8:	mla	r7, r7, r5, ip
   15cfc:	mvnne	r4, #0
   15d00:	mvnne	r7, #0
   15d04:	subs	r6, r0, r4
   15d08:	sbcs	r6, r1, r7
   15d0c:	umull	r3, r6, r4, r5
   15d10:	movwcc	r2, #1
   15d14:	cmp	r2, #0
   15d18:	mvnne	r3, #0
   15d1c:	cmp	r2, #0
   15d20:	str	r6, [sp, #16]
   15d24:	umull	r6, ip, r3, r5
   15d28:	mla	r1, r3, sl, ip
   15d2c:	ldr	ip, [sp, #16]
   15d30:	str	r1, [sp, #12]
   15d34:	mla	r4, r4, sl, ip
   15d38:	mla	r4, r7, r5, r4
   15d3c:	mvnne	r4, #0
   15d40:	subs	r0, r0, r3
   15d44:	ldr	r0, [sp, #20]
   15d48:	ldr	r7, [sp, #12]
   15d4c:	sbcs	r0, r0, r4
   15d50:	mov	r0, #0
   15d54:	mla	r7, r4, r5, r7
   15d58:	movwcc	r0, #1
   15d5c:	cmp	r0, #0
   15d60:	mov	r1, r0
   15d64:	orr	r0, lr, r2
   15d68:	mvnne	r7, #0
   15d6c:	mvnne	r6, #0
   15d70:	orr	r3, r0, r1
   15d74:	b	165d8 <__assert_fail@plt+0x5418>
   15d78:	ldr	r0, [sp, #36]	; 0x24
   15d7c:	orr	r8, r8, #2
   15d80:	b	165fc <__assert_fail@plt+0x543c>
   15d84:	cmp	r0, #105	; 0x69
   15d88:	mov	r3, #0
   15d8c:	bne	15bd0 <__assert_fail@plt+0x4a10>
   15d90:	ldrb	r0, [r1, #2]
   15d94:	mov	r1, #1
   15d98:	cmp	r0, #66	; 0x42
   15d9c:	movweq	r1, #3
   15da0:	str	r1, [sp, #28]
   15da4:	b	15bd0 <__assert_fail@plt+0x4a10>
   15da8:	mvn	r0, #0
   15dac:	mvn	r1, #0
   15db0:	mov	r2, r5
   15db4:	mov	r4, r3
   15db8:	bl	17494 <__assert_fail@plt+0x62d4>
   15dbc:	subs	r0, r0, r6
   15dc0:	mov	r2, #0
   15dc4:	sbcs	r0, r1, r7
   15dc8:	umull	r0, r1, r6, r5
   15dcc:	movwcc	r2, #1
   15dd0:	cmp	r2, #0
   15dd4:	mla	r1, r6, r4, r1
   15dd8:	mov	r3, r2
   15ddc:	mvnne	r0, #0
   15de0:	mla	r7, r7, r5, r1
   15de4:	mvnne	r7, #0
   15de8:	mov	r6, r0
   15dec:	b	165d8 <__assert_fail@plt+0x5418>
   15df0:	mvn	r0, #0
   15df4:	mvn	r1, #0
   15df8:	mov	r2, r5
   15dfc:	str	r3, [sp, #24]
   15e00:	bl	17494 <__assert_fail@plt+0x62d4>
   15e04:	subs	r3, r0, r6
   15e08:	mov	ip, r0
   15e0c:	umull	r4, r0, r6, r5
   15e10:	mov	sl, #0
   15e14:	sbcs	r3, r1, r7
   15e18:	mov	r3, #0
   15e1c:	movwcc	r3, #1
   15e20:	cmp	r3, #0
   15e24:	str	r0, [sp, #20]
   15e28:	ldr	r0, [sp, #24]
   15e2c:	mvnne	r4, #0
   15e30:	cmp	r3, #0
   15e34:	umull	lr, r2, r4, r5
   15e38:	mla	r2, r4, r0, r2
   15e3c:	str	r2, [sp, #16]
   15e40:	ldr	r2, [sp, #20]
   15e44:	mla	r6, r6, r0, r2
   15e48:	ldr	r0, [sp, #16]
   15e4c:	mla	r6, r7, r5, r6
   15e50:	mvnne	r6, #0
   15e54:	mla	r7, r6, r5, r0
   15e58:	subs	r0, ip, r4
   15e5c:	sbcs	r0, r1, r6
   15e60:	movwcc	sl, #1
   15e64:	cmp	sl, #0
   15e68:	orr	r3, r3, sl
   15e6c:	mvnne	lr, #0
   15e70:	mvnne	r7, #0
   15e74:	mov	r6, lr
   15e78:	b	165d8 <__assert_fail@plt+0x5418>
   15e7c:	mvn	r0, #0
   15e80:	mvn	r1, #0
   15e84:	mov	r2, r5
   15e88:	mov	sl, r3
   15e8c:	bl	17494 <__assert_fail@plt+0x62d4>
   15e90:	subs	r3, r0, r6
   15e94:	mov	ip, r1
   15e98:	umull	r2, lr, r6, r5
   15e9c:	str	r0, [sp, #20]
   15ea0:	sbcs	r3, r1, r7
   15ea4:	mov	r1, #0
   15ea8:	str	ip, [sp, #16]
   15eac:	movwcc	r1, #1
   15eb0:	mla	r6, r6, sl, lr
   15eb4:	mov	lr, #0
   15eb8:	cmp	r1, #0
   15ebc:	mla	r7, r7, r5, r6
   15ec0:	mvnne	r2, #0
   15ec4:	cmp	r1, #0
   15ec8:	umull	r3, r4, r2, r5
   15ecc:	mvnne	r7, #0
   15ed0:	mla	r4, r2, sl, r4
   15ed4:	subs	r2, r0, r2
   15ed8:	sbcs	r2, ip, r7
   15edc:	mla	r4, r7, r5, r4
   15ee0:	mov	r2, #0
   15ee4:	movwcc	lr, #1
   15ee8:	cmp	lr, #0
   15eec:	mvnne	r3, #0
   15ef0:	mvnne	r4, #0
   15ef4:	subs	r7, r0, r3
   15ef8:	mov	r0, r5
   15efc:	sbcs	r7, ip, r4
   15f00:	umull	r5, r7, r3, r5
   15f04:	movwcc	r2, #1
   15f08:	cmp	r2, #0
   15f0c:	mla	r3, r3, sl, r7
   15f10:	mvnne	r5, #0
   15f14:	cmp	r2, #0
   15f18:	mla	r3, r4, r0, r3
   15f1c:	umull	r6, ip, r5, r0
   15f20:	mvnne	r3, #0
   15f24:	mla	ip, r5, sl, ip
   15f28:	mla	r7, r3, r0, ip
   15f2c:	ldr	r0, [sp, #20]
   15f30:	subs	r0, r0, r5
   15f34:	ldr	r0, [sp, #16]
   15f38:	sbcs	r0, r0, r3
   15f3c:	mov	r0, #0
   15f40:	movwcc	r0, #1
   15f44:	cmp	r0, #0
   15f48:	mov	r3, r0
   15f4c:	orr	r0, r1, lr
   15f50:	orr	r0, r0, r2
   15f54:	mvnne	r7, #0
   15f58:	mvnne	r6, #0
   15f5c:	orr	r3, r0, r3
   15f60:	b	165d8 <__assert_fail@plt+0x5418>
   15f64:	mvn	r0, #0
   15f68:	mvn	r1, #0
   15f6c:	mov	r2, r5
   15f70:	mov	r4, r3
   15f74:	str	r3, [sp, #24]
   15f78:	bl	17494 <__assert_fail@plt+0x62d4>
   15f7c:	umull	r3, r2, r6, r5
   15f80:	mla	r2, r6, r4, r2
   15f84:	subs	r6, r0, r6
   15f88:	sbcs	r6, r1, r7
   15f8c:	mov	r6, #0
   15f90:	mla	ip, r7, r5, r2
   15f94:	ldr	r2, [sp, #24]
   15f98:	movwcc	r6, #1
   15f9c:	cmp	r6, #0
   15fa0:	str	r6, [sp, #20]
   15fa4:	mov	r6, #0
   15fa8:	mvnne	r3, #0
   15fac:	mvnne	ip, #0
   15fb0:	subs	r4, r0, r3
   15fb4:	umull	r7, lr, r3, r5
   15fb8:	sbcs	r4, r1, ip
   15fbc:	movwcc	r6, #1
   15fc0:	mla	r3, r3, r2, lr
   15fc4:	cmp	r6, #0
   15fc8:	str	r6, [sp, #16]
   15fcc:	mvnne	r7, #0
   15fd0:	cmp	r6, #0
   15fd4:	umull	sl, r4, r7, r5
   15fd8:	mla	r4, r7, r2, r4
   15fdc:	mla	r2, ip, r5, r3
   15fe0:	mvnne	r2, #0
   15fe4:	subs	r3, r0, r7
   15fe8:	mov	ip, #0
   15fec:	mla	r6, r2, r5, r4
   15ff0:	sbcs	r2, r1, r2
   15ff4:	mov	r4, r0
   15ff8:	mov	r0, #0
   15ffc:	movwcc	r0, #1
   16000:	mov	r3, r4
   16004:	cmp	r0, #0
   16008:	str	r0, [sp, #12]
   1600c:	mov	r0, r1
   16010:	str	r3, [sp, #4]
   16014:	mvnne	sl, #0
   16018:	mvnne	r6, #0
   1601c:	str	r0, [sp, #8]
   16020:	subs	r2, r4, sl
   16024:	ldr	r4, [sp, #24]
   16028:	sbcs	r2, r1, r6
   1602c:	umull	r7, r2, sl, r5
   16030:	movwcc	ip, #1
   16034:	cmp	ip, #0
   16038:	mvnne	r7, #0
   1603c:	mla	r2, sl, r4, r2
   16040:	cmp	ip, #0
   16044:	mov	sl, #0
   16048:	umull	r1, lr, r7, r5
   1604c:	mla	r2, r6, r5, r2
   16050:	mvnne	r2, #0
   16054:	subs	r6, r3, r7
   16058:	mla	lr, r7, r4, lr
   1605c:	mla	lr, r2, r5, lr
   16060:	sbcs	r2, r0, r2
   16064:	mov	r2, #0
   16068:	movwcc	sl, #1
   1606c:	cmp	sl, #0
   16070:	mvnne	r1, #0
   16074:	mvnne	lr, #0
   16078:	subs	r6, r3, r1
   1607c:	ldr	r3, [sp, #24]
   16080:	sbcs	r6, r0, lr
   16084:	umull	r0, r7, r1, r5
   16088:	movwcc	r2, #1
   1608c:	cmp	r2, #0
   16090:	mvnne	r0, #0
   16094:	mla	r1, r1, r3, r7
   16098:	cmp	r2, #0
   1609c:	umull	r6, r4, r0, r5
   160a0:	mla	r1, lr, r5, r1
   160a4:	mvnne	r1, #0
   160a8:	mla	r4, r0, r3, r4
   160ac:	ldr	r3, [sp, #4]
   160b0:	mla	r7, r1, r5, r4
   160b4:	ldr	r5, [sp, #16]
   160b8:	subs	r0, r3, r0
   160bc:	ldr	r0, [sp, #8]
   160c0:	sbcs	r0, r0, r1
   160c4:	mov	r0, #0
   160c8:	movwcc	r0, #1
   160cc:	cmp	r0, #0
   160d0:	mov	r1, r0
   160d4:	ldr	r0, [sp, #20]
   160d8:	mvnne	r7, #0
   160dc:	mvnne	r6, #0
   160e0:	orr	r0, r0, r5
   160e4:	ldr	r5, [sp, #12]
   160e8:	orr	r0, r0, r5
   160ec:	orr	r0, r0, ip
   160f0:	orr	r0, r0, sl
   160f4:	orr	r0, r0, r2
   160f8:	orr	r0, r0, r1
   160fc:	b	16578 <__assert_fail@plt+0x53b8>
   16100:	mov	r1, #0
   16104:	lsl	r2, r7, #10
   16108:	lsl	r0, r6, #10
   1610c:	lsr	r3, r7, #22
   16110:	cmp	r1, r7, lsr #22
   16114:	orr	r2, r2, r6, lsr #22
   16118:	mvnne	r0, #0
   1611c:	movwne	r3, #1
   16120:	cmp	r1, r7, lsr #22
   16124:	b	165a4 <__assert_fail@plt+0x53e4>
   16128:	mvn	r0, #0
   1612c:	mvn	r1, #0
   16130:	mov	r2, r5
   16134:	mov	sl, r3
   16138:	bl	17494 <__assert_fail@plt+0x62d4>
   1613c:	subs	r2, r0, r6
   16140:	mov	ip, r0
   16144:	mov	r0, #0
   16148:	sbcs	r2, r1, r7
   1614c:	umull	r4, r2, r6, r5
   16150:	movwcc	r0, #1
   16154:	cmp	r0, #0
   16158:	mla	r2, r6, sl, r2
   1615c:	str	r0, [sp, #20]
   16160:	mvnne	r4, #0
   16164:	cmp	r0, #0
   16168:	mla	r2, r7, r5, r2
   1616c:	mov	r0, #0
   16170:	umull	lr, r3, r4, r5
   16174:	mvnne	r2, #0
   16178:	mla	r3, r4, sl, r3
   1617c:	mla	r6, r2, r5, r3
   16180:	subs	r3, ip, r4
   16184:	mov	r3, r1
   16188:	sbcs	r2, r1, r2
   1618c:	str	r3, [sp, #8]
   16190:	movwcc	r0, #1
   16194:	cmp	r0, #0
   16198:	str	r0, [sp, #16]
   1619c:	mov	r0, ip
   161a0:	mvnne	lr, #0
   161a4:	mvnne	r6, #0
   161a8:	str	r0, [sp, #12]
   161ac:	subs	r2, ip, lr
   161b0:	umull	r7, r4, lr, r5
   161b4:	sbcs	r2, r1, r6
   161b8:	mov	r2, #0
   161bc:	movwcc	r2, #1
   161c0:	mla	r4, lr, sl, r4
   161c4:	cmp	r2, #0
   161c8:	mla	r6, r6, r5, r4
   161cc:	mov	r4, #0
   161d0:	mvnne	r7, #0
   161d4:	cmp	r2, #0
   161d8:	umull	r1, ip, r7, r5
   161dc:	mvnne	r6, #0
   161e0:	mla	ip, r7, sl, ip
   161e4:	subs	r7, r0, r7
   161e8:	sbcs	r7, r3, r6
   161ec:	mla	lr, r6, r5, ip
   161f0:	mov	ip, #0
   161f4:	movwcc	ip, #1
   161f8:	cmp	ip, #0
   161fc:	mvnne	r1, #0
   16200:	mvnne	lr, #0
   16204:	subs	r7, r0, r1
   16208:	sbcs	r7, r3, lr
   1620c:	umull	r0, r7, r1, r5
   16210:	movwcc	r4, #1
   16214:	cmp	r4, #0
   16218:	mla	r1, r1, sl, r7
   1621c:	mvnne	r0, #0
   16220:	cmp	r4, #0
   16224:	mla	r1, lr, r5, r1
   16228:	umull	r6, r3, r0, r5
   1622c:	mvnne	r1, #0
   16230:	mla	r3, r0, sl, r3
   16234:	mla	r7, r1, r5, r3
   16238:	ldr	r3, [sp, #12]
   1623c:	subs	r0, r3, r0
   16240:	ldr	r0, [sp, #8]
   16244:	ldr	r3, [sp, #16]
   16248:	sbcs	r0, r0, r1
   1624c:	mov	r0, #0
   16250:	movwcc	r0, #1
   16254:	cmp	r0, #0
   16258:	mov	r1, r0
   1625c:	ldr	r0, [sp, #20]
   16260:	mvnne	r7, #0
   16264:	mvnne	r6, #0
   16268:	orr	r0, r0, r3
   1626c:	orr	r0, r0, r2
   16270:	orr	r0, r0, ip
   16274:	orr	r0, r0, r4
   16278:	orr	r3, r0, r1
   1627c:	b	165d8 <__assert_fail@plt+0x5418>
   16280:	mvn	r0, #0
   16284:	mvn	r1, #0
   16288:	mov	r2, r5
   1628c:	mov	sl, r3
   16290:	bl	17494 <__assert_fail@plt+0x62d4>
   16294:	umull	r3, r2, r6, r5
   16298:	mov	lr, r1
   1629c:	mov	r1, r0
   162a0:	mla	r2, r6, sl, r2
   162a4:	subs	r6, r0, r6
   162a8:	mov	r0, #0
   162ac:	sbcs	r6, lr, r7
   162b0:	mla	r2, r7, r5, r2
   162b4:	movwcc	r0, #1
   162b8:	cmp	r0, #0
   162bc:	str	r0, [sp, #20]
   162c0:	mov	r0, r1
   162c4:	mvnne	r3, #0
   162c8:	mvnne	r2, #0
   162cc:	str	r0, [sp, #16]
   162d0:	subs	r4, r1, r3
   162d4:	umull	r7, ip, r3, r5
   162d8:	sbcs	r4, lr, r2
   162dc:	mov	r4, #0
   162e0:	movwcc	r4, #1
   162e4:	mla	r3, r3, sl, ip
   162e8:	mov	ip, #0
   162ec:	cmp	r4, #0
   162f0:	mla	r2, r2, r5, r3
   162f4:	mvnne	r7, #0
   162f8:	cmp	r4, #0
   162fc:	umull	r1, r6, r7, r5
   16300:	mvnne	r2, #0
   16304:	mla	r6, r7, sl, r6
   16308:	mla	r3, r2, r5, r6
   1630c:	subs	r6, r0, r7
   16310:	sbcs	r2, lr, r2
   16314:	mov	r2, #0
   16318:	movwcc	ip, #1
   1631c:	cmp	ip, #0
   16320:	mvnne	r1, #0
   16324:	mvnne	r3, #0
   16328:	subs	r6, r0, r1
   1632c:	sbcs	r6, lr, r3
   16330:	umull	r0, r6, r1, r5
   16334:	movwcc	r2, #1
   16338:	cmp	r2, #0
   1633c:	mvnne	r0, #0
   16340:	cmp	r2, #0
   16344:	str	r6, [sp, #12]
   16348:	umull	r6, r7, r0, r5
   1634c:	mla	r7, r0, sl, r7
   16350:	str	r7, [sp, #8]
   16354:	ldr	r7, [sp, #12]
   16358:	mla	r1, r1, sl, r7
   1635c:	mla	r1, r3, r5, r1
   16360:	ldr	r3, [sp, #8]
   16364:	mvnne	r1, #0
   16368:	mla	r7, r1, r5, r3
   1636c:	ldr	r3, [sp, #16]
   16370:	subs	r0, r3, r0
   16374:	sbcs	r0, lr, r1
   16378:	mov	r0, #0
   1637c:	movwcc	r0, #1
   16380:	cmp	r0, #0
   16384:	mov	r1, r0
   16388:	ldr	r0, [sp, #20]
   1638c:	mvnne	r7, #0
   16390:	mvnne	r6, #0
   16394:	orr	r0, r0, r4
   16398:	orr	r0, r0, ip
   1639c:	orr	r0, r0, r2
   163a0:	orr	r3, r0, r1
   163a4:	b	165d8 <__assert_fail@plt+0x5418>
   163a8:	mvn	r0, #0
   163ac:	mvn	r1, #0
   163b0:	mov	r2, r5
   163b4:	mov	sl, r3
   163b8:	bl	17494 <__assert_fail@plt+0x62d4>
   163bc:	mov	lr, r0
   163c0:	subs	r0, r0, r6
   163c4:	mov	r2, #0
   163c8:	mov	ip, r1
   163cc:	str	sl, [sp, #24]
   163d0:	sbcs	r0, r1, r7
   163d4:	umull	r3, r1, r6, r5
   163d8:	str	lr, [sp, #4]
   163dc:	movwcc	r2, #1
   163e0:	cmp	r2, #0
   163e4:	mla	r6, r6, sl, r1
   163e8:	mov	r1, #0
   163ec:	str	r2, [sp, #20]
   163f0:	mvnne	r3, #0
   163f4:	cmp	r2, #0
   163f8:	mla	r7, r7, r5, r6
   163fc:	mov	r2, #0
   16400:	umull	r0, r4, r3, r5
   16404:	mvnne	r7, #0
   16408:	mla	r4, r3, sl, r4
   1640c:	subs	r3, lr, r3
   16410:	sbcs	r3, ip, r7
   16414:	mla	r4, r7, r5, r4
   16418:	movwcc	r1, #1
   1641c:	cmp	r1, #0
   16420:	str	r1, [sp, #16]
   16424:	mvnne	r0, #0
   16428:	mvnne	r4, #0
   1642c:	subs	r3, lr, r0
   16430:	sbcs	r3, ip, r4
   16434:	umull	r6, r3, r0, r5
   16438:	movwcc	r2, #1
   1643c:	cmp	r2, #0
   16440:	mla	r0, r0, sl, r3
   16444:	str	r2, [sp, #12]
   16448:	mvnne	r6, #0
   1644c:	cmp	r2, #0
   16450:	mla	r0, r4, r5, r0
   16454:	ldr	r4, [sp, #24]
   16458:	umull	r1, r7, r6, r5
   1645c:	mvnne	r0, #0
   16460:	subs	r3, lr, r6
   16464:	mov	r3, ip
   16468:	str	r3, [sp]
   1646c:	mla	r7, r6, sl, r7
   16470:	mla	r7, r0, r5, r7
   16474:	sbcs	r0, ip, r0
   16478:	mov	r0, #0
   1647c:	movwcc	r0, #1
   16480:	cmp	r0, #0
   16484:	str	r0, [sp, #8]
   16488:	mvnne	r1, #0
   1648c:	mvnne	r7, #0
   16490:	subs	r0, lr, r1
   16494:	sbcs	r0, ip, r7
   16498:	mov	ip, #0
   1649c:	umull	r6, r0, r1, r5
   164a0:	movwcc	ip, #1
   164a4:	cmp	ip, #0
   164a8:	mla	r1, r1, r4, r0
   164ac:	mov	r0, lr
   164b0:	mvnne	r6, #0
   164b4:	cmp	ip, #0
   164b8:	mla	r1, r7, r5, r1
   164bc:	umull	r2, sl, r6, r5
   164c0:	mvnne	r1, #0
   164c4:	mla	sl, r6, r4, sl
   164c8:	subs	r6, lr, r6
   164cc:	mov	lr, #0
   164d0:	mla	r7, r1, r5, sl
   164d4:	sbcs	r1, r3, r1
   164d8:	ldr	r1, [sp, #24]
   164dc:	movwcc	lr, #1
   164e0:	cmp	lr, #0
   164e4:	mvnne	r2, #0
   164e8:	mvnne	r7, #0
   164ec:	subs	r6, r0, r2
   164f0:	umull	r0, sl, r2, r5
   164f4:	sbcs	r6, r3, r7
   164f8:	mov	r3, #0
   164fc:	movwcc	r3, #1
   16500:	mla	r2, r2, r1, sl
   16504:	cmp	r3, #0
   16508:	mla	r2, r7, r5, r2
   1650c:	mvnne	r0, #0
   16510:	cmp	r3, #0
   16514:	umull	r6, r4, r0, r5
   16518:	mvnne	r2, #0
   1651c:	mla	r4, r0, r1, r4
   16520:	ldr	r1, [sp, #4]
   16524:	mla	r7, r2, r5, r4
   16528:	ldr	r5, [sp, #16]
   1652c:	subs	r0, r1, r0
   16530:	ldr	r0, [sp]
   16534:	sbcs	r0, r0, r2
   16538:	mov	r0, #0
   1653c:	movwcc	r0, #1
   16540:	cmp	r0, #0
   16544:	mov	r2, r0
   16548:	ldr	r0, [sp, #20]
   1654c:	mvnne	r7, #0
   16550:	mvnne	r6, #0
   16554:	orr	r0, r0, r5
   16558:	ldr	r5, [sp, #12]
   1655c:	orr	r0, r0, r5
   16560:	ldr	r5, [sp, #8]
   16564:	orr	r0, r0, r5
   16568:	orr	r0, r0, ip
   1656c:	orr	r0, r0, lr
   16570:	orr	r0, r0, r3
   16574:	orr	r0, r0, r2
   16578:	and	r3, r0, #1
   1657c:	b	165d8 <__assert_fail@plt+0x5418>
   16580:	mov	r1, #0
   16584:	lsl	r2, r7, #9
   16588:	lsl	r0, r6, #9
   1658c:	lsr	r3, r7, #23
   16590:	cmp	r1, r7, lsr #23
   16594:	orr	r2, r2, r6, lsr #23
   16598:	mvnne	r0, #0
   1659c:	movwne	r3, #1
   165a0:	cmp	r1, r7, lsr #23
   165a4:	mvnne	r2, #0
   165a8:	mov	r6, r0
   165ac:	mov	r7, r2
   165b0:	b	165d8 <__assert_fail@plt+0x5418>
   165b4:	lsl	r1, r7, #1
   165b8:	cmp	r7, #0
   165bc:	lsl	r0, r6, #1
   165c0:	lsr	r3, r7, #31
   165c4:	orr	r1, r1, r6, lsr #31
   165c8:	mvnmi	r0, #0
   165cc:	mvnmi	r1, #0
   165d0:	mov	r6, r0
   165d4:	mov	r7, r1
   165d8:	ldr	r1, [sp, #32]
   165dc:	ldr	r2, [sp, #28]
   165e0:	orr	r8, r3, r8
   165e4:	add	r0, r1, r2
   165e8:	str	r0, [r9]
   165ec:	ldrb	r0, [r1, r2]
   165f0:	cmp	r0, #0
   165f4:	orrne	r8, r8, #2
   165f8:	ldr	r0, [sp, #36]	; 0x24
   165fc:	strd	r6, [r0]
   16600:	mov	r0, r8
   16604:	sub	sp, fp, #28
   16608:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1660c:	movw	r0, #32609	; 0x7f61
   16610:	movw	r1, #32647	; 0x7f87
   16614:	movw	r3, #32663	; 0x7f97
   16618:	mov	r2, #85	; 0x55
   1661c:	movt	r0, #1
   16620:	movt	r1, #1
   16624:	movt	r3, #1
   16628:	bl	111c0 <__assert_fail@plt>
   1662c:	clz	r2, r1
   16630:	clz	r3, r0
   16634:	lsr	r2, r2, #5
   16638:	lsr	r3, r3, #5
   1663c:	orrs	r2, r3, r2
   16640:	movwne	r1, #1
   16644:	movwne	r0, #1
   16648:	cmp	r1, #0
   1664c:	beq	1667c <__assert_fail@plt+0x54bc>
   16650:	mvn	r2, #-2147483648	; 0x80000000
   16654:	udiv	r2, r2, r1
   16658:	cmp	r2, r0
   1665c:	bcs	1667c <__assert_fail@plt+0x54bc>
   16660:	push	{fp, lr}
   16664:	mov	fp, sp
   16668:	bl	110ac <__errno_location@plt>
   1666c:	mov	r1, #12
   16670:	str	r1, [r0]
   16674:	mov	r0, #0
   16678:	pop	{fp, pc}
   1667c:	b	10f20 <calloc@plt>
   16680:	cmp	r0, #0
   16684:	movweq	r0, #1
   16688:	cmn	r0, #1
   1668c:	ble	16694 <__assert_fail@plt+0x54d4>
   16690:	b	11034 <malloc@plt>
   16694:	push	{fp, lr}
   16698:	mov	fp, sp
   1669c:	bl	110ac <__errno_location@plt>
   166a0:	mov	r1, #12
   166a4:	str	r1, [r0]
   166a8:	mov	r0, #0
   166ac:	pop	{fp, pc}
   166b0:	push	{fp, lr}
   166b4:	mov	fp, sp
   166b8:	cmp	r0, #0
   166bc:	beq	166d8 <__assert_fail@plt+0x5518>
   166c0:	cmp	r1, #0
   166c4:	beq	166e4 <__assert_fail@plt+0x5524>
   166c8:	cmn	r1, #1
   166cc:	ble	166f0 <__assert_fail@plt+0x5530>
   166d0:	pop	{fp, lr}
   166d4:	b	10fbc <realloc@plt>
   166d8:	mov	r0, r1
   166dc:	pop	{fp, lr}
   166e0:	b	16680 <__assert_fail@plt+0x54c0>
   166e4:	bl	12220 <__assert_fail@plt+0x1060>
   166e8:	mov	r0, #0
   166ec:	pop	{fp, pc}
   166f0:	bl	110ac <__errno_location@plt>
   166f4:	mov	r1, #12
   166f8:	str	r1, [r0]
   166fc:	mov	r0, #0
   16700:	pop	{fp, pc}
   16704:	mov	r0, #1
   16708:	b	118ec <__assert_fail@plt+0x72c>
   1670c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16710:	add	fp, sp, #28
   16714:	sub	sp, sp, #12
   16718:	mov	r4, r3
   1671c:	mov	r6, r2
   16720:	mov	r5, r1
   16724:	mov	sl, r0
   16728:	bl	11094 <strlen@plt>
   1672c:	ldr	r8, [r5]
   16730:	cmp	r8, #0
   16734:	beq	167f4 <__assert_fail@plt+0x5634>
   16738:	mov	r7, r0
   1673c:	mov	r0, #0
   16740:	add	r9, r5, #4
   16744:	mov	r5, #0
   16748:	str	r6, [sp, #4]
   1674c:	str	r0, [sp]
   16750:	mvn	r0, #0
   16754:	str	r0, [sp, #8]
   16758:	b	16774 <__assert_fail@plt+0x55b4>
   1675c:	str	r5, [sp, #8]
   16760:	ldr	r8, [r9, r5, lsl #2]
   16764:	add	r6, r6, r4
   16768:	add	r5, r5, #1
   1676c:	cmp	r8, #0
   16770:	beq	167dc <__assert_fail@plt+0x561c>
   16774:	mov	r0, r8
   16778:	mov	r1, sl
   1677c:	mov	r2, r7
   16780:	bl	1119c <strncmp@plt>
   16784:	cmp	r0, #0
   16788:	bne	16760 <__assert_fail@plt+0x55a0>
   1678c:	mov	r0, r8
   16790:	bl	11094 <strlen@plt>
   16794:	cmp	r0, r7
   16798:	beq	167f8 <__assert_fail@plt+0x5638>
   1679c:	ldr	r0, [sp, #8]
   167a0:	cmn	r0, #1
   167a4:	beq	1675c <__assert_fail@plt+0x559c>
   167a8:	ldr	r0, [sp, #4]
   167ac:	cmp	r0, #0
   167b0:	beq	167d0 <__assert_fail@plt+0x5610>
   167b4:	ldr	r1, [sp, #8]
   167b8:	mov	r2, r4
   167bc:	mla	r0, r1, r4, r0
   167c0:	mov	r1, r6
   167c4:	bl	11088 <bcmp@plt>
   167c8:	cmp	r0, #0
   167cc:	beq	16760 <__assert_fail@plt+0x55a0>
   167d0:	mov	r0, #1
   167d4:	str	r0, [sp]
   167d8:	b	16760 <__assert_fail@plt+0x55a0>
   167dc:	ldr	r0, [sp]
   167e0:	tst	r0, #1
   167e4:	ldr	r0, [sp, #8]
   167e8:	mvnne	r0, #1
   167ec:	sub	sp, fp, #28
   167f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167f4:	mvn	r5, #0
   167f8:	mov	r0, r5
   167fc:	sub	sp, fp, #28
   16800:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16804:	push	{r4, r5, r6, r7, fp, lr}
   16808:	add	fp, sp, #16
   1680c:	mov	r5, r0
   16810:	ldr	r0, [r1]
   16814:	mvn	r4, #0
   16818:	cmp	r0, #0
   1681c:	beq	16848 <__assert_fail@plt+0x5688>
   16820:	add	r7, r1, #4
   16824:	mov	r6, #0
   16828:	mov	r1, r5
   1682c:	bl	10f44 <strcmp@plt>
   16830:	cmp	r0, #0
   16834:	beq	16850 <__assert_fail@plt+0x5690>
   16838:	ldr	r0, [r7, r6, lsl #2]
   1683c:	add	r6, r6, #1
   16840:	cmp	r0, #0
   16844:	bne	16828 <__assert_fail@plt+0x5668>
   16848:	mov	r0, r4
   1684c:	pop	{r4, r5, r6, r7, fp, pc}
   16850:	mov	r0, r6
   16854:	pop	{r4, r5, r6, r7, fp, pc}
   16858:	push	{r4, r5, r6, sl, fp, lr}
   1685c:	add	fp, sp, #16
   16860:	sub	sp, sp, #8
   16864:	mov	r5, r0
   16868:	movw	r0, #32742	; 0x7fe6
   1686c:	mov	r4, r1
   16870:	movw	r1, #32769	; 0x8001
   16874:	cmn	r2, #1
   16878:	mov	r2, #5
   1687c:	movt	r0, #1
   16880:	movt	r1, #1
   16884:	moveq	r1, r0
   16888:	mov	r0, #0
   1688c:	bl	10fb0 <dcgettext@plt>
   16890:	mov	r6, r0
   16894:	mov	r0, #0
   16898:	mov	r1, #8
   1689c:	mov	r2, r4
   168a0:	bl	1462c <__assert_fail@plt+0x346c>
   168a4:	mov	r4, r0
   168a8:	mov	r0, #1
   168ac:	mov	r1, r5
   168b0:	bl	14bec <__assert_fail@plt+0x3a2c>
   168b4:	str	r0, [sp]
   168b8:	mov	r0, #0
   168bc:	mov	r1, #0
   168c0:	mov	r2, r6
   168c4:	mov	r3, r4
   168c8:	bl	1101c <error@plt>
   168cc:	sub	sp, fp, #16
   168d0:	pop	{r4, r5, r6, sl, fp, pc}
   168d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168d8:	add	fp, sp, #28
   168dc:	sub	sp, sp, #4
   168e0:	mov	sl, r1
   168e4:	movw	r1, #32798	; 0x801e
   168e8:	mov	r4, r2
   168ec:	mov	r6, r0
   168f0:	mov	r0, #0
   168f4:	mov	r2, #5
   168f8:	mov	r8, #0
   168fc:	movt	r1, #1
   16900:	bl	10fb0 <dcgettext@plt>
   16904:	movw	r1, #37216	; 0x9160
   16908:	movt	r1, #2
   1690c:	ldr	r1, [r1]
   16910:	bl	10f2c <fputs_unlocked@plt>
   16914:	ldr	r7, [r6]
   16918:	cmp	r7, #0
   1691c:	beq	169d8 <__assert_fail@plt+0x5818>
   16920:	add	r0, r6, #4
   16924:	mov	r9, #0
   16928:	mov	r6, #0
   1692c:	str	r0, [sp]
   16930:	cmp	r9, #0
   16934:	bne	1698c <__assert_fail@plt+0x57cc>
   16938:	mov	r5, #0
   1693c:	movw	r0, #37216	; 0x9160
   16940:	movt	r0, #2
   16944:	ldr	r6, [r0]
   16948:	mov	r0, r7
   1694c:	bl	14bfc <__assert_fail@plt+0x3a3c>
   16950:	movw	r2, #32819	; 0x8033
   16954:	mov	r3, r0
   16958:	mov	r0, r6
   1695c:	mov	r1, #1
   16960:	movt	r2, #1
   16964:	bl	11100 <__fprintf_chk@plt>
   16968:	add	r6, sl, r5
   1696c:	ldr	r0, [sp]
   16970:	add	r8, r8, r4
   16974:	ldr	r7, [r0, -r9, lsl #2]
   16978:	sub	r9, r9, #1
   1697c:	cmp	r7, #0
   16980:	beq	169d8 <__assert_fail@plt+0x5818>
   16984:	cmp	r9, #0
   16988:	beq	16938 <__assert_fail@plt+0x5778>
   1698c:	add	r1, sl, r8
   16990:	mov	r0, r6
   16994:	mov	r2, r4
   16998:	bl	11088 <bcmp@plt>
   1699c:	cmp	r0, #0
   169a0:	mov	r5, r8
   169a4:	bne	1693c <__assert_fail@plt+0x577c>
   169a8:	movw	r0, #37216	; 0x9160
   169ac:	movt	r0, #2
   169b0:	ldr	r5, [r0]
   169b4:	mov	r0, r7
   169b8:	bl	14bfc <__assert_fail@plt+0x3a3c>
   169bc:	movw	r2, #32827	; 0x803b
   169c0:	mov	r3, r0
   169c4:	mov	r0, r5
   169c8:	mov	r1, #1
   169cc:	movt	r2, #1
   169d0:	bl	11100 <__fprintf_chk@plt>
   169d4:	b	1696c <__assert_fail@plt+0x57ac>
   169d8:	movw	r0, #37216	; 0x9160
   169dc:	movt	r0, #2
   169e0:	ldr	r0, [r0]
   169e4:	ldr	r1, [r0, #20]
   169e8:	ldr	r2, [r0, #24]
   169ec:	cmp	r1, r2
   169f0:	addcc	r2, r1, #1
   169f4:	strcc	r2, [r0, #20]
   169f8:	movcc	r0, #10
   169fc:	strbcc	r0, [r1]
   16a00:	subcc	sp, fp, #28
   16a04:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a08:	mov	r1, #10
   16a0c:	sub	sp, fp, #28
   16a10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a14:	b	11130 <__overflow@plt>
   16a18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a1c:	add	fp, sp, #28
   16a20:	sub	sp, sp, #20
   16a24:	mov	r9, r0
   16a28:	ldr	r0, [fp, #16]
   16a2c:	mov	r8, r3
   16a30:	mov	sl, r2
   16a34:	mov	r7, r1
   16a38:	cmp	r0, #0
   16a3c:	beq	16afc <__assert_fail@plt+0x593c>
   16a40:	mov	r0, r7
   16a44:	str	r9, [sp, #8]
   16a48:	str	r8, [sp, #16]
   16a4c:	bl	11094 <strlen@plt>
   16a50:	ldr	r9, [sl]
   16a54:	cmp	r9, #0
   16a58:	beq	16b6c <__assert_fail@plt+0x59ac>
   16a5c:	str	sl, [sp, #4]
   16a60:	add	r8, sl, #4
   16a64:	ldr	sl, [sp, #16]
   16a68:	mov	r4, r0
   16a6c:	mov	r0, #0
   16a70:	mvn	r6, #0
   16a74:	mov	r5, #0
   16a78:	str	r0, [sp, #12]
   16a7c:	b	16a9c <__assert_fail@plt+0x58dc>
   16a80:	mov	r6, r5
   16a84:	ldr	r9, [r8, r5, lsl #2]
   16a88:	ldr	r0, [fp, #8]
   16a8c:	add	r5, r5, #1
   16a90:	add	sl, sl, r0
   16a94:	cmp	r9, #0
   16a98:	beq	16b3c <__assert_fail@plt+0x597c>
   16a9c:	mov	r0, r9
   16aa0:	mov	r1, r7
   16aa4:	mov	r2, r4
   16aa8:	bl	1119c <strncmp@plt>
   16aac:	cmp	r0, #0
   16ab0:	bne	16a84 <__assert_fail@plt+0x58c4>
   16ab4:	mov	r0, r9
   16ab8:	bl	11094 <strlen@plt>
   16abc:	cmp	r0, r4
   16ac0:	beq	16bf0 <__assert_fail@plt+0x5a30>
   16ac4:	cmn	r6, #1
   16ac8:	beq	16a80 <__assert_fail@plt+0x58c0>
   16acc:	ldr	r0, [sp, #16]
   16ad0:	cmp	r0, #0
   16ad4:	beq	16af0 <__assert_fail@plt+0x5930>
   16ad8:	ldr	r2, [fp, #8]
   16adc:	mov	r1, sl
   16ae0:	mla	r0, r6, r2, r0
   16ae4:	bl	11088 <bcmp@plt>
   16ae8:	cmp	r0, #0
   16aec:	beq	16a84 <__assert_fail@plt+0x58c4>
   16af0:	mov	r0, #1
   16af4:	str	r0, [sp, #12]
   16af8:	b	16a84 <__assert_fail@plt+0x58c4>
   16afc:	ldr	r0, [sl]
   16b00:	movw	r4, #32742	; 0x7fe6
   16b04:	movt	r4, #1
   16b08:	cmp	r0, #0
   16b0c:	beq	16b7c <__assert_fail@plt+0x59bc>
   16b10:	add	r5, sl, #4
   16b14:	mov	r6, #0
   16b18:	mov	r1, r7
   16b1c:	bl	10f44 <strcmp@plt>
   16b20:	cmp	r0, #0
   16b24:	beq	16b54 <__assert_fail@plt+0x5994>
   16b28:	ldr	r0, [r5, r6, lsl #2]
   16b2c:	add	r6, r6, #1
   16b30:	cmp	r0, #0
   16b34:	bne	16b18 <__assert_fail@plt+0x5958>
   16b38:	b	16b7c <__assert_fail@plt+0x59bc>
   16b3c:	ldr	r0, [sp, #12]
   16b40:	ldr	r8, [sp, #16]
   16b44:	ldr	sl, [sp, #4]
   16b48:	ldr	r9, [sp, #8]
   16b4c:	tst	r0, #1
   16b50:	bne	16b60 <__assert_fail@plt+0x59a0>
   16b54:	cmn	r6, #1
   16b58:	bgt	16be4 <__assert_fail@plt+0x5a24>
   16b5c:	beq	16b74 <__assert_fail@plt+0x59b4>
   16b60:	movw	r4, #32769	; 0x8001
   16b64:	movt	r4, #1
   16b68:	b	16b7c <__assert_fail@plt+0x59bc>
   16b6c:	ldr	r8, [sp, #16]
   16b70:	ldr	r9, [sp, #8]
   16b74:	movw	r4, #32742	; 0x7fe6
   16b78:	movt	r4, #1
   16b7c:	ldr	r6, [fp, #12]
   16b80:	mov	r0, #0
   16b84:	mov	r1, r4
   16b88:	mov	r2, #5
   16b8c:	bl	10fb0 <dcgettext@plt>
   16b90:	mov	r4, r0
   16b94:	mov	r0, #0
   16b98:	mov	r1, #8
   16b9c:	mov	r2, r7
   16ba0:	bl	1462c <__assert_fail@plt+0x346c>
   16ba4:	mov	r5, r0
   16ba8:	mov	r0, #1
   16bac:	mov	r1, r9
   16bb0:	bl	14bec <__assert_fail@plt+0x3a2c>
   16bb4:	str	r0, [sp]
   16bb8:	mov	r0, #0
   16bbc:	mov	r1, #0
   16bc0:	mov	r2, r4
   16bc4:	mov	r3, r5
   16bc8:	bl	1101c <error@plt>
   16bcc:	ldr	r2, [fp, #8]
   16bd0:	mov	r0, sl
   16bd4:	mov	r1, r8
   16bd8:	bl	168d4 <__assert_fail@plt+0x5714>
   16bdc:	blx	r6
   16be0:	mvn	r6, #0
   16be4:	mov	r0, r6
   16be8:	sub	sp, fp, #28
   16bec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bf0:	ldr	r8, [sp, #16]
   16bf4:	ldr	sl, [sp, #4]
   16bf8:	ldr	r9, [sp, #8]
   16bfc:	mov	r6, r5
   16c00:	cmn	r6, #1
   16c04:	bgt	16be4 <__assert_fail@plt+0x5a24>
   16c08:	b	16b5c <__assert_fail@plt+0x599c>
   16c0c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16c10:	add	fp, sp, #24
   16c14:	ldr	r6, [r1]
   16c18:	cmp	r6, #0
   16c1c:	beq	16c80 <__assert_fail@plt+0x5ac0>
   16c20:	mov	r8, r1
   16c24:	mov	r7, r2
   16c28:	mov	r1, r2
   16c2c:	mov	r2, r3
   16c30:	mov	r4, r3
   16c34:	mov	r9, r0
   16c38:	bl	11088 <bcmp@plt>
   16c3c:	cmp	r0, #0
   16c40:	beq	16c78 <__assert_fail@plt+0x5ab8>
   16c44:	add	r7, r7, r4
   16c48:	add	r5, r8, #4
   16c4c:	ldr	r6, [r5]
   16c50:	cmp	r6, #0
   16c54:	beq	16c80 <__assert_fail@plt+0x5ac0>
   16c58:	mov	r0, r9
   16c5c:	mov	r1, r7
   16c60:	mov	r2, r4
   16c64:	bl	11088 <bcmp@plt>
   16c68:	add	r7, r7, r4
   16c6c:	add	r5, r5, #4
   16c70:	cmp	r0, #0
   16c74:	bne	16c4c <__assert_fail@plt+0x5a8c>
   16c78:	mov	r0, r6
   16c7c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16c80:	mov	r6, #0
   16c84:	mov	r0, r6
   16c88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16c8c:	push	{r4, r5, r6, sl, fp, lr}
   16c90:	add	fp, sp, #16
   16c94:	mov	r4, r0
   16c98:	bl	11004 <__fpending@plt>
   16c9c:	ldr	r6, [r4]
   16ca0:	mov	r5, r0
   16ca4:	mov	r0, r4
   16ca8:	bl	12078 <__assert_fail@plt+0xeb8>
   16cac:	tst	r6, #32
   16cb0:	bne	16ce8 <__assert_fail@plt+0x5b28>
   16cb4:	cmp	r0, #0
   16cb8:	mov	r4, r0
   16cbc:	mvnne	r4, #0
   16cc0:	cmp	r5, #0
   16cc4:	bne	16cf4 <__assert_fail@plt+0x5b34>
   16cc8:	cmp	r0, #0
   16ccc:	beq	16cf4 <__assert_fail@plt+0x5b34>
   16cd0:	bl	110ac <__errno_location@plt>
   16cd4:	ldr	r0, [r0]
   16cd8:	subs	r4, r0, #9
   16cdc:	mvnne	r4, #0
   16ce0:	mov	r0, r4
   16ce4:	pop	{r4, r5, r6, sl, fp, pc}
   16ce8:	mvn	r4, #0
   16cec:	cmp	r0, #0
   16cf0:	beq	16cfc <__assert_fail@plt+0x5b3c>
   16cf4:	mov	r0, r4
   16cf8:	pop	{r4, r5, r6, sl, fp, pc}
   16cfc:	bl	110ac <__errno_location@plt>
   16d00:	mov	r1, #0
   16d04:	str	r1, [r0]
   16d08:	mov	r0, r4
   16d0c:	pop	{r4, r5, r6, sl, fp, pc}
   16d10:	sub	sp, sp, #8
   16d14:	push	{r4, r5, r6, r7, fp, lr}
   16d18:	add	fp, sp, #16
   16d1c:	sub	sp, sp, #8
   16d20:	mov	r5, r0
   16d24:	add	r0, fp, #8
   16d28:	cmp	r1, #11
   16d2c:	str	r2, [fp, #8]
   16d30:	str	r3, [fp, #12]
   16d34:	str	r0, [sp, #4]
   16d38:	bhi	16d74 <__assert_fail@plt+0x5bb4>
   16d3c:	mov	r0, #1
   16d40:	movw	r2, #1300	; 0x514
   16d44:	tst	r2, r0, lsl r1
   16d48:	bne	16e34 <__assert_fail@plt+0x5c74>
   16d4c:	movw	r2, #2570	; 0xa0a
   16d50:	tst	r2, r0, lsl r1
   16d54:	bne	16d9c <__assert_fail@plt+0x5bdc>
   16d58:	cmp	r1, #0
   16d5c:	bne	16d74 <__assert_fail@plt+0x5bb4>
   16d60:	ldr	r0, [sp, #4]
   16d64:	add	r1, r0, #4
   16d68:	str	r1, [sp, #4]
   16d6c:	mov	r1, #0
   16d70:	b	16e40 <__assert_fail@plt+0x5c80>
   16d74:	sub	r0, r1, #1024	; 0x400
   16d78:	cmp	r0, #10
   16d7c:	bhi	16e34 <__assert_fail@plt+0x5c74>
   16d80:	mov	r2, #1
   16d84:	movw	r3, #645	; 0x285
   16d88:	tst	r3, r2, lsl r0
   16d8c:	bne	16e34 <__assert_fail@plt+0x5c74>
   16d90:	movw	r3, #1282	; 0x502
   16d94:	tst	r3, r2, lsl r0
   16d98:	beq	16da8 <__assert_fail@plt+0x5be8>
   16d9c:	mov	r0, r5
   16da0:	bl	11124 <fcntl64@plt>
   16da4:	b	16e4c <__assert_fail@plt+0x5c8c>
   16da8:	cmp	r0, #6
   16dac:	bne	16e34 <__assert_fail@plt+0x5c74>
   16db0:	ldr	r0, [sp, #4]
   16db4:	movw	r7, #37560	; 0x92b8
   16db8:	movt	r7, #2
   16dbc:	add	r1, r0, #4
   16dc0:	str	r1, [sp, #4]
   16dc4:	ldr	r6, [r0]
   16dc8:	ldr	r0, [r7]
   16dcc:	cmp	r0, #0
   16dd0:	bmi	16e70 <__assert_fail@plt+0x5cb0>
   16dd4:	mov	r0, r5
   16dd8:	movw	r1, #1030	; 0x406
   16ddc:	mov	r2, r6
   16de0:	bl	11124 <fcntl64@plt>
   16de4:	mov	r4, r0
   16de8:	cmn	r0, #1
   16dec:	bgt	16e64 <__assert_fail@plt+0x5ca4>
   16df0:	bl	110ac <__errno_location@plt>
   16df4:	ldr	r0, [r0]
   16df8:	cmp	r0, #22
   16dfc:	bne	16e64 <__assert_fail@plt+0x5ca4>
   16e00:	mov	r0, r5
   16e04:	mov	r1, #0
   16e08:	mov	r2, r6
   16e0c:	bl	11124 <fcntl64@plt>
   16e10:	mov	r4, r0
   16e14:	cmp	r0, #0
   16e18:	bmi	16e50 <__assert_fail@plt+0x5c90>
   16e1c:	mvn	r0, #0
   16e20:	str	r0, [r7]
   16e24:	mov	r0, #1
   16e28:	cmp	r0, #0
   16e2c:	bne	16e9c <__assert_fail@plt+0x5cdc>
   16e30:	b	16e50 <__assert_fail@plt+0x5c90>
   16e34:	ldr	r0, [sp, #4]
   16e38:	add	r2, r0, #4
   16e3c:	str	r2, [sp, #4]
   16e40:	ldr	r2, [r0]
   16e44:	mov	r0, r5
   16e48:	bl	11124 <fcntl64@plt>
   16e4c:	mov	r4, r0
   16e50:	mov	r0, r4
   16e54:	sub	sp, fp, #16
   16e58:	pop	{r4, r5, r6, r7, fp, lr}
   16e5c:	add	sp, sp, #8
   16e60:	bx	lr
   16e64:	mov	r0, #1
   16e68:	str	r0, [r7]
   16e6c:	b	16e50 <__assert_fail@plt+0x5c90>
   16e70:	mov	r0, r5
   16e74:	mov	r1, #0
   16e78:	mov	r2, r6
   16e7c:	bl	11124 <fcntl64@plt>
   16e80:	mov	r4, r0
   16e84:	ldr	r0, [r7]
   16e88:	add	r0, r0, #1
   16e8c:	clz	r0, r0
   16e90:	lsr	r0, r0, #5
   16e94:	cmp	r0, #0
   16e98:	beq	16e50 <__assert_fail@plt+0x5c90>
   16e9c:	cmp	r4, #0
   16ea0:	bmi	16e50 <__assert_fail@plt+0x5c90>
   16ea4:	mov	r0, r4
   16ea8:	mov	r1, #1
   16eac:	bl	11124 <fcntl64@plt>
   16eb0:	cmp	r0, #0
   16eb4:	bmi	16ed0 <__assert_fail@plt+0x5d10>
   16eb8:	orr	r2, r0, #1
   16ebc:	mov	r0, r4
   16ec0:	mov	r1, #2
   16ec4:	bl	11124 <fcntl64@plt>
   16ec8:	cmn	r0, #1
   16ecc:	bne	16e50 <__assert_fail@plt+0x5c90>
   16ed0:	bl	110ac <__errno_location@plt>
   16ed4:	ldr	r6, [r0]
   16ed8:	mov	r5, r0
   16edc:	mov	r0, r4
   16ee0:	bl	111b4 <close@plt>
   16ee4:	str	r6, [r5]
   16ee8:	mvn	r4, #0
   16eec:	b	16e50 <__assert_fail@plt+0x5c90>
   16ef0:	push	{fp, lr}
   16ef4:	mov	fp, sp
   16ef8:	mov	r0, #14
   16efc:	bl	11154 <nl_langinfo@plt>
   16f00:	movw	r1, #31243	; 0x7a0b
   16f04:	cmp	r0, #0
   16f08:	movt	r1, #1
   16f0c:	movne	r1, r0
   16f10:	movw	r0, #32832	; 0x8040
   16f14:	ldrb	r2, [r1]
   16f18:	movt	r0, #1
   16f1c:	cmp	r2, #0
   16f20:	movne	r0, r1
   16f24:	pop	{fp, pc}
   16f28:	push	{r4, r5, r6, r7, fp, lr}
   16f2c:	add	fp, sp, #16
   16f30:	sub	sp, sp, #8
   16f34:	cmp	r0, #0
   16f38:	add	r5, sp, #4
   16f3c:	mov	r7, r2
   16f40:	mov	r4, r1
   16f44:	movne	r5, r0
   16f48:	mov	r0, r5
   16f4c:	bl	11010 <mbrtowc@plt>
   16f50:	mov	r6, r0
   16f54:	cmp	r7, #0
   16f58:	beq	16f80 <__assert_fail@plt+0x5dc0>
   16f5c:	cmn	r6, #2
   16f60:	bcc	16f80 <__assert_fail@plt+0x5dc0>
   16f64:	mov	r0, #0
   16f68:	bl	16fc8 <__assert_fail@plt+0x5e08>
   16f6c:	cmp	r0, #0
   16f70:	bne	16f80 <__assert_fail@plt+0x5dc0>
   16f74:	ldrb	r0, [r4]
   16f78:	mov	r6, #1
   16f7c:	str	r0, [r5]
   16f80:	mov	r0, r6
   16f84:	sub	sp, fp, #16
   16f88:	pop	{r4, r5, r6, r7, fp, pc}
   16f8c:	cmp	r2, #0
   16f90:	beq	16fc0 <__assert_fail@plt+0x5e00>
   16f94:	mvn	r3, #0
   16f98:	udiv	r3, r3, r2
   16f9c:	cmp	r3, r1
   16fa0:	bcs	16fc0 <__assert_fail@plt+0x5e00>
   16fa4:	push	{fp, lr}
   16fa8:	mov	fp, sp
   16fac:	bl	110ac <__errno_location@plt>
   16fb0:	mov	r1, #12
   16fb4:	str	r1, [r0]
   16fb8:	mov	r0, #0
   16fbc:	pop	{fp, pc}
   16fc0:	mul	r1, r2, r1
   16fc4:	b	166b0 <__assert_fail@plt+0x54f0>
   16fc8:	push	{r4, sl, fp, lr}
   16fcc:	add	fp, sp, #8
   16fd0:	sub	sp, sp, #264	; 0x108
   16fd4:	add	r1, sp, #7
   16fd8:	movw	r2, #257	; 0x101
   16fdc:	bl	17034 <__assert_fail@plt+0x5e74>
   16fe0:	mov	r4, #0
   16fe4:	cmp	r0, #0
   16fe8:	bne	17028 <__assert_fail@plt+0x5e68>
   16fec:	movw	r1, #32838	; 0x8046
   16ff0:	add	r0, sp, #7
   16ff4:	mov	r2, #2
   16ff8:	movt	r1, #1
   16ffc:	bl	11088 <bcmp@plt>
   17000:	cmp	r0, #0
   17004:	beq	17028 <__assert_fail@plt+0x5e68>
   17008:	movw	r1, #32840	; 0x8048
   1700c:	add	r0, sp, #7
   17010:	mov	r2, #6
   17014:	movt	r1, #1
   17018:	bl	11088 <bcmp@plt>
   1701c:	cmp	r0, #0
   17020:	mov	r4, r0
   17024:	movwne	r4, #1
   17028:	mov	r0, r4
   1702c:	sub	sp, fp, #8
   17030:	pop	{r4, sl, fp, pc}
   17034:	push	{r4, r5, r6, r7, fp, lr}
   17038:	add	fp, sp, #16
   1703c:	mov	r4, r1
   17040:	mov	r1, #0
   17044:	mov	r6, r2
   17048:	bl	1113c <setlocale@plt>
   1704c:	cmp	r0, #0
   17050:	beq	17080 <__assert_fail@plt+0x5ec0>
   17054:	mov	r7, r0
   17058:	bl	11094 <strlen@plt>
   1705c:	cmp	r0, r6
   17060:	bcs	1709c <__assert_fail@plt+0x5edc>
   17064:	add	r2, r0, #1
   17068:	mov	r0, r4
   1706c:	mov	r1, r7
   17070:	bl	10f8c <memcpy@plt>
   17074:	mov	r5, #0
   17078:	mov	r0, r5
   1707c:	pop	{r4, r5, r6, r7, fp, pc}
   17080:	mov	r5, #22
   17084:	cmp	r6, #0
   17088:	beq	170c4 <__assert_fail@plt+0x5f04>
   1708c:	mov	r0, #0
   17090:	strb	r0, [r4]
   17094:	mov	r0, r5
   17098:	pop	{r4, r5, r6, r7, fp, pc}
   1709c:	mov	r5, #34	; 0x22
   170a0:	cmp	r6, #0
   170a4:	beq	170c4 <__assert_fail@plt+0x5f04>
   170a8:	sub	r6, r6, #1
   170ac:	mov	r0, r4
   170b0:	mov	r1, r7
   170b4:	mov	r2, r6
   170b8:	bl	10f8c <memcpy@plt>
   170bc:	mov	r0, #0
   170c0:	strb	r0, [r4, r6]
   170c4:	mov	r0, r5
   170c8:	pop	{r4, r5, r6, r7, fp, pc}
   170cc:	mov	r1, #0
   170d0:	b	1113c <setlocale@plt>
   170d4:	eor	r1, r1, #-2147483648	; 0x80000000
   170d8:	b	170e0 <__assert_fail@plt+0x5f20>
   170dc:	eor	r3, r3, #-2147483648	; 0x80000000
   170e0:	push	{r4, r5, lr}
   170e4:	lsl	r4, r1, #1
   170e8:	lsl	r5, r3, #1
   170ec:	teq	r4, r5
   170f0:	teqeq	r0, r2
   170f4:	orrsne	ip, r4, r0
   170f8:	orrsne	ip, r5, r2
   170fc:	mvnsne	ip, r4, asr #21
   17100:	mvnsne	ip, r5, asr #21
   17104:	beq	172f0 <__assert_fail@plt+0x6130>
   17108:	lsr	r4, r4, #21
   1710c:	rsbs	r5, r4, r5, lsr #21
   17110:	rsblt	r5, r5, #0
   17114:	ble	17134 <__assert_fail@plt+0x5f74>
   17118:	add	r4, r4, r5
   1711c:	eor	r2, r0, r2
   17120:	eor	r3, r1, r3
   17124:	eor	r0, r2, r0
   17128:	eor	r1, r3, r1
   1712c:	eor	r2, r0, r2
   17130:	eor	r3, r1, r3
   17134:	cmp	r5, #54	; 0x36
   17138:	pophi	{r4, r5, pc}
   1713c:	tst	r1, #-2147483648	; 0x80000000
   17140:	lsl	r1, r1, #12
   17144:	mov	ip, #1048576	; 0x100000
   17148:	orr	r1, ip, r1, lsr #12
   1714c:	beq	17158 <__assert_fail@plt+0x5f98>
   17150:	rsbs	r0, r0, #0
   17154:	rsc	r1, r1, #0
   17158:	tst	r3, #-2147483648	; 0x80000000
   1715c:	lsl	r3, r3, #12
   17160:	orr	r3, ip, r3, lsr #12
   17164:	beq	17170 <__assert_fail@plt+0x5fb0>
   17168:	rsbs	r2, r2, #0
   1716c:	rsc	r3, r3, #0
   17170:	teq	r4, r5
   17174:	beq	172d8 <__assert_fail@plt+0x6118>
   17178:	sub	r4, r4, #1
   1717c:	rsbs	lr, r5, #32
   17180:	blt	1719c <__assert_fail@plt+0x5fdc>
   17184:	lsl	ip, r2, lr
   17188:	adds	r0, r0, r2, lsr r5
   1718c:	adc	r1, r1, #0
   17190:	adds	r0, r0, r3, lsl lr
   17194:	adcs	r1, r1, r3, asr r5
   17198:	b	171b8 <__assert_fail@plt+0x5ff8>
   1719c:	sub	r5, r5, #32
   171a0:	add	lr, lr, #32
   171a4:	cmp	r2, #1
   171a8:	lsl	ip, r3, lr
   171ac:	orrcs	ip, ip, #2
   171b0:	adds	r0, r0, r3, asr r5
   171b4:	adcs	r1, r1, r3, asr #31
   171b8:	and	r5, r1, #-2147483648	; 0x80000000
   171bc:	bpl	171cc <__assert_fail@plt+0x600c>
   171c0:	rsbs	ip, ip, #0
   171c4:	rscs	r0, r0, #0
   171c8:	rsc	r1, r1, #0
   171cc:	cmp	r1, #1048576	; 0x100000
   171d0:	bcc	17210 <__assert_fail@plt+0x6050>
   171d4:	cmp	r1, #2097152	; 0x200000
   171d8:	bcc	171f8 <__assert_fail@plt+0x6038>
   171dc:	lsrs	r1, r1, #1
   171e0:	rrxs	r0, r0
   171e4:	rrx	ip, ip
   171e8:	add	r4, r4, #1
   171ec:	lsl	r2, r4, #21
   171f0:	cmn	r2, #4194304	; 0x400000
   171f4:	bcs	17350 <__assert_fail@plt+0x6190>
   171f8:	cmp	ip, #-2147483648	; 0x80000000
   171fc:	lsrseq	ip, r0, #1
   17200:	adcs	r0, r0, #0
   17204:	adc	r1, r1, r4, lsl #20
   17208:	orr	r1, r1, r5
   1720c:	pop	{r4, r5, pc}
   17210:	lsls	ip, ip, #1
   17214:	adcs	r0, r0, r0
   17218:	adc	r1, r1, r1
   1721c:	tst	r1, #1048576	; 0x100000
   17220:	sub	r4, r4, #1
   17224:	bne	171f8 <__assert_fail@plt+0x6038>
   17228:	teq	r1, #0
   1722c:	moveq	r1, r0
   17230:	moveq	r0, #0
   17234:	clz	r3, r1
   17238:	addeq	r3, r3, #32
   1723c:	sub	r3, r3, #11
   17240:	subs	r2, r3, #32
   17244:	bge	17268 <__assert_fail@plt+0x60a8>
   17248:	adds	r2, r2, #12
   1724c:	ble	17264 <__assert_fail@plt+0x60a4>
   17250:	add	ip, r2, #20
   17254:	rsb	r2, r2, #12
   17258:	lsl	r0, r1, ip
   1725c:	lsr	r1, r1, r2
   17260:	b	17278 <__assert_fail@plt+0x60b8>
   17264:	add	r2, r2, #20
   17268:	rsble	ip, r2, #32
   1726c:	lsl	r1, r1, r2
   17270:	orrle	r1, r1, r0, lsr ip
   17274:	lslle	r0, r0, r2
   17278:	subs	r4, r4, r3
   1727c:	addge	r1, r1, r4, lsl #20
   17280:	orrge	r1, r1, r5
   17284:	popge	{r4, r5, pc}
   17288:	mvn	r4, r4
   1728c:	subs	r4, r4, #31
   17290:	bge	172cc <__assert_fail@plt+0x610c>
   17294:	adds	r4, r4, #12
   17298:	bgt	172b4 <__assert_fail@plt+0x60f4>
   1729c:	add	r4, r4, #20
   172a0:	rsb	r2, r4, #32
   172a4:	lsr	r0, r0, r4
   172a8:	orr	r0, r0, r1, lsl r2
   172ac:	orr	r1, r5, r1, lsr r4
   172b0:	pop	{r4, r5, pc}
   172b4:	rsb	r4, r4, #12
   172b8:	rsb	r2, r4, #32
   172bc:	lsr	r0, r0, r2
   172c0:	orr	r0, r0, r1, lsl r4
   172c4:	mov	r1, r5
   172c8:	pop	{r4, r5, pc}
   172cc:	lsr	r0, r1, r4
   172d0:	mov	r1, r5
   172d4:	pop	{r4, r5, pc}
   172d8:	teq	r4, #0
   172dc:	eor	r3, r3, #1048576	; 0x100000
   172e0:	eoreq	r1, r1, #1048576	; 0x100000
   172e4:	addeq	r4, r4, #1
   172e8:	subne	r5, r5, #1
   172ec:	b	17178 <__assert_fail@plt+0x5fb8>
   172f0:	mvns	ip, r4, asr #21
   172f4:	mvnsne	ip, r5, asr #21
   172f8:	beq	17360 <__assert_fail@plt+0x61a0>
   172fc:	teq	r4, r5
   17300:	teqeq	r0, r2
   17304:	beq	17318 <__assert_fail@plt+0x6158>
   17308:	orrs	ip, r4, r0
   1730c:	moveq	r1, r3
   17310:	moveq	r0, r2
   17314:	pop	{r4, r5, pc}
   17318:	teq	r1, r3
   1731c:	movne	r1, #0
   17320:	movne	r0, #0
   17324:	popne	{r4, r5, pc}
   17328:	lsrs	ip, r4, #21
   1732c:	bne	17340 <__assert_fail@plt+0x6180>
   17330:	lsls	r0, r0, #1
   17334:	adcs	r1, r1, r1
   17338:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1733c:	pop	{r4, r5, pc}
   17340:	adds	r4, r4, #4194304	; 0x400000
   17344:	addcc	r1, r1, #1048576	; 0x100000
   17348:	popcc	{r4, r5, pc}
   1734c:	and	r5, r1, #-2147483648	; 0x80000000
   17350:	orr	r1, r5, #2130706432	; 0x7f000000
   17354:	orr	r1, r1, #15728640	; 0xf00000
   17358:	mov	r0, #0
   1735c:	pop	{r4, r5, pc}
   17360:	mvns	ip, r4, asr #21
   17364:	movne	r1, r3
   17368:	movne	r0, r2
   1736c:	mvnseq	ip, r5, asr #21
   17370:	movne	r3, r1
   17374:	movne	r2, r0
   17378:	orrs	r4, r0, r1, lsl #12
   1737c:	orrseq	r5, r2, r3, lsl #12
   17380:	teqeq	r1, r3
   17384:	orrne	r1, r1, #524288	; 0x80000
   17388:	pop	{r4, r5, pc}
   1738c:	teq	r0, #0
   17390:	moveq	r1, #0
   17394:	bxeq	lr
   17398:	push	{r4, r5, lr}
   1739c:	mov	r4, #1024	; 0x400
   173a0:	add	r4, r4, #50	; 0x32
   173a4:	mov	r5, #0
   173a8:	mov	r1, #0
   173ac:	b	17228 <__assert_fail@plt+0x6068>
   173b0:	teq	r0, #0
   173b4:	moveq	r1, #0
   173b8:	bxeq	lr
   173bc:	push	{r4, r5, lr}
   173c0:	mov	r4, #1024	; 0x400
   173c4:	add	r4, r4, #50	; 0x32
   173c8:	ands	r5, r0, #-2147483648	; 0x80000000
   173cc:	rsbmi	r0, r0, #0
   173d0:	mov	r1, #0
   173d4:	b	17228 <__assert_fail@plt+0x6068>
   173d8:	lsls	r2, r0, #1
   173dc:	asr	r1, r2, #3
   173e0:	rrx	r1, r1
   173e4:	lsl	r0, r2, #28
   173e8:	andsne	r3, r2, #-16777216	; 0xff000000
   173ec:	teqne	r3, #-16777216	; 0xff000000
   173f0:	eorne	r1, r1, #939524096	; 0x38000000
   173f4:	bxne	lr
   173f8:	bics	r2, r2, #-16777216	; 0xff000000
   173fc:	bxeq	lr
   17400:	teq	r3, #-16777216	; 0xff000000
   17404:	orreq	r1, r1, #524288	; 0x80000
   17408:	bxeq	lr
   1740c:	push	{r4, r5, lr}
   17410:	mov	r4, #896	; 0x380
   17414:	and	r5, r1, #-2147483648	; 0x80000000
   17418:	bic	r1, r1, #-2147483648	; 0x80000000
   1741c:	b	17228 <__assert_fail@plt+0x6068>
   17420:	orrs	r2, r0, r1
   17424:	bxeq	lr
   17428:	push	{r4, r5, lr}
   1742c:	mov	r5, #0
   17430:	b	17450 <__assert_fail@plt+0x6290>
   17434:	orrs	r2, r0, r1
   17438:	bxeq	lr
   1743c:	push	{r4, r5, lr}
   17440:	ands	r5, r1, #-2147483648	; 0x80000000
   17444:	bpl	17450 <__assert_fail@plt+0x6290>
   17448:	rsbs	r0, r0, #0
   1744c:	rsc	r1, r1, #0
   17450:	mov	r4, #1024	; 0x400
   17454:	add	r4, r4, #50	; 0x32
   17458:	lsrs	ip, r1, #22
   1745c:	beq	171cc <__assert_fail@plt+0x600c>
   17460:	mov	r2, #3
   17464:	lsrs	ip, ip, #3
   17468:	addne	r2, r2, #3
   1746c:	lsrs	ip, ip, #3
   17470:	addne	r2, r2, #3
   17474:	add	r2, r2, ip, lsr #3
   17478:	rsb	r3, r2, #32
   1747c:	lsl	ip, r0, r3
   17480:	lsr	r0, r0, r2
   17484:	orr	r0, r0, r1, lsl r3
   17488:	lsr	r1, r1, r2
   1748c:	add	r4, r4, r2
   17490:	b	171cc <__assert_fail@plt+0x600c>
   17494:	cmp	r3, #0
   17498:	cmpeq	r2, #0
   1749c:	bne	174b4 <__assert_fail@plt+0x62f4>
   174a0:	cmp	r1, #0
   174a4:	cmpeq	r0, #0
   174a8:	mvnne	r1, #0
   174ac:	mvnne	r0, #0
   174b0:	b	174d0 <__assert_fail@plt+0x6310>
   174b4:	sub	sp, sp, #8
   174b8:	push	{sp, lr}
   174bc:	bl	17520 <__assert_fail@plt+0x6360>
   174c0:	ldr	lr, [sp, #4]
   174c4:	add	sp, sp, #8
   174c8:	pop	{r2, r3}
   174cc:	bx	lr
   174d0:	push	{r1, lr}
   174d4:	mov	r0, #8
   174d8:	bl	10f38 <raise@plt>
   174dc:	pop	{r1, pc}
   174e0:	vmov	d6, r0, r1
   174e4:	vldr	d7, [pc, #36]	; 17510 <__assert_fail@plt+0x6350>
   174e8:	vldr	d5, [pc, #40]	; 17518 <__assert_fail@plt+0x6358>
   174ec:	vmul.f64	d7, d6, d7
   174f0:	vcvt.u32.f64	s14, d7
   174f4:	vcvt.f64.u32	d4, s14
   174f8:	vmov	r1, s14
   174fc:	vmls.f64	d6, d4, d5
   17500:	vcvt.u32.f64	s15, d6
   17504:	vmov	r0, s15
   17508:	bx	lr
   1750c:	nop			; (mov r0, r0)
   17510:	andeq	r0, r0, r0
   17514:	ldclcc	0, cr0, [r0]
   17518:	andeq	r0, r0, r0
   1751c:	mvnsmi	r0, r0
   17520:	cmp	r1, r3
   17524:	cmpeq	r0, r2
   17528:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1752c:	mov	r4, r0
   17530:	movcc	r0, #0
   17534:	mov	r5, r1
   17538:	ldr	lr, [sp, #36]	; 0x24
   1753c:	movcc	r1, r0
   17540:	bcc	1763c <__assert_fail@plt+0x647c>
   17544:	cmp	r3, #0
   17548:	clzeq	ip, r2
   1754c:	clzne	ip, r3
   17550:	addeq	ip, ip, #32
   17554:	cmp	r5, #0
   17558:	clzeq	r1, r4
   1755c:	addeq	r1, r1, #32
   17560:	clzne	r1, r5
   17564:	sub	ip, ip, r1
   17568:	sub	sl, ip, #32
   1756c:	lsl	r9, r3, ip
   17570:	rsb	fp, ip, #32
   17574:	orr	r9, r9, r2, lsl sl
   17578:	orr	r9, r9, r2, lsr fp
   1757c:	lsl	r8, r2, ip
   17580:	cmp	r5, r9
   17584:	cmpeq	r4, r8
   17588:	movcc	r0, #0
   1758c:	movcc	r1, r0
   17590:	bcc	175ac <__assert_fail@plt+0x63ec>
   17594:	mov	r0, #1
   17598:	subs	r4, r4, r8
   1759c:	lsl	r1, r0, sl
   175a0:	orr	r1, r1, r0, lsr fp
   175a4:	lsl	r0, r0, ip
   175a8:	sbc	r5, r5, r9
   175ac:	cmp	ip, #0
   175b0:	beq	1763c <__assert_fail@plt+0x647c>
   175b4:	lsr	r6, r8, #1
   175b8:	orr	r6, r6, r9, lsl #31
   175bc:	lsr	r7, r9, #1
   175c0:	mov	r2, ip
   175c4:	b	175e8 <__assert_fail@plt+0x6428>
   175c8:	subs	r3, r4, r6
   175cc:	sbc	r8, r5, r7
   175d0:	adds	r3, r3, r3
   175d4:	adc	r8, r8, r8
   175d8:	adds	r4, r3, #1
   175dc:	adc	r5, r8, #0
   175e0:	subs	r2, r2, #1
   175e4:	beq	17604 <__assert_fail@plt+0x6444>
   175e8:	cmp	r5, r7
   175ec:	cmpeq	r4, r6
   175f0:	bcs	175c8 <__assert_fail@plt+0x6408>
   175f4:	adds	r4, r4, r4
   175f8:	adc	r5, r5, r5
   175fc:	subs	r2, r2, #1
   17600:	bne	175e8 <__assert_fail@plt+0x6428>
   17604:	lsr	r3, r4, ip
   17608:	orr	r3, r3, r5, lsl fp
   1760c:	lsr	r2, r5, ip
   17610:	orr	r3, r3, r5, lsr sl
   17614:	adds	r0, r0, r4
   17618:	mov	r4, r3
   1761c:	lsl	r3, r2, ip
   17620:	orr	r3, r3, r4, lsl sl
   17624:	lsl	ip, r4, ip
   17628:	orr	r3, r3, r4, lsr fp
   1762c:	adc	r1, r1, r5
   17630:	subs	r0, r0, ip
   17634:	mov	r5, r2
   17638:	sbc	r1, r1, r3
   1763c:	cmp	lr, #0
   17640:	strdne	r4, [lr]
   17644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17648:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1764c:	mov	r7, r0
   17650:	ldr	r6, [pc, #72]	; 176a0 <__assert_fail@plt+0x64e0>
   17654:	ldr	r5, [pc, #72]	; 176a4 <__assert_fail@plt+0x64e4>
   17658:	add	r6, pc, r6
   1765c:	add	r5, pc, r5
   17660:	sub	r6, r6, r5
   17664:	mov	r8, r1
   17668:	mov	r9, r2
   1766c:	bl	10ef4 <fdopen@plt-0x20>
   17670:	asrs	r6, r6, #2
   17674:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17678:	mov	r4, #0
   1767c:	add	r4, r4, #1
   17680:	ldr	r3, [r5], #4
   17684:	mov	r2, r9
   17688:	mov	r1, r8
   1768c:	mov	r0, r7
   17690:	blx	r3
   17694:	cmp	r6, r4
   17698:	bne	1767c <__assert_fail@plt+0x64bc>
   1769c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   176a0:	andeq	r1, r1, ip, lsr #17
   176a4:	andeq	r1, r1, r4, lsr #17
   176a8:	bx	lr
   176ac:	ldr	r3, [pc, #12]	; 176c0 <__assert_fail@plt+0x6500>
   176b0:	mov	r1, #0
   176b4:	add	r3, pc, r3
   176b8:	ldr	r2, [r3]
   176bc:	b	110c4 <__cxa_atexit@plt>
   176c0:	andeq	r1, r1, r0, asr #20

Disassembly of section .fini:

000176c4 <.fini>:
   176c4:	push	{r3, lr}
   176c8:	pop	{r3, pc}
