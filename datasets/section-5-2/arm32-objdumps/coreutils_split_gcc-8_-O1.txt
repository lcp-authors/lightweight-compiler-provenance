
../repos/coreutils/src/split:     file format elf32-littlearm


Disassembly of section .init:

00011118 <.init>:
   11118:	push	{r3, lr}
   1111c:	bl	1152c <__assert_fail@plt+0x4c>
   11120:	pop	{r3, pc}

Disassembly of section .plt:

00011124 <fdopen@plt-0x14>:
   11124:	push	{lr}		; (str lr, [sp, #-4]!)
   11128:	ldr	lr, [pc, #4]	; 11134 <fdopen@plt-0x4>
   1112c:	add	lr, pc, lr
   11130:	ldr	pc, [lr, #8]!
   11134:	andeq	sl, r1, ip, asr #29

00011138 <fdopen@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #106496	; 0x1a000
   11140:	ldr	pc, [ip, #3788]!	; 0xecc

00011144 <calloc@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #106496	; 0x1a000
   1114c:	ldr	pc, [ip, #3780]!	; 0xec4

00011150 <fputs_unlocked@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #106496	; 0x1a000
   11158:	ldr	pc, [ip, #3772]!	; 0xebc

0001115c <raise@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #106496	; 0x1a000
   11164:	ldr	pc, [ip, #3764]!	; 0xeb4

00011168 <strcmp@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #106496	; 0x1a000
   11170:	ldr	pc, [ip, #3756]!	; 0xeac

00011174 <strtol@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #106496	; 0x1a000
   1117c:	ldr	pc, [ip, #3748]!	; 0xea4

00011180 <read@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #106496	; 0x1a000
   11188:	ldr	pc, [ip, #3740]!	; 0xe9c

0001118c <fflush@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #106496	; 0x1a000
   11194:	ldr	pc, [ip, #3732]!	; 0xe94

00011198 <sigprocmask@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #106496	; 0x1a000
   111a0:	ldr	pc, [ip, #3724]!	; 0xe8c

000111a4 <memmove@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #106496	; 0x1a000
   111ac:	ldr	pc, [ip, #3716]!	; 0xe84

000111b0 <free@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #106496	; 0x1a000
   111b8:	ldr	pc, [ip, #3708]!	; 0xe7c

000111bc <_exit@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #106496	; 0x1a000
   111c4:	ldr	pc, [ip, #3700]!	; 0xe74

000111c8 <memcpy@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #106496	; 0x1a000
   111d0:	ldr	pc, [ip, #3692]!	; 0xe6c

000111d4 <__strtoull_internal@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #106496	; 0x1a000
   111dc:	ldr	pc, [ip, #3684]!	; 0xe64

000111e0 <mbsinit@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #106496	; 0x1a000
   111e8:	ldr	pc, [ip, #3676]!	; 0xe5c

000111ec <ftruncate64@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #106496	; 0x1a000
   111f4:	ldr	pc, [ip, #3668]!	; 0xe54

000111f8 <fwrite_unlocked@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #106496	; 0x1a000
   11200:	ldr	pc, [ip, #3660]!	; 0xe4c

00011204 <memcmp@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #106496	; 0x1a000
   1120c:	ldr	pc, [ip, #3652]!	; 0xe44

00011210 <fputc_unlocked@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #106496	; 0x1a000
   11218:	ldr	pc, [ip, #3644]!	; 0xe3c

0001121c <dcgettext@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #106496	; 0x1a000
   11224:	ldr	pc, [ip, #3636]!	; 0xe34

00011228 <dup2@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #106496	; 0x1a000
   11230:	ldr	pc, [ip, #3628]!	; 0xe2c

00011234 <realloc@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #106496	; 0x1a000
   1123c:	ldr	pc, [ip, #3620]!	; 0xe24

00011240 <textdomain@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #106496	; 0x1a000
   11248:	ldr	pc, [ip, #3612]!	; 0xe1c

0001124c <rawmemchr@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #106496	; 0x1a000
   11254:	ldr	pc, [ip, #3604]!	; 0xe14

00011258 <iswprint@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #106496	; 0x1a000
   11260:	ldr	pc, [ip, #3596]!	; 0xe0c

00011264 <__fxstat64@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #106496	; 0x1a000
   1126c:	ldr	pc, [ip, #3588]!	; 0xe04

00011270 <sigaction@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #106496	; 0x1a000
   11278:	ldr	pc, [ip, #3580]!	; 0xdfc

0001127c <fwrite@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #106496	; 0x1a000
   11284:	ldr	pc, [ip, #3572]!	; 0xdf4

00011288 <lseek64@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #106496	; 0x1a000
   11290:	ldr	pc, [ip, #3564]!	; 0xdec

00011294 <waitpid@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #106496	; 0x1a000
   1129c:	ldr	pc, [ip, #3556]!	; 0xde4

000112a0 <__ctype_get_mb_cur_max@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #106496	; 0x1a000
   112a8:	ldr	pc, [ip, #3548]!	; 0xddc

000112ac <strcpy@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #106496	; 0x1a000
   112b4:	ldr	pc, [ip, #3540]!	; 0xdd4

000112b8 <__fpending@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #106496	; 0x1a000
   112c0:	ldr	pc, [ip, #3532]!	; 0xdcc

000112c4 <mbrtowc@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #106496	; 0x1a000
   112cc:	ldr	pc, [ip, #3524]!	; 0xdc4

000112d0 <error@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #106496	; 0x1a000
   112d8:	ldr	pc, [ip, #3516]!	; 0xdbc

000112dc <open64@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #106496	; 0x1a000
   112e4:	ldr	pc, [ip, #3508]!	; 0xdb4

000112e8 <getenv@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #106496	; 0x1a000
   112f0:	ldr	pc, [ip, #3500]!	; 0xdac

000112f4 <malloc@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #106496	; 0x1a000
   112fc:	ldr	pc, [ip, #3492]!	; 0xda4

00011300 <sigaddset@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #106496	; 0x1a000
   11308:	ldr	pc, [ip, #3484]!	; 0xd9c

0001130c <__libc_start_main@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #106496	; 0x1a000
   11314:	ldr	pc, [ip, #3476]!	; 0xd94

00011318 <__freading@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #106496	; 0x1a000
   11320:	ldr	pc, [ip, #3468]!	; 0xd8c

00011324 <__gmon_start__@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #106496	; 0x1a000
   1132c:	ldr	pc, [ip, #3460]!	; 0xd84

00011330 <getopt_long@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #106496	; 0x1a000
   11338:	ldr	pc, [ip, #3452]!	; 0xd7c

0001133c <__ctype_b_loc@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #106496	; 0x1a000
   11344:	ldr	pc, [ip, #3444]!	; 0xd74

00011348 <exit@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #106496	; 0x1a000
   11350:	ldr	pc, [ip, #3436]!	; 0xd6c

00011354 <strlen@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #106496	; 0x1a000
   1135c:	ldr	pc, [ip, #3428]!	; 0xd64

00011360 <__libc_current_sigrtmax@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #106496	; 0x1a000
   11368:	ldr	pc, [ip, #3420]!	; 0xd5c

0001136c <strchr@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #106496	; 0x1a000
   11374:	ldr	pc, [ip, #3412]!	; 0xd54

00011378 <setenv@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #106496	; 0x1a000
   11380:	ldr	pc, [ip, #3404]!	; 0xd4c

00011384 <memrchr@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #106496	; 0x1a000
   1138c:	ldr	pc, [ip, #3396]!	; 0xd44

00011390 <getpagesize@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #106496	; 0x1a000
   11398:	ldr	pc, [ip, #3388]!	; 0xd3c

0001139c <__errno_location@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #106496	; 0x1a000
   113a4:	ldr	pc, [ip, #3380]!	; 0xd34

000113a8 <__sprintf_chk@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #106496	; 0x1a000
   113b0:	ldr	pc, [ip, #3372]!	; 0xd2c

000113b4 <__cxa_atexit@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #106496	; 0x1a000
   113bc:	ldr	pc, [ip, #3364]!	; 0xd24

000113c0 <memset@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #106496	; 0x1a000
   113c8:	ldr	pc, [ip, #3356]!	; 0xd1c

000113cc <__printf_chk@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #106496	; 0x1a000
   113d4:	ldr	pc, [ip, #3348]!	; 0xd14

000113d8 <write@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #106496	; 0x1a000
   113e0:	ldr	pc, [ip, #3340]!	; 0xd0c

000113e4 <fileno@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #106496	; 0x1a000
   113ec:	ldr	pc, [ip, #3332]!	; 0xd04

000113f0 <__fprintf_chk@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #106496	; 0x1a000
   113f8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113fc <memchr@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #106496	; 0x1a000
   11404:	ldr	pc, [ip, #3316]!	; 0xcf4

00011408 <fclose@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #106496	; 0x1a000
   11410:	ldr	pc, [ip, #3308]!	; 0xcec

00011414 <pipe@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #106496	; 0x1a000
   1141c:	ldr	pc, [ip, #3300]!	; 0xce4

00011420 <fseeko64@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #106496	; 0x1a000
   11428:	ldr	pc, [ip, #3292]!	; 0xcdc

0001142c <fcntl64@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #106496	; 0x1a000
   11434:	ldr	pc, [ip, #3284]!	; 0xcd4

00011438 <setlocale@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #106496	; 0x1a000
   11440:	ldr	pc, [ip, #3276]!	; 0xccc

00011444 <sigemptyset@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #106496	; 0x1a000
   1144c:	ldr	pc, [ip, #3268]!	; 0xcc4

00011450 <fork@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #106496	; 0x1a000
   11458:	ldr	pc, [ip, #3260]!	; 0xcbc

0001145c <execl@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #106496	; 0x1a000
   11464:	ldr	pc, [ip, #3252]!	; 0xcb4

00011468 <strrchr@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #106496	; 0x1a000
   11470:	ldr	pc, [ip, #3244]!	; 0xcac

00011474 <nl_langinfo@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #106496	; 0x1a000
   1147c:	ldr	pc, [ip, #3236]!	; 0xca4

00011480 <clearerr_unlocked@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #106496	; 0x1a000
   11488:	ldr	pc, [ip, #3228]!	; 0xc9c

0001148c <bindtextdomain@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #106496	; 0x1a000
   11494:	ldr	pc, [ip, #3220]!	; 0xc94

00011498 <aligned_alloc@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #106496	; 0x1a000
   114a0:	ldr	pc, [ip, #3212]!	; 0xc8c

000114a4 <__libc_current_sigrtmin@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #106496	; 0x1a000
   114ac:	ldr	pc, [ip, #3204]!	; 0xc84

000114b0 <strncmp@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #106496	; 0x1a000
   114b8:	ldr	pc, [ip, #3196]!	; 0xc7c

000114bc <abort@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #106496	; 0x1a000
   114c4:	ldr	pc, [ip, #3188]!	; 0xc74

000114c8 <close@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #106496	; 0x1a000
   114d0:	ldr	pc, [ip, #3180]!	; 0xc6c

000114d4 <strspn@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #106496	; 0x1a000
   114dc:	ldr	pc, [ip, #3172]!	; 0xc64

000114e0 <__assert_fail@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #106496	; 0x1a000
   114e8:	ldr	pc, [ip, #3164]!	; 0xc5c

Disassembly of section .text:

000114f0 <.text>:
   114f0:	mov	fp, #0
   114f4:	mov	lr, #0
   114f8:	pop	{r1}		; (ldr r1, [sp], #4)
   114fc:	mov	r2, sp
   11500:	push	{r2}		; (str r2, [sp, #-4]!)
   11504:	push	{r0}		; (str r0, [sp, #-4]!)
   11508:	ldr	ip, [pc, #16]	; 11520 <__assert_fail@plt+0x40>
   1150c:	push	{ip}		; (str ip, [sp, #-4]!)
   11510:	ldr	r0, [pc, #12]	; 11524 <__assert_fail@plt+0x44>
   11514:	ldr	r3, [pc, #12]	; 11528 <__assert_fail@plt+0x48>
   11518:	bl	1130c <__libc_start_main@plt>
   1151c:	bl	114bc <abort@plt>
   11520:	andeq	r9, r1, r8, lsr #16
   11524:			; <UNDEFINED> instruction: 0x00012bb8
   11528:	andeq	r9, r1, r8, asr #15
   1152c:	ldr	r3, [pc, #20]	; 11548 <__assert_fail@plt+0x68>
   11530:	ldr	r2, [pc, #20]	; 1154c <__assert_fail@plt+0x6c>
   11534:	add	r3, pc, r3
   11538:	ldr	r2, [r3, r2]
   1153c:	cmp	r2, #0
   11540:	bxeq	lr
   11544:	b	11324 <__gmon_start__@plt>
   11548:	andeq	sl, r1, r4, asr #21
   1154c:	andeq	r0, r0, r8, asr #2
   11550:	ldr	r0, [pc, #24]	; 11570 <__assert_fail@plt+0x90>
   11554:	ldr	r3, [pc, #24]	; 11574 <__assert_fail@plt+0x94>
   11558:	cmp	r3, r0
   1155c:	bxeq	lr
   11560:	ldr	r3, [pc, #16]	; 11578 <__assert_fail@plt+0x98>
   11564:	cmp	r3, #0
   11568:	bxeq	lr
   1156c:	bx	r3
   11570:	andeq	ip, r2, r0, asr r3
   11574:	andeq	ip, r2, r0, asr r3
   11578:	andeq	r0, r0, r0
   1157c:	ldr	r0, [pc, #36]	; 115a8 <__assert_fail@plt+0xc8>
   11580:	ldr	r1, [pc, #36]	; 115ac <__assert_fail@plt+0xcc>
   11584:	sub	r1, r1, r0
   11588:	asr	r1, r1, #2
   1158c:	add	r1, r1, r1, lsr #31
   11590:	asrs	r1, r1, #1
   11594:	bxeq	lr
   11598:	ldr	r3, [pc, #16]	; 115b0 <__assert_fail@plt+0xd0>
   1159c:	cmp	r3, #0
   115a0:	bxeq	lr
   115a4:	bx	r3
   115a8:	andeq	ip, r2, r0, asr r3
   115ac:	andeq	ip, r2, r0, asr r3
   115b0:	andeq	r0, r0, r0
   115b4:	push	{r4, lr}
   115b8:	ldr	r4, [pc, #24]	; 115d8 <__assert_fail@plt+0xf8>
   115bc:	ldrb	r3, [r4]
   115c0:	cmp	r3, #0
   115c4:	popne	{r4, pc}
   115c8:	bl	11550 <__assert_fail@plt+0x70>
   115cc:	mov	r3, #1
   115d0:	strb	r3, [r4]
   115d4:	pop	{r4, pc}
   115d8:	andeq	ip, r2, ip, ror #6
   115dc:	b	1157c <__assert_fail@plt+0x9c>
   115e0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   115e4:	strd	r6, [sp, #8]
   115e8:	strd	r8, [sp, #16]
   115ec:	str	sl, [sp, #24]
   115f0:	str	lr, [sp, #28]
   115f4:	movw	r3, #50032	; 0xc370
   115f8:	movt	r3, #2
   115fc:	ldr	r4, [r3]
   11600:	cmp	r4, #0
   11604:	beq	11654 <__assert_fail@plt+0x174>
   11608:	movw	r3, #50032	; 0xc370
   1160c:	movt	r3, #2
   11610:	ldr	ip, [r3, #24]
   11614:	sub	r0, ip, #1
   11618:	cmp	ip, #0
   1161c:	beq	118fc <__assert_fail@plt+0x41c>
   11620:	movw	r3, #50032	; 0xc370
   11624:	movt	r3, #2
   11628:	ldr	r8, [r3, #32]
   1162c:	movw	r2, #49492	; 0xc154
   11630:	movt	r2, #2
   11634:	ldrb	r6, [r2, #4]
   11638:	ldr	lr, [r2]
   1163c:	ldr	r9, [r3, #28]
   11640:	sub	r3, ip, #-1073741823	; 0xc0000001
   11644:	add	r3, r8, r3, lsl #2
   11648:	add	ip, r9, ip
   1164c:	mov	r7, #0
   11650:	b	118b0 <__assert_fail@plt+0x3d0>
   11654:	movw	r3, #50032	; 0xc370
   11658:	movt	r3, #2
   1165c:	ldr	r7, [r3, #4]
   11660:	cmp	r7, #0
   11664:	bne	116e0 <__assert_fail@plt+0x200>
   11668:	mov	r6, r3
   1166c:	ldr	r0, [r3, #8]
   11670:	bl	11354 <strlen@plt>
   11674:	mov	r5, r0
   11678:	str	r0, [r6, #12]
   1167c:	ldr	r0, [r6, #16]
   11680:	cmp	r0, #0
   11684:	moveq	r0, r7
   11688:	beq	11690 <__assert_fail@plt+0x1b0>
   1168c:	bl	11354 <strlen@plt>
   11690:	movw	r2, #50032	; 0xc370
   11694:	movt	r2, #2
   11698:	str	r0, [r2, #20]
   1169c:	ldr	r3, [r2, #24]
   116a0:	add	r3, r5, r3
   116a4:	add	r3, r3, r0
   116a8:	str	r3, [r2, #4]
   116ac:	add	r1, r3, #1
   116b0:	cmp	r5, r1
   116b4:	bhi	11838 <__assert_fail@plt+0x358>
   116b8:	mov	r0, r4
   116bc:	bl	183d0 <__assert_fail@plt+0x6ef0>
   116c0:	mov	r6, r0
   116c4:	movw	r3, #50032	; 0xc370
   116c8:	movt	r3, #2
   116cc:	str	r0, [r3]
   116d0:	ldr	r2, [r3, #12]
   116d4:	ldr	r1, [r3, #8]
   116d8:	bl	111c8 <memcpy@plt>
   116dc:	b	1174c <__assert_fail@plt+0x26c>
   116e0:	movw	r3, #50032	; 0xc370
   116e4:	movt	r3, #2
   116e8:	add	r2, r7, #2
   116ec:	str	r2, [r3, #4]
   116f0:	ldr	r2, [r3, #24]
   116f4:	add	r2, r2, #1
   116f8:	str	r2, [r3, #24]
   116fc:	add	r1, r7, #3
   11700:	ldr	r3, [r3, #12]
   11704:	cmp	r1, r3
   11708:	bcc	11838 <__assert_fail@plt+0x358>
   1170c:	mov	r0, r4
   11710:	bl	183d0 <__assert_fail@plt+0x6ef0>
   11714:	mov	r6, r0
   11718:	movw	r3, #50032	; 0xc370
   1171c:	movt	r3, #2
   11720:	str	r0, [r3]
   11724:	ldr	r2, [r3, #12]
   11728:	movw	r1, #49492	; 0xc154
   1172c:	movt	r1, #2
   11730:	ldr	ip, [r3, #32]
   11734:	ldr	r0, [r1]
   11738:	ldr	r1, [ip]
   1173c:	ldrb	r1, [r0, r1]
   11740:	strb	r1, [r6, r2]
   11744:	add	r2, r2, #1
   11748:	str	r2, [r3, #12]
   1174c:	movw	r4, #50032	; 0xc370
   11750:	movt	r4, #2
   11754:	ldr	r5, [r4, #12]
   11758:	add	r5, r6, r5
   1175c:	str	r5, [r4, #28]
   11760:	ldr	r8, [r4, #24]
   11764:	movw	r3, #49492	; 0xc154
   11768:	movt	r3, #2
   1176c:	ldr	r3, [r3]
   11770:	mov	r2, r8
   11774:	ldrb	r1, [r3]
   11778:	mov	r0, r5
   1177c:	bl	113c0 <memset@plt>
   11780:	ldr	r1, [r4, #16]
   11784:	cmp	r1, #0
   11788:	beq	11798 <__assert_fail@plt+0x2b8>
   1178c:	ldr	r2, [r4, #20]
   11790:	add	r0, r5, r8
   11794:	bl	111c8 <memcpy@plt>
   11798:	movw	r4, #50032	; 0xc370
   1179c:	movt	r4, #2
   117a0:	ldr	r3, [r4, #4]
   117a4:	mov	r2, #0
   117a8:	strb	r2, [r6, r3]
   117ac:	ldr	r0, [r4, #32]
   117b0:	bl	153f4 <__assert_fail@plt+0x3f14>
   117b4:	mov	r1, #4
   117b8:	ldr	r0, [r4, #24]
   117bc:	bl	186ac <__assert_fail@plt+0x71cc>
   117c0:	mov	r5, r0
   117c4:	str	r0, [r4, #32]
   117c8:	ldr	r6, [r4, #36]	; 0x24
   117cc:	cmp	r6, #0
   117d0:	beq	11880 <__assert_fail@plt+0x3a0>
   117d4:	cmp	r7, #0
   117d8:	bne	1183c <__assert_fail@plt+0x35c>
   117dc:	mov	r0, r6
   117e0:	bl	11354 <strlen@plt>
   117e4:	mov	r4, r0
   117e8:	movw	r3, #50032	; 0xc370
   117ec:	movt	r3, #2
   117f0:	ldr	r7, [r3, #24]
   117f4:	sub	r0, r7, r0
   117f8:	ldr	r3, [r3, #28]
   117fc:	mov	r2, r4
   11800:	mov	r1, r6
   11804:	add	r0, r3, r0
   11808:	bl	111c8 <memcpy@plt>
   1180c:	add	ip, r5, r7, lsl #2
   11810:	cmp	r4, #0
   11814:	beq	11880 <__assert_fail@plt+0x3a0>
   11818:	add	r2, r6, r4
   1181c:	mov	r1, r6
   11820:	ldrb	r3, [r2, #-1]!
   11824:	sub	r3, r3, #48	; 0x30
   11828:	str	r3, [ip, #-4]!
   1182c:	cmp	r1, r2
   11830:	bne	11820 <__assert_fail@plt+0x340>
   11834:	b	11880 <__assert_fail@plt+0x3a0>
   11838:	bl	18804 <__assert_fail@plt+0x7324>
   1183c:	movw	r3, #38992	; 0x9850
   11840:	movt	r3, #1
   11844:	movw	r2, #409	; 0x199
   11848:	movw	r1, #39392	; 0x99e0
   1184c:	movt	r1, #1
   11850:	movw	r0, #39404	; 0x99ec
   11854:	movt	r0, #1
   11858:	bl	114e0 <__assert_fail@plt>
   1185c:	ldr	r3, [r8]
   11860:	add	r3, lr, r3
   11864:	ldrb	r3, [r3, #1]
   11868:	cmp	r3, #0
   1186c:	beq	11654 <__assert_fail@plt+0x174>
   11870:	ldrb	r3, [lr, r2]
   11874:	strb	r3, [r9]
   11878:	cmp	r3, #0
   1187c:	beq	118ec <__assert_fail@plt+0x40c>
   11880:	ldrd	r4, [sp]
   11884:	ldrd	r6, [sp, #8]
   11888:	ldrd	r8, [sp, #16]
   1188c:	ldr	sl, [sp, #24]
   11890:	add	sp, sp, #28
   11894:	pop	{pc}		; (ldr pc, [sp], #4)
   11898:	str	r7, [r3, #4]
   1189c:	ldrb	r2, [lr]
   118a0:	strb	r2, [ip, #-1]!
   118a4:	sub	r0, r0, #1
   118a8:	cmn	r0, #1
   118ac:	beq	118fc <__assert_fail@plt+0x41c>
   118b0:	mov	r5, r3
   118b4:	sub	r3, r3, #4
   118b8:	ldr	r2, [r5]
   118bc:	add	r2, r2, #1
   118c0:	str	r2, [r3, #4]
   118c4:	cmp	r0, #0
   118c8:	movne	r1, #0
   118cc:	andeq	r1, r6, #1
   118d0:	cmp	r1, #0
   118d4:	bne	1185c <__assert_fail@plt+0x37c>
   118d8:	ldrb	r2, [lr, r2]
   118dc:	strb	r2, [ip, #-1]
   118e0:	cmp	r2, #0
   118e4:	beq	11898 <__assert_fail@plt+0x3b8>
   118e8:	b	11880 <__assert_fail@plt+0x3a0>
   118ec:	mov	r3, #0
   118f0:	str	r3, [r5]
   118f4:	ldrb	r3, [lr]
   118f8:	strb	r3, [r9]
   118fc:	mov	r2, #5
   11900:	movw	r1, #39412	; 0x99f4
   11904:	movt	r1, #1
   11908:	mov	r0, #0
   1190c:	bl	1121c <dcgettext@plt>
   11910:	mov	r2, r0
   11914:	mov	r1, #0
   11918:	mov	r0, #1
   1191c:	bl	112d0 <error@plt>
   11920:	strd	r4, [sp, #-20]!	; 0xffffffec
   11924:	strd	r6, [sp, #8]
   11928:	str	lr, [sp, #16]
   1192c:	sub	sp, sp, #116	; 0x74
   11930:	mov	r4, r0
   11934:	movw	r3, #50032	; 0xc370
   11938:	movt	r3, #2
   1193c:	ldr	r3, [r3, #40]	; 0x28
   11940:	cmp	r3, #0
   11944:	beq	11aa8 <__assert_fail@plt+0x5c8>
   11948:	movw	r0, #39552	; 0x9a80
   1194c:	movt	r0, #1
   11950:	bl	112e8 <getenv@plt>
   11954:	subs	r6, r0, #0
   11958:	movw	r3, #39444	; 0x9a14
   1195c:	movt	r3, #1
   11960:	cmp	r0, #0
   11964:	moveq	r6, r3
   11968:	mov	r2, #1
   1196c:	mov	r1, r4
   11970:	movw	r0, #39560	; 0x9a88
   11974:	movt	r0, #1
   11978:	bl	11378 <setenv@plt>
   1197c:	cmp	r0, #0
   11980:	bne	11c50 <__assert_fail@plt+0x770>
   11984:	movw	r3, #50032	; 0xc370
   11988:	movt	r3, #2
   1198c:	ldrb	r3, [r3, #44]	; 0x2c
   11990:	cmp	r3, #0
   11994:	bne	11c7c <__assert_fail@plt+0x79c>
   11998:	add	r0, sp, #8
   1199c:	bl	11414 <pipe@plt>
   119a0:	cmp	r0, #0
   119a4:	bne	11cc8 <__assert_fail@plt+0x7e8>
   119a8:	bl	11450 <fork@plt>
   119ac:	subs	r4, r0, #0
   119b0:	bne	11da4 <__assert_fail@plt+0x8c4>
   119b4:	movw	r3, #50032	; 0xc370
   119b8:	movt	r3, #2
   119bc:	ldr	r3, [r3, #152]	; 0x98
   119c0:	cmp	r3, #0
   119c4:	beq	119f4 <__assert_fail@plt+0x514>
   119c8:	movw	r5, #50032	; 0xc370
   119cc:	movt	r5, #2
   119d0:	ldr	r3, [r5, #156]	; 0x9c
   119d4:	ldr	r0, [r3, r4, lsl #2]
   119d8:	bl	114c8 <close@plt>
   119dc:	cmp	r0, #0
   119e0:	bne	11cf4 <__assert_fail@plt+0x814>
   119e4:	add	r4, r4, #1
   119e8:	ldr	r3, [r5, #152]	; 0x98
   119ec:	cmp	r3, r4
   119f0:	bhi	119d0 <__assert_fail@plt+0x4f0>
   119f4:	ldr	r0, [sp, #12]
   119f8:	bl	114c8 <close@plt>
   119fc:	cmp	r0, #0
   11a00:	bne	11d20 <__assert_fail@plt+0x840>
   11a04:	ldr	r0, [sp, #8]
   11a08:	cmp	r0, #0
   11a0c:	beq	11a30 <__assert_fail@plt+0x550>
   11a10:	mov	r1, #0
   11a14:	bl	11228 <dup2@plt>
   11a18:	cmp	r0, #0
   11a1c:	bne	11d4c <__assert_fail@plt+0x86c>
   11a20:	ldr	r0, [sp, #8]
   11a24:	bl	114c8 <close@plt>
   11a28:	cmp	r0, #0
   11a2c:	bne	11d78 <__assert_fail@plt+0x898>
   11a30:	movw	r4, #50032	; 0xc370
   11a34:	movt	r4, #2
   11a38:	mov	r2, #0
   11a3c:	add	r1, r4, #160	; 0xa0
   11a40:	mov	r0, #2
   11a44:	bl	11198 <sigprocmask@plt>
   11a48:	mov	r0, r6
   11a4c:	bl	15018 <__assert_fail@plt+0x3b38>
   11a50:	ldr	r4, [r4, #40]	; 0x28
   11a54:	mov	r5, #0
   11a58:	str	r5, [sp]
   11a5c:	mov	r3, r4
   11a60:	movw	r2, #39736	; 0x9b38
   11a64:	movt	r2, #1
   11a68:	mov	r1, r0
   11a6c:	mov	r0, r6
   11a70:	bl	1145c <execl@plt>
   11a74:	bl	1139c <__errno_location@plt>
   11a78:	ldr	r7, [r0]
   11a7c:	mov	r2, #5
   11a80:	movw	r1, #39740	; 0x9b3c
   11a84:	movt	r1, #1
   11a88:	mov	r0, r5
   11a8c:	bl	1121c <dcgettext@plt>
   11a90:	str	r4, [sp]
   11a94:	mov	r3, r6
   11a98:	mov	r2, r0
   11a9c:	mov	r1, r7
   11aa0:	mov	r0, #1
   11aa4:	bl	112d0 <error@plt>
   11aa8:	movw	r3, #50032	; 0xc370
   11aac:	movt	r3, #2
   11ab0:	ldrb	r3, [r3, #44]	; 0x2c
   11ab4:	cmp	r3, #0
   11ab8:	bne	11b90 <__assert_fail@plt+0x6b0>
   11abc:	movw	r2, #438	; 0x1b6
   11ac0:	mov	r1, #65	; 0x41
   11ac4:	mov	r0, r4
   11ac8:	bl	152c8 <__assert_fail@plt+0x3de8>
   11acc:	subs	r5, r0, #0
   11ad0:	blt	11dfc <__assert_fail@plt+0x91c>
   11ad4:	add	r2, sp, #8
   11ad8:	mov	r1, r5
   11adc:	mov	r0, #3
   11ae0:	bl	11264 <__fxstat64@plt>
   11ae4:	cmp	r0, #0
   11ae8:	bne	11bd8 <__assert_fail@plt+0x6f8>
   11aec:	movw	r3, #50032	; 0xc370
   11af0:	movt	r3, #2
   11af4:	ldrd	r0, [r3, #144]	; 0x90
   11af8:	ldrd	r2, [sp, #104]	; 0x68
   11afc:	cmp	r1, r3
   11b00:	cmpeq	r0, r2
   11b04:	bne	11b24 <__assert_fail@plt+0x644>
   11b08:	movw	r3, #50032	; 0xc370
   11b0c:	movt	r3, #2
   11b10:	ldrd	r0, [r3, #48]	; 0x30
   11b14:	ldrd	r2, [sp, #8]
   11b18:	cmp	r1, r3
   11b1c:	cmpeq	r0, r2
   11b20:	beq	11c18 <__assert_fail@plt+0x738>
   11b24:	mov	r2, #0
   11b28:	mov	r3, #0
   11b2c:	mov	r0, r5
   11b30:	bl	111ec <ftruncate64@plt>
   11b34:	cmp	r0, #0
   11b38:	beq	11dfc <__assert_fail@plt+0x91c>
   11b3c:	ldr	r3, [sp, #24]
   11b40:	and	r3, r3, #61440	; 0xf000
   11b44:	cmp	r3, #32768	; 0x8000
   11b48:	bne	11dfc <__assert_fail@plt+0x91c>
   11b4c:	bl	1139c <__errno_location@plt>
   11b50:	ldr	r5, [r0]
   11b54:	mov	r2, #5
   11b58:	movw	r1, #39528	; 0x9a68
   11b5c:	movt	r1, #1
   11b60:	mov	r0, #0
   11b64:	bl	1121c <dcgettext@plt>
   11b68:	mov	r6, r0
   11b6c:	mov	r2, r4
   11b70:	mov	r1, #3
   11b74:	mov	r0, #0
   11b78:	bl	17754 <__assert_fail@plt+0x6274>
   11b7c:	mov	r3, r0
   11b80:	mov	r2, r6
   11b84:	mov	r1, r5
   11b88:	mov	r0, #1
   11b8c:	bl	112d0 <error@plt>
   11b90:	movw	r3, #50020	; 0xc364
   11b94:	movt	r3, #2
   11b98:	ldr	r5, [r3]
   11b9c:	mov	r2, #5
   11ba0:	movw	r1, #39452	; 0x9a1c
   11ba4:	movt	r1, #1
   11ba8:	mov	r0, #0
   11bac:	bl	1121c <dcgettext@plt>
   11bb0:	mov	r6, r0
   11bb4:	mov	r1, r4
   11bb8:	mov	r0, #4
   11bbc:	bl	17630 <__assert_fail@plt+0x6150>
   11bc0:	mov	r3, r0
   11bc4:	mov	r2, r6
   11bc8:	mov	r1, #1
   11bcc:	mov	r0, r5
   11bd0:	bl	113f0 <__fprintf_chk@plt>
   11bd4:	b	11abc <__assert_fail@plt+0x5dc>
   11bd8:	bl	1139c <__errno_location@plt>
   11bdc:	ldr	r5, [r0]
   11be0:	mov	r2, #5
   11be4:	movw	r1, #39472	; 0x9a30
   11be8:	movt	r1, #1
   11bec:	mov	r0, #0
   11bf0:	bl	1121c <dcgettext@plt>
   11bf4:	mov	r6, r0
   11bf8:	mov	r1, r4
   11bfc:	mov	r0, #4
   11c00:	bl	17630 <__assert_fail@plt+0x6150>
   11c04:	mov	r3, r0
   11c08:	mov	r2, r6
   11c0c:	mov	r1, r5
   11c10:	mov	r0, #1
   11c14:	bl	112d0 <error@plt>
   11c18:	mov	r2, #5
   11c1c:	movw	r1, #39492	; 0x9a44
   11c20:	movt	r1, #1
   11c24:	mov	r0, #0
   11c28:	bl	1121c <dcgettext@plt>
   11c2c:	mov	r5, r0
   11c30:	mov	r1, r4
   11c34:	mov	r0, #4
   11c38:	bl	17630 <__assert_fail@plt+0x6150>
   11c3c:	mov	r3, r0
   11c40:	mov	r2, r5
   11c44:	mov	r1, #0
   11c48:	mov	r0, #1
   11c4c:	bl	112d0 <error@plt>
   11c50:	bl	1139c <__errno_location@plt>
   11c54:	ldr	r4, [r0]
   11c58:	mov	r2, #5
   11c5c:	movw	r1, #39568	; 0x9a90
   11c60:	movt	r1, #1
   11c64:	mov	r0, #0
   11c68:	bl	1121c <dcgettext@plt>
   11c6c:	mov	r2, r0
   11c70:	mov	r1, r4
   11c74:	mov	r0, #1
   11c78:	bl	112d0 <error@plt>
   11c7c:	movw	r3, #50020	; 0xc364
   11c80:	movt	r3, #2
   11c84:	ldr	r5, [r3]
   11c88:	mov	r2, #5
   11c8c:	movw	r1, #39608	; 0x9ab8
   11c90:	movt	r1, #1
   11c94:	mov	r0, #0
   11c98:	bl	1121c <dcgettext@plt>
   11c9c:	mov	r7, r0
   11ca0:	mov	r2, r4
   11ca4:	mov	r1, #3
   11ca8:	mov	r0, #0
   11cac:	bl	17754 <__assert_fail@plt+0x6274>
   11cb0:	mov	r3, r0
   11cb4:	mov	r2, r7
   11cb8:	mov	r1, #1
   11cbc:	mov	r0, r5
   11cc0:	bl	113f0 <__fprintf_chk@plt>
   11cc4:	b	11998 <__assert_fail@plt+0x4b8>
   11cc8:	bl	1139c <__errno_location@plt>
   11ccc:	ldr	r4, [r0]
   11cd0:	mov	r2, #5
   11cd4:	movw	r1, #39632	; 0x9ad0
   11cd8:	movt	r1, #1
   11cdc:	mov	r0, #0
   11ce0:	bl	1121c <dcgettext@plt>
   11ce4:	mov	r2, r0
   11ce8:	mov	r1, r4
   11cec:	mov	r0, #1
   11cf0:	bl	112d0 <error@plt>
   11cf4:	bl	1139c <__errno_location@plt>
   11cf8:	ldr	r4, [r0]
   11cfc:	mov	r2, #5
   11d00:	movw	r1, #39656	; 0x9ae8
   11d04:	movt	r1, #1
   11d08:	mov	r0, #0
   11d0c:	bl	1121c <dcgettext@plt>
   11d10:	mov	r2, r0
   11d14:	mov	r1, r4
   11d18:	mov	r0, #1
   11d1c:	bl	112d0 <error@plt>
   11d20:	bl	1139c <__errno_location@plt>
   11d24:	ldr	r4, [r0]
   11d28:	mov	r2, #5
   11d2c:	movw	r1, #39676	; 0x9afc
   11d30:	movt	r1, #1
   11d34:	mov	r0, #0
   11d38:	bl	1121c <dcgettext@plt>
   11d3c:	mov	r2, r0
   11d40:	mov	r1, r4
   11d44:	mov	r0, #1
   11d48:	bl	112d0 <error@plt>
   11d4c:	bl	1139c <__errno_location@plt>
   11d50:	ldr	r4, [r0]
   11d54:	mov	r2, #5
   11d58:	movw	r1, #39696	; 0x9b10
   11d5c:	movt	r1, #1
   11d60:	mov	r0, #0
   11d64:	bl	1121c <dcgettext@plt>
   11d68:	mov	r2, r0
   11d6c:	mov	r1, r4
   11d70:	mov	r0, #1
   11d74:	bl	112d0 <error@plt>
   11d78:	bl	1139c <__errno_location@plt>
   11d7c:	ldr	r4, [r0]
   11d80:	mov	r2, #5
   11d84:	movw	r1, #39716	; 0x9b24
   11d88:	movt	r1, #1
   11d8c:	mov	r0, #0
   11d90:	bl	1121c <dcgettext@plt>
   11d94:	mov	r2, r0
   11d98:	mov	r1, r4
   11d9c:	mov	r0, #1
   11da0:	bl	112d0 <error@plt>
   11da4:	cmn	r4, #1
   11da8:	beq	11e14 <__assert_fail@plt+0x934>
   11dac:	ldr	r0, [sp, #8]
   11db0:	bl	114c8 <close@plt>
   11db4:	cmp	r0, #0
   11db8:	bne	11e40 <__assert_fail@plt+0x960>
   11dbc:	movw	r3, #50032	; 0xc370
   11dc0:	movt	r3, #2
   11dc4:	str	r4, [r3, #288]	; 0x120
   11dc8:	ldr	r2, [r3, #152]	; 0x98
   11dcc:	ldr	r3, [r3, #292]	; 0x124
   11dd0:	cmp	r2, r3
   11dd4:	beq	11e6c <__assert_fail@plt+0x98c>
   11dd8:	movw	r3, #50032	; 0xc370
   11ddc:	movt	r3, #2
   11de0:	ldr	r1, [r3, #156]	; 0x9c
   11de4:	ldr	r2, [r3, #152]	; 0x98
   11de8:	add	r0, r2, #1
   11dec:	str	r0, [r3, #152]	; 0x98
   11df0:	ldr	r3, [sp, #12]
   11df4:	str	r3, [r1, r2, lsl #2]
   11df8:	ldr	r5, [sp, #12]
   11dfc:	mov	r0, r5
   11e00:	add	sp, sp, #116	; 0x74
   11e04:	ldrd	r4, [sp]
   11e08:	ldrd	r6, [sp, #8]
   11e0c:	add	sp, sp, #16
   11e10:	pop	{pc}		; (ldr pc, [sp], #4)
   11e14:	bl	1139c <__errno_location@plt>
   11e18:	ldr	r4, [r0]
   11e1c:	mov	r2, #5
   11e20:	movw	r1, #39776	; 0x9b60
   11e24:	movt	r1, #1
   11e28:	mov	r0, #0
   11e2c:	bl	1121c <dcgettext@plt>
   11e30:	mov	r2, r0
   11e34:	mov	r1, r4
   11e38:	mov	r0, #1
   11e3c:	bl	112d0 <error@plt>
   11e40:	bl	1139c <__errno_location@plt>
   11e44:	ldr	r4, [r0]
   11e48:	mov	r2, #5
   11e4c:	movw	r1, #39800	; 0x9b78
   11e50:	movt	r1, #1
   11e54:	mov	r0, #0
   11e58:	bl	1121c <dcgettext@plt>
   11e5c:	mov	r2, r0
   11e60:	mov	r1, r4
   11e64:	mov	r0, #1
   11e68:	bl	112d0 <error@plt>
   11e6c:	movw	r4, #50032	; 0xc370
   11e70:	movt	r4, #2
   11e74:	mov	r2, #4
   11e78:	add	r1, r4, #292	; 0x124
   11e7c:	ldr	r0, [r4, #156]	; 0x9c
   11e80:	bl	18538 <__assert_fail@plt+0x7058>
   11e84:	str	r0, [r4, #156]	; 0x9c
   11e88:	b	11dd8 <__assert_fail@plt+0x8f8>
   11e8c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11e90:	strd	r6, [sp, #8]
   11e94:	strd	r8, [sp, #16]
   11e98:	strd	sl, [sp, #24]
   11e9c:	str	lr, [sp, #32]
   11ea0:	sub	sp, sp, #4
   11ea4:	add	r9, r0, r1, lsl #4
   11ea8:	ldr	r3, [r9, #4]
   11eac:	cmp	r3, #0
   11eb0:	movge	r5, #0
   11eb4:	blt	11ed8 <__assert_fail@plt+0x9f8>
   11eb8:	mov	r0, r5
   11ebc:	add	sp, sp, #4
   11ec0:	ldrd	r4, [sp]
   11ec4:	ldrd	r6, [sp, #8]
   11ec8:	ldrd	r8, [sp, #16]
   11ecc:	ldrd	sl, [sp, #24]
   11ed0:	add	sp, sp, #32
   11ed4:	pop	{pc}		; (ldr pc, [sp], #4)
   11ed8:	cmp	r1, #0
   11edc:	subeq	r4, r2, #1
   11ee0:	subne	r4, r1, #1
   11ee4:	mov	r8, r2
   11ee8:	mov	r7, r1
   11eec:	mov	r6, r0
   11ef0:	mov	r5, #0
   11ef4:	b	11f50 <__assert_fail@plt+0xa70>
   11ef8:	ldr	r0, [r9]
   11efc:	bl	11920 <__assert_fail@plt+0x440>
   11f00:	b	11f68 <__assert_fail@plt+0xa88>
   11f04:	ldr	r2, [r6, r7, lsl #4]
   11f08:	mov	r1, #3
   11f0c:	mov	r0, #0
   11f10:	bl	17754 <__assert_fail@plt+0x6274>
   11f14:	mov	r3, r0
   11f18:	movw	r2, #39944	; 0x9c08
   11f1c:	movt	r2, #1
   11f20:	mov	r1, sl
   11f24:	mov	r0, #1
   11f28:	bl	112d0 <error@plt>
   11f2c:	ldr	r0, [r5, #8]
   11f30:	bl	1520c <__assert_fail@plt+0x3d2c>
   11f34:	cmp	r0, #0
   11f38:	bne	11fd4 <__assert_fail@plt+0xaf4>
   11f3c:	mov	r3, #0
   11f40:	str	r3, [r5, #8]
   11f44:	mvn	r3, #1
   11f48:	str	r3, [r5, #4]
   11f4c:	mov	r5, #1
   11f50:	ldr	r3, [r9, #4]
   11f54:	cmn	r3, #1
   11f58:	beq	11ef8 <__assert_fail@plt+0xa18>
   11f5c:	movw	r1, #3073	; 0xc01
   11f60:	ldr	r0, [r9]
   11f64:	bl	152c8 <__assert_fail@plt+0x3de8>
   11f68:	cmp	r0, #0
   11f6c:	bge	12000 <__assert_fail@plt+0xb20>
   11f70:	bl	1139c <__errno_location@plt>
   11f74:	mov	fp, r0
   11f78:	ldr	sl, [r0]
   11f7c:	sub	r3, sl, #23
   11f80:	cmp	r3, #1
   11f84:	bhi	11f04 <__assert_fail@plt+0xa24>
   11f88:	add	r5, r6, r4, lsl #4
   11f8c:	ldr	r3, [r5, #4]
   11f90:	cmp	r3, #0
   11f94:	bge	11f2c <__assert_fail@plt+0xa4c>
   11f98:	cmp	r4, #0
   11f9c:	subne	r4, r4, #1
   11fa0:	subeq	r4, r8, #1
   11fa4:	cmp	r4, r7
   11fa8:	bne	11f88 <__assert_fail@plt+0xaa8>
   11fac:	ldr	r2, [r6, r7, lsl #4]
   11fb0:	mov	r1, #3
   11fb4:	mov	r0, #0
   11fb8:	bl	17754 <__assert_fail@plt+0x6274>
   11fbc:	mov	r3, r0
   11fc0:	movw	r2, #39944	; 0x9c08
   11fc4:	movt	r2, #1
   11fc8:	mov	r1, sl
   11fcc:	mov	r0, #1
   11fd0:	bl	112d0 <error@plt>
   11fd4:	ldr	r4, [fp]
   11fd8:	ldr	r2, [r5]
   11fdc:	mov	r1, #3
   11fe0:	mov	r0, #0
   11fe4:	bl	17754 <__assert_fail@plt+0x6274>
   11fe8:	mov	r3, r0
   11fec:	movw	r2, #39944	; 0x9c08
   11ff0:	movt	r2, #1
   11ff4:	mov	r1, r4
   11ff8:	mov	r0, #1
   11ffc:	bl	112d0 <error@plt>
   12000:	str	r0, [r9, #4]
   12004:	movw	r1, #39828	; 0x9b94
   12008:	movt	r1, #1
   1200c:	bl	11138 <fdopen@plt>
   12010:	str	r0, [r9, #8]
   12014:	cmp	r0, #0
   12018:	beq	12038 <__assert_fail@plt+0xb58>
   1201c:	movw	r3, #50032	; 0xc370
   12020:	movt	r3, #2
   12024:	ldr	r2, [r3, #288]	; 0x120
   12028:	str	r2, [r9, #12]
   1202c:	mov	r2, #0
   12030:	str	r2, [r3, #288]	; 0x120
   12034:	b	11eb8 <__assert_fail@plt+0x9d8>
   12038:	bl	1139c <__errno_location@plt>
   1203c:	ldr	r4, [r0]
   12040:	ldr	r2, [r6, r7, lsl #4]
   12044:	mov	r1, #3
   12048:	mov	r0, #0
   1204c:	bl	17754 <__assert_fail@plt+0x6274>
   12050:	mov	r3, r0
   12054:	movw	r2, #39944	; 0x9c08
   12058:	movt	r2, #1
   1205c:	mov	r1, r4
   12060:	mov	r0, #1
   12064:	bl	112d0 <error@plt>
   12068:	strd	r4, [sp, #-20]!	; 0xffffffec
   1206c:	strd	r6, [sp, #8]
   12070:	str	lr, [sp, #16]
   12074:	sub	sp, sp, #36	; 0x24
   12078:	mov	r4, r1
   1207c:	mov	r6, r2
   12080:	mov	r5, r3
   12084:	cmp	r0, #0
   12088:	beq	12348 <__assert_fail@plt+0xe68>
   1208c:	bl	1520c <__assert_fail@plt+0x3d2c>
   12090:	cmp	r0, #0
   12094:	beq	120c8 <__assert_fail@plt+0xbe8>
   12098:	bl	1139c <__errno_location@plt>
   1209c:	ldr	r7, [r0]
   120a0:	movw	r3, #50032	; 0xc370
   120a4:	movt	r3, #2
   120a8:	ldr	r2, [r3, #40]	; 0x28
   120ac:	cmp	r7, #32
   120b0:	movne	r3, #0
   120b4:	moveq	r3, #1
   120b8:	cmp	r2, #0
   120bc:	moveq	r3, #0
   120c0:	cmp	r3, #0
   120c4:	beq	12144 <__assert_fail@plt+0xc64>
   120c8:	cmp	r4, #0
   120cc:	blt	12350 <__assert_fail@plt+0xe70>
   120d0:	movw	r3, #50032	; 0xc370
   120d4:	movt	r3, #2
   120d8:	ldr	lr, [r3, #152]	; 0x98
   120dc:	cmp	lr, #0
   120e0:	beq	12350 <__assert_fail@plt+0xe70>
   120e4:	movw	r3, #50032	; 0xc370
   120e8:	movt	r3, #2
   120ec:	ldr	r7, [r3, #156]	; 0x9c
   120f0:	ldr	r3, [r7]
   120f4:	cmp	r4, r3
   120f8:	addne	r2, r7, #4
   120fc:	movne	ip, lr
   12100:	movne	r3, #0
   12104:	beq	121ac <__assert_fail@plt+0xccc>
   12108:	add	r3, r3, #1
   1210c:	cmp	ip, r3
   12110:	beq	12350 <__assert_fail@plt+0xe70>
   12114:	mov	r1, r2
   12118:	add	r2, r2, #4
   1211c:	ldr	r0, [r1]
   12120:	cmp	r0, r4
   12124:	bne	12108 <__assert_fail@plt+0xc28>
   12128:	sub	lr, lr, #1
   1212c:	movw	r3, #50032	; 0xc370
   12130:	movt	r3, #2
   12134:	str	lr, [r3, #152]	; 0x98
   12138:	ldr	r3, [r7, lr, lsl #2]
   1213c:	str	r3, [r1]
   12140:	b	12350 <__assert_fail@plt+0xe70>
   12144:	mov	r2, r5
   12148:	mov	r1, #3
   1214c:	mov	r0, #0
   12150:	bl	17754 <__assert_fail@plt+0x6274>
   12154:	mov	r3, r0
   12158:	movw	r2, #39944	; 0x9c08
   1215c:	movt	r2, #1
   12160:	mov	r1, r7
   12164:	mov	r0, #1
   12168:	bl	112d0 <error@plt>
   1216c:	mov	r0, r4
   12170:	bl	114c8 <close@plt>
   12174:	cmp	r0, #0
   12178:	bge	120d0 <__assert_fail@plt+0xbf0>
   1217c:	bl	1139c <__errno_location@plt>
   12180:	ldr	r4, [r0]
   12184:	mov	r2, r5
   12188:	mov	r1, #3
   1218c:	mov	r0, #0
   12190:	bl	17754 <__assert_fail@plt+0x6274>
   12194:	mov	r3, r0
   12198:	movw	r2, #39944	; 0x9c08
   1219c:	movt	r2, #1
   121a0:	mov	r1, r4
   121a4:	mov	r0, #1
   121a8:	bl	112d0 <error@plt>
   121ac:	mov	r1, r7
   121b0:	b	12128 <__assert_fail@plt+0xc48>
   121b4:	mov	r2, #0
   121b8:	str	r2, [sp, #8]
   121bc:	add	r1, sp, #8
   121c0:	mov	r0, r6
   121c4:	bl	11294 <waitpid@plt>
   121c8:	cmn	r0, #1
   121cc:	beq	12264 <__assert_fail@plt+0xd84>
   121d0:	ldr	r2, [sp, #8]
   121d4:	and	r3, r2, #127	; 0x7f
   121d8:	add	r3, r3, #1
   121dc:	sbfx	r3, r3, #1, #7
   121e0:	sxtb	r3, r3
   121e4:	cmp	r3, #0
   121e8:	ble	122b8 <__assert_fail@plt+0xdd8>
   121ec:	and	r4, r2, #127	; 0x7f
   121f0:	cmp	r4, #13
   121f4:	beq	12358 <__assert_fail@plt+0xe78>
   121f8:	add	r1, sp, #12
   121fc:	mov	r0, r4
   12200:	bl	17c08 <__assert_fail@plt+0x6728>
   12204:	cmp	r0, #0
   12208:	bne	12298 <__assert_fail@plt+0xdb8>
   1220c:	mov	r2, #5
   12210:	movw	r1, #39864	; 0x9bb8
   12214:	movt	r1, #1
   12218:	mov	r0, #0
   1221c:	bl	1121c <dcgettext@plt>
   12220:	mov	r6, r0
   12224:	mov	r2, r5
   12228:	mov	r1, #3
   1222c:	mov	r0, #0
   12230:	bl	17754 <__assert_fail@plt+0x6274>
   12234:	movw	r3, #50032	; 0xc370
   12238:	movt	r3, #2
   1223c:	ldr	r3, [r3, #40]	; 0x28
   12240:	str	r3, [sp, #4]
   12244:	add	r3, sp, #12
   12248:	str	r3, [sp]
   1224c:	mov	r3, r0
   12250:	mov	r2, r6
   12254:	mov	r1, #0
   12258:	add	r0, r4, #128	; 0x80
   1225c:	bl	112d0 <error@plt>
   12260:	b	12358 <__assert_fail@plt+0xe78>
   12264:	bl	1139c <__errno_location@plt>
   12268:	ldr	r4, [r0]
   1226c:	cmp	r4, #10
   12270:	beq	121d0 <__assert_fail@plt+0xcf0>
   12274:	mov	r2, #5
   12278:	movw	r1, #39832	; 0x9b98
   1227c:	movt	r1, #1
   12280:	mov	r0, #0
   12284:	bl	1121c <dcgettext@plt>
   12288:	mov	r2, r0
   1228c:	mov	r1, r4
   12290:	mov	r0, #1
   12294:	bl	112d0 <error@plt>
   12298:	str	r4, [sp]
   1229c:	movw	r3, #39860	; 0x9bb4
   122a0:	movt	r3, #1
   122a4:	mov	r2, #19
   122a8:	mov	r1, #1
   122ac:	add	r0, sp, #12
   122b0:	bl	113a8 <__sprintf_chk@plt>
   122b4:	b	1220c <__assert_fail@plt+0xd2c>
   122b8:	tst	r2, #127	; 0x7f
   122bc:	bne	12320 <__assert_fail@plt+0xe40>
   122c0:	ubfx	r4, r2, #8, #8
   122c4:	cmp	r4, #0
   122c8:	beq	12358 <__assert_fail@plt+0xe78>
   122cc:	mov	r2, #5
   122d0:	movw	r1, #39908	; 0x9be4
   122d4:	movt	r1, #1
   122d8:	mov	r0, #0
   122dc:	bl	1121c <dcgettext@plt>
   122e0:	mov	r6, r0
   122e4:	mov	r2, r5
   122e8:	mov	r1, #3
   122ec:	mov	r0, #0
   122f0:	bl	17754 <__assert_fail@plt+0x6274>
   122f4:	movw	r3, #50032	; 0xc370
   122f8:	movt	r3, #2
   122fc:	ldr	r3, [r3, #40]	; 0x28
   12300:	str	r3, [sp, #4]
   12304:	str	r4, [sp]
   12308:	mov	r3, r0
   1230c:	mov	r2, r6
   12310:	mov	r1, #0
   12314:	mov	r0, r4
   12318:	bl	112d0 <error@plt>
   1231c:	b	12358 <__assert_fail@plt+0xe78>
   12320:	mov	r2, #5
   12324:	movw	r1, #39948	; 0x9c0c
   12328:	movt	r1, #1
   1232c:	mov	r0, #0
   12330:	bl	1121c <dcgettext@plt>
   12334:	ldr	r3, [sp, #8]
   12338:	mov	r2, r0
   1233c:	mov	r1, #0
   12340:	mov	r0, #1
   12344:	bl	112d0 <error@plt>
   12348:	cmp	r1, #0
   1234c:	bge	1216c <__assert_fail@plt+0xc8c>
   12350:	cmp	r6, #0
   12354:	bgt	121b4 <__assert_fail@plt+0xcd4>
   12358:	add	sp, sp, #36	; 0x24
   1235c:	ldrd	r4, [sp]
   12360:	ldrd	r6, [sp, #8]
   12364:	add	sp, sp, #16
   12368:	pop	{pc}		; (ldr pc, [sp], #4)
   1236c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12370:	strd	r6, [sp, #8]
   12374:	str	r8, [sp, #16]
   12378:	str	lr, [sp, #20]
   1237c:	mov	r7, r1
   12380:	mov	r4, r2
   12384:	cmp	r0, #0
   12388:	beq	123e4 <__assert_fail@plt+0xf04>
   1238c:	orrs	r3, r1, r2
   12390:	bne	123a8 <__assert_fail@plt+0xec8>
   12394:	movw	r3, #50032	; 0xc370
   12398:	movt	r3, #2
   1239c:	ldrb	r0, [r3, #296]	; 0x128
   123a0:	cmp	r0, #0
   123a4:	bne	12438 <__assert_fail@plt+0xf58>
   123a8:	movw	r5, #50032	; 0xc370
   123ac:	movt	r5, #2
   123b0:	movw	r6, #49492	; 0xc154
   123b4:	movt	r6, #2
   123b8:	ldr	r3, [r5]
   123bc:	ldr	r2, [r5, #288]	; 0x120
   123c0:	ldr	r1, [r6, #8]
   123c4:	mov	r0, #0
   123c8:	bl	12068 <__assert_fail@plt+0xb88>
   123cc:	bl	115e0 <__assert_fail@plt+0x100>
   123d0:	ldr	r0, [r5]
   123d4:	bl	11920 <__assert_fail@plt+0x440>
   123d8:	str	r0, [r6, #8]
   123dc:	cmp	r0, #0
   123e0:	blt	1244c <__assert_fail@plt+0xf6c>
   123e4:	movw	r3, #49492	; 0xc154
   123e8:	movt	r3, #2
   123ec:	mov	r2, r4
   123f0:	mov	r1, r7
   123f4:	ldr	r0, [r3, #8]
   123f8:	bl	15514 <__assert_fail@plt+0x4034>
   123fc:	cmp	r0, r4
   12400:	beq	124ac <__assert_fail@plt+0xfcc>
   12404:	bl	1139c <__errno_location@plt>
   12408:	ldr	r4, [r0]
   1240c:	movw	r3, #50032	; 0xc370
   12410:	movt	r3, #2
   12414:	ldr	r2, [r3, #40]	; 0x28
   12418:	cmp	r4, #32
   1241c:	movne	r3, #0
   12420:	moveq	r3, #1
   12424:	cmp	r2, #0
   12428:	moveq	r3, #0
   1242c:	cmp	r3, #0
   12430:	movne	r0, #0
   12434:	beq	1247c <__assert_fail@plt+0xf9c>
   12438:	ldrd	r4, [sp]
   1243c:	ldrd	r6, [sp, #8]
   12440:	ldr	r8, [sp, #16]
   12444:	add	sp, sp, #20
   12448:	pop	{pc}		; (ldr pc, [sp], #4)
   1244c:	bl	1139c <__errno_location@plt>
   12450:	ldr	r4, [r0]
   12454:	ldr	r2, [r5]
   12458:	mov	r1, #3
   1245c:	mov	r0, #0
   12460:	bl	17754 <__assert_fail@plt+0x6274>
   12464:	mov	r3, r0
   12468:	movw	r2, #39944	; 0x9c08
   1246c:	movt	r2, #1
   12470:	mov	r1, r4
   12474:	mov	r0, #1
   12478:	bl	112d0 <error@plt>
   1247c:	movw	r3, #50032	; 0xc370
   12480:	movt	r3, #2
   12484:	ldr	r2, [r3]
   12488:	mov	r1, #3
   1248c:	mov	r0, #0
   12490:	bl	17754 <__assert_fail@plt+0x6274>
   12494:	mov	r3, r0
   12498:	movw	r2, #39944	; 0x9c08
   1249c:	movt	r2, #1
   124a0:	mov	r1, r4
   124a4:	mov	r0, #1
   124a8:	bl	112d0 <error@plt>
   124ac:	mov	r0, #1
   124b0:	b	12438 <__assert_fail@plt+0xf58>
   124b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   124b8:	strd	r6, [sp, #8]
   124bc:	strd	r8, [sp, #16]
   124c0:	strd	sl, [sp, #24]
   124c4:	str	lr, [sp, #32]
   124c8:	sub	sp, sp, #52	; 0x34
   124cc:	strd	r0, [sp, #16]
   124d0:	str	r2, [sp, #32]
   124d4:	str	r3, [sp, #36]	; 0x24
   124d8:	ldr	r8, [sp, #88]	; 0x58
   124dc:	mov	sl, r0
   124e0:	mov	fp, r1
   124e4:	mov	r6, #0
   124e8:	mov	r7, #0
   124ec:	mov	r5, #1
   124f0:	mov	r4, r5
   124f4:	b	12684 <__assert_fail@plt+0x11a4>
   124f8:	cmp	r5, #0
   124fc:	beq	1252c <__assert_fail@plt+0x104c>
   12500:	ldr	r2, [sp, #36]	; 0x24
   12504:	ldr	r1, [sp, #32]
   12508:	mov	r0, #0
   1250c:	bl	17940 <__assert_fail@plt+0x6460>
   12510:	mov	r8, r0
   12514:	cmn	r0, #1
   12518:	beq	12560 <__assert_fail@plt+0x1080>
   1251c:	clz	r3, r0
   12520:	lsr	r3, r3, #5
   12524:	str	r3, [sp, #28]
   12528:	b	126a0 <__assert_fail@plt+0x11c0>
   1252c:	mov	r3, #1
   12530:	str	r3, [sp]
   12534:	mov	r2, sl
   12538:	mov	r3, fp
   1253c:	mov	r0, #0
   12540:	bl	11288 <lseek64@plt>
   12544:	mvn	r2, #0
   12548:	mvn	r3, #0
   1254c:	cmp	r1, r3
   12550:	cmpeq	r0, r2
   12554:	ldrdne	sl, [sp, #16]
   12558:	movne	r4, #1
   1255c:	b	12500 <__assert_fail@plt+0x1020>
   12560:	bl	1139c <__errno_location@plt>
   12564:	ldr	r4, [r0]
   12568:	movw	r3, #50032	; 0xc370
   1256c:	movt	r3, #2
   12570:	ldr	r2, [r3, #300]	; 0x12c
   12574:	mov	r1, #3
   12578:	mov	r0, #0
   1257c:	bl	17754 <__assert_fail@plt+0x6274>
   12580:	mov	r3, r0
   12584:	movw	r2, #39944	; 0x9c08
   12588:	movt	r2, #1
   1258c:	mov	r1, r4
   12590:	mov	r0, #1
   12594:	bl	112d0 <error@plt>
   12598:	mov	r2, sl
   1259c:	ldr	r1, [sp, #12]
   125a0:	mov	r0, r4
   125a4:	bl	1236c <__assert_fail@plt+0xe8c>
   125a8:	uxtb	r2, r4
   125ac:	mov	r3, #0
   125b0:	adds	r6, r6, r2
   125b4:	adc	r7, r7, r3
   125b8:	ldrd	r2, [sp, #96]	; 0x60
   125bc:	cmp	r7, r3
   125c0:	cmpeq	r6, r2
   125c4:	movcc	r4, #1
   125c8:	movcs	r4, #0
   125cc:	ldr	r3, [sp, #24]
   125d0:	cmp	r3, #0
   125d4:	moveq	r4, #1
   125d8:	orr	r3, r4, r0
   125dc:	tst	r3, #255	; 0xff
   125e0:	beq	126f0 <__assert_fail@plt+0x1210>
   125e4:	ldr	r3, [sp, #12]
   125e8:	add	r3, r3, sl
   125ec:	str	r3, [sp, #12]
   125f0:	sub	r5, r5, sl
   125f4:	ldrd	r8, [sp, #16]
   125f8:	mov	sl, r8
   125fc:	mov	r2, r5
   12600:	mov	r3, #0
   12604:	cmp	r3, r9
   12608:	cmpeq	r5, r8
   1260c:	bcc	12770 <__assert_fail@plt+0x1290>
   12610:	orr	r0, r4, r0
   12614:	ands	r0, r0, #255	; 0xff
   12618:	beq	125a8 <__assert_fail@plt+0x10c8>
   1261c:	b	12598 <__assert_fail@plt+0x10b8>
   12620:	cmp	r8, #0
   12624:	beq	12674 <__assert_fail@plt+0x1194>
   12628:	orr	r5, r4, r5
   1262c:	ands	r5, r5, #255	; 0xff
   12630:	ldrne	r9, [sp, #32]
   12634:	bne	126d8 <__assert_fail@plt+0x11f8>
   12638:	mov	r4, r5
   1263c:	uxtb	r2, r4
   12640:	mov	r3, #0
   12644:	adds	r6, r6, r2
   12648:	adc	r7, r7, r3
   1264c:	eor	r4, r5, #1
   12650:	ldrd	r2, [sp, #96]	; 0x60
   12654:	cmp	r3, r7
   12658:	cmpeq	r2, r6
   1265c:	movne	r4, #0
   12660:	andeq	r4, r4, #1
   12664:	cmp	r4, #0
   12668:	bne	12754 <__assert_fail@plt+0x1274>
   1266c:	subs	sl, sl, r8
   12670:	sbc	fp, fp, #0
   12674:	mvn	r8, #0
   12678:	ldr	r3, [sp, #28]
   1267c:	cmp	r3, #0
   12680:	bne	126f0 <__assert_fail@plt+0x1210>
   12684:	cmn	r8, #1
   12688:	beq	124f8 <__assert_fail@plt+0x1018>
   1268c:	ldr	r3, [sp, #36]	; 0x24
   12690:	cmp	r8, r3
   12694:	movcs	r3, #0
   12698:	movcc	r3, #1
   1269c:	str	r3, [sp, #28]
   126a0:	mov	r3, #0
   126a4:	cmp	fp, r3
   126a8:	cmpeq	sl, r8
   126ac:	bhi	12620 <__assert_fail@plt+0x1140>
   126b0:	ldr	r9, [sp, #32]
   126b4:	ldr	r3, [sp, #96]	; 0x60
   126b8:	ldr	r2, [sp, #100]	; 0x64
   126bc:	orr	r3, r3, r2
   126c0:	mov	r0, r5
   126c4:	mov	r5, r8
   126c8:	str	r9, [sp, #12]
   126cc:	str	r3, [sp, #24]
   126d0:	b	12610 <__assert_fail@plt+0x1130>
   126d4:	ldrd	sl, [sp, #16]
   126d8:	mov	r2, r8
   126dc:	mov	r1, r9
   126e0:	mov	r0, r4
   126e4:	bl	1236c <__assert_fail@plt+0xe8c>
   126e8:	mov	r5, r0
   126ec:	b	1263c <__assert_fail@plt+0x115c>
   126f0:	adds	r3, r6, #1
   126f4:	str	r3, [sp, #40]	; 0x28
   126f8:	adc	r3, r7, #0
   126fc:	str	r3, [sp, #44]	; 0x2c
   12700:	ldrd	r2, [sp, #96]	; 0x60
   12704:	cmp	r7, r3
   12708:	cmpeq	r6, r2
   1270c:	bcs	12754 <__assert_fail@plt+0x1274>
   12710:	mov	r5, #0
   12714:	mov	r4, #1
   12718:	ldrd	r6, [sp, #40]	; 0x28
   1271c:	mov	r8, r2
   12720:	mov	r9, r3
   12724:	b	12730 <__assert_fail@plt+0x1250>
   12728:	mov	r6, r2
   1272c:	mov	r7, r3
   12730:	mov	r2, r5
   12734:	mov	r1, r5
   12738:	mov	r0, r4
   1273c:	bl	1236c <__assert_fail@plt+0xe8c>
   12740:	adds	r2, r6, #1
   12744:	adc	r3, r7, #0
   12748:	cmp	r9, r7
   1274c:	cmpeq	r8, r6
   12750:	bne	12728 <__assert_fail@plt+0x1248>
   12754:	add	sp, sp, #52	; 0x34
   12758:	ldrd	r4, [sp]
   1275c:	ldrd	r6, [sp, #8]
   12760:	ldrd	r8, [sp, #16]
   12764:	ldrd	sl, [sp, #24]
   12768:	add	sp, sp, #32
   1276c:	pop	{pc}		; (ldr pc, [sp], #4)
   12770:	ldr	r9, [sp, #12]
   12774:	mov	r8, r5
   12778:	mov	r5, r0
   1277c:	cmp	r2, #0
   12780:	bne	126d4 <__assert_fail@plt+0x11f4>
   12784:	ldrd	sl, [sp, #16]
   12788:	b	12674 <__assert_fail@plt+0x1194>
   1278c:	push	{lr}		; (str lr, [sp, #-4]!)
   12790:	sub	sp, sp, #60	; 0x3c
   12794:	subs	r5, r0, #0
   12798:	beq	127e0 <__assert_fail@plt+0x1300>
   1279c:	movw	r3, #50016	; 0xc360
   127a0:	movt	r3, #2
   127a4:	ldr	r4, [r3]
   127a8:	mov	r2, #5
   127ac:	movw	r1, #39992	; 0x9c38
   127b0:	movt	r1, #1
   127b4:	mov	r0, #0
   127b8:	bl	1121c <dcgettext@plt>
   127bc:	movw	r3, #50476	; 0xc52c
   127c0:	movt	r3, #2
   127c4:	ldr	r3, [r3]
   127c8:	mov	r2, r0
   127cc:	mov	r1, #1
   127d0:	mov	r0, r4
   127d4:	bl	113f0 <__fprintf_chk@plt>
   127d8:	mov	r0, r5
   127dc:	bl	11348 <exit@plt>
   127e0:	mov	r2, #5
   127e4:	movw	r1, #40032	; 0x9c60
   127e8:	movt	r1, #1
   127ec:	mov	r0, #0
   127f0:	bl	1121c <dcgettext@plt>
   127f4:	movw	r3, #50476	; 0xc52c
   127f8:	movt	r3, #2
   127fc:	ldr	r2, [r3]
   12800:	mov	r1, r0
   12804:	mov	r0, #1
   12808:	bl	113cc <__printf_chk@plt>
   1280c:	mov	r2, #5
   12810:	movw	r1, #40072	; 0x9c88
   12814:	movt	r1, #1
   12818:	mov	r0, #0
   1281c:	bl	1121c <dcgettext@plt>
   12820:	movw	r4, #50020	; 0xc364
   12824:	movt	r4, #2
   12828:	ldr	r1, [r4]
   1282c:	bl	11150 <fputs_unlocked@plt>
   12830:	mov	r2, #5
   12834:	movw	r1, #40180	; 0x9cf4
   12838:	movt	r1, #1
   1283c:	mov	r0, #0
   12840:	bl	1121c <dcgettext@plt>
   12844:	ldr	r1, [r4]
   12848:	bl	11150 <fputs_unlocked@plt>
   1284c:	mov	r2, #5
   12850:	movw	r1, #40236	; 0x9d2c
   12854:	movt	r1, #1
   12858:	mov	r0, #0
   1285c:	bl	1121c <dcgettext@plt>
   12860:	ldr	r1, [r4]
   12864:	bl	11150 <fputs_unlocked@plt>
   12868:	ldr	r6, [r4]
   1286c:	mov	r2, #5
   12870:	movw	r1, #40312	; 0x9d78
   12874:	movt	r1, #1
   12878:	mov	r0, #0
   1287c:	bl	1121c <dcgettext@plt>
   12880:	mov	r3, #2
   12884:	mov	r2, r0
   12888:	mov	r1, #1
   1288c:	mov	r0, r6
   12890:	bl	113f0 <__fprintf_chk@plt>
   12894:	mov	r2, #5
   12898:	movw	r1, #41404	; 0xa1bc
   1289c:	movt	r1, #1
   128a0:	mov	r0, #0
   128a4:	bl	1121c <dcgettext@plt>
   128a8:	ldr	r1, [r4]
   128ac:	bl	11150 <fputs_unlocked@plt>
   128b0:	mov	r2, #5
   128b4:	movw	r1, #41520	; 0xa230
   128b8:	movt	r1, #1
   128bc:	mov	r0, #0
   128c0:	bl	1121c <dcgettext@plt>
   128c4:	ldr	r1, [r4]
   128c8:	bl	11150 <fputs_unlocked@plt>
   128cc:	mov	r2, #5
   128d0:	movw	r1, #41568	; 0xa260
   128d4:	movt	r1, #1
   128d8:	mov	r0, #0
   128dc:	bl	1121c <dcgettext@plt>
   128e0:	ldr	r1, [r4]
   128e4:	bl	11150 <fputs_unlocked@plt>
   128e8:	mov	r2, #5
   128ec:	movw	r1, #41624	; 0xa298
   128f0:	movt	r1, #1
   128f4:	mov	r0, #0
   128f8:	bl	1121c <dcgettext@plt>
   128fc:	ldr	r1, [r4]
   12900:	bl	11150 <fputs_unlocked@plt>
   12904:	mov	r2, #5
   12908:	movw	r1, #41836	; 0xa36c
   1290c:	movt	r1, #1
   12910:	mov	r0, #0
   12914:	bl	1121c <dcgettext@plt>
   12918:	ldr	r1, [r4]
   1291c:	bl	11150 <fputs_unlocked@plt>
   12920:	movw	r3, #38992	; 0x9850
   12924:	movt	r3, #1
   12928:	add	r0, r3, #16
   1292c:	ldr	r1, [r3, #16]
   12930:	ldr	r3, [r3, #20]
   12934:	str	r1, [sp]
   12938:	str	r3, [sp, #4]
   1293c:	ldrd	r2, [r0, #8]
   12940:	strd	r2, [sp, #8]
   12944:	ldrd	r2, [r0, #16]
   12948:	strd	r2, [sp, #16]
   1294c:	ldrd	r2, [r0, #24]
   12950:	strd	r2, [sp, #24]
   12954:	ldrd	r2, [r0, #32]
   12958:	strd	r2, [sp, #32]
   1295c:	ldrd	r2, [r0, #40]	; 0x28
   12960:	strd	r2, [sp, #40]	; 0x28
   12964:	ldrd	r2, [r0, #48]	; 0x30
   12968:	strd	r2, [sp, #48]	; 0x30
   1296c:	cmp	r1, #0
   12970:	moveq	r4, sp
   12974:	beq	129a0 <__assert_fail@plt+0x14c0>
   12978:	mov	r4, sp
   1297c:	movw	r6, #39984	; 0x9c30
   12980:	movt	r6, #1
   12984:	mov	r0, r6
   12988:	bl	11168 <strcmp@plt>
   1298c:	cmp	r0, #0
   12990:	beq	129a0 <__assert_fail@plt+0x14c0>
   12994:	ldr	r1, [r4, #8]!
   12998:	cmp	r1, #0
   1299c:	bne	12984 <__assert_fail@plt+0x14a4>
   129a0:	ldr	r4, [r4, #4]
   129a4:	cmp	r4, #0
   129a8:	beq	12b04 <__assert_fail@plt+0x1624>
   129ac:	mov	r2, #5
   129b0:	movw	r1, #42176	; 0xa4c0
   129b4:	movt	r1, #1
   129b8:	mov	r0, #0
   129bc:	bl	1121c <dcgettext@plt>
   129c0:	movw	r3, #42200	; 0xa4d8
   129c4:	movt	r3, #1
   129c8:	movw	r2, #42240	; 0xa500
   129cc:	movt	r2, #1
   129d0:	mov	r1, r0
   129d4:	mov	r0, #1
   129d8:	bl	113cc <__printf_chk@plt>
   129dc:	mov	r1, #0
   129e0:	mov	r0, #5
   129e4:	bl	11438 <setlocale@plt>
   129e8:	cmp	r0, #0
   129ec:	beq	12a08 <__assert_fail@plt+0x1528>
   129f0:	mov	r2, #3
   129f4:	movw	r1, #42256	; 0xa510
   129f8:	movt	r1, #1
   129fc:	bl	114b0 <strncmp@plt>
   12a00:	cmp	r0, #0
   12a04:	bne	12a84 <__assert_fail@plt+0x15a4>
   12a08:	mov	r2, #5
   12a0c:	movw	r1, #42332	; 0xa55c
   12a10:	movt	r1, #1
   12a14:	mov	r0, #0
   12a18:	bl	1121c <dcgettext@plt>
   12a1c:	movw	r6, #39984	; 0x9c30
   12a20:	movt	r6, #1
   12a24:	mov	r3, r6
   12a28:	movw	r2, #42200	; 0xa4d8
   12a2c:	movt	r2, #1
   12a30:	mov	r1, r0
   12a34:	mov	r0, #1
   12a38:	bl	113cc <__printf_chk@plt>
   12a3c:	mov	r2, #5
   12a40:	movw	r1, #42360	; 0xa578
   12a44:	movt	r1, #1
   12a48:	mov	r0, #0
   12a4c:	bl	1121c <dcgettext@plt>
   12a50:	mov	r1, r0
   12a54:	movw	r2, #43360	; 0xa960
   12a58:	movt	r2, #1
   12a5c:	movw	r3, #41516	; 0xa22c
   12a60:	movt	r3, #1
   12a64:	cmp	r4, r6
   12a68:	moveq	r3, r2
   12a6c:	mov	r2, r4
   12a70:	mov	r0, #1
   12a74:	bl	113cc <__printf_chk@plt>
   12a78:	b	127d8 <__assert_fail@plt+0x12f8>
   12a7c:	movw	r4, #39984	; 0x9c30
   12a80:	movt	r4, #1
   12a84:	mov	r2, #5
   12a88:	movw	r1, #42260	; 0xa514
   12a8c:	movt	r1, #1
   12a90:	mov	r0, #0
   12a94:	bl	1121c <dcgettext@plt>
   12a98:	movw	r3, #50020	; 0xc364
   12a9c:	movt	r3, #2
   12aa0:	ldr	r1, [r3]
   12aa4:	bl	11150 <fputs_unlocked@plt>
   12aa8:	b	12a08 <__assert_fail@plt+0x1528>
   12aac:	mov	r2, #5
   12ab0:	movw	r1, #42332	; 0xa55c
   12ab4:	movt	r1, #1
   12ab8:	mov	r0, #0
   12abc:	bl	1121c <dcgettext@plt>
   12ac0:	movw	r4, #39984	; 0x9c30
   12ac4:	movt	r4, #1
   12ac8:	mov	r3, r4
   12acc:	movw	r2, #42200	; 0xa4d8
   12ad0:	movt	r2, #1
   12ad4:	mov	r1, r0
   12ad8:	mov	r0, #1
   12adc:	bl	113cc <__printf_chk@plt>
   12ae0:	mov	r2, #5
   12ae4:	movw	r1, #42360	; 0xa578
   12ae8:	movt	r1, #1
   12aec:	mov	r0, #0
   12af0:	bl	1121c <dcgettext@plt>
   12af4:	mov	r1, r0
   12af8:	movw	r3, #43360	; 0xa960
   12afc:	movt	r3, #1
   12b00:	b	12a6c <__assert_fail@plt+0x158c>
   12b04:	mov	r2, #5
   12b08:	movw	r1, #42176	; 0xa4c0
   12b0c:	movt	r1, #1
   12b10:	mov	r0, #0
   12b14:	bl	1121c <dcgettext@plt>
   12b18:	movw	r3, #42200	; 0xa4d8
   12b1c:	movt	r3, #1
   12b20:	movw	r2, #42240	; 0xa500
   12b24:	movt	r2, #1
   12b28:	mov	r1, r0
   12b2c:	mov	r0, #1
   12b30:	bl	113cc <__printf_chk@plt>
   12b34:	mov	r1, #0
   12b38:	mov	r0, #5
   12b3c:	bl	11438 <setlocale@plt>
   12b40:	cmp	r0, #0
   12b44:	beq	12aac <__assert_fail@plt+0x15cc>
   12b48:	mov	r2, #3
   12b4c:	movw	r1, #42256	; 0xa510
   12b50:	movt	r1, #1
   12b54:	bl	114b0 <strncmp@plt>
   12b58:	cmp	r0, #0
   12b5c:	bne	12a7c <__assert_fail@plt+0x159c>
   12b60:	mov	r2, #5
   12b64:	movw	r1, #42332	; 0xa55c
   12b68:	movt	r1, #1
   12b6c:	mov	r0, #0
   12b70:	bl	1121c <dcgettext@plt>
   12b74:	movw	r4, #39984	; 0x9c30
   12b78:	movt	r4, #1
   12b7c:	mov	r3, r4
   12b80:	movw	r2, #42200	; 0xa4d8
   12b84:	movt	r2, #1
   12b88:	mov	r1, r0
   12b8c:	mov	r0, #1
   12b90:	bl	113cc <__printf_chk@plt>
   12b94:	mov	r2, #5
   12b98:	movw	r1, #42360	; 0xa578
   12b9c:	movt	r1, #1
   12ba0:	mov	r0, #0
   12ba4:	bl	1121c <dcgettext@plt>
   12ba8:	mov	r1, r0
   12bac:	movw	r3, #43360	; 0xa960
   12bb0:	movt	r3, #1
   12bb4:	b	12a6c <__assert_fail@plt+0x158c>
   12bb8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12bbc:	strd	r6, [sp, #8]
   12bc0:	strd	r8, [sp, #16]
   12bc4:	strd	sl, [sp, #24]
   12bc8:	str	lr, [sp, #32]
   12bcc:	sub	sp, sp, #300	; 0x12c
   12bd0:	str	r0, [sp, #32]
   12bd4:	str	r1, [sp, #56]	; 0x38
   12bd8:	ldr	r0, [r1]
   12bdc:	bl	15624 <__assert_fail@plt+0x4144>
   12be0:	movw	r1, #41516	; 0xa22c
   12be4:	movt	r1, #1
   12be8:	mov	r0, #6
   12bec:	bl	11438 <setlocale@plt>
   12bf0:	movw	r4, #42244	; 0xa504
   12bf4:	movt	r4, #1
   12bf8:	movw	r1, #42444	; 0xa5cc
   12bfc:	movt	r1, #1
   12c00:	mov	r0, r4
   12c04:	bl	1148c <bindtextdomain@plt>
   12c08:	mov	r0, r4
   12c0c:	bl	11240 <textdomain@plt>
   12c10:	movw	r0, #20732	; 0x50fc
   12c14:	movt	r0, #1
   12c18:	bl	1982c <__assert_fail@plt+0x834c>
   12c1c:	movw	r3, #50032	; 0xc370
   12c20:	movt	r3, #2
   12c24:	movw	r2, #42468	; 0xa5e4
   12c28:	movt	r2, #1
   12c2c:	str	r2, [r3, #300]	; 0x12c
   12c30:	movw	r2, #43560	; 0xaa28
   12c34:	movt	r2, #1
   12c38:	str	r2, [r3, #8]
   12c3c:	mov	r2, #0
   12c40:	mov	r3, #0
   12c44:	strd	r2, [sp, #24]
   12c48:	strd	r2, [sp, #48]	; 0x30
   12c4c:	mov	r9, #0
   12c50:	str	r9, [sp, #60]	; 0x3c
   12c54:	str	r9, [sp, #64]	; 0x40
   12c58:	movw	sl, #50008	; 0xc358
   12c5c:	movt	sl, #2
   12c60:	movw	fp, #38992	; 0x9850
   12c64:	movt	fp, #1
   12c68:	movw	r7, #42472	; 0xa5e8
   12c6c:	movt	r7, #1
   12c70:	movw	r6, #50024	; 0xc368
   12c74:	movt	r6, #2
   12c78:	mov	r8, r7
   12c7c:	ldr	r5, [sl]
   12c80:	cmp	r5, #0
   12c84:	moveq	r5, #1
   12c88:	mov	r3, #0
   12c8c:	str	r3, [sp]
   12c90:	ldr	r3, [pc, #2712]	; 13730 <__assert_fail@plt+0x2250>
   12c94:	mov	r2, r8
   12c98:	ldr	r1, [sp, #56]	; 0x38
   12c9c:	ldr	r0, [sp, #32]
   12ca0:	bl	11330 <getopt_long@plt>
   12ca4:	mov	r4, r0
   12ca8:	cmn	r0, #1
   12cac:	beq	1355c <__assert_fail@plt+0x207c>
   12cb0:	cmp	r0, #101	; 0x65
   12cb4:	beq	13488 <__assert_fail@plt+0x1fa8>
   12cb8:	ble	12cf8 <__assert_fail@plt+0x1818>
   12cbc:	cmp	r0, #120	; 0x78
   12cc0:	beq	12dfc <__assert_fail@plt+0x191c>
   12cc4:	bgt	12f08 <__assert_fail@plt+0x1a28>
   12cc8:	cmp	r0, #110	; 0x6e
   12ccc:	beq	13094 <__assert_fail@plt+0x1bb4>
   12cd0:	ble	12ea0 <__assert_fail@plt+0x19c0>
   12cd4:	cmp	r0, #116	; 0x74
   12cd8:	beq	1325c <__assert_fail@plt+0x1d7c>
   12cdc:	cmp	r0, #117	; 0x75
   12ce0:	bne	13554 <__assert_fail@plt+0x2074>
   12ce4:	movw	r3, #50032	; 0xc370
   12ce8:	movt	r3, #2
   12cec:	mov	r2, #1
   12cf0:	strb	r2, [r3, #304]	; 0x130
   12cf4:	b	12c7c <__assert_fail@plt+0x179c>
   12cf8:	cmp	r0, #57	; 0x39
   12cfc:	ble	12d70 <__assert_fail@plt+0x1890>
   12d00:	cmp	r0, #97	; 0x61
   12d04:	beq	12f70 <__assert_fail@plt+0x1a90>
   12d08:	ble	12d90 <__assert_fail@plt+0x18b0>
   12d0c:	cmp	r0, #98	; 0x62
   12d10:	bne	12df4 <__assert_fail@plt+0x1914>
   12d14:	cmp	r9, #0
   12d18:	bne	13010 <__assert_fail@plt+0x1b30>
   12d1c:	ldr	r4, [r6]
   12d20:	mov	r2, #5
   12d24:	movw	r1, #42608	; 0xa670
   12d28:	movt	r1, #1
   12d2c:	mov	r0, #0
   12d30:	bl	1121c <dcgettext@plt>
   12d34:	mov	r3, #0
   12d38:	str	r3, [sp, #16]
   12d3c:	str	r0, [sp, #12]
   12d40:	add	r3, fp, #344	; 0x158
   12d44:	str	r3, [sp, #8]
   12d48:	mvn	r2, #0
   12d4c:	mvn	r3, #-2147483648	; 0x80000000
   12d50:	strd	r2, [sp]
   12d54:	mov	r2, #1
   12d58:	mov	r3, #0
   12d5c:	mov	r0, r4
   12d60:	bl	1896c <__assert_fail@plt+0x748c>
   12d64:	strd	r0, [sp, #24]
   12d68:	mov	r9, #1
   12d6c:	b	12c7c <__assert_fail@plt+0x179c>
   12d70:	cmp	r0, #48	; 0x30
   12d74:	bge	13340 <__assert_fail@plt+0x1e60>
   12d78:	cmn	r0, #3
   12d7c:	beq	13500 <__assert_fail@plt+0x2020>
   12d80:	cmn	r0, #2
   12d84:	bne	13554 <__assert_fail@plt+0x2074>
   12d88:	mov	r0, #0
   12d8c:	bl	1278c <__assert_fail@plt+0x12ac>
   12d90:	cmp	r0, #67	; 0x43
   12d94:	bne	13554 <__assert_fail@plt+0x2074>
   12d98:	cmp	r9, #0
   12d9c:	bne	13068 <__assert_fail@plt+0x1b88>
   12da0:	ldr	r4, [r6]
   12da4:	mov	r2, #5
   12da8:	movw	r1, #42608	; 0xa670
   12dac:	movt	r1, #1
   12db0:	mov	r0, #0
   12db4:	bl	1121c <dcgettext@plt>
   12db8:	mov	r3, #0
   12dbc:	str	r3, [sp, #16]
   12dc0:	str	r0, [sp, #12]
   12dc4:	add	r3, fp, #344	; 0x158
   12dc8:	str	r3, [sp, #8]
   12dcc:	mvn	r2, #0
   12dd0:	mov	r3, #0
   12dd4:	strd	r2, [sp]
   12dd8:	mov	r2, #1
   12ddc:	mov	r3, #0
   12de0:	mov	r0, r4
   12de4:	bl	1896c <__assert_fail@plt+0x748c>
   12de8:	strd	r0, [sp, #24]
   12dec:	mov	r9, #2
   12df0:	b	12c7c <__assert_fail@plt+0x179c>
   12df4:	cmp	r0, #100	; 0x64
   12df8:	bne	13554 <__assert_fail@plt+0x2074>
   12dfc:	movw	r7, #42412	; 0xa5ac
   12e00:	movt	r7, #1
   12e04:	movw	r3, #42424	; 0xa5b8
   12e08:	movt	r3, #1
   12e0c:	cmp	r4, #100	; 0x64
   12e10:	movne	r7, r3
   12e14:	movw	r3, #49492	; 0xc154
   12e18:	movt	r3, #2
   12e1c:	str	r7, [r3]
   12e20:	ldr	r5, [r6]
   12e24:	cmp	r5, #0
   12e28:	beq	12c7c <__assert_fail@plt+0x179c>
   12e2c:	mov	r0, r5
   12e30:	bl	11354 <strlen@plt>
   12e34:	str	r0, [sp, #72]	; 0x48
   12e38:	mov	r1, r7
   12e3c:	mov	r0, r5
   12e40:	bl	114d4 <strspn@plt>
   12e44:	ldr	r3, [sp, #72]	; 0x48
   12e48:	cmp	r3, r0
   12e4c:	bne	13438 <__assert_fail@plt+0x1f58>
   12e50:	ldrb	r3, [r5]
   12e54:	cmp	r3, #48	; 0x30
   12e58:	bne	12e90 <__assert_fail@plt+0x19b0>
   12e5c:	ldrb	r3, [r5, #1]
   12e60:	cmp	r3, #0
   12e64:	addne	r3, r5, #1
   12e68:	beq	12e90 <__assert_fail@plt+0x19b0>
   12e6c:	mov	r5, r3
   12e70:	str	r3, [r6]
   12e74:	add	r3, r3, #1
   12e78:	ldrb	r2, [r5]
   12e7c:	cmp	r2, #48	; 0x30
   12e80:	bne	12e90 <__assert_fail@plt+0x19b0>
   12e84:	ldrb	r2, [r3]
   12e88:	cmp	r2, #0
   12e8c:	bne	12e6c <__assert_fail@plt+0x198c>
   12e90:	movw	r3, #50032	; 0xc370
   12e94:	movt	r3, #2
   12e98:	str	r5, [r3, #36]	; 0x24
   12e9c:	b	12c7c <__assert_fail@plt+0x179c>
   12ea0:	cmp	r0, #108	; 0x6c
   12ea4:	bne	13554 <__assert_fail@plt+0x2074>
   12ea8:	cmp	r9, #0
   12eac:	bne	1303c <__assert_fail@plt+0x1b5c>
   12eb0:	ldr	r4, [r6]
   12eb4:	mov	r2, #5
   12eb8:	movw	r1, #42632	; 0xa688
   12ebc:	movt	r1, #1
   12ec0:	mov	r0, #0
   12ec4:	bl	1121c <dcgettext@plt>
   12ec8:	mov	r3, #0
   12ecc:	str	r3, [sp, #16]
   12ed0:	str	r0, [sp, #12]
   12ed4:	movw	r3, #41516	; 0xa22c
   12ed8:	movt	r3, #1
   12edc:	str	r3, [sp, #8]
   12ee0:	mvn	r2, #0
   12ee4:	mvn	r3, #0
   12ee8:	strd	r2, [sp]
   12eec:	mov	r2, #1
   12ef0:	mov	r3, #0
   12ef4:	mov	r0, r4
   12ef8:	bl	1896c <__assert_fail@plt+0x748c>
   12efc:	strd	r0, [sp, #24]
   12f00:	mov	r9, #3
   12f04:	b	12c7c <__assert_fail@plt+0x179c>
   12f08:	movw	r3, #257	; 0x101
   12f0c:	cmp	r0, r3
   12f10:	beq	1349c <__assert_fail@plt+0x1fbc>
   12f14:	ble	12f54 <__assert_fail@plt+0x1a74>
   12f18:	movw	r3, #258	; 0x102
   12f1c:	cmp	r0, r3
   12f20:	beq	134b0 <__assert_fail@plt+0x1fd0>
   12f24:	movw	r3, #259	; 0x103
   12f28:	cmp	r0, r3
   12f2c:	bne	13554 <__assert_fail@plt+0x2074>
   12f30:	ldr	r4, [r6]
   12f34:	mov	r0, r4
   12f38:	bl	15018 <__assert_fail@plt+0x3b38>
   12f3c:	cmp	r4, r0
   12f40:	bne	12fcc <__assert_fail@plt+0x1aec>
   12f44:	movw	r3, #50032	; 0xc370
   12f48:	movt	r3, #2
   12f4c:	str	r4, [r3, #16]
   12f50:	b	12c7c <__assert_fail@plt+0x179c>
   12f54:	cmp	r0, #256	; 0x100
   12f58:	bne	13554 <__assert_fail@plt+0x2074>
   12f5c:	movw	r3, #50032	; 0xc370
   12f60:	movt	r3, #2
   12f64:	mov	r2, #1
   12f68:	strb	r2, [r3, #44]	; 0x2c
   12f6c:	b	12c7c <__assert_fail@plt+0x179c>
   12f70:	ldr	r4, [r6]
   12f74:	mov	r2, #5
   12f78:	movw	r1, #42500	; 0xa604
   12f7c:	movt	r1, #1
   12f80:	mov	r0, #0
   12f84:	bl	1121c <dcgettext@plt>
   12f88:	mov	r3, #0
   12f8c:	str	r3, [sp, #16]
   12f90:	str	r0, [sp, #12]
   12f94:	movw	r3, #41516	; 0xa22c
   12f98:	movt	r3, #1
   12f9c:	str	r3, [sp, #8]
   12fa0:	mvn	r2, #-1073741824	; 0xc0000000
   12fa4:	mov	r3, #0
   12fa8:	strd	r2, [sp]
   12fac:	mov	r2, #0
   12fb0:	mov	r3, #0
   12fb4:	mov	r0, r4
   12fb8:	bl	1896c <__assert_fail@plt+0x748c>
   12fbc:	movw	r3, #50032	; 0xc370
   12fc0:	movt	r3, #2
   12fc4:	str	r0, [r3, #24]
   12fc8:	b	12c7c <__assert_fail@plt+0x179c>
   12fcc:	mov	r2, #5
   12fd0:	movw	r1, #42524	; 0xa61c
   12fd4:	movt	r1, #1
   12fd8:	mov	r0, #0
   12fdc:	bl	1121c <dcgettext@plt>
   12fe0:	mov	r4, r0
   12fe4:	movw	r3, #50024	; 0xc368
   12fe8:	movt	r3, #2
   12fec:	ldr	r0, [r3]
   12ff0:	bl	17920 <__assert_fail@plt+0x6440>
   12ff4:	mov	r3, r0
   12ff8:	mov	r2, r4
   12ffc:	mov	r1, #0
   13000:	mov	r0, r1
   13004:	bl	112d0 <error@plt>
   13008:	mov	r0, #1
   1300c:	bl	1278c <__assert_fail@plt+0x12ac>
   13010:	mov	r2, #5
   13014:	movw	r1, #42572	; 0xa64c
   13018:	movt	r1, #1
   1301c:	mov	r0, #0
   13020:	bl	1121c <dcgettext@plt>
   13024:	mov	r2, r0
   13028:	mov	r1, #0
   1302c:	mov	r0, r1
   13030:	bl	112d0 <error@plt>
   13034:	mov	r0, #1
   13038:	bl	1278c <__assert_fail@plt+0x12ac>
   1303c:	mov	r2, #5
   13040:	movw	r1, #42572	; 0xa64c
   13044:	movt	r1, #1
   13048:	mov	r0, #0
   1304c:	bl	1121c <dcgettext@plt>
   13050:	mov	r2, r0
   13054:	mov	r1, #0
   13058:	mov	r0, r1
   1305c:	bl	112d0 <error@plt>
   13060:	mov	r0, #1
   13064:	bl	1278c <__assert_fail@plt+0x12ac>
   13068:	mov	r2, #5
   1306c:	movw	r1, #42572	; 0xa64c
   13070:	movt	r1, #1
   13074:	mov	r0, #0
   13078:	bl	1121c <dcgettext@plt>
   1307c:	mov	r2, r0
   13080:	mov	r1, #0
   13084:	mov	r0, r1
   13088:	bl	112d0 <error@plt>
   1308c:	mov	r0, #1
   13090:	bl	1278c <__assert_fail@plt+0x12ac>
   13094:	cmp	r9, #0
   13098:	bne	130a4 <__assert_fail@plt+0x1bc4>
   1309c:	bl	1133c <__ctype_b_loc@plt>
   130a0:	b	130d8 <__assert_fail@plt+0x1bf8>
   130a4:	mov	r2, #5
   130a8:	movw	r1, #42572	; 0xa64c
   130ac:	movt	r1, #1
   130b0:	mov	r0, #0
   130b4:	bl	1121c <dcgettext@plt>
   130b8:	mov	r2, r0
   130bc:	mov	r1, #0
   130c0:	mov	r0, r1
   130c4:	bl	112d0 <error@plt>
   130c8:	mov	r0, #1
   130cc:	bl	1278c <__assert_fail@plt+0x12ac>
   130d0:	add	r4, r4, #1
   130d4:	str	r4, [r6]
   130d8:	ldr	r4, [r6]
   130dc:	ldrb	r3, [r4]
   130e0:	ldr	r2, [r0]
   130e4:	lsl	r3, r3, #1
   130e8:	ldrh	r3, [r2, r3]
   130ec:	tst	r3, #8192	; 0x2000
   130f0:	bne	130d0 <__assert_fail@plt+0x1bf0>
   130f4:	mov	r2, #2
   130f8:	movw	r1, #42656	; 0xa6a0
   130fc:	movt	r1, #1
   13100:	mov	r0, r4
   13104:	bl	114b0 <strncmp@plt>
   13108:	cmp	r0, #0
   1310c:	bne	131e0 <__assert_fail@plt+0x1d00>
   13110:	add	r4, r4, #2
   13114:	str	r4, [r6]
   13118:	mov	r9, #7
   1311c:	ldr	r5, [r6]
   13120:	mov	r1, #47	; 0x2f
   13124:	mov	r0, r5
   13128:	bl	1136c <strchr@plt>
   1312c:	subs	r4, r0, #0
   13130:	beq	1320c <__assert_fail@plt+0x1d2c>
   13134:	mov	r2, #5
   13138:	movw	r1, #42664	; 0xa6a8
   1313c:	movt	r1, #1
   13140:	mov	r0, #0
   13144:	bl	1121c <dcgettext@plt>
   13148:	mov	r3, #0
   1314c:	str	r3, [sp, #16]
   13150:	str	r0, [sp, #12]
   13154:	movw	r3, #41516	; 0xa22c
   13158:	movt	r3, #1
   1315c:	str	r3, [sp, #8]
   13160:	mvn	r2, #0
   13164:	mvn	r3, #0
   13168:	strd	r2, [sp]
   1316c:	mov	r2, #1
   13170:	mov	r3, #0
   13174:	add	r0, r4, #1
   13178:	bl	1896c <__assert_fail@plt+0x748c>
   1317c:	strd	r0, [sp, #24]
   13180:	ldr	r3, [r6]
   13184:	cmp	r4, r3
   13188:	beq	12c7c <__assert_fail@plt+0x179c>
   1318c:	mov	r5, #0
   13190:	strb	r5, [r4]
   13194:	ldr	r4, [r6]
   13198:	mov	r2, #5
   1319c:	movw	r1, #42692	; 0xa6c4
   131a0:	movt	r1, #1
   131a4:	mov	r0, r5
   131a8:	bl	1121c <dcgettext@plt>
   131ac:	str	r5, [sp, #16]
   131b0:	str	r0, [sp, #12]
   131b4:	movw	r3, #41516	; 0xa22c
   131b8:	movt	r3, #1
   131bc:	str	r3, [sp, #8]
   131c0:	ldrd	r2, [sp, #24]
   131c4:	strd	r2, [sp]
   131c8:	mov	r2, #1
   131cc:	mov	r3, #0
   131d0:	mov	r0, r4
   131d4:	bl	1896c <__assert_fail@plt+0x748c>
   131d8:	strd	r0, [sp, #48]	; 0x30
   131dc:	b	12c7c <__assert_fail@plt+0x179c>
   131e0:	mov	r2, #2
   131e4:	movw	r1, #42660	; 0xa6a4
   131e8:	movt	r1, #1
   131ec:	mov	r0, r4
   131f0:	bl	114b0 <strncmp@plt>
   131f4:	cmp	r0, #0
   131f8:	addeq	r4, r4, #2
   131fc:	streq	r4, [r6]
   13200:	moveq	r9, #6
   13204:	movne	r9, #5
   13208:	b	1311c <__assert_fail@plt+0x1c3c>
   1320c:	mov	r2, #5
   13210:	movw	r1, #42664	; 0xa6a8
   13214:	movt	r1, #1
   13218:	mov	r0, #0
   1321c:	bl	1121c <dcgettext@plt>
   13220:	mov	r3, #0
   13224:	str	r3, [sp, #16]
   13228:	str	r0, [sp, #12]
   1322c:	movw	r3, #41516	; 0xa22c
   13230:	movt	r3, #1
   13234:	str	r3, [sp, #8]
   13238:	mvn	r2, #0
   1323c:	mvn	r3, #0
   13240:	strd	r2, [sp]
   13244:	mov	r2, #1
   13248:	mov	r3, #0
   1324c:	mov	r0, r5
   13250:	bl	1896c <__assert_fail@plt+0x748c>
   13254:	strd	r0, [sp, #24]
   13258:	b	12c7c <__assert_fail@plt+0x179c>
   1325c:	ldr	r0, [r6]
   13260:	ldrb	r3, [r0]
   13264:	cmp	r3, #0
   13268:	beq	132bc <__assert_fail@plt+0x1ddc>
   1326c:	ldrb	r2, [r0, #1]
   13270:	cmp	r2, #0
   13274:	beq	13290 <__assert_fail@plt+0x1db0>
   13278:	movw	r1, #42740	; 0xa6f4
   1327c:	movt	r1, #1
   13280:	bl	11168 <strcmp@plt>
   13284:	cmp	r0, #0
   13288:	bne	132e0 <__assert_fail@plt+0x1e00>
   1328c:	mov	r3, #0
   13290:	movw	r2, #49492	; 0xc154
   13294:	movt	r2, #2
   13298:	ldr	r2, [r2, #12]
   1329c:	cmp	r2, #0
   132a0:	blt	132ac <__assert_fail@plt+0x1dcc>
   132a4:	cmp	r2, r3
   132a8:	bne	1331c <__assert_fail@plt+0x1e3c>
   132ac:	movw	r2, #49492	; 0xc154
   132b0:	movt	r2, #2
   132b4:	str	r3, [r2, #12]
   132b8:	b	12c7c <__assert_fail@plt+0x179c>
   132bc:	mov	r2, #5
   132c0:	movw	r1, #42716	; 0xa6dc
   132c4:	movt	r1, #1
   132c8:	mov	r0, #0
   132cc:	bl	1121c <dcgettext@plt>
   132d0:	mov	r2, r0
   132d4:	mov	r1, #0
   132d8:	mov	r0, #1
   132dc:	bl	112d0 <error@plt>
   132e0:	mov	r2, #5
   132e4:	movw	r1, #42744	; 0xa6f8
   132e8:	movt	r1, #1
   132ec:	mov	r0, #0
   132f0:	bl	1121c <dcgettext@plt>
   132f4:	mov	r4, r0
   132f8:	movw	r3, #50024	; 0xc368
   132fc:	movt	r3, #2
   13300:	ldr	r0, [r3]
   13304:	bl	17920 <__assert_fail@plt+0x6440>
   13308:	mov	r3, r0
   1330c:	mov	r2, r4
   13310:	mov	r1, #0
   13314:	mov	r0, #1
   13318:	bl	112d0 <error@plt>
   1331c:	mov	r2, #5
   13320:	movw	r1, #42776	; 0xa718
   13324:	movt	r1, #1
   13328:	mov	r0, #0
   1332c:	bl	1121c <dcgettext@plt>
   13330:	mov	r2, r0
   13334:	mov	r1, #0
   13338:	mov	r0, #1
   1333c:	bl	112d0 <error@plt>
   13340:	cmp	r9, #0
   13344:	beq	13388 <__assert_fail@plt+0x1ea8>
   13348:	bics	r3, r9, #4
   1334c:	bne	1335c <__assert_fail@plt+0x1e7c>
   13350:	ldrd	r2, [sp, #24]
   13354:	strd	r2, [sp, #72]	; 0x48
   13358:	b	13398 <__assert_fail@plt+0x1eb8>
   1335c:	mov	r2, #5
   13360:	movw	r1, #42572	; 0xa64c
   13364:	movt	r1, #1
   13368:	mov	r0, #0
   1336c:	bl	1121c <dcgettext@plt>
   13370:	mov	r2, r0
   13374:	mov	r1, #0
   13378:	mov	r0, r1
   1337c:	bl	112d0 <error@plt>
   13380:	mov	r0, #1
   13384:	bl	1278c <__assert_fail@plt+0x12ac>
   13388:	mov	r2, #0
   1338c:	mov	r3, #0
   13390:	strd	r2, [sp, #72]	; 0x48
   13394:	mov	r9, #4
   13398:	ldr	r3, [sp, #60]	; 0x3c
   1339c:	cmp	r3, #0
   133a0:	cmpne	r3, r5
   133a4:	bne	15000 <__assert_fail@plt+0x3b20>
   133a8:	add	r3, pc, #888	; 0x378
   133ac:	ldrd	r2, [r3]
   133b0:	ldrd	r0, [sp, #72]	; 0x48
   133b4:	cmp	r1, r3
   133b8:	cmpeq	r0, r2
   133bc:	bhi	133f4 <__assert_fail@plt+0x1f14>
   133c0:	mov	ip, #10
   133c4:	umull	r2, r3, r0, ip
   133c8:	mla	r3, ip, r1, r3
   133cc:	sub	ip, r4, #48	; 0x30
   133d0:	adds	r0, r2, ip
   133d4:	adc	r1, r3, ip, asr #31
   133d8:	strd	r0, [sp, #24]
   133dc:	ldrd	r2, [sp, #72]	; 0x48
   133e0:	cmp	r1, r3
   133e4:	cmpeq	r0, r2
   133e8:	bcc	133f4 <__assert_fail@plt+0x1f14>
   133ec:	str	r5, [sp, #60]	; 0x3c
   133f0:	b	12c7c <__assert_fail@plt+0x179c>
   133f4:	ldrd	r6, [sp, #72]	; 0x48
   133f8:	mov	r2, #5
   133fc:	movw	r1, #42816	; 0xa740
   13400:	movt	r1, #1
   13404:	mov	r0, #0
   13408:	bl	1121c <dcgettext@plt>
   1340c:	mov	r5, r0
   13410:	add	r2, sp, #152	; 0x98
   13414:	mov	r0, r6
   13418:	mov	r1, r7
   1341c:	bl	15598 <__assert_fail@plt+0x40b8>
   13420:	str	r4, [sp]
   13424:	mov	r3, r0
   13428:	mov	r2, r5
   1342c:	mov	r1, #0
   13430:	mov	r0, #1
   13434:	bl	112d0 <error@plt>
   13438:	cmp	r4, #100	; 0x64
   1343c:	mov	r2, #5
   13440:	movweq	r1, #42856	; 0xa768
   13444:	movteq	r1, #1
   13448:	movwne	r1, #42904	; 0xa798
   1344c:	movtne	r1, #1
   13450:	mov	r0, #0
   13454:	bl	1121c <dcgettext@plt>
   13458:	mov	r4, r0
   1345c:	movw	r3, #50024	; 0xc368
   13460:	movt	r3, #2
   13464:	ldr	r0, [r3]
   13468:	bl	17920 <__assert_fail@plt+0x6440>
   1346c:	mov	r3, r0
   13470:	mov	r2, r4
   13474:	mov	r1, #0
   13478:	mov	r0, r1
   1347c:	bl	112d0 <error@plt>
   13480:	mov	r0, #1
   13484:	bl	1278c <__assert_fail@plt+0x12ac>
   13488:	movw	r3, #50032	; 0xc370
   1348c:	movt	r3, #2
   13490:	mov	r2, #1
   13494:	strb	r2, [r3, #296]	; 0x128
   13498:	b	12c7c <__assert_fail@plt+0x179c>
   1349c:	movw	r3, #50032	; 0xc370
   134a0:	movt	r3, #2
   134a4:	ldr	r2, [r6]
   134a8:	str	r2, [r3, #40]	; 0x28
   134ac:	b	12c7c <__assert_fail@plt+0x179c>
   134b0:	ldr	r4, [r6]
   134b4:	mov	r2, #5
   134b8:	movw	r1, #42952	; 0xa7c8
   134bc:	movt	r1, #1
   134c0:	mov	r0, #0
   134c4:	bl	1121c <dcgettext@plt>
   134c8:	mov	r3, #0
   134cc:	str	r3, [sp, #16]
   134d0:	str	r0, [sp, #12]
   134d4:	add	r3, fp, #344	; 0x158
   134d8:	str	r3, [sp, #8]
   134dc:	mvn	r2, #-2147483647	; 0x80000001
   134e0:	mov	r3, #0
   134e4:	strd	r2, [sp]
   134e8:	mov	r2, #1
   134ec:	mov	r3, #0
   134f0:	mov	r0, r4
   134f4:	bl	1896c <__assert_fail@plt+0x748c>
   134f8:	str	r0, [sp, #64]	; 0x40
   134fc:	b	12c7c <__assert_fail@plt+0x179c>
   13500:	movw	r3, #49508	; 0xc164
   13504:	movt	r3, #2
   13508:	movw	r0, #50020	; 0xc364
   1350c:	movt	r0, #2
   13510:	mov	r4, #0
   13514:	str	r4, [sp, #8]
   13518:	movw	r2, #42976	; 0xa7e0
   1351c:	movt	r2, #1
   13520:	str	r2, [sp, #4]
   13524:	movw	r2, #42996	; 0xa7f4
   13528:	movt	r2, #1
   1352c:	str	r2, [sp]
   13530:	ldr	r3, [r3]
   13534:	movw	r2, #42240	; 0xa500
   13538:	movt	r2, #1
   1353c:	movw	r1, #39984	; 0x9c30
   13540:	movt	r1, #1
   13544:	ldr	r0, [r0]
   13548:	bl	18274 <__assert_fail@plt+0x6d94>
   1354c:	mov	r0, r4
   13550:	bl	11348 <exit@plt>
   13554:	mov	r0, #1
   13558:	bl	1278c <__assert_fail@plt+0x12ac>
   1355c:	ldrd	r2, [sp, #48]	; 0x30
   13560:	orrs	r3, r2, r3
   13564:	beq	135a8 <__assert_fail@plt+0x20c8>
   13568:	movw	r3, #50032	; 0xc370
   1356c:	movt	r3, #2
   13570:	ldr	r3, [r3, #40]	; 0x28
   13574:	cmp	r3, #0
   13578:	beq	135a8 <__assert_fail@plt+0x20c8>
   1357c:	mov	r2, #5
   13580:	movw	r1, #43016	; 0xa808
   13584:	movt	r1, #1
   13588:	mov	r0, #0
   1358c:	bl	1121c <dcgettext@plt>
   13590:	mov	r2, r0
   13594:	mov	r1, #0
   13598:	mov	r0, r1
   1359c:	bl	112d0 <error@plt>
   135a0:	mov	r0, #1
   135a4:	bl	1278c <__assert_fail@plt+0x12ac>
   135a8:	cmp	r9, #0
   135ac:	beq	13604 <__assert_fail@plt+0x2124>
   135b0:	ldrd	r2, [sp, #24]
   135b4:	orrs	r3, r2, r3
   135b8:	bne	13614 <__assert_fail@plt+0x2134>
   135bc:	mov	r2, #5
   135c0:	movw	r1, #42632	; 0xa688
   135c4:	movt	r1, #1
   135c8:	mov	r0, #0
   135cc:	bl	1121c <dcgettext@plt>
   135d0:	mov	r4, r0
   135d4:	movw	r0, #43072	; 0xa840
   135d8:	movt	r0, #1
   135dc:	bl	17920 <__assert_fail@plt+0x6440>
   135e0:	str	r0, [sp]
   135e4:	mov	r3, r4
   135e8:	movw	r2, #43076	; 0xa844
   135ec:	movt	r2, #1
   135f0:	mov	r1, #0
   135f4:	mov	r0, r1
   135f8:	bl	112d0 <error@plt>
   135fc:	mov	r0, #1
   13600:	bl	1278c <__assert_fail@plt+0x12ac>
   13604:	mov	r2, #1000	; 0x3e8
   13608:	mov	r3, #0
   1360c:	strd	r2, [sp, #24]
   13610:	mov	r9, #3
   13614:	movw	r3, #49492	; 0xc154
   13618:	movt	r3, #2
   1361c:	ldr	r3, [r3, #12]
   13620:	cmp	r3, #0
   13624:	blt	13688 <__assert_fail@plt+0x21a8>
   13628:	movw	r3, #50032	; 0xc370
   1362c:	movt	r3, #2
   13630:	ldr	r0, [r3, #36]	; 0x24
   13634:	cmp	r0, #0
   13638:	beq	14fa0 <__assert_fail@plt+0x3ac0>
   1363c:	movw	r3, #49492	; 0xc154
   13640:	movt	r3, #2
   13644:	mov	r2, #0
   13648:	strb	r2, [r3, #4]
   1364c:	sub	r8, r9, #5
   13650:	cmp	r8, #2
   13654:	bls	14f14 <__assert_fail@plt+0x3a34>
   13658:	movw	r3, #50032	; 0xc370
   1365c:	movt	r3, #2
   13660:	ldr	r3, [r3, #24]
   13664:	cmp	r3, #0
   13668:	moveq	r4, #0
   1366c:	moveq	r5, #0
   13670:	beq	13744 <__assert_fail@plt+0x2264>
   13674:	movw	r3, #49492	; 0xc154
   13678:	movt	r3, #2
   1367c:	mov	r2, #0
   13680:	strb	r2, [r3, #4]
   13684:	b	13760 <__assert_fail@plt+0x2280>
   13688:	movw	r3, #49492	; 0xc154
   1368c:	movt	r3, #2
   13690:	mov	r2, #10
   13694:	str	r2, [r3, #12]
   13698:	b	13628 <__assert_fail@plt+0x2148>
   1369c:	mov	sl, r0
   136a0:	mov	fp, r1
   136a4:	adds	r4, r4, #1
   136a8:	adc	r5, r5, #0
   136ac:	mov	r2, r6
   136b0:	mov	r3, r7
   136b4:	mov	r0, sl
   136b8:	mov	r1, fp
   136bc:	bl	19654 <__assert_fail@plt+0x8174>
   136c0:	cmp	r7, fp
   136c4:	cmpeq	r6, sl
   136c8:	bls	1369c <__assert_fail@plt+0x21bc>
   136cc:	movw	r3, #49492	; 0xc154
   136d0:	movt	r3, #2
   136d4:	mov	r2, #0
   136d8:	strb	r2, [r3, #4]
   136dc:	movw	r3, #50032	; 0xc370
   136e0:	movt	r3, #2
   136e4:	ldr	r2, [r3, #24]
   136e8:	cmp	r2, #0
   136ec:	beq	13744 <__assert_fail@plt+0x2264>
   136f0:	mov	r3, #0
   136f4:	cmp	r5, r3
   136f8:	cmpeq	r4, r2
   136fc:	bls	13674 <__assert_fail@plt+0x2194>
   13700:	mov	r2, #5
   13704:	movw	r1, #43084	; 0xa84c
   13708:	movt	r1, #1
   1370c:	mov	r0, #0
   13710:	bl	1121c <dcgettext@plt>
   13714:	strd	r4, [sp]
   13718:	mov	r2, r0
   1371c:	mov	r1, #0
   13720:	mov	r0, #1
   13724:	bl	112d0 <error@plt>
   13728:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1372c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   13730:	muleq	r1, r8, r8
   13734:	andeq	ip, r2, r0, lsr #7
   13738:	andeq	ip, r2, r4, lsr #9
   1373c:			; <UNDEFINED> instruction: 0x000199b8
   13740:	andeq	r9, r1, ip, asr #19
   13744:	movw	r3, #50032	; 0xc370
   13748:	movt	r3, #2
   1374c:	mov	r2, r4
   13750:	cmp	r5, #0
   13754:	cmpeq	r4, #2
   13758:	movcc	r2, #2
   1375c:	str	r2, [r3, #24]
   13760:	movw	r3, #50008	; 0xc358
   13764:	movt	r3, #2
   13768:	ldr	r3, [r3]
   1376c:	ldr	ip, [sp, #32]
   13770:	cmp	r3, ip
   13774:	bge	13814 <__assert_fail@plt+0x2334>
   13778:	add	r1, r3, #1
   1377c:	movw	r2, #50008	; 0xc358
   13780:	movt	r2, #2
   13784:	str	r1, [r2]
   13788:	movw	r2, #50032	; 0xc370
   1378c:	movt	r2, #2
   13790:	ldr	r5, [sp, #56]	; 0x38
   13794:	ldr	r0, [r5, r3, lsl #2]
   13798:	str	r0, [r2, #300]	; 0x12c
   1379c:	cmp	r1, ip
   137a0:	bge	13814 <__assert_fail@plt+0x2334>
   137a4:	add	r3, r3, #2
   137a8:	movw	r2, #50008	; 0xc358
   137ac:	movt	r2, #2
   137b0:	str	r3, [r2]
   137b4:	movw	r2, #50032	; 0xc370
   137b8:	movt	r2, #2
   137bc:	ldr	r1, [r5, r1, lsl #2]
   137c0:	str	r1, [r2, #8]
   137c4:	cmp	r3, ip
   137c8:	bge	13814 <__assert_fail@plt+0x2334>
   137cc:	mov	r2, #5
   137d0:	movw	r1, #43128	; 0xa878
   137d4:	movt	r1, #1
   137d8:	mov	r0, #0
   137dc:	bl	1121c <dcgettext@plt>
   137e0:	mov	r4, r0
   137e4:	movw	r3, #50008	; 0xc358
   137e8:	movt	r3, #2
   137ec:	ldr	r3, [r3]
   137f0:	ldr	r0, [r5, r3, lsl #2]
   137f4:	bl	17920 <__assert_fail@plt+0x6440>
   137f8:	mov	r3, r0
   137fc:	mov	r2, r4
   13800:	mov	r1, #0
   13804:	mov	r0, r1
   13808:	bl	112d0 <error@plt>
   1380c:	mov	r0, #1
   13810:	bl	1278c <__assert_fail@plt+0x12ac>
   13814:	movw	r3, #50032	; 0xc370
   13818:	movt	r3, #2
   1381c:	ldr	r0, [r3, #36]	; 0x24
   13820:	cmp	r0, #0
   13824:	beq	13840 <__assert_fail@plt+0x2360>
   13828:	bl	11354 <strlen@plt>
   1382c:	movw	r3, #50032	; 0xc370
   13830:	movt	r3, #2
   13834:	ldr	r3, [r3, #24]
   13838:	cmp	r0, r3
   1383c:	bhi	1397c <__assert_fail@plt+0x249c>
   13840:	movw	r3, #50032	; 0xc370
   13844:	movt	r3, #2
   13848:	ldr	r4, [r3, #300]	; 0x12c
   1384c:	movw	r1, #42468	; 0xa5e4
   13850:	movt	r1, #1
   13854:	mov	r0, r4
   13858:	bl	11168 <strcmp@plt>
   1385c:	cmp	r0, #0
   13860:	beq	13880 <__assert_fail@plt+0x23a0>
   13864:	mov	r3, #0
   13868:	mov	r2, r3
   1386c:	mov	r1, r4
   13870:	mov	r0, r3
   13874:	bl	15304 <__assert_fail@plt+0x3e24>
   13878:	cmp	r0, #0
   1387c:	blt	139a8 <__assert_fail@plt+0x24c8>
   13880:	ldr	r2, [pc, #-340]	; 13734 <__assert_fail@plt+0x2254>
   13884:	mov	r1, #0
   13888:	mov	r0, #3
   1388c:	bl	11264 <__fxstat64@plt>
   13890:	cmp	r0, #0
   13894:	bne	139f0 <__assert_fail@plt+0x2510>
   13898:	ldr	r3, [sp, #64]	; 0x40
   1389c:	cmp	r3, #0
   138a0:	bne	138c8 <__assert_fail@plt+0x23e8>
   138a4:	movw	r3, #50032	; 0xc370
   138a8:	movt	r3, #2
   138ac:	ldr	r1, [r3, #104]	; 0x68
   138b0:	sub	r2, r1, #131072	; 0x20000
   138b4:	mov	r3, #0
   138b8:	movt	r3, #8190	; 0x1ffe
   138bc:	cmp	r2, r3
   138c0:	movhi	r1, #131072	; 0x20000
   138c4:	str	r1, [sp, #64]	; 0x40
   138c8:	bl	11390 <getpagesize@plt>
   138cc:	ldr	r3, [sp, #64]	; 0x40
   138d0:	add	r1, r3, #1
   138d4:	bl	1834c <__assert_fail@plt+0x6e6c>
   138d8:	str	r0, [sp, #144]	; 0x90
   138dc:	cmp	r8, #1
   138e0:	bls	13a28 <__assert_fail@plt+0x2548>
   138e4:	mvn	r3, #0
   138e8:	str	r3, [sp, #32]
   138ec:	mvn	sl, #0
   138f0:	mvn	fp, #-2147483648	; 0x80000000
   138f4:	movw	r3, #50032	; 0xc370
   138f8:	movt	r3, #2
   138fc:	ldr	r3, [r3, #40]	; 0x28
   13900:	cmp	r3, #0
   13904:	beq	13950 <__assert_fail@plt+0x2470>
   13908:	ldr	r0, [pc, #-472]	; 13738 <__assert_fail@plt+0x2258>
   1390c:	bl	11444 <sigemptyset@plt>
   13910:	add	r2, sp, #152	; 0x98
   13914:	mov	r1, #0
   13918:	mov	r0, #13
   1391c:	bl	11270 <sigaction@plt>
   13920:	ldr	r3, [sp, #152]	; 0x98
   13924:	cmp	r3, #1
   13928:	beq	13938 <__assert_fail@plt+0x2458>
   1392c:	mov	r1, #13
   13930:	ldr	r0, [pc, #-512]	; 13738 <__assert_fail@plt+0x2258>
   13934:	bl	11300 <sigaddset@plt>
   13938:	movw	r1, #50032	; 0xc370
   1393c:	movt	r1, #2
   13940:	add	r2, r1, #160	; 0xa0
   13944:	add	r1, r1, #308	; 0x134
   13948:	mov	r0, #0
   1394c:	bl	11198 <sigprocmask@plt>
   13950:	sub	r3, r9, #1
   13954:	cmp	r3, #6
   13958:	ldrls	pc, [pc, r3, lsl #2]
   1395c:	b	14e88 <__assert_fail@plt+0x39a8>
   13960:	strdeq	r3, [r1], -ip
   13964:	andeq	r3, r1, ip, asr lr
   13968:	andeq	r3, r1, r0, ror #25
   1396c:	andeq	r3, r1, r0, ror #25
   13970:	andeq	r4, r1, r8, lsl #3
   13974:	andeq	r4, r1, r0, lsr r4
   13978:	andeq	r4, r1, r0, asr r9
   1397c:	mov	r2, #5
   13980:	movw	r1, #43148	; 0xa88c
   13984:	movt	r1, #1
   13988:	mov	r0, #0
   1398c:	bl	1121c <dcgettext@plt>
   13990:	mov	r2, r0
   13994:	mov	r1, #0
   13998:	mov	r0, r1
   1399c:	bl	112d0 <error@plt>
   139a0:	mov	r0, #1
   139a4:	bl	1278c <__assert_fail@plt+0x12ac>
   139a8:	bl	1139c <__errno_location@plt>
   139ac:	ldr	r4, [r0]
   139b0:	mov	r2, #5
   139b4:	movw	r1, #43212	; 0xa8cc
   139b8:	movt	r1, #1
   139bc:	mov	r0, #0
   139c0:	bl	1121c <dcgettext@plt>
   139c4:	mov	r5, r0
   139c8:	movw	r3, #50032	; 0xc370
   139cc:	movt	r3, #2
   139d0:	ldr	r1, [r3, #300]	; 0x12c
   139d4:	mov	r0, #4
   139d8:	bl	17630 <__assert_fail@plt+0x6150>
   139dc:	mov	r3, r0
   139e0:	mov	r2, r5
   139e4:	mov	r1, r4
   139e8:	mov	r0, #1
   139ec:	bl	112d0 <error@plt>
   139f0:	bl	1139c <__errno_location@plt>
   139f4:	ldr	r4, [r0]
   139f8:	movw	r3, #50032	; 0xc370
   139fc:	movt	r3, #2
   13a00:	ldr	r2, [r3, #300]	; 0x12c
   13a04:	mov	r1, #3
   13a08:	mov	r0, #0
   13a0c:	bl	17754 <__assert_fail@plt+0x6274>
   13a10:	mov	r3, r0
   13a14:	movw	r2, #39944	; 0x9c08
   13a18:	movt	r2, #1
   13a1c:	mov	r1, r4
   13a20:	mov	r0, #1
   13a24:	bl	112d0 <error@plt>
   13a28:	ldr	r8, [sp, #64]	; 0x40
   13a2c:	mov	r3, #1
   13a30:	str	r3, [sp]
   13a34:	mov	r2, #0
   13a38:	mov	r3, #0
   13a3c:	mov	r0, #0
   13a40:	bl	11288 <lseek64@plt>
   13a44:	mov	sl, r0
   13a48:	mov	fp, r1
   13a4c:	cmp	r0, #0
   13a50:	sbcs	r3, r1, #0
   13a54:	blt	13b64 <__assert_fail@plt+0x2684>
   13a58:	mov	r6, #0
   13a5c:	mov	r7, #0
   13a60:	mov	r4, r8
   13a64:	mov	r5, #0
   13a68:	strd	sl, [sp, #32]
   13a6c:	mov	fp, r9
   13a70:	ldr	r9, [sp, #144]	; 0x90
   13a74:	sub	r2, r8, r6
   13a78:	add	r1, r9, r6
   13a7c:	mov	r0, #0
   13a80:	bl	17940 <__assert_fail@plt+0x6460>
   13a84:	cmp	r0, #0
   13a88:	beq	13c44 <__assert_fail@plt+0x2764>
   13a8c:	cmn	r0, #1
   13a90:	beq	13b78 <__assert_fail@plt+0x2698>
   13a94:	adds	r6, r6, r0
   13a98:	adc	r7, r7, #0
   13a9c:	cmp	r6, r4
   13aa0:	sbcs	r3, r7, r5
   13aa4:	blt	13a74 <__assert_fail@plt+0x2594>
   13aa8:	mov	r9, fp
   13aac:	ldrd	sl, [sp, #32]
   13ab0:	movw	r3, #50032	; 0xc370
   13ab4:	movt	r3, #2
   13ab8:	ldrd	r2, [r3, #96]	; 0x60
   13abc:	strd	r2, [sp, #32]
   13ac0:	orrs	r3, r2, r3
   13ac4:	beq	13bc4 <__assert_fail@plt+0x26e4>
   13ac8:	adds	r3, sl, r6
   13acc:	str	r3, [sp, #112]	; 0x70
   13ad0:	adc	r3, fp, r7
   13ad4:	str	r3, [sp, #116]	; 0x74
   13ad8:	movw	r1, #50032	; 0xc370
   13adc:	movt	r1, #2
   13ae0:	ldr	r1, [r1, #64]	; 0x40
   13ae4:	and	r0, r1, #53248	; 0xd000
   13ae8:	ldrd	sl, [sp, #112]	; 0x70
   13aec:	ldrd	r2, [sp, #32]
   13af0:	cmp	r2, sl
   13af4:	sbcs	r3, r3, fp
   13af8:	movge	r1, #1
   13afc:	movlt	r1, #0
   13b00:	cmp	r0, #32768	; 0x8000
   13b04:	movne	r1, #0
   13b08:	andeq	r1, r1, #1
   13b0c:	cmp	r1, #0
   13b10:	bne	13c04 <__assert_fail@plt+0x2724>
   13b14:	mov	r3, #2
   13b18:	str	r3, [sp]
   13b1c:	mov	r2, #0
   13b20:	mov	r3, #0
   13b24:	mov	r0, #0
   13b28:	bl	11288 <lseek64@plt>
   13b2c:	mov	r4, r0
   13b30:	mov	r5, r1
   13b34:	cmp	r0, #0
   13b38:	sbcs	r3, r1, #0
   13b3c:	blt	13b78 <__assert_fail@plt+0x2698>
   13b40:	cmp	fp, r1
   13b44:	cmpeq	sl, r0
   13b48:	bne	13bd4 <__assert_fail@plt+0x26f4>
   13b4c:	mvn	r2, #0
   13b50:	mvn	r3, #-2147483648	; 0x80000000
   13b54:	cmp	r7, r3
   13b58:	cmpeq	r6, r2
   13b5c:	bne	13c54 <__assert_fail@plt+0x2774>
   13b60:	b	13c34 <__assert_fail@plt+0x2754>
   13b64:	bl	1139c <__errno_location@plt>
   13b68:	ldr	r3, [r0]
   13b6c:	cmp	r3, #29
   13b70:	moveq	r3, #0
   13b74:	streq	r3, [r0]
   13b78:	bl	1139c <__errno_location@plt>
   13b7c:	ldr	r4, [r0]
   13b80:	mov	r2, #5
   13b84:	movw	r1, #43240	; 0xa8e8
   13b88:	movt	r1, #1
   13b8c:	mov	r0, #0
   13b90:	bl	1121c <dcgettext@plt>
   13b94:	mov	r5, r0
   13b98:	movw	r3, #50032	; 0xc370
   13b9c:	movt	r3, #2
   13ba0:	ldr	r2, [r3, #300]	; 0x12c
   13ba4:	mov	r1, #3
   13ba8:	mov	r0, #0
   13bac:	bl	17754 <__assert_fail@plt+0x6274>
   13bb0:	mov	r3, r0
   13bb4:	mov	r2, r5
   13bb8:	mov	r1, r4
   13bbc:	mov	r0, #1
   13bc0:	bl	112d0 <error@plt>
   13bc4:	bl	1139c <__errno_location@plt>
   13bc8:	mov	r3, #75	; 0x4b
   13bcc:	str	r3, [r0]
   13bd0:	b	13b78 <__assert_fail@plt+0x2698>
   13bd4:	mov	r0, #0
   13bd8:	str	r0, [sp]
   13bdc:	mov	r2, sl
   13be0:	mov	r3, fp
   13be4:	bl	11288 <lseek64@plt>
   13be8:	cmp	r0, #0
   13bec:	sbcs	r3, r1, #0
   13bf0:	blt	13b78 <__assert_fail@plt+0x2698>
   13bf4:	strd	sl, [sp, #32]
   13bf8:	cmp	sl, r4
   13bfc:	sbcs	r3, fp, r5
   13c00:	strdlt	r4, [sp, #32]
   13c04:	ldrd	r0, [sp, #112]	; 0x70
   13c08:	ldrd	r4, [sp, #32]
   13c0c:	subs	r2, r4, r0
   13c10:	mov	r3, r1
   13c14:	sbc	r3, r5, r3
   13c18:	adds	r6, r6, r2
   13c1c:	adc	r7, r7, r3
   13c20:	mvn	r2, #0
   13c24:	mvn	r3, #-2147483648	; 0x80000000
   13c28:	cmp	r7, r3
   13c2c:	cmpeq	r6, r2
   13c30:	bne	13c48 <__assert_fail@plt+0x2768>
   13c34:	bl	1139c <__errno_location@plt>
   13c38:	mov	r3, #75	; 0x4b
   13c3c:	str	r3, [r0]
   13c40:	b	13b78 <__assert_fail@plt+0x2698>
   13c44:	mov	r9, fp
   13c48:	cmp	r6, #0
   13c4c:	sbcs	r3, r7, #0
   13c50:	blt	13b78 <__assert_fail@plt+0x2698>
   13c54:	ldr	sl, [sp, #64]	; 0x40
   13c58:	asr	fp, sl, #31
   13c5c:	cmp	r6, sl
   13c60:	sbcs	r3, r7, fp
   13c64:	movlt	sl, r6
   13c68:	str	sl, [sp, #32]
   13c6c:	ldrd	r2, [sp, #24]
   13c70:	cmp	r2, #0
   13c74:	sbcs	r3, r3, #0
   13c78:	blt	13c9c <__assert_fail@plt+0x27bc>
   13c7c:	mov	sl, r6
   13c80:	mov	fp, r7
   13c84:	ldrd	r2, [sp, #24]
   13c88:	cmp	r7, r3
   13c8c:	cmpeq	r6, r2
   13c90:	movcc	sl, r2
   13c94:	movcc	fp, r3
   13c98:	b	138f4 <__assert_fail@plt+0x2414>
   13c9c:	mov	r2, #5
   13ca0:	movw	r1, #42664	; 0xa6a8
   13ca4:	movt	r1, #1
   13ca8:	mov	r0, #0
   13cac:	bl	1121c <dcgettext@plt>
   13cb0:	mov	r4, r0
   13cb4:	add	r2, sp, #152	; 0x98
   13cb8:	ldrd	r0, [sp, #24]
   13cbc:	bl	15598 <__assert_fail@plt+0x40b8>
   13cc0:	bl	17920 <__assert_fail@plt+0x6440>
   13cc4:	str	r0, [sp]
   13cc8:	mov	r3, r4
   13ccc:	movw	r2, #43076	; 0xa844
   13cd0:	movt	r2, #1
   13cd4:	mov	r1, #75	; 0x4b
   13cd8:	mov	r0, #1
   13cdc:	bl	112d0 <error@plt>
   13ce0:	ldr	r3, [sp, #64]	; 0x40
   13ce4:	str	r3, [sp, #56]	; 0x38
   13ce8:	mov	r4, #0
   13cec:	mov	r5, #0
   13cf0:	mov	sl, #1
   13cf4:	movw	r8, #49492	; 0xc154
   13cf8:	movt	r8, #2
   13cfc:	str	sl, [sp, #32]
   13d00:	ldrd	sl, [sp, #24]
   13d04:	b	13d6c <__assert_fail@plt+0x288c>
   13d08:	bl	1139c <__errno_location@plt>
   13d0c:	ldr	r4, [r0]
   13d10:	movw	r3, #50032	; 0xc370
   13d14:	movt	r3, #2
   13d18:	ldr	r2, [r3, #300]	; 0x12c
   13d1c:	mov	r1, #3
   13d20:	mov	r0, #0
   13d24:	bl	17754 <__assert_fail@plt+0x6274>
   13d28:	mov	r3, r0
   13d2c:	movw	r2, #39944	; 0x9c08
   13d30:	movt	r2, #1
   13d34:	mov	r1, r4
   13d38:	mov	r0, #1
   13d3c:	bl	112d0 <error@plt>
   13d40:	cmp	r0, r7
   13d44:	beq	13d60 <__assert_fail@plt+0x2880>
   13d48:	sub	r2, r0, r7
   13d4c:	mov	r1, r7
   13d50:	ldr	r0, [sp, #32]
   13d54:	bl	1236c <__assert_fail@plt+0xe8c>
   13d58:	mov	r3, #0
   13d5c:	str	r3, [sp, #32]
   13d60:	ldr	r3, [sp, #24]
   13d64:	cmp	r3, #0
   13d68:	beq	13e20 <__assert_fail@plt+0x2940>
   13d6c:	ldr	r2, [sp, #56]	; 0x38
   13d70:	ldr	r1, [sp, #144]	; 0x90
   13d74:	mov	r0, #0
   13d78:	bl	17940 <__assert_fail@plt+0x6460>
   13d7c:	str	r0, [sp, #24]
   13d80:	cmn	r0, #1
   13d84:	beq	13d08 <__assert_fail@plt+0x2828>
   13d88:	ldr	r2, [sp, #144]	; 0x90
   13d8c:	ldr	r1, [sp, #24]
   13d90:	add	r9, r2, r1
   13d94:	ldr	r3, [r8, #12]
   13d98:	strb	r3, [r2, r1]
   13d9c:	mov	r7, r2
   13da0:	mov	r6, r2
   13da4:	b	13dcc <__assert_fail@plt+0x28ec>
   13da8:	sub	r2, r6, r7
   13dac:	mov	r1, r7
   13db0:	ldr	r0, [sp, #32]
   13db4:	bl	1236c <__assert_fail@plt+0xe8c>
   13db8:	mov	r7, r6
   13dbc:	mov	r4, #0
   13dc0:	mov	r5, #0
   13dc4:	mov	r3, #1
   13dc8:	str	r3, [sp, #32]
   13dcc:	ldr	r1, [r8, #12]
   13dd0:	mov	r0, r6
   13dd4:	bl	1124c <rawmemchr@plt>
   13dd8:	cmp	r9, r0
   13ddc:	beq	13d40 <__assert_fail@plt+0x2860>
   13de0:	add	r6, r0, #1
   13de4:	adds	r4, r4, #1
   13de8:	adc	r5, r5, #0
   13dec:	cmp	r5, fp
   13df0:	cmpeq	r4, sl
   13df4:	bcc	13dcc <__assert_fail@plt+0x28ec>
   13df8:	b	13da8 <__assert_fail@plt+0x28c8>
   13dfc:	mov	r2, #0
   13e00:	mov	r3, #0
   13e04:	strd	r2, [sp, #8]
   13e08:	mvn	r3, #0
   13e0c:	str	r3, [sp]
   13e10:	ldr	r3, [sp, #64]	; 0x40
   13e14:	ldr	r2, [sp, #144]	; 0x90
   13e18:	ldrd	r0, [sp, #24]
   13e1c:	bl	124b4 <__assert_fail@plt+0xfd4>
   13e20:	mov	r0, #0
   13e24:	bl	114c8 <close@plt>
   13e28:	cmp	r0, #0
   13e2c:	bne	14e8c <__assert_fail@plt+0x39ac>
   13e30:	movw	r2, #50032	; 0xc370
   13e34:	movt	r2, #2
   13e38:	movw	r1, #49492	; 0xc154
   13e3c:	movt	r1, #2
   13e40:	ldr	r3, [r2]
   13e44:	ldr	r2, [r2, #288]	; 0x120
   13e48:	ldr	r1, [r1, #8]
   13e4c:	mov	r0, #0
   13e50:	bl	12068 <__assert_fail@plt+0xb88>
   13e54:	mov	r0, #0
   13e58:	bl	11348 <exit@plt>
   13e5c:	ldr	r3, [sp, #64]	; 0x40
   13e60:	str	r3, [sp, #80]	; 0x50
   13e64:	mov	fp, #0
   13e68:	str	fp, [sp, #32]
   13e6c:	str	fp, [sp, #48]	; 0x30
   13e70:	str	fp, [sp, #56]	; 0x38
   13e74:	mov	r8, #0
   13e78:	mov	r9, #0
   13e7c:	movw	r3, #49492	; 0xc154
   13e80:	movt	r3, #2
   13e84:	str	r3, [sp, #72]	; 0x48
   13e88:	ldr	r2, [sp, #80]	; 0x50
   13e8c:	ldr	r1, [sp, #144]	; 0x90
   13e90:	mov	r0, #0
   13e94:	bl	17940 <__assert_fail@plt+0x6460>
   13e98:	mov	r7, r0
   13e9c:	cmn	r0, #1
   13ea0:	beq	13ec0 <__assert_fail@plt+0x29e0>
   13ea4:	cmp	r0, #0
   13ea8:	beq	14ec4 <__assert_fail@plt+0x39e4>
   13eac:	ldr	r6, [sp, #144]	; 0x90
   13eb0:	mov	r3, #0
   13eb4:	str	r3, [sp, #88]	; 0x58
   13eb8:	mov	sl, r6
   13ebc:	b	1402c <__assert_fail@plt+0x2b4c>
   13ec0:	bl	1139c <__errno_location@plt>
   13ec4:	ldr	r4, [r0]
   13ec8:	movw	r3, #50032	; 0xc370
   13ecc:	movt	r3, #2
   13ed0:	ldr	r2, [r3, #300]	; 0x12c
   13ed4:	mov	r1, #3
   13ed8:	mov	r0, #0
   13edc:	bl	17754 <__assert_fail@plt+0x6274>
   13ee0:	mov	r3, r0
   13ee4:	movw	r2, #39944	; 0x9c08
   13ee8:	movt	r2, #1
   13eec:	mov	r1, r4
   13ef0:	mov	r0, #1
   13ef4:	bl	112d0 <error@plt>
   13ef8:	mov	r2, r7
   13efc:	ldr	r3, [sp, #72]	; 0x48
   13f00:	ldr	r1, [r3, #12]
   13f04:	mov	r0, sl
   13f08:	bl	11384 <memrchr@plt>
   13f0c:	mov	r5, r0
   13f10:	mov	r6, #0
   13f14:	mov	r4, r6
   13f18:	b	14094 <__assert_fail@plt+0x2bb4>
   13f1c:	mov	r2, fp
   13f20:	ldr	r1, [sp, #56]	; 0x38
   13f24:	bl	1236c <__assert_fail@plt+0xe8c>
   13f28:	ldr	r3, [sp, #60]	; 0x3c
   13f2c:	adds	r8, r8, r3
   13f30:	adc	r9, r9, #0
   13f34:	ldr	r3, [sp, #80]	; 0x50
   13f38:	cmp	r3, fp
   13f3c:	ldrcs	r3, [sp, #80]	; 0x50
   13f40:	strcs	r3, [sp, #48]	; 0x30
   13f44:	bcc	1413c <__assert_fail@plt+0x2c5c>
   13f48:	cmp	r5, #0
   13f4c:	beq	14158 <__assert_fail@plt+0x2c78>
   13f50:	sub	r5, r5, sl
   13f54:	add	r5, r5, #1
   13f58:	orrs	r3, r8, r9
   13f5c:	mov	r2, r5
   13f60:	mov	r1, sl
   13f64:	moveq	r0, #1
   13f68:	movne	r0, #0
   13f6c:	bl	1236c <__assert_fail@plt+0xe8c>
   13f70:	adds	r8, r8, r5
   13f74:	adc	r9, r9, #0
   13f78:	sub	r7, r7, r5
   13f7c:	add	sl, sl, r5
   13f80:	cmp	r6, #0
   13f84:	beq	14fe8 <__assert_fail@plt+0x3b08>
   13f88:	sub	r4, r4, r5
   13f8c:	mov	fp, #0
   13f90:	mov	r3, #1
   13f94:	str	r3, [sp, #32]
   13f98:	adds	r3, r6, #0
   13f9c:	movne	r3, #1
   13fa0:	cmp	r4, #0
   13fa4:	movne	r5, r3
   13fa8:	moveq	r5, #0
   13fac:	cmp	r5, #0
   13fb0:	beq	14114 <__assert_fail@plt+0x2c34>
   13fb4:	ldr	r2, [sp, #48]	; 0x30
   13fb8:	sub	r3, r2, fp
   13fbc:	cmp	r3, r4
   13fc0:	bcs	13fec <__assert_fail@plt+0x2b0c>
   13fc4:	ldr	r1, [sp, #80]	; 0x50
   13fc8:	mvn	r3, r1
   13fcc:	cmp	r3, r2
   13fd0:	bcc	14160 <__assert_fail@plt+0x2c80>
   13fd4:	add	r3, r2, r1
   13fd8:	str	r3, [sp, #48]	; 0x30
   13fdc:	mov	r1, r3
   13fe0:	ldr	r0, [sp, #56]	; 0x38
   13fe4:	bl	183d0 <__assert_fail@plt+0x6ef0>
   13fe8:	str	r0, [sp, #56]	; 0x38
   13fec:	mov	r2, r4
   13ff0:	mov	r1, sl
   13ff4:	ldr	r3, [sp, #56]	; 0x38
   13ff8:	add	r0, r3, fp
   13ffc:	bl	111c8 <memcpy@plt>
   14000:	add	fp, fp, r4
   14004:	sub	r7, r7, r4
   14008:	add	sl, sl, r4
   1400c:	cmp	r5, #0
   14010:	beq	14024 <__assert_fail@plt+0x2b44>
   14014:	mov	r3, #0
   14018:	str	r3, [sp, #32]
   1401c:	mov	r8, #0
   14020:	mov	r9, #0
   14024:	cmp	r7, #0
   14028:	beq	13e88 <__assert_fail@plt+0x29a8>
   1402c:	str	fp, [sp, #60]	; 0x3c
   14030:	mov	r4, r7
   14034:	mov	r5, #0
   14038:	strd	r4, [sp, #64]	; 0x40
   1403c:	ldrd	r0, [sp, #24]
   14040:	subs	r3, r0, r8
   14044:	sbc	r2, r1, r9
   14048:	subs	r3, r3, fp
   1404c:	str	r3, [sp, #40]	; 0x28
   14050:	mov	r3, #0
   14054:	sbc	r3, r2, r3
   14058:	str	r3, [sp, #44]	; 0x2c
   1405c:	ldrd	r2, [sp, #40]	; 0x28
   14060:	cmp	r3, r5
   14064:	cmpeq	r2, r7
   14068:	bhi	13ef8 <__assert_fail@plt+0x2a18>
   1406c:	sub	r4, r0, fp
   14070:	sub	r4, r4, r8
   14074:	sub	r6, r4, #1
   14078:	add	r6, sl, r6
   1407c:	mov	r2, r4
   14080:	ldr	r3, [sp, #72]	; 0x48
   14084:	ldr	r1, [r3, #12]
   14088:	mov	r0, sl
   1408c:	bl	11384 <memrchr@plt>
   14090:	mov	r5, r0
   14094:	cmp	fp, #0
   14098:	beq	13f48 <__assert_fail@plt+0x2a68>
   1409c:	orrs	r3, r8, r9
   140a0:	moveq	r0, #1
   140a4:	movne	r0, #0
   140a8:	cmp	r5, #0
   140ac:	moveq	r3, r0
   140b0:	movne	r3, #1
   140b4:	cmp	r3, #0
   140b8:	bne	13f1c <__assert_fail@plt+0x2a3c>
   140bc:	ldr	r3, [sp, #32]
   140c0:	cmp	r7, #0
   140c4:	eorne	r3, r3, #1
   140c8:	moveq	r3, #0
   140cc:	cmp	r3, #0
   140d0:	beq	13f98 <__assert_fail@plt+0x2ab8>
   140d4:	cmp	r6, #0
   140d8:	beq	14ed8 <__assert_fail@plt+0x39f8>
   140dc:	orrs	r3, r8, r9
   140e0:	mov	r2, r4
   140e4:	mov	r1, sl
   140e8:	moveq	r0, #1
   140ec:	movne	r0, #0
   140f0:	bl	1236c <__assert_fail@plt+0xe8c>
   140f4:	adds	r8, r8, r4
   140f8:	adc	r9, r9, #0
   140fc:	sub	r7, r7, r4
   14100:	add	sl, sl, r4
   14104:	adds	r3, r6, #0
   14108:	movne	r3, #1
   1410c:	mov	r2, #0
   14110:	str	r2, [sp, #32]
   14114:	adds	r2, r7, #0
   14118:	movne	r2, #1
   1411c:	cmp	r6, #0
   14120:	moveq	r6, r2
   14124:	movne	r6, #0
   14128:	cmp	r6, #0
   1412c:	beq	14164 <__assert_fail@plt+0x2c84>
   14130:	mov	r5, r3
   14134:	mov	r4, r7
   14138:	b	13fb4 <__assert_fail@plt+0x2ad4>
   1413c:	mov	fp, r3
   14140:	mov	r1, r3
   14144:	ldr	r0, [sp, #56]	; 0x38
   14148:	bl	183d0 <__assert_fail@plt+0x6ef0>
   1414c:	str	r0, [sp, #56]	; 0x38
   14150:	str	fp, [sp, #48]	; 0x30
   14154:	b	13f48 <__assert_fail@plt+0x2a68>
   14158:	mov	fp, #0
   1415c:	b	140bc <__assert_fail@plt+0x2bdc>
   14160:	bl	18804 <__assert_fail@plt+0x7324>
   14164:	mov	r5, r3
   14168:	b	1400c <__assert_fail@plt+0x2b2c>
   1416c:	orrs	r3, r8, r9
   14170:	mov	r2, fp
   14174:	ldr	r1, [sp, #56]	; 0x38
   14178:	moveq	r0, #1
   1417c:	movne	r0, #0
   14180:	bl	1236c <__assert_fail@plt+0xe8c>
   14184:	b	14ecc <__assert_fail@plt+0x39ec>
   14188:	ldrd	r2, [sp, #48]	; 0x30
   1418c:	orrs	r3, r2, r3
   14190:	bne	141d0 <__assert_fail@plt+0x2cf0>
   14194:	ldrd	r4, [sp, #24]
   14198:	mov	r2, r4
   1419c:	mov	r3, r5
   141a0:	mov	r0, sl
   141a4:	mov	r1, fp
   141a8:	bl	19654 <__assert_fail@plt+0x8174>
   141ac:	mov	r2, r4
   141b0:	mov	r3, r5
   141b4:	strd	r2, [sp, #8]
   141b8:	ldr	r3, [sp, #32]
   141bc:	str	r3, [sp]
   141c0:	ldr	r3, [sp, #64]	; 0x40
   141c4:	ldr	r2, [sp, #144]	; 0x90
   141c8:	bl	124b4 <__assert_fail@plt+0xfd4>
   141cc:	b	13e20 <__assert_fail@plt+0x2940>
   141d0:	ldr	r3, [sp, #64]	; 0x40
   141d4:	str	r3, [sp, #56]	; 0x38
   141d8:	ldrd	r2, [sp, #48]	; 0x30
   141dc:	ldrd	r0, [sp, #24]
   141e0:	cmp	r3, r1
   141e4:	cmpeq	r2, r0
   141e8:	movls	r3, #1
   141ec:	movhi	r3, #0
   141f0:	cmp	fp, r1
   141f4:	cmpeq	sl, r0
   141f8:	movcc	r3, #0
   141fc:	andcs	r3, r3, #1
   14200:	cmp	r3, #0
   14204:	beq	142a4 <__assert_fail@plt+0x2dc4>
   14208:	ldrd	r2, [sp, #24]
   1420c:	mov	r0, sl
   14210:	mov	r1, fp
   14214:	bl	19654 <__assert_fail@plt+0x8174>
   14218:	ldrd	r8, [sp, #48]	; 0x30
   1421c:	subs	r6, r8, #1
   14220:	sbc	r3, r9, #0
   14224:	mul	r2, r6, r1
   14228:	mla	r3, r0, r3, r2
   1422c:	umull	r4, r5, r6, r0
   14230:	mov	r6, r4
   14234:	add	r3, r3, r5
   14238:	mov	r7, r3
   1423c:	mov	r5, r3
   14240:	ldrd	r2, [sp, #24]
   14244:	cmp	r9, r3
   14248:	cmpeq	r8, r2
   1424c:	beq	14260 <__assert_fail@plt+0x2d80>
   14250:	mul	r3, r0, r9
   14254:	mla	r1, r8, r1, r3
   14258:	umull	sl, fp, r0, r8
   1425c:	add	fp, r1, fp
   14260:	ldr	r3, [sp, #32]
   14264:	mov	r0, r3
   14268:	mov	r1, #0
   1426c:	cmp	r4, r3
   14270:	sbcs	r2, r5, r1
   14274:	bge	142c0 <__assert_fail@plt+0x2de0>
   14278:	sub	r7, r3, r6
   1427c:	mov	r2, r7
   14280:	ldr	r3, [sp, #144]	; 0x90
   14284:	add	r1, r3, r6
   14288:	mov	r0, r3
   1428c:	bl	111a4 <memmove@plt>
   14290:	movw	r9, #50032	; 0xc370
   14294:	movt	r9, #2
   14298:	mov	r0, r7
   1429c:	mov	r7, r9
   142a0:	b	14380 <__assert_fail@plt+0x2ea0>
   142a4:	ldr	r3, [pc, #-2928]	; 1373c <__assert_fail@plt+0x225c>
   142a8:	mov	r2, #996	; 0x3e4
   142ac:	movw	r1, #39392	; 0x99e0
   142b0:	movt	r1, #1
   142b4:	movw	r0, #43272	; 0xa908
   142b8:	movt	r0, #1
   142bc:	bl	114e0 <__assert_fail@plt>
   142c0:	mov	r3, #1
   142c4:	str	r3, [sp]
   142c8:	subs	r2, r4, r0
   142cc:	sbc	r3, r5, r1
   142d0:	mov	r0, #0
   142d4:	bl	11288 <lseek64@plt>
   142d8:	cmp	r0, #0
   142dc:	sbcs	r3, r1, #0
   142e0:	mvnge	r7, #0
   142e4:	bge	14290 <__assert_fail@plt+0x2db0>
   142e8:	bl	1139c <__errno_location@plt>
   142ec:	ldr	r4, [r0]
   142f0:	movw	r3, #50032	; 0xc370
   142f4:	movt	r3, #2
   142f8:	ldr	r2, [r3, #300]	; 0x12c
   142fc:	mov	r1, #3
   14300:	mov	r0, #0
   14304:	bl	17754 <__assert_fail@plt+0x6274>
   14308:	mov	r3, r0
   1430c:	movw	r2, #39944	; 0x9c08
   14310:	movt	r2, #1
   14314:	mov	r1, r4
   14318:	mov	r0, #1
   1431c:	bl	112d0 <error@plt>
   14320:	ldr	r2, [sp, #56]	; 0x38
   14324:	ldr	r1, [sp, #144]	; 0x90
   14328:	mov	r0, #0
   1432c:	bl	17940 <__assert_fail@plt+0x6460>
   14330:	cmn	r0, #1
   14334:	bne	14394 <__assert_fail@plt+0x2eb4>
   14338:	bl	1139c <__errno_location@plt>
   1433c:	ldr	r4, [r0]
   14340:	movw	r3, #50032	; 0xc370
   14344:	movt	r3, #2
   14348:	ldr	r2, [r3, #300]	; 0x12c
   1434c:	mov	r1, #3
   14350:	mov	r0, #0
   14354:	bl	17754 <__assert_fail@plt+0x6274>
   14358:	mov	r3, r0
   1435c:	movw	r2, #39944	; 0x9c08
   14360:	movt	r2, #1
   14364:	mov	r1, r4
   14368:	mov	r0, #1
   1436c:	bl	112d0 <error@plt>
   14370:	adds	r4, r4, r6
   14374:	ldr	r3, [sp, #24]
   14378:	adc	r5, r5, r3
   1437c:	mvn	r0, #0
   14380:	cmp	r4, sl
   14384:	sbcs	r3, r5, fp
   14388:	bge	13e20 <__assert_fail@plt+0x2940>
   1438c:	cmn	r0, #1
   14390:	beq	14320 <__assert_fail@plt+0x2e40>
   14394:	cmp	r0, #0
   14398:	beq	13e20 <__assert_fail@plt+0x2940>
   1439c:	subs	r8, sl, r4
   143a0:	sbc	r9, fp, r5
   143a4:	mov	r1, #0
   143a8:	mov	r6, r8
   143ac:	str	r9, [sp, #24]
   143b0:	cmp	r0, r8
   143b4:	sbcs	r3, r1, r9
   143b8:	movlt	r6, r0
   143bc:	strlt	r1, [sp, #24]
   143c0:	mov	r2, r6
   143c4:	ldr	r1, [sp, #144]	; 0x90
   143c8:	mov	r0, #1
   143cc:	bl	15514 <__assert_fail@plt+0x4034>
   143d0:	cmp	r0, r6
   143d4:	beq	14370 <__assert_fail@plt+0x2e90>
   143d8:	bl	1139c <__errno_location@plt>
   143dc:	ldr	r2, [r0]
   143e0:	ldr	r1, [r7, #40]	; 0x28
   143e4:	cmp	r2, #32
   143e8:	movne	r3, #0
   143ec:	moveq	r3, #1
   143f0:	cmp	r1, #0
   143f4:	moveq	r3, #0
   143f8:	cmp	r3, #0
   143fc:	bne	14370 <__assert_fail@plt+0x2e90>
   14400:	mov	r8, r2
   14404:	movw	r2, #42468	; 0xa5e4
   14408:	movt	r2, #1
   1440c:	mov	r1, #3
   14410:	mov	r0, #0
   14414:	bl	17754 <__assert_fail@plt+0x6274>
   14418:	mov	r3, r0
   1441c:	movw	r2, #39944	; 0x9c08
   14420:	movt	r2, #1
   14424:	mov	r1, r8
   14428:	mov	r0, #1
   1442c:	bl	112d0 <error@plt>
   14430:	ldr	r3, [sp, #64]	; 0x40
   14434:	str	r3, [sp, #148]	; 0x94
   14438:	ldrd	r0, [sp, #48]	; 0x30
   1443c:	ldrd	r2, [sp, #24]
   14440:	cmp	r1, r3
   14444:	cmpeq	r0, r2
   14448:	bhi	144fc <__assert_fail@plt+0x301c>
   1444c:	cmp	fp, r3
   14450:	cmpeq	sl, r2
   14454:	bcc	144fc <__assert_fail@plt+0x301c>
   14458:	ldrd	r2, [sp, #24]
   1445c:	mov	r0, sl
   14460:	mov	r1, fp
   14464:	bl	19654 <__assert_fail@plt+0x8174>
   14468:	str	r0, [sp, #40]	; 0x28
   1446c:	str	r1, [sp, #60]	; 0x3c
   14470:	ldrd	r2, [sp, #48]	; 0x30
   14474:	cmp	r3, #0
   14478:	cmpeq	r2, #1
   1447c:	bls	1481c <__assert_fail@plt+0x333c>
   14480:	subs	ip, r2, #1
   14484:	str	ip, [sp, #96]	; 0x60
   14488:	sbc	r3, r3, #0
   1448c:	str	r3, [sp, #100]	; 0x64
   14490:	ldrd	r4, [sp, #96]	; 0x60
   14494:	mul	r3, r0, r5
   14498:	mla	r1, r4, r1, r3
   1449c:	umull	r2, r3, r0, r4
   144a0:	add	r3, r1, r3
   144a4:	subs	r1, r2, #1
   144a8:	str	r1, [sp, #104]	; 0x68
   144ac:	sbc	r3, r3, #0
   144b0:	str	r3, [sp, #108]	; 0x6c
   144b4:	ldrd	r4, [sp, #104]	; 0x68
   144b8:	strd	r4, [sp, #120]	; 0x78
   144bc:	ldr	r3, [sp, #32]
   144c0:	mov	r0, r3
   144c4:	mov	r1, #0
   144c8:	cmp	r4, r3
   144cc:	sbcs	r2, r5, r1
   144d0:	bge	14518 <__assert_fail@plt+0x3038>
   144d4:	sub	r3, r3, r4
   144d8:	str	r3, [sp, #32]
   144dc:	mov	r2, r3
   144e0:	ldr	r3, [sp, #144]	; 0x90
   144e4:	add	r1, r3, r4
   144e8:	mov	r0, r3
   144ec:	bl	111a4 <memmove@plt>
   144f0:	mov	r8, r4
   144f4:	mov	r9, r5
   144f8:	b	14848 <__assert_fail@plt+0x3368>
   144fc:	ldr	r3, [pc, #-3524]	; 13740 <__assert_fail@plt+0x2260>
   14500:	movw	r2, #867	; 0x363
   14504:	movw	r1, #39392	; 0x99e0
   14508:	movt	r1, #1
   1450c:	movw	r0, #43308	; 0xa92c
   14510:	movt	r0, #1
   14514:	bl	114e0 <__assert_fail@plt>
   14518:	mov	r3, #1
   1451c:	str	r3, [sp]
   14520:	ldrd	r4, [sp, #104]	; 0x68
   14524:	subs	r2, r4, r0
   14528:	sbc	r3, r5, r1
   1452c:	mov	r0, #0
   14530:	bl	11288 <lseek64@plt>
   14534:	cmp	r0, #0
   14538:	sbcs	r3, r1, #0
   1453c:	ldrdge	r8, [sp, #104]	; 0x68
   14540:	mvnge	r3, #0
   14544:	strge	r3, [sp, #32]
   14548:	bge	14848 <__assert_fail@plt+0x3368>
   1454c:	bl	1139c <__errno_location@plt>
   14550:	ldr	r4, [r0]
   14554:	movw	r3, #50032	; 0xc370
   14558:	movt	r3, #2
   1455c:	ldr	r2, [r3, #300]	; 0x12c
   14560:	mov	r1, #3
   14564:	mov	r0, #0
   14568:	bl	17754 <__assert_fail@plt+0x6274>
   1456c:	mov	r3, r0
   14570:	movw	r2, #39944	; 0x9c08
   14574:	movt	r2, #1
   14578:	mov	r1, r4
   1457c:	mov	r0, #1
   14580:	bl	112d0 <error@plt>
   14584:	ldr	r2, [sp, #148]	; 0x94
   14588:	ldr	r1, [sp, #144]	; 0x90
   1458c:	mov	r0, #0
   14590:	bl	17940 <__assert_fail@plt+0x6460>
   14594:	cmn	r0, #1
   14598:	bne	1488c <__assert_fail@plt+0x33ac>
   1459c:	bl	1139c <__errno_location@plt>
   145a0:	ldr	r4, [r0]
   145a4:	movw	r3, #50032	; 0xc370
   145a8:	movt	r3, #2
   145ac:	ldr	r2, [r3, #300]	; 0x12c
   145b0:	mov	r1, #3
   145b4:	mov	r0, #0
   145b8:	bl	17754 <__assert_fail@plt+0x6274>
   145bc:	mov	r3, r0
   145c0:	movw	r2, #39944	; 0x9c08
   145c4:	movt	r2, #1
   145c8:	mov	r1, r4
   145cc:	mov	r0, #1
   145d0:	bl	112d0 <error@plt>
   145d4:	mov	r3, #0
   145d8:	str	r3, [sp, #88]	; 0x58
   145dc:	str	r3, [sp, #92]	; 0x5c
   145e0:	b	146b4 <__assert_fail@plt+0x31d4>
   145e4:	ldr	r4, [sp, #96]	; 0x60
   145e8:	mov	r2, r4
   145ec:	mov	r1, sl
   145f0:	mov	r0, #1
   145f4:	bl	15514 <__assert_fail@plt+0x4034>
   145f8:	cmp	r4, r0
   145fc:	beq	14728 <__assert_fail@plt+0x3248>
   14600:	bl	1139c <__errno_location@plt>
   14604:	ldr	r4, [r0]
   14608:	mov	r2, #5
   1460c:	movw	r1, #43340	; 0xa94c
   14610:	movt	r1, #1
   14614:	mov	r0, #0
   14618:	bl	1121c <dcgettext@plt>
   1461c:	mov	r3, r0
   14620:	movw	r2, #39944	; 0x9c08
   14624:	movt	r2, #1
   14628:	mov	r1, r4
   1462c:	mov	r0, #1
   14630:	bl	112d0 <error@plt>
   14634:	ldr	r2, [sp, #96]	; 0x60
   14638:	mov	r1, sl
   1463c:	ldr	r0, [sp, #56]	; 0x38
   14640:	bl	1236c <__assert_fail@plt+0xe8c>
   14644:	b	14728 <__assert_fail@plt+0x3248>
   14648:	ldrd	r0, [sp, #64]	; 0x40
   1464c:	subs	r6, r0, #1
   14650:	sbc	r7, r1, #0
   14654:	b	147d8 <__assert_fail@plt+0x32f8>
   14658:	mov	fp, sl
   1465c:	strd	r4, [sp, #72]	; 0x48
   14660:	ldr	r3, [sp, #112]	; 0x70
   14664:	ldr	r2, [sp, #80]	; 0x50
   14668:	ldr	r1, [sp, #96]	; 0x60
   1466c:	sub	r2, r2, r1
   14670:	str	r2, [sp, #80]	; 0x50
   14674:	mov	sl, fp
   14678:	str	r3, [sp, #112]	; 0x70
   1467c:	ldr	r3, [sp, #104]	; 0x68
   14680:	str	r3, [sp, #56]	; 0x38
   14684:	mvn	r0, #0
   14688:	ldr	r3, [sp, #32]
   1468c:	cmp	r3, sl
   14690:	beq	14814 <__assert_fail@plt+0x3334>
   14694:	subs	r3, r6, r8
   14698:	str	r3, [sp, #88]	; 0x58
   1469c:	sbc	r3, r7, r9
   146a0:	str	r3, [sp, #92]	; 0x5c
   146a4:	ldrd	r2, [sp, #88]	; 0x58
   146a8:	cmp	r2, #0
   146ac:	sbcs	r3, r3, #0
   146b0:	blt	145d4 <__assert_fail@plt+0x30f4>
   146b4:	ldr	r2, [sp, #80]	; 0x50
   146b8:	mov	r3, #0
   146bc:	ldrd	r4, [sp, #88]	; 0x58
   146c0:	mov	r0, r4
   146c4:	cmp	r2, r4
   146c8:	sbcs	r1, r3, r5
   146cc:	movlt	r0, r2
   146d0:	ldr	r3, [sp, #80]	; 0x50
   146d4:	sub	r2, r3, r0
   146d8:	ldr	r3, [sp, #136]	; 0x88
   146dc:	ldr	r1, [r3, #12]
   146e0:	add	r0, sl, r0
   146e4:	bl	113fc <memchr@plt>
   146e8:	cmp	r0, #0
   146ec:	addne	fp, r0, #1
   146f0:	movne	r3, #1
   146f4:	ldreq	fp, [sp, #120]	; 0x78
   146f8:	moveq	r3, #0
   146fc:	str	r3, [sp, #104]	; 0x68
   14700:	sub	r3, fp, sl
   14704:	str	r3, [sp, #96]	; 0x60
   14708:	ldrd	r2, [sp, #48]	; 0x30
   1470c:	ldrd	r0, [sp, #72]	; 0x48
   14710:	cmp	r1, r3
   14714:	cmpeq	r0, r2
   14718:	beq	145e4 <__assert_fail@plt+0x3104>
   1471c:	ldrd	r2, [sp, #48]	; 0x30
   14720:	orrs	r3, r2, r3
   14724:	beq	14634 <__assert_fail@plt+0x3154>
   14728:	ldr	r3, [sp, #96]	; 0x60
   1472c:	adds	r8, r8, r3
   14730:	adc	r9, r9, #0
   14734:	ldr	sl, [sp, #104]	; 0x68
   14738:	ldrd	r2, [sp, #48]	; 0x30
   1473c:	orr	r3, r2, r3
   14740:	str	r3, [sp, #56]	; 0x38
   14744:	ldrd	r4, [sp, #72]	; 0x48
   14748:	mov	r3, sl
   1474c:	mov	sl, fp
   14750:	mov	fp, r3
   14754:	cmp	r6, r8
   14758:	sbcs	r3, r7, r9
   1475c:	movge	r3, fp
   14760:	orrlt	r3, fp, #1
   14764:	tst	r3, #255	; 0xff
   14768:	beq	14658 <__assert_fail@plt+0x3178>
   1476c:	eor	r3, fp, #1
   14770:	ldr	r2, [sp, #32]
   14774:	cmp	r2, sl
   14778:	movne	r3, #0
   1477c:	andeq	r3, r3, #1
   14780:	cmp	r3, #0
   14784:	bne	14808 <__assert_fail@plt+0x3328>
   14788:	adds	r4, r4, #1
   1478c:	adc	r5, r5, #0
   14790:	ldrd	r2, [sp, #48]	; 0x30
   14794:	cmp	r5, r3
   14798:	cmpeq	r4, r2
   1479c:	movhi	r3, #1
   147a0:	movls	r3, #0
   147a4:	ldr	r2, [sp, #56]	; 0x38
   147a8:	cmp	r2, #0
   147ac:	moveq	r3, #0
   147b0:	cmp	r3, #0
   147b4:	bne	13e20 <__assert_fail@plt+0x2940>
   147b8:	ldrd	r0, [sp, #24]
   147bc:	cmp	r5, r1
   147c0:	cmpeq	r4, r0
   147c4:	beq	14648 <__assert_fail@plt+0x3168>
   147c8:	ldr	r2, [sp, #40]	; 0x28
   147cc:	adds	r6, r6, r2
   147d0:	ldr	r2, [sp, #60]	; 0x3c
   147d4:	adc	r7, r7, r2
   147d8:	cmp	r6, r8
   147dc:	sbcs	r2, r7, r9
   147e0:	movge	fp, r3
   147e4:	bge	14754 <__assert_fail@plt+0x3274>
   147e8:	ldrd	r2, [sp, #48]	; 0x30
   147ec:	orrs	r3, r2, r3
   147f0:	bne	14754 <__assert_fail@plt+0x3274>
   147f4:	mov	r2, #0
   147f8:	mov	r1, r2
   147fc:	mov	r0, #1
   14800:	bl	1236c <__assert_fail@plt+0xe8c>
   14804:	b	14754 <__assert_fail@plt+0x3274>
   14808:	mov	fp, sl
   1480c:	strd	r4, [sp, #72]	; 0x48
   14810:	b	14664 <__assert_fail@plt+0x3184>
   14814:	ldrd	r4, [sp, #72]	; 0x48
   14818:	b	14874 <__assert_fail@plt+0x3394>
   1481c:	ldr	r3, [sp, #40]	; 0x28
   14820:	subs	r3, r3, #1
   14824:	str	r3, [sp, #120]	; 0x78
   14828:	ldr	r3, [sp, #60]	; 0x3c
   1482c:	sbc	r3, r3, #0
   14830:	str	r3, [sp, #124]	; 0x7c
   14834:	mov	r8, #0
   14838:	mov	r9, #0
   1483c:	mov	r2, #1
   14840:	mov	r3, #0
   14844:	strd	r2, [sp, #96]	; 0x60
   14848:	mov	r3, #0
   1484c:	str	r3, [sp, #112]	; 0x70
   14850:	mov	r7, #1
   14854:	movw	r3, #49492	; 0xc154
   14858:	movt	r3, #2
   1485c:	str	r3, [sp, #136]	; 0x88
   14860:	strd	sl, [sp, #64]	; 0x40
   14864:	ldr	r0, [sp, #32]
   14868:	ldrd	r4, [sp, #96]	; 0x60
   1486c:	str	r7, [sp, #56]	; 0x38
   14870:	ldrd	r6, [sp, #120]	; 0x78
   14874:	ldrd	r2, [sp, #64]	; 0x40
   14878:	cmp	r8, r2
   1487c:	sbcs	r3, r9, r3
   14880:	bge	148e8 <__assert_fail@plt+0x3408>
   14884:	cmn	r0, #1
   14888:	beq	14584 <__assert_fail@plt+0x30a4>
   1488c:	cmp	r0, #0
   14890:	beq	148e8 <__assert_fail@plt+0x3408>
   14894:	ldrd	r2, [sp, #64]	; 0x40
   14898:	subs	r1, r2, r8
   1489c:	str	r1, [sp, #128]	; 0x80
   148a0:	sbc	r3, r3, r9
   148a4:	str	r3, [sp, #132]	; 0x84
   148a8:	mov	r2, r0
   148ac:	mov	r3, #0
   148b0:	ldrd	sl, [sp, #128]	; 0x80
   148b4:	mov	r1, sl
   148b8:	cmp	r0, sl
   148bc:	sbcs	r0, r3, fp
   148c0:	movlt	r1, r2
   148c4:	str	r1, [sp, #80]	; 0x50
   148c8:	ldr	sl, [sp, #144]	; 0x90
   148cc:	add	r3, sl, r1
   148d0:	str	r3, [sp, #32]
   148d4:	mov	r2, #0
   148d8:	str	r2, [sp, #112]	; 0x70
   148dc:	str	r3, [sp, #120]	; 0x78
   148e0:	strd	r4, [sp, #72]	; 0x48
   148e4:	b	14684 <__assert_fail@plt+0x31a4>
   148e8:	strd	r4, [sp, #96]	; 0x60
   148ec:	ldr	r3, [sp, #112]	; 0x70
   148f0:	cmp	r3, #0
   148f4:	beq	1490c <__assert_fail@plt+0x342c>
   148f8:	adds	r3, r4, #1
   148fc:	str	r3, [sp, #96]	; 0x60
   14900:	ldr	r3, [sp, #100]	; 0x64
   14904:	adc	r3, r3, #0
   14908:	str	r3, [sp, #100]	; 0x64
   1490c:	mov	r5, #0
   14910:	mov	r4, #1
   14914:	ldrd	r6, [sp, #96]	; 0x60
   14918:	ldrd	r2, [sp, #48]	; 0x30
   1491c:	orrs	r3, r2, r3
   14920:	bne	13e20 <__assert_fail@plt+0x2940>
   14924:	ldrd	r2, [sp, #24]
   14928:	cmp	r7, r3
   1492c:	cmpeq	r6, r2
   14930:	bhi	13e20 <__assert_fail@plt+0x2940>
   14934:	mov	r2, r5
   14938:	mov	r1, r5
   1493c:	mov	r0, r4
   14940:	bl	1236c <__assert_fail@plt+0xe8c>
   14944:	adds	r6, r6, #1
   14948:	adc	r7, r7, #0
   1494c:	b	14918 <__assert_fail@plt+0x3438>
   14950:	ldr	r3, [sp, #64]	; 0x40
   14954:	str	r3, [sp, #88]	; 0x58
   14958:	ldrd	r2, [sp, #48]	; 0x30
   1495c:	orrs	r3, r2, r3
   14960:	bne	149e4 <__assert_fail@plt+0x3504>
   14964:	mvn	r2, #0
   14968:	mov	r3, #0
   1496c:	ldrd	r0, [sp, #24]
   14970:	cmp	r1, r3
   14974:	cmpeq	r0, r2
   14978:	bhi	149e0 <__assert_fail@plt+0x3500>
   1497c:	mov	r1, #16
   14980:	ldrd	sl, [sp, #24]
   14984:	mov	r0, sl
   14988:	bl	184f0 <__assert_fail@plt+0x7010>
   1498c:	str	r0, [sp, #40]	; 0x28
   14990:	mov	r6, r0
   14994:	ldrd	r4, [sp, #48]	; 0x30
   14998:	movw	r8, #50032	; 0xc370
   1499c:	movt	r8, #2
   149a0:	mvn	r9, #0
   149a4:	mov	r7, #0
   149a8:	bl	115e0 <__assert_fail@plt+0x100>
   149ac:	ldr	r0, [r8]
   149b0:	bl	187dc <__assert_fail@plt+0x72fc>
   149b4:	str	r0, [r6]
   149b8:	str	r9, [r6, #4]
   149bc:	str	r7, [r6, #8]
   149c0:	str	r7, [r6, #12]
   149c4:	add	r6, r6, #16
   149c8:	adds	r4, r4, #1
   149cc:	adc	r5, r5, #0
   149d0:	cmp	r5, fp
   149d4:	cmpeq	r4, sl
   149d8:	bcc	149a8 <__assert_fail@plt+0x34c8>
   149dc:	b	149ec <__assert_fail@plt+0x350c>
   149e0:	bl	18804 <__assert_fail@plt+0x7324>
   149e4:	mov	r3, #0
   149e8:	str	r3, [sp, #40]	; 0x28
   149ec:	mov	r2, #1
   149f0:	mov	r3, #0
   149f4:	strd	r2, [sp, #32]
   149f8:	mov	r3, #0
   149fc:	str	r3, [sp, #56]	; 0x38
   14a00:	mov	fp, r3
   14a04:	str	r3, [sp, #60]	; 0x3c
   14a08:	str	r3, [sp, #80]	; 0x50
   14a0c:	movw	sl, #49492	; 0xc154
   14a10:	movt	sl, #2
   14a14:	movw	r9, #50032	; 0xc370
   14a18:	movt	r9, #2
   14a1c:	movw	r3, #50020	; 0xc364
   14a20:	movt	r3, #2
   14a24:	str	r3, [sp, #72]	; 0x48
   14a28:	ldr	r2, [sp, #88]	; 0x58
   14a2c:	ldr	r1, [sp, #144]	; 0x90
   14a30:	mov	r0, #0
   14a34:	bl	17940 <__assert_fail@plt+0x6460>
   14a38:	cmn	r0, #1
   14a3c:	beq	14a60 <__assert_fail@plt+0x3580>
   14a40:	cmp	r0, #0
   14a44:	beq	14de8 <__assert_fail@plt+0x3908>
   14a48:	ldr	r3, [sp, #144]	; 0x90
   14a4c:	add	r6, r3, r0
   14a50:	cmp	r3, r6
   14a54:	beq	14a28 <__assert_fail@plt+0x3548>
   14a58:	mov	r5, r3
   14a5c:	b	14b74 <__assert_fail@plt+0x3694>
   14a60:	bl	1139c <__errno_location@plt>
   14a64:	ldr	r4, [r0]
   14a68:	movw	r3, #50032	; 0xc370
   14a6c:	movt	r3, #2
   14a70:	ldr	r2, [r3, #300]	; 0x12c
   14a74:	mov	r1, #3
   14a78:	mov	r0, #0
   14a7c:	bl	17754 <__assert_fail@plt+0x6274>
   14a80:	mov	r3, r0
   14a84:	movw	r2, #39944	; 0x9c08
   14a88:	movt	r2, #1
   14a8c:	mov	r1, r4
   14a90:	mov	r0, #1
   14a94:	bl	112d0 <error@plt>
   14a98:	ldrb	r3, [r9, #304]	; 0x130
   14a9c:	cmp	r3, #0
   14aa0:	bne	14b08 <__assert_fail@plt+0x3628>
   14aa4:	ldr	r3, [sp, #72]	; 0x48
   14aa8:	ldr	r3, [r3]
   14aac:	mov	r2, #1
   14ab0:	mov	r1, r8
   14ab4:	mov	r0, r5
   14ab8:	bl	111f8 <fwrite_unlocked@plt>
   14abc:	cmp	r0, #1
   14ac0:	beq	14bb8 <__assert_fail@plt+0x36d8>
   14ac4:	movw	r3, #50020	; 0xc364
   14ac8:	movt	r3, #2
   14acc:	ldr	r0, [r3]
   14ad0:	bl	11480 <clearerr_unlocked@plt>
   14ad4:	bl	1139c <__errno_location@plt>
   14ad8:	ldr	r4, [r0]
   14adc:	mov	r2, #5
   14ae0:	movw	r1, #43340	; 0xa94c
   14ae4:	movt	r1, #1
   14ae8:	mov	r0, #0
   14aec:	bl	1121c <dcgettext@plt>
   14af0:	mov	r3, r0
   14af4:	movw	r2, #39944	; 0x9c08
   14af8:	movt	r2, #1
   14afc:	mov	r1, r4
   14b00:	mov	r0, #1
   14b04:	bl	112d0 <error@plt>
   14b08:	mov	r2, r8
   14b0c:	mov	r1, r5
   14b10:	mov	r0, #1
   14b14:	bl	15514 <__assert_fail@plt+0x4034>
   14b18:	cmp	r8, r0
   14b1c:	beq	14bb8 <__assert_fail@plt+0x36d8>
   14b20:	bl	1139c <__errno_location@plt>
   14b24:	ldr	r4, [r0]
   14b28:	mov	r2, #5
   14b2c:	movw	r1, #43340	; 0xa94c
   14b30:	movt	r1, #1
   14b34:	mov	r0, #0
   14b38:	bl	1121c <dcgettext@plt>
   14b3c:	mov	r3, r0
   14b40:	movw	r2, #39944	; 0x9c08
   14b44:	movt	r2, #1
   14b48:	mov	r1, r4
   14b4c:	mov	r0, #1
   14b50:	bl	112d0 <error@plt>
   14b54:	adds	r3, r2, #1
   14b58:	str	r3, [sp, #32]
   14b5c:	ldr	r3, [sp, #36]	; 0x24
   14b60:	adc	r3, r3, #0
   14b64:	str	r3, [sp, #36]	; 0x24
   14b68:	mov	r5, r4
   14b6c:	cmp	r6, r4
   14b70:	beq	14a28 <__assert_fail@plt+0x3548>
   14b74:	sub	r2, r6, r5
   14b78:	ldr	r1, [sl, #12]
   14b7c:	mov	r0, r5
   14b80:	bl	113fc <memchr@plt>
   14b84:	cmp	r0, #0
   14b88:	addne	r4, r0, #1
   14b8c:	movne	r7, #1
   14b90:	moveq	r4, r6
   14b94:	moveq	r7, #0
   14b98:	sub	r8, r4, r5
   14b9c:	ldrd	r2, [sp, #48]	; 0x30
   14ba0:	orrs	r1, r2, r3
   14ba4:	beq	14be4 <__assert_fail@plt+0x3704>
   14ba8:	ldrd	r0, [sp, #32]
   14bac:	cmp	r1, r3
   14bb0:	cmpeq	r0, r2
   14bb4:	beq	14a98 <__assert_fail@plt+0x35b8>
   14bb8:	cmp	r7, #0
   14bbc:	beq	14b68 <__assert_fail@plt+0x3688>
   14bc0:	ldrd	r2, [sp, #32]
   14bc4:	ldrd	r0, [sp, #24]
   14bc8:	cmp	r3, r1
   14bcc:	cmpeq	r2, r0
   14bd0:	bne	14b54 <__assert_fail@plt+0x3674>
   14bd4:	mov	r2, #1
   14bd8:	mov	r3, #0
   14bdc:	strd	r2, [sp, #32]
   14be0:	b	14b68 <__assert_fail@plt+0x3688>
   14be4:	ldr	r2, [sp, #24]
   14be8:	ldr	r1, [sp, #56]	; 0x38
   14bec:	ldr	r0, [sp, #40]	; 0x28
   14bf0:	bl	11e8c <__assert_fail@plt+0x9ac>
   14bf4:	orr	fp, fp, r0
   14bf8:	uxtb	fp, fp
   14bfc:	ldrb	r3, [r9, #304]	; 0x130
   14c00:	cmp	r3, #0
   14c04:	bne	14ce4 <__assert_fail@plt+0x3804>
   14c08:	ldr	r3, [sp, #40]	; 0x28
   14c0c:	ldr	r2, [sp, #56]	; 0x38
   14c10:	add	r3, r3, r2, lsl #4
   14c14:	str	r3, [sp, #64]	; 0x40
   14c18:	ldr	r3, [r3, #8]
   14c1c:	mov	r2, #1
   14c20:	mov	r1, r8
   14c24:	mov	r0, r5
   14c28:	bl	111f8 <fwrite_unlocked@plt>
   14c2c:	cmp	r0, #1
   14c30:	beq	14c5c <__assert_fail@plt+0x377c>
   14c34:	bl	1139c <__errno_location@plt>
   14c38:	ldr	r5, [r0]
   14c3c:	ldr	r2, [r9, #40]	; 0x28
   14c40:	cmp	r5, #32
   14c44:	movne	r3, #0
   14c48:	moveq	r3, #1
   14c4c:	cmp	r2, #0
   14c50:	moveq	r3, #0
   14c54:	cmp	r3, #0
   14c58:	beq	14d60 <__assert_fail@plt+0x3880>
   14c5c:	bl	1139c <__errno_location@plt>
   14c60:	mov	r5, r0
   14c64:	ldr	r1, [r0]
   14c68:	ldr	r2, [r9, #40]	; 0x28
   14c6c:	cmp	r1, #32
   14c70:	movne	r3, #0
   14c74:	moveq	r3, #1
   14c78:	cmp	r2, #0
   14c7c:	moveq	r3, #0
   14c80:	cmp	r3, #0
   14c84:	ldr	r3, [sp, #60]	; 0x3c
   14c88:	moveq	r3, #1
   14c8c:	str	r3, [sp, #60]	; 0x3c
   14c90:	cmp	fp, #0
   14c94:	bne	14d8c <__assert_fail@plt+0x38ac>
   14c98:	cmp	r7, #0
   14c9c:	beq	14b68 <__assert_fail@plt+0x3688>
   14ca0:	ldr	r3, [sp, #56]	; 0x38
   14ca4:	add	r3, r3, #1
   14ca8:	str	r3, [sp, #56]	; 0x38
   14cac:	mov	r2, r3
   14cb0:	mov	r3, #0
   14cb4:	ldrd	r0, [sp, #24]
   14cb8:	cmp	r3, r1
   14cbc:	cmpeq	r2, r0
   14cc0:	bne	14b68 <__assert_fail@plt+0x3688>
   14cc4:	ldr	r3, [sp, #60]	; 0x3c
   14cc8:	cmp	r3, #0
   14ccc:	beq	14e20 <__assert_fail@plt+0x3940>
   14cd0:	str	r3, [sp, #80]	; 0x50
   14cd4:	mov	r3, #0
   14cd8:	str	r3, [sp, #60]	; 0x3c
   14cdc:	str	r3, [sp, #56]	; 0x38
   14ce0:	b	14b68 <__assert_fail@plt+0x3688>
   14ce4:	ldr	r3, [sp, #40]	; 0x28
   14ce8:	ldr	r2, [sp, #56]	; 0x38
   14cec:	add	r3, r3, r2, lsl #4
   14cf0:	str	r3, [sp, #64]	; 0x40
   14cf4:	mov	r2, r8
   14cf8:	mov	r1, r5
   14cfc:	ldr	r0, [r3, #4]
   14d00:	bl	15514 <__assert_fail@plt+0x4034>
   14d04:	cmp	r8, r0
   14d08:	beq	14c5c <__assert_fail@plt+0x377c>
   14d0c:	bl	1139c <__errno_location@plt>
   14d10:	ldr	r5, [r0]
   14d14:	ldr	r2, [r9, #40]	; 0x28
   14d18:	cmp	r5, #32
   14d1c:	movne	r3, #0
   14d20:	moveq	r3, #1
   14d24:	cmp	r2, #0
   14d28:	moveq	r3, #0
   14d2c:	cmp	r3, #0
   14d30:	bne	14c5c <__assert_fail@plt+0x377c>
   14d34:	ldr	r3, [sp, #64]	; 0x40
   14d38:	ldr	r2, [r3]
   14d3c:	mov	r1, #3
   14d40:	mov	r0, #0
   14d44:	bl	17754 <__assert_fail@plt+0x6274>
   14d48:	mov	r3, r0
   14d4c:	movw	r2, #39944	; 0x9c08
   14d50:	movt	r2, #1
   14d54:	mov	r1, r5
   14d58:	mov	r0, #1
   14d5c:	bl	112d0 <error@plt>
   14d60:	ldr	r3, [sp, #64]	; 0x40
   14d64:	ldr	r2, [r3]
   14d68:	mov	r1, #3
   14d6c:	mov	r0, #0
   14d70:	bl	17754 <__assert_fail@plt+0x6274>
   14d74:	mov	r3, r0
   14d78:	movw	r2, #39944	; 0x9c08
   14d7c:	movt	r2, #1
   14d80:	mov	r1, r5
   14d84:	mov	r0, #1
   14d88:	bl	112d0 <error@plt>
   14d8c:	ldr	r3, [sp, #40]	; 0x28
   14d90:	ldr	r2, [sp, #56]	; 0x38
   14d94:	add	r8, r3, r2, lsl #4
   14d98:	ldr	r0, [r8, #8]
   14d9c:	bl	1520c <__assert_fail@plt+0x3d2c>
   14da0:	cmp	r0, #0
   14da4:	bne	14dbc <__assert_fail@plt+0x38dc>
   14da8:	mov	r3, #0
   14dac:	str	r3, [r8, #8]
   14db0:	mvn	r3, #1
   14db4:	str	r3, [r8, #4]
   14db8:	b	14c98 <__assert_fail@plt+0x37b8>
   14dbc:	ldr	r4, [r5]
   14dc0:	ldr	r2, [r8]
   14dc4:	mov	r1, #3
   14dc8:	mov	r0, #0
   14dcc:	bl	17754 <__assert_fail@plt+0x6274>
   14dd0:	mov	r3, r0
   14dd4:	movw	r2, #39944	; 0x9c08
   14dd8:	movt	r2, #1
   14ddc:	mov	r1, r4
   14de0:	mov	r0, #1
   14de4:	bl	112d0 <error@plt>
   14de8:	ldrd	r2, [sp, #48]	; 0x30
   14dec:	orrs	r3, r2, r3
   14df0:	bne	13e20 <__assert_fail@plt+0x2940>
   14df4:	ldr	r3, [sp, #80]	; 0x50
   14df8:	cmp	r3, #0
   14dfc:	ldreq	r8, [sp, #56]	; 0x38
   14e00:	bne	14e20 <__assert_fail@plt+0x3940>
   14e04:	ldr	r4, [sp, #40]	; 0x28
   14e08:	ldr	r6, [sp, #24]
   14e0c:	mov	r5, #0
   14e10:	movw	r7, #50032	; 0xc370
   14e14:	movt	r7, #2
   14e18:	mvn	sl, #1
   14e1c:	b	14e44 <__assert_fail@plt+0x3964>
   14e20:	ldr	r8, [sp, #24]
   14e24:	b	14e04 <__assert_fail@plt+0x3924>
   14e28:	mov	r9, r4
   14e2c:	ldr	r1, [r4, #4]
   14e30:	cmp	r1, #0
   14e34:	bge	14e74 <__assert_fail@plt+0x3994>
   14e38:	str	sl, [r9, #4]
   14e3c:	add	r5, r5, #1
   14e40:	add	r4, r4, #16
   14e44:	cmp	r5, r6
   14e48:	beq	13e20 <__assert_fail@plt+0x2940>
   14e4c:	cmp	r8, r5
   14e50:	bhi	14e28 <__assert_fail@plt+0x3948>
   14e54:	ldrb	r3, [r7, #296]	; 0x128
   14e58:	cmp	r3, #0
   14e5c:	bne	14e28 <__assert_fail@plt+0x3948>
   14e60:	mov	r2, r6
   14e64:	mov	r1, r5
   14e68:	ldr	r0, [sp, #40]	; 0x28
   14e6c:	bl	11e8c <__assert_fail@plt+0x9ac>
   14e70:	b	14e28 <__assert_fail@plt+0x3948>
   14e74:	ldr	r3, [r4]
   14e78:	ldr	r2, [r4, #12]
   14e7c:	ldr	r0, [r4, #8]
   14e80:	bl	12068 <__assert_fail@plt+0xb88>
   14e84:	b	14e38 <__assert_fail@plt+0x3958>
   14e88:	bl	114bc <abort@plt>
   14e8c:	bl	1139c <__errno_location@plt>
   14e90:	ldr	r4, [r0]
   14e94:	movw	r3, #50032	; 0xc370
   14e98:	movt	r3, #2
   14e9c:	ldr	r2, [r3, #300]	; 0x12c
   14ea0:	mov	r1, #3
   14ea4:	mov	r0, #0
   14ea8:	bl	17754 <__assert_fail@plt+0x6274>
   14eac:	mov	r3, r0
   14eb0:	movw	r2, #39944	; 0x9c08
   14eb4:	movt	r2, #1
   14eb8:	mov	r1, r4
   14ebc:	mov	r0, #1
   14ec0:	bl	112d0 <error@plt>
   14ec4:	cmp	fp, #0
   14ec8:	bne	1416c <__assert_fail@plt+0x2c8c>
   14ecc:	ldr	r0, [sp, #56]	; 0x38
   14ed0:	bl	153f4 <__assert_fail@plt+0x3f14>
   14ed4:	b	13e20 <__assert_fail@plt+0x2940>
   14ed8:	orrs	r3, r8, r9
   14edc:	mov	r2, r7
   14ee0:	mov	r1, sl
   14ee4:	moveq	r0, #1
   14ee8:	movne	r0, #0
   14eec:	bl	1236c <__assert_fail@plt+0xe8c>
   14ef0:	ldrd	r2, [sp, #64]	; 0x40
   14ef4:	adds	r8, r8, r2
   14ef8:	adc	r9, r9, r3
   14efc:	add	sl, sl, r7
   14f00:	mov	r5, #0
   14f04:	ldr	r3, [sp, #88]	; 0x58
   14f08:	str	r3, [sp, #32]
   14f0c:	mov	r7, r5
   14f10:	b	1400c <__assert_fail@plt+0x2b2c>
   14f14:	ldrd	r2, [sp, #24]
   14f18:	subs	r1, r2, #1
   14f1c:	str	r1, [sp, #80]	; 0x50
   14f20:	sbc	r3, r3, #0
   14f24:	str	r3, [sp, #84]	; 0x54
   14f28:	movw	r3, #41516	; 0xa22c
   14f2c:	movt	r3, #1
   14f30:	str	r3, [sp]
   14f34:	add	r3, sp, #152	; 0x98
   14f38:	mov	r2, #10
   14f3c:	mov	r1, #0
   14f40:	bl	18ad4 <__assert_fail@plt+0x75f4>
   14f44:	cmp	r0, #0
   14f48:	bne	14fc0 <__assert_fail@plt+0x3ae0>
   14f4c:	ldrd	r2, [sp, #152]	; 0x98
   14f50:	ldrd	r4, [sp, #24]
   14f54:	mvn	r0, r4
   14f58:	mvn	r1, r5
   14f5c:	cmp	r1, r3
   14f60:	cmpeq	r0, r2
   14f64:	movcs	r1, #1
   14f68:	movcc	r1, #0
   14f6c:	cmp	r3, r5
   14f70:	cmpeq	r2, r4
   14f74:	movcs	r1, #0
   14f78:	andcc	r1, r1, #1
   14f7c:	cmp	r1, #0
   14f80:	beq	14fc0 <__assert_fail@plt+0x3ae0>
   14f84:	ldr	r1, [sp, #80]	; 0x50
   14f88:	adds	r1, r1, r2
   14f8c:	str	r1, [sp, #80]	; 0x50
   14f90:	ldr	r1, [sp, #84]	; 0x54
   14f94:	adc	r3, r1, r3
   14f98:	str	r3, [sp, #84]	; 0x54
   14f9c:	b	14fc0 <__assert_fail@plt+0x3ae0>
   14fa0:	sub	r8, r9, #5
   14fa4:	cmp	r8, #2
   14fa8:	bhi	13658 <__assert_fail@plt+0x2178>
   14fac:	ldrd	r2, [sp, #24]
   14fb0:	subs	r1, r2, #1
   14fb4:	str	r1, [sp, #80]	; 0x50
   14fb8:	sbc	r3, r3, #0
   14fbc:	str	r3, [sp, #84]	; 0x54
   14fc0:	movw	r3, #49492	; 0xc154
   14fc4:	movt	r3, #2
   14fc8:	ldr	r0, [r3]
   14fcc:	bl	11354 <strlen@plt>
   14fd0:	mov	r4, #0
   14fd4:	mov	r5, #0
   14fd8:	mov	r6, r0
   14fdc:	mov	r7, #0
   14fe0:	ldrd	sl, [sp, #80]	; 0x50
   14fe4:	b	136a4 <__assert_fail@plt+0x21c4>
   14fe8:	adds	r3, r6, #0
   14fec:	movne	r3, #1
   14ff0:	mov	fp, #0
   14ff4:	mov	r2, #1
   14ff8:	str	r2, [sp, #32]
   14ffc:	b	14114 <__assert_fail@plt+0x2c34>
   15000:	sub	r4, r4, #48	; 0x30
   15004:	mov	r2, r4
   15008:	asr	r3, r4, #31
   1500c:	strd	r2, [sp, #24]
   15010:	str	r5, [sp, #60]	; 0x3c
   15014:	b	12c7c <__assert_fail@plt+0x179c>
   15018:	ldrb	r3, [r0]
   1501c:	cmp	r3, #47	; 0x2f
   15020:	bne	15030 <__assert_fail@plt+0x3b50>
   15024:	ldrb	r3, [r0, #1]!
   15028:	cmp	r3, #47	; 0x2f
   1502c:	beq	15024 <__assert_fail@plt+0x3b44>
   15030:	ldrb	r2, [r0]
   15034:	cmp	r2, #0
   15038:	bxeq	lr
   1503c:	push	{lr}		; (str lr, [sp, #-4]!)
   15040:	mov	r1, r0
   15044:	mov	r3, #0
   15048:	mov	lr, #1
   1504c:	mov	ip, r3
   15050:	b	1506c <__assert_fail@plt+0x3b8c>
   15054:	cmp	r3, #0
   15058:	movne	r0, r1
   1505c:	movne	r3, ip
   15060:	ldrb	r2, [r1, #1]!
   15064:	cmp	r2, #0
   15068:	beq	1507c <__assert_fail@plt+0x3b9c>
   1506c:	cmp	r2, #47	; 0x2f
   15070:	moveq	r3, lr
   15074:	bne	15054 <__assert_fail@plt+0x3b74>
   15078:	b	15060 <__assert_fail@plt+0x3b80>
   1507c:	pop	{pc}		; (ldr pc, [sp], #4)
   15080:	str	r4, [sp, #-8]!
   15084:	str	lr, [sp, #4]
   15088:	mov	r4, r0
   1508c:	bl	11354 <strlen@plt>
   15090:	cmp	r0, #1
   15094:	bls	150b4 <__assert_fail@plt+0x3bd4>
   15098:	add	r3, r4, r0
   1509c:	ldrb	r3, [r3, #-1]
   150a0:	cmp	r3, #47	; 0x2f
   150a4:	subeq	r0, r0, #2
   150a8:	addeq	r3, r4, r0
   150ac:	rsbeq	r1, r4, #1
   150b0:	beq	150c0 <__assert_fail@plt+0x3be0>
   150b4:	ldr	r4, [sp]
   150b8:	add	sp, sp, #4
   150bc:	pop	{pc}		; (ldr pc, [sp], #4)
   150c0:	add	r0, r1, r3
   150c4:	cmp	r3, r4
   150c8:	beq	150b4 <__assert_fail@plt+0x3bd4>
   150cc:	ldrb	r2, [r3], #-1
   150d0:	cmp	r2, #47	; 0x2f
   150d4:	bne	150b4 <__assert_fail@plt+0x3bd4>
   150d8:	b	150c0 <__assert_fail@plt+0x3be0>
   150dc:	movw	r3, #50468	; 0xc524
   150e0:	movt	r3, #2
   150e4:	str	r0, [r3]
   150e8:	bx	lr
   150ec:	movw	r3, #50468	; 0xc524
   150f0:	movt	r3, #2
   150f4:	strb	r0, [r3, #4]
   150f8:	bx	lr
   150fc:	strd	r4, [sp, #-16]!
   15100:	str	r6, [sp, #8]
   15104:	str	lr, [sp, #12]
   15108:	sub	sp, sp, #8
   1510c:	movw	r3, #50020	; 0xc364
   15110:	movt	r3, #2
   15114:	ldr	r0, [r3]
   15118:	bl	19130 <__assert_fail@plt+0x7c50>
   1511c:	cmp	r0, #0
   15120:	beq	15148 <__assert_fail@plt+0x3c68>
   15124:	movw	r3, #50468	; 0xc524
   15128:	movt	r3, #2
   1512c:	ldrb	r3, [r3, #4]
   15130:	cmp	r3, #0
   15134:	beq	15174 <__assert_fail@plt+0x3c94>
   15138:	bl	1139c <__errno_location@plt>
   1513c:	ldr	r3, [r0]
   15140:	cmp	r3, #32
   15144:	bne	15174 <__assert_fail@plt+0x3c94>
   15148:	movw	r3, #50016	; 0xc360
   1514c:	movt	r3, #2
   15150:	ldr	r0, [r3]
   15154:	bl	19130 <__assert_fail@plt+0x7c50>
   15158:	cmp	r0, #0
   1515c:	bne	151fc <__assert_fail@plt+0x3d1c>
   15160:	add	sp, sp, #8
   15164:	ldrd	r4, [sp]
   15168:	ldr	r6, [sp, #8]
   1516c:	add	sp, sp, #12
   15170:	pop	{pc}		; (ldr pc, [sp], #4)
   15174:	mov	r2, #5
   15178:	movw	r1, #43340	; 0xa94c
   1517c:	movt	r1, #1
   15180:	mov	r0, #0
   15184:	bl	1121c <dcgettext@plt>
   15188:	mov	r4, r0
   1518c:	movw	r3, #50468	; 0xc524
   15190:	movt	r3, #2
   15194:	ldr	r5, [r3]
   15198:	cmp	r5, #0
   1519c:	beq	151dc <__assert_fail@plt+0x3cfc>
   151a0:	bl	1139c <__errno_location@plt>
   151a4:	ldr	r6, [r0]
   151a8:	mov	r0, r5
   151ac:	bl	1771c <__assert_fail@plt+0x623c>
   151b0:	str	r4, [sp]
   151b4:	mov	r3, r0
   151b8:	movw	r2, #43076	; 0xa844
   151bc:	movt	r2, #1
   151c0:	mov	r1, r6
   151c4:	mov	r0, #0
   151c8:	bl	112d0 <error@plt>
   151cc:	movw	r3, #49512	; 0xc168
   151d0:	movt	r3, #2
   151d4:	ldr	r0, [r3]
   151d8:	bl	111bc <_exit@plt>
   151dc:	bl	1139c <__errno_location@plt>
   151e0:	mov	r3, r4
   151e4:	movw	r2, #39944	; 0x9c08
   151e8:	movt	r2, #1
   151ec:	ldr	r1, [r0]
   151f0:	mov	r0, #0
   151f4:	bl	112d0 <error@plt>
   151f8:	b	151cc <__assert_fail@plt+0x3cec>
   151fc:	movw	r3, #49512	; 0xc168
   15200:	movt	r3, #2
   15204:	ldr	r0, [r3]
   15208:	bl	111bc <_exit@plt>
   1520c:	strd	r4, [sp, #-16]!
   15210:	str	r6, [sp, #8]
   15214:	str	lr, [sp, #12]
   15218:	sub	sp, sp, #8
   1521c:	mov	r4, r0
   15220:	bl	113e4 <fileno@plt>
   15224:	cmp	r0, #0
   15228:	blt	152a0 <__assert_fail@plt+0x3dc0>
   1522c:	mov	r0, r4
   15230:	bl	11318 <__freading@plt>
   15234:	cmp	r0, #0
   15238:	beq	1526c <__assert_fail@plt+0x3d8c>
   1523c:	mov	r0, r4
   15240:	bl	113e4 <fileno@plt>
   15244:	mov	r3, #1
   15248:	str	r3, [sp]
   1524c:	mov	r2, #0
   15250:	mov	r3, #0
   15254:	bl	11288 <lseek64@plt>
   15258:	mvn	r2, #0
   1525c:	mvn	r3, #0
   15260:	cmp	r1, r3
   15264:	cmpeq	r0, r2
   15268:	beq	152ac <__assert_fail@plt+0x3dcc>
   1526c:	mov	r0, r4
   15270:	bl	15384 <__assert_fail@plt+0x3ea4>
   15274:	cmp	r0, #0
   15278:	beq	152ac <__assert_fail@plt+0x3dcc>
   1527c:	bl	1139c <__errno_location@plt>
   15280:	mov	r5, r0
   15284:	ldr	r6, [r0]
   15288:	mov	r0, r4
   1528c:	bl	11408 <fclose@plt>
   15290:	cmp	r6, #0
   15294:	strne	r6, [r5]
   15298:	mvnne	r0, #0
   1529c:	b	152b4 <__assert_fail@plt+0x3dd4>
   152a0:	mov	r0, r4
   152a4:	bl	11408 <fclose@plt>
   152a8:	b	152b4 <__assert_fail@plt+0x3dd4>
   152ac:	mov	r0, r4
   152b0:	bl	11408 <fclose@plt>
   152b4:	add	sp, sp, #8
   152b8:	ldrd	r4, [sp]
   152bc:	ldr	r6, [sp, #8]
   152c0:	add	sp, sp, #12
   152c4:	pop	{pc}		; (ldr pc, [sp], #4)
   152c8:	push	{r1, r2, r3}
   152cc:	push	{lr}		; (str lr, [sp, #-4]!)
   152d0:	sub	sp, sp, #8
   152d4:	ldr	r1, [sp, #12]
   152d8:	tst	r1, #64	; 0x40
   152dc:	addne	r3, sp, #20
   152e0:	strne	r3, [sp, #4]
   152e4:	ldrne	r2, [sp, #16]
   152e8:	moveq	r2, #0
   152ec:	bl	112dc <open64@plt>
   152f0:	bl	17d3c <__assert_fail@plt+0x685c>
   152f4:	add	sp, sp, #8
   152f8:	pop	{lr}		; (ldr lr, [sp], #4)
   152fc:	add	sp, sp, #12
   15300:	bx	lr
   15304:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15308:	strd	r6, [sp, #8]
   1530c:	str	r8, [sp, #16]
   15310:	str	lr, [sp, #20]
   15314:	mov	r5, r0
   15318:	mov	r0, r1
   1531c:	mov	r1, r2
   15320:	mov	r2, r3
   15324:	bl	112dc <open64@plt>
   15328:	mov	r4, r0
   1532c:	cmp	r5, r0
   15330:	movne	r3, #0
   15334:	moveq	r3, #1
   15338:	orrs	r3, r3, r0, lsr #31
   1533c:	beq	15358 <__assert_fail@plt+0x3e78>
   15340:	mov	r0, r4
   15344:	ldrd	r4, [sp]
   15348:	ldrd	r6, [sp, #8]
   1534c:	ldr	r8, [sp, #16]
   15350:	add	sp, sp, #20
   15354:	pop	{pc}		; (ldr pc, [sp], #4)
   15358:	mov	r1, r5
   1535c:	bl	11228 <dup2@plt>
   15360:	mov	r6, r0
   15364:	bl	1139c <__errno_location@plt>
   15368:	mov	r5, r0
   1536c:	ldr	r7, [r0]
   15370:	mov	r0, r4
   15374:	bl	114c8 <close@plt>
   15378:	str	r7, [r5]
   1537c:	mov	r4, r6
   15380:	b	15340 <__assert_fail@plt+0x3e60>
   15384:	str	r4, [sp, #-8]!
   15388:	str	lr, [sp, #4]
   1538c:	sub	sp, sp, #8
   15390:	subs	r4, r0, #0
   15394:	beq	153a8 <__assert_fail@plt+0x3ec8>
   15398:	mov	r0, r4
   1539c:	bl	11318 <__freading@plt>
   153a0:	cmp	r0, #0
   153a4:	bne	153c0 <__assert_fail@plt+0x3ee0>
   153a8:	mov	r0, r4
   153ac:	bl	1118c <fflush@plt>
   153b0:	add	sp, sp, #8
   153b4:	ldr	r4, [sp]
   153b8:	add	sp, sp, #4
   153bc:	pop	{pc}		; (ldr pc, [sp], #4)
   153c0:	ldr	r3, [r4]
   153c4:	tst	r3, #256	; 0x100
   153c8:	bne	153d8 <__assert_fail@plt+0x3ef8>
   153cc:	mov	r0, r4
   153d0:	bl	1118c <fflush@plt>
   153d4:	b	153b0 <__assert_fail@plt+0x3ed0>
   153d8:	mov	r3, #1
   153dc:	str	r3, [sp]
   153e0:	mov	r2, #0
   153e4:	mov	r3, #0
   153e8:	mov	r0, r4
   153ec:	bl	15454 <__assert_fail@plt+0x3f74>
   153f0:	b	153cc <__assert_fail@plt+0x3eec>
   153f4:	strd	r4, [sp, #-12]!
   153f8:	str	lr, [sp, #8]
   153fc:	sub	sp, sp, #12
   15400:	mov	r5, r0
   15404:	bl	1139c <__errno_location@plt>
   15408:	mov	r4, r0
   1540c:	ldr	r3, [r0]
   15410:	str	r3, [sp]
   15414:	str	r3, [sp, #4]
   15418:	mov	r3, #0
   1541c:	str	r3, [r0]
   15420:	mov	r0, r5
   15424:	bl	111b0 <free@plt>
   15428:	ldr	r3, [r4]
   1542c:	clz	r3, r3
   15430:	lsr	r3, r3, #5
   15434:	add	r2, sp, #8
   15438:	add	r3, r2, r3, lsl #2
   1543c:	ldr	r3, [r3, #-8]
   15440:	str	r3, [r4]
   15444:	add	sp, sp, #12
   15448:	ldrd	r4, [sp]
   1544c:	add	sp, sp, #8
   15450:	pop	{pc}		; (ldr pc, [sp], #4)
   15454:	str	r4, [sp, #-16]!
   15458:	strd	r6, [sp, #4]
   1545c:	str	lr, [sp, #12]
   15460:	sub	sp, sp, #8
   15464:	mov	r4, r0
   15468:	mov	r6, r2
   1546c:	mov	r7, r3
   15470:	ldr	r2, [r0, #8]
   15474:	ldr	r3, [r0, #4]
   15478:	cmp	r2, r3
   1547c:	beq	154ac <__assert_fail@plt+0x3fcc>
   15480:	ldr	r3, [sp, #24]
   15484:	str	r3, [sp]
   15488:	mov	r2, r6
   1548c:	mov	r3, r7
   15490:	mov	r0, r4
   15494:	bl	11420 <fseeko64@plt>
   15498:	add	sp, sp, #8
   1549c:	ldr	r4, [sp]
   154a0:	ldrd	r6, [sp, #4]
   154a4:	add	sp, sp, #12
   154a8:	pop	{pc}		; (ldr pc, [sp], #4)
   154ac:	ldr	r2, [r0, #20]
   154b0:	ldr	r3, [r0, #16]
   154b4:	cmp	r2, r3
   154b8:	bne	15480 <__assert_fail@plt+0x3fa0>
   154bc:	ldr	r3, [r0, #36]	; 0x24
   154c0:	cmp	r3, #0
   154c4:	bne	15480 <__assert_fail@plt+0x3fa0>
   154c8:	bl	113e4 <fileno@plt>
   154cc:	ldr	r3, [sp, #24]
   154d0:	str	r3, [sp]
   154d4:	mov	r2, r6
   154d8:	mov	r3, r7
   154dc:	bl	11288 <lseek64@plt>
   154e0:	mvn	r2, #0
   154e4:	mvn	r3, #0
   154e8:	cmp	r1, r3
   154ec:	cmpeq	r0, r2
   154f0:	beq	1550c <__assert_fail@plt+0x402c>
   154f4:	ldr	r3, [r4]
   154f8:	bic	r3, r3, #16
   154fc:	str	r3, [r4]
   15500:	strd	r0, [r4, #80]	; 0x50
   15504:	mov	r0, #0
   15508:	b	15498 <__assert_fail@plt+0x3fb8>
   1550c:	mvn	r0, #0
   15510:	b	15498 <__assert_fail@plt+0x3fb8>
   15514:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15518:	strd	r6, [sp, #8]
   1551c:	str	r8, [sp, #16]
   15520:	str	lr, [sp, #20]
   15524:	subs	r4, r2, #0
   15528:	beq	15590 <__assert_fail@plt+0x40b0>
   1552c:	mov	r7, r0
   15530:	mov	r5, r1
   15534:	mov	r6, #0
   15538:	mov	r2, r4
   1553c:	mov	r1, r5
   15540:	mov	r0, r7
   15544:	bl	179d8 <__assert_fail@plt+0x64f8>
   15548:	cmn	r0, #1
   1554c:	beq	15578 <__assert_fail@plt+0x4098>
   15550:	cmp	r0, #0
   15554:	beq	1556c <__assert_fail@plt+0x408c>
   15558:	add	r6, r6, r0
   1555c:	add	r5, r5, r0
   15560:	subs	r4, r4, r0
   15564:	bne	15538 <__assert_fail@plt+0x4058>
   15568:	b	15578 <__assert_fail@plt+0x4098>
   1556c:	bl	1139c <__errno_location@plt>
   15570:	mov	r3, #28
   15574:	str	r3, [r0]
   15578:	mov	r0, r6
   1557c:	ldrd	r4, [sp]
   15580:	ldrd	r6, [sp, #8]
   15584:	ldr	r8, [sp, #16]
   15588:	add	sp, sp, #20
   1558c:	pop	{pc}		; (ldr pc, [sp], #4)
   15590:	mov	r6, r4
   15594:	b	15578 <__assert_fail@plt+0x4098>
   15598:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1559c:	str	r6, [sp, #8]
   155a0:	strd	r8, [sp, #12]
   155a4:	str	lr, [sp, #20]
   155a8:	mov	r4, r0
   155ac:	mov	r5, r1
   155b0:	add	r6, r2, #20
   155b4:	mov	r3, #0
   155b8:	strb	r3, [r2, #20]
   155bc:	mov	r8, #10
   155c0:	mov	r9, #0
   155c4:	b	155d0 <__assert_fail@plt+0x40f0>
   155c8:	mov	r4, r0
   155cc:	mov	r5, r1
   155d0:	mov	r2, r8
   155d4:	mov	r3, r9
   155d8:	mov	r0, r4
   155dc:	mov	r1, r5
   155e0:	bl	19654 <__assert_fail@plt+0x8174>
   155e4:	add	r2, r2, #48	; 0x30
   155e8:	strb	r2, [r6, #-1]!
   155ec:	mov	r2, r8
   155f0:	mov	r3, r9
   155f4:	mov	r0, r4
   155f8:	mov	r1, r5
   155fc:	bl	19654 <__assert_fail@plt+0x8174>
   15600:	cmp	r5, #0
   15604:	cmpeq	r4, #9
   15608:	bhi	155c8 <__assert_fail@plt+0x40e8>
   1560c:	mov	r0, r6
   15610:	ldrd	r4, [sp]
   15614:	ldr	r6, [sp, #8]
   15618:	ldrd	r8, [sp, #12]
   1561c:	add	sp, sp, #20
   15620:	pop	{pc}		; (ldr pc, [sp], #4)
   15624:	strd	r4, [sp, #-16]!
   15628:	str	r6, [sp, #8]
   1562c:	str	lr, [sp, #12]
   15630:	subs	r4, r0, #0
   15634:	beq	156d0 <__assert_fail@plt+0x41f0>
   15638:	mov	r1, #47	; 0x2f
   1563c:	mov	r0, r4
   15640:	bl	11468 <strrchr@plt>
   15644:	subs	r5, r0, #0
   15648:	beq	156a8 <__assert_fail@plt+0x41c8>
   1564c:	add	r6, r5, #1
   15650:	sub	r3, r6, r4
   15654:	cmp	r3, #6
   15658:	ble	156a8 <__assert_fail@plt+0x41c8>
   1565c:	mov	r2, #7
   15660:	movw	r1, #43756	; 0xaaec
   15664:	movt	r1, #1
   15668:	sub	r0, r5, #6
   1566c:	bl	114b0 <strncmp@plt>
   15670:	cmp	r0, #0
   15674:	bne	156a8 <__assert_fail@plt+0x41c8>
   15678:	mov	r2, #3
   1567c:	movw	r1, #43764	; 0xaaf4
   15680:	movt	r1, #1
   15684:	mov	r0, r6
   15688:	bl	114b0 <strncmp@plt>
   1568c:	cmp	r0, #0
   15690:	movne	r4, r6
   15694:	bne	156a8 <__assert_fail@plt+0x41c8>
   15698:	add	r4, r5, #4
   1569c:	movw	r3, #50000	; 0xc350
   156a0:	movt	r3, #2
   156a4:	str	r4, [r3]
   156a8:	movw	r3, #50476	; 0xc52c
   156ac:	movt	r3, #2
   156b0:	str	r4, [r3]
   156b4:	movw	r3, #50004	; 0xc354
   156b8:	movt	r3, #2
   156bc:	str	r4, [r3]
   156c0:	ldrd	r4, [sp]
   156c4:	ldr	r6, [sp, #8]
   156c8:	add	sp, sp, #12
   156cc:	pop	{pc}		; (ldr pc, [sp], #4)
   156d0:	movw	r3, #50016	; 0xc360
   156d4:	movt	r3, #2
   156d8:	ldr	r3, [r3]
   156dc:	mov	r2, #55	; 0x37
   156e0:	mov	r1, #1
   156e4:	movw	r0, #43700	; 0xaab4
   156e8:	movt	r0, #1
   156ec:	bl	1127c <fwrite@plt>
   156f0:	bl	114bc <abort@plt>
   156f4:	mov	r2, #0
   156f8:	mov	r3, #0
   156fc:	strd	r2, [r0]
   15700:	strd	r2, [r0, #8]
   15704:	strd	r2, [r0, #16]
   15708:	strd	r2, [r0, #24]
   1570c:	strd	r2, [r0, #32]
   15710:	strd	r2, [r0, #40]	; 0x28
   15714:	cmp	r1, #10
   15718:	beq	15724 <__assert_fail@plt+0x4244>
   1571c:	str	r1, [r0]
   15720:	bx	lr
   15724:	str	r4, [sp, #-8]!
   15728:	str	lr, [sp, #4]
   1572c:	bl	114bc <abort@plt>
   15730:	strd	r4, [sp, #-16]!
   15734:	str	r6, [sp, #8]
   15738:	str	lr, [sp, #12]
   1573c:	mov	r5, r0
   15740:	mov	r6, r1
   15744:	mov	r2, #5
   15748:	mov	r1, r0
   1574c:	mov	r0, #0
   15750:	bl	1121c <dcgettext@plt>
   15754:	mov	r4, r0
   15758:	cmp	r5, r0
   1575c:	beq	15774 <__assert_fail@plt+0x4294>
   15760:	mov	r0, r4
   15764:	ldrd	r4, [sp]
   15768:	ldr	r6, [sp, #8]
   1576c:	add	sp, sp, #12
   15770:	pop	{pc}		; (ldr pc, [sp], #4)
   15774:	bl	191bc <__assert_fail@plt+0x7cdc>
   15778:	ldrb	r3, [r0]
   1577c:	bic	r3, r3, #32
   15780:	cmp	r3, #85	; 0x55
   15784:	bne	15808 <__assert_fail@plt+0x4328>
   15788:	ldrb	r3, [r0, #1]
   1578c:	bic	r3, r3, #32
   15790:	cmp	r3, #84	; 0x54
   15794:	bne	157cc <__assert_fail@plt+0x42ec>
   15798:	ldrb	r3, [r0, #2]
   1579c:	bic	r3, r3, #32
   157a0:	cmp	r3, #70	; 0x46
   157a4:	bne	157cc <__assert_fail@plt+0x42ec>
   157a8:	ldrb	r3, [r0, #3]
   157ac:	cmp	r3, #45	; 0x2d
   157b0:	bne	157cc <__assert_fail@plt+0x42ec>
   157b4:	ldrb	r3, [r0, #4]
   157b8:	cmp	r3, #56	; 0x38
   157bc:	bne	157cc <__assert_fail@plt+0x42ec>
   157c0:	ldrb	r3, [r0, #5]
   157c4:	cmp	r3, #0
   157c8:	beq	157e8 <__assert_fail@plt+0x4308>
   157cc:	movw	r4, #39772	; 0x9b5c
   157d0:	movt	r4, #1
   157d4:	movw	r3, #43868	; 0xab5c
   157d8:	movt	r3, #1
   157dc:	cmp	r6, #9
   157e0:	movne	r4, r3
   157e4:	b	15760 <__assert_fail@plt+0x4280>
   157e8:	ldrb	r2, [r4]
   157ec:	movw	r4, #43864	; 0xab58
   157f0:	movt	r4, #1
   157f4:	movw	r3, #43852	; 0xab4c
   157f8:	movt	r3, #1
   157fc:	cmp	r2, #96	; 0x60
   15800:	movne	r4, r3
   15804:	b	15760 <__assert_fail@plt+0x4280>
   15808:	cmp	r3, #71	; 0x47
   1580c:	bne	157cc <__assert_fail@plt+0x42ec>
   15810:	ldrb	r3, [r0, #1]
   15814:	bic	r3, r3, #32
   15818:	cmp	r3, #66	; 0x42
   1581c:	bne	157cc <__assert_fail@plt+0x42ec>
   15820:	ldrb	r3, [r0, #2]
   15824:	cmp	r3, #49	; 0x31
   15828:	bne	157cc <__assert_fail@plt+0x42ec>
   1582c:	ldrb	r3, [r0, #3]
   15830:	cmp	r3, #56	; 0x38
   15834:	bne	157cc <__assert_fail@plt+0x42ec>
   15838:	ldrb	r3, [r0, #4]
   1583c:	cmp	r3, #48	; 0x30
   15840:	bne	157cc <__assert_fail@plt+0x42ec>
   15844:	ldrb	r3, [r0, #5]
   15848:	cmp	r3, #51	; 0x33
   1584c:	bne	157cc <__assert_fail@plt+0x42ec>
   15850:	ldrb	r3, [r0, #6]
   15854:	cmp	r3, #48	; 0x30
   15858:	bne	157cc <__assert_fail@plt+0x42ec>
   1585c:	ldrb	r3, [r0, #7]
   15860:	cmp	r3, #0
   15864:	bne	157cc <__assert_fail@plt+0x42ec>
   15868:	ldrb	r2, [r4]
   1586c:	movw	r4, #43860	; 0xab54
   15870:	movt	r4, #1
   15874:	movw	r3, #43856	; 0xab50
   15878:	movt	r3, #1
   1587c:	cmp	r2, #96	; 0x60
   15880:	movne	r4, r3
   15884:	b	15760 <__assert_fail@plt+0x4280>
   15888:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1588c:	strd	r6, [sp, #8]
   15890:	strd	r8, [sp, #16]
   15894:	strd	sl, [sp, #24]
   15898:	str	lr, [sp, #32]
   1589c:	sub	sp, sp, #116	; 0x74
   158a0:	str	r0, [sp, #64]	; 0x40
   158a4:	mov	r8, r1
   158a8:	str	r2, [sp, #48]	; 0x30
   158ac:	str	r3, [sp, #24]
   158b0:	ldr	r7, [sp, #152]	; 0x98
   158b4:	bl	112a0 <__ctype_get_mb_cur_max@plt>
   158b8:	str	r0, [sp, #76]	; 0x4c
   158bc:	ldr	r3, [sp, #156]	; 0x9c
   158c0:	ubfx	r3, r3, #1, #1
   158c4:	str	r3, [sp, #32]
   158c8:	mov	r3, #1
   158cc:	str	r3, [sp, #40]	; 0x28
   158d0:	mov	r3, #0
   158d4:	str	r3, [sp, #68]	; 0x44
   158d8:	str	r3, [sp, #36]	; 0x24
   158dc:	str	r3, [sp, #28]
   158e0:	str	r3, [sp, #52]	; 0x34
   158e4:	str	r3, [sp, #60]	; 0x3c
   158e8:	str	r3, [sp, #72]	; 0x48
   158ec:	movw	r3, #43872	; 0xab60
   158f0:	movt	r3, #1
   158f4:	str	r3, [sp, #80]	; 0x50
   158f8:	mov	r9, r8
   158fc:	mov	sl, r7
   15900:	cmp	sl, #10
   15904:	ldrls	pc, [pc, sl, lsl #2]
   15908:	b	15acc <__assert_fail@plt+0x45ec>
   1590c:	andeq	r5, r1, ip, ror #18
   15910:	andeq	r5, r1, r0, asr #18
   15914:	andeq	r5, r1, r4, lsr #21
   15918:	andeq	r5, r1, r8, lsr r9
   1591c:	andeq	r5, r1, r8, asr sl
   15920:	andeq	r5, r1, ip, ror r9
   15924:	andeq	r6, r1, r8, asr #26
   15928:	ldrdeq	r5, [r1], -r0
   1592c:			; <UNDEFINED> instruction: 0x000159b8
   15930:			; <UNDEFINED> instruction: 0x000159b8
   15934:			; <UNDEFINED> instruction: 0x000159b8
   15938:	mov	r3, #1
   1593c:	str	r3, [sp, #28]
   15940:	mov	r3, #1
   15944:	str	r3, [sp, #32]
   15948:	str	r3, [sp, #52]	; 0x34
   1594c:	movw	r3, #43868	; 0xab5c
   15950:	movt	r3, #1
   15954:	str	r3, [sp, #60]	; 0x3c
   15958:	mov	fp, #0
   1595c:	mov	sl, #2
   15960:	mov	r6, #0
   15964:	ldr	r8, [sp, #64]	; 0x40
   15968:	b	161e0 <__assert_fail@plt+0x4d00>
   1596c:	mov	fp, sl
   15970:	mov	r3, #0
   15974:	str	r3, [sp, #32]
   15978:	b	15960 <__assert_fail@plt+0x4480>
   1597c:	ldr	r3, [sp, #32]
   15980:	cmp	r3, #0
   15984:	bne	15ae4 <__assert_fail@plt+0x4604>
   15988:	cmp	r9, #0
   1598c:	beq	15b08 <__assert_fail@plt+0x4628>
   15990:	mov	r3, #34	; 0x22
   15994:	ldr	r2, [sp, #64]	; 0x40
   15998:	strb	r3, [r2]
   1599c:	mov	fp, #1
   159a0:	str	fp, [sp, #28]
   159a4:	str	fp, [sp, #52]	; 0x34
   159a8:	movw	r3, #39772	; 0x9b5c
   159ac:	movt	r3, #1
   159b0:	str	r3, [sp, #60]	; 0x3c
   159b4:	b	15960 <__assert_fail@plt+0x4480>
   159b8:	cmp	sl, #10
   159bc:	bne	159f0 <__assert_fail@plt+0x4510>
   159c0:	ldr	r3, [sp, #32]
   159c4:	cmp	r3, #0
   159c8:	movne	fp, #0
   159cc:	beq	15a18 <__assert_fail@plt+0x4538>
   159d0:	ldr	r0, [sp, #168]	; 0xa8
   159d4:	bl	11354 <strlen@plt>
   159d8:	str	r0, [sp, #52]	; 0x34
   159dc:	ldr	r3, [sp, #168]	; 0xa8
   159e0:	str	r3, [sp, #60]	; 0x3c
   159e4:	mov	r3, #1
   159e8:	str	r3, [sp, #28]
   159ec:	b	15960 <__assert_fail@plt+0x4480>
   159f0:	mov	r1, sl
   159f4:	ldr	r0, [sp, #80]	; 0x50
   159f8:	bl	15730 <__assert_fail@plt+0x4250>
   159fc:	str	r0, [sp, #164]	; 0xa4
   15a00:	mov	r1, sl
   15a04:	movw	r0, #43868	; 0xab5c
   15a08:	movt	r0, #1
   15a0c:	bl	15730 <__assert_fail@plt+0x4250>
   15a10:	str	r0, [sp, #168]	; 0xa8
   15a14:	b	159c0 <__assert_fail@plt+0x44e0>
   15a18:	ldr	r3, [sp, #164]	; 0xa4
   15a1c:	ldrb	r3, [r3]
   15a20:	cmp	r3, #0
   15a24:	beq	15a50 <__assert_fail@plt+0x4570>
   15a28:	ldr	r2, [sp, #164]	; 0xa4
   15a2c:	mov	fp, #0
   15a30:	ldr	r1, [sp, #64]	; 0x40
   15a34:	cmp	r9, fp
   15a38:	strbhi	r3, [r1, fp]
   15a3c:	add	fp, fp, #1
   15a40:	ldrb	r3, [r2, #1]!
   15a44:	cmp	r3, #0
   15a48:	bne	15a34 <__assert_fail@plt+0x4554>
   15a4c:	b	159d0 <__assert_fail@plt+0x44f0>
   15a50:	mov	fp, #0
   15a54:	b	159d0 <__assert_fail@plt+0x44f0>
   15a58:	ldr	r3, [sp, #32]
   15a5c:	cmp	r3, #0
   15a60:	bne	15940 <__assert_fail@plt+0x4460>
   15a64:	mov	r3, #1
   15a68:	str	r3, [sp, #28]
   15a6c:	cmp	r9, #0
   15a70:	beq	15b24 <__assert_fail@plt+0x4644>
   15a74:	mov	r3, #39	; 0x27
   15a78:	ldr	r2, [sp, #64]	; 0x40
   15a7c:	strb	r3, [r2]
   15a80:	mov	r3, #0
   15a84:	str	r3, [sp, #32]
   15a88:	mov	fp, #1
   15a8c:	str	fp, [sp, #52]	; 0x34
   15a90:	movw	r3, #43868	; 0xab5c
   15a94:	movt	r3, #1
   15a98:	str	r3, [sp, #60]	; 0x3c
   15a9c:	mov	sl, #2
   15aa0:	b	15960 <__assert_fail@plt+0x4480>
   15aa4:	ldr	r3, [sp, #32]
   15aa8:	cmp	r3, #0
   15aac:	beq	15a6c <__assert_fail@plt+0x458c>
   15ab0:	mov	r3, #1
   15ab4:	str	r3, [sp, #52]	; 0x34
   15ab8:	movw	r3, #43868	; 0xab5c
   15abc:	movt	r3, #1
   15ac0:	str	r3, [sp, #60]	; 0x3c
   15ac4:	mov	fp, #0
   15ac8:	b	15960 <__assert_fail@plt+0x4480>
   15acc:	bl	114bc <abort@plt>
   15ad0:	mov	fp, #0
   15ad4:	str	fp, [sp, #32]
   15ad8:	mov	r3, #1
   15adc:	str	r3, [sp, #28]
   15ae0:	b	15960 <__assert_fail@plt+0x4480>
   15ae4:	ldr	r3, [sp, #32]
   15ae8:	str	r3, [sp, #28]
   15aec:	mov	r3, #1
   15af0:	str	r3, [sp, #52]	; 0x34
   15af4:	movw	r3, #39772	; 0x9b5c
   15af8:	movt	r3, #1
   15afc:	str	r3, [sp, #60]	; 0x3c
   15b00:	mov	fp, #0
   15b04:	b	15960 <__assert_fail@plt+0x4480>
   15b08:	mov	fp, #1
   15b0c:	str	fp, [sp, #28]
   15b10:	str	fp, [sp, #52]	; 0x34
   15b14:	movw	r3, #39772	; 0x9b5c
   15b18:	movt	r3, #1
   15b1c:	str	r3, [sp, #60]	; 0x3c
   15b20:	b	15960 <__assert_fail@plt+0x4480>
   15b24:	mov	r3, #0
   15b28:	str	r3, [sp, #32]
   15b2c:	mov	fp, #1
   15b30:	str	fp, [sp, #52]	; 0x34
   15b34:	movw	r3, #43868	; 0xab5c
   15b38:	movt	r3, #1
   15b3c:	str	r3, [sp, #60]	; 0x3c
   15b40:	mov	sl, #2
   15b44:	b	15960 <__assert_fail@plt+0x4480>
   15b48:	mov	r3, r2
   15b4c:	add	r4, r6, r2
   15b50:	ldr	r2, [sp, #24]
   15b54:	cmp	r3, #1
   15b58:	movls	r3, #0
   15b5c:	movhi	r3, #1
   15b60:	cmn	r2, #1
   15b64:	movne	r3, #0
   15b68:	cmp	r3, #0
   15b6c:	beq	15b7c <__assert_fail@plt+0x469c>
   15b70:	ldr	r0, [sp, #48]	; 0x30
   15b74:	bl	11354 <strlen@plt>
   15b78:	str	r0, [sp, #24]
   15b7c:	ldr	r3, [sp, #24]
   15b80:	cmp	r4, r3
   15b84:	bhi	16d70 <__assert_fail@plt+0x5890>
   15b88:	ldr	r3, [sp, #48]	; 0x30
   15b8c:	add	r4, r3, r6
   15b90:	ldr	r2, [sp, #52]	; 0x34
   15b94:	ldr	r1, [sp, #60]	; 0x3c
   15b98:	mov	r0, r4
   15b9c:	bl	11204 <memcmp@plt>
   15ba0:	cmp	r0, #0
   15ba4:	bne	16d70 <__assert_fail@plt+0x5890>
   15ba8:	ldr	r3, [sp, #32]
   15bac:	cmp	r3, #0
   15bb0:	bne	15dc0 <__assert_fail@plt+0x48e0>
   15bb4:	ldrb	r4, [r4]
   15bb8:	cmp	r4, #126	; 0x7e
   15bbc:	ldrls	pc, [pc, r4, lsl #2]
   15bc0:	b	16674 <__assert_fail@plt+0x5194>
   15bc4:	andeq	r5, r1, r4, lsl #28
   15bc8:	andeq	r6, r1, r4, ror r6
   15bcc:	andeq	r6, r1, r4, ror r6
   15bd0:	andeq	r6, r1, r4, ror r6
   15bd4:	andeq	r6, r1, r4, ror r6
   15bd8:	andeq	r6, r1, r4, ror r6
   15bdc:	andeq	r6, r1, r4, ror r6
   15be0:	andeq	r6, r1, ip, lsl r5
   15be4:	andeq	r6, r1, r0, lsr #1
   15be8:	andeq	r6, r1, r4, asr #8
   15bec:	strdeq	r6, [r1], -r0
   15bf0:	andeq	r6, r1, r8, asr r4
   15bf4:	strheq	r6, [r1], -r4
   15bf8:	andeq	r6, r1, r8, asr #1
   15bfc:	andeq	r6, r1, r4, ror r6
   15c00:	andeq	r6, r1, r4, ror r6
   15c04:	andeq	r6, r1, r4, ror r6
   15c08:	andeq	r6, r1, r4, ror r6
   15c0c:	andeq	r6, r1, r4, ror r6
   15c10:	andeq	r6, r1, r4, ror r6
   15c14:	andeq	r6, r1, r4, ror r6
   15c18:	andeq	r6, r1, r4, ror r6
   15c1c:	andeq	r6, r1, r4, ror r6
   15c20:	andeq	r6, r1, r4, ror r6
   15c24:	andeq	r6, r1, r4, ror r6
   15c28:	andeq	r6, r1, r4, ror r6
   15c2c:	andeq	r6, r1, r4, ror r6
   15c30:	andeq	r6, r1, r4, ror r6
   15c34:	andeq	r6, r1, r4, ror r6
   15c38:	andeq	r6, r1, r4, ror r6
   15c3c:	andeq	r6, r1, r4, ror r6
   15c40:	andeq	r6, r1, r4, ror r6
   15c44:	muleq	r1, r0, r5
   15c48:			; <UNDEFINED> instruction: 0x000165b4
   15c4c:			; <UNDEFINED> instruction: 0x000165b4
   15c50:	andeq	r6, r1, ip, asr #10
   15c54:			; <UNDEFINED> instruction: 0x000165b4
   15c58:	ldrdeq	r6, [r1], -r4
   15c5c:			; <UNDEFINED> instruction: 0x000165b4
   15c60:	ldrdeq	r6, [r1], -r4
   15c64:			; <UNDEFINED> instruction: 0x000165b4
   15c68:			; <UNDEFINED> instruction: 0x000165b4
   15c6c:			; <UNDEFINED> instruction: 0x000165b4
   15c70:	ldrdeq	r6, [r1], -r4
   15c74:	ldrdeq	r6, [r1], -r4
   15c78:	ldrdeq	r6, [r1], -r4
   15c7c:	ldrdeq	r6, [r1], -r4
   15c80:	ldrdeq	r6, [r1], -r4
   15c84:	ldrdeq	r6, [r1], -r4
   15c88:	ldrdeq	r6, [r1], -r4
   15c8c:	ldrdeq	r6, [r1], -r4
   15c90:	ldrdeq	r6, [r1], -r4
   15c94:	ldrdeq	r6, [r1], -r4
   15c98:	ldrdeq	r6, [r1], -r4
   15c9c:	ldrdeq	r6, [r1], -r4
   15ca0:	ldrdeq	r6, [r1], -r4
   15ca4:	ldrdeq	r6, [r1], -r4
   15ca8:	ldrdeq	r6, [r1], -r4
   15cac:	ldrdeq	r6, [r1], -r4
   15cb0:			; <UNDEFINED> instruction: 0x000165b4
   15cb4:			; <UNDEFINED> instruction: 0x000165b4
   15cb8:			; <UNDEFINED> instruction: 0x000165b4
   15cbc:			; <UNDEFINED> instruction: 0x000165b4
   15cc0:	andeq	r5, r1, r4, lsr pc
   15cc4:	andeq	r6, r1, r4, ror r6
   15cc8:	ldrdeq	r6, [r1], -r4
   15ccc:	ldrdeq	r6, [r1], -r4
   15cd0:	ldrdeq	r6, [r1], -r4
   15cd4:	ldrdeq	r6, [r1], -r4
   15cd8:	ldrdeq	r6, [r1], -r4
   15cdc:	ldrdeq	r6, [r1], -r4
   15ce0:	ldrdeq	r6, [r1], -r4
   15ce4:	ldrdeq	r6, [r1], -r4
   15ce8:	ldrdeq	r6, [r1], -r4
   15cec:	ldrdeq	r6, [r1], -r4
   15cf0:	ldrdeq	r6, [r1], -r4
   15cf4:	ldrdeq	r6, [r1], -r4
   15cf8:	ldrdeq	r6, [r1], -r4
   15cfc:	ldrdeq	r6, [r1], -r4
   15d00:	ldrdeq	r6, [r1], -r4
   15d04:	ldrdeq	r6, [r1], -r4
   15d08:	ldrdeq	r6, [r1], -r4
   15d0c:	ldrdeq	r6, [r1], -r4
   15d10:	ldrdeq	r6, [r1], -r4
   15d14:	ldrdeq	r6, [r1], -r4
   15d18:	ldrdeq	r6, [r1], -r4
   15d1c:	ldrdeq	r6, [r1], -r4
   15d20:	ldrdeq	r6, [r1], -r4
   15d24:	ldrdeq	r6, [r1], -r4
   15d28:	ldrdeq	r6, [r1], -r4
   15d2c:	ldrdeq	r6, [r1], -r4
   15d30:			; <UNDEFINED> instruction: 0x000165b4
   15d34:	andeq	r6, r1, ip, ror #8
   15d38:	ldrdeq	r6, [r1], -r4
   15d3c:			; <UNDEFINED> instruction: 0x000165b4
   15d40:	ldrdeq	r6, [r1], -r4
   15d44:			; <UNDEFINED> instruction: 0x000165b4
   15d48:	ldrdeq	r6, [r1], -r4
   15d4c:	ldrdeq	r6, [r1], -r4
   15d50:	ldrdeq	r6, [r1], -r4
   15d54:	ldrdeq	r6, [r1], -r4
   15d58:	ldrdeq	r6, [r1], -r4
   15d5c:	ldrdeq	r6, [r1], -r4
   15d60:	ldrdeq	r6, [r1], -r4
   15d64:	ldrdeq	r6, [r1], -r4
   15d68:	ldrdeq	r6, [r1], -r4
   15d6c:	ldrdeq	r6, [r1], -r4
   15d70:	ldrdeq	r6, [r1], -r4
   15d74:	ldrdeq	r6, [r1], -r4
   15d78:	ldrdeq	r6, [r1], -r4
   15d7c:	ldrdeq	r6, [r1], -r4
   15d80:	ldrdeq	r6, [r1], -r4
   15d84:	ldrdeq	r6, [r1], -r4
   15d88:	ldrdeq	r6, [r1], -r4
   15d8c:	ldrdeq	r6, [r1], -r4
   15d90:	ldrdeq	r6, [r1], -r4
   15d94:	ldrdeq	r6, [r1], -r4
   15d98:	ldrdeq	r6, [r1], -r4
   15d9c:	ldrdeq	r6, [r1], -r4
   15da0:	ldrdeq	r6, [r1], -r4
   15da4:	ldrdeq	r6, [r1], -r4
   15da8:	ldrdeq	r6, [r1], -r4
   15dac:	ldrdeq	r6, [r1], -r4
   15db0:	andeq	r6, r1, ip, lsr #10
   15db4:			; <UNDEFINED> instruction: 0x000165b4
   15db8:	andeq	r6, r1, ip, lsr #10
   15dbc:	andeq	r6, r1, ip, asr #10
   15dc0:	mov	r8, r9
   15dc4:	mov	r7, sl
   15dc8:	b	16cc8 <__assert_fail@plt+0x57e8>
   15dcc:	ldr	r3, [sp, #28]
   15dd0:	cmp	r3, #0
   15dd4:	bne	15df4 <__assert_fail@plt+0x4914>
   15dd8:	ldr	r3, [sp, #156]	; 0x9c
   15ddc:	tst	r3, #1
   15de0:	bne	161dc <__assert_fail@plt+0x4cfc>
   15de4:	ldr	r3, [sp, #28]
   15de8:	str	r3, [sp, #44]	; 0x2c
   15dec:	mov	r5, r3
   15df0:	b	160fc <__assert_fail@plt+0x4c1c>
   15df4:	ldr	r3, [sp, #32]
   15df8:	cmp	r3, #0
   15dfc:	bne	16c78 <__assert_fail@plt+0x5798>
   15e00:	str	r3, [sp, #44]	; 0x2c
   15e04:	ldr	r3, [sp, #36]	; 0x24
   15e08:	eor	r3, r3, #1
   15e0c:	cmp	sl, #2
   15e10:	movne	r3, #0
   15e14:	andeq	r3, r3, #1
   15e18:	cmp	r3, #0
   15e1c:	beq	15e74 <__assert_fail@plt+0x4994>
   15e20:	cmp	r9, fp
   15e24:	movhi	r2, #39	; 0x27
   15e28:	strbhi	r2, [r8, fp]
   15e2c:	add	r2, fp, #1
   15e30:	cmp	r9, r2
   15e34:	movhi	r1, #36	; 0x24
   15e38:	strbhi	r1, [r8, r2]
   15e3c:	add	r2, fp, #2
   15e40:	cmp	r9, r2
   15e44:	movhi	r1, #39	; 0x27
   15e48:	strbhi	r1, [r8, r2]
   15e4c:	add	r2, fp, #3
   15e50:	cmp	r9, r2
   15e54:	bls	16d34 <__assert_fail@plt+0x5854>
   15e58:	mov	r1, #92	; 0x5c
   15e5c:	strb	r1, [r8, r2]
   15e60:	add	fp, fp, #4
   15e64:	str	r3, [sp, #36]	; 0x24
   15e68:	mov	r5, #0
   15e6c:	mov	r4, #48	; 0x30
   15e70:	b	16148 <__assert_fail@plt+0x4c68>
   15e74:	cmp	r9, fp
   15e78:	bhi	15ea0 <__assert_fail@plt+0x49c0>
   15e7c:	add	r1, fp, #1
   15e80:	ldr	r2, [sp, #56]	; 0x38
   15e84:	cmp	r2, #0
   15e88:	bne	15ec8 <__assert_fail@plt+0x49e8>
   15e8c:	mov	r3, r5
   15e90:	ldr	r5, [sp, #56]	; 0x38
   15e94:	mov	fp, r1
   15e98:	mov	r4, #48	; 0x30
   15e9c:	b	160fc <__assert_fail@plt+0x4c1c>
   15ea0:	mov	r2, #92	; 0x5c
   15ea4:	strb	r2, [r8, fp]
   15ea8:	add	r1, fp, #1
   15eac:	ldr	r2, [sp, #56]	; 0x38
   15eb0:	cmp	r2, #0
   15eb4:	moveq	r3, r5
   15eb8:	moveq	r5, r2
   15ebc:	moveq	fp, r1
   15ec0:	moveq	r4, #48	; 0x30
   15ec4:	beq	16148 <__assert_fail@plt+0x4c68>
   15ec8:	add	r2, r6, #1
   15ecc:	ldr	r0, [sp, #24]
   15ed0:	cmp	r2, r0
   15ed4:	bcs	15ef0 <__assert_fail@plt+0x4a10>
   15ed8:	ldr	r0, [sp, #48]	; 0x30
   15edc:	ldrb	r2, [r0, r2]
   15ee0:	sub	r2, r2, #48	; 0x30
   15ee4:	uxtb	r2, r2
   15ee8:	cmp	r2, #9
   15eec:	bls	15f08 <__assert_fail@plt+0x4a28>
   15ef0:	mov	r2, r3
   15ef4:	mov	r3, r5
   15ef8:	mov	r5, r2
   15efc:	mov	fp, r1
   15f00:	mov	r4, #48	; 0x30
   15f04:	b	16120 <__assert_fail@plt+0x4c40>
   15f08:	cmp	r9, r1
   15f0c:	movhi	r2, #48	; 0x30
   15f10:	strbhi	r2, [r8, r1]
   15f14:	add	r2, fp, #2
   15f18:	cmp	r9, r2
   15f1c:	movhi	r1, #48	; 0x30
   15f20:	strbhi	r1, [r8, r2]
   15f24:	add	r1, fp, #3
   15f28:	b	15ef0 <__assert_fail@plt+0x4a10>
   15f2c:	mov	r3, #0
   15f30:	str	r3, [sp, #44]	; 0x2c
   15f34:	cmp	sl, #2
   15f38:	beq	15f54 <__assert_fail@plt+0x4a74>
   15f3c:	cmp	sl, #5
   15f40:	beq	15f6c <__assert_fail@plt+0x4a8c>
   15f44:	mov	r5, #0
   15f48:	mov	r3, r5
   15f4c:	mov	r4, #63	; 0x3f
   15f50:	b	160fc <__assert_fail@plt+0x4c1c>
   15f54:	ldr	r3, [sp, #32]
   15f58:	cmp	r3, #0
   15f5c:	bne	16c84 <__assert_fail@plt+0x57a4>
   15f60:	mov	r5, r3
   15f64:	mov	r4, #63	; 0x3f
   15f68:	b	16664 <__assert_fail@plt+0x5184>
   15f6c:	ldr	r3, [sp, #156]	; 0x9c
   15f70:	tst	r3, #4
   15f74:	beq	16a9c <__assert_fail@plt+0x55bc>
   15f78:	add	r2, r6, #2
   15f7c:	ldr	r3, [sp, #24]
   15f80:	cmp	r2, r3
   15f84:	bcs	16aac <__assert_fail@plt+0x55cc>
   15f88:	ldr	r3, [sp, #48]	; 0x30
   15f8c:	add	r3, r3, r6
   15f90:	ldrb	r4, [r3, #1]
   15f94:	cmp	r4, #63	; 0x3f
   15f98:	movne	r5, #0
   15f9c:	movne	r3, r5
   15fa0:	movne	r4, #63	; 0x3f
   15fa4:	bne	160fc <__assert_fail@plt+0x4c1c>
   15fa8:	ldr	r3, [sp, #48]	; 0x30
   15fac:	ldrb	r1, [r3, r2]
   15fb0:	sub	r3, r1, #33	; 0x21
   15fb4:	cmp	r3, #29
   15fb8:	ldrls	pc, [pc, r3, lsl #2]
   15fbc:	b	16abc <__assert_fail@plt+0x55dc>
   15fc0:	andeq	r6, r1, r8, lsr r0
   15fc4:			; <UNDEFINED> instruction: 0x00016abc
   15fc8:			; <UNDEFINED> instruction: 0x00016abc
   15fcc:			; <UNDEFINED> instruction: 0x00016abc
   15fd0:			; <UNDEFINED> instruction: 0x00016abc
   15fd4:			; <UNDEFINED> instruction: 0x00016abc
   15fd8:	andeq	r6, r1, r8, lsr r0
   15fdc:	andeq	r6, r1, r8, lsr r0
   15fe0:	andeq	r6, r1, r8, lsr r0
   15fe4:			; <UNDEFINED> instruction: 0x00016abc
   15fe8:			; <UNDEFINED> instruction: 0x00016abc
   15fec:			; <UNDEFINED> instruction: 0x00016abc
   15ff0:	andeq	r6, r1, r8, lsr r0
   15ff4:			; <UNDEFINED> instruction: 0x00016abc
   15ff8:	andeq	r6, r1, r8, lsr r0
   15ffc:			; <UNDEFINED> instruction: 0x00016abc
   16000:			; <UNDEFINED> instruction: 0x00016abc
   16004:			; <UNDEFINED> instruction: 0x00016abc
   16008:			; <UNDEFINED> instruction: 0x00016abc
   1600c:			; <UNDEFINED> instruction: 0x00016abc
   16010:			; <UNDEFINED> instruction: 0x00016abc
   16014:			; <UNDEFINED> instruction: 0x00016abc
   16018:			; <UNDEFINED> instruction: 0x00016abc
   1601c:			; <UNDEFINED> instruction: 0x00016abc
   16020:			; <UNDEFINED> instruction: 0x00016abc
   16024:			; <UNDEFINED> instruction: 0x00016abc
   16028:			; <UNDEFINED> instruction: 0x00016abc
   1602c:	andeq	r6, r1, r8, lsr r0
   16030:	andeq	r6, r1, r8, lsr r0
   16034:	andeq	r6, r1, r8, lsr r0
   16038:	ldr	r3, [sp, #32]
   1603c:	cmp	r3, #0
   16040:	bne	16d28 <__assert_fail@plt+0x5848>
   16044:	cmp	r9, fp
   16048:	movhi	r3, #63	; 0x3f
   1604c:	strbhi	r3, [r8, fp]
   16050:	add	r3, fp, #1
   16054:	cmp	r9, r3
   16058:	movhi	r0, #34	; 0x22
   1605c:	strbhi	r0, [r8, r3]
   16060:	add	r3, fp, #2
   16064:	cmp	r9, r3
   16068:	movhi	r0, #34	; 0x22
   1606c:	strbhi	r0, [r8, r3]
   16070:	add	r3, fp, #3
   16074:	cmp	r9, r3
   16078:	movhi	r0, #63	; 0x3f
   1607c:	strbhi	r0, [r8, r3]
   16080:	add	fp, fp, #4
   16084:	ldr	r3, [sp, #32]
   16088:	mov	r5, r3
   1608c:	mov	r4, r1
   16090:	mov	r6, r2
   16094:	b	160fc <__assert_fail@plt+0x4c1c>
   16098:	mov	r3, #0
   1609c:	str	r3, [sp, #44]	; 0x2c
   160a0:	mov	r4, #8
   160a4:	mov	r3, #98	; 0x62
   160a8:	b	160e8 <__assert_fail@plt+0x4c08>
   160ac:	mov	r3, #0
   160b0:	str	r3, [sp, #44]	; 0x2c
   160b4:	mov	r4, #12
   160b8:	mov	r3, #102	; 0x66
   160bc:	b	160e8 <__assert_fail@plt+0x4c08>
   160c0:	mov	r3, #0
   160c4:	str	r3, [sp, #44]	; 0x2c
   160c8:	mov	r4, #13
   160cc:	mov	r3, #114	; 0x72
   160d0:	ldr	r2, [sp, #32]
   160d4:	cmp	sl, #2
   160d8:	movne	r2, #0
   160dc:	andeq	r2, r2, #1
   160e0:	cmp	r2, #0
   160e4:	bne	16508 <__assert_fail@plt+0x5028>
   160e8:	ldr	r2, [sp, #28]
   160ec:	cmp	r2, #0
   160f0:	bne	16af0 <__assert_fail@plt+0x5610>
   160f4:	mov	r5, r2
   160f8:	mov	r3, r2
   160fc:	ldr	r2, [sp, #28]
   16100:	eor	r2, r2, #1
   16104:	cmp	sl, #2
   16108:	orreq	r2, r2, #1
   1610c:	eor	r2, r2, #1
   16110:	ldr	r1, [sp, #32]
   16114:	orr	r2, r1, r2
   16118:	tst	r2, #255	; 0xff
   1611c:	beq	16148 <__assert_fail@plt+0x4c68>
   16120:	ldr	r2, [sp, #160]	; 0xa0
   16124:	cmp	r2, #0
   16128:	beq	16148 <__assert_fail@plt+0x4c68>
   1612c:	ubfx	r1, r4, #5, #8
   16130:	and	r2, r4, #31
   16134:	ldr	r0, [sp, #160]	; 0xa0
   16138:	ldr	r1, [r0, r1, lsl #2]
   1613c:	lsr	r2, r1, r2
   16140:	tst	r2, #1
   16144:	bne	16154 <__assert_fail@plt+0x4c74>
   16148:	ldr	r2, [sp, #44]	; 0x2c
   1614c:	cmp	r2, #0
   16150:	beq	164a8 <__assert_fail@plt+0x4fc8>
   16154:	ldr	r3, [sp, #32]
   16158:	cmp	r3, #0
   1615c:	bne	16ca8 <__assert_fail@plt+0x57c8>
   16160:	ldr	r3, [sp, #36]	; 0x24
   16164:	eor	r3, r3, #1
   16168:	cmp	sl, #2
   1616c:	movne	r3, #0
   16170:	andeq	r3, r3, #1
   16174:	cmp	r3, #0
   16178:	beq	161b0 <__assert_fail@plt+0x4cd0>
   1617c:	cmp	r9, fp
   16180:	movhi	r2, #39	; 0x27
   16184:	strbhi	r2, [r8, fp]
   16188:	add	r2, fp, #1
   1618c:	cmp	r9, r2
   16190:	movhi	r1, #36	; 0x24
   16194:	strbhi	r1, [r8, r2]
   16198:	add	r2, fp, #2
   1619c:	cmp	r9, r2
   161a0:	movhi	r1, #39	; 0x27
   161a4:	strbhi	r1, [r8, r2]
   161a8:	add	fp, fp, #3
   161ac:	str	r3, [sp, #36]	; 0x24
   161b0:	cmp	r9, fp
   161b4:	movhi	r3, #92	; 0x5c
   161b8:	strbhi	r3, [r8, fp]
   161bc:	add	fp, fp, #1
   161c0:	cmp	fp, r9
   161c4:	strbcc	r4, [r8, fp]
   161c8:	add	fp, fp, #1
   161cc:	cmp	r5, #0
   161d0:	ldr	r3, [sp, #40]	; 0x28
   161d4:	moveq	r3, r5
   161d8:	str	r3, [sp, #40]	; 0x28
   161dc:	add	r6, r6, #1
   161e0:	ldr	r3, [sp, #24]
   161e4:	cmn	r3, #1
   161e8:	beq	16b18 <__assert_fail@plt+0x5638>
   161ec:	ldr	r3, [sp, #24]
   161f0:	subs	r5, r3, r6
   161f4:	movne	r5, #1
   161f8:	cmp	r5, #0
   161fc:	beq	16b2c <__assert_fail@plt+0x564c>
   16200:	ldr	r3, [sp, #28]
   16204:	cmp	sl, #2
   16208:	moveq	r3, #0
   1620c:	andne	r3, r3, #1
   16210:	str	r3, [sp, #56]	; 0x38
   16214:	ldr	r2, [sp, #52]	; 0x34
   16218:	adds	r7, r2, #0
   1621c:	movne	r7, #1
   16220:	ands	r3, r3, r7
   16224:	str	r3, [sp, #44]	; 0x2c
   16228:	bne	15b48 <__assert_fail@plt+0x4668>
   1622c:	ldr	r3, [sp, #48]	; 0x30
   16230:	ldrb	r4, [r3, r6]
   16234:	cmp	r4, #126	; 0x7e
   16238:	ldrls	pc, [pc, r4, lsl #2]
   1623c:	b	16674 <__assert_fail@plt+0x5194>
   16240:	andeq	r5, r1, ip, asr #27
   16244:	andeq	r6, r1, r4, ror r6
   16248:	andeq	r6, r1, r4, ror r6
   1624c:	andeq	r6, r1, r4, ror r6
   16250:	andeq	r6, r1, r4, ror r6
   16254:	andeq	r6, r1, r4, ror r6
   16258:	andeq	r6, r1, r4, ror r6
   1625c:	andeq	r6, r1, r4, lsl r5
   16260:	andeq	r6, r1, r0, lsr #1
   16264:	andeq	r6, r1, r4, asr #8
   16268:	andeq	r6, r1, r8, ror #9
   1626c:	andeq	r6, r1, r8, asr r4
   16270:	strheq	r6, [r1], -r4
   16274:	andeq	r6, r1, r8, asr #1
   16278:	andeq	r6, r1, r4, ror r6
   1627c:	andeq	r6, r1, r4, ror r6
   16280:	andeq	r6, r1, r4, ror r6
   16284:	andeq	r6, r1, r4, ror r6
   16288:	andeq	r6, r1, r4, ror r6
   1628c:	andeq	r6, r1, r4, ror r6
   16290:	andeq	r6, r1, r4, ror r6
   16294:	andeq	r6, r1, r4, ror r6
   16298:	andeq	r6, r1, r4, ror r6
   1629c:	andeq	r6, r1, r4, ror r6
   162a0:	andeq	r6, r1, r4, ror r6
   162a4:	andeq	r6, r1, r4, ror r6
   162a8:	andeq	r6, r1, r4, ror r6
   162ac:	andeq	r6, r1, r4, ror r6
   162b0:	andeq	r6, r1, r4, ror r6
   162b4:	andeq	r6, r1, r4, ror r6
   162b8:	andeq	r6, r1, r4, ror r6
   162bc:	andeq	r6, r1, r4, ror r6
   162c0:	muleq	r1, r0, r5
   162c4:	andeq	r6, r1, ip, lsl #11
   162c8:	andeq	r6, r1, ip, lsl #11
   162cc:	andeq	r6, r1, ip, asr #10
   162d0:	andeq	r6, r1, ip, lsl #11
   162d4:	muleq	r1, r4, sl
   162d8:	andeq	r6, r1, ip, lsl #11
   162dc:	ldrdeq	r6, [r1], -r4
   162e0:	andeq	r6, r1, ip, lsl #11
   162e4:	andeq	r6, r1, ip, lsl #11
   162e8:	andeq	r6, r1, ip, lsl #11
   162ec:	muleq	r1, r4, sl
   162f0:	muleq	r1, r4, sl
   162f4:	muleq	r1, r4, sl
   162f8:	muleq	r1, r4, sl
   162fc:	muleq	r1, r4, sl
   16300:	muleq	r1, r4, sl
   16304:	muleq	r1, r4, sl
   16308:	muleq	r1, r4, sl
   1630c:	muleq	r1, r4, sl
   16310:	muleq	r1, r4, sl
   16314:	muleq	r1, r4, sl
   16318:	muleq	r1, r4, sl
   1631c:	muleq	r1, r4, sl
   16320:	muleq	r1, r4, sl
   16324:	muleq	r1, r4, sl
   16328:	muleq	r1, r4, sl
   1632c:	andeq	r6, r1, ip, lsl #11
   16330:	andeq	r6, r1, ip, lsl #11
   16334:	andeq	r6, r1, ip, lsl #11
   16338:	andeq	r6, r1, ip, lsl #11
   1633c:	andeq	r5, r1, r4, lsr pc
   16340:	andeq	r6, r1, r4, ror r6
   16344:	muleq	r1, r4, sl
   16348:	muleq	r1, r4, sl
   1634c:	muleq	r1, r4, sl
   16350:	muleq	r1, r4, sl
   16354:	muleq	r1, r4, sl
   16358:	muleq	r1, r4, sl
   1635c:	muleq	r1, r4, sl
   16360:	muleq	r1, r4, sl
   16364:	muleq	r1, r4, sl
   16368:	muleq	r1, r4, sl
   1636c:	muleq	r1, r4, sl
   16370:	muleq	r1, r4, sl
   16374:	muleq	r1, r4, sl
   16378:	muleq	r1, r4, sl
   1637c:	muleq	r1, r4, sl
   16380:	muleq	r1, r4, sl
   16384:	muleq	r1, r4, sl
   16388:	muleq	r1, r4, sl
   1638c:	muleq	r1, r4, sl
   16390:	muleq	r1, r4, sl
   16394:	muleq	r1, r4, sl
   16398:	muleq	r1, r4, sl
   1639c:	muleq	r1, r4, sl
   163a0:	muleq	r1, r4, sl
   163a4:	muleq	r1, r4, sl
   163a8:	muleq	r1, r4, sl
   163ac:	andeq	r6, r1, ip, lsl #11
   163b0:	andeq	r6, r1, ip, ror #8
   163b4:	muleq	r1, r4, sl
   163b8:	andeq	r6, r1, ip, lsl #11
   163bc:	muleq	r1, r4, sl
   163c0:	andeq	r6, r1, ip, lsl #11
   163c4:	muleq	r1, r4, sl
   163c8:	muleq	r1, r4, sl
   163cc:	muleq	r1, r4, sl
   163d0:	muleq	r1, r4, sl
   163d4:	muleq	r1, r4, sl
   163d8:	muleq	r1, r4, sl
   163dc:	muleq	r1, r4, sl
   163e0:	muleq	r1, r4, sl
   163e4:	muleq	r1, r4, sl
   163e8:	muleq	r1, r4, sl
   163ec:	muleq	r1, r4, sl
   163f0:	muleq	r1, r4, sl
   163f4:	muleq	r1, r4, sl
   163f8:	muleq	r1, r4, sl
   163fc:	muleq	r1, r4, sl
   16400:	muleq	r1, r4, sl
   16404:	muleq	r1, r4, sl
   16408:	muleq	r1, r4, sl
   1640c:	muleq	r1, r4, sl
   16410:	muleq	r1, r4, sl
   16414:	muleq	r1, r4, sl
   16418:	muleq	r1, r4, sl
   1641c:	muleq	r1, r4, sl
   16420:	muleq	r1, r4, sl
   16424:	muleq	r1, r4, sl
   16428:	muleq	r1, r4, sl
   1642c:	andeq	r6, r1, ip, lsr #10
   16430:	andeq	r6, r1, ip, lsl #11
   16434:	andeq	r6, r1, ip, lsr #10
   16438:	andeq	r6, r1, ip, asr #10
   1643c:	mov	r3, #0
   16440:	str	r3, [sp, #44]	; 0x2c
   16444:	mov	r4, #9
   16448:	mov	r3, #116	; 0x74
   1644c:	b	160d0 <__assert_fail@plt+0x4bf0>
   16450:	mov	r3, #0
   16454:	str	r3, [sp, #44]	; 0x2c
   16458:	mov	r4, #11
   1645c:	mov	r3, #118	; 0x76
   16460:	b	160e8 <__assert_fail@plt+0x4c08>
   16464:	mov	r3, #0
   16468:	str	r3, [sp, #44]	; 0x2c
   1646c:	cmp	sl, #2
   16470:	beq	16494 <__assert_fail@plt+0x4fb4>
   16474:	ldr	r3, [sp, #28]
   16478:	ldr	r2, [sp, #32]
   1647c:	and	r3, r3, r2
   16480:	tst	r7, r3
   16484:	bne	16b08 <__assert_fail@plt+0x5628>
   16488:	mov	r4, #92	; 0x5c
   1648c:	mov	r3, r4
   16490:	b	160e8 <__assert_fail@plt+0x4c08>
   16494:	ldr	r3, [sp, #32]
   16498:	cmp	r3, #0
   1649c:	bne	16c90 <__assert_fail@plt+0x57b0>
   164a0:	mov	r5, r3
   164a4:	mov	r4, #92	; 0x5c
   164a8:	eor	r3, r3, #1
   164ac:	ldr	r2, [sp, #36]	; 0x24
   164b0:	and	r3, r3, r2
   164b4:	tst	r3, #255	; 0xff
   164b8:	beq	161c0 <__assert_fail@plt+0x4ce0>
   164bc:	cmp	r9, fp
   164c0:	movhi	r3, #39	; 0x27
   164c4:	strbhi	r3, [r8, fp]
   164c8:	add	r3, fp, #1
   164cc:	cmp	r9, r3
   164d0:	movhi	r2, #39	; 0x27
   164d4:	strbhi	r2, [r8, r3]
   164d8:	add	fp, fp, #2
   164dc:	mov	r3, #0
   164e0:	str	r3, [sp, #36]	; 0x24
   164e4:	b	161c0 <__assert_fail@plt+0x4ce0>
   164e8:	mov	r3, #110	; 0x6e
   164ec:	b	160d0 <__assert_fail@plt+0x4bf0>
   164f0:	mov	r3, #110	; 0x6e
   164f4:	b	160d0 <__assert_fail@plt+0x4bf0>
   164f8:	mov	r3, #0
   164fc:	str	r3, [sp, #44]	; 0x2c
   16500:	mov	r3, #110	; 0x6e
   16504:	b	160d0 <__assert_fail@plt+0x4bf0>
   16508:	mov	r8, r9
   1650c:	mov	r7, #2
   16510:	b	16cb0 <__assert_fail@plt+0x57d0>
   16514:	mov	r3, #97	; 0x61
   16518:	b	160e8 <__assert_fail@plt+0x4c08>
   1651c:	mov	r3, #97	; 0x61
   16520:	b	160e8 <__assert_fail@plt+0x4c08>
   16524:	mov	r3, #0
   16528:	str	r3, [sp, #44]	; 0x2c
   1652c:	ldr	r3, [sp, #24]
   16530:	cmn	r3, #1
   16534:	beq	16560 <__assert_fail@plt+0x5080>
   16538:	ldr	r3, [sp, #24]
   1653c:	subs	r3, r3, #1
   16540:	movne	r3, #1
   16544:	cmp	r3, #0
   16548:	bne	16ac8 <__assert_fail@plt+0x55e8>
   1654c:	cmp	r6, #0
   16550:	beq	16590 <__assert_fail@plt+0x50b0>
   16554:	mov	r5, #0
   16558:	mov	r3, r5
   1655c:	b	160fc <__assert_fail@plt+0x4c1c>
   16560:	ldr	r3, [sp, #48]	; 0x30
   16564:	ldrb	r3, [r3, #1]
   16568:	adds	r3, r3, #0
   1656c:	movne	r3, #1
   16570:	b	16544 <__assert_fail@plt+0x5064>
   16574:	mov	r3, #0
   16578:	str	r3, [sp, #44]	; 0x2c
   1657c:	b	1654c <__assert_fail@plt+0x506c>
   16580:	mov	r3, #0
   16584:	str	r3, [sp, #44]	; 0x2c
   16588:	b	16590 <__assert_fail@plt+0x50b0>
   1658c:	ldr	r5, [sp, #44]	; 0x2c
   16590:	ldr	r3, [sp, #32]
   16594:	cmp	sl, #2
   16598:	movne	r3, #0
   1659c:	andeq	r3, r3, #1
   165a0:	cmp	r3, #0
   165a4:	beq	160fc <__assert_fail@plt+0x4c1c>
   165a8:	mov	r8, r9
   165ac:	mov	r7, #2
   165b0:	b	16cb0 <__assert_fail@plt+0x57d0>
   165b4:	ldr	r5, [sp, #32]
   165b8:	b	16590 <__assert_fail@plt+0x50b0>
   165bc:	mov	r3, #0
   165c0:	str	r3, [sp, #44]	; 0x2c
   165c4:	mov	r5, r3
   165c8:	b	16590 <__assert_fail@plt+0x50b0>
   165cc:	mov	r3, #0
   165d0:	str	r3, [sp, #44]	; 0x2c
   165d4:	cmp	sl, #2
   165d8:	strne	r5, [sp, #68]	; 0x44
   165dc:	movne	r3, #0
   165e0:	movne	r4, #39	; 0x27
   165e4:	bne	160fc <__assert_fail@plt+0x4c1c>
   165e8:	ldr	r3, [sp, #32]
   165ec:	cmp	r3, #0
   165f0:	bne	16c9c <__assert_fail@plt+0x57bc>
   165f4:	ldr	r3, [sp, #72]	; 0x48
   165f8:	clz	r3, r3
   165fc:	lsr	r3, r3, #5
   16600:	cmp	r9, #0
   16604:	moveq	r3, #0
   16608:	cmp	r3, #0
   1660c:	movne	r3, #0
   16610:	bne	16638 <__assert_fail@plt+0x5158>
   16614:	cmp	r9, fp
   16618:	movhi	r3, #39	; 0x27
   1661c:	strbhi	r3, [r8, fp]
   16620:	add	r3, fp, #1
   16624:	cmp	r9, r3
   16628:	movhi	r2, #92	; 0x5c
   1662c:	strbhi	r2, [r8, r3]
   16630:	mov	r3, r9
   16634:	ldr	r9, [sp, #72]	; 0x48
   16638:	add	r2, fp, #2
   1663c:	cmp	r2, r3
   16640:	movcc	r1, #39	; 0x27
   16644:	strbcc	r1, [r8, r2]
   16648:	add	fp, fp, #3
   1664c:	str	r5, [sp, #68]	; 0x44
   16650:	ldr	r2, [sp, #32]
   16654:	str	r2, [sp, #36]	; 0x24
   16658:	str	r9, [sp, #72]	; 0x48
   1665c:	mov	r9, r3
   16660:	mov	r4, #39	; 0x27
   16664:	mov	r3, #0
   16668:	b	16148 <__assert_fail@plt+0x4c68>
   1666c:	mov	r3, #0
   16670:	str	r3, [sp, #44]	; 0x2c
   16674:	ldr	r7, [sp, #76]	; 0x4c
   16678:	cmp	r7, #1
   1667c:	bne	166b4 <__assert_fail@plt+0x51d4>
   16680:	bl	1133c <__ctype_b_loc@plt>
   16684:	ldr	r2, [r0]
   16688:	lsl	r3, r4, #1
   1668c:	ldrh	r5, [r2, r3]
   16690:	ubfx	r5, r5, #14, #1
   16694:	mov	ip, r7
   16698:	eor	r3, r5, #1
   1669c:	ldr	r2, [sp, #28]
   166a0:	and	r3, r3, r2
   166a4:	ands	r3, r3, #255	; 0xff
   166a8:	beq	160fc <__assert_fail@plt+0x4c1c>
   166ac:	mov	r5, #0
   166b0:	b	16910 <__assert_fail@plt+0x5430>
   166b4:	mov	r2, #0
   166b8:	mov	r3, #0
   166bc:	strd	r2, [sp, #104]	; 0x68
   166c0:	ldr	r3, [sp, #24]
   166c4:	cmn	r3, #1
   166c8:	beq	166ec <__assert_fail@plt+0x520c>
   166cc:	mov	r3, #0
   166d0:	str	r4, [sp, #88]	; 0x58
   166d4:	str	fp, [sp, #92]	; 0x5c
   166d8:	str	r8, [sp, #56]	; 0x38
   166dc:	mov	r8, r3
   166e0:	str	r9, [sp, #84]	; 0x54
   166e4:	ldr	r9, [sp, #48]	; 0x30
   166e8:	b	16838 <__assert_fail@plt+0x5358>
   166ec:	ldr	r0, [sp, #48]	; 0x30
   166f0:	bl	11354 <strlen@plt>
   166f4:	str	r0, [sp, #24]
   166f8:	b	166cc <__assert_fail@plt+0x51ec>
   166fc:	mov	r1, fp
   16700:	ldr	r4, [sp, #88]	; 0x58
   16704:	mov	r2, r8
   16708:	mov	ip, r8
   1670c:	ldr	fp, [sp, #92]	; 0x5c
   16710:	ldr	r8, [sp, #56]	; 0x38
   16714:	ldr	r9, [sp, #84]	; 0x54
   16718:	ldr	r0, [sp, #24]
   1671c:	cmp	r7, r0
   16720:	bcs	168d8 <__assert_fail@plt+0x53f8>
   16724:	ldrb	r3, [r1]
   16728:	cmp	r3, #0
   1672c:	beq	168e0 <__assert_fail@plt+0x5400>
   16730:	mov	r3, r1
   16734:	add	r2, r2, #1
   16738:	add	r1, r6, r2
   1673c:	cmp	r0, r1
   16740:	bls	168e8 <__assert_fail@plt+0x5408>
   16744:	ldrb	r1, [r3, #1]!
   16748:	cmp	r1, #0
   1674c:	bne	16734 <__assert_fail@plt+0x5254>
   16750:	mov	ip, r2
   16754:	mov	r5, #0
   16758:	b	16908 <__assert_fail@plt+0x5428>
   1675c:	ldr	r3, [sp, #56]	; 0x38
   16760:	str	r3, [sp, #64]	; 0x40
   16764:	ldr	r8, [sp, #84]	; 0x54
   16768:	mov	r7, #2
   1676c:	b	16cb0 <__assert_fail@plt+0x57d0>
   16770:	cmp	r2, r7
   16774:	beq	16814 <__assert_fail@plt+0x5334>
   16778:	ldrb	r3, [r2], #1
   1677c:	sub	r3, r3, #91	; 0x5b
   16780:	cmp	r3, #33	; 0x21
   16784:	ldrls	pc, [pc, r3, lsl #2]
   16788:	b	16770 <__assert_fail@plt+0x5290>
   1678c:	andeq	r6, r1, ip, asr r7
   16790:	andeq	r6, r1, ip, asr r7
   16794:	andeq	r6, r1, r0, ror r7
   16798:	andeq	r6, r1, ip, asr r7
   1679c:	andeq	r6, r1, r0, ror r7
   167a0:	andeq	r6, r1, ip, asr r7
   167a4:	andeq	r6, r1, r0, ror r7
   167a8:	andeq	r6, r1, r0, ror r7
   167ac:	andeq	r6, r1, r0, ror r7
   167b0:	andeq	r6, r1, r0, ror r7
   167b4:	andeq	r6, r1, r0, ror r7
   167b8:	andeq	r6, r1, r0, ror r7
   167bc:	andeq	r6, r1, r0, ror r7
   167c0:	andeq	r6, r1, r0, ror r7
   167c4:	andeq	r6, r1, r0, ror r7
   167c8:	andeq	r6, r1, r0, ror r7
   167cc:	andeq	r6, r1, r0, ror r7
   167d0:	andeq	r6, r1, r0, ror r7
   167d4:	andeq	r6, r1, r0, ror r7
   167d8:	andeq	r6, r1, r0, ror r7
   167dc:	andeq	r6, r1, r0, ror r7
   167e0:	andeq	r6, r1, r0, ror r7
   167e4:	andeq	r6, r1, r0, ror r7
   167e8:	andeq	r6, r1, r0, ror r7
   167ec:	andeq	r6, r1, r0, ror r7
   167f0:	andeq	r6, r1, r0, ror r7
   167f4:	andeq	r6, r1, r0, ror r7
   167f8:	andeq	r6, r1, r0, ror r7
   167fc:	andeq	r6, r1, r0, ror r7
   16800:	andeq	r6, r1, r0, ror r7
   16804:	andeq	r6, r1, r0, ror r7
   16808:	andeq	r6, r1, r0, ror r7
   1680c:	andeq	r6, r1, r0, ror r7
   16810:	andeq	r6, r1, ip, asr r7
   16814:	ldr	r0, [sp, #100]	; 0x64
   16818:	bl	11258 <iswprint@plt>
   1681c:	cmp	r0, #0
   16820:	moveq	r5, #0
   16824:	add	r8, r8, r4
   16828:	add	r0, sp, #104	; 0x68
   1682c:	bl	111e0 <mbsinit@plt>
   16830:	cmp	r0, #0
   16834:	bne	168a4 <__assert_fail@plt+0x53c4>
   16838:	add	r7, r6, r8
   1683c:	add	fp, r9, r7
   16840:	add	r3, sp, #104	; 0x68
   16844:	ldr	r2, [sp, #24]
   16848:	sub	r2, r2, r7
   1684c:	mov	r1, fp
   16850:	add	r0, sp, #100	; 0x64
   16854:	bl	19200 <__assert_fail@plt+0x7d20>
   16858:	subs	r4, r0, #0
   1685c:	beq	168f4 <__assert_fail@plt+0x5414>
   16860:	cmn	r4, #1
   16864:	beq	168bc <__assert_fail@plt+0x53dc>
   16868:	cmn	r4, #2
   1686c:	beq	166fc <__assert_fail@plt+0x521c>
   16870:	ldr	r3, [sp, #32]
   16874:	cmp	sl, #2
   16878:	movne	r3, #0
   1687c:	andeq	r3, r3, #1
   16880:	cmp	r3, #0
   16884:	beq	16814 <__assert_fail@plt+0x5334>
   16888:	cmp	r4, #1
   1688c:	bls	16814 <__assert_fail@plt+0x5334>
   16890:	add	r2, r7, #1
   16894:	add	r2, r9, r2
   16898:	add	r3, r9, r4
   1689c:	add	r7, r3, r7
   168a0:	b	16778 <__assert_fail@plt+0x5298>
   168a4:	ldr	r4, [sp, #88]	; 0x58
   168a8:	mov	ip, r8
   168ac:	ldr	fp, [sp, #92]	; 0x5c
   168b0:	ldr	r8, [sp, #56]	; 0x38
   168b4:	ldr	r9, [sp, #84]	; 0x54
   168b8:	b	16908 <__assert_fail@plt+0x5428>
   168bc:	ldr	r4, [sp, #88]	; 0x58
   168c0:	mov	ip, r8
   168c4:	ldr	fp, [sp, #92]	; 0x5c
   168c8:	ldr	r8, [sp, #56]	; 0x38
   168cc:	ldr	r9, [sp, #84]	; 0x54
   168d0:	mov	r5, #0
   168d4:	b	16908 <__assert_fail@plt+0x5428>
   168d8:	mov	r5, #0
   168dc:	b	16908 <__assert_fail@plt+0x5428>
   168e0:	mov	r5, #0
   168e4:	b	16908 <__assert_fail@plt+0x5428>
   168e8:	mov	ip, r2
   168ec:	mov	r5, #0
   168f0:	b	16908 <__assert_fail@plt+0x5428>
   168f4:	ldr	r4, [sp, #88]	; 0x58
   168f8:	mov	ip, r8
   168fc:	ldr	fp, [sp, #92]	; 0x5c
   16900:	ldr	r8, [sp, #56]	; 0x38
   16904:	ldr	r9, [sp, #84]	; 0x54
   16908:	cmp	ip, #1
   1690c:	bls	16698 <__assert_fail@plt+0x51b8>
   16910:	add	lr, r6, ip
   16914:	ldr	r3, [sp, #48]	; 0x30
   16918:	add	r1, r3, r6
   1691c:	mov	r3, #0
   16920:	eor	r0, r5, #1
   16924:	ldr	r2, [sp, #28]
   16928:	and	r0, r0, r2
   1692c:	uxtb	r0, r0
   16930:	str	r0, [sp, #56]	; 0x38
   16934:	mov	r7, #92	; 0x5c
   16938:	ldr	ip, [sp, #36]	; 0x24
   1693c:	str	r5, [sp, #84]	; 0x54
   16940:	ldr	r2, [sp, #44]	; 0x2c
   16944:	b	169b4 <__assert_fail@plt+0x54d4>
   16948:	cmp	r2, #0
   1694c:	beq	1695c <__assert_fail@plt+0x547c>
   16950:	cmp	r9, fp
   16954:	strbhi	r7, [r8, fp]
   16958:	add	fp, fp, #1
   1695c:	add	r5, r6, #1
   16960:	cmp	r5, lr
   16964:	bcs	16a70 <__assert_fail@plt+0x5590>
   16968:	eor	r2, r3, #1
   1696c:	and	r2, r2, ip
   16970:	ands	r2, r2, #255	; 0xff
   16974:	beq	16a8c <__assert_fail@plt+0x55ac>
   16978:	cmp	r9, fp
   1697c:	movhi	r2, #39	; 0x27
   16980:	strbhi	r2, [r8, fp]
   16984:	add	r2, fp, #1
   16988:	cmp	r9, r2
   1698c:	movhi	ip, #39	; 0x27
   16990:	strbhi	ip, [r8, r2]
   16994:	add	fp, fp, #2
   16998:	ldr	ip, [sp, #56]	; 0x38
   1699c:	mov	r2, ip
   169a0:	mov	r6, r5
   169a4:	cmp	r9, fp
   169a8:	strbhi	r4, [r8, fp]
   169ac:	add	fp, fp, #1
   169b0:	ldrb	r4, [r1, #1]!
   169b4:	cmp	r0, #0
   169b8:	beq	16948 <__assert_fail@plt+0x5468>
   169bc:	ldr	r3, [sp, #32]
   169c0:	cmp	r3, #0
   169c4:	bne	16c58 <__assert_fail@plt+0x5778>
   169c8:	eor	r3, ip, #1
   169cc:	cmp	sl, #2
   169d0:	movne	r3, #0
   169d4:	andeq	r3, r3, #1
   169d8:	cmp	r3, #0
   169dc:	beq	16a14 <__assert_fail@plt+0x5534>
   169e0:	cmp	r9, fp
   169e4:	movhi	ip, #39	; 0x27
   169e8:	strbhi	ip, [r8, fp]
   169ec:	add	ip, fp, #1
   169f0:	cmp	r9, ip
   169f4:	movhi	r5, #36	; 0x24
   169f8:	strbhi	r5, [r8, ip]
   169fc:	add	ip, fp, #2
   16a00:	cmp	r9, ip
   16a04:	movhi	r5, #39	; 0x27
   16a08:	strbhi	r5, [r8, ip]
   16a0c:	add	fp, fp, #3
   16a10:	mov	ip, r3
   16a14:	cmp	r9, fp
   16a18:	strbhi	r7, [r8, fp]
   16a1c:	add	r3, fp, #1
   16a20:	cmp	r9, r3
   16a24:	bls	16a34 <__assert_fail@plt+0x5554>
   16a28:	lsr	r5, r4, #6
   16a2c:	add	r5, r5, #48	; 0x30
   16a30:	strb	r5, [r8, r3]
   16a34:	add	r3, fp, #2
   16a38:	cmp	r9, r3
   16a3c:	bls	16a4c <__assert_fail@plt+0x556c>
   16a40:	ubfx	r5, r4, #3, #3
   16a44:	add	r5, r5, #48	; 0x30
   16a48:	strb	r5, [r8, r3]
   16a4c:	add	fp, fp, #3
   16a50:	and	r4, r4, #7
   16a54:	add	r4, r4, #48	; 0x30
   16a58:	add	r5, r6, #1
   16a5c:	cmp	r5, lr
   16a60:	bcs	16a7c <__assert_fail@plt+0x559c>
   16a64:	ldr	r3, [sp, #56]	; 0x38
   16a68:	mov	r6, r5
   16a6c:	b	169a4 <__assert_fail@plt+0x54c4>
   16a70:	str	ip, [sp, #36]	; 0x24
   16a74:	ldr	r5, [sp, #84]	; 0x54
   16a78:	b	164a8 <__assert_fail@plt+0x4fc8>
   16a7c:	str	ip, [sp, #36]	; 0x24
   16a80:	ldr	r5, [sp, #84]	; 0x54
   16a84:	mov	r3, r0
   16a88:	b	164a8 <__assert_fail@plt+0x4fc8>
   16a8c:	mov	r6, r5
   16a90:	b	169a4 <__assert_fail@plt+0x54c4>
   16a94:	ldr	r3, [sp, #44]	; 0x2c
   16a98:	b	160fc <__assert_fail@plt+0x4c1c>
   16a9c:	mov	r5, #0
   16aa0:	mov	r3, r5
   16aa4:	mov	r4, #63	; 0x3f
   16aa8:	b	160fc <__assert_fail@plt+0x4c1c>
   16aac:	mov	r5, #0
   16ab0:	mov	r3, r5
   16ab4:	mov	r4, #63	; 0x3f
   16ab8:	b	160fc <__assert_fail@plt+0x4c1c>
   16abc:	mov	r5, #0
   16ac0:	mov	r3, r5
   16ac4:	b	160fc <__assert_fail@plt+0x4c1c>
   16ac8:	mov	r5, #0
   16acc:	mov	r3, r5
   16ad0:	b	160fc <__assert_fail@plt+0x4c1c>
   16ad4:	ldr	r5, [sp, #44]	; 0x2c
   16ad8:	ldr	r3, [sp, #32]
   16adc:	b	160fc <__assert_fail@plt+0x4c1c>
   16ae0:	ldr	r5, [sp, #44]	; 0x2c
   16ae4:	mov	r3, #0
   16ae8:	str	r3, [sp, #44]	; 0x2c
   16aec:	b	160fc <__assert_fail@plt+0x4c1c>
   16af0:	mov	r4, r3
   16af4:	mov	r5, #0
   16af8:	b	16154 <__assert_fail@plt+0x4c74>
   16afc:	mov	r5, #0
   16b00:	mov	r4, #97	; 0x61
   16b04:	b	16154 <__assert_fail@plt+0x4c74>
   16b08:	mov	r5, #0
   16b0c:	mov	r3, r5
   16b10:	mov	r4, #92	; 0x5c
   16b14:	b	164a8 <__assert_fail@plt+0x4fc8>
   16b18:	ldr	r3, [sp, #48]	; 0x30
   16b1c:	ldrb	r5, [r3, r6]
   16b20:	adds	r5, r5, #0
   16b24:	movne	r5, #1
   16b28:	b	161f8 <__assert_fail@plt+0x4d18>
   16b2c:	cmp	sl, #2
   16b30:	movne	r3, #0
   16b34:	moveq	r3, #1
   16b38:	ldr	r1, [sp, #32]
   16b3c:	cmp	fp, #0
   16b40:	andeq	r2, r3, r1
   16b44:	movne	r2, #0
   16b48:	cmp	r2, #0
   16b4c:	bne	16c6c <__assert_fail@plt+0x578c>
   16b50:	eor	r2, r1, #1
   16b54:	uxtb	r2, r2
   16b58:	and	r3, r3, r2
   16b5c:	ldr	r1, [sp, #68]	; 0x44
   16b60:	ands	r3, r1, r3
   16b64:	beq	16bf8 <__assert_fail@plt+0x5718>
   16b68:	ldr	r2, [sp, #40]	; 0x28
   16b6c:	cmp	r2, #0
   16b70:	bne	16ba8 <__assert_fail@plt+0x56c8>
   16b74:	ldr	r2, [sp, #72]	; 0x48
   16b78:	adds	r2, r2, #0
   16b7c:	movne	r2, #1
   16b80:	cmp	r9, #0
   16b84:	movne	r2, #0
   16b88:	str	r2, [sp, #68]	; 0x44
   16b8c:	mov	sl, #2
   16b90:	ldr	r1, [sp, #40]	; 0x28
   16b94:	str	r1, [sp, #32]
   16b98:	cmp	r2, #0
   16b9c:	beq	16bec <__assert_fail@plt+0x570c>
   16ba0:	ldr	r9, [sp, #72]	; 0x48
   16ba4:	b	15900 <__assert_fail@plt+0x4420>
   16ba8:	ldr	r3, [sp, #168]	; 0xa8
   16bac:	str	r3, [sp, #16]
   16bb0:	ldr	r3, [sp, #164]	; 0xa4
   16bb4:	str	r3, [sp, #12]
   16bb8:	ldr	r3, [sp, #160]	; 0xa0
   16bbc:	str	r3, [sp, #8]
   16bc0:	ldr	r3, [sp, #156]	; 0x9c
   16bc4:	str	r3, [sp, #4]
   16bc8:	mov	r3, #5
   16bcc:	str	r3, [sp]
   16bd0:	ldr	r3, [sp, #24]
   16bd4:	ldr	r2, [sp, #48]	; 0x30
   16bd8:	ldr	r1, [sp, #72]	; 0x48
   16bdc:	ldr	r0, [sp, #64]	; 0x40
   16be0:	bl	15888 <__assert_fail@plt+0x43a8>
   16be4:	mov	fp, r0
   16be8:	b	16d08 <__assert_fail@plt+0x5828>
   16bec:	mov	r8, r9
   16bf0:	mov	r2, r3
   16bf4:	b	16bfc <__assert_fail@plt+0x571c>
   16bf8:	mov	r8, r9
   16bfc:	ldr	r3, [sp, #60]	; 0x3c
   16c00:	cmp	r3, #0
   16c04:	moveq	r2, #0
   16c08:	andne	r2, r2, #1
   16c0c:	cmp	r2, #0
   16c10:	beq	16c40 <__assert_fail@plt+0x5760>
   16c14:	mov	r2, r3
   16c18:	ldrb	r3, [r3]
   16c1c:	cmp	r3, #0
   16c20:	beq	16c40 <__assert_fail@plt+0x5760>
   16c24:	ldr	r1, [sp, #64]	; 0x40
   16c28:	cmp	r8, fp
   16c2c:	strbhi	r3, [r1, fp]
   16c30:	add	fp, fp, #1
   16c34:	ldrb	r3, [r2, #1]!
   16c38:	cmp	r3, #0
   16c3c:	bne	16c28 <__assert_fail@plt+0x5748>
   16c40:	cmp	r8, fp
   16c44:	bls	16d08 <__assert_fail@plt+0x5828>
   16c48:	mov	r3, #0
   16c4c:	ldr	r2, [sp, #64]	; 0x40
   16c50:	strb	r3, [r2, fp]
   16c54:	b	16d08 <__assert_fail@plt+0x5828>
   16c58:	mov	r8, r9
   16c5c:	mov	r7, sl
   16c60:	ldr	r3, [sp, #32]
   16c64:	str	r3, [sp, #28]
   16c68:	b	16cb0 <__assert_fail@plt+0x57d0>
   16c6c:	mov	r8, r9
   16c70:	mov	r7, #2
   16c74:	b	16cb0 <__assert_fail@plt+0x57d0>
   16c78:	mov	r8, r9
   16c7c:	mov	r7, sl
   16c80:	b	16cb0 <__assert_fail@plt+0x57d0>
   16c84:	mov	r8, r9
   16c88:	mov	r7, sl
   16c8c:	b	16cb0 <__assert_fail@plt+0x57d0>
   16c90:	mov	r8, r9
   16c94:	mov	r7, sl
   16c98:	b	16cb0 <__assert_fail@plt+0x57d0>
   16c9c:	mov	r8, r9
   16ca0:	mov	r7, sl
   16ca4:	b	16cb0 <__assert_fail@plt+0x57d0>
   16ca8:	mov	r8, r9
   16cac:	mov	r7, sl
   16cb0:	ldr	r3, [sp, #28]
   16cb4:	cmp	r7, #2
   16cb8:	movne	r3, #0
   16cbc:	andeq	r3, r3, #1
   16cc0:	cmp	r3, #0
   16cc4:	movne	r7, #4
   16cc8:	ldr	r3, [sp, #168]	; 0xa8
   16ccc:	str	r3, [sp, #16]
   16cd0:	ldr	r3, [sp, #164]	; 0xa4
   16cd4:	str	r3, [sp, #12]
   16cd8:	mov	r3, #0
   16cdc:	str	r3, [sp, #8]
   16ce0:	ldr	r3, [sp, #156]	; 0x9c
   16ce4:	bic	r3, r3, #2
   16ce8:	str	r3, [sp, #4]
   16cec:	str	r7, [sp]
   16cf0:	ldr	r3, [sp, #24]
   16cf4:	ldr	r2, [sp, #48]	; 0x30
   16cf8:	mov	r1, r8
   16cfc:	ldr	r0, [sp, #64]	; 0x40
   16d00:	bl	15888 <__assert_fail@plt+0x43a8>
   16d04:	mov	fp, r0
   16d08:	mov	r0, fp
   16d0c:	add	sp, sp, #116	; 0x74
   16d10:	ldrd	r4, [sp]
   16d14:	ldrd	r6, [sp, #8]
   16d18:	ldrd	r8, [sp, #16]
   16d1c:	ldrd	sl, [sp, #24]
   16d20:	add	sp, sp, #32
   16d24:	pop	{pc}		; (ldr pc, [sp], #4)
   16d28:	mov	r8, r9
   16d2c:	mov	r7, sl
   16d30:	b	16cc8 <__assert_fail@plt+0x57e8>
   16d34:	add	fp, fp, #4
   16d38:	str	r3, [sp, #36]	; 0x24
   16d3c:	mov	r5, #0
   16d40:	mov	r4, #48	; 0x30
   16d44:	b	160fc <__assert_fail@plt+0x4c1c>
   16d48:	mov	r3, #1
   16d4c:	str	r3, [sp, #32]
   16d50:	str	r3, [sp, #28]
   16d54:	str	r3, [sp, #52]	; 0x34
   16d58:	movw	r3, #39772	; 0x9b5c
   16d5c:	movt	r3, #1
   16d60:	str	r3, [sp, #60]	; 0x3c
   16d64:	mov	fp, #0
   16d68:	mov	sl, #5
   16d6c:	b	15960 <__assert_fail@plt+0x4480>
   16d70:	ldr	r3, [sp, #48]	; 0x30
   16d74:	ldrb	r4, [r3, r6]
   16d78:	cmp	r4, #126	; 0x7e
   16d7c:	ldrls	pc, [pc, r4, lsl #2]
   16d80:	b	1666c <__assert_fail@plt+0x518c>
   16d84:	strdeq	r5, [r1], -r4
   16d88:	andeq	r6, r1, ip, ror #12
   16d8c:	andeq	r6, r1, ip, ror #12
   16d90:	andeq	r6, r1, ip, ror #12
   16d94:	andeq	r6, r1, ip, ror #12
   16d98:	andeq	r6, r1, ip, ror #12
   16d9c:	andeq	r6, r1, ip, ror #12
   16da0:	strdeq	r6, [r1], -ip
   16da4:	muleq	r1, r8, r0
   16da8:	andeq	r6, r1, ip, lsr r4
   16dac:	strdeq	r6, [r1], -r8
   16db0:	andeq	r6, r1, r0, asr r4
   16db4:	andeq	r6, r1, ip, lsr #1
   16db8:	andeq	r6, r1, r0, asr #1
   16dbc:	andeq	r6, r1, ip, ror #12
   16dc0:	andeq	r6, r1, ip, ror #12
   16dc4:	andeq	r6, r1, ip, ror #12
   16dc8:	andeq	r6, r1, ip, ror #12
   16dcc:	andeq	r6, r1, ip, ror #12
   16dd0:	andeq	r6, r1, ip, ror #12
   16dd4:	andeq	r6, r1, ip, ror #12
   16dd8:	andeq	r6, r1, ip, ror #12
   16ddc:	andeq	r6, r1, ip, ror #12
   16de0:	andeq	r6, r1, ip, ror #12
   16de4:	andeq	r6, r1, ip, ror #12
   16de8:	andeq	r6, r1, ip, ror #12
   16dec:	andeq	r6, r1, ip, ror #12
   16df0:	andeq	r6, r1, ip, ror #12
   16df4:	andeq	r6, r1, ip, ror #12
   16df8:	andeq	r6, r1, ip, ror #12
   16dfc:	andeq	r6, r1, ip, ror #12
   16e00:	andeq	r6, r1, ip, ror #12
   16e04:	andeq	r6, r1, r0, lsl #11
   16e08:			; <UNDEFINED> instruction: 0x000165bc
   16e0c:			; <UNDEFINED> instruction: 0x000165bc
   16e10:	andeq	r6, r1, r4, ror r5
   16e14:			; <UNDEFINED> instruction: 0x000165bc
   16e18:	andeq	r6, r1, r0, ror #21
   16e1c:			; <UNDEFINED> instruction: 0x000165bc
   16e20:	andeq	r6, r1, ip, asr #11
   16e24:			; <UNDEFINED> instruction: 0x000165bc
   16e28:			; <UNDEFINED> instruction: 0x000165bc
   16e2c:			; <UNDEFINED> instruction: 0x000165bc
   16e30:	andeq	r6, r1, r0, ror #21
   16e34:	andeq	r6, r1, r0, ror #21
   16e38:	andeq	r6, r1, r0, ror #21
   16e3c:	andeq	r6, r1, r0, ror #21
   16e40:	andeq	r6, r1, r0, ror #21
   16e44:	andeq	r6, r1, r0, ror #21
   16e48:	andeq	r6, r1, r0, ror #21
   16e4c:	andeq	r6, r1, r0, ror #21
   16e50:	andeq	r6, r1, r0, ror #21
   16e54:	andeq	r6, r1, r0, ror #21
   16e58:	andeq	r6, r1, r0, ror #21
   16e5c:	andeq	r6, r1, r0, ror #21
   16e60:	andeq	r6, r1, r0, ror #21
   16e64:	andeq	r6, r1, r0, ror #21
   16e68:	andeq	r6, r1, r0, ror #21
   16e6c:	andeq	r6, r1, r0, ror #21
   16e70:			; <UNDEFINED> instruction: 0x000165bc
   16e74:			; <UNDEFINED> instruction: 0x000165bc
   16e78:			; <UNDEFINED> instruction: 0x000165bc
   16e7c:			; <UNDEFINED> instruction: 0x000165bc
   16e80:	andeq	r5, r1, ip, lsr #30
   16e84:	andeq	r6, r1, ip, ror #12
   16e88:	andeq	r6, r1, r0, ror #21
   16e8c:	andeq	r6, r1, r0, ror #21
   16e90:	andeq	r6, r1, r0, ror #21
   16e94:	andeq	r6, r1, r0, ror #21
   16e98:	andeq	r6, r1, r0, ror #21
   16e9c:	andeq	r6, r1, r0, ror #21
   16ea0:	andeq	r6, r1, r0, ror #21
   16ea4:	andeq	r6, r1, r0, ror #21
   16ea8:	andeq	r6, r1, r0, ror #21
   16eac:	andeq	r6, r1, r0, ror #21
   16eb0:	andeq	r6, r1, r0, ror #21
   16eb4:	andeq	r6, r1, r0, ror #21
   16eb8:	andeq	r6, r1, r0, ror #21
   16ebc:	andeq	r6, r1, r0, ror #21
   16ec0:	andeq	r6, r1, r0, ror #21
   16ec4:	andeq	r6, r1, r0, ror #21
   16ec8:	andeq	r6, r1, r0, ror #21
   16ecc:	andeq	r6, r1, r0, ror #21
   16ed0:	andeq	r6, r1, r0, ror #21
   16ed4:	andeq	r6, r1, r0, ror #21
   16ed8:	andeq	r6, r1, r0, ror #21
   16edc:	andeq	r6, r1, r0, ror #21
   16ee0:	andeq	r6, r1, r0, ror #21
   16ee4:	andeq	r6, r1, r0, ror #21
   16ee8:	andeq	r6, r1, r0, ror #21
   16eec:	andeq	r6, r1, r0, ror #21
   16ef0:			; <UNDEFINED> instruction: 0x000165bc
   16ef4:	andeq	r6, r1, r4, ror #8
   16ef8:	andeq	r6, r1, r0, ror #21
   16efc:			; <UNDEFINED> instruction: 0x000165bc
   16f00:	andeq	r6, r1, r0, ror #21
   16f04:			; <UNDEFINED> instruction: 0x000165bc
   16f08:	andeq	r6, r1, r0, ror #21
   16f0c:	andeq	r6, r1, r0, ror #21
   16f10:	andeq	r6, r1, r0, ror #21
   16f14:	andeq	r6, r1, r0, ror #21
   16f18:	andeq	r6, r1, r0, ror #21
   16f1c:	andeq	r6, r1, r0, ror #21
   16f20:	andeq	r6, r1, r0, ror #21
   16f24:	andeq	r6, r1, r0, ror #21
   16f28:	andeq	r6, r1, r0, ror #21
   16f2c:	andeq	r6, r1, r0, ror #21
   16f30:	andeq	r6, r1, r0, ror #21
   16f34:	andeq	r6, r1, r0, ror #21
   16f38:	andeq	r6, r1, r0, ror #21
   16f3c:	andeq	r6, r1, r0, ror #21
   16f40:	andeq	r6, r1, r0, ror #21
   16f44:	andeq	r6, r1, r0, ror #21
   16f48:	andeq	r6, r1, r0, ror #21
   16f4c:	andeq	r6, r1, r0, ror #21
   16f50:	andeq	r6, r1, r0, ror #21
   16f54:	andeq	r6, r1, r0, ror #21
   16f58:	andeq	r6, r1, r0, ror #21
   16f5c:	andeq	r6, r1, r0, ror #21
   16f60:	andeq	r6, r1, r0, ror #21
   16f64:	andeq	r6, r1, r0, ror #21
   16f68:	andeq	r6, r1, r0, ror #21
   16f6c:	andeq	r6, r1, r0, ror #21
   16f70:	andeq	r6, r1, r4, lsr #10
   16f74:			; <UNDEFINED> instruction: 0x000165bc
   16f78:	andeq	r6, r1, r4, lsr #10
   16f7c:	andeq	r6, r1, r4, ror r5
   16f80:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16f84:	strd	r6, [sp, #8]
   16f88:	strd	r8, [sp, #16]
   16f8c:	strd	sl, [sp, #24]
   16f90:	str	lr, [sp, #32]
   16f94:	sub	sp, sp, #52	; 0x34
   16f98:	mov	r5, r0
   16f9c:	str	r1, [sp, #24]
   16fa0:	str	r2, [sp, #28]
   16fa4:	mov	r4, r3
   16fa8:	bl	1139c <__errno_location@plt>
   16fac:	str	r0, [sp, #32]
   16fb0:	ldr	r3, [r0]
   16fb4:	str	r3, [sp, #36]	; 0x24
   16fb8:	movw	r3, #49516	; 0xc16c
   16fbc:	movt	r3, #2
   16fc0:	ldr	r6, [r3]
   16fc4:	cmn	r5, #-2147483647	; 0x80000001
   16fc8:	movne	r3, #0
   16fcc:	moveq	r3, #1
   16fd0:	orrs	r3, r3, r5, lsr #31
   16fd4:	bne	17138 <__assert_fail@plt+0x5c58>
   16fd8:	movw	r3, #49516	; 0xc16c
   16fdc:	movt	r3, #2
   16fe0:	ldr	r2, [r3, #4]
   16fe4:	cmp	r2, r5
   16fe8:	bgt	17058 <__assert_fail@plt+0x5b78>
   16fec:	str	r2, [sp, #44]	; 0x2c
   16ff0:	add	r3, r3, #8
   16ff4:	cmp	r6, r3
   16ff8:	beq	1713c <__assert_fail@plt+0x5c5c>
   16ffc:	sub	r2, r5, r2
   17000:	mov	r3, #8
   17004:	str	r3, [sp]
   17008:	mvn	r3, #-2147483648	; 0x80000000
   1700c:	add	r2, r2, #1
   17010:	add	r1, sp, #44	; 0x2c
   17014:	mov	r0, r6
   17018:	bl	185bc <__assert_fail@plt+0x70dc>
   1701c:	mov	r6, r0
   17020:	movw	r3, #49516	; 0xc16c
   17024:	movt	r3, #2
   17028:	str	r0, [r3]
   1702c:	movw	r7, #49516	; 0xc16c
   17030:	movt	r7, #2
   17034:	ldr	r0, [r7, #4]
   17038:	ldr	r2, [sp, #44]	; 0x2c
   1703c:	sub	r2, r2, r0
   17040:	lsl	r2, r2, #3
   17044:	mov	r1, #0
   17048:	add	r0, r6, r0, lsl #3
   1704c:	bl	113c0 <memset@plt>
   17050:	ldr	r3, [sp, #44]	; 0x2c
   17054:	str	r3, [r7, #4]
   17058:	add	fp, r6, r5, lsl #3
   1705c:	ldr	r8, [r6, r5, lsl #3]
   17060:	ldr	r7, [fp, #4]
   17064:	ldr	r3, [r4, #4]
   17068:	orr	r9, r3, #1
   1706c:	add	sl, r4, #8
   17070:	ldr	r3, [r4, #44]	; 0x2c
   17074:	str	r3, [sp, #16]
   17078:	ldr	r3, [r4, #40]	; 0x28
   1707c:	str	r3, [sp, #12]
   17080:	str	sl, [sp, #8]
   17084:	str	r9, [sp, #4]
   17088:	ldr	r3, [r4]
   1708c:	str	r3, [sp]
   17090:	ldr	r3, [sp, #28]
   17094:	ldr	r2, [sp, #24]
   17098:	mov	r1, r8
   1709c:	mov	r0, r7
   170a0:	bl	15888 <__assert_fail@plt+0x43a8>
   170a4:	cmp	r8, r0
   170a8:	bhi	1710c <__assert_fail@plt+0x5c2c>
   170ac:	add	r8, r0, #1
   170b0:	str	r8, [r6, r5, lsl #3]
   170b4:	movw	r3, #50480	; 0xc530
   170b8:	movt	r3, #2
   170bc:	cmp	r7, r3
   170c0:	beq	170cc <__assert_fail@plt+0x5bec>
   170c4:	mov	r0, r7
   170c8:	bl	153f4 <__assert_fail@plt+0x3f14>
   170cc:	mov	r0, r8
   170d0:	bl	183b8 <__assert_fail@plt+0x6ed8>
   170d4:	mov	r7, r0
   170d8:	str	r0, [fp, #4]
   170dc:	ldr	r3, [r4, #44]	; 0x2c
   170e0:	str	r3, [sp, #16]
   170e4:	ldr	r3, [r4, #40]	; 0x28
   170e8:	str	r3, [sp, #12]
   170ec:	str	sl, [sp, #8]
   170f0:	str	r9, [sp, #4]
   170f4:	ldr	r3, [r4]
   170f8:	str	r3, [sp]
   170fc:	ldr	r3, [sp, #28]
   17100:	ldr	r2, [sp, #24]
   17104:	mov	r1, r8
   17108:	bl	15888 <__assert_fail@plt+0x43a8>
   1710c:	ldr	r3, [sp, #32]
   17110:	ldr	r2, [sp, #36]	; 0x24
   17114:	str	r2, [r3]
   17118:	mov	r0, r7
   1711c:	add	sp, sp, #52	; 0x34
   17120:	ldrd	r4, [sp]
   17124:	ldrd	r6, [sp, #8]
   17128:	ldrd	r8, [sp, #16]
   1712c:	ldrd	sl, [sp, #24]
   17130:	add	sp, sp, #32
   17134:	pop	{pc}		; (ldr pc, [sp], #4)
   17138:	bl	114bc <abort@plt>
   1713c:	sub	r2, r5, r2
   17140:	mov	r3, #8
   17144:	str	r3, [sp]
   17148:	mvn	r3, #-2147483648	; 0x80000000
   1714c:	add	r2, r2, #1
   17150:	add	r1, sp, #44	; 0x2c
   17154:	mov	r0, #0
   17158:	bl	185bc <__assert_fail@plt+0x70dc>
   1715c:	mov	r6, r0
   17160:	movw	r3, #49516	; 0xc16c
   17164:	movt	r3, #2
   17168:	str	r0, [r3]
   1716c:	ldrd	r2, [r3, #8]
   17170:	strd	r2, [r0]
   17174:	b	1702c <__assert_fail@plt+0x5b4c>
   17178:	strd	r4, [sp, #-16]!
   1717c:	str	r6, [sp, #8]
   17180:	str	lr, [sp, #12]
   17184:	mov	r4, r0
   17188:	bl	1139c <__errno_location@plt>
   1718c:	mov	r5, r0
   17190:	ldr	r6, [r0]
   17194:	cmp	r4, #0
   17198:	ldr	r3, [pc, #32]	; 171c0 <__assert_fail@plt+0x5ce0>
   1719c:	moveq	r4, r3
   171a0:	mov	r1, #48	; 0x30
   171a4:	mov	r0, r4
   171a8:	bl	1872c <__assert_fail@plt+0x724c>
   171ac:	str	r6, [r5]
   171b0:	ldrd	r4, [sp]
   171b4:	ldr	r6, [sp, #8]
   171b8:	add	sp, sp, #12
   171bc:	pop	{pc}		; (ldr pc, [sp], #4)
   171c0:	andeq	ip, r2, r0, lsr r6
   171c4:	subs	r3, r0, #0
   171c8:	ldr	r2, [pc, #8]	; 171d8 <__assert_fail@plt+0x5cf8>
   171cc:	moveq	r3, r2
   171d0:	ldr	r0, [r3]
   171d4:	bx	lr
   171d8:	andeq	ip, r2, r0, lsr r6
   171dc:	subs	r3, r0, #0
   171e0:	ldr	r2, [pc, #8]	; 171f0 <__assert_fail@plt+0x5d10>
   171e4:	moveq	r3, r2
   171e8:	str	r1, [r3]
   171ec:	bx	lr
   171f0:	andeq	ip, r2, r0, lsr r6
   171f4:	push	{lr}		; (str lr, [sp, #-4]!)
   171f8:	subs	r3, r0, #0
   171fc:	ldr	r0, [pc, #44]	; 17230 <__assert_fail@plt+0x5d50>
   17200:	moveq	r3, r0
   17204:	add	r3, r3, #8
   17208:	lsr	lr, r1, #5
   1720c:	and	r1, r1, #31
   17210:	ldr	ip, [r3, lr, lsl #2]
   17214:	lsr	r0, ip, r1
   17218:	eor	r2, r2, r0
   1721c:	and	r2, r2, #1
   17220:	eor	r1, ip, r2, lsl r1
   17224:	str	r1, [r3, lr, lsl #2]
   17228:	and	r0, r0, #1
   1722c:	pop	{pc}		; (ldr pc, [sp], #4)
   17230:	andeq	ip, r2, r0, lsr r6
   17234:	subs	r3, r0, #0
   17238:	ldr	r2, [pc, #12]	; 1724c <__assert_fail@plt+0x5d6c>
   1723c:	moveq	r3, r2
   17240:	ldr	r0, [r3, #4]
   17244:	str	r1, [r3, #4]
   17248:	bx	lr
   1724c:	andeq	ip, r2, r0, lsr r6
   17250:	subs	r3, r0, #0
   17254:	ldr	r0, [pc, #44]	; 17288 <__assert_fail@plt+0x5da8>
   17258:	moveq	r3, r0
   1725c:	mov	r0, #10
   17260:	str	r0, [r3]
   17264:	cmp	r2, #0
   17268:	cmpne	r1, #0
   1726c:	beq	1727c <__assert_fail@plt+0x5d9c>
   17270:	str	r1, [r3, #40]	; 0x28
   17274:	str	r2, [r3, #44]	; 0x2c
   17278:	bx	lr
   1727c:	str	r4, [sp, #-8]!
   17280:	str	lr, [sp, #4]
   17284:	bl	114bc <abort@plt>
   17288:	andeq	ip, r2, r0, lsr r6
   1728c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17290:	strd	r6, [sp, #8]
   17294:	strd	r8, [sp, #16]
   17298:	str	sl, [sp, #24]
   1729c:	str	lr, [sp, #28]
   172a0:	sub	sp, sp, #24
   172a4:	mov	r7, r0
   172a8:	mov	r8, r1
   172ac:	mov	r9, r2
   172b0:	mov	sl, r3
   172b4:	ldr	r4, [sp, #56]	; 0x38
   172b8:	cmp	r4, #0
   172bc:	ldr	r3, [pc, #104]	; 1732c <__assert_fail@plt+0x5e4c>
   172c0:	moveq	r4, r3
   172c4:	bl	1139c <__errno_location@plt>
   172c8:	mov	r5, r0
   172cc:	ldr	r6, [r0]
   172d0:	ldr	r3, [r4, #44]	; 0x2c
   172d4:	str	r3, [sp, #16]
   172d8:	ldr	r3, [r4, #40]	; 0x28
   172dc:	str	r3, [sp, #12]
   172e0:	add	r3, r4, #8
   172e4:	str	r3, [sp, #8]
   172e8:	ldr	r3, [r4, #4]
   172ec:	str	r3, [sp, #4]
   172f0:	ldr	r3, [r4]
   172f4:	str	r3, [sp]
   172f8:	mov	r3, sl
   172fc:	mov	r2, r9
   17300:	mov	r1, r8
   17304:	mov	r0, r7
   17308:	bl	15888 <__assert_fail@plt+0x43a8>
   1730c:	str	r6, [r5]
   17310:	add	sp, sp, #24
   17314:	ldrd	r4, [sp]
   17318:	ldrd	r6, [sp, #8]
   1731c:	ldrd	r8, [sp, #16]
   17320:	ldr	sl, [sp, #24]
   17324:	add	sp, sp, #28
   17328:	pop	{pc}		; (ldr pc, [sp], #4)
   1732c:	andeq	ip, r2, r0, lsr r6
   17330:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17334:	strd	r6, [sp, #8]
   17338:	strd	r8, [sp, #16]
   1733c:	strd	sl, [sp, #24]
   17340:	str	lr, [sp, #32]
   17344:	sub	sp, sp, #44	; 0x2c
   17348:	mov	r8, r0
   1734c:	mov	sl, r1
   17350:	mov	r6, r2
   17354:	subs	r4, r3, #0
   17358:	ldr	r3, [pc, #200]	; 17428 <__assert_fail@plt+0x5f48>
   1735c:	moveq	r4, r3
   17360:	bl	1139c <__errno_location@plt>
   17364:	mov	r7, r0
   17368:	ldr	fp, [r0]
   1736c:	ldr	r5, [r4, #4]
   17370:	cmp	r6, #0
   17374:	orreq	r5, r5, #1
   17378:	add	r9, r4, #8
   1737c:	ldr	r3, [r4, #44]	; 0x2c
   17380:	str	r3, [sp, #16]
   17384:	ldr	r3, [r4, #40]	; 0x28
   17388:	str	r3, [sp, #12]
   1738c:	str	r9, [sp, #8]
   17390:	str	r5, [sp, #4]
   17394:	ldr	r3, [r4]
   17398:	str	r3, [sp]
   1739c:	str	sl, [sp, #36]	; 0x24
   173a0:	mov	r3, sl
   173a4:	str	r8, [sp, #32]
   173a8:	mov	r2, r8
   173ac:	mov	r1, #0
   173b0:	mov	r0, r1
   173b4:	bl	15888 <__assert_fail@plt+0x43a8>
   173b8:	mov	sl, r0
   173bc:	add	r8, r0, #1
   173c0:	mov	r0, r8
   173c4:	bl	183b8 <__assert_fail@plt+0x6ed8>
   173c8:	str	r0, [sp, #28]
   173cc:	ldr	r3, [r4, #44]	; 0x2c
   173d0:	str	r3, [sp, #16]
   173d4:	ldr	r3, [r4, #40]	; 0x28
   173d8:	str	r3, [sp, #12]
   173dc:	str	r9, [sp, #8]
   173e0:	str	r5, [sp, #4]
   173e4:	ldr	r3, [r4]
   173e8:	str	r3, [sp]
   173ec:	ldr	r3, [sp, #36]	; 0x24
   173f0:	ldr	r2, [sp, #32]
   173f4:	mov	r1, r8
   173f8:	bl	15888 <__assert_fail@plt+0x43a8>
   173fc:	str	fp, [r7]
   17400:	cmp	r6, #0
   17404:	strne	sl, [r6]
   17408:	ldr	r0, [sp, #28]
   1740c:	add	sp, sp, #44	; 0x2c
   17410:	ldrd	r4, [sp]
   17414:	ldrd	r6, [sp, #8]
   17418:	ldrd	r8, [sp, #16]
   1741c:	ldrd	sl, [sp, #24]
   17420:	add	sp, sp, #32
   17424:	pop	{pc}		; (ldr pc, [sp], #4)
   17428:	andeq	ip, r2, r0, lsr r6
   1742c:	str	r4, [sp, #-8]!
   17430:	str	lr, [sp, #4]
   17434:	mov	r3, r2
   17438:	mov	r2, #0
   1743c:	bl	17330 <__assert_fail@plt+0x5e50>
   17440:	ldr	r4, [sp]
   17444:	add	sp, sp, #4
   17448:	pop	{pc}		; (ldr pc, [sp], #4)
   1744c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17450:	strd	r6, [sp, #8]
   17454:	str	r8, [sp, #16]
   17458:	str	lr, [sp, #20]
   1745c:	movw	r3, #49516	; 0xc16c
   17460:	movt	r3, #2
   17464:	ldr	r7, [r3]
   17468:	ldr	r3, [r3, #4]
   1746c:	cmp	r3, #1
   17470:	ble	1749c <__assert_fail@plt+0x5fbc>
   17474:	mov	r4, #1
   17478:	add	r6, r7, #4
   1747c:	movw	r5, #49516	; 0xc16c
   17480:	movt	r5, #2
   17484:	ldr	r0, [r6, r4, lsl #3]
   17488:	bl	153f4 <__assert_fail@plt+0x3f14>
   1748c:	add	r4, r4, #1
   17490:	ldr	r3, [r5, #4]
   17494:	cmp	r3, r4
   17498:	bgt	17484 <__assert_fail@plt+0x5fa4>
   1749c:	ldr	r0, [r7, #4]
   174a0:	movw	r3, #50480	; 0xc530
   174a4:	movt	r3, #2
   174a8:	cmp	r0, r3
   174ac:	beq	174d0 <__assert_fail@plt+0x5ff0>
   174b0:	bl	153f4 <__assert_fail@plt+0x3f14>
   174b4:	movw	r3, #49516	; 0xc16c
   174b8:	movt	r3, #2
   174bc:	mov	r2, #256	; 0x100
   174c0:	str	r2, [r3, #8]
   174c4:	movw	r2, #50480	; 0xc530
   174c8:	movt	r2, #2
   174cc:	str	r2, [r3, #12]
   174d0:	ldr	r3, [pc, #64]	; 17518 <__assert_fail@plt+0x6038>
   174d4:	cmp	r7, r3
   174d8:	beq	174f4 <__assert_fail@plt+0x6014>
   174dc:	mov	r0, r7
   174e0:	bl	153f4 <__assert_fail@plt+0x3f14>
   174e4:	movw	r3, #49516	; 0xc16c
   174e8:	movt	r3, #2
   174ec:	add	r2, r3, #8
   174f0:	str	r2, [r3]
   174f4:	movw	r3, #49516	; 0xc16c
   174f8:	movt	r3, #2
   174fc:	mov	r2, #1
   17500:	str	r2, [r3, #4]
   17504:	ldrd	r4, [sp]
   17508:	ldrd	r6, [sp, #8]
   1750c:	ldr	r8, [sp, #16]
   17510:	add	sp, sp, #20
   17514:	pop	{pc}		; (ldr pc, [sp], #4)
   17518:	andeq	ip, r2, r4, ror r1
   1751c:	str	r4, [sp, #-8]!
   17520:	str	lr, [sp, #4]
   17524:	ldr	r3, [pc, #16]	; 1753c <__assert_fail@plt+0x605c>
   17528:	mvn	r2, #0
   1752c:	bl	16f80 <__assert_fail@plt+0x5aa0>
   17530:	ldr	r4, [sp]
   17534:	add	sp, sp, #4
   17538:	pop	{pc}		; (ldr pc, [sp], #4)
   1753c:	andeq	ip, r2, r0, lsr r6
   17540:	str	r4, [sp, #-8]!
   17544:	str	lr, [sp, #4]
   17548:	ldr	r3, [pc, #12]	; 1755c <__assert_fail@plt+0x607c>
   1754c:	bl	16f80 <__assert_fail@plt+0x5aa0>
   17550:	ldr	r4, [sp]
   17554:	add	sp, sp, #4
   17558:	pop	{pc}		; (ldr pc, [sp], #4)
   1755c:	andeq	ip, r2, r0, lsr r6
   17560:	str	r4, [sp, #-8]!
   17564:	str	lr, [sp, #4]
   17568:	mov	r1, r0
   1756c:	mov	r0, #0
   17570:	bl	1751c <__assert_fail@plt+0x603c>
   17574:	ldr	r4, [sp]
   17578:	add	sp, sp, #4
   1757c:	pop	{pc}		; (ldr pc, [sp], #4)
   17580:	str	r4, [sp, #-8]!
   17584:	str	lr, [sp, #4]
   17588:	mov	r2, r1
   1758c:	mov	r1, r0
   17590:	mov	r0, #0
   17594:	bl	17540 <__assert_fail@plt+0x6060>
   17598:	ldr	r4, [sp]
   1759c:	add	sp, sp, #4
   175a0:	pop	{pc}		; (ldr pc, [sp], #4)
   175a4:	strd	r4, [sp, #-12]!
   175a8:	str	lr, [sp, #8]
   175ac:	sub	sp, sp, #52	; 0x34
   175b0:	mov	r4, r0
   175b4:	mov	r5, r2
   175b8:	mov	r0, sp
   175bc:	bl	156f4 <__assert_fail@plt+0x4214>
   175c0:	mov	r3, sp
   175c4:	mvn	r2, #0
   175c8:	mov	r1, r5
   175cc:	mov	r0, r4
   175d0:	bl	16f80 <__assert_fail@plt+0x5aa0>
   175d4:	add	sp, sp, #52	; 0x34
   175d8:	ldrd	r4, [sp]
   175dc:	add	sp, sp, #8
   175e0:	pop	{pc}		; (ldr pc, [sp], #4)
   175e4:	strd	r4, [sp, #-16]!
   175e8:	str	r6, [sp, #8]
   175ec:	str	lr, [sp, #12]
   175f0:	sub	sp, sp, #48	; 0x30
   175f4:	mov	r4, r0
   175f8:	mov	r5, r2
   175fc:	mov	r6, r3
   17600:	mov	r0, sp
   17604:	bl	156f4 <__assert_fail@plt+0x4214>
   17608:	mov	r3, sp
   1760c:	mov	r2, r6
   17610:	mov	r1, r5
   17614:	mov	r0, r4
   17618:	bl	16f80 <__assert_fail@plt+0x5aa0>
   1761c:	add	sp, sp, #48	; 0x30
   17620:	ldrd	r4, [sp]
   17624:	ldr	r6, [sp, #8]
   17628:	add	sp, sp, #12
   1762c:	pop	{pc}		; (ldr pc, [sp], #4)
   17630:	str	r4, [sp, #-8]!
   17634:	str	lr, [sp, #4]
   17638:	mov	r2, r1
   1763c:	mov	r1, r0
   17640:	mov	r0, #0
   17644:	bl	175a4 <__assert_fail@plt+0x60c4>
   17648:	ldr	r4, [sp]
   1764c:	add	sp, sp, #4
   17650:	pop	{pc}		; (ldr pc, [sp], #4)
   17654:	str	r4, [sp, #-8]!
   17658:	str	lr, [sp, #4]
   1765c:	mov	r3, r2
   17660:	mov	r2, r1
   17664:	mov	r1, r0
   17668:	mov	r0, #0
   1766c:	bl	175e4 <__assert_fail@plt+0x6104>
   17670:	ldr	r4, [sp]
   17674:	add	sp, sp, #4
   17678:	pop	{pc}		; (ldr pc, [sp], #4)
   1767c:	strd	r4, [sp, #-12]!
   17680:	str	lr, [sp, #8]
   17684:	sub	sp, sp, #52	; 0x34
   17688:	mov	r4, r0
   1768c:	mov	r5, r1
   17690:	mov	r1, r2
   17694:	ldr	r0, [pc, #92]	; 176f8 <__assert_fail@plt+0x6218>
   17698:	ldrd	r2, [r0]
   1769c:	strd	r2, [sp]
   176a0:	ldrd	r2, [r0, #8]
   176a4:	strd	r2, [sp, #8]
   176a8:	ldrd	r2, [r0, #16]
   176ac:	strd	r2, [sp, #16]
   176b0:	ldrd	r2, [r0, #24]
   176b4:	strd	r2, [sp, #24]
   176b8:	ldrd	r2, [r0, #32]
   176bc:	strd	r2, [sp, #32]
   176c0:	ldrd	r2, [r0, #40]	; 0x28
   176c4:	strd	r2, [sp, #40]	; 0x28
   176c8:	mov	r2, #1
   176cc:	mov	r0, sp
   176d0:	bl	171f4 <__assert_fail@plt+0x5d14>
   176d4:	mov	r3, sp
   176d8:	mov	r2, r5
   176dc:	mov	r1, r4
   176e0:	mov	r0, #0
   176e4:	bl	16f80 <__assert_fail@plt+0x5aa0>
   176e8:	add	sp, sp, #52	; 0x34
   176ec:	ldrd	r4, [sp]
   176f0:	add	sp, sp, #8
   176f4:	pop	{pc}		; (ldr pc, [sp], #4)
   176f8:	andeq	ip, r2, r0, lsr r6
   176fc:	str	r4, [sp, #-8]!
   17700:	str	lr, [sp, #4]
   17704:	mov	r2, r1
   17708:	mvn	r1, #0
   1770c:	bl	1767c <__assert_fail@plt+0x619c>
   17710:	ldr	r4, [sp]
   17714:	add	sp, sp, #4
   17718:	pop	{pc}		; (ldr pc, [sp], #4)
   1771c:	str	r4, [sp, #-8]!
   17720:	str	lr, [sp, #4]
   17724:	mov	r1, #58	; 0x3a
   17728:	bl	176fc <__assert_fail@plt+0x621c>
   1772c:	ldr	r4, [sp]
   17730:	add	sp, sp, #4
   17734:	pop	{pc}		; (ldr pc, [sp], #4)
   17738:	str	r4, [sp, #-8]!
   1773c:	str	lr, [sp, #4]
   17740:	mov	r2, #58	; 0x3a
   17744:	bl	1767c <__assert_fail@plt+0x619c>
   17748:	ldr	r4, [sp]
   1774c:	add	sp, sp, #4
   17750:	pop	{pc}		; (ldr pc, [sp], #4)
   17754:	strd	r4, [sp, #-12]!
   17758:	str	lr, [sp, #8]
   1775c:	sub	sp, sp, #100	; 0x64
   17760:	mov	r4, r0
   17764:	mov	r5, r2
   17768:	mov	r0, sp
   1776c:	bl	156f4 <__assert_fail@plt+0x4214>
   17770:	ldrd	r2, [sp]
   17774:	strd	r2, [sp, #48]	; 0x30
   17778:	ldrd	r2, [sp, #8]
   1777c:	strd	r2, [sp, #56]	; 0x38
   17780:	ldrd	r2, [sp, #16]
   17784:	strd	r2, [sp, #64]	; 0x40
   17788:	ldrd	r2, [sp, #24]
   1778c:	strd	r2, [sp, #72]	; 0x48
   17790:	ldrd	r2, [sp, #32]
   17794:	strd	r2, [sp, #80]	; 0x50
   17798:	ldrd	r2, [sp, #40]	; 0x28
   1779c:	strd	r2, [sp, #88]	; 0x58
   177a0:	mov	r2, #1
   177a4:	mov	r1, #58	; 0x3a
   177a8:	add	r0, sp, #48	; 0x30
   177ac:	bl	171f4 <__assert_fail@plt+0x5d14>
   177b0:	add	r3, sp, #48	; 0x30
   177b4:	mvn	r2, #0
   177b8:	mov	r1, r5
   177bc:	mov	r0, r4
   177c0:	bl	16f80 <__assert_fail@plt+0x5aa0>
   177c4:	add	sp, sp, #100	; 0x64
   177c8:	ldrd	r4, [sp]
   177cc:	add	sp, sp, #8
   177d0:	pop	{pc}		; (ldr pc, [sp], #4)
   177d4:	strd	r4, [sp, #-20]!	; 0xffffffec
   177d8:	strd	r6, [sp, #8]
   177dc:	str	lr, [sp, #16]
   177e0:	sub	sp, sp, #52	; 0x34
   177e4:	mov	r4, r0
   177e8:	mov	r5, r3
   177ec:	ldr	r3, [pc, #92]	; 17850 <__assert_fail@plt+0x6370>
   177f0:	ldrd	r6, [r3]
   177f4:	strd	r6, [sp]
   177f8:	ldrd	r6, [r3, #8]
   177fc:	strd	r6, [sp, #8]
   17800:	ldrd	r6, [r3, #16]
   17804:	strd	r6, [sp, #16]
   17808:	ldrd	r6, [r3, #24]
   1780c:	strd	r6, [sp, #24]
   17810:	ldrd	r6, [r3, #32]
   17814:	strd	r6, [sp, #32]
   17818:	ldrd	r6, [r3, #40]	; 0x28
   1781c:	strd	r6, [sp, #40]	; 0x28
   17820:	mov	r0, sp
   17824:	bl	17250 <__assert_fail@plt+0x5d70>
   17828:	mov	r3, sp
   1782c:	ldr	r2, [sp, #72]	; 0x48
   17830:	mov	r1, r5
   17834:	mov	r0, r4
   17838:	bl	16f80 <__assert_fail@plt+0x5aa0>
   1783c:	add	sp, sp, #52	; 0x34
   17840:	ldrd	r4, [sp]
   17844:	ldrd	r6, [sp, #8]
   17848:	add	sp, sp, #16
   1784c:	pop	{pc}		; (ldr pc, [sp], #4)
   17850:	andeq	ip, r2, r0, lsr r6
   17854:	push	{lr}		; (str lr, [sp, #-4]!)
   17858:	sub	sp, sp, #12
   1785c:	mvn	ip, #0
   17860:	str	ip, [sp]
   17864:	bl	177d4 <__assert_fail@plt+0x62f4>
   17868:	add	sp, sp, #12
   1786c:	pop	{pc}		; (ldr pc, [sp], #4)
   17870:	str	r4, [sp, #-8]!
   17874:	str	lr, [sp, #4]
   17878:	mov	r3, r2
   1787c:	mov	r2, r1
   17880:	mov	r1, r0
   17884:	mov	r0, #0
   17888:	bl	17854 <__assert_fail@plt+0x6374>
   1788c:	ldr	r4, [sp]
   17890:	add	sp, sp, #4
   17894:	pop	{pc}		; (ldr pc, [sp], #4)
   17898:	push	{lr}		; (str lr, [sp, #-4]!)
   1789c:	sub	sp, sp, #12
   178a0:	str	r3, [sp]
   178a4:	mov	r3, r2
   178a8:	mov	r2, r1
   178ac:	mov	r1, r0
   178b0:	mov	r0, #0
   178b4:	bl	177d4 <__assert_fail@plt+0x62f4>
   178b8:	add	sp, sp, #12
   178bc:	pop	{pc}		; (ldr pc, [sp], #4)
   178c0:	str	r4, [sp, #-8]!
   178c4:	str	lr, [sp, #4]
   178c8:	ldr	r3, [pc, #12]	; 178dc <__assert_fail@plt+0x63fc>
   178cc:	bl	16f80 <__assert_fail@plt+0x5aa0>
   178d0:	ldr	r4, [sp]
   178d4:	add	sp, sp, #4
   178d8:	pop	{pc}		; (ldr pc, [sp], #4)
   178dc:	andeq	ip, r2, ip, ror r1
   178e0:	str	r4, [sp, #-8]!
   178e4:	str	lr, [sp, #4]
   178e8:	mov	r2, r1
   178ec:	mov	r1, r0
   178f0:	mov	r0, #0
   178f4:	bl	178c0 <__assert_fail@plt+0x63e0>
   178f8:	ldr	r4, [sp]
   178fc:	add	sp, sp, #4
   17900:	pop	{pc}		; (ldr pc, [sp], #4)
   17904:	str	r4, [sp, #-8]!
   17908:	str	lr, [sp, #4]
   1790c:	mvn	r2, #0
   17910:	bl	178c0 <__assert_fail@plt+0x63e0>
   17914:	ldr	r4, [sp]
   17918:	add	sp, sp, #4
   1791c:	pop	{pc}		; (ldr pc, [sp], #4)
   17920:	str	r4, [sp, #-8]!
   17924:	str	lr, [sp, #4]
   17928:	mov	r1, r0
   1792c:	mov	r0, #0
   17930:	bl	17904 <__assert_fail@plt+0x6424>
   17934:	ldr	r4, [sp]
   17938:	add	sp, sp, #4
   1793c:	pop	{pc}		; (ldr pc, [sp], #4)
   17940:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17944:	strd	r6, [sp, #8]
   17948:	strd	r8, [sp, #16]
   1794c:	str	sl, [sp, #24]
   17950:	str	lr, [sp, #28]
   17954:	mov	r8, r0
   17958:	mov	r7, r1
   1795c:	mov	r9, r2
   17960:	mov	r5, #0
   17964:	movt	r5, #32752	; 0x7ff0
   17968:	b	17970 <__assert_fail@plt+0x6490>
   1796c:	mov	r9, r5
   17970:	mov	r2, r9
   17974:	mov	r1, r7
   17978:	mov	r0, r8
   1797c:	bl	11180 <read@plt>
   17980:	subs	r6, r0, #0
   17984:	bge	179d0 <__assert_fail@plt+0x64f0>
   17988:	bl	1139c <__errno_location@plt>
   1798c:	ldr	r3, [r0]
   17990:	cmp	r3, #4
   17994:	beq	17970 <__assert_fail@plt+0x6490>
   17998:	cmp	r9, r5
   1799c:	movls	r4, #0
   179a0:	movhi	r4, #1
   179a4:	cmp	r3, #22
   179a8:	movne	r4, #0
   179ac:	cmp	r4, #0
   179b0:	bne	1796c <__assert_fail@plt+0x648c>
   179b4:	mov	r0, r6
   179b8:	ldrd	r4, [sp]
   179bc:	ldrd	r6, [sp, #8]
   179c0:	ldrd	r8, [sp, #16]
   179c4:	ldr	sl, [sp, #24]
   179c8:	add	sp, sp, #28
   179cc:	pop	{pc}		; (ldr pc, [sp], #4)
   179d0:	mov	r0, r6
   179d4:	b	179b8 <__assert_fail@plt+0x64d8>
   179d8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   179dc:	strd	r6, [sp, #8]
   179e0:	strd	r8, [sp, #16]
   179e4:	str	sl, [sp, #24]
   179e8:	str	lr, [sp, #28]
   179ec:	mov	r8, r0
   179f0:	mov	r7, r1
   179f4:	mov	r9, r2
   179f8:	mov	r5, #0
   179fc:	movt	r5, #32752	; 0x7ff0
   17a00:	b	17a08 <__assert_fail@plt+0x6528>
   17a04:	mov	r9, r5
   17a08:	mov	r2, r9
   17a0c:	mov	r1, r7
   17a10:	mov	r0, r8
   17a14:	bl	113d8 <write@plt>
   17a18:	subs	r6, r0, #0
   17a1c:	bge	17a68 <__assert_fail@plt+0x6588>
   17a20:	bl	1139c <__errno_location@plt>
   17a24:	ldr	r3, [r0]
   17a28:	cmp	r3, #4
   17a2c:	beq	17a08 <__assert_fail@plt+0x6528>
   17a30:	cmp	r9, r5
   17a34:	movls	r4, #0
   17a38:	movhi	r4, #1
   17a3c:	cmp	r3, #22
   17a40:	movne	r4, #0
   17a44:	cmp	r4, #0
   17a48:	bne	17a04 <__assert_fail@plt+0x6524>
   17a4c:	mov	r0, r6
   17a50:	ldrd	r4, [sp]
   17a54:	ldrd	r6, [sp, #8]
   17a58:	ldrd	r8, [sp, #16]
   17a5c:	ldr	sl, [sp, #24]
   17a60:	add	sp, sp, #28
   17a64:	pop	{pc}		; (ldr pc, [sp], #4)
   17a68:	mov	r0, r6
   17a6c:	b	17a50 <__assert_fail@plt+0x6570>
   17a70:	strd	r4, [sp, #-20]!	; 0xffffffec
   17a74:	strd	r6, [sp, #8]
   17a78:	str	lr, [sp, #16]
   17a7c:	sub	sp, sp, #12
   17a80:	mov	r5, r0
   17a84:	mov	r6, r1
   17a88:	ldrb	r3, [r0]
   17a8c:	sub	r3, r3, #48	; 0x30
   17a90:	cmp	r3, #9
   17a94:	ldrhi	r7, [pc, #360]	; 17c04 <__assert_fail@plt+0x6724>
   17a98:	movhi	r4, #0
   17a9c:	bls	17b64 <__assert_fail@plt+0x6684>
   17aa0:	mov	r1, r5
   17aa4:	mov	r0, r7
   17aa8:	bl	11168 <strcmp@plt>
   17aac:	cmp	r0, #0
   17ab0:	beq	17b98 <__assert_fail@plt+0x66b8>
   17ab4:	add	r4, r4, #1
   17ab8:	add	r7, r7, #12
   17abc:	cmp	r4, #35	; 0x23
   17ac0:	bne	17aa0 <__assert_fail@plt+0x65c0>
   17ac4:	bl	114a4 <__libc_current_sigrtmin@plt>
   17ac8:	mov	r7, r0
   17acc:	bl	11360 <__libc_current_sigrtmax@plt>
   17ad0:	mov	r4, r0
   17ad4:	cmp	r7, #0
   17ad8:	ble	17af8 <__assert_fail@plt+0x6618>
   17adc:	mov	r2, #5
   17ae0:	movw	r1, #43976	; 0xabc8
   17ae4:	movt	r1, #1
   17ae8:	mov	r0, r5
   17aec:	bl	114b0 <strncmp@plt>
   17af0:	cmp	r0, #0
   17af4:	beq	17bc4 <__assert_fail@plt+0x66e4>
   17af8:	cmp	r4, #0
   17afc:	ble	17bfc <__assert_fail@plt+0x671c>
   17b00:	mov	r2, #5
   17b04:	movw	r1, #43984	; 0xabd0
   17b08:	movt	r1, #1
   17b0c:	mov	r0, r5
   17b10:	bl	114b0 <strncmp@plt>
   17b14:	cmp	r0, #0
   17b18:	bne	17bfc <__assert_fail@plt+0x671c>
   17b1c:	mov	r2, #10
   17b20:	add	r1, sp, #4
   17b24:	add	r0, r5, #5
   17b28:	bl	11174 <strtol@plt>
   17b2c:	ldr	r3, [sp, #4]
   17b30:	ldrb	r3, [r3]
   17b34:	cmp	r3, #0
   17b38:	bne	17bfc <__assert_fail@plt+0x671c>
   17b3c:	sub	r3, r7, r4
   17b40:	cmp	r0, r3
   17b44:	movlt	r7, #0
   17b48:	movge	r7, #1
   17b4c:	cmp	r0, #0
   17b50:	movgt	r7, #0
   17b54:	cmp	r7, #0
   17b58:	beq	17bfc <__assert_fail@plt+0x671c>
   17b5c:	add	r0, r4, r0
   17b60:	b	17ba8 <__assert_fail@plt+0x66c8>
   17b64:	mov	r2, #10
   17b68:	add	r1, sp, #4
   17b6c:	bl	11174 <strtol@plt>
   17b70:	ldr	r3, [sp, #4]
   17b74:	ldrb	r2, [r3]
   17b78:	cmp	r0, #64	; 0x40
   17b7c:	movgt	r3, #0
   17b80:	movle	r3, #1
   17b84:	cmp	r2, #0
   17b88:	movne	r3, #0
   17b8c:	cmp	r3, #0
   17b90:	mvneq	r0, #0
   17b94:	b	17ba8 <__assert_fail@plt+0x66c8>
   17b98:	movw	r3, #49580	; 0xc1ac
   17b9c:	movt	r3, #2
   17ba0:	add	r4, r4, r4, lsl #1
   17ba4:	ldr	r0, [r3, r4, lsl #2]
   17ba8:	str	r0, [r6]
   17bac:	asr	r0, r0, #31
   17bb0:	add	sp, sp, #12
   17bb4:	ldrd	r4, [sp]
   17bb8:	ldrd	r6, [sp, #8]
   17bbc:	add	sp, sp, #16
   17bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   17bc4:	mov	r2, #10
   17bc8:	add	r1, sp, #4
   17bcc:	add	r0, r5, #5
   17bd0:	bl	11174 <strtol@plt>
   17bd4:	ldr	r3, [sp, #4]
   17bd8:	ldrb	r3, [r3]
   17bdc:	cmp	r0, #0
   17be0:	cmpge	r3, #0
   17be4:	bne	17bfc <__assert_fail@plt+0x671c>
   17be8:	sub	r4, r4, r7
   17bec:	cmp	r0, r4
   17bf0:	bgt	17bfc <__assert_fail@plt+0x671c>
   17bf4:	add	r0, r7, r0
   17bf8:	b	17ba8 <__assert_fail@plt+0x66c8>
   17bfc:	mvn	r0, #0
   17c00:	b	17ba8 <__assert_fail@plt+0x66c8>
   17c04:			; <UNDEFINED> instruction: 0x0002c1b0
   17c08:	strd	r4, [sp, #-16]!
   17c0c:	str	r6, [sp, #8]
   17c10:	str	lr, [sp, #12]
   17c14:	sub	sp, sp, #8
   17c18:	mov	r5, r1
   17c1c:	movw	r3, #49580	; 0xc1ac
   17c20:	movt	r3, #2
   17c24:	ldr	r3, [r3]
   17c28:	cmp	r0, r3
   17c2c:	beq	17cdc <__assert_fail@plt+0x67fc>
   17c30:	mov	r4, r0
   17c34:	movw	r3, #49580	; 0xc1ac
   17c38:	movt	r3, #2
   17c3c:	mov	r1, #1
   17c40:	ldr	r2, [r3, #12]
   17c44:	cmp	r2, r4
   17c48:	beq	17ce0 <__assert_fail@plt+0x6800>
   17c4c:	add	r1, r1, #1
   17c50:	add	r3, r3, #12
   17c54:	cmp	r1, #35	; 0x23
   17c58:	bne	17c40 <__assert_fail@plt+0x6760>
   17c5c:	bl	114a4 <__libc_current_sigrtmin@plt>
   17c60:	mov	r6, r0
   17c64:	bl	11360 <__libc_current_sigrtmax@plt>
   17c68:	cmp	r4, r0
   17c6c:	movle	r3, #0
   17c70:	movgt	r3, #1
   17c74:	cmp	r4, r6
   17c78:	orrlt	r3, r3, #1
   17c7c:	cmp	r3, #0
   17c80:	bne	17d34 <__assert_fail@plt+0x6854>
   17c84:	sub	r3, r0, r6
   17c88:	add	r3, r3, r3, lsr #31
   17c8c:	add	r3, r6, r3, asr #1
   17c90:	cmp	r3, r4
   17c94:	blt	17d14 <__assert_fail@plt+0x6834>
   17c98:	movw	r3, #43976	; 0xabc8
   17c9c:	movt	r3, #1
   17ca0:	ldr	r2, [r3]
   17ca4:	str	r2, [r5]
   17ca8:	ldrh	r3, [r3, #4]
   17cac:	strh	r3, [r5, #4]
   17cb0:	subs	r0, r4, r6
   17cb4:	beq	17d00 <__assert_fail@plt+0x6820>
   17cb8:	str	r0, [sp]
   17cbc:	movw	r3, #43992	; 0xabd8
   17cc0:	movt	r3, #1
   17cc4:	mvn	r2, #0
   17cc8:	mov	r1, #1
   17ccc:	add	r0, r5, #5
   17cd0:	bl	113a8 <__sprintf_chk@plt>
   17cd4:	mov	r0, #0
   17cd8:	b	17d00 <__assert_fail@plt+0x6820>
   17cdc:	mov	r1, #0
   17ce0:	movw	r3, #49580	; 0xc1ac
   17ce4:	movt	r3, #2
   17ce8:	add	r1, r1, r1, lsl #1
   17cec:	add	r1, r3, r1, lsl #2
   17cf0:	add	r1, r1, #4
   17cf4:	mov	r0, r5
   17cf8:	bl	112ac <strcpy@plt>
   17cfc:	mov	r0, #0
   17d00:	add	sp, sp, #8
   17d04:	ldrd	r4, [sp]
   17d08:	ldr	r6, [sp, #8]
   17d0c:	add	sp, sp, #12
   17d10:	pop	{pc}		; (ldr pc, [sp], #4)
   17d14:	movw	r3, #43984	; 0xabd0
   17d18:	movt	r3, #1
   17d1c:	ldr	r2, [r3]
   17d20:	str	r2, [r5]
   17d24:	ldrh	r3, [r3, #4]
   17d28:	strh	r3, [r5, #4]
   17d2c:	mov	r6, r0
   17d30:	b	17cb0 <__assert_fail@plt+0x67d0>
   17d34:	mvn	r0, #0
   17d38:	b	17d00 <__assert_fail@plt+0x6820>
   17d3c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17d40:	strd	r6, [sp, #8]
   17d44:	str	r8, [sp, #16]
   17d48:	str	lr, [sp, #20]
   17d4c:	mov	r4, r0
   17d50:	cmp	r0, #2
   17d54:	bls	17d70 <__assert_fail@plt+0x6890>
   17d58:	mov	r0, r4
   17d5c:	ldrd	r4, [sp]
   17d60:	ldrd	r6, [sp, #8]
   17d64:	ldr	r8, [sp, #16]
   17d68:	add	sp, sp, #20
   17d6c:	pop	{pc}		; (ldr pc, [sp], #4)
   17d70:	bl	192ac <__assert_fail@plt+0x7dcc>
   17d74:	mov	r6, r0
   17d78:	bl	1139c <__errno_location@plt>
   17d7c:	mov	r5, r0
   17d80:	ldr	r7, [r0]
   17d84:	mov	r0, r4
   17d88:	bl	114c8 <close@plt>
   17d8c:	str	r7, [r5]
   17d90:	mov	r4, r6
   17d94:	b	17d58 <__assert_fail@plt+0x6878>
   17d98:	strd	r4, [sp, #-16]!
   17d9c:	str	r6, [sp, #8]
   17da0:	str	lr, [sp, #12]
   17da4:	sub	sp, sp, #32
   17da8:	mov	r4, r0
   17dac:	ldr	r5, [sp, #48]	; 0x30
   17db0:	ldr	r6, [sp, #52]	; 0x34
   17db4:	cmp	r1, #0
   17db8:	beq	17e84 <__assert_fail@plt+0x69a4>
   17dbc:	str	r3, [sp, #4]
   17dc0:	str	r2, [sp]
   17dc4:	mov	r3, r1
   17dc8:	movw	r2, #43996	; 0xabdc
   17dcc:	movt	r2, #1
   17dd0:	mov	r1, #1
   17dd4:	bl	113f0 <__fprintf_chk@plt>
   17dd8:	mov	r2, #5
   17ddc:	movw	r1, #44016	; 0xabf0
   17de0:	movt	r1, #1
   17de4:	mov	r0, #0
   17de8:	bl	1121c <dcgettext@plt>
   17dec:	movw	r3, #2022	; 0x7e6
   17df0:	str	r3, [sp]
   17df4:	mov	r3, r0
   17df8:	movw	r2, #44744	; 0xaec8
   17dfc:	movt	r2, #1
   17e00:	mov	r1, #1
   17e04:	mov	r0, r4
   17e08:	bl	113f0 <__fprintf_chk@plt>
   17e0c:	mov	r1, r4
   17e10:	mov	r0, #10
   17e14:	bl	11210 <fputc_unlocked@plt>
   17e18:	mov	r2, #5
   17e1c:	movw	r1, #44020	; 0xabf4
   17e20:	movt	r1, #1
   17e24:	mov	r0, #0
   17e28:	bl	1121c <dcgettext@plt>
   17e2c:	movw	r3, #44192	; 0xaca0
   17e30:	movt	r3, #1
   17e34:	mov	r2, r0
   17e38:	mov	r1, #1
   17e3c:	mov	r0, r4
   17e40:	bl	113f0 <__fprintf_chk@plt>
   17e44:	mov	r1, r4
   17e48:	mov	r0, #10
   17e4c:	bl	11210 <fputc_unlocked@plt>
   17e50:	cmp	r6, #9
   17e54:	ldrls	pc, [pc, r6, lsl #2]
   17e58:	b	1815c <__assert_fail@plt+0x6c7c>
   17e5c:	andeq	r7, r1, r8, asr #29
   17e60:	andeq	r7, r1, r0, lsr #29
   17e64:	ldrdeq	r7, [r1], -ip
   17e68:	andeq	r7, r1, r0, lsl pc
   17e6c:	andeq	r7, r1, ip, asr #30
   17e70:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   17e74:	ldrdeq	r7, [r1], -ip
   17e78:	andeq	r8, r1, r0, lsr r0
   17e7c:	andeq	r8, r1, ip, lsl #1
   17e80:	strdeq	r8, [r1], -r0
   17e84:	str	r3, [sp]
   17e88:	mov	r3, r2
   17e8c:	movw	r2, #44008	; 0xabe8
   17e90:	movt	r2, #1
   17e94:	mov	r1, #1
   17e98:	bl	113f0 <__fprintf_chk@plt>
   17e9c:	b	17dd8 <__assert_fail@plt+0x68f8>
   17ea0:	mov	r2, #5
   17ea4:	movw	r1, #44228	; 0xacc4
   17ea8:	movt	r1, #1
   17eac:	mov	r0, #0
   17eb0:	bl	1121c <dcgettext@plt>
   17eb4:	ldr	r3, [r5]
   17eb8:	mov	r2, r0
   17ebc:	mov	r1, #1
   17ec0:	mov	r0, r4
   17ec4:	bl	113f0 <__fprintf_chk@plt>
   17ec8:	add	sp, sp, #32
   17ecc:	ldrd	r4, [sp]
   17ed0:	ldr	r6, [sp, #8]
   17ed4:	add	sp, sp, #12
   17ed8:	pop	{pc}		; (ldr pc, [sp], #4)
   17edc:	mov	r2, #5
   17ee0:	movw	r1, #44244	; 0xacd4
   17ee4:	movt	r1, #1
   17ee8:	mov	r0, #0
   17eec:	bl	1121c <dcgettext@plt>
   17ef0:	ldr	r3, [r5, #4]
   17ef4:	str	r3, [sp]
   17ef8:	ldr	r3, [r5]
   17efc:	mov	r2, r0
   17f00:	mov	r1, #1
   17f04:	mov	r0, r4
   17f08:	bl	113f0 <__fprintf_chk@plt>
   17f0c:	b	17ec8 <__assert_fail@plt+0x69e8>
   17f10:	mov	r2, #5
   17f14:	movw	r1, #44268	; 0xacec
   17f18:	movt	r1, #1
   17f1c:	mov	r0, #0
   17f20:	bl	1121c <dcgettext@plt>
   17f24:	ldr	r3, [r5, #8]
   17f28:	str	r3, [sp, #4]
   17f2c:	ldr	r3, [r5, #4]
   17f30:	str	r3, [sp]
   17f34:	ldr	r3, [r5]
   17f38:	mov	r2, r0
   17f3c:	mov	r1, #1
   17f40:	mov	r0, r4
   17f44:	bl	113f0 <__fprintf_chk@plt>
   17f48:	b	17ec8 <__assert_fail@plt+0x69e8>
   17f4c:	mov	r2, #5
   17f50:	movw	r1, #44296	; 0xad08
   17f54:	movt	r1, #1
   17f58:	mov	r0, #0
   17f5c:	bl	1121c <dcgettext@plt>
   17f60:	ldr	r3, [r5, #12]
   17f64:	str	r3, [sp, #8]
   17f68:	ldr	r3, [r5, #8]
   17f6c:	str	r3, [sp, #4]
   17f70:	ldr	r3, [r5, #4]
   17f74:	str	r3, [sp]
   17f78:	ldr	r3, [r5]
   17f7c:	mov	r2, r0
   17f80:	mov	r1, #1
   17f84:	mov	r0, r4
   17f88:	bl	113f0 <__fprintf_chk@plt>
   17f8c:	b	17ec8 <__assert_fail@plt+0x69e8>
   17f90:	mov	r2, #5
   17f94:	movw	r1, #44328	; 0xad28
   17f98:	movt	r1, #1
   17f9c:	mov	r0, #0
   17fa0:	bl	1121c <dcgettext@plt>
   17fa4:	ldr	r3, [r5, #16]
   17fa8:	str	r3, [sp, #12]
   17fac:	ldr	r3, [r5, #12]
   17fb0:	str	r3, [sp, #8]
   17fb4:	ldr	r3, [r5, #8]
   17fb8:	str	r3, [sp, #4]
   17fbc:	ldr	r3, [r5, #4]
   17fc0:	str	r3, [sp]
   17fc4:	ldr	r3, [r5]
   17fc8:	mov	r2, r0
   17fcc:	mov	r1, #1
   17fd0:	mov	r0, r4
   17fd4:	bl	113f0 <__fprintf_chk@plt>
   17fd8:	b	17ec8 <__assert_fail@plt+0x69e8>
   17fdc:	mov	r2, #5
   17fe0:	movw	r1, #44364	; 0xad4c
   17fe4:	movt	r1, #1
   17fe8:	mov	r0, #0
   17fec:	bl	1121c <dcgettext@plt>
   17ff0:	ldr	r3, [r5, #20]
   17ff4:	str	r3, [sp, #16]
   17ff8:	ldr	r3, [r5, #16]
   17ffc:	str	r3, [sp, #12]
   18000:	ldr	r3, [r5, #12]
   18004:	str	r3, [sp, #8]
   18008:	ldr	r3, [r5, #8]
   1800c:	str	r3, [sp, #4]
   18010:	ldr	r3, [r5, #4]
   18014:	str	r3, [sp]
   18018:	ldr	r3, [r5]
   1801c:	mov	r2, r0
   18020:	mov	r1, #1
   18024:	mov	r0, r4
   18028:	bl	113f0 <__fprintf_chk@plt>
   1802c:	b	17ec8 <__assert_fail@plt+0x69e8>
   18030:	mov	r2, #5
   18034:	movw	r1, #44404	; 0xad74
   18038:	movt	r1, #1
   1803c:	mov	r0, #0
   18040:	bl	1121c <dcgettext@plt>
   18044:	ldr	r3, [r5, #24]
   18048:	str	r3, [sp, #20]
   1804c:	ldr	r3, [r5, #20]
   18050:	str	r3, [sp, #16]
   18054:	ldr	r3, [r5, #16]
   18058:	str	r3, [sp, #12]
   1805c:	ldr	r3, [r5, #12]
   18060:	str	r3, [sp, #8]
   18064:	ldr	r3, [r5, #8]
   18068:	str	r3, [sp, #4]
   1806c:	ldr	r3, [r5, #4]
   18070:	str	r3, [sp]
   18074:	ldr	r3, [r5]
   18078:	mov	r2, r0
   1807c:	mov	r1, #1
   18080:	mov	r0, r4
   18084:	bl	113f0 <__fprintf_chk@plt>
   18088:	b	17ec8 <__assert_fail@plt+0x69e8>
   1808c:	mov	r2, #5
   18090:	movw	r1, #44448	; 0xada0
   18094:	movt	r1, #1
   18098:	mov	r0, #0
   1809c:	bl	1121c <dcgettext@plt>
   180a0:	ldr	r3, [r5, #28]
   180a4:	str	r3, [sp, #24]
   180a8:	ldr	r3, [r5, #24]
   180ac:	str	r3, [sp, #20]
   180b0:	ldr	r3, [r5, #20]
   180b4:	str	r3, [sp, #16]
   180b8:	ldr	r3, [r5, #16]
   180bc:	str	r3, [sp, #12]
   180c0:	ldr	r3, [r5, #12]
   180c4:	str	r3, [sp, #8]
   180c8:	ldr	r3, [r5, #8]
   180cc:	str	r3, [sp, #4]
   180d0:	ldr	r3, [r5, #4]
   180d4:	str	r3, [sp]
   180d8:	ldr	r3, [r5]
   180dc:	mov	r2, r0
   180e0:	mov	r1, #1
   180e4:	mov	r0, r4
   180e8:	bl	113f0 <__fprintf_chk@plt>
   180ec:	b	17ec8 <__assert_fail@plt+0x69e8>
   180f0:	mov	r2, #5
   180f4:	movw	r1, #44496	; 0xadd0
   180f8:	movt	r1, #1
   180fc:	mov	r0, #0
   18100:	bl	1121c <dcgettext@plt>
   18104:	ldr	r3, [r5, #32]
   18108:	str	r3, [sp, #28]
   1810c:	ldr	r3, [r5, #28]
   18110:	str	r3, [sp, #24]
   18114:	ldr	r3, [r5, #24]
   18118:	str	r3, [sp, #20]
   1811c:	ldr	r3, [r5, #20]
   18120:	str	r3, [sp, #16]
   18124:	ldr	r3, [r5, #16]
   18128:	str	r3, [sp, #12]
   1812c:	ldr	r3, [r5, #12]
   18130:	str	r3, [sp, #8]
   18134:	ldr	r3, [r5, #8]
   18138:	str	r3, [sp, #4]
   1813c:	ldr	r3, [r5, #4]
   18140:	str	r3, [sp]
   18144:	ldr	r3, [r5]
   18148:	mov	r2, r0
   1814c:	mov	r1, #1
   18150:	mov	r0, r4
   18154:	bl	113f0 <__fprintf_chk@plt>
   18158:	b	17ec8 <__assert_fail@plt+0x69e8>
   1815c:	mov	r2, #5
   18160:	movw	r1, #44548	; 0xae04
   18164:	movt	r1, #1
   18168:	mov	r0, #0
   1816c:	bl	1121c <dcgettext@plt>
   18170:	ldr	r3, [r5, #32]
   18174:	str	r3, [sp, #28]
   18178:	ldr	r3, [r5, #28]
   1817c:	str	r3, [sp, #24]
   18180:	ldr	r3, [r5, #24]
   18184:	str	r3, [sp, #20]
   18188:	ldr	r3, [r5, #20]
   1818c:	str	r3, [sp, #16]
   18190:	ldr	r3, [r5, #16]
   18194:	str	r3, [sp, #12]
   18198:	ldr	r3, [r5, #12]
   1819c:	str	r3, [sp, #8]
   181a0:	ldr	r3, [r5, #8]
   181a4:	str	r3, [sp, #4]
   181a8:	ldr	r3, [r5, #4]
   181ac:	str	r3, [sp]
   181b0:	ldr	r3, [r5]
   181b4:	mov	r2, r0
   181b8:	mov	r1, #1
   181bc:	mov	r0, r4
   181c0:	bl	113f0 <__fprintf_chk@plt>
   181c4:	b	17ec8 <__assert_fail@plt+0x69e8>
   181c8:	strd	r4, [sp, #-12]!
   181cc:	str	lr, [sp, #8]
   181d0:	sub	sp, sp, #12
   181d4:	ldr	r5, [sp, #24]
   181d8:	ldr	ip, [r5]
   181dc:	cmp	ip, #0
   181e0:	beq	18218 <__assert_fail@plt+0x6d38>
   181e4:	mov	lr, r5
   181e8:	mov	ip, #0
   181ec:	add	ip, ip, #1
   181f0:	ldr	r4, [lr, #4]!
   181f4:	cmp	r4, #0
   181f8:	bne	181ec <__assert_fail@plt+0x6d0c>
   181fc:	str	ip, [sp, #4]
   18200:	str	r5, [sp]
   18204:	bl	17d98 <__assert_fail@plt+0x68b8>
   18208:	add	sp, sp, #12
   1820c:	ldrd	r4, [sp]
   18210:	add	sp, sp, #8
   18214:	pop	{pc}		; (ldr pc, [sp], #4)
   18218:	mov	ip, #0
   1821c:	b	181fc <__assert_fail@plt+0x6d1c>
   18220:	strd	r4, [sp, #-12]!
   18224:	str	lr, [sp, #8]
   18228:	sub	sp, sp, #52	; 0x34
   1822c:	ldr	r5, [sp, #64]	; 0x40
   18230:	add	r4, sp, #8
   18234:	mov	ip, #0
   18238:	ldr	lr, [r5], #4
   1823c:	str	lr, [r4], #4
   18240:	cmp	lr, #0
   18244:	beq	18254 <__assert_fail@plt+0x6d74>
   18248:	add	ip, ip, #1
   1824c:	cmp	ip, #10
   18250:	bne	18238 <__assert_fail@plt+0x6d58>
   18254:	str	ip, [sp, #4]
   18258:	add	ip, sp, #8
   1825c:	str	ip, [sp]
   18260:	bl	17d98 <__assert_fail@plt+0x68b8>
   18264:	add	sp, sp, #52	; 0x34
   18268:	ldrd	r4, [sp]
   1826c:	add	sp, sp, #8
   18270:	pop	{pc}		; (ldr pc, [sp], #4)
   18274:	push	{r3}		; (str r3, [sp, #-4]!)
   18278:	push	{lr}		; (str lr, [sp, #-4]!)
   1827c:	sub	sp, sp, #16
   18280:	add	r3, sp, #24
   18284:	str	r3, [sp, #12]
   18288:	str	r3, [sp]
   1828c:	ldr	r3, [sp, #20]
   18290:	bl	18220 <__assert_fail@plt+0x6d40>
   18294:	add	sp, sp, #16
   18298:	pop	{lr}		; (ldr lr, [sp], #4)
   1829c:	add	sp, sp, #4
   182a0:	bx	lr
   182a4:	str	r4, [sp, #-8]!
   182a8:	str	lr, [sp, #4]
   182ac:	movw	r3, #50020	; 0xc364
   182b0:	movt	r3, #2
   182b4:	ldr	r1, [r3]
   182b8:	mov	r0, #10
   182bc:	bl	11210 <fputc_unlocked@plt>
   182c0:	mov	r2, #5
   182c4:	movw	r1, #44608	; 0xae40
   182c8:	movt	r1, #1
   182cc:	mov	r0, #0
   182d0:	bl	1121c <dcgettext@plt>
   182d4:	movw	r2, #44628	; 0xae54
   182d8:	movt	r2, #1
   182dc:	mov	r1, r0
   182e0:	mov	r0, #1
   182e4:	bl	113cc <__printf_chk@plt>
   182e8:	mov	r2, #5
   182ec:	movw	r1, #44652	; 0xae6c
   182f0:	movt	r1, #1
   182f4:	mov	r0, #0
   182f8:	bl	1121c <dcgettext@plt>
   182fc:	movw	r3, #42200	; 0xa4d8
   18300:	movt	r3, #1
   18304:	movw	r2, #42240	; 0xa500
   18308:	movt	r2, #1
   1830c:	mov	r1, r0
   18310:	mov	r0, #1
   18314:	bl	113cc <__printf_chk@plt>
   18318:	mov	r2, #5
   1831c:	movw	r1, #44672	; 0xae80
   18320:	movt	r1, #1
   18324:	mov	r0, #0
   18328:	bl	1121c <dcgettext@plt>
   1832c:	movw	r2, #44712	; 0xaea8
   18330:	movt	r2, #1
   18334:	mov	r1, r0
   18338:	mov	r0, #1
   1833c:	bl	113cc <__printf_chk@plt>
   18340:	ldr	r4, [sp]
   18344:	add	sp, sp, #4
   18348:	pop	{pc}		; (ldr pc, [sp], #4)
   1834c:	str	r4, [sp, #-8]!
   18350:	str	lr, [sp, #4]
   18354:	bl	11498 <aligned_alloc@plt>
   18358:	cmp	r0, #0
   1835c:	beq	1836c <__assert_fail@plt+0x6e8c>
   18360:	ldr	r4, [sp]
   18364:	add	sp, sp, #4
   18368:	pop	{pc}		; (ldr pc, [sp], #4)
   1836c:	bl	18804 <__assert_fail@plt+0x7324>
   18370:	str	r4, [sp, #-8]!
   18374:	str	lr, [sp, #4]
   18378:	bl	19098 <__assert_fail@plt+0x7bb8>
   1837c:	cmp	r0, #0
   18380:	beq	18390 <__assert_fail@plt+0x6eb0>
   18384:	ldr	r4, [sp]
   18388:	add	sp, sp, #4
   1838c:	pop	{pc}		; (ldr pc, [sp], #4)
   18390:	bl	18804 <__assert_fail@plt+0x7324>
   18394:	str	r4, [sp, #-8]!
   18398:	str	lr, [sp, #4]
   1839c:	bl	19098 <__assert_fail@plt+0x7bb8>
   183a0:	cmp	r0, #0
   183a4:	beq	183b4 <__assert_fail@plt+0x6ed4>
   183a8:	ldr	r4, [sp]
   183ac:	add	sp, sp, #4
   183b0:	pop	{pc}		; (ldr pc, [sp], #4)
   183b4:	bl	18804 <__assert_fail@plt+0x7324>
   183b8:	str	r4, [sp, #-8]!
   183bc:	str	lr, [sp, #4]
   183c0:	bl	18370 <__assert_fail@plt+0x6e90>
   183c4:	ldr	r4, [sp]
   183c8:	add	sp, sp, #4
   183cc:	pop	{pc}		; (ldr pc, [sp], #4)
   183d0:	strd	r4, [sp, #-16]!
   183d4:	str	r6, [sp, #8]
   183d8:	str	lr, [sp, #12]
   183dc:	mov	r5, r0
   183e0:	mov	r4, r1
   183e4:	bl	190d4 <__assert_fail@plt+0x7bf4>
   183e8:	cmp	r0, #0
   183ec:	beq	18400 <__assert_fail@plt+0x6f20>
   183f0:	ldrd	r4, [sp]
   183f4:	ldr	r6, [sp, #8]
   183f8:	add	sp, sp, #12
   183fc:	pop	{pc}		; (ldr pc, [sp], #4)
   18400:	adds	r4, r4, #0
   18404:	movne	r4, #1
   18408:	cmp	r5, #0
   1840c:	moveq	r4, #1
   18410:	cmp	r4, #0
   18414:	beq	183f0 <__assert_fail@plt+0x6f10>
   18418:	bl	18804 <__assert_fail@plt+0x7324>
   1841c:	str	r4, [sp, #-8]!
   18420:	str	lr, [sp, #4]
   18424:	cmp	r1, #0
   18428:	orreq	r1, r1, #1
   1842c:	bl	190d4 <__assert_fail@plt+0x7bf4>
   18430:	cmp	r0, #0
   18434:	beq	18444 <__assert_fail@plt+0x6f64>
   18438:	ldr	r4, [sp]
   1843c:	add	sp, sp, #4
   18440:	pop	{pc}		; (ldr pc, [sp], #4)
   18444:	bl	18804 <__assert_fail@plt+0x7324>
   18448:	strd	r4, [sp, #-16]!
   1844c:	str	r6, [sp, #8]
   18450:	str	lr, [sp, #12]
   18454:	mov	r4, r0
   18458:	mov	r6, r1
   1845c:	mov	r5, r2
   18460:	bl	19270 <__assert_fail@plt+0x7d90>
   18464:	cmp	r0, #0
   18468:	beq	1847c <__assert_fail@plt+0x6f9c>
   1846c:	ldrd	r4, [sp]
   18470:	ldr	r6, [sp, #8]
   18474:	add	sp, sp, #12
   18478:	pop	{pc}		; (ldr pc, [sp], #4)
   1847c:	cmp	r4, #0
   18480:	beq	18490 <__assert_fail@plt+0x6fb0>
   18484:	cmp	r6, #0
   18488:	cmpne	r5, #0
   1848c:	beq	1846c <__assert_fail@plt+0x6f8c>
   18490:	bl	18804 <__assert_fail@plt+0x7324>
   18494:	str	r4, [sp, #-8]!
   18498:	str	lr, [sp, #4]
   1849c:	bl	18448 <__assert_fail@plt+0x6f68>
   184a0:	ldr	r4, [sp]
   184a4:	add	sp, sp, #4
   184a8:	pop	{pc}		; (ldr pc, [sp], #4)
   184ac:	str	r4, [sp, #-8]!
   184b0:	str	lr, [sp, #4]
   184b4:	mov	ip, r1
   184b8:	mov	r3, r2
   184bc:	cmp	r2, #0
   184c0:	cmpne	r1, #0
   184c4:	moveq	r3, #1
   184c8:	moveq	ip, r3
   184cc:	mov	r2, r3
   184d0:	mov	r1, ip
   184d4:	bl	19270 <__assert_fail@plt+0x7d90>
   184d8:	cmp	r0, #0
   184dc:	beq	184ec <__assert_fail@plt+0x700c>
   184e0:	ldr	r4, [sp]
   184e4:	add	sp, sp, #4
   184e8:	pop	{pc}		; (ldr pc, [sp], #4)
   184ec:	bl	18804 <__assert_fail@plt+0x7324>
   184f0:	str	r4, [sp, #-8]!
   184f4:	str	lr, [sp, #4]
   184f8:	mov	r2, r1
   184fc:	mov	r1, r0
   18500:	mov	r0, #0
   18504:	bl	18448 <__assert_fail@plt+0x6f68>
   18508:	ldr	r4, [sp]
   1850c:	add	sp, sp, #4
   18510:	pop	{pc}		; (ldr pc, [sp], #4)
   18514:	str	r4, [sp, #-8]!
   18518:	str	lr, [sp, #4]
   1851c:	mov	r2, r1
   18520:	mov	r1, r0
   18524:	mov	r0, #0
   18528:	bl	184ac <__assert_fail@plt+0x6fcc>
   1852c:	ldr	r4, [sp]
   18530:	add	sp, sp, #4
   18534:	pop	{pc}		; (ldr pc, [sp], #4)
   18538:	strd	r4, [sp, #-16]!
   1853c:	str	r6, [sp, #8]
   18540:	str	lr, [sp, #12]
   18544:	mov	r5, r1
   18548:	ldr	r4, [r1]
   1854c:	cmp	r0, #0
   18550:	beq	18580 <__assert_fail@plt+0x70a0>
   18554:	lsr	r3, r4, #1
   18558:	add	r3, r3, #1
   1855c:	adds	r4, r4, r3
   18560:	bcs	1859c <__assert_fail@plt+0x70bc>
   18564:	mov	r1, r4
   18568:	bl	18448 <__assert_fail@plt+0x6f68>
   1856c:	str	r4, [r5]
   18570:	ldrd	r4, [sp]
   18574:	ldr	r6, [sp, #8]
   18578:	add	sp, sp, #12
   1857c:	pop	{pc}		; (ldr pc, [sp], #4)
   18580:	cmp	r4, #0
   18584:	bne	18564 <__assert_fail@plt+0x7084>
   18588:	mov	r4, #64	; 0x40
   1858c:	udiv	r4, r4, r2
   18590:	cmp	r2, #64	; 0x40
   18594:	addhi	r4, r4, #1
   18598:	b	18564 <__assert_fail@plt+0x7084>
   1859c:	bl	18804 <__assert_fail@plt+0x7324>
   185a0:	str	r4, [sp, #-8]!
   185a4:	str	lr, [sp, #4]
   185a8:	mov	r2, #1
   185ac:	bl	18538 <__assert_fail@plt+0x7058>
   185b0:	ldr	r4, [sp]
   185b4:	add	sp, sp, #4
   185b8:	pop	{pc}		; (ldr pc, [sp], #4)
   185bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   185c0:	strd	r6, [sp, #8]
   185c4:	str	r8, [sp, #16]
   185c8:	str	lr, [sp, #20]
   185cc:	mov	r5, r1
   185d0:	ldr	lr, [sp, #24]
   185d4:	ldr	ip, [r1]
   185d8:	asr	r4, ip, #1
   185dc:	adds	r4, ip, r4
   185e0:	movvs	r1, #1
   185e4:	movvc	r1, #0
   185e8:	cmp	r1, #0
   185ec:	mvnne	r4, #-2147483648	; 0x80000000
   185f0:	mvn	r8, r3
   185f4:	lsr	r8, r8, #31
   185f8:	cmp	r3, r4
   185fc:	movge	r1, #0
   18600:	andlt	r1, r8, #1
   18604:	cmp	r1, #0
   18608:	movne	r4, r3
   1860c:	smull	r6, r7, r4, lr
   18610:	asr	r1, r6, #31
   18614:	cmp	r1, r7
   18618:	bne	18630 <__assert_fail@plt+0x7150>
   1861c:	mov	r1, r6
   18620:	cmp	r6, #63	; 0x3f
   18624:	movle	r1, #64	; 0x40
   18628:	ble	18634 <__assert_fail@plt+0x7154>
   1862c:	b	18640 <__assert_fail@plt+0x7160>
   18630:	mvn	r1, #-2147483648	; 0x80000000
   18634:	sdiv	r4, r1, lr
   18638:	mls	r6, lr, r4, r1
   1863c:	sub	r1, r1, r6
   18640:	cmp	r0, #0
   18644:	moveq	r6, #0
   18648:	streq	r6, [r5]
   1864c:	sub	r6, r4, ip
   18650:	cmp	r6, r2
   18654:	bge	1868c <__assert_fail@plt+0x71ac>
   18658:	adds	r2, ip, r2
   1865c:	mov	r4, r2
   18660:	bvs	186a8 <__assert_fail@plt+0x71c8>
   18664:	cmp	r2, r3
   18668:	movle	r3, #0
   1866c:	andgt	r3, r8, #1
   18670:	cmp	r3, #0
   18674:	bne	186a8 <__assert_fail@plt+0x71c8>
   18678:	smull	r2, r3, r2, lr
   1867c:	asr	ip, r2, #31
   18680:	mov	r1, r2
   18684:	cmp	ip, r3
   18688:	bne	186a8 <__assert_fail@plt+0x71c8>
   1868c:	bl	183d0 <__assert_fail@plt+0x6ef0>
   18690:	str	r4, [r5]
   18694:	ldrd	r4, [sp]
   18698:	ldrd	r6, [sp, #8]
   1869c:	ldr	r8, [sp, #16]
   186a0:	add	sp, sp, #20
   186a4:	pop	{pc}		; (ldr pc, [sp], #4)
   186a8:	bl	18804 <__assert_fail@plt+0x7324>
   186ac:	str	r4, [sp, #-8]!
   186b0:	str	lr, [sp, #4]
   186b4:	bl	19024 <__assert_fail@plt+0x7b44>
   186b8:	cmp	r0, #0
   186bc:	beq	186cc <__assert_fail@plt+0x71ec>
   186c0:	ldr	r4, [sp]
   186c4:	add	sp, sp, #4
   186c8:	pop	{pc}		; (ldr pc, [sp], #4)
   186cc:	bl	18804 <__assert_fail@plt+0x7324>
   186d0:	str	r4, [sp, #-8]!
   186d4:	str	lr, [sp, #4]
   186d8:	mov	r1, #1
   186dc:	bl	186ac <__assert_fail@plt+0x71cc>
   186e0:	ldr	r4, [sp]
   186e4:	add	sp, sp, #4
   186e8:	pop	{pc}		; (ldr pc, [sp], #4)
   186ec:	str	r4, [sp, #-8]!
   186f0:	str	lr, [sp, #4]
   186f4:	bl	19024 <__assert_fail@plt+0x7b44>
   186f8:	cmp	r0, #0
   186fc:	beq	1870c <__assert_fail@plt+0x722c>
   18700:	ldr	r4, [sp]
   18704:	add	sp, sp, #4
   18708:	pop	{pc}		; (ldr pc, [sp], #4)
   1870c:	bl	18804 <__assert_fail@plt+0x7324>
   18710:	str	r4, [sp, #-8]!
   18714:	str	lr, [sp, #4]
   18718:	mov	r1, #1
   1871c:	bl	186ec <__assert_fail@plt+0x720c>
   18720:	ldr	r4, [sp]
   18724:	add	sp, sp, #4
   18728:	pop	{pc}		; (ldr pc, [sp], #4)
   1872c:	strd	r4, [sp, #-16]!
   18730:	str	r6, [sp, #8]
   18734:	str	lr, [sp, #12]
   18738:	mov	r5, r0
   1873c:	mov	r4, r1
   18740:	mov	r0, r1
   18744:	bl	18370 <__assert_fail@plt+0x6e90>
   18748:	mov	r2, r4
   1874c:	mov	r1, r5
   18750:	bl	111c8 <memcpy@plt>
   18754:	ldrd	r4, [sp]
   18758:	ldr	r6, [sp, #8]
   1875c:	add	sp, sp, #12
   18760:	pop	{pc}		; (ldr pc, [sp], #4)
   18764:	strd	r4, [sp, #-16]!
   18768:	str	r6, [sp, #8]
   1876c:	str	lr, [sp, #12]
   18770:	mov	r5, r0
   18774:	mov	r4, r1
   18778:	mov	r0, r1
   1877c:	bl	18394 <__assert_fail@plt+0x6eb4>
   18780:	mov	r2, r4
   18784:	mov	r1, r5
   18788:	bl	111c8 <memcpy@plt>
   1878c:	ldrd	r4, [sp]
   18790:	ldr	r6, [sp, #8]
   18794:	add	sp, sp, #12
   18798:	pop	{pc}		; (ldr pc, [sp], #4)
   1879c:	strd	r4, [sp, #-16]!
   187a0:	str	r6, [sp, #8]
   187a4:	str	lr, [sp, #12]
   187a8:	mov	r5, r0
   187ac:	mov	r4, r1
   187b0:	add	r0, r1, #1
   187b4:	bl	18394 <__assert_fail@plt+0x6eb4>
   187b8:	mov	r2, #0
   187bc:	strb	r2, [r0, r4]
   187c0:	mov	r2, r4
   187c4:	mov	r1, r5
   187c8:	bl	111c8 <memcpy@plt>
   187cc:	ldrd	r4, [sp]
   187d0:	ldr	r6, [sp, #8]
   187d4:	add	sp, sp, #12
   187d8:	pop	{pc}		; (ldr pc, [sp], #4)
   187dc:	str	r4, [sp, #-8]!
   187e0:	str	lr, [sp, #4]
   187e4:	mov	r4, r0
   187e8:	bl	11354 <strlen@plt>
   187ec:	add	r1, r0, #1
   187f0:	mov	r0, r4
   187f4:	bl	1872c <__assert_fail@plt+0x724c>
   187f8:	ldr	r4, [sp]
   187fc:	add	sp, sp, #4
   18800:	pop	{pc}		; (ldr pc, [sp], #4)
   18804:	str	r4, [sp, #-8]!
   18808:	str	lr, [sp, #4]
   1880c:	movw	r3, #49512	; 0xc168
   18810:	movt	r3, #2
   18814:	ldr	r4, [r3]
   18818:	mov	r2, #5
   1881c:	movw	r1, #44792	; 0xaef8
   18820:	movt	r1, #1
   18824:	mov	r0, #0
   18828:	bl	1121c <dcgettext@plt>
   1882c:	mov	r3, r0
   18830:	movw	r2, #39944	; 0x9c08
   18834:	movt	r2, #1
   18838:	mov	r1, #0
   1883c:	mov	r0, r4
   18840:	bl	112d0 <error@plt>
   18844:	bl	114bc <abort@plt>
   18848:	strd	r4, [sp, #-16]!
   1884c:	str	r6, [sp, #8]
   18850:	str	lr, [sp, #12]
   18854:	sub	sp, sp, #16
   18858:	mov	r6, r0
   1885c:	mov	r4, r2
   18860:	mov	r5, r3
   18864:	ldr	r3, [sp, #40]	; 0x28
   18868:	str	r3, [sp]
   1886c:	add	r3, sp, #8
   18870:	mov	r2, r1
   18874:	mov	r1, #0
   18878:	bl	18ad4 <__assert_fail@plt+0x75f4>
   1887c:	cmp	r0, #0
   18880:	bne	188f8 <__assert_fail@plt+0x7418>
   18884:	ldrd	r0, [sp, #8]
   18888:	ldrd	r2, [sp, #32]
   1888c:	cmp	r1, r3
   18890:	cmpeq	r0, r2
   18894:	movhi	r3, #1
   18898:	movls	r3, #0
   1889c:	cmp	r1, r5
   188a0:	cmpeq	r0, r4
   188a4:	orrcc	r3, r3, #1
   188a8:	cmp	r3, #0
   188ac:	bne	188c4 <__assert_fail@plt+0x73e4>
   188b0:	add	sp, sp, #16
   188b4:	ldrd	r4, [sp]
   188b8:	ldr	r6, [sp, #8]
   188bc:	add	sp, sp, #12
   188c0:	pop	{pc}		; (ldr pc, [sp], #4)
   188c4:	mvn	r2, #-1073741824	; 0xc0000000
   188c8:	mov	r3, #0
   188cc:	cmp	r1, r3
   188d0:	cmpeq	r0, r2
   188d4:	bls	188e8 <__assert_fail@plt+0x7408>
   188d8:	bl	1139c <__errno_location@plt>
   188dc:	mov	r3, #75	; 0x4b
   188e0:	str	r3, [r0]
   188e4:	b	18908 <__assert_fail@plt+0x7428>
   188e8:	bl	1139c <__errno_location@plt>
   188ec:	mov	r3, #34	; 0x22
   188f0:	str	r3, [r0]
   188f4:	b	18908 <__assert_fail@plt+0x7428>
   188f8:	cmp	r0, #1
   188fc:	beq	1894c <__assert_fail@plt+0x746c>
   18900:	cmp	r0, #3
   18904:	beq	1895c <__assert_fail@plt+0x747c>
   18908:	ldr	r3, [sp, #48]	; 0x30
   1890c:	cmp	r3, #0
   18910:	moveq	r3, #1
   18914:	str	r3, [sp, #48]	; 0x30
   18918:	bl	1139c <__errno_location@plt>
   1891c:	ldr	r4, [r0]
   18920:	cmp	r4, #22
   18924:	moveq	r4, #0
   18928:	mov	r0, r6
   1892c:	bl	17920 <__assert_fail@plt+0x6440>
   18930:	str	r0, [sp]
   18934:	ldr	r3, [sp, #44]	; 0x2c
   18938:	movw	r2, #43076	; 0xa844
   1893c:	movt	r2, #1
   18940:	mov	r1, r4
   18944:	ldr	r0, [sp, #48]	; 0x30
   18948:	bl	112d0 <error@plt>
   1894c:	bl	1139c <__errno_location@plt>
   18950:	mov	r3, #75	; 0x4b
   18954:	str	r3, [r0]
   18958:	b	18908 <__assert_fail@plt+0x7428>
   1895c:	bl	1139c <__errno_location@plt>
   18960:	mov	r3, #0
   18964:	str	r3, [r0]
   18968:	b	18908 <__assert_fail@plt+0x7428>
   1896c:	strd	r4, [sp, #-12]!
   18970:	str	lr, [sp, #8]
   18974:	sub	sp, sp, #28
   18978:	ldr	r1, [sp, #56]	; 0x38
   1897c:	str	r1, [sp, #16]
   18980:	ldr	r1, [sp, #52]	; 0x34
   18984:	str	r1, [sp, #12]
   18988:	ldr	r1, [sp, #48]	; 0x30
   1898c:	str	r1, [sp, #8]
   18990:	ldrd	r4, [sp, #40]	; 0x28
   18994:	strd	r4, [sp]
   18998:	mov	r1, #10
   1899c:	bl	18848 <__assert_fail@plt+0x7368>
   189a0:	add	sp, sp, #28
   189a4:	ldrd	r4, [sp]
   189a8:	add	sp, sp, #8
   189ac:	pop	{pc}		; (ldr pc, [sp], #4)
   189b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   189b4:	strd	r6, [sp, #8]
   189b8:	strd	r8, [sp, #16]
   189bc:	strd	sl, [sp, #24]
   189c0:	str	lr, [sp, #32]
   189c4:	sub	sp, sp, #12
   189c8:	str	r0, [sp, #4]
   189cc:	cmp	r2, #0
   189d0:	beq	18acc <__assert_fail@plt+0x75ec>
   189d4:	sub	ip, r2, #1
   189d8:	ldrd	r2, [r0]
   189dc:	mov	r0, #0
   189e0:	mov	r8, r1
   189e4:	asr	r9, r1, #31
   189e8:	str	r1, [sp]
   189ec:	b	18a3c <__assert_fail@plt+0x755c>
   189f0:	orrs	r4, r2, r3
   189f4:	movne	lr, #1
   189f8:	b	18a4c <__assert_fail@plt+0x756c>
   189fc:	mov	sl, r3
   18a00:	ldr	fp, [sp]
   18a04:	umull	r6, r7, r1, r2
   18a08:	mov	r4, r7
   18a0c:	mov	r5, #0
   18a10:	umlal	r4, r5, sl, fp
   18a14:	cmp	r5, #0
   18a18:	bne	18a80 <__assert_fail@plt+0x75a0>
   18a1c:	cmp	lr, #0
   18a20:	bne	18a98 <__assert_fail@plt+0x75b8>
   18a24:	mov	r2, r6
   18a28:	mov	r3, r4
   18a2c:	orr	r0, r0, lr
   18a30:	sub	ip, ip, #1
   18a34:	cmn	ip, #1
   18a38:	beq	18aa8 <__assert_fail@plt+0x75c8>
   18a3c:	mov	lr, #0
   18a40:	cmp	r8, #0
   18a44:	sbcs	r4, r9, #0
   18a48:	blt	189f0 <__assert_fail@plt+0x7510>
   18a4c:	cmp	r9, #0
   18a50:	bne	18a6c <__assert_fail@plt+0x758c>
   18a54:	cmp	r3, #0
   18a58:	bne	189fc <__assert_fail@plt+0x751c>
   18a5c:	umull	r2, r3, r1, r2
   18a60:	mov	r6, r2
   18a64:	mov	r4, r3
   18a68:	b	18a1c <__assert_fail@plt+0x753c>
   18a6c:	cmp	r3, #0
   18a70:	bne	18a80 <__assert_fail@plt+0x75a0>
   18a74:	mov	sl, r9
   18a78:	mov	fp, r2
   18a7c:	b	18a04 <__assert_fail@plt+0x7524>
   18a80:	mul	r4, r1, r3
   18a84:	mla	r4, r2, r9, r4
   18a88:	umull	r6, r7, r1, r2
   18a8c:	add	r4, r4, r7
   18a90:	mov	lr, #1
   18a94:	b	18a1c <__assert_fail@plt+0x753c>
   18a98:	mvn	r2, #0
   18a9c:	mvn	r3, #0
   18aa0:	mov	lr, #1
   18aa4:	b	18a2c <__assert_fail@plt+0x754c>
   18aa8:	ldr	r1, [sp, #4]
   18aac:	strd	r2, [r1]
   18ab0:	add	sp, sp, #12
   18ab4:	ldrd	r4, [sp]
   18ab8:	ldrd	r6, [sp, #8]
   18abc:	ldrd	r8, [sp, #16]
   18ac0:	ldrd	sl, [sp, #24]
   18ac4:	add	sp, sp, #32
   18ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   18acc:	mov	r0, #0
   18ad0:	b	18ab0 <__assert_fail@plt+0x75d0>
   18ad4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18ad8:	strd	r6, [sp, #8]
   18adc:	strd	r8, [sp, #16]
   18ae0:	str	lr, [sp, #24]
   18ae4:	sub	sp, sp, #20
   18ae8:	cmp	r2, #36	; 0x24
   18aec:	bhi	18b40 <__assert_fail@plt+0x7660>
   18af0:	mov	r5, r0
   18af4:	mov	r6, r1
   18af8:	mov	r7, r2
   18afc:	mov	r9, r3
   18b00:	cmp	r1, #0
   18b04:	addeq	r6, sp, #12
   18b08:	bl	1139c <__errno_location@plt>
   18b0c:	mov	r8, r0
   18b10:	mov	r3, #0
   18b14:	str	r3, [r0]
   18b18:	ldrb	r4, [r5]
   18b1c:	bl	1133c <__ctype_b_loc@plt>
   18b20:	ldr	r1, [r0]
   18b24:	mov	r2, r5
   18b28:	lsl	r3, r4, #1
   18b2c:	ldrh	r3, [r1, r3]
   18b30:	tst	r3, #8192	; 0x2000
   18b34:	beq	18b60 <__assert_fail@plt+0x7680>
   18b38:	ldrb	r4, [r2, #1]!
   18b3c:	b	18b28 <__assert_fail@plt+0x7648>
   18b40:	movw	r3, #44812	; 0xaf0c
   18b44:	movt	r3, #1
   18b48:	mov	r2, #85	; 0x55
   18b4c:	movw	r1, #44824	; 0xaf18
   18b50:	movt	r1, #1
   18b54:	movw	r0, #44840	; 0xaf28
   18b58:	movt	r0, #1
   18b5c:	bl	114e0 <__assert_fail@plt>
   18b60:	cmp	r4, #45	; 0x2d
   18b64:	moveq	r4, #4
   18b68:	beq	18cfc <__assert_fail@plt+0x781c>
   18b6c:	mov	r3, #0
   18b70:	mov	r2, r7
   18b74:	mov	r1, r6
   18b78:	mov	r0, r5
   18b7c:	bl	111d4 <__strtoull_internal@plt>
   18b80:	strd	r0, [sp]
   18b84:	ldr	r7, [r6]
   18b88:	cmp	r7, r5
   18b8c:	beq	18bb0 <__assert_fail@plt+0x76d0>
   18b90:	ldr	r3, [r8]
   18b94:	cmp	r3, #0
   18b98:	beq	18cd4 <__assert_fail@plt+0x77f4>
   18b9c:	cmp	r3, #34	; 0x22
   18ba0:	moveq	r4, #1
   18ba4:	beq	18cd8 <__assert_fail@plt+0x77f8>
   18ba8:	mov	r4, #4
   18bac:	b	18cfc <__assert_fail@plt+0x781c>
   18bb0:	ldr	r3, [sp, #48]	; 0x30
   18bb4:	cmp	r3, #0
   18bb8:	beq	19014 <__assert_fail@plt+0x7b34>
   18bbc:	ldrb	r1, [r5]
   18bc0:	cmp	r1, #0
   18bc4:	moveq	r4, #4
   18bc8:	beq	18cfc <__assert_fail@plt+0x781c>
   18bcc:	mov	r0, r3
   18bd0:	bl	1136c <strchr@plt>
   18bd4:	cmp	r0, #0
   18bd8:	beq	1901c <__assert_fail@plt+0x7b3c>
   18bdc:	mov	r2, #1
   18be0:	mov	r3, #0
   18be4:	strd	r2, [sp]
   18be8:	ldrb	r5, [r7]
   18bec:	mov	r4, #0
   18bf0:	mov	r1, r5
   18bf4:	ldr	r0, [sp, #48]	; 0x30
   18bf8:	bl	1136c <strchr@plt>
   18bfc:	cmp	r0, #0
   18c00:	beq	18d18 <__assert_fail@plt+0x7838>
   18c04:	sub	r3, r5, #69	; 0x45
   18c08:	cmp	r3, #47	; 0x2f
   18c0c:	ldrls	pc, [pc, r3, lsl #2]
   18c10:	b	18e64 <__assert_fail@plt+0x7984>
   18c14:	andeq	r8, r1, r8, lsr #26
   18c18:	andeq	r8, r1, r4, ror #28
   18c1c:	andeq	r8, r1, r8, lsr #26
   18c20:	andeq	r8, r1, r4, ror #28
   18c24:	andeq	r8, r1, r4, ror #28
   18c28:	andeq	r8, r1, r4, ror #28
   18c2c:	andeq	r8, r1, r8, lsr #26
   18c30:	andeq	r8, r1, r4, ror #28
   18c34:	andeq	r8, r1, r8, lsr #26
   18c38:	andeq	r8, r1, r4, ror #28
   18c3c:	andeq	r8, r1, r4, ror #28
   18c40:	andeq	r8, r1, r8, lsr #26
   18c44:	andeq	r8, r1, r4, ror #28
   18c48:	andeq	r8, r1, r4, ror #28
   18c4c:	andeq	r8, r1, r4, ror #28
   18c50:	andeq	r8, r1, r8, lsr #26
   18c54:	andeq	r8, r1, r4, ror #28
   18c58:	andeq	r8, r1, r4, ror #28
   18c5c:	andeq	r8, r1, r4, ror #28
   18c60:	andeq	r8, r1, r4, ror #28
   18c64:	andeq	r8, r1, r8, lsr #26
   18c68:	andeq	r8, r1, r8, lsr #26
   18c6c:	andeq	r8, r1, r4, ror #28
   18c70:	andeq	r8, r1, r4, ror #28
   18c74:	andeq	r8, r1, r4, ror #28
   18c78:	andeq	r8, r1, r4, ror #28
   18c7c:	andeq	r8, r1, r4, ror #28
   18c80:	andeq	r8, r1, r4, ror #28
   18c84:	andeq	r8, r1, r4, ror #28
   18c88:	andeq	r8, r1, r4, ror #28
   18c8c:	andeq	r8, r1, r4, ror #28
   18c90:	andeq	r8, r1, r4, ror #28
   18c94:	andeq	r8, r1, r4, ror #28
   18c98:	andeq	r8, r1, r4, ror #28
   18c9c:	andeq	r8, r1, r8, lsr #26
   18ca0:	andeq	r8, r1, r4, ror #28
   18ca4:	andeq	r8, r1, r4, ror #28
   18ca8:	andeq	r8, r1, r4, ror #28
   18cac:	andeq	r8, r1, r8, lsr #26
   18cb0:	andeq	r8, r1, r4, ror #28
   18cb4:	andeq	r8, r1, r8, lsr #26
   18cb8:	andeq	r8, r1, r4, ror #28
   18cbc:	andeq	r8, r1, r4, ror #28
   18cc0:	andeq	r8, r1, r4, ror #28
   18cc4:	andeq	r8, r1, r4, ror #28
   18cc8:	andeq	r8, r1, r4, ror #28
   18ccc:	andeq	r8, r1, r4, ror #28
   18cd0:	andeq	r8, r1, r8, lsr #26
   18cd4:	mov	r4, #0
   18cd8:	ldr	r3, [sp, #48]	; 0x30
   18cdc:	cmp	r3, #0
   18ce0:	strdeq	r0, [r9]
   18ce4:	beq	18cfc <__assert_fail@plt+0x781c>
   18ce8:	ldrb	r5, [r7]
   18cec:	cmp	r5, #0
   18cf0:	bne	18bf0 <__assert_fail@plt+0x7710>
   18cf4:	ldrd	r2, [sp]
   18cf8:	strd	r2, [r9]
   18cfc:	mov	r0, r4
   18d00:	add	sp, sp, #20
   18d04:	ldrd	r4, [sp]
   18d08:	ldrd	r6, [sp, #8]
   18d0c:	ldrd	r8, [sp, #16]
   18d10:	add	sp, sp, #24
   18d14:	pop	{pc}		; (ldr pc, [sp], #4)
   18d18:	ldrd	r2, [sp]
   18d1c:	strd	r2, [r9]
   18d20:	orr	r4, r4, #2
   18d24:	b	18cfc <__assert_fail@plt+0x781c>
   18d28:	mov	r1, #48	; 0x30
   18d2c:	ldr	r0, [sp, #48]	; 0x30
   18d30:	bl	1136c <strchr@plt>
   18d34:	cmp	r0, #0
   18d38:	beq	18e70 <__assert_fail@plt+0x7990>
   18d3c:	ldrb	r3, [r7, #1]
   18d40:	cmp	r3, #68	; 0x44
   18d44:	beq	18e7c <__assert_fail@plt+0x799c>
   18d48:	cmp	r3, #105	; 0x69
   18d4c:	beq	18e4c <__assert_fail@plt+0x796c>
   18d50:	cmp	r3, #66	; 0x42
   18d54:	moveq	r7, #2
   18d58:	movne	r7, #1
   18d5c:	moveq	r1, #1000	; 0x3e8
   18d60:	movne	r1, #1024	; 0x400
   18d64:	sub	r5, r5, #66	; 0x42
   18d68:	cmp	r5, #53	; 0x35
   18d6c:	ldrls	pc, [pc, r5, lsl #2]
   18d70:	b	18fe0 <__assert_fail@plt+0x7b00>
   18d74:	ldrdeq	r8, [r1], -r0
   18d78:	andeq	r8, r1, r0, ror #31
   18d7c:	andeq	r8, r1, r0, ror #31
   18d80:	andeq	r8, r1, r8, lsl pc
   18d84:	andeq	r8, r1, r0, ror #31
   18d88:	andeq	r8, r1, r8, lsr #30
   18d8c:	andeq	r8, r1, r0, ror #31
   18d90:	andeq	r8, r1, r0, ror #31
   18d94:	andeq	r8, r1, r0, ror #31
   18d98:	andeq	r8, r1, r8, lsr pc
   18d9c:	andeq	r8, r1, r0, ror #31
   18da0:	andeq	r8, r1, r8, asr #30
   18da4:	andeq	r8, r1, r0, ror #31
   18da8:	andeq	r8, r1, r0, ror #31
   18dac:	andeq	r8, r1, r8, asr pc
   18db0:	andeq	r8, r1, r0, ror #31
   18db4:	andeq	r8, r1, r0, ror #31
   18db8:	andeq	r8, r1, r0, ror #31
   18dbc:	andeq	r8, r1, r8, ror #30
   18dc0:	andeq	r8, r1, r0, ror #31
   18dc4:	andeq	r8, r1, r0, ror #31
   18dc8:	andeq	r8, r1, r0, ror #31
   18dcc:	andeq	r8, r1, r0, ror #31
   18dd0:	andeq	r8, r1, r0, asr #31
   18dd4:	ldrdeq	r8, [r1], -r0
   18dd8:	andeq	r8, r1, r0, ror #31
   18ddc:	andeq	r8, r1, r0, ror #31
   18de0:	andeq	r8, r1, r0, ror #31
   18de4:	andeq	r8, r1, r0, ror #31
   18de8:	andeq	r8, r1, r0, ror #31
   18dec:	andeq	r8, r1, r0, ror #31
   18df0:	andeq	r8, r1, r0, ror #31
   18df4:	andeq	r8, r1, r8, lsl #29
   18df8:	strdeq	r8, [r1], -r0
   18dfc:	andeq	r8, r1, r0, ror #31
   18e00:	andeq	r8, r1, r0, ror #31
   18e04:	andeq	r8, r1, r0, ror #31
   18e08:	andeq	r8, r1, r8, lsr #30
   18e0c:	andeq	r8, r1, r0, ror #31
   18e10:	andeq	r8, r1, r0, ror #31
   18e14:	andeq	r8, r1, r0, ror #31
   18e18:	andeq	r8, r1, r8, lsr pc
   18e1c:	andeq	r8, r1, r0, ror #31
   18e20:	andeq	r8, r1, r8, asr #30
   18e24:	andeq	r8, r1, r0, ror #31
   18e28:	andeq	r8, r1, r0, ror #31
   18e2c:	andeq	r8, r1, r0, ror #31
   18e30:	andeq	r8, r1, r0, ror #31
   18e34:	andeq	r8, r1, r0, ror #31
   18e38:	andeq	r8, r1, r0, ror #31
   18e3c:	andeq	r8, r1, r8, ror #30
   18e40:	andeq	r8, r1, r0, ror #31
   18e44:	andeq	r8, r1, r0, ror #31
   18e48:	andeq	r8, r1, r8, ror pc
   18e4c:	ldrb	r3, [r7, #2]
   18e50:	cmp	r3, #66	; 0x42
   18e54:	movne	r7, #1
   18e58:	moveq	r7, #3
   18e5c:	mov	r1, #1024	; 0x400
   18e60:	b	18d64 <__assert_fail@plt+0x7884>
   18e64:	mov	r7, #1
   18e68:	mov	r1, #1024	; 0x400
   18e6c:	b	18d64 <__assert_fail@plt+0x7884>
   18e70:	mov	r7, #1
   18e74:	mov	r1, #1024	; 0x400
   18e78:	b	18d64 <__assert_fail@plt+0x7884>
   18e7c:	mov	r7, #2
   18e80:	mov	r1, #1000	; 0x3e8
   18e84:	b	18d64 <__assert_fail@plt+0x7884>
   18e88:	ldr	r3, [sp]
   18e8c:	ldr	ip, [sp, #4]
   18e90:	lsl	r2, ip, #9
   18e94:	orr	r2, r2, r3, lsr #23
   18e98:	lsl	r3, r3, #9
   18e9c:	mov	r0, #0
   18ea0:	mov	r1, r0
   18ea4:	lsr	r0, ip, #23
   18ea8:	orrs	r1, r0, r1
   18eac:	streq	r3, [sp]
   18eb0:	streq	r2, [sp, #4]
   18eb4:	moveq	r0, #0
   18eb8:	beq	18ff4 <__assert_fail@plt+0x7b14>
   18ebc:	mvn	r2, #0
   18ec0:	mvn	r3, #0
   18ec4:	strd	r2, [sp]
   18ec8:	mov	r0, #1
   18ecc:	b	18ff4 <__assert_fail@plt+0x7b14>
   18ed0:	ldr	r3, [sp]
   18ed4:	ldr	ip, [sp, #4]
   18ed8:	lsl	r2, ip, #10
   18edc:	orr	r2, r2, r3, lsr #22
   18ee0:	lsl	r3, r3, #10
   18ee4:	mov	r0, #0
   18ee8:	mov	r1, r0
   18eec:	lsr	r0, ip, #22
   18ef0:	orrs	r1, r0, r1
   18ef4:	streq	r3, [sp]
   18ef8:	streq	r2, [sp, #4]
   18efc:	moveq	r0, #0
   18f00:	beq	18ff4 <__assert_fail@plt+0x7b14>
   18f04:	mvn	r2, #0
   18f08:	mvn	r3, #0
   18f0c:	strd	r2, [sp]
   18f10:	mov	r0, #1
   18f14:	b	18ff4 <__assert_fail@plt+0x7b14>
   18f18:	mov	r2, #6
   18f1c:	mov	r0, sp
   18f20:	bl	189b0 <__assert_fail@plt+0x74d0>
   18f24:	b	18ff4 <__assert_fail@plt+0x7b14>
   18f28:	mov	r2, #3
   18f2c:	mov	r0, sp
   18f30:	bl	189b0 <__assert_fail@plt+0x74d0>
   18f34:	b	18ff4 <__assert_fail@plt+0x7b14>
   18f38:	mov	r2, #1
   18f3c:	mov	r0, sp
   18f40:	bl	189b0 <__assert_fail@plt+0x74d0>
   18f44:	b	18ff4 <__assert_fail@plt+0x7b14>
   18f48:	mov	r2, #2
   18f4c:	mov	r0, sp
   18f50:	bl	189b0 <__assert_fail@plt+0x74d0>
   18f54:	b	18ff4 <__assert_fail@plt+0x7b14>
   18f58:	mov	r2, #5
   18f5c:	mov	r0, sp
   18f60:	bl	189b0 <__assert_fail@plt+0x74d0>
   18f64:	b	18ff4 <__assert_fail@plt+0x7b14>
   18f68:	mov	r2, #4
   18f6c:	mov	r0, sp
   18f70:	bl	189b0 <__assert_fail@plt+0x74d0>
   18f74:	b	18ff4 <__assert_fail@plt+0x7b14>
   18f78:	ldr	r3, [sp]
   18f7c:	ldr	r2, [sp, #4]
   18f80:	adds	r3, r3, r3
   18f84:	adc	r2, r2, r2
   18f88:	mov	r1, #0
   18f8c:	mov	r0, r1
   18f90:	ldr	r1, [sp, #4]
   18f94:	lsr	r1, r1, #31
   18f98:	orrs	r1, r1, r0
   18f9c:	streq	r3, [sp]
   18fa0:	streq	r2, [sp, #4]
   18fa4:	moveq	r0, #0
   18fa8:	beq	18ff4 <__assert_fail@plt+0x7b14>
   18fac:	mvn	r2, #0
   18fb0:	mvn	r3, #0
   18fb4:	strd	r2, [sp]
   18fb8:	mov	r0, #1
   18fbc:	b	18ff4 <__assert_fail@plt+0x7b14>
   18fc0:	mov	r2, #8
   18fc4:	mov	r0, sp
   18fc8:	bl	189b0 <__assert_fail@plt+0x74d0>
   18fcc:	b	18ff4 <__assert_fail@plt+0x7b14>
   18fd0:	mov	r2, #7
   18fd4:	mov	r0, sp
   18fd8:	bl	189b0 <__assert_fail@plt+0x74d0>
   18fdc:	b	18ff4 <__assert_fail@plt+0x7b14>
   18fe0:	ldrd	r2, [sp]
   18fe4:	strd	r2, [r9]
   18fe8:	orr	r4, r4, #2
   18fec:	b	18cfc <__assert_fail@plt+0x781c>
   18ff0:	mov	r0, #0
   18ff4:	orr	r4, r4, r0
   18ff8:	ldr	r3, [r6]
   18ffc:	add	r2, r3, r7
   19000:	str	r2, [r6]
   19004:	ldrb	r3, [r3, r7]
   19008:	cmp	r3, #0
   1900c:	orrne	r4, r4, #2
   19010:	b	18cf4 <__assert_fail@plt+0x7814>
   19014:	mov	r4, #4
   19018:	b	18cfc <__assert_fail@plt+0x781c>
   1901c:	mov	r4, #4
   19020:	b	18cfc <__assert_fail@plt+0x781c>
   19024:	strd	r4, [sp, #-16]!
   19028:	str	r6, [sp, #8]
   1902c:	str	lr, [sp, #12]
   19030:	cmp	r1, #0
   19034:	cmpne	r0, #0
   19038:	beq	19074 <__assert_fail@plt+0x7b94>
   1903c:	mov	r2, r0
   19040:	mov	r3, r1
   19044:	umull	r4, r5, r0, r1
   19048:	adds	r1, r5, #0
   1904c:	movne	r1, #1
   19050:	cmp	r4, #0
   19054:	movlt	r1, #1
   19058:	cmp	r1, #0
   1905c:	beq	1907c <__assert_fail@plt+0x7b9c>
   19060:	bl	1139c <__errno_location@plt>
   19064:	mov	r3, #12
   19068:	str	r3, [r0]
   1906c:	mov	r0, #0
   19070:	b	19088 <__assert_fail@plt+0x7ba8>
   19074:	mov	r3, #1
   19078:	mov	r2, r3
   1907c:	mov	r1, r3
   19080:	mov	r0, r2
   19084:	bl	11144 <calloc@plt>
   19088:	ldrd	r4, [sp]
   1908c:	ldr	r6, [sp, #8]
   19090:	add	sp, sp, #12
   19094:	pop	{pc}		; (ldr pc, [sp], #4)
   19098:	str	r4, [sp, #-8]!
   1909c:	str	lr, [sp, #4]
   190a0:	cmp	r0, #0
   190a4:	beq	190c0 <__assert_fail@plt+0x7be0>
   190a8:	bge	190c4 <__assert_fail@plt+0x7be4>
   190ac:	bl	1139c <__errno_location@plt>
   190b0:	mov	r3, #12
   190b4:	str	r3, [r0]
   190b8:	mov	r0, #0
   190bc:	b	190c8 <__assert_fail@plt+0x7be8>
   190c0:	mov	r0, #1
   190c4:	bl	112f4 <malloc@plt>
   190c8:	ldr	r4, [sp]
   190cc:	add	sp, sp, #4
   190d0:	pop	{pc}		; (ldr pc, [sp], #4)
   190d4:	str	r4, [sp, #-8]!
   190d8:	str	lr, [sp, #4]
   190dc:	cmp	r0, #0
   190e0:	beq	19104 <__assert_fail@plt+0x7c24>
   190e4:	cmp	r1, #0
   190e8:	beq	19110 <__assert_fail@plt+0x7c30>
   190ec:	cmp	r1, #0
   190f0:	blt	1911c <__assert_fail@plt+0x7c3c>
   190f4:	bl	11234 <realloc@plt>
   190f8:	ldr	r4, [sp]
   190fc:	add	sp, sp, #4
   19100:	pop	{pc}		; (ldr pc, [sp], #4)
   19104:	mov	r0, r1
   19108:	bl	19098 <__assert_fail@plt+0x7bb8>
   1910c:	b	190f8 <__assert_fail@plt+0x7c18>
   19110:	bl	153f4 <__assert_fail@plt+0x3f14>
   19114:	mov	r0, #0
   19118:	b	190f8 <__assert_fail@plt+0x7c18>
   1911c:	bl	1139c <__errno_location@plt>
   19120:	mov	r3, #12
   19124:	str	r3, [r0]
   19128:	mov	r0, #0
   1912c:	b	190f8 <__assert_fail@plt+0x7c18>
   19130:	strd	r4, [sp, #-16]!
   19134:	str	r6, [sp, #8]
   19138:	str	lr, [sp, #12]
   1913c:	mov	r5, r0
   19140:	bl	112b8 <__fpending@plt>
   19144:	mov	r6, r0
   19148:	ldr	r4, [r5]
   1914c:	and	r4, r4, #32
   19150:	mov	r0, r5
   19154:	bl	1520c <__assert_fail@plt+0x3d2c>
   19158:	cmp	r4, #0
   1915c:	bne	19190 <__assert_fail@plt+0x7cb0>
   19160:	cmp	r0, #0
   19164:	beq	19180 <__assert_fail@plt+0x7ca0>
   19168:	cmp	r6, #0
   1916c:	bne	191ac <__assert_fail@plt+0x7ccc>
   19170:	bl	1139c <__errno_location@plt>
   19174:	ldr	r0, [r0]
   19178:	subs	r0, r0, #9
   1917c:	mvnne	r0, #0
   19180:	ldrd	r4, [sp]
   19184:	ldr	r6, [sp, #8]
   19188:	add	sp, sp, #12
   1918c:	pop	{pc}		; (ldr pc, [sp], #4)
   19190:	cmp	r0, #0
   19194:	bne	191b4 <__assert_fail@plt+0x7cd4>
   19198:	bl	1139c <__errno_location@plt>
   1919c:	mov	r3, #0
   191a0:	str	r3, [r0]
   191a4:	mvn	r0, #0
   191a8:	b	19180 <__assert_fail@plt+0x7ca0>
   191ac:	mvn	r0, #0
   191b0:	b	19180 <__assert_fail@plt+0x7ca0>
   191b4:	mvn	r0, #0
   191b8:	b	19180 <__assert_fail@plt+0x7ca0>
   191bc:	str	r4, [sp, #-8]!
   191c0:	str	lr, [sp, #4]
   191c4:	mov	r0, #14
   191c8:	bl	11474 <nl_langinfo@plt>
   191cc:	cmp	r0, #0
   191d0:	beq	191f4 <__assert_fail@plt+0x7d14>
   191d4:	ldrb	r2, [r0]
   191d8:	movw	r3, #44880	; 0xaf50
   191dc:	movt	r3, #1
   191e0:	cmp	r2, #0
   191e4:	moveq	r0, r3
   191e8:	ldr	r4, [sp]
   191ec:	add	sp, sp, #4
   191f0:	pop	{pc}		; (ldr pc, [sp], #4)
   191f4:	movw	r0, #44880	; 0xaf50
   191f8:	movt	r0, #1
   191fc:	b	191e8 <__assert_fail@plt+0x7d08>
   19200:	strd	r4, [sp, #-20]!	; 0xffffffec
   19204:	strd	r6, [sp, #8]
   19208:	str	lr, [sp, #16]
   1920c:	sub	sp, sp, #12
   19210:	mov	r7, r1
   19214:	mov	r5, r2
   19218:	subs	r6, r0, #0
   1921c:	addeq	r6, sp, #4
   19220:	mov	r0, r6
   19224:	bl	112c4 <mbrtowc@plt>
   19228:	mov	r4, r0
   1922c:	cmp	r5, #0
   19230:	cmnne	r0, #3
   19234:	bhi	19250 <__assert_fail@plt+0x7d70>
   19238:	mov	r0, r4
   1923c:	add	sp, sp, #12
   19240:	ldrd	r4, [sp]
   19244:	ldrd	r6, [sp, #8]
   19248:	add	sp, sp, #16
   1924c:	pop	{pc}		; (ldr pc, [sp], #4)
   19250:	mov	r0, #0
   19254:	bl	19538 <__assert_fail@plt+0x8058>
   19258:	cmp	r0, #0
   1925c:	bne	19238 <__assert_fail@plt+0x7d58>
   19260:	ldrb	r3, [r7]
   19264:	str	r3, [r6]
   19268:	mov	r4, #1
   1926c:	b	19238 <__assert_fail@plt+0x7d58>
   19270:	str	r4, [sp, #-8]!
   19274:	str	lr, [sp, #4]
   19278:	umull	r2, r3, r1, r2
   1927c:	cmp	r3, #0
   19280:	bne	19298 <__assert_fail@plt+0x7db8>
   19284:	mov	r1, r2
   19288:	bl	190d4 <__assert_fail@plt+0x7bf4>
   1928c:	ldr	r4, [sp]
   19290:	add	sp, sp, #4
   19294:	pop	{pc}		; (ldr pc, [sp], #4)
   19298:	bl	1139c <__errno_location@plt>
   1929c:	mov	r3, #12
   192a0:	str	r3, [r0]
   192a4:	mov	r0, #0
   192a8:	b	1928c <__assert_fail@plt+0x7dac>
   192ac:	str	r4, [sp, #-8]!
   192b0:	str	lr, [sp, #4]
   192b4:	mov	r2, #3
   192b8:	mov	r1, #0
   192bc:	bl	192cc <__assert_fail@plt+0x7dec>
   192c0:	ldr	r4, [sp]
   192c4:	add	sp, sp, #4
   192c8:	pop	{pc}		; (ldr pc, [sp], #4)
   192cc:	push	{r1, r2, r3}
   192d0:	strd	r4, [sp, #-16]!
   192d4:	str	r6, [sp, #8]
   192d8:	str	lr, [sp, #12]
   192dc:	sub	sp, sp, #12
   192e0:	mov	r5, r0
   192e4:	ldr	r1, [sp, #28]
   192e8:	add	r3, sp, #32
   192ec:	str	r3, [sp, #4]
   192f0:	cmp	r1, #0
   192f4:	beq	1933c <__assert_fail@plt+0x7e5c>
   192f8:	movw	r3, #1030	; 0x406
   192fc:	cmp	r1, r3
   19300:	beq	19378 <__assert_fail@plt+0x7e98>
   19304:	cmp	r1, #11
   19308:	beq	19528 <__assert_fail@plt+0x8048>
   1930c:	bgt	194b4 <__assert_fail@plt+0x7fd4>
   19310:	cmp	r1, #3
   19314:	beq	19528 <__assert_fail@plt+0x8048>
   19318:	ble	19474 <__assert_fail@plt+0x7f94>
   1931c:	cmp	r1, #8
   19320:	beq	19494 <__assert_fail@plt+0x7fb4>
   19324:	ble	1948c <__assert_fail@plt+0x7fac>
   19328:	cmp	r1, #9
   1932c:	beq	19528 <__assert_fail@plt+0x8048>
   19330:	cmp	r1, #10
   19334:	bne	194ec <__assert_fail@plt+0x800c>
   19338:	b	19494 <__assert_fail@plt+0x7fb4>
   1933c:	ldr	r3, [sp, #4]
   19340:	add	r2, r3, #4
   19344:	str	r2, [sp, #4]
   19348:	ldr	r2, [r3]
   1934c:	mov	r1, #0
   19350:	bl	1142c <fcntl64@plt>
   19354:	mov	r4, r0
   19358:	mov	r0, r4
   1935c:	add	sp, sp, #12
   19360:	ldrd	r4, [sp]
   19364:	ldr	r6, [sp, #8]
   19368:	ldr	lr, [sp, #12]
   1936c:	add	sp, sp, #16
   19370:	add	sp, sp, #12
   19374:	bx	lr
   19378:	ldr	r3, [sp, #4]
   1937c:	add	r2, r3, #4
   19380:	str	r2, [sp, #4]
   19384:	ldr	r6, [r3]
   19388:	movw	r3, #50784	; 0xc660
   1938c:	movt	r3, #2
   19390:	ldr	r3, [r3]
   19394:	cmp	r3, #0
   19398:	blt	19400 <__assert_fail@plt+0x7f20>
   1939c:	mov	r2, r6
   193a0:	movw	r1, #1030	; 0x406
   193a4:	bl	1142c <fcntl64@plt>
   193a8:	subs	r4, r0, #0
   193ac:	blt	193c4 <__assert_fail@plt+0x7ee4>
   193b0:	movw	r3, #50784	; 0xc660
   193b4:	movt	r3, #2
   193b8:	mov	r2, #1
   193bc:	str	r2, [r3]
   193c0:	b	19358 <__assert_fail@plt+0x7e78>
   193c4:	bl	1139c <__errno_location@plt>
   193c8:	ldr	r3, [r0]
   193cc:	cmp	r3, #22
   193d0:	bne	193b0 <__assert_fail@plt+0x7ed0>
   193d4:	mov	r2, r6
   193d8:	mov	r1, #0
   193dc:	mov	r0, r5
   193e0:	bl	1142c <fcntl64@plt>
   193e4:	subs	r4, r0, #0
   193e8:	blt	19358 <__assert_fail@plt+0x7e78>
   193ec:	movw	r3, #50784	; 0xc660
   193f0:	movt	r3, #2
   193f4:	mvn	r2, #0
   193f8:	str	r2, [r3]
   193fc:	b	19428 <__assert_fail@plt+0x7f48>
   19400:	mov	r2, r6
   19404:	mov	r1, #0
   19408:	bl	1142c <fcntl64@plt>
   1940c:	subs	r4, r0, #0
   19410:	blt	19358 <__assert_fail@plt+0x7e78>
   19414:	movw	r3, #50784	; 0xc660
   19418:	movt	r3, #2
   1941c:	ldr	r3, [r3]
   19420:	cmn	r3, #1
   19424:	bne	19358 <__assert_fail@plt+0x7e78>
   19428:	mov	r1, #1
   1942c:	mov	r0, r4
   19430:	bl	1142c <fcntl64@plt>
   19434:	subs	r2, r0, #0
   19438:	blt	19454 <__assert_fail@plt+0x7f74>
   1943c:	orr	r2, r2, #1
   19440:	mov	r1, #2
   19444:	mov	r0, r4
   19448:	bl	1142c <fcntl64@plt>
   1944c:	cmn	r0, #1
   19450:	bne	19358 <__assert_fail@plt+0x7e78>
   19454:	bl	1139c <__errno_location@plt>
   19458:	mov	r5, r0
   1945c:	ldr	r6, [r0]
   19460:	mov	r0, r4
   19464:	bl	114c8 <close@plt>
   19468:	str	r6, [r5]
   1946c:	mvn	r4, #0
   19470:	b	19358 <__assert_fail@plt+0x7e78>
   19474:	cmp	r1, #1
   19478:	beq	19528 <__assert_fail@plt+0x8048>
   1947c:	bgt	19494 <__assert_fail@plt+0x7fb4>
   19480:	cmp	r1, #0
   19484:	bne	194ec <__assert_fail@plt+0x800c>
   19488:	b	19494 <__assert_fail@plt+0x7fb4>
   1948c:	cmp	r1, #4
   19490:	bne	194ec <__assert_fail@plt+0x800c>
   19494:	ldr	r3, [sp, #4]
   19498:	add	r2, r3, #4
   1949c:	str	r2, [sp, #4]
   194a0:	ldr	r2, [r3]
   194a4:	mov	r0, r5
   194a8:	bl	1142c <fcntl64@plt>
   194ac:	mov	r4, r0
   194b0:	b	19358 <__assert_fail@plt+0x7e78>
   194b4:	movw	r3, #1031	; 0x407
   194b8:	cmp	r1, r3
   194bc:	bgt	1950c <__assert_fail@plt+0x802c>
   194c0:	movw	r3, #1030	; 0x406
   194c4:	cmp	r1, r3
   194c8:	bge	19494 <__assert_fail@plt+0x7fb4>
   194cc:	movw	r3, #1025	; 0x401
   194d0:	cmp	r1, r3
   194d4:	beq	19528 <__assert_fail@plt+0x8048>
   194d8:	movw	r3, #1026	; 0x402
   194dc:	cmp	r1, r3
   194e0:	beq	19494 <__assert_fail@plt+0x7fb4>
   194e4:	cmp	r1, #1024	; 0x400
   194e8:	beq	19494 <__assert_fail@plt+0x7fb4>
   194ec:	ldr	r3, [sp, #4]
   194f0:	add	r2, r3, #4
   194f4:	str	r2, [sp, #4]
   194f8:	ldr	r2, [r3]
   194fc:	mov	r0, r5
   19500:	bl	1142c <fcntl64@plt>
   19504:	mov	r4, r0
   19508:	b	19358 <__assert_fail@plt+0x7e78>
   1950c:	movw	r3, #1033	; 0x409
   19510:	cmp	r1, r3
   19514:	beq	19494 <__assert_fail@plt+0x7fb4>
   19518:	blt	19528 <__assert_fail@plt+0x8048>
   1951c:	movw	r3, #1034	; 0x40a
   19520:	cmp	r1, r3
   19524:	bne	194ec <__assert_fail@plt+0x800c>
   19528:	mov	r0, r5
   1952c:	bl	1142c <fcntl64@plt>
   19530:	mov	r4, r0
   19534:	b	19358 <__assert_fail@plt+0x7e78>
   19538:	push	{lr}		; (str lr, [sp, #-4]!)
   1953c:	sub	sp, sp, #268	; 0x10c
   19540:	movw	r2, #257	; 0x101
   19544:	add	r1, sp, #4
   19548:	bl	19594 <__assert_fail@plt+0x80b4>
   1954c:	cmp	r0, #0
   19550:	movne	r0, #0
   19554:	bne	1958c <__assert_fail@plt+0x80ac>
   19558:	movw	r1, #44888	; 0xaf58
   1955c:	movt	r1, #1
   19560:	add	r0, sp, #4
   19564:	bl	11168 <strcmp@plt>
   19568:	cmp	r0, #0
   1956c:	beq	19588 <__assert_fail@plt+0x80a8>
   19570:	movw	r1, #44892	; 0xaf5c
   19574:	movt	r1, #1
   19578:	add	r0, sp, #4
   1957c:	bl	11168 <strcmp@plt>
   19580:	adds	r0, r0, #0
   19584:	movne	r0, #1
   19588:	and	r0, r0, #1
   1958c:	add	sp, sp, #268	; 0x10c
   19590:	pop	{pc}		; (ldr pc, [sp], #4)
   19594:	strd	r4, [sp, #-16]!
   19598:	str	r6, [sp, #8]
   1959c:	str	lr, [sp, #12]
   195a0:	mov	r6, r1
   195a4:	mov	r4, r2
   195a8:	mov	r1, #0
   195ac:	bl	11438 <setlocale@plt>
   195b0:	subs	r5, r0, #0
   195b4:	beq	195f8 <__assert_fail@plt+0x8118>
   195b8:	mov	r0, r5
   195bc:	bl	11354 <strlen@plt>
   195c0:	cmp	r4, r0
   195c4:	bhi	19614 <__assert_fail@plt+0x8134>
   195c8:	cmp	r4, #0
   195cc:	moveq	r0, #34	; 0x22
   195d0:	beq	19628 <__assert_fail@plt+0x8148>
   195d4:	sub	r4, r4, #1
   195d8:	mov	r2, r4
   195dc:	mov	r1, r5
   195e0:	mov	r0, r6
   195e4:	bl	111c8 <memcpy@plt>
   195e8:	mov	r3, #0
   195ec:	strb	r3, [r6, r4]
   195f0:	mov	r0, #34	; 0x22
   195f4:	b	19628 <__assert_fail@plt+0x8148>
   195f8:	cmp	r4, #0
   195fc:	moveq	r0, #22
   19600:	beq	19628 <__assert_fail@plt+0x8148>
   19604:	mov	r3, #0
   19608:	strb	r3, [r6]
   1960c:	mov	r0, #22
   19610:	b	19628 <__assert_fail@plt+0x8148>
   19614:	add	r2, r0, #1
   19618:	mov	r1, r5
   1961c:	mov	r0, r6
   19620:	bl	111c8 <memcpy@plt>
   19624:	mov	r0, #0
   19628:	ldrd	r4, [sp]
   1962c:	ldr	r6, [sp, #8]
   19630:	add	sp, sp, #12
   19634:	pop	{pc}		; (ldr pc, [sp], #4)
   19638:	str	r4, [sp, #-8]!
   1963c:	str	lr, [sp, #4]
   19640:	mov	r1, #0
   19644:	bl	11438 <setlocale@plt>
   19648:	ldr	r4, [sp]
   1964c:	add	sp, sp, #4
   19650:	pop	{pc}		; (ldr pc, [sp], #4)
   19654:	cmp	r3, #0
   19658:	cmpeq	r2, #0
   1965c:	bne	19674 <__assert_fail@plt+0x8194>
   19660:	cmp	r1, #0
   19664:	cmpeq	r0, #0
   19668:	mvnne	r1, #0
   1966c:	mvnne	r0, #0
   19670:	b	19690 <__assert_fail@plt+0x81b0>
   19674:	sub	sp, sp, #8
   19678:	push	{sp, lr}
   1967c:	bl	196a0 <__assert_fail@plt+0x81c0>
   19680:	ldr	lr, [sp, #4]
   19684:	add	sp, sp, #8
   19688:	pop	{r2, r3}
   1968c:	bx	lr
   19690:	push	{r1, lr}
   19694:	mov	r0, #8
   19698:	bl	1115c <raise@plt>
   1969c:	pop	{r1, pc}
   196a0:	cmp	r1, r3
   196a4:	cmpeq	r0, r2
   196a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196ac:	mov	r4, r0
   196b0:	movcc	r0, #0
   196b4:	mov	r5, r1
   196b8:	ldr	lr, [sp, #36]	; 0x24
   196bc:	movcc	r1, r0
   196c0:	bcc	197bc <__assert_fail@plt+0x82dc>
   196c4:	cmp	r3, #0
   196c8:	clzeq	ip, r2
   196cc:	clzne	ip, r3
   196d0:	addeq	ip, ip, #32
   196d4:	cmp	r5, #0
   196d8:	clzeq	r1, r4
   196dc:	addeq	r1, r1, #32
   196e0:	clzne	r1, r5
   196e4:	sub	ip, ip, r1
   196e8:	sub	sl, ip, #32
   196ec:	lsl	r9, r3, ip
   196f0:	rsb	fp, ip, #32
   196f4:	orr	r9, r9, r2, lsl sl
   196f8:	orr	r9, r9, r2, lsr fp
   196fc:	lsl	r8, r2, ip
   19700:	cmp	r5, r9
   19704:	cmpeq	r4, r8
   19708:	movcc	r0, #0
   1970c:	movcc	r1, r0
   19710:	bcc	1972c <__assert_fail@plt+0x824c>
   19714:	mov	r0, #1
   19718:	subs	r4, r4, r8
   1971c:	lsl	r1, r0, sl
   19720:	orr	r1, r1, r0, lsr fp
   19724:	lsl	r0, r0, ip
   19728:	sbc	r5, r5, r9
   1972c:	cmp	ip, #0
   19730:	beq	197bc <__assert_fail@plt+0x82dc>
   19734:	lsr	r6, r8, #1
   19738:	orr	r6, r6, r9, lsl #31
   1973c:	lsr	r7, r9, #1
   19740:	mov	r2, ip
   19744:	b	19768 <__assert_fail@plt+0x8288>
   19748:	subs	r3, r4, r6
   1974c:	sbc	r8, r5, r7
   19750:	adds	r3, r3, r3
   19754:	adc	r8, r8, r8
   19758:	adds	r4, r3, #1
   1975c:	adc	r5, r8, #0
   19760:	subs	r2, r2, #1
   19764:	beq	19784 <__assert_fail@plt+0x82a4>
   19768:	cmp	r5, r7
   1976c:	cmpeq	r4, r6
   19770:	bcs	19748 <__assert_fail@plt+0x8268>
   19774:	adds	r4, r4, r4
   19778:	adc	r5, r5, r5
   1977c:	subs	r2, r2, #1
   19780:	bne	19768 <__assert_fail@plt+0x8288>
   19784:	lsr	r3, r4, ip
   19788:	orr	r3, r3, r5, lsl fp
   1978c:	lsr	r2, r5, ip
   19790:	orr	r3, r3, r5, lsr sl
   19794:	adds	r0, r0, r4
   19798:	mov	r4, r3
   1979c:	lsl	r3, r2, ip
   197a0:	orr	r3, r3, r4, lsl sl
   197a4:	lsl	ip, r4, ip
   197a8:	orr	r3, r3, r4, lsr fp
   197ac:	adc	r1, r1, r5
   197b0:	subs	r0, r0, ip
   197b4:	mov	r5, r2
   197b8:	sbc	r1, r1, r3
   197bc:	cmp	lr, #0
   197c0:	strdne	r4, [lr]
   197c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   197cc:	mov	r7, r0
   197d0:	ldr	r6, [pc, #72]	; 19820 <__assert_fail@plt+0x8340>
   197d4:	ldr	r5, [pc, #72]	; 19824 <__assert_fail@plt+0x8344>
   197d8:	add	r6, pc, r6
   197dc:	add	r5, pc, r5
   197e0:	sub	r6, r6, r5
   197e4:	mov	r8, r1
   197e8:	mov	r9, r2
   197ec:	bl	11118 <fdopen@plt-0x20>
   197f0:	asrs	r6, r6, #2
   197f4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   197f8:	mov	r4, #0
   197fc:	add	r4, r4, #1
   19800:	ldr	r3, [r5], #4
   19804:	mov	r2, r9
   19808:	mov	r1, r8
   1980c:	mov	r0, r7
   19810:	blx	r3
   19814:	cmp	r6, r4
   19818:	bne	197fc <__assert_fail@plt+0x831c>
   1981c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19820:	andeq	r2, r1, r4, lsr r7
   19824:	andeq	r2, r1, ip, lsr #14
   19828:	bx	lr
   1982c:	ldr	r3, [pc, #12]	; 19840 <__assert_fail@plt+0x8360>
   19830:	mov	r1, #0
   19834:	add	r3, pc, r3
   19838:	ldr	r2, [r3]
   1983c:	b	113b4 <__cxa_atexit@plt>
   19840:	andeq	r2, r1, r4, lsl r9

Disassembly of section .fini:

00019844 <.fini>:
   19844:	push	{r3, lr}
   19848:	pop	{r3, pc}
