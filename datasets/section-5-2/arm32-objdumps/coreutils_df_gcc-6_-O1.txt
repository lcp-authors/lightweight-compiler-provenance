
../repos/coreutils/src/df:     file format elf32-littlearm


Disassembly of section .init:

000112c4 <.init>:
   112c4:	push	{r3, lr}
   112c8:	bl	1174c <__assert_fail@plt+0x48>
   112cc:	pop	{r3, pc}

Disassembly of section .plt:

000112d0 <calloc@plt-0x14>:
   112d0:	push	{lr}		; (str lr, [sp, #-4]!)
   112d4:	ldr	lr, [pc, #4]	; 112e0 <calloc@plt-0x4>
   112d8:	add	lr, pc, lr
   112dc:	ldr	pc, [lr, #8]!
   112e0:	andeq	sp, r1, r0, lsr #26

000112e4 <calloc@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #118784	; 0x1d000
   112ec:	ldr	pc, [ip, #3360]!	; 0xd20

000112f0 <fputs_unlocked@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #118784	; 0x1d000
   112f8:	ldr	pc, [ip, #3352]!	; 0xd18

000112fc <raise@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #118784	; 0x1d000
   11304:	ldr	pc, [ip, #3344]!	; 0xd10

00011308 <strverscmp@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #118784	; 0x1d000
   11310:	ldr	pc, [ip, #3336]!	; 0xd08

00011314 <__getdelim@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #118784	; 0x1d000
   1131c:	ldr	pc, [ip, #3328]!	; 0xd00

00011320 <strcmp@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #118784	; 0x1d000
   11328:	ldr	pc, [ip, #3320]!	; 0xcf8

0001132c <fflush@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #118784	; 0x1d000
   11334:	ldr	pc, [ip, #3312]!	; 0xcf0

00011338 <wcwidth@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #118784	; 0x1d000
   11340:	ldr	pc, [ip, #3304]!	; 0xce8

00011344 <memmove@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #118784	; 0x1d000
   1134c:	ldr	pc, [ip, #3296]!	; 0xce0

00011350 <free@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #118784	; 0x1d000
   11358:	ldr	pc, [ip, #3288]!	; 0xcd8

0001135c <faccessat@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #118784	; 0x1d000
   11364:	ldr	pc, [ip, #3280]!	; 0xcd0

00011368 <_exit@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #118784	; 0x1d000
   11370:	ldr	pc, [ip, #3272]!	; 0xcc8

00011374 <memcpy@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #118784	; 0x1d000
   1137c:	ldr	pc, [ip, #3264]!	; 0xcc0

00011380 <__strtoull_internal@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #118784	; 0x1d000
   11388:	ldr	pc, [ip, #3256]!	; 0xcb8

0001138c <mbsinit@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #118784	; 0x1d000
   11394:	ldr	pc, [ip, #3248]!	; 0xcb0

00011398 <memcmp@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #118784	; 0x1d000
   113a0:	ldr	pc, [ip, #3240]!	; 0xca8

000113a4 <fputc_unlocked@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #118784	; 0x1d000
   113ac:	ldr	pc, [ip, #3232]!	; 0xca0

000113b0 <uname@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #118784	; 0x1d000
   113b8:	ldr	pc, [ip, #3224]!	; 0xc98

000113bc <dcgettext@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #118784	; 0x1d000
   113c4:	ldr	pc, [ip, #3216]!	; 0xc90

000113c8 <strdup@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #118784	; 0x1d000
   113d0:	ldr	pc, [ip, #3208]!	; 0xc88

000113d4 <realloc@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #118784	; 0x1d000
   113dc:	ldr	pc, [ip, #3200]!	; 0xc80

000113e0 <textdomain@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #118784	; 0x1d000
   113e8:	ldr	pc, [ip, #3192]!	; 0xc78

000113ec <iswcntrl@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #118784	; 0x1d000
   113f4:	ldr	pc, [ip, #3184]!	; 0xc70

000113f8 <rawmemchr@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #118784	; 0x1d000
   11400:	ldr	pc, [ip, #3176]!	; 0xc68

00011404 <chdir@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #118784	; 0x1d000
   1140c:	ldr	pc, [ip, #3168]!	; 0xc60

00011410 <iswprint@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #118784	; 0x1d000
   11418:	ldr	pc, [ip, #3160]!	; 0xc58

0001141c <__fxstat64@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #118784	; 0x1d000
   11424:	ldr	pc, [ip, #3152]!	; 0xc50

00011428 <readlink@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #118784	; 0x1d000
   11430:	ldr	pc, [ip, #3144]!	; 0xc48

00011434 <__memcpy_chk@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #118784	; 0x1d000
   1143c:	ldr	pc, [ip, #3136]!	; 0xc40

00011440 <fwrite@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #118784	; 0x1d000
   11448:	ldr	pc, [ip, #3128]!	; 0xc38

0001144c <lseek64@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #118784	; 0x1d000
   11454:	ldr	pc, [ip, #3120]!	; 0xc30

00011458 <__ctype_get_mb_cur_max@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #118784	; 0x1d000
   11460:	ldr	pc, [ip, #3112]!	; 0xc28

00011464 <hasmntopt@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #118784	; 0x1d000
   1146c:	ldr	pc, [ip, #3104]!	; 0xc20

00011470 <__fpending@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #118784	; 0x1d000
   11478:	ldr	pc, [ip, #3096]!	; 0xc18

0001147c <mbrtowc@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #118784	; 0x1d000
   11484:	ldr	pc, [ip, #3088]!	; 0xc10

00011488 <wcstombs@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #118784	; 0x1d000
   11490:	ldr	pc, [ip, #3080]!	; 0xc08

00011494 <error@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #118784	; 0x1d000
   1149c:	ldr	pc, [ip, #3072]!	; 0xc00

000114a0 <getmntent@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #118784	; 0x1d000
   114a8:	ldr	pc, [ip, #3064]!	; 0xbf8

000114ac <open64@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #118784	; 0x1d000
   114b4:	ldr	pc, [ip, #3056]!	; 0xbf0

000114b8 <__asprintf_chk@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #118784	; 0x1d000
   114c0:	ldr	pc, [ip, #3048]!	; 0xbe8

000114c4 <getenv@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #118784	; 0x1d000
   114cc:	ldr	pc, [ip, #3040]!	; 0xbe0

000114d0 <malloc@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #118784	; 0x1d000
   114d8:	ldr	pc, [ip, #3032]!	; 0xbd8

000114dc <__libc_start_main@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #118784	; 0x1d000
   114e4:	ldr	pc, [ip, #3024]!	; 0xbd0

000114e8 <__freading@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #118784	; 0x1d000
   114f0:	ldr	pc, [ip, #3016]!	; 0xbc8

000114f4 <__gmon_start__@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #118784	; 0x1d000
   114fc:	ldr	pc, [ip, #3008]!	; 0xbc0

00011500 <mempcpy@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #118784	; 0x1d000
   11508:	ldr	pc, [ip, #3000]!	; 0xbb8

0001150c <getopt_long@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #118784	; 0x1d000
   11514:	ldr	pc, [ip, #2992]!	; 0xbb0

00011518 <__ctype_b_loc@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #118784	; 0x1d000
   11520:	ldr	pc, [ip, #2984]!	; 0xba8

00011524 <getcwd@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #118784	; 0x1d000
   1152c:	ldr	pc, [ip, #2976]!	; 0xba0

00011530 <exit@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #118784	; 0x1d000
   11538:	ldr	pc, [ip, #2968]!	; 0xb98

0001153c <strlen@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #118784	; 0x1d000
   11544:	ldr	pc, [ip, #2960]!	; 0xb90

00011548 <strchr@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #118784	; 0x1d000
   11550:	ldr	pc, [ip, #2952]!	; 0xb88

00011554 <openat64@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #118784	; 0x1d000
   1155c:	ldr	pc, [ip, #2944]!	; 0xb80

00011560 <memrchr@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #118784	; 0x1d000
   11568:	ldr	pc, [ip, #2936]!	; 0xb78

0001156c <__errno_location@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #118784	; 0x1d000
   11574:	ldr	pc, [ip, #2928]!	; 0xb70

00011578 <__sprintf_chk@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #118784	; 0x1d000
   11580:	ldr	pc, [ip, #2920]!	; 0xb68

00011584 <__cxa_atexit@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #118784	; 0x1d000
   1158c:	ldr	pc, [ip, #2912]!	; 0xb60

00011590 <memset@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #118784	; 0x1d000
   11598:	ldr	pc, [ip, #2904]!	; 0xb58

0001159c <__printf_chk@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #118784	; 0x1d000
   115a4:	ldr	pc, [ip, #2896]!	; 0xb50

000115a8 <statvfs64@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #118784	; 0x1d000
   115b0:	ldr	pc, [ip, #2888]!	; 0xb48

000115b4 <fileno@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #118784	; 0x1d000
   115bc:	ldr	pc, [ip, #2880]!	; 0xb40

000115c0 <__fprintf_chk@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #118784	; 0x1d000
   115c8:	ldr	pc, [ip, #2872]!	; 0xb38

000115cc <memchr@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #118784	; 0x1d000
   115d4:	ldr	pc, [ip, #2864]!	; 0xb30

000115d8 <fclose@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #118784	; 0x1d000
   115e0:	ldr	pc, [ip, #2856]!	; 0xb28

000115e4 <fseeko64@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #118784	; 0x1d000
   115ec:	ldr	pc, [ip, #2848]!	; 0xb20

000115f0 <endmntent@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #118784	; 0x1d000
   115f8:	ldr	pc, [ip, #2840]!	; 0xb18

000115fc <fcntl64@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #118784	; 0x1d000
   11604:	ldr	pc, [ip, #2832]!	; 0xb10

00011608 <__overflow@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #118784	; 0x1d000
   11610:	ldr	pc, [ip, #2824]!	; 0xb08

00011614 <setlocale@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #118784	; 0x1d000
   1161c:	ldr	pc, [ip, #2816]!	; 0xb00

00011620 <wcswidth@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #118784	; 0x1d000
   11628:	ldr	pc, [ip, #2808]!	; 0xaf8

0001162c <strrchr@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #118784	; 0x1d000
   11634:	ldr	pc, [ip, #2800]!	; 0xaf0

00011638 <statfs64@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #118784	; 0x1d000
   11640:	ldr	pc, [ip, #2792]!	; 0xae8

00011644 <nl_langinfo@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #118784	; 0x1d000
   1164c:	ldr	pc, [ip, #2784]!	; 0xae0

00011650 <sscanf@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #118784	; 0x1d000
   11658:	ldr	pc, [ip, #2776]!	; 0xad8

0001165c <localeconv@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #118784	; 0x1d000
   11664:	ldr	pc, [ip, #2768]!	; 0xad0

00011668 <mbstowcs@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #118784	; 0x1d000
   11670:	ldr	pc, [ip, #2760]!	; 0xac8

00011674 <fchdir@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #118784	; 0x1d000
   1167c:	ldr	pc, [ip, #2752]!	; 0xac0

00011680 <canonicalize_file_name@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #118784	; 0x1d000
   11688:	ldr	pc, [ip, #2744]!	; 0xab8

0001168c <fopen64@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #118784	; 0x1d000
   11694:	ldr	pc, [ip, #2736]!	; 0xab0

00011698 <setmntent@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #118784	; 0x1d000
   116a0:	ldr	pc, [ip, #2728]!	; 0xaa8

000116a4 <bindtextdomain@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #118784	; 0x1d000
   116ac:	ldr	pc, [ip, #2720]!	; 0xaa0

000116b0 <sync@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #118784	; 0x1d000
   116b8:	ldr	pc, [ip, #2712]!	; 0xa98

000116bc <__xstat64@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #118784	; 0x1d000
   116c4:	ldr	pc, [ip, #2704]!	; 0xa90

000116c8 <isatty@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #118784	; 0x1d000
   116d0:	ldr	pc, [ip, #2696]!	; 0xa88

000116d4 <strncmp@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #118784	; 0x1d000
   116dc:	ldr	pc, [ip, #2688]!	; 0xa80

000116e0 <abort@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #118784	; 0x1d000
   116e8:	ldr	pc, [ip, #2680]!	; 0xa78

000116ec <close@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #118784	; 0x1d000
   116f4:	ldr	pc, [ip, #2672]!	; 0xa70

000116f8 <strspn@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #118784	; 0x1d000
   11700:	ldr	pc, [ip, #2664]!	; 0xa68

00011704 <__assert_fail@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #118784	; 0x1d000
   1170c:	ldr	pc, [ip, #2656]!	; 0xa60

Disassembly of section .text:

00011710 <.text>:
   11710:	mov	fp, #0
   11714:	mov	lr, #0
   11718:	pop	{r1}		; (ldr r1, [sp], #4)
   1171c:	mov	r2, sp
   11720:	push	{r2}		; (str r2, [sp, #-4]!)
   11724:	push	{r0}		; (str r0, [sp, #-4]!)
   11728:	ldr	ip, [pc, #16]	; 11740 <__assert_fail@plt+0x3c>
   1172c:	push	{ip}		; (str ip, [sp, #-4]!)
   11730:	ldr	r0, [pc, #12]	; 11744 <__assert_fail@plt+0x40>
   11734:	ldr	r3, [pc, #12]	; 11748 <__assert_fail@plt+0x44>
   11738:	bl	114dc <__libc_start_main@plt>
   1173c:	bl	116e0 <abort@plt>
   11740:	andeq	sp, r1, r0, asr #6
   11744:	andeq	r3, r1, r0, ror #1
   11748:	andeq	sp, r1, r0, ror #5
   1174c:	ldr	r3, [pc, #20]	; 11768 <__assert_fail@plt+0x64>
   11750:	ldr	r2, [pc, #20]	; 1176c <__assert_fail@plt+0x68>
   11754:	add	r3, pc, r3
   11758:	ldr	r2, [r3, r2]
   1175c:	cmp	r2, #0
   11760:	bxeq	lr
   11764:	b	114f4 <__gmon_start__@plt>
   11768:	andeq	sp, r1, r4, lsr #17
   1176c:	andeq	r0, r0, r0, ror r1
   11770:	ldr	r3, [pc, #28]	; 11794 <__assert_fail@plt+0x90>
   11774:	ldr	r0, [pc, #28]	; 11798 <__assert_fail@plt+0x94>
   11778:	sub	r3, r3, r0
   1177c:	cmp	r3, #6
   11780:	bxls	lr
   11784:	ldr	r3, [pc, #16]	; 1179c <__assert_fail@plt+0x98>
   11788:	cmp	r3, #0
   1178c:	bxeq	lr
   11790:	bx	r3
   11794:	andeq	pc, r2, r3, lsr #6
   11798:	andeq	pc, r2, r0, lsr #6
   1179c:	andeq	r0, r0, r0
   117a0:	ldr	r1, [pc, #36]	; 117cc <__assert_fail@plt+0xc8>
   117a4:	ldr	r0, [pc, #36]	; 117d0 <__assert_fail@plt+0xcc>
   117a8:	sub	r1, r1, r0
   117ac:	asr	r1, r1, #2
   117b0:	add	r1, r1, r1, lsr #31
   117b4:	asrs	r1, r1, #1
   117b8:	bxeq	lr
   117bc:	ldr	r3, [pc, #16]	; 117d4 <__assert_fail@plt+0xd0>
   117c0:	cmp	r3, #0
   117c4:	bxeq	lr
   117c8:	bx	r3
   117cc:	andeq	pc, r2, r0, lsr #6
   117d0:	andeq	pc, r2, r0, lsr #6
   117d4:	andeq	r0, r0, r0
   117d8:	push	{r4, lr}
   117dc:	ldr	r4, [pc, #24]	; 117fc <__assert_fail@plt+0xf8>
   117e0:	ldrb	r3, [r4]
   117e4:	cmp	r3, #0
   117e8:	popne	{r4, pc}
   117ec:	bl	11770 <__assert_fail@plt+0x6c>
   117f0:	mov	r3, #1
   117f4:	strb	r3, [r4]
   117f8:	pop	{r4, pc}
   117fc:	andeq	pc, r2, ip, lsr r3	; <UNPREDICTABLE>
   11800:	ldr	r0, [pc, #40]	; 11830 <__assert_fail@plt+0x12c>
   11804:	ldr	r3, [r0]
   11808:	cmp	r3, #0
   1180c:	bne	11814 <__assert_fail@plt+0x110>
   11810:	b	117a0 <__assert_fail@plt+0x9c>
   11814:	ldr	r3, [pc, #24]	; 11834 <__assert_fail@plt+0x130>
   11818:	cmp	r3, #0
   1181c:	beq	11810 <__assert_fail@plt+0x10c>
   11820:	push	{r4, lr}
   11824:	blx	r3
   11828:	pop	{r4, lr}
   1182c:	b	117a0 <__assert_fail@plt+0x9c>
   11830:	andeq	lr, r2, r4, lsl pc
   11834:	andeq	r0, r0, r0
   11838:	ldrb	r3, [r0]
   1183c:	cmp	r3, #0
   11840:	bxeq	lr
   11844:	mov	r2, #63	; 0x3f
   11848:	b	1185c <__assert_fail@plt+0x158>
   1184c:	strb	r2, [r0]
   11850:	ldrb	r3, [r0, #1]!
   11854:	cmp	r3, #0
   11858:	beq	11870 <__assert_fail@plt+0x16c>
   1185c:	cmp	r3, #31
   11860:	bls	1184c <__assert_fail@plt+0x148>
   11864:	cmp	r3, #127	; 0x7f
   11868:	bne	11850 <__assert_fail@plt+0x14c>
   1186c:	b	1184c <__assert_fail@plt+0x148>
   11870:	bx	lr
   11874:	push	{r4, lr}
   11878:	mov	r2, r1
   1187c:	mov	r3, #0
   11880:	ldrd	r0, [r0]
   11884:	bl	1d124 <__assert_fail@plt+0xba20>
   11888:	mov	r0, r2
   1188c:	pop	{r4, pc}
   11890:	push	{r4, r5}
   11894:	ldrd	r4, [r0]
   11898:	ldrd	r2, [r1]
   1189c:	cmp	r5, r3
   118a0:	cmpeq	r4, r2
   118a4:	moveq	r0, #1
   118a8:	movne	r0, #0
   118ac:	pop	{r4, r5}
   118b0:	bx	lr
   118b4:	push	{r4, r5, r6, lr}
   118b8:	ldr	r3, [pc, #80]	; 11910 <__assert_fail@plt+0x20c>
   118bc:	ldr	r4, [r3]
   118c0:	cmp	r4, #0
   118c4:	cmpne	r0, #0
   118c8:	moveq	r6, #1
   118cc:	movne	r6, #0
   118d0:	beq	11908 <__assert_fail@plt+0x204>
   118d4:	mov	r5, r0
   118d8:	cmp	r4, #0
   118dc:	beq	11908 <__assert_fail@plt+0x204>
   118e0:	ldr	r1, [r4]
   118e4:	mov	r0, r5
   118e8:	bl	11320 <strcmp@plt>
   118ec:	cmp	r0, #0
   118f0:	beq	11904 <__assert_fail@plt+0x200>
   118f4:	ldr	r4, [r4, #4]
   118f8:	cmp	r4, #0
   118fc:	bne	118e0 <__assert_fail@plt+0x1dc>
   11900:	b	11908 <__assert_fail@plt+0x204>
   11904:	mov	r6, #1
   11908:	mov	r0, r6
   1190c:	pop	{r4, r5, r6, pc}
   11910:	andeq	pc, r2, r0, asr #6
   11914:	push	{r4, r5, r6, lr}
   11918:	ldr	r3, [pc, #88]	; 11978 <__assert_fail@plt+0x274>
   1191c:	ldr	r4, [r3, #4]
   11920:	cmp	r4, #0
   11924:	cmpne	r0, #0
   11928:	moveq	r6, #1
   1192c:	movne	r6, #0
   11930:	beq	11964 <__assert_fail@plt+0x260>
   11934:	mov	r5, r0
   11938:	cmp	r4, #0
   1193c:	beq	11970 <__assert_fail@plt+0x26c>
   11940:	ldr	r1, [r4]
   11944:	mov	r0, r5
   11948:	bl	11320 <strcmp@plt>
   1194c:	cmp	r0, #0
   11950:	beq	1196c <__assert_fail@plt+0x268>
   11954:	ldr	r4, [r4, #4]
   11958:	cmp	r4, #0
   1195c:	bne	11940 <__assert_fail@plt+0x23c>
   11960:	b	11970 <__assert_fail@plt+0x26c>
   11964:	mov	r6, #0
   11968:	b	11970 <__assert_fail@plt+0x26c>
   1196c:	mov	r6, #1
   11970:	mov	r0, r6
   11974:	pop	{r4, r5, r6, pc}
   11978:	andeq	pc, r2, r0, asr #6
   1197c:	push	{r4, lr}
   11980:	bl	15478 <__assert_fail@plt+0x3d74>
   11984:	pop	{r4, pc}
   11988:	push	{r4, r5, r6, lr}
   1198c:	ldr	r4, [pc, #56]	; 119cc <__assert_fail@plt+0x2c8>
   11990:	ldr	r1, [r4, #8]
   11994:	add	r1, r1, #1
   11998:	str	r1, [r4, #8]
   1199c:	mov	r2, #4
   119a0:	ldr	r0, [r4, #12]
   119a4:	bl	1a668 <__assert_fail@plt+0x8f64>
   119a8:	mov	r6, r0
   119ac:	str	r0, [r4, #12]
   119b0:	ldr	r5, [r4, #8]
   119b4:	sub	r5, r5, #-1073741823	; 0xc0000001
   119b8:	mov	r1, #4
   119bc:	ldr	r0, [r4, #16]
   119c0:	bl	1a6dc <__assert_fail@plt+0x8fd8>
   119c4:	str	r0, [r6, r5, lsl #2]
   119c8:	pop	{r4, r5, r6, pc}
   119cc:	andeq	pc, r2, r0, asr #6
   119d0:	push	{r4, r5, r6, lr}
   119d4:	mov	r4, r0
   119d8:	mov	r6, r1
   119dc:	ldr	r5, [pc, #136]	; 11a6c <__assert_fail@plt+0x368>
   119e0:	ldr	r1, [r5, #16]
   119e4:	add	r1, r1, #1
   119e8:	str	r1, [r5, #16]
   119ec:	mov	r2, #4
   119f0:	ldr	r0, [r5, #20]
   119f4:	bl	1a668 <__assert_fail@plt+0x8f64>
   119f8:	str	r0, [r5, #20]
   119fc:	ldr	r3, [r5, #16]
   11a00:	sub	r3, r3, #-1073741823	; 0xc0000001
   11a04:	rsb	r1, r4, r4, lsl #3
   11a08:	ldr	r2, [pc, #96]	; 11a70 <__assert_fail@plt+0x36c>
   11a0c:	add	r2, r2, r1, lsl #2
   11a10:	str	r2, [r0, r3, lsl #2]
   11a14:	cmp	r6, #0
   11a18:	movne	r3, r1
   11a1c:	ldrne	r2, [pc, #76]	; 11a70 <__assert_fail@plt+0x36c>
   11a20:	addne	r3, r2, r3, lsl #2
   11a24:	strne	r6, [r3, #12]
   11a28:	rsb	r3, r4, r4, lsl #3
   11a2c:	ldr	r2, [pc, #60]	; 11a70 <__assert_fail@plt+0x36c>
   11a30:	add	r3, r2, r3, lsl #2
   11a34:	ldrb	r3, [r3, #24]
   11a38:	cmp	r3, #0
   11a3c:	bne	11a58 <__assert_fail@plt+0x354>
   11a40:	rsb	r4, r4, r4, lsl #3
   11a44:	ldr	r3, [pc, #36]	; 11a70 <__assert_fail@plt+0x36c>
   11a48:	add	r4, r3, r4, lsl #2
   11a4c:	mov	r3, #1
   11a50:	strb	r3, [r4, #24]
   11a54:	pop	{r4, r5, r6, pc}
   11a58:	ldr	r3, [pc, #20]	; 11a74 <__assert_fail@plt+0x370>
   11a5c:	ldr	r2, [pc, #20]	; 11a78 <__assert_fail@plt+0x374>
   11a60:	ldr	r1, [pc, #20]	; 11a7c <__assert_fail@plt+0x378>
   11a64:	ldr	r0, [pc, #20]	; 11a80 <__assert_fail@plt+0x37c>
   11a68:	bl	11704 <__assert_fail@plt>
   11a6c:	andeq	pc, r2, r0, asr #6
   11a70:	andeq	pc, r2, ip, ror r1	; <UNPREDICTABLE>
   11a74:	andeq	sp, r1, r8, ror #6
   11a78:	andeq	r0, r0, r9, lsr #3
   11a7c:	andeq	sp, r1, r8, ror #9
   11a80:	strdeq	sp, [r1], -r4
   11a84:	push	{r4, lr}
   11a88:	mov	r4, r0
   11a8c:	ldr	r3, [pc, #64]	; 11ad4 <__assert_fail@plt+0x3d0>
   11a90:	ldr	r3, [r3, #336]	; 0x150
   11a94:	cmp	r3, #0
   11a98:	blt	11ac0 <__assert_fail@plt+0x3bc>
   11a9c:	ldr	r3, [pc, #48]	; 11ad4 <__assert_fail@plt+0x3d0>
   11aa0:	ldr	r1, [r3, #336]	; 0x150
   11aa4:	ldr	r2, [pc, #44]	; 11ad8 <__assert_fail@plt+0x3d4>
   11aa8:	ldr	r3, [pc, #44]	; 11adc <__assert_fail@plt+0x3d8>
   11aac:	cmp	r1, #0
   11ab0:	moveq	r3, r2
   11ab4:	mov	r0, r4
   11ab8:	blx	r3
   11abc:	pop	{r4, pc}
   11ac0:	mov	r0, #1
   11ac4:	bl	116c8 <isatty@plt>
   11ac8:	ldr	r3, [pc, #4]	; 11ad4 <__assert_fail@plt+0x3d0>
   11acc:	str	r0, [r3, #336]	; 0x150
   11ad0:	b	11a9c <__assert_fail@plt+0x398>
   11ad4:	andeq	pc, r2, ip, ror r1	; <UNPREDICTABLE>
   11ad8:	andeq	r1, r1, r8, lsr r8
   11adc:	andeq	r1, r1, r4, asr #27
   11ae0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ae4:	sub	sp, sp, #700	; 0x2bc
   11ae8:	bl	11988 <__assert_fail@plt+0x284>
   11aec:	ldr	r3, [pc, #628]	; 11d68 <__assert_fail@plt+0x664>
   11af0:	ldr	r3, [r3, #16]
   11af4:	cmp	r3, #0
   11af8:	beq	11d60 <__assert_fail@plt+0x65c>
   11afc:	mov	r7, #0
   11b00:	ldr	r6, [pc, #608]	; 11d68 <__assert_fail@plt+0x664>
   11b04:	ldr	r8, [pc, #608]	; 11d6c <__assert_fail@plt+0x668>
   11b08:	mov	r9, #0
   11b0c:	b	11cc0 <__assert_fail@plt+0x5bc>
   11b10:	ldr	r3, [r6, #28]
   11b14:	tst	r3, #16
   11b18:	bne	11c58 <__assert_fail@plt+0x554>
   11b1c:	ldr	r3, [r6, #28]
   11b20:	and	r3, r3, #292	; 0x124
   11b24:	str	r3, [sp, #20]
   11b28:	ldr	r3, [r6, #32]
   11b2c:	str	r3, [sp, #24]
   11b30:	ldr	r2, [r6, #36]	; 0x24
   11b34:	str	r2, [sp, #28]
   11b38:	mov	r4, r3
   11b3c:	mov	r5, r2
   11b40:	str	r7, [sp, #32]
   11b44:	str	sl, [sp, #36]	; 0x24
   11b48:	mov	fp, r3
   11b4c:	mov	r7, r2
   11b50:	mov	r2, #1000	; 0x3e8
   11b54:	mov	r3, #0
   11b58:	mov	r0, fp
   11b5c:	mov	r1, r7
   11b60:	bl	1d124 <__assert_fail@plt+0xba20>
   11b64:	orrs	r3, r2, r3
   11b68:	moveq	sl, #1
   11b6c:	movne	sl, #0
   11b70:	mov	r2, #1000	; 0x3e8
   11b74:	mov	r3, #0
   11b78:	mov	r0, fp
   11b7c:	mov	r1, r7
   11b80:	bl	1d124 <__assert_fail@plt+0xba20>
   11b84:	mov	fp, r0
   11b88:	mov	r7, r1
   11b8c:	and	r2, r4, r8
   11b90:	and	r3, r5, r9
   11b94:	orrs	r3, r2, r3
   11b98:	moveq	r2, #1
   11b9c:	movne	r2, #0
   11ba0:	lsr	r3, r4, #10
   11ba4:	orr	r3, r3, r5, lsl #22
   11ba8:	lsr	r1, r5, #10
   11bac:	mov	r4, r3
   11bb0:	mov	r5, r1
   11bb4:	tst	sl, r2
   11bb8:	bne	11b50 <__assert_fail@plt+0x44c>
   11bbc:	mov	fp, sl
   11bc0:	ldr	r7, [sp, #32]
   11bc4:	ldr	sl, [sp, #36]	; 0x24
   11bc8:	cmp	fp, r2
   11bcc:	ldr	r3, [sp, #20]
   11bd0:	orrge	r3, r3, #152	; 0x98
   11bd4:	orrlt	r3, r3, #184	; 0xb8
   11bd8:	cmp	fp, r2
   11bdc:	bicgt	r3, r3, #32
   11be0:	tst	r3, #32
   11be4:	orreq	r3, r3, #256	; 0x100
   11be8:	mov	r0, #1
   11bec:	mov	r1, #0
   11bf0:	strd	r0, [sp, #8]
   11bf4:	strd	r0, [sp]
   11bf8:	add	r2, sp, #44	; 0x2c
   11bfc:	ldr	r0, [sp, #24]
   11c00:	ldr	r1, [sp, #28]
   11c04:	bl	16720 <__assert_fail@plt+0x501c>
   11c08:	mov	r4, r0
   11c0c:	mov	r2, #5
   11c10:	ldr	r1, [pc, #344]	; 11d70 <__assert_fail@plt+0x66c>
   11c14:	mov	r0, #0
   11c18:	bl	113bc <dcgettext@plt>
   11c1c:	mov	r5, r0
   11c20:	mov	r2, #5
   11c24:	ldr	r1, [pc, #328]	; 11d74 <__assert_fail@plt+0x670>
   11c28:	mov	r0, #0
   11c2c:	bl	113bc <dcgettext@plt>
   11c30:	str	r5, [sp]
   11c34:	mov	r3, r4
   11c38:	mov	r2, r0
   11c3c:	mov	r1, #1
   11c40:	add	r0, sp, #40	; 0x28
   11c44:	bl	114b8 <__asprintf_chk@plt>
   11c48:	cmn	r0, #1
   11c4c:	moveq	r3, #0
   11c50:	streq	r3, [sp, #40]	; 0x28
   11c54:	b	11c64 <__assert_fail@plt+0x560>
   11c58:	mov	r0, r5
   11c5c:	bl	113c8 <strdup@plt>
   11c60:	str	r0, [sp, #40]	; 0x28
   11c64:	ldr	r0, [sp, #40]	; 0x28
   11c68:	cmp	r0, #0
   11c6c:	beq	11d5c <__assert_fail@plt+0x658>
   11c70:	bl	11a84 <__assert_fail@plt+0x380>
   11c74:	ldr	r3, [r6, #8]
   11c78:	sub	r3, r3, #-1073741823	; 0xc0000001
   11c7c:	ldr	r2, [r6, #12]
   11c80:	ldr	r3, [r2, r3, lsl #2]
   11c84:	ldr	r2, [sp, #40]	; 0x28
   11c88:	str	r2, [r3, sl]
   11c8c:	mov	r1, #0
   11c90:	ldr	r0, [sp, #40]	; 0x28
   11c94:	bl	177ec <__assert_fail@plt+0x60e8>
   11c98:	ldr	r3, [r6, #20]
   11c9c:	ldr	r2, [r3, sl]
   11ca0:	ldr	r3, [r2, #16]
   11ca4:	cmp	r3, r0
   11ca8:	movcs	r0, r3
   11cac:	str	r0, [r2, #16]
   11cb0:	add	r7, r7, #1
   11cb4:	ldr	r3, [r6, #16]
   11cb8:	cmp	r3, r7
   11cbc:	bls	11d60 <__assert_fail@plt+0x65c>
   11cc0:	mov	r3, #0
   11cc4:	str	r3, [sp, #40]	; 0x28
   11cc8:	lsl	sl, r7, #2
   11ccc:	ldr	r4, [r6, #20]
   11cd0:	ldr	r3, [r4, r7, lsl #2]
   11cd4:	mov	r2, #5
   11cd8:	ldr	r1, [r3, #12]
   11cdc:	mov	r0, #0
   11ce0:	bl	113bc <dcgettext@plt>
   11ce4:	mov	r5, r0
   11ce8:	ldr	r3, [r4, r7, lsl #2]
   11cec:	ldr	r3, [r3]
   11cf0:	cmp	r3, #2
   11cf4:	bne	11c58 <__assert_fail@plt+0x554>
   11cf8:	ldr	r3, [r6, #24]
   11cfc:	cmp	r3, #0
   11d00:	beq	11b1c <__assert_fail@plt+0x418>
   11d04:	cmp	r3, #4
   11d08:	beq	11b10 <__assert_fail@plt+0x40c>
   11d0c:	cmp	r3, #3
   11d10:	bne	11c58 <__assert_fail@plt+0x554>
   11d14:	add	r2, sp, #44	; 0x2c
   11d18:	ldrd	r0, [r6, #32]
   11d1c:	bl	1713c <__assert_fail@plt+0x5a38>
   11d20:	mov	r4, r0
   11d24:	mov	r2, #5
   11d28:	ldr	r1, [pc, #68]	; 11d74 <__assert_fail@plt+0x670>
   11d2c:	mov	r0, #0
   11d30:	bl	113bc <dcgettext@plt>
   11d34:	str	r5, [sp]
   11d38:	mov	r3, r4
   11d3c:	mov	r2, r0
   11d40:	mov	r1, #1
   11d44:	add	r0, sp, #40	; 0x28
   11d48:	bl	114b8 <__asprintf_chk@plt>
   11d4c:	cmn	r0, #1
   11d50:	moveq	r3, #0
   11d54:	streq	r3, [sp, #40]	; 0x28
   11d58:	b	11c64 <__assert_fail@plt+0x560>
   11d5c:	bl	1ab88 <__assert_fail@plt+0x9484>
   11d60:	add	sp, sp, #700	; 0x2bc
   11d64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d68:	andeq	pc, r2, r0, asr #6
   11d6c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   11d70:	andeq	sp, r1, r4, lsl #10
   11d74:	andeq	sp, r1, ip, lsl #10
   11d78:	ldr	r3, [pc, #64]	; 11dc0 <__assert_fail@plt+0x6bc>
   11d7c:	ldr	ip, [r3, #40]	; 0x28
   11d80:	cmp	ip, #0
   11d84:	beq	11db8 <__assert_fail@plt+0x6b4>
   11d88:	push	{lr}		; (str lr, [sp, #-4]!)
   11d8c:	sub	sp, sp, #28
   11d90:	mov	r2, r0
   11d94:	mov	r3, r1
   11d98:	add	r1, sp, #24
   11d9c:	strd	r2, [r1, #-24]!	; 0xffffffe8
   11da0:	mov	r0, ip
   11da4:	bl	15c98 <__assert_fail@plt+0x4594>
   11da8:	cmp	r0, #0
   11dac:	ldrne	r0, [r0, #16]
   11db0:	add	sp, sp, #28
   11db4:	pop	{pc}		; (ldr pc, [sp], #4)
   11db8:	mov	r0, #0
   11dbc:	bx	lr
   11dc0:	andeq	pc, r2, r0, asr #6
   11dc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dc8:	sub	sp, sp, #20
   11dcc:	mov	r6, r0
   11dd0:	bl	1153c <strlen@plt>
   11dd4:	add	r7, r6, r0
   11dd8:	mov	r3, #0
   11ddc:	str	r3, [sp, #8]
   11de0:	str	r3, [sp, #12]
   11de4:	cmp	r6, r7
   11de8:	beq	11e6c <__assert_fail@plt+0x768>
   11dec:	mov	r4, r6
   11df0:	mov	sl, #63	; 0x3f
   11df4:	mov	r8, r3
   11df8:	mov	r9, #1
   11dfc:	b	11e20 <__assert_fail@plt+0x71c>
   11e00:	mov	fp, r9
   11e04:	strb	sl, [r6]
   11e08:	str	r8, [sp, #8]
   11e0c:	str	r8, [sp, #12]
   11e10:	add	r6, r6, #1
   11e14:	add	r4, r4, fp
   11e18:	cmp	r7, r4
   11e1c:	beq	11e70 <__assert_fail@plt+0x76c>
   11e20:	sub	r5, r7, r4
   11e24:	add	r3, sp, #8
   11e28:	mov	r2, r5
   11e2c:	mov	r1, r4
   11e30:	add	r0, sp, #4
   11e34:	bl	171a4 <__assert_fail@plt+0x5aa0>
   11e38:	mov	fp, r0
   11e3c:	cmp	r5, r0
   11e40:	bcc	11e00 <__assert_fail@plt+0x6fc>
   11e44:	ldr	r0, [sp, #4]
   11e48:	bl	113ec <iswcntrl@plt>
   11e4c:	cmp	r0, #0
   11e50:	bne	11e04 <__assert_fail@plt+0x700>
   11e54:	mov	r2, fp
   11e58:	mov	r1, r4
   11e5c:	mov	r0, r6
   11e60:	bl	11344 <memmove@plt>
   11e64:	add	r6, r6, fp
   11e68:	b	11e14 <__assert_fail@plt+0x710>
   11e6c:	mov	r6, r7
   11e70:	mov	r3, #0
   11e74:	strb	r3, [r6]
   11e78:	add	sp, sp, #20
   11e7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e80:	push	{r4, r5, lr}
   11e84:	sub	sp, sp, #20
   11e88:	mvn	r4, #2
   11e8c:	mvn	r5, #0
   11e90:	cmp	r3, r5
   11e94:	cmpeq	r2, r4
   11e98:	movhi	r1, r0
   11e9c:	orrls	r1, r0, #1
   11ea0:	cmp	r1, #0
   11ea4:	beq	11ef8 <__assert_fail@plt+0x7f4>
   11ea8:	mov	r4, r2
   11eac:	mov	r5, r3
   11eb0:	cmp	r0, #0
   11eb4:	beq	11f00 <__assert_fail@plt+0x7fc>
   11eb8:	ldr	r3, [pc, #108]	; 11f2c <__assert_fail@plt+0x828>
   11ebc:	ldr	r3, [r3, #28]
   11ec0:	ldrd	r0, [sp, #48]	; 0x30
   11ec4:	strd	r0, [sp, #8]
   11ec8:	ldrd	r0, [sp, #40]	; 0x28
   11ecc:	strd	r0, [sp]
   11ed0:	ldr	r2, [sp, #32]
   11ed4:	add	r2, r2, #1
   11ed8:	rsbs	r0, r4, #0
   11edc:	rsc	r1, r5, #0
   11ee0:	bl	16720 <__assert_fail@plt+0x501c>
   11ee4:	mov	r3, #45	; 0x2d
   11ee8:	strb	r3, [r0, #-1]
   11eec:	sub	r0, r0, #1
   11ef0:	add	sp, sp, #20
   11ef4:	pop	{r4, r5, pc}
   11ef8:	ldr	r0, [pc, #48]	; 11f30 <__assert_fail@plt+0x82c>
   11efc:	b	11ef0 <__assert_fail@plt+0x7ec>
   11f00:	ldr	r3, [pc, #36]	; 11f2c <__assert_fail@plt+0x828>
   11f04:	ldr	r3, [r3, #28]
   11f08:	ldrd	r0, [sp, #48]	; 0x30
   11f0c:	strd	r0, [sp, #8]
   11f10:	ldrd	r0, [sp, #40]	; 0x28
   11f14:	strd	r0, [sp]
   11f18:	ldr	r2, [sp, #32]
   11f1c:	mov	r0, r4
   11f20:	mov	r1, r5
   11f24:	bl	16720 <__assert_fail@plt+0x501c>
   11f28:	b	11ef0 <__assert_fail@plt+0x7ec>
   11f2c:	andeq	pc, r2, r0, asr #6
   11f30:	andeq	sp, r1, r4, lsl r5
   11f34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f38:	vpush	{d8-d11}
   11f3c:	sub	sp, sp, #924	; 0x39c
   11f40:	mov	r8, r0
   11f44:	mov	r4, r1
   11f48:	mov	sl, r2
   11f4c:	mov	r9, r3
   11f50:	ldrb	r6, [sp, #1000]	; 0x3e8
   11f54:	ldrb	r7, [sp, #1008]	; 0x3f0
   11f58:	cmp	r6, #0
   11f5c:	beq	11f70 <__assert_fail@plt+0x86c>
   11f60:	ldr	r3, [pc, #1420]	; 124f4 <__assert_fail@plt+0xdf0>
   11f64:	ldrb	r3, [r3, #44]	; 0x2c
   11f68:	cmp	r3, #0
   11f6c:	bne	11fe8 <__assert_fail@plt+0x8e4>
   11f70:	ldrb	r3, [sp, #996]	; 0x3e4
   11f74:	cmp	r3, #0
   11f78:	beq	11f9c <__assert_fail@plt+0x898>
   11f7c:	ldr	r3, [pc, #1392]	; 124f4 <__assert_fail@plt+0xdf0>
   11f80:	ldrb	r3, [r3, #45]	; 0x2d
   11f84:	cmp	r3, #0
   11f88:	bne	11f9c <__assert_fail@plt+0x898>
   11f8c:	ldr	r3, [pc, #1376]	; 124f4 <__assert_fail@plt+0xdf0>
   11f90:	ldrb	r3, [r3, #46]	; 0x2e
   11f94:	cmp	r3, #0
   11f98:	beq	11fe8 <__assert_fail@plt+0x8e4>
   11f9c:	ldr	r0, [sp, #992]	; 0x3e0
   11fa0:	bl	118b4 <__assert_fail@plt+0x1b0>
   11fa4:	cmp	r0, #0
   11fa8:	beq	11fe8 <__assert_fail@plt+0x8e4>
   11fac:	ldr	r0, [sp, #992]	; 0x3e0
   11fb0:	bl	11914 <__assert_fail@plt+0x210>
   11fb4:	cmp	r0, #0
   11fb8:	bne	11fe8 <__assert_fail@plt+0x8e4>
   11fbc:	ldr	r3, [sp, #1004]	; 0x3ec
   11fc0:	clz	r5, r3
   11fc4:	lsr	r5, r5, #5
   11fc8:	cmp	r4, #0
   11fcc:	moveq	r3, #0
   11fd0:	andne	r3, r5, #1
   11fd4:	cmp	r3, #0
   11fd8:	beq	11ff4 <__assert_fail@plt+0x8f0>
   11fdc:	ldrb	r3, [r4]
   11fe0:	cmp	r3, #47	; 0x2f
   11fe4:	beq	11ff4 <__assert_fail@plt+0x8f0>
   11fe8:	add	sp, sp, #924	; 0x39c
   11fec:	vpop	{d8-d11}
   11ff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ff4:	cmp	r9, #0
   11ff8:	beq	122d8 <__assert_fail@plt+0xbd4>
   11ffc:	ldr	r3, [sp, #1004]	; 0x3ec
   12000:	cmp	r3, #0
   12004:	beq	122e8 <__assert_fail@plt+0xbe4>
   12008:	add	ip, sp, #864	; 0x360
   1200c:	mov	lr, r3
   12010:	ldm	lr!, {r0, r1, r2, r3}
   12014:	stmia	ip!, {r0, r1, r2, r3}
   12018:	ldm	lr!, {r0, r1, r2, r3}
   1201c:	stmia	ip!, {r0, r1, r2, r3}
   12020:	ldm	lr!, {r0, r1, r2, r3}
   12024:	stmia	ip!, {r0, r1, r2, r3}
   12028:	ldm	lr, {r0, r1}
   1202c:	stm	ip, {r0, r1}
   12030:	add	r3, sp, #872	; 0x368
   12034:	ldrd	r2, [r3]
   12038:	orrs	r3, r2, r3
   1203c:	bne	12050 <__assert_fail@plt+0x94c>
   12040:	ldr	r3, [pc, #1196]	; 124f4 <__assert_fail@plt+0xdf0>
   12044:	ldrb	r3, [r3, #45]	; 0x2d
   12048:	cmp	r3, #0
   1204c:	beq	124bc <__assert_fail@plt+0xdb8>
   12050:	ldr	r3, [sp, #1004]	; 0x3ec
   12054:	cmp	r3, #0
   12058:	beq	12374 <__assert_fail@plt+0xc70>
   1205c:	bl	11988 <__assert_fail@plt+0x284>
   12060:	ldr	r3, [pc, #1152]	; 124e8 <__assert_fail@plt+0xde4>
   12064:	cmp	sl, #0
   12068:	moveq	sl, r3
   1206c:	mov	r0, r3
   12070:	cmp	r8, #0
   12074:	movne	r0, r8
   12078:	bl	1ab6c <__assert_fail@plt+0x9468>
   1207c:	mov	r6, r0
   12080:	str	r0, [sp, #64]	; 0x40
   12084:	cmp	r7, #0
   12088:	beq	120b0 <__assert_fail@plt+0x9ac>
   1208c:	bl	1153c <strlen@plt>
   12090:	cmp	r0, #36	; 0x24
   12094:	bls	120b0 <__assert_fail@plt+0x9ac>
   12098:	sub	r0, r0, #36	; 0x24
   1209c:	ldr	r1, [pc, #1096]	; 124ec <__assert_fail@plt+0xde8>
   120a0:	add	r0, r6, r0
   120a4:	bl	116f8 <strspn@plt>
   120a8:	cmp	r0, #36	; 0x24
   120ac:	beq	12ac4 <__assert_fail@plt+0x13c0>
   120b0:	ldr	r3, [pc, #1072]	; 124e8 <__assert_fail@plt+0xde4>
   120b4:	ldr	r2, [sp, #992]	; 0x3e0
   120b8:	cmp	r2, #0
   120bc:	moveq	r2, r3
   120c0:	str	r2, [sp, #992]	; 0x3e0
   120c4:	mov	r2, #1
   120c8:	mov	r3, #0
   120cc:	add	r1, sp, #744	; 0x2e8
   120d0:	strd	r2, [r1]
   120d4:	add	r1, sp, #736	; 0x2e0
   120d8:	strd	r2, [r1]
   120dc:	add	r3, sp, #904	; 0x388
   120e0:	ldrd	r2, [r3]
   120e4:	mov	r6, r2
   120e8:	mov	r7, r3
   120ec:	strd	r6, [sp, #40]	; 0x28
   120f0:	add	r1, sp, #752	; 0x2f0
   120f4:	strd	r2, [r1]
   120f8:	add	r3, sp, #912	; 0x390
   120fc:	ldrd	r2, [r3]
   12100:	strd	r2, [sp, #24]
   12104:	add	r3, sp, #776	; 0x308
   12108:	ldrd	r0, [sp, #24]
   1210c:	strd	r0, [r3]
   12110:	add	r3, sp, #760	; 0x2f8
   12114:	strd	r0, [r3]
   12118:	mov	r1, #0
   1211c:	strb	r1, [sp, #768]	; 0x300
   12120:	mvn	r2, #0
   12124:	mvn	r3, #0
   12128:	add	r0, sp, #784	; 0x310
   1212c:	strd	r2, [r0]
   12130:	strb	r1, [sp, #792]	; 0x318
   12134:	mvn	r2, #2
   12138:	mvn	r3, #0
   1213c:	ldrd	r0, [sp, #24]
   12140:	cmp	r1, r3
   12144:	cmpeq	r0, r2
   12148:	movls	r1, #1
   1214c:	movhi	r1, #0
   12150:	cmp	r7, r3
   12154:	cmpeq	r6, r2
   12158:	movhi	r3, #0
   1215c:	andls	r3, r1, #1
   12160:	cmp	r3, #0
   12164:	beq	121a0 <__assert_fail@plt+0xa9c>
   12168:	ldrd	r0, [sp, #24]
   1216c:	subs	r0, r6, r0
   12170:	sbc	r1, r7, r1
   12174:	mov	r2, r0
   12178:	mov	r3, r1
   1217c:	add	r1, sp, #784	; 0x310
   12180:	strd	r2, [r1]
   12184:	mov	r3, r7
   12188:	ldrd	r0, [sp, #24]
   1218c:	cmp	r7, r1
   12190:	cmpeq	r6, r0
   12194:	movcc	r3, #1
   12198:	movcs	r3, #0
   1219c:	strb	r3, [sp, #792]	; 0x318
   121a0:	ldr	lr, [sp, #864]	; 0x360
   121a4:	ldr	fp, [sp, #868]	; 0x364
   121a8:	str	lr, [sp, #800]	; 0x320
   121ac:	str	fp, [sp, #804]	; 0x324
   121b0:	ldr	r3, [pc, #828]	; 124f4 <__assert_fail@plt+0xdf0>
   121b4:	ldrd	r2, [r3, #32]
   121b8:	add	r1, sp, #808	; 0x328
   121bc:	strd	r2, [r1]
   121c0:	add	r3, sp, #872	; 0x368
   121c4:	ldrd	r2, [r3]
   121c8:	mov	r6, r2
   121cc:	mov	r7, r3
   121d0:	strd	r6, [sp, #48]	; 0x30
   121d4:	add	r1, sp, #816	; 0x330
   121d8:	strd	r2, [r1]
   121dc:	add	r3, sp, #888	; 0x378
   121e0:	ldrd	r2, [r3]
   121e4:	mov	r0, r2
   121e8:	mov	r1, r3
   121ec:	strd	r0, [sp, #32]
   121f0:	add	ip, sp, #824	; 0x338
   121f4:	strd	r2, [ip]
   121f8:	add	r3, sp, #880	; 0x370
   121fc:	ldrd	r8, [r3]
   12200:	strd	r8, [sp, #56]	; 0x38
   12204:	add	r3, sp, #840	; 0x348
   12208:	strd	r8, [r3]
   1220c:	mvn	r2, #2
   12210:	mvn	r3, #0
   12214:	cmp	r1, r3
   12218:	cmpeq	r0, r2
   1221c:	ldrb	ip, [sp, #896]	; 0x380
   12220:	movhi	r1, #0
   12224:	andls	r1, ip, #1
   12228:	str	r1, [sp, #68]	; 0x44
   1222c:	strb	r1, [sp, #832]	; 0x340
   12230:	mvn	r0, #0
   12234:	mvn	r1, #0
   12238:	add	ip, sp, #848	; 0x350
   1223c:	strd	r0, [ip]
   12240:	mov	r1, #0
   12244:	strb	r1, [sp, #856]	; 0x358
   12248:	mov	r1, r9
   1224c:	cmp	r9, r3
   12250:	cmpeq	r8, r2
   12254:	movls	r1, #1
   12258:	movhi	r1, #0
   1225c:	cmp	r7, r3
   12260:	cmpeq	r6, r2
   12264:	movhi	r1, #0
   12268:	andls	r1, r1, #1
   1226c:	cmp	r1, #0
   12270:	beq	122a0 <__assert_fail@plt+0xb9c>
   12274:	subs	r0, r6, r8
   12278:	sbc	r1, r7, r9
   1227c:	mov	r2, r0
   12280:	mov	r3, r1
   12284:	strd	r2, [ip]
   12288:	mov	r3, r7
   1228c:	cmp	r7, r9
   12290:	cmpeq	r6, r8
   12294:	movcc	r3, #1
   12298:	movcs	r3, #0
   1229c:	strb	r3, [sp, #856]	; 0x358
   122a0:	ldr	r3, [pc, #588]	; 124f4 <__assert_fail@plt+0xdf0>
   122a4:	ldrb	r3, [r3, #53]	; 0x35
   122a8:	tst	r5, r3
   122ac:	bne	12508 <__assert_fail@plt+0xe04>
   122b0:	ldr	r3, [pc, #572]	; 124f4 <__assert_fail@plt+0xdf0>
   122b4:	ldr	r3, [r3, #16]
   122b8:	cmp	r3, #0
   122bc:	beq	12ab8 <__assert_fail@plt+0x13b4>
   122c0:	mov	r5, #0
   122c4:	ldr	r6, [pc, #552]	; 124f4 <__assert_fail@plt+0xdf0>
   122c8:	vldr	d8, [pc, #512]	; 124d0 <__assert_fail@plt+0xdcc>
   122cc:	vldr	d10, [pc, #516]	; 124d8 <__assert_fail@plt+0xdd4>
   122d0:	vldr	d9, [pc, #520]	; 124e0 <__assert_fail@plt+0xddc>
   122d4:	b	12794 <__assert_fail@plt+0x1090>
   122d8:	cmp	r4, #0
   122dc:	movne	r9, r4
   122e0:	moveq	r9, r8
   122e4:	b	11ffc <__assert_fail@plt+0x8f8>
   122e8:	add	r2, sp, #864	; 0x360
   122ec:	mov	r1, r8
   122f0:	mov	r0, r9
   122f4:	bl	154d0 <__assert_fail@plt+0x3dcc>
   122f8:	cmp	r0, #0
   122fc:	beq	123c0 <__assert_fail@plt+0xcbc>
   12300:	cmp	r7, #0
   12304:	beq	12384 <__assert_fail@plt+0xc80>
   12308:	bl	1156c <__errno_location@plt>
   1230c:	ldr	r3, [r0]
   12310:	cmp	r3, #2
   12314:	cmpne	r3, #13
   12318:	bne	12384 <__assert_fail@plt+0xc80>
   1231c:	ldr	r3, [pc, #464]	; 124f4 <__assert_fail@plt+0xdf0>
   12320:	ldrb	r3, [r3, #45]	; 0x2d
   12324:	cmp	r3, #0
   12328:	beq	11fe8 <__assert_fail@plt+0x8e4>
   1232c:	mov	r3, #0
   12330:	strb	r3, [sp, #896]	; 0x380
   12334:	mvn	r2, #0
   12338:	mvn	r3, #0
   1233c:	add	r1, sp, #912	; 0x390
   12340:	strd	r2, [r1]
   12344:	add	r1, sp, #904	; 0x388
   12348:	strd	r2, [r1]
   1234c:	add	r1, sp, #888	; 0x378
   12350:	strd	r2, [r1]
   12354:	add	r1, sp, #880	; 0x370
   12358:	strd	r2, [r1]
   1235c:	add	r1, sp, #872	; 0x368
   12360:	strd	r2, [r1]
   12364:	add	r1, sp, #864	; 0x360
   12368:	strd	r2, [r1]
   1236c:	ldr	r3, [pc, #372]	; 124e8 <__assert_fail@plt+0xde4>
   12370:	str	r3, [sp, #992]	; 0x3e0
   12374:	mov	r2, #1
   12378:	ldr	r3, [pc, #372]	; 124f4 <__assert_fail@plt+0xdf0>
   1237c:	strb	r2, [r3, #52]	; 0x34
   12380:	b	1205c <__assert_fail@plt+0x958>
   12384:	bl	1156c <__errno_location@plt>
   12388:	ldr	r4, [r0]
   1238c:	mov	r2, r9
   12390:	mov	r1, #3
   12394:	mov	r0, #0
   12398:	bl	19cf0 <__assert_fail@plt+0x85ec>
   1239c:	mov	r3, r0
   123a0:	ldr	r2, [pc, #328]	; 124f0 <__assert_fail@plt+0xdec>
   123a4:	mov	r1, r4
   123a8:	mov	r0, #0
   123ac:	bl	11494 <error@plt>
   123b0:	mov	r2, #1
   123b4:	ldr	r3, [pc, #312]	; 124f4 <__assert_fail@plt+0xdf0>
   123b8:	str	r2, [r3, #48]	; 0x30
   123bc:	b	11fe8 <__assert_fail@plt+0x8e4>
   123c0:	cmp	r7, #0
   123c4:	beq	1249c <__assert_fail@plt+0xd98>
   123c8:	ldr	r3, [pc, #292]	; 124f4 <__assert_fail@plt+0xdf0>
   123cc:	ldrb	r3, [r3, #45]	; 0x2d
   123d0:	cmp	r3, #0
   123d4:	bne	123fc <__assert_fail@plt+0xcf8>
   123d8:	add	r3, sp, #872	; 0x368
   123dc:	ldrd	r2, [r3]
   123e0:	orrs	r3, r2, r3
   123e4:	bne	12374 <__assert_fail@plt+0xc70>
   123e8:	ldr	r3, [pc, #260]	; 124f4 <__assert_fail@plt+0xdf0>
   123ec:	ldrb	r3, [r3, #46]	; 0x2e
   123f0:	cmp	r3, #0
   123f4:	bne	12374 <__assert_fail@plt+0xc70>
   123f8:	b	11fe8 <__assert_fail@plt+0x8e4>
   123fc:	add	r2, sp, #80	; 0x50
   12400:	mov	r1, r9
   12404:	mov	r0, #3
   12408:	bl	116bc <__xstat64@plt>
   1240c:	cmp	r0, #0
   12410:	bne	1249c <__assert_fail@plt+0xd98>
   12414:	ldrd	r0, [sp, #80]	; 0x50
   12418:	bl	11d78 <__assert_fail@plt+0x674>
   1241c:	cmp	r0, #0
   12420:	beq	1249c <__assert_fail@plt+0xd98>
   12424:	ldr	r9, [r0, #8]
   12428:	cmp	r9, #0
   1242c:	beq	1249c <__assert_fail@plt+0xd98>
   12430:	mov	r1, r8
   12434:	ldr	r0, [r9]
   12438:	bl	11320 <strcmp@plt>
   1243c:	cmp	r0, #0
   12440:	beq	1249c <__assert_fail@plt+0xd98>
   12444:	ldrb	r3, [r9, #24]
   12448:	and	r6, r6, r3, lsr #1
   1244c:	tst	r6, #1
   12450:	bne	1249c <__assert_fail@plt+0xd98>
   12454:	mov	r3, #0
   12458:	strb	r3, [sp, #896]	; 0x380
   1245c:	mvn	r2, #0
   12460:	mvn	r3, #0
   12464:	add	r1, sp, #912	; 0x390
   12468:	strd	r2, [r1]
   1246c:	add	r1, sp, #904	; 0x388
   12470:	strd	r2, [r1]
   12474:	add	r1, sp, #888	; 0x378
   12478:	strd	r2, [r1]
   1247c:	add	r1, sp, #880	; 0x370
   12480:	strd	r2, [r1]
   12484:	add	r1, sp, #872	; 0x368
   12488:	strd	r2, [r1]
   1248c:	add	r1, sp, #864	; 0x360
   12490:	strd	r2, [r1]
   12494:	ldr	r3, [pc, #76]	; 124e8 <__assert_fail@plt+0xde4>
   12498:	str	r3, [sp, #992]	; 0x3e0
   1249c:	add	r3, sp, #872	; 0x368
   124a0:	ldrd	r2, [r3]
   124a4:	orrs	r3, r2, r3
   124a8:	bne	12374 <__assert_fail@plt+0xc70>
   124ac:	ldr	r3, [pc, #64]	; 124f4 <__assert_fail@plt+0xdf0>
   124b0:	ldrb	r3, [r3, #45]	; 0x2d
   124b4:	cmp	r3, #0
   124b8:	bne	12374 <__assert_fail@plt+0xc70>
   124bc:	ldr	r3, [pc, #48]	; 124f4 <__assert_fail@plt+0xdf0>
   124c0:	ldrb	r3, [r3, #46]	; 0x2e
   124c4:	cmp	r3, #0
   124c8:	beq	11fe8 <__assert_fail@plt+0x8e4>
   124cc:	b	12050 <__assert_fail@plt+0x94c>
	...
   124dc:	subsmi	r0, r9, r0
   124e0:	andeq	r0, r0, r0
   124e4:	svccc	0x00f00000	; IMB
   124e8:	andeq	sp, r1, r4, lsl r5
   124ec:	andeq	sp, r1, r8, lsl r5
   124f0:	andeq	lr, r1, ip, asr r4
   124f4:	andeq	pc, r2, r0, asr #6
   124f8:	andeq	sp, r1, r4, ror r3
   124fc:	andeq	r0, r0, r6, lsl #9
   12500:	andeq	sp, r1, r8, ror #9
   12504:	andeq	sp, r1, r0, lsr r5
   12508:	mvn	r2, #2
   1250c:	mvn	r3, #0
   12510:	ldrd	r6, [sp, #40]	; 0x28
   12514:	cmp	r7, r3
   12518:	cmpeq	r6, r2
   1251c:	bhi	1253c <__assert_fail@plt+0xe38>
   12520:	ldr	r1, [pc, #-52]	; 124f4 <__assert_fail@plt+0xdf0>
   12524:	ldrd	r2, [r1, #96]	; 0x60
   12528:	adds	r6, r6, r2
   1252c:	adc	r7, r7, r3
   12530:	mov	r2, r6
   12534:	mov	r3, r7
   12538:	strd	r2, [r1, #96]	; 0x60
   1253c:	mvn	r2, #2
   12540:	mvn	r3, #0
   12544:	ldrd	r0, [sp, #24]
   12548:	cmp	r1, r3
   1254c:	cmpeq	r0, r2
   12550:	bhi	1256c <__assert_fail@plt+0xe68>
   12554:	ldr	r1, [pc, #-104]	; 124f4 <__assert_fail@plt+0xdf0>
   12558:	ldrd	r2, [r1, #104]	; 0x68
   1255c:	ldrd	r6, [sp, #24]
   12560:	adds	r6, r6, r2
   12564:	adc	r7, r7, r3
   12568:	strd	r6, [r1, #104]	; 0x68
   1256c:	mvn	r2, #2
   12570:	mvn	r3, #0
   12574:	ldrd	r6, [sp, #48]	; 0x30
   12578:	cmp	r7, r3
   1257c:	cmpeq	r6, r2
   12580:	bhi	125a8 <__assert_fail@plt+0xea4>
   12584:	ldr	r1, [pc, #-152]	; 124f4 <__assert_fail@plt+0xdf0>
   12588:	mul	r3, lr, r7
   1258c:	mla	r3, fp, r6, r3
   12590:	umull	r8, r9, lr, r6
   12594:	add	r9, r3, r9
   12598:	ldrd	r2, [r1, #64]	; 0x40
   1259c:	adds	r6, r2, r8
   125a0:	adc	r7, r3, r9
   125a4:	strd	r6, [r1, #64]	; 0x40
   125a8:	mvn	r2, #2
   125ac:	mvn	r3, #0
   125b0:	ldrd	r0, [sp, #56]	; 0x38
   125b4:	cmp	r1, r3
   125b8:	cmpeq	r0, r2
   125bc:	bhi	125e4 <__assert_fail@plt+0xee0>
   125c0:	ldr	r5, [pc, #-212]	; 124f4 <__assert_fail@plt+0xdf0>
   125c4:	mul	r3, lr, r1
   125c8:	mla	r3, fp, r0, r3
   125cc:	umull	r0, r1, lr, r0
   125d0:	add	r1, r3, r1
   125d4:	ldrd	r2, [r5, #72]	; 0x48
   125d8:	adds	r6, r2, r0
   125dc:	adc	r7, r3, r1
   125e0:	strd	r6, [r5, #72]	; 0x48
   125e4:	mvn	r2, #2
   125e8:	mvn	r3, #0
   125ec:	ldrd	r0, [sp, #32]
   125f0:	cmp	r1, r3
   125f4:	cmpeq	r0, r2
   125f8:	bhi	122b0 <__assert_fail@plt+0xbac>
   125fc:	mul	r3, lr, r1
   12600:	mla	r3, fp, r0, r3
   12604:	umull	r6, r7, lr, r0
   12608:	add	r7, r3, r7
   1260c:	ldr	r3, [pc, #-288]	; 124f4 <__assert_fail@plt+0xdf0>
   12610:	ldrb	r3, [r3, #88]	; 0x58
   12614:	ldr	r2, [sp, #68]	; 0x44
   12618:	cmp	r2, r3
   1261c:	beq	126a4 <__assert_fail@plt+0xfa0>
   12620:	cmp	r3, #0
   12624:	beq	1263c <__assert_fail@plt+0xf38>
   12628:	ldr	lr, [pc, #-316]	; 124f4 <__assert_fail@plt+0xdf0>
   1262c:	ldrd	r2, [lr, #80]	; 0x50
   12630:	rsbs	r0, r2, #0
   12634:	rsc	r1, r3, #0
   12638:	strd	r0, [lr, #80]	; 0x50
   1263c:	ldr	r3, [sp, #68]	; 0x44
   12640:	cmp	r3, #0
   12644:	beq	12650 <__assert_fail@plt+0xf4c>
   12648:	rsbs	r6, r6, #0
   1264c:	rsc	r7, r7, #0
   12650:	ldr	r3, [pc, #-356]	; 124f4 <__assert_fail@plt+0xdf0>
   12654:	ldrd	r2, [r3, #80]	; 0x50
   12658:	cmp	r3, r7
   1265c:	cmpeq	r2, r6
   12660:	bls	126bc <__assert_fail@plt+0xfb8>
   12664:	subs	r2, r2, r6
   12668:	sbc	r3, r3, r7
   1266c:	mov	r0, r2
   12670:	mov	r1, r3
   12674:	ldr	r3, [pc, #-392]	; 124f4 <__assert_fail@plt+0xdf0>
   12678:	strd	r0, [r3, #80]	; 0x50
   1267c:	ldr	r3, [pc, #-400]	; 124f4 <__assert_fail@plt+0xdf0>
   12680:	ldrb	r3, [r3, #88]	; 0x58
   12684:	cmp	r3, #0
   12688:	beq	122b0 <__assert_fail@plt+0xbac>
   1268c:	ldr	r1, [pc, #-416]	; 124f4 <__assert_fail@plt+0xdf0>
   12690:	ldrd	r2, [r1, #80]	; 0x50
   12694:	rsbs	r6, r2, #0
   12698:	rsc	r7, r3, #0
   1269c:	strd	r6, [r1, #80]	; 0x50
   126a0:	b	122b0 <__assert_fail@plt+0xbac>
   126a4:	ldr	ip, [pc, #-440]	; 124f4 <__assert_fail@plt+0xdf0>
   126a8:	ldrd	r2, [ip, #80]	; 0x50
   126ac:	adds	r0, r2, r6
   126b0:	adc	r1, r3, r7
   126b4:	strd	r0, [ip, #80]	; 0x50
   126b8:	b	122b0 <__assert_fail@plt+0xbac>
   126bc:	ldr	lr, [pc, #-464]	; 124f4 <__assert_fail@plt+0xdf0>
   126c0:	subs	r0, r6, r2
   126c4:	sbc	r1, r7, r3
   126c8:	strd	r0, [lr, #80]	; 0x50
   126cc:	ldrb	r3, [sp, #68]	; 0x44
   126d0:	strb	r3, [lr, #88]	; 0x58
   126d4:	b	1267c <__assert_fail@plt+0xf78>
   126d8:	add	fp, sp, #736	; 0x2e0
   126dc:	ldr	r3, [r2]
   126e0:	cmp	r3, #11
   126e4:	ldrls	pc, [pc, r3, lsl #2]
   126e8:	b	12a90 <__assert_fail@plt+0x138c>
   126ec:	andeq	r2, r1, ip, lsr #14
   126f0:	andeq	r2, r1, ip, asr #15
   126f4:	ldrdeq	r2, [r1], -ip
   126f8:	andeq	r2, r1, ip, lsl #16
   126fc:	andeq	r2, r1, ip, lsr r8
   12700:	andeq	r2, r1, ip, ror #16
   12704:	ldrdeq	r2, [r1], -ip
   12708:	andeq	r2, r1, ip, lsl #16
   1270c:	andeq	r2, r1, ip, lsr r8
   12710:	andeq	r2, r1, ip, ror #16
   12714:	andeq	r2, r1, r0, lsl #21
   12718:	andeq	r2, r1, r0, ror sl
   1271c:	add	fp, sp, #800	; 0x320
   12720:	b	126dc <__assert_fail@plt+0xfd8>
   12724:	mov	fp, #0
   12728:	b	126dc <__assert_fail@plt+0xfd8>
   1272c:	ldr	r0, [sp, #64]	; 0x40
   12730:	bl	1ab6c <__assert_fail@plt+0x9468>
   12734:	str	r0, [sp, #76]	; 0x4c
   12738:	ldr	r0, [sp, #76]	; 0x4c
   1273c:	cmp	r0, #0
   12740:	beq	12aa4 <__assert_fail@plt+0x13a0>
   12744:	bl	11a84 <__assert_fail@plt+0x380>
   12748:	mov	r1, #0
   1274c:	ldr	r0, [sp, #76]	; 0x4c
   12750:	bl	177ec <__assert_fail@plt+0x60e8>
   12754:	ldr	r3, [r6, #20]
   12758:	ldr	r2, [r3, r7]
   1275c:	ldr	r3, [r2, #16]
   12760:	cmp	r3, r0
   12764:	movcs	r0, r3
   12768:	str	r0, [r2, #16]
   1276c:	ldr	r3, [r6, #8]
   12770:	sub	r3, r3, #-1073741823	; 0xc0000001
   12774:	ldr	r2, [r6, #12]
   12778:	ldr	r3, [r2, r3, lsl #2]
   1277c:	ldr	r2, [sp, #76]	; 0x4c
   12780:	str	r2, [r3, r7]
   12784:	add	r5, r5, #1
   12788:	ldr	r3, [r6, #16]
   1278c:	cmp	r3, r5
   12790:	bls	12ab8 <__assert_fail@plt+0x13b4>
   12794:	lsl	r7, r5, #2
   12798:	ldr	r3, [r6, #20]
   1279c:	ldr	r2, [r3, r5, lsl #2]
   127a0:	ldr	r3, [r2, #8]
   127a4:	cmp	r3, #1
   127a8:	beq	126d8 <__assert_fail@plt+0xfd4>
   127ac:	bcc	1271c <__assert_fail@plt+0x1018>
   127b0:	cmp	r3, #2
   127b4:	beq	12724 <__assert_fail@plt+0x1020>
   127b8:	ldr	r3, [pc, #-712]	; 124f8 <__assert_fail@plt+0xdf4>
   127bc:	ldr	r2, [pc, #-712]	; 124fc <__assert_fail@plt+0xdf8>
   127c0:	ldr	r1, [pc, #-712]	; 12500 <__assert_fail@plt+0xdfc>
   127c4:	ldr	r0, [pc, #-712]	; 12504 <__assert_fail@plt+0xe00>
   127c8:	bl	11704 <__assert_fail@plt>
   127cc:	ldr	r0, [sp, #992]	; 0x3e0
   127d0:	bl	1ab6c <__assert_fail@plt+0x9468>
   127d4:	str	r0, [sp, #76]	; 0x4c
   127d8:	b	12738 <__assert_fail@plt+0x1034>
   127dc:	ldrd	r2, [fp, #16]
   127e0:	ldrd	r0, [fp, #8]
   127e4:	strd	r0, [sp, #16]
   127e8:	ldrd	r0, [fp]
   127ec:	strd	r0, [sp, #8]
   127f0:	add	r1, sp, #80	; 0x50
   127f4:	str	r1, [sp]
   127f8:	mov	r0, #0
   127fc:	bl	11e80 <__assert_fail@plt+0x77c>
   12800:	bl	1ab6c <__assert_fail@plt+0x9468>
   12804:	str	r0, [sp, #76]	; 0x4c
   12808:	b	12738 <__assert_fail@plt+0x1034>
   1280c:	ldrd	r2, [fp, #48]	; 0x30
   12810:	ldrb	r0, [fp, #56]	; 0x38
   12814:	ldrd	r8, [fp, #8]
   12818:	strd	r8, [sp, #16]
   1281c:	ldrd	r8, [fp]
   12820:	strd	r8, [sp, #8]
   12824:	add	r1, sp, #80	; 0x50
   12828:	str	r1, [sp]
   1282c:	bl	11e80 <__assert_fail@plt+0x77c>
   12830:	bl	1ab6c <__assert_fail@plt+0x9468>
   12834:	str	r0, [sp, #76]	; 0x4c
   12838:	b	12738 <__assert_fail@plt+0x1034>
   1283c:	ldrd	r2, [fp, #24]
   12840:	ldrb	r0, [fp, #32]
   12844:	ldrd	r8, [fp, #8]
   12848:	strd	r8, [sp, #16]
   1284c:	ldrd	r8, [fp]
   12850:	strd	r8, [sp, #8]
   12854:	add	r1, sp, #80	; 0x50
   12858:	str	r1, [sp]
   1285c:	bl	11e80 <__assert_fail@plt+0x77c>
   12860:	bl	1ab6c <__assert_fail@plt+0x9468>
   12864:	str	r0, [sp, #76]	; 0x4c
   12868:	b	12738 <__assert_fail@plt+0x1034>
   1286c:	ldrd	r8, [fp, #48]	; 0x30
   12870:	mvn	r2, #2
   12874:	mvn	r3, #0
   12878:	cmp	r9, r3
   1287c:	cmpeq	r8, r2
   12880:	bhi	12a60 <__assert_fail@plt+0x135c>
   12884:	ldrd	r2, [fp, #24]
   12888:	mov	r0, r2
   1288c:	mov	r1, r3
   12890:	strd	r0, [sp, #32]
   12894:	mvn	r2, #2
   12898:	mvn	r3, #0
   1289c:	strd	r0, [sp, #24]
   128a0:	cmp	r1, r3
   128a4:	cmpeq	r0, r2
   128a8:	bhi	12a60 <__assert_fail@plt+0x135c>
   128ac:	ldrb	r2, [fp, #56]	; 0x38
   128b0:	eor	r3, r2, #1
   128b4:	add	r1, pc, #556	; 0x22c
   128b8:	ldrd	r0, [r1]
   128bc:	cmp	r9, r1
   128c0:	cmpeq	r8, r0
   128c4:	movhi	r3, #0
   128c8:	andls	r3, r3, #1
   128cc:	cmp	r3, #0
   128d0:	beq	12908 <__assert_fail@plt+0x1204>
   128d4:	ldrd	r0, [sp, #24]
   128d8:	adds	r0, r0, r8
   128dc:	adc	r1, r1, r9
   128e0:	strd	r0, [sp, #40]	; 0x28
   128e4:	orrs	r3, r0, r1
   128e8:	beq	12908 <__assert_fail@plt+0x1204>
   128ec:	cmp	r9, r1
   128f0:	cmpeq	r8, r0
   128f4:	movhi	ip, #1
   128f8:	movls	ip, #0
   128fc:	ldrb	r3, [fp, #32]
   12900:	cmp	ip, r3
   12904:	beq	129d4 <__assert_fail@plt+0x12d0>
   12908:	cmp	r2, #0
   1290c:	beq	12a30 <__assert_fail@plt+0x132c>
   12910:	rsbs	r0, r8, #0
   12914:	rsc	r1, r9, #0
   12918:	bl	1d0b0 <__assert_fail@plt+0xb9ac>
   1291c:	vmov	d7, r0, r1
   12920:	vneg.f64	d11, d7
   12924:	ldrb	r3, [fp, #32]
   12928:	cmp	r3, #0
   1292c:	beq	12a44 <__assert_fail@plt+0x1340>
   12930:	ldrd	r0, [sp, #32]
   12934:	rsbs	r0, r0, #0
   12938:	rsc	r1, r1, #0
   1293c:	bl	1d0b0 <__assert_fail@plt+0xb9ac>
   12940:	vmov	d7, r0, r1
   12944:	vneg.f64	d6, d7
   12948:	vadd.f64	d6, d11, d6
   1294c:	vcmp.f64	d6, d8
   12950:	vmrs	APSR_nzcv, fpscr
   12954:	beq	12a60 <__assert_fail@plt+0x135c>
   12958:	vmul.f64	d11, d11, d10
   1295c:	vdiv.f64	d7, d11, d6
   12960:	vcvt.s32.f64	s12, d7
   12964:	vcvt.f64.s32	d6, s12
   12968:	vsub.f64	d5, d6, d9
   1296c:	vcmpe.f64	d7, d5
   12970:	vmrs	APSR_nzcv, fpscr
   12974:	ble	1299c <__assert_fail@plt+0x1298>
   12978:	vadd.f64	d5, d6, d9
   1297c:	vcmpe.f64	d7, d5
   12980:	vmrs	APSR_nzcv, fpscr
   12984:	bhi	1299c <__assert_fail@plt+0x1298>
   12988:	vcmpe.f64	d7, d6
   1298c:	vmrs	APSR_nzcv, fpscr
   12990:	vmovle.f64	d7, d8
   12994:	vmovgt.f64	d7, d9
   12998:	vadd.f64	d7, d7, d6
   1299c:	vcmpe.f64	d7, d8
   129a0:	vmrs	APSR_nzcv, fpscr
   129a4:	blt	12a60 <__assert_fail@plt+0x135c>
   129a8:	vstr	d7, [sp]
   129ac:	ldr	r2, [pc, #316]	; 12af0 <__assert_fail@plt+0x13ec>
   129b0:	mov	r1, #1
   129b4:	add	r0, sp, #76	; 0x4c
   129b8:	bl	114b8 <__asprintf_chk@plt>
   129bc:	cmn	r0, #1
   129c0:	beq	12a54 <__assert_fail@plt+0x1350>
   129c4:	ldr	r0, [sp, #76]	; 0x4c
   129c8:	cmp	r0, #0
   129cc:	bne	12744 <__assert_fail@plt+0x1040>
   129d0:	b	12a5c <__assert_fail@plt+0x1358>
   129d4:	mov	r3, #100	; 0x64
   129d8:	umull	r0, r1, r8, r3
   129dc:	strd	r0, [sp, #24]
   129e0:	mla	r3, r3, r9, r1
   129e4:	str	r3, [sp, #28]
   129e8:	ldrd	r2, [sp, #40]	; 0x28
   129ec:	ldrd	r0, [sp, #24]
   129f0:	bl	1d124 <__assert_fail@plt+0xba20>
   129f4:	orrs	r3, r2, r3
   129f8:	movne	r3, #1
   129fc:	moveq	r3, #0
   12a00:	mov	r8, r3
   12a04:	mov	r9, #0
   12a08:	ldrd	r2, [sp, #40]	; 0x28
   12a0c:	ldrd	r0, [sp, #24]
   12a10:	bl	1d124 <__assert_fail@plt+0xba20>
   12a14:	adds	r8, r8, r0
   12a18:	adc	r9, r9, r1
   12a1c:	mov	r0, r8
   12a20:	mov	r1, r9
   12a24:	bl	1d0b0 <__assert_fail@plt+0xb9ac>
   12a28:	vmov	d7, r0, r1
   12a2c:	b	1299c <__assert_fail@plt+0x1298>
   12a30:	mov	r0, r8
   12a34:	mov	r1, r9
   12a38:	bl	1d0b0 <__assert_fail@plt+0xb9ac>
   12a3c:	vmov	d11, r0, r1
   12a40:	b	12924 <__assert_fail@plt+0x1220>
   12a44:	ldrd	r0, [sp, #32]
   12a48:	bl	1d0b0 <__assert_fail@plt+0xb9ac>
   12a4c:	vmov	d6, r0, r1
   12a50:	b	12948 <__assert_fail@plt+0x1244>
   12a54:	mov	r3, #0
   12a58:	str	r3, [sp, #76]	; 0x4c
   12a5c:	bl	1ab88 <__assert_fail@plt+0x9484>
   12a60:	ldr	r0, [pc, #140]	; 12af4 <__assert_fail@plt+0x13f0>
   12a64:	bl	113c8 <strdup@plt>
   12a68:	str	r0, [sp, #76]	; 0x4c
   12a6c:	b	129c4 <__assert_fail@plt+0x12c0>
   12a70:	mov	r0, sl
   12a74:	bl	1ab6c <__assert_fail@plt+0x9468>
   12a78:	str	r0, [sp, #76]	; 0x4c
   12a7c:	b	12738 <__assert_fail@plt+0x1034>
   12a80:	mov	r0, r4
   12a84:	bl	1ab6c <__assert_fail@plt+0x9468>
   12a88:	str	r0, [sp, #76]	; 0x4c
   12a8c:	b	12738 <__assert_fail@plt+0x1034>
   12a90:	ldr	r3, [pc, #96]	; 12af8 <__assert_fail@plt+0x13f4>
   12a94:	ldr	r2, [pc, #96]	; 12afc <__assert_fail@plt+0x13f8>
   12a98:	ldr	r1, [pc, #96]	; 12b00 <__assert_fail@plt+0x13fc>
   12a9c:	ldr	r0, [pc, #96]	; 12b04 <__assert_fail@plt+0x1400>
   12aa0:	bl	11704 <__assert_fail@plt>
   12aa4:	ldr	r3, [pc, #76]	; 12af8 <__assert_fail@plt+0x13f4>
   12aa8:	mov	r2, #1264	; 0x4f0
   12aac:	ldr	r1, [pc, #76]	; 12b00 <__assert_fail@plt+0x13fc>
   12ab0:	ldr	r0, [pc, #80]	; 12b08 <__assert_fail@plt+0x1404>
   12ab4:	bl	11704 <__assert_fail@plt>
   12ab8:	ldr	r0, [sp, #64]	; 0x40
   12abc:	bl	15478 <__assert_fail@plt+0x3d74>
   12ac0:	b	11fe8 <__assert_fail@plt+0x8e4>
   12ac4:	mov	r1, #0
   12ac8:	ldr	r0, [sp, #64]	; 0x40
   12acc:	bl	14a38 <__assert_fail@plt+0x3334>
   12ad0:	subs	r6, r0, #0
   12ad4:	beq	120b0 <__assert_fail@plt+0x9ac>
   12ad8:	ldr	r0, [sp, #64]	; 0x40
   12adc:	bl	15478 <__assert_fail@plt+0x3d74>
   12ae0:	str	r6, [sp, #64]	; 0x40
   12ae4:	b	120b0 <__assert_fail@plt+0x9ac>
   12ae8:			; <UNDEFINED> instruction: 0xf5c28f5c
   12aec:	addeq	r5, pc, #40, 24	; 0x2800
   12af0:	andeq	sp, r1, r4, asr #10
   12af4:	andeq	sp, r1, r4, lsl r5
   12af8:	andeq	sp, r1, r4, ror r3
   12afc:	andeq	r0, r0, ip, ror #9
   12b00:	andeq	sp, r1, r8, ror #9
   12b04:	andeq	sp, r1, ip, asr #10
   12b08:	andeq	sp, r1, r0, ror #10
   12b0c:	push	{lr}		; (str lr, [sp, #-4]!)
   12b10:	sub	sp, sp, #60	; 0x3c
   12b14:	subs	r6, r0, #0
   12b18:	beq	12b54 <__assert_fail@plt+0x1450>
   12b1c:	ldr	r3, [pc, #904]	; 12eac <__assert_fail@plt+0x17a8>
   12b20:	ldr	r4, [r3]
   12b24:	mov	r2, #5
   12b28:	ldr	r1, [pc, #896]	; 12eb0 <__assert_fail@plt+0x17ac>
   12b2c:	mov	r0, #0
   12b30:	bl	113bc <dcgettext@plt>
   12b34:	ldr	r3, [pc, #888]	; 12eb4 <__assert_fail@plt+0x17b0>
   12b38:	ldr	r3, [r3]
   12b3c:	mov	r2, r0
   12b40:	mov	r1, #1
   12b44:	mov	r0, r4
   12b48:	bl	115c0 <__fprintf_chk@plt>
   12b4c:	mov	r0, r6
   12b50:	bl	11530 <exit@plt>
   12b54:	mov	r2, #5
   12b58:	ldr	r1, [pc, #856]	; 12eb8 <__assert_fail@plt+0x17b4>
   12b5c:	mov	r0, #0
   12b60:	bl	113bc <dcgettext@plt>
   12b64:	ldr	r3, [pc, #840]	; 12eb4 <__assert_fail@plt+0x17b0>
   12b68:	ldr	r2, [r3]
   12b6c:	mov	r1, r0
   12b70:	mov	r0, #1
   12b74:	bl	1159c <__printf_chk@plt>
   12b78:	mov	r2, #5
   12b7c:	ldr	r1, [pc, #824]	; 12ebc <__assert_fail@plt+0x17b8>
   12b80:	mov	r0, #0
   12b84:	bl	113bc <dcgettext@plt>
   12b88:	ldr	r4, [pc, #816]	; 12ec0 <__assert_fail@plt+0x17bc>
   12b8c:	ldr	r1, [r4]
   12b90:	bl	112f0 <fputs_unlocked@plt>
   12b94:	mov	r2, #5
   12b98:	ldr	r1, [pc, #804]	; 12ec4 <__assert_fail@plt+0x17c0>
   12b9c:	mov	r0, #0
   12ba0:	bl	113bc <dcgettext@plt>
   12ba4:	ldr	r1, [r4]
   12ba8:	bl	112f0 <fputs_unlocked@plt>
   12bac:	mov	r2, #5
   12bb0:	ldr	r1, [pc, #784]	; 12ec8 <__assert_fail@plt+0x17c4>
   12bb4:	mov	r0, #0
   12bb8:	bl	113bc <dcgettext@plt>
   12bbc:	ldr	r1, [r4]
   12bc0:	bl	112f0 <fputs_unlocked@plt>
   12bc4:	mov	r2, #5
   12bc8:	ldr	r1, [pc, #764]	; 12ecc <__assert_fail@plt+0x17c8>
   12bcc:	mov	r0, #0
   12bd0:	bl	113bc <dcgettext@plt>
   12bd4:	ldr	r1, [r4]
   12bd8:	bl	112f0 <fputs_unlocked@plt>
   12bdc:	mov	r2, #5
   12be0:	ldr	r1, [pc, #744]	; 12ed0 <__assert_fail@plt+0x17cc>
   12be4:	mov	r0, #0
   12be8:	bl	113bc <dcgettext@plt>
   12bec:	ldr	r1, [r4]
   12bf0:	bl	112f0 <fputs_unlocked@plt>
   12bf4:	mov	r2, #5
   12bf8:	ldr	r1, [pc, #724]	; 12ed4 <__assert_fail@plt+0x17d0>
   12bfc:	mov	r0, #0
   12c00:	bl	113bc <dcgettext@plt>
   12c04:	ldr	r1, [r4]
   12c08:	bl	112f0 <fputs_unlocked@plt>
   12c0c:	mov	r2, #5
   12c10:	ldr	r1, [pc, #704]	; 12ed8 <__assert_fail@plt+0x17d4>
   12c14:	mov	r0, #0
   12c18:	bl	113bc <dcgettext@plt>
   12c1c:	ldr	r1, [r4]
   12c20:	bl	112f0 <fputs_unlocked@plt>
   12c24:	mov	r2, #5
   12c28:	ldr	r1, [pc, #684]	; 12edc <__assert_fail@plt+0x17d8>
   12c2c:	mov	r0, #0
   12c30:	bl	113bc <dcgettext@plt>
   12c34:	ldr	r1, [r4]
   12c38:	bl	112f0 <fputs_unlocked@plt>
   12c3c:	mov	r2, #5
   12c40:	ldr	r1, [pc, #664]	; 12ee0 <__assert_fail@plt+0x17dc>
   12c44:	mov	r0, #0
   12c48:	bl	113bc <dcgettext@plt>
   12c4c:	ldr	r1, [r4]
   12c50:	bl	112f0 <fputs_unlocked@plt>
   12c54:	mov	r2, #5
   12c58:	ldr	r1, [pc, #644]	; 12ee4 <__assert_fail@plt+0x17e0>
   12c5c:	mov	r0, #0
   12c60:	bl	113bc <dcgettext@plt>
   12c64:	ldr	r2, [pc, #636]	; 12ee8 <__assert_fail@plt+0x17e4>
   12c68:	mov	r1, r0
   12c6c:	mov	r0, #1
   12c70:	bl	1159c <__printf_chk@plt>
   12c74:	mov	r2, #5
   12c78:	ldr	r1, [pc, #620]	; 12eec <__assert_fail@plt+0x17e8>
   12c7c:	mov	r0, #0
   12c80:	bl	113bc <dcgettext@plt>
   12c84:	ldr	r1, [r4]
   12c88:	bl	112f0 <fputs_unlocked@plt>
   12c8c:	mov	r2, #5
   12c90:	ldr	r1, [pc, #600]	; 12ef0 <__assert_fail@plt+0x17ec>
   12c94:	mov	r0, #0
   12c98:	bl	113bc <dcgettext@plt>
   12c9c:	ldr	r1, [r4]
   12ca0:	bl	112f0 <fputs_unlocked@plt>
   12ca4:	mov	ip, sp
   12ca8:	ldr	lr, [pc, #580]	; 12ef4 <__assert_fail@plt+0x17f0>
   12cac:	ldm	lr!, {r0, r1, r2, r3}
   12cb0:	stmia	ip!, {r0, r1, r2, r3}
   12cb4:	ldm	lr!, {r0, r1, r2, r3}
   12cb8:	stmia	ip!, {r0, r1, r2, r3}
   12cbc:	ldm	lr!, {r0, r1, r2, r3}
   12cc0:	stmia	ip!, {r0, r1, r2, r3}
   12cc4:	ldm	lr, {r0, r1}
   12cc8:	stm	ip, {r0, r1}
   12ccc:	ldr	r1, [sp]
   12cd0:	cmp	r1, #0
   12cd4:	moveq	r4, sp
   12cd8:	beq	12d00 <__assert_fail@plt+0x15fc>
   12cdc:	mov	r4, sp
   12ce0:	ldr	r5, [pc, #528]	; 12ef8 <__assert_fail@plt+0x17f4>
   12ce4:	mov	r0, r5
   12ce8:	bl	11320 <strcmp@plt>
   12cec:	cmp	r0, #0
   12cf0:	beq	12d00 <__assert_fail@plt+0x15fc>
   12cf4:	ldr	r1, [r4, #8]!
   12cf8:	cmp	r1, #0
   12cfc:	bne	12ce4 <__assert_fail@plt+0x15e0>
   12d00:	ldr	r4, [r4, #4]
   12d04:	cmp	r4, #0
   12d08:	beq	12e1c <__assert_fail@plt+0x1718>
   12d0c:	mov	r2, #5
   12d10:	ldr	r1, [pc, #484]	; 12efc <__assert_fail@plt+0x17f8>
   12d14:	mov	r0, #0
   12d18:	bl	113bc <dcgettext@plt>
   12d1c:	ldr	r3, [pc, #476]	; 12f00 <__assert_fail@plt+0x17fc>
   12d20:	ldr	r2, [pc, #476]	; 12f04 <__assert_fail@plt+0x1800>
   12d24:	mov	r1, r0
   12d28:	mov	r0, #1
   12d2c:	bl	1159c <__printf_chk@plt>
   12d30:	mov	r1, #0
   12d34:	mov	r0, #5
   12d38:	bl	11614 <setlocale@plt>
   12d3c:	cmp	r0, #0
   12d40:	beq	12d58 <__assert_fail@plt+0x1654>
   12d44:	mov	r2, #3
   12d48:	ldr	r1, [pc, #440]	; 12f08 <__assert_fail@plt+0x1804>
   12d4c:	bl	116d4 <strncmp@plt>
   12d50:	cmp	r0, #0
   12d54:	bne	12db8 <__assert_fail@plt+0x16b4>
   12d58:	mov	r2, #5
   12d5c:	ldr	r1, [pc, #424]	; 12f0c <__assert_fail@plt+0x1808>
   12d60:	mov	r0, #0
   12d64:	bl	113bc <dcgettext@plt>
   12d68:	ldr	r5, [pc, #392]	; 12ef8 <__assert_fail@plt+0x17f4>
   12d6c:	mov	r3, r5
   12d70:	ldr	r2, [pc, #392]	; 12f00 <__assert_fail@plt+0x17fc>
   12d74:	mov	r1, r0
   12d78:	mov	r0, #1
   12d7c:	bl	1159c <__printf_chk@plt>
   12d80:	mov	r2, #5
   12d84:	ldr	r1, [pc, #388]	; 12f10 <__assert_fail@plt+0x180c>
   12d88:	mov	r0, #0
   12d8c:	bl	113bc <dcgettext@plt>
   12d90:	mov	r1, r0
   12d94:	ldr	r2, [pc, #376]	; 12f14 <__assert_fail@plt+0x1810>
   12d98:	ldr	r3, [pc, #376]	; 12f18 <__assert_fail@plt+0x1814>
   12d9c:	cmp	r4, r5
   12da0:	movne	r3, r2
   12da4:	mov	r2, r4
   12da8:	mov	r0, #1
   12dac:	bl	1159c <__printf_chk@plt>
   12db0:	b	12b4c <__assert_fail@plt+0x1448>
   12db4:	ldr	r4, [pc, #316]	; 12ef8 <__assert_fail@plt+0x17f4>
   12db8:	mov	r2, #5
   12dbc:	ldr	r1, [pc, #344]	; 12f1c <__assert_fail@plt+0x1818>
   12dc0:	mov	r0, #0
   12dc4:	bl	113bc <dcgettext@plt>
   12dc8:	ldr	r3, [pc, #240]	; 12ec0 <__assert_fail@plt+0x17bc>
   12dcc:	ldr	r1, [r3]
   12dd0:	bl	112f0 <fputs_unlocked@plt>
   12dd4:	b	12d58 <__assert_fail@plt+0x1654>
   12dd8:	mov	r2, #5
   12ddc:	ldr	r1, [pc, #296]	; 12f0c <__assert_fail@plt+0x1808>
   12de0:	mov	r0, #0
   12de4:	bl	113bc <dcgettext@plt>
   12de8:	ldr	r4, [pc, #264]	; 12ef8 <__assert_fail@plt+0x17f4>
   12dec:	mov	r3, r4
   12df0:	ldr	r2, [pc, #264]	; 12f00 <__assert_fail@plt+0x17fc>
   12df4:	mov	r1, r0
   12df8:	mov	r0, #1
   12dfc:	bl	1159c <__printf_chk@plt>
   12e00:	mov	r2, #5
   12e04:	ldr	r1, [pc, #260]	; 12f10 <__assert_fail@plt+0x180c>
   12e08:	mov	r0, #0
   12e0c:	bl	113bc <dcgettext@plt>
   12e10:	mov	r1, r0
   12e14:	ldr	r3, [pc, #252]	; 12f18 <__assert_fail@plt+0x1814>
   12e18:	b	12da4 <__assert_fail@plt+0x16a0>
   12e1c:	mov	r2, #5
   12e20:	ldr	r1, [pc, #212]	; 12efc <__assert_fail@plt+0x17f8>
   12e24:	mov	r0, #0
   12e28:	bl	113bc <dcgettext@plt>
   12e2c:	ldr	r3, [pc, #204]	; 12f00 <__assert_fail@plt+0x17fc>
   12e30:	ldr	r2, [pc, #204]	; 12f04 <__assert_fail@plt+0x1800>
   12e34:	mov	r1, r0
   12e38:	mov	r0, #1
   12e3c:	bl	1159c <__printf_chk@plt>
   12e40:	mov	r1, #0
   12e44:	mov	r0, #5
   12e48:	bl	11614 <setlocale@plt>
   12e4c:	cmp	r0, #0
   12e50:	beq	12dd8 <__assert_fail@plt+0x16d4>
   12e54:	mov	r2, #3
   12e58:	ldr	r1, [pc, #168]	; 12f08 <__assert_fail@plt+0x1804>
   12e5c:	bl	116d4 <strncmp@plt>
   12e60:	cmp	r0, #0
   12e64:	bne	12db4 <__assert_fail@plt+0x16b0>
   12e68:	mov	r2, #5
   12e6c:	ldr	r1, [pc, #152]	; 12f0c <__assert_fail@plt+0x1808>
   12e70:	mov	r0, #0
   12e74:	bl	113bc <dcgettext@plt>
   12e78:	ldr	r4, [pc, #120]	; 12ef8 <__assert_fail@plt+0x17f4>
   12e7c:	mov	r3, r4
   12e80:	ldr	r2, [pc, #120]	; 12f00 <__assert_fail@plt+0x17fc>
   12e84:	mov	r1, r0
   12e88:	mov	r0, #1
   12e8c:	bl	1159c <__printf_chk@plt>
   12e90:	mov	r2, #5
   12e94:	ldr	r1, [pc, #116]	; 12f10 <__assert_fail@plt+0x180c>
   12e98:	mov	r0, #0
   12e9c:	bl	113bc <dcgettext@plt>
   12ea0:	mov	r1, r0
   12ea4:	ldr	r3, [pc, #108]	; 12f18 <__assert_fail@plt+0x1814>
   12ea8:	b	12da4 <__assert_fail@plt+0x16a0>
   12eac:	andeq	pc, r2, r0, lsr r3	; <UNPREDICTABLE>
   12eb0:	andeq	sp, r1, r4, ror r5
   12eb4:	andeq	pc, r2, r0, asr #7
   12eb8:	muleq	r1, ip, r5
   12ebc:	andeq	sp, r1, r0, asr #11
   12ec0:	andeq	pc, r2, r4, lsr r3	; <UNPREDICTABLE>
   12ec4:	andeq	sp, r1, r4, lsr #12
   12ec8:	andeq	sp, r1, r0, ror r6
   12ecc:	andeq	sp, r1, ip, lsl #16
   12ed0:	andeq	sp, r1, ip, lsl #18
   12ed4:	andeq	sp, r1, r8, lsl sl
   12ed8:	muleq	r1, ip, sl
   12edc:	andeq	sp, r1, ip, ror fp
   12ee0:	andeq	sp, r1, ip, lsr #23
   12ee4:	andeq	sp, r1, r4, ror #23
   12ee8:	andeq	sp, r1, r4, asr #25
   12eec:	andeq	sp, r1, r8, asr #25
   12ef0:	muleq	r1, ip, sp
   12ef4:	andeq	sp, r1, ip, ror r3
   12ef8:	andeq	sp, r1, r0, ror r5
   12efc:	andeq	sp, r1, r8, ror lr
   12f00:	muleq	r1, r0, lr
   12f04:			; <UNDEFINED> instruction: 0x0001deb8
   12f08:	andeq	sp, r1, r8, asr #29
   12f0c:	andeq	sp, r1, r4, lsl pc
   12f10:	andeq	sp, r1, r0, lsr pc
   12f14:	andeq	lr, r1, ip, asr #9
   12f18:	andeq	lr, r1, r4, ror #3
   12f1c:	andeq	sp, r1, ip, asr #29
   12f20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f24:	sub	sp, sp, #12
   12f28:	bl	1ab6c <__assert_fail@plt+0x9468>
   12f2c:	str	r0, [sp, #4]
   12f30:	mov	r6, r0
   12f34:	mov	sl, #44	; 0x2c
   12f38:	mov	r8, #0
   12f3c:	ldr	r9, [pc, #380]	; 130c0 <__assert_fail@plt+0x19bc>
   12f40:	ldr	fp, [pc, #380]	; 130c4 <__assert_fail@plt+0x19c0>
   12f44:	b	12ffc <__assert_fail@plt+0x18f8>
   12f48:	cmp	r4, #12
   12f4c:	beq	13044 <__assert_fail@plt+0x1940>
   12f50:	rsb	r3, r4, r4, lsl #3
   12f54:	add	r3, r9, r3, lsl #2
   12f58:	ldrb	r3, [r3, #24]
   12f5c:	cmp	r3, #0
   12f60:	bne	12fa0 <__assert_fail@plt+0x189c>
   12f64:	cmp	r4, #11
   12f68:	ldrls	pc, [pc, r4, lsl #2]
   12f6c:	b	1309c <__assert_fail@plt+0x1998>
   12f70:	andeq	r2, r1, r4, ror #31
   12f74:	andeq	r2, r1, r4, ror #31
   12f78:	andeq	r3, r1, ip, ror r0
   12f7c:	andeq	r2, r1, r4, ror #31
   12f80:	andeq	r3, r1, ip, lsl #1
   12f84:	andeq	r2, r1, r4, ror #31
   12f88:	andeq	r2, r1, r4, ror #31
   12f8c:	andeq	r2, r1, r4, ror #31
   12f90:	andeq	r2, r1, r4, ror #31
   12f94:	andeq	r2, r1, r4, ror #31
   12f98:	andeq	r2, r1, r4, ror #31
   12f9c:	andeq	r2, r1, r4, ror #31
   12fa0:	mov	r2, #5
   12fa4:	ldr	r1, [pc, #284]	; 130c8 <__assert_fail@plt+0x19c4>
   12fa8:	mov	r0, #0
   12fac:	bl	113bc <dcgettext@plt>
   12fb0:	mov	r5, r0
   12fb4:	rsb	r4, r4, r4, lsl #3
   12fb8:	ldr	r3, [pc, #256]	; 130c0 <__assert_fail@plt+0x19bc>
   12fbc:	add	r4, r3, r4, lsl #2
   12fc0:	ldr	r0, [r4, #4]
   12fc4:	bl	19e58 <__assert_fail@plt+0x8754>
   12fc8:	mov	r3, r0
   12fcc:	mov	r2, r5
   12fd0:	mov	r1, #0
   12fd4:	mov	r0, r1
   12fd8:	bl	11494 <error@plt>
   12fdc:	mov	r0, #1
   12fe0:	bl	12b0c <__assert_fail@plt+0x1408>
   12fe4:	mov	r1, r8
   12fe8:	mov	r0, r4
   12fec:	bl	119d0 <__assert_fail@plt+0x2cc>
   12ff0:	mov	r6, r7
   12ff4:	cmp	r7, #0
   12ff8:	beq	130b0 <__assert_fail@plt+0x19ac>
   12ffc:	mov	r1, sl
   13000:	mov	r0, r6
   13004:	bl	11548 <strchr@plt>
   13008:	cmp	r0, #0
   1300c:	addne	r7, r0, #1
   13010:	strbne	r8, [r0]
   13014:	moveq	r7, r0
   13018:	ldr	r5, [pc, #160]	; 130c0 <__assert_fail@plt+0x19bc>
   1301c:	mov	r4, #0
   13020:	mov	r1, r6
   13024:	ldr	r0, [r5, #4]
   13028:	bl	11320 <strcmp@plt>
   1302c:	cmp	r0, #0
   13030:	beq	12f48 <__assert_fail@plt+0x1844>
   13034:	add	r4, r4, #1
   13038:	add	r5, r5, #28
   1303c:	cmp	r4, #12
   13040:	bne	13020 <__assert_fail@plt+0x191c>
   13044:	mov	r2, #5
   13048:	ldr	r1, [pc, #124]	; 130cc <__assert_fail@plt+0x19c8>
   1304c:	mov	r0, #0
   13050:	bl	113bc <dcgettext@plt>
   13054:	mov	r4, r0
   13058:	mov	r0, r6
   1305c:	bl	19e58 <__assert_fail@plt+0x8754>
   13060:	mov	r3, r0
   13064:	mov	r2, r4
   13068:	mov	r1, #0
   1306c:	mov	r0, r1
   13070:	bl	11494 <error@plt>
   13074:	mov	r0, #1
   13078:	bl	12b0c <__assert_fail@plt+0x1408>
   1307c:	ldr	r1, [pc, #76]	; 130d0 <__assert_fail@plt+0x19cc>
   13080:	mov	r0, #2
   13084:	bl	119d0 <__assert_fail@plt+0x2cc>
   13088:	b	12ff0 <__assert_fail@plt+0x18ec>
   1308c:	mov	r1, fp
   13090:	mov	r0, #4
   13094:	bl	119d0 <__assert_fail@plt+0x2cc>
   13098:	b	12ff0 <__assert_fail@plt+0x18ec>
   1309c:	ldr	r3, [pc, #48]	; 130d4 <__assert_fail@plt+0x19d0>
   130a0:	mov	r2, #496	; 0x1f0
   130a4:	ldr	r1, [pc, #44]	; 130d8 <__assert_fail@plt+0x19d4>
   130a8:	ldr	r0, [pc, #44]	; 130dc <__assert_fail@plt+0x19d8>
   130ac:	bl	11704 <__assert_fail@plt>
   130b0:	ldr	r0, [sp, #4]
   130b4:	bl	15478 <__assert_fail@plt+0x3d74>
   130b8:	add	sp, sp, #12
   130bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130c0:	andeq	pc, r2, ip, ror r1	; <UNPREDICTABLE>
   130c4:	andeq	sp, r1, r0, asr #31
   130c8:	andeq	sp, r1, r8, lsl #31
   130cc:	andeq	sp, r1, r4, ror #30
   130d0:			; <UNDEFINED> instruction: 0x0001dfb8
   130d4:			; <UNDEFINED> instruction: 0x0001d3b4
   130d8:	andeq	sp, r1, r8, ror #9
   130dc:	andeq	sp, r1, r8, asr #31
   130e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130e4:	sub	sp, sp, #180	; 0xb4
   130e8:	str	r0, [sp, #28]
   130ec:	str	r1, [sp, #32]
   130f0:	ldr	r0, [r1]
   130f4:	bl	18308 <__assert_fail@plt+0x6c04>
   130f8:	ldr	r1, [pc, #3976]	; 14088 <__assert_fail@plt+0x2984>
   130fc:	mov	r0, #6
   13100:	bl	11614 <setlocale@plt>
   13104:	ldr	r4, [pc, #3968]	; 1408c <__assert_fail@plt+0x2988>
   13108:	ldr	r1, [pc, #3968]	; 14090 <__assert_fail@plt+0x298c>
   1310c:	mov	r0, r4
   13110:	bl	116a4 <bindtextdomain@plt>
   13114:	mov	r0, r4
   13118:	bl	113e0 <textdomain@plt>
   1311c:	ldr	r0, [pc, #3952]	; 14094 <__assert_fail@plt+0x2990>
   13120:	bl	1d344 <__assert_fail@plt+0xbc40>
   13124:	ldr	r3, [pc, #3948]	; 14098 <__assert_fail@plt+0x2994>
   13128:	mov	r4, #0
   1312c:	str	r4, [r3]
   13130:	str	r4, [r3, #4]
   13134:	strb	r4, [r3, #45]	; 0x2d
   13138:	strb	r4, [r3, #46]	; 0x2e
   1313c:	mvn	r2, #0
   13140:	str	r2, [r3, #28]
   13144:	strb	r4, [r3, #112]	; 0x70
   13148:	strb	r4, [r3, #52]	; 0x34
   1314c:	str	r4, [r3, #48]	; 0x30
   13150:	strb	r4, [r3, #53]	; 0x35
   13154:	mov	r0, #1
   13158:	mov	r1, #0
   1315c:	strd	r0, [r3, #56]	; 0x38
   13160:	mov	r2, #5
   13164:	ldr	r1, [pc, #3888]	; 1409c <__assert_fail@plt+0x2998>
   13168:	mov	r0, r4
   1316c:	bl	113bc <dcgettext@plt>
   13170:	str	r0, [sp, #36]	; 0x24
   13174:	ldr	r7, [pc, #3876]	; 140a0 <__assert_fail@plt+0x299c>
   13178:	ldr	r6, [pc, #3876]	; 140a4 <__assert_fail@plt+0x29a0>
   1317c:	ldr	r5, [pc, #3860]	; 14098 <__assert_fail@plt+0x2994>
   13180:	ldr	r8, [pc, #3872]	; 140a8 <__assert_fail@plt+0x29a4>
   13184:	ldr	r9, [pc, #3872]	; 140ac <__assert_fail@plt+0x29a8>
   13188:	add	sl, r5, #32
   1318c:	add	r3, sp, #176	; 0xb0
   13190:	mvn	r2, #0
   13194:	str	r2, [r3, #-104]!	; 0xffffff98
   13198:	str	r3, [sp]
   1319c:	mov	r3, r7
   131a0:	mov	r2, r6
   131a4:	ldr	r1, [sp, #32]
   131a8:	ldr	r0, [sp, #28]
   131ac:	bl	1150c <getopt_long@plt>
   131b0:	cmn	r0, #1
   131b4:	beq	1353c <__assert_fail@plt+0x1e38>
   131b8:	cmp	r0, #105	; 0x69
   131bc:	beq	133d8 <__assert_fail@plt+0x1cd4>
   131c0:	ble	131fc <__assert_fail@plt+0x1af8>
   131c4:	cmp	r0, #118	; 0x76
   131c8:	beq	1318c <__assert_fail@plt+0x1a88>
   131cc:	ble	13314 <__assert_fail@plt+0x1c10>
   131d0:	ldr	r3, [pc, #3800]	; 140b0 <__assert_fail@plt+0x29ac>
   131d4:	cmp	r0, r3
   131d8:	beq	13490 <__assert_fail@plt+0x1d8c>
   131dc:	bgt	13370 <__assert_fail@plt+0x1c6c>
   131e0:	cmp	r0, #120	; 0x78
   131e4:	beq	1349c <__assert_fail@plt+0x1d98>
   131e8:	cmp	r0, #256	; 0x100
   131ec:	bne	13368 <__assert_fail@plt+0x1c64>
   131f0:	mov	r3, #0
   131f4:	strb	r3, [r5, #113]	; 0x71
   131f8:	b	1318c <__assert_fail@plt+0x1a88>
   131fc:	cmp	r0, #72	; 0x48
   13200:	beq	13410 <__assert_fail@plt+0x1d0c>
   13204:	ble	1323c <__assert_fail@plt+0x1b38>
   13208:	cmp	r0, #84	; 0x54
   1320c:	beq	13434 <__assert_fail@plt+0x1d30>
   13210:	ble	132f8 <__assert_fail@plt+0x1bf4>
   13214:	cmp	r0, #97	; 0x61
   13218:	beq	133cc <__assert_fail@plt+0x1cc8>
   1321c:	cmp	r0, #104	; 0x68
   13220:	bne	13368 <__assert_fail@plt+0x1c64>
   13224:	mov	r3, #176	; 0xb0
   13228:	str	r3, [r5, #28]
   1322c:	mov	r2, #1
   13230:	mov	r3, #0
   13234:	strd	r2, [r5, #32]
   13238:	b	1318c <__assert_fail@plt+0x1a88>
   1323c:	cmn	r0, #2
   13240:	beq	13534 <__assert_fail@plt+0x1e30>
   13244:	ble	13284 <__assert_fail@plt+0x1b80>
   13248:	cmp	r0, #66	; 0x42
   1324c:	bne	132d0 <__assert_fail@plt+0x1bcc>
   13250:	mov	r2, sl
   13254:	add	r1, r5, #28
   13258:	ldr	r0, [r8]
   1325c:	bl	16fa8 <__assert_fail@plt+0x58a4>
   13260:	cmp	r0, #0
   13264:	beq	1318c <__assert_fail@plt+0x1a88>
   13268:	ldr	r3, [pc, #3640]	; 140a8 <__assert_fail@plt+0x29a4>
   1326c:	ldr	r3, [r3]
   13270:	str	r3, [sp]
   13274:	ldr	r3, [pc, #3620]	; 140a0 <__assert_fail@plt+0x299c>
   13278:	mov	r2, #66	; 0x42
   1327c:	ldr	r1, [sp, #72]	; 0x48
   13280:	bl	1abfc <__assert_fail@plt+0x94f8>
   13284:	cmn	r0, #3
   13288:	bne	13368 <__assert_fail@plt+0x1c64>
   1328c:	mov	r4, #0
   13290:	str	r4, [sp, #12]
   13294:	ldr	r3, [pc, #3608]	; 140b4 <__assert_fail@plt+0x29b0>
   13298:	str	r3, [sp, #8]
   1329c:	ldr	r3, [pc, #3604]	; 140b8 <__assert_fail@plt+0x29b4>
   132a0:	str	r3, [sp, #4]
   132a4:	ldr	r3, [pc, #3600]	; 140bc <__assert_fail@plt+0x29b8>
   132a8:	str	r3, [sp]
   132ac:	ldr	r3, [pc, #3596]	; 140c0 <__assert_fail@plt+0x29bc>
   132b0:	ldr	r3, [r3]
   132b4:	ldr	r2, [pc, #3592]	; 140c4 <__assert_fail@plt+0x29c0>
   132b8:	ldr	r1, [pc, #3592]	; 140c8 <__assert_fail@plt+0x29c4>
   132bc:	ldr	r0, [pc, #3708]	; 14140 <__assert_fail@plt+0x2a3c>
   132c0:	ldr	r0, [r0]
   132c4:	bl	1a518 <__assert_fail@plt+0x8e14>
   132c8:	mov	r0, r4
   132cc:	bl	11530 <exit@plt>
   132d0:	cmp	r0, #70	; 0x46
   132d4:	bne	13368 <__assert_fail@plt+0x1c64>
   132d8:	ldr	fp, [r8]
   132dc:	mov	r0, #8
   132e0:	bl	1a5e4 <__assert_fail@plt+0x8ee0>
   132e4:	str	fp, [r0]
   132e8:	ldr	r3, [r5]
   132ec:	str	r3, [r0, #4]
   132f0:	str	r0, [r5]
   132f4:	b	1318c <__assert_fail@plt+0x1a88>
   132f8:	cmp	r0, #80	; 0x50
   132fc:	bne	13368 <__assert_fail@plt+0x1c64>
   13300:	ldr	r3, [r5, #24]
   13304:	cmp	r3, #4
   13308:	beq	1346c <__assert_fail@plt+0x1d68>
   1330c:	mov	r4, #1
   13310:	b	1318c <__assert_fail@plt+0x1a88>
   13314:	cmp	r0, #108	; 0x6c
   13318:	beq	13428 <__assert_fail@plt+0x1d24>
   1331c:	ble	13340 <__assert_fail@plt+0x1c3c>
   13320:	cmp	r0, #109	; 0x6d
   13324:	bne	13360 <__assert_fail@plt+0x1c5c>
   13328:	mov	r3, #0
   1332c:	str	r3, [r5, #28]
   13330:	mov	r2, #1048576	; 0x100000
   13334:	mov	r3, #0
   13338:	strd	r2, [r5, #32]
   1333c:	b	1318c <__assert_fail@plt+0x1a88>
   13340:	cmp	r0, #107	; 0x6b
   13344:	bne	13368 <__assert_fail@plt+0x1c64>
   13348:	mov	r3, #0
   1334c:	str	r3, [r5, #28]
   13350:	mov	r2, #1024	; 0x400
   13354:	mov	r3, #0
   13358:	strd	r2, [r5, #32]
   1335c:	b	1318c <__assert_fail@plt+0x1a88>
   13360:	cmp	r0, #116	; 0x74
   13364:	beq	132d8 <__assert_fail@plt+0x1bd4>
   13368:	mov	r0, #1
   1336c:	bl	12b0c <__assert_fail@plt+0x1408>
   13370:	cmp	r0, r9
   13374:	beq	13528 <__assert_fail@plt+0x1e24>
   13378:	ldr	r3, [pc, #3404]	; 140cc <__assert_fail@plt+0x29c8>
   1337c:	cmp	r0, r3
   13380:	bne	13368 <__assert_fail@plt+0x1c64>
   13384:	ldr	r3, [r5, #24]
   13388:	cmp	r3, #1
   1338c:	beq	134bc <__assert_fail@plt+0x1db8>
   13390:	cmp	r3, #0
   13394:	movne	r3, #0
   13398:	andeq	r3, r4, #1
   1339c:	cmp	r3, #0
   133a0:	bne	134e0 <__assert_fail@plt+0x1ddc>
   133a4:	ldrb	r3, [r5, #112]	; 0x70
   133a8:	cmp	r3, #0
   133ac:	bne	13504 <__assert_fail@plt+0x1e00>
   133b0:	mov	r3, #4
   133b4:	str	r3, [r5, #24]
   133b8:	ldr	r0, [r8]
   133bc:	cmp	r0, #0
   133c0:	beq	1318c <__assert_fail@plt+0x1a88>
   133c4:	bl	12f20 <__assert_fail@plt+0x181c>
   133c8:	b	1318c <__assert_fail@plt+0x1a88>
   133cc:	mov	r3, #1
   133d0:	strb	r3, [r5, #45]	; 0x2d
   133d4:	b	1318c <__assert_fail@plt+0x1a88>
   133d8:	ldr	r3, [r5, #24]
   133dc:	cmp	r3, #4
   133e0:	movne	r3, #1
   133e4:	strne	r3, [r5, #24]
   133e8:	bne	1318c <__assert_fail@plt+0x1a88>
   133ec:	ldr	r3, [pc, #3292]	; 140d0 <__assert_fail@plt+0x29cc>
   133f0:	str	r3, [sp]
   133f4:	ldr	r3, [pc, #3288]	; 140d4 <__assert_fail@plt+0x29d0>
   133f8:	ldr	r2, [sp, #36]	; 0x24
   133fc:	mov	r1, #0
   13400:	mov	r0, r1
   13404:	bl	11494 <error@plt>
   13408:	mov	r0, #1
   1340c:	bl	12b0c <__assert_fail@plt+0x1408>
   13410:	mov	r3, #144	; 0x90
   13414:	str	r3, [r5, #28]
   13418:	mov	r2, #1
   1341c:	mov	r3, #0
   13420:	strd	r2, [r5, #32]
   13424:	b	1318c <__assert_fail@plt+0x1a88>
   13428:	mov	r3, #1
   1342c:	strb	r3, [r5, #44]	; 0x2c
   13430:	b	1318c <__assert_fail@plt+0x1a88>
   13434:	ldr	r3, [r5, #24]
   13438:	cmp	r3, #4
   1343c:	movne	r3, #1
   13440:	strbne	r3, [r5, #112]	; 0x70
   13444:	bne	1318c <__assert_fail@plt+0x1a88>
   13448:	ldr	r3, [pc, #3200]	; 140d0 <__assert_fail@plt+0x29cc>
   1344c:	str	r3, [sp]
   13450:	ldr	r3, [pc, #3200]	; 140d8 <__assert_fail@plt+0x29d4>
   13454:	ldr	r2, [sp, #36]	; 0x24
   13458:	mov	r1, #0
   1345c:	mov	r0, r1
   13460:	bl	11494 <error@plt>
   13464:	mov	r0, #1
   13468:	bl	12b0c <__assert_fail@plt+0x1408>
   1346c:	ldr	r3, [pc, #3164]	; 140d0 <__assert_fail@plt+0x29cc>
   13470:	str	r3, [sp]
   13474:	ldr	r3, [pc, #3168]	; 140dc <__assert_fail@plt+0x29d8>
   13478:	ldr	r2, [sp, #36]	; 0x24
   1347c:	mov	r1, #0
   13480:	mov	r0, r1
   13484:	bl	11494 <error@plt>
   13488:	mov	r0, #1
   1348c:	bl	12b0c <__assert_fail@plt+0x1408>
   13490:	mov	r3, #1
   13494:	strb	r3, [r5, #113]	; 0x71
   13498:	b	1318c <__assert_fail@plt+0x1a88>
   1349c:	ldr	fp, [r8]
   134a0:	mov	r0, #8
   134a4:	bl	1a5e4 <__assert_fail@plt+0x8ee0>
   134a8:	str	fp, [r0]
   134ac:	ldr	r3, [r5, #4]
   134b0:	str	r3, [r0, #4]
   134b4:	str	r0, [r5, #4]
   134b8:	b	1318c <__assert_fail@plt+0x1a88>
   134bc:	ldr	r3, [pc, #3084]	; 140d0 <__assert_fail@plt+0x29cc>
   134c0:	str	r3, [sp]
   134c4:	ldr	r3, [pc, #3080]	; 140d4 <__assert_fail@plt+0x29d0>
   134c8:	ldr	r2, [sp, #36]	; 0x24
   134cc:	mov	r1, #0
   134d0:	mov	r0, r1
   134d4:	bl	11494 <error@plt>
   134d8:	mov	r0, #1
   134dc:	bl	12b0c <__assert_fail@plt+0x1408>
   134e0:	ldr	r3, [pc, #3048]	; 140d0 <__assert_fail@plt+0x29cc>
   134e4:	str	r3, [sp]
   134e8:	ldr	r3, [pc, #3052]	; 140dc <__assert_fail@plt+0x29d8>
   134ec:	ldr	r2, [sp, #36]	; 0x24
   134f0:	mov	r1, #0
   134f4:	mov	r0, r1
   134f8:	bl	11494 <error@plt>
   134fc:	mov	r0, #1
   13500:	bl	12b0c <__assert_fail@plt+0x1408>
   13504:	ldr	r3, [pc, #3012]	; 140d0 <__assert_fail@plt+0x29cc>
   13508:	str	r3, [sp]
   1350c:	ldr	r3, [pc, #3012]	; 140d8 <__assert_fail@plt+0x29d4>
   13510:	ldr	r2, [sp, #36]	; 0x24
   13514:	mov	r1, #0
   13518:	mov	r0, r1
   1351c:	bl	11494 <error@plt>
   13520:	mov	r0, #1
   13524:	bl	12b0c <__assert_fail@plt+0x1408>
   13528:	mov	r3, #1
   1352c:	strb	r3, [r5, #53]	; 0x35
   13530:	b	1318c <__assert_fail@plt+0x1a88>
   13534:	mov	r0, #0
   13538:	bl	12b0c <__assert_fail@plt+0x1408>
   1353c:	ldr	r3, [pc, #2900]	; 14098 <__assert_fail@plt+0x2994>
   13540:	ldr	r3, [r3, #28]
   13544:	cmn	r3, #1
   13548:	beq	135a4 <__assert_fail@plt+0x1ea0>
   1354c:	ldr	r3, [pc, #2884]	; 14098 <__assert_fail@plt+0x2994>
   13550:	ldr	r3, [r3, #24]
   13554:	cmp	r3, #4
   13558:	cmpne	r3, #1
   1355c:	beq	1357c <__assert_fail@plt+0x1e78>
   13560:	ldr	r3, [pc, #2864]	; 14098 <__assert_fail@plt+0x2994>
   13564:	ldr	r3, [r3, #28]
   13568:	tst	r3, #16
   1356c:	beq	135f8 <__assert_fail@plt+0x1ef4>
   13570:	mov	r2, #2
   13574:	ldr	r3, [pc, #2844]	; 14098 <__assert_fail@plt+0x2994>
   13578:	str	r2, [r3, #24]
   1357c:	ldr	r3, [pc, #2836]	; 14098 <__assert_fail@plt+0x2994>
   13580:	ldr	r6, [r3]
   13584:	cmp	r6, #0
   13588:	beq	13694 <__assert_fail@plt+0x1f90>
   1358c:	mov	r9, #0
   13590:	mov	r7, r3
   13594:	ldr	fp, [pc, #2884]	; 140e0 <__assert_fail@plt+0x29dc>
   13598:	mov	sl, #5
   1359c:	mov	r8, r9
   135a0:	b	1364c <__assert_fail@plt+0x1f48>
   135a4:	cmp	r4, #0
   135a8:	beq	135dc <__assert_fail@plt+0x1ed8>
   135ac:	mov	r2, #0
   135b0:	ldr	r3, [pc, #2784]	; 14098 <__assert_fail@plt+0x2994>
   135b4:	str	r2, [r3, #28]
   135b8:	ldr	r0, [pc, #2852]	; 140e4 <__assert_fail@plt+0x29e0>
   135bc:	bl	114c4 <getenv@plt>
   135c0:	cmp	r0, #0
   135c4:	moveq	r2, #1024	; 0x400
   135c8:	movne	r2, #512	; 0x200
   135cc:	mov	r3, #0
   135d0:	ldr	r1, [pc, #2752]	; 14098 <__assert_fail@plt+0x2994>
   135d4:	strd	r2, [r1, #32]
   135d8:	b	1354c <__assert_fail@plt+0x1e48>
   135dc:	ldr	r0, [pc, #2820]	; 140e8 <__assert_fail@plt+0x29e4>
   135e0:	bl	114c4 <getenv@plt>
   135e4:	ldr	r1, [pc, #2732]	; 14098 <__assert_fail@plt+0x2994>
   135e8:	add	r2, r1, #32
   135ec:	add	r1, r1, #28
   135f0:	bl	16fa8 <__assert_fail@plt+0x58a4>
   135f4:	b	1354c <__assert_fail@plt+0x1e48>
   135f8:	cmp	r4, #0
   135fc:	movne	r2, #3
   13600:	ldrne	r3, [pc, #2704]	; 14098 <__assert_fail@plt+0x2994>
   13604:	strne	r2, [r3, #24]
   13608:	b	1357c <__assert_fail@plt+0x1e78>
   1360c:	mov	r2, sl
   13610:	mov	r1, fp
   13614:	mov	r0, r8
   13618:	bl	113bc <dcgettext@plt>
   1361c:	mov	r4, r0
   13620:	ldr	r0, [r6]
   13624:	bl	19e58 <__assert_fail@plt+0x8754>
   13628:	mov	r3, r0
   1362c:	mov	r2, r4
   13630:	mov	r1, r8
   13634:	mov	r0, r8
   13638:	bl	11494 <error@plt>
   1363c:	mov	r9, #1
   13640:	ldr	r6, [r6, #4]
   13644:	cmp	r6, #0
   13648:	beq	13680 <__assert_fail@plt+0x1f7c>
   1364c:	ldr	r4, [r7, #4]
   13650:	cmp	r4, #0
   13654:	beq	13640 <__assert_fail@plt+0x1f3c>
   13658:	ldr	r5, [r6]
   1365c:	ldr	r1, [r4]
   13660:	mov	r0, r5
   13664:	bl	11320 <strcmp@plt>
   13668:	cmp	r0, #0
   1366c:	beq	1360c <__assert_fail@plt+0x1f08>
   13670:	ldr	r4, [r4, #4]
   13674:	cmp	r4, #0
   13678:	bne	1365c <__assert_fail@plt+0x1f58>
   1367c:	b	13640 <__assert_fail@plt+0x1f3c>
   13680:	cmp	r9, #0
   13684:	beq	13694 <__assert_fail@plt+0x1f90>
   13688:	mov	r0, #1
   1368c:	add	sp, sp, #180	; 0xb4
   13690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13694:	ldr	r3, [pc, #2640]	; 140ec <__assert_fail@plt+0x29e8>
   13698:	ldr	r0, [r3]
   1369c:	ldr	r3, [sp, #28]
   136a0:	cmp	r3, r0
   136a4:	movle	r3, #0
   136a8:	strle	r3, [sp, #56]	; 0x38
   136ac:	bgt	13714 <__assert_fail@plt+0x2010>
   136b0:	ldr	r3, [pc, #2528]	; 14098 <__assert_fail@plt+0x2994>
   136b4:	ldr	r3, [r3]
   136b8:	cmp	r3, #0
   136bc:	movne	r0, #1
   136c0:	beq	13820 <__assert_fail@plt+0x211c>
   136c4:	and	r0, r0, #1
   136c8:	bl	17920 <__assert_fail@plt+0x621c>
   136cc:	ldr	r3, [pc, #2500]	; 14098 <__assert_fail@plt+0x2994>
   136d0:	str	r0, [r3, #116]	; 0x74
   136d4:	cmp	r0, #0
   136d8:	beq	13864 <__assert_fail@plt+0x2160>
   136dc:	ldr	r3, [pc, #2484]	; 14098 <__assert_fail@plt+0x2994>
   136e0:	ldrb	r3, [r3, #113]	; 0x71
   136e4:	cmp	r3, #0
   136e8:	bne	13920 <__assert_fail@plt+0x221c>
   136ec:	ldr	r3, [pc, #2468]	; 14098 <__assert_fail@plt+0x2994>
   136f0:	ldr	r3, [r3, #24]
   136f4:	cmp	r3, #4
   136f8:	ldrls	pc, [pc, r3, lsl #2]
   136fc:	b	13b18 <__assert_fail@plt+0x2414>
   13700:	andeq	r3, r1, r8, lsr #18
   13704:	andeq	r3, r1, r4, lsr #20
   13708:			; <UNDEFINED> instruction: 0x000139b8
   1370c:	muleq	r1, r0, sl
   13710:	strdeq	r3, [r1], -ip
   13714:	mov	r1, #104	; 0x68
   13718:	sub	r0, r3, r0
   1371c:	bl	1a6dc <__assert_fail@plt+0x8fd8>
   13720:	str	r0, [sp, #56]	; 0x38
   13724:	ldr	r3, [pc, #2496]	; 140ec <__assert_fail@plt+0x29e8>
   13728:	ldr	r5, [r3]
   1372c:	ldr	r3, [sp, #32]
   13730:	add	r7, r3, r5, lsl #2
   13734:	ldr	sl, [pc, #2480]	; 140ec <__assert_fail@plt+0x29e8>
   13738:	ldr	fp, [pc, #2392]	; 14098 <__assert_fail@plt+0x2994>
   1373c:	b	1378c <__assert_fail@plt+0x2088>
   13740:	bl	1156c <__errno_location@plt>
   13744:	mov	r8, r0
   13748:	ldr	r6, [r0]
   1374c:	cmp	r6, #20
   13750:	cmpne	r6, #2
   13754:	beq	13780 <__assert_fail@plt+0x207c>
   13758:	mov	r2, r4
   1375c:	mov	r1, r9
   13760:	mov	r0, #3
   13764:	bl	116bc <__xstat64@plt>
   13768:	cmp	r0, #0
   1376c:	ldrne	r6, [r8]
   13770:	bne	13780 <__assert_fail@plt+0x207c>
   13774:	b	13788 <__assert_fail@plt+0x2084>
   13778:	mov	r0, r8
   1377c:	bl	116ec <close@plt>
   13780:	cmp	r6, #0
   13784:	bne	137e8 <__assert_fail@plt+0x20e4>
   13788:	add	r5, r5, #1
   1378c:	ldr	r3, [sp, #28]
   13790:	cmp	r5, r3
   13794:	bge	136b0 <__assert_fail@plt+0x1fac>
   13798:	ldr	r9, [r7], #4
   1379c:	ldr	r4, [sl]
   137a0:	sub	r4, r5, r4
   137a4:	mov	r3, #104	; 0x68
   137a8:	ldr	r2, [sp, #56]	; 0x38
   137ac:	mla	r4, r3, r4, r2
   137b0:	mov	r1, #2304	; 0x900
   137b4:	mov	r0, r9
   137b8:	bl	114ac <open64@plt>
   137bc:	subs	r8, r0, #0
   137c0:	blt	13740 <__assert_fail@plt+0x203c>
   137c4:	mov	r2, r4
   137c8:	mov	r1, r8
   137cc:	mov	r0, #3
   137d0:	bl	1141c <__fxstat64@plt>
   137d4:	subs	r6, r0, #0
   137d8:	beq	13778 <__assert_fail@plt+0x2074>
   137dc:	bl	1156c <__errno_location@plt>
   137e0:	ldr	r6, [r0]
   137e4:	b	13778 <__assert_fail@plt+0x2074>
   137e8:	ldr	r2, [r7, #-4]
   137ec:	mov	r1, #3
   137f0:	mov	r0, #0
   137f4:	bl	19cf0 <__assert_fail@plt+0x85ec>
   137f8:	mov	r3, r0
   137fc:	ldr	r2, [pc, #2284]	; 140f0 <__assert_fail@plt+0x29ec>
   13800:	mov	r1, r6
   13804:	mov	r0, #0
   13808:	bl	11494 <error@plt>
   1380c:	mov	r3, #1
   13810:	str	r3, [fp, #48]	; 0x30
   13814:	mov	r3, #0
   13818:	str	r3, [r7, #-4]
   1381c:	b	13788 <__assert_fail@plt+0x2084>
   13820:	ldr	r3, [pc, #2160]	; 14098 <__assert_fail@plt+0x2994>
   13824:	ldr	r3, [r3, #4]
   13828:	cmp	r3, #0
   1382c:	movne	r0, #1
   13830:	bne	136c4 <__assert_fail@plt+0x1fc0>
   13834:	ldr	r3, [pc, #2140]	; 14098 <__assert_fail@plt+0x2994>
   13838:	ldrb	r3, [r3, #112]	; 0x70
   1383c:	cmp	r3, #0
   13840:	movne	r0, #1
   13844:	bne	136c4 <__assert_fail@plt+0x1fc0>
   13848:	ldr	r3, [pc, #2272]	; 14130 <__assert_fail@plt+0x2a2c>
   1384c:	ldrb	r3, [r3, #52]	; 0x34
   13850:	cmp	r3, #0
   13854:	ldreq	r3, [pc, #2108]	; 14098 <__assert_fail@plt+0x2994>
   13858:	ldrbeq	r0, [r3, #44]	; 0x2c
   1385c:	movne	r0, #1
   13860:	b	136c4 <__assert_fail@plt+0x1fc0>
   13864:	ldr	r3, [pc, #2176]	; 140ec <__assert_fail@plt+0x29e8>
   13868:	ldr	r3, [r3]
   1386c:	ldr	r2, [sp, #28]
   13870:	cmp	r2, r3
   13874:	ble	138cc <__assert_fail@plt+0x21c8>
   13878:	ldr	r3, [pc, #2072]	; 14098 <__assert_fail@plt+0x2994>
   1387c:	ldrb	r3, [r3, #45]	; 0x2d
   13880:	cmp	r3, #0
   13884:	bne	13908 <__assert_fail@plt+0x2204>
   13888:	ldr	r3, [pc, #2056]	; 14098 <__assert_fail@plt+0x2994>
   1388c:	ldrb	r3, [r3, #44]	; 0x2c
   13890:	cmp	r3, #0
   13894:	bne	13914 <__assert_fail@plt+0x2210>
   13898:	ldr	r3, [pc, #2040]	; 14098 <__assert_fail@plt+0x2994>
   1389c:	ldr	r3, [r3]
   138a0:	cmp	r3, #0
   138a4:	movne	r4, #1
   138a8:	ldrne	r5, [pc, #2008]	; 14088 <__assert_fail@plt+0x2984>
   138ac:	bne	138d4 <__assert_fail@plt+0x21d0>
   138b0:	ldr	r3, [pc, #2016]	; 14098 <__assert_fail@plt+0x2994>
   138b4:	ldr	r3, [r3, #4]
   138b8:	cmp	r3, #0
   138bc:	beq	145c4 <__assert_fail@plt+0x2ec0>
   138c0:	mov	r4, #1
   138c4:	ldr	r5, [pc, #1980]	; 14088 <__assert_fail@plt+0x2984>
   138c8:	b	138d4 <__assert_fail@plt+0x21d0>
   138cc:	mov	r4, #1
   138d0:	ldr	r5, [pc, #1968]	; 14088 <__assert_fail@plt+0x2984>
   138d4:	bl	1156c <__errno_location@plt>
   138d8:	ldr	r6, [r0]
   138dc:	mov	r2, #5
   138e0:	ldr	r1, [pc, #2060]	; 140f4 <__assert_fail@plt+0x29f0>
   138e4:	mov	r0, #0
   138e8:	bl	113bc <dcgettext@plt>
   138ec:	str	r0, [sp]
   138f0:	mov	r3, r5
   138f4:	ldr	r2, [pc, #2044]	; 140f8 <__assert_fail@plt+0x29f4>
   138f8:	mov	r1, r6
   138fc:	mov	r0, r4
   13900:	bl	11494 <error@plt>
   13904:	b	136dc <__assert_fail@plt+0x1fd8>
   13908:	mov	r4, #1
   1390c:	ldr	r5, [pc, #1908]	; 14088 <__assert_fail@plt+0x2984>
   13910:	b	138d4 <__assert_fail@plt+0x21d0>
   13914:	mov	r4, #1
   13918:	ldr	r5, [pc, #1896]	; 14088 <__assert_fail@plt+0x2984>
   1391c:	b	138d4 <__assert_fail@plt+0x21d0>
   13920:	bl	116b0 <sync@plt>
   13924:	b	136ec <__assert_fail@plt+0x1fe8>
   13928:	mov	r1, #0
   1392c:	mov	r0, r1
   13930:	bl	119d0 <__assert_fail@plt+0x2cc>
   13934:	ldr	r3, [pc, #1884]	; 14098 <__assert_fail@plt+0x2994>
   13938:	ldrb	r3, [r3, #112]	; 0x70
   1393c:	cmp	r3, #0
   13940:	bne	139a8 <__assert_fail@plt+0x22a4>
   13944:	mov	r1, #0
   13948:	mov	r0, #2
   1394c:	bl	119d0 <__assert_fail@plt+0x2cc>
   13950:	mov	r1, #0
   13954:	mov	r0, #3
   13958:	bl	119d0 <__assert_fail@plt+0x2cc>
   1395c:	mov	r1, #0
   13960:	mov	r0, #4
   13964:	bl	119d0 <__assert_fail@plt+0x2cc>
   13968:	mov	r1, #0
   1396c:	mov	r0, #5
   13970:	bl	119d0 <__assert_fail@plt+0x2cc>
   13974:	mov	r1, #0
   13978:	mov	r0, #10
   1397c:	bl	119d0 <__assert_fail@plt+0x2cc>
   13980:	bl	11ae0 <__assert_fail@plt+0x3dc>
   13984:	ldr	r3, [sp, #56]	; 0x38
   13988:	cmp	r3, #0
   1398c:	beq	14024 <__assert_fail@plt+0x2920>
   13990:	mov	r2, #1
   13994:	ldr	r3, [pc, #1788]	; 14098 <__assert_fail@plt+0x2994>
   13998:	strb	r2, [r3, #46]	; 0x2e
   1399c:	ldr	r3, [pc, #1864]	; 140ec <__assert_fail@plt+0x29e8>
   139a0:	ldr	fp, [r3]
   139a4:	b	13f2c <__assert_fail@plt+0x2828>
   139a8:	mov	r1, #0
   139ac:	mov	r0, #1
   139b0:	bl	119d0 <__assert_fail@plt+0x2cc>
   139b4:	b	13944 <__assert_fail@plt+0x2240>
   139b8:	mov	r1, #0
   139bc:	mov	r0, r1
   139c0:	bl	119d0 <__assert_fail@plt+0x2cc>
   139c4:	ldr	r3, [pc, #1740]	; 14098 <__assert_fail@plt+0x2994>
   139c8:	ldrb	r3, [r3, #112]	; 0x70
   139cc:	cmp	r3, #0
   139d0:	bne	13a14 <__assert_fail@plt+0x2310>
   139d4:	ldr	r1, [pc, #1824]	; 140fc <__assert_fail@plt+0x29f8>
   139d8:	mov	r0, #2
   139dc:	bl	119d0 <__assert_fail@plt+0x2cc>
   139e0:	mov	r1, #0
   139e4:	mov	r0, #3
   139e8:	bl	119d0 <__assert_fail@plt+0x2cc>
   139ec:	ldr	r1, [pc, #1804]	; 14100 <__assert_fail@plt+0x29fc>
   139f0:	mov	r0, #4
   139f4:	bl	119d0 <__assert_fail@plt+0x2cc>
   139f8:	mov	r1, #0
   139fc:	mov	r0, #5
   13a00:	bl	119d0 <__assert_fail@plt+0x2cc>
   13a04:	mov	r1, #0
   13a08:	mov	r0, #10
   13a0c:	bl	119d0 <__assert_fail@plt+0x2cc>
   13a10:	b	13980 <__assert_fail@plt+0x227c>
   13a14:	mov	r1, #0
   13a18:	mov	r0, #1
   13a1c:	bl	119d0 <__assert_fail@plt+0x2cc>
   13a20:	b	139d4 <__assert_fail@plt+0x22d0>
   13a24:	mov	r1, #0
   13a28:	mov	r0, r1
   13a2c:	bl	119d0 <__assert_fail@plt+0x2cc>
   13a30:	ldr	r3, [pc, #1632]	; 14098 <__assert_fail@plt+0x2994>
   13a34:	ldrb	r3, [r3, #112]	; 0x70
   13a38:	cmp	r3, #0
   13a3c:	bne	13a80 <__assert_fail@plt+0x237c>
   13a40:	mov	r1, #0
   13a44:	mov	r0, #6
   13a48:	bl	119d0 <__assert_fail@plt+0x2cc>
   13a4c:	mov	r1, #0
   13a50:	mov	r0, #7
   13a54:	bl	119d0 <__assert_fail@plt+0x2cc>
   13a58:	mov	r1, #0
   13a5c:	mov	r0, #8
   13a60:	bl	119d0 <__assert_fail@plt+0x2cc>
   13a64:	mov	r1, #0
   13a68:	mov	r0, #9
   13a6c:	bl	119d0 <__assert_fail@plt+0x2cc>
   13a70:	mov	r1, #0
   13a74:	mov	r0, #10
   13a78:	bl	119d0 <__assert_fail@plt+0x2cc>
   13a7c:	b	13980 <__assert_fail@plt+0x227c>
   13a80:	mov	r1, #0
   13a84:	mov	r0, #1
   13a88:	bl	119d0 <__assert_fail@plt+0x2cc>
   13a8c:	b	13a40 <__assert_fail@plt+0x233c>
   13a90:	mov	r1, #0
   13a94:	mov	r0, r1
   13a98:	bl	119d0 <__assert_fail@plt+0x2cc>
   13a9c:	ldr	r3, [pc, #1524]	; 14098 <__assert_fail@plt+0x2994>
   13aa0:	ldrb	r3, [r3, #112]	; 0x70
   13aa4:	cmp	r3, #0
   13aa8:	bne	13aec <__assert_fail@plt+0x23e8>
   13aac:	mov	r1, #0
   13ab0:	mov	r0, #2
   13ab4:	bl	119d0 <__assert_fail@plt+0x2cc>
   13ab8:	mov	r1, #0
   13abc:	mov	r0, #3
   13ac0:	bl	119d0 <__assert_fail@plt+0x2cc>
   13ac4:	mov	r1, #0
   13ac8:	mov	r0, #4
   13acc:	bl	119d0 <__assert_fail@plt+0x2cc>
   13ad0:	ldr	r1, [pc, #1580]	; 14104 <__assert_fail@plt+0x2a00>
   13ad4:	mov	r0, #5
   13ad8:	bl	119d0 <__assert_fail@plt+0x2cc>
   13adc:	mov	r1, #0
   13ae0:	mov	r0, #10
   13ae4:	bl	119d0 <__assert_fail@plt+0x2cc>
   13ae8:	b	13980 <__assert_fail@plt+0x227c>
   13aec:	mov	r1, #0
   13af0:	mov	r0, #1
   13af4:	bl	119d0 <__assert_fail@plt+0x2cc>
   13af8:	b	13aac <__assert_fail@plt+0x23a8>
   13afc:	ldr	r3, [pc, #1428]	; 14098 <__assert_fail@plt+0x2994>
   13b00:	ldr	r3, [r3, #16]
   13b04:	cmp	r3, #0
   13b08:	bne	13980 <__assert_fail@plt+0x227c>
   13b0c:	ldr	r0, [pc, #1524]	; 14108 <__assert_fail@plt+0x2a04>
   13b10:	bl	12f20 <__assert_fail@plt+0x181c>
   13b14:	b	13980 <__assert_fail@plt+0x227c>
   13b18:	ldr	r3, [pc, #1516]	; 1410c <__assert_fail@plt+0x2a08>
   13b1c:	ldr	r2, [pc, #1516]	; 14110 <__assert_fail@plt+0x2a0c>
   13b20:	ldr	r1, [pc, #1516]	; 14114 <__assert_fail@plt+0x2a10>
   13b24:	ldr	r0, [pc, #1516]	; 14118 <__assert_fail@plt+0x2a14>
   13b28:	bl	11704 <__assert_fail@plt>
   13b2c:	ldr	r3, [sp, #48]	; 0x30
   13b30:	str	r3, [sp, #36]	; 0x24
   13b34:	b	13fa4 <__assert_fail@plt+0x28a0>
   13b38:	mov	r0, r4
   13b3c:	bl	1153c <strlen@plt>
   13b40:	mov	sl, r0
   13b44:	mov	r7, #0
   13b48:	b	145f4 <__assert_fail@plt+0x2ef0>
   13b4c:	add	r2, sp, #72	; 0x48
   13b50:	mov	r1, r4
   13b54:	mov	r0, #3
   13b58:	bl	116bc <__xstat64@plt>
   13b5c:	cmp	r0, #0
   13b60:	bne	146fc <__assert_fail@plt+0x2ff8>
   13b64:	cmp	sl, #1
   13b68:	beq	13b84 <__assert_fail@plt+0x2480>
   13b6c:	ldr	fp, [sp, #40]	; 0x28
   13b70:	str	sl, [sp, #44]	; 0x2c
   13b74:	str	r5, [sp, #52]	; 0x34
   13b78:	mov	r3, #0
   13b7c:	str	r3, [sp, #40]	; 0x28
   13b80:	b	14618 <__assert_fail@plt+0x2f14>
   13b84:	ldr	fp, [sp, #64]	; 0x40
   13b88:	ldr	sl, [sp, #68]	; 0x44
   13b8c:	mov	r0, r7
   13b90:	bl	15478 <__assert_fail@plt+0x3d74>
   13b94:	mov	r0, r6
   13b98:	bl	15478 <__assert_fail@plt+0x3d74>
   13b9c:	ldr	r0, [sp, #60]	; 0x3c
   13ba0:	bl	15478 <__assert_fail@plt+0x3d74>
   13ba4:	cmp	r5, #0
   13ba8:	strne	r5, [sp, #52]	; 0x34
   13bac:	bne	13bd0 <__assert_fail@plt+0x24cc>
   13bb0:	b	13c24 <__assert_fail@plt+0x2520>
   13bb4:	ldr	fp, [sp, #64]	; 0x40
   13bb8:	ldr	sl, [sp, #68]	; 0x44
   13bbc:	ldr	r0, [sp, #60]	; 0x3c
   13bc0:	bl	15478 <__assert_fail@plt+0x3d74>
   13bc4:	ldr	r3, [sp, #52]	; 0x34
   13bc8:	cmp	r3, #0
   13bcc:	beq	13c18 <__assert_fail@plt+0x2514>
   13bd0:	mov	r3, #0
   13bd4:	str	r3, [sp, #16]
   13bd8:	str	r3, [sp, #12]
   13bdc:	ldr	r0, [sp, #52]	; 0x34
   13be0:	ldrb	r2, [r0, #24]
   13be4:	lsr	r2, r2, #1
   13be8:	and	r2, r2, #1
   13bec:	str	r2, [sp, #8]
   13bf0:	ldrb	r2, [r0, #24]
   13bf4:	and	r2, r2, #1
   13bf8:	str	r2, [sp, #4]
   13bfc:	ldr	r2, [r0, #12]
   13c00:	str	r2, [sp]
   13c04:	ldr	r2, [sp, #48]	; 0x30
   13c08:	ldr	r1, [r0, #4]
   13c0c:	ldr	r0, [r0]
   13c10:	bl	11f34 <__assert_fail@plt+0x830>
   13c14:	b	13f28 <__assert_fail@plt+0x2824>
   13c18:	ldr	r3, [sp, #40]	; 0x28
   13c1c:	cmp	r3, #0
   13c20:	bne	13c60 <__assert_fail@plt+0x255c>
   13c24:	ldr	r0, [sp, #48]	; 0x30
   13c28:	bl	11680 <canonicalize_file_name@plt>
   13c2c:	subs	r7, r0, #0
   13c30:	beq	13c40 <__assert_fail@plt+0x253c>
   13c34:	ldrb	r3, [r7]
   13c38:	cmp	r3, #47	; 0x2f
   13c3c:	beq	13ca4 <__assert_fail@plt+0x25a0>
   13c40:	mov	r0, r7
   13c44:	bl	15478 <__assert_fail@plt+0x3d74>
   13c48:	ldr	r3, [pc, #1096]	; 14098 <__assert_fail@plt+0x2994>
   13c4c:	ldr	r4, [r3, #116]	; 0x74
   13c50:	mov	r5, #0
   13c54:	ldr	r7, [pc, #1172]	; 140f0 <__assert_fail@plt+0x29ec>
   13c58:	ldr	r6, [pc, #1212]	; 1411c <__assert_fail@plt+0x2a18>
   13c5c:	b	13e70 <__assert_fail@plt+0x276c>
   13c60:	mov	r2, #5
   13c64:	ldr	r1, [pc, #1204]	; 14120 <__assert_fail@plt+0x2a1c>
   13c68:	mov	r0, #0
   13c6c:	bl	113bc <dcgettext@plt>
   13c70:	mov	r4, r0
   13c74:	ldr	r1, [sp, #48]	; 0x30
   13c78:	mov	r0, #4
   13c7c:	bl	19c24 <__assert_fail@plt+0x8520>
   13c80:	mov	r3, r0
   13c84:	mov	r2, r4
   13c88:	mov	r1, #0
   13c8c:	mov	r0, r1
   13c90:	bl	11494 <error@plt>
   13c94:	mov	r3, #1
   13c98:	ldr	r2, [pc, #1016]	; 14098 <__assert_fail@plt+0x2994>
   13c9c:	str	r3, [r2, #48]	; 0x30
   13ca0:	b	13f28 <__assert_fail@plt+0x2824>
   13ca4:	mov	r0, r7
   13ca8:	bl	1153c <strlen@plt>
   13cac:	mov	r8, r0
   13cb0:	ldr	r3, [pc, #992]	; 14098 <__assert_fail@plt+0x2994>
   13cb4:	ldr	r4, [r3, #116]	; 0x74
   13cb8:	cmp	r4, #0
   13cbc:	beq	13c40 <__assert_fail@plt+0x253c>
   13cc0:	mov	r9, #0
   13cc4:	mov	r5, r9
   13cc8:	str	fp, [sp, #36]	; 0x24
   13ccc:	b	13cfc <__assert_fail@plt+0x25f8>
   13cd0:	mov	r2, r6
   13cd4:	mov	r1, r7
   13cd8:	mov	r0, fp
   13cdc:	bl	116d4 <strncmp@plt>
   13ce0:	cmp	r0, #0
   13ce4:	moveq	r9, r6
   13ce8:	cmp	r0, #0
   13cec:	moveq	r5, r4
   13cf0:	ldr	r4, [r4, #28]
   13cf4:	cmp	r4, #0
   13cf8:	beq	13d78 <__assert_fail@plt+0x2674>
   13cfc:	ldr	r1, [pc, #1048]	; 1411c <__assert_fail@plt+0x2a18>
   13d00:	ldr	r0, [r4, #12]
   13d04:	bl	11320 <strcmp@plt>
   13d08:	cmp	r0, #0
   13d0c:	beq	13cf0 <__assert_fail@plt+0x25ec>
   13d10:	cmp	r5, #0
   13d14:	beq	13d30 <__assert_fail@plt+0x262c>
   13d18:	ldrb	r3, [r5, #24]
   13d1c:	tst	r3, #1
   13d20:	bne	13d30 <__assert_fail@plt+0x262c>
   13d24:	ldrb	r3, [r4, #24]
   13d28:	tst	r3, #1
   13d2c:	bne	13cf0 <__assert_fail@plt+0x25ec>
   13d30:	ldr	fp, [r4, #4]
   13d34:	mov	r0, fp
   13d38:	bl	1153c <strlen@plt>
   13d3c:	mov	r6, r0
   13d40:	cmp	r0, r9
   13d44:	cmpcs	r8, r0
   13d48:	bcc	13cf0 <__assert_fail@plt+0x25ec>
   13d4c:	cmp	r0, #1
   13d50:	beq	13d6c <__assert_fail@plt+0x2668>
   13d54:	cmp	r8, r0
   13d58:	beq	13cd0 <__assert_fail@plt+0x25cc>
   13d5c:	ldrb	r3, [r7, r0]
   13d60:	cmp	r3, #47	; 0x2f
   13d64:	bne	13cf0 <__assert_fail@plt+0x25ec>
   13d68:	b	13cd0 <__assert_fail@plt+0x25cc>
   13d6c:	mov	r9, r0
   13d70:	mov	r5, r4
   13d74:	b	13cf0 <__assert_fail@plt+0x25ec>
   13d78:	ldr	fp, [sp, #36]	; 0x24
   13d7c:	mov	r0, r7
   13d80:	bl	15478 <__assert_fail@plt+0x3d74>
   13d84:	cmp	r5, #0
   13d88:	beq	13c48 <__assert_fail@plt+0x2544>
   13d8c:	add	r2, sp, #72	; 0x48
   13d90:	ldr	r1, [r5, #4]
   13d94:	mov	r0, #3
   13d98:	bl	116bc <__xstat64@plt>
   13d9c:	cmp	r0, #0
   13da0:	bne	13c48 <__assert_fail@plt+0x2544>
   13da4:	ldrd	r2, [sl]
   13da8:	ldrd	r0, [sp, #72]	; 0x48
   13dac:	cmp	r1, r3
   13db0:	cmpeq	r0, r2
   13db4:	bne	13c48 <__assert_fail@plt+0x2544>
   13db8:	b	13ee4 <__assert_fail@plt+0x27e0>
   13dbc:	add	r2, sp, #72	; 0x48
   13dc0:	ldr	r1, [r4, #4]
   13dc4:	mov	r0, #3
   13dc8:	bl	116bc <__xstat64@plt>
   13dcc:	cmp	r0, #0
   13dd0:	ldrdeq	r2, [sp, #72]	; 0x48
   13dd4:	strdeq	r2, [r4, #16]
   13dd8:	beq	13e90 <__assert_fail@plt+0x278c>
   13ddc:	bl	1156c <__errno_location@plt>
   13de0:	ldr	r3, [r0]
   13de4:	cmp	r3, #5
   13de8:	beq	13dfc <__assert_fail@plt+0x26f8>
   13dec:	mvn	r2, #1
   13df0:	mvn	r3, #0
   13df4:	strd	r2, [r4, #16]
   13df8:	b	13e90 <__assert_fail@plt+0x278c>
   13dfc:	ldr	r2, [r4, #4]
   13e00:	mov	r1, #3
   13e04:	mov	r0, #0
   13e08:	bl	19cf0 <__assert_fail@plt+0x85ec>
   13e0c:	mov	r3, r0
   13e10:	mov	r2, r7
   13e14:	mov	r1, #5
   13e18:	mov	r0, #0
   13e1c:	bl	11494 <error@plt>
   13e20:	mov	r3, #1
   13e24:	ldr	r2, [pc, #620]	; 14098 <__assert_fail@plt+0x2994>
   13e28:	str	r3, [r2, #48]	; 0x30
   13e2c:	b	13dec <__assert_fail@plt+0x26e8>
   13e30:	add	r2, sp, #72	; 0x48
   13e34:	ldr	r1, [r4, #4]
   13e38:	mov	r0, #3
   13e3c:	bl	116bc <__xstat64@plt>
   13e40:	cmp	r0, #0
   13e44:	bne	13e60 <__assert_fail@plt+0x275c>
   13e48:	ldrd	r2, [r4, #16]
   13e4c:	ldrd	r0, [sp, #72]	; 0x48
   13e50:	cmp	r1, r3
   13e54:	cmpeq	r0, r2
   13e58:	moveq	r5, r4
   13e5c:	beq	13e6c <__assert_fail@plt+0x2768>
   13e60:	mvn	r2, #1
   13e64:	mvn	r3, #0
   13e68:	strd	r2, [r4, #16]
   13e6c:	ldr	r4, [r4, #28]
   13e70:	cmp	r4, #0
   13e74:	beq	13edc <__assert_fail@plt+0x27d8>
   13e78:	ldrd	r2, [r4, #16]
   13e7c:	mvn	r0, #0
   13e80:	mvn	r1, #0
   13e84:	cmp	r3, r1
   13e88:	cmpeq	r2, r0
   13e8c:	beq	13dbc <__assert_fail@plt+0x26b8>
   13e90:	ldrd	r0, [sl]
   13e94:	ldrd	r2, [r4, #16]
   13e98:	cmp	r1, r3
   13e9c:	cmpeq	r0, r2
   13ea0:	bne	13e6c <__assert_fail@plt+0x2768>
   13ea4:	mov	r1, r6
   13ea8:	ldr	r0, [r4, #12]
   13eac:	bl	11320 <strcmp@plt>
   13eb0:	cmp	r0, #0
   13eb4:	beq	13e6c <__assert_fail@plt+0x2768>
   13eb8:	cmp	r5, #0
   13ebc:	beq	13e30 <__assert_fail@plt+0x272c>
   13ec0:	ldrb	r3, [r5, #24]
   13ec4:	tst	r3, #1
   13ec8:	bne	13e30 <__assert_fail@plt+0x272c>
   13ecc:	ldrb	r3, [r4, #24]
   13ed0:	tst	r3, #1
   13ed4:	bne	13e6c <__assert_fail@plt+0x2768>
   13ed8:	b	13e30 <__assert_fail@plt+0x272c>
   13edc:	cmp	r5, #0
   13ee0:	beq	13fd8 <__assert_fail@plt+0x28d4>
   13ee4:	mov	r3, #0
   13ee8:	str	r3, [sp, #16]
   13eec:	str	r3, [sp, #12]
   13ef0:	ldrb	r3, [r5, #24]
   13ef4:	lsr	r3, r3, #1
   13ef8:	and	r3, r3, #1
   13efc:	str	r3, [sp, #8]
   13f00:	ldrb	r3, [r5, #24]
   13f04:	and	r3, r3, #1
   13f08:	str	r3, [sp, #4]
   13f0c:	ldr	r3, [r5, #12]
   13f10:	str	r3, [sp]
   13f14:	ldr	r2, [sp, #48]	; 0x30
   13f18:	mov	r3, r2
   13f1c:	ldr	r1, [r5, #4]
   13f20:	ldr	r0, [r5]
   13f24:	bl	11f34 <__assert_fail@plt+0x830>
   13f28:	add	fp, fp, #1
   13f2c:	ldr	r3, [sp, #28]
   13f30:	cmp	fp, r3
   13f34:	bge	14420 <__assert_fail@plt+0x2d1c>
   13f38:	ldr	r3, [sp, #32]
   13f3c:	ldr	r3, [r3, fp, lsl #2]
   13f40:	mov	r4, r3
   13f44:	str	r3, [sp, #48]	; 0x30
   13f48:	cmp	r3, #0
   13f4c:	beq	13f28 <__assert_fail@plt+0x2824>
   13f50:	ldr	r3, [pc, #404]	; 140ec <__assert_fail@plt+0x29e8>
   13f54:	ldr	r3, [r3]
   13f58:	sub	r3, fp, r3
   13f5c:	mov	r2, #104	; 0x68
   13f60:	ldr	r1, [sp, #56]	; 0x38
   13f64:	mla	sl, r2, r3, r1
   13f68:	ldr	r3, [sl, #16]
   13f6c:	and	r3, r3, #45056	; 0xb000
   13f70:	cmp	r3, #8192	; 0x2000
   13f74:	bne	13c24 <__assert_fail@plt+0x2520>
   13f78:	mov	r0, r4
   13f7c:	bl	11680 <canonicalize_file_name@plt>
   13f80:	subs	r3, r0, #0
   13f84:	mov	r1, r3
   13f88:	str	r3, [sp, #60]	; 0x3c
   13f8c:	beq	13b2c <__assert_fail@plt+0x2428>
   13f90:	ldrb	r3, [r3]
   13f94:	mov	r2, r4
   13f98:	cmp	r3, #47	; 0x2f
   13f9c:	moveq	r2, r1
   13fa0:	str	r2, [sp, #36]	; 0x24
   13fa4:	ldr	r3, [pc, #236]	; 14098 <__assert_fail@plt+0x2994>
   13fa8:	ldr	r5, [r3, #116]	; 0x74
   13fac:	cmp	r5, #0
   13fb0:	beq	1470c <__assert_fail@plt+0x3008>
   13fb4:	mov	r3, #0
   13fb8:	str	r3, [sp, #40]	; 0x28
   13fbc:	str	r3, [sp, #52]	; 0x34
   13fc0:	mvn	r2, #0
   13fc4:	str	r2, [sp, #44]	; 0x2c
   13fc8:	str	fp, [sp, #64]	; 0x40
   13fcc:	str	sl, [sp, #68]	; 0x44
   13fd0:	mov	fp, r3
   13fd4:	b	14634 <__assert_fail@plt+0x2f30>
   13fd8:	mov	r1, sl
   13fdc:	ldr	r5, [sp, #48]	; 0x30
   13fe0:	mov	r0, r5
   13fe4:	bl	14718 <__assert_fail@plt+0x3014>
   13fe8:	subs	r4, r0, #0
   13fec:	beq	13f28 <__assert_fail@plt+0x2824>
   13ff0:	mov	r0, #0
   13ff4:	str	r0, [sp, #16]
   13ff8:	str	r0, [sp, #12]
   13ffc:	str	r0, [sp, #8]
   14000:	str	r0, [sp, #4]
   14004:	str	r0, [sp]
   14008:	mov	r3, r0
   1400c:	mov	r2, r5
   14010:	mov	r1, r4
   14014:	bl	11f34 <__assert_fail@plt+0x830>
   14018:	mov	r0, r4
   1401c:	bl	15478 <__assert_fail@plt+0x3d74>
   14020:	b	13f28 <__assert_fail@plt+0x2824>
   14024:	ldr	r3, [pc, #108]	; 14098 <__assert_fail@plt+0x2994>
   14028:	ldrb	r9, [r3, #45]	; 0x2d
   1402c:	ldr	r3, [r3, #116]	; 0x74
   14030:	mov	r0, #0
   14034:	b	14040 <__assert_fail@plt+0x293c>
   14038:	add	r0, r0, #1
   1403c:	ldr	r3, [r3, #28]
   14040:	cmp	r3, #0
   14044:	bne	14038 <__assert_fail@plt+0x2934>
   14048:	ldr	r3, [pc, #212]	; 14124 <__assert_fail@plt+0x2a20>
   1404c:	str	r3, [sp]
   14050:	ldr	r3, [pc, #208]	; 14128 <__assert_fail@plt+0x2a24>
   14054:	ldr	r2, [pc, #208]	; 1412c <__assert_fail@plt+0x2a28>
   14058:	mov	r1, #0
   1405c:	bl	15f50 <__assert_fail@plt+0x484c>
   14060:	ldr	r3, [pc, #48]	; 14098 <__assert_fail@plt+0x2994>
   14064:	str	r0, [r3, #40]	; 0x28
   14068:	cmp	r0, #0
   1406c:	beq	14084 <__assert_fail@plt+0x2980>
   14070:	ldr	r3, [pc, #32]	; 14098 <__assert_fail@plt+0x2994>
   14074:	ldr	r4, [r3, #116]	; 0x74
   14078:	mov	sl, #0
   1407c:	mov	r8, r3
   14080:	b	1429c <__assert_fail@plt+0x2b98>
   14084:	bl	1ab88 <__assert_fail@plt+0x9484>
   14088:	andeq	lr, r1, ip, asr #9
   1408c:			; <UNDEFINED> instruction: 0x0001debc
   14090:	andeq	sp, r1, r4, ror #31
   14094:	strdeq	r5, [r1], -r0
   14098:	andeq	pc, r2, r0, asr #6
   1409c:	strdeq	sp, [r1], -ip
   140a0:	andeq	sp, r1, r8, asr #7
   140a4:	andeq	lr, r1, r8, lsr #32
   140a8:	andeq	pc, r2, r8, lsr r3	; <UNPREDICTABLE>
   140ac:	andeq	r0, r0, r2, lsl #2
   140b0:	andeq	r0, r0, r1, lsl #2
   140b4:	andeq	lr, r1, r4, asr r0
   140b8:	andeq	lr, r1, r0, rrx
   140bc:	andeq	lr, r1, r0, ror r0
   140c0:	ldrdeq	pc, [r2], -r0
   140c4:			; <UNDEFINED> instruction: 0x0001deb8
   140c8:	andeq	sp, r1, r0, ror r5
   140cc:	andeq	r0, r0, r3, lsl #2
   140d0:	andeq	lr, r1, r0, asr #32
   140d4:	andeq	lr, r1, ip, lsr r0
   140d8:	andeq	lr, r1, ip, asr #32
   140dc:	andeq	lr, r1, r0, asr r0
   140e0:	andeq	lr, r1, r4, lsr #1
   140e4:	andeq	lr, r1, r4, lsl #1
   140e8:	muleq	r1, r4, r0
   140ec:	andeq	pc, r2, r8, lsr #6
   140f0:	andeq	lr, r1, ip, asr r4
   140f4:	ldrdeq	lr, [r1], -r4
   140f8:	andeq	lr, r1, r0, lsl #2
   140fc:			; <UNDEFINED> instruction: 0x0001dfb8
   14100:	andeq	sp, r1, r0, asr #31
   14104:	andeq	lr, r1, r8, lsl #2
   14108:	andeq	lr, r1, r4, lsl r1
   1410c:	ldrdeq	sp, [r1], -r8
   14110:	andeq	r0, r0, r5, lsr r2
   14114:	andeq	sp, r1, r8, ror #9
   14118:	andeq	lr, r1, r0, ror #2
   1411c:	andeq	lr, r1, ip, lsr #3
   14120:	andeq	lr, r1, r8, ror r1
   14124:	andeq	r1, r1, ip, ror r9
   14128:	muleq	r1, r0, r8
   1412c:	andeq	r1, r1, r4, ror r8
   14130:	andeq	pc, r2, ip, ror r1	; <UNPREDICTABLE>
   14134:	andeq	pc, r2, r8, ror r3	; <UNPREDICTABLE>
   14138:	ldrdeq	sp, [r1], -ip
   1413c:	andeq	sp, r1, r4, lsl r5
   14140:	andeq	pc, r2, r4, lsr r3	; <UNPREDICTABLE>
   14144:			; <UNDEFINED> instruction: 0x0001e1b4
   14148:	ldrdeq	lr, [r1], -r0
   1414c:	andeq	pc, r2, r0, asr #6
   14150:	add	r2, sp, #72	; 0x48
   14154:	ldr	r1, [r4, #4]
   14158:	mov	r0, #3
   1415c:	bl	116bc <__xstat64@plt>
   14160:	cmn	r0, #1
   14164:	beq	14300 <__assert_fail@plt+0x2bfc>
   14168:	ldrd	r0, [sp, #72]	; 0x48
   1416c:	bl	11d78 <__assert_fail@plt+0x674>
   14170:	subs	r7, r0, #0
   14174:	beq	14308 <__assert_fail@plt+0x2c04>
   14178:	ldr	r5, [r7, #8]
   1417c:	ldr	r0, [r5, #4]
   14180:	str	r0, [sp, #28]
   14184:	bl	1153c <strlen@plt>
   14188:	str	r0, [sp, #32]
   1418c:	ldr	r0, [r4, #4]
   14190:	str	r0, [sp, #36]	; 0x24
   14194:	bl	1153c <strlen@plt>
   14198:	str	r0, [sp, #40]	; 0x28
   1419c:	ldr	r0, [r5, #8]
   141a0:	cmp	r0, #0
   141a4:	moveq	r6, #0
   141a8:	beq	141d8 <__assert_fail@plt+0x2ad4>
   141ac:	ldr	fp, [r4, #8]
   141b0:	cmp	fp, #0
   141b4:	moveq	r6, #0
   141b8:	beq	141d8 <__assert_fail@plt+0x2ad4>
   141bc:	bl	1153c <strlen@plt>
   141c0:	mov	r6, r0
   141c4:	mov	r0, fp
   141c8:	bl	1153c <strlen@plt>
   141cc:	cmp	r6, r0
   141d0:	movcs	r6, #0
   141d4:	movcc	r6, #1
   141d8:	ldrb	r3, [r8, #53]	; 0x35
   141dc:	cmp	r3, #0
   141e0:	bne	14210 <__assert_fail@plt+0x2b0c>
   141e4:	ldrb	r3, [r4, #24]
   141e8:	tst	r3, #2
   141ec:	beq	14210 <__assert_fail@plt+0x2b0c>
   141f0:	ldrb	r3, [r5, #24]
   141f4:	tst	r3, #2
   141f8:	beq	14210 <__assert_fail@plt+0x2b0c>
   141fc:	ldr	r1, [r4]
   14200:	ldr	r0, [r5]
   14204:	bl	11320 <strcmp@plt>
   14208:	cmp	r0, #0
   1420c:	bne	14308 <__assert_fail@plt+0x2c04>
   14210:	ldr	fp, [r4]
   14214:	mov	r1, #47	; 0x2f
   14218:	mov	r0, fp
   1421c:	bl	11548 <strchr@plt>
   14220:	cmp	r0, #0
   14224:	beq	1423c <__assert_fail@plt+0x2b38>
   14228:	mov	r1, #47	; 0x2f
   1422c:	ldr	r0, [r5]
   14230:	bl	11548 <strchr@plt>
   14234:	cmp	r0, #0
   14238:	beq	14284 <__assert_fail@plt+0x2b80>
   1423c:	eor	r3, r6, #1
   14240:	ldr	r2, [sp, #32]
   14244:	ldr	r1, [sp, #40]	; 0x28
   14248:	cmp	r2, r1
   1424c:	movls	r3, #0
   14250:	andhi	r3, r3, #1
   14254:	cmp	r3, #0
   14258:	bne	14284 <__assert_fail@plt+0x2b80>
   1425c:	mov	r1, fp
   14260:	ldr	r0, [r5]
   14264:	bl	11320 <strcmp@plt>
   14268:	cmp	r0, #0
   1426c:	beq	14348 <__assert_fail@plt+0x2c44>
   14270:	ldr	r1, [sp, #28]
   14274:	ldr	r0, [sp, #36]	; 0x24
   14278:	bl	11320 <strcmp@plt>
   1427c:	cmp	r0, #0
   14280:	bne	14350 <__assert_fail@plt+0x2c4c>
   14284:	str	r4, [r7, #8]
   14288:	cmp	r5, #0
   1428c:	beq	14308 <__assert_fail@plt+0x2c04>
   14290:	ldr	r4, [r4, #28]
   14294:	cmp	r9, #0
   14298:	beq	14358 <__assert_fail@plt+0x2c54>
   1429c:	cmp	r4, #0
   142a0:	beq	14368 <__assert_fail@plt+0x2c64>
   142a4:	ldrb	r3, [r4, #24]
   142a8:	tst	r3, #2
   142ac:	beq	142bc <__assert_fail@plt+0x2bb8>
   142b0:	ldrb	r2, [r8, #44]	; 0x2c
   142b4:	cmp	r2, #0
   142b8:	bne	14300 <__assert_fail@plt+0x2bfc>
   142bc:	tst	r3, #1
   142c0:	beq	142dc <__assert_fail@plt+0x2bd8>
   142c4:	ldrb	r3, [r8, #45]	; 0x2d
   142c8:	cmp	r3, #0
   142cc:	bne	142dc <__assert_fail@plt+0x2bd8>
   142d0:	ldrb	r3, [r8, #46]	; 0x2e
   142d4:	cmp	r3, #0
   142d8:	beq	14300 <__assert_fail@plt+0x2bfc>
   142dc:	ldr	r5, [r4, #12]
   142e0:	mov	r0, r5
   142e4:	bl	118b4 <__assert_fail@plt+0x1b0>
   142e8:	cmp	r0, #0
   142ec:	beq	14300 <__assert_fail@plt+0x2bfc>
   142f0:	mov	r0, r5
   142f4:	bl	11914 <__assert_fail@plt+0x210>
   142f8:	cmp	r0, #0
   142fc:	beq	14150 <__assert_fail@plt+0x2a4c>
   14300:	ldrd	r2, [r4, #16]
   14304:	strd	r2, [sp, #72]	; 0x48
   14308:	mov	r0, #24
   1430c:	bl	1a5e4 <__assert_fail@plt+0x8ee0>
   14310:	mov	r5, r0
   14314:	str	r4, [r0, #8]
   14318:	ldrd	r2, [sp, #72]	; 0x48
   1431c:	strd	r2, [r0]
   14320:	str	sl, [r0, #12]
   14324:	mov	r1, r0
   14328:	ldr	r0, [r8, #40]	; 0x28
   1432c:	bl	1649c <__assert_fail@plt+0x4d98>
   14330:	cmp	r0, #0
   14334:	beq	14364 <__assert_fail@plt+0x2c60>
   14338:	str	r5, [r0, #16]
   1433c:	ldr	r4, [r4, #28]
   14340:	mov	sl, r5
   14344:	b	1429c <__assert_fail@plt+0x2b98>
   14348:	mov	r5, r4
   1434c:	b	14290 <__assert_fail@plt+0x2b8c>
   14350:	mov	r5, r4
   14354:	b	14290 <__assert_fail@plt+0x2b8c>
   14358:	mov	r0, r5
   1435c:	bl	178dc <__assert_fail@plt+0x61d8>
   14360:	b	1429c <__assert_fail@plt+0x2b98>
   14364:	bl	1ab88 <__assert_fail@plt+0x9484>
   14368:	cmp	r9, #0
   1436c:	bne	143c0 <__assert_fail@plt+0x2cbc>
   14370:	mov	r2, #0
   14374:	ldr	r3, [pc, #-560]	; 1414c <__assert_fail@plt+0x2a48>
   14378:	str	r2, [r3, #116]	; 0x74
   1437c:	mov	r2, #1
   14380:	cmp	sl, #0
   14384:	beq	143a0 <__assert_fail@plt+0x2c9c>
   14388:	ldr	r3, [sl, #8]
   1438c:	str	r4, [r3, #28]
   14390:	ldr	sl, [sl, #12]
   14394:	mov	r9, r2
   14398:	mov	r4, r3
   1439c:	b	14380 <__assert_fail@plt+0x2c7c>
   143a0:	cmp	r9, #0
   143a4:	ldrne	r3, [pc, #-608]	; 1414c <__assert_fail@plt+0x2a48>
   143a8:	strne	r4, [r3, #116]	; 0x74
   143ac:	ldr	r4, [pc, #-616]	; 1414c <__assert_fail@plt+0x2a48>
   143b0:	ldr	r0, [r4, #40]	; 0x28
   143b4:	bl	160e0 <__assert_fail@plt+0x49dc>
   143b8:	mov	r3, #0
   143bc:	str	r3, [r4, #40]	; 0x28
   143c0:	ldr	r3, [pc, #-636]	; 1414c <__assert_fail@plt+0x2a48>
   143c4:	ldr	r4, [r3, #116]	; 0x74
   143c8:	mov	r6, #1
   143cc:	mov	r5, #0
   143d0:	b	14418 <__assert_fail@plt+0x2d14>
   143d4:	str	r6, [sp, #16]
   143d8:	str	r5, [sp, #12]
   143dc:	ldrb	r3, [r4, #24]
   143e0:	lsr	r3, r3, #1
   143e4:	and	r3, r3, #1
   143e8:	str	r3, [sp, #8]
   143ec:	ldrb	r3, [r4, #24]
   143f0:	and	r3, r3, #1
   143f4:	str	r3, [sp, #4]
   143f8:	ldr	r3, [r4, #12]
   143fc:	str	r3, [sp]
   14400:	mov	r3, r5
   14404:	mov	r2, r5
   14408:	ldr	r1, [r4, #4]
   1440c:	ldr	r0, [r4]
   14410:	bl	11f34 <__assert_fail@plt+0x830>
   14414:	ldr	r4, [r4, #28]
   14418:	cmp	r4, #0
   1441c:	bne	143d4 <__assert_fail@plt+0x2cd0>
   14420:	ldr	r3, [pc, #-732]	; 1414c <__assert_fail@plt+0x2a48>
   14424:	ldrb	r3, [r3, #52]	; 0x34
   14428:	cmp	r3, #0
   1442c:	bne	1444c <__assert_fail@plt+0x2d48>
   14430:	ldr	r3, [pc, #-748]	; 1414c <__assert_fail@plt+0x2a48>
   14434:	ldr	r3, [r3, #48]	; 0x30
   14438:	cmp	r3, #0
   1443c:	beq	145a4 <__assert_fail@plt+0x2ea0>
   14440:	ldr	r3, [pc, #-764]	; 1414c <__assert_fail@plt+0x2a48>
   14444:	ldr	r0, [r3, #48]	; 0x30
   14448:	bl	11530 <exit@plt>
   1444c:	ldr	r3, [pc, #-776]	; 1414c <__assert_fail@plt+0x2a48>
   14450:	ldrb	r3, [r3, #53]	; 0x35
   14454:	cmp	r3, #0
   14458:	beq	14498 <__assert_fail@plt+0x2d94>
   1445c:	ldr	r3, [pc, #-820]	; 14130 <__assert_fail@plt+0x2a2c>
   14460:	ldrb	ip, [r3, #24]
   14464:	mov	r2, #0
   14468:	str	r2, [sp, #16]
   1446c:	ldr	r3, [pc, #-832]	; 14134 <__assert_fail@plt+0x2a30>
   14470:	str	r3, [sp, #12]
   14474:	str	r2, [sp, #8]
   14478:	str	r2, [sp, #4]
   1447c:	str	r2, [sp]
   14480:	mov	r3, r2
   14484:	ldr	r0, [pc, #-852]	; 14138 <__assert_fail@plt+0x2a34>
   14488:	ldr	r1, [pc, #-852]	; 1413c <__assert_fail@plt+0x2a38>
   1448c:	cmp	ip, r2
   14490:	moveq	r1, r0
   14494:	bl	11f34 <__assert_fail@plt+0x830>
   14498:	mov	r6, #0
   1449c:	ldr	r5, [pc, #-856]	; 1414c <__assert_fail@plt+0x2a48>
   144a0:	ldr	r7, [pc, #-872]	; 14140 <__assert_fail@plt+0x2a3c>
   144a4:	mov	r9, #32
   144a8:	ldr	r3, [r5, #8]
   144ac:	cmp	r6, r3
   144b0:	bcs	14440 <__assert_fail@plt+0x2d3c>
   144b4:	lsl	sl, r6, #2
   144b8:	mov	r4, #0
   144bc:	b	14558 <__assert_fail@plt+0x2e54>
   144c0:	lsl	r8, r4, #2
   144c4:	ldr	r3, [r5, #12]
   144c8:	ldr	r3, [r3, sl]
   144cc:	ldr	fp, [r3, r4, lsl #2]
   144d0:	cmp	r4, #0
   144d4:	beq	144f8 <__assert_fail@plt+0x2df4>
   144d8:	ldr	r0, [r7]
   144dc:	ldr	r3, [r0, #20]
   144e0:	ldr	r2, [r0, #24]
   144e4:	cmp	r3, r2
   144e8:	addcc	r2, r3, #1
   144ec:	strcc	r2, [r0, #20]
   144f0:	strbcc	r9, [r3]
   144f4:	bcs	14598 <__assert_fail@plt+0x2e94>
   144f8:	ldr	r3, [r5, #16]
   144fc:	sub	r3, r3, #1
   14500:	ldr	r2, [r5, #20]
   14504:	ldr	r1, [r2, r8]
   14508:	ldr	r1, [r1, #16]
   1450c:	str	r1, [sp, #72]	; 0x48
   14510:	ldr	r2, [r2, r8]
   14514:	cmp	r4, r3
   14518:	moveq	r3, #8
   1451c:	movne	r3, #0
   14520:	ldr	r2, [r2, #20]
   14524:	add	r1, sp, #72	; 0x48
   14528:	mov	r0, fp
   1452c:	bl	17564 <__assert_fail@plt+0x5e60>
   14530:	subs	fp, r0, #0
   14534:	ldreq	r3, [r5, #12]
   14538:	ldreq	r3, [r3, sl]
   1453c:	ldreq	r0, [r3, r8]
   14540:	movne	r0, fp
   14544:	ldr	r1, [r7]
   14548:	bl	112f0 <fputs_unlocked@plt>
   1454c:	mov	r0, fp
   14550:	bl	15478 <__assert_fail@plt+0x3d74>
   14554:	add	r4, r4, #1
   14558:	ldr	r3, [r5, #16]
   1455c:	cmp	r4, r3
   14560:	bcc	144c0 <__assert_fail@plt+0x2dbc>
   14564:	ldr	r0, [r7]
   14568:	ldr	r3, [r0, #20]
   1456c:	ldr	r2, [r0, #24]
   14570:	cmp	r3, r2
   14574:	addcc	r2, r3, #1
   14578:	strcc	r2, [r0, #20]
   1457c:	movcc	r2, #10
   14580:	strbcc	r2, [r3]
   14584:	bcc	14590 <__assert_fail@plt+0x2e8c>
   14588:	mov	r1, #10
   1458c:	bl	11608 <__overflow@plt>
   14590:	add	r6, r6, #1
   14594:	b	144a8 <__assert_fail@plt+0x2da4>
   14598:	mov	r1, r9
   1459c:	bl	11608 <__overflow@plt>
   145a0:	b	144f8 <__assert_fail@plt+0x2df4>
   145a4:	mov	r2, #5
   145a8:	ldr	r1, [pc, #-1132]	; 14144 <__assert_fail@plt+0x2a40>
   145ac:	mov	r0, #0
   145b0:	bl	113bc <dcgettext@plt>
   145b4:	mov	r2, r0
   145b8:	mov	r1, #0
   145bc:	mov	r0, #1
   145c0:	bl	11494 <error@plt>
   145c4:	mov	r2, #5
   145c8:	ldr	r1, [pc, #-1160]	; 14148 <__assert_fail@plt+0x2a44>
   145cc:	mov	r0, #0
   145d0:	bl	113bc <dcgettext@plt>
   145d4:	mov	r5, r0
   145d8:	mov	r4, #0
   145dc:	b	138d4 <__assert_fail@plt+0x21d0>
   145e0:	mov	r7, #0
   145e4:	ldr	r4, [r5, #4]
   145e8:	mov	r0, r4
   145ec:	bl	1153c <strlen@plt>
   145f0:	mov	sl, r0
   145f4:	eor	r8, fp, #1
   145f8:	uxtb	r8, r8
   145fc:	ldr	r3, [sp, #44]	; 0x2c
   14600:	cmp	r3, sl
   14604:	movls	r9, #0
   14608:	movhi	r9, #1
   1460c:	orrs	r3, r8, r9
   14610:	str	r3, [sp, #40]	; 0x28
   14614:	bne	13b4c <__assert_fail@plt+0x2448>
   14618:	mov	r0, r7
   1461c:	bl	15478 <__assert_fail@plt+0x3d74>
   14620:	mov	r0, r6
   14624:	bl	15478 <__assert_fail@plt+0x3d74>
   14628:	ldr	r5, [r5, #28]
   1462c:	cmp	r5, #0
   14630:	beq	13bb4 <__assert_fail@plt+0x24b0>
   14634:	ldr	r8, [r5]
   14638:	mov	r0, r8
   1463c:	bl	11680 <canonicalize_file_name@plt>
   14640:	subs	r6, r0, #0
   14644:	beq	14654 <__assert_fail@plt+0x2f50>
   14648:	ldrb	r3, [r6]
   1464c:	cmp	r3, #47	; 0x2f
   14650:	moveq	r8, r6
   14654:	mov	r1, r8
   14658:	ldr	r0, [sp, #36]	; 0x24
   1465c:	bl	11320 <strcmp@plt>
   14660:	cmp	r0, #0
   14664:	bne	14620 <__assert_fail@plt+0x2f1c>
   14668:	ldr	r4, [r5, #4]
   1466c:	ldr	r3, [pc, #-1320]	; 1414c <__assert_fail@plt+0x2a48>
   14670:	ldr	r7, [r3, #116]	; 0x74
   14674:	cmp	r7, #0
   14678:	beq	145e0 <__assert_fail@plt+0x2edc>
   1467c:	mov	r9, #0
   14680:	mov	r1, r4
   14684:	ldr	r0, [r7, #4]
   14688:	bl	11320 <strcmp@plt>
   1468c:	cmp	r0, #0
   14690:	moveq	r9, r7
   14694:	ldr	r7, [r7, #28]
   14698:	cmp	r7, #0
   1469c:	bne	14680 <__assert_fail@plt+0x2f7c>
   146a0:	cmp	r9, #0
   146a4:	beq	13b38 <__assert_fail@plt+0x2434>
   146a8:	ldr	r0, [r9]
   146ac:	bl	11680 <canonicalize_file_name@plt>
   146b0:	subs	r7, r0, #0
   146b4:	beq	146c4 <__assert_fail@plt+0x2fc0>
   146b8:	ldrb	r3, [r7]
   146bc:	cmp	r3, #47	; 0x2f
   146c0:	beq	146dc <__assert_fail@plt+0x2fd8>
   146c4:	mov	r0, r7
   146c8:	bl	15478 <__assert_fail@plt+0x3d74>
   146cc:	ldr	r0, [r9]
   146d0:	bl	1ab6c <__assert_fail@plt+0x9468>
   146d4:	subs	r7, r0, #0
   146d8:	beq	145e4 <__assert_fail@plt+0x2ee0>
   146dc:	mov	r1, r8
   146e0:	mov	r0, r7
   146e4:	bl	11320 <strcmp@plt>
   146e8:	cmp	r0, #0
   146ec:	beq	145e4 <__assert_fail@plt+0x2ee0>
   146f0:	mov	r3, #1
   146f4:	str	r3, [sp, #40]	; 0x28
   146f8:	b	14618 <__assert_fail@plt+0x2f14>
   146fc:	tst	r8, r9
   14700:	beq	13b78 <__assert_fail@plt+0x2474>
   14704:	str	fp, [sp, #40]	; 0x28
   14708:	b	13b64 <__assert_fail@plt+0x2460>
   1470c:	ldr	r0, [sp, #60]	; 0x3c
   14710:	bl	15478 <__assert_fail@plt+0x3d74>
   14714:	b	13c24 <__assert_fail@plt+0x2520>
   14718:	push	{r4, r5, r6, fp, lr}
   1471c:	add	fp, sp, #16
   14720:	sub	sp, sp, #220	; 0xdc
   14724:	mov	r5, r0
   14728:	mov	r4, r1
   1472c:	sub	r0, fp, #28
   14730:	bl	19e6c <__assert_fail@plt+0x8768>
   14734:	cmp	r0, #0
   14738:	bne	1481c <__assert_fail@plt+0x3118>
   1473c:	ldr	r3, [r4, #16]
   14740:	and	r3, r3, #61440	; 0xf000
   14744:	cmp	r3, #16384	; 0x4000
   14748:	beq	1484c <__assert_fail@plt+0x3148>
   1474c:	mov	r0, r5
   14750:	bl	152e4 <__assert_fail@plt+0x3be0>
   14754:	mov	r4, r0
   14758:	bl	1153c <strlen@plt>
   1475c:	add	r3, r0, #15
   14760:	bic	r3, r3, #7
   14764:	sub	sp, sp, r3
   14768:	add	r2, r0, #1
   1476c:	mov	r1, r4
   14770:	mov	r0, sp
   14774:	bl	11374 <memcpy@plt>
   14778:	mov	r5, r0
   1477c:	mov	r0, r4
   14780:	bl	15478 <__assert_fail@plt+0x3d74>
   14784:	mov	r0, r5
   14788:	bl	11404 <chdir@plt>
   1478c:	cmp	r0, #0
   14790:	blt	148b0 <__assert_fail@plt+0x31ac>
   14794:	sub	r2, fp, #132	; 0x84
   14798:	ldr	r1, [pc, #636]	; 14a1c <__assert_fail@plt+0x3318>
   1479c:	mov	r0, #3
   147a0:	bl	116bc <__xstat64@plt>
   147a4:	cmp	r0, #0
   147a8:	blt	148f4 <__assert_fail@plt+0x31f0>
   147ac:	ldr	r4, [pc, #620]	; 14a20 <__assert_fail@plt+0x331c>
   147b0:	mov	r5, #3
   147b4:	mov	r6, #104	; 0x68
   147b8:	sub	r2, fp, #236	; 0xec
   147bc:	mov	r1, r4
   147c0:	mov	r0, r5
   147c4:	bl	116bc <__xstat64@plt>
   147c8:	cmp	r0, #0
   147cc:	blt	14938 <__assert_fail@plt+0x3234>
   147d0:	ldrd	r2, [fp, #-132]	; 0xffffff7c
   147d4:	ldrd	r0, [fp, #-236]	; 0xffffff14
   147d8:	cmp	r1, r3
   147dc:	cmpeq	r0, r2
   147e0:	bne	149ec <__assert_fail@plt+0x32e8>
   147e4:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   147e8:	ldrd	r0, [fp, #-140]	; 0xffffff74
   147ec:	cmp	r1, r3
   147f0:	cmpeq	r0, r2
   147f4:	beq	149ec <__assert_fail@plt+0x32e8>
   147f8:	mov	r0, r4
   147fc:	bl	11404 <chdir@plt>
   14800:	cmp	r0, #0
   14804:	blt	149ac <__assert_fail@plt+0x32a8>
   14808:	mov	r2, r6
   1480c:	sub	r1, fp, #236	; 0xec
   14810:	sub	r0, fp, #132	; 0x84
   14814:	bl	11374 <memcpy@plt>
   14818:	b	147b8 <__assert_fail@plt+0x30b4>
   1481c:	bl	1156c <__errno_location@plt>
   14820:	ldr	r4, [r0]
   14824:	mov	r2, #5
   14828:	ldr	r1, [pc, #500]	; 14a24 <__assert_fail@plt+0x3320>
   1482c:	mov	r0, #0
   14830:	bl	113bc <dcgettext@plt>
   14834:	mov	r2, r0
   14838:	mov	r1, r4
   1483c:	mov	r0, #0
   14840:	bl	11494 <error@plt>
   14844:	mov	r5, #0
   14848:	b	149a0 <__assert_fail@plt+0x329c>
   1484c:	mov	r2, #104	; 0x68
   14850:	mov	r1, r4
   14854:	sub	r0, fp, #132	; 0x84
   14858:	bl	11374 <memcpy@plt>
   1485c:	mov	r0, r5
   14860:	bl	11404 <chdir@plt>
   14864:	cmp	r0, #0
   14868:	bge	147ac <__assert_fail@plt+0x30a8>
   1486c:	bl	1156c <__errno_location@plt>
   14870:	ldr	r4, [r0]
   14874:	mov	r2, #5
   14878:	ldr	r1, [pc, #424]	; 14a28 <__assert_fail@plt+0x3324>
   1487c:	mov	r0, #0
   14880:	bl	113bc <dcgettext@plt>
   14884:	mov	r6, r0
   14888:	mov	r1, r5
   1488c:	mov	r0, #4
   14890:	bl	19c24 <__assert_fail@plt+0x8520>
   14894:	mov	r3, r0
   14898:	mov	r2, r6
   1489c:	mov	r1, r4
   148a0:	mov	r0, #0
   148a4:	bl	11494 <error@plt>
   148a8:	mov	r5, #0
   148ac:	b	149a0 <__assert_fail@plt+0x329c>
   148b0:	bl	1156c <__errno_location@plt>
   148b4:	ldr	r4, [r0]
   148b8:	mov	r2, #5
   148bc:	ldr	r1, [pc, #356]	; 14a28 <__assert_fail@plt+0x3324>
   148c0:	mov	r0, #0
   148c4:	bl	113bc <dcgettext@plt>
   148c8:	mov	r6, r0
   148cc:	mov	r1, r5
   148d0:	mov	r0, #4
   148d4:	bl	19c24 <__assert_fail@plt+0x8520>
   148d8:	mov	r3, r0
   148dc:	mov	r2, r6
   148e0:	mov	r1, r4
   148e4:	mov	r0, #0
   148e8:	bl	11494 <error@plt>
   148ec:	mov	r5, #0
   148f0:	b	149a0 <__assert_fail@plt+0x329c>
   148f4:	bl	1156c <__errno_location@plt>
   148f8:	ldr	r4, [r0]
   148fc:	mov	r2, #5
   14900:	ldr	r1, [pc, #292]	; 14a2c <__assert_fail@plt+0x3328>
   14904:	mov	r0, #0
   14908:	bl	113bc <dcgettext@plt>
   1490c:	mov	r6, r0
   14910:	mov	r1, r5
   14914:	mov	r0, #4
   14918:	bl	19c24 <__assert_fail@plt+0x8520>
   1491c:	mov	r3, r0
   14920:	mov	r2, r6
   14924:	mov	r1, r4
   14928:	mov	r0, #0
   1492c:	bl	11494 <error@plt>
   14930:	mov	r5, #0
   14934:	b	14978 <__assert_fail@plt+0x3274>
   14938:	bl	1156c <__errno_location@plt>
   1493c:	ldr	r4, [r0]
   14940:	mov	r2, #5
   14944:	ldr	r1, [pc, #228]	; 14a30 <__assert_fail@plt+0x332c>
   14948:	mov	r0, #0
   1494c:	bl	113bc <dcgettext@plt>
   14950:	mov	r5, r0
   14954:	ldr	r1, [pc, #196]	; 14a20 <__assert_fail@plt+0x331c>
   14958:	mov	r0, #4
   1495c:	bl	19c24 <__assert_fail@plt+0x8520>
   14960:	mov	r3, r0
   14964:	mov	r2, r5
   14968:	mov	r1, r4
   1496c:	mov	r0, #0
   14970:	bl	11494 <error@plt>
   14974:	mov	r5, #0
   14978:	bl	1156c <__errno_location@plt>
   1497c:	mov	r4, r0
   14980:	ldr	r6, [r0]
   14984:	sub	r0, fp, #28
   14988:	bl	19ec0 <__assert_fail@plt+0x87bc>
   1498c:	cmp	r0, #0
   14990:	bne	149f8 <__assert_fail@plt+0x32f4>
   14994:	sub	r0, fp, #28
   14998:	bl	19ee8 <__assert_fail@plt+0x87e4>
   1499c:	str	r6, [r4]
   149a0:	mov	r0, r5
   149a4:	sub	sp, fp, #16
   149a8:	pop	{r4, r5, r6, fp, pc}
   149ac:	bl	1156c <__errno_location@plt>
   149b0:	ldr	r4, [r0]
   149b4:	mov	r2, #5
   149b8:	ldr	r1, [pc, #104]	; 14a28 <__assert_fail@plt+0x3324>
   149bc:	mov	r0, #0
   149c0:	bl	113bc <dcgettext@plt>
   149c4:	mov	r5, r0
   149c8:	ldr	r1, [pc, #80]	; 14a20 <__assert_fail@plt+0x331c>
   149cc:	mov	r0, #4
   149d0:	bl	19c24 <__assert_fail@plt+0x8520>
   149d4:	mov	r3, r0
   149d8:	mov	r2, r5
   149dc:	mov	r1, r4
   149e0:	mov	r0, #0
   149e4:	bl	11494 <error@plt>
   149e8:	b	14974 <__assert_fail@plt+0x3270>
   149ec:	bl	1abc8 <__assert_fail@plt+0x94c4>
   149f0:	mov	r5, r0
   149f4:	b	14978 <__assert_fail@plt+0x3274>
   149f8:	ldr	r4, [r4]
   149fc:	mov	r2, #5
   14a00:	ldr	r1, [pc, #44]	; 14a34 <__assert_fail@plt+0x3330>
   14a04:	mov	r0, #0
   14a08:	bl	113bc <dcgettext@plt>
   14a0c:	mov	r2, r0
   14a10:	mov	r1, r4
   14a14:	mov	r0, #1
   14a18:	bl	11494 <error@plt>
   14a1c:	andeq	lr, r1, r8, asr #7
   14a20:	strdeq	lr, [r1], -r4
   14a24:	andeq	lr, r1, r8, lsl #7
   14a28:	andeq	lr, r1, r8, lsr #7
   14a2c:	andeq	lr, r1, ip, asr #7
   14a30:	strdeq	lr, [r1], -r8
   14a34:	andeq	lr, r1, r8, lsl #8
   14a38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a3c:	sub	sp, sp, #3232	; 0xca0
   14a40:	sub	sp, sp, #12
   14a44:	and	fp, r1, #3
   14a48:	sub	r3, fp, #1
   14a4c:	tst	r3, fp
   14a50:	bne	14af4 <__assert_fail@plt+0x33f0>
   14a54:	mov	r4, r0
   14a58:	mov	r6, r1
   14a5c:	cmp	r0, #0
   14a60:	beq	14b08 <__assert_fail@plt+0x3404>
   14a64:	ldrb	r1, [r0]
   14a68:	cmp	r1, #0
   14a6c:	beq	14b1c <__assert_fail@plt+0x3418>
   14a70:	add	r3, sp, #152	; 0x98
   14a74:	str	r3, [sp, #144]	; 0x90
   14a78:	mov	r3, #1024	; 0x400
   14a7c:	str	r3, [sp, #148]	; 0x94
   14a80:	add	r2, sp, #1184	; 0x4a0
   14a84:	str	r2, [sp, #1176]	; 0x498
   14a88:	str	r3, [sp, #1180]	; 0x49c
   14a8c:	add	r2, sp, #2208	; 0x8a0
   14a90:	add	r2, r2, #8
   14a94:	str	r2, [sp, #2208]	; 0x8a0
   14a98:	str	r3, [sp, #2212]	; 0x8a4
   14a9c:	cmp	r1, #47	; 0x2f
   14aa0:	beq	14b48 <__assert_fail@plt+0x3444>
   14aa4:	add	r5, sp, #2208	; 0x8a0
   14aa8:	add	r5, r5, #8
   14aac:	sub	r7, r5, #8
   14ab0:	ldr	r1, [sp, #2212]	; 0x8a4
   14ab4:	mov	r0, r5
   14ab8:	bl	11524 <getcwd@plt>
   14abc:	cmp	r0, #0
   14ac0:	bne	14b34 <__assert_fail@plt+0x3430>
   14ac4:	bl	1156c <__errno_location@plt>
   14ac8:	ldr	r3, [r0]
   14acc:	cmp	r3, #12
   14ad0:	beq	14b30 <__assert_fail@plt+0x342c>
   14ad4:	cmp	r3, #34	; 0x22
   14ad8:	bne	15130 <__assert_fail@plt+0x3a2c>
   14adc:	mov	r0, r7
   14ae0:	bl	19f54 <__assert_fail@plt+0x8850>
   14ae4:	cmp	r0, #0
   14ae8:	beq	14b30 <__assert_fail@plt+0x342c>
   14aec:	ldr	r5, [sp, #2208]	; 0x8a0
   14af0:	b	14ab0 <__assert_fail@plt+0x33ac>
   14af4:	bl	1156c <__errno_location@plt>
   14af8:	mov	r3, #22
   14afc:	str	r3, [r0]
   14b00:	mov	r0, #0
   14b04:	b	15190 <__assert_fail@plt+0x3a8c>
   14b08:	bl	1156c <__errno_location@plt>
   14b0c:	mov	r3, #22
   14b10:	str	r3, [r0]
   14b14:	mov	r0, #0
   14b18:	b	15190 <__assert_fail@plt+0x3a8c>
   14b1c:	bl	1156c <__errno_location@plt>
   14b20:	mov	r3, #2
   14b24:	str	r3, [r0]
   14b28:	mov	r0, #0
   14b2c:	b	15190 <__assert_fail@plt+0x3a8c>
   14b30:	bl	1ab88 <__assert_fail@plt+0x9484>
   14b34:	mov	r1, #0
   14b38:	mov	r0, r5
   14b3c:	bl	113f8 <rawmemchr@plt>
   14b40:	mov	r1, r0
   14b44:	b	14b60 <__assert_fail@plt+0x345c>
   14b48:	add	r1, sp, #3232	; 0xca0
   14b4c:	add	r1, r1, #8
   14b50:	mov	r3, #47	; 0x2f
   14b54:	strb	r3, [r1, #-1024]!	; 0xfffffc00
   14b58:	mov	r5, r1
   14b5c:	add	r1, r1, #1
   14b60:	and	r3, r6, #4
   14b64:	str	r3, [sp, #12]
   14b68:	mov	r3, #0
   14b6c:	str	r3, [sp, #28]
   14b70:	str	r3, [sp, #20]
   14b74:	str	r3, [sp, #24]
   14b78:	ldrb	r2, [r4]
   14b7c:	cmp	r2, #0
   14b80:	beq	150bc <__assert_fail@plt+0x39b8>
   14b84:	cmp	r2, #47	; 0x2f
   14b88:	bne	14ba8 <__assert_fail@plt+0x34a4>
   14b8c:	ldrb	r2, [r4, #1]!
   14b90:	cmp	r2, #47	; 0x2f
   14b94:	beq	14b8c <__assert_fail@plt+0x3488>
   14b98:	mov	r3, r2
   14b9c:	cmp	r2, #47	; 0x2f
   14ba0:	cmpne	r2, #0
   14ba4:	beq	14cb8 <__assert_fail@plt+0x35b4>
   14ba8:	mov	r6, r4
   14bac:	ldrb	r3, [r6, #1]!
   14bb0:	cmp	r3, #0
   14bb4:	cmpne	r3, #47	; 0x2f
   14bb8:	bne	14bac <__assert_fail@plt+0x34a8>
   14bbc:	str	r6, [sp, #16]
   14bc0:	subs	r8, r6, r4
   14bc4:	beq	150bc <__assert_fail@plt+0x39b8>
   14bc8:	cmp	r2, #46	; 0x2e
   14bcc:	movne	r3, #0
   14bd0:	moveq	r3, #1
   14bd4:	cmp	r8, #1
   14bd8:	cmpeq	r2, #46	; 0x2e
   14bdc:	beq	150b4 <__assert_fail@plt+0x39b0>
   14be0:	cmp	r8, #2
   14be4:	movne	r3, #0
   14be8:	andeq	r3, r3, #1
   14bec:	cmp	r3, #0
   14bf0:	bne	14cc0 <__assert_fail@plt+0x35bc>
   14bf4:	ldrb	r3, [r1, #-1]
   14bf8:	cmp	r3, #47	; 0x2f
   14bfc:	addne	r0, r1, #1
   14c00:	movne	r3, #47	; 0x2f
   14c04:	strbne	r3, [r1]
   14c08:	moveq	r0, r1
   14c0c:	mov	r2, r0
   14c10:	add	r9, r8, #2
   14c14:	ldr	r3, [sp, #2212]	; 0x8a4
   14c18:	add	r3, r5, r3
   14c1c:	sub	r3, r3, r0
   14c20:	cmp	r3, r9
   14c24:	bcs	14c58 <__assert_fail@plt+0x3554>
   14c28:	sub	r7, r2, r5
   14c2c:	add	r0, sp, #2208	; 0x8a0
   14c30:	bl	19fc4 <__assert_fail@plt+0x88c0>
   14c34:	cmp	r0, #0
   14c38:	beq	14d18 <__assert_fail@plt+0x3614>
   14c3c:	ldr	r5, [sp, #2208]	; 0x8a0
   14c40:	add	r0, r5, r7
   14c44:	mov	r2, r0
   14c48:	ldr	r3, [sp, #2212]	; 0x8a4
   14c4c:	sub	r3, r3, r7
   14c50:	cmp	r3, r9
   14c54:	bcc	14c28 <__assert_fail@plt+0x3524>
   14c58:	mov	r2, r8
   14c5c:	mov	r1, r4
   14c60:	bl	11500 <mempcpy@plt>
   14c64:	str	r0, [sp, #32]
   14c68:	mov	r3, #0
   14c6c:	strb	r3, [r0]
   14c70:	ldr	r3, [sp, #12]
   14c74:	cmp	r3, #0
   14c78:	bne	14f38 <__assert_fail@plt+0x3834>
   14c7c:	ldr	sl, [sp, #1176]	; 0x498
   14c80:	ldr	r7, [sp, #1180]	; 0x49c
   14c84:	sub	r7, r7, #1
   14c88:	mov	r2, r7
   14c8c:	mov	r1, sl
   14c90:	mov	r0, r5
   14c94:	bl	11428 <readlink@plt>
   14c98:	cmp	r7, r0
   14c9c:	bgt	14d1c <__assert_fail@plt+0x3618>
   14ca0:	add	r0, sp, #1168	; 0x490
   14ca4:	add	r0, r0, #8
   14ca8:	bl	19f54 <__assert_fail@plt+0x8850>
   14cac:	cmp	r0, #0
   14cb0:	bne	14c7c <__assert_fail@plt+0x3578>
   14cb4:	bl	1ab88 <__assert_fail@plt+0x9484>
   14cb8:	mov	r6, r4
   14cbc:	b	14bbc <__assert_fail@plt+0x34b8>
   14cc0:	ldrb	r3, [r4, #1]
   14cc4:	cmp	r3, #46	; 0x2e
   14cc8:	bne	14bf4 <__assert_fail@plt+0x34f0>
   14ccc:	add	r3, r5, #1
   14cd0:	cmp	r1, r3
   14cd4:	bls	150b4 <__assert_fail@plt+0x39b0>
   14cd8:	sub	r3, r1, #1
   14cdc:	cmp	r5, r3
   14ce0:	bcs	15064 <__assert_fail@plt+0x3960>
   14ce4:	ldrb	r2, [r1, #-2]
   14ce8:	cmp	r2, #47	; 0x2f
   14cec:	moveq	r1, r3
   14cf0:	beq	150b4 <__assert_fail@plt+0x39b0>
   14cf4:	sub	r3, r1, #2
   14cf8:	mov	r2, r5
   14cfc:	mov	r1, r3
   14d00:	cmp	r2, r3
   14d04:	beq	150b4 <__assert_fail@plt+0x39b0>
   14d08:	ldrb	r0, [r3, #-1]!
   14d0c:	cmp	r0, #47	; 0x2f
   14d10:	bne	14cfc <__assert_fail@plt+0x35f8>
   14d14:	b	150b4 <__assert_fail@plt+0x39b0>
   14d18:	bl	1ab88 <__assert_fail@plt+0x9484>
   14d1c:	mov	r9, r0
   14d20:	cmp	r0, #0
   14d24:	blt	14f38 <__assert_fail@plt+0x3834>
   14d28:	ldr	r3, [sp, #24]
   14d2c:	cmp	r3, #19
   14d30:	addle	r3, r3, #1
   14d34:	strle	r3, [sp, #24]
   14d38:	ble	14e0c <__assert_fail@plt+0x3708>
   14d3c:	ldrb	r3, [r4]
   14d40:	cmp	r3, #0
   14d44:	beq	14e0c <__assert_fail@plt+0x3708>
   14d48:	rsb	r8, r8, #0
   14d4c:	mov	r3, #0
   14d50:	ldr	r7, [sp, #32]
   14d54:	strb	r3, [r7, r8]
   14d58:	ldrb	r1, [r5]
   14d5c:	add	r2, sp, #40	; 0x28
   14d60:	ldr	r3, [pc, #1108]	; 151bc <__assert_fail@plt+0x3ab8>
   14d64:	cmp	r1, #0
   14d68:	movne	r3, r5
   14d6c:	mov	r1, r3
   14d70:	mov	r0, #3
   14d74:	bl	116bc <__xstat64@plt>
   14d78:	cmp	r0, #0
   14d7c:	bne	14dc0 <__assert_fail@plt+0x36bc>
   14d80:	ldrb	r3, [r4]
   14d84:	strb	r3, [r7, r8]
   14d88:	ldr	r3, [sp, #28]
   14d8c:	cmp	r3, #0
   14d90:	beq	14dd0 <__assert_fail@plt+0x36cc>
   14d94:	add	r2, sp, #40	; 0x28
   14d98:	mov	r1, r4
   14d9c:	ldr	r0, [sp, #28]
   14da0:	bl	15434 <__assert_fail@plt+0x3d30>
   14da4:	cmp	r0, #0
   14da8:	beq	14dfc <__assert_fail@plt+0x36f8>
   14dac:	cmp	fp, #2
   14db0:	beq	14f10 <__assert_fail@plt+0x380c>
   14db4:	bl	1156c <__errno_location@plt>
   14db8:	mov	r3, #40	; 0x28
   14dbc:	str	r3, [r0]
   14dc0:	mov	r6, r5
   14dc4:	ldr	r5, [sp, #32]
   14dc8:	mov	r4, #1
   14dcc:	b	1511c <__assert_fail@plt+0x3a18>
   14dd0:	ldr	r3, [pc, #1000]	; 151c0 <__assert_fail@plt+0x3abc>
   14dd4:	str	r3, [sp]
   14dd8:	ldr	r3, [pc, #996]	; 151c4 <__assert_fail@plt+0x3ac0>
   14ddc:	ldr	r2, [pc, #996]	; 151c8 <__assert_fail@plt+0x3ac4>
   14de0:	mov	r1, #0
   14de4:	mov	r0, #7
   14de8:	bl	15f50 <__assert_fail@plt+0x484c>
   14dec:	subs	r3, r0, #0
   14df0:	str	r3, [sp, #28]
   14df4:	bne	14d94 <__assert_fail@plt+0x3690>
   14df8:	bl	1ab88 <__assert_fail@plt+0x9484>
   14dfc:	add	r2, sp, #40	; 0x28
   14e00:	mov	r1, r4
   14e04:	ldr	r0, [sp, #28]
   14e08:	bl	153cc <__assert_fail@plt+0x3cc8>
   14e0c:	mov	r3, #0
   14e10:	strb	r3, [sl, r9]
   14e14:	ldr	r8, [sp, #144]	; 0x90
   14e18:	ldr	r3, [sp, #20]
   14e1c:	cmp	r3, #0
   14e20:	ldrne	r3, [sp, #16]
   14e24:	subne	r3, r3, r8
   14e28:	moveq	r3, #0
   14e2c:	str	r3, [sp, #36]	; 0x24
   14e30:	mov	r0, r6
   14e34:	bl	1153c <strlen@plt>
   14e38:	mov	r7, r0
   14e3c:	adds	r4, r9, r0
   14e40:	bcs	14f18 <__assert_fail@plt+0x3814>
   14e44:	ldr	r3, [sp, #148]	; 0x94
   14e48:	cmp	r3, r4
   14e4c:	addls	r3, sp, #152	; 0x98
   14e50:	addls	r3, sp, #144	; 0x90
   14e54:	strls	r3, [sp, #16]
   14e58:	bhi	14e7c <__assert_fail@plt+0x3778>
   14e5c:	ldr	r0, [sp, #16]
   14e60:	bl	19fc4 <__assert_fail@plt+0x88c0>
   14e64:	cmp	r0, #0
   14e68:	beq	14f1c <__assert_fail@plt+0x3818>
   14e6c:	ldr	r3, [sp, #148]	; 0x94
   14e70:	cmp	r4, r3
   14e74:	bcs	14e5c <__assert_fail@plt+0x3758>
   14e78:	ldr	r8, [sp, #144]	; 0x90
   14e7c:	ldr	r3, [sp, #20]
   14e80:	cmp	r3, #0
   14e84:	ldrne	r3, [sp, #36]	; 0x24
   14e88:	addne	r6, r8, r3
   14e8c:	add	r2, r7, #1
   14e90:	mov	r1, r6
   14e94:	add	r0, r8, r9
   14e98:	bl	11344 <memmove@plt>
   14e9c:	mov	r2, r9
   14ea0:	mov	r1, sl
   14ea4:	mov	r0, r8
   14ea8:	bl	11374 <memcpy@plt>
   14eac:	ldrb	r3, [sl]
   14eb0:	cmp	r3, #47	; 0x2f
   14eb4:	beq	14f20 <__assert_fail@plt+0x381c>
   14eb8:	add	r3, r5, #1
   14ebc:	ldr	r2, [sp, #32]
   14ec0:	cmp	r2, r3
   14ec4:	bls	1506c <__assert_fail@plt+0x3968>
   14ec8:	sub	r1, r2, #1
   14ecc:	cmp	r1, r5
   14ed0:	bls	15080 <__assert_fail@plt+0x397c>
   14ed4:	ldrb	r3, [r2, #-2]
   14ed8:	cmp	r3, #47	; 0x2f
   14edc:	beq	15090 <__assert_fail@plt+0x398c>
   14ee0:	sub	r3, r2, #2
   14ee4:	mov	ip, r5
   14ee8:	mov	r1, r3
   14eec:	cmp	r3, ip
   14ef0:	beq	150a0 <__assert_fail@plt+0x399c>
   14ef4:	ldrb	r2, [r3, #-1]!
   14ef8:	cmp	r2, #47	; 0x2f
   14efc:	bne	14ee8 <__assert_fail@plt+0x37e4>
   14f00:	mov	r6, r0
   14f04:	mov	r3, #1
   14f08:	str	r3, [sp, #20]
   14f0c:	b	150b4 <__assert_fail@plt+0x39b0>
   14f10:	ldr	r1, [sp, #32]
   14f14:	b	150b4 <__assert_fail@plt+0x39b0>
   14f18:	bl	1ab88 <__assert_fail@plt+0x9484>
   14f1c:	bl	1ab88 <__assert_fail@plt+0x9484>
   14f20:	add	r1, r5, #1
   14f24:	strb	r3, [r5]
   14f28:	mov	r6, r0
   14f2c:	mov	r3, #1
   14f30:	str	r3, [sp, #20]
   14f34:	b	150b4 <__assert_fail@plt+0x39b0>
   14f38:	cmp	fp, #2
   14f3c:	ldreq	r1, [sp, #32]
   14f40:	beq	150b4 <__assert_fail@plt+0x39b0>
   14f44:	mov	r3, r6
   14f48:	ldrb	r2, [r3]
   14f4c:	cmp	r2, #47	; 0x2f
   14f50:	beq	14fb4 <__assert_fail@plt+0x38b0>
   14f54:	ldr	r3, [sp, #12]
   14f58:	cmp	r3, #0
   14f5c:	bne	1502c <__assert_fail@plt+0x3928>
   14f60:	bl	1156c <__errno_location@plt>
   14f64:	ldr	r4, [r0]
   14f68:	subs	r4, r4, #22
   14f6c:	movne	r4, #1
   14f70:	cmp	r4, #0
   14f74:	beq	150b0 <__assert_fail@plt+0x39ac>
   14f78:	cmp	fp, #1
   14f7c:	bne	150ec <__assert_fail@plt+0x39e8>
   14f80:	bl	1156c <__errno_location@plt>
   14f84:	ldr	r3, [r0]
   14f88:	cmp	r3, #2
   14f8c:	bne	150f8 <__assert_fail@plt+0x39f4>
   14f90:	ldr	r1, [pc, #564]	; 151cc <__assert_fail@plt+0x3ac8>
   14f94:	mov	r0, r6
   14f98:	bl	116f8 <strspn@plt>
   14f9c:	ldrb	r3, [r6, r0]
   14fa0:	cmp	r3, #0
   14fa4:	bne	15104 <__assert_fail@plt+0x3a00>
   14fa8:	ldr	r1, [sp, #32]
   14fac:	b	150b4 <__assert_fail@plt+0x39b0>
   14fb0:	mov	r3, r1
   14fb4:	add	r1, r3, #1
   14fb8:	ldrb	r2, [r3, #1]
   14fbc:	cmp	r2, #47	; 0x2f
   14fc0:	beq	14fb0 <__assert_fail@plt+0x38ac>
   14fc4:	add	r3, r3, #2
   14fc8:	cmp	r2, #0
   14fcc:	beq	14ffc <__assert_fail@plt+0x38f8>
   14fd0:	cmp	r2, #46	; 0x2e
   14fd4:	bne	14f54 <__assert_fail@plt+0x3850>
   14fd8:	ldrb	r2, [r1, #1]
   14fdc:	cmp	r2, #0
   14fe0:	beq	14ffc <__assert_fail@plt+0x38f8>
   14fe4:	cmp	r2, #46	; 0x2e
   14fe8:	bne	14f48 <__assert_fail@plt+0x3844>
   14fec:	ldrb	r2, [r1, #2]
   14ff0:	cmp	r2, #47	; 0x2f
   14ff4:	cmpne	r2, #0
   14ff8:	bne	14f48 <__assert_fail@plt+0x3844>
   14ffc:	ldr	r3, [pc, #456]	; 151cc <__assert_fail@plt+0x3ac8>
   15000:	ldrh	r3, [r3]
   15004:	ldr	r2, [sp, #32]
   15008:	strh	r3, [r2]
   1500c:	mov	r3, #512	; 0x200
   15010:	mov	r2, #0
   15014:	mov	r1, r5
   15018:	mvn	r0, #99	; 0x63
   1501c:	bl	1135c <faccessat@plt>
   15020:	adds	r4, r0, #0
   15024:	movne	r4, #1
   15028:	b	14f70 <__assert_fail@plt+0x386c>
   1502c:	ldrb	r3, [r6]
   15030:	cmp	r3, #0
   15034:	movne	r0, #0
   15038:	beq	15044 <__assert_fail@plt+0x3940>
   1503c:	mov	r4, r0
   15040:	b	14f70 <__assert_fail@plt+0x386c>
   15044:	mov	r3, #512	; 0x200
   15048:	mov	r2, #0
   1504c:	mov	r1, r5
   15050:	mvn	r0, #99	; 0x63
   15054:	bl	1135c <faccessat@plt>
   15058:	adds	r0, r0, #0
   1505c:	movne	r0, #1
   15060:	b	1503c <__assert_fail@plt+0x3938>
   15064:	mov	r1, r3
   15068:	b	150b4 <__assert_fail@plt+0x39b0>
   1506c:	mov	r6, r0
   15070:	ldr	r1, [sp, #32]
   15074:	mov	r3, #1
   15078:	str	r3, [sp, #20]
   1507c:	b	150b4 <__assert_fail@plt+0x39b0>
   15080:	mov	r6, r0
   15084:	mov	r3, #1
   15088:	str	r3, [sp, #20]
   1508c:	b	150b4 <__assert_fail@plt+0x39b0>
   15090:	mov	r6, r0
   15094:	mov	r3, #1
   15098:	str	r3, [sp, #20]
   1509c:	b	150b4 <__assert_fail@plt+0x39b0>
   150a0:	mov	r6, r0
   150a4:	mov	r3, #1
   150a8:	str	r3, [sp, #20]
   150ac:	b	150b4 <__assert_fail@plt+0x39b0>
   150b0:	ldr	r1, [sp, #32]
   150b4:	mov	r4, r6
   150b8:	b	14b78 <__assert_fail@plt+0x3474>
   150bc:	add	r3, r5, #1
   150c0:	cmp	r1, r3
   150c4:	bls	15110 <__assert_fail@plt+0x3a0c>
   150c8:	ldrb	r3, [r1, #-1]
   150cc:	cmp	r3, #47	; 0x2f
   150d0:	moveq	r6, r5
   150d4:	subeq	r5, r1, #1
   150d8:	moveq	r4, #0
   150dc:	movne	r6, r5
   150e0:	movne	r5, r1
   150e4:	movne	r4, #0
   150e8:	b	1511c <__assert_fail@plt+0x3a18>
   150ec:	mov	r6, r5
   150f0:	ldr	r5, [sp, #32]
   150f4:	b	1511c <__assert_fail@plt+0x3a18>
   150f8:	mov	r6, r5
   150fc:	ldr	r5, [sp, #32]
   15100:	b	1511c <__assert_fail@plt+0x3a18>
   15104:	mov	r6, r5
   15108:	ldr	r5, [sp, #32]
   1510c:	b	1511c <__assert_fail@plt+0x3a18>
   15110:	mov	r6, r5
   15114:	mov	r5, r1
   15118:	mov	r4, #0
   1511c:	ldr	r0, [sp, #28]
   15120:	cmp	r0, #0
   15124:	beq	15138 <__assert_fail@plt+0x3a34>
   15128:	bl	160e0 <__assert_fail@plt+0x49dc>
   1512c:	b	15138 <__assert_fail@plt+0x3a34>
   15130:	mov	r6, r5
   15134:	mov	r4, #1
   15138:	ldr	r0, [sp, #144]	; 0x90
   1513c:	add	r3, sp, #152	; 0x98
   15140:	cmp	r0, r3
   15144:	beq	1514c <__assert_fail@plt+0x3a48>
   15148:	bl	15478 <__assert_fail@plt+0x3d74>
   1514c:	add	r3, sp, #3232	; 0xca0
   15150:	add	r3, r3, #8
   15154:	ldr	r0, [r3, #-2064]!	; 0xfffff7f0
   15158:	add	r3, r3, #8
   1515c:	cmp	r0, r3
   15160:	beq	15168 <__assert_fail@plt+0x3a64>
   15164:	bl	15478 <__assert_fail@plt+0x3d74>
   15168:	cmp	r4, #0
   1516c:	beq	1519c <__assert_fail@plt+0x3a98>
   15170:	ldr	r0, [sp, #2208]	; 0x8a0
   15174:	add	r3, sp, #2208	; 0x8a0
   15178:	add	r3, r3, #8
   1517c:	cmp	r0, r3
   15180:	moveq	r0, #0
   15184:	beq	15190 <__assert_fail@plt+0x3a8c>
   15188:	bl	15478 <__assert_fail@plt+0x3d74>
   1518c:	mov	r0, #0
   15190:	add	sp, sp, #3232	; 0xca0
   15194:	add	sp, sp, #12
   15198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1519c:	mov	r3, #0
   151a0:	strb	r3, [r5], #1
   151a4:	sub	r1, r5, r6
   151a8:	add	r0, sp, #2208	; 0x8a0
   151ac:	bl	19f0c <__assert_fail@plt+0x8808>
   151b0:	cmp	r0, #0
   151b4:	bne	15190 <__assert_fail@plt+0x3a8c>
   151b8:	bl	1ab88 <__assert_fail@plt+0x9484>
   151bc:	andeq	lr, r1, r8, asr #7
   151c0:	andeq	r6, r1, r4, ror r6
   151c4:	andeq	r6, r1, r0, lsr #12
   151c8:	andeq	r6, r1, r8, ror #11
   151cc:	andeq	lr, r1, r8, asr #8
   151d0:	ldr	r3, [pc, #4]	; 151dc <__assert_fail@plt+0x3ad8>
   151d4:	str	r0, [r3]
   151d8:	bx	lr
   151dc:			; <UNDEFINED> instruction: 0x0002f3b8
   151e0:	ldr	r3, [pc, #4]	; 151ec <__assert_fail@plt+0x3ae8>
   151e4:	strb	r0, [r3, #4]
   151e8:	bx	lr
   151ec:			; <UNDEFINED> instruction: 0x0002f3b8
   151f0:	push	{r4, r5, r6, lr}
   151f4:	sub	sp, sp, #8
   151f8:	ldr	r3, [pc, #200]	; 152c8 <__assert_fail@plt+0x3bc4>
   151fc:	ldr	r0, [r3]
   15200:	bl	1c248 <__assert_fail@plt+0xab44>
   15204:	cmp	r0, #0
   15208:	beq	1522c <__assert_fail@plt+0x3b28>
   1520c:	ldr	r3, [pc, #184]	; 152cc <__assert_fail@plt+0x3bc8>
   15210:	ldrb	r3, [r3, #4]
   15214:	cmp	r3, #0
   15218:	beq	15248 <__assert_fail@plt+0x3b44>
   1521c:	bl	1156c <__errno_location@plt>
   15220:	ldr	r3, [r0]
   15224:	cmp	r3, #32
   15228:	bne	15248 <__assert_fail@plt+0x3b44>
   1522c:	ldr	r3, [pc, #156]	; 152d0 <__assert_fail@plt+0x3bcc>
   15230:	ldr	r0, [r3]
   15234:	bl	1c248 <__assert_fail@plt+0xab44>
   15238:	cmp	r0, #0
   1523c:	bne	152bc <__assert_fail@plt+0x3bb8>
   15240:	add	sp, sp, #8
   15244:	pop	{r4, r5, r6, pc}
   15248:	mov	r2, #5
   1524c:	ldr	r1, [pc, #128]	; 152d4 <__assert_fail@plt+0x3bd0>
   15250:	mov	r0, #0
   15254:	bl	113bc <dcgettext@plt>
   15258:	mov	r4, r0
   1525c:	ldr	r3, [pc, #104]	; 152cc <__assert_fail@plt+0x3bc8>
   15260:	ldr	r5, [r3]
   15264:	cmp	r5, #0
   15268:	beq	152a0 <__assert_fail@plt+0x3b9c>
   1526c:	bl	1156c <__errno_location@plt>
   15270:	ldr	r6, [r0]
   15274:	mov	r0, r5
   15278:	bl	19cd0 <__assert_fail@plt+0x85cc>
   1527c:	str	r4, [sp]
   15280:	mov	r3, r0
   15284:	ldr	r2, [pc, #76]	; 152d8 <__assert_fail@plt+0x3bd4>
   15288:	mov	r1, r6
   1528c:	mov	r0, #0
   15290:	bl	11494 <error@plt>
   15294:	ldr	r3, [pc, #64]	; 152dc <__assert_fail@plt+0x3bd8>
   15298:	ldr	r0, [r3]
   1529c:	bl	11368 <_exit@plt>
   152a0:	bl	1156c <__errno_location@plt>
   152a4:	mov	r3, r4
   152a8:	ldr	r2, [pc, #48]	; 152e0 <__assert_fail@plt+0x3bdc>
   152ac:	ldr	r1, [r0]
   152b0:	mov	r0, #0
   152b4:	bl	11494 <error@plt>
   152b8:	b	15294 <__assert_fail@plt+0x3b90>
   152bc:	ldr	r3, [pc, #24]	; 152dc <__assert_fail@plt+0x3bd8>
   152c0:	ldr	r0, [r3]
   152c4:	bl	11368 <_exit@plt>
   152c8:	andeq	pc, r2, r4, lsr r3	; <UNPREDICTABLE>
   152cc:			; <UNDEFINED> instruction: 0x0002f3b8
   152d0:	andeq	pc, r2, r0, lsr r3	; <UNPREDICTABLE>
   152d4:	andeq	lr, r1, ip, asr #8
   152d8:	andeq	lr, r1, r8, asr r4
   152dc:	ldrdeq	pc, [r2], -r4
   152e0:	andeq	lr, r1, ip, asr r4
   152e4:	push	{r4, lr}
   152e8:	bl	15370 <__assert_fail@plt+0x3c6c>
   152ec:	cmp	r0, #0
   152f0:	popne	{r4, pc}
   152f4:	bl	1ab88 <__assert_fail@plt+0x9484>
   152f8:	push	{r4, r5, r6, lr}
   152fc:	mov	r5, r0
   15300:	ldrb	r4, [r0]
   15304:	cmp	r4, #47	; 0x2f
   15308:	movne	r4, #0
   1530c:	moveq	r4, #1
   15310:	bl	1be90 <__assert_fail@plt+0xa78c>
   15314:	sub	r0, r0, r5
   15318:	cmp	r0, r4
   1531c:	bls	15354 <__assert_fail@plt+0x3c50>
   15320:	sub	r3, r0, #1
   15324:	add	r2, r5, r3
   15328:	ldrb	r1, [r5, r3]
   1532c:	cmp	r1, #47	; 0x2f
   15330:	bne	1535c <__assert_fail@plt+0x3c58>
   15334:	cmp	r4, r3
   15338:	beq	15368 <__assert_fail@plt+0x3c64>
   1533c:	sub	r0, r3, #1
   15340:	ldrb	r1, [r2, #-1]!
   15344:	cmp	r1, #47	; 0x2f
   15348:	bne	15364 <__assert_fail@plt+0x3c60>
   1534c:	mov	r3, r0
   15350:	b	15334 <__assert_fail@plt+0x3c30>
   15354:	mov	r4, r0
   15358:	b	15368 <__assert_fail@plt+0x3c64>
   1535c:	mov	r4, r0
   15360:	b	15368 <__assert_fail@plt+0x3c64>
   15364:	mov	r4, r3
   15368:	mov	r0, r4
   1536c:	pop	{r4, r5, r6, pc}
   15370:	push	{r4, r5, r6, r7, r8, lr}
   15374:	mov	r7, r0
   15378:	bl	152f8 <__assert_fail@plt+0x3bf4>
   1537c:	mov	r4, r0
   15380:	add	r6, r0, #1
   15384:	cmp	r0, #0
   15388:	movne	r0, r6
   1538c:	addeq	r0, r6, #1
   15390:	bl	1b268 <__assert_fail@plt+0x9b64>
   15394:	subs	r5, r0, #0
   15398:	beq	153c4 <__assert_fail@plt+0x3cc0>
   1539c:	mov	r2, r4
   153a0:	mov	r1, r7
   153a4:	mov	r0, r5
   153a8:	bl	11374 <memcpy@plt>
   153ac:	cmp	r4, #0
   153b0:	moveq	r3, #46	; 0x2e
   153b4:	strbeq	r3, [r5, r4]
   153b8:	moveq	r4, r6
   153bc:	mov	r3, #0
   153c0:	strb	r3, [r5, r4]
   153c4:	mov	r0, r5
   153c8:	pop	{r4, r5, r6, r7, r8, pc}
   153cc:	push	{r4, r5, r6, r7, r8, lr}
   153d0:	subs	r7, r0, #0
   153d4:	popeq	{r4, r5, r6, r7, r8, pc}
   153d8:	mov	r5, r2
   153dc:	mov	r6, r1
   153e0:	mov	r0, #24
   153e4:	bl	1a5e4 <__assert_fail@plt+0x8ee0>
   153e8:	mov	r4, r0
   153ec:	mov	r0, r6
   153f0:	bl	1ab6c <__assert_fail@plt+0x9468>
   153f4:	str	r0, [r4]
   153f8:	ldrd	r2, [r5, #96]	; 0x60
   153fc:	strd	r2, [r4, #8]
   15400:	ldrd	r2, [r5]
   15404:	strd	r2, [r4, #16]
   15408:	mov	r1, r4
   1540c:	mov	r0, r7
   15410:	bl	1649c <__assert_fail@plt+0x4d98>
   15414:	cmp	r0, #0
   15418:	beq	15430 <__assert_fail@plt+0x3d2c>
   1541c:	cmp	r4, r0
   15420:	popeq	{r4, r5, r6, r7, r8, pc}
   15424:	mov	r0, r4
   15428:	bl	16674 <__assert_fail@plt+0x4f70>
   1542c:	pop	{r4, r5, r6, r7, r8, pc}
   15430:	bl	1ab88 <__assert_fail@plt+0x9484>
   15434:	cmp	r0, #0
   15438:	beq	15470 <__assert_fail@plt+0x3d6c>
   1543c:	push	{r4, r5, lr}
   15440:	sub	sp, sp, #28
   15444:	str	r1, [sp]
   15448:	ldrd	r4, [r2, #96]	; 0x60
   1544c:	strd	r4, [sp, #8]
   15450:	ldrd	r2, [r2]
   15454:	strd	r2, [sp, #16]
   15458:	mov	r1, sp
   1545c:	bl	15c98 <__assert_fail@plt+0x4594>
   15460:	adds	r0, r0, #0
   15464:	movne	r0, #1
   15468:	add	sp, sp, #28
   1546c:	pop	{r4, r5, pc}
   15470:	mov	r0, #0
   15474:	bx	lr
   15478:	push	{r4, r5, lr}
   1547c:	sub	sp, sp, #12
   15480:	mov	r5, r0
   15484:	bl	1156c <__errno_location@plt>
   15488:	mov	r4, r0
   1548c:	ldr	r3, [r0]
   15490:	str	r3, [sp]
   15494:	str	r3, [sp, #4]
   15498:	mov	r3, #0
   1549c:	str	r3, [r0]
   154a0:	mov	r0, r5
   154a4:	bl	11350 <free@plt>
   154a8:	ldr	r3, [r4]
   154ac:	cmp	r3, #0
   154b0:	moveq	r3, #4
   154b4:	movne	r3, #0
   154b8:	add	r2, sp, #8
   154bc:	add	r3, r2, r3
   154c0:	ldr	r3, [r3, #-8]
   154c4:	str	r3, [r4]
   154c8:	add	sp, sp, #12
   154cc:	pop	{r4, r5, pc}
   154d0:	push	{r4, r5, r6, lr}
   154d4:	sub	sp, sp, #480	; 0x1e0
   154d8:	mov	r6, r0
   154dc:	mov	r4, r2
   154e0:	ldr	r3, [pc, #368]	; 15658 <__assert_fail@plt+0x3f54>
   154e4:	ldr	r3, [r3]
   154e8:	cmp	r3, #0
   154ec:	blt	15578 <__assert_fail@plt+0x3e74>
   154f0:	ldr	r3, [pc, #352]	; 15658 <__assert_fail@plt+0x3f54>
   154f4:	ldr	r5, [r3]
   154f8:	cmp	r5, #0
   154fc:	beq	155d0 <__assert_fail@plt+0x3ecc>
   15500:	mov	r1, sp
   15504:	mov	r0, r6
   15508:	bl	115a8 <statvfs64@plt>
   1550c:	cmp	r0, #0
   15510:	mvnlt	r5, #0
   15514:	blt	15644 <__assert_fail@plt+0x3f40>
   15518:	ldr	r3, [sp, #4]
   1551c:	cmp	r3, #0
   15520:	beq	155ac <__assert_fail@plt+0x3ea8>
   15524:	cmn	r3, #1
   15528:	movne	r2, #0
   1552c:	beq	155c4 <__assert_fail@plt+0x3ec0>
   15530:	str	r3, [r4]
   15534:	str	r2, [r4, #4]
   15538:	ldrd	r2, [sp, #8]
   1553c:	strd	r2, [r4, #8]
   15540:	ldrd	r2, [sp, #16]
   15544:	strd	r2, [r4, #16]
   15548:	ldr	r2, [sp, #24]
   1554c:	ldr	r3, [sp, #28]
   15550:	str	r2, [r4, #24]
   15554:	str	r3, [r4, #28]
   15558:	lsr	r3, r3, #31
   1555c:	strb	r3, [r4, #32]
   15560:	ldrd	r2, [sp, #32]
   15564:	strd	r2, [r4, #40]	; 0x28
   15568:	ldrd	r2, [sp, #40]	; 0x28
   1556c:	strd	r2, [r4, #48]	; 0x30
   15570:	mov	r5, #0
   15574:	b	15644 <__assert_fail@plt+0x3f40>
   15578:	mov	r0, sp
   1557c:	bl	113b0 <uname@plt>
   15580:	cmp	r0, #0
   15584:	movne	r0, #0
   15588:	bne	155a0 <__assert_fail@plt+0x3e9c>
   1558c:	ldr	r1, [pc, #200]	; 1565c <__assert_fail@plt+0x3f58>
   15590:	add	r0, sp, #130	; 0x82
   15594:	bl	11308 <strverscmp@plt>
   15598:	mvn	r0, r0
   1559c:	lsr	r0, r0, #31
   155a0:	ldr	r3, [pc, #176]	; 15658 <__assert_fail@plt+0x3f54>
   155a4:	str	r0, [r3]
   155a8:	b	154f0 <__assert_fail@plt+0x3dec>
   155ac:	ldr	r3, [sp]
   155b0:	cmn	r3, #1
   155b4:	movne	r2, #0
   155b8:	mvneq	r3, #0
   155bc:	moveq	r2, r3
   155c0:	b	15530 <__assert_fail@plt+0x3e2c>
   155c4:	mvn	r3, #0
   155c8:	mov	r2, r3
   155cc:	b	15530 <__assert_fail@plt+0x3e2c>
   155d0:	add	r1, sp, #392	; 0x188
   155d4:	mov	r0, r6
   155d8:	bl	11638 <statfs64@plt>
   155dc:	cmp	r0, #0
   155e0:	blt	15650 <__assert_fail@plt+0x3f4c>
   155e4:	ldr	r2, [sp, #452]	; 0x1c4
   155e8:	cmn	r2, #1
   155ec:	asrne	r3, r2, #31
   155f0:	mvneq	r2, #0
   155f4:	mvneq	r3, #0
   155f8:	strd	r2, [r4]
   155fc:	add	r3, sp, #400	; 0x190
   15600:	ldrd	r2, [r3]
   15604:	strd	r2, [r4, #8]
   15608:	add	r3, sp, #408	; 0x198
   1560c:	ldrd	r2, [r3]
   15610:	strd	r2, [r4, #16]
   15614:	ldr	r3, [sp, #420]	; 0x1a4
   15618:	ldr	r2, [sp, #416]	; 0x1a0
   1561c:	str	r2, [r4, #24]
   15620:	str	r3, [r4, #28]
   15624:	lsr	r3, r3, #31
   15628:	strb	r3, [r4, #32]
   1562c:	add	r3, sp, #424	; 0x1a8
   15630:	ldrd	r2, [r3]
   15634:	strd	r2, [r4, #40]	; 0x28
   15638:	add	r3, sp, #432	; 0x1b0
   1563c:	ldrd	r2, [r3]
   15640:	strd	r2, [r4, #48]	; 0x30
   15644:	mov	r0, r5
   15648:	add	sp, sp, #480	; 0x1e0
   1564c:	pop	{r4, r5, r6, pc}
   15650:	mvn	r5, #0
   15654:	b	15644 <__assert_fail@plt+0x3f40>
   15658:	ldrdeq	pc, [r2], -r8
   1565c:	andeq	lr, r1, r0, ror #8
   15660:	push	{r4, lr}
   15664:	ror	r0, r0, #3
   15668:	bl	1cb0c <__assert_fail@plt+0xb408>
   1566c:	mov	r0, r1
   15670:	pop	{r4, pc}
   15674:	cmp	r1, r0
   15678:	movne	r0, #0
   1567c:	moveq	r0, #1
   15680:	bx	lr
   15684:	ldr	r3, [r0, #20]
   15688:	ldr	r2, [pc, #176]	; 15740 <__assert_fail@plt+0x403c>
   1568c:	cmp	r3, r2
   15690:	beq	15728 <__assert_fail@plt+0x4024>
   15694:	vldr	s15, [r3, #8]
   15698:	vldr	s14, [pc, #144]	; 15730 <__assert_fail@plt+0x402c>
   1569c:	vcmpe.f32	s15, s14
   156a0:	vmrs	APSR_nzcv, fpscr
   156a4:	ble	15704 <__assert_fail@plt+0x4000>
   156a8:	vldr	s14, [pc, #132]	; 15734 <__assert_fail@plt+0x4030>
   156ac:	vcmpe.f32	s15, s14
   156b0:	vmrs	APSR_nzcv, fpscr
   156b4:	bpl	15704 <__assert_fail@plt+0x4000>
   156b8:	vldr	s13, [r3, #12]
   156bc:	vldr	s14, [pc, #116]	; 15738 <__assert_fail@plt+0x4034>
   156c0:	vcmpe.f32	s13, s14
   156c4:	vmrs	APSR_nzcv, fpscr
   156c8:	ble	15704 <__assert_fail@plt+0x4000>
   156cc:	vldr	s14, [r3]
   156d0:	vcmpe.f32	s14, #0.0
   156d4:	vmrs	APSR_nzcv, fpscr
   156d8:	blt	15704 <__assert_fail@plt+0x4000>
   156dc:	vldr	s13, [pc, #76]	; 15730 <__assert_fail@plt+0x402c>
   156e0:	vadd.f32	s14, s14, s13
   156e4:	vldr	s13, [r3, #4]
   156e8:	vcmpe.f32	s14, s13
   156ec:	vmrs	APSR_nzcv, fpscr
   156f0:	bpl	15704 <__assert_fail@plt+0x4000>
   156f4:	vldr	s12, [pc, #64]	; 1573c <__assert_fail@plt+0x4038>
   156f8:	vcmpe.f32	s13, s12
   156fc:	vmrs	APSR_nzcv, fpscr
   15700:	bls	15714 <__assert_fail@plt+0x4010>
   15704:	ldr	r3, [pc, #52]	; 15740 <__assert_fail@plt+0x403c>
   15708:	str	r3, [r0, #20]
   1570c:	mov	r0, #0
   15710:	bx	lr
   15714:	vcmpe.f32	s15, s14
   15718:	vmrs	APSR_nzcv, fpscr
   1571c:	ble	15704 <__assert_fail@plt+0x4000>
   15720:	mov	r0, #1
   15724:	bx	lr
   15728:	mov	r0, #1
   1572c:	bx	lr
   15730:	stclcc	12, cr12, [ip, #820]	; 0x334
   15734:	svccc	0x00666666
   15738:	svccc	0x008ccccd
   1573c:	svccc	0x00800000
   15740:	andeq	lr, r1, r8, ror #8
   15744:	push	{r4, lr}
   15748:	mov	r4, r0
   1574c:	mov	r0, r1
   15750:	ldr	r3, [r4, #24]
   15754:	ldr	r1, [r4, #8]
   15758:	blx	r3
   1575c:	ldr	r3, [r4, #8]
   15760:	cmp	r0, r3
   15764:	bcs	15774 <__assert_fail@plt+0x4070>
   15768:	ldr	r3, [r4]
   1576c:	add	r0, r3, r0, lsl #3
   15770:	pop	{r4, pc}
   15774:	bl	116e0 <abort@plt>
   15778:	push	{r4, r5, r6, r7, r8, lr}
   1577c:	ldrb	r3, [r1, #16]
   15780:	cmp	r3, #0
   15784:	bne	157b4 <__assert_fail@plt+0x40b0>
   15788:	vmov	s15, r0
   1578c:	vcvt.f32.u32	s13, s15
   15790:	vldr	s14, [r1, #8]
   15794:	vdiv.f32	s15, s13, s14
   15798:	vldr	s14, [pc, #204]	; 1586c <__assert_fail@plt+0x4168>
   1579c:	vcmpe.f32	s15, s14
   157a0:	vmrs	APSR_nzcv, fpscr
   157a4:	movge	r7, #0
   157a8:	bge	157ec <__assert_fail@plt+0x40e8>
   157ac:	vcvt.u32.f32	s15, s15
   157b0:	vmov	r0, s15
   157b4:	cmp	r0, #10
   157b8:	movcc	r0, #10
   157bc:	orr	r7, r0, #1
   157c0:	cmn	r7, #1
   157c4:	ldrne	r8, [pc, #164]	; 15870 <__assert_fail@plt+0x416c>
   157c8:	bne	15818 <__assert_fail@plt+0x4114>
   157cc:	lsr	r3, r7, #30
   157d0:	lsl	r2, r7, #2
   157d4:	adds	r3, r3, #0
   157d8:	movne	r3, #1
   157dc:	cmp	r2, #0
   157e0:	movlt	r3, #1
   157e4:	cmp	r3, #0
   157e8:	movne	r7, #0
   157ec:	mov	r0, r7
   157f0:	pop	{r4, r5, r6, r7, r8, pc}
   157f4:	mov	r4, #3
   157f8:	mov	r1, r4
   157fc:	mov	r0, r7
   15800:	bl	1cb0c <__assert_fail@plt+0xb408>
   15804:	cmp	r1, #0
   15808:	bne	157cc <__assert_fail@plt+0x40c8>
   1580c:	add	r7, r7, #2
   15810:	cmn	r7, #1
   15814:	beq	157cc <__assert_fail@plt+0x40c8>
   15818:	cmp	r7, #9
   1581c:	bls	157f4 <__assert_fail@plt+0x40f0>
   15820:	umull	r2, r3, r8, r7
   15824:	lsr	r3, r3, #1
   15828:	add	r3, r3, r3, lsl #1
   1582c:	cmp	r7, r3
   15830:	beq	1580c <__assert_fail@plt+0x4108>
   15834:	mov	r6, #16
   15838:	mov	r5, #9
   1583c:	mov	r4, #3
   15840:	add	r5, r5, r6
   15844:	add	r4, r4, #2
   15848:	cmp	r5, r7
   1584c:	bcs	157f8 <__assert_fail@plt+0x40f4>
   15850:	add	r6, r6, #8
   15854:	mov	r1, r4
   15858:	mov	r0, r7
   1585c:	bl	1cb0c <__assert_fail@plt+0xb408>
   15860:	cmp	r1, #0
   15864:	bne	15840 <__assert_fail@plt+0x413c>
   15868:	b	1580c <__assert_fail@plt+0x4108>
   1586c:	svcmi	0x00800000
   15870:	bge	feac0324 <optarg@@GLIBC_2.4+0xfea90fec>
   15874:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15878:	ldr	r7, [r1]
   1587c:	ldr	r3, [r1, #4]
   15880:	cmp	r7, r3
   15884:	bcs	159b8 <__assert_fail@plt+0x42b4>
   15888:	mov	fp, r2
   1588c:	mov	sl, r1
   15890:	mov	r6, r0
   15894:	add	r7, r7, #8
   15898:	mov	r9, #0
   1589c:	b	15904 <__assert_fail@plt+0x4200>
   158a0:	str	r5, [r0]
   158a4:	ldr	r2, [r6, #12]
   158a8:	add	r2, r2, #1
   158ac:	str	r2, [r6, #12]
   158b0:	str	r9, [r4]
   158b4:	ldr	r2, [r6, #36]	; 0x24
   158b8:	str	r2, [r4, #4]
   158bc:	str	r4, [r6, #36]	; 0x24
   158c0:	b	1594c <__assert_fail@plt+0x4248>
   158c4:	mov	r0, #8
   158c8:	bl	1b268 <__assert_fail@plt+0x9b64>
   158cc:	cmp	r0, #0
   158d0:	beq	159c0 <__assert_fail@plt+0x42bc>
   158d4:	str	r4, [r0]
   158d8:	ldr	r3, [r5, #4]
   158dc:	str	r3, [r0, #4]
   158e0:	str	r0, [r5, #4]
   158e4:	str	r9, [r8, #-8]
   158e8:	ldr	r3, [sl, #12]
   158ec:	sub	r3, r3, #1
   158f0:	str	r3, [sl, #12]
   158f4:	add	r7, r7, #8
   158f8:	ldr	r3, [sl, #4]
   158fc:	cmp	r3, r8
   15900:	bls	159b0 <__assert_fail@plt+0x42ac>
   15904:	mov	r8, r7
   15908:	ldr	r3, [r7, #-8]
   1590c:	cmp	r3, #0
   15910:	beq	158f4 <__assert_fail@plt+0x41f0>
   15914:	ldr	r4, [r7, #-4]
   15918:	cmp	r4, #0
   1591c:	beq	15958 <__assert_fail@plt+0x4254>
   15920:	ldr	r5, [r4]
   15924:	mov	r1, r5
   15928:	mov	r0, r6
   1592c:	bl	15744 <__assert_fail@plt+0x4040>
   15930:	ldr	r3, [r4, #4]
   15934:	ldr	r2, [r0]
   15938:	cmp	r2, #0
   1593c:	beq	158a0 <__assert_fail@plt+0x419c>
   15940:	ldr	r2, [r0, #4]
   15944:	str	r2, [r4, #4]
   15948:	str	r4, [r0, #4]
   1594c:	mov	r4, r3
   15950:	cmp	r3, #0
   15954:	bne	15920 <__assert_fail@plt+0x421c>
   15958:	ldr	r4, [r8, #-8]
   1595c:	str	r9, [r8, #-4]
   15960:	cmp	fp, #0
   15964:	bne	158f4 <__assert_fail@plt+0x41f0>
   15968:	mov	r1, r4
   1596c:	mov	r0, r6
   15970:	bl	15744 <__assert_fail@plt+0x4040>
   15974:	mov	r5, r0
   15978:	ldr	r3, [r0]
   1597c:	cmp	r3, #0
   15980:	beq	1599c <__assert_fail@plt+0x4298>
   15984:	ldr	r0, [r6, #36]	; 0x24
   15988:	cmp	r0, #0
   1598c:	beq	158c4 <__assert_fail@plt+0x41c0>
   15990:	ldr	r3, [r0, #4]
   15994:	str	r3, [r6, #36]	; 0x24
   15998:	b	158d4 <__assert_fail@plt+0x41d0>
   1599c:	str	r4, [r0]
   159a0:	ldr	r3, [r6, #12]
   159a4:	add	r3, r3, #1
   159a8:	str	r3, [r6, #12]
   159ac:	b	158e4 <__assert_fail@plt+0x41e0>
   159b0:	mov	r0, #1
   159b4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159b8:	mov	r0, #1
   159bc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159c0:	mov	r0, fp
   159c4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159c8:	push	{r4, r5, r6, r7, r8, lr}
   159cc:	mov	r6, r0
   159d0:	mov	r5, r1
   159d4:	mov	r8, r2
   159d8:	mov	r7, r3
   159dc:	bl	15744 <__assert_fail@plt+0x4040>
   159e0:	str	r0, [r8]
   159e4:	ldr	r3, [r0]
   159e8:	cmp	r3, #0
   159ec:	beq	15ac4 <__assert_fail@plt+0x43c0>
   159f0:	mov	r4, r0
   159f4:	cmp	r5, r3
   159f8:	beq	15a8c <__assert_fail@plt+0x4388>
   159fc:	ldr	r2, [r6, #28]
   15a00:	mov	r1, r3
   15a04:	mov	r0, r5
   15a08:	blx	r2
   15a0c:	cmp	r0, #0
   15a10:	bne	15a8c <__assert_fail@plt+0x4388>
   15a14:	ldr	r3, [r4, #4]
   15a18:	cmp	r3, #0
   15a1c:	beq	15acc <__assert_fail@plt+0x43c8>
   15a20:	ldr	r1, [r3]
   15a24:	cmp	r5, r1
   15a28:	beq	15a5c <__assert_fail@plt+0x4358>
   15a2c:	ldr	r3, [r6, #28]
   15a30:	mov	r0, r5
   15a34:	blx	r3
   15a38:	cmp	r0, #0
   15a3c:	bne	15a5c <__assert_fail@plt+0x4358>
   15a40:	ldr	r4, [r4, #4]
   15a44:	ldr	r3, [r4, #4]
   15a48:	cmp	r3, #0
   15a4c:	beq	15ac4 <__assert_fail@plt+0x43c0>
   15a50:	ldr	r1, [r3]
   15a54:	cmp	r5, r1
   15a58:	bne	15a2c <__assert_fail@plt+0x4328>
   15a5c:	ldr	r2, [r4, #4]
   15a60:	ldr	r3, [r2]
   15a64:	cmp	r7, #0
   15a68:	beq	15ac4 <__assert_fail@plt+0x43c0>
   15a6c:	ldr	r1, [r2, #4]
   15a70:	str	r1, [r4, #4]
   15a74:	mov	r1, #0
   15a78:	str	r1, [r2]
   15a7c:	ldr	r1, [r6, #36]	; 0x24
   15a80:	str	r1, [r2, #4]
   15a84:	str	r2, [r6, #36]	; 0x24
   15a88:	b	15ac4 <__assert_fail@plt+0x43c0>
   15a8c:	ldr	r3, [r4]
   15a90:	cmp	r7, #0
   15a94:	beq	15ac4 <__assert_fail@plt+0x43c0>
   15a98:	ldr	r2, [r4, #4]
   15a9c:	cmp	r2, #0
   15aa0:	ldmne	r2, {r0, r1}
   15aa4:	stmne	r4, {r0, r1}
   15aa8:	movne	r1, #0
   15aac:	strne	r1, [r2]
   15ab0:	ldrne	r1, [r6, #36]	; 0x24
   15ab4:	strne	r1, [r2, #4]
   15ab8:	strne	r2, [r6, #36]	; 0x24
   15abc:	moveq	r2, #0
   15ac0:	streq	r2, [r4]
   15ac4:	mov	r0, r3
   15ac8:	pop	{r4, r5, r6, r7, r8, pc}
   15acc:	mov	r3, #0
   15ad0:	b	15ac4 <__assert_fail@plt+0x43c0>
   15ad4:	ldr	r0, [r0, #8]
   15ad8:	bx	lr
   15adc:	ldr	r0, [r0, #12]
   15ae0:	bx	lr
   15ae4:	ldr	r0, [r0, #16]
   15ae8:	bx	lr
   15aec:	ldr	r1, [r0]
   15af0:	ldr	ip, [r0, #4]
   15af4:	cmp	r1, ip
   15af8:	bcs	15b50 <__assert_fail@plt+0x444c>
   15afc:	mov	r0, #0
   15b00:	b	15b1c <__assert_fail@plt+0x4418>
   15b04:	mov	r2, #1
   15b08:	cmp	r0, r2
   15b0c:	movcc	r0, r2
   15b10:	add	r1, r1, #8
   15b14:	cmp	r1, ip
   15b18:	bcs	15b4c <__assert_fail@plt+0x4448>
   15b1c:	ldr	r3, [r1]
   15b20:	cmp	r3, #0
   15b24:	beq	15b10 <__assert_fail@plt+0x440c>
   15b28:	ldr	r3, [r1, #4]
   15b2c:	cmp	r3, #0
   15b30:	beq	15b04 <__assert_fail@plt+0x4400>
   15b34:	mov	r2, #1
   15b38:	add	r2, r2, #1
   15b3c:	ldr	r3, [r3, #4]
   15b40:	cmp	r3, #0
   15b44:	bne	15b38 <__assert_fail@plt+0x4434>
   15b48:	b	15b08 <__assert_fail@plt+0x4404>
   15b4c:	bx	lr
   15b50:	mov	r0, #0
   15b54:	bx	lr
   15b58:	push	{lr}		; (str lr, [sp, #-4]!)
   15b5c:	ldr	r1, [r0]
   15b60:	ldr	lr, [r0, #4]
   15b64:	cmp	r1, lr
   15b68:	bcs	15bb8 <__assert_fail@plt+0x44b4>
   15b6c:	mov	r2, #0
   15b70:	mov	ip, r2
   15b74:	b	15b84 <__assert_fail@plt+0x4480>
   15b78:	add	r1, r1, #8
   15b7c:	cmp	r1, lr
   15b80:	bcs	15bc0 <__assert_fail@plt+0x44bc>
   15b84:	ldr	r3, [r1]
   15b88:	cmp	r3, #0
   15b8c:	beq	15b78 <__assert_fail@plt+0x4474>
   15b90:	add	ip, ip, #1
   15b94:	add	r2, r2, #1
   15b98:	ldr	r3, [r1, #4]
   15b9c:	cmp	r3, #0
   15ba0:	beq	15b78 <__assert_fail@plt+0x4474>
   15ba4:	add	r2, r2, #1
   15ba8:	ldr	r3, [r3, #4]
   15bac:	cmp	r3, #0
   15bb0:	bne	15ba4 <__assert_fail@plt+0x44a0>
   15bb4:	b	15b78 <__assert_fail@plt+0x4474>
   15bb8:	mov	r2, #0
   15bbc:	mov	ip, r2
   15bc0:	ldr	r3, [r0, #12]
   15bc4:	cmp	r3, ip
   15bc8:	beq	15bd4 <__assert_fail@plt+0x44d0>
   15bcc:	mov	r0, #0
   15bd0:	pop	{pc}		; (ldr pc, [sp], #4)
   15bd4:	ldr	r0, [r0, #16]
   15bd8:	cmp	r0, r2
   15bdc:	movne	r0, #0
   15be0:	moveq	r0, #1
   15be4:	pop	{pc}		; (ldr pc, [sp], #4)
   15be8:	push	{r4, r5, r6, r7, r8, lr}
   15bec:	sub	sp, sp, #8
   15bf0:	mov	r6, r0
   15bf4:	mov	r4, r1
   15bf8:	ldr	r5, [r0, #8]
   15bfc:	ldr	r7, [r0, #12]
   15c00:	bl	15aec <__assert_fail@plt+0x43e8>
   15c04:	mov	r8, r0
   15c08:	ldr	r3, [r6, #16]
   15c0c:	ldr	r2, [pc, #116]	; 15c88 <__assert_fail@plt+0x4584>
   15c10:	mov	r1, #1
   15c14:	mov	r0, r4
   15c18:	bl	115c0 <__fprintf_chk@plt>
   15c1c:	mov	r3, r5
   15c20:	ldr	r2, [pc, #100]	; 15c8c <__assert_fail@plt+0x4588>
   15c24:	mov	r1, #1
   15c28:	mov	r0, r4
   15c2c:	bl	115c0 <__fprintf_chk@plt>
   15c30:	vmov	s15, r7
   15c34:	vcvt.f64.u32	d6, s15
   15c38:	vldr	d7, [pc, #64]	; 15c80 <__assert_fail@plt+0x457c>
   15c3c:	vmul.f64	d6, d6, d7
   15c40:	vmov	s15, r5
   15c44:	vcvt.f64.u32	d7, s15
   15c48:	vdiv.f64	d5, d6, d7
   15c4c:	vstr	d5, [sp]
   15c50:	mov	r3, r7
   15c54:	ldr	r2, [pc, #52]	; 15c90 <__assert_fail@plt+0x458c>
   15c58:	mov	r1, #1
   15c5c:	mov	r0, r4
   15c60:	bl	115c0 <__fprintf_chk@plt>
   15c64:	mov	r3, r8
   15c68:	ldr	r2, [pc, #36]	; 15c94 <__assert_fail@plt+0x4590>
   15c6c:	mov	r1, #1
   15c70:	mov	r0, r4
   15c74:	bl	115c0 <__fprintf_chk@plt>
   15c78:	add	sp, sp, #8
   15c7c:	pop	{r4, r5, r6, r7, r8, pc}
   15c80:	andeq	r0, r0, r0
   15c84:	subsmi	r0, r9, r0
   15c88:	andeq	lr, r1, ip, ror r4
   15c8c:	muleq	r1, r4, r4
   15c90:	andeq	lr, r1, ip, lsr #9
   15c94:	ldrdeq	lr, [r1], -r0
   15c98:	push	{r4, r5, r6, lr}
   15c9c:	mov	r6, r0
   15ca0:	mov	r5, r1
   15ca4:	bl	15744 <__assert_fail@plt+0x4040>
   15ca8:	ldr	r1, [r0]
   15cac:	cmp	r1, #0
   15cb0:	beq	15d04 <__assert_fail@plt+0x4600>
   15cb4:	mov	r4, r0
   15cb8:	cmp	r0, #0
   15cbc:	beq	15d0c <__assert_fail@plt+0x4608>
   15cc0:	cmp	r5, r1
   15cc4:	beq	15cf4 <__assert_fail@plt+0x45f0>
   15cc8:	ldr	r3, [r6, #28]
   15ccc:	mov	r0, r5
   15cd0:	blx	r3
   15cd4:	cmp	r0, #0
   15cd8:	bne	15cf4 <__assert_fail@plt+0x45f0>
   15cdc:	ldr	r4, [r4, #4]
   15ce0:	cmp	r4, #0
   15ce4:	beq	15cfc <__assert_fail@plt+0x45f8>
   15ce8:	ldr	r1, [r4]
   15cec:	cmp	r5, r1
   15cf0:	bne	15cc8 <__assert_fail@plt+0x45c4>
   15cf4:	ldr	r0, [r4]
   15cf8:	pop	{r4, r5, r6, pc}
   15cfc:	mov	r0, #0
   15d00:	pop	{r4, r5, r6, pc}
   15d04:	mov	r0, #0
   15d08:	pop	{r4, r5, r6, pc}
   15d0c:	mov	r0, #0
   15d10:	pop	{r4, r5, r6, pc}
   15d14:	ldr	r3, [r0, #16]
   15d18:	cmp	r3, #0
   15d1c:	beq	15d60 <__assert_fail@plt+0x465c>
   15d20:	ldr	r3, [r0]
   15d24:	ldr	r2, [r0, #4]
   15d28:	cmp	r3, r2
   15d2c:	bcs	15d58 <__assert_fail@plt+0x4654>
   15d30:	ldr	r0, [r3]
   15d34:	cmp	r0, #0
   15d38:	bne	15d54 <__assert_fail@plt+0x4650>
   15d3c:	add	r3, r3, #8
   15d40:	cmp	r3, r2
   15d44:	bcs	15d58 <__assert_fail@plt+0x4654>
   15d48:	ldr	r0, [r3]
   15d4c:	cmp	r0, #0
   15d50:	beq	15d3c <__assert_fail@plt+0x4638>
   15d54:	bx	lr
   15d58:	push	{r4, lr}
   15d5c:	bl	116e0 <abort@plt>
   15d60:	mov	r0, #0
   15d64:	b	15d54 <__assert_fail@plt+0x4650>
   15d68:	push	{r4, r5, r6, lr}
   15d6c:	mov	r5, r0
   15d70:	mov	r4, r1
   15d74:	bl	15744 <__assert_fail@plt+0x4040>
   15d78:	mov	r2, r0
   15d7c:	mov	r3, r0
   15d80:	ldr	r1, [r3]
   15d84:	cmp	r4, r1
   15d88:	beq	15d9c <__assert_fail@plt+0x4698>
   15d8c:	ldr	r3, [r3, #4]
   15d90:	cmp	r3, #0
   15d94:	bne	15d80 <__assert_fail@plt+0x467c>
   15d98:	b	15da8 <__assert_fail@plt+0x46a4>
   15d9c:	ldr	r3, [r3, #4]
   15da0:	cmp	r3, #0
   15da4:	bne	15dc8 <__assert_fail@plt+0x46c4>
   15da8:	ldr	r3, [r5, #4]
   15dac:	add	r2, r2, #8
   15db0:	cmp	r2, r3
   15db4:	bcs	15dd0 <__assert_fail@plt+0x46cc>
   15db8:	ldr	r0, [r2]
   15dbc:	cmp	r0, #0
   15dc0:	beq	15dac <__assert_fail@plt+0x46a8>
   15dc4:	pop	{r4, r5, r6, pc}
   15dc8:	ldr	r0, [r3]
   15dcc:	pop	{r4, r5, r6, pc}
   15dd0:	mov	r0, #0
   15dd4:	pop	{r4, r5, r6, pc}
   15dd8:	push	{r4, r5, lr}
   15ddc:	ldr	r4, [r0]
   15de0:	ldr	r3, [r0, #4]
   15de4:	cmp	r4, r3
   15de8:	bcs	15e54 <__assert_fail@plt+0x4750>
   15dec:	mov	r5, r0
   15df0:	mov	r0, #0
   15df4:	b	15e08 <__assert_fail@plt+0x4704>
   15df8:	add	r4, r4, #8
   15dfc:	ldr	r3, [r5, #4]
   15e00:	cmp	r3, r4
   15e04:	bls	15e50 <__assert_fail@plt+0x474c>
   15e08:	ldr	r3, [r4]
   15e0c:	cmp	r3, #0
   15e10:	beq	15df8 <__assert_fail@plt+0x46f4>
   15e14:	cmp	r4, #0
   15e18:	beq	15df8 <__assert_fail@plt+0x46f4>
   15e1c:	cmp	r2, r0
   15e20:	popls	{r4, r5, pc}
   15e24:	add	ip, r1, r0, lsl #2
   15e28:	mov	r3, r4
   15e2c:	add	r0, r0, #1
   15e30:	ldr	lr, [r3]
   15e34:	str	lr, [ip], #4
   15e38:	ldr	r3, [r3, #4]
   15e3c:	cmp	r3, #0
   15e40:	beq	15df8 <__assert_fail@plt+0x46f4>
   15e44:	cmp	r2, r0
   15e48:	bne	15e2c <__assert_fail@plt+0x4728>
   15e4c:	pop	{r4, r5, pc}
   15e50:	pop	{r4, r5, pc}
   15e54:	mov	r0, #0
   15e58:	pop	{r4, r5, pc}
   15e5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15e60:	ldr	r8, [r0]
   15e64:	ldr	r3, [r0, #4]
   15e68:	cmp	r8, r3
   15e6c:	bcs	15ed4 <__assert_fail@plt+0x47d0>
   15e70:	mov	r7, r2
   15e74:	mov	r6, r1
   15e78:	mov	r9, r0
   15e7c:	mov	r5, #0
   15e80:	b	15e94 <__assert_fail@plt+0x4790>
   15e84:	add	r8, r8, #8
   15e88:	ldr	r3, [r9, #4]
   15e8c:	cmp	r3, r8
   15e90:	bls	15ed8 <__assert_fail@plt+0x47d4>
   15e94:	ldr	r3, [r8]
   15e98:	cmp	r3, #0
   15e9c:	beq	15e84 <__assert_fail@plt+0x4780>
   15ea0:	cmp	r8, #0
   15ea4:	beq	15e84 <__assert_fail@plt+0x4780>
   15ea8:	mov	r4, r8
   15eac:	mov	r1, r7
   15eb0:	ldr	r0, [r4]
   15eb4:	blx	r6
   15eb8:	cmp	r0, #0
   15ebc:	beq	15ed8 <__assert_fail@plt+0x47d4>
   15ec0:	add	r5, r5, #1
   15ec4:	ldr	r4, [r4, #4]
   15ec8:	cmp	r4, #0
   15ecc:	bne	15eac <__assert_fail@plt+0x47a8>
   15ed0:	b	15e84 <__assert_fail@plt+0x4780>
   15ed4:	mov	r5, #0
   15ed8:	mov	r0, r5
   15edc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ee0:	ldrb	r3, [r0]
   15ee4:	cmp	r3, #0
   15ee8:	beq	15f20 <__assert_fail@plt+0x481c>
   15eec:	push	{r4, r5, r6, lr}
   15ef0:	mov	r4, r0
   15ef4:	mov	r5, r1
   15ef8:	mov	r1, #0
   15efc:	rsb	r0, r1, r1, lsl #5
   15f00:	mov	r1, r5
   15f04:	add	r0, r0, r3
   15f08:	bl	1cb0c <__assert_fail@plt+0xb408>
   15f0c:	ldrb	r3, [r4, #1]!
   15f10:	cmp	r3, #0
   15f14:	bne	15efc <__assert_fail@plt+0x47f8>
   15f18:	mov	r0, r1
   15f1c:	pop	{r4, r5, r6, pc}
   15f20:	mov	r1, #0
   15f24:	mov	r0, r1
   15f28:	bx	lr
   15f2c:	push	{lr}		; (str lr, [sp, #-4]!)
   15f30:	mov	ip, r0
   15f34:	ldr	lr, [pc, #16]	; 15f4c <__assert_fail@plt+0x4848>
   15f38:	ldm	lr!, {r0, r1, r2, r3}
   15f3c:	stmia	ip!, {r0, r1, r2, r3}
   15f40:	ldr	r3, [lr]
   15f44:	str	r3, [ip]
   15f48:	pop	{pc}		; (ldr pc, [sp], #4)
   15f4c:	andeq	lr, r1, r8, ror #8
   15f50:	push	{r4, r5, r6, r7, r8, lr}
   15f54:	mov	r8, r0
   15f58:	mov	r5, r1
   15f5c:	subs	r7, r2, #0
   15f60:	ldr	r2, [pc, #180]	; 1601c <__assert_fail@plt+0x4918>
   15f64:	cmp	r7, #0
   15f68:	moveq	r7, r2
   15f6c:	subs	r6, r3, #0
   15f70:	ldr	r3, [pc, #168]	; 16020 <__assert_fail@plt+0x491c>
   15f74:	cmp	r6, #0
   15f78:	moveq	r6, r3
   15f7c:	mov	r0, #40	; 0x28
   15f80:	bl	1b268 <__assert_fail@plt+0x9b64>
   15f84:	subs	r4, r0, #0
   15f88:	beq	16004 <__assert_fail@plt+0x4900>
   15f8c:	ldr	r3, [pc, #144]	; 16024 <__assert_fail@plt+0x4920>
   15f90:	cmp	r5, #0
   15f94:	moveq	r5, r3
   15f98:	str	r5, [r4, #20]
   15f9c:	mov	r0, r4
   15fa0:	bl	15684 <__assert_fail@plt+0x3f80>
   15fa4:	cmp	r0, #0
   15fa8:	beq	1600c <__assert_fail@plt+0x4908>
   15fac:	mov	r1, r5
   15fb0:	mov	r0, r8
   15fb4:	bl	15778 <__assert_fail@plt+0x4074>
   15fb8:	str	r0, [r4, #8]
   15fbc:	cmp	r0, #0
   15fc0:	beq	1600c <__assert_fail@plt+0x4908>
   15fc4:	mov	r1, #8
   15fc8:	bl	1b218 <__assert_fail@plt+0x9b14>
   15fcc:	str	r0, [r4]
   15fd0:	cmp	r0, #0
   15fd4:	beq	1600c <__assert_fail@plt+0x4908>
   15fd8:	ldr	r3, [r4, #8]
   15fdc:	add	r0, r0, r3, lsl #3
   15fe0:	str	r0, [r4, #4]
   15fe4:	mov	r3, #0
   15fe8:	str	r3, [r4, #12]
   15fec:	str	r3, [r4, #16]
   15ff0:	str	r7, [r4, #24]
   15ff4:	str	r6, [r4, #28]
   15ff8:	ldr	r2, [sp, #24]
   15ffc:	str	r2, [r4, #32]
   16000:	str	r3, [r4, #36]	; 0x24
   16004:	mov	r0, r4
   16008:	pop	{r4, r5, r6, r7, r8, pc}
   1600c:	mov	r0, r4
   16010:	bl	15478 <__assert_fail@plt+0x3d74>
   16014:	mov	r4, #0
   16018:	b	16004 <__assert_fail@plt+0x4900>
   1601c:	andeq	r5, r1, r0, ror #12
   16020:	andeq	r5, r1, r4, ror r6
   16024:	andeq	lr, r1, r8, ror #8
   16028:	push	{r4, r5, r6, r7, r8, lr}
   1602c:	mov	r5, r0
   16030:	ldr	r7, [r0]
   16034:	ldr	r3, [r0, #4]
   16038:	cmp	r7, r3
   1603c:	bcs	160d0 <__assert_fail@plt+0x49cc>
   16040:	add	r7, r7, #8
   16044:	mov	r6, #0
   16048:	b	160b0 <__assert_fail@plt+0x49ac>
   1604c:	str	r6, [r4]
   16050:	ldr	r3, [r4, #4]
   16054:	ldr	r2, [r5, #36]	; 0x24
   16058:	str	r2, [r4, #4]
   1605c:	str	r4, [r5, #36]	; 0x24
   16060:	mov	r4, r3
   16064:	cmp	r3, #0
   16068:	beq	16084 <__assert_fail@plt+0x4980>
   1606c:	ldr	r3, [r5, #32]
   16070:	cmp	r3, #0
   16074:	beq	1604c <__assert_fail@plt+0x4948>
   16078:	ldr	r0, [r4]
   1607c:	blx	r3
   16080:	b	1604c <__assert_fail@plt+0x4948>
   16084:	ldr	r3, [r5, #32]
   16088:	cmp	r3, #0
   1608c:	beq	16098 <__assert_fail@plt+0x4994>
   16090:	ldr	r0, [r8, #-8]
   16094:	blx	r3
   16098:	str	r6, [r8, #-8]
   1609c:	str	r6, [r8, #-4]
   160a0:	add	r7, r7, #8
   160a4:	ldr	r3, [r5, #4]
   160a8:	cmp	r3, r8
   160ac:	bls	160d0 <__assert_fail@plt+0x49cc>
   160b0:	mov	r8, r7
   160b4:	ldr	r3, [r7, #-8]
   160b8:	cmp	r3, #0
   160bc:	beq	160a0 <__assert_fail@plt+0x499c>
   160c0:	ldr	r4, [r7, #-4]
   160c4:	cmp	r4, #0
   160c8:	bne	1606c <__assert_fail@plt+0x4968>
   160cc:	b	16084 <__assert_fail@plt+0x4980>
   160d0:	mov	r3, #0
   160d4:	str	r3, [r5, #12]
   160d8:	str	r3, [r5, #16]
   160dc:	pop	{r4, r5, r6, r7, r8, pc}
   160e0:	push	{r4, r5, r6, lr}
   160e4:	mov	r5, r0
   160e8:	ldr	r3, [r0, #32]
   160ec:	cmp	r3, #0
   160f0:	beq	16158 <__assert_fail@plt+0x4a54>
   160f4:	ldr	r3, [r0, #16]
   160f8:	cmp	r3, #0
   160fc:	beq	16158 <__assert_fail@plt+0x4a54>
   16100:	ldr	r6, [r0]
   16104:	ldr	r3, [r0, #4]
   16108:	cmp	r6, r3
   1610c:	bcc	16124 <__assert_fail@plt+0x4a20>
   16110:	b	16198 <__assert_fail@plt+0x4a94>
   16114:	add	r6, r6, #8
   16118:	ldr	r3, [r5, #4]
   1611c:	cmp	r3, r6
   16120:	bls	16158 <__assert_fail@plt+0x4a54>
   16124:	ldr	r3, [r6]
   16128:	cmp	r3, #0
   1612c:	beq	16114 <__assert_fail@plt+0x4a10>
   16130:	cmp	r6, #0
   16134:	beq	16114 <__assert_fail@plt+0x4a10>
   16138:	mov	r4, r6
   1613c:	ldr	r3, [r5, #32]
   16140:	ldr	r0, [r4]
   16144:	blx	r3
   16148:	ldr	r4, [r4, #4]
   1614c:	cmp	r4, #0
   16150:	bne	1613c <__assert_fail@plt+0x4a38>
   16154:	b	16114 <__assert_fail@plt+0x4a10>
   16158:	ldr	r6, [r5]
   1615c:	ldr	r3, [r5, #4]
   16160:	cmp	r6, r3
   16164:	bcs	16198 <__assert_fail@plt+0x4a94>
   16168:	ldr	r0, [r6, #4]
   1616c:	cmp	r0, #0
   16170:	beq	16188 <__assert_fail@plt+0x4a84>
   16174:	ldr	r4, [r0, #4]
   16178:	bl	15478 <__assert_fail@plt+0x3d74>
   1617c:	mov	r0, r4
   16180:	cmp	r4, #0
   16184:	bne	16174 <__assert_fail@plt+0x4a70>
   16188:	add	r6, r6, #8
   1618c:	ldr	r3, [r5, #4]
   16190:	cmp	r3, r6
   16194:	bhi	16168 <__assert_fail@plt+0x4a64>
   16198:	ldr	r0, [r5, #36]	; 0x24
   1619c:	cmp	r0, #0
   161a0:	beq	161b8 <__assert_fail@plt+0x4ab4>
   161a4:	ldr	r4, [r0, #4]
   161a8:	bl	15478 <__assert_fail@plt+0x3d74>
   161ac:	mov	r0, r4
   161b0:	cmp	r4, #0
   161b4:	bne	161a4 <__assert_fail@plt+0x4aa0>
   161b8:	ldr	r0, [r5]
   161bc:	bl	15478 <__assert_fail@plt+0x3d74>
   161c0:	mov	r0, r5
   161c4:	bl	15478 <__assert_fail@plt+0x3d74>
   161c8:	pop	{r4, r5, r6, pc}
   161cc:	push	{r4, r5, lr}
   161d0:	sub	sp, sp, #44	; 0x2c
   161d4:	mov	r4, r0
   161d8:	mov	r0, r1
   161dc:	ldr	r1, [r4, #20]
   161e0:	bl	15778 <__assert_fail@plt+0x4074>
   161e4:	subs	r5, r0, #0
   161e8:	beq	162e0 <__assert_fail@plt+0x4bdc>
   161ec:	ldr	r3, [r4, #8]
   161f0:	cmp	r5, r3
   161f4:	beq	162f0 <__assert_fail@plt+0x4bec>
   161f8:	mov	r1, #8
   161fc:	mov	r0, r5
   16200:	bl	1b218 <__assert_fail@plt+0x9b14>
   16204:	str	r0, [sp]
   16208:	cmp	r0, #0
   1620c:	beq	162f8 <__assert_fail@plt+0x4bf4>
   16210:	str	r5, [sp, #8]
   16214:	add	r0, r0, r5, lsl #3
   16218:	str	r0, [sp, #4]
   1621c:	mov	r2, #0
   16220:	str	r2, [sp, #12]
   16224:	str	r2, [sp, #16]
   16228:	ldr	r3, [r4, #20]
   1622c:	str	r3, [sp, #20]
   16230:	ldr	r3, [r4, #24]
   16234:	str	r3, [sp, #24]
   16238:	ldr	r3, [r4, #28]
   1623c:	str	r3, [sp, #28]
   16240:	ldr	r3, [r4, #32]
   16244:	str	r3, [sp, #32]
   16248:	ldr	r3, [r4, #36]	; 0x24
   1624c:	str	r3, [sp, #36]	; 0x24
   16250:	mov	r1, r4
   16254:	mov	r0, sp
   16258:	bl	15874 <__assert_fail@plt+0x4170>
   1625c:	subs	r5, r0, #0
   16260:	bne	162a8 <__assert_fail@plt+0x4ba4>
   16264:	ldr	r3, [sp, #36]	; 0x24
   16268:	str	r3, [r4, #36]	; 0x24
   1626c:	mov	r2, #1
   16270:	mov	r1, sp
   16274:	mov	r0, r4
   16278:	bl	15874 <__assert_fail@plt+0x4170>
   1627c:	cmp	r0, #0
   16280:	beq	162dc <__assert_fail@plt+0x4bd8>
   16284:	mov	r2, #0
   16288:	mov	r1, sp
   1628c:	mov	r0, r4
   16290:	bl	15874 <__assert_fail@plt+0x4170>
   16294:	cmp	r0, #0
   16298:	beq	162dc <__assert_fail@plt+0x4bd8>
   1629c:	ldr	r0, [sp]
   162a0:	bl	15478 <__assert_fail@plt+0x3d74>
   162a4:	b	162e4 <__assert_fail@plt+0x4be0>
   162a8:	ldr	r0, [r4]
   162ac:	bl	15478 <__assert_fail@plt+0x3d74>
   162b0:	ldr	r3, [sp]
   162b4:	str	r3, [r4]
   162b8:	ldr	r3, [sp, #4]
   162bc:	str	r3, [r4, #4]
   162c0:	ldr	r3, [sp, #8]
   162c4:	str	r3, [r4, #8]
   162c8:	ldr	r3, [sp, #12]
   162cc:	str	r3, [r4, #12]
   162d0:	ldr	r3, [sp, #36]	; 0x24
   162d4:	str	r3, [r4, #36]	; 0x24
   162d8:	b	162e4 <__assert_fail@plt+0x4be0>
   162dc:	bl	116e0 <abort@plt>
   162e0:	mov	r5, #0
   162e4:	mov	r0, r5
   162e8:	add	sp, sp, #44	; 0x2c
   162ec:	pop	{r4, r5, pc}
   162f0:	mov	r5, #1
   162f4:	b	162e4 <__assert_fail@plt+0x4be0>
   162f8:	mov	r5, #0
   162fc:	b	162e4 <__assert_fail@plt+0x4be0>
   16300:	push	{r4, r5, r6, lr}
   16304:	sub	sp, sp, #8
   16308:	subs	r6, r1, #0
   1630c:	beq	16348 <__assert_fail@plt+0x4c44>
   16310:	mov	r4, r0
   16314:	mov	r5, r2
   16318:	mov	r3, #0
   1631c:	add	r2, sp, #4
   16320:	mov	r1, r6
   16324:	bl	159c8 <__assert_fail@plt+0x42c4>
   16328:	cmp	r0, #0
   1632c:	beq	1634c <__assert_fail@plt+0x4c48>
   16330:	cmp	r5, #0
   16334:	moveq	r0, #0
   16338:	strne	r0, [r5]
   1633c:	movne	r0, #0
   16340:	add	sp, sp, #8
   16344:	pop	{r4, r5, r6, pc}
   16348:	bl	116e0 <abort@plt>
   1634c:	vldr	s15, [r4, #12]
   16350:	vcvt.f32.u32	s14, s15
   16354:	ldr	r3, [r4, #20]
   16358:	vldr	s15, [r4, #8]
   1635c:	vcvt.f32.u32	s15, s15
   16360:	vldr	s13, [r3, #8]
   16364:	vmul.f32	s15, s15, s13
   16368:	vcmpe.f32	s14, s15
   1636c:	vmrs	APSR_nzcv, fpscr
   16370:	bgt	163c0 <__assert_fail@plt+0x4cbc>
   16374:	ldr	r3, [sp, #4]
   16378:	ldr	r2, [r3]
   1637c:	cmp	r2, #0
   16380:	beq	16464 <__assert_fail@plt+0x4d60>
   16384:	ldr	r0, [r4, #36]	; 0x24
   16388:	cmp	r0, #0
   1638c:	beq	1644c <__assert_fail@plt+0x4d48>
   16390:	ldr	r3, [r0, #4]
   16394:	str	r3, [r4, #36]	; 0x24
   16398:	str	r6, [r0]
   1639c:	ldr	r3, [sp, #4]
   163a0:	ldr	r2, [r3, #4]
   163a4:	str	r2, [r0, #4]
   163a8:	str	r0, [r3, #4]
   163ac:	ldr	r3, [r4, #16]
   163b0:	add	r3, r3, #1
   163b4:	str	r3, [r4, #16]
   163b8:	mov	r0, #1
   163bc:	b	16340 <__assert_fail@plt+0x4c3c>
   163c0:	mov	r0, r4
   163c4:	bl	15684 <__assert_fail@plt+0x3f80>
   163c8:	ldr	r3, [r4, #20]
   163cc:	vldr	s13, [r3, #8]
   163d0:	vldr	s15, [r4, #8]
   163d4:	vcvt.f32.u32	s15, s15
   163d8:	vldr	s14, [r4, #12]
   163dc:	vcvt.f32.u32	s14, s14
   163e0:	vmul.f32	s12, s13, s15
   163e4:	vcmpe.f32	s14, s12
   163e8:	vmrs	APSR_nzcv, fpscr
   163ec:	ble	16374 <__assert_fail@plt+0x4c70>
   163f0:	ldrb	r2, [r3, #16]
   163f4:	cmp	r2, #0
   163f8:	vldr	s14, [r3, #12]
   163fc:	vmul.f32	s15, s15, s14
   16400:	vmuleq.f32	s15, s15, s13
   16404:	vldr	s14, [pc, #140]	; 16498 <__assert_fail@plt+0x4d94>
   16408:	vcmpe.f32	s15, s14
   1640c:	vmrs	APSR_nzcv, fpscr
   16410:	bge	16488 <__assert_fail@plt+0x4d84>
   16414:	vcvt.u32.f32	s15, s15
   16418:	vmov	r1, s15
   1641c:	mov	r0, r4
   16420:	bl	161cc <__assert_fail@plt+0x4ac8>
   16424:	cmp	r0, #0
   16428:	beq	16490 <__assert_fail@plt+0x4d8c>
   1642c:	mov	r3, #0
   16430:	add	r2, sp, #4
   16434:	mov	r1, r6
   16438:	mov	r0, r4
   1643c:	bl	159c8 <__assert_fail@plt+0x42c4>
   16440:	cmp	r0, #0
   16444:	beq	16374 <__assert_fail@plt+0x4c70>
   16448:	bl	116e0 <abort@plt>
   1644c:	mov	r0, #8
   16450:	bl	1b268 <__assert_fail@plt+0x9b64>
   16454:	cmp	r0, #0
   16458:	bne	16398 <__assert_fail@plt+0x4c94>
   1645c:	mvn	r0, #0
   16460:	b	16340 <__assert_fail@plt+0x4c3c>
   16464:	str	r6, [r3]
   16468:	ldr	r3, [r4, #16]
   1646c:	add	r3, r3, #1
   16470:	str	r3, [r4, #16]
   16474:	ldr	r3, [r4, #12]
   16478:	add	r3, r3, #1
   1647c:	str	r3, [r4, #12]
   16480:	mov	r0, #1
   16484:	b	16340 <__assert_fail@plt+0x4c3c>
   16488:	mvn	r0, #0
   1648c:	b	16340 <__assert_fail@plt+0x4c3c>
   16490:	mvn	r0, #0
   16494:	b	16340 <__assert_fail@plt+0x4c3c>
   16498:	svcmi	0x00800000
   1649c:	push	{r4, lr}
   164a0:	sub	sp, sp, #8
   164a4:	mov	r4, r1
   164a8:	add	r2, sp, #4
   164ac:	bl	16300 <__assert_fail@plt+0x4bfc>
   164b0:	cmn	r0, #1
   164b4:	beq	164cc <__assert_fail@plt+0x4dc8>
   164b8:	cmp	r0, #0
   164bc:	movne	r0, r4
   164c0:	ldreq	r0, [sp, #4]
   164c4:	add	sp, sp, #8
   164c8:	pop	{r4, pc}
   164cc:	mov	r0, #0
   164d0:	b	164c4 <__assert_fail@plt+0x4dc0>
   164d4:	push	{r4, r5, r6, lr}
   164d8:	sub	sp, sp, #8
   164dc:	mov	r4, r0
   164e0:	mov	r3, #1
   164e4:	add	r2, sp, #4
   164e8:	bl	159c8 <__assert_fail@plt+0x42c4>
   164ec:	subs	r5, r0, #0
   164f0:	beq	16510 <__assert_fail@plt+0x4e0c>
   164f4:	ldr	r3, [r4, #16]
   164f8:	sub	r3, r3, #1
   164fc:	str	r3, [r4, #16]
   16500:	ldr	r3, [sp, #4]
   16504:	ldr	r3, [r3]
   16508:	cmp	r3, #0
   1650c:	beq	1651c <__assert_fail@plt+0x4e18>
   16510:	mov	r0, r5
   16514:	add	sp, sp, #8
   16518:	pop	{r4, r5, r6, pc}
   1651c:	ldr	r3, [r4, #12]
   16520:	sub	r3, r3, #1
   16524:	str	r3, [r4, #12]
   16528:	vmov	s15, r3
   1652c:	vcvt.f32.u32	s15, s15
   16530:	ldr	r3, [r4, #20]
   16534:	vldr	s14, [r4, #8]
   16538:	vcvt.f32.u32	s14, s14
   1653c:	vldr	s13, [r3]
   16540:	vmul.f32	s14, s14, s13
   16544:	vcmpe.f32	s15, s14
   16548:	vmrs	APSR_nzcv, fpscr
   1654c:	bpl	16510 <__assert_fail@plt+0x4e0c>
   16550:	mov	r0, r4
   16554:	bl	15684 <__assert_fail@plt+0x3f80>
   16558:	ldr	r3, [r4, #20]
   1655c:	vldr	s15, [r4, #8]
   16560:	vcvt.f32.u32	s15, s15
   16564:	vldr	s14, [r4, #12]
   16568:	vcvt.f32.u32	s13, s14
   1656c:	vldr	s14, [r3]
   16570:	vmul.f32	s14, s15, s14
   16574:	vcmpe.f32	s13, s14
   16578:	vmrs	APSR_nzcv, fpscr
   1657c:	bpl	16510 <__assert_fail@plt+0x4e0c>
   16580:	ldrb	r2, [r3, #16]
   16584:	cmp	r2, #0
   16588:	vldr	s14, [r3, #4]
   1658c:	vmuleq.f32	s15, s15, s14
   16590:	vldreq	s14, [r3, #8]
   16594:	vmul.f32	s15, s15, s14
   16598:	vcvt.u32.f32	s15, s15
   1659c:	vmov	r1, s15
   165a0:	mov	r0, r4
   165a4:	bl	161cc <__assert_fail@plt+0x4ac8>
   165a8:	cmp	r0, #0
   165ac:	bne	16510 <__assert_fail@plt+0x4e0c>
   165b0:	ldr	r0, [r4, #36]	; 0x24
   165b4:	cmp	r0, #0
   165b8:	beq	165d0 <__assert_fail@plt+0x4ecc>
   165bc:	ldr	r6, [r0, #4]
   165c0:	bl	15478 <__assert_fail@plt+0x3d74>
   165c4:	mov	r0, r6
   165c8:	cmp	r6, #0
   165cc:	bne	165bc <__assert_fail@plt+0x4eb8>
   165d0:	mov	r3, #0
   165d4:	str	r3, [r4, #36]	; 0x24
   165d8:	b	16510 <__assert_fail@plt+0x4e0c>
   165dc:	push	{r4, lr}
   165e0:	bl	164d4 <__assert_fail@plt+0x4dd0>
   165e4:	pop	{r4, pc}
   165e8:	push	{r4, r5, r6, lr}
   165ec:	mov	r4, r0
   165f0:	mov	r6, r1
   165f4:	ldr	r0, [r0]
   165f8:	bl	1c510 <__assert_fail@plt+0xae0c>
   165fc:	ldrd	r4, [r4, #8]
   16600:	mov	r2, r6
   16604:	mov	r3, #0
   16608:	eor	r4, r4, r0
   1660c:	mov	r0, r4
   16610:	mov	r1, r5
   16614:	bl	1d124 <__assert_fail@plt+0xba20>
   16618:	mov	r0, r2
   1661c:	pop	{r4, r5, r6, pc}
   16620:	push	{r4, r5, r6, lr}
   16624:	ldrd	r4, [r0, #8]
   16628:	ldrd	r2, [r1, #8]
   1662c:	cmp	r5, r3
   16630:	cmpeq	r4, r2
   16634:	beq	16640 <__assert_fail@plt+0x4f3c>
   16638:	mov	r0, #0
   1663c:	pop	{r4, r5, r6, pc}
   16640:	ldrd	r4, [r0, #16]
   16644:	ldrd	r2, [r1, #16]
   16648:	cmp	r5, r3
   1664c:	cmpeq	r4, r2
   16650:	beq	1665c <__assert_fail@plt+0x4f58>
   16654:	mov	r0, #0
   16658:	pop	{r4, r5, r6, pc}
   1665c:	ldr	r1, [r1]
   16660:	ldr	r0, [r0]
   16664:	bl	11320 <strcmp@plt>
   16668:	clz	r0, r0
   1666c:	lsr	r0, r0, #5
   16670:	pop	{r4, r5, r6, pc}
   16674:	push	{r4, lr}
   16678:	mov	r4, r0
   1667c:	ldr	r0, [r0]
   16680:	bl	15478 <__assert_fail@plt+0x3d74>
   16684:	mov	r0, r4
   16688:	bl	15478 <__assert_fail@plt+0x3d74>
   1668c:	pop	{r4, pc}
   16690:	push	{r4, r6, r7, lr}
   16694:	vpush	{d8}
   16698:	vmov.f64	d8, d0
   1669c:	cmp	r0, #1
   166a0:	beq	16708 <__assert_fail@plt+0x5004>
   166a4:	mov	r4, r0
   166a8:	vldr	d7, [pc, #104]	; 16718 <__assert_fail@plt+0x5014>
   166ac:	vcmpe.f64	d0, d7
   166b0:	vmrs	APSR_nzcv, fpscr
   166b4:	bpl	16708 <__assert_fail@plt+0x5004>
   166b8:	vmov	r0, r1, d0
   166bc:	bl	1d170 <__assert_fail@plt+0xba6c>
   166c0:	mov	r6, r0
   166c4:	mov	r7, r1
   166c8:	cmp	r4, #0
   166cc:	movne	r0, #0
   166d0:	bne	166f0 <__assert_fail@plt+0x4fec>
   166d4:	mov	r0, r6
   166d8:	bl	1d0b0 <__assert_fail@plt+0xb9ac>
   166dc:	vmov	d7, r0, r1
   166e0:	vcmp.f64	d7, d8
   166e4:	vmrs	APSR_nzcv, fpscr
   166e8:	movne	r0, #1
   166ec:	moveq	r0, #0
   166f0:	adds	r2, r6, r0
   166f4:	adc	r3, r7, r0, asr #31
   166f8:	mov	r0, r2
   166fc:	mov	r1, r3
   16700:	bl	1d0b0 <__assert_fail@plt+0xb9ac>
   16704:	vmov	d8, r0, r1
   16708:	vmov.f64	d0, d8
   1670c:	vpop	{d8}
   16710:	pop	{r4, r6, r7, pc}
   16714:	nop			; (mov r0, r0)
   16718:	andeq	r0, r0, r0
   1671c:	mvnsmi	r0, #0
   16720:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16724:	vpush	{d8-d9}
   16728:	sub	sp, sp, #124	; 0x7c
   1672c:	strd	r0, [sp, #32]
   16730:	mov	r7, r2
   16734:	str	r2, [sp, #24]
   16738:	mov	r8, r3
   1673c:	and	r3, r3, #3
   16740:	str	r3, [sp, #28]
   16744:	and	r3, r8, #32
   16748:	str	r3, [sp, #40]	; 0x28
   1674c:	cmp	r3, #0
   16750:	movne	r3, #1024	; 0x400
   16754:	moveq	r3, #1000	; 0x3e8
   16758:	str	r3, [sp, #44]	; 0x2c
   1675c:	bl	1165c <localeconv@plt>
   16760:	mov	r5, r0
   16764:	ldr	r6, [r0]
   16768:	mov	r0, r6
   1676c:	bl	1153c <strlen@plt>
   16770:	mov	r4, r0
   16774:	sub	r3, r0, #1
   16778:	ldr	r2, [pc, #1112]	; 16bd8 <__assert_fail@plt+0x54d4>
   1677c:	cmp	r3, #15
   16780:	movhi	r6, r2
   16784:	str	r6, [sp, #64]	; 0x40
   16788:	cmp	r3, #15
   1678c:	movhi	r4, #1
   16790:	ldr	r9, [r5, #8]
   16794:	ldr	r5, [r5, #4]
   16798:	mov	r0, r5
   1679c:	bl	1153c <strlen@plt>
   167a0:	ldr	r3, [pc, #1076]	; 16bdc <__assert_fail@plt+0x54d8>
   167a4:	cmp	r0, #16
   167a8:	movhi	r5, r3
   167ac:	str	r5, [sp, #12]
   167b0:	add	sl, r7, #644	; 0x284
   167b4:	add	sl, sl, #3
   167b8:	ldrd	r2, [sp, #184]	; 0xb8
   167bc:	ldrd	r6, [sp, #176]	; 0xb0
   167c0:	cmp	r3, r7
   167c4:	cmpeq	r2, r6
   167c8:	bhi	1694c <__assert_fail@plt+0x5248>
   167cc:	mov	r0, r6
   167d0:	mov	r1, r7
   167d4:	bl	1d124 <__assert_fail@plt+0xba20>
   167d8:	orrs	r3, r2, r3
   167dc:	bne	16824 <__assert_fail@plt+0x5120>
   167e0:	ldrd	r2, [sp, #184]	; 0xb8
   167e4:	ldrd	r0, [sp, #176]	; 0xb0
   167e8:	bl	1d124 <__assert_fail@plt+0xba20>
   167ec:	mov	r2, r0
   167f0:	mov	r3, r1
   167f4:	ldrd	r6, [sp, #32]
   167f8:	mul	r0, r2, r7
   167fc:	mla	ip, r6, r3, r0
   16800:	umull	r0, r1, r2, r6
   16804:	strd	r0, [sp, #16]
   16808:	add	r1, ip, r1
   1680c:	str	r1, [sp, #20]
   16810:	ldrd	r0, [sp, #16]
   16814:	bl	1d124 <__assert_fail@plt+0xba20>
   16818:	cmp	r7, r1
   1681c:	cmpeq	r6, r0
   16820:	beq	16ac4 <__assert_fail@plt+0x53c0>
   16824:	ldrd	r0, [sp, #176]	; 0xb0
   16828:	bl	1d0b0 <__assert_fail@plt+0xb9ac>
   1682c:	vmov	d9, r0, r1
   16830:	ldrd	r0, [sp, #184]	; 0xb8
   16834:	bl	1d0b0 <__assert_fail@plt+0xb9ac>
   16838:	vmov	d7, r0, r1
   1683c:	vdiv.f64	d8, d9, d7
   16840:	ldrd	r0, [sp, #32]
   16844:	bl	1d0b0 <__assert_fail@plt+0xb9ac>
   16848:	vmov	d7, r0, r1
   1684c:	vmul.f64	d0, d8, d7
   16850:	tst	r8, #16
   16854:	beq	16a1c <__assert_fail@plt+0x5318>
   16858:	vldr	d7, [pc, #872]	; 16bc8 <__assert_fail@plt+0x54c4>
   1685c:	mov	r7, #0
   16860:	vldr	s13, [sp, #44]	; 0x2c
   16864:	vcvt.f64.u32	d6, s13
   16868:	vmul.f64	d7, d7, d6
   1686c:	add	r7, r7, #1
   16870:	vmul.f64	d5, d6, d7
   16874:	vcmpe.f64	d0, d5
   16878:	vmrs	APSR_nzcv, fpscr
   1687c:	movge	r3, #1
   16880:	movlt	r3, #0
   16884:	cmp	r7, #7
   16888:	movgt	r3, #0
   1688c:	andle	r3, r3, #1
   16890:	cmp	r3, #0
   16894:	bne	16868 <__assert_fail@plt+0x5164>
   16898:	vdiv.f64	d8, d0, d7
   1689c:	vmov.f64	d0, d8
   168a0:	ldr	r0, [sp, #28]
   168a4:	bl	16690 <__assert_fail@plt+0x4f8c>
   168a8:	vstr	d0, [sp]
   168ac:	ldr	r3, [pc, #812]	; 16be0 <__assert_fail@plt+0x54dc>
   168b0:	mvn	r2, #0
   168b4:	mov	r1, #1
   168b8:	ldr	r6, [sp, #24]
   168bc:	mov	r0, r6
   168c0:	bl	11578 <__sprintf_chk@plt>
   168c4:	mov	r0, r6
   168c8:	bl	1153c <strlen@plt>
   168cc:	mov	r5, r0
   168d0:	add	r4, r4, #1
   168d4:	ldr	r3, [sp, #40]	; 0x28
   168d8:	cmp	r3, #0
   168dc:	movne	r3, #1
   168e0:	moveq	r3, #2
   168e4:	add	r3, r3, r4
   168e8:	cmp	r0, r3
   168ec:	bhi	16908 <__assert_fail@plt+0x5204>
   168f0:	tst	r8, #8
   168f4:	beq	16a54 <__assert_fail@plt+0x5350>
   168f8:	add	r3, r6, r0
   168fc:	ldrb	r3, [r3, #-1]
   16900:	cmp	r3, #48	; 0x30
   16904:	bne	16a54 <__assert_fail@plt+0x5350>
   16908:	vldr	d9, [pc, #704]	; 16bd0 <__assert_fail@plt+0x54cc>
   1690c:	vmul.f64	d0, d8, d9
   16910:	ldr	r0, [sp, #28]
   16914:	bl	16690 <__assert_fail@plt+0x4f8c>
   16918:	vdiv.f64	d0, d0, d9
   1691c:	vstr	d0, [sp]
   16920:	ldr	r3, [pc, #700]	; 16be4 <__assert_fail@plt+0x54e0>
   16924:	mvn	r2, #0
   16928:	mov	r1, #1
   1692c:	ldr	r4, [sp, #24]
   16930:	mov	r0, r4
   16934:	bl	11578 <__sprintf_chk@plt>
   16938:	mov	r0, r4
   1693c:	bl	1153c <strlen@plt>
   16940:	mov	r5, r0
   16944:	mov	r4, #0
   16948:	b	16a54 <__assert_fail@plt+0x5350>
   1694c:	ldrd	r2, [sp, #176]	; 0xb0
   16950:	orrs	r3, r2, r3
   16954:	beq	16824 <__assert_fail@plt+0x5120>
   16958:	ldrd	r2, [sp, #176]	; 0xb0
   1695c:	ldrd	r0, [sp, #184]	; 0xb8
   16960:	bl	1d124 <__assert_fail@plt+0xba20>
   16964:	orrs	r3, r2, r3
   16968:	bne	16824 <__assert_fail@plt+0x5120>
   1696c:	ldrd	r2, [sp, #176]	; 0xb0
   16970:	ldrd	r0, [sp, #184]	; 0xb8
   16974:	bl	1d124 <__assert_fail@plt+0xba20>
   16978:	strd	r0, [sp, #48]	; 0x30
   1697c:	mov	r2, r0
   16980:	mov	r3, r1
   16984:	ldrd	r0, [sp, #32]
   16988:	bl	1d124 <__assert_fail@plt+0xba20>
   1698c:	mov	r1, #10
   16990:	umull	r6, r7, r2, r1
   16994:	mla	r7, r1, r3, r7
   16998:	ldrd	r2, [sp, #48]	; 0x30
   1699c:	mov	r0, r6
   169a0:	mov	r1, r7
   169a4:	bl	1d124 <__assert_fail@plt+0xba20>
   169a8:	lsls	r0, r2, #1
   169ac:	adc	r1, r3, r3
   169b0:	strd	r0, [sp, #56]	; 0x38
   169b4:	ldrd	r2, [sp, #48]	; 0x30
   169b8:	ldrd	r0, [sp, #32]
   169bc:	bl	1d124 <__assert_fail@plt+0xba20>
   169c0:	strd	r0, [sp, #16]
   169c4:	ldrd	r2, [sp, #48]	; 0x30
   169c8:	mov	r0, r6
   169cc:	mov	r1, r7
   169d0:	bl	1d124 <__assert_fail@plt+0xba20>
   169d4:	mov	r6, r0
   169d8:	ldrd	r2, [sp, #48]	; 0x30
   169dc:	ldrd	r0, [sp, #56]	; 0x38
   169e0:	cmp	r3, r1
   169e4:	cmpeq	r2, r0
   169e8:	bls	16a00 <__assert_fail@plt+0x52fc>
   169ec:	mov	r3, r0
   169f0:	orrs	r3, r3, r1
   169f4:	movne	fp, #1
   169f8:	moveq	fp, #0
   169fc:	b	16acc <__assert_fail@plt+0x53c8>
   16a00:	ldrd	r2, [sp, #48]	; 0x30
   16a04:	ldrd	r0, [sp, #56]	; 0x38
   16a08:	cmp	r3, r1
   16a0c:	cmpeq	r2, r0
   16a10:	movcc	fp, #3
   16a14:	movcs	fp, #2
   16a18:	b	16acc <__assert_fail@plt+0x53c8>
   16a1c:	ldr	r0, [sp, #28]
   16a20:	bl	16690 <__assert_fail@plt+0x4f8c>
   16a24:	vstr	d0, [sp]
   16a28:	ldr	r3, [pc, #436]	; 16be4 <__assert_fail@plt+0x54e0>
   16a2c:	mvn	r2, #0
   16a30:	mov	r1, #1
   16a34:	ldr	r4, [sp, #24]
   16a38:	mov	r0, r4
   16a3c:	bl	11578 <__sprintf_chk@plt>
   16a40:	mov	r0, r4
   16a44:	bl	1153c <strlen@plt>
   16a48:	mov	r5, r0
   16a4c:	mov	r4, #0
   16a50:	mvn	r7, #0
   16a54:	sub	r6, sl, r5
   16a58:	mov	r2, r5
   16a5c:	ldr	r1, [sp, #24]
   16a60:	mov	r0, r6
   16a64:	bl	11344 <memmove@plt>
   16a68:	sub	r5, r5, r4
   16a6c:	add	r5, r6, r5
   16a70:	tst	r8, #4
   16a74:	bne	16e4c <__assert_fail@plt+0x5748>
   16a78:	tst	r8, #128	; 0x80
   16a7c:	beq	16f78 <__assert_fail@plt+0x5874>
   16a80:	cmp	r7, #0
   16a84:	blt	16edc <__assert_fail@plt+0x57d8>
   16a88:	and	r3, r8, #256	; 0x100
   16a8c:	orrs	r2, r7, r3
   16a90:	beq	16aac <__assert_fail@plt+0x53a8>
   16a94:	tst	r8, #64	; 0x40
   16a98:	beq	16aac <__assert_fail@plt+0x53a8>
   16a9c:	ldr	r1, [sp, #24]
   16aa0:	add	sl, r1, #648	; 0x288
   16aa4:	mov	r2, #32
   16aa8:	strb	r2, [r1, #647]	; 0x287
   16aac:	cmp	r7, #0
   16ab0:	bne	16f30 <__assert_fail@plt+0x582c>
   16ab4:	cmp	r3, #0
   16ab8:	beq	16f78 <__assert_fail@plt+0x5874>
   16abc:	mov	r2, sl
   16ac0:	b	16f6c <__assert_fail@plt+0x5868>
   16ac4:	mov	fp, #0
   16ac8:	mov	r6, fp
   16acc:	ands	r3, r8, #16
   16ad0:	str	r3, [sp, #48]	; 0x30
   16ad4:	streq	sl, [sp, #32]
   16ad8:	mvneq	r7, #0
   16adc:	beq	16c90 <__assert_fail@plt+0x558c>
   16ae0:	ldr	ip, [sp, #44]	; 0x2c
   16ae4:	mov	r3, #0
   16ae8:	ldrd	r0, [sp, #16]
   16aec:	cmp	r1, r3
   16af0:	cmpeq	r0, ip
   16af4:	strcc	sl, [sp, #32]
   16af8:	movcc	r7, #0
   16afc:	bcc	16c90 <__assert_fail@plt+0x558c>
   16b00:	mov	r7, #0
   16b04:	str	sl, [sp, #32]
   16b08:	mov	sl, ip
   16b0c:	str	r9, [sp, #56]	; 0x38
   16b10:	str	r8, [sp, #68]	; 0x44
   16b14:	mov	r8, ip
   16b18:	mov	r9, r3
   16b1c:	b	16b5c <__assert_fail@plt+0x5458>
   16b20:	add	fp, fp, r5
   16b24:	cmp	sl, fp
   16b28:	movcc	fp, #3
   16b2c:	movcs	fp, #2
   16b30:	add	r7, r7, #1
   16b34:	ldrd	r2, [sp, #16]
   16b38:	cmp	r9, r3
   16b3c:	cmpeq	r8, r2
   16b40:	movls	r3, #1
   16b44:	movhi	r3, #0
   16b48:	cmp	r7, #7
   16b4c:	movgt	r3, #0
   16b50:	andle	r3, r3, #1
   16b54:	cmp	r3, #0
   16b58:	beq	16bec <__assert_fail@plt+0x54e8>
   16b5c:	mov	r2, r8
   16b60:	mov	r3, r9
   16b64:	ldrd	r0, [sp, #16]
   16b68:	bl	1d124 <__assert_fail@plt+0xba20>
   16b6c:	add	r2, r2, r2, lsl #2
   16b70:	add	r6, r6, r2, lsl #1
   16b74:	mov	r1, sl
   16b78:	mov	r0, r6
   16b7c:	bl	1cb0c <__assert_fail@plt+0xb408>
   16b80:	asr	r5, fp, #1
   16b84:	add	r5, r5, r1, lsl #1
   16b88:	mov	r2, r8
   16b8c:	mov	r3, r9
   16b90:	ldrd	r0, [sp, #16]
   16b94:	bl	1d124 <__assert_fail@plt+0xba20>
   16b98:	strd	r0, [sp, #16]
   16b9c:	mov	r1, sl
   16ba0:	mov	r0, r6
   16ba4:	bl	1c920 <__assert_fail@plt+0xb21c>
   16ba8:	mov	r6, r0
   16bac:	cmp	sl, r5
   16bb0:	bls	16b20 <__assert_fail@plt+0x541c>
   16bb4:	cmn	fp, r5
   16bb8:	movne	fp, #1
   16bbc:	moveq	fp, #0
   16bc0:	b	16b30 <__assert_fail@plt+0x542c>
   16bc4:	nop			; (mov r0, r0)
   16bc8:	andeq	r0, r0, r0
   16bcc:	svccc	0x00f00000	; IMB
   16bd0:	andeq	r0, r0, r0
   16bd4:	eormi	r0, r4, r0
   16bd8:	andeq	lr, r1, r8, asr #7
   16bdc:	andeq	lr, r1, ip, asr #9
   16be0:	andeq	lr, r1, r0, lsl r5
   16be4:	andeq	lr, r1, r8, lsl #10
   16be8:	andeq	lr, r1, r8, ror #9
   16bec:	ldr	sl, [sp, #32]
   16bf0:	ldr	r9, [sp, #56]	; 0x38
   16bf4:	ldr	r8, [sp, #68]	; 0x44
   16bf8:	ldrd	r2, [sp, #16]
   16bfc:	cmp	r3, #0
   16c00:	cmpeq	r2, #9
   16c04:	strhi	sl, [sp, #32]
   16c08:	bhi	16c90 <__assert_fail@plt+0x558c>
   16c0c:	ldr	r3, [sp, #28]
   16c10:	cmp	r3, #1
   16c14:	beq	16d38 <__assert_fail@plt+0x5634>
   16c18:	ldr	r3, [sp, #28]
   16c1c:	clz	r3, r3
   16c20:	lsr	r3, r3, #5
   16c24:	cmp	fp, #0
   16c28:	moveq	r3, #0
   16c2c:	cmp	r3, #0
   16c30:	beq	16c44 <__assert_fail@plt+0x5540>
   16c34:	add	r6, r6, #1
   16c38:	cmp	r6, #10
   16c3c:	movne	fp, #0
   16c40:	beq	16d50 <__assert_fail@plt+0x564c>
   16c44:	cmp	r6, #0
   16c48:	bne	16c5c <__assert_fail@plt+0x5558>
   16c4c:	ands	r6, r8, #8
   16c50:	strne	sl, [sp, #32]
   16c54:	movne	r6, #0
   16c58:	bne	16c90 <__assert_fail@plt+0x558c>
   16c5c:	ldr	r3, [sp, #24]
   16c60:	add	r5, r3, #644	; 0x284
   16c64:	add	r5, r5, #2
   16c68:	add	r6, r6, #48	; 0x30
   16c6c:	strb	r6, [r3, #646]	; 0x286
   16c70:	sub	r3, r5, r4
   16c74:	str	r3, [sp, #32]
   16c78:	mov	r2, r4
   16c7c:	ldr	r1, [sp, #64]	; 0x40
   16c80:	mov	r0, r3
   16c84:	bl	11374 <memcpy@plt>
   16c88:	mov	r6, #0
   16c8c:	mov	fp, r6
   16c90:	ldr	r3, [sp, #28]
   16c94:	cmp	r3, #1
   16c98:	beq	16d80 <__assert_fail@plt+0x567c>
   16c9c:	ldr	r3, [sp, #28]
   16ca0:	cmp	r3, #0
   16ca4:	movne	fp, #0
   16ca8:	bne	16cbc <__assert_fail@plt+0x55b8>
   16cac:	add	fp, r6, fp
   16cb0:	cmp	fp, #0
   16cb4:	movle	fp, #0
   16cb8:	movgt	fp, #1
   16cbc:	cmp	fp, #0
   16cc0:	beq	16ddc <__assert_fail@plt+0x56d8>
   16cc4:	ldrd	r2, [sp, #16]
   16cc8:	adds	r2, r2, #1
   16ccc:	adc	r3, r3, #0
   16cd0:	mov	r0, r2
   16cd4:	mov	r1, r3
   16cd8:	strd	r0, [sp, #16]
   16cdc:	ldr	r3, [sp, #48]	; 0x30
   16ce0:	cmp	r3, #0
   16ce4:	beq	16ddc <__assert_fail@plt+0x56d8>
   16ce8:	ldr	r2, [sp, #44]	; 0x2c
   16cec:	mov	r3, #0
   16cf0:	cmp	r3, r1
   16cf4:	cmpeq	r2, r0
   16cf8:	moveq	r3, #1
   16cfc:	movne	r3, #0
   16d00:	cmp	r7, #7
   16d04:	movgt	r3, #0
   16d08:	andle	r3, r3, #1
   16d0c:	cmp	r3, #0
   16d10:	beq	16ddc <__assert_fail@plt+0x56d8>
   16d14:	add	r7, r7, #1
   16d18:	tst	r8, #8
   16d1c:	beq	16db0 <__assert_fail@plt+0x56ac>
   16d20:	ldr	r2, [sp, #32]
   16d24:	sub	r6, r2, #1
   16d28:	mov	r3, #49	; 0x31
   16d2c:	strb	r3, [r2, #-1]
   16d30:	mov	r5, r2
   16d34:	b	16a70 <__assert_fail@plt+0x536c>
   16d38:	and	r3, r6, #1
   16d3c:	add	r3, r3, fp
   16d40:	cmp	r3, #2
   16d44:	movle	r3, #0
   16d48:	movgt	r3, #1
   16d4c:	b	16c2c <__assert_fail@plt+0x5528>
   16d50:	ldrd	r2, [sp, #16]
   16d54:	adds	r2, r2, #1
   16d58:	adc	r3, r3, #0
   16d5c:	strd	r2, [sp, #16]
   16d60:	cmp	r3, #0
   16d64:	cmpeq	r2, #9
   16d68:	strhi	sl, [sp, #32]
   16d6c:	movhi	fp, #0
   16d70:	movhi	r6, fp
   16d74:	bhi	16c90 <__assert_fail@plt+0x558c>
   16d78:	mov	fp, #0
   16d7c:	b	16c4c <__assert_fail@plt+0x5548>
   16d80:	ldrd	r2, [sp, #16]
   16d84:	and	r2, r2, #1
   16d88:	mov	r3, #0
   16d8c:	adds	r2, r2, fp
   16d90:	adc	r3, r3, fp, asr #31
   16d94:	orr	r2, r2, r3
   16d98:	cmp	r2, #0
   16d9c:	addne	r6, r6, #1
   16da0:	cmp	r6, #5
   16da4:	movle	fp, #0
   16da8:	movgt	fp, #1
   16dac:	b	16cbc <__assert_fail@plt+0x55b8>
   16db0:	mov	r3, #48	; 0x30
   16db4:	ldr	r2, [sp, #32]
   16db8:	strb	r3, [r2, #-1]
   16dbc:	mvn	r3, r4
   16dc0:	add	r3, r2, r3
   16dc4:	str	r3, [sp, #32]
   16dc8:	mov	r2, r4
   16dcc:	ldr	r1, [sp, #64]	; 0x40
   16dd0:	mov	r0, r3
   16dd4:	bl	11374 <memcpy@plt>
   16dd8:	b	16d20 <__assert_fail@plt+0x561c>
   16ddc:	ldr	r6, [sp, #32]
   16de0:	mov	r4, #10
   16de4:	mov	r5, #0
   16de8:	mov	fp, r6
   16dec:	str	r8, [sp, #28]
   16df0:	mov	r8, r7
   16df4:	ldrd	r6, [sp, #16]
   16df8:	mov	r2, r4
   16dfc:	mov	r3, r5
   16e00:	mov	r0, r6
   16e04:	mov	r1, r7
   16e08:	bl	1d124 <__assert_fail@plt+0xba20>
   16e0c:	add	r2, r2, #48	; 0x30
   16e10:	strb	r2, [fp, #-1]!
   16e14:	mov	r2, r4
   16e18:	mov	r3, r5
   16e1c:	mov	r0, r6
   16e20:	mov	r1, r7
   16e24:	bl	1d124 <__assert_fail@plt+0xba20>
   16e28:	mov	r6, r0
   16e2c:	mov	r7, r1
   16e30:	orrs	r3, r6, r7
   16e34:	bne	16df8 <__assert_fail@plt+0x56f4>
   16e38:	mov	r7, r8
   16e3c:	mov	r6, fp
   16e40:	ldr	r8, [sp, #28]
   16e44:	ldr	r5, [sp, #32]
   16e48:	b	16a70 <__assert_fail@plt+0x536c>
   16e4c:	sub	r4, r5, r6
   16e50:	ldr	r0, [sp, #12]
   16e54:	bl	1153c <strlen@plt>
   16e58:	mov	fp, r0
   16e5c:	mov	r3, #41	; 0x29
   16e60:	mov	r2, r4
   16e64:	mov	r1, r6
   16e68:	add	r0, sp, #76	; 0x4c
   16e6c:	bl	11434 <__memcpy_chk@plt>
   16e70:	mov	r6, r5
   16e74:	mvn	r5, #0
   16e78:	b	16ebc <__assert_fail@plt+0x57b8>
   16e7c:	cmp	r5, r4
   16e80:	movcs	r5, r4
   16e84:	sub	r6, r6, r5
   16e88:	sub	r4, r4, r5
   16e8c:	mov	r2, r5
   16e90:	add	r3, sp, #76	; 0x4c
   16e94:	add	r1, r3, r4
   16e98:	mov	r0, r6
   16e9c:	bl	11374 <memcpy@plt>
   16ea0:	cmp	r4, #0
   16ea4:	beq	16a78 <__assert_fail@plt+0x5374>
   16ea8:	sub	r6, r6, fp
   16eac:	mov	r2, fp
   16eb0:	ldr	r1, [sp, #12]
   16eb4:	mov	r0, r6
   16eb8:	bl	11374 <memcpy@plt>
   16ebc:	ldrb	r3, [r9]
   16ec0:	cmp	r3, #0
   16ec4:	beq	16e7c <__assert_fail@plt+0x5778>
   16ec8:	cmp	r3, #255	; 0xff
   16ecc:	movne	r5, r3
   16ed0:	moveq	r5, r4
   16ed4:	add	r9, r9, #1
   16ed8:	b	16e7c <__assert_fail@plt+0x5778>
   16edc:	ldrd	r2, [sp, #184]	; 0xb8
   16ee0:	cmp	r3, #0
   16ee4:	cmpeq	r2, #1
   16ee8:	bls	16f98 <__assert_fail@plt+0x5894>
   16eec:	mov	r7, #1
   16ef0:	mov	r2, #1
   16ef4:	mov	r3, #0
   16ef8:	ldr	r1, [sp, #44]	; 0x2c
   16efc:	ldrd	r4, [sp, #184]	; 0xb8
   16f00:	mul	r0, r1, r3
   16f04:	umull	r2, r3, r2, r1
   16f08:	add	r3, r0, r3
   16f0c:	cmp	r5, r3
   16f10:	cmpeq	r4, r2
   16f14:	bls	16a88 <__assert_fail@plt+0x5384>
   16f18:	add	r7, r7, #1
   16f1c:	cmp	r7, #8
   16f20:	bne	16f00 <__assert_fail@plt+0x57fc>
   16f24:	and	r3, r8, #256	; 0x100
   16f28:	tst	r8, #64	; 0x40
   16f2c:	bne	16a9c <__assert_fail@plt+0x5398>
   16f30:	add	r2, sl, #1
   16f34:	ldr	r1, [sp, #40]	; 0x28
   16f38:	cmp	r1, #0
   16f3c:	cmpeq	r7, #1
   16f40:	ldrne	r1, [pc, #-864]	; 16be8 <__assert_fail@plt+0x54e4>
   16f44:	ldrbne	r1, [r1, r7]
   16f48:	moveq	r1, #107	; 0x6b
   16f4c:	strb	r1, [sl]
   16f50:	cmp	r3, #0
   16f54:	beq	16f90 <__assert_fail@plt+0x588c>
   16f58:	ldr	r3, [sp, #40]	; 0x28
   16f5c:	cmp	r3, #0
   16f60:	addne	r2, sl, #2
   16f64:	movne	r3, #105	; 0x69
   16f68:	strbne	r3, [sl, #1]
   16f6c:	add	sl, r2, #1
   16f70:	mov	r3, #66	; 0x42
   16f74:	strb	r3, [r2]
   16f78:	mov	r3, #0
   16f7c:	strb	r3, [sl]
   16f80:	mov	r0, r6
   16f84:	add	sp, sp, #124	; 0x7c
   16f88:	vpop	{d8-d9}
   16f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f90:	mov	sl, r2
   16f94:	b	16f78 <__assert_fail@plt+0x5874>
   16f98:	ands	r3, r8, #256	; 0x100
   16f9c:	movne	r7, #0
   16fa0:	bne	16a94 <__assert_fail@plt+0x5390>
   16fa4:	b	16ab4 <__assert_fail@plt+0x53b0>
   16fa8:	push	{r4, r5, r6, r7, lr}
   16fac:	sub	sp, sp, #20
   16fb0:	mov	r7, r1
   16fb4:	mov	r6, r2
   16fb8:	subs	r4, r0, #0
   16fbc:	beq	1702c <__assert_fail@plt+0x5928>
   16fc0:	ldrb	r3, [r4]
   16fc4:	cmp	r3, #39	; 0x27
   16fc8:	addeq	r4, r4, #1
   16fcc:	moveq	r5, #4
   16fd0:	movne	r5, #0
   16fd4:	ldr	r1, [pc, #332]	; 17128 <__assert_fail@plt+0x5a24>
   16fd8:	mov	r3, #4
   16fdc:	add	r2, r1, #12
   16fe0:	add	r1, r1, #20
   16fe4:	mov	r0, r4
   16fe8:	bl	1bb10 <__assert_fail@plt+0xa40c>
   16fec:	cmp	r0, #0
   16ff0:	blt	17070 <__assert_fail@plt+0x596c>
   16ff4:	ldr	r3, [pc, #300]	; 17128 <__assert_fail@plt+0x5a24>
   16ff8:	add	r0, r3, r0, lsl #2
   16ffc:	ldr	r3, [r0, #12]
   17000:	orr	r5, r5, r3
   17004:	mov	r2, #1
   17008:	mov	r3, #0
   1700c:	strd	r2, [r6]
   17010:	str	r5, [r7]
   17014:	mov	r0, #0
   17018:	ldrd	r2, [r6]
   1701c:	orrs	r3, r2, r3
   17020:	beq	17104 <__assert_fail@plt+0x5a00>
   17024:	add	sp, sp, #20
   17028:	pop	{r4, r5, r6, r7, pc}
   1702c:	ldr	r0, [pc, #248]	; 1712c <__assert_fail@plt+0x5a28>
   17030:	bl	114c4 <getenv@plt>
   17034:	subs	r4, r0, #0
   17038:	bne	16fc0 <__assert_fail@plt+0x58bc>
   1703c:	ldr	r0, [pc, #236]	; 17130 <__assert_fail@plt+0x5a2c>
   17040:	bl	114c4 <getenv@plt>
   17044:	subs	r4, r0, #0
   17048:	bne	16fc0 <__assert_fail@plt+0x58bc>
   1704c:	ldr	r0, [pc, #224]	; 17134 <__assert_fail@plt+0x5a30>
   17050:	bl	114c4 <getenv@plt>
   17054:	cmp	r0, #0
   17058:	moveq	r2, #1024	; 0x400
   1705c:	movne	r2, #512	; 0x200
   17060:	mov	r3, #0
   17064:	strd	r2, [r6]
   17068:	mov	r5, #0
   1706c:	b	17010 <__assert_fail@plt+0x590c>
   17070:	ldr	r3, [pc, #192]	; 17138 <__assert_fail@plt+0x5a34>
   17074:	str	r3, [sp]
   17078:	mov	r3, r6
   1707c:	mov	r2, #0
   17080:	add	r1, sp, #12
   17084:	mov	r0, r4
   17088:	bl	1ad98 <__assert_fail@plt+0x9694>
   1708c:	cmp	r0, #0
   17090:	movne	r3, #0
   17094:	strne	r3, [r7]
   17098:	bne	17018 <__assert_fail@plt+0x5914>
   1709c:	ldrb	r3, [r4]
   170a0:	sub	r3, r3, #48	; 0x30
   170a4:	uxtb	r3, r3
   170a8:	cmp	r3, #9
   170ac:	bls	17010 <__assert_fail@plt+0x590c>
   170b0:	ldr	r2, [sp, #12]
   170b4:	cmp	r4, r2
   170b8:	beq	170d8 <__assert_fail@plt+0x59d4>
   170bc:	ldrb	r3, [r4, #1]!
   170c0:	sub	r3, r3, #48	; 0x30
   170c4:	uxtb	r3, r3
   170c8:	cmp	r3, #9
   170cc:	bls	17010 <__assert_fail@plt+0x590c>
   170d0:	cmp	r4, r2
   170d4:	bne	170bc <__assert_fail@plt+0x59b8>
   170d8:	ldrb	r3, [r2, #-1]
   170dc:	cmp	r3, #66	; 0x42
   170e0:	orrne	r5, r5, #128	; 0x80
   170e4:	beq	170f0 <__assert_fail@plt+0x59ec>
   170e8:	orr	r5, r5, #32
   170ec:	b	17010 <__assert_fail@plt+0x590c>
   170f0:	orr	r5, r5, #384	; 0x180
   170f4:	ldrb	r3, [r2, #-2]
   170f8:	cmp	r3, #105	; 0x69
   170fc:	bne	17010 <__assert_fail@plt+0x590c>
   17100:	b	170e8 <__assert_fail@plt+0x59e4>
   17104:	ldr	r0, [pc, #40]	; 17134 <__assert_fail@plt+0x5a30>
   17108:	bl	114c4 <getenv@plt>
   1710c:	cmp	r0, #0
   17110:	moveq	r2, #1024	; 0x400
   17114:	movne	r2, #512	; 0x200
   17118:	mov	r3, #0
   1711c:	strd	r2, [r6]
   17120:	mov	r0, #4
   17124:	b	17024 <__assert_fail@plt+0x5920>
   17128:	andeq	lr, r1, r8, ror #9
   1712c:	andeq	lr, r1, r8, lsl r5
   17130:	andeq	lr, r1, r4, lsr #10
   17134:	andeq	lr, r1, r4, lsl #1
   17138:	andeq	lr, r1, r0, lsr r5
   1713c:	push	{r4, r5, r6, r8, r9, lr}
   17140:	mov	r4, r0
   17144:	mov	r5, r1
   17148:	add	r6, r2, #20
   1714c:	mov	r3, #0
   17150:	strb	r3, [r2, #20]
   17154:	mov	r8, #10
   17158:	mov	r9, #0
   1715c:	mov	r2, r8
   17160:	mov	r3, r9
   17164:	mov	r0, r4
   17168:	mov	r1, r5
   1716c:	bl	1d124 <__assert_fail@plt+0xba20>
   17170:	add	r2, r2, #48	; 0x30
   17174:	strb	r2, [r6, #-1]!
   17178:	mov	r2, r8
   1717c:	mov	r3, r9
   17180:	mov	r0, r4
   17184:	mov	r1, r5
   17188:	bl	1d124 <__assert_fail@plt+0xba20>
   1718c:	mov	r4, r0
   17190:	mov	r5, r1
   17194:	orrs	r3, r4, r5
   17198:	bne	1715c <__assert_fail@plt+0x5a58>
   1719c:	mov	r0, r6
   171a0:	pop	{r4, r5, r6, r8, r9, pc}
   171a4:	push	{r4, r5, r6, r7, lr}
   171a8:	sub	sp, sp, #12
   171ac:	mov	r7, r1
   171b0:	mov	r5, r2
   171b4:	subs	r6, r0, #0
   171b8:	addeq	r6, sp, #4
   171bc:	mov	r0, r6
   171c0:	bl	1147c <mbrtowc@plt>
   171c4:	mov	r4, r0
   171c8:	cmp	r5, #0
   171cc:	cmnne	r0, #3
   171d0:	bhi	171e0 <__assert_fail@plt+0x5adc>
   171d4:	mov	r0, r4
   171d8:	add	sp, sp, #12
   171dc:	pop	{r4, r5, r6, r7, pc}
   171e0:	mov	r0, #0
   171e4:	bl	1c4b0 <__assert_fail@plt+0xadac>
   171e8:	cmp	r0, #0
   171ec:	ldrbeq	r3, [r7]
   171f0:	streq	r3, [r6]
   171f4:	moveq	r4, #1
   171f8:	b	171d4 <__assert_fail@plt+0x5ad0>
   171fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17200:	sub	sp, sp, #20
   17204:	str	r0, [sp, #8]
   17208:	mov	r4, r1
   1720c:	mov	r6, r2
   17210:	mov	r9, r3
   17214:	ldr	r8, [sp, #60]	; 0x3c
   17218:	bl	1153c <strlen@plt>
   1721c:	mov	fp, r0
   17220:	tst	r8, #2
   17224:	movne	r3, #0
   17228:	strne	r3, [sp, #4]
   1722c:	beq	172c0 <__assert_fail@plt+0x5bbc>
   17230:	mov	r5, fp
   17234:	mov	sl, #0
   17238:	ldr	r3, [r9]
   1723c:	cmp	r5, r3
   17240:	movhi	fp, r3
   17244:	movhi	r7, #0
   17248:	bls	17548 <__assert_fail@plt+0x5e44>
   1724c:	str	r3, [r9]
   17250:	ldr	r3, [sp, #56]	; 0x38
   17254:	cmp	r3, #0
   17258:	moveq	r5, #0
   1725c:	beq	1727c <__assert_fail@plt+0x5b78>
   17260:	cmp	r3, #1
   17264:	moveq	r5, r7
   17268:	moveq	r7, #0
   1726c:	lsrne	r3, r7, #1
   17270:	andne	r7, r7, #1
   17274:	addne	r5, r7, r3
   17278:	movne	r7, r3
   1727c:	and	r3, r8, #4
   17280:	cmp	r3, #0
   17284:	movne	r5, #0
   17288:	and	r8, r8, #8
   1728c:	cmp	r8, #0
   17290:	movne	r7, #0
   17294:	cmp	r6, #0
   17298:	bne	17478 <__assert_fail@plt+0x5d74>
   1729c:	add	fp, r5, fp
   172a0:	add	r7, fp, r7
   172a4:	ldr	r0, [sp, #4]
   172a8:	bl	15478 <__assert_fail@plt+0x3d74>
   172ac:	mov	r0, sl
   172b0:	bl	15478 <__assert_fail@plt+0x3d74>
   172b4:	mov	r0, r7
   172b8:	add	sp, sp, #20
   172bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172c0:	bl	11458 <__ctype_get_mb_cur_max@plt>
   172c4:	cmp	r0, #1
   172c8:	bls	17514 <__assert_fail@plt+0x5e10>
   172cc:	mov	r2, #0
   172d0:	ldr	r1, [sp, #8]
   172d4:	mov	r0, r2
   172d8:	bl	11668 <mbstowcs@plt>
   172dc:	cmn	r0, #1
   172e0:	beq	1740c <__assert_fail@plt+0x5d08>
   172e4:	add	sl, r0, #1
   172e8:	lsl	r5, sl, #2
   172ec:	mov	r0, r5
   172f0:	bl	1b268 <__assert_fail@plt+0x9b64>
   172f4:	subs	r3, r0, #0
   172f8:	str	r3, [sp, #4]
   172fc:	beq	17428 <__assert_fail@plt+0x5d24>
   17300:	mov	r2, sl
   17304:	ldr	r1, [sp, #8]
   17308:	ldr	r0, [sp, #4]
   1730c:	bl	11668 <mbstowcs@plt>
   17310:	cmp	r0, #0
   17314:	beq	17230 <__assert_fail@plt+0x5b2c>
   17318:	ldr	r2, [sp, #4]
   1731c:	add	r5, r2, r5
   17320:	mov	r3, #0
   17324:	str	r3, [r5, #-4]
   17328:	ldr	r0, [r2]
   1732c:	cmp	r0, #0
   17330:	beq	17520 <__assert_fail@plt+0x5e1c>
   17334:	mov	r5, r2
   17338:	mov	r7, #0
   1733c:	bl	11410 <iswprint@plt>
   17340:	cmp	r0, #0
   17344:	ldreq	r3, [pc, #532]	; 17560 <__assert_fail@plt+0x5e5c>
   17348:	streq	r3, [r5]
   1734c:	moveq	r7, #1
   17350:	ldr	r0, [r5, #4]!
   17354:	cmp	r0, #0
   17358:	bne	1733c <__assert_fail@plt+0x5c38>
   1735c:	mov	r1, sl
   17360:	ldr	r0, [sp, #4]
   17364:	bl	11620 <wcswidth@plt>
   17368:	mov	r5, r0
   1736c:	cmp	r7, #0
   17370:	beq	17530 <__assert_fail@plt+0x5e2c>
   17374:	mov	r2, #0
   17378:	ldr	r1, [sp, #4]
   1737c:	mov	r0, r2
   17380:	bl	11488 <wcstombs@plt>
   17384:	add	r3, r0, #1
   17388:	str	r3, [sp, #12]
   1738c:	ldr	r0, [sp, #12]
   17390:	bl	1b268 <__assert_fail@plt+0x9b64>
   17394:	subs	sl, r0, #0
   17398:	beq	1743c <__assert_fail@plt+0x5d38>
   1739c:	ldr	fp, [r9]
   173a0:	ldr	r3, [sp, #4]
   173a4:	ldr	r0, [r3]
   173a8:	cmp	r0, #0
   173ac:	beq	1744c <__assert_fail@plt+0x5d48>
   173b0:	mov	r7, r3
   173b4:	mov	r5, #0
   173b8:	bl	11338 <wcwidth@plt>
   173bc:	cmn	r0, #1
   173c0:	ldreq	r3, [pc, #408]	; 17560 <__assert_fail@plt+0x5e5c>
   173c4:	streq	r3, [r7]
   173c8:	moveq	r0, #1
   173cc:	add	r3, r0, r5
   173d0:	cmp	fp, r3
   173d4:	bcc	173e8 <__assert_fail@plt+0x5ce4>
   173d8:	ldr	r0, [r7, #4]!
   173dc:	mov	r5, r3
   173e0:	cmp	r0, #0
   173e4:	bne	173b8 <__assert_fail@plt+0x5cb4>
   173e8:	mov	r3, #0
   173ec:	str	r3, [r7]
   173f0:	ldr	r2, [sp, #12]
   173f4:	ldr	r1, [sp, #4]
   173f8:	mov	r0, sl
   173fc:	bl	11488 <wcstombs@plt>
   17400:	mov	fp, r0
   17404:	str	sl, [sp, #8]
   17408:	b	17238 <__assert_fail@plt+0x5b34>
   1740c:	tst	r8, #1
   17410:	bne	17458 <__assert_fail@plt+0x5d54>
   17414:	mov	r3, #0
   17418:	str	r3, [sp, #4]
   1741c:	mov	sl, r3
   17420:	mvn	r7, #0
   17424:	b	172a4 <__assert_fail@plt+0x5ba0>
   17428:	tst	r8, #1
   1742c:	bne	1746c <__assert_fail@plt+0x5d68>
   17430:	mov	sl, #0
   17434:	mvn	r7, #0
   17438:	b	172a4 <__assert_fail@plt+0x5ba0>
   1743c:	tst	r8, #1
   17440:	mvneq	r7, #0
   17444:	beq	172a4 <__assert_fail@plt+0x5ba0>
   17448:	b	17238 <__assert_fail@plt+0x5b34>
   1744c:	ldr	r7, [sp, #4]
   17450:	mov	r5, #0
   17454:	b	173e8 <__assert_fail@plt+0x5ce4>
   17458:	mov	r5, fp
   1745c:	mov	r3, #0
   17460:	str	r3, [sp, #4]
   17464:	mov	sl, r3
   17468:	b	17238 <__assert_fail@plt+0x5b34>
   1746c:	mov	r5, fp
   17470:	mov	sl, #0
   17474:	b	17238 <__assert_fail@plt+0x5b34>
   17478:	sub	r6, r6, #1
   1747c:	add	r6, r4, r6
   17480:	sub	r3, r5, #1
   17484:	cmp	r5, #0
   17488:	cmpne	r4, r6
   1748c:	bcs	174b4 <__assert_fail@plt+0x5db0>
   17490:	mov	r1, #32
   17494:	strb	r1, [r4], #1
   17498:	cmp	r3, #0
   1749c:	cmpne	r6, r4
   174a0:	movhi	r2, #1
   174a4:	movls	r2, #0
   174a8:	sub	r3, r3, #1
   174ac:	cmp	r2, #0
   174b0:	bne	17494 <__assert_fail@plt+0x5d90>
   174b4:	mov	r3, #0
   174b8:	strb	r3, [r4]
   174bc:	sub	r2, r6, r4
   174c0:	cmp	r2, fp
   174c4:	movcs	r2, fp
   174c8:	ldr	r1, [sp, #8]
   174cc:	mov	r0, r4
   174d0:	bl	11500 <mempcpy@plt>
   174d4:	sub	r3, r7, #1
   174d8:	cmp	r7, #0
   174dc:	cmpne	r6, r0
   174e0:	bls	17508 <__assert_fail@plt+0x5e04>
   174e4:	mov	r1, #32
   174e8:	strb	r1, [r0], #1
   174ec:	cmp	r3, #0
   174f0:	cmpne	r6, r0
   174f4:	movhi	r2, #1
   174f8:	movls	r2, #0
   174fc:	sub	r3, r3, #1
   17500:	cmp	r2, #0
   17504:	bne	174e8 <__assert_fail@plt+0x5de4>
   17508:	mov	r3, #0
   1750c:	strb	r3, [r0]
   17510:	b	1729c <__assert_fail@plt+0x5b98>
   17514:	mov	r3, #0
   17518:	str	r3, [sp, #4]
   1751c:	b	17230 <__assert_fail@plt+0x5b2c>
   17520:	mov	r1, sl
   17524:	ldr	r0, [sp, #4]
   17528:	bl	11620 <wcswidth@plt>
   1752c:	mov	r5, r0
   17530:	ldr	r3, [r9]
   17534:	cmp	r3, r5
   17538:	addcc	r3, fp, #1
   1753c:	strcc	r3, [sp, #12]
   17540:	bcc	1738c <__assert_fail@plt+0x5c88>
   17544:	mov	sl, #0
   17548:	cmp	r5, r3
   1754c:	movcs	r3, r5
   17550:	movcs	r7, #0
   17554:	subcc	r7, r3, r5
   17558:	movcc	r3, r5
   1755c:	b	1724c <__assert_fail@plt+0x5b48>
   17560:	strdeq	pc, [r0], -sp
   17564:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17568:	sub	sp, sp, #12
   1756c:	mov	fp, r0
   17570:	mov	r6, r1
   17574:	mov	sl, r2
   17578:	mov	r9, r3
   1757c:	ldr	r8, [r1]
   17580:	mov	r0, r8
   17584:	mov	r7, #0
   17588:	add	r4, r0, #1
   1758c:	mov	r1, r4
   17590:	mov	r0, r7
   17594:	bl	1b298 <__assert_fail@plt+0x9b94>
   17598:	subs	r5, r0, #0
   1759c:	beq	175d8 <__assert_fail@plt+0x5ed4>
   175a0:	str	r8, [r6]
   175a4:	str	r9, [sp, #4]
   175a8:	str	sl, [sp]
   175ac:	mov	r3, r6
   175b0:	mov	r2, r4
   175b4:	mov	r1, r5
   175b8:	mov	r0, fp
   175bc:	bl	171fc <__assert_fail@plt+0x5af8>
   175c0:	cmn	r0, #1
   175c4:	beq	175ec <__assert_fail@plt+0x5ee8>
   175c8:	mov	r7, r5
   175cc:	cmp	r4, r0
   175d0:	bls	17588 <__assert_fail@plt+0x5e84>
   175d4:	b	175e0 <__assert_fail@plt+0x5edc>
   175d8:	mov	r0, r7
   175dc:	bl	15478 <__assert_fail@plt+0x3d74>
   175e0:	mov	r0, r5
   175e4:	add	sp, sp, #12
   175e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175ec:	mov	r0, r5
   175f0:	bl	15478 <__assert_fail@plt+0x3d74>
   175f4:	mov	r5, #0
   175f8:	b	175e0 <__assert_fail@plt+0x5edc>
   175fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17600:	sub	sp, sp, #28
   17604:	mov	r5, r0
   17608:	mov	r4, r2
   1760c:	add	r8, r0, r1
   17610:	bl	11458 <__ctype_get_mb_cur_max@plt>
   17614:	cmp	r0, #1
   17618:	bls	17640 <__assert_fail@plt+0x5f3c>
   1761c:	cmp	r5, r8
   17620:	bcs	177dc <__assert_fail@plt+0x60d8>
   17624:	mov	r6, #0
   17628:	mov	fp, r6
   1762c:	and	sl, r4, #2
   17630:	mvn	r9, #-2147483648	; 0x80000000
   17634:	and	r3, r4, #1
   17638:	str	r3, [sp, #4]
   1763c:	b	1768c <__assert_fail@plt+0x5f88>
   17640:	cmp	r5, r8
   17644:	movcs	r6, #0
   17648:	bcs	17784 <__assert_fail@plt+0x6080>
   1764c:	bl	11518 <__ctype_b_loc@plt>
   17650:	ldr	r1, [r0]
   17654:	mov	r6, #0
   17658:	and	r2, r4, #2
   1765c:	b	1779c <__assert_fail@plt+0x6098>
   17660:	cmp	r3, #65	; 0x41
   17664:	bcc	176ac <__assert_fail@plt+0x5fa8>
   17668:	cmp	r3, #95	; 0x5f
   1766c:	bls	1767c <__assert_fail@plt+0x5f78>
   17670:	sub	r3, r3, #97	; 0x61
   17674:	cmp	r3, #29
   17678:	bhi	176ac <__assert_fail@plt+0x5fa8>
   1767c:	add	r5, r5, #1
   17680:	add	r6, r6, #1
   17684:	cmp	r8, r5
   17688:	bls	17784 <__assert_fail@plt+0x6080>
   1768c:	ldrb	r3, [r5]
   17690:	cmp	r3, #63	; 0x3f
   17694:	bhi	17660 <__assert_fail@plt+0x5f5c>
   17698:	cmp	r3, #37	; 0x25
   1769c:	bcs	1767c <__assert_fail@plt+0x5f78>
   176a0:	sub	r3, r3, #32
   176a4:	cmp	r3, #3
   176a8:	bls	1767c <__assert_fail@plt+0x5f78>
   176ac:	add	r7, sp, #24
   176b0:	str	fp, [r7, #-8]!
   176b4:	str	fp, [sp, #20]
   176b8:	b	17724 <__assert_fail@plt+0x6020>
   176bc:	ldr	r3, [sp, #4]
   176c0:	cmp	r3, #0
   176c4:	bne	17778 <__assert_fail@plt+0x6074>
   176c8:	add	r5, r5, #1
   176cc:	add	r6, r6, #1
   176d0:	b	17684 <__assert_fail@plt+0x5f80>
   176d4:	ldr	r3, [sp, #4]
   176d8:	cmp	r3, #0
   176dc:	bne	17778 <__assert_fail@plt+0x6074>
   176e0:	add	r6, r6, #1
   176e4:	mov	r5, r8
   176e8:	b	17684 <__assert_fail@plt+0x5f80>
   176ec:	cmp	sl, #0
   176f0:	bne	17778 <__assert_fail@plt+0x6074>
   176f4:	ldr	r0, [sp, #12]
   176f8:	bl	113ec <iswcntrl@plt>
   176fc:	cmp	r0, #0
   17700:	bne	17710 <__assert_fail@plt+0x600c>
   17704:	cmn	r6, #-2147483647	; 0x80000001
   17708:	beq	17780 <__assert_fail@plt+0x607c>
   1770c:	add	r6, r6, #1
   17710:	add	r5, r5, r4
   17714:	mov	r0, r7
   17718:	bl	1138c <mbsinit@plt>
   1771c:	cmp	r0, #0
   17720:	bne	17684 <__assert_fail@plt+0x5f80>
   17724:	mov	r3, r7
   17728:	sub	r2, r8, r5
   1772c:	mov	r1, r5
   17730:	add	r0, sp, #12
   17734:	bl	171a4 <__assert_fail@plt+0x5aa0>
   17738:	mov	r4, r0
   1773c:	cmn	r0, #1
   17740:	beq	176bc <__assert_fail@plt+0x5fb8>
   17744:	cmn	r0, #2
   17748:	beq	176d4 <__assert_fail@plt+0x5fd0>
   1774c:	cmp	r0, #0
   17750:	moveq	r4, #1
   17754:	ldr	r0, [sp, #12]
   17758:	bl	11338 <wcwidth@plt>
   1775c:	cmp	r0, #0
   17760:	blt	176ec <__assert_fail@plt+0x5fe8>
   17764:	sub	r3, r9, r6
   17768:	cmp	r0, r3
   1776c:	bgt	17780 <__assert_fail@plt+0x607c>
   17770:	add	r6, r6, r0
   17774:	b	17710 <__assert_fail@plt+0x600c>
   17778:	mvn	r6, #0
   1777c:	b	17784 <__assert_fail@plt+0x6080>
   17780:	mvn	r6, #-2147483648	; 0x80000000
   17784:	mov	r0, r6
   17788:	add	sp, sp, #28
   1778c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17790:	add	r6, r6, #1
   17794:	cmp	r8, r5
   17798:	beq	17784 <__assert_fail@plt+0x6080>
   1779c:	ldrb	r3, [r5], #1
   177a0:	lsl	r3, r3, #1
   177a4:	ldrh	r3, [r1, r3]
   177a8:	tst	r3, #16384	; 0x4000
   177ac:	beq	177bc <__assert_fail@plt+0x60b8>
   177b0:	cmn	r6, #-2147483647	; 0x80000001
   177b4:	bne	17790 <__assert_fail@plt+0x608c>
   177b8:	b	17784 <__assert_fail@plt+0x6080>
   177bc:	cmp	r2, #0
   177c0:	bne	177e4 <__assert_fail@plt+0x60e0>
   177c4:	tst	r3, #2
   177c8:	bne	17794 <__assert_fail@plt+0x6090>
   177cc:	cmn	r6, #-2147483647	; 0x80000001
   177d0:	beq	17784 <__assert_fail@plt+0x6080>
   177d4:	add	r6, r6, #1
   177d8:	b	17794 <__assert_fail@plt+0x6090>
   177dc:	mov	r6, #0
   177e0:	b	17784 <__assert_fail@plt+0x6080>
   177e4:	mvn	r6, #0
   177e8:	b	17784 <__assert_fail@plt+0x6080>
   177ec:	push	{r4, r5, r6, lr}
   177f0:	mov	r4, r0
   177f4:	mov	r5, r1
   177f8:	bl	1153c <strlen@plt>
   177fc:	mov	r2, r5
   17800:	mov	r1, r0
   17804:	mov	r0, r4
   17808:	bl	175fc <__assert_fail@plt+0x5ef8>
   1780c:	pop	{r4, r5, r6, pc}
   17810:	push	{r4, lr}
   17814:	mov	r1, #32
   17818:	bl	11548 <strchr@plt>
   1781c:	cmp	r0, #0
   17820:	movne	r3, #0
   17824:	strbne	r3, [r0]
   17828:	pop	{r4, pc}
   1782c:	push	{r4, r5, r6, lr}
   17830:	mov	r4, r0
   17834:	bl	1153c <strlen@plt>
   17838:	adds	r0, r0, #1
   1783c:	popeq	{r4, r5, r6, pc}
   17840:	mov	r2, r4
   17844:	mov	r3, #0
   17848:	b	17860 <__assert_fail@plt+0x615c>
   1784c:	strb	r1, [r2]
   17850:	add	r3, r3, #1
   17854:	add	r2, r2, #1
   17858:	cmp	r0, r3
   1785c:	bls	178d8 <__assert_fail@plt+0x61d4>
   17860:	ldrb	r1, [r4, r3]
   17864:	cmp	r1, #92	; 0x5c
   17868:	bne	1784c <__assert_fail@plt+0x6148>
   1786c:	add	ip, r3, #4
   17870:	cmp	r0, ip
   17874:	bls	1784c <__assert_fail@plt+0x6148>
   17878:	add	ip, r4, r3
   1787c:	ldrb	lr, [ip, #1]
   17880:	sub	ip, lr, #48	; 0x30
   17884:	uxtb	ip, ip
   17888:	cmp	ip, #3
   1788c:	bhi	1784c <__assert_fail@plt+0x6148>
   17890:	add	ip, r4, r3
   17894:	ldrb	r5, [ip, #2]
   17898:	sub	ip, r5, #48	; 0x30
   1789c:	uxtb	ip, ip
   178a0:	cmp	ip, #7
   178a4:	bhi	1784c <__assert_fail@plt+0x6148>
   178a8:	add	r6, r3, #3
   178ac:	ldrb	ip, [r4, r6]
   178b0:	sub	ip, ip, #48	; 0x30
   178b4:	uxtb	ip, ip
   178b8:	cmp	ip, #7
   178bc:	bhi	1784c <__assert_fail@plt+0x6148>
   178c0:	add	r3, r5, lr, lsl #3
   178c4:	sub	r3, r3, #432	; 0x1b0
   178c8:	add	r3, ip, r3, lsl #3
   178cc:	strb	r3, [r2]
   178d0:	mov	r3, r6
   178d4:	b	17850 <__assert_fail@plt+0x614c>
   178d8:	pop	{r4, r5, r6, pc}
   178dc:	push	{r4, lr}
   178e0:	mov	r4, r0
   178e4:	ldr	r0, [r0]
   178e8:	bl	15478 <__assert_fail@plt+0x3d74>
   178ec:	ldr	r0, [r4, #4]
   178f0:	bl	15478 <__assert_fail@plt+0x3d74>
   178f4:	ldr	r0, [r4, #8]
   178f8:	bl	15478 <__assert_fail@plt+0x3d74>
   178fc:	ldrb	r3, [r4, #24]
   17900:	tst	r3, #4
   17904:	bne	17914 <__assert_fail@plt+0x6210>
   17908:	mov	r0, r4
   1790c:	bl	15478 <__assert_fail@plt+0x3d74>
   17910:	pop	{r4, pc}
   17914:	ldr	r0, [r4, #12]
   17918:	bl	15478 <__assert_fail@plt+0x3d74>
   1791c:	b	17908 <__assert_fail@plt+0x6204>
   17920:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17924:	sub	sp, sp, #68	; 0x44
   17928:	ldr	r1, [pc, #1480]	; 17ef8 <__assert_fail@plt+0x67f4>
   1792c:	ldr	r0, [pc, #1480]	; 17efc <__assert_fail@plt+0x67f8>
   17930:	bl	1168c <fopen64@plt>
   17934:	subs	r8, r0, #0
   17938:	beq	17ec8 <__assert_fail@plt+0x67c4>
   1793c:	mov	r3, #0
   17940:	str	r3, [sp, #40]	; 0x28
   17944:	str	r3, [sp, #44]	; 0x2c
   17948:	add	r9, sp, #60	; 0x3c
   1794c:	ldr	sl, [pc, #1452]	; 17f00 <__assert_fail@plt+0x67fc>
   17950:	ldr	fp, [pc, #1452]	; 17f04 <__assert_fail@plt+0x6800>
   17954:	mov	r3, r8
   17958:	mov	r2, #10
   1795c:	add	r1, sp, #44	; 0x2c
   17960:	add	r0, sp, #40	; 0x28
   17964:	bl	11314 <__getdelim@plt>
   17968:	cmn	r0, #1
   1796c:	beq	17e34 <__assert_fail@plt+0x6730>
   17970:	add	r3, sp, #56	; 0x38
   17974:	str	r3, [sp]
   17978:	add	r3, sp, #52	; 0x34
   1797c:	add	r2, sp, #48	; 0x30
   17980:	mov	r1, sl
   17984:	ldr	r0, [sp, #40]	; 0x28
   17988:	bl	11650 <sscanf@plt>
   1798c:	sub	r0, r0, #2
   17990:	cmp	r0, #1
   17994:	bhi	17954 <__assert_fail@plt+0x6250>
   17998:	ldr	r3, [sp, #56]	; 0x38
   1799c:	ldr	r4, [sp, #40]	; 0x28
   179a0:	add	r4, r4, r3
   179a4:	mov	r0, r4
   179a8:	bl	17810 <__assert_fail@plt+0x610c>
   179ac:	cmp	r0, #0
   179b0:	beq	17954 <__assert_fail@plt+0x6250>
   179b4:	add	r5, r0, #1
   179b8:	mov	r0, r5
   179bc:	bl	17810 <__assert_fail@plt+0x610c>
   179c0:	cmp	r0, #0
   179c4:	beq	17954 <__assert_fail@plt+0x6250>
   179c8:	mov	r1, fp
   179cc:	add	r0, r0, #1
   179d0:	bl	1b784 <__assert_fail@plt+0xa080>
   179d4:	cmp	r0, #0
   179d8:	beq	17954 <__assert_fail@plt+0x6250>
   179dc:	add	r6, r0, #3
   179e0:	mov	r0, r6
   179e4:	bl	17810 <__assert_fail@plt+0x610c>
   179e8:	cmp	r0, #0
   179ec:	beq	17954 <__assert_fail@plt+0x6250>
   179f0:	add	r7, r0, #1
   179f4:	mov	r0, r7
   179f8:	bl	17810 <__assert_fail@plt+0x610c>
   179fc:	cmp	r0, #0
   17a00:	beq	17954 <__assert_fail@plt+0x6250>
   17a04:	mov	r0, r7
   17a08:	bl	1782c <__assert_fail@plt+0x6128>
   17a0c:	mov	r0, r5
   17a10:	bl	1782c <__assert_fail@plt+0x6128>
   17a14:	mov	r0, r4
   17a18:	bl	1782c <__assert_fail@plt+0x6128>
   17a1c:	mov	r0, r6
   17a20:	bl	1782c <__assert_fail@plt+0x6128>
   17a24:	mov	r0, #32
   17a28:	bl	1a5e4 <__assert_fail@plt+0x8ee0>
   17a2c:	str	r0, [sp, #24]
   17a30:	mov	r0, r7
   17a34:	bl	1ab6c <__assert_fail@plt+0x9468>
   17a38:	ldr	r3, [sp, #24]
   17a3c:	str	r0, [r3]
   17a40:	mov	r0, r5
   17a44:	bl	1ab6c <__assert_fail@plt+0x9468>
   17a48:	ldr	r3, [sp, #24]
   17a4c:	str	r0, [r3, #4]
   17a50:	mov	r0, r4
   17a54:	bl	1ab6c <__assert_fail@plt+0x9468>
   17a58:	ldr	r3, [sp, #24]
   17a5c:	str	r0, [r3, #8]
   17a60:	mov	r0, r6
   17a64:	bl	1ab6c <__assert_fail@plt+0x9468>
   17a68:	str	r0, [sp, #28]
   17a6c:	ldr	r3, [sp, #24]
   17a70:	str	r0, [r3, #12]
   17a74:	ldrb	r3, [r3, #24]
   17a78:	orr	r3, r3, #4
   17a7c:	ldr	r2, [sp, #24]
   17a80:	strb	r3, [r2, #24]
   17a84:	ldr	r1, [sp, #52]	; 0x34
   17a88:	ldr	lr, [sp, #48]	; 0x30
   17a8c:	mov	ip, #0
   17a90:	lsr	r3, lr, #24
   17a94:	str	r3, [sp, #12]
   17a98:	lsl	r3, lr, #8
   17a9c:	str	r3, [sp, #8]
   17aa0:	ldr	r2, [pc, #1120]	; 17f08 <__assert_fail@plt+0x6804>
   17aa4:	mov	r3, #0
   17aa8:	ldrd	r4, [sp, #8]
   17aac:	and	r4, r4, r2
   17ab0:	and	r5, r5, r3
   17ab4:	mov	r6, r4
   17ab8:	mov	r7, r5
   17abc:	str	lr, [sp, #36]	; 0x24
   17ac0:	str	ip, [sp, #32]
   17ac4:	mov	r4, #0
   17ac8:	ldr	r5, [pc, #1084]	; 17f0c <__assert_fail@plt+0x6808>
   17acc:	ldrd	r2, [sp, #32]
   17ad0:	and	r2, r2, r4
   17ad4:	and	r3, r3, r5
   17ad8:	mov	r4, r2
   17adc:	mov	r5, r3
   17ae0:	orr	r2, r6, r4
   17ae4:	orr	r3, r7, r5
   17ae8:	uxtb	r4, r1
   17aec:	mov	r5, #0
   17af0:	orr	r6, r4, r2
   17af4:	orr	r7, r5, r3
   17af8:	lsr	r3, r1, #20
   17afc:	str	r3, [sp, #20]
   17b00:	lsl	r3, r1, #12
   17b04:	str	r3, [sp, #16]
   17b08:	add	r3, pc, #992	; 0x3e0
   17b0c:	ldrd	r2, [r3]
   17b10:	ldrd	r4, [sp, #16]
   17b14:	and	r4, r4, r2
   17b18:	and	r5, r5, r3
   17b1c:	mov	r2, r4
   17b20:	mov	r3, r5
   17b24:	orr	r4, r6, r2
   17b28:	orr	r5, r7, r3
   17b2c:	mov	r2, r4
   17b30:	mov	r3, r5
   17b34:	ldr	r1, [sp, #24]
   17b38:	strd	r2, [r1, #16]
   17b3c:	ldr	r1, [pc, #972]	; 17f10 <__assert_fail@plt+0x680c>
   17b40:	bl	11320 <strcmp@plt>
   17b44:	cmp	r0, #0
   17b48:	moveq	r0, #1
   17b4c:	beq	17c84 <__assert_fail@plt+0x6580>
   17b50:	ldr	r1, [pc, #956]	; 17f14 <__assert_fail@plt+0x6810>
   17b54:	ldr	r0, [sp, #28]
   17b58:	bl	11320 <strcmp@plt>
   17b5c:	cmp	r0, #0
   17b60:	moveq	r0, #1
   17b64:	beq	17c84 <__assert_fail@plt+0x6580>
   17b68:	ldr	r1, [pc, #948]	; 17f24 <__assert_fail@plt+0x6820>
   17b6c:	ldr	r0, [sp, #28]
   17b70:	bl	11320 <strcmp@plt>
   17b74:	cmp	r0, #0
   17b78:	moveq	r0, #1
   17b7c:	beq	17c84 <__assert_fail@plt+0x6580>
   17b80:	ldr	r1, [pc, #928]	; 17f28 <__assert_fail@plt+0x6824>
   17b84:	ldr	r0, [sp, #28]
   17b88:	bl	11320 <strcmp@plt>
   17b8c:	cmp	r0, #0
   17b90:	moveq	r0, #1
   17b94:	beq	17c84 <__assert_fail@plt+0x6580>
   17b98:	ldr	r1, [pc, #908]	; 17f2c <__assert_fail@plt+0x6828>
   17b9c:	ldr	r0, [sp, #28]
   17ba0:	bl	11320 <strcmp@plt>
   17ba4:	cmp	r0, #0
   17ba8:	moveq	r0, #1
   17bac:	beq	17c84 <__assert_fail@plt+0x6580>
   17bb0:	ldr	r1, [pc, #888]	; 17f30 <__assert_fail@plt+0x682c>
   17bb4:	ldr	r0, [sp, #28]
   17bb8:	bl	11320 <strcmp@plt>
   17bbc:	cmp	r0, #0
   17bc0:	moveq	r0, #1
   17bc4:	beq	17c84 <__assert_fail@plt+0x6580>
   17bc8:	ldr	r1, [pc, #868]	; 17f34 <__assert_fail@plt+0x6830>
   17bcc:	ldr	r0, [sp, #28]
   17bd0:	bl	11320 <strcmp@plt>
   17bd4:	cmp	r0, #0
   17bd8:	moveq	r0, #1
   17bdc:	beq	17c84 <__assert_fail@plt+0x6580>
   17be0:	ldr	r1, [pc, #848]	; 17f38 <__assert_fail@plt+0x6834>
   17be4:	ldr	r0, [sp, #28]
   17be8:	bl	11320 <strcmp@plt>
   17bec:	cmp	r0, #0
   17bf0:	moveq	r0, #1
   17bf4:	beq	17c84 <__assert_fail@plt+0x6580>
   17bf8:	ldr	r1, [pc, #828]	; 17f3c <__assert_fail@plt+0x6838>
   17bfc:	ldr	r0, [sp, #28]
   17c00:	bl	11320 <strcmp@plt>
   17c04:	cmp	r0, #0
   17c08:	moveq	r0, #1
   17c0c:	beq	17c84 <__assert_fail@plt+0x6580>
   17c10:	ldr	r1, [pc, #808]	; 17f40 <__assert_fail@plt+0x683c>
   17c14:	ldr	r0, [sp, #28]
   17c18:	bl	11320 <strcmp@plt>
   17c1c:	cmp	r0, #0
   17c20:	moveq	r0, #1
   17c24:	beq	17c84 <__assert_fail@plt+0x6580>
   17c28:	ldr	r1, [pc, #788]	; 17f44 <__assert_fail@plt+0x6840>
   17c2c:	ldr	r0, [sp, #28]
   17c30:	bl	11320 <strcmp@plt>
   17c34:	cmp	r0, #0
   17c38:	moveq	r0, #1
   17c3c:	beq	17c84 <__assert_fail@plt+0x6580>
   17c40:	ldr	r1, [pc, #768]	; 17f48 <__assert_fail@plt+0x6844>
   17c44:	ldr	r0, [sp, #28]
   17c48:	bl	11320 <strcmp@plt>
   17c4c:	cmp	r0, #0
   17c50:	moveq	r0, #1
   17c54:	beq	17c84 <__assert_fail@plt+0x6580>
   17c58:	ldr	r1, [pc, #748]	; 17f4c <__assert_fail@plt+0x6848>
   17c5c:	ldr	r0, [sp, #28]
   17c60:	bl	11320 <strcmp@plt>
   17c64:	cmp	r0, #0
   17c68:	moveq	r0, #1
   17c6c:	beq	17c84 <__assert_fail@plt+0x6580>
   17c70:	ldr	r1, [pc, #728]	; 17f50 <__assert_fail@plt+0x684c>
   17c74:	ldr	r0, [sp, #28]
   17c78:	bl	11320 <strcmp@plt>
   17c7c:	clz	r0, r0
   17c80:	lsr	r0, r0, #5
   17c84:	ldr	r3, [sp, #24]
   17c88:	ldrb	r3, [r3, #24]
   17c8c:	bic	r3, r3, #1
   17c90:	orr	r0, r0, r3
   17c94:	ldr	r3, [sp, #24]
   17c98:	strb	r0, [r3, #24]
   17c9c:	ldr	r4, [r3]
   17ca0:	mov	r1, #58	; 0x3a
   17ca4:	mov	r0, r4
   17ca8:	bl	11548 <strchr@plt>
   17cac:	cmp	r0, #0
   17cb0:	movne	r0, #1
   17cb4:	beq	17ce0 <__assert_fail@plt+0x65dc>
   17cb8:	ldr	r3, [sp, #24]
   17cbc:	ldrb	r3, [r3, #24]
   17cc0:	and	r0, r0, #1
   17cc4:	bic	r3, r3, #2
   17cc8:	orr	r3, r3, r0, lsl #1
   17ccc:	ldr	r2, [sp, #24]
   17cd0:	strb	r3, [r2, #24]
   17cd4:	str	r2, [r9]
   17cd8:	add	r9, r2, #28
   17cdc:	b	17954 <__assert_fail@plt+0x6250>
   17ce0:	ldrb	r3, [r4]
   17ce4:	cmp	r3, #47	; 0x2f
   17ce8:	beq	17ddc <__assert_fail@plt+0x66d8>
   17cec:	ldr	r1, [pc, #608]	; 17f54 <__assert_fail@plt+0x6850>
   17cf0:	ldr	r0, [sp, #28]
   17cf4:	bl	11320 <strcmp@plt>
   17cf8:	cmp	r0, #0
   17cfc:	moveq	r0, #1
   17d00:	beq	17cb8 <__assert_fail@plt+0x65b4>
   17d04:	ldr	r1, [pc, #588]	; 17f58 <__assert_fail@plt+0x6854>
   17d08:	ldr	r0, [sp, #28]
   17d0c:	bl	11320 <strcmp@plt>
   17d10:	cmp	r0, #0
   17d14:	moveq	r0, #1
   17d18:	beq	17cb8 <__assert_fail@plt+0x65b4>
   17d1c:	ldr	r1, [pc, #568]	; 17f5c <__assert_fail@plt+0x6858>
   17d20:	ldr	r0, [sp, #28]
   17d24:	bl	11320 <strcmp@plt>
   17d28:	cmp	r0, #0
   17d2c:	moveq	r0, #1
   17d30:	beq	17cb8 <__assert_fail@plt+0x65b4>
   17d34:	ldr	r1, [pc, #548]	; 17f60 <__assert_fail@plt+0x685c>
   17d38:	ldr	r0, [sp, #28]
   17d3c:	bl	11320 <strcmp@plt>
   17d40:	cmp	r0, #0
   17d44:	moveq	r0, #1
   17d48:	beq	17cb8 <__assert_fail@plt+0x65b4>
   17d4c:	ldr	r1, [pc, #528]	; 17f64 <__assert_fail@plt+0x6860>
   17d50:	ldr	r0, [sp, #28]
   17d54:	bl	11320 <strcmp@plt>
   17d58:	cmp	r0, #0
   17d5c:	moveq	r0, #1
   17d60:	beq	17cb8 <__assert_fail@plt+0x65b4>
   17d64:	ldr	r1, [pc, #508]	; 17f68 <__assert_fail@plt+0x6864>
   17d68:	ldr	r0, [sp, #28]
   17d6c:	bl	11320 <strcmp@plt>
   17d70:	cmp	r0, #0
   17d74:	moveq	r0, #1
   17d78:	beq	17cb8 <__assert_fail@plt+0x65b4>
   17d7c:	ldr	r1, [pc, #488]	; 17f6c <__assert_fail@plt+0x6868>
   17d80:	ldr	r0, [sp, #28]
   17d84:	bl	11320 <strcmp@plt>
   17d88:	cmp	r0, #0
   17d8c:	moveq	r0, #1
   17d90:	beq	17cb8 <__assert_fail@plt+0x65b4>
   17d94:	ldr	r1, [pc, #468]	; 17f70 <__assert_fail@plt+0x686c>
   17d98:	ldr	r0, [sp, #28]
   17d9c:	bl	11320 <strcmp@plt>
   17da0:	cmp	r0, #0
   17da4:	moveq	r0, #1
   17da8:	beq	17cb8 <__assert_fail@plt+0x65b4>
   17dac:	ldr	r1, [pc, #448]	; 17f74 <__assert_fail@plt+0x6870>
   17db0:	ldr	r0, [sp, #28]
   17db4:	bl	11320 <strcmp@plt>
   17db8:	cmp	r0, #0
   17dbc:	moveq	r0, #1
   17dc0:	beq	17cb8 <__assert_fail@plt+0x65b4>
   17dc4:	mov	r1, r4
   17dc8:	ldr	r0, [pc, #424]	; 17f78 <__assert_fail@plt+0x6874>
   17dcc:	bl	11320 <strcmp@plt>
   17dd0:	clz	r0, r0
   17dd4:	lsr	r0, r0, #5
   17dd8:	b	17cb8 <__assert_fail@plt+0x65b4>
   17ddc:	ldrb	r3, [r4, #1]
   17de0:	cmp	r3, #47	; 0x2f
   17de4:	bne	17cec <__assert_fail@plt+0x65e8>
   17de8:	ldr	r1, [pc, #396]	; 17f7c <__assert_fail@plt+0x6878>
   17dec:	ldr	r0, [sp, #28]
   17df0:	bl	11320 <strcmp@plt>
   17df4:	cmp	r0, #0
   17df8:	moveq	r0, #1
   17dfc:	beq	17cb8 <__assert_fail@plt+0x65b4>
   17e00:	ldr	r1, [pc, #376]	; 17f80 <__assert_fail@plt+0x687c>
   17e04:	ldr	r0, [sp, #28]
   17e08:	bl	11320 <strcmp@plt>
   17e0c:	cmp	r0, #0
   17e10:	moveq	r0, #1
   17e14:	beq	17cb8 <__assert_fail@plt+0x65b4>
   17e18:	ldr	r1, [pc, #356]	; 17f84 <__assert_fail@plt+0x6880>
   17e1c:	ldr	r0, [sp, #28]
   17e20:	bl	11320 <strcmp@plt>
   17e24:	cmp	r0, #0
   17e28:	moveq	r0, #1
   17e2c:	beq	17cb8 <__assert_fail@plt+0x65b4>
   17e30:	b	17cec <__assert_fail@plt+0x65e8>
   17e34:	ldr	r0, [sp, #40]	; 0x28
   17e38:	bl	15478 <__assert_fail@plt+0x3d74>
   17e3c:	ldr	r3, [r8]
   17e40:	tst	r3, #32
   17e44:	bne	17e6c <__assert_fail@plt+0x6768>
   17e48:	mov	r0, r8
   17e4c:	bl	1c2c0 <__assert_fail@plt+0xabbc>
   17e50:	cmn	r0, #1
   17e54:	beq	17e84 <__assert_fail@plt+0x6780>
   17e58:	mov	r3, #0
   17e5c:	str	r3, [r9]
   17e60:	ldr	r0, [sp, #60]	; 0x3c
   17e64:	add	sp, sp, #68	; 0x44
   17e68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e6c:	bl	1156c <__errno_location@plt>
   17e70:	mov	r4, r0
   17e74:	ldr	r5, [r0]
   17e78:	mov	r0, r8
   17e7c:	bl	1c2c0 <__assert_fail@plt+0xabbc>
   17e80:	str	r5, [r4]
   17e84:	bl	1156c <__errno_location@plt>
   17e88:	mov	r5, r0
   17e8c:	ldr	r6, [r0]
   17e90:	mov	r3, #0
   17e94:	str	r3, [r9]
   17e98:	ldr	r0, [sp, #60]	; 0x3c
   17e9c:	cmp	r0, r3
   17ea0:	beq	17ebc <__assert_fail@plt+0x67b8>
   17ea4:	ldr	r4, [r0, #28]
   17ea8:	bl	178dc <__assert_fail@plt+0x61d8>
   17eac:	str	r4, [sp, #60]	; 0x3c
   17eb0:	mov	r0, r4
   17eb4:	cmp	r4, #0
   17eb8:	bne	17ea4 <__assert_fail@plt+0x67a0>
   17ebc:	str	r6, [r5]
   17ec0:	mov	r0, #0
   17ec4:	b	17e64 <__assert_fail@plt+0x6760>
   17ec8:	ldr	r1, [pc, #72]	; 17f18 <__assert_fail@plt+0x6814>
   17ecc:	ldr	r0, [pc, #72]	; 17f1c <__assert_fail@plt+0x6818>
   17ed0:	bl	11698 <setmntent@plt>
   17ed4:	subs	r7, r0, #0
   17ed8:	beq	18300 <__assert_fail@plt+0x6bfc>
   17edc:	add	r9, sp, #60	; 0x3c
   17ee0:	ldr	sl, [pc, #56]	; 17f20 <__assert_fail@plt+0x681c>
   17ee4:	ldr	r8, [pc, #36]	; 17f10 <__assert_fail@plt+0x680c>
   17ee8:	ldr	fp, [pc, #36]	; 17f14 <__assert_fail@plt+0x6810>
   17eec:	b	17fdc <__assert_fail@plt+0x68d8>
   17ef0:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   17ef4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   17ef8:	andeq	lr, r1, r0, ror #11
   17efc:	andeq	lr, r1, r4, asr #10
   17f00:	andeq	lr, r1, ip, asr r5
   17f04:	andeq	lr, r1, r0, ror r5
   17f08:	andeq	pc, pc, r0, lsl #30
   17f0c:			; <UNDEFINED> instruction: 0xfffff000
   17f10:	andeq	lr, r1, r4, ror r5
   17f14:	andeq	lr, r1, ip, ror r5
   17f18:	andeq	lr, r1, r4, asr r6
   17f1c:	andeq	lr, r1, r8, asr r6
   17f20:	andeq	lr, r1, r4, ror #12
   17f24:	andeq	lr, r1, r4, lsl #11
   17f28:	andeq	lr, r1, ip, lsl #11
   17f2c:	muleq	r1, r4, r5
   17f30:	muleq	r1, ip, r5
   17f34:	andeq	lr, r1, r4, lsr #11
   17f38:			; <UNDEFINED> instruction: 0x0001e5b0
   17f3c:			; <UNDEFINED> instruction: 0x0001e5b8
   17f40:	andeq	lr, r1, r4, asr #11
   17f44:	andeq	lr, r1, ip, asr #11
   17f48:	ldrdeq	lr, [r1], -r4
   17f4c:	ldrdeq	lr, [r1], -ip
   17f50:	andeq	lr, r1, r4, ror #11
   17f54:	andeq	lr, r1, r4, lsl #12
   17f58:	andeq	lr, r1, ip, lsl #12
   17f5c:	andeq	lr, r1, r0, lsl r6
   17f60:	andeq	lr, r1, r8, lsl r6
   17f64:	andeq	lr, r1, r4, lsr #12
   17f68:	andeq	lr, r1, ip, lsr #12
   17f6c:	andeq	lr, r1, r4, lsr r6
   17f70:	andeq	lr, r1, ip, lsr r6
   17f74:	andeq	lr, r1, r4, asr #12
   17f78:	andeq	lr, r1, ip, asr #12
   17f7c:	andeq	lr, r1, ip, ror #11
   17f80:	strdeq	lr, [r1], -r4
   17f84:	strdeq	lr, [r1], -ip
   17f88:	ldrb	r3, [r4, #24]
   17f8c:	bic	r3, r3, #1
   17f90:	orr	r0, r0, r3
   17f94:	strb	r0, [r4, #24]
   17f98:	ldr	r6, [r4]
   17f9c:	mov	r1, #58	; 0x3a
   17fa0:	mov	r0, r6
   17fa4:	bl	11548 <strchr@plt>
   17fa8:	cmp	r0, #0
   17fac:	movne	r3, #1
   17fb0:	beq	18198 <__assert_fail@plt+0x6a94>
   17fb4:	ldrb	r0, [r4, #24]
   17fb8:	and	r3, r3, #1
   17fbc:	bic	r0, r0, #2
   17fc0:	orr	r0, r0, r3, lsl #1
   17fc4:	strb	r0, [r4, #24]
   17fc8:	mvn	r2, #0
   17fcc:	mvn	r3, #0
   17fd0:	strd	r2, [r4, #16]
   17fd4:	str	r4, [r9]
   17fd8:	add	r9, r4, #28
   17fdc:	mov	r0, r7
   17fe0:	bl	114a0 <getmntent@plt>
   17fe4:	subs	r5, r0, #0
   17fe8:	beq	182ec <__assert_fail@plt+0x6be8>
   17fec:	mov	r1, sl
   17ff0:	mov	r0, r5
   17ff4:	bl	11464 <hasmntopt@plt>
   17ff8:	mov	r6, r0
   17ffc:	mov	r0, #32
   18000:	bl	1a5e4 <__assert_fail@plt+0x8ee0>
   18004:	mov	r4, r0
   18008:	ldr	r0, [r5]
   1800c:	bl	1ab6c <__assert_fail@plt+0x9468>
   18010:	str	r0, [r4]
   18014:	ldr	r0, [r5, #4]
   18018:	bl	1ab6c <__assert_fail@plt+0x9468>
   1801c:	str	r0, [r4, #4]
   18020:	mov	r3, #0
   18024:	str	r3, [r4, #8]
   18028:	ldr	r0, [r5, #8]
   1802c:	bl	1ab6c <__assert_fail@plt+0x9468>
   18030:	mov	r5, r0
   18034:	str	r0, [r4, #12]
   18038:	ldrb	r3, [r4, #24]
   1803c:	orr	r3, r3, #4
   18040:	strb	r3, [r4, #24]
   18044:	mov	r1, r8
   18048:	bl	11320 <strcmp@plt>
   1804c:	cmp	r0, #0
   18050:	moveq	r0, #1
   18054:	beq	17f88 <__assert_fail@plt+0x6884>
   18058:	mov	r1, fp
   1805c:	mov	r0, r5
   18060:	bl	11320 <strcmp@plt>
   18064:	cmp	r0, #0
   18068:	moveq	r0, #1
   1806c:	beq	17f88 <__assert_fail@plt+0x6884>
   18070:	ldr	r1, [pc, #-340]	; 17f24 <__assert_fail@plt+0x6820>
   18074:	mov	r0, r5
   18078:	bl	11320 <strcmp@plt>
   1807c:	cmp	r0, #0
   18080:	moveq	r0, #1
   18084:	beq	17f88 <__assert_fail@plt+0x6884>
   18088:	ldr	r1, [pc, #-360]	; 17f28 <__assert_fail@plt+0x6824>
   1808c:	mov	r0, r5
   18090:	bl	11320 <strcmp@plt>
   18094:	cmp	r0, #0
   18098:	moveq	r0, #1
   1809c:	beq	17f88 <__assert_fail@plt+0x6884>
   180a0:	ldr	r1, [pc, #-380]	; 17f2c <__assert_fail@plt+0x6828>
   180a4:	mov	r0, r5
   180a8:	bl	11320 <strcmp@plt>
   180ac:	cmp	r0, #0
   180b0:	moveq	r0, #1
   180b4:	beq	17f88 <__assert_fail@plt+0x6884>
   180b8:	ldr	r1, [pc, #-400]	; 17f30 <__assert_fail@plt+0x682c>
   180bc:	mov	r0, r5
   180c0:	bl	11320 <strcmp@plt>
   180c4:	cmp	r0, #0
   180c8:	moveq	r0, #1
   180cc:	beq	17f88 <__assert_fail@plt+0x6884>
   180d0:	ldr	r1, [pc, #-420]	; 17f34 <__assert_fail@plt+0x6830>
   180d4:	mov	r0, r5
   180d8:	bl	11320 <strcmp@plt>
   180dc:	cmp	r0, #0
   180e0:	moveq	r0, #1
   180e4:	beq	17f88 <__assert_fail@plt+0x6884>
   180e8:	ldr	r1, [pc, #-440]	; 17f38 <__assert_fail@plt+0x6834>
   180ec:	mov	r0, r5
   180f0:	bl	11320 <strcmp@plt>
   180f4:	cmp	r0, #0
   180f8:	moveq	r0, #1
   180fc:	beq	17f88 <__assert_fail@plt+0x6884>
   18100:	ldr	r1, [pc, #-460]	; 17f3c <__assert_fail@plt+0x6838>
   18104:	mov	r0, r5
   18108:	bl	11320 <strcmp@plt>
   1810c:	cmp	r0, #0
   18110:	moveq	r0, #1
   18114:	beq	17f88 <__assert_fail@plt+0x6884>
   18118:	ldr	r1, [pc, #-480]	; 17f40 <__assert_fail@plt+0x683c>
   1811c:	mov	r0, r5
   18120:	bl	11320 <strcmp@plt>
   18124:	cmp	r0, #0
   18128:	moveq	r0, #1
   1812c:	beq	17f88 <__assert_fail@plt+0x6884>
   18130:	ldr	r1, [pc, #-500]	; 17f44 <__assert_fail@plt+0x6840>
   18134:	mov	r0, r5
   18138:	bl	11320 <strcmp@plt>
   1813c:	cmp	r0, #0
   18140:	moveq	r0, #1
   18144:	beq	17f88 <__assert_fail@plt+0x6884>
   18148:	ldr	r1, [pc, #-520]	; 17f48 <__assert_fail@plt+0x6844>
   1814c:	mov	r0, r5
   18150:	bl	11320 <strcmp@plt>
   18154:	cmp	r0, #0
   18158:	moveq	r0, #1
   1815c:	beq	17f88 <__assert_fail@plt+0x6884>
   18160:	ldr	r1, [pc, #-540]	; 17f4c <__assert_fail@plt+0x6848>
   18164:	mov	r0, r5
   18168:	bl	11320 <strcmp@plt>
   1816c:	cmp	r0, #0
   18170:	moveq	r0, #1
   18174:	beq	17f88 <__assert_fail@plt+0x6884>
   18178:	ldr	r1, [pc, #-560]	; 17f50 <__assert_fail@plt+0x684c>
   1817c:	mov	r0, r5
   18180:	bl	11320 <strcmp@plt>
   18184:	cmp	r6, #0
   18188:	cmpeq	r0, #0
   1818c:	moveq	r0, #1
   18190:	movne	r0, #0
   18194:	b	17f88 <__assert_fail@plt+0x6884>
   18198:	ldrb	r3, [r6]
   1819c:	cmp	r3, #47	; 0x2f
   181a0:	beq	18294 <__assert_fail@plt+0x6b90>
   181a4:	ldr	r1, [pc, #-600]	; 17f54 <__assert_fail@plt+0x6850>
   181a8:	mov	r0, r5
   181ac:	bl	11320 <strcmp@plt>
   181b0:	cmp	r0, #0
   181b4:	moveq	r3, #1
   181b8:	beq	17fb4 <__assert_fail@plt+0x68b0>
   181bc:	ldr	r1, [pc, #-620]	; 17f58 <__assert_fail@plt+0x6854>
   181c0:	mov	r0, r5
   181c4:	bl	11320 <strcmp@plt>
   181c8:	cmp	r0, #0
   181cc:	moveq	r3, #1
   181d0:	beq	17fb4 <__assert_fail@plt+0x68b0>
   181d4:	ldr	r1, [pc, #-640]	; 17f5c <__assert_fail@plt+0x6858>
   181d8:	mov	r0, r5
   181dc:	bl	11320 <strcmp@plt>
   181e0:	cmp	r0, #0
   181e4:	moveq	r3, #1
   181e8:	beq	17fb4 <__assert_fail@plt+0x68b0>
   181ec:	ldr	r1, [pc, #-660]	; 17f60 <__assert_fail@plt+0x685c>
   181f0:	mov	r0, r5
   181f4:	bl	11320 <strcmp@plt>
   181f8:	cmp	r0, #0
   181fc:	moveq	r3, #1
   18200:	beq	17fb4 <__assert_fail@plt+0x68b0>
   18204:	ldr	r1, [pc, #-680]	; 17f64 <__assert_fail@plt+0x6860>
   18208:	mov	r0, r5
   1820c:	bl	11320 <strcmp@plt>
   18210:	cmp	r0, #0
   18214:	moveq	r3, #1
   18218:	beq	17fb4 <__assert_fail@plt+0x68b0>
   1821c:	ldr	r1, [pc, #-700]	; 17f68 <__assert_fail@plt+0x6864>
   18220:	mov	r0, r5
   18224:	bl	11320 <strcmp@plt>
   18228:	cmp	r0, #0
   1822c:	moveq	r3, #1
   18230:	beq	17fb4 <__assert_fail@plt+0x68b0>
   18234:	ldr	r1, [pc, #-720]	; 17f6c <__assert_fail@plt+0x6868>
   18238:	mov	r0, r5
   1823c:	bl	11320 <strcmp@plt>
   18240:	cmp	r0, #0
   18244:	moveq	r3, #1
   18248:	beq	17fb4 <__assert_fail@plt+0x68b0>
   1824c:	ldr	r1, [pc, #-740]	; 17f70 <__assert_fail@plt+0x686c>
   18250:	mov	r0, r5
   18254:	bl	11320 <strcmp@plt>
   18258:	cmp	r0, #0
   1825c:	moveq	r3, #1
   18260:	beq	17fb4 <__assert_fail@plt+0x68b0>
   18264:	ldr	r1, [pc, #-760]	; 17f74 <__assert_fail@plt+0x6870>
   18268:	mov	r0, r5
   1826c:	bl	11320 <strcmp@plt>
   18270:	cmp	r0, #0
   18274:	moveq	r3, #1
   18278:	beq	17fb4 <__assert_fail@plt+0x68b0>
   1827c:	mov	r1, r6
   18280:	ldr	r0, [pc, #-784]	; 17f78 <__assert_fail@plt+0x6874>
   18284:	bl	11320 <strcmp@plt>
   18288:	clz	r3, r0
   1828c:	lsr	r3, r3, #5
   18290:	b	17fb4 <__assert_fail@plt+0x68b0>
   18294:	ldrb	r3, [r6, #1]
   18298:	cmp	r3, #47	; 0x2f
   1829c:	bne	181a4 <__assert_fail@plt+0x6aa0>
   182a0:	ldr	r1, [pc, #-812]	; 17f7c <__assert_fail@plt+0x6878>
   182a4:	mov	r0, r5
   182a8:	bl	11320 <strcmp@plt>
   182ac:	cmp	r0, #0
   182b0:	moveq	r3, #1
   182b4:	beq	17fb4 <__assert_fail@plt+0x68b0>
   182b8:	ldr	r1, [pc, #-832]	; 17f80 <__assert_fail@plt+0x687c>
   182bc:	mov	r0, r5
   182c0:	bl	11320 <strcmp@plt>
   182c4:	cmp	r0, #0
   182c8:	moveq	r3, #1
   182cc:	beq	17fb4 <__assert_fail@plt+0x68b0>
   182d0:	ldr	r1, [pc, #-852]	; 17f84 <__assert_fail@plt+0x6880>
   182d4:	mov	r0, r5
   182d8:	bl	11320 <strcmp@plt>
   182dc:	cmp	r0, #0
   182e0:	moveq	r3, #1
   182e4:	beq	17fb4 <__assert_fail@plt+0x68b0>
   182e8:	b	181a4 <__assert_fail@plt+0x6aa0>
   182ec:	mov	r0, r7
   182f0:	bl	115f0 <endmntent@plt>
   182f4:	cmp	r0, #0
   182f8:	bne	17e58 <__assert_fail@plt+0x6754>
   182fc:	b	17e84 <__assert_fail@plt+0x6780>
   18300:	mov	r0, #0
   18304:	b	17e64 <__assert_fail@plt+0x6760>
   18308:	push	{r4, r5, r6, lr}
   1830c:	subs	r4, r0, #0
   18310:	beq	18388 <__assert_fail@plt+0x6c84>
   18314:	mov	r1, #47	; 0x2f
   18318:	mov	r0, r4
   1831c:	bl	1162c <strrchr@plt>
   18320:	cmp	r0, #0
   18324:	addne	r5, r0, #1
   18328:	moveq	r5, r4
   1832c:	sub	r3, r5, r4
   18330:	cmp	r3, #6
   18334:	ble	18374 <__assert_fail@plt+0x6c70>
   18338:	mov	r2, #7
   1833c:	ldr	r1, [pc, #96]	; 183a4 <__assert_fail@plt+0x6ca0>
   18340:	sub	r0, r5, #7
   18344:	bl	116d4 <strncmp@plt>
   18348:	cmp	r0, #0
   1834c:	bne	18374 <__assert_fail@plt+0x6c70>
   18350:	mov	r2, #3
   18354:	ldr	r1, [pc, #76]	; 183a8 <__assert_fail@plt+0x6ca4>
   18358:	mov	r0, r5
   1835c:	bl	116d4 <strncmp@plt>
   18360:	cmp	r0, #0
   18364:	addeq	r4, r5, #3
   18368:	ldreq	r3, [pc, #60]	; 183ac <__assert_fail@plt+0x6ca8>
   1836c:	streq	r4, [r3]
   18370:	movne	r4, r5
   18374:	ldr	r3, [pc, #52]	; 183b0 <__assert_fail@plt+0x6cac>
   18378:	str	r4, [r3]
   1837c:	ldr	r3, [pc, #48]	; 183b4 <__assert_fail@plt+0x6cb0>
   18380:	str	r4, [r3]
   18384:	pop	{r4, r5, r6, pc}
   18388:	ldr	r3, [pc, #40]	; 183b8 <__assert_fail@plt+0x6cb4>
   1838c:	ldr	r3, [r3]
   18390:	mov	r2, #55	; 0x37
   18394:	mov	r1, #1
   18398:	ldr	r0, [pc, #28]	; 183bc <__assert_fail@plt+0x6cb8>
   1839c:	bl	11440 <fwrite@plt>
   183a0:	bl	116e0 <abort@plt>
   183a4:	andeq	lr, r1, r4, lsr #13
   183a8:	andeq	lr, r1, ip, lsr #13
   183ac:	andeq	pc, r2, r0, lsr #6
   183b0:	andeq	pc, r2, r0, asr #7
   183b4:	andeq	pc, r2, r4, lsr #6
   183b8:	andeq	pc, r2, r0, lsr r3	; <UNPREDICTABLE>
   183bc:	andeq	lr, r1, ip, ror #12
   183c0:	push	{r4, r5, r6, lr}
   183c4:	mov	r5, r0
   183c8:	mov	r4, r1
   183cc:	mov	r2, #48	; 0x30
   183d0:	mov	r1, #0
   183d4:	bl	11590 <memset@plt>
   183d8:	cmp	r4, #10
   183dc:	beq	183ec <__assert_fail@plt+0x6ce8>
   183e0:	str	r4, [r5]
   183e4:	mov	r0, r5
   183e8:	pop	{r4, r5, r6, pc}
   183ec:	bl	116e0 <abort@plt>
   183f0:	push	{r4, r5, r6, lr}
   183f4:	mov	r4, r0
   183f8:	mov	r5, r1
   183fc:	mov	r2, #5
   18400:	mov	r1, r0
   18404:	mov	r0, #0
   18408:	bl	113bc <dcgettext@plt>
   1840c:	cmp	r4, r0
   18410:	popne	{r4, r5, r6, pc}
   18414:	bl	1c54c <__assert_fail@plt+0xae48>
   18418:	ldrb	r3, [r0]
   1841c:	bic	r3, r3, #32
   18420:	cmp	r3, #85	; 0x55
   18424:	beq	184a0 <__assert_fail@plt+0x6d9c>
   18428:	cmp	r3, #71	; 0x47
   1842c:	bne	184fc <__assert_fail@plt+0x6df8>
   18430:	ldrb	r3, [r0, #1]
   18434:	bic	r3, r3, #32
   18438:	cmp	r3, #66	; 0x42
   1843c:	bne	184fc <__assert_fail@plt+0x6df8>
   18440:	ldrb	r3, [r0, #2]
   18444:	cmp	r3, #49	; 0x31
   18448:	bne	184fc <__assert_fail@plt+0x6df8>
   1844c:	ldrb	r3, [r0, #3]
   18450:	cmp	r3, #56	; 0x38
   18454:	bne	184fc <__assert_fail@plt+0x6df8>
   18458:	ldrb	r3, [r0, #4]
   1845c:	cmp	r3, #48	; 0x30
   18460:	bne	184fc <__assert_fail@plt+0x6df8>
   18464:	ldrb	r3, [r0, #5]
   18468:	cmp	r3, #51	; 0x33
   1846c:	bne	184fc <__assert_fail@plt+0x6df8>
   18470:	ldrb	r3, [r0, #6]
   18474:	cmp	r3, #48	; 0x30
   18478:	bne	184fc <__assert_fail@plt+0x6df8>
   1847c:	ldrb	r3, [r0, #7]
   18480:	cmp	r3, #0
   18484:	bne	184fc <__assert_fail@plt+0x6df8>
   18488:	ldrb	r2, [r4]
   1848c:	ldr	r3, [pc, #124]	; 18510 <__assert_fail@plt+0x6e0c>
   18490:	ldr	r0, [pc, #124]	; 18514 <__assert_fail@plt+0x6e10>
   18494:	cmp	r2, #96	; 0x60
   18498:	movne	r0, r3
   1849c:	pop	{r4, r5, r6, pc}
   184a0:	ldrb	r3, [r0, #1]
   184a4:	bic	r3, r3, #32
   184a8:	cmp	r3, #84	; 0x54
   184ac:	bne	184fc <__assert_fail@plt+0x6df8>
   184b0:	ldrb	r3, [r0, #2]
   184b4:	bic	r3, r3, #32
   184b8:	cmp	r3, #70	; 0x46
   184bc:	bne	184fc <__assert_fail@plt+0x6df8>
   184c0:	ldrb	r3, [r0, #3]
   184c4:	cmp	r3, #45	; 0x2d
   184c8:	bne	184fc <__assert_fail@plt+0x6df8>
   184cc:	ldrb	r3, [r0, #4]
   184d0:	cmp	r3, #56	; 0x38
   184d4:	bne	184fc <__assert_fail@plt+0x6df8>
   184d8:	ldrb	r3, [r0, #5]
   184dc:	cmp	r3, #0
   184e0:	bne	184fc <__assert_fail@plt+0x6df8>
   184e4:	ldrb	r2, [r4]
   184e8:	ldr	r3, [pc, #40]	; 18518 <__assert_fail@plt+0x6e14>
   184ec:	ldr	r0, [pc, #40]	; 1851c <__assert_fail@plt+0x6e18>
   184f0:	cmp	r2, #96	; 0x60
   184f4:	movne	r0, r3
   184f8:	pop	{r4, r5, r6, pc}
   184fc:	ldr	r3, [pc, #28]	; 18520 <__assert_fail@plt+0x6e1c>
   18500:	ldr	r0, [pc, #28]	; 18524 <__assert_fail@plt+0x6e20>
   18504:	cmp	r5, #9
   18508:	movne	r0, r3
   1850c:	pop	{r4, r5, r6, pc}
   18510:	andeq	lr, r1, r8, lsl #14
   18514:	andeq	lr, r1, r0, lsl r7
   18518:	andeq	lr, r1, r4, lsl #14
   1851c:	andeq	lr, r1, r4, lsl r7
   18520:	andeq	lr, r1, ip, lsl #14
   18524:	andeq	sp, r1, r0, lsl #10
   18528:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1852c:	sub	sp, sp, #116	; 0x74
   18530:	str	r0, [sp, #36]	; 0x24
   18534:	mov	sl, r1
   18538:	str	r2, [sp, #52]	; 0x34
   1853c:	str	r3, [sp, #28]
   18540:	ldr	r8, [sp, #152]	; 0x98
   18544:	bl	11458 <__ctype_get_mb_cur_max@plt>
   18548:	str	r0, [sp, #84]	; 0x54
   1854c:	ldr	r3, [sp, #156]	; 0x9c
   18550:	lsr	r3, r3, #1
   18554:	and	r3, r3, #1
   18558:	str	r3, [sp, #32]
   1855c:	mov	r3, #1
   18560:	str	r3, [sp, #40]	; 0x28
   18564:	mov	r3, #0
   18568:	str	r3, [sp, #80]	; 0x50
   1856c:	str	r3, [sp, #44]	; 0x2c
   18570:	str	r3, [sp, #48]	; 0x30
   18574:	str	r3, [sp, #60]	; 0x3c
   18578:	str	r3, [sp, #72]	; 0x48
   1857c:	str	r3, [sp, #76]	; 0x4c
   18580:	mov	r7, sl
   18584:	mov	sl, r8
   18588:	cmp	sl, #10
   1858c:	ldrls	pc, [pc, sl, lsl #2]
   18590:	b	18748 <__assert_fail@plt+0x7044>
   18594:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18598:	andeq	r8, r1, r8, asr #11
   1859c:	andeq	r8, r1, r4, lsr #14
   185a0:	andeq	r8, r1, r0, asr #11
   185a4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185a8:	andeq	r8, r1, r8, lsl #12
   185ac:	andeq	r9, r1, r4, ror r6
   185b0:	andeq	r8, r1, ip, asr #14
   185b4:	andeq	r8, r1, r4, asr #12
   185b8:	andeq	r8, r1, r4, asr #12
   185bc:	andeq	r8, r1, r4, asr #12
   185c0:	mov	r3, #1
   185c4:	str	r3, [sp, #48]	; 0x30
   185c8:	mov	r3, #1
   185cc:	str	r3, [sp, #32]
   185d0:	str	r3, [sp, #60]	; 0x3c
   185d4:	ldr	r3, [pc, #4068]	; 195c0 <__assert_fail@plt+0x7ebc>
   185d8:	str	r3, [sp, #72]	; 0x48
   185dc:	mov	fp, #0
   185e0:	mov	sl, #2
   185e4:	mov	r6, #0
   185e8:	ldr	r3, [sp, #48]	; 0x30
   185ec:	eor	r3, r3, #1
   185f0:	str	r3, [sp, #68]	; 0x44
   185f4:	b	18edc <__assert_fail@plt+0x77d8>
   185f8:	mov	r3, #0
   185fc:	str	r3, [sp, #32]
   18600:	mov	fp, r3
   18604:	b	185e4 <__assert_fail@plt+0x6ee0>
   18608:	ldr	r3, [sp, #32]
   1860c:	cmp	r3, #0
   18610:	bne	18764 <__assert_fail@plt+0x7060>
   18614:	cmp	r7, #0
   18618:	beq	18784 <__assert_fail@plt+0x7080>
   1861c:	ldr	r3, [sp, #36]	; 0x24
   18620:	mov	r2, #34	; 0x22
   18624:	strb	r2, [r3]
   18628:	mov	r3, #1
   1862c:	str	r3, [sp, #48]	; 0x30
   18630:	str	r3, [sp, #60]	; 0x3c
   18634:	ldr	r3, [pc, #3980]	; 195c8 <__assert_fail@plt+0x7ec4>
   18638:	str	r3, [sp, #72]	; 0x48
   1863c:	mov	fp, #1
   18640:	b	185e4 <__assert_fail@plt+0x6ee0>
   18644:	cmp	sl, #10
   18648:	beq	1866c <__assert_fail@plt+0x6f68>
   1864c:	mov	r1, sl
   18650:	ldr	r0, [pc, #3948]	; 195c4 <__assert_fail@plt+0x7ec0>
   18654:	bl	183f0 <__assert_fail@plt+0x6cec>
   18658:	str	r0, [sp, #164]	; 0xa4
   1865c:	mov	r1, sl
   18660:	ldr	r0, [pc, #3928]	; 195c0 <__assert_fail@plt+0x7ebc>
   18664:	bl	183f0 <__assert_fail@plt+0x6cec>
   18668:	str	r0, [sp, #168]	; 0xa8
   1866c:	ldr	r3, [sp, #32]
   18670:	cmp	r3, #0
   18674:	movne	fp, #0
   18678:	bne	186b0 <__assert_fail@plt+0x6fac>
   1867c:	ldr	r3, [sp, #164]	; 0xa4
   18680:	ldrb	r3, [r3]
   18684:	cmp	r3, #0
   18688:	beq	186d0 <__assert_fail@plt+0x6fcc>
   1868c:	ldr	r2, [sp, #164]	; 0xa4
   18690:	mov	fp, #0
   18694:	ldr	r1, [sp, #36]	; 0x24
   18698:	cmp	r7, fp
   1869c:	strbhi	r3, [r1, fp]
   186a0:	add	fp, fp, #1
   186a4:	ldrb	r3, [r2, #1]!
   186a8:	cmp	r3, #0
   186ac:	bne	18698 <__assert_fail@plt+0x6f94>
   186b0:	ldr	r0, [sp, #168]	; 0xa8
   186b4:	bl	1153c <strlen@plt>
   186b8:	str	r0, [sp, #60]	; 0x3c
   186bc:	ldr	r3, [sp, #168]	; 0xa8
   186c0:	str	r3, [sp, #72]	; 0x48
   186c4:	mov	r3, #1
   186c8:	str	r3, [sp, #48]	; 0x30
   186cc:	b	185e4 <__assert_fail@plt+0x6ee0>
   186d0:	mov	fp, #0
   186d4:	b	186b0 <__assert_fail@plt+0x6fac>
   186d8:	ldr	r3, [sp, #32]
   186dc:	cmp	r3, #0
   186e0:	bne	187a0 <__assert_fail@plt+0x709c>
   186e4:	mov	r3, #1
   186e8:	str	r3, [sp, #48]	; 0x30
   186ec:	cmp	r7, #0
   186f0:	beq	187bc <__assert_fail@plt+0x70b8>
   186f4:	ldr	r3, [sp, #36]	; 0x24
   186f8:	mov	r2, #39	; 0x27
   186fc:	strb	r2, [r3]
   18700:	mov	r3, #0
   18704:	str	r3, [sp, #32]
   18708:	mov	r3, #1
   1870c:	str	r3, [sp, #60]	; 0x3c
   18710:	ldr	r3, [pc, #3752]	; 195c0 <__assert_fail@plt+0x7ebc>
   18714:	str	r3, [sp, #72]	; 0x48
   18718:	mov	fp, #1
   1871c:	mov	sl, #2
   18720:	b	185e4 <__assert_fail@plt+0x6ee0>
   18724:	ldr	r3, [sp, #32]
   18728:	cmp	r3, #0
   1872c:	beq	186ec <__assert_fail@plt+0x6fe8>
   18730:	mov	r3, #1
   18734:	str	r3, [sp, #60]	; 0x3c
   18738:	ldr	r3, [pc, #3712]	; 195c0 <__assert_fail@plt+0x7ebc>
   1873c:	str	r3, [sp, #72]	; 0x48
   18740:	mov	fp, #0
   18744:	b	185e4 <__assert_fail@plt+0x6ee0>
   18748:	bl	116e0 <abort@plt>
   1874c:	mov	r3, #0
   18750:	str	r3, [sp, #32]
   18754:	mov	r3, #1
   18758:	str	r3, [sp, #48]	; 0x30
   1875c:	mov	fp, #0
   18760:	b	185e4 <__assert_fail@plt+0x6ee0>
   18764:	ldr	r3, [sp, #32]
   18768:	str	r3, [sp, #48]	; 0x30
   1876c:	mov	r3, #1
   18770:	str	r3, [sp, #60]	; 0x3c
   18774:	ldr	r3, [pc, #3660]	; 195c8 <__assert_fail@plt+0x7ec4>
   18778:	str	r3, [sp, #72]	; 0x48
   1877c:	mov	fp, #0
   18780:	b	185e4 <__assert_fail@plt+0x6ee0>
   18784:	mov	r3, #1
   18788:	str	r3, [sp, #48]	; 0x30
   1878c:	str	r3, [sp, #60]	; 0x3c
   18790:	ldr	r3, [pc, #3632]	; 195c8 <__assert_fail@plt+0x7ec4>
   18794:	str	r3, [sp, #72]	; 0x48
   18798:	mov	fp, #1
   1879c:	b	185e4 <__assert_fail@plt+0x6ee0>
   187a0:	mov	r3, #1
   187a4:	str	r3, [sp, #60]	; 0x3c
   187a8:	ldr	r3, [pc, #3600]	; 195c0 <__assert_fail@plt+0x7ebc>
   187ac:	str	r3, [sp, #72]	; 0x48
   187b0:	mov	fp, #0
   187b4:	mov	sl, #2
   187b8:	b	185e4 <__assert_fail@plt+0x6ee0>
   187bc:	mov	r3, #0
   187c0:	str	r3, [sp, #32]
   187c4:	mov	r3, #1
   187c8:	str	r3, [sp, #60]	; 0x3c
   187cc:	ldr	r3, [pc, #3564]	; 195c0 <__assert_fail@plt+0x7ebc>
   187d0:	str	r3, [sp, #72]	; 0x48
   187d4:	mov	fp, #1
   187d8:	mov	sl, #2
   187dc:	b	185e4 <__assert_fail@plt+0x6ee0>
   187e0:	mov	r3, #0
   187e4:	str	r3, [sp, #56]	; 0x38
   187e8:	ldr	r3, [sp, #52]	; 0x34
   187ec:	add	r2, r3, r6
   187f0:	str	r2, [sp, #64]	; 0x40
   187f4:	ldrb	r4, [r3, r6]
   187f8:	cmp	r4, #126	; 0x7e
   187fc:	ldrls	pc, [pc, r4, lsl #2]
   18800:	b	1903c <__assert_fail@plt+0x7938>
   18804:	andeq	r8, r1, ip, lsl sl
   18808:	andeq	r9, r1, ip, lsr r0
   1880c:	andeq	r9, r1, ip, lsr r0
   18810:	andeq	r9, r1, ip, lsr r0
   18814:	andeq	r9, r1, ip, lsr r0
   18818:	andeq	r9, r1, ip, lsr r0
   1881c:	andeq	r9, r1, ip, lsr r0
   18820:	andeq	r8, r1, r8, ror sp
   18824:	andeq	r8, r1, r4, lsl sl
   18828:	andeq	r8, r1, r0, lsr sp
   1882c:	andeq	r8, r1, r8, lsr #26
   18830:	muleq	r1, r8, ip
   18834:	muleq	r1, r0, ip
   18838:	andeq	r8, r1, ip, lsl #20
   1883c:	andeq	r9, r1, ip, lsr r0
   18840:	andeq	r9, r1, ip, lsr r0
   18844:	andeq	r9, r1, ip, lsr r0
   18848:	andeq	r9, r1, ip, lsr r0
   1884c:	andeq	r9, r1, ip, lsr r0
   18850:	andeq	r9, r1, ip, lsr r0
   18854:	andeq	r9, r1, ip, lsr r0
   18858:	andeq	r9, r1, ip, lsr r0
   1885c:	andeq	r9, r1, ip, lsr r0
   18860:	andeq	r9, r1, ip, lsr r0
   18864:	andeq	r9, r1, ip, lsr r0
   18868:	andeq	r9, r1, ip, lsr r0
   1886c:	andeq	r9, r1, ip, lsr r0
   18870:	andeq	r9, r1, ip, lsr r0
   18874:	andeq	r9, r1, ip, lsr r0
   18878:	andeq	r9, r1, ip, lsr r0
   1887c:	andeq	r9, r1, ip, lsr r0
   18880:	andeq	r9, r1, ip, lsr r0
   18884:	andeq	r8, r1, ip, asr #27
   18888:	andeq	r8, r1, r8, asr #27
   1888c:	andeq	r8, r1, r8, asr #27
   18890:	andeq	r8, r1, r0, lsr #27
   18894:	andeq	r8, r1, r8, asr #27
   18898:	andeq	r9, r1, r0, lsl r4
   1889c:	andeq	r8, r1, r8, asr #27
   188a0:	andeq	r8, r1, r0, lsr #31
   188a4:	andeq	r8, r1, r8, asr #27
   188a8:	andeq	r8, r1, r8, asr #27
   188ac:	andeq	r8, r1, r8, asr #27
   188b0:	andeq	r9, r1, r0, lsl r4
   188b4:	andeq	r9, r1, r0, lsl r4
   188b8:	andeq	r9, r1, r0, lsl r4
   188bc:	andeq	r9, r1, r0, lsl r4
   188c0:	andeq	r9, r1, r0, lsl r4
   188c4:	andeq	r9, r1, r0, lsl r4
   188c8:	andeq	r9, r1, r0, lsl r4
   188cc:	andeq	r9, r1, r0, lsl r4
   188d0:	andeq	r9, r1, r0, lsl r4
   188d4:	andeq	r9, r1, r0, lsl r4
   188d8:	andeq	r9, r1, r0, lsl r4
   188dc:	andeq	r9, r1, r0, lsl r4
   188e0:	andeq	r9, r1, r0, lsl r4
   188e4:	andeq	r9, r1, r0, lsl r4
   188e8:	andeq	r9, r1, r0, lsl r4
   188ec:	andeq	r9, r1, r0, lsl r4
   188f0:	andeq	r8, r1, r8, asr #27
   188f4:	andeq	r8, r1, r8, asr #27
   188f8:	andeq	r8, r1, r8, asr #27
   188fc:	andeq	r8, r1, r8, asr #27
   18900:	andeq	r8, r1, r4, lsr #22
   18904:	andeq	r9, r1, ip, lsr r0
   18908:	andeq	r9, r1, r0, lsl r4
   1890c:	andeq	r9, r1, r0, lsl r4
   18910:	andeq	r9, r1, r0, lsl r4
   18914:	andeq	r9, r1, r0, lsl r4
   18918:	andeq	r9, r1, r0, lsl r4
   1891c:	andeq	r9, r1, r0, lsl r4
   18920:	andeq	r9, r1, r0, lsl r4
   18924:	andeq	r9, r1, r0, lsl r4
   18928:	andeq	r9, r1, r0, lsl r4
   1892c:	andeq	r9, r1, r0, lsl r4
   18930:	andeq	r9, r1, r0, lsl r4
   18934:	andeq	r9, r1, r0, lsl r4
   18938:	andeq	r9, r1, r0, lsl r4
   1893c:	andeq	r9, r1, r0, lsl r4
   18940:	andeq	r9, r1, r0, lsl r4
   18944:	andeq	r9, r1, r0, lsl r4
   18948:	andeq	r9, r1, r0, lsl r4
   1894c:	andeq	r9, r1, r0, lsl r4
   18950:	andeq	r9, r1, r0, lsl r4
   18954:	andeq	r9, r1, r0, lsl r4
   18958:	andeq	r9, r1, r0, lsl r4
   1895c:	andeq	r9, r1, r0, lsl r4
   18960:	andeq	r9, r1, r0, lsl r4
   18964:	andeq	r9, r1, r0, lsl r4
   18968:	andeq	r9, r1, r0, lsl r4
   1896c:	andeq	r9, r1, r0, lsl r4
   18970:	andeq	r8, r1, r8, asr #27
   18974:	andeq	r8, r1, r0, lsr #25
   18978:	andeq	r9, r1, r0, lsl r4
   1897c:	andeq	r8, r1, r8, asr #27
   18980:	andeq	r9, r1, r0, lsl r4
   18984:	andeq	r8, r1, r8, asr #27
   18988:	andeq	r9, r1, r0, lsl r4
   1898c:	andeq	r9, r1, r0, lsl r4
   18990:	andeq	r9, r1, r0, lsl r4
   18994:	andeq	r9, r1, r0, lsl r4
   18998:	andeq	r9, r1, r0, lsl r4
   1899c:	andeq	r9, r1, r0, lsl r4
   189a0:	andeq	r9, r1, r0, lsl r4
   189a4:	andeq	r9, r1, r0, lsl r4
   189a8:	andeq	r9, r1, r0, lsl r4
   189ac:	andeq	r9, r1, r0, lsl r4
   189b0:	andeq	r9, r1, r0, lsl r4
   189b4:	andeq	r9, r1, r0, lsl r4
   189b8:	andeq	r9, r1, r0, lsl r4
   189bc:	andeq	r9, r1, r0, lsl r4
   189c0:	andeq	r9, r1, r0, lsl r4
   189c4:	andeq	r9, r1, r0, lsl r4
   189c8:	andeq	r9, r1, r0, lsl r4
   189cc:	andeq	r9, r1, r0, lsl r4
   189d0:	andeq	r9, r1, r0, lsl r4
   189d4:	andeq	r9, r1, r0, lsl r4
   189d8:	andeq	r9, r1, r0, lsl r4
   189dc:	andeq	r9, r1, r0, lsl r4
   189e0:	andeq	r9, r1, r0, lsl r4
   189e4:	andeq	r9, r1, r0, lsl r4
   189e8:	andeq	r9, r1, r0, lsl r4
   189ec:	andeq	r9, r1, r0, lsl r4
   189f0:	andeq	r8, r1, r0, lsl #27
   189f4:	andeq	r8, r1, r8, asr #27
   189f8:	andeq	r8, r1, r0, lsl #27
   189fc:	andeq	r8, r1, r0, lsr #27
   18a00:	mov	r3, #0
   18a04:	str	r3, [sp, #56]	; 0x38
   18a08:	b	187e8 <__assert_fail@plt+0x70e4>
   18a0c:	mov	r3, #114	; 0x72
   18a10:	b	18d34 <__assert_fail@plt+0x7630>
   18a14:	mov	r3, #98	; 0x62
   18a18:	b	18d4c <__assert_fail@plt+0x7648>
   18a1c:	ldr	r3, [sp, #48]	; 0x30
   18a20:	cmp	r3, #0
   18a24:	beq	18b0c <__assert_fail@plt+0x7408>
   18a28:	ldr	r3, [sp, #32]
   18a2c:	cmp	r3, #0
   18a30:	bne	19594 <__assert_fail@plt+0x7e90>
   18a34:	ldr	r3, [sp, #44]	; 0x2c
   18a38:	eor	r3, r3, #1
   18a3c:	cmp	sl, #2
   18a40:	movne	r3, #0
   18a44:	andeq	r3, r3, #1
   18a48:	cmp	r3, #0
   18a4c:	moveq	r2, fp
   18a50:	beq	18a94 <__assert_fail@plt+0x7390>
   18a54:	cmp	r7, fp
   18a58:	ldrhi	r2, [sp, #36]	; 0x24
   18a5c:	movhi	r1, #39	; 0x27
   18a60:	strbhi	r1, [r2, fp]
   18a64:	add	r2, fp, #1
   18a68:	cmp	r7, r2
   18a6c:	ldrhi	r1, [sp, #36]	; 0x24
   18a70:	movhi	r0, #36	; 0x24
   18a74:	strbhi	r0, [r1, r2]
   18a78:	add	r2, fp, #2
   18a7c:	cmp	r7, r2
   18a80:	ldrhi	r1, [sp, #36]	; 0x24
   18a84:	movhi	r0, #39	; 0x27
   18a88:	strbhi	r0, [r1, r2]
   18a8c:	add	r2, fp, #3
   18a90:	str	r3, [sp, #44]	; 0x2c
   18a94:	cmp	r7, r2
   18a98:	ldrhi	r3, [sp, #36]	; 0x24
   18a9c:	movhi	r1, #92	; 0x5c
   18aa0:	strbhi	r1, [r3, r2]
   18aa4:	add	fp, r2, #1
   18aa8:	cmp	r5, #0
   18aac:	beq	19418 <__assert_fail@plt+0x7d14>
   18ab0:	add	r3, r6, #1
   18ab4:	ldr	r1, [sp, #28]
   18ab8:	cmp	r1, r3
   18abc:	bls	19428 <__assert_fail@plt+0x7d24>
   18ac0:	ldr	r1, [sp, #52]	; 0x34
   18ac4:	ldrb	r3, [r1, r3]
   18ac8:	sub	r3, r3, #48	; 0x30
   18acc:	uxtb	r3, r3
   18ad0:	cmp	r3, #9
   18ad4:	bhi	19434 <__assert_fail@plt+0x7d30>
   18ad8:	cmp	r7, fp
   18adc:	movhi	r3, #48	; 0x30
   18ae0:	ldrhi	r1, [sp, #36]	; 0x24
   18ae4:	strbhi	r3, [r1, fp]
   18ae8:	add	r3, r2, #2
   18aec:	cmp	r7, r3
   18af0:	movhi	r1, #48	; 0x30
   18af4:	ldrhi	r0, [sp, #36]	; 0x24
   18af8:	strbhi	r1, [r0, r3]
   18afc:	add	fp, r2, #3
   18b00:	ldr	r8, [sp, #32]
   18b04:	mov	r4, #48	; 0x30
   18b08:	b	18de4 <__assert_fail@plt+0x76e0>
   18b0c:	ldr	r3, [sp, #156]	; 0x9c
   18b10:	tst	r3, #1
   18b14:	bne	18ed8 <__assert_fail@plt+0x77d4>
   18b18:	ldr	r5, [sp, #48]	; 0x30
   18b1c:	mov	r8, r5
   18b20:	b	18de4 <__assert_fail@plt+0x76e0>
   18b24:	cmp	sl, #2
   18b28:	beq	18b40 <__assert_fail@plt+0x743c>
   18b2c:	cmp	sl, #5
   18b30:	beq	18b58 <__assert_fail@plt+0x7454>
   18b34:	mov	r8, #0
   18b38:	mov	r5, r8
   18b3c:	b	18de4 <__assert_fail@plt+0x76e0>
   18b40:	ldr	r3, [sp, #32]
   18b44:	cmp	r3, #0
   18b48:	bne	195a8 <__assert_fail@plt+0x7ea4>
   18b4c:	mov	r8, r3
   18b50:	mov	r5, r3
   18b54:	b	18de4 <__assert_fail@plt+0x76e0>
   18b58:	ldr	r3, [sp, #156]	; 0x9c
   18b5c:	tst	r3, #4
   18b60:	beq	19440 <__assert_fail@plt+0x7d3c>
   18b64:	add	r3, r6, #2
   18b68:	ldr	r2, [sp, #28]
   18b6c:	cmp	r2, r3
   18b70:	bls	1944c <__assert_fail@plt+0x7d48>
   18b74:	ldr	r2, [sp, #52]	; 0x34
   18b78:	add	r2, r2, r6
   18b7c:	ldrb	r2, [r2, #1]
   18b80:	cmp	r2, #63	; 0x3f
   18b84:	movne	r8, #0
   18b88:	movne	r5, r8
   18b8c:	bne	18de4 <__assert_fail@plt+0x76e0>
   18b90:	ldr	r2, [sp, #52]	; 0x34
   18b94:	ldrb	r2, [r2, r3]
   18b98:	sub	r1, r2, #33	; 0x21
   18b9c:	cmp	r1, #29
   18ba0:	ldrls	pc, [pc, r1, lsl #2]
   18ba4:	b	19458 <__assert_fail@plt+0x7d54>
   18ba8:	andeq	r8, r1, r0, lsr #24
   18bac:	andeq	r9, r1, r8, asr r4
   18bb0:	andeq	r9, r1, r8, asr r4
   18bb4:	andeq	r9, r1, r8, asr r4
   18bb8:	andeq	r9, r1, r8, asr r4
   18bbc:	andeq	r9, r1, r8, asr r4
   18bc0:	andeq	r8, r1, r0, lsr #24
   18bc4:	andeq	r8, r1, r0, lsr #24
   18bc8:	andeq	r8, r1, r0, lsr #24
   18bcc:	andeq	r9, r1, r8, asr r4
   18bd0:	andeq	r9, r1, r8, asr r4
   18bd4:	andeq	r9, r1, r8, asr r4
   18bd8:	andeq	r8, r1, r0, lsr #24
   18bdc:	andeq	r9, r1, r8, asr r4
   18be0:	andeq	r8, r1, r0, lsr #24
   18be4:	andeq	r9, r1, r8, asr r4
   18be8:	andeq	r9, r1, r8, asr r4
   18bec:	andeq	r9, r1, r8, asr r4
   18bf0:	andeq	r9, r1, r8, asr r4
   18bf4:	andeq	r9, r1, r8, asr r4
   18bf8:	andeq	r9, r1, r8, asr r4
   18bfc:	andeq	r9, r1, r8, asr r4
   18c00:	andeq	r9, r1, r8, asr r4
   18c04:	andeq	r9, r1, r8, asr r4
   18c08:	andeq	r9, r1, r8, asr r4
   18c0c:	andeq	r9, r1, r8, asr r4
   18c10:	andeq	r9, r1, r8, asr r4
   18c14:	andeq	r8, r1, r0, lsr #24
   18c18:	andeq	r8, r1, r0, lsr #24
   18c1c:	andeq	r8, r1, r0, lsr #24
   18c20:	ldr	r1, [sp, #32]
   18c24:	cmp	r1, #0
   18c28:	bne	19668 <__assert_fail@plt+0x7f64>
   18c2c:	cmp	r7, fp
   18c30:	movhi	r1, #63	; 0x3f
   18c34:	ldrhi	r0, [sp, #36]	; 0x24
   18c38:	strbhi	r1, [r0, fp]
   18c3c:	add	r1, fp, #1
   18c40:	cmp	r7, r1
   18c44:	ldrhi	r0, [sp, #36]	; 0x24
   18c48:	movhi	ip, #34	; 0x22
   18c4c:	strbhi	ip, [r0, r1]
   18c50:	add	r1, fp, #2
   18c54:	cmp	r7, r1
   18c58:	ldrhi	r0, [sp, #36]	; 0x24
   18c5c:	movhi	ip, #34	; 0x22
   18c60:	strbhi	ip, [r0, r1]
   18c64:	add	r1, fp, #3
   18c68:	cmp	r7, r1
   18c6c:	movhi	r0, #63	; 0x3f
   18c70:	ldrhi	ip, [sp, #36]	; 0x24
   18c74:	strbhi	r0, [ip, r1]
   18c78:	add	fp, fp, #4
   18c7c:	ldr	r5, [sp, #32]
   18c80:	mov	r8, r5
   18c84:	mov	r4, r2
   18c88:	mov	r6, r3
   18c8c:	b	18de4 <__assert_fail@plt+0x76e0>
   18c90:	mov	r3, #102	; 0x66
   18c94:	b	18d4c <__assert_fail@plt+0x7648>
   18c98:	mov	r3, #118	; 0x76
   18c9c:	b	18d4c <__assert_fail@plt+0x7648>
   18ca0:	cmp	sl, #2
   18ca4:	beq	18d10 <__assert_fail@plt+0x760c>
   18ca8:	ldr	r3, [sp, #48]	; 0x30
   18cac:	ldr	r2, [sp, #32]
   18cb0:	and	r3, r3, r2
   18cb4:	tst	r9, r3
   18cb8:	moveq	r3, r4
   18cbc:	beq	18d4c <__assert_fail@plt+0x7648>
   18cc0:	mov	r8, #0
   18cc4:	mov	r5, r8
   18cc8:	eor	r5, r5, #1
   18ccc:	ldr	r3, [sp, #44]	; 0x2c
   18cd0:	and	r5, r5, r3
   18cd4:	tst	r5, #255	; 0xff
   18cd8:	beq	18eb8 <__assert_fail@plt+0x77b4>
   18cdc:	cmp	r7, fp
   18ce0:	ldrhi	r3, [sp, #36]	; 0x24
   18ce4:	movhi	r2, #39	; 0x27
   18ce8:	strbhi	r2, [r3, fp]
   18cec:	add	r3, fp, #1
   18cf0:	cmp	r7, r3
   18cf4:	ldrhi	r2, [sp, #36]	; 0x24
   18cf8:	movhi	r1, #39	; 0x27
   18cfc:	strbhi	r1, [r2, r3]
   18d00:	add	fp, fp, #2
   18d04:	mov	r3, #0
   18d08:	str	r3, [sp, #44]	; 0x2c
   18d0c:	b	18eb8 <__assert_fail@plt+0x77b4>
   18d10:	ldr	r3, [sp, #32]
   18d14:	cmp	r3, #0
   18d18:	bne	195b4 <__assert_fail@plt+0x7eb0>
   18d1c:	mov	r8, r3
   18d20:	mov	r5, r3
   18d24:	b	18cc8 <__assert_fail@plt+0x75c4>
   18d28:	mov	r3, #110	; 0x6e
   18d2c:	b	18d34 <__assert_fail@plt+0x7630>
   18d30:	mov	r3, #116	; 0x74
   18d34:	ldr	r2, [sp, #32]
   18d38:	cmp	sl, #2
   18d3c:	movne	r2, #0
   18d40:	andeq	r2, r2, #1
   18d44:	cmp	r2, #0
   18d48:	bne	18d6c <__assert_fail@plt+0x7668>
   18d4c:	ldr	r2, [sp, #48]	; 0x30
   18d50:	cmp	r2, #0
   18d54:	moveq	r8, r2
   18d58:	moveq	r5, r2
   18d5c:	beq	18de4 <__assert_fail@plt+0x76e0>
   18d60:	mov	r4, r3
   18d64:	mov	r8, #0
   18d68:	b	18e3c <__assert_fail@plt+0x7738>
   18d6c:	mov	r8, sl
   18d70:	mov	sl, r7
   18d74:	b	195e0 <__assert_fail@plt+0x7edc>
   18d78:	mov	r3, #97	; 0x61
   18d7c:	b	18d4c <__assert_fail@plt+0x7648>
   18d80:	ldr	r3, [sp, #28]
   18d84:	cmn	r3, #1
   18d88:	beq	18db4 <__assert_fail@plt+0x76b0>
   18d8c:	ldr	r3, [sp, #28]
   18d90:	subs	r3, r3, #1
   18d94:	movne	r3, #1
   18d98:	cmp	r3, #0
   18d9c:	bne	19464 <__assert_fail@plt+0x7d60>
   18da0:	cmp	r6, #0
   18da4:	beq	18dcc <__assert_fail@plt+0x76c8>
   18da8:	mov	r8, #0
   18dac:	mov	r5, r8
   18db0:	b	18de4 <__assert_fail@plt+0x76e0>
   18db4:	ldr	r3, [sp, #52]	; 0x34
   18db8:	ldrb	r3, [r3, #1]
   18dbc:	adds	r3, r3, #0
   18dc0:	movne	r3, #1
   18dc4:	b	18d98 <__assert_fail@plt+0x7694>
   18dc8:	mov	r8, #0
   18dcc:	ldr	r5, [sp, #32]
   18dd0:	cmp	sl, #2
   18dd4:	movne	r5, #0
   18dd8:	andeq	r5, r5, #1
   18ddc:	cmp	r5, #0
   18de0:	bne	18f94 <__assert_fail@plt+0x7890>
   18de4:	ldr	r3, [sp, #68]	; 0x44
   18de8:	cmp	sl, #2
   18dec:	orreq	r3, r3, #1
   18df0:	eor	r3, r3, #1
   18df4:	ldr	r2, [sp, #32]
   18df8:	orr	r3, r2, r3
   18dfc:	tst	r3, #255	; 0xff
   18e00:	beq	18e30 <__assert_fail@plt+0x772c>
   18e04:	ldr	r3, [sp, #160]	; 0xa0
   18e08:	cmp	r3, #0
   18e0c:	beq	18e30 <__assert_fail@plt+0x772c>
   18e10:	lsr	r2, r4, #5
   18e14:	uxtb	r2, r2
   18e18:	and	r3, r4, #31
   18e1c:	ldr	r1, [sp, #160]	; 0xa0
   18e20:	ldr	r2, [r1, r2, lsl #2]
   18e24:	lsr	r3, r2, r3
   18e28:	tst	r3, #1
   18e2c:	bne	18e3c <__assert_fail@plt+0x7738>
   18e30:	ldr	r3, [sp, #56]	; 0x38
   18e34:	cmp	r3, #0
   18e38:	beq	18cc8 <__assert_fail@plt+0x75c4>
   18e3c:	ldr	r3, [sp, #32]
   18e40:	cmp	r3, #0
   18e44:	bne	19650 <__assert_fail@plt+0x7f4c>
   18e48:	ldr	r3, [sp, #44]	; 0x2c
   18e4c:	eor	r3, r3, #1
   18e50:	cmp	sl, #2
   18e54:	movne	r3, #0
   18e58:	andeq	r3, r3, #1
   18e5c:	cmp	r3, #0
   18e60:	beq	18ea4 <__assert_fail@plt+0x77a0>
   18e64:	cmp	r7, fp
   18e68:	ldrhi	r2, [sp, #36]	; 0x24
   18e6c:	movhi	r1, #39	; 0x27
   18e70:	strbhi	r1, [r2, fp]
   18e74:	add	r2, fp, #1
   18e78:	cmp	r7, r2
   18e7c:	ldrhi	r1, [sp, #36]	; 0x24
   18e80:	movhi	r0, #36	; 0x24
   18e84:	strbhi	r0, [r1, r2]
   18e88:	add	r2, fp, #2
   18e8c:	cmp	r7, r2
   18e90:	ldrhi	r1, [sp, #36]	; 0x24
   18e94:	movhi	r0, #39	; 0x27
   18e98:	strbhi	r0, [r1, r2]
   18e9c:	add	fp, fp, #3
   18ea0:	str	r3, [sp, #44]	; 0x2c
   18ea4:	cmp	r7, fp
   18ea8:	ldrhi	r3, [sp, #36]	; 0x24
   18eac:	movhi	r2, #92	; 0x5c
   18eb0:	strbhi	r2, [r3, fp]
   18eb4:	add	fp, fp, #1
   18eb8:	cmp	fp, r7
   18ebc:	ldrcc	r3, [sp, #36]	; 0x24
   18ec0:	strbcc	r4, [r3, fp]
   18ec4:	add	fp, fp, #1
   18ec8:	ldr	r3, [sp, #40]	; 0x28
   18ecc:	cmp	r8, #0
   18ed0:	moveq	r3, #0
   18ed4:	str	r3, [sp, #40]	; 0x28
   18ed8:	add	r6, r6, #1
   18edc:	ldr	r3, [sp, #28]
   18ee0:	cmn	r3, #1
   18ee4:	beq	19470 <__assert_fail@plt+0x7d6c>
   18ee8:	ldr	r3, [sp, #28]
   18eec:	subs	r8, r3, r6
   18ef0:	movne	r8, #1
   18ef4:	cmp	r8, #0
   18ef8:	beq	19484 <__assert_fail@plt+0x7d80>
   18efc:	ldr	r5, [sp, #48]	; 0x30
   18f00:	cmp	sl, #2
   18f04:	moveq	r5, #0
   18f08:	andne	r5, r5, #1
   18f0c:	ldr	r3, [sp, #60]	; 0x3c
   18f10:	adds	r9, r3, #0
   18f14:	movne	r9, #1
   18f18:	ands	r2, r5, r9
   18f1c:	str	r2, [sp, #56]	; 0x38
   18f20:	beq	187e8 <__assert_fail@plt+0x70e4>
   18f24:	add	r4, r6, r3
   18f28:	ldr	r2, [sp, #28]
   18f2c:	cmp	r3, #1
   18f30:	movls	r3, #0
   18f34:	movhi	r3, #1
   18f38:	cmn	r2, #1
   18f3c:	movne	r3, #0
   18f40:	cmp	r3, #0
   18f44:	beq	18f54 <__assert_fail@plt+0x7850>
   18f48:	ldr	r0, [sp, #52]	; 0x34
   18f4c:	bl	1153c <strlen@plt>
   18f50:	str	r0, [sp, #28]
   18f54:	ldr	r3, [sp, #28]
   18f58:	cmp	r3, r4
   18f5c:	bcc	187e0 <__assert_fail@plt+0x70dc>
   18f60:	ldr	r2, [sp, #60]	; 0x3c
   18f64:	ldr	r1, [sp, #72]	; 0x48
   18f68:	ldr	r3, [sp, #52]	; 0x34
   18f6c:	add	r0, r3, r6
   18f70:	bl	11398 <memcmp@plt>
   18f74:	cmp	r0, #0
   18f78:	bne	18a00 <__assert_fail@plt+0x72fc>
   18f7c:	ldr	r3, [sp, #32]
   18f80:	cmp	r3, #0
   18f84:	beq	187e8 <__assert_fail@plt+0x70e4>
   18f88:	mov	r8, sl
   18f8c:	mov	sl, r7
   18f90:	b	195e0 <__assert_fail@plt+0x7edc>
   18f94:	mov	r8, sl
   18f98:	mov	sl, r7
   18f9c:	b	195e0 <__assert_fail@plt+0x7edc>
   18fa0:	cmp	sl, #2
   18fa4:	strne	r8, [sp, #80]	; 0x50
   18fa8:	movne	r5, #0
   18fac:	bne	18de4 <__assert_fail@plt+0x76e0>
   18fb0:	ldr	r3, [sp, #32]
   18fb4:	cmp	r3, #0
   18fb8:	bne	195cc <__assert_fail@plt+0x7ec8>
   18fbc:	ldr	r2, [sp, #76]	; 0x4c
   18fc0:	adds	r3, r7, #0
   18fc4:	movne	r3, #1
   18fc8:	cmp	r2, #0
   18fcc:	movne	r3, #0
   18fd0:	cmp	r3, #0
   18fd4:	movne	r3, #0
   18fd8:	bne	19008 <__assert_fail@plt+0x7904>
   18fdc:	cmp	r7, fp
   18fe0:	ldrhi	r3, [sp, #36]	; 0x24
   18fe4:	movhi	r2, #39	; 0x27
   18fe8:	strbhi	r2, [r3, fp]
   18fec:	add	r3, fp, #1
   18ff0:	cmp	r7, r3
   18ff4:	ldrhi	r2, [sp, #36]	; 0x24
   18ff8:	movhi	r1, #92	; 0x5c
   18ffc:	strbhi	r1, [r2, r3]
   19000:	mov	r3, r7
   19004:	ldr	r7, [sp, #76]	; 0x4c
   19008:	add	r2, fp, #2
   1900c:	cmp	r2, r3
   19010:	ldrcc	r1, [sp, #36]	; 0x24
   19014:	movcc	r0, #39	; 0x27
   19018:	strbcc	r0, [r1, r2]
   1901c:	add	fp, fp, #3
   19020:	ldr	r2, [sp, #32]
   19024:	mov	r5, r2
   19028:	str	r8, [sp, #80]	; 0x50
   1902c:	str	r2, [sp, #44]	; 0x2c
   19030:	str	r7, [sp, #76]	; 0x4c
   19034:	mov	r7, r3
   19038:	b	18de4 <__assert_fail@plt+0x76e0>
   1903c:	ldr	r5, [sp, #84]	; 0x54
   19040:	cmp	r5, #1
   19044:	beq	19074 <__assert_fail@plt+0x7970>
   19048:	mov	r3, #0
   1904c:	str	r3, [sp, #104]	; 0x68
   19050:	str	r3, [sp, #108]	; 0x6c
   19054:	ldr	r3, [sp, #28]
   19058:	cmn	r3, #1
   1905c:	beq	190a8 <__assert_fail@plt+0x79a4>
   19060:	mov	r3, #0
   19064:	str	r4, [sp, #88]	; 0x58
   19068:	str	fp, [sp, #92]	; 0x5c
   1906c:	mov	fp, r3
   19070:	b	191d0 <__assert_fail@plt+0x7acc>
   19074:	bl	11518 <__ctype_b_loc@plt>
   19078:	ldr	r2, [r0]
   1907c:	lsl	r3, r4, #1
   19080:	ldrh	r8, [r2, r3]
   19084:	lsr	r8, r8, #14
   19088:	and	r8, r8, #1
   1908c:	mov	r2, r5
   19090:	eor	r5, r8, #1
   19094:	ldr	r3, [sp, #48]	; 0x30
   19098:	and	r5, r5, r3
   1909c:	ands	r5, r5, #255	; 0xff
   190a0:	beq	18de4 <__assert_fail@plt+0x76e0>
   190a4:	b	19268 <__assert_fail@plt+0x7b64>
   190a8:	ldr	r0, [sp, #52]	; 0x34
   190ac:	bl	1153c <strlen@plt>
   190b0:	str	r0, [sp, #28]
   190b4:	b	19060 <__assert_fail@plt+0x795c>
   190b8:	mov	r2, fp
   190bc:	mov	r1, r4
   190c0:	ldr	r4, [sp, #88]	; 0x58
   190c4:	ldr	fp, [sp, #92]	; 0x5c
   190c8:	ldr	r0, [sp, #28]
   190cc:	cmp	r0, r5
   190d0:	bls	1929c <__assert_fail@plt+0x7b98>
   190d4:	ldrb	r3, [r1]
   190d8:	cmp	r3, #0
   190dc:	beq	192a4 <__assert_fail@plt+0x7ba0>
   190e0:	mov	r3, r1
   190e4:	add	r2, r2, #1
   190e8:	add	r1, r6, r2
   190ec:	cmp	r0, r1
   190f0:	bls	192ac <__assert_fail@plt+0x7ba8>
   190f4:	ldrb	r1, [r3, #1]!
   190f8:	cmp	r1, #0
   190fc:	bne	190e4 <__assert_fail@plt+0x79e0>
   19100:	mov	r8, #0
   19104:	b	19260 <__assert_fail@plt+0x7b5c>
   19108:	cmp	r4, r5
   1910c:	beq	191ac <__assert_fail@plt+0x7aa8>
   19110:	ldrb	r3, [r4, #1]!
   19114:	sub	r3, r3, #91	; 0x5b
   19118:	cmp	r3, #33	; 0x21
   1911c:	ldrls	pc, [pc, r3, lsl #2]
   19120:	b	19108 <__assert_fail@plt+0x7a04>
   19124:	ldrdeq	r9, [r1], -r8
   19128:	ldrdeq	r9, [r1], -r8
   1912c:	andeq	r9, r1, r8, lsl #2
   19130:	ldrdeq	r9, [r1], -r8
   19134:	andeq	r9, r1, r8, lsl #2
   19138:	ldrdeq	r9, [r1], -r8
   1913c:	andeq	r9, r1, r8, lsl #2
   19140:	andeq	r9, r1, r8, lsl #2
   19144:	andeq	r9, r1, r8, lsl #2
   19148:	andeq	r9, r1, r8, lsl #2
   1914c:	andeq	r9, r1, r8, lsl #2
   19150:	andeq	r9, r1, r8, lsl #2
   19154:	andeq	r9, r1, r8, lsl #2
   19158:	andeq	r9, r1, r8, lsl #2
   1915c:	andeq	r9, r1, r8, lsl #2
   19160:	andeq	r9, r1, r8, lsl #2
   19164:	andeq	r9, r1, r8, lsl #2
   19168:	andeq	r9, r1, r8, lsl #2
   1916c:	andeq	r9, r1, r8, lsl #2
   19170:	andeq	r9, r1, r8, lsl #2
   19174:	andeq	r9, r1, r8, lsl #2
   19178:	andeq	r9, r1, r8, lsl #2
   1917c:	andeq	r9, r1, r8, lsl #2
   19180:	andeq	r9, r1, r8, lsl #2
   19184:	andeq	r9, r1, r8, lsl #2
   19188:	andeq	r9, r1, r8, lsl #2
   1918c:	andeq	r9, r1, r8, lsl #2
   19190:	andeq	r9, r1, r8, lsl #2
   19194:	andeq	r9, r1, r8, lsl #2
   19198:	andeq	r9, r1, r8, lsl #2
   1919c:	andeq	r9, r1, r8, lsl #2
   191a0:	andeq	r9, r1, r8, lsl #2
   191a4:	andeq	r9, r1, r8, lsl #2
   191a8:	ldrdeq	r9, [r1], -r8
   191ac:	ldr	r0, [sp, #100]	; 0x64
   191b0:	bl	11410 <iswprint@plt>
   191b4:	cmp	r0, #0
   191b8:	moveq	r8, #0
   191bc:	add	fp, fp, r9
   191c0:	add	r0, sp, #104	; 0x68
   191c4:	bl	1138c <mbsinit@plt>
   191c8:	cmp	r0, #0
   191cc:	bne	19240 <__assert_fail@plt+0x7b3c>
   191d0:	add	r5, r6, fp
   191d4:	ldr	r3, [sp, #52]	; 0x34
   191d8:	add	r4, r3, r5
   191dc:	add	r3, sp, #104	; 0x68
   191e0:	ldr	r2, [sp, #28]
   191e4:	sub	r2, r2, r5
   191e8:	mov	r1, r4
   191ec:	add	r0, sp, #100	; 0x64
   191f0:	bl	171a4 <__assert_fail@plt+0x5aa0>
   191f4:	subs	r9, r0, #0
   191f8:	beq	192b4 <__assert_fail@plt+0x7bb0>
   191fc:	cmn	r9, #1
   19200:	beq	19250 <__assert_fail@plt+0x7b4c>
   19204:	cmn	r9, #2
   19208:	beq	190b8 <__assert_fail@plt+0x79b4>
   1920c:	ldr	r3, [sp, #32]
   19210:	cmp	sl, #2
   19214:	movne	r3, #0
   19218:	andeq	r3, r3, #1
   1921c:	cmp	r3, #0
   19220:	beq	191ac <__assert_fail@plt+0x7aa8>
   19224:	cmp	r9, #1
   19228:	bls	191ac <__assert_fail@plt+0x7aa8>
   1922c:	sub	r3, r9, #1
   19230:	add	r5, r3, r5
   19234:	ldr	r3, [sp, #52]	; 0x34
   19238:	add	r5, r3, r5
   1923c:	b	19110 <__assert_fail@plt+0x7a0c>
   19240:	ldr	r4, [sp, #88]	; 0x58
   19244:	mov	r2, fp
   19248:	ldr	fp, [sp, #92]	; 0x5c
   1924c:	b	19260 <__assert_fail@plt+0x7b5c>
   19250:	ldr	r4, [sp, #88]	; 0x58
   19254:	mov	r2, fp
   19258:	ldr	fp, [sp, #92]	; 0x5c
   1925c:	mov	r8, #0
   19260:	cmp	r2, #1
   19264:	bls	19090 <__assert_fail@plt+0x798c>
   19268:	add	r1, r6, r2
   1926c:	ldr	ip, [sp, #64]	; 0x40
   19270:	mov	r5, #0
   19274:	eor	r3, r8, #1
   19278:	ldr	r2, [sp, #48]	; 0x30
   1927c:	and	r3, r3, r2
   19280:	uxtb	r3, r3
   19284:	ldr	r9, [sp, #32]
   19288:	ldr	lr, [sp, #44]	; 0x2c
   1928c:	ldr	r2, [sp, #56]	; 0x38
   19290:	str	r8, [sp, #56]	; 0x38
   19294:	ldr	r0, [sp, #36]	; 0x24
   19298:	b	19334 <__assert_fail@plt+0x7c30>
   1929c:	mov	r8, #0
   192a0:	b	19260 <__assert_fail@plt+0x7b5c>
   192a4:	mov	r8, #0
   192a8:	b	19260 <__assert_fail@plt+0x7b5c>
   192ac:	mov	r8, #0
   192b0:	b	19260 <__assert_fail@plt+0x7b5c>
   192b4:	ldr	r4, [sp, #88]	; 0x58
   192b8:	mov	r2, fp
   192bc:	ldr	fp, [sp, #92]	; 0x5c
   192c0:	b	19260 <__assert_fail@plt+0x7b5c>
   192c4:	cmp	r2, #0
   192c8:	beq	192dc <__assert_fail@plt+0x7bd8>
   192cc:	cmp	r7, fp
   192d0:	movhi	r2, #92	; 0x5c
   192d4:	strbhi	r2, [r0, fp]
   192d8:	add	fp, fp, #1
   192dc:	add	r8, r6, #1
   192e0:	cmp	r1, r8
   192e4:	bls	193ec <__assert_fail@plt+0x7ce8>
   192e8:	eor	r2, r5, #1
   192ec:	and	r2, r2, lr
   192f0:	ands	r2, r2, #255	; 0xff
   192f4:	beq	19408 <__assert_fail@plt+0x7d04>
   192f8:	cmp	r7, fp
   192fc:	movhi	r2, #39	; 0x27
   19300:	strbhi	r2, [r0, fp]
   19304:	add	r2, fp, #1
   19308:	cmp	r7, r2
   1930c:	movhi	lr, #39	; 0x27
   19310:	strbhi	lr, [r0, r2]
   19314:	add	fp, fp, #2
   19318:	mov	r6, r8
   1931c:	mov	r2, r3
   19320:	mov	lr, r3
   19324:	cmp	r7, fp
   19328:	strbhi	r4, [r0, fp]
   1932c:	add	fp, fp, #1
   19330:	ldrb	r4, [ip, #1]!
   19334:	cmp	r3, #0
   19338:	beq	192c4 <__assert_fail@plt+0x7bc0>
   1933c:	cmp	r9, #0
   19340:	bne	19644 <__assert_fail@plt+0x7f40>
   19344:	eor	r5, lr, #1
   19348:	cmp	sl, #2
   1934c:	movne	r5, #0
   19350:	andeq	r5, r5, #1
   19354:	cmp	r5, #0
   19358:	beq	19390 <__assert_fail@plt+0x7c8c>
   1935c:	cmp	r7, fp
   19360:	movhi	lr, #39	; 0x27
   19364:	strbhi	lr, [r0, fp]
   19368:	add	lr, fp, #1
   1936c:	cmp	r7, lr
   19370:	movhi	r8, #36	; 0x24
   19374:	strbhi	r8, [r0, lr]
   19378:	add	lr, fp, #2
   1937c:	cmp	r7, lr
   19380:	movhi	r8, #39	; 0x27
   19384:	strbhi	r8, [r0, lr]
   19388:	add	fp, fp, #3
   1938c:	mov	lr, r5
   19390:	cmp	r7, fp
   19394:	movhi	r5, #92	; 0x5c
   19398:	strbhi	r5, [r0, fp]
   1939c:	add	r5, fp, #1
   193a0:	cmp	r7, r5
   193a4:	lsrhi	r8, r4, #6
   193a8:	addhi	r8, r8, #48	; 0x30
   193ac:	strbhi	r8, [r0, r5]
   193b0:	add	r8, fp, #2
   193b4:	cmp	r7, r8
   193b8:	lsrhi	r5, r4, #3
   193bc:	andhi	r5, r5, #7
   193c0:	addhi	r5, r5, #48	; 0x30
   193c4:	strbhi	r5, [r0, r8]
   193c8:	add	fp, fp, #3
   193cc:	and	r4, r4, #7
   193d0:	add	r4, r4, #48	; 0x30
   193d4:	add	r5, r6, #1
   193d8:	cmp	r1, r5
   193dc:	bls	193f8 <__assert_fail@plt+0x7cf4>
   193e0:	mov	r6, r5
   193e4:	mov	r5, r3
   193e8:	b	19324 <__assert_fail@plt+0x7c20>
   193ec:	str	lr, [sp, #44]	; 0x2c
   193f0:	ldr	r8, [sp, #56]	; 0x38
   193f4:	b	18cc8 <__assert_fail@plt+0x75c4>
   193f8:	str	lr, [sp, #44]	; 0x2c
   193fc:	ldr	r8, [sp, #56]	; 0x38
   19400:	mov	r5, r3
   19404:	b	18cc8 <__assert_fail@plt+0x75c4>
   19408:	mov	r6, r8
   1940c:	b	19324 <__assert_fail@plt+0x7c20>
   19410:	mov	r5, #0
   19414:	b	18de4 <__assert_fail@plt+0x76e0>
   19418:	mov	r8, r5
   1941c:	ldr	r5, [sp, #48]	; 0x30
   19420:	mov	r4, #48	; 0x30
   19424:	b	18de4 <__assert_fail@plt+0x76e0>
   19428:	ldr	r8, [sp, #32]
   1942c:	mov	r4, #48	; 0x30
   19430:	b	18de4 <__assert_fail@plt+0x76e0>
   19434:	ldr	r8, [sp, #32]
   19438:	mov	r4, #48	; 0x30
   1943c:	b	18de4 <__assert_fail@plt+0x76e0>
   19440:	mov	r8, #0
   19444:	mov	r5, r8
   19448:	b	18de4 <__assert_fail@plt+0x76e0>
   1944c:	mov	r8, #0
   19450:	mov	r5, r8
   19454:	b	18de4 <__assert_fail@plt+0x76e0>
   19458:	mov	r8, #0
   1945c:	mov	r5, r8
   19460:	b	18de4 <__assert_fail@plt+0x76e0>
   19464:	mov	r8, #0
   19468:	mov	r5, r8
   1946c:	b	18de4 <__assert_fail@plt+0x76e0>
   19470:	ldr	r3, [sp, #52]	; 0x34
   19474:	ldrb	r8, [r3, r6]
   19478:	adds	r8, r8, #0
   1947c:	movne	r8, #1
   19480:	b	18ef4 <__assert_fail@plt+0x77f0>
   19484:	cmp	sl, #2
   19488:	movne	r3, #0
   1948c:	moveq	r3, #1
   19490:	ldr	r1, [sp, #32]
   19494:	mov	r2, r1
   19498:	and	r2, r2, r3
   1949c:	cmp	fp, #0
   194a0:	movne	r2, #0
   194a4:	andeq	r2, r2, #1
   194a8:	cmp	r2, #0
   194ac:	bne	1965c <__assert_fail@plt+0x7f58>
   194b0:	eor	r2, r1, #1
   194b4:	and	r3, r3, r2
   194b8:	ldr	r1, [sp, #80]	; 0x50
   194bc:	tst	r1, r3
   194c0:	beq	19538 <__assert_fail@plt+0x7e34>
   194c4:	ldr	r3, [sp, #40]	; 0x28
   194c8:	cmp	r3, #0
   194cc:	bne	194f4 <__assert_fail@plt+0x7df0>
   194d0:	ldr	r1, [sp, #76]	; 0x4c
   194d4:	clz	r3, r7
   194d8:	lsr	r3, r3, #5
   194dc:	cmp	r1, #0
   194e0:	moveq	r3, #0
   194e4:	cmp	r3, #0
   194e8:	beq	19538 <__assert_fail@plt+0x7e34>
   194ec:	ldr	r7, [sp, #76]	; 0x4c
   194f0:	b	18588 <__assert_fail@plt+0x6e84>
   194f4:	ldr	r3, [sp, #168]	; 0xa8
   194f8:	str	r3, [sp, #16]
   194fc:	ldr	r3, [sp, #164]	; 0xa4
   19500:	str	r3, [sp, #12]
   19504:	ldr	r3, [sp, #160]	; 0xa0
   19508:	str	r3, [sp, #8]
   1950c:	ldr	r3, [sp, #156]	; 0x9c
   19510:	str	r3, [sp, #4]
   19514:	mov	r3, #5
   19518:	str	r3, [sp]
   1951c:	ldr	r3, [sp, #28]
   19520:	ldr	r2, [sp, #52]	; 0x34
   19524:	ldr	r1, [sp, #76]	; 0x4c
   19528:	ldr	r0, [sp, #36]	; 0x24
   1952c:	bl	18528 <__assert_fail@plt+0x6e24>
   19530:	mov	fp, r0
   19534:	b	19638 <__assert_fail@plt+0x7f34>
   19538:	mov	sl, r7
   1953c:	ldr	r3, [sp, #72]	; 0x48
   19540:	cmp	r3, #0
   19544:	moveq	r2, #0
   19548:	andne	r2, r2, #1
   1954c:	cmp	r2, #0
   19550:	beq	19580 <__assert_fail@plt+0x7e7c>
   19554:	mov	r2, r3
   19558:	ldrb	r3, [r3]
   1955c:	cmp	r3, #0
   19560:	beq	19580 <__assert_fail@plt+0x7e7c>
   19564:	ldr	r1, [sp, #36]	; 0x24
   19568:	cmp	sl, fp
   1956c:	strbhi	r3, [r1, fp]
   19570:	add	fp, fp, #1
   19574:	ldrb	r3, [r2, #1]!
   19578:	cmp	r3, #0
   1957c:	bne	19568 <__assert_fail@plt+0x7e64>
   19580:	cmp	sl, fp
   19584:	movhi	r3, #0
   19588:	ldrhi	r2, [sp, #36]	; 0x24
   1958c:	strbhi	r3, [r2, fp]
   19590:	b	19638 <__assert_fail@plt+0x7f34>
   19594:	mov	r8, sl
   19598:	mov	sl, r7
   1959c:	ldr	r3, [sp, #32]
   195a0:	str	r3, [sp, #48]	; 0x30
   195a4:	b	195e0 <__assert_fail@plt+0x7edc>
   195a8:	mov	r8, sl
   195ac:	mov	sl, r7
   195b0:	b	195e0 <__assert_fail@plt+0x7edc>
   195b4:	mov	r8, sl
   195b8:	mov	sl, r7
   195bc:	b	195e0 <__assert_fail@plt+0x7edc>
   195c0:	andeq	lr, r1, ip, lsl #14
   195c4:	andeq	lr, r1, r8, lsl r7
   195c8:	andeq	sp, r1, r0, lsl #10
   195cc:	mov	r8, sl
   195d0:	mov	sl, r7
   195d4:	b	195e0 <__assert_fail@plt+0x7edc>
   195d8:	mov	r8, sl
   195dc:	mov	sl, r7
   195e0:	ldr	r3, [sp, #48]	; 0x30
   195e4:	cmp	r8, #2
   195e8:	movne	r3, #0
   195ec:	andeq	r3, r3, #1
   195f0:	cmp	r3, #0
   195f4:	movne	r8, #4
   195f8:	ldr	r3, [sp, #168]	; 0xa8
   195fc:	str	r3, [sp, #16]
   19600:	ldr	r3, [sp, #164]	; 0xa4
   19604:	str	r3, [sp, #12]
   19608:	mov	r3, #0
   1960c:	str	r3, [sp, #8]
   19610:	ldr	r3, [sp, #156]	; 0x9c
   19614:	bic	r3, r3, #2
   19618:	str	r3, [sp, #4]
   1961c:	str	r8, [sp]
   19620:	ldr	r3, [sp, #28]
   19624:	ldr	r2, [sp, #52]	; 0x34
   19628:	mov	r1, sl
   1962c:	ldr	r0, [sp, #36]	; 0x24
   19630:	bl	18528 <__assert_fail@plt+0x6e24>
   19634:	mov	fp, r0
   19638:	mov	r0, fp
   1963c:	add	sp, sp, #116	; 0x74
   19640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19644:	mov	r8, sl
   19648:	mov	sl, r7
   1964c:	b	195e0 <__assert_fail@plt+0x7edc>
   19650:	mov	r8, sl
   19654:	mov	sl, r7
   19658:	b	195e0 <__assert_fail@plt+0x7edc>
   1965c:	mov	r8, sl
   19660:	mov	sl, r7
   19664:	b	195e0 <__assert_fail@plt+0x7edc>
   19668:	mov	r8, sl
   1966c:	mov	sl, r7
   19670:	b	195f8 <__assert_fail@plt+0x7ef4>
   19674:	mov	r3, #1
   19678:	str	r3, [sp, #32]
   1967c:	str	r3, [sp, #48]	; 0x30
   19680:	str	r3, [sp, #60]	; 0x3c
   19684:	ldr	r3, [pc, #-196]	; 195c8 <__assert_fail@plt+0x7ec4>
   19688:	str	r3, [sp, #72]	; 0x48
   1968c:	mov	fp, #0
   19690:	mov	sl, #5
   19694:	b	185e4 <__assert_fail@plt+0x6ee0>
   19698:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1969c:	sub	sp, sp, #52	; 0x34
   196a0:	mov	r5, r0
   196a4:	str	r1, [sp, #24]
   196a8:	str	r2, [sp, #28]
   196ac:	mov	r4, r3
   196b0:	bl	1156c <__errno_location@plt>
   196b4:	str	r0, [sp, #32]
   196b8:	ldr	r3, [r0]
   196bc:	str	r3, [sp, #36]	; 0x24
   196c0:	ldr	r3, [pc, #396]	; 19854 <__assert_fail@plt+0x8150>
   196c4:	ldr	r6, [r3]
   196c8:	cmn	r5, #-2147483647	; 0x80000001
   196cc:	movne	r3, #0
   196d0:	moveq	r3, #1
   196d4:	orrs	r3, r3, r5, lsr #31
   196d8:	bne	19818 <__assert_fail@plt+0x8114>
   196dc:	ldr	r3, [pc, #368]	; 19854 <__assert_fail@plt+0x8150>
   196e0:	ldr	r2, [r3, #4]
   196e4:	cmp	r5, r2
   196e8:	blt	19750 <__assert_fail@plt+0x804c>
   196ec:	str	r2, [sp, #44]	; 0x2c
   196f0:	add	r3, r3, #8
   196f4:	cmp	r6, r3
   196f8:	beq	1981c <__assert_fail@plt+0x8118>
   196fc:	sub	r2, r5, r2
   19700:	mov	r3, #8
   19704:	str	r3, [sp]
   19708:	mvn	r3, #-2147483648	; 0x80000000
   1970c:	add	r2, r2, #1
   19710:	add	r1, sp, #44	; 0x2c
   19714:	mov	r0, r6
   19718:	bl	1a790 <__assert_fail@plt+0x908c>
   1971c:	mov	r6, r0
   19720:	ldr	r3, [pc, #300]	; 19854 <__assert_fail@plt+0x8150>
   19724:	str	r0, [r3]
   19728:	ldr	r7, [pc, #292]	; 19854 <__assert_fail@plt+0x8150>
   1972c:	ldr	r0, [r7, #4]
   19730:	ldr	r2, [sp, #44]	; 0x2c
   19734:	sub	r2, r2, r0
   19738:	lsl	r2, r2, #3
   1973c:	mov	r1, #0
   19740:	add	r0, r6, r0, lsl #3
   19744:	bl	11590 <memset@plt>
   19748:	ldr	r3, [sp, #44]	; 0x2c
   1974c:	str	r3, [r7, #4]
   19750:	add	fp, r6, r5, lsl #3
   19754:	ldr	r8, [r6, r5, lsl #3]
   19758:	ldr	r7, [fp, #4]
   1975c:	ldr	r9, [r4, #4]
   19760:	orr	r9, r9, #1
   19764:	add	sl, r4, #8
   19768:	ldr	r3, [r4, #44]	; 0x2c
   1976c:	str	r3, [sp, #16]
   19770:	ldr	r3, [r4, #40]	; 0x28
   19774:	str	r3, [sp, #12]
   19778:	str	sl, [sp, #8]
   1977c:	str	r9, [sp, #4]
   19780:	ldr	r3, [r4]
   19784:	str	r3, [sp]
   19788:	ldr	r3, [sp, #28]
   1978c:	ldr	r2, [sp, #24]
   19790:	mov	r1, r8
   19794:	mov	r0, r7
   19798:	bl	18528 <__assert_fail@plt+0x6e24>
   1979c:	cmp	r8, r0
   197a0:	bhi	19800 <__assert_fail@plt+0x80fc>
   197a4:	add	r8, r0, #1
   197a8:	str	r8, [r6, r5, lsl #3]
   197ac:	ldr	r3, [pc, #164]	; 19858 <__assert_fail@plt+0x8154>
   197b0:	cmp	r7, r3
   197b4:	beq	197c0 <__assert_fail@plt+0x80bc>
   197b8:	mov	r0, r7
   197bc:	bl	15478 <__assert_fail@plt+0x3d74>
   197c0:	mov	r0, r8
   197c4:	bl	1a60c <__assert_fail@plt+0x8f08>
   197c8:	mov	r7, r0
   197cc:	str	r0, [fp, #4]
   197d0:	ldr	r3, [r4, #44]	; 0x2c
   197d4:	str	r3, [sp, #16]
   197d8:	ldr	r3, [r4, #40]	; 0x28
   197dc:	str	r3, [sp, #12]
   197e0:	str	sl, [sp, #8]
   197e4:	str	r9, [sp, #4]
   197e8:	ldr	r3, [r4]
   197ec:	str	r3, [sp]
   197f0:	ldr	r3, [sp, #28]
   197f4:	ldr	r2, [sp, #24]
   197f8:	mov	r1, r8
   197fc:	bl	18528 <__assert_fail@plt+0x6e24>
   19800:	ldr	r3, [sp, #32]
   19804:	ldr	r2, [sp, #36]	; 0x24
   19808:	str	r2, [r3]
   1980c:	mov	r0, r7
   19810:	add	sp, sp, #52	; 0x34
   19814:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19818:	bl	116e0 <abort@plt>
   1981c:	sub	r2, r5, r2
   19820:	mov	r3, #8
   19824:	str	r3, [sp]
   19828:	mvn	r3, #-2147483648	; 0x80000000
   1982c:	add	r2, r2, #1
   19830:	add	r1, sp, #44	; 0x2c
   19834:	mov	r0, #0
   19838:	bl	1a790 <__assert_fail@plt+0x908c>
   1983c:	mov	r6, r0
   19840:	ldr	r3, [pc, #12]	; 19854 <__assert_fail@plt+0x8150>
   19844:	str	r0, [r3], #8
   19848:	ldm	r3, {r0, r1}
   1984c:	stm	r6, {r0, r1}
   19850:	b	19728 <__assert_fail@plt+0x8024>
   19854:	ldrdeq	pc, [r2], -ip
   19858:	andeq	pc, r2, r4, asr #7
   1985c:	push	{r4, r5, r6, lr}
   19860:	mov	r4, r0
   19864:	bl	1156c <__errno_location@plt>
   19868:	mov	r5, r0
   1986c:	ldr	r6, [r0]
   19870:	cmp	r4, #0
   19874:	ldr	r3, [pc, #20]	; 19890 <__assert_fail@plt+0x818c>
   19878:	moveq	r4, r3
   1987c:	mov	r1, #48	; 0x30
   19880:	mov	r0, r4
   19884:	bl	1aaf8 <__assert_fail@plt+0x93f4>
   19888:	str	r6, [r5]
   1988c:	pop	{r4, r5, r6, pc}
   19890:	andeq	pc, r2, r4, asr #9
   19894:	subs	r3, r0, #0
   19898:	ldr	r2, [pc, #8]	; 198a8 <__assert_fail@plt+0x81a4>
   1989c:	moveq	r3, r2
   198a0:	ldr	r0, [r3]
   198a4:	bx	lr
   198a8:	andeq	pc, r2, r4, asr #9
   198ac:	subs	r3, r0, #0
   198b0:	ldr	r2, [pc, #8]	; 198c0 <__assert_fail@plt+0x81bc>
   198b4:	moveq	r3, r2
   198b8:	str	r1, [r3]
   198bc:	bx	lr
   198c0:	andeq	pc, r2, r4, asr #9
   198c4:	push	{lr}		; (str lr, [sp, #-4]!)
   198c8:	subs	r3, r0, #0
   198cc:	ldr	r0, [pc, #44]	; 19900 <__assert_fail@plt+0x81fc>
   198d0:	moveq	r3, r0
   198d4:	add	r3, r3, #8
   198d8:	lsr	lr, r1, #5
   198dc:	and	r1, r1, #31
   198e0:	ldr	ip, [r3, lr, lsl #2]
   198e4:	lsr	r0, ip, r1
   198e8:	eor	r2, r2, r0
   198ec:	and	r2, r2, #1
   198f0:	eor	r1, ip, r2, lsl r1
   198f4:	str	r1, [r3, lr, lsl #2]
   198f8:	and	r0, r0, #1
   198fc:	pop	{pc}		; (ldr pc, [sp], #4)
   19900:	andeq	pc, r2, r4, asr #9
   19904:	subs	r3, r0, #0
   19908:	ldr	r2, [pc, #12]	; 1991c <__assert_fail@plt+0x8218>
   1990c:	moveq	r3, r2
   19910:	ldr	r0, [r3, #4]
   19914:	str	r1, [r3, #4]
   19918:	bx	lr
   1991c:	andeq	pc, r2, r4, asr #9
   19920:	subs	r3, r0, #0
   19924:	ldr	r0, [pc, #40]	; 19954 <__assert_fail@plt+0x8250>
   19928:	moveq	r3, r0
   1992c:	mov	r0, #10
   19930:	str	r0, [r3]
   19934:	cmp	r2, #0
   19938:	cmpne	r1, #0
   1993c:	beq	1994c <__assert_fail@plt+0x8248>
   19940:	str	r1, [r3, #40]	; 0x28
   19944:	str	r2, [r3, #44]	; 0x2c
   19948:	bx	lr
   1994c:	push	{r4, lr}
   19950:	bl	116e0 <abort@plt>
   19954:	andeq	pc, r2, r4, asr #9
   19958:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1995c:	sub	sp, sp, #24
   19960:	mov	r7, r0
   19964:	mov	r8, r1
   19968:	mov	r9, r2
   1996c:	mov	sl, r3
   19970:	ldr	r4, [sp, #56]	; 0x38
   19974:	cmp	r4, #0
   19978:	ldr	r3, [pc, #84]	; 199d4 <__assert_fail@plt+0x82d0>
   1997c:	moveq	r4, r3
   19980:	bl	1156c <__errno_location@plt>
   19984:	mov	r5, r0
   19988:	ldr	r6, [r0]
   1998c:	ldr	r3, [r4, #44]	; 0x2c
   19990:	str	r3, [sp, #16]
   19994:	ldr	r3, [r4, #40]	; 0x28
   19998:	str	r3, [sp, #12]
   1999c:	add	r3, r4, #8
   199a0:	str	r3, [sp, #8]
   199a4:	ldr	r3, [r4, #4]
   199a8:	str	r3, [sp, #4]
   199ac:	ldr	r3, [r4]
   199b0:	str	r3, [sp]
   199b4:	mov	r3, sl
   199b8:	mov	r2, r9
   199bc:	mov	r1, r8
   199c0:	mov	r0, r7
   199c4:	bl	18528 <__assert_fail@plt+0x6e24>
   199c8:	str	r6, [r5]
   199cc:	add	sp, sp, #24
   199d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   199d4:	andeq	pc, r2, r4, asr #9
   199d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   199dc:	sub	sp, sp, #44	; 0x2c
   199e0:	str	r0, [sp, #28]
   199e4:	str	r1, [sp, #32]
   199e8:	mov	r6, r2
   199ec:	subs	r4, r3, #0
   199f0:	ldr	r3, [pc, #172]	; 19aa4 <__assert_fail@plt+0x83a0>
   199f4:	moveq	r4, r3
   199f8:	bl	1156c <__errno_location@plt>
   199fc:	mov	r7, r0
   19a00:	ldr	fp, [r0]
   19a04:	ldr	r5, [r4, #4]
   19a08:	cmp	r6, #0
   19a0c:	orreq	r5, r5, #1
   19a10:	add	r9, r4, #8
   19a14:	ldr	r3, [r4, #44]	; 0x2c
   19a18:	str	r3, [sp, #16]
   19a1c:	ldr	r3, [r4, #40]	; 0x28
   19a20:	str	r3, [sp, #12]
   19a24:	str	r9, [sp, #8]
   19a28:	str	r5, [sp, #4]
   19a2c:	ldr	r3, [r4]
   19a30:	str	r3, [sp]
   19a34:	ldr	r3, [sp, #32]
   19a38:	ldr	r2, [sp, #28]
   19a3c:	mov	r1, #0
   19a40:	mov	r0, r1
   19a44:	bl	18528 <__assert_fail@plt+0x6e24>
   19a48:	mov	sl, r0
   19a4c:	add	r8, r0, #1
   19a50:	mov	r0, r8
   19a54:	bl	1a60c <__assert_fail@plt+0x8f08>
   19a58:	str	r0, [sp, #36]	; 0x24
   19a5c:	ldr	r3, [r4, #44]	; 0x2c
   19a60:	str	r3, [sp, #16]
   19a64:	ldr	r3, [r4, #40]	; 0x28
   19a68:	str	r3, [sp, #12]
   19a6c:	str	r9, [sp, #8]
   19a70:	str	r5, [sp, #4]
   19a74:	ldr	r3, [r4]
   19a78:	str	r3, [sp]
   19a7c:	ldr	r3, [sp, #32]
   19a80:	ldr	r2, [sp, #28]
   19a84:	mov	r1, r8
   19a88:	bl	18528 <__assert_fail@plt+0x6e24>
   19a8c:	str	fp, [r7]
   19a90:	cmp	r6, #0
   19a94:	strne	sl, [r6]
   19a98:	ldr	r0, [sp, #36]	; 0x24
   19a9c:	add	sp, sp, #44	; 0x2c
   19aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19aa4:	andeq	pc, r2, r4, asr #9
   19aa8:	push	{r4, lr}
   19aac:	mov	r3, r2
   19ab0:	mov	r2, #0
   19ab4:	bl	199d8 <__assert_fail@plt+0x82d4>
   19ab8:	pop	{r4, pc}
   19abc:	push	{r4, r5, r6, r7, r8, lr}
   19ac0:	ldr	r3, [pc, #140]	; 19b54 <__assert_fail@plt+0x8450>
   19ac4:	ldr	r7, [r3]
   19ac8:	ldr	r3, [r3, #4]
   19acc:	cmp	r3, #1
   19ad0:	ble	19afc <__assert_fail@plt+0x83f8>
   19ad4:	mov	r5, r7
   19ad8:	mov	r4, #1
   19adc:	ldr	r6, [pc, #112]	; 19b54 <__assert_fail@plt+0x8450>
   19ae0:	ldr	r0, [r5, #12]
   19ae4:	bl	15478 <__assert_fail@plt+0x3d74>
   19ae8:	add	r4, r4, #1
   19aec:	add	r5, r5, #8
   19af0:	ldr	r3, [r6, #4]
   19af4:	cmp	r3, r4
   19af8:	bgt	19ae0 <__assert_fail@plt+0x83dc>
   19afc:	ldr	r0, [r7, #4]
   19b00:	ldr	r3, [pc, #80]	; 19b58 <__assert_fail@plt+0x8454>
   19b04:	cmp	r0, r3
   19b08:	beq	19b24 <__assert_fail@plt+0x8420>
   19b0c:	bl	15478 <__assert_fail@plt+0x3d74>
   19b10:	ldr	r3, [pc, #60]	; 19b54 <__assert_fail@plt+0x8450>
   19b14:	mov	r2, #256	; 0x100
   19b18:	str	r2, [r3, #8]
   19b1c:	ldr	r2, [pc, #52]	; 19b58 <__assert_fail@plt+0x8454>
   19b20:	str	r2, [r3, #12]
   19b24:	ldr	r3, [pc, #48]	; 19b5c <__assert_fail@plt+0x8458>
   19b28:	cmp	r7, r3
   19b2c:	beq	19b44 <__assert_fail@plt+0x8440>
   19b30:	mov	r0, r7
   19b34:	bl	15478 <__assert_fail@plt+0x3d74>
   19b38:	ldr	r3, [pc, #20]	; 19b54 <__assert_fail@plt+0x8450>
   19b3c:	add	r2, r3, #8
   19b40:	str	r2, [r3]
   19b44:	mov	r2, #1
   19b48:	ldr	r3, [pc, #4]	; 19b54 <__assert_fail@plt+0x8450>
   19b4c:	str	r2, [r3, #4]
   19b50:	pop	{r4, r5, r6, r7, r8, pc}
   19b54:	ldrdeq	pc, [r2], -ip
   19b58:	andeq	pc, r2, r4, asr #7
   19b5c:	andeq	pc, r2, r4, ror #5
   19b60:	push	{r4, lr}
   19b64:	ldr	r3, [pc, #8]	; 19b74 <__assert_fail@plt+0x8470>
   19b68:	mvn	r2, #0
   19b6c:	bl	19698 <__assert_fail@plt+0x7f94>
   19b70:	pop	{r4, pc}
   19b74:	andeq	pc, r2, r4, asr #9
   19b78:	push	{r4, lr}
   19b7c:	ldr	r3, [pc, #4]	; 19b88 <__assert_fail@plt+0x8484>
   19b80:	bl	19698 <__assert_fail@plt+0x7f94>
   19b84:	pop	{r4, pc}
   19b88:	andeq	pc, r2, r4, asr #9
   19b8c:	push	{r4, lr}
   19b90:	mov	r1, r0
   19b94:	mov	r0, #0
   19b98:	bl	19b60 <__assert_fail@plt+0x845c>
   19b9c:	pop	{r4, pc}
   19ba0:	push	{r4, lr}
   19ba4:	mov	r2, r1
   19ba8:	mov	r1, r0
   19bac:	mov	r0, #0
   19bb0:	bl	19b78 <__assert_fail@plt+0x8474>
   19bb4:	pop	{r4, pc}
   19bb8:	push	{r4, r5, lr}
   19bbc:	sub	sp, sp, #52	; 0x34
   19bc0:	mov	r4, r0
   19bc4:	mov	r5, r2
   19bc8:	mov	r0, sp
   19bcc:	bl	183c0 <__assert_fail@plt+0x6cbc>
   19bd0:	mov	r3, sp
   19bd4:	mvn	r2, #0
   19bd8:	mov	r1, r5
   19bdc:	mov	r0, r4
   19be0:	bl	19698 <__assert_fail@plt+0x7f94>
   19be4:	add	sp, sp, #52	; 0x34
   19be8:	pop	{r4, r5, pc}
   19bec:	push	{r4, r5, r6, lr}
   19bf0:	sub	sp, sp, #48	; 0x30
   19bf4:	mov	r4, r0
   19bf8:	mov	r5, r2
   19bfc:	mov	r6, r3
   19c00:	mov	r0, sp
   19c04:	bl	183c0 <__assert_fail@plt+0x6cbc>
   19c08:	mov	r3, sp
   19c0c:	mov	r2, r6
   19c10:	mov	r1, r5
   19c14:	mov	r0, r4
   19c18:	bl	19698 <__assert_fail@plt+0x7f94>
   19c1c:	add	sp, sp, #48	; 0x30
   19c20:	pop	{r4, r5, r6, pc}
   19c24:	push	{r4, lr}
   19c28:	mov	r2, r1
   19c2c:	mov	r1, r0
   19c30:	mov	r0, #0
   19c34:	bl	19bb8 <__assert_fail@plt+0x84b4>
   19c38:	pop	{r4, pc}
   19c3c:	push	{r4, lr}
   19c40:	mov	r3, r2
   19c44:	mov	r2, r1
   19c48:	mov	r1, r0
   19c4c:	mov	r0, #0
   19c50:	bl	19bec <__assert_fail@plt+0x84e8>
   19c54:	pop	{r4, pc}
   19c58:	push	{r4, r5, r6, lr}
   19c5c:	sub	sp, sp, #48	; 0x30
   19c60:	mov	r4, r0
   19c64:	mov	r5, r1
   19c68:	mov	r6, r2
   19c6c:	mov	ip, sp
   19c70:	ldr	lr, [pc, #64]	; 19cb8 <__assert_fail@plt+0x85b4>
   19c74:	ldm	lr!, {r0, r1, r2, r3}
   19c78:	stmia	ip!, {r0, r1, r2, r3}
   19c7c:	ldm	lr!, {r0, r1, r2, r3}
   19c80:	stmia	ip!, {r0, r1, r2, r3}
   19c84:	ldm	lr, {r0, r1, r2, r3}
   19c88:	stm	ip, {r0, r1, r2, r3}
   19c8c:	mov	r2, #1
   19c90:	mov	r1, r6
   19c94:	mov	r0, sp
   19c98:	bl	198c4 <__assert_fail@plt+0x81c0>
   19c9c:	mov	r3, sp
   19ca0:	mov	r2, r5
   19ca4:	mov	r1, r4
   19ca8:	mov	r0, #0
   19cac:	bl	19698 <__assert_fail@plt+0x7f94>
   19cb0:	add	sp, sp, #48	; 0x30
   19cb4:	pop	{r4, r5, r6, pc}
   19cb8:	andeq	pc, r2, r4, asr #9
   19cbc:	push	{r4, lr}
   19cc0:	mov	r2, r1
   19cc4:	mvn	r1, #0
   19cc8:	bl	19c58 <__assert_fail@plt+0x8554>
   19ccc:	pop	{r4, pc}
   19cd0:	push	{r4, lr}
   19cd4:	mov	r1, #58	; 0x3a
   19cd8:	bl	19cbc <__assert_fail@plt+0x85b8>
   19cdc:	pop	{r4, pc}
   19ce0:	push	{r4, lr}
   19ce4:	mov	r2, #58	; 0x3a
   19ce8:	bl	19c58 <__assert_fail@plt+0x8554>
   19cec:	pop	{r4, pc}
   19cf0:	push	{r4, r5, lr}
   19cf4:	sub	sp, sp, #100	; 0x64
   19cf8:	mov	r4, r0
   19cfc:	mov	r5, r2
   19d00:	mov	r0, sp
   19d04:	bl	183c0 <__assert_fail@plt+0x6cbc>
   19d08:	add	lr, sp, #48	; 0x30
   19d0c:	mov	ip, sp
   19d10:	ldm	ip!, {r0, r1, r2, r3}
   19d14:	stmia	lr!, {r0, r1, r2, r3}
   19d18:	ldm	ip!, {r0, r1, r2, r3}
   19d1c:	stmia	lr!, {r0, r1, r2, r3}
   19d20:	ldm	ip, {r0, r1, r2, r3}
   19d24:	stm	lr, {r0, r1, r2, r3}
   19d28:	mov	r2, #1
   19d2c:	mov	r1, #58	; 0x3a
   19d30:	add	r0, sp, #48	; 0x30
   19d34:	bl	198c4 <__assert_fail@plt+0x81c0>
   19d38:	add	r3, sp, #48	; 0x30
   19d3c:	mvn	r2, #0
   19d40:	mov	r1, r5
   19d44:	mov	r0, r4
   19d48:	bl	19698 <__assert_fail@plt+0x7f94>
   19d4c:	add	sp, sp, #100	; 0x64
   19d50:	pop	{r4, r5, pc}
   19d54:	push	{r4, r5, r6, r7, lr}
   19d58:	sub	sp, sp, #52	; 0x34
   19d5c:	mov	r4, r0
   19d60:	mov	r6, r1
   19d64:	mov	r7, r2
   19d68:	mov	r5, r3
   19d6c:	mov	ip, sp
   19d70:	ldr	lr, [pc, #64]	; 19db8 <__assert_fail@plt+0x86b4>
   19d74:	ldm	lr!, {r0, r1, r2, r3}
   19d78:	stmia	ip!, {r0, r1, r2, r3}
   19d7c:	ldm	lr!, {r0, r1, r2, r3}
   19d80:	stmia	ip!, {r0, r1, r2, r3}
   19d84:	ldm	lr, {r0, r1, r2, r3}
   19d88:	stm	ip, {r0, r1, r2, r3}
   19d8c:	mov	r2, r7
   19d90:	mov	r1, r6
   19d94:	mov	r0, sp
   19d98:	bl	19920 <__assert_fail@plt+0x821c>
   19d9c:	mov	r3, sp
   19da0:	ldr	r2, [sp, #72]	; 0x48
   19da4:	mov	r1, r5
   19da8:	mov	r0, r4
   19dac:	bl	19698 <__assert_fail@plt+0x7f94>
   19db0:	add	sp, sp, #52	; 0x34
   19db4:	pop	{r4, r5, r6, r7, pc}
   19db8:	andeq	pc, r2, r4, asr #9
   19dbc:	push	{lr}		; (str lr, [sp, #-4]!)
   19dc0:	sub	sp, sp, #12
   19dc4:	mvn	ip, #0
   19dc8:	str	ip, [sp]
   19dcc:	bl	19d54 <__assert_fail@plt+0x8650>
   19dd0:	add	sp, sp, #12
   19dd4:	pop	{pc}		; (ldr pc, [sp], #4)
   19dd8:	push	{r4, lr}
   19ddc:	mov	r3, r2
   19de0:	mov	r2, r1
   19de4:	mov	r1, r0
   19de8:	mov	r0, #0
   19dec:	bl	19dbc <__assert_fail@plt+0x86b8>
   19df0:	pop	{r4, pc}
   19df4:	push	{lr}		; (str lr, [sp, #-4]!)
   19df8:	sub	sp, sp, #12
   19dfc:	str	r3, [sp]
   19e00:	mov	r3, r2
   19e04:	mov	r2, r1
   19e08:	mov	r1, r0
   19e0c:	mov	r0, #0
   19e10:	bl	19d54 <__assert_fail@plt+0x8650>
   19e14:	add	sp, sp, #12
   19e18:	pop	{pc}		; (ldr pc, [sp], #4)
   19e1c:	push	{r4, lr}
   19e20:	ldr	r3, [pc, #4]	; 19e2c <__assert_fail@plt+0x8728>
   19e24:	bl	19698 <__assert_fail@plt+0x7f94>
   19e28:	pop	{r4, pc}
   19e2c:	andeq	pc, r2, ip, ror #5
   19e30:	push	{r4, lr}
   19e34:	mov	r2, r1
   19e38:	mov	r1, r0
   19e3c:	mov	r0, #0
   19e40:	bl	19e1c <__assert_fail@plt+0x8718>
   19e44:	pop	{r4, pc}
   19e48:	push	{r4, lr}
   19e4c:	mvn	r2, #0
   19e50:	bl	19e1c <__assert_fail@plt+0x8718>
   19e54:	pop	{r4, pc}
   19e58:	push	{r4, lr}
   19e5c:	mov	r1, r0
   19e60:	mov	r0, #0
   19e64:	bl	19e48 <__assert_fail@plt+0x8744>
   19e68:	pop	{r4, pc}
   19e6c:	push	{r4, lr}
   19e70:	mov	r4, r0
   19e74:	mov	r3, #0
   19e78:	str	r3, [r0, #4]
   19e7c:	mov	r1, #524288	; 0x80000
   19e80:	ldr	r0, [pc, #52]	; 19ebc <__assert_fail@plt+0x87b8>
   19e84:	bl	1c368 <__assert_fail@plt+0xac64>
   19e88:	str	r0, [r4]
   19e8c:	cmp	r0, #0
   19e90:	blt	19e9c <__assert_fail@plt+0x8798>
   19e94:	mov	r0, #0
   19e98:	pop	{r4, pc}
   19e9c:	mov	r1, #0
   19ea0:	mov	r0, r1
   19ea4:	bl	11524 <getcwd@plt>
   19ea8:	str	r0, [r4, #4]
   19eac:	cmp	r0, #0
   19eb0:	movne	r0, #0
   19eb4:	mvneq	r0, #0
   19eb8:	pop	{r4, pc}
   19ebc:	andeq	lr, r1, r8, asr #7
   19ec0:	push	{r4, lr}
   19ec4:	ldr	r3, [r0]
   19ec8:	cmp	r3, #0
   19ecc:	blt	19edc <__assert_fail@plt+0x87d8>
   19ed0:	mov	r0, r3
   19ed4:	bl	11674 <fchdir@plt>
   19ed8:	pop	{r4, pc}
   19edc:	ldr	r0, [r0, #4]
   19ee0:	bl	1bfc4 <__assert_fail@plt+0xa8c0>
   19ee4:	pop	{r4, pc}
   19ee8:	push	{r4, lr}
   19eec:	mov	r4, r0
   19ef0:	ldr	r0, [r0]
   19ef4:	cmp	r0, #0
   19ef8:	blt	19f00 <__assert_fail@plt+0x87fc>
   19efc:	bl	116ec <close@plt>
   19f00:	ldr	r0, [r4, #4]
   19f04:	bl	15478 <__assert_fail@plt+0x3d74>
   19f08:	pop	{r4, pc}
   19f0c:	push	{r4, r5, r6, lr}
   19f10:	mov	r5, r1
   19f14:	ldr	r4, [r0], #8
   19f18:	cmp	r4, r0
   19f1c:	beq	19f34 <__assert_fail@plt+0x8830>
   19f20:	mov	r0, r4
   19f24:	bl	1b298 <__assert_fail@plt+0x9b94>
   19f28:	cmp	r0, #0
   19f2c:	moveq	r0, r4
   19f30:	pop	{r4, r5, r6, pc}
   19f34:	mov	r0, r1
   19f38:	bl	1b268 <__assert_fail@plt+0x9b64>
   19f3c:	cmp	r0, #0
   19f40:	popeq	{r4, r5, r6, pc}
   19f44:	mov	r2, r5
   19f48:	mov	r1, r4
   19f4c:	bl	11374 <memcpy@plt>
   19f50:	pop	{r4, r5, r6, pc}
   19f54:	push	{r4, r5, r6, lr}
   19f58:	mov	r4, r0
   19f5c:	ldr	r5, [r0, #4]
   19f60:	lsl	r5, r5, #1
   19f64:	mov	r6, r0
   19f68:	ldr	r0, [r6], #8
   19f6c:	cmp	r0, r6
   19f70:	beq	19f78 <__assert_fail@plt+0x8874>
   19f74:	bl	15478 <__assert_fail@plt+0x3d74>
   19f78:	ldr	r3, [r4, #4]
   19f7c:	cmp	r5, r3
   19f80:	bcc	19fa4 <__assert_fail@plt+0x88a0>
   19f84:	mov	r0, r5
   19f88:	bl	1b268 <__assert_fail@plt+0x9b64>
   19f8c:	cmp	r0, #0
   19f90:	beq	19fb0 <__assert_fail@plt+0x88ac>
   19f94:	str	r0, [r4]
   19f98:	str	r5, [r4, #4]
   19f9c:	mov	r0, #1
   19fa0:	pop	{r4, r5, r6, pc}
   19fa4:	bl	1156c <__errno_location@plt>
   19fa8:	mov	r3, #12
   19fac:	str	r3, [r0]
   19fb0:	str	r6, [r4]
   19fb4:	mov	r3, #1024	; 0x400
   19fb8:	str	r3, [r4, #4]
   19fbc:	mov	r0, #0
   19fc0:	pop	{r4, r5, r6, pc}
   19fc4:	push	{r4, r5, r6, r7, r8, lr}
   19fc8:	mov	r4, r0
   19fcc:	ldr	r3, [r0, #4]
   19fd0:	lsl	r6, r3, #1
   19fd4:	mov	r5, r0
   19fd8:	ldr	r0, [r5], #8
   19fdc:	cmp	r0, r5
   19fe0:	beq	1a00c <__assert_fail@plt+0x8908>
   19fe4:	cmp	r3, r6
   19fe8:	bhi	1a030 <__assert_fail@plt+0x892c>
   19fec:	mov	r1, r6
   19ff0:	bl	1b298 <__assert_fail@plt+0x9b94>
   19ff4:	subs	r7, r0, #0
   19ff8:	beq	1a03c <__assert_fail@plt+0x8938>
   19ffc:	str	r7, [r4]
   1a000:	str	r6, [r4, #4]
   1a004:	mov	r0, #1
   1a008:	pop	{r4, r5, r6, r7, r8, pc}
   1a00c:	mov	r0, r6
   1a010:	bl	1b268 <__assert_fail@plt+0x9b64>
   1a014:	subs	r7, r0, #0
   1a018:	beq	1a058 <__assert_fail@plt+0x8954>
   1a01c:	ldr	r2, [r4, #4]
   1a020:	mov	r1, r5
   1a024:	mov	r0, r7
   1a028:	bl	11374 <memcpy@plt>
   1a02c:	b	19ffc <__assert_fail@plt+0x88f8>
   1a030:	bl	1156c <__errno_location@plt>
   1a034:	mov	r3, #12
   1a038:	str	r3, [r0]
   1a03c:	ldr	r0, [r4]
   1a040:	bl	15478 <__assert_fail@plt+0x3d74>
   1a044:	str	r5, [r4]
   1a048:	mov	r3, #1024	; 0x400
   1a04c:	str	r3, [r4, #4]
   1a050:	mov	r0, #0
   1a054:	pop	{r4, r5, r6, r7, r8, pc}
   1a058:	mov	r0, #0
   1a05c:	pop	{r4, r5, r6, r7, r8, pc}
   1a060:	push	{r4, r5, r6, lr}
   1a064:	sub	sp, sp, #32
   1a068:	mov	r4, r0
   1a06c:	ldr	r5, [sp, #48]	; 0x30
   1a070:	ldr	r6, [sp, #52]	; 0x34
   1a074:	cmp	r1, #0
   1a078:	beq	1a130 <__assert_fail@plt+0x8a2c>
   1a07c:	str	r3, [sp, #4]
   1a080:	str	r2, [sp]
   1a084:	mov	r3, r1
   1a088:	ldr	r2, [pc, #940]	; 1a43c <__assert_fail@plt+0x8d38>
   1a08c:	mov	r1, #1
   1a090:	bl	115c0 <__fprintf_chk@plt>
   1a094:	mov	r2, #5
   1a098:	ldr	r1, [pc, #928]	; 1a440 <__assert_fail@plt+0x8d3c>
   1a09c:	mov	r0, #0
   1a0a0:	bl	113bc <dcgettext@plt>
   1a0a4:	ldr	r3, [pc, #920]	; 1a444 <__assert_fail@plt+0x8d40>
   1a0a8:	str	r3, [sp]
   1a0ac:	mov	r3, r0
   1a0b0:	ldr	r2, [pc, #912]	; 1a448 <__assert_fail@plt+0x8d44>
   1a0b4:	mov	r1, #1
   1a0b8:	mov	r0, r4
   1a0bc:	bl	115c0 <__fprintf_chk@plt>
   1a0c0:	mov	r1, r4
   1a0c4:	mov	r0, #10
   1a0c8:	bl	113a4 <fputc_unlocked@plt>
   1a0cc:	mov	r2, #5
   1a0d0:	ldr	r1, [pc, #884]	; 1a44c <__assert_fail@plt+0x8d48>
   1a0d4:	mov	r0, #0
   1a0d8:	bl	113bc <dcgettext@plt>
   1a0dc:	ldr	r3, [pc, #876]	; 1a450 <__assert_fail@plt+0x8d4c>
   1a0e0:	mov	r2, r0
   1a0e4:	mov	r1, #1
   1a0e8:	mov	r0, r4
   1a0ec:	bl	115c0 <__fprintf_chk@plt>
   1a0f0:	mov	r1, r4
   1a0f4:	mov	r0, #10
   1a0f8:	bl	113a4 <fputc_unlocked@plt>
   1a0fc:	cmp	r6, #9
   1a100:	ldrls	pc, [pc, r6, lsl #2]
   1a104:	b	1a3d4 <__assert_fail@plt+0x8cd0>
   1a108:	andeq	sl, r1, ip, ror #2
   1a10c:	andeq	sl, r1, r8, asr #2
   1a110:	andeq	sl, r1, r4, ror r1
   1a114:	andeq	sl, r1, r4, lsr #3
   1a118:	ldrdeq	sl, [r1], -ip
   1a11c:	andeq	sl, r1, ip, lsl r2
   1a120:	andeq	sl, r1, r4, ror #4
   1a124:			; <UNDEFINED> instruction: 0x0001a2b4
   1a128:	andeq	sl, r1, ip, lsl #6
   1a12c:	andeq	sl, r1, ip, ror #6
   1a130:	str	r3, [sp]
   1a134:	mov	r3, r2
   1a138:	ldr	r2, [pc, #788]	; 1a454 <__assert_fail@plt+0x8d50>
   1a13c:	mov	r1, #1
   1a140:	bl	115c0 <__fprintf_chk@plt>
   1a144:	b	1a094 <__assert_fail@plt+0x8990>
   1a148:	mov	r2, #5
   1a14c:	ldr	r1, [pc, #772]	; 1a458 <__assert_fail@plt+0x8d54>
   1a150:	mov	r0, #0
   1a154:	bl	113bc <dcgettext@plt>
   1a158:	ldr	r3, [r5]
   1a15c:	mov	r2, r0
   1a160:	mov	r1, #1
   1a164:	mov	r0, r4
   1a168:	bl	115c0 <__fprintf_chk@plt>
   1a16c:	add	sp, sp, #32
   1a170:	pop	{r4, r5, r6, pc}
   1a174:	mov	r2, #5
   1a178:	ldr	r1, [pc, #732]	; 1a45c <__assert_fail@plt+0x8d58>
   1a17c:	mov	r0, #0
   1a180:	bl	113bc <dcgettext@plt>
   1a184:	ldr	r3, [r5]
   1a188:	ldr	r2, [r5, #4]
   1a18c:	str	r2, [sp]
   1a190:	mov	r2, r0
   1a194:	mov	r1, #1
   1a198:	mov	r0, r4
   1a19c:	bl	115c0 <__fprintf_chk@plt>
   1a1a0:	b	1a16c <__assert_fail@plt+0x8a68>
   1a1a4:	mov	r2, #5
   1a1a8:	ldr	r1, [pc, #688]	; 1a460 <__assert_fail@plt+0x8d5c>
   1a1ac:	mov	r0, #0
   1a1b0:	bl	113bc <dcgettext@plt>
   1a1b4:	ldr	r3, [r5]
   1a1b8:	ldr	r2, [r5, #8]
   1a1bc:	str	r2, [sp, #4]
   1a1c0:	ldr	r2, [r5, #4]
   1a1c4:	str	r2, [sp]
   1a1c8:	mov	r2, r0
   1a1cc:	mov	r1, #1
   1a1d0:	mov	r0, r4
   1a1d4:	bl	115c0 <__fprintf_chk@plt>
   1a1d8:	b	1a16c <__assert_fail@plt+0x8a68>
   1a1dc:	mov	r2, #5
   1a1e0:	ldr	r1, [pc, #636]	; 1a464 <__assert_fail@plt+0x8d60>
   1a1e4:	mov	r0, #0
   1a1e8:	bl	113bc <dcgettext@plt>
   1a1ec:	ldr	r3, [r5]
   1a1f0:	ldr	r2, [r5, #12]
   1a1f4:	str	r2, [sp, #8]
   1a1f8:	ldr	r2, [r5, #8]
   1a1fc:	str	r2, [sp, #4]
   1a200:	ldr	r2, [r5, #4]
   1a204:	str	r2, [sp]
   1a208:	mov	r2, r0
   1a20c:	mov	r1, #1
   1a210:	mov	r0, r4
   1a214:	bl	115c0 <__fprintf_chk@plt>
   1a218:	b	1a16c <__assert_fail@plt+0x8a68>
   1a21c:	mov	r2, #5
   1a220:	ldr	r1, [pc, #576]	; 1a468 <__assert_fail@plt+0x8d64>
   1a224:	mov	r0, #0
   1a228:	bl	113bc <dcgettext@plt>
   1a22c:	ldr	r3, [r5]
   1a230:	ldr	r2, [r5, #16]
   1a234:	str	r2, [sp, #12]
   1a238:	ldr	r2, [r5, #12]
   1a23c:	str	r2, [sp, #8]
   1a240:	ldr	r2, [r5, #8]
   1a244:	str	r2, [sp, #4]
   1a248:	ldr	r2, [r5, #4]
   1a24c:	str	r2, [sp]
   1a250:	mov	r2, r0
   1a254:	mov	r1, #1
   1a258:	mov	r0, r4
   1a25c:	bl	115c0 <__fprintf_chk@plt>
   1a260:	b	1a16c <__assert_fail@plt+0x8a68>
   1a264:	mov	r2, #5
   1a268:	ldr	r1, [pc, #508]	; 1a46c <__assert_fail@plt+0x8d68>
   1a26c:	mov	r0, #0
   1a270:	bl	113bc <dcgettext@plt>
   1a274:	ldr	r3, [r5]
   1a278:	ldr	r2, [r5, #20]
   1a27c:	str	r2, [sp, #16]
   1a280:	ldr	r2, [r5, #16]
   1a284:	str	r2, [sp, #12]
   1a288:	ldr	r2, [r5, #12]
   1a28c:	str	r2, [sp, #8]
   1a290:	ldr	r2, [r5, #8]
   1a294:	str	r2, [sp, #4]
   1a298:	ldr	r2, [r5, #4]
   1a29c:	str	r2, [sp]
   1a2a0:	mov	r2, r0
   1a2a4:	mov	r1, #1
   1a2a8:	mov	r0, r4
   1a2ac:	bl	115c0 <__fprintf_chk@plt>
   1a2b0:	b	1a16c <__assert_fail@plt+0x8a68>
   1a2b4:	mov	r2, #5
   1a2b8:	ldr	r1, [pc, #432]	; 1a470 <__assert_fail@plt+0x8d6c>
   1a2bc:	mov	r0, #0
   1a2c0:	bl	113bc <dcgettext@plt>
   1a2c4:	ldr	r3, [r5]
   1a2c8:	ldr	r2, [r5, #24]
   1a2cc:	str	r2, [sp, #20]
   1a2d0:	ldr	r2, [r5, #20]
   1a2d4:	str	r2, [sp, #16]
   1a2d8:	ldr	r2, [r5, #16]
   1a2dc:	str	r2, [sp, #12]
   1a2e0:	ldr	r2, [r5, #12]
   1a2e4:	str	r2, [sp, #8]
   1a2e8:	ldr	r2, [r5, #8]
   1a2ec:	str	r2, [sp, #4]
   1a2f0:	ldr	r2, [r5, #4]
   1a2f4:	str	r2, [sp]
   1a2f8:	mov	r2, r0
   1a2fc:	mov	r1, #1
   1a300:	mov	r0, r4
   1a304:	bl	115c0 <__fprintf_chk@plt>
   1a308:	b	1a16c <__assert_fail@plt+0x8a68>
   1a30c:	mov	r2, #5
   1a310:	ldr	r1, [pc, #348]	; 1a474 <__assert_fail@plt+0x8d70>
   1a314:	mov	r0, #0
   1a318:	bl	113bc <dcgettext@plt>
   1a31c:	ldr	r3, [r5]
   1a320:	ldr	r2, [r5, #28]
   1a324:	str	r2, [sp, #24]
   1a328:	ldr	r2, [r5, #24]
   1a32c:	str	r2, [sp, #20]
   1a330:	ldr	r2, [r5, #20]
   1a334:	str	r2, [sp, #16]
   1a338:	ldr	r2, [r5, #16]
   1a33c:	str	r2, [sp, #12]
   1a340:	ldr	r2, [r5, #12]
   1a344:	str	r2, [sp, #8]
   1a348:	ldr	r2, [r5, #8]
   1a34c:	str	r2, [sp, #4]
   1a350:	ldr	r2, [r5, #4]
   1a354:	str	r2, [sp]
   1a358:	mov	r2, r0
   1a35c:	mov	r1, #1
   1a360:	mov	r0, r4
   1a364:	bl	115c0 <__fprintf_chk@plt>
   1a368:	b	1a16c <__assert_fail@plt+0x8a68>
   1a36c:	mov	r2, #5
   1a370:	ldr	r1, [pc, #256]	; 1a478 <__assert_fail@plt+0x8d74>
   1a374:	mov	r0, #0
   1a378:	bl	113bc <dcgettext@plt>
   1a37c:	ldr	r3, [r5]
   1a380:	ldr	r2, [r5, #32]
   1a384:	str	r2, [sp, #28]
   1a388:	ldr	r2, [r5, #28]
   1a38c:	str	r2, [sp, #24]
   1a390:	ldr	r2, [r5, #24]
   1a394:	str	r2, [sp, #20]
   1a398:	ldr	r2, [r5, #20]
   1a39c:	str	r2, [sp, #16]
   1a3a0:	ldr	r2, [r5, #16]
   1a3a4:	str	r2, [sp, #12]
   1a3a8:	ldr	r2, [r5, #12]
   1a3ac:	str	r2, [sp, #8]
   1a3b0:	ldr	r2, [r5, #8]
   1a3b4:	str	r2, [sp, #4]
   1a3b8:	ldr	r2, [r5, #4]
   1a3bc:	str	r2, [sp]
   1a3c0:	mov	r2, r0
   1a3c4:	mov	r1, #1
   1a3c8:	mov	r0, r4
   1a3cc:	bl	115c0 <__fprintf_chk@plt>
   1a3d0:	b	1a16c <__assert_fail@plt+0x8a68>
   1a3d4:	mov	r2, #5
   1a3d8:	ldr	r1, [pc, #156]	; 1a47c <__assert_fail@plt+0x8d78>
   1a3dc:	mov	r0, #0
   1a3e0:	bl	113bc <dcgettext@plt>
   1a3e4:	ldr	r3, [r5]
   1a3e8:	ldr	r2, [r5, #32]
   1a3ec:	str	r2, [sp, #28]
   1a3f0:	ldr	r2, [r5, #28]
   1a3f4:	str	r2, [sp, #24]
   1a3f8:	ldr	r2, [r5, #24]
   1a3fc:	str	r2, [sp, #20]
   1a400:	ldr	r2, [r5, #20]
   1a404:	str	r2, [sp, #16]
   1a408:	ldr	r2, [r5, #16]
   1a40c:	str	r2, [sp, #12]
   1a410:	ldr	r2, [r5, #12]
   1a414:	str	r2, [sp, #8]
   1a418:	ldr	r2, [r5, #8]
   1a41c:	str	r2, [sp, #4]
   1a420:	ldr	r2, [r5, #4]
   1a424:	str	r2, [sp]
   1a428:	mov	r2, r0
   1a42c:	mov	r1, #1
   1a430:	mov	r0, r4
   1a434:	bl	115c0 <__fprintf_chk@plt>
   1a438:	b	1a16c <__assert_fail@plt+0x8a68>
   1a43c:	andeq	lr, r1, r0, lsl #15
   1a440:	muleq	r1, r4, r7
   1a444:	andeq	r0, r0, r6, ror #15
   1a448:	andeq	lr, r1, ip, ror #20
   1a44c:	muleq	r1, r8, r7
   1a450:	andeq	lr, r1, r4, asr #16
   1a454:	andeq	lr, r1, ip, lsl #15
   1a458:	andeq	lr, r1, r8, ror #16
   1a45c:	andeq	lr, r1, r8, ror r8
   1a460:	muleq	r1, r0, r8
   1a464:	andeq	lr, r1, ip, lsr #17
   1a468:	andeq	lr, r1, ip, asr #17
   1a46c:	strdeq	lr, [r1], -r0
   1a470:	andeq	lr, r1, r8, lsl r9
   1a474:	andeq	lr, r1, r4, asr #18
   1a478:	andeq	lr, r1, r4, ror r9
   1a47c:	andeq	lr, r1, r8, lsr #19
   1a480:	push	{r4, r5, lr}
   1a484:	sub	sp, sp, #12
   1a488:	ldr	r5, [sp, #24]
   1a48c:	ldr	ip, [r5]
   1a490:	cmp	ip, #0
   1a494:	beq	1a4c4 <__assert_fail@plt+0x8dc0>
   1a498:	mov	lr, r5
   1a49c:	mov	ip, #0
   1a4a0:	add	ip, ip, #1
   1a4a4:	ldr	r4, [lr, #4]!
   1a4a8:	cmp	r4, #0
   1a4ac:	bne	1a4a0 <__assert_fail@plt+0x8d9c>
   1a4b0:	str	ip, [sp, #4]
   1a4b4:	str	r5, [sp]
   1a4b8:	bl	1a060 <__assert_fail@plt+0x895c>
   1a4bc:	add	sp, sp, #12
   1a4c0:	pop	{r4, r5, pc}
   1a4c4:	mov	ip, #0
   1a4c8:	b	1a4b0 <__assert_fail@plt+0x8dac>
   1a4cc:	push	{r4, r5, lr}
   1a4d0:	sub	sp, sp, #52	; 0x34
   1a4d4:	ldr	r4, [sp, #64]	; 0x40
   1a4d8:	sub	r4, r4, #4
   1a4dc:	add	r5, sp, #4
   1a4e0:	mov	ip, #0
   1a4e4:	ldr	lr, [r4, #4]!
   1a4e8:	str	lr, [r5, #4]!
   1a4ec:	cmp	lr, #0
   1a4f0:	beq	1a500 <__assert_fail@plt+0x8dfc>
   1a4f4:	add	ip, ip, #1
   1a4f8:	cmp	ip, #10
   1a4fc:	bne	1a4e4 <__assert_fail@plt+0x8de0>
   1a500:	str	ip, [sp, #4]
   1a504:	add	ip, sp, #8
   1a508:	str	ip, [sp]
   1a50c:	bl	1a060 <__assert_fail@plt+0x895c>
   1a510:	add	sp, sp, #52	; 0x34
   1a514:	pop	{r4, r5, pc}
   1a518:	push	{r3}		; (str r3, [sp, #-4]!)
   1a51c:	push	{lr}		; (str lr, [sp, #-4]!)
   1a520:	sub	sp, sp, #16
   1a524:	add	r3, sp, #24
   1a528:	str	r3, [sp, #12]
   1a52c:	str	r3, [sp]
   1a530:	ldr	r3, [sp, #20]
   1a534:	bl	1a4cc <__assert_fail@plt+0x8dc8>
   1a538:	add	sp, sp, #16
   1a53c:	pop	{lr}		; (ldr lr, [sp], #4)
   1a540:	add	sp, sp, #4
   1a544:	bx	lr
   1a548:	push	{r4, lr}
   1a54c:	ldr	r3, [pc, #112]	; 1a5c4 <__assert_fail@plt+0x8ec0>
   1a550:	ldr	r1, [r3]
   1a554:	mov	r0, #10
   1a558:	bl	113a4 <fputc_unlocked@plt>
   1a55c:	mov	r2, #5
   1a560:	ldr	r1, [pc, #96]	; 1a5c8 <__assert_fail@plt+0x8ec4>
   1a564:	mov	r0, #0
   1a568:	bl	113bc <dcgettext@plt>
   1a56c:	ldr	r2, [pc, #88]	; 1a5cc <__assert_fail@plt+0x8ec8>
   1a570:	mov	r1, r0
   1a574:	mov	r0, #1
   1a578:	bl	1159c <__printf_chk@plt>
   1a57c:	mov	r2, #5
   1a580:	ldr	r1, [pc, #72]	; 1a5d0 <__assert_fail@plt+0x8ecc>
   1a584:	mov	r0, #0
   1a588:	bl	113bc <dcgettext@plt>
   1a58c:	ldr	r3, [pc, #64]	; 1a5d4 <__assert_fail@plt+0x8ed0>
   1a590:	ldr	r2, [pc, #64]	; 1a5d8 <__assert_fail@plt+0x8ed4>
   1a594:	mov	r1, r0
   1a598:	mov	r0, #1
   1a59c:	bl	1159c <__printf_chk@plt>
   1a5a0:	mov	r2, #5
   1a5a4:	ldr	r1, [pc, #48]	; 1a5dc <__assert_fail@plt+0x8ed8>
   1a5a8:	mov	r0, #0
   1a5ac:	bl	113bc <dcgettext@plt>
   1a5b0:	ldr	r2, [pc, #40]	; 1a5e0 <__assert_fail@plt+0x8edc>
   1a5b4:	mov	r1, r0
   1a5b8:	mov	r0, #1
   1a5bc:	bl	1159c <__printf_chk@plt>
   1a5c0:	pop	{r4, pc}
   1a5c4:	andeq	pc, r2, r4, lsr r3	; <UNPREDICTABLE>
   1a5c8:	andeq	lr, r1, r4, ror #19
   1a5cc:	strdeq	lr, [r1], -r8
   1a5d0:	andeq	lr, r1, r0, lsl sl
   1a5d4:	muleq	r1, r0, lr
   1a5d8:			; <UNDEFINED> instruction: 0x0001deb8
   1a5dc:	andeq	lr, r1, r4, lsr #20
   1a5e0:	andeq	lr, r1, ip, asr #20
   1a5e4:	push	{r4, lr}
   1a5e8:	bl	1b268 <__assert_fail@plt+0x9b64>
   1a5ec:	cmp	r0, #0
   1a5f0:	popne	{r4, pc}
   1a5f4:	bl	1ab88 <__assert_fail@plt+0x9484>
   1a5f8:	push	{r4, lr}
   1a5fc:	bl	1b268 <__assert_fail@plt+0x9b64>
   1a600:	cmp	r0, #0
   1a604:	popne	{r4, pc}
   1a608:	bl	1ab88 <__assert_fail@plt+0x9484>
   1a60c:	push	{r4, lr}
   1a610:	bl	1a5e4 <__assert_fail@plt+0x8ee0>
   1a614:	pop	{r4, pc}
   1a618:	push	{r4, r5, r6, lr}
   1a61c:	mov	r5, r0
   1a620:	mov	r4, r1
   1a624:	bl	1b298 <__assert_fail@plt+0x9b94>
   1a628:	cmp	r0, #0
   1a62c:	popne	{r4, r5, r6, pc}
   1a630:	adds	r4, r4, #0
   1a634:	movne	r4, #1
   1a638:	cmp	r5, #0
   1a63c:	orreq	r4, r4, #1
   1a640:	cmp	r4, #0
   1a644:	popeq	{r4, r5, r6, pc}
   1a648:	bl	1ab88 <__assert_fail@plt+0x9484>
   1a64c:	push	{r4, lr}
   1a650:	cmp	r1, #0
   1a654:	orreq	r1, r1, #1
   1a658:	bl	1b298 <__assert_fail@plt+0x9b94>
   1a65c:	cmp	r0, #0
   1a660:	popne	{r4, pc}
   1a664:	bl	1ab88 <__assert_fail@plt+0x9484>
   1a668:	push	{r4, r5, r6, lr}
   1a66c:	mov	r6, r0
   1a670:	mov	r5, r1
   1a674:	mov	r4, r2
   1a678:	bl	1c580 <__assert_fail@plt+0xae7c>
   1a67c:	cmp	r0, #0
   1a680:	popne	{r4, r5, r6, pc}
   1a684:	cmp	r6, #0
   1a688:	beq	1a698 <__assert_fail@plt+0x8f94>
   1a68c:	cmp	r5, #0
   1a690:	cmpne	r4, #0
   1a694:	popeq	{r4, r5, r6, pc}
   1a698:	bl	1ab88 <__assert_fail@plt+0x9484>
   1a69c:	push	{r4, lr}
   1a6a0:	bl	1a668 <__assert_fail@plt+0x8f64>
   1a6a4:	pop	{r4, pc}
   1a6a8:	push	{r4, lr}
   1a6ac:	mov	ip, r1
   1a6b0:	mov	r3, r2
   1a6b4:	cmp	r2, #0
   1a6b8:	cmpne	r1, #0
   1a6bc:	moveq	r3, #1
   1a6c0:	moveq	ip, r3
   1a6c4:	mov	r2, r3
   1a6c8:	mov	r1, ip
   1a6cc:	bl	1c580 <__assert_fail@plt+0xae7c>
   1a6d0:	cmp	r0, #0
   1a6d4:	popne	{r4, pc}
   1a6d8:	bl	1ab88 <__assert_fail@plt+0x9484>
   1a6dc:	push	{r4, lr}
   1a6e0:	mov	r2, r1
   1a6e4:	mov	r1, r0
   1a6e8:	mov	r0, #0
   1a6ec:	bl	1a668 <__assert_fail@plt+0x8f64>
   1a6f0:	pop	{r4, pc}
   1a6f4:	push	{r4, lr}
   1a6f8:	mov	r2, r1
   1a6fc:	mov	r1, r0
   1a700:	mov	r0, #0
   1a704:	bl	1a6a8 <__assert_fail@plt+0x8fa4>
   1a708:	pop	{r4, pc}
   1a70c:	push	{r4, r5, r6, r7, r8, lr}
   1a710:	mov	r5, r1
   1a714:	mov	r6, r2
   1a718:	ldr	r4, [r1]
   1a71c:	subs	r7, r0, #0
   1a720:	beq	1a73c <__assert_fail@plt+0x9038>
   1a724:	lsr	r2, r4, #1
   1a728:	add	r3, r2, #1
   1a72c:	mvn	r3, r3
   1a730:	cmp	r4, r3
   1a734:	bls	1a760 <__assert_fail@plt+0x905c>
   1a738:	bl	1ab88 <__assert_fail@plt+0x9484>
   1a73c:	cmp	r4, #0
   1a740:	bne	1a768 <__assert_fail@plt+0x9064>
   1a744:	mov	r1, r2
   1a748:	mov	r0, #64	; 0x40
   1a74c:	bl	1c920 <__assert_fail@plt+0xb21c>
   1a750:	cmp	r0, #0
   1a754:	movne	r4, r0
   1a758:	addeq	r4, r0, #1
   1a75c:	b	1a768 <__assert_fail@plt+0x9064>
   1a760:	add	r4, r4, #1
   1a764:	add	r4, r4, r2
   1a768:	mov	r2, r6
   1a76c:	mov	r1, r4
   1a770:	mov	r0, r7
   1a774:	bl	1a668 <__assert_fail@plt+0x8f64>
   1a778:	str	r4, [r5]
   1a77c:	pop	{r4, r5, r6, r7, r8, pc}
   1a780:	push	{r4, lr}
   1a784:	mov	r2, #1
   1a788:	bl	1a70c <__assert_fail@plt+0x9008>
   1a78c:	pop	{r4, pc}
   1a790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a794:	sub	sp, sp, #12
   1a798:	mov	fp, r0
   1a79c:	mov	sl, r1
   1a7a0:	mov	r9, r2
   1a7a4:	mov	r7, r3
   1a7a8:	ldr	r6, [sp, #48]	; 0x30
   1a7ac:	ldr	r5, [r1]
   1a7b0:	asrs	r4, r5, #1
   1a7b4:	bmi	1a910 <__assert_fail@plt+0x920c>
   1a7b8:	cmp	r5, #0
   1a7bc:	blt	1a924 <__assert_fail@plt+0x9220>
   1a7c0:	mvn	r3, #-2147483648	; 0x80000000
   1a7c4:	sub	r3, r3, r4
   1a7c8:	cmp	r5, r3
   1a7cc:	movle	r3, #0
   1a7d0:	movgt	r3, #1
   1a7d4:	cmp	r3, #0
   1a7d8:	addeq	r4, r4, r5
   1a7dc:	mvnne	r4, #-2147483648	; 0x80000000
   1a7e0:	mvn	r8, r7
   1a7e4:	lsr	r8, r8, #31
   1a7e8:	cmp	r7, r4
   1a7ec:	movge	r3, #0
   1a7f0:	andlt	r3, r8, #1
   1a7f4:	cmp	r3, #0
   1a7f8:	movne	r4, r7
   1a7fc:	cmp	r6, #0
   1a800:	blt	1a938 <__assert_fail@plt+0x9234>
   1a804:	cmp	r6, #0
   1a808:	beq	1a9e4 <__assert_fail@plt+0x92e0>
   1a80c:	cmp	r4, #0
   1a810:	blt	1a994 <__assert_fail@plt+0x9290>
   1a814:	mov	r1, r6
   1a818:	mvn	r0, #-2147483648	; 0x80000000
   1a81c:	bl	1cb2c <__assert_fail@plt+0xb428>
   1a820:	cmp	r0, r4
   1a824:	movge	r0, #0
   1a828:	movlt	r0, #1
   1a82c:	cmp	r0, #0
   1a830:	mvnne	r3, #-2147483648	; 0x80000000
   1a834:	strne	r3, [sp, #4]
   1a838:	beq	1a9cc <__assert_fail@plt+0x92c8>
   1a83c:	mov	r1, r6
   1a840:	ldr	r0, [sp, #4]
   1a844:	bl	1cb2c <__assert_fail@plt+0xb428>
   1a848:	mov	r4, r0
   1a84c:	mov	r1, r6
   1a850:	ldr	r0, [sp, #4]
   1a854:	bl	1cd4c <__assert_fail@plt+0xb648>
   1a858:	ldr	r3, [sp, #4]
   1a85c:	sub	r1, r3, r1
   1a860:	cmp	fp, #0
   1a864:	moveq	r3, #0
   1a868:	streq	r3, [sl]
   1a86c:	sub	r3, r4, r5
   1a870:	cmp	r3, r9
   1a874:	bge	1a8fc <__assert_fail@plt+0x91f8>
   1a878:	cmp	r9, #0
   1a87c:	blt	1a9f0 <__assert_fail@plt+0x92ec>
   1a880:	cmp	r5, #0
   1a884:	blt	1aa04 <__assert_fail@plt+0x9300>
   1a888:	mvn	r3, #-2147483648	; 0x80000000
   1a88c:	sub	r3, r3, r9
   1a890:	cmp	r5, r3
   1a894:	movle	r3, #0
   1a898:	movgt	r3, #1
   1a89c:	cmp	r3, #0
   1a8a0:	bne	1aaac <__assert_fail@plt+0x93a8>
   1a8a4:	add	r5, r5, r9
   1a8a8:	mov	r4, r5
   1a8ac:	cmp	r7, r5
   1a8b0:	movge	r7, #0
   1a8b4:	andlt	r7, r8, #1
   1a8b8:	cmp	r7, #0
   1a8bc:	bne	1aaac <__assert_fail@plt+0x93a8>
   1a8c0:	cmp	r6, #0
   1a8c4:	blt	1aa18 <__assert_fail@plt+0x9314>
   1a8c8:	cmp	r6, #0
   1a8cc:	beq	1a8f8 <__assert_fail@plt+0x91f4>
   1a8d0:	cmp	r5, #0
   1a8d4:	blt	1aa74 <__assert_fail@plt+0x9370>
   1a8d8:	mov	r1, r6
   1a8dc:	mvn	r0, #-2147483648	; 0x80000000
   1a8e0:	bl	1cb2c <__assert_fail@plt+0xb428>
   1a8e4:	cmp	r5, r0
   1a8e8:	movle	r0, #0
   1a8ec:	movgt	r0, #1
   1a8f0:	cmp	r0, #0
   1a8f4:	bne	1aaac <__assert_fail@plt+0x93a8>
   1a8f8:	mul	r1, r5, r6
   1a8fc:	mov	r0, fp
   1a900:	bl	1a618 <__assert_fail@plt+0x8f14>
   1a904:	str	r4, [sl]
   1a908:	add	sp, sp, #12
   1a90c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a910:	rsb	r3, r4, #-2147483648	; 0x80000000
   1a914:	cmp	r5, r3
   1a918:	movge	r3, #0
   1a91c:	movlt	r3, #1
   1a920:	b	1a7d4 <__assert_fail@plt+0x90d0>
   1a924:	rsb	r3, r5, #-2147483648	; 0x80000000
   1a928:	cmp	r4, r3
   1a92c:	movge	r3, #0
   1a930:	movlt	r3, #1
   1a934:	b	1a7d4 <__assert_fail@plt+0x90d0>
   1a938:	cmp	r4, #0
   1a93c:	blt	1a964 <__assert_fail@plt+0x9260>
   1a940:	cmn	r6, #1
   1a944:	beq	1a980 <__assert_fail@plt+0x927c>
   1a948:	mov	r1, r6
   1a94c:	mov	r0, #-2147483648	; 0x80000000
   1a950:	bl	1cb2c <__assert_fail@plt+0xb428>
   1a954:	cmp	r0, r4
   1a958:	movge	r0, #0
   1a95c:	movlt	r0, #1
   1a960:	b	1a82c <__assert_fail@plt+0x9128>
   1a964:	mov	r1, r6
   1a968:	mvn	r0, #-2147483648	; 0x80000000
   1a96c:	bl	1cb2c <__assert_fail@plt+0xb428>
   1a970:	cmp	r0, r4
   1a974:	movle	r0, #0
   1a978:	movgt	r0, #1
   1a97c:	b	1a82c <__assert_fail@plt+0x9128>
   1a980:	add	r0, r4, #-2147483648	; 0x80000000
   1a984:	cmp	r0, #0
   1a988:	movle	r0, #0
   1a98c:	movgt	r0, #1
   1a990:	b	1a82c <__assert_fail@plt+0x9128>
   1a994:	cmn	r4, #1
   1a998:	beq	1a9b8 <__assert_fail@plt+0x92b4>
   1a99c:	mov	r1, r4
   1a9a0:	mov	r0, #-2147483648	; 0x80000000
   1a9a4:	bl	1cb2c <__assert_fail@plt+0xb428>
   1a9a8:	cmp	r6, r0
   1a9ac:	movle	r0, #0
   1a9b0:	movgt	r0, #1
   1a9b4:	b	1a82c <__assert_fail@plt+0x9128>
   1a9b8:	add	r0, r6, #-2147483648	; 0x80000000
   1a9bc:	cmp	r0, #0
   1a9c0:	movle	r0, #0
   1a9c4:	movgt	r0, #1
   1a9c8:	b	1a82c <__assert_fail@plt+0x9128>
   1a9cc:	mul	r1, r6, r4
   1a9d0:	cmp	r1, #63	; 0x3f
   1a9d4:	movle	r3, #64	; 0x40
   1a9d8:	strle	r3, [sp, #4]
   1a9dc:	bgt	1a860 <__assert_fail@plt+0x915c>
   1a9e0:	b	1a83c <__assert_fail@plt+0x9138>
   1a9e4:	mov	r3, #64	; 0x40
   1a9e8:	str	r3, [sp, #4]
   1a9ec:	b	1a83c <__assert_fail@plt+0x9138>
   1a9f0:	rsb	r3, r9, #-2147483648	; 0x80000000
   1a9f4:	cmp	r5, r3
   1a9f8:	movge	r3, #0
   1a9fc:	movlt	r3, #1
   1aa00:	b	1a89c <__assert_fail@plt+0x9198>
   1aa04:	rsb	r3, r5, #-2147483648	; 0x80000000
   1aa08:	cmp	r9, r3
   1aa0c:	movge	r3, #0
   1aa10:	movlt	r3, #1
   1aa14:	b	1a89c <__assert_fail@plt+0x9198>
   1aa18:	cmp	r5, #0
   1aa1c:	blt	1aa44 <__assert_fail@plt+0x9340>
   1aa20:	cmn	r6, #1
   1aa24:	beq	1aa60 <__assert_fail@plt+0x935c>
   1aa28:	mov	r1, r6
   1aa2c:	mov	r0, #-2147483648	; 0x80000000
   1aa30:	bl	1cb2c <__assert_fail@plt+0xb428>
   1aa34:	cmp	r5, r0
   1aa38:	movle	r0, #0
   1aa3c:	movgt	r0, #1
   1aa40:	b	1a8f0 <__assert_fail@plt+0x91ec>
   1aa44:	mov	r1, r6
   1aa48:	mvn	r0, #-2147483648	; 0x80000000
   1aa4c:	bl	1cb2c <__assert_fail@plt+0xb428>
   1aa50:	cmp	r5, r0
   1aa54:	movge	r0, #0
   1aa58:	movlt	r0, #1
   1aa5c:	b	1a8f0 <__assert_fail@plt+0x91ec>
   1aa60:	add	r0, r5, #-2147483648	; 0x80000000
   1aa64:	cmp	r0, #0
   1aa68:	movle	r0, #0
   1aa6c:	movgt	r0, #1
   1aa70:	b	1a8f0 <__assert_fail@plt+0x91ec>
   1aa74:	cmn	r5, #1
   1aa78:	beq	1aa98 <__assert_fail@plt+0x9394>
   1aa7c:	mov	r1, r5
   1aa80:	mov	r0, #-2147483648	; 0x80000000
   1aa84:	bl	1cb2c <__assert_fail@plt+0xb428>
   1aa88:	cmp	r6, r0
   1aa8c:	movle	r0, #0
   1aa90:	movgt	r0, #1
   1aa94:	b	1a8f0 <__assert_fail@plt+0x91ec>
   1aa98:	add	r0, r6, #-2147483648	; 0x80000000
   1aa9c:	cmp	r0, #0
   1aaa0:	movle	r0, #0
   1aaa4:	movgt	r0, #1
   1aaa8:	b	1a8f0 <__assert_fail@plt+0x91ec>
   1aaac:	bl	1ab88 <__assert_fail@plt+0x9484>
   1aab0:	push	{r4, lr}
   1aab4:	bl	1b218 <__assert_fail@plt+0x9b14>
   1aab8:	cmp	r0, #0
   1aabc:	popne	{r4, pc}
   1aac0:	bl	1ab88 <__assert_fail@plt+0x9484>
   1aac4:	push	{r4, lr}
   1aac8:	mov	r1, #1
   1aacc:	bl	1aab0 <__assert_fail@plt+0x93ac>
   1aad0:	pop	{r4, pc}
   1aad4:	push	{r4, lr}
   1aad8:	bl	1b218 <__assert_fail@plt+0x9b14>
   1aadc:	cmp	r0, #0
   1aae0:	popne	{r4, pc}
   1aae4:	bl	1ab88 <__assert_fail@plt+0x9484>
   1aae8:	push	{r4, lr}
   1aaec:	mov	r1, #1
   1aaf0:	bl	1aad4 <__assert_fail@plt+0x93d0>
   1aaf4:	pop	{r4, pc}
   1aaf8:	push	{r4, r5, r6, lr}
   1aafc:	mov	r5, r0
   1ab00:	mov	r4, r1
   1ab04:	mov	r0, r1
   1ab08:	bl	1a5e4 <__assert_fail@plt+0x8ee0>
   1ab0c:	mov	r2, r4
   1ab10:	mov	r1, r5
   1ab14:	bl	11374 <memcpy@plt>
   1ab18:	pop	{r4, r5, r6, pc}
   1ab1c:	push	{r4, r5, r6, lr}
   1ab20:	mov	r5, r0
   1ab24:	mov	r4, r1
   1ab28:	mov	r0, r1
   1ab2c:	bl	1a5f8 <__assert_fail@plt+0x8ef4>
   1ab30:	mov	r2, r4
   1ab34:	mov	r1, r5
   1ab38:	bl	11374 <memcpy@plt>
   1ab3c:	pop	{r4, r5, r6, pc}
   1ab40:	push	{r4, r5, r6, lr}
   1ab44:	mov	r5, r0
   1ab48:	mov	r4, r1
   1ab4c:	add	r0, r1, #1
   1ab50:	bl	1a5f8 <__assert_fail@plt+0x8ef4>
   1ab54:	mov	r2, #0
   1ab58:	strb	r2, [r0, r4]
   1ab5c:	mov	r2, r4
   1ab60:	mov	r1, r5
   1ab64:	bl	11374 <memcpy@plt>
   1ab68:	pop	{r4, r5, r6, pc}
   1ab6c:	push	{r4, lr}
   1ab70:	mov	r4, r0
   1ab74:	bl	1153c <strlen@plt>
   1ab78:	add	r1, r0, #1
   1ab7c:	mov	r0, r4
   1ab80:	bl	1aaf8 <__assert_fail@plt+0x93f4>
   1ab84:	pop	{r4, pc}
   1ab88:	push	{r4, lr}
   1ab8c:	ldr	r3, [pc, #40]	; 1abbc <__assert_fail@plt+0x94b8>
   1ab90:	ldr	r4, [r3]
   1ab94:	mov	r2, #5
   1ab98:	ldr	r1, [pc, #32]	; 1abc0 <__assert_fail@plt+0x94bc>
   1ab9c:	mov	r0, #0
   1aba0:	bl	113bc <dcgettext@plt>
   1aba4:	mov	r3, r0
   1aba8:	ldr	r2, [pc, #20]	; 1abc4 <__assert_fail@plt+0x94c0>
   1abac:	mov	r1, #0
   1abb0:	mov	r0, r4
   1abb4:	bl	11494 <error@plt>
   1abb8:	bl	116e0 <abort@plt>
   1abbc:	ldrdeq	pc, [r2], -r4
   1abc0:	muleq	r1, ip, sl
   1abc4:	andeq	lr, r1, ip, asr r4
   1abc8:	push	{r4, lr}
   1abcc:	mov	r1, #0
   1abd0:	mov	r0, r1
   1abd4:	bl	11524 <getcwd@plt>
   1abd8:	subs	r4, r0, #0
   1abdc:	beq	1abe8 <__assert_fail@plt+0x94e4>
   1abe0:	mov	r0, r4
   1abe4:	pop	{r4, pc}
   1abe8:	bl	1156c <__errno_location@plt>
   1abec:	ldr	r3, [r0]
   1abf0:	cmp	r3, #12
   1abf4:	bne	1abe0 <__assert_fail@plt+0x94dc>
   1abf8:	bl	1ab88 <__assert_fail@plt+0x9484>
   1abfc:	push	{lr}		; (str lr, [sp, #-4]!)
   1ac00:	sub	sp, sp, #20
   1ac04:	ldr	ip, [pc, #144]	; 1ac9c <__assert_fail@plt+0x9598>
   1ac08:	ldr	r5, [ip]
   1ac0c:	sub	r0, r0, #1
   1ac10:	cmp	r0, #3
   1ac14:	ldrls	pc, [pc, r0, lsl #2]
   1ac18:	b	1ac34 <__assert_fail@plt+0x9530>
   1ac1c:	andeq	sl, r1, r8, lsr ip
   1ac20:	andeq	sl, r1, ip, lsr #24
   1ac24:	andeq	sl, r1, ip, lsr #24
   1ac28:	andeq	sl, r1, r0, asr #24
   1ac2c:	ldr	r0, [pc, #108]	; 1aca0 <__assert_fail@plt+0x959c>
   1ac30:	b	1ac44 <__assert_fail@plt+0x9540>
   1ac34:	bl	116e0 <abort@plt>
   1ac38:	ldr	r0, [pc, #100]	; 1aca4 <__assert_fail@plt+0x95a0>
   1ac3c:	b	1ac44 <__assert_fail@plt+0x9540>
   1ac40:	ldr	r0, [pc, #96]	; 1aca8 <__assert_fail@plt+0x95a4>
   1ac44:	cmp	r1, #0
   1ac48:	ldrlt	r4, [pc, #92]	; 1acac <__assert_fail@plt+0x95a8>
   1ac4c:	sublt	r4, r4, r1
   1ac50:	strblt	r2, [sp, #12]
   1ac54:	movlt	r3, #0
   1ac58:	strblt	r3, [sp, #13]
   1ac5c:	addlt	r6, sp, #12
   1ac60:	ldrge	r6, [r3, r1, lsl #4]
   1ac64:	ldrge	r4, [pc, #64]	; 1acac <__assert_fail@plt+0x95a8>
   1ac68:	mov	r2, #5
   1ac6c:	mov	r1, r0
   1ac70:	mov	r0, #0
   1ac74:	bl	113bc <dcgettext@plt>
   1ac78:	ldr	r3, [sp, #24]
   1ac7c:	str	r3, [sp, #4]
   1ac80:	str	r6, [sp]
   1ac84:	mov	r3, r4
   1ac88:	mov	r2, r0
   1ac8c:	mov	r1, #0
   1ac90:	mov	r0, r5
   1ac94:	bl	11494 <error@plt>
   1ac98:	bl	116e0 <abort@plt>
   1ac9c:	ldrdeq	pc, [r2], -r4
   1aca0:	andeq	lr, r1, ip, asr #21
   1aca4:	strdeq	lr, [r1], -r4
   1aca8:			; <UNDEFINED> instruction: 0x0001eab0
   1acac:	andeq	lr, r1, r4, lsl fp
   1acb0:	push	{r4, r5, r6, lr}
   1acb4:	mov	r5, r0
   1acb8:	subs	r4, r1, #0
   1acbc:	blt	1ad10 <__assert_fail@plt+0x960c>
   1acc0:	cmp	r4, #0
   1acc4:	moveq	r3, #0
   1acc8:	beq	1acf4 <__assert_fail@plt+0x95f0>
   1accc:	mov	r2, r4
   1acd0:	asr	r3, r4, #31
   1acd4:	mvn	r0, #0
   1acd8:	mvn	r1, #0
   1acdc:	bl	1d124 <__assert_fail@plt+0xba20>
   1ace0:	ldrd	r2, [r5]
   1ace4:	cmp	r1, r3
   1ace8:	cmpeq	r0, r2
   1acec:	movcc	r3, #1
   1acf0:	movcs	r3, #0
   1acf4:	cmp	r3, #0
   1acf8:	beq	1ad30 <__assert_fail@plt+0x962c>
   1acfc:	mvn	r2, #0
   1ad00:	mvn	r3, #0
   1ad04:	strd	r2, [r5]
   1ad08:	mov	r0, #1
   1ad0c:	pop	{r4, r5, r6, pc}
   1ad10:	mov	r1, r4
   1ad14:	mov	r0, #0
   1ad18:	bl	1cb2c <__assert_fail@plt+0xb428>
   1ad1c:	ldrd	r2, [r5]
   1ad20:	orrs	r3, r2, r3
   1ad24:	movne	r3, #1
   1ad28:	moveq	r3, #0
   1ad2c:	b	1acf4 <__assert_fail@plt+0x95f0>
   1ad30:	asr	r3, r4, #31
   1ad34:	ldr	r1, [r5, #4]
   1ad38:	ldr	r2, [r5]
   1ad3c:	mul	r3, r3, r2
   1ad40:	mla	r1, r4, r1, r3
   1ad44:	umull	r2, r3, r2, r4
   1ad48:	add	r3, r1, r3
   1ad4c:	strd	r2, [r5]
   1ad50:	mov	r0, #0
   1ad54:	pop	{r4, r5, r6, pc}
   1ad58:	push	{r4, r5, r6, r7, r8, lr}
   1ad5c:	subs	r4, r2, #0
   1ad60:	beq	1ad90 <__assert_fail@plt+0x968c>
   1ad64:	mov	r7, r1
   1ad68:	mov	r6, r0
   1ad6c:	mov	r5, #0
   1ad70:	mov	r1, r7
   1ad74:	mov	r0, r6
   1ad78:	bl	1acb0 <__assert_fail@plt+0x95ac>
   1ad7c:	orr	r5, r5, r0
   1ad80:	subs	r4, r4, #1
   1ad84:	bne	1ad70 <__assert_fail@plt+0x966c>
   1ad88:	mov	r0, r5
   1ad8c:	pop	{r4, r5, r6, r7, r8, pc}
   1ad90:	mov	r5, #0
   1ad94:	b	1ad88 <__assert_fail@plt+0x9684>
   1ad98:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ad9c:	sub	sp, sp, #20
   1ada0:	cmp	r2, #36	; 0x24
   1ada4:	bhi	1ade4 <__assert_fail@plt+0x96e0>
   1ada8:	mov	r5, r0
   1adac:	mov	r6, r1
   1adb0:	mov	r7, r2
   1adb4:	mov	r9, r3
   1adb8:	cmp	r1, #0
   1adbc:	addeq	r6, sp, #12
   1adc0:	bl	1156c <__errno_location@plt>
   1adc4:	mov	r8, r0
   1adc8:	mov	r3, #0
   1adcc:	str	r3, [r0]
   1add0:	ldrb	r4, [r5]
   1add4:	bl	11518 <__ctype_b_loc@plt>
   1add8:	ldr	r1, [r0]
   1addc:	mov	r2, r5
   1ade0:	b	1adfc <__assert_fail@plt+0x96f8>
   1ade4:	ldr	r3, [pc, #1056]	; 1b20c <__assert_fail@plt+0x9b08>
   1ade8:	mov	r2, #85	; 0x55
   1adec:	ldr	r1, [pc, #1052]	; 1b210 <__assert_fail@plt+0x9b0c>
   1adf0:	ldr	r0, [pc, #1052]	; 1b214 <__assert_fail@plt+0x9b10>
   1adf4:	bl	11704 <__assert_fail@plt>
   1adf8:	ldrb	r4, [r2, #1]!
   1adfc:	lsl	r3, r4, #1
   1ae00:	ldrh	r3, [r1, r3]
   1ae04:	tst	r3, #8192	; 0x2000
   1ae08:	bne	1adf8 <__assert_fail@plt+0x96f4>
   1ae0c:	cmp	r4, #45	; 0x2d
   1ae10:	moveq	r4, #4
   1ae14:	bne	1ae24 <__assert_fail@plt+0x9720>
   1ae18:	mov	r0, r4
   1ae1c:	add	sp, sp, #20
   1ae20:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ae24:	mov	r3, #0
   1ae28:	mov	r2, r7
   1ae2c:	mov	r1, r6
   1ae30:	mov	r0, r5
   1ae34:	bl	11380 <__strtoull_internal@plt>
   1ae38:	strd	r0, [sp]
   1ae3c:	ldr	r7, [r6]
   1ae40:	cmp	r5, r7
   1ae44:	beq	1ae68 <__assert_fail@plt+0x9764>
   1ae48:	ldr	r3, [r8]
   1ae4c:	cmp	r3, #0
   1ae50:	beq	1aeb0 <__assert_fail@plt+0x97ac>
   1ae54:	cmp	r3, #34	; 0x22
   1ae58:	moveq	r4, #1
   1ae5c:	beq	1aeb4 <__assert_fail@plt+0x97b0>
   1ae60:	mov	r4, #4
   1ae64:	b	1ae18 <__assert_fail@plt+0x9714>
   1ae68:	ldr	r3, [sp, #48]	; 0x30
   1ae6c:	cmp	r3, #0
   1ae70:	moveq	r4, #4
   1ae74:	beq	1ae18 <__assert_fail@plt+0x9714>
   1ae78:	ldrb	r1, [r7]
   1ae7c:	cmp	r1, #0
   1ae80:	moveq	r4, #4
   1ae84:	beq	1ae18 <__assert_fail@plt+0x9714>
   1ae88:	mov	r0, r3
   1ae8c:	bl	11548 <strchr@plt>
   1ae90:	cmp	r0, #0
   1ae94:	moveq	r4, #4
   1ae98:	beq	1ae18 <__assert_fail@plt+0x9714>
   1ae9c:	mov	r2, #1
   1aea0:	mov	r3, #0
   1aea4:	strd	r2, [sp]
   1aea8:	mov	r4, #0
   1aeac:	b	1aec0 <__assert_fail@plt+0x97bc>
   1aeb0:	mov	r4, #0
   1aeb4:	ldr	r3, [sp, #48]	; 0x30
   1aeb8:	cmp	r3, #0
   1aebc:	beq	1afb0 <__assert_fail@plt+0x98ac>
   1aec0:	ldrb	r5, [r7]
   1aec4:	cmp	r5, #0
   1aec8:	beq	1b148 <__assert_fail@plt+0x9a44>
   1aecc:	mov	r1, r5
   1aed0:	ldr	r0, [sp, #48]	; 0x30
   1aed4:	bl	11548 <strchr@plt>
   1aed8:	cmp	r0, #0
   1aedc:	beq	1afb8 <__assert_fail@plt+0x98b4>
   1aee0:	sub	r3, r5, #69	; 0x45
   1aee4:	cmp	r3, #47	; 0x2f
   1aee8:	ldrls	pc, [pc, r3, lsl #2]
   1aeec:	b	1b024 <__assert_fail@plt+0x9920>
   1aef0:	andeq	sl, r1, r8, asr #31
   1aef4:	andeq	fp, r1, r4, lsr #32
   1aef8:	andeq	sl, r1, r8, asr #31
   1aefc:	andeq	fp, r1, r4, lsr #32
   1af00:	andeq	fp, r1, r4, lsr #32
   1af04:	andeq	fp, r1, r4, lsr #32
   1af08:	andeq	sl, r1, r8, asr #31
   1af0c:	andeq	fp, r1, r4, lsr #32
   1af10:	andeq	sl, r1, r8, asr #31
   1af14:	andeq	fp, r1, r4, lsr #32
   1af18:	andeq	fp, r1, r4, lsr #32
   1af1c:	andeq	sl, r1, r8, asr #31
   1af20:	andeq	fp, r1, r4, lsr #32
   1af24:	andeq	fp, r1, r4, lsr #32
   1af28:	andeq	fp, r1, r4, lsr #32
   1af2c:	andeq	sl, r1, r8, asr #31
   1af30:	andeq	fp, r1, r4, lsr #32
   1af34:	andeq	fp, r1, r4, lsr #32
   1af38:	andeq	fp, r1, r4, lsr #32
   1af3c:	andeq	fp, r1, r4, lsr #32
   1af40:	andeq	sl, r1, r8, asr #31
   1af44:	andeq	sl, r1, r8, asr #31
   1af48:	andeq	fp, r1, r4, lsr #32
   1af4c:	andeq	fp, r1, r4, lsr #32
   1af50:	andeq	fp, r1, r4, lsr #32
   1af54:	andeq	fp, r1, r4, lsr #32
   1af58:	andeq	fp, r1, r4, lsr #32
   1af5c:	andeq	fp, r1, r4, lsr #32
   1af60:	andeq	fp, r1, r4, lsr #32
   1af64:	andeq	fp, r1, r4, lsr #32
   1af68:	andeq	fp, r1, r4, lsr #32
   1af6c:	andeq	fp, r1, r4, lsr #32
   1af70:	andeq	fp, r1, r4, lsr #32
   1af74:	andeq	fp, r1, r4, lsr #32
   1af78:	andeq	sl, r1, r8, asr #31
   1af7c:	andeq	fp, r1, r4, lsr #32
   1af80:	andeq	fp, r1, r4, lsr #32
   1af84:	andeq	fp, r1, r4, lsr #32
   1af88:	andeq	sl, r1, r8, asr #31
   1af8c:	andeq	fp, r1, r4, lsr #32
   1af90:	andeq	sl, r1, r8, asr #31
   1af94:	andeq	fp, r1, r4, lsr #32
   1af98:	andeq	fp, r1, r4, lsr #32
   1af9c:	andeq	fp, r1, r4, lsr #32
   1afa0:	andeq	fp, r1, r4, lsr #32
   1afa4:	andeq	fp, r1, r4, lsr #32
   1afa8:	andeq	fp, r1, r4, lsr #32
   1afac:	andeq	sl, r1, r8, asr #31
   1afb0:	strd	r0, [r9]
   1afb4:	b	1ae18 <__assert_fail@plt+0x9714>
   1afb8:	ldrd	r2, [sp]
   1afbc:	strd	r2, [r9]
   1afc0:	orr	r4, r4, #2
   1afc4:	b	1ae18 <__assert_fail@plt+0x9714>
   1afc8:	mov	r1, #48	; 0x30
   1afcc:	ldr	r0, [sp, #48]	; 0x30
   1afd0:	bl	11548 <strchr@plt>
   1afd4:	cmp	r0, #0
   1afd8:	beq	1b114 <__assert_fail@plt+0x9a10>
   1afdc:	ldrb	r3, [r7, #1]
   1afe0:	cmp	r3, #68	; 0x44
   1afe4:	beq	1b000 <__assert_fail@plt+0x98fc>
   1afe8:	cmp	r3, #105	; 0x69
   1afec:	beq	1b00c <__assert_fail@plt+0x9908>
   1aff0:	cmp	r3, #66	; 0x42
   1aff4:	movne	r7, #1
   1aff8:	movne	r1, #1024	; 0x400
   1affc:	bne	1b02c <__assert_fail@plt+0x9928>
   1b000:	mov	r7, #2
   1b004:	mov	r1, #1000	; 0x3e8
   1b008:	b	1b02c <__assert_fail@plt+0x9928>
   1b00c:	ldrb	r7, [r7, #2]
   1b010:	cmp	r7, #66	; 0x42
   1b014:	movne	r7, #1
   1b018:	moveq	r7, #3
   1b01c:	mov	r1, #1024	; 0x400
   1b020:	b	1b02c <__assert_fail@plt+0x9928>
   1b024:	mov	r7, #1
   1b028:	mov	r1, #1024	; 0x400
   1b02c:	sub	r5, r5, #66	; 0x42
   1b030:	cmp	r5, #53	; 0x35
   1b034:	ldrls	pc, [pc, r5, lsl #2]
   1b038:	b	1b1f4 <__assert_fail@plt+0x9af0>
   1b03c:	andeq	fp, r1, r4, asr r1
   1b040:	strdeq	fp, [r1], -r4
   1b044:	strdeq	fp, [r1], -r4
   1b048:	andeq	fp, r1, r4, ror #2
   1b04c:	strdeq	fp, [r1], -r4
   1b050:	andeq	fp, r1, r4, ror r1
   1b054:	strdeq	fp, [r1], -r4
   1b058:	strdeq	fp, [r1], -r4
   1b05c:	strdeq	fp, [r1], -r4
   1b060:	andeq	fp, r1, r4, lsl #3
   1b064:	strdeq	fp, [r1], -r4
   1b068:	muleq	r1, r4, r1
   1b06c:	strdeq	fp, [r1], -r4
   1b070:	strdeq	fp, [r1], -r4
   1b074:	andeq	fp, r1, r4, lsr #3
   1b078:	strdeq	fp, [r1], -r4
   1b07c:	strdeq	fp, [r1], -r4
   1b080:	strdeq	fp, [r1], -r4
   1b084:			; <UNDEFINED> instruction: 0x0001b1b4
   1b088:	strdeq	fp, [r1], -r4
   1b08c:	strdeq	fp, [r1], -r4
   1b090:	strdeq	fp, [r1], -r4
   1b094:	strdeq	fp, [r1], -r4
   1b098:	ldrdeq	fp, [r1], -r4
   1b09c:	andeq	fp, r1, r4, ror #3
   1b0a0:	strdeq	fp, [r1], -r4
   1b0a4:	strdeq	fp, [r1], -r4
   1b0a8:	strdeq	fp, [r1], -r4
   1b0ac:	strdeq	fp, [r1], -r4
   1b0b0:	strdeq	fp, [r1], -r4
   1b0b4:	strdeq	fp, [r1], -r4
   1b0b8:	strdeq	fp, [r1], -r4
   1b0bc:	andeq	fp, r1, r0, lsr #2
   1b0c0:	andeq	fp, r1, r4, lsl #4
   1b0c4:	strdeq	fp, [r1], -r4
   1b0c8:	strdeq	fp, [r1], -r4
   1b0cc:	strdeq	fp, [r1], -r4
   1b0d0:	andeq	fp, r1, r4, ror r1
   1b0d4:	strdeq	fp, [r1], -r4
   1b0d8:	strdeq	fp, [r1], -r4
   1b0dc:	strdeq	fp, [r1], -r4
   1b0e0:	andeq	fp, r1, r4, lsl #3
   1b0e4:	strdeq	fp, [r1], -r4
   1b0e8:	muleq	r1, r4, r1
   1b0ec:	strdeq	fp, [r1], -r4
   1b0f0:	strdeq	fp, [r1], -r4
   1b0f4:	strdeq	fp, [r1], -r4
   1b0f8:	strdeq	fp, [r1], -r4
   1b0fc:	strdeq	fp, [r1], -r4
   1b100:	strdeq	fp, [r1], -r4
   1b104:			; <UNDEFINED> instruction: 0x0001b1b4
   1b108:	strdeq	fp, [r1], -r4
   1b10c:	strdeq	fp, [r1], -r4
   1b110:	andeq	fp, r1, r4, asr #3
   1b114:	mov	r7, #1
   1b118:	mov	r1, #1024	; 0x400
   1b11c:	b	1b02c <__assert_fail@plt+0x9928>
   1b120:	mov	r1, #512	; 0x200
   1b124:	mov	r0, sp
   1b128:	bl	1acb0 <__assert_fail@plt+0x95ac>
   1b12c:	orr	r4, r4, r0
   1b130:	ldr	r3, [r6]
   1b134:	add	r2, r3, r7
   1b138:	str	r2, [r6]
   1b13c:	ldrb	r3, [r3, r7]
   1b140:	cmp	r3, #0
   1b144:	orrne	r4, r4, #2
   1b148:	ldrd	r2, [sp]
   1b14c:	strd	r2, [r9]
   1b150:	b	1ae18 <__assert_fail@plt+0x9714>
   1b154:	mov	r1, #1024	; 0x400
   1b158:	mov	r0, sp
   1b15c:	bl	1acb0 <__assert_fail@plt+0x95ac>
   1b160:	b	1b12c <__assert_fail@plt+0x9a28>
   1b164:	mov	r2, #6
   1b168:	mov	r0, sp
   1b16c:	bl	1ad58 <__assert_fail@plt+0x9654>
   1b170:	b	1b12c <__assert_fail@plt+0x9a28>
   1b174:	mov	r2, #3
   1b178:	mov	r0, sp
   1b17c:	bl	1ad58 <__assert_fail@plt+0x9654>
   1b180:	b	1b12c <__assert_fail@plt+0x9a28>
   1b184:	mov	r2, #1
   1b188:	mov	r0, sp
   1b18c:	bl	1ad58 <__assert_fail@plt+0x9654>
   1b190:	b	1b12c <__assert_fail@plt+0x9a28>
   1b194:	mov	r2, #2
   1b198:	mov	r0, sp
   1b19c:	bl	1ad58 <__assert_fail@plt+0x9654>
   1b1a0:	b	1b12c <__assert_fail@plt+0x9a28>
   1b1a4:	mov	r2, #5
   1b1a8:	mov	r0, sp
   1b1ac:	bl	1ad58 <__assert_fail@plt+0x9654>
   1b1b0:	b	1b12c <__assert_fail@plt+0x9a28>
   1b1b4:	mov	r2, #4
   1b1b8:	mov	r0, sp
   1b1bc:	bl	1ad58 <__assert_fail@plt+0x9654>
   1b1c0:	b	1b12c <__assert_fail@plt+0x9a28>
   1b1c4:	mov	r1, #2
   1b1c8:	mov	r0, sp
   1b1cc:	bl	1acb0 <__assert_fail@plt+0x95ac>
   1b1d0:	b	1b12c <__assert_fail@plt+0x9a28>
   1b1d4:	mov	r2, #8
   1b1d8:	mov	r0, sp
   1b1dc:	bl	1ad58 <__assert_fail@plt+0x9654>
   1b1e0:	b	1b12c <__assert_fail@plt+0x9a28>
   1b1e4:	mov	r2, #7
   1b1e8:	mov	r0, sp
   1b1ec:	bl	1ad58 <__assert_fail@plt+0x9654>
   1b1f0:	b	1b12c <__assert_fail@plt+0x9a28>
   1b1f4:	ldrd	r2, [sp]
   1b1f8:	strd	r2, [r9]
   1b1fc:	orr	r4, r4, #2
   1b200:	b	1ae18 <__assert_fail@plt+0x9714>
   1b204:	mov	r0, #0
   1b208:	b	1b12c <__assert_fail@plt+0x9a28>
   1b20c:	andeq	lr, r1, r8, lsl fp
   1b210:	andeq	lr, r1, r4, lsr #22
   1b214:	andeq	lr, r1, r4, lsr fp
   1b218:	push	{r4, lr}
   1b21c:	mov	r2, r0
   1b220:	mov	r3, r1
   1b224:	cmp	r1, #0
   1b228:	cmpne	r0, #0
   1b22c:	moveq	r3, #1
   1b230:	moveq	r2, r3
   1b234:	umull	r0, r1, r2, r3
   1b238:	cmp	r0, #0
   1b23c:	cmpge	r1, #0
   1b240:	bne	1b254 <__assert_fail@plt+0x9b50>
   1b244:	mov	r1, r3
   1b248:	mov	r0, r2
   1b24c:	bl	112e4 <calloc@plt>
   1b250:	pop	{r4, pc}
   1b254:	bl	1156c <__errno_location@plt>
   1b258:	mov	r3, #12
   1b25c:	str	r3, [r0]
   1b260:	mov	r0, #0
   1b264:	pop	{r4, pc}
   1b268:	push	{r4, lr}
   1b26c:	cmp	r0, #0
   1b270:	moveq	r0, #1
   1b274:	cmp	r0, #0
   1b278:	blt	1b284 <__assert_fail@plt+0x9b80>
   1b27c:	bl	114d0 <malloc@plt>
   1b280:	pop	{r4, pc}
   1b284:	bl	1156c <__errno_location@plt>
   1b288:	mov	r3, #12
   1b28c:	str	r3, [r0]
   1b290:	mov	r0, #0
   1b294:	pop	{r4, pc}
   1b298:	push	{r4, lr}
   1b29c:	cmp	r0, #0
   1b2a0:	beq	1b2bc <__assert_fail@plt+0x9bb8>
   1b2a4:	cmp	r1, #0
   1b2a8:	beq	1b2c8 <__assert_fail@plt+0x9bc4>
   1b2ac:	cmp	r1, #0
   1b2b0:	blt	1b2d4 <__assert_fail@plt+0x9bd0>
   1b2b4:	bl	113d4 <realloc@plt>
   1b2b8:	pop	{r4, pc}
   1b2bc:	mov	r0, r1
   1b2c0:	bl	1b268 <__assert_fail@plt+0x9b64>
   1b2c4:	pop	{r4, pc}
   1b2c8:	bl	15478 <__assert_fail@plt+0x3d74>
   1b2cc:	mov	r0, #0
   1b2d0:	pop	{r4, pc}
   1b2d4:	bl	1156c <__errno_location@plt>
   1b2d8:	mov	r3, #12
   1b2dc:	str	r3, [r0]
   1b2e0:	mov	r0, #0
   1b2e4:	pop	{r4, pc}
   1b2e8:	cmp	r1, #2
   1b2ec:	bls	1b30c <__assert_fail@plt+0x9c08>
   1b2f0:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b2f4:	mov	r7, #1
   1b2f8:	mov	ip, r7
   1b2fc:	mov	lr, #0
   1b300:	mvn	r4, #0
   1b304:	mov	r8, r7
   1b308:	b	1b334 <__assert_fail@plt+0x9c30>
   1b30c:	mov	r3, #1
   1b310:	str	r3, [r2]
   1b314:	sub	r0, r1, #1
   1b318:	bx	lr
   1b31c:	cmp	r6, r5
   1b320:	beq	1b364 <__assert_fail@plt+0x9c60>
   1b324:	mov	r4, lr
   1b328:	add	lr, lr, #1
   1b32c:	mov	r7, r8
   1b330:	mov	ip, r8
   1b334:	add	r3, lr, ip
   1b338:	cmp	r1, r3
   1b33c:	bls	1b378 <__assert_fail@plt+0x9c74>
   1b340:	ldrb	r6, [r0, r3]
   1b344:	add	r5, r0, r4
   1b348:	ldrb	r5, [r5, ip]
   1b34c:	cmp	r6, r5
   1b350:	bcs	1b31c <__assert_fail@plt+0x9c18>
   1b354:	sub	r7, r3, r4
   1b358:	mov	lr, r3
   1b35c:	mov	ip, #1
   1b360:	b	1b334 <__assert_fail@plt+0x9c30>
   1b364:	cmp	ip, r7
   1b368:	addne	ip, ip, #1
   1b36c:	addeq	lr, lr, r7
   1b370:	moveq	ip, #1
   1b374:	b	1b334 <__assert_fail@plt+0x9c30>
   1b378:	str	r7, [r2]
   1b37c:	mov	r8, #1
   1b380:	mov	ip, r8
   1b384:	mov	lr, #0
   1b388:	mvn	r7, #0
   1b38c:	mov	r9, r8
   1b390:	b	1b3ac <__assert_fail@plt+0x9ca8>
   1b394:	cmp	r6, r5
   1b398:	beq	1b3dc <__assert_fail@plt+0x9cd8>
   1b39c:	mov	r7, lr
   1b3a0:	add	lr, lr, #1
   1b3a4:	mov	r8, r9
   1b3a8:	mov	ip, r9
   1b3ac:	add	r3, lr, ip
   1b3b0:	cmp	r1, r3
   1b3b4:	bls	1b3f0 <__assert_fail@plt+0x9cec>
   1b3b8:	ldrb	r6, [r0, r3]
   1b3bc:	add	r5, r0, r7
   1b3c0:	ldrb	r5, [r5, ip]
   1b3c4:	cmp	r6, r5
   1b3c8:	bls	1b394 <__assert_fail@plt+0x9c90>
   1b3cc:	sub	r8, r3, r7
   1b3d0:	mov	lr, r3
   1b3d4:	mov	ip, #1
   1b3d8:	b	1b3ac <__assert_fail@plt+0x9ca8>
   1b3dc:	cmp	ip, r8
   1b3e0:	addne	ip, ip, #1
   1b3e4:	addeq	lr, lr, r8
   1b3e8:	moveq	ip, #1
   1b3ec:	b	1b3ac <__assert_fail@plt+0x9ca8>
   1b3f0:	add	r7, r7, #1
   1b3f4:	add	r0, r4, #1
   1b3f8:	cmp	r7, r0
   1b3fc:	strcs	r8, [r2]
   1b400:	movcs	r0, r7
   1b404:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b408:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b40c:	sub	sp, sp, #1056	; 0x420
   1b410:	sub	sp, sp, #4
   1b414:	mov	r5, r0
   1b418:	mov	r6, r1
   1b41c:	mov	r0, r2
   1b420:	str	r2, [sp]
   1b424:	mov	r4, r3
   1b428:	add	r2, sp, #1040	; 0x410
   1b42c:	add	r2, r2, #12
   1b430:	mov	r1, r3
   1b434:	bl	1b2e8 <__assert_fail@plt+0x9be4>
   1b438:	mov	sl, r0
   1b43c:	add	r3, sp, #24
   1b440:	add	r2, sp, #32
   1b444:	add	r2, r2, #1016	; 0x3f8
   1b448:	str	r4, [r3, #4]!
   1b44c:	cmp	r3, r2
   1b450:	bne	1b448 <__assert_fail@plt+0x9d44>
   1b454:	cmp	r4, #0
   1b458:	beq	1b484 <__assert_fail@plt+0x9d80>
   1b45c:	ldr	r3, [sp]
   1b460:	sub	r1, r3, #1
   1b464:	sub	r3, r4, #1
   1b468:	ldrb	r2, [r1, #1]!
   1b46c:	add	r0, sp, #1056	; 0x420
   1b470:	add	r2, r0, r2, lsl #2
   1b474:	str	r3, [r2, #-1028]	; 0xfffffbfc
   1b478:	sub	r3, r3, #1
   1b47c:	cmn	r3, #1
   1b480:	bne	1b468 <__assert_fail@plt+0x9d64>
   1b484:	ldr	r3, [sp, #1052]	; 0x41c
   1b488:	str	r3, [sp, #4]
   1b48c:	mov	r2, sl
   1b490:	ldr	r0, [sp]
   1b494:	add	r1, r0, r3
   1b498:	bl	11398 <memcmp@plt>
   1b49c:	cmp	r0, #0
   1b4a0:	beq	1b600 <__assert_fail@plt+0x9efc>
   1b4a4:	sub	r3, r4, sl
   1b4a8:	cmp	r3, sl
   1b4ac:	movcc	r3, sl
   1b4b0:	add	r3, r3, #1
   1b4b4:	str	r3, [sp, #4]
   1b4b8:	mov	r9, #0
   1b4bc:	sub	r7, r4, #1
   1b4c0:	sub	fp, sl, #1
   1b4c4:	ldr	r3, [sp]
   1b4c8:	add	r2, r3, fp
   1b4cc:	str	r2, [sp, #8]
   1b4d0:	add	r3, r3, sl
   1b4d4:	rsb	r2, sl, #1
   1b4d8:	str	r2, [sp, #12]
   1b4dc:	mov	r0, r6
   1b4e0:	mov	r6, r3
   1b4e4:	b	1b644 <__assert_fail@plt+0x9f40>
   1b4e8:	cmp	fp, sl
   1b4ec:	movcs	r3, fp
   1b4f0:	movcc	r3, sl
   1b4f4:	cmp	r3, r7
   1b4f8:	bcs	1b6e8 <__assert_fail@plt+0x9fe4>
   1b4fc:	ldr	lr, [sp]
   1b500:	add	r1, lr, r3
   1b504:	add	r0, r9, r3
   1b508:	add	r2, r5, r0
   1b50c:	ldrb	lr, [lr, r3]
   1b510:	ldrb	r0, [r5, r0]
   1b514:	cmp	lr, r0
   1b518:	bne	1b538 <__assert_fail@plt+0x9e34>
   1b51c:	add	r3, r3, #1
   1b520:	cmp	r3, r7
   1b524:	bcs	1b6e8 <__assert_fail@plt+0x9fe4>
   1b528:	ldrb	lr, [r1, #1]!
   1b52c:	ldrb	r0, [r2, #1]!
   1b530:	cmp	lr, r0
   1b534:	beq	1b51c <__assert_fail@plt+0x9e18>
   1b538:	ldr	r2, [sp, #20]
   1b53c:	add	r9, r2, r9
   1b540:	add	r9, r3, r9
   1b544:	mov	fp, ip
   1b548:	mov	r0, r8
   1b54c:	add	r8, r9, r4
   1b550:	sub	r2, r8, r0
   1b554:	mov	r1, #0
   1b558:	add	r0, r5, r0
   1b55c:	bl	115cc <memchr@plt>
   1b560:	adds	r3, r8, #0
   1b564:	movne	r3, #1
   1b568:	cmp	r0, #0
   1b56c:	movne	r3, #0
   1b570:	mov	r0, r3
   1b574:	cmp	r3, #0
   1b578:	beq	1b778 <__assert_fail@plt+0xa074>
   1b57c:	add	r3, r5, r8
   1b580:	ldrb	r3, [r3, #-1]
   1b584:	add	r2, sp, #1056	; 0x420
   1b588:	add	r3, r2, r3, lsl #2
   1b58c:	ldr	ip, [r3, #-1028]	; 0xfffffbfc
   1b590:	cmp	ip, #0
   1b594:	beq	1b4e8 <__assert_fail@plt+0x9de4>
   1b598:	ldr	r3, [sp, #4]
   1b59c:	cmp	fp, #0
   1b5a0:	cmpne	r3, ip
   1b5a4:	ldrhi	ip, [sp, #12]
   1b5a8:	add	r9, r9, ip
   1b5ac:	mov	fp, #0
   1b5b0:	b	1b548 <__assert_fail@plt+0x9e44>
   1b5b4:	mov	r1, r3
   1b5b8:	sub	r3, r1, #1
   1b5bc:	cmp	r6, r3
   1b5c0:	beq	1b5d4 <__assert_fail@plt+0x9ed0>
   1b5c4:	ldrb	lr, [r0, #-1]!
   1b5c8:	ldrb	ip, [r2, #-1]!
   1b5cc:	cmp	lr, ip
   1b5d0:	beq	1b5b4 <__assert_fail@plt+0x9eb0>
   1b5d4:	add	fp, fp, #1
   1b5d8:	cmp	fp, r1
   1b5dc:	bhi	1b5f8 <__assert_fail@plt+0x9ef4>
   1b5e0:	ldr	r3, [sp, #4]
   1b5e4:	add	r9, r9, r3
   1b5e8:	ldr	fp, [sp, #12]
   1b5ec:	b	1b548 <__assert_fail@plt+0x9e44>
   1b5f0:	mov	r1, sl
   1b5f4:	b	1b5d4 <__assert_fail@plt+0x9ed0>
   1b5f8:	add	r0, r5, r9
   1b5fc:	b	1b778 <__assert_fail@plt+0xa074>
   1b600:	mov	fp, #0
   1b604:	mov	r9, fp
   1b608:	sub	r7, r4, #1
   1b60c:	sub	r3, sl, #1
   1b610:	str	r3, [sp, #8]
   1b614:	ldr	r2, [sp, #4]
   1b618:	sub	r2, r4, r2
   1b61c:	str	r2, [sp, #12]
   1b620:	ldr	r2, [sp]
   1b624:	add	r3, r2, r3
   1b628:	str	r3, [sp, #16]
   1b62c:	rsb	r3, sl, #1
   1b630:	str	r3, [sp, #20]
   1b634:	mov	r0, r6
   1b638:	b	1b54c <__assert_fail@plt+0x9e48>
   1b63c:	add	r9, r9, r3
   1b640:	mov	r0, r8
   1b644:	add	r8, r9, r4
   1b648:	sub	r2, r8, r0
   1b64c:	mov	r1, #0
   1b650:	add	r0, r5, r0
   1b654:	bl	115cc <memchr@plt>
   1b658:	adds	r3, r8, #0
   1b65c:	movne	r3, #1
   1b660:	cmp	r0, #0
   1b664:	movne	r3, #0
   1b668:	mov	r0, r3
   1b66c:	cmp	r3, #0
   1b670:	beq	1b778 <__assert_fail@plt+0xa074>
   1b674:	add	r3, r5, r8
   1b678:	ldrb	r3, [r3, #-1]
   1b67c:	add	r2, sp, #1056	; 0x420
   1b680:	add	r3, r2, r3, lsl #2
   1b684:	ldr	r3, [r3, #-1028]	; 0xfffffbfc
   1b688:	cmp	r3, #0
   1b68c:	bne	1b63c <__assert_fail@plt+0x9f38>
   1b690:	cmp	sl, r7
   1b694:	bcs	1b724 <__assert_fail@plt+0xa020>
   1b698:	add	r3, r9, sl
   1b69c:	add	r2, r5, r3
   1b6a0:	ldrb	r1, [r6]
   1b6a4:	ldrb	r3, [r5, r3]
   1b6a8:	cmp	r1, r3
   1b6ac:	movne	r3, sl
   1b6b0:	bne	1b6d8 <__assert_fail@plt+0x9fd4>
   1b6b4:	mov	r1, r6
   1b6b8:	mov	r3, sl
   1b6bc:	add	r3, r3, #1
   1b6c0:	cmp	r3, r7
   1b6c4:	bcs	1b724 <__assert_fail@plt+0xa020>
   1b6c8:	ldrb	ip, [r1, #1]!
   1b6cc:	ldrb	r0, [r2, #1]!
   1b6d0:	cmp	ip, r0
   1b6d4:	beq	1b6bc <__assert_fail@plt+0x9fb8>
   1b6d8:	ldr	r2, [sp, #12]
   1b6dc:	add	r9, r2, r9
   1b6e0:	add	r9, r9, r3
   1b6e4:	b	1b640 <__assert_fail@plt+0x9f3c>
   1b6e8:	ldr	r1, [sp, #8]
   1b6ec:	cmp	fp, sl
   1b6f0:	movcs	r1, sl
   1b6f4:	bcs	1b5d4 <__assert_fail@plt+0x9ed0>
   1b6f8:	ldr	r3, [sp, #8]
   1b6fc:	add	r3, r9, r3
   1b700:	add	r2, r5, r3
   1b704:	ldr	ip, [sp, #16]
   1b708:	ldrb	r0, [ip]
   1b70c:	ldrb	r3, [r5, r3]
   1b710:	cmp	r0, r3
   1b714:	bne	1b5f0 <__assert_fail@plt+0x9eec>
   1b718:	mov	r0, ip
   1b71c:	sub	r6, fp, #1
   1b720:	b	1b5b8 <__assert_fail@plt+0x9eb4>
   1b724:	cmn	fp, #1
   1b728:	beq	1b774 <__assert_fail@plt+0xa070>
   1b72c:	add	r3, r9, fp
   1b730:	add	r2, r5, r3
   1b734:	ldr	r0, [sp, #8]
   1b738:	ldrb	r1, [r0]
   1b73c:	ldrb	r3, [r5, r3]
   1b740:	cmp	r1, r3
   1b744:	bne	1b768 <__assert_fail@plt+0xa064>
   1b748:	mov	r3, r0
   1b74c:	ldr	ip, [sp]
   1b750:	cmp	r3, ip
   1b754:	beq	1b774 <__assert_fail@plt+0xa070>
   1b758:	ldrb	r0, [r3, #-1]!
   1b75c:	ldrb	r1, [r2, #-1]!
   1b760:	cmp	r0, r1
   1b764:	beq	1b750 <__assert_fail@plt+0xa04c>
   1b768:	ldr	r3, [sp, #4]
   1b76c:	add	r9, r9, r3
   1b770:	b	1b640 <__assert_fail@plt+0x9f3c>
   1b774:	add	r0, r5, r9
   1b778:	add	sp, sp, #1056	; 0x420
   1b77c:	add	sp, sp, #4
   1b780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b784:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b788:	sub	sp, sp, #36	; 0x24
   1b78c:	ldrb	r3, [r0]
   1b790:	cmp	r3, #0
   1b794:	beq	1b838 <__assert_fail@plt+0xa134>
   1b798:	ldrb	r2, [r1]
   1b79c:	cmp	r2, #0
   1b7a0:	beq	1baf8 <__assert_fail@plt+0xa3f4>
   1b7a4:	mov	r4, r0
   1b7a8:	add	ip, r1, #1
   1b7ac:	mov	lr, #1
   1b7b0:	mov	fp, ip
   1b7b4:	cmp	r3, r2
   1b7b8:	movne	lr, #0
   1b7bc:	andeq	lr, lr, #1
   1b7c0:	ldrb	r3, [r4, #1]!
   1b7c4:	cmp	r3, #0
   1b7c8:	beq	1b840 <__assert_fail@plt+0xa13c>
   1b7cc:	ldrb	r2, [ip], #1
   1b7d0:	cmp	r2, #0
   1b7d4:	bne	1b7b0 <__assert_fail@plt+0xa0ac>
   1b7d8:	cmp	lr, #0
   1b7dc:	bne	1baf8 <__assert_fail@plt+0xa3f4>
   1b7e0:	mov	r5, r0
   1b7e4:	sub	r4, fp, r1
   1b7e8:	ldrb	r1, [r1]
   1b7ec:	add	r0, r0, #1
   1b7f0:	bl	11548 <strchr@plt>
   1b7f4:	mov	r6, r0
   1b7f8:	cmp	r0, #0
   1b7fc:	cmpne	r4, #1
   1b800:	beq	1baf8 <__assert_fail@plt+0xa3f4>
   1b804:	sub	fp, fp, r4
   1b808:	add	r0, r5, r4
   1b80c:	cmp	r6, r0
   1b810:	subls	r1, r0, r6
   1b814:	movhi	r1, #1
   1b818:	mov	r7, r1
   1b81c:	cmp	r4, #31
   1b820:	bls	1b854 <__assert_fail@plt+0xa150>
   1b824:	mov	r3, r4
   1b828:	mov	r2, fp
   1b82c:	mov	r0, r6
   1b830:	bl	1b408 <__assert_fail@plt+0x9d04>
   1b834:	b	1baf8 <__assert_fail@plt+0xa3f4>
   1b838:	mov	fp, r1
   1b83c:	mov	lr, #1
   1b840:	ldrb	r3, [fp]
   1b844:	cmp	r3, #0
   1b848:	movne	r0, #0
   1b84c:	beq	1b7d8 <__assert_fail@plt+0xa0d4>
   1b850:	b	1baf8 <__assert_fail@plt+0xa3f4>
   1b854:	add	r2, sp, #28
   1b858:	mov	r1, r4
   1b85c:	mov	r0, fp
   1b860:	bl	1b2e8 <__assert_fail@plt+0x9be4>
   1b864:	mov	r8, r0
   1b868:	ldr	r3, [sp, #28]
   1b86c:	str	r3, [sp, #8]
   1b870:	mov	r2, r0
   1b874:	add	r1, fp, r3
   1b878:	mov	r0, fp
   1b87c:	bl	11398 <memcmp@plt>
   1b880:	cmp	r0, #0
   1b884:	beq	1b914 <__assert_fail@plt+0xa210>
   1b888:	sub	r3, r4, r8
   1b88c:	cmp	r3, r8
   1b890:	movcc	r3, r8
   1b894:	add	r3, r3, #1
   1b898:	str	r3, [sp, #8]
   1b89c:	mov	r5, #0
   1b8a0:	sub	r3, r8, #1
   1b8a4:	add	r2, fp, r3
   1b8a8:	add	sl, fp, r8
   1b8ac:	rsb	r1, r8, #1
   1b8b0:	str	r1, [sp, #4]
   1b8b4:	mov	r0, r7
   1b8b8:	str	fp, [sp, #12]
   1b8bc:	mov	fp, r3
   1b8c0:	mov	r7, r2
   1b8c4:	b	1ba80 <__assert_fail@plt+0xa37c>
   1b8c8:	mov	r1, r3
   1b8cc:	sub	r3, r1, #1
   1b8d0:	cmp	r3, r7
   1b8d4:	beq	1b8e8 <__assert_fail@plt+0xa1e4>
   1b8d8:	ldrb	lr, [r0, #-1]!
   1b8dc:	ldrb	ip, [r2, #-1]!
   1b8e0:	cmp	lr, ip
   1b8e4:	beq	1b8c8 <__assert_fail@plt+0xa1c4>
   1b8e8:	add	r9, r9, #1
   1b8ec:	cmp	r9, r1
   1b8f0:	bhi	1b90c <__assert_fail@plt+0xa208>
   1b8f4:	ldr	r3, [sp, #8]
   1b8f8:	add	r5, r5, r3
   1b8fc:	ldr	r9, [sp, #16]
   1b900:	b	1b960 <__assert_fail@plt+0xa25c>
   1b904:	mov	r1, r8
   1b908:	b	1b8e8 <__assert_fail@plt+0xa1e4>
   1b90c:	add	r0, r6, r5
   1b910:	b	1baf8 <__assert_fail@plt+0xa3f4>
   1b914:	mov	r9, #0
   1b918:	mov	r5, r9
   1b91c:	sub	r3, r8, #1
   1b920:	str	r3, [sp, #4]
   1b924:	ldr	r2, [sp, #8]
   1b928:	sub	r2, r4, r2
   1b92c:	str	r2, [sp, #16]
   1b930:	add	r3, fp, r3
   1b934:	str	r3, [sp, #20]
   1b938:	rsb	r3, r8, #1
   1b93c:	str	r3, [sp, #12]
   1b940:	mov	r0, r7
   1b944:	b	1b964 <__assert_fail@plt+0xa260>
   1b948:	mov	r0, #0
   1b94c:	b	1baf8 <__assert_fail@plt+0xa3f4>
   1b950:	ldr	r2, [sp, #12]
   1b954:	add	r5, r2, r5
   1b958:	add	r5, r5, r3
   1b95c:	mov	r9, #0
   1b960:	mov	r0, sl
   1b964:	add	sl, r4, r5
   1b968:	sub	r2, sl, r0
   1b96c:	mov	r1, #0
   1b970:	add	r0, r6, r0
   1b974:	bl	115cc <memchr@plt>
   1b978:	adds	r3, sl, #0
   1b97c:	movne	r3, #1
   1b980:	cmp	r0, #0
   1b984:	movne	r3, #0
   1b988:	mov	r0, r3
   1b98c:	cmp	r3, #0
   1b990:	beq	1baf8 <__assert_fail@plt+0xa3f4>
   1b994:	cmp	r8, r9
   1b998:	movcs	r3, r8
   1b99c:	movcc	r3, r9
   1b9a0:	cmp	r4, r3
   1b9a4:	bls	1b9e4 <__assert_fail@plt+0xa2e0>
   1b9a8:	add	r1, fp, r3
   1b9ac:	add	r0, r3, r5
   1b9b0:	add	r2, r6, r0
   1b9b4:	ldrb	ip, [fp, r3]
   1b9b8:	ldrb	r0, [r6, r0]
   1b9bc:	cmp	ip, r0
   1b9c0:	bne	1b950 <__assert_fail@plt+0xa24c>
   1b9c4:	add	r3, r3, #1
   1b9c8:	cmp	r4, r3
   1b9cc:	beq	1b9e4 <__assert_fail@plt+0xa2e0>
   1b9d0:	ldrb	ip, [r1, #1]!
   1b9d4:	ldrb	r0, [r2, #1]!
   1b9d8:	cmp	ip, r0
   1b9dc:	beq	1b9c4 <__assert_fail@plt+0xa2c0>
   1b9e0:	b	1b950 <__assert_fail@plt+0xa24c>
   1b9e4:	ldr	r1, [sp, #4]
   1b9e8:	cmp	r8, r9
   1b9ec:	movls	r1, r8
   1b9f0:	bls	1b8e8 <__assert_fail@plt+0xa1e4>
   1b9f4:	ldr	r3, [sp, #4]
   1b9f8:	add	r3, r5, r3
   1b9fc:	add	r2, r6, r3
   1ba00:	ldr	ip, [sp, #20]
   1ba04:	ldrb	r0, [ip]
   1ba08:	ldrb	r3, [r6, r3]
   1ba0c:	cmp	r0, r3
   1ba10:	bne	1b904 <__assert_fail@plt+0xa200>
   1ba14:	mov	r0, ip
   1ba18:	sub	r7, r9, #1
   1ba1c:	b	1b8cc <__assert_fail@plt+0xa1c8>
   1ba20:	cmn	fp, #1
   1ba24:	beq	1baf4 <__assert_fail@plt+0xa3f0>
   1ba28:	add	r3, r5, fp
   1ba2c:	add	r2, r6, r3
   1ba30:	ldrb	r1, [r7]
   1ba34:	ldrb	r3, [r6, r3]
   1ba38:	cmp	r1, r3
   1ba3c:	bne	1ba60 <__assert_fail@plt+0xa35c>
   1ba40:	mov	r3, r7
   1ba44:	ldr	ip, [sp, #12]
   1ba48:	cmp	r3, ip
   1ba4c:	beq	1baf4 <__assert_fail@plt+0xa3f0>
   1ba50:	ldrb	r0, [r3, #-1]!
   1ba54:	ldrb	r1, [r2, #-1]!
   1ba58:	cmp	r0, r1
   1ba5c:	beq	1ba48 <__assert_fail@plt+0xa344>
   1ba60:	ldr	r3, [sp, #8]
   1ba64:	add	r5, r5, r3
   1ba68:	b	1ba7c <__assert_fail@plt+0xa378>
   1ba6c:	mov	r3, r8
   1ba70:	ldr	r2, [sp, #4]
   1ba74:	add	r5, r2, r5
   1ba78:	add	r5, r5, r3
   1ba7c:	mov	r0, r9
   1ba80:	add	r9, r4, r5
   1ba84:	sub	r2, r9, r0
   1ba88:	mov	r1, #0
   1ba8c:	add	r0, r6, r0
   1ba90:	bl	115cc <memchr@plt>
   1ba94:	adds	r3, r9, #0
   1ba98:	movne	r3, #1
   1ba9c:	cmp	r0, #0
   1baa0:	movne	r3, #0
   1baa4:	cmp	r3, #0
   1baa8:	beq	1b948 <__assert_fail@plt+0xa244>
   1baac:	cmp	r4, r8
   1bab0:	bls	1ba20 <__assert_fail@plt+0xa31c>
   1bab4:	add	r3, r8, r5
   1bab8:	add	r2, r6, r3
   1babc:	ldrb	r1, [sl]
   1bac0:	ldrb	r3, [r6, r3]
   1bac4:	cmp	r1, r3
   1bac8:	bne	1ba6c <__assert_fail@plt+0xa368>
   1bacc:	mov	r1, sl
   1bad0:	mov	r3, r8
   1bad4:	add	r3, r3, #1
   1bad8:	cmp	r4, r3
   1badc:	beq	1ba20 <__assert_fail@plt+0xa31c>
   1bae0:	ldrb	ip, [r1, #1]!
   1bae4:	ldrb	r0, [r2, #1]!
   1bae8:	cmp	ip, r0
   1baec:	beq	1bad4 <__assert_fail@plt+0xa3d0>
   1baf0:	b	1ba70 <__assert_fail@plt+0xa36c>
   1baf4:	add	r0, r6, r5
   1baf8:	add	sp, sp, #36	; 0x24
   1bafc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb00:	push	{r4, lr}
   1bb04:	mov	r0, #1
   1bb08:	bl	12b0c <__assert_fail@plt+0x1408>
   1bb0c:	pop	{r4, pc}
   1bb10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb14:	sub	sp, sp, #12
   1bb18:	str	r0, [sp, #4]
   1bb1c:	mov	r6, r1
   1bb20:	mov	fp, r2
   1bb24:	mov	r8, r3
   1bb28:	bl	1153c <strlen@plt>
   1bb2c:	str	r0, [sp]
   1bb30:	ldr	r4, [r6]
   1bb34:	cmp	r4, #0
   1bb38:	beq	1bbe0 <__assert_fail@plt+0xa4dc>
   1bb3c:	mov	r5, fp
   1bb40:	mov	sl, #0
   1bb44:	mvn	r9, #0
   1bb48:	mov	r7, sl
   1bb4c:	b	1bb6c <__assert_fail@plt+0xa468>
   1bb50:	mov	r9, r7
   1bb54:	b	1bbd4 <__assert_fail@plt+0xa4d0>
   1bb58:	add	r7, r7, #1
   1bb5c:	ldr	r4, [r6, #4]!
   1bb60:	add	r5, r5, r8
   1bb64:	cmp	r4, #0
   1bb68:	beq	1bbcc <__assert_fail@plt+0xa4c8>
   1bb6c:	ldr	r2, [sp]
   1bb70:	ldr	r1, [sp, #4]
   1bb74:	mov	r0, r4
   1bb78:	bl	116d4 <strncmp@plt>
   1bb7c:	cmp	r0, #0
   1bb80:	bne	1bb58 <__assert_fail@plt+0xa454>
   1bb84:	mov	r0, r4
   1bb88:	bl	1153c <strlen@plt>
   1bb8c:	ldr	r3, [sp]
   1bb90:	cmp	r3, r0
   1bb94:	beq	1bb50 <__assert_fail@plt+0xa44c>
   1bb98:	cmn	r9, #1
   1bb9c:	moveq	r9, r7
   1bba0:	beq	1bb58 <__assert_fail@plt+0xa454>
   1bba4:	cmp	fp, #0
   1bba8:	moveq	sl, #1
   1bbac:	beq	1bb58 <__assert_fail@plt+0xa454>
   1bbb0:	mov	r2, r8
   1bbb4:	mov	r1, r5
   1bbb8:	mla	r0, r8, r9, fp
   1bbbc:	bl	11398 <memcmp@plt>
   1bbc0:	cmp	r0, #0
   1bbc4:	movne	sl, #1
   1bbc8:	b	1bb58 <__assert_fail@plt+0xa454>
   1bbcc:	cmp	sl, #0
   1bbd0:	mvnne	r9, #1
   1bbd4:	mov	r0, r9
   1bbd8:	add	sp, sp, #12
   1bbdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bbe0:	mvn	r9, #0
   1bbe4:	b	1bbd4 <__assert_fail@plt+0xa4d0>
   1bbe8:	push	{r4, r5, r6, lr}
   1bbec:	mov	r6, r0
   1bbf0:	ldr	r0, [r1]
   1bbf4:	cmp	r0, #0
   1bbf8:	beq	1bc34 <__assert_fail@plt+0xa530>
   1bbfc:	mov	r4, r1
   1bc00:	mov	r5, #0
   1bc04:	mov	r1, r6
   1bc08:	bl	11320 <strcmp@plt>
   1bc0c:	cmp	r0, #0
   1bc10:	beq	1bc2c <__assert_fail@plt+0xa528>
   1bc14:	add	r5, r5, #1
   1bc18:	ldr	r0, [r4, #4]!
   1bc1c:	cmp	r0, #0
   1bc20:	bne	1bc04 <__assert_fail@plt+0xa500>
   1bc24:	mvn	r0, #0
   1bc28:	pop	{r4, r5, r6, pc}
   1bc2c:	mov	r0, r5
   1bc30:	pop	{r4, r5, r6, pc}
   1bc34:	mvn	r0, #0
   1bc38:	pop	{r4, r5, r6, pc}
   1bc3c:	push	{r4, r5, r6, lr}
   1bc40:	sub	sp, sp, #8
   1bc44:	mov	r5, r0
   1bc48:	mov	r4, r1
   1bc4c:	cmn	r2, #1
   1bc50:	mov	r2, #5
   1bc54:	ldreq	r1, [pc, #76]	; 1bca8 <__assert_fail@plt+0xa5a4>
   1bc58:	ldrne	r1, [pc, #76]	; 1bcac <__assert_fail@plt+0xa5a8>
   1bc5c:	mov	r0, #0
   1bc60:	bl	113bc <dcgettext@plt>
   1bc64:	mov	r6, r0
   1bc68:	mov	r2, r4
   1bc6c:	mov	r1, #8
   1bc70:	mov	r0, #0
   1bc74:	bl	19bb8 <__assert_fail@plt+0x84b4>
   1bc78:	mov	r4, r0
   1bc7c:	mov	r1, r5
   1bc80:	mov	r0, #1
   1bc84:	bl	19e48 <__assert_fail@plt+0x8744>
   1bc88:	str	r0, [sp]
   1bc8c:	mov	r3, r4
   1bc90:	mov	r2, r6
   1bc94:	mov	r1, #0
   1bc98:	mov	r0, r1
   1bc9c:	bl	11494 <error@plt>
   1bca0:	add	sp, sp, #8
   1bca4:	pop	{r4, r5, r6, pc}
   1bca8:	andeq	lr, r1, ip, asr fp
   1bcac:	andeq	lr, r1, r8, ror fp
   1bcb0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bcb4:	mov	r7, r0
   1bcb8:	mov	r4, r1
   1bcbc:	mov	r8, r2
   1bcc0:	mov	r2, #5
   1bcc4:	ldr	r1, [pc, #224]	; 1bdac <__assert_fail@plt+0xa6a8>
   1bcc8:	mov	r0, #0
   1bccc:	bl	113bc <dcgettext@plt>
   1bcd0:	ldr	r3, [pc, #216]	; 1bdb0 <__assert_fail@plt+0xa6ac>
   1bcd4:	ldr	r1, [r3]
   1bcd8:	bl	112f0 <fputs_unlocked@plt>
   1bcdc:	ldr	r5, [r7]
   1bce0:	cmp	r5, #0
   1bce4:	beq	1bd74 <__assert_fail@plt+0xa670>
   1bce8:	mov	r9, #0
   1bcec:	mov	r6, r9
   1bcf0:	ldr	sl, [pc, #184]	; 1bdb0 <__assert_fail@plt+0xa6ac>
   1bcf4:	b	1bd30 <__assert_fail@plt+0xa62c>
   1bcf8:	ldr	r9, [sl]
   1bcfc:	mov	r0, r5
   1bd00:	bl	19e58 <__assert_fail@plt+0x8754>
   1bd04:	mov	r3, r0
   1bd08:	ldr	r2, [pc, #164]	; 1bdb4 <__assert_fail@plt+0xa6b0>
   1bd0c:	mov	r1, #1
   1bd10:	mov	r0, r9
   1bd14:	bl	115c0 <__fprintf_chk@plt>
   1bd18:	mov	r9, r4
   1bd1c:	add	r6, r6, #1
   1bd20:	ldr	r5, [r7, #4]!
   1bd24:	add	r4, r4, r8
   1bd28:	cmp	r5, #0
   1bd2c:	beq	1bd74 <__assert_fail@plt+0xa670>
   1bd30:	cmp	r6, #0
   1bd34:	beq	1bcf8 <__assert_fail@plt+0xa5f4>
   1bd38:	mov	r2, r8
   1bd3c:	mov	r1, r4
   1bd40:	mov	r0, r9
   1bd44:	bl	11398 <memcmp@plt>
   1bd48:	cmp	r0, #0
   1bd4c:	bne	1bcf8 <__assert_fail@plt+0xa5f4>
   1bd50:	ldr	fp, [sl]
   1bd54:	mov	r0, r5
   1bd58:	bl	19e58 <__assert_fail@plt+0x8754>
   1bd5c:	mov	r3, r0
   1bd60:	ldr	r2, [pc, #80]	; 1bdb8 <__assert_fail@plt+0xa6b4>
   1bd64:	mov	r1, #1
   1bd68:	mov	r0, fp
   1bd6c:	bl	115c0 <__fprintf_chk@plt>
   1bd70:	b	1bd1c <__assert_fail@plt+0xa618>
   1bd74:	ldr	r3, [pc, #52]	; 1bdb0 <__assert_fail@plt+0xa6ac>
   1bd78:	ldr	r0, [r3]
   1bd7c:	ldr	r3, [r0, #20]
   1bd80:	ldr	r2, [r0, #24]
   1bd84:	cmp	r3, r2
   1bd88:	bcs	1bda0 <__assert_fail@plt+0xa69c>
   1bd8c:	add	r2, r3, #1
   1bd90:	str	r2, [r0, #20]
   1bd94:	mov	r2, #10
   1bd98:	strb	r2, [r3]
   1bd9c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bda0:	mov	r1, #10
   1bda4:	bl	11608 <__overflow@plt>
   1bda8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bdac:	muleq	r1, r8, fp
   1bdb0:	andeq	pc, r2, r0, lsr r3	; <UNPREDICTABLE>
   1bdb4:			; <UNDEFINED> instruction: 0x0001ebb0
   1bdb8:			; <UNDEFINED> instruction: 0x0001ebb8
   1bdbc:	push	{r4, r5, r6, r7, r8, lr}
   1bdc0:	mov	r7, r0
   1bdc4:	mov	r5, r1
   1bdc8:	mov	r4, r2
   1bdcc:	mov	r6, r3
   1bdd0:	ldrb	r3, [sp, #32]
   1bdd4:	cmp	r3, #0
   1bdd8:	beq	1be28 <__assert_fail@plt+0xa724>
   1bddc:	ldr	r3, [sp, #24]
   1bde0:	mov	r2, r6
   1bde4:	mov	r1, r4
   1bde8:	mov	r0, r5
   1bdec:	bl	1bb10 <__assert_fail@plt+0xa40c>
   1bdf0:	cmp	r0, #0
   1bdf4:	popge	{r4, r5, r6, r7, r8, pc}
   1bdf8:	mov	r2, r0
   1bdfc:	mov	r1, r5
   1be00:	mov	r0, r7
   1be04:	bl	1bc3c <__assert_fail@plt+0xa538>
   1be08:	ldr	r2, [sp, #24]
   1be0c:	mov	r1, r6
   1be10:	mov	r0, r4
   1be14:	bl	1bcb0 <__assert_fail@plt+0xa5ac>
   1be18:	ldr	r3, [sp, #28]
   1be1c:	blx	r3
   1be20:	mvn	r0, #0
   1be24:	pop	{r4, r5, r6, r7, r8, pc}
   1be28:	mov	r1, r2
   1be2c:	mov	r0, r5
   1be30:	bl	1bbe8 <__assert_fail@plt+0xa4e4>
   1be34:	b	1bdf0 <__assert_fail@plt+0xa6ec>
   1be38:	push	{r4, r5, r6, r7, r8, lr}
   1be3c:	ldr	r6, [r1]
   1be40:	cmp	r6, #0
   1be44:	beq	1be88 <__assert_fail@plt+0xa784>
   1be48:	mov	r7, r3
   1be4c:	mov	r8, r0
   1be50:	mov	r4, r2
   1be54:	mov	r5, r1
   1be58:	mov	r2, r7
   1be5c:	mov	r1, r4
   1be60:	mov	r0, r8
   1be64:	bl	11398 <memcmp@plt>
   1be68:	cmp	r0, #0
   1be6c:	beq	1be80 <__assert_fail@plt+0xa77c>
   1be70:	ldr	r6, [r5, #4]!
   1be74:	add	r4, r4, r7
   1be78:	cmp	r6, #0
   1be7c:	bne	1be58 <__assert_fail@plt+0xa754>
   1be80:	mov	r0, r6
   1be84:	pop	{r4, r5, r6, r7, r8, pc}
   1be88:	mov	r6, #0
   1be8c:	b	1be80 <__assert_fail@plt+0xa77c>
   1be90:	ldrb	r3, [r0]
   1be94:	cmp	r3, #47	; 0x2f
   1be98:	bne	1bea8 <__assert_fail@plt+0xa7a4>
   1be9c:	ldrb	r3, [r0, #1]!
   1bea0:	cmp	r3, #47	; 0x2f
   1bea4:	beq	1be9c <__assert_fail@plt+0xa798>
   1bea8:	ldrb	r2, [r0]
   1beac:	cmp	r2, #0
   1beb0:	bxeq	lr
   1beb4:	push	{lr}		; (str lr, [sp, #-4]!)
   1beb8:	mov	r1, r0
   1bebc:	mov	r3, #0
   1bec0:	mov	lr, #1
   1bec4:	mov	ip, r3
   1bec8:	b	1bed8 <__assert_fail@plt+0xa7d4>
   1becc:	ldrb	r2, [r1, #1]!
   1bed0:	cmp	r2, #0
   1bed4:	beq	1bef4 <__assert_fail@plt+0xa7f0>
   1bed8:	cmp	r2, #47	; 0x2f
   1bedc:	moveq	r3, lr
   1bee0:	beq	1becc <__assert_fail@plt+0xa7c8>
   1bee4:	cmp	r3, #0
   1bee8:	movne	r0, r1
   1beec:	movne	r3, ip
   1bef0:	b	1becc <__assert_fail@plt+0xa7c8>
   1bef4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bef8:	push	{r4, lr}
   1befc:	mov	r4, r0
   1bf00:	bl	1153c <strlen@plt>
   1bf04:	cmp	r0, #1
   1bf08:	popls	{r4, pc}
   1bf0c:	sub	r3, r0, #1
   1bf10:	add	r2, r4, r3
   1bf14:	ldrb	r1, [r4, r3]
   1bf18:	cmp	r1, #47	; 0x2f
   1bf1c:	popne	{r4, pc}
   1bf20:	cmp	r3, #1
   1bf24:	beq	1bf48 <__assert_fail@plt+0xa844>
   1bf28:	sub	r0, r3, #1
   1bf2c:	ldrb	r1, [r2, #-1]!
   1bf30:	cmp	r1, #47	; 0x2f
   1bf34:	beq	1bf40 <__assert_fail@plt+0xa83c>
   1bf38:	mov	r0, r3
   1bf3c:	pop	{r4, pc}
   1bf40:	mov	r3, r0
   1bf44:	b	1bf20 <__assert_fail@plt+0xa81c>
   1bf48:	mov	r0, #1
   1bf4c:	pop	{r4, pc}
   1bf50:	ldr	r0, [r0]
   1bf54:	cmp	r0, #0
   1bf58:	bxlt	lr
   1bf5c:	push	{r4, lr}
   1bf60:	bl	116ec <close@plt>
   1bf64:	cmp	r0, #0
   1bf68:	popeq	{r4, pc}
   1bf6c:	ldr	r3, [pc, #12]	; 1bf80 <__assert_fail@plt+0xa87c>
   1bf70:	mov	r2, #64	; 0x40
   1bf74:	ldr	r1, [pc, #8]	; 1bf84 <__assert_fail@plt+0xa880>
   1bf78:	ldr	r0, [pc, #8]	; 1bf88 <__assert_fail@plt+0xa884>
   1bf7c:	bl	11704 <__assert_fail@plt>
   1bf80:	andeq	lr, r1, r0, asr #23
   1bf84:	ldrdeq	lr, [r1], -r8
   1bf88:	andeq	lr, r1, ip, ror #23
   1bf8c:	push	{r4, r5, r6, lr}
   1bf90:	mov	r4, r0
   1bf94:	mov	r2, #18688	; 0x4900
   1bf98:	ldr	r0, [r0]
   1bf9c:	bl	11554 <openat64@plt>
   1bfa0:	subs	r5, r0, #0
   1bfa4:	blt	1bfbc <__assert_fail@plt+0xa8b8>
   1bfa8:	mov	r0, r4
   1bfac:	bl	1bf50 <__assert_fail@plt+0xa84c>
   1bfb0:	str	r5, [r4]
   1bfb4:	mov	r0, #0
   1bfb8:	pop	{r4, r5, r6, pc}
   1bfbc:	mvn	r0, #0
   1bfc0:	pop	{r4, r5, r6, pc}
   1bfc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bfc8:	sub	sp, sp, #20
   1bfcc:	mov	r5, r0
   1bfd0:	bl	11404 <chdir@plt>
   1bfd4:	subs	r4, r0, #0
   1bfd8:	beq	1bff0 <__assert_fail@plt+0xa8ec>
   1bfdc:	bl	1156c <__errno_location@plt>
   1bfe0:	mov	r9, r0
   1bfe4:	ldr	r3, [r0]
   1bfe8:	cmp	r3, #36	; 0x24
   1bfec:	beq	1bffc <__assert_fail@plt+0xa8f8>
   1bff0:	mov	r0, r4
   1bff4:	add	sp, sp, #20
   1bff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bffc:	mov	r0, r5
   1c000:	bl	1153c <strlen@plt>
   1c004:	mvn	r3, #99	; 0x63
   1c008:	str	r3, [sp, #12]
   1c00c:	subs	r6, r0, #0
   1c010:	beq	1c128 <__assert_fail@plt+0xaa24>
   1c014:	cmp	r6, #4096	; 0x1000
   1c018:	bcc	1c13c <__assert_fail@plt+0xaa38>
   1c01c:	ldr	r1, [pc, #512]	; 1c224 <__assert_fail@plt+0xab20>
   1c020:	mov	r0, r5
   1c024:	bl	116f8 <strspn@plt>
   1c028:	mov	r4, r0
   1c02c:	cmp	r0, #2
   1c030:	beq	1c150 <__assert_fail@plt+0xaa4c>
   1c034:	cmp	r0, #0
   1c038:	moveq	r4, r5
   1c03c:	bne	1c1b0 <__assert_fail@plt+0xaaac>
   1c040:	ldrb	r3, [r4]
   1c044:	cmp	r3, #47	; 0x2f
   1c048:	beq	1c1cc <__assert_fail@plt+0xaac8>
   1c04c:	add	r3, r5, r6
   1c050:	str	r3, [sp, #4]
   1c054:	cmp	r4, r3
   1c058:	bhi	1c1e0 <__assert_fail@plt+0xaadc>
   1c05c:	mov	fp, r3
   1c060:	mov	r6, r4
   1c064:	sub	r3, r3, r4
   1c068:	cmp	r3, #4096	; 0x1000
   1c06c:	movge	r7, #47	; 0x2f
   1c070:	movge	sl, #0
   1c074:	ldrge	r8, [pc, #428]	; 1c228 <__assert_fail@plt+0xab24>
   1c078:	blt	1c0e0 <__assert_fail@plt+0xa9dc>
   1c07c:	mov	r2, #4096	; 0x1000
   1c080:	mov	r1, r7
   1c084:	mov	r0, r4
   1c088:	bl	11560 <memrchr@plt>
   1c08c:	subs	r5, r0, #0
   1c090:	beq	1c1f4 <__assert_fail@plt+0xaaf0>
   1c094:	strb	sl, [r5]
   1c098:	sub	r6, r5, r6
   1c09c:	cmp	r6, r8
   1c0a0:	bgt	1c204 <__assert_fail@plt+0xab00>
   1c0a4:	mov	r1, r4
   1c0a8:	add	r0, sp, #12
   1c0ac:	bl	1bf8c <__assert_fail@plt+0xa888>
   1c0b0:	strb	r7, [r5]
   1c0b4:	cmp	r0, #0
   1c0b8:	bne	1c110 <__assert_fail@plt+0xaa0c>
   1c0bc:	add	r5, r5, #1
   1c0c0:	ldr	r1, [pc, #348]	; 1c224 <__assert_fail@plt+0xab20>
   1c0c4:	mov	r0, r5
   1c0c8:	bl	116f8 <strspn@plt>
   1c0cc:	add	r4, r5, r0
   1c0d0:	mov	r6, r4
   1c0d4:	sub	r3, fp, r4
   1c0d8:	cmp	r3, r8
   1c0dc:	bgt	1c07c <__assert_fail@plt+0xa978>
   1c0e0:	ldr	r3, [sp, #4]
   1c0e4:	cmp	r3, r4
   1c0e8:	bls	1c100 <__assert_fail@plt+0xa9fc>
   1c0ec:	mov	r1, r4
   1c0f0:	add	r0, sp, #12
   1c0f4:	bl	1bf8c <__assert_fail@plt+0xa888>
   1c0f8:	cmp	r0, #0
   1c0fc:	bne	1c110 <__assert_fail@plt+0xaa0c>
   1c100:	ldr	r0, [sp, #12]
   1c104:	bl	11674 <fchdir@plt>
   1c108:	subs	r4, r0, #0
   1c10c:	beq	1c218 <__assert_fail@plt+0xab14>
   1c110:	ldr	r4, [r9]
   1c114:	add	r0, sp, #12
   1c118:	bl	1bf50 <__assert_fail@plt+0xa84c>
   1c11c:	str	r4, [r9]
   1c120:	mvn	r4, #0
   1c124:	b	1bff0 <__assert_fail@plt+0xa8ec>
   1c128:	ldr	r3, [pc, #252]	; 1c22c <__assert_fail@plt+0xab28>
   1c12c:	mov	r2, #126	; 0x7e
   1c130:	ldr	r1, [pc, #248]	; 1c230 <__assert_fail@plt+0xab2c>
   1c134:	ldr	r0, [pc, #248]	; 1c234 <__assert_fail@plt+0xab30>
   1c138:	bl	11704 <__assert_fail@plt>
   1c13c:	ldr	r3, [pc, #232]	; 1c22c <__assert_fail@plt+0xab28>
   1c140:	mov	r2, #127	; 0x7f
   1c144:	ldr	r1, [pc, #228]	; 1c230 <__assert_fail@plt+0xab2c>
   1c148:	ldr	r0, [pc, #232]	; 1c238 <__assert_fail@plt+0xab34>
   1c14c:	bl	11704 <__assert_fail@plt>
   1c150:	sub	r2, r6, #3
   1c154:	mov	r1, #47	; 0x2f
   1c158:	add	r0, r5, #3
   1c15c:	bl	115cc <memchr@plt>
   1c160:	subs	r4, r0, #0
   1c164:	moveq	r3, #36	; 0x24
   1c168:	streq	r3, [r9]
   1c16c:	mvneq	r4, #0
   1c170:	beq	1bff0 <__assert_fail@plt+0xa8ec>
   1c174:	mov	r3, #0
   1c178:	strb	r3, [r4]
   1c17c:	mov	r1, r5
   1c180:	add	r0, sp, #12
   1c184:	bl	1bf8c <__assert_fail@plt+0xa888>
   1c188:	mov	r3, #47	; 0x2f
   1c18c:	strb	r3, [r4]
   1c190:	cmp	r0, #0
   1c194:	bne	1c110 <__assert_fail@plt+0xaa0c>
   1c198:	add	r4, r4, #1
   1c19c:	ldr	r1, [pc, #128]	; 1c224 <__assert_fail@plt+0xab20>
   1c1a0:	mov	r0, r4
   1c1a4:	bl	116f8 <strspn@plt>
   1c1a8:	add	r4, r4, r0
   1c1ac:	b	1c040 <__assert_fail@plt+0xa93c>
   1c1b0:	ldr	r1, [pc, #108]	; 1c224 <__assert_fail@plt+0xab20>
   1c1b4:	add	r0, sp, #12
   1c1b8:	bl	1bf8c <__assert_fail@plt+0xa888>
   1c1bc:	cmp	r0, #0
   1c1c0:	addeq	r4, r5, r4
   1c1c4:	beq	1c040 <__assert_fail@plt+0xa93c>
   1c1c8:	b	1c110 <__assert_fail@plt+0xaa0c>
   1c1cc:	ldr	r3, [pc, #88]	; 1c22c <__assert_fail@plt+0xab28>
   1c1d0:	mov	r2, #162	; 0xa2
   1c1d4:	ldr	r1, [pc, #84]	; 1c230 <__assert_fail@plt+0xab2c>
   1c1d8:	ldr	r0, [pc, #92]	; 1c23c <__assert_fail@plt+0xab38>
   1c1dc:	bl	11704 <__assert_fail@plt>
   1c1e0:	ldr	r3, [pc, #68]	; 1c22c <__assert_fail@plt+0xab28>
   1c1e4:	mov	r2, #163	; 0xa3
   1c1e8:	ldr	r1, [pc, #64]	; 1c230 <__assert_fail@plt+0xab2c>
   1c1ec:	ldr	r0, [pc, #76]	; 1c240 <__assert_fail@plt+0xab3c>
   1c1f0:	bl	11704 <__assert_fail@plt>
   1c1f4:	mov	r3, #36	; 0x24
   1c1f8:	str	r3, [r9]
   1c1fc:	mvn	r4, #0
   1c200:	b	1bff0 <__assert_fail@plt+0xa8ec>
   1c204:	ldr	r3, [pc, #32]	; 1c22c <__assert_fail@plt+0xab28>
   1c208:	mov	r2, #179	; 0xb3
   1c20c:	ldr	r1, [pc, #28]	; 1c230 <__assert_fail@plt+0xab2c>
   1c210:	ldr	r0, [pc, #44]	; 1c244 <__assert_fail@plt+0xab40>
   1c214:	bl	11704 <__assert_fail@plt>
   1c218:	add	r0, sp, #12
   1c21c:	bl	1bf50 <__assert_fail@plt+0xa84c>
   1c220:	b	1bff0 <__assert_fail@plt+0xa8ec>
   1c224:	andeq	lr, r1, r8, asr #8
   1c228:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1c22c:	andeq	lr, r1, ip, asr #23
   1c230:	ldrdeq	lr, [r1], -r8
   1c234:	strdeq	lr, [r1], -ip
   1c238:	andeq	lr, r1, r4, lsl #24
   1c23c:	andeq	lr, r1, r0, lsl ip
   1c240:	andeq	lr, r1, ip, lsl ip
   1c244:	andeq	lr, r1, ip, lsr #24
   1c248:	push	{r4, r5, r6, lr}
   1c24c:	mov	r5, r0
   1c250:	bl	11470 <__fpending@plt>
   1c254:	mov	r6, r0
   1c258:	ldr	r4, [r5]
   1c25c:	and	r4, r4, #32
   1c260:	mov	r0, r5
   1c264:	bl	1c2c0 <__assert_fail@plt+0xabbc>
   1c268:	cmp	r4, #0
   1c26c:	bne	1c294 <__assert_fail@plt+0xab90>
   1c270:	cmp	r0, #0
   1c274:	popeq	{r4, r5, r6, pc}
   1c278:	cmp	r6, #0
   1c27c:	bne	1c2b0 <__assert_fail@plt+0xabac>
   1c280:	bl	1156c <__errno_location@plt>
   1c284:	ldr	r0, [r0]
   1c288:	subs	r0, r0, #9
   1c28c:	mvnne	r0, #0
   1c290:	pop	{r4, r5, r6, pc}
   1c294:	cmp	r0, #0
   1c298:	bne	1c2b8 <__assert_fail@plt+0xabb4>
   1c29c:	bl	1156c <__errno_location@plt>
   1c2a0:	mov	r3, #0
   1c2a4:	str	r3, [r0]
   1c2a8:	mvn	r0, #0
   1c2ac:	pop	{r4, r5, r6, pc}
   1c2b0:	mvn	r0, #0
   1c2b4:	pop	{r4, r5, r6, pc}
   1c2b8:	mvn	r0, #0
   1c2bc:	pop	{r4, r5, r6, pc}
   1c2c0:	push	{r4, r5, r6, lr}
   1c2c4:	sub	sp, sp, #8
   1c2c8:	mov	r4, r0
   1c2cc:	bl	115b4 <fileno@plt>
   1c2d0:	cmp	r0, #0
   1c2d4:	blt	1c34c <__assert_fail@plt+0xac48>
   1c2d8:	mov	r0, r4
   1c2dc:	bl	114e8 <__freading@plt>
   1c2e0:	cmp	r0, #0
   1c2e4:	beq	1c318 <__assert_fail@plt+0xac14>
   1c2e8:	mov	r0, r4
   1c2ec:	bl	115b4 <fileno@plt>
   1c2f0:	mov	r3, #1
   1c2f4:	str	r3, [sp]
   1c2f8:	mov	r2, #0
   1c2fc:	mov	r3, #0
   1c300:	bl	1144c <lseek64@plt>
   1c304:	mvn	r2, #0
   1c308:	mvn	r3, #0
   1c30c:	cmp	r1, r3
   1c310:	cmpeq	r0, r2
   1c314:	beq	1c358 <__assert_fail@plt+0xac54>
   1c318:	mov	r0, r4
   1c31c:	bl	1c3a4 <__assert_fail@plt+0xaca0>
   1c320:	cmp	r0, #0
   1c324:	beq	1c358 <__assert_fail@plt+0xac54>
   1c328:	bl	1156c <__errno_location@plt>
   1c32c:	mov	r5, r0
   1c330:	ldr	r6, [r0]
   1c334:	mov	r0, r4
   1c338:	bl	115d8 <fclose@plt>
   1c33c:	cmp	r6, #0
   1c340:	strne	r6, [r5]
   1c344:	mvnne	r0, #0
   1c348:	b	1c360 <__assert_fail@plt+0xac5c>
   1c34c:	mov	r0, r4
   1c350:	bl	115d8 <fclose@plt>
   1c354:	b	1c360 <__assert_fail@plt+0xac5c>
   1c358:	mov	r0, r4
   1c35c:	bl	115d8 <fclose@plt>
   1c360:	add	sp, sp, #8
   1c364:	pop	{r4, r5, r6, pc}
   1c368:	push	{r1, r2, r3}
   1c36c:	push	{lr}		; (str lr, [sp, #-4]!)
   1c370:	sub	sp, sp, #8
   1c374:	ldr	r1, [sp, #12]
   1c378:	tst	r1, #64	; 0x40
   1c37c:	addne	r3, sp, #20
   1c380:	strne	r3, [sp, #4]
   1c384:	ldrne	r2, [sp, #16]
   1c388:	moveq	r2, #0
   1c38c:	bl	114ac <open64@plt>
   1c390:	bl	1c674 <__assert_fail@plt+0xaf70>
   1c394:	add	sp, sp, #8
   1c398:	pop	{lr}		; (ldr lr, [sp], #4)
   1c39c:	add	sp, sp, #12
   1c3a0:	bx	lr
   1c3a4:	push	{r4, lr}
   1c3a8:	sub	sp, sp, #8
   1c3ac:	subs	r4, r0, #0
   1c3b0:	beq	1c3c4 <__assert_fail@plt+0xacc0>
   1c3b4:	mov	r0, r4
   1c3b8:	bl	114e8 <__freading@plt>
   1c3bc:	cmp	r0, #0
   1c3c0:	bne	1c3d4 <__assert_fail@plt+0xacd0>
   1c3c4:	mov	r0, r4
   1c3c8:	bl	1132c <fflush@plt>
   1c3cc:	add	sp, sp, #8
   1c3d0:	pop	{r4, pc}
   1c3d4:	ldr	r3, [r4]
   1c3d8:	tst	r3, #256	; 0x100
   1c3dc:	bne	1c3ec <__assert_fail@plt+0xace8>
   1c3e0:	mov	r0, r4
   1c3e4:	bl	1132c <fflush@plt>
   1c3e8:	b	1c3cc <__assert_fail@plt+0xacc8>
   1c3ec:	mov	r3, #1
   1c3f0:	str	r3, [sp]
   1c3f4:	mov	r2, #0
   1c3f8:	mov	r3, #0
   1c3fc:	mov	r0, r4
   1c400:	bl	1c408 <__assert_fail@plt+0xad04>
   1c404:	b	1c3e0 <__assert_fail@plt+0xacdc>
   1c408:	push	{r4, r5, r6, r7, lr}
   1c40c:	sub	sp, sp, #12
   1c410:	mov	r4, r0
   1c414:	mov	r6, r2
   1c418:	mov	r7, r3
   1c41c:	ldr	r5, [sp, #32]
   1c420:	ldr	r2, [r0, #8]
   1c424:	ldr	r3, [r0, #4]
   1c428:	cmp	r2, r3
   1c42c:	beq	1c44c <__assert_fail@plt+0xad48>
   1c430:	str	r5, [sp]
   1c434:	mov	r2, r6
   1c438:	mov	r3, r7
   1c43c:	mov	r0, r4
   1c440:	bl	115e4 <fseeko64@plt>
   1c444:	add	sp, sp, #12
   1c448:	pop	{r4, r5, r6, r7, pc}
   1c44c:	ldr	r2, [r0, #20]
   1c450:	ldr	r3, [r0, #16]
   1c454:	cmp	r2, r3
   1c458:	bne	1c430 <__assert_fail@plt+0xad2c>
   1c45c:	ldr	r3, [r0, #36]	; 0x24
   1c460:	cmp	r3, #0
   1c464:	bne	1c430 <__assert_fail@plt+0xad2c>
   1c468:	bl	115b4 <fileno@plt>
   1c46c:	str	r5, [sp]
   1c470:	mov	r2, r6
   1c474:	mov	r3, r7
   1c478:	bl	1144c <lseek64@plt>
   1c47c:	mvn	r2, #0
   1c480:	mvn	r3, #0
   1c484:	cmp	r1, r3
   1c488:	cmpeq	r0, r2
   1c48c:	beq	1c4a8 <__assert_fail@plt+0xada4>
   1c490:	ldr	r3, [r4]
   1c494:	bic	r3, r3, #16
   1c498:	str	r3, [r4]
   1c49c:	strd	r0, [r4, #80]	; 0x50
   1c4a0:	mov	r0, #0
   1c4a4:	b	1c444 <__assert_fail@plt+0xad40>
   1c4a8:	mvn	r0, #0
   1c4ac:	b	1c444 <__assert_fail@plt+0xad40>
   1c4b0:	push	{lr}		; (str lr, [sp, #-4]!)
   1c4b4:	sub	sp, sp, #268	; 0x10c
   1c4b8:	ldr	r2, [pc, #68]	; 1c504 <__assert_fail@plt+0xae00>
   1c4bc:	add	r1, sp, #4
   1c4c0:	bl	1c5cc <__assert_fail@plt+0xaec8>
   1c4c4:	cmp	r0, #0
   1c4c8:	movne	r0, #0
   1c4cc:	bne	1c4fc <__assert_fail@plt+0xadf8>
   1c4d0:	ldr	r1, [pc, #48]	; 1c508 <__assert_fail@plt+0xae04>
   1c4d4:	add	r0, sp, #4
   1c4d8:	bl	11320 <strcmp@plt>
   1c4dc:	cmp	r0, #0
   1c4e0:	moveq	r0, #0
   1c4e4:	beq	1c4fc <__assert_fail@plt+0xadf8>
   1c4e8:	ldr	r1, [pc, #28]	; 1c50c <__assert_fail@plt+0xae08>
   1c4ec:	add	r0, sp, #4
   1c4f0:	bl	11320 <strcmp@plt>
   1c4f4:	adds	r0, r0, #0
   1c4f8:	movne	r0, #1
   1c4fc:	add	sp, sp, #268	; 0x10c
   1c500:	pop	{pc}		; (ldr pc, [sp], #4)
   1c504:	andeq	r0, r0, r1, lsl #2
   1c508:	andeq	lr, r1, r0, asr #24
   1c50c:	andeq	lr, r1, r4, asr #24
   1c510:	push	{r4, lr}
   1c514:	ldrb	r3, [r0]
   1c518:	cmp	r3, #0
   1c51c:	beq	1c544 <__assert_fail@plt+0xae40>
   1c520:	mov	r2, r0
   1c524:	mov	r0, #0
   1c528:	add	r0, r3, r0, ror #23
   1c52c:	ldrb	r3, [r2, #1]!
   1c530:	cmp	r3, #0
   1c534:	bne	1c528 <__assert_fail@plt+0xae24>
   1c538:	bl	1cb0c <__assert_fail@plt+0xb408>
   1c53c:	mov	r0, r1
   1c540:	pop	{r4, pc}
   1c544:	mov	r0, #0
   1c548:	b	1c538 <__assert_fail@plt+0xae34>
   1c54c:	push	{r4, lr}
   1c550:	mov	r0, #14
   1c554:	bl	11644 <nl_langinfo@plt>
   1c558:	cmp	r0, #0
   1c55c:	beq	1c574 <__assert_fail@plt+0xae70>
   1c560:	ldrb	r2, [r0]
   1c564:	ldr	r3, [pc, #16]	; 1c57c <__assert_fail@plt+0xae78>
   1c568:	cmp	r2, #0
   1c56c:	moveq	r0, r3
   1c570:	pop	{r4, pc}
   1c574:	ldr	r0, [pc]	; 1c57c <__assert_fail@plt+0xae78>
   1c578:	pop	{r4, pc}
   1c57c:	andeq	lr, r1, ip, asr #24
   1c580:	push	{r4, r5, r6, lr}
   1c584:	mov	r6, r0
   1c588:	mov	r5, r1
   1c58c:	subs	r4, r2, #0
   1c590:	beq	1c5bc <__assert_fail@plt+0xaeb8>
   1c594:	mov	r1, r4
   1c598:	mvn	r0, #0
   1c59c:	bl	1c920 <__assert_fail@plt+0xb21c>
   1c5a0:	cmp	r0, r5
   1c5a4:	bcs	1c5bc <__assert_fail@plt+0xaeb8>
   1c5a8:	bl	1156c <__errno_location@plt>
   1c5ac:	mov	r3, #12
   1c5b0:	str	r3, [r0]
   1c5b4:	mov	r0, #0
   1c5b8:	pop	{r4, r5, r6, pc}
   1c5bc:	mul	r1, r5, r4
   1c5c0:	mov	r0, r6
   1c5c4:	bl	1b298 <__assert_fail@plt+0x9b94>
   1c5c8:	pop	{r4, r5, r6, pc}
   1c5cc:	push	{r4, r5, r6, lr}
   1c5d0:	mov	r6, r1
   1c5d4:	mov	r4, r2
   1c5d8:	mov	r1, #0
   1c5dc:	bl	11614 <setlocale@plt>
   1c5e0:	subs	r5, r0, #0
   1c5e4:	beq	1c608 <__assert_fail@plt+0xaf04>
   1c5e8:	mov	r0, r5
   1c5ec:	bl	1153c <strlen@plt>
   1c5f0:	cmp	r4, r0
   1c5f4:	bhi	1c620 <__assert_fail@plt+0xaf1c>
   1c5f8:	cmp	r4, #0
   1c5fc:	bne	1c638 <__assert_fail@plt+0xaf34>
   1c600:	mov	r0, #34	; 0x22
   1c604:	pop	{r4, r5, r6, pc}
   1c608:	cmp	r4, #0
   1c60c:	beq	1c65c <__assert_fail@plt+0xaf58>
   1c610:	mov	r3, #0
   1c614:	strb	r3, [r6]
   1c618:	mov	r0, #22
   1c61c:	pop	{r4, r5, r6, pc}
   1c620:	add	r2, r0, #1
   1c624:	mov	r1, r5
   1c628:	mov	r0, r6
   1c62c:	bl	11374 <memcpy@plt>
   1c630:	mov	r0, #0
   1c634:	pop	{r4, r5, r6, pc}
   1c638:	sub	r4, r4, #1
   1c63c:	mov	r2, r4
   1c640:	mov	r1, r5
   1c644:	mov	r0, r6
   1c648:	bl	11374 <memcpy@plt>
   1c64c:	mov	r3, #0
   1c650:	strb	r3, [r6, r4]
   1c654:	mov	r0, #34	; 0x22
   1c658:	pop	{r4, r5, r6, pc}
   1c65c:	mov	r0, #22
   1c660:	pop	{r4, r5, r6, pc}
   1c664:	push	{r4, lr}
   1c668:	mov	r1, #0
   1c66c:	bl	11614 <setlocale@plt>
   1c670:	pop	{r4, pc}
   1c674:	push	{r4, r5, r6, r7, r8, lr}
   1c678:	mov	r4, r0
   1c67c:	cmp	r0, #2
   1c680:	bls	1c68c <__assert_fail@plt+0xaf88>
   1c684:	mov	r0, r4
   1c688:	pop	{r4, r5, r6, r7, r8, pc}
   1c68c:	bl	1c6b4 <__assert_fail@plt+0xafb0>
   1c690:	mov	r6, r0
   1c694:	bl	1156c <__errno_location@plt>
   1c698:	mov	r5, r0
   1c69c:	ldr	r7, [r0]
   1c6a0:	mov	r0, r4
   1c6a4:	bl	116ec <close@plt>
   1c6a8:	str	r7, [r5]
   1c6ac:	mov	r4, r6
   1c6b0:	b	1c684 <__assert_fail@plt+0xaf80>
   1c6b4:	push	{r4, lr}
   1c6b8:	mov	r2, #3
   1c6bc:	mov	r1, #0
   1c6c0:	bl	1c6c8 <__assert_fail@plt+0xafc4>
   1c6c4:	pop	{r4, pc}
   1c6c8:	push	{r1, r2, r3}
   1c6cc:	push	{r4, r5, r6, lr}
   1c6d0:	sub	sp, sp, #12
   1c6d4:	mov	r5, r0
   1c6d8:	ldr	r1, [sp, #28]
   1c6dc:	add	r3, sp, #32
   1c6e0:	str	r3, [sp, #4]
   1c6e4:	cmp	r1, #0
   1c6e8:	beq	1c730 <__assert_fail@plt+0xb02c>
   1c6ec:	ldr	r3, [pc, #540]	; 1c910 <__assert_fail@plt+0xb20c>
   1c6f0:	cmp	r1, r3
   1c6f4:	beq	1c760 <__assert_fail@plt+0xb05c>
   1c6f8:	cmp	r1, #11
   1c6fc:	beq	1c900 <__assert_fail@plt+0xb1fc>
   1c700:	bgt	1c88c <__assert_fail@plt+0xb188>
   1c704:	cmp	r1, #3
   1c708:	beq	1c900 <__assert_fail@plt+0xb1fc>
   1c70c:	ble	1c84c <__assert_fail@plt+0xb148>
   1c710:	cmp	r1, #8
   1c714:	beq	1c86c <__assert_fail@plt+0xb168>
   1c718:	ble	1c864 <__assert_fail@plt+0xb160>
   1c71c:	cmp	r1, #9
   1c720:	beq	1c900 <__assert_fail@plt+0xb1fc>
   1c724:	cmp	r1, #10
   1c728:	bne	1c8c4 <__assert_fail@plt+0xb1c0>
   1c72c:	b	1c86c <__assert_fail@plt+0xb168>
   1c730:	ldr	r3, [sp, #4]
   1c734:	add	r2, r3, #4
   1c738:	str	r2, [sp, #4]
   1c73c:	ldr	r2, [r3]
   1c740:	mov	r1, #0
   1c744:	bl	115fc <fcntl64@plt>
   1c748:	mov	r4, r0
   1c74c:	mov	r0, r4
   1c750:	add	sp, sp, #12
   1c754:	pop	{r4, r5, r6, lr}
   1c758:	add	sp, sp, #12
   1c75c:	bx	lr
   1c760:	ldr	r3, [sp, #4]
   1c764:	add	r2, r3, #4
   1c768:	str	r2, [sp, #4]
   1c76c:	ldr	r6, [r3]
   1c770:	ldr	r3, [pc, #412]	; 1c914 <__assert_fail@plt+0xb210>
   1c774:	ldr	r3, [r3]
   1c778:	cmp	r3, #0
   1c77c:	blt	1c7dc <__assert_fail@plt+0xb0d8>
   1c780:	mov	r2, r6
   1c784:	ldr	r1, [pc, #388]	; 1c910 <__assert_fail@plt+0xb20c>
   1c788:	bl	115fc <fcntl64@plt>
   1c78c:	subs	r4, r0, #0
   1c790:	blt	1c7a4 <__assert_fail@plt+0xb0a0>
   1c794:	mov	r2, #1
   1c798:	ldr	r3, [pc, #372]	; 1c914 <__assert_fail@plt+0xb210>
   1c79c:	str	r2, [r3]
   1c7a0:	b	1c74c <__assert_fail@plt+0xb048>
   1c7a4:	bl	1156c <__errno_location@plt>
   1c7a8:	ldr	r3, [r0]
   1c7ac:	cmp	r3, #22
   1c7b0:	bne	1c794 <__assert_fail@plt+0xb090>
   1c7b4:	mov	r2, r6
   1c7b8:	mov	r1, #0
   1c7bc:	mov	r0, r5
   1c7c0:	bl	115fc <fcntl64@plt>
   1c7c4:	subs	r4, r0, #0
   1c7c8:	blt	1c74c <__assert_fail@plt+0xb048>
   1c7cc:	mvn	r2, #0
   1c7d0:	ldr	r3, [pc, #316]	; 1c914 <__assert_fail@plt+0xb210>
   1c7d4:	str	r2, [r3]
   1c7d8:	b	1c800 <__assert_fail@plt+0xb0fc>
   1c7dc:	mov	r2, r6
   1c7e0:	mov	r1, #0
   1c7e4:	bl	115fc <fcntl64@plt>
   1c7e8:	subs	r4, r0, #0
   1c7ec:	blt	1c74c <__assert_fail@plt+0xb048>
   1c7f0:	ldr	r3, [pc, #284]	; 1c914 <__assert_fail@plt+0xb210>
   1c7f4:	ldr	r3, [r3]
   1c7f8:	cmn	r3, #1
   1c7fc:	bne	1c74c <__assert_fail@plt+0xb048>
   1c800:	mov	r1, #1
   1c804:	mov	r0, r4
   1c808:	bl	115fc <fcntl64@plt>
   1c80c:	subs	r2, r0, #0
   1c810:	blt	1c82c <__assert_fail@plt+0xb128>
   1c814:	orr	r2, r2, #1
   1c818:	mov	r1, #2
   1c81c:	mov	r0, r4
   1c820:	bl	115fc <fcntl64@plt>
   1c824:	cmn	r0, #1
   1c828:	bne	1c74c <__assert_fail@plt+0xb048>
   1c82c:	bl	1156c <__errno_location@plt>
   1c830:	mov	r5, r0
   1c834:	ldr	r6, [r0]
   1c838:	mov	r0, r4
   1c83c:	bl	116ec <close@plt>
   1c840:	str	r6, [r5]
   1c844:	mvn	r4, #0
   1c848:	b	1c74c <__assert_fail@plt+0xb048>
   1c84c:	cmp	r1, #1
   1c850:	beq	1c900 <__assert_fail@plt+0xb1fc>
   1c854:	bgt	1c86c <__assert_fail@plt+0xb168>
   1c858:	cmp	r1, #0
   1c85c:	bne	1c8c4 <__assert_fail@plt+0xb1c0>
   1c860:	b	1c86c <__assert_fail@plt+0xb168>
   1c864:	cmp	r1, #4
   1c868:	bne	1c8c4 <__assert_fail@plt+0xb1c0>
   1c86c:	ldr	r3, [sp, #4]
   1c870:	add	r2, r3, #4
   1c874:	str	r2, [sp, #4]
   1c878:	ldr	r2, [r3]
   1c87c:	mov	r0, r5
   1c880:	bl	115fc <fcntl64@plt>
   1c884:	mov	r4, r0
   1c888:	b	1c74c <__assert_fail@plt+0xb048>
   1c88c:	ldr	r3, [pc, #132]	; 1c918 <__assert_fail@plt+0xb214>
   1c890:	cmp	r1, r3
   1c894:	bgt	1c8e4 <__assert_fail@plt+0xb1e0>
   1c898:	sub	r3, r3, #1
   1c89c:	cmp	r1, r3
   1c8a0:	bge	1c86c <__assert_fail@plt+0xb168>
   1c8a4:	sub	r3, r3, #5
   1c8a8:	cmp	r1, r3
   1c8ac:	beq	1c900 <__assert_fail@plt+0xb1fc>
   1c8b0:	add	r3, r3, #1
   1c8b4:	cmp	r1, r3
   1c8b8:	beq	1c86c <__assert_fail@plt+0xb168>
   1c8bc:	cmp	r1, #1024	; 0x400
   1c8c0:	beq	1c86c <__assert_fail@plt+0xb168>
   1c8c4:	ldr	r3, [sp, #4]
   1c8c8:	add	r2, r3, #4
   1c8cc:	str	r2, [sp, #4]
   1c8d0:	ldr	r2, [r3]
   1c8d4:	mov	r0, r5
   1c8d8:	bl	115fc <fcntl64@plt>
   1c8dc:	mov	r4, r0
   1c8e0:	b	1c74c <__assert_fail@plt+0xb048>
   1c8e4:	ldr	r3, [pc, #48]	; 1c91c <__assert_fail@plt+0xb218>
   1c8e8:	cmp	r1, r3
   1c8ec:	beq	1c86c <__assert_fail@plt+0xb168>
   1c8f0:	blt	1c900 <__assert_fail@plt+0xb1fc>
   1c8f4:	add	r3, r3, #1
   1c8f8:	cmp	r1, r3
   1c8fc:	bne	1c8c4 <__assert_fail@plt+0xb1c0>
   1c900:	mov	r0, r5
   1c904:	bl	115fc <fcntl64@plt>
   1c908:	mov	r4, r0
   1c90c:	b	1c74c <__assert_fail@plt+0xb048>
   1c910:	andeq	r0, r0, r6, lsl #8
   1c914:	strdeq	pc, [r2], -r4
   1c918:	andeq	r0, r0, r7, lsl #8
   1c91c:	andeq	r0, r0, r9, lsl #8
   1c920:	subs	r2, r1, #1
   1c924:	bxeq	lr
   1c928:	bcc	1cb00 <__assert_fail@plt+0xb3fc>
   1c92c:	cmp	r0, r1
   1c930:	bls	1cae4 <__assert_fail@plt+0xb3e0>
   1c934:	tst	r1, r2
   1c938:	beq	1caf0 <__assert_fail@plt+0xb3ec>
   1c93c:	clz	r3, r0
   1c940:	clz	r2, r1
   1c944:	sub	r3, r2, r3
   1c948:	rsbs	r3, r3, #31
   1c94c:	addne	r3, r3, r3, lsl #1
   1c950:	mov	r2, #0
   1c954:	addne	pc, pc, r3, lsl #2
   1c958:	nop			; (mov r0, r0)
   1c95c:	cmp	r0, r1, lsl #31
   1c960:	adc	r2, r2, r2
   1c964:	subcs	r0, r0, r1, lsl #31
   1c968:	cmp	r0, r1, lsl #30
   1c96c:	adc	r2, r2, r2
   1c970:	subcs	r0, r0, r1, lsl #30
   1c974:	cmp	r0, r1, lsl #29
   1c978:	adc	r2, r2, r2
   1c97c:	subcs	r0, r0, r1, lsl #29
   1c980:	cmp	r0, r1, lsl #28
   1c984:	adc	r2, r2, r2
   1c988:	subcs	r0, r0, r1, lsl #28
   1c98c:	cmp	r0, r1, lsl #27
   1c990:	adc	r2, r2, r2
   1c994:	subcs	r0, r0, r1, lsl #27
   1c998:	cmp	r0, r1, lsl #26
   1c99c:	adc	r2, r2, r2
   1c9a0:	subcs	r0, r0, r1, lsl #26
   1c9a4:	cmp	r0, r1, lsl #25
   1c9a8:	adc	r2, r2, r2
   1c9ac:	subcs	r0, r0, r1, lsl #25
   1c9b0:	cmp	r0, r1, lsl #24
   1c9b4:	adc	r2, r2, r2
   1c9b8:	subcs	r0, r0, r1, lsl #24
   1c9bc:	cmp	r0, r1, lsl #23
   1c9c0:	adc	r2, r2, r2
   1c9c4:	subcs	r0, r0, r1, lsl #23
   1c9c8:	cmp	r0, r1, lsl #22
   1c9cc:	adc	r2, r2, r2
   1c9d0:	subcs	r0, r0, r1, lsl #22
   1c9d4:	cmp	r0, r1, lsl #21
   1c9d8:	adc	r2, r2, r2
   1c9dc:	subcs	r0, r0, r1, lsl #21
   1c9e0:	cmp	r0, r1, lsl #20
   1c9e4:	adc	r2, r2, r2
   1c9e8:	subcs	r0, r0, r1, lsl #20
   1c9ec:	cmp	r0, r1, lsl #19
   1c9f0:	adc	r2, r2, r2
   1c9f4:	subcs	r0, r0, r1, lsl #19
   1c9f8:	cmp	r0, r1, lsl #18
   1c9fc:	adc	r2, r2, r2
   1ca00:	subcs	r0, r0, r1, lsl #18
   1ca04:	cmp	r0, r1, lsl #17
   1ca08:	adc	r2, r2, r2
   1ca0c:	subcs	r0, r0, r1, lsl #17
   1ca10:	cmp	r0, r1, lsl #16
   1ca14:	adc	r2, r2, r2
   1ca18:	subcs	r0, r0, r1, lsl #16
   1ca1c:	cmp	r0, r1, lsl #15
   1ca20:	adc	r2, r2, r2
   1ca24:	subcs	r0, r0, r1, lsl #15
   1ca28:	cmp	r0, r1, lsl #14
   1ca2c:	adc	r2, r2, r2
   1ca30:	subcs	r0, r0, r1, lsl #14
   1ca34:	cmp	r0, r1, lsl #13
   1ca38:	adc	r2, r2, r2
   1ca3c:	subcs	r0, r0, r1, lsl #13
   1ca40:	cmp	r0, r1, lsl #12
   1ca44:	adc	r2, r2, r2
   1ca48:	subcs	r0, r0, r1, lsl #12
   1ca4c:	cmp	r0, r1, lsl #11
   1ca50:	adc	r2, r2, r2
   1ca54:	subcs	r0, r0, r1, lsl #11
   1ca58:	cmp	r0, r1, lsl #10
   1ca5c:	adc	r2, r2, r2
   1ca60:	subcs	r0, r0, r1, lsl #10
   1ca64:	cmp	r0, r1, lsl #9
   1ca68:	adc	r2, r2, r2
   1ca6c:	subcs	r0, r0, r1, lsl #9
   1ca70:	cmp	r0, r1, lsl #8
   1ca74:	adc	r2, r2, r2
   1ca78:	subcs	r0, r0, r1, lsl #8
   1ca7c:	cmp	r0, r1, lsl #7
   1ca80:	adc	r2, r2, r2
   1ca84:	subcs	r0, r0, r1, lsl #7
   1ca88:	cmp	r0, r1, lsl #6
   1ca8c:	adc	r2, r2, r2
   1ca90:	subcs	r0, r0, r1, lsl #6
   1ca94:	cmp	r0, r1, lsl #5
   1ca98:	adc	r2, r2, r2
   1ca9c:	subcs	r0, r0, r1, lsl #5
   1caa0:	cmp	r0, r1, lsl #4
   1caa4:	adc	r2, r2, r2
   1caa8:	subcs	r0, r0, r1, lsl #4
   1caac:	cmp	r0, r1, lsl #3
   1cab0:	adc	r2, r2, r2
   1cab4:	subcs	r0, r0, r1, lsl #3
   1cab8:	cmp	r0, r1, lsl #2
   1cabc:	adc	r2, r2, r2
   1cac0:	subcs	r0, r0, r1, lsl #2
   1cac4:	cmp	r0, r1, lsl #1
   1cac8:	adc	r2, r2, r2
   1cacc:	subcs	r0, r0, r1, lsl #1
   1cad0:	cmp	r0, r1
   1cad4:	adc	r2, r2, r2
   1cad8:	subcs	r0, r0, r1
   1cadc:	mov	r0, r2
   1cae0:	bx	lr
   1cae4:	moveq	r0, #1
   1cae8:	movne	r0, #0
   1caec:	bx	lr
   1caf0:	clz	r2, r1
   1caf4:	rsb	r2, r2, #31
   1caf8:	lsr	r0, r0, r2
   1cafc:	bx	lr
   1cb00:	cmp	r0, #0
   1cb04:	mvnne	r0, #0
   1cb08:	b	1d160 <__assert_fail@plt+0xba5c>
   1cb0c:	cmp	r1, #0
   1cb10:	beq	1cb00 <__assert_fail@plt+0xb3fc>
   1cb14:	push	{r0, r1, lr}
   1cb18:	bl	1c920 <__assert_fail@plt+0xb21c>
   1cb1c:	pop	{r1, r2, lr}
   1cb20:	mul	r3, r2, r0
   1cb24:	sub	r1, r1, r3
   1cb28:	bx	lr
   1cb2c:	cmp	r1, #0
   1cb30:	beq	1cd3c <__assert_fail@plt+0xb638>
   1cb34:	eor	ip, r0, r1
   1cb38:	rsbmi	r1, r1, #0
   1cb3c:	subs	r2, r1, #1
   1cb40:	beq	1cd08 <__assert_fail@plt+0xb604>
   1cb44:	movs	r3, r0
   1cb48:	rsbmi	r3, r0, #0
   1cb4c:	cmp	r3, r1
   1cb50:	bls	1cd14 <__assert_fail@plt+0xb610>
   1cb54:	tst	r1, r2
   1cb58:	beq	1cd24 <__assert_fail@plt+0xb620>
   1cb5c:	clz	r2, r3
   1cb60:	clz	r0, r1
   1cb64:	sub	r2, r0, r2
   1cb68:	rsbs	r2, r2, #31
   1cb6c:	addne	r2, r2, r2, lsl #1
   1cb70:	mov	r0, #0
   1cb74:	addne	pc, pc, r2, lsl #2
   1cb78:	nop			; (mov r0, r0)
   1cb7c:	cmp	r3, r1, lsl #31
   1cb80:	adc	r0, r0, r0
   1cb84:	subcs	r3, r3, r1, lsl #31
   1cb88:	cmp	r3, r1, lsl #30
   1cb8c:	adc	r0, r0, r0
   1cb90:	subcs	r3, r3, r1, lsl #30
   1cb94:	cmp	r3, r1, lsl #29
   1cb98:	adc	r0, r0, r0
   1cb9c:	subcs	r3, r3, r1, lsl #29
   1cba0:	cmp	r3, r1, lsl #28
   1cba4:	adc	r0, r0, r0
   1cba8:	subcs	r3, r3, r1, lsl #28
   1cbac:	cmp	r3, r1, lsl #27
   1cbb0:	adc	r0, r0, r0
   1cbb4:	subcs	r3, r3, r1, lsl #27
   1cbb8:	cmp	r3, r1, lsl #26
   1cbbc:	adc	r0, r0, r0
   1cbc0:	subcs	r3, r3, r1, lsl #26
   1cbc4:	cmp	r3, r1, lsl #25
   1cbc8:	adc	r0, r0, r0
   1cbcc:	subcs	r3, r3, r1, lsl #25
   1cbd0:	cmp	r3, r1, lsl #24
   1cbd4:	adc	r0, r0, r0
   1cbd8:	subcs	r3, r3, r1, lsl #24
   1cbdc:	cmp	r3, r1, lsl #23
   1cbe0:	adc	r0, r0, r0
   1cbe4:	subcs	r3, r3, r1, lsl #23
   1cbe8:	cmp	r3, r1, lsl #22
   1cbec:	adc	r0, r0, r0
   1cbf0:	subcs	r3, r3, r1, lsl #22
   1cbf4:	cmp	r3, r1, lsl #21
   1cbf8:	adc	r0, r0, r0
   1cbfc:	subcs	r3, r3, r1, lsl #21
   1cc00:	cmp	r3, r1, lsl #20
   1cc04:	adc	r0, r0, r0
   1cc08:	subcs	r3, r3, r1, lsl #20
   1cc0c:	cmp	r3, r1, lsl #19
   1cc10:	adc	r0, r0, r0
   1cc14:	subcs	r3, r3, r1, lsl #19
   1cc18:	cmp	r3, r1, lsl #18
   1cc1c:	adc	r0, r0, r0
   1cc20:	subcs	r3, r3, r1, lsl #18
   1cc24:	cmp	r3, r1, lsl #17
   1cc28:	adc	r0, r0, r0
   1cc2c:	subcs	r3, r3, r1, lsl #17
   1cc30:	cmp	r3, r1, lsl #16
   1cc34:	adc	r0, r0, r0
   1cc38:	subcs	r3, r3, r1, lsl #16
   1cc3c:	cmp	r3, r1, lsl #15
   1cc40:	adc	r0, r0, r0
   1cc44:	subcs	r3, r3, r1, lsl #15
   1cc48:	cmp	r3, r1, lsl #14
   1cc4c:	adc	r0, r0, r0
   1cc50:	subcs	r3, r3, r1, lsl #14
   1cc54:	cmp	r3, r1, lsl #13
   1cc58:	adc	r0, r0, r0
   1cc5c:	subcs	r3, r3, r1, lsl #13
   1cc60:	cmp	r3, r1, lsl #12
   1cc64:	adc	r0, r0, r0
   1cc68:	subcs	r3, r3, r1, lsl #12
   1cc6c:	cmp	r3, r1, lsl #11
   1cc70:	adc	r0, r0, r0
   1cc74:	subcs	r3, r3, r1, lsl #11
   1cc78:	cmp	r3, r1, lsl #10
   1cc7c:	adc	r0, r0, r0
   1cc80:	subcs	r3, r3, r1, lsl #10
   1cc84:	cmp	r3, r1, lsl #9
   1cc88:	adc	r0, r0, r0
   1cc8c:	subcs	r3, r3, r1, lsl #9
   1cc90:	cmp	r3, r1, lsl #8
   1cc94:	adc	r0, r0, r0
   1cc98:	subcs	r3, r3, r1, lsl #8
   1cc9c:	cmp	r3, r1, lsl #7
   1cca0:	adc	r0, r0, r0
   1cca4:	subcs	r3, r3, r1, lsl #7
   1cca8:	cmp	r3, r1, lsl #6
   1ccac:	adc	r0, r0, r0
   1ccb0:	subcs	r3, r3, r1, lsl #6
   1ccb4:	cmp	r3, r1, lsl #5
   1ccb8:	adc	r0, r0, r0
   1ccbc:	subcs	r3, r3, r1, lsl #5
   1ccc0:	cmp	r3, r1, lsl #4
   1ccc4:	adc	r0, r0, r0
   1ccc8:	subcs	r3, r3, r1, lsl #4
   1cccc:	cmp	r3, r1, lsl #3
   1ccd0:	adc	r0, r0, r0
   1ccd4:	subcs	r3, r3, r1, lsl #3
   1ccd8:	cmp	r3, r1, lsl #2
   1ccdc:	adc	r0, r0, r0
   1cce0:	subcs	r3, r3, r1, lsl #2
   1cce4:	cmp	r3, r1, lsl #1
   1cce8:	adc	r0, r0, r0
   1ccec:	subcs	r3, r3, r1, lsl #1
   1ccf0:	cmp	r3, r1
   1ccf4:	adc	r0, r0, r0
   1ccf8:	subcs	r3, r3, r1
   1ccfc:	cmp	ip, #0
   1cd00:	rsbmi	r0, r0, #0
   1cd04:	bx	lr
   1cd08:	teq	ip, r0
   1cd0c:	rsbmi	r0, r0, #0
   1cd10:	bx	lr
   1cd14:	movcc	r0, #0
   1cd18:	asreq	r0, ip, #31
   1cd1c:	orreq	r0, r0, #1
   1cd20:	bx	lr
   1cd24:	clz	r2, r1
   1cd28:	rsb	r2, r2, #31
   1cd2c:	cmp	ip, #0
   1cd30:	lsr	r0, r3, r2
   1cd34:	rsbmi	r0, r0, #0
   1cd38:	bx	lr
   1cd3c:	cmp	r0, #0
   1cd40:	mvngt	r0, #-2147483648	; 0x80000000
   1cd44:	movlt	r0, #-2147483648	; 0x80000000
   1cd48:	b	1d160 <__assert_fail@plt+0xba5c>
   1cd4c:	cmp	r1, #0
   1cd50:	beq	1cd3c <__assert_fail@plt+0xb638>
   1cd54:	push	{r0, r1, lr}
   1cd58:	bl	1cb34 <__assert_fail@plt+0xb430>
   1cd5c:	pop	{r1, r2, lr}
   1cd60:	mul	r3, r2, r0
   1cd64:	sub	r1, r1, r3
   1cd68:	bx	lr
   1cd6c:	eor	r1, r1, #-2147483648	; 0x80000000
   1cd70:	b	1cd78 <__assert_fail@plt+0xb674>
   1cd74:	eor	r3, r3, #-2147483648	; 0x80000000
   1cd78:	push	{r4, r5, lr}
   1cd7c:	lsl	r4, r1, #1
   1cd80:	lsl	r5, r3, #1
   1cd84:	teq	r4, r5
   1cd88:	teqeq	r0, r2
   1cd8c:	orrsne	ip, r4, r0
   1cd90:	orrsne	ip, r5, r2
   1cd94:	mvnsne	ip, r4, asr #21
   1cd98:	mvnsne	ip, r5, asr #21
   1cd9c:	beq	1cf88 <__assert_fail@plt+0xb884>
   1cda0:	lsr	r4, r4, #21
   1cda4:	rsbs	r5, r4, r5, lsr #21
   1cda8:	rsblt	r5, r5, #0
   1cdac:	ble	1cdcc <__assert_fail@plt+0xb6c8>
   1cdb0:	add	r4, r4, r5
   1cdb4:	eor	r2, r0, r2
   1cdb8:	eor	r3, r1, r3
   1cdbc:	eor	r0, r2, r0
   1cdc0:	eor	r1, r3, r1
   1cdc4:	eor	r2, r0, r2
   1cdc8:	eor	r3, r1, r3
   1cdcc:	cmp	r5, #54	; 0x36
   1cdd0:	pophi	{r4, r5, pc}
   1cdd4:	tst	r1, #-2147483648	; 0x80000000
   1cdd8:	lsl	r1, r1, #12
   1cddc:	mov	ip, #1048576	; 0x100000
   1cde0:	orr	r1, ip, r1, lsr #12
   1cde4:	beq	1cdf0 <__assert_fail@plt+0xb6ec>
   1cde8:	rsbs	r0, r0, #0
   1cdec:	rsc	r1, r1, #0
   1cdf0:	tst	r3, #-2147483648	; 0x80000000
   1cdf4:	lsl	r3, r3, #12
   1cdf8:	orr	r3, ip, r3, lsr #12
   1cdfc:	beq	1ce08 <__assert_fail@plt+0xb704>
   1ce00:	rsbs	r2, r2, #0
   1ce04:	rsc	r3, r3, #0
   1ce08:	teq	r4, r5
   1ce0c:	beq	1cf70 <__assert_fail@plt+0xb86c>
   1ce10:	sub	r4, r4, #1
   1ce14:	rsbs	lr, r5, #32
   1ce18:	blt	1ce34 <__assert_fail@plt+0xb730>
   1ce1c:	lsl	ip, r2, lr
   1ce20:	adds	r0, r0, r2, lsr r5
   1ce24:	adc	r1, r1, #0
   1ce28:	adds	r0, r0, r3, lsl lr
   1ce2c:	adcs	r1, r1, r3, asr r5
   1ce30:	b	1ce50 <__assert_fail@plt+0xb74c>
   1ce34:	sub	r5, r5, #32
   1ce38:	add	lr, lr, #32
   1ce3c:	cmp	r2, #1
   1ce40:	lsl	ip, r3, lr
   1ce44:	orrcs	ip, ip, #2
   1ce48:	adds	r0, r0, r3, asr r5
   1ce4c:	adcs	r1, r1, r3, asr #31
   1ce50:	and	r5, r1, #-2147483648	; 0x80000000
   1ce54:	bpl	1ce64 <__assert_fail@plt+0xb760>
   1ce58:	rsbs	ip, ip, #0
   1ce5c:	rscs	r0, r0, #0
   1ce60:	rsc	r1, r1, #0
   1ce64:	cmp	r1, #1048576	; 0x100000
   1ce68:	bcc	1cea8 <__assert_fail@plt+0xb7a4>
   1ce6c:	cmp	r1, #2097152	; 0x200000
   1ce70:	bcc	1ce90 <__assert_fail@plt+0xb78c>
   1ce74:	lsrs	r1, r1, #1
   1ce78:	rrxs	r0, r0
   1ce7c:	rrx	ip, ip
   1ce80:	add	r4, r4, #1
   1ce84:	lsl	r2, r4, #21
   1ce88:	cmn	r2, #4194304	; 0x400000
   1ce8c:	bcs	1cfe8 <__assert_fail@plt+0xb8e4>
   1ce90:	cmp	ip, #-2147483648	; 0x80000000
   1ce94:	lsrseq	ip, r0, #1
   1ce98:	adcs	r0, r0, #0
   1ce9c:	adc	r1, r1, r4, lsl #20
   1cea0:	orr	r1, r1, r5
   1cea4:	pop	{r4, r5, pc}
   1cea8:	lsls	ip, ip, #1
   1ceac:	adcs	r0, r0, r0
   1ceb0:	adc	r1, r1, r1
   1ceb4:	tst	r1, #1048576	; 0x100000
   1ceb8:	sub	r4, r4, #1
   1cebc:	bne	1ce90 <__assert_fail@plt+0xb78c>
   1cec0:	teq	r1, #0
   1cec4:	moveq	r1, r0
   1cec8:	moveq	r0, #0
   1cecc:	clz	r3, r1
   1ced0:	addeq	r3, r3, #32
   1ced4:	sub	r3, r3, #11
   1ced8:	subs	r2, r3, #32
   1cedc:	bge	1cf00 <__assert_fail@plt+0xb7fc>
   1cee0:	adds	r2, r2, #12
   1cee4:	ble	1cefc <__assert_fail@plt+0xb7f8>
   1cee8:	add	ip, r2, #20
   1ceec:	rsb	r2, r2, #12
   1cef0:	lsl	r0, r1, ip
   1cef4:	lsr	r1, r1, r2
   1cef8:	b	1cf10 <__assert_fail@plt+0xb80c>
   1cefc:	add	r2, r2, #20
   1cf00:	rsble	ip, r2, #32
   1cf04:	lsl	r1, r1, r2
   1cf08:	orrle	r1, r1, r0, lsr ip
   1cf0c:	lslle	r0, r0, r2
   1cf10:	subs	r4, r4, r3
   1cf14:	addge	r1, r1, r4, lsl #20
   1cf18:	orrge	r1, r1, r5
   1cf1c:	popge	{r4, r5, pc}
   1cf20:	mvn	r4, r4
   1cf24:	subs	r4, r4, #31
   1cf28:	bge	1cf64 <__assert_fail@plt+0xb860>
   1cf2c:	adds	r4, r4, #12
   1cf30:	bgt	1cf4c <__assert_fail@plt+0xb848>
   1cf34:	add	r4, r4, #20
   1cf38:	rsb	r2, r4, #32
   1cf3c:	lsr	r0, r0, r4
   1cf40:	orr	r0, r0, r1, lsl r2
   1cf44:	orr	r1, r5, r1, lsr r4
   1cf48:	pop	{r4, r5, pc}
   1cf4c:	rsb	r4, r4, #12
   1cf50:	rsb	r2, r4, #32
   1cf54:	lsr	r0, r0, r2
   1cf58:	orr	r0, r0, r1, lsl r4
   1cf5c:	mov	r1, r5
   1cf60:	pop	{r4, r5, pc}
   1cf64:	lsr	r0, r1, r4
   1cf68:	mov	r1, r5
   1cf6c:	pop	{r4, r5, pc}
   1cf70:	teq	r4, #0
   1cf74:	eor	r3, r3, #1048576	; 0x100000
   1cf78:	eoreq	r1, r1, #1048576	; 0x100000
   1cf7c:	addeq	r4, r4, #1
   1cf80:	subne	r5, r5, #1
   1cf84:	b	1ce10 <__assert_fail@plt+0xb70c>
   1cf88:	mvns	ip, r4, asr #21
   1cf8c:	mvnsne	ip, r5, asr #21
   1cf90:	beq	1cff8 <__assert_fail@plt+0xb8f4>
   1cf94:	teq	r4, r5
   1cf98:	teqeq	r0, r2
   1cf9c:	beq	1cfb0 <__assert_fail@plt+0xb8ac>
   1cfa0:	orrs	ip, r4, r0
   1cfa4:	moveq	r1, r3
   1cfa8:	moveq	r0, r2
   1cfac:	pop	{r4, r5, pc}
   1cfb0:	teq	r1, r3
   1cfb4:	movne	r1, #0
   1cfb8:	movne	r0, #0
   1cfbc:	popne	{r4, r5, pc}
   1cfc0:	lsrs	ip, r4, #21
   1cfc4:	bne	1cfd8 <__assert_fail@plt+0xb8d4>
   1cfc8:	lsls	r0, r0, #1
   1cfcc:	adcs	r1, r1, r1
   1cfd0:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1cfd4:	pop	{r4, r5, pc}
   1cfd8:	adds	r4, r4, #4194304	; 0x400000
   1cfdc:	addcc	r1, r1, #1048576	; 0x100000
   1cfe0:	popcc	{r4, r5, pc}
   1cfe4:	and	r5, r1, #-2147483648	; 0x80000000
   1cfe8:	orr	r1, r5, #2130706432	; 0x7f000000
   1cfec:	orr	r1, r1, #15728640	; 0xf00000
   1cff0:	mov	r0, #0
   1cff4:	pop	{r4, r5, pc}
   1cff8:	mvns	ip, r4, asr #21
   1cffc:	movne	r1, r3
   1d000:	movne	r0, r2
   1d004:	mvnseq	ip, r5, asr #21
   1d008:	movne	r3, r1
   1d00c:	movne	r2, r0
   1d010:	orrs	r4, r0, r1, lsl #12
   1d014:	orrseq	r5, r2, r3, lsl #12
   1d018:	teqeq	r1, r3
   1d01c:	orrne	r1, r1, #524288	; 0x80000
   1d020:	pop	{r4, r5, pc}
   1d024:	teq	r0, #0
   1d028:	moveq	r1, #0
   1d02c:	bxeq	lr
   1d030:	push	{r4, r5, lr}
   1d034:	mov	r4, #1024	; 0x400
   1d038:	add	r4, r4, #50	; 0x32
   1d03c:	mov	r5, #0
   1d040:	mov	r1, #0
   1d044:	b	1cec0 <__assert_fail@plt+0xb7bc>
   1d048:	teq	r0, #0
   1d04c:	moveq	r1, #0
   1d050:	bxeq	lr
   1d054:	push	{r4, r5, lr}
   1d058:	mov	r4, #1024	; 0x400
   1d05c:	add	r4, r4, #50	; 0x32
   1d060:	ands	r5, r0, #-2147483648	; 0x80000000
   1d064:	rsbmi	r0, r0, #0
   1d068:	mov	r1, #0
   1d06c:	b	1cec0 <__assert_fail@plt+0xb7bc>
   1d070:	lsls	r2, r0, #1
   1d074:	asr	r1, r2, #3
   1d078:	rrx	r1, r1
   1d07c:	lsl	r0, r2, #28
   1d080:	andsne	r3, r2, #-16777216	; 0xff000000
   1d084:	teqne	r3, #-16777216	; 0xff000000
   1d088:	eorne	r1, r1, #939524096	; 0x38000000
   1d08c:	bxne	lr
   1d090:	teq	r2, #0
   1d094:	teqne	r3, #-16777216	; 0xff000000
   1d098:	bxeq	lr
   1d09c:	push	{r4, r5, lr}
   1d0a0:	mov	r4, #896	; 0x380
   1d0a4:	and	r5, r1, #-2147483648	; 0x80000000
   1d0a8:	bic	r1, r1, #-2147483648	; 0x80000000
   1d0ac:	b	1cec0 <__assert_fail@plt+0xb7bc>
   1d0b0:	orrs	r2, r0, r1
   1d0b4:	bxeq	lr
   1d0b8:	push	{r4, r5, lr}
   1d0bc:	mov	r5, #0
   1d0c0:	b	1d0e0 <__assert_fail@plt+0xb9dc>
   1d0c4:	orrs	r2, r0, r1
   1d0c8:	bxeq	lr
   1d0cc:	push	{r4, r5, lr}
   1d0d0:	ands	r5, r1, #-2147483648	; 0x80000000
   1d0d4:	bpl	1d0e0 <__assert_fail@plt+0xb9dc>
   1d0d8:	rsbs	r0, r0, #0
   1d0dc:	rsc	r1, r1, #0
   1d0e0:	mov	r4, #1024	; 0x400
   1d0e4:	add	r4, r4, #50	; 0x32
   1d0e8:	lsrs	ip, r1, #22
   1d0ec:	beq	1ce64 <__assert_fail@plt+0xb760>
   1d0f0:	mov	r2, #3
   1d0f4:	lsrs	ip, ip, #3
   1d0f8:	addne	r2, r2, #3
   1d0fc:	lsrs	ip, ip, #3
   1d100:	addne	r2, r2, #3
   1d104:	add	r2, r2, ip, lsr #3
   1d108:	rsb	r3, r2, #32
   1d10c:	lsl	ip, r0, r3
   1d110:	lsr	r0, r0, r2
   1d114:	orr	r0, r0, r1, lsl r3
   1d118:	lsr	r1, r1, r2
   1d11c:	add	r4, r4, r2
   1d120:	b	1ce64 <__assert_fail@plt+0xb760>
   1d124:	cmp	r3, #0
   1d128:	cmpeq	r2, #0
   1d12c:	bne	1d144 <__assert_fail@plt+0xba40>
   1d130:	cmp	r1, #0
   1d134:	cmpeq	r0, #0
   1d138:	mvnne	r1, #0
   1d13c:	mvnne	r0, #0
   1d140:	b	1d160 <__assert_fail@plt+0xba5c>
   1d144:	sub	sp, sp, #8
   1d148:	push	{sp, lr}
   1d14c:	bl	1d1b8 <__assert_fail@plt+0xbab4>
   1d150:	ldr	lr, [sp, #4]
   1d154:	add	sp, sp, #8
   1d158:	pop	{r2, r3}
   1d15c:	bx	lr
   1d160:	push	{r1, lr}
   1d164:	mov	r0, #8
   1d168:	bl	112fc <raise@plt>
   1d16c:	pop	{r1, pc}
   1d170:	vmov	d7, r0, r1
   1d174:	vldr	d6, [pc, #44]	; 1d1a8 <__assert_fail@plt+0xbaa4>
   1d178:	vldr	d5, [pc, #48]	; 1d1b0 <__assert_fail@plt+0xbaac>
   1d17c:	mov	r0, #0
   1d180:	vmul.f64	d6, d7, d6
   1d184:	vcvt.u32.f64	s12, d6
   1d188:	vcvt.f64.u32	d4, s12
   1d18c:	vmov	r1, s12
   1d190:	vmls.f64	d7, d4, d5
   1d194:	vcvt.u32.f64	s14, d7
   1d198:	vmov	r3, s14
   1d19c:	orr	r0, r0, r3
   1d1a0:	bx	lr
   1d1a4:	nop			; (mov r0, r0)
   1d1a8:	andeq	r0, r0, r0
   1d1ac:	ldclcc	0, cr0, [r0]
   1d1b0:	andeq	r0, r0, r0
   1d1b4:	mvnsmi	r0, r0
   1d1b8:	cmp	r1, r3
   1d1bc:	push	{r4, r5, r6, r7, r8, r9, lr}
   1d1c0:	cmpeq	r0, r2
   1d1c4:	mov	r4, r0
   1d1c8:	mov	r5, r1
   1d1cc:	ldr	r9, [sp, #28]
   1d1d0:	movcc	r0, #0
   1d1d4:	movcc	r1, #0
   1d1d8:	bcc	1d2d0 <__assert_fail@plt+0xbbcc>
   1d1dc:	cmp	r3, #0
   1d1e0:	clzeq	ip, r2
   1d1e4:	clzne	ip, r3
   1d1e8:	addeq	ip, ip, #32
   1d1ec:	cmp	r5, #0
   1d1f0:	clzeq	r1, r4
   1d1f4:	addeq	r1, r1, #32
   1d1f8:	clzne	r1, r5
   1d1fc:	sub	ip, ip, r1
   1d200:	sub	lr, ip, #32
   1d204:	lsl	r7, r3, ip
   1d208:	rsb	r8, ip, #32
   1d20c:	orr	r7, r7, r2, lsl lr
   1d210:	orr	r7, r7, r2, lsr r8
   1d214:	lsl	r6, r2, ip
   1d218:	cmp	r5, r7
   1d21c:	cmpeq	r4, r6
   1d220:	movcc	r0, #0
   1d224:	movcc	r1, #0
   1d228:	bcc	1d244 <__assert_fail@plt+0xbb40>
   1d22c:	mov	r3, #1
   1d230:	subs	r4, r4, r6
   1d234:	lsl	r1, r3, lr
   1d238:	lsl	r0, r3, ip
   1d23c:	orr	r1, r1, r3, lsr r8
   1d240:	sbc	r5, r5, r7
   1d244:	cmp	ip, #0
   1d248:	beq	1d2d0 <__assert_fail@plt+0xbbcc>
   1d24c:	lsrs	r3, r7, #1
   1d250:	rrx	r2, r6
   1d254:	mov	r6, ip
   1d258:	b	1d27c <__assert_fail@plt+0xbb78>
   1d25c:	subs	r4, r4, r2
   1d260:	sbc	r5, r5, r3
   1d264:	adds	r4, r4, r4
   1d268:	adc	r5, r5, r5
   1d26c:	adds	r4, r4, #1
   1d270:	adc	r5, r5, #0
   1d274:	subs	r6, r6, #1
   1d278:	beq	1d298 <__assert_fail@plt+0xbb94>
   1d27c:	cmp	r5, r3
   1d280:	cmpeq	r4, r2
   1d284:	bcs	1d25c <__assert_fail@plt+0xbb58>
   1d288:	adds	r4, r4, r4
   1d28c:	adc	r5, r5, r5
   1d290:	subs	r6, r6, #1
   1d294:	bne	1d27c <__assert_fail@plt+0xbb78>
   1d298:	lsr	r6, r4, ip
   1d29c:	lsr	r7, r5, ip
   1d2a0:	orr	r6, r6, r5, lsl r8
   1d2a4:	adds	r2, r0, r4
   1d2a8:	orr	r6, r6, r5, lsr lr
   1d2ac:	adc	r3, r1, r5
   1d2b0:	lsl	r1, r7, ip
   1d2b4:	orr	r1, r1, r6, lsl lr
   1d2b8:	lsl	r0, r6, ip
   1d2bc:	orr	r1, r1, r6, lsr r8
   1d2c0:	subs	r0, r2, r0
   1d2c4:	mov	r4, r6
   1d2c8:	mov	r5, r7
   1d2cc:	sbc	r1, r3, r1
   1d2d0:	cmp	r9, #0
   1d2d4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1d2d8:	strd	r4, [r9]
   1d2dc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1d2e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d2e4:	mov	r7, r0
   1d2e8:	ldr	r6, [pc, #72]	; 1d338 <__assert_fail@plt+0xbc34>
   1d2ec:	ldr	r5, [pc, #72]	; 1d33c <__assert_fail@plt+0xbc38>
   1d2f0:	add	r6, pc, r6
   1d2f4:	add	r5, pc, r5
   1d2f8:	sub	r6, r6, r5
   1d2fc:	mov	r8, r1
   1d300:	mov	r9, r2
   1d304:	bl	112c4 <calloc@plt-0x20>
   1d308:	asrs	r6, r6, #2
   1d30c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d310:	mov	r4, #0
   1d314:	add	r4, r4, #1
   1d318:	ldr	r3, [r5], #4
   1d31c:	mov	r2, r9
   1d320:	mov	r1, r8
   1d324:	mov	r0, r7
   1d328:	blx	r3
   1d32c:	cmp	r6, r4
   1d330:	bne	1d314 <__assert_fail@plt+0xbc10>
   1d334:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d338:	andeq	r1, r1, r8, lsl ip
   1d33c:	andeq	r1, r1, r0, lsl ip
   1d340:	bx	lr
   1d344:	ldr	r3, [pc, #12]	; 1d358 <__assert_fail@plt+0xbc54>
   1d348:	mov	r1, #0
   1d34c:	add	r3, pc, r3
   1d350:	ldr	r2, [r3]
   1d354:	b	11584 <__cxa_atexit@plt>
   1d358:	andeq	r1, r1, r4, lsr #28

Disassembly of section .fini:

0001d35c <.fini>:
   1d35c:	push	{r3, lr}
   1d360:	pop	{r3, pc}
