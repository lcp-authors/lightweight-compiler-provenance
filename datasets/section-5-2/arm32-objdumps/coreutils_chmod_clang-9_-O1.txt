
../repos/coreutils/src/chmod:     file format elf32-littlearm


Disassembly of section .init:

000110cc <.init>:
   110cc:	push	{r3, lr}
   110d0:	bl	1142c <__assert_fail@plt+0x4c>
   110d4:	pop	{r3, pc}

Disassembly of section .plt:

000110d8 <fstatfs64@plt-0x14>:
   110d8:	push	{lr}		; (str lr, [sp, #-4]!)
   110dc:	ldr	lr, [pc, #4]	; 110e8 <fstatfs64@plt-0x4>
   110e0:	add	lr, pc, lr
   110e4:	ldr	pc, [lr, #8]!
   110e8:	andeq	r9, r1, r8, lsl pc

000110ec <fstatfs64@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #102400	; 0x19000
   110f4:	ldr	pc, [ip, #3864]!	; 0xf18

000110f8 <calloc@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #102400	; 0x19000
   11100:	ldr	pc, [ip, #3856]!	; 0xf10

00011104 <fputs_unlocked@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #102400	; 0x19000
   1110c:	ldr	pc, [ip, #3848]!	; 0xf08

00011110 <raise@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #102400	; 0x19000
   11118:	ldr	pc, [ip, #3840]!	; 0xf00

0001111c <strcmp@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #102400	; 0x19000
   11124:	ldr	pc, [ip, #3832]!	; 0xef8

00011128 <fflush@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #102400	; 0x19000
   11130:	ldr	pc, [ip, #3824]!	; 0xef0

00011134 <memmove@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #102400	; 0x19000
   1113c:	ldr	pc, [ip, #3816]!	; 0xee8

00011140 <free@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #102400	; 0x19000
   11148:	ldr	pc, [ip, #3808]!	; 0xee0

0001114c <_exit@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #102400	; 0x19000
   11154:	ldr	pc, [ip, #3800]!	; 0xed8

00011158 <memcpy@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #102400	; 0x19000
   11160:	ldr	pc, [ip, #3792]!	; 0xed0

00011164 <mbsinit@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #102400	; 0x19000
   1116c:	ldr	pc, [ip, #3784]!	; 0xec8

00011170 <dcgettext@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #102400	; 0x19000
   11178:	ldr	pc, [ip, #3776]!	; 0xec0

0001117c <realloc@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #102400	; 0x19000
   11184:	ldr	pc, [ip, #3768]!	; 0xeb8

00011188 <textdomain@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #102400	; 0x19000
   11190:	ldr	pc, [ip, #3760]!	; 0xeb0

00011194 <__fxstatat64@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #102400	; 0x19000
   1119c:	ldr	pc, [ip, #3752]!	; 0xea8

000111a0 <iswprint@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #102400	; 0x19000
   111a8:	ldr	pc, [ip, #3744]!	; 0xea0

000111ac <__fxstat64@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #102400	; 0x19000
   111b4:	ldr	pc, [ip, #3736]!	; 0xe98

000111b8 <fwrite@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #102400	; 0x19000
   111c0:	ldr	pc, [ip, #3728]!	; 0xe90

000111c4 <lseek64@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #102400	; 0x19000
   111cc:	ldr	pc, [ip, #3720]!	; 0xe88

000111d0 <__ctype_get_mb_cur_max@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #102400	; 0x19000
   111d8:	ldr	pc, [ip, #3712]!	; 0xe80

000111dc <__fpending@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #102400	; 0x19000
   111e4:	ldr	pc, [ip, #3704]!	; 0xe78

000111e8 <ferror_unlocked@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #102400	; 0x19000
   111f0:	ldr	pc, [ip, #3696]!	; 0xe70

000111f4 <mbrtowc@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #102400	; 0x19000
   111fc:	ldr	pc, [ip, #3688]!	; 0xe68

00011200 <error@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #102400	; 0x19000
   11208:	ldr	pc, [ip, #3680]!	; 0xe60

0001120c <open64@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #102400	; 0x19000
   11214:	ldr	pc, [ip, #3672]!	; 0xe58

00011218 <malloc@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #102400	; 0x19000
   11220:	ldr	pc, [ip, #3664]!	; 0xe50

00011224 <__libc_start_main@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #102400	; 0x19000
   1122c:	ldr	pc, [ip, #3656]!	; 0xe48

00011230 <__freading@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #102400	; 0x19000
   11238:	ldr	pc, [ip, #3648]!	; 0xe40

0001123c <__gmon_start__@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #102400	; 0x19000
   11244:	ldr	pc, [ip, #3640]!	; 0xe38

00011248 <getopt_long@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #102400	; 0x19000
   11250:	ldr	pc, [ip, #3632]!	; 0xe30

00011254 <__ctype_b_loc@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #102400	; 0x19000
   1125c:	ldr	pc, [ip, #3624]!	; 0xe28

00011260 <exit@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #102400	; 0x19000
   11268:	ldr	pc, [ip, #3616]!	; 0xe20

0001126c <bcmp@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #102400	; 0x19000
   11274:	ldr	pc, [ip, #3608]!	; 0xe18

00011278 <strlen@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #102400	; 0x19000
   11280:	ldr	pc, [ip, #3600]!	; 0xe10

00011284 <openat64@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #102400	; 0x19000
   1128c:	ldr	pc, [ip, #3592]!	; 0xe08

00011290 <fchmodat@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #102400	; 0x19000
   11298:	ldr	pc, [ip, #3584]!	; 0xe00

0001129c <__errno_location@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #102400	; 0x19000
   112a4:	ldr	pc, [ip, #3576]!	; 0xdf8

000112a8 <__sprintf_chk@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #102400	; 0x19000
   112b0:	ldr	pc, [ip, #3568]!	; 0xdf0

000112b4 <__cxa_atexit@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #102400	; 0x19000
   112bc:	ldr	pc, [ip, #3560]!	; 0xde8

000112c0 <memset@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #102400	; 0x19000
   112c8:	ldr	pc, [ip, #3552]!	; 0xde0

000112cc <__printf_chk@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #102400	; 0x19000
   112d4:	ldr	pc, [ip, #3544]!	; 0xdd8

000112d8 <fileno@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #102400	; 0x19000
   112e0:	ldr	pc, [ip, #3536]!	; 0xdd0

000112e4 <__fprintf_chk@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #102400	; 0x19000
   112ec:	ldr	pc, [ip, #3528]!	; 0xdc8

000112f0 <fclose@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #102400	; 0x19000
   112f8:	ldr	pc, [ip, #3520]!	; 0xdc0

000112fc <fseeko64@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #102400	; 0x19000
   11304:	ldr	pc, [ip, #3512]!	; 0xdb8

00011308 <fcntl64@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #102400	; 0x19000
   11310:	ldr	pc, [ip, #3504]!	; 0xdb0

00011314 <setlocale@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #102400	; 0x19000
   1131c:	ldr	pc, [ip, #3496]!	; 0xda8

00011320 <strrchr@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #102400	; 0x19000
   11328:	ldr	pc, [ip, #3488]!	; 0xda0

0001132c <nl_langinfo@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #102400	; 0x19000
   11334:	ldr	pc, [ip, #3480]!	; 0xd98

00011338 <readdir64@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #102400	; 0x19000
   11340:	ldr	pc, [ip, #3472]!	; 0xd90

00011344 <fdopendir@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #102400	; 0x19000
   1134c:	ldr	pc, [ip, #3464]!	; 0xd88

00011350 <dirfd@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #102400	; 0x19000
   11358:	ldr	pc, [ip, #3456]!	; 0xd80

0001135c <fchdir@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #102400	; 0x19000
   11364:	ldr	pc, [ip, #3448]!	; 0xd78

00011368 <qsort@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #102400	; 0x19000
   11370:	ldr	pc, [ip, #3440]!	; 0xd70

00011374 <bindtextdomain@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #102400	; 0x19000
   1137c:	ldr	pc, [ip, #3432]!	; 0xd68

00011380 <umask@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #102400	; 0x19000
   11388:	ldr	pc, [ip, #3424]!	; 0xd60

0001138c <chmod@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #102400	; 0x19000
   11394:	ldr	pc, [ip, #3416]!	; 0xd58

00011398 <__xstat64@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #102400	; 0x19000
   113a0:	ldr	pc, [ip, #3408]!	; 0xd50

000113a4 <strncmp@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #102400	; 0x19000
   113ac:	ldr	pc, [ip, #3400]!	; 0xd48

000113b0 <abort@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #102400	; 0x19000
   113b8:	ldr	pc, [ip, #3392]!	; 0xd40

000113bc <close@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #102400	; 0x19000
   113c4:	ldr	pc, [ip, #3384]!	; 0xd38

000113c8 <__lxstat64@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #102400	; 0x19000
   113d0:	ldr	pc, [ip, #3376]!	; 0xd30

000113d4 <closedir@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #102400	; 0x19000
   113dc:	ldr	pc, [ip, #3368]!	; 0xd28

000113e0 <__assert_fail@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #102400	; 0x19000
   113e8:	ldr	pc, [ip, #3360]!	; 0xd20

Disassembly of section .text:

000113f0 <.text>:
   113f0:	mov	fp, #0
   113f4:	mov	lr, #0
   113f8:	pop	{r1}		; (ldr r1, [sp], #4)
   113fc:	mov	r2, sp
   11400:	push	{r2}		; (str r2, [sp, #-4]!)
   11404:	push	{r0}		; (str r0, [sp, #-4]!)
   11408:	ldr	ip, [pc, #16]	; 11420 <__assert_fail@plt+0x40>
   1140c:	push	{ip}		; (str ip, [sp, #-4]!)
   11410:	ldr	r0, [pc, #12]	; 11424 <__assert_fail@plt+0x44>
   11414:	ldr	r3, [pc, #12]	; 11428 <__assert_fail@plt+0x48>
   11418:	bl	11224 <__libc_start_main@plt>
   1141c:	bl	113b0 <abort@plt>
   11420:	andeq	r9, r1, r4, lsl r9
   11424:	andeq	r1, r1, ip, ror #15
   11428:			; <UNDEFINED> instruction: 0x000198b4
   1142c:	ldr	r3, [pc, #20]	; 11448 <__assert_fail@plt+0x68>
   11430:	ldr	r2, [pc, #20]	; 1144c <__assert_fail@plt+0x6c>
   11434:	add	r3, pc, r3
   11438:	ldr	r2, [r3, r2]
   1143c:	cmp	r2, #0
   11440:	bxeq	lr
   11444:	b	1123c <__gmon_start__@plt>
   11448:	andeq	r9, r1, r4, asr #23
   1144c:	andeq	r0, r0, ip, lsl #2
   11450:	ldr	r0, [pc, #24]	; 11470 <__assert_fail@plt+0x90>
   11454:	ldr	r3, [pc, #24]	; 11474 <__assert_fail@plt+0x94>
   11458:	cmp	r3, r0
   1145c:	bxeq	lr
   11460:	ldr	r3, [pc, #16]	; 11478 <__assert_fail@plt+0x98>
   11464:	cmp	r3, #0
   11468:	bxeq	lr
   1146c:	bx	r3
   11470:	andeq	fp, r2, r8, ror #2
   11474:	andeq	fp, r2, r8, ror #2
   11478:	andeq	r0, r0, r0
   1147c:	ldr	r0, [pc, #36]	; 114a8 <__assert_fail@plt+0xc8>
   11480:	ldr	r1, [pc, #36]	; 114ac <__assert_fail@plt+0xcc>
   11484:	sub	r1, r1, r0
   11488:	asr	r1, r1, #2
   1148c:	add	r1, r1, r1, lsr #31
   11490:	asrs	r1, r1, #1
   11494:	bxeq	lr
   11498:	ldr	r3, [pc, #16]	; 114b0 <__assert_fail@plt+0xd0>
   1149c:	cmp	r3, #0
   114a0:	bxeq	lr
   114a4:	bx	r3
   114a8:	andeq	fp, r2, r8, ror #2
   114ac:	andeq	fp, r2, r8, ror #2
   114b0:	andeq	r0, r0, r0
   114b4:	push	{r4, lr}
   114b8:	ldr	r4, [pc, #24]	; 114d8 <__assert_fail@plt+0xf8>
   114bc:	ldrb	r3, [r4]
   114c0:	cmp	r3, #0
   114c4:	popne	{r4, pc}
   114c8:	bl	11450 <__assert_fail@plt+0x70>
   114cc:	mov	r3, #1
   114d0:	strb	r3, [r4]
   114d4:	pop	{r4, pc}
   114d8:	andeq	fp, r2, r4, lsl #3
   114dc:	b	1147c <__assert_fail@plt+0x9c>
   114e0:	push	{fp, lr}
   114e4:	mov	fp, sp
   114e8:	sub	sp, sp, #8
   114ec:	mov	r4, r0
   114f0:	cmp	r0, #0
   114f4:	bne	11620 <__assert_fail@plt+0x240>
   114f8:	movw	r1, #39355	; 0x99bb
   114fc:	movt	r1, #1
   11500:	mov	r0, #0
   11504:	mov	r2, #5
   11508:	bl	11170 <dcgettext@plt>
   1150c:	mov	r1, r0
   11510:	movw	r0, #45492	; 0xb1b4
   11514:	movt	r0, #2
   11518:	ldr	r2, [r0]
   1151c:	str	r2, [sp]
   11520:	mov	r0, #1
   11524:	mov	r3, r2
   11528:	bl	112cc <__printf_chk@plt>
   1152c:	movw	r1, #39490	; 0x9a42
   11530:	movt	r1, #1
   11534:	mov	r0, #0
   11538:	mov	r2, #5
   1153c:	bl	11170 <dcgettext@plt>
   11540:	movw	r5, #45436	; 0xb17c
   11544:	movt	r5, #2
   11548:	ldr	r1, [r5]
   1154c:	bl	11104 <fputs_unlocked@plt>
   11550:	movw	r1, #39595	; 0x9aab
   11554:	movt	r1, #1
   11558:	mov	r0, #0
   1155c:	mov	r2, #5
   11560:	bl	11170 <dcgettext@plt>
   11564:	ldr	r1, [r5]
   11568:	bl	11104 <fputs_unlocked@plt>
   1156c:	movw	r1, #39796	; 0x9b74
   11570:	movt	r1, #1
   11574:	mov	r0, #0
   11578:	mov	r2, #5
   1157c:	bl	11170 <dcgettext@plt>
   11580:	ldr	r1, [r5]
   11584:	bl	11104 <fputs_unlocked@plt>
   11588:	movw	r1, #39924	; 0x9bf4
   1158c:	movt	r1, #1
   11590:	mov	r0, #0
   11594:	mov	r2, #5
   11598:	bl	11170 <dcgettext@plt>
   1159c:	ldr	r1, [r5]
   115a0:	bl	11104 <fputs_unlocked@plt>
   115a4:	movw	r1, #39990	; 0x9c36
   115a8:	movt	r1, #1
   115ac:	mov	r0, #0
   115b0:	mov	r2, #5
   115b4:	bl	11170 <dcgettext@plt>
   115b8:	ldr	r1, [r5]
   115bc:	bl	11104 <fputs_unlocked@plt>
   115c0:	movw	r1, #40057	; 0x9c79
   115c4:	movt	r1, #1
   115c8:	mov	r0, #0
   115cc:	mov	r2, #5
   115d0:	bl	11170 <dcgettext@plt>
   115d4:	ldr	r1, [r5]
   115d8:	bl	11104 <fputs_unlocked@plt>
   115dc:	movw	r1, #40102	; 0x9ca6
   115e0:	movt	r1, #1
   115e4:	mov	r0, #0
   115e8:	mov	r2, #5
   115ec:	bl	11170 <dcgettext@plt>
   115f0:	ldr	r1, [r5]
   115f4:	bl	11104 <fputs_unlocked@plt>
   115f8:	movw	r1, #40156	; 0x9cdc
   115fc:	movt	r1, #1
   11600:	mov	r0, #0
   11604:	mov	r2, #5
   11608:	bl	11170 <dcgettext@plt>
   1160c:	ldr	r1, [r5]
   11610:	bl	11104 <fputs_unlocked@plt>
   11614:	bl	11664 <__assert_fail@plt+0x284>
   11618:	mov	r0, r4
   1161c:	bl	11260 <exit@plt>
   11620:	movw	r0, #45432	; 0xb178
   11624:	movt	r0, #2
   11628:	ldr	r5, [r0]
   1162c:	movw	r1, #39316	; 0x9994
   11630:	movt	r1, #1
   11634:	mov	r0, #0
   11638:	mov	r2, #5
   1163c:	bl	11170 <dcgettext@plt>
   11640:	mov	r2, r0
   11644:	movw	r0, #45492	; 0xb1b4
   11648:	movt	r0, #2
   1164c:	ldr	r3, [r0]
   11650:	mov	r0, r5
   11654:	mov	r1, #1
   11658:	bl	112e4 <__fprintf_chk@plt>
   1165c:	mov	r0, r4
   11660:	bl	11260 <exit@plt>
   11664:	push	{r4, r5, r6, sl, fp, lr}
   11668:	add	fp, sp, #16
   1166c:	sub	sp, sp, #56	; 0x38
   11670:	movw	r0, #41840	; 0xa370
   11674:	movt	r0, #1
   11678:	add	r1, r0, #32
   1167c:	mov	r2, #48	; 0x30
   11680:	vld1.64	{d16-d17}, [r1]
   11684:	mov	r6, sp
   11688:	add	r1, r6, #32
   1168c:	add	r3, r0, #16
   11690:	vld1.64	{d18-d19}, [r0], r2
   11694:	vld1.64	{d20-d21}, [r3]
   11698:	vldr	d22, [r0]
   1169c:	vst1.64	{d16-d17}, [r1]
   116a0:	add	r0, r6, #16
   116a4:	vst1.64	{d20-d21}, [r0]
   116a8:	mov	r0, r6
   116ac:	vst1.64	{d18-d19}, [r0], r2
   116b0:	vstr	d22, [r0]
   116b4:	ldr	r1, [sp]
   116b8:	cmp	r1, #0
   116bc:	movw	r4, #40231	; 0x9d27
   116c0:	movt	r4, #1
   116c4:	beq	116ec <__assert_fail@plt+0x30c>
   116c8:	mov	r6, sp
   116cc:	movw	r5, #40231	; 0x9d27
   116d0:	movt	r5, #1
   116d4:	mov	r0, r5
   116d8:	bl	1111c <strcmp@plt>
   116dc:	cmp	r0, #0
   116e0:	ldrne	r1, [r6, #8]!
   116e4:	cmpne	r1, #0
   116e8:	bne	116d4 <__assert_fail@plt+0x2f4>
   116ec:	ldr	r5, [r6, #4]
   116f0:	movw	r1, #40600	; 0x9e98
   116f4:	movt	r1, #1
   116f8:	mov	r0, #0
   116fc:	mov	r2, #5
   11700:	bl	11170 <dcgettext@plt>
   11704:	mov	r1, r0
   11708:	movw	r2, #40329	; 0x9d89
   1170c:	movt	r2, #1
   11710:	movw	r3, #40623	; 0x9eaf
   11714:	movt	r3, #1
   11718:	mov	r0, #1
   1171c:	bl	112cc <__printf_chk@plt>
   11720:	cmp	r5, #0
   11724:	moveq	r5, r4
   11728:	mov	r0, #5
   1172c:	mov	r1, #0
   11730:	bl	11314 <setlocale@plt>
   11734:	cmp	r0, #0
   11738:	beq	11778 <__assert_fail@plt+0x398>
   1173c:	movw	r1, #40663	; 0x9ed7
   11740:	movt	r1, #1
   11744:	mov	r2, #3
   11748:	bl	113a4 <strncmp@plt>
   1174c:	cmp	r0, #0
   11750:	beq	11778 <__assert_fail@plt+0x398>
   11754:	movw	r1, #40667	; 0x9edb
   11758:	movt	r1, #1
   1175c:	mov	r0, #0
   11760:	mov	r2, #5
   11764:	bl	11170 <dcgettext@plt>
   11768:	movw	r1, #45436	; 0xb17c
   1176c:	movt	r1, #2
   11770:	ldr	r1, [r1]
   11774:	bl	11104 <fputs_unlocked@plt>
   11778:	movw	r1, #40738	; 0x9f22
   1177c:	movt	r1, #1
   11780:	mov	r0, #0
   11784:	mov	r2, #5
   11788:	bl	11170 <dcgettext@plt>
   1178c:	mov	r1, r0
   11790:	movw	r2, #40623	; 0x9eaf
   11794:	movt	r2, #1
   11798:	mov	r0, #1
   1179c:	mov	r3, r4
   117a0:	bl	112cc <__printf_chk@plt>
   117a4:	movw	r0, #40533	; 0x9e55
   117a8:	movt	r0, #1
   117ac:	movw	r6, #39594	; 0x9aaa
   117b0:	movt	r6, #1
   117b4:	cmp	r5, r4
   117b8:	moveq	r6, r0
   117bc:	movw	r1, #40765	; 0x9f3d
   117c0:	movt	r1, #1
   117c4:	mov	r0, #0
   117c8:	mov	r2, #5
   117cc:	bl	11170 <dcgettext@plt>
   117d0:	mov	r1, r0
   117d4:	mov	r0, #1
   117d8:	mov	r2, r5
   117dc:	mov	r3, r6
   117e0:	sub	sp, fp, #16
   117e4:	pop	{r4, r5, r6, sl, fp, lr}
   117e8:	b	112cc <__printf_chk@plt>
   117ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117f0:	add	fp, sp, #28
   117f4:	sub	sp, sp, #28
   117f8:	mov	r5, r1
   117fc:	mov	r7, r0
   11800:	mov	r4, #0
   11804:	str	r4, [sp, #24]
   11808:	ldr	r0, [r1]
   1180c:	bl	16470 <__assert_fail@plt+0x5090>
   11810:	movw	r1, #39594	; 0x9aaa
   11814:	movt	r1, #1
   11818:	mov	r0, #6
   1181c:	bl	11314 <setlocale@plt>
   11820:	movw	r6, #40333	; 0x9d8d
   11824:	movt	r6, #1
   11828:	movw	r1, #40237	; 0x9d2d
   1182c:	movt	r1, #1
   11830:	mov	r0, r6
   11834:	bl	11374 <bindtextdomain@plt>
   11838:	mov	r0, r6
   1183c:	bl	11188 <textdomain@plt>
   11840:	movw	r0, #10612	; 0x2974
   11844:	movt	r0, #1
   11848:	bl	19918 <__assert_fail@plt+0x8538>
   1184c:	movw	r0, #45448	; 0xb188
   11850:	movt	r0, #2
   11854:	strb	r4, [r0]
   11858:	movw	r0, #45449	; 0xb189
   1185c:	movt	r0, #2
   11860:	strb	r4, [r0]
   11864:	movw	r0, #45450	; 0xb18a
   11868:	movt	r0, #2
   1186c:	strb	r4, [r0]
   11870:	mov	r0, #0
   11874:	str	r0, [sp, #12]
   11878:	mov	r0, #0
   1187c:	mov	r4, #0
   11880:	mov	r1, #0
   11884:	str	r1, [sp, #20]
   11888:	str	r7, [sp, #16]
   1188c:	b	118e4 <__assert_fail@plt+0x504>
   11890:	add	r0, r6, #1
   11894:	str	r0, [sp, #24]
   11898:	ldr	r0, [sp, #20]
   1189c:	add	r1, sp, #24
   118a0:	bl	1869c <__assert_fail@plt+0x72bc>
   118a4:	mov	r1, r0
   118a8:	mov	r0, #44	; 0x2c
   118ac:	strb	r0, [r1, r4]
   118b0:	str	r1, [sp, #20]
   118b4:	add	r0, r1, r5
   118b8:	add	r2, r9, #1
   118bc:	mov	r1, r8
   118c0:	bl	11158 <memcpy@plt>
   118c4:	movw	r0, #45448	; 0xb188
   118c8:	movt	r0, #2
   118cc:	mov	r1, #1
   118d0:	strb	r1, [r0]
   118d4:	mov	r0, sl
   118d8:	mov	r4, r6
   118dc:	mov	r5, r7
   118e0:	ldr	r7, [sp, #16]
   118e4:	mov	sl, r0
   118e8:	mov	r0, #0
   118ec:	str	r0, [sp]
   118f0:	mov	r0, r7
   118f4:	mov	r1, r5
   118f8:	movw	r2, #40261	; 0x9d45
   118fc:	movt	r2, #1
   11900:	movw	r3, #41664	; 0xa2c0
   11904:	movt	r3, #1
   11908:	bl	11248 <getopt_long@plt>
   1190c:	add	r1, r0, #3
   11910:	lsr	r0, r1, #1
   11914:	cmp	r0, #130	; 0x82
   11918:	bhi	1203c <__assert_fail@plt+0xc5c>
   1191c:	add	r2, pc, #4
   11920:	mov	r0, #0
   11924:	ldr	pc, [r2, r1, lsl #2]
   11928:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1192c:	andeq	r1, r1, r4, ror #31
   11930:	andeq	r1, r1, ip, ror #27
   11934:	andeq	r2, r1, ip, lsr r0
   11938:	andeq	r2, r1, ip, lsr r0
   1193c:	andeq	r2, r1, ip, lsr r0
   11940:	andeq	r2, r1, ip, lsr r0
   11944:	andeq	r2, r1, ip, lsr r0
   11948:	andeq	r2, r1, ip, lsr r0
   1194c:	andeq	r2, r1, ip, lsr r0
   11950:	andeq	r2, r1, ip, lsr r0
   11954:	andeq	r2, r1, ip, lsr r0
   11958:	andeq	r2, r1, ip, lsr r0
   1195c:	andeq	r2, r1, ip, lsr r0
   11960:	andeq	r2, r1, ip, lsr r0
   11964:	andeq	r2, r1, ip, lsr r0
   11968:	andeq	r2, r1, ip, lsr r0
   1196c:	andeq	r2, r1, ip, lsr r0
   11970:	andeq	r2, r1, ip, lsr r0
   11974:	andeq	r2, r1, ip, lsr r0
   11978:	andeq	r2, r1, ip, lsr r0
   1197c:	andeq	r2, r1, ip, lsr r0
   11980:	andeq	r2, r1, ip, lsr r0
   11984:	andeq	r2, r1, ip, lsr r0
   11988:	andeq	r2, r1, ip, lsr r0
   1198c:	andeq	r2, r1, ip, lsr r0
   11990:	andeq	r2, r1, ip, lsr r0
   11994:	andeq	r2, r1, ip, lsr r0
   11998:	andeq	r2, r1, ip, lsr r0
   1199c:	andeq	r2, r1, ip, lsr r0
   119a0:	andeq	r2, r1, ip, lsr r0
   119a4:	andeq	r2, r1, ip, lsr r0
   119a8:	andeq	r2, r1, ip, lsr r0
   119ac:	andeq	r2, r1, ip, lsr r0
   119b0:	andeq	r2, r1, ip, lsr r0
   119b4:	andeq	r2, r1, ip, lsr r0
   119b8:	andeq	r2, r1, ip, lsr r0
   119bc:	andeq	r2, r1, ip, lsr r0
   119c0:	andeq	r2, r1, ip, lsr r0
   119c4:	andeq	r2, r1, ip, lsr r0
   119c8:	andeq	r2, r1, ip, lsr r0
   119cc:	andeq	r2, r1, ip, lsr r0
   119d0:	andeq	r2, r1, ip, lsr r0
   119d4:	andeq	r2, r1, ip, lsr r0
   119d8:	andeq	r2, r1, ip, lsr r0
   119dc:	andeq	r2, r1, ip, lsr r0
   119e0:	andeq	r1, r1, r0, asr #26
   119e4:	andeq	r1, r1, r0, asr #26
   119e8:	andeq	r2, r1, ip, lsr r0
   119ec:	andeq	r2, r1, ip, lsr r0
   119f0:	andeq	r2, r1, ip, lsr r0
   119f4:	andeq	r1, r1, r0, asr #26
   119f8:	andeq	r1, r1, r0, asr #26
   119fc:	andeq	r1, r1, r0, asr #26
   11a00:	andeq	r1, r1, r0, asr #26
   11a04:	andeq	r1, r1, r0, asr #26
   11a08:	andeq	r1, r1, r0, asr #26
   11a0c:	andeq	r1, r1, r0, asr #26
   11a10:	andeq	r1, r1, r0, asr #26
   11a14:	andeq	r2, r1, ip, lsr r0
   11a18:	andeq	r2, r1, ip, lsr r0
   11a1c:	andeq	r2, r1, ip, lsr r0
   11a20:	andeq	r2, r1, ip, lsr r0
   11a24:	andeq	r2, r1, ip, lsr r0
   11a28:	andeq	r1, r1, r0, asr #26
   11a2c:	andeq	r2, r1, ip, lsr r0
   11a30:	andeq	r2, r1, ip, lsr r0
   11a34:	andeq	r2, r1, ip, lsr r0
   11a38:	andeq	r2, r1, ip, lsr r0
   11a3c:	andeq	r2, r1, ip, lsr r0
   11a40:	andeq	r2, r1, ip, lsr r0
   11a44:	andeq	r2, r1, ip, lsr r0
   11a48:	andeq	r2, r1, ip, lsr r0
   11a4c:	andeq	r2, r1, ip, lsr r0
   11a50:	andeq	r2, r1, ip, lsr r0
   11a54:	andeq	r2, r1, ip, lsr r0
   11a58:	andeq	r2, r1, ip, lsr r0
   11a5c:	andeq	r2, r1, ip, lsr r0
   11a60:	andeq	r2, r1, ip, lsr r0
   11a64:	andeq	r2, r1, ip, lsr r0
   11a68:	andeq	r2, r1, ip, lsr r0
   11a6c:	andeq	r2, r1, ip, lsr r0
   11a70:	andeq	r2, r1, ip, lsr r0
   11a74:	andeq	r2, r1, ip, lsr r0
   11a78:	andeq	r2, r1, ip, lsr r0
   11a7c:	muleq	r1, ip, sp
   11a80:	andeq	r2, r1, ip, lsr r0
   11a84:	andeq	r2, r1, ip, lsr r0
   11a88:	andeq	r2, r1, ip, lsr r0
   11a8c:	andeq	r2, r1, ip, lsr r0
   11a90:	andeq	r2, r1, ip, lsr r0
   11a94:	andeq	r1, r1, r0, asr #26
   11a98:	andeq	r2, r1, ip, lsr r0
   11a9c:	andeq	r2, r1, ip, lsr r0
   11aa0:	andeq	r2, r1, ip, lsr r0
   11aa4:	andeq	r2, r1, ip, lsr r0
   11aa8:	andeq	r2, r1, ip, lsr r0
   11aac:	andeq	r2, r1, ip, lsr r0
   11ab0:	andeq	r2, r1, ip, lsr r0
   11ab4:	andeq	r2, r1, ip, lsr r0
   11ab8:	andeq	r1, r1, r0, asr #26
   11abc:	andeq	r2, r1, ip, lsr r0
   11ac0:			; <UNDEFINED> instruction: 0x00011db4
   11ac4:	andeq	r2, r1, ip, lsr r0
   11ac8:	andeq	r2, r1, ip, lsr r0
   11acc:	muleq	r1, r0, sp
   11ad0:	andeq	r1, r1, r0, asr #26
   11ad4:	andeq	r2, r1, ip, lsr r0
   11ad8:	andeq	r2, r1, ip, lsr r0
   11adc:	andeq	r2, r1, ip, lsr r0
   11ae0:	andeq	r2, r1, ip, lsr r0
   11ae4:	andeq	r2, r1, ip, lsr r0
   11ae8:	andeq	r2, r1, ip, lsr r0
   11aec:	andeq	r2, r1, ip, lsr r0
   11af0:	andeq	r1, r1, r0, asr #26
   11af4:	andeq	r2, r1, ip, lsr r0
   11af8:	andeq	r2, r1, ip, lsr r0
   11afc:	andeq	r1, r1, r0, asr #26
   11b00:	andeq	r1, r1, r0, asr #26
   11b04:	andeq	r1, r1, r0, asr #26
   11b08:	andeq	r1, r1, r0, asr #26
   11b0c:	andeq	r1, r1, r8, lsl #27
   11b10:	andeq	r1, r1, r0, asr #26
   11b14:	andeq	r1, r1, r0, asr #26
   11b18:	andeq	r2, r1, ip, lsr r0
   11b1c:	andeq	r2, r1, ip, lsr r0
   11b20:	andeq	r2, r1, ip, lsr r0
   11b24:	andeq	r2, r1, ip, lsr r0
   11b28:	andeq	r2, r1, ip, lsr r0
   11b2c:	andeq	r2, r1, ip, lsr r0
   11b30:	andeq	r2, r1, ip, lsr r0
   11b34:	andeq	r2, r1, ip, lsr r0
   11b38:	andeq	r2, r1, ip, lsr r0
   11b3c:	andeq	r2, r1, ip, lsr r0
   11b40:	andeq	r2, r1, ip, lsr r0
   11b44:	andeq	r2, r1, ip, lsr r0
   11b48:	andeq	r2, r1, ip, lsr r0
   11b4c:	andeq	r2, r1, ip, lsr r0
   11b50:	andeq	r2, r1, ip, lsr r0
   11b54:	andeq	r2, r1, ip, lsr r0
   11b58:	andeq	r2, r1, ip, lsr r0
   11b5c:	andeq	r2, r1, ip, lsr r0
   11b60:	andeq	r2, r1, ip, lsr r0
   11b64:	andeq	r2, r1, ip, lsr r0
   11b68:	andeq	r2, r1, ip, lsr r0
   11b6c:	andeq	r2, r1, ip, lsr r0
   11b70:	andeq	r2, r1, ip, lsr r0
   11b74:	andeq	r2, r1, ip, lsr r0
   11b78:	andeq	r2, r1, ip, lsr r0
   11b7c:	andeq	r2, r1, ip, lsr r0
   11b80:	andeq	r2, r1, ip, lsr r0
   11b84:	andeq	r2, r1, ip, lsr r0
   11b88:	andeq	r2, r1, ip, lsr r0
   11b8c:	andeq	r2, r1, ip, lsr r0
   11b90:	andeq	r2, r1, ip, lsr r0
   11b94:	andeq	r2, r1, ip, lsr r0
   11b98:	andeq	r2, r1, ip, lsr r0
   11b9c:	andeq	r2, r1, ip, lsr r0
   11ba0:	andeq	r2, r1, ip, lsr r0
   11ba4:	andeq	r2, r1, ip, lsr r0
   11ba8:	andeq	r2, r1, ip, lsr r0
   11bac:	andeq	r2, r1, ip, lsr r0
   11bb0:	andeq	r2, r1, ip, lsr r0
   11bb4:	andeq	r2, r1, ip, lsr r0
   11bb8:	andeq	r2, r1, ip, lsr r0
   11bbc:	andeq	r2, r1, ip, lsr r0
   11bc0:	andeq	r2, r1, ip, lsr r0
   11bc4:	andeq	r2, r1, ip, lsr r0
   11bc8:	andeq	r2, r1, ip, lsr r0
   11bcc:	andeq	r2, r1, ip, lsr r0
   11bd0:	andeq	r2, r1, ip, lsr r0
   11bd4:	andeq	r2, r1, ip, lsr r0
   11bd8:	andeq	r2, r1, ip, lsr r0
   11bdc:	andeq	r2, r1, ip, lsr r0
   11be0:	andeq	r2, r1, ip, lsr r0
   11be4:	andeq	r2, r1, ip, lsr r0
   11be8:	andeq	r2, r1, ip, lsr r0
   11bec:	andeq	r2, r1, ip, lsr r0
   11bf0:	andeq	r2, r1, ip, lsr r0
   11bf4:	andeq	r2, r1, ip, lsr r0
   11bf8:	andeq	r2, r1, ip, lsr r0
   11bfc:	andeq	r2, r1, ip, lsr r0
   11c00:	andeq	r2, r1, ip, lsr r0
   11c04:	andeq	r2, r1, ip, lsr r0
   11c08:	andeq	r2, r1, ip, lsr r0
   11c0c:	andeq	r2, r1, ip, lsr r0
   11c10:	andeq	r2, r1, ip, lsr r0
   11c14:	andeq	r2, r1, ip, lsr r0
   11c18:	andeq	r2, r1, ip, lsr r0
   11c1c:	andeq	r2, r1, ip, lsr r0
   11c20:	andeq	r2, r1, ip, lsr r0
   11c24:	andeq	r2, r1, ip, lsr r0
   11c28:	andeq	r2, r1, ip, lsr r0
   11c2c:	andeq	r2, r1, ip, lsr r0
   11c30:	andeq	r2, r1, ip, lsr r0
   11c34:	andeq	r2, r1, ip, lsr r0
   11c38:	andeq	r2, r1, ip, lsr r0
   11c3c:	andeq	r2, r1, ip, lsr r0
   11c40:	andeq	r2, r1, ip, lsr r0
   11c44:	andeq	r2, r1, ip, lsr r0
   11c48:	andeq	r2, r1, ip, lsr r0
   11c4c:	andeq	r2, r1, ip, lsr r0
   11c50:	andeq	r2, r1, ip, lsr r0
   11c54:	andeq	r2, r1, ip, lsr r0
   11c58:	andeq	r2, r1, ip, lsr r0
   11c5c:	andeq	r2, r1, ip, lsr r0
   11c60:	andeq	r2, r1, ip, lsr r0
   11c64:	andeq	r2, r1, ip, lsr r0
   11c68:	andeq	r2, r1, ip, lsr r0
   11c6c:	andeq	r2, r1, ip, lsr r0
   11c70:	andeq	r2, r1, ip, lsr r0
   11c74:	andeq	r2, r1, ip, lsr r0
   11c78:	andeq	r2, r1, ip, lsr r0
   11c7c:	andeq	r2, r1, ip, lsr r0
   11c80:	andeq	r2, r1, ip, lsr r0
   11c84:	andeq	r2, r1, ip, lsr r0
   11c88:	andeq	r2, r1, ip, lsr r0
   11c8c:	andeq	r2, r1, ip, lsr r0
   11c90:	andeq	r2, r1, ip, lsr r0
   11c94:	andeq	r2, r1, ip, lsr r0
   11c98:	andeq	r2, r1, ip, lsr r0
   11c9c:	andeq	r2, r1, ip, lsr r0
   11ca0:	andeq	r2, r1, ip, lsr r0
   11ca4:	andeq	r2, r1, ip, lsr r0
   11ca8:	andeq	r2, r1, ip, lsr r0
   11cac:	andeq	r2, r1, ip, lsr r0
   11cb0:	andeq	r2, r1, ip, lsr r0
   11cb4:	andeq	r2, r1, ip, lsr r0
   11cb8:	andeq	r2, r1, ip, lsr r0
   11cbc:	andeq	r2, r1, ip, lsr r0
   11cc0:	andeq	r2, r1, ip, lsr r0
   11cc4:	andeq	r2, r1, ip, lsr r0
   11cc8:	andeq	r2, r1, ip, lsr r0
   11ccc:	andeq	r2, r1, ip, lsr r0
   11cd0:	andeq	r2, r1, ip, lsr r0
   11cd4:	andeq	r2, r1, ip, lsr r0
   11cd8:	andeq	r2, r1, ip, lsr r0
   11cdc:	andeq	r2, r1, ip, lsr r0
   11ce0:	andeq	r2, r1, ip, lsr r0
   11ce4:	andeq	r2, r1, ip, lsr r0
   11ce8:	andeq	r2, r1, ip, lsr r0
   11cec:	andeq	r2, r1, ip, lsr r0
   11cf0:	andeq	r2, r1, ip, lsr r0
   11cf4:	andeq	r2, r1, ip, lsr r0
   11cf8:	andeq	r2, r1, ip, lsr r0
   11cfc:	andeq	r2, r1, ip, lsr r0
   11d00:	andeq	r2, r1, ip, lsr r0
   11d04:	andeq	r2, r1, ip, lsr r0
   11d08:	andeq	r2, r1, ip, lsr r0
   11d0c:	andeq	r2, r1, ip, lsr r0
   11d10:	andeq	r2, r1, ip, lsr r0
   11d14:	andeq	r2, r1, ip, lsr r0
   11d18:	andeq	r2, r1, ip, lsr r0
   11d1c:	andeq	r2, r1, ip, lsr r0
   11d20:	andeq	r2, r1, ip, lsr r0
   11d24:	andeq	r2, r1, ip, lsr r0
   11d28:	andeq	r2, r1, ip, lsr r0
   11d2c:	andeq	r2, r1, ip, lsr r0
   11d30:	andeq	r2, r1, ip, lsr r0
   11d34:	andeq	r1, r1, r4, ror #17
   11d38:	andeq	r1, r1, ip, asr #27
   11d3c:	ldrdeq	r1, [r1], -r4
   11d40:	movw	r0, #45424	; 0xb170
   11d44:	movt	r0, #2
   11d48:	ldr	r0, [r0]
   11d4c:	mov	r7, r5
   11d50:	add	r0, r5, r0, lsl #2
   11d54:	ldr	r8, [r0, #-4]
   11d58:	mov	r0, r8
   11d5c:	bl	11278 <strlen@plt>
   11d60:	mov	r9, r0
   11d64:	cmp	r4, #0
   11d68:	mov	r5, r4
   11d6c:	addne	r5, r5, #1
   11d70:	add	r6, r0, r5
   11d74:	ldr	r0, [sp, #24]
   11d78:	cmp	r0, r6
   11d7c:	bls	11890 <__assert_fail@plt+0x4b0>
   11d80:	ldr	r1, [sp, #20]
   11d84:	b	118a8 <__assert_fail@plt+0x4c8>
   11d88:	mov	r0, #0
   11d8c:	b	11db8 <__assert_fail@plt+0x9d8>
   11d90:	movw	r0, #45449	; 0xb189
   11d94:	movt	r0, #2
   11d98:	b	11da4 <__assert_fail@plt+0x9c4>
   11d9c:	movw	r0, #45450	; 0xb18a
   11da0:	movt	r0, #2
   11da4:	mov	r1, #1
   11da8:	strb	r1, [r0]
   11dac:	mov	r0, sl
   11db0:	b	118e4 <__assert_fail@plt+0x504>
   11db4:	mov	r0, #1
   11db8:	movw	r1, #45336	; 0xb118
   11dbc:	movt	r1, #2
   11dc0:	str	r0, [r1]
   11dc4:	mov	r0, sl
   11dc8:	b	118e4 <__assert_fail@plt+0x504>
   11dcc:	mov	r0, #1
   11dd0:	b	118e4 <__assert_fail@plt+0x504>
   11dd4:	movw	r0, #45440	; 0xb180
   11dd8:	movt	r0, #2
   11ddc:	ldr	r0, [r0]
   11de0:	str	r0, [sp, #12]
   11de4:	mov	r0, sl
   11de8:	b	118e4 <__assert_fail@plt+0x504>
   11dec:	ldr	r4, [sp, #12]
   11df0:	cmp	r4, #0
   11df4:	beq	11e14 <__assert_fail@plt+0xa34>
   11df8:	mov	r6, #0
   11dfc:	ldr	r0, [sp, #20]
   11e00:	cmp	r0, #0
   11e04:	beq	11e3c <__assert_fail@plt+0xa5c>
   11e08:	movw	r1, #40372	; 0x9db4
   11e0c:	movt	r1, #1
   11e10:	b	1204c <__assert_fail@plt+0xc6c>
   11e14:	ldr	r6, [sp, #20]
   11e18:	cmp	r6, #0
   11e1c:	bne	11e3c <__assert_fail@plt+0xa5c>
   11e20:	movw	r0, #45424	; 0xb170
   11e24:	movt	r0, #2
   11e28:	mov	r2, r0
   11e2c:	ldr	r0, [r0]
   11e30:	add	r1, r0, #1
   11e34:	str	r1, [r2]
   11e38:	ldr	r6, [r5, r0, lsl #2]
   11e3c:	movw	r0, #45424	; 0xb170
   11e40:	movt	r0, #2
   11e44:	ldr	r0, [r0]
   11e48:	cmp	r0, r7
   11e4c:	bge	11fec <__assert_fail@plt+0xc0c>
   11e50:	cmp	r4, #0
   11e54:	beq	11eb4 <__assert_fail@plt+0xad4>
   11e58:	mov	r0, r4
   11e5c:	bl	16290 <__assert_fail@plt+0x4eb0>
   11e60:	movw	r1, #45452	; 0xb18c
   11e64:	movt	r1, #2
   11e68:	str	r0, [r1]
   11e6c:	cmp	r0, #0
   11e70:	bne	11ee4 <__assert_fail@plt+0xb04>
   11e74:	bl	1129c <__errno_location@plt>
   11e78:	ldr	r6, [r0]
   11e7c:	movw	r1, #40457	; 0x9e09
   11e80:	movt	r1, #1
   11e84:	mov	r0, #0
   11e88:	mov	r2, #5
   11e8c:	bl	11170 <dcgettext@plt>
   11e90:	mov	r5, r0
   11e94:	mov	r0, #4
   11e98:	mov	r1, r4
   11e9c:	bl	17a70 <__assert_fail@plt+0x6690>
   11ea0:	mov	r3, r0
   11ea4:	mov	r0, #1
   11ea8:	mov	r1, r6
   11eac:	mov	r2, r5
   11eb0:	bl	11200 <error@plt>
   11eb4:	mov	r0, r6
   11eb8:	bl	15e1c <__assert_fail@plt+0x4a3c>
   11ebc:	movw	r1, #45452	; 0xb18c
   11ec0:	movt	r1, #2
   11ec4:	str	r0, [r1]
   11ec8:	cmp	r0, #0
   11ecc:	beq	12070 <__assert_fail@plt+0xc90>
   11ed0:	mov	r0, #0
   11ed4:	bl	11380 <umask@plt>
   11ed8:	movw	r1, #45456	; 0xb190
   11edc:	movt	r1, #2
   11ee0:	str	r0, [r1]
   11ee4:	movw	r0, #45450	; 0xb18a
   11ee8:	movt	r0, #2
   11eec:	ldrb	r0, [r0]
   11ef0:	and	r0, sl, r0
   11ef4:	tst	r0, #1
   11ef8:	beq	11f60 <__assert_fail@plt+0xb80>
   11efc:	movw	r0, #45464	; 0xb198
   11f00:	movt	r0, #2
   11f04:	bl	1807c <__assert_fail@plt+0x6c9c>
   11f08:	movw	r1, #45480	; 0xb1a8
   11f0c:	movt	r1, #2
   11f10:	str	r0, [r1]
   11f14:	cmp	r0, #0
   11f18:	bne	11f70 <__assert_fail@plt+0xb90>
   11f1c:	bl	1129c <__errno_location@plt>
   11f20:	ldr	r4, [r0]
   11f24:	movw	r1, #40457	; 0x9e09
   11f28:	movt	r1, #1
   11f2c:	mov	r0, #0
   11f30:	mov	r2, #5
   11f34:	bl	11170 <dcgettext@plt>
   11f38:	mov	r5, r0
   11f3c:	movw	r1, #43119	; 0xa86f
   11f40:	movt	r1, #1
   11f44:	mov	r0, #4
   11f48:	bl	17a70 <__assert_fail@plt+0x6690>
   11f4c:	mov	r3, r0
   11f50:	mov	r0, #1
   11f54:	mov	r1, r4
   11f58:	mov	r2, r5
   11f5c:	bl	11200 <error@plt>
   11f60:	movw	r0, #45480	; 0xb1a8
   11f64:	movt	r0, #2
   11f68:	mov	r1, #0
   11f6c:	str	r1, [r0]
   11f70:	movw	r0, #45424	; 0xb170
   11f74:	movt	r0, #2
   11f78:	ldr	r0, [r0]
   11f7c:	add	r0, r5, r0, lsl #2
   11f80:	bl	120ac <__assert_fail@plt+0xccc>
   11f84:	eor	r0, r0, #1
   11f88:	sub	sp, fp, #28
   11f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f90:	movw	r0, #45340	; 0xb11c
   11f94:	movt	r0, #2
   11f98:	ldr	r3, [r0]
   11f9c:	movw	r0, #45436	; 0xb17c
   11fa0:	movt	r0, #2
   11fa4:	ldr	r0, [r0]
   11fa8:	mov	r1, #0
   11fac:	movw	r2, #40359	; 0x9da7
   11fb0:	movt	r2, #1
   11fb4:	movw	r7, #40343	; 0x9d97
   11fb8:	movt	r7, #1
   11fbc:	str	r7, [sp]
   11fc0:	str	r2, [sp, #4]
   11fc4:	str	r1, [sp, #8]
   11fc8:	movw	r1, #40231	; 0x9d27
   11fcc:	movt	r1, #1
   11fd0:	movw	r2, #40329	; 0x9d89
   11fd4:	movt	r2, #1
   11fd8:	bl	184d8 <__assert_fail@plt+0x70f8>
   11fdc:	mov	r0, #0
   11fe0:	bl	11260 <exit@plt>
   11fe4:	mov	r0, #0
   11fe8:	bl	114e0 <__assert_fail@plt+0x100>
   11fec:	cmp	r6, #0
   11ff0:	beq	12044 <__assert_fail@plt+0xc64>
   11ff4:	add	r0, r5, r0, lsl #2
   11ff8:	ldr	r0, [r0, #-4]
   11ffc:	cmp	r6, r0
   12000:	bne	12044 <__assert_fail@plt+0xc64>
   12004:	movw	r1, #40432	; 0x9df0
   12008:	movt	r1, #1
   1200c:	mov	r0, #0
   12010:	mov	r2, #5
   12014:	bl	11170 <dcgettext@plt>
   12018:	mov	r6, r0
   1201c:	add	r0, r5, r7, lsl #2
   12020:	ldr	r0, [r0, #-4]
   12024:	bl	17c64 <__assert_fail@plt+0x6884>
   12028:	mov	r3, r0
   1202c:	mov	r0, #0
   12030:	mov	r1, #0
   12034:	mov	r2, r6
   12038:	bl	11200 <error@plt>
   1203c:	mov	r0, #1
   12040:	bl	114e0 <__assert_fail@plt+0x100>
   12044:	movw	r1, #40416	; 0x9de0
   12048:	movt	r1, #1
   1204c:	mov	r0, #0
   12050:	mov	r2, #5
   12054:	bl	11170 <dcgettext@plt>
   12058:	mov	r2, r0
   1205c:	mov	r0, #0
   12060:	mov	r1, #0
   12064:	bl	11200 <error@plt>
   12068:	mov	r0, #1
   1206c:	bl	114e0 <__assert_fail@plt+0x100>
   12070:	movw	r1, #40488	; 0x9e28
   12074:	movt	r1, #1
   12078:	mov	r0, #0
   1207c:	mov	r2, #5
   12080:	bl	11170 <dcgettext@plt>
   12084:	mov	r4, r0
   12088:	mov	r0, r6
   1208c:	bl	17c64 <__assert_fail@plt+0x6884>
   12090:	mov	r3, r0
   12094:	mov	r0, #0
   12098:	mov	r1, #0
   1209c:	mov	r2, r4
   120a0:	bl	11200 <error@plt>
   120a4:	mov	r0, #1
   120a8:	bl	114e0 <__assert_fail@plt+0x100>
   120ac:	push	{r4, r5, r6, sl, fp, lr}
   120b0:	add	fp, sp, #16
   120b4:	movw	r1, #1041	; 0x411
   120b8:	mov	r2, #0
   120bc:	bl	189ac <__assert_fail@plt+0x75cc>
   120c0:	mov	r5, r0
   120c4:	bl	13664 <__assert_fail@plt+0x2284>
   120c8:	cmp	r0, #0
   120cc:	beq	120fc <__assert_fail@plt+0xd1c>
   120d0:	mov	r1, r0
   120d4:	mov	r4, #1
   120d8:	mov	r0, r5
   120dc:	bl	12198 <__assert_fail@plt+0xdb8>
   120e0:	and	r4, r4, r0
   120e4:	mov	r0, r5
   120e8:	bl	13664 <__assert_fail@plt+0x2284>
   120ec:	mov	r1, r0
   120f0:	cmp	r0, #0
   120f4:	bne	120d8 <__assert_fail@plt+0xcf8>
   120f8:	b	12100 <__assert_fail@plt+0xd20>
   120fc:	mov	r4, #1
   12100:	bl	1129c <__errno_location@plt>
   12104:	ldr	r6, [r0]
   12108:	cmp	r6, #0
   1210c:	beq	12150 <__assert_fail@plt+0xd70>
   12110:	movw	r0, #45449	; 0xb189
   12114:	movt	r0, #2
   12118:	ldrb	r0, [r0]
   1211c:	mov	r4, #0
   12120:	cmp	r0, #0
   12124:	bne	12150 <__assert_fail@plt+0xd70>
   12128:	mov	r4, #0
   1212c:	movw	r1, #40895	; 0x9fbf
   12130:	movt	r1, #1
   12134:	mov	r0, #0
   12138:	mov	r2, #5
   1213c:	bl	11170 <dcgettext@plt>
   12140:	mov	r2, r0
   12144:	mov	r0, #0
   12148:	mov	r1, r6
   1214c:	bl	11200 <error@plt>
   12150:	mov	r0, r5
   12154:	bl	134d0 <__assert_fail@plt+0x20f0>
   12158:	cmp	r0, #0
   1215c:	beq	12190 <__assert_fail@plt+0xdb0>
   12160:	bl	1129c <__errno_location@plt>
   12164:	ldr	r5, [r0]
   12168:	mov	r4, #0
   1216c:	movw	r1, #40911	; 0x9fcf
   12170:	movt	r1, #1
   12174:	mov	r0, #0
   12178:	mov	r2, #5
   1217c:	bl	11170 <dcgettext@plt>
   12180:	mov	r2, r0
   12184:	mov	r0, #0
   12188:	mov	r1, r5
   1218c:	bl	11200 <error@plt>
   12190:	mov	r0, r4
   12194:	pop	{r4, r5, r6, sl, fp, pc}
   12198:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1219c:	add	fp, sp, #28
   121a0:	sub	sp, sp, #44	; 0x2c
   121a4:	mov	r5, r1
   121a8:	mov	r4, r0
   121ac:	ldrd	r8, [r1, #24]
   121b0:	mov	r0, #0
   121b4:	str	r0, [sp, #36]	; 0x24
   121b8:	str	r0, [sp, #32]
   121bc:	str	r0, [sp, #40]	; 0x28
   121c0:	ldrh	r0, [r1, #56]	; 0x38
   121c4:	sub	r0, r0, #2
   121c8:	cmp	r0, #11
   121cc:	bhi	12264 <__assert_fail@plt+0xe84>
   121d0:	mov	r6, #1
   121d4:	add	r1, pc, #0
   121d8:	ldr	pc, [r1, r0, lsl #2]
   121dc:	andeq	r2, r1, ip, lsl #4
   121e0:	andeq	r2, r1, r4, ror #4
   121e4:	andeq	r2, r1, ip, ror r2
   121e8:	andeq	r2, r1, r4, ror #4
   121ec:	andeq	r2, r1, ip, lsr #13
   121f0:	andeq	r2, r1, r0, lsr #5
   121f4:	andeq	r2, r1, r4, ror #4
   121f8:	andeq	r2, r1, r4, ror #4
   121fc:	andeq	r2, r1, r0, ror #5
   12200:	andeq	r2, r1, r4, ror #4
   12204:	andeq	r2, r1, r4, ror #4
   12208:	andeq	r2, r1, r8, asr #6
   1220c:	mov	r0, r4
   12210:	mov	r1, r5
   12214:	bl	189f8 <__assert_fail@plt+0x7618>
   12218:	cmp	r0, #0
   1221c:	beq	12264 <__assert_fail@plt+0xe84>
   12220:	mov	r6, #0
   12224:	movw	r1, #41008	; 0xa030
   12228:	movt	r1, #1
   1222c:	mov	r0, #0
   12230:	mov	r2, #5
   12234:	bl	11170 <dcgettext@plt>
   12238:	mov	r4, r0
   1223c:	mov	r0, #0
   12240:	mov	r1, #3
   12244:	mov	r2, r9
   12248:	bl	17b24 <__assert_fail@plt+0x6744>
   1224c:	mov	r3, r0
   12250:	mov	r0, #0
   12254:	mov	r1, #0
   12258:	mov	r2, r4
   1225c:	bl	11200 <error@plt>
   12260:	b	126ac <__assert_fail@plt+0x12cc>
   12264:	mov	r0, #2
   12268:	str	r0, [sp, #32]
   1226c:	mov	r0, #1
   12270:	cmp	r0, #0
   12274:	bne	123ac <__assert_fail@plt+0xfcc>
   12278:	b	12468 <__assert_fail@plt+0x1088>
   1227c:	movw	r0, #45449	; 0xb189
   12280:	movt	r0, #2
   12284:	ldrb	r0, [r0]
   12288:	cmp	r0, #0
   1228c:	bne	12534 <__assert_fail@plt+0x1154>
   12290:	ldr	r6, [r5, #32]
   12294:	movw	r1, #40945	; 0x9ff1
   12298:	movt	r1, #1
   1229c:	b	12318 <__assert_fail@plt+0xf38>
   122a0:	movw	r0, #45449	; 0xb189
   122a4:	movt	r0, #2
   122a8:	ldrb	r0, [r0]
   122ac:	cmp	r0, #0
   122b0:	bne	12534 <__assert_fail@plt+0x1154>
   122b4:	ldr	r6, [r5, #32]
   122b8:	mov	r0, #0
   122bc:	mov	r1, #3
   122c0:	mov	r2, r9
   122c4:	bl	17b24 <__assert_fail@plt+0x6744>
   122c8:	mov	r3, r0
   122cc:	movw	r2, #40502	; 0x9e36
   122d0:	movt	r2, #1
   122d4:	mov	r0, #0
   122d8:	mov	r1, r6
   122dc:	b	12390 <__assert_fail@plt+0xfb0>
   122e0:	ldr	r0, [r5, #48]	; 0x30
   122e4:	cmp	r0, #0
   122e8:	bne	122f8 <__assert_fail@plt+0xf18>
   122ec:	ldr	r0, [r5, #16]
   122f0:	cmp	r0, #0
   122f4:	beq	12734 <__assert_fail@plt+0x1354>
   122f8:	movw	r0, #45449	; 0xb189
   122fc:	movt	r0, #2
   12300:	ldrb	r0, [r0]
   12304:	cmp	r0, #0
   12308:	bne	12394 <__assert_fail@plt+0xfb4>
   1230c:	ldr	r6, [r5, #32]
   12310:	movw	r1, #40928	; 0x9fe0
   12314:	movt	r1, #1
   12318:	mov	r0, #0
   1231c:	mov	r2, #5
   12320:	bl	11170 <dcgettext@plt>
   12324:	mov	r7, r0
   12328:	mov	r0, #4
   1232c:	mov	r1, r9
   12330:	bl	17a70 <__assert_fail@plt+0x6690>
   12334:	mov	r3, r0
   12338:	mov	r0, #0
   1233c:	mov	r1, r6
   12340:	mov	r2, r7
   12344:	b	12390 <__assert_fail@plt+0xfb0>
   12348:	movw	r0, #45449	; 0xb189
   1234c:	movt	r0, #2
   12350:	ldrb	r0, [r0]
   12354:	cmp	r0, #0
   12358:	bne	12534 <__assert_fail@plt+0x1154>
   1235c:	movw	r1, #40970	; 0xa00a
   12360:	movt	r1, #1
   12364:	mov	r0, #0
   12368:	mov	r2, #5
   1236c:	bl	11170 <dcgettext@plt>
   12370:	mov	r6, r0
   12374:	mov	r0, #4
   12378:	mov	r1, r9
   1237c:	bl	17a70 <__assert_fail@plt+0x6690>
   12380:	mov	r3, r0
   12384:	mov	r0, #0
   12388:	mov	r1, #0
   1238c:	mov	r2, r6
   12390:	bl	11200 <error@plt>
   12394:	ldr	r0, [sp, #32]
   12398:	sub	r0, r0, #2
   1239c:	clz	r0, r0
   123a0:	lsr	r0, r0, #5
   123a4:	cmp	r0, #0
   123a8:	beq	12468 <__assert_fail@plt+0x1088>
   123ac:	movw	r1, #45480	; 0xb1a8
   123b0:	movt	r1, #2
   123b4:	ldr	r1, [r1]
   123b8:	cmp	r1, #0
   123bc:	beq	12468 <__assert_fail@plt+0x1088>
   123c0:	add	r2, r5, #160	; 0xa0
   123c4:	ldrd	r6, [r1]
   123c8:	ldrd	r2, [r2]
   123cc:	eor	r3, r3, r7
   123d0:	eor	r2, r2, r6
   123d4:	orrs	r2, r2, r3
   123d8:	bne	12468 <__assert_fail@plt+0x1088>
   123dc:	add	r2, r5, #64	; 0x40
   123e0:	ldrd	r6, [r1, #8]
   123e4:	ldrd	r2, [r2]
   123e8:	eor	r1, r3, r7
   123ec:	eor	r2, r2, r6
   123f0:	orrs	r1, r2, r1
   123f4:	bne	12468 <__assert_fail@plt+0x1088>
   123f8:	movw	r1, #43119	; 0xa86f
   123fc:	movt	r1, #1
   12400:	mov	r0, r9
   12404:	bl	1111c <strcmp@plt>
   12408:	cmp	r0, #0
   1240c:	beq	126b8 <__assert_fail@plt+0x12d8>
   12410:	movw	r1, #41239	; 0xa117
   12414:	movt	r1, #1
   12418:	mov	r0, #0
   1241c:	mov	r2, #5
   12420:	bl	11170 <dcgettext@plt>
   12424:	mov	r6, r0
   12428:	mov	r0, #0
   1242c:	mov	r1, #4
   12430:	mov	r2, r9
   12434:	bl	179c0 <__assert_fail@plt+0x65e0>
   12438:	mov	r7, r0
   1243c:	movw	r2, #43119	; 0xa86f
   12440:	movt	r2, #1
   12444:	mov	r0, #1
   12448:	mov	r1, #4
   1244c:	bl	179c0 <__assert_fail@plt+0x65e0>
   12450:	str	r0, [sp]
   12454:	mov	r0, #0
   12458:	mov	r1, #0
   1245c:	mov	r2, r6
   12460:	mov	r3, r7
   12464:	b	126ec <__assert_fail@plt+0x130c>
   12468:	cmp	r0, #0
   1246c:	beq	12534 <__assert_fail@plt+0x1154>
   12470:	ldr	r0, [r5, #80]	; 0x50
   12474:	and	r1, r0, #61440	; 0xf000
   12478:	cmp	r1, #40960	; 0xa000
   1247c:	beq	12534 <__assert_fail@plt+0x1154>
   12480:	str	r0, [sp, #36]	; 0x24
   12484:	movw	r2, #45456	; 0xb190
   12488:	movt	r2, #2
   1248c:	ldr	r2, [r2]
   12490:	movw	r3, #45452	; 0xb18c
   12494:	movt	r3, #2
   12498:	ldr	r3, [r3]
   1249c:	mov	r7, #0
   124a0:	str	r7, [sp]
   124a4:	sub	r1, r1, #16384	; 0x4000
   124a8:	clz	r1, r1
   124ac:	lsr	r1, r1, #5
   124b0:	bl	162d0 <__assert_fail@plt+0x4ef0>
   124b4:	mov	r2, r0
   124b8:	str	r0, [sp, #40]	; 0x28
   124bc:	ldr	r0, [r4, #32]
   124c0:	mov	r1, r8
   124c4:	bl	12944 <__assert_fail@plt+0x1564>
   124c8:	cmp	r0, #0
   124cc:	beq	1252c <__assert_fail@plt+0x114c>
   124d0:	movw	r0, #45449	; 0xb189
   124d4:	movt	r0, #2
   124d8:	ldrb	r0, [r0]
   124dc:	cmp	r0, #0
   124e0:	bne	12524 <__assert_fail@plt+0x1144>
   124e4:	bl	1129c <__errno_location@plt>
   124e8:	ldr	r6, [r0]
   124ec:	movw	r1, #41346	; 0xa182
   124f0:	movt	r1, #1
   124f4:	mov	r0, #0
   124f8:	mov	r2, #5
   124fc:	bl	11170 <dcgettext@plt>
   12500:	mov	r7, r0
   12504:	mov	r0, #4
   12508:	mov	r1, r9
   1250c:	bl	17a70 <__assert_fail@plt+0x6690>
   12510:	mov	r3, r0
   12514:	mov	r0, #0
   12518:	mov	r1, r6
   1251c:	mov	r2, r7
   12520:	bl	11200 <error@plt>
   12524:	mov	r0, #1
   12528:	b	12530 <__assert_fail@plt+0x1150>
   1252c:	mov	r0, #4
   12530:	str	r0, [sp, #32]
   12534:	movw	r6, #45336	; 0xb118
   12538:	movt	r6, #2
   1253c:	ldr	r0, [r6]
   12540:	cmp	r0, #2
   12544:	beq	1259c <__assert_fail@plt+0x11bc>
   12548:	ldr	r0, [sp, #32]
   1254c:	cmp	r0, #4
   12550:	bne	1257c <__assert_fail@plt+0x119c>
   12554:	ldr	r0, [r4, #32]
   12558:	ldr	r3, [sp, #36]	; 0x24
   1255c:	ldr	r1, [sp, #40]	; 0x28
   12560:	str	r1, [sp]
   12564:	mov	r1, r8
   12568:	mov	r2, r9
   1256c:	bl	12750 <__assert_fail@plt+0x1370>
   12570:	cmp	r0, #0
   12574:	moveq	r0, #3
   12578:	streq	r0, [sp, #32]
   1257c:	ldr	r0, [sp, #32]
   12580:	cmp	r0, #4
   12584:	ldrne	r1, [r6]
   12588:	cmpne	r1, #0
   1258c:	bne	125a0 <__assert_fail@plt+0x11c0>
   12590:	add	r1, sp, #32
   12594:	mov	r0, r9
   12598:	bl	12800 <__assert_fail@plt+0x1420>
   1259c:	ldr	r0, [sp, #32]
   125a0:	cmp	r0, #3
   125a4:	bcc	12678 <__assert_fail@plt+0x1298>
   125a8:	movw	r0, #45448	; 0xb188
   125ac:	movt	r0, #2
   125b0:	ldrb	r0, [r0]
   125b4:	cmp	r0, #1
   125b8:	bne	12678 <__assert_fail@plt+0x1298>
   125bc:	movw	r0, #45452	; 0xb18c
   125c0:	movt	r0, #2
   125c4:	ldr	r3, [r0]
   125c8:	ldr	r0, [sp, #36]	; 0x24
   125cc:	mov	r6, #0
   125d0:	str	r6, [sp]
   125d4:	and	r1, r0, #61440	; 0xf000
   125d8:	sub	r1, r1, #16384	; 0x4000
   125dc:	clz	r1, r1
   125e0:	lsr	r1, r1, #5
   125e4:	mov	r2, #0
   125e8:	bl	162d0 <__assert_fail@plt+0x4ef0>
   125ec:	mov	r7, r0
   125f0:	mvn	r1, r0
   125f4:	ldr	r0, [sp, #40]	; 0x28
   125f8:	tst	r0, r1
   125fc:	beq	12678 <__assert_fail@plt+0x1298>
   12600:	add	r8, sp, #20
   12604:	mov	r1, r8
   12608:	bl	12b90 <__assert_fail@plt+0x17b0>
   1260c:	add	sl, sp, #8
   12610:	mov	r0, r7
   12614:	mov	r1, sl
   12618:	bl	12b90 <__assert_fail@plt+0x17b0>
   1261c:	strb	r6, [sp, #30]
   12620:	strb	r6, [sp, #18]
   12624:	movw	r1, #41373	; 0xa19d
   12628:	movt	r1, #1
   1262c:	mov	r0, #0
   12630:	mov	r2, #5
   12634:	bl	11170 <dcgettext@plt>
   12638:	mov	r7, r0
   1263c:	mov	r0, #0
   12640:	mov	r1, #3
   12644:	mov	r2, r9
   12648:	bl	17b24 <__assert_fail@plt+0x6744>
   1264c:	mov	r3, r0
   12650:	add	r0, sl, #1
   12654:	add	r1, r8, #1
   12658:	str	r1, [sp]
   1265c:	str	r0, [sp, #4]
   12660:	mov	r0, #0
   12664:	mov	r1, #0
   12668:	mov	r2, r7
   1266c:	bl	11200 <error@plt>
   12670:	mov	r0, #1
   12674:	str	r0, [sp, #32]
   12678:	movw	r0, #45450	; 0xb18a
   1267c:	movt	r0, #2
   12680:	ldrb	r0, [r0]
   12684:	cmp	r0, #0
   12688:	bne	1269c <__assert_fail@plt+0x12bc>
   1268c:	mov	r0, r4
   12690:	mov	r1, r5
   12694:	mov	r2, #4
   12698:	bl	14914 <__assert_fail@plt+0x3534>
   1269c:	ldr	r0, [sp, #32]
   126a0:	mov	r6, #0
   126a4:	cmp	r0, #1
   126a8:	movwhi	r6, #1
   126ac:	mov	r0, r6
   126b0:	sub	sp, fp, #28
   126b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126b8:	movw	r1, #41194	; 0xa0ea
   126bc:	movt	r1, #1
   126c0:	mov	r0, #0
   126c4:	mov	r2, #5
   126c8:	bl	11170 <dcgettext@plt>
   126cc:	mov	r6, r0
   126d0:	mov	r0, #4
   126d4:	mov	r1, r9
   126d8:	bl	17a70 <__assert_fail@plt+0x6690>
   126dc:	mov	r3, r0
   126e0:	mov	r0, #0
   126e4:	mov	r1, #0
   126e8:	mov	r2, r6
   126ec:	bl	11200 <error@plt>
   126f0:	mov	r6, #0
   126f4:	movw	r1, #41297	; 0xa151
   126f8:	movt	r1, #1
   126fc:	mov	r0, #0
   12700:	mov	r2, #5
   12704:	bl	11170 <dcgettext@plt>
   12708:	mov	r2, r0
   1270c:	mov	r0, #0
   12710:	mov	r1, #0
   12714:	bl	11200 <error@plt>
   12718:	mov	r0, r4
   1271c:	mov	r1, r5
   12720:	mov	r2, #4
   12724:	bl	14914 <__assert_fail@plt+0x3534>
   12728:	mov	r0, r4
   1272c:	bl	13664 <__assert_fail@plt+0x2284>
   12730:	b	126ac <__assert_fail@plt+0x12cc>
   12734:	mov	r6, #1
   12738:	str	r6, [r5, #16]
   1273c:	mov	r0, r4
   12740:	mov	r1, r5
   12744:	mov	r2, #1
   12748:	bl	14914 <__assert_fail@plt+0x3534>
   1274c:	b	126ac <__assert_fail@plt+0x12cc>
   12750:	push	{r4, r5, r6, sl, fp, lr}
   12754:	add	fp, sp, #16
   12758:	sub	sp, sp, #104	; 0x68
   1275c:	mov	r5, r3
   12760:	mov	r4, r2
   12764:	ldr	r2, [fp, #8]
   12768:	tst	r2, #3584	; 0xe00
   1276c:	beq	127e8 <__assert_fail@plt+0x1408>
   12770:	mov	r2, sp
   12774:	mov	r3, #0
   12778:	bl	19960 <__assert_fail@plt+0x8580>
   1277c:	cmp	r0, #0
   12780:	beq	127e4 <__assert_fail@plt+0x1404>
   12784:	movw	r0, #45449	; 0xb189
   12788:	movt	r0, #2
   1278c:	ldrb	r0, [r0]
   12790:	cmp	r0, #0
   12794:	bne	127d8 <__assert_fail@plt+0x13f8>
   12798:	bl	1129c <__errno_location@plt>
   1279c:	ldr	r5, [r0]
   127a0:	movw	r1, #41408	; 0xa1c0
   127a4:	movt	r1, #1
   127a8:	mov	r0, #0
   127ac:	mov	r2, #5
   127b0:	bl	11170 <dcgettext@plt>
   127b4:	mov	r6, r0
   127b8:	mov	r0, #4
   127bc:	mov	r1, r4
   127c0:	bl	17a70 <__assert_fail@plt+0x6690>
   127c4:	mov	r3, r0
   127c8:	mov	r0, #0
   127cc:	mov	r1, r5
   127d0:	mov	r2, r6
   127d4:	bl	11200 <error@plt>
   127d8:	mov	r0, #0
   127dc:	sub	sp, fp, #16
   127e0:	pop	{r4, r5, r6, sl, fp, pc}
   127e4:	ldr	r2, [sp, #16]
   127e8:	eor	r0, r2, r5
   127ec:	bfc	r0, #12, #20
   127f0:	cmp	r0, #0
   127f4:	movwne	r0, #1
   127f8:	sub	sp, fp, #16
   127fc:	pop	{r4, r5, r6, sl, fp, pc}
   12800:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12804:	add	fp, sp, #28
   12808:	sub	sp, sp, #36	; 0x24
   1280c:	mov	r7, r1
   12810:	mov	r1, r0
   12814:	mov	r0, #4
   12818:	bl	17a70 <__assert_fail@plt+0x6690>
   1281c:	mov	r4, r0
   12820:	ldr	r0, [r7]
   12824:	cmp	r0, #0
   12828:	beq	12840 <__assert_fail@plt+0x1460>
   1282c:	cmp	r0, #2
   12830:	bne	1286c <__assert_fail@plt+0x148c>
   12834:	movw	r1, #41437	; 0xa1dd
   12838:	movt	r1, #1
   1283c:	b	12848 <__assert_fail@plt+0x1468>
   12840:	movw	r1, #41493	; 0xa215
   12844:	movt	r1, #1
   12848:	mov	r0, #0
   1284c:	mov	r2, #5
   12850:	bl	11170 <dcgettext@plt>
   12854:	mov	r1, r0
   12858:	mov	r0, #1
   1285c:	mov	r2, r4
   12860:	bl	112cc <__printf_chk@plt>
   12864:	sub	sp, fp, #28
   12868:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1286c:	ldr	sl, [r7, #4]
   12870:	ldr	r5, [r7, #8]
   12874:	add	r8, sp, #24
   12878:	mov	r0, r5
   1287c:	mov	r1, r8
   12880:	bl	12b90 <__assert_fail@plt+0x17b0>
   12884:	mov	r6, #0
   12888:	strb	r6, [sp, #34]	; 0x22
   1288c:	ldr	r0, [r7, #4]
   12890:	add	r9, sp, #12
   12894:	mov	r1, r9
   12898:	bl	12b90 <__assert_fail@plt+0x17b0>
   1289c:	strb	r6, [sp, #22]
   128a0:	bfc	r5, #12, #20
   128a4:	ldr	r0, [r7]
   128a8:	cmp	r0, #4
   128ac:	beq	128fc <__assert_fail@plt+0x151c>
   128b0:	cmp	r0, #3
   128b4:	beq	128cc <__assert_fail@plt+0x14ec>
   128b8:	cmp	r0, #1
   128bc:	bne	12940 <__assert_fail@plt+0x1560>
   128c0:	movw	r1, #41569	; 0xa261
   128c4:	movt	r1, #1
   128c8:	b	12904 <__assert_fail@plt+0x1524>
   128cc:	movw	r1, #41628	; 0xa29c
   128d0:	movt	r1, #1
   128d4:	mov	r0, #0
   128d8:	mov	r2, #5
   128dc:	bl	11170 <dcgettext@plt>
   128e0:	mov	r1, r0
   128e4:	add	r0, r8, #1
   128e8:	str	r0, [sp]
   128ec:	mov	r0, #1
   128f0:	mov	r2, r4
   128f4:	mov	r3, r5
   128f8:	b	12934 <__assert_fail@plt+0x1554>
   128fc:	movw	r1, #41519	; 0xa22f
   12900:	movt	r1, #1
   12904:	bfc	sl, #12, #20
   12908:	mov	r0, #0
   1290c:	mov	r2, #5
   12910:	bl	11170 <dcgettext@plt>
   12914:	mov	r1, r0
   12918:	add	r0, r8, #1
   1291c:	add	r2, r9, #1
   12920:	stm	sp, {r2, r5}
   12924:	str	r0, [sp, #8]
   12928:	mov	r0, #1
   1292c:	mov	r2, r4
   12930:	mov	r3, sl
   12934:	bl	112cc <__printf_chk@plt>
   12938:	sub	sp, fp, #28
   1293c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12940:	bl	113b0 <abort@plt>
   12944:	mov	r3, #0
   12948:	b	12a5c <__assert_fail@plt+0x167c>
   1294c:	mov	r3, #256	; 0x100
   12950:	b	12a5c <__assert_fail@plt+0x167c>
   12954:	movw	r1, #45484	; 0xb1ac
   12958:	movt	r1, #2
   1295c:	str	r0, [r1]
   12960:	bx	lr
   12964:	movw	r1, #45488	; 0xb1b0
   12968:	movt	r1, #2
   1296c:	strb	r0, [r1]
   12970:	bx	lr
   12974:	push	{r4, r5, r6, sl, fp, lr}
   12978:	add	fp, sp, #16
   1297c:	sub	sp, sp, #8
   12980:	movw	r0, #45436	; 0xb17c
   12984:	movt	r0, #2
   12988:	ldr	r0, [r0]
   1298c:	bl	18f6c <__assert_fail@plt+0x7b8c>
   12990:	cmp	r0, #0
   12994:	beq	129bc <__assert_fail@plt+0x15dc>
   12998:	movw	r0, #45488	; 0xb1b0
   1299c:	movt	r0, #2
   129a0:	ldrb	r0, [r0]
   129a4:	cmp	r0, #0
   129a8:	beq	129dc <__assert_fail@plt+0x15fc>
   129ac:	bl	1129c <__errno_location@plt>
   129b0:	ldr	r0, [r0]
   129b4:	cmp	r0, #32
   129b8:	bne	129dc <__assert_fail@plt+0x15fc>
   129bc:	movw	r0, #45432	; 0xb178
   129c0:	movt	r0, #2
   129c4:	ldr	r0, [r0]
   129c8:	bl	18f6c <__assert_fail@plt+0x7b8c>
   129cc:	cmp	r0, #0
   129d0:	subeq	sp, fp, #16
   129d4:	popeq	{r4, r5, r6, sl, fp, pc}
   129d8:	b	12a4c <__assert_fail@plt+0x166c>
   129dc:	movw	r1, #41911	; 0xa3b7
   129e0:	movt	r1, #1
   129e4:	mov	r0, #0
   129e8:	mov	r2, #5
   129ec:	bl	11170 <dcgettext@plt>
   129f0:	mov	r4, r0
   129f4:	movw	r0, #45484	; 0xb1ac
   129f8:	movt	r0, #2
   129fc:	ldr	r6, [r0]
   12a00:	bl	1129c <__errno_location@plt>
   12a04:	ldr	r5, [r0]
   12a08:	cmp	r6, #0
   12a0c:	bne	12a28 <__assert_fail@plt+0x1648>
   12a10:	movw	r2, #40502	; 0x9e36
   12a14:	movt	r2, #1
   12a18:	mov	r0, #0
   12a1c:	mov	r1, r5
   12a20:	mov	r3, r4
   12a24:	b	12a48 <__assert_fail@plt+0x1668>
   12a28:	mov	r0, r6
   12a2c:	bl	17b14 <__assert_fail@plt+0x6734>
   12a30:	mov	r3, r0
   12a34:	str	r4, [sp]
   12a38:	movw	r2, #41923	; 0xa3c3
   12a3c:	movt	r2, #1
   12a40:	mov	r0, #0
   12a44:	mov	r1, r5
   12a48:	bl	11200 <error@plt>
   12a4c:	movw	r0, #45344	; 0xb120
   12a50:	movt	r0, #2
   12a54:	ldr	r0, [r0]
   12a58:	bl	1114c <_exit@plt>
   12a5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a60:	add	fp, sp, #28
   12a64:	sub	sp, sp, #140	; 0x8c
   12a68:	mov	r8, r2
   12a6c:	mov	r5, r1
   12a70:	mov	r6, r0
   12a74:	cmp	r3, #256	; 0x100
   12a78:	bne	12b64 <__assert_fail@plt+0x1784>
   12a7c:	mov	r0, r6
   12a80:	mov	r1, r5
   12a84:	mov	r2, #2654208	; 0x288000
   12a88:	bl	11284 <openat64@plt>
   12a8c:	mov	r4, r0
   12a90:	cmp	r0, #0
   12a94:	bmi	12ad8 <__assert_fail@plt+0x16f8>
   12a98:	movw	r1, #39594	; 0x9aaa
   12a9c:	movt	r1, #1
   12aa0:	add	r2, sp, #32
   12aa4:	mov	r0, r4
   12aa8:	mov	r3, #4096	; 0x1000
   12aac:	bl	19960 <__assert_fail@plt+0x8580>
   12ab0:	cmp	r0, #0
   12ab4:	beq	12ae0 <__assert_fail@plt+0x1700>
   12ab8:	bl	1129c <__errno_location@plt>
   12abc:	mov	r5, r0
   12ac0:	ldr	r6, [r0]
   12ac4:	mov	r0, r4
   12ac8:	bl	113bc <close@plt>
   12acc:	str	r6, [r5]
   12ad0:	mvn	r7, #0
   12ad4:	b	12b78 <__assert_fail@plt+0x1798>
   12ad8:	mov	r7, r4
   12adc:	b	12b78 <__assert_fail@plt+0x1798>
   12ae0:	ldr	r0, [sp, #48]	; 0x30
   12ae4:	and	r0, r0, #61440	; 0xf000
   12ae8:	cmp	r0, #40960	; 0xa000
   12aec:	bne	12b0c <__assert_fail@plt+0x172c>
   12af0:	mov	r0, r4
   12af4:	bl	113bc <close@plt>
   12af8:	bl	1129c <__errno_location@plt>
   12afc:	mov	r1, #95	; 0x5f
   12b00:	str	r1, [r0]
   12b04:	mvn	r7, #0
   12b08:	b	12b78 <__assert_fail@plt+0x1798>
   12b0c:	str	r4, [sp]
   12b10:	add	r7, sp, #6
   12b14:	movw	r3, #41930	; 0xa3ca
   12b18:	movt	r3, #1
   12b1c:	mov	r0, r7
   12b20:	mov	r1, #1
   12b24:	mov	r2, #26
   12b28:	bl	112a8 <__sprintf_chk@plt>
   12b2c:	mov	r0, r7
   12b30:	mov	r1, r8
   12b34:	bl	1138c <chmod@plt>
   12b38:	mov	r7, r0
   12b3c:	bl	1129c <__errno_location@plt>
   12b40:	mov	r9, r0
   12b44:	ldr	sl, [r0]
   12b48:	mov	r0, r4
   12b4c:	bl	113bc <close@plt>
   12b50:	cmp	r7, #0
   12b54:	beq	12b78 <__assert_fail@plt+0x1798>
   12b58:	cmp	sl, #2
   12b5c:	bne	12b84 <__assert_fail@plt+0x17a4>
   12b60:	mov	r3, #0
   12b64:	mov	r0, r6
   12b68:	mov	r1, r5
   12b6c:	mov	r2, r8
   12b70:	bl	12b8c <__assert_fail@plt+0x17ac>
   12b74:	mov	r7, r0
   12b78:	mov	r0, r7
   12b7c:	sub	sp, fp, #28
   12b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b84:	str	sl, [r9]
   12b88:	b	12b78 <__assert_fail@plt+0x1798>
   12b8c:	b	11290 <fchmodat@plt>
   12b90:	push	{r4, r5, fp, lr}
   12b94:	add	fp, sp, #8
   12b98:	mov	r4, r1
   12b9c:	mov	r5, r0
   12ba0:	bl	12c74 <__assert_fail@plt+0x1894>
   12ba4:	mov	r1, #32
   12ba8:	strh	r1, [r4, #10]
   12bac:	mov	r1, #119	; 0x77
   12bb0:	tst	r5, #2
   12bb4:	mov	r2, #119	; 0x77
   12bb8:	movweq	r2, #45	; 0x2d
   12bbc:	strb	r2, [r4, #8]
   12bc0:	mov	r2, #114	; 0x72
   12bc4:	tst	r5, #4
   12bc8:	mov	r3, #114	; 0x72
   12bcc:	movweq	r3, #45	; 0x2d
   12bd0:	strb	r3, [r4, #7]
   12bd4:	tst	r5, #16
   12bd8:	mov	r3, #119	; 0x77
   12bdc:	movweq	r3, #45	; 0x2d
   12be0:	strb	r3, [r4, #5]
   12be4:	tst	r5, #32
   12be8:	mov	r3, #114	; 0x72
   12bec:	movweq	r3, #45	; 0x2d
   12bf0:	strb	r3, [r4, #4]
   12bf4:	tst	r5, #128	; 0x80
   12bf8:	movweq	r1, #45	; 0x2d
   12bfc:	strb	r1, [r4, #2]
   12c00:	tst	r5, #256	; 0x100
   12c04:	movweq	r2, #45	; 0x2d
   12c08:	strb	r2, [r4, #1]
   12c0c:	strb	r0, [r4]
   12c10:	ands	r0, r5, #1
   12c14:	mov	r0, #45	; 0x2d
   12c18:	mov	r1, #45	; 0x2d
   12c1c:	movwne	r1, #120	; 0x78
   12c20:	mov	r2, #84	; 0x54
   12c24:	movwne	r2, #116	; 0x74
   12c28:	tst	r5, #512	; 0x200
   12c2c:	moveq	r2, r1
   12c30:	strb	r2, [r4, #9]
   12c34:	ands	r1, r5, #8
   12c38:	mov	r1, #45	; 0x2d
   12c3c:	movwne	r1, #120	; 0x78
   12c40:	mov	r2, #83	; 0x53
   12c44:	mov	r3, #83	; 0x53
   12c48:	movwne	r3, #115	; 0x73
   12c4c:	tst	r5, #1024	; 0x400
   12c50:	moveq	r3, r1
   12c54:	strb	r3, [r4, #6]
   12c58:	ands	r1, r5, #64	; 0x40
   12c5c:	movwne	r0, #120	; 0x78
   12c60:	movwne	r2, #115	; 0x73
   12c64:	tst	r5, #2048	; 0x800
   12c68:	moveq	r2, r0
   12c6c:	strb	r2, [r4, #3]
   12c70:	pop	{r4, r5, fp, pc}
   12c74:	and	r0, r0, #61440	; 0xf000
   12c78:	sub	r0, r0, #4096	; 0x1000
   12c7c:	lsr	r1, r0, #12
   12c80:	cmp	r1, #11
   12c84:	bhi	12cd4 <__assert_fail@plt+0x18f4>
   12c88:	mov	r0, #45	; 0x2d
   12c8c:	add	r2, pc, #0
   12c90:	ldr	pc, [r2, r1, lsl #2]
   12c94:	andeq	r2, r1, r4, asr #25
   12c98:	andeq	r2, r1, ip, asr #25
   12c9c:	ldrdeq	r2, [r1], -r4
   12ca0:	ldrdeq	r2, [r1], -ip
   12ca4:	ldrdeq	r2, [r1], -r4
   12ca8:	strdeq	r2, [r1], -r4
   12cac:	ldrdeq	r2, [r1], -r4
   12cb0:	ldrdeq	r2, [r1], -r8
   12cb4:	ldrdeq	r2, [r1], -r4
   12cb8:	andeq	r2, r1, r4, ror #25
   12cbc:	ldrdeq	r2, [r1], -r4
   12cc0:	andeq	r2, r1, ip, ror #25
   12cc4:	mov	r0, #112	; 0x70
   12cc8:	bx	lr
   12ccc:	mov	r0, #99	; 0x63
   12cd0:	bx	lr
   12cd4:	mov	r0, #63	; 0x3f
   12cd8:	bx	lr
   12cdc:	mov	r0, #100	; 0x64
   12ce0:	bx	lr
   12ce4:	mov	r0, #108	; 0x6c
   12ce8:	bx	lr
   12cec:	mov	r0, #115	; 0x73
   12cf0:	bx	lr
   12cf4:	mov	r0, #98	; 0x62
   12cf8:	bx	lr
   12cfc:	ldr	r0, [r0, #16]
   12d00:	b	12b90 <__assert_fail@plt+0x17b0>
   12d04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d08:	add	fp, sp, #28
   12d0c:	sub	sp, sp, #12
   12d10:	cmp	r1, #4096	; 0x1000
   12d14:	bcs	12d30 <__assert_fail@plt+0x1950>
   12d18:	mov	r6, r1
   12d1c:	mov	r7, r0
   12d20:	and	r0, r1, #516	; 0x204
   12d24:	cmp	r0, #516	; 0x204
   12d28:	tstne	r6, #18
   12d2c:	bne	12d4c <__assert_fail@plt+0x196c>
   12d30:	bl	1129c <__errno_location@plt>
   12d34:	mov	r1, #22
   12d38:	str	r1, [r0]
   12d3c:	mov	r4, #0
   12d40:	mov	r0, r4
   12d44:	sub	sp, fp, #28
   12d48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d4c:	mov	sl, r2
   12d50:	mov	r0, #1
   12d54:	mov	r1, #96	; 0x60
   12d58:	bl	18a28 <__assert_fail@plt+0x7648>
   12d5c:	cmp	r0, #0
   12d60:	beq	12d3c <__assert_fail@plt+0x195c>
   12d64:	mov	r4, r0
   12d68:	mvn	r0, #99	; 0x63
   12d6c:	str	r0, [r4, #32]
   12d70:	bic	r0, r6, #516	; 0x204
   12d74:	tst	r6, #2
   12d78:	mov	r1, r6
   12d7c:	orrne	r1, r0, #4
   12d80:	str	sl, [r4, #44]	; 0x2c
   12d84:	str	r1, [r4, #48]	; 0x30
   12d88:	mov	r0, r7
   12d8c:	bl	13010 <__assert_fail@plt+0x1c30>
   12d90:	mov	r1, r0
   12d94:	cmp	r0, #4096	; 0x1000
   12d98:	movls	r1, #4096	; 0x1000
   12d9c:	mov	r0, r4
   12da0:	bl	13058 <__assert_fail@plt+0x1c78>
   12da4:	cmp	r0, #0
   12da8:	beq	13004 <__assert_fail@plt+0x1c24>
   12dac:	ldr	r0, [r7]
   12db0:	cmp	r0, #0
   12db4:	beq	12df4 <__assert_fail@plt+0x1a14>
   12db8:	movw	r1, #39594	; 0x9aaa
   12dbc:	movt	r1, #1
   12dc0:	mov	r0, r4
   12dc4:	mov	r2, #0
   12dc8:	bl	130d4 <__assert_fail@plt+0x1cf4>
   12dcc:	cmp	r0, #0
   12dd0:	beq	12ffc <__assert_fail@plt+0x1c1c>
   12dd4:	mov	r8, r0
   12dd8:	mvn	r0, #0
   12ddc:	str	r0, [r8, #48]	; 0x30
   12de0:	cmp	sl, #0
   12de4:	beq	12e00 <__assert_fail@plt+0x1a20>
   12de8:	ldrb	r0, [r4, #49]	; 0x31
   12dec:	ubfx	r0, r0, #2, #1
   12df0:	b	12e04 <__assert_fail@plt+0x1a24>
   12df4:	mov	r8, #0
   12df8:	cmp	sl, #0
   12dfc:	bne	12de8 <__assert_fail@plt+0x1a08>
   12e00:	mov	r0, #1
   12e04:	ldr	r5, [r7]
   12e08:	cmp	r5, #0
   12e0c:	beq	12f38 <__assert_fail@plt+0x1b58>
   12e10:	and	r1, r6, #2048	; 0x800
   12e14:	str	r1, [sp, #8]
   12e18:	eor	r0, r0, #1
   12e1c:	str	r0, [sp, #4]
   12e20:	mov	r9, #0
   12e24:	mov	r0, #0
   12e28:	str	r0, [sp]
   12e2c:	mov	r6, #0
   12e30:	b	12e68 <__assert_fail@plt+0x1a88>
   12e34:	mov	r0, r4
   12e38:	mov	r1, r5
   12e3c:	mov	r2, #0
   12e40:	bl	13188 <__assert_fail@plt+0x1da8>
   12e44:	strh	r0, [r5, #56]	; 0x38
   12e48:	cmp	sl, #0
   12e4c:	beq	12f10 <__assert_fail@plt+0x1b30>
   12e50:	str	r9, [r5, #8]
   12e54:	mov	r9, r5
   12e58:	add	r6, r6, #1
   12e5c:	ldr	r5, [r7, #4]!
   12e60:	cmp	r5, #0
   12e64:	beq	12f40 <__assert_fail@plt+0x1b60>
   12e68:	mov	r0, r5
   12e6c:	bl	11278 <strlen@plt>
   12e70:	mov	r2, r0
   12e74:	ldr	r0, [sp, #8]
   12e78:	cmp	r0, #0
   12e7c:	bne	12eb4 <__assert_fail@plt+0x1ad4>
   12e80:	cmp	r2, #3
   12e84:	bcc	12eb4 <__assert_fail@plt+0x1ad4>
   12e88:	add	r0, r2, r5
   12e8c:	ldrb	r0, [r0, #-1]
   12e90:	cmp	r0, #47	; 0x2f
   12e94:	bne	12eb4 <__assert_fail@plt+0x1ad4>
   12e98:	sub	r0, r5, #2
   12e9c:	ldrb	r1, [r0, r2]
   12ea0:	cmp	r1, #47	; 0x2f
   12ea4:	bne	12eb4 <__assert_fail@plt+0x1ad4>
   12ea8:	sub	r2, r2, #1
   12eac:	cmp	r2, #1
   12eb0:	bhi	12e9c <__assert_fail@plt+0x1abc>
   12eb4:	mov	r0, r4
   12eb8:	mov	r1, r5
   12ebc:	bl	130d4 <__assert_fail@plt+0x1cf4>
   12ec0:	cmp	r0, #0
   12ec4:	beq	12fec <__assert_fail@plt+0x1c0c>
   12ec8:	mov	r5, r0
   12ecc:	str	r8, [r0, #4]
   12ed0:	mov	r0, #0
   12ed4:	str	r0, [r5, #48]	; 0x30
   12ed8:	add	r0, r5, #168	; 0xa8
   12edc:	str	r0, [r5, #24]
   12ee0:	clz	r0, r9
   12ee4:	lsr	r0, r0, #5
   12ee8:	ldr	r1, [sp, #4]
   12eec:	orrs	r0, r1, r0
   12ef0:	bne	12e34 <__assert_fail@plt+0x1a54>
   12ef4:	mov	r0, #11
   12ef8:	strh	r0, [r5, #56]	; 0x38
   12efc:	mov	r0, r5
   12f00:	mov	r1, #1
   12f04:	bl	13158 <__assert_fail@plt+0x1d78>
   12f08:	cmp	sl, #0
   12f0c:	bne	12e50 <__assert_fail@plt+0x1a70>
   12f10:	mov	r0, #0
   12f14:	str	r0, [r5, #8]
   12f18:	cmp	r9, #0
   12f1c:	beq	12f30 <__assert_fail@plt+0x1b50>
   12f20:	ldr	r0, [sp]
   12f24:	str	r5, [r0, #8]
   12f28:	str	r5, [sp]
   12f2c:	b	12e58 <__assert_fail@plt+0x1a78>
   12f30:	str	r5, [sp]
   12f34:	b	12e54 <__assert_fail@plt+0x1a74>
   12f38:	mov	r9, #0
   12f3c:	b	12f64 <__assert_fail@plt+0x1b84>
   12f40:	cmp	sl, #0
   12f44:	beq	12f64 <__assert_fail@plt+0x1b84>
   12f48:	cmp	r6, #2
   12f4c:	bcc	12f64 <__assert_fail@plt+0x1b84>
   12f50:	mov	r0, r4
   12f54:	mov	r1, r9
   12f58:	mov	r2, r6
   12f5c:	bl	132fc <__assert_fail@plt+0x1f1c>
   12f60:	mov	r9, r0
   12f64:	movw	r1, #39594	; 0x9aaa
   12f68:	movt	r1, #1
   12f6c:	mov	r0, r4
   12f70:	mov	r2, #0
   12f74:	bl	130d4 <__assert_fail@plt+0x1cf4>
   12f78:	str	r0, [r4]
   12f7c:	cmp	r0, #0
   12f80:	beq	12fec <__assert_fail@plt+0x1c0c>
   12f84:	mov	r1, #9
   12f88:	strh	r1, [r0, #56]	; 0x38
   12f8c:	str	r9, [r0, #8]
   12f90:	mov	r1, #1
   12f94:	str	r1, [r0, #48]	; 0x30
   12f98:	mov	r0, r4
   12f9c:	bl	133cc <__assert_fail@plt+0x1fec>
   12fa0:	cmp	r0, #0
   12fa4:	beq	12fec <__assert_fail@plt+0x1c0c>
   12fa8:	ldrh	r0, [r4, #48]	; 0x30
   12fac:	tst	r0, #516	; 0x204
   12fb0:	bne	12fdc <__assert_fail@plt+0x1bfc>
   12fb4:	movw	r1, #41948	; 0xa3dc
   12fb8:	movt	r1, #1
   12fbc:	mov	r0, r4
   12fc0:	bl	13458 <__assert_fail@plt+0x2078>
   12fc4:	str	r0, [r4, #28]
   12fc8:	cmn	r0, #1
   12fcc:	bgt	12fdc <__assert_fail@plt+0x1bfc>
   12fd0:	ldr	r0, [r4, #48]	; 0x30
   12fd4:	orr	r0, r0, #4
   12fd8:	str	r0, [r4, #48]	; 0x30
   12fdc:	add	r0, r4, #60	; 0x3c
   12fe0:	mvn	r1, #0
   12fe4:	bl	15d54 <__assert_fail@plt+0x4974>
   12fe8:	b	12d40 <__assert_fail@plt+0x1960>
   12fec:	mov	r0, r9
   12ff0:	bl	13488 <__assert_fail@plt+0x20a8>
   12ff4:	mov	r0, r8
   12ff8:	bl	1942c <__assert_fail@plt+0x804c>
   12ffc:	ldr	r0, [r4, #24]
   13000:	bl	1942c <__assert_fail@plt+0x804c>
   13004:	mov	r0, r4
   13008:	bl	1942c <__assert_fail@plt+0x804c>
   1300c:	b	12d3c <__assert_fail@plt+0x195c>
   13010:	push	{r4, r5, fp, lr}
   13014:	add	fp, sp, #8
   13018:	mov	r1, r0
   1301c:	ldr	r0, [r0]
   13020:	cmp	r0, #0
   13024:	beq	13050 <__assert_fail@plt+0x1c70>
   13028:	add	r5, r1, #4
   1302c:	mov	r4, #0
   13030:	bl	11278 <strlen@plt>
   13034:	cmp	r0, r4
   13038:	movhi	r4, r0
   1303c:	ldr	r0, [r5], #4
   13040:	cmp	r0, #0
   13044:	bne	13030 <__assert_fail@plt+0x1c50>
   13048:	add	r0, r4, #1
   1304c:	pop	{r4, r5, fp, pc}
   13050:	mov	r0, #1
   13054:	pop	{r4, r5, fp, pc}
   13058:	push	{r4, r5, fp, lr}
   1305c:	add	fp, sp, #8
   13060:	mov	r4, r0
   13064:	ldr	r0, [r0, #36]	; 0x24
   13068:	add	r1, r1, #256	; 0x100
   1306c:	adds	r1, r1, r0
   13070:	bcc	13098 <__assert_fail@plt+0x1cb8>
   13074:	ldr	r0, [r4, #24]
   13078:	bl	1942c <__assert_fail@plt+0x804c>
   1307c:	mov	r5, #0
   13080:	str	r5, [r4, #24]
   13084:	bl	1129c <__errno_location@plt>
   13088:	mov	r1, #36	; 0x24
   1308c:	str	r1, [r0]
   13090:	mov	r0, r5
   13094:	pop	{r4, r5, fp, pc}
   13098:	str	r1, [r4, #36]	; 0x24
   1309c:	ldr	r0, [r4, #24]
   130a0:	bl	18aac <__assert_fail@plt+0x76cc>
   130a4:	cmp	r0, #0
   130a8:	beq	130bc <__assert_fail@plt+0x1cdc>
   130ac:	str	r0, [r4, #24]
   130b0:	mov	r5, #1
   130b4:	mov	r0, r5
   130b8:	pop	{r4, r5, fp, pc}
   130bc:	ldr	r0, [r4, #24]
   130c0:	bl	1942c <__assert_fail@plt+0x804c>
   130c4:	mov	r5, #0
   130c8:	str	r5, [r4, #24]
   130cc:	mov	r0, r5
   130d0:	pop	{r4, r5, fp, pc}
   130d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   130d8:	add	fp, sp, #24
   130dc:	mov	r6, r2
   130e0:	mov	r8, r1
   130e4:	mov	r5, r0
   130e8:	add	r0, r2, #176	; 0xb0
   130ec:	bic	r0, r0, #7
   130f0:	bl	18a7c <__assert_fail@plt+0x769c>
   130f4:	cmp	r0, #0
   130f8:	beq	1314c <__assert_fail@plt+0x1d6c>
   130fc:	mov	r4, r0
   13100:	add	r7, r0, #168	; 0xa8
   13104:	mov	r0, r7
   13108:	mov	r1, r8
   1310c:	mov	r2, r6
   13110:	bl	11158 <memcpy@plt>
   13114:	mov	r0, #0
   13118:	strb	r0, [r7, r6]
   1311c:	str	r6, [r4, #52]	; 0x34
   13120:	str	r5, [r4, #44]	; 0x2c
   13124:	ldr	r1, [r5, #24]
   13128:	str	r0, [r4, #12]
   1312c:	str	r0, [r4, #16]
   13130:	str	r0, [r4, #20]
   13134:	mov	r2, #196608	; 0x30000
   13138:	str	r2, [r4, #58]	; 0x3a
   1313c:	str	r1, [r4, #28]
   13140:	str	r0, [r4, #32]
   13144:	mov	r0, r4
   13148:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1314c:	mov	r4, #0
   13150:	mov	r0, r4
   13154:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13158:	push	{fp, lr}
   1315c:	mov	fp, sp
   13160:	ldrh	r2, [r0, #56]	; 0x38
   13164:	cmp	r2, #11
   13168:	bne	13184 <__assert_fail@plt+0x1da4>
   1316c:	mov	r3, #0
   13170:	mov	r2, #1
   13174:	cmp	r1, #0
   13178:	movwne	r2, #2
   1317c:	strd	r2, [r0, #112]	; 0x70
   13180:	pop	{fp, pc}
   13184:	bl	113b0 <abort@plt>
   13188:	push	{r4, r5, r6, sl, fp, lr}
   1318c:	add	fp, sp, #16
   13190:	mov	r4, r1
   13194:	ldr	r1, [r1, #48]	; 0x30
   13198:	cmp	r1, #0
   1319c:	bne	131ac <__assert_fail@plt+0x1dcc>
   131a0:	ldrb	r1, [r0, #48]	; 0x30
   131a4:	and	r1, r1, #1
   131a8:	orr	r2, r1, r2
   131ac:	add	r5, r4, #64	; 0x40
   131b0:	cmp	r2, #0
   131b4:	ldreq	r1, [r0, #48]	; 0x30
   131b8:	andseq	r1, r1, #2
   131bc:	beq	1320c <__assert_fail@plt+0x1e2c>
   131c0:	ldr	r0, [r4, #24]
   131c4:	mov	r1, r5
   131c8:	bl	19930 <__assert_fail@plt+0x8550>
   131cc:	cmp	r0, #0
   131d0:	beq	13280 <__assert_fail@plt+0x1ea0>
   131d4:	bl	1129c <__errno_location@plt>
   131d8:	mov	r6, r0
   131dc:	ldr	r0, [r0]
   131e0:	cmp	r0, #2
   131e4:	bne	13230 <__assert_fail@plt+0x1e50>
   131e8:	ldr	r0, [r4, #24]
   131ec:	mov	r1, r5
   131f0:	bl	19950 <__assert_fail@plt+0x8570>
   131f4:	cmp	r0, #0
   131f8:	bne	13230 <__assert_fail@plt+0x1e50>
   131fc:	mov	r0, #0
   13200:	str	r0, [r6]
   13204:	mov	r0, #13
   13208:	pop	{r4, r5, r6, sl, fp, pc}
   1320c:	ldr	r1, [r4, #24]
   13210:	ldr	r0, [r0, #32]
   13214:	mov	r2, r5
   13218:	mov	r3, #256	; 0x100
   1321c:	bl	19960 <__assert_fail@plt+0x8580>
   13220:	cmp	r0, #0
   13224:	beq	13280 <__assert_fail@plt+0x1ea0>
   13228:	bl	1129c <__errno_location@plt>
   1322c:	mov	r6, r0
   13230:	ldr	r0, [r6]
   13234:	str	r0, [r4, #32]
   13238:	mov	r0, #0
   1323c:	vmov.i32	q8, #0	; 0x00000000
   13240:	str	r0, [r5, #96]	; 0x60
   13244:	add	r1, r5, #80	; 0x50
   13248:	vst1.64	{d16-d17}, [r1]
   1324c:	add	r1, r5, #64	; 0x40
   13250:	vst1.64	{d16-d17}, [r1]
   13254:	add	r1, r5, #48	; 0x30
   13258:	vst1.64	{d16-d17}, [r1]
   1325c:	add	r1, r5, #32
   13260:	vst1.64	{d16-d17}, [r1]
   13264:	add	r1, r5, #16
   13268:	vst1.64	{d16-d17}, [r1]
   1326c:	mov	r1, #100	; 0x64
   13270:	vst1.64	{d16-d17}, [r5], r1
   13274:	str	r0, [r5]
   13278:	mov	r0, #10
   1327c:	pop	{r4, r5, r6, sl, fp, pc}
   13280:	ldr	r0, [r4, #80]	; 0x50
   13284:	and	r0, r0, #61440	; 0xf000
   13288:	cmp	r0, #40960	; 0xa000
   1328c:	beq	132e4 <__assert_fail@plt+0x1f04>
   13290:	cmp	r0, #32768	; 0x8000
   13294:	beq	132ec <__assert_fail@plt+0x1f0c>
   13298:	cmp	r0, #16384	; 0x4000
   1329c:	bne	132f4 <__assert_fail@plt+0x1f14>
   132a0:	ldrb	r1, [r4, #168]	; 0xa8
   132a4:	mov	r0, #1
   132a8:	cmp	r1, #46	; 0x2e
   132ac:	bne	132f8 <__assert_fail@plt+0x1f18>
   132b0:	ldrb	r1, [r4, #169]	; 0xa9
   132b4:	cmp	r1, #0
   132b8:	beq	132d0 <__assert_fail@plt+0x1ef0>
   132bc:	cmp	r1, #46	; 0x2e
   132c0:	bne	132f8 <__assert_fail@plt+0x1f18>
   132c4:	ldrb	r1, [r4, #170]	; 0xaa
   132c8:	cmp	r1, #0
   132cc:	popne	{r4, r5, r6, sl, fp, pc}
   132d0:	ldr	r1, [r4, #48]	; 0x30
   132d4:	mov	r0, #5
   132d8:	cmp	r1, #0
   132dc:	movweq	r0, #1
   132e0:	pop	{r4, r5, r6, sl, fp, pc}
   132e4:	mov	r0, #12
   132e8:	pop	{r4, r5, r6, sl, fp, pc}
   132ec:	mov	r0, #8
   132f0:	pop	{r4, r5, r6, sl, fp, pc}
   132f4:	mov	r0, #3
   132f8:	pop	{r4, r5, r6, sl, fp, pc}
   132fc:	push	{r4, r5, r6, r7, fp, lr}
   13300:	add	fp, sp, #16
   13304:	mov	r6, r2
   13308:	mov	r4, r1
   1330c:	mov	r5, r0
   13310:	ldr	r7, [r0, #44]	; 0x2c
   13314:	ldr	r0, [r0, #40]	; 0x28
   13318:	cmp	r0, r2
   1331c:	bcs	13348 <__assert_fail@plt+0x1f68>
   13320:	add	r1, r6, #40	; 0x28
   13324:	str	r1, [r5, #40]	; 0x28
   13328:	cmn	r1, #-1073741823	; 0xc0000001
   1332c:	bhi	133b0 <__assert_fail@plt+0x1fd0>
   13330:	ldr	r0, [r5, #8]
   13334:	lsl	r1, r1, #2
   13338:	bl	18aac <__assert_fail@plt+0x76cc>
   1333c:	cmp	r0, #0
   13340:	beq	133b0 <__assert_fail@plt+0x1fd0>
   13344:	str	r0, [r5, #8]
   13348:	cmp	r4, #0
   1334c:	beq	13364 <__assert_fail@plt+0x1f84>
   13350:	ldr	r0, [r5, #8]
   13354:	str	r4, [r0], #4
   13358:	ldr	r4, [r4, #8]
   1335c:	cmp	r4, #0
   13360:	bne	13354 <__assert_fail@plt+0x1f74>
   13364:	ldr	r0, [r5, #8]
   13368:	mov	r1, r6
   1336c:	mov	r2, #4
   13370:	mov	r3, r7
   13374:	bl	11368 <qsort@plt>
   13378:	subs	r1, r6, #1
   1337c:	ldr	r0, [r5, #8]
   13380:	ldr	r4, [r0]
   13384:	beq	1339c <__assert_fail@plt+0x1fbc>
   13388:	ldr	r2, [r0]
   1338c:	ldr	r3, [r0, #4]!
   13390:	str	r3, [r2, #8]
   13394:	subs	r1, r1, #1
   13398:	bne	13388 <__assert_fail@plt+0x1fa8>
   1339c:	ldr	r0, [r0]
   133a0:	mov	r1, #0
   133a4:	str	r1, [r0, #8]
   133a8:	mov	r0, r4
   133ac:	pop	{r4, r5, r6, r7, fp, pc}
   133b0:	ldr	r0, [r5, #8]
   133b4:	bl	1942c <__assert_fail@plt+0x804c>
   133b8:	mov	r0, #0
   133bc:	str	r0, [r5, #40]	; 0x28
   133c0:	str	r0, [r5, #8]
   133c4:	mov	r0, r4
   133c8:	pop	{r4, r5, r6, r7, fp, pc}
   133cc:	push	{r4, r5, fp, lr}
   133d0:	add	fp, sp, #8
   133d4:	sub	sp, sp, #8
   133d8:	mov	r4, r0
   133dc:	ldrh	r0, [r0, #48]	; 0x30
   133e0:	movw	r1, #258	; 0x102
   133e4:	tst	r0, r1
   133e8:	beq	13428 <__assert_fail@plt+0x2048>
   133ec:	movw	r0, #37932	; 0x942c
   133f0:	movt	r0, #1
   133f4:	str	r0, [sp]
   133f8:	mov	r5, #0
   133fc:	movw	r2, #19116	; 0x4aac
   13400:	movt	r2, #1
   13404:	movw	r3, #19148	; 0x4acc
   13408:	movt	r3, #1
   1340c:	mov	r0, #31
   13410:	mov	r1, #0
   13414:	bl	152ac <__assert_fail@plt+0x3ecc>
   13418:	str	r0, [r4, #56]	; 0x38
   1341c:	cmp	r0, #0
   13420:	movne	r5, #1
   13424:	b	1344c <__assert_fail@plt+0x206c>
   13428:	mov	r0, #32
   1342c:	bl	18a7c <__assert_fail@plt+0x769c>
   13430:	str	r0, [r4, #56]	; 0x38
   13434:	cmp	r0, #0
   13438:	beq	13448 <__assert_fail@plt+0x2068>
   1343c:	bl	18ff0 <__assert_fail@plt+0x7c10>
   13440:	mov	r5, #1
   13444:	b	1344c <__assert_fail@plt+0x206c>
   13448:	mov	r5, #0
   1344c:	mov	r0, r5
   13450:	sub	sp, fp, #8
   13454:	pop	{r4, r5, fp, pc}
   13458:	ldr	r3, [r0, #48]	; 0x30
   1345c:	mov	r2, #32768	; 0x8000
   13460:	and	r2, r2, r3, lsl #11
   13464:	orr	r2, r2, #18688	; 0x4900
   13468:	orr	r2, r2, #524288	; 0x80000
   1346c:	tst	r3, #512	; 0x200
   13470:	bne	13480 <__assert_fail@plt+0x20a0>
   13474:	mov	r0, r1
   13478:	mov	r1, r2
   1347c:	b	19388 <__assert_fail@plt+0x7fa8>
   13480:	ldr	r0, [r0, #32]
   13484:	b	163d8 <__assert_fail@plt+0x4ff8>
   13488:	push	{r4, r6, r7, sl, fp, lr}
   1348c:	add	fp, sp, #16
   13490:	cmp	r0, #0
   13494:	beq	134cc <__assert_fail@plt+0x20ec>
   13498:	mov	r4, r0
   1349c:	b	134b4 <__assert_fail@plt+0x20d4>
   134a0:	mov	r0, r4
   134a4:	bl	1942c <__assert_fail@plt+0x804c>
   134a8:	cmp	r6, #0
   134ac:	mov	r4, r6
   134b0:	beq	134cc <__assert_fail@plt+0x20ec>
   134b4:	ldrd	r6, [r4, #8]
   134b8:	cmp	r7, #0
   134bc:	beq	134a0 <__assert_fail@plt+0x20c0>
   134c0:	mov	r0, r7
   134c4:	bl	113d4 <closedir@plt>
   134c8:	b	134a0 <__assert_fail@plt+0x20c0>
   134cc:	pop	{r4, r6, r7, sl, fp, pc}
   134d0:	push	{r4, r5, fp, lr}
   134d4:	add	fp, sp, #8
   134d8:	mov	r4, r0
   134dc:	ldr	r0, [r0]
   134e0:	cmp	r0, #0
   134e4:	beq	13524 <__assert_fail@plt+0x2144>
   134e8:	ldr	r1, [r0, #48]	; 0x30
   134ec:	cmp	r1, #0
   134f0:	bmi	13518 <__assert_fail@plt+0x2138>
   134f4:	ldr	r5, [r0, #8]
   134f8:	cmp	r5, #0
   134fc:	ldreq	r5, [r0, #4]
   13500:	bl	1942c <__assert_fail@plt+0x804c>
   13504:	ldr	r0, [r5, #48]	; 0x30
   13508:	cmn	r0, #1
   1350c:	mov	r0, r5
   13510:	bgt	134f4 <__assert_fail@plt+0x2114>
   13514:	b	1351c <__assert_fail@plt+0x213c>
   13518:	mov	r5, r0
   1351c:	mov	r0, r5
   13520:	bl	1942c <__assert_fail@plt+0x804c>
   13524:	ldr	r0, [r4, #4]
   13528:	cmp	r0, #0
   1352c:	blne	13488 <__assert_fail@plt+0x20a8>
   13530:	ldr	r0, [r4, #8]
   13534:	bl	1942c <__assert_fail@plt+0x804c>
   13538:	ldr	r0, [r4, #24]
   1353c:	bl	1942c <__assert_fail@plt+0x804c>
   13540:	ldr	r0, [r4, #48]	; 0x30
   13544:	tst	r0, #512	; 0x200
   13548:	bne	13574 <__assert_fail@plt+0x2194>
   1354c:	mov	r5, #0
   13550:	tst	r0, #4
   13554:	bne	135b8 <__assert_fail@plt+0x21d8>
   13558:	ldr	r0, [r4, #28]
   1355c:	bl	1135c <fchdir@plt>
   13560:	cmp	r0, #0
   13564:	beq	13594 <__assert_fail@plt+0x21b4>
   13568:	bl	1129c <__errno_location@plt>
   1356c:	ldr	r5, [r0]
   13570:	b	13598 <__assert_fail@plt+0x21b8>
   13574:	ldr	r0, [r4, #32]
   13578:	mov	r5, #0
   1357c:	cmp	r0, #0
   13580:	bmi	135b8 <__assert_fail@plt+0x21d8>
   13584:	bl	113bc <close@plt>
   13588:	cmp	r0, #0
   1358c:	bne	135b0 <__assert_fail@plt+0x21d0>
   13590:	b	135b8 <__assert_fail@plt+0x21d8>
   13594:	mov	r5, #0
   13598:	ldr	r0, [r4, #28]
   1359c:	bl	113bc <close@plt>
   135a0:	cmp	r5, #0
   135a4:	bne	135b8 <__assert_fail@plt+0x21d8>
   135a8:	cmp	r0, #0
   135ac:	beq	135b8 <__assert_fail@plt+0x21d8>
   135b0:	bl	1129c <__errno_location@plt>
   135b4:	ldr	r5, [r0]
   135b8:	add	r0, r4, #60	; 0x3c
   135bc:	bl	13600 <__assert_fail@plt+0x2220>
   135c0:	ldr	r0, [r4, #52]	; 0x34
   135c4:	cmp	r0, #0
   135c8:	beq	135d0 <__assert_fail@plt+0x21f0>
   135cc:	bl	15588 <__assert_fail@plt+0x41a8>
   135d0:	mov	r0, r4
   135d4:	bl	1363c <__assert_fail@plt+0x225c>
   135d8:	mov	r0, r4
   135dc:	bl	1942c <__assert_fail@plt+0x804c>
   135e0:	cmp	r5, #0
   135e4:	beq	135f8 <__assert_fail@plt+0x2218>
   135e8:	bl	1129c <__errno_location@plt>
   135ec:	str	r5, [r0]
   135f0:	mvn	r0, #0
   135f4:	pop	{r4, r5, fp, pc}
   135f8:	mov	r0, #0
   135fc:	pop	{r4, r5, fp, pc}
   13600:	push	{r4, sl, fp, lr}
   13604:	add	fp, sp, #8
   13608:	mov	r4, r0
   1360c:	b	13614 <__assert_fail@plt+0x2234>
   13610:	mov	r0, r4
   13614:	bl	15d80 <__assert_fail@plt+0x49a0>
   13618:	cmp	r0, #0
   1361c:	bne	13638 <__assert_fail@plt+0x2258>
   13620:	mov	r0, r4
   13624:	bl	15dcc <__assert_fail@plt+0x49ec>
   13628:	cmp	r0, #0
   1362c:	bmi	13610 <__assert_fail@plt+0x2230>
   13630:	bl	113bc <close@plt>
   13634:	b	13610 <__assert_fail@plt+0x2230>
   13638:	pop	{r4, sl, fp, pc}
   1363c:	ldrh	r1, [r0, #48]	; 0x30
   13640:	movw	r2, #258	; 0x102
   13644:	tst	r1, r2
   13648:	beq	1365c <__assert_fail@plt+0x227c>
   1364c:	ldr	r0, [r0, #56]	; 0x38
   13650:	cmp	r0, #0
   13654:	bxeq	lr
   13658:	b	15588 <__assert_fail@plt+0x41a8>
   1365c:	ldr	r0, [r0, #56]	; 0x38
   13660:	b	1942c <__assert_fail@plt+0x804c>
   13664:	push	{r4, r5, r6, r7, fp, lr}
   13668:	add	fp, sp, #16
   1366c:	ldr	r6, [r0]
   13670:	mov	r5, #0
   13674:	cmp	r6, #0
   13678:	beq	13c1c <__assert_fail@plt+0x283c>
   1367c:	mov	r4, r0
   13680:	ldr	r1, [r0, #48]	; 0x30
   13684:	tst	r1, #8192	; 0x2000
   13688:	bne	13c1c <__assert_fail@plt+0x283c>
   1368c:	ldrh	r0, [r6, #60]	; 0x3c
   13690:	mov	r2, #3
   13694:	strh	r2, [r6, #60]	; 0x3c
   13698:	cmp	r0, #2
   1369c:	beq	136c4 <__assert_fail@plt+0x22e4>
   136a0:	cmp	r0, #1
   136a4:	bne	1372c <__assert_fail@plt+0x234c>
   136a8:	mov	r0, r4
   136ac:	mov	r1, r6
   136b0:	mov	r2, #0
   136b4:	bl	13188 <__assert_fail@plt+0x1da8>
   136b8:	strh	r0, [r6, #56]	; 0x38
   136bc:	mov	r0, r6
   136c0:	pop	{r4, r5, r6, r7, fp, pc}
   136c4:	ldrh	r2, [r6, #56]	; 0x38
   136c8:	bic	r2, r2, #1
   136cc:	cmp	r2, #12
   136d0:	bne	1372c <__assert_fail@plt+0x234c>
   136d4:	mov	r0, r4
   136d8:	mov	r1, r6
   136dc:	mov	r2, #1
   136e0:	bl	13188 <__assert_fail@plt+0x1da8>
   136e4:	strh	r0, [r6, #56]	; 0x38
   136e8:	cmp	r0, #1
   136ec:	bne	13818 <__assert_fail@plt+0x2438>
   136f0:	ldrb	r0, [r4, #48]	; 0x30
   136f4:	tst	r0, #4
   136f8:	bne	13818 <__assert_fail@plt+0x2438>
   136fc:	movw	r1, #41948	; 0xa3dc
   13700:	movt	r1, #1
   13704:	mov	r0, r4
   13708:	bl	13458 <__assert_fail@plt+0x2078>
   1370c:	str	r0, [r6, #36]	; 0x24
   13710:	cmn	r0, #1
   13714:	ble	13a58 <__assert_fail@plt+0x2678>
   13718:	ldrh	r0, [r6, #58]	; 0x3a
   1371c:	orr	r0, r0, #2
   13720:	strh	r0, [r6, #58]	; 0x3a
   13724:	mov	r5, r6
   13728:	b	13b3c <__assert_fail@plt+0x275c>
   1372c:	ldrh	r2, [r6, #56]	; 0x38
   13730:	cmp	r2, #1
   13734:	bne	13788 <__assert_fail@plt+0x23a8>
   13738:	cmp	r0, #4
   1373c:	bne	13820 <__assert_fail@plt+0x2440>
   13740:	ldrb	r0, [r6, #58]	; 0x3a
   13744:	tst	r0, #2
   13748:	beq	13754 <__assert_fail@plt+0x2374>
   1374c:	ldr	r0, [r6, #36]	; 0x24
   13750:	bl	113bc <close@plt>
   13754:	ldr	r0, [r4, #4]
   13758:	cmp	r0, #0
   1375c:	beq	1376c <__assert_fail@plt+0x238c>
   13760:	bl	13488 <__assert_fail@plt+0x20a8>
   13764:	mov	r0, #0
   13768:	str	r0, [r4, #4]
   1376c:	mov	r0, #6
   13770:	strh	r0, [r6, #56]	; 0x38
   13774:	mov	r0, r4
   13778:	mov	r1, r6
   1377c:	bl	13c28 <__assert_fail@plt+0x2848>
   13780:	mov	r0, r6
   13784:	pop	{r4, r5, r6, r7, fp, pc}
   13788:	ldr	r5, [r6, #8]
   1378c:	cmp	r5, #0
   13790:	beq	138b8 <__assert_fail@plt+0x24d8>
   13794:	str	r5, [r4]
   13798:	mov	r0, r6
   1379c:	bl	1942c <__assert_fail@plt+0x804c>
   137a0:	ldr	r0, [r5, #48]	; 0x30
   137a4:	cmp	r0, #0
   137a8:	beq	13904 <__assert_fail@plt+0x2524>
   137ac:	ldrh	r0, [r5, #60]	; 0x3c
   137b0:	cmp	r0, #4
   137b4:	mov	r6, r5
   137b8:	beq	13788 <__assert_fail@plt+0x23a8>
   137bc:	cmp	r0, #2
   137c0:	bne	13b00 <__assert_fail@plt+0x2720>
   137c4:	mov	r0, r4
   137c8:	mov	r1, r5
   137cc:	mov	r2, #1
   137d0:	bl	13188 <__assert_fail@plt+0x1da8>
   137d4:	strh	r0, [r5, #56]	; 0x38
   137d8:	cmp	r0, #1
   137dc:	bne	13af8 <__assert_fail@plt+0x2718>
   137e0:	ldrb	r0, [r4, #48]	; 0x30
   137e4:	tst	r0, #4
   137e8:	bne	13af8 <__assert_fail@plt+0x2718>
   137ec:	movw	r1, #41948	; 0xa3dc
   137f0:	movt	r1, #1
   137f4:	mov	r0, r4
   137f8:	bl	13458 <__assert_fail@plt+0x2078>
   137fc:	str	r0, [r5, #36]	; 0x24
   13800:	cmn	r0, #1
   13804:	ble	13ae4 <__assert_fail@plt+0x2704>
   13808:	ldrh	r0, [r5, #58]	; 0x3a
   1380c:	orr	r0, r0, #2
   13810:	strh	r0, [r5, #58]	; 0x3a
   13814:	b	13af8 <__assert_fail@plt+0x2718>
   13818:	mov	r5, r6
   1381c:	b	13b3c <__assert_fail@plt+0x275c>
   13820:	tst	r1, #64	; 0x40
   13824:	beq	13848 <__assert_fail@plt+0x2468>
   13828:	ldr	r0, [r4, #16]
   1382c:	ldr	r3, [r4, #20]
   13830:	ldr	r2, [r6, #64]	; 0x40
   13834:	ldr	r5, [r6, #68]	; 0x44
   13838:	eor	r3, r5, r3
   1383c:	eor	r0, r2, r0
   13840:	orrs	r0, r0, r3
   13844:	bne	13740 <__assert_fail@plt+0x2360>
   13848:	ldr	r0, [r4, #4]
   1384c:	cmp	r0, #0
   13850:	beq	13958 <__assert_fail@plt+0x2578>
   13854:	tst	r1, #4096	; 0x1000
   13858:	bne	13944 <__assert_fail@plt+0x2564>
   1385c:	ldr	r3, [r6, #24]
   13860:	mov	r0, r4
   13864:	mov	r1, r6
   13868:	mvn	r2, #0
   1386c:	bl	13d04 <__assert_fail@plt+0x2924>
   13870:	cmp	r0, #0
   13874:	beq	13970 <__assert_fail@plt+0x2590>
   13878:	bl	1129c <__errno_location@plt>
   1387c:	ldr	r0, [r0]
   13880:	str	r0, [r6, #32]
   13884:	ldrh	r0, [r6, #58]	; 0x3a
   13888:	orr	r0, r0, #1
   1388c:	strh	r0, [r6, #58]	; 0x3a
   13890:	ldr	r0, [r4, #4]
   13894:	cmp	r0, #0
   13898:	beq	13970 <__assert_fail@plt+0x2590>
   1389c:	ldmib	r0, {r1, r2}
   138a0:	ldr	r1, [r1, #24]
   138a4:	str	r1, [r0, #24]
   138a8:	cmp	r2, #0
   138ac:	mov	r0, r2
   138b0:	bne	1389c <__assert_fail@plt+0x24bc>
   138b4:	b	13970 <__assert_fail@plt+0x2590>
   138b8:	ldr	r0, [r6, #4]
   138bc:	ldr	r1, [r0, #12]
   138c0:	cmp	r1, #0
   138c4:	beq	139bc <__assert_fail@plt+0x25dc>
   138c8:	str	r0, [r4]
   138cc:	ldr	r1, [r4, #24]
   138d0:	ldr	r0, [r0, #40]	; 0x28
   138d4:	mov	r5, #0
   138d8:	strb	r5, [r1, r0]
   138dc:	mov	r0, r4
   138e0:	mov	r1, #3
   138e4:	bl	13eec <__assert_fail@plt+0x2b0c>
   138e8:	cmp	r0, #0
   138ec:	beq	139b0 <__assert_fail@plt+0x25d0>
   138f0:	mov	r7, r0
   138f4:	mov	r0, r6
   138f8:	bl	1942c <__assert_fail@plt+0x804c>
   138fc:	mov	r5, r7
   13900:	b	13b00 <__assert_fail@plt+0x2720>
   13904:	mov	r0, r4
   13908:	bl	14708 <__assert_fail@plt+0x3328>
   1390c:	cmp	r0, #0
   13910:	beq	13924 <__assert_fail@plt+0x2544>
   13914:	ldr	r0, [r4, #48]	; 0x30
   13918:	orr	r0, r0, #8192	; 0x2000
   1391c:	str	r0, [r4, #48]	; 0x30
   13920:	b	13bc0 <__assert_fail@plt+0x27e0>
   13924:	mov	r0, r4
   13928:	bl	1363c <__assert_fail@plt+0x225c>
   1392c:	mov	r0, r4
   13930:	mov	r1, r5
   13934:	bl	14764 <__assert_fail@plt+0x3384>
   13938:	mov	r0, r4
   1393c:	bl	133cc <__assert_fail@plt+0x1fec>
   13940:	b	13b3c <__assert_fail@plt+0x275c>
   13944:	bic	r1, r1, #4096	; 0x1000
   13948:	str	r1, [r4, #48]	; 0x30
   1394c:	bl	13488 <__assert_fail@plt+0x20a8>
   13950:	mov	r0, #0
   13954:	str	r0, [r4, #4]
   13958:	mov	r0, r4
   1395c:	mov	r1, #3
   13960:	bl	13eec <__assert_fail@plt+0x2b0c>
   13964:	str	r0, [r4, #4]
   13968:	cmp	r0, #0
   1396c:	beq	13980 <__assert_fail@plt+0x25a0>
   13970:	ldr	r5, [r4, #4]
   13974:	mov	r0, #0
   13978:	str	r0, [r4, #4]
   1397c:	b	13b00 <__assert_fail@plt+0x2720>
   13980:	ldrb	r0, [r4, #49]	; 0x31
   13984:	tst	r0, #32
   13988:	mov	r5, #0
   1398c:	bne	13c1c <__assert_fail@plt+0x283c>
   13990:	ldr	r0, [r6, #32]
   13994:	cmp	r0, #0
   13998:	beq	13774 <__assert_fail@plt+0x2394>
   1399c:	ldrh	r0, [r6, #56]	; 0x38
   139a0:	cmp	r0, #4
   139a4:	beq	13774 <__assert_fail@plt+0x2394>
   139a8:	mov	r0, #7
   139ac:	b	13770 <__assert_fail@plt+0x2390>
   139b0:	ldrb	r0, [r4, #49]	; 0x31
   139b4:	tst	r0, #32
   139b8:	bne	13c1c <__assert_fail@plt+0x283c>
   139bc:	ldr	r5, [r6, #4]
   139c0:	str	r5, [r4]
   139c4:	mov	r0, r6
   139c8:	bl	1942c <__assert_fail@plt+0x804c>
   139cc:	ldr	r0, [r5, #48]	; 0x30
   139d0:	cmn	r0, #1
   139d4:	beq	13a38 <__assert_fail@plt+0x2658>
   139d8:	ldrh	r0, [r5, #56]	; 0x38
   139dc:	cmp	r0, #11
   139e0:	beq	13c24 <__assert_fail@plt+0x2844>
   139e4:	ldr	r0, [r5, #40]	; 0x28
   139e8:	ldr	r1, [r4, #24]
   139ec:	mov	r2, #0
   139f0:	strb	r2, [r1, r0]
   139f4:	ldr	r0, [r5, #48]	; 0x30
   139f8:	cmp	r0, #0
   139fc:	beq	13a74 <__assert_fail@plt+0x2694>
   13a00:	ldrh	r0, [r5, #58]	; 0x3a
   13a04:	tst	r0, #2
   13a08:	bne	13aa0 <__assert_fail@plt+0x26c0>
   13a0c:	tst	r0, #1
   13a10:	bne	13be0 <__assert_fail@plt+0x2800>
   13a14:	ldr	r1, [r5, #4]
   13a18:	movw	r3, #41947	; 0xa3db
   13a1c:	movt	r3, #1
   13a20:	mov	r0, r4
   13a24:	mvn	r2, #0
   13a28:	bl	13d04 <__assert_fail@plt+0x2924>
   13a2c:	cmp	r0, #0
   13a30:	bne	13a84 <__assert_fail@plt+0x26a4>
   13a34:	b	13be0 <__assert_fail@plt+0x2800>
   13a38:	mov	r0, r5
   13a3c:	bl	1942c <__assert_fail@plt+0x804c>
   13a40:	bl	1129c <__errno_location@plt>
   13a44:	mov	r5, #0
   13a48:	str	r5, [r0]
   13a4c:	str	r5, [r4]
   13a50:	mov	r0, r5
   13a54:	pop	{r4, r5, r6, r7, fp, pc}
   13a58:	bl	1129c <__errno_location@plt>
   13a5c:	ldr	r0, [r0]
   13a60:	mov	r1, #7
   13a64:	strh	r1, [r6, #56]	; 0x38
   13a68:	str	r0, [r6, #32]
   13a6c:	mov	r5, r6
   13a70:	b	13b3c <__assert_fail@plt+0x275c>
   13a74:	mov	r0, r4
   13a78:	bl	14708 <__assert_fail@plt+0x3328>
   13a7c:	cmp	r0, #0
   13a80:	beq	13be0 <__assert_fail@plt+0x2800>
   13a84:	bl	1129c <__errno_location@plt>
   13a88:	ldr	r0, [r0]
   13a8c:	str	r0, [r5, #32]
   13a90:	ldr	r0, [r4, #48]	; 0x30
   13a94:	orr	r0, r0, #8192	; 0x2000
   13a98:	str	r0, [r4, #48]	; 0x30
   13a9c:	b	13be0 <__assert_fail@plt+0x2800>
   13aa0:	ldr	r0, [r4, #48]	; 0x30
   13aa4:	tst	r0, #4
   13aa8:	bne	13bd8 <__assert_fail@plt+0x27f8>
   13aac:	ldr	r1, [r5, #36]	; 0x24
   13ab0:	tst	r0, #512	; 0x200
   13ab4:	bne	13bcc <__assert_fail@plt+0x27ec>
   13ab8:	mov	r0, r1
   13abc:	bl	1135c <fchdir@plt>
   13ac0:	cmp	r0, #0
   13ac4:	beq	13bd8 <__assert_fail@plt+0x27f8>
   13ac8:	bl	1129c <__errno_location@plt>
   13acc:	ldr	r0, [r0]
   13ad0:	str	r0, [r5, #32]
   13ad4:	ldr	r0, [r4, #48]	; 0x30
   13ad8:	orr	r0, r0, #8192	; 0x2000
   13adc:	str	r0, [r4, #48]	; 0x30
   13ae0:	b	13bd8 <__assert_fail@plt+0x27f8>
   13ae4:	bl	1129c <__errno_location@plt>
   13ae8:	ldr	r0, [r0]
   13aec:	mov	r1, #7
   13af0:	strh	r1, [r5, #56]	; 0x38
   13af4:	str	r0, [r5, #32]
   13af8:	mov	r0, #3
   13afc:	strh	r0, [r5, #60]	; 0x3c
   13b00:	ldr	r0, [r5, #4]
   13b04:	ldr	r1, [r0, #28]
   13b08:	ldr	r0, [r0, #40]	; 0x28
   13b0c:	sub	r2, r0, #1
   13b10:	ldrb	r1, [r1, r2]
   13b14:	cmp	r1, #47	; 0x2f
   13b18:	moveq	r0, r2
   13b1c:	ldr	r1, [r4, #24]
   13b20:	mov	r2, #47	; 0x2f
   13b24:	strb	r2, [r1, r0]!
   13b28:	add	r0, r1, #1
   13b2c:	add	r1, r5, #168	; 0xa8
   13b30:	ldr	r2, [r5, #52]	; 0x34
   13b34:	add	r2, r2, #1
   13b38:	bl	11134 <memmove@plt>
   13b3c:	str	r5, [r4]
   13b40:	ldrh	r0, [r5, #56]	; 0x38
   13b44:	cmp	r0, #11
   13b48:	bne	13b80 <__assert_fail@plt+0x27a0>
   13b4c:	add	r0, r5, #112	; 0x70
   13b50:	ldrd	r0, [r0]
   13b54:	eor	r2, r0, #1
   13b58:	orrs	r2, r2, r1
   13b5c:	beq	13c1c <__assert_fail@plt+0x283c>
   13b60:	eor	r0, r0, #2
   13b64:	orrs	r0, r0, r1
   13b68:	bne	13c24 <__assert_fail@plt+0x2844>
   13b6c:	mov	r0, r4
   13b70:	mov	r1, r5
   13b74:	mov	r2, #0
   13b78:	bl	13188 <__assert_fail@plt+0x1da8>
   13b7c:	strh	r0, [r5, #56]	; 0x38
   13b80:	cmp	r0, #1
   13b84:	bne	13c1c <__assert_fail@plt+0x283c>
   13b88:	ldr	r0, [r5, #48]	; 0x30
   13b8c:	cmp	r0, #0
   13b90:	bne	13ba0 <__assert_fail@plt+0x27c0>
   13b94:	add	r0, r5, #64	; 0x40
   13b98:	ldrd	r0, [r0]
   13b9c:	strd	r0, [r4, #16]
   13ba0:	mov	r0, r4
   13ba4:	mov	r1, r5
   13ba8:	bl	147ec <__assert_fail@plt+0x340c>
   13bac:	cmp	r0, #0
   13bb0:	bne	13c1c <__assert_fail@plt+0x283c>
   13bb4:	bl	1129c <__errno_location@plt>
   13bb8:	mov	r1, #12
   13bbc:	str	r1, [r0]
   13bc0:	mov	r5, #0
   13bc4:	mov	r0, r5
   13bc8:	pop	{r4, r5, r6, r7, fp, pc}
   13bcc:	mov	r0, r4
   13bd0:	mov	r2, #1
   13bd4:	bl	148ac <__assert_fail@plt+0x34cc>
   13bd8:	ldr	r0, [r5, #36]	; 0x24
   13bdc:	bl	113bc <close@plt>
   13be0:	ldrh	r0, [r5, #56]	; 0x38
   13be4:	cmp	r0, #2
   13be8:	beq	13c10 <__assert_fail@plt+0x2830>
   13bec:	ldr	r0, [r5, #32]
   13bf0:	mov	r1, #7
   13bf4:	cmp	r0, #0
   13bf8:	movweq	r1, #6
   13bfc:	strh	r1, [r5, #56]	; 0x38
   13c00:	bne	13c10 <__assert_fail@plt+0x2830>
   13c04:	mov	r0, r4
   13c08:	mov	r1, r5
   13c0c:	bl	13c28 <__assert_fail@plt+0x2848>
   13c10:	ldrb	r0, [r4, #49]	; 0x31
   13c14:	tst	r0, #32
   13c18:	movne	r5, #0
   13c1c:	mov	r0, r5
   13c20:	pop	{r4, r5, r6, r7, fp, pc}
   13c24:	bl	113b0 <abort@plt>
   13c28:	push	{r4, r5, r7, sl, fp, lr}
   13c2c:	add	fp, sp, #16
   13c30:	sub	sp, sp, #24
   13c34:	add	lr, r1, #64	; 0x40
   13c38:	add	r4, r1, #160	; 0xa0
   13c3c:	ldrh	r2, [r0, #48]	; 0x30
   13c40:	movw	r3, #258	; 0x102
   13c44:	tst	r2, r3
   13c48:	beq	13c80 <__assert_fail@plt+0x28a0>
   13c4c:	ldrd	r2, [lr]
   13c50:	stm	sp, {r2, r3}
   13c54:	ldrd	r2, [r4]
   13c58:	str	r3, [sp, #12]
   13c5c:	str	r2, [sp, #8]
   13c60:	ldr	r0, [r0, #56]	; 0x38
   13c64:	mov	r1, sp
   13c68:	bl	15b88 <__assert_fail@plt+0x47a8>
   13c6c:	cmp	r0, #0
   13c70:	beq	13d00 <__assert_fail@plt+0x2920>
   13c74:	bl	1942c <__assert_fail@plt+0x804c>
   13c78:	sub	sp, fp, #16
   13c7c:	pop	{r4, r5, r7, sl, fp, pc}
   13c80:	ldr	r1, [r1, #4]
   13c84:	cmp	r1, #0
   13c88:	beq	13cf8 <__assert_fail@plt+0x2918>
   13c8c:	ldr	r2, [r1, #48]	; 0x30
   13c90:	cmp	r2, #0
   13c94:	bmi	13cf8 <__assert_fail@plt+0x2918>
   13c98:	ldr	ip, [r0, #56]	; 0x38
   13c9c:	ldrd	r2, [ip, #16]
   13ca0:	orrs	r2, r2, r3
   13ca4:	beq	13d00 <__assert_fail@plt+0x2920>
   13ca8:	ldrd	r2, [r4]
   13cac:	ldrd	r4, [ip]
   13cb0:	eor	r3, r5, r3
   13cb4:	eor	r2, r4, r2
   13cb8:	orrs	r2, r2, r3
   13cbc:	bne	13cf8 <__assert_fail@plt+0x2918>
   13cc0:	add	r3, ip, #8
   13cc4:	ldm	lr, {r2, r5}
   13cc8:	ldm	r3, {r4, r7}
   13ccc:	eor	r7, r7, r5
   13cd0:	eor	r2, r4, r2
   13cd4:	orrs	r2, r2, r7
   13cd8:	bne	13cf8 <__assert_fail@plt+0x2918>
   13cdc:	add	r2, r1, #64	; 0x40
   13ce0:	add	r1, r1, #160	; 0xa0
   13ce4:	ldm	r2, {r2, r5}
   13ce8:	stm	r3, {r2, r5}
   13cec:	ldr	r0, [r0, #56]	; 0x38
   13cf0:	ldrd	r2, [r1]
   13cf4:	strd	r2, [r0]
   13cf8:	sub	sp, fp, #16
   13cfc:	pop	{r4, r5, r7, sl, fp, pc}
   13d00:	bl	113b0 <abort@plt>
   13d04:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13d08:	add	fp, sp, #24
   13d0c:	sub	sp, sp, #104	; 0x68
   13d10:	mov	r7, r3
   13d14:	mov	r4, r2
   13d18:	mov	r8, r1
   13d1c:	mov	r5, r0
   13d20:	cmp	r3, #0
   13d24:	beq	13d48 <__assert_fail@plt+0x2968>
   13d28:	movw	r1, #41947	; 0xa3db
   13d2c:	movt	r1, #1
   13d30:	mov	r0, r7
   13d34:	bl	1111c <strcmp@plt>
   13d38:	mov	r6, r0
   13d3c:	cmp	r0, #0
   13d40:	movwne	r6, #1
   13d44:	b	13d4c <__assert_fail@plt+0x296c>
   13d48:	mov	r6, #1
   13d4c:	ldr	r0, [r5, #48]	; 0x30
   13d50:	tst	r0, #4
   13d54:	bne	13dac <__assert_fail@plt+0x29cc>
   13d58:	mov	r9, #0
   13d5c:	cmn	r4, #1
   13d60:	mov	r1, #0
   13d64:	movwgt	r1, #1
   13d68:	orrs	r1, r1, r6
   13d6c:	bne	13dcc <__assert_fail@plt+0x29ec>
   13d70:	ands	r0, r0, #512	; 0x200
   13d74:	beq	13dcc <__assert_fail@plt+0x29ec>
   13d78:	add	r4, r5, #60	; 0x3c
   13d7c:	mov	r0, r4
   13d80:	bl	15d80 <__assert_fail@plt+0x49a0>
   13d84:	cmp	r0, #0
   13d88:	bne	13dd4 <__assert_fail@plt+0x29f4>
   13d8c:	mov	r0, r4
   13d90:	bl	15dcc <__assert_fail@plt+0x49ec>
   13d94:	cmn	r0, #1
   13d98:	ble	13dd4 <__assert_fail@plt+0x29f4>
   13d9c:	mov	r4, r0
   13da0:	mov	r9, #0
   13da4:	mov	r7, #0
   13da8:	b	13df0 <__assert_fail@plt+0x2a10>
   13dac:	mov	r5, #0
   13db0:	cmp	r4, #0
   13db4:	bmi	13ee0 <__assert_fail@plt+0x2b00>
   13db8:	ands	r0, r0, #512	; 0x200
   13dbc:	beq	13ee0 <__assert_fail@plt+0x2b00>
   13dc0:	mov	r0, r4
   13dc4:	bl	113bc <close@plt>
   13dc8:	b	13ee0 <__assert_fail@plt+0x2b00>
   13dcc:	cmn	r4, #1
   13dd0:	bgt	13df0 <__assert_fail@plt+0x2a10>
   13dd4:	mov	r0, r5
   13dd8:	mov	r1, r7
   13ddc:	bl	13458 <__assert_fail@plt+0x2078>
   13de0:	cmp	r0, #0
   13de4:	bmi	13e90 <__assert_fail@plt+0x2ab0>
   13de8:	mov	r4, r0
   13dec:	mov	r9, #1
   13df0:	ldrb	r0, [r5, #48]	; 0x30
   13df4:	tst	r0, #2
   13df8:	bne	13e1c <__assert_fail@plt+0x2a3c>
   13dfc:	cmp	r7, #0
   13e00:	beq	13e6c <__assert_fail@plt+0x2a8c>
   13e04:	movw	r1, #41947	; 0xa3db
   13e08:	movt	r1, #1
   13e0c:	mov	r0, r7
   13e10:	bl	1111c <strcmp@plt>
   13e14:	cmp	r0, #0
   13e18:	bne	13e6c <__assert_fail@plt+0x2a8c>
   13e1c:	mov	r1, sp
   13e20:	mov	r0, r4
   13e24:	bl	19940 <__assert_fail@plt+0x8560>
   13e28:	cmp	r0, #0
   13e2c:	bne	13ebc <__assert_fail@plt+0x2adc>
   13e30:	add	r0, r8, #64	; 0x40
   13e34:	ldrd	r0, [r0]
   13e38:	ldm	sp, {r2, r3}
   13e3c:	eor	r1, r1, r3
   13e40:	eor	r0, r0, r2
   13e44:	orrs	r0, r0, r1
   13e48:	bne	13eb0 <__assert_fail@plt+0x2ad0>
   13e4c:	add	r0, r8, #160	; 0xa0
   13e50:	ldrd	r0, [r0]
   13e54:	ldr	r2, [sp, #96]	; 0x60
   13e58:	ldr	r3, [sp, #100]	; 0x64
   13e5c:	eor	r1, r1, r3
   13e60:	eor	r0, r0, r2
   13e64:	orrs	r0, r0, r1
   13e68:	bne	13eb0 <__assert_fail@plt+0x2ad0>
   13e6c:	ldrb	r0, [r5, #49]	; 0x31
   13e70:	tst	r0, #2
   13e74:	bne	13e98 <__assert_fail@plt+0x2ab8>
   13e78:	mov	r0, r4
   13e7c:	bl	1135c <fchdir@plt>
   13e80:	mov	r5, r0
   13e84:	cmp	r9, #0
   13e88:	bne	13ec8 <__assert_fail@plt+0x2ae8>
   13e8c:	b	13ee0 <__assert_fail@plt+0x2b00>
   13e90:	mvn	r5, #0
   13e94:	b	13ee0 <__assert_fail@plt+0x2b00>
   13e98:	mov	r0, r5
   13e9c:	mov	r1, r4
   13ea0:	mov	r2, r6
   13ea4:	bl	148ac <__assert_fail@plt+0x34cc>
   13ea8:	mov	r5, #0
   13eac:	b	13ee0 <__assert_fail@plt+0x2b00>
   13eb0:	bl	1129c <__errno_location@plt>
   13eb4:	mov	r1, #2
   13eb8:	str	r1, [r0]
   13ebc:	mvn	r5, #0
   13ec0:	cmp	r9, #0
   13ec4:	beq	13ee0 <__assert_fail@plt+0x2b00>
   13ec8:	bl	1129c <__errno_location@plt>
   13ecc:	mov	r6, r0
   13ed0:	ldr	r7, [r0]
   13ed4:	mov	r0, r4
   13ed8:	bl	113bc <close@plt>
   13edc:	str	r7, [r6]
   13ee0:	mov	r0, r5
   13ee4:	sub	sp, fp, #24
   13ee8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13eec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ef0:	add	fp, sp, #28
   13ef4:	sub	sp, sp, #68	; 0x44
   13ef8:	mov	r4, r1
   13efc:	mov	r6, r0
   13f00:	ldr	sl, [r0]
   13f04:	ldr	r7, [sl, #12]
   13f08:	cmp	r7, #0
   13f0c:	beq	14268 <__assert_fail@plt+0x2e88>
   13f10:	mov	r0, r7
   13f14:	bl	11350 <dirfd@plt>
   13f18:	str	r0, [fp, #-32]	; 0xffffffe0
   13f1c:	cmn	r0, #1
   13f20:	ble	1429c <__assert_fail@plt+0x2ebc>
   13f24:	mov	r1, r6
   13f28:	ldr	r0, [r1, #44]!	; 0x2c
   13f2c:	str	r1, [fp, #-40]	; 0xffffffd8
   13f30:	mvn	r1, #0
   13f34:	cmp	r0, #0
   13f38:	movweq	r1, #34464	; 0x86a0
   13f3c:	movteq	r1, #1
   13f40:	str	r1, [sp, #28]
   13f44:	mov	r0, #1
   13f48:	str	r0, [sp, #4]
   13f4c:	str	r4, [sp, #8]
   13f50:	ldr	r1, [sl, #28]
   13f54:	ldr	r0, [sl, #40]	; 0x28
   13f58:	sub	r2, r0, #1
   13f5c:	ldrb	r1, [r1, r2]
   13f60:	cmp	r1, #47	; 0x2f
   13f64:	moveq	r0, r2
   13f68:	ldrb	r1, [r6, #48]	; 0x30
   13f6c:	mov	r9, #0
   13f70:	tst	r1, #4
   13f74:	mov	r1, #0
   13f78:	str	r1, [sp, #44]	; 0x2c
   13f7c:	beq	13f94 <__assert_fail@plt+0x2bb4>
   13f80:	ldr	r1, [r6, #24]
   13f84:	mov	r2, #47	; 0x2f
   13f88:	strb	r2, [r1, r0]!
   13f8c:	add	r1, r1, #1
   13f90:	str	r1, [sp, #44]	; 0x2c
   13f94:	add	r1, r0, #1
   13f98:	ldr	r4, [sl, #12]
   13f9c:	cmp	r4, #0
   13fa0:	str	r1, [fp, #-36]	; 0xffffffdc
   13fa4:	str	r7, [sp, #12]
   13fa8:	beq	142b8 <__assert_fail@plt+0x2ed8>
   13fac:	ldr	r0, [sl, #48]	; 0x30
   13fb0:	add	r0, r0, #1
   13fb4:	str	r0, [sp, #24]
   13fb8:	str	r6, [sp, #36]	; 0x24
   13fbc:	ldr	r0, [r6, #36]	; 0x24
   13fc0:	sub	r0, r0, r1
   13fc4:	str	r0, [sp, #48]	; 0x30
   13fc8:	mov	r6, #0
   13fcc:	bl	1129c <__errno_location@plt>
   13fd0:	str	r0, [sp, #40]	; 0x28
   13fd4:	mov	r9, #0
   13fd8:	mov	r7, #0
   13fdc:	mov	r0, #0
   13fe0:	str	r0, [fp, #-44]	; 0xffffffd4
   13fe4:	mov	r0, #0
   13fe8:	str	r0, [sp, #20]
   13fec:	mov	r0, #0
   13ff0:	str	r0, [sp, #16]
   13ff4:	str	sl, [sp, #32]
   13ff8:	ldr	r0, [sp, #40]	; 0x28
   13ffc:	str	r6, [r0]
   14000:	mov	r0, r4
   14004:	bl	11338 <readdir64@plt>
   14008:	cmp	r0, #0
   1400c:	beq	144e8 <__assert_fail@plt+0x3108>
   14010:	mov	r8, r0
   14014:	mov	r5, r9
   14018:	ldr	r6, [sp, #36]	; 0x24
   1401c:	ldrb	r0, [r6, #48]	; 0x30
   14020:	tst	r0, #32
   14024:	bne	14054 <__assert_fail@plt+0x2c74>
   14028:	ldrb	r0, [r8, #19]
   1402c:	cmp	r0, #46	; 0x2e
   14030:	bne	14054 <__assert_fail@plt+0x2c74>
   14034:	ldrb	r0, [r8, #20]
   14038:	cmp	r0, #0
   1403c:	beq	14258 <__assert_fail@plt+0x2e78>
   14040:	cmp	r0, #46	; 0x2e
   14044:	bne	14054 <__assert_fail@plt+0x2c74>
   14048:	ldrb	r0, [r8, #21]
   1404c:	cmp	r0, #0
   14050:	beq	14258 <__assert_fail@plt+0x2e78>
   14054:	add	r4, r8, #19
   14058:	mov	r0, r4
   1405c:	bl	11278 <strlen@plt>
   14060:	mov	sl, r0
   14064:	mov	r0, r6
   14068:	mov	r1, r4
   1406c:	mov	r2, sl
   14070:	bl	130d4 <__assert_fail@plt+0x1cf4>
   14074:	mov	r9, r0
   14078:	cmp	r0, #0
   1407c:	beq	142cc <__assert_fail@plt+0x2eec>
   14080:	ldr	r0, [sp, #48]	; 0x30
   14084:	cmp	sl, r0
   14088:	bcs	1409c <__assert_fail@plt+0x2cbc>
   1408c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14090:	adds	r0, sl, r2
   14094:	bcc	14104 <__assert_fail@plt+0x2d24>
   14098:	b	14544 <__assert_fail@plt+0x3164>
   1409c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   140a0:	add	r0, sl, r0
   140a4:	add	r1, r0, #1
   140a8:	ldr	r4, [r6, #24]
   140ac:	mov	r0, r6
   140b0:	bl	13058 <__assert_fail@plt+0x1c78>
   140b4:	cmp	r0, #0
   140b8:	beq	142cc <__assert_fail@plt+0x2eec>
   140bc:	ldr	r0, [r6, #24]
   140c0:	cmp	r4, r0
   140c4:	beq	140ec <__assert_fail@plt+0x2d0c>
   140c8:	ldrb	r1, [r6, #48]	; 0x30
   140cc:	tst	r1, #4
   140d0:	ldr	r1, [sp, #44]	; 0x2c
   140d4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   140d8:	addne	r1, r0, r2
   140dc:	str	r1, [sp, #44]	; 0x2c
   140e0:	mov	r0, #1
   140e4:	str	r0, [sp, #16]
   140e8:	b	140f0 <__assert_fail@plt+0x2d10>
   140ec:	ldr	r2, [fp, #-36]	; 0xffffffdc
   140f0:	ldr	r0, [r6, #36]	; 0x24
   140f4:	sub	r0, r0, r2
   140f8:	str	r0, [sp, #48]	; 0x30
   140fc:	adds	r0, sl, r2
   14100:	bcs	14544 <__assert_fail@plt+0x3164>
   14104:	ldr	r1, [sp, #24]
   14108:	str	r1, [r9, #48]	; 0x30
   1410c:	ldr	r1, [r6]
   14110:	str	r0, [r9, #40]	; 0x28
   14114:	str	r1, [r9, #4]
   14118:	ldrd	r0, [r8]
   1411c:	strd	r0, [r9, #160]	; 0xa0
   14120:	ldrb	r0, [r6, #48]	; 0x30
   14124:	tst	r0, #4
   14128:	bne	14138 <__assert_fail@plt+0x2d58>
   1412c:	add	r0, r9, #168	; 0xa8
   14130:	str	r0, [r9, #24]
   14134:	b	14154 <__assert_fail@plt+0x2d74>
   14138:	ldr	r0, [r9, #28]
   1413c:	ldr	r2, [r9, #52]	; 0x34
   14140:	str	r0, [r9, #24]
   14144:	add	r1, r9, #168	; 0xa8
   14148:	add	r2, r2, #1
   1414c:	ldr	r0, [sp, #44]	; 0x2c
   14150:	bl	11134 <memmove@plt>
   14154:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14158:	ldr	r0, [r0]
   1415c:	cmp	r0, #0
   14160:	beq	1418c <__assert_fail@plt+0x2dac>
   14164:	ldrb	r0, [r6, #49]	; 0x31
   14168:	tst	r0, #4
   1416c:	bne	1418c <__assert_fail@plt+0x2dac>
   14170:	mov	r0, r6
   14174:	mov	r1, r9
   14178:	mov	r2, #0
   1417c:	bl	13188 <__assert_fail@plt+0x1da8>
   14180:	strh	r0, [r9, #56]	; 0x38
   14184:	ldr	sl, [sp, #32]
   14188:	b	141e8 <__assert_fail@plt+0x2e08>
   1418c:	add	r0, r9, #64	; 0x40
   14190:	ldr	r1, [r6, #48]	; 0x30
   14194:	mov	r4, #0
   14198:	tst	r1, #8
   1419c:	bne	141a8 <__assert_fail@plt+0x2dc8>
   141a0:	ldr	sl, [sp, #32]
   141a4:	b	141cc <__assert_fail@plt+0x2dec>
   141a8:	ldrb	r2, [r8, #18]
   141ac:	orr	r3, r2, #4
   141b0:	cmp	r3, #4
   141b4:	ldr	sl, [sp, #32]
   141b8:	beq	141cc <__assert_fail@plt+0x2dec>
   141bc:	eor	r2, r2, #10
   141c0:	and	r1, r1, #16
   141c4:	orrs	r4, r1, r2
   141c8:	movwne	r4, #1
   141cc:	mov	r1, #11
   141d0:	strh	r1, [r9, #56]	; 0x38
   141d4:	ldrb	r1, [r8, #18]
   141d8:	bl	14b7c <__assert_fail@plt+0x379c>
   141dc:	eor	r1, r4, #1
   141e0:	mov	r0, r9
   141e4:	bl	13158 <__assert_fail@plt+0x1d78>
   141e8:	mov	r6, #0
   141ec:	str	r6, [r9, #8]
   141f0:	cmp	r5, #0
   141f4:	mov	r4, r9
   141f8:	ldrne	r0, [fp, #-44]	; 0xffffffd4
   141fc:	strne	r9, [r0, #8]
   14200:	movne	r4, r5
   14204:	movw	r0, #10000	; 0x2710
   14208:	cmp	r7, r0
   1420c:	bne	14230 <__assert_fail@plt+0x2e50>
   14210:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14214:	ldr	r0, [r0]
   14218:	cmp	r0, #0
   1421c:	bne	14230 <__assert_fail@plt+0x2e50>
   14220:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14224:	mov	r0, sl
   14228:	bl	14ba0 <__assert_fail@plt+0x37c0>
   1422c:	str	r0, [sp, #20]
   14230:	add	r7, r7, #1
   14234:	ldr	r0, [sp, #28]
   14238:	cmp	r0, r7
   1423c:	bls	1458c <__assert_fail@plt+0x31ac>
   14240:	str	r9, [fp, #-44]	; 0xffffffd4
   14244:	mov	r9, r4
   14248:	ldr	r4, [sl, #12]
   1424c:	cmp	r4, #0
   14250:	bne	13ff8 <__assert_fail@plt+0x2c18>
   14254:	b	14538 <__assert_fail@plt+0x3158>
   14258:	ldr	sl, [sp, #32]
   1425c:	mov	r9, r5
   14260:	mov	r6, #0
   14264:	b	14248 <__assert_fail@plt+0x2e68>
   14268:	ldr	r3, [r6, #48]	; 0x30
   1426c:	and	r1, r3, #516	; 0x204
   14270:	mvn	r0, #99	; 0x63
   14274:	cmp	r1, #512	; 0x200
   14278:	ldreq	r0, [r6, #32]
   1427c:	ldr	r1, [sl, #24]
   14280:	mov	r2, #0
   14284:	tst	r3, #16
   14288:	beq	14320 <__assert_fail@plt+0x2f40>
   1428c:	tst	r3, #1
   14290:	bne	14314 <__assert_fail@plt+0x2f34>
   14294:	mov	r2, #32768	; 0x8000
   14298:	b	14320 <__assert_fail@plt+0x2f40>
   1429c:	ldr	r0, [sl, #12]
   142a0:	bl	113d4 <closedir@plt>
   142a4:	mov	r9, #0
   142a8:	str	r9, [sl, #12]
   142ac:	cmp	r4, #3
   142b0:	beq	14364 <__assert_fail@plt+0x2f84>
   142b4:	b	146fc <__assert_fail@plt+0x331c>
   142b8:	mov	r7, #0
   142bc:	mov	r0, #0
   142c0:	str	r0, [sp, #20]
   142c4:	ldr	r4, [sp, #8]
   142c8:	b	145ac <__assert_fail@plt+0x31cc>
   142cc:	ldr	r7, [sp, #40]	; 0x28
   142d0:	ldr	r4, [r7]
   142d4:	mov	r0, r9
   142d8:	bl	1942c <__assert_fail@plt+0x804c>
   142dc:	mov	r0, r5
   142e0:	bl	13488 <__assert_fail@plt+0x20a8>
   142e4:	ldr	r5, [sp, #32]
   142e8:	ldr	r0, [r5, #12]
   142ec:	bl	113d4 <closedir@plt>
   142f0:	mov	r0, #7
   142f4:	strh	r0, [r5, #56]	; 0x38
   142f8:	mov	r9, #0
   142fc:	str	r9, [r5, #12]
   14300:	ldr	r0, [r6, #48]	; 0x30
   14304:	orr	r0, r0, #8192	; 0x2000
   14308:	str	r0, [r6, #48]	; 0x30
   1430c:	str	r4, [r7]
   14310:	b	146fc <__assert_fail@plt+0x331c>
   14314:	ldr	r3, [sl, #48]	; 0x30
   14318:	cmp	r3, #0
   1431c:	movne	r2, #32768	; 0x8000
   14320:	sub	r3, fp, #32
   14324:	bl	16410 <__assert_fail@plt+0x5030>
   14328:	str	r0, [sl, #12]
   1432c:	cmp	r0, #0
   14330:	beq	14358 <__assert_fail@plt+0x2f78>
   14334:	ldrh	r0, [sl, #56]	; 0x38
   14338:	cmp	r0, #11
   1433c:	bne	1437c <__assert_fail@plt+0x2f9c>
   14340:	mov	r0, r6
   14344:	mov	r1, sl
   14348:	mov	r2, #0
   1434c:	bl	13188 <__assert_fail@plt+0x1da8>
   14350:	strh	r0, [sl, #56]	; 0x38
   14354:	b	143bc <__assert_fail@plt+0x2fdc>
   14358:	mov	r9, #0
   1435c:	cmp	r4, #3
   14360:	bne	146fc <__assert_fail@plt+0x331c>
   14364:	mov	r0, #4
   14368:	strh	r0, [sl, #56]	; 0x38
   1436c:	bl	1129c <__errno_location@plt>
   14370:	ldr	r0, [r0]
   14374:	str	r0, [sl, #32]
   14378:	b	146fc <__assert_fail@plt+0x331c>
   1437c:	ldrb	r0, [r6, #49]	; 0x31
   14380:	tst	r0, #1
   14384:	beq	143bc <__assert_fail@plt+0x2fdc>
   14388:	mov	r0, r6
   1438c:	mov	r1, sl
   14390:	bl	13c28 <__assert_fail@plt+0x2848>
   14394:	mov	r9, #0
   14398:	mov	r0, r6
   1439c:	mov	r1, sl
   143a0:	mov	r2, #0
   143a4:	bl	13188 <__assert_fail@plt+0x1da8>
   143a8:	mov	r0, r6
   143ac:	mov	r1, sl
   143b0:	bl	147ec <__assert_fail@plt+0x340c>
   143b4:	cmp	r0, #0
   143b8:	beq	146bc <__assert_fail@plt+0x32dc>
   143bc:	mov	r1, r6
   143c0:	ldr	r0, [r1, #44]!	; 0x2c
   143c4:	str	r1, [fp, #-40]	; 0xffffffd8
   143c8:	mvn	r1, #0
   143cc:	cmp	r0, #0
   143d0:	movweq	r1, #34464	; 0x86a0
   143d4:	movteq	r1, #1
   143d8:	str	r1, [sp, #28]
   143dc:	mov	r5, #0
   143e0:	cmp	r4, #2
   143e4:	beq	14420 <__assert_fail@plt+0x3040>
   143e8:	ldr	r0, [r6, #48]	; 0x30
   143ec:	and	r1, r0, #56	; 0x38
   143f0:	mov	r0, #0
   143f4:	cmp	r1, #24
   143f8:	bne	1441c <__assert_fail@plt+0x303c>
   143fc:	ldr	r1, [sl, #84]	; 0x54
   14400:	cmp	r1, #2
   14404:	bne	1441c <__assert_fail@plt+0x303c>
   14408:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1440c:	mov	r0, sl
   14410:	bl	14b14 <__assert_fail@plt+0x3734>
   14414:	cmp	r0, #0
   14418:	movwne	r0, #1
   1441c:	eor	r5, r0, #1
   14420:	cmp	r4, #3
   14424:	beq	14438 <__assert_fail@plt+0x3058>
   14428:	cmp	r5, #0
   1442c:	bne	14438 <__assert_fail@plt+0x3058>
   14430:	str	r5, [sp, #4]
   14434:	b	13f4c <__assert_fail@plt+0x2b6c>
   14438:	ldrb	r0, [r6, #49]	; 0x31
   1443c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14440:	tst	r0, #2
   14444:	beq	14460 <__assert_fail@plt+0x3080>
   14448:	mov	r0, r2
   1444c:	movw	r1, #1030	; 0x406
   14450:	mov	r2, #3
   14454:	bl	191a4 <__assert_fail@plt+0x7dc4>
   14458:	mov	r2, r0
   1445c:	str	r0, [fp, #-32]	; 0xffffffe0
   14460:	cmp	r2, #0
   14464:	bmi	14480 <__assert_fail@plt+0x30a0>
   14468:	mov	r0, r6
   1446c:	mov	r1, sl
   14470:	mov	r3, #0
   14474:	bl	13d04 <__assert_fail@plt+0x2924>
   14478:	cmp	r0, #0
   1447c:	beq	13f44 <__assert_fail@plt+0x2b64>
   14480:	subs	r0, r4, #3
   14484:	movwne	r0, #1
   14488:	eor	r1, r5, #1
   1448c:	orrs	r0, r0, r1
   14490:	bne	144a0 <__assert_fail@plt+0x30c0>
   14494:	bl	1129c <__errno_location@plt>
   14498:	ldr	r0, [r0]
   1449c:	str	r0, [sl, #32]
   144a0:	ldrh	r0, [sl, #58]	; 0x3a
   144a4:	orr	r0, r0, #1
   144a8:	strh	r0, [sl, #58]	; 0x3a
   144ac:	ldr	r0, [sl, #12]
   144b0:	bl	113d4 <closedir@plt>
   144b4:	mov	r5, #0
   144b8:	str	r5, [sl, #12]
   144bc:	ldrb	r0, [r6, #49]	; 0x31
   144c0:	tst	r0, #2
   144c4:	beq	144d8 <__assert_fail@plt+0x30f8>
   144c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   144cc:	cmp	r0, #0
   144d0:	bmi	144d8 <__assert_fail@plt+0x30f8>
   144d4:	bl	113bc <close@plt>
   144d8:	mov	r0, #0
   144dc:	str	r0, [sp, #4]
   144e0:	str	r5, [sl, #12]
   144e4:	b	13f4c <__assert_fail@plt+0x2b6c>
   144e8:	ldr	r0, [sp, #40]	; 0x28
   144ec:	ldr	r0, [r0]
   144f0:	cmp	r0, #0
   144f4:	beq	14510 <__assert_fail@plt+0x3130>
   144f8:	str	r0, [sl, #32]
   144fc:	ldr	r0, [sp, #12]
   14500:	orrs	r0, r0, r7
   14504:	mov	r0, #4
   14508:	movwne	r0, #7
   1450c:	strh	r0, [sl, #56]	; 0x38
   14510:	ldr	r0, [sl, #12]
   14514:	cmp	r0, #0
   14518:	ldr	r4, [sp, #8]
   1451c:	beq	1452c <__assert_fail@plt+0x314c>
   14520:	bl	113d4 <closedir@plt>
   14524:	mov	r0, #0
   14528:	str	r0, [sl, #12]
   1452c:	ldr	r0, [sp, #16]
   14530:	tst	r0, #1
   14534:	b	1459c <__assert_fail@plt+0x31bc>
   14538:	ldr	r0, [sp, #16]
   1453c:	tst	r0, #1
   14540:	b	14598 <__assert_fail@plt+0x31b8>
   14544:	mov	r0, r9
   14548:	bl	1942c <__assert_fail@plt+0x804c>
   1454c:	mov	r0, r5
   14550:	bl	13488 <__assert_fail@plt+0x20a8>
   14554:	ldr	r4, [sp, #32]
   14558:	ldr	r0, [r4, #12]
   1455c:	bl	113d4 <closedir@plt>
   14560:	mov	r0, #7
   14564:	strh	r0, [r4, #56]	; 0x38
   14568:	mov	r9, #0
   1456c:	str	r9, [r4, #12]
   14570:	ldr	r0, [r6, #48]	; 0x30
   14574:	orr	r0, r0, #8192	; 0x2000
   14578:	str	r0, [r6, #48]	; 0x30
   1457c:	mov	r0, #36	; 0x24
   14580:	ldr	r1, [sp, #40]	; 0x28
   14584:	str	r0, [r1]
   14588:	b	146fc <__assert_fail@plt+0x331c>
   1458c:	ldr	r0, [sp, #16]
   14590:	tst	r0, #1
   14594:	mov	r9, r4
   14598:	ldr	r4, [sp, #8]
   1459c:	ldr	r6, [sp, #36]	; 0x24
   145a0:	movne	r0, r6
   145a4:	movne	r1, r9
   145a8:	blne	14be4 <__assert_fail@plt+0x3804>
   145ac:	ldrb	r0, [r6, #48]	; 0x30
   145b0:	tst	r0, #4
   145b4:	beq	145e0 <__assert_fail@plt+0x3200>
   145b8:	ldr	r0, [r6, #36]	; 0x24
   145bc:	ldr	r2, [sp, #44]	; 0x2c
   145c0:	sub	r1, r2, #1
   145c4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   145c8:	cmp	r3, r0
   145cc:	moveq	r2, r1
   145d0:	cmp	r7, #0
   145d4:	moveq	r2, r1
   145d8:	mov	r0, #0
   145dc:	strb	r0, [r2]
   145e0:	ldr	r0, [sp, #12]
   145e4:	cmp	r0, #0
   145e8:	ldreq	r0, [sp, #4]
   145ec:	eorseq	r0, r0, #1
   145f0:	beq	1461c <__assert_fail@plt+0x323c>
   145f4:	cmp	r7, #0
   145f8:	bne	14658 <__assert_fail@plt+0x3278>
   145fc:	cmp	r4, #3
   14600:	bne	146f0 <__assert_fail@plt+0x3310>
   14604:	ldrh	r0, [sl, #56]	; 0x38
   14608:	cmp	r0, #4
   1460c:	cmpne	r0, #7
   14610:	movne	r0, #6
   14614:	strhne	r0, [sl, #56]	; 0x38
   14618:	b	146f0 <__assert_fail@plt+0x3310>
   1461c:	cmp	r4, #1
   14620:	cmpne	r7, #0
   14624:	bne	14658 <__assert_fail@plt+0x3278>
   14628:	ldr	r0, [sl, #48]	; 0x30
   1462c:	cmp	r0, #0
   14630:	beq	146cc <__assert_fail@plt+0x32ec>
   14634:	ldr	r1, [sl, #4]
   14638:	movw	r3, #41947	; 0xa3db
   1463c:	movt	r3, #1
   14640:	mov	r0, r6
   14644:	mvn	r2, #0
   14648:	bl	13d04 <__assert_fail@plt+0x2924>
   1464c:	cmp	r0, #0
   14650:	bne	146dc <__assert_fail@plt+0x32fc>
   14654:	b	145f4 <__assert_fail@plt+0x3214>
   14658:	ldr	r0, [sp, #20]
   1465c:	tst	r0, #1
   14660:	beq	1468c <__assert_fail@plt+0x32ac>
   14664:	movw	r0, #19588	; 0x4c84
   14668:	movt	r0, #1
   1466c:	str	r0, [r6, #44]	; 0x2c
   14670:	mov	r0, r6
   14674:	mov	r1, r9
   14678:	mov	r2, r7
   1467c:	bl	132fc <__assert_fail@plt+0x1f1c>
   14680:	mov	r9, r0
   14684:	mov	r0, #0
   14688:	str	r0, [r6, #44]	; 0x2c
   1468c:	cmp	r7, #2
   14690:	bcc	146fc <__assert_fail@plt+0x331c>
   14694:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14698:	ldr	r0, [r0]
   1469c:	cmp	r0, #0
   146a0:	beq	146fc <__assert_fail@plt+0x331c>
   146a4:	mov	r0, r6
   146a8:	mov	r1, r9
   146ac:	mov	r2, r7
   146b0:	bl	132fc <__assert_fail@plt+0x1f1c>
   146b4:	mov	r9, r0
   146b8:	b	146fc <__assert_fail@plt+0x331c>
   146bc:	bl	1129c <__errno_location@plt>
   146c0:	mov	r1, #12
   146c4:	str	r1, [r0]
   146c8:	b	146fc <__assert_fail@plt+0x331c>
   146cc:	mov	r0, r6
   146d0:	bl	14708 <__assert_fail@plt+0x3328>
   146d4:	cmp	r0, #0
   146d8:	beq	145f4 <__assert_fail@plt+0x3214>
   146dc:	mov	r0, #7
   146e0:	strh	r0, [sl, #56]	; 0x38
   146e4:	ldr	r0, [r6, #48]	; 0x30
   146e8:	orr	r0, r0, #8192	; 0x2000
   146ec:	str	r0, [r6, #48]	; 0x30
   146f0:	mov	r0, r9
   146f4:	bl	13488 <__assert_fail@plt+0x20a8>
   146f8:	mov	r9, #0
   146fc:	mov	r0, r9
   14700:	sub	sp, fp, #28
   14704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14708:	push	{r4, r5, fp, lr}
   1470c:	add	fp, sp, #8
   14710:	mov	r4, r0
   14714:	ldr	r0, [r0, #48]	; 0x30
   14718:	mov	r5, #0
   1471c:	tst	r0, #4
   14720:	bne	14754 <__assert_fail@plt+0x3374>
   14724:	tst	r0, #512	; 0x200
   14728:	bne	14744 <__assert_fail@plt+0x3364>
   1472c:	ldr	r0, [r4, #28]
   14730:	bl	1135c <fchdir@plt>
   14734:	mov	r5, r0
   14738:	cmp	r0, #0
   1473c:	movwne	r5, #1
   14740:	b	14754 <__assert_fail@plt+0x3374>
   14744:	mov	r0, r4
   14748:	mvn	r1, #99	; 0x63
   1474c:	mov	r2, #1
   14750:	bl	148ac <__assert_fail@plt+0x34cc>
   14754:	add	r0, r4, #60	; 0x3c
   14758:	bl	13600 <__assert_fail@plt+0x2220>
   1475c:	mov	r0, r5
   14760:	pop	{r4, r5, fp, pc}
   14764:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14768:	add	fp, sp, #24
   1476c:	mov	r4, r1
   14770:	mov	r8, r0
   14774:	ldr	r1, [r1, #52]	; 0x34
   14778:	str	r1, [r4, #40]	; 0x28
   1477c:	ldr	r0, [r0, #24]
   14780:	add	r6, r4, #168	; 0xa8
   14784:	add	r2, r1, #1
   14788:	mov	r1, r6
   1478c:	bl	11134 <memmove@plt>
   14790:	mov	r0, r6
   14794:	mov	r1, #47	; 0x2f
   14798:	bl	11320 <strrchr@plt>
   1479c:	cmp	r0, #0
   147a0:	beq	147dc <__assert_fail@plt+0x33fc>
   147a4:	cmp	r0, r6
   147a8:	bne	147b8 <__assert_fail@plt+0x33d8>
   147ac:	ldrb	r1, [r0, #1]
   147b0:	cmp	r1, #0
   147b4:	beq	147dc <__assert_fail@plt+0x33fc>
   147b8:	add	r7, r0, #1
   147bc:	mov	r0, r7
   147c0:	bl	11278 <strlen@plt>
   147c4:	mov	r5, r0
   147c8:	add	r2, r0, #1
   147cc:	mov	r0, r6
   147d0:	mov	r1, r7
   147d4:	bl	11134 <memmove@plt>
   147d8:	str	r5, [r4, #52]	; 0x34
   147dc:	ldr	r0, [r8, #24]
   147e0:	str	r0, [r4, #24]
   147e4:	str	r0, [r4, #28]
   147e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   147ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   147f0:	add	fp, sp, #24
   147f4:	mov	r4, r1
   147f8:	mov	r6, r0
   147fc:	add	r5, r1, #64	; 0x40
   14800:	ldrh	r0, [r0, #48]	; 0x30
   14804:	movw	r1, #258	; 0x102
   14808:	tst	r0, r1
   1480c:	beq	14884 <__assert_fail@plt+0x34a4>
   14810:	mov	r0, #24
   14814:	bl	18a7c <__assert_fail@plt+0x769c>
   14818:	mov	r8, #0
   1481c:	cmp	r0, #0
   14820:	beq	148a4 <__assert_fail@plt+0x34c4>
   14824:	mov	r7, r0
   14828:	add	r0, r4, #160	; 0xa0
   1482c:	ldrd	r2, [r5]
   14830:	stm	r7, {r2, r3}
   14834:	ldrd	r0, [r0]
   14838:	add	r2, r7, #8
   1483c:	stm	r2, {r0, r1, r4}
   14840:	ldr	r0, [r6, #56]	; 0x38
   14844:	mov	r1, r7
   14848:	bl	15b48 <__assert_fail@plt+0x4768>
   1484c:	cmp	r0, r7
   14850:	beq	14878 <__assert_fail@plt+0x3498>
   14854:	mov	r5, r0
   14858:	mov	r0, r7
   1485c:	bl	1942c <__assert_fail@plt+0x804c>
   14860:	cmp	r5, #0
   14864:	beq	148a4 <__assert_fail@plt+0x34c4>
   14868:	ldr	r0, [r5, #16]
   1486c:	mov	r1, #2
   14870:	strh	r1, [r4, #56]	; 0x38
   14874:	str	r0, [r4]
   14878:	mov	r8, #1
   1487c:	mov	r0, r8
   14880:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14884:	ldr	r0, [r6, #56]	; 0x38
   14888:	mov	r1, r5
   1488c:	bl	1900c <__assert_fail@plt+0x7c2c>
   14890:	mov	r8, #1
   14894:	cmp	r0, #0
   14898:	movne	r0, #2
   1489c:	strhne	r0, [r4, #56]	; 0x38
   148a0:	strne	r4, [r4]
   148a4:	mov	r0, r8
   148a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148ac:	push	{r4, r5, fp, lr}
   148b0:	add	fp, sp, #8
   148b4:	mov	r4, r1
   148b8:	mov	r5, r0
   148bc:	ldr	r1, [r0, #32]
   148c0:	cmp	r1, r4
   148c4:	bne	148d0 <__assert_fail@plt+0x34f0>
   148c8:	cmn	r1, #100	; 0x64
   148cc:	bne	14910 <__assert_fail@plt+0x3530>
   148d0:	cmp	r2, #0
   148d4:	beq	148ec <__assert_fail@plt+0x350c>
   148d8:	add	r0, r5, #60	; 0x3c
   148dc:	bl	15d88 <__assert_fail@plt+0x49a8>
   148e0:	cmp	r0, #0
   148e4:	bpl	14904 <__assert_fail@plt+0x3524>
   148e8:	b	14908 <__assert_fail@plt+0x3528>
   148ec:	cmp	r1, #0
   148f0:	bmi	14908 <__assert_fail@plt+0x3528>
   148f4:	ldr	r0, [r5, #48]	; 0x30
   148f8:	ands	r0, r0, #4
   148fc:	bne	14908 <__assert_fail@plt+0x3528>
   14900:	mov	r0, r1
   14904:	bl	113bc <close@plt>
   14908:	str	r4, [r5, #32]
   1490c:	pop	{r4, r5, fp, pc}
   14910:	bl	113b0 <abort@plt>
   14914:	push	{fp, lr}
   14918:	mov	fp, sp
   1491c:	cmp	r2, #5
   14920:	bcc	14938 <__assert_fail@plt+0x3558>
   14924:	bl	1129c <__errno_location@plt>
   14928:	mov	r1, #22
   1492c:	str	r1, [r0]
   14930:	mov	r0, #1
   14934:	pop	{fp, pc}
   14938:	strh	r2, [r1, #60]	; 0x3c
   1493c:	mov	r0, #0
   14940:	pop	{fp, pc}
   14944:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14948:	add	fp, sp, #28
   1494c:	sub	sp, sp, #4
   14950:	mov	r5, r0
   14954:	mvn	r0, #4096	; 0x1000
   14958:	tst	r1, r0
   1495c:	beq	14974 <__assert_fail@plt+0x3594>
   14960:	bl	1129c <__errno_location@plt>
   14964:	mov	r1, #22
   14968:	str	r1, [r0]
   1496c:	mov	r4, #0
   14970:	b	14a70 <__assert_fail@plt+0x3690>
   14974:	mov	r7, r1
   14978:	ldr	r6, [r5]
   1497c:	bl	1129c <__errno_location@plt>
   14980:	mov	sl, r0
   14984:	mov	r4, #0
   14988:	str	r4, [r0]
   1498c:	ldrb	r0, [r5, #49]	; 0x31
   14990:	tst	r0, #32
   14994:	bne	14a70 <__assert_fail@plt+0x3690>
   14998:	ldrh	r0, [r6, #56]	; 0x38
   1499c:	cmp	r0, #1
   149a0:	beq	149b0 <__assert_fail@plt+0x35d0>
   149a4:	cmp	r0, #9
   149a8:	ldreq	r4, [r6, #8]
   149ac:	b	14a70 <__assert_fail@plt+0x3690>
   149b0:	ldr	r0, [r5, #4]
   149b4:	cmp	r0, #0
   149b8:	blne	13488 <__assert_fail@plt+0x20a8>
   149bc:	mov	r9, #1
   149c0:	cmp	r7, #4096	; 0x1000
   149c4:	bne	149d8 <__assert_fail@plt+0x35f8>
   149c8:	ldr	r0, [r5, #48]	; 0x30
   149cc:	orr	r0, r0, #4096	; 0x1000
   149d0:	str	r0, [r5, #48]	; 0x30
   149d4:	mov	r9, #2
   149d8:	ldr	r0, [r6, #48]	; 0x30
   149dc:	cmp	r0, #0
   149e0:	bne	14a5c <__assert_fail@plt+0x367c>
   149e4:	ldr	r0, [r6, #24]
   149e8:	ldrb	r0, [r0]
   149ec:	cmp	r0, #47	; 0x2f
   149f0:	beq	14a5c <__assert_fail@plt+0x367c>
   149f4:	ldrb	r0, [r5, #48]	; 0x30
   149f8:	tst	r0, #4
   149fc:	bne	14a5c <__assert_fail@plt+0x367c>
   14a00:	movw	r1, #41948	; 0xa3dc
   14a04:	movt	r1, #1
   14a08:	mov	r0, r5
   14a0c:	bl	13458 <__assert_fail@plt+0x2078>
   14a10:	cmn	r0, #1
   14a14:	ble	14a7c <__assert_fail@plt+0x369c>
   14a18:	mov	r8, r0
   14a1c:	mov	r0, r5
   14a20:	mov	r1, r9
   14a24:	bl	13eec <__assert_fail@plt+0x2b0c>
   14a28:	str	r0, [r5, #4]
   14a2c:	ldrb	r0, [r5, #49]	; 0x31
   14a30:	tst	r0, #2
   14a34:	bne	14a88 <__assert_fail@plt+0x36a8>
   14a38:	mov	r0, r8
   14a3c:	bl	1135c <fchdir@plt>
   14a40:	cmp	r0, #0
   14a44:	beq	14a9c <__assert_fail@plt+0x36bc>
   14a48:	ldr	r5, [sl]
   14a4c:	mov	r0, r8
   14a50:	bl	113bc <close@plt>
   14a54:	str	r5, [sl]
   14a58:	b	14a70 <__assert_fail@plt+0x3690>
   14a5c:	mov	r0, r5
   14a60:	mov	r1, r9
   14a64:	bl	13eec <__assert_fail@plt+0x2b0c>
   14a68:	mov	r4, r0
   14a6c:	str	r0, [r5, #4]
   14a70:	mov	r0, r4
   14a74:	sub	sp, fp, #28
   14a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a7c:	mov	r4, #0
   14a80:	str	r4, [r5, #4]
   14a84:	b	14a70 <__assert_fail@plt+0x3690>
   14a88:	mov	r0, r5
   14a8c:	mov	r1, r8
   14a90:	mov	r2, #1
   14a94:	bl	148ac <__assert_fail@plt+0x34cc>
   14a98:	b	14aa4 <__assert_fail@plt+0x36c4>
   14a9c:	mov	r0, r8
   14aa0:	bl	113bc <close@plt>
   14aa4:	ldr	r4, [r5, #4]
   14aa8:	b	14a70 <__assert_fail@plt+0x3690>
   14aac:	push	{fp, lr}
   14ab0:	mov	fp, sp
   14ab4:	mov	r2, r1
   14ab8:	ldrd	r0, [r0, #8]
   14abc:	mov	r3, #0
   14ac0:	bl	19740 <__assert_fail@plt+0x8360>
   14ac4:	mov	r0, r2
   14ac8:	pop	{fp, pc}
   14acc:	push	{r4, r5, fp, lr}
   14ad0:	add	fp, sp, #8
   14ad4:	ldrd	r2, [r1, #8]
   14ad8:	ldrd	r4, [r0, #8]
   14adc:	eor	r3, r5, r3
   14ae0:	eor	r2, r4, r2
   14ae4:	orrs	r2, r2, r3
   14ae8:	mov	r2, #0
   14aec:	bne	14b0c <__assert_fail@plt+0x372c>
   14af0:	ldrd	r2, [r1]
   14af4:	ldrd	r0, [r0]
   14af8:	eor	r1, r1, r3
   14afc:	eor	r0, r0, r2
   14b00:	orr	r0, r0, r1
   14b04:	clz	r0, r0
   14b08:	lsr	r2, r0, #5
   14b0c:	mov	r0, r2
   14b10:	pop	{r4, r5, fp, pc}
   14b14:	push	{fp, lr}
   14b18:	mov	fp, sp
   14b1c:	bl	14cbc <__assert_fail@plt+0x38dc>
   14b20:	mov	r1, r0
   14b24:	mov	r0, #0
   14b28:	movw	r2, #26984	; 0x6968
   14b2c:	cmp	r1, r2
   14b30:	ble	14b60 <__assert_fail@plt+0x3780>
   14b34:	movw	r2, #26985	; 0x6969
   14b38:	cmp	r1, r2
   14b3c:	movwne	r2, #40864	; 0x9fa0
   14b40:	cmpne	r1, r2
   14b44:	beq	14b78 <__assert_fail@plt+0x3798>
   14b48:	movw	r2, #16719	; 0x414f
   14b4c:	movt	r2, #21318	; 0x5346
   14b50:	cmp	r1, r2
   14b54:	popeq	{fp, pc}
   14b58:	mov	r0, #1
   14b5c:	pop	{fp, pc}
   14b60:	movw	r2, #19778	; 0x4d42
   14b64:	movt	r2, #65363	; 0xff53
   14b68:	cmp	r1, r2
   14b6c:	beq	14b78 <__assert_fail@plt+0x3798>
   14b70:	cmp	r1, #0
   14b74:	movne	r0, #1
   14b78:	pop	{fp, pc}
   14b7c:	sub	r2, r1, #1
   14b80:	mov	r1, #0
   14b84:	cmp	r2, #11
   14b88:	bhi	14b98 <__assert_fail@plt+0x37b8>
   14b8c:	movw	r1, #41952	; 0xa3e0
   14b90:	movt	r1, #1
   14b94:	ldr	r1, [r1, r2, lsl #2]
   14b98:	str	r1, [r0, #16]
   14b9c:	bx	lr
   14ba0:	push	{fp, lr}
   14ba4:	mov	fp, sp
   14ba8:	bl	14cbc <__assert_fail@plt+0x38dc>
   14bac:	mov	r1, r0
   14bb0:	mov	r0, #0
   14bb4:	movw	r2, #19778	; 0x4d42
   14bb8:	movt	r2, #65363	; 0xff53
   14bbc:	cmp	r1, r2
   14bc0:	movwne	r2, #26985	; 0x6969
   14bc4:	cmpne	r1, r2
   14bc8:	bne	14bd0 <__assert_fail@plt+0x37f0>
   14bcc:	pop	{fp, pc}
   14bd0:	movw	r2, #6548	; 0x1994
   14bd4:	movt	r2, #258	; 0x102
   14bd8:	cmp	r1, r2
   14bdc:	movne	r0, #1
   14be0:	pop	{fp, pc}
   14be4:	ldr	r2, [r0, #4]
   14be8:	ldr	ip, [r0, #24]
   14bec:	cmp	r2, #0
   14bf0:	bne	14c08 <__assert_fail@plt+0x3828>
   14bf4:	b	14c2c <__assert_fail@plt+0x384c>
   14bf8:	str	ip, [r2, #28]
   14bfc:	ldr	r2, [r2, #8]
   14c00:	cmp	r2, #0
   14c04:	beq	14c2c <__assert_fail@plt+0x384c>
   14c08:	ldr	r3, [r2, #24]
   14c0c:	add	r0, r2, #168	; 0xa8
   14c10:	cmp	r3, r0
   14c14:	beq	14bf8 <__assert_fail@plt+0x3818>
   14c18:	ldr	r0, [r2, #28]
   14c1c:	sub	r0, r3, r0
   14c20:	add	r0, ip, r0
   14c24:	str	r0, [r2, #24]
   14c28:	b	14bf8 <__assert_fail@plt+0x3818>
   14c2c:	ldr	r2, [r1, #48]	; 0x30
   14c30:	cmp	r2, #0
   14c34:	bxmi	lr
   14c38:	b	14c5c <__assert_fail@plt+0x387c>
   14c3c:	str	ip, [r1, #28]
   14c40:	ldr	r2, [r1, #8]
   14c44:	cmp	r2, #0
   14c48:	ldreq	r2, [r1, #4]
   14c4c:	ldr	r0, [r2, #48]	; 0x30
   14c50:	cmn	r0, #1
   14c54:	mov	r1, r2
   14c58:	ble	14c80 <__assert_fail@plt+0x38a0>
   14c5c:	ldr	r2, [r1, #24]
   14c60:	add	r0, r1, #168	; 0xa8
   14c64:	cmp	r2, r0
   14c68:	beq	14c3c <__assert_fail@plt+0x385c>
   14c6c:	ldr	r0, [r1, #28]
   14c70:	sub	r0, r2, r0
   14c74:	add	r0, ip, r0
   14c78:	str	r0, [r1, #24]
   14c7c:	b	14c3c <__assert_fail@plt+0x385c>
   14c80:	bx	lr
   14c84:	push	{r4, r5, fp, lr}
   14c88:	add	fp, sp, #8
   14c8c:	ldr	r0, [r0]
   14c90:	ldrd	r2, [r0, #160]	; 0xa0
   14c94:	ldr	r0, [r1]
   14c98:	ldrd	r4, [r0, #160]	; 0xa0
   14c9c:	mov	r0, #0
   14ca0:	subs	r1, r4, r2
   14ca4:	sbcs	r1, r5, r3
   14ca8:	movwcc	r0, #1
   14cac:	subs	r1, r2, r4
   14cb0:	sbcs	r1, r3, r5
   14cb4:	subcc	r0, r0, #1
   14cb8:	pop	{r4, r5, fp, pc}
   14cbc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14cc0:	add	fp, sp, #24
   14cc4:	sub	sp, sp, #96	; 0x60
   14cc8:	mov	r4, r0
   14ccc:	ldr	r7, [r0, #44]	; 0x2c
   14cd0:	ldrb	r0, [r7, #49]	; 0x31
   14cd4:	mov	r5, #0
   14cd8:	tst	r0, #2
   14cdc:	beq	14dd8 <__assert_fail@plt+0x39f8>
   14ce0:	mov	r9, r1
   14ce4:	ldr	r6, [r7, #52]	; 0x34
   14ce8:	cmp	r6, #0
   14cec:	bne	14d2c <__assert_fail@plt+0x394c>
   14cf0:	movw	r0, #37932	; 0x942c
   14cf4:	movt	r0, #1
   14cf8:	str	r0, [sp]
   14cfc:	mov	r8, #0
   14d00:	movw	r2, #19940	; 0x4de4
   14d04:	movt	r2, #1
   14d08:	movw	r3, #19972	; 0x4e04
   14d0c:	movt	r3, #1
   14d10:	mov	r0, #13
   14d14:	mov	r1, #0
   14d18:	bl	152ac <__assert_fail@plt+0x3ecc>
   14d1c:	mov	r6, r0
   14d20:	str	r0, [r7, #52]	; 0x34
   14d24:	cmp	r0, #0
   14d28:	beq	14d64 <__assert_fail@plt+0x3984>
   14d2c:	ldrd	r0, [r4, #64]	; 0x40
   14d30:	str	r1, [sp, #12]
   14d34:	str	r0, [sp, #8]
   14d38:	add	r1, sp, #8
   14d3c:	mov	r0, r6
   14d40:	bl	15000 <__assert_fail@plt+0x3c20>
   14d44:	cmp	r0, #0
   14d48:	beq	14d54 <__assert_fail@plt+0x3974>
   14d4c:	ldr	r5, [r0, #8]
   14d50:	b	14dd8 <__assert_fail@plt+0x39f8>
   14d54:	mov	r8, #1
   14d58:	cmp	r9, #0
   14d5c:	bpl	14d70 <__assert_fail@plt+0x3990>
   14d60:	b	14dd8 <__assert_fail@plt+0x39f8>
   14d64:	mov	r6, #0
   14d68:	cmp	r9, #0
   14d6c:	bmi	14dd8 <__assert_fail@plt+0x39f8>
   14d70:	add	r1, sp, #8
   14d74:	mov	r0, r9
   14d78:	bl	110ec <fstatfs64@plt>
   14d7c:	cmp	r0, #0
   14d80:	bne	14dd8 <__assert_fail@plt+0x39f8>
   14d84:	cmp	r8, #0
   14d88:	beq	14dd4 <__assert_fail@plt+0x39f4>
   14d8c:	mov	r0, #16
   14d90:	bl	18a7c <__assert_fail@plt+0x769c>
   14d94:	cmp	r0, #0
   14d98:	beq	14dd4 <__assert_fail@plt+0x39f4>
   14d9c:	mov	r5, r0
   14da0:	ldrd	r0, [r4, #64]	; 0x40
   14da4:	ldr	r2, [sp, #8]
   14da8:	stm	r5, {r0, r1, r2}
   14dac:	mov	r0, r6
   14db0:	mov	r1, r5
   14db4:	bl	15b48 <__assert_fail@plt+0x4768>
   14db8:	cmp	r0, #0
   14dbc:	beq	14dcc <__assert_fail@plt+0x39ec>
   14dc0:	cmp	r0, r5
   14dc4:	beq	14dd4 <__assert_fail@plt+0x39f4>
   14dc8:	bl	113b0 <abort@plt>
   14dcc:	mov	r0, r5
   14dd0:	bl	1942c <__assert_fail@plt+0x804c>
   14dd4:	ldr	r5, [sp, #8]
   14dd8:	mov	r0, r5
   14ddc:	sub	sp, fp, #24
   14de0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14de4:	push	{fp, lr}
   14de8:	mov	fp, sp
   14dec:	mov	r2, r1
   14df0:	ldrd	r0, [r0]
   14df4:	mov	r3, #0
   14df8:	bl	19740 <__assert_fail@plt+0x8360>
   14dfc:	mov	r0, r2
   14e00:	pop	{fp, pc}
   14e04:	ldrd	r2, [r1]
   14e08:	ldrd	r0, [r0]
   14e0c:	eor	r1, r1, r3
   14e10:	eor	r0, r0, r2
   14e14:	orr	r0, r0, r1
   14e18:	clz	r0, r0
   14e1c:	lsr	r0, r0, #5
   14e20:	bx	lr
   14e24:	andeq	r0, r0, r0
   14e28:	ldr	r0, [r0, #8]
   14e2c:	bx	lr
   14e30:	ldr	r0, [r0, #12]
   14e34:	bx	lr
   14e38:	ldr	r0, [r0, #16]
   14e3c:	bx	lr
   14e40:	mov	r2, r0
   14e44:	ldm	r0, {r1, r3}
   14e48:	mov	r0, #0
   14e4c:	cmp	r1, r3
   14e50:	bxcs	lr
   14e54:	ldr	ip, [r2, #4]
   14e58:	mov	r0, #0
   14e5c:	b	14e6c <__assert_fail@plt+0x3a8c>
   14e60:	add	r1, r1, #8
   14e64:	cmp	r1, ip
   14e68:	bcs	14e9c <__assert_fail@plt+0x3abc>
   14e6c:	ldr	r2, [r1]
   14e70:	cmp	r2, #0
   14e74:	beq	14e60 <__assert_fail@plt+0x3a80>
   14e78:	mov	r3, #0
   14e7c:	mov	r2, r1
   14e80:	add	r3, r3, #1
   14e84:	ldr	r2, [r2, #4]
   14e88:	cmp	r2, #0
   14e8c:	bne	14e80 <__assert_fail@plt+0x3aa0>
   14e90:	cmp	r3, r0
   14e94:	movhi	r0, r3
   14e98:	b	14e60 <__assert_fail@plt+0x3a80>
   14e9c:	bx	lr
   14ea0:	push	{fp, lr}
   14ea4:	mov	fp, sp
   14ea8:	ldr	r3, [r0]
   14eac:	ldr	r1, [r0, #4]
   14eb0:	mov	lr, #0
   14eb4:	cmp	r3, r1
   14eb8:	mov	r1, #0
   14ebc:	bcs	14f04 <__assert_fail@plt+0x3b24>
   14ec0:	ldr	ip, [r0, #4]
   14ec4:	mov	r1, #0
   14ec8:	mov	lr, #0
   14ecc:	b	14edc <__assert_fail@plt+0x3afc>
   14ed0:	add	r3, r3, #8
   14ed4:	cmp	r3, ip
   14ed8:	bcs	14f04 <__assert_fail@plt+0x3b24>
   14edc:	ldr	r2, [r3]
   14ee0:	cmp	r2, #0
   14ee4:	beq	14ed0 <__assert_fail@plt+0x3af0>
   14ee8:	mov	r2, r3
   14eec:	add	r1, r1, #1
   14ef0:	ldr	r2, [r2, #4]
   14ef4:	cmp	r2, #0
   14ef8:	bne	14eec <__assert_fail@plt+0x3b0c>
   14efc:	add	lr, lr, #1
   14f00:	b	14ed0 <__assert_fail@plt+0x3af0>
   14f04:	ldr	r2, [r0, #12]
   14f08:	cmp	lr, r2
   14f0c:	bne	14f24 <__assert_fail@plt+0x3b44>
   14f10:	ldr	r2, [r0, #16]
   14f14:	mov	r0, #1
   14f18:	cmp	r1, r2
   14f1c:	movne	r0, #0
   14f20:	pop	{fp, pc}
   14f24:	mov	r0, #0
   14f28:	pop	{fp, pc}
   14f2c:	nop	{0}
   14f30:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14f34:	add	fp, sp, #24
   14f38:	sub	sp, sp, #8
   14f3c:	mov	r4, r1
   14f40:	mov	r5, r0
   14f44:	bl	14e38 <__assert_fail@plt+0x3a58>
   14f48:	mov	r8, r0
   14f4c:	mov	r0, r5
   14f50:	bl	14e28 <__assert_fail@plt+0x3a48>
   14f54:	mov	r7, r0
   14f58:	mov	r0, r5
   14f5c:	bl	14e30 <__assert_fail@plt+0x3a50>
   14f60:	mov	r6, r0
   14f64:	mov	r0, r5
   14f68:	bl	14e40 <__assert_fail@plt+0x3a60>
   14f6c:	mov	r5, r0
   14f70:	movw	r2, #42000	; 0xa410
   14f74:	movt	r2, #1
   14f78:	mov	r0, r4
   14f7c:	mov	r1, #1
   14f80:	mov	r3, r8
   14f84:	bl	112e4 <__fprintf_chk@plt>
   14f88:	movw	r2, #42024	; 0xa428
   14f8c:	movt	r2, #1
   14f90:	mov	r0, r4
   14f94:	mov	r1, #1
   14f98:	mov	r3, r7
   14f9c:	bl	112e4 <__fprintf_chk@plt>
   14fa0:	vldr	d16, [pc, #80]	; 14ff8 <__assert_fail@plt+0x3c18>
   14fa4:	vmov	s0, r6
   14fa8:	vmov	s2, r7
   14fac:	vcvt.f64.u32	d17, s0
   14fb0:	vcvt.f64.u32	d18, s2
   14fb4:	vmul.f64	d16, d17, d16
   14fb8:	vdiv.f64	d16, d16, d18
   14fbc:	vstr	d16, [sp]
   14fc0:	movw	r2, #42048	; 0xa440
   14fc4:	movt	r2, #1
   14fc8:	mov	r0, r4
   14fcc:	mov	r1, #1
   14fd0:	mov	r3, r6
   14fd4:	bl	112e4 <__fprintf_chk@plt>
   14fd8:	movw	r2, #42081	; 0xa461
   14fdc:	movt	r2, #1
   14fe0:	mov	r0, r4
   14fe4:	mov	r1, #1
   14fe8:	mov	r3, r5
   14fec:	sub	sp, fp, #24
   14ff0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14ff4:	b	112e4 <__fprintf_chk@plt>
   14ff8:	andeq	r0, r0, r0
   14ffc:	subsmi	r0, r9, r0
   15000:	push	{r4, r5, r6, r7, fp, lr}
   15004:	add	fp, sp, #16
   15008:	mov	r5, r1
   1500c:	mov	r6, r0
   15010:	bl	15070 <__assert_fail@plt+0x3c90>
   15014:	mov	r7, r0
   15018:	ldr	r0, [r0]
   1501c:	mov	r4, #0
   15020:	cmp	r0, #0
   15024:	beq	1505c <__assert_fail@plt+0x3c7c>
   15028:	cmp	r7, #0
   1502c:	beq	1505c <__assert_fail@plt+0x3c7c>
   15030:	ldr	r1, [r7]
   15034:	cmp	r1, r5
   15038:	beq	15064 <__assert_fail@plt+0x3c84>
   1503c:	ldr	r2, [r6, #28]
   15040:	mov	r0, r5
   15044:	blx	r2
   15048:	cmp	r0, #0
   1504c:	bne	15064 <__assert_fail@plt+0x3c84>
   15050:	ldr	r7, [r7, #4]
   15054:	cmp	r7, #0
   15058:	bne	15030 <__assert_fail@plt+0x3c50>
   1505c:	mov	r0, r4
   15060:	pop	{r4, r5, r6, r7, fp, pc}
   15064:	ldr	r4, [r7]
   15068:	mov	r0, r4
   1506c:	pop	{r4, r5, r6, r7, fp, pc}
   15070:	push	{r4, sl, fp, lr}
   15074:	add	fp, sp, #8
   15078:	mov	r2, r1
   1507c:	mov	r4, r0
   15080:	ldr	r1, [r0, #8]
   15084:	ldr	r3, [r0, #24]
   15088:	mov	r0, r2
   1508c:	blx	r3
   15090:	ldr	r1, [r4, #8]
   15094:	cmp	r0, r1
   15098:	ldrcc	r1, [r4]
   1509c:	addcc	r0, r1, r0, lsl #3
   150a0:	popcc	{r4, sl, fp, pc}
   150a4:	bl	113b0 <abort@plt>
   150a8:	push	{fp, lr}
   150ac:	mov	fp, sp
   150b0:	ldr	r1, [r0, #16]
   150b4:	cmp	r1, #0
   150b8:	beq	150e0 <__assert_fail@plt+0x3d00>
   150bc:	ldr	r2, [r0]
   150c0:	ldr	r1, [r0, #4]
   150c4:	cmp	r2, r1
   150c8:	bcs	150ec <__assert_fail@plt+0x3d0c>
   150cc:	ldr	r1, [r2], #8
   150d0:	cmp	r1, #0
   150d4:	beq	150c0 <__assert_fail@plt+0x3ce0>
   150d8:	mov	r0, r1
   150dc:	pop	{fp, pc}
   150e0:	mov	r1, #0
   150e4:	mov	r0, r1
   150e8:	pop	{fp, pc}
   150ec:	bl	113b0 <abort@plt>
   150f0:	push	{r4, r5, fp, lr}
   150f4:	add	fp, sp, #8
   150f8:	mov	r5, r1
   150fc:	mov	r4, r0
   15100:	bl	15070 <__assert_fail@plt+0x3c90>
   15104:	mov	r1, r0
   15108:	b	15118 <__assert_fail@plt+0x3d38>
   1510c:	ldr	r1, [r1, #4]
   15110:	cmp	r1, #0
   15114:	beq	15138 <__assert_fail@plt+0x3d58>
   15118:	ldr	r2, [r1]
   1511c:	cmp	r2, r5
   15120:	bne	1510c <__assert_fail@plt+0x3d2c>
   15124:	ldr	r2, [r1, #4]
   15128:	cmp	r2, #0
   1512c:	beq	1510c <__assert_fail@plt+0x3d2c>
   15130:	ldr	r0, [r2]
   15134:	pop	{r4, r5, fp, pc}
   15138:	add	r1, r0, #8
   1513c:	ldr	r2, [r4, #4]
   15140:	cmp	r1, r2
   15144:	bcs	15158 <__assert_fail@plt+0x3d78>
   15148:	ldr	r0, [r1], #8
   1514c:	cmp	r0, #0
   15150:	beq	15140 <__assert_fail@plt+0x3d60>
   15154:	pop	{r4, r5, fp, pc}
   15158:	mov	r0, #0
   1515c:	pop	{r4, r5, fp, pc}
   15160:	push	{r4, sl, fp, lr}
   15164:	add	fp, sp, #8
   15168:	mov	ip, r0
   1516c:	ldr	lr, [r0]
   15170:	ldr	r3, [r0, #4]
   15174:	mov	r0, #0
   15178:	cmp	lr, r3
   1517c:	popcs	{r4, sl, fp, pc}
   15180:	mov	r0, #0
   15184:	b	15198 <__assert_fail@plt+0x3db8>
   15188:	ldr	r3, [ip, #4]
   1518c:	add	lr, lr, #8
   15190:	cmp	lr, r3
   15194:	bcs	151d0 <__assert_fail@plt+0x3df0>
   15198:	ldr	r3, [lr]
   1519c:	cmp	r3, #0
   151a0:	cmpne	lr, #0
   151a4:	beq	15188 <__assert_fail@plt+0x3da8>
   151a8:	mov	r3, lr
   151ac:	cmp	r0, r2
   151b0:	bcs	151d0 <__assert_fail@plt+0x3df0>
   151b4:	ldr	r4, [r3]
   151b8:	str	r4, [r1, r0, lsl #2]
   151bc:	add	r0, r0, #1
   151c0:	ldr	r3, [r3, #4]
   151c4:	cmp	r3, #0
   151c8:	bne	151ac <__assert_fail@plt+0x3dcc>
   151cc:	b	15188 <__assert_fail@plt+0x3da8>
   151d0:	pop	{r4, sl, fp, pc}
   151d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   151d8:	add	fp, sp, #24
   151dc:	mov	r8, r0
   151e0:	ldr	r9, [r0]
   151e4:	ldr	r0, [r0, #4]
   151e8:	mov	r6, #0
   151ec:	cmp	r9, r0
   151f0:	bcs	15250 <__assert_fail@plt+0x3e70>
   151f4:	mov	r4, r2
   151f8:	mov	r5, r1
   151fc:	mov	r6, #0
   15200:	b	15214 <__assert_fail@plt+0x3e34>
   15204:	ldr	r0, [r8, #4]
   15208:	add	r9, r9, #8
   1520c:	cmp	r9, r0
   15210:	bcs	15250 <__assert_fail@plt+0x3e70>
   15214:	ldr	r0, [r9]
   15218:	cmp	r0, #0
   1521c:	cmpne	r9, #0
   15220:	beq	15204 <__assert_fail@plt+0x3e24>
   15224:	mov	r7, r9
   15228:	ldr	r0, [r7]
   1522c:	mov	r1, r4
   15230:	blx	r5
   15234:	cmp	r0, #0
   15238:	beq	15250 <__assert_fail@plt+0x3e70>
   1523c:	add	r6, r6, #1
   15240:	ldr	r7, [r7, #4]
   15244:	cmp	r7, #0
   15248:	bne	15228 <__assert_fail@plt+0x3e48>
   1524c:	b	15204 <__assert_fail@plt+0x3e24>
   15250:	mov	r0, r6
   15254:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15258:	ldrb	r2, [r0]
   1525c:	cmp	r2, #0
   15260:	moveq	r0, #0
   15264:	bxeq	lr
   15268:	add	r3, r0, #1
   1526c:	mov	r0, #0
   15270:	rsb	r0, r0, r0, lsl #5
   15274:	uxtab	r0, r0, r2
   15278:	udiv	r2, r0, r1
   1527c:	mls	r0, r2, r1, r0
   15280:	ldrb	r2, [r3], #1
   15284:	cmp	r2, #0
   15288:	bne	15270 <__assert_fail@plt+0x3e90>
   1528c:	bx	lr
   15290:	movw	r1, #42112	; 0xa480
   15294:	movt	r1, #1
   15298:	vld1.32	{d16-d17}, [r1]!
   1529c:	vst1.32	{d16-d17}, [r0]!
   152a0:	ldr	r1, [r1]
   152a4:	str	r1, [r0]
   152a8:	bx	lr
   152ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152b0:	add	fp, sp, #28
   152b4:	sub	sp, sp, #4
   152b8:	mov	r7, r1
   152bc:	mov	r8, r0
   152c0:	movw	sl, #21420	; 0x53ac
   152c4:	movt	sl, #1
   152c8:	cmp	r3, #0
   152cc:	movne	sl, r3
   152d0:	movw	r5, #21388	; 0x538c
   152d4:	movt	r5, #1
   152d8:	cmp	r2, #0
   152dc:	movne	r5, r2
   152e0:	mov	r0, #40	; 0x28
   152e4:	bl	18a7c <__assert_fail@plt+0x769c>
   152e8:	mov	r9, #0
   152ec:	cmp	r0, #0
   152f0:	beq	15380 <__assert_fail@plt+0x3fa0>
   152f4:	mov	r4, r0
   152f8:	movw	r6, #42112	; 0xa480
   152fc:	movt	r6, #1
   15300:	cmp	r7, #0
   15304:	movne	r6, r7
   15308:	str	r6, [r0, #20]
   1530c:	bl	153bc <__assert_fail@plt+0x3fdc>
   15310:	cmp	r0, #0
   15314:	beq	15378 <__assert_fail@plt+0x3f98>
   15318:	mov	r0, r8
   1531c:	mov	r1, r6
   15320:	bl	15468 <__assert_fail@plt+0x4088>
   15324:	str	r0, [r4, #8]
   15328:	cmp	r0, #0
   1532c:	beq	15378 <__assert_fail@plt+0x3f98>
   15330:	mov	r1, #8
   15334:	bl	18a28 <__assert_fail@plt+0x7648>
   15338:	str	r0, [r4]
   1533c:	cmp	r0, #0
   15340:	beq	15378 <__assert_fail@plt+0x3f98>
   15344:	ldr	r1, [fp, #8]
   15348:	mov	r2, #0
   1534c:	str	r5, [r4, #24]
   15350:	str	sl, [r4, #28]
   15354:	str	r1, [r4, #32]
   15358:	str	r2, [r4, #36]	; 0x24
   1535c:	str	r2, [r4, #12]
   15360:	str	r2, [r4, #16]
   15364:	ldr	r1, [r4, #8]
   15368:	add	r0, r0, r1, lsl #3
   1536c:	str	r0, [r4, #4]
   15370:	mov	r9, r4
   15374:	b	15380 <__assert_fail@plt+0x3fa0>
   15378:	mov	r0, r4
   1537c:	bl	1942c <__assert_fail@plt+0x804c>
   15380:	mov	r0, r9
   15384:	sub	sp, fp, #28
   15388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1538c:	push	{r4, sl, fp, lr}
   15390:	add	fp, sp, #8
   15394:	mov	r4, r1
   15398:	mov	r1, #3
   1539c:	bl	18bd0 <__assert_fail@plt+0x77f0>
   153a0:	udiv	r1, r0, r4
   153a4:	mls	r0, r1, r4, r0
   153a8:	pop	{r4, sl, fp, pc}
   153ac:	sub	r0, r0, r1
   153b0:	clz	r0, r0
   153b4:	lsr	r0, r0, #5
   153b8:	bx	lr
   153bc:	mov	r1, r0
   153c0:	ldr	r3, [r0, #20]
   153c4:	mov	r0, #1
   153c8:	movw	r2, #42112	; 0xa480
   153cc:	movt	r2, #1
   153d0:	cmp	r3, r2
   153d4:	beq	15458 <__assert_fail@plt+0x4078>
   153d8:	vldr	s2, [pc, #124]	; 1545c <__assert_fail@plt+0x407c>
   153dc:	vldr	s0, [r3, #8]
   153e0:	vcmpe.f32	s0, s2
   153e4:	vmrs	APSR_nzcv, fpscr
   153e8:	ble	15450 <__assert_fail@plt+0x4070>
   153ec:	vldr	s4, [pc, #108]	; 15460 <__assert_fail@plt+0x4080>
   153f0:	vcmpe.f32	s0, s4
   153f4:	vmrs	APSR_nzcv, fpscr
   153f8:	bpl	15450 <__assert_fail@plt+0x4070>
   153fc:	vldr	s4, [pc, #96]	; 15464 <__assert_fail@plt+0x4084>
   15400:	vldr	s6, [r3, #12]
   15404:	vcmpe.f32	s6, s4
   15408:	vmrs	APSR_nzcv, fpscr
   1540c:	ble	15450 <__assert_fail@plt+0x4070>
   15410:	vldr	s4, [r3]
   15414:	vcmpe.f32	s4, #0.0
   15418:	vmrs	APSR_nzcv, fpscr
   1541c:	blt	15450 <__assert_fail@plt+0x4070>
   15420:	vadd.f32	s2, s4, s2
   15424:	vcmpe.f32	s2, s0
   15428:	vmrs	APSR_nzcv, fpscr
   1542c:	bpl	15450 <__assert_fail@plt+0x4070>
   15430:	vldr	s0, [r3, #4]
   15434:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15438:	vcmpe.f32	s0, s4
   1543c:	vmrs	APSR_nzcv, fpscr
   15440:	bhi	15450 <__assert_fail@plt+0x4070>
   15444:	vcmpe.f32	s2, s0
   15448:	vmrs	APSR_nzcv, fpscr
   1544c:	bxmi	lr
   15450:	str	r2, [r1, #20]
   15454:	mov	r0, #0
   15458:	bx	lr
   1545c:	stclcc	12, cr12, [ip, #820]	; 0x334
   15460:	svccc	0x00666666
   15464:	svccc	0x008ccccd
   15468:	push	{fp, lr}
   1546c:	mov	fp, sp
   15470:	ldrb	r2, [r1, #16]
   15474:	cmp	r2, #0
   15478:	bne	154a8 <__assert_fail@plt+0x40c8>
   1547c:	vldr	s0, [r1, #8]
   15480:	vmov	s2, r0
   15484:	vcvt.f32.u32	s2, s2
   15488:	vdiv.f32	s2, s2, s0
   1548c:	vcvt.u32.f32	s0, s2
   15490:	vldr	s4, [pc, #32]	; 154b8 <__assert_fail@plt+0x40d8>
   15494:	mov	r0, #0
   15498:	vcmpe.f32	s2, s4
   1549c:	vmrs	APSR_nzcv, fpscr
   154a0:	popge	{fp, pc}
   154a4:	vmov	r0, s0
   154a8:	bl	15c9c <__assert_fail@plt+0x48bc>
   154ac:	cmn	r0, #-536870911	; 0xe0000001
   154b0:	movwhi	r0, #0
   154b4:	pop	{fp, pc}
   154b8:	svcmi	0x00800000
   154bc:	push	{r4, r5, r6, r7, fp, lr}
   154c0:	add	fp, sp, #16
   154c4:	mov	r4, r0
   154c8:	ldr	r5, [r0]
   154cc:	ldr	r0, [r0, #4]
   154d0:	cmp	r5, r0
   154d4:	bcs	15578 <__assert_fail@plt+0x4198>
   154d8:	mov	r6, #0
   154dc:	b	154f8 <__assert_fail@plt+0x4118>
   154e0:	str	r6, [r5]
   154e4:	str	r6, [r5, #4]
   154e8:	ldr	r0, [r4, #4]
   154ec:	add	r5, r5, #8
   154f0:	cmp	r5, r0
   154f4:	bcs	15578 <__assert_fail@plt+0x4198>
   154f8:	ldr	r0, [r5]
   154fc:	cmp	r0, #0
   15500:	beq	154e8 <__assert_fail@plt+0x4108>
   15504:	ldr	r7, [r5, #4]
   15508:	ldr	r1, [r4, #32]
   1550c:	cmp	r1, #0
   15510:	mov	r0, r1
   15514:	movwne	r0, #1
   15518:	cmp	r7, #0
   1551c:	bne	15564 <__assert_fail@plt+0x4184>
   15520:	cmp	r0, #0
   15524:	beq	154e0 <__assert_fail@plt+0x4100>
   15528:	ldr	r0, [r5]
   1552c:	blx	r1
   15530:	b	154e0 <__assert_fail@plt+0x4100>
   15534:	str	r6, [r7]
   15538:	ldr	r2, [r7, #4]
   1553c:	ldr	r0, [r4, #36]	; 0x24
   15540:	str	r0, [r7, #4]
   15544:	str	r7, [r4, #36]	; 0x24
   15548:	ldr	r1, [r4, #32]
   1554c:	cmp	r1, #0
   15550:	mov	r0, r1
   15554:	movwne	r0, #1
   15558:	cmp	r2, #0
   1555c:	mov	r7, r2
   15560:	beq	15520 <__assert_fail@plt+0x4140>
   15564:	tst	r0, #1
   15568:	beq	15534 <__assert_fail@plt+0x4154>
   1556c:	ldr	r0, [r7]
   15570:	blx	r1
   15574:	b	15534 <__assert_fail@plt+0x4154>
   15578:	mov	r0, #0
   1557c:	str	r0, [r4, #12]
   15580:	str	r0, [r4, #16]
   15584:	pop	{r4, r5, r6, r7, fp, pc}
   15588:	push	{r4, r5, r6, sl, fp, lr}
   1558c:	add	fp, sp, #16
   15590:	mov	r4, r0
   15594:	ldr	r0, [r0, #32]
   15598:	cmp	r0, #0
   1559c:	beq	15600 <__assert_fail@plt+0x4220>
   155a0:	ldr	r0, [r4, #16]
   155a4:	cmp	r0, #0
   155a8:	beq	15600 <__assert_fail@plt+0x4220>
   155ac:	ldr	r5, [r4]
   155b0:	ldr	r0, [r4, #4]
   155b4:	cmp	r5, r0
   155b8:	bcc	155d0 <__assert_fail@plt+0x41f0>
   155bc:	b	15600 <__assert_fail@plt+0x4220>
   155c0:	ldr	r0, [r4, #4]
   155c4:	add	r5, r5, #8
   155c8:	cmp	r5, r0
   155cc:	bcs	15600 <__assert_fail@plt+0x4220>
   155d0:	ldr	r0, [r5]
   155d4:	cmp	r0, #0
   155d8:	cmpne	r5, #0
   155dc:	beq	155c0 <__assert_fail@plt+0x41e0>
   155e0:	mov	r6, r5
   155e4:	ldr	r0, [r6]
   155e8:	ldr	r1, [r4, #32]
   155ec:	blx	r1
   155f0:	ldr	r6, [r6, #4]
   155f4:	cmp	r6, #0
   155f8:	bne	155e4 <__assert_fail@plt+0x4204>
   155fc:	b	155c0 <__assert_fail@plt+0x41e0>
   15600:	ldr	r5, [r4]
   15604:	ldr	r0, [r4, #4]
   15608:	cmp	r5, r0
   1560c:	bcc	15624 <__assert_fail@plt+0x4244>
   15610:	b	15648 <__assert_fail@plt+0x4268>
   15614:	ldr	r0, [r4, #4]
   15618:	add	r5, r5, #8
   1561c:	cmp	r5, r0
   15620:	bcs	15648 <__assert_fail@plt+0x4268>
   15624:	ldr	r0, [r5, #4]
   15628:	cmp	r0, #0
   1562c:	beq	15614 <__assert_fail@plt+0x4234>
   15630:	ldr	r6, [r0, #4]
   15634:	bl	1942c <__assert_fail@plt+0x804c>
   15638:	cmp	r6, #0
   1563c:	mov	r0, r6
   15640:	bne	15630 <__assert_fail@plt+0x4250>
   15644:	b	15614 <__assert_fail@plt+0x4234>
   15648:	ldr	r0, [r4, #36]	; 0x24
   1564c:	cmp	r0, #0
   15650:	beq	15668 <__assert_fail@plt+0x4288>
   15654:	ldr	r5, [r0, #4]
   15658:	bl	1942c <__assert_fail@plt+0x804c>
   1565c:	cmp	r5, #0
   15660:	mov	r0, r5
   15664:	bne	15654 <__assert_fail@plt+0x4274>
   15668:	ldr	r0, [r4]
   1566c:	bl	1942c <__assert_fail@plt+0x804c>
   15670:	mov	r0, r4
   15674:	pop	{r4, r5, r6, sl, fp, lr}
   15678:	b	1942c <__assert_fail@plt+0x804c>
   1567c:	push	{r4, r5, r6, sl, fp, lr}
   15680:	add	fp, sp, #16
   15684:	sub	sp, sp, #40	; 0x28
   15688:	mov	r2, r1
   1568c:	mov	r4, r0
   15690:	ldr	r1, [r0, #20]
   15694:	mov	r0, r2
   15698:	bl	15468 <__assert_fail@plt+0x4088>
   1569c:	mov	r5, #0
   156a0:	cmp	r0, #0
   156a4:	beq	15780 <__assert_fail@plt+0x43a0>
   156a8:	mov	r6, r0
   156ac:	ldr	r0, [r4, #8]
   156b0:	cmp	r6, r0
   156b4:	bne	156c0 <__assert_fail@plt+0x42e0>
   156b8:	mov	r5, #1
   156bc:	b	15780 <__assert_fail@plt+0x43a0>
   156c0:	mov	r0, r6
   156c4:	mov	r1, #8
   156c8:	bl	18a28 <__assert_fail@plt+0x7648>
   156cc:	str	r0, [sp]
   156d0:	cmp	r0, #0
   156d4:	beq	15780 <__assert_fail@plt+0x43a0>
   156d8:	mov	r0, #0
   156dc:	str	r0, [sp, #16]
   156e0:	str	r0, [sp, #12]
   156e4:	str	r6, [sp, #8]
   156e8:	ldr	r0, [sp]
   156ec:	add	r0, r0, r6, lsl #3
   156f0:	str	r0, [sp, #4]
   156f4:	add	r6, r4, #20
   156f8:	ldm	r6, {r0, r1, r2, r3, r6}
   156fc:	add	ip, sp, #20
   15700:	stm	ip, {r0, r1, r2, r3, r6}
   15704:	mov	r0, sp
   15708:	mov	r1, r4
   1570c:	mov	r2, #0
   15710:	bl	15790 <__assert_fail@plt+0x43b0>
   15714:	cmp	r0, #0
   15718:	beq	1573c <__assert_fail@plt+0x435c>
   1571c:	ldr	r0, [r4]
   15720:	bl	1942c <__assert_fail@plt+0x804c>
   15724:	ldm	sp, {r0, r1, r2, r3}
   15728:	stm	r4, {r0, r1, r2, r3}
   1572c:	ldr	r0, [sp, #36]	; 0x24
   15730:	str	r0, [r4, #36]	; 0x24
   15734:	mov	r5, #1
   15738:	b	15780 <__assert_fail@plt+0x43a0>
   1573c:	ldr	r0, [sp, #36]	; 0x24
   15740:	str	r0, [r4, #36]	; 0x24
   15744:	mov	r1, sp
   15748:	mov	r0, r4
   1574c:	mov	r2, #1
   15750:	bl	15790 <__assert_fail@plt+0x43b0>
   15754:	cmp	r0, #0
   15758:	beq	1578c <__assert_fail@plt+0x43ac>
   1575c:	mov	r1, sp
   15760:	mov	r5, #0
   15764:	mov	r0, r4
   15768:	mov	r2, #0
   1576c:	bl	15790 <__assert_fail@plt+0x43b0>
   15770:	cmp	r0, #0
   15774:	beq	1578c <__assert_fail@plt+0x43ac>
   15778:	ldr	r0, [sp]
   1577c:	bl	1942c <__assert_fail@plt+0x804c>
   15780:	mov	r0, r5
   15784:	sub	sp, fp, #16
   15788:	pop	{r4, r5, r6, sl, fp, pc}
   1578c:	bl	113b0 <abort@plt>
   15790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15794:	add	fp, sp, #28
   15798:	sub	sp, sp, #4
   1579c:	mov	r7, r0
   157a0:	ldr	r6, [r1]
   157a4:	ldr	r0, [r1, #4]
   157a8:	cmp	r6, r0
   157ac:	bcs	158b8 <__assert_fail@plt+0x44d8>
   157b0:	mov	r9, r2
   157b4:	mov	sl, r1
   157b8:	b	157f0 <__assert_fail@plt+0x4410>
   157bc:	str	r4, [r5]
   157c0:	ldr	r0, [r7, #12]
   157c4:	add	r0, r0, #1
   157c8:	str	r0, [r7, #12]
   157cc:	mov	r0, #0
   157d0:	str	r0, [r6]
   157d4:	ldr	r0, [sl, #12]
   157d8:	sub	r0, r0, #1
   157dc:	str	r0, [sl, #12]
   157e0:	add	r6, r6, #8
   157e4:	ldr	r0, [sl, #4]
   157e8:	cmp	r6, r0
   157ec:	bcs	158b8 <__assert_fail@plt+0x44d8>
   157f0:	ldr	r0, [r6]
   157f4:	cmp	r0, #0
   157f8:	beq	157e0 <__assert_fail@plt+0x4400>
   157fc:	ldr	r4, [r6, #4]
   15800:	cmp	r4, #0
   15804:	bne	15834 <__assert_fail@plt+0x4454>
   15808:	b	15864 <__assert_fail@plt+0x4484>
   1580c:	str	r5, [r0]
   15810:	ldr	r0, [r7, #12]
   15814:	add	r0, r0, #1
   15818:	str	r0, [r7, #12]
   1581c:	mov	r0, r7
   15820:	mov	r1, r4
   15824:	bl	15d3c <__assert_fail@plt+0x495c>
   15828:	cmp	r8, #0
   1582c:	mov	r4, r8
   15830:	beq	15864 <__assert_fail@plt+0x4484>
   15834:	ldr	r5, [r4]
   15838:	mov	r0, r7
   1583c:	mov	r1, r5
   15840:	bl	15070 <__assert_fail@plt+0x3c90>
   15844:	ldr	r1, [r0]
   15848:	ldr	r8, [r4, #4]
   1584c:	cmp	r1, #0
   15850:	beq	1580c <__assert_fail@plt+0x442c>
   15854:	ldr	r1, [r0, #4]
   15858:	str	r1, [r4, #4]
   1585c:	str	r4, [r0, #4]
   15860:	b	15828 <__assert_fail@plt+0x4448>
   15864:	mov	r0, #0
   15868:	str	r0, [r6, #4]
   1586c:	cmp	r9, #0
   15870:	bne	157e0 <__assert_fail@plt+0x4400>
   15874:	ldr	r4, [r6]
   15878:	mov	r0, r7
   1587c:	mov	r1, r4
   15880:	bl	15070 <__assert_fail@plt+0x3c90>
   15884:	mov	r5, r0
   15888:	ldr	r0, [r0]
   1588c:	cmp	r0, #0
   15890:	beq	157bc <__assert_fail@plt+0x43dc>
   15894:	mov	r0, r7
   15898:	bl	15b28 <__assert_fail@plt+0x4748>
   1589c:	cmp	r0, #0
   158a0:	beq	158c4 <__assert_fail@plt+0x44e4>
   158a4:	str	r4, [r0]
   158a8:	ldr	r1, [r5, #4]
   158ac:	str	r1, [r0, #4]
   158b0:	str	r0, [r5, #4]
   158b4:	b	157cc <__assert_fail@plt+0x43ec>
   158b8:	mov	r0, #1
   158bc:	sub	sp, fp, #28
   158c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158c4:	mov	r0, #0
   158c8:	sub	sp, fp, #28
   158cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158d0:	push	{r4, r5, r6, r7, fp, lr}
   158d4:	add	fp, sp, #16
   158d8:	sub	sp, sp, #8
   158dc:	cmp	r1, #0
   158e0:	beq	15a40 <__assert_fail@plt+0x4660>
   158e4:	mov	r7, r2
   158e8:	mov	r5, r1
   158ec:	mov	r4, r0
   158f0:	add	r2, sp, #4
   158f4:	mov	r6, #0
   158f8:	mov	r3, #0
   158fc:	bl	15a48 <__assert_fail@plt+0x4668>
   15900:	cmp	r0, #0
   15904:	beq	15914 <__assert_fail@plt+0x4534>
   15908:	cmp	r7, #0
   1590c:	strne	r0, [r7]
   15910:	b	15a34 <__assert_fail@plt+0x4654>
   15914:	vldr	s0, [r4, #8]
   15918:	vldr	s2, [r4, #12]
   1591c:	ldr	r0, [r4, #20]
   15920:	vldr	s4, [r0, #8]
   15924:	vcvt.f32.u32	s0, s0
   15928:	vcvt.f32.u32	s2, s2
   1592c:	vmul.f32	s0, s4, s0
   15930:	vcmpe.f32	s0, s2
   15934:	vmrs	APSR_nzcv, fpscr
   15938:	bpl	159cc <__assert_fail@plt+0x45ec>
   1593c:	mov	r0, r4
   15940:	bl	153bc <__assert_fail@plt+0x3fdc>
   15944:	vldr	s0, [r4, #8]
   15948:	vldr	s4, [r4, #12]
   1594c:	ldr	r0, [r4, #20]
   15950:	vcvt.f32.u32	s2, s0
   15954:	vldr	s0, [r0, #8]
   15958:	vcvt.f32.u32	s4, s4
   1595c:	vmul.f32	s6, s0, s2
   15960:	vcmpe.f32	s6, s4
   15964:	vmrs	APSR_nzcv, fpscr
   15968:	bpl	159cc <__assert_fail@plt+0x45ec>
   1596c:	vldr	s4, [r0, #12]
   15970:	vmul.f32	s2, s4, s2
   15974:	ldrb	r0, [r0, #16]
   15978:	vmul.f32	s0, s0, s2
   1597c:	mvn	r6, #0
   15980:	vldr	s4, [pc, #188]	; 15a44 <__assert_fail@plt+0x4664>
   15984:	cmp	r0, #0
   15988:	vseleq.f32	s0, s0, s2
   1598c:	vcmpe.f32	s0, s4
   15990:	vmrs	APSR_nzcv, fpscr
   15994:	bge	15a34 <__assert_fail@plt+0x4654>
   15998:	vcvt.u32.f32	s0, s0
   1599c:	vmov	r1, s0
   159a0:	mov	r0, r4
   159a4:	bl	1567c <__assert_fail@plt+0x429c>
   159a8:	cmp	r0, #0
   159ac:	beq	15a34 <__assert_fail@plt+0x4654>
   159b0:	add	r2, sp, #4
   159b4:	mov	r0, r4
   159b8:	mov	r1, r5
   159bc:	mov	r3, #0
   159c0:	bl	15a48 <__assert_fail@plt+0x4668>
   159c4:	cmp	r0, #0
   159c8:	bne	15a40 <__assert_fail@plt+0x4660>
   159cc:	ldr	r6, [sp, #4]
   159d0:	ldr	r0, [r6]
   159d4:	cmp	r0, #0
   159d8:	beq	15a0c <__assert_fail@plt+0x462c>
   159dc:	mov	r0, r4
   159e0:	bl	15b28 <__assert_fail@plt+0x4748>
   159e4:	cmp	r0, #0
   159e8:	beq	15a30 <__assert_fail@plt+0x4650>
   159ec:	str	r5, [r0]
   159f0:	ldr	r1, [r6, #4]
   159f4:	str	r1, [r0, #4]
   159f8:	str	r0, [r6, #4]
   159fc:	ldr	r0, [r4, #16]
   15a00:	add	r0, r0, #1
   15a04:	str	r0, [r4, #16]
   15a08:	b	15a28 <__assert_fail@plt+0x4648>
   15a0c:	str	r5, [r6]
   15a10:	ldr	r0, [r4, #12]
   15a14:	ldr	r1, [r4, #16]
   15a18:	add	r1, r1, #1
   15a1c:	add	r0, r0, #1
   15a20:	str	r0, [r4, #12]
   15a24:	str	r1, [r4, #16]
   15a28:	mov	r6, #1
   15a2c:	b	15a34 <__assert_fail@plt+0x4654>
   15a30:	mvn	r6, #0
   15a34:	mov	r0, r6
   15a38:	sub	sp, fp, #16
   15a3c:	pop	{r4, r5, r6, r7, fp, pc}
   15a40:	bl	113b0 <abort@plt>
   15a44:	svcmi	0x00800000
   15a48:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15a4c:	add	fp, sp, #24
   15a50:	mov	r8, r3
   15a54:	mov	r4, r2
   15a58:	mov	r7, r1
   15a5c:	mov	r5, r0
   15a60:	bl	15070 <__assert_fail@plt+0x3c90>
   15a64:	str	r0, [r4]
   15a68:	ldr	r1, [r0]
   15a6c:	mov	r4, #0
   15a70:	cmp	r1, #0
   15a74:	beq	15b20 <__assert_fail@plt+0x4740>
   15a78:	mov	r6, r0
   15a7c:	cmp	r1, r7
   15a80:	beq	15a98 <__assert_fail@plt+0x46b8>
   15a84:	ldr	r2, [r5, #28]
   15a88:	mov	r0, r7
   15a8c:	blx	r2
   15a90:	cmp	r0, #0
   15a94:	beq	15abc <__assert_fail@plt+0x46dc>
   15a98:	ldr	r4, [r6]
   15a9c:	cmp	r8, #0
   15aa0:	beq	15b20 <__assert_fail@plt+0x4740>
   15aa4:	ldr	r1, [r6, #4]
   15aa8:	cmp	r1, #0
   15aac:	beq	15b18 <__assert_fail@plt+0x4738>
   15ab0:	ldm	r1, {r0, r2}
   15ab4:	stm	r6, {r0, r2}
   15ab8:	b	15b08 <__assert_fail@plt+0x4728>
   15abc:	ldr	r0, [r6, #4]!
   15ac0:	cmp	r0, #0
   15ac4:	beq	15b20 <__assert_fail@plt+0x4740>
   15ac8:	ldr	r1, [r0]
   15acc:	cmp	r1, r7
   15ad0:	beq	15af0 <__assert_fail@plt+0x4710>
   15ad4:	ldr	r2, [r5, #28]
   15ad8:	mov	r0, r7
   15adc:	blx	r2
   15ae0:	cmp	r0, #0
   15ae4:	bne	15af0 <__assert_fail@plt+0x4710>
   15ae8:	ldr	r6, [r6]
   15aec:	b	15abc <__assert_fail@plt+0x46dc>
   15af0:	ldr	r1, [r6]
   15af4:	ldr	r4, [r1]
   15af8:	cmp	r8, #0
   15afc:	beq	15b20 <__assert_fail@plt+0x4740>
   15b00:	ldr	r0, [r1, #4]
   15b04:	str	r0, [r6]
   15b08:	mov	r0, r5
   15b0c:	bl	15d3c <__assert_fail@plt+0x495c>
   15b10:	mov	r0, r4
   15b14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15b18:	mov	r0, #0
   15b1c:	str	r0, [r6]
   15b20:	mov	r0, r4
   15b24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15b28:	mov	r1, r0
   15b2c:	ldr	r0, [r0, #36]	; 0x24
   15b30:	cmp	r0, #0
   15b34:	ldrne	r2, [r0, #4]
   15b38:	strne	r2, [r1, #36]	; 0x24
   15b3c:	bxne	lr
   15b40:	mov	r0, #8
   15b44:	b	18a7c <__assert_fail@plt+0x769c>
   15b48:	push	{r4, sl, fp, lr}
   15b4c:	add	fp, sp, #8
   15b50:	sub	sp, sp, #8
   15b54:	mov	r4, r1
   15b58:	add	r2, sp, #4
   15b5c:	bl	158d0 <__assert_fail@plt+0x44f0>
   15b60:	cmn	r0, #1
   15b64:	beq	15b78 <__assert_fail@plt+0x4798>
   15b68:	ldr	r1, [sp, #4]
   15b6c:	cmp	r0, #0
   15b70:	moveq	r4, r1
   15b74:	b	15b7c <__assert_fail@plt+0x479c>
   15b78:	mov	r4, #0
   15b7c:	mov	r0, r4
   15b80:	sub	sp, fp, #8
   15b84:	pop	{r4, sl, fp, pc}
   15b88:	push	{r4, r5, r6, sl, fp, lr}
   15b8c:	add	fp, sp, #16
   15b90:	sub	sp, sp, #8
   15b94:	mov	r4, r0
   15b98:	add	r2, sp, #4
   15b9c:	mov	r3, #1
   15ba0:	bl	15a48 <__assert_fail@plt+0x4668>
   15ba4:	mov	r5, r0
   15ba8:	cmp	r0, #0
   15bac:	beq	15c8c <__assert_fail@plt+0x48ac>
   15bb0:	ldr	r0, [r4, #16]
   15bb4:	sub	r0, r0, #1
   15bb8:	str	r0, [r4, #16]
   15bbc:	ldr	r0, [sp, #4]
   15bc0:	ldr	r0, [r0]
   15bc4:	cmp	r0, #0
   15bc8:	bne	15c8c <__assert_fail@plt+0x48ac>
   15bcc:	ldr	r0, [r4, #12]
   15bd0:	sub	r0, r0, #1
   15bd4:	vldr	s0, [r4, #8]
   15bd8:	str	r0, [r4, #12]
   15bdc:	ldr	r1, [r4, #20]
   15be0:	vldr	s2, [r1]
   15be4:	vcvt.f32.u32	s0, s0
   15be8:	vmov	s4, r0
   15bec:	vcvt.f32.u32	s4, s4
   15bf0:	vmul.f32	s0, s2, s0
   15bf4:	vcmpe.f32	s0, s4
   15bf8:	vmrs	APSR_nzcv, fpscr
   15bfc:	ble	15c8c <__assert_fail@plt+0x48ac>
   15c00:	mov	r0, r4
   15c04:	bl	153bc <__assert_fail@plt+0x3fdc>
   15c08:	vldr	s0, [r4, #8]
   15c0c:	vldr	s2, [r4, #12]
   15c10:	ldr	r0, [r4, #20]
   15c14:	vcvt.f32.u32	s0, s0
   15c18:	vldr	s4, [r0]
   15c1c:	vcvt.f32.u32	s2, s2
   15c20:	vmul.f32	s4, s4, s0
   15c24:	vcmpe.f32	s4, s2
   15c28:	vmrs	APSR_nzcv, fpscr
   15c2c:	ble	15c8c <__assert_fail@plt+0x48ac>
   15c30:	vldr	s2, [r0, #4]
   15c34:	ldrb	r1, [r0, #16]
   15c38:	vmul.f32	s0, s2, s0
   15c3c:	cmp	r1, #0
   15c40:	bne	15c4c <__assert_fail@plt+0x486c>
   15c44:	vldr	s2, [r0, #8]
   15c48:	vmul.f32	s0, s0, s2
   15c4c:	vcvt.u32.f32	s0, s0
   15c50:	vmov	r1, s0
   15c54:	mov	r0, r4
   15c58:	bl	1567c <__assert_fail@plt+0x429c>
   15c5c:	cmp	r0, #0
   15c60:	bne	15c8c <__assert_fail@plt+0x48ac>
   15c64:	ldr	r0, [r4, #36]	; 0x24
   15c68:	cmp	r0, #0
   15c6c:	beq	15c84 <__assert_fail@plt+0x48a4>
   15c70:	ldr	r6, [r0, #4]
   15c74:	bl	1942c <__assert_fail@plt+0x804c>
   15c78:	cmp	r6, #0
   15c7c:	mov	r0, r6
   15c80:	bne	15c70 <__assert_fail@plt+0x4890>
   15c84:	mov	r0, #0
   15c88:	str	r0, [r4, #36]	; 0x24
   15c8c:	mov	r0, r5
   15c90:	sub	sp, fp, #16
   15c94:	pop	{r4, r5, r6, sl, fp, pc}
   15c98:	b	15b88 <__assert_fail@plt+0x47a8>
   15c9c:	push	{r4, r5, fp, lr}
   15ca0:	add	fp, sp, #8
   15ca4:	cmp	r0, #10
   15ca8:	movls	r0, #10
   15cac:	orr	r5, r0, #1
   15cb0:	mvn	r4, #0
   15cb4:	cmn	r5, #1
   15cb8:	beq	15cd8 <__assert_fail@plt+0x48f8>
   15cbc:	mov	r0, r5
   15cc0:	bl	15cec <__assert_fail@plt+0x490c>
   15cc4:	cmp	r0, #0
   15cc8:	bne	15ce0 <__assert_fail@plt+0x4900>
   15ccc:	add	r5, r5, #2
   15cd0:	cmn	r5, #1
   15cd4:	bne	15cbc <__assert_fail@plt+0x48dc>
   15cd8:	mov	r0, r4
   15cdc:	pop	{r4, r5, fp, pc}
   15ce0:	mov	r4, r5
   15ce4:	mov	r0, r4
   15ce8:	pop	{r4, r5, fp, pc}
   15cec:	mov	ip, #3
   15cf0:	cmp	r0, #10
   15cf4:	bcc	15d28 <__assert_fail@plt+0x4948>
   15cf8:	mov	ip, #3
   15cfc:	mov	r2, #9
   15d00:	mov	r3, #16
   15d04:	udiv	r1, r0, ip
   15d08:	mls	r1, r1, ip, r0
   15d0c:	cmp	r1, #0
   15d10:	beq	15d28 <__assert_fail@plt+0x4948>
   15d14:	add	r2, r3, r2
   15d18:	add	r3, r3, #8
   15d1c:	add	ip, ip, #2
   15d20:	cmp	r2, r0
   15d24:	bcc	15d04 <__assert_fail@plt+0x4924>
   15d28:	udiv	r1, r0, ip
   15d2c:	mls	r0, r1, ip, r0
   15d30:	cmp	r0, #0
   15d34:	movwne	r0, #1
   15d38:	bx	lr
   15d3c:	mov	r2, #0
   15d40:	str	r2, [r1]
   15d44:	ldr	r2, [r0, #36]	; 0x24
   15d48:	str	r2, [r1, #4]
   15d4c:	str	r1, [r0, #36]	; 0x24
   15d50:	bx	lr
   15d54:	mov	r2, #0
   15d58:	str	r2, [r0, #20]
   15d5c:	str	r2, [r0, #24]
   15d60:	mov	r3, #1
   15d64:	strb	r3, [r0, #28]
   15d68:	str	r1, [r0, r2, lsl #2]
   15d6c:	add	r2, r2, #1
   15d70:	cmp	r2, #4
   15d74:	bne	15d68 <__assert_fail@plt+0x4988>
   15d78:	str	r1, [r0, #16]
   15d7c:	bx	lr
   15d80:	ldrb	r0, [r0, #28]
   15d84:	bx	lr
   15d88:	ldr	r2, [r0, #20]
   15d8c:	ldrb	r3, [r0, #28]
   15d90:	eor	r3, r3, #1
   15d94:	add	r2, r2, r3
   15d98:	and	r2, r2, #3
   15d9c:	ldr	ip, [r0, r2, lsl #2]
   15da0:	str	r1, [r0, r2, lsl #2]
   15da4:	str	r2, [r0, #20]
   15da8:	ldr	r1, [r0, #24]
   15dac:	cmp	r2, r1
   15db0:	addeq	r1, r1, r3
   15db4:	andeq	r1, r1, #3
   15db8:	streq	r1, [r0, #24]
   15dbc:	mov	r1, #0
   15dc0:	strb	r1, [r0, #28]
   15dc4:	mov	r0, ip
   15dc8:	bx	lr
   15dcc:	push	{r4, sl, fp, lr}
   15dd0:	add	fp, sp, #8
   15dd4:	mov	r4, r0
   15dd8:	bl	15d80 <__assert_fail@plt+0x49a0>
   15ddc:	cmp	r0, #0
   15de0:	bne	15e18 <__assert_fail@plt+0x4a38>
   15de4:	ldr	r1, [r4, #16]
   15de8:	ldr	r2, [r4, #20]
   15dec:	ldr	r0, [r4, r2, lsl #2]
   15df0:	str	r1, [r4, r2, lsl #2]
   15df4:	ldr	r1, [r4, #20]
   15df8:	ldr	r2, [r4, #24]
   15dfc:	cmp	r1, r2
   15e00:	moveq	r1, #1
   15e04:	strbeq	r1, [r4, #28]
   15e08:	subne	r1, r1, #1
   15e0c:	andne	r1, r1, #3
   15e10:	strne	r1, [r4, #20]
   15e14:	pop	{r4, sl, fp, pc}
   15e18:	bl	113b0 <abort@plt>
   15e1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e20:	add	fp, sp, #28
   15e24:	sub	sp, sp, #4
   15e28:	mov	r5, r0
   15e2c:	ldrb	r7, [r0]
   15e30:	and	r0, r7, #248	; 0xf8
   15e34:	cmp	r0, #48	; 0x30
   15e38:	bne	15ea4 <__assert_fail@plt+0x4ac4>
   15e3c:	mov	r4, #0
   15e40:	mov	r0, #0
   15e44:	mov	r1, r5
   15e48:	mov	r6, r5
   15e4c:	ldrb	r2, [r6], #1
   15e50:	add	r0, r2, r0, lsl #3
   15e54:	sub	r0, r0, #48	; 0x30
   15e58:	cmp	r4, r0, lsr #12
   15e5c:	bne	16238 <__assert_fail@plt+0x4e58>
   15e60:	ldrb	r2, [r1, #1]
   15e64:	and	r1, r2, #248	; 0xf8
   15e68:	cmp	r1, #48	; 0x30
   15e6c:	mov	r1, r6
   15e70:	beq	15e4c <__assert_fail@plt+0x4a6c>
   15e74:	cmp	r2, #0
   15e78:	bne	16238 <__assert_fail@plt+0x4e58>
   15e7c:	bl	16254 <__assert_fail@plt+0x4e74>
   15e80:	sub	r2, r6, r5
   15e84:	and	r3, r0, #3072	; 0xc00
   15e88:	movw	r7, #1023	; 0x3ff
   15e8c:	movw	r1, #4095	; 0xfff
   15e90:	cmp	r2, #5
   15e94:	orrlt	r1, r3, r7
   15e98:	sub	sp, fp, #28
   15e9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ea0:	b	16258 <__assert_fail@plt+0x4e78>
   15ea4:	mov	r1, #1
   15ea8:	mvn	r2, #42	; 0x2a
   15eac:	movw	r8, #5
   15eb0:	movt	r8, #4
   15eb4:	mov	r3, #1
   15eb8:	mov	r0, #1
   15ebc:	b	15ed8 <__assert_fail@plt+0x4af8>
   15ec0:	cmp	r7, #0
   15ec4:	beq	15ef8 <__assert_fail@plt+0x4b18>
   15ec8:	mov	r6, #0
   15ecc:	add	r0, r6, r0
   15ed0:	ldrb	r7, [r5, r3]
   15ed4:	add	r3, r3, #1
   15ed8:	uxtab	r6, r2, r7
   15edc:	uxtb	r7, r7
   15ee0:	cmp	r6, #18
   15ee4:	bhi	15ec0 <__assert_fail@plt+0x4ae0>
   15ee8:	tst	r8, r1, lsl r6
   15eec:	mov	r6, #1
   15ef0:	bne	15ecc <__assert_fail@plt+0x4aec>
   15ef4:	b	15ec0 <__assert_fail@plt+0x4ae0>
   15ef8:	mov	r1, #16
   15efc:	bl	1867c <__assert_fail@plt+0x729c>
   15f00:	mov	r4, r0
   15f04:	mov	r9, #0
   15f08:	mov	ip, #1
   15f0c:	mvn	lr, #87	; 0x57
   15f10:	mov	sl, #0
   15f14:	mov	r1, #0
   15f18:	b	15f28 <__assert_fail@plt+0x4b48>
   15f1c:	movw	r0, #4095	; 0xfff
   15f20:	orr	r1, r1, r0
   15f24:	add	r5, r5, #1
   15f28:	ldrb	r0, [r5]
   15f2c:	sub	r2, r0, #97	; 0x61
   15f30:	cmp	r2, #20
   15f34:	bhi	15fa8 <__assert_fail@plt+0x4bc8>
   15f38:	mov	r0, #2496	; 0x9c0
   15f3c:	add	r3, pc, #0
   15f40:	ldr	pc, [r3, r2, lsl #2]
   15f44:	andeq	r5, r1, ip, lsl pc
   15f48:	andeq	r6, r1, ip, lsr #4
   15f4c:	andeq	r6, r1, ip, lsr #4
   15f50:	andeq	r6, r1, ip, lsr #4
   15f54:	andeq	r6, r1, ip, lsr #4
   15f58:	andeq	r6, r1, ip, lsr #4
   15f5c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f60:	andeq	r6, r1, ip, lsr #4
   15f64:	andeq	r6, r1, ip, lsr #4
   15f68:	andeq	r6, r1, ip, lsr #4
   15f6c:	andeq	r6, r1, ip, lsr #4
   15f70:	andeq	r6, r1, ip, lsr #4
   15f74:	andeq	r6, r1, ip, lsr #4
   15f78:	andeq	r6, r1, ip, lsr #4
   15f7c:	andeq	r5, r1, r0, lsr #31
   15f80:	andeq	r6, r1, ip, lsr #4
   15f84:	andeq	r6, r1, ip, lsr #4
   15f88:	andeq	r6, r1, ip, lsr #4
   15f8c:	andeq	r6, r1, ip, lsr #4
   15f90:	andeq	r6, r1, ip, lsr #4
   15f94:	andeq	r5, r1, r0, lsr #30
   15f98:	movw	r0, #1080	; 0x438
   15f9c:	b	15f20 <__assert_fail@plt+0x4b40>
   15fa0:	movw	r0, #519	; 0x207
   15fa4:	b	15f20 <__assert_fail@plt+0x4b40>
   15fa8:	sub	r0, r0, #43	; 0x2b
   15fac:	cmp	r0, #18
   15fb0:	bhi	1622c <__assert_fail@plt+0x4e4c>
   15fb4:	tst	r8, ip, lsl r0
   15fb8:	beq	1622c <__assert_fail@plt+0x4e4c>
   15fbc:	ldrb	r6, [r5]
   15fc0:	mov	r2, r5
   15fc4:	ldrb	r7, [r2, #1]!
   15fc8:	sub	r0, r7, #48	; 0x30
   15fcc:	cmp	r0, #8
   15fd0:	bcs	16038 <__assert_fail@plt+0x4c58>
   15fd4:	mov	r0, #0
   15fd8:	mov	r5, r2
   15fdc:	ldrb	r3, [r5], #1
   15fe0:	add	r0, r3, r0, lsl #3
   15fe4:	sub	r0, r0, #48	; 0x30
   15fe8:	cmp	r9, r0, lsr #12
   15fec:	bne	1622c <__assert_fail@plt+0x4e4c>
   15ff0:	ldrb	r3, [r2, #1]
   15ff4:	and	r2, r3, #248	; 0xf8
   15ff8:	cmp	r2, #48	; 0x30
   15ffc:	mov	r2, r5
   16000:	beq	15fdc <__assert_fail@plt+0x4bfc>
   16004:	cmp	r1, #0
   16008:	bne	1622c <__assert_fail@plt+0x4e4c>
   1600c:	cmp	r3, #44	; 0x2c
   16010:	cmpne	r3, #0
   16014:	bne	1622c <__assert_fail@plt+0x4e4c>
   16018:	str	r6, [sp]
   1601c:	bl	16254 <__assert_fail@plt+0x4e74>
   16020:	mvn	lr, #87	; 0x57
   16024:	mov	ip, #1
   16028:	mov	r6, #1
   1602c:	movw	r1, #4095	; 0xfff
   16030:	movw	r3, #4095	; 0xfff
   16034:	b	16174 <__assert_fail@plt+0x4d94>
   16038:	cmp	r7, #103	; 0x67
   1603c:	str	r6, [sp]
   16040:	beq	16068 <__assert_fail@plt+0x4c88>
   16044:	cmp	r7, #111	; 0x6f
   16048:	beq	1607c <__assert_fail@plt+0x4c9c>
   1604c:	cmp	r7, #117	; 0x75
   16050:	bne	16090 <__assert_fail@plt+0x4cb0>
   16054:	add	r5, r5, #2
   16058:	mov	r6, #3
   1605c:	mov	r3, #0
   16060:	mov	r0, #448	; 0x1c0
   16064:	b	16174 <__assert_fail@plt+0x4d94>
   16068:	add	r5, r5, #2
   1606c:	mov	r6, #3
   16070:	mov	r3, #0
   16074:	mov	r0, #56	; 0x38
   16078:	b	16174 <__assert_fail@plt+0x4d94>
   1607c:	add	r5, r5, #2
   16080:	mov	r6, #3
   16084:	mov	r3, #0
   16088:	mov	r0, #7
   1608c:	b	16174 <__assert_fail@plt+0x4d94>
   16090:	add	r3, r5, #2
   16094:	mov	r2, #1
   16098:	mov	r0, #0
   1609c:	b	160ac <__assert_fail@plt+0x4ccc>
   160a0:	orr	r0, r0, #512	; 0x200
   160a4:	mov	r2, r6
   160a8:	ldrb	r7, [r3], #1
   160ac:	mov	r6, r2
   160b0:	uxtab	r7, lr, r7
   160b4:	cmp	r7, #32
   160b8:	bhi	1616c <__assert_fail@plt+0x4d8c>
   160bc:	mov	r2, #2
   160c0:	add	r5, pc, #0
   160c4:	ldr	pc, [r5, r7, lsl #2]
   160c8:	andeq	r6, r1, r8, lsr #1
   160cc:	andeq	r6, r1, ip, ror #2
   160d0:	andeq	r6, r1, ip, ror #2
   160d4:	andeq	r6, r1, ip, ror #2
   160d8:	andeq	r6, r1, ip, ror #2
   160dc:	andeq	r6, r1, ip, ror #2
   160e0:	andeq	r6, r1, ip, ror #2
   160e4:	andeq	r6, r1, ip, ror #2
   160e8:	andeq	r6, r1, ip, ror #2
   160ec:	andeq	r6, r1, ip, ror #2
   160f0:	andeq	r6, r1, ip, ror #2
   160f4:	andeq	r6, r1, ip, ror #2
   160f8:	andeq	r6, r1, ip, ror #2
   160fc:	andeq	r6, r1, ip, ror #2
   16100:	andeq	r6, r1, ip, ror #2
   16104:	andeq	r6, r1, ip, ror #2
   16108:	andeq	r6, r1, ip, ror #2
   1610c:	andeq	r6, r1, ip, ror #2
   16110:	andeq	r6, r1, ip, ror #2
   16114:	andeq	r6, r1, ip, ror #2
   16118:	andeq	r6, r1, ip, ror #2
   1611c:	andeq	r6, r1, ip, ror #2
   16120:	andeq	r6, r1, ip, ror #2
   16124:	andeq	r6, r1, ip, ror #2
   16128:	andeq	r6, r1, ip, ror #2
   1612c:	andeq	r6, r1, ip, ror #2
   16130:	andeq	r6, r1, ip, asr #2
   16134:	andeq	r6, r1, r4, asr r1
   16138:	andeq	r6, r1, r0, lsr #1
   1613c:	andeq	r6, r1, ip, ror #2
   16140:	andeq	r6, r1, ip, ror #2
   16144:	andeq	r6, r1, ip, asr r1
   16148:	andeq	r6, r1, r4, ror #2
   1614c:	orr	r0, r0, #292	; 0x124
   16150:	b	160a4 <__assert_fail@plt+0x4cc4>
   16154:	orr	r0, r0, #3072	; 0xc00
   16158:	b	160a4 <__assert_fail@plt+0x4cc4>
   1615c:	orr	r0, r0, #146	; 0x92
   16160:	b	160a4 <__assert_fail@plt+0x4cc4>
   16164:	orr	r0, r0, #73	; 0x49
   16168:	b	160a4 <__assert_fail@plt+0x4cc4>
   1616c:	sub	r5, r3, #1
   16170:	mov	r3, #0
   16174:	mov	r2, r4
   16178:	ldr	r7, [sp]
   1617c:	strb	r7, [r2, sl, lsl #4]!
   16180:	str	r1, [r2, #4]
   16184:	str	r0, [r2, #8]
   16188:	strb	r6, [r2, #1]
   1618c:	cmp	r3, #0
   16190:	bne	161a0 <__assert_fail@plt+0x4dc0>
   16194:	cmp	r1, #0
   16198:	andne	r0, r0, r1
   1619c:	mov	r3, r0
   161a0:	add	r0, sl, #1
   161a4:	add	r2, r4, sl, lsl #4
   161a8:	str	r3, [r2, #12]
   161ac:	ldrb	r2, [r5]
   161b0:	sub	r2, r2, #43	; 0x2b
   161b4:	cmp	r2, #18
   161b8:	bhi	16220 <__assert_fail@plt+0x4e40>
   161bc:	add	r3, pc, #4
   161c0:	mov	sl, r0
   161c4:	ldr	pc, [r3, r2, lsl #2]
   161c8:			; <UNDEFINED> instruction: 0x00015fbc
   161cc:	andeq	r6, r1, r4, lsl r2
   161d0:			; <UNDEFINED> instruction: 0x00015fbc
   161d4:	andeq	r6, r1, r0, lsr #4
   161d8:	andeq	r6, r1, r0, lsr #4
   161dc:	andeq	r6, r1, r0, lsr #4
   161e0:	andeq	r6, r1, r0, lsr #4
   161e4:	andeq	r6, r1, r0, lsr #4
   161e8:	andeq	r6, r1, r0, lsr #4
   161ec:	andeq	r6, r1, r0, lsr #4
   161f0:	andeq	r6, r1, r0, lsr #4
   161f4:	andeq	r6, r1, r0, lsr #4
   161f8:	andeq	r6, r1, r0, lsr #4
   161fc:	andeq	r6, r1, r0, lsr #4
   16200:	andeq	r6, r1, r0, lsr #4
   16204:	andeq	r6, r1, r0, lsr #4
   16208:	andeq	r6, r1, r0, lsr #4
   1620c:	andeq	r6, r1, r0, lsr #4
   16210:			; <UNDEFINED> instruction: 0x00015fbc
   16214:	add	r5, r5, #1
   16218:	mov	sl, r0
   1621c:	b	15f14 <__assert_fail@plt+0x4b34>
   16220:	ldrb	r1, [r5]
   16224:	cmp	r1, #0
   16228:	beq	16244 <__assert_fail@plt+0x4e64>
   1622c:	mov	r0, r4
   16230:	bl	1942c <__assert_fail@plt+0x804c>
   16234:	mov	r4, #0
   16238:	mov	r0, r4
   1623c:	sub	sp, fp, #28
   16240:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16244:	add	r0, r4, r0, lsl #4
   16248:	mov	r1, #0
   1624c:	strb	r1, [r0, #1]
   16250:	b	16238 <__assert_fail@plt+0x4e58>
   16254:	bx	lr
   16258:	push	{r4, r5, fp, lr}
   1625c:	add	fp, sp, #8
   16260:	mov	r4, r1
   16264:	mov	r5, r0
   16268:	mov	r0, #32
   1626c:	bl	185e0 <__assert_fail@plt+0x7200>
   16270:	mov	r1, #0
   16274:	strb	r1, [r0, #17]
   16278:	movw	r1, #4095	; 0xfff
   1627c:	stmib	r0, {r1, r5}
   16280:	str	r4, [r0, #12]
   16284:	movw	r1, #317	; 0x13d
   16288:	strh	r1, [r0]
   1628c:	pop	{r4, r5, fp, pc}
   16290:	push	{fp, lr}
   16294:	mov	fp, sp
   16298:	sub	sp, sp, #104	; 0x68
   1629c:	mov	r1, sp
   162a0:	bl	19930 <__assert_fail@plt+0x8550>
   162a4:	mov	r1, r0
   162a8:	mov	r0, #0
   162ac:	cmp	r1, #0
   162b0:	beq	162bc <__assert_fail@plt+0x4edc>
   162b4:	mov	sp, fp
   162b8:	pop	{fp, pc}
   162bc:	ldr	r0, [sp, #16]
   162c0:	movw	r1, #4095	; 0xfff
   162c4:	bl	16258 <__assert_fail@plt+0x4e78>
   162c8:	mov	sp, fp
   162cc:	pop	{fp, pc}
   162d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   162d4:	add	fp, sp, #24
   162d8:	bfc	r0, #12, #20
   162dc:	ldrb	r4, [r3, #1]
   162e0:	ldr	ip, [fp, #8]
   162e4:	cmp	r4, #0
   162e8:	beq	163c8 <__assert_fail@plt+0x4fe8>
   162ec:	add	r3, r3, #8
   162f0:	cmp	r1, #0
   162f4:	mov	lr, r1
   162f8:	movwne	lr, #3072	; 0xc00
   162fc:	mov	r9, #0
   16300:	movw	r8, #4095	; 0xfff
   16304:	b	16320 <__assert_fail@plt+0x4f40>
   16308:	bic	r0, r0, r3
   1630c:	orr	r9, r3, r9
   16310:	add	r3, r5, #16
   16314:	ldrb	r4, [r5, #9]
   16318:	cmp	r4, #0
   1631c:	beq	163cc <__assert_fail@plt+0x4fec>
   16320:	mov	r5, r3
   16324:	ldr	r7, [r3, #-4]
   16328:	ldr	r3, [r3]
   1632c:	ldr	r6, [r5, #4]
   16330:	bic	r6, lr, r6
   16334:	uxtb	r4, r4
   16338:	cmp	r4, #2
   1633c:	beq	16368 <__assert_fail@plt+0x4f88>
   16340:	cmp	r4, #3
   16344:	bne	16374 <__assert_fail@plt+0x4f94>
   16348:	and	r4, r3, r0
   1634c:	tst	r4, #146	; 0x92
   16350:	mov	r3, r4
   16354:	orrne	r3, r3, #146	; 0x92
   16358:	tst	r4, #292	; 0x124
   1635c:	orrne	r3, r3, #292	; 0x124
   16360:	tst	r4, #73	; 0x49
   16364:	b	16370 <__assert_fail@plt+0x4f90>
   16368:	and	r4, r0, #73	; 0x49
   1636c:	orrs	r4, r4, r1
   16370:	orrne	r3, r3, #73	; 0x49
   16374:	cmp	r7, #0
   16378:	mov	r4, r7
   1637c:	mvneq	r4, r2
   16380:	bic	r4, r4, r6
   16384:	and	r3, r4, r3
   16388:	ldrb	r4, [r5, #-8]
   1638c:	cmp	r4, #43	; 0x2b
   16390:	beq	163c0 <__assert_fail@plt+0x4fe0>
   16394:	cmp	r4, #45	; 0x2d
   16398:	beq	16308 <__assert_fail@plt+0x4f28>
   1639c:	cmp	r4, #61	; 0x3d
   163a0:	bne	16310 <__assert_fail@plt+0x4f30>
   163a4:	mvn	r4, r7
   163a8:	cmp	r7, #0
   163ac:	orrne	r6, r6, r4
   163b0:	and	r0, r6, r0
   163b4:	orr	r0, r3, r0
   163b8:	bic	r3, r8, r6
   163bc:	b	1630c <__assert_fail@plt+0x4f2c>
   163c0:	orr	r0, r3, r0
   163c4:	b	1630c <__assert_fail@plt+0x4f2c>
   163c8:	mov	r9, #0
   163cc:	cmp	ip, #0
   163d0:	strne	r9, [ip]
   163d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   163d8:	sub	sp, sp, #4
   163dc:	push	{fp, lr}
   163e0:	mov	fp, sp
   163e4:	sub	sp, sp, #4
   163e8:	str	r3, [fp, #8]
   163ec:	mov	r3, #0
   163f0:	tst	r2, #64	; 0x40
   163f4:	ldrne	r3, [fp, #8]
   163f8:	bl	11284 <openat64@plt>
   163fc:	bl	180d0 <__assert_fail@plt+0x6cf0>
   16400:	mov	sp, fp
   16404:	pop	{fp, lr}
   16408:	add	sp, sp, #4
   1640c:	bx	lr
   16410:	push	{r4, r5, r6, sl, fp, lr}
   16414:	add	fp, sp, #16
   16418:	mov	r4, r3
   1641c:	orr	r2, r2, #18688	; 0x4900
   16420:	orr	r2, r2, #524288	; 0x80000
   16424:	bl	163d8 <__assert_fail@plt+0x4ff8>
   16428:	mov	r5, r0
   1642c:	mov	r0, #0
   16430:	cmp	r5, #0
   16434:	bmi	1646c <__assert_fail@plt+0x508c>
   16438:	mov	r0, r5
   1643c:	bl	11344 <fdopendir@plt>
   16440:	cmp	r0, #0
   16444:	beq	16450 <__assert_fail@plt+0x5070>
   16448:	str	r5, [r4]
   1644c:	pop	{r4, r5, r6, sl, fp, pc}
   16450:	bl	1129c <__errno_location@plt>
   16454:	mov	r4, r0
   16458:	ldr	r6, [r0]
   1645c:	mov	r0, r5
   16460:	bl	113bc <close@plt>
   16464:	str	r6, [r4]
   16468:	mov	r0, #0
   1646c:	pop	{r4, r5, r6, sl, fp, pc}
   16470:	push	{r4, r5, fp, lr}
   16474:	add	fp, sp, #8
   16478:	cmp	r0, #0
   1647c:	beq	16510 <__assert_fail@plt+0x5130>
   16480:	mov	r4, r0
   16484:	mov	r1, #47	; 0x2f
   16488:	bl	11320 <strrchr@plt>
   1648c:	cmp	r0, #0
   16490:	mov	r5, r4
   16494:	addne	r5, r0, #1
   16498:	sub	r0, r5, r4
   1649c:	cmp	r0, #7
   164a0:	blt	164f4 <__assert_fail@plt+0x5114>
   164a4:	sub	r0, r5, #7
   164a8:	movw	r1, #42188	; 0xa4cc
   164ac:	movt	r1, #1
   164b0:	mov	r2, #7
   164b4:	bl	113a4 <strncmp@plt>
   164b8:	cmp	r0, #0
   164bc:	bne	164f4 <__assert_fail@plt+0x5114>
   164c0:	movw	r1, #42196	; 0xa4d4
   164c4:	movt	r1, #1
   164c8:	mov	r0, r5
   164cc:	mov	r2, #3
   164d0:	bl	113a4 <strncmp@plt>
   164d4:	cmp	r0, #0
   164d8:	beq	164e4 <__assert_fail@plt+0x5104>
   164dc:	mov	r4, r5
   164e0:	b	164f4 <__assert_fail@plt+0x5114>
   164e4:	add	r4, r5, #3
   164e8:	movw	r0, #45416	; 0xb168
   164ec:	movt	r0, #2
   164f0:	str	r4, [r0]
   164f4:	movw	r0, #45420	; 0xb16c
   164f8:	movt	r0, #2
   164fc:	str	r4, [r0]
   16500:	movw	r0, #45492	; 0xb1b4
   16504:	movt	r0, #2
   16508:	str	r4, [r0]
   1650c:	pop	{r4, r5, fp, pc}
   16510:	movw	r0, #45432	; 0xb178
   16514:	movt	r0, #2
   16518:	ldr	r3, [r0]
   1651c:	movw	r0, #42132	; 0xa494
   16520:	movt	r0, #1
   16524:	mov	r1, #55	; 0x37
   16528:	mov	r2, #1
   1652c:	bl	111b8 <fwrite@plt>
   16530:	bl	113b0 <abort@plt>
   16534:	push	{r4, r5, r6, sl, fp, lr}
   16538:	add	fp, sp, #16
   1653c:	mov	r4, r0
   16540:	movw	r0, #45496	; 0xb1b8
   16544:	movt	r0, #2
   16548:	cmp	r4, #0
   1654c:	moveq	r4, r0
   16550:	bl	1129c <__errno_location@plt>
   16554:	mov	r5, r0
   16558:	ldr	r6, [r0]
   1655c:	mov	r0, r4
   16560:	mov	r1, #48	; 0x30
   16564:	bl	188c8 <__assert_fail@plt+0x74e8>
   16568:	str	r6, [r5]
   1656c:	pop	{r4, r5, r6, sl, fp, pc}
   16570:	movw	r1, #45496	; 0xb1b8
   16574:	movt	r1, #2
   16578:	cmp	r0, #0
   1657c:	movne	r1, r0
   16580:	ldr	r0, [r1]
   16584:	bx	lr
   16588:	movw	r2, #45496	; 0xb1b8
   1658c:	movt	r2, #2
   16590:	cmp	r0, #0
   16594:	movne	r2, r0
   16598:	str	r1, [r2]
   1659c:	bx	lr
   165a0:	movw	r3, #45496	; 0xb1b8
   165a4:	movt	r3, #2
   165a8:	cmp	r0, #0
   165ac:	movne	r3, r0
   165b0:	ubfx	r0, r1, #5, #3
   165b4:	add	ip, r3, r0, lsl #2
   165b8:	ldr	r3, [ip, #8]
   165bc:	and	r1, r1, #31
   165c0:	mov	r0, #1
   165c4:	and	r0, r0, r3, lsr r1
   165c8:	and	r2, r2, #1
   165cc:	eor	r2, r0, r2
   165d0:	eor	r1, r3, r2, lsl r1
   165d4:	str	r1, [ip, #8]
   165d8:	bx	lr
   165dc:	movw	r2, #45496	; 0xb1b8
   165e0:	movt	r2, #2
   165e4:	cmp	r0, #0
   165e8:	movne	r2, r0
   165ec:	ldr	r0, [r2, #4]
   165f0:	str	r1, [r2, #4]
   165f4:	bx	lr
   165f8:	push	{fp, lr}
   165fc:	mov	fp, sp
   16600:	movw	r3, #45496	; 0xb1b8
   16604:	movt	r3, #2
   16608:	cmp	r0, #0
   1660c:	movne	r3, r0
   16610:	mov	r0, #10
   16614:	str	r0, [r3]
   16618:	cmp	r1, #0
   1661c:	cmpne	r2, #0
   16620:	bne	16628 <__assert_fail@plt+0x5248>
   16624:	bl	113b0 <abort@plt>
   16628:	str	r1, [r3, #40]	; 0x28
   1662c:	str	r2, [r3, #44]	; 0x2c
   16630:	pop	{fp, pc}
   16634:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16638:	add	fp, sp, #28
   1663c:	sub	sp, sp, #20
   16640:	mov	r8, r3
   16644:	mov	r9, r2
   16648:	mov	sl, r1
   1664c:	mov	r7, r0
   16650:	ldr	r0, [fp, #8]
   16654:	movw	r5, #45496	; 0xb1b8
   16658:	movt	r5, #2
   1665c:	cmp	r0, #0
   16660:	movne	r5, r0
   16664:	bl	1129c <__errno_location@plt>
   16668:	mov	r4, r0
   1666c:	ldm	r5, {r0, r1}
   16670:	ldr	r2, [r5, #40]	; 0x28
   16674:	ldr	r3, [r5, #44]	; 0x2c
   16678:	ldr	r6, [r4]
   1667c:	add	r5, r5, #8
   16680:	stm	sp, {r0, r1, r5}
   16684:	str	r2, [sp, #12]
   16688:	str	r3, [sp, #16]
   1668c:	mov	r0, r7
   16690:	mov	r1, sl
   16694:	mov	r2, r9
   16698:	mov	r3, r8
   1669c:	bl	166ac <__assert_fail@plt+0x52cc>
   166a0:	str	r6, [r4]
   166a4:	sub	sp, fp, #28
   166a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166b0:	add	fp, sp, #28
   166b4:	sub	sp, sp, #156	; 0x9c
   166b8:	mov	r9, r3
   166bc:	mov	r7, r1
   166c0:	mov	r6, r0
   166c4:	str	r2, [fp, #-80]	; 0xffffffb0
   166c8:	add	r0, r2, #1
   166cc:	str	r0, [sp, #76]	; 0x4c
   166d0:	ldr	r0, [fp, #12]
   166d4:	and	r1, r0, #1
   166d8:	str	r1, [sp, #40]	; 0x28
   166dc:	and	r1, r0, #4
   166e0:	str	r1, [sp, #36]	; 0x24
   166e4:	ubfx	r4, r0, #1, #1
   166e8:	bl	111d0 <__ctype_get_mb_cur_max@plt>
   166ec:	str	r0, [sp, #44]	; 0x2c
   166f0:	ldr	r0, [fp, #24]
   166f4:	str	r0, [sp, #88]	; 0x58
   166f8:	ldr	r0, [fp, #20]
   166fc:	str	r0, [sp, #80]	; 0x50
   16700:	ldr	r1, [fp, #8]
   16704:	mov	r0, #0
   16708:	str	r0, [sp, #84]	; 0x54
   1670c:	mov	r0, #0
   16710:	str	r0, [fp, #-84]	; 0xffffffac
   16714:	mov	r0, #0
   16718:	str	r0, [fp, #-72]	; 0xffffffb8
   1671c:	mov	r0, #0
   16720:	mov	r2, #0
   16724:	str	r2, [fp, #-56]	; 0xffffffc8
   16728:	mov	r2, #0
   1672c:	str	r2, [sp, #64]	; 0x40
   16730:	mov	r2, #1
   16734:	str	r2, [fp, #-48]	; 0xffffffd0
   16738:	cmp	r1, #10
   1673c:	bhi	17668 <__assert_fail@plt+0x6288>
   16740:	mov	sl, r7
   16744:	mov	r7, r1
   16748:	add	r1, pc, #24
   1674c:	mov	r8, #0
   16750:	mov	r2, #1
   16754:	mov	r3, #0
   16758:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1675c:	mov	lr, r9
   16760:	mov	r5, r6
   16764:	ldr	pc, [r1, r7, lsl #2]
   16768:	andeq	r6, r1, ip, lsr r8
   1676c:	andeq	r6, r1, ip, ror r8
   16770:	andeq	r6, r1, ip, asr #16
   16774:	andeq	r6, r1, r4, lsr r8
   16778:	andeq	r6, r1, r0, ror r8
   1677c:	ldrdeq	r6, [r1], -r0
   16780:	andeq	r6, r1, ip, asr r8
   16784:	andeq	r6, r1, ip, lsr #18
   16788:	muleq	r1, r4, r7
   1678c:	muleq	r1, r4, r7
   16790:	andeq	r6, r1, r0, asr #15
   16794:	movw	r0, #42278	; 0xa526
   16798:	movt	r0, #1
   1679c:	mov	r1, r7
   167a0:	bl	17c70 <__assert_fail@plt+0x6890>
   167a4:	str	r0, [sp, #80]	; 0x50
   167a8:	movw	r0, #42280	; 0xa528
   167ac:	movt	r0, #1
   167b0:	mov	r1, r7
   167b4:	bl	17c70 <__assert_fail@plt+0x6890>
   167b8:	mov	r5, r6
   167bc:	str	r0, [sp, #88]	; 0x58
   167c0:	mov	r8, #0
   167c4:	tst	r4, #1
   167c8:	str	r7, [fp, #-64]	; 0xffffffc0
   167cc:	bne	16804 <__assert_fail@plt+0x5424>
   167d0:	ldr	r0, [sp, #80]	; 0x50
   167d4:	ldrb	r0, [r0]
   167d8:	cmp	r0, #0
   167dc:	beq	16804 <__assert_fail@plt+0x5424>
   167e0:	ldr	r1, [sp, #80]	; 0x50
   167e4:	add	r1, r1, #1
   167e8:	mov	r8, #0
   167ec:	cmp	r8, sl
   167f0:	strbcc	r0, [r5, r8]
   167f4:	ldrb	r0, [r1, r8]
   167f8:	add	r8, r8, #1
   167fc:	cmp	r0, #0
   16800:	bne	167ec <__assert_fail@plt+0x540c>
   16804:	ldr	r7, [sp, #88]	; 0x58
   16808:	mov	r0, r7
   1680c:	bl	11278 <strlen@plt>
   16810:	mov	r5, r6
   16814:	str	r0, [fp, #-72]	; 0xffffffb8
   16818:	str	r7, [fp, #-84]	; 0xffffffac
   1681c:	mov	r2, #1
   16820:	mov	r3, r4
   16824:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16828:	mov	lr, r9
   1682c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16830:	b	1692c <__assert_fail@plt+0x554c>
   16834:	mov	r0, #1
   16838:	b	1687c <__assert_fail@plt+0x549c>
   1683c:	mov	r7, #0
   16840:	mov	r8, #0
   16844:	mov	r2, r0
   16848:	b	16928 <__assert_fail@plt+0x5548>
   1684c:	tst	r4, #1
   16850:	bne	1687c <__assert_fail@plt+0x549c>
   16854:	mov	r2, r0
   16858:	b	168a4 <__assert_fail@plt+0x54c4>
   1685c:	mov	r0, #1
   16860:	str	r0, [fp, #-72]	; 0xffffffb8
   16864:	mov	r8, #0
   16868:	mov	r7, #5
   1686c:	b	168e8 <__assert_fail@plt+0x5508>
   16870:	mov	r2, #1
   16874:	tst	r4, #1
   16878:	beq	168a4 <__assert_fail@plt+0x54c4>
   1687c:	mov	r1, #1
   16880:	str	r1, [fp, #-72]	; 0xffffffb8
   16884:	mov	r8, #0
   16888:	mov	r7, #2
   1688c:	movw	r1, #42280	; 0xa528
   16890:	movt	r1, #1
   16894:	str	r1, [fp, #-84]	; 0xffffffac
   16898:	mov	r2, r0
   1689c:	mov	r3, #1
   168a0:	b	1692c <__assert_fail@plt+0x554c>
   168a4:	mov	r8, #1
   168a8:	mov	r7, #2
   168ac:	cmp	sl, #0
   168b0:	movne	r0, #39	; 0x27
   168b4:	strbne	r0, [r5]
   168b8:	movw	r0, #42280	; 0xa528
   168bc:	movt	r0, #1
   168c0:	str	r0, [fp, #-84]	; 0xffffffac
   168c4:	mov	r0, #1
   168c8:	str	r0, [fp, #-72]	; 0xffffffb8
   168cc:	b	16928 <__assert_fail@plt+0x5548>
   168d0:	mov	r7, #5
   168d4:	tst	r4, #1
   168d8:	beq	16900 <__assert_fail@plt+0x5520>
   168dc:	mov	r0, #1
   168e0:	str	r0, [fp, #-72]	; 0xffffffb8
   168e4:	mov	r8, #0
   168e8:	movw	r0, #42276	; 0xa524
   168ec:	movt	r0, #1
   168f0:	str	r0, [fp, #-84]	; 0xffffffac
   168f4:	mov	r2, #1
   168f8:	mov	r3, #1
   168fc:	b	1692c <__assert_fail@plt+0x554c>
   16900:	cmp	sl, #0
   16904:	movne	r0, #34	; 0x22
   16908:	strbne	r0, [r5]
   1690c:	mov	r8, #1
   16910:	movw	r0, #42276	; 0xa524
   16914:	movt	r0, #1
   16918:	str	r0, [fp, #-84]	; 0xffffffac
   1691c:	mov	r0, #1
   16920:	str	r0, [fp, #-72]	; 0xffffffb8
   16924:	mov	r2, #1
   16928:	mov	r3, #0
   1692c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16930:	cmp	r0, #0
   16934:	movwne	r0, #1
   16938:	and	r1, r0, r3
   1693c:	and	r1, r2, r1
   16940:	str	r1, [sp, #56]	; 0x38
   16944:	sub	r1, r7, #2
   16948:	clz	r1, r1
   1694c:	lsr	r1, r1, #5
   16950:	and	r1, r1, r3
   16954:	str	r1, [sp, #68]	; 0x44
   16958:	str	r7, [fp, #-64]	; 0xffffffc0
   1695c:	subs	r1, r7, #2
   16960:	movwne	r1, #1
   16964:	eor	r4, r3, #1
   16968:	str	r4, [fp, #-88]	; 0xffffffa8
   1696c:	orr	r4, r1, r4
   16970:	str	r4, [sp, #72]	; 0x48
   16974:	and	r1, r1, r2
   16978:	and	r0, r0, r1
   1697c:	str	r0, [fp, #-60]	; 0xffffffc4
   16980:	str	r3, [fp, #-76]	; 0xffffffb4
   16984:	orr	r0, r1, r3
   16988:	eor	r0, r0, #1
   1698c:	ldr	r1, [fp, #16]
   16990:	clz	r1, r1
   16994:	lsr	r1, r1, #5
   16998:	orr	r0, r1, r0
   1699c:	str	r0, [fp, #-68]	; 0xffffffbc
   169a0:	str	r2, [sp, #92]	; 0x5c
   169a4:	eor	r0, r2, #1
   169a8:	str	r0, [sp, #60]	; 0x3c
   169ac:	mov	r7, #0
   169b0:	cmn	lr, #1
   169b4:	beq	169c4 <__assert_fail@plt+0x55e4>
   169b8:	cmp	r7, lr
   169bc:	bne	169d0 <__assert_fail@plt+0x55f0>
   169c0:	b	174dc <__assert_fail@plt+0x60fc>
   169c4:	ldrb	r0, [ip, r7]
   169c8:	cmp	r0, #0
   169cc:	beq	174dc <__assert_fail@plt+0x60fc>
   169d0:	mov	r9, #0
   169d4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   169d8:	cmp	r0, #0
   169dc:	beq	16a10 <__assert_fail@plt+0x5630>
   169e0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   169e4:	add	r4, r7, r0
   169e8:	cmp	r0, #2
   169ec:	bcc	16a08 <__assert_fail@plt+0x5628>
   169f0:	cmn	lr, #1
   169f4:	bne	16a08 <__assert_fail@plt+0x5628>
   169f8:	mov	r0, ip
   169fc:	bl	11278 <strlen@plt>
   16a00:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16a04:	mov	lr, r0
   16a08:	cmp	r4, lr
   16a0c:	bls	16a1c <__assert_fail@plt+0x563c>
   16a10:	mov	r0, #0
   16a14:	str	r0, [fp, #-52]	; 0xffffffcc
   16a18:	b	16a60 <__assert_fail@plt+0x5680>
   16a1c:	mov	r4, lr
   16a20:	add	r0, ip, r7
   16a24:	ldr	r1, [fp, #-84]	; 0xffffffac
   16a28:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16a2c:	bl	1126c <bcmp@plt>
   16a30:	cmp	r0, #0
   16a34:	mov	r1, r0
   16a38:	movwne	r1, #1
   16a3c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16a40:	orr	r1, r1, r2
   16a44:	tst	r1, #1
   16a48:	beq	175b0 <__assert_fail@plt+0x61d0>
   16a4c:	clz	r0, r0
   16a50:	lsr	r0, r0, #5
   16a54:	str	r0, [fp, #-52]	; 0xffffffcc
   16a58:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16a5c:	mov	lr, r4
   16a60:	ldrb	r4, [ip, r7]
   16a64:	cmp	r4, #126	; 0x7e
   16a68:	bhi	16f98 <__assert_fail@plt+0x5bb8>
   16a6c:	mov	r6, #1
   16a70:	mov	r2, #110	; 0x6e
   16a74:	mov	r0, #97	; 0x61
   16a78:	add	r3, pc, #4
   16a7c:	mov	r1, #0
   16a80:	ldr	pc, [r3, r4, lsl #2]
   16a84:	strdeq	r6, [r1], -r8
   16a88:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16a8c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16a90:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16a94:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16a98:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16a9c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16aa0:	andeq	r7, r1, ip, rrx
   16aa4:	ldrdeq	r6, [r1], -r8
   16aa8:	ldrdeq	r6, [r1], -r0
   16aac:	andeq	r6, r1, r4, ror #27
   16ab0:	andeq	r6, r1, r0, lsl #30
   16ab4:	andeq	r6, r1, r8, asr #27
   16ab8:	andeq	r6, r1, r0, ror #27
   16abc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16ac0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16ac4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16ac8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16acc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16ad0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16ad4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16ad8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16adc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16ae0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16ae4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16ae8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16aec:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16af0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16af4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16af8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16afc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16b00:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16b04:	andeq	r6, r1, ip, ror sp
   16b08:	andeq	r6, r1, r0, lsl #27
   16b0c:	andeq	r6, r1, r0, lsl #27
   16b10:	andeq	r6, r1, r8, ror #26
   16b14:	andeq	r6, r1, r0, lsl #27
   16b18:	andeq	r6, r1, r0, lsl #25
   16b1c:	andeq	r6, r1, r0, lsl #27
   16b20:	andeq	r6, r1, r8, lsl #30
   16b24:	andeq	r6, r1, r0, lsl #27
   16b28:	andeq	r6, r1, r0, lsl #27
   16b2c:	andeq	r6, r1, r0, lsl #27
   16b30:	andeq	r6, r1, r0, lsl #25
   16b34:	andeq	r6, r1, r0, lsl #25
   16b38:	andeq	r6, r1, r0, lsl #25
   16b3c:	andeq	r6, r1, r0, lsl #25
   16b40:	andeq	r6, r1, r0, lsl #25
   16b44:	andeq	r6, r1, r0, lsl #25
   16b48:	andeq	r6, r1, r0, lsl #25
   16b4c:	andeq	r6, r1, r0, lsl #25
   16b50:	andeq	r6, r1, r0, lsl #25
   16b54:	andeq	r6, r1, r0, lsl #25
   16b58:	andeq	r6, r1, r0, lsl #25
   16b5c:	andeq	r6, r1, r0, lsl #25
   16b60:	andeq	r6, r1, r0, lsl #25
   16b64:	andeq	r6, r1, r0, lsl #25
   16b68:	andeq	r6, r1, r0, lsl #25
   16b6c:	andeq	r6, r1, r0, lsl #25
   16b70:	andeq	r6, r1, r0, lsl #27
   16b74:	andeq	r6, r1, r0, lsl #27
   16b78:	andeq	r6, r1, r0, lsl #27
   16b7c:	andeq	r6, r1, r0, lsl #27
   16b80:	ldrdeq	r6, [r1], -r0
   16b84:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16b88:	andeq	r6, r1, r0, lsl #25
   16b8c:	andeq	r6, r1, r0, lsl #25
   16b90:	andeq	r6, r1, r0, lsl #25
   16b94:	andeq	r6, r1, r0, lsl #25
   16b98:	andeq	r6, r1, r0, lsl #25
   16b9c:	andeq	r6, r1, r0, lsl #25
   16ba0:	andeq	r6, r1, r0, lsl #25
   16ba4:	andeq	r6, r1, r0, lsl #25
   16ba8:	andeq	r6, r1, r0, lsl #25
   16bac:	andeq	r6, r1, r0, lsl #25
   16bb0:	andeq	r6, r1, r0, lsl #25
   16bb4:	andeq	r6, r1, r0, lsl #25
   16bb8:	andeq	r6, r1, r0, lsl #25
   16bbc:	andeq	r6, r1, r0, lsl #25
   16bc0:	andeq	r6, r1, r0, lsl #25
   16bc4:	andeq	r6, r1, r0, lsl #25
   16bc8:	andeq	r6, r1, r0, lsl #25
   16bcc:	andeq	r6, r1, r0, lsl #25
   16bd0:	andeq	r6, r1, r0, lsl #25
   16bd4:	andeq	r6, r1, r0, lsl #25
   16bd8:	andeq	r6, r1, r0, lsl #25
   16bdc:	andeq	r6, r1, r0, lsl #25
   16be0:	andeq	r6, r1, r0, lsl #25
   16be4:	andeq	r6, r1, r0, lsl #25
   16be8:	andeq	r6, r1, r0, lsl #25
   16bec:	andeq	r6, r1, r0, lsl #25
   16bf0:	andeq	r6, r1, r0, lsl #27
   16bf4:	andeq	r6, r1, r8, lsr #27
   16bf8:	andeq	r6, r1, r0, lsl #25
   16bfc:	andeq	r6, r1, r0, lsl #27
   16c00:	andeq	r6, r1, r0, lsl #25
   16c04:	andeq	r6, r1, r0, lsl #27
   16c08:	andeq	r6, r1, r0, lsl #25
   16c0c:	andeq	r6, r1, r0, lsl #25
   16c10:	andeq	r6, r1, r0, lsl #25
   16c14:	andeq	r6, r1, r0, lsl #25
   16c18:	andeq	r6, r1, r0, lsl #25
   16c1c:	andeq	r6, r1, r0, lsl #25
   16c20:	andeq	r6, r1, r0, lsl #25
   16c24:	andeq	r6, r1, r0, lsl #25
   16c28:	andeq	r6, r1, r0, lsl #25
   16c2c:	andeq	r6, r1, r0, lsl #25
   16c30:	andeq	r6, r1, r0, lsl #25
   16c34:	andeq	r6, r1, r0, lsl #25
   16c38:	andeq	r6, r1, r0, lsl #25
   16c3c:	andeq	r6, r1, r0, lsl #25
   16c40:	andeq	r6, r1, r0, lsl #25
   16c44:	andeq	r6, r1, r0, lsl #25
   16c48:	andeq	r6, r1, r0, lsl #25
   16c4c:	andeq	r6, r1, r0, lsl #25
   16c50:	andeq	r6, r1, r0, lsl #25
   16c54:	andeq	r6, r1, r0, lsl #25
   16c58:	andeq	r6, r1, r0, lsl #25
   16c5c:	andeq	r6, r1, r0, lsl #25
   16c60:	andeq	r6, r1, r0, lsl #25
   16c64:	andeq	r6, r1, r0, lsl #25
   16c68:	andeq	r6, r1, r0, lsl #25
   16c6c:	andeq	r6, r1, r0, lsl #25
   16c70:	andeq	r6, r1, ip, lsr sp
   16c74:	andeq	r6, r1, r0, lsl #27
   16c78:	andeq	r6, r1, ip, lsr sp
   16c7c:	andeq	r6, r1, r8, ror #26
   16c80:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16c84:	tst	r0, #1
   16c88:	bne	16cb4 <__assert_fail@plt+0x58d4>
   16c8c:	ubfx	r0, r4, #5, #3
   16c90:	ldr	r1, [fp, #16]
   16c94:	ldr	r0, [r1, r0, lsl #2]
   16c98:	and	r1, r4, #31
   16c9c:	mov	r2, #1
   16ca0:	tst	r0, r2, lsl r1
   16ca4:	beq	16cb4 <__assert_fail@plt+0x58d4>
   16ca8:	mov	r0, r4
   16cac:	mov	r1, r6
   16cb0:	b	16cc8 <__assert_fail@plt+0x58e8>
   16cb4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16cb8:	cmp	r0, #0
   16cbc:	mov	r0, r4
   16cc0:	mov	r1, r6
   16cc4:	beq	17000 <__assert_fail@plt+0x5c20>
   16cc8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16ccc:	tst	r2, #1
   16cd0:	bne	175c4 <__assert_fail@plt+0x61e4>
   16cd4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   16cd8:	subs	r2, r2, #2
   16cdc:	movwne	r2, #1
   16ce0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16ce4:	orr	r2, r2, r3
   16ce8:	tst	r2, #1
   16cec:	bne	16d28 <__assert_fail@plt+0x5948>
   16cf0:	cmp	r8, sl
   16cf4:	movcc	r2, #39	; 0x27
   16cf8:	strbcc	r2, [r5, r8]
   16cfc:	add	r2, r8, #1
   16d00:	cmp	r2, sl
   16d04:	movcc	r3, #36	; 0x24
   16d08:	strbcc	r3, [r5, r2]
   16d0c:	add	r2, r8, #2
   16d10:	cmp	r2, sl
   16d14:	movcc	r3, #39	; 0x27
   16d18:	strbcc	r3, [r5, r2]
   16d1c:	add	r8, r8, #3
   16d20:	mov	r2, #1
   16d24:	str	r2, [fp, #-56]	; 0xffffffc8
   16d28:	cmp	r8, sl
   16d2c:	movcc	r2, #92	; 0x5c
   16d30:	strbcc	r2, [r5, r8]
   16d34:	add	r8, r8, #1
   16d38:	b	17044 <__assert_fail@plt+0x5c64>
   16d3c:	cmp	lr, #1
   16d40:	beq	16d68 <__assert_fail@plt+0x5988>
   16d44:	mov	r6, #0
   16d48:	cmn	lr, #1
   16d4c:	bne	16d74 <__assert_fail@plt+0x5994>
   16d50:	ldrb	r0, [ip, #1]
   16d54:	cmp	r0, #0
   16d58:	beq	16d68 <__assert_fail@plt+0x5988>
   16d5c:	mvn	lr, #0
   16d60:	mov	r9, #0
   16d64:	b	16c80 <__assert_fail@plt+0x58a0>
   16d68:	mov	r6, #0
   16d6c:	cmp	r7, #0
   16d70:	beq	16d7c <__assert_fail@plt+0x599c>
   16d74:	mov	r9, #0
   16d78:	b	16c80 <__assert_fail@plt+0x58a0>
   16d7c:	mov	r1, #1
   16d80:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16d84:	cmp	r0, #2
   16d88:	bne	16da0 <__assert_fail@plt+0x59c0>
   16d8c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16d90:	tst	r0, #1
   16d94:	mov	r6, r1
   16d98:	beq	16c80 <__assert_fail@plt+0x58a0>
   16d9c:	b	175c4 <__assert_fail@plt+0x61e4>
   16da0:	mov	r6, r1
   16da4:	b	16c80 <__assert_fail@plt+0x58a0>
   16da8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16dac:	cmp	r0, #2
   16db0:	bne	16fe4 <__assert_fail@plt+0x5c04>
   16db4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16db8:	tst	r0, #1
   16dbc:	bne	175c4 <__assert_fail@plt+0x61e4>
   16dc0:	mov	r9, #0
   16dc4:	b	16ff8 <__assert_fail@plt+0x5c18>
   16dc8:	mov	r0, #102	; 0x66
   16dcc:	b	1706c <__assert_fail@plt+0x5c8c>
   16dd0:	mov	r2, #116	; 0x74
   16dd4:	b	16de4 <__assert_fail@plt+0x5a04>
   16dd8:	mov	r0, #98	; 0x62
   16ddc:	b	1706c <__assert_fail@plt+0x5c8c>
   16de0:	mov	r2, #114	; 0x72
   16de4:	ldr	r0, [sp, #72]	; 0x48
   16de8:	tst	r0, #1
   16dec:	mov	r0, r2
   16df0:	bne	1706c <__assert_fail@plt+0x5c8c>
   16df4:	b	175c4 <__assert_fail@plt+0x61e4>
   16df8:	ldr	r0, [sp, #92]	; 0x5c
   16dfc:	tst	r0, #1
   16e00:	beq	17088 <__assert_fail@plt+0x5ca8>
   16e04:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16e08:	tst	r0, #1
   16e0c:	bne	175c4 <__assert_fail@plt+0x61e4>
   16e10:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16e14:	subs	r0, r0, #2
   16e18:	movwne	r0, #1
   16e1c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   16e20:	orr	r0, r0, r1
   16e24:	tst	r0, #1
   16e28:	bne	16e64 <__assert_fail@plt+0x5a84>
   16e2c:	cmp	r8, sl
   16e30:	movcc	r0, #39	; 0x27
   16e34:	strbcc	r0, [r5, r8]
   16e38:	add	r0, r8, #1
   16e3c:	cmp	r0, sl
   16e40:	movcc	r1, #36	; 0x24
   16e44:	strbcc	r1, [r5, r0]
   16e48:	add	r0, r8, #2
   16e4c:	cmp	r0, sl
   16e50:	movcc	r1, #39	; 0x27
   16e54:	strbcc	r1, [r5, r0]
   16e58:	add	r8, r8, #3
   16e5c:	mov	r0, #1
   16e60:	str	r0, [fp, #-56]	; 0xffffffc8
   16e64:	cmp	r8, sl
   16e68:	movcc	r0, #92	; 0x5c
   16e6c:	strbcc	r0, [r5, r8]
   16e70:	add	r0, r8, #1
   16e74:	mov	r6, #0
   16e78:	mov	r9, #1
   16e7c:	mov	r4, #48	; 0x30
   16e80:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16e84:	cmp	r1, #2
   16e88:	beq	1724c <__assert_fail@plt+0x5e6c>
   16e8c:	add	r1, r7, #1
   16e90:	cmp	r1, lr
   16e94:	bcs	1724c <__assert_fail@plt+0x5e6c>
   16e98:	ldrb	r1, [ip, r1]
   16e9c:	sub	r1, r1, #48	; 0x30
   16ea0:	uxtb	r1, r1
   16ea4:	cmp	r1, #9
   16ea8:	bhi	1724c <__assert_fail@plt+0x5e6c>
   16eac:	cmp	r0, sl
   16eb0:	movcc	r1, #48	; 0x30
   16eb4:	strbcc	r1, [r5, r0]
   16eb8:	add	r0, r8, #2
   16ebc:	cmp	r0, sl
   16ec0:	movcc	r1, #48	; 0x30
   16ec4:	strbcc	r1, [r5, r0]
   16ec8:	add	r8, r8, #3
   16ecc:	b	16c80 <__assert_fail@plt+0x58a0>
   16ed0:	mov	r9, #0
   16ed4:	mov	r4, #63	; 0x3f
   16ed8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16edc:	cmp	r0, #5
   16ee0:	beq	17254 <__assert_fail@plt+0x5e74>
   16ee4:	cmp	r0, #2
   16ee8:	bne	172fc <__assert_fail@plt+0x5f1c>
   16eec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16ef0:	tst	r0, #1
   16ef4:	mov	r6, #0
   16ef8:	beq	16c80 <__assert_fail@plt+0x58a0>
   16efc:	b	175c4 <__assert_fail@plt+0x61e4>
   16f00:	mov	r0, #118	; 0x76
   16f04:	b	1706c <__assert_fail@plt+0x5c8c>
   16f08:	mov	r4, #39	; 0x27
   16f0c:	mov	r0, #1
   16f10:	str	r0, [sp, #64]	; 0x40
   16f14:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16f18:	cmp	r0, #2
   16f1c:	bne	170a4 <__assert_fail@plt+0x5cc4>
   16f20:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16f24:	tst	r0, #1
   16f28:	bne	175c4 <__assert_fail@plt+0x61e4>
   16f2c:	ldr	r2, [sp, #84]	; 0x54
   16f30:	cmp	r2, #0
   16f34:	mov	r0, r2
   16f38:	movwne	r0, #1
   16f3c:	clz	r1, sl
   16f40:	lsr	r1, r1, #5
   16f44:	orrs	r0, r0, r1
   16f48:	moveq	r2, sl
   16f4c:	str	r2, [sp, #84]	; 0x54
   16f50:	moveq	sl, r0
   16f54:	cmp	r8, sl
   16f58:	movcc	r0, #39	; 0x27
   16f5c:	strbcc	r0, [r5, r8]
   16f60:	add	r0, r8, #1
   16f64:	cmp	r0, sl
   16f68:	movcc	r1, #92	; 0x5c
   16f6c:	strbcc	r1, [r5, r0]
   16f70:	add	r0, r8, #2
   16f74:	cmp	r0, sl
   16f78:	movcc	r1, #39	; 0x27
   16f7c:	strbcc	r1, [r5, r0]
   16f80:	add	r8, r8, #3
   16f84:	mov	r0, #0
   16f88:	str	r0, [fp, #-56]	; 0xffffffc8
   16f8c:	mov	r9, #0
   16f90:	mov	r6, #1
   16f94:	b	16c80 <__assert_fail@plt+0x58a0>
   16f98:	ldr	r0, [sp, #44]	; 0x2c
   16f9c:	cmp	r0, #1
   16fa0:	bne	170ac <__assert_fail@plt+0x5ccc>
   16fa4:	str	lr, [sp, #32]
   16fa8:	bl	11254 <__ctype_b_loc@plt>
   16fac:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16fb0:	ldr	r0, [r0]
   16fb4:	add	r0, r0, r4, lsl #1
   16fb8:	ldrb	r0, [r0, #1]
   16fbc:	ubfx	r6, r0, #6, #1
   16fc0:	mov	r2, #1
   16fc4:	ldr	r0, [sp, #60]	; 0x3c
   16fc8:	orr	r1, r6, r0
   16fcc:	cmp	r2, #1
   16fd0:	bhi	17304 <__assert_fail@plt+0x5f24>
   16fd4:	tst	r1, #1
   16fd8:	beq	17304 <__assert_fail@plt+0x5f24>
   16fdc:	ldr	lr, [sp, #32]
   16fe0:	b	16c80 <__assert_fail@plt+0x58a0>
   16fe4:	mov	r9, #0
   16fe8:	mov	r0, #92	; 0x5c
   16fec:	ldr	r1, [sp, #56]	; 0x38
   16ff0:	cmp	r1, #0
   16ff4:	beq	1706c <__assert_fail@plt+0x5c8c>
   16ff8:	mov	r4, #92	; 0x5c
   16ffc:	mov	r6, #0
   17000:	cmp	r9, #0
   17004:	bne	1703c <__assert_fail@plt+0x5c5c>
   17008:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1700c:	tst	r0, #1
   17010:	beq	1703c <__assert_fail@plt+0x5c5c>
   17014:	cmp	r8, sl
   17018:	movcc	r0, #39	; 0x27
   1701c:	strbcc	r0, [r5, r8]
   17020:	add	r0, r8, #1
   17024:	cmp	r0, sl
   17028:	movcc	r1, #39	; 0x27
   1702c:	strbcc	r1, [r5, r0]
   17030:	add	r8, r8, #2
   17034:	mov	r0, #0
   17038:	str	r0, [fp, #-56]	; 0xffffffc8
   1703c:	mov	r1, r6
   17040:	mov	r0, r4
   17044:	cmp	r8, sl
   17048:	strbcc	r0, [r5, r8]
   1704c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17050:	and	r0, r0, r1
   17054:	str	r0, [fp, #-48]	; 0xffffffd0
   17058:	add	r8, r8, #1
   1705c:	add	r7, r7, #1
   17060:	cmn	lr, #1
   17064:	bne	169b8 <__assert_fail@plt+0x55d8>
   17068:	b	169c4 <__assert_fail@plt+0x55e4>
   1706c:	mov	r9, #0
   17070:	ldr	r1, [sp, #92]	; 0x5c
   17074:	tst	r1, #1
   17078:	mov	r6, #0
   1707c:	mov	r1, #0
   17080:	beq	16c80 <__assert_fail@plt+0x58a0>
   17084:	b	16cc8 <__assert_fail@plt+0x58e8>
   17088:	mov	r4, #0
   1708c:	ldr	r0, [sp, #40]	; 0x28
   17090:	cmp	r0, #0
   17094:	mov	r9, #0
   17098:	mov	r6, #0
   1709c:	beq	16c80 <__assert_fail@plt+0x58a0>
   170a0:	b	1705c <__assert_fail@plt+0x5c7c>
   170a4:	mov	r6, #1
   170a8:	b	16c80 <__assert_fail@plt+0x58a0>
   170ac:	mov	r0, #0
   170b0:	str	r0, [fp, #-36]	; 0xffffffdc
   170b4:	str	r0, [fp, #-40]	; 0xffffffd8
   170b8:	cmn	lr, #1
   170bc:	bne	170d0 <__assert_fail@plt+0x5cf0>
   170c0:	mov	r0, ip
   170c4:	bl	11278 <strlen@plt>
   170c8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   170cc:	mov	lr, r0
   170d0:	ldr	r0, [sp, #76]	; 0x4c
   170d4:	add	r0, r0, r7
   170d8:	str	r0, [sp, #24]
   170dc:	mov	r6, #1
   170e0:	mov	r2, #0
   170e4:	sub	r0, fp, #40	; 0x28
   170e8:	mov	r3, r0
   170ec:	str	r5, [sp, #28]
   170f0:	str	lr, [sp, #32]
   170f4:	b	17138 <__assert_fail@plt+0x5d58>
   170f8:	ldr	r5, [sp, #52]	; 0x34
   170fc:	add	r5, r0, r5
   17100:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17104:	bl	111a0 <iswprint@plt>
   17108:	cmp	r0, #0
   1710c:	movwne	r0, #1
   17110:	and	r6, r6, r0
   17114:	sub	r0, fp, #40	; 0x28
   17118:	bl	11164 <mbsinit@plt>
   1711c:	sub	r3, fp, #40	; 0x28
   17120:	mov	r2, r5
   17124:	ldr	lr, [sp, #32]
   17128:	cmp	r0, #0
   1712c:	ldr	r5, [sp, #28]
   17130:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17134:	bne	16fc4 <__assert_fail@plt+0x5be4>
   17138:	str	r2, [sp, #52]	; 0x34
   1713c:	add	r0, r2, r7
   17140:	add	r1, ip, r0
   17144:	str	r0, [sp, #48]	; 0x30
   17148:	sub	r2, lr, r0
   1714c:	sub	r0, fp, #44	; 0x2c
   17150:	bl	19584 <__assert_fail@plt+0x81a4>
   17154:	cmp	r0, #0
   17158:	beq	174d0 <__assert_fail@plt+0x60f0>
   1715c:	cmn	r0, #1
   17160:	beq	1748c <__assert_fail@plt+0x60ac>
   17164:	cmn	r0, #2
   17168:	ldr	lr, [sp, #32]
   1716c:	beq	17494 <__assert_fail@plt+0x60b4>
   17170:	cmp	r0, #2
   17174:	mov	r1, #0
   17178:	movwcc	r1, #1
   1717c:	ldr	r2, [sp, #68]	; 0x44
   17180:	eor	r2, r2, #1
   17184:	orrs	r1, r2, r1
   17188:	bne	170f8 <__assert_fail@plt+0x5d18>
   1718c:	ldr	r1, [sp, #52]	; 0x34
   17190:	ldr	r2, [sp, #24]
   17194:	add	r1, r2, r1
   17198:	sub	r2, r0, #1
   1719c:	b	171ac <__assert_fail@plt+0x5dcc>
   171a0:	add	r1, r1, #1
   171a4:	subs	r2, r2, #1
   171a8:	beq	170f8 <__assert_fail@plt+0x5d18>
   171ac:	ldrb	r3, [r1]
   171b0:	sub	r3, r3, #91	; 0x5b
   171b4:	cmp	r3, #33	; 0x21
   171b8:	bhi	171a0 <__assert_fail@plt+0x5dc0>
   171bc:	add	r5, pc, #0
   171c0:	ldr	pc, [r5, r3, lsl #2]
   171c4:			; <UNDEFINED> instruction: 0x000175bc
   171c8:			; <UNDEFINED> instruction: 0x000175bc
   171cc:	andeq	r7, r1, r0, lsr #3
   171d0:			; <UNDEFINED> instruction: 0x000175bc
   171d4:	andeq	r7, r1, r0, lsr #3
   171d8:			; <UNDEFINED> instruction: 0x000175bc
   171dc:	andeq	r7, r1, r0, lsr #3
   171e0:	andeq	r7, r1, r0, lsr #3
   171e4:	andeq	r7, r1, r0, lsr #3
   171e8:	andeq	r7, r1, r0, lsr #3
   171ec:	andeq	r7, r1, r0, lsr #3
   171f0:	andeq	r7, r1, r0, lsr #3
   171f4:	andeq	r7, r1, r0, lsr #3
   171f8:	andeq	r7, r1, r0, lsr #3
   171fc:	andeq	r7, r1, r0, lsr #3
   17200:	andeq	r7, r1, r0, lsr #3
   17204:	andeq	r7, r1, r0, lsr #3
   17208:	andeq	r7, r1, r0, lsr #3
   1720c:	andeq	r7, r1, r0, lsr #3
   17210:	andeq	r7, r1, r0, lsr #3
   17214:	andeq	r7, r1, r0, lsr #3
   17218:	andeq	r7, r1, r0, lsr #3
   1721c:	andeq	r7, r1, r0, lsr #3
   17220:	andeq	r7, r1, r0, lsr #3
   17224:	andeq	r7, r1, r0, lsr #3
   17228:	andeq	r7, r1, r0, lsr #3
   1722c:	andeq	r7, r1, r0, lsr #3
   17230:	andeq	r7, r1, r0, lsr #3
   17234:	andeq	r7, r1, r0, lsr #3
   17238:	andeq	r7, r1, r0, lsr #3
   1723c:	andeq	r7, r1, r0, lsr #3
   17240:	andeq	r7, r1, r0, lsr #3
   17244:	andeq	r7, r1, r0, lsr #3
   17248:			; <UNDEFINED> instruction: 0x000175bc
   1724c:	mov	r8, r0
   17250:	b	16c80 <__assert_fail@plt+0x58a0>
   17254:	ldr	r0, [sp, #36]	; 0x24
   17258:	cmp	r0, #0
   1725c:	beq	172fc <__assert_fail@plt+0x5f1c>
   17260:	add	r0, r7, #2
   17264:	cmp	r0, lr
   17268:	bcs	172fc <__assert_fail@plt+0x5f1c>
   1726c:	add	r1, r7, ip
   17270:	ldrb	r1, [r1, #1]
   17274:	cmp	r1, #63	; 0x3f
   17278:	bne	172fc <__assert_fail@plt+0x5f1c>
   1727c:	ldrb	r1, [ip, r0]
   17280:	sub	r2, r1, #33	; 0x21
   17284:	cmp	r2, #29
   17288:	bhi	172fc <__assert_fail@plt+0x5f1c>
   1728c:	mov	r3, #1
   17290:	movw	r6, #20929	; 0x51c1
   17294:	movt	r6, #14336	; 0x3800
   17298:	tst	r6, r3, lsl r2
   1729c:	beq	172fc <__assert_fail@plt+0x5f1c>
   172a0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   172a4:	tst	r2, #1
   172a8:	bne	175c4 <__assert_fail@plt+0x61e4>
   172ac:	cmp	r8, sl
   172b0:	movcc	r2, #63	; 0x3f
   172b4:	strbcc	r2, [r5, r8]
   172b8:	add	r2, r8, #1
   172bc:	cmp	r2, sl
   172c0:	movcc	r3, #34	; 0x22
   172c4:	strbcc	r3, [r5, r2]
   172c8:	add	r2, r8, #2
   172cc:	cmp	r2, sl
   172d0:	movcc	r3, #34	; 0x22
   172d4:	strbcc	r3, [r5, r2]
   172d8:	add	r2, r8, #3
   172dc:	cmp	r2, sl
   172e0:	movcc	r3, #63	; 0x3f
   172e4:	strbcc	r3, [r5, r2]
   172e8:	add	r8, r8, #4
   172ec:	mov	r7, r0
   172f0:	mov	r4, r1
   172f4:	mov	r6, #0
   172f8:	b	16c80 <__assert_fail@plt+0x58a0>
   172fc:	mov	r6, #0
   17300:	b	16c80 <__assert_fail@plt+0x58a0>
   17304:	add	r0, r2, r7
   17308:	str	r0, [sp, #52]	; 0x34
   1730c:	mov	r2, #0
   17310:	ldr	lr, [sp, #32]
   17314:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17318:	str	r1, [sp, #48]	; 0x30
   1731c:	tst	r1, #1
   17320:	bne	173fc <__assert_fail@plt+0x601c>
   17324:	ldr	r1, [fp, #-76]	; 0xffffffb4
   17328:	tst	r1, #1
   1732c:	bne	175c4 <__assert_fail@plt+0x61e4>
   17330:	mov	r3, r0
   17334:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17338:	subs	r1, r0, #2
   1733c:	movwne	r1, #1
   17340:	orr	r1, r1, r3
   17344:	tst	r1, #1
   17348:	bne	17380 <__assert_fail@plt+0x5fa0>
   1734c:	cmp	r8, sl
   17350:	movcc	r0, #39	; 0x27
   17354:	strbcc	r0, [r5, r8]
   17358:	add	r2, r8, #1
   1735c:	cmp	r2, sl
   17360:	movcc	r0, #36	; 0x24
   17364:	strbcc	r0, [r5, r2]
   17368:	add	r2, r8, #2
   1736c:	cmp	r2, sl
   17370:	movcc	r0, #39	; 0x27
   17374:	strbcc	r0, [r5, r2]
   17378:	add	r8, r8, #3
   1737c:	mov	r3, #1
   17380:	cmp	r8, sl
   17384:	movcc	r1, #92	; 0x5c
   17388:	strbcc	r1, [r5, r8]
   1738c:	add	r2, r8, #1
   17390:	cmp	r2, sl
   17394:	bcs	173a8 <__assert_fail@plt+0x5fc8>
   17398:	uxtb	r1, r4
   1739c:	mov	r0, #48	; 0x30
   173a0:	orr	r1, r0, r1, lsr #6
   173a4:	strb	r1, [r5, r2]
   173a8:	add	r2, r8, #2
   173ac:	cmp	r2, sl
   173b0:	lsrcc	r1, r4, #3
   173b4:	movcc	r0, #6
   173b8:	bficc	r1, r0, #3, #29
   173bc:	strbcc	r1, [r5, r2]
   173c0:	mov	r0, #6
   173c4:	bfi	r4, r0, #3, #29
   173c8:	add	r8, r8, #3
   173cc:	mov	r2, #1
   173d0:	mov	r0, r3
   173d4:	b	17420 <__assert_fail@plt+0x6040>
   173d8:	cmp	r8, sl
   173dc:	strbcc	r4, [r5, r8]
   173e0:	ldr	r1, [sp, #76]	; 0x4c
   173e4:	ldrb	r4, [r1, r7]
   173e8:	add	r8, r8, #1
   173ec:	mov	r7, r3
   173f0:	ldr	r1, [sp, #48]	; 0x30
   173f4:	tst	r1, #1
   173f8:	beq	17324 <__assert_fail@plt+0x5f44>
   173fc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17400:	tst	r1, #1
   17404:	beq	17418 <__assert_fail@plt+0x6038>
   17408:	cmp	r8, sl
   1740c:	movcc	r1, #92	; 0x5c
   17410:	strbcc	r1, [r5, r8]
   17414:	add	r8, r8, #1
   17418:	mov	r1, #0
   1741c:	str	r1, [fp, #-52]	; 0xffffffcc
   17420:	and	r9, r2, #1
   17424:	add	r3, r7, #1
   17428:	ldr	r1, [sp, #52]	; 0x34
   1742c:	cmp	r1, r3
   17430:	bls	17474 <__assert_fail@plt+0x6094>
   17434:	cmp	r9, #0
   17438:	movwne	r9, #1
   1743c:	mvn	r1, r0
   17440:	orr	r1, r1, r9
   17444:	tst	r1, #1
   17448:	bne	173d8 <__assert_fail@plt+0x5ff8>
   1744c:	cmp	r8, sl
   17450:	movcc	r1, #39	; 0x27
   17454:	strbcc	r1, [r5, r8]
   17458:	add	r1, r8, #1
   1745c:	cmp	r1, sl
   17460:	movcc	r0, #39	; 0x27
   17464:	strbcc	r0, [r5, r1]
   17468:	add	r8, r8, #2
   1746c:	mov	r0, #0
   17470:	b	173d8 <__assert_fail@plt+0x5ff8>
   17474:	str	r0, [fp, #-56]	; 0xffffffc8
   17478:	cmp	r9, #0
   1747c:	movwne	r9, #1
   17480:	cmp	r9, #0
   17484:	beq	17008 <__assert_fail@plt+0x5c28>
   17488:	b	1703c <__assert_fail@plt+0x5c5c>
   1748c:	mov	r6, #0
   17490:	b	174d0 <__assert_fail@plt+0x60f0>
   17494:	mov	r6, #0
   17498:	ldr	r0, [sp, #48]	; 0x30
   1749c:	cmp	r0, lr
   174a0:	bcs	174d0 <__assert_fail@plt+0x60f0>
   174a4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   174a8:	add	r0, ip, r7
   174ac:	ldr	r2, [sp, #52]	; 0x34
   174b0:	ldrb	r1, [r0, r2]
   174b4:	cmp	r1, #0
   174b8:	beq	16fc4 <__assert_fail@plt+0x5be4>
   174bc:	add	r2, r2, #1
   174c0:	add	r1, r7, r2
   174c4:	cmp	r1, lr
   174c8:	bcc	174b0 <__assert_fail@plt+0x60d0>
   174cc:	b	16fc4 <__assert_fail@plt+0x5be4>
   174d0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   174d4:	ldr	r2, [sp, #52]	; 0x34
   174d8:	b	16fc4 <__assert_fail@plt+0x5be4>
   174dc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   174e0:	eor	r0, r1, #2
   174e4:	orr	r0, r0, r8
   174e8:	clz	r0, r0
   174ec:	lsr	r0, r0, #5
   174f0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   174f4:	tst	r3, r0
   174f8:	bne	175c4 <__assert_fail@plt+0x61e4>
   174fc:	mov	r6, r5
   17500:	subs	r0, r1, #2
   17504:	movwne	r0, #1
   17508:	orr	r0, r3, r0
   1750c:	tst	r0, #1
   17510:	ldr	r2, [sp, #92]	; 0x5c
   17514:	ldreq	r0, [sp, #64]	; 0x40
   17518:	eoreq	r0, r0, #1
   1751c:	tsteq	r0, #1
   17520:	bne	17560 <__assert_fail@plt+0x6180>
   17524:	mov	r9, lr
   17528:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1752c:	tst	r0, #1
   17530:	bne	1762c <__assert_fail@plt+0x624c>
   17534:	ldr	r0, [sp, #84]	; 0x54
   17538:	cmp	r0, #0
   1753c:	beq	17560 <__assert_fail@plt+0x6180>
   17540:	mov	r0, #0
   17544:	str	r0, [fp, #-48]	; 0xffffffd0
   17548:	mov	r1, #2
   1754c:	cmp	sl, #0
   17550:	mov	r0, r2
   17554:	mov	r4, r3
   17558:	ldr	r7, [sp, #84]	; 0x54
   1755c:	beq	16738 <__assert_fail@plt+0x5358>
   17560:	ldr	r1, [fp, #-84]	; 0xffffffac
   17564:	clz	r0, r1
   17568:	lsr	r0, r0, #5
   1756c:	orr	r0, r0, r3
   17570:	tst	r0, #1
   17574:	bne	175a0 <__assert_fail@plt+0x61c0>
   17578:	ldrb	r0, [r1]
   1757c:	cmp	r0, #0
   17580:	beq	175a0 <__assert_fail@plt+0x61c0>
   17584:	add	r1, r1, #1
   17588:	cmp	r8, sl
   1758c:	strbcc	r0, [r6, r8]
   17590:	add	r8, r8, #1
   17594:	ldrb	r0, [r1], #1
   17598:	cmp	r0, #0
   1759c:	bne	17588 <__assert_fail@plt+0x61a8>
   175a0:	cmp	r8, sl
   175a4:	movcc	r0, #0
   175a8:	strbcc	r0, [r6, r8]
   175ac:	b	17620 <__assert_fail@plt+0x6240>
   175b0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   175b4:	mov	lr, r4
   175b8:	b	175c4 <__assert_fail@plt+0x61e4>
   175bc:	ldr	r5, [sp, #28]
   175c0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   175c4:	mov	r0, #0
   175c8:	ldr	r1, [fp, #12]
   175cc:	bic	r1, r1, #2
   175d0:	mov	r2, #2
   175d4:	ldr	r3, [sp, #92]	; 0x5c
   175d8:	tst	r3, #1
   175dc:	movwne	r2, #4
   175e0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   175e4:	cmp	r3, #2
   175e8:	movne	r2, r3
   175ec:	str	r2, [sp]
   175f0:	str	r1, [sp, #4]
   175f4:	str	r0, [sp, #8]
   175f8:	ldr	r0, [sp, #80]	; 0x50
   175fc:	str	r0, [sp, #12]
   17600:	ldr	r0, [sp, #88]	; 0x58
   17604:	str	r0, [sp, #16]
   17608:	mov	r0, r5
   1760c:	mov	r1, sl
   17610:	mov	r2, ip
   17614:	mov	r3, lr
   17618:	bl	166ac <__assert_fail@plt+0x52cc>
   1761c:	mov	r8, r0
   17620:	mov	r0, r8
   17624:	sub	sp, fp, #28
   17628:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1762c:	mov	r0, #5
   17630:	str	r0, [sp]
   17634:	ldr	r0, [fp, #12]
   17638:	str	r0, [sp, #4]
   1763c:	ldr	r0, [fp, #16]
   17640:	str	r0, [sp, #8]
   17644:	ldr	r0, [sp, #80]	; 0x50
   17648:	str	r0, [sp, #12]
   1764c:	ldr	r0, [sp, #88]	; 0x58
   17650:	str	r0, [sp, #16]
   17654:	mov	r0, r6
   17658:	ldr	r1, [sp, #84]	; 0x54
   1765c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   17660:	mov	r3, r9
   17664:	b	17618 <__assert_fail@plt+0x6238>
   17668:	bl	113b0 <abort@plt>
   1766c:	mov	r3, r2
   17670:	mov	r2, #0
   17674:	b	17678 <__assert_fail@plt+0x6298>
   17678:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1767c:	add	fp, sp, #28
   17680:	sub	sp, sp, #36	; 0x24
   17684:	mov	r4, r2
   17688:	str	r2, [sp, #24]
   1768c:	mov	r5, r1
   17690:	mov	r6, r0
   17694:	str	r0, [sp, #20]
   17698:	movw	r8, #45496	; 0xb1b8
   1769c:	movt	r8, #2
   176a0:	cmp	r3, #0
   176a4:	movne	r8, r3
   176a8:	bl	1129c <__errno_location@plt>
   176ac:	str	r0, [sp, #28]
   176b0:	ldm	r8, {r3, r9}
   176b4:	ldr	r1, [r8, #40]	; 0x28
   176b8:	ldr	r2, [r8, #44]	; 0x2c
   176bc:	ldr	r7, [r0]
   176c0:	str	r7, [sp, #32]
   176c4:	add	sl, r8, #8
   176c8:	cmp	r4, #0
   176cc:	orreq	r9, r9, #1
   176d0:	stm	sp, {r3, r9, sl}
   176d4:	str	r1, [sp, #12]
   176d8:	str	r2, [sp, #16]
   176dc:	mov	r0, #0
   176e0:	mov	r1, #0
   176e4:	mov	r2, r6
   176e8:	mov	r3, r5
   176ec:	mov	r7, r5
   176f0:	bl	166ac <__assert_fail@plt+0x52cc>
   176f4:	mov	r5, r0
   176f8:	add	r4, r0, #1
   176fc:	mov	r0, r4
   17700:	bl	1861c <__assert_fail@plt+0x723c>
   17704:	mov	r6, r0
   17708:	ldr	r0, [r8]
   1770c:	ldr	r1, [r8, #40]	; 0x28
   17710:	ldr	r2, [r8, #44]	; 0x2c
   17714:	stm	sp, {r0, r9, sl}
   17718:	str	r1, [sp, #12]
   1771c:	str	r2, [sp, #16]
   17720:	mov	r0, r6
   17724:	mov	r1, r4
   17728:	ldr	r2, [sp, #20]
   1772c:	mov	r3, r7
   17730:	bl	166ac <__assert_fail@plt+0x52cc>
   17734:	ldr	r0, [sp, #24]
   17738:	ldr	r1, [sp, #32]
   1773c:	ldr	r2, [sp, #28]
   17740:	str	r1, [r2]
   17744:	cmp	r0, #0
   17748:	strne	r5, [r0]
   1774c:	mov	r0, r6
   17750:	sub	sp, fp, #28
   17754:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17758:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1775c:	add	fp, sp, #24
   17760:	movw	r8, #45352	; 0xb128
   17764:	movt	r8, #2
   17768:	ldr	r4, [r8]
   1776c:	movw	r5, #45356	; 0xb12c
   17770:	movt	r5, #2
   17774:	ldr	r0, [r5]
   17778:	cmp	r0, #2
   1777c:	blt	177a8 <__assert_fail@plt+0x63c8>
   17780:	add	r7, r4, #12
   17784:	mov	r6, #0
   17788:	ldr	r0, [r7, r6, lsl #3]
   1778c:	bl	1942c <__assert_fail@plt+0x804c>
   17790:	add	r0, r6, #1
   17794:	ldr	r1, [r5]
   17798:	add	r2, r6, #2
   1779c:	cmp	r2, r1
   177a0:	mov	r6, r0
   177a4:	blt	17788 <__assert_fail@plt+0x63a8>
   177a8:	ldr	r0, [r4, #4]
   177ac:	movw	r9, #45544	; 0xb1e8
   177b0:	movt	r9, #2
   177b4:	cmp	r0, r9
   177b8:	movw	r7, #45360	; 0xb130
   177bc:	movt	r7, #2
   177c0:	beq	177d0 <__assert_fail@plt+0x63f0>
   177c4:	bl	1942c <__assert_fail@plt+0x804c>
   177c8:	mov	r0, #256	; 0x100
   177cc:	stm	r7, {r0, r9}
   177d0:	cmp	r4, r7
   177d4:	beq	177e4 <__assert_fail@plt+0x6404>
   177d8:	mov	r0, r4
   177dc:	bl	1942c <__assert_fail@plt+0x804c>
   177e0:	str	r7, [r8]
   177e4:	mov	r0, #1
   177e8:	str	r0, [r5]
   177ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   177f0:	movw	r3, #45496	; 0xb1b8
   177f4:	movt	r3, #2
   177f8:	mvn	r2, #0
   177fc:	b	17800 <__assert_fail@plt+0x6420>
   17800:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17804:	add	fp, sp, #28
   17808:	sub	sp, sp, #44	; 0x2c
   1780c:	mov	r7, r3
   17810:	str	r2, [sp, #36]	; 0x24
   17814:	str	r1, [sp, #32]
   17818:	mov	r5, r0
   1781c:	bl	1129c <__errno_location@plt>
   17820:	cmp	r5, #0
   17824:	bmi	17994 <__assert_fail@plt+0x65b4>
   17828:	cmn	r5, #-2147483647	; 0x80000001
   1782c:	beq	17994 <__assert_fail@plt+0x65b4>
   17830:	movw	r4, #45352	; 0xb128
   17834:	movt	r4, #2
   17838:	ldr	r6, [r4]
   1783c:	str	r0, [sp, #28]
   17840:	ldr	r0, [r0]
   17844:	str	r0, [sp, #24]
   17848:	movw	r8, #45356	; 0xb12c
   1784c:	movt	r8, #2
   17850:	ldr	r1, [r8]
   17854:	cmp	r1, r5
   17858:	ble	17864 <__assert_fail@plt+0x6484>
   1785c:	mov	sl, r6
   17860:	b	178d0 <__assert_fail@plt+0x64f0>
   17864:	str	r1, [fp, #-32]	; 0xffffffe0
   17868:	mov	r0, #8
   1786c:	str	r0, [sp]
   17870:	movw	r9, #45360	; 0xb130
   17874:	movt	r9, #2
   17878:	subs	r0, r6, r9
   1787c:	movne	r0, r6
   17880:	sub	r1, r5, r1
   17884:	add	r2, r1, #1
   17888:	sub	r1, fp, #32
   1788c:	mvn	r3, #-2147483648	; 0x80000000
   17890:	bl	186f8 <__assert_fail@plt+0x7318>
   17894:	mov	sl, r0
   17898:	str	r0, [r4]
   1789c:	cmp	r6, r9
   178a0:	bne	178ac <__assert_fail@plt+0x64cc>
   178a4:	ldrd	r0, [r9]
   178a8:	stm	sl, {r0, r1}
   178ac:	ldr	r1, [r8]
   178b0:	add	r0, sl, r1, lsl #3
   178b4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   178b8:	sub	r1, r2, r1
   178bc:	lsl	r2, r1, #3
   178c0:	mov	r1, #0
   178c4:	bl	112c0 <memset@plt>
   178c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   178cc:	str	r0, [r8]
   178d0:	mov	r9, sl
   178d4:	ldr	r6, [r9, r5, lsl #3]!
   178d8:	ldr	r4, [r9, #4]!
   178dc:	ldm	r7, {r0, r1}
   178e0:	ldr	r2, [r7, #40]	; 0x28
   178e4:	ldr	r3, [r7, #44]	; 0x2c
   178e8:	orr	r8, r1, #1
   178ec:	add	r1, r7, #8
   178f0:	stm	sp, {r0, r8}
   178f4:	str	r1, [sp, #20]
   178f8:	add	r0, sp, #8
   178fc:	stm	r0, {r1, r2, r3}
   17900:	mov	r0, r4
   17904:	mov	r1, r6
   17908:	ldr	r2, [sp, #32]
   1790c:	ldr	r3, [sp, #36]	; 0x24
   17910:	bl	166ac <__assert_fail@plt+0x52cc>
   17914:	cmp	r6, r0
   17918:	bhi	1797c <__assert_fail@plt+0x659c>
   1791c:	add	r6, r0, #1
   17920:	str	r6, [sl, r5, lsl #3]
   17924:	movw	r0, #45544	; 0xb1e8
   17928:	movt	r0, #2
   1792c:	cmp	r4, r0
   17930:	beq	1793c <__assert_fail@plt+0x655c>
   17934:	mov	r0, r4
   17938:	bl	1942c <__assert_fail@plt+0x804c>
   1793c:	mov	r0, r6
   17940:	bl	1861c <__assert_fail@plt+0x723c>
   17944:	mov	r4, r0
   17948:	str	r0, [r9]
   1794c:	ldr	r0, [r7]
   17950:	ldr	r1, [r7, #40]	; 0x28
   17954:	ldr	r2, [r7, #44]	; 0x2c
   17958:	stm	sp, {r0, r8}
   1795c:	ldr	r0, [sp, #20]
   17960:	add	r3, sp, #8
   17964:	stm	r3, {r0, r1, r2}
   17968:	mov	r0, r4
   1796c:	mov	r1, r6
   17970:	ldr	r2, [sp, #32]
   17974:	ldr	r3, [sp, #36]	; 0x24
   17978:	bl	166ac <__assert_fail@plt+0x52cc>
   1797c:	ldr	r0, [sp, #28]
   17980:	ldr	r1, [sp, #24]
   17984:	str	r1, [r0]
   17988:	mov	r0, r4
   1798c:	sub	sp, fp, #28
   17990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17994:	bl	113b0 <abort@plt>
   17998:	movw	r3, #45496	; 0xb1b8
   1799c:	movt	r3, #2
   179a0:	b	17800 <__assert_fail@plt+0x6420>
   179a4:	mov	r1, r0
   179a8:	mov	r0, #0
   179ac:	b	177f0 <__assert_fail@plt+0x6410>
   179b0:	mov	r2, r1
   179b4:	mov	r1, r0
   179b8:	mov	r0, #0
   179bc:	b	17998 <__assert_fail@plt+0x65b8>
   179c0:	push	{r4, r5, r6, sl, fp, lr}
   179c4:	add	fp, sp, #16
   179c8:	sub	sp, sp, #48	; 0x30
   179cc:	mov	r4, r2
   179d0:	mov	r5, r0
   179d4:	mov	r6, sp
   179d8:	mov	r0, r6
   179dc:	bl	179fc <__assert_fail@plt+0x661c>
   179e0:	mov	r0, r5
   179e4:	mov	r1, r4
   179e8:	mvn	r2, #0
   179ec:	mov	r3, r6
   179f0:	bl	17800 <__assert_fail@plt+0x6420>
   179f4:	sub	sp, fp, #16
   179f8:	pop	{r4, r5, r6, sl, fp, pc}
   179fc:	push	{fp, lr}
   17a00:	mov	fp, sp
   17a04:	vmov.i32	q8, #0	; 0x00000000
   17a08:	mov	r2, #32
   17a0c:	mov	r3, r0
   17a10:	vst1.32	{d16-d17}, [r3], r2
   17a14:	vst1.32	{d16-d17}, [r3]
   17a18:	add	r2, r0, #16
   17a1c:	vst1.32	{d16-d17}, [r2]
   17a20:	cmp	r1, #10
   17a24:	strne	r1, [r0]
   17a28:	popne	{fp, pc}
   17a2c:	bl	113b0 <abort@plt>
   17a30:	push	{r4, r5, r6, r7, fp, lr}
   17a34:	add	fp, sp, #16
   17a38:	sub	sp, sp, #48	; 0x30
   17a3c:	mov	r4, r3
   17a40:	mov	r5, r2
   17a44:	mov	r6, r0
   17a48:	mov	r7, sp
   17a4c:	mov	r0, r7
   17a50:	bl	179fc <__assert_fail@plt+0x661c>
   17a54:	mov	r0, r6
   17a58:	mov	r1, r5
   17a5c:	mov	r2, r4
   17a60:	mov	r3, r7
   17a64:	bl	17800 <__assert_fail@plt+0x6420>
   17a68:	sub	sp, fp, #16
   17a6c:	pop	{r4, r5, r6, r7, fp, pc}
   17a70:	mov	r2, r1
   17a74:	mov	r1, r0
   17a78:	mov	r0, #0
   17a7c:	b	179c0 <__assert_fail@plt+0x65e0>
   17a80:	mov	r3, r2
   17a84:	mov	r2, r1
   17a88:	mov	r1, r0
   17a8c:	mov	r0, #0
   17a90:	b	17a30 <__assert_fail@plt+0x6650>
   17a94:	push	{r4, r5, r6, sl, fp, lr}
   17a98:	add	fp, sp, #16
   17a9c:	sub	sp, sp, #48	; 0x30
   17aa0:	mov	r4, r1
   17aa4:	mov	r5, r0
   17aa8:	movw	r0, #45496	; 0xb1b8
   17aac:	movt	r0, #2
   17ab0:	add	r1, r0, #16
   17ab4:	mov	r3, #32
   17ab8:	vld1.64	{d16-d17}, [r0], r3
   17abc:	vld1.64	{d18-d19}, [r1]
   17ac0:	mov	r6, sp
   17ac4:	add	r1, r6, #16
   17ac8:	vld1.64	{d20-d21}, [r0]
   17acc:	vst1.64	{d18-d19}, [r1]
   17ad0:	mov	r0, r6
   17ad4:	vst1.64	{d16-d17}, [r0], r3
   17ad8:	vst1.64	{d20-d21}, [r0]
   17adc:	mov	r0, r6
   17ae0:	mov	r1, r2
   17ae4:	mov	r2, #1
   17ae8:	bl	165a0 <__assert_fail@plt+0x51c0>
   17aec:	mov	r0, #0
   17af0:	mov	r1, r5
   17af4:	mov	r2, r4
   17af8:	mov	r3, r6
   17afc:	bl	17800 <__assert_fail@plt+0x6420>
   17b00:	sub	sp, fp, #16
   17b04:	pop	{r4, r5, r6, sl, fp, pc}
   17b08:	mov	r2, r1
   17b0c:	mvn	r1, #0
   17b10:	b	17a94 <__assert_fail@plt+0x66b4>
   17b14:	mov	r1, #58	; 0x3a
   17b18:	b	17b08 <__assert_fail@plt+0x6728>
   17b1c:	mov	r2, #58	; 0x3a
   17b20:	b	17a94 <__assert_fail@plt+0x66b4>
   17b24:	push	{r4, r5, r6, sl, fp, lr}
   17b28:	add	fp, sp, #16
   17b2c:	sub	sp, sp, #48	; 0x30
   17b30:	mov	r4, r2
   17b34:	mov	r5, r0
   17b38:	mov	r6, sp
   17b3c:	mov	r0, r6
   17b40:	bl	179fc <__assert_fail@plt+0x661c>
   17b44:	mov	r0, r6
   17b48:	mov	r1, #58	; 0x3a
   17b4c:	mov	r2, #1
   17b50:	bl	165a0 <__assert_fail@plt+0x51c0>
   17b54:	mov	r0, r5
   17b58:	mov	r1, r4
   17b5c:	mvn	r2, #0
   17b60:	mov	r3, r6
   17b64:	bl	17800 <__assert_fail@plt+0x6420>
   17b68:	sub	sp, fp, #16
   17b6c:	pop	{r4, r5, r6, sl, fp, pc}
   17b70:	push	{fp, lr}
   17b74:	mov	fp, sp
   17b78:	sub	sp, sp, #8
   17b7c:	mvn	ip, #0
   17b80:	str	ip, [sp]
   17b84:	bl	17b90 <__assert_fail@plt+0x67b0>
   17b88:	mov	sp, fp
   17b8c:	pop	{fp, pc}
   17b90:	push	{r4, r5, r6, r7, fp, lr}
   17b94:	add	fp, sp, #16
   17b98:	sub	sp, sp, #48	; 0x30
   17b9c:	mov	r7, r3
   17ba0:	mov	r5, r0
   17ba4:	movw	r0, #45496	; 0xb1b8
   17ba8:	movt	r0, #2
   17bac:	add	r3, r0, #16
   17bb0:	mov	r4, #32
   17bb4:	vld1.64	{d16-d17}, [r0], r4
   17bb8:	vld1.64	{d18-d19}, [r3]
   17bbc:	mov	r6, sp
   17bc0:	add	r3, r6, #16
   17bc4:	vld1.64	{d20-d21}, [r0]
   17bc8:	vst1.64	{d18-d19}, [r3]
   17bcc:	mov	r0, r6
   17bd0:	vst1.64	{d16-d17}, [r0], r4
   17bd4:	vst1.64	{d20-d21}, [r0]
   17bd8:	mov	r0, r6
   17bdc:	bl	165f8 <__assert_fail@plt+0x5218>
   17be0:	ldr	r2, [fp, #8]
   17be4:	mov	r0, r5
   17be8:	mov	r1, r7
   17bec:	mov	r3, r6
   17bf0:	bl	17800 <__assert_fail@plt+0x6420>
   17bf4:	sub	sp, fp, #16
   17bf8:	pop	{r4, r5, r6, r7, fp, pc}
   17bfc:	mov	r3, r2
   17c00:	mov	r2, r1
   17c04:	mov	r1, r0
   17c08:	mov	r0, #0
   17c0c:	b	17b70 <__assert_fail@plt+0x6790>
   17c10:	push	{fp, lr}
   17c14:	mov	fp, sp
   17c18:	sub	sp, sp, #8
   17c1c:	mov	ip, r2
   17c20:	mov	r2, r1
   17c24:	mov	r1, r0
   17c28:	str	r3, [sp]
   17c2c:	mov	r0, #0
   17c30:	mov	r3, ip
   17c34:	bl	17b90 <__assert_fail@plt+0x67b0>
   17c38:	mov	sp, fp
   17c3c:	pop	{fp, pc}
   17c40:	movw	r3, #45368	; 0xb138
   17c44:	movt	r3, #2
   17c48:	b	17800 <__assert_fail@plt+0x6420>
   17c4c:	mov	r2, r1
   17c50:	mov	r1, r0
   17c54:	mov	r0, #0
   17c58:	b	17c40 <__assert_fail@plt+0x6860>
   17c5c:	mvn	r2, #0
   17c60:	b	17c40 <__assert_fail@plt+0x6860>
   17c64:	mov	r1, r0
   17c68:	mov	r0, #0
   17c6c:	b	17c5c <__assert_fail@plt+0x687c>
   17c70:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17c74:	add	fp, sp, #24
   17c78:	sub	sp, sp, #16
   17c7c:	mov	r4, r1
   17c80:	mov	r5, r0
   17c84:	mov	r7, #0
   17c88:	mov	r0, #0
   17c8c:	mov	r1, r5
   17c90:	mov	r2, #5
   17c94:	bl	11170 <dcgettext@plt>
   17c98:	cmp	r0, r5
   17c9c:	beq	17ca8 <__assert_fail@plt+0x68c8>
   17ca0:	sub	sp, fp, #24
   17ca4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17ca8:	bl	1954c <__assert_fail@plt+0x816c>
   17cac:	mov	r6, r0
   17cb0:	mov	r8, #56	; 0x38
   17cb4:	mov	r0, #45	; 0x2d
   17cb8:	stm	sp, {r0, r8}
   17cbc:	str	r7, [sp, #8]
   17cc0:	str	r7, [sp, #12]
   17cc4:	mov	r0, r6
   17cc8:	mov	r1, #85	; 0x55
   17ccc:	mov	r2, #84	; 0x54
   17cd0:	mov	r3, #70	; 0x46
   17cd4:	bl	17d6c <__assert_fail@plt+0x698c>
   17cd8:	cmp	r0, #0
   17cdc:	beq	17cf8 <__assert_fail@plt+0x6918>
   17ce0:	ldrb	r1, [r5]
   17ce4:	movw	r2, #42282	; 0xa52a
   17ce8:	movt	r2, #1
   17cec:	movw	r0, #42286	; 0xa52e
   17cf0:	movt	r0, #1
   17cf4:	b	17d3c <__assert_fail@plt+0x695c>
   17cf8:	mov	r0, #48	; 0x30
   17cfc:	mov	r1, #51	; 0x33
   17d00:	str	r8, [sp]
   17d04:	stmib	sp, {r0, r1}
   17d08:	str	r0, [sp, #12]
   17d0c:	mov	r0, r6
   17d10:	mov	r1, #71	; 0x47
   17d14:	mov	r2, #66	; 0x42
   17d18:	mov	r3, #49	; 0x31
   17d1c:	bl	17d6c <__assert_fail@plt+0x698c>
   17d20:	cmp	r0, #0
   17d24:	beq	17d4c <__assert_fail@plt+0x696c>
   17d28:	ldrb	r1, [r5]
   17d2c:	movw	r2, #42290	; 0xa532
   17d30:	movt	r2, #1
   17d34:	movw	r0, #42294	; 0xa536
   17d38:	movt	r0, #1
   17d3c:	cmp	r1, #96	; 0x60
   17d40:	moveq	r0, r2
   17d44:	sub	sp, fp, #24
   17d48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17d4c:	movw	r1, #42276	; 0xa524
   17d50:	movt	r1, #1
   17d54:	movw	r0, #42280	; 0xa528
   17d58:	movt	r0, #1
   17d5c:	cmp	r4, #9
   17d60:	moveq	r0, r1
   17d64:	sub	sp, fp, #24
   17d68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17d6c:	push	{r4, r5, r6, r7, fp, lr}
   17d70:	add	fp, sp, #16
   17d74:	sub	sp, sp, #16
   17d78:	mov	r4, r3
   17d7c:	mov	r5, r2
   17d80:	mov	r7, r1
   17d84:	mov	r6, r0
   17d88:	mov	r0, r1
   17d8c:	bl	18efc <__assert_fail@plt+0x7b1c>
   17d90:	ldrb	r1, [r6]
   17d94:	cmp	r0, #0
   17d98:	andne	r1, r1, #223	; 0xdf
   17d9c:	mov	r0, #0
   17da0:	cmp	r1, r7
   17da4:	bne	17ddc <__assert_fail@plt+0x69fc>
   17da8:	cmp	r7, #0
   17dac:	beq	17de4 <__assert_fail@plt+0x6a04>
   17db0:	ldr	r0, [fp, #20]
   17db4:	ldr	r1, [fp, #16]
   17db8:	ldr	r2, [fp, #12]
   17dbc:	ldr	r3, [fp, #8]
   17dc0:	str	r2, [sp]
   17dc4:	str	r1, [sp, #4]
   17dc8:	str	r0, [sp, #8]
   17dcc:	mov	r0, r6
   17dd0:	mov	r1, r5
   17dd4:	mov	r2, r4
   17dd8:	bl	17df0 <__assert_fail@plt+0x6a10>
   17ddc:	sub	sp, fp, #16
   17de0:	pop	{r4, r5, r6, r7, fp, pc}
   17de4:	mov	r0, #1
   17de8:	sub	sp, fp, #16
   17dec:	pop	{r4, r5, r6, r7, fp, pc}
   17df0:	push	{r4, r5, r6, r7, fp, lr}
   17df4:	add	fp, sp, #16
   17df8:	sub	sp, sp, #8
   17dfc:	mov	r4, r3
   17e00:	mov	r5, r2
   17e04:	mov	r7, r1
   17e08:	mov	r6, r0
   17e0c:	mov	r0, r1
   17e10:	bl	18efc <__assert_fail@plt+0x7b1c>
   17e14:	ldrb	r1, [r6, #1]
   17e18:	cmp	r0, #0
   17e1c:	andne	r1, r1, #223	; 0xdf
   17e20:	mov	r0, #0
   17e24:	cmp	r1, r7
   17e28:	bne	17e58 <__assert_fail@plt+0x6a78>
   17e2c:	cmp	r7, #0
   17e30:	beq	17e60 <__assert_fail@plt+0x6a80>
   17e34:	ldr	r0, [fp, #16]
   17e38:	ldr	r1, [fp, #12]
   17e3c:	ldr	r3, [fp, #8]
   17e40:	str	r1, [sp]
   17e44:	str	r0, [sp, #4]
   17e48:	mov	r0, r6
   17e4c:	mov	r1, r5
   17e50:	mov	r2, r4
   17e54:	bl	17e6c <__assert_fail@plt+0x6a8c>
   17e58:	sub	sp, fp, #16
   17e5c:	pop	{r4, r5, r6, r7, fp, pc}
   17e60:	mov	r0, #1
   17e64:	sub	sp, fp, #16
   17e68:	pop	{r4, r5, r6, r7, fp, pc}
   17e6c:	push	{r4, r5, r6, r7, fp, lr}
   17e70:	add	fp, sp, #16
   17e74:	sub	sp, sp, #8
   17e78:	mov	r4, r3
   17e7c:	mov	r5, r2
   17e80:	mov	r7, r1
   17e84:	mov	r6, r0
   17e88:	mov	r0, r1
   17e8c:	bl	18efc <__assert_fail@plt+0x7b1c>
   17e90:	ldrb	r1, [r6, #2]
   17e94:	cmp	r0, #0
   17e98:	andne	r1, r1, #223	; 0xdf
   17e9c:	mov	r0, #0
   17ea0:	cmp	r1, r7
   17ea4:	bne	17ecc <__assert_fail@plt+0x6aec>
   17ea8:	cmp	r7, #0
   17eac:	beq	17ed4 <__assert_fail@plt+0x6af4>
   17eb0:	ldr	r0, [fp, #12]
   17eb4:	ldr	r3, [fp, #8]
   17eb8:	str	r0, [sp]
   17ebc:	mov	r0, r6
   17ec0:	mov	r1, r5
   17ec4:	mov	r2, r4
   17ec8:	bl	17ee0 <__assert_fail@plt+0x6b00>
   17ecc:	sub	sp, fp, #16
   17ed0:	pop	{r4, r5, r6, r7, fp, pc}
   17ed4:	mov	r0, #1
   17ed8:	sub	sp, fp, #16
   17edc:	pop	{r4, r5, r6, r7, fp, pc}
   17ee0:	push	{r4, r5, r6, r7, fp, lr}
   17ee4:	add	fp, sp, #16
   17ee8:	mov	r4, r3
   17eec:	mov	r5, r2
   17ef0:	mov	r7, r1
   17ef4:	mov	r6, r0
   17ef8:	mov	r0, r1
   17efc:	bl	18efc <__assert_fail@plt+0x7b1c>
   17f00:	ldrb	r1, [r6, #3]
   17f04:	ldr	r3, [fp, #8]
   17f08:	cmp	r0, #0
   17f0c:	andne	r1, r1, #223	; 0xdf
   17f10:	mov	r0, #0
   17f14:	cmp	r1, r7
   17f18:	bne	17f3c <__assert_fail@plt+0x6b5c>
   17f1c:	cmp	r7, #0
   17f20:	beq	17f38 <__assert_fail@plt+0x6b58>
   17f24:	mov	r0, r6
   17f28:	mov	r1, r5
   17f2c:	mov	r2, r4
   17f30:	pop	{r4, r5, r6, r7, fp, lr}
   17f34:	b	17f40 <__assert_fail@plt+0x6b60>
   17f38:	mov	r0, #1
   17f3c:	pop	{r4, r5, r6, r7, fp, pc}
   17f40:	push	{r4, r5, r6, r7, fp, lr}
   17f44:	add	fp, sp, #16
   17f48:	mov	r4, r3
   17f4c:	mov	r5, r2
   17f50:	mov	r7, r1
   17f54:	mov	r6, r0
   17f58:	mov	r0, r1
   17f5c:	bl	18efc <__assert_fail@plt+0x7b1c>
   17f60:	ldrb	r1, [r6, #4]
   17f64:	cmp	r0, #0
   17f68:	andne	r1, r1, #223	; 0xdf
   17f6c:	mov	r0, #0
   17f70:	cmp	r1, r7
   17f74:	bne	17f98 <__assert_fail@plt+0x6bb8>
   17f78:	cmp	r7, #0
   17f7c:	beq	17f94 <__assert_fail@plt+0x6bb4>
   17f80:	mov	r0, r6
   17f84:	mov	r1, r5
   17f88:	mov	r2, r4
   17f8c:	pop	{r4, r5, r6, r7, fp, lr}
   17f90:	b	17f9c <__assert_fail@plt+0x6bbc>
   17f94:	mov	r0, #1
   17f98:	pop	{r4, r5, r6, r7, fp, pc}
   17f9c:	push	{r4, r5, r6, sl, fp, lr}
   17fa0:	add	fp, sp, #16
   17fa4:	mov	r4, r2
   17fa8:	mov	r6, r1
   17fac:	mov	r5, r0
   17fb0:	mov	r0, r1
   17fb4:	bl	18efc <__assert_fail@plt+0x7b1c>
   17fb8:	ldrb	r1, [r5, #5]
   17fbc:	cmp	r0, #0
   17fc0:	andne	r1, r1, #223	; 0xdf
   17fc4:	mov	r0, #0
   17fc8:	cmp	r1, r6
   17fcc:	bne	17fec <__assert_fail@plt+0x6c0c>
   17fd0:	cmp	r6, #0
   17fd4:	beq	17fe8 <__assert_fail@plt+0x6c08>
   17fd8:	mov	r0, r5
   17fdc:	mov	r1, r4
   17fe0:	pop	{r4, r5, r6, sl, fp, lr}
   17fe4:	b	17ff0 <__assert_fail@plt+0x6c10>
   17fe8:	mov	r0, #1
   17fec:	pop	{r4, r5, r6, sl, fp, pc}
   17ff0:	push	{r4, r5, fp, lr}
   17ff4:	add	fp, sp, #8
   17ff8:	mov	r5, r1
   17ffc:	mov	r4, r0
   18000:	mov	r0, r1
   18004:	bl	18efc <__assert_fail@plt+0x7b1c>
   18008:	ldrb	r1, [r4, #6]
   1800c:	cmp	r0, #0
   18010:	andne	r1, r1, #223	; 0xdf
   18014:	mov	r0, #0
   18018:	cmp	r1, r5
   1801c:	popne	{r4, r5, fp, pc}
   18020:	cmp	r5, #0
   18024:	beq	18034 <__assert_fail@plt+0x6c54>
   18028:	mov	r0, r4
   1802c:	pop	{r4, r5, fp, lr}
   18030:	b	1803c <__assert_fail@plt+0x6c5c>
   18034:	mov	r0, #1
   18038:	pop	{r4, r5, fp, pc}
   1803c:	push	{r4, sl, fp, lr}
   18040:	add	fp, sp, #8
   18044:	mov	r4, r0
   18048:	mov	r0, #0
   1804c:	bl	18efc <__assert_fail@plt+0x7b1c>
   18050:	ldrb	r1, [r4, #7]
   18054:	cmp	r0, #0
   18058:	beq	1806c <__assert_fail@plt+0x6c8c>
   1805c:	tst	r1, #223	; 0xdf
   18060:	bne	18074 <__assert_fail@plt+0x6c94>
   18064:	mov	r0, #1
   18068:	pop	{r4, sl, fp, pc}
   1806c:	cmp	r1, #0
   18070:	beq	18064 <__assert_fail@plt+0x6c84>
   18074:	mov	r0, #0
   18078:	pop	{r4, sl, fp, pc}
   1807c:	push	{r4, sl, fp, lr}
   18080:	add	fp, sp, #8
   18084:	sub	sp, sp, #104	; 0x68
   18088:	mov	r4, r0
   1808c:	movw	r0, #43119	; 0xa86f
   18090:	movt	r0, #1
   18094:	mov	r1, sp
   18098:	bl	19950 <__assert_fail@plt+0x8570>
   1809c:	mov	r1, r0
   180a0:	mov	r0, #0
   180a4:	cmp	r1, #0
   180a8:	beq	180b4 <__assert_fail@plt+0x6cd4>
   180ac:	sub	sp, fp, #8
   180b0:	pop	{r4, sl, fp, pc}
   180b4:	ldr	r0, [sp, #96]	; 0x60
   180b8:	ldr	r1, [sp, #100]	; 0x64
   180bc:	ldm	sp, {r2, r3}
   180c0:	stm	r4, {r0, r1, r2, r3}
   180c4:	mov	r0, r4
   180c8:	sub	sp, fp, #8
   180cc:	pop	{r4, sl, fp, pc}
   180d0:	push	{r4, r5, r6, r7, fp, lr}
   180d4:	add	fp, sp, #16
   180d8:	mov	r4, r0
   180dc:	cmp	r0, #2
   180e0:	bhi	18110 <__assert_fail@plt+0x6d30>
   180e4:	mov	r0, r4
   180e8:	bl	19624 <__assert_fail@plt+0x8244>
   180ec:	mov	r5, r0
   180f0:	bl	1129c <__errno_location@plt>
   180f4:	mov	r6, r0
   180f8:	ldr	r7, [r0]
   180fc:	mov	r0, r4
   18100:	bl	113bc <close@plt>
   18104:	str	r7, [r6]
   18108:	mov	r0, r5
   1810c:	pop	{r4, r5, r6, r7, fp, pc}
   18110:	mov	r0, r4
   18114:	pop	{r4, r5, r6, r7, fp, pc}
   18118:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1811c:	add	fp, sp, #24
   18120:	sub	sp, sp, #32
   18124:	mov	r4, r2
   18128:	mov	r8, r0
   1812c:	ldr	r6, [fp, #12]
   18130:	ldr	r7, [fp, #8]
   18134:	cmp	r1, #0
   18138:	beq	18160 <__assert_fail@plt+0x6d80>
   1813c:	mov	r5, r1
   18140:	str	r4, [sp]
   18144:	str	r3, [sp, #4]
   18148:	movw	r2, #42384	; 0xa590
   1814c:	movt	r2, #1
   18150:	mov	r0, r8
   18154:	mov	r1, #1
   18158:	mov	r3, r5
   1815c:	b	18178 <__assert_fail@plt+0x6d98>
   18160:	str	r3, [sp]
   18164:	movw	r2, #42396	; 0xa59c
   18168:	movt	r2, #1
   1816c:	mov	r0, r8
   18170:	mov	r1, #1
   18174:	mov	r3, r4
   18178:	bl	112e4 <__fprintf_chk@plt>
   1817c:	movw	r1, #42403	; 0xa5a3
   18180:	movt	r1, #1
   18184:	mov	r0, #0
   18188:	mov	r2, #5
   1818c:	bl	11170 <dcgettext@plt>
   18190:	mov	r3, r0
   18194:	movw	r0, #2022	; 0x7e6
   18198:	str	r0, [sp]
   1819c:	movw	r2, #43121	; 0xa871
   181a0:	movt	r2, #1
   181a4:	mov	r0, r8
   181a8:	mov	r1, #1
   181ac:	bl	112e4 <__fprintf_chk@plt>
   181b0:	movw	r4, #39593	; 0x9aa9
   181b4:	movt	r4, #1
   181b8:	mov	r0, r4
   181bc:	mov	r1, r8
   181c0:	bl	11104 <fputs_unlocked@plt>
   181c4:	movw	r1, #42407	; 0xa5a7
   181c8:	movt	r1, #1
   181cc:	mov	r0, #0
   181d0:	mov	r2, #5
   181d4:	bl	11170 <dcgettext@plt>
   181d8:	mov	r2, r0
   181dc:	movw	r3, #42578	; 0xa652
   181e0:	movt	r3, #1
   181e4:	mov	r0, r8
   181e8:	mov	r1, #1
   181ec:	bl	112e4 <__fprintf_chk@plt>
   181f0:	mov	r0, r4
   181f4:	mov	r1, r8
   181f8:	bl	11104 <fputs_unlocked@plt>
   181fc:	cmp	r6, #9
   18200:	bhi	1823c <__assert_fail@plt+0x6e5c>
   18204:	add	r0, pc, #0
   18208:	ldr	pc, [r0, r6, lsl #2]
   1820c:	andeq	r8, r1, r4, lsr r2
   18210:	andeq	r8, r1, r8, asr #4
   18214:	andeq	r8, r1, r8, ror r2
   18218:	andeq	r8, r1, r0, lsr #5
   1821c:	andeq	r8, r1, r8, asr #5
   18220:	strdeq	r8, [r1], -r0
   18224:	andeq	r8, r1, r8, lsl r3
   18228:	andeq	r8, r1, r0, asr r3
   1822c:	strdeq	r8, [r1], -r0
   18230:	muleq	r1, r8, r3
   18234:	sub	sp, fp, #24
   18238:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1823c:	movw	r1, #42931	; 0xa7b3
   18240:	movt	r1, #1
   18244:	b	183a0 <__assert_fail@plt+0x6fc0>
   18248:	movw	r1, #42612	; 0xa674
   1824c:	movt	r1, #1
   18250:	mov	r0, #0
   18254:	mov	r2, #5
   18258:	bl	11170 <dcgettext@plt>
   1825c:	mov	r2, r0
   18260:	ldr	r3, [r7]
   18264:	mov	r0, r8
   18268:	mov	r1, #1
   1826c:	sub	sp, fp, #24
   18270:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18274:	b	112e4 <__fprintf_chk@plt>
   18278:	movw	r1, #42628	; 0xa684
   1827c:	movt	r1, #1
   18280:	mov	r0, #0
   18284:	mov	r2, #5
   18288:	bl	11170 <dcgettext@plt>
   1828c:	mov	r2, r0
   18290:	ldr	r3, [r7]
   18294:	ldr	r0, [r7, #4]
   18298:	str	r0, [sp]
   1829c:	b	1838c <__assert_fail@plt+0x6fac>
   182a0:	movw	r1, #42651	; 0xa69b
   182a4:	movt	r1, #1
   182a8:	mov	r0, #0
   182ac:	mov	r2, #5
   182b0:	bl	11170 <dcgettext@plt>
   182b4:	mov	r2, r0
   182b8:	ldr	r3, [r7]
   182bc:	ldmib	r7, {r0, r1}
   182c0:	stm	sp, {r0, r1}
   182c4:	b	1838c <__assert_fail@plt+0x6fac>
   182c8:	movw	r1, #42679	; 0xa6b7
   182cc:	movt	r1, #1
   182d0:	mov	r0, #0
   182d4:	mov	r2, #5
   182d8:	bl	11170 <dcgettext@plt>
   182dc:	mov	r2, r0
   182e0:	ldr	r3, [r7]
   182e4:	ldmib	r7, {r0, r1, r7}
   182e8:	stm	sp, {r0, r1, r7}
   182ec:	b	1838c <__assert_fail@plt+0x6fac>
   182f0:	movw	r1, #42711	; 0xa6d7
   182f4:	movt	r1, #1
   182f8:	mov	r0, #0
   182fc:	mov	r2, #5
   18300:	bl	11170 <dcgettext@plt>
   18304:	mov	r2, r0
   18308:	ldr	r3, [r7]
   1830c:	ldmib	r7, {r0, r1, r6, r7}
   18310:	stm	sp, {r0, r1, r6, r7}
   18314:	b	1838c <__assert_fail@plt+0x6fac>
   18318:	movw	r1, #42747	; 0xa6fb
   1831c:	movt	r1, #1
   18320:	mov	r0, #0
   18324:	mov	r2, #5
   18328:	bl	11170 <dcgettext@plt>
   1832c:	mov	r2, r0
   18330:	ldr	r3, [r7]
   18334:	ldmib	r7, {r0, r1, r6}
   18338:	ldr	r5, [r7, #16]
   1833c:	ldr	r7, [r7, #20]
   18340:	stm	sp, {r0, r1, r6}
   18344:	str	r5, [sp, #12]
   18348:	str	r7, [sp, #16]
   1834c:	b	1838c <__assert_fail@plt+0x6fac>
   18350:	movw	r1, #42787	; 0xa723
   18354:	movt	r1, #1
   18358:	mov	r0, #0
   1835c:	mov	r2, #5
   18360:	bl	11170 <dcgettext@plt>
   18364:	mov	r2, r0
   18368:	ldr	r3, [r7]
   1836c:	ldmib	r7, {r0, r1, r6}
   18370:	ldr	r5, [r7, #16]
   18374:	ldr	r4, [r7, #20]
   18378:	ldr	r7, [r7, #24]
   1837c:	stm	sp, {r0, r1, r6}
   18380:	str	r5, [sp, #12]
   18384:	str	r4, [sp, #16]
   18388:	str	r7, [sp, #20]
   1838c:	mov	r0, r8
   18390:	mov	r1, #1
   18394:	b	18440 <__assert_fail@plt+0x7060>
   18398:	movw	r1, #42879	; 0xa77f
   1839c:	movt	r1, #1
   183a0:	mov	r0, #0
   183a4:	mov	r2, #5
   183a8:	bl	11170 <dcgettext@plt>
   183ac:	mov	ip, r0
   183b0:	ldr	r3, [r7]
   183b4:	ldr	r0, [r7, #4]
   183b8:	ldr	r1, [r7, #8]
   183bc:	ldr	r6, [r7, #12]
   183c0:	ldr	r5, [r7, #16]
   183c4:	ldr	r4, [r7, #20]
   183c8:	ldr	r2, [r7, #24]
   183cc:	ldr	lr, [r7, #28]
   183d0:	ldr	r7, [r7, #32]
   183d4:	stm	sp, {r0, r1, r6}
   183d8:	str	r5, [sp, #12]
   183dc:	str	r4, [sp, #16]
   183e0:	str	r2, [sp, #20]
   183e4:	str	lr, [sp, #24]
   183e8:	str	r7, [sp, #28]
   183ec:	b	18434 <__assert_fail@plt+0x7054>
   183f0:	movw	r1, #42831	; 0xa74f
   183f4:	movt	r1, #1
   183f8:	mov	r0, #0
   183fc:	mov	r2, #5
   18400:	bl	11170 <dcgettext@plt>
   18404:	mov	ip, r0
   18408:	ldr	r3, [r7]
   1840c:	ldmib	r7, {r0, r1, r6}
   18410:	ldr	r5, [r7, #16]
   18414:	ldr	r4, [r7, #20]
   18418:	ldr	r2, [r7, #24]
   1841c:	ldr	r7, [r7, #28]
   18420:	stm	sp, {r0, r1, r6}
   18424:	str	r5, [sp, #12]
   18428:	str	r4, [sp, #16]
   1842c:	str	r2, [sp, #20]
   18430:	str	r7, [sp, #24]
   18434:	mov	r0, r8
   18438:	mov	r1, #1
   1843c:	mov	r2, ip
   18440:	bl	112e4 <__fprintf_chk@plt>
   18444:	sub	sp, fp, #24
   18448:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1844c:	push	{r4, sl, fp, lr}
   18450:	add	fp, sp, #8
   18454:	sub	sp, sp, #8
   18458:	mov	lr, #0
   1845c:	ldr	ip, [fp, #8]
   18460:	ldr	r4, [ip, lr, lsl #2]
   18464:	add	lr, lr, #1
   18468:	cmp	r4, #0
   1846c:	bne	18460 <__assert_fail@plt+0x7080>
   18470:	sub	r4, lr, #1
   18474:	str	ip, [sp]
   18478:	str	r4, [sp, #4]
   1847c:	bl	18118 <__assert_fail@plt+0x6d38>
   18480:	sub	sp, fp, #8
   18484:	pop	{r4, sl, fp, pc}
   18488:	push	{r4, r5, fp, lr}
   1848c:	add	fp, sp, #8
   18490:	sub	sp, sp, #48	; 0x30
   18494:	mov	ip, #0
   18498:	ldr	r4, [fp, #8]
   1849c:	add	lr, sp, #8
   184a0:	ldr	r5, [r4]
   184a4:	str	r5, [lr, ip, lsl #2]
   184a8:	cmp	r5, #0
   184ac:	beq	184c4 <__assert_fail@plt+0x70e4>
   184b0:	add	ip, ip, #1
   184b4:	add	r4, r4, #4
   184b8:	cmp	ip, #10
   184bc:	bne	184a0 <__assert_fail@plt+0x70c0>
   184c0:	mov	ip, #10
   184c4:	str	lr, [sp]
   184c8:	str	ip, [sp, #4]
   184cc:	bl	18118 <__assert_fail@plt+0x6d38>
   184d0:	sub	sp, fp, #8
   184d4:	pop	{r4, r5, fp, pc}
   184d8:	push	{fp, lr}
   184dc:	mov	fp, sp
   184e0:	sub	sp, sp, #8
   184e4:	add	ip, fp, #8
   184e8:	str	ip, [sp, #4]
   184ec:	str	ip, [sp]
   184f0:	bl	18488 <__assert_fail@plt+0x70a8>
   184f4:	mov	sp, fp
   184f8:	pop	{fp, pc}
   184fc:	push	{fp, lr}
   18500:	mov	fp, sp
   18504:	movw	r0, #45436	; 0xb17c
   18508:	movt	r0, #2
   1850c:	ldr	r1, [r0]
   18510:	movw	r0, #39593	; 0x9aa9
   18514:	movt	r0, #1
   18518:	bl	11104 <fputs_unlocked@plt>
   1851c:	movw	r1, #42991	; 0xa7ef
   18520:	movt	r1, #1
   18524:	mov	r0, #0
   18528:	mov	r2, #5
   1852c:	bl	11170 <dcgettext@plt>
   18530:	mov	r1, r0
   18534:	movw	r2, #43011	; 0xa803
   18538:	movt	r2, #1
   1853c:	mov	r0, #1
   18540:	bl	112cc <__printf_chk@plt>
   18544:	movw	r1, #43033	; 0xa819
   18548:	movt	r1, #1
   1854c:	mov	r0, #0
   18550:	mov	r2, #5
   18554:	bl	11170 <dcgettext@plt>
   18558:	mov	r1, r0
   1855c:	movw	r2, #40329	; 0x9d89
   18560:	movt	r2, #1
   18564:	movw	r3, #40623	; 0x9eaf
   18568:	movt	r3, #1
   1856c:	mov	r0, #1
   18570:	bl	112cc <__printf_chk@plt>
   18574:	movw	r1, #43053	; 0xa82d
   18578:	movt	r1, #1
   1857c:	mov	r0, #0
   18580:	mov	r2, #5
   18584:	bl	11170 <dcgettext@plt>
   18588:	mov	r1, r0
   1858c:	movw	r2, #43092	; 0xa854
   18590:	movt	r2, #1
   18594:	mov	r0, #1
   18598:	pop	{fp, lr}
   1859c:	b	112cc <__printf_chk@plt>
   185a0:	b	185a4 <__assert_fail@plt+0x71c4>
   185a4:	push	{r4, r5, r6, sl, fp, lr}
   185a8:	add	fp, sp, #16
   185ac:	mov	r4, r2
   185b0:	mov	r5, r1
   185b4:	mov	r6, r0
   185b8:	bl	195e8 <__assert_fail@plt+0x8208>
   185bc:	cmp	r0, #0
   185c0:	popne	{r4, r5, r6, sl, fp, pc}
   185c4:	cmp	r6, #0
   185c8:	beq	185dc <__assert_fail@plt+0x71fc>
   185cc:	cmp	r5, #0
   185d0:	cmpne	r4, #0
   185d4:	bne	185dc <__assert_fail@plt+0x71fc>
   185d8:	pop	{r4, r5, r6, sl, fp, pc}
   185dc:	bl	18968 <__assert_fail@plt+0x7588>
   185e0:	push	{fp, lr}
   185e4:	mov	fp, sp
   185e8:	bl	18a7c <__assert_fail@plt+0x769c>
   185ec:	pop	{fp, lr}
   185f0:	b	185f4 <__assert_fail@plt+0x7214>
   185f4:	cmp	r0, #0
   185f8:	bxne	lr
   185fc:	push	{fp, lr}
   18600:	mov	fp, sp
   18604:	bl	18968 <__assert_fail@plt+0x7588>
   18608:	push	{fp, lr}
   1860c:	mov	fp, sp
   18610:	bl	19518 <__assert_fail@plt+0x8138>
   18614:	pop	{fp, lr}
   18618:	b	185f4 <__assert_fail@plt+0x7214>
   1861c:	b	185e0 <__assert_fail@plt+0x7200>
   18620:	push	{r4, r5, fp, lr}
   18624:	add	fp, sp, #8
   18628:	mov	r4, r1
   1862c:	mov	r5, r0
   18630:	bl	18aac <__assert_fail@plt+0x76cc>
   18634:	cmp	r0, #0
   18638:	popne	{r4, r5, fp, pc}
   1863c:	cmp	r5, #0
   18640:	beq	18650 <__assert_fail@plt+0x7270>
   18644:	cmp	r4, #0
   18648:	bne	18650 <__assert_fail@plt+0x7270>
   1864c:	pop	{r4, r5, fp, pc}
   18650:	bl	18968 <__assert_fail@plt+0x7588>
   18654:	push	{fp, lr}
   18658:	mov	fp, sp
   1865c:	bl	1951c <__assert_fail@plt+0x813c>
   18660:	pop	{fp, lr}
   18664:	b	185f4 <__assert_fail@plt+0x7214>
   18668:	push	{fp, lr}
   1866c:	mov	fp, sp
   18670:	bl	1952c <__assert_fail@plt+0x814c>
   18674:	pop	{fp, lr}
   18678:	b	185f4 <__assert_fail@plt+0x7214>
   1867c:	mov	r2, r1
   18680:	mov	r1, r0
   18684:	mov	r0, #0
   18688:	b	185a4 <__assert_fail@plt+0x71c4>
   1868c:	mov	r2, r1
   18690:	mov	r1, r0
   18694:	mov	r0, #0
   18698:	b	18668 <__assert_fail@plt+0x7288>
   1869c:	mov	r2, #1
   186a0:	b	186a4 <__assert_fail@plt+0x72c4>
   186a4:	push	{r4, r5, fp, lr}
   186a8:	add	fp, sp, #8
   186ac:	mov	r4, r1
   186b0:	ldr	r5, [r1]
   186b4:	cmp	r0, #0
   186b8:	beq	186d0 <__assert_fail@plt+0x72f0>
   186bc:	mov	r1, #1
   186c0:	add	r1, r1, r5, lsr #1
   186c4:	adds	r5, r5, r1
   186c8:	bcc	186e8 <__assert_fail@plt+0x7308>
   186cc:	bl	18968 <__assert_fail@plt+0x7588>
   186d0:	cmp	r5, #0
   186d4:	bne	186e8 <__assert_fail@plt+0x7308>
   186d8:	mov	r1, #64	; 0x40
   186dc:	udiv	r5, r1, r2
   186e0:	cmp	r2, #64	; 0x40
   186e4:	addhi	r5, r5, #1
   186e8:	mov	r1, r5
   186ec:	bl	185a4 <__assert_fail@plt+0x71c4>
   186f0:	str	r5, [r4]
   186f4:	pop	{r4, r5, fp, pc}
   186f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   186fc:	add	fp, sp, #24
   18700:	mov	r8, r1
   18704:	ldr	r6, [r1]
   18708:	add	r1, r6, r6, asr #1
   1870c:	cmp	r1, r6
   18710:	mvnvs	r1, #-2147483648	; 0x80000000
   18714:	cmp	r1, r3
   18718:	mov	r5, r1
   1871c:	movgt	r5, r3
   18720:	cmn	r3, #1
   18724:	movle	r5, r1
   18728:	ldr	r4, [fp, #8]
   1872c:	cmn	r4, #1
   18730:	ble	18758 <__assert_fail@plt+0x7378>
   18734:	cmp	r4, #0
   18738:	beq	187ac <__assert_fail@plt+0x73cc>
   1873c:	cmn	r5, #1
   18740:	ble	18780 <__assert_fail@plt+0x73a0>
   18744:	mvn	r7, #-2147483648	; 0x80000000
   18748:	udiv	r1, r7, r4
   1874c:	cmp	r1, r5
   18750:	bge	187ac <__assert_fail@plt+0x73cc>
   18754:	b	187bc <__assert_fail@plt+0x73dc>
   18758:	cmn	r5, #1
   1875c:	ble	1879c <__assert_fail@plt+0x73bc>
   18760:	cmn	r4, #1
   18764:	beq	187ac <__assert_fail@plt+0x73cc>
   18768:	mov	r1, #-2147483648	; 0x80000000
   1876c:	sdiv	r1, r1, r4
   18770:	mvn	r7, #-2147483648	; 0x80000000
   18774:	cmp	r1, r5
   18778:	bge	187ac <__assert_fail@plt+0x73cc>
   1877c:	b	187bc <__assert_fail@plt+0x73dc>
   18780:	beq	187ac <__assert_fail@plt+0x73cc>
   18784:	mov	r1, #-2147483648	; 0x80000000
   18788:	sdiv	r1, r1, r5
   1878c:	mvn	r7, #-2147483648	; 0x80000000
   18790:	cmp	r1, r4
   18794:	bge	187ac <__assert_fail@plt+0x73cc>
   18798:	b	187bc <__assert_fail@plt+0x73dc>
   1879c:	mvn	r7, #-2147483648	; 0x80000000
   187a0:	sdiv	r1, r7, r4
   187a4:	cmp	r5, r1
   187a8:	blt	187bc <__assert_fail@plt+0x73dc>
   187ac:	mul	r1, r5, r4
   187b0:	mov	r7, #64	; 0x40
   187b4:	cmp	r1, #63	; 0x3f
   187b8:	bgt	187c4 <__assert_fail@plt+0x73e4>
   187bc:	sdiv	r5, r7, r4
   187c0:	mul	r1, r5, r4
   187c4:	cmp	r0, #0
   187c8:	moveq	r7, #0
   187cc:	streq	r7, [r8]
   187d0:	sub	r7, r5, r6
   187d4:	cmp	r7, r2
   187d8:	bge	18884 <__assert_fail@plt+0x74a4>
   187dc:	add	r5, r6, r2
   187e0:	mov	r1, #0
   187e4:	cmp	r5, r3
   187e8:	mov	r2, #0
   187ec:	movwgt	r2, #1
   187f0:	cmn	r3, #1
   187f4:	movwgt	r1, #1
   187f8:	cmp	r5, r6
   187fc:	bvs	1886c <__assert_fail@plt+0x748c>
   18800:	ands	r1, r1, r2
   18804:	bne	1886c <__assert_fail@plt+0x748c>
   18808:	cmn	r4, #1
   1880c:	ble	18834 <__assert_fail@plt+0x7454>
   18810:	cmp	r4, #0
   18814:	beq	18880 <__assert_fail@plt+0x74a0>
   18818:	cmn	r5, #1
   1881c:	ble	18858 <__assert_fail@plt+0x7478>
   18820:	mvn	r1, #-2147483648	; 0x80000000
   18824:	udiv	r1, r1, r4
   18828:	cmp	r1, r5
   1882c:	bge	18880 <__assert_fail@plt+0x74a0>
   18830:	b	1886c <__assert_fail@plt+0x748c>
   18834:	cmn	r5, #1
   18838:	ble	18870 <__assert_fail@plt+0x7490>
   1883c:	cmn	r4, #1
   18840:	beq	18880 <__assert_fail@plt+0x74a0>
   18844:	mov	r1, #-2147483648	; 0x80000000
   18848:	sdiv	r1, r1, r4
   1884c:	cmp	r1, r5
   18850:	bge	18880 <__assert_fail@plt+0x74a0>
   18854:	b	1886c <__assert_fail@plt+0x748c>
   18858:	beq	18880 <__assert_fail@plt+0x74a0>
   1885c:	mov	r1, #-2147483648	; 0x80000000
   18860:	sdiv	r1, r1, r5
   18864:	cmp	r1, r4
   18868:	bge	18880 <__assert_fail@plt+0x74a0>
   1886c:	bl	18968 <__assert_fail@plt+0x7588>
   18870:	mvn	r1, #-2147483648	; 0x80000000
   18874:	sdiv	r1, r1, r4
   18878:	cmp	r5, r1
   1887c:	blt	1886c <__assert_fail@plt+0x748c>
   18880:	mul	r1, r5, r4
   18884:	bl	18620 <__assert_fail@plt+0x7240>
   18888:	str	r5, [r8]
   1888c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18890:	mov	r1, #1
   18894:	b	18898 <__assert_fail@plt+0x74b8>
   18898:	push	{fp, lr}
   1889c:	mov	fp, sp
   188a0:	bl	18a28 <__assert_fail@plt+0x7648>
   188a4:	pop	{fp, lr}
   188a8:	b	185f4 <__assert_fail@plt+0x7214>
   188ac:	mov	r1, #1
   188b0:	b	188b4 <__assert_fail@plt+0x74d4>
   188b4:	push	{fp, lr}
   188b8:	mov	fp, sp
   188bc:	bl	19528 <__assert_fail@plt+0x8148>
   188c0:	pop	{fp, lr}
   188c4:	b	185f4 <__assert_fail@plt+0x7214>
   188c8:	push	{r4, r5, fp, lr}
   188cc:	add	fp, sp, #8
   188d0:	mov	r4, r1
   188d4:	mov	r5, r0
   188d8:	mov	r0, r1
   188dc:	bl	185e0 <__assert_fail@plt+0x7200>
   188e0:	mov	r1, r5
   188e4:	mov	r2, r4
   188e8:	pop	{r4, r5, fp, lr}
   188ec:	b	11158 <memcpy@plt>
   188f0:	push	{r4, r5, fp, lr}
   188f4:	add	fp, sp, #8
   188f8:	mov	r4, r1
   188fc:	mov	r5, r0
   18900:	mov	r0, r1
   18904:	bl	18608 <__assert_fail@plt+0x7228>
   18908:	mov	r1, r5
   1890c:	mov	r2, r4
   18910:	pop	{r4, r5, fp, lr}
   18914:	b	11158 <memcpy@plt>
   18918:	push	{r4, r5, fp, lr}
   1891c:	add	fp, sp, #8
   18920:	mov	r4, r1
   18924:	mov	r5, r0
   18928:	add	r0, r1, #1
   1892c:	bl	18608 <__assert_fail@plt+0x7228>
   18930:	mov	r1, #0
   18934:	strb	r1, [r0, r4]
   18938:	mov	r1, r5
   1893c:	mov	r2, r4
   18940:	pop	{r4, r5, fp, lr}
   18944:	b	11158 <memcpy@plt>
   18948:	push	{r4, sl, fp, lr}
   1894c:	add	fp, sp, #8
   18950:	mov	r4, r0
   18954:	bl	11278 <strlen@plt>
   18958:	add	r1, r0, #1
   1895c:	mov	r0, r4
   18960:	pop	{r4, sl, fp, lr}
   18964:	b	188c8 <__assert_fail@plt+0x74e8>
   18968:	push	{fp, lr}
   1896c:	mov	fp, sp
   18970:	movw	r0, #45344	; 0xb120
   18974:	movt	r0, #2
   18978:	ldr	r4, [r0]
   1897c:	movw	r1, #43168	; 0xa8a0
   18980:	movt	r1, #1
   18984:	mov	r0, #0
   18988:	mov	r2, #5
   1898c:	bl	11170 <dcgettext@plt>
   18990:	mov	r3, r0
   18994:	movw	r2, #40502	; 0x9e36
   18998:	movt	r2, #1
   1899c:	mov	r0, r4
   189a0:	mov	r1, #0
   189a4:	bl	11200 <error@plt>
   189a8:	bl	113b0 <abort@plt>
   189ac:	push	{fp, lr}
   189b0:	mov	fp, sp
   189b4:	orr	r1, r1, #512	; 0x200
   189b8:	bl	12d04 <__assert_fail@plt+0x1924>
   189bc:	cmp	r0, #0
   189c0:	popne	{fp, pc}
   189c4:	bl	1129c <__errno_location@plt>
   189c8:	ldr	r0, [r0]
   189cc:	cmp	r0, #22
   189d0:	bne	189f4 <__assert_fail@plt+0x7614>
   189d4:	movw	r0, #43185	; 0xa8b1
   189d8:	movt	r0, #1
   189dc:	movw	r1, #43201	; 0xa8c1
   189e0:	movt	r1, #1
   189e4:	movw	r3, #43212	; 0xa8cc
   189e8:	movt	r3, #1
   189ec:	mov	r2, #41	; 0x29
   189f0:	bl	113e0 <__assert_fail@plt>
   189f4:	bl	18968 <__assert_fail@plt+0x7588>
   189f8:	ldr	r0, [r0, #48]	; 0x30
   189fc:	and	r2, r0, #17
   18a00:	mov	r0, #1
   18a04:	cmp	r2, #16
   18a08:	beq	18a24 <__assert_fail@plt+0x7644>
   18a0c:	mov	r0, #0
   18a10:	cmp	r2, #17
   18a14:	bxne	lr
   18a18:	ldr	r0, [r1, #48]	; 0x30
   18a1c:	cmp	r0, #0
   18a20:	movwne	r0, #1
   18a24:	bx	lr
   18a28:	clz	r2, r1
   18a2c:	lsr	r2, r2, #5
   18a30:	clz	r3, r0
   18a34:	lsr	r3, r3, #5
   18a38:	orrs	r2, r3, r2
   18a3c:	movwne	r1, #1
   18a40:	movwne	r0, #1
   18a44:	cmp	r1, #0
   18a48:	beq	18a78 <__assert_fail@plt+0x7698>
   18a4c:	mvn	r2, #-2147483648	; 0x80000000
   18a50:	udiv	r2, r2, r1
   18a54:	cmp	r2, r0
   18a58:	bcs	18a78 <__assert_fail@plt+0x7698>
   18a5c:	push	{fp, lr}
   18a60:	mov	fp, sp
   18a64:	bl	1129c <__errno_location@plt>
   18a68:	mov	r1, #12
   18a6c:	str	r1, [r0]
   18a70:	mov	r0, #0
   18a74:	pop	{fp, pc}
   18a78:	b	110f8 <calloc@plt>
   18a7c:	cmp	r0, #0
   18a80:	movweq	r0, #1
   18a84:	cmn	r0, #1
   18a88:	ble	18a90 <__assert_fail@plt+0x76b0>
   18a8c:	b	11218 <malloc@plt>
   18a90:	push	{fp, lr}
   18a94:	mov	fp, sp
   18a98:	bl	1129c <__errno_location@plt>
   18a9c:	mov	r1, #12
   18aa0:	str	r1, [r0]
   18aa4:	mov	r0, #0
   18aa8:	pop	{fp, pc}
   18aac:	push	{fp, lr}
   18ab0:	mov	fp, sp
   18ab4:	cmp	r0, #0
   18ab8:	beq	18ad4 <__assert_fail@plt+0x76f4>
   18abc:	cmp	r1, #0
   18ac0:	beq	18ae0 <__assert_fail@plt+0x7700>
   18ac4:	cmn	r1, #1
   18ac8:	ble	18aec <__assert_fail@plt+0x770c>
   18acc:	pop	{fp, lr}
   18ad0:	b	1117c <realloc@plt>
   18ad4:	mov	r0, r1
   18ad8:	pop	{fp, lr}
   18adc:	b	18a7c <__assert_fail@plt+0x769c>
   18ae0:	bl	1942c <__assert_fail@plt+0x804c>
   18ae4:	mov	r0, #0
   18ae8:	pop	{fp, pc}
   18aec:	bl	1129c <__errno_location@plt>
   18af0:	mov	r1, #12
   18af4:	str	r1, [r0]
   18af8:	mov	r0, #0
   18afc:	pop	{fp, pc}
   18b00:	push	{r4, r5, r6, sl, fp, lr}
   18b04:	add	fp, sp, #16
   18b08:	rsb	lr, r2, #64	; 0x40
   18b0c:	lsr	ip, r0, lr
   18b10:	rsb	r3, lr, #32
   18b14:	orr	r3, ip, r1, lsl r3
   18b18:	rsbs	r5, r2, #32
   18b1c:	lsrpl	r3, r1, r5
   18b20:	lsl	r4, r0, r2
   18b24:	subs	r6, r2, #32
   18b28:	movwpl	r4, #0
   18b2c:	orr	ip, r3, r4
   18b30:	lsr	r3, r0, r5
   18b34:	orr	r2, r3, r1, lsl r2
   18b38:	lslpl	r2, r0, r6
   18b3c:	lsr	r0, r1, lr
   18b40:	cmp	r5, #0
   18b44:	movwpl	r0, #0
   18b48:	orr	r1, r0, r2
   18b4c:	mov	r0, ip
   18b50:	pop	{r4, r5, r6, sl, fp, pc}
   18b54:	push	{r4, r5, fp, lr}
   18b58:	add	fp, sp, #8
   18b5c:	lsr	ip, r0, r2
   18b60:	rsb	r3, r2, #32
   18b64:	orr	ip, ip, r1, lsl r3
   18b68:	subs	lr, r2, #32
   18b6c:	lsrpl	ip, r1, lr
   18b70:	rsb	r4, r2, #64	; 0x40
   18b74:	lsl	r5, r0, r4
   18b78:	cmp	r3, #0
   18b7c:	movwpl	r5, #0
   18b80:	orr	ip, r5, ip
   18b84:	rsb	r5, r4, #32
   18b88:	lsr	r5, r0, r5
   18b8c:	orr	r4, r5, r1, lsl r4
   18b90:	cmp	r3, #0
   18b94:	lslpl	r4, r0, r3
   18b98:	lsr	r0, r1, r2
   18b9c:	cmp	lr, #0
   18ba0:	movwpl	r0, #0
   18ba4:	orr	r1, r4, r0
   18ba8:	mov	r0, ip
   18bac:	pop	{r4, r5, fp, pc}
   18bb0:	rsb	r1, r1, #32
   18bb4:	ror	r0, r0, r1
   18bb8:	bx	lr
   18bbc:	ror	r0, r0, r1
   18bc0:	bx	lr
   18bc4:	rsb	r1, r1, #32
   18bc8:	ror	r0, r0, r1
   18bcc:	bx	lr
   18bd0:	ror	r0, r0, r1
   18bd4:	bx	lr
   18bd8:	and	r2, r1, #15
   18bdc:	lsl	r2, r0, r2
   18be0:	rsb	r1, r1, #0
   18be4:	and	r1, r1, #15
   18be8:	orr	r0, r2, r0, lsr r1
   18bec:	uxth	r0, r0
   18bf0:	bx	lr
   18bf4:	rsb	r2, r1, #0
   18bf8:	and	r2, r2, #15
   18bfc:	lsl	r2, r0, r2
   18c00:	and	r1, r1, #15
   18c04:	orr	r0, r2, r0, lsr r1
   18c08:	uxth	r0, r0
   18c0c:	bx	lr
   18c10:	and	r2, r1, #7
   18c14:	lsl	r2, r0, r2
   18c18:	rsb	r1, r1, #0
   18c1c:	and	r1, r1, #7
   18c20:	orr	r0, r2, r0, lsr r1
   18c24:	uxtb	r0, r0
   18c28:	bx	lr
   18c2c:	rsb	r2, r1, #0
   18c30:	and	r2, r2, #7
   18c34:	lsl	r2, r0, r2
   18c38:	and	r1, r1, #7
   18c3c:	orr	r0, r2, r0, lsr r1
   18c40:	uxtb	r0, r0
   18c44:	bx	lr
   18c48:	mov	r1, r0
   18c4c:	sub	r2, r0, #65	; 0x41
   18c50:	mov	r0, #1
   18c54:	cmp	r2, #26
   18c58:	subcs	r2, r1, #97	; 0x61
   18c5c:	cmpcs	r2, #26
   18c60:	bcs	18c68 <__assert_fail@plt+0x7888>
   18c64:	bx	lr
   18c68:	sub	r1, r1, #48	; 0x30
   18c6c:	cmp	r1, #10
   18c70:	movcs	r0, #0
   18c74:	bx	lr
   18c78:	mov	r1, r0
   18c7c:	sub	r2, r0, #65	; 0x41
   18c80:	mov	r0, #1
   18c84:	cmp	r2, #26
   18c88:	subcs	r1, r1, #97	; 0x61
   18c8c:	cmpcs	r1, #26
   18c90:	movcs	r0, #0
   18c94:	bx	lr
   18c98:	mov	r1, #0
   18c9c:	cmp	r0, #128	; 0x80
   18ca0:	movwcc	r1, #1
   18ca4:	mov	r0, r1
   18ca8:	bx	lr
   18cac:	sub	r1, r0, #9
   18cb0:	clz	r1, r1
   18cb4:	lsr	r1, r1, #5
   18cb8:	sub	r0, r0, #32
   18cbc:	clz	r0, r0
   18cc0:	lsr	r0, r0, #5
   18cc4:	orr	r0, r0, r1
   18cc8:	bx	lr
   18ccc:	mov	r1, r0
   18cd0:	mov	r0, #1
   18cd4:	cmp	r1, #32
   18cd8:	bxcc	lr
   18cdc:	cmp	r1, #127	; 0x7f
   18ce0:	movne	r0, #0
   18ce4:	bx	lr
   18ce8:	sub	r1, r0, #48	; 0x30
   18cec:	mov	r0, #0
   18cf0:	cmp	r1, #10
   18cf4:	movwcc	r0, #1
   18cf8:	bx	lr
   18cfc:	sub	r1, r0, #33	; 0x21
   18d00:	mov	r0, #0
   18d04:	cmp	r1, #94	; 0x5e
   18d08:	movwcc	r0, #1
   18d0c:	bx	lr
   18d10:	sub	r1, r0, #97	; 0x61
   18d14:	mov	r0, #0
   18d18:	cmp	r1, #26
   18d1c:	movwcc	r0, #1
   18d20:	bx	lr
   18d24:	sub	r1, r0, #32
   18d28:	mov	r0, #0
   18d2c:	cmp	r1, #95	; 0x5f
   18d30:	movwcc	r0, #1
   18d34:	bx	lr
   18d38:	sub	r1, r0, #33	; 0x21
   18d3c:	cmp	r1, #93	; 0x5d
   18d40:	bhi	18ecc <__assert_fail@plt+0x7aec>
   18d44:	mov	r0, #1
   18d48:	add	r2, pc, #0
   18d4c:	ldr	pc, [r2, r1, lsl #2]
   18d50:	andeq	r8, r1, r8, asr #29
   18d54:	andeq	r8, r1, r8, asr #29
   18d58:	andeq	r8, r1, r8, asr #29
   18d5c:	andeq	r8, r1, r8, asr #29
   18d60:	andeq	r8, r1, r8, asr #29
   18d64:	andeq	r8, r1, r8, asr #29
   18d68:	andeq	r8, r1, r8, asr #29
   18d6c:	andeq	r8, r1, r8, asr #29
   18d70:	andeq	r8, r1, r8, asr #29
   18d74:	andeq	r8, r1, r8, asr #29
   18d78:	andeq	r8, r1, r8, asr #29
   18d7c:	andeq	r8, r1, r8, asr #29
   18d80:	andeq	r8, r1, r8, asr #29
   18d84:	andeq	r8, r1, r8, asr #29
   18d88:	andeq	r8, r1, r8, asr #29
   18d8c:	andeq	r8, r1, ip, asr #29
   18d90:	andeq	r8, r1, ip, asr #29
   18d94:	andeq	r8, r1, ip, asr #29
   18d98:	andeq	r8, r1, ip, asr #29
   18d9c:	andeq	r8, r1, ip, asr #29
   18da0:	andeq	r8, r1, ip, asr #29
   18da4:	andeq	r8, r1, ip, asr #29
   18da8:	andeq	r8, r1, ip, asr #29
   18dac:	andeq	r8, r1, ip, asr #29
   18db0:	andeq	r8, r1, ip, asr #29
   18db4:	andeq	r8, r1, r8, asr #29
   18db8:	andeq	r8, r1, r8, asr #29
   18dbc:	andeq	r8, r1, r8, asr #29
   18dc0:	andeq	r8, r1, r8, asr #29
   18dc4:	andeq	r8, r1, r8, asr #29
   18dc8:	andeq	r8, r1, r8, asr #29
   18dcc:	andeq	r8, r1, r8, asr #29
   18dd0:	andeq	r8, r1, ip, asr #29
   18dd4:	andeq	r8, r1, ip, asr #29
   18dd8:	andeq	r8, r1, ip, asr #29
   18ddc:	andeq	r8, r1, ip, asr #29
   18de0:	andeq	r8, r1, ip, asr #29
   18de4:	andeq	r8, r1, ip, asr #29
   18de8:	andeq	r8, r1, ip, asr #29
   18dec:	andeq	r8, r1, ip, asr #29
   18df0:	andeq	r8, r1, ip, asr #29
   18df4:	andeq	r8, r1, ip, asr #29
   18df8:	andeq	r8, r1, ip, asr #29
   18dfc:	andeq	r8, r1, ip, asr #29
   18e00:	andeq	r8, r1, ip, asr #29
   18e04:	andeq	r8, r1, ip, asr #29
   18e08:	andeq	r8, r1, ip, asr #29
   18e0c:	andeq	r8, r1, ip, asr #29
   18e10:	andeq	r8, r1, ip, asr #29
   18e14:	andeq	r8, r1, ip, asr #29
   18e18:	andeq	r8, r1, ip, asr #29
   18e1c:	andeq	r8, r1, ip, asr #29
   18e20:	andeq	r8, r1, ip, asr #29
   18e24:	andeq	r8, r1, ip, asr #29
   18e28:	andeq	r8, r1, ip, asr #29
   18e2c:	andeq	r8, r1, ip, asr #29
   18e30:	andeq	r8, r1, ip, asr #29
   18e34:	andeq	r8, r1, ip, asr #29
   18e38:	andeq	r8, r1, r8, asr #29
   18e3c:	andeq	r8, r1, r8, asr #29
   18e40:	andeq	r8, r1, r8, asr #29
   18e44:	andeq	r8, r1, r8, asr #29
   18e48:	andeq	r8, r1, r8, asr #29
   18e4c:	andeq	r8, r1, r8, asr #29
   18e50:	andeq	r8, r1, ip, asr #29
   18e54:	andeq	r8, r1, ip, asr #29
   18e58:	andeq	r8, r1, ip, asr #29
   18e5c:	andeq	r8, r1, ip, asr #29
   18e60:	andeq	r8, r1, ip, asr #29
   18e64:	andeq	r8, r1, ip, asr #29
   18e68:	andeq	r8, r1, ip, asr #29
   18e6c:	andeq	r8, r1, ip, asr #29
   18e70:	andeq	r8, r1, ip, asr #29
   18e74:	andeq	r8, r1, ip, asr #29
   18e78:	andeq	r8, r1, ip, asr #29
   18e7c:	andeq	r8, r1, ip, asr #29
   18e80:	andeq	r8, r1, ip, asr #29
   18e84:	andeq	r8, r1, ip, asr #29
   18e88:	andeq	r8, r1, ip, asr #29
   18e8c:	andeq	r8, r1, ip, asr #29
   18e90:	andeq	r8, r1, ip, asr #29
   18e94:	andeq	r8, r1, ip, asr #29
   18e98:	andeq	r8, r1, ip, asr #29
   18e9c:	andeq	r8, r1, ip, asr #29
   18ea0:	andeq	r8, r1, ip, asr #29
   18ea4:	andeq	r8, r1, ip, asr #29
   18ea8:	andeq	r8, r1, ip, asr #29
   18eac:	andeq	r8, r1, ip, asr #29
   18eb0:	andeq	r8, r1, ip, asr #29
   18eb4:	andeq	r8, r1, ip, asr #29
   18eb8:	andeq	r8, r1, r8, asr #29
   18ebc:	andeq	r8, r1, r8, asr #29
   18ec0:	andeq	r8, r1, r8, asr #29
   18ec4:	andeq	r8, r1, r8, asr #29
   18ec8:	bx	lr
   18ecc:	mov	r0, #0
   18ed0:	bx	lr
   18ed4:	sub	r0, r0, #9
   18ed8:	cmp	r0, #23
   18edc:	movhi	r0, #0
   18ee0:	bxhi	lr
   18ee4:	bic	r0, r0, #-16777216	; 0xff000000
   18ee8:	movw	r1, #31
   18eec:	movt	r1, #128	; 0x80
   18ef0:	mov	r2, #1
   18ef4:	and	r0, r2, r1, lsr r0
   18ef8:	bx	lr
   18efc:	sub	r1, r0, #65	; 0x41
   18f00:	mov	r0, #0
   18f04:	cmp	r1, #26
   18f08:	movwcc	r0, #1
   18f0c:	bx	lr
   18f10:	mov	r1, r0
   18f14:	sub	r2, r0, #48	; 0x30
   18f18:	mov	r0, #1
   18f1c:	cmp	r2, #22
   18f20:	bhi	18f38 <__assert_fail@plt+0x7b58>
   18f24:	mov	ip, #1
   18f28:	movw	r3, #1023	; 0x3ff
   18f2c:	movt	r3, #126	; 0x7e
   18f30:	tst	r3, ip, lsl r2
   18f34:	bxne	lr
   18f38:	sub	r1, r1, #97	; 0x61
   18f3c:	cmp	r1, #6
   18f40:	movcs	r0, #0
   18f44:	bxcs	lr
   18f48:	bx	lr
   18f4c:	sub	r1, r0, #65	; 0x41
   18f50:	cmp	r1, #26
   18f54:	addcc	r0, r0, #32
   18f58:	bx	lr
   18f5c:	sub	r1, r0, #97	; 0x61
   18f60:	cmp	r1, #26
   18f64:	subcc	r0, r0, #32
   18f68:	bx	lr
   18f6c:	push	{r4, r5, r6, sl, fp, lr}
   18f70:	add	fp, sp, #16
   18f74:	mov	r4, r0
   18f78:	bl	111dc <__fpending@plt>
   18f7c:	mov	r5, r0
   18f80:	mov	r0, r4
   18f84:	bl	111e8 <ferror_unlocked@plt>
   18f88:	mov	r6, r0
   18f8c:	mov	r0, r4
   18f90:	bl	19104 <__assert_fail@plt+0x7d24>
   18f94:	cmp	r6, #0
   18f98:	beq	18fbc <__assert_fail@plt+0x7bdc>
   18f9c:	mvn	r4, #0
   18fa0:	cmp	r0, #0
   18fa4:	bne	18fe8 <__assert_fail@plt+0x7c08>
   18fa8:	bl	1129c <__errno_location@plt>
   18fac:	mov	r1, #0
   18fb0:	str	r1, [r0]
   18fb4:	mov	r0, r4
   18fb8:	pop	{r4, r5, r6, sl, fp, pc}
   18fbc:	cmp	r0, #0
   18fc0:	mov	r4, r0
   18fc4:	mvnne	r4, #0
   18fc8:	cmp	r5, #0
   18fcc:	bne	18fe8 <__assert_fail@plt+0x7c08>
   18fd0:	cmp	r0, #0
   18fd4:	beq	18fe8 <__assert_fail@plt+0x7c08>
   18fd8:	bl	1129c <__errno_location@plt>
   18fdc:	ldr	r0, [r0]
   18fe0:	subs	r4, r0, #9
   18fe4:	mvnne	r4, #0
   18fe8:	mov	r0, r4
   18fec:	pop	{r4, r5, r6, sl, fp, pc}
   18ff0:	mov	r1, #0
   18ff4:	movw	r2, #62998	; 0xf616
   18ff8:	movt	r2, #149	; 0x95
   18ffc:	str	r1, [r0, #16]
   19000:	str	r1, [r0, #20]
   19004:	str	r2, [r0, #24]
   19008:	bx	lr
   1900c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19010:	add	fp, sp, #24
   19014:	mov	r5, r1
   19018:	mov	r4, r0
   1901c:	ldr	r0, [r0, #24]
   19020:	movw	r1, #62998	; 0xf616
   19024:	movt	r1, #149	; 0x95
   19028:	cmp	r0, r1
   1902c:	bne	190c4 <__assert_fail@plt+0x7ce4>
   19030:	add	r6, r4, #8
   19034:	add	r1, r4, #16
   19038:	ldrd	r2, [r1]
   1903c:	orrs	r0, r2, r3
   19040:	beq	19078 <__assert_fail@plt+0x7c98>
   19044:	ldm	r4, {r0, r7}
   19048:	ldrd	r8, [r5, #96]	; 0x60
   1904c:	eor	r7, r9, r7
   19050:	eor	r0, r8, r0
   19054:	orrs	r0, r0, r7
   19058:	bne	19078 <__assert_fail@plt+0x7c98>
   1905c:	ldm	r6, {r0, r7}
   19060:	ldrd	r8, [r5]
   19064:	eor	r7, r9, r7
   19068:	eor	r0, r8, r0
   1906c:	orrs	r0, r0, r7
   19070:	mov	r0, #1
   19074:	beq	190b8 <__assert_fail@plt+0x7cd8>
   19078:	adds	r8, r2, #1
   1907c:	adc	r9, r3, #0
   19080:	strd	r8, [r1]
   19084:	mov	r0, r8
   19088:	mov	r1, r9
   1908c:	bl	190e4 <__assert_fail@plt+0x7d04>
   19090:	mov	r1, r0
   19094:	mov	r0, #0
   19098:	cmp	r1, #0
   1909c:	beq	190b8 <__assert_fail@plt+0x7cd8>
   190a0:	orrs	r1, r8, r9
   190a4:	beq	190bc <__assert_fail@plt+0x7cdc>
   190a8:	ldrd	r2, [r5]
   190ac:	strd	r2, [r6]
   190b0:	ldrd	r2, [r5, #96]	; 0x60
   190b4:	strd	r2, [r4]
   190b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   190bc:	mov	r0, #1
   190c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   190c4:	movw	r0, #43290	; 0xa91a
   190c8:	movt	r0, #1
   190cc:	movw	r1, #43314	; 0xa932
   190d0:	movt	r1, #1
   190d4:	movw	r3, #43332	; 0xa944
   190d8:	movt	r3, #1
   190dc:	mov	r2, #60	; 0x3c
   190e0:	bl	113e0 <__assert_fail@plt>
   190e4:	subs	r2, r0, #1
   190e8:	and	r0, r0, r2
   190ec:	sbc	r2, r1, #0
   190f0:	and	r1, r1, r2
   190f4:	orr	r0, r0, r1
   190f8:	clz	r0, r0
   190fc:	lsr	r0, r0, #5
   19100:	bx	lr
   19104:	push	{r4, r5, fp, lr}
   19108:	add	fp, sp, #8
   1910c:	sub	sp, sp, #8
   19110:	mov	r4, r0
   19114:	bl	112d8 <fileno@plt>
   19118:	cmn	r0, #1
   1911c:	ble	19194 <__assert_fail@plt+0x7db4>
   19120:	mov	r0, r4
   19124:	bl	11230 <__freading@plt>
   19128:	cmp	r0, #0
   1912c:	beq	19158 <__assert_fail@plt+0x7d78>
   19130:	mov	r0, r4
   19134:	bl	112d8 <fileno@plt>
   19138:	mov	r1, #1
   1913c:	str	r1, [sp]
   19140:	mov	r2, #0
   19144:	mov	r3, #0
   19148:	bl	111c4 <lseek64@plt>
   1914c:	and	r0, r0, r1
   19150:	cmn	r0, #1
   19154:	beq	19194 <__assert_fail@plt+0x7db4>
   19158:	mov	r0, r4
   1915c:	bl	193c4 <__assert_fail@plt+0x7fe4>
   19160:	cmp	r0, #0
   19164:	beq	19194 <__assert_fail@plt+0x7db4>
   19168:	bl	1129c <__errno_location@plt>
   1916c:	ldr	r5, [r0]
   19170:	mov	r0, r4
   19174:	bl	112f0 <fclose@plt>
   19178:	cmp	r5, #0
   1917c:	beq	1918c <__assert_fail@plt+0x7dac>
   19180:	bl	1129c <__errno_location@plt>
   19184:	str	r5, [r0]
   19188:	mvn	r0, #0
   1918c:	sub	sp, fp, #8
   19190:	pop	{r4, r5, fp, pc}
   19194:	mov	r0, r4
   19198:	sub	sp, fp, #8
   1919c:	pop	{r4, r5, fp, lr}
   191a0:	b	112f0 <fclose@plt>
   191a4:	sub	sp, sp, #8
   191a8:	push	{fp, lr}
   191ac:	mov	fp, sp
   191b0:	sub	sp, sp, #8
   191b4:	str	r2, [fp, #8]
   191b8:	str	r3, [fp, #12]
   191bc:	add	r2, fp, #8
   191c0:	str	r2, [sp, #4]
   191c4:	cmp	r1, #11
   191c8:	bhi	19208 <__assert_fail@plt+0x7e28>
   191cc:	mov	r2, #1
   191d0:	movw	r3, #1300	; 0x514
   191d4:	tst	r3, r2, lsl r1
   191d8:	bne	19258 <__assert_fail@plt+0x7e78>
   191dc:	movw	r3, #2570	; 0xa0a
   191e0:	tst	r3, r2, lsl r1
   191e4:	bne	19230 <__assert_fail@plt+0x7e50>
   191e8:	cmp	r1, #0
   191ec:	bne	19208 <__assert_fail@plt+0x7e28>
   191f0:	ldr	r1, [sp, #4]
   191f4:	add	r2, r1, #4
   191f8:	str	r2, [sp, #4]
   191fc:	ldr	r1, [r1]
   19200:	bl	1927c <__assert_fail@plt+0x7e9c>
   19204:	b	1926c <__assert_fail@plt+0x7e8c>
   19208:	sub	r2, r1, #1024	; 0x400
   1920c:	cmp	r2, #10
   19210:	bhi	19258 <__assert_fail@plt+0x7e78>
   19214:	mov	ip, #1
   19218:	movw	r3, #645	; 0x285
   1921c:	tst	r3, ip, lsl r2
   19220:	bne	19258 <__assert_fail@plt+0x7e78>
   19224:	movw	r3, #1282	; 0x502
   19228:	tst	r3, ip, lsl r2
   1922c:	beq	19238 <__assert_fail@plt+0x7e58>
   19230:	bl	11308 <fcntl64@plt>
   19234:	b	1926c <__assert_fail@plt+0x7e8c>
   19238:	cmp	r2, #6
   1923c:	bne	19258 <__assert_fail@plt+0x7e78>
   19240:	ldr	r1, [sp, #4]
   19244:	add	r2, r1, #4
   19248:	str	r2, [sp, #4]
   1924c:	ldr	r1, [r1]
   19250:	bl	19288 <__assert_fail@plt+0x7ea8>
   19254:	b	1926c <__assert_fail@plt+0x7e8c>
   19258:	ldr	r2, [sp, #4]
   1925c:	add	r3, r2, #4
   19260:	str	r3, [sp, #4]
   19264:	ldr	r2, [r2]
   19268:	bl	11308 <fcntl64@plt>
   1926c:	mov	sp, fp
   19270:	pop	{fp, lr}
   19274:	add	sp, sp, #8
   19278:	bx	lr
   1927c:	mov	r2, r1
   19280:	mov	r1, #0
   19284:	b	11308 <fcntl64@plt>
   19288:	push	{r4, r5, r6, r7, fp, lr}
   1928c:	add	fp, sp, #16
   19290:	mov	r5, r1
   19294:	mov	r6, r0
   19298:	movw	r7, #45800	; 0xb2e8
   1929c:	movt	r7, #2
   192a0:	ldr	r0, [r7]
   192a4:	cmp	r0, #0
   192a8:	bmi	1930c <__assert_fail@plt+0x7f2c>
   192ac:	mov	r0, r6
   192b0:	movw	r1, #1030	; 0x406
   192b4:	mov	r2, r5
   192b8:	bl	11308 <fcntl64@plt>
   192bc:	mov	r4, r0
   192c0:	cmn	r0, #1
   192c4:	bgt	192f8 <__assert_fail@plt+0x7f18>
   192c8:	bl	1129c <__errno_location@plt>
   192cc:	ldr	r0, [r0]
   192d0:	cmp	r0, #22
   192d4:	bne	192f8 <__assert_fail@plt+0x7f18>
   192d8:	mov	r0, r6
   192dc:	mov	r1, r5
   192e0:	bl	1927c <__assert_fail@plt+0x7e9c>
   192e4:	mov	r4, r0
   192e8:	cmp	r0, #0
   192ec:	bmi	1935c <__assert_fail@plt+0x7f7c>
   192f0:	mvn	r0, #0
   192f4:	b	192fc <__assert_fail@plt+0x7f1c>
   192f8:	mov	r0, #1
   192fc:	str	r0, [r7]
   19300:	cmp	r4, #0
   19304:	bpl	19324 <__assert_fail@plt+0x7f44>
   19308:	b	1935c <__assert_fail@plt+0x7f7c>
   1930c:	mov	r0, r6
   19310:	mov	r1, r5
   19314:	bl	1927c <__assert_fail@plt+0x7e9c>
   19318:	mov	r4, r0
   1931c:	cmp	r4, #0
   19320:	bmi	1935c <__assert_fail@plt+0x7f7c>
   19324:	ldr	r0, [r7]
   19328:	cmn	r0, #1
   1932c:	bne	1935c <__assert_fail@plt+0x7f7c>
   19330:	mov	r0, r4
   19334:	mov	r1, #1
   19338:	bl	11308 <fcntl64@plt>
   1933c:	cmp	r0, #0
   19340:	bmi	19364 <__assert_fail@plt+0x7f84>
   19344:	orr	r2, r0, #1
   19348:	mov	r0, r4
   1934c:	mov	r1, #2
   19350:	bl	11308 <fcntl64@plt>
   19354:	cmn	r0, #1
   19358:	beq	19364 <__assert_fail@plt+0x7f84>
   1935c:	mov	r0, r4
   19360:	pop	{r4, r5, r6, r7, fp, pc}
   19364:	bl	1129c <__errno_location@plt>
   19368:	mov	r5, r0
   1936c:	ldr	r6, [r0]
   19370:	mov	r0, r4
   19374:	bl	113bc <close@plt>
   19378:	str	r6, [r5]
   1937c:	mvn	r4, #0
   19380:	mov	r0, r4
   19384:	pop	{r4, r5, r6, r7, fp, pc}
   19388:	sub	sp, sp, #8
   1938c:	push	{fp, lr}
   19390:	mov	fp, sp
   19394:	sub	sp, sp, #8
   19398:	str	r2, [fp, #8]
   1939c:	str	r3, [fp, #12]
   193a0:	mov	r2, #0
   193a4:	tst	r1, #64	; 0x40
   193a8:	ldrne	r2, [fp, #8]
   193ac:	bl	1120c <open64@plt>
   193b0:	bl	180d0 <__assert_fail@plt+0x6cf0>
   193b4:	mov	sp, fp
   193b8:	pop	{fp, lr}
   193bc:	add	sp, sp, #8
   193c0:	bx	lr
   193c4:	push	{r4, sl, fp, lr}
   193c8:	add	fp, sp, #8
   193cc:	mov	r4, r0
   193d0:	cmp	r0, #0
   193d4:	beq	193ec <__assert_fail@plt+0x800c>
   193d8:	mov	r0, r4
   193dc:	bl	11230 <__freading@plt>
   193e0:	cmp	r0, #0
   193e4:	movne	r0, r4
   193e8:	blne	193f8 <__assert_fail@plt+0x8018>
   193ec:	mov	r0, r4
   193f0:	pop	{r4, sl, fp, lr}
   193f4:	b	11128 <fflush@plt>
   193f8:	push	{fp, lr}
   193fc:	mov	fp, sp
   19400:	sub	sp, sp, #8
   19404:	ldrb	r1, [r0, #1]
   19408:	tst	r1, #1
   1940c:	beq	19424 <__assert_fail@plt+0x8044>
   19410:	mov	r1, #1
   19414:	str	r1, [sp]
   19418:	mov	r2, #0
   1941c:	mov	r3, #0
   19420:	bl	19454 <__assert_fail@plt+0x8074>
   19424:	mov	sp, fp
   19428:	pop	{fp, pc}
   1942c:	push	{r4, r5, r6, sl, fp, lr}
   19430:	add	fp, sp, #16
   19434:	mov	r4, r0
   19438:	bl	1129c <__errno_location@plt>
   1943c:	mov	r5, r0
   19440:	ldr	r6, [r0]
   19444:	mov	r0, r4
   19448:	bl	11140 <free@plt>
   1944c:	str	r6, [r5]
   19450:	pop	{r4, r5, r6, sl, fp, pc}
   19454:	push	{r4, r5, r6, r7, fp, lr}
   19458:	add	fp, sp, #16
   1945c:	sub	sp, sp, #8
   19460:	mov	r5, r3
   19464:	mov	r6, r2
   19468:	mov	r4, r0
   1946c:	ldr	r0, [r0, #4]
   19470:	ldr	r1, [r4, #8]
   19474:	cmp	r1, r0
   19478:	bne	19494 <__assert_fail@plt+0x80b4>
   1947c:	ldrd	r0, [r4, #16]
   19480:	cmp	r1, r0
   19484:	bne	19494 <__assert_fail@plt+0x80b4>
   19488:	ldr	r0, [r4, #36]	; 0x24
   1948c:	cmp	r0, #0
   19490:	beq	194ac <__assert_fail@plt+0x80cc>
   19494:	mov	r0, r4
   19498:	mov	r2, r6
   1949c:	mov	r3, r5
   194a0:	sub	sp, fp, #16
   194a4:	pop	{r4, r5, r6, r7, fp, lr}
   194a8:	b	112fc <fseeko64@plt>
   194ac:	ldr	r7, [fp, #8]
   194b0:	mov	r0, r4
   194b4:	bl	112d8 <fileno@plt>
   194b8:	str	r7, [sp]
   194bc:	mov	r2, r6
   194c0:	mov	r3, r5
   194c4:	bl	111c4 <lseek64@plt>
   194c8:	and	r2, r0, r1
   194cc:	cmn	r2, #1
   194d0:	beq	194f0 <__assert_fail@plt+0x8110>
   194d4:	strd	r0, [r4, #80]	; 0x50
   194d8:	ldr	r0, [r4]
   194dc:	bic	r0, r0, #16
   194e0:	str	r0, [r4]
   194e4:	mov	r0, #0
   194e8:	sub	sp, fp, #16
   194ec:	pop	{r4, r5, r6, r7, fp, pc}
   194f0:	mvn	r0, #0
   194f4:	sub	sp, fp, #16
   194f8:	pop	{r4, r5, r6, r7, fp, pc}
   194fc:	push	{fp, lr}
   19500:	mov	fp, sp
   19504:	bl	1129c <__errno_location@plt>
   19508:	mov	r1, #12
   1950c:	str	r1, [r0]
   19510:	mov	r0, #0
   19514:	pop	{fp, pc}
   19518:	b	18a7c <__assert_fail@plt+0x769c>
   1951c:	cmp	r1, #0
   19520:	orreq	r1, r1, #1
   19524:	b	18aac <__assert_fail@plt+0x76cc>
   19528:	b	18a28 <__assert_fail@plt+0x7648>
   1952c:	clz	r3, r2
   19530:	lsr	ip, r3, #5
   19534:	clz	r3, r1
   19538:	lsr	r3, r3, #5
   1953c:	orrs	r3, r3, ip
   19540:	movwne	r1, #1
   19544:	movwne	r2, #1
   19548:	b	195e8 <__assert_fail@plt+0x8208>
   1954c:	push	{fp, lr}
   19550:	mov	fp, sp
   19554:	mov	r0, #14
   19558:	bl	1132c <nl_langinfo@plt>
   1955c:	movw	r1, #39594	; 0x9aaa
   19560:	movt	r1, #1
   19564:	cmp	r0, #0
   19568:	movne	r1, r0
   1956c:	ldrb	r2, [r1]
   19570:	movw	r0, #43399	; 0xa987
   19574:	movt	r0, #1
   19578:	cmp	r2, #0
   1957c:	movne	r0, r1
   19580:	pop	{fp, pc}
   19584:	push	{r4, r5, r6, r7, fp, lr}
   19588:	add	fp, sp, #16
   1958c:	sub	sp, sp, #8
   19590:	mov	r7, r2
   19594:	mov	r4, r1
   19598:	add	r5, sp, #4
   1959c:	cmp	r0, #0
   195a0:	movne	r5, r0
   195a4:	mov	r0, r5
   195a8:	bl	111f4 <mbrtowc@plt>
   195ac:	mov	r6, r0
   195b0:	cmp	r7, #0
   195b4:	beq	195dc <__assert_fail@plt+0x81fc>
   195b8:	cmn	r6, #2
   195bc:	bcc	195dc <__assert_fail@plt+0x81fc>
   195c0:	mov	r0, #0
   195c4:	bl	19630 <__assert_fail@plt+0x8250>
   195c8:	cmp	r0, #0
   195cc:	bne	195dc <__assert_fail@plt+0x81fc>
   195d0:	ldrb	r0, [r4]
   195d4:	str	r0, [r5]
   195d8:	mov	r6, #1
   195dc:	mov	r0, r6
   195e0:	sub	sp, fp, #16
   195e4:	pop	{r4, r5, r6, r7, fp, pc}
   195e8:	cmp	r2, #0
   195ec:	beq	1961c <__assert_fail@plt+0x823c>
   195f0:	mvn	r3, #0
   195f4:	udiv	r3, r3, r2
   195f8:	cmp	r3, r1
   195fc:	bcs	1961c <__assert_fail@plt+0x823c>
   19600:	push	{fp, lr}
   19604:	mov	fp, sp
   19608:	bl	1129c <__errno_location@plt>
   1960c:	mov	r1, #12
   19610:	str	r1, [r0]
   19614:	mov	r0, #0
   19618:	pop	{fp, pc}
   1961c:	mul	r1, r2, r1
   19620:	b	18aac <__assert_fail@plt+0x76cc>
   19624:	mov	r1, #0
   19628:	mov	r2, #3
   1962c:	b	191a4 <__assert_fail@plt+0x7dc4>
   19630:	push	{r4, sl, fp, lr}
   19634:	add	fp, sp, #8
   19638:	sub	sp, sp, #264	; 0x108
   1963c:	add	r1, sp, #7
   19640:	movw	r2, #257	; 0x101
   19644:	bl	1969c <__assert_fail@plt+0x82bc>
   19648:	mov	r4, #0
   1964c:	cmp	r0, #0
   19650:	bne	19690 <__assert_fail@plt+0x82b0>
   19654:	add	r0, sp, #7
   19658:	movw	r1, #43405	; 0xa98d
   1965c:	movt	r1, #1
   19660:	mov	r2, #2
   19664:	bl	1126c <bcmp@plt>
   19668:	cmp	r0, #0
   1966c:	beq	19690 <__assert_fail@plt+0x82b0>
   19670:	add	r0, sp, #7
   19674:	movw	r1, #43407	; 0xa98f
   19678:	movt	r1, #1
   1967c:	mov	r2, #6
   19680:	bl	1126c <bcmp@plt>
   19684:	mov	r4, r0
   19688:	cmp	r0, #0
   1968c:	movwne	r4, #1
   19690:	mov	r0, r4
   19694:	sub	sp, fp, #8
   19698:	pop	{r4, sl, fp, pc}
   1969c:	b	196a0 <__assert_fail@plt+0x82c0>
   196a0:	push	{r4, r5, r6, r7, fp, lr}
   196a4:	add	fp, sp, #16
   196a8:	mov	r6, r2
   196ac:	mov	r4, r1
   196b0:	bl	19738 <__assert_fail@plt+0x8358>
   196b4:	cmp	r0, #0
   196b8:	beq	196e8 <__assert_fail@plt+0x8308>
   196bc:	mov	r7, r0
   196c0:	bl	11278 <strlen@plt>
   196c4:	cmp	r0, r6
   196c8:	bcs	19704 <__assert_fail@plt+0x8324>
   196cc:	add	r2, r0, #1
   196d0:	mov	r0, r4
   196d4:	mov	r1, r7
   196d8:	bl	11158 <memcpy@plt>
   196dc:	mov	r5, #0
   196e0:	mov	r0, r5
   196e4:	pop	{r4, r5, r6, r7, fp, pc}
   196e8:	mov	r5, #22
   196ec:	cmp	r6, #0
   196f0:	beq	1972c <__assert_fail@plt+0x834c>
   196f4:	mov	r0, #0
   196f8:	strb	r0, [r4]
   196fc:	mov	r0, r5
   19700:	pop	{r4, r5, r6, r7, fp, pc}
   19704:	mov	r5, #34	; 0x22
   19708:	cmp	r6, #0
   1970c:	beq	1972c <__assert_fail@plt+0x834c>
   19710:	sub	r6, r6, #1
   19714:	mov	r0, r4
   19718:	mov	r1, r7
   1971c:	mov	r2, r6
   19720:	bl	11158 <memcpy@plt>
   19724:	mov	r0, #0
   19728:	strb	r0, [r4, r6]
   1972c:	mov	r0, r5
   19730:	pop	{r4, r5, r6, r7, fp, pc}
   19734:	b	19738 <__assert_fail@plt+0x8358>
   19738:	mov	r1, #0
   1973c:	b	11314 <setlocale@plt>
   19740:	cmp	r3, #0
   19744:	cmpeq	r2, #0
   19748:	bne	19760 <__assert_fail@plt+0x8380>
   1974c:	cmp	r1, #0
   19750:	cmpeq	r0, #0
   19754:	mvnne	r1, #0
   19758:	mvnne	r0, #0
   1975c:	b	1977c <__assert_fail@plt+0x839c>
   19760:	sub	sp, sp, #8
   19764:	push	{sp, lr}
   19768:	bl	1978c <__assert_fail@plt+0x83ac>
   1976c:	ldr	lr, [sp, #4]
   19770:	add	sp, sp, #8
   19774:	pop	{r2, r3}
   19778:	bx	lr
   1977c:	push	{r1, lr}
   19780:	mov	r0, #8
   19784:	bl	11110 <raise@plt>
   19788:	pop	{r1, pc}
   1978c:	cmp	r1, r3
   19790:	cmpeq	r0, r2
   19794:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19798:	mov	r4, r0
   1979c:	movcc	r0, #0
   197a0:	mov	r5, r1
   197a4:	ldr	lr, [sp, #36]	; 0x24
   197a8:	movcc	r1, r0
   197ac:	bcc	198a8 <__assert_fail@plt+0x84c8>
   197b0:	cmp	r3, #0
   197b4:	clzeq	ip, r2
   197b8:	clzne	ip, r3
   197bc:	addeq	ip, ip, #32
   197c0:	cmp	r5, #0
   197c4:	clzeq	r1, r4
   197c8:	addeq	r1, r1, #32
   197cc:	clzne	r1, r5
   197d0:	sub	ip, ip, r1
   197d4:	sub	sl, ip, #32
   197d8:	lsl	r9, r3, ip
   197dc:	rsb	fp, ip, #32
   197e0:	orr	r9, r9, r2, lsl sl
   197e4:	orr	r9, r9, r2, lsr fp
   197e8:	lsl	r8, r2, ip
   197ec:	cmp	r5, r9
   197f0:	cmpeq	r4, r8
   197f4:	movcc	r0, #0
   197f8:	movcc	r1, r0
   197fc:	bcc	19818 <__assert_fail@plt+0x8438>
   19800:	mov	r0, #1
   19804:	subs	r4, r4, r8
   19808:	lsl	r1, r0, sl
   1980c:	orr	r1, r1, r0, lsr fp
   19810:	lsl	r0, r0, ip
   19814:	sbc	r5, r5, r9
   19818:	cmp	ip, #0
   1981c:	beq	198a8 <__assert_fail@plt+0x84c8>
   19820:	lsr	r6, r8, #1
   19824:	orr	r6, r6, r9, lsl #31
   19828:	lsr	r7, r9, #1
   1982c:	mov	r2, ip
   19830:	b	19854 <__assert_fail@plt+0x8474>
   19834:	subs	r3, r4, r6
   19838:	sbc	r8, r5, r7
   1983c:	adds	r3, r3, r3
   19840:	adc	r8, r8, r8
   19844:	adds	r4, r3, #1
   19848:	adc	r5, r8, #0
   1984c:	subs	r2, r2, #1
   19850:	beq	19870 <__assert_fail@plt+0x8490>
   19854:	cmp	r5, r7
   19858:	cmpeq	r4, r6
   1985c:	bcs	19834 <__assert_fail@plt+0x8454>
   19860:	adds	r4, r4, r4
   19864:	adc	r5, r5, r5
   19868:	subs	r2, r2, #1
   1986c:	bne	19854 <__assert_fail@plt+0x8474>
   19870:	lsr	r3, r4, ip
   19874:	orr	r3, r3, r5, lsl fp
   19878:	lsr	r2, r5, ip
   1987c:	orr	r3, r3, r5, lsr sl
   19880:	adds	r0, r0, r4
   19884:	mov	r4, r3
   19888:	lsl	r3, r2, ip
   1988c:	orr	r3, r3, r4, lsl sl
   19890:	lsl	ip, r4, ip
   19894:	orr	r3, r3, r4, lsr fp
   19898:	adc	r1, r1, r5
   1989c:	subs	r0, r0, ip
   198a0:	mov	r5, r2
   198a4:	sbc	r1, r1, r3
   198a8:	cmp	lr, #0
   198ac:	strdne	r4, [lr]
   198b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   198b8:	mov	r7, r0
   198bc:	ldr	r6, [pc, #72]	; 1990c <__assert_fail@plt+0x852c>
   198c0:	ldr	r5, [pc, #72]	; 19910 <__assert_fail@plt+0x8530>
   198c4:	add	r6, pc, r6
   198c8:	add	r5, pc, r5
   198cc:	sub	r6, r6, r5
   198d0:	mov	r8, r1
   198d4:	mov	r9, r2
   198d8:	bl	110cc <fstatfs64@plt-0x20>
   198dc:	asrs	r6, r6, #2
   198e0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   198e4:	mov	r4, #0
   198e8:	add	r4, r4, #1
   198ec:	ldr	r3, [r5], #4
   198f0:	mov	r2, r9
   198f4:	mov	r1, r8
   198f8:	mov	r0, r7
   198fc:	blx	r3
   19900:	cmp	r6, r4
   19904:	bne	198e8 <__assert_fail@plt+0x8508>
   19908:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1990c:	andeq	r1, r1, r0, asr #12
   19910:	andeq	r1, r1, r8, lsr r6
   19914:	bx	lr
   19918:	ldr	r3, [pc, #12]	; 1992c <__assert_fail@plt+0x854c>
   1991c:	mov	r1, #0
   19920:	add	r3, pc, r3
   19924:	ldr	r2, [r3]
   19928:	b	112b4 <__cxa_atexit@plt>
   1992c:	andeq	r1, r1, ip, ror #15
   19930:	mov	r2, r1
   19934:	mov	r1, r0
   19938:	mov	r0, #3
   1993c:	b	11398 <__xstat64@plt>
   19940:	mov	r2, r1
   19944:	mov	r1, r0
   19948:	mov	r0, #3
   1994c:	b	111ac <__fxstat64@plt>
   19950:	mov	r2, r1
   19954:	mov	r1, r0
   19958:	mov	r0, #3
   1995c:	b	113c8 <__lxstat64@plt>
   19960:	push	{lr}		; (str lr, [sp, #-4]!)
   19964:	sub	sp, sp, #12
   19968:	str	r3, [sp]
   1996c:	mov	r3, r2
   19970:	mov	r2, r1
   19974:	mov	r1, r0
   19978:	mov	r0, #3
   1997c:	bl	11194 <__fxstatat64@plt>
   19980:	add	sp, sp, #12
   19984:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

00019988 <.fini>:
   19988:	push	{r3, lr}
   1998c:	pop	{r3, pc}
