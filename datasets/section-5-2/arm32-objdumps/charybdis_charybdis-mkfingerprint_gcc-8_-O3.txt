
../repos/charybdis/tools/.libs/charybdis-mkfingerprint:     file format elf32-littlearm


Disassembly of section .init:

00010484 <.init>:
   10484:	push	{r3, lr}
   10488:	bl	10734 <strcmp@plt+0x218>
   1048c:	pop	{r3, pc}

Disassembly of section .plt:

00010490 <abort@plt-0x14>:
   10490:	push	{lr}		; (str lr, [sp, #-4]!)
   10494:	ldr	lr, [pc, #4]	; 104a0 <abort@plt-0x4>
   10498:	add	lr, pc, lr
   1049c:	ldr	pc, [lr, #8]!
   104a0:	andeq	r0, r1, r0, ror #22

000104a4 <abort@plt>:
   104a4:	add	ip, pc, #0, 12
   104a8:	add	ip, ip, #16, 20	; 0x10000
   104ac:	ldr	pc, [ip, #2912]!	; 0xb60

000104b0 <__libc_start_main@plt>:
   104b0:	add	ip, pc, #0, 12
   104b4:	add	ip, ip, #16, 20	; 0x10000
   104b8:	ldr	pc, [ip, #2904]!	; 0xb58

000104bc <__gmon_start__@plt>:
   104bc:	add	ip, pc, #0, 12
   104c0:	add	ip, ip, #16, 20	; 0x10000
   104c4:	ldr	pc, [ip, #2896]!	; 0xb50

000104c8 <putchar@plt>:
   104c8:	add	ip, pc, #0, 12
   104cc:	add	ip, ip, #16, 20	; 0x10000
   104d0:	ldr	pc, [ip, #2888]!	; 0xb48

000104d4 <memset@plt>:
   104d4:	add	ip, pc, #0, 12
   104d8:	add	ip, ip, #16, 20	; 0x10000
   104dc:	ldr	pc, [ip, #2880]!	; 0xb40

000104e0 <perror@plt>:
   104e0:	add	ip, pc, #0, 12
   104e4:	add	ip, ip, #16, 20	; 0x10000
   104e8:	ldr	pc, [ip, #2872]!	; 0xb38

000104ec <printf@plt>:
   104ec:	add	ip, pc, #0, 12
   104f0:	add	ip, ip, #16, 20	; 0x10000
   104f4:	ldr	pc, [ip, #2864]!	; 0xb30

000104f8 <fwrite@plt>:
   104f8:	add	ip, pc, #0, 12
   104fc:	add	ip, ip, #16, 20	; 0x10000
   10500:	ldr	pc, [ip, #2856]!	; 0xb28

00010504 <puts@plt>:
   10504:	add	ip, pc, #0, 12
   10508:	add	ip, ip, #16, 20	; 0x10000
   1050c:	ldr	pc, [ip, #2848]!	; 0xb20

00010510 <rb_get_ssl_certfp_file@plt>:
   10510:	add	ip, pc, #0, 12
   10514:	add	ip, ip, #16, 20	; 0x10000
   10518:	ldr	pc, [ip, #2840]!	; 0xb18

0001051c <strcmp@plt>:
   1051c:	add	ip, pc, #0, 12
   10520:	add	ip, ip, #16, 20	; 0x10000
   10524:	ldr	pc, [ip, #2832]!	; 0xb10

Disassembly of section .text:

00010528 <.text>:
   10528:	strd	r4, [sp, #-20]!	; 0xffffffec
   1052c:	mov	r2, #65	; 0x41
   10530:	mov	r5, r0
   10534:	strd	r6, [sp, #8]
   10538:	mov	r4, r1
   1053c:	mov	r1, #0
   10540:	str	lr, [sp, #16]
   10544:	sub	sp, sp, #76	; 0x4c
   10548:	add	r0, sp, #4
   1054c:	bl	104d4 <memset@plt>
   10550:	cmp	r5, #3
   10554:	bne	10670 <strcmp@plt+0x154>
   10558:	ldmib	r4, {r5, r6}
   1055c:	movw	r1, #2268	; 0x8dc
   10560:	movt	r1, #1
   10564:	mov	r0, r5
   10568:	bl	1051c <strcmp@plt>
   1056c:	subs	r2, r0, #0
   10570:	beq	105f8 <strcmp@plt+0xdc>
   10574:	movw	r1, #2276	; 0x8e4
   10578:	movt	r1, #1
   1057c:	mov	r0, r5
   10580:	bl	1051c <strcmp@plt>
   10584:	cmp	r0, #0
   10588:	beq	10690 <strcmp@plt+0x174>
   1058c:	movw	r1, #2284	; 0x8ec
   10590:	movt	r1, #1
   10594:	mov	r0, r5
   10598:	bl	1051c <strcmp@plt>
   1059c:	cmp	r0, #0
   105a0:	beq	106a0 <strcmp@plt+0x184>
   105a4:	movw	r1, #2292	; 0x8f4
   105a8:	movt	r1, #1
   105ac:	mov	r0, r5
   105b0:	bl	1051c <strcmp@plt>
   105b4:	cmp	r0, #0
   105b8:	beq	106e8 <strcmp@plt+0x1cc>
   105bc:	movw	r1, #2256	; 0x8d0
   105c0:	movt	r1, #1
   105c4:	mov	r0, r5
   105c8:	bl	1051c <strcmp@plt>
   105cc:	cmp	r0, #0
   105d0:	movweq	r4, #2152	; 0x868
   105d4:	movweq	r2, #4098	; 0x1002
   105d8:	movteq	r4, #1
   105dc:	beq	10600 <strcmp@plt+0xe4>
   105e0:	mov	r1, r5
   105e4:	movw	r0, #2304	; 0x900
   105e8:	movt	r0, #1
   105ec:	bl	104ec <printf@plt>
   105f0:	mov	r0, #1
   105f4:	b	1065c <strcmp@plt+0x140>
   105f8:	movw	r4, #2272	; 0x8e0
   105fc:	movt	r4, #1
   10600:	add	r1, sp, #4
   10604:	mov	r0, r6
   10608:	bl	10510 <rb_get_ssl_certfp_file@plt>
   1060c:	subs	r7, r0, #0
   10610:	blt	106d8 <strcmp@plt+0x1bc>
   10614:	beq	106b0 <strcmp@plt+0x194>
   10618:	mov	r1, r4
   1061c:	movw	r0, #2340	; 0x924
   10620:	movt	r0, #1
   10624:	movw	r6, #2344	; 0x928
   10628:	movt	r6, #1
   1062c:	add	r4, sp, #4
   10630:	mov	r5, #0
   10634:	bl	104ec <printf@plt>
   10638:	add	r5, r5, #1
   1063c:	ldrb	r1, [r4], #1
   10640:	mov	r0, r6
   10644:	bl	104ec <printf@plt>
   10648:	cmp	r7, r5
   1064c:	bgt	10638 <strcmp@plt+0x11c>
   10650:	mov	r0, #10
   10654:	bl	104c8 <putchar@plt>
   10658:	mov	r0, #0
   1065c:	add	sp, sp, #76	; 0x4c
   10660:	ldrd	r4, [sp]
   10664:	ldrd	r6, [sp, #8]
   10668:	add	sp, sp, #16
   1066c:	pop	{pc}		; (ldr pc, [sp], #4)
   10670:	movw	r0, #2168	; 0x878
   10674:	movt	r0, #1
   10678:	bl	10504 <puts@plt>
   1067c:	movw	r0, #2204	; 0x89c
   10680:	movt	r0, #1
   10684:	bl	10504 <puts@plt>
   10688:	mov	r0, #1
   1068c:	b	1065c <strcmp@plt+0x140>
   10690:	movw	r4, #2272	; 0x8e0
   10694:	movt	r4, #1
   10698:	mov	r2, #1
   1069c:	b	10600 <strcmp@plt+0xe4>
   106a0:	movw	r4, #2272	; 0x8e0
   106a4:	movt	r4, #1
   106a8:	mov	r2, #2
   106ac:	b	10600 <strcmp@plt+0xe4>
   106b0:	movw	r3, #4168	; 0x1048
   106b4:	movt	r3, #2
   106b8:	movw	r0, #2324	; 0x914
   106bc:	movt	r0, #1
   106c0:	ldr	r3, [r3]
   106c4:	mov	r2, #14
   106c8:	mov	r1, #1
   106cc:	bl	104f8 <fwrite@plt>
   106d0:	mov	r0, #1
   106d4:	b	1065c <strcmp@plt+0x140>
   106d8:	mov	r0, r6
   106dc:	bl	104e0 <perror@plt>
   106e0:	mov	r0, #1
   106e4:	b	1065c <strcmp@plt+0x140>
   106e8:	movw	r4, #2136	; 0x858
   106ec:	movt	r4, #1
   106f0:	movw	r2, #4097	; 0x1001
   106f4:	b	10600 <strcmp@plt+0xe4>
   106f8:	mov	fp, #0
   106fc:	mov	lr, #0
   10700:	pop	{r1}		; (ldr r1, [sp], #4)
   10704:	mov	r2, sp
   10708:	push	{r2}		; (str r2, [sp, #-4]!)
   1070c:	push	{r0}		; (str r0, [sp, #-4]!)
   10710:	ldr	ip, [pc, #16]	; 10728 <strcmp@plt+0x20c>
   10714:	push	{ip}		; (str ip, [sp, #-4]!)
   10718:	ldr	r0, [pc, #12]	; 1072c <strcmp@plt+0x210>
   1071c:	ldr	r3, [pc, #12]	; 10730 <strcmp@plt+0x214>
   10720:	bl	104b0 <__libc_start_main@plt>
   10724:	bl	104a4 <abort@plt>
   10728:	andeq	r0, r1, r8, asr #16
   1072c:	andeq	r0, r1, r8, lsr #10
   10730:	andeq	r0, r1, r8, ror #15
   10734:	ldr	r3, [pc, #20]	; 10750 <strcmp@plt+0x234>
   10738:	ldr	r2, [pc, #20]	; 10754 <strcmp@plt+0x238>
   1073c:	add	r3, pc, r3
   10740:	ldr	r2, [r3, r2]
   10744:	cmp	r2, #0
   10748:	bxeq	lr
   1074c:	b	104bc <__gmon_start__@plt>
   10750:			; <UNDEFINED> instruction: 0x000108bc
   10754:	andeq	r0, r0, r8, lsr r0
   10758:	ldr	r0, [pc, #24]	; 10778 <strcmp@plt+0x25c>
   1075c:	ldr	r3, [pc, #24]	; 1077c <strcmp@plt+0x260>
   10760:	cmp	r3, r0
   10764:	bxeq	lr
   10768:	ldr	r3, [pc, #16]	; 10780 <strcmp@plt+0x264>
   1076c:	cmp	r3, #0
   10770:	bxeq	lr
   10774:	bx	r3
   10778:	andeq	r1, r2, r4, asr #32
   1077c:	andeq	r1, r2, r4, asr #32
   10780:	andeq	r0, r0, r0
   10784:	ldr	r0, [pc, #36]	; 107b0 <strcmp@plt+0x294>
   10788:	ldr	r1, [pc, #36]	; 107b4 <strcmp@plt+0x298>
   1078c:	sub	r1, r1, r0
   10790:	asr	r1, r1, #2
   10794:	add	r1, r1, r1, lsr #31
   10798:	asrs	r1, r1, #1
   1079c:	bxeq	lr
   107a0:	ldr	r3, [pc, #16]	; 107b8 <strcmp@plt+0x29c>
   107a4:	cmp	r3, #0
   107a8:	bxeq	lr
   107ac:	bx	r3
   107b0:	andeq	r1, r2, r4, asr #32
   107b4:	andeq	r1, r2, r4, asr #32
   107b8:	andeq	r0, r0, r0
   107bc:	push	{r4, lr}
   107c0:	ldr	r4, [pc, #24]	; 107e0 <strcmp@plt+0x2c4>
   107c4:	ldrb	r3, [r4]
   107c8:	cmp	r3, #0
   107cc:	popne	{r4, pc}
   107d0:	bl	10758 <strcmp@plt+0x23c>
   107d4:	mov	r3, #1
   107d8:	strb	r3, [r4]
   107dc:	pop	{r4, pc}
   107e0:	andeq	r1, r2, ip, asr #32
   107e4:	b	10784 <strcmp@plt+0x268>
   107e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   107ec:	mov	r7, r0
   107f0:	ldr	r6, [pc, #72]	; 10840 <strcmp@plt+0x324>
   107f4:	ldr	r5, [pc, #72]	; 10844 <strcmp@plt+0x328>
   107f8:	add	r6, pc, r6
   107fc:	add	r5, pc, r5
   10800:	sub	r6, r6, r5
   10804:	mov	r8, r1
   10808:	mov	r9, r2
   1080c:	bl	10484 <abort@plt-0x20>
   10810:	asrs	r6, r6, #2
   10814:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10818:	mov	r4, #0
   1081c:	add	r4, r4, #1
   10820:	ldr	r3, [r5], #4
   10824:	mov	r2, r9
   10828:	mov	r1, r8
   1082c:	mov	r0, r7
   10830:	blx	r3
   10834:	cmp	r6, r4
   10838:	bne	1081c <strcmp@plt+0x300>
   1083c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10840:	strdeq	r0, [r1], -ip
   10844:	strdeq	r0, [r1], -r4
   10848:	bx	lr

Disassembly of section .fini:

0001084c <.fini>:
   1084c:	push	{r3, lr}
   10850:	pop	{r3, pc}
