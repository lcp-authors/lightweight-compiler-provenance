
../repos/coreutils/src/fold:     file format elf32-littlearm


Disassembly of section .init:

00010e3c <.init>:
   10e3c:	push	{r3, lr}
   10e40:	bl	11114 <__assert_fail@plt+0x48>
   10e44:	pop	{r3, pc}

Disassembly of section .plt:

00010e48 <calloc@plt-0x14>:
   10e48:	push	{lr}		; (str lr, [sp, #-4]!)
   10e4c:	ldr	lr, [pc, #4]	; 10e58 <calloc@plt-0x4>
   10e50:	add	lr, pc, lr
   10e54:	ldr	pc, [lr, #8]!
   10e58:	andeq	r5, r1, r8, lsr #3

00010e5c <calloc@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #86016	; 0x15000
   10e64:	ldr	pc, [ip, #424]!	; 0x1a8

00010e68 <fputs_unlocked@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #86016	; 0x15000
   10e70:	ldr	pc, [ip, #416]!	; 0x1a0

00010e74 <raise@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #86016	; 0x15000
   10e7c:	ldr	pc, [ip, #408]!	; 0x198

00010e80 <strcmp@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #86016	; 0x15000
   10e88:	ldr	pc, [ip, #400]!	; 0x190

00010e8c <posix_fadvise64@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #86016	; 0x15000
   10e94:	ldr	pc, [ip, #392]!	; 0x188

00010e98 <fflush@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #86016	; 0x15000
   10ea0:	ldr	pc, [ip, #384]!	; 0x180

00010ea4 <memmove@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #86016	; 0x15000
   10eac:	ldr	pc, [ip, #376]!	; 0x178

00010eb0 <free@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #86016	; 0x15000
   10eb8:	ldr	pc, [ip, #368]!	; 0x170

00010ebc <_exit@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #86016	; 0x15000
   10ec4:	ldr	pc, [ip, #360]!	; 0x168

00010ec8 <memcpy@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #86016	; 0x15000
   10ed0:	ldr	pc, [ip, #352]!	; 0x160

00010ed4 <mbsinit@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #86016	; 0x15000
   10edc:	ldr	pc, [ip, #344]!	; 0x158

00010ee0 <fwrite_unlocked@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #86016	; 0x15000
   10ee8:	ldr	pc, [ip, #336]!	; 0x150

00010eec <memcmp@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #86016	; 0x15000
   10ef4:	ldr	pc, [ip, #328]!	; 0x148

00010ef8 <getc_unlocked@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #86016	; 0x15000
   10f00:	ldr	pc, [ip, #320]!	; 0x140

00010f04 <dcgettext@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #86016	; 0x15000
   10f0c:	ldr	pc, [ip, #312]!	; 0x138

00010f10 <realloc@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #86016	; 0x15000
   10f18:	ldr	pc, [ip, #304]!	; 0x130

00010f1c <textdomain@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #86016	; 0x15000
   10f24:	ldr	pc, [ip, #296]!	; 0x128

00010f28 <iswprint@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #86016	; 0x15000
   10f30:	ldr	pc, [ip, #288]!	; 0x120

00010f34 <lseek64@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #86016	; 0x15000
   10f3c:	ldr	pc, [ip, #280]!	; 0x118

00010f40 <__ctype_get_mb_cur_max@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #86016	; 0x15000
   10f48:	ldr	pc, [ip, #272]!	; 0x110

00010f4c <__fpending@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #86016	; 0x15000
   10f54:	ldr	pc, [ip, #264]!	; 0x108

00010f58 <ferror_unlocked@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #86016	; 0x15000
   10f60:	ldr	pc, [ip, #256]!	; 0x100

00010f64 <mbrtowc@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #86016	; 0x15000
   10f6c:	ldr	pc, [ip, #248]!	; 0xf8

00010f70 <error@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #86016	; 0x15000
   10f78:	ldr	pc, [ip, #240]!	; 0xf0

00010f7c <malloc@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #86016	; 0x15000
   10f84:	ldr	pc, [ip, #232]!	; 0xe8

00010f88 <__libc_start_main@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #86016	; 0x15000
   10f90:	ldr	pc, [ip, #224]!	; 0xe0

00010f94 <__freading@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #86016	; 0x15000
   10f9c:	ldr	pc, [ip, #216]!	; 0xd8

00010fa0 <__gmon_start__@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #86016	; 0x15000
   10fa8:	ldr	pc, [ip, #208]!	; 0xd0

00010fac <getopt_long@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #86016	; 0x15000
   10fb4:	ldr	pc, [ip, #200]!	; 0xc8

00010fb8 <__ctype_b_loc@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #86016	; 0x15000
   10fc0:	ldr	pc, [ip, #192]!	; 0xc0

00010fc4 <exit@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #86016	; 0x15000
   10fcc:	ldr	pc, [ip, #184]!	; 0xb8

00010fd0 <strlen@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #86016	; 0x15000
   10fd8:	ldr	pc, [ip, #176]!	; 0xb0

00010fdc <strchr@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #86016	; 0x15000
   10fe4:	ldr	pc, [ip, #168]!	; 0xa8

00010fe8 <__errno_location@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #86016	; 0x15000
   10ff0:	ldr	pc, [ip, #160]!	; 0xa0

00010ff4 <__cxa_atexit@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #86016	; 0x15000
   10ffc:	ldr	pc, [ip, #152]!	; 0x98

00011000 <memset@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #86016	; 0x15000
   11008:	ldr	pc, [ip, #144]!	; 0x90

0001100c <__printf_chk@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #86016	; 0x15000
   11014:	ldr	pc, [ip, #136]!	; 0x88

00011018 <fileno@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #86016	; 0x15000
   11020:	ldr	pc, [ip, #128]!	; 0x80

00011024 <strtoumax@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #86016	; 0x15000
   1102c:	ldr	pc, [ip, #120]!	; 0x78

00011030 <__fprintf_chk@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #86016	; 0x15000
   11038:	ldr	pc, [ip, #112]!	; 0x70

0001103c <fclose@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #86016	; 0x15000
   11044:	ldr	pc, [ip, #104]!	; 0x68

00011048 <fseeko64@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #86016	; 0x15000
   11050:	ldr	pc, [ip, #96]!	; 0x60

00011054 <setlocale@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #86016	; 0x15000
   1105c:	ldr	pc, [ip, #88]!	; 0x58

00011060 <strrchr@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #86016	; 0x15000
   11068:	ldr	pc, [ip, #80]!	; 0x50

0001106c <nl_langinfo@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #86016	; 0x15000
   11074:	ldr	pc, [ip, #72]!	; 0x48

00011078 <clearerr_unlocked@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #86016	; 0x15000
   11080:	ldr	pc, [ip, #64]!	; 0x40

00011084 <fopen64@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #86016	; 0x15000
   1108c:	ldr	pc, [ip, #56]!	; 0x38

00011090 <bindtextdomain@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #86016	; 0x15000
   11098:	ldr	pc, [ip, #48]!	; 0x30

0001109c <fputs@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #86016	; 0x15000
   110a4:	ldr	pc, [ip, #40]!	; 0x28

000110a8 <strncmp@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #86016	; 0x15000
   110b0:	ldr	pc, [ip, #32]!

000110b4 <abort@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #86016	; 0x15000
   110bc:	ldr	pc, [ip, #24]!

000110c0 <putchar_unlocked@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #86016	; 0x15000
   110c8:	ldr	pc, [ip, #16]!

000110cc <__assert_fail@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #86016	; 0x15000
   110d4:	ldr	pc, [ip, #8]!

Disassembly of section .text:

000110d8 <.text>:
   110d8:	mov	fp, #0
   110dc:	mov	lr, #0
   110e0:	pop	{r1}		; (ldr r1, [sp], #4)
   110e4:	mov	r2, sp
   110e8:	push	{r2}		; (str r2, [sp, #-4]!)
   110ec:	push	{r0}		; (str r0, [sp, #-4]!)
   110f0:	ldr	ip, [pc, #16]	; 11108 <__assert_fail@plt+0x3c>
   110f4:	push	{ip}		; (str ip, [sp, #-4]!)
   110f8:	ldr	r0, [pc, #12]	; 1110c <__assert_fail@plt+0x40>
   110fc:	ldr	r3, [pc, #12]	; 11110 <__assert_fail@plt+0x44>
   11100:	bl	10f88 <__libc_start_main@plt>
   11104:	bl	110b4 <abort@plt>
   11108:	andeq	r4, r1, ip, ror #29
   1110c:	andeq	r1, r1, r0, asr #8
   11110:	andeq	r4, r1, ip, lsl #29
   11114:	ldr	r3, [pc, #20]	; 11130 <__assert_fail@plt+0x64>
   11118:	ldr	r2, [pc, #20]	; 11134 <__assert_fail@plt+0x68>
   1111c:	add	r3, pc, r3
   11120:	ldr	r2, [r3, r2]
   11124:	cmp	r2, #0
   11128:	bxeq	lr
   1112c:	b	10fa0 <__gmon_start__@plt>
   11130:	ldrdeq	r4, [r1], -ip
   11134:	andeq	r0, r0, r0, ror #1
   11138:	ldr	r0, [pc, #24]	; 11158 <__assert_fail@plt+0x8c>
   1113c:	ldr	r3, [pc, #24]	; 1115c <__assert_fail@plt+0x90>
   11140:	cmp	r3, r0
   11144:	bxeq	lr
   11148:	ldr	r3, [pc, #16]	; 11160 <__assert_fail@plt+0x94>
   1114c:	cmp	r3, #0
   11150:	bxeq	lr
   11154:	bx	r3
   11158:	andeq	r6, r2, r8, lsr r1
   1115c:	andeq	r6, r2, r8, lsr r1
   11160:	andeq	r0, r0, r0
   11164:	ldr	r0, [pc, #36]	; 11190 <__assert_fail@plt+0xc4>
   11168:	ldr	r1, [pc, #36]	; 11194 <__assert_fail@plt+0xc8>
   1116c:	sub	r1, r1, r0
   11170:	asr	r1, r1, #2
   11174:	add	r1, r1, r1, lsr #31
   11178:	asrs	r1, r1, #1
   1117c:	bxeq	lr
   11180:	ldr	r3, [pc, #16]	; 11198 <__assert_fail@plt+0xcc>
   11184:	cmp	r3, #0
   11188:	bxeq	lr
   1118c:	bx	r3
   11190:	andeq	r6, r2, r8, lsr r1
   11194:	andeq	r6, r2, r8, lsr r1
   11198:	andeq	r0, r0, r0
   1119c:	push	{r4, lr}
   111a0:	ldr	r4, [pc, #24]	; 111c0 <__assert_fail@plt+0xf4>
   111a4:	ldrb	r3, [r4]
   111a8:	cmp	r3, #0
   111ac:	popne	{r4, pc}
   111b0:	bl	11138 <__assert_fail@plt+0x6c>
   111b4:	mov	r3, #1
   111b8:	strb	r3, [r4]
   111bc:	pop	{r4, pc}
   111c0:	andeq	r6, r2, ip, asr r1
   111c4:	b	11164 <__assert_fail@plt+0x98>
   111c8:	push	{fp, lr}
   111cc:	mov	fp, sp
   111d0:	sub	sp, sp, #56	; 0x38
   111d4:	mov	r8, r0
   111d8:	cmp	r0, #0
   111dc:	bne	11400 <__assert_fail@plt+0x334>
   111e0:	movw	r1, #20283	; 0x4f3b
   111e4:	mov	r0, #0
   111e8:	mov	r2, #5
   111ec:	movt	r1, #1
   111f0:	bl	10f04 <dcgettext@plt>
   111f4:	mov	r1, r0
   111f8:	movw	r0, #24948	; 0x6174
   111fc:	movt	r0, #2
   11200:	ldr	r2, [r0]
   11204:	mov	r0, #1
   11208:	bl	1100c <__printf_chk@plt>
   1120c:	movw	r1, #20316	; 0x4f5c
   11210:	mov	r0, #0
   11214:	mov	r2, #5
   11218:	movt	r1, #1
   1121c:	bl	10f04 <dcgettext@plt>
   11220:	movw	r9, #24916	; 0x6154
   11224:	movt	r9, #2
   11228:	ldr	r1, [r9]
   1122c:	bl	10e68 <fputs_unlocked@plt>
   11230:	movw	r1, #20707	; 0x50e3
   11234:	mov	r0, #0
   11238:	mov	r2, #5
   1123c:	movt	r1, #1
   11240:	bl	10f04 <dcgettext@plt>
   11244:	ldr	r1, [r9]
   11248:	bl	10e68 <fputs_unlocked@plt>
   1124c:	movw	r1, #20763	; 0x511b
   11250:	mov	r0, #0
   11254:	mov	r2, #5
   11258:	movt	r1, #1
   1125c:	bl	10f04 <dcgettext@plt>
   11260:	ldr	r1, [r9]
   11264:	bl	10e68 <fputs_unlocked@plt>
   11268:	movw	r1, #20376	; 0x4f98
   1126c:	mov	r0, #0
   11270:	mov	r2, #5
   11274:	movt	r1, #1
   11278:	bl	10f04 <dcgettext@plt>
   1127c:	ldr	r1, [r9]
   11280:	bl	10e68 <fputs_unlocked@plt>
   11284:	movw	r1, #20523	; 0x502b
   11288:	mov	r0, #0
   1128c:	mov	r2, #5
   11290:	movt	r1, #1
   11294:	bl	10f04 <dcgettext@plt>
   11298:	ldr	r1, [r9]
   1129c:	bl	10e68 <fputs_unlocked@plt>
   112a0:	movw	r1, #20568	; 0x5058
   112a4:	mov	r0, #0
   112a8:	mov	r2, #5
   112ac:	movt	r1, #1
   112b0:	bl	10f04 <dcgettext@plt>
   112b4:	ldr	r1, [r9]
   112b8:	bl	10e68 <fputs_unlocked@plt>
   112bc:	movw	r0, #21320	; 0x5348
   112c0:	mov	r6, sp
   112c4:	movt	r0, #1
   112c8:	mov	r1, r6
   112cc:	ldm	r0!, {r2, r3, r4, r5}
   112d0:	stmia	r1!, {r2, r3, r4, r5}
   112d4:	ldm	r0!, {r2, r3, r4, r5, r7}
   112d8:	stmia	r1!, {r2, r3, r4, r5, r7}
   112dc:	ldm	r0, {r2, r3, r4, r5, r7}
   112e0:	stm	r1, {r2, r3, r4, r5, r7}
   112e4:	movw	r1, #20838	; 0x5166
   112e8:	movw	r5, #20622	; 0x508e
   112ec:	movt	r1, #1
   112f0:	movt	r5, #1
   112f4:	mov	r0, r5
   112f8:	bl	10e80 <strcmp@plt>
   112fc:	cmp	r0, #0
   11300:	ldrne	r1, [r6, #8]!
   11304:	cmpne	r1, #0
   11308:	bne	112f4 <__assert_fail@plt+0x228>
   1130c:	ldr	r6, [r6, #4]
   11310:	movw	r1, #20933	; 0x51c5
   11314:	mov	r0, #0
   11318:	mov	r2, #5
   1131c:	movt	r1, #1
   11320:	bl	10f04 <dcgettext@plt>
   11324:	movw	r2, #20677	; 0x50c5
   11328:	movw	r3, #20956	; 0x51dc
   1132c:	mov	r1, r0
   11330:	mov	r0, #1
   11334:	movt	r2, #1
   11338:	movt	r3, #1
   1133c:	bl	1100c <__printf_chk@plt>
   11340:	cmp	r6, #0
   11344:	mov	r0, #5
   11348:	mov	r1, #0
   1134c:	moveq	r6, r5
   11350:	bl	11054 <setlocale@plt>
   11354:	cmp	r0, #0
   11358:	beq	11390 <__assert_fail@plt+0x2c4>
   1135c:	movw	r1, #20996	; 0x5204
   11360:	mov	r2, #3
   11364:	movt	r1, #1
   11368:	bl	110a8 <strncmp@plt>
   1136c:	cmp	r0, #0
   11370:	beq	11390 <__assert_fail@plt+0x2c4>
   11374:	movw	r1, #21000	; 0x5208
   11378:	mov	r0, #0
   1137c:	mov	r2, #5
   11380:	movt	r1, #1
   11384:	bl	10f04 <dcgettext@plt>
   11388:	ldr	r1, [r9]
   1138c:	bl	10e68 <fputs_unlocked@plt>
   11390:	movw	r1, #21071	; 0x524f
   11394:	mov	r0, #0
   11398:	mov	r2, #5
   1139c:	movt	r1, #1
   113a0:	bl	10f04 <dcgettext@plt>
   113a4:	movw	r2, #20956	; 0x51dc
   113a8:	mov	r1, r0
   113ac:	mov	r0, #1
   113b0:	mov	r3, r5
   113b4:	movt	r2, #1
   113b8:	bl	1100c <__printf_chk@plt>
   113bc:	movw	r1, #21098	; 0x526a
   113c0:	mov	r0, #0
   113c4:	mov	r2, #5
   113c8:	movt	r1, #1
   113cc:	bl	10f04 <dcgettext@plt>
   113d0:	movw	r3, #21148	; 0x529c
   113d4:	mov	r1, r0
   113d8:	movw	r0, #20866	; 0x5182
   113dc:	cmp	r6, r5
   113e0:	mov	r2, r6
   113e4:	movt	r0, #1
   113e8:	movt	r3, #1
   113ec:	moveq	r3, r0
   113f0:	mov	r0, #1
   113f4:	bl	1100c <__printf_chk@plt>
   113f8:	mov	r0, r8
   113fc:	bl	10fc4 <exit@plt>
   11400:	movw	r0, #24904	; 0x6148
   11404:	movw	r1, #20244	; 0x4f14
   11408:	mov	r2, #5
   1140c:	movt	r0, #2
   11410:	movt	r1, #1
   11414:	ldr	r5, [r0]
   11418:	mov	r0, #0
   1141c:	bl	10f04 <dcgettext@plt>
   11420:	mov	r2, r0
   11424:	movw	r0, #24948	; 0x6174
   11428:	mov	r1, #1
   1142c:	movt	r0, #2
   11430:	ldr	r3, [r0]
   11434:	mov	r0, r5
   11438:	bl	11030 <__fprintf_chk@plt>
   1143c:	b	113f8 <__assert_fail@plt+0x32c>
   11440:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11444:	add	fp, sp, #28
   11448:	sub	sp, sp, #28
   1144c:	mov	r5, r0
   11450:	ldr	r0, [r1]
   11454:	mov	r4, r1
   11458:	bl	11d8c <__assert_fail@plt+0xcc0>
   1145c:	movw	r1, #21148	; 0x529c
   11460:	mov	r0, #6
   11464:	movt	r1, #1
   11468:	bl	11054 <setlocale@plt>
   1146c:	movw	r6, #20681	; 0x50c9
   11470:	movw	r1, #20627	; 0x5093
   11474:	movt	r6, #1
   11478:	movt	r1, #1
   1147c:	mov	r0, r6
   11480:	bl	11090 <bindtextdomain@plt>
   11484:	mov	r0, r6
   11488:	bl	10f1c <textdomain@plt>
   1148c:	movw	r0, #6856	; 0x1ac8
   11490:	movt	r0, #1
   11494:	bl	14ef0 <__assert_fail@plt+0x3e24>
   11498:	movw	r0, #24928	; 0x6160
   1149c:	mov	r8, #0
   114a0:	movw	r2, #21184	; 0x52c0
   114a4:	movw	r3, #21220	; 0x52e4
   114a8:	mov	r1, r4
   114ac:	movt	r0, #2
   114b0:	movt	r2, #1
   114b4:	movt	r3, #1
   114b8:	str	r8, [sp]
   114bc:	strb	r8, [r0]
   114c0:	movw	r0, #24929	; 0x6161
   114c4:	movt	r0, #2
   114c8:	strb	r8, [r0]
   114cc:	movw	r0, #24930	; 0x6162
   114d0:	movt	r0, #2
   114d4:	strb	r8, [r0]
   114d8:	mov	r0, r5
   114dc:	bl	10fac <getopt_long@plt>
   114e0:	mov	r7, #80	; 0x50
   114e4:	cmn	r0, #1
   114e8:	beq	115e4 <__assert_fail@plt+0x518>
   114ec:	movw	r9, #24920	; 0x6158
   114f0:	movw	sl, #21184	; 0x52c0
   114f4:	movw	r6, #21220	; 0x52e4
   114f8:	movt	r9, #2
   114fc:	movt	sl, #1
   11500:	movt	r6, #1
   11504:	b	11550 <__assert_fail@plt+0x484>
   11508:	cmp	r0, #114	; 0x72
   1150c:	ble	11528 <__assert_fail@plt+0x45c>
   11510:	cmp	r0, #115	; 0x73
   11514:	beq	1153c <__assert_fail@plt+0x470>
   11518:	cmp	r0, #119	; 0x77
   1151c:	bne	116d4 <__assert_fail@plt+0x608>
   11520:	ldr	r7, [r9]
   11524:	b	11580 <__assert_fail@plt+0x4b4>
   11528:	cmp	r0, #98	; 0x62
   1152c:	bne	11674 <__assert_fail@plt+0x5a8>
   11530:	movw	r0, #24929	; 0x6161
   11534:	movt	r0, #2
   11538:	b	11544 <__assert_fail@plt+0x478>
   1153c:	movw	r0, #24930	; 0x6162
   11540:	movt	r0, #2
   11544:	mov	r1, #1
   11548:	strb	r1, [r0]
   1154c:	b	115c4 <__assert_fail@plt+0x4f8>
   11550:	sub	r1, r0, #48	; 0x30
   11554:	cmp	r1, #10
   11558:	bcs	11508 <__assert_fail@plt+0x43c>
   1155c:	ldr	r1, [r9]
   11560:	cmp	r1, #0
   11564:	beq	11570 <__assert_fail@plt+0x4a4>
   11568:	sub	r7, r1, #1
   1156c:	b	1157c <__assert_fail@plt+0x4b0>
   11570:	add	r7, sp, #26
   11574:	strb	r8, [sp, #27]
   11578:	strb	r0, [sp, #26]
   1157c:	str	r7, [r9]
   11580:	movw	r1, #20651	; 0x50ab
   11584:	mov	r0, #0
   11588:	mov	r2, #5
   1158c:	movt	r1, #1
   11590:	bl	10f04 <dcgettext@plt>
   11594:	mvn	r1, #9
   11598:	mov	r2, #1
   1159c:	mov	r3, #0
   115a0:	stm	sp, {r1, r8}
   115a4:	movw	r1, #21148	; 0x529c
   115a8:	str	r0, [sp, #12]
   115ac:	mov	r0, r7
   115b0:	str	r8, [sp, #16]
   115b4:	movt	r1, #1
   115b8:	str	r1, [sp, #8]
   115bc:	bl	14310 <__assert_fail@plt+0x3244>
   115c0:	mov	r7, r0
   115c4:	mov	r0, r5
   115c8:	mov	r1, r4
   115cc:	mov	r2, sl
   115d0:	mov	r3, r6
   115d4:	str	r8, [sp]
   115d8:	bl	10fac <getopt_long@plt>
   115dc:	cmn	r0, #1
   115e0:	bne	11550 <__assert_fail@plt+0x484>
   115e4:	movw	r0, #24896	; 0x6140
   115e8:	movt	r0, #2
   115ec:	ldr	r0, [r0]
   115f0:	cmp	r0, r5
   115f4:	bne	11610 <__assert_fail@plt+0x544>
   115f8:	movw	r0, #21476	; 0x53e4
   115fc:	mov	r1, r7
   11600:	movt	r0, #1
   11604:	bl	116f4 <__assert_fail@plt+0x628>
   11608:	mov	r6, r0
   1160c:	b	1163c <__assert_fail@plt+0x570>
   11610:	mov	r6, #1
   11614:	bge	1163c <__assert_fail@plt+0x570>
   11618:	sub	r5, r5, r0
   1161c:	add	r4, r4, r0, lsl #2
   11620:	mov	r6, #1
   11624:	ldr	r0, [r4], #4
   11628:	mov	r1, r7
   1162c:	bl	116f4 <__assert_fail@plt+0x628>
   11630:	and	r6, r6, r0
   11634:	subs	r5, r5, #1
   11638:	bne	11624 <__assert_fail@plt+0x558>
   1163c:	movw	r0, #24928	; 0x6160
   11640:	movt	r0, #2
   11644:	ldrb	r0, [r0]
   11648:	cmp	r0, #1
   1164c:	bne	11668 <__assert_fail@plt+0x59c>
   11650:	movw	r0, #24912	; 0x6150
   11654:	movt	r0, #2
   11658:	ldr	r0, [r0]
   1165c:	bl	11bf0 <__assert_fail@plt+0xb24>
   11660:	cmn	r0, #1
   11664:	beq	116dc <__assert_fail@plt+0x610>
   11668:	eor	r0, r6, #1
   1166c:	sub	sp, fp, #28
   11670:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11674:	cmn	r0, #3
   11678:	beq	1168c <__assert_fail@plt+0x5c0>
   1167c:	cmn	r0, #2
   11680:	bne	116d4 <__assert_fail@plt+0x608>
   11684:	mov	r0, #0
   11688:	bl	111c8 <__assert_fail@plt+0xfc>
   1168c:	movw	r0, #24816	; 0x60f0
   11690:	movw	r2, #20691	; 0x50d3
   11694:	mov	r1, #0
   11698:	movt	r0, #2
   1169c:	movt	r2, #1
   116a0:	str	r1, [sp, #4]
   116a4:	movw	r1, #20622	; 0x508e
   116a8:	ldr	r3, [r0]
   116ac:	movw	r0, #24916	; 0x6154
   116b0:	str	r2, [sp]
   116b4:	movw	r2, #20677	; 0x50c5
   116b8:	movt	r1, #1
   116bc:	movt	r0, #2
   116c0:	movt	r2, #1
   116c4:	ldr	r0, [r0]
   116c8:	bl	13c7c <__assert_fail@plt+0x2bb0>
   116cc:	mov	r0, #0
   116d0:	bl	10fc4 <exit@plt>
   116d4:	mov	r0, #1
   116d8:	bl	111c8 <__assert_fail@plt+0xfc>
   116dc:	bl	10fe8 <__errno_location@plt>
   116e0:	ldr	r1, [r0]
   116e4:	movw	r2, #21476	; 0x53e4
   116e8:	mov	r0, #1
   116ec:	movt	r2, #1
   116f0:	bl	10f70 <error@plt>
   116f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116f8:	add	fp, sp, #28
   116fc:	sub	sp, sp, #20
   11700:	str	r1, [sp, #16]
   11704:	movw	r1, #21476	; 0x53e4
   11708:	mov	r6, r0
   1170c:	movt	r1, #1
   11710:	bl	10e80 <strcmp@plt>
   11714:	cmp	r0, #0
   11718:	beq	11734 <__assert_fail@plt+0x668>
   1171c:	movw	r1, #21401	; 0x5399
   11720:	mov	r0, r6
   11724:	movt	r1, #1
   11728:	bl	11084 <fopen64@plt>
   1172c:	mov	r5, r0
   11730:	b	11750 <__assert_fail@plt+0x684>
   11734:	movw	r0, #24928	; 0x6160
   11738:	mov	r1, #1
   1173c:	movt	r0, #2
   11740:	strb	r1, [r0]
   11744:	movw	r0, #24912	; 0x6150
   11748:	movt	r0, #2
   1174c:	ldr	r5, [r0]
   11750:	cmp	r5, #0
   11754:	beq	11974 <__assert_fail@plt+0x8a8>
   11758:	mov	r0, r5
   1175c:	mov	r1, #2
   11760:	bl	11bb4 <__assert_fail@plt+0xae8>
   11764:	mov	r0, r5
   11768:	bl	10ef8 <getc_unlocked@plt>
   1176c:	cmn	r0, #1
   11770:	str	r6, [sp, #4]
   11774:	beq	11980 <__assert_fail@plt+0x8b4>
   11778:	mov	sl, r0
   1177c:	mov	r7, #0
   11780:	mov	r8, #0
   11784:	str	r5, [sp, #8]
   11788:	movw	r0, #24936	; 0x6168
   1178c:	add	r9, r7, #1
   11790:	movt	r0, #2
   11794:	ldr	r0, [r0]
   11798:	cmp	r9, r0
   1179c:	bcc	117c0 <__assert_fail@plt+0x6f4>
   117a0:	movw	r0, #24932	; 0x6164
   117a4:	movw	r1, #24936	; 0x6168
   117a8:	movt	r0, #2
   117ac:	movt	r1, #2
   117b0:	mov	r4, r0
   117b4:	ldr	r0, [r0]
   117b8:	bl	13e88 <__assert_fail@plt+0x2dbc>
   117bc:	str	r0, [r4]
   117c0:	cmp	sl, #10
   117c4:	bne	117fc <__assert_fail@plt+0x730>
   117c8:	movw	r0, #24932	; 0x6164
   117cc:	movw	r1, #24916	; 0x6154
   117d0:	mov	r2, r9
   117d4:	movt	r0, #2
   117d8:	movt	r1, #2
   117dc:	ldr	r0, [r0]
   117e0:	strb	sl, [r0, r7]
   117e4:	ldr	r3, [r1]
   117e8:	mov	r1, #1
   117ec:	bl	10ee0 <fwrite_unlocked@plt>
   117f0:	mov	r8, #0
   117f4:	mov	r7, #0
   117f8:	b	11958 <__assert_fail@plt+0x88c>
   117fc:	uxtb	r1, sl
   11800:	mov	r0, r8
   11804:	str	r1, [sp, #12]
   11808:	bl	11a54 <__assert_fail@plt+0x988>
   1180c:	mov	r8, r0
   11810:	ldr	r0, [sp, #16]
   11814:	cmp	r8, r0
   11818:	bls	11938 <__assert_fail@plt+0x86c>
   1181c:	movw	r0, #24932	; 0x6164
   11820:	movt	r0, #2
   11824:	ldr	r9, [r0]
   11828:	movw	r0, #24930	; 0x6162
   1182c:	movt	r0, #2
   11830:	ldrb	r0, [r0]
   11834:	cmp	r0, #1
   11838:	bne	118e8 <__assert_fail@plt+0x81c>
   1183c:	add	r0, r9, r7
   11840:	mov	r4, #0
   11844:	sub	r6, r0, #1
   11848:	adds	r0, r7, r4
   1184c:	beq	118e8 <__assert_fail@plt+0x81c>
   11850:	mov	r5, r4
   11854:	bl	10fb8 <__ctype_b_loc@plt>
   11858:	ldrb	r1, [r6, r4]
   1185c:	ldr	r0, [r0]
   11860:	sub	r4, r4, #1
   11864:	ldrb	r0, [r0, r1, lsl #1]
   11868:	tst	r0, #1
   1186c:	beq	11848 <__assert_fail@plt+0x77c>
   11870:	add	r0, r7, r4
   11874:	mov	r1, #1
   11878:	add	r2, r0, #1
   1187c:	movw	r0, #24916	; 0x6154
   11880:	movt	r0, #2
   11884:	ldr	r3, [r0]
   11888:	mov	r0, r9
   1188c:	bl	10ee0 <fwrite_unlocked@plt>
   11890:	mov	r0, #10
   11894:	bl	110c0 <putchar_unlocked@plt>
   11898:	movw	r0, #24932	; 0x6164
   1189c:	movt	r0, #2
   118a0:	ldr	r6, [r0]
   118a4:	add	r0, r6, r7
   118a8:	mvn	r7, r4
   118ac:	add	r0, r0, r4
   118b0:	mov	r2, r7
   118b4:	add	r1, r0, #1
   118b8:	mov	r0, r6
   118bc:	bl	10ea4 <memmove@plt>
   118c0:	cmn	r4, #1
   118c4:	beq	11914 <__assert_fail@plt+0x848>
   118c8:	mov	r4, #0
   118cc:	mov	r0, #0
   118d0:	ldrb	r1, [r6, -r4]
   118d4:	bl	11a54 <__assert_fail@plt+0x988>
   118d8:	sub	r4, r4, #1
   118dc:	cmp	r5, r4
   118e0:	bne	118d0 <__assert_fail@plt+0x804>
   118e4:	b	1191c <__assert_fail@plt+0x850>
   118e8:	cmp	r7, #0
   118ec:	beq	11950 <__assert_fail@plt+0x884>
   118f0:	mov	r0, #10
   118f4:	add	r2, r7, #1
   118f8:	mov	r1, #1
   118fc:	strb	r0, [r9, r7]
   11900:	movw	r0, #24916	; 0x6154
   11904:	movt	r0, #2
   11908:	ldr	r3, [r0]
   1190c:	mov	r0, r9
   11910:	bl	10ee0 <fwrite_unlocked@plt>
   11914:	mov	r0, #0
   11918:	mov	r7, #0
   1191c:	ldr	r1, [sp, #12]
   11920:	bl	11a54 <__assert_fail@plt+0x988>
   11924:	mov	r8, r0
   11928:	ldr	r0, [sp, #16]
   1192c:	cmp	r8, r0
   11930:	bhi	1181c <__assert_fail@plt+0x750>
   11934:	add	r9, r7, #1
   11938:	movw	r0, #24932	; 0x6164
   1193c:	movt	r0, #2
   11940:	ldr	r0, [r0]
   11944:	strb	sl, [r0, r7]
   11948:	mov	r7, r9
   1194c:	b	11958 <__assert_fail@plt+0x88c>
   11950:	strb	sl, [r9, r7]
   11954:	mov	r7, #1
   11958:	ldr	r5, [sp, #8]
   1195c:	mov	r0, r5
   11960:	bl	10ef8 <getc_unlocked@plt>
   11964:	mov	sl, r0
   11968:	cmn	r0, #1
   1196c:	bne	11788 <__assert_fail@plt+0x6bc>
   11970:	b	11984 <__assert_fail@plt+0x8b8>
   11974:	bl	10fe8 <__errno_location@plt>
   11978:	ldr	r4, [r0]
   1197c:	b	11a14 <__assert_fail@plt+0x948>
   11980:	mov	r7, #0
   11984:	bl	10fe8 <__errno_location@plt>
   11988:	ldr	r4, [r0]
   1198c:	mov	r8, r0
   11990:	mov	r0, r5
   11994:	bl	10f58 <ferror_unlocked@plt>
   11998:	cmp	r0, #0
   1199c:	moveq	r4, r0
   119a0:	cmp	r7, #0
   119a4:	beq	119cc <__assert_fail@plt+0x900>
   119a8:	movw	r0, #24916	; 0x6154
   119ac:	mov	r1, #1
   119b0:	mov	r2, r7
   119b4:	movt	r0, #2
   119b8:	ldr	r3, [r0]
   119bc:	movw	r0, #24932	; 0x6164
   119c0:	movt	r0, #2
   119c4:	ldr	r0, [r0]
   119c8:	bl	10ee0 <fwrite_unlocked@plt>
   119cc:	ldr	r6, [sp, #4]
   119d0:	movw	r1, #21476	; 0x53e4
   119d4:	movt	r1, #1
   119d8:	mov	r0, r6
   119dc:	bl	10e80 <strcmp@plt>
   119e0:	cmp	r0, #0
   119e4:	beq	11a04 <__assert_fail@plt+0x938>
   119e8:	mov	r0, r5
   119ec:	bl	11bf0 <__assert_fail@plt+0xb24>
   119f0:	cmp	r4, #0
   119f4:	bne	11a0c <__assert_fail@plt+0x940>
   119f8:	cmp	r0, #0
   119fc:	ldrne	r4, [r8]
   11a00:	b	11a0c <__assert_fail@plt+0x940>
   11a04:	mov	r0, r5
   11a08:	bl	11078 <clearerr_unlocked@plt>
   11a0c:	cmp	r4, #0
   11a10:	beq	11a44 <__assert_fail@plt+0x978>
   11a14:	mov	r0, #0
   11a18:	mov	r1, #3
   11a1c:	mov	r2, r6
   11a20:	mov	r5, #0
   11a24:	bl	135fc <__assert_fail@plt+0x2530>
   11a28:	movw	r2, #21407	; 0x539f
   11a2c:	mov	r3, r0
   11a30:	mov	r0, #0
   11a34:	mov	r1, r4
   11a38:	movt	r2, #1
   11a3c:	bl	10f70 <error@plt>
   11a40:	b	11a48 <__assert_fail@plt+0x97c>
   11a44:	mov	r5, #1
   11a48:	mov	r0, r5
   11a4c:	sub	sp, fp, #28
   11a50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a54:	movw	r2, #24929	; 0x6161
   11a58:	movt	r2, #2
   11a5c:	ldrb	r2, [r2]
   11a60:	cmp	r2, #0
   11a64:	bne	11a90 <__assert_fail@plt+0x9c4>
   11a68:	cmp	r1, #13
   11a6c:	moveq	r0, #0
   11a70:	bxeq	lr
   11a74:	cmp	r1, #9
   11a78:	beq	11a98 <__assert_fail@plt+0x9cc>
   11a7c:	cmp	r1, #8
   11a80:	bne	11a90 <__assert_fail@plt+0x9c4>
   11a84:	cmp	r0, #0
   11a88:	subne	r0, r0, #1
   11a8c:	bx	lr
   11a90:	add	r0, r0, #1
   11a94:	bx	lr
   11a98:	and	r1, r0, #7
   11a9c:	add	r0, r0, #8
   11aa0:	sub	r0, r0, r1
   11aa4:	bx	lr
   11aa8:	movw	r1, #24940	; 0x616c
   11aac:	movt	r1, #2
   11ab0:	str	r0, [r1]
   11ab4:	bx	lr
   11ab8:	movw	r1, #24944	; 0x6170
   11abc:	movt	r1, #2
   11ac0:	strb	r0, [r1]
   11ac4:	bx	lr
   11ac8:	push	{r4, r5, r6, sl, fp, lr}
   11acc:	add	fp, sp, #16
   11ad0:	sub	sp, sp, #8
   11ad4:	movw	r0, #24916	; 0x6154
   11ad8:	movt	r0, #2
   11adc:	ldr	r0, [r0]
   11ae0:	bl	14aa4 <__assert_fail@plt+0x39d8>
   11ae4:	cmp	r0, #0
   11ae8:	beq	11b10 <__assert_fail@plt+0xa44>
   11aec:	movw	r0, #24944	; 0x6170
   11af0:	movt	r0, #2
   11af4:	ldrb	r0, [r0]
   11af8:	cmp	r0, #0
   11afc:	beq	11b30 <__assert_fail@plt+0xa64>
   11b00:	bl	10fe8 <__errno_location@plt>
   11b04:	ldr	r0, [r0]
   11b08:	cmp	r0, #32
   11b0c:	bne	11b30 <__assert_fail@plt+0xa64>
   11b10:	movw	r0, #24904	; 0x6148
   11b14:	movt	r0, #2
   11b18:	ldr	r0, [r0]
   11b1c:	bl	14aa4 <__assert_fail@plt+0x39d8>
   11b20:	cmp	r0, #0
   11b24:	subeq	sp, fp, #16
   11b28:	popeq	{r4, r5, r6, sl, fp, pc}
   11b2c:	b	11ba0 <__assert_fail@plt+0xad4>
   11b30:	movw	r1, #21391	; 0x538f
   11b34:	mov	r0, #0
   11b38:	mov	r2, #5
   11b3c:	movt	r1, #1
   11b40:	bl	10f04 <dcgettext@plt>
   11b44:	mov	r4, r0
   11b48:	movw	r0, #24940	; 0x616c
   11b4c:	movt	r0, #2
   11b50:	ldr	r6, [r0]
   11b54:	bl	10fe8 <__errno_location@plt>
   11b58:	ldr	r5, [r0]
   11b5c:	cmp	r6, #0
   11b60:	bne	11b7c <__assert_fail@plt+0xab0>
   11b64:	movw	r2, #21407	; 0x539f
   11b68:	mov	r0, #0
   11b6c:	mov	r1, r5
   11b70:	mov	r3, r4
   11b74:	movt	r2, #1
   11b78:	b	11b9c <__assert_fail@plt+0xad0>
   11b7c:	mov	r0, r6
   11b80:	bl	13550 <__assert_fail@plt+0x2484>
   11b84:	movw	r2, #21403	; 0x539b
   11b88:	mov	r3, r0
   11b8c:	str	r4, [sp]
   11b90:	mov	r0, #0
   11b94:	mov	r1, r5
   11b98:	movt	r2, #1
   11b9c:	bl	10f70 <error@plt>
   11ba0:	movw	r0, #24820	; 0x60f4
   11ba4:	movt	r0, #2
   11ba8:	ldr	r0, [r0]
   11bac:	bl	10ebc <_exit@plt>
   11bb0:	b	10e8c <posix_fadvise64@plt>
   11bb4:	cmp	r0, #0
   11bb8:	bxeq	lr
   11bbc:	push	{r4, sl, fp, lr}
   11bc0:	add	fp, sp, #8
   11bc4:	sub	sp, sp, #16
   11bc8:	mov	r4, r1
   11bcc:	bl	11018 <fileno@plt>
   11bd0:	mov	r1, #0
   11bd4:	mov	r2, #0
   11bd8:	mov	r3, #0
   11bdc:	str	r1, [sp]
   11be0:	stmib	sp, {r1, r4}
   11be4:	bl	10e8c <posix_fadvise64@plt>
   11be8:	sub	sp, fp, #8
   11bec:	pop	{r4, sl, fp, pc}
   11bf0:	push	{r4, r5, r6, sl, fp, lr}
   11bf4:	add	fp, sp, #16
   11bf8:	sub	sp, sp, #8
   11bfc:	mov	r4, r0
   11c00:	bl	11018 <fileno@plt>
   11c04:	cmn	r0, #1
   11c08:	ble	11c7c <__assert_fail@plt+0xbb0>
   11c0c:	mov	r0, r4
   11c10:	bl	10f94 <__freading@plt>
   11c14:	cmp	r0, #0
   11c18:	beq	11c44 <__assert_fail@plt+0xb78>
   11c1c:	mov	r0, r4
   11c20:	bl	11018 <fileno@plt>
   11c24:	mov	r1, #1
   11c28:	mov	r2, #0
   11c2c:	mov	r3, #0
   11c30:	str	r1, [sp]
   11c34:	bl	10f34 <lseek64@plt>
   11c38:	and	r0, r0, r1
   11c3c:	cmn	r0, #1
   11c40:	beq	11c7c <__assert_fail@plt+0xbb0>
   11c44:	mov	r0, r4
   11c48:	bl	11c8c <__assert_fail@plt+0xbc0>
   11c4c:	cmp	r0, #0
   11c50:	beq	11c7c <__assert_fail@plt+0xbb0>
   11c54:	bl	10fe8 <__errno_location@plt>
   11c58:	ldr	r6, [r0]
   11c5c:	mov	r5, r0
   11c60:	mov	r0, r4
   11c64:	bl	1103c <fclose@plt>
   11c68:	cmp	r6, #0
   11c6c:	strne	r6, [r5]
   11c70:	mvnne	r0, #0
   11c74:	sub	sp, fp, #16
   11c78:	pop	{r4, r5, r6, sl, fp, pc}
   11c7c:	mov	r0, r4
   11c80:	sub	sp, fp, #16
   11c84:	pop	{r4, r5, r6, sl, fp, lr}
   11c88:	b	1103c <fclose@plt>
   11c8c:	push	{r4, sl, fp, lr}
   11c90:	add	fp, sp, #8
   11c94:	sub	sp, sp, #8
   11c98:	mov	r4, r0
   11c9c:	cmp	r0, #0
   11ca0:	beq	11cbc <__assert_fail@plt+0xbf0>
   11ca4:	mov	r0, r4
   11ca8:	bl	10f94 <__freading@plt>
   11cac:	cmp	r0, #0
   11cb0:	ldrbne	r0, [r4, #1]
   11cb4:	tstne	r0, #1
   11cb8:	bne	11ccc <__assert_fail@plt+0xc00>
   11cbc:	mov	r0, r4
   11cc0:	sub	sp, fp, #8
   11cc4:	pop	{r4, sl, fp, lr}
   11cc8:	b	10e98 <fflush@plt>
   11ccc:	mov	r0, #1
   11cd0:	mov	r2, #0
   11cd4:	mov	r3, #0
   11cd8:	str	r0, [sp]
   11cdc:	mov	r0, r4
   11ce0:	bl	11ce8 <__assert_fail@plt+0xc1c>
   11ce4:	b	11cbc <__assert_fail@plt+0xbf0>
   11ce8:	push	{r4, r5, r6, r7, fp, lr}
   11cec:	add	fp, sp, #16
   11cf0:	sub	sp, sp, #8
   11cf4:	mov	r4, r0
   11cf8:	ldr	r0, [r0, #4]
   11cfc:	mov	r5, r3
   11d00:	mov	r6, r2
   11d04:	ldr	r1, [r4, #8]
   11d08:	cmp	r1, r0
   11d0c:	bne	11d28 <__assert_fail@plt+0xc5c>
   11d10:	ldrd	r0, [r4, #16]
   11d14:	cmp	r1, r0
   11d18:	bne	11d28 <__assert_fail@plt+0xc5c>
   11d1c:	ldr	r0, [r4, #36]	; 0x24
   11d20:	cmp	r0, #0
   11d24:	beq	11d40 <__assert_fail@plt+0xc74>
   11d28:	mov	r0, r4
   11d2c:	mov	r2, r6
   11d30:	mov	r3, r5
   11d34:	sub	sp, fp, #16
   11d38:	pop	{r4, r5, r6, r7, fp, lr}
   11d3c:	b	11048 <fseeko64@plt>
   11d40:	ldr	r7, [fp, #8]
   11d44:	mov	r0, r4
   11d48:	bl	11018 <fileno@plt>
   11d4c:	mov	r2, r6
   11d50:	mov	r3, r5
   11d54:	str	r7, [sp]
   11d58:	bl	10f34 <lseek64@plt>
   11d5c:	and	r2, r0, r1
   11d60:	cmn	r2, #1
   11d64:	beq	11d80 <__assert_fail@plt+0xcb4>
   11d68:	strd	r0, [r4, #80]	; 0x50
   11d6c:	ldr	r0, [r4]
   11d70:	bic	r0, r0, #16
   11d74:	str	r0, [r4]
   11d78:	mov	r0, #0
   11d7c:	b	11d84 <__assert_fail@plt+0xcb8>
   11d80:	mvn	r0, #0
   11d84:	sub	sp, fp, #16
   11d88:	pop	{r4, r5, r6, r7, fp, pc}
   11d8c:	push	{r4, r5, fp, lr}
   11d90:	add	fp, sp, #8
   11d94:	cmp	r0, #0
   11d98:	beq	11e2c <__assert_fail@plt+0xd60>
   11d9c:	mov	r1, #47	; 0x2f
   11da0:	mov	r4, r0
   11da4:	bl	11060 <strrchr@plt>
   11da8:	cmp	r0, #0
   11dac:	mov	r5, r4
   11db0:	addne	r5, r0, #1
   11db4:	sub	r0, r5, r4
   11db8:	cmp	r0, #7
   11dbc:	blt	11e10 <__assert_fail@plt+0xd44>
   11dc0:	movw	r1, #21466	; 0x53da
   11dc4:	sub	r0, r5, #7
   11dc8:	mov	r2, #7
   11dcc:	movt	r1, #1
   11dd0:	bl	110a8 <strncmp@plt>
   11dd4:	cmp	r0, #0
   11dd8:	bne	11e10 <__assert_fail@plt+0xd44>
   11ddc:	movw	r1, #21474	; 0x53e2
   11de0:	mov	r0, r5
   11de4:	mov	r2, #3
   11de8:	movt	r1, #1
   11dec:	bl	110a8 <strncmp@plt>
   11df0:	cmp	r0, #0
   11df4:	beq	11e00 <__assert_fail@plt+0xd34>
   11df8:	mov	r4, r5
   11dfc:	b	11e10 <__assert_fail@plt+0xd44>
   11e00:	movw	r0, #24888	; 0x6138
   11e04:	add	r4, r5, #3
   11e08:	movt	r0, #2
   11e0c:	str	r4, [r0]
   11e10:	movw	r0, #24892	; 0x613c
   11e14:	movt	r0, #2
   11e18:	str	r4, [r0]
   11e1c:	movw	r0, #24948	; 0x6174
   11e20:	movt	r0, #2
   11e24:	str	r4, [r0]
   11e28:	pop	{r4, r5, fp, pc}
   11e2c:	movw	r0, #24904	; 0x6148
   11e30:	movt	r0, #2
   11e34:	ldr	r1, [r0]
   11e38:	movw	r0, #21410	; 0x53a2
   11e3c:	movt	r0, #1
   11e40:	bl	1109c <fputs@plt>
   11e44:	bl	110b4 <abort@plt>
   11e48:	push	{r4, r5, r6, sl, fp, lr}
   11e4c:	add	fp, sp, #16
   11e50:	mov	r4, r0
   11e54:	movw	r0, #24952	; 0x6178
   11e58:	movt	r0, #2
   11e5c:	cmp	r4, #0
   11e60:	moveq	r4, r0
   11e64:	bl	10fe8 <__errno_location@plt>
   11e68:	ldr	r6, [r0]
   11e6c:	mov	r5, r0
   11e70:	mov	r0, r4
   11e74:	mov	r1, #48	; 0x30
   11e78:	bl	140d4 <__assert_fail@plt+0x3008>
   11e7c:	str	r6, [r5]
   11e80:	pop	{r4, r5, r6, sl, fp, pc}
   11e84:	movw	r1, #24952	; 0x6178
   11e88:	cmp	r0, #0
   11e8c:	movt	r1, #2
   11e90:	movne	r1, r0
   11e94:	ldr	r0, [r1]
   11e98:	bx	lr
   11e9c:	movw	r2, #24952	; 0x6178
   11ea0:	cmp	r0, #0
   11ea4:	movt	r2, #2
   11ea8:	movne	r2, r0
   11eac:	str	r1, [r2]
   11eb0:	bx	lr
   11eb4:	movw	r3, #24952	; 0x6178
   11eb8:	cmp	r0, #0
   11ebc:	movt	r3, #2
   11ec0:	movne	r3, r0
   11ec4:	ubfx	r0, r1, #5, #3
   11ec8:	and	r1, r1, #31
   11ecc:	add	r0, r3, r0, lsl #2
   11ed0:	ldr	r3, [r0, #8]
   11ed4:	eor	r2, r2, r3, lsr r1
   11ed8:	and	r2, r2, #1
   11edc:	eor	r2, r3, r2, lsl r1
   11ee0:	str	r2, [r0, #8]
   11ee4:	mov	r0, #1
   11ee8:	and	r0, r0, r3, lsr r1
   11eec:	bx	lr
   11ef0:	movw	r2, #24952	; 0x6178
   11ef4:	cmp	r0, #0
   11ef8:	movt	r2, #2
   11efc:	movne	r2, r0
   11f00:	ldr	r0, [r2, #4]
   11f04:	str	r1, [r2, #4]
   11f08:	bx	lr
   11f0c:	movw	r3, #24952	; 0x6178
   11f10:	cmp	r0, #0
   11f14:	movt	r3, #2
   11f18:	movne	r3, r0
   11f1c:	cmp	r1, #0
   11f20:	mov	r0, #10
   11f24:	cmpne	r2, #0
   11f28:	str	r0, [r3]
   11f2c:	bne	11f3c <__assert_fail@plt+0xe70>
   11f30:	push	{fp, lr}
   11f34:	mov	fp, sp
   11f38:	bl	110b4 <abort@plt>
   11f3c:	str	r1, [r3, #40]	; 0x28
   11f40:	str	r2, [r3, #44]	; 0x2c
   11f44:	bx	lr
   11f48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f4c:	add	fp, sp, #28
   11f50:	sub	sp, sp, #20
   11f54:	mov	r7, r0
   11f58:	ldr	r0, [fp, #8]
   11f5c:	movw	r5, #24952	; 0x6178
   11f60:	mov	r8, r3
   11f64:	mov	r9, r2
   11f68:	mov	sl, r1
   11f6c:	movt	r5, #2
   11f70:	cmp	r0, #0
   11f74:	movne	r5, r0
   11f78:	bl	10fe8 <__errno_location@plt>
   11f7c:	mov	r4, r0
   11f80:	ldm	r5, {r0, r1}
   11f84:	ldr	r2, [r5, #40]	; 0x28
   11f88:	ldr	r3, [r5, #44]	; 0x2c
   11f8c:	add	r5, r5, #8
   11f90:	ldr	r6, [r4]
   11f94:	stm	sp, {r0, r1, r5}
   11f98:	str	r2, [sp, #12]
   11f9c:	str	r3, [sp, #16]
   11fa0:	mov	r0, r7
   11fa4:	mov	r1, sl
   11fa8:	mov	r2, r9
   11fac:	mov	r3, r8
   11fb0:	bl	11fc0 <__assert_fail@plt+0xef4>
   11fb4:	str	r6, [r4]
   11fb8:	sub	sp, fp, #28
   11fbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fc4:	add	fp, sp, #28
   11fc8:	sub	sp, sp, #156	; 0x9c
   11fcc:	str	r0, [fp, #-56]	; 0xffffffc8
   11fd0:	ldr	r0, [fp, #12]
   11fd4:	mov	r4, r1
   11fd8:	str	r3, [sp, #80]	; 0x50
   11fdc:	str	r2, [fp, #-84]	; 0xffffffac
   11fe0:	and	r1, r0, #4
   11fe4:	str	r1, [sp, #24]
   11fe8:	and	r1, r0, #1
   11fec:	str	r1, [sp, #28]
   11ff0:	ubfx	r7, r0, #1, #1
   11ff4:	bl	10f40 <__ctype_get_mb_cur_max@plt>
   11ff8:	str	r0, [sp, #32]
   11ffc:	ldr	r0, [fp, #24]
   12000:	ldr	r9, [fp, #8]
   12004:	mov	r2, #0
   12008:	mov	r1, #0
   1200c:	mov	r5, #0
   12010:	str	r2, [sp, #52]	; 0x34
   12014:	mov	r2, #1
   12018:	str	r0, [sp, #72]	; 0x48
   1201c:	ldr	r0, [fp, #20]
   12020:	str	r0, [sp, #64]	; 0x40
   12024:	mov	r0, #0
   12028:	str	r0, [sp, #92]	; 0x5c
   1202c:	mov	r0, #0
   12030:	str	r0, [fp, #-76]	; 0xffffffb4
   12034:	mov	r0, #0
   12038:	cmp	r9, #10
   1203c:	str	r1, [sp, #68]	; 0x44
   12040:	bhi	13040 <__assert_fail@plt+0x1f74>
   12044:	add	r1, pc, #28
   12048:	ldr	ip, [fp, #-84]	; 0xffffffac
   1204c:	ldr	lr, [sp, #80]	; 0x50
   12050:	mov	r6, r4
   12054:	mov	r8, #0
   12058:	mov	r3, #1
   1205c:	mov	sl, #0
   12060:	mov	r4, r2
   12064:	ldr	pc, [r1, r9, lsl #2]
   12068:	andeq	r2, r1, r8, lsr r1
   1206c:	andeq	r2, r1, r4, ror r1
   12070:	andeq	r2, r1, r8, asr #2
   12074:	andeq	r2, r1, r0, lsr r1
   12078:	andeq	r2, r1, r8, ror #2
   1207c:	andeq	r2, r1, r0, asr #3
   12080:	andeq	r2, r1, r8, asr r1
   12084:	andeq	r2, r1, r0, lsr #4
   12088:	muleq	r1, r4, r0
   1208c:	muleq	r1, r4, r0
   12090:	strheq	r2, [r1], -ip
   12094:	movw	r0, #21556	; 0x5434
   12098:	mov	r1, r9
   1209c:	movt	r0, #1
   120a0:	bl	137a8 <__assert_fail@plt+0x26dc>
   120a4:	str	r0, [sp, #64]	; 0x40
   120a8:	movw	r0, #21558	; 0x5436
   120ac:	mov	r1, r9
   120b0:	movt	r0, #1
   120b4:	bl	137a8 <__assert_fail@plt+0x26dc>
   120b8:	str	r0, [sp, #72]	; 0x48
   120bc:	mov	r8, #0
   120c0:	mov	sl, r7
   120c4:	tst	r7, #1
   120c8:	str	r5, [fp, #-48]	; 0xffffffd0
   120cc:	bne	12108 <__assert_fail@plt+0x103c>
   120d0:	ldr	r0, [sp, #64]	; 0x40
   120d4:	ldrb	r0, [r0]
   120d8:	cmp	r0, #0
   120dc:	beq	12108 <__assert_fail@plt+0x103c>
   120e0:	ldr	r1, [sp, #64]	; 0x40
   120e4:	mov	r8, #0
   120e8:	add	r1, r1, #1
   120ec:	cmp	r8, r6
   120f0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   120f4:	strbcc	r0, [r2, r8]
   120f8:	ldrb	r0, [r1, r8]
   120fc:	add	r8, r8, #1
   12100:	cmp	r0, #0
   12104:	bne	120ec <__assert_fail@plt+0x1020>
   12108:	ldr	r7, [sp, #72]	; 0x48
   1210c:	mov	r0, r7
   12110:	bl	10fd0 <strlen@plt>
   12114:	ldr	ip, [fp, #-84]	; 0xffffffac
   12118:	ldr	lr, [sp, #80]	; 0x50
   1211c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12120:	str	r0, [fp, #-76]	; 0xffffffb4
   12124:	str	r7, [sp, #92]	; 0x5c
   12128:	mov	r3, #1
   1212c:	b	12220 <__assert_fail@plt+0x1154>
   12130:	mov	r0, #1
   12134:	b	12174 <__assert_fail@plt+0x10a8>
   12138:	mov	r9, #0
   1213c:	mov	r8, #0
   12140:	mov	r3, r0
   12144:	b	1221c <__assert_fail@plt+0x1150>
   12148:	tst	r7, #1
   1214c:	bne	12174 <__assert_fail@plt+0x10a8>
   12150:	mov	r3, r0
   12154:	b	1219c <__assert_fail@plt+0x10d0>
   12158:	mov	r0, #1
   1215c:	mov	r8, #0
   12160:	mov	r9, #5
   12164:	b	121d4 <__assert_fail@plt+0x1108>
   12168:	mov	r3, #1
   1216c:	tst	r7, #1
   12170:	beq	1219c <__assert_fail@plt+0x10d0>
   12174:	mov	r1, #1
   12178:	mov	r8, #0
   1217c:	mov	r9, #2
   12180:	mov	r3, r0
   12184:	mov	sl, #1
   12188:	str	r1, [fp, #-76]	; 0xffffffb4
   1218c:	movw	r1, #21558	; 0x5436
   12190:	movt	r1, #1
   12194:	str	r1, [sp, #92]	; 0x5c
   12198:	b	12220 <__assert_fail@plt+0x1154>
   1219c:	cmp	r6, #0
   121a0:	mov	r8, #1
   121a4:	mov	r9, #2
   121a8:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   121ac:	movne	r0, #39	; 0x27
   121b0:	strbne	r0, [r1]
   121b4:	movw	r0, #21558	; 0x5436
   121b8:	movt	r0, #1
   121bc:	b	12210 <__assert_fail@plt+0x1144>
   121c0:	mov	r9, #5
   121c4:	tst	r7, #1
   121c8:	beq	121f0 <__assert_fail@plt+0x1124>
   121cc:	mov	r0, #1
   121d0:	mov	r8, #0
   121d4:	str	r0, [fp, #-76]	; 0xffffffb4
   121d8:	movw	r0, #21554	; 0x5432
   121dc:	mov	r3, #1
   121e0:	mov	sl, #1
   121e4:	movt	r0, #1
   121e8:	str	r0, [sp, #92]	; 0x5c
   121ec:	b	12220 <__assert_fail@plt+0x1154>
   121f0:	cmp	r6, #0
   121f4:	mov	r8, #1
   121f8:	mov	r3, #1
   121fc:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   12200:	movne	r0, #34	; 0x22
   12204:	strbne	r0, [r1]
   12208:	movw	r0, #21554	; 0x5432
   1220c:	movt	r0, #1
   12210:	str	r0, [sp, #92]	; 0x5c
   12214:	mov	r0, #1
   12218:	str	r0, [fp, #-76]	; 0xffffffb4
   1221c:	mov	sl, #0
   12220:	ldr	r0, [fp, #16]
   12224:	mov	r7, #0
   12228:	str	r9, [fp, #-64]	; 0xffffffc0
   1222c:	str	sl, [fp, #-72]	; 0xffffffb8
   12230:	str	r3, [sp, #84]	; 0x54
   12234:	cmp	r0, #0
   12238:	movwne	r0, #1
   1223c:	and	r0, r0, sl
   12240:	str	r0, [fp, #-88]	; 0xffffffa8
   12244:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12248:	cmp	r0, #0
   1224c:	movwne	r0, #1
   12250:	subs	r2, r9, #2
   12254:	and	r1, r0, sl
   12258:	str	r2, [fp, #-80]	; 0xffffffb0
   1225c:	and	r1, r3, r1
   12260:	str	r1, [sp, #44]	; 0x2c
   12264:	clz	r1, r2
   12268:	lsr	r1, r1, #5
   1226c:	and	r1, r1, sl
   12270:	str	r1, [sp, #56]	; 0x38
   12274:	mov	r1, r2
   12278:	eor	r2, sl, #1
   1227c:	movwne	r1, #1
   12280:	str	r2, [sp, #88]	; 0x58
   12284:	orr	r2, r1, r2
   12288:	and	r1, r1, r3
   1228c:	and	r0, r0, r1
   12290:	str	r2, [sp, #60]	; 0x3c
   12294:	str	r1, [fp, #-68]	; 0xffffffbc
   12298:	str	r0, [fp, #-60]	; 0xffffffc4
   1229c:	eor	r0, r3, #1
   122a0:	str	r0, [sp, #48]	; 0x30
   122a4:	cmn	lr, #1
   122a8:	beq	122b8 <__assert_fail@plt+0x11ec>
   122ac:	cmp	r7, lr
   122b0:	bne	122c4 <__assert_fail@plt+0x11f8>
   122b4:	b	12e70 <__assert_fail@plt+0x1da4>
   122b8:	ldrb	r0, [ip, r7]
   122bc:	cmp	r0, #0
   122c0:	beq	12e78 <__assert_fail@plt+0x1dac>
   122c4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   122c8:	mov	r9, #0
   122cc:	str	r5, [fp, #-48]	; 0xffffffd0
   122d0:	str	r6, [fp, #-52]	; 0xffffffcc
   122d4:	cmp	r0, #0
   122d8:	beq	12318 <__assert_fail@plt+0x124c>
   122dc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   122e0:	mov	r5, r4
   122e4:	add	r4, r7, r0
   122e8:	cmp	r0, #2
   122ec:	bcc	12308 <__assert_fail@plt+0x123c>
   122f0:	cmn	lr, #1
   122f4:	bne	12308 <__assert_fail@plt+0x123c>
   122f8:	mov	r0, ip
   122fc:	bl	10fd0 <strlen@plt>
   12300:	ldr	ip, [fp, #-84]	; 0xffffffac
   12304:	mov	lr, r0
   12308:	cmp	r4, lr
   1230c:	bls	12320 <__assert_fail@plt+0x1254>
   12310:	mov	r6, #0
   12314:	b	12360 <__assert_fail@plt+0x1294>
   12318:	mov	r6, #0
   1231c:	b	12364 <__assert_fail@plt+0x1298>
   12320:	ldr	r1, [sp, #92]	; 0x5c
   12324:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12328:	add	r0, ip, r7
   1232c:	mov	r4, lr
   12330:	bl	10eec <memcmp@plt>
   12334:	ldr	r2, [sp, #88]	; 0x58
   12338:	cmp	r0, #0
   1233c:	mov	r1, r0
   12340:	movwne	r1, #1
   12344:	orr	r1, r1, r2
   12348:	tst	r1, #1
   1234c:	beq	12f0c <__assert_fail@plt+0x1e40>
   12350:	ldr	ip, [fp, #-84]	; 0xffffffac
   12354:	clz	r0, r0
   12358:	mov	lr, r4
   1235c:	lsr	r6, r0, #5
   12360:	mov	r4, r5
   12364:	ldrb	r5, [ip, r7]
   12368:	cmp	r5, #126	; 0x7e
   1236c:	bhi	12734 <__assert_fail@plt+0x1668>
   12370:	add	r3, pc, #16
   12374:	mov	sl, #1
   12378:	mov	r2, #110	; 0x6e
   1237c:	mov	r0, #97	; 0x61
   12380:	mov	r1, #0
   12384:	ldr	pc, [r3, r5, lsl #2]
   12388:	andeq	r2, r1, r8, lsl r6
   1238c:	andeq	r2, r1, r4, lsr r7
   12390:	andeq	r2, r1, r4, lsr r7
   12394:	andeq	r2, r1, r4, lsr r7
   12398:	andeq	r2, r1, r4, lsr r7
   1239c:	andeq	r2, r1, r4, lsr r7
   123a0:	andeq	r2, r1, r4, lsr r7
   123a4:	ldrdeq	r2, [r1], -r8
   123a8:	strdeq	r2, [r1], -r8
   123ac:	strdeq	r2, [r1], -r0
   123b0:	andeq	r2, r1, r4, lsl #12
   123b4:	andeq	r2, r1, r8, lsl #13
   123b8:	andeq	r2, r1, r8, ror #11
   123bc:	andeq	r2, r1, r0, lsl #12
   123c0:	andeq	r2, r1, r4, lsr r7
   123c4:	andeq	r2, r1, r4, lsr r7
   123c8:	andeq	r2, r1, r4, lsr r7
   123cc:	andeq	r2, r1, r4, lsr r7
   123d0:	andeq	r2, r1, r4, lsr r7
   123d4:	andeq	r2, r1, r4, lsr r7
   123d8:	andeq	r2, r1, r4, lsr r7
   123dc:	andeq	r2, r1, r4, lsr r7
   123e0:	andeq	r2, r1, r4, lsr r7
   123e4:	andeq	r2, r1, r4, lsr r7
   123e8:	andeq	r2, r1, r4, lsr r7
   123ec:	andeq	r2, r1, r4, lsr r7
   123f0:	andeq	r2, r1, r4, lsr r7
   123f4:	andeq	r2, r1, r4, lsr r7
   123f8:	andeq	r2, r1, r4, lsr r7
   123fc:	andeq	r2, r1, r4, lsr r7
   12400:	andeq	r2, r1, r4, lsr r7
   12404:	andeq	r2, r1, r4, lsr r7
   12408:	muleq	r1, r8, r7
   1240c:	muleq	r1, ip, r7
   12410:	muleq	r1, ip, r7
   12414:	muleq	r1, r8, r5
   12418:	muleq	r1, ip, r7
   1241c:	andeq	r2, r1, r4, lsl #11
   12420:	muleq	r1, ip, r7
   12424:	muleq	r1, r0, r6
   12428:	muleq	r1, ip, r7
   1242c:	muleq	r1, ip, r7
   12430:	muleq	r1, ip, r7
   12434:	andeq	r2, r1, r4, lsl #11
   12438:	andeq	r2, r1, r4, lsl #11
   1243c:	andeq	r2, r1, r4, lsl #11
   12440:	andeq	r2, r1, r4, lsl #11
   12444:	andeq	r2, r1, r4, lsl #11
   12448:	andeq	r2, r1, r4, lsl #11
   1244c:	andeq	r2, r1, r4, lsl #11
   12450:	andeq	r2, r1, r4, lsl #11
   12454:	andeq	r2, r1, r4, lsl #11
   12458:	andeq	r2, r1, r4, lsl #11
   1245c:	andeq	r2, r1, r4, lsl #11
   12460:	andeq	r2, r1, r4, lsl #11
   12464:	andeq	r2, r1, r4, lsl #11
   12468:	andeq	r2, r1, r4, lsl #11
   1246c:	andeq	r2, r1, r4, lsl #11
   12470:	andeq	r2, r1, r4, lsl #11
   12474:	muleq	r1, ip, r7
   12478:	muleq	r1, ip, r7
   1247c:	muleq	r1, ip, r7
   12480:	muleq	r1, ip, r7
   12484:	andeq	r2, r1, ip, asr r6
   12488:	andeq	r2, r1, r4, lsr r7
   1248c:	andeq	r2, r1, r4, lsl #11
   12490:	andeq	r2, r1, r4, lsl #11
   12494:	andeq	r2, r1, r4, lsl #11
   12498:	andeq	r2, r1, r4, lsl #11
   1249c:	andeq	r2, r1, r4, lsl #11
   124a0:	andeq	r2, r1, r4, lsl #11
   124a4:	andeq	r2, r1, r4, lsl #11
   124a8:	andeq	r2, r1, r4, lsl #11
   124ac:	andeq	r2, r1, r4, lsl #11
   124b0:	andeq	r2, r1, r4, lsl #11
   124b4:	andeq	r2, r1, r4, lsl #11
   124b8:	andeq	r2, r1, r4, lsl #11
   124bc:	andeq	r2, r1, r4, lsl #11
   124c0:	andeq	r2, r1, r4, lsl #11
   124c4:	andeq	r2, r1, r4, lsl #11
   124c8:	andeq	r2, r1, r4, lsl #11
   124cc:	andeq	r2, r1, r4, lsl #11
   124d0:	andeq	r2, r1, r4, lsl #11
   124d4:	andeq	r2, r1, r4, lsl #11
   124d8:	andeq	r2, r1, r4, lsl #11
   124dc:	andeq	r2, r1, r4, lsl #11
   124e0:	andeq	r2, r1, r4, lsl #11
   124e4:	andeq	r2, r1, r4, lsl #11
   124e8:	andeq	r2, r1, r4, lsl #11
   124ec:	andeq	r2, r1, r4, lsl #11
   124f0:	andeq	r2, r1, r4, lsl #11
   124f4:	muleq	r1, ip, r7
   124f8:	andeq	r2, r1, r4, asr #11
   124fc:	andeq	r2, r1, r4, lsl #11
   12500:	muleq	r1, ip, r7
   12504:	andeq	r2, r1, r4, lsl #11
   12508:	muleq	r1, ip, r7
   1250c:	andeq	r2, r1, r4, lsl #11
   12510:	andeq	r2, r1, r4, lsl #11
   12514:	andeq	r2, r1, r4, lsl #11
   12518:	andeq	r2, r1, r4, lsl #11
   1251c:	andeq	r2, r1, r4, lsl #11
   12520:	andeq	r2, r1, r4, lsl #11
   12524:	andeq	r2, r1, r4, lsl #11
   12528:	andeq	r2, r1, r4, lsl #11
   1252c:	andeq	r2, r1, r4, lsl #11
   12530:	andeq	r2, r1, r4, lsl #11
   12534:	andeq	r2, r1, r4, lsl #11
   12538:	andeq	r2, r1, r4, lsl #11
   1253c:	andeq	r2, r1, r4, lsl #11
   12540:	andeq	r2, r1, r4, lsl #11
   12544:	andeq	r2, r1, r4, lsl #11
   12548:	andeq	r2, r1, r4, lsl #11
   1254c:	andeq	r2, r1, r4, lsl #11
   12550:	andeq	r2, r1, r4, lsl #11
   12554:	andeq	r2, r1, r4, lsl #11
   12558:	andeq	r2, r1, r4, lsl #11
   1255c:	andeq	r2, r1, r4, lsl #11
   12560:	andeq	r2, r1, r4, lsl #11
   12564:	andeq	r2, r1, r4, lsl #11
   12568:	andeq	r2, r1, r4, lsl #11
   1256c:	andeq	r2, r1, r4, lsl #11
   12570:	andeq	r2, r1, r4, lsl #11
   12574:	andeq	r2, r1, r8, lsr #11
   12578:	muleq	r1, ip, r7
   1257c:	andeq	r2, r1, r8, lsr #11
   12580:	muleq	r1, r8, r5
   12584:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12588:	cmp	r0, #0
   1258c:	beq	127ec <__assert_fail@plt+0x1720>
   12590:	ldr	r0, [fp, #16]
   12594:	b	127f0 <__assert_fail@plt+0x1724>
   12598:	mov	sl, #0
   1259c:	cmp	r7, #0
   125a0:	bne	12a08 <__assert_fail@plt+0x193c>
   125a4:	b	12798 <__assert_fail@plt+0x16cc>
   125a8:	mov	sl, #0
   125ac:	cmn	lr, #1
   125b0:	beq	12784 <__assert_fail@plt+0x16b8>
   125b4:	cmp	r7, #0
   125b8:	cmpeq	lr, #1
   125bc:	bne	12a08 <__assert_fail@plt+0x193c>
   125c0:	b	12798 <__assert_fail@plt+0x16cc>
   125c4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   125c8:	cmp	r0, #2
   125cc:	bne	127bc <__assert_fail@plt+0x16f0>
   125d0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   125d4:	tst	r0, #1
   125d8:	bne	12f28 <__assert_fail@plt+0x1e5c>
   125dc:	mov	r9, #0
   125e0:	mov	r0, #92	; 0x5c
   125e4:	b	127d0 <__assert_fail@plt+0x1704>
   125e8:	mov	r0, #102	; 0x66
   125ec:	b	127d8 <__assert_fail@plt+0x170c>
   125f0:	mov	r2, #116	; 0x74
   125f4:	b	12604 <__assert_fail@plt+0x1538>
   125f8:	mov	r0, #98	; 0x62
   125fc:	b	127d8 <__assert_fail@plt+0x170c>
   12600:	mov	r2, #114	; 0x72
   12604:	ldr	r0, [sp, #60]	; 0x3c
   12608:	tst	r0, #1
   1260c:	mov	r0, r2
   12610:	bne	127d8 <__assert_fail@plt+0x170c>
   12614:	b	12f28 <__assert_fail@plt+0x1e5c>
   12618:	ldr	r0, [sp, #84]	; 0x54
   1261c:	tst	r0, #1
   12620:	beq	128c4 <__assert_fail@plt+0x17f8>
   12624:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12628:	tst	r0, #1
   1262c:	bne	13030 <__assert_fail@plt+0x1f64>
   12630:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12634:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12638:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1263c:	cmp	r0, #2
   12640:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12644:	movwne	r0, #1
   12648:	orr	r0, r0, r3
   1264c:	tst	r0, #1
   12650:	beq	12d44 <__assert_fail@plt+0x1c78>
   12654:	mov	r0, r8
   12658:	b	12d84 <__assert_fail@plt+0x1cb8>
   1265c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12660:	mov	r9, #0
   12664:	mov	r5, #63	; 0x3f
   12668:	cmp	r0, #5
   1266c:	beq	12a10 <__assert_fail@plt+0x1944>
   12670:	cmp	r0, #2
   12674:	bne	12ad0 <__assert_fail@plt+0x1a04>
   12678:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1267c:	tst	r0, #1
   12680:	beq	12ad4 <__assert_fail@plt+0x1a08>
   12684:	b	12f28 <__assert_fail@plt+0x1e5c>
   12688:	mov	r0, #118	; 0x76
   1268c:	b	127d8 <__assert_fail@plt+0x170c>
   12690:	mov	r0, #1
   12694:	mov	r5, #39	; 0x27
   12698:	str	r0, [sp, #52]	; 0x34
   1269c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   126a0:	cmp	r0, #2
   126a4:	bne	1272c <__assert_fail@plt+0x1660>
   126a8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   126ac:	tst	r0, #1
   126b0:	bne	12f28 <__assert_fail@plt+0x1e5c>
   126b4:	ldr	r3, [sp, #68]	; 0x44
   126b8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   126bc:	mov	r9, #0
   126c0:	clz	r1, r2
   126c4:	cmp	r3, #0
   126c8:	mov	r0, r3
   126cc:	movwne	r0, #1
   126d0:	lsr	r1, r1, #5
   126d4:	orrs	r0, r0, r1
   126d8:	moveq	r3, r2
   126dc:	moveq	r2, r0
   126e0:	cmp	r8, r2
   126e4:	str	r3, [sp, #68]	; 0x44
   126e8:	str	r2, [fp, #-52]	; 0xffffffcc
   126ec:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   126f0:	movcc	r0, #39	; 0x27
   126f4:	strbcc	r0, [r1, r8]
   126f8:	add	r0, r8, #1
   126fc:	cmp	r0, r2
   12700:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12704:	movcc	r1, #92	; 0x5c
   12708:	strbcc	r1, [r3, r0]
   1270c:	add	r0, r8, #2
   12710:	add	r8, r8, #3
   12714:	cmp	r0, r2
   12718:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1271c:	movcc	r1, #39	; 0x27
   12720:	strbcc	r1, [r2, r0]
   12724:	mov	r0, #0
   12728:	str	r0, [fp, #-48]	; 0xffffffd0
   1272c:	mov	sl, #1
   12730:	b	12584 <__assert_fail@plt+0x14b8>
   12734:	ldr	r0, [sp, #32]
   12738:	cmp	r0, #1
   1273c:	bne	128e8 <__assert_fail@plt+0x181c>
   12740:	str	lr, [sp, #80]	; 0x50
   12744:	bl	10fb8 <__ctype_b_loc@plt>
   12748:	ldr	r0, [r0]
   1274c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12750:	mov	r1, #1
   12754:	add	r0, r0, r5, lsl #1
   12758:	ldrb	r0, [r0, #1]
   1275c:	ubfx	sl, r0, #6, #1
   12760:	ldr	r0, [sp, #48]	; 0x30
   12764:	mov	r2, r1
   12768:	cmp	r1, #1
   1276c:	orr	r0, sl, r0
   12770:	bhi	12adc <__assert_fail@plt+0x1a10>
   12774:	tst	r0, #1
   12778:	beq	12adc <__assert_fail@plt+0x1a10>
   1277c:	ldr	lr, [sp, #80]	; 0x50
   12780:	b	12584 <__assert_fail@plt+0x14b8>
   12784:	cmp	r7, #0
   12788:	bne	12a04 <__assert_fail@plt+0x1938>
   1278c:	ldrb	r0, [ip, #1]
   12790:	cmp	r0, #0
   12794:	bne	12a04 <__assert_fail@plt+0x1938>
   12798:	mov	r1, #1
   1279c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   127a0:	cmp	r0, #2
   127a4:	bne	127b4 <__assert_fail@plt+0x16e8>
   127a8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   127ac:	tst	r0, #1
   127b0:	bne	12f28 <__assert_fail@plt+0x1e5c>
   127b4:	mov	sl, r1
   127b8:	b	12584 <__assert_fail@plt+0x14b8>
   127bc:	ldr	r1, [sp, #44]	; 0x2c
   127c0:	mov	r9, #0
   127c4:	mov	r0, #92	; 0x5c
   127c8:	cmp	r1, #0
   127cc:	beq	127d8 <__assert_fail@plt+0x170c>
   127d0:	mov	sl, #0
   127d4:	b	12cf0 <__assert_fail@plt+0x1c24>
   127d8:	ldr	r1, [sp, #84]	; 0x54
   127dc:	mov	sl, #0
   127e0:	mov	r9, #0
   127e4:	tst	r1, #1
   127e8:	bne	12824 <__assert_fail@plt+0x1758>
   127ec:	ldr	r0, [fp, #-88]	; 0xffffffa8
   127f0:	cmp	r0, #0
   127f4:	mov	r0, r5
   127f8:	beq	1281c <__assert_fail@plt+0x1750>
   127fc:	ldr	r1, [fp, #16]
   12800:	ubfx	r0, r5, #5, #3
   12804:	mov	r2, #1
   12808:	ldr	r0, [r1, r0, lsl #2]
   1280c:	and	r1, r5, #31
   12810:	tst	r0, r2, lsl r1
   12814:	mov	r0, r5
   12818:	bne	12824 <__assert_fail@plt+0x1758>
   1281c:	cmp	r6, #0
   12820:	beq	12cf0 <__assert_fail@plt+0x1c24>
   12824:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12828:	ldr	r6, [fp, #-52]	; 0xffffffcc
   1282c:	tst	r1, #1
   12830:	bne	12f04 <__assert_fail@plt+0x1e38>
   12834:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12838:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1283c:	cmp	r1, #2
   12840:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12844:	movwne	r1, #1
   12848:	orr	r1, r1, r5
   1284c:	tst	r1, #1
   12850:	bne	12894 <__assert_fail@plt+0x17c8>
   12854:	cmp	r8, r6
   12858:	mov	r5, #1
   1285c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12860:	movcc	r1, #39	; 0x27
   12864:	strbcc	r1, [r2, r8]
   12868:	add	r1, r8, #1
   1286c:	cmp	r1, r6
   12870:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12874:	movcc	r2, #36	; 0x24
   12878:	strbcc	r2, [r3, r1]
   1287c:	add	r1, r8, #2
   12880:	add	r8, r8, #3
   12884:	cmp	r1, r6
   12888:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1288c:	movcc	r2, #39	; 0x27
   12890:	strbcc	r2, [r3, r1]
   12894:	cmp	r8, r6
   12898:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1289c:	movcc	r1, #92	; 0x5c
   128a0:	strbcc	r1, [r2, r8]
   128a4:	add	r8, r8, #1
   128a8:	cmp	r8, r6
   128ac:	and	r4, r4, sl
   128b0:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   128b4:	strbcc	r0, [r1, r8]
   128b8:	add	r8, r8, #1
   128bc:	add	r7, r7, #1
   128c0:	b	122a4 <__assert_fail@plt+0x11d8>
   128c4:	ldr	r0, [sp, #28]
   128c8:	mov	sl, #0
   128cc:	mov	r9, #0
   128d0:	mov	r5, #0
   128d4:	cmp	r0, #0
   128d8:	beq	127ec <__assert_fail@plt+0x1720>
   128dc:	ldr	r6, [fp, #-52]	; 0xffffffcc
   128e0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   128e4:	b	128bc <__assert_fail@plt+0x17f0>
   128e8:	mov	r0, #0
   128ec:	cmn	lr, #1
   128f0:	str	r6, [sp, #76]	; 0x4c
   128f4:	str	r4, [sp, #20]
   128f8:	str	r0, [fp, #-36]	; 0xffffffdc
   128fc:	str	r0, [fp, #-40]	; 0xffffffd8
   12900:	bne	12914 <__assert_fail@plt+0x1848>
   12904:	mov	r0, ip
   12908:	bl	10fd0 <strlen@plt>
   1290c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12910:	mov	lr, r0
   12914:	add	r0, ip, r7
   12918:	mov	sl, #1
   1291c:	mov	r6, #0
   12920:	sub	r4, fp, #40	; 0x28
   12924:	str	lr, [sp, #80]	; 0x50
   12928:	str	r0, [sp, #36]	; 0x24
   1292c:	str	r6, [sp, #40]	; 0x28
   12930:	add	r6, r6, r7
   12934:	sub	r0, fp, #44	; 0x2c
   12938:	mov	r3, r4
   1293c:	add	r1, ip, r6
   12940:	sub	r2, lr, r6
   12944:	bl	14b84 <__assert_fail@plt+0x3ab8>
   12948:	cmp	r0, #0
   1294c:	beq	12e58 <__assert_fail@plt+0x1d8c>
   12950:	cmn	r0, #1
   12954:	beq	12e18 <__assert_fail@plt+0x1d4c>
   12958:	ldr	lr, [sp, #80]	; 0x50
   1295c:	cmn	r0, #2
   12960:	beq	12e20 <__assert_fail@plt+0x1d54>
   12964:	ldr	r2, [sp, #56]	; 0x38
   12968:	cmp	r0, #2
   1296c:	mov	r1, #0
   12970:	movwcc	r1, #1
   12974:	eor	r2, r2, #1
   12978:	orrs	r1, r2, r1
   1297c:	bne	129c8 <__assert_fail@plt+0x18fc>
   12980:	ldr	r1, [sp, #40]	; 0x28
   12984:	ldr	r2, [sp, #36]	; 0x24
   12988:	add	ip, r2, r1
   1298c:	mov	r2, #1
   12990:	ldrb	r3, [ip, r2]
   12994:	sub	r6, r3, #94	; 0x5e
   12998:	cmp	r6, #30
   1299c:	bhi	129b0 <__assert_fail@plt+0x18e4>
   129a0:	mov	r4, #1
   129a4:	mov	r1, #1073741829	; 0x40000005
   129a8:	tst	r1, r4, lsl r6
   129ac:	bne	12f24 <__assert_fail@plt+0x1e58>
   129b0:	sub	r3, r3, #91	; 0x5b
   129b4:	cmp	r3, #2
   129b8:	bcc	12f24 <__assert_fail@plt+0x1e58>
   129bc:	add	r2, r2, #1
   129c0:	cmp	r2, r0
   129c4:	bcc	12990 <__assert_fail@plt+0x18c4>
   129c8:	ldr	r6, [sp, #40]	; 0x28
   129cc:	add	r6, r0, r6
   129d0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   129d4:	bl	10f28 <iswprint@plt>
   129d8:	cmp	r0, #0
   129dc:	sub	r4, fp, #40	; 0x28
   129e0:	movwne	r0, #1
   129e4:	and	sl, sl, r0
   129e8:	mov	r0, r4
   129ec:	bl	10ed4 <mbsinit@plt>
   129f0:	ldr	lr, [sp, #80]	; 0x50
   129f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   129f8:	cmp	r0, #0
   129fc:	beq	1292c <__assert_fail@plt+0x1860>
   12a00:	b	12e60 <__assert_fail@plt+0x1d94>
   12a04:	mvn	lr, #0
   12a08:	mov	r9, #0
   12a0c:	b	12584 <__assert_fail@plt+0x14b8>
   12a10:	ldr	r0, [sp, #24]
   12a14:	cmp	r0, #0
   12a18:	beq	12ad0 <__assert_fail@plt+0x1a04>
   12a1c:	add	r0, r7, #2
   12a20:	cmp	r0, lr
   12a24:	bcs	12ad0 <__assert_fail@plt+0x1a04>
   12a28:	add	r1, ip, r7
   12a2c:	ldrb	r1, [r1, #1]
   12a30:	cmp	r1, #63	; 0x3f
   12a34:	bne	12ad0 <__assert_fail@plt+0x1a04>
   12a38:	ldrb	r5, [ip, r0]
   12a3c:	sub	r1, r5, #33	; 0x21
   12a40:	cmp	r1, #29
   12a44:	bhi	12ad0 <__assert_fail@plt+0x1a04>
   12a48:	movw	r3, #20929	; 0x51c1
   12a4c:	mov	r2, #1
   12a50:	movt	r3, #14336	; 0x3800
   12a54:	tst	r3, r2, lsl r1
   12a58:	beq	12ad0 <__assert_fail@plt+0x1a04>
   12a5c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12a60:	tst	r1, #1
   12a64:	bne	13038 <__assert_fail@plt+0x1f6c>
   12a68:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12a6c:	mov	r7, r0
   12a70:	cmp	r8, r1
   12a74:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12a78:	movcc	r1, #63	; 0x3f
   12a7c:	strbcc	r1, [r2, r8]
   12a80:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12a84:	add	r1, r8, #1
   12a88:	cmp	r1, r2
   12a8c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12a90:	movcc	r2, #34	; 0x22
   12a94:	strbcc	r2, [r3, r1]
   12a98:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12a9c:	add	r1, r8, #2
   12aa0:	cmp	r1, r2
   12aa4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12aa8:	movcc	r2, #34	; 0x22
   12aac:	strbcc	r2, [r3, r1]
   12ab0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12ab4:	add	r1, r8, #3
   12ab8:	add	r8, r8, #4
   12abc:	cmp	r1, r2
   12ac0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12ac4:	movcc	r2, #63	; 0x3f
   12ac8:	strbcc	r2, [r3, r1]
   12acc:	b	12ad4 <__assert_fail@plt+0x1a08>
   12ad0:	mov	r5, #63	; 0x3f
   12ad4:	mov	sl, #0
   12ad8:	b	12584 <__assert_fail@plt+0x14b8>
   12adc:	str	r0, [sp, #40]	; 0x28
   12ae0:	add	r0, r2, r7
   12ae4:	str	r6, [sp, #76]	; 0x4c
   12ae8:	add	r1, r7, #1
   12aec:	ldr	lr, [sp, #80]	; 0x50
   12af0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12af4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12af8:	mov	r3, #0
   12afc:	str	r0, [sp, #36]	; 0x24
   12b00:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12b04:	b	12b98 <__assert_fail@plt+0x1acc>
   12b08:	str	r0, [sp, #76]	; 0x4c
   12b0c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12b10:	cmp	r9, #0
   12b14:	movwne	r9, #1
   12b18:	mvn	r7, r0
   12b1c:	orr	r7, r7, r9
   12b20:	tst	r7, #1
   12b24:	bne	12b74 <__assert_fail@plt+0x1aa8>
   12b28:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12b2c:	cmp	r8, r6
   12b30:	bcs	12b48 <__assert_fail@plt+0x1a7c>
   12b34:	ldr	r7, [fp, #-56]	; 0xffffffc8
   12b38:	mov	r2, r4
   12b3c:	mov	r4, #39	; 0x27
   12b40:	strb	r4, [r7, r8]
   12b44:	mov	r4, r2
   12b48:	add	r7, r8, #1
   12b4c:	cmp	r7, r6
   12b50:	bcs	12b68 <__assert_fail@plt+0x1a9c>
   12b54:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12b58:	mov	r2, r4
   12b5c:	mov	r4, #39	; 0x27
   12b60:	strb	r4, [r0, r7]
   12b64:	mov	r4, r2
   12b68:	add	r8, r8, #2
   12b6c:	mov	r0, #0
   12b70:	b	12b7c <__assert_fail@plt+0x1ab0>
   12b74:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12b78:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12b7c:	cmp	r8, r6
   12b80:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12b84:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12b88:	strbcc	r5, [r2, r8]
   12b8c:	add	r8, r8, #1
   12b90:	ldrb	r5, [ip, r1]
   12b94:	add	r1, r1, #1
   12b98:	ldr	r2, [sp, #40]	; 0x28
   12b9c:	tst	r2, #1
   12ba0:	beq	12bdc <__assert_fail@plt+0x1b10>
   12ba4:	ldr	r2, [sp, #76]	; 0x4c
   12ba8:	str	r0, [fp, #-48]	; 0xffffffd0
   12bac:	tst	r2, #1
   12bb0:	beq	12bd4 <__assert_fail@plt+0x1b08>
   12bb4:	cmp	r8, r6
   12bb8:	bcs	12bd0 <__assert_fail@plt+0x1b04>
   12bbc:	ldr	r6, [fp, #-56]	; 0xffffffc8
   12bc0:	mov	r2, r4
   12bc4:	mov	r4, #92	; 0x5c
   12bc8:	strb	r4, [r6, r8]
   12bcc:	mov	r4, r2
   12bd0:	add	r8, r8, #1
   12bd4:	mov	r0, #0
   12bd8:	b	12cd0 <__assert_fail@plt+0x1c04>
   12bdc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12be0:	tst	r2, #1
   12be4:	bne	12f30 <__assert_fail@plt+0x1e64>
   12be8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12bec:	cmp	r7, #2
   12bf0:	movwne	r3, #1
   12bf4:	orr	r3, r3, r0
   12bf8:	tst	r3, #1
   12bfc:	bne	12c58 <__assert_fail@plt+0x1b8c>
   12c00:	cmp	r8, r6
   12c04:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12c08:	movcc	r3, #39	; 0x27
   12c0c:	strbcc	r3, [r2, r8]
   12c10:	add	r3, r8, #1
   12c14:	cmp	r3, r6
   12c18:	bcs	12c30 <__assert_fail@plt+0x1b64>
   12c1c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12c20:	mov	r7, r4
   12c24:	mov	r4, #36	; 0x24
   12c28:	strb	r4, [r2, r3]
   12c2c:	mov	r4, r7
   12c30:	add	r3, r8, #2
   12c34:	cmp	r3, r6
   12c38:	bcs	12c50 <__assert_fail@plt+0x1b84>
   12c3c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12c40:	mov	r7, r4
   12c44:	mov	r4, #39	; 0x27
   12c48:	strb	r4, [r2, r3]
   12c4c:	mov	r4, r7
   12c50:	add	r8, r8, #3
   12c54:	mov	r0, #1
   12c58:	cmp	r8, r6
   12c5c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12c60:	movcc	r3, #92	; 0x5c
   12c64:	strbcc	r3, [r2, r8]
   12c68:	add	r3, r8, #1
   12c6c:	cmp	r3, r6
   12c70:	bcs	12c90 <__assert_fail@plt+0x1bc4>
   12c74:	mov	r2, r4
   12c78:	and	r7, r5, #192	; 0xc0
   12c7c:	mov	r4, #48	; 0x30
   12c80:	orr	r7, r4, r7, lsr #6
   12c84:	mov	r4, r2
   12c88:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12c8c:	strb	r7, [r2, r3]
   12c90:	add	r3, r8, #2
   12c94:	cmp	r3, r6
   12c98:	bcs	12cb8 <__assert_fail@plt+0x1bec>
   12c9c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12ca0:	mov	r6, r4
   12ca4:	lsr	r7, r5, #3
   12ca8:	mov	r4, #6
   12cac:	bfi	r7, r4, #3, #29
   12cb0:	mov	r4, r6
   12cb4:	strb	r7, [r2, r3]
   12cb8:	str	r0, [fp, #-48]	; 0xffffffd0
   12cbc:	ldr	r0, [sp, #76]	; 0x4c
   12cc0:	mov	r3, #6
   12cc4:	add	r8, r8, #3
   12cc8:	bfi	r5, r3, #3, #29
   12ccc:	mov	r3, #1
   12cd0:	ldr	r2, [sp, #36]	; 0x24
   12cd4:	and	r9, r3, #1
   12cd8:	cmp	r2, r1
   12cdc:	bhi	12b08 <__assert_fail@plt+0x1a3c>
   12ce0:	cmp	r9, #0
   12ce4:	sub	r7, r1, #1
   12ce8:	mov	r0, r5
   12cec:	movwne	r9, #1
   12cf0:	cmp	r9, #0
   12cf4:	bne	12d38 <__assert_fail@plt+0x1c6c>
   12cf8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12cfc:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12d00:	tst	r5, #1
   12d04:	beq	128a8 <__assert_fail@plt+0x17dc>
   12d08:	cmp	r8, r6
   12d0c:	mov	r5, #0
   12d10:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12d14:	movcc	r1, #39	; 0x27
   12d18:	strbcc	r1, [r2, r8]
   12d1c:	add	r1, r8, #1
   12d20:	add	r8, r8, #2
   12d24:	cmp	r1, r6
   12d28:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12d2c:	movcc	r2, #39	; 0x27
   12d30:	strbcc	r2, [r3, r1]
   12d34:	b	128a8 <__assert_fail@plt+0x17dc>
   12d38:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12d3c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12d40:	b	128a8 <__assert_fail@plt+0x17dc>
   12d44:	cmp	r8, r1
   12d48:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12d4c:	movcc	r0, #39	; 0x27
   12d50:	strbcc	r0, [r2, r8]
   12d54:	add	r0, r8, #1
   12d58:	cmp	r0, r1
   12d5c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12d60:	movcc	r2, #36	; 0x24
   12d64:	strbcc	r2, [r3, r0]
   12d68:	add	r0, r8, #2
   12d6c:	cmp	r0, r1
   12d70:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12d74:	movcc	r2, #39	; 0x27
   12d78:	strbcc	r2, [r3, r0]
   12d7c:	add	r0, r8, #3
   12d80:	mov	r3, #1
   12d84:	cmp	r0, r1
   12d88:	add	r8, r0, #1
   12d8c:	str	r3, [fp, #-48]	; 0xffffffd0
   12d90:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12d94:	movcc	r1, #92	; 0x5c
   12d98:	strbcc	r1, [r2, r0]
   12d9c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12da0:	cmp	r1, #2
   12da4:	beq	12e08 <__assert_fail@plt+0x1d3c>
   12da8:	add	r1, r7, #1
   12dac:	mov	sl, #0
   12db0:	mov	r9, #1
   12db4:	mov	r5, #48	; 0x30
   12db8:	cmp	r1, lr
   12dbc:	bcs	12584 <__assert_fail@plt+0x14b8>
   12dc0:	ldrb	r1, [ip, r1]
   12dc4:	sub	r1, r1, #48	; 0x30
   12dc8:	uxtb	r1, r1
   12dcc:	cmp	r1, #9
   12dd0:	bhi	12584 <__assert_fail@plt+0x14b8>
   12dd4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12dd8:	cmp	r8, r1
   12ddc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12de0:	movcc	r1, #48	; 0x30
   12de4:	strbcc	r1, [r2, r8]
   12de8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12dec:	add	r1, r0, #2
   12df0:	add	r8, r0, #3
   12df4:	cmp	r1, r2
   12df8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12dfc:	movcc	r2, #48	; 0x30
   12e00:	strbcc	r2, [r3, r1]
   12e04:	b	12584 <__assert_fail@plt+0x14b8>
   12e08:	mov	r0, #48	; 0x30
   12e0c:	mov	r9, #1
   12e10:	mov	sl, #0
   12e14:	b	1281c <__assert_fail@plt+0x1750>
   12e18:	mov	sl, #0
   12e1c:	b	12e58 <__assert_fail@plt+0x1d8c>
   12e20:	mov	sl, #0
   12e24:	cmp	lr, r6
   12e28:	bls	12e58 <__assert_fail@plt+0x1d8c>
   12e2c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12e30:	ldr	r6, [sp, #40]	; 0x28
   12e34:	ldr	r0, [sp, #36]	; 0x24
   12e38:	ldrb	r0, [r0, r6]
   12e3c:	cmp	r0, #0
   12e40:	beq	12e60 <__assert_fail@plt+0x1d94>
   12e44:	add	r6, r6, #1
   12e48:	add	r0, r7, r6
   12e4c:	cmp	r0, lr
   12e50:	bcc	12e34 <__assert_fail@plt+0x1d68>
   12e54:	b	12e60 <__assert_fail@plt+0x1d94>
   12e58:	ldr	ip, [fp, #-84]	; 0xffffffac
   12e5c:	ldr	r6, [sp, #40]	; 0x28
   12e60:	mov	r1, r6
   12e64:	ldr	r4, [sp, #20]
   12e68:	ldr	r6, [sp, #76]	; 0x4c
   12e6c:	b	12760 <__assert_fail@plt+0x1694>
   12e70:	mov	lr, r7
   12e74:	b	12e7c <__assert_fail@plt+0x1db0>
   12e78:	mvn	lr, #0
   12e7c:	ldr	r9, [fp, #-64]	; 0xffffffc0
   12e80:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12e84:	eor	r0, r9, #2
   12e88:	orr	r0, r0, r8
   12e8c:	clz	r0, r0
   12e90:	lsr	r0, r0, #5
   12e94:	tst	r1, r0
   12e98:	bne	12f94 <__assert_fail@plt+0x1ec8>
   12e9c:	mov	r0, r1
   12ea0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12ea4:	cmp	r9, #2
   12ea8:	movwne	r1, #1
   12eac:	orr	r0, r0, r1
   12eb0:	tst	r0, #1
   12eb4:	bne	12fd4 <__assert_fail@plt+0x1f08>
   12eb8:	ldr	r0, [sp, #52]	; 0x34
   12ebc:	ldr	r1, [sp, #68]	; 0x44
   12ec0:	str	lr, [sp, #80]	; 0x50
   12ec4:	eor	r0, r0, #1
   12ec8:	tst	r0, #1
   12ecc:	bne	12fd4 <__assert_fail@plt+0x1f08>
   12ed0:	tst	r4, #1
   12ed4:	bne	12f9c <__assert_fail@plt+0x1ed0>
   12ed8:	mov	r7, #0
   12edc:	cmp	r1, #0
   12ee0:	beq	12fcc <__assert_fail@plt+0x1f00>
   12ee4:	ldr	r0, [sp, #84]	; 0x54
   12ee8:	mov	r3, #0
   12eec:	cmp	r6, #0
   12ef0:	mov	r2, #0
   12ef4:	mov	r4, r1
   12ef8:	str	r3, [fp, #-72]	; 0xffffffb8
   12efc:	beq	12038 <__assert_fail@plt+0xf6c>
   12f00:	b	12fd4 <__assert_fail@plt+0x1f08>
   12f04:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12f08:	b	12f30 <__assert_fail@plt+0x1e64>
   12f0c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f10:	mov	r2, #1
   12f14:	mov	lr, r4
   12f18:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12f1c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12f20:	b	12f34 <__assert_fail@plt+0x1e68>
   12f24:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f28:	mov	r7, #2
   12f2c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12f30:	ldr	r2, [sp, #84]	; 0x54
   12f34:	mov	r0, #0
   12f38:	ldr	r1, [fp, #12]
   12f3c:	tst	r2, #1
   12f40:	mov	r2, r7
   12f44:	mov	r3, lr
   12f48:	str	r0, [sp, #8]
   12f4c:	ldr	r0, [sp, #64]	; 0x40
   12f50:	movwne	r2, #4
   12f54:	cmp	r7, #2
   12f58:	movne	r2, r7
   12f5c:	str	r2, [sp]
   12f60:	mov	r2, ip
   12f64:	bic	r1, r1, #2
   12f68:	str	r0, [sp, #12]
   12f6c:	ldr	r0, [sp, #72]	; 0x48
   12f70:	str	r1, [sp, #4]
   12f74:	mov	r1, r6
   12f78:	str	r0, [sp, #16]
   12f7c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12f80:	bl	11fc0 <__assert_fail@plt+0xef4>
   12f84:	mov	r8, r0
   12f88:	mov	r0, r8
   12f8c:	sub	sp, fp, #28
   12f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f94:	mov	r7, #2
   12f98:	b	12f30 <__assert_fail@plt+0x1e64>
   12f9c:	mov	r0, #5
   12fa0:	ldr	r2, [fp, #-84]	; 0xffffffac
   12fa4:	ldr	r3, [sp, #80]	; 0x50
   12fa8:	str	r0, [sp]
   12fac:	ldr	r0, [fp, #12]
   12fb0:	str	r0, [sp, #4]
   12fb4:	ldr	r0, [fp, #16]
   12fb8:	str	r0, [sp, #8]
   12fbc:	ldr	r0, [sp, #64]	; 0x40
   12fc0:	str	r0, [sp, #12]
   12fc4:	ldr	r0, [sp, #72]	; 0x48
   12fc8:	b	12f78 <__assert_fail@plt+0x1eac>
   12fcc:	mov	r0, #0
   12fd0:	str	r0, [fp, #-72]	; 0xffffffb8
   12fd4:	ldr	r1, [sp, #92]	; 0x5c
   12fd8:	cmp	r1, #0
   12fdc:	beq	1301c <__assert_fail@plt+0x1f50>
   12fe0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12fe4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12fe8:	tst	r0, #1
   12fec:	bne	13020 <__assert_fail@plt+0x1f54>
   12ff0:	ldrb	r0, [r1]
   12ff4:	cmp	r0, #0
   12ff8:	beq	13020 <__assert_fail@plt+0x1f54>
   12ffc:	add	r1, r1, #1
   13000:	cmp	r8, r6
   13004:	strbcc	r0, [r2, r8]
   13008:	add	r8, r8, #1
   1300c:	ldrb	r0, [r1], #1
   13010:	cmp	r0, #0
   13014:	bne	13000 <__assert_fail@plt+0x1f34>
   13018:	b	13020 <__assert_fail@plt+0x1f54>
   1301c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13020:	cmp	r8, r6
   13024:	movcc	r0, #0
   13028:	strbcc	r0, [r2, r8]
   1302c:	b	12f88 <__assert_fail@plt+0x1ebc>
   13030:	mov	r2, #1
   13034:	b	12f18 <__assert_fail@plt+0x1e4c>
   13038:	mov	r7, #5
   1303c:	b	12f2c <__assert_fail@plt+0x1e60>
   13040:	bl	110b4 <abort@plt>
   13044:	mov	r3, r2
   13048:	mov	r2, #0
   1304c:	b	13050 <__assert_fail@plt+0x1f84>
   13050:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13054:	add	fp, sp, #28
   13058:	sub	sp, sp, #36	; 0x24
   1305c:	movw	r8, #24952	; 0x6178
   13060:	cmp	r3, #0
   13064:	mov	r4, r2
   13068:	str	r2, [sp, #24]
   1306c:	mov	r5, r1
   13070:	mov	r6, r0
   13074:	str	r0, [sp, #20]
   13078:	movt	r8, #2
   1307c:	movne	r8, r3
   13080:	bl	10fe8 <__errno_location@plt>
   13084:	str	r0, [sp, #28]
   13088:	cmp	r4, #0
   1308c:	add	sl, r8, #8
   13090:	ldm	r8, {r3, r9}
   13094:	ldr	r7, [r0]
   13098:	ldr	r1, [r8, #40]	; 0x28
   1309c:	ldr	r2, [r8, #44]	; 0x2c
   130a0:	mov	r0, #0
   130a4:	orreq	r9, r9, #1
   130a8:	str	r7, [sp, #32]
   130ac:	mov	r7, r5
   130b0:	stm	sp, {r3, r9, sl}
   130b4:	str	r1, [sp, #12]
   130b8:	str	r2, [sp, #16]
   130bc:	mov	r1, #0
   130c0:	mov	r2, r6
   130c4:	mov	r3, r5
   130c8:	bl	11fc0 <__assert_fail@plt+0xef4>
   130cc:	add	r4, r0, #1
   130d0:	mov	r5, r0
   130d4:	mov	r0, r4
   130d8:	bl	13db4 <__assert_fail@plt+0x2ce8>
   130dc:	mov	r6, r0
   130e0:	ldr	r0, [r8]
   130e4:	ldr	r2, [r8, #44]	; 0x2c
   130e8:	ldr	r1, [r8, #40]	; 0x28
   130ec:	mov	r3, r7
   130f0:	stm	sp, {r0, r9, sl}
   130f4:	str	r2, [sp, #16]
   130f8:	str	r1, [sp, #12]
   130fc:	mov	r0, r6
   13100:	mov	r1, r4
   13104:	ldr	r2, [sp, #20]
   13108:	bl	11fc0 <__assert_fail@plt+0xef4>
   1310c:	ldr	r0, [sp, #24]
   13110:	ldr	r1, [sp, #32]
   13114:	ldr	r2, [sp, #28]
   13118:	cmp	r0, #0
   1311c:	str	r1, [r2]
   13120:	strne	r5, [r0]
   13124:	mov	r0, r6
   13128:	sub	sp, fp, #28
   1312c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13130:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13134:	add	fp, sp, #24
   13138:	movw	r5, #24828	; 0x60fc
   1313c:	movw	r8, #24824	; 0x60f8
   13140:	movt	r5, #2
   13144:	movt	r8, #2
   13148:	ldr	r0, [r5]
   1314c:	ldr	r4, [r8]
   13150:	cmp	r0, #2
   13154:	blt	13180 <__assert_fail@plt+0x20b4>
   13158:	add	r7, r4, #12
   1315c:	mov	r6, #0
   13160:	ldr	r0, [r7, r6, lsl #3]
   13164:	bl	14b24 <__assert_fail@plt+0x3a58>
   13168:	ldr	r1, [r5]
   1316c:	add	r2, r6, #2
   13170:	add	r0, r6, #1
   13174:	mov	r6, r0
   13178:	cmp	r2, r1
   1317c:	blt	13160 <__assert_fail@plt+0x2094>
   13180:	ldr	r0, [r4, #4]
   13184:	movw	r7, #25000	; 0x61a8
   13188:	movt	r7, #2
   1318c:	cmp	r0, r7
   13190:	beq	131a8 <__assert_fail@plt+0x20dc>
   13194:	bl	14b24 <__assert_fail@plt+0x3a58>
   13198:	movw	r0, #24832	; 0x6100
   1319c:	mov	r6, #256	; 0x100
   131a0:	movt	r0, #2
   131a4:	strd	r6, [r0]
   131a8:	movw	r6, #24832	; 0x6100
   131ac:	movt	r6, #2
   131b0:	cmp	r4, r6
   131b4:	beq	131c4 <__assert_fail@plt+0x20f8>
   131b8:	mov	r0, r4
   131bc:	bl	14b24 <__assert_fail@plt+0x3a58>
   131c0:	str	r6, [r8]
   131c4:	mov	r0, #1
   131c8:	str	r0, [r5]
   131cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   131d0:	movw	r3, #24952	; 0x6178
   131d4:	mvn	r2, #0
   131d8:	movt	r3, #2
   131dc:	b	131e0 <__assert_fail@plt+0x2114>
   131e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131e4:	add	fp, sp, #28
   131e8:	sub	sp, sp, #44	; 0x2c
   131ec:	mov	r7, r3
   131f0:	str	r2, [sp, #36]	; 0x24
   131f4:	str	r1, [sp, #32]
   131f8:	mov	r5, r0
   131fc:	bl	10fe8 <__errno_location@plt>
   13200:	cmp	r5, #0
   13204:	blt	13370 <__assert_fail@plt+0x22a4>
   13208:	cmn	r5, #-2147483647	; 0x80000001
   1320c:	beq	13370 <__assert_fail@plt+0x22a4>
   13210:	movw	r8, #24828	; 0x60fc
   13214:	movw	r4, #24824	; 0x60f8
   13218:	str	r0, [sp, #28]
   1321c:	ldr	r0, [r0]
   13220:	movt	r8, #2
   13224:	movt	r4, #2
   13228:	ldr	r1, [r8]
   1322c:	ldr	r6, [r4]
   13230:	str	r0, [sp, #24]
   13234:	cmp	r1, r5
   13238:	ble	13244 <__assert_fail@plt+0x2178>
   1323c:	mov	sl, r6
   13240:	b	132ac <__assert_fail@plt+0x21e0>
   13244:	movw	r9, #24832	; 0x6100
   13248:	mov	r0, #8
   1324c:	add	r2, r5, #1
   13250:	str	r1, [fp, #-32]	; 0xffffffe0
   13254:	mvn	r3, #-2147483648	; 0x80000000
   13258:	movt	r9, #2
   1325c:	str	r0, [sp]
   13260:	sub	r2, r2, r1
   13264:	sub	r1, fp, #32
   13268:	subs	r0, r6, r9
   1326c:	movne	r0, r6
   13270:	bl	13ee4 <__assert_fail@plt+0x2e18>
   13274:	cmp	r6, r9
   13278:	mov	sl, r0
   1327c:	str	r0, [r4]
   13280:	ldrdeq	r0, [r9]
   13284:	stmeq	sl, {r0, r1}
   13288:	ldr	r1, [r8]
   1328c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13290:	add	r0, sl, r1, lsl #3
   13294:	sub	r1, r2, r1
   13298:	lsl	r2, r1, #3
   1329c:	mov	r1, #0
   132a0:	bl	11000 <memset@plt>
   132a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   132a8:	str	r0, [r8]
   132ac:	mov	r9, sl
   132b0:	ldr	r6, [r9, r5, lsl #3]!
   132b4:	ldr	r4, [r9, #4]!
   132b8:	ldm	r7, {r0, r1}
   132bc:	ldr	r2, [r7, #40]	; 0x28
   132c0:	ldr	r3, [r7, #44]	; 0x2c
   132c4:	orr	r8, r1, #1
   132c8:	add	r1, r7, #8
   132cc:	stm	sp, {r0, r8}
   132d0:	add	r0, sp, #8
   132d4:	str	r1, [sp, #20]
   132d8:	stm	r0, {r1, r2, r3}
   132dc:	mov	r0, r4
   132e0:	mov	r1, r6
   132e4:	ldr	r2, [sp, #32]
   132e8:	ldr	r3, [sp, #36]	; 0x24
   132ec:	bl	11fc0 <__assert_fail@plt+0xef4>
   132f0:	cmp	r6, r0
   132f4:	bhi	13358 <__assert_fail@plt+0x228c>
   132f8:	add	r6, r0, #1
   132fc:	movw	r0, #25000	; 0x61a8
   13300:	movt	r0, #2
   13304:	str	r6, [sl, r5, lsl #3]
   13308:	cmp	r4, r0
   1330c:	beq	13318 <__assert_fail@plt+0x224c>
   13310:	mov	r0, r4
   13314:	bl	14b24 <__assert_fail@plt+0x3a58>
   13318:	mov	r0, r6
   1331c:	bl	13db4 <__assert_fail@plt+0x2ce8>
   13320:	str	r0, [r9]
   13324:	mov	r4, r0
   13328:	add	r3, sp, #8
   1332c:	ldr	r0, [r7]
   13330:	ldr	r1, [r7, #40]	; 0x28
   13334:	ldr	r2, [r7, #44]	; 0x2c
   13338:	stm	sp, {r0, r8}
   1333c:	ldr	r0, [sp, #20]
   13340:	stm	r3, {r0, r1, r2}
   13344:	mov	r0, r4
   13348:	mov	r1, r6
   1334c:	ldr	r2, [sp, #32]
   13350:	ldr	r3, [sp, #36]	; 0x24
   13354:	bl	11fc0 <__assert_fail@plt+0xef4>
   13358:	ldr	r0, [sp, #28]
   1335c:	ldr	r1, [sp, #24]
   13360:	str	r1, [r0]
   13364:	mov	r0, r4
   13368:	sub	sp, fp, #28
   1336c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13370:	bl	110b4 <abort@plt>
   13374:	movw	r3, #24952	; 0x6178
   13378:	movt	r3, #2
   1337c:	b	131e0 <__assert_fail@plt+0x2114>
   13380:	movw	r3, #24952	; 0x6178
   13384:	mov	r1, r0
   13388:	mov	r0, #0
   1338c:	mvn	r2, #0
   13390:	movt	r3, #2
   13394:	b	131e0 <__assert_fail@plt+0x2114>
   13398:	movw	r3, #24952	; 0x6178
   1339c:	mov	r2, r1
   133a0:	mov	r1, r0
   133a4:	mov	r0, #0
   133a8:	movt	r3, #2
   133ac:	b	131e0 <__assert_fail@plt+0x2114>
   133b0:	push	{fp, lr}
   133b4:	mov	fp, sp
   133b8:	sub	sp, sp, #48	; 0x30
   133bc:	vmov.i32	q8, #0	; 0x00000000
   133c0:	mov	ip, #32
   133c4:	mov	r3, sp
   133c8:	mov	lr, r2
   133cc:	cmp	r1, #10
   133d0:	add	r2, r3, #16
   133d4:	vst1.64	{d16-d17}, [r3], ip
   133d8:	vst1.64	{d16-d17}, [r3]
   133dc:	vst1.64	{d16-d17}, [r2]
   133e0:	beq	13400 <__assert_fail@plt+0x2334>
   133e4:	str	r1, [sp]
   133e8:	mov	r3, sp
   133ec:	mov	r1, lr
   133f0:	mvn	r2, #0
   133f4:	bl	131e0 <__assert_fail@plt+0x2114>
   133f8:	mov	sp, fp
   133fc:	pop	{fp, pc}
   13400:	bl	110b4 <abort@plt>
   13404:	push	{r4, sl, fp, lr}
   13408:	add	fp, sp, #8
   1340c:	sub	sp, sp, #48	; 0x30
   13410:	mov	ip, r3
   13414:	mov	r3, sp
   13418:	vmov.i32	q8, #0	; 0x00000000
   1341c:	mov	lr, #32
   13420:	cmp	r1, #10
   13424:	add	r4, r3, #16
   13428:	vst1.64	{d16-d17}, [r3], lr
   1342c:	vst1.64	{d16-d17}, [r3]
   13430:	vst1.64	{d16-d17}, [r4]
   13434:	beq	13454 <__assert_fail@plt+0x2388>
   13438:	str	r1, [sp]
   1343c:	mov	r1, r2
   13440:	mov	r3, sp
   13444:	mov	r2, ip
   13448:	bl	131e0 <__assert_fail@plt+0x2114>
   1344c:	sub	sp, fp, #8
   13450:	pop	{r4, sl, fp, pc}
   13454:	bl	110b4 <abort@plt>
   13458:	mov	r2, r1
   1345c:	mov	r1, r0
   13460:	mov	r0, #0
   13464:	b	133b0 <__assert_fail@plt+0x22e4>
   13468:	mov	r3, r2
   1346c:	mov	r2, r1
   13470:	mov	r1, r0
   13474:	mov	r0, #0
   13478:	b	13404 <__assert_fail@plt+0x2338>
   1347c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13480:	add	fp, sp, #24
   13484:	sub	sp, sp, #48	; 0x30
   13488:	movw	r8, #24952	; 0x6178
   1348c:	mov	lr, r0
   13490:	mov	r3, sp
   13494:	mov	ip, r1
   13498:	movt	r8, #2
   1349c:	mov	r1, r3
   134a0:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   134a4:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   134a8:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   134ac:	stm	r1, {r0, r4, r5, r6, r7, r9}
   134b0:	ubfx	r0, r2, #5, #3
   134b4:	and	r2, r2, #31
   134b8:	mov	r4, #1
   134bc:	add	r0, r3, r0, lsl #2
   134c0:	ldr	r1, [r0, #8]
   134c4:	bic	r4, r4, r1, lsr r2
   134c8:	eor	r1, r1, r4, lsl r2
   134cc:	mov	r2, ip
   134d0:	str	r1, [r0, #8]
   134d4:	mov	r0, #0
   134d8:	mov	r1, lr
   134dc:	bl	131e0 <__assert_fail@plt+0x2114>
   134e0:	sub	sp, fp, #24
   134e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   134e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   134ec:	add	fp, sp, #24
   134f0:	sub	sp, sp, #48	; 0x30
   134f4:	movw	lr, #24952	; 0x6178
   134f8:	mov	ip, r0
   134fc:	mov	r3, sp
   13500:	movt	lr, #2
   13504:	mov	r2, r3
   13508:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   1350c:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   13510:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   13514:	stm	r2, {r0, r4, r5, r6, r7, r8}
   13518:	ubfx	r0, r1, #5, #3
   1351c:	and	r1, r1, #31
   13520:	mov	r7, #1
   13524:	add	r0, r3, r0, lsl #2
   13528:	ldr	r2, [r0, #8]
   1352c:	bic	r7, r7, r2, lsr r1
   13530:	eor	r1, r2, r7, lsl r1
   13534:	mvn	r2, #0
   13538:	str	r1, [r0, #8]
   1353c:	mov	r0, #0
   13540:	mov	r1, ip
   13544:	bl	131e0 <__assert_fail@plt+0x2114>
   13548:	sub	sp, fp, #24
   1354c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13550:	push	{r4, r5, r6, r7, fp, lr}
   13554:	add	fp, sp, #16
   13558:	sub	sp, sp, #48	; 0x30
   1355c:	movw	lr, #24952	; 0x6178
   13560:	mov	ip, r0
   13564:	mov	r3, sp
   13568:	movt	lr, #2
   1356c:	mov	r2, r3
   13570:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   13574:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13578:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   1357c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13580:	mov	r1, ip
   13584:	mvn	r2, #0
   13588:	ldr	r0, [sp, #12]
   1358c:	orr	r0, r0, #67108864	; 0x4000000
   13590:	str	r0, [sp, #12]
   13594:	mov	r0, #0
   13598:	bl	131e0 <__assert_fail@plt+0x2114>
   1359c:	sub	sp, fp, #16
   135a0:	pop	{r4, r5, r6, r7, fp, pc}
   135a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   135a8:	add	fp, sp, #24
   135ac:	sub	sp, sp, #48	; 0x30
   135b0:	movw	r8, #24952	; 0x6178
   135b4:	mov	ip, r1
   135b8:	mov	lr, r0
   135bc:	mov	r3, sp
   135c0:	movt	r8, #2
   135c4:	mov	r2, r3
   135c8:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   135cc:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   135d0:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   135d4:	stm	r2, {r0, r1, r4, r5, r6, r7}
   135d8:	mov	r1, lr
   135dc:	mov	r2, ip
   135e0:	ldr	r0, [sp, #12]
   135e4:	orr	r0, r0, #67108864	; 0x4000000
   135e8:	str	r0, [sp, #12]
   135ec:	mov	r0, #0
   135f0:	bl	131e0 <__assert_fail@plt+0x2114>
   135f4:	sub	sp, fp, #24
   135f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   135fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13600:	add	fp, sp, #24
   13604:	sub	sp, sp, #96	; 0x60
   13608:	mov	lr, sp
   1360c:	vmov.i32	q8, #0	; 0x00000000
   13610:	mov	ip, r2
   13614:	cmp	r1, #10
   13618:	add	r3, lr, #16
   1361c:	mov	r2, lr
   13620:	vst1.64	{d16-d17}, [r3]
   13624:	mov	r3, #28
   13628:	vst1.64	{d16-d17}, [r2], r3
   1362c:	vst1.32	{d16-d17}, [r2]
   13630:	beq	13670 <__assert_fail@plt+0x25a4>
   13634:	str	r1, [sp, #48]	; 0x30
   13638:	add	r3, sp, #48	; 0x30
   1363c:	ldm	lr!, {r2, r4, r5, r6, r7}
   13640:	add	r1, r3, #4
   13644:	stmia	r1!, {r2, r4, r5, r6, r7}
   13648:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   1364c:	stm	r1, {r2, r4, r5, r6, r7, r8}
   13650:	mvn	r2, #0
   13654:	ldr	r1, [sp, #60]	; 0x3c
   13658:	orr	r1, r1, #67108864	; 0x4000000
   1365c:	str	r1, [sp, #60]	; 0x3c
   13660:	mov	r1, ip
   13664:	bl	131e0 <__assert_fail@plt+0x2114>
   13668:	sub	sp, fp, #24
   1366c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13670:	bl	110b4 <abort@plt>
   13674:	push	{fp, lr}
   13678:	mov	fp, sp
   1367c:	sub	sp, sp, #8
   13680:	mvn	ip, #0
   13684:	str	ip, [sp]
   13688:	bl	13694 <__assert_fail@plt+0x25c8>
   1368c:	mov	sp, fp
   13690:	pop	{fp, pc}
   13694:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13698:	add	fp, sp, #24
   1369c:	sub	sp, sp, #48	; 0x30
   136a0:	movw	ip, #24952	; 0x6178
   136a4:	mov	lr, r3
   136a8:	mov	r3, sp
   136ac:	cmp	r1, #0
   136b0:	movt	ip, #2
   136b4:	cmpne	r2, #0
   136b8:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   136bc:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   136c0:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   136c4:	stm	r3, {r4, r5, r6, r7, r8, r9}
   136c8:	mov	r3, #10
   136cc:	str	r3, [sp]
   136d0:	bne	136d8 <__assert_fail@plt+0x260c>
   136d4:	bl	110b4 <abort@plt>
   136d8:	ldr	ip, [fp, #8]
   136dc:	str	r2, [sp, #44]	; 0x2c
   136e0:	str	r1, [sp, #40]	; 0x28
   136e4:	mov	r3, sp
   136e8:	mov	r1, lr
   136ec:	mov	r2, ip
   136f0:	bl	131e0 <__assert_fail@plt+0x2114>
   136f4:	sub	sp, fp, #24
   136f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   136fc:	push	{fp, lr}
   13700:	mov	fp, sp
   13704:	sub	sp, sp, #8
   13708:	mov	r3, r2
   1370c:	mov	r2, r1
   13710:	mov	r1, r0
   13714:	mvn	r0, #0
   13718:	str	r0, [sp]
   1371c:	mov	r0, #0
   13720:	bl	13694 <__assert_fail@plt+0x25c8>
   13724:	mov	sp, fp
   13728:	pop	{fp, pc}
   1372c:	push	{fp, lr}
   13730:	mov	fp, sp
   13734:	sub	sp, sp, #8
   13738:	mov	ip, r2
   1373c:	mov	r2, r1
   13740:	mov	r1, r0
   13744:	str	r3, [sp]
   13748:	mov	r0, #0
   1374c:	mov	r3, ip
   13750:	bl	13694 <__assert_fail@plt+0x25c8>
   13754:	mov	sp, fp
   13758:	pop	{fp, pc}
   1375c:	movw	r3, #24840	; 0x6108
   13760:	movt	r3, #2
   13764:	b	131e0 <__assert_fail@plt+0x2114>
   13768:	movw	r3, #24840	; 0x6108
   1376c:	mov	r2, r1
   13770:	mov	r1, r0
   13774:	mov	r0, #0
   13778:	movt	r3, #2
   1377c:	b	131e0 <__assert_fail@plt+0x2114>
   13780:	movw	r3, #24840	; 0x6108
   13784:	mvn	r2, #0
   13788:	movt	r3, #2
   1378c:	b	131e0 <__assert_fail@plt+0x2114>
   13790:	movw	r3, #24840	; 0x6108
   13794:	mov	r1, r0
   13798:	mov	r0, #0
   1379c:	mvn	r2, #0
   137a0:	movt	r3, #2
   137a4:	b	131e0 <__assert_fail@plt+0x2114>
   137a8:	push	{r4, r5, fp, lr}
   137ac:	add	fp, sp, #8
   137b0:	mov	r5, r0
   137b4:	mov	r4, r1
   137b8:	mov	r0, #0
   137bc:	mov	r2, #5
   137c0:	mov	r1, r5
   137c4:	bl	10f04 <dcgettext@plt>
   137c8:	cmp	r0, r5
   137cc:	popne	{r4, r5, fp, pc}
   137d0:	bl	14b4c <__assert_fail@plt+0x3a80>
   137d4:	ldrb	r1, [r0]
   137d8:	and	r1, r1, #223	; 0xdf
   137dc:	cmp	r1, #71	; 0x47
   137e0:	beq	13848 <__assert_fail@plt+0x277c>
   137e4:	cmp	r1, #85	; 0x55
   137e8:	bne	1386c <__assert_fail@plt+0x27a0>
   137ec:	ldrb	r1, [r0, #1]
   137f0:	and	r1, r1, #223	; 0xdf
   137f4:	cmp	r1, #84	; 0x54
   137f8:	bne	1386c <__assert_fail@plt+0x27a0>
   137fc:	ldrb	r1, [r0, #2]
   13800:	and	r1, r1, #223	; 0xdf
   13804:	cmp	r1, #70	; 0x46
   13808:	ldrbeq	r1, [r0, #3]
   1380c:	cmpeq	r1, #45	; 0x2d
   13810:	bne	1386c <__assert_fail@plt+0x27a0>
   13814:	ldrb	r1, [r0, #4]
   13818:	cmp	r1, #56	; 0x38
   1381c:	ldrbeq	r0, [r0, #5]
   13820:	cmpeq	r0, #0
   13824:	bne	1386c <__assert_fail@plt+0x27a0>
   13828:	ldrb	r1, [r5]
   1382c:	movw	r2, #21560	; 0x5438
   13830:	movw	r0, #21564	; 0x543c
   13834:	movt	r2, #1
   13838:	movt	r0, #1
   1383c:	cmp	r1, #96	; 0x60
   13840:	moveq	r0, r2
   13844:	pop	{r4, r5, fp, pc}
   13848:	ldrb	r1, [r0, #1]
   1384c:	and	r1, r1, #223	; 0xdf
   13850:	cmp	r1, #66	; 0x42
   13854:	bne	1386c <__assert_fail@plt+0x27a0>
   13858:	ldrb	r1, [r0, #2]
   1385c:	cmp	r1, #49	; 0x31
   13860:	ldrbeq	r1, [r0, #3]
   13864:	cmpeq	r1, #56	; 0x38
   13868:	beq	13888 <__assert_fail@plt+0x27bc>
   1386c:	movw	r1, #21554	; 0x5432
   13870:	movw	r0, #21558	; 0x5436
   13874:	cmp	r4, #9
   13878:	movt	r1, #1
   1387c:	movt	r0, #1
   13880:	moveq	r0, r1
   13884:	pop	{r4, r5, fp, pc}
   13888:	ldrb	r1, [r0, #4]
   1388c:	cmp	r1, #48	; 0x30
   13890:	ldrbeq	r1, [r0, #5]
   13894:	cmpeq	r1, #51	; 0x33
   13898:	bne	1386c <__assert_fail@plt+0x27a0>
   1389c:	ldrb	r1, [r0, #6]
   138a0:	cmp	r1, #48	; 0x30
   138a4:	ldrbeq	r0, [r0, #7]
   138a8:	cmpeq	r0, #0
   138ac:	bne	1386c <__assert_fail@plt+0x27a0>
   138b0:	ldrb	r1, [r5]
   138b4:	movw	r2, #21568	; 0x5440
   138b8:	movw	r0, #21572	; 0x5444
   138bc:	movt	r2, #1
   138c0:	movt	r0, #1
   138c4:	b	1383c <__assert_fail@plt+0x2770>
   138c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   138cc:	add	fp, sp, #24
   138d0:	sub	sp, sp, #32
   138d4:	ldr	r6, [fp, #12]
   138d8:	ldr	r7, [fp, #8]
   138dc:	mov	r4, r2
   138e0:	mov	r8, r0
   138e4:	cmp	r1, #0
   138e8:	beq	13910 <__assert_fail@plt+0x2844>
   138ec:	movw	r2, #21660	; 0x549c
   138f0:	mov	r5, r1
   138f4:	str	r3, [sp, #4]
   138f8:	str	r4, [sp]
   138fc:	mov	r0, r8
   13900:	mov	r1, #1
   13904:	movt	r2, #1
   13908:	mov	r3, r5
   1390c:	b	13928 <__assert_fail@plt+0x285c>
   13910:	movw	r2, #21672	; 0x54a8
   13914:	str	r3, [sp]
   13918:	mov	r0, r8
   1391c:	mov	r1, #1
   13920:	mov	r3, r4
   13924:	movt	r2, #1
   13928:	bl	11030 <__fprintf_chk@plt>
   1392c:	movw	r1, #21679	; 0x54af
   13930:	mov	r0, #0
   13934:	mov	r2, #5
   13938:	movt	r1, #1
   1393c:	bl	10f04 <dcgettext@plt>
   13940:	movw	r2, #22397	; 0x577d
   13944:	mov	r3, r0
   13948:	movw	r0, #2022	; 0x7e6
   1394c:	mov	r1, #1
   13950:	str	r0, [sp]
   13954:	movt	r2, #1
   13958:	mov	r0, r8
   1395c:	bl	11030 <__fprintf_chk@plt>
   13960:	movw	r4, #21147	; 0x529b
   13964:	mov	r1, r8
   13968:	movt	r4, #1
   1396c:	mov	r0, r4
   13970:	bl	10e68 <fputs_unlocked@plt>
   13974:	movw	r1, #21683	; 0x54b3
   13978:	mov	r0, #0
   1397c:	mov	r2, #5
   13980:	movt	r1, #1
   13984:	bl	10f04 <dcgettext@plt>
   13988:	movw	r3, #21854	; 0x555e
   1398c:	mov	r2, r0
   13990:	mov	r0, r8
   13994:	mov	r1, #1
   13998:	movt	r3, #1
   1399c:	bl	11030 <__fprintf_chk@plt>
   139a0:	mov	r0, r4
   139a4:	mov	r1, r8
   139a8:	bl	10e68 <fputs_unlocked@plt>
   139ac:	cmp	r6, #9
   139b0:	bhi	13a14 <__assert_fail@plt+0x2948>
   139b4:	add	r0, pc, #0
   139b8:	ldr	pc, [r0, r6, lsl #2]
   139bc:	andeq	r3, r1, ip, ror #23
   139c0:	andeq	r3, r1, r4, ror #19
   139c4:	andeq	r3, r1, r0, lsr #20
   139c8:	andeq	r3, r1, r8, asr #20
   139cc:	andeq	r3, r1, r0, ror sl
   139d0:	muleq	r1, r8, sl
   139d4:	andeq	r3, r1, r0, asr #21
   139d8:	strdeq	r3, [r1], -r8
   139dc:	muleq	r1, r8, fp
   139e0:	andeq	r3, r1, r0, asr #22
   139e4:	movw	r1, #21888	; 0x5580
   139e8:	mov	r0, #0
   139ec:	mov	r2, #5
   139f0:	movt	r1, #1
   139f4:	bl	10f04 <dcgettext@plt>
   139f8:	ldr	r3, [r7]
   139fc:	mov	r2, r0
   13a00:	mov	r0, r8
   13a04:	mov	r1, #1
   13a08:	sub	sp, fp, #24
   13a0c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13a10:	b	11030 <__fprintf_chk@plt>
   13a14:	movw	r1, #22207	; 0x56bf
   13a18:	movt	r1, #1
   13a1c:	b	13b48 <__assert_fail@plt+0x2a7c>
   13a20:	movw	r1, #21904	; 0x5590
   13a24:	mov	r0, #0
   13a28:	mov	r2, #5
   13a2c:	movt	r1, #1
   13a30:	bl	10f04 <dcgettext@plt>
   13a34:	mov	r2, r0
   13a38:	ldr	r3, [r7]
   13a3c:	ldr	r0, [r7, #4]
   13a40:	str	r0, [sp]
   13a44:	b	13b34 <__assert_fail@plt+0x2a68>
   13a48:	movw	r1, #21927	; 0x55a7
   13a4c:	mov	r0, #0
   13a50:	mov	r2, #5
   13a54:	movt	r1, #1
   13a58:	bl	10f04 <dcgettext@plt>
   13a5c:	ldr	r3, [r7]
   13a60:	mov	r2, r0
   13a64:	ldmib	r7, {r0, r1}
   13a68:	stm	sp, {r0, r1}
   13a6c:	b	13b34 <__assert_fail@plt+0x2a68>
   13a70:	movw	r1, #21955	; 0x55c3
   13a74:	mov	r0, #0
   13a78:	mov	r2, #5
   13a7c:	movt	r1, #1
   13a80:	bl	10f04 <dcgettext@plt>
   13a84:	ldr	r3, [r7]
   13a88:	mov	r2, r0
   13a8c:	ldmib	r7, {r0, r1, r7}
   13a90:	stm	sp, {r0, r1, r7}
   13a94:	b	13b34 <__assert_fail@plt+0x2a68>
   13a98:	movw	r1, #21987	; 0x55e3
   13a9c:	mov	r0, #0
   13aa0:	mov	r2, #5
   13aa4:	movt	r1, #1
   13aa8:	bl	10f04 <dcgettext@plt>
   13aac:	ldr	r3, [r7]
   13ab0:	mov	r2, r0
   13ab4:	ldmib	r7, {r0, r1, r6, r7}
   13ab8:	stm	sp, {r0, r1, r6, r7}
   13abc:	b	13b34 <__assert_fail@plt+0x2a68>
   13ac0:	movw	r1, #22023	; 0x5607
   13ac4:	mov	r0, #0
   13ac8:	mov	r2, #5
   13acc:	movt	r1, #1
   13ad0:	bl	10f04 <dcgettext@plt>
   13ad4:	ldr	r3, [r7]
   13ad8:	mov	r2, r0
   13adc:	ldmib	r7, {r0, r1, r6}
   13ae0:	ldr	r5, [r7, #16]
   13ae4:	ldr	r7, [r7, #20]
   13ae8:	stm	sp, {r0, r1, r6}
   13aec:	str	r5, [sp, #12]
   13af0:	str	r7, [sp, #16]
   13af4:	b	13b34 <__assert_fail@plt+0x2a68>
   13af8:	movw	r1, #22063	; 0x562f
   13afc:	mov	r0, #0
   13b00:	mov	r2, #5
   13b04:	movt	r1, #1
   13b08:	bl	10f04 <dcgettext@plt>
   13b0c:	ldr	r3, [r7]
   13b10:	mov	r2, r0
   13b14:	ldmib	r7, {r0, r1, r6}
   13b18:	ldr	r5, [r7, #16]
   13b1c:	ldr	r4, [r7, #20]
   13b20:	ldr	r7, [r7, #24]
   13b24:	stm	sp, {r0, r1, r6}
   13b28:	str	r5, [sp, #12]
   13b2c:	str	r4, [sp, #16]
   13b30:	str	r7, [sp, #20]
   13b34:	mov	r0, r8
   13b38:	mov	r1, #1
   13b3c:	b	13be8 <__assert_fail@plt+0x2b1c>
   13b40:	movw	r1, #22155	; 0x568b
   13b44:	movt	r1, #1
   13b48:	mov	r0, #0
   13b4c:	mov	r2, #5
   13b50:	bl	10f04 <dcgettext@plt>
   13b54:	mov	ip, r0
   13b58:	ldr	r3, [r7]
   13b5c:	ldr	r0, [r7, #4]
   13b60:	ldr	r1, [r7, #8]
   13b64:	ldr	r6, [r7, #12]
   13b68:	ldr	r5, [r7, #16]
   13b6c:	ldr	r4, [r7, #20]
   13b70:	ldr	r2, [r7, #24]
   13b74:	ldr	lr, [r7, #28]
   13b78:	ldr	r7, [r7, #32]
   13b7c:	stm	sp, {r0, r1, r6}
   13b80:	str	r5, [sp, #12]
   13b84:	str	r4, [sp, #16]
   13b88:	str	r2, [sp, #20]
   13b8c:	str	lr, [sp, #24]
   13b90:	str	r7, [sp, #28]
   13b94:	b	13bdc <__assert_fail@plt+0x2b10>
   13b98:	movw	r1, #22107	; 0x565b
   13b9c:	mov	r0, #0
   13ba0:	mov	r2, #5
   13ba4:	movt	r1, #1
   13ba8:	bl	10f04 <dcgettext@plt>
   13bac:	mov	ip, r0
   13bb0:	ldr	r3, [r7]
   13bb4:	ldmib	r7, {r0, r1, r6}
   13bb8:	ldr	r5, [r7, #16]
   13bbc:	ldr	r4, [r7, #20]
   13bc0:	ldr	r2, [r7, #24]
   13bc4:	ldr	r7, [r7, #28]
   13bc8:	stm	sp, {r0, r1, r6}
   13bcc:	str	r5, [sp, #12]
   13bd0:	str	r4, [sp, #16]
   13bd4:	str	r2, [sp, #20]
   13bd8:	str	r7, [sp, #24]
   13bdc:	mov	r0, r8
   13be0:	mov	r1, #1
   13be4:	mov	r2, ip
   13be8:	bl	11030 <__fprintf_chk@plt>
   13bec:	sub	sp, fp, #24
   13bf0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13bf4:	push	{r4, sl, fp, lr}
   13bf8:	add	fp, sp, #8
   13bfc:	sub	sp, sp, #8
   13c00:	ldr	ip, [fp, #8]
   13c04:	mov	lr, #0
   13c08:	ldr	r4, [ip, lr, lsl #2]
   13c0c:	add	lr, lr, #1
   13c10:	cmp	r4, #0
   13c14:	bne	13c08 <__assert_fail@plt+0x2b3c>
   13c18:	sub	r4, lr, #1
   13c1c:	str	ip, [sp]
   13c20:	str	r4, [sp, #4]
   13c24:	bl	138c8 <__assert_fail@plt+0x27fc>
   13c28:	sub	sp, fp, #8
   13c2c:	pop	{r4, sl, fp, pc}
   13c30:	push	{r4, r5, fp, lr}
   13c34:	add	fp, sp, #8
   13c38:	sub	sp, sp, #48	; 0x30
   13c3c:	ldr	r4, [fp, #8]
   13c40:	mov	ip, #0
   13c44:	add	lr, sp, #8
   13c48:	ldr	r5, [r4]
   13c4c:	cmp	r5, #0
   13c50:	str	r5, [lr, ip, lsl #2]
   13c54:	beq	13c68 <__assert_fail@plt+0x2b9c>
   13c58:	add	ip, ip, #1
   13c5c:	add	r4, r4, #4
   13c60:	cmp	ip, #10
   13c64:	bcc	13c48 <__assert_fail@plt+0x2b7c>
   13c68:	str	lr, [sp]
   13c6c:	str	ip, [sp, #4]
   13c70:	bl	138c8 <__assert_fail@plt+0x27fc>
   13c74:	sub	sp, fp, #8
   13c78:	pop	{r4, r5, fp, pc}
   13c7c:	push	{fp, lr}
   13c80:	mov	fp, sp
   13c84:	sub	sp, sp, #8
   13c88:	add	ip, fp, #8
   13c8c:	str	ip, [sp, #4]
   13c90:	str	ip, [sp]
   13c94:	bl	13c30 <__assert_fail@plt+0x2b64>
   13c98:	mov	sp, fp
   13c9c:	pop	{fp, pc}
   13ca0:	push	{fp, lr}
   13ca4:	mov	fp, sp
   13ca8:	movw	r0, #24916	; 0x6154
   13cac:	movt	r0, #2
   13cb0:	ldr	r1, [r0]
   13cb4:	movw	r0, #21147	; 0x529b
   13cb8:	movt	r0, #1
   13cbc:	bl	10e68 <fputs_unlocked@plt>
   13cc0:	movw	r1, #22267	; 0x56fb
   13cc4:	mov	r0, #0
   13cc8:	mov	r2, #5
   13ccc:	movt	r1, #1
   13cd0:	bl	10f04 <dcgettext@plt>
   13cd4:	movw	r2, #22287	; 0x570f
   13cd8:	mov	r1, r0
   13cdc:	mov	r0, #1
   13ce0:	movt	r2, #1
   13ce4:	bl	1100c <__printf_chk@plt>
   13ce8:	movw	r1, #22309	; 0x5725
   13cec:	mov	r0, #0
   13cf0:	mov	r2, #5
   13cf4:	movt	r1, #1
   13cf8:	bl	10f04 <dcgettext@plt>
   13cfc:	movw	r2, #20677	; 0x50c5
   13d00:	movw	r3, #20956	; 0x51dc
   13d04:	mov	r1, r0
   13d08:	mov	r0, #1
   13d0c:	movt	r2, #1
   13d10:	movt	r3, #1
   13d14:	bl	1100c <__printf_chk@plt>
   13d18:	movw	r1, #22329	; 0x5739
   13d1c:	mov	r0, #0
   13d20:	mov	r2, #5
   13d24:	movt	r1, #1
   13d28:	bl	10f04 <dcgettext@plt>
   13d2c:	movw	r2, #22368	; 0x5760
   13d30:	mov	r1, r0
   13d34:	mov	r0, #1
   13d38:	movt	r2, #1
   13d3c:	pop	{fp, lr}
   13d40:	b	1100c <__printf_chk@plt>
   13d44:	b	13d48 <__assert_fail@plt+0x2c7c>
   13d48:	push	{r4, r5, r6, sl, fp, lr}
   13d4c:	add	fp, sp, #16
   13d50:	mov	r4, r2
   13d54:	mov	r5, r1
   13d58:	mov	r6, r0
   13d5c:	bl	14be4 <__assert_fail@plt+0x3b18>
   13d60:	cmp	r0, #0
   13d64:	popne	{r4, r5, r6, sl, fp, pc}
   13d68:	cmp	r6, #0
   13d6c:	beq	13d80 <__assert_fail@plt+0x2cb4>
   13d70:	cmp	r5, #0
   13d74:	cmpne	r4, #0
   13d78:	bne	13d80 <__assert_fail@plt+0x2cb4>
   13d7c:	pop	{r4, r5, r6, sl, fp, pc}
   13d80:	bl	141d4 <__assert_fail@plt+0x3108>
   13d84:	push	{fp, lr}
   13d88:	mov	fp, sp
   13d8c:	bl	14a24 <__assert_fail@plt+0x3958>
   13d90:	cmp	r0, #0
   13d94:	popne	{fp, pc}
   13d98:	bl	141d4 <__assert_fail@plt+0x3108>
   13d9c:	push	{fp, lr}
   13da0:	mov	fp, sp
   13da4:	bl	14a24 <__assert_fail@plt+0x3958>
   13da8:	cmp	r0, #0
   13dac:	popne	{fp, pc}
   13db0:	bl	141d4 <__assert_fail@plt+0x3108>
   13db4:	push	{fp, lr}
   13db8:	mov	fp, sp
   13dbc:	bl	14a24 <__assert_fail@plt+0x3958>
   13dc0:	cmp	r0, #0
   13dc4:	popne	{fp, pc}
   13dc8:	bl	141d4 <__assert_fail@plt+0x3108>
   13dcc:	push	{r4, r5, fp, lr}
   13dd0:	add	fp, sp, #8
   13dd4:	mov	r4, r1
   13dd8:	mov	r5, r0
   13ddc:	bl	14a54 <__assert_fail@plt+0x3988>
   13de0:	cmp	r0, #0
   13de4:	popne	{r4, r5, fp, pc}
   13de8:	cmp	r5, #0
   13dec:	beq	13dfc <__assert_fail@plt+0x2d30>
   13df0:	cmp	r4, #0
   13df4:	bne	13dfc <__assert_fail@plt+0x2d30>
   13df8:	pop	{r4, r5, fp, pc}
   13dfc:	bl	141d4 <__assert_fail@plt+0x3108>
   13e00:	push	{fp, lr}
   13e04:	mov	fp, sp
   13e08:	cmp	r1, #0
   13e0c:	orreq	r1, r1, #1
   13e10:	bl	14a54 <__assert_fail@plt+0x3988>
   13e14:	cmp	r0, #0
   13e18:	popne	{fp, pc}
   13e1c:	bl	141d4 <__assert_fail@plt+0x3108>
   13e20:	push	{fp, lr}
   13e24:	mov	fp, sp
   13e28:	clz	r3, r2
   13e2c:	lsr	ip, r3, #5
   13e30:	clz	r3, r1
   13e34:	lsr	r3, r3, #5
   13e38:	orrs	r3, r3, ip
   13e3c:	movwne	r1, #1
   13e40:	movwne	r2, #1
   13e44:	bl	14be4 <__assert_fail@plt+0x3b18>
   13e48:	cmp	r0, #0
   13e4c:	popne	{fp, pc}
   13e50:	bl	141d4 <__assert_fail@plt+0x3108>
   13e54:	push	{fp, lr}
   13e58:	mov	fp, sp
   13e5c:	mov	r2, r1
   13e60:	mov	r1, r0
   13e64:	mov	r0, #0
   13e68:	bl	14be4 <__assert_fail@plt+0x3b18>
   13e6c:	cmp	r0, #0
   13e70:	popne	{fp, pc}
   13e74:	bl	141d4 <__assert_fail@plt+0x3108>
   13e78:	mov	r2, r1
   13e7c:	mov	r1, r0
   13e80:	mov	r0, #0
   13e84:	b	13e20 <__assert_fail@plt+0x2d54>
   13e88:	mov	r2, #1
   13e8c:	b	13e90 <__assert_fail@plt+0x2dc4>
   13e90:	push	{r4, r5, fp, lr}
   13e94:	add	fp, sp, #8
   13e98:	ldr	r5, [r1]
   13e9c:	mov	r4, r1
   13ea0:	cmp	r0, #0
   13ea4:	beq	13ebc <__assert_fail@plt+0x2df0>
   13ea8:	mov	r1, #1
   13eac:	add	r1, r1, r5, lsr #1
   13eb0:	adds	r5, r5, r1
   13eb4:	bcc	13ed4 <__assert_fail@plt+0x2e08>
   13eb8:	bl	141d4 <__assert_fail@plt+0x3108>
   13ebc:	cmp	r5, #0
   13ec0:	bne	13ed4 <__assert_fail@plt+0x2e08>
   13ec4:	mov	r1, #64	; 0x40
   13ec8:	cmp	r2, #64	; 0x40
   13ecc:	udiv	r5, r1, r2
   13ed0:	addhi	r5, r5, #1
   13ed4:	mov	r1, r5
   13ed8:	bl	13d48 <__assert_fail@plt+0x2c7c>
   13edc:	str	r5, [r4]
   13ee0:	pop	{r4, r5, fp, pc}
   13ee4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13ee8:	add	fp, sp, #24
   13eec:	ldr	r6, [r1]
   13ef0:	mov	r8, r1
   13ef4:	ldr	r4, [fp, #8]
   13ef8:	add	r1, r6, r6, asr #1
   13efc:	cmp	r1, r6
   13f00:	mvnvs	r1, #-2147483648	; 0x80000000
   13f04:	cmp	r1, r3
   13f08:	mov	r5, r1
   13f0c:	movgt	r5, r3
   13f10:	cmn	r3, #1
   13f14:	movle	r5, r1
   13f18:	cmn	r4, #1
   13f1c:	ble	13f3c <__assert_fail@plt+0x2e70>
   13f20:	cmp	r4, #0
   13f24:	beq	13f90 <__assert_fail@plt+0x2ec4>
   13f28:	cmn	r5, #1
   13f2c:	ble	13f64 <__assert_fail@plt+0x2e98>
   13f30:	mvn	r7, #-2147483648	; 0x80000000
   13f34:	udiv	r1, r7, r4
   13f38:	b	13f58 <__assert_fail@plt+0x2e8c>
   13f3c:	cmn	r5, #1
   13f40:	ble	13f80 <__assert_fail@plt+0x2eb4>
   13f44:	cmn	r4, #1
   13f48:	beq	13f90 <__assert_fail@plt+0x2ec4>
   13f4c:	mov	r1, #-2147483648	; 0x80000000
   13f50:	mvn	r7, #-2147483648	; 0x80000000
   13f54:	sdiv	r1, r1, r4
   13f58:	cmp	r1, r5
   13f5c:	bge	13f90 <__assert_fail@plt+0x2ec4>
   13f60:	b	13fa0 <__assert_fail@plt+0x2ed4>
   13f64:	beq	13f90 <__assert_fail@plt+0x2ec4>
   13f68:	mov	r1, #-2147483648	; 0x80000000
   13f6c:	mvn	r7, #-2147483648	; 0x80000000
   13f70:	sdiv	r1, r1, r5
   13f74:	cmp	r1, r4
   13f78:	bge	13f90 <__assert_fail@plt+0x2ec4>
   13f7c:	b	13fa0 <__assert_fail@plt+0x2ed4>
   13f80:	mvn	r7, #-2147483648	; 0x80000000
   13f84:	sdiv	r1, r7, r4
   13f88:	cmp	r5, r1
   13f8c:	blt	13fa0 <__assert_fail@plt+0x2ed4>
   13f90:	mul	r1, r5, r4
   13f94:	mov	r7, #64	; 0x40
   13f98:	cmp	r1, #63	; 0x3f
   13f9c:	bgt	13fa8 <__assert_fail@plt+0x2edc>
   13fa0:	sdiv	r5, r7, r4
   13fa4:	mul	r1, r5, r4
   13fa8:	cmp	r0, #0
   13fac:	moveq	r7, #0
   13fb0:	streq	r7, [r8]
   13fb4:	sub	r7, r5, r6
   13fb8:	cmp	r7, r2
   13fbc:	bge	14060 <__assert_fail@plt+0x2f94>
   13fc0:	add	r5, r6, r2
   13fc4:	mov	r2, #0
   13fc8:	mov	r1, #0
   13fcc:	cmp	r5, r3
   13fd0:	movwgt	r2, #1
   13fd4:	cmn	r3, #1
   13fd8:	movwgt	r1, #1
   13fdc:	cmp	r5, r6
   13fe0:	bvs	14048 <__assert_fail@plt+0x2f7c>
   13fe4:	ands	r1, r1, r2
   13fe8:	bne	14048 <__assert_fail@plt+0x2f7c>
   13fec:	cmn	r4, #1
   13ff0:	ble	14010 <__assert_fail@plt+0x2f44>
   13ff4:	cmp	r4, #0
   13ff8:	beq	1405c <__assert_fail@plt+0x2f90>
   13ffc:	cmn	r5, #1
   14000:	ble	14034 <__assert_fail@plt+0x2f68>
   14004:	mvn	r1, #-2147483648	; 0x80000000
   14008:	udiv	r1, r1, r4
   1400c:	b	14028 <__assert_fail@plt+0x2f5c>
   14010:	cmn	r5, #1
   14014:	ble	1404c <__assert_fail@plt+0x2f80>
   14018:	cmn	r4, #1
   1401c:	beq	1405c <__assert_fail@plt+0x2f90>
   14020:	mov	r1, #-2147483648	; 0x80000000
   14024:	sdiv	r1, r1, r4
   14028:	cmp	r1, r5
   1402c:	bge	1405c <__assert_fail@plt+0x2f90>
   14030:	b	14048 <__assert_fail@plt+0x2f7c>
   14034:	beq	1405c <__assert_fail@plt+0x2f90>
   14038:	mov	r1, #-2147483648	; 0x80000000
   1403c:	sdiv	r1, r1, r5
   14040:	cmp	r1, r4
   14044:	bge	1405c <__assert_fail@plt+0x2f90>
   14048:	bl	141d4 <__assert_fail@plt+0x3108>
   1404c:	mvn	r1, #-2147483648	; 0x80000000
   14050:	sdiv	r1, r1, r4
   14054:	cmp	r5, r1
   14058:	blt	14048 <__assert_fail@plt+0x2f7c>
   1405c:	mul	r1, r5, r4
   14060:	bl	13dcc <__assert_fail@plt+0x2d00>
   14064:	str	r5, [r8]
   14068:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1406c:	push	{fp, lr}
   14070:	mov	fp, sp
   14074:	mov	r1, #1
   14078:	bl	149d0 <__assert_fail@plt+0x3904>
   1407c:	cmp	r0, #0
   14080:	popne	{fp, pc}
   14084:	bl	141d4 <__assert_fail@plt+0x3108>
   14088:	push	{fp, lr}
   1408c:	mov	fp, sp
   14090:	bl	149d0 <__assert_fail@plt+0x3904>
   14094:	cmp	r0, #0
   14098:	popne	{fp, pc}
   1409c:	bl	141d4 <__assert_fail@plt+0x3108>
   140a0:	push	{fp, lr}
   140a4:	mov	fp, sp
   140a8:	mov	r1, #1
   140ac:	bl	149d0 <__assert_fail@plt+0x3904>
   140b0:	cmp	r0, #0
   140b4:	popne	{fp, pc}
   140b8:	bl	141d4 <__assert_fail@plt+0x3108>
   140bc:	push	{fp, lr}
   140c0:	mov	fp, sp
   140c4:	bl	149d0 <__assert_fail@plt+0x3904>
   140c8:	cmp	r0, #0
   140cc:	popne	{fp, pc}
   140d0:	bl	141d4 <__assert_fail@plt+0x3108>
   140d4:	push	{r4, r5, r6, sl, fp, lr}
   140d8:	add	fp, sp, #16
   140dc:	mov	r5, r0
   140e0:	mov	r0, r1
   140e4:	mov	r4, r1
   140e8:	bl	14a24 <__assert_fail@plt+0x3958>
   140ec:	cmp	r0, #0
   140f0:	beq	1410c <__assert_fail@plt+0x3040>
   140f4:	mov	r1, r5
   140f8:	mov	r2, r4
   140fc:	mov	r6, r0
   14100:	bl	10ec8 <memcpy@plt>
   14104:	mov	r0, r6
   14108:	pop	{r4, r5, r6, sl, fp, pc}
   1410c:	bl	141d4 <__assert_fail@plt+0x3108>
   14110:	push	{r4, r5, r6, sl, fp, lr}
   14114:	add	fp, sp, #16
   14118:	mov	r5, r0
   1411c:	mov	r0, r1
   14120:	mov	r4, r1
   14124:	bl	14a24 <__assert_fail@plt+0x3958>
   14128:	cmp	r0, #0
   1412c:	beq	14148 <__assert_fail@plt+0x307c>
   14130:	mov	r1, r5
   14134:	mov	r2, r4
   14138:	mov	r6, r0
   1413c:	bl	10ec8 <memcpy@plt>
   14140:	mov	r0, r6
   14144:	pop	{r4, r5, r6, sl, fp, pc}
   14148:	bl	141d4 <__assert_fail@plt+0x3108>
   1414c:	push	{r4, r5, r6, sl, fp, lr}
   14150:	add	fp, sp, #16
   14154:	mov	r5, r0
   14158:	add	r0, r1, #1
   1415c:	mov	r4, r1
   14160:	bl	14a24 <__assert_fail@plt+0x3958>
   14164:	cmp	r0, #0
   14168:	beq	14190 <__assert_fail@plt+0x30c4>
   1416c:	mov	r6, r0
   14170:	mov	r0, #0
   14174:	mov	r1, r5
   14178:	mov	r2, r4
   1417c:	strb	r0, [r6, r4]
   14180:	mov	r0, r6
   14184:	bl	10ec8 <memcpy@plt>
   14188:	mov	r0, r6
   1418c:	pop	{r4, r5, r6, sl, fp, pc}
   14190:	bl	141d4 <__assert_fail@plt+0x3108>
   14194:	push	{r4, r5, r6, sl, fp, lr}
   14198:	add	fp, sp, #16
   1419c:	mov	r4, r0
   141a0:	bl	10fd0 <strlen@plt>
   141a4:	add	r5, r0, #1
   141a8:	mov	r0, r5
   141ac:	bl	14a24 <__assert_fail@plt+0x3958>
   141b0:	cmp	r0, #0
   141b4:	beq	141d0 <__assert_fail@plt+0x3104>
   141b8:	mov	r1, r4
   141bc:	mov	r2, r5
   141c0:	mov	r6, r0
   141c4:	bl	10ec8 <memcpy@plt>
   141c8:	mov	r0, r6
   141cc:	pop	{r4, r5, r6, sl, fp, pc}
   141d0:	bl	141d4 <__assert_fail@plt+0x3108>
   141d4:	push	{fp, lr}
   141d8:	mov	fp, sp
   141dc:	movw	r0, #24820	; 0x60f4
   141e0:	movw	r1, #22444	; 0x57ac
   141e4:	mov	r2, #5
   141e8:	movt	r0, #2
   141ec:	movt	r1, #1
   141f0:	ldr	r4, [r0]
   141f4:	mov	r0, #0
   141f8:	bl	10f04 <dcgettext@plt>
   141fc:	movw	r2, #21407	; 0x539f
   14200:	mov	r3, r0
   14204:	mov	r0, r4
   14208:	mov	r1, #0
   1420c:	movt	r2, #1
   14210:	bl	10f70 <error@plt>
   14214:	bl	110b4 <abort@plt>
   14218:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1421c:	add	fp, sp, #24
   14220:	sub	sp, sp, #16
   14224:	mov	r8, r0
   14228:	ldr	r0, [fp, #16]
   1422c:	mov	r5, r3
   14230:	mov	r6, r2
   14234:	mov	r2, r1
   14238:	add	r3, sp, #8
   1423c:	mov	r1, #0
   14240:	str	r0, [sp]
   14244:	mov	r0, r8
   14248:	bl	14318 <__assert_fail@plt+0x324c>
   1424c:	cmp	r0, #0
   14250:	bne	142e4 <__assert_fail@plt+0x3218>
   14254:	ldr	r4, [sp, #8]
   14258:	ldr	r7, [sp, #12]
   1425c:	subs	r0, r4, r6
   14260:	sbcs	r0, r7, r5
   14264:	bcc	14288 <__assert_fail@plt+0x31bc>
   14268:	ldr	r1, [fp, #8]
   1426c:	ldr	r0, [fp, #12]
   14270:	subs	r1, r1, r4
   14274:	sbcs	r0, r0, r7
   14278:	movcs	r0, r4
   1427c:	movcs	r1, r7
   14280:	subcs	sp, fp, #24
   14284:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   14288:	bl	10fe8 <__errno_location@plt>
   1428c:	subs	r1, r4, #1073741824	; 0x40000000
   14290:	sbcs	r1, r7, #0
   14294:	bcc	142a0 <__assert_fail@plt+0x31d4>
   14298:	mov	r1, #75	; 0x4b
   1429c:	b	142a4 <__assert_fail@plt+0x31d8>
   142a0:	mov	r1, #34	; 0x22
   142a4:	str	r1, [r0]
   142a8:	ldr	r6, [r0]
   142ac:	ldr	r4, [fp, #24]
   142b0:	ldr	r5, [fp, #20]
   142b4:	mov	r0, r8
   142b8:	bl	13790 <__assert_fail@plt+0x26c4>
   142bc:	subs	r1, r6, #22
   142c0:	movw	r2, #21403	; 0x539b
   142c4:	str	r0, [sp]
   142c8:	mov	r3, r5
   142cc:	movne	r1, r6
   142d0:	cmp	r4, #0
   142d4:	movt	r2, #1
   142d8:	movweq	r4, #1
   142dc:	mov	r0, r4
   142e0:	bl	10f70 <error@plt>
   142e4:	cmp	r0, #1
   142e8:	beq	14300 <__assert_fail@plt+0x3234>
   142ec:	cmp	r0, #3
   142f0:	bne	14308 <__assert_fail@plt+0x323c>
   142f4:	bl	10fe8 <__errno_location@plt>
   142f8:	mov	r1, #0
   142fc:	b	142a4 <__assert_fail@plt+0x31d8>
   14300:	bl	10fe8 <__errno_location@plt>
   14304:	b	14298 <__assert_fail@plt+0x31cc>
   14308:	bl	10fe8 <__errno_location@plt>
   1430c:	b	142a8 <__assert_fail@plt+0x31dc>
   14310:	mov	r1, #10
   14314:	b	14218 <__assert_fail@plt+0x314c>
   14318:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1431c:	add	fp, sp, #28
   14320:	sub	sp, sp, #20
   14324:	cmp	r2, #37	; 0x25
   14328:	bcs	149b0 <__assert_fail@plt+0x38e4>
   1432c:	mov	r8, r3
   14330:	mov	r5, r2
   14334:	mov	r6, r1
   14338:	mov	r4, r0
   1433c:	bl	10fe8 <__errno_location@plt>
   14340:	mov	r7, r0
   14344:	mov	r0, #0
   14348:	str	r0, [r7]
   1434c:	bl	10fb8 <__ctype_b_loc@plt>
   14350:	ldr	r1, [r0]
   14354:	mov	r2, r4
   14358:	ldrb	r0, [r2], #1
   1435c:	add	r3, r1, r0, lsl #1
   14360:	ldrb	r3, [r3, #1]
   14364:	tst	r3, #32
   14368:	bne	14358 <__assert_fail@plt+0x328c>
   1436c:	add	sl, sp, #16
   14370:	cmp	r6, #0
   14374:	movne	sl, r6
   14378:	mov	r6, #4
   1437c:	cmp	r0, #45	; 0x2d
   14380:	beq	149a4 <__assert_fail@plt+0x38d8>
   14384:	mov	r0, r4
   14388:	mov	r1, sl
   1438c:	mov	r2, r5
   14390:	str	r8, [sp, #12]
   14394:	bl	11024 <strtoumax@plt>
   14398:	ldr	r5, [sl]
   1439c:	cmp	r5, r4
   143a0:	beq	143c8 <__assert_fail@plt+0x32fc>
   143a4:	mov	r8, r0
   143a8:	ldr	r0, [r7]
   143ac:	mov	r9, r1
   143b0:	cmp	r0, #0
   143b4:	beq	143f8 <__assert_fail@plt+0x332c>
   143b8:	cmp	r0, #34	; 0x22
   143bc:	bne	149a4 <__assert_fail@plt+0x38d8>
   143c0:	mov	r6, #1
   143c4:	b	143fc <__assert_fail@plt+0x3330>
   143c8:	ldr	r0, [fp, #8]
   143cc:	cmp	r0, #0
   143d0:	ldrbne	r1, [r4]
   143d4:	cmpne	r1, #0
   143d8:	beq	149a4 <__assert_fail@plt+0x38d8>
   143dc:	bl	10fdc <strchr@plt>
   143e0:	cmp	r0, #0
   143e4:	beq	149a4 <__assert_fail@plt+0x38d8>
   143e8:	mov	r6, #0
   143ec:	mov	r8, #1
   143f0:	mov	r9, #0
   143f4:	b	14408 <__assert_fail@plt+0x333c>
   143f8:	mov	r6, r0
   143fc:	ldr	r0, [fp, #8]
   14400:	cmp	r0, #0
   14404:	beq	1499c <__assert_fail@plt+0x38d0>
   14408:	ldrb	r7, [r5]
   1440c:	cmp	r7, #0
   14410:	beq	1499c <__assert_fail@plt+0x38d0>
   14414:	ldr	r0, [fp, #8]
   14418:	mov	r1, r7
   1441c:	bl	10fdc <strchr@plt>
   14420:	cmp	r0, #0
   14424:	beq	1452c <__assert_fail@plt+0x3460>
   14428:	sub	r0, r7, #69	; 0x45
   1442c:	mov	r1, #1
   14430:	mov	r3, #0
   14434:	mov	r4, #1024	; 0x400
   14438:	cmp	r0, #21
   1443c:	str	r1, [sp, #8]
   14440:	bhi	14458 <__assert_fail@plt+0x338c>
   14444:	movw	r2, #35141	; 0x8945
   14448:	mov	r1, #1
   1444c:	movt	r2, #48	; 0x30
   14450:	tst	r2, r1, lsl r0
   14454:	bne	14474 <__assert_fail@plt+0x33a8>
   14458:	sub	r0, r7, #103	; 0x67
   1445c:	cmp	r0, #13
   14460:	bhi	144a8 <__assert_fail@plt+0x33dc>
   14464:	mov	r1, #1
   14468:	movw	r2, #8273	; 0x2051
   1446c:	tst	r2, r1, lsl r0
   14470:	beq	144a8 <__assert_fail@plt+0x33dc>
   14474:	ldr	r0, [fp, #8]
   14478:	mov	r1, #48	; 0x30
   1447c:	bl	10fdc <strchr@plt>
   14480:	cmp	r0, #0
   14484:	beq	144a4 <__assert_fail@plt+0x33d8>
   14488:	ldrb	r0, [r5, #1]
   1448c:	cmp	r0, #66	; 0x42
   14490:	cmpne	r0, #68	; 0x44
   14494:	bne	145bc <__assert_fail@plt+0x34f0>
   14498:	mov	r4, #1000	; 0x3e8
   1449c:	mov	r0, #2
   144a0:	str	r0, [sp, #8]
   144a4:	mov	r3, #0
   144a8:	cmp	r7, #89	; 0x59
   144ac:	stm	sp, {r5, r6}
   144b0:	bgt	14538 <__assert_fail@plt+0x346c>
   144b4:	sub	r0, r7, #66	; 0x42
   144b8:	cmp	r0, #14
   144bc:	bhi	145e0 <__assert_fail@plt+0x3514>
   144c0:	add	r1, pc, #0
   144c4:	ldr	pc, [r1, r0, lsl #2]
   144c8:	andeq	r4, r1, r4, lsl #10
   144cc:	muleq	r1, r0, r8
   144d0:	muleq	r1, r0, r8
   144d4:	andeq	r4, r1, r4, lsr #17
   144d8:	muleq	r1, r0, r8
   144dc:	muleq	r1, r4, r6
   144e0:	muleq	r1, r0, r8
   144e4:	muleq	r1, r0, r8
   144e8:	muleq	r1, r0, r8
   144ec:	andeq	r4, r1, r0, lsl #14
   144f0:	muleq	r1, r0, r8
   144f4:	andeq	r4, r1, r4, asr #14
   144f8:	muleq	r1, r0, r8
   144fc:	muleq	r1, r0, r8
   14500:	andeq	r4, r1, r0, lsl r9
   14504:	mov	r1, #0
   14508:	lsl	r3, r9, #10
   1450c:	lsl	r0, r8, #10
   14510:	lsr	r2, r9, #22
   14514:	cmp	r1, r9, lsr #22
   14518:	orr	r3, r3, r8, lsr #22
   1451c:	mvnne	r0, #0
   14520:	movwne	r2, #1
   14524:	cmp	r1, r9, lsr #22
   14528:	b	145ac <__assert_fail@plt+0x34e0>
   1452c:	ldr	r0, [sp, #12]
   14530:	orr	r6, r6, #2
   14534:	b	149a0 <__assert_fail@plt+0x38d4>
   14538:	cmp	r7, #115	; 0x73
   1453c:	bgt	1465c <__assert_fail@plt+0x3590>
   14540:	sub	r0, r7, #98	; 0x62
   14544:	cmp	r0, #11
   14548:	bhi	1481c <__assert_fail@plt+0x3750>
   1454c:	add	r1, pc, #4
   14550:	mov	r2, #0
   14554:	ldr	pc, [r1, r0, lsl #2]
   14558:	andeq	r4, r1, r8, lsl #11
   1455c:	andeq	r4, r1, r8, ror r9
   14560:	muleq	r1, r0, r8
   14564:	muleq	r1, r0, r8
   14568:	muleq	r1, r0, r8
   1456c:	muleq	r1, r4, r6
   14570:	muleq	r1, r0, r8
   14574:	muleq	r1, r0, r8
   14578:	muleq	r1, r0, r8
   1457c:	andeq	r4, r1, r0, lsl #14
   14580:	muleq	r1, r0, r8
   14584:	andeq	r4, r1, r4, asr #14
   14588:	mov	r1, #0
   1458c:	lsl	r3, r9, #9
   14590:	lsl	r0, r8, #9
   14594:	lsr	r2, r9, #23
   14598:	cmp	r1, r9, lsr #23
   1459c:	orr	r3, r3, r8, lsr #23
   145a0:	mvnne	r0, #0
   145a4:	movwne	r2, #1
   145a8:	cmp	r1, r9, lsr #23
   145ac:	mvnne	r3, #0
   145b0:	mov	r8, r0
   145b4:	mov	r9, r3
   145b8:	b	14978 <__assert_fail@plt+0x38ac>
   145bc:	cmp	r0, #105	; 0x69
   145c0:	mov	r3, #0
   145c4:	bne	144a8 <__assert_fail@plt+0x33dc>
   145c8:	ldrb	r0, [r5, #2]
   145cc:	mov	r1, #1
   145d0:	cmp	r0, #66	; 0x42
   145d4:	movweq	r1, #3
   145d8:	str	r1, [sp, #8]
   145dc:	b	144a8 <__assert_fail@plt+0x33dc>
   145e0:	cmp	r7, #84	; 0x54
   145e4:	beq	147b0 <__assert_fail@plt+0x36e4>
   145e8:	cmp	r7, #89	; 0x59
   145ec:	bne	14890 <__assert_fail@plt+0x37c4>
   145f0:	mvn	r0, #0
   145f4:	mvn	r1, #0
   145f8:	mov	r2, r4
   145fc:	mov	r5, r3
   14600:	bl	14d18 <__assert_fail@plt+0x3c4c>
   14604:	mov	ip, r5
   14608:	mvn	lr, #0
   1460c:	mov	r2, #0
   14610:	mvn	r3, #7
   14614:	mov	r5, r8
   14618:	mov	r7, r9
   1461c:	umull	r8, r6, r5, r4
   14620:	mvn	r9, #0
   14624:	mla	r6, r5, ip, r6
   14628:	subs	r5, r0, r5
   1462c:	sbcs	r5, r1, r7
   14630:	mov	r5, #0
   14634:	movwcc	r5, #1
   14638:	cmp	r5, #0
   1463c:	mlaeq	r9, r7, r4, r6
   14640:	movne	r8, lr
   14644:	orrne	r2, r2, #1
   14648:	adds	r3, r3, #1
   1464c:	mov	r5, r8
   14650:	mov	r7, r9
   14654:	bne	1461c <__assert_fail@plt+0x3550>
   14658:	b	14978 <__assert_fail@plt+0x38ac>
   1465c:	cmp	r7, #116	; 0x74
   14660:	beq	147b0 <__assert_fail@plt+0x36e4>
   14664:	cmp	r7, #119	; 0x77
   14668:	bne	14890 <__assert_fail@plt+0x37c4>
   1466c:	lsl	r1, r9, #1
   14670:	lsl	r0, r8, #1
   14674:	cmp	r9, #0
   14678:	lsr	r2, r9, #31
   1467c:	orr	r1, r1, r8, lsr #31
   14680:	mvnlt	r0, #0
   14684:	mvnlt	r1, #0
   14688:	mov	r8, r0
   1468c:	mov	r9, r1
   14690:	b	14978 <__assert_fail@plt+0x38ac>
   14694:	mvn	r0, #0
   14698:	mvn	r1, #0
   1469c:	mov	r2, r4
   146a0:	mov	r5, r3
   146a4:	bl	14d18 <__assert_fail@plt+0x3c4c>
   146a8:	mov	ip, r5
   146ac:	mvn	lr, #0
   146b0:	mov	r2, #0
   146b4:	mvn	r3, #2
   146b8:	mov	r6, r8
   146bc:	mov	r5, r9
   146c0:	umull	r8, r7, r6, r4
   146c4:	mvn	r9, #0
   146c8:	mla	r7, r6, ip, r7
   146cc:	subs	r6, r0, r6
   146d0:	sbcs	r6, r1, r5
   146d4:	mov	r6, #0
   146d8:	movwcc	r6, #1
   146dc:	cmp	r6, #0
   146e0:	mlaeq	r9, r5, r4, r7
   146e4:	movne	r8, lr
   146e8:	orrne	r2, r2, #1
   146ec:	adds	r3, r3, #1
   146f0:	mov	r6, r8
   146f4:	mov	r5, r9
   146f8:	bne	146c0 <__assert_fail@plt+0x35f4>
   146fc:	b	14978 <__assert_fail@plt+0x38ac>
   14700:	mvn	r0, #0
   14704:	mvn	r1, #0
   14708:	mov	r2, r4
   1470c:	mov	r5, r3
   14710:	bl	14d18 <__assert_fail@plt+0x3c4c>
   14714:	subs	r0, r0, r8
   14718:	mov	r2, #0
   1471c:	sbcs	r0, r1, r9
   14720:	movwcc	r2, #1
   14724:	umull	r0, r1, r8, r4
   14728:	mla	r1, r8, r5, r1
   1472c:	cmp	r2, #0
   14730:	mla	r9, r9, r4, r1
   14734:	mvnne	r0, #0
   14738:	mvnne	r9, #0
   1473c:	mov	r8, r0
   14740:	b	14978 <__assert_fail@plt+0x38ac>
   14744:	mvn	r0, #0
   14748:	mvn	r1, #0
   1474c:	mov	r2, r4
   14750:	mov	r5, r3
   14754:	bl	14d18 <__assert_fail@plt+0x3c4c>
   14758:	mov	ip, r5
   1475c:	mvn	lr, #0
   14760:	mov	r2, #0
   14764:	mvn	r3, #1
   14768:	mov	r6, r8
   1476c:	mov	r5, r9
   14770:	umull	r8, r7, r6, r4
   14774:	mvn	r9, #0
   14778:	mla	r7, r6, ip, r7
   1477c:	subs	r6, r0, r6
   14780:	sbcs	r6, r1, r5
   14784:	mov	r6, #0
   14788:	movwcc	r6, #1
   1478c:	cmp	r6, #0
   14790:	mlaeq	r9, r5, r4, r7
   14794:	movne	r8, lr
   14798:	orrne	r2, r2, #1
   1479c:	adds	r3, r3, #1
   147a0:	mov	r6, r8
   147a4:	mov	r5, r9
   147a8:	bne	14770 <__assert_fail@plt+0x36a4>
   147ac:	b	14978 <__assert_fail@plt+0x38ac>
   147b0:	mvn	r0, #0
   147b4:	mvn	r1, #0
   147b8:	mov	r2, r4
   147bc:	mov	r5, r3
   147c0:	bl	14d18 <__assert_fail@plt+0x3c4c>
   147c4:	mov	ip, r5
   147c8:	mvn	lr, #0
   147cc:	mov	r2, #0
   147d0:	mvn	r3, #3
   147d4:	mov	r6, r8
   147d8:	mov	r5, r9
   147dc:	umull	r8, r7, r6, r4
   147e0:	mvn	r9, #0
   147e4:	mla	r7, r6, ip, r7
   147e8:	subs	r6, r0, r6
   147ec:	sbcs	r6, r1, r5
   147f0:	mov	r6, #0
   147f4:	movwcc	r6, #1
   147f8:	cmp	r6, #0
   147fc:	mlaeq	r9, r5, r4, r7
   14800:	movne	r8, lr
   14804:	orrne	r2, r2, #1
   14808:	adds	r3, r3, #1
   1480c:	mov	r6, r8
   14810:	mov	r5, r9
   14814:	bne	147dc <__assert_fail@plt+0x3710>
   14818:	b	14978 <__assert_fail@plt+0x38ac>
   1481c:	cmp	r7, #90	; 0x5a
   14820:	bne	14890 <__assert_fail@plt+0x37c4>
   14824:	mvn	r0, #0
   14828:	mvn	r1, #0
   1482c:	mov	r2, r4
   14830:	mov	r5, r3
   14834:	bl	14d18 <__assert_fail@plt+0x3c4c>
   14838:	mov	ip, r5
   1483c:	mvn	lr, #0
   14840:	mov	r2, #0
   14844:	mvn	r3, #6
   14848:	mov	r5, r8
   1484c:	mov	r7, r9
   14850:	umull	r8, r6, r5, r4
   14854:	mvn	r9, #0
   14858:	mla	r6, r5, ip, r6
   1485c:	subs	r5, r0, r5
   14860:	sbcs	r5, r1, r7
   14864:	mov	r5, #0
   14868:	movwcc	r5, #1
   1486c:	cmp	r5, #0
   14870:	mlaeq	r9, r7, r4, r6
   14874:	movne	r8, lr
   14878:	orrne	r2, r2, #1
   1487c:	adds	r3, r3, #1
   14880:	mov	r5, r8
   14884:	mov	r7, r9
   14888:	bne	14850 <__assert_fail@plt+0x3784>
   1488c:	b	14978 <__assert_fail@plt+0x38ac>
   14890:	ldr	r0, [sp, #12]
   14894:	strd	r8, [r0]
   14898:	ldr	r6, [sp, #4]
   1489c:	orr	r6, r6, #2
   148a0:	b	149a4 <__assert_fail@plt+0x38d8>
   148a4:	mvn	r0, #0
   148a8:	mvn	r1, #0
   148ac:	mov	r2, r4
   148b0:	mov	r5, r3
   148b4:	bl	14d18 <__assert_fail@plt+0x3c4c>
   148b8:	mov	ip, r5
   148bc:	mvn	lr, #0
   148c0:	mov	r2, #0
   148c4:	mvn	r3, #5
   148c8:	mov	r5, r8
   148cc:	mov	r7, r9
   148d0:	umull	r8, r6, r5, r4
   148d4:	mvn	r9, #0
   148d8:	mla	r6, r5, ip, r6
   148dc:	subs	r5, r0, r5
   148e0:	sbcs	r5, r1, r7
   148e4:	mov	r5, #0
   148e8:	movwcc	r5, #1
   148ec:	cmp	r5, #0
   148f0:	mlaeq	r9, r7, r4, r6
   148f4:	movne	r8, lr
   148f8:	orrne	r2, r2, #1
   148fc:	adds	r3, r3, #1
   14900:	mov	r5, r8
   14904:	mov	r7, r9
   14908:	bne	148d0 <__assert_fail@plt+0x3804>
   1490c:	b	14978 <__assert_fail@plt+0x38ac>
   14910:	mvn	r0, #0
   14914:	mvn	r1, #0
   14918:	mov	r2, r4
   1491c:	mov	r5, r3
   14920:	bl	14d18 <__assert_fail@plt+0x3c4c>
   14924:	mov	ip, r5
   14928:	mvn	lr, #0
   1492c:	mov	r2, #0
   14930:	mvn	r3, #4
   14934:	mov	r5, r8
   14938:	mov	r7, r9
   1493c:	umull	r8, r6, r5, r4
   14940:	mvn	r9, #0
   14944:	mla	r6, r5, ip, r6
   14948:	subs	r5, r0, r5
   1494c:	sbcs	r5, r1, r7
   14950:	mov	r5, #0
   14954:	movwcc	r5, #1
   14958:	cmp	r5, #0
   1495c:	mlaeq	r9, r7, r4, r6
   14960:	movne	r8, lr
   14964:	orrne	r2, r2, #1
   14968:	adds	r3, r3, #1
   1496c:	mov	r5, r8
   14970:	mov	r7, r9
   14974:	bne	1493c <__assert_fail@plt+0x3870>
   14978:	ldr	r1, [sp]
   1497c:	ldr	r3, [sp, #8]
   14980:	ldr	r6, [sp, #4]
   14984:	add	r0, r1, r3
   14988:	orr	r6, r2, r6
   1498c:	str	r0, [sl]
   14990:	ldrb	r0, [r1, r3]
   14994:	cmp	r0, #0
   14998:	orrne	r6, r6, #2
   1499c:	ldr	r0, [sp, #12]
   149a0:	strd	r8, [r0]
   149a4:	mov	r0, r6
   149a8:	sub	sp, fp, #28
   149ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149b0:	movw	r0, #22461	; 0x57bd
   149b4:	movw	r1, #22499	; 0x57e3
   149b8:	movw	r3, #22515	; 0x57f3
   149bc:	mov	r2, #85	; 0x55
   149c0:	movt	r0, #1
   149c4:	movt	r1, #1
   149c8:	movt	r3, #1
   149cc:	bl	110cc <__assert_fail@plt>
   149d0:	clz	r2, r1
   149d4:	clz	r3, r0
   149d8:	lsr	r2, r2, #5
   149dc:	lsr	r3, r3, #5
   149e0:	orrs	r2, r3, r2
   149e4:	movwne	r1, #1
   149e8:	movwne	r0, #1
   149ec:	cmp	r1, #0
   149f0:	beq	14a20 <__assert_fail@plt+0x3954>
   149f4:	mvn	r2, #-2147483648	; 0x80000000
   149f8:	udiv	r2, r2, r1
   149fc:	cmp	r2, r0
   14a00:	bcs	14a20 <__assert_fail@plt+0x3954>
   14a04:	push	{fp, lr}
   14a08:	mov	fp, sp
   14a0c:	bl	10fe8 <__errno_location@plt>
   14a10:	mov	r1, #12
   14a14:	str	r1, [r0]
   14a18:	mov	r0, #0
   14a1c:	pop	{fp, pc}
   14a20:	b	10e5c <calloc@plt>
   14a24:	cmp	r0, #0
   14a28:	movweq	r0, #1
   14a2c:	cmn	r0, #1
   14a30:	ble	14a38 <__assert_fail@plt+0x396c>
   14a34:	b	10f7c <malloc@plt>
   14a38:	push	{fp, lr}
   14a3c:	mov	fp, sp
   14a40:	bl	10fe8 <__errno_location@plt>
   14a44:	mov	r1, #12
   14a48:	str	r1, [r0]
   14a4c:	mov	r0, #0
   14a50:	pop	{fp, pc}
   14a54:	push	{fp, lr}
   14a58:	mov	fp, sp
   14a5c:	cmp	r0, #0
   14a60:	beq	14a7c <__assert_fail@plt+0x39b0>
   14a64:	cmp	r1, #0
   14a68:	beq	14a88 <__assert_fail@plt+0x39bc>
   14a6c:	cmn	r1, #1
   14a70:	ble	14a90 <__assert_fail@plt+0x39c4>
   14a74:	pop	{fp, lr}
   14a78:	b	10f10 <realloc@plt>
   14a7c:	mov	r0, r1
   14a80:	pop	{fp, lr}
   14a84:	b	14a24 <__assert_fail@plt+0x3958>
   14a88:	bl	14b24 <__assert_fail@plt+0x3a58>
   14a8c:	b	14a9c <__assert_fail@plt+0x39d0>
   14a90:	bl	10fe8 <__errno_location@plt>
   14a94:	mov	r1, #12
   14a98:	str	r1, [r0]
   14a9c:	mov	r0, #0
   14aa0:	pop	{fp, pc}
   14aa4:	push	{r4, r5, r6, sl, fp, lr}
   14aa8:	add	fp, sp, #16
   14aac:	mov	r4, r0
   14ab0:	bl	10f4c <__fpending@plt>
   14ab4:	mov	r5, r0
   14ab8:	mov	r0, r4
   14abc:	bl	10f58 <ferror_unlocked@plt>
   14ac0:	mov	r6, r0
   14ac4:	mov	r0, r4
   14ac8:	bl	11bf0 <__assert_fail@plt+0xb24>
   14acc:	cmp	r6, #0
   14ad0:	beq	14af0 <__assert_fail@plt+0x3a24>
   14ad4:	mvn	r4, #0
   14ad8:	cmp	r0, #0
   14adc:	bne	14b1c <__assert_fail@plt+0x3a50>
   14ae0:	bl	10fe8 <__errno_location@plt>
   14ae4:	mov	r1, #0
   14ae8:	str	r1, [r0]
   14aec:	b	14b1c <__assert_fail@plt+0x3a50>
   14af0:	cmp	r0, #0
   14af4:	mov	r4, r0
   14af8:	mvnne	r4, #0
   14afc:	cmp	r5, #0
   14b00:	bne	14b1c <__assert_fail@plt+0x3a50>
   14b04:	cmp	r0, #0
   14b08:	beq	14b1c <__assert_fail@plt+0x3a50>
   14b0c:	bl	10fe8 <__errno_location@plt>
   14b10:	ldr	r0, [r0]
   14b14:	subs	r4, r0, #9
   14b18:	mvnne	r4, #0
   14b1c:	mov	r0, r4
   14b20:	pop	{r4, r5, r6, sl, fp, pc}
   14b24:	push	{r4, r5, r6, sl, fp, lr}
   14b28:	add	fp, sp, #16
   14b2c:	mov	r4, r0
   14b30:	bl	10fe8 <__errno_location@plt>
   14b34:	ldr	r6, [r0]
   14b38:	mov	r5, r0
   14b3c:	mov	r0, r4
   14b40:	bl	10eb0 <free@plt>
   14b44:	str	r6, [r5]
   14b48:	pop	{r4, r5, r6, sl, fp, pc}
   14b4c:	push	{fp, lr}
   14b50:	mov	fp, sp
   14b54:	mov	r0, #14
   14b58:	bl	1106c <nl_langinfo@plt>
   14b5c:	movw	r1, #21148	; 0x529c
   14b60:	cmp	r0, #0
   14b64:	movt	r1, #1
   14b68:	movne	r1, r0
   14b6c:	movw	r0, #22594	; 0x5842
   14b70:	ldrb	r2, [r1]
   14b74:	movt	r0, #1
   14b78:	cmp	r2, #0
   14b7c:	movne	r0, r1
   14b80:	pop	{fp, pc}
   14b84:	push	{r4, r5, r6, r7, fp, lr}
   14b88:	add	fp, sp, #16
   14b8c:	sub	sp, sp, #8
   14b90:	add	r5, sp, #4
   14b94:	cmp	r0, #0
   14b98:	mov	r7, r2
   14b9c:	mov	r4, r1
   14ba0:	movne	r5, r0
   14ba4:	mov	r0, r5
   14ba8:	bl	10f64 <mbrtowc@plt>
   14bac:	mov	r6, r0
   14bb0:	cmp	r7, #0
   14bb4:	beq	14bd8 <__assert_fail@plt+0x3b0c>
   14bb8:	cmn	r6, #2
   14bbc:	bcc	14bd8 <__assert_fail@plt+0x3b0c>
   14bc0:	mov	r0, #0
   14bc4:	bl	14c20 <__assert_fail@plt+0x3b54>
   14bc8:	cmp	r0, #0
   14bcc:	ldrbeq	r0, [r4]
   14bd0:	moveq	r6, #1
   14bd4:	streq	r0, [r5]
   14bd8:	mov	r0, r6
   14bdc:	sub	sp, fp, #16
   14be0:	pop	{r4, r5, r6, r7, fp, pc}
   14be4:	cmp	r2, #0
   14be8:	beq	14c18 <__assert_fail@plt+0x3b4c>
   14bec:	mvn	r3, #0
   14bf0:	udiv	r3, r3, r2
   14bf4:	cmp	r3, r1
   14bf8:	bcs	14c18 <__assert_fail@plt+0x3b4c>
   14bfc:	push	{fp, lr}
   14c00:	mov	fp, sp
   14c04:	bl	10fe8 <__errno_location@plt>
   14c08:	mov	r1, #12
   14c0c:	str	r1, [r0]
   14c10:	mov	r0, #0
   14c14:	pop	{fp, pc}
   14c18:	mul	r1, r2, r1
   14c1c:	b	14a54 <__assert_fail@plt+0x3988>
   14c20:	push	{r4, sl, fp, lr}
   14c24:	add	fp, sp, #8
   14c28:	sub	sp, sp, #264	; 0x108
   14c2c:	add	r1, sp, #7
   14c30:	movw	r2, #257	; 0x101
   14c34:	bl	14c84 <__assert_fail@plt+0x3bb8>
   14c38:	mov	r4, #0
   14c3c:	cmp	r0, #0
   14c40:	bne	14c78 <__assert_fail@plt+0x3bac>
   14c44:	movw	r1, #22600	; 0x5848
   14c48:	add	r0, sp, #7
   14c4c:	movt	r1, #1
   14c50:	bl	10e80 <strcmp@plt>
   14c54:	cmp	r0, #0
   14c58:	beq	14c78 <__assert_fail@plt+0x3bac>
   14c5c:	movw	r1, #22602	; 0x584a
   14c60:	add	r0, sp, #7
   14c64:	movt	r1, #1
   14c68:	bl	10e80 <strcmp@plt>
   14c6c:	mov	r4, r0
   14c70:	cmp	r0, #0
   14c74:	movwne	r4, #1
   14c78:	mov	r0, r4
   14c7c:	sub	sp, fp, #8
   14c80:	pop	{r4, sl, fp, pc}
   14c84:	push	{r4, r5, r6, r7, fp, lr}
   14c88:	add	fp, sp, #16
   14c8c:	mov	r4, r1
   14c90:	mov	r1, #0
   14c94:	mov	r6, r2
   14c98:	bl	11054 <setlocale@plt>
   14c9c:	cmp	r0, #0
   14ca0:	beq	14ccc <__assert_fail@plt+0x3c00>
   14ca4:	mov	r7, r0
   14ca8:	bl	10fd0 <strlen@plt>
   14cac:	cmp	r0, r6
   14cb0:	bcs	14ce0 <__assert_fail@plt+0x3c14>
   14cb4:	add	r2, r0, #1
   14cb8:	mov	r0, r4
   14cbc:	mov	r1, r7
   14cc0:	bl	10ec8 <memcpy@plt>
   14cc4:	mov	r5, #0
   14cc8:	b	14d08 <__assert_fail@plt+0x3c3c>
   14ccc:	cmp	r6, #0
   14cd0:	mov	r5, #22
   14cd4:	movne	r0, #0
   14cd8:	strbne	r0, [r4]
   14cdc:	b	14d08 <__assert_fail@plt+0x3c3c>
   14ce0:	mov	r5, #34	; 0x22
   14ce4:	cmp	r6, #0
   14ce8:	beq	14d08 <__assert_fail@plt+0x3c3c>
   14cec:	sub	r6, r6, #1
   14cf0:	mov	r0, r4
   14cf4:	mov	r1, r7
   14cf8:	mov	r2, r6
   14cfc:	bl	10ec8 <memcpy@plt>
   14d00:	mov	r0, #0
   14d04:	strb	r0, [r4, r6]
   14d08:	mov	r0, r5
   14d0c:	pop	{r4, r5, r6, r7, fp, pc}
   14d10:	mov	r1, #0
   14d14:	b	11054 <setlocale@plt>
   14d18:	cmp	r3, #0
   14d1c:	cmpeq	r2, #0
   14d20:	bne	14d38 <__assert_fail@plt+0x3c6c>
   14d24:	cmp	r1, #0
   14d28:	cmpeq	r0, #0
   14d2c:	mvnne	r1, #0
   14d30:	mvnne	r0, #0
   14d34:	b	14d54 <__assert_fail@plt+0x3c88>
   14d38:	sub	sp, sp, #8
   14d3c:	push	{sp, lr}
   14d40:	bl	14d64 <__assert_fail@plt+0x3c98>
   14d44:	ldr	lr, [sp, #4]
   14d48:	add	sp, sp, #8
   14d4c:	pop	{r2, r3}
   14d50:	bx	lr
   14d54:	push	{r1, lr}
   14d58:	mov	r0, #8
   14d5c:	bl	10e74 <raise@plt>
   14d60:	pop	{r1, pc}
   14d64:	cmp	r1, r3
   14d68:	cmpeq	r0, r2
   14d6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d70:	mov	r4, r0
   14d74:	movcc	r0, #0
   14d78:	mov	r5, r1
   14d7c:	ldr	lr, [sp, #36]	; 0x24
   14d80:	movcc	r1, r0
   14d84:	bcc	14e80 <__assert_fail@plt+0x3db4>
   14d88:	cmp	r3, #0
   14d8c:	clzeq	ip, r2
   14d90:	clzne	ip, r3
   14d94:	addeq	ip, ip, #32
   14d98:	cmp	r5, #0
   14d9c:	clzeq	r1, r4
   14da0:	addeq	r1, r1, #32
   14da4:	clzne	r1, r5
   14da8:	sub	ip, ip, r1
   14dac:	sub	sl, ip, #32
   14db0:	lsl	r9, r3, ip
   14db4:	rsb	fp, ip, #32
   14db8:	orr	r9, r9, r2, lsl sl
   14dbc:	orr	r9, r9, r2, lsr fp
   14dc0:	lsl	r8, r2, ip
   14dc4:	cmp	r5, r9
   14dc8:	cmpeq	r4, r8
   14dcc:	movcc	r0, #0
   14dd0:	movcc	r1, r0
   14dd4:	bcc	14df0 <__assert_fail@plt+0x3d24>
   14dd8:	mov	r0, #1
   14ddc:	subs	r4, r4, r8
   14de0:	lsl	r1, r0, sl
   14de4:	orr	r1, r1, r0, lsr fp
   14de8:	lsl	r0, r0, ip
   14dec:	sbc	r5, r5, r9
   14df0:	cmp	ip, #0
   14df4:	beq	14e80 <__assert_fail@plt+0x3db4>
   14df8:	lsr	r6, r8, #1
   14dfc:	orr	r6, r6, r9, lsl #31
   14e00:	lsr	r7, r9, #1
   14e04:	mov	r2, ip
   14e08:	b	14e2c <__assert_fail@plt+0x3d60>
   14e0c:	subs	r3, r4, r6
   14e10:	sbc	r8, r5, r7
   14e14:	adds	r3, r3, r3
   14e18:	adc	r8, r8, r8
   14e1c:	adds	r4, r3, #1
   14e20:	adc	r5, r8, #0
   14e24:	subs	r2, r2, #1
   14e28:	beq	14e48 <__assert_fail@plt+0x3d7c>
   14e2c:	cmp	r5, r7
   14e30:	cmpeq	r4, r6
   14e34:	bcs	14e0c <__assert_fail@plt+0x3d40>
   14e38:	adds	r4, r4, r4
   14e3c:	adc	r5, r5, r5
   14e40:	subs	r2, r2, #1
   14e44:	bne	14e2c <__assert_fail@plt+0x3d60>
   14e48:	lsr	r3, r4, ip
   14e4c:	orr	r3, r3, r5, lsl fp
   14e50:	lsr	r2, r5, ip
   14e54:	orr	r3, r3, r5, lsr sl
   14e58:	adds	r0, r0, r4
   14e5c:	mov	r4, r3
   14e60:	lsl	r3, r2, ip
   14e64:	orr	r3, r3, r4, lsl sl
   14e68:	lsl	ip, r4, ip
   14e6c:	orr	r3, r3, r4, lsr fp
   14e70:	adc	r1, r1, r5
   14e74:	subs	r0, r0, ip
   14e78:	mov	r5, r2
   14e7c:	sbc	r1, r1, r3
   14e80:	cmp	lr, #0
   14e84:	strdne	r4, [lr]
   14e88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e8c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14e90:	mov	r7, r0
   14e94:	ldr	r6, [pc, #72]	; 14ee4 <__assert_fail@plt+0x3e18>
   14e98:	ldr	r5, [pc, #72]	; 14ee8 <__assert_fail@plt+0x3e1c>
   14e9c:	add	r6, pc, r6
   14ea0:	add	r5, pc, r5
   14ea4:	sub	r6, r6, r5
   14ea8:	mov	r8, r1
   14eac:	mov	r9, r2
   14eb0:	bl	10e3c <calloc@plt-0x20>
   14eb4:	asrs	r6, r6, #2
   14eb8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14ebc:	mov	r4, #0
   14ec0:	add	r4, r4, #1
   14ec4:	ldr	r3, [r5], #4
   14ec8:	mov	r2, r9
   14ecc:	mov	r1, r8
   14ed0:	mov	r0, r7
   14ed4:	blx	r3
   14ed8:	cmp	r6, r4
   14edc:	bne	14ec0 <__assert_fail@plt+0x3df4>
   14ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14ee4:	andeq	r1, r1, r8, rrx
   14ee8:	andeq	r1, r1, r0, rrx
   14eec:	bx	lr
   14ef0:	ldr	r3, [pc, #12]	; 14f04 <__assert_fail@plt+0x3e38>
   14ef4:	mov	r1, #0
   14ef8:	add	r3, pc, r3
   14efc:	ldr	r2, [r3]
   14f00:	b	10ff4 <__cxa_atexit@plt>
   14f04:	andeq	r1, r1, ip, ror #3

Disassembly of section .fini:

00014f08 <.fini>:
   14f08:	push	{r3, lr}
   14f0c:	pop	{r3, pc}
