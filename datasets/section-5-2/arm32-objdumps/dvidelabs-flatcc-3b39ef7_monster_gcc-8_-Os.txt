
../repos/dvidelabs-flatcc-3b39ef7/samples/monster/monster:     file format elf32-littlearm


Disassembly of section .init:

00011f0c <.init>:
   11f0c:	push	{r3, lr}
   11f10:	bl	1210c <_start@@Base+0x3c>
   11f14:	pop	{r3, pc}

Disassembly of section .plt:

00011f18 <strcmp@plt-0x14>:
   11f18:	push	{lr}		; (str lr, [sp, #-4]!)
   11f1c:	ldr	lr, [pc, #4]	; 11f28 <strcmp@plt-0x4>
   11f20:	add	lr, pc, lr
   11f24:	ldr	pc, [lr, #8]!
   11f28:	ldrdeq	r5, [r1], -r8

00011f2c <strcmp@plt>:
   11f2c:	add	ip, pc, #0, 12
   11f30:	add	ip, ip, #86016	; 0x15000
   11f34:	ldr	pc, [ip, #216]!	; 0xd8

00011f38 <free@plt>:
   11f38:	add	ip, pc, #0, 12
   11f3c:	add	ip, ip, #86016	; 0x15000
   11f40:	ldr	pc, [ip, #208]!	; 0xd0

00011f44 <memcpy@plt>:
   11f44:	add	ip, pc, #0, 12
   11f48:	add	ip, ip, #86016	; 0x15000
   11f4c:	ldr	pc, [ip, #200]!	; 0xc8

00011f50 <memcmp@plt>:
   11f50:	add	ip, pc, #0, 12
   11f54:	add	ip, ip, #86016	; 0x15000
   11f58:	ldr	pc, [ip, #192]!	; 0xc0

00011f5c <realloc@plt>:
   11f5c:	add	ip, pc, #0, 12
   11f60:	add	ip, ip, #86016	; 0x15000
   11f64:	ldr	pc, [ip, #184]!	; 0xb8

00011f68 <puts@plt>:
   11f68:	add	ip, pc, #0, 12
   11f6c:	add	ip, ip, #86016	; 0x15000
   11f70:	ldr	pc, [ip, #176]!	; 0xb0

00011f74 <malloc@plt>:
   11f74:	add	ip, pc, #0, 12
   11f78:	add	ip, ip, #86016	; 0x15000
   11f7c:	ldr	pc, [ip, #168]!	; 0xa8

00011f80 <__libc_start_main@plt>:
   11f80:	add	ip, pc, #0, 12
   11f84:	add	ip, ip, #86016	; 0x15000
   11f88:	ldr	pc, [ip, #160]!	; 0xa0

00011f8c <__gmon_start__@plt>:
   11f8c:	add	ip, pc, #0, 12
   11f90:	add	ip, ip, #86016	; 0x15000
   11f94:	ldr	pc, [ip, #152]!	; 0x98

00011f98 <strlen@plt>:
   11f98:	add	ip, pc, #0, 12
   11f9c:	add	ip, ip, #86016	; 0x15000
   11fa0:	ldr	pc, [ip, #144]!	; 0x90

00011fa4 <posix_memalign@plt>:
   11fa4:	add	ip, pc, #0, 12
   11fa8:	add	ip, ip, #86016	; 0x15000
   11fac:	ldr	pc, [ip, #136]!	; 0x88

00011fb0 <memset@plt>:
   11fb0:	add	ip, pc, #0, 12
   11fb4:	add	ip, ip, #86016	; 0x15000
   11fb8:	ldr	pc, [ip, #128]!	; 0x80

00011fbc <memchr@plt>:
   11fbc:	add	ip, pc, #0, 12
   11fc0:	add	ip, ip, #86016	; 0x15000
   11fc4:	ldr	pc, [ip, #120]!	; 0x78

00011fc8 <abort@plt>:
   11fc8:	add	ip, pc, #0, 12
   11fcc:	add	ip, ip, #86016	; 0x15000
   11fd0:	ldr	pc, [ip, #112]!	; 0x70

00011fd4 <__assert_fail@plt>:
   11fd4:	add	ip, pc, #0, 12
   11fd8:	add	ip, ip, #86016	; 0x15000
   11fdc:	ldr	pc, [ip, #104]!	; 0x68

Disassembly of section .text:

00011fe0 <main@@Base>:
   11fe0:	push	{r4, r5, lr}
   11fe4:	sub	sp, sp, #244	; 0xf4
   11fe8:	add	r0, sp, #8
   11fec:	bl	134b8 <flatcc_builder_init@@Base>
   11ff0:	mov	r1, #0
   11ff4:	add	r0, sp, #8
   11ff8:	bl	124f8 <create_monster_bottom_up@@Base>
   11ffc:	cmp	r0, #0
   12000:	ldrne	r3, [pc, #184]	; 120c0 <main@@Base+0xe0>
   12004:	movne	r2, #308	; 0x134
   12008:	bne	12040 <main@@Base+0x60>
   1200c:	add	r1, sp, #4
   12010:	add	r0, sp, #8
   12014:	bl	1597c <flatcc_builder_finalize_aligned_buffer@@Base>
   12018:	bl	15a08 <flatcc_builder_aligned_free@@Base>
   1201c:	add	r0, sp, #8
   12020:	bl	13628 <flatcc_builder_reset@@Base>
   12024:	mov	r1, #1
   12028:	add	r0, sp, #8
   1202c:	bl	124f8 <create_monster_bottom_up@@Base>
   12030:	cmp	r0, #0
   12034:	beq	1204c <main@@Base+0x6c>
   12038:	ldr	r3, [pc, #128]	; 120c0 <main@@Base+0xe0>
   1203c:	movw	r2, #335	; 0x14f
   12040:	ldr	r1, [pc, #124]	; 120c4 <main@@Base+0xe4>
   12044:	ldr	r0, [pc, #124]	; 120c8 <main@@Base+0xe8>
   12048:	bl	11fd4 <__assert_fail@plt>
   1204c:	add	r1, sp, #4
   12050:	add	r0, sp, #8
   12054:	bl	1597c <flatcc_builder_finalize_aligned_buffer@@Base>
   12058:	mov	r4, r0
   1205c:	bl	12918 <access_monster_buffer@@Base>
   12060:	mov	r0, r4
   12064:	bl	15a08 <flatcc_builder_aligned_free@@Base>
   12068:	add	r0, sp, #8
   1206c:	bl	13628 <flatcc_builder_reset@@Base>
   12070:	add	r0, sp, #8
   12074:	bl	127a0 <create_monster_top_down@@Base>
   12078:	add	r1, sp, #4
   1207c:	add	r0, sp, #8
   12080:	bl	15908 <flatcc_builder_finalize_buffer@@Base>
   12084:	mov	r5, r0
   12088:	bl	12918 <access_monster_buffer@@Base>
   1208c:	subs	r4, r0, #0
   12090:	ldrne	r3, [pc, #40]	; 120c0 <main@@Base+0xe0>
   12094:	movwne	r2, #342	; 0x156
   12098:	bne	12040 <main@@Base+0x60>
   1209c:	mov	r0, r5
   120a0:	bl	11f38 <free@plt>
   120a4:	add	r0, sp, #8
   120a8:	bl	13634 <flatcc_builder_clear@@Base>
   120ac:	ldr	r0, [pc, #24]	; 120cc <main@@Base+0xec>
   120b0:	bl	11f68 <puts@plt>
   120b4:	mov	r0, r4
   120b8:	add	sp, sp, #244	; 0xf4
   120bc:	pop	{r4, r5, pc}
   120c0:	andeq	r6, r1, r6, lsl r0
   120c4:	andeq	r6, r1, r1, asr #4
   120c8:	andeq	r6, r1, sp, lsr #20
   120cc:	andeq	r6, r1, fp, lsl #5

000120d0 <_start@@Base>:
   120d0:	mov	fp, #0
   120d4:	mov	lr, #0
   120d8:	pop	{r1}		; (ldr r1, [sp], #4)
   120dc:	mov	r2, sp
   120e0:	push	{r2}		; (str r2, [sp, #-4]!)
   120e4:	push	{r0}		; (str r0, [sp, #-4]!)
   120e8:	ldr	ip, [pc, #16]	; 12100 <_start@@Base+0x30>
   120ec:	push	{ip}		; (str ip, [sp, #-4]!)
   120f0:	ldr	r0, [pc, #12]	; 12104 <_start@@Base+0x34>
   120f4:	ldr	r3, [pc, #12]	; 12108 <_start@@Base+0x38>
   120f8:	bl	11f80 <__libc_start_main@plt>
   120fc:	bl	11fc8 <abort@plt>
   12100:	andeq	r5, r1, r8, ror pc
   12104:	andeq	r1, r1, r0, ror #31
   12108:	andeq	r5, r1, r8, lsl pc
   1210c:	ldr	r3, [pc, #20]	; 12128 <_start@@Base+0x58>
   12110:	ldr	r2, [pc, #20]	; 1212c <_start@@Base+0x5c>
   12114:	add	r3, pc, r3
   12118:	ldr	r2, [r3, r2]
   1211c:	cmp	r2, #0
   12120:	bxeq	lr
   12124:	b	11f8c <__gmon_start__@plt>
   12128:	andeq	r4, r1, r4, ror #29
   1212c:	andeq	r0, r0, r8, asr #32
   12130:	ldr	r0, [pc, #24]	; 12150 <_start@@Base+0x80>
   12134:	ldr	r3, [pc, #24]	; 12154 <_start@@Base+0x84>
   12138:	cmp	r3, r0
   1213c:	bxeq	lr
   12140:	ldr	r3, [pc, #16]	; 12158 <_start@@Base+0x88>
   12144:	cmp	r3, #0
   12148:	bxeq	lr
   1214c:	bx	r3
   12150:	andeq	r7, r2, r4, asr r0
   12154:	andeq	r7, r2, r4, asr r0
   12158:	andeq	r0, r0, r0
   1215c:	ldr	r0, [pc, #36]	; 12188 <_start@@Base+0xb8>
   12160:	ldr	r1, [pc, #36]	; 1218c <_start@@Base+0xbc>
   12164:	sub	r1, r1, r0
   12168:	asr	r1, r1, #2
   1216c:	add	r1, r1, r1, lsr #31
   12170:	asrs	r1, r1, #1
   12174:	bxeq	lr
   12178:	ldr	r3, [pc, #16]	; 12190 <_start@@Base+0xc0>
   1217c:	cmp	r3, #0
   12180:	bxeq	lr
   12184:	bx	r3
   12188:	andeq	r7, r2, r4, asr r0
   1218c:	andeq	r7, r2, r4, asr r0
   12190:	andeq	r0, r0, r0
   12194:	push	{r4, lr}
   12198:	ldr	r4, [pc, #24]	; 121b8 <_start@@Base+0xe8>
   1219c:	ldrb	r3, [r4]
   121a0:	cmp	r3, #0
   121a4:	popne	{r4, pc}
   121a8:	bl	12130 <_start@@Base+0x60>
   121ac:	mov	r3, #1
   121b0:	strb	r3, [r4]
   121b4:	pop	{r4, pc}
   121b8:	andeq	r7, r2, r4, asr r0
   121bc:	b	1215c <_start@@Base+0x8c>
   121c0:	push	{r4, lr}
   121c4:	subs	r4, r1, #0
   121c8:	bne	121d4 <_start@@Base+0x104>
   121cc:	mvn	r0, #0
   121d0:	pop	{r4, pc}
   121d4:	mov	r1, #3
   121d8:	bl	1549c <flatcc_builder_table_add_offset@@Base>
   121dc:	cmp	r0, #0
   121e0:	beq	121cc <_start@@Base+0xfc>
   121e4:	str	r4, [r0]
   121e8:	mov	r0, #0
   121ec:	pop	{r4, pc}
   121f0:	push	{r4, lr}
   121f4:	subs	r4, r1, #0
   121f8:	bne	12204 <_start@@Base+0x134>
   121fc:	mvn	r0, #0
   12200:	pop	{r4, pc}
   12204:	mov	r1, #5
   12208:	bl	1549c <flatcc_builder_table_add_offset@@Base>
   1220c:	cmp	r0, #0
   12210:	beq	121fc <_start@@Base+0x12c>
   12214:	str	r4, [r0]
   12218:	mov	r0, #0
   1221c:	pop	{r4, pc}
   12220:	push	{r4, lr}
   12224:	subs	r4, r1, #0
   12228:	bne	12234 <_start@@Base+0x164>
   1222c:	mvn	r0, #0
   12230:	pop	{r4, pc}
   12234:	mov	r1, #7
   12238:	bl	1549c <flatcc_builder_table_add_offset@@Base>
   1223c:	cmp	r0, #0
   12240:	beq	1222c <_start@@Base+0x15c>
   12244:	str	r4, [r0]
   12248:	mov	r0, #0
   1224c:	pop	{r4, pc}
   12250:	push	{r4, r5, r6, lr}
   12254:	mov	r5, r1
   12258:	mov	r1, #2
   1225c:	mov	r4, r0
   12260:	mov	r6, r2
   12264:	bl	14374 <flatcc_builder_start_table@@Base>
   12268:	adds	r3, r5, #0
   1226c:	movne	r3, #1
   12270:	cmp	r0, #0
   12274:	moveq	r0, r3
   12278:	movne	r0, #0
   1227c:	cmp	r0, #0
   12280:	beq	122f4 <_start@@Base+0x224>
   12284:	mov	r1, #0
   12288:	mov	r0, r4
   1228c:	bl	1549c <flatcc_builder_table_add_offset@@Base>
   12290:	cmp	r0, #0
   12294:	beq	122f4 <_start@@Base+0x224>
   12298:	mov	r3, #2
   1229c:	mov	r1, #1
   122a0:	str	r5, [r0]
   122a4:	mov	r2, r3
   122a8:	mov	r0, r4
   122ac:	bl	152f8 <flatcc_builder_table_add@@Base>
   122b0:	cmp	r0, #0
   122b4:	beq	122f4 <_start@@Base+0x224>
   122b8:	mov	r2, #0
   122bc:	ldr	r1, [pc, #56]	; 122fc <_start@@Base+0x22c>
   122c0:	strh	r6, [r0]
   122c4:	mov	r0, r4
   122c8:	bl	14920 <flatcc_builder_check_required@@Base>
   122cc:	cmp	r0, #0
   122d0:	bne	122e8 <_start@@Base+0x218>
   122d4:	ldr	r3, [pc, #36]	; 12300 <_start@@Base+0x230>
   122d8:	mov	r2, #52	; 0x34
   122dc:	ldr	r1, [pc, #32]	; 12304 <_start@@Base+0x234>
   122e0:	ldr	r0, [pc, #32]	; 12308 <_start@@Base+0x238>
   122e4:	bl	11fd4 <__assert_fail@plt>
   122e8:	mov	r0, r4
   122ec:	pop	{r4, r5, r6, lr}
   122f0:	b	1499c <flatcc_builder_end_table@@Base>
   122f4:	mov	r0, #0
   122f8:	pop	{r4, r5, r6, pc}
   122fc:	andeq	r5, r1, r8, lsl #31
   12300:	andeq	r5, r1, sl, lsl #31
   12304:	andeq	r6, r1, fp, lsl r0
   12308:	andeq	r6, r1, r7, ror r0
   1230c:	subs	r3, r0, #0
   12310:	bne	1232c <_start@@Base+0x25c>
   12314:	push	{r4, lr}
   12318:	mov	r2, #148	; 0x94
   1231c:	ldr	r3, [pc, #64]	; 12364 <_start@@Base+0x294>
   12320:	ldr	r1, [pc, #64]	; 12368 <_start@@Base+0x298>
   12324:	ldr	r0, [pc, #64]	; 1236c <_start@@Base+0x29c>
   12328:	bl	11fd4 <__assert_fail@plt>
   1232c:	ldr	r2, [r3]
   12330:	sub	r2, r3, r2
   12334:	ldrh	r1, [r2]
   12338:	cmp	r1, #5
   1233c:	bls	1235c <_start@@Base+0x28c>
   12340:	ldrh	r0, [r2, #4]
   12344:	cmp	r0, #0
   12348:	addne	r2, r3, r0
   1234c:	ldrne	r0, [r3, r0]
   12350:	addne	r0, r0, #4
   12354:	addne	r0, r2, r0
   12358:	bx	lr
   1235c:	mov	r0, #0
   12360:	bx	lr
   12364:	andeq	r5, r1, r3, lsr #31
   12368:	andeq	r6, r1, r3, lsl r1
   1236c:	andeq	r6, r1, lr, ror #2
   12370:	subs	r2, r0, #0
   12374:	bne	12390 <_start@@Base+0x2c0>
   12378:	push	{r4, lr}
   1237c:	mov	r2, #149	; 0x95
   12380:	ldr	r3, [pc, #52]	; 123bc <_start@@Base+0x2ec>
   12384:	ldr	r1, [pc, #52]	; 123c0 <_start@@Base+0x2f0>
   12388:	ldr	r0, [pc, #52]	; 123c4 <_start@@Base+0x2f4>
   1238c:	bl	11fd4 <__assert_fail@plt>
   12390:	ldr	r3, [r2]
   12394:	sub	r3, r2, r3
   12398:	ldrh	r1, [r3]
   1239c:	cmp	r1, #7
   123a0:	bls	123b4 <_start@@Base+0x2e4>
   123a4:	ldrh	r0, [r3, #6]
   123a8:	cmp	r0, #0
   123ac:	ldrshne	r0, [r2, r0]
   123b0:	bx	lr
   123b4:	mov	r0, #0
   123b8:	bx	lr
   123bc:			; <UNDEFINED> instruction: 0x00015fbd
   123c0:	andeq	r6, r1, r3, lsl r1
   123c4:	andeq	r6, r1, lr, ror #2
   123c8:	push	{r4, lr}
   123cc:	mov	r2, #0
   123d0:	mov	r4, r0
   123d4:	ldr	r1, [pc, #40]	; 12404 <_start@@Base+0x334>
   123d8:	bl	14920 <flatcc_builder_check_required@@Base>
   123dc:	cmp	r0, #0
   123e0:	bne	123f8 <_start@@Base+0x328>
   123e4:	ldr	r3, [pc, #28]	; 12408 <_start@@Base+0x338>
   123e8:	mov	r2, #50	; 0x32
   123ec:	ldr	r1, [pc, #24]	; 1240c <_start@@Base+0x33c>
   123f0:	ldr	r0, [pc, #24]	; 12410 <_start@@Base+0x340>
   123f4:	bl	11fd4 <__assert_fail@plt>
   123f8:	mov	r0, r4
   123fc:	pop	{r4, lr}
   12400:	b	1499c <flatcc_builder_end_table@@Base>
   12404:	ldrdeq	r5, [r1], -sl
   12408:	ldrdeq	r5, [r1], -ip
   1240c:	andeq	r6, r1, fp, lsl r0
   12410:	muleq	r1, r4, r1
   12414:	push	{r4, r5, r6, lr}
   12418:	subs	r4, r1, #0
   1241c:	bne	12428 <_start@@Base+0x358>
   12420:	mvn	r0, #0
   12424:	pop	{r4, r5, r6, pc}
   12428:	mov	r3, #1
   1242c:	mov	r1, #8
   12430:	mov	r2, r3
   12434:	mov	r5, r0
   12438:	bl	152f8 <flatcc_builder_table_add@@Base>
   1243c:	subs	r6, r0, #0
   12440:	beq	12420 <_start@@Base+0x350>
   12444:	mov	r1, #9
   12448:	mov	r0, r5
   1244c:	bl	1549c <flatcc_builder_table_add_offset@@Base>
   12450:	cmp	r0, #0
   12454:	beq	12420 <_start@@Base+0x350>
   12458:	mov	r3, #1
   1245c:	strb	r3, [r6]
   12460:	str	r4, [r0]
   12464:	mov	r0, #0
   12468:	pop	{r4, r5, r6, pc}
   1246c:	mov	r3, #2
   12470:	push	{r4, lr}
   12474:	mov	r2, r3
   12478:	mov	r1, r3
   1247c:	bl	152f8 <flatcc_builder_table_add@@Base>
   12480:	cmp	r0, #0
   12484:	movne	r3, #300	; 0x12c
   12488:	strhne	r3, [r0]
   1248c:	movne	r0, #0
   12490:	mvneq	r0, #0
   12494:	pop	{r4, pc}
   12498:	mov	r3, #1
   1249c:	push	{r4, lr}
   124a0:	mov	r1, #6
   124a4:	mov	r2, r3
   124a8:	bl	152f8 <flatcc_builder_table_add@@Base>
   124ac:	subs	r3, r0, #0
   124b0:	movne	r0, #0
   124b4:	mvneq	r0, #0
   124b8:	strbne	r0, [r3]
   124bc:	pop	{r4, pc}
   124c0:	mov	r3, #0
   124c4:	push	{r4, lr}
   124c8:	mov	r4, r0
   124cc:	mov	r2, r3
   124d0:	mov	r1, r3
   124d4:	bl	13b98 <flatcc_builder_start_buffer@@Base>
   124d8:	cmp	r0, #0
   124dc:	bne	124f0 <_start@@Base+0x420>
   124e0:	mov	r0, r4
   124e4:	mov	r1, #10
   124e8:	pop	{r4, lr}
   124ec:	b	14374 <flatcc_builder_start_table@@Base>
   124f0:	mvn	r0, #0
   124f4:	pop	{r4, pc}

000124f8 <create_monster_bottom_up@@Base>:
   124f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   124fc:	mov	r5, r1
   12500:	sub	sp, sp, #24
   12504:	mov	r4, r0
   12508:	ldr	r1, [pc, #636]	; 1278c <create_monster_bottom_up@@Base+0x294>
   1250c:	bl	15204 <flatcc_builder_create_string_str@@Base>
   12510:	mov	r7, r0
   12514:	ldr	r1, [pc, #628]	; 12790 <create_monster_bottom_up@@Base+0x298>
   12518:	mov	r0, r4
   1251c:	bl	15204 <flatcc_builder_create_string_str@@Base>
   12520:	mov	r6, r0
   12524:	mov	r1, r7
   12528:	mov	r2, #3
   1252c:	mov	r0, r4
   12530:	bl	12250 <_start@@Base+0x180>
   12534:	mov	r8, r0
   12538:	mov	r2, #5
   1253c:	mov	r1, r6
   12540:	mov	r0, r4
   12544:	bl	12250 <_start@@Base+0x180>
   12548:	mov	r6, r0
   1254c:	ldr	r1, [pc, #576]	; 12794 <create_monster_bottom_up@@Base+0x29c>
   12550:	mov	r0, r4
   12554:	bl	15204 <flatcc_builder_create_string_str@@Base>
   12558:	ldr	r2, [pc, #568]	; 12798 <create_monster_bottom_up@@Base+0x2a0>
   1255c:	mov	r7, r0
   12560:	add	r3, sp, #12
   12564:	ldr	r0, [r2]
   12568:	ldr	r1, [r2, #4]
   1256c:	ldrh	r2, [r2, #8]
   12570:	stmia	r3!, {r0, r1}
   12574:	add	r1, sp, #12
   12578:	mov	r0, r4
   1257c:	strh	r2, [r3]
   12580:	mvn	r3, #0
   12584:	mov	r2, #10
   12588:	str	r3, [sp, #4]
   1258c:	mov	r3, #1
   12590:	str	r3, [sp]
   12594:	bl	14ad0 <flatcc_builder_create_vector@@Base>
   12598:	mov	r9, r0
   1259c:	mov	r0, r4
   125a0:	bl	142b4 <flatcc_builder_start_offset_vector@@Base>
   125a4:	cmp	r8, #0
   125a8:	beq	125b8 <create_monster_bottom_up@@Base+0xc0>
   125ac:	mov	r1, r8
   125b0:	mov	r0, r4
   125b4:	bl	13efc <flatcc_builder_offset_vector_push@@Base>
   125b8:	cmp	r6, #0
   125bc:	beq	125cc <create_monster_bottom_up@@Base+0xd4>
   125c0:	mov	r1, r6
   125c4:	mov	r0, r4
   125c8:	bl	13efc <flatcc_builder_offset_vector_push@@Base>
   125cc:	mov	r0, r4
   125d0:	bl	14c58 <flatcc_builder_end_offset_vector@@Base>
   125d4:	cmp	r5, #0
   125d8:	mov	r8, r0
   125dc:	bne	12700 <create_monster_bottom_up@@Base+0x208>
   125e0:	mov	r3, r5
   125e4:	mov	r2, r5
   125e8:	mov	r1, r5
   125ec:	mov	r0, r4
   125f0:	bl	13b98 <flatcc_builder_start_buffer@@Base>
   125f4:	subs	sl, r0, #0
   125f8:	bne	126f4 <create_monster_bottom_up@@Base+0x1fc>
   125fc:	mov	r1, #10
   12600:	mov	r0, r4
   12604:	bl	14374 <flatcc_builder_start_table@@Base>
   12608:	cmp	r0, #0
   1260c:	bne	126e8 <create_monster_bottom_up@@Base+0x1f0>
   12610:	mov	r3, #4
   12614:	mov	r2, #12
   12618:	mov	r1, r5
   1261c:	mov	r0, r4
   12620:	bl	152f8 <flatcc_builder_table_add@@Base>
   12624:	cmp	r0, #0
   12628:	beq	126e8 <create_monster_bottom_up@@Base+0x1f0>
   1262c:	mov	r3, #1065353216	; 0x3f800000
   12630:	mov	r1, r7
   12634:	str	r3, [r0]
   12638:	mov	r3, #1073741824	; 0x40000000
   1263c:	str	r3, [r0, #4]
   12640:	ldr	r3, [pc, #340]	; 1279c <create_monster_bottom_up@@Base+0x2a4>
   12644:	str	r3, [r0, #8]
   12648:	mov	r0, r4
   1264c:	bl	121c0 <_start@@Base+0xf0>
   12650:	cmp	r0, #0
   12654:	bne	126e8 <create_monster_bottom_up@@Base+0x1f0>
   12658:	mov	r1, r9
   1265c:	mov	r0, r4
   12660:	bl	121f0 <_start@@Base+0x120>
   12664:	cmp	r0, #0
   12668:	bne	126e8 <create_monster_bottom_up@@Base+0x1f0>
   1266c:	mov	r1, r8
   12670:	mov	r0, r4
   12674:	bl	12220 <_start@@Base+0x150>
   12678:	cmp	r0, #0
   1267c:	bne	126e8 <create_monster_bottom_up@@Base+0x1f0>
   12680:	mov	r1, #9
   12684:	mov	r0, r4
   12688:	bl	1549c <flatcc_builder_table_add_offset@@Base>
   1268c:	cmp	r0, #0
   12690:	beq	126e8 <create_monster_bottom_up@@Base+0x1f0>
   12694:	str	r6, [r0]
   12698:	mov	r0, r4
   1269c:	bl	1246c <_start@@Base+0x39c>
   126a0:	cmp	r0, #0
   126a4:	bne	126e8 <create_monster_bottom_up@@Base+0x1f0>
   126a8:	mov	r0, r4
   126ac:	bl	12498 <_start@@Base+0x3c8>
   126b0:	cmp	r0, #0
   126b4:	bne	126e8 <create_monster_bottom_up@@Base+0x1f0>
   126b8:	mov	r3, #1
   126bc:	mov	r1, #8
   126c0:	mov	r2, r3
   126c4:	mov	r0, r4
   126c8:	bl	152f8 <flatcc_builder_table_add@@Base>
   126cc:	cmp	r0, #0
   126d0:	beq	126e8 <create_monster_bottom_up@@Base+0x1f0>
   126d4:	mov	r3, #1
   126d8:	strb	r3, [r0]
   126dc:	mov	r0, r4
   126e0:	bl	123c8 <_start@@Base+0x2f8>
   126e4:	mov	sl, r0
   126e8:	mov	r1, sl
   126ec:	mov	r0, r4
   126f0:	bl	13c34 <flatcc_builder_end_buffer@@Base>
   126f4:	mov	r0, #0
   126f8:	add	sp, sp, #24
   126fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12700:	mov	r0, r4
   12704:	bl	124c0 <_start@@Base+0x3f0>
   12708:	mov	r3, #4
   1270c:	mov	r2, #12
   12710:	mov	r1, #0
   12714:	mov	r0, r4
   12718:	bl	152f8 <flatcc_builder_table_add@@Base>
   1271c:	cmp	r0, #0
   12720:	beq	1273c <create_monster_bottom_up@@Base+0x244>
   12724:	mov	r3, #1065353216	; 0x3f800000
   12728:	str	r3, [r0]
   1272c:	mov	r3, #1073741824	; 0x40000000
   12730:	str	r3, [r0, #4]
   12734:	ldr	r3, [pc, #96]	; 1279c <create_monster_bottom_up@@Base+0x2a4>
   12738:	str	r3, [r0, #8]
   1273c:	mov	r0, r4
   12740:	bl	1246c <_start@@Base+0x39c>
   12744:	mov	r1, r7
   12748:	mov	r0, r4
   1274c:	bl	121c0 <_start@@Base+0xf0>
   12750:	mov	r1, r9
   12754:	mov	r0, r4
   12758:	bl	121f0 <_start@@Base+0x120>
   1275c:	mov	r0, r4
   12760:	bl	12498 <_start@@Base+0x3c8>
   12764:	mov	r1, r8
   12768:	mov	r0, r4
   1276c:	bl	12220 <_start@@Base+0x150>
   12770:	mov	r1, r6
   12774:	mov	r0, r4
   12778:	bl	12414 <_start@@Base+0x344>
   1277c:	mov	r0, r4
   12780:	bl	123c8 <_start@@Base+0x2f8>
   12784:	mov	r1, r0
   12788:	b	126ec <create_monster_bottom_up@@Base+0x1f4>
   1278c:	andeq	r6, r1, r3, lsr r2
   12790:	andeq	r6, r1, r9, lsr r2
   12794:	andeq	r6, r1, sp, lsr r2
   12798:	strdeq	r5, [r1], -r6
   1279c:	submi	r0, r0, r0

000127a0 <create_monster_top_down@@Base>:
   127a0:	ldr	r2, [pc, #348]	; 12904 <create_monster_top_down@@Base+0x164>
   127a4:	push	{r4, r5, lr}
   127a8:	mov	r4, r0
   127ac:	sub	sp, sp, #28
   127b0:	add	r3, sp, #12
   127b4:	ldr	r0, [r2]
   127b8:	ldr	r1, [r2, #4]
   127bc:	ldrh	r2, [r2, #8]
   127c0:	stmia	r3!, {r0, r1}
   127c4:	mov	r0, r4
   127c8:	strh	r2, [r3]
   127cc:	bl	124c0 <_start@@Base+0x3f0>
   127d0:	mov	r3, #4
   127d4:	mov	r2, #12
   127d8:	mov	r1, #0
   127dc:	mov	r0, r4
   127e0:	bl	152f8 <flatcc_builder_table_add@@Base>
   127e4:	cmp	r0, #0
   127e8:	beq	12804 <create_monster_top_down@@Base+0x64>
   127ec:	mov	r3, #1065353216	; 0x3f800000
   127f0:	str	r3, [r0]
   127f4:	mov	r3, #1073741824	; 0x40000000
   127f8:	str	r3, [r0, #4]
   127fc:	ldr	r3, [pc, #260]	; 12908 <create_monster_top_down@@Base+0x168>
   12800:	str	r3, [r0, #8]
   12804:	mov	r0, r4
   12808:	bl	1246c <_start@@Base+0x39c>
   1280c:	ldr	r1, [pc, #248]	; 1290c <create_monster_top_down@@Base+0x16c>
   12810:	mov	r0, r4
   12814:	bl	15204 <flatcc_builder_create_string_str@@Base>
   12818:	mov	r1, r0
   1281c:	mov	r0, r4
   12820:	bl	121c0 <_start@@Base+0xf0>
   12824:	mvn	r3, #0
   12828:	mov	r2, #10
   1282c:	add	r1, sp, #12
   12830:	mov	r0, r4
   12834:	str	r3, [sp, #4]
   12838:	mov	r3, #1
   1283c:	str	r3, [sp]
   12840:	bl	14ad0 <flatcc_builder_create_vector@@Base>
   12844:	mov	r1, r0
   12848:	mov	r0, r4
   1284c:	bl	121f0 <_start@@Base+0x120>
   12850:	mov	r0, r4
   12854:	bl	12498 <_start@@Base+0x3c8>
   12858:	mov	r0, r4
   1285c:	bl	142b4 <flatcc_builder_start_offset_vector@@Base>
   12860:	ldr	r1, [pc, #168]	; 12910 <create_monster_top_down@@Base+0x170>
   12864:	mov	r0, r4
   12868:	bl	15204 <flatcc_builder_create_string_str@@Base>
   1286c:	mov	r1, r0
   12870:	mov	r2, #3
   12874:	mov	r0, r4
   12878:	bl	12250 <_start@@Base+0x180>
   1287c:	subs	r1, r0, #0
   12880:	beq	1288c <create_monster_top_down@@Base+0xec>
   12884:	mov	r0, r4
   12888:	bl	13efc <flatcc_builder_offset_vector_push@@Base>
   1288c:	ldr	r1, [pc, #128]	; 12914 <create_monster_top_down@@Base+0x174>
   12890:	mov	r0, r4
   12894:	bl	15204 <flatcc_builder_create_string_str@@Base>
   12898:	mov	r1, r0
   1289c:	mov	r2, #5
   128a0:	mov	r0, r4
   128a4:	bl	12250 <_start@@Base+0x180>
   128a8:	subs	r1, r0, #0
   128ac:	bne	128b8 <create_monster_top_down@@Base+0x118>
   128b0:	ldr	r3, [r1]
   128b4:	udf	#0
   128b8:	mov	r0, r4
   128bc:	bl	13efc <flatcc_builder_offset_vector_push@@Base>
   128c0:	ldr	r5, [r0]
   128c4:	mov	r0, r4
   128c8:	bl	14c58 <flatcc_builder_end_offset_vector@@Base>
   128cc:	mov	r1, r0
   128d0:	mov	r0, r4
   128d4:	bl	12220 <_start@@Base+0x150>
   128d8:	mov	r0, r4
   128dc:	mov	r1, r5
   128e0:	bl	12414 <_start@@Base+0x344>
   128e4:	mov	r0, r4
   128e8:	bl	123c8 <_start@@Base+0x2f8>
   128ec:	mov	r1, r0
   128f0:	mov	r0, r4
   128f4:	bl	13c34 <flatcc_builder_end_buffer@@Base>
   128f8:	mov	r0, #0
   128fc:	add	sp, sp, #28
   12900:	pop	{r4, r5, pc}
   12904:	strdeq	r5, [r1], -r6
   12908:	submi	r0, r0, r0
   1290c:	andeq	r6, r1, sp, lsr r2
   12910:	andeq	r6, r1, r3, lsr r2
   12914:	andeq	r6, r1, r9, lsr r2

00012918 <access_monster_buffer@@Base>:
   12918:	cmp	r0, #0
   1291c:	push	{r4, r5, r6, r7, r8, lr}
   12920:	beq	12930 <access_monster_buffer@@Base+0x18>
   12924:	ldr	r3, [r0]
   12928:	adds	r4, r0, r3
   1292c:	bne	12944 <access_monster_buffer@@Base+0x2c>
   12930:	ldr	r3, [pc, #776]	; 12c40 <access_monster_buffer@@Base+0x328>
   12934:	mov	r2, #211	; 0xd3
   12938:	ldr	r1, [pc, #772]	; 12c44 <access_monster_buffer@@Base+0x32c>
   1293c:	ldr	r0, [pc, #772]	; 12c48 <access_monster_buffer@@Base+0x330>
   12940:	bl	11fd4 <__assert_fail@plt>
   12944:	ldr	r5, [r0, r3]
   12948:	sub	r5, r4, r5
   1294c:	ldrh	r7, [r5]
   12950:	cmp	r7, #9
   12954:	bls	12a0c <access_monster_buffer@@Base+0xf4>
   12958:	ldrh	r3, [r5, #8]
   1295c:	cmp	r3, #0
   12960:	ldrshne	r3, [r4, r3]
   12964:	bne	1296c <access_monster_buffer@@Base+0x54>
   12968:	mov	r3, #100	; 0x64
   1296c:	ldrh	r8, [r5, #6]
   12970:	cmp	r8, #0
   12974:	ldrshne	r2, [r4, r8]
   12978:	moveq	r2, #150	; 0x96
   1297c:	cmp	r7, #11
   12980:	bls	12a20 <access_monster_buffer@@Base+0x108>
   12984:	ldrh	r0, [r5, #10]
   12988:	cmp	r0, #0
   1298c:	beq	129a8 <access_monster_buffer@@Base+0x90>
   12990:	add	r1, r4, r0
   12994:	ldr	r0, [r4, r0]
   12998:	add	r0, r0, #4
   1299c:	adds	r0, r1, r0
   129a0:	ldrne	r6, [r0, #-4]
   129a4:	bne	129ac <access_monster_buffer@@Base+0x94>
   129a8:	mov	r6, r0
   129ac:	cmp	r3, #300	; 0x12c
   129b0:	bne	12a14 <access_monster_buffer@@Base+0xfc>
   129b4:	cmp	r2, #150	; 0x96
   129b8:	ldrne	r3, [pc, #640]	; 12c40 <access_monster_buffer@@Base+0x328>
   129bc:	movne	r2, #221	; 0xdd
   129c0:	bne	12938 <access_monster_buffer@@Base+0x20>
   129c4:	ldr	r1, [pc, #640]	; 12c4c <access_monster_buffer@@Base+0x334>
   129c8:	bl	11f2c <strcmp@plt>
   129cc:	cmp	r0, #0
   129d0:	ldrne	r3, [pc, #616]	; 12c40 <access_monster_buffer@@Base+0x328>
   129d4:	movne	r2, #222	; 0xde
   129d8:	bne	12938 <access_monster_buffer@@Base+0x20>
   129dc:	cmp	r6, #3
   129e0:	ldrne	r3, [pc, #600]	; 12c40 <access_monster_buffer@@Base+0x328>
   129e4:	movne	r2, #223	; 0xdf
   129e8:	bne	12938 <access_monster_buffer@@Base+0x20>
   129ec:	cmp	r7, #9
   129f0:	bls	12a00 <access_monster_buffer@@Base+0xe8>
   129f4:	ldrh	r3, [r5, #8]
   129f8:	cmp	r3, #0
   129fc:	bne	12a28 <access_monster_buffer@@Base+0x110>
   12a00:	ldr	r3, [pc, #568]	; 12c40 <access_monster_buffer@@Base+0x328>
   12a04:	mov	r2, #227	; 0xe3
   12a08:	b	12938 <access_monster_buffer@@Base+0x20>
   12a0c:	cmp	r7, #7
   12a10:	bhi	12968 <access_monster_buffer@@Base+0x50>
   12a14:	ldr	r3, [pc, #548]	; 12c40 <access_monster_buffer@@Base+0x328>
   12a18:	mov	r2, #219	; 0xdb
   12a1c:	b	12938 <access_monster_buffer@@Base+0x20>
   12a20:	mov	r0, #0
   12a24:	b	129a8 <access_monster_buffer@@Base+0x90>
   12a28:	cmp	r8, #0
   12a2c:	ldrne	r3, [pc, #524]	; 12c40 <access_monster_buffer@@Base+0x328>
   12a30:	movne	r2, #228	; 0xe4
   12a34:	bne	12938 <access_monster_buffer@@Base+0x20>
   12a38:	ldrh	r3, [r5, #4]
   12a3c:	cmp	r3, #0
   12a40:	beq	12a4c <access_monster_buffer@@Base+0x134>
   12a44:	adds	r3, r4, r3
   12a48:	bne	12a58 <access_monster_buffer@@Base+0x140>
   12a4c:	ldr	r3, [pc, #492]	; 12c40 <access_monster_buffer@@Base+0x328>
   12a50:	mov	r2, #232	; 0xe8
   12a54:	b	12938 <access_monster_buffer@@Base+0x20>
   12a58:	vldr	s15, [pc, #468]	; 12c34 <access_monster_buffer@@Base+0x31c>
   12a5c:	vldr	s12, [r3]
   12a60:	vldr	s13, [r3, #4]
   12a64:	vldr	s14, [r3, #8]
   12a68:	vcmp.f32	s12, s15
   12a6c:	vmrs	APSR_nzcv, fpscr
   12a70:	ldrne	r3, [pc, #456]	; 12c40 <access_monster_buffer@@Base+0x328>
   12a74:	movne	r2, #240	; 0xf0
   12a78:	bne	12938 <access_monster_buffer@@Base+0x20>
   12a7c:	vldr	s15, [pc, #436]	; 12c38 <access_monster_buffer@@Base+0x320>
   12a80:	vcmp.f32	s13, s15
   12a84:	vmrs	APSR_nzcv, fpscr
   12a88:	ldrne	r3, [pc, #432]	; 12c40 <access_monster_buffer@@Base+0x328>
   12a8c:	movne	r2, #241	; 0xf1
   12a90:	bne	12938 <access_monster_buffer@@Base+0x20>
   12a94:	vldr	s15, [pc, #416]	; 12c3c <access_monster_buffer@@Base+0x324>
   12a98:	vcmp.f32	s14, s15
   12a9c:	vmrs	APSR_nzcv, fpscr
   12aa0:	ldrne	r3, [pc, #408]	; 12c40 <access_monster_buffer@@Base+0x328>
   12aa4:	movne	r2, #242	; 0xf2
   12aa8:	bne	12938 <access_monster_buffer@@Base+0x20>
   12aac:	cmp	r7, #15
   12ab0:	bls	12c28 <access_monster_buffer@@Base+0x310>
   12ab4:	ldrh	r2, [r5, #14]
   12ab8:	cmp	r2, #0
   12abc:	beq	12c28 <access_monster_buffer@@Base+0x310>
   12ac0:	add	r3, r4, r2
   12ac4:	ldr	r2, [r4, r2]
   12ac8:	add	r2, r2, #4
   12acc:	adds	r3, r3, r2
   12ad0:	beq	12c28 <access_monster_buffer@@Base+0x310>
   12ad4:	ldr	r2, [r3, #-4]
   12ad8:	cmp	r2, #10
   12adc:	ldrne	r3, [pc, #348]	; 12c40 <access_monster_buffer@@Base+0x328>
   12ae0:	movwne	r2, #263	; 0x107
   12ae4:	bne	12938 <access_monster_buffer@@Base+0x20>
   12ae8:	ldrb	r3, [r3, #2]
   12aec:	cmp	r3, #2
   12af0:	ldrne	r3, [pc, #328]	; 12c40 <access_monster_buffer@@Base+0x328>
   12af4:	movwne	r2, #267	; 0x10b
   12af8:	bne	12938 <access_monster_buffer@@Base+0x20>
   12afc:	cmp	r7, #19
   12b00:	bls	12b30 <access_monster_buffer@@Base+0x218>
   12b04:	ldrh	r2, [r5, #18]
   12b08:	cmp	r2, #0
   12b0c:	beq	12b30 <access_monster_buffer@@Base+0x218>
   12b10:	add	r3, r4, r2
   12b14:	ldr	r2, [r4, r2]
   12b18:	add	r2, r2, #4
   12b1c:	adds	r3, r3, r2
   12b20:	beq	12b30 <access_monster_buffer@@Base+0x218>
   12b24:	ldr	r2, [r3, #-4]
   12b28:	cmp	r2, #2
   12b2c:	beq	12b3c <access_monster_buffer@@Base+0x224>
   12b30:	ldr	r3, [pc, #264]	; 12c40 <access_monster_buffer@@Base+0x328>
   12b34:	movw	r2, #271	; 0x10f
   12b38:	b	12938 <access_monster_buffer@@Base+0x20>
   12b3c:	ldr	r6, [r3, #4]
   12b40:	add	r6, r6, #4
   12b44:	add	r6, r3, r6
   12b48:	mov	r0, r6
   12b4c:	bl	1230c <_start@@Base+0x23c>
   12b50:	mov	r8, r0
   12b54:	mov	r0, r6
   12b58:	bl	12370 <_start@@Base+0x2a0>
   12b5c:	cmp	r8, #0
   12b60:	mov	r6, r0
   12b64:	beq	12b7c <access_monster_buffer@@Base+0x264>
   12b68:	ldr	r1, [pc, #224]	; 12c50 <access_monster_buffer@@Base+0x338>
   12b6c:	mov	r0, r8
   12b70:	bl	11f2c <strcmp@plt>
   12b74:	cmp	r0, #0
   12b78:	beq	12b88 <access_monster_buffer@@Base+0x270>
   12b7c:	ldr	r3, [pc, #188]	; 12c40 <access_monster_buffer@@Base+0x328>
   12b80:	movw	r2, #275	; 0x113
   12b84:	b	12938 <access_monster_buffer@@Base+0x20>
   12b88:	cmp	r6, #5
   12b8c:	ldrne	r3, [pc, #172]	; 12c40 <access_monster_buffer@@Base+0x328>
   12b90:	movne	r2, #276	; 0x114
   12b94:	bne	12938 <access_monster_buffer@@Base+0x20>
   12b98:	cmp	r7, #21
   12b9c:	bls	12c20 <access_monster_buffer@@Base+0x308>
   12ba0:	ldrh	r3, [r5, #20]
   12ba4:	cmp	r3, #0
   12ba8:	beq	12c20 <access_monster_buffer@@Base+0x308>
   12bac:	ldrb	r3, [r4, r3]
   12bb0:	cmp	r3, #1
   12bb4:	bne	12c20 <access_monster_buffer@@Base+0x308>
   12bb8:	cmp	r7, #23
   12bbc:	bls	12bd8 <access_monster_buffer@@Base+0x2c0>
   12bc0:	ldrh	r0, [r5, #22]
   12bc4:	cmp	r0, #0
   12bc8:	addne	r3, r4, r0
   12bcc:	ldrne	r4, [r4, r0]
   12bd0:	addne	r4, r3, r4
   12bd4:	bne	12bdc <access_monster_buffer@@Base+0x2c4>
   12bd8:	mov	r4, r0
   12bdc:	mov	r0, r4
   12be0:	bl	1230c <_start@@Base+0x23c>
   12be4:	mov	r5, r0
   12be8:	mov	r0, r4
   12bec:	bl	12370 <_start@@Base+0x2a0>
   12bf0:	mov	r4, r0
   12bf4:	ldr	r1, [pc, #84]	; 12c50 <access_monster_buffer@@Base+0x338>
   12bf8:	mov	r0, r5
   12bfc:	bl	11f2c <strcmp@plt>
   12c00:	cmp	r0, #0
   12c04:	ldrne	r3, [pc, #52]	; 12c40 <access_monster_buffer@@Base+0x328>
   12c08:	movwne	r2, #286	; 0x11e
   12c0c:	bne	12938 <access_monster_buffer@@Base+0x20>
   12c10:	cmp	r4, #5
   12c14:	ldrne	r3, [pc, #36]	; 12c40 <access_monster_buffer@@Base+0x328>
   12c18:	movwne	r2, #287	; 0x11f
   12c1c:	bne	12938 <access_monster_buffer@@Base+0x20>
   12c20:	mov	r0, #0
   12c24:	pop	{r4, r5, r6, r7, r8, pc}
   12c28:	ldr	r3, [pc, #16]	; 12c40 <access_monster_buffer@@Base+0x328>
   12c2c:	movw	r2, #261	; 0x105
   12c30:	b	12938 <access_monster_buffer@@Base+0x20>
   12c34:	svccc	0x00800000
   12c38:	andmi	r0, r0, r0
   12c3c:	submi	r0, r0, r0
   12c40:	andeq	r6, r1, r0
   12c44:	andeq	r6, r1, r1, asr #4
   12c48:	andeq	r6, r1, sp, lsr #20
   12c4c:	andeq	r6, r1, sp, lsr r2
   12c50:	andeq	r6, r1, r9, lsr r2
   12c54:	ldr	ip, [r0, #28]
   12c58:	ldrd	r2, [r0, #60]	; 0x3c
   12c5c:	sub	r3, r3, ip
   12c60:	add	r2, r2, ip
   12c64:	cmp	r3, r1
   12c68:	strls	r3, [r0, #24]
   12c6c:	strhi	r1, [r0, #24]
   12c70:	ldr	r3, [r0, #32]
   12c74:	str	r2, [r0, #16]
   12c78:	str	r1, [r3, #4]
   12c7c:	bx	lr
   12c80:	push	{r0, r1, r4, r5, r6, lr}
   12c84:	mov	r6, r2
   12c88:	mov	r3, #1
   12c8c:	mov	r4, r0
   12c90:	ldr	r2, [r0, #28]
   12c94:	str	r3, [sp]
   12c98:	ldr	r5, [r0, #48]	; 0x30
   12c9c:	add	r2, r1, r2
   12ca0:	add	r1, r0, #60	; 0x3c
   12ca4:	ldr	r0, [r0, #40]	; 0x28
   12ca8:	blx	r5
   12cac:	subs	r5, r0, #0
   12cb0:	mvnne	r5, #0
   12cb4:	bne	12cc4 <access_monster_buffer@@Base+0x3ac>
   12cb8:	mov	r1, r6
   12cbc:	mov	r0, r4
   12cc0:	bl	12c54 <access_monster_buffer@@Base+0x33c>
   12cc4:	mov	r0, r5
   12cc8:	add	sp, sp, #8
   12ccc:	pop	{r4, r5, r6, pc}
   12cd0:	push	{r4, r5, r6, lr}
   12cd4:	mov	r4, r0
   12cd8:	ldr	r5, [r0, #20]
   12cdc:	ldr	r3, [r0, #24]
   12ce0:	add	r1, r5, r1
   12ce4:	cmp	r1, r3
   12ce8:	str	r1, [r0, #20]
   12cec:	bcs	12cfc <access_monster_buffer@@Base+0x3e4>
   12cf0:	ldr	r0, [r4, #16]
   12cf4:	add	r0, r0, r5
   12cf8:	pop	{r4, r5, r6, pc}
   12cfc:	mvn	r2, #3
   12d00:	add	r1, r1, #1
   12d04:	bl	12c80 <access_monster_buffer@@Base+0x368>
   12d08:	cmp	r0, #0
   12d0c:	beq	12cf0 <access_monster_buffer@@Base+0x3d8>
   12d10:	mov	r0, #0
   12d14:	pop	{r4, r5, r6, pc}
   12d18:	push	{r4, lr}
   12d1c:	mov	r1, #0
   12d20:	mov	r4, r0
   12d24:	ldr	r2, [r0, #20]
   12d28:	ldr	r0, [r0, #16]
   12d2c:	bl	11fb0 <memset@plt>
   12d30:	ldr	r3, [r4, #32]
   12d34:	mov	r0, r4
   12d38:	ldmib	r3, {r1, r2}
   12d3c:	str	r2, [r4, #20]
   12d40:	ldr	r2, [r3]
   12d44:	str	r2, [r4, #28]
   12d48:	bl	12c54 <access_monster_buffer@@Base+0x33c>
   12d4c:	ldrh	r3, [r4, #130]	; 0x82
   12d50:	ldrh	r2, [r4, #128]	; 0x80
   12d54:	cmp	r2, r3
   12d58:	strhcc	r3, [r4, #128]	; 0x80
   12d5c:	ldr	r3, [r4, #32]
   12d60:	ldrh	r2, [r3, #12]
   12d64:	sub	r3, r3, #36	; 0x24
   12d68:	str	r3, [r4, #32]
   12d6c:	ldr	r3, [r4, #156]	; 0x9c
   12d70:	strh	r2, [r4, #130]	; 0x82
   12d74:	sub	r3, r3, #1
   12d78:	str	r3, [r4, #156]	; 0x9c
   12d7c:	pop	{r4, pc}
   12d80:	ldr	r3, [r0, #20]
   12d84:	mov	r2, r1
   12d88:	mov	r1, #0
   12d8c:	sub	r3, r3, r2
   12d90:	str	r3, [r0, #20]
   12d94:	ldr	r0, [r0, #16]
   12d98:	add	r0, r0, r3
   12d9c:	b	11fb0 <memset@plt>
   12da0:	push	{r4, r5, r6, lr}
   12da4:	mov	r6, r1
   12da8:	mov	r1, r2
   12dac:	mov	r4, r2
   12db0:	bl	12cd0 <access_monster_buffer@@Base+0x3b8>
   12db4:	subs	r5, r0, #0
   12db8:	beq	12dc8 <access_monster_buffer@@Base+0x4b0>
   12dbc:	mov	r2, r4
   12dc0:	mov	r1, r6
   12dc4:	bl	11f44 <memcpy@plt>
   12dc8:	mov	r0, r5
   12dcc:	pop	{r4, r5, r6, pc}
   12dd0:	push	{r0, r1, r4, lr}
   12dd4:	cmp	r0, #4
   12dd8:	mov	r4, #0
   12ddc:	mov	r2, r1
   12de0:	movcs	r1, r0
   12de4:	movcc	r1, #4
   12de8:	add	r0, sp, #4
   12dec:	str	r4, [sp, #4]
   12df0:	bl	11fa4 <posix_memalign@plt>
   12df4:	cmp	r0, r4
   12df8:	beq	12e10 <access_monster_buffer@@Base+0x4f8>
   12dfc:	ldr	r0, [sp, #4]
   12e00:	cmp	r0, r4
   12e04:	beq	12e10 <access_monster_buffer@@Base+0x4f8>
   12e08:	bl	11f38 <free@plt>
   12e0c:	str	r4, [sp, #4]
   12e10:	ldr	r0, [sp, #4]
   12e14:	add	sp, sp, #8
   12e18:	pop	{r4, pc}

00012e1c <flatcc_builder_default_alloc@@Base>:
   12e1c:	push	{r4, r5, r6, r7, r8, lr}
   12e20:	subs	r6, r2, #0
   12e24:	mov	r5, r1
   12e28:	bne	12e4c <flatcc_builder_default_alloc@@Base+0x30>
   12e2c:	ldr	r0, [r1]
   12e30:	cmp	r0, #0
   12e34:	popeq	{r4, r5, r6, r7, r8, pc}
   12e38:	bl	11f38 <free@plt>
   12e3c:	str	r6, [r5]
   12e40:	str	r6, [r5, #4]
   12e44:	mov	r0, #0
   12e48:	pop	{r4, r5, r6, r7, r8, pc}
   12e4c:	ldr	r2, [sp, #24]
   12e50:	mov	r7, r3
   12e54:	sub	r2, r2, #1
   12e58:	cmp	r2, #6
   12e5c:	ldrls	pc, [pc, r2, lsl #2]
   12e60:	b	12ef4 <flatcc_builder_default_alloc@@Base+0xd8>
   12e64:	strdeq	r2, [r1], -ip
   12e68:	strdeq	r2, [r1], -r4
   12e6c:	strdeq	r2, [r1], -r4
   12e70:	andeq	r2, r1, r4, ror #29
   12e74:	andeq	r2, r1, r0, lsl #29
   12e78:	strdeq	r2, [r1], -r4
   12e7c:	andeq	r2, r1, ip, ror #29
   12e80:	mov	r4, r6
   12e84:	cmp	r6, r4
   12e88:	bhi	12f04 <flatcc_builder_default_alloc@@Base+0xe8>
   12e8c:	ldr	r2, [r5, #4]
   12e90:	cmp	r6, r2
   12e94:	bhi	12ea0 <flatcc_builder_default_alloc@@Base+0x84>
   12e98:	cmp	r4, r2, lsr #1
   12e9c:	bls	12e44 <flatcc_builder_default_alloc@@Base+0x28>
   12ea0:	mov	r1, r4
   12ea4:	ldr	r0, [r5]
   12ea8:	bl	11f5c <realloc@plt>
   12eac:	subs	r6, r0, #0
   12eb0:	beq	12f0c <flatcc_builder_default_alloc@@Base+0xf0>
   12eb4:	cmp	r7, #0
   12eb8:	beq	12ed8 <flatcc_builder_default_alloc@@Base+0xbc>
   12ebc:	ldr	r0, [r5, #4]
   12ec0:	cmp	r4, r0
   12ec4:	bls	12ed8 <flatcc_builder_default_alloc@@Base+0xbc>
   12ec8:	sub	r2, r4, r0
   12ecc:	mov	r1, #0
   12ed0:	add	r0, r6, r0
   12ed4:	bl	11fb0 <memset@plt>
   12ed8:	str	r6, [r5]
   12edc:	str	r4, [r5, #4]
   12ee0:	b	12e44 <flatcc_builder_default_alloc@@Base+0x28>
   12ee4:	mov	r4, #288	; 0x120
   12ee8:	b	12e84 <flatcc_builder_default_alloc@@Base+0x68>
   12eec:	mov	r4, #64	; 0x40
   12ef0:	b	12e84 <flatcc_builder_default_alloc@@Base+0x68>
   12ef4:	mov	r4, #32
   12ef8:	b	12e84 <flatcc_builder_default_alloc@@Base+0x68>
   12efc:	mov	r4, #256	; 0x100
   12f00:	b	12e84 <flatcc_builder_default_alloc@@Base+0x68>
   12f04:	lsl	r4, r4, #1
   12f08:	b	12e84 <flatcc_builder_default_alloc@@Base+0x68>
   12f0c:	mvn	r0, #0
   12f10:	pop	{r4, r5, r6, r7, r8, pc}
   12f14:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12f18:	add	r6, r0, #52	; 0x34
   12f1c:	mov	r4, r1
   12f20:	add	r1, r6, r1, lsl #3
   12f24:	mov	r5, r2
   12f28:	add	r2, r2, r3
   12f2c:	ldr	r3, [r1, #4]
   12f30:	cmp	r2, r3
   12f34:	bls	12f68 <flatcc_builder_default_alloc@@Base+0x14c>
   12f38:	str	r4, [sp]
   12f3c:	ldr	r3, [sp, #32]
   12f40:	ldr	r7, [r0, #48]	; 0x30
   12f44:	ldr	r0, [r0, #40]	; 0x28
   12f48:	blx	r7
   12f4c:	cmp	r0, #0
   12f50:	beq	12f68 <flatcc_builder_default_alloc@@Base+0x14c>
   12f54:	ldr	r3, [pc, #28]	; 12f78 <flatcc_builder_default_alloc@@Base+0x15c>
   12f58:	mov	r2, #308	; 0x134
   12f5c:	ldr	r1, [pc, #24]	; 12f7c <flatcc_builder_default_alloc@@Base+0x160>
   12f60:	ldr	r0, [pc, #24]	; 12f80 <flatcc_builder_default_alloc@@Base+0x164>
   12f64:	bl	11fd4 <__assert_fail@plt>
   12f68:	ldr	r0, [r6, r4, lsl #3]
   12f6c:	add	r0, r0, r5
   12f70:	add	sp, sp, #12
   12f74:	pop	{r4, r5, r6, r7, pc}
   12f78:	andeq	r6, r1, r1, asr #5
   12f7c:	andeq	r6, r1, r0, asr #19
   12f80:	andeq	r6, r1, sp, lsr #20
   12f84:	ldrd	r2, [r0, #156]	; 0x9c
   12f88:	push	{r0, r1, r4, r5, r6, lr}
   12f8c:	mov	r5, r1
   12f90:	mov	r4, r0
   12f94:	add	r1, r2, #1
   12f98:	cmp	r1, r3
   12f9c:	str	r1, [r0, #156]	; 0x9c
   12fa0:	ble	1304c <flatcc_builder_default_alloc@@Base+0x230>
   12fa4:	ldr	r3, [r0, #176]	; 0xb0
   12fa8:	cmp	r1, r3
   12fac:	cmpgt	r3, #0
   12fb0:	movgt	r3, #1
   12fb4:	movle	r3, #0
   12fb8:	ble	12fc8 <flatcc_builder_default_alloc@@Base+0x1ac>
   12fbc:	mvn	r0, #0
   12fc0:	add	sp, sp, #8
   12fc4:	pop	{r4, r5, r6, pc}
   12fc8:	mov	r6, #36	; 0x24
   12fcc:	mov	r1, #4
   12fd0:	str	r3, [sp]
   12fd4:	mov	r3, r6
   12fd8:	mul	r2, r6, r2
   12fdc:	bl	12f14 <flatcc_builder_default_alloc@@Base+0xf8>
   12fe0:	cmp	r0, #0
   12fe4:	str	r0, [r4, #32]
   12fe8:	beq	12fbc <flatcc_builder_default_alloc@@Base+0x1a0>
   12fec:	ldr	r3, [r4, #88]	; 0x58
   12ff0:	ldr	r2, [r4, #176]	; 0xb0
   12ff4:	udiv	r3, r3, r6
   12ff8:	cmp	r2, #0
   12ffc:	cmpgt	r3, r2
   13000:	movgt	r3, r2
   13004:	str	r3, [r4, #160]	; 0xa0
   13008:	ldrh	r1, [r4, #130]	; 0x82
   1300c:	mvn	r0, #3
   13010:	ldr	r3, [r4, #20]
   13014:	ldr	r2, [r4, #32]
   13018:	str	r3, [r2, #8]
   1301c:	strh	r1, [r2, #12]
   13020:	ldr	r1, [r4, #28]
   13024:	strh	r5, [r4, #130]	; 0x82
   13028:	add	r3, r3, r1
   1302c:	str	r0, [r2, #4]
   13030:	mov	r0, #0
   13034:	add	r3, r3, #7
   13038:	str	r1, [r2]
   1303c:	bic	r3, r3, #7
   13040:	str	r0, [r4, #20]
   13044:	str	r3, [r4, #28]
   13048:	b	12fc0 <flatcc_builder_default_alloc@@Base+0x1a4>
   1304c:	ldr	r3, [r0, #32]
   13050:	add	r3, r3, #36	; 0x24
   13054:	str	r3, [r0, #32]
   13058:	b	13008 <flatcc_builder_default_alloc@@Base+0x1ec>
   1305c:	ldr	r3, [r0, #32]
   13060:	push	{r0, r1, r2, r4, r5, lr}
   13064:	add	r1, r1, #2
   13068:	mov	r4, r0
   1306c:	lsl	r5, r1, #1
   13070:	ldrh	r1, [r3, #28]
   13074:	ldr	r2, [r3, #16]
   13078:	mov	r3, #1
   1307c:	str	r3, [sp]
   13080:	mov	r3, r5
   13084:	add	r2, r2, r1, lsl #1
   13088:	mov	r1, #0
   1308c:	bl	12f14 <flatcc_builder_default_alloc@@Base+0xf8>
   13090:	cmp	r0, #0
   13094:	streq	r0, [r4, #4]
   13098:	mvneq	r0, #0
   1309c:	beq	130d8 <flatcc_builder_default_alloc@@Base+0x2bc>
   130a0:	ldr	r2, [r4, #32]
   130a4:	add	r0, r0, #4
   130a8:	mov	r3, #0
   130ac:	mov	r1, #3
   130b0:	str	r0, [r4, #4]
   130b4:	mov	r0, r4
   130b8:	str	r3, [sp]
   130bc:	sub	r3, r5, #3
   130c0:	ldr	r2, [r2, #20]
   130c4:	bl	12f14 <flatcc_builder_default_alloc@@Base+0xf8>
   130c8:	str	r0, [r4]
   130cc:	clz	r0, r0
   130d0:	lsr	r0, r0, #5
   130d4:	rsb	r0, r0, #0
   130d8:	add	sp, sp, #12
   130dc:	pop	{r4, r5, pc}
   130e0:	push	{r0, r1, r2, r4, r5, lr}
   130e4:	ldr	r3, [r1]
   130e8:	ldr	r4, [r0, #140]	; 0x8c
   130ec:	add	r2, r3, r4
   130f0:	cmp	r2, r4
   130f4:	ldrlt	r3, [pc, #76]	; 13148 <flatcc_builder_default_alloc@@Base+0x32c>
   130f8:	str	r2, [r0, #140]	; 0x8c
   130fc:	movwlt	r2, #673	; 0x2a1
   13100:	blt	13130 <flatcc_builder_default_alloc@@Base+0x314>
   13104:	add	r1, r1, #8
   13108:	str	r3, [sp]
   1310c:	mov	r3, r4
   13110:	ldr	r2, [r1, #-4]
   13114:	ldr	r5, [r0, #44]	; 0x2c
   13118:	ldr	r0, [r0, #36]	; 0x24
   1311c:	blx	r5
   13120:	cmp	r0, #0
   13124:	beq	1313c <flatcc_builder_default_alloc@@Base+0x320>
   13128:	ldr	r3, [pc, #24]	; 13148 <flatcc_builder_default_alloc@@Base+0x32c>
   1312c:	movw	r2, #677	; 0x2a5
   13130:	ldr	r1, [pc, #20]	; 1314c <flatcc_builder_default_alloc@@Base+0x330>
   13134:	ldr	r0, [pc, #20]	; 13150 <flatcc_builder_default_alloc@@Base+0x334>
   13138:	bl	11fd4 <__assert_fail@plt>
   1313c:	add	r0, r4, #1
   13140:	add	sp, sp, #12
   13144:	pop	{r4, r5, pc}
   13148:	ldrdeq	r6, [r1], -r0
   1314c:	andeq	r6, r1, r0, asr #19
   13150:	andeq	r6, r1, sp, lsr #20
   13154:	cmp	r2, #0
   13158:	bne	13168 <flatcc_builder_default_alloc@@Base+0x34c>
   1315c:	ldrh	r2, [r0, #132]	; 0x84
   13160:	cmp	r2, #0
   13164:	moveq	r2, #1
   13168:	ldrh	ip, [r1]
   1316c:	cmp	ip, #3
   13170:	movls	ip, #4
   13174:	strhls	ip, [r1]
   13178:	ldrh	ip, [r1]
   1317c:	cmp	ip, r2
   13180:	strhcc	r2, [r1]
   13184:	cmp	r3, #0
   13188:	bne	131e8 <flatcc_builder_default_alloc@@Base+0x3cc>
   1318c:	ldr	r3, [r0, #140]	; 0x8c
   13190:	sub	r2, r2, #1
   13194:	ands	r2, r2, r3
   13198:	beq	131e8 <flatcc_builder_default_alloc@@Base+0x3cc>
   1319c:	push	{r4, lr}
   131a0:	mov	r3, #1
   131a4:	sub	sp, sp, #72	; 0x48
   131a8:	mov	r1, sp
   131ac:	ldr	r4, [pc, #60]	; 131f0 <flatcc_builder_default_alloc@@Base+0x3d4>
   131b0:	strd	r2, [sp]
   131b4:	str	r4, [sp, #8]
   131b8:	str	r2, [sp, #12]
   131bc:	bl	130e0 <flatcc_builder_default_alloc@@Base+0x2c4>
   131c0:	cmp	r0, #0
   131c4:	bne	131dc <flatcc_builder_default_alloc@@Base+0x3c0>
   131c8:	add	r3, r4, #512	; 0x200
   131cc:	movw	r2, #702	; 0x2be
   131d0:	ldr	r1, [pc, #28]	; 131f4 <flatcc_builder_default_alloc@@Base+0x3d8>
   131d4:	ldr	r0, [pc, #28]	; 131f8 <flatcc_builder_default_alloc@@Base+0x3dc>
   131d8:	bl	11fd4 <__assert_fail@plt>
   131dc:	mov	r0, #0
   131e0:	add	sp, sp, #72	; 0x48
   131e4:	pop	{r4, pc}
   131e8:	mov	r0, #0
   131ec:	bx	lr
   131f0:	ldrdeq	r6, [r1], -sl
   131f4:	andeq	r6, r1, r0, asr #19
   131f8:	andeq	r6, r1, sp, lsr #20
   131fc:	ldr	r3, [r1]
   13200:	push	{r0, r1, r4, r5, r6, lr}
   13204:	ldr	r2, [r0, #136]	; 0x88
   13208:	sub	r4, r2, r3
   1320c:	cmp	r2, r4
   13210:	ldrle	r3, [pc, #80]	; 13268 <flatcc_builder_default_alloc@@Base+0x44c>
   13214:	movwle	r2, #647	; 0x287
   13218:	ble	1324c <flatcc_builder_default_alloc@@Base+0x430>
   1321c:	mov	r5, r0
   13220:	add	r1, r1, #8
   13224:	str	r3, [sp]
   13228:	mov	r3, r4
   1322c:	ldr	r2, [r1, #-4]
   13230:	ldr	r0, [r0, #36]	; 0x24
   13234:	ldr	r6, [r5, #44]	; 0x2c
   13238:	blx	r6
   1323c:	cmp	r0, #0
   13240:	beq	13258 <flatcc_builder_default_alloc@@Base+0x43c>
   13244:	ldr	r3, [pc, #28]	; 13268 <flatcc_builder_default_alloc@@Base+0x44c>
   13248:	movw	r2, #651	; 0x28b
   1324c:	ldr	r1, [pc, #24]	; 1326c <flatcc_builder_default_alloc@@Base+0x450>
   13250:	ldr	r0, [pc, #24]	; 13270 <flatcc_builder_default_alloc@@Base+0x454>
   13254:	bl	11fd4 <__assert_fail@plt>
   13258:	mov	r0, r4
   1325c:	str	r4, [r5, #136]	; 0x88
   13260:	add	sp, sp, #8
   13264:	pop	{r4, r5, r6, pc}
   13268:	andeq	r6, r1, r9, ror #9
   1326c:	andeq	r6, r1, r0, asr #19
   13270:	andeq	r6, r1, sp, lsr #20
   13274:	ldr	r3, [r0, #20]
   13278:	adds	r1, r3, r1
   1327c:	movcs	r3, #1
   13280:	movcc	r3, #0
   13284:	cmp	r1, r2
   13288:	movls	r2, r3
   1328c:	orrhi	r2, r3, #1
   13290:	cmp	r2, #0
   13294:	beq	132b0 <flatcc_builder_default_alloc@@Base+0x494>
   13298:	push	{r4, lr}
   1329c:	mov	r2, #892	; 0x37c
   132a0:	ldr	r3, [pc, #20]	; 132bc <flatcc_builder_default_alloc@@Base+0x4a0>
   132a4:	ldr	r1, [pc, #20]	; 132c0 <flatcc_builder_default_alloc@@Base+0x4a4>
   132a8:	ldr	r0, [pc, #20]	; 132c4 <flatcc_builder_default_alloc@@Base+0x4a8>
   132ac:	bl	11fd4 <__assert_fail@plt>
   132b0:	str	r1, [r0, #20]
   132b4:	mov	r0, r2
   132b8:	bx	lr
   132bc:	strdeq	r6, [r1], -r4
   132c0:	andeq	r6, r1, r0, asr #19
   132c4:	andeq	r6, r1, r6, lsl #20
   132c8:	ldrh	ip, [r0, #128]	; 0x80
   132cc:	push	{r4, r5, r6, lr}
   132d0:	sub	sp, sp, #80	; 0x50
   132d4:	ldr	r5, [r0, #136]	; 0x88
   132d8:	cmp	ip, #3
   132dc:	movls	ip, #4
   132e0:	strhls	ip, [r0, #128]	; 0x80
   132e4:	mov	ip, #4
   132e8:	add	lr, sp, ip
   132ec:	and	r4, r5, #3
   132f0:	stmib	sp, {r2, ip}
   132f4:	str	lr, [sp, #16]
   132f8:	str	ip, [sp, #20]
   132fc:	mov	ip, #1
   13300:	str	ip, [sp, #12]
   13304:	lsls	ip, r2, #2
   13308:	beq	13324 <flatcc_builder_default_alloc@@Base+0x508>
   1330c:	add	lr, ip, #4
   13310:	str	ip, [sp, #28]
   13314:	mov	ip, #2
   13318:	str	lr, [sp, #8]
   1331c:	str	ip, [sp, #12]
   13320:	str	r1, [sp, #24]
   13324:	cmp	r4, #0
   13328:	beq	13358 <flatcc_builder_default_alloc@@Base+0x53c>
   1332c:	ldr	ip, [sp, #8]
   13330:	add	lr, sp, #80	; 0x50
   13334:	ldr	r6, [pc, #204]	; 13408 <flatcc_builder_default_alloc@@Base+0x5ec>
   13338:	add	ip, ip, r4
   1333c:	str	ip, [sp, #8]
   13340:	ldr	ip, [sp, #12]
   13344:	add	ip, ip, #1
   13348:	add	lr, lr, ip, lsl #3
   1334c:	str	ip, [sp, #12]
   13350:	str	r6, [lr, #-72]	; 0xffffffb8
   13354:	str	r4, [lr, #-68]	; 0xffffffbc
   13358:	ldr	lr, [sp, #8]
   1335c:	mov	ip, #0
   13360:	mvn	r6, #3
   13364:	sub	lr, lr, #4
   13368:	sub	lr, lr, r5
   1336c:	cmp	r2, ip
   13370:	bne	13384 <flatcc_builder_default_alloc@@Base+0x568>
   13374:	add	r1, sp, #8
   13378:	bl	131fc <flatcc_builder_default_alloc@@Base+0x3e0>
   1337c:	add	sp, sp, #80	; 0x50
   13380:	pop	{r4, r5, r6, pc}
   13384:	ldr	r5, [r1, ip, lsl #2]
   13388:	cmp	r5, #0
   1338c:	beq	133c4 <flatcc_builder_default_alloc@@Base+0x5a8>
   13390:	mla	r4, r6, ip, lr
   13394:	cmp	r3, #0
   13398:	add	r4, r4, r5
   1339c:	str	r4, [r1, ip, lsl #2]
   133a0:	beq	13400 <flatcc_builder_default_alloc@@Base+0x5e4>
   133a4:	ldrb	r4, [r3, ip]
   133a8:	cmp	r4, #0
   133ac:	bne	13400 <flatcc_builder_default_alloc@@Base+0x5e4>
   133b0:	ldr	r3, [pc, #84]	; 1340c <flatcc_builder_default_alloc@@Base+0x5f0>
   133b4:	movw	r2, #1457	; 0x5b1
   133b8:	ldr	r1, [pc, #80]	; 13410 <flatcc_builder_default_alloc@@Base+0x5f4>
   133bc:	ldr	r0, [pc, #80]	; 13414 <flatcc_builder_default_alloc@@Base+0x5f8>
   133c0:	bl	11fd4 <__assert_fail@plt>
   133c4:	cmp	r3, #0
   133c8:	beq	133ec <flatcc_builder_default_alloc@@Base+0x5d0>
   133cc:	ldrb	r4, [r3, ip]
   133d0:	cmp	r4, #0
   133d4:	beq	13400 <flatcc_builder_default_alloc@@Base+0x5e4>
   133d8:	ldr	r3, [pc, #44]	; 1340c <flatcc_builder_default_alloc@@Base+0x5f0>
   133dc:	movw	r2, #1461	; 0x5b5
   133e0:	ldr	r1, [pc, #40]	; 13410 <flatcc_builder_default_alloc@@Base+0x5f4>
   133e4:	ldr	r0, [pc, #44]	; 13418 <flatcc_builder_default_alloc@@Base+0x5fc>
   133e8:	b	133c0 <flatcc_builder_default_alloc@@Base+0x5a4>
   133ec:	ldr	r3, [pc, #24]	; 1340c <flatcc_builder_default_alloc@@Base+0x5f0>
   133f0:	movw	r2, #1463	; 0x5b7
   133f4:	ldr	r1, [pc, #20]	; 13410 <flatcc_builder_default_alloc@@Base+0x5f4>
   133f8:	ldr	r0, [pc, #28]	; 1341c <flatcc_builder_default_alloc@@Base+0x600>
   133fc:	b	133c0 <flatcc_builder_default_alloc@@Base+0x5a4>
   13400:	add	ip, ip, #1
   13404:	b	1336c <flatcc_builder_default_alloc@@Base+0x550>
   13408:	ldrdeq	r6, [r1], -sl
   1340c:	andeq	r6, r1, r5, lsl #10
   13410:	andeq	r6, r1, r0, asr #19
   13414:	andeq	r6, r1, r1, lsr #20
   13418:	andeq	r6, r1, pc, lsr #20
   1341c:	andeq	r6, r1, sp, lsr #20

00013420 <flatcc_builder_flush_vtable_cache@@Base>:
   13420:	ldr	r3, [r0, #116]	; 0x74
   13424:	cmp	r3, #0
   13428:	bxeq	lr
   1342c:	push	{r4, lr}
   13430:	mov	r4, r0
   13434:	mov	r1, #0
   13438:	ldr	r0, [r0, #92]	; 0x5c
   1343c:	ldr	r2, [r4, #96]	; 0x60
   13440:	bl	11fb0 <memset@plt>
   13444:	mov	r0, #0
   13448:	mov	r1, #16
   1344c:	strd	r0, [r4, #120]	; 0x78
   13450:	pop	{r4, pc}

00013454 <flatcc_builder_custom_init@@Base>:
   13454:	push	{r4, r5, r6, r7, r8, lr}
   13458:	mov	r6, r1
   1345c:	mov	r7, r2
   13460:	mov	r1, #0
   13464:	mov	r2, #232	; 0xe8
   13468:	mov	r4, r0
   1346c:	mov	r5, r3
   13470:	bl	11fb0 <memset@plt>
   13474:	cmp	r6, #0
   13478:	mov	r0, #0
   1347c:	moveq	r3, #1
   13480:	addeq	r7, r4, #188	; 0xbc
   13484:	ldreq	r6, [pc, #36]	; 134b0 <flatcc_builder_custom_init@@Base+0x5c>
   13488:	streq	r3, [r4, #184]	; 0xb8
   1348c:	cmp	r5, #0
   13490:	ldr	r3, [pc, #28]	; 134b4 <flatcc_builder_custom_init@@Base+0x60>
   13494:	str	r7, [r4, #36]	; 0x24
   13498:	str	r6, [r4, #44]	; 0x2c
   1349c:	moveq	r5, r3
   134a0:	ldr	r3, [sp, #24]
   134a4:	str	r3, [r4, #40]	; 0x28
   134a8:	str	r5, [r4, #48]	; 0x30
   134ac:	pop	{r4, r5, r6, r7, r8, pc}
   134b0:	andeq	r5, r1, r4, ror #22
   134b4:	andeq	r2, r1, ip, lsl lr

000134b8 <flatcc_builder_init@@Base>:
   134b8:	push	{r4, lr}
   134bc:	mov	r2, #232	; 0xe8
   134c0:	mov	r1, #0
   134c4:	bl	11fb0 <memset@plt>
   134c8:	mov	r3, r0
   134cc:	mov	r2, #1
   134d0:	mov	r0, #0
   134d4:	str	r2, [r3, #184]	; 0xb8
   134d8:	ldr	r2, [pc, #20]	; 134f4 <flatcc_builder_init@@Base+0x3c>
   134dc:	str	r2, [r3, #48]	; 0x30
   134e0:	add	r2, r3, #188	; 0xbc
   134e4:	str	r2, [r3, #36]	; 0x24
   134e8:	ldr	r2, [pc, #8]	; 134f8 <flatcc_builder_init@@Base+0x40>
   134ec:	str	r2, [r3, #44]	; 0x2c
   134f0:	pop	{r4, pc}
   134f4:	andeq	r2, r1, ip, lsl lr
   134f8:	andeq	r5, r1, r4, ror #22

000134fc <flatcc_builder_custom_reset@@Base>:
   134fc:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   13500:	mov	r4, r0
   13504:	mov	r7, r1
   13508:	mov	r8, r2
   1350c:	mov	r5, r0
   13510:	mov	r6, #0
   13514:	ldr	r3, [r5, #52]	; 0x34
   13518:	add	r1, r5, #52	; 0x34
   1351c:	cmp	r3, #0
   13520:	beq	135fc <flatcc_builder_custom_reset@@Base+0x100>
   13524:	cmp	r6, #5
   13528:	cmpne	r8, #0
   1352c:	bne	135d4 <flatcc_builder_custom_reset@@Base+0xd8>
   13530:	mov	r1, #0
   13534:	ldr	r0, [r5, #52]	; 0x34
   13538:	ldr	r2, [r5, #56]	; 0x38
   1353c:	bl	11fb0 <memset@plt>
   13540:	add	r6, r6, #1
   13544:	add	r5, r5, #8
   13548:	cmp	r6, #8
   1354c:	bne	13514 <flatcc_builder_custom_reset@@Base+0x18>
   13550:	ldr	r2, [r4, #124]	; 0x7c
   13554:	mov	r3, #0
   13558:	ldr	r0, [r4, #184]	; 0xb8
   1355c:	str	r3, [r4, #24]
   13560:	str	r3, [r4, #32]
   13564:	cmp	r2, r3
   13568:	str	r3, [r4, #120]	; 0x78
   1356c:	movne	r2, #16
   13570:	strh	r3, [r4, #128]	; 0x80
   13574:	str	r3, [r4, #136]	; 0x88
   13578:	strne	r2, [r4, #124]	; 0x7c
   1357c:	cmp	r7, #0
   13580:	ldr	r2, [r4, #60]	; 0x3c
   13584:	strne	r3, [r4, #172]	; 0xac
   13588:	strne	r3, [r4, #176]	; 0xb0
   1358c:	strne	r3, [r4, #180]	; 0xb4
   13590:	cmp	r0, #0
   13594:	strd	r2, [r4, #16]
   13598:	ldr	r2, [r4, #76]	; 0x4c
   1359c:	str	r2, [r4]
   135a0:	ldr	r2, [r4, #52]	; 0x34
   135a4:	str	r3, [r4, #140]	; 0x8c
   135a8:	str	r3, [r4, #148]	; 0x94
   135ac:	str	r3, [r4, #152]	; 0x98
   135b0:	str	r3, [r4, #156]	; 0x9c
   135b4:	str	r2, [r4, #4]
   135b8:	str	r3, [r4, #160]	; 0xa0
   135bc:	beq	135cc <flatcc_builder_custom_reset@@Base+0xd0>
   135c0:	add	r0, r4, #188	; 0xbc
   135c4:	bl	15a64 <flatcc_emitter_reset@@Base>
   135c8:	mov	r0, #0
   135cc:	add	sp, sp, #12
   135d0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   135d4:	mov	r3, #1
   135d8:	ldr	r0, [r4, #40]	; 0x28
   135dc:	mov	r2, r3
   135e0:	ldr	r9, [r4, #48]	; 0x30
   135e4:	str	r6, [sp]
   135e8:	blx	r9
   135ec:	cmp	r0, #0
   135f0:	beq	13530 <flatcc_builder_custom_reset@@Base+0x34>
   135f4:	mvn	r0, #0
   135f8:	b	135cc <flatcc_builder_custom_reset@@Base+0xd0>
   135fc:	ldr	r3, [r5, #56]	; 0x38
   13600:	cmp	r3, #0
   13604:	beq	13540 <flatcc_builder_custom_reset@@Base+0x44>
   13608:	ldr	r3, [pc, #12]	; 1361c <flatcc_builder_custom_reset@@Base+0x120>
   1360c:	movw	r2, #434	; 0x1b2
   13610:	ldr	r1, [pc, #8]	; 13620 <flatcc_builder_custom_reset@@Base+0x124>
   13614:	ldr	r0, [pc, #8]	; 13624 <flatcc_builder_custom_reset@@Base+0x128>
   13618:	bl	11fd4 <__assert_fail@plt>
   1361c:	andeq	r6, r1, r2, lsr #10
   13620:	andeq	r6, r1, r0, asr #19
   13624:	andeq	r6, r1, sp, lsr sl

00013628 <flatcc_builder_reset@@Base>:
   13628:	mov	r2, #0
   1362c:	mov	r1, r2
   13630:	b	134fc <flatcc_builder_custom_reset@@Base>

00013634 <flatcc_builder_clear@@Base>:
   13634:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13638:	mov	r4, r0
   1363c:	add	r6, r0, #52	; 0x34
   13640:	mov	r5, #0
   13644:	mov	r3, #0
   13648:	mov	r1, r6
   1364c:	mov	r2, r3
   13650:	ldr	r0, [r4, #40]	; 0x28
   13654:	add	r6, r6, #8
   13658:	ldr	r7, [r4, #48]	; 0x30
   1365c:	str	r5, [sp]
   13660:	add	r5, r5, #1
   13664:	blx	r7
   13668:	cmp	r5, #8
   1366c:	bne	13644 <flatcc_builder_clear@@Base+0x10>
   13670:	ldr	r3, [r4, #184]	; 0xb8
   13674:	cmp	r3, #0
   13678:	beq	13684 <flatcc_builder_clear@@Base+0x50>
   1367c:	add	r0, r4, #188	; 0xbc
   13680:	bl	15b0c <flatcc_emitter_clear@@Base>
   13684:	mov	r2, #232	; 0xe8
   13688:	mov	r1, #0
   1368c:	mov	r0, r4
   13690:	add	sp, sp, #12
   13694:	pop	{r4, r5, r6, r7, lr}
   13698:	b	11fb0 <memset@plt>

0001369c <flatcc_builder_enter_user_frame_ptr@@Base>:
   1369c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   136a0:	add	r5, r1, #3
   136a4:	mov	r7, #0
   136a8:	bic	r5, r5, #3
   136ac:	mov	r1, #7
   136b0:	add	r5, r5, #4
   136b4:	mov	r6, r0
   136b8:	mov	r3, r5
   136bc:	str	r7, [sp]
   136c0:	ldr	r2, [r0, #228]	; 0xe4
   136c4:	bl	12f14 <flatcc_builder_default_alloc@@Base+0xf8>
   136c8:	subs	r4, r0, #0
   136cc:	beq	136f8 <flatcc_builder_enter_user_frame_ptr@@Base+0x5c>
   136d0:	mov	r2, r5
   136d4:	mov	r1, r7
   136d8:	bl	11fb0 <memset@plt>
   136dc:	ldr	r3, [r6, #224]	; 0xe0
   136e0:	str	r3, [r4], #4
   136e4:	ldr	r1, [r6, #228]	; 0xe4
   136e8:	add	r3, r1, #4
   136ec:	add	r5, r1, r5
   136f0:	str	r3, [r6, #224]	; 0xe0
   136f4:	str	r5, [r6, #228]	; 0xe4
   136f8:	mov	r0, r4
   136fc:	add	sp, sp, #12
   13700:	pop	{r4, r5, r6, r7, pc}

00013704 <flatcc_builder_enter_user_frame@@Base>:
   13704:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13708:	add	r4, r1, #3
   1370c:	mov	r7, #0
   13710:	bic	r4, r4, #3
   13714:	mov	r1, #7
   13718:	add	r4, r4, #4
   1371c:	mov	r6, r0
   13720:	mov	r3, r4
   13724:	str	r7, [sp]
   13728:	ldr	r2, [r0, #228]	; 0xe4
   1372c:	bl	12f14 <flatcc_builder_default_alloc@@Base+0xf8>
   13730:	subs	r5, r0, #0
   13734:	moveq	r0, r5
   13738:	beq	13764 <flatcc_builder_enter_user_frame@@Base+0x60>
   1373c:	mov	r2, r4
   13740:	mov	r1, r7
   13744:	bl	11fb0 <memset@plt>
   13748:	ldr	r3, [r6, #224]	; 0xe0
   1374c:	str	r3, [r5]
   13750:	ldr	r1, [r6, #228]	; 0xe4
   13754:	add	r0, r1, #4
   13758:	add	r4, r1, r4
   1375c:	str	r0, [r6, #224]	; 0xe0
   13760:	str	r4, [r6, #228]	; 0xe4
   13764:	add	sp, sp, #12
   13768:	pop	{r4, r5, r6, r7, pc}

0001376c <flatcc_builder_exit_user_frame@@Base>:
   1376c:	ldr	r3, [r0, #224]	; 0xe0
   13770:	cmp	r3, #0
   13774:	bne	13790 <flatcc_builder_exit_user_frame@@Base+0x24>
   13778:	push	{r4, lr}
   1377c:	movw	r2, #542	; 0x21e
   13780:	ldr	r3, [pc, #40]	; 137b0 <flatcc_builder_exit_user_frame@@Base+0x44>
   13784:	ldr	r1, [pc, #40]	; 137b4 <flatcc_builder_exit_user_frame@@Base+0x48>
   13788:	ldr	r0, [pc, #40]	; 137b8 <flatcc_builder_exit_user_frame@@Base+0x4c>
   1378c:	bl	11fd4 <__assert_fail@plt>
   13790:	ldr	r1, [r0, #108]	; 0x6c
   13794:	mov	r2, r0
   13798:	add	r1, r1, r3
   1379c:	sub	r3, r3, #4
   137a0:	str	r3, [r0, #228]	; 0xe4
   137a4:	ldr	r0, [r1, #-4]
   137a8:	str	r0, [r2, #224]	; 0xe0
   137ac:	bx	lr
   137b0:	andeq	r6, r1, lr, lsr r5
   137b4:	andeq	r6, r1, r0, asr #19
   137b8:	andeq	r6, r1, pc, asr #20

000137bc <flatcc_builder_exit_user_frame_at@@Base>:
   137bc:	ldr	r2, [r0, #224]	; 0xe0
   137c0:	cmp	r2, r1
   137c4:	bcs	137e0 <flatcc_builder_exit_user_frame_at@@Base+0x24>
   137c8:	push	{r4, lr}
   137cc:	movw	r2, #551	; 0x227
   137d0:	ldr	r3, [pc, #16]	; 137e8 <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   137d4:	ldr	r1, [pc, #16]	; 137ec <flatcc_builder_exit_user_frame_at@@Base+0x30>
   137d8:	ldr	r0, [pc, #16]	; 137f0 <flatcc_builder_exit_user_frame_at@@Base+0x34>
   137dc:	bl	11fd4 <__assert_fail@plt>
   137e0:	str	r1, [r0, #224]	; 0xe0
   137e4:	b	1376c <flatcc_builder_exit_user_frame@@Base>
   137e8:	andeq	r6, r1, sp, asr r5
   137ec:	andeq	r6, r1, r0, asr #19
   137f0:	andeq	r6, r1, r8, ror #20

000137f4 <flatcc_builder_get_current_user_frame@@Base>:
   137f4:	ldr	r0, [r0, #224]	; 0xe0
   137f8:	bx	lr

000137fc <flatcc_builder_get_user_frame_ptr@@Base>:
   137fc:	ldr	r0, [r0, #108]	; 0x6c
   13800:	add	r0, r0, r1
   13804:	bx	lr

00013808 <flatcc_builder_embed_buffer@@Base>:
   13808:	push	{r4, r5, r6, lr}
   1380c:	mov	r4, r3
   13810:	sub	sp, sp, #80	; 0x50
   13814:	mov	r6, r2
   13818:	mov	r2, r1
   1381c:	add	r1, sp, #96	; 0x60
   13820:	mov	r5, r0
   13824:	ldr	r3, [r0, #152]	; 0x98
   13828:	adds	r3, r3, #0
   1382c:	movne	r3, #1
   13830:	bl	13154 <flatcc_builder_default_alloc@@Base+0x338>
   13834:	cmp	r0, #0
   13838:	movne	r0, #0
   1383c:	bne	13910 <flatcc_builder_embed_buffer@@Base+0x108>
   13840:	ldr	r3, [sp, #100]	; 0x64
   13844:	str	r0, [sp, #8]
   13848:	str	r0, [sp, #12]
   1384c:	tst	r3, #2
   13850:	ldr	r3, [r5, #136]	; 0x88
   13854:	movne	r2, #4
   13858:	moveq	r2, #0
   1385c:	sub	r3, r3, r4
   13860:	sub	r3, r3, r2
   13864:	ldrh	r2, [sp, #96]	; 0x60
   13868:	sub	r2, r2, #1
   1386c:	and	r3, r3, r2
   13870:	add	r2, r4, r3
   13874:	str	r2, [sp, #4]
   13878:	ldr	r2, [r5, #152]	; 0x98
   1387c:	cmp	r2, #0
   13880:	beq	138a0 <flatcc_builder_embed_buffer@@Base+0x98>
   13884:	mov	r2, #4
   13888:	add	r1, sp, r2
   1388c:	str	r2, [sp, #8]
   13890:	str	r1, [sp, #16]
   13894:	str	r2, [sp, #20]
   13898:	mov	r2, #1
   1389c:	str	r2, [sp, #12]
   138a0:	cmp	r4, #0
   138a4:	beq	138d0 <flatcc_builder_embed_buffer@@Base+0xc8>
   138a8:	ldr	r2, [sp, #8]
   138ac:	add	r1, sp, #80	; 0x50
   138b0:	add	r2, r2, r4
   138b4:	str	r2, [sp, #8]
   138b8:	ldr	r2, [sp, #12]
   138bc:	add	r2, r2, #1
   138c0:	add	r1, r1, r2, lsl #3
   138c4:	str	r2, [sp, #12]
   138c8:	str	r6, [r1, #-72]	; 0xffffffb8
   138cc:	str	r4, [r1, #-68]	; 0xffffffbc
   138d0:	cmp	r3, #0
   138d4:	beq	13904 <flatcc_builder_embed_buffer@@Base+0xfc>
   138d8:	ldr	r2, [sp, #8]
   138dc:	add	r1, sp, #80	; 0x50
   138e0:	ldr	r0, [pc, #48]	; 13918 <flatcc_builder_embed_buffer@@Base+0x110>
   138e4:	add	r2, r2, r3
   138e8:	str	r2, [sp, #8]
   138ec:	ldr	r2, [sp, #12]
   138f0:	add	r2, r2, #1
   138f4:	add	r1, r1, r2, lsl #3
   138f8:	str	r2, [sp, #12]
   138fc:	str	r0, [r1, #-72]	; 0xffffffb8
   13900:	str	r3, [r1, #-68]	; 0xffffffbc
   13904:	add	r1, sp, #8
   13908:	mov	r0, r5
   1390c:	bl	131fc <flatcc_builder_default_alloc@@Base+0x3e0>
   13910:	add	sp, sp, #80	; 0x50
   13914:	pop	{r4, r5, r6, pc}
   13918:	ldrdeq	r6, [r1], -sl

0001391c <flatcc_builder_create_buffer@@Base>:
   1391c:	push	{r4, r5, r6, r7, r8, r9, lr}
   13920:	sub	sp, sp, #92	; 0x5c
   13924:	mov	r8, #0
   13928:	mov	r9, r1
   1392c:	mov	r5, r3
   13930:	add	r1, sp, #120	; 0x78
   13934:	mov	r4, r0
   13938:	ldr	r7, [sp, #124]	; 0x7c
   1393c:	str	r8, [sp, #12]
   13940:	and	r6, r7, #1
   13944:	mov	r3, r6
   13948:	bl	13154 <flatcc_builder_default_alloc@@Base+0x338>
   1394c:	cmp	r0, r8
   13950:	bne	13ac0 <flatcc_builder_create_buffer@@Base+0x1a4>
   13954:	ldrh	r3, [r4, #128]	; 0x80
   13958:	ldrh	r1, [sp, #120]	; 0x78
   1395c:	ldr	r2, [r4, #136]	; 0x88
   13960:	cmp	r3, r1
   13964:	strhcc	r1, [r4, #128]	; 0x80
   13968:	cmp	r9, #0
   1396c:	sub	r1, r1, #1
   13970:	ldrne	r3, [r9]
   13974:	strne	r3, [sp, #12]
   13978:	sub	r3, r2, #4
   1397c:	ldr	r0, [sp, #12]
   13980:	cmp	r0, #0
   13984:	movne	r0, #4
   13988:	tst	r7, #2
   1398c:	movne	ip, #4
   13990:	moveq	ip, #0
   13994:	sub	r3, r3, r0
   13998:	ands	r7, r7, #3
   1399c:	sub	r3, r3, ip
   139a0:	and	r3, r3, r1
   139a4:	mov	r1, #0
   139a8:	str	r1, [sp, #16]
   139ac:	str	r1, [sp, #20]
   139b0:	beq	139d0 <flatcc_builder_create_buffer@@Base+0xb4>
   139b4:	mov	r1, #4
   139b8:	add	ip, sp, #8
   139bc:	str	r1, [sp, #16]
   139c0:	str	ip, [sp, #24]
   139c4:	str	r1, [sp, #28]
   139c8:	mov	r1, #1
   139cc:	str	r1, [sp, #20]
   139d0:	ldr	ip, [sp, #16]
   139d4:	add	r8, sp, #88	; 0x58
   139d8:	add	r9, sp, #4
   139dc:	cmp	r0, #0
   139e0:	ldr	lr, [sp, #20]
   139e4:	add	ip, ip, #4
   139e8:	add	r1, lr, #1
   139ec:	str	ip, [sp, #16]
   139f0:	add	r8, r8, r1, lsl #3
   139f4:	str	r1, [sp, #20]
   139f8:	str	r9, [r8, #-72]	; 0xffffffb8
   139fc:	mov	r9, #4
   13a00:	str	r9, [r8, #-68]	; 0xffffffbc
   13a04:	beq	13a30 <flatcc_builder_create_buffer@@Base+0x114>
   13a08:	add	ip, ip, r0
   13a0c:	add	r1, lr, #2
   13a10:	add	lr, lr, #2
   13a14:	str	ip, [sp, #16]
   13a18:	add	ip, sp, #88	; 0x58
   13a1c:	add	r1, ip, r1, lsl #3
   13a20:	add	ip, sp, #12
   13a24:	str	lr, [sp, #20]
   13a28:	str	ip, [r1, #-72]	; 0xffffffb8
   13a2c:	str	r0, [r1, #-68]	; 0xffffffbc
   13a30:	cmp	r3, #0
   13a34:	beq	13a64 <flatcc_builder_create_buffer@@Base+0x148>
   13a38:	ldr	r1, [sp, #16]
   13a3c:	add	r0, sp, #88	; 0x58
   13a40:	ldr	ip, [pc, #132]	; 13acc <flatcc_builder_create_buffer@@Base+0x1b0>
   13a44:	add	r1, r1, r3
   13a48:	str	r1, [sp, #16]
   13a4c:	ldr	r1, [sp, #20]
   13a50:	add	r1, r1, #1
   13a54:	add	r0, r0, r1, lsl #3
   13a58:	str	r1, [sp, #20]
   13a5c:	str	ip, [r0, #-72]	; 0xffffffb8
   13a60:	str	r3, [r0, #-68]	; 0xffffffbc
   13a64:	ldr	r3, [sp, #16]
   13a68:	cmp	r7, #0
   13a6c:	add	r1, sp, #16
   13a70:	mov	r0, r4
   13a74:	sub	r3, r2, r3
   13a78:	movne	r2, #4
   13a7c:	moveq	r2, #0
   13a80:	cmp	r6, #0
   13a84:	add	r3, r3, r2
   13a88:	ldrne	r2, [r4, #144]	; 0x90
   13a8c:	ldreq	r2, [r4, #140]	; 0x8c
   13a90:	sub	r2, r2, r3
   13a94:	sub	r3, r5, r3
   13a98:	str	r3, [sp, #4]
   13a9c:	str	r2, [sp, #8]
   13aa0:	bl	131fc <flatcc_builder_default_alloc@@Base+0x3e0>
   13aa4:	cmp	r0, #0
   13aa8:	bne	13ac4 <flatcc_builder_create_buffer@@Base+0x1a8>
   13aac:	ldr	r3, [pc, #28]	; 13ad0 <flatcc_builder_create_buffer@@Base+0x1b4>
   13ab0:	mov	r2, #772	; 0x304
   13ab4:	ldr	r1, [pc, #24]	; 13ad4 <flatcc_builder_create_buffer@@Base+0x1b8>
   13ab8:	ldr	r0, [pc, #24]	; 13ad8 <flatcc_builder_create_buffer@@Base+0x1bc>
   13abc:	bl	11fd4 <__assert_fail@plt>
   13ac0:	mov	r0, r8
   13ac4:	add	sp, sp, #92	; 0x5c
   13ac8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13acc:	ldrdeq	r6, [r1], -sl
   13ad0:	andeq	r6, r1, pc, ror r5
   13ad4:	andeq	r6, r1, r0, asr #19
   13ad8:	andeq	r6, r1, sp, lsr #20

00013adc <flatcc_builder_create_struct@@Base>:
   13adc:	cmp	r3, #0
   13ae0:	push	{lr}		; (str lr, [sp, #-4]!)
   13ae4:	sub	sp, sp, #76	; 0x4c
   13ae8:	bne	13b00 <flatcc_builder_create_struct@@Base+0x24>
   13aec:	ldr	r3, [pc, #148]	; 13b88 <flatcc_builder_create_struct@@Base+0xac>
   13af0:	movw	r2, #783	; 0x30f
   13af4:	ldr	r1, [pc, #144]	; 13b8c <flatcc_builder_create_struct@@Base+0xb0>
   13af8:	ldr	r0, [pc, #144]	; 13b90 <flatcc_builder_create_struct@@Base+0xb4>
   13afc:	bl	11fd4 <__assert_fail@plt>
   13b00:	ldrh	ip, [r0, #128]	; 0x80
   13b04:	cmp	ip, r3
   13b08:	ldr	ip, [r0, #136]	; 0x88
   13b0c:	strhcc	r3, [r0, #128]	; 0x80
   13b10:	sub	r3, r3, #1
   13b14:	sub	ip, ip, r2
   13b18:	and	r3, r3, ip
   13b1c:	mov	ip, #0
   13b20:	cmp	r2, ip
   13b24:	str	ip, [sp]
   13b28:	str	ip, [sp, #4]
   13b2c:	beq	13b44 <flatcc_builder_create_struct@@Base+0x68>
   13b30:	str	r2, [sp]
   13b34:	str	r1, [sp, #8]
   13b38:	str	r2, [sp, #12]
   13b3c:	mov	r2, #1
   13b40:	str	r2, [sp, #4]
   13b44:	cmp	r3, #0
   13b48:	beq	13b78 <flatcc_builder_create_struct@@Base+0x9c>
   13b4c:	ldr	r2, [sp]
   13b50:	add	r1, sp, #72	; 0x48
   13b54:	ldr	ip, [pc, #56]	; 13b94 <flatcc_builder_create_struct@@Base+0xb8>
   13b58:	add	r2, r2, r3
   13b5c:	str	r2, [sp]
   13b60:	ldr	r2, [sp, #4]
   13b64:	add	r2, r2, #1
   13b68:	add	r1, r1, r2, lsl #3
   13b6c:	str	r2, [sp, #4]
   13b70:	str	ip, [r1, #-72]	; 0xffffffb8
   13b74:	str	r3, [r1, #-68]	; 0xffffffbc
   13b78:	mov	r1, sp
   13b7c:	bl	131fc <flatcc_builder_default_alloc@@Base+0x3e0>
   13b80:	add	sp, sp, #76	; 0x4c
   13b84:	pop	{pc}		; (ldr pc, [sp], #4)
   13b88:	muleq	r1, ip, r5
   13b8c:	andeq	r6, r1, r0, asr #19
   13b90:	andeq	r6, r1, r7, lsl #21
   13b94:	ldrdeq	r6, [r1], -sl

00013b98 <flatcc_builder_start_buffer@@Base>:
   13b98:	push	{r4, r5, r6, r7, r8, lr}
   13b9c:	mov	r5, r1
   13ba0:	mov	r4, r0
   13ba4:	mov	r7, r2
   13ba8:	mov	r6, r3
   13bac:	ldrh	r1, [r0, #128]	; 0x80
   13bb0:	bl	12f84 <flatcc_builder_default_alloc@@Base+0x168>
   13bb4:	cmp	r0, #0
   13bb8:	bne	13c28 <flatcc_builder_start_buffer@@Base+0x90>
   13bbc:	ldrh	r3, [r4, #132]	; 0x84
   13bc0:	mov	ip, #1
   13bc4:	cmp	r5, #0
   13bc8:	ldr	r1, [r4, #32]
   13bcc:	strh	ip, [r4, #128]	; 0x80
   13bd0:	strh	r3, [r1, #34]	; 0x22
   13bd4:	ldrh	r3, [r4, #164]	; 0xa4
   13bd8:	strh	r7, [r4, #132]	; 0x84
   13bdc:	strh	r3, [r1, #32]
   13be0:	ldr	r3, [r4, #144]	; 0x90
   13be4:	strh	r6, [r4, #164]	; 0xa4
   13be8:	str	r3, [r1, #20]
   13bec:	ldr	r3, [r4, #152]	; 0x98
   13bf0:	str	r3, [r1, #28]
   13bf4:	ldr	r3, [r4, #136]	; 0x88
   13bf8:	str	r3, [r4, #144]	; 0x90
   13bfc:	ldr	r3, [r4, #148]	; 0x94
   13c00:	add	r2, r3, ip
   13c04:	strd	r2, [r4, #148]	; 0x94
   13c08:	ldr	r3, [r4, #168]	; 0xa8
   13c0c:	str	r3, [r1, #16]
   13c10:	ldr	r3, [pc, #24]	; 13c30 <flatcc_builder_start_buffer@@Base+0x98>
   13c14:	moveq	r5, r3
   13c18:	ldr	r3, [r5]
   13c1c:	str	r3, [r4, #168]	; 0xa8
   13c20:	strh	ip, [r1, #14]
   13c24:	pop	{r4, r5, r6, r7, r8, pc}
   13c28:	mvn	r0, #0
   13c2c:	pop	{r4, r5, r6, r7, r8, pc}
   13c30:	ldrdeq	r6, [r1], -sl

00013c34 <flatcc_builder_end_buffer@@Base>:
   13c34:	push	{r0, r1, r2, r4, r5, lr}
   13c38:	mov	r4, r0
   13c3c:	ldrh	r0, [r0, #164]	; 0xa4
   13c40:	ldr	r2, [r4, #152]	; 0x98
   13c44:	and	r0, r0, #2
   13c48:	cmp	r2, #0
   13c4c:	orrne	r0, r0, #1
   13c50:	ldr	r2, [r4, #32]
   13c54:	ldrh	r2, [r2, #14]
   13c58:	cmp	r2, #1
   13c5c:	beq	13c74 <flatcc_builder_end_buffer@@Base+0x40>
   13c60:	ldr	r3, [pc, #120]	; 13ce0 <flatcc_builder_end_buffer@@Base+0xac>
   13c64:	movw	r2, #838	; 0x346
   13c68:	ldr	r1, [pc, #116]	; 13ce4 <flatcc_builder_end_buffer@@Base+0xb0>
   13c6c:	ldr	r0, [pc, #116]	; 13ce8 <flatcc_builder_end_buffer@@Base+0xb4>
   13c70:	bl	11fd4 <__assert_fail@plt>
   13c74:	ldrh	r2, [r4, #132]	; 0x84
   13c78:	mov	r3, r1
   13c7c:	ldrh	r1, [r4, #128]	; 0x80
   13c80:	cmp	r1, r2
   13c84:	strhcc	r2, [r4, #128]	; 0x80
   13c88:	ldrh	r1, [r4, #128]	; 0x80
   13c8c:	str	r1, [sp]
   13c90:	add	r1, r4, #168	; 0xa8
   13c94:	str	r0, [sp, #4]
   13c98:	mov	r0, r4
   13c9c:	bl	1391c <flatcc_builder_create_buffer@@Base>
   13ca0:	subs	r5, r0, #0
   13ca4:	beq	13cd4 <flatcc_builder_end_buffer@@Base+0xa0>
   13ca8:	ldr	r3, [r4, #32]
   13cac:	mov	r0, r4
   13cb0:	ldr	r2, [r3, #20]
   13cb4:	str	r2, [r4, #144]	; 0x90
   13cb8:	ldr	r2, [r3, #28]
   13cbc:	str	r2, [r4, #152]	; 0x98
   13cc0:	ldr	r2, [r3, #16]
   13cc4:	ldrh	r3, [r3, #32]
   13cc8:	strh	r3, [r4, #164]	; 0xa4
   13ccc:	str	r2, [r4, #168]	; 0xa8
   13cd0:	bl	12d18 <access_monster_buffer@@Base+0x400>
   13cd4:	mov	r0, r5
   13cd8:	add	sp, sp, #12
   13cdc:	pop	{r4, r5, pc}
   13ce0:			; <UNDEFINED> instruction: 0x000165b9
   13ce4:	andeq	r6, r1, r0, asr #19
   13ce8:	muleq	r1, r2, sl

00013cec <flatcc_builder_start_struct@@Base>:
   13cec:	push	{r4, r5, r6, lr}
   13cf0:	mov	r5, r1
   13cf4:	mov	r1, r2
   13cf8:	mov	r4, r0
   13cfc:	bl	12f84 <flatcc_builder_default_alloc@@Base+0x168>
   13d00:	cmp	r0, #0
   13d04:	bne	13d2c <flatcc_builder_start_struct@@Base+0x40>
   13d08:	ldr	r3, [r4, #32]
   13d0c:	mov	r2, #2
   13d10:	mvn	r1, #3
   13d14:	mov	r0, r4
   13d18:	strh	r2, [r3, #14]
   13d1c:	bl	12c54 <access_monster_buffer@@Base+0x33c>
   13d20:	mov	r1, r5
   13d24:	pop	{r4, r5, r6, lr}
   13d28:	b	12cd0 <access_monster_buffer@@Base+0x3b8>
   13d2c:	mov	r0, #0
   13d30:	pop	{r4, r5, r6, pc}

00013d34 <flatcc_builder_struct_edit@@Base>:
   13d34:	ldr	r0, [r0, #16]
   13d38:	bx	lr

00013d3c <flatcc_builder_end_struct@@Base>:
   13d3c:	ldr	r3, [r0, #32]
   13d40:	push	{r4, r5, r6, lr}
   13d44:	ldrh	r3, [r3, #14]
   13d48:	cmp	r3, #2
   13d4c:	beq	13d64 <flatcc_builder_end_struct@@Base+0x28>
   13d50:	ldr	r3, [pc, #56]	; 13d90 <flatcc_builder_end_struct@@Base+0x54>
   13d54:	mov	r2, #872	; 0x368
   13d58:	ldr	r1, [pc, #52]	; 13d94 <flatcc_builder_end_struct@@Base+0x58>
   13d5c:	ldr	r0, [pc, #52]	; 13d98 <flatcc_builder_end_struct@@Base+0x5c>
   13d60:	bl	11fd4 <__assert_fail@plt>
   13d64:	ldrh	r3, [r0, #130]	; 0x82
   13d68:	mov	r4, r0
   13d6c:	ldr	r1, [r0, #16]
   13d70:	ldr	r2, [r0, #20]
   13d74:	bl	13adc <flatcc_builder_create_struct@@Base>
   13d78:	subs	r5, r0, #0
   13d7c:	beq	13d88 <flatcc_builder_end_struct@@Base+0x4c>
   13d80:	mov	r0, r4
   13d84:	bl	12d18 <access_monster_buffer@@Base+0x400>
   13d88:	mov	r0, r5
   13d8c:	pop	{r4, r5, r6, pc}
   13d90:	ldrdeq	r6, [r1], -r3
   13d94:	andeq	r6, r1, r0, asr #19
   13d98:			; <UNDEFINED> instruction: 0x00016abe

00013d9c <flatcc_builder_extend_vector@@Base>:
   13d9c:	push	{r4, r5, r6, lr}
   13da0:	mov	r4, r0
   13da4:	mov	r5, r1
   13da8:	ldr	r0, [r0, #32]
   13dac:	ldr	r2, [r0, #24]
   13db0:	bl	13274 <flatcc_builder_default_alloc@@Base+0x458>
   13db4:	cmp	r0, #0
   13db8:	bne	13dd4 <flatcc_builder_extend_vector@@Base+0x38>
   13dbc:	ldr	r3, [r4, #32]
   13dc0:	mov	r0, r4
   13dc4:	ldr	r1, [r3, #16]
   13dc8:	mul	r1, r1, r5
   13dcc:	pop	{r4, r5, r6, lr}
   13dd0:	b	12cd0 <access_monster_buffer@@Base+0x3b8>
   13dd4:	mov	r0, #0
   13dd8:	pop	{r4, r5, r6, pc}

00013ddc <flatcc_builder_vector_push@@Base>:
   13ddc:	ldr	r3, [r0, #32]
   13de0:	push	{r4, lr}
   13de4:	ldrh	r2, [r3, #14]
   13de8:	cmp	r2, #4
   13dec:	beq	13e04 <flatcc_builder_vector_push@@Base+0x28>
   13df0:	ldr	r3, [pc, #68]	; 13e3c <flatcc_builder_vector_push@@Base+0x60>
   13df4:	movw	r2, #907	; 0x38b
   13df8:	ldr	r1, [pc, #64]	; 13e40 <flatcc_builder_vector_push@@Base+0x64>
   13dfc:	ldr	r0, [pc, #64]	; 13e44 <flatcc_builder_vector_push@@Base+0x68>
   13e00:	bl	11fd4 <__assert_fail@plt>
   13e04:	ldr	r2, [r3, #20]
   13e08:	ldr	ip, [r3, #24]
   13e0c:	cmp	r2, ip
   13e10:	bls	13e28 <flatcc_builder_vector_push@@Base+0x4c>
   13e14:	ldr	r3, [pc, #32]	; 13e3c <flatcc_builder_vector_push@@Base+0x60>
   13e18:	mov	r2, #908	; 0x38c
   13e1c:	ldr	r1, [pc, #28]	; 13e40 <flatcc_builder_vector_push@@Base+0x64>
   13e20:	ldr	r0, [pc, #32]	; 13e48 <flatcc_builder_vector_push@@Base+0x6c>
   13e24:	b	13e00 <flatcc_builder_vector_push@@Base+0x24>
   13e28:	add	r2, r2, #1
   13e2c:	pop	{r4, lr}
   13e30:	str	r2, [r3, #20]
   13e34:	ldr	r2, [r3, #16]
   13e38:	b	12da0 <access_monster_buffer@@Base+0x488>
   13e3c:	andeq	r6, r1, sp, ror #11
   13e40:	andeq	r6, r1, r0, asr #19
   13e44:	andeq	r6, r1, sl, ror #21
   13e48:	andeq	r6, r1, r6, lsl fp

00013e4c <flatcc_builder_append_vector@@Base>:
   13e4c:	push	{r4, r5, r6, lr}
   13e50:	mov	r4, r0
   13e54:	ldr	r0, [r0, #32]
   13e58:	ldrh	r3, [r0, #14]
   13e5c:	cmp	r3, #4
   13e60:	beq	13e78 <flatcc_builder_append_vector@@Base+0x2c>
   13e64:	ldr	r3, [pc, #76]	; 13eb8 <flatcc_builder_append_vector@@Base+0x6c>
   13e68:	movw	r2, #915	; 0x393
   13e6c:	ldr	r1, [pc, #72]	; 13ebc <flatcc_builder_append_vector@@Base+0x70>
   13e70:	ldr	r0, [pc, #72]	; 13ec0 <flatcc_builder_append_vector@@Base+0x74>
   13e74:	bl	11fd4 <__assert_fail@plt>
   13e78:	mov	r6, r1
   13e7c:	mov	r5, r2
   13e80:	mov	r1, r2
   13e84:	ldr	r2, [r0, #24]
   13e88:	bl	13274 <flatcc_builder_default_alloc@@Base+0x458>
   13e8c:	cmp	r0, #0
   13e90:	bne	13eb0 <flatcc_builder_append_vector@@Base+0x64>
   13e94:	ldr	r3, [r4, #32]
   13e98:	mov	r1, r6
   13e9c:	mov	r0, r4
   13ea0:	ldr	r2, [r3, #16]
   13ea4:	mul	r2, r2, r5
   13ea8:	pop	{r4, r5, r6, lr}
   13eac:	b	12da0 <access_monster_buffer@@Base+0x488>
   13eb0:	mov	r0, #0
   13eb4:	pop	{r4, r5, r6, pc}
   13eb8:	andeq	r6, r1, r8, lsl #12
   13ebc:	andeq	r6, r1, r0, asr #19
   13ec0:	andeq	r6, r1, sl, ror #21

00013ec4 <flatcc_builder_extend_offset_vector@@Base>:
   13ec4:	push	{r4, r5, r6, lr}
   13ec8:	mvn	r2, #-1073741824	; 0xc0000000
   13ecc:	mov	r4, r0
   13ed0:	mov	r5, r1
   13ed4:	ldr	r0, [r0, #32]
   13ed8:	bl	13274 <flatcc_builder_default_alloc@@Base+0x458>
   13edc:	cmp	r0, #0
   13ee0:	bne	13ef4 <flatcc_builder_extend_offset_vector@@Base+0x30>
   13ee4:	lsl	r1, r5, #2
   13ee8:	mov	r0, r4
   13eec:	pop	{r4, r5, r6, lr}
   13ef0:	b	12cd0 <access_monster_buffer@@Base+0x3b8>
   13ef4:	mov	r0, #0
   13ef8:	pop	{r4, r5, r6, pc}

00013efc <flatcc_builder_offset_vector_push@@Base>:
   13efc:	ldr	r2, [r0, #32]
   13f00:	push	{r4, lr}
   13f04:	ldrh	r3, [r2, #14]
   13f08:	cmp	r3, #5
   13f0c:	beq	13f24 <flatcc_builder_offset_vector_push@@Base+0x28>
   13f10:	ldr	r3, [pc, #64]	; 13f58 <flatcc_builder_offset_vector_push@@Base+0x5c>
   13f14:	movw	r2, #934	; 0x3a6
   13f18:	ldr	r1, [pc, #60]	; 13f5c <flatcc_builder_offset_vector_push@@Base+0x60>
   13f1c:	ldr	r0, [pc, #60]	; 13f60 <flatcc_builder_offset_vector_push@@Base+0x64>
   13f20:	bl	11fd4 <__assert_fail@plt>
   13f24:	ldr	r3, [r2, #20]
   13f28:	cmn	r3, #-1073741823	; 0xc0000001
   13f2c:	beq	13f50 <flatcc_builder_offset_vector_push@@Base+0x54>
   13f30:	add	r3, r3, #1
   13f34:	mov	r4, r1
   13f38:	mov	r1, #4
   13f3c:	str	r3, [r2, #20]
   13f40:	bl	12cd0 <access_monster_buffer@@Base+0x3b8>
   13f44:	cmp	r0, #0
   13f48:	strne	r4, [r0]
   13f4c:	pop	{r4, pc}
   13f50:	mov	r0, #0
   13f54:	pop	{r4, pc}
   13f58:	andeq	r6, r1, r5, lsr #12
   13f5c:	andeq	r6, r1, r0, asr #19
   13f60:	andeq	r6, r1, r3, asr fp

00013f64 <flatcc_builder_append_offset_vector@@Base>:
   13f64:	push	{r4, r5, r6, lr}
   13f68:	mov	r4, r0
   13f6c:	ldr	r0, [r0, #32]
   13f70:	ldrh	r3, [r0, #14]
   13f74:	cmp	r3, #5
   13f78:	beq	13f90 <flatcc_builder_append_offset_vector@@Base+0x2c>
   13f7c:	ldr	r3, [pc, #68]	; 13fc8 <flatcc_builder_append_offset_vector@@Base+0x64>
   13f80:	mov	r2, #948	; 0x3b4
   13f84:	ldr	r1, [pc, #64]	; 13fcc <flatcc_builder_append_offset_vector@@Base+0x68>
   13f88:	ldr	r0, [pc, #64]	; 13fd0 <flatcc_builder_append_offset_vector@@Base+0x6c>
   13f8c:	bl	11fd4 <__assert_fail@plt>
   13f90:	mov	r5, r2
   13f94:	mov	r6, r1
   13f98:	mvn	r2, #-1073741824	; 0xc0000000
   13f9c:	mov	r1, r5
   13fa0:	bl	13274 <flatcc_builder_default_alloc@@Base+0x458>
   13fa4:	cmp	r0, #0
   13fa8:	bne	13fc0 <flatcc_builder_append_offset_vector@@Base+0x5c>
   13fac:	lsl	r2, r5, #2
   13fb0:	mov	r1, r6
   13fb4:	mov	r0, r4
   13fb8:	pop	{r4, r5, r6, lr}
   13fbc:	b	12da0 <access_monster_buffer@@Base+0x488>
   13fc0:	mov	r0, #0
   13fc4:	pop	{r4, r5, r6, pc}
   13fc8:	andeq	r6, r1, r7, asr #12
   13fcc:	andeq	r6, r1, r0, asr #19
   13fd0:	andeq	r6, r1, r3, asr fp

00013fd4 <flatcc_builder_extend_string@@Base>:
   13fd4:	push	{r4, r5, r6, lr}
   13fd8:	mov	r4, r0
   13fdc:	ldr	r0, [r0, #32]
   13fe0:	ldrh	r3, [r0, #14]
   13fe4:	cmp	r3, #6
   13fe8:	beq	14000 <flatcc_builder_extend_string@@Base+0x2c>
   13fec:	ldr	r3, [pc, #56]	; 1402c <flatcc_builder_extend_string@@Base+0x58>
   13ff0:	movw	r2, #957	; 0x3bd
   13ff4:	ldr	r1, [pc, #52]	; 14030 <flatcc_builder_extend_string@@Base+0x5c>
   13ff8:	ldr	r0, [pc, #52]	; 14034 <flatcc_builder_extend_string@@Base+0x60>
   13ffc:	bl	11fd4 <__assert_fail@plt>
   14000:	mvn	r2, #0
   14004:	mov	r5, r1
   14008:	bl	13274 <flatcc_builder_default_alloc@@Base+0x458>
   1400c:	cmp	r0, #0
   14010:	bne	14024 <flatcc_builder_extend_string@@Base+0x50>
   14014:	mov	r1, r5
   14018:	mov	r0, r4
   1401c:	pop	{r4, r5, r6, lr}
   14020:	b	12cd0 <access_monster_buffer@@Base+0x3b8>
   14024:	mov	r0, #0
   14028:	pop	{r4, r5, r6, pc}
   1402c:	andeq	r6, r1, fp, ror #12
   14030:	andeq	r6, r1, r0, asr #19
   14034:	andeq	r6, r1, r6, lsl #23

00014038 <flatcc_builder_append_string@@Base>:
   14038:	push	{r4, r5, r6, lr}
   1403c:	mov	r4, r0
   14040:	ldr	r0, [r0, #32]
   14044:	ldrh	r3, [r0, #14]
   14048:	cmp	r3, #6
   1404c:	beq	14064 <flatcc_builder_append_string@@Base+0x2c>
   14050:	ldr	r3, [pc, #68]	; 1409c <flatcc_builder_append_string@@Base+0x64>
   14054:	movw	r2, #966	; 0x3c6
   14058:	ldr	r1, [pc, #64]	; 140a0 <flatcc_builder_append_string@@Base+0x68>
   1405c:	ldr	r0, [pc, #64]	; 140a4 <flatcc_builder_append_string@@Base+0x6c>
   14060:	bl	11fd4 <__assert_fail@plt>
   14064:	mov	r5, r2
   14068:	mov	r6, r1
   1406c:	mvn	r2, #0
   14070:	mov	r1, r5
   14074:	bl	13274 <flatcc_builder_default_alloc@@Base+0x458>
   14078:	cmp	r0, #0
   1407c:	bne	14094 <flatcc_builder_append_string@@Base+0x5c>
   14080:	mov	r2, r5
   14084:	mov	r1, r6
   14088:	mov	r0, r4
   1408c:	pop	{r4, r5, r6, lr}
   14090:	b	12da0 <access_monster_buffer@@Base+0x488>
   14094:	mov	r0, #0
   14098:	pop	{r4, r5, r6, pc}
   1409c:	andeq	r6, r1, r8, lsl #13
   140a0:	andeq	r6, r1, r0, asr #19
   140a4:	andeq	r6, r1, r6, lsl #23

000140a8 <flatcc_builder_append_string_str@@Base>:
   140a8:	push	{r4, r5, r6, lr}
   140ac:	mov	r5, r0
   140b0:	mov	r0, r1
   140b4:	mov	r4, r1
   140b8:	bl	11f98 <strlen@plt>
   140bc:	mov	r2, r0
   140c0:	mov	r1, r4
   140c4:	mov	r0, r5
   140c8:	pop	{r4, r5, r6, lr}
   140cc:	b	14038 <flatcc_builder_append_string@@Base>

000140d0 <flatcc_builder_append_string_strn@@Base>:
   140d0:	push	{r4, r5, r6, lr}
   140d4:	mov	r4, r1
   140d8:	mov	r6, r0
   140dc:	mov	r1, #0
   140e0:	mov	r0, r4
   140e4:	mov	r5, r2
   140e8:	bl	11fbc <memchr@plt>
   140ec:	cmp	r0, #0
   140f0:	mov	r1, r4
   140f4:	subne	r5, r0, r4
   140f8:	mov	r0, r6
   140fc:	mov	r2, r5
   14100:	pop	{r4, r5, r6, lr}
   14104:	b	14038 <flatcc_builder_append_string@@Base>

00014108 <flatcc_builder_truncate_vector@@Base>:
   14108:	ldr	r3, [r0, #32]
   1410c:	push	{r4, lr}
   14110:	ldrh	r2, [r3, #14]
   14114:	cmp	r2, #4
   14118:	beq	14130 <flatcc_builder_truncate_vector@@Base+0x28>
   1411c:	ldr	r3, [pc, #72]	; 1416c <flatcc_builder_truncate_vector@@Base+0x64>
   14120:	movw	r2, #985	; 0x3d9
   14124:	ldr	r1, [pc, #68]	; 14170 <flatcc_builder_truncate_vector@@Base+0x68>
   14128:	ldr	r0, [pc, #68]	; 14174 <flatcc_builder_truncate_vector@@Base+0x6c>
   1412c:	bl	11fd4 <__assert_fail@plt>
   14130:	ldr	r2, [r3, #20]
   14134:	cmp	r2, r1
   14138:	bcs	14150 <flatcc_builder_truncate_vector@@Base+0x48>
   1413c:	ldr	r3, [pc, #40]	; 1416c <flatcc_builder_truncate_vector@@Base+0x64>
   14140:	movw	r2, #986	; 0x3da
   14144:	ldr	r1, [pc, #36]	; 14170 <flatcc_builder_truncate_vector@@Base+0x68>
   14148:	ldr	r0, [pc, #40]	; 14178 <flatcc_builder_truncate_vector@@Base+0x70>
   1414c:	b	1412c <flatcc_builder_truncate_vector@@Base+0x24>
   14150:	sub	r2, r2, r1
   14154:	str	r2, [r3, #20]
   14158:	ldr	r3, [r3, #16]
   1415c:	mul	r1, r3, r1
   14160:	bl	12d80 <access_monster_buffer@@Base+0x468>
   14164:	mov	r0, #0
   14168:	pop	{r4, pc}
   1416c:	andeq	r6, r1, r5, lsr #13
   14170:	andeq	r6, r1, r0, asr #19
   14174:	andeq	r6, r1, sl, ror #21
   14178:			; <UNDEFINED> instruction: 0x00016bb2

0001417c <flatcc_builder_truncate_offset_vector@@Base>:
   1417c:	ldr	r3, [r0, #32]
   14180:	push	{r4, lr}
   14184:	ldrh	r2, [r3, #14]
   14188:	cmp	r2, #5
   1418c:	beq	141a4 <flatcc_builder_truncate_offset_vector@@Base+0x28>
   14190:	ldr	r3, [pc, #72]	; 141e0 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   14194:	movw	r2, #994	; 0x3e2
   14198:	ldr	r1, [pc, #68]	; 141e4 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   1419c:	ldr	r0, [pc, #68]	; 141e8 <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   141a0:	bl	11fd4 <__assert_fail@plt>
   141a4:	ldr	r2, [r3, #20]
   141a8:	cmp	r2, r1
   141ac:	bcs	141c4 <flatcc_builder_truncate_offset_vector@@Base+0x48>
   141b0:	ldr	r3, [pc, #40]	; 141e0 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   141b4:	movw	r2, #995	; 0x3e3
   141b8:	ldr	r1, [pc, #36]	; 141e4 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   141bc:	ldr	r0, [pc, #40]	; 141ec <flatcc_builder_truncate_offset_vector@@Base+0x70>
   141c0:	b	141a0 <flatcc_builder_truncate_offset_vector@@Base+0x24>
   141c4:	sub	r2, r2, r1
   141c8:	str	r2, [r3, #20]
   141cc:	ldr	r3, [r3, #16]
   141d0:	mul	r1, r3, r1
   141d4:	bl	12d80 <access_monster_buffer@@Base+0x468>
   141d8:	mov	r0, #0
   141dc:	pop	{r4, pc}
   141e0:	andeq	r6, r1, r4, asr #13
   141e4:	andeq	r6, r1, r0, asr #19
   141e8:	andeq	r6, r1, r3, asr fp
   141ec:	ldrdeq	r6, [r1], -r6	; <UNPREDICTABLE>

000141f0 <flatcc_builder_truncate_string@@Base>:
   141f0:	ldr	r2, [r0, #32]
   141f4:	push	{r4, lr}
   141f8:	ldrh	r3, [r2, #14]
   141fc:	cmp	r3, #6
   14200:	beq	14218 <flatcc_builder_truncate_string@@Base+0x28>
   14204:	ldr	r3, [pc, #64]	; 1424c <flatcc_builder_truncate_string@@Base+0x5c>
   14208:	movw	r2, #1003	; 0x3eb
   1420c:	ldr	r1, [pc, #60]	; 14250 <flatcc_builder_truncate_string@@Base+0x60>
   14210:	ldr	r0, [pc, #60]	; 14254 <flatcc_builder_truncate_string@@Base+0x64>
   14214:	bl	11fd4 <__assert_fail@plt>
   14218:	ldr	r3, [r2, #20]
   1421c:	cmp	r3, r1
   14220:	bcs	14238 <flatcc_builder_truncate_string@@Base+0x48>
   14224:	ldr	r3, [pc, #32]	; 1424c <flatcc_builder_truncate_string@@Base+0x5c>
   14228:	mov	r2, #1004	; 0x3ec
   1422c:	ldr	r1, [pc, #28]	; 14250 <flatcc_builder_truncate_string@@Base+0x60>
   14230:	ldr	r0, [pc, #32]	; 14258 <flatcc_builder_truncate_string@@Base+0x68>
   14234:	b	14214 <flatcc_builder_truncate_string@@Base+0x24>
   14238:	sub	r3, r3, r1
   1423c:	str	r3, [r2, #20]
   14240:	bl	12d80 <access_monster_buffer@@Base+0x468>
   14244:	mov	r0, #0
   14248:	pop	{r4, pc}
   1424c:	andeq	r6, r1, sl, ror #13
   14250:	andeq	r6, r1, r0, asr #19
   14254:	andeq	r6, r1, r6, lsl #23
   14258:	andeq	r6, r1, r1, lsl ip

0001425c <flatcc_builder_start_vector@@Base>:
   1425c:	cmp	r2, #4
   14260:	push	{r4, r5, r6, r7, r8, lr}
   14264:	mov	r7, r1
   14268:	movcs	r1, r2
   1426c:	movcc	r1, #4
   14270:	mov	r5, r0
   14274:	mov	r6, r3
   14278:	bl	12f84 <flatcc_builder_default_alloc@@Base+0x168>
   1427c:	subs	r4, r0, #0
   14280:	mvnne	r4, #0
   14284:	bne	142ac <flatcc_builder_start_vector@@Base+0x50>
   14288:	ldr	r2, [r5, #32]
   1428c:	mov	r3, #4
   14290:	mvn	r1, #3
   14294:	mov	r0, r5
   14298:	strh	r3, [r2, #14]
   1429c:	str	r7, [r2, #16]
   142a0:	str	r4, [r2, #20]
   142a4:	str	r6, [r2, #24]
   142a8:	bl	12c54 <access_monster_buffer@@Base+0x33c>
   142ac:	mov	r0, r4
   142b0:	pop	{r4, r5, r6, r7, r8, pc}

000142b4 <flatcc_builder_start_offset_vector@@Base>:
   142b4:	push	{r4, r5, r6, lr}
   142b8:	mov	r1, #4
   142bc:	mov	r5, r0
   142c0:	bl	12f84 <flatcc_builder_default_alloc@@Base+0x168>
   142c4:	subs	r4, r0, #0
   142c8:	mvnne	r4, #0
   142cc:	bne	142f4 <flatcc_builder_start_offset_vector@@Base+0x40>
   142d0:	ldr	r3, [r5, #32]
   142d4:	mov	r2, #4
   142d8:	mvn	r1, #3
   142dc:	mov	r0, r5
   142e0:	str	r2, [r3, #16]
   142e4:	mov	r2, #5
   142e8:	strh	r2, [r3, #14]
   142ec:	str	r4, [r3, #20]
   142f0:	bl	12c54 <access_monster_buffer@@Base+0x33c>
   142f4:	mov	r0, r4
   142f8:	pop	{r4, r5, r6, pc}

000142fc <flatcc_builder_start_string@@Base>:
   142fc:	push	{r4, r5, r6, lr}
   14300:	mov	r1, #1
   14304:	mov	r5, r0
   14308:	bl	12f84 <flatcc_builder_default_alloc@@Base+0x168>
   1430c:	subs	r4, r0, #0
   14310:	mvnne	r4, #0
   14314:	bne	1433c <flatcc_builder_start_string@@Base+0x40>
   14318:	ldr	r3, [r5, #32]
   1431c:	mov	r2, #1
   14320:	mvn	r1, #3
   14324:	mov	r0, r5
   14328:	str	r2, [r3, #16]
   1432c:	mov	r2, #6
   14330:	strh	r2, [r3, #14]
   14334:	str	r4, [r3, #20]
   14338:	bl	12c54 <access_monster_buffer@@Base+0x33c>
   1433c:	mov	r0, r4
   14340:	pop	{r4, r5, r6, pc}

00014344 <flatcc_builder_reserve_table@@Base>:
   14344:	cmp	r1, #0
   14348:	bge	14364 <flatcc_builder_reserve_table@@Base+0x20>
   1434c:	push	{r4, lr}
   14350:	movw	r2, #1065	; 0x429
   14354:	ldr	r3, [pc, #12]	; 14368 <flatcc_builder_reserve_table@@Base+0x24>
   14358:	ldr	r1, [pc, #12]	; 1436c <flatcc_builder_reserve_table@@Base+0x28>
   1435c:	ldr	r0, [pc, #12]	; 14370 <flatcc_builder_reserve_table@@Base+0x2c>
   14360:	bl	11fd4 <__assert_fail@plt>
   14364:	b	1305c <flatcc_builder_default_alloc@@Base+0x240>
   14368:	andeq	r6, r1, r9, lsl #14
   1436c:	andeq	r6, r1, r0, asr #19
   14370:	andeq	r6, r1, r9, asr #24

00014374 <flatcc_builder_start_table@@Base>:
   14374:	push	{r4, r5, r6, lr}
   14378:	mov	r5, r1
   1437c:	mov	r1, #4
   14380:	mov	r4, r0
   14384:	bl	12f84 <flatcc_builder_default_alloc@@Base+0x168>
   14388:	cmp	r0, #0
   1438c:	beq	1439c <flatcc_builder_start_table@@Base+0x28>
   14390:	mvn	r5, #0
   14394:	mov	r0, r5
   14398:	pop	{r4, r5, r6, pc}
   1439c:	ldr	r2, [r4, #4]
   143a0:	ldr	r3, [r4, #32]
   143a4:	ldr	r1, [r4, #52]	; 0x34
   143a8:	sub	r2, r2, r1
   143ac:	ldr	r1, [r4, #76]	; 0x4c
   143b0:	str	r2, [r3, #16]
   143b4:	ldr	r2, [r4]
   143b8:	sub	r2, r2, r1
   143bc:	mov	r1, r5
   143c0:	str	r2, [r3, #20]
   143c4:	ldr	r2, [r4, #12]
   143c8:	str	r2, [r3, #24]
   143cc:	ldrh	r2, [r4, #8]
   143d0:	strh	r2, [r3, #28]
   143d4:	ldr	r2, [pc, #44]	; 14408 <flatcc_builder_start_table@@Base+0x94>
   143d8:	strh	r0, [r4, #8]
   143dc:	mov	r0, r4
   143e0:	str	r2, [r4, #12]
   143e4:	mov	r2, #3
   143e8:	strh	r2, [r3, #14]
   143ec:	bl	1305c <flatcc_builder_default_alloc@@Base+0x240>
   143f0:	subs	r5, r0, #0
   143f4:	bne	14390 <flatcc_builder_start_table@@Base+0x1c>
   143f8:	movw	r1, #65532	; 0xfffc
   143fc:	mov	r0, r4
   14400:	bl	12c54 <access_monster_buffer@@Base+0x33c>
   14404:	b	14394 <flatcc_builder_start_table@@Base+0x20>
   14408:	svccs	0x00693b52

0001440c <flatcc_builder_create_vtable@@Base>:
   1440c:	mov	r3, #0
   14410:	push	{lr}		; (str lr, [sp, #-4]!)
   14414:	sub	sp, sp, #76	; 0x4c
   14418:	cmp	r2, #0
   1441c:	str	r3, [sp]
   14420:	str	r3, [sp, #4]
   14424:	movne	r3, #1
   14428:	strne	r1, [sp, #8]
   1442c:	mov	r1, sp
   14430:	strdne	r2, [sp]
   14434:	ldr	r3, [r0, #152]	; 0x98
   14438:	strne	r2, [sp, #12]
   1443c:	cmp	r3, #0
   14440:	bne	1445c <flatcc_builder_create_vtable@@Base+0x50>
   14444:	ldr	r3, [r0, #180]	; 0xb4
   14448:	cmp	r3, #0
   1444c:	bne	1445c <flatcc_builder_create_vtable@@Base+0x50>
   14450:	bl	130e0 <flatcc_builder_default_alloc@@Base+0x2c4>
   14454:	add	sp, sp, #76	; 0x4c
   14458:	pop	{pc}		; (ldr pc, [sp], #4)
   1445c:	bl	131fc <flatcc_builder_default_alloc@@Base+0x3e0>
   14460:	cmp	r0, #0
   14464:	addne	r0, r0, #1
   14468:	b	14454 <flatcc_builder_create_vtable@@Base+0x48>

0001446c <flatcc_builder_create_cached_vtable@@Base>:
   1446c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14470:	mov	r6, r3
   14474:	sub	sp, sp, #20
   14478:	mov	r4, r0
   1447c:	mov	sl, r1
   14480:	mov	r7, r2
   14484:	ldr	r3, [r0, #116]	; 0x74
   14488:	cmp	r3, #0
   1448c:	bne	14534 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   14490:	ldr	r5, [r0, #124]	; 0x7c
   14494:	add	r9, r0, #92	; 0x5c
   14498:	cmp	r5, #0
   1449c:	beq	144b4 <flatcc_builder_create_cached_vtable@@Base+0x48>
   144a0:	ldr	r3, [pc, #560]	; 146d8 <flatcc_builder_create_cached_vtable@@Base+0x26c>
   144a4:	movw	r2, #342	; 0x156
   144a8:	ldr	r1, [pc, #556]	; 146dc <flatcc_builder_create_cached_vtable@@Base+0x270>
   144ac:	ldr	r0, [pc, #556]	; 146e0 <flatcc_builder_create_cached_vtable@@Base+0x274>
   144b0:	bl	11fd4 <__assert_fail@plt>
   144b4:	mov	r3, #16
   144b8:	mov	r2, r5
   144bc:	str	r5, [sp]
   144c0:	mov	r1, #6
   144c4:	bl	12f14 <flatcc_builder_default_alloc@@Base+0xf8>
   144c8:	cmp	r0, #0
   144cc:	bne	144dc <flatcc_builder_create_cached_vtable@@Base+0x70>
   144d0:	mov	r0, #0
   144d4:	add	sp, sp, #20
   144d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144dc:	mov	r3, #16
   144e0:	mov	r1, r9
   144e4:	ldr	r0, [r4, #40]	; 0x28
   144e8:	mov	r2, #256	; 0x100
   144ec:	str	r3, [r4, #124]	; 0x7c
   144f0:	mov	r3, #5
   144f4:	ldr	r8, [r4, #48]	; 0x30
   144f8:	str	r3, [sp]
   144fc:	mov	r3, #1
   14500:	blx	r8
   14504:	cmp	r0, #0
   14508:	moveq	r3, #256	; 0x100
   1450c:	ldreq	r1, [r4, #96]	; 0x60
   14510:	bne	144d0 <flatcc_builder_create_cached_vtable@@Base+0x64>
   14514:	lsl	r2, r3, #1
   14518:	cmp	r2, r1
   1451c:	bls	145f4 <flatcc_builder_create_cached_vtable@@Base+0x188>
   14520:	lsr	r3, r3, #2
   14524:	mov	r2, #1
   14528:	cmp	r3, r2, lsl r5
   1452c:	bhi	145fc <flatcc_builder_create_cached_vtable@@Base+0x190>
   14530:	str	r5, [r4, #116]	; 0x74
   14534:	ldr	r8, [r4, #92]	; 0x5c
   14538:	ldr	r3, [r4, #116]	; 0x74
   1453c:	rsb	r3, r3, #32
   14540:	lsr	r6, r6, r3
   14544:	adds	r3, r8, r6, lsl #2
   14548:	ldrne	r9, [r8, r6, lsl #2]
   1454c:	movne	fp, #0
   14550:	str	r3, [sp, #8]
   14554:	beq	144d0 <flatcc_builder_create_cached_vtable@@Base+0x64>
   14558:	cmp	r9, #0
   1455c:	bne	14604 <flatcc_builder_create_cached_vtable@@Base+0x198>
   14560:	mov	r3, #16
   14564:	mov	r1, #6
   14568:	ldr	r2, [r4, #124]	; 0x7c
   1456c:	mov	r0, r4
   14570:	str	r9, [sp]
   14574:	bl	12f14 <flatcc_builder_default_alloc@@Base+0xf8>
   14578:	subs	r5, r0, #0
   1457c:	beq	144d0 <flatcc_builder_create_cached_vtable@@Base+0x64>
   14580:	ldr	r3, [r4, #124]	; 0x7c
   14584:	mov	r1, sl
   14588:	mov	r0, r4
   1458c:	add	r2, r3, #16
   14590:	str	r2, [r4, #124]	; 0x7c
   14594:	ldr	r2, [r4, #152]	; 0x98
   14598:	str	r2, [r5, #4]
   1459c:	ldr	r2, [r8, r6, lsl #2]
   145a0:	str	r2, [r5, #12]
   145a4:	mov	r2, r7
   145a8:	str	r3, [r8, r6, lsl #2]
   145ac:	bl	1440c <flatcc_builder_create_vtable@@Base>
   145b0:	cmp	r0, #0
   145b4:	str	r0, [r5]
   145b8:	beq	144d0 <flatcc_builder_create_cached_vtable@@Base+0x64>
   145bc:	cmp	fp, #0
   145c0:	ldrne	r3, [fp, #8]
   145c4:	strne	r3, [r5, #8]
   145c8:	bne	1468c <flatcc_builder_create_cached_vtable@@Base+0x220>
   145cc:	ldr	r2, [r4, #120]	; 0x78
   145d0:	ldr	r3, [r4, #172]	; 0xac
   145d4:	cmp	r3, #0
   145d8:	beq	14694 <flatcc_builder_create_cached_vtable@@Base+0x228>
   145dc:	add	r1, r7, r2
   145e0:	cmp	r3, r1
   145e4:	bcs	14694 <flatcc_builder_create_cached_vtable@@Base+0x228>
   145e8:	mov	r0, r4
   145ec:	bl	13420 <flatcc_builder_flush_vtable_cache@@Base>
   145f0:	b	1468c <flatcc_builder_create_cached_vtable@@Base+0x220>
   145f4:	mov	r3, r2
   145f8:	b	14514 <flatcc_builder_create_cached_vtable@@Base+0xa8>
   145fc:	add	r5, r5, #1
   14600:	b	14528 <flatcc_builder_create_cached_vtable@@Base+0xbc>
   14604:	ldr	r0, [r4, #68]	; 0x44
   14608:	str	r3, [sp, #12]
   1460c:	ldr	r5, [r4, #100]	; 0x64
   14610:	add	r5, r5, r9
   14614:	ldr	r2, [r5, #8]
   14618:	add	r1, r0, r2
   1461c:	ldrh	r2, [r0, r2]
   14620:	cmp	r2, r7
   14624:	bne	14640 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   14628:	mov	r2, r7
   1462c:	mov	r0, sl
   14630:	bl	11f50 <memcmp@plt>
   14634:	cmp	r0, #0
   14638:	ldr	r3, [sp, #12]
   1463c:	beq	1464c <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   14640:	add	r3, r5, #12
   14644:	ldr	r9, [r5, #12]
   14648:	b	14558 <flatcc_builder_create_cached_vtable@@Base+0xec>
   1464c:	ldr	r1, [r5, #4]
   14650:	ldr	r2, [r4, #152]	; 0x98
   14654:	cmp	r1, r2
   14658:	beq	1466c <flatcc_builder_create_cached_vtable@@Base+0x200>
   1465c:	add	r3, r5, #12
   14660:	mov	fp, r5
   14664:	ldr	r9, [r5, #12]
   14668:	b	14558 <flatcc_builder_create_cached_vtable@@Base+0xec>
   1466c:	ldr	r2, [sp, #8]
   14670:	cmp	r3, r2
   14674:	beq	1468c <flatcc_builder_create_cached_vtable@@Base+0x220>
   14678:	ldr	r2, [r5, #12]
   1467c:	str	r2, [r3]
   14680:	ldr	r3, [r8, r6, lsl #2]
   14684:	str	r3, [r5, #12]
   14688:	str	r9, [r8, r6, lsl #2]
   1468c:	ldr	r0, [r5]
   14690:	b	144d4 <flatcc_builder_create_cached_vtable@@Base+0x68>
   14694:	mov	r3, #0
   14698:	mov	r1, #2
   1469c:	mov	r0, r4
   146a0:	str	r3, [sp]
   146a4:	mov	r3, r7
   146a8:	bl	12f14 <flatcc_builder_default_alloc@@Base+0xf8>
   146ac:	cmp	r0, #0
   146b0:	mvneq	r0, #0
   146b4:	beq	144d4 <flatcc_builder_create_cached_vtable@@Base+0x68>
   146b8:	ldr	r3, [r4, #120]	; 0x78
   146bc:	mov	r2, r7
   146c0:	mov	r1, sl
   146c4:	str	r3, [r5, #8]
   146c8:	add	r3, r3, r7
   146cc:	str	r3, [r4, #120]	; 0x78
   146d0:	bl	11f44 <memcpy@plt>
   146d4:	b	1468c <flatcc_builder_create_cached_vtable@@Base+0x220>
   146d8:	andeq	r6, r1, r6, lsr #14
   146dc:	andeq	r6, r1, r0, asr #19
   146e0:	andeq	r6, r1, r3, lsr ip

000146e4 <flatcc_builder_create_table@@Base>:
   146e4:	push	{r4, r5, r6, r7, lr}
   146e8:	sub	sp, sp, #84	; 0x54
   146ec:	ldr	r4, [sp, #108]	; 0x6c
   146f0:	ldr	ip, [sp, #112]	; 0x70
   146f4:	cmp	r4, #0
   146f8:	bge	14710 <flatcc_builder_create_table@@Base+0x2c>
   146fc:	ldr	r3, [pc, #276]	; 14818 <flatcc_builder_create_table@@Base+0x134>
   14700:	movw	r2, #1237	; 0x4d5
   14704:	ldr	r1, [pc, #272]	; 1481c <flatcc_builder_create_table@@Base+0x138>
   14708:	ldr	r0, [pc, #272]	; 14820 <flatcc_builder_create_table@@Base+0x13c>
   1470c:	bl	11fd4 <__assert_fail@plt>
   14710:	tst	ip, #1
   14714:	bne	1472c <flatcc_builder_create_table@@Base+0x48>
   14718:	ldr	r3, [pc, #248]	; 14818 <flatcc_builder_create_table@@Base+0x134>
   1471c:	movw	r2, #1243	; 0x4db
   14720:	ldr	r1, [pc, #244]	; 1481c <flatcc_builder_create_table@@Base+0x138>
   14724:	ldr	r0, [pc, #248]	; 14824 <flatcc_builder_create_table@@Base+0x140>
   14728:	b	1470c <flatcc_builder_create_table@@Base+0x28>
   1472c:	cmp	r3, #4
   14730:	sub	ip, ip, #1
   14734:	movcs	lr, r3
   14738:	ldrh	r3, [r0, #128]	; 0x80
   1473c:	movcc	lr, #4
   14740:	cmp	r3, lr
   14744:	ldr	r3, [r0, #136]	; 0x88
   14748:	strhcc	lr, [r0, #128]	; 0x80
   1474c:	sub	lr, lr, #1
   14750:	sub	r5, r3, r2
   14754:	sub	r3, r5, #4
   14758:	and	lr, lr, r5
   1475c:	sub	ip, r3, ip
   14760:	sub	r3, lr, r3
   14764:	sub	ip, ip, lr
   14768:	sub	r3, r3, #4
   1476c:	str	ip, [sp, #4]
   14770:	ldr	ip, [sp, #104]	; 0x68
   14774:	add	r4, ip, r4, lsl #1
   14778:	cmp	r4, ip
   1477c:	bne	14800 <flatcc_builder_create_table@@Base+0x11c>
   14780:	mov	r3, #4
   14784:	cmp	r2, #0
   14788:	add	ip, sp, r3
   1478c:	str	r3, [sp, #8]
   14790:	str	ip, [sp, #16]
   14794:	str	r3, [sp, #20]
   14798:	mov	r3, #1
   1479c:	str	r3, [sp, #12]
   147a0:	beq	147bc <flatcc_builder_create_table@@Base+0xd8>
   147a4:	add	r3, r2, #4
   147a8:	str	r3, [sp, #8]
   147ac:	mov	r3, #2
   147b0:	str	r1, [sp, #24]
   147b4:	str	r3, [sp, #12]
   147b8:	str	r2, [sp, #28]
   147bc:	cmp	lr, #0
   147c0:	beq	147f0 <flatcc_builder_create_table@@Base+0x10c>
   147c4:	ldr	r3, [sp, #8]
   147c8:	add	r2, sp, #80	; 0x50
   147cc:	ldr	r1, [pc, #84]	; 14828 <flatcc_builder_create_table@@Base+0x144>
   147d0:	add	r3, r3, lr
   147d4:	str	r3, [sp, #8]
   147d8:	ldr	r3, [sp, #12]
   147dc:	add	r3, r3, #1
   147e0:	add	r2, r2, r3, lsl #3
   147e4:	str	r3, [sp, #12]
   147e8:	str	r1, [r2, #-72]	; 0xffffffb8
   147ec:	str	lr, [r2, #-68]	; 0xffffffbc
   147f0:	add	r1, sp, #8
   147f4:	bl	131fc <flatcc_builder_default_alloc@@Base+0x3e0>
   147f8:	add	sp, sp, #84	; 0x54
   147fc:	pop	{r4, r5, r6, r7, pc}
   14800:	ldrh	r5, [ip], #2
   14804:	ldr	r6, [r1, r5]
   14808:	sub	r7, r3, r5
   1480c:	add	r6, r6, r7
   14810:	str	r6, [r1, r5]
   14814:	b	14778 <flatcc_builder_create_table@@Base+0x94>
   14818:	andeq	r6, r1, pc, lsr #14
   1481c:	andeq	r6, r1, r0, asr #19
   14820:	andeq	r6, r1, r2, asr #24
   14824:	andeq	r6, r1, r4, asr ip
   14828:	ldrdeq	r6, [r1], -sl

0001482c <flatcc_builder_check_required_field@@Base>:
   1482c:	ldr	r3, [r0, #32]
   14830:	ldrh	r3, [r3, #14]
   14834:	cmp	r3, #3
   14838:	beq	14854 <flatcc_builder_check_required_field@@Base+0x28>
   1483c:	push	{r4, lr}
   14840:	movw	r2, #1272	; 0x4f8
   14844:	ldr	r3, [pc, #52]	; 14880 <flatcc_builder_check_required_field@@Base+0x54>
   14848:	ldr	r1, [pc, #52]	; 14884 <flatcc_builder_check_required_field@@Base+0x58>
   1484c:	ldr	r0, [pc, #52]	; 14888 <flatcc_builder_check_required_field@@Base+0x5c>
   14850:	bl	11fd4 <__assert_fail@plt>
   14854:	ldrh	r3, [r0, #8]
   14858:	cmp	r3, r1
   1485c:	bls	14878 <flatcc_builder_check_required_field@@Base+0x4c>
   14860:	ldr	r3, [r0, #4]
   14864:	lsl	r1, r1, #1
   14868:	ldrh	r0, [r3, r1]
   1486c:	adds	r0, r0, #0
   14870:	movne	r0, #1
   14874:	bx	lr
   14878:	mov	r0, #0
   1487c:	bx	lr
   14880:	andeq	r6, r1, fp, asr #14
   14884:	andeq	r6, r1, r0, asr #19
   14888:	andeq	r6, r1, pc, asr ip

0001488c <flatcc_builder_check_union_field@@Base>:
   1488c:	ldr	r3, [r0, #32]
   14890:	ldrh	r3, [r3, #14]
   14894:	cmp	r3, #3
   14898:	beq	148b4 <flatcc_builder_check_union_field@@Base+0x28>
   1489c:	push	{r4, lr}
   148a0:	movw	r2, #1279	; 0x4ff
   148a4:	ldr	r3, [pc, #104]	; 14914 <flatcc_builder_check_union_field@@Base+0x88>
   148a8:	ldr	r1, [pc, #104]	; 14918 <flatcc_builder_check_union_field@@Base+0x8c>
   148ac:	ldr	r0, [pc, #104]	; 1491c <flatcc_builder_check_union_field@@Base+0x90>
   148b0:	bl	11fd4 <__assert_fail@plt>
   148b4:	cmp	r1, #0
   148b8:	beq	1490c <flatcc_builder_check_union_field@@Base+0x80>
   148bc:	ldrh	r3, [r0, #8]
   148c0:	cmp	r3, r1
   148c4:	bls	1490c <flatcc_builder_check_union_field@@Base+0x80>
   148c8:	ldr	r3, [r0, #4]
   148cc:	sub	r1, r1, #-2147483647	; 0x80000001
   148d0:	lsl	r1, r1, #1
   148d4:	ldrh	r2, [r3, r1]!
   148d8:	cmp	r2, #0
   148dc:	ldrh	r1, [r3, #2]
   148e0:	bne	148f0 <flatcc_builder_check_union_field@@Base+0x64>
   148e4:	clz	r0, r1
   148e8:	lsr	r0, r0, #5
   148ec:	bx	lr
   148f0:	ldr	r3, [r0, #16]
   148f4:	ldrb	r3, [r3, r2]
   148f8:	cmp	r3, #0
   148fc:	beq	148e4 <flatcc_builder_check_union_field@@Base+0x58>
   14900:	adds	r0, r1, #0
   14904:	movne	r0, #1
   14908:	bx	lr
   1490c:	mov	r0, #0
   14910:	bx	lr
   14914:	andeq	r6, r1, pc, ror #14
   14918:	andeq	r6, r1, r0, asr #19
   1491c:	andeq	r6, r1, pc, asr ip

00014920 <flatcc_builder_check_required@@Base>:
   14920:	ldr	r3, [r0, #32]
   14924:	push	{r4, lr}
   14928:	ldrh	r3, [r3, #14]
   1492c:	cmp	r3, #3
   14930:	beq	14948 <flatcc_builder_check_required@@Base+0x28>
   14934:	ldr	r3, [pc, #84]	; 14990 <flatcc_builder_check_required@@Base+0x70>
   14938:	movw	r2, #1297	; 0x511
   1493c:	ldr	r1, [pc, #80]	; 14994 <flatcc_builder_check_required@@Base+0x74>
   14940:	ldr	r0, [pc, #80]	; 14998 <flatcc_builder_check_required@@Base+0x78>
   14944:	bl	11fd4 <__assert_fail@plt>
   14948:	ldrh	r3, [r0, #8]
   1494c:	cmp	r3, r2
   14950:	subge	r1, r1, #2
   14954:	movge	ip, #0
   14958:	bge	14980 <flatcc_builder_check_required@@Base+0x60>
   1495c:	mov	r0, #0
   14960:	pop	{r4, pc}
   14964:	ldrh	r3, [r1, #2]!
   14968:	ldr	lr, [r0, #4]
   1496c:	lsl	r3, r3, #1
   14970:	ldrh	r3, [lr, r3]
   14974:	cmp	r3, #0
   14978:	beq	1495c <flatcc_builder_check_required@@Base+0x3c>
   1497c:	add	ip, ip, #1
   14980:	cmp	ip, r2
   14984:	blt	14964 <flatcc_builder_check_required@@Base+0x44>
   14988:	mov	r0, #1
   1498c:	pop	{r4, pc}
   14990:	muleq	r1, r0, r7
   14994:	andeq	r6, r1, r0, asr #19
   14998:	andeq	r6, r1, pc, asr ip

0001499c <flatcc_builder_end_table@@Base>:
   1499c:	ldr	r3, [r0, #32]
   149a0:	push	{r4, r5, r6, r7, lr}
   149a4:	sub	sp, sp, #20
   149a8:	ldrh	r3, [r3, #14]
   149ac:	cmp	r3, #3
   149b0:	beq	149c8 <flatcc_builder_end_table@@Base+0x2c>
   149b4:	ldr	r3, [pc, #260]	; 14ac0 <flatcc_builder_end_table@@Base+0x124>
   149b8:	movw	r2, #1317	; 0x525
   149bc:	ldr	r1, [pc, #256]	; 14ac4 <flatcc_builder_end_table@@Base+0x128>
   149c0:	ldr	r0, [pc, #256]	; 14ac8 <flatcc_builder_end_table@@Base+0x12c>
   149c4:	bl	11fd4 <__assert_fail@plt>
   149c8:	ldrh	r5, [r0, #8]
   149cc:	mov	r4, r0
   149d0:	ldr	r1, [r0, #4]
   149d4:	ldr	r3, [r0, #20]
   149d8:	add	r5, r5, #2
   149dc:	lsl	r5, r5, #1
   149e0:	sub	r6, r1, #4
   149e4:	uxth	r5, r5
   149e8:	add	r3, r3, #4
   149ec:	uxth	r2, r3
   149f0:	ldr	r3, [r0, #12]
   149f4:	strh	r5, [r1, #-4]
   149f8:	strh	r2, [r1, #-2]
   149fc:	ldr	r1, [pc, #200]	; 14acc <flatcc_builder_end_table@@Base+0x130>
   14a00:	eor	r3, r3, r5
   14a04:	mul	r3, r1, r3
   14a08:	eor	r3, r3, r2
   14a0c:	mov	r2, r5
   14a10:	mul	r3, r1, r3
   14a14:	mov	r1, r6
   14a18:	str	r3, [r0, #12]
   14a1c:	bl	1446c <flatcc_builder_create_cached_vtable@@Base>
   14a20:	subs	r7, r0, #0
   14a24:	beq	14ab4 <flatcc_builder_end_table@@Base+0x118>
   14a28:	mov	r2, r5
   14a2c:	mov	r1, #0
   14a30:	mov	r0, r6
   14a34:	bl	11fb0 <memset@plt>
   14a38:	ldr	r3, [r4, #32]
   14a3c:	mov	r0, r4
   14a40:	ldr	r2, [r4, #76]	; 0x4c
   14a44:	ldr	r3, [r3, #20]
   14a48:	str	r7, [sp, #8]
   14a4c:	add	r2, r2, r3
   14a50:	ldr	r3, [r4]
   14a54:	sub	r3, r3, r2
   14a58:	asr	r3, r3, #1
   14a5c:	strd	r2, [sp]
   14a60:	ldrh	r3, [r4, #130]	; 0x82
   14a64:	ldr	r1, [r4, #16]
   14a68:	ldr	r2, [r4, #20]
   14a6c:	bl	146e4 <flatcc_builder_create_table@@Base>
   14a70:	subs	r7, r0, #0
   14a74:	beq	14ab4 <flatcc_builder_end_table@@Base+0x118>
   14a78:	ldr	r3, [r4, #32]
   14a7c:	mov	r0, r4
   14a80:	ldr	r1, [r3, #16]
   14a84:	ldr	r2, [r3, #24]
   14a88:	str	r2, [r4, #12]
   14a8c:	ldrh	r2, [r3, #28]
   14a90:	ldr	r3, [r3, #20]
   14a94:	strh	r2, [r4, #8]
   14a98:	ldr	r2, [r4, #52]	; 0x34
   14a9c:	add	r2, r2, r1
   14aa0:	str	r2, [r4, #4]
   14aa4:	ldr	r2, [r4, #76]	; 0x4c
   14aa8:	add	r3, r2, r3
   14aac:	str	r3, [r4]
   14ab0:	bl	12d18 <access_monster_buffer@@Base+0x400>
   14ab4:	mov	r0, r7
   14ab8:	add	sp, sp, #20
   14abc:	pop	{r4, r5, r6, r7, pc}
   14ac0:	andeq	r6, r1, lr, lsr #15
   14ac4:	andeq	r6, r1, r0, asr #19
   14ac8:	andeq	r6, r1, pc, asr ip
   14acc:			; <UNDEFINED> instruction: 0x9e3779b1

00014ad0 <flatcc_builder_create_vector@@Base>:
   14ad0:	push	{lr}		; (str lr, [sp, #-4]!)
   14ad4:	sub	sp, sp, #84	; 0x54
   14ad8:	ldr	lr, [sp, #92]	; 0x5c
   14adc:	ldrh	ip, [sp, #88]	; 0x58
   14ae0:	cmp	r2, lr
   14ae4:	bls	14afc <flatcc_builder_create_vector@@Base+0x2c>
   14ae8:	ldr	r3, [pc, #184]	; 14ba8 <flatcc_builder_create_vector@@Base+0xd8>
   14aec:	movw	r2, #1365	; 0x555
   14af0:	ldr	r1, [pc, #180]	; 14bac <flatcc_builder_create_vector@@Base+0xdc>
   14af4:	ldr	r0, [pc, #180]	; 14bb0 <flatcc_builder_create_vector@@Base+0xe0>
   14af8:	bl	11fd4 <__assert_fail@plt>
   14afc:	ldrh	lr, [r0, #128]	; 0x80
   14b00:	mul	r3, r3, r2
   14b04:	cmp	ip, #4
   14b08:	str	r2, [sp, #4]
   14b0c:	movcc	ip, #4
   14b10:	ldr	r2, [r0, #136]	; 0x88
   14b14:	cmp	lr, ip
   14b18:	sub	r2, r2, r3
   14b1c:	strhcc	ip, [r0, #128]	; 0x80
   14b20:	sub	ip, ip, #1
   14b24:	and	ip, ip, r2
   14b28:	mov	r2, #4
   14b2c:	add	lr, sp, r2
   14b30:	cmp	r3, #0
   14b34:	str	r2, [sp, #8]
   14b38:	str	lr, [sp, #16]
   14b3c:	str	r2, [sp, #20]
   14b40:	mov	r2, #1
   14b44:	str	r2, [sp, #12]
   14b48:	beq	14b64 <flatcc_builder_create_vector@@Base+0x94>
   14b4c:	add	r2, r3, #4
   14b50:	str	r3, [sp, #28]
   14b54:	mov	r3, #2
   14b58:	str	r2, [sp, #8]
   14b5c:	str	r3, [sp, #12]
   14b60:	str	r1, [sp, #24]
   14b64:	cmp	ip, #0
   14b68:	beq	14b98 <flatcc_builder_create_vector@@Base+0xc8>
   14b6c:	ldr	r3, [sp, #8]
   14b70:	add	r2, sp, #80	; 0x50
   14b74:	ldr	r1, [pc, #56]	; 14bb4 <flatcc_builder_create_vector@@Base+0xe4>
   14b78:	add	r3, r3, ip
   14b7c:	str	r3, [sp, #8]
   14b80:	ldr	r3, [sp, #12]
   14b84:	add	r3, r3, #1
   14b88:	add	r2, r2, r3, lsl #3
   14b8c:	str	r3, [sp, #12]
   14b90:	str	r1, [r2, #-72]	; 0xffffffb8
   14b94:	str	ip, [r2, #-68]	; 0xffffffbc
   14b98:	add	r1, sp, #8
   14b9c:	bl	131fc <flatcc_builder_default_alloc@@Base+0x3e0>
   14ba0:	add	sp, sp, #84	; 0x54
   14ba4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ba8:	andeq	r6, r1, r7, asr #15
   14bac:	andeq	r6, r1, r0, asr #19
   14bb0:	andeq	r6, r1, sl, lsl #25
   14bb4:	ldrdeq	r6, [r1], -sl

00014bb8 <flatcc_builder_end_vector@@Base>:
   14bb8:	push	{r0, r1, r2, r4, r5, lr}
   14bbc:	ldr	r2, [r0, #32]
   14bc0:	ldrh	r3, [r2, #14]
   14bc4:	cmp	r3, #4
   14bc8:	beq	14be0 <flatcc_builder_end_vector@@Base+0x28>
   14bcc:	ldr	r3, [pc, #76]	; 14c20 <flatcc_builder_end_vector@@Base+0x68>
   14bd0:	movw	r2, #1400	; 0x578
   14bd4:	ldr	r1, [pc, #72]	; 14c24 <flatcc_builder_end_vector@@Base+0x6c>
   14bd8:	ldr	r0, [pc, #72]	; 14c28 <flatcc_builder_end_vector@@Base+0x70>
   14bdc:	bl	11fd4 <__assert_fail@plt>
   14be0:	ldr	r3, [r2, #24]
   14be4:	mov	r4, r0
   14be8:	str	r3, [sp, #4]
   14bec:	ldrh	r3, [r0, #130]	; 0x82
   14bf0:	str	r3, [sp]
   14bf4:	ldr	r3, [r2, #16]
   14bf8:	ldr	r1, [r0, #16]
   14bfc:	ldr	r2, [r2, #20]
   14c00:	bl	14ad0 <flatcc_builder_create_vector@@Base>
   14c04:	subs	r5, r0, #0
   14c08:	beq	14c14 <flatcc_builder_end_vector@@Base+0x5c>
   14c0c:	mov	r0, r4
   14c10:	bl	12d18 <access_monster_buffer@@Base+0x400>
   14c14:	mov	r0, r5
   14c18:	add	sp, sp, #12
   14c1c:	pop	{r4, r5, pc}
   14c20:	andeq	r6, r1, r4, ror #15
   14c24:	andeq	r6, r1, r0, asr #19
   14c28:	andeq	r6, r1, sl, ror #21

00014c2c <flatcc_builder_vector_count@@Base>:
   14c2c:	ldr	r3, [r0, #32]
   14c30:	ldr	r0, [r3, #20]
   14c34:	bx	lr

00014c38 <flatcc_builder_vector_edit@@Base>:
   14c38:	ldr	r0, [r0, #16]
   14c3c:	bx	lr

00014c40 <flatcc_builder_create_offset_vector_direct@@Base>:
   14c40:	cmn	r2, #-1073741823	; 0xc0000001
   14c44:	bhi	14c50 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   14c48:	mov	r3, #0
   14c4c:	b	132c8 <flatcc_builder_default_alloc@@Base+0x4ac>
   14c50:	mov	r0, #0
   14c54:	bx	lr

00014c58 <flatcc_builder_end_offset_vector@@Base>:
   14c58:	ldr	r3, [r0, #32]
   14c5c:	push	{r4, r5, r6, lr}
   14c60:	ldrh	r2, [r3, #14]
   14c64:	cmp	r2, #5
   14c68:	beq	14c80 <flatcc_builder_end_offset_vector@@Base+0x28>
   14c6c:	ldr	r3, [pc, #52]	; 14ca8 <flatcc_builder_end_offset_vector@@Base+0x50>
   14c70:	movw	r2, #1480	; 0x5c8
   14c74:	ldr	r1, [pc, #48]	; 14cac <flatcc_builder_end_offset_vector@@Base+0x54>
   14c78:	ldr	r0, [pc, #48]	; 14cb0 <flatcc_builder_end_offset_vector@@Base+0x58>
   14c7c:	bl	11fd4 <__assert_fail@plt>
   14c80:	ldr	r1, [r0, #16]
   14c84:	mov	r4, r0
   14c88:	ldr	r2, [r3, #20]
   14c8c:	bl	14c40 <flatcc_builder_create_offset_vector_direct@@Base>
   14c90:	subs	r5, r0, #0
   14c94:	beq	14ca0 <flatcc_builder_end_offset_vector@@Base+0x48>
   14c98:	mov	r0, r4
   14c9c:	bl	12d18 <access_monster_buffer@@Base+0x400>
   14ca0:	mov	r0, r5
   14ca4:	pop	{r4, r5, r6, pc}
   14ca8:	strdeq	r6, [r1], -lr
   14cac:	andeq	r6, r1, r0, asr #19
   14cb0:	andeq	r6, r1, r3, asr fp

00014cb4 <flatcc_builder_create_offset_vector@@Base>:
   14cb4:	push	{r4, r5, r6, lr}
   14cb8:	mov	r4, r0
   14cbc:	mov	r6, r1
   14cc0:	mov	r5, r2
   14cc4:	bl	142b4 <flatcc_builder_start_offset_vector@@Base>
   14cc8:	cmp	r0, #0
   14ccc:	bne	14cfc <flatcc_builder_create_offset_vector@@Base+0x48>
   14cd0:	mov	r1, r5
   14cd4:	mov	r0, r4
   14cd8:	bl	13ec4 <flatcc_builder_extend_offset_vector@@Base>
   14cdc:	cmp	r0, #0
   14ce0:	beq	14cfc <flatcc_builder_create_offset_vector@@Base+0x48>
   14ce4:	lsl	r2, r5, #2
   14ce8:	mov	r1, r6
   14cec:	bl	11f44 <memcpy@plt>
   14cf0:	mov	r0, r4
   14cf4:	pop	{r4, r5, r6, lr}
   14cf8:	b	14c58 <flatcc_builder_end_offset_vector@@Base>
   14cfc:	mov	r0, #0
   14d00:	pop	{r4, r5, r6, pc}

00014d04 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   14d04:	ldr	r2, [r0, #32]
   14d08:	mov	r3, r1
   14d0c:	push	{r4, r5, r6, lr}
   14d10:	ldrh	r1, [r2, #14]
   14d14:	cmp	r1, #5
   14d18:	beq	14d30 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   14d1c:	ldr	r3, [pc, #64]	; 14d64 <flatcc_builder_end_offset_vector_for_unions@@Base+0x60>
   14d20:	movw	r2, #1493	; 0x5d5
   14d24:	ldr	r1, [pc, #60]	; 14d68 <flatcc_builder_end_offset_vector_for_unions@@Base+0x64>
   14d28:	ldr	r0, [pc, #60]	; 14d6c <flatcc_builder_end_offset_vector_for_unions@@Base+0x68>
   14d2c:	bl	11fd4 <__assert_fail@plt>
   14d30:	ldr	r2, [r2, #20]
   14d34:	cmn	r2, #-1073741823	; 0xc0000001
   14d38:	movhi	r5, #0
   14d3c:	bhi	14d5c <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   14d40:	ldr	r1, [r0, #16]
   14d44:	mov	r4, r0
   14d48:	bl	132c8 <flatcc_builder_default_alloc@@Base+0x4ac>
   14d4c:	subs	r5, r0, #0
   14d50:	beq	14d5c <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   14d54:	mov	r0, r4
   14d58:	bl	12d18 <access_monster_buffer@@Base+0x400>
   14d5c:	mov	r0, r5
   14d60:	pop	{r4, r5, r6, pc}
   14d64:	andeq	r6, r1, pc, lsl r8
   14d68:	andeq	r6, r1, r0, asr #19
   14d6c:	andeq	r6, r1, r3, asr fp

00014d70 <flatcc_builder_offset_vector_edit@@Base>:
   14d70:	ldr	r0, [r0, #16]
   14d74:	bx	lr

00014d78 <flatcc_builder_offset_vector_count@@Base>:
   14d78:	ldr	r3, [r0, #32]
   14d7c:	ldr	r0, [r3, #20]
   14d80:	bx	lr

00014d84 <flatcc_builder_create_union_vector_direct@@Base>:
   14d84:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14d88:	mov	r4, r0
   14d8c:	ldr	r5, [sp, #32]
   14d90:	cmn	r5, #-1073741823	; 0xc0000001
   14d94:	bls	14db0 <flatcc_builder_create_union_vector_direct@@Base+0x2c>
   14d98:	mov	r3, #0
   14d9c:	str	r3, [r4]
   14da0:	str	r3, [r4, #4]
   14da4:	mov	r0, r4
   14da8:	add	sp, sp, #8
   14dac:	pop	{r4, r5, r6, r7, r8, pc}
   14db0:	mov	r7, r1
   14db4:	mov	r8, r2
   14db8:	mov	r1, r3
   14dbc:	mov	r0, r7
   14dc0:	mov	r3, r2
   14dc4:	mov	r2, r5
   14dc8:	bl	132c8 <flatcc_builder_default_alloc@@Base+0x4ac>
   14dcc:	subs	r6, r0, #0
   14dd0:	beq	14d98 <flatcc_builder_create_union_vector_direct@@Base+0x14>
   14dd4:	mvn	r3, #0
   14dd8:	mov	r2, r5
   14ddc:	mov	r1, r8
   14de0:	mov	r0, r7
   14de4:	str	r3, [sp, #4]
   14de8:	mov	r3, #1
   14dec:	str	r3, [sp]
   14df0:	bl	14ad0 <flatcc_builder_create_vector@@Base>
   14df4:	stm	r4, {r0, r6}
   14df8:	b	14da4 <flatcc_builder_create_union_vector_direct@@Base+0x20>

00014dfc <flatcc_builder_create_union_vector@@Base>:
   14dfc:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   14e00:	mov	r6, r0
   14e04:	mov	r0, r1
   14e08:	mov	r5, r1
   14e0c:	mov	r8, r2
   14e10:	mov	r7, r3
   14e14:	bl	142b4 <flatcc_builder_start_offset_vector@@Base>
   14e18:	subs	r4, r0, #0
   14e1c:	beq	14e38 <flatcc_builder_create_union_vector@@Base+0x3c>
   14e20:	mov	r3, #0
   14e24:	str	r3, [r6]
   14e28:	str	r3, [r6, #4]
   14e2c:	mov	r0, r6
   14e30:	add	sp, sp, #16
   14e34:	pop	{r4, r5, r6, r7, r8, pc}
   14e38:	mov	r1, r7
   14e3c:	mov	r0, r5
   14e40:	bl	13ec4 <flatcc_builder_extend_offset_vector@@Base>
   14e44:	cmp	r0, #0
   14e48:	beq	14e20 <flatcc_builder_create_union_vector@@Base+0x24>
   14e4c:	mov	r1, r7
   14e50:	mov	r0, r5
   14e54:	bl	12cd0 <access_monster_buffer@@Base+0x3b8>
   14e58:	subs	r2, r0, #0
   14e5c:	movne	r1, r4
   14e60:	addne	r0, r8, #4
   14e64:	ldrne	r3, [r5, #16]
   14e68:	beq	14e20 <flatcc_builder_create_union_vector@@Base+0x24>
   14e6c:	cmp	r1, r7
   14e70:	bne	14ea0 <flatcc_builder_create_union_vector@@Base+0xa4>
   14e74:	add	r0, sp, #8
   14e78:	str	r1, [sp]
   14e7c:	mov	r1, r5
   14e80:	bl	14d84 <flatcc_builder_create_union_vector_direct@@Base>
   14e84:	ldr	r7, [sp, #8]
   14e88:	mov	r0, r5
   14e8c:	ldr	r4, [sp, #12]
   14e90:	bl	12d18 <access_monster_buffer@@Base+0x400>
   14e94:	str	r7, [r6]
   14e98:	str	r4, [r6, #4]
   14e9c:	b	14e2c <flatcc_builder_create_union_vector@@Base+0x30>
   14ea0:	ldrb	ip, [r8, r1, lsl #3]
   14ea4:	strb	ip, [r2, r1]
   14ea8:	ldr	ip, [r0, r1, lsl #3]
   14eac:	str	ip, [r3, r1, lsl #2]
   14eb0:	add	r1, r1, #1
   14eb4:	b	14e6c <flatcc_builder_create_union_vector@@Base+0x70>

00014eb8 <flatcc_builder_start_union_vector@@Base>:
   14eb8:	push	{r4, r5, r6, lr}
   14ebc:	mov	r1, #4
   14ec0:	mov	r5, r0
   14ec4:	bl	12f84 <flatcc_builder_default_alloc@@Base+0x168>
   14ec8:	subs	r4, r0, #0
   14ecc:	mvnne	r4, #0
   14ed0:	bne	14ef8 <flatcc_builder_start_union_vector@@Base+0x40>
   14ed4:	ldr	r3, [r5, #32]
   14ed8:	mov	r2, #8
   14edc:	mvn	r1, #3
   14ee0:	mov	r0, r5
   14ee4:	str	r2, [r3, #16]
   14ee8:	mov	r2, #7
   14eec:	strh	r2, [r3, #14]
   14ef0:	str	r4, [r3, #20]
   14ef4:	bl	12c54 <access_monster_buffer@@Base+0x33c>
   14ef8:	mov	r0, r4
   14efc:	pop	{r4, r5, r6, pc}

00014f00 <flatcc_builder_end_union_vector@@Base>:
   14f00:	ldr	r3, [r1, #32]
   14f04:	push	{r4, r5, r6, r7, lr}
   14f08:	sub	sp, sp, #20
   14f0c:	ldrh	r2, [r3, #14]
   14f10:	cmp	r2, #7
   14f14:	beq	14f2c <flatcc_builder_end_union_vector@@Base+0x2c>
   14f18:	ldr	r3, [pc, #156]	; 14fbc <flatcc_builder_end_union_vector@@Base+0xbc>
   14f1c:	movw	r2, #1617	; 0x651
   14f20:	ldr	r1, [pc, #152]	; 14fc0 <flatcc_builder_end_union_vector@@Base+0xc0>
   14f24:	ldr	r0, [pc, #152]	; 14fc4 <flatcc_builder_end_union_vector@@Base+0xc4>
   14f28:	bl	11fd4 <__assert_fail@plt>
   14f2c:	ldr	r7, [r3, #20]
   14f30:	mov	r4, r0
   14f34:	mov	r5, r1
   14f38:	mov	r0, r1
   14f3c:	lsl	r6, r7, #2
   14f40:	add	r1, r6, r7
   14f44:	bl	12cd0 <access_monster_buffer@@Base+0x3b8>
   14f48:	subs	r3, r0, #0
   14f4c:	streq	r3, [r4]
   14f50:	streq	r3, [r4, #4]
   14f54:	beq	14f98 <flatcc_builder_end_union_vector@@Base+0x98>
   14f58:	ldr	r0, [r5, #16]
   14f5c:	add	r2, r3, r6
   14f60:	mov	r1, #0
   14f64:	add	ip, r0, #4
   14f68:	cmp	r1, r7
   14f6c:	bne	14fa4 <flatcc_builder_end_union_vector@@Base+0xa4>
   14f70:	add	r0, sp, #8
   14f74:	str	r1, [sp]
   14f78:	mov	r1, r5
   14f7c:	bl	14d84 <flatcc_builder_create_union_vector_direct@@Base>
   14f80:	ldr	r7, [sp, #8]
   14f84:	mov	r0, r5
   14f88:	ldr	r6, [sp, #12]
   14f8c:	bl	12d18 <access_monster_buffer@@Base+0x400>
   14f90:	str	r7, [r4]
   14f94:	str	r6, [r4, #4]
   14f98:	mov	r0, r4
   14f9c:	add	sp, sp, #20
   14fa0:	pop	{r4, r5, r6, r7, pc}
   14fa4:	ldrb	lr, [r0, r1, lsl #3]
   14fa8:	strb	lr, [r2, r1]
   14fac:	ldr	lr, [ip, r1, lsl #3]
   14fb0:	str	lr, [r3, r1, lsl #2]
   14fb4:	add	r1, r1, #1
   14fb8:	b	14f68 <flatcc_builder_end_union_vector@@Base+0x68>
   14fbc:	andeq	r6, r1, fp, asr #16
   14fc0:	andeq	r6, r1, r0, asr #19
   14fc4:	muleq	r1, sp, ip

00014fc8 <flatcc_builder_union_vector_edit@@Base>:
   14fc8:	ldr	r0, [r0, #16]
   14fcc:	bx	lr

00014fd0 <flatcc_builder_union_vector_count@@Base>:
   14fd0:	ldr	r3, [r0, #32]
   14fd4:	ldr	r0, [r3, #20]
   14fd8:	bx	lr

00014fdc <flatcc_builder_extend_union_vector@@Base>:
   14fdc:	push	{r4, r5, r6, lr}
   14fe0:	mvn	r2, #-536870912	; 0xe0000000
   14fe4:	mov	r4, r0
   14fe8:	mov	r5, r1
   14fec:	ldr	r0, [r0, #32]
   14ff0:	bl	13274 <flatcc_builder_default_alloc@@Base+0x458>
   14ff4:	cmp	r0, #0
   14ff8:	bne	1500c <flatcc_builder_extend_union_vector@@Base+0x30>
   14ffc:	lsl	r1, r5, #3
   15000:	mov	r0, r4
   15004:	pop	{r4, r5, r6, lr}
   15008:	b	12cd0 <access_monster_buffer@@Base+0x3b8>
   1500c:	mov	r0, #0
   15010:	pop	{r4, r5, r6, pc}

00015014 <flatcc_builder_truncate_union_vector@@Base>:
   15014:	ldr	r3, [r0, #32]
   15018:	push	{r4, lr}
   1501c:	ldrh	r2, [r3, #14]
   15020:	cmp	r2, #7
   15024:	beq	1503c <flatcc_builder_truncate_union_vector@@Base+0x28>
   15028:	ldr	r3, [pc, #72]	; 15078 <flatcc_builder_truncate_union_vector@@Base+0x64>
   1502c:	movw	r2, #1665	; 0x681
   15030:	ldr	r1, [pc, #68]	; 1507c <flatcc_builder_truncate_union_vector@@Base+0x68>
   15034:	ldr	r0, [pc, #68]	; 15080 <flatcc_builder_truncate_union_vector@@Base+0x6c>
   15038:	bl	11fd4 <__assert_fail@plt>
   1503c:	ldr	r2, [r3, #20]
   15040:	cmp	r2, r1
   15044:	bcs	1505c <flatcc_builder_truncate_union_vector@@Base+0x48>
   15048:	ldr	r3, [pc, #40]	; 15078 <flatcc_builder_truncate_union_vector@@Base+0x64>
   1504c:	movw	r2, #1666	; 0x682
   15050:	ldr	r1, [pc, #36]	; 1507c <flatcc_builder_truncate_union_vector@@Base+0x68>
   15054:	ldr	r0, [pc, #40]	; 15084 <flatcc_builder_truncate_union_vector@@Base+0x70>
   15058:	b	15038 <flatcc_builder_truncate_union_vector@@Base+0x24>
   1505c:	sub	r2, r2, r1
   15060:	str	r2, [r3, #20]
   15064:	ldr	r3, [r3, #16]
   15068:	mul	r1, r3, r1
   1506c:	bl	12d80 <access_monster_buffer@@Base+0x468>
   15070:	mov	r0, #0
   15074:	pop	{r4, pc}
   15078:	andeq	r6, r1, fp, ror #16
   1507c:	andeq	r6, r1, r0, asr #19
   15080:	muleq	r1, sp, ip
   15084:	ldrdeq	r6, [r1], -r6	; <UNPREDICTABLE>

00015088 <flatcc_builder_union_vector_push@@Base>:
   15088:	push	{r0, r1, r4, lr}
   1508c:	mov	r4, sp
   15090:	stm	r4, {r1, r2}
   15094:	ldr	r2, [r0, #32]
   15098:	ldrh	r3, [r2, #14]
   1509c:	cmp	r3, #7
   150a0:	beq	150b8 <flatcc_builder_union_vector_push@@Base+0x30>
   150a4:	ldr	r3, [pc, #68]	; 150f0 <flatcc_builder_union_vector_push@@Base+0x68>
   150a8:	movw	r2, #1677	; 0x68d
   150ac:	ldr	r1, [pc, #64]	; 150f4 <flatcc_builder_union_vector_push@@Base+0x6c>
   150b0:	ldr	r0, [pc, #64]	; 150f8 <flatcc_builder_union_vector_push@@Base+0x70>
   150b4:	bl	11fd4 <__assert_fail@plt>
   150b8:	ldr	r3, [r2, #20]
   150bc:	cmn	r3, #-536870911	; 0xe0000001
   150c0:	moveq	r3, #0
   150c4:	beq	150e4 <flatcc_builder_union_vector_push@@Base+0x5c>
   150c8:	add	r3, r3, #1
   150cc:	mov	r1, #8
   150d0:	str	r3, [r2, #20]
   150d4:	bl	12cd0 <access_monster_buffer@@Base+0x3b8>
   150d8:	subs	r3, r0, #0
   150dc:	ldmne	r4, {r0, r1}
   150e0:	stmne	r3, {r0, r1}
   150e4:	mov	r0, r3
   150e8:	add	sp, sp, #8
   150ec:	pop	{r4, pc}
   150f0:	muleq	r1, r0, r8
   150f4:	andeq	r6, r1, r0, asr #19
   150f8:	muleq	r1, sp, ip

000150fc <flatcc_builder_append_union_vector@@Base>:
   150fc:	push	{r4, r5, r6, lr}
   15100:	mov	r4, r0
   15104:	ldr	r0, [r0, #32]
   15108:	ldrh	r3, [r0, #14]
   1510c:	cmp	r3, #7
   15110:	beq	15128 <flatcc_builder_append_union_vector@@Base+0x2c>
   15114:	ldr	r3, [pc, #68]	; 15160 <flatcc_builder_append_union_vector@@Base+0x64>
   15118:	movw	r2, #1692	; 0x69c
   1511c:	ldr	r1, [pc, #64]	; 15164 <flatcc_builder_append_union_vector@@Base+0x68>
   15120:	ldr	r0, [pc, #64]	; 15168 <flatcc_builder_append_union_vector@@Base+0x6c>
   15124:	bl	11fd4 <__assert_fail@plt>
   15128:	mov	r5, r2
   1512c:	mov	r6, r1
   15130:	mvn	r2, #-536870912	; 0xe0000000
   15134:	mov	r1, r5
   15138:	bl	13274 <flatcc_builder_default_alloc@@Base+0x458>
   1513c:	cmp	r0, #0
   15140:	bne	15158 <flatcc_builder_append_union_vector@@Base+0x5c>
   15144:	lsl	r2, r5, #3
   15148:	mov	r1, r6
   1514c:	mov	r0, r4
   15150:	pop	{r4, r5, r6, lr}
   15154:	b	12da0 <access_monster_buffer@@Base+0x488>
   15158:	mov	r0, #0
   1515c:	pop	{r4, r5, r6, pc}
   15160:			; <UNDEFINED> instruction: 0x000168b1
   15164:	andeq	r6, r1, r0, asr #19
   15168:	muleq	r1, sp, ip

0001516c <flatcc_builder_create_string@@Base>:
   1516c:	ldr	r3, [r0, #136]	; 0x88
   15170:	mov	ip, #4
   15174:	cmp	r2, #0
   15178:	push	{lr}		; (str lr, [sp, #-4]!)
   1517c:	sub	sp, sp, #84	; 0x54
   15180:	add	lr, sp, ip
   15184:	stmib	sp, {r2, ip}
   15188:	sub	r3, r3, r2
   1518c:	str	lr, [sp, #16]
   15190:	sub	r3, r3, #1
   15194:	str	ip, [sp, #20]
   15198:	mov	ip, #1
   1519c:	and	r3, r3, #3
   151a0:	add	r3, r3, #1
   151a4:	str	ip, [sp, #12]
   151a8:	beq	151c4 <flatcc_builder_create_string@@Base+0x58>
   151ac:	add	ip, r2, #4
   151b0:	str	r2, [sp, #28]
   151b4:	mov	r2, #2
   151b8:	str	ip, [sp, #8]
   151bc:	str	r2, [sp, #12]
   151c0:	str	r1, [sp, #24]
   151c4:	ldr	r2, [sp, #8]
   151c8:	add	r1, sp, #80	; 0x50
   151cc:	ldr	ip, [pc, #44]	; 15200 <flatcc_builder_create_string@@Base+0x94>
   151d0:	add	r2, r2, r3
   151d4:	str	r2, [sp, #8]
   151d8:	ldr	r2, [sp, #12]
   151dc:	add	r2, r2, #1
   151e0:	add	r1, r1, r2, lsl #3
   151e4:	str	r2, [sp, #12]
   151e8:	str	ip, [r1, #-72]	; 0xffffffb8
   151ec:	str	r3, [r1, #-68]	; 0xffffffbc
   151f0:	add	r1, sp, #8
   151f4:	bl	131fc <flatcc_builder_default_alloc@@Base+0x3e0>
   151f8:	add	sp, sp, #84	; 0x54
   151fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15200:	ldrdeq	r6, [r1], -sl

00015204 <flatcc_builder_create_string_str@@Base>:
   15204:	push	{r4, r5, r6, lr}
   15208:	mov	r5, r0
   1520c:	mov	r0, r1
   15210:	mov	r4, r1
   15214:	bl	11f98 <strlen@plt>
   15218:	mov	r2, r0
   1521c:	mov	r1, r4
   15220:	mov	r0, r5
   15224:	pop	{r4, r5, r6, lr}
   15228:	b	1516c <flatcc_builder_create_string@@Base>

0001522c <flatcc_builder_create_string_strn@@Base>:
   1522c:	push	{r4, r5, r6, lr}
   15230:	mov	r4, r1
   15234:	mov	r6, r0
   15238:	mov	r1, #0
   1523c:	mov	r0, r4
   15240:	mov	r5, r2
   15244:	bl	11fbc <memchr@plt>
   15248:	cmp	r0, #0
   1524c:	mov	r1, r4
   15250:	subne	r5, r0, r4
   15254:	mov	r0, r6
   15258:	mov	r2, r5
   1525c:	pop	{r4, r5, r6, lr}
   15260:	b	1516c <flatcc_builder_create_string@@Base>

00015264 <flatcc_builder_end_string@@Base>:
   15264:	ldr	r3, [r0, #32]
   15268:	push	{r4, r5, r6, lr}
   1526c:	ldrh	r2, [r3, #14]
   15270:	cmp	r2, #6
   15274:	beq	1528c <flatcc_builder_end_string@@Base+0x28>
   15278:	ldr	r3, [pc, #84]	; 152d4 <flatcc_builder_end_string@@Base+0x70>
   1527c:	movw	r2, #1732	; 0x6c4
   15280:	ldr	r1, [pc, #80]	; 152d8 <flatcc_builder_end_string@@Base+0x74>
   15284:	ldr	r0, [pc, #80]	; 152dc <flatcc_builder_end_string@@Base+0x78>
   15288:	bl	11fd4 <__assert_fail@plt>
   1528c:	ldr	r2, [r3, #20]
   15290:	mov	r4, r0
   15294:	ldr	r1, [r0, #20]
   15298:	cmp	r2, r1
   1529c:	beq	152b4 <flatcc_builder_end_string@@Base+0x50>
   152a0:	ldr	r3, [pc, #44]	; 152d4 <flatcc_builder_end_string@@Base+0x70>
   152a4:	movw	r2, #1733	; 0x6c5
   152a8:	ldr	r1, [pc, #40]	; 152d8 <flatcc_builder_end_string@@Base+0x74>
   152ac:	ldr	r0, [pc, #44]	; 152e0 <flatcc_builder_end_string@@Base+0x7c>
   152b0:	b	15288 <flatcc_builder_end_string@@Base+0x24>
   152b4:	ldr	r1, [r0, #16]
   152b8:	bl	1516c <flatcc_builder_create_string@@Base>
   152bc:	subs	r5, r0, #0
   152c0:	beq	152cc <flatcc_builder_end_string@@Base+0x68>
   152c4:	mov	r0, r4
   152c8:	bl	12d18 <access_monster_buffer@@Base+0x400>
   152cc:	mov	r0, r5
   152d0:	pop	{r4, r5, r6, pc}
   152d4:	ldrdeq	r6, [r1], -r4
   152d8:	andeq	r6, r1, r0, asr #19
   152dc:	andeq	r6, r1, r6, lsl #23
   152e0:	andeq	r6, r1, pc, asr #25

000152e4 <flatcc_builder_string_edit@@Base>:
   152e4:	ldr	r0, [r0, #16]
   152e8:	bx	lr

000152ec <flatcc_builder_string_len@@Base>:
   152ec:	ldr	r3, [r0, #32]
   152f0:	ldr	r0, [r3, #20]
   152f4:	bx	lr

000152f8 <flatcc_builder_table_add@@Base>:
   152f8:	push	{r4, r5, r6, r7, r8, lr}
   152fc:	mov	r4, r0
   15300:	ldr	r0, [r0, #32]
   15304:	ldrh	r0, [r0, #14]
   15308:	cmp	r0, #3
   1530c:	beq	15324 <flatcc_builder_table_add@@Base+0x2c>
   15310:	ldr	r3, [pc, #240]	; 15408 <flatcc_builder_table_add@@Base+0x110>
   15314:	movw	r2, #1773	; 0x6ed
   15318:	ldr	r1, [pc, #236]	; 1540c <flatcc_builder_table_add@@Base+0x114>
   1531c:	ldr	r0, [pc, #236]	; 15410 <flatcc_builder_table_add@@Base+0x118>
   15320:	bl	11fd4 <__assert_fail@plt>
   15324:	movw	r0, #32764	; 0x7ffc
   15328:	cmp	r1, r0
   1532c:	bls	15344 <flatcc_builder_table_add@@Base+0x4c>
   15330:	ldr	r3, [pc, #208]	; 15408 <flatcc_builder_table_add@@Base+0x110>
   15334:	movw	r2, #1774	; 0x6ee
   15338:	ldr	r1, [pc, #204]	; 1540c <flatcc_builder_table_add@@Base+0x114>
   1533c:	ldr	r0, [pc, #208]	; 15414 <flatcc_builder_table_add@@Base+0x11c>
   15340:	b	15320 <flatcc_builder_table_add@@Base+0x28>
   15344:	ldrh	r0, [r4, #130]	; 0x82
   15348:	lsl	r7, r1, #1
   1534c:	cmp	r0, r3
   15350:	ldr	r0, [r4, #4]
   15354:	strhcc	r3, [r4, #130]	; 0x82
   15358:	ldrh	r5, [r0, r7]
   1535c:	cmp	r5, #0
   15360:	beq	15378 <flatcc_builder_table_add@@Base+0x80>
   15364:	ldr	r3, [pc, #156]	; 15408 <flatcc_builder_table_add@@Base+0x110>
   15368:	movw	r2, #1784	; 0x6f8
   1536c:	ldr	r1, [pc, #152]	; 1540c <flatcc_builder_table_add@@Base+0x114>
   15370:	ldr	r0, [pc, #160]	; 15418 <flatcc_builder_table_add@@Base+0x120>
   15374:	b	15320 <flatcc_builder_table_add@@Base+0x28>
   15378:	ldr	ip, [r4, #12]
   1537c:	sub	r0, r3, #1
   15380:	rsb	r3, r3, #0
   15384:	uxth	r8, r1
   15388:	ldr	lr, [pc, #140]	; 1541c <flatcc_builder_table_add@@Base+0x124>
   1538c:	ldr	r6, [r4, #20]
   15390:	eor	ip, ip, r1
   15394:	mul	ip, lr, ip
   15398:	add	r0, r0, r6
   1539c:	and	r6, r0, r3
   153a0:	ldr	r3, [r4, #24]
   153a4:	eor	ip, ip, r2
   153a8:	add	r1, r2, r6
   153ac:	mul	ip, lr, ip
   153b0:	cmp	r1, r3
   153b4:	str	ip, [r4, #12]
   153b8:	str	r1, [r4, #20]
   153bc:	bcs	153e8 <flatcc_builder_table_add@@Base+0xf0>
   153c0:	ldr	r3, [r4, #4]
   153c4:	add	r2, r6, #4
   153c8:	ldr	r0, [r4, #16]
   153cc:	strh	r2, [r3, r7]
   153d0:	ldrh	r3, [r4, #8]
   153d4:	add	r0, r0, r6
   153d8:	cmp	r3, r8
   153dc:	addls	r1, r8, #1
   153e0:	strhls	r1, [r4, #8]
   153e4:	pop	{r4, r5, r6, r7, r8, pc}
   153e8:	movw	r2, #65532	; 0xfffc
   153ec:	add	r1, r1, #1
   153f0:	mov	r0, r4
   153f4:	bl	12c80 <access_monster_buffer@@Base+0x368>
   153f8:	cmp	r0, #0
   153fc:	beq	153c0 <flatcc_builder_table_add@@Base+0xc8>
   15400:	mov	r0, r5
   15404:	pop	{r4, r5, r6, r7, r8, pc}
   15408:	andeq	r6, r1, lr, ror #17
   1540c:	andeq	r6, r1, r0, asr #19
   15410:	andeq	r6, r1, pc, asr ip
   15414:	strdeq	r6, [r1], -r3
   15418:	andeq	r6, r1, sp, lsr #20
   1541c:			; <UNDEFINED> instruction: 0x9e3779b1

00015420 <flatcc_builder_table_edit@@Base>:
   15420:	ldr	r3, [r0, #32]
   15424:	ldrh	r3, [r3, #14]
   15428:	cmp	r3, #3
   1542c:	beq	15448 <flatcc_builder_table_edit@@Base+0x28>
   15430:	push	{r4, lr}
   15434:	movw	r2, #1794	; 0x702
   15438:	ldr	r3, [pc, #28]	; 1545c <flatcc_builder_table_edit@@Base+0x3c>
   1543c:	ldr	r1, [pc, #28]	; 15460 <flatcc_builder_table_edit@@Base+0x40>
   15440:	ldr	r0, [pc, #28]	; 15464 <flatcc_builder_table_edit@@Base+0x44>
   15444:	bl	11fd4 <__assert_fail@plt>
   15448:	ldr	r3, [r0, #20]
   1544c:	ldr	r0, [r0, #16]
   15450:	sub	r3, r3, r1
   15454:	add	r0, r0, r3
   15458:	bx	lr
   1545c:	andeq	r6, r1, r7, lsl #18
   15460:	andeq	r6, r1, r0, asr #19
   15464:	andeq	r6, r1, pc, asr ip

00015468 <flatcc_builder_table_add_copy@@Base>:
   15468:	push	{r4, r5, r6, lr}
   1546c:	mov	r4, r3
   15470:	mov	r6, r2
   15474:	mov	r2, r4
   15478:	ldrh	r3, [sp, #16]
   1547c:	bl	152f8 <flatcc_builder_table_add@@Base>
   15480:	subs	r5, r0, #0
   15484:	beq	15494 <flatcc_builder_table_add_copy@@Base+0x2c>
   15488:	mov	r2, r4
   1548c:	mov	r1, r6
   15490:	bl	11f44 <memcpy@plt>
   15494:	mov	r0, r5
   15498:	pop	{r4, r5, r6, pc}

0001549c <flatcc_builder_table_add_offset@@Base>:
   1549c:	ldr	r3, [r0, #32]
   154a0:	push	{r4, r5, r6, r7, r8, lr}
   154a4:	ldrh	r3, [r3, #14]
   154a8:	cmp	r3, #3
   154ac:	beq	154c4 <flatcc_builder_table_add_offset@@Base+0x28>
   154b0:	ldr	r3, [pc, #236]	; 155a4 <flatcc_builder_table_add_offset@@Base+0x108>
   154b4:	movw	r2, #1811	; 0x713
   154b8:	ldr	r1, [pc, #232]	; 155a8 <flatcc_builder_table_add_offset@@Base+0x10c>
   154bc:	ldr	r0, [pc, #232]	; 155ac <flatcc_builder_table_add_offset@@Base+0x110>
   154c0:	bl	11fd4 <__assert_fail@plt>
   154c4:	movw	r3, #32764	; 0x7ffc
   154c8:	cmp	r1, r3
   154cc:	bls	154e4 <flatcc_builder_table_add_offset@@Base+0x48>
   154d0:	ldr	r3, [pc, #204]	; 155a4 <flatcc_builder_table_add_offset@@Base+0x108>
   154d4:	movw	r2, #1812	; 0x714
   154d8:	ldr	r1, [pc, #200]	; 155a8 <flatcc_builder_table_add_offset@@Base+0x10c>
   154dc:	ldr	r0, [pc, #204]	; 155b0 <flatcc_builder_table_add_offset@@Base+0x114>
   154e0:	b	154c0 <flatcc_builder_table_add_offset@@Base+0x24>
   154e4:	ldr	r3, [r0, #4]
   154e8:	lsl	r7, r1, #1
   154ec:	mov	r4, r0
   154f0:	ldrh	r6, [r3, r7]
   154f4:	cmp	r6, #0
   154f8:	beq	15510 <flatcc_builder_table_add_offset@@Base+0x74>
   154fc:	ldr	r3, [pc, #160]	; 155a4 <flatcc_builder_table_add_offset@@Base+0x108>
   15500:	movw	r2, #1819	; 0x71b
   15504:	ldr	r1, [pc, #156]	; 155a8 <flatcc_builder_table_add_offset@@Base+0x10c>
   15508:	ldr	r0, [pc, #164]	; 155b4 <flatcc_builder_table_add_offset@@Base+0x118>
   1550c:	b	154c0 <flatcc_builder_table_add_offset@@Base+0x24>
   15510:	ldr	r3, [r0, #12]
   15514:	uxth	r5, r1
   15518:	ldr	r2, [pc, #152]	; 155b8 <flatcc_builder_table_add_offset@@Base+0x11c>
   1551c:	ldr	r8, [r0, #20]
   15520:	eor	r3, r3, r1
   15524:	mul	r3, r2, r3
   15528:	add	r8, r8, #3
   1552c:	eor	r3, r3, #4
   15530:	bic	r8, r8, #3
   15534:	add	r1, r8, #4
   15538:	mul	r3, r2, r3
   1553c:	str	r3, [r0, #12]
   15540:	ldr	r3, [r0, #24]
   15544:	str	r1, [r0, #20]
   15548:	cmp	r1, r3
   1554c:	bhi	1558c <flatcc_builder_table_add_offset@@Base+0xf0>
   15550:	ldr	r3, [r4, #4]
   15554:	uxth	r2, r8
   15558:	add	r1, r2, #4
   1555c:	ldr	r0, [r4, #16]
   15560:	strh	r1, [r3, r7]
   15564:	ldrh	r3, [r4, #8]
   15568:	add	r0, r0, r8
   1556c:	cmp	r3, r5
   15570:	ldr	r3, [r4]
   15574:	addls	r1, r5, #1
   15578:	strhls	r1, [r4, #8]
   1557c:	add	r1, r3, #2
   15580:	str	r1, [r4]
   15584:	strh	r2, [r3]
   15588:	pop	{r4, r5, r6, r7, r8, pc}
   1558c:	movw	r2, #65532	; 0xfffc
   15590:	bl	12c80 <access_monster_buffer@@Base+0x368>
   15594:	cmp	r0, #0
   15598:	beq	15550 <flatcc_builder_table_add_offset@@Base+0xb4>
   1559c:	mov	r0, r6
   155a0:	pop	{r4, r5, r6, r7, r8, pc}
   155a4:	andeq	r6, r1, r1, lsr #18
   155a8:	andeq	r6, r1, r0, asr #19
   155ac:	andeq	r6, r1, pc, asr ip
   155b0:	strdeq	r6, [r1], -r3
   155b4:	andeq	r6, r1, sp, lsr #20
   155b8:			; <UNDEFINED> instruction: 0x9e3779b1

000155bc <flatcc_builder_table_add_union@@Base>:
   155bc:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   155c0:	add	ip, sp, #8
   155c4:	stmdb	ip, {r2, r3}
   155c8:	ldr	r3, [r0, #32]
   155cc:	ldrb	r5, [sp]
   155d0:	ldr	r4, [sp, #4]
   155d4:	ldrh	r3, [r3, #14]
   155d8:	cmp	r3, #3
   155dc:	beq	155f4 <flatcc_builder_table_add_union@@Base+0x38>
   155e0:	ldr	r3, [pc, #164]	; 1568c <flatcc_builder_table_add_union@@Base+0xd0>
   155e4:	movw	r2, #1518	; 0x5ee
   155e8:	ldr	r1, [pc, #160]	; 15690 <flatcc_builder_table_add_union@@Base+0xd4>
   155ec:	ldr	r0, [pc, #160]	; 15694 <flatcc_builder_table_add_union@@Base+0xd8>
   155f0:	bl	11fd4 <__assert_fail@plt>
   155f4:	cmp	r5, #0
   155f8:	mov	r6, r0
   155fc:	mov	r7, r1
   15600:	bne	15620 <flatcc_builder_table_add_union@@Base+0x64>
   15604:	cmp	r4, #0
   15608:	beq	1564c <flatcc_builder_table_add_union@@Base+0x90>
   1560c:	ldr	r3, [pc, #120]	; 1568c <flatcc_builder_table_add_union@@Base+0xd0>
   15610:	movw	r2, #1519	; 0x5ef
   15614:	ldr	r1, [pc, #116]	; 15690 <flatcc_builder_table_add_union@@Base+0xd4>
   15618:	ldr	r0, [pc, #120]	; 15698 <flatcc_builder_table_add_union@@Base+0xdc>
   1561c:	b	155f0 <flatcc_builder_table_add_union@@Base+0x34>
   15620:	cmp	r4, #0
   15624:	beq	1564c <flatcc_builder_table_add_union@@Base+0x90>
   15628:	bl	1549c <flatcc_builder_table_add_offset@@Base>
   1562c:	cmp	r0, #0
   15630:	strne	r4, [r0]
   15634:	bne	1564c <flatcc_builder_table_add_union@@Base+0x90>
   15638:	ldr	r3, [pc, #76]	; 1568c <flatcc_builder_table_add_union@@Base+0xd0>
   1563c:	movw	r2, #1522	; 0x5f2
   15640:	ldr	r1, [pc, #72]	; 15690 <flatcc_builder_table_add_union@@Base+0xd4>
   15644:	ldr	r0, [pc, #80]	; 1569c <flatcc_builder_table_add_union@@Base+0xe0>
   15648:	b	155f0 <flatcc_builder_table_add_union@@Base+0x34>
   1564c:	mov	r3, #1
   15650:	sub	r1, r7, #1
   15654:	mov	r2, r3
   15658:	mov	r0, r6
   1565c:	bl	152f8 <flatcc_builder_table_add@@Base>
   15660:	cmp	r0, #0
   15664:	bne	1567c <flatcc_builder_table_add_union@@Base+0xc0>
   15668:	ldr	r3, [pc, #28]	; 1568c <flatcc_builder_table_add_union@@Base+0xd0>
   1566c:	movw	r2, #1526	; 0x5f6
   15670:	ldr	r1, [pc, #24]	; 15690 <flatcc_builder_table_add_union@@Base+0xd4>
   15674:	ldr	r0, [pc, #36]	; 156a0 <flatcc_builder_table_add_union@@Base+0xe4>
   15678:	b	155f0 <flatcc_builder_table_add_union@@Base+0x34>
   1567c:	strb	r5, [r0]
   15680:	mov	r0, #0
   15684:	add	sp, sp, #12
   15688:	pop	{r4, r5, r6, r7, pc}
   1568c:	andeq	r6, r1, r1, asr #18
   15690:	andeq	r6, r1, r0, asr #19
   15694:	andeq	r6, r1, pc, asr ip
   15698:	andeq	r6, r1, r7, lsr sp
   1569c:	andeq	r6, r1, r9, asr sp
   156a0:	andeq	r6, r1, r3, ror #26

000156a4 <flatcc_builder_table_add_union_vector@@Base>:
   156a4:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   156a8:	mov	r7, r1
   156ac:	add	r1, sp, #8
   156b0:	stmdb	r1, {r2, r3}
   156b4:	ldr	r3, [r0, #32]
   156b8:	ldrd	r4, [sp]
   156bc:	ldrh	r3, [r3, #14]
   156c0:	cmp	r3, #3
   156c4:	beq	156dc <flatcc_builder_table_add_union_vector@@Base+0x38>
   156c8:	ldr	r3, [pc, #176]	; 15780 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   156cc:	mov	r2, #1536	; 0x600
   156d0:	ldr	r1, [pc, #172]	; 15784 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   156d4:	ldr	r0, [pc, #172]	; 15788 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   156d8:	bl	11fd4 <__assert_fail@plt>
   156dc:	clz	r3, r5
   156e0:	clz	r2, r4
   156e4:	lsr	r3, r3, #5
   156e8:	lsr	r2, r2, #5
   156ec:	cmp	r2, r3
   156f0:	beq	1571c <flatcc_builder_table_add_union_vector@@Base+0x78>
   156f4:	adds	r4, r4, #0
   156f8:	movne	r4, #1
   156fc:	cmp	r4, r3
   15700:	mvnne	r4, #0
   15704:	bne	15774 <flatcc_builder_table_add_union_vector@@Base+0xd0>
   15708:	ldr	r3, [pc, #112]	; 15780 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   1570c:	movw	r2, #1537	; 0x601
   15710:	ldr	r1, [pc, #108]	; 15784 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   15714:	ldr	r0, [pc, #112]	; 1578c <flatcc_builder_table_add_union_vector@@Base+0xe8>
   15718:	b	156d8 <flatcc_builder_table_add_union_vector@@Base+0x34>
   1571c:	cmp	r4, #0
   15720:	beq	15774 <flatcc_builder_table_add_union_vector@@Base+0xd0>
   15724:	sub	r1, r7, #1
   15728:	mov	r6, r0
   1572c:	bl	1549c <flatcc_builder_table_add_offset@@Base>
   15730:	cmp	r0, #0
   15734:	ldreq	r3, [pc, #68]	; 15780 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15738:	movweq	r2, #1540	; 0x604
   1573c:	beq	15768 <flatcc_builder_table_add_union_vector@@Base+0xc4>
   15740:	mov	r1, r7
   15744:	str	r4, [r0]
   15748:	mov	r0, r6
   1574c:	bl	1549c <flatcc_builder_table_add_offset@@Base>
   15750:	cmp	r0, #0
   15754:	movne	r4, #0
   15758:	strne	r5, [r0]
   1575c:	bne	15774 <flatcc_builder_table_add_union_vector@@Base+0xd0>
   15760:	ldr	r3, [pc, #24]	; 15780 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15764:	movw	r2, #1544	; 0x608
   15768:	ldr	r1, [pc, #20]	; 15784 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   1576c:	ldr	r0, [pc, #28]	; 15790 <flatcc_builder_table_add_union_vector@@Base+0xec>
   15770:	b	156d8 <flatcc_builder_table_add_union_vector@@Base+0x34>
   15774:	mov	r0, r4
   15778:	add	sp, sp, #12
   1577c:	pop	{r4, r5, r6, r7, pc}
   15780:	andeq	r6, r1, r0, ror #18
   15784:	andeq	r6, r1, r0, asr #19
   15788:	andeq	r6, r1, pc, asr ip
   1578c:	andeq	r6, r1, pc, ror #26
   15790:	andeq	r6, r1, r9, asr sp

00015794 <flatcc_builder_push_buffer_alignment@@Base>:
   15794:	mov	r3, r0
   15798:	mov	r2, #4
   1579c:	ldrh	r0, [r0, #128]	; 0x80
   157a0:	strh	r2, [r3, #128]	; 0x80
   157a4:	bx	lr

000157a8 <flatcc_builder_pop_buffer_alignment@@Base>:
   157a8:	ldrh	r3, [r0, #128]	; 0x80
   157ac:	cmp	r3, r1
   157b0:	strhcc	r1, [r0, #128]	; 0x80
   157b4:	bx	lr

000157b8 <flatcc_builder_get_buffer_alignment@@Base>:
   157b8:	ldrh	r0, [r0, #128]	; 0x80
   157bc:	bx	lr

000157c0 <flatcc_builder_set_vtable_clustering@@Base>:
   157c0:	clz	r1, r1
   157c4:	lsr	r1, r1, #5
   157c8:	str	r1, [r0, #180]	; 0xb4
   157cc:	bx	lr

000157d0 <flatcc_builder_set_block_align@@Base>:
   157d0:	strh	r1, [r0, #132]	; 0x84
   157d4:	bx	lr

000157d8 <flatcc_builder_get_level@@Base>:
   157d8:	ldr	r0, [r0, #156]	; 0x9c
   157dc:	bx	lr

000157e0 <flatcc_builder_set_max_level@@Base>:
   157e0:	ldr	r3, [r0, #160]	; 0xa0
   157e4:	str	r1, [r0, #176]	; 0xb0
   157e8:	cmp	r3, r1
   157ec:	strlt	r1, [r0, #160]	; 0xa0
   157f0:	bx	lr

000157f4 <flatcc_builder_get_buffer_size@@Base>:
   157f4:	ldr	r2, [r0, #140]	; 0x8c
   157f8:	ldr	r0, [r0, #136]	; 0x88
   157fc:	sub	r0, r2, r0
   15800:	bx	lr

00015804 <flatcc_builder_get_buffer_start@@Base>:
   15804:	ldr	r0, [r0, #136]	; 0x88
   15808:	bx	lr

0001580c <flatcc_builder_get_buffer_end@@Base>:
   1580c:	ldr	r0, [r0, #140]	; 0x8c
   15810:	bx	lr

00015814 <flatcc_builder_set_vtable_cache_limit@@Base>:
   15814:	str	r1, [r0, #172]	; 0xac
   15818:	bx	lr

0001581c <flatcc_builder_set_identifier@@Base>:
   1581c:	ldr	r3, [pc, #16]	; 15834 <flatcc_builder_set_identifier@@Base+0x18>
   15820:	cmp	r1, #0
   15824:	moveq	r1, r3
   15828:	ldr	r3, [r1]
   1582c:	str	r3, [r0, #168]	; 0xa8
   15830:	bx	lr
   15834:	ldrdeq	r6, [r1], -sl

00015838 <flatcc_builder_get_type@@Base>:
   15838:	ldr	r0, [r0, #32]
   1583c:	cmp	r0, #0
   15840:	ldrhne	r0, [r0, #14]
   15844:	bx	lr

00015848 <flatcc_builder_get_type_at@@Base>:
   15848:	cmp	r1, #0
   1584c:	ble	15874 <flatcc_builder_get_type_at@@Base+0x2c>
   15850:	ldr	r3, [r0, #156]	; 0x9c
   15854:	cmp	r3, r1
   15858:	blt	15874 <flatcc_builder_get_type_at@@Base+0x2c>
   1585c:	sub	r1, r1, r3
   15860:	ldr	r3, [r0, #32]
   15864:	mov	r2, #36	; 0x24
   15868:	mla	r1, r2, r1, r3
   1586c:	ldrh	r0, [r1, #14]
   15870:	bx	lr
   15874:	mov	r0, #0
   15878:	bx	lr

0001587c <flatcc_builder_get_direct_buffer@@Base>:
   1587c:	ldr	r3, [r0, #184]	; 0xb8
   15880:	cmp	r3, #0
   15884:	beq	158ac <flatcc_builder_get_direct_buffer@@Base+0x30>
   15888:	ldrd	r2, [r0, #188]	; 0xbc
   1588c:	cmp	r2, r3
   15890:	bne	158ac <flatcc_builder_get_direct_buffer@@Base+0x30>
   15894:	cmp	r1, #0
   15898:	ldrne	r3, [r0, #212]	; 0xd4
   1589c:	strne	r3, [r1]
   158a0:	ldr	r1, [r0, #196]	; 0xc4
   158a4:	mov	r0, r1
   158a8:	bx	lr
   158ac:	cmp	r1, #0
   158b0:	movne	r3, #0
   158b4:	strne	r3, [r1]
   158b8:	movne	r1, r3
   158bc:	b	158a4 <flatcc_builder_get_direct_buffer@@Base+0x28>

000158c0 <flatcc_builder_copy_buffer@@Base>:
   158c0:	ldr	r3, [r0, #184]	; 0xb8
   158c4:	cmp	r3, #0
   158c8:	beq	158f4 <flatcc_builder_copy_buffer@@Base+0x34>
   158cc:	push	{r4, lr}
   158d0:	add	r0, r0, #188	; 0xbc
   158d4:	bl	15e68 <flatcc_emitter_copy_buffer@@Base>
   158d8:	cmp	r0, #0
   158dc:	popne	{r4, pc}
   158e0:	ldr	r3, [pc, #20]	; 158fc <flatcc_builder_copy_buffer@@Base+0x3c>
   158e4:	movw	r2, #1926	; 0x786
   158e8:	ldr	r1, [pc, #16]	; 15900 <flatcc_builder_copy_buffer@@Base+0x40>
   158ec:	ldr	r0, [pc, #16]	; 15904 <flatcc_builder_copy_buffer@@Base+0x44>
   158f0:	bl	11fd4 <__assert_fail@plt>
   158f4:	mov	r0, r3
   158f8:	bx	lr
   158fc:	andeq	r6, r1, r6, lsl #19
   15900:	andeq	r6, r1, r0, asr #19
   15904:			; <UNDEFINED> instruction: 0x00016ab7

00015908 <flatcc_builder_finalize_buffer@@Base>:
   15908:	push	{r4, r5, r6, lr}
   1590c:	cmp	r1, #0
   15910:	mov	r5, r0
   15914:	ldr	r2, [r0, #136]	; 0x88
   15918:	ldr	r4, [r0, #140]	; 0x8c
   1591c:	sub	r4, r4, r2
   15920:	mov	r0, r4
   15924:	strne	r4, [r1]
   15928:	bl	11f74 <malloc@plt>
   1592c:	subs	r6, r0, #0
   15930:	ldreq	r3, [pc, #56]	; 15970 <flatcc_builder_finalize_buffer@@Base+0x68>
   15934:	movweq	r2, #1944	; 0x798
   15938:	beq	1595c <flatcc_builder_finalize_buffer@@Base+0x54>
   1593c:	mov	r2, r4
   15940:	mov	r1, r6
   15944:	mov	r0, r5
   15948:	bl	158c0 <flatcc_builder_copy_buffer@@Base>
   1594c:	cmp	r0, #0
   15950:	bne	15968 <flatcc_builder_finalize_buffer@@Base+0x60>
   15954:	ldr	r3, [pc, #20]	; 15970 <flatcc_builder_finalize_buffer@@Base+0x68>
   15958:	movw	r2, #1948	; 0x79c
   1595c:	ldr	r1, [pc, #16]	; 15974 <flatcc_builder_finalize_buffer@@Base+0x6c>
   15960:	ldr	r0, [pc, #16]	; 15978 <flatcc_builder_finalize_buffer@@Base+0x70>
   15964:	bl	11fd4 <__assert_fail@plt>
   15968:	mov	r0, r6
   1596c:	pop	{r4, r5, r6, pc}
   15970:	andeq	r6, r1, r1, lsr #19
   15974:	andeq	r6, r1, r0, asr #19
   15978:	andeq	r6, r1, sp, lsr #20

0001597c <flatcc_builder_finalize_aligned_buffer@@Base>:
   1597c:	push	{r4, r5, r6, r7, r8, lr}
   15980:	mov	r6, r0
   15984:	subs	r7, r1, #0
   15988:	ldr	r2, [r0, #136]	; 0x88
   1598c:	ldr	r4, [r0, #140]	; 0x8c
   15990:	ldrh	r0, [r0, #128]	; 0x80
   15994:	sub	r2, r4, r2
   15998:	sub	r4, r0, #1
   1599c:	strne	r2, [r7]
   159a0:	add	r4, r4, r2
   159a4:	rsb	r2, r0, #0
   159a8:	and	r4, r4, r2
   159ac:	mov	r1, r4
   159b0:	bl	12dd0 <access_monster_buffer@@Base+0x4b8>
   159b4:	subs	r5, r0, #0
   159b8:	beq	159e0 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   159bc:	mov	r2, r4
   159c0:	mov	r1, r5
   159c4:	mov	r0, r6
   159c8:	bl	158c0 <flatcc_builder_copy_buffer@@Base>
   159cc:	subs	r4, r0, #0
   159d0:	bne	159e0 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   159d4:	mov	r0, r5
   159d8:	mov	r5, r4
   159dc:	bl	11f38 <free@plt>
   159e0:	adds	r3, r7, #0
   159e4:	mov	r0, r5
   159e8:	movne	r3, #1
   159ec:	cmp	r5, #0
   159f0:	movne	r3, #0
   159f4:	cmp	r3, #0
   159f8:	movne	r3, #0
   159fc:	strne	r3, [r7]
   15a00:	pop	{r4, r5, r6, r7, r8, pc}

00015a04 <flatcc_builder_aligned_alloc@@Base>:
   15a04:	b	12dd0 <access_monster_buffer@@Base+0x4b8>

00015a08 <flatcc_builder_aligned_free@@Base>:
   15a08:	b	11f38 <free@plt>

00015a0c <flatcc_builder_get_emit_context@@Base>:
   15a0c:	ldr	r0, [r0, #36]	; 0x24
   15a10:	bx	lr

00015a14 <flatcc_emitter_recycle_page@@Base>:
   15a14:	ldr	r3, [r0]
   15a18:	cmp	r3, r1
   15a1c:	beq	15a5c <flatcc_emitter_recycle_page@@Base+0x48>
   15a20:	ldr	r2, [r0, #4]
   15a24:	cmp	r2, r1
   15a28:	beq	15a5c <flatcc_emitter_recycle_page@@Base+0x48>
   15a2c:	ldr	r0, [r1, #2944]	; 0xb80
   15a30:	ldr	r2, [r1, #2948]	; 0xb84
   15a34:	str	r2, [r0, #2948]	; 0xb84
   15a38:	str	r0, [r2, #2944]	; 0xb80
   15a3c:	mov	r0, #0
   15a40:	ldr	r2, [r3, #2948]	; 0xb84
   15a44:	str	r3, [r1, #2944]	; 0xb80
   15a48:	str	r2, [r1, #2948]	; 0xb84
   15a4c:	str	r1, [r2, #2944]	; 0xb80
   15a50:	ldr	r3, [r1, #2944]	; 0xb80
   15a54:	str	r1, [r3, #2948]	; 0xb84
   15a58:	bx	lr
   15a5c:	mvn	r0, #0
   15a60:	bx	lr

00015a64 <flatcc_emitter_reset@@Base>:
   15a64:	ldr	r3, [r0]
   15a68:	cmp	r3, #0
   15a6c:	bxeq	lr
   15a70:	add	r2, r3, #1472	; 0x5c0
   15a74:	push	{r4, lr}
   15a78:	mov	r4, r0
   15a7c:	str	r3, [r0, #4]
   15a80:	str	r2, [r0, #8]
   15a84:	str	r2, [r0, #16]
   15a88:	mov	r2, #1472	; 0x5c0
   15a8c:	str	r2, [r0, #12]
   15a90:	str	r2, [r0, #20]
   15a94:	sub	r2, r2, #2944	; 0xb80
   15a98:	str	r2, [r3, #2952]	; 0xb88
   15a9c:	ldr	r3, [r0, #24]
   15aa0:	ldr	r2, [r0, #32]
   15aa4:	cmp	r2, #0
   15aa8:	streq	r3, [r0, #32]
   15aac:	lsr	r3, r3, #2
   15ab0:	ldr	r2, [r0, #32]
   15ab4:	add	r2, r2, r2, lsl #1
   15ab8:	add	r3, r3, r2, lsr #2
   15abc:	str	r3, [r0, #32]
   15ac0:	mov	r3, #0
   15ac4:	str	r3, [r0, #24]
   15ac8:	ldr	r3, [r4, #28]
   15acc:	ldr	r2, [r4, #32]
   15ad0:	cmp	r3, r2, lsl #1
   15ad4:	popls	{r4, pc}
   15ad8:	ldrd	r2, [r4]
   15adc:	ldr	r0, [r3, #2944]	; 0xb80
   15ae0:	cmp	r0, r2
   15ae4:	popeq	{r4, pc}
   15ae8:	ldr	r2, [r0, #2944]	; 0xb80
   15aec:	str	r2, [r3, #2944]	; 0xb80
   15af0:	ldr	r2, [r0, #2944]	; 0xb80
   15af4:	str	r3, [r2, #2948]	; 0xb84
   15af8:	bl	11f38 <free@plt>
   15afc:	ldr	r3, [r4, #28]
   15b00:	sub	r3, r3, #2944	; 0xb80
   15b04:	str	r3, [r4, #28]
   15b08:	b	15ac8 <flatcc_emitter_reset@@Base+0x64>

00015b0c <flatcc_emitter_clear@@Base>:
   15b0c:	ldr	r3, [r0]
   15b10:	cmp	r3, #0
   15b14:	bxeq	lr
   15b18:	push	{r4, r5, r6, lr}
   15b1c:	mov	r1, #0
   15b20:	mov	r4, r0
   15b24:	ldr	r2, [r3, #2948]	; 0xb84
   15b28:	str	r1, [r2, #2944]	; 0xb80
   15b2c:	ldr	r5, [r3, #2944]	; 0xb80
   15b30:	cmp	r5, #0
   15b34:	bne	15b54 <flatcc_emitter_clear@@Base+0x48>
   15b38:	mov	r0, r3
   15b3c:	bl	11f38 <free@plt>
   15b40:	mov	r1, r5
   15b44:	mov	r0, r4
   15b48:	pop	{r4, r5, r6, lr}
   15b4c:	mov	r2, #36	; 0x24
   15b50:	b	11fb0 <memset@plt>
   15b54:	ldr	r0, [r5, #2948]	; 0xb84
   15b58:	bl	11f38 <free@plt>
   15b5c:	mov	r3, r5
   15b60:	b	15b2c <flatcc_emitter_clear@@Base+0x20>

00015b64 <flatcc_emitter@@Base>:
   15b64:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b68:	mov	r4, r0
   15b6c:	mov	r6, r2
   15b70:	cmp	r3, #0
   15b74:	ldr	r0, [r0, #24]
   15b78:	ldr	r2, [sp, #40]	; 0x28
   15b7c:	add	r0, r0, r2
   15b80:	str	r0, [r4, #24]
   15b84:	bge	15d1c <flatcc_emitter@@Base+0x1b8>
   15b88:	ldr	r0, [r4, #12]
   15b8c:	cmp	r0, r2
   15b90:	bcc	15bd4 <flatcc_emitter@@Base+0x70>
   15b94:	ldr	r3, [r4, #8]
   15b98:	sub	r3, r3, r2
   15b9c:	sub	r2, r0, r2
   15ba0:	str	r3, [r4, #8]
   15ba4:	str	r2, [r4, #12]
   15ba8:	mov	r4, r1
   15bac:	sub	r6, r6, #1
   15bb0:	add	r4, r4, #8
   15bb4:	cmn	r6, #1
   15bb8:	beq	15be8 <flatcc_emitter@@Base+0x84>
   15bbc:	mov	r0, r3
   15bc0:	ldmdb	r4, {r1, r2}
   15bc4:	bl	11f44 <memcpy@plt>
   15bc8:	ldr	r2, [r4, #-4]
   15bcc:	add	r3, r0, r2
   15bd0:	b	15bac <flatcc_emitter@@Base+0x48>
   15bd4:	ldr	r9, [pc, #648]	; 15e64 <flatcc_emitter@@Base+0x300>
   15bd8:	add	r5, r1, r6, lsl #3
   15bdc:	mov	r8, #2944	; 0xb80
   15be0:	cmp	r6, #0
   15be4:	bne	15bf0 <flatcc_emitter@@Base+0x8c>
   15be8:	mov	r0, #0
   15bec:	b	15c88 <flatcc_emitter@@Base+0x124>
   15bf0:	ldr	sl, [r5, #-8]
   15bf4:	ldr	r7, [r5, #-4]
   15bf8:	add	sl, sl, r7
   15bfc:	cmp	r7, #0
   15c00:	subeq	r5, r5, #8
   15c04:	subeq	r6, r6, #1
   15c08:	beq	15be0 <flatcc_emitter@@Base+0x7c>
   15c0c:	ldr	r3, [r4, #12]
   15c10:	cmp	r3, r7
   15c14:	bcs	15cec <flatcc_emitter@@Base+0x188>
   15c18:	cmp	r3, #0
   15c1c:	movne	r2, r3
   15c20:	bne	15cf0 <flatcc_emitter@@Base+0x18c>
   15c24:	ldr	fp, [r4]
   15c28:	cmp	fp, #0
   15c2c:	beq	15c74 <flatcc_emitter@@Base+0x110>
   15c30:	ldr	r2, [r4, #4]
   15c34:	ldr	r3, [fp, #2948]	; 0xb84
   15c38:	cmp	r3, r2
   15c3c:	beq	15c74 <flatcc_emitter@@Base+0x110>
   15c40:	ldr	r2, [fp, #2952]	; 0xb88
   15c44:	sub	r2, r2, #2944	; 0xb80
   15c48:	str	r2, [r3, #2952]	; 0xb88
   15c4c:	str	r3, [r4]
   15c50:	ldr	r3, [r4]
   15c54:	str	r8, [r4, #12]
   15c58:	add	r2, r3, #2944	; 0xb80
   15c5c:	str	r2, [r4, #8]
   15c60:	ldr	r2, [r3, #2944]	; 0xb80
   15c64:	ldr	r2, [r2, #2952]	; 0xb88
   15c68:	sub	r2, r2, #2944	; 0xb80
   15c6c:	str	r2, [r3, #2952]	; 0xb88
   15c70:	b	15bfc <flatcc_emitter@@Base+0x98>
   15c74:	movw	r0, #2956	; 0xb8c
   15c78:	bl	11f74 <malloc@plt>
   15c7c:	cmp	r0, #0
   15c80:	bne	15c90 <flatcc_emitter@@Base+0x12c>
   15c84:	mvn	r0, #0
   15c88:	add	sp, sp, #4
   15c8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c90:	ldr	r3, [r4, #28]
   15c94:	cmp	fp, #0
   15c98:	add	r3, r3, #2944	; 0xb80
   15c9c:	str	r3, [r4, #28]
   15ca0:	beq	15cc0 <flatcc_emitter@@Base+0x15c>
   15ca4:	ldr	r3, [r4, #4]
   15ca8:	str	fp, [r0, #2944]	; 0xb80
   15cac:	str	r3, [r0, #2948]	; 0xb84
   15cb0:	str	r0, [fp, #2948]	; 0xb84
   15cb4:	str	r0, [r3, #2944]	; 0xb80
   15cb8:	str	r0, [r4]
   15cbc:	b	15c50 <flatcc_emitter@@Base+0xec>
   15cc0:	add	r3, r0, #1472	; 0x5c0
   15cc4:	str	r0, [r4]
   15cc8:	str	r0, [r0, #2944]	; 0xb80
   15ccc:	stmib	r4, {r0, r3}
   15cd0:	str	r3, [r4, #16]
   15cd4:	mov	r3, #1472	; 0x5c0
   15cd8:	str	r0, [r0, #2948]	; 0xb84
   15cdc:	str	r3, [r4, #12]
   15ce0:	str	r3, [r4, #20]
   15ce4:	str	r9, [r0, #2952]	; 0xb88
   15ce8:	b	15bfc <flatcc_emitter@@Base+0x98>
   15cec:	mov	r2, r7
   15cf0:	ldr	r0, [r4, #8]
   15cf4:	rsb	r1, r2, #0
   15cf8:	sub	r3, r3, r2
   15cfc:	add	sl, sl, r1
   15d00:	sub	r7, r7, r2
   15d04:	str	r3, [r4, #12]
   15d08:	add	r0, r0, r1
   15d0c:	mov	r1, sl
   15d10:	str	r0, [r4, #8]
   15d14:	bl	11f44 <memcpy@plt>
   15d18:	b	15bfc <flatcc_emitter@@Base+0x98>
   15d1c:	ldr	r0, [r4, #20]
   15d20:	cmp	r0, r2
   15d24:	bcs	15d58 <flatcc_emitter@@Base+0x1f4>
   15d28:	ldr	sl, [pc, #308]	; 15e64 <flatcc_emitter@@Base+0x300>
   15d2c:	add	r5, r1, #8
   15d30:	mov	r9, #2944	; 0xb80
   15d34:	cmp	r6, #0
   15d38:	beq	15be8 <flatcc_emitter@@Base+0x84>
   15d3c:	ldr	fp, [r5, #-8]
   15d40:	ldr	r8, [r5, #-4]
   15d44:	cmp	r8, #0
   15d48:	bne	15d70 <flatcc_emitter@@Base+0x20c>
   15d4c:	sub	r6, r6, #1
   15d50:	add	r5, r5, #8
   15d54:	b	15d34 <flatcc_emitter@@Base+0x1d0>
   15d58:	ldr	r3, [r4, #16]
   15d5c:	add	ip, r3, r2
   15d60:	sub	r2, r0, r2
   15d64:	str	ip, [r4, #16]
   15d68:	str	r2, [r4, #20]
   15d6c:	b	15ba8 <flatcc_emitter@@Base+0x44>
   15d70:	ldr	r7, [r4, #20]
   15d74:	cmp	r7, r8
   15d78:	bcs	15e2c <flatcc_emitter@@Base+0x2c8>
   15d7c:	cmp	r7, #0
   15d80:	bne	15e30 <flatcc_emitter@@Base+0x2cc>
   15d84:	ldr	r7, [r4, #4]
   15d88:	cmp	r7, #0
   15d8c:	beq	15da4 <flatcc_emitter@@Base+0x240>
   15d90:	ldr	r2, [r4]
   15d94:	ldr	r3, [r7, #2944]	; 0xb80
   15d98:	cmp	r3, r2
   15d9c:	strne	r3, [r4, #4]
   15da0:	bne	15de0 <flatcc_emitter@@Base+0x27c>
   15da4:	movw	r0, #2956	; 0xb8c
   15da8:	bl	11f74 <malloc@plt>
   15dac:	cmp	r0, #0
   15db0:	beq	15c84 <flatcc_emitter@@Base+0x120>
   15db4:	ldr	r3, [r4, #28]
   15db8:	cmp	r7, #0
   15dbc:	add	r3, r3, #2944	; 0xb80
   15dc0:	str	r3, [r4, #28]
   15dc4:	beq	15e00 <flatcc_emitter@@Base+0x29c>
   15dc8:	ldr	r3, [r4]
   15dcc:	str	r3, [r0, #2944]	; 0xb80
   15dd0:	str	r7, [r0, #2948]	; 0xb84
   15dd4:	str	r0, [r3, #2948]	; 0xb84
   15dd8:	str	r0, [r7, #2944]	; 0xb80
   15ddc:	str	r0, [r4, #4]
   15de0:	ldr	r3, [r4, #4]
   15de4:	ldr	r2, [r3, #2948]	; 0xb84
   15de8:	ldr	r2, [r2, #2952]	; 0xb88
   15dec:	str	r3, [r4, #16]
   15df0:	str	r9, [r4, #20]
   15df4:	add	r2, r2, #2944	; 0xb80
   15df8:	str	r2, [r3, #2952]	; 0xb88
   15dfc:	b	15d44 <flatcc_emitter@@Base+0x1e0>
   15e00:	add	r3, r0, #1472	; 0x5c0
   15e04:	str	r0, [r4]
   15e08:	str	r0, [r0, #2944]	; 0xb80
   15e0c:	stmib	r4, {r0, r3}
   15e10:	str	r3, [r4, #16]
   15e14:	mov	r3, #1472	; 0x5c0
   15e18:	str	r0, [r0, #2948]	; 0xb84
   15e1c:	str	r3, [r4, #12]
   15e20:	str	r3, [r4, #20]
   15e24:	str	sl, [r0, #2952]	; 0xb88
   15e28:	b	15d44 <flatcc_emitter@@Base+0x1e0>
   15e2c:	mov	r7, r8
   15e30:	mov	r2, r7
   15e34:	mov	r1, fp
   15e38:	ldr	r0, [r4, #16]
   15e3c:	bl	11f44 <memcpy@plt>
   15e40:	ldr	r3, [r4, #16]
   15e44:	sub	r8, r8, r7
   15e48:	add	fp, fp, r7
   15e4c:	add	r3, r3, r7
   15e50:	str	r3, [r4, #16]
   15e54:	ldr	r3, [r4, #20]
   15e58:	sub	r7, r3, r7
   15e5c:	str	r7, [r4, #20]
   15e60:	b	15d44 <flatcc_emitter@@Base+0x1e0>
   15e64:			; <UNDEFINED> instruction: 0xfffffa40

00015e68 <flatcc_emitter_copy_buffer@@Base>:
   15e68:	ldr	ip, [r0, #24]
   15e6c:	push	{r4, r5, r6, lr}
   15e70:	cmp	ip, r2
   15e74:	movhi	r6, #0
   15e78:	bhi	15eb0 <flatcc_emitter_copy_buffer@@Base+0x48>
   15e7c:	ldr	r6, [r0]
   15e80:	cmp	r6, #0
   15e84:	beq	15eb0 <flatcc_emitter_copy_buffer@@Base+0x48>
   15e88:	ldr	r2, [r0, #4]
   15e8c:	mov	r5, r1
   15e90:	mov	r4, r0
   15e94:	ldr	r1, [r0, #8]
   15e98:	cmp	r6, r2
   15e9c:	bne	15eb8 <flatcc_emitter_copy_buffer@@Base+0x50>
   15ea0:	mov	r2, ip
   15ea4:	mov	r0, r5
   15ea8:	mov	r6, r5
   15eac:	bl	11f44 <memcpy@plt>
   15eb0:	mov	r0, r6
   15eb4:	pop	{r4, r5, r6, pc}
   15eb8:	ldr	r3, [r4, #12]
   15ebc:	mov	r0, r5
   15ec0:	rsb	r6, r3, #2944	; 0xb80
   15ec4:	mov	r2, r6
   15ec8:	add	r6, r5, r6
   15ecc:	bl	11f44 <memcpy@plt>
   15ed0:	ldr	r2, [r4]
   15ed4:	ldr	r5, [r2, #2944]	; 0xb80
   15ed8:	ldr	r2, [r4, #4]
   15edc:	cmp	r2, r5
   15ee0:	bne	15efc <flatcc_emitter_copy_buffer@@Base+0x94>
   15ee4:	ldr	r2, [r4, #20]
   15ee8:	mov	r1, r5
   15eec:	mov	r0, r6
   15ef0:	rsb	r2, r2, #2944	; 0xb80
   15ef4:	bl	11f44 <memcpy@plt>
   15ef8:	b	15eb0 <flatcc_emitter_copy_buffer@@Base+0x48>
   15efc:	mov	r1, r5
   15f00:	mov	r0, r6
   15f04:	mov	r2, #2944	; 0xb80
   15f08:	add	r6, r6, #2944	; 0xb80
   15f0c:	bl	11f44 <memcpy@plt>
   15f10:	ldr	r5, [r5, #2944]	; 0xb80
   15f14:	b	15ed8 <flatcc_emitter_copy_buffer@@Base+0x70>

00015f18 <__libc_csu_init@@Base>:
   15f18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15f1c:	mov	r7, r0
   15f20:	ldr	r6, [pc, #72]	; 15f70 <__libc_csu_init@@Base+0x58>
   15f24:	ldr	r5, [pc, #72]	; 15f74 <__libc_csu_init@@Base+0x5c>
   15f28:	add	r6, pc, r6
   15f2c:	add	r5, pc, r5
   15f30:	sub	r6, r6, r5
   15f34:	mov	r8, r1
   15f38:	mov	r9, r2
   15f3c:	bl	11f0c <strcmp@plt-0x20>
   15f40:	asrs	r6, r6, #2
   15f44:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15f48:	mov	r4, #0
   15f4c:	add	r4, r4, #1
   15f50:	ldr	r3, [r5], #4
   15f54:	mov	r2, r9
   15f58:	mov	r1, r8
   15f5c:	mov	r0, r7
   15f60:	blx	r3
   15f64:	cmp	r6, r4
   15f68:	bne	15f4c <__libc_csu_init@@Base+0x34>
   15f6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15f70:	andeq	r0, r1, r4, ror #31
   15f74:	ldrdeq	r0, [r1], -ip

00015f78 <__libc_csu_fini@@Base>:
   15f78:	bx	lr

Disassembly of section .fini:

00015f7c <.fini>:
   15f7c:	push	{r3, lr}
   15f80:	pop	{r3, pc}
