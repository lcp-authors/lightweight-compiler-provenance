
../repos/eddieantonio-ocreval-3ab279a/wordfreq/wordfreq:     file format elf32-littlearm


Disassembly of section .init:

00010b3c <.init>:
   10b3c:	push	{r3, lr}
   10b40:	bl	10d64 <__assert_fail@plt+0x4c>
   10b44:	pop	{r3, pc}

Disassembly of section .plt:

00010b48 <calloc@plt-0x14>:
   10b48:	push	{lr}		; (str lr, [sp, #-4]!)
   10b4c:	ldr	lr, [pc, #4]	; 10b58 <calloc@plt-0x4>
   10b50:	add	lr, pc, lr
   10b54:	ldr	pc, [lr, #8]!
   10b58:	andeq	r6, r1, r8, lsr #9

00010b5c <calloc@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #90112	; 0x16000
   10b64:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b68 <strcmp@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #90112	; 0x16000
   10b70:	ldr	pc, [ip, #1184]!	; 0x4a0

00010b74 <printf@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #90112	; 0x16000
   10b7c:	ldr	pc, [ip, #1176]!	; 0x498

00010b80 <fopen@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #90112	; 0x16000
   10b88:	ldr	pc, [ip, #1168]!	; 0x490

00010b8c <free@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #90112	; 0x16000
   10b94:	ldr	pc, [ip, #1160]!	; 0x488

00010b98 <utf8proc_get_property@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #90112	; 0x16000
   10ba0:	ldr	pc, [ip, #1152]!	; 0x480

00010ba4 <fgets@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #90112	; 0x16000
   10bac:	ldr	pc, [ip, #1144]!	; 0x478

00010bb0 <utf8proc_encode_char@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #90112	; 0x16000
   10bb8:	ldr	pc, [ip, #1136]!	; 0x470

00010bbc <strdup@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #90112	; 0x16000
   10bc4:	ldr	pc, [ip, #1128]!	; 0x468

00010bc8 <rewind@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #90112	; 0x16000
   10bd0:	ldr	pc, [ip, #1120]!	; 0x460

00010bd4 <unlink@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #90112	; 0x16000
   10bdc:	ldr	pc, [ip, #1112]!	; 0x458

00010be0 <utf8proc_tolower@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #90112	; 0x16000
   10be8:	ldr	pc, [ip, #1104]!	; 0x450

00010bec <__xstat@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #90112	; 0x16000
   10bf4:	ldr	pc, [ip, #1096]!	; 0x448

00010bf8 <fread@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #90112	; 0x16000
   10c00:	ldr	pc, [ip, #1088]!	; 0x440

00010c04 <utf8proc_iterate@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #90112	; 0x16000
   10c0c:	ldr	pc, [ip, #1080]!	; 0x438

00010c10 <puts@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #90112	; 0x16000
   10c18:	ldr	pc, [ip, #1072]!	; 0x430

00010c1c <malloc@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #90112	; 0x16000
   10c24:	ldr	pc, [ip, #1064]!	; 0x428

00010c28 <__libc_start_main@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #90112	; 0x16000
   10c30:	ldr	pc, [ip, #1056]!	; 0x420

00010c34 <__sysv_signal@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #90112	; 0x16000
   10c3c:	ldr	pc, [ip, #1048]!	; 0x418

00010c40 <__gmon_start__@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #90112	; 0x16000
   10c48:	ldr	pc, [ip, #1040]!	; 0x410

00010c4c <getpid@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #90112	; 0x16000
   10c54:	ldr	pc, [ip, #1032]!	; 0x408

00010c58 <exit@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #90112	; 0x16000
   10c60:	ldr	pc, [ip, #1024]!	; 0x400

00010c64 <bcmp@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #90112	; 0x16000
   10c6c:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c70 <utf8proc_category@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #90112	; 0x16000
   10c78:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c7c <strlen@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #90112	; 0x16000
   10c84:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c88 <fprintf@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #90112	; 0x16000
   10c90:	ldr	pc, [ip, #992]!	; 0x3e0

00010c94 <__isoc99_sscanf@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #90112	; 0x16000
   10c9c:	ldr	pc, [ip, #984]!	; 0x3d8

00010ca0 <fclose@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #90112	; 0x16000
   10ca8:	ldr	pc, [ip, #976]!	; 0x3d0

00010cac <utf8proc_NFC@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #90112	; 0x16000
   10cb4:	ldr	pc, [ip, #968]!	; 0x3c8

00010cb8 <fputc@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #90112	; 0x16000
   10cc0:	ldr	pc, [ip, #960]!	; 0x3c0

00010cc4 <sprintf@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #90112	; 0x16000
   10ccc:	ldr	pc, [ip, #952]!	; 0x3b8

00010cd0 <atoi@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #90112	; 0x16000
   10cd8:	ldr	pc, [ip, #944]!	; 0x3b0

00010cdc <utf8proc_errmsg@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #90112	; 0x16000
   10ce4:	ldr	pc, [ip, #936]!	; 0x3a8

00010ce8 <fputs@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #90112	; 0x16000
   10cf0:	ldr	pc, [ip, #928]!	; 0x3a0

00010cf4 <strncmp@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #90112	; 0x16000
   10cfc:	ldr	pc, [ip, #920]!	; 0x398

00010d00 <abort@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #90112	; 0x16000
   10d08:	ldr	pc, [ip, #912]!	; 0x390

00010d0c <getc@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #90112	; 0x16000
   10d14:	ldr	pc, [ip, #904]!	; 0x388

00010d18 <__assert_fail@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #90112	; 0x16000
   10d20:	ldr	pc, [ip, #896]!	; 0x380

Disassembly of section .text:

00010d28 <error@@Base-0x1ac0>:
   10d28:	mov	fp, #0
   10d2c:	mov	lr, #0
   10d30:	pop	{r1}		; (ldr r1, [sp], #4)
   10d34:	mov	r2, sp
   10d38:	push	{r2}		; (str r2, [sp, #-4]!)
   10d3c:	push	{r0}		; (str r0, [sp, #-4]!)
   10d40:	ldr	ip, [pc, #16]	; 10d58 <__assert_fail@plt+0x40>
   10d44:	push	{ip}		; (str ip, [sp, #-4]!)
   10d48:	ldr	r0, [pc, #12]	; 10d5c <__assert_fail@plt+0x44>
   10d4c:	ldr	r3, [pc, #12]	; 10d60 <__assert_fail@plt+0x48>
   10d50:	bl	10c28 <__libc_start_main@plt>
   10d54:	bl	10d00 <abort@plt>
   10d58:	andeq	r3, r1, ip
   10d5c:	andeq	r0, r1, ip, asr #31
   10d60:	andeq	r2, r1, ip, lsr #31
   10d64:	ldr	r3, [pc, #20]	; 10d80 <__assert_fail@plt+0x68>
   10d68:	ldr	r2, [pc, #20]	; 10d84 <__assert_fail@plt+0x6c>
   10d6c:	add	r3, pc, r3
   10d70:	ldr	r2, [r3, r2]
   10d74:	cmp	r2, #0
   10d78:	bxeq	lr
   10d7c:	b	10c40 <__gmon_start__@plt>
   10d80:	andeq	r6, r1, ip, lsl #5
   10d84:	andeq	r0, r0, r4, lsr #1
   10d88:	ldr	r0, [pc, #24]	; 10da8 <__assert_fail@plt+0x90>
   10d8c:	ldr	r3, [pc, #24]	; 10dac <__assert_fail@plt+0x94>
   10d90:	cmp	r3, r0
   10d94:	bxeq	lr
   10d98:	ldr	r3, [pc, #16]	; 10db0 <__assert_fail@plt+0x98>
   10d9c:	cmp	r3, #0
   10da0:	bxeq	lr
   10da4:	bx	r3
   10da8:	andeq	r7, r2, r4, asr #1
   10dac:	andeq	r7, r2, r4, asr #1
   10db0:	andeq	r0, r0, r0
   10db4:	ldr	r0, [pc, #36]	; 10de0 <__assert_fail@plt+0xc8>
   10db8:	ldr	r1, [pc, #36]	; 10de4 <__assert_fail@plt+0xcc>
   10dbc:	sub	r1, r1, r0
   10dc0:	asr	r1, r1, #2
   10dc4:	add	r1, r1, r1, lsr #31
   10dc8:	asrs	r1, r1, #1
   10dcc:	bxeq	lr
   10dd0:	ldr	r3, [pc, #16]	; 10de8 <__assert_fail@plt+0xd0>
   10dd4:	cmp	r3, #0
   10dd8:	bxeq	lr
   10ddc:	bx	r3
   10de0:	andeq	r7, r2, r4, asr #1
   10de4:	andeq	r7, r2, r4, asr #1
   10de8:	andeq	r0, r0, r0
   10dec:	push	{r4, lr}
   10df0:	ldr	r4, [pc, #24]	; 10e10 <__assert_fail@plt+0xf8>
   10df4:	ldrb	r3, [r4]
   10df8:	cmp	r3, #0
   10dfc:	popne	{r4, pc}
   10e00:	bl	10d88 <__assert_fail@plt+0x70>
   10e04:	mov	r3, #1
   10e08:	strb	r3, [r4]
   10e0c:	pop	{r4, pc}
   10e10:	ldrdeq	r7, [r2], -r8
   10e14:	b	10db4 <__assert_fail@plt+0x9c>
   10e18:	push	{r4, r5, fp, lr}
   10e1c:	add	fp, sp, #8
   10e20:	movw	r4, #29004	; 0x714c
   10e24:	movw	r2, #28848	; 0x70b0
   10e28:	mov	r1, r0
   10e2c:	movt	r4, #2
   10e30:	movt	r2, #2
   10e34:	mov	r0, r4
   10e38:	bl	129b8 <error@@Base+0x1d0>
   10e3c:	movw	r5, #29020	; 0x715c
   10e40:	mov	r1, r4
   10e44:	movt	r5, #2
   10e48:	mov	r0, r5
   10e4c:	bl	11eac <__assert_fail@plt+0x1194>
   10e50:	ldr	r5, [r5]
   10e54:	cmp	r5, #0
   10e58:	beq	10e84 <__assert_fail@plt+0x16c>
   10e5c:	movw	r4, #29036	; 0x716c
   10e60:	movt	r4, #2
   10e64:	ldr	r1, [r5, #8]
   10e68:	mov	r0, r4
   10e6c:	mov	r2, #1
   10e70:	mov	r3, #0
   10e74:	bl	11334 <__assert_fail@plt+0x61c>
   10e78:	ldr	r5, [r5, #4]
   10e7c:	cmp	r5, #0
   10e80:	bne	10e64 <__assert_fail@plt+0x14c>
   10e84:	movw	r0, #29004	; 0x714c
   10e88:	movw	r1, #2956	; 0xb8c
   10e8c:	movt	r0, #2
   10e90:	movt	r1, #1
   10e94:	bl	111a0 <__assert_fail@plt+0x488>
   10e98:	movw	r0, #29020	; 0x715c
   10e9c:	movw	r1, #8816	; 0x2270
   10ea0:	movt	r0, #2
   10ea4:	movt	r1, #1
   10ea8:	pop	{r4, r5, fp, lr}
   10eac:	b	111a0 <__assert_fail@plt+0x488>
   10eb0:	ldr	r1, [r1, #8]
   10eb4:	ldr	r0, [r0, #8]
   10eb8:	b	12374 <__assert_fail@plt+0x165c>
   10ebc:	ldr	r2, [r1, #12]
   10ec0:	ldr	r3, [r0, #12]
   10ec4:	cmp	r2, r3
   10ec8:	subne	r0, r2, r3
   10ecc:	bxne	lr
   10ed0:	ldr	r1, [r1, #8]
   10ed4:	ldr	r0, [r0, #8]
   10ed8:	b	12374 <__assert_fail@plt+0x165c>
   10edc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   10ee0:	add	fp, sp, #24
   10ee4:	movw	r0, #12417	; 0x3081
   10ee8:	movt	r0, #1
   10eec:	bl	10c10 <puts@plt>
   10ef0:	movw	r7, #29036	; 0x716c
   10ef4:	movw	r8, #8052	; 0x1f74
   10ef8:	movt	r7, #2
   10efc:	ldr	r0, [r7, r8]
   10f00:	cmp	r0, #1
   10f04:	blt	10f58 <__assert_fail@plt+0x240>
   10f08:	movw	r9, #8048	; 0x1f70
   10f0c:	movw	r5, #12332	; 0x302c
   10f10:	mov	r4, #0
   10f14:	mov	r6, #0
   10f18:	ldr	r0, [r7, r9]
   10f1c:	movt	r5, #1
   10f20:	ldr	r0, [r0, r6, lsl #2]
   10f24:	ldr	r2, [r0, #8]
   10f28:	ldr	r1, [r0, #12]
   10f2c:	mov	r0, r5
   10f30:	bl	10b74 <printf@plt>
   10f34:	ldr	r0, [r7, r9]
   10f38:	ldr	r1, [r7, r8]
   10f3c:	ldr	r2, [r0, r6, lsl #2]
   10f40:	add	r6, r6, #1
   10f44:	cmp	r6, r1
   10f48:	ldr	r2, [r2, #12]
   10f4c:	add	r4, r2, r4
   10f50:	blt	10f20 <__assert_fail@plt+0x208>
   10f54:	b	10f5c <__assert_fail@plt+0x244>
   10f58:	mov	r4, #0
   10f5c:	movw	r0, #12343	; 0x3037
   10f60:	mov	r1, r4
   10f64:	movt	r0, #1
   10f68:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   10f6c:	b	10b74 <printf@plt>
   10f70:	push	{r4, sl, fp, lr}
   10f74:	add	fp, sp, #8
   10f78:	movw	r4, #29036	; 0x716c
   10f7c:	movt	r4, #2
   10f80:	mov	r0, r4
   10f84:	bl	11de0 <__assert_fail@plt+0x10c8>
   10f88:	movw	r0, #8052	; 0x1f74
   10f8c:	movw	r2, #3760	; 0xeb0
   10f90:	ldr	r0, [r4, r0]!
   10f94:	movt	r2, #1
   10f98:	ldr	r1, [r4, #-4]
   10f9c:	bl	111e0 <__assert_fail@plt+0x4c8>
   10fa0:	bl	10edc <__assert_fail@plt+0x1c4>
   10fa4:	movw	r0, #25995	; 0x658b
   10fa8:	movt	r0, #1
   10fac:	bl	10c10 <puts@plt>
   10fb0:	ldr	r1, [r4, #-4]
   10fb4:	ldr	r0, [r4]
   10fb8:	movw	r2, #3772	; 0xebc
   10fbc:	movt	r2, #1
   10fc0:	bl	111e0 <__assert_fail@plt+0x4c8>
   10fc4:	pop	{r4, sl, fp, lr}
   10fc8:	b	10edc <__assert_fail@plt+0x1c4>
   10fcc:	push	{fp, lr}
   10fd0:	mov	fp, sp
   10fd4:	sub	sp, sp, #8
   10fd8:	movw	r2, #12357	; 0x3045
   10fdc:	str	r0, [sp, #4]
   10fe0:	add	r0, sp, #4
   10fe4:	mov	r3, #0
   10fe8:	mov	r4, r1
   10fec:	movt	r2, #1
   10ff0:	bl	1257c <__assert_fail@plt+0x1864>
   10ff4:	ldr	r0, [sp, #4]
   10ff8:	cmp	r0, #0
   10ffc:	beq	1102c <__assert_fail@plt+0x314>
   11000:	cmp	r0, #1
   11004:	blt	11024 <__assert_fail@plt+0x30c>
   11008:	mov	r5, #0
   1100c:	ldr	r0, [r4, r5, lsl #2]
   11010:	bl	10e18 <__assert_fail@plt+0x100>
   11014:	ldr	r0, [sp, #4]
   11018:	add	r5, r5, #1
   1101c:	cmp	r5, r0
   11020:	blt	1100c <__assert_fail@plt+0x2f4>
   11024:	bl	10f70 <__assert_fail@plt+0x258>
   11028:	bl	127a8 <__assert_fail@plt+0x1a90>
   1102c:	movw	r0, #12393	; 0x3069
   11030:	movt	r0, #1
   11034:	bl	127e8 <error@@Base>
   11038:	vmov.i32	q8, #0	; 0x00000000
   1103c:	vst1.32	{d16-d17}, [r0]
   11040:	bx	lr
   11044:	ldr	r3, [r0]
   11048:	mov	r2, r1
   1104c:	mov	r1, #0
   11050:	b	11054 <__assert_fail@plt+0x33c>
   11054:	push	{r4, sl, fp, lr}
   11058:	add	fp, sp, #8
   1105c:	cmp	r1, #0
   11060:	mov	r4, r0
   11064:	stm	r2, {r1, r3}
   11068:	addne	r0, r1, #4
   1106c:	cmp	r3, #0
   11070:	addeq	r3, r4, #4
   11074:	str	r2, [r0]
   11078:	str	r2, [r3]
   1107c:	ldr	r0, [r4, #8]
   11080:	cmp	r0, #0
   11084:	beq	11094 <__assert_fail@plt+0x37c>
   11088:	bl	10b8c <free@plt>
   1108c:	mov	r0, #0
   11090:	str	r0, [r4, #8]
   11094:	ldr	r0, [r4, #12]
   11098:	add	r0, r0, #1
   1109c:	str	r0, [r4, #12]
   110a0:	pop	{r4, sl, fp, pc}
   110a4:	mov	r2, r1
   110a8:	ldr	r1, [r0, #4]
   110ac:	mov	r3, #0
   110b0:	b	11054 <__assert_fail@plt+0x33c>
   110b4:	mov	r3, r2
   110b8:	mov	r2, r1
   110bc:	ldr	r1, [r3]
   110c0:	b	11054 <__assert_fail@plt+0x33c>
   110c4:	ldr	r3, [r1, #4]
   110c8:	b	11054 <__assert_fail@plt+0x33c>
   110cc:	push	{r4, r5, fp, lr}
   110d0:	add	fp, sp, #8
   110d4:	mov	r4, r0
   110d8:	ldm	r1, {r0, r2}
   110dc:	cmp	r0, #0
   110e0:	beq	110f0 <__assert_fail@plt+0x3d8>
   110e4:	str	r2, [r0, #4]
   110e8:	ldr	r2, [r1, #4]
   110ec:	b	110f4 <__assert_fail@plt+0x3dc>
   110f0:	str	r2, [r4]
   110f4:	cmp	r2, #0
   110f8:	mov	r5, #0
   110fc:	addeq	r2, r4, #4
   11100:	str	r0, [r2]
   11104:	str	r5, [r1]
   11108:	str	r5, [r1, #4]
   1110c:	ldr	r0, [r4, #8]
   11110:	cmp	r0, #0
   11114:	beq	11120 <__assert_fail@plt+0x408>
   11118:	bl	10b8c <free@plt>
   1111c:	str	r5, [r4, #8]
   11120:	ldr	r0, [r4, #12]
   11124:	sub	r0, r0, #1
   11128:	str	r0, [r4, #12]
   1112c:	pop	{r4, r5, fp, pc}
   11130:	push	{r4, sl, fp, lr}
   11134:	add	fp, sp, #8
   11138:	mov	r4, r0
   1113c:	ldr	r0, [r0, #8]
   11140:	cmp	r0, #0
   11144:	beq	1114c <__assert_fail@plt+0x434>
   11148:	pop	{r4, sl, fp, pc}
   1114c:	ldr	r0, [r4, #12]
   11150:	cmp	r0, #0
   11154:	beq	11148 <__assert_fail@plt+0x430>
   11158:	mov	r1, #4
   1115c:	bl	12354 <__assert_fail@plt+0x163c>
   11160:	str	r0, [r4, #8]
   11164:	ldr	r1, [r4]
   11168:	cmp	r1, #0
   1116c:	beq	11148 <__assert_fail@plt+0x430>
   11170:	str	r1, [r0]
   11174:	ldr	r0, [r1, #4]
   11178:	cmp	r0, #0
   1117c:	popeq	{r4, sl, fp, pc}
   11180:	mov	r1, #4
   11184:	ldr	r2, [r4, #8]
   11188:	str	r0, [r2, r1]
   1118c:	add	r1, r1, #4
   11190:	ldr	r0, [r0, #4]
   11194:	cmp	r0, #0
   11198:	bne	11184 <__assert_fail@plt+0x46c>
   1119c:	b	11148 <__assert_fail@plt+0x430>
   111a0:	push	{r4, r5, r6, sl, fp, lr}
   111a4:	add	fp, sp, #16
   111a8:	ldr	r6, [r0]
   111ac:	cmp	r6, #0
   111b0:	beq	111dc <__assert_fail@plt+0x4c4>
   111b4:	mov	r4, r1
   111b8:	mov	r5, r0
   111bc:	mov	r0, r5
   111c0:	mov	r1, r6
   111c4:	bl	110cc <__assert_fail@plt+0x3b4>
   111c8:	mov	r0, r6
   111cc:	blx	r4
   111d0:	ldr	r6, [r5]
   111d4:	cmp	r6, #0
   111d8:	bne	111bc <__assert_fail@plt+0x4a4>
   111dc:	pop	{r4, r5, r6, sl, fp, pc}
   111e0:	cmp	r0, #2
   111e4:	bxlt	lr
   111e8:	movw	r3, #28896	; 0x70e0
   111ec:	movt	r3, #2
   111f0:	str	r2, [r3]
   111f4:	movw	r2, #28892	; 0x70dc
   111f8:	movt	r2, #2
   111fc:	str	r1, [r2]
   11200:	sub	r1, r0, #1
   11204:	mov	r0, #0
   11208:	b	1120c <__assert_fail@plt+0x4f4>
   1120c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11210:	add	fp, sp, #28
   11214:	sub	sp, sp, #4
   11218:	movw	r7, #28892	; 0x70dc
   1121c:	movw	sl, #28896	; 0x70e0
   11220:	mov	r8, r1
   11224:	mov	r9, r0
   11228:	movt	r7, #2
   1122c:	movt	sl, #2
   11230:	ldr	r0, [r7]
   11234:	cmp	r9, r8
   11238:	mov	r5, r8
   1123c:	mov	r4, r9
   11240:	ldr	r6, [r0, r9, lsl #2]
   11244:	bge	112f4 <__assert_fail@plt+0x5dc>
   11248:	mov	r4, r9
   1124c:	mov	r5, r8
   11250:	cmp	r4, r5
   11254:	bge	1127c <__assert_fail@plt+0x564>
   11258:	ldr	r0, [r7]
   1125c:	ldr	r2, [sl]
   11260:	ldr	r1, [r0, r5, lsl #2]
   11264:	mov	r0, r6
   11268:	blx	r2
   1126c:	cmn	r0, #1
   11270:	bgt	1127c <__assert_fail@plt+0x564>
   11274:	sub	r5, r5, #1
   11278:	b	11250 <__assert_fail@plt+0x538>
   1127c:	cmp	r4, r5
   11280:	beq	11294 <__assert_fail@plt+0x57c>
   11284:	ldr	r0, [r7]
   11288:	ldr	r1, [r0, r5, lsl #2]
   1128c:	str	r1, [r0, r4, lsl #2]
   11290:	add	r4, r4, #1
   11294:	cmp	r4, r5
   11298:	bge	112c8 <__assert_fail@plt+0x5b0>
   1129c:	ldr	r0, [r7]
   112a0:	ldr	r2, [sl]
   112a4:	ldr	r1, [r0, r4, lsl #2]
   112a8:	mov	r0, r6
   112ac:	blx	r2
   112b0:	cmp	r0, #1
   112b4:	blt	112c8 <__assert_fail@plt+0x5b0>
   112b8:	add	r4, r4, #1
   112bc:	cmp	r5, r4
   112c0:	bne	1129c <__assert_fail@plt+0x584>
   112c4:	b	112ec <__assert_fail@plt+0x5d4>
   112c8:	cmp	r4, r5
   112cc:	beq	112e0 <__assert_fail@plt+0x5c8>
   112d0:	ldr	r0, [r7]
   112d4:	ldr	r1, [r0, r4, lsl #2]
   112d8:	str	r1, [r0, r5, lsl #2]
   112dc:	sub	r5, r5, #1
   112e0:	cmp	r4, r5
   112e4:	blt	11250 <__assert_fail@plt+0x538>
   112e8:	b	112f0 <__assert_fail@plt+0x5d8>
   112ec:	mov	r4, r5
   112f0:	ldr	r0, [r7]
   112f4:	sub	r1, r5, #1
   112f8:	str	r6, [r0, r5, lsl #2]
   112fc:	cmp	r1, r9
   11300:	movgt	r0, r9
   11304:	blgt	1120c <__assert_fail@plt+0x4f4>
   11308:	add	r9, r4, #1
   1130c:	cmp	r9, r8
   11310:	blt	11230 <__assert_fail@plt+0x518>
   11314:	sub	sp, fp, #28
   11318:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1131c:	andeq	r0, r0, r0
   11320:	ldm	r0, {r3, ip}
   11324:	add	r2, ip, r2
   11328:	add	r1, r3, r1
   1132c:	stm	r0, {r1, r2}
   11330:	bx	lr
   11334:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11338:	add	fp, sp, #24
   1133c:	mov	r8, r3
   11340:	mov	r5, r2
   11344:	mov	r4, r1
   11348:	mov	r6, r0
   1134c:	bl	11c4c <__assert_fail@plt+0xf34>
   11350:	mov	r7, r0
   11354:	cmp	r0, #0
   11358:	bne	11384 <__assert_fail@plt+0x66c>
   1135c:	mov	r0, #1
   11360:	mov	r1, #20
   11364:	bl	12354 <__assert_fail@plt+0x163c>
   11368:	mov	r7, r0
   1136c:	mov	r0, r4
   11370:	bl	10bbc <strdup@plt>
   11374:	str	r0, [r7, #8]
   11378:	mov	r0, r6
   1137c:	mov	r1, r7
   11380:	bl	11cd0 <__assert_fail@plt+0xfb8>
   11384:	ldr	r0, [r7, #12]
   11388:	ldr	r1, [r7, #16]
   1138c:	add	r0, r0, r5
   11390:	add	r1, r1, r8
   11394:	str	r0, [r7, #12]
   11398:	str	r1, [r7, #16]
   1139c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   113a0:	push	{r4, r5, r6, r7, fp, lr}
   113a4:	add	fp, sp, #16
   113a8:	sub	sp, sp, #8
   113ac:	mov	r6, r1
   113b0:	movw	r1, #26281	; 0x66a9
   113b4:	mov	r5, r0
   113b8:	movt	r1, #1
   113bc:	mov	r0, r6
   113c0:	bl	123f0 <__assert_fail@plt+0x16d8>
   113c4:	mov	r4, r0
   113c8:	movw	r0, #28900	; 0x70e4
   113cc:	mov	r1, #99	; 0x63
   113d0:	movt	r0, #2
   113d4:	mov	r2, r4
   113d8:	bl	10ba4 <fgets@plt>
   113dc:	cmp	r0, #0
   113e0:	beq	11530 <__assert_fail@plt+0x818>
   113e4:	movw	r0, #28900	; 0x70e4
   113e8:	movw	r1, #12426	; 0x308a
   113ec:	mov	r2, #45	; 0x2d
   113f0:	movt	r0, #2
   113f4:	movt	r1, #1
   113f8:	bl	10c64 <bcmp@plt>
   113fc:	cmp	r0, #0
   11400:	bne	11530 <__assert_fail@plt+0x818>
   11404:	movw	r0, #28900	; 0x70e4
   11408:	mov	r1, #99	; 0x63
   1140c:	mov	r2, r4
   11410:	movt	r0, #2
   11414:	bl	10ba4 <fgets@plt>
   11418:	cmp	r0, #0
   1141c:	beq	11530 <__assert_fail@plt+0x818>
   11420:	movw	r0, #28900	; 0x70e4
   11424:	movw	r1, #26211	; 0x6663
   11428:	mov	r2, #48	; 0x30
   1142c:	movt	r0, #2
   11430:	movt	r1, #1
   11434:	bl	10c64 <bcmp@plt>
   11438:	cmp	r0, #0
   1143c:	bne	11530 <__assert_fail@plt+0x818>
   11440:	add	r1, sp, #4
   11444:	mov	r0, r4
   11448:	bl	1154c <__assert_fail@plt+0x834>
   1144c:	cmp	r0, #0
   11450:	beq	11530 <__assert_fail@plt+0x818>
   11454:	mov	r1, sp
   11458:	mov	r0, r4
   1145c:	bl	1154c <__assert_fail@plt+0x834>
   11460:	cmp	r0, #0
   11464:	beq	11530 <__assert_fail@plt+0x818>
   11468:	movw	r0, #28900	; 0x70e4
   1146c:	mov	r1, #99	; 0x63
   11470:	mov	r2, r4
   11474:	movt	r0, #2
   11478:	bl	10ba4 <fgets@plt>
   1147c:	cmp	r0, #0
   11480:	beq	11530 <__assert_fail@plt+0x818>
   11484:	movw	r0, #28900	; 0x70e4
   11488:	mov	r1, #99	; 0x63
   1148c:	mov	r2, r4
   11490:	movt	r0, #2
   11494:	bl	10ba4 <fgets@plt>
   11498:	cmp	r0, #0
   1149c:	beq	11530 <__assert_fail@plt+0x818>
   114a0:	ldr	r2, [sp, #4]
   114a4:	ldm	r5, {r0, r1}
   114a8:	add	r0, r0, r2
   114ac:	ldr	r2, [sp]
   114b0:	add	r1, r1, r2
   114b4:	stm	r5, {r0, r1}
   114b8:	add	r1, r5, #8
   114bc:	mov	r0, r4
   114c0:	bl	115a4 <__assert_fail@plt+0x88c>
   114c4:	mov	r7, r0
   114c8:	add	r1, r5, #416	; 0x1a0
   114cc:	mov	r0, r4
   114d0:	bl	115a4 <__assert_fail@plt+0x88c>
   114d4:	mov	r6, r0
   114d8:	add	r1, r5, #824	; 0x338
   114dc:	mov	r0, r4
   114e0:	bl	115a4 <__assert_fail@plt+0x88c>
   114e4:	ldr	r0, [sp, #4]
   114e8:	cmp	r0, #1
   114ec:	blt	11520 <__assert_fail@plt+0x808>
   114f0:	add	r1, r5, #920	; 0x398
   114f4:	mov	r0, r4
   114f8:	bl	115a4 <__assert_fail@plt+0x88c>
   114fc:	cmp	r7, #1
   11500:	addge	r1, r5, #992	; 0x3e0
   11504:	movge	r0, r4
   11508:	blge	116a4 <__assert_fail@plt+0x98c>
   1150c:	cmp	r6, #1
   11510:	movwge	r0, #9048	; 0x2358
   11514:	addge	r1, r5, r0
   11518:	movge	r0, r4
   1151c:	blge	116a4 <__assert_fail@plt+0x98c>
   11520:	mov	r0, r4
   11524:	bl	12468 <__assert_fail@plt+0x1750>
   11528:	sub	sp, fp, #16
   1152c:	pop	{r4, r5, r6, r7, fp, pc}
   11530:	movw	r0, #12474	; 0x30ba
   11534:	movw	r1, #12492	; 0x30cc
   11538:	cmp	r6, #0
   1153c:	movt	r0, #1
   11540:	movt	r1, #1
   11544:	movne	r1, r6
   11548:	bl	12828 <error@@Base+0x40>
   1154c:	push	{r4, sl, fp, lr}
   11550:	add	fp, sp, #8
   11554:	mov	r2, r0
   11558:	movw	r0, #28900	; 0x70e4
   1155c:	mov	r4, r1
   11560:	mov	r1, #99	; 0x63
   11564:	movt	r0, #2
   11568:	bl	10ba4 <fgets@plt>
   1156c:	cmp	r0, #0
   11570:	beq	1159c <__assert_fail@plt+0x884>
   11574:	movw	r0, #28900	; 0x70e4
   11578:	movw	r1, #12599	; 0x3137
   1157c:	mov	r2, r4
   11580:	movt	r0, #2
   11584:	movt	r1, #1
   11588:	bl	10c94 <__isoc99_sscanf@plt>
   1158c:	sub	r0, r0, #1
   11590:	clz	r0, r0
   11594:	lsr	r0, r0, #5
   11598:	pop	{r4, sl, fp, pc}
   1159c:	mov	r0, #0
   115a0:	pop	{r4, sl, fp, pc}
   115a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115a8:	add	fp, sp, #28
   115ac:	sub	sp, sp, #12
   115b0:	mov	r5, r0
   115b4:	movw	r0, #28900	; 0x70e4
   115b8:	mov	r4, r1
   115bc:	mov	r1, #99	; 0x63
   115c0:	movt	r0, #2
   115c4:	mov	r2, r5
   115c8:	bl	10ba4 <fgets@plt>
   115cc:	mov	r6, #0
   115d0:	cmp	r0, #0
   115d4:	beq	11698 <__assert_fail@plt+0x980>
   115d8:	movw	r7, #28900	; 0x70e4
   115dc:	mov	r1, #99	; 0x63
   115e0:	mov	r2, r5
   115e4:	movt	r7, #2
   115e8:	mov	r0, r7
   115ec:	bl	10ba4 <fgets@plt>
   115f0:	cmp	r0, #0
   115f4:	beq	11698 <__assert_fail@plt+0x980>
   115f8:	add	r1, sp, #8
   115fc:	add	r2, sp, #4
   11600:	mov	r0, r5
   11604:	bl	11b44 <__assert_fail@plt+0xe2c>
   11608:	cmp	r0, #0
   1160c:	beq	11698 <__assert_fail@plt+0x980>
   11610:	movw	r8, #12349	; 0x303d
   11614:	mov	r6, #0
   11618:	add	r7, r7, #29
   1161c:	add	r9, sp, #8
   11620:	add	sl, sp, #4
   11624:	movt	r8, #1
   11628:	mov	r0, r7
   1162c:	bl	10cd0 <atoi@plt>
   11630:	cmp	r0, #0
   11634:	beq	11640 <__assert_fail@plt+0x928>
   11638:	ldr	r1, [sp, #8]
   1163c:	b	11660 <__assert_fail@plt+0x948>
   11640:	mov	r0, r7
   11644:	mov	r1, r8
   11648:	mov	r2, #8
   1164c:	bl	10c64 <bcmp@plt>
   11650:	ldr	r1, [sp, #8]
   11654:	cmp	r0, #0
   11658:	movwne	r0, #11
   1165c:	moveq	r6, r1
   11660:	mov	r2, r4
   11664:	ldr	r0, [r2, r0, lsl #3]!
   11668:	add	r0, r0, r1
   1166c:	ldr	r1, [sp, #4]
   11670:	str	r0, [r2]
   11674:	ldr	r0, [r2, #4]
   11678:	add	r0, r0, r1
   1167c:	mov	r1, r9
   11680:	str	r0, [r2, #4]
   11684:	mov	r0, r5
   11688:	mov	r2, sl
   1168c:	bl	11b44 <__assert_fail@plt+0xe2c>
   11690:	cmp	r0, #0
   11694:	bne	11628 <__assert_fail@plt+0x910>
   11698:	mov	r0, r6
   1169c:	sub	sp, fp, #28
   116a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116a8:	add	fp, sp, #28
   116ac:	sub	sp, sp, #12
   116b0:	mov	r5, r0
   116b4:	movw	r0, #28900	; 0x70e4
   116b8:	mov	r4, r1
   116bc:	mov	r1, #99	; 0x63
   116c0:	movt	r0, #2
   116c4:	mov	r2, r5
   116c8:	bl	10ba4 <fgets@plt>
   116cc:	cmp	r0, #0
   116d0:	beq	11758 <__assert_fail@plt+0xa40>
   116d4:	movw	r6, #28900	; 0x70e4
   116d8:	mov	r1, #99	; 0x63
   116dc:	mov	r2, r5
   116e0:	movt	r6, #2
   116e4:	mov	r0, r6
   116e8:	bl	10ba4 <fgets@plt>
   116ec:	cmp	r0, #0
   116f0:	beq	11758 <__assert_fail@plt+0xa40>
   116f4:	add	r1, sp, #8
   116f8:	add	r2, sp, #4
   116fc:	mov	r0, r5
   11700:	bl	11b44 <__assert_fail@plt+0xe2c>
   11704:	cmp	r0, #0
   11708:	beq	11758 <__assert_fail@plt+0xa40>
   1170c:	mov	sl, #0
   11710:	add	r7, r6, #29
   11714:	add	r8, sp, #8
   11718:	add	r9, sp, #4
   1171c:	mov	r0, r6
   11720:	bl	10c7c <strlen@plt>
   11724:	ldr	r2, [sp, #8]
   11728:	ldr	r3, [sp, #4]
   1172c:	add	r0, r0, r6
   11730:	mov	r1, r7
   11734:	strb	sl, [r0, #-1]
   11738:	mov	r0, r4
   1173c:	bl	11334 <__assert_fail@plt+0x61c>
   11740:	mov	r0, r5
   11744:	mov	r1, r8
   11748:	mov	r2, r9
   1174c:	bl	11b44 <__assert_fail@plt+0xe2c>
   11750:	cmp	r0, #0
   11754:	bne	1171c <__assert_fail@plt+0xa04>
   11758:	sub	sp, fp, #28
   1175c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11760:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11764:	add	fp, sp, #24
   11768:	sub	sp, sp, #8
   1176c:	mov	r2, r1
   11770:	movw	r1, #12498	; 0x30d2
   11774:	mov	r5, r0
   11778:	movt	r1, #1
   1177c:	mov	r0, r2
   11780:	bl	123f0 <__assert_fail@plt+0x16d8>
   11784:	movw	r1, #12500	; 0x30d4
   11788:	movw	r2, #12426	; 0x308a
   1178c:	movw	r3, #26211	; 0x6663
   11790:	mov	r4, r0
   11794:	movt	r1, #1
   11798:	movt	r2, #1
   1179c:	movt	r3, #1
   117a0:	bl	10c88 <fprintf@plt>
   117a4:	ldr	r2, [r5]
   117a8:	movw	r1, #12505	; 0x30d9
   117ac:	mov	r0, r4
   117b0:	movt	r1, #1
   117b4:	bl	10c88 <fprintf@plt>
   117b8:	ldr	r2, [r5, #4]
   117bc:	movw	r1, #12519	; 0x30e7
   117c0:	mov	r0, r4
   117c4:	movt	r1, #1
   117c8:	bl	10c88 <fprintf@plt>
   117cc:	mov	r0, r4
   117d0:	mov	r1, r5
   117d4:	bl	118d8 <__assert_fail@plt+0xbc0>
   117d8:	movw	r0, #12541	; 0x30fd
   117dc:	mov	r1, r4
   117e0:	movt	r0, #1
   117e4:	bl	10ce8 <fputs@plt>
   117e8:	movw	r3, #12554	; 0x310a
   117ec:	mov	r7, #1
   117f0:	mov	r8, #0
   117f4:	add	r1, r5, #8
   117f8:	mov	r0, r4
   117fc:	mov	r2, #50	; 0x32
   11800:	movt	r3, #1
   11804:	str	r8, [sp]
   11808:	str	r7, [sp, #4]
   1180c:	bl	11938 <__assert_fail@plt+0xc20>
   11810:	movw	r3, #12573	; 0x311d
   11814:	add	r6, r5, #416	; 0x1a0
   11818:	mov	r0, r4
   1181c:	mov	r2, #50	; 0x32
   11820:	str	r8, [sp]
   11824:	str	r7, [sp, #4]
   11828:	movt	r3, #1
   1182c:	mov	r1, r6
   11830:	bl	11938 <__assert_fail@plt+0xc20>
   11834:	movw	r3, #12564	; 0x3114
   11838:	add	r1, r5, #824	; 0x338
   1183c:	mov	r0, r4
   11840:	mov	r2, #10
   11844:	str	r7, [sp]
   11848:	str	r7, [sp, #4]
   1184c:	movt	r3, #1
   11850:	bl	11938 <__assert_fail@plt+0xc20>
   11854:	ldr	r0, [r5]
   11858:	cmp	r0, #1
   1185c:	blt	118c4 <__assert_fail@plt+0xbac>
   11860:	movw	r3, #12587	; 0x312b
   11864:	add	r1, r5, #920	; 0x398
   11868:	mov	r0, r4
   1186c:	mov	r2, #8
   11870:	str	r8, [sp]
   11874:	str	r8, [sp, #4]
   11878:	movt	r3, #1
   1187c:	bl	11938 <__assert_fail@plt+0xc20>
   11880:	ldr	r0, [r5, #8]
   11884:	cmp	r0, #1
   11888:	blt	118a0 <__assert_fail@plt+0xb88>
   1188c:	movw	r2, #12554	; 0x310a
   11890:	add	r1, r5, #992	; 0x3e0
   11894:	mov	r0, r4
   11898:	movt	r2, #1
   1189c:	bl	11a78 <__assert_fail@plt+0xd60>
   118a0:	ldr	r0, [r6]
   118a4:	cmp	r0, #1
   118a8:	blt	118c4 <__assert_fail@plt+0xbac>
   118ac:	movw	r2, #12573	; 0x311d
   118b0:	movw	r0, #9048	; 0x2358
   118b4:	movt	r2, #1
   118b8:	add	r1, r5, r0
   118bc:	mov	r0, r4
   118c0:	bl	11a78 <__assert_fail@plt+0xd60>
   118c4:	mov	r0, r4
   118c8:	sub	sp, fp, #24
   118cc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   118d0:	b	12468 <__assert_fail@plt+0x1750>
   118d4:	nop	{0}
   118d8:	mov	ip, r0
   118dc:	ldr	r0, [r1]
   118e0:	cmp	r0, #0
   118e4:	beq	11920 <__assert_fail@plt+0xc08>
   118e8:	ldr	r1, [r1, #4]
   118ec:	vldr	d16, [pc, #60]	; 11930 <__assert_fail@plt+0xc18>
   118f0:	vmov	s2, r0
   118f4:	sub	r1, r0, r1
   118f8:	mov	r0, ip
   118fc:	vmov	s0, r1
   11900:	movw	r1, #12612	; 0x3144
   11904:	movt	r1, #1
   11908:	vcvt.f64.s32	d17, s0
   1190c:	vcvt.f64.s32	d18, s2
   11910:	vmul.f64	d16, d17, d16
   11914:	vdiv.f64	d16, d16, d18
   11918:	vmov	r2, r3, d16
   1191c:	b	10c88 <fprintf@plt>
   11920:	movw	r0, #12603	; 0x313b
   11924:	mov	r1, ip
   11928:	movt	r0, #1
   1192c:	b	10ce8 <fputs@plt>
   11930:	andeq	r0, r0, r0
   11934:	subsmi	r0, r9, r0
   11938:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1193c:	add	fp, sp, #28
   11940:	sub	sp, sp, #4
   11944:	mov	r5, r1
   11948:	movw	r1, #12618	; 0x314a
   1194c:	mov	r7, r2
   11950:	mov	r2, r3
   11954:	mov	r4, r0
   11958:	movt	r1, #1
   1195c:	bl	10c88 <fprintf@plt>
   11960:	movw	r0, #12666	; 0x317a
   11964:	mov	r1, r4
   11968:	movt	r0, #1
   1196c:	bl	10ce8 <fputs@plt>
   11970:	movw	r0, #12693	; 0x3195
   11974:	mov	r1, r4
   11978:	movt	r0, #1
   1197c:	bl	10ce8 <fputs@plt>
   11980:	ldrb	sl, [fp, #8]
   11984:	movw	r0, #12623	; 0x314f
   11988:	movw	r1, #12619	; 0x314b
   1198c:	movw	r2, #12630	; 0x3156
   11990:	movt	r0, #1
   11994:	movt	r1, #1
   11998:	movt	r2, #1
   1199c:	cmp	sl, #0
   119a0:	movne	r2, r0
   119a4:	mov	r0, r4
   119a8:	bl	10c88 <fprintf@plt>
   119ac:	ldr	r1, [fp, #12]
   119b0:	lsl	r0, r7, #16
   119b4:	sxth	r6, r7
   119b8:	cmp	r0, #65536	; 0x10000
   119bc:	str	r1, [sp]
   119c0:	blt	11a0c <__assert_fail@plt+0xcf4>
   119c4:	movw	r8, #12637	; 0x315d
   119c8:	mov	r7, #1
   119cc:	mov	r9, #1
   119d0:	movt	r8, #1
   119d4:	mov	r1, r5
   119d8:	ldr	r0, [r1, r7, lsl #3]!
   119dc:	cmp	r0, #1
   119e0:	blt	119fc <__assert_fail@plt+0xce4>
   119e4:	mov	r0, r4
   119e8:	bl	11ba4 <__assert_fail@plt+0xe8c>
   119ec:	mov	r0, r4
   119f0:	mov	r1, r8
   119f4:	mov	r2, r7
   119f8:	bl	10c88 <fprintf@plt>
   119fc:	add	r9, r9, #1
   11a00:	sxth	r7, r9
   11a04:	cmp	r6, r7
   11a08:	bge	119d4 <__assert_fail@plt+0xcbc>
   11a0c:	cmp	sl, #0
   11a10:	beq	11a40 <__assert_fail@plt+0xd28>
   11a14:	add	r1, r5, r6, lsl #3
   11a18:	ldr	r0, [r1, #8]!
   11a1c:	cmp	r0, #1
   11a20:	blt	11a40 <__assert_fail@plt+0xd28>
   11a24:	mov	r0, r4
   11a28:	bl	11ba4 <__assert_fail@plt+0xe8c>
   11a2c:	movw	r1, #12646	; 0x3166
   11a30:	mov	r0, r4
   11a34:	mov	r2, r6
   11a38:	movt	r1, #1
   11a3c:	bl	10c88 <fprintf@plt>
   11a40:	ldr	r0, [sp]
   11a44:	tst	r0, #255	; 0xff
   11a48:	beq	11a70 <__assert_fail@plt+0xd58>
   11a4c:	mov	r0, r4
   11a50:	mov	r1, r5
   11a54:	bl	11ba4 <__assert_fail@plt+0xe8c>
   11a58:	movw	r0, #12349	; 0x303d
   11a5c:	mov	r1, r4
   11a60:	movt	r0, #1
   11a64:	sub	sp, fp, #28
   11a68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a6c:	b	10ce8 <fputs@plt>
   11a70:	sub	sp, fp, #28
   11a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a78:	push	{r4, r5, r6, r7, fp, lr}
   11a7c:	add	fp, sp, #16
   11a80:	mov	r5, r0
   11a84:	mov	r0, r1
   11a88:	mov	r6, r2
   11a8c:	mov	r4, r1
   11a90:	bl	11de0 <__assert_fail@plt+0x10c8>
   11a94:	movw	r0, #8048	; 0x1f70
   11a98:	movw	r2, #7172	; 0x1c04
   11a9c:	ldr	r1, [r4, r0]!
   11aa0:	movt	r2, #1
   11aa4:	ldr	r0, [r4, #4]
   11aa8:	bl	111e0 <__assert_fail@plt+0x4c8>
   11aac:	movw	r1, #12618	; 0x314a
   11ab0:	mov	r0, r5
   11ab4:	mov	r2, r6
   11ab8:	movt	r1, #1
   11abc:	bl	10c88 <fprintf@plt>
   11ac0:	movw	r0, #12666	; 0x317a
   11ac4:	mov	r1, r5
   11ac8:	movt	r0, #1
   11acc:	bl	10ce8 <fputs@plt>
   11ad0:	movw	r0, #12693	; 0x3195
   11ad4:	mov	r1, r5
   11ad8:	movt	r0, #1
   11adc:	bl	10ce8 <fputs@plt>
   11ae0:	mov	r0, #10
   11ae4:	mov	r1, r5
   11ae8:	bl	10cb8 <fputc@plt>
   11aec:	ldr	r0, [r4, #4]
   11af0:	cmp	r0, #1
   11af4:	blt	11b40 <__assert_fail@plt+0xe28>
   11af8:	movw	r6, #12619	; 0x314b
   11afc:	mov	r7, #0
   11b00:	movt	r6, #1
   11b04:	ldr	r0, [r4]
   11b08:	ldr	r0, [r0, r7, lsl #2]
   11b0c:	add	r1, r0, #12
   11b10:	mov	r0, r5
   11b14:	bl	11ba4 <__assert_fail@plt+0xe8c>
   11b18:	ldr	r0, [r4]
   11b1c:	mov	r1, r6
   11b20:	ldr	r0, [r0, r7, lsl #2]
   11b24:	ldr	r2, [r0, #8]
   11b28:	mov	r0, r5
   11b2c:	bl	10c88 <fprintf@plt>
   11b30:	ldr	r0, [r4, #4]
   11b34:	add	r7, r7, #1
   11b38:	cmp	r7, r0
   11b3c:	blt	11b04 <__assert_fail@plt+0xdec>
   11b40:	pop	{r4, r5, r6, r7, fp, pc}
   11b44:	push	{r4, r5, fp, lr}
   11b48:	add	fp, sp, #8
   11b4c:	mov	r4, r2
   11b50:	mov	r2, r0
   11b54:	movw	r0, #28900	; 0x70e4
   11b58:	mov	r5, r1
   11b5c:	mov	r1, #99	; 0x63
   11b60:	movt	r0, #2
   11b64:	bl	10ba4 <fgets@plt>
   11b68:	cmp	r0, #0
   11b6c:	beq	11b9c <__assert_fail@plt+0xe84>
   11b70:	movw	r0, #28900	; 0x70e4
   11b74:	movw	r1, #12595	; 0x3133
   11b78:	mov	r2, r5
   11b7c:	mov	r3, r4
   11b80:	movt	r0, #2
   11b84:	movt	r1, #1
   11b88:	bl	10c94 <__isoc99_sscanf@plt>
   11b8c:	sub	r0, r0, #2
   11b90:	clz	r0, r0
   11b94:	lsr	r0, r0, #5
   11b98:	pop	{r4, r5, fp, pc}
   11b9c:	mov	r0, #0
   11ba0:	pop	{r4, r5, fp, pc}
   11ba4:	push	{r4, r5, fp, lr}
   11ba8:	add	fp, sp, #8
   11bac:	mov	r4, r0
   11bb0:	cmp	r1, #0
   11bb4:	beq	11be0 <__assert_fail@plt+0xec8>
   11bb8:	mov	r5, r1
   11bbc:	ldm	r1, {r2, r3}
   11bc0:	movw	r1, #12655	; 0x316f
   11bc4:	mov	r0, r4
   11bc8:	movt	r1, #1
   11bcc:	bl	10c88 <fprintf@plt>
   11bd0:	mov	r0, r4
   11bd4:	mov	r1, r5
   11bd8:	bl	118d8 <__assert_fail@plt+0xbc0>
   11bdc:	b	11bf0 <__assert_fail@plt+0xed8>
   11be0:	movw	r0, #12666	; 0x317a
   11be4:	mov	r1, r4
   11be8:	movt	r0, #1
   11bec:	bl	10ce8 <fputs@plt>
   11bf0:	movw	r0, #12693	; 0x3195
   11bf4:	mov	r1, r4
   11bf8:	movt	r0, #1
   11bfc:	pop	{r4, r5, fp, lr}
   11c00:	b	10ce8 <fputs@plt>
   11c04:	ldr	r1, [r1, #8]
   11c08:	ldr	r0, [r0, #8]
   11c0c:	b	12374 <__assert_fail@plt+0x165c>
   11c10:	push	{r4, r5, r6, sl, fp, lr}
   11c14:	add	fp, sp, #16
   11c18:	mov	r4, r0
   11c1c:	movw	r0, #8048	; 0x1f70
   11c20:	movw	r6, #503	; 0x1f7
   11c24:	add	r5, r4, r0
   11c28:	mov	r0, r4
   11c2c:	bl	11038 <__assert_fail@plt+0x320>
   11c30:	subs	r6, r6, #1
   11c34:	add	r4, r4, #16
   11c38:	bne	11c28 <__assert_fail@plt+0xf10>
   11c3c:	mov	r0, #0
   11c40:	str	r0, [r5]
   11c44:	str	r0, [r5, #4]
   11c48:	pop	{r4, r5, r6, sl, fp, pc}
   11c4c:	push	{r4, r5, r6, sl, fp, lr}
   11c50:	add	fp, sp, #16
   11c54:	mov	r5, r1
   11c58:	ldrb	r1, [r1]
   11c5c:	mov	r4, #0
   11c60:	mov	r2, #0
   11c64:	cmp	r1, #0
   11c68:	beq	11c9c <__assert_fail@plt+0xf84>
   11c6c:	add	r3, r5, #1
   11c70:	mov	r2, #0
   11c74:	uxtab	r2, r2, r1
   11c78:	ldrb	r1, [r3], #1
   11c7c:	cmp	r1, #0
   11c80:	bne	11c74 <__assert_fail@plt+0xf5c>
   11c84:	movw	r1, #20065	; 0x4e61
   11c88:	movt	r1, #33354	; 0x824a
   11c8c:	umull	r1, r3, r2, r1
   11c90:	lsr	r1, r3, #8
   11c94:	movw	r3, #503	; 0x1f7
   11c98:	mls	r2, r1, r3, r2
   11c9c:	ldr	r6, [r0, r2, lsl #4]
   11ca0:	cmp	r6, #0
   11ca4:	beq	11cc8 <__assert_fail@plt+0xfb0>
   11ca8:	ldr	r1, [r6, #8]
   11cac:	mov	r0, r5
   11cb0:	bl	10b68 <strcmp@plt>
   11cb4:	cmp	r0, #0
   11cb8:	beq	11cc4 <__assert_fail@plt+0xfac>
   11cbc:	ldr	r6, [r6, #4]
   11cc0:	b	11ca0 <__assert_fail@plt+0xf88>
   11cc4:	mov	r4, r6
   11cc8:	mov	r0, r4
   11ccc:	pop	{r4, r5, r6, sl, fp, pc}
   11cd0:	push	{r4, r5, fp, lr}
   11cd4:	add	fp, sp, #8
   11cd8:	movw	r2, #8048	; 0x1f70
   11cdc:	add	r5, r0, r2
   11ce0:	ldr	r2, [r1, #8]
   11ce4:	ldrb	r3, [r2]
   11ce8:	cmp	r3, #0
   11cec:	beq	11d24 <__assert_fail@plt+0x100c>
   11cf0:	add	r4, r2, #1
   11cf4:	mov	r2, #0
   11cf8:	uxtab	r2, r2, r3
   11cfc:	ldrb	r3, [r4], #1
   11d00:	cmp	r3, #0
   11d04:	bne	11cf8 <__assert_fail@plt+0xfe0>
   11d08:	movw	r3, #20065	; 0x4e61
   11d0c:	movt	r3, #33354	; 0x824a
   11d10:	umull	r3, r4, r2, r3
   11d14:	lsr	r3, r4, #8
   11d18:	movw	r4, #503	; 0x1f7
   11d1c:	mls	r2, r3, r4, r2
   11d20:	b	11d28 <__assert_fail@plt+0x1010>
   11d24:	mov	r2, #0
   11d28:	add	r0, r0, r2, lsl #4
   11d2c:	bl	11044 <__assert_fail@plt+0x32c>
   11d30:	ldr	r0, [r5]
   11d34:	cmp	r0, #0
   11d38:	beq	11d48 <__assert_fail@plt+0x1030>
   11d3c:	bl	10b8c <free@plt>
   11d40:	mov	r0, #0
   11d44:	str	r0, [r5]
   11d48:	ldr	r0, [r5, #4]
   11d4c:	add	r0, r0, #1
   11d50:	str	r0, [r5, #4]
   11d54:	pop	{r4, r5, fp, pc}
   11d58:	push	{r4, r5, fp, lr}
   11d5c:	add	fp, sp, #8
   11d60:	movw	r2, #8048	; 0x1f70
   11d64:	add	r5, r0, r2
   11d68:	ldr	r2, [r1, #8]
   11d6c:	ldrb	r3, [r2]
   11d70:	cmp	r3, #0
   11d74:	beq	11dac <__assert_fail@plt+0x1094>
   11d78:	add	r4, r2, #1
   11d7c:	mov	r2, #0
   11d80:	uxtab	r2, r2, r3
   11d84:	ldrb	r3, [r4], #1
   11d88:	cmp	r3, #0
   11d8c:	bne	11d80 <__assert_fail@plt+0x1068>
   11d90:	movw	r3, #20065	; 0x4e61
   11d94:	movt	r3, #33354	; 0x824a
   11d98:	umull	r3, r4, r2, r3
   11d9c:	lsr	r3, r4, #8
   11da0:	movw	r4, #503	; 0x1f7
   11da4:	mls	r2, r3, r4, r2
   11da8:	b	11db0 <__assert_fail@plt+0x1098>
   11dac:	mov	r2, #0
   11db0:	add	r0, r0, r2, lsl #4
   11db4:	bl	110cc <__assert_fail@plt+0x3b4>
   11db8:	ldr	r0, [r5]
   11dbc:	cmp	r0, #0
   11dc0:	beq	11dd0 <__assert_fail@plt+0x10b8>
   11dc4:	bl	10b8c <free@plt>
   11dc8:	mov	r0, #0
   11dcc:	str	r0, [r5]
   11dd0:	ldr	r0, [r5, #4]
   11dd4:	sub	r0, r0, #1
   11dd8:	str	r0, [r5, #4]
   11ddc:	pop	{r4, r5, fp, pc}
   11de0:	push	{r4, r5, fp, lr}
   11de4:	add	fp, sp, #8
   11de8:	mov	r4, r0
   11dec:	movw	r0, #8048	; 0x1f70
   11df0:	mov	r5, r4
   11df4:	ldr	r0, [r5, r0]!
   11df8:	cmp	r0, #0
   11dfc:	bne	11e50 <__assert_fail@plt+0x1138>
   11e00:	ldr	r0, [r5, #4]
   11e04:	cmp	r0, #0
   11e08:	popeq	{r4, r5, fp, pc}
   11e0c:	mov	r1, #4
   11e10:	bl	12354 <__assert_fail@plt+0x163c>
   11e14:	str	r0, [r5]
   11e18:	mov	r0, #0
   11e1c:	movw	ip, #503	; 0x1f7
   11e20:	mov	r2, #0
   11e24:	ldr	r3, [r4, r2, lsl #4]
   11e28:	cmp	r3, #0
   11e2c:	beq	11e44 <__assert_fail@plt+0x112c>
   11e30:	ldr	r1, [r5]
   11e34:	str	r3, [r1, r0, lsl #2]
   11e38:	add	r0, r0, #1
   11e3c:	ldr	r3, [r3, #4]
   11e40:	b	11e28 <__assert_fail@plt+0x1110>
   11e44:	add	r2, r2, #1
   11e48:	cmp	r2, ip
   11e4c:	bne	11e24 <__assert_fail@plt+0x110c>
   11e50:	pop	{r4, r5, fp, pc}
   11e54:	push	{r4, r5, r6, r7, fp, lr}
   11e58:	add	fp, sp, #16
   11e5c:	mov	r5, r0
   11e60:	movw	r0, #8048	; 0x1f70
   11e64:	mov	r4, r1
   11e68:	movw	r7, #503	; 0x1f7
   11e6c:	add	r6, r5, r0
   11e70:	mov	r0, r5
   11e74:	mov	r1, r4
   11e78:	bl	111a0 <__assert_fail@plt+0x488>
   11e7c:	subs	r7, r7, #1
   11e80:	add	r5, r5, #16
   11e84:	bne	11e70 <__assert_fail@plt+0x1158>
   11e88:	ldr	r0, [r6]
   11e8c:	cmp	r0, #0
   11e90:	beq	11ea0 <__assert_fail@plt+0x1188>
   11e94:	bl	10b8c <free@plt>
   11e98:	mov	r0, #0
   11e9c:	str	r0, [r6]
   11ea0:	mov	r0, #0
   11ea4:	str	r0, [r6, #4]
   11ea8:	pop	{r4, r5, r6, r7, fp, pc}
   11eac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11eb0:	add	fp, sp, #28
   11eb4:	sub	sp, sp, #20
   11eb8:	ldr	sl, [r1]
   11ebc:	str	r0, [sp]
   11ec0:	cmp	sl, #0
   11ec4:	str	sl, [sp, #8]
   11ec8:	beq	12210 <__assert_fail@plt+0x14f8>
   11ecc:	add	r9, sp, #4
   11ed0:	mov	r7, #17
   11ed4:	mov	r6, r9
   11ed8:	mov	r0, r6
   11edc:	mov	r8, r7
   11ee0:	bl	12290 <__assert_fail@plt+0x1578>
   11ee4:	mov	r6, r0
   11ee8:	bl	122d8 <__assert_fail@plt+0x15c0>
   11eec:	mov	r7, r0
   11ef0:	mov	r0, r6
   11ef4:	bl	12290 <__assert_fail@plt+0x1578>
   11ef8:	mov	r5, r0
   11efc:	bl	122d8 <__assert_fail@plt+0x15c0>
   11f00:	mov	r4, r0
   11f04:	mov	r0, r5
   11f08:	bl	12290 <__assert_fail@plt+0x1578>
   11f0c:	bl	122d8 <__assert_fail@plt+0x15c0>
   11f10:	cmp	r7, #1
   11f14:	cmpeq	r4, #2
   11f18:	beq	1206c <__assert_fail@plt+0x1354>
   11f1c:	sub	r1, r7, #1
   11f20:	cmp	r1, #3
   11f24:	subcs	r1, r4, #1
   11f28:	cmpcs	r1, #3
   11f2c:	bcc	120ec <__assert_fail@plt+0x13d4>
   11f30:	orr	r2, r7, #1
   11f34:	orr	r1, r4, #1
   11f38:	cmp	r2, #9
   11f3c:	cmpeq	r1, #9
   11f40:	beq	1206c <__assert_fail@plt+0x1354>
   11f44:	cmp	r2, #9
   11f48:	bne	11f70 <__assert_fail@plt+0x1258>
   11f4c:	cmp	r4, #13
   11f50:	bhi	11f70 <__assert_fail@plt+0x1258>
   11f54:	mov	r3, #1
   11f58:	mov	r5, #13312	; 0x3400
   11f5c:	tst	r5, r3, lsl r4
   11f60:	beq	11f70 <__assert_fail@plt+0x1258>
   11f64:	orr	r3, r0, #1
   11f68:	cmp	r3, #9
   11f6c:	beq	1206c <__assert_fail@plt+0x1354>
   11f70:	orr	r3, r8, #1
   11f74:	cmp	r3, #9
   11f78:	bne	11f9c <__assert_fail@plt+0x1284>
   11f7c:	cmp	r7, #13
   11f80:	bhi	11f9c <__assert_fail@plt+0x1284>
   11f84:	mov	r3, #1
   11f88:	mov	r5, #13312	; 0x3400
   11f8c:	tst	r5, r3, lsl r7
   11f90:	beq	11f9c <__assert_fail@plt+0x1284>
   11f94:	cmp	r1, #9
   11f98:	beq	1206c <__assert_fail@plt+0x1354>
   11f9c:	cmp	r7, #8
   11fa0:	cmpeq	r4, #10
   11fa4:	beq	1206c <__assert_fail@plt+0x1354>
   11fa8:	cmp	r7, #8
   11fac:	cmpeq	r4, #11
   11fb0:	beq	12058 <__assert_fail@plt+0x1340>
   11fb4:	cmp	r8, #8
   11fb8:	cmpeq	r7, #11
   11fbc:	beq	12064 <__assert_fail@plt+0x134c>
   11fc0:	sub	r2, r2, #9
   11fc4:	sub	r3, r7, #15
   11fc8:	clz	r2, r2
   11fcc:	clz	r3, r3
   11fd0:	lsr	ip, r2, #5
   11fd4:	sub	r2, r4, #15
   11fd8:	lsr	r3, r3, #5
   11fdc:	clz	r2, r2
   11fe0:	orr	r5, r3, ip
   11fe4:	lsr	r2, r2, #5
   11fe8:	tst	r5, r2
   11fec:	subeq	r1, r1, #9
   11ff0:	clzeq	r1, r1
   11ff4:	lsreq	r1, r1, #5
   11ff8:	andseq	r1, r3, r1
   11ffc:	bne	1206c <__assert_fail@plt+0x1354>
   12000:	cmp	r8, #15
   12004:	bne	12028 <__assert_fail@plt+0x1310>
   12008:	subs	r1, r7, #10
   1200c:	orr	r2, r7, #2
   12010:	movwne	r1, #1
   12014:	subs	r2, r2, #14
   12018:	movwne	r2, #1
   1201c:	tst	r1, r2
   12020:	cmpeq	r4, #15
   12024:	beq	1206c <__assert_fail@plt+0x1354>
   12028:	cmp	r7, #15
   1202c:	bne	1207c <__assert_fail@plt+0x1364>
   12030:	subs	r1, r4, #10
   12034:	orr	r2, r4, #2
   12038:	movwne	r1, #1
   1203c:	subs	r2, r2, #14
   12040:	movwne	r2, #1
   12044:	tst	r1, r2
   12048:	bne	12088 <__assert_fail@plt+0x1370>
   1204c:	cmp	r0, #15
   12050:	beq	1206c <__assert_fail@plt+0x1354>
   12054:	b	12088 <__assert_fail@plt+0x1370>
   12058:	cmp	r0, #8
   1205c:	beq	1206c <__assert_fail@plt+0x1354>
   12060:	b	11fb4 <__assert_fail@plt+0x129c>
   12064:	cmp	r4, #8
   12068:	bne	11fc0 <__assert_fail@plt+0x12a8>
   1206c:	ldr	r0, [r6, #4]
   12070:	cmp	r0, #0
   12074:	bne	11ed8 <__assert_fail@plt+0x11c0>
   12078:	b	120f4 <__assert_fail@plt+0x13dc>
   1207c:	cmp	r7, #7
   12080:	cmpeq	r4, #7
   12084:	beq	1206c <__assert_fail@plt+0x1354>
   12088:	cmp	r4, #16
   1208c:	bne	120b8 <__assert_fail@plt+0x13a0>
   12090:	orr	r0, r7, #8
   12094:	sub	r1, r7, #16
   12098:	sub	r0, r0, #15
   1209c:	clz	r1, r1
   120a0:	clz	r0, r0
   120a4:	lsr	r1, r1, #5
   120a8:	lsr	r0, r0, #5
   120ac:	orr	r0, r0, ip
   120b0:	orrs	r0, r1, r0
   120b4:	bne	1206c <__assert_fail@plt+0x1354>
   120b8:	cmp	r7, #16
   120bc:	bne	120e0 <__assert_fail@plt+0x13c8>
   120c0:	cmp	r4, #16
   120c4:	bhi	120ec <__assert_fail@plt+0x13d4>
   120c8:	movw	r1, #33664	; 0x8380
   120cc:	mov	r0, #1
   120d0:	movt	r1, #1
   120d4:	tst	r1, r0, lsl r4
   120d8:	bne	1206c <__assert_fail@plt+0x1354>
   120dc:	b	120ec <__assert_fail@plt+0x13d4>
   120e0:	cmp	r7, #5
   120e4:	cmpeq	r4, #5
   120e8:	beq	1206c <__assert_fail@plt+0x1354>
   120ec:	cmp	r6, #0
   120f0:	beq	12210 <__assert_fail@plt+0x14f8>
   120f4:	mov	r7, r6
   120f8:	ldr	r6, [r6, #4]
   120fc:	cmp	r6, #0
   12100:	beq	12118 <__assert_fail@plt+0x1400>
   12104:	mov	r0, r6
   12108:	bl	122d8 <__assert_fail@plt+0x15c0>
   1210c:	orr	r0, r0, #2
   12110:	cmp	r0, #6
   12114:	beq	120f4 <__assert_fail@plt+0x13dc>
   12118:	ldr	r0, [sl, #12]
   1211c:	bl	10b98 <utf8proc_get_property@plt>
   12120:	ldrsh	r0, [r0]
   12124:	sub	r1, r0, #1
   12128:	cmp	r1, #12
   1212c:	bcs	12204 <__assert_fail@plt+0x14ec>
   12130:	ldr	r5, [r7, #4]
   12134:	cmp	r5, sl
   12138:	beq	121a8 <__assert_fail@plt+0x1490>
   1213c:	mov	r4, #0
   12140:	mov	r6, sl
   12144:	cmp	r6, #0
   12148:	beq	12218 <__assert_fail@plt+0x1500>
   1214c:	ldr	r0, [r6, #12]
   12150:	mov	r1, r9
   12154:	bl	10bb0 <utf8proc_encode_char@plt>
   12158:	cmp	r0, #0
   1215c:	beq	12230 <__assert_fail@plt+0x1518>
   12160:	ldr	r6, [r6, #4]
   12164:	add	r4, r0, r4
   12168:	cmp	r6, r5
   1216c:	bne	12144 <__assert_fail@plt+0x142c>
   12170:	add	r0, r4, #1
   12174:	bl	10c1c <malloc@plt>
   12178:	mov	r4, r0
   1217c:	mov	r6, #0
   12180:	cmp	sl, #0
   12184:	beq	12250 <__assert_fail@plt+0x1538>
   12188:	ldr	r0, [sl, #12]
   1218c:	add	r1, r4, r6
   12190:	bl	10bb0 <utf8proc_encode_char@plt>
   12194:	ldr	sl, [sl, #4]
   12198:	add	r6, r0, r6
   1219c:	cmp	sl, r5
   121a0:	bne	12180 <__assert_fail@plt+0x1468>
   121a4:	b	121b8 <__assert_fail@plt+0x14a0>
   121a8:	mov	r0, #1
   121ac:	bl	10c1c <malloc@plt>
   121b0:	mov	r4, r0
   121b4:	mov	r6, #0
   121b8:	mov	r0, #0
   121bc:	mov	r1, #12
   121c0:	strb	r0, [r4, r6]
   121c4:	mov	r0, #1
   121c8:	bl	12354 <__assert_fail@plt+0x163c>
   121cc:	mov	r5, r0
   121d0:	mov	r0, r4
   121d4:	bl	10cac <utf8proc_NFC@plt>
   121d8:	str	r0, [r5, #8]
   121dc:	ldr	r0, [sp]
   121e0:	mov	r1, r5
   121e4:	bl	110a4 <__assert_fail@plt+0x38c>
   121e8:	mov	r0, r4
   121ec:	bl	10b8c <free@plt>
   121f0:	ldr	sl, [r7, #4]
   121f4:	cmp	sl, #0
   121f8:	str	sl, [sp, #8]
   121fc:	bne	11ed0 <__assert_fail@plt+0x11b8>
   12200:	b	12210 <__assert_fail@plt+0x14f8>
   12204:	cmp	r0, #29
   12208:	beq	12130 <__assert_fail@plt+0x1418>
   1220c:	b	121f0 <__assert_fail@plt+0x14d8>
   12210:	sub	sp, fp, #28
   12214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12218:	movw	r0, #25823	; 0x64df
   1221c:	movw	r1, #25816	; 0x64d8
   12220:	movw	r3, #25839	; 0x64ef
   12224:	mov	r2, #249	; 0xf9
   12228:	movt	r0, #1
   1222c:	b	12244 <__assert_fail@plt+0x152c>
   12230:	movw	r0, #25865	; 0x6509
   12234:	movw	r1, #25816	; 0x64d8
   12238:	movw	r3, #25839	; 0x64ef
   1223c:	mov	r2, #253	; 0xfd
   12240:	movt	r0, #1
   12244:	movt	r1, #1
   12248:	movt	r3, #1
   1224c:	bl	10d18 <__assert_fail@plt>
   12250:	movw	r0, #25823	; 0x64df
   12254:	movw	r1, #25816	; 0x64d8
   12258:	movw	r3, #25884	; 0x651c
   1225c:	movw	r2, #269	; 0x10d
   12260:	movt	r0, #1
   12264:	movt	r1, #1
   12268:	movt	r3, #1
   1226c:	bl	10d18 <__assert_fail@plt>
   12270:	push	{r4, sl, fp, lr}
   12274:	add	fp, sp, #8
   12278:	mov	r4, r0
   1227c:	ldr	r0, [r0, #8]
   12280:	bl	10b8c <free@plt>
   12284:	mov	r0, r4
   12288:	pop	{r4, sl, fp, lr}
   1228c:	b	10b8c <free@plt>
   12290:	push	{r4, r5, fp, lr}
   12294:	add	fp, sp, #8
   12298:	mov	r4, #0
   1229c:	cmp	r0, #0
   122a0:	beq	122d0 <__assert_fail@plt+0x15b8>
   122a4:	ldr	r5, [r0, #4]
   122a8:	cmp	r5, #0
   122ac:	beq	122d0 <__assert_fail@plt+0x15b8>
   122b0:	mov	r0, r5
   122b4:	bl	122d8 <__assert_fail@plt+0x15c0>
   122b8:	orr	r0, r0, #2
   122bc:	cmp	r0, #6
   122c0:	bne	122cc <__assert_fail@plt+0x15b4>
   122c4:	ldr	r5, [r5, #4]
   122c8:	b	122a8 <__assert_fail@plt+0x1590>
   122cc:	mov	r4, r5
   122d0:	mov	r0, r4
   122d4:	pop	{r4, r5, fp, pc}
   122d8:	push	{r4, sl, fp, lr}
   122dc:	add	fp, sp, #8
   122e0:	cmp	r0, #0
   122e4:	beq	12344 <__assert_fail@plt+0x162c>
   122e8:	ldr	lr, [r0, #12]
   122ec:	movw	ip, #12700	; 0x319c
   122f0:	mov	r3, #0
   122f4:	movw	r2, #1092	; 0x444
   122f8:	movt	ip, #1
   122fc:	sub	r0, r2, r3
   12300:	add	r1, r3, r0, lsr #1
   12304:	add	r0, r1, r1, lsl #1
   12308:	ldr	r4, [ip, r0, lsl #2]
   1230c:	cmp	r4, lr
   12310:	bls	12324 <__assert_fail@plt+0x160c>
   12314:	sub	r2, r1, #1
   12318:	cmp	r2, r3
   1231c:	bcs	122fc <__assert_fail@plt+0x15e4>
   12320:	b	1233c <__assert_fail@plt+0x1624>
   12324:	add	r0, ip, r0, lsl #2
   12328:	ldr	r3, [r0, #4]
   1232c:	cmp	r3, lr
   12330:	bcs	1234c <__assert_fail@plt+0x1634>
   12334:	add	r3, r1, #1
   12338:	b	12318 <__assert_fail@plt+0x1600>
   1233c:	mov	r0, #0
   12340:	pop	{r4, sl, fp, pc}
   12344:	mov	r0, #18
   12348:	pop	{r4, sl, fp, pc}
   1234c:	ldr	r0, [r0, #8]
   12350:	pop	{r4, sl, fp, pc}
   12354:	push	{fp, lr}
   12358:	mov	fp, sp
   1235c:	bl	10b5c <calloc@plt>
   12360:	cmp	r0, #0
   12364:	popne	{fp, pc}
   12368:	movw	r0, #25908	; 0x6534
   1236c:	movt	r0, #1
   12370:	bl	127e8 <error@@Base>
   12374:	push	{r4, r5, r6, sl, fp, lr}
   12378:	add	fp, sp, #16
   1237c:	ldrb	r3, [r0]
   12380:	ldrb	ip, [r1]
   12384:	mov	r2, r0
   12388:	mov	r0, #0
   1238c:	cmp	r3, #0
   12390:	beq	123c8 <__assert_fail@plt+0x16b0>
   12394:	add	r6, r2, #1
   12398:	add	lr, r1, #1
   1239c:	mov	r2, #0
   123a0:	uxtb	r4, ip
   123a4:	uxtb	r5, r3
   123a8:	cmp	r5, r4
   123ac:	bne	123d8 <__assert_fail@plt+0x16c0>
   123b0:	ldrb	r3, [r6, r2]
   123b4:	ldrb	ip, [lr, r2]
   123b8:	add	r2, r2, #1
   123bc:	cmp	r3, #0
   123c0:	bne	123a0 <__assert_fail@plt+0x1688>
   123c4:	b	123cc <__assert_fail@plt+0x16b4>
   123c8:	mov	r2, #0
   123cc:	cmp	ip, #0
   123d0:	beq	123ec <__assert_fail@plt+0x16d4>
   123d4:	mov	r3, #0
   123d8:	ldrb	r1, [r1, r2]
   123dc:	uxtb	r2, r3
   123e0:	mov	r0, #1
   123e4:	cmp	r2, r1
   123e8:	mvncc	r0, #0
   123ec:	pop	{r4, r5, r6, sl, fp, pc}
   123f0:	push	{r4, r5, fp, lr}
   123f4:	add	fp, sp, #8
   123f8:	mov	r5, r1
   123fc:	cmp	r0, #0
   12400:	beq	12434 <__assert_fail@plt+0x171c>
   12404:	mov	r1, r5
   12408:	mov	r4, r0
   1240c:	bl	10b80 <fopen@plt>
   12410:	cmp	r0, #0
   12414:	popne	{r4, r5, fp, pc}
   12418:	ldrb	r0, [r5]
   1241c:	cmp	r0, #119	; 0x77
   12420:	bne	12458 <__assert_fail@plt+0x1740>
   12424:	movw	r0, #25934	; 0x654e
   12428:	mov	r1, r4
   1242c:	movt	r0, #1
   12430:	bl	12828 <error@@Base+0x40>
   12434:	ldrb	r0, [r5]
   12438:	movw	r1, #28880	; 0x70d0
   1243c:	movw	r2, #28884	; 0x70d4
   12440:	movt	r1, #2
   12444:	movt	r2, #2
   12448:	cmp	r0, #114	; 0x72
   1244c:	moveq	r2, r1
   12450:	ldr	r0, [r2]
   12454:	pop	{r4, r5, fp, pc}
   12458:	movw	r0, #25956	; 0x6564
   1245c:	mov	r1, r4
   12460:	movt	r0, #1
   12464:	bl	12828 <error@@Base+0x40>
   12468:	movw	r1, #28880	; 0x70d0
   1246c:	movt	r1, #2
   12470:	ldr	r1, [r1]
   12474:	cmp	r1, r0
   12478:	bxeq	lr
   1247c:	movw	r1, #28884	; 0x70d4
   12480:	movt	r1, #2
   12484:	ldr	r1, [r1]
   12488:	cmp	r1, r0
   1248c:	beq	12494 <__assert_fail@plt+0x177c>
   12490:	b	10ca0 <fclose@plt>
   12494:	bx	lr
   12498:	push	{fp, lr}
   1249c:	mov	fp, sp
   124a0:	sub	sp, sp, #88	; 0x58
   124a4:	mov	r1, sp
   124a8:	bl	13010 <error@@Base+0x828>
   124ac:	clz	r0, r0
   124b0:	lsr	r0, r0, #5
   124b4:	mov	sp, fp
   124b8:	pop	{fp, pc}
   124bc:	push	{r4, sl, fp, lr}
   124c0:	add	fp, sp, #8
   124c4:	movw	r0, #29000	; 0x7148
   124c8:	movt	r0, #2
   124cc:	ldrh	r1, [r0]
   124d0:	add	r1, r1, #1
   124d4:	strh	r1, [r0]
   124d8:	sxth	r0, r1
   124dc:	bl	124f0 <__assert_fail@plt+0x17d8>
   124e0:	mov	r4, r0
   124e4:	bl	10bd4 <unlink@plt>
   124e8:	mov	r0, r4
   124ec:	pop	{r4, sl, fp, pc}
   124f0:	push	{r4, r5, fp, lr}
   124f4:	add	fp, sp, #8
   124f8:	sub	sp, sp, #104	; 0x68
   124fc:	mov	r4, r0
   12500:	movw	r0, #37096	; 0x90e8
   12504:	movt	r0, #2
   12508:	ldr	r5, [r0]
   1250c:	bl	10c4c <getpid@plt>
   12510:	movw	r1, #25997	; 0x658d
   12514:	mov	r3, r0
   12518:	sxth	r0, r4
   1251c:	add	r4, sp, #4
   12520:	mov	r2, r5
   12524:	movt	r1, #1
   12528:	str	r0, [sp]
   1252c:	mov	r0, r4
   12530:	bl	10cc4 <sprintf@plt>
   12534:	mov	r0, r4
   12538:	bl	10bbc <strdup@plt>
   1253c:	sub	sp, fp, #8
   12540:	pop	{r4, r5, fp, pc}
   12544:	push	{r4, sl, fp, lr}
   12548:	add	fp, sp, #8
   1254c:	mov	r4, r0
   12550:	bl	10c7c <strlen@plt>
   12554:	sub	r0, r0, #1
   12558:	sxth	r0, r0
   1255c:	cmp	r0, #0
   12560:	bmi	12570 <__assert_fail@plt+0x1858>
   12564:	ldrb	r1, [r4, r0]
   12568:	cmp	r1, #47	; 0x2f
   1256c:	bne	12554 <__assert_fail@plt+0x183c>
   12570:	add	r0, r0, r4
   12574:	add	r0, r0, #1
   12578:	pop	{r4, sl, fp, pc}
   1257c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12580:	add	fp, sp, #28
   12584:	sub	sp, sp, #12
   12588:	stmib	sp, {r0, r1}
   1258c:	mov	r6, r3
   12590:	str	r2, [sp]
   12594:	ldr	r4, [r1]
   12598:	mov	r0, r4
   1259c:	bl	10c7c <strlen@plt>
   125a0:	sub	r0, r0, #1
   125a4:	sxth	r0, r0
   125a8:	cmp	r0, #0
   125ac:	bmi	125bc <__assert_fail@plt+0x18a4>
   125b0:	ldrb	r1, [r4, r0]
   125b4:	cmp	r1, #47	; 0x2f
   125b8:	bne	125a0 <__assert_fail@plt+0x1888>
   125bc:	add	r0, r0, r4
   125c0:	movw	r1, #37096	; 0x90e8
   125c4:	movw	r4, #10416	; 0x28b0
   125c8:	movt	r1, #2
   125cc:	movt	r4, #1
   125d0:	add	r0, r0, #1
   125d4:	str	r0, [r1]
   125d8:	mov	r0, #2
   125dc:	mov	r1, r4
   125e0:	bl	10c34 <__sysv_signal@plt>
   125e4:	mov	r0, #15
   125e8:	mov	r1, r4
   125ec:	bl	10c34 <__sysv_signal@plt>
   125f0:	ldr	r0, [sp, #4]
   125f4:	ldr	r5, [r0]
   125f8:	cmp	r5, #1
   125fc:	bne	12614 <__assert_fail@plt+0x18fc>
   12600:	movw	r0, #28860	; 0x70bc
   12604:	movt	r0, #2
   12608:	ldrb	r0, [r0]
   1260c:	cmp	r0, #0
   12610:	bne	12790 <__assert_fail@plt+0x1a78>
   12614:	ldr	ip, [sp, #8]
   12618:	mov	r8, #0
   1261c:	cmp	r5, #2
   12620:	blt	1276c <__assert_fail@plt+0x1a54>
   12624:	mov	r8, #0
   12628:	mov	r7, #1
   1262c:	mov	r9, #1
   12630:	ldr	r4, [ip, r7, lsl #2]
   12634:	ldrb	r0, [r4]
   12638:	cmp	r0, #45	; 0x2d
   1263c:	bne	12714 <__assert_fail@plt+0x19fc>
   12640:	ldrb	sl, [r4, #1]
   12644:	cmp	sl, #0
   12648:	beq	12714 <__assert_fail@plt+0x19fc>
   1264c:	mov	r0, r4
   12650:	bl	10c7c <strlen@plt>
   12654:	mov	r2, r0
   12658:	movw	r0, #26026	; 0x65aa
   1265c:	mov	r1, r4
   12660:	movt	r0, #1
   12664:	bl	10cf4 <strncmp@plt>
   12668:	cmp	r0, #0
   1266c:	beq	12790 <__assert_fail@plt+0x1a78>
   12670:	ldr	ip, [sp, #8]
   12674:	add	r1, r7, #1
   12678:	mov	r0, #0
   1267c:	cmp	r1, r5
   12680:	ldrlt	r0, [ip, r1, lsl #2]
   12684:	cmp	r6, #0
   12688:	ldrbne	r2, [r6]
   1268c:	cmpne	r2, #0
   12690:	beq	12780 <__assert_fail@plt+0x1a68>
   12694:	mov	r1, #0
   12698:	cmp	sl, r2
   1269c:	beq	126c4 <__assert_fail@plt+0x19ac>
   126a0:	mov	r2, #1
   126a4:	sxth	r1, r2
   126a8:	add	r3, r1, r1, lsl #1
   126ac:	ldrb	r3, [r6, r3, lsl #2]
   126b0:	cmp	r3, #0
   126b4:	beq	12780 <__assert_fail@plt+0x1a68>
   126b8:	add	r2, r2, #1
   126bc:	cmp	sl, r3
   126c0:	bne	126a4 <__assert_fail@plt+0x198c>
   126c4:	add	r1, r1, r1, lsl #1
   126c8:	add	r3, r6, r1, lsl #2
   126cc:	ldr	r1, [r3, #4]
   126d0:	cmp	r1, #0
   126d4:	beq	12734 <__assert_fail@plt+0x1a1c>
   126d8:	mov	r2, r4
   126dc:	cmp	r0, #0
   126e0:	ldrb	r7, [r2, #2]!
   126e4:	cmpeq	r7, #0
   126e8:	beq	12734 <__assert_fail@plt+0x1a1c>
   126ec:	ldr	r3, [r1]
   126f0:	cmp	r3, #0
   126f4:	bne	12798 <__assert_fail@plt+0x1a80>
   126f8:	cmp	r7, #0
   126fc:	movne	r0, r2
   12700:	str	r0, [r1]
   12704:	ldrb	r0, [r2]
   12708:	cmp	r0, #0
   1270c:	addeq	r9, r9, #1
   12710:	b	12720 <__assert_fail@plt+0x1a08>
   12714:	sxth	r0, r8
   12718:	add	r8, r8, #1
   1271c:	str	r4, [ip, r0, lsl #2]
   12720:	add	r9, r9, #1
   12724:	sxth	r7, r9
   12728:	cmp	r5, r7
   1272c:	bgt	12630 <__assert_fail@plt+0x1918>
   12730:	b	1276c <__assert_fail@plt+0x1a54>
   12734:	ldr	r0, [r3, #8]
   12738:	cmp	r0, #0
   1273c:	beq	12780 <__assert_fail@plt+0x1a68>
   12740:	ldrb	r1, [r4, #2]
   12744:	cmp	r1, #0
   12748:	bne	12780 <__assert_fail@plt+0x1a68>
   1274c:	ldrb	r1, [r0]
   12750:	cmp	r1, #0
   12754:	bne	12798 <__assert_fail@plt+0x1a80>
   12758:	mov	r1, #1
   1275c:	strb	r1, [r0]
   12760:	ldr	r0, [sp, #4]
   12764:	ldr	r5, [r0]
   12768:	b	12720 <__assert_fail@plt+0x1a08>
   1276c:	ldr	r1, [sp, #4]
   12770:	sxth	r0, r8
   12774:	str	r0, [r1]
   12778:	sub	sp, fp, #28
   1277c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12780:	movw	r0, #26047	; 0x65bf
   12784:	mov	r1, r4
   12788:	movt	r0, #1
   1278c:	bl	12828 <error@@Base+0x40>
   12790:	ldr	r0, [sp]
   12794:	bl	128e0 <error@@Base+0xf8>
   12798:	movw	r0, #26062	; 0x65ce
   1279c:	mov	r1, r4
   127a0:	movt	r0, #1
   127a4:	bl	12828 <error@@Base+0x40>
   127a8:	push	{fp, lr}
   127ac:	mov	fp, sp
   127b0:	mov	r0, #0
   127b4:	bl	127b8 <__assert_fail@plt+0x1aa0>
   127b8:	push	{fp, lr}
   127bc:	mov	fp, sp
   127c0:	mov	r4, r0
   127c4:	movw	r0, #37100	; 0x90ec
   127c8:	movt	r0, #2
   127cc:	ldr	r0, [r0]
   127d0:	cmp	r0, #0
   127d4:	beq	127dc <__assert_fail@plt+0x1ac4>
   127d8:	blx	r0
   127dc:	bl	12930 <error@@Base+0x148>
   127e0:	mov	r0, r4
   127e4:	bl	10c58 <exit@plt>

000127e8 <error@@Base>:
   127e8:	push	{fp, lr}
   127ec:	mov	fp, sp
   127f0:	mov	r3, r0
   127f4:	movw	r0, #37096	; 0x90e8
   127f8:	movw	r1, #25976	; 0x6578
   127fc:	movt	r0, #2
   12800:	movt	r1, #1
   12804:	ldr	r2, [r0]
   12808:	movw	r0, #28872	; 0x70c8
   1280c:	movt	r0, #2
   12810:	ldr	r0, [r0]
   12814:	bl	10c88 <fprintf@plt>
   12818:	movw	r0, #28864	; 0x70c0
   1281c:	movt	r0, #2
   12820:	ldr	r0, [r0]
   12824:	bl	127b8 <__assert_fail@plt+0x1aa0>
   12828:	push	{fp, lr}
   1282c:	mov	fp, sp
   12830:	sub	sp, sp, #8
   12834:	mov	r3, r0
   12838:	movw	r0, #37096	; 0x90e8
   1283c:	str	r1, [sp]
   12840:	movw	r1, #25984	; 0x6580
   12844:	movt	r0, #2
   12848:	movt	r1, #1
   1284c:	ldr	r2, [r0]
   12850:	movw	r0, #28872	; 0x70c8
   12854:	movt	r0, #2
   12858:	ldr	r0, [r0]
   1285c:	bl	10c88 <fprintf@plt>
   12860:	movw	r0, #28864	; 0x70c0
   12864:	movt	r0, #2
   12868:	ldr	r0, [r0]
   1286c:	bl	127b8 <__assert_fail@plt+0x1aa0>
   12870:	push	{fp, lr}
   12874:	mov	fp, sp
   12878:	sub	sp, sp, #8
   1287c:	mov	r3, r0
   12880:	movw	r0, #37096	; 0x90e8
   12884:	str	r1, [sp]
   12888:	movw	r1, #25984	; 0x6580
   1288c:	movt	r0, #2
   12890:	movt	r1, #1
   12894:	ldr	r2, [r0]
   12898:	movw	r0, #28872	; 0x70c8
   1289c:	movt	r0, #2
   128a0:	ldr	r0, [r0]
   128a4:	bl	10c88 <fprintf@plt>
   128a8:	mov	sp, fp
   128ac:	pop	{fp, pc}
   128b0:	push	{fp, lr}
   128b4:	mov	fp, sp
   128b8:	movw	r0, #29002	; 0x714a
   128bc:	movt	r0, #2
   128c0:	ldrb	r1, [r0]
   128c4:	cmp	r1, #1
   128c8:	popeq	{fp, pc}
   128cc:	mov	r1, #1
   128d0:	strb	r1, [r0]
   128d4:	movw	r0, #26011	; 0x659b
   128d8:	movt	r0, #1
   128dc:	bl	127e8 <error@@Base>
   128e0:	push	{fp, lr}
   128e4:	mov	fp, sp
   128e8:	mov	r3, r0
   128ec:	movw	r0, #37092	; 0x90e4
   128f0:	movt	r0, #2
   128f4:	ldr	r0, [r0]
   128f8:	cmp	r0, #0
   128fc:	bne	12928 <error@@Base+0x140>
   12900:	movw	r0, #37096	; 0x90e8
   12904:	movw	r1, #26032	; 0x65b0
   12908:	movt	r0, #2
   1290c:	movt	r1, #1
   12910:	ldr	r2, [r0]
   12914:	movw	r0, #28872	; 0x70c8
   12918:	movt	r0, #2
   1291c:	ldr	r0, [r0]
   12920:	bl	10c88 <fprintf@plt>
   12924:	bl	127a8 <__assert_fail@plt+0x1a90>
   12928:	blx	r0
   1292c:	bl	127a8 <__assert_fail@plt+0x1a90>
   12930:	push	{r4, r5, r6, sl, fp, lr}
   12934:	add	fp, sp, #16
   12938:	movw	r5, #29000	; 0x7148
   1293c:	movt	r5, #2
   12940:	ldrsh	r0, [r5]
   12944:	cmp	r0, #1
   12948:	blt	1297c <error@@Base+0x194>
   1294c:	mov	r6, #1
   12950:	sxth	r0, r6
   12954:	bl	124f0 <__assert_fail@plt+0x17d8>
   12958:	mov	r4, r0
   1295c:	bl	10bd4 <unlink@plt>
   12960:	mov	r0, r4
   12964:	bl	10b8c <free@plt>
   12968:	add	r0, r6, #1
   1296c:	sxth	r6, r0
   12970:	ldrsh	r0, [r5]
   12974:	cmp	r6, r0
   12978:	ble	12950 <error@@Base+0x168>
   1297c:	pop	{r4, r5, r6, sl, fp, pc}
   12980:	push	{r4, r5, r6, sl, fp, lr}
   12984:	add	fp, sp, #16
   12988:	mov	r5, r1
   1298c:	mov	r6, r0
   12990:	mov	r0, #1
   12994:	mov	r1, #16
   12998:	mov	r4, r2
   1299c:	bl	12354 <__assert_fail@plt+0x163c>
   129a0:	str	r4, [r0, #12]
   129a4:	mov	r1, r0
   129a8:	strb	r5, [r0, #8]
   129ac:	mov	r0, r6
   129b0:	pop	{r4, r5, r6, sl, fp, lr}
   129b4:	b	110a4 <__assert_fail@plt+0x38c>
   129b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129bc:	add	fp, sp, #28
   129c0:	sub	sp, sp, #124	; 0x7c
   129c4:	mov	r4, r2
   129c8:	mov	r2, r1
   129cc:	cmp	r1, #0
   129d0:	str	r0, [sp, #16]
   129d4:	bne	129e4 <error@@Base+0x1fc>
   129d8:	ldrb	r0, [r4]
   129dc:	cmp	r0, #0
   129e0:	bne	12d10 <error@@Base+0x528>
   129e4:	ldr	r0, [sp, #16]
   129e8:	movw	r1, #26281	; 0x66a9
   129ec:	movt	r1, #1
   129f0:	ldr	r0, [r0, #4]
   129f4:	str	r0, [sp, #4]
   129f8:	mov	r0, r2
   129fc:	bl	123f0 <__assert_fail@plt+0x16d8>
   12a00:	mov	r6, r0
   12a04:	ldrb	r0, [r4]
   12a08:	cmp	r0, #0
   12a0c:	beq	12a54 <error@@Base+0x26c>
   12a10:	add	r0, sp, #20
   12a14:	mov	r1, #99	; 0x63
   12a18:	mov	r2, r6
   12a1c:	bl	10ba4 <fgets@plt>
   12a20:	cmp	r0, #0
   12a24:	beq	12a44 <error@@Base+0x25c>
   12a28:	movw	r1, #26147	; 0x6623
   12a2c:	add	r0, sp, #20
   12a30:	mov	r2, #51	; 0x33
   12a34:	movt	r1, #1
   12a38:	bl	10c64 <bcmp@plt>
   12a3c:	cmp	r0, #0
   12a40:	beq	12c9c <error@@Base+0x4b4>
   12a44:	mov	r0, r6
   12a48:	bl	10bc8 <rewind@plt>
   12a4c:	mov	r5, #0
   12a50:	strb	r5, [r4, #11]
   12a54:	ldr	r9, [r4, #4]
   12a58:	ldrb	r8, [r4, #1]
   12a5c:	mov	r0, r6
   12a60:	str	r4, [sp, #8]
   12a64:	cmp	r9, #0
   12a68:	movweq	r9, #94	; 0x5e
   12a6c:	bl	10d0c <getc@plt>
   12a70:	cmn	r0, #1
   12a74:	beq	12b38 <error@@Base+0x350>
   12a78:	add	r1, sp, #20
   12a7c:	mov	sl, #0
   12a80:	sub	r4, fp, #32
   12a84:	add	r1, r1, #1
   12a88:	str	r1, [sp, #12]
   12a8c:	movw	r1, #28160	; 0x6e00
   12a90:	movt	r1, #2
   12a94:	add	r1, r1, r0
   12a98:	ldrsb	r5, [r1]
   12a9c:	cmp	r5, #0
   12aa0:	ble	12cf0 <error@@Base+0x508>
   12aa4:	cmp	r5, #1
   12aa8:	strb	r0, [sp, #20]
   12aac:	beq	12ad0 <error@@Base+0x2e8>
   12ab0:	ldr	r0, [sp, #12]
   12ab4:	sub	r7, r5, #1
   12ab8:	mov	r1, #1
   12abc:	mov	r3, r6
   12ac0:	mov	r2, r7
   12ac4:	bl	10bf8 <fread@plt>
   12ac8:	cmp	r0, r7
   12acc:	bne	12d04 <error@@Base+0x51c>
   12ad0:	add	r0, sp, #20
   12ad4:	mov	r1, #4
   12ad8:	mov	r2, r4
   12adc:	bl	10c04 <utf8proc_iterate@plt>
   12ae0:	cmp	r0, r5
   12ae4:	bne	12cfc <error@@Base+0x514>
   12ae8:	ldr	r5, [fp, #-32]	; 0xffffffe0
   12aec:	cmp	r8, #0
   12af0:	beq	12b00 <error@@Base+0x318>
   12af4:	mov	r7, #1
   12af8:	cmp	r5, r9
   12afc:	beq	12b24 <error@@Base+0x33c>
   12b00:	mov	r0, #1
   12b04:	mov	r1, #16
   12b08:	bl	12354 <__assert_fail@plt+0x163c>
   12b0c:	str	r5, [r0, #12]
   12b10:	mov	r1, r0
   12b14:	strb	sl, [r0, #8]
   12b18:	ldr	r0, [sp, #16]
   12b1c:	bl	110a4 <__assert_fail@plt+0x38c>
   12b20:	mov	r7, #0
   12b24:	mov	r0, r6
   12b28:	bl	10d0c <getc@plt>
   12b2c:	cmn	r0, #1
   12b30:	mov	sl, r7
   12b34:	bne	12a8c <error@@Base+0x2a4>
   12b38:	mov	r0, r6
   12b3c:	bl	12468 <__assert_fail@plt+0x1750>
   12b40:	ldr	r8, [sp, #8]
   12b44:	ldr	r9, [sp, #4]
   12b48:	ldrb	r0, [r8, #9]
   12b4c:	cmp	r0, #0
   12b50:	beq	12c5c <error@@Base+0x474>
   12b54:	cmp	r9, #0
   12b58:	ldr	r0, [sp, #16]
   12b5c:	addne	r0, r9, #4
   12b60:	ldr	r6, [r0]
   12b64:	cmp	r6, #0
   12b68:	beq	12c5c <error@@Base+0x474>
   12b6c:	mov	r5, #32
   12b70:	mov	r7, r6
   12b74:	ldr	r4, [r7, #12]
   12b78:	mov	r0, r4
   12b7c:	bl	10b98 <utf8proc_get_property@plt>
   12b80:	cmp	r4, #10
   12b84:	ble	12ba0 <error@@Base+0x3b8>
   12b88:	sub	r1, r4, #11
   12b8c:	cmp	r1, #3
   12b90:	bcc	12bc4 <error@@Base+0x3dc>
   12b94:	cmp	r4, #160	; 0xa0
   12b98:	beq	12bc4 <error@@Base+0x3dc>
   12b9c:	b	12bb0 <error@@Base+0x3c8>
   12ba0:	cmp	r4, #9
   12ba4:	beq	12bc4 <error@@Base+0x3dc>
   12ba8:	cmp	r4, #10
   12bac:	beq	12bc8 <error@@Base+0x3e0>
   12bb0:	ldrsh	r0, [r0]
   12bb4:	sub	r0, r0, #23
   12bb8:	cmp	r0, #2
   12bbc:	strls	r5, [r7, #12]
   12bc0:	b	12bc8 <error@@Base+0x3e0>
   12bc4:	str	r5, [r7, #12]
   12bc8:	ldr	r7, [r7, #4]
   12bcc:	cmp	r7, #0
   12bd0:	bne	12b74 <error@@Base+0x38c>
   12bd4:	mov	r4, #0
   12bd8:	ldr	r1, [r6, #12]
   12bdc:	ldr	r5, [r6, #4]
   12be0:	cmp	r1, #32
   12be4:	bne	12c20 <error@@Base+0x438>
   12be8:	tst	r4, #255	; 0xff
   12bec:	cmpne	r5, #0
   12bf0:	beq	12c3c <error@@Base+0x454>
   12bf4:	ldr	r1, [r5, #12]
   12bf8:	cmp	r1, #10
   12bfc:	beq	12c3c <error@@Base+0x454>
   12c00:	mov	r0, #1
   12c04:	cmp	r1, #32
   12c08:	bne	12c34 <error@@Base+0x44c>
   12c0c:	ldrb	r0, [r6, #8]
   12c10:	ldrb	r1, [r5, #8]
   12c14:	orr	r0, r1, r0
   12c18:	strb	r0, [r5, #8]
   12c1c:	b	12c3c <error@@Base+0x454>
   12c20:	subs	r0, r1, #10
   12c24:	movwne	r0, #1
   12c28:	tst	r4, #255	; 0xff
   12c2c:	cmpeq	r1, #10
   12c30:	beq	12c3c <error@@Base+0x454>
   12c34:	mov	r4, r0
   12c38:	b	12c50 <error@@Base+0x468>
   12c3c:	ldr	r0, [sp, #16]
   12c40:	mov	r1, r6
   12c44:	bl	110cc <__assert_fail@plt+0x3b4>
   12c48:	mov	r0, r6
   12c4c:	bl	10b8c <free@plt>
   12c50:	cmp	r5, #0
   12c54:	mov	r6, r5
   12c58:	bne	12bd8 <error@@Base+0x3f0>
   12c5c:	ldrb	r0, [r8, #10]
   12c60:	cmp	r0, #0
   12c64:	beq	12c94 <error@@Base+0x4ac>
   12c68:	cmp	r9, #0
   12c6c:	ldr	r0, [sp, #16]
   12c70:	addne	r0, r9, #4
   12c74:	ldr	r4, [r0]
   12c78:	cmp	r4, #0
   12c7c:	beq	12c94 <error@@Base+0x4ac>
   12c80:	ldr	r0, [r4, #12]
   12c84:	bl	10be0 <utf8proc_tolower@plt>
   12c88:	str	r0, [r4, #12]
   12c8c:	ldr	r4, [r4, #4]
   12c90:	b	12c78 <error@@Base+0x490>
   12c94:	sub	sp, fp, #28
   12c98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c9c:	movw	r8, #26203	; 0x665b
   12ca0:	mov	r7, #0
   12ca4:	add	r9, sp, #20
   12ca8:	mov	r5, #1
   12cac:	movt	r8, #1
   12cb0:	mov	r0, r9
   12cb4:	mov	r1, #99	; 0x63
   12cb8:	mov	r2, r6
   12cbc:	bl	10ba4 <fgets@plt>
   12cc0:	cmp	r0, #0
   12cc4:	beq	12a50 <error@@Base+0x268>
   12cc8:	mov	r0, r9
   12ccc:	mov	r1, r8
   12cd0:	mov	r2, #56	; 0x38
   12cd4:	bl	10c64 <bcmp@plt>
   12cd8:	cmp	r0, #0
   12cdc:	addeq	r7, r7, #1
   12ce0:	uxth	r0, r7
   12ce4:	cmp	r0, #2
   12ce8:	bcc	12cb0 <error@@Base+0x4c8>
   12cec:	b	12a50 <error@@Base+0x268>
   12cf0:	movw	r0, #26259	; 0x6693
   12cf4:	movt	r0, #1
   12cf8:	bl	127e8 <error@@Base>
   12cfc:	bl	10cdc <utf8proc_errmsg@plt>
   12d00:	bl	127e8 <error@@Base>
   12d04:	movw	r0, #26283	; 0x66ab
   12d08:	movt	r0, #1
   12d0c:	bl	127e8 <error@@Base>
   12d10:	movw	r0, #26079	; 0x65df
   12d14:	movw	r1, #26095	; 0x65ef
   12d18:	movt	r0, #1
   12d1c:	movt	r1, #1
   12d20:	bl	12828 <error@@Base+0x40>
   12d24:	push	{fp, lr}
   12d28:	mov	fp, sp
   12d2c:	bl	10bb0 <utf8proc_encode_char@plt>
   12d30:	cmp	r0, #0
   12d34:	sxtbgt	r0, r0
   12d38:	popgt	{fp, pc}
   12d3c:	movw	r0, #26105	; 0x65f9
   12d40:	movt	r0, #1
   12d44:	bl	127e8 <error@@Base>
   12d48:	push	{r4, r5, r6, r7, fp, lr}
   12d4c:	add	fp, sp, #16
   12d50:	mov	r6, r3
   12d54:	mov	r4, r2
   12d58:	mov	r5, r1
   12d5c:	tst	r0, #255	; 0xff
   12d60:	beq	12d80 <error@@Base+0x598>
   12d64:	mov	r0, #94	; 0x5e
   12d68:	mov	r1, r4
   12d6c:	bl	10bb0 <utf8proc_encode_char@plt>
   12d70:	cmp	r0, #0
   12d74:	ble	12e1c <error@@Base+0x634>
   12d78:	sxtb	r7, r0
   12d7c:	b	12d84 <error@@Base+0x59c>
   12d80:	mov	r7, #0
   12d84:	cmp	r5, #10
   12d88:	bne	12db0 <error@@Base+0x5c8>
   12d8c:	movw	r0, #25995	; 0x658b
   12d90:	movw	r1, #26128	; 0x6610
   12d94:	tst	r6, #255	; 0xff
   12d98:	movt	r0, #1
   12d9c:	movt	r1, #1
   12da0:	moveq	r1, r0
   12da4:	add	r0, r4, r7
   12da8:	pop	{r4, r5, r6, r7, fp, lr}
   12dac:	b	10cc4 <sprintf@plt>
   12db0:	mov	r0, r5
   12db4:	bl	10b98 <utf8proc_get_property@plt>
   12db8:	cmp	r5, #32
   12dbc:	beq	12dd0 <error@@Base+0x5e8>
   12dc0:	ldrsh	r0, [r0]
   12dc4:	sub	r1, r0, #1
   12dc8:	cmp	r1, #22
   12dcc:	bcs	12e28 <error@@Base+0x640>
   12dd0:	mov	r0, r5
   12dd4:	bl	10c70 <utf8proc_category@plt>
   12dd8:	sub	r0, r0, #6
   12ddc:	cmp	r0, #2
   12de0:	bhi	12dfc <error@@Base+0x614>
   12de4:	add	r1, r4, r7
   12de8:	movw	r0, #9676	; 0x25cc
   12dec:	bl	10bb0 <utf8proc_encode_char@plt>
   12df0:	cmp	r0, #0
   12df4:	ble	12e1c <error@@Base+0x634>
   12df8:	sxtab	r7, r7, r0
   12dfc:	add	r1, r4, r7
   12e00:	mov	r0, r5
   12e04:	bl	10bb0 <utf8proc_encode_char@plt>
   12e08:	cmp	r0, #0
   12e0c:	sxtabgt	r0, r7, r0
   12e10:	movgt	r1, #0
   12e14:	strbgt	r1, [r4, r0]
   12e18:	popgt	{r4, r5, r6, r7, fp, pc}
   12e1c:	movw	r0, #26105	; 0x65f9
   12e20:	movt	r0, #1
   12e24:	bl	127e8 <error@@Base>
   12e28:	cmp	r0, #29
   12e2c:	beq	12dd0 <error@@Base+0x5e8>
   12e30:	add	r0, r4, r7
   12e34:	cmp	r5, #255	; 0xff
   12e38:	bhi	12e48 <error@@Base+0x660>
   12e3c:	movw	r1, #26133	; 0x6615
   12e40:	movt	r1, #1
   12e44:	b	12e50 <error@@Base+0x668>
   12e48:	movw	r1, #26140	; 0x661c
   12e4c:	movt	r1, #1
   12e50:	mov	r2, r5
   12e54:	pop	{r4, r5, r6, r7, fp, lr}
   12e58:	b	10cc4 <sprintf@plt>
   12e5c:	push	{r4, r5, r6, r7, fp, lr}
   12e60:	add	fp, sp, #16
   12e64:	sub	sp, sp, #16
   12e68:	mov	r6, r2
   12e6c:	mov	r2, r1
   12e70:	movw	r1, #12498	; 0x30d2
   12e74:	mov	r5, r0
   12e78:	movt	r1, #1
   12e7c:	mov	r0, r2
   12e80:	bl	123f0 <__assert_fail@plt+0x16d8>
   12e84:	mov	r4, r0
   12e88:	cmp	r6, #0
   12e8c:	beq	12ec8 <error@@Base+0x6e0>
   12e90:	movw	r0, #26147	; 0x6623
   12e94:	mov	r1, r4
   12e98:	movt	r0, #1
   12e9c:	bl	10ce8 <fputs@plt>
   12ea0:	movw	r7, #26203	; 0x665b
   12ea4:	mov	r1, r4
   12ea8:	movt	r7, #1
   12eac:	mov	r0, r7
   12eb0:	bl	10ce8 <fputs@plt>
   12eb4:	mov	r0, r4
   12eb8:	blx	r6
   12ebc:	mov	r0, r7
   12ec0:	mov	r1, r4
   12ec4:	bl	10ce8 <fputs@plt>
   12ec8:	ldr	r6, [r5]
   12ecc:	cmp	r6, #0
   12ed0:	beq	12f04 <error@@Base+0x71c>
   12ed4:	add	r5, sp, #7
   12ed8:	ldr	r1, [r6, #12]
   12edc:	ldrb	r0, [r6, #8]
   12ee0:	mov	r2, r5
   12ee4:	mov	r3, #0
   12ee8:	bl	12d48 <error@@Base+0x560>
   12eec:	mov	r0, r5
   12ef0:	mov	r1, r4
   12ef4:	bl	10ce8 <fputs@plt>
   12ef8:	ldr	r6, [r6, #4]
   12efc:	cmp	r6, #0
   12f00:	bne	12ed8 <error@@Base+0x6f0>
   12f04:	mov	r0, r4
   12f08:	bl	12468 <__assert_fail@plt+0x1750>
   12f0c:	sub	sp, fp, #16
   12f10:	pop	{r4, r5, r6, r7, fp, pc}
   12f14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f18:	add	fp, sp, #28
   12f1c:	sub	sp, sp, #4
   12f20:	mov	r9, #0
   12f24:	mov	sl, r0
   12f28:	str	r9, [sp]
   12f2c:	ldrb	r0, [r1]
   12f30:	cmp	r0, #0
   12f34:	beq	12f94 <error@@Base+0x7ac>
   12f38:	mov	r4, r1
   12f3c:	mov	r8, sp
   12f40:	mov	r7, #1
   12f44:	mov	r0, r4
   12f48:	mvn	r1, #0
   12f4c:	mov	r2, r8
   12f50:	bl	10c04 <utf8proc_iterate@plt>
   12f54:	cmp	r0, #1
   12f58:	blt	12f9c <error@@Base+0x7b4>
   12f5c:	ldr	r5, [sp]
   12f60:	mov	r6, r0
   12f64:	mov	r0, #1
   12f68:	mov	r1, #16
   12f6c:	bl	12354 <__assert_fail@plt+0x163c>
   12f70:	str	r5, [r0, #12]
   12f74:	mov	r1, r0
   12f78:	strb	r9, [r0, #8]
   12f7c:	mov	r0, sl
   12f80:	bl	110a4 <__assert_fail@plt+0x38c>
   12f84:	ldrb	r0, [r4, r6]!
   12f88:	cmp	r0, #0
   12f8c:	bne	12f44 <error@@Base+0x75c>
   12f90:	b	12fa0 <error@@Base+0x7b8>
   12f94:	mov	r7, #1
   12f98:	b	12fa0 <error@@Base+0x7b8>
   12f9c:	mov	r7, #0
   12fa0:	mov	r0, r7
   12fa4:	sub	sp, fp, #28
   12fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12fb0:	mov	r7, r0
   12fb4:	ldr	r6, [pc, #72]	; 13004 <error@@Base+0x81c>
   12fb8:	ldr	r5, [pc, #72]	; 13008 <error@@Base+0x820>
   12fbc:	add	r6, pc, r6
   12fc0:	add	r5, pc, r5
   12fc4:	sub	r6, r6, r5
   12fc8:	mov	r8, r1
   12fcc:	mov	r9, r2
   12fd0:	bl	10b3c <calloc@plt-0x20>
   12fd4:	asrs	r6, r6, #2
   12fd8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12fdc:	mov	r4, #0
   12fe0:	add	r4, r4, #1
   12fe4:	ldr	r3, [r5], #4
   12fe8:	mov	r2, r9
   12fec:	mov	r1, r8
   12ff0:	mov	r0, r7
   12ff4:	blx	r3
   12ff8:	cmp	r6, r4
   12ffc:	bne	12fe0 <error@@Base+0x7f8>
   13000:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13004:	andeq	r3, r1, r8, lsr lr
   13008:	andeq	r3, r1, r0, lsr lr
   1300c:	bx	lr
   13010:	mov	r2, r1
   13014:	mov	r1, r0
   13018:	mov	r0, #3
   1301c:	b	10bec <__xstat@plt>

Disassembly of section .fini:

00013020 <.fini>:
   13020:	push	{r3, lr}
   13024:	pop	{r3, pc}
