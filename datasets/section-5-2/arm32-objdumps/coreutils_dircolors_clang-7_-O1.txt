
../repos/coreutils/src/dircolors:     file format elf32-littlearm


Disassembly of section .init:

00010ec0 <.init>:
   10ec0:	push	{r3, lr}
   10ec4:	bl	11180 <close@plt+0x48>
   10ec8:	pop	{r3, pc}

Disassembly of section .plt:

00010ecc <calloc@plt-0x14>:
   10ecc:	push	{lr}		; (str lr, [sp, #-4]!)
   10ed0:	ldr	lr, [pc, #4]	; 10edc <calloc@plt-0x4>
   10ed4:	add	lr, pc, lr
   10ed8:	ldr	pc, [lr, #8]!
   10edc:	andeq	r7, r1, r4, lsr #2

00010ee0 <calloc@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #94208	; 0x17000
   10ee8:	ldr	pc, [ip, #292]!	; 0x124

00010eec <fputs_unlocked@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #94208	; 0x17000
   10ef4:	ldr	pc, [ip, #284]!	; 0x11c

00010ef8 <strcmp@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #94208	; 0x17000
   10f00:	ldr	pc, [ip, #276]!	; 0x114

00010f04 <fflush@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #94208	; 0x17000
   10f0c:	ldr	pc, [ip, #268]!	; 0x10c

00010f10 <free@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #94208	; 0x17000
   10f18:	ldr	pc, [ip, #260]!	; 0x104

00010f1c <_exit@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #94208	; 0x17000
   10f24:	ldr	pc, [ip, #252]!	; 0xfc

00010f28 <memcpy@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #94208	; 0x17000
   10f30:	ldr	pc, [ip, #244]!	; 0xf4

00010f34 <mbsinit@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #94208	; 0x17000
   10f3c:	ldr	pc, [ip, #236]!	; 0xec

00010f40 <fwrite_unlocked@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #94208	; 0x17000
   10f48:	ldr	pc, [ip, #228]!	; 0xe4

00010f4c <memcmp@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #94208	; 0x17000
   10f54:	ldr	pc, [ip, #220]!	; 0xdc

00010f58 <dcgettext@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #94208	; 0x17000
   10f60:	ldr	pc, [ip, #212]!	; 0xd4

00010f64 <dup2@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #94208	; 0x17000
   10f6c:	ldr	pc, [ip, #204]!	; 0xcc

00010f70 <realloc@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #94208	; 0x17000
   10f78:	ldr	pc, [ip, #196]!	; 0xc4

00010f7c <textdomain@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #94208	; 0x17000
   10f84:	ldr	pc, [ip, #188]!	; 0xbc

00010f88 <iswprint@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #94208	; 0x17000
   10f90:	ldr	pc, [ip, #180]!	; 0xb4

00010f94 <fwrite@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #94208	; 0x17000
   10f9c:	ldr	pc, [ip, #172]!	; 0xac

00010fa0 <lseek64@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #94208	; 0x17000
   10fa8:	ldr	pc, [ip, #164]!	; 0xa4

00010fac <__ctype_get_mb_cur_max@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #94208	; 0x17000
   10fb4:	ldr	pc, [ip, #156]!	; 0x9c

00010fb8 <__fpending@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #94208	; 0x17000
   10fc0:	ldr	pc, [ip, #148]!	; 0x94

00010fc4 <ferror_unlocked@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #94208	; 0x17000
   10fcc:	ldr	pc, [ip, #140]!	; 0x8c

00010fd0 <mbrtowc@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #94208	; 0x17000
   10fd8:	ldr	pc, [ip, #132]!	; 0x84

00010fdc <error@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #94208	; 0x17000
   10fe4:	ldr	pc, [ip, #124]!	; 0x7c

00010fe8 <fnmatch@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #94208	; 0x17000
   10ff0:	ldr	pc, [ip, #116]!	; 0x74

00010ff4 <open64@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #94208	; 0x17000
   10ffc:	ldr	pc, [ip, #108]!	; 0x6c

00011000 <getenv@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #94208	; 0x17000
   11008:	ldr	pc, [ip, #100]!	; 0x64

0001100c <puts@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #94208	; 0x17000
   11014:	ldr	pc, [ip, #92]!	; 0x5c

00011018 <malloc@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #94208	; 0x17000
   11020:	ldr	pc, [ip, #84]!	; 0x54

00011024 <__libc_start_main@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #94208	; 0x17000
   1102c:	ldr	pc, [ip, #76]!	; 0x4c

00011030 <__freading@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #94208	; 0x17000
   11038:	ldr	pc, [ip, #68]!	; 0x44

0001103c <__gmon_start__@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #94208	; 0x17000
   11044:	ldr	pc, [ip, #60]!	; 0x3c

00011048 <freopen64@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #94208	; 0x17000
   11050:	ldr	pc, [ip, #52]!	; 0x34

00011054 <getopt_long@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #94208	; 0x17000
   1105c:	ldr	pc, [ip, #44]!	; 0x2c

00011060 <__ctype_b_loc@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #94208	; 0x17000
   11068:	ldr	pc, [ip, #36]!	; 0x24

0001106c <exit@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #94208	; 0x17000
   11074:	ldr	pc, [ip, #28]!

00011078 <strlen@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #94208	; 0x17000
   11080:	ldr	pc, [ip, #20]!

00011084 <__errno_location@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #94208	; 0x17000
   1108c:	ldr	pc, [ip, #12]!

00011090 <__cxa_atexit@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #94208	; 0x17000
   11098:	ldr	pc, [ip, #4]!

0001109c <memset@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #90112	; 0x16000
   110a4:	ldr	pc, [ip, #4092]!	; 0xffc

000110a8 <__printf_chk@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #90112	; 0x16000
   110b0:	ldr	pc, [ip, #4084]!	; 0xff4

000110b4 <fileno@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #90112	; 0x16000
   110bc:	ldr	pc, [ip, #4076]!	; 0xfec

000110c0 <__fprintf_chk@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #90112	; 0x16000
   110c8:	ldr	pc, [ip, #4068]!	; 0xfe4

000110cc <fclose@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #90112	; 0x16000
   110d4:	ldr	pc, [ip, #4060]!	; 0xfdc

000110d8 <fseeko64@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #90112	; 0x16000
   110e0:	ldr	pc, [ip, #4052]!	; 0xfd4

000110e4 <setlocale@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #90112	; 0x16000
   110ec:	ldr	pc, [ip, #4044]!	; 0xfcc

000110f0 <strrchr@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #90112	; 0x16000
   110f8:	ldr	pc, [ip, #4036]!	; 0xfc4

000110fc <nl_langinfo@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #90112	; 0x16000
   11104:	ldr	pc, [ip, #4028]!	; 0xfbc

00011108 <bindtextdomain@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #90112	; 0x16000
   11110:	ldr	pc, [ip, #4020]!	; 0xfb4

00011114 <getline@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #90112	; 0x16000
   1111c:	ldr	pc, [ip, #4012]!	; 0xfac

00011120 <strncmp@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #90112	; 0x16000
   11128:	ldr	pc, [ip, #4004]!	; 0xfa4

0001112c <abort@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #90112	; 0x16000
   11134:	ldr	pc, [ip, #3996]!	; 0xf9c

00011138 <close@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #90112	; 0x16000
   11140:	ldr	pc, [ip, #3988]!	; 0xf94

Disassembly of section .text:

00011144 <_obstack_begin@@Base-0x153c>:
   11144:	mov	fp, #0
   11148:	mov	lr, #0
   1114c:	pop	{r1}		; (ldr r1, [sp], #4)
   11150:	mov	r2, sp
   11154:	push	{r2}		; (str r2, [sp, #-4]!)
   11158:	push	{r0}		; (str r0, [sp, #-4]!)
   1115c:	ldr	ip, [pc, #16]	; 11174 <close@plt+0x3c>
   11160:	push	{ip}		; (str ip, [sp, #-4]!)
   11164:	ldr	r0, [pc, #12]	; 11178 <close@plt+0x40>
   11168:	ldr	r3, [pc, #12]	; 1117c <close@plt+0x44>
   1116c:	bl	11024 <__libc_start_main@plt>
   11170:	bl	1112c <abort@plt>
   11174:	andeq	r5, r1, r4, lsl #12
   11178:	andeq	r1, r1, r0, asr #9
   1117c:	andeq	r5, r1, r4, lsr #11
   11180:	ldr	r3, [pc, #20]	; 1119c <close@plt+0x64>
   11184:	ldr	r2, [pc, #20]	; 111a0 <close@plt+0x68>
   11188:	add	r3, pc, r3
   1118c:	ldr	r2, [r3, r2]
   11190:	cmp	r2, #0
   11194:	bxeq	lr
   11198:	b	1103c <__gmon_start__@plt>
   1119c:	andeq	r6, r1, r0, ror lr
   111a0:	ldrdeq	r0, [r0], -r8
   111a4:	ldr	r0, [pc, #24]	; 111c4 <close@plt+0x8c>
   111a8:	ldr	r3, [pc, #24]	; 111c8 <close@plt+0x90>
   111ac:	cmp	r3, r0
   111b0:	bxeq	lr
   111b4:	ldr	r3, [pc, #16]	; 111cc <close@plt+0x94>
   111b8:	cmp	r3, #0
   111bc:	bxeq	lr
   111c0:	bx	r3
   111c4:	andeq	r8, r2, r8, lsr r1
   111c8:	andeq	r8, r2, r8, lsr r1
   111cc:	andeq	r0, r0, r0
   111d0:	ldr	r0, [pc, #36]	; 111fc <close@plt+0xc4>
   111d4:	ldr	r1, [pc, #36]	; 11200 <close@plt+0xc8>
   111d8:	sub	r1, r1, r0
   111dc:	asr	r1, r1, #2
   111e0:	add	r1, r1, r1, lsr #31
   111e4:	asrs	r1, r1, #1
   111e8:	bxeq	lr
   111ec:	ldr	r3, [pc, #16]	; 11204 <close@plt+0xcc>
   111f0:	cmp	r3, #0
   111f4:	bxeq	lr
   111f8:	bx	r3
   111fc:	andeq	r8, r2, r8, lsr r1
   11200:	andeq	r8, r2, r8, lsr r1
   11204:	andeq	r0, r0, r0
   11208:	push	{r4, lr}
   1120c:	ldr	r4, [pc, #24]	; 1122c <close@plt+0xf4>
   11210:	ldrb	r3, [r4]
   11214:	cmp	r3, #0
   11218:	popne	{r4, pc}
   1121c:	bl	111a4 <close@plt+0x6c>
   11220:	mov	r3, #1
   11224:	strb	r3, [r4]
   11228:	pop	{r4, pc}
   1122c:	andeq	r8, r2, r8, asr r1
   11230:	b	111d0 <close@plt+0x98>
   11234:	push	{fp, lr}
   11238:	mov	fp, sp
   1123c:	mov	r4, r0
   11240:	cmp	r0, #0
   11244:	bne	112f8 <close@plt+0x1c0>
   11248:	movw	r1, #22099	; 0x5653
   1124c:	movt	r1, #1
   11250:	mov	r0, #0
   11254:	mov	r2, #5
   11258:	bl	10f58 <dcgettext@plt>
   1125c:	mov	r1, r0
   11260:	movw	r0, #33168	; 0x8190
   11264:	movt	r0, #2
   11268:	ldr	r2, [r0]
   1126c:	mov	r0, #1
   11270:	bl	110a8 <__printf_chk@plt>
   11274:	movw	r1, #22129	; 0x5671
   11278:	movt	r1, #1
   1127c:	mov	r0, #0
   11280:	mov	r2, #5
   11284:	bl	10f58 <dcgettext@plt>
   11288:	movw	r5, #33108	; 0x8154
   1128c:	movt	r5, #2
   11290:	ldr	r1, [r5]
   11294:	bl	10eec <fputs_unlocked@plt>
   11298:	movw	r1, #22403	; 0x5783
   1129c:	movt	r1, #1
   112a0:	mov	r0, #0
   112a4:	mov	r2, #5
   112a8:	bl	10f58 <dcgettext@plt>
   112ac:	ldr	r1, [r5]
   112b0:	bl	10eec <fputs_unlocked@plt>
   112b4:	movw	r1, #22448	; 0x57b0
   112b8:	movt	r1, #1
   112bc:	mov	r0, #0
   112c0:	mov	r2, #5
   112c4:	bl	10f58 <dcgettext@plt>
   112c8:	ldr	r1, [r5]
   112cc:	bl	10eec <fputs_unlocked@plt>
   112d0:	movw	r1, #22502	; 0x57e6
   112d4:	movt	r1, #1
   112d8:	mov	r0, #0
   112dc:	mov	r2, #5
   112e0:	bl	10f58 <dcgettext@plt>
   112e4:	ldr	r1, [r5]
   112e8:	bl	10eec <fputs_unlocked@plt>
   112ec:	bl	1133c <close@plt+0x204>
   112f0:	mov	r0, r4
   112f4:	bl	1106c <exit@plt>
   112f8:	movw	r0, #33096	; 0x8148
   112fc:	movt	r0, #2
   11300:	ldr	r5, [r0]
   11304:	movw	r1, #22060	; 0x562c
   11308:	movt	r1, #1
   1130c:	mov	r0, #0
   11310:	mov	r2, #5
   11314:	bl	10f58 <dcgettext@plt>
   11318:	mov	r2, r0
   1131c:	movw	r0, #33168	; 0x8190
   11320:	movt	r0, #2
   11324:	ldr	r3, [r0]
   11328:	mov	r0, r5
   1132c:	mov	r1, #1
   11330:	bl	110c0 <__fprintf_chk@plt>
   11334:	mov	r0, r4
   11338:	bl	1106c <exit@plt>
   1133c:	push	{r4, r5, fp, lr}
   11340:	add	fp, sp, #8
   11344:	sub	sp, sp, #56	; 0x38
   11348:	movw	r0, #28320	; 0x6ea0
   1134c:	movt	r0, #1
   11350:	add	r1, r0, #32
   11354:	mov	r5, sp
   11358:	mov	r2, #48	; 0x30
   1135c:	vld1.64	{d16-d17}, [r1]
   11360:	add	r1, r5, #32
   11364:	add	r3, r0, #16
   11368:	vld1.64	{d18-d19}, [r0], r2
   1136c:	vld1.64	{d20-d21}, [r3]
   11370:	vldr	d22, [r0]
   11374:	vst1.64	{d16-d17}, [r1]
   11378:	add	r0, r5, #16
   1137c:	vst1.64	{d20-d21}, [r0]
   11380:	mov	r0, r5
   11384:	vst1.64	{d18-d19}, [r0], r2
   11388:	vstr	d22, [r0]
   1138c:	ldr	r1, [sp]
   11390:	cmp	r1, #0
   11394:	beq	113bc <close@plt+0x284>
   11398:	mov	r5, sp
   1139c:	movw	r4, #22724	; 0x58c4
   113a0:	movt	r4, #1
   113a4:	mov	r0, r4
   113a8:	bl	10ef8 <strcmp@plt>
   113ac:	cmp	r0, #0
   113b0:	ldrne	r1, [r5, #8]!
   113b4:	cmpne	r1, #0
   113b8:	bne	113a4 <close@plt+0x26c>
   113bc:	ldr	r4, [r5, #4]
   113c0:	movw	r1, #23180	; 0x5a8c
   113c4:	movt	r1, #1
   113c8:	mov	r0, #0
   113cc:	mov	r2, #5
   113d0:	bl	10f58 <dcgettext@plt>
   113d4:	mov	r1, r0
   113d8:	movw	r2, #22762	; 0x58ea
   113dc:	movt	r2, #1
   113e0:	movw	r3, #23203	; 0x5aa3
   113e4:	movt	r3, #1
   113e8:	mov	r0, #1
   113ec:	bl	110a8 <__printf_chk@plt>
   113f0:	movw	r5, #22724	; 0x58c4
   113f4:	movt	r5, #1
   113f8:	cmp	r4, #0
   113fc:	moveq	r4, r5
   11400:	mov	r0, #5
   11404:	mov	r1, #0
   11408:	bl	110e4 <setlocale@plt>
   1140c:	cmp	r0, #0
   11410:	beq	11450 <close@plt+0x318>
   11414:	movw	r1, #23243	; 0x5acb
   11418:	movt	r1, #1
   1141c:	mov	r2, #3
   11420:	bl	11120 <strncmp@plt>
   11424:	cmp	r0, #0
   11428:	beq	11450 <close@plt+0x318>
   1142c:	movw	r1, #23247	; 0x5acf
   11430:	movt	r1, #1
   11434:	mov	r0, #0
   11438:	mov	r2, #5
   1143c:	bl	10f58 <dcgettext@plt>
   11440:	movw	r1, #33108	; 0x8154
   11444:	movt	r1, #2
   11448:	ldr	r1, [r1]
   1144c:	bl	10eec <fputs_unlocked@plt>
   11450:	movw	r1, #23318	; 0x5b16
   11454:	movt	r1, #1
   11458:	mov	r0, #0
   1145c:	mov	r2, #5
   11460:	bl	10f58 <dcgettext@plt>
   11464:	mov	r1, r0
   11468:	movw	r2, #23203	; 0x5aa3
   1146c:	movt	r2, #1
   11470:	mov	r0, #1
   11474:	mov	r3, r5
   11478:	bl	110a8 <__printf_chk@plt>
   1147c:	movw	r1, #23345	; 0x5b31
   11480:	movt	r1, #1
   11484:	mov	r0, #0
   11488:	mov	r2, #5
   1148c:	bl	10f58 <dcgettext@plt>
   11490:	mov	r1, r0
   11494:	movw	r0, #23113	; 0x5a49
   11498:	movt	r0, #1
   1149c:	movw	r3, #23395	; 0x5b63
   114a0:	movt	r3, #1
   114a4:	cmp	r4, r5
   114a8:	moveq	r3, r0
   114ac:	mov	r0, #1
   114b0:	mov	r2, r4
   114b4:	bl	110a8 <__printf_chk@plt>
   114b8:	sub	sp, fp, #8
   114bc:	pop	{r4, r5, fp, pc}
   114c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114c4:	add	fp, sp, #28
   114c8:	sub	sp, sp, #12
   114cc:	mov	r6, r1
   114d0:	mov	sl, r0
   114d4:	ldr	r0, [r1]
   114d8:	bl	129ec <_obstack_memory_used@@Base+0x78>
   114dc:	movw	r1, #23395	; 0x5b63
   114e0:	movt	r1, #1
   114e4:	mov	r0, #6
   114e8:	bl	110e4 <setlocale@plt>
   114ec:	movw	r4, #22766	; 0x58ee
   114f0:	movt	r4, #1
   114f4:	movw	r1, #22734	; 0x58ce
   114f8:	movt	r1, #1
   114fc:	mov	r0, r4
   11500:	bl	11108 <bindtextdomain@plt>
   11504:	mov	r0, r4
   11508:	bl	10f7c <textdomain@plt>
   1150c:	movw	r0, #8684	; 0x21ec
   11510:	movt	r0, #1
   11514:	bl	15608 <_obstack_memory_used@@Base+0x2c94>
   11518:	mov	r4, #2
   1151c:	mov	r7, #0
   11520:	movw	r8, #22758	; 0x58e6
   11524:	movt	r8, #1
   11528:	movw	r9, #23880	; 0x5d48
   1152c:	movt	r9, #1
   11530:	b	1153c <close@plt+0x404>
   11534:	mov	r7, #1
   11538:	mov	r4, r5
   1153c:	mov	r5, r4
   11540:	mov	r4, #0
   11544:	str	r4, [sp]
   11548:	mov	r0, sl
   1154c:	mov	r1, r6
   11550:	mov	r2, r8
   11554:	mov	r3, r9
   11558:	bl	11054 <getopt_long@plt>
   1155c:	cmp	r0, #97	; 0x61
   11560:	ble	11584 <close@plt+0x44c>
   11564:	cmp	r0, #98	; 0x62
   11568:	beq	1153c <close@plt+0x404>
   1156c:	cmp	r0, #112	; 0x70
   11570:	beq	11534 <close@plt+0x3fc>
   11574:	cmp	r0, #99	; 0x63
   11578:	bne	11830 <close@plt+0x6f8>
   1157c:	mov	r4, #1
   11580:	b	1153c <close@plt+0x404>
   11584:	cmn	r0, #1
   11588:	bne	11730 <close@plt+0x5f8>
   1158c:	mvn	r0, r7
   11590:	sub	r1, r5, #2
   11594:	clz	r1, r1
   11598:	lsr	r1, r1, #5
   1159c:	orr	r0, r0, r1
   115a0:	tst	r0, #1
   115a4:	beq	11790 <close@plt+0x658>
   115a8:	movw	r0, #33088	; 0x8140
   115ac:	movt	r0, #2
   115b0:	ldr	r0, [r0]
   115b4:	add	r8, r6, r0, lsl #2
   115b8:	sub	r6, sl, r0
   115bc:	mov	r0, #1
   115c0:	bic	r4, r0, r7
   115c4:	cmp	r6, r4
   115c8:	bgt	117bc <close@plt+0x684>
   115cc:	tst	r7, #1
   115d0:	beq	1160c <close@plt+0x4d4>
   115d4:	movw	r5, #24008	; 0x5dc8
   115d8:	movt	r5, #1
   115dc:	movw	r6, #4310	; 0x10d6
   115e0:	mov	r4, r5
   115e4:	mov	r0, r4
   115e8:	bl	1100c <puts@plt>
   115ec:	mov	r0, r4
   115f0:	bl	11078 <strlen@plt>
   115f4:	add	r0, r4, r0
   115f8:	add	r4, r0, #1
   115fc:	sub	r0, r4, r5
   11600:	cmp	r0, r6
   11604:	bcc	115e4 <close@plt+0x4ac>
   11608:	b	11724 <close@plt+0x5ec>
   1160c:	cmp	r5, #2
   11610:	bne	11624 <close@plt+0x4ec>
   11614:	bl	1185c <close@plt+0x724>
   11618:	mov	r5, r0
   1161c:	cmp	r0, #2
   11620:	beq	11838 <close@plt+0x700>
   11624:	movw	r0, #9180	; 0x23dc
   11628:	movt	r0, #1
   1162c:	str	r0, [sp]
   11630:	movw	r4, #33116	; 0x815c
   11634:	movt	r4, #2
   11638:	movw	r3, #20292	; 0x4f44
   1163c:	movt	r3, #1
   11640:	mov	r0, r4
   11644:	mov	r1, #0
   11648:	mov	r2, #0
   1164c:	bl	12680 <_obstack_begin@@Base>
   11650:	cmp	r6, #0
   11654:	beq	11664 <close@plt+0x52c>
   11658:	ldr	r0, [r8]
   1165c:	bl	11d44 <close@plt+0xc0c>
   11660:	b	11670 <close@plt+0x538>
   11664:	mov	r0, #0
   11668:	mov	r1, #0
   1166c:	bl	118cc <close@plt+0x794>
   11670:	mov	r1, r0
   11674:	mov	r0, #1
   11678:	cmp	r1, #0
   1167c:	beq	11728 <close@plt+0x5f0>
   11680:	ldr	r6, [r4, #8]
   11684:	ldr	r0, [r4, #12]
   11688:	subs	r7, r0, r6
   1168c:	ldrbeq	r0, [r4, #40]	; 0x28
   11690:	orreq	r0, r0, #2
   11694:	strbeq	r0, [r4, #40]	; 0x28
   11698:	ldr	r0, [r4, #4]
   1169c:	ldr	r1, [r4, #12]
   116a0:	ldr	r2, [r4, #16]
   116a4:	ldr	r3, [r4, #24]
   116a8:	add	r1, r3, r1
   116ac:	bic	r1, r1, r3
   116b0:	sub	r3, r1, r0
   116b4:	sub	r0, r2, r0
   116b8:	cmp	r3, r0
   116bc:	movhi	r1, r2
   116c0:	str	r1, [r4, #8]
   116c4:	str	r1, [r4, #12]
   116c8:	movw	r1, #23033	; 0x59f9
   116cc:	movt	r1, #1
   116d0:	movw	r0, #23066	; 0x5a1a
   116d4:	movt	r0, #1
   116d8:	cmp	r5, #0
   116dc:	moveq	r0, r1
   116e0:	movw	r4, #33108	; 0x8154
   116e4:	movt	r4, #2
   116e8:	ldr	r1, [r4]
   116ec:	bl	10eec <fputs_unlocked@plt>
   116f0:	ldr	r3, [r4]
   116f4:	mov	r0, r6
   116f8:	mov	r1, #1
   116fc:	mov	r2, r7
   11700:	bl	10f40 <fwrite_unlocked@plt>
   11704:	movw	r1, #23045	; 0x5a05
   11708:	movt	r1, #1
   1170c:	movw	r0, #23393	; 0x5b61
   11710:	movt	r0, #1
   11714:	cmp	r5, #0
   11718:	moveq	r0, r1
   1171c:	ldr	r1, [r4]
   11720:	bl	10eec <fputs_unlocked@plt>
   11724:	mov	r0, #0
   11728:	sub	sp, fp, #28
   1172c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11730:	cmn	r0, #3
   11734:	bne	11780 <close@plt+0x648>
   11738:	movw	r0, #33000	; 0x80e8
   1173c:	movt	r0, #2
   11740:	ldr	r3, [r0]
   11744:	movw	r0, #33108	; 0x8154
   11748:	movt	r0, #2
   1174c:	ldr	r0, [r0]
   11750:	mov	r1, #0
   11754:	movw	r2, #22776	; 0x58f8
   11758:	movt	r2, #1
   1175c:	str	r2, [sp]
   11760:	str	r1, [sp, #4]
   11764:	movw	r1, #22724	; 0x58c4
   11768:	movt	r1, #1
   1176c:	movw	r2, #22762	; 0x58ea
   11770:	movt	r2, #1
   11774:	bl	149f4 <_obstack_memory_used@@Base+0x2080>
   11778:	mov	r0, #0
   1177c:	bl	1106c <exit@plt>
   11780:	cmn	r0, #2
   11784:	bne	11830 <close@plt+0x6f8>
   11788:	mov	r0, #0
   1178c:	bl	11234 <close@plt+0xfc>
   11790:	movw	r1, #22791	; 0x5907
   11794:	movt	r1, #1
   11798:	mov	r0, #0
   1179c:	mov	r2, #5
   117a0:	bl	10f58 <dcgettext@plt>
   117a4:	mov	r2, r0
   117a8:	mov	r0, #0
   117ac:	mov	r1, #0
   117b0:	bl	10fdc <error@plt>
   117b4:	mov	r0, #1
   117b8:	bl	11234 <close@plt+0xfc>
   117bc:	movw	r1, #22894	; 0x596e
   117c0:	movt	r1, #1
   117c4:	mov	r0, #0
   117c8:	mov	r2, #5
   117cc:	bl	10f58 <dcgettext@plt>
   117d0:	mov	r5, r0
   117d4:	ldr	r0, [r8, r4, lsl #2]
   117d8:	bl	14224 <_obstack_memory_used@@Base+0x18b0>
   117dc:	mov	r3, r0
   117e0:	mov	r0, #0
   117e4:	mov	r1, #0
   117e8:	mov	r2, r5
   117ec:	bl	10fdc <error@plt>
   117f0:	tst	r7, #1
   117f4:	beq	11830 <close@plt+0x6f8>
   117f8:	movw	r0, #33096	; 0x8148
   117fc:	movt	r0, #2
   11800:	ldr	r4, [r0]
   11804:	movw	r1, #22911	; 0x597f
   11808:	movt	r1, #1
   1180c:	mov	r0, #0
   11810:	mov	r2, #5
   11814:	bl	10f58 <dcgettext@plt>
   11818:	mov	r3, r0
   1181c:	movw	r2, #28992	; 0x7140
   11820:	movt	r2, #1
   11824:	mov	r0, r4
   11828:	mov	r1, #1
   1182c:	bl	110c0 <__fprintf_chk@plt>
   11830:	mov	r0, #1
   11834:	bl	11234 <close@plt+0xfc>
   11838:	movw	r1, #22971	; 0x59bb
   1183c:	movt	r1, #1
   11840:	mov	r0, #0
   11844:	mov	r2, #5
   11848:	bl	10f58 <dcgettext@plt>
   1184c:	mov	r2, r0
   11850:	mov	r0, #1
   11854:	mov	r1, #0
   11858:	bl	10fdc <error@plt>
   1185c:	push	{r4, sl, fp, lr}
   11860:	add	fp, sp, #8
   11864:	movw	r0, #23445	; 0x5b95
   11868:	movt	r0, #1
   1186c:	bl	11000 <getenv@plt>
   11870:	mov	r1, r0
   11874:	mov	r0, #2
   11878:	cmp	r1, #0
   1187c:	ldrbne	r2, [r1]
   11880:	cmpne	r2, #0
   11884:	bne	1188c <close@plt+0x754>
   11888:	pop	{r4, sl, fp, pc}
   1188c:	mov	r0, r1
   11890:	bl	120ec <close@plt+0xfb4>
   11894:	mov	r4, r0
   11898:	movw	r1, #23452	; 0x5b9c
   1189c:	movt	r1, #1
   118a0:	bl	10ef8 <strcmp@plt>
   118a4:	cmp	r0, #0
   118a8:	moveq	r0, #1
   118ac:	popeq	{r4, sl, fp, pc}
   118b0:	movw	r1, #23451	; 0x5b9b
   118b4:	movt	r1, #1
   118b8:	mov	r0, r4
   118bc:	bl	10ef8 <strcmp@plt>
   118c0:	clz	r0, r0
   118c4:	lsr	r0, r0, #5
   118c8:	pop	{r4, sl, fp, pc}
   118cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118d0:	add	fp, sp, #28
   118d4:	sub	sp, sp, #44	; 0x2c
   118d8:	str	r1, [sp, #12]
   118dc:	mov	r7, r0
   118e0:	mov	r0, #0
   118e4:	str	r0, [fp, #-32]	; 0xffffffe0
   118e8:	str	r0, [sp, #36]	; 0x24
   118ec:	movw	r0, #23456	; 0x5ba0
   118f0:	movt	r0, #1
   118f4:	bl	11000 <getenv@plt>
   118f8:	cmp	r0, #0
   118fc:	ldrbne	r1, [r0]
   11900:	cmpne	r1, #0
   11904:	bne	11910 <close@plt+0x7d8>
   11908:	movw	r0, #23461	; 0x5ba5
   1190c:	movt	r0, #1
   11910:	str	r0, [sp, #8]
   11914:	mov	sl, #0
   11918:	movw	r4, #24008	; 0x5dc8
   1191c:	movt	r4, #1
   11920:	mov	r0, #1
   11924:	str	r0, [sp, #16]
   11928:	mov	r0, #3
   1192c:	str	r0, [sp, #24]
   11930:	movw	r0, #4310	; 0x10d6
   11934:	add	r0, r4, r0
   11938:	str	r0, [sp, #20]
   1193c:	add	r6, sp, #32
   11940:	b	11954 <close@plt+0x81c>
   11944:	mov	r0, r8
   11948:	bl	123dc <close@plt+0x12a4>
   1194c:	mov	r0, r9
   11950:	bl	123dc <close@plt+0x12a4>
   11954:	cmp	r7, #0
   11958:	beq	11980 <close@plt+0x848>
   1195c:	sub	r0, fp, #32
   11960:	add	r1, sp, #36	; 0x24
   11964:	mov	r2, r7
   11968:	bl	11114 <getline@plt>
   1196c:	mov	r1, r0
   11970:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11974:	cmp	r1, #0
   11978:	bgt	119a4 <close@plt+0x86c>
   1197c:	b	11d30 <close@plt+0xbf8>
   11980:	ldr	r0, [sp, #20]
   11984:	cmp	r4, r0
   11988:	beq	11d34 <close@plt+0xbfc>
   1198c:	mov	r0, r4
   11990:	bl	11078 <strlen@plt>
   11994:	add	r0, r4, r0
   11998:	add	r1, r0, #1
   1199c:	mov	r0, r4
   119a0:	mov	r4, r1
   119a4:	add	sl, sl, #1
   119a8:	mov	r1, r6
   119ac:	add	r2, sp, #28
   119b0:	bl	11dec <close@plt+0xcb4>
   119b4:	ldr	r8, [sp, #32]
   119b8:	cmp	r8, #0
   119bc:	beq	11954 <close@plt+0x81c>
   119c0:	ldr	r9, [sp, #28]
   119c4:	cmp	r9, #0
   119c8:	beq	11a54 <close@plt+0x91c>
   119cc:	mov	r0, r8
   119d0:	movw	r1, #23456	; 0x5ba0
   119d4:	movt	r1, #1
   119d8:	bl	12170 <close@plt+0x1038>
   119dc:	cmp	r0, #0
   119e0:	beq	11ab0 <close@plt+0x978>
   119e4:	ldr	r0, [sp, #24]
   119e8:	cmp	r0, #2
   119ec:	movweq	r0, #1
   119f0:	cmp	r0, #0
   119f4:	beq	11ae4 <close@plt+0x9ac>
   119f8:	str	r0, [sp, #24]
   119fc:	ldrb	r0, [r8]
   11a00:	cmp	r0, #42	; 0x2a
   11a04:	beq	11afc <close@plt+0x9c4>
   11a08:	cmp	r0, #46	; 0x2e
   11a0c:	bne	11b78 <close@plt+0xa40>
   11a10:	movw	r5, #33116	; 0x815c
   11a14:	movt	r5, #2
   11a18:	ldr	r0, [r5, #12]
   11a1c:	ldr	r1, [r5, #16]
   11a20:	cmp	r1, r0
   11a24:	bne	11a34 <close@plt+0x8fc>
   11a28:	mov	r0, r5
   11a2c:	mov	r1, #1
   11a30:	bl	12768 <_obstack_newchunk@@Base>
   11a34:	ldr	r0, [r5, #12]
   11a38:	add	r1, r0, #1
   11a3c:	str	r1, [r5, #12]
   11a40:	mov	r1, #42	; 0x2a
   11a44:	strb	r1, [r0]
   11a48:	mov	r0, r8
   11a4c:	bl	11ef8 <close@plt+0xdc0>
   11a50:	b	11b0c <close@plt+0x9d4>
   11a54:	mov	r0, #0
   11a58:	str	r0, [sp, #16]
   11a5c:	mov	r0, #0
   11a60:	movw	r1, #23466	; 0x5baa
   11a64:	movt	r1, #1
   11a68:	mov	r2, #5
   11a6c:	bl	10f58 <dcgettext@plt>
   11a70:	mov	r5, r6
   11a74:	mov	r6, r0
   11a78:	mov	r0, #0
   11a7c:	mov	r1, #3
   11a80:	ldr	r2, [sp, #12]
   11a84:	bl	140e4 <_obstack_memory_used@@Base+0x1770>
   11a88:	mov	r3, r0
   11a8c:	str	sl, [sp]
   11a90:	mov	r0, #0
   11a94:	mov	r1, #0
   11a98:	mov	r2, r6
   11a9c:	mov	r6, r5
   11aa0:	bl	10fdc <error@plt>
   11aa4:	mov	r0, r8
   11aa8:	bl	123dc <close@plt+0x12a4>
   11aac:	b	11954 <close@plt+0x81c>
   11ab0:	mov	r0, r9
   11ab4:	ldr	r1, [sp, #8]
   11ab8:	mov	r2, #0
   11abc:	bl	10fe8 <fnmatch@plt>
   11ac0:	cmp	r0, #0
   11ac4:	beq	11af0 <close@plt+0x9b8>
   11ac8:	ldr	r0, [sp, #24]
   11acc:	sub	r0, r0, #2
   11ad0:	clz	r0, r0
   11ad4:	lsr	r0, r0, #5
   11ad8:	lsl	r0, r0, #1
   11adc:	str	r0, [sp, #24]
   11ae0:	b	11944 <close@plt+0x80c>
   11ae4:	mov	r0, #0
   11ae8:	str	r0, [sp, #24]
   11aec:	b	11944 <close@plt+0x80c>
   11af0:	mov	r0, #2
   11af4:	str	r0, [sp, #24]
   11af8:	b	11944 <close@plt+0x80c>
   11afc:	mov	r0, r8
   11b00:	bl	11ef8 <close@plt+0xdc0>
   11b04:	movw	r5, #33116	; 0x815c
   11b08:	movt	r5, #2
   11b0c:	ldr	r0, [r5, #12]
   11b10:	ldr	r1, [r5, #16]
   11b14:	cmp	r1, r0
   11b18:	bne	11b28 <close@plt+0x9f0>
   11b1c:	mov	r0, r5
   11b20:	mov	r1, #1
   11b24:	bl	12768 <_obstack_newchunk@@Base>
   11b28:	ldr	r0, [r5, #12]
   11b2c:	add	r1, r0, #1
   11b30:	str	r1, [r5, #12]
   11b34:	mov	r1, #61	; 0x3d
   11b38:	strb	r1, [r0]
   11b3c:	mov	r0, r9
   11b40:	bl	11ef8 <close@plt+0xdc0>
   11b44:	ldr	r0, [r5, #12]
   11b48:	ldr	r1, [r5, #16]
   11b4c:	cmp	r1, r0
   11b50:	bne	11b60 <close@plt+0xa28>
   11b54:	mov	r0, r5
   11b58:	mov	r1, #1
   11b5c:	bl	12768 <_obstack_newchunk@@Base>
   11b60:	ldr	r0, [r5, #12]
   11b64:	add	r1, r0, #1
   11b68:	str	r1, [r5, #12]
   11b6c:	mov	r1, #58	; 0x3a
   11b70:	strb	r1, [r0]
   11b74:	b	11944 <close@plt+0x80c>
   11b78:	mov	r0, r8
   11b7c:	movw	r1, #23510	; 0x5bd6
   11b80:	movt	r1, #1
   11b84:	bl	12170 <close@plt+0x1038>
   11b88:	cmp	r0, #0
   11b8c:	beq	11944 <close@plt+0x80c>
   11b90:	mov	r0, r8
   11b94:	movw	r1, #23518	; 0x5bde
   11b98:	movt	r1, #1
   11b9c:	bl	12170 <close@plt+0x1038>
   11ba0:	cmp	r0, #0
   11ba4:	beq	11944 <close@plt+0x80c>
   11ba8:	mov	r0, r8
   11bac:	movw	r1, #23524	; 0x5be4
   11bb0:	movt	r1, #1
   11bb4:	bl	12170 <close@plt+0x1038>
   11bb8:	cmp	r0, #0
   11bbc:	beq	11944 <close@plt+0x80c>
   11bc0:	mov	r6, #0
   11bc4:	movw	r0, #28376	; 0x6ed8
   11bc8:	movt	r0, #1
   11bcc:	ldr	r1, [r0, r6, lsl #2]
   11bd0:	mov	r0, r8
   11bd4:	bl	12170 <close@plt+0x1038>
   11bd8:	cmp	r0, #0
   11bdc:	beq	11c34 <close@plt+0xafc>
   11be0:	add	r6, r6, #1
   11be4:	cmp	r6, #37	; 0x25
   11be8:	bne	11bc4 <close@plt+0xa8c>
   11bec:	ldr	r0, [sp, #24]
   11bf0:	sub	r0, r0, #1
   11bf4:	cmp	r0, #1
   11bf8:	add	r6, sp, #32
   11bfc:	bhi	11944 <close@plt+0x80c>
   11c00:	mov	r0, #0
   11c04:	movw	r1, #23533	; 0x5bed
   11c08:	movt	r1, #1
   11c0c:	mov	r2, #5
   11c10:	bl	10f58 <dcgettext@plt>
   11c14:	mov	r5, r0
   11c18:	ldr	r2, [sp, #12]
   11c1c:	mov	r0, #0
   11c20:	cmp	r2, #0
   11c24:	beq	11cf8 <close@plt+0xbc0>
   11c28:	mov	r1, #3
   11c2c:	bl	140e4 <_obstack_memory_used@@Base+0x1770>
   11c30:	b	11d08 <close@plt+0xbd0>
   11c34:	movw	r5, #33116	; 0x815c
   11c38:	movt	r5, #2
   11c3c:	ldr	r0, [r5, #12]
   11c40:	ldr	r1, [r5, #16]
   11c44:	cmp	r1, r0
   11c48:	bne	11c58 <close@plt+0xb20>
   11c4c:	mov	r0, r5
   11c50:	mov	r1, #1
   11c54:	bl	12768 <_obstack_newchunk@@Base>
   11c58:	movw	r0, #28528	; 0x6f70
   11c5c:	movt	r0, #1
   11c60:	ldr	r6, [r0, r6, lsl #2]
   11c64:	ldrb	r0, [r6]
   11c68:	ldr	r1, [r5, #12]
   11c6c:	add	r2, r1, #1
   11c70:	str	r2, [r5, #12]
   11c74:	strb	r0, [r1]
   11c78:	ldr	r0, [r5, #12]
   11c7c:	ldr	r1, [r5, #16]
   11c80:	cmp	r1, r0
   11c84:	bne	11c94 <close@plt+0xb5c>
   11c88:	mov	r0, r5
   11c8c:	mov	r1, #1
   11c90:	bl	12768 <_obstack_newchunk@@Base>
   11c94:	ldrb	r0, [r6, #1]
   11c98:	ldr	r1, [r5, #12]
   11c9c:	add	r2, r1, #1
   11ca0:	str	r2, [r5, #12]
   11ca4:	strb	r0, [r1]
   11ca8:	ldr	r0, [r5, #12]
   11cac:	ldr	r1, [r5, #16]
   11cb0:	cmp	r1, r0
   11cb4:	bne	11cc4 <close@plt+0xb8c>
   11cb8:	mov	r0, r5
   11cbc:	mov	r1, #1
   11cc0:	bl	12768 <_obstack_newchunk@@Base>
   11cc4:	ldr	r0, [r5, #12]
   11cc8:	add	r1, r0, #1
   11ccc:	str	r1, [r5, #12]
   11cd0:	mov	r1, #61	; 0x3d
   11cd4:	strb	r1, [r0]
   11cd8:	mov	r0, r9
   11cdc:	bl	11ef8 <close@plt+0xdc0>
   11ce0:	ldr	r0, [r5, #12]
   11ce4:	ldr	r1, [r5, #16]
   11ce8:	cmp	r1, r0
   11cec:	add	r6, sp, #32
   11cf0:	beq	11b54 <close@plt+0xa1c>
   11cf4:	b	11b60 <close@plt+0xa28>
   11cf8:	movw	r1, #23565	; 0x5c0d
   11cfc:	movt	r1, #1
   11d00:	mov	r2, #5
   11d04:	bl	10f58 <dcgettext@plt>
   11d08:	mov	r3, r0
   11d0c:	str	sl, [sp]
   11d10:	str	r8, [sp, #4]
   11d14:	mov	r0, #0
   11d18:	str	r0, [sp, #16]
   11d1c:	mov	r0, #0
   11d20:	mov	r1, #0
   11d24:	mov	r2, r5
   11d28:	bl	10fdc <error@plt>
   11d2c:	b	11944 <close@plt+0x80c>
   11d30:	bl	123dc <close@plt+0x12a4>
   11d34:	ldr	r0, [sp, #16]
   11d38:	and	r0, r0, #1
   11d3c:	sub	sp, fp, #28
   11d40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d44:	push	{r4, r5, r6, sl, fp, lr}
   11d48:	add	fp, sp, #16
   11d4c:	mov	r4, r0
   11d50:	movw	r1, #28807	; 0x7087
   11d54:	movt	r1, #1
   11d58:	bl	10ef8 <strcmp@plt>
   11d5c:	cmp	r0, #0
   11d60:	beq	11d88 <close@plt+0xc50>
   11d64:	movw	r0, #33104	; 0x8150
   11d68:	movt	r0, #2
   11d6c:	ldr	r2, [r0]
   11d70:	movw	r1, #28705	; 0x7021
   11d74:	movt	r1, #1
   11d78:	mov	r0, r4
   11d7c:	bl	12404 <close@plt+0x12cc>
   11d80:	cmp	r0, #0
   11d84:	beq	11db0 <close@plt+0xc78>
   11d88:	movw	r6, #33104	; 0x8150
   11d8c:	movt	r6, #2
   11d90:	ldr	r0, [r6]
   11d94:	mov	r1, r4
   11d98:	bl	118cc <close@plt+0x794>
   11d9c:	mov	r5, r0
   11da0:	ldr	r0, [r6]
   11da4:	bl	122d4 <close@plt+0x119c>
   11da8:	cmp	r0, #0
   11dac:	beq	11de4 <close@plt+0xcac>
   11db0:	bl	11084 <__errno_location@plt>
   11db4:	ldr	r6, [r0]
   11db8:	mov	r5, #0
   11dbc:	mov	r0, #0
   11dc0:	mov	r1, #3
   11dc4:	mov	r2, r4
   11dc8:	bl	140e4 <_obstack_memory_used@@Base+0x1770>
   11dcc:	mov	r3, r0
   11dd0:	movw	r2, #28711	; 0x7027
   11dd4:	movt	r2, #1
   11dd8:	mov	r0, #0
   11ddc:	mov	r1, r6
   11de0:	bl	10fdc <error@plt>
   11de4:	mov	r0, r5
   11de8:	pop	{r4, r5, r6, sl, fp, pc}
   11dec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11df0:	add	fp, sp, #24
   11df4:	mov	r8, r2
   11df8:	mov	r5, r1
   11dfc:	mov	r1, #0
   11e00:	str	r1, [r5]
   11e04:	str	r1, [r2]
   11e08:	sub	r7, r0, #1
   11e0c:	bl	11060 <__ctype_b_loc@plt>
   11e10:	mov	r9, r0
   11e14:	ldr	r6, [r0]
   11e18:	ldrb	r0, [r7, #1]!
   11e1c:	bl	120e8 <close@plt+0xfb0>
   11e20:	add	r1, r6, r0, lsl #1
   11e24:	ldrb	r1, [r1, #1]
   11e28:	tst	r1, #32
   11e2c:	bne	11e18 <close@plt+0xce0>
   11e30:	cmp	r0, #0
   11e34:	cmpne	r0, #35	; 0x23
   11e38:	beq	11ea8 <close@plt+0xd70>
   11e3c:	mov	r4, r7
   11e40:	ldrb	r0, [r4], #1
   11e44:	bl	120e8 <close@plt+0xfb0>
   11e48:	cmp	r0, #0
   11e4c:	beq	11e60 <close@plt+0xd28>
   11e50:	add	r0, r6, r0, lsl #1
   11e54:	ldrh	r0, [r0]
   11e58:	ands	r0, r0, #8192	; 0x2000
   11e5c:	beq	11e40 <close@plt+0xd08>
   11e60:	sub	r0, r4, #1
   11e64:	sub	r1, r0, r7
   11e68:	mov	r0, r7
   11e6c:	bl	14e50 <_obstack_memory_used@@Base+0x24dc>
   11e70:	str	r0, [r5]
   11e74:	ldrb	r0, [r4, #-1]
   11e78:	cmp	r0, #0
   11e7c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   11e80:	ldr	r6, [r9]
   11e84:	ldrb	r0, [r4], #1
   11e88:	bl	120e8 <close@plt+0xfb0>
   11e8c:	add	r1, r6, r0, lsl #1
   11e90:	ldrb	r1, [r1, #1]
   11e94:	tst	r1, #32
   11e98:	bne	11e84 <close@plt+0xd4c>
   11e9c:	cmp	r0, #0
   11ea0:	cmpne	r0, #35	; 0x23
   11ea4:	bne	11eac <close@plt+0xd74>
   11ea8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11eac:	sub	r5, r4, #1
   11eb0:	b	11eb8 <close@plt+0xd80>
   11eb4:	add	r4, r4, #1
   11eb8:	ldrb	r0, [r4, #-1]
   11ebc:	cmp	r0, #35	; 0x23
   11ec0:	cmpne	r0, #0
   11ec4:	bne	11eb4 <close@plt+0xd7c>
   11ec8:	ldrb	r0, [r4, #-2]
   11ecc:	bl	120e8 <close@plt+0xfb0>
   11ed0:	add	r0, r6, r0, lsl #1
   11ed4:	ldrb	r0, [r0, #1]
   11ed8:	sub	r4, r4, #1
   11edc:	tst	r0, #32
   11ee0:	bne	11ec8 <close@plt+0xd90>
   11ee4:	sub	r1, r4, r5
   11ee8:	mov	r0, r5
   11eec:	bl	14e50 <_obstack_memory_used@@Base+0x24dc>
   11ef0:	str	r0, [r8]
   11ef4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11ef8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11efc:	add	fp, sp, #24
   11f00:	mov	r4, r0
   11f04:	mov	r0, #1
   11f08:	movw	r5, #33116	; 0x815c
   11f0c:	movt	r5, #2
   11f10:	mov	r8, #39	; 0x27
   11f14:	mov	r7, #92	; 0x5c
   11f18:	b	11f34 <close@plt+0xdfc>
   11f1c:	ldrb	r0, [r4], #1
   11f20:	ldr	r1, [r5, #12]
   11f24:	add	r2, r1, #1
   11f28:	str	r2, [r5, #12]
   11f2c:	strb	r0, [r1]
   11f30:	mov	r0, r6
   11f34:	ldrb	r1, [r4]
   11f38:	sub	r2, r1, #58	; 0x3a
   11f3c:	cmp	r2, #36	; 0x24
   11f40:	bhi	12028 <close@plt+0xef0>
   11f44:	add	r1, pc, #4
   11f48:	mov	r6, #1
   11f4c:	ldr	pc, [r1, r2, lsl #2]
   11f50:	andeq	r1, r1, r4, ror #31
   11f54:	andeq	r2, r1, r8, asr #1
   11f58:	andeq	r2, r1, r8, asr #1
   11f5c:	andeq	r1, r1, r4, ror #31
   11f60:	andeq	r2, r1, r8, asr #1
   11f64:	andeq	r2, r1, r8, asr #1
   11f68:	andeq	r2, r1, r8, asr #1
   11f6c:	andeq	r2, r1, r8, asr #1
   11f70:	andeq	r2, r1, r8, asr #1
   11f74:	andeq	r2, r1, r8, asr #1
   11f78:	andeq	r2, r1, r8, asr #1
   11f7c:	andeq	r2, r1, r8, asr #1
   11f80:	andeq	r2, r1, r8, asr #1
   11f84:	andeq	r2, r1, r8, asr #1
   11f88:	andeq	r2, r1, r8, asr #1
   11f8c:	andeq	r2, r1, r8, asr #1
   11f90:	andeq	r2, r1, r8, asr #1
   11f94:	andeq	r2, r1, r8, asr #1
   11f98:	andeq	r2, r1, r8, asr #1
   11f9c:	andeq	r2, r1, r8, asr #1
   11fa0:	andeq	r2, r1, r8, asr #1
   11fa4:	andeq	r2, r1, r8, asr #1
   11fa8:	andeq	r2, r1, r8, asr #1
   11fac:	andeq	r2, r1, r8, asr #1
   11fb0:	andeq	r2, r1, r8, asr #1
   11fb4:	andeq	r2, r1, r8, asr #1
   11fb8:	andeq	r2, r1, r8, asr #1
   11fbc:	andeq	r2, r1, r8, asr #1
   11fc0:	andeq	r2, r1, r8, asr #1
   11fc4:	andeq	r2, r1, r8, asr #1
   11fc8:	andeq	r2, r1, r8, asr #1
   11fcc:	andeq	r2, r1, r8, asr #1
   11fd0:	andeq	r2, r1, r8, asr #1
   11fd4:	andeq	r2, r1, r8, asr #1
   11fd8:	andeq	r2, r1, r0, lsr #32
   11fdc:	andeq	r2, r1, r8, asr #1
   11fe0:	andeq	r2, r1, r0, lsr #32
   11fe4:	tst	r0, #1
   11fe8:	mov	r6, #1
   11fec:	beq	120c8 <close@plt+0xf90>
   11ff0:	ldr	r0, [r5, #12]
   11ff4:	ldr	r1, [r5, #16]
   11ff8:	cmp	r1, r0
   11ffc:	bne	1200c <close@plt+0xed4>
   12000:	mov	r0, r5
   12004:	mov	r1, #1
   12008:	bl	12768 <_obstack_newchunk@@Base>
   1200c:	ldr	r0, [r5, #12]
   12010:	add	r1, r0, #1
   12014:	str	r1, [r5, #12]
   12018:	strb	r7, [r0]
   1201c:	b	120c4 <close@plt+0xf8c>
   12020:	eor	r6, r0, #1
   12024:	b	120c8 <close@plt+0xf90>
   12028:	cmp	r1, #39	; 0x27
   1202c:	beq	12040 <close@plt+0xf08>
   12030:	cmp	r1, #0
   12034:	mov	r6, #1
   12038:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1203c:	b	120c8 <close@plt+0xf90>
   12040:	ldr	r0, [r5, #12]
   12044:	ldr	r1, [r5, #16]
   12048:	cmp	r1, r0
   1204c:	bne	1205c <close@plt+0xf24>
   12050:	mov	r0, r5
   12054:	mov	r1, #1
   12058:	bl	12768 <_obstack_newchunk@@Base>
   1205c:	ldr	r0, [r5, #12]
   12060:	add	r1, r0, #1
   12064:	str	r1, [r5, #12]
   12068:	strb	r8, [r0]
   1206c:	ldr	r0, [r5, #12]
   12070:	ldr	r1, [r5, #16]
   12074:	cmp	r1, r0
   12078:	bne	12088 <close@plt+0xf50>
   1207c:	mov	r0, r5
   12080:	mov	r1, #1
   12084:	bl	12768 <_obstack_newchunk@@Base>
   12088:	ldr	r0, [r5, #12]
   1208c:	add	r1, r0, #1
   12090:	str	r1, [r5, #12]
   12094:	strb	r7, [r0]
   12098:	ldr	r0, [r5, #12]
   1209c:	ldr	r1, [r5, #16]
   120a0:	cmp	r1, r0
   120a4:	bne	120b4 <close@plt+0xf7c>
   120a8:	mov	r0, r5
   120ac:	mov	r1, #1
   120b0:	bl	12768 <_obstack_newchunk@@Base>
   120b4:	ldr	r0, [r5, #12]
   120b8:	add	r1, r0, #1
   120bc:	str	r1, [r5, #12]
   120c0:	strb	r8, [r0]
   120c4:	mov	r6, #1
   120c8:	ldr	r0, [r5, #12]
   120cc:	ldr	r1, [r5, #16]
   120d0:	cmp	r1, r0
   120d4:	bne	11f1c <close@plt+0xde4>
   120d8:	mov	r0, r5
   120dc:	mov	r1, #1
   120e0:	bl	12768 <_obstack_newchunk@@Base>
   120e4:	b	11f1c <close@plt+0xde4>
   120e8:	bx	lr
   120ec:	sub	r0, r0, #1
   120f0:	ldrb	r3, [r0, #1]!
   120f4:	cmp	r3, #47	; 0x2f
   120f8:	beq	120f0 <close@plt+0xfb8>
   120fc:	mov	r2, #0
   12100:	mov	r1, r0
   12104:	b	12120 <close@plt+0xfe8>
   12108:	cmp	r3, #0
   1210c:	bxeq	lr
   12110:	tst	r2, #1
   12114:	movne	r0, r1
   12118:	mov	r2, #0
   1211c:	ldrb	r3, [r1, #1]!
   12120:	uxtb	r3, r3
   12124:	cmp	r3, #47	; 0x2f
   12128:	bne	12108 <close@plt+0xfd0>
   1212c:	mov	r2, #1
   12130:	ldrb	r3, [r1, #1]!
   12134:	b	12120 <close@plt+0xfe8>
   12138:	push	{r4, sl, fp, lr}
   1213c:	add	fp, sp, #8
   12140:	mov	r4, r0
   12144:	bl	11078 <strlen@plt>
   12148:	mov	r1, r0
   1214c:	sub	r2, r4, #1
   12150:	mov	r0, r1
   12154:	cmp	r1, #2
   12158:	popcc	{r4, sl, fp, pc}
   1215c:	ldrb	r3, [r2, r0]
   12160:	sub	r1, r0, #1
   12164:	cmp	r3, #47	; 0x2f
   12168:	beq	12150 <close@plt+0x1018>
   1216c:	pop	{r4, sl, fp, pc}
   12170:	push	{r4, r5, r6, sl, fp, lr}
   12174:	add	fp, sp, #16
   12178:	cmp	r0, r1
   1217c:	moveq	r0, #0
   12180:	popeq	{r4, r5, r6, sl, fp, pc}
   12184:	mov	r4, r1
   12188:	mov	r5, r0
   1218c:	ldrb	r0, [r5]
   12190:	bl	152cc <_obstack_memory_used@@Base+0x2958>
   12194:	mov	r6, r0
   12198:	ldrb	r0, [r4]
   1219c:	bl	152cc <_obstack_memory_used@@Base+0x2958>
   121a0:	uxtb	r1, r6
   121a4:	cmp	r1, #0
   121a8:	beq	121c0 <close@plt+0x1088>
   121ac:	add	r4, r4, #1
   121b0:	add	r5, r5, #1
   121b4:	uxtb	r2, r0
   121b8:	cmp	r1, r2
   121bc:	beq	1218c <close@plt+0x1054>
   121c0:	uxtb	r0, r0
   121c4:	sub	r0, r1, r0
   121c8:	pop	{r4, r5, r6, sl, fp, pc}
   121cc:	movw	r1, #33160	; 0x8188
   121d0:	movt	r1, #2
   121d4:	str	r0, [r1]
   121d8:	bx	lr
   121dc:	movw	r1, #33164	; 0x818c
   121e0:	movt	r1, #2
   121e4:	strb	r0, [r1]
   121e8:	bx	lr
   121ec:	push	{r4, r5, r6, sl, fp, lr}
   121f0:	add	fp, sp, #16
   121f4:	sub	sp, sp, #8
   121f8:	movw	r0, #33108	; 0x8154
   121fc:	movt	r0, #2
   12200:	ldr	r0, [r0]
   12204:	bl	152ec <_obstack_memory_used@@Base+0x2978>
   12208:	cmp	r0, #0
   1220c:	beq	12234 <close@plt+0x10fc>
   12210:	movw	r0, #33164	; 0x818c
   12214:	movt	r0, #2
   12218:	ldrb	r0, [r0]
   1221c:	cmp	r0, #0
   12220:	beq	12254 <close@plt+0x111c>
   12224:	bl	11084 <__errno_location@plt>
   12228:	ldr	r0, [r0]
   1222c:	cmp	r0, #32
   12230:	bne	12254 <close@plt+0x111c>
   12234:	movw	r0, #33096	; 0x8148
   12238:	movt	r0, #2
   1223c:	ldr	r0, [r0]
   12240:	bl	152ec <_obstack_memory_used@@Base+0x2978>
   12244:	cmp	r0, #0
   12248:	subeq	sp, fp, #16
   1224c:	popeq	{r4, r5, r6, sl, fp, pc}
   12250:	b	122c4 <close@plt+0x118c>
   12254:	movw	r1, #28695	; 0x7017
   12258:	movt	r1, #1
   1225c:	mov	r0, #0
   12260:	mov	r2, #5
   12264:	bl	10f58 <dcgettext@plt>
   12268:	mov	r4, r0
   1226c:	movw	r0, #33160	; 0x8188
   12270:	movt	r0, #2
   12274:	ldr	r6, [r0]
   12278:	bl	11084 <__errno_location@plt>
   1227c:	ldr	r5, [r0]
   12280:	cmp	r6, #0
   12284:	bne	122a0 <close@plt+0x1168>
   12288:	movw	r2, #28711	; 0x7027
   1228c:	movt	r2, #1
   12290:	mov	r0, #0
   12294:	mov	r1, r5
   12298:	mov	r3, r4
   1229c:	b	122c0 <close@plt+0x1188>
   122a0:	mov	r0, r6
   122a4:	bl	140d4 <_obstack_memory_used@@Base+0x1760>
   122a8:	mov	r3, r0
   122ac:	str	r4, [sp]
   122b0:	movw	r2, #28707	; 0x7023
   122b4:	movt	r2, #1
   122b8:	mov	r0, #0
   122bc:	mov	r1, r5
   122c0:	bl	10fdc <error@plt>
   122c4:	movw	r0, #33004	; 0x80ec
   122c8:	movt	r0, #2
   122cc:	ldr	r0, [r0]
   122d0:	bl	10f1c <_exit@plt>
   122d4:	push	{r4, r5, fp, lr}
   122d8:	add	fp, sp, #8
   122dc:	sub	sp, sp, #8
   122e0:	mov	r4, r0
   122e4:	bl	110b4 <fileno@plt>
   122e8:	cmn	r0, #1
   122ec:	ble	12364 <close@plt+0x122c>
   122f0:	mov	r0, r4
   122f4:	bl	11030 <__freading@plt>
   122f8:	cmp	r0, #0
   122fc:	beq	12328 <close@plt+0x11f0>
   12300:	mov	r0, r4
   12304:	bl	110b4 <fileno@plt>
   12308:	mov	r1, #1
   1230c:	str	r1, [sp]
   12310:	mov	r2, #0
   12314:	mov	r3, #0
   12318:	bl	10fa0 <lseek64@plt>
   1231c:	and	r0, r0, r1
   12320:	cmn	r0, #1
   12324:	beq	12364 <close@plt+0x122c>
   12328:	mov	r0, r4
   1232c:	bl	12374 <close@plt+0x123c>
   12330:	cmp	r0, #0
   12334:	beq	12364 <close@plt+0x122c>
   12338:	bl	11084 <__errno_location@plt>
   1233c:	ldr	r5, [r0]
   12340:	mov	r0, r4
   12344:	bl	110cc <fclose@plt>
   12348:	cmp	r5, #0
   1234c:	beq	1235c <close@plt+0x1224>
   12350:	bl	11084 <__errno_location@plt>
   12354:	str	r5, [r0]
   12358:	mvn	r0, #0
   1235c:	sub	sp, fp, #8
   12360:	pop	{r4, r5, fp, pc}
   12364:	mov	r0, r4
   12368:	sub	sp, fp, #8
   1236c:	pop	{r4, r5, fp, lr}
   12370:	b	110cc <fclose@plt>
   12374:	push	{r4, sl, fp, lr}
   12378:	add	fp, sp, #8
   1237c:	mov	r4, r0
   12380:	cmp	r0, #0
   12384:	beq	1239c <close@plt+0x1264>
   12388:	mov	r0, r4
   1238c:	bl	11030 <__freading@plt>
   12390:	cmp	r0, #0
   12394:	movne	r0, r4
   12398:	blne	123a8 <close@plt+0x1270>
   1239c:	mov	r0, r4
   123a0:	pop	{r4, sl, fp, lr}
   123a4:	b	10f04 <fflush@plt>
   123a8:	ldrb	r1, [r0, #1]
   123ac:	tst	r1, #1
   123b0:	bxeq	lr
   123b4:	push	{fp, lr}
   123b8:	mov	fp, sp
   123bc:	sub	sp, sp, #8
   123c0:	mov	r1, #1
   123c4:	str	r1, [sp]
   123c8:	mov	r2, #0
   123cc:	mov	r3, #0
   123d0:	bl	125dc <close@plt+0x14a4>
   123d4:	mov	sp, fp
   123d8:	pop	{fp, pc}
   123dc:	push	{r4, r5, r6, sl, fp, lr}
   123e0:	add	fp, sp, #16
   123e4:	mov	r4, r0
   123e8:	bl	11084 <__errno_location@plt>
   123ec:	mov	r5, r0
   123f0:	ldr	r6, [r0]
   123f4:	mov	r0, r4
   123f8:	bl	10f10 <free@plt>
   123fc:	str	r6, [r5]
   12400:	pop	{r4, r5, r6, sl, fp, pc}
   12404:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12408:	add	fp, sp, #28
   1240c:	sub	sp, sp, #4
   12410:	mov	r4, r2
   12414:	mov	r8, r1
   12418:	mov	r5, r0
   1241c:	mov	r0, r2
   12420:	bl	110b4 <fileno@plt>
   12424:	mov	r6, #0
   12428:	cmp	r0, #0
   1242c:	beq	1246c <close@plt+0x1334>
   12430:	cmp	r0, #1
   12434:	beq	12478 <close@plt+0x1340>
   12438:	cmp	r0, #2
   1243c:	beq	12454 <close@plt+0x131c>
   12440:	mov	r0, #2
   12444:	mov	r1, #2
   12448:	bl	10f64 <dup2@plt>
   1244c:	subs	r6, r0, #2
   12450:	movwne	r6, #1
   12454:	mov	r0, #1
   12458:	mov	r1, #1
   1245c:	bl	10f64 <dup2@plt>
   12460:	subs	r7, r0, #1
   12464:	movwne	r7, #1
   12468:	b	1247c <close@plt+0x1344>
   1246c:	mov	r7, #0
   12470:	mov	r9, #0
   12474:	b	1252c <close@plt+0x13f4>
   12478:	mov	r7, #0
   1247c:	mov	sl, #0
   12480:	mov	r0, #0
   12484:	mov	r1, #0
   12488:	bl	10f64 <dup2@plt>
   1248c:	cmp	r0, #0
   12490:	mov	r9, #0
   12494:	beq	124ac <close@plt+0x1374>
   12498:	mov	r0, #0
   1249c:	bl	12590 <close@plt+0x1458>
   124a0:	mov	r9, #1
   124a4:	cmp	r0, #0
   124a8:	beq	12508 <close@plt+0x13d0>
   124ac:	cmp	r7, #0
   124b0:	beq	124c8 <close@plt+0x1390>
   124b4:	mov	sl, #1
   124b8:	mov	r0, #1
   124bc:	bl	12590 <close@plt+0x1458>
   124c0:	cmp	r0, #0
   124c4:	beq	12508 <close@plt+0x13d0>
   124c8:	cmp	r6, #0
   124cc:	beq	12524 <close@plt+0x13ec>
   124d0:	mov	r0, #2
   124d4:	bl	12590 <close@plt+0x1458>
   124d8:	mov	r6, #1
   124dc:	cmp	r0, #0
   124e0:	bne	12528 <close@plt+0x13f0>
   124e4:	bl	11084 <__errno_location@plt>
   124e8:	mov	r4, r0
   124ec:	ldr	r8, [r0]
   124f0:	mov	r0, #2
   124f4:	bl	11138 <close@plt>
   124f8:	mov	r5, #0
   124fc:	cmp	sl, #0
   12500:	bne	12564 <close@plt+0x142c>
   12504:	b	1256c <close@plt+0x1434>
   12508:	bl	11084 <__errno_location@plt>
   1250c:	mov	r4, r0
   12510:	ldr	r8, [r0]
   12514:	mov	r5, #0
   12518:	cmp	r6, #0
   1251c:	bne	12554 <close@plt+0x141c>
   12520:	b	1255c <close@plt+0x1424>
   12524:	mov	r6, #0
   12528:	mov	r7, sl
   1252c:	mov	r0, r5
   12530:	mov	r1, r8
   12534:	mov	r2, r4
   12538:	bl	11048 <freopen64@plt>
   1253c:	mov	r5, r0
   12540:	bl	11084 <__errno_location@plt>
   12544:	mov	r4, r0
   12548:	ldr	r8, [r0]
   1254c:	cmp	r6, #0
   12550:	beq	1255c <close@plt+0x1424>
   12554:	mov	r0, #2
   12558:	bl	11138 <close@plt>
   1255c:	cmp	r7, #0
   12560:	beq	1256c <close@plt+0x1434>
   12564:	mov	r0, #1
   12568:	bl	11138 <close@plt>
   1256c:	cmp	r9, #0
   12570:	beq	1257c <close@plt+0x1444>
   12574:	mov	r0, #0
   12578:	bl	11138 <close@plt>
   1257c:	cmp	r5, #0
   12580:	streq	r8, [r4]
   12584:	mov	r0, r5
   12588:	sub	sp, fp, #28
   1258c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12590:	push	{r4, sl, fp, lr}
   12594:	add	fp, sp, #8
   12598:	mov	r4, r0
   1259c:	movw	r0, #28714	; 0x702a
   125a0:	movt	r0, #1
   125a4:	mov	r1, #0
   125a8:	bl	10ff4 <open64@plt>
   125ac:	mov	r1, #1
   125b0:	cmp	r0, r4
   125b4:	beq	125d4 <close@plt+0x149c>
   125b8:	cmp	r0, #0
   125bc:	blt	125d0 <close@plt+0x1498>
   125c0:	bl	11138 <close@plt>
   125c4:	bl	11084 <__errno_location@plt>
   125c8:	mov	r1, #9
   125cc:	str	r1, [r0]
   125d0:	mov	r1, #0
   125d4:	mov	r0, r1
   125d8:	pop	{r4, sl, fp, pc}
   125dc:	push	{r4, r5, r6, r7, fp, lr}
   125e0:	add	fp, sp, #16
   125e4:	sub	sp, sp, #8
   125e8:	mov	r5, r3
   125ec:	mov	r6, r2
   125f0:	mov	r4, r0
   125f4:	ldr	r0, [r0, #4]
   125f8:	ldr	r1, [r4, #8]
   125fc:	cmp	r1, r0
   12600:	bne	1261c <close@plt+0x14e4>
   12604:	ldrd	r0, [r4, #16]
   12608:	cmp	r1, r0
   1260c:	bne	1261c <close@plt+0x14e4>
   12610:	ldr	r0, [r4, #36]	; 0x24
   12614:	cmp	r0, #0
   12618:	beq	12634 <close@plt+0x14fc>
   1261c:	mov	r0, r4
   12620:	mov	r2, r6
   12624:	mov	r3, r5
   12628:	sub	sp, fp, #16
   1262c:	pop	{r4, r5, r6, r7, fp, lr}
   12630:	b	110d8 <fseeko64@plt>
   12634:	ldr	r7, [fp, #8]
   12638:	mov	r0, r4
   1263c:	bl	110b4 <fileno@plt>
   12640:	str	r7, [sp]
   12644:	mov	r2, r6
   12648:	mov	r3, r5
   1264c:	bl	10fa0 <lseek64@plt>
   12650:	and	r2, r0, r1
   12654:	cmn	r2, #1
   12658:	mvneq	r0, #0
   1265c:	subeq	sp, fp, #16
   12660:	popeq	{r4, r5, r6, r7, fp, pc}
   12664:	strd	r0, [r4, #80]	; 0x50
   12668:	ldr	r0, [r4]
   1266c:	bic	r0, r0, #16
   12670:	str	r0, [r4]
   12674:	mov	r0, #0
   12678:	sub	sp, fp, #16
   1267c:	pop	{r4, r5, r6, r7, fp, pc}

00012680 <_obstack_begin@@Base>:
   12680:	push	{fp, lr}
   12684:	mov	fp, sp
   12688:	str	r3, [r0, #28]
   1268c:	ldr	r3, [fp, #8]
   12690:	str	r3, [r0, #32]
   12694:	ldrb	r3, [r0, #40]	; 0x28
   12698:	and	r3, r3, #254	; 0xfe
   1269c:	strb	r3, [r0, #40]	; 0x28
   126a0:	bl	126ac <_obstack_begin@@Base+0x2c>
   126a4:	mov	r0, #1
   126a8:	pop	{fp, pc}
   126ac:	push	{r4, r5, r6, sl, fp, lr}
   126b0:	add	fp, sp, #16
   126b4:	mov	r5, r2
   126b8:	mov	r4, r0
   126bc:	cmp	r1, #0
   126c0:	movweq	r1, #4072	; 0xfe8
   126c4:	str	r1, [r0]
   126c8:	cmp	r2, #0
   126cc:	movweq	r5, #8
   126d0:	sub	r6, r5, #1
   126d4:	str	r6, [r0, #24]
   126d8:	bl	12880 <_obstack_newchunk@@Base+0x118>
   126dc:	str	r0, [r4, #4]
   126e0:	cmp	r0, #0
   126e4:	addne	r1, r6, r0
   126e8:	addne	r1, r1, #8
   126ec:	rsbne	r2, r5, #0
   126f0:	andne	r1, r1, r2
   126f4:	strne	r1, [r4, #12]
   126f8:	strne	r1, [r4, #8]
   126fc:	ldrne	r1, [r4]
   12700:	addne	r1, r0, r1
   12704:	strne	r1, [r0]
   12708:	strne	r1, [r4, #16]
   1270c:	movne	r1, #0
   12710:	strne	r1, [r0, #4]
   12714:	ldrbne	r0, [r4, #40]	; 0x28
   12718:	andne	r0, r0, #249	; 0xf9
   1271c:	strbne	r0, [r4, #40]	; 0x28
   12720:	popne	{r4, r5, r6, sl, fp, pc}
   12724:	movw	r0, #33008	; 0x80f0
   12728:	movt	r0, #2
   1272c:	ldr	r0, [r0]
   12730:	blx	r0

00012734 <_obstack_begin_1@@Base>:
   12734:	push	{fp, lr}
   12738:	mov	fp, sp
   1273c:	str	r3, [r0, #28]
   12740:	ldr	r3, [fp, #8]
   12744:	str	r3, [r0, #32]
   12748:	ldr	r3, [fp, #12]
   1274c:	str	r3, [r0, #36]	; 0x24
   12750:	ldrb	r3, [r0, #40]	; 0x28
   12754:	orr	r3, r3, #1
   12758:	strb	r3, [r0, #40]	; 0x28
   1275c:	bl	126ac <_obstack_begin@@Base+0x2c>
   12760:	mov	r0, #1
   12764:	pop	{fp, pc}

00012768 <_obstack_newchunk@@Base>:
   12768:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1276c:	add	fp, sp, #28
   12770:	sub	sp, sp, #4
   12774:	mov	r4, r0
   12778:	ldr	r2, [r0]
   1277c:	ldr	r0, [r0, #8]
   12780:	ldr	r3, [r4, #12]
   12784:	sub	sl, r3, r0
   12788:	add	r1, sl, r1
   1278c:	ldr	r0, [r4, #24]
   12790:	mov	r3, #0
   12794:	adds	r7, r1, r0
   12798:	adc	r0, r3, #0
   1279c:	mov	r3, #100	; 0x64
   127a0:	add	r3, r3, sl, lsr #3
   127a4:	adds	r6, r3, r7
   127a8:	movcs	r6, r7
   127ac:	cmp	r6, r2
   127b0:	movcc	r6, r2
   127b4:	cmp	r1, sl
   127b8:	bcc	12870 <_obstack_newchunk@@Base+0x108>
   127bc:	cmp	r0, #0
   127c0:	bne	12870 <_obstack_newchunk@@Base+0x108>
   127c4:	ldr	r8, [r4, #4]
   127c8:	mov	r0, r4
   127cc:	mov	r1, r6
   127d0:	bl	12880 <_obstack_newchunk@@Base+0x118>
   127d4:	cmp	r0, #0
   127d8:	beq	12870 <_obstack_newchunk@@Base+0x108>
   127dc:	mov	r7, r0
   127e0:	str	r0, [r4, #4]
   127e4:	str	r8, [r0, #4]
   127e8:	add	r0, r0, r6
   127ec:	str	r0, [r4, #16]
   127f0:	str	r0, [r7]
   127f4:	ldr	r9, [r4, #8]
   127f8:	ldr	r5, [r4, #24]
   127fc:	add	r0, r5, r7
   12800:	add	r0, r0, #8
   12804:	bic	r6, r0, r5
   12808:	mov	r0, r6
   1280c:	mov	r1, r9
   12810:	mov	r2, sl
   12814:	bl	10f28 <memcpy@plt>
   12818:	ldrb	r0, [r4, #40]	; 0x28
   1281c:	tst	r0, #2
   12820:	bne	12850 <_obstack_newchunk@@Base+0xe8>
   12824:	mvn	r0, r5
   12828:	add	r1, r5, r8
   1282c:	add	r1, r1, #8
   12830:	and	r0, r1, r0
   12834:	cmp	r9, r0
   12838:	bne	12850 <_obstack_newchunk@@Base+0xe8>
   1283c:	ldr	r0, [r8, #4]
   12840:	str	r0, [r7, #4]
   12844:	mov	r0, r4
   12848:	mov	r1, r8
   1284c:	bl	128a4 <_obstack_newchunk@@Base+0x13c>
   12850:	add	r0, r6, sl
   12854:	str	r6, [r4, #8]
   12858:	str	r0, [r4, #12]
   1285c:	ldrb	r0, [r4, #40]	; 0x28
   12860:	and	r0, r0, #253	; 0xfd
   12864:	strb	r0, [r4, #40]	; 0x28
   12868:	sub	sp, fp, #28
   1286c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12870:	movw	r0, #33008	; 0x80f0
   12874:	movt	r0, #2
   12878:	ldr	r0, [r0]
   1287c:	blx	r0
   12880:	ldrb	r2, [r0, #40]	; 0x28
   12884:	tst	r2, #1
   12888:	bne	12898 <_obstack_newchunk@@Base+0x130>
   1288c:	ldr	r2, [r0, #28]
   12890:	mov	r0, r1
   12894:	bx	r2
   12898:	ldr	r2, [r0, #28]
   1289c:	ldr	r0, [r0, #36]	; 0x24
   128a0:	bx	r2
   128a4:	ldrb	r2, [r0, #40]	; 0x28
   128a8:	tst	r2, #1
   128ac:	bne	128bc <_obstack_newchunk@@Base+0x154>
   128b0:	ldr	r2, [r0, #32]
   128b4:	mov	r0, r1
   128b8:	bx	r2
   128bc:	ldr	r2, [r0, #32]
   128c0:	ldr	r0, [r0, #36]	; 0x24
   128c4:	bx	r2

000128c8 <_obstack_allocated_p@@Base>:
   128c8:	ldr	r2, [r0, #4]
   128cc:	mov	r0, #0
   128d0:	b	128d8 <_obstack_allocated_p@@Base+0x10>
   128d4:	ldr	r2, [r2, #4]
   128d8:	cmp	r2, #0
   128dc:	bxeq	lr
   128e0:	cmp	r2, r1
   128e4:	bcs	128d4 <_obstack_allocated_p@@Base+0xc>
   128e8:	ldr	r3, [r2]
   128ec:	cmp	r3, r1
   128f0:	bcc	128d4 <_obstack_allocated_p@@Base+0xc>
   128f4:	mov	r0, #1
   128f8:	bx	lr

000128fc <_obstack_free@@Base>:
   128fc:	push	{r4, r5, r6, sl, fp, lr}
   12900:	add	fp, sp, #16
   12904:	mov	r5, r1
   12908:	ldr	r1, [r0, #4]
   1290c:	cmp	r1, #0
   12910:	beq	12950 <_obstack_free@@Base+0x54>
   12914:	mov	r4, r0
   12918:	cmp	r1, r5
   1291c:	bcs	1292c <_obstack_free@@Base+0x30>
   12920:	ldr	r0, [r1]
   12924:	cmp	r0, r5
   12928:	bcs	1295c <_obstack_free@@Base+0x60>
   1292c:	ldr	r6, [r1, #4]
   12930:	mov	r0, r4
   12934:	bl	128a4 <_obstack_newchunk@@Base+0x13c>
   12938:	ldrb	r0, [r4, #40]	; 0x28
   1293c:	orr	r0, r0, #2
   12940:	strb	r0, [r4, #40]	; 0x28
   12944:	cmp	r6, #0
   12948:	mov	r1, r6
   1294c:	bne	12918 <_obstack_free@@Base+0x1c>
   12950:	cmp	r5, #0
   12954:	popeq	{r4, r5, r6, sl, fp, pc}
   12958:	bl	1112c <abort@plt>
   1295c:	str	r5, [r4, #8]
   12960:	str	r5, [r4, #12]
   12964:	ldr	r0, [r1]
   12968:	str	r1, [r4, #4]
   1296c:	str	r0, [r4, #16]
   12970:	pop	{r4, r5, r6, sl, fp, pc}

00012974 <_obstack_memory_used@@Base>:
   12974:	ldr	r1, [r0, #4]
   12978:	mov	r0, #0
   1297c:	b	12990 <_obstack_memory_used@@Base+0x1c>
   12980:	sub	r0, r0, r1
   12984:	ldr	r2, [r1]
   12988:	ldr	r1, [r1, #4]
   1298c:	add	r0, r0, r2
   12990:	cmp	r1, #0
   12994:	bxeq	lr
   12998:	b	12980 <_obstack_memory_used@@Base+0xc>
   1299c:	push	{fp, lr}
   129a0:	mov	fp, sp
   129a4:	movw	r0, #33096	; 0x8148
   129a8:	movt	r0, #2
   129ac:	ldr	r4, [r0]
   129b0:	movw	r1, #28724	; 0x7034
   129b4:	movt	r1, #1
   129b8:	mov	r0, #0
   129bc:	mov	r2, #5
   129c0:	bl	10f58 <dcgettext@plt>
   129c4:	mov	r3, r0
   129c8:	movw	r2, #28992	; 0x7140
   129cc:	movt	r2, #1
   129d0:	mov	r0, r4
   129d4:	mov	r1, #1
   129d8:	bl	110c0 <__fprintf_chk@plt>
   129dc:	movw	r0, #33004	; 0x80ec
   129e0:	movt	r0, #2
   129e4:	ldr	r0, [r0]
   129e8:	bl	1106c <exit@plt>
   129ec:	push	{r4, r5, fp, lr}
   129f0:	add	fp, sp, #8
   129f4:	cmp	r0, #0
   129f8:	beq	12a8c <_obstack_memory_used@@Base+0x118>
   129fc:	mov	r4, r0
   12a00:	mov	r1, #47	; 0x2f
   12a04:	bl	110f0 <strrchr@plt>
   12a08:	cmp	r0, #0
   12a0c:	mov	r5, r4
   12a10:	addne	r5, r0, #1
   12a14:	sub	r0, r5, r4
   12a18:	cmp	r0, #7
   12a1c:	blt	12a70 <_obstack_memory_used@@Base+0xfc>
   12a20:	sub	r0, r5, #7
   12a24:	movw	r1, #28797	; 0x707d
   12a28:	movt	r1, #1
   12a2c:	mov	r2, #7
   12a30:	bl	11120 <strncmp@plt>
   12a34:	cmp	r0, #0
   12a38:	bne	12a70 <_obstack_memory_used@@Base+0xfc>
   12a3c:	movw	r1, #28805	; 0x7085
   12a40:	movt	r1, #1
   12a44:	mov	r0, r5
   12a48:	mov	r2, #3
   12a4c:	bl	11120 <strncmp@plt>
   12a50:	cmp	r0, #0
   12a54:	beq	12a60 <_obstack_memory_used@@Base+0xec>
   12a58:	mov	r4, r5
   12a5c:	b	12a70 <_obstack_memory_used@@Base+0xfc>
   12a60:	add	r4, r5, #3
   12a64:	movw	r0, #33080	; 0x8138
   12a68:	movt	r0, #2
   12a6c:	str	r4, [r0]
   12a70:	movw	r0, #33084	; 0x813c
   12a74:	movt	r0, #2
   12a78:	str	r4, [r0]
   12a7c:	movw	r0, #33168	; 0x8190
   12a80:	movt	r0, #2
   12a84:	str	r4, [r0]
   12a88:	pop	{r4, r5, fp, pc}
   12a8c:	movw	r0, #33096	; 0x8148
   12a90:	movt	r0, #2
   12a94:	ldr	r3, [r0]
   12a98:	movw	r0, #28741	; 0x7045
   12a9c:	movt	r0, #1
   12aa0:	mov	r1, #55	; 0x37
   12aa4:	mov	r2, #1
   12aa8:	bl	10f94 <fwrite@plt>
   12aac:	bl	1112c <abort@plt>
   12ab0:	push	{r4, r5, r6, sl, fp, lr}
   12ab4:	add	fp, sp, #16
   12ab8:	mov	r4, r0
   12abc:	movw	r0, #33176	; 0x8198
   12ac0:	movt	r0, #2
   12ac4:	cmp	r4, #0
   12ac8:	moveq	r4, r0
   12acc:	bl	11084 <__errno_location@plt>
   12ad0:	mov	r5, r0
   12ad4:	ldr	r6, [r0]
   12ad8:	mov	r0, r4
   12adc:	mov	r1, #48	; 0x30
   12ae0:	bl	14df0 <_obstack_memory_used@@Base+0x247c>
   12ae4:	str	r6, [r5]
   12ae8:	pop	{r4, r5, r6, sl, fp, pc}
   12aec:	movw	r1, #33176	; 0x8198
   12af0:	movt	r1, #2
   12af4:	cmp	r0, #0
   12af8:	movne	r1, r0
   12afc:	ldr	r0, [r1]
   12b00:	bx	lr
   12b04:	movw	r2, #33176	; 0x8198
   12b08:	movt	r2, #2
   12b0c:	cmp	r0, #0
   12b10:	movne	r2, r0
   12b14:	str	r1, [r2]
   12b18:	bx	lr
   12b1c:	movw	r3, #33176	; 0x8198
   12b20:	movt	r3, #2
   12b24:	cmp	r0, #0
   12b28:	movne	r3, r0
   12b2c:	ubfx	r0, r1, #5, #3
   12b30:	add	r0, r3, r0, lsl #2
   12b34:	ldr	r3, [r0, #8]
   12b38:	and	r1, r1, #31
   12b3c:	eor	r2, r2, r3, lsr r1
   12b40:	and	r2, r2, #1
   12b44:	eor	r2, r3, r2, lsl r1
   12b48:	str	r2, [r0, #8]
   12b4c:	mov	r0, #1
   12b50:	and	r0, r0, r3, lsr r1
   12b54:	bx	lr
   12b58:	movw	r2, #33176	; 0x8198
   12b5c:	movt	r2, #2
   12b60:	cmp	r0, #0
   12b64:	movne	r2, r0
   12b68:	ldr	r0, [r2, #4]
   12b6c:	str	r1, [r2, #4]
   12b70:	bx	lr
   12b74:	movw	r3, #33176	; 0x8198
   12b78:	movt	r3, #2
   12b7c:	cmp	r0, #0
   12b80:	movne	r3, r0
   12b84:	mov	r0, #10
   12b88:	str	r0, [r3]
   12b8c:	cmp	r1, #0
   12b90:	cmpne	r2, #0
   12b94:	bne	12ba4 <_obstack_memory_used@@Base+0x230>
   12b98:	push	{fp, lr}
   12b9c:	mov	fp, sp
   12ba0:	bl	1112c <abort@plt>
   12ba4:	str	r1, [r3, #40]	; 0x28
   12ba8:	str	r2, [r3, #44]	; 0x2c
   12bac:	bx	lr
   12bb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bb4:	add	fp, sp, #28
   12bb8:	sub	sp, sp, #20
   12bbc:	mov	r8, r3
   12bc0:	mov	r9, r2
   12bc4:	mov	sl, r1
   12bc8:	mov	r7, r0
   12bcc:	ldr	r0, [fp, #8]
   12bd0:	movw	r5, #33176	; 0x8198
   12bd4:	movt	r5, #2
   12bd8:	cmp	r0, #0
   12bdc:	movne	r5, r0
   12be0:	bl	11084 <__errno_location@plt>
   12be4:	mov	r4, r0
   12be8:	ldm	r5, {r0, r1}
   12bec:	ldr	r2, [r5, #40]	; 0x28
   12bf0:	ldr	r3, [r5, #44]	; 0x2c
   12bf4:	ldr	r6, [r4]
   12bf8:	add	r5, r5, #8
   12bfc:	stm	sp, {r0, r1, r5}
   12c00:	str	r2, [sp, #12]
   12c04:	str	r3, [sp, #16]
   12c08:	mov	r0, r7
   12c0c:	mov	r1, sl
   12c10:	mov	r2, r9
   12c14:	mov	r3, r8
   12c18:	bl	12c28 <_obstack_memory_used@@Base+0x2b4>
   12c1c:	str	r6, [r4]
   12c20:	sub	sp, fp, #28
   12c24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c2c:	add	fp, sp, #28
   12c30:	sub	sp, sp, #156	; 0x9c
   12c34:	mov	r9, r3
   12c38:	str	r2, [fp, #-84]	; 0xffffffac
   12c3c:	mov	r6, r1
   12c40:	mov	r7, r0
   12c44:	ldr	r0, [fp, #12]
   12c48:	and	r1, r0, #4
   12c4c:	str	r1, [sp, #32]
   12c50:	and	r1, r0, #1
   12c54:	str	r1, [sp, #36]	; 0x24
   12c58:	ubfx	sl, r0, #1, #1
   12c5c:	bl	10fac <__ctype_get_mb_cur_max@plt>
   12c60:	str	r0, [sp, #40]	; 0x28
   12c64:	ldr	r0, [fp, #24]
   12c68:	str	r0, [sp, #76]	; 0x4c
   12c6c:	ldr	r0, [fp, #20]
   12c70:	str	r0, [sp, #68]	; 0x44
   12c74:	ldr	r0, [fp, #8]
   12c78:	str	r0, [fp, #-60]	; 0xffffffc4
   12c7c:	mov	r0, #0
   12c80:	str	r0, [sp, #72]	; 0x48
   12c84:	mov	r0, #0
   12c88:	str	r0, [sp, #92]	; 0x5c
   12c8c:	mov	r0, #0
   12c90:	str	r0, [fp, #-72]	; 0xffffffb8
   12c94:	mov	r0, #0
   12c98:	mov	r1, #0
   12c9c:	str	r1, [fp, #-56]	; 0xffffffc8
   12ca0:	mov	r1, #0
   12ca4:	str	r1, [sp, #56]	; 0x38
   12ca8:	mov	r5, #1
   12cac:	str	r7, [sp, #80]	; 0x50
   12cb0:	mov	r4, r6
   12cb4:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12cb8:	cmp	r6, #10
   12cbc:	bhi	13c24 <_obstack_memory_used@@Base+0x12b0>
   12cc0:	add	r1, pc, #20
   12cc4:	mov	r8, #0
   12cc8:	mov	r2, #1
   12ccc:	mov	r3, #0
   12cd0:	ldr	ip, [fp, #-84]	; 0xffffffac
   12cd4:	mov	lr, r9
   12cd8:	ldr	pc, [r1, r6, lsl #2]
   12cdc:			; <UNDEFINED> instruction: 0x00012db4
   12ce0:	andeq	r2, r1, r4, ror #27
   12ce4:	andeq	r2, r1, r4, lsr #27
   12ce8:	muleq	r1, ip, sp
   12cec:	ldrdeq	r2, [r1], -r8
   12cf0:	andeq	r2, r1, r8, lsr lr
   12cf4:	andeq	r2, r1, r4, asr #27
   12cf8:	muleq	r1, r4, lr
   12cfc:	andeq	r2, r1, r8, lsl #26
   12d00:	andeq	r2, r1, r8, lsl #26
   12d04:	andeq	r2, r1, r0, lsr sp
   12d08:	movw	r0, #28881	; 0x70d1
   12d0c:	movt	r0, #1
   12d10:	mov	r1, r6
   12d14:	bl	14230 <_obstack_memory_used@@Base+0x18bc>
   12d18:	str	r0, [sp, #68]	; 0x44
   12d1c:	movw	r0, #23083	; 0x5a2b
   12d20:	movt	r0, #1
   12d24:	mov	r1, r6
   12d28:	bl	14230 <_obstack_memory_used@@Base+0x18bc>
   12d2c:	str	r0, [sp, #76]	; 0x4c
   12d30:	mov	r8, #0
   12d34:	tst	sl, #1
   12d38:	bne	12d70 <_obstack_memory_used@@Base+0x3fc>
   12d3c:	ldr	r0, [sp, #68]	; 0x44
   12d40:	ldrb	r0, [r0]
   12d44:	cmp	r0, #0
   12d48:	beq	12d70 <_obstack_memory_used@@Base+0x3fc>
   12d4c:	ldr	r1, [sp, #68]	; 0x44
   12d50:	add	r1, r1, #1
   12d54:	mov	r8, #0
   12d58:	cmp	r8, r4
   12d5c:	strbcc	r0, [r7, r8]
   12d60:	ldrb	r0, [r1, r8]
   12d64:	add	r8, r8, #1
   12d68:	cmp	r0, #0
   12d6c:	bne	12d58 <_obstack_memory_used@@Base+0x3e4>
   12d70:	ldr	r6, [sp, #76]	; 0x4c
   12d74:	mov	r0, r6
   12d78:	bl	11078 <strlen@plt>
   12d7c:	str	r0, [fp, #-72]	; 0xffffffb8
   12d80:	str	r6, [sp, #92]	; 0x5c
   12d84:	mov	r2, #1
   12d88:	mov	r3, sl
   12d8c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12d90:	mov	lr, r9
   12d94:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12d98:	b	12e94 <_obstack_memory_used@@Base+0x520>
   12d9c:	mov	r0, #1
   12da0:	b	12de4 <_obstack_memory_used@@Base+0x470>
   12da4:	tst	sl, #1
   12da8:	bne	12de4 <_obstack_memory_used@@Base+0x470>
   12dac:	mov	r2, r0
   12db0:	b	12e0c <_obstack_memory_used@@Base+0x498>
   12db4:	mov	r6, #0
   12db8:	mov	r8, #0
   12dbc:	mov	r2, r0
   12dc0:	b	12e90 <_obstack_memory_used@@Base+0x51c>
   12dc4:	mov	r0, #1
   12dc8:	str	r0, [fp, #-72]	; 0xffffffb8
   12dcc:	mov	r8, #0
   12dd0:	mov	r6, #5
   12dd4:	b	12e50 <_obstack_memory_used@@Base+0x4dc>
   12dd8:	mov	r2, #1
   12ddc:	tst	sl, #1
   12de0:	beq	12e0c <_obstack_memory_used@@Base+0x498>
   12de4:	mov	r1, #1
   12de8:	str	r1, [fp, #-72]	; 0xffffffb8
   12dec:	mov	r8, #0
   12df0:	mov	r6, #2
   12df4:	movw	r1, #23083	; 0x5a2b
   12df8:	movt	r1, #1
   12dfc:	str	r1, [sp, #92]	; 0x5c
   12e00:	mov	r2, r0
   12e04:	mov	r3, #1
   12e08:	b	12e94 <_obstack_memory_used@@Base+0x520>
   12e0c:	mov	r8, #1
   12e10:	mov	r6, #2
   12e14:	cmp	r4, #0
   12e18:	movne	r0, #39	; 0x27
   12e1c:	strbne	r0, [r7]
   12e20:	movw	r0, #23083	; 0x5a2b
   12e24:	movt	r0, #1
   12e28:	str	r0, [sp, #92]	; 0x5c
   12e2c:	mov	r0, #1
   12e30:	str	r0, [fp, #-72]	; 0xffffffb8
   12e34:	b	12e90 <_obstack_memory_used@@Base+0x51c>
   12e38:	mov	r6, #5
   12e3c:	tst	sl, #1
   12e40:	beq	12e68 <_obstack_memory_used@@Base+0x4f4>
   12e44:	mov	r0, #1
   12e48:	str	r0, [fp, #-72]	; 0xffffffb8
   12e4c:	mov	r8, #0
   12e50:	movw	r0, #28879	; 0x70cf
   12e54:	movt	r0, #1
   12e58:	str	r0, [sp, #92]	; 0x5c
   12e5c:	mov	r2, #1
   12e60:	mov	r3, #1
   12e64:	b	12e94 <_obstack_memory_used@@Base+0x520>
   12e68:	cmp	r4, #0
   12e6c:	movne	r0, #34	; 0x22
   12e70:	strbne	r0, [r7]
   12e74:	mov	r8, #1
   12e78:	movw	r0, #28879	; 0x70cf
   12e7c:	movt	r0, #1
   12e80:	str	r0, [sp, #92]	; 0x5c
   12e84:	mov	r0, #1
   12e88:	str	r0, [fp, #-72]	; 0xffffffb8
   12e8c:	mov	r2, #1
   12e90:	mov	r3, #0
   12e94:	ldr	r0, [fp, #16]
   12e98:	cmp	r0, #0
   12e9c:	movwne	r0, #1
   12ea0:	and	r0, r0, r3
   12ea4:	str	r0, [fp, #-88]	; 0xffffffa8
   12ea8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12eac:	cmp	r0, #0
   12eb0:	movwne	r0, #1
   12eb4:	and	r1, r0, r3
   12eb8:	and	r1, r2, r1
   12ebc:	str	r1, [sp, #48]	; 0x30
   12ec0:	str	r6, [fp, #-60]	; 0xffffffc4
   12ec4:	subs	r6, r6, #2
   12ec8:	clz	r1, r6
   12ecc:	lsr	r1, r1, #5
   12ed0:	and	r1, r1, r3
   12ed4:	str	r1, [sp, #60]	; 0x3c
   12ed8:	str	r6, [fp, #-80]	; 0xffffffb0
   12edc:	mov	r1, r6
   12ee0:	movwne	r1, #1
   12ee4:	str	r3, [fp, #-76]	; 0xffffffb4
   12ee8:	eor	r3, r3, #1
   12eec:	str	r3, [sp, #88]	; 0x58
   12ef0:	orr	r3, r1, r3
   12ef4:	str	r3, [sp, #64]	; 0x40
   12ef8:	and	r1, r1, r2
   12efc:	str	r1, [fp, #-68]	; 0xffffffbc
   12f00:	and	r0, r0, r1
   12f04:	str	r0, [fp, #-64]	; 0xffffffc0
   12f08:	str	r2, [sp, #84]	; 0x54
   12f0c:	eor	r0, r2, #1
   12f10:	str	r0, [sp, #52]	; 0x34
   12f14:	mov	r6, #0
   12f18:	cmn	lr, #1
   12f1c:	beq	12f2c <_obstack_memory_used@@Base+0x5b8>
   12f20:	cmp	r6, lr
   12f24:	bne	12f38 <_obstack_memory_used@@Base+0x5c4>
   12f28:	b	13aa4 <_obstack_memory_used@@Base+0x1130>
   12f2c:	ldrb	r0, [ip, r6]
   12f30:	cmp	r0, #0
   12f34:	beq	13aa4 <_obstack_memory_used@@Base+0x1130>
   12f38:	str	r5, [fp, #-48]	; 0xffffffd0
   12f3c:	mov	sl, #0
   12f40:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12f44:	cmp	r0, #0
   12f48:	beq	12f7c <_obstack_memory_used@@Base+0x608>
   12f4c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12f50:	add	r5, r6, r0
   12f54:	cmp	r0, #2
   12f58:	bcc	12f74 <_obstack_memory_used@@Base+0x600>
   12f5c:	cmn	lr, #1
   12f60:	bne	12f74 <_obstack_memory_used@@Base+0x600>
   12f64:	mov	r0, ip
   12f68:	bl	11078 <strlen@plt>
   12f6c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f70:	mov	lr, r0
   12f74:	cmp	r5, lr
   12f78:	bls	12f88 <_obstack_memory_used@@Base+0x614>
   12f7c:	mov	r0, #0
   12f80:	str	r0, [fp, #-52]	; 0xffffffcc
   12f84:	b	12fd4 <_obstack_memory_used@@Base+0x660>
   12f88:	mov	r5, r4
   12f8c:	mov	r4, lr
   12f90:	add	r0, ip, r6
   12f94:	ldr	r1, [sp, #92]	; 0x5c
   12f98:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12f9c:	bl	10f4c <memcmp@plt>
   12fa0:	cmp	r0, #0
   12fa4:	mov	r1, r0
   12fa8:	movwne	r1, #1
   12fac:	ldr	r2, [sp, #88]	; 0x58
   12fb0:	orr	r1, r1, r2
   12fb4:	tst	r1, #1
   12fb8:	beq	13b68 <_obstack_memory_used@@Base+0x11f4>
   12fbc:	clz	r0, r0
   12fc0:	lsr	r0, r0, #5
   12fc4:	str	r0, [fp, #-52]	; 0xffffffcc
   12fc8:	ldr	ip, [fp, #-84]	; 0xffffffac
   12fcc:	mov	lr, r4
   12fd0:	mov	r4, r5
   12fd4:	ldrb	r5, [ip, r6]
   12fd8:	cmp	r5, #126	; 0x7e
   12fdc:	bhi	13398 <_obstack_memory_used@@Base+0xa24>
   12fe0:	mov	r9, #1
   12fe4:	mov	r2, #110	; 0x6e
   12fe8:	mov	r0, #97	; 0x61
   12fec:	add	r3, pc, #4
   12ff0:	mov	r1, #0
   12ff4:	ldr	pc, [r3, r5, lsl #2]
   12ff8:	muleq	r1, r0, r2
   12ffc:	muleq	r1, r8, r3
   13000:	muleq	r1, r8, r3
   13004:	muleq	r1, r8, r3
   13008:	muleq	r1, r8, r3
   1300c:	muleq	r1, r8, r3
   13010:	muleq	r1, r8, r3
   13014:	andeq	r3, r1, ip, asr r4
   13018:	andeq	r3, r1, r0, ror r2
   1301c:	andeq	r3, r1, r8, ror #4
   13020:	andeq	r3, r1, ip, ror r2
   13024:	andeq	r3, r1, r0, lsl #6
   13028:	andeq	r3, r1, r0, ror #4
   1302c:	andeq	r3, r1, r8, ror r2
   13030:	muleq	r1, r8, r3
   13034:	muleq	r1, r8, r3
   13038:	muleq	r1, r8, r3
   1303c:	muleq	r1, r8, r3
   13040:	muleq	r1, r8, r3
   13044:	muleq	r1, r8, r3
   13048:	muleq	r1, r8, r3
   1304c:	muleq	r1, r8, r3
   13050:	muleq	r1, r8, r3
   13054:	muleq	r1, r8, r3
   13058:	muleq	r1, r8, r3
   1305c:	muleq	r1, r8, r3
   13060:	muleq	r1, r8, r3
   13064:	muleq	r1, r8, r3
   13068:	muleq	r1, r8, r3
   1306c:	muleq	r1, r8, r3
   13070:	muleq	r1, r8, r3
   13074:	muleq	r1, r8, r3
   13078:	andeq	r3, r1, ip, lsl #8
   1307c:	andeq	r3, r1, r0, lsl r4
   13080:	andeq	r3, r1, r0, lsl r4
   13084:	andeq	r3, r1, r8, lsl #4
   13088:	andeq	r3, r1, r0, lsl r4
   1308c:	strdeq	r3, [r1], -r4
   13090:	andeq	r3, r1, r0, lsl r4
   13094:	andeq	r3, r1, r8, lsl #6
   13098:	andeq	r3, r1, r0, lsl r4
   1309c:	andeq	r3, r1, r0, lsl r4
   130a0:	andeq	r3, r1, r0, lsl r4
   130a4:	strdeq	r3, [r1], -r4
   130a8:	strdeq	r3, [r1], -r4
   130ac:	strdeq	r3, [r1], -r4
   130b0:	strdeq	r3, [r1], -r4
   130b4:	strdeq	r3, [r1], -r4
   130b8:	strdeq	r3, [r1], -r4
   130bc:	strdeq	r3, [r1], -r4
   130c0:	strdeq	r3, [r1], -r4
   130c4:	strdeq	r3, [r1], -r4
   130c8:	strdeq	r3, [r1], -r4
   130cc:	strdeq	r3, [r1], -r4
   130d0:	strdeq	r3, [r1], -r4
   130d4:	strdeq	r3, [r1], -r4
   130d8:	strdeq	r3, [r1], -r4
   130dc:	strdeq	r3, [r1], -r4
   130e0:	strdeq	r3, [r1], -r4
   130e4:	andeq	r3, r1, r0, lsl r4
   130e8:	andeq	r3, r1, r0, lsl r4
   130ec:	andeq	r3, r1, r0, lsl r4
   130f0:	andeq	r3, r1, r0, lsl r4
   130f4:	ldrdeq	r3, [r1], -r0
   130f8:	muleq	r1, r8, r3
   130fc:	strdeq	r3, [r1], -r4
   13100:	strdeq	r3, [r1], -r4
   13104:	strdeq	r3, [r1], -r4
   13108:	strdeq	r3, [r1], -r4
   1310c:	strdeq	r3, [r1], -r4
   13110:	strdeq	r3, [r1], -r4
   13114:	strdeq	r3, [r1], -r4
   13118:	strdeq	r3, [r1], -r4
   1311c:	strdeq	r3, [r1], -r4
   13120:	strdeq	r3, [r1], -r4
   13124:	strdeq	r3, [r1], -r4
   13128:	strdeq	r3, [r1], -r4
   1312c:	strdeq	r3, [r1], -r4
   13130:	strdeq	r3, [r1], -r4
   13134:	strdeq	r3, [r1], -r4
   13138:	strdeq	r3, [r1], -r4
   1313c:	strdeq	r3, [r1], -r4
   13140:	strdeq	r3, [r1], -r4
   13144:	strdeq	r3, [r1], -r4
   13148:	strdeq	r3, [r1], -r4
   1314c:	strdeq	r3, [r1], -r4
   13150:	strdeq	r3, [r1], -r4
   13154:	strdeq	r3, [r1], -r4
   13158:	strdeq	r3, [r1], -r4
   1315c:	strdeq	r3, [r1], -r4
   13160:	strdeq	r3, [r1], -r4
   13164:	andeq	r3, r1, r0, lsl r4
   13168:	andeq	r3, r1, ip, lsr r2
   1316c:	strdeq	r3, [r1], -r4
   13170:	andeq	r3, r1, r0, lsl r4
   13174:	strdeq	r3, [r1], -r4
   13178:	andeq	r3, r1, r0, lsl r4
   1317c:	strdeq	r3, [r1], -r4
   13180:	strdeq	r3, [r1], -r4
   13184:	strdeq	r3, [r1], -r4
   13188:	strdeq	r3, [r1], -r4
   1318c:	strdeq	r3, [r1], -r4
   13190:	strdeq	r3, [r1], -r4
   13194:	strdeq	r3, [r1], -r4
   13198:	strdeq	r3, [r1], -r4
   1319c:	strdeq	r3, [r1], -r4
   131a0:	strdeq	r3, [r1], -r4
   131a4:	strdeq	r3, [r1], -r4
   131a8:	strdeq	r3, [r1], -r4
   131ac:	strdeq	r3, [r1], -r4
   131b0:	strdeq	r3, [r1], -r4
   131b4:	strdeq	r3, [r1], -r4
   131b8:	strdeq	r3, [r1], -r4
   131bc:	strdeq	r3, [r1], -r4
   131c0:	strdeq	r3, [r1], -r4
   131c4:	strdeq	r3, [r1], -r4
   131c8:	strdeq	r3, [r1], -r4
   131cc:	strdeq	r3, [r1], -r4
   131d0:	strdeq	r3, [r1], -r4
   131d4:	strdeq	r3, [r1], -r4
   131d8:	strdeq	r3, [r1], -r4
   131dc:	strdeq	r3, [r1], -r4
   131e0:	strdeq	r3, [r1], -r4
   131e4:	andeq	r3, r1, ip, lsl r2
   131e8:	andeq	r3, r1, r0, lsl r4
   131ec:	andeq	r3, r1, ip, lsl r2
   131f0:	andeq	r3, r1, r8, lsl #4
   131f4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   131f8:	cmp	r0, #0
   131fc:	beq	13470 <_obstack_memory_used@@Base+0xafc>
   13200:	ldr	r0, [fp, #16]
   13204:	b	13474 <_obstack_memory_used@@Base+0xb00>
   13208:	mov	r9, #0
   1320c:	cmp	r6, #0
   13210:	beq	1340c <_obstack_memory_used@@Base+0xa98>
   13214:	mov	sl, #0
   13218:	b	131f4 <_obstack_memory_used@@Base+0x880>
   1321c:	mov	r9, #0
   13220:	cmn	lr, #1
   13224:	beq	133f0 <_obstack_memory_used@@Base+0xa7c>
   13228:	cmp	r6, #0
   1322c:	bne	13214 <_obstack_memory_used@@Base+0x8a0>
   13230:	cmp	lr, #1
   13234:	beq	1340c <_obstack_memory_used@@Base+0xa98>
   13238:	b	13214 <_obstack_memory_used@@Base+0x8a0>
   1323c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13240:	cmp	r0, #2
   13244:	bne	13438 <_obstack_memory_used@@Base+0xac4>
   13248:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1324c:	tst	r0, #1
   13250:	bne	13b80 <_obstack_memory_used@@Base+0x120c>
   13254:	mov	sl, #0
   13258:	mov	r0, #92	; 0x5c
   1325c:	b	1344c <_obstack_memory_used@@Base+0xad8>
   13260:	mov	r0, #102	; 0x66
   13264:	b	1345c <_obstack_memory_used@@Base+0xae8>
   13268:	mov	r2, #116	; 0x74
   1326c:	b	1327c <_obstack_memory_used@@Base+0x908>
   13270:	mov	r0, #98	; 0x62
   13274:	b	1345c <_obstack_memory_used@@Base+0xae8>
   13278:	mov	r2, #114	; 0x72
   1327c:	ldr	r0, [sp, #64]	; 0x40
   13280:	tst	r0, #1
   13284:	mov	r0, r2
   13288:	bne	1345c <_obstack_memory_used@@Base+0xae8>
   1328c:	b	13b80 <_obstack_memory_used@@Base+0x120c>
   13290:	ldr	r0, [sp, #84]	; 0x54
   13294:	tst	r0, #1
   13298:	beq	1354c <_obstack_memory_used@@Base+0xbd8>
   1329c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   132a0:	tst	r0, #1
   132a4:	bne	13b80 <_obstack_memory_used@@Base+0x120c>
   132a8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   132ac:	cmp	r0, #2
   132b0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   132b4:	movwne	r0, #1
   132b8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   132bc:	orr	r0, r0, r2
   132c0:	tst	r0, #1
   132c4:	beq	13940 <_obstack_memory_used@@Base+0xfcc>
   132c8:	mov	r0, r8
   132cc:	b	13974 <_obstack_memory_used@@Base+0x1000>
   132d0:	mov	sl, #0
   132d4:	mov	r5, #63	; 0x3f
   132d8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   132dc:	cmp	r0, #5
   132e0:	beq	13700 <_obstack_memory_used@@Base+0xd8c>
   132e4:	cmp	r0, #2
   132e8:	bne	137a0 <_obstack_memory_used@@Base+0xe2c>
   132ec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   132f0:	tst	r0, #1
   132f4:	mov	r9, #0
   132f8:	beq	131f4 <_obstack_memory_used@@Base+0x880>
   132fc:	b	13b80 <_obstack_memory_used@@Base+0x120c>
   13300:	mov	r0, #118	; 0x76
   13304:	b	1345c <_obstack_memory_used@@Base+0xae8>
   13308:	mov	r5, #39	; 0x27
   1330c:	mov	r0, #1
   13310:	str	r0, [sp, #56]	; 0x38
   13314:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13318:	cmp	r0, #2
   1331c:	bne	1356c <_obstack_memory_used@@Base+0xbf8>
   13320:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13324:	tst	r0, #1
   13328:	bne	13b80 <_obstack_memory_used@@Base+0x120c>
   1332c:	ldr	r2, [sp, #72]	; 0x48
   13330:	cmp	r2, #0
   13334:	mov	r0, r2
   13338:	movwne	r0, #1
   1333c:	clz	r1, r4
   13340:	lsr	r1, r1, #5
   13344:	orrs	r0, r0, r1
   13348:	moveq	r2, r4
   1334c:	str	r2, [sp, #72]	; 0x48
   13350:	moveq	r4, r0
   13354:	cmp	r8, r4
   13358:	movcc	r0, #39	; 0x27
   1335c:	strbcc	r0, [r7, r8]
   13360:	add	r0, r8, #1
   13364:	cmp	r0, r4
   13368:	movcc	r1, #92	; 0x5c
   1336c:	strbcc	r1, [r7, r0]
   13370:	add	r0, r8, #2
   13374:	cmp	r0, r4
   13378:	movcc	r1, #39	; 0x27
   1337c:	strbcc	r1, [r7, r0]
   13380:	add	r8, r8, #3
   13384:	mov	r0, #0
   13388:	str	r0, [fp, #-56]	; 0xffffffc8
   1338c:	mov	sl, #0
   13390:	mov	r9, #1
   13394:	b	131f4 <_obstack_memory_used@@Base+0x880>
   13398:	str	r4, [sp, #24]
   1339c:	ldr	r0, [sp, #40]	; 0x28
   133a0:	cmp	r0, #1
   133a4:	bne	13574 <_obstack_memory_used@@Base+0xc00>
   133a8:	str	lr, [sp, #28]
   133ac:	bl	11060 <__ctype_b_loc@plt>
   133b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   133b4:	ldr	r0, [r0]
   133b8:	add	r0, r0, r5, lsl #1
   133bc:	ldrb	r0, [r0, #1]
   133c0:	ubfx	r9, r0, #6, #1
   133c4:	mov	r1, #1
   133c8:	ldr	r4, [sp, #24]
   133cc:	ldr	r0, [sp, #52]	; 0x34
   133d0:	orr	r0, r9, r0
   133d4:	mov	r2, r1
   133d8:	cmp	r1, #1
   133dc:	bhi	137a8 <_obstack_memory_used@@Base+0xe34>
   133e0:	tst	r0, #1
   133e4:	beq	137a8 <_obstack_memory_used@@Base+0xe34>
   133e8:	ldr	lr, [sp, #28]
   133ec:	b	131f4 <_obstack_memory_used@@Base+0x880>
   133f0:	cmp	r6, #0
   133f4:	ldrbeq	r0, [ip, #1]
   133f8:	cmpeq	r0, #0
   133fc:	beq	1340c <_obstack_memory_used@@Base+0xa98>
   13400:	mvn	lr, #0
   13404:	mov	sl, #0
   13408:	b	131f4 <_obstack_memory_used@@Base+0x880>
   1340c:	mov	r1, #1
   13410:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13414:	cmp	r0, #2
   13418:	bne	13430 <_obstack_memory_used@@Base+0xabc>
   1341c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13420:	tst	r0, #1
   13424:	mov	r9, r1
   13428:	beq	131f4 <_obstack_memory_used@@Base+0x880>
   1342c:	b	13b80 <_obstack_memory_used@@Base+0x120c>
   13430:	mov	r9, r1
   13434:	b	131f4 <_obstack_memory_used@@Base+0x880>
   13438:	mov	sl, #0
   1343c:	mov	r0, #92	; 0x5c
   13440:	ldr	r1, [sp, #48]	; 0x30
   13444:	cmp	r1, #0
   13448:	beq	1345c <_obstack_memory_used@@Base+0xae8>
   1344c:	mov	r9, #0
   13450:	cmp	sl, #0
   13454:	beq	13a0c <_obstack_memory_used@@Base+0x1098>
   13458:	b	13a48 <_obstack_memory_used@@Base+0x10d4>
   1345c:	mov	r9, #0
   13460:	ldr	r1, [sp, #84]	; 0x54
   13464:	tst	r1, #1
   13468:	mov	sl, #0
   1346c:	bne	134ac <_obstack_memory_used@@Base+0xb38>
   13470:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13474:	cmp	r0, #0
   13478:	mov	r0, r5
   1347c:	beq	134a0 <_obstack_memory_used@@Base+0xb2c>
   13480:	ubfx	r0, r5, #5, #3
   13484:	ldr	r1, [fp, #16]
   13488:	ldr	r0, [r1, r0, lsl #2]
   1348c:	and	r1, r5, #31
   13490:	mov	r2, #1
   13494:	tst	r0, r2, lsl r1
   13498:	mov	r0, r5
   1349c:	bne	134ac <_obstack_memory_used@@Base+0xb38>
   134a0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   134a4:	cmp	r1, #0
   134a8:	beq	13a04 <_obstack_memory_used@@Base+0x1090>
   134ac:	ldr	r1, [fp, #-76]	; 0xffffffb4
   134b0:	tst	r1, #1
   134b4:	bne	13b80 <_obstack_memory_used@@Base+0x120c>
   134b8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   134bc:	cmp	r1, #2
   134c0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   134c4:	movwne	r1, #1
   134c8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   134cc:	orr	r1, r1, r2
   134d0:	tst	r1, #1
   134d4:	beq	134e0 <_obstack_memory_used@@Base+0xb6c>
   134d8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   134dc:	b	1351c <_obstack_memory_used@@Base+0xba8>
   134e0:	cmp	r8, r4
   134e4:	movcc	r1, #39	; 0x27
   134e8:	strbcc	r1, [r7, r8]
   134ec:	add	r1, r8, #1
   134f0:	cmp	r1, r4
   134f4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   134f8:	movcc	r2, #36	; 0x24
   134fc:	strbcc	r2, [r7, r1]
   13500:	add	r1, r8, #2
   13504:	cmp	r1, r4
   13508:	movcc	r2, #39	; 0x27
   1350c:	strbcc	r2, [r7, r1]
   13510:	add	r8, r8, #3
   13514:	mov	r1, #1
   13518:	str	r1, [fp, #-56]	; 0xffffffc8
   1351c:	cmp	r8, r4
   13520:	movcc	r1, #92	; 0x5c
   13524:	strbcc	r1, [r7, r8]
   13528:	add	r8, r8, #1
   1352c:	cmp	r8, r4
   13530:	strbcc	r0, [r7, r8]
   13534:	and	r5, r5, r9
   13538:	add	r8, r8, #1
   1353c:	add	r6, r6, #1
   13540:	cmn	lr, #1
   13544:	bne	12f20 <_obstack_memory_used@@Base+0x5ac>
   13548:	b	12f2c <_obstack_memory_used@@Base+0x5b8>
   1354c:	mov	r9, #0
   13550:	ldr	r0, [sp, #36]	; 0x24
   13554:	cmp	r0, #0
   13558:	mov	sl, #0
   1355c:	mov	r5, #0
   13560:	beq	13470 <_obstack_memory_used@@Base+0xafc>
   13564:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13568:	b	1353c <_obstack_memory_used@@Base+0xbc8>
   1356c:	mov	r9, #1
   13570:	b	131f4 <_obstack_memory_used@@Base+0x880>
   13574:	mov	r0, #0
   13578:	str	r0, [fp, #-36]	; 0xffffffdc
   1357c:	str	r0, [fp, #-40]	; 0xffffffd8
   13580:	cmn	lr, #1
   13584:	bne	13598 <_obstack_memory_used@@Base+0xc24>
   13588:	mov	r0, ip
   1358c:	bl	11078 <strlen@plt>
   13590:	ldr	ip, [fp, #-84]	; 0xffffffac
   13594:	mov	lr, r0
   13598:	add	r0, ip, r6
   1359c:	str	r0, [sp, #20]
   135a0:	mov	r9, #1
   135a4:	mov	r7, #0
   135a8:	sub	r4, fp, #40	; 0x28
   135ac:	str	lr, [sp, #28]
   135b0:	str	r7, [sp, #44]	; 0x2c
   135b4:	add	r7, r7, r6
   135b8:	add	r1, ip, r7
   135bc:	sub	r2, lr, r7
   135c0:	sub	r0, fp, #44	; 0x2c
   135c4:	mov	r3, r4
   135c8:	bl	153fc <_obstack_memory_used@@Base+0x2a88>
   135cc:	cmp	r0, #0
   135d0:	beq	13a90 <_obstack_memory_used@@Base+0x111c>
   135d4:	cmn	r0, #1
   135d8:	beq	13a50 <_obstack_memory_used@@Base+0x10dc>
   135dc:	cmn	r0, #2
   135e0:	ldr	lr, [sp, #28]
   135e4:	beq	13a58 <_obstack_memory_used@@Base+0x10e4>
   135e8:	cmp	r0, #2
   135ec:	mov	r1, #0
   135f0:	movwcc	r1, #1
   135f4:	ldr	r2, [sp, #60]	; 0x3c
   135f8:	eor	r2, r2, #1
   135fc:	orrs	r1, r2, r1
   13600:	ldr	r4, [sp, #24]
   13604:	bne	136c4 <_obstack_memory_used@@Base+0xd50>
   13608:	ldr	r1, [sp, #44]	; 0x2c
   1360c:	ldr	r2, [sp, #20]
   13610:	add	r1, r2, r1
   13614:	mov	r2, #1
   13618:	ldrb	r3, [r1, r2]
   1361c:	sub	r3, r3, #91	; 0x5b
   13620:	cmp	r3, #33	; 0x21
   13624:	bhi	136b8 <_obstack_memory_used@@Base+0xd44>
   13628:	add	r7, pc, #0
   1362c:	ldr	pc, [r7, r3, lsl #2]
   13630:	andeq	r3, r1, r8, ror fp
   13634:	andeq	r3, r1, r8, ror fp
   13638:			; <UNDEFINED> instruction: 0x000136b8
   1363c:	andeq	r3, r1, r8, ror fp
   13640:			; <UNDEFINED> instruction: 0x000136b8
   13644:	andeq	r3, r1, r8, ror fp
   13648:			; <UNDEFINED> instruction: 0x000136b8
   1364c:			; <UNDEFINED> instruction: 0x000136b8
   13650:			; <UNDEFINED> instruction: 0x000136b8
   13654:			; <UNDEFINED> instruction: 0x000136b8
   13658:			; <UNDEFINED> instruction: 0x000136b8
   1365c:			; <UNDEFINED> instruction: 0x000136b8
   13660:			; <UNDEFINED> instruction: 0x000136b8
   13664:			; <UNDEFINED> instruction: 0x000136b8
   13668:			; <UNDEFINED> instruction: 0x000136b8
   1366c:			; <UNDEFINED> instruction: 0x000136b8
   13670:			; <UNDEFINED> instruction: 0x000136b8
   13674:			; <UNDEFINED> instruction: 0x000136b8
   13678:			; <UNDEFINED> instruction: 0x000136b8
   1367c:			; <UNDEFINED> instruction: 0x000136b8
   13680:			; <UNDEFINED> instruction: 0x000136b8
   13684:			; <UNDEFINED> instruction: 0x000136b8
   13688:			; <UNDEFINED> instruction: 0x000136b8
   1368c:			; <UNDEFINED> instruction: 0x000136b8
   13690:			; <UNDEFINED> instruction: 0x000136b8
   13694:			; <UNDEFINED> instruction: 0x000136b8
   13698:			; <UNDEFINED> instruction: 0x000136b8
   1369c:			; <UNDEFINED> instruction: 0x000136b8
   136a0:			; <UNDEFINED> instruction: 0x000136b8
   136a4:			; <UNDEFINED> instruction: 0x000136b8
   136a8:			; <UNDEFINED> instruction: 0x000136b8
   136ac:			; <UNDEFINED> instruction: 0x000136b8
   136b0:			; <UNDEFINED> instruction: 0x000136b8
   136b4:	andeq	r3, r1, r8, ror fp
   136b8:	add	r2, r2, #1
   136bc:	cmp	r2, r0
   136c0:	bcc	13618 <_obstack_memory_used@@Base+0xca4>
   136c4:	ldr	r7, [sp, #44]	; 0x2c
   136c8:	add	r7, r0, r7
   136cc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   136d0:	bl	10f88 <iswprint@plt>
   136d4:	cmp	r0, #0
   136d8:	movwne	r0, #1
   136dc:	and	r9, r9, r0
   136e0:	sub	r4, fp, #40	; 0x28
   136e4:	mov	r0, r4
   136e8:	bl	10f34 <mbsinit@plt>
   136ec:	ldr	lr, [sp, #28]
   136f0:	cmp	r0, #0
   136f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   136f8:	beq	135b0 <_obstack_memory_used@@Base+0xc3c>
   136fc:	b	13a98 <_obstack_memory_used@@Base+0x1124>
   13700:	ldr	r0, [sp, #32]
   13704:	cmp	r0, #0
   13708:	beq	137a0 <_obstack_memory_used@@Base+0xe2c>
   1370c:	add	r0, r6, #2
   13710:	cmp	r0, lr
   13714:	bcs	137a0 <_obstack_memory_used@@Base+0xe2c>
   13718:	add	r1, ip, r6
   1371c:	ldrb	r1, [r1, #1]
   13720:	cmp	r1, #63	; 0x3f
   13724:	bne	137a0 <_obstack_memory_used@@Base+0xe2c>
   13728:	ldrb	r9, [ip, r0]
   1372c:	sub	r2, r9, #33	; 0x21
   13730:	cmp	r2, #29
   13734:	bhi	137a0 <_obstack_memory_used@@Base+0xe2c>
   13738:	mov	r3, #1
   1373c:	movw	r1, #20929	; 0x51c1
   13740:	movt	r1, #14336	; 0x3800
   13744:	tst	r1, r3, lsl r2
   13748:	beq	137a0 <_obstack_memory_used@@Base+0xe2c>
   1374c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13750:	tst	r1, #1
   13754:	bne	13b80 <_obstack_memory_used@@Base+0x120c>
   13758:	cmp	r8, r4
   1375c:	movcc	r1, #63	; 0x3f
   13760:	strbcc	r1, [r7, r8]
   13764:	add	r2, r8, #1
   13768:	cmp	r2, r4
   1376c:	movcc	r1, #34	; 0x22
   13770:	strbcc	r1, [r7, r2]
   13774:	add	r2, r8, #2
   13778:	cmp	r2, r4
   1377c:	movcc	r1, #34	; 0x22
   13780:	strbcc	r1, [r7, r2]
   13784:	add	r2, r8, #3
   13788:	cmp	r2, r4
   1378c:	movcc	r1, #63	; 0x3f
   13790:	strbcc	r1, [r7, r2]
   13794:	add	r8, r8, #4
   13798:	mov	r6, r0
   1379c:	mov	r5, r9
   137a0:	mov	r9, #0
   137a4:	b	131f4 <_obstack_memory_used@@Base+0x880>
   137a8:	add	r1, r2, r6
   137ac:	str	r1, [sp, #44]	; 0x2c
   137b0:	add	r1, r6, #1
   137b4:	mov	r3, #0
   137b8:	ldr	lr, [sp, #28]
   137bc:	ldr	r6, [fp, #-60]	; 0xffffffc4
   137c0:	tst	r0, #1
   137c4:	bne	138b8 <_obstack_memory_used@@Base+0xf44>
   137c8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   137cc:	tst	r2, #1
   137d0:	bne	13b80 <_obstack_memory_used@@Base+0x120c>
   137d4:	cmp	r6, #2
   137d8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   137dc:	movwne	r3, #1
   137e0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   137e4:	orr	r3, r3, r2
   137e8:	tst	r3, #1
   137ec:	bne	13828 <_obstack_memory_used@@Base+0xeb4>
   137f0:	cmp	r8, r4
   137f4:	movcc	r2, #39	; 0x27
   137f8:	strbcc	r2, [r7, r8]
   137fc:	add	r3, r8, #1
   13800:	cmp	r3, r4
   13804:	movcc	r2, #36	; 0x24
   13808:	strbcc	r2, [r7, r3]
   1380c:	add	r3, r8, #2
   13810:	cmp	r3, r4
   13814:	movcc	r2, #39	; 0x27
   13818:	strbcc	r2, [r7, r3]
   1381c:	add	r8, r8, #3
   13820:	mov	r2, #1
   13824:	str	r2, [fp, #-56]	; 0xffffffc8
   13828:	cmp	r8, r4
   1382c:	movcc	r2, #92	; 0x5c
   13830:	strbcc	r2, [r7, r8]
   13834:	add	r3, r8, #1
   13838:	cmp	r3, r4
   1383c:	bcs	1385c <_obstack_memory_used@@Base+0xee8>
   13840:	and	r7, r5, #192	; 0xc0
   13844:	mov	r2, #48	; 0x30
   13848:	orr	r7, r2, r7, lsr #6
   1384c:	ldr	r6, [sp, #80]	; 0x50
   13850:	strb	r7, [r6, r3]
   13854:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13858:	ldr	r7, [sp, #80]	; 0x50
   1385c:	add	r3, r8, #2
   13860:	cmp	r3, r4
   13864:	bcs	13884 <_obstack_memory_used@@Base+0xf10>
   13868:	lsr	r7, r5, #3
   1386c:	mov	r2, #6
   13870:	bfi	r7, r2, #3, #29
   13874:	ldr	r6, [sp, #80]	; 0x50
   13878:	strb	r7, [r6, r3]
   1387c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13880:	ldr	r7, [sp, #80]	; 0x50
   13884:	mov	r2, #6
   13888:	bfi	r5, r2, #3, #29
   1388c:	add	r8, r8, #3
   13890:	mov	r3, #1
   13894:	b	138dc <_obstack_memory_used@@Base+0xf68>
   13898:	ldr	r7, [sp, #80]	; 0x50
   1389c:	cmp	r8, r4
   138a0:	strbcc	r5, [r7, r8]
   138a4:	ldrb	r5, [ip, r1]
   138a8:	add	r1, r1, #1
   138ac:	add	r8, r8, #1
   138b0:	tst	r0, #1
   138b4:	beq	137c8 <_obstack_memory_used@@Base+0xe54>
   138b8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   138bc:	tst	r2, #1
   138c0:	beq	138d4 <_obstack_memory_used@@Base+0xf60>
   138c4:	cmp	r8, r4
   138c8:	movcc	r2, #92	; 0x5c
   138cc:	strbcc	r2, [r7, r8]
   138d0:	add	r8, r8, #1
   138d4:	mov	r2, #0
   138d8:	str	r2, [fp, #-52]	; 0xffffffcc
   138dc:	and	sl, r3, #1
   138e0:	ldr	r2, [sp, #44]	; 0x2c
   138e4:	cmp	r2, r1
   138e8:	bls	139f4 <_obstack_memory_used@@Base+0x1080>
   138ec:	cmp	sl, #0
   138f0:	movwne	sl, #1
   138f4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   138f8:	mvn	r7, r2
   138fc:	orr	r7, r7, sl
   13900:	tst	r7, #1
   13904:	bne	13898 <_obstack_memory_used@@Base+0xf24>
   13908:	cmp	r8, r4
   1390c:	ldrcc	r7, [sp, #80]	; 0x50
   13910:	movcc	r2, #39	; 0x27
   13914:	strbcc	r2, [r7, r8]
   13918:	add	r7, r8, #1
   1391c:	cmp	r7, r4
   13920:	ldrcc	r6, [sp, #80]	; 0x50
   13924:	movcc	r2, #39	; 0x27
   13928:	strbcc	r2, [r6, r7]
   1392c:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   13930:	add	r8, r8, #2
   13934:	mov	r2, #0
   13938:	str	r2, [fp, #-56]	; 0xffffffc8
   1393c:	b	13898 <_obstack_memory_used@@Base+0xf24>
   13940:	cmp	r8, r4
   13944:	movcc	r0, #39	; 0x27
   13948:	strbcc	r0, [r7, r8]
   1394c:	add	r0, r8, #1
   13950:	cmp	r0, r4
   13954:	movcc	r1, #36	; 0x24
   13958:	strbcc	r1, [r7, r0]
   1395c:	add	r0, r8, #2
   13960:	cmp	r0, r4
   13964:	movcc	r1, #39	; 0x27
   13968:	strbcc	r1, [r7, r0]
   1396c:	add	r0, r8, #3
   13970:	mov	r2, #1
   13974:	cmp	r0, r4
   13978:	movcc	r1, #92	; 0x5c
   1397c:	strbcc	r1, [r7, r0]
   13980:	str	r2, [fp, #-56]	; 0xffffffc8
   13984:	add	r8, r0, #1
   13988:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1398c:	cmp	r1, #2
   13990:	beq	139e4 <_obstack_memory_used@@Base+0x1070>
   13994:	add	r1, r6, #1
   13998:	mov	r9, #0
   1399c:	mov	sl, #1
   139a0:	mov	r5, #48	; 0x30
   139a4:	cmp	r1, lr
   139a8:	bcs	131f4 <_obstack_memory_used@@Base+0x880>
   139ac:	ldrb	r1, [ip, r1]
   139b0:	sub	r1, r1, #48	; 0x30
   139b4:	uxtb	r1, r1
   139b8:	cmp	r1, #9
   139bc:	bhi	131f4 <_obstack_memory_used@@Base+0x880>
   139c0:	cmp	r8, r4
   139c4:	movcc	r1, #48	; 0x30
   139c8:	strbcc	r1, [r7, r8]
   139cc:	add	r1, r0, #2
   139d0:	cmp	r1, r4
   139d4:	movcc	r2, #48	; 0x30
   139d8:	strbcc	r2, [r7, r1]
   139dc:	add	r8, r0, #3
   139e0:	b	131f4 <_obstack_memory_used@@Base+0x880>
   139e4:	mov	r0, #48	; 0x30
   139e8:	mov	sl, #1
   139ec:	mov	r9, #0
   139f0:	b	134a0 <_obstack_memory_used@@Base+0xb2c>
   139f4:	sub	r6, r1, #1
   139f8:	cmp	sl, #0
   139fc:	movwne	sl, #1
   13a00:	mov	r0, r5
   13a04:	cmp	sl, #0
   13a08:	bne	13a48 <_obstack_memory_used@@Base+0x10d4>
   13a0c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13a10:	tst	r1, #1
   13a14:	beq	13a48 <_obstack_memory_used@@Base+0x10d4>
   13a18:	cmp	r8, r4
   13a1c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13a20:	movcc	r1, #39	; 0x27
   13a24:	strbcc	r1, [r7, r8]
   13a28:	add	r1, r8, #1
   13a2c:	cmp	r1, r4
   13a30:	movcc	r2, #39	; 0x27
   13a34:	strbcc	r2, [r7, r1]
   13a38:	add	r8, r8, #2
   13a3c:	mov	r1, #0
   13a40:	str	r1, [fp, #-56]	; 0xffffffc8
   13a44:	b	1352c <_obstack_memory_used@@Base+0xbb8>
   13a48:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13a4c:	b	1352c <_obstack_memory_used@@Base+0xbb8>
   13a50:	mov	r9, #0
   13a54:	b	13a90 <_obstack_memory_used@@Base+0x111c>
   13a58:	mov	r9, #0
   13a5c:	cmp	r7, lr
   13a60:	bcs	13a90 <_obstack_memory_used@@Base+0x111c>
   13a64:	ldr	ip, [fp, #-84]	; 0xffffffac
   13a68:	ldr	r7, [sp, #44]	; 0x2c
   13a6c:	ldr	r0, [sp, #20]
   13a70:	ldrb	r0, [r0, r7]
   13a74:	cmp	r0, #0
   13a78:	beq	13a98 <_obstack_memory_used@@Base+0x1124>
   13a7c:	add	r7, r7, #1
   13a80:	add	r0, r6, r7
   13a84:	cmp	r0, lr
   13a88:	bcc	13a6c <_obstack_memory_used@@Base+0x10f8>
   13a8c:	b	13a98 <_obstack_memory_used@@Base+0x1124>
   13a90:	ldr	ip, [fp, #-84]	; 0xffffffac
   13a94:	ldr	r7, [sp, #44]	; 0x2c
   13a98:	mov	r1, r7
   13a9c:	ldr	r7, [sp, #80]	; 0x50
   13aa0:	b	133c8 <_obstack_memory_used@@Base+0xa54>
   13aa4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13aa8:	eor	r0, r1, #2
   13aac:	orr	r0, r0, r8
   13ab0:	clz	r0, r0
   13ab4:	lsr	r0, r0, #5
   13ab8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13abc:	tst	r2, r0
   13ac0:	bne	13b80 <_obstack_memory_used@@Base+0x120c>
   13ac4:	cmp	r1, #2
   13ac8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13acc:	movwne	r0, #1
   13ad0:	orr	r0, r2, r0
   13ad4:	tst	r0, #1
   13ad8:	ldreq	r0, [sp, #56]	; 0x38
   13adc:	eoreq	r0, r0, #1
   13ae0:	tsteq	r0, #1
   13ae4:	bne	13b18 <_obstack_memory_used@@Base+0x11a4>
   13ae8:	mov	r9, lr
   13aec:	tst	r5, #1
   13af0:	bne	13be8 <_obstack_memory_used@@Base+0x1274>
   13af4:	ldr	r0, [sp, #72]	; 0x48
   13af8:	cmp	r0, #0
   13afc:	beq	13b18 <_obstack_memory_used@@Base+0x11a4>
   13b00:	mov	r5, #0
   13b04:	cmp	r4, #0
   13b08:	ldr	r0, [sp, #84]	; 0x54
   13b0c:	mov	sl, r2
   13b10:	ldr	r6, [sp, #72]	; 0x48
   13b14:	beq	12cb0 <_obstack_memory_used@@Base+0x33c>
   13b18:	ldr	r1, [sp, #92]	; 0x5c
   13b1c:	clz	r0, r1
   13b20:	lsr	r0, r0, #5
   13b24:	orr	r0, r0, r2
   13b28:	tst	r0, #1
   13b2c:	bne	13b58 <_obstack_memory_used@@Base+0x11e4>
   13b30:	ldrb	r0, [r1]
   13b34:	cmp	r0, #0
   13b38:	beq	13b58 <_obstack_memory_used@@Base+0x11e4>
   13b3c:	add	r1, r1, #1
   13b40:	cmp	r8, r4
   13b44:	strbcc	r0, [r7, r8]
   13b48:	add	r8, r8, #1
   13b4c:	ldrb	r0, [r1], #1
   13b50:	cmp	r0, #0
   13b54:	bne	13b40 <_obstack_memory_used@@Base+0x11cc>
   13b58:	cmp	r8, r4
   13b5c:	movcc	r0, #0
   13b60:	strbcc	r0, [r7, r8]
   13b64:	b	13bdc <_obstack_memory_used@@Base+0x1268>
   13b68:	ldr	ip, [fp, #-84]	; 0xffffffac
   13b6c:	mov	lr, r4
   13b70:	mov	r4, r5
   13b74:	b	13b80 <_obstack_memory_used@@Base+0x120c>
   13b78:	ldr	r7, [sp, #80]	; 0x50
   13b7c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13b80:	mov	r0, #0
   13b84:	ldr	r1, [fp, #12]
   13b88:	bic	r1, r1, #2
   13b8c:	ldr	r2, [sp, #84]	; 0x54
   13b90:	tst	r2, #1
   13b94:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13b98:	mov	r2, r3
   13b9c:	movwne	r2, #4
   13ba0:	cmp	r3, #2
   13ba4:	movne	r2, r3
   13ba8:	str	r2, [sp]
   13bac:	str	r1, [sp, #4]
   13bb0:	str	r0, [sp, #8]
   13bb4:	ldr	r0, [sp, #68]	; 0x44
   13bb8:	str	r0, [sp, #12]
   13bbc:	ldr	r0, [sp, #76]	; 0x4c
   13bc0:	str	r0, [sp, #16]
   13bc4:	mov	r0, r7
   13bc8:	mov	r1, r4
   13bcc:	mov	r2, ip
   13bd0:	mov	r3, lr
   13bd4:	bl	12c28 <_obstack_memory_used@@Base+0x2b4>
   13bd8:	mov	r8, r0
   13bdc:	mov	r0, r8
   13be0:	sub	sp, fp, #28
   13be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13be8:	mov	r0, #5
   13bec:	str	r0, [sp]
   13bf0:	ldr	r0, [fp, #12]
   13bf4:	str	r0, [sp, #4]
   13bf8:	ldr	r0, [fp, #16]
   13bfc:	str	r0, [sp, #8]
   13c00:	ldr	r0, [sp, #68]	; 0x44
   13c04:	str	r0, [sp, #12]
   13c08:	ldr	r0, [sp, #76]	; 0x4c
   13c0c:	str	r0, [sp, #16]
   13c10:	mov	r0, r7
   13c14:	ldr	r1, [sp, #72]	; 0x48
   13c18:	ldr	r2, [fp, #-84]	; 0xffffffac
   13c1c:	mov	r3, r9
   13c20:	b	13bd4 <_obstack_memory_used@@Base+0x1260>
   13c24:	bl	1112c <abort@plt>
   13c28:	mov	r3, r2
   13c2c:	mov	r2, #0
   13c30:	b	13c34 <_obstack_memory_used@@Base+0x12c0>
   13c34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c38:	add	fp, sp, #28
   13c3c:	sub	sp, sp, #36	; 0x24
   13c40:	mov	r4, r2
   13c44:	str	r2, [sp, #24]
   13c48:	mov	r5, r1
   13c4c:	mov	r6, r0
   13c50:	str	r0, [sp, #20]
   13c54:	movw	r8, #33176	; 0x8198
   13c58:	movt	r8, #2
   13c5c:	cmp	r3, #0
   13c60:	movne	r8, r3
   13c64:	bl	11084 <__errno_location@plt>
   13c68:	str	r0, [sp, #28]
   13c6c:	ldm	r8, {r3, r9}
   13c70:	ldr	r1, [r8, #40]	; 0x28
   13c74:	ldr	r2, [r8, #44]	; 0x2c
   13c78:	ldr	r7, [r0]
   13c7c:	str	r7, [sp, #32]
   13c80:	add	sl, r8, #8
   13c84:	cmp	r4, #0
   13c88:	orreq	r9, r9, #1
   13c8c:	stm	sp, {r3, r9, sl}
   13c90:	str	r1, [sp, #12]
   13c94:	str	r2, [sp, #16]
   13c98:	mov	r0, #0
   13c9c:	mov	r1, #0
   13ca0:	mov	r2, r6
   13ca4:	mov	r3, r5
   13ca8:	mov	r7, r5
   13cac:	bl	12c28 <_obstack_memory_used@@Base+0x2b4>
   13cb0:	mov	r5, r0
   13cb4:	add	r4, r0, #1
   13cb8:	mov	r0, r4
   13cbc:	bl	14b38 <_obstack_memory_used@@Base+0x21c4>
   13cc0:	mov	r6, r0
   13cc4:	ldr	r0, [r8]
   13cc8:	ldr	r1, [r8, #40]	; 0x28
   13ccc:	ldr	r2, [r8, #44]	; 0x2c
   13cd0:	stm	sp, {r0, r9, sl}
   13cd4:	str	r1, [sp, #12]
   13cd8:	str	r2, [sp, #16]
   13cdc:	mov	r0, r6
   13ce0:	mov	r1, r4
   13ce4:	ldr	r2, [sp, #20]
   13ce8:	mov	r3, r7
   13cec:	bl	12c28 <_obstack_memory_used@@Base+0x2b4>
   13cf0:	ldr	r0, [sp, #24]
   13cf4:	ldr	r1, [sp, #32]
   13cf8:	ldr	r2, [sp, #28]
   13cfc:	str	r1, [r2]
   13d00:	cmp	r0, #0
   13d04:	strne	r5, [r0]
   13d08:	mov	r0, r6
   13d0c:	sub	sp, fp, #28
   13d10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d14:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13d18:	add	fp, sp, #24
   13d1c:	movw	r8, #33016	; 0x80f8
   13d20:	movt	r8, #2
   13d24:	ldr	r4, [r8]
   13d28:	movw	r5, #33020	; 0x80fc
   13d2c:	movt	r5, #2
   13d30:	ldr	r0, [r5]
   13d34:	cmp	r0, #2
   13d38:	blt	13d64 <_obstack_memory_used@@Base+0x13f0>
   13d3c:	add	r7, r4, #12
   13d40:	mov	r6, #0
   13d44:	ldr	r0, [r7, r6, lsl #3]
   13d48:	bl	123dc <close@plt+0x12a4>
   13d4c:	add	r0, r6, #1
   13d50:	ldr	r1, [r5]
   13d54:	add	r2, r6, #2
   13d58:	cmp	r2, r1
   13d5c:	mov	r6, r0
   13d60:	blt	13d44 <_obstack_memory_used@@Base+0x13d0>
   13d64:	ldr	r0, [r4, #4]
   13d68:	movw	r7, #33224	; 0x81c8
   13d6c:	movt	r7, #2
   13d70:	cmp	r0, r7
   13d74:	beq	13d8c <_obstack_memory_used@@Base+0x1418>
   13d78:	bl	123dc <close@plt+0x12a4>
   13d7c:	movw	r0, #33024	; 0x8100
   13d80:	movt	r0, #2
   13d84:	mov	r6, #256	; 0x100
   13d88:	strd	r6, [r0]
   13d8c:	movw	r6, #33024	; 0x8100
   13d90:	movt	r6, #2
   13d94:	cmp	r4, r6
   13d98:	beq	13da8 <_obstack_memory_used@@Base+0x1434>
   13d9c:	mov	r0, r4
   13da0:	bl	123dc <close@plt+0x12a4>
   13da4:	str	r6, [r8]
   13da8:	mov	r0, #1
   13dac:	str	r0, [r5]
   13db0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13db4:	movw	r3, #33176	; 0x8198
   13db8:	movt	r3, #2
   13dbc:	mvn	r2, #0
   13dc0:	b	13dc4 <_obstack_memory_used@@Base+0x1450>
   13dc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dc8:	add	fp, sp, #28
   13dcc:	sub	sp, sp, #44	; 0x2c
   13dd0:	mov	r7, r3
   13dd4:	str	r2, [sp, #36]	; 0x24
   13dd8:	str	r1, [sp, #32]
   13ddc:	mov	r5, r0
   13de0:	bl	11084 <__errno_location@plt>
   13de4:	cmp	r5, #0
   13de8:	blt	13f54 <_obstack_memory_used@@Base+0x15e0>
   13dec:	cmn	r5, #-2147483647	; 0x80000001
   13df0:	beq	13f54 <_obstack_memory_used@@Base+0x15e0>
   13df4:	movw	r4, #33016	; 0x80f8
   13df8:	movt	r4, #2
   13dfc:	ldr	r6, [r4]
   13e00:	str	r0, [sp, #28]
   13e04:	ldr	r0, [r0]
   13e08:	str	r0, [sp, #24]
   13e0c:	movw	r8, #33020	; 0x80fc
   13e10:	movt	r8, #2
   13e14:	ldr	r1, [r8]
   13e18:	cmp	r1, r5
   13e1c:	ble	13e28 <_obstack_memory_used@@Base+0x14b4>
   13e20:	mov	sl, r6
   13e24:	b	13e90 <_obstack_memory_used@@Base+0x151c>
   13e28:	str	r1, [fp, #-32]	; 0xffffffe0
   13e2c:	mov	r0, #8
   13e30:	str	r0, [sp]
   13e34:	movw	r9, #33024	; 0x8100
   13e38:	movt	r9, #2
   13e3c:	subs	r0, r6, r9
   13e40:	movne	r0, r6
   13e44:	add	r2, r5, #1
   13e48:	sub	r2, r2, r1
   13e4c:	sub	r1, fp, #32
   13e50:	mvn	r3, #-2147483648	; 0x80000000
   13e54:	bl	14c20 <_obstack_memory_used@@Base+0x22ac>
   13e58:	mov	sl, r0
   13e5c:	str	r0, [r4]
   13e60:	cmp	r6, r9
   13e64:	ldrdeq	r0, [r9]
   13e68:	stmeq	sl, {r0, r1}
   13e6c:	ldr	r1, [r8]
   13e70:	add	r0, sl, r1, lsl #3
   13e74:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13e78:	sub	r1, r2, r1
   13e7c:	lsl	r2, r1, #3
   13e80:	mov	r1, #0
   13e84:	bl	1109c <memset@plt>
   13e88:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13e8c:	str	r0, [r8]
   13e90:	mov	r9, sl
   13e94:	ldr	r6, [r9, r5, lsl #3]!
   13e98:	ldr	r4, [r9, #4]!
   13e9c:	ldm	r7, {r0, r1}
   13ea0:	ldr	r2, [r7, #40]	; 0x28
   13ea4:	ldr	r3, [r7, #44]	; 0x2c
   13ea8:	orr	r8, r1, #1
   13eac:	add	r1, r7, #8
   13eb0:	stm	sp, {r0, r8}
   13eb4:	str	r1, [sp, #20]
   13eb8:	add	r0, sp, #8
   13ebc:	stm	r0, {r1, r2, r3}
   13ec0:	mov	r0, r4
   13ec4:	mov	r1, r6
   13ec8:	ldr	r2, [sp, #32]
   13ecc:	ldr	r3, [sp, #36]	; 0x24
   13ed0:	bl	12c28 <_obstack_memory_used@@Base+0x2b4>
   13ed4:	cmp	r6, r0
   13ed8:	bhi	13f3c <_obstack_memory_used@@Base+0x15c8>
   13edc:	add	r6, r0, #1
   13ee0:	str	r6, [sl, r5, lsl #3]
   13ee4:	movw	r0, #33224	; 0x81c8
   13ee8:	movt	r0, #2
   13eec:	cmp	r4, r0
   13ef0:	beq	13efc <_obstack_memory_used@@Base+0x1588>
   13ef4:	mov	r0, r4
   13ef8:	bl	123dc <close@plt+0x12a4>
   13efc:	mov	r0, r6
   13f00:	bl	14b38 <_obstack_memory_used@@Base+0x21c4>
   13f04:	mov	r4, r0
   13f08:	str	r0, [r9]
   13f0c:	ldr	r0, [r7]
   13f10:	ldr	r1, [r7, #40]	; 0x28
   13f14:	ldr	r2, [r7, #44]	; 0x2c
   13f18:	stm	sp, {r0, r8}
   13f1c:	ldr	r0, [sp, #20]
   13f20:	add	r3, sp, #8
   13f24:	stm	r3, {r0, r1, r2}
   13f28:	mov	r0, r4
   13f2c:	mov	r1, r6
   13f30:	ldr	r2, [sp, #32]
   13f34:	ldr	r3, [sp, #36]	; 0x24
   13f38:	bl	12c28 <_obstack_memory_used@@Base+0x2b4>
   13f3c:	ldr	r0, [sp, #28]
   13f40:	ldr	r1, [sp, #24]
   13f44:	str	r1, [r0]
   13f48:	mov	r0, r4
   13f4c:	sub	sp, fp, #28
   13f50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f54:	bl	1112c <abort@plt>
   13f58:	movw	r3, #33176	; 0x8198
   13f5c:	movt	r3, #2
   13f60:	b	13dc4 <_obstack_memory_used@@Base+0x1450>
   13f64:	mov	r1, r0
   13f68:	mov	r0, #0
   13f6c:	b	13db4 <_obstack_memory_used@@Base+0x1440>
   13f70:	mov	r2, r1
   13f74:	mov	r1, r0
   13f78:	mov	r0, #0
   13f7c:	b	13f58 <_obstack_memory_used@@Base+0x15e4>
   13f80:	push	{r4, r5, r6, sl, fp, lr}
   13f84:	add	fp, sp, #16
   13f88:	sub	sp, sp, #48	; 0x30
   13f8c:	mov	r4, r2
   13f90:	mov	r5, r0
   13f94:	mov	r6, sp
   13f98:	mov	r0, r6
   13f9c:	bl	13fbc <_obstack_memory_used@@Base+0x1648>
   13fa0:	mov	r0, r5
   13fa4:	mov	r1, r4
   13fa8:	mvn	r2, #0
   13fac:	mov	r3, r6
   13fb0:	bl	13dc4 <_obstack_memory_used@@Base+0x1450>
   13fb4:	sub	sp, fp, #16
   13fb8:	pop	{r4, r5, r6, sl, fp, pc}
   13fbc:	vmov.i32	q8, #0	; 0x00000000
   13fc0:	mov	r2, #32
   13fc4:	mov	r3, r0
   13fc8:	vst1.32	{d16-d17}, [r3], r2
   13fcc:	vst1.32	{d16-d17}, [r3]
   13fd0:	add	r2, r0, #16
   13fd4:	vst1.32	{d16-d17}, [r2]
   13fd8:	cmp	r1, #10
   13fdc:	strne	r1, [r0]
   13fe0:	bxne	lr
   13fe4:	push	{fp, lr}
   13fe8:	mov	fp, sp
   13fec:	bl	1112c <abort@plt>
   13ff0:	push	{r4, r5, r6, r7, fp, lr}
   13ff4:	add	fp, sp, #16
   13ff8:	sub	sp, sp, #48	; 0x30
   13ffc:	mov	r4, r3
   14000:	mov	r5, r2
   14004:	mov	r6, r0
   14008:	mov	r7, sp
   1400c:	mov	r0, r7
   14010:	bl	13fbc <_obstack_memory_used@@Base+0x1648>
   14014:	mov	r0, r6
   14018:	mov	r1, r5
   1401c:	mov	r2, r4
   14020:	mov	r3, r7
   14024:	bl	13dc4 <_obstack_memory_used@@Base+0x1450>
   14028:	sub	sp, fp, #16
   1402c:	pop	{r4, r5, r6, r7, fp, pc}
   14030:	mov	r2, r1
   14034:	mov	r1, r0
   14038:	mov	r0, #0
   1403c:	b	13f80 <_obstack_memory_used@@Base+0x160c>
   14040:	mov	r3, r2
   14044:	mov	r2, r1
   14048:	mov	r1, r0
   1404c:	mov	r0, #0
   14050:	b	13ff0 <_obstack_memory_used@@Base+0x167c>
   14054:	push	{r4, r5, r6, sl, fp, lr}
   14058:	add	fp, sp, #16
   1405c:	sub	sp, sp, #48	; 0x30
   14060:	mov	r4, r1
   14064:	mov	r5, r0
   14068:	mov	r0, #32
   1406c:	movw	r1, #33176	; 0x8198
   14070:	movt	r1, #2
   14074:	add	r3, r1, #16
   14078:	vld1.64	{d16-d17}, [r1], r0
   1407c:	mov	r6, sp
   14080:	vld1.64	{d18-d19}, [r3]
   14084:	add	r3, r6, #16
   14088:	vld1.64	{d20-d21}, [r1]
   1408c:	vst1.64	{d18-d19}, [r3]
   14090:	mov	r1, r6
   14094:	vst1.64	{d16-d17}, [r1], r0
   14098:	vst1.64	{d20-d21}, [r1]
   1409c:	mov	r0, r6
   140a0:	mov	r1, r2
   140a4:	mov	r2, #1
   140a8:	bl	12b1c <_obstack_memory_used@@Base+0x1a8>
   140ac:	mov	r0, #0
   140b0:	mov	r1, r5
   140b4:	mov	r2, r4
   140b8:	mov	r3, r6
   140bc:	bl	13dc4 <_obstack_memory_used@@Base+0x1450>
   140c0:	sub	sp, fp, #16
   140c4:	pop	{r4, r5, r6, sl, fp, pc}
   140c8:	mov	r2, r1
   140cc:	mvn	r1, #0
   140d0:	b	14054 <_obstack_memory_used@@Base+0x16e0>
   140d4:	mov	r1, #58	; 0x3a
   140d8:	b	140c8 <_obstack_memory_used@@Base+0x1754>
   140dc:	mov	r2, #58	; 0x3a
   140e0:	b	14054 <_obstack_memory_used@@Base+0x16e0>
   140e4:	push	{r4, r5, r6, sl, fp, lr}
   140e8:	add	fp, sp, #16
   140ec:	sub	sp, sp, #48	; 0x30
   140f0:	mov	r4, r2
   140f4:	mov	r5, r0
   140f8:	mov	r6, sp
   140fc:	mov	r0, r6
   14100:	bl	13fbc <_obstack_memory_used@@Base+0x1648>
   14104:	mov	r0, r6
   14108:	mov	r1, #58	; 0x3a
   1410c:	mov	r2, #1
   14110:	bl	12b1c <_obstack_memory_used@@Base+0x1a8>
   14114:	mov	r0, r5
   14118:	mov	r1, r4
   1411c:	mvn	r2, #0
   14120:	mov	r3, r6
   14124:	bl	13dc4 <_obstack_memory_used@@Base+0x1450>
   14128:	sub	sp, fp, #16
   1412c:	pop	{r4, r5, r6, sl, fp, pc}
   14130:	push	{fp, lr}
   14134:	mov	fp, sp
   14138:	sub	sp, sp, #8
   1413c:	mvn	ip, #0
   14140:	str	ip, [sp]
   14144:	bl	14150 <_obstack_memory_used@@Base+0x17dc>
   14148:	mov	sp, fp
   1414c:	pop	{fp, pc}
   14150:	push	{r4, r5, r6, r7, fp, lr}
   14154:	add	fp, sp, #16
   14158:	sub	sp, sp, #48	; 0x30
   1415c:	mov	r7, r3
   14160:	mov	r5, r0
   14164:	mov	r0, #32
   14168:	movw	r3, #33176	; 0x8198
   1416c:	movt	r3, #2
   14170:	add	r4, r3, #16
   14174:	vld1.64	{d16-d17}, [r3], r0
   14178:	mov	r6, sp
   1417c:	vld1.64	{d18-d19}, [r4]
   14180:	add	r4, r6, #16
   14184:	vld1.64	{d20-d21}, [r3]
   14188:	vst1.64	{d18-d19}, [r4]
   1418c:	mov	r3, r6
   14190:	vst1.64	{d16-d17}, [r3], r0
   14194:	vst1.64	{d20-d21}, [r3]
   14198:	mov	r0, r6
   1419c:	bl	12b74 <_obstack_memory_used@@Base+0x200>
   141a0:	ldr	r2, [fp, #8]
   141a4:	mov	r0, r5
   141a8:	mov	r1, r7
   141ac:	mov	r3, r6
   141b0:	bl	13dc4 <_obstack_memory_used@@Base+0x1450>
   141b4:	sub	sp, fp, #16
   141b8:	pop	{r4, r5, r6, r7, fp, pc}
   141bc:	mov	r3, r2
   141c0:	mov	r2, r1
   141c4:	mov	r1, r0
   141c8:	mov	r0, #0
   141cc:	b	14130 <_obstack_memory_used@@Base+0x17bc>
   141d0:	push	{fp, lr}
   141d4:	mov	fp, sp
   141d8:	sub	sp, sp, #8
   141dc:	mov	ip, r2
   141e0:	mov	r2, r1
   141e4:	mov	r1, r0
   141e8:	str	r3, [sp]
   141ec:	mov	r0, #0
   141f0:	mov	r3, ip
   141f4:	bl	14150 <_obstack_memory_used@@Base+0x17dc>
   141f8:	mov	sp, fp
   141fc:	pop	{fp, pc}
   14200:	movw	r3, #33032	; 0x8108
   14204:	movt	r3, #2
   14208:	b	13dc4 <_obstack_memory_used@@Base+0x1450>
   1420c:	mov	r2, r1
   14210:	mov	r1, r0
   14214:	mov	r0, #0
   14218:	b	14200 <_obstack_memory_used@@Base+0x188c>
   1421c:	mvn	r2, #0
   14220:	b	14200 <_obstack_memory_used@@Base+0x188c>
   14224:	mov	r1, r0
   14228:	mov	r0, #0
   1422c:	b	1421c <_obstack_memory_used@@Base+0x18a8>
   14230:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14234:	add	fp, sp, #24
   14238:	sub	sp, sp, #16
   1423c:	mov	r4, r1
   14240:	mov	r5, r0
   14244:	mov	r7, #0
   14248:	mov	r0, #0
   1424c:	mov	r1, r5
   14250:	mov	r2, #5
   14254:	bl	10f58 <dcgettext@plt>
   14258:	cmp	r0, r5
   1425c:	beq	14268 <_obstack_memory_used@@Base+0x18f4>
   14260:	sub	sp, fp, #24
   14264:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14268:	bl	153c4 <_obstack_memory_used@@Base+0x2a50>
   1426c:	mov	r6, r0
   14270:	mov	r8, #56	; 0x38
   14274:	mov	r0, #45	; 0x2d
   14278:	stm	sp, {r0, r8}
   1427c:	str	r7, [sp, #8]
   14280:	str	r7, [sp, #12]
   14284:	mov	r0, r6
   14288:	mov	r1, #85	; 0x55
   1428c:	mov	r2, #84	; 0x54
   14290:	mov	r3, #70	; 0x46
   14294:	bl	1432c <_obstack_memory_used@@Base+0x19b8>
   14298:	cmp	r0, #0
   1429c:	beq	142b8 <_obstack_memory_used@@Base+0x1944>
   142a0:	ldrb	r1, [r5]
   142a4:	movw	r2, #28883	; 0x70d3
   142a8:	movt	r2, #1
   142ac:	movw	r0, #28887	; 0x70d7
   142b0:	movt	r0, #1
   142b4:	b	142fc <_obstack_memory_used@@Base+0x1988>
   142b8:	mov	r0, #48	; 0x30
   142bc:	mov	r1, #51	; 0x33
   142c0:	str	r8, [sp]
   142c4:	stmib	sp, {r0, r1}
   142c8:	str	r0, [sp, #12]
   142cc:	mov	r0, r6
   142d0:	mov	r1, #71	; 0x47
   142d4:	mov	r2, #66	; 0x42
   142d8:	mov	r3, #49	; 0x31
   142dc:	bl	1432c <_obstack_memory_used@@Base+0x19b8>
   142e0:	cmp	r0, #0
   142e4:	beq	1430c <_obstack_memory_used@@Base+0x1998>
   142e8:	ldrb	r1, [r5]
   142ec:	movw	r2, #28891	; 0x70db
   142f0:	movt	r2, #1
   142f4:	movw	r0, #28895	; 0x70df
   142f8:	movt	r0, #1
   142fc:	cmp	r1, #96	; 0x60
   14300:	moveq	r0, r2
   14304:	sub	sp, fp, #24
   14308:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1430c:	movw	r1, #28879	; 0x70cf
   14310:	movt	r1, #1
   14314:	movw	r0, #23083	; 0x5a2b
   14318:	movt	r0, #1
   1431c:	cmp	r4, #9
   14320:	moveq	r0, r1
   14324:	sub	sp, fp, #24
   14328:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1432c:	push	{r4, r5, r6, r7, fp, lr}
   14330:	add	fp, sp, #16
   14334:	sub	sp, sp, #16
   14338:	mov	r4, r3
   1433c:	mov	r5, r2
   14340:	mov	r7, r1
   14344:	mov	r6, r0
   14348:	mov	r0, r1
   1434c:	bl	1527c <_obstack_memory_used@@Base+0x2908>
   14350:	ldrb	r1, [r6]
   14354:	cmp	r0, #0
   14358:	andne	r1, r1, #223	; 0xdf
   1435c:	mov	r0, #0
   14360:	cmp	r1, r7
   14364:	bne	143a4 <_obstack_memory_used@@Base+0x1a30>
   14368:	cmp	r7, #0
   1436c:	moveq	r0, #1
   14370:	subeq	sp, fp, #16
   14374:	popeq	{r4, r5, r6, r7, fp, pc}
   14378:	ldr	r0, [fp, #20]
   1437c:	ldr	r1, [fp, #16]
   14380:	ldr	r2, [fp, #12]
   14384:	ldr	r3, [fp, #8]
   14388:	str	r2, [sp]
   1438c:	str	r1, [sp, #4]
   14390:	str	r0, [sp, #8]
   14394:	mov	r0, r6
   14398:	mov	r1, r5
   1439c:	mov	r2, r4
   143a0:	bl	143ac <_obstack_memory_used@@Base+0x1a38>
   143a4:	sub	sp, fp, #16
   143a8:	pop	{r4, r5, r6, r7, fp, pc}
   143ac:	push	{r4, r5, r6, r7, fp, lr}
   143b0:	add	fp, sp, #16
   143b4:	sub	sp, sp, #8
   143b8:	mov	r4, r3
   143bc:	mov	r5, r2
   143c0:	mov	r7, r1
   143c4:	mov	r6, r0
   143c8:	mov	r0, r1
   143cc:	bl	1527c <_obstack_memory_used@@Base+0x2908>
   143d0:	ldrb	r1, [r6, #1]
   143d4:	cmp	r0, #0
   143d8:	andne	r1, r1, #223	; 0xdf
   143dc:	mov	r0, #0
   143e0:	cmp	r1, r7
   143e4:	bne	1441c <_obstack_memory_used@@Base+0x1aa8>
   143e8:	cmp	r7, #0
   143ec:	moveq	r0, #1
   143f0:	subeq	sp, fp, #16
   143f4:	popeq	{r4, r5, r6, r7, fp, pc}
   143f8:	ldr	r0, [fp, #16]
   143fc:	ldr	r1, [fp, #12]
   14400:	ldr	r3, [fp, #8]
   14404:	str	r1, [sp]
   14408:	str	r0, [sp, #4]
   1440c:	mov	r0, r6
   14410:	mov	r1, r5
   14414:	mov	r2, r4
   14418:	bl	14424 <_obstack_memory_used@@Base+0x1ab0>
   1441c:	sub	sp, fp, #16
   14420:	pop	{r4, r5, r6, r7, fp, pc}
   14424:	push	{r4, r5, r6, r7, fp, lr}
   14428:	add	fp, sp, #16
   1442c:	sub	sp, sp, #8
   14430:	mov	r4, r3
   14434:	mov	r5, r2
   14438:	mov	r7, r1
   1443c:	mov	r6, r0
   14440:	mov	r0, r1
   14444:	bl	1527c <_obstack_memory_used@@Base+0x2908>
   14448:	ldrb	r1, [r6, #2]
   1444c:	cmp	r0, #0
   14450:	andne	r1, r1, #223	; 0xdf
   14454:	mov	r0, #0
   14458:	cmp	r1, r7
   1445c:	bne	1448c <_obstack_memory_used@@Base+0x1b18>
   14460:	cmp	r7, #0
   14464:	moveq	r0, #1
   14468:	subeq	sp, fp, #16
   1446c:	popeq	{r4, r5, r6, r7, fp, pc}
   14470:	ldr	r0, [fp, #12]
   14474:	ldr	r3, [fp, #8]
   14478:	str	r0, [sp]
   1447c:	mov	r0, r6
   14480:	mov	r1, r5
   14484:	mov	r2, r4
   14488:	bl	14494 <_obstack_memory_used@@Base+0x1b20>
   1448c:	sub	sp, fp, #16
   14490:	pop	{r4, r5, r6, r7, fp, pc}
   14494:	push	{r4, r5, r6, r7, fp, lr}
   14498:	add	fp, sp, #16
   1449c:	mov	r4, r3
   144a0:	mov	r5, r2
   144a4:	mov	r7, r1
   144a8:	mov	r6, r0
   144ac:	mov	r0, r1
   144b0:	bl	1527c <_obstack_memory_used@@Base+0x2908>
   144b4:	ldrb	r1, [r6, #3]
   144b8:	ldr	r3, [fp, #8]
   144bc:	cmp	r0, #0
   144c0:	andne	r1, r1, #223	; 0xdf
   144c4:	mov	r0, #0
   144c8:	cmp	r1, r7
   144cc:	popne	{r4, r5, r6, r7, fp, pc}
   144d0:	cmp	r7, #0
   144d4:	beq	144ec <_obstack_memory_used@@Base+0x1b78>
   144d8:	mov	r0, r6
   144dc:	mov	r1, r5
   144e0:	mov	r2, r4
   144e4:	pop	{r4, r5, r6, r7, fp, lr}
   144e8:	b	144f4 <_obstack_memory_used@@Base+0x1b80>
   144ec:	mov	r0, #1
   144f0:	pop	{r4, r5, r6, r7, fp, pc}
   144f4:	push	{r4, r5, r6, r7, fp, lr}
   144f8:	add	fp, sp, #16
   144fc:	mov	r4, r3
   14500:	mov	r5, r2
   14504:	mov	r7, r1
   14508:	mov	r6, r0
   1450c:	mov	r0, r1
   14510:	bl	1527c <_obstack_memory_used@@Base+0x2908>
   14514:	ldrb	r1, [r6, #4]
   14518:	cmp	r0, #0
   1451c:	andne	r1, r1, #223	; 0xdf
   14520:	mov	r0, #0
   14524:	cmp	r1, r7
   14528:	popne	{r4, r5, r6, r7, fp, pc}
   1452c:	cmp	r7, #0
   14530:	beq	14548 <_obstack_memory_used@@Base+0x1bd4>
   14534:	mov	r0, r6
   14538:	mov	r1, r5
   1453c:	mov	r2, r4
   14540:	pop	{r4, r5, r6, r7, fp, lr}
   14544:	b	14550 <_obstack_memory_used@@Base+0x1bdc>
   14548:	mov	r0, #1
   1454c:	pop	{r4, r5, r6, r7, fp, pc}
   14550:	push	{r4, r5, r6, sl, fp, lr}
   14554:	add	fp, sp, #16
   14558:	mov	r4, r2
   1455c:	mov	r6, r1
   14560:	mov	r5, r0
   14564:	mov	r0, r1
   14568:	bl	1527c <_obstack_memory_used@@Base+0x2908>
   1456c:	ldrb	r1, [r5, #5]
   14570:	cmp	r0, #0
   14574:	andne	r1, r1, #223	; 0xdf
   14578:	mov	r0, #0
   1457c:	cmp	r1, r6
   14580:	popne	{r4, r5, r6, sl, fp, pc}
   14584:	cmp	r6, #0
   14588:	beq	1459c <_obstack_memory_used@@Base+0x1c28>
   1458c:	mov	r0, r5
   14590:	mov	r1, r4
   14594:	pop	{r4, r5, r6, sl, fp, lr}
   14598:	b	145a4 <_obstack_memory_used@@Base+0x1c30>
   1459c:	mov	r0, #1
   145a0:	pop	{r4, r5, r6, sl, fp, pc}
   145a4:	push	{r4, r5, fp, lr}
   145a8:	add	fp, sp, #8
   145ac:	mov	r5, r1
   145b0:	mov	r4, r0
   145b4:	mov	r0, r1
   145b8:	bl	1527c <_obstack_memory_used@@Base+0x2908>
   145bc:	ldrb	r1, [r4, #6]
   145c0:	cmp	r0, #0
   145c4:	andne	r1, r1, #223	; 0xdf
   145c8:	mov	r0, #0
   145cc:	cmp	r1, r5
   145d0:	popne	{r4, r5, fp, pc}
   145d4:	cmp	r5, #0
   145d8:	beq	145e8 <_obstack_memory_used@@Base+0x1c74>
   145dc:	mov	r0, r4
   145e0:	pop	{r4, r5, fp, lr}
   145e4:	b	145f0 <_obstack_memory_used@@Base+0x1c7c>
   145e8:	mov	r0, #1
   145ec:	pop	{r4, r5, fp, pc}
   145f0:	push	{r4, sl, fp, lr}
   145f4:	add	fp, sp, #8
   145f8:	mov	r4, r0
   145fc:	mov	r0, #0
   14600:	bl	1527c <_obstack_memory_used@@Base+0x2908>
   14604:	ldrb	r1, [r4, #7]
   14608:	cmp	r0, #0
   1460c:	beq	14624 <_obstack_memory_used@@Base+0x1cb0>
   14610:	tst	r1, #223	; 0xdf
   14614:	moveq	r0, #1
   14618:	popeq	{r4, sl, fp, pc}
   1461c:	mov	r0, #0
   14620:	pop	{r4, sl, fp, pc}
   14624:	cmp	r1, #0
   14628:	moveq	r0, #1
   1462c:	popeq	{r4, sl, fp, pc}
   14630:	mov	r0, #0
   14634:	pop	{r4, sl, fp, pc}
   14638:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1463c:	add	fp, sp, #24
   14640:	sub	sp, sp, #32
   14644:	mov	r4, r2
   14648:	mov	r8, r0
   1464c:	ldr	r6, [fp, #12]
   14650:	ldr	r7, [fp, #8]
   14654:	cmp	r1, #0
   14658:	beq	14680 <_obstack_memory_used@@Base+0x1d0c>
   1465c:	mov	r5, r1
   14660:	str	r4, [sp]
   14664:	str	r3, [sp, #4]
   14668:	movw	r2, #28984	; 0x7138
   1466c:	movt	r2, #1
   14670:	mov	r0, r8
   14674:	mov	r1, #1
   14678:	mov	r3, r5
   1467c:	b	14698 <_obstack_memory_used@@Base+0x1d24>
   14680:	str	r3, [sp]
   14684:	movw	r2, #28996	; 0x7144
   14688:	movt	r2, #1
   1468c:	mov	r0, r8
   14690:	mov	r1, #1
   14694:	mov	r3, r4
   14698:	bl	110c0 <__fprintf_chk@plt>
   1469c:	movw	r1, #29003	; 0x714b
   146a0:	movt	r1, #1
   146a4:	mov	r0, #0
   146a8:	mov	r2, #5
   146ac:	bl	10f58 <dcgettext@plt>
   146b0:	mov	r3, r0
   146b4:	movw	r0, #2022	; 0x7e6
   146b8:	str	r0, [sp]
   146bc:	movw	r2, #29721	; 0x7419
   146c0:	movt	r2, #1
   146c4:	mov	r0, r8
   146c8:	mov	r1, #1
   146cc:	bl	110c0 <__fprintf_chk@plt>
   146d0:	movw	r4, #23394	; 0x5b62
   146d4:	movt	r4, #1
   146d8:	mov	r0, r4
   146dc:	mov	r1, r8
   146e0:	bl	10eec <fputs_unlocked@plt>
   146e4:	movw	r1, #29007	; 0x714f
   146e8:	movt	r1, #1
   146ec:	mov	r0, #0
   146f0:	mov	r2, #5
   146f4:	bl	10f58 <dcgettext@plt>
   146f8:	mov	r2, r0
   146fc:	movw	r3, #29178	; 0x71fa
   14700:	movt	r3, #1
   14704:	mov	r0, r8
   14708:	mov	r1, #1
   1470c:	bl	110c0 <__fprintf_chk@plt>
   14710:	mov	r0, r4
   14714:	mov	r1, r8
   14718:	bl	10eec <fputs_unlocked@plt>
   1471c:	cmp	r6, #9
   14720:	bhi	1475c <_obstack_memory_used@@Base+0x1de8>
   14724:	add	r0, pc, #0
   14728:	ldr	pc, [r0, r6, lsl #2]
   1472c:	andeq	r4, r1, r4, asr r7
   14730:	andeq	r4, r1, r8, ror #14
   14734:	muleq	r1, r8, r7
   14738:	andeq	r4, r1, r0, asr #15
   1473c:	andeq	r4, r1, r8, ror #15
   14740:	andeq	r4, r1, r0, lsl r8
   14744:	andeq	r4, r1, r8, lsr r8
   14748:	andeq	r4, r1, r0, ror r8
   1474c:	andeq	r4, r1, r0, lsl r9
   14750:			; <UNDEFINED> instruction: 0x000148b8
   14754:	sub	sp, fp, #24
   14758:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1475c:	movw	r1, #29531	; 0x735b
   14760:	movt	r1, #1
   14764:	b	148c0 <_obstack_memory_used@@Base+0x1f4c>
   14768:	movw	r1, #29212	; 0x721c
   1476c:	movt	r1, #1
   14770:	mov	r0, #0
   14774:	mov	r2, #5
   14778:	bl	10f58 <dcgettext@plt>
   1477c:	mov	r2, r0
   14780:	ldr	r3, [r7]
   14784:	mov	r0, r8
   14788:	mov	r1, #1
   1478c:	sub	sp, fp, #24
   14790:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14794:	b	110c0 <__fprintf_chk@plt>
   14798:	movw	r1, #29228	; 0x722c
   1479c:	movt	r1, #1
   147a0:	mov	r0, #0
   147a4:	mov	r2, #5
   147a8:	bl	10f58 <dcgettext@plt>
   147ac:	mov	r2, r0
   147b0:	ldr	r3, [r7]
   147b4:	ldr	r0, [r7, #4]
   147b8:	str	r0, [sp]
   147bc:	b	148ac <_obstack_memory_used@@Base+0x1f38>
   147c0:	movw	r1, #29251	; 0x7243
   147c4:	movt	r1, #1
   147c8:	mov	r0, #0
   147cc:	mov	r2, #5
   147d0:	bl	10f58 <dcgettext@plt>
   147d4:	mov	r2, r0
   147d8:	ldr	r3, [r7]
   147dc:	ldmib	r7, {r0, r1}
   147e0:	stm	sp, {r0, r1}
   147e4:	b	148ac <_obstack_memory_used@@Base+0x1f38>
   147e8:	movw	r1, #29279	; 0x725f
   147ec:	movt	r1, #1
   147f0:	mov	r0, #0
   147f4:	mov	r2, #5
   147f8:	bl	10f58 <dcgettext@plt>
   147fc:	mov	r2, r0
   14800:	ldr	r3, [r7]
   14804:	ldmib	r7, {r0, r1, r7}
   14808:	stm	sp, {r0, r1, r7}
   1480c:	b	148ac <_obstack_memory_used@@Base+0x1f38>
   14810:	movw	r1, #29311	; 0x727f
   14814:	movt	r1, #1
   14818:	mov	r0, #0
   1481c:	mov	r2, #5
   14820:	bl	10f58 <dcgettext@plt>
   14824:	mov	r2, r0
   14828:	ldr	r3, [r7]
   1482c:	ldmib	r7, {r0, r1, r6, r7}
   14830:	stm	sp, {r0, r1, r6, r7}
   14834:	b	148ac <_obstack_memory_used@@Base+0x1f38>
   14838:	movw	r1, #29347	; 0x72a3
   1483c:	movt	r1, #1
   14840:	mov	r0, #0
   14844:	mov	r2, #5
   14848:	bl	10f58 <dcgettext@plt>
   1484c:	mov	r2, r0
   14850:	ldr	r3, [r7]
   14854:	ldmib	r7, {r0, r1, r6}
   14858:	ldr	r5, [r7, #16]
   1485c:	ldr	r7, [r7, #20]
   14860:	stm	sp, {r0, r1, r6}
   14864:	str	r5, [sp, #12]
   14868:	str	r7, [sp, #16]
   1486c:	b	148ac <_obstack_memory_used@@Base+0x1f38>
   14870:	movw	r1, #29387	; 0x72cb
   14874:	movt	r1, #1
   14878:	mov	r0, #0
   1487c:	mov	r2, #5
   14880:	bl	10f58 <dcgettext@plt>
   14884:	mov	r2, r0
   14888:	ldr	r3, [r7]
   1488c:	ldmib	r7, {r0, r1, r6}
   14890:	ldr	r5, [r7, #16]
   14894:	ldr	r4, [r7, #20]
   14898:	ldr	r7, [r7, #24]
   1489c:	stm	sp, {r0, r1, r6}
   148a0:	str	r5, [sp, #12]
   148a4:	str	r4, [sp, #16]
   148a8:	str	r7, [sp, #20]
   148ac:	mov	r0, r8
   148b0:	mov	r1, #1
   148b4:	b	14960 <_obstack_memory_used@@Base+0x1fec>
   148b8:	movw	r1, #29479	; 0x7327
   148bc:	movt	r1, #1
   148c0:	mov	r0, #0
   148c4:	mov	r2, #5
   148c8:	bl	10f58 <dcgettext@plt>
   148cc:	mov	ip, r0
   148d0:	ldr	r3, [r7]
   148d4:	ldr	r0, [r7, #4]
   148d8:	ldr	r1, [r7, #8]
   148dc:	ldr	r6, [r7, #12]
   148e0:	ldr	r5, [r7, #16]
   148e4:	ldr	r4, [r7, #20]
   148e8:	ldr	r2, [r7, #24]
   148ec:	ldr	lr, [r7, #28]
   148f0:	ldr	r7, [r7, #32]
   148f4:	stm	sp, {r0, r1, r6}
   148f8:	str	r5, [sp, #12]
   148fc:	str	r4, [sp, #16]
   14900:	str	r2, [sp, #20]
   14904:	str	lr, [sp, #24]
   14908:	str	r7, [sp, #28]
   1490c:	b	14954 <_obstack_memory_used@@Base+0x1fe0>
   14910:	movw	r1, #29431	; 0x72f7
   14914:	movt	r1, #1
   14918:	mov	r0, #0
   1491c:	mov	r2, #5
   14920:	bl	10f58 <dcgettext@plt>
   14924:	mov	ip, r0
   14928:	ldr	r3, [r7]
   1492c:	ldmib	r7, {r0, r1, r6}
   14930:	ldr	r5, [r7, #16]
   14934:	ldr	r4, [r7, #20]
   14938:	ldr	r2, [r7, #24]
   1493c:	ldr	r7, [r7, #28]
   14940:	stm	sp, {r0, r1, r6}
   14944:	str	r5, [sp, #12]
   14948:	str	r4, [sp, #16]
   1494c:	str	r2, [sp, #20]
   14950:	str	r7, [sp, #24]
   14954:	mov	r0, r8
   14958:	mov	r1, #1
   1495c:	mov	r2, ip
   14960:	bl	110c0 <__fprintf_chk@plt>
   14964:	sub	sp, fp, #24
   14968:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1496c:	push	{r4, sl, fp, lr}
   14970:	add	fp, sp, #8
   14974:	sub	sp, sp, #8
   14978:	mov	lr, #0
   1497c:	ldr	ip, [fp, #8]
   14980:	ldr	r4, [ip, lr, lsl #2]
   14984:	add	lr, lr, #1
   14988:	cmp	r4, #0
   1498c:	bne	14980 <_obstack_memory_used@@Base+0x200c>
   14990:	sub	r4, lr, #1
   14994:	str	ip, [sp]
   14998:	str	r4, [sp, #4]
   1499c:	bl	14638 <_obstack_memory_used@@Base+0x1cc4>
   149a0:	sub	sp, fp, #8
   149a4:	pop	{r4, sl, fp, pc}
   149a8:	push	{r4, r5, fp, lr}
   149ac:	add	fp, sp, #8
   149b0:	sub	sp, sp, #48	; 0x30
   149b4:	mov	ip, #0
   149b8:	ldr	r4, [fp, #8]
   149bc:	add	lr, sp, #8
   149c0:	ldr	r5, [r4]
   149c4:	str	r5, [lr, ip, lsl #2]
   149c8:	cmp	r5, #0
   149cc:	beq	149e0 <_obstack_memory_used@@Base+0x206c>
   149d0:	add	ip, ip, #1
   149d4:	add	r4, r4, #4
   149d8:	cmp	ip, #10
   149dc:	bcc	149c0 <_obstack_memory_used@@Base+0x204c>
   149e0:	str	lr, [sp]
   149e4:	str	ip, [sp, #4]
   149e8:	bl	14638 <_obstack_memory_used@@Base+0x1cc4>
   149ec:	sub	sp, fp, #8
   149f0:	pop	{r4, r5, fp, pc}
   149f4:	push	{fp, lr}
   149f8:	mov	fp, sp
   149fc:	sub	sp, sp, #8
   14a00:	add	ip, fp, #8
   14a04:	str	ip, [sp, #4]
   14a08:	str	ip, [sp]
   14a0c:	bl	149a8 <_obstack_memory_used@@Base+0x2034>
   14a10:	mov	sp, fp
   14a14:	pop	{fp, pc}
   14a18:	push	{fp, lr}
   14a1c:	mov	fp, sp
   14a20:	movw	r0, #33108	; 0x8154
   14a24:	movt	r0, #2
   14a28:	ldr	r1, [r0]
   14a2c:	movw	r0, #23394	; 0x5b62
   14a30:	movt	r0, #1
   14a34:	bl	10eec <fputs_unlocked@plt>
   14a38:	movw	r1, #29591	; 0x7397
   14a3c:	movt	r1, #1
   14a40:	mov	r0, #0
   14a44:	mov	r2, #5
   14a48:	bl	10f58 <dcgettext@plt>
   14a4c:	mov	r1, r0
   14a50:	movw	r2, #29611	; 0x73ab
   14a54:	movt	r2, #1
   14a58:	mov	r0, #1
   14a5c:	bl	110a8 <__printf_chk@plt>
   14a60:	movw	r1, #29633	; 0x73c1
   14a64:	movt	r1, #1
   14a68:	mov	r0, #0
   14a6c:	mov	r2, #5
   14a70:	bl	10f58 <dcgettext@plt>
   14a74:	mov	r1, r0
   14a78:	movw	r2, #22762	; 0x58ea
   14a7c:	movt	r2, #1
   14a80:	movw	r3, #23203	; 0x5aa3
   14a84:	movt	r3, #1
   14a88:	mov	r0, #1
   14a8c:	bl	110a8 <__printf_chk@plt>
   14a90:	movw	r1, #29653	; 0x73d5
   14a94:	movt	r1, #1
   14a98:	mov	r0, #0
   14a9c:	mov	r2, #5
   14aa0:	bl	10f58 <dcgettext@plt>
   14aa4:	mov	r1, r0
   14aa8:	movw	r2, #29692	; 0x73fc
   14aac:	movt	r2, #1
   14ab0:	mov	r0, #1
   14ab4:	pop	{fp, lr}
   14ab8:	b	110a8 <__printf_chk@plt>
   14abc:	b	14ac0 <_obstack_memory_used@@Base+0x214c>
   14ac0:	push	{r4, r5, r6, sl, fp, lr}
   14ac4:	add	fp, sp, #16
   14ac8:	mov	r4, r2
   14acc:	mov	r5, r1
   14ad0:	mov	r6, r0
   14ad4:	bl	1545c <_obstack_memory_used@@Base+0x2ae8>
   14ad8:	cmp	r0, #0
   14adc:	popne	{r4, r5, r6, sl, fp, pc}
   14ae0:	cmp	r6, #0
   14ae4:	beq	14af8 <_obstack_memory_used@@Base+0x2184>
   14ae8:	cmp	r5, #0
   14aec:	cmpne	r4, #0
   14af0:	bne	14af8 <_obstack_memory_used@@Base+0x2184>
   14af4:	pop	{r4, r5, r6, sl, fp, pc}
   14af8:	bl	14eac <_obstack_memory_used@@Base+0x2538>
   14afc:	push	{fp, lr}
   14b00:	mov	fp, sp
   14b04:	bl	14f44 <_obstack_memory_used@@Base+0x25d0>
   14b08:	bl	14b10 <_obstack_memory_used@@Base+0x219c>
   14b0c:	pop	{fp, pc}
   14b10:	cmp	r0, #0
   14b14:	bxne	lr
   14b18:	push	{fp, lr}
   14b1c:	mov	fp, sp
   14b20:	bl	14eac <_obstack_memory_used@@Base+0x2538>
   14b24:	push	{fp, lr}
   14b28:	mov	fp, sp
   14b2c:	bl	15390 <_obstack_memory_used@@Base+0x2a1c>
   14b30:	bl	14b10 <_obstack_memory_used@@Base+0x219c>
   14b34:	pop	{fp, pc}
   14b38:	b	14afc <_obstack_memory_used@@Base+0x2188>
   14b3c:	push	{r4, r5, fp, lr}
   14b40:	add	fp, sp, #8
   14b44:	mov	r4, r1
   14b48:	mov	r5, r0
   14b4c:	bl	14f74 <_obstack_memory_used@@Base+0x2600>
   14b50:	cmp	r0, #0
   14b54:	popne	{r4, r5, fp, pc}
   14b58:	cmp	r5, #0
   14b5c:	beq	14b6c <_obstack_memory_used@@Base+0x21f8>
   14b60:	cmp	r4, #0
   14b64:	bne	14b6c <_obstack_memory_used@@Base+0x21f8>
   14b68:	pop	{r4, r5, fp, pc}
   14b6c:	bl	14eac <_obstack_memory_used@@Base+0x2538>
   14b70:	push	{fp, lr}
   14b74:	mov	fp, sp
   14b78:	bl	15394 <_obstack_memory_used@@Base+0x2a20>
   14b7c:	bl	14b10 <_obstack_memory_used@@Base+0x219c>
   14b80:	pop	{fp, pc}
   14b84:	push	{fp, lr}
   14b88:	mov	fp, sp
   14b8c:	bl	153a4 <_obstack_memory_used@@Base+0x2a30>
   14b90:	bl	14b10 <_obstack_memory_used@@Base+0x219c>
   14b94:	pop	{fp, pc}
   14b98:	push	{fp, lr}
   14b9c:	mov	fp, sp
   14ba0:	mov	r2, r1
   14ba4:	mov	r1, r0
   14ba8:	mov	r0, #0
   14bac:	bl	14ac0 <_obstack_memory_used@@Base+0x214c>
   14bb0:	pop	{fp, pc}
   14bb4:	mov	r2, r1
   14bb8:	mov	r1, r0
   14bbc:	mov	r0, #0
   14bc0:	b	14b84 <_obstack_memory_used@@Base+0x2210>
   14bc4:	mov	r2, #1
   14bc8:	b	14bcc <_obstack_memory_used@@Base+0x2258>
   14bcc:	push	{r4, r5, fp, lr}
   14bd0:	add	fp, sp, #8
   14bd4:	mov	r4, r1
   14bd8:	ldr	r5, [r1]
   14bdc:	cmp	r0, #0
   14be0:	beq	14bf8 <_obstack_memory_used@@Base+0x2284>
   14be4:	mov	r1, #1
   14be8:	add	r1, r1, r5, lsr #1
   14bec:	adds	r5, r5, r1
   14bf0:	bcc	14c10 <_obstack_memory_used@@Base+0x229c>
   14bf4:	bl	14eac <_obstack_memory_used@@Base+0x2538>
   14bf8:	cmp	r5, #0
   14bfc:	bne	14c10 <_obstack_memory_used@@Base+0x229c>
   14c00:	mov	r1, #64	; 0x40
   14c04:	udiv	r5, r1, r2
   14c08:	cmp	r2, #64	; 0x40
   14c0c:	addhi	r5, r5, #1
   14c10:	mov	r1, r5
   14c14:	bl	14ac0 <_obstack_memory_used@@Base+0x214c>
   14c18:	str	r5, [r4]
   14c1c:	pop	{r4, r5, fp, pc}
   14c20:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14c24:	add	fp, sp, #24
   14c28:	mov	r8, r1
   14c2c:	ldr	r6, [r1]
   14c30:	add	r1, r6, r6, asr #1
   14c34:	cmp	r1, r6
   14c38:	mvnvs	r1, #-2147483648	; 0x80000000
   14c3c:	cmp	r1, r3
   14c40:	mov	r5, r1
   14c44:	movgt	r5, r3
   14c48:	cmn	r3, #1
   14c4c:	movle	r5, r1
   14c50:	ldr	r4, [fp, #8]
   14c54:	cmn	r4, #1
   14c58:	ble	14c80 <_obstack_memory_used@@Base+0x230c>
   14c5c:	cmp	r4, #0
   14c60:	beq	14cd4 <_obstack_memory_used@@Base+0x2360>
   14c64:	cmn	r5, #1
   14c68:	ble	14ca8 <_obstack_memory_used@@Base+0x2334>
   14c6c:	mvn	r7, #-2147483648	; 0x80000000
   14c70:	udiv	r1, r7, r4
   14c74:	cmp	r1, r5
   14c78:	bge	14cd4 <_obstack_memory_used@@Base+0x2360>
   14c7c:	b	14ce4 <_obstack_memory_used@@Base+0x2370>
   14c80:	cmn	r5, #1
   14c84:	ble	14cc4 <_obstack_memory_used@@Base+0x2350>
   14c88:	cmn	r4, #1
   14c8c:	beq	14cd4 <_obstack_memory_used@@Base+0x2360>
   14c90:	mov	r1, #-2147483648	; 0x80000000
   14c94:	sdiv	r1, r1, r4
   14c98:	mvn	r7, #-2147483648	; 0x80000000
   14c9c:	cmp	r1, r5
   14ca0:	bge	14cd4 <_obstack_memory_used@@Base+0x2360>
   14ca4:	b	14ce4 <_obstack_memory_used@@Base+0x2370>
   14ca8:	beq	14cd4 <_obstack_memory_used@@Base+0x2360>
   14cac:	mov	r1, #-2147483648	; 0x80000000
   14cb0:	sdiv	r1, r1, r5
   14cb4:	mvn	r7, #-2147483648	; 0x80000000
   14cb8:	cmp	r1, r4
   14cbc:	bge	14cd4 <_obstack_memory_used@@Base+0x2360>
   14cc0:	b	14ce4 <_obstack_memory_used@@Base+0x2370>
   14cc4:	mvn	r7, #-2147483648	; 0x80000000
   14cc8:	sdiv	r1, r7, r4
   14ccc:	cmp	r5, r1
   14cd0:	blt	14ce4 <_obstack_memory_used@@Base+0x2370>
   14cd4:	mul	r1, r5, r4
   14cd8:	mov	r7, #64	; 0x40
   14cdc:	cmp	r1, #63	; 0x3f
   14ce0:	bgt	14cec <_obstack_memory_used@@Base+0x2378>
   14ce4:	sdiv	r5, r7, r4
   14ce8:	mul	r1, r5, r4
   14cec:	cmp	r0, #0
   14cf0:	moveq	r7, #0
   14cf4:	streq	r7, [r8]
   14cf8:	sub	r7, r5, r6
   14cfc:	cmp	r7, r2
   14d00:	bge	14dac <_obstack_memory_used@@Base+0x2438>
   14d04:	add	r5, r6, r2
   14d08:	mov	r1, #0
   14d0c:	cmp	r5, r3
   14d10:	mov	r2, #0
   14d14:	movwgt	r2, #1
   14d18:	cmn	r3, #1
   14d1c:	movwgt	r1, #1
   14d20:	cmp	r5, r6
   14d24:	bvs	14d94 <_obstack_memory_used@@Base+0x2420>
   14d28:	ands	r1, r1, r2
   14d2c:	bne	14d94 <_obstack_memory_used@@Base+0x2420>
   14d30:	cmn	r4, #1
   14d34:	ble	14d5c <_obstack_memory_used@@Base+0x23e8>
   14d38:	cmp	r4, #0
   14d3c:	beq	14da8 <_obstack_memory_used@@Base+0x2434>
   14d40:	cmn	r5, #1
   14d44:	ble	14d80 <_obstack_memory_used@@Base+0x240c>
   14d48:	mvn	r1, #-2147483648	; 0x80000000
   14d4c:	udiv	r1, r1, r4
   14d50:	cmp	r1, r5
   14d54:	bge	14da8 <_obstack_memory_used@@Base+0x2434>
   14d58:	b	14d94 <_obstack_memory_used@@Base+0x2420>
   14d5c:	cmn	r5, #1
   14d60:	ble	14d98 <_obstack_memory_used@@Base+0x2424>
   14d64:	cmn	r4, #1
   14d68:	beq	14da8 <_obstack_memory_used@@Base+0x2434>
   14d6c:	mov	r1, #-2147483648	; 0x80000000
   14d70:	sdiv	r1, r1, r4
   14d74:	cmp	r1, r5
   14d78:	bge	14da8 <_obstack_memory_used@@Base+0x2434>
   14d7c:	b	14d94 <_obstack_memory_used@@Base+0x2420>
   14d80:	beq	14da8 <_obstack_memory_used@@Base+0x2434>
   14d84:	mov	r1, #-2147483648	; 0x80000000
   14d88:	sdiv	r1, r1, r5
   14d8c:	cmp	r1, r4
   14d90:	bge	14da8 <_obstack_memory_used@@Base+0x2434>
   14d94:	bl	14eac <_obstack_memory_used@@Base+0x2538>
   14d98:	mvn	r1, #-2147483648	; 0x80000000
   14d9c:	sdiv	r1, r1, r4
   14da0:	cmp	r5, r1
   14da4:	blt	14d94 <_obstack_memory_used@@Base+0x2420>
   14da8:	mul	r1, r5, r4
   14dac:	bl	14b3c <_obstack_memory_used@@Base+0x21c8>
   14db0:	str	r5, [r8]
   14db4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14db8:	mov	r1, #1
   14dbc:	b	14dc0 <_obstack_memory_used@@Base+0x244c>
   14dc0:	push	{fp, lr}
   14dc4:	mov	fp, sp
   14dc8:	bl	14ef0 <_obstack_memory_used@@Base+0x257c>
   14dcc:	bl	14b10 <_obstack_memory_used@@Base+0x219c>
   14dd0:	pop	{fp, pc}
   14dd4:	mov	r1, #1
   14dd8:	b	14ddc <_obstack_memory_used@@Base+0x2468>
   14ddc:	push	{fp, lr}
   14de0:	mov	fp, sp
   14de4:	bl	153a0 <_obstack_memory_used@@Base+0x2a2c>
   14de8:	bl	14b10 <_obstack_memory_used@@Base+0x219c>
   14dec:	pop	{fp, pc}
   14df0:	push	{r4, r5, r6, sl, fp, lr}
   14df4:	add	fp, sp, #16
   14df8:	mov	r4, r1
   14dfc:	mov	r5, r0
   14e00:	mov	r0, r1
   14e04:	bl	14afc <_obstack_memory_used@@Base+0x2188>
   14e08:	mov	r6, r0
   14e0c:	mov	r1, r5
   14e10:	mov	r2, r4
   14e14:	bl	10f28 <memcpy@plt>
   14e18:	mov	r0, r6
   14e1c:	pop	{r4, r5, r6, sl, fp, pc}
   14e20:	push	{r4, r5, r6, sl, fp, lr}
   14e24:	add	fp, sp, #16
   14e28:	mov	r4, r1
   14e2c:	mov	r5, r0
   14e30:	mov	r0, r1
   14e34:	bl	14b24 <_obstack_memory_used@@Base+0x21b0>
   14e38:	mov	r6, r0
   14e3c:	mov	r1, r5
   14e40:	mov	r2, r4
   14e44:	bl	10f28 <memcpy@plt>
   14e48:	mov	r0, r6
   14e4c:	pop	{r4, r5, r6, sl, fp, pc}
   14e50:	push	{r4, r5, r6, sl, fp, lr}
   14e54:	add	fp, sp, #16
   14e58:	mov	r4, r1
   14e5c:	mov	r5, r0
   14e60:	add	r0, r1, #1
   14e64:	bl	14b24 <_obstack_memory_used@@Base+0x21b0>
   14e68:	mov	r6, r0
   14e6c:	mov	r0, #0
   14e70:	strb	r0, [r6, r4]
   14e74:	mov	r0, r6
   14e78:	mov	r1, r5
   14e7c:	mov	r2, r4
   14e80:	bl	10f28 <memcpy@plt>
   14e84:	mov	r0, r6
   14e88:	pop	{r4, r5, r6, sl, fp, pc}
   14e8c:	push	{r4, sl, fp, lr}
   14e90:	add	fp, sp, #8
   14e94:	mov	r4, r0
   14e98:	bl	11078 <strlen@plt>
   14e9c:	add	r1, r0, #1
   14ea0:	mov	r0, r4
   14ea4:	pop	{r4, sl, fp, lr}
   14ea8:	b	14df0 <_obstack_memory_used@@Base+0x247c>
   14eac:	push	{fp, lr}
   14eb0:	mov	fp, sp
   14eb4:	movw	r0, #33004	; 0x80ec
   14eb8:	movt	r0, #2
   14ebc:	ldr	r4, [r0]
   14ec0:	movw	r1, #28724	; 0x7034
   14ec4:	movt	r1, #1
   14ec8:	mov	r0, #0
   14ecc:	mov	r2, #5
   14ed0:	bl	10f58 <dcgettext@plt>
   14ed4:	mov	r3, r0
   14ed8:	movw	r2, #28711	; 0x7027
   14edc:	movt	r2, #1
   14ee0:	mov	r0, r4
   14ee4:	mov	r1, #0
   14ee8:	bl	10fdc <error@plt>
   14eec:	bl	1112c <abort@plt>
   14ef0:	clz	r2, r1
   14ef4:	lsr	r2, r2, #5
   14ef8:	clz	r3, r0
   14efc:	lsr	r3, r3, #5
   14f00:	orrs	r2, r3, r2
   14f04:	movwne	r1, #1
   14f08:	movwne	r0, #1
   14f0c:	cmp	r1, #0
   14f10:	beq	14f40 <_obstack_memory_used@@Base+0x25cc>
   14f14:	mvn	r2, #-2147483648	; 0x80000000
   14f18:	udiv	r2, r2, r1
   14f1c:	cmp	r2, r0
   14f20:	bcs	14f40 <_obstack_memory_used@@Base+0x25cc>
   14f24:	push	{fp, lr}
   14f28:	mov	fp, sp
   14f2c:	bl	11084 <__errno_location@plt>
   14f30:	mov	r1, #12
   14f34:	str	r1, [r0]
   14f38:	mov	r0, #0
   14f3c:	pop	{fp, pc}
   14f40:	b	10ee0 <calloc@plt>
   14f44:	cmp	r0, #0
   14f48:	movweq	r0, #1
   14f4c:	cmn	r0, #1
   14f50:	ble	14f58 <_obstack_memory_used@@Base+0x25e4>
   14f54:	b	11018 <malloc@plt>
   14f58:	push	{fp, lr}
   14f5c:	mov	fp, sp
   14f60:	bl	11084 <__errno_location@plt>
   14f64:	mov	r1, #12
   14f68:	str	r1, [r0]
   14f6c:	mov	r0, #0
   14f70:	pop	{fp, pc}
   14f74:	push	{fp, lr}
   14f78:	mov	fp, sp
   14f7c:	cmp	r0, #0
   14f80:	beq	14f9c <_obstack_memory_used@@Base+0x2628>
   14f84:	cmp	r1, #0
   14f88:	beq	14fa8 <_obstack_memory_used@@Base+0x2634>
   14f8c:	cmn	r1, #1
   14f90:	ble	14fb4 <_obstack_memory_used@@Base+0x2640>
   14f94:	pop	{fp, lr}
   14f98:	b	10f70 <realloc@plt>
   14f9c:	mov	r0, r1
   14fa0:	pop	{fp, lr}
   14fa4:	b	14f44 <_obstack_memory_used@@Base+0x25d0>
   14fa8:	bl	123dc <close@plt+0x12a4>
   14fac:	mov	r0, #0
   14fb0:	pop	{fp, pc}
   14fb4:	bl	11084 <__errno_location@plt>
   14fb8:	mov	r1, #12
   14fbc:	str	r1, [r0]
   14fc0:	mov	r0, #0
   14fc4:	pop	{fp, pc}
   14fc8:	mov	r1, r0
   14fcc:	sub	r2, r0, #65	; 0x41
   14fd0:	mov	r0, #1
   14fd4:	cmp	r2, #26
   14fd8:	subcs	r2, r1, #97	; 0x61
   14fdc:	cmpcs	r2, #26
   14fe0:	bcs	14fe8 <_obstack_memory_used@@Base+0x2674>
   14fe4:	bx	lr
   14fe8:	sub	r1, r1, #48	; 0x30
   14fec:	cmp	r1, #10
   14ff0:	movcs	r0, #0
   14ff4:	bx	lr
   14ff8:	mov	r1, r0
   14ffc:	sub	r2, r0, #65	; 0x41
   15000:	mov	r0, #1
   15004:	cmp	r2, #26
   15008:	subcs	r1, r1, #97	; 0x61
   1500c:	cmpcs	r1, #26
   15010:	movcs	r0, #0
   15014:	bx	lr
   15018:	mov	r1, #0
   1501c:	cmp	r0, #128	; 0x80
   15020:	movwcc	r1, #1
   15024:	mov	r0, r1
   15028:	bx	lr
   1502c:	sub	r1, r0, #9
   15030:	clz	r1, r1
   15034:	lsr	r1, r1, #5
   15038:	sub	r0, r0, #32
   1503c:	clz	r0, r0
   15040:	lsr	r0, r0, #5
   15044:	orr	r0, r0, r1
   15048:	bx	lr
   1504c:	mov	r1, r0
   15050:	mov	r0, #1
   15054:	cmp	r1, #32
   15058:	bxcc	lr
   1505c:	cmp	r1, #127	; 0x7f
   15060:	movne	r0, #0
   15064:	bx	lr
   15068:	sub	r1, r0, #48	; 0x30
   1506c:	mov	r0, #0
   15070:	cmp	r1, #10
   15074:	movwcc	r0, #1
   15078:	bx	lr
   1507c:	sub	r1, r0, #33	; 0x21
   15080:	mov	r0, #0
   15084:	cmp	r1, #94	; 0x5e
   15088:	movwcc	r0, #1
   1508c:	bx	lr
   15090:	sub	r1, r0, #97	; 0x61
   15094:	mov	r0, #0
   15098:	cmp	r1, #26
   1509c:	movwcc	r0, #1
   150a0:	bx	lr
   150a4:	sub	r1, r0, #32
   150a8:	mov	r0, #0
   150ac:	cmp	r1, #95	; 0x5f
   150b0:	movwcc	r0, #1
   150b4:	bx	lr
   150b8:	sub	r1, r0, #33	; 0x21
   150bc:	cmp	r1, #93	; 0x5d
   150c0:	bhi	1524c <_obstack_memory_used@@Base+0x28d8>
   150c4:	mov	r0, #1
   150c8:	add	r2, pc, #0
   150cc:	ldr	pc, [r2, r1, lsl #2]
   150d0:	andeq	r5, r1, r8, asr #4
   150d4:	andeq	r5, r1, r8, asr #4
   150d8:	andeq	r5, r1, r8, asr #4
   150dc:	andeq	r5, r1, r8, asr #4
   150e0:	andeq	r5, r1, r8, asr #4
   150e4:	andeq	r5, r1, r8, asr #4
   150e8:	andeq	r5, r1, r8, asr #4
   150ec:	andeq	r5, r1, r8, asr #4
   150f0:	andeq	r5, r1, r8, asr #4
   150f4:	andeq	r5, r1, r8, asr #4
   150f8:	andeq	r5, r1, r8, asr #4
   150fc:	andeq	r5, r1, r8, asr #4
   15100:	andeq	r5, r1, r8, asr #4
   15104:	andeq	r5, r1, r8, asr #4
   15108:	andeq	r5, r1, r8, asr #4
   1510c:	andeq	r5, r1, ip, asr #4
   15110:	andeq	r5, r1, ip, asr #4
   15114:	andeq	r5, r1, ip, asr #4
   15118:	andeq	r5, r1, ip, asr #4
   1511c:	andeq	r5, r1, ip, asr #4
   15120:	andeq	r5, r1, ip, asr #4
   15124:	andeq	r5, r1, ip, asr #4
   15128:	andeq	r5, r1, ip, asr #4
   1512c:	andeq	r5, r1, ip, asr #4
   15130:	andeq	r5, r1, ip, asr #4
   15134:	andeq	r5, r1, r8, asr #4
   15138:	andeq	r5, r1, r8, asr #4
   1513c:	andeq	r5, r1, r8, asr #4
   15140:	andeq	r5, r1, r8, asr #4
   15144:	andeq	r5, r1, r8, asr #4
   15148:	andeq	r5, r1, r8, asr #4
   1514c:	andeq	r5, r1, r8, asr #4
   15150:	andeq	r5, r1, ip, asr #4
   15154:	andeq	r5, r1, ip, asr #4
   15158:	andeq	r5, r1, ip, asr #4
   1515c:	andeq	r5, r1, ip, asr #4
   15160:	andeq	r5, r1, ip, asr #4
   15164:	andeq	r5, r1, ip, asr #4
   15168:	andeq	r5, r1, ip, asr #4
   1516c:	andeq	r5, r1, ip, asr #4
   15170:	andeq	r5, r1, ip, asr #4
   15174:	andeq	r5, r1, ip, asr #4
   15178:	andeq	r5, r1, ip, asr #4
   1517c:	andeq	r5, r1, ip, asr #4
   15180:	andeq	r5, r1, ip, asr #4
   15184:	andeq	r5, r1, ip, asr #4
   15188:	andeq	r5, r1, ip, asr #4
   1518c:	andeq	r5, r1, ip, asr #4
   15190:	andeq	r5, r1, ip, asr #4
   15194:	andeq	r5, r1, ip, asr #4
   15198:	andeq	r5, r1, ip, asr #4
   1519c:	andeq	r5, r1, ip, asr #4
   151a0:	andeq	r5, r1, ip, asr #4
   151a4:	andeq	r5, r1, ip, asr #4
   151a8:	andeq	r5, r1, ip, asr #4
   151ac:	andeq	r5, r1, ip, asr #4
   151b0:	andeq	r5, r1, ip, asr #4
   151b4:	andeq	r5, r1, ip, asr #4
   151b8:	andeq	r5, r1, r8, asr #4
   151bc:	andeq	r5, r1, r8, asr #4
   151c0:	andeq	r5, r1, r8, asr #4
   151c4:	andeq	r5, r1, r8, asr #4
   151c8:	andeq	r5, r1, r8, asr #4
   151cc:	andeq	r5, r1, r8, asr #4
   151d0:	andeq	r5, r1, ip, asr #4
   151d4:	andeq	r5, r1, ip, asr #4
   151d8:	andeq	r5, r1, ip, asr #4
   151dc:	andeq	r5, r1, ip, asr #4
   151e0:	andeq	r5, r1, ip, asr #4
   151e4:	andeq	r5, r1, ip, asr #4
   151e8:	andeq	r5, r1, ip, asr #4
   151ec:	andeq	r5, r1, ip, asr #4
   151f0:	andeq	r5, r1, ip, asr #4
   151f4:	andeq	r5, r1, ip, asr #4
   151f8:	andeq	r5, r1, ip, asr #4
   151fc:	andeq	r5, r1, ip, asr #4
   15200:	andeq	r5, r1, ip, asr #4
   15204:	andeq	r5, r1, ip, asr #4
   15208:	andeq	r5, r1, ip, asr #4
   1520c:	andeq	r5, r1, ip, asr #4
   15210:	andeq	r5, r1, ip, asr #4
   15214:	andeq	r5, r1, ip, asr #4
   15218:	andeq	r5, r1, ip, asr #4
   1521c:	andeq	r5, r1, ip, asr #4
   15220:	andeq	r5, r1, ip, asr #4
   15224:	andeq	r5, r1, ip, asr #4
   15228:	andeq	r5, r1, ip, asr #4
   1522c:	andeq	r5, r1, ip, asr #4
   15230:	andeq	r5, r1, ip, asr #4
   15234:	andeq	r5, r1, ip, asr #4
   15238:	andeq	r5, r1, r8, asr #4
   1523c:	andeq	r5, r1, r8, asr #4
   15240:	andeq	r5, r1, r8, asr #4
   15244:	andeq	r5, r1, r8, asr #4
   15248:	bx	lr
   1524c:	mov	r0, #0
   15250:	bx	lr
   15254:	sub	r0, r0, #9
   15258:	cmp	r0, #23
   1525c:	movhi	r0, #0
   15260:	bxhi	lr
   15264:	bic	r0, r0, #-16777216	; 0xff000000
   15268:	movw	r1, #31
   1526c:	movt	r1, #128	; 0x80
   15270:	mov	r2, #1
   15274:	and	r0, r2, r1, lsr r0
   15278:	bx	lr
   1527c:	sub	r1, r0, #65	; 0x41
   15280:	mov	r0, #0
   15284:	cmp	r1, #26
   15288:	movwcc	r0, #1
   1528c:	bx	lr
   15290:	mov	r1, r0
   15294:	sub	r2, r0, #48	; 0x30
   15298:	mov	r0, #1
   1529c:	cmp	r2, #22
   152a0:	bhi	152b8 <_obstack_memory_used@@Base+0x2944>
   152a4:	mov	ip, #1
   152a8:	movw	r3, #1023	; 0x3ff
   152ac:	movt	r3, #126	; 0x7e
   152b0:	tst	r3, ip, lsl r2
   152b4:	bxne	lr
   152b8:	sub	r1, r1, #97	; 0x61
   152bc:	cmp	r1, #6
   152c0:	movcs	r0, #0
   152c4:	bxcs	lr
   152c8:	bx	lr
   152cc:	sub	r1, r0, #65	; 0x41
   152d0:	cmp	r1, #26
   152d4:	addcc	r0, r0, #32
   152d8:	bx	lr
   152dc:	sub	r1, r0, #97	; 0x61
   152e0:	cmp	r1, #26
   152e4:	subcc	r0, r0, #32
   152e8:	bx	lr
   152ec:	push	{r4, r5, r6, sl, fp, lr}
   152f0:	add	fp, sp, #16
   152f4:	mov	r4, r0
   152f8:	bl	10fb8 <__fpending@plt>
   152fc:	mov	r5, r0
   15300:	mov	r0, r4
   15304:	bl	10fc4 <ferror_unlocked@plt>
   15308:	mov	r6, r0
   1530c:	mov	r0, r4
   15310:	bl	122d4 <close@plt+0x119c>
   15314:	cmp	r6, #0
   15318:	beq	15338 <_obstack_memory_used@@Base+0x29c4>
   1531c:	mvn	r4, #0
   15320:	cmp	r0, #0
   15324:	bne	1536c <_obstack_memory_used@@Base+0x29f8>
   15328:	bl	11084 <__errno_location@plt>
   1532c:	mov	r1, #0
   15330:	str	r1, [r0]
   15334:	b	1536c <_obstack_memory_used@@Base+0x29f8>
   15338:	cmp	r0, #0
   1533c:	mov	r4, r0
   15340:	mvnne	r4, #0
   15344:	cmp	r5, #0
   15348:	bne	1536c <_obstack_memory_used@@Base+0x29f8>
   1534c:	cmp	r0, #0
   15350:	beq	1536c <_obstack_memory_used@@Base+0x29f8>
   15354:	bl	11084 <__errno_location@plt>
   15358:	ldr	r0, [r0]
   1535c:	subs	r4, r0, #9
   15360:	mvnne	r4, #0
   15364:	mov	r0, r4
   15368:	pop	{r4, r5, r6, sl, fp, pc}
   1536c:	mov	r0, r4
   15370:	pop	{r4, r5, r6, sl, fp, pc}
   15374:	push	{fp, lr}
   15378:	mov	fp, sp
   1537c:	bl	11084 <__errno_location@plt>
   15380:	mov	r1, #12
   15384:	str	r1, [r0]
   15388:	mov	r0, #0
   1538c:	pop	{fp, pc}
   15390:	b	14f44 <_obstack_memory_used@@Base+0x25d0>
   15394:	cmp	r1, #0
   15398:	orreq	r1, r1, #1
   1539c:	b	14f74 <_obstack_memory_used@@Base+0x2600>
   153a0:	b	14ef0 <_obstack_memory_used@@Base+0x257c>
   153a4:	clz	r3, r2
   153a8:	lsr	ip, r3, #5
   153ac:	clz	r3, r1
   153b0:	lsr	r3, r3, #5
   153b4:	orrs	r3, r3, ip
   153b8:	movwne	r1, #1
   153bc:	movwne	r2, #1
   153c0:	b	1545c <_obstack_memory_used@@Base+0x2ae8>
   153c4:	push	{fp, lr}
   153c8:	mov	fp, sp
   153cc:	mov	r0, #14
   153d0:	bl	110fc <nl_langinfo@plt>
   153d4:	movw	r1, #23395	; 0x5b63
   153d8:	movt	r1, #1
   153dc:	cmp	r0, #0
   153e0:	movne	r1, r0
   153e4:	ldrb	r2, [r1]
   153e8:	movw	r0, #29768	; 0x7448
   153ec:	movt	r0, #1
   153f0:	cmp	r2, #0
   153f4:	movne	r0, r1
   153f8:	pop	{fp, pc}
   153fc:	push	{r4, r5, r6, r7, fp, lr}
   15400:	add	fp, sp, #16
   15404:	sub	sp, sp, #8
   15408:	mov	r7, r2
   1540c:	mov	r4, r1
   15410:	add	r5, sp, #4
   15414:	cmp	r0, #0
   15418:	movne	r5, r0
   1541c:	mov	r0, r5
   15420:	bl	10fd0 <mbrtowc@plt>
   15424:	mov	r6, r0
   15428:	cmp	r7, #0
   1542c:	beq	15450 <_obstack_memory_used@@Base+0x2adc>
   15430:	cmn	r6, #2
   15434:	bcc	15450 <_obstack_memory_used@@Base+0x2adc>
   15438:	mov	r0, #0
   1543c:	bl	15498 <_obstack_memory_used@@Base+0x2b24>
   15440:	cmp	r0, #0
   15444:	ldrbeq	r0, [r4]
   15448:	streq	r0, [r5]
   1544c:	moveq	r6, #1
   15450:	mov	r0, r6
   15454:	sub	sp, fp, #16
   15458:	pop	{r4, r5, r6, r7, fp, pc}
   1545c:	cmp	r2, #0
   15460:	beq	15490 <_obstack_memory_used@@Base+0x2b1c>
   15464:	mvn	r3, #0
   15468:	udiv	r3, r3, r2
   1546c:	cmp	r3, r1
   15470:	bcs	15490 <_obstack_memory_used@@Base+0x2b1c>
   15474:	push	{fp, lr}
   15478:	mov	fp, sp
   1547c:	bl	11084 <__errno_location@plt>
   15480:	mov	r1, #12
   15484:	str	r1, [r0]
   15488:	mov	r0, #0
   1548c:	pop	{fp, pc}
   15490:	mul	r1, r2, r1
   15494:	b	14f74 <_obstack_memory_used@@Base+0x2600>
   15498:	push	{r4, sl, fp, lr}
   1549c:	add	fp, sp, #8
   154a0:	sub	sp, sp, #264	; 0x108
   154a4:	add	r1, sp, #7
   154a8:	movw	r2, #257	; 0x101
   154ac:	bl	154fc <_obstack_memory_used@@Base+0x2b88>
   154b0:	mov	r4, #0
   154b4:	cmp	r0, #0
   154b8:	bne	154f0 <_obstack_memory_used@@Base+0x2b7c>
   154bc:	add	r0, sp, #7
   154c0:	movw	r1, #23672	; 0x5c78
   154c4:	movt	r1, #1
   154c8:	bl	10ef8 <strcmp@plt>
   154cc:	cmp	r0, #0
   154d0:	beq	154f0 <_obstack_memory_used@@Base+0x2b7c>
   154d4:	add	r0, sp, #7
   154d8:	movw	r1, #29774	; 0x744e
   154dc:	movt	r1, #1
   154e0:	bl	10ef8 <strcmp@plt>
   154e4:	mov	r4, r0
   154e8:	cmp	r0, #0
   154ec:	movwne	r4, #1
   154f0:	mov	r0, r4
   154f4:	sub	sp, fp, #8
   154f8:	pop	{r4, sl, fp, pc}
   154fc:	b	15500 <_obstack_memory_used@@Base+0x2b8c>
   15500:	push	{r4, r5, r6, r7, fp, lr}
   15504:	add	fp, sp, #16
   15508:	mov	r6, r2
   1550c:	mov	r4, r1
   15510:	bl	1559c <_obstack_memory_used@@Base+0x2c28>
   15514:	cmp	r0, #0
   15518:	beq	15548 <_obstack_memory_used@@Base+0x2bd4>
   1551c:	mov	r7, r0
   15520:	bl	11078 <strlen@plt>
   15524:	cmp	r0, r6
   15528:	bcs	15568 <_obstack_memory_used@@Base+0x2bf4>
   1552c:	add	r2, r0, #1
   15530:	mov	r0, r4
   15534:	mov	r1, r7
   15538:	bl	10f28 <memcpy@plt>
   1553c:	mov	r5, #0
   15540:	mov	r0, r5
   15544:	pop	{r4, r5, r6, r7, fp, pc}
   15548:	mov	r5, #22
   1554c:	cmp	r6, #0
   15550:	movne	r0, #0
   15554:	strbne	r0, [r4]
   15558:	movne	r0, r5
   1555c:	popne	{r4, r5, r6, r7, fp, pc}
   15560:	mov	r0, r5
   15564:	pop	{r4, r5, r6, r7, fp, pc}
   15568:	mov	r5, #34	; 0x22
   1556c:	cmp	r6, #0
   15570:	beq	15590 <_obstack_memory_used@@Base+0x2c1c>
   15574:	sub	r6, r6, #1
   15578:	mov	r0, r4
   1557c:	mov	r1, r7
   15580:	mov	r2, r6
   15584:	bl	10f28 <memcpy@plt>
   15588:	mov	r0, #0
   1558c:	strb	r0, [r4, r6]
   15590:	mov	r0, r5
   15594:	pop	{r4, r5, r6, r7, fp, pc}
   15598:	b	1559c <_obstack_memory_used@@Base+0x2c28>
   1559c:	mov	r1, #0
   155a0:	b	110e4 <setlocale@plt>
   155a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   155a8:	mov	r7, r0
   155ac:	ldr	r6, [pc, #72]	; 155fc <_obstack_memory_used@@Base+0x2c88>
   155b0:	ldr	r5, [pc, #72]	; 15600 <_obstack_memory_used@@Base+0x2c8c>
   155b4:	add	r6, pc, r6
   155b8:	add	r5, pc, r5
   155bc:	sub	r6, r6, r5
   155c0:	mov	r8, r1
   155c4:	mov	r9, r2
   155c8:	bl	10ec0 <calloc@plt-0x20>
   155cc:	asrs	r6, r6, #2
   155d0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   155d4:	mov	r4, #0
   155d8:	add	r4, r4, #1
   155dc:	ldr	r3, [r5], #4
   155e0:	mov	r2, r9
   155e4:	mov	r1, r8
   155e8:	mov	r0, r7
   155ec:	blx	r3
   155f0:	cmp	r6, r4
   155f4:	bne	155d8 <_obstack_memory_used@@Base+0x2c64>
   155f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   155fc:	andeq	r2, r1, r0, asr r9
   15600:	andeq	r2, r1, r8, asr #18
   15604:	bx	lr
   15608:	ldr	r3, [pc, #12]	; 1561c <_obstack_memory_used@@Base+0x2ca8>
   1560c:	mov	r1, #0
   15610:	add	r3, pc, r3
   15614:	ldr	r2, [r3]
   15618:	b	11090 <__cxa_atexit@plt>
   1561c:	andeq	r2, r1, ip, asr #21

Disassembly of section .fini:

00015620 <.fini>:
   15620:	push	{r3, lr}
   15624:	pop	{r3, pc}
