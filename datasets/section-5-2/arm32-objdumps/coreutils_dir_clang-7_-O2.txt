
../repos/coreutils/src/dir:     file format elf32-littlearm


Disassembly of section .init:

00011b68 <.init>:
   11b68:	push	{r3, lr}
   11b6c:	bl	120dc <__assert_fail@plt+0x50>
   11b70:	pop	{r3, pc}

Disassembly of section .plt:

00011b74 <calloc@plt-0x14>:
   11b74:	push	{lr}		; (str lr, [sp, #-4]!)
   11b78:	ldr	lr, [pc, #4]	; 11b84 <calloc@plt-0x4>
   11b7c:	add	lr, pc, lr
   11b80:	ldr	pc, [lr, #8]!
   11b84:	andeq	sp, r2, ip, ror r4

00011b88 <calloc@plt>:
   11b88:	add	ip, pc, #0, 12
   11b8c:	add	ip, ip, #184320	; 0x2d000
   11b90:	ldr	pc, [ip, #1148]!	; 0x47c

00011b94 <fputs_unlocked@plt>:
   11b94:	add	ip, pc, #0, 12
   11b98:	add	ip, ip, #184320	; 0x2d000
   11b9c:	ldr	pc, [ip, #1140]!	; 0x474

00011ba0 <cap_to_text@plt>:
   11ba0:	add	ip, pc, #0, 12
   11ba4:	add	ip, ip, #184320	; 0x2d000
   11ba8:	ldr	pc, [ip, #1132]!	; 0x46c

00011bac <raise@plt>:
   11bac:	add	ip, pc, #0, 12
   11bb0:	add	ip, ip, #184320	; 0x2d000
   11bb4:	ldr	pc, [ip, #1124]!	; 0x464

00011bb8 <gmtime_r@plt>:
   11bb8:	add	ip, pc, #0, 12
   11bbc:	add	ip, ip, #184320	; 0x2d000
   11bc0:	ldr	pc, [ip, #1116]!	; 0x45c

00011bc4 <getpwnam@plt>:
   11bc4:	add	ip, pc, #0, 12
   11bc8:	add	ip, ip, #184320	; 0x2d000
   11bcc:	ldr	pc, [ip, #1108]!	; 0x454

00011bd0 <strcmp@plt>:
   11bd0:	add	ip, pc, #0, 12
   11bd4:	add	ip, ip, #184320	; 0x2d000
   11bd8:	ldr	pc, [ip, #1100]!	; 0x44c

00011bdc <getpwuid@plt>:
   11bdc:	add	ip, pc, #0, 12
   11be0:	add	ip, ip, #184320	; 0x2d000
   11be4:	ldr	pc, [ip, #1092]!	; 0x444

00011be8 <mktime@plt>:
   11be8:	add	ip, pc, #0, 12
   11bec:	add	ip, ip, #184320	; 0x2d000
   11bf0:	ldr	pc, [ip, #1084]!	; 0x43c

00011bf4 <fflush@plt>:
   11bf4:	add	ip, pc, #0, 12
   11bf8:	add	ip, ip, #184320	; 0x2d000
   11bfc:	ldr	pc, [ip, #1076]!	; 0x434

00011c00 <wcwidth@plt>:
   11c00:	add	ip, pc, #0, 12
   11c04:	add	ip, ip, #184320	; 0x2d000
   11c08:	ldr	pc, [ip, #1068]!	; 0x42c

00011c0c <sigprocmask@plt>:
   11c0c:	add	ip, pc, #0, 12
   11c10:	add	ip, ip, #184320	; 0x2d000
   11c14:	ldr	pc, [ip, #1060]!	; 0x424

00011c18 <_setjmp@plt>:
   11c18:	add	ip, pc, #0, 12
   11c1c:	add	ip, ip, #184320	; 0x2d000
   11c20:	ldr	pc, [ip, #1052]!	; 0x41c

00011c24 <memmove@plt>:
   11c24:	add	ip, pc, #0, 12
   11c28:	add	ip, ip, #184320	; 0x2d000
   11c2c:	ldr	pc, [ip, #1044]!	; 0x414

00011c30 <free@plt>:
   11c30:	add	ip, pc, #0, 12
   11c34:	add	ip, ip, #184320	; 0x2d000
   11c38:	ldr	pc, [ip, #1036]!	; 0x40c

00011c3c <faccessat@plt>:
   11c3c:	add	ip, pc, #0, 12
   11c40:	add	ip, ip, #184320	; 0x2d000
   11c44:	ldr	pc, [ip, #1028]!	; 0x404

00011c48 <clock_gettime@plt>:
   11c48:	add	ip, pc, #0, 12
   11c4c:	add	ip, ip, #184320	; 0x2d000
   11c50:	ldr	pc, [ip, #1020]!	; 0x3fc

00011c54 <_exit@plt>:
   11c54:	add	ip, pc, #0, 12
   11c58:	add	ip, ip, #184320	; 0x2d000
   11c5c:	ldr	pc, [ip, #1012]!	; 0x3f4

00011c60 <memcpy@plt>:
   11c60:	add	ip, pc, #0, 12
   11c64:	add	ip, ip, #184320	; 0x2d000
   11c68:	ldr	pc, [ip, #1004]!	; 0x3ec

00011c6c <__strtoull_internal@plt>:
   11c6c:	add	ip, pc, #0, 12
   11c70:	add	ip, ip, #184320	; 0x2d000
   11c74:	ldr	pc, [ip, #996]!	; 0x3e4

00011c78 <mbsinit@plt>:
   11c78:	add	ip, pc, #0, 12
   11c7c:	add	ip, ip, #184320	; 0x2d000
   11c80:	ldr	pc, [ip, #988]!	; 0x3dc

00011c84 <signal@plt>:
   11c84:	add	ip, pc, #0, 12
   11c88:	add	ip, ip, #184320	; 0x2d000
   11c8c:	ldr	pc, [ip, #980]!	; 0x3d4

00011c90 <fwrite_unlocked@plt>:
   11c90:	add	ip, pc, #0, 12
   11c94:	add	ip, ip, #184320	; 0x2d000
   11c98:	ldr	pc, [ip, #972]!	; 0x3cc

00011c9c <memcmp@plt>:
   11c9c:	add	ip, pc, #0, 12
   11ca0:	add	ip, ip, #184320	; 0x2d000
   11ca4:	ldr	pc, [ip, #964]!	; 0x3c4

00011ca8 <stpcpy@plt>:
   11ca8:	add	ip, pc, #0, 12
   11cac:	add	ip, ip, #184320	; 0x2d000
   11cb0:	ldr	pc, [ip, #956]!	; 0x3bc

00011cb4 <dcgettext@plt>:
   11cb4:	add	ip, pc, #0, 12
   11cb8:	add	ip, ip, #184320	; 0x2d000
   11cbc:	ldr	pc, [ip, #948]!	; 0x3b4

00011cc0 <realloc@plt>:
   11cc0:	add	ip, pc, #0, 12
   11cc4:	add	ip, ip, #184320	; 0x2d000
   11cc8:	ldr	pc, [ip, #940]!	; 0x3ac

00011ccc <sigismember@plt>:
   11ccc:	add	ip, pc, #0, 12
   11cd0:	add	ip, ip, #184320	; 0x2d000
   11cd4:	ldr	pc, [ip, #932]!	; 0x3a4

00011cd8 <fgetfilecon@plt>:
   11cd8:	add	ip, pc, #0, 12
   11cdc:	add	ip, ip, #184320	; 0x2d000
   11ce0:	ldr	pc, [ip, #924]!	; 0x39c

00011ce4 <localtime_r@plt>:
   11ce4:	add	ip, pc, #0, 12
   11ce8:	add	ip, ip, #184320	; 0x2d000
   11cec:	ldr	pc, [ip, #916]!	; 0x394

00011cf0 <textdomain@plt>:
   11cf0:	add	ip, pc, #0, 12
   11cf4:	add	ip, ip, #184320	; 0x2d000
   11cf8:	ldr	pc, [ip, #908]!	; 0x38c

00011cfc <iswcntrl@plt>:
   11cfc:	add	ip, pc, #0, 12
   11d00:	add	ip, ip, #184320	; 0x2d000
   11d04:	ldr	pc, [ip, #900]!	; 0x384

00011d08 <rawmemchr@plt>:
   11d08:	add	ip, pc, #0, 12
   11d0c:	add	ip, ip, #184320	; 0x2d000
   11d10:	ldr	pc, [ip, #892]!	; 0x37c

00011d14 <fflush_unlocked@plt>:
   11d14:	add	ip, pc, #0, 12
   11d18:	add	ip, ip, #184320	; 0x2d000
   11d1c:	ldr	pc, [ip, #884]!	; 0x374

00011d20 <iswprint@plt>:
   11d20:	add	ip, pc, #0, 12
   11d24:	add	ip, ip, #184320	; 0x2d000
   11d28:	ldr	pc, [ip, #876]!	; 0x36c

00011d2c <tzset@plt>:
   11d2c:	add	ip, pc, #0, 12
   11d30:	add	ip, ip, #184320	; 0x2d000
   11d34:	ldr	pc, [ip, #868]!	; 0x364

00011d38 <readlink@plt>:
   11d38:	add	ip, pc, #0, 12
   11d3c:	add	ip, ip, #184320	; 0x2d000
   11d40:	ldr	pc, [ip, #860]!	; 0x35c

00011d44 <sigaction@plt>:
   11d44:	add	ip, pc, #0, 12
   11d48:	add	ip, ip, #184320	; 0x2d000
   11d4c:	ldr	pc, [ip, #852]!	; 0x354

00011d50 <fwrite@plt>:
   11d50:	add	ip, pc, #0, 12
   11d54:	add	ip, ip, #184320	; 0x2d000
   11d58:	ldr	pc, [ip, #844]!	; 0x34c

00011d5c <ioctl@plt>:
   11d5c:	add	ip, pc, #0, 12
   11d60:	add	ip, ip, #184320	; 0x2d000
   11d64:	ldr	pc, [ip, #836]!	; 0x344

00011d68 <lseek64@plt>:
   11d68:	add	ip, pc, #0, 12
   11d6c:	add	ip, ip, #184320	; 0x2d000
   11d70:	ldr	pc, [ip, #828]!	; 0x33c

00011d74 <__ctype_get_mb_cur_max@plt>:
   11d74:	add	ip, pc, #0, 12
   11d78:	add	ip, ip, #184320	; 0x2d000
   11d7c:	ldr	pc, [ip, #820]!	; 0x334

00011d80 <strcpy@plt>:
   11d80:	add	ip, pc, #0, 12
   11d84:	add	ip, ip, #184320	; 0x2d000
   11d88:	ldr	pc, [ip, #812]!	; 0x32c

00011d8c <__fpending@plt>:
   11d8c:	add	ip, pc, #0, 12
   11d90:	add	ip, ip, #184320	; 0x2d000
   11d94:	ldr	pc, [ip, #804]!	; 0x324

00011d98 <mbrtowc@plt>:
   11d98:	add	ip, pc, #0, 12
   11d9c:	add	ip, ip, #184320	; 0x2d000
   11da0:	ldr	pc, [ip, #796]!	; 0x31c

00011da4 <wcstombs@plt>:
   11da4:	add	ip, pc, #0, 12
   11da8:	add	ip, ip, #184320	; 0x2d000
   11dac:	ldr	pc, [ip, #788]!	; 0x314

00011db0 <error@plt>:
   11db0:	add	ip, pc, #0, 12
   11db4:	add	ip, ip, #184320	; 0x2d000
   11db8:	ldr	pc, [ip, #780]!	; 0x30c

00011dbc <gethostname@plt>:
   11dbc:	add	ip, pc, #0, 12
   11dc0:	add	ip, ip, #184320	; 0x2d000
   11dc4:	ldr	pc, [ip, #772]!	; 0x304

00011dc8 <opendir@plt>:
   11dc8:	add	ip, pc, #0, 12
   11dcc:	add	ip, ip, #184320	; 0x2d000
   11dd0:	ldr	pc, [ip, #764]!	; 0x2fc

00011dd4 <fnmatch@plt>:
   11dd4:	add	ip, pc, #0, 12
   11dd8:	add	ip, ip, #184320	; 0x2d000
   11ddc:	ldr	pc, [ip, #756]!	; 0x2f4

00011de0 <strcoll@plt>:
   11de0:	add	ip, pc, #0, 12
   11de4:	add	ip, ip, #184320	; 0x2d000
   11de8:	ldr	pc, [ip, #748]!	; 0x2ec

00011dec <getenv@plt>:
   11dec:	add	ip, pc, #0, 12
   11df0:	add	ip, ip, #184320	; 0x2d000
   11df4:	ldr	pc, [ip, #740]!	; 0x2e4

00011df8 <lgetfilecon@plt>:
   11df8:	add	ip, pc, #0, 12
   11dfc:	add	ip, ip, #184320	; 0x2d000
   11e00:	ldr	pc, [ip, #732]!	; 0x2dc

00011e04 <malloc@plt>:
   11e04:	add	ip, pc, #0, 12
   11e08:	add	ip, ip, #184320	; 0x2d000
   11e0c:	ldr	pc, [ip, #724]!	; 0x2d4

00011e10 <sigaddset@plt>:
   11e10:	add	ip, pc, #0, 12
   11e14:	add	ip, ip, #184320	; 0x2d000
   11e18:	ldr	pc, [ip, #716]!	; 0x2cc

00011e1c <__libc_start_main@plt>:
   11e1c:	add	ip, pc, #0, 12
   11e20:	add	ip, ip, #184320	; 0x2d000
   11e24:	ldr	pc, [ip, #708]!	; 0x2c4

00011e28 <strftime@plt>:
   11e28:	add	ip, pc, #0, 12
   11e2c:	add	ip, ip, #184320	; 0x2d000
   11e30:	ldr	pc, [ip, #700]!	; 0x2bc

00011e34 <__freading@plt>:
   11e34:	add	ip, pc, #0, 12
   11e38:	add	ip, ip, #184320	; 0x2d000
   11e3c:	ldr	pc, [ip, #692]!	; 0x2b4

00011e40 <__ctype_tolower_loc@plt>:
   11e40:	add	ip, pc, #0, 12
   11e44:	add	ip, ip, #184320	; 0x2d000
   11e48:	ldr	pc, [ip, #684]!	; 0x2ac

00011e4c <__ctype_toupper_loc@plt>:
   11e4c:	add	ip, pc, #0, 12
   11e50:	add	ip, ip, #184320	; 0x2d000
   11e54:	ldr	pc, [ip, #676]!	; 0x2a4

00011e58 <__gmon_start__@plt>:
   11e58:	add	ip, pc, #0, 12
   11e5c:	add	ip, ip, #184320	; 0x2d000
   11e60:	ldr	pc, [ip, #668]!	; 0x29c

00011e64 <getopt_long@plt>:
   11e64:	add	ip, pc, #0, 12
   11e68:	add	ip, ip, #184320	; 0x2d000
   11e6c:	ldr	pc, [ip, #660]!	; 0x294

00011e70 <__ctype_b_loc@plt>:
   11e70:	add	ip, pc, #0, 12
   11e74:	add	ip, ip, #184320	; 0x2d000
   11e78:	ldr	pc, [ip, #652]!	; 0x28c

00011e7c <getcwd@plt>:
   11e7c:	add	ip, pc, #0, 12
   11e80:	add	ip, ip, #184320	; 0x2d000
   11e84:	ldr	pc, [ip, #644]!	; 0x284

00011e88 <exit@plt>:
   11e88:	add	ip, pc, #0, 12
   11e8c:	add	ip, ip, #184320	; 0x2d000
   11e90:	ldr	pc, [ip, #636]!	; 0x27c

00011e94 <getfilecon@plt>:
   11e94:	add	ip, pc, #0, 12
   11e98:	add	ip, ip, #184320	; 0x2d000
   11e9c:	ldr	pc, [ip, #628]!	; 0x274

00011ea0 <tcgetpgrp@plt>:
   11ea0:	add	ip, pc, #0, 12
   11ea4:	add	ip, ip, #184320	; 0x2d000
   11ea8:	ldr	pc, [ip, #620]!	; 0x26c

00011eac <strlen@plt>:
   11eac:	add	ip, pc, #0, 12
   11eb0:	add	ip, ip, #184320	; 0x2d000
   11eb4:	ldr	pc, [ip, #612]!	; 0x264

00011eb8 <strchr@plt>:
   11eb8:	add	ip, pc, #0, 12
   11ebc:	add	ip, ip, #184320	; 0x2d000
   11ec0:	ldr	pc, [ip, #604]!	; 0x25c

00011ec4 <setenv@plt>:
   11ec4:	add	ip, pc, #0, 12
   11ec8:	add	ip, ip, #184320	; 0x2d000
   11ecc:	ldr	pc, [ip, #596]!	; 0x254

00011ed0 <__errno_location@plt>:
   11ed0:	add	ip, pc, #0, 12
   11ed4:	add	ip, ip, #184320	; 0x2d000
   11ed8:	ldr	pc, [ip, #588]!	; 0x24c

00011edc <__sprintf_chk@plt>:
   11edc:	add	ip, pc, #0, 12
   11ee0:	add	ip, ip, #184320	; 0x2d000
   11ee4:	ldr	pc, [ip, #580]!	; 0x244

00011ee8 <__cxa_atexit@plt>:
   11ee8:	add	ip, pc, #0, 12
   11eec:	add	ip, ip, #184320	; 0x2d000
   11ef0:	ldr	pc, [ip, #572]!	; 0x23c

00011ef4 <memset@plt>:
   11ef4:	add	ip, pc, #0, 12
   11ef8:	add	ip, ip, #184320	; 0x2d000
   11efc:	ldr	pc, [ip, #564]!	; 0x234

00011f00 <__printf_chk@plt>:
   11f00:	add	ip, pc, #0, 12
   11f04:	add	ip, ip, #184320	; 0x2d000
   11f08:	ldr	pc, [ip, #556]!	; 0x22c

00011f0c <stpncpy@plt>:
   11f0c:	add	ip, pc, #0, 12
   11f10:	add	ip, ip, #184320	; 0x2d000
   11f14:	ldr	pc, [ip, #548]!	; 0x224

00011f18 <fileno@plt>:
   11f18:	add	ip, pc, #0, 12
   11f1c:	add	ip, ip, #184320	; 0x2d000
   11f20:	ldr	pc, [ip, #540]!	; 0x21c

00011f24 <__fprintf_chk@plt>:
   11f24:	add	ip, pc, #0, 12
   11f28:	add	ip, ip, #184320	; 0x2d000
   11f2c:	ldr	pc, [ip, #532]!	; 0x214

00011f30 <fclose@plt>:
   11f30:	add	ip, pc, #0, 12
   11f34:	add	ip, ip, #184320	; 0x2d000
   11f38:	ldr	pc, [ip, #524]!	; 0x20c

00011f3c <fseeko64@plt>:
   11f3c:	add	ip, pc, #0, 12
   11f40:	add	ip, ip, #184320	; 0x2d000
   11f44:	ldr	pc, [ip, #516]!	; 0x204

00011f48 <statx@plt>:
   11f48:	add	ip, pc, #0, 12
   11f4c:	add	ip, ip, #184320	; 0x2d000
   11f50:	ldr	pc, [ip, #508]!	; 0x1fc

00011f54 <__overflow@plt>:
   11f54:	add	ip, pc, #0, 12
   11f58:	add	ip, ip, #184320	; 0x2d000
   11f5c:	ldr	pc, [ip, #500]!	; 0x1f4

00011f60 <setlocale@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #184320	; 0x2d000
   11f68:	ldr	pc, [ip, #492]!	; 0x1ec

00011f6c <sigemptyset@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #184320	; 0x2d000
   11f74:	ldr	pc, [ip, #484]!	; 0x1e4

00011f78 <wcswidth@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #184320	; 0x2d000
   11f80:	ldr	pc, [ip, #476]!	; 0x1dc

00011f84 <strrchr@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #184320	; 0x2d000
   11f8c:	ldr	pc, [ip, #468]!	; 0x1d4

00011f90 <cap_get_file@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #184320	; 0x2d000
   11f98:	ldr	pc, [ip, #460]!	; 0x1cc

00011f9c <nl_langinfo@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #184320	; 0x2d000
   11fa4:	ldr	pc, [ip, #452]!	; 0x1c4

00011fa8 <localeconv@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #184320	; 0x2d000
   11fb0:	ldr	pc, [ip, #444]!	; 0x1bc

00011fb4 <mbstowcs@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #184320	; 0x2d000
   11fbc:	ldr	pc, [ip, #436]!	; 0x1b4

00011fc0 <readdir64@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #184320	; 0x2d000
   11fc8:	ldr	pc, [ip, #428]!	; 0x1ac

00011fcc <timegm@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #184320	; 0x2d000
   11fd4:	ldr	pc, [ip, #420]!	; 0x1a4

00011fd8 <cap_free@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #184320	; 0x2d000
   11fe0:	ldr	pc, [ip, #412]!	; 0x19c

00011fe4 <dirfd@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #184320	; 0x2d000
   11fec:	ldr	pc, [ip, #404]!	; 0x194

00011ff0 <freecon@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #184320	; 0x2d000
   11ff8:	ldr	pc, [ip, #396]!	; 0x18c

00011ffc <bindtextdomain@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #184320	; 0x2d000
   12004:	ldr	pc, [ip, #388]!	; 0x184

00012008 <__xstat64@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #184320	; 0x2d000
   12010:	ldr	pc, [ip, #380]!	; 0x17c

00012014 <isatty@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #184320	; 0x2d000
   1201c:	ldr	pc, [ip, #372]!	; 0x174

00012020 <unsetenv@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #184320	; 0x2d000
   12028:	ldr	pc, [ip, #364]!	; 0x16c

0001202c <strncmp@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #184320	; 0x2d000
   12034:	ldr	pc, [ip, #356]!	; 0x164

00012038 <abort@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #184320	; 0x2d000
   12040:	ldr	pc, [ip, #348]!	; 0x15c

00012044 <closedir@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #184320	; 0x2d000
   1204c:	ldr	pc, [ip, #340]!	; 0x154

00012050 <getgrgid@plt>:
   12050:	add	ip, pc, #0, 12
   12054:	add	ip, ip, #184320	; 0x2d000
   12058:	ldr	pc, [ip, #332]!	; 0x14c

0001205c <getgrnam@plt>:
   1205c:	add	ip, pc, #0, 12
   12060:	add	ip, ip, #184320	; 0x2d000
   12064:	ldr	pc, [ip, #324]!	; 0x144

00012068 <__snprintf_chk@plt>:
   12068:	add	ip, pc, #0, 12
   1206c:	add	ip, ip, #184320	; 0x2d000
   12070:	ldr	pc, [ip, #316]!	; 0x13c

00012074 <strspn@plt>:
   12074:	add	ip, pc, #0, 12
   12078:	add	ip, ip, #184320	; 0x2d000
   1207c:	ldr	pc, [ip, #308]!	; 0x134

00012080 <__mempcpy_chk@plt>:
   12080:	add	ip, pc, #0, 12
   12084:	add	ip, ip, #184320	; 0x2d000
   12088:	ldr	pc, [ip, #300]!	; 0x12c

0001208c <__assert_fail@plt>:
   1208c:	add	ip, pc, #0, 12
   12090:	add	ip, ip, #184320	; 0x2d000
   12094:	ldr	pc, [ip, #292]!	; 0x124

Disassembly of section .text:

000120a0 <_obstack_begin@@Base-0x12c5c>:
   120a0:	mov	fp, #0
   120a4:	mov	lr, #0
   120a8:	pop	{r1}		; (ldr r1, [sp], #4)
   120ac:	mov	r2, sp
   120b0:	push	{r2}		; (str r2, [sp, #-4]!)
   120b4:	push	{r0}		; (str r0, [sp, #-4]!)
   120b8:	ldr	ip, [pc, #16]	; 120d0 <__assert_fail@plt+0x44>
   120bc:	push	{ip}		; (str ip, [sp, #-4]!)
   120c0:	ldr	r0, [pc, #12]	; 120d4 <__assert_fail@plt+0x48>
   120c4:	ldr	r3, [pc, #12]	; 120d8 <__assert_fail@plt+0x4c>
   120c8:	bl	11e1c <__libc_start_main@plt>
   120cc:	bl	12038 <abort@plt>
   120d0:	andeq	r9, r2, r0, ror #28
   120d4:	muleq	r1, r0, r1
   120d8:	andeq	r9, r2, r0, lsl #28
   120dc:	ldr	r3, [pc, #20]	; 120f8 <__assert_fail@plt+0x6c>
   120e0:	ldr	r2, [pc, #20]	; 120fc <__assert_fail@plt+0x70>
   120e4:	add	r3, pc, r3
   120e8:	ldr	r2, [r3, r2]
   120ec:	cmp	r2, #0
   120f0:	bxeq	lr
   120f4:	b	11e58 <__gmon_start__@plt>
   120f8:	andeq	ip, r2, r4, lsl pc
   120fc:			; <UNDEFINED> instruction: 0x000001bc
   12100:	ldr	r0, [pc, #24]	; 12120 <__assert_fail@plt+0x94>
   12104:	ldr	r3, [pc, #24]	; 12124 <__assert_fail@plt+0x98>
   12108:	cmp	r3, r0
   1210c:	bxeq	lr
   12110:	ldr	r3, [pc, #16]	; 12128 <__assert_fail@plt+0x9c>
   12114:	cmp	r3, #0
   12118:	bxeq	lr
   1211c:	bx	r3
   12120:	strdeq	pc, [r3], -r8
   12124:	strdeq	pc, [r3], -r8
   12128:	andeq	r0, r0, r0
   1212c:	ldr	r0, [pc, #36]	; 12158 <__assert_fail@plt+0xcc>
   12130:	ldr	r1, [pc, #36]	; 1215c <__assert_fail@plt+0xd0>
   12134:	sub	r1, r1, r0
   12138:	asr	r1, r1, #2
   1213c:	add	r1, r1, r1, lsr #31
   12140:	asrs	r1, r1, #1
   12144:	bxeq	lr
   12148:	ldr	r3, [pc, #16]	; 12160 <__assert_fail@plt+0xd4>
   1214c:	cmp	r3, #0
   12150:	bxeq	lr
   12154:	bx	r3
   12158:	strdeq	pc, [r3], -r8
   1215c:	strdeq	pc, [r3], -r8
   12160:	andeq	r0, r0, r0
   12164:	push	{r4, lr}
   12168:	ldr	r4, [pc, #24]	; 12188 <__assert_fail@plt+0xfc>
   1216c:	ldrb	r3, [r4]
   12170:	cmp	r3, #0
   12174:	popne	{r4, pc}
   12178:	bl	12100 <__assert_fail@plt+0x74>
   1217c:	mov	r3, #1
   12180:	strb	r3, [r4]
   12184:	pop	{r4, pc}
   12188:	andeq	pc, r3, r4, lsl r3	; <UNPREDICTABLE>
   1218c:	b	1212c <__assert_fail@plt+0xa0>
   12190:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12194:	add	fp, sp, #28
   12198:	sub	sp, sp, #580	; 0x244
   1219c:	sub	sp, sp, #1024	; 0x400
   121a0:	mov	r7, r0
   121a4:	ldr	r0, [r1]
   121a8:	mov	r5, r1
   121ac:	bl	250ec <_obstack_memory_used@@Base+0x78>
   121b0:	movw	r1, #49853	; 0xc2bd
   121b4:	mov	r0, #6
   121b8:	movt	r1, #2
   121bc:	bl	11f60 <setlocale@plt>
   121c0:	movw	r6, #48415	; 0xbd1f
   121c4:	movw	r1, #40596	; 0x9e94
   121c8:	movt	r6, #2
   121cc:	movt	r1, #2
   121d0:	mov	r0, r6
   121d4:	bl	11ffc <bindtextdomain@plt>
   121d8:	mov	r0, r6
   121dc:	bl	11cf0 <textdomain@plt>
   121e0:	movw	r0, #62124	; 0xf2ac
   121e4:	mov	r1, #2
   121e8:	movt	r0, #3
   121ec:	str	r1, [r0]
   121f0:	movw	r0, #64240	; 0xfaf0
   121f4:	movt	r0, #1
   121f8:	bl	29e64 <_obstack_memory_used@@Base+0x4df0>
   121fc:	movw	r0, #62232	; 0xf318
   12200:	movw	r1, #62236	; 0xf31c
   12204:	mov	r2, #0
   12208:	mvn	r6, #0
   1220c:	mvn	r9, #0
   12210:	mvn	r4, #0
   12214:	movt	r0, #3
   12218:	movt	r1, #3
   1221c:	str	r2, [r0]
   12220:	mov	r0, #1
   12224:	strb	r0, [r1]
   12228:	movw	r0, #62240	; 0xf320
   1222c:	mov	r1, #0
   12230:	movt	r0, #3
   12234:	str	r1, [sp, #36]	; 0x24
   12238:	mov	r1, #-2147483648	; 0x80000000
   1223c:	str	r2, [r0]
   12240:	movw	r0, #62244	; 0xf324
   12244:	movt	r0, #3
   12248:	stm	r0, {r1, r6}
   1224c:	mvn	r0, #0
   12250:	mvn	r1, #0
   12254:	str	r0, [sp, #44]	; 0x2c
   12258:	mvn	r0, #0
   1225c:	str	r1, [sp, #48]	; 0x30
   12260:	mov	r1, #0
   12264:	str	r0, [sp, #40]	; 0x28
   12268:	mvn	r0, #0
   1226c:	str	r1, [sp, #52]	; 0x34
   12270:	b	12290 <__assert_fail@plt+0x204>
   12274:	mov	r1, #1
   12278:	strb	r1, [r0]
   1227c:	mov	r0, r8
   12280:	b	12290 <__assert_fail@plt+0x204>
   12284:	movw	r0, #62260	; 0xf334
   12288:	movt	r0, #3
   1228c:	b	12274 <__assert_fail@plt+0x1e8>
   12290:	movw	r2, #48223	; 0xbc5f
   12294:	movw	r3, #50656	; 0xc5e0
   12298:	mov	r8, r0
   1229c:	sub	r0, fp, #36	; 0x24
   122a0:	mov	r1, r5
   122a4:	str	r6, [fp, #-36]	; 0xffffffdc
   122a8:	str	r0, [sp]
   122ac:	mov	r0, r7
   122b0:	movt	r2, #2
   122b4:	movt	r3, #2
   122b8:	bl	11e64 <getopt_long@plt>
   122bc:	add	r1, r0, #3
   122c0:	cmp	r1, #276	; 0x114
   122c4:	bhi	15368 <__assert_fail@plt+0x32dc>
   122c8:	add	r2, pc, #4
   122cc:	mov	r0, #7
   122d0:	ldr	pc, [r2, r1, lsl #2]
   122d4:	andeq	r5, r1, r0, ror r3
   122d8:	andeq	r5, r1, ip, ror #7
   122dc:	andeq	r2, r1, r8, ror #31
   122e0:	andeq	r5, r1, r8, ror #6
   122e4:	andeq	r5, r1, r8, ror #6
   122e8:	andeq	r5, r1, r8, ror #6
   122ec:	andeq	r5, r1, r8, ror #6
   122f0:	andeq	r5, r1, r8, ror #6
   122f4:	andeq	r5, r1, r8, ror #6
   122f8:	andeq	r5, r1, r8, ror #6
   122fc:	andeq	r5, r1, r8, ror #6
   12300:	andeq	r5, r1, r8, ror #6
   12304:	andeq	r5, r1, r8, ror #6
   12308:	andeq	r5, r1, r8, ror #6
   1230c:	andeq	r5, r1, r8, ror #6
   12310:	andeq	r5, r1, r8, ror #6
   12314:	andeq	r5, r1, r8, ror #6
   12318:	andeq	r5, r1, r8, ror #6
   1231c:	andeq	r5, r1, r8, ror #6
   12320:	andeq	r5, r1, r8, ror #6
   12324:	andeq	r5, r1, r8, ror #6
   12328:	andeq	r5, r1, r8, ror #6
   1232c:	andeq	r5, r1, r8, ror #6
   12330:	andeq	r5, r1, r8, ror #6
   12334:	andeq	r5, r1, r8, ror #6
   12338:	andeq	r5, r1, r8, ror #6
   1233c:	andeq	r5, r1, r8, ror #6
   12340:	andeq	r5, r1, r8, ror #6
   12344:	andeq	r5, r1, r8, ror #6
   12348:	andeq	r5, r1, r8, ror #6
   1234c:	andeq	r5, r1, r8, ror #6
   12350:	andeq	r5, r1, r8, ror #6
   12354:	andeq	r5, r1, r8, ror #6
   12358:	andeq	r5, r1, r8, ror #6
   1235c:	andeq	r5, r1, r8, ror #6
   12360:	andeq	r5, r1, r8, ror #6
   12364:	andeq	r5, r1, r8, ror #6
   12368:	andeq	r5, r1, r8, ror #6
   1236c:	andeq	r5, r1, r8, ror #6
   12370:	andeq	r5, r1, r8, ror #6
   12374:	andeq	r5, r1, r8, ror #6
   12378:	andeq	r5, r1, r8, ror #6
   1237c:	andeq	r5, r1, r8, ror #6
   12380:	andeq	r5, r1, r8, ror #6
   12384:	andeq	r5, r1, r8, ror #6
   12388:	andeq	r5, r1, r8, ror #6
   1238c:	andeq	r5, r1, r8, ror #6
   12390:	andeq	r5, r1, r8, ror #6
   12394:	andeq	r5, r1, r8, ror #6
   12398:	andeq	r5, r1, r8, ror #6
   1239c:	andeq	r5, r1, r8, ror #6
   123a0:	andeq	r5, r1, r8, ror #6
   123a4:	andeq	r2, r1, r8, lsr #14
   123a8:	andeq	r5, r1, r8, ror #6
   123ac:	andeq	r5, r1, r8, ror #6
   123b0:	andeq	r5, r1, r8, ror #6
   123b4:	andeq	r5, r1, r8, ror #6
   123b8:	andeq	r5, r1, r8, ror #6
   123bc:	andeq	r5, r1, r8, ror #6
   123c0:	andeq	r5, r1, r8, ror #6
   123c4:	andeq	r5, r1, r8, ror #6
   123c8:	andeq	r5, r1, r8, ror #6
   123cc:	andeq	r5, r1, r8, ror #6
   123d0:	andeq	r5, r1, r8, ror #6
   123d4:	andeq	r5, r1, r8, ror #6
   123d8:	andeq	r5, r1, r8, ror #6
   123dc:	andeq	r5, r1, r8, ror #6
   123e0:	andeq	r5, r1, r8, ror #6
   123e4:	andeq	r2, r1, r8, ror #21
   123e8:	muleq	r1, ip, sl
   123ec:	ldrdeq	r2, [r1], -r0
   123f0:	andeq	r2, r1, r4, asr #23
   123f4:	andeq	r5, r1, r8, ror #6
   123f8:	andeq	r2, r1, r4, ror #19
   123fc:	andeq	r2, r1, ip, lsr #23
   12400:	strdeq	r2, [r1], -r8
   12404:	andeq	r2, r1, r4, lsl #22
   12408:	andeq	r5, r1, r8, ror #6
   1240c:	andeq	r5, r1, r8, ror #6
   12410:	andeq	r2, r1, r4, ror r9
   12414:	andeq	r5, r1, r8, ror #6
   12418:	andeq	r2, r1, r8, ror sp
   1241c:	andeq	r5, r1, r8, ror #6
   12420:	andeq	r5, r1, r8, ror #6
   12424:	ldrdeq	r2, [r1], -ip
   12428:	andeq	r2, r1, r8, ror ip
   1242c:	andeq	r2, r1, r0, lsl r9
   12430:			; <UNDEFINED> instruction: 0x00012cb8
   12434:	andeq	r2, r1, r4, asr #19
   12438:	andeq	r5, r1, r8, ror #6
   1243c:	andeq	r5, r1, r8, ror #6
   12440:	andeq	r2, r1, r0, lsl r8
   12444:	andeq	r5, r1, r8, ror #6
   12448:	andeq	r2, r1, r4, asr r8
   1244c:	andeq	r5, r1, r8, ror #6
   12450:	andeq	r5, r1, r8, ror #6
   12454:	andeq	r5, r1, r8, ror #6
   12458:	andeq	r5, r1, r8, ror #6
   1245c:	andeq	r5, r1, r8, ror #6
   12460:	andeq	r5, r1, r8, ror #6
   12464:	muleq	r1, r0, sl
   12468:	muleq	r1, r0, r2
   1246c:	andeq	r2, r1, r8, lsr #16
   12470:	andeq	r2, r1, r8, lsr r8
   12474:	andeq	r5, r1, r8, ror #6
   12478:	andeq	r2, r1, r4, lsl #19
   1247c:	ldrdeq	r2, [r1], -r4
   12480:	andeq	r2, r1, r8, lsl #15
   12484:	ldrdeq	r2, [r1], -r0
   12488:	andeq	r5, r1, r8, ror #6
   1248c:	andeq	r2, r1, r0, lsl #27
   12490:	andeq	r2, r1, r0, lsl #29
   12494:	andeq	r2, r1, ip, lsr fp
   12498:	andeq	r2, r1, r8, asr #22
   1249c:	strdeq	r2, [r1], -ip
   124a0:	andeq	r2, r1, r4, asr #16
   124a4:	andeq	r2, r1, r8, lsl #18
   124a8:	andeq	r2, r1, r0, ror r7
   124ac:	andeq	r2, r1, r8, lsr r7
   124b0:	andeq	r2, r1, r8, ror #27
   124b4:	andeq	r2, r1, r0, asr lr
   124b8:	andeq	r2, r1, r8, ror #28
   124bc:	andeq	r2, r1, r0, lsr #26
   124c0:			; <UNDEFINED> instruction: 0x00012bb8
   124c4:	andeq	r5, r1, r8, ror #6
   124c8:	andeq	r5, r1, r8, ror #6
   124cc:	andeq	r5, r1, r8, ror #6
   124d0:	andeq	r5, r1, r8, ror #6
   124d4:	andeq	r5, r1, r8, ror #6
   124d8:	andeq	r5, r1, r8, ror #6
   124dc:	andeq	r5, r1, r8, ror #6
   124e0:	andeq	r5, r1, r8, ror #6
   124e4:	andeq	r5, r1, r8, ror #6
   124e8:	andeq	r5, r1, r8, ror #6
   124ec:	andeq	r5, r1, r8, ror #6
   124f0:	andeq	r5, r1, r8, ror #6
   124f4:	andeq	r5, r1, r8, ror #6
   124f8:	andeq	r5, r1, r8, ror #6
   124fc:	andeq	r5, r1, r8, ror #6
   12500:	andeq	r5, r1, r8, ror #6
   12504:	andeq	r5, r1, r8, ror #6
   12508:	andeq	r5, r1, r8, ror #6
   1250c:	andeq	r5, r1, r8, ror #6
   12510:	andeq	r5, r1, r8, ror #6
   12514:	andeq	r5, r1, r8, ror #6
   12518:	andeq	r5, r1, r8, ror #6
   1251c:	andeq	r5, r1, r8, ror #6
   12520:	andeq	r5, r1, r8, ror #6
   12524:	andeq	r5, r1, r8, ror #6
   12528:	andeq	r5, r1, r8, ror #6
   1252c:	andeq	r5, r1, r8, ror #6
   12530:	andeq	r5, r1, r8, ror #6
   12534:	andeq	r5, r1, r8, ror #6
   12538:	andeq	r5, r1, r8, ror #6
   1253c:	andeq	r5, r1, r8, ror #6
   12540:	andeq	r5, r1, r8, ror #6
   12544:	andeq	r5, r1, r8, ror #6
   12548:	andeq	r5, r1, r8, ror #6
   1254c:	andeq	r5, r1, r8, ror #6
   12550:	andeq	r5, r1, r8, ror #6
   12554:	andeq	r5, r1, r8, ror #6
   12558:	andeq	r5, r1, r8, ror #6
   1255c:	andeq	r5, r1, r8, ror #6
   12560:	andeq	r5, r1, r8, ror #6
   12564:	andeq	r5, r1, r8, ror #6
   12568:	andeq	r5, r1, r8, ror #6
   1256c:	andeq	r5, r1, r8, ror #6
   12570:	andeq	r5, r1, r8, ror #6
   12574:	andeq	r5, r1, r8, ror #6
   12578:	andeq	r5, r1, r8, ror #6
   1257c:	andeq	r5, r1, r8, ror #6
   12580:	andeq	r5, r1, r8, ror #6
   12584:	andeq	r5, r1, r8, ror #6
   12588:	andeq	r5, r1, r8, ror #6
   1258c:	andeq	r5, r1, r8, ror #6
   12590:	andeq	r5, r1, r8, ror #6
   12594:	andeq	r5, r1, r8, ror #6
   12598:	andeq	r5, r1, r8, ror #6
   1259c:	andeq	r5, r1, r8, ror #6
   125a0:	andeq	r5, r1, r8, ror #6
   125a4:	andeq	r5, r1, r8, ror #6
   125a8:	andeq	r5, r1, r8, ror #6
   125ac:	andeq	r5, r1, r8, ror #6
   125b0:	andeq	r5, r1, r8, ror #6
   125b4:	andeq	r5, r1, r8, ror #6
   125b8:	andeq	r5, r1, r8, ror #6
   125bc:	andeq	r5, r1, r8, ror #6
   125c0:	andeq	r5, r1, r8, ror #6
   125c4:	andeq	r5, r1, r8, ror #6
   125c8:	andeq	r5, r1, r8, ror #6
   125cc:	andeq	r5, r1, r8, ror #6
   125d0:	andeq	r5, r1, r8, ror #6
   125d4:	andeq	r5, r1, r8, ror #6
   125d8:	andeq	r5, r1, r8, ror #6
   125dc:	andeq	r5, r1, r8, ror #6
   125e0:	andeq	r5, r1, r8, ror #6
   125e4:	andeq	r5, r1, r8, ror #6
   125e8:	andeq	r5, r1, r8, ror #6
   125ec:	andeq	r5, r1, r8, ror #6
   125f0:	andeq	r5, r1, r8, ror #6
   125f4:	andeq	r5, r1, r8, ror #6
   125f8:	andeq	r5, r1, r8, ror #6
   125fc:	andeq	r5, r1, r8, ror #6
   12600:	andeq	r5, r1, r8, ror #6
   12604:	andeq	r5, r1, r8, ror #6
   12608:	andeq	r5, r1, r8, ror #6
   1260c:	andeq	r5, r1, r8, ror #6
   12610:	andeq	r5, r1, r8, ror #6
   12614:	andeq	r5, r1, r8, ror #6
   12618:	andeq	r5, r1, r8, ror #6
   1261c:	andeq	r5, r1, r8, ror #6
   12620:	andeq	r5, r1, r8, ror #6
   12624:	andeq	r5, r1, r8, ror #6
   12628:	andeq	r5, r1, r8, ror #6
   1262c:	andeq	r5, r1, r8, ror #6
   12630:	andeq	r5, r1, r8, ror #6
   12634:	andeq	r5, r1, r8, ror #6
   12638:	andeq	r5, r1, r8, ror #6
   1263c:	andeq	r5, r1, r8, ror #6
   12640:	andeq	r5, r1, r8, ror #6
   12644:	andeq	r5, r1, r8, ror #6
   12648:	andeq	r5, r1, r8, ror #6
   1264c:	andeq	r5, r1, r8, ror #6
   12650:	andeq	r5, r1, r8, ror #6
   12654:	andeq	r5, r1, r8, ror #6
   12658:	andeq	r5, r1, r8, ror #6
   1265c:	andeq	r5, r1, r8, ror #6
   12660:	andeq	r5, r1, r8, ror #6
   12664:	andeq	r5, r1, r8, ror #6
   12668:	andeq	r5, r1, r8, ror #6
   1266c:	andeq	r5, r1, r8, ror #6
   12670:	andeq	r5, r1, r8, ror #6
   12674:	andeq	r5, r1, r8, ror #6
   12678:	andeq	r5, r1, r8, ror #6
   1267c:	andeq	r5, r1, r8, ror #6
   12680:	andeq	r5, r1, r8, ror #6
   12684:	andeq	r5, r1, r8, ror #6
   12688:	andeq	r5, r1, r8, ror #6
   1268c:	andeq	r5, r1, r8, ror #6
   12690:	andeq	r5, r1, r8, ror #6
   12694:	andeq	r5, r1, r8, ror #6
   12698:	andeq	r5, r1, r8, ror #6
   1269c:	andeq	r5, r1, r8, ror #6
   126a0:	andeq	r5, r1, r8, ror #6
   126a4:	andeq	r5, r1, r8, ror #6
   126a8:	andeq	r5, r1, r8, ror #6
   126ac:	andeq	r5, r1, r8, ror #6
   126b0:	andeq	r5, r1, r8, ror #6
   126b4:	andeq	r5, r1, r8, ror #6
   126b8:	andeq	r5, r1, r8, ror #6
   126bc:	andeq	r5, r1, r8, ror #6
   126c0:	andeq	r5, r1, r8, ror #6
   126c4:	andeq	r5, r1, r8, ror #6
   126c8:	andeq	r5, r1, r8, ror #6
   126cc:	andeq	r5, r1, r8, ror #6
   126d0:	andeq	r5, r1, r8, ror #6
   126d4:	andeq	r5, r1, r8, ror #6
   126d8:	andeq	r5, r1, r8, ror #6
   126dc:	andeq	r5, r1, r8, ror #6
   126e0:	andeq	r2, r1, ip, lsl r8
   126e4:	andeq	r2, r1, ip, lsl r9
   126e8:	ldrdeq	r2, [r1], -ip
   126ec:	muleq	r1, ip, lr
   126f0:	andeq	r2, r1, ip, ror r7
   126f4:	andeq	r2, r1, ip, asr fp
   126f8:	andeq	r2, r1, r4, ror lr
   126fc:	andeq	r2, r1, r4, lsl #5
   12700:	andeq	r2, r1, r0, ror #15
   12704:	andeq	r2, r1, r0, ror #16
   12708:	andeq	r2, r1, r0, lsl #30
   1270c:	andeq	r2, r1, ip, lsr #29
   12710:	andeq	r2, r1, ip, lsl #29
   12714:	andeq	r2, r1, r4, asr #14
   12718:	muleq	r1, r0, sp
   1271c:	strdeq	r2, [r1], -r4
   12720:	andeq	r2, r1, r8, asr r7
   12724:	andeq	r2, r1, r4, lsl #25
   12728:	cmp	r4, #0
   1272c:	mov	r0, r8
   12730:	movwne	r4, #1
   12734:	b	12290 <__assert_fail@plt+0x204>
   12738:	movw	r0, #62341	; 0xf385
   1273c:	movt	r0, #3
   12740:	b	12274 <__assert_fail@plt+0x1e8>
   12744:	movw	r0, #62888	; 0xf5a8
   12748:	mov	r1, #0
   1274c:	mov	r2, #1
   12750:	mov	r3, #144	; 0x90
   12754:	b	12798 <__assert_fail@plt+0x70c>
   12758:	movw	r0, #62224	; 0xf310
   1275c:	movt	r0, #3
   12760:	ldr	r0, [r0]
   12764:	str	r0, [sp, #52]	; 0x34
   12768:	mov	r0, r8
   1276c:	b	12290 <__assert_fail@plt+0x204>
   12770:	movw	r0, #62899	; 0xf5b3
   12774:	movt	r0, #3
   12778:	b	12274 <__assert_fail@plt+0x1e8>
   1277c:	movw	r0, #62276	; 0xf344
   12780:	movt	r0, #3
   12784:	b	12e58 <__assert_fail@plt+0xdcc>
   12788:	movw	r0, #62888	; 0xf5a8
   1278c:	mov	r1, #0
   12790:	mov	r2, #1
   12794:	mov	r3, #176	; 0xb0
   12798:	movt	r0, #3
   1279c:	str	r2, [r0]
   127a0:	str	r1, [r0, #4]
   127a4:	movw	r0, #62880	; 0xf5a0
   127a8:	movt	r0, #3
   127ac:	str	r3, [r0]
   127b0:	movw	r0, #62876	; 0xf59c
   127b4:	movt	r0, #3
   127b8:	str	r3, [r0]
   127bc:	movw	r0, #62088	; 0xf288
   127c0:	movt	r0, #3
   127c4:	str	r2, [r0]
   127c8:	str	r1, [r0, #4]
   127cc:	mov	r0, r8
   127d0:	b	12290 <__assert_fail@plt+0x204>
   127d4:	movw	r0, #62872	; 0xf598
   127d8:	movt	r0, #3
   127dc:	b	12b50 <__assert_fail@plt+0xac4>
   127e0:	mov	r0, #8
   127e4:	bl	27ea0 <_obstack_memory_used@@Base+0x2e2c>
   127e8:	movw	r1, #62224	; 0xf310
   127ec:	movw	r2, #62904	; 0xf5b8
   127f0:	movt	r1, #3
   127f4:	movt	r2, #3
   127f8:	ldr	r1, [r1]
   127fc:	ldr	r3, [r2]
   12800:	stm	r0, {r1, r3}
   12804:	str	r0, [r2]
   12808:	mov	r0, r8
   1280c:	b	12290 <__assert_fail@plt+0x204>
   12810:	mov	r9, #1
   12814:	mov	r0, r8
   12818:	b	12290 <__assert_fail@plt+0x204>
   1281c:	movw	r0, #62900	; 0xf5b4
   12820:	movt	r0, #3
   12824:	b	12274 <__assert_fail@plt+0x1e8>
   12828:	movw	r0, #62868	; 0xf594
   1282c:	mov	r1, #1
   12830:	movt	r0, #3
   12834:	b	12e5c <__assert_fail@plt+0xdd0>
   12838:	movw	r0, #62272	; 0xf340
   1283c:	movt	r0, #3
   12840:	b	12274 <__assert_fail@plt+0x1e8>
   12844:	movw	r0, #62276	; 0xf344
   12848:	mov	r1, #1
   1284c:	movt	r0, #3
   12850:	b	12e5c <__assert_fail@plt+0xdd0>
   12854:	movw	r0, #62340	; 0xf384
   12858:	movt	r0, #3
   1285c:	b	12274 <__assert_fail@plt+0x1e8>
   12860:	movw	r0, #62224	; 0xf310
   12864:	mov	sl, r4
   12868:	movt	r0, #3
   1286c:	ldr	r1, [r0]
   12870:	cmp	r1, #0
   12874:	beq	12f9c <__assert_fail@plt+0xf10>
   12878:	movw	r0, #62120	; 0xf2a8
   1287c:	movw	r6, #51376	; 0xc8b0
   12880:	mov	r2, #4
   12884:	mov	r4, #1
   12888:	movt	r0, #3
   1288c:	str	r2, [sp]
   12890:	movw	r2, #51412	; 0xc8d4
   12894:	movt	r6, #2
   12898:	ldr	r0, [r0]
   1289c:	movt	r2, #2
   128a0:	mov	r3, r6
   128a4:	stmib	sp, {r0, r4}
   128a8:	movw	r0, #48365	; 0xbced
   128ac:	movt	r0, #2
   128b0:	bl	1ed54 <__assert_fail@plt+0xccc8>
   128b4:	ldr	r0, [r6, r0, lsl #2]
   128b8:	mvn	r6, #0
   128bc:	cmp	r0, #1
   128c0:	beq	12fb0 <__assert_fail@plt+0xf24>
   128c4:	cmp	r0, #2
   128c8:	bne	12fac <__assert_fail@plt+0xf20>
   128cc:	movw	r4, #62104	; 0xf298
   128d0:	movt	r4, #3
   128d4:	ldrsb	r0, [r4]
   128d8:	cmn	r0, #1
   128dc:	bgt	128ec <__assert_fail@plt+0x860>
   128e0:	mov	r0, #1
   128e4:	bl	12014 <isatty@plt>
   128e8:	strb	r0, [r4]
   128ec:	uxtb	r4, r0
   128f0:	cmp	r4, #0
   128f4:	movwne	r4, #1
   128f8:	b	12fb0 <__assert_fail@plt+0xf24>
   128fc:	movw	r0, #62898	; 0xf5b2
   12900:	movt	r0, #3
   12904:	b	12b50 <__assert_fail@plt+0xac4>
   12908:	mov	r0, #1
   1290c:	b	12e90 <__assert_fail@plt+0xe04>
   12910:	mov	r9, #3
   12914:	mov	r0, r8
   12918:	b	12290 <__assert_fail@plt+0x204>
   1291c:	movw	r0, #62224	; 0xf310
   12920:	movw	sl, #62888	; 0xf5a8
   12924:	mov	r6, r4
   12928:	movw	r4, #62876	; 0xf59c
   1292c:	movt	r0, #3
   12930:	movt	r4, #3
   12934:	movt	sl, #3
   12938:	ldr	r0, [r0]
   1293c:	mov	r1, r4
   12940:	mov	r2, sl
   12944:	bl	221e8 <__assert_fail@plt+0x1015c>
   12948:	cmp	r0, #0
   1294c:	bne	1543c <__assert_fail@plt+0x33b0>
   12950:	ldrd	r0, [sl]
   12954:	movw	r2, #62088	; 0xf288
   12958:	movt	r2, #3
   1295c:	strd	r0, [r2]
   12960:	ldr	r0, [r4]
   12964:	movw	r1, #62880	; 0xf5a0
   12968:	movt	r1, #3
   1296c:	str	r0, [r1]
   12970:	b	12d68 <__assert_fail@plt+0xcdc>
   12974:	movw	r0, #62268	; 0xf33c
   12978:	mov	r1, #4
   1297c:	movt	r0, #3
   12980:	b	12e5c <__assert_fail@plt+0xdd0>
   12984:	movw	r0, #62252	; 0xf32c
   12988:	mov	r1, #0
   1298c:	mov	r2, #2
   12990:	cmp	r4, #0
   12994:	movt	r0, #3
   12998:	mvneq	r4, #0
   1299c:	strb	r1, [r0]
   129a0:	movw	r0, #62864	; 0xf590
   129a4:	movt	r0, #3
   129a8:	str	r2, [r0]
   129ac:	movw	r0, #62436	; 0xf3e4
   129b0:	movt	r0, #3
   129b4:	strb	r1, [r0]
   129b8:	movw	r0, #62341	; 0xf385
   129bc:	movt	r0, #3
   129c0:	strb	r1, [r0]
   129c4:	mov	r9, #6
   129c8:	mov	r0, r8
   129cc:	b	12290 <__assert_fail@plt+0x204>
   129d0:	mov	r4, #2
   129d4:	mov	r0, r8
   129d8:	b	12290 <__assert_fail@plt+0x204>
   129dc:	mov	r0, #5
   129e0:	b	12290 <__assert_fail@plt+0x204>
   129e4:	movw	r0, #62224	; 0xf310
   129e8:	movt	r0, #3
   129ec:	ldr	r1, [r0]
   129f0:	cmp	r1, #0
   129f4:	beq	12a80 <__assert_fail@plt+0x9f4>
   129f8:	movw	r0, #62120	; 0xf2a8
   129fc:	movw	r6, #51376	; 0xc8b0
   12a00:	mov	r3, #4
   12a04:	mov	r2, #1
   12a08:	movt	r0, #3
   12a0c:	str	r3, [sp]
   12a10:	movt	r6, #2
   12a14:	ldr	r0, [r0]
   12a18:	mov	r3, r6
   12a1c:	stmib	sp, {r0, r2}
   12a20:	movw	r0, #48297	; 0xbca9
   12a24:	movw	r2, #51412	; 0xc8d4
   12a28:	movt	r0, #2
   12a2c:	movt	r2, #2
   12a30:	bl	1ed54 <__assert_fail@plt+0xccc8>
   12a34:	ldr	r0, [r6, r0, lsl #2]
   12a38:	mvn	r6, #0
   12a3c:	cmp	r0, #1
   12a40:	beq	12a80 <__assert_fail@plt+0x9f4>
   12a44:	cmp	r0, #2
   12a48:	bne	12fbc <__assert_fail@plt+0xf30>
   12a4c:	mov	r6, r4
   12a50:	movw	r4, #62104	; 0xf298
   12a54:	movt	r4, #3
   12a58:	ldrsb	r0, [r4]
   12a5c:	cmn	r0, #1
   12a60:	bgt	12a70 <__assert_fail@plt+0x9e4>
   12a64:	mov	r0, #1
   12a68:	bl	12014 <isatty@plt>
   12a6c:	strb	r0, [r4]
   12a70:	mov	r4, r6
   12a74:	tst	r0, #255	; 0xff
   12a78:	mvn	r6, #0
   12a7c:	beq	12fe0 <__assert_fail@plt+0xf54>
   12a80:	movw	r0, #62276	; 0xf344
   12a84:	mov	r1, #3
   12a88:	movt	r0, #3
   12a8c:	b	12e5c <__assert_fail@plt+0xdd0>
   12a90:	movw	r0, #62864	; 0xf590
   12a94:	movt	r0, #3
   12a98:	b	12e58 <__assert_fail@plt+0xdcc>
   12a9c:	mov	r0, #8
   12aa0:	bl	27ea0 <_obstack_memory_used@@Base+0x2e2c>
   12aa4:	mov	r6, r4
   12aa8:	movw	r4, #62928	; 0xf5d0
   12aac:	movw	r1, #48294	; 0xbca6
   12ab0:	movt	r4, #3
   12ab4:	movt	r1, #2
   12ab8:	ldr	r2, [r4]
   12abc:	stm	r0, {r1, r2}
   12ac0:	str	r0, [r4]
   12ac4:	mov	r0, #8
   12ac8:	bl	27ea0 <_obstack_memory_used@@Base+0x2e2c>
   12acc:	ldr	r2, [r4]
   12ad0:	movw	r1, #48293	; 0xbca5
   12ad4:	movt	r1, #2
   12ad8:	stm	r0, {r1, r2}
   12adc:	str	r0, [r4]
   12ae0:	mov	r4, r6
   12ae4:	b	12ddc <__assert_fail@plt+0xd50>
   12ae8:	movw	r0, #62864	; 0xf590
   12aec:	mov	r1, #1
   12af0:	movt	r0, #3
   12af4:	b	12e5c <__assert_fail@plt+0xdd0>
   12af8:	movw	r0, #62268	; 0xf33c
   12afc:	movt	r0, #3
   12b00:	b	12e58 <__assert_fail@plt+0xdcc>
   12b04:	movw	r0, #62224	; 0xf310
   12b08:	mov	r6, r4
   12b0c:	movt	r0, #3
   12b10:	ldr	r4, [r0]
   12b14:	mov	r0, #8
   12b18:	bl	27ea0 <_obstack_memory_used@@Base+0x2e2c>
   12b1c:	movw	r1, #62928	; 0xf5d0
   12b20:	str	r4, [r0]
   12b24:	mov	r4, r6
   12b28:	mvn	r6, #0
   12b2c:	movt	r1, #3
   12b30:	ldr	r2, [r1]
   12b34:	str	r2, [r0, #4]
   12b38:	b	12f58 <__assert_fail@plt+0xecc>
   12b3c:	mov	r4, #4
   12b40:	mov	r0, r8
   12b44:	b	12290 <__assert_fail@plt+0x204>
   12b48:	movw	r0, #62897	; 0xf5b1
   12b4c:	movt	r0, #3
   12b50:	mov	r1, #1
   12b54:	strb	r1, [r0]
   12b58:	b	12e80 <__assert_fail@plt+0xdf4>
   12b5c:	movw	r0, #62224	; 0xf310
   12b60:	movw	r6, #51564	; 0xc96c
   12b64:	mov	r3, #4
   12b68:	mov	r2, #1
   12b6c:	movt	r0, #3
   12b70:	str	r3, [sp]
   12b74:	movt	r6, #2
   12b78:	ldr	r1, [r0]
   12b7c:	movw	r0, #62120	; 0xf2a8
   12b80:	mov	r3, r6
   12b84:	movt	r0, #3
   12b88:	ldr	r0, [r0]
   12b8c:	stmib	sp, {r0, r2}
   12b90:	movw	r0, #48339	; 0xbcd3
   12b94:	movw	r2, #51592	; 0xc988
   12b98:	movt	r0, #2
   12b9c:	movt	r2, #2
   12ba0:	bl	1ed54 <__assert_fail@plt+0xccc8>
   12ba4:	ldr	r4, [r6, r0, lsl #2]
   12ba8:	b	12ddc <__assert_fail@plt+0xd50>
   12bac:	movw	r0, #62898	; 0xf5b2
   12bb0:	movt	r0, #3
   12bb4:	b	12274 <__assert_fail@plt+0x1e8>
   12bb8:	mov	r4, #3
   12bbc:	mov	r0, r8
   12bc0:	b	12290 <__assert_fail@plt+0x204>
   12bc4:	movw	r0, #62344	; 0xf388
   12bc8:	movt	r0, #3
   12bcc:	b	12274 <__assert_fail@plt+0x1e8>
   12bd0:	movw	r0, #62896	; 0xf5b0
   12bd4:	movt	r0, #3
   12bd8:	b	12274 <__assert_fail@plt+0x1e8>
   12bdc:	movw	r0, #62224	; 0xf310
   12be0:	mov	sl, r4
   12be4:	movt	r0, #3
   12be8:	ldr	r1, [r0]
   12bec:	cmp	r1, #0
   12bf0:	beq	12fa4 <__assert_fail@plt+0xf18>
   12bf4:	movw	r0, #62120	; 0xf2a8
   12bf8:	movw	r6, #51376	; 0xc8b0
   12bfc:	mov	r2, #4
   12c00:	mov	r4, #1
   12c04:	movt	r0, #3
   12c08:	str	r2, [sp]
   12c0c:	movw	r2, #51412	; 0xc8d4
   12c10:	movt	r6, #2
   12c14:	ldr	r0, [r0]
   12c18:	movt	r2, #2
   12c1c:	mov	r3, r6
   12c20:	stmib	sp, {r0, r4}
   12c24:	movw	r0, #48357	; 0xbce5
   12c28:	movt	r0, #2
   12c2c:	bl	1ed54 <__assert_fail@plt+0xccc8>
   12c30:	ldr	r0, [r6, r0, lsl #2]
   12c34:	mvn	r6, #0
   12c38:	cmp	r0, #1
   12c3c:	beq	12fc8 <__assert_fail@plt+0xf3c>
   12c40:	cmp	r0, #2
   12c44:	bne	12fc4 <__assert_fail@plt+0xf38>
   12c48:	movw	r4, #62104	; 0xf298
   12c4c:	movt	r4, #3
   12c50:	ldrsb	r0, [r4]
   12c54:	cmn	r0, #1
   12c58:	bgt	12c68 <__assert_fail@plt+0xbdc>
   12c5c:	mov	r0, #1
   12c60:	bl	12014 <isatty@plt>
   12c64:	strb	r0, [r4]
   12c68:	uxtb	r4, r0
   12c6c:	cmp	r4, #0
   12c70:	movwne	r4, #1
   12c74:	b	12fc8 <__assert_fail@plt+0xf3c>
   12c78:	movw	r0, #62280	; 0xf348
   12c7c:	movt	r0, #3
   12c80:	b	12274 <__assert_fail@plt+0x1e8>
   12c84:	movw	r1, #62252	; 0xf32c
   12c88:	mov	r0, #0
   12c8c:	mov	r2, #1
   12c90:	cmp	r4, #0
   12c94:	movt	r1, #3
   12c98:	movwne	r4, #1
   12c9c:	strb	r0, [r1]
   12ca0:	movw	r1, #62908	; 0xf5bc
   12ca4:	movt	r1, #3
   12ca8:	strb	r2, [r1]
   12cac:	mov	r1, #0
   12cb0:	str	r1, [sp, #48]	; 0x30
   12cb4:	b	12290 <__assert_fail@plt+0x204>
   12cb8:	movw	r0, #62224	; 0xf310
   12cbc:	movw	r1, #48308	; 0xbcb4
   12cc0:	mov	r2, #5
   12cc4:	mov	sl, #0
   12cc8:	movt	r0, #3
   12ccc:	movt	r1, #2
   12cd0:	ldr	r6, [r0]
   12cd4:	mov	r0, #0
   12cd8:	bl	11cb4 <dcgettext@plt>
   12cdc:	mvn	r2, #-2147483648	; 0x80000000
   12ce0:	mov	r1, #2
   12ce4:	mov	r3, #0
   12ce8:	stm	sp, {r2, sl}
   12cec:	movw	r2, #49853	; 0xc2bd
   12cf0:	str	r0, [sp, #12]
   12cf4:	str	r1, [sp, #16]
   12cf8:	mov	r0, r6
   12cfc:	mov	r1, #0
   12d00:	mvn	r6, #0
   12d04:	movt	r2, #2
   12d08:	str	r2, [sp, #8]
   12d0c:	mov	r2, #0
   12d10:	bl	28444 <_obstack_memory_used@@Base+0x33d0>
   12d14:	str	r0, [sp, #40]	; 0x28
   12d18:	mov	r0, r8
   12d1c:	b	12290 <__assert_fail@plt+0x204>
   12d20:	movw	sl, #62224	; 0xf310
   12d24:	movw	r1, #49853	; 0xc2bd
   12d28:	add	r3, sp, #56	; 0x38
   12d2c:	mov	r2, #0
   12d30:	mov	r6, r4
   12d34:	mov	r4, #0
   12d38:	movt	sl, #3
   12d3c:	movt	r1, #2
   12d40:	ldr	r0, [sl]
   12d44:	str	r1, [sp]
   12d48:	mov	r1, #0
   12d4c:	bl	2876c <_obstack_memory_used@@Base+0x36f8>
   12d50:	cmp	r0, #0
   12d54:	beq	12f64 <__assert_fail@plt+0xed8>
   12d58:	cmp	r0, #1
   12d5c:	bne	15460 <__assert_fail@plt+0x33d4>
   12d60:	mov	r0, #0
   12d64:	str	r0, [sp, #44]	; 0x2c
   12d68:	mov	r4, r6
   12d6c:	mov	r0, r8
   12d70:	mvn	r6, #0
   12d74:	b	12290 <__assert_fail@plt+0x204>
   12d78:	mov	r0, #0
   12d7c:	b	12290 <__assert_fail@plt+0x204>
   12d80:	mov	r0, #1
   12d84:	str	r0, [sp, #36]	; 0x24
   12d88:	mov	r0, r8
   12d8c:	b	12290 <__assert_fail@plt+0x204>
   12d90:	movw	r0, #62224	; 0xf310
   12d94:	movw	r6, #51452	; 0xc8fc
   12d98:	mov	r3, #4
   12d9c:	mov	r2, #1
   12da0:	movt	r0, #3
   12da4:	str	r3, [sp]
   12da8:	movt	r6, #2
   12dac:	ldr	r1, [r0]
   12db0:	movw	r0, #62120	; 0xf2a8
   12db4:	mov	r3, r6
   12db8:	movt	r0, #3
   12dbc:	ldr	r0, [r0]
   12dc0:	stmib	sp, {r0, r2}
   12dc4:	movw	r0, #48325	; 0xbcc5
   12dc8:	movw	r2, #51476	; 0xc914
   12dcc:	movt	r0, #2
   12dd0:	movt	r2, #2
   12dd4:	bl	1ed54 <__assert_fail@plt+0xccc8>
   12dd8:	ldr	r9, [r6, r0, lsl #2]
   12ddc:	mvn	r6, #0
   12de0:	mov	r0, r8
   12de4:	b	12290 <__assert_fail@plt+0x204>
   12de8:	mov	r9, #5
   12dec:	mov	r0, r8
   12df0:	b	12290 <__assert_fail@plt+0x204>
   12df4:	movw	r0, #62224	; 0xf310
   12df8:	movw	r6, #51504	; 0xc930
   12dfc:	mov	r3, #4
   12e00:	mov	r2, #1
   12e04:	movt	r0, #3
   12e08:	str	r3, [sp]
   12e0c:	movt	r6, #2
   12e10:	ldr	r1, [r0]
   12e14:	movw	r0, #62120	; 0xf2a8
   12e18:	mov	r3, r6
   12e1c:	movt	r0, #3
   12e20:	ldr	r0, [r0]
   12e24:	stmib	sp, {r0, r2}
   12e28:	movw	r0, #48332	; 0xbccc
   12e2c:	movw	r2, #51532	; 0xc94c
   12e30:	movt	r0, #2
   12e34:	movt	r2, #2
   12e38:	bl	1ed54 <__assert_fail@plt+0xccc8>
   12e3c:	ldr	r0, [r6, r0, lsl #2]
   12e40:	movw	r1, #62868	; 0xf594
   12e44:	mvn	r6, #0
   12e48:	movt	r1, #3
   12e4c:	b	12f58 <__assert_fail@plt+0xecc>
   12e50:	movw	r0, #62868	; 0xf594
   12e54:	movt	r0, #3
   12e58:	mov	r1, #2
   12e5c:	str	r1, [r0]
   12e60:	mov	r0, r8
   12e64:	b	12290 <__assert_fail@plt+0x204>
   12e68:	mov	r9, #4
   12e6c:	mov	r0, r8
   12e70:	b	12290 <__assert_fail@plt+0x204>
   12e74:	movw	r0, #48348	; 0xbcdc
   12e78:	movt	r0, #2
   12e7c:	str	r0, [sp, #52]	; 0x34
   12e80:	mov	r4, #0
   12e84:	mov	r0, r8
   12e88:	b	12290 <__assert_fail@plt+0x204>
   12e8c:	mov	r0, #0
   12e90:	str	r0, [sp, #48]	; 0x30
   12e94:	mov	r0, r8
   12e98:	b	12290 <__assert_fail@plt+0x204>
   12e9c:	movw	r0, #62268	; 0xf33c
   12ea0:	mov	r1, #3
   12ea4:	movt	r0, #3
   12ea8:	b	12e5c <__assert_fail@plt+0xdd0>
   12eac:	movw	r0, #62224	; 0xf310
   12eb0:	movw	r6, #57208	; 0xdf78
   12eb4:	mov	r3, #4
   12eb8:	mov	r2, #1
   12ebc:	movt	r0, #3
   12ec0:	str	r3, [sp]
   12ec4:	movt	r6, #2
   12ec8:	ldr	r1, [r0]
   12ecc:	movw	r0, #62120	; 0xf2a8
   12ed0:	mov	r3, r6
   12ed4:	movt	r0, #3
   12ed8:	ldr	r0, [r0]
   12edc:	stmib	sp, {r0, r2}
   12ee0:	movw	r0, #48395	; 0xbd0b
   12ee4:	movw	r2, #57164	; 0xdf4c
   12ee8:	movt	r0, #2
   12eec:	movt	r2, #2
   12ef0:	bl	1ed54 <__assert_fail@plt+0xccc8>
   12ef4:	ldr	r0, [r6, r0, lsl #2]
   12ef8:	mvn	r6, #0
   12efc:	b	12290 <__assert_fail@plt+0x204>
   12f00:	movw	r0, #62224	; 0xf310
   12f04:	movw	r6, #51624	; 0xc9a8
   12f08:	mov	r3, #4
   12f0c:	mov	r2, #1
   12f10:	movt	r0, #3
   12f14:	str	r3, [sp]
   12f18:	movt	r6, #2
   12f1c:	ldr	r1, [r0]
   12f20:	movw	r0, #62120	; 0xf2a8
   12f24:	mov	r3, r6
   12f28:	movt	r0, #3
   12f2c:	ldr	r0, [r0]
   12f30:	stmib	sp, {r0, r2}
   12f34:	movw	r0, #48377	; 0xbcf9
   12f38:	movw	r2, #51640	; 0xc9b8
   12f3c:	movt	r0, #2
   12f40:	movt	r2, #2
   12f44:	bl	1ed54 <__assert_fail@plt+0xccc8>
   12f48:	ldr	r0, [r6, r0, lsl #2]
   12f4c:	movw	r1, #62276	; 0xf344
   12f50:	mvn	r6, #0
   12f54:	movt	r1, #3
   12f58:	str	r0, [r1]
   12f5c:	mov	r0, r8
   12f60:	b	12290 <__assert_fail@plt+0x204>
   12f64:	ldr	r0, [sp, #56]	; 0x38
   12f68:	ldr	r1, [sp, #60]	; 0x3c
   12f6c:	subs	r2, r0, #-2147483648	; 0x80000000
   12f70:	sbcs	r1, r1, #0
   12f74:	movwcc	r4, #1
   12f78:	cmp	r4, #0
   12f7c:	movne	r4, r0
   12f80:	mov	r0, r8
   12f84:	str	r4, [sp, #44]	; 0x2c
   12f88:	cmn	r4, #1
   12f8c:	mov	r4, r6
   12f90:	mvn	r6, #0
   12f94:	bgt	12290 <__assert_fail@plt+0x204>
   12f98:	b	15460 <__assert_fail@plt+0x33d4>
   12f9c:	mov	r4, #1
   12fa0:	b	12fb0 <__assert_fail@plt+0xf24>
   12fa4:	mov	r4, #1
   12fa8:	b	12fc8 <__assert_fail@plt+0xf3c>
   12fac:	mov	r4, #0
   12fb0:	movw	r0, #62436	; 0xf3e4
   12fb4:	movt	r0, #3
   12fb8:	b	12fd0 <__assert_fail@plt+0xf44>
   12fbc:	mov	r0, r8
   12fc0:	b	12290 <__assert_fail@plt+0x204>
   12fc4:	mov	r4, #0
   12fc8:	movw	r0, #62252	; 0xf32c
   12fcc:	movt	r0, #3
   12fd0:	strb	r4, [r0]
   12fd4:	mov	r0, r8
   12fd8:	mov	r4, sl
   12fdc:	b	12290 <__assert_fail@plt+0x204>
   12fe0:	mov	r0, r8
   12fe4:	b	12290 <__assert_fail@plt+0x204>
   12fe8:	movw	r0, #62888	; 0xf5a8
   12fec:	str	r9, [sp, #24]
   12ff0:	str	r7, [sp, #28]
   12ff4:	str	r5, [sp, #32]
   12ff8:	movt	r0, #3
   12ffc:	ldrd	r0, [r0]
   13000:	orrs	r0, r0, r1
   13004:	bne	13088 <__assert_fail@plt+0xffc>
   13008:	movw	r0, #48461	; 0xbd4d
   1300c:	movt	r0, #2
   13010:	bl	11dec <getenv@plt>
   13014:	movw	r9, #62876	; 0xf59c
   13018:	movw	r7, #62888	; 0xf5a8
   1301c:	mov	r6, r0
   13020:	movt	r9, #3
   13024:	movt	r7, #3
   13028:	mov	r1, r9
   1302c:	mov	r2, r7
   13030:	bl	221e8 <__assert_fail@plt+0x1015c>
   13034:	cmp	r6, #0
   13038:	bne	13050 <__assert_fail@plt+0xfc4>
   1303c:	movw	r0, #48464	; 0xbd50
   13040:	movt	r0, #2
   13044:	bl	11dec <getenv@plt>
   13048:	cmp	r0, #0
   1304c:	beq	13070 <__assert_fail@plt+0xfe4>
   13050:	ldrd	r0, [r7]
   13054:	movw	r2, #62088	; 0xf288
   13058:	movt	r2, #3
   1305c:	strd	r0, [r2]
   13060:	ldr	r0, [r9]
   13064:	movw	r1, #62880	; 0xf5a0
   13068:	movt	r1, #3
   1306c:	str	r0, [r1]
   13070:	ldr	r0, [sp, #36]	; 0x24
   13074:	tst	r0, #1
   13078:	movne	r1, #0
   1307c:	movne	r0, #1024	; 0x400
   13080:	strdne	r0, [r7]
   13084:	strne	r1, [r9]
   13088:	ldr	r7, [sp, #44]	; 0x2c
   1308c:	cmn	r4, #1
   13090:	bgt	130e8 <__assert_fail@plt+0x105c>
   13094:	movw	r0, #62112	; 0xf2a0
   13098:	movt	r0, #3
   1309c:	ldr	r0, [r0]
   130a0:	cmp	r0, #1
   130a4:	bne	130d8 <__assert_fail@plt+0x104c>
   130a8:	movw	r4, #62104	; 0xf298
   130ac:	movt	r4, #3
   130b0:	ldrsb	r0, [r4]
   130b4:	cmn	r0, #1
   130b8:	bgt	130c8 <__assert_fail@plt+0x103c>
   130bc:	mov	r0, #1
   130c0:	bl	12014 <isatty@plt>
   130c4:	strb	r0, [r4]
   130c8:	mov	r4, #2
   130cc:	tst	r0, #255	; 0xff
   130d0:	movweq	r4, #1
   130d4:	b	130e8 <__assert_fail@plt+0x105c>
   130d8:	sub	r0, r0, #2
   130dc:	clz	r0, r0
   130e0:	lsr	r0, r0, #5
   130e4:	lsl	r4, r0, #1
   130e8:	movw	r0, #62264	; 0xf338
   130ec:	movw	r5, #62252	; 0xf32c
   130f0:	movt	r0, #3
   130f4:	movt	r5, #3
   130f8:	str	r4, [r0]
   130fc:	sub	r0, r4, #2
   13100:	cmp	r0, #3
   13104:	bcc	13120 <__assert_fail@plt+0x1094>
   13108:	ldrb	r0, [r5]
   1310c:	cmp	r0, #0
   13110:	bne	13120 <__assert_fail@plt+0x1094>
   13114:	cmn	r7, #1
   13118:	movle	r7, #80	; 0x50
   1311c:	b	13244 <__assert_fail@plt+0x11b8>
   13120:	cmn	r7, #1
   13124:	bgt	13244 <__assert_fail@plt+0x11b8>
   13128:	movw	r4, #62104	; 0xf298
   1312c:	movt	r4, #3
   13130:	ldrsb	r0, [r4]
   13134:	cmn	r0, #1
   13138:	ble	13148 <__assert_fail@plt+0x10bc>
   1313c:	tst	r0, #255	; 0xff
   13140:	bne	1315c <__assert_fail@plt+0x10d0>
   13144:	b	13180 <__assert_fail@plt+0x10f4>
   13148:	mov	r0, #1
   1314c:	bl	12014 <isatty@plt>
   13150:	strb	r0, [r4]
   13154:	tst	r0, #255	; 0xff
   13158:	beq	13180 <__assert_fail@plt+0x10f4>
   1315c:	add	r2, sp, #56	; 0x38
   13160:	mov	r0, #1
   13164:	movw	r1, #21523	; 0x5413
   13168:	bl	11d5c <ioctl@plt>
   1316c:	cmp	r0, #0
   13170:	blt	13180 <__assert_fail@plt+0x10f4>
   13174:	ldrh	r7, [sp, #58]	; 0x3a
   13178:	cmp	r7, #0
   1317c:	bne	13244 <__assert_fail@plt+0x11b8>
   13180:	movw	r0, #48475	; 0xbd5b
   13184:	movt	r0, #2
   13188:	bl	11dec <getenv@plt>
   1318c:	cmp	r0, #0
   13190:	beq	13240 <__assert_fail@plt+0x11b4>
   13194:	mov	r6, r0
   13198:	ldrb	r0, [r0]
   1319c:	cmp	r0, #0
   131a0:	beq	13240 <__assert_fail@plt+0x11b4>
   131a4:	movw	r0, #49853	; 0xc2bd
   131a8:	add	r3, sp, #56	; 0x38
   131ac:	mov	r1, #0
   131b0:	mov	r2, #0
   131b4:	mov	r7, #0
   131b8:	movt	r0, #2
   131bc:	str	r0, [sp]
   131c0:	mov	r0, r6
   131c4:	bl	2876c <_obstack_memory_used@@Base+0x36f8>
   131c8:	cmp	r0, #0
   131cc:	beq	131e0 <__assert_fail@plt+0x1154>
   131d0:	cmp	r0, #1
   131d4:	bne	13204 <__assert_fail@plt+0x1178>
   131d8:	mov	r7, #0
   131dc:	b	13244 <__assert_fail@plt+0x11b8>
   131e0:	ldr	r0, [sp, #56]	; 0x38
   131e4:	ldr	r1, [sp, #60]	; 0x3c
   131e8:	subs	r2, r0, #-2147483648	; 0x80000000
   131ec:	sbcs	r1, r1, #0
   131f0:	movwcc	r7, #1
   131f4:	cmp	r7, #0
   131f8:	movne	r7, r0
   131fc:	cmn	r7, #1
   13200:	bgt	13244 <__assert_fail@plt+0x11b8>
   13204:	movw	r1, #48483	; 0xbd63
   13208:	mov	r0, #0
   1320c:	mov	r2, #5
   13210:	movt	r1, #2
   13214:	bl	11cb4 <dcgettext@plt>
   13218:	mov	r7, r0
   1321c:	mov	r0, r6
   13220:	bl	26d20 <_obstack_memory_used@@Base+0x1cac>
   13224:	movw	r5, #62252	; 0xf32c
   13228:	mov	r3, r0
   1322c:	mov	r0, #0
   13230:	mov	r1, #0
   13234:	mov	r2, r7
   13238:	movt	r5, #3
   1323c:	bl	11db0 <error@plt>
   13240:	mov	r7, #80	; 0x50
   13244:	movw	r0, #43691	; 0xaaab
   13248:	movw	r9, #62912	; 0xf5c0
   1324c:	movt	r0, #43690	; 0xaaaa
   13250:	movt	r9, #3
   13254:	umull	r0, r1, r7, r0
   13258:	str	r7, [r9]
   1325c:	lsr	r2, r1, #1
   13260:	mov	r0, #1
   13264:	add	r3, r2, r2, lsl #1
   13268:	subs	r3, r7, r3
   1326c:	addne	r2, r0, r1, lsr #1
   13270:	movw	r0, #62916	; 0xf5c4
   13274:	movt	r0, #3
   13278:	str	r2, [r0]
   1327c:	movw	r0, #62264	; 0xf338
   13280:	movt	r0, #3
   13284:	ldr	r0, [r0]
   13288:	sub	r0, r0, #2
   1328c:	cmp	r0, #2
   13290:	bhi	132ac <__assert_fail@plt+0x1220>
   13294:	ldr	r1, [sp, #40]	; 0x28
   13298:	cmp	r1, #0
   1329c:	blt	13528 <__assert_fail@plt+0x149c>
   132a0:	movw	r0, #62256	; 0xf330
   132a4:	movt	r0, #3
   132a8:	str	r1, [r0]
   132ac:	ldr	r1, [sp, #48]	; 0x30
   132b0:	cmn	r1, #1
   132b4:	bgt	132fc <__assert_fail@plt+0x1270>
   132b8:	movw	r0, #62112	; 0xf2a0
   132bc:	mov	r1, #0
   132c0:	movt	r0, #3
   132c4:	ldr	r0, [r0]
   132c8:	cmp	r0, #1
   132cc:	bne	132fc <__assert_fail@plt+0x1270>
   132d0:	movw	r4, #62104	; 0xf298
   132d4:	movt	r4, #3
   132d8:	ldrsb	r0, [r4]
   132dc:	cmn	r0, #1
   132e0:	bgt	132f0 <__assert_fail@plt+0x1264>
   132e4:	mov	r0, #1
   132e8:	bl	12014 <isatty@plt>
   132ec:	strb	r0, [r4]
   132f0:	uxtb	r1, r0
   132f4:	cmp	r1, #0
   132f8:	movwne	r1, #1
   132fc:	cmp	r1, #0
   13300:	movw	r0, #62920	; 0xf5c8
   13304:	movwne	r1, #1
   13308:	movt	r0, #3
   1330c:	cmn	r8, #1
   13310:	strb	r1, [r0]
   13314:	ble	134a0 <__assert_fail@plt+0x1414>
   13318:	mov	r0, #0
   1331c:	mov	r1, r8
   13320:	bl	25204 <_obstack_memory_used@@Base+0x190>
   13324:	mov	r0, #0
   13328:	mov	r4, #0
   1332c:	bl	251ec <_obstack_memory_used@@Base+0x178>
   13330:	mov	r6, r0
   13334:	movw	r0, #62264	; 0xf338
   13338:	movt	r0, #3
   1333c:	ldr	r0, [r0]
   13340:	cmp	r0, #0
   13344:	beq	13360 <__assert_fail@plt+0x12d4>
   13348:	orr	r0, r0, #1
   1334c:	cmp	r0, #3
   13350:	bne	13380 <__assert_fail@plt+0x12f4>
   13354:	ldr	r0, [r9]
   13358:	cmp	r0, #0
   1335c:	beq	13380 <__assert_fail@plt+0x12f4>
   13360:	orr	r1, r6, #2
   13364:	sub	r0, r6, #6
   13368:	sub	r1, r1, #3
   1336c:	clz	r0, r0
   13370:	clz	r1, r1
   13374:	lsr	r0, r0, #5
   13378:	lsr	r1, r1, #5
   1337c:	orr	r4, r0, r1
   13380:	movw	r0, #62921	; 0xf5c9
   13384:	movt	r0, #3
   13388:	strb	r4, [r0]
   1338c:	mov	r0, #0
   13390:	bl	251b0 <_obstack_memory_used@@Base+0x13c>
   13394:	movw	r7, #62468	; 0xf404
   13398:	cmp	r6, #7
   1339c:	movt	r7, #3
   133a0:	str	r0, [r7]
   133a4:	bne	133b4 <__assert_fail@plt+0x1328>
   133a8:	mov	r1, #32
   133ac:	mov	r2, #1
   133b0:	bl	2521c <_obstack_memory_used@@Base+0x1a8>
   133b4:	movw	r0, #62276	; 0xf344
   133b8:	ldr	r6, [sp, #24]
   133bc:	movt	r0, #3
   133c0:	ldr	r0, [r0]
   133c4:	cmp	r0, #2
   133c8:	bcc	13408 <__assert_fail@plt+0x137c>
   133cc:	sub	r1, r0, #2
   133d0:	cmp	r1, #5
   133d4:	beq	13408 <__assert_fail@plt+0x137c>
   133d8:	movw	r2, #48612	; 0xbde4
   133dc:	movt	r2, #2
   133e0:	ldrb	r1, [r2, r1]
   133e4:	add	r0, r2, r0
   133e8:	sub	r4, r0, #1
   133ec:	ldr	r0, [r7]
   133f0:	uxtb	r1, r1
   133f4:	mov	r2, #1
   133f8:	bl	2521c <_obstack_memory_used@@Base+0x1a8>
   133fc:	ldrb	r1, [r4], #1
   13400:	cmp	r1, #0
   13404:	bne	133ec <__assert_fail@plt+0x1360>
   13408:	mov	r0, #0
   1340c:	bl	251b0 <_obstack_memory_used@@Base+0x13c>
   13410:	movw	r1, #62924	; 0xf5cc
   13414:	mov	r2, #1
   13418:	movt	r1, #3
   1341c:	str	r0, [r1]
   13420:	mov	r1, #58	; 0x3a
   13424:	bl	2521c <_obstack_memory_used@@Base+0x1a8>
   13428:	movw	r0, #62436	; 0xf3e4
   1342c:	movw	r3, #62344	; 0xf388
   13430:	movt	r0, #3
   13434:	movt	r3, #3
   13438:	ldrb	r1, [r0]
   1343c:	movw	r0, #62264	; 0xf338
   13440:	movt	r0, #3
   13444:	ldr	r0, [r0]
   13448:	clz	r2, r0
   1344c:	lsr	r2, r2, #5
   13450:	bic	r1, r2, r1
   13454:	ldrb	r2, [r3]
   13458:	and	r1, r1, r2
   1345c:	movw	r2, #62908	; 0xf5bc
   13460:	movt	r2, #3
   13464:	strb	r1, [r3]
   13468:	mov	r3, #10
   1346c:	ldrb	r2, [r2]
   13470:	cmp	r2, #0
   13474:	movwne	r3, #0
   13478:	cmp	r3, r1
   1347c:	bcc	1549c <__assert_fail@plt+0x3410>
   13480:	cmn	r6, #1
   13484:	ble	134f4 <__assert_fail@plt+0x1468>
   13488:	movw	r1, #62336	; 0xf380
   1348c:	cmp	r0, #0
   13490:	movt	r1, #3
   13494:	str	r6, [r1]
   13498:	bne	13ad8 <__assert_fail@plt+0x1a4c>
   1349c:	b	135d0 <__assert_fail@plt+0x1544>
   134a0:	movw	r0, #49358	; 0xc0ce
   134a4:	movt	r0, #2
   134a8:	bl	11dec <getenv@plt>
   134ac:	cmp	r0, #0
   134b0:	beq	13758 <__assert_fail@plt+0x16cc>
   134b4:	movw	r7, #57208	; 0xdf78
   134b8:	movw	r1, #57164	; 0xdf4c
   134bc:	mov	r3, #4
   134c0:	mov	r6, r0
   134c4:	movt	r7, #2
   134c8:	movt	r1, #2
   134cc:	mov	r2, r7
   134d0:	bl	1ea74 <__assert_fail@plt+0xc9e8>
   134d4:	cmn	r0, #1
   134d8:	ble	1371c <__assert_fail@plt+0x1690>
   134dc:	ldr	r8, [r7, r0, lsl #2]
   134e0:	movw	r5, #62252	; 0xf32c
   134e4:	movt	r5, #3
   134e8:	cmn	r8, #1
   134ec:	bgt	13318 <__assert_fail@plt+0x128c>
   134f0:	b	13758 <__assert_fail@plt+0x16cc>
   134f4:	cmp	r0, #0
   134f8:	beq	135c0 <__assert_fail@plt+0x1534>
   134fc:	movw	r0, #62868	; 0xf594
   13500:	mov	r1, #0
   13504:	movt	r0, #3
   13508:	ldr	r0, [r0]
   1350c:	sub	r0, r0, #1
   13510:	cmp	r0, #3
   13514:	movw	r0, #62336	; 0xf380
   13518:	movwcc	r1, #5
   1351c:	movt	r0, #3
   13520:	str	r1, [r0]
   13524:	b	13ad8 <__assert_fail@plt+0x1a4c>
   13528:	movw	r4, #62256	; 0xf330
   1352c:	mov	r0, #8
   13530:	movt	r4, #3
   13534:	str	r0, [r4]
   13538:	movw	r0, #48542	; 0xbd9e
   1353c:	movt	r0, #2
   13540:	bl	11dec <getenv@plt>
   13544:	cmp	r0, #0
   13548:	beq	132ac <__assert_fail@plt+0x1220>
   1354c:	mov	r6, r0
   13550:	movw	r0, #49853	; 0xc2bd
   13554:	add	r3, sp, #56	; 0x38
   13558:	mov	r1, #0
   1355c:	mov	r2, #0
   13560:	movt	r0, #2
   13564:	str	r0, [sp]
   13568:	mov	r0, r6
   1356c:	bl	2876c <_obstack_memory_used@@Base+0x36f8>
   13570:	cmp	r0, #0
   13574:	ldreq	r0, [sp, #60]	; 0x3c
   13578:	cmpeq	r0, #0
   1357c:	beq	137a0 <__assert_fail@plt+0x1714>
   13580:	movw	r1, #48550	; 0xbda6
   13584:	mov	r0, #0
   13588:	mov	r2, #5
   1358c:	movt	r1, #2
   13590:	bl	11cb4 <dcgettext@plt>
   13594:	mov	r7, r0
   13598:	mov	r0, r6
   1359c:	bl	26d20 <_obstack_memory_used@@Base+0x1cac>
   135a0:	movw	r5, #62252	; 0xf32c
   135a4:	mov	r3, r0
   135a8:	mov	r0, #0
   135ac:	mov	r1, #0
   135b0:	mov	r2, r7
   135b4:	movt	r5, #3
   135b8:	bl	11db0 <error@plt>
   135bc:	b	132ac <__assert_fail@plt+0x1220>
   135c0:	movw	r0, #62336	; 0xf380
   135c4:	mov	r1, #0
   135c8:	movt	r0, #3
   135cc:	str	r1, [r0]
   135d0:	ldr	r0, [sp, #52]	; 0x34
   135d4:	cmp	r0, #0
   135d8:	bne	135fc <__assert_fail@plt+0x1570>
   135dc:	movw	r0, #48654	; 0xbe0e
   135e0:	movt	r0, #2
   135e4:	bl	11dec <getenv@plt>
   135e8:	movw	r1, #40613	; 0x9ea5
   135ec:	cmp	r0, #0
   135f0:	movt	r1, #2
   135f4:	movne	r1, r0
   135f8:	str	r1, [sp, #52]	; 0x34
   135fc:	ldr	r0, [sp, #52]	; 0x34
   13600:	movw	r1, #51660	; 0xc9cc
   13604:	mov	r2, #6
   13608:	movt	r1, #2
   1360c:	bl	1202c <strncmp@plt>
   13610:	cmp	r0, #0
   13614:	bne	13650 <__assert_fail@plt+0x15c4>
   13618:	movw	r6, #51660	; 0xc9cc
   1361c:	movt	r6, #2
   13620:	mov	r0, #2
   13624:	bl	204b8 <__assert_fail@plt+0xe42c>
   13628:	cmp	r0, #0
   1362c:	beq	13ad8 <__assert_fail@plt+0x1a4c>
   13630:	ldr	r0, [sp, #52]	; 0x34
   13634:	mov	r1, r6
   13638:	mov	r2, #6
   1363c:	add	r0, r0, #6
   13640:	str	r0, [sp, #52]	; 0x34
   13644:	bl	1202c <strncmp@plt>
   13648:	cmp	r0, #0
   1364c:	beq	13620 <__assert_fail@plt+0x1594>
   13650:	ldr	r0, [sp, #52]	; 0x34
   13654:	ldrb	r0, [r0]
   13658:	cmp	r0, #43	; 0x2b
   1365c:	bne	136c0 <__assert_fail@plt+0x1634>
   13660:	ldr	r0, [sp, #52]	; 0x34
   13664:	mov	r1, #10
   13668:	add	r8, r0, #1
   1366c:	mov	r0, r8
   13670:	bl	11eb8 <strchr@plt>
   13674:	cmp	r0, #0
   13678:	mov	r7, r8
   1367c:	beq	136a4 <__assert_fail@plt+0x1618>
   13680:	add	r7, r0, #1
   13684:	mov	r6, r0
   13688:	mov	r1, #10
   1368c:	mov	r0, r7
   13690:	bl	11eb8 <strchr@plt>
   13694:	cmp	r0, #0
   13698:	bne	155a0 <__assert_fail@plt+0x3514>
   1369c:	mov	r0, #0
   136a0:	strb	r0, [r6]
   136a4:	movw	r0, #62096	; 0xf290
   136a8:	movw	r5, #62252	; 0xf32c
   136ac:	movt	r0, #3
   136b0:	movt	r5, #3
   136b4:	str	r8, [r0]
   136b8:	str	r7, [r0, #4]
   136bc:	b	13828 <__assert_fail@plt+0x179c>
   136c0:	ldr	r0, [sp, #52]	; 0x34
   136c4:	movw	r1, #51668	; 0xc9d4
   136c8:	movw	r2, #51688	; 0xc9e8
   136cc:	mov	r3, #4
   136d0:	movt	r1, #2
   136d4:	movt	r2, #2
   136d8:	bl	1ea74 <__assert_fail@plt+0xc9e8>
   136dc:	mov	r2, r0
   136e0:	cmn	r0, #1
   136e4:	ble	154e0 <__assert_fail@plt+0x3454>
   136e8:	cmp	r2, #3
   136ec:	bhi	13828 <__assert_fail@plt+0x179c>
   136f0:	add	r0, pc, #0
   136f4:	ldr	pc, [r0, r2, lsl #2]
   136f8:	andeq	r3, r1, r8, lsl #14
   136fc:	andeq	r3, r1, r0, lsl r8
   13700:	andeq	r3, r1, ip, lsr #15
   13704:	andeq	r3, r1, ip, asr #15
   13708:	movw	r0, #62096	; 0xf290
   1370c:	movw	r1, #48797	; 0xbe9d
   13710:	movt	r0, #3
   13714:	movt	r1, #2
   13718:	b	13820 <__assert_fail@plt+0x1794>
   1371c:	movw	r1, #49372	; 0xc0dc
   13720:	mov	r0, #0
   13724:	mov	r2, #5
   13728:	movt	r1, #2
   1372c:	bl	11cb4 <dcgettext@plt>
   13730:	mov	r7, r0
   13734:	mov	r0, r6
   13738:	bl	26d20 <_obstack_memory_used@@Base+0x1cac>
   1373c:	mov	r3, r0
   13740:	mov	r0, #0
   13744:	mov	r1, #0
   13748:	mov	r2, r7
   1374c:	bl	11db0 <error@plt>
   13750:	movw	r5, #62252	; 0xf32c
   13754:	movt	r5, #3
   13758:	movw	r0, #62112	; 0xf2a0
   1375c:	mov	r8, #7
   13760:	movt	r0, #3
   13764:	ldr	r0, [r0]
   13768:	cmp	r0, #1
   1376c:	bne	13318 <__assert_fail@plt+0x128c>
   13770:	movw	r4, #62104	; 0xf298
   13774:	movt	r4, #3
   13778:	ldrsb	r0, [r4]
   1377c:	cmn	r0, #1
   13780:	bgt	13790 <__assert_fail@plt+0x1704>
   13784:	mov	r0, #1
   13788:	bl	12014 <isatty@plt>
   1378c:	strb	r0, [r4]
   13790:	mov	r8, #3
   13794:	tst	r0, #255	; 0xff
   13798:	bne	13318 <__assert_fail@plt+0x128c>
   1379c:	b	13324 <__assert_fail@plt+0x1298>
   137a0:	ldr	r0, [sp, #56]	; 0x38
   137a4:	str	r0, [r4]
   137a8:	b	132ac <__assert_fail@plt+0x1220>
   137ac:	movw	r0, #62096	; 0xf290
   137b0:	movw	r1, #48824	; 0xbeb8
   137b4:	movw	r2, #48836	; 0xbec4
   137b8:	movt	r0, #3
   137bc:	movt	r2, #2
   137c0:	movt	r1, #2
   137c4:	str	r2, [r0]
   137c8:	b	13824 <__assert_fail@plt+0x1798>
   137cc:	mov	r0, #2
   137d0:	bl	204b8 <__assert_fail@plt+0xe42c>
   137d4:	cmp	r0, #0
   137d8:	beq	13828 <__assert_fail@plt+0x179c>
   137dc:	movw	r4, #62096	; 0xf290
   137e0:	mov	r0, #0
   137e4:	mov	r2, #2
   137e8:	movt	r4, #3
   137ec:	ldr	r1, [r4]
   137f0:	bl	11cb4 <dcgettext@plt>
   137f4:	str	r0, [r4]
   137f8:	mov	r0, #0
   137fc:	mov	r2, #2
   13800:	ldr	r1, [r4, #4]
   13804:	bl	11cb4 <dcgettext@plt>
   13808:	str	r0, [r4, #4]
   1380c:	b	13828 <__assert_fail@plt+0x179c>
   13810:	movw	r0, #62096	; 0xf290
   13814:	movw	r1, #48821	; 0xbeb5
   13818:	movt	r0, #3
   1381c:	movt	r1, #2
   13820:	str	r1, [r0]
   13824:	str	r1, [r0, #4]
   13828:	movw	r2, #62096	; 0xf290
   1382c:	movt	r2, #3
   13830:	ldr	r9, [r2]
   13834:	b	1383c <__assert_fail@plt+0x17b0>
   13838:	add	r9, r9, #1
   1383c:	ldrb	r0, [r9]
   13840:	cmp	r0, #37	; 0x25
   13844:	beq	13854 <__assert_fail@plt+0x17c8>
   13848:	cmp	r0, #0
   1384c:	bne	13838 <__assert_fail@plt+0x17ac>
   13850:	b	13878 <__assert_fail@plt+0x17ec>
   13854:	mov	r0, r9
   13858:	ldrb	r1, [r0, #1]!
   1385c:	cmp	r1, #37	; 0x25
   13860:	beq	13870 <__assert_fail@plt+0x17e4>
   13864:	cmp	r1, #98	; 0x62
   13868:	bne	13838 <__assert_fail@plt+0x17ac>
   1386c:	b	1387c <__assert_fail@plt+0x17f0>
   13870:	mov	r9, r0
   13874:	b	13838 <__assert_fail@plt+0x17ac>
   13878:	mov	r9, #0
   1387c:	ldr	sl, [r2, #4]
   13880:	b	13888 <__assert_fail@plt+0x17fc>
   13884:	add	sl, r0, #1
   13888:	ldrb	r0, [sl]
   1388c:	cmp	r0, #37	; 0x25
   13890:	beq	138a4 <__assert_fail@plt+0x1818>
   13894:	cmp	r0, #0
   13898:	mov	r0, sl
   1389c:	bne	13884 <__assert_fail@plt+0x17f8>
   138a0:	b	138c4 <__assert_fail@plt+0x1838>
   138a4:	mov	r0, sl
   138a8:	ldrb	r1, [r0, #1]!
   138ac:	cmp	r1, #37	; 0x25
   138b0:	beq	13884 <__assert_fail@plt+0x17f8>
   138b4:	cmp	r1, #98	; 0x62
   138b8:	beq	138e0 <__assert_fail@plt+0x1854>
   138bc:	mov	r0, sl
   138c0:	b	13884 <__assert_fail@plt+0x17f8>
   138c4:	cmp	r9, #0
   138c8:	beq	13ad8 <__assert_fail@plt+0x1a4c>
   138cc:	mov	r0, #0
   138d0:	mov	sl, #0
   138d4:	str	r0, [sp, #52]	; 0x34
   138d8:	mov	r0, #1
   138dc:	b	138f0 <__assert_fail@plt+0x1864>
   138e0:	clz	r0, r9
   138e4:	lsr	r0, r0, #5
   138e8:	str	r0, [sp, #52]	; 0x34
   138ec:	mov	r0, #0
   138f0:	str	r0, [sp, #48]	; 0x30
   138f4:	mov	r4, #12
   138f8:	add	r7, sp, #56	; 0x38
   138fc:	mov	r8, #0
   13900:	mov	r5, #0
   13904:	movw	r0, #14
   13908:	str	r4, [fp, #-36]	; 0xffffffdc
   1390c:	movt	r0, #2
   13910:	add	r0, r5, r0
   13914:	bl	11f9c <nl_langinfo@plt>
   13918:	mov	r1, #37	; 0x25
   1391c:	mov	r6, r0
   13920:	bl	11eb8 <strchr@plt>
   13924:	cmp	r0, #0
   13928:	bne	13ad0 <__assert_fail@plt+0x1a44>
   1392c:	bl	11e70 <__ctype_b_loc@plt>
   13930:	ldrb	r1, [r6]
   13934:	ldr	r0, [r0]
   13938:	mov	r2, #128	; 0x80
   1393c:	sub	r3, fp, #36	; 0x24
   13940:	add	r0, r0, r1, lsl #1
   13944:	mov	r1, #0
   13948:	ldrh	r0, [r0]
   1394c:	str	r1, [sp, #4]
   13950:	mov	r1, r7
   13954:	ubfx	r0, r0, #11, #1
   13958:	str	r0, [sp]
   1395c:	mov	r0, r6
   13960:	bl	2286c <__assert_fail@plt+0x107e0>
   13964:	cmp	r0, #127	; 0x7f
   13968:	bhi	13ad0 <__assert_fail@plt+0x1a44>
   1396c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13970:	add	r5, r5, #1
   13974:	add	r7, r7, #128	; 0x80
   13978:	cmp	r8, r0
   1397c:	movls	r8, r0
   13980:	cmp	r5, #12
   13984:	bcc	13904 <__assert_fail@plt+0x1878>
   13988:	cmp	r4, r8
   1398c:	mov	r4, r8
   13990:	add	r7, sp, #56	; 0x38
   13994:	bhi	138fc <__assert_fail@plt+0x1870>
   13998:	movw	r4, #62096	; 0xf290
   1399c:	ldr	r5, [sp, #48]	; 0x30
   139a0:	movw	r6, #62932	; 0xf5d4
   139a4:	add	r7, sp, #56	; 0x38
   139a8:	movt	r4, #3
   139ac:	movt	r6, #3
   139b0:	ldr	r8, [r4]
   139b4:	sub	r0, r9, r8
   139b8:	str	r0, [sp, #44]	; 0x2c
   139bc:	add	r0, r9, #2
   139c0:	mov	r9, #0
   139c4:	str	r0, [sp, #40]	; 0x28
   139c8:	ldr	r0, [sp, #52]	; 0x34
   139cc:	cmp	r0, #0
   139d0:	beq	139e4 <__assert_fail@plt+0x1958>
   139d4:	movw	r0, #56722	; 0xdd92
   139d8:	movt	r0, #2
   139dc:	stm	sp, {r0, r8}
   139e0:	b	13a10 <__assert_fail@plt+0x1984>
   139e4:	ldr	r0, [sp, #44]	; 0x2c
   139e8:	cmp	r0, #128	; 0x80
   139ec:	bgt	13ad0 <__assert_fail@plt+0x1a44>
   139f0:	movw	r0, #49468	; 0xc13c
   139f4:	movt	r0, #2
   139f8:	str	r0, [sp]
   139fc:	ldr	r0, [sp, #44]	; 0x2c
   13a00:	stmib	sp, {r0, r8}
   13a04:	str	r7, [sp, #12]
   13a08:	ldr	r0, [sp, #40]	; 0x28
   13a0c:	str	r0, [sp, #16]
   13a10:	mov	r0, r6
   13a14:	mov	r1, #128	; 0x80
   13a18:	mov	r2, #1
   13a1c:	mvn	r3, #0
   13a20:	bl	12068 <__snprintf_chk@plt>
   13a24:	cmp	r0, #128	; 0x80
   13a28:	bcs	13ad0 <__assert_fail@plt+0x1a44>
   13a2c:	add	r9, r9, #1
   13a30:	add	r6, r6, #128	; 0x80
   13a34:	add	r7, r7, #128	; 0x80
   13a38:	cmp	r9, #11
   13a3c:	bls	139c8 <__assert_fail@plt+0x193c>
   13a40:	ldr	r9, [r4, #4]
   13a44:	movw	r0, #62932	; 0xf5d4
   13a48:	add	r4, sl, #2
   13a4c:	mov	r7, #0
   13a50:	movt	r0, #3
   13a54:	add	r6, r0, #1536	; 0x600
   13a58:	sub	r8, sl, r9
   13a5c:	add	sl, sp, #56	; 0x38
   13a60:	cmp	r5, #0
   13a64:	beq	13a78 <__assert_fail@plt+0x19ec>
   13a68:	movw	r0, #56722	; 0xdd92
   13a6c:	movt	r0, #2
   13a70:	stm	sp, {r0, r9}
   13a74:	b	13a90 <__assert_fail@plt+0x1a04>
   13a78:	cmp	r8, #128	; 0x80
   13a7c:	bgt	13ad0 <__assert_fail@plt+0x1a44>
   13a80:	movw	r0, #49468	; 0xc13c
   13a84:	movt	r0, #2
   13a88:	stm	sp, {r0, r8, r9, sl}
   13a8c:	str	r4, [sp, #16]
   13a90:	mov	r0, r6
   13a94:	mov	r1, #128	; 0x80
   13a98:	mov	r2, #1
   13a9c:	mvn	r3, #0
   13aa0:	bl	12068 <__snprintf_chk@plt>
   13aa4:	cmp	r0, #127	; 0x7f
   13aa8:	bhi	13ad0 <__assert_fail@plt+0x1a44>
   13aac:	add	r7, r7, #1
   13ab0:	add	r6, r6, #128	; 0x80
   13ab4:	add	sl, sl, #128	; 0x80
   13ab8:	cmp	r7, #12
   13abc:	bcc	13a60 <__assert_fail@plt+0x19d4>
   13ac0:	movw	r0, #468	; 0x1d4
   13ac4:	mov	r1, #1
   13ac8:	movt	r0, #4
   13acc:	strb	r1, [r0]
   13ad0:	movw	r5, #62252	; 0xf32c
   13ad4:	movt	r5, #3
   13ad8:	movw	r0, #62208	; 0xf300
   13adc:	mov	r9, #1
   13ae0:	movt	r0, #3
   13ae4:	ldr	sl, [r0]
   13ae8:	ldrb	r0, [r5]
   13aec:	cmp	r0, #0
   13af0:	beq	13ec0 <__assert_fail@plt+0x1e34>
   13af4:	movw	r0, #49477	; 0xc145
   13af8:	movt	r0, #2
   13afc:	bl	11dec <getenv@plt>
   13b00:	str	r0, [sp, #56]	; 0x38
   13b04:	cmp	r0, #0
   13b08:	ldrbne	r1, [r0]
   13b0c:	cmpne	r1, #0
   13b10:	bne	13bcc <__assert_fail@plt+0x1b40>
   13b14:	movw	r0, #49487	; 0xc14f
   13b18:	movt	r0, #2
   13b1c:	bl	11dec <getenv@plt>
   13b20:	cmp	r0, #0
   13b24:	ldrbne	r0, [r0]
   13b28:	cmpne	r0, #0
   13b2c:	bne	13ea0 <__assert_fail@plt+0x1e14>
   13b30:	movw	r0, #49492	; 0xc154
   13b34:	movt	r0, #2
   13b38:	bl	11dec <getenv@plt>
   13b3c:	cmp	r0, #0
   13b40:	beq	13bb8 <__assert_fail@plt+0x1b2c>
   13b44:	mov	r6, r0
   13b48:	ldrb	r0, [r0]
   13b4c:	cmp	r0, #0
   13b50:	beq	13bb8 <__assert_fail@plt+0x1b2c>
   13b54:	movw	r4, #51804	; 0xca5c
   13b58:	movw	r8, #49583	; 0xc1af
   13b5c:	movw	r5, #4310	; 0x10d6
   13b60:	movt	r4, #2
   13b64:	movt	r8, #2
   13b68:	mov	r7, r4
   13b6c:	mov	r0, r7
   13b70:	mov	r1, r8
   13b74:	mov	r2, #5
   13b78:	bl	1202c <strncmp@plt>
   13b7c:	cmp	r0, #0
   13b80:	bne	13b9c <__assert_fail@plt+0x1b10>
   13b84:	add	r0, r7, #5
   13b88:	mov	r1, r6
   13b8c:	mov	r2, #0
   13b90:	bl	11dd4 <fnmatch@plt>
   13b94:	cmp	r0, #0
   13b98:	beq	13ea0 <__assert_fail@plt+0x1e14>
   13b9c:	mov	r0, r7
   13ba0:	bl	11eac <strlen@plt>
   13ba4:	add	r0, r7, r0
   13ba8:	add	r7, r0, #1
   13bac:	sub	r0, r7, r4
   13bb0:	cmp	r0, r5
   13bb4:	bcc	13b6c <__assert_fail@plt+0x1ae0>
   13bb8:	movw	r1, #62252	; 0xf32c
   13bbc:	mov	r0, #0
   13bc0:	movt	r1, #3
   13bc4:	strb	r0, [r1]
   13bc8:	b	13eac <__assert_fail@plt+0x1e20>
   13bcc:	mov	r1, #0
   13bd0:	mov	r5, #0
   13bd4:	strb	r1, [fp, #-38]	; 0xffffffda
   13bd8:	movw	r1, #16191	; 0x3f3f
   13bdc:	strh	r1, [fp, #-40]	; 0xffffffd8
   13be0:	bl	283c0 <_obstack_memory_used@@Base+0x334c>
   13be4:	movw	r1, #472	; 0x1d8
   13be8:	movw	r6, #476	; 0x1dc
   13bec:	str	r0, [fp, #-36]	; 0xffffffdc
   13bf0:	sub	r7, fp, #40	; 0x28
   13bf4:	movt	r1, #4
   13bf8:	movt	r6, #4
   13bfc:	str	r0, [r1]
   13c00:	mov	r0, #1
   13c04:	b	13c50 <__assert_fail@plt+0x1bc4>
   13c08:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13c0c:	add	r3, r5, #8
   13c10:	add	r1, sp, #56	; 0x38
   13c14:	mov	r2, #0
   13c18:	str	r0, [r5, #12]
   13c1c:	sub	r0, fp, #36	; 0x24
   13c20:	bl	19100 <__assert_fail@plt+0x7074>
   13c24:	cmp	r0, #0
   13c28:	mov	r0, #6
   13c2c:	movwne	r0, #1
   13c30:	b	13c50 <__assert_fail@plt+0x1bc4>
   13c34:	ldr	r0, [sp, #56]	; 0x38
   13c38:	add	r1, r0, #1
   13c3c:	str	r1, [sp, #56]	; 0x38
   13c40:	ldrb	r1, [r0]
   13c44:	mov	r0, #6
   13c48:	cmp	r1, #61	; 0x3d
   13c4c:	beq	13c08 <__assert_fail@plt+0x1b7c>
   13c50:	and	r0, r0, #7
   13c54:	sub	r0, r0, #1
   13c58:	cmp	r0, #5
   13c5c:	bhi	15438 <__assert_fail@plt+0x33ac>
   13c60:	add	r1, pc, #0
   13c64:	ldr	pc, [r1, r0, lsl #2]
   13c68:	andeq	r3, r1, r0, lsl #25
   13c6c:			; <UNDEFINED> instruction: 0x00013cb4
   13c70:	ldrdeq	r3, [r1], -ip
   13c74:	andeq	r3, r1, r4, lsr ip
   13c78:	andeq	r5, r1, r8, lsr r4
   13c7c:	strdeq	r3, [r1], -ip
   13c80:	ldr	r4, [sp, #56]	; 0x38
   13c84:	ldrb	r0, [r4]
   13c88:	cmp	r0, #42	; 0x2a
   13c8c:	beq	13d44 <__assert_fail@plt+0x1cb8>
   13c90:	cmp	r0, #58	; 0x3a
   13c94:	beq	13d34 <__assert_fail@plt+0x1ca8>
   13c98:	cmp	r0, #0
   13c9c:	beq	13e60 <__assert_fail@plt+0x1dd4>
   13ca0:	strb	r0, [fp, #-40]	; 0xffffffd8
   13ca4:	add	r0, r4, #1
   13ca8:	str	r0, [sp, #56]	; 0x38
   13cac:	mov	r0, #2
   13cb0:	b	13c50 <__assert_fail@plt+0x1bc4>
   13cb4:	ldr	r1, [sp, #56]	; 0x38
   13cb8:	mov	r0, #6
   13cbc:	ldrb	r2, [r1]
   13cc0:	cmp	r2, #0
   13cc4:	beq	13c50 <__assert_fail@plt+0x1bc4>
   13cc8:	add	r0, r1, #1
   13ccc:	strb	r2, [fp, #-39]	; 0xffffffd9
   13cd0:	str	r0, [sp, #56]	; 0x38
   13cd4:	mov	r0, #3
   13cd8:	b	13c50 <__assert_fail@plt+0x1bc4>
   13cdc:	ldr	r0, [sp, #56]	; 0x38
   13ce0:	add	r1, r0, #1
   13ce4:	str	r1, [sp, #56]	; 0x38
   13ce8:	ldrb	r0, [r0]
   13cec:	cmp	r0, #61	; 0x3d
   13cf0:	mov	r0, #6
   13cf4:	bne	13c50 <__assert_fail@plt+0x1bc4>
   13cf8:	movw	r8, #61896	; 0xf1c8
   13cfc:	mov	r4, #0
   13d00:	movt	r8, #3
   13d04:	movw	r0, #51704	; 0xc9f8
   13d08:	movt	r0, #2
   13d0c:	ldr	r1, [r0, -r4, lsl #2]
   13d10:	mov	r0, r7
   13d14:	bl	11bd0 <strcmp@plt>
   13d18:	cmp	r0, #0
   13d1c:	beq	13d90 <__assert_fail@plt+0x1d04>
   13d20:	sub	r4, r4, #1
   13d24:	add	r8, r8, #8
   13d28:	cmn	r4, #24
   13d2c:	bne	13d04 <__assert_fail@plt+0x1c78>
   13d30:	b	13db8 <__assert_fail@plt+0x1d2c>
   13d34:	add	r0, r4, #1
   13d38:	str	r0, [sp, #56]	; 0x38
   13d3c:	mov	r0, #1
   13d40:	b	13c50 <__assert_fail@plt+0x1bc4>
   13d44:	mov	r0, #20
   13d48:	bl	27ea0 <_obstack_memory_used@@Base+0x2e2c>
   13d4c:	mov	r3, r0
   13d50:	ldr	r0, [r6]
   13d54:	add	r1, sp, #56	; 0x38
   13d58:	mov	r2, #1
   13d5c:	str	r3, [r6]
   13d60:	mov	r5, r3
   13d64:	str	r0, [r3, #16]
   13d68:	add	r0, r4, #1
   13d6c:	str	r0, [sp, #56]	; 0x38
   13d70:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13d74:	str	r0, [r3, #4]
   13d78:	sub	r0, fp, #36	; 0x24
   13d7c:	bl	19100 <__assert_fail@plt+0x7074>
   13d80:	cmp	r0, #0
   13d84:	mov	r0, #6
   13d88:	movwne	r0, #4
   13d8c:	b	13c50 <__assert_fail@plt+0x1bc4>
   13d90:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13d94:	add	r1, sp, #56	; 0x38
   13d98:	mov	r2, #0
   13d9c:	mov	r3, r8
   13da0:	str	r0, [r8, #4]
   13da4:	sub	r0, fp, #36	; 0x24
   13da8:	bl	19100 <__assert_fail@plt+0x7074>
   13dac:	cmp	r0, #0
   13db0:	mov	r0, #1
   13db4:	bne	13c50 <__assert_fail@plt+0x1bc4>
   13db8:	movw	r1, #49500	; 0xc15c
   13dbc:	mov	r0, #0
   13dc0:	mov	r2, #5
   13dc4:	movt	r1, #2
   13dc8:	bl	11cb4 <dcgettext@plt>
   13dcc:	mov	r4, r6
   13dd0:	mov	r6, r0
   13dd4:	mov	r0, r7
   13dd8:	bl	26d20 <_obstack_memory_used@@Base+0x1cac>
   13ddc:	mov	r3, r0
   13de0:	mov	r2, r6
   13de4:	mov	r0, #0
   13de8:	mov	r1, #0
   13dec:	mov	r6, r4
   13df0:	bl	11db0 <error@plt>
   13df4:	mov	r0, #6
   13df8:	b	13c50 <__assert_fail@plt+0x1bc4>
   13dfc:	movw	r1, #49524	; 0xc174
   13e00:	mov	r0, #0
   13e04:	mov	r2, #5
   13e08:	mov	r4, #0
   13e0c:	movt	r1, #2
   13e10:	bl	11cb4 <dcgettext@plt>
   13e14:	mov	r2, r0
   13e18:	mov	r0, #0
   13e1c:	mov	r1, #0
   13e20:	bl	11db0 <error@plt>
   13e24:	movw	r0, #472	; 0x1d8
   13e28:	movt	r0, #4
   13e2c:	ldr	r0, [r0]
   13e30:	bl	2046c <__assert_fail@plt+0xe3e0>
   13e34:	ldr	r0, [r6]
   13e38:	cmp	r0, #0
   13e3c:	beq	13e54 <__assert_fail@plt+0x1dc8>
   13e40:	ldr	r5, [r0, #16]
   13e44:	bl	2046c <__assert_fail@plt+0xe3e0>
   13e48:	cmp	r5, #0
   13e4c:	mov	r0, r5
   13e50:	bne	13e40 <__assert_fail@plt+0x1db4>
   13e54:	movw	r0, #62252	; 0xf32c
   13e58:	movt	r0, #3
   13e5c:	strb	r4, [r0]
   13e60:	movw	r0, #61896	; 0xf1c8
   13e64:	movt	r0, #3
   13e68:	ldr	r1, [r0, #56]	; 0x38
   13e6c:	cmp	r1, #6
   13e70:	bne	13ea0 <__assert_fail@plt+0x1e14>
   13e74:	ldr	r0, [r0, #60]	; 0x3c
   13e78:	movw	r1, #49576	; 0xc1a8
   13e7c:	mov	r2, #6
   13e80:	movt	r1, #2
   13e84:	bl	1202c <strncmp@plt>
   13e88:	cmp	r0, #0
   13e8c:	bne	13ea0 <__assert_fail@plt+0x1e14>
   13e90:	movw	r0, #62262	; 0xf336
   13e94:	mov	r1, #1
   13e98:	movt	r0, #3
   13e9c:	strb	r1, [r0]
   13ea0:	movw	r0, #62252	; 0xf32c
   13ea4:	movt	r0, #3
   13ea8:	ldrb	r0, [r0]
   13eac:	cmp	r0, #0
   13eb0:	movwne	r0, #62256	; 0xf330
   13eb4:	movne	r9, #0
   13eb8:	movtne	r0, #3
   13ebc:	strne	r9, [r0]
   13ec0:	movw	r6, #62260	; 0xf334
   13ec4:	movt	r6, #3
   13ec8:	ldrb	r0, [r6]
   13ecc:	cmp	r0, #1
   13ed0:	bne	13ef0 <__assert_fail@plt+0x1e64>
   13ed4:	ldr	r5, [sp, #32]
   13ed8:	ldr	r7, [sp, #28]
   13edc:	movw	r0, #62261	; 0xf335
   13ee0:	mov	r1, #1
   13ee4:	movt	r0, #3
   13ee8:	strb	r1, [r0]
   13eec:	b	13f00 <__assert_fail@plt+0x1e74>
   13ef0:	ldr	r5, [sp, #32]
   13ef4:	ldr	r7, [sp, #28]
   13ef8:	cmp	r9, #0
   13efc:	beq	14254 <__assert_fail@plt+0x21c8>
   13f00:	movw	r0, #62268	; 0xf33c
   13f04:	movt	r0, #3
   13f08:	ldr	r1, [r0]
   13f0c:	cmp	r1, #0
   13f10:	bne	13f58 <__assert_fail@plt+0x1ecc>
   13f14:	movw	r1, #62264	; 0xf338
   13f18:	mov	r2, #3
   13f1c:	movt	r1, #3
   13f20:	ldr	r1, [r1]
   13f24:	cmp	r1, #0
   13f28:	movw	r1, #62276	; 0xf344
   13f2c:	movt	r1, #3
   13f30:	movweq	r2, #1
   13f34:	ldr	r1, [r1]
   13f38:	cmp	r1, #3
   13f3c:	movw	r1, #62272	; 0xf340
   13f40:	movt	r1, #3
   13f44:	movweq	r2, #1
   13f48:	ldrb	r1, [r1]
   13f4c:	cmp	r1, #0
   13f50:	movwne	r2, #1
   13f54:	str	r2, [r0]
   13f58:	movw	r0, #62280	; 0xf348
   13f5c:	movt	r0, #3
   13f60:	ldrb	r0, [r0]
   13f64:	cmp	r0, #1
   13f68:	bne	13fd0 <__assert_fail@plt+0x1f44>
   13f6c:	movw	r0, #22076	; 0x563c
   13f70:	movw	r2, #21972	; 0x55d4
   13f74:	movw	r3, #22004	; 0x55f4
   13f78:	mov	r1, #0
   13f7c:	movt	r0, #1
   13f80:	movt	r2, #1
   13f84:	movt	r3, #1
   13f88:	str	r0, [sp]
   13f8c:	mov	r0, #30
   13f90:	bl	209a8 <__assert_fail@plt+0xe91c>
   13f94:	movw	r1, #62284	; 0xf34c
   13f98:	cmp	r0, #0
   13f9c:	movt	r1, #3
   13fa0:	str	r0, [r1]
   13fa4:	beq	15434 <__assert_fail@plt+0x33a8>
   13fa8:	movw	r0, #1132	; 0x46c
   13fac:	movw	r3, #37984	; 0x9460
   13fb0:	mov	r1, #0
   13fb4:	mov	r2, #0
   13fb8:	movt	r0, #2
   13fbc:	movt	r3, #2
   13fc0:	str	r0, [sp]
   13fc4:	movw	r0, #62288	; 0xf350
   13fc8:	movt	r0, #3
   13fcc:	bl	24cfc <_obstack_begin@@Base>
   13fd0:	movw	r0, #40620	; 0x9eac
   13fd4:	movt	r0, #2
   13fd8:	bl	11dec <getenv@plt>
   13fdc:	bl	271d4 <_obstack_memory_used@@Base+0x2160>
   13fe0:	movw	r1, #62332	; 0xf37c
   13fe4:	movt	r1, #3
   13fe8:	str	r0, [r1]
   13fec:	movw	r0, #62264	; 0xf338
   13ff0:	movt	r0, #3
   13ff4:	ldr	r0, [r0]
   13ff8:	cmp	r0, #0
   13ffc:	beq	14018 <__assert_fail@plt+0x1f8c>
   14000:	movw	r0, #62336	; 0xf380
   14004:	movt	r0, #3
   14008:	ldr	r0, [r0]
   1400c:	cmp	r0, #5
   14010:	cmpne	r0, #3
   14014:	bne	1428c <__assert_fail@plt+0x2200>
   14018:	movw	r0, #62342	; 0xf386
   1401c:	mov	r1, #1
   14020:	movt	r0, #3
   14024:	strb	r1, [r0]
   14028:	mov	r0, #0
   1402c:	movw	r1, #62343	; 0xf387
   14030:	and	r0, r0, #1
   14034:	movt	r1, #3
   14038:	strb	r0, [r1]
   1403c:	movw	r0, #62344	; 0xf388
   14040:	movt	r0, #3
   14044:	ldrb	r0, [r0]
   14048:	cmp	r0, #0
   1404c:	beq	14098 <__assert_fail@plt+0x200c>
   14050:	movw	r6, #37984	; 0x9460
   14054:	movw	r4, #1132	; 0x46c
   14058:	movw	r0, #62348	; 0xf38c
   1405c:	mov	r1, #0
   14060:	mov	r2, #0
   14064:	movt	r6, #2
   14068:	movt	r4, #2
   1406c:	movt	r0, #3
   14070:	mov	r3, r6
   14074:	str	r4, [sp]
   14078:	bl	24cfc <_obstack_begin@@Base>
   1407c:	movw	r0, #62392	; 0xf3b8
   14080:	mov	r1, #0
   14084:	mov	r2, #0
   14088:	mov	r3, r6
   1408c:	str	r4, [sp]
   14090:	movt	r0, #3
   14094:	bl	24cfc <_obstack_begin@@Base>
   14098:	movw	r0, #62436	; 0xf3e4
   1409c:	movt	r0, #3
   140a0:	ldrb	r0, [r0]
   140a4:	cmp	r0, #0
   140a8:	beq	14120 <__assert_fail@plt+0x2094>
   140ac:	movw	r4, #62472	; 0xf408
   140b0:	mov	r6, #0
   140b4:	movt	r4, #3
   140b8:	mov	r0, r6
   140bc:	bl	1f044 <__assert_fail@plt+0xcfb8>
   140c0:	mov	r1, #1
   140c4:	cmp	r0, #0
   140c8:	bne	140e8 <__assert_fail@plt+0x205c>
   140cc:	bic	r0, r6, #-2147483648	; 0x80000000
   140d0:	sub	r2, r0, #45	; 0x2d
   140d4:	cmp	r2, #2
   140d8:	bcc	140e8 <__assert_fail@plt+0x205c>
   140dc:	cmp	r0, #95	; 0x5f
   140e0:	cmpne	r0, #126	; 0x7e
   140e4:	movne	r1, #0
   140e8:	ldrb	r0, [r4, r6]
   140ec:	orr	r0, r0, r1
   140f0:	strb	r0, [r4, r6]
   140f4:	add	r6, r6, #1
   140f8:	cmp	r6, #256	; 0x100
   140fc:	bne	140b8 <__assert_fail@plt+0x202c>
   14100:	bl	28540 <_obstack_memory_used@@Base+0x34cc>
   14104:	movw	r1, #49853	; 0xc2bd
   14108:	cmp	r0, #0
   1410c:	movt	r1, #2
   14110:	movne	r1, r0
   14114:	movw	r0, #62440	; 0xf3e8
   14118:	movt	r0, #3
   1411c:	str	r1, [r0]
   14120:	movw	r0, #62444	; 0xf3ec
   14124:	mov	r1, #100	; 0x64
   14128:	movt	r0, #3
   1412c:	str	r1, [r0]
   14130:	mov	r0, #100	; 0x64
   14134:	mov	r1, #152	; 0x98
   14138:	bl	27f70 <_obstack_memory_used@@Base+0x2efc>
   1413c:	movw	r1, #62448	; 0xf3f0
   14140:	movw	r9, #62452	; 0xf3f4
   14144:	sub	r8, r7, sl
   14148:	movt	r1, #3
   1414c:	movt	r9, #3
   14150:	cmp	r8, #1
   14154:	str	r0, [r1]
   14158:	movw	r1, #481	; 0x1e1
   1415c:	mov	r0, #0
   14160:	movt	r1, #4
   14164:	str	r0, [r9]
   14168:	strb	r0, [r1]
   1416c:	movw	r1, #488	; 0x1e8
   14170:	movt	r1, #4
   14174:	strb	r0, [r1]
   14178:	movw	r1, #492	; 0x1ec
   1417c:	movt	r1, #4
   14180:	str	r0, [r1]
   14184:	movw	r1, #496	; 0x1f0
   14188:	movt	r1, #4
   1418c:	str	r0, [r1]
   14190:	movw	r1, #500	; 0x1f4
   14194:	movt	r1, #4
   14198:	str	r0, [r1]
   1419c:	movw	r1, #504	; 0x1f8
   141a0:	movt	r1, #4
   141a4:	str	r0, [r1]
   141a8:	movw	r1, #508	; 0x1fc
   141ac:	movt	r1, #4
   141b0:	str	r0, [r1]
   141b4:	movw	r1, #512	; 0x200
   141b8:	movt	r1, #4
   141bc:	str	r0, [r1]
   141c0:	movw	r1, #516	; 0x204
   141c4:	movt	r1, #4
   141c8:	str	r0, [r1]
   141cc:	movw	r1, #520	; 0x208
   141d0:	movt	r1, #4
   141d4:	str	r0, [r1]
   141d8:	movw	r1, #524	; 0x20c
   141dc:	movt	r1, #4
   141e0:	str	r0, [r1]
   141e4:	movw	r1, #528	; 0x210
   141e8:	movt	r1, #4
   141ec:	str	r0, [r1]
   141f0:	blt	14220 <__assert_fail@plt+0x2194>
   141f4:	movw	r6, #49853	; 0xc2bd
   141f8:	movt	r6, #2
   141fc:	ldr	r0, [r5, sl, lsl #2]
   14200:	mov	r1, #0
   14204:	mov	r2, #1
   14208:	mov	r3, r6
   1420c:	bl	15640 <__assert_fail@plt+0x35b4>
   14210:	add	sl, sl, #1
   14214:	cmp	sl, r7
   14218:	blt	141fc <__assert_fail@plt+0x2170>
   1421c:	b	14348 <__assert_fail@plt+0x22bc>
   14220:	movw	r0, #62272	; 0xf340
   14224:	movt	r0, #3
   14228:	ldrb	r0, [r0]
   1422c:	cmp	r0, #1
   14230:	bne	14304 <__assert_fail@plt+0x2278>
   14234:	movw	r0, #56738	; 0xdda2
   14238:	movw	r3, #49853	; 0xc2bd
   1423c:	mov	r1, #3
   14240:	mov	r2, #1
   14244:	movt	r0, #2
   14248:	movt	r3, #2
   1424c:	bl	15640 <__assert_fail@plt+0x35b4>
   14250:	b	14348 <__assert_fail@plt+0x22bc>
   14254:	movw	r4, #61896	; 0xf1c8
   14258:	movt	r4, #3
   1425c:	ldr	r1, [r4, #104]	; 0x68
   14260:	cmp	r1, #0
   14264:	beq	1514c <__assert_fail@plt+0x30c0>
   14268:	ldr	r0, [r4, #108]	; 0x6c
   1426c:	cmp	r1, #2
   14270:	beq	15134 <__assert_fail@plt+0x30a8>
   14274:	cmp	r1, #1
   14278:	bne	13edc <__assert_fail@plt+0x1e50>
   1427c:	ldrb	r0, [r0]
   14280:	cmp	r0, #48	; 0x30
   14284:	beq	1514c <__assert_fail@plt+0x30c0>
   14288:	b	13edc <__assert_fail@plt+0x1e50>
   1428c:	movw	r0, #62341	; 0xf385
   14290:	movw	r1, #62340	; 0xf384
   14294:	movt	r0, #3
   14298:	movt	r1, #3
   1429c:	ldrb	r0, [r0]
   142a0:	ldrb	r1, [r1]
   142a4:	orr	r0, r1, r0
   142a8:	movw	r1, #62342	; 0xf386
   142ac:	ands	r0, r0, #1
   142b0:	movt	r1, #3
   142b4:	strb	r0, [r1]
   142b8:	mov	r0, #0
   142bc:	bne	1402c <__assert_fail@plt+0x1fa0>
   142c0:	movw	r0, #62280	; 0xf348
   142c4:	movt	r0, #3
   142c8:	ldrb	r1, [r0]
   142cc:	mov	r0, #1
   142d0:	cmp	r1, #0
   142d4:	bne	1402c <__assert_fail@plt+0x1fa0>
   142d8:	movw	r0, #62276	; 0xf344
   142dc:	movw	r1, #62252	; 0xf32c
   142e0:	movt	r0, #3
   142e4:	movt	r1, #3
   142e8:	ldr	r0, [r0]
   142ec:	ldrb	r1, [r1]
   142f0:	orrs	r0, r1, r0
   142f4:	ldrb	r1, [r6]
   142f8:	movwne	r0, #1
   142fc:	orr	r0, r1, r0
   14300:	b	1402c <__assert_fail@plt+0x1fa0>
   14304:	mov	r0, #16
   14308:	bl	27ea0 <_obstack_memory_used@@Base+0x2e2c>
   1430c:	mov	r4, r0
   14310:	mov	r0, #0
   14314:	str	r0, [r4, #4]
   14318:	movw	r0, #56738	; 0xdda2
   1431c:	movt	r0, #2
   14320:	bl	283c0 <_obstack_memory_used@@Base+0x334c>
   14324:	str	r0, [r4]
   14328:	mov	r0, #1
   1432c:	strb	r0, [r4, #8]
   14330:	movw	r0, #62240	; 0xf320
   14334:	movt	r0, #3
   14338:	mov	r1, r0
   1433c:	ldr	r0, [r0]
   14340:	str	r4, [r1]
   14344:	str	r0, [r4, #12]
   14348:	ldr	r0, [r9]
   1434c:	movw	r9, #62240	; 0xf320
   14350:	movt	r9, #3
   14354:	cmp	r0, #0
   14358:	beq	143f4 <__assert_fail@plt+0x2368>
   1435c:	bl	169f0 <__assert_fail@plt+0x4964>
   14360:	movw	r0, #62272	; 0xf340
   14364:	movt	r0, #3
   14368:	ldrb	r0, [r0]
   1436c:	cmp	r0, #0
   14370:	bne	14380 <__assert_fail@plt+0x22f4>
   14374:	mov	r0, #0
   14378:	mov	r1, #1
   1437c:	bl	16d50 <__assert_fail@plt+0x4cc4>
   14380:	movw	r0, #62452	; 0xf3f4
   14384:	movt	r0, #3
   14388:	ldr	r0, [r0]
   1438c:	cmp	r0, #0
   14390:	beq	143f4 <__assert_fail@plt+0x2368>
   14394:	bl	16fb8 <__assert_fail@plt+0x4f2c>
   14398:	ldr	r6, [r9]
   1439c:	movw	r7, #62232	; 0xf318
   143a0:	movt	r7, #3
   143a4:	mov	r8, r7
   143a8:	cmp	r6, #0
   143ac:	beq	15084 <__assert_fail@plt+0x2ff8>
   143b0:	movw	r0, #62728	; 0xf508
   143b4:	movt	r0, #3
   143b8:	ldrd	r2, [r0]
   143bc:	adds	r2, r2, #1
   143c0:	adc	r3, r3, #0
   143c4:	strd	r2, [r0]
   143c8:	movw	r0, #62220	; 0xf30c
   143cc:	movt	r0, #3
   143d0:	ldr	r0, [r0]
   143d4:	ldr	r1, [r0, #20]
   143d8:	ldr	r2, [r0, #24]
   143dc:	cmp	r1, r2
   143e0:	bcs	15350 <__assert_fail@plt+0x32c4>
   143e4:	add	r2, r1, #1
   143e8:	str	r2, [r0, #20]
   143ec:	mov	r0, #10
   143f0:	b	1442c <__assert_fail@plt+0x23a0>
   143f4:	ldr	r6, [r9]
   143f8:	cmp	r8, #1
   143fc:	bgt	14434 <__assert_fail@plt+0x23a8>
   14400:	cmp	r6, #0
   14404:	beq	14434 <__assert_fail@plt+0x23a8>
   14408:	ldr	r0, [r6, #12]
   1440c:	movw	r7, #62232	; 0xf318
   14410:	movt	r7, #3
   14414:	mov	r8, r7
   14418:	cmp	r0, #0
   1441c:	bne	14448 <__assert_fail@plt+0x23bc>
   14420:	movw	r1, #62236	; 0xf31c
   14424:	mov	r0, #0
   14428:	movt	r1, #3
   1442c:	strb	r0, [r1]
   14430:	b	14448 <__assert_fail@plt+0x23bc>
   14434:	movw	r7, #62232	; 0xf318
   14438:	movt	r7, #3
   1443c:	mov	r8, r7
   14440:	cmp	r6, #0
   14444:	beq	15084 <__assert_fail@plt+0x2ff8>
   14448:	add	sl, sp, #56	; 0x38
   1444c:	movw	r4, #62284	; 0xf34c
   14450:	movw	r5, #62288	; 0xf350
   14454:	add	r0, sl, #1
   14458:	movt	r4, #3
   1445c:	movt	r5, #3
   14460:	str	r0, [sp, #28]
   14464:	add	r0, sl, #96	; 0x60
   14468:	str	r0, [sp, #32]
   1446c:	b	14494 <__assert_fail@plt+0x2408>
   14470:	movw	r0, #62232	; 0xf318
   14474:	mov	r1, #1
   14478:	movt	r0, #3
   1447c:	b	14e98 <__assert_fail@plt+0x2e0c>
   14480:	mov	r0, #1
   14484:	b	1475c <__assert_fail@plt+0x26d0>
   14488:	mov	r1, #10
   1448c:	bl	11f54 <__overflow@plt>
   14490:	b	14960 <__assert_fail@plt+0x28d4>
   14494:	ldr	r0, [r6, #12]
   14498:	str	r0, [r9]
   1449c:	ldr	r0, [r4]
   144a0:	ldr	r7, [r6]
   144a4:	cmp	r0, #0
   144a8:	beq	14508 <__assert_fail@plt+0x247c>
   144ac:	cmp	r7, #0
   144b0:	bne	14508 <__assert_fail@plt+0x247c>
   144b4:	ldr	r2, [r5, #8]
   144b8:	ldr	r1, [r5, #12]
   144bc:	sub	r2, r1, r2
   144c0:	cmp	r2, #15
   144c4:	bls	153f4 <__assert_fail@plt+0x3368>
   144c8:	sub	r1, r1, #16
   144cc:	str	r1, [r5, #12]
   144d0:	vld1.64	{d16-d17}, [r1]
   144d4:	mov	r1, sl
   144d8:	vst1.64	{d16-d17}, [sl]
   144dc:	bl	2152c <__assert_fail@plt+0xf4a0>
   144e0:	cmp	r0, #0
   144e4:	beq	15414 <__assert_fail@plt+0x3388>
   144e8:	bl	2046c <__assert_fail@plt+0xe3e0>
   144ec:	ldr	r0, [r6]
   144f0:	bl	2046c <__assert_fail@plt+0xe3e0>
   144f4:	ldr	r0, [r6, #4]
   144f8:	bl	2046c <__assert_fail@plt+0xe3e0>
   144fc:	mov	r0, r6
   14500:	bl	2046c <__assert_fail@plt+0xe3e0>
   14504:	b	15078 <__assert_fail@plt+0x2fec>
   14508:	ldrb	sl, [r6, #8]
   1450c:	ldr	r5, [r6, #4]
   14510:	mov	r9, r8
   14514:	bl	11ed0 <__errno_location@plt>
   14518:	mov	r8, r0
   1451c:	mov	r0, #0
   14520:	str	r0, [r8]
   14524:	mov	r0, r7
   14528:	bl	11dc8 <opendir@plt>
   1452c:	cmp	r0, #0
   14530:	str	r0, [sp, #44]	; 0x2c
   14534:	beq	14580 <__assert_fail@plt+0x24f4>
   14538:	ldr	r0, [r4]
   1453c:	str	sl, [sp, #40]	; 0x28
   14540:	str	r7, [sp, #52]	; 0x34
   14544:	str	r5, [sp, #48]	; 0x30
   14548:	cmp	r0, #0
   1454c:	beq	147dc <__assert_fail@plt+0x2750>
   14550:	ldr	r0, [sp, #44]	; 0x2c
   14554:	bl	11fe4 <dirfd@plt>
   14558:	cmp	r0, #0
   1455c:	blt	145f0 <__assert_fail@plt+0x2564>
   14560:	mov	r1, #256	; 0x100
   14564:	add	sl, sp, #56	; 0x38
   14568:	mov	r3, #4096	; 0x1000
   1456c:	str	r1, [sp]
   14570:	movw	r1, #49853	; 0xc2bd
   14574:	mov	r2, sl
   14578:	movt	r1, #2
   1457c:	b	1460c <__assert_fail@plt+0x2580>
   14580:	movw	r1, #49646	; 0xc1ee
   14584:	mov	r0, #0
   14588:	mov	r2, #5
   1458c:	movt	r1, #2
   14590:	bl	11cb4 <dcgettext@plt>
   14594:	ldr	r5, [r8]
   14598:	mov	r4, r0
   1459c:	mov	r0, #4
   145a0:	mov	r1, r7
   145a4:	bl	267f8 <_obstack_memory_used@@Base+0x1784>
   145a8:	mov	r3, r0
   145ac:	mov	r0, #0
   145b0:	mov	r1, r5
   145b4:	mov	r2, r4
   145b8:	bl	11db0 <error@plt>
   145bc:	cmp	sl, #0
   145c0:	beq	14764 <__assert_fail@plt+0x26d8>
   145c4:	mov	r0, #2
   145c8:	movw	r4, #62284	; 0xf34c
   145cc:	movw	r5, #62288	; 0xf350
   145d0:	mov	r8, r9
   145d4:	add	sl, sp, #56	; 0x38
   145d8:	str	r0, [r9]
   145dc:	movw	r9, #62240	; 0xf320
   145e0:	movt	r4, #3
   145e4:	movt	r5, #3
   145e8:	movt	r9, #3
   145ec:	b	15050 <__assert_fail@plt+0x2fc4>
   145f0:	ldr	r1, [sp, #52]	; 0x34
   145f4:	mov	r0, #256	; 0x100
   145f8:	add	sl, sp, #56	; 0x38
   145fc:	mov	r3, #0
   14600:	str	r0, [sp]
   14604:	mvn	r0, #99	; 0x63
   14608:	mov	r2, sl
   1460c:	bl	1a8fc <__assert_fail@plt+0x8870>
   14610:	movw	r9, #62240	; 0xf320
   14614:	cmn	r0, #1
   14618:	movt	r9, #3
   1461c:	ble	146f4 <__assert_fail@plt+0x2668>
   14620:	ldr	r0, [sp, #32]
   14624:	ldr	sl, [r0]
   14628:	ldr	r9, [r0, #4]
   1462c:	ldr	r7, [sp, #56]	; 0x38
   14630:	ldr	r5, [sp, #60]	; 0x3c
   14634:	mov	r0, #16
   14638:	bl	27ea0 <_obstack_memory_used@@Base+0x2e2c>
   1463c:	mov	r4, r0
   14640:	str	sl, [r0]
   14644:	str	r9, [r0, #4]
   14648:	str	r7, [r0, #8]
   1464c:	str	r5, [r0, #12]
   14650:	movw	r0, #62284	; 0xf34c
   14654:	movt	r0, #3
   14658:	mov	r1, r4
   1465c:	ldr	r0, [r0]
   14660:	bl	214ec <__assert_fail@plt+0xf460>
   14664:	cmp	r0, #0
   14668:	beq	15434 <__assert_fail@plt+0x33a8>
   1466c:	cmp	r0, r4
   14670:	beq	14798 <__assert_fail@plt+0x270c>
   14674:	mov	r0, r4
   14678:	bl	2046c <__assert_fail@plt+0xe3e0>
   1467c:	movw	r1, #49711	; 0xc22f
   14680:	mov	r0, #0
   14684:	mov	r2, #5
   14688:	movt	r1, #2
   1468c:	bl	11cb4 <dcgettext@plt>
   14690:	ldr	r2, [sp, #52]	; 0x34
   14694:	mov	r4, r0
   14698:	mov	r0, #0
   1469c:	mov	r1, #3
   146a0:	bl	26a74 <_obstack_memory_used@@Base+0x1a00>
   146a4:	mov	r3, r0
   146a8:	mov	r0, #0
   146ac:	mov	r1, #0
   146b0:	mov	r2, r4
   146b4:	bl	11db0 <error@plt>
   146b8:	ldr	r0, [sp, #44]	; 0x2c
   146bc:	bl	12044 <closedir@plt>
   146c0:	movw	r7, #62232	; 0xf318
   146c4:	movw	r9, #62240	; 0xf320
   146c8:	movw	r4, #62284	; 0xf34c
   146cc:	movw	r5, #62288	; 0xf350
   146d0:	mov	r0, #2
   146d4:	add	sl, sp, #56	; 0x38
   146d8:	movt	r7, #3
   146dc:	movt	r9, #3
   146e0:	movt	r4, #3
   146e4:	movt	r5, #3
   146e8:	mov	r8, r7
   146ec:	str	r0, [r7]
   146f0:	b	15050 <__assert_fail@plt+0x2fc4>
   146f4:	movw	r1, #49671	; 0xc207
   146f8:	mov	r0, #0
   146fc:	mov	r2, #5
   14700:	movt	r1, #2
   14704:	bl	11cb4 <dcgettext@plt>
   14708:	ldr	r1, [sp, #52]	; 0x34
   1470c:	ldr	r5, [r8]
   14710:	mov	r4, r0
   14714:	mov	r0, #4
   14718:	bl	267f8 <_obstack_memory_used@@Base+0x1784>
   1471c:	mov	r3, r0
   14720:	mov	r0, #0
   14724:	mov	r1, r5
   14728:	mov	r2, r4
   1472c:	bl	11db0 <error@plt>
   14730:	ldr	r1, [sp, #40]	; 0x28
   14734:	movw	r7, #62232	; 0xf318
   14738:	movw	r4, #62284	; 0xf34c
   1473c:	movw	r5, #62288	; 0xf350
   14740:	mov	r0, #2
   14744:	movt	r7, #3
   14748:	movt	r4, #3
   1474c:	movt	r5, #3
   14750:	mov	r8, r7
   14754:	cmp	r1, #0
   14758:	beq	14a40 <__assert_fail@plt+0x29b4>
   1475c:	str	r0, [r8]
   14760:	b	14a4c <__assert_fail@plt+0x29c0>
   14764:	ldr	r0, [r9]
   14768:	movw	r4, #62284	; 0xf34c
   1476c:	movw	r5, #62288	; 0xf350
   14770:	mov	r8, r9
   14774:	movw	r9, #62240	; 0xf320
   14778:	add	sl, sp, #56	; 0x38
   1477c:	movt	r4, #3
   14780:	movt	r5, #3
   14784:	movt	r9, #3
   14788:	cmp	r0, #0
   1478c:	moveq	r0, #1
   14790:	streq	r0, [r8]
   14794:	b	15050 <__assert_fail@plt+0x2fc4>
   14798:	movw	r4, #62288	; 0xf350
   1479c:	movt	r4, #3
   147a0:	ldr	r0, [r4, #12]
   147a4:	ldr	r1, [r4, #16]
   147a8:	sub	r1, r1, r0
   147ac:	cmp	r1, #15
   147b0:	bhi	147c4 <__assert_fail@plt+0x2738>
   147b4:	mov	r0, r4
   147b8:	mov	r1, #16
   147bc:	bl	24e50 <_obstack_newchunk@@Base>
   147c0:	ldr	r0, [r4, #12]
   147c4:	add	r1, r0, #16
   147c8:	str	r1, [r4, #12]
   147cc:	str	sl, [r0]
   147d0:	str	r9, [r0, #4]
   147d4:	str	r7, [r0, #8]
   147d8:	str	r5, [r0, #12]
   147dc:	movw	r7, #62452	; 0xf3f4
   147e0:	movw	r9, #62728	; 0xf508
   147e4:	movw	sl, #62220	; 0xf30c
   147e8:	movt	r7, #3
   147ec:	movt	r9, #3
   147f0:	movt	sl, #3
   147f4:	ldr	r0, [r7]
   147f8:	cmp	r0, #0
   147fc:	beq	14854 <__assert_fail@plt+0x27c8>
   14800:	mov	r4, #0
   14804:	movw	r0, #484	; 0x1e4
   14808:	movt	r0, #4
   1480c:	ldr	r0, [r0]
   14810:	ldr	r5, [r0, r4, lsl #2]
   14814:	ldr	r0, [r5]
   14818:	bl	2046c <__assert_fail@plt+0xe3e0>
   1481c:	ldr	r0, [r5, #4]
   14820:	bl	2046c <__assert_fail@plt+0xe3e0>
   14824:	ldr	r0, [r5, #8]
   14828:	bl	2046c <__assert_fail@plt+0xe3e0>
   1482c:	ldr	r0, [r5, #128]	; 0x80
   14830:	movw	r1, #62105	; 0xf299
   14834:	movt	r1, #3
   14838:	cmp	r0, r1
   1483c:	beq	14844 <__assert_fail@plt+0x27b8>
   14840:	bl	11ff0 <freecon@plt>
   14844:	ldr	r0, [r7]
   14848:	add	r4, r4, #1
   1484c:	cmp	r4, r0
   14850:	bcc	14804 <__assert_fail@plt+0x2778>
   14854:	movw	r0, #481	; 0x1e1
   14858:	mov	r1, #0
   1485c:	movt	r0, #4
   14860:	str	r1, [r7]
   14864:	strb	r1, [r0]
   14868:	movw	r0, #488	; 0x1e8
   1486c:	movt	r0, #4
   14870:	strb	r1, [r0]
   14874:	movw	r0, #492	; 0x1ec
   14878:	movt	r0, #4
   1487c:	str	r1, [r0]
   14880:	movw	r0, #496	; 0x1f0
   14884:	movt	r0, #4
   14888:	str	r1, [r0]
   1488c:	movw	r0, #500	; 0x1f4
   14890:	movt	r0, #4
   14894:	str	r1, [r0]
   14898:	movw	r0, #504	; 0x1f8
   1489c:	movt	r0, #4
   148a0:	str	r1, [r0]
   148a4:	movw	r0, #508	; 0x1fc
   148a8:	movt	r0, #4
   148ac:	str	r1, [r0]
   148b0:	movw	r0, #512	; 0x200
   148b4:	movt	r0, #4
   148b8:	str	r1, [r0]
   148bc:	movw	r0, #516	; 0x204
   148c0:	movt	r0, #4
   148c4:	str	r1, [r0]
   148c8:	movw	r0, #520	; 0x208
   148cc:	movt	r0, #4
   148d0:	str	r1, [r0]
   148d4:	movw	r0, #524	; 0x20c
   148d8:	movt	r0, #4
   148dc:	str	r1, [r0]
   148e0:	movw	r0, #528	; 0x210
   148e4:	movt	r0, #4
   148e8:	str	r1, [r0]
   148ec:	movw	r0, #62280	; 0xf348
   148f0:	movt	r0, #3
   148f4:	ldrb	r0, [r0]
   148f8:	cmp	r0, #0
   148fc:	bne	14914 <__assert_fail@plt+0x2888>
   14900:	movw	r0, #62236	; 0xf31c
   14904:	movt	r0, #3
   14908:	ldrb	r0, [r0]
   1490c:	cmp	r0, #1
   14910:	bne	14aec <__assert_fail@plt+0x2a60>
   14914:	movw	r0, #480	; 0x1e0
   14918:	ldr	r5, [sp, #48]	; 0x30
   1491c:	movt	r0, #4
   14920:	ldrb	r0, [r0]
   14924:	cmp	r0, #1
   14928:	bne	14960 <__assert_fail@plt+0x28d4>
   1492c:	ldrd	r0, [r9]
   14930:	adds	r0, r0, #1
   14934:	adc	r1, r1, #0
   14938:	strd	r0, [r9]
   1493c:	ldr	r0, [sl]
   14940:	ldr	r1, [r0, #20]
   14944:	ldr	r2, [r0, #24]
   14948:	cmp	r1, r2
   1494c:	bcs	14488 <__assert_fail@plt+0x23fc>
   14950:	add	r2, r1, #1
   14954:	str	r2, [r0, #20]
   14958:	mov	r0, #10
   1495c:	strb	r0, [r1]
   14960:	movw	r1, #480	; 0x1e0
   14964:	mov	r0, #1
   14968:	movt	r1, #4
   1496c:	strb	r0, [r1]
   14970:	movw	r0, #62344	; 0xf388
   14974:	movt	r0, #3
   14978:	ldrb	r0, [r0]
   1497c:	cmp	r0, #0
   14980:	beq	149ac <__assert_fail@plt+0x2920>
   14984:	ldrd	r0, [r9]
   14988:	ldr	r3, [sl]
   1498c:	mov	r2, #2
   14990:	adds	r0, r0, #2
   14994:	adc	r1, r1, #0
   14998:	strd	r0, [r9]
   1499c:	movw	r0, #49824	; 0xc2a0
   149a0:	mov	r1, #1
   149a4:	movt	r0, #2
   149a8:	bl	11c90 <fwrite_unlocked@plt>
   149ac:	movw	r0, #62436	; 0xf3e4
   149b0:	movt	r0, #3
   149b4:	ldrb	r0, [r0]
   149b8:	cmp	r0, #0
   149bc:	beq	14a38 <__assert_fail@plt+0x29ac>
   149c0:	ldr	sl, [sp, #52]	; 0x34
   149c4:	mov	r1, #2
   149c8:	mov	r0, sl
   149cc:	bl	1f3f0 <__assert_fail@plt+0xd364>
   149d0:	mov	r4, r0
   149d4:	cmp	r0, #0
   149d8:	bne	14a7c <__assert_fail@plt+0x29f0>
   149dc:	movw	r1, #49752	; 0xc258
   149e0:	mov	r0, #0
   149e4:	mov	r2, #5
   149e8:	movt	r1, #2
   149ec:	bl	11cb4 <dcgettext@plt>
   149f0:	ldr	r5, [r8]
   149f4:	mov	r4, r0
   149f8:	mov	r0, #4
   149fc:	mov	r1, sl
   14a00:	bl	267f8 <_obstack_memory_used@@Base+0x1784>
   14a04:	mov	r3, r0
   14a08:	mov	r0, #0
   14a0c:	mov	r1, r5
   14a10:	mov	r2, r4
   14a14:	bl	11db0 <error@plt>
   14a18:	ldr	r0, [sp, #40]	; 0x28
   14a1c:	cmp	r0, #0
   14a20:	beq	14a58 <__assert_fail@plt+0x29cc>
   14a24:	movw	r0, #62232	; 0xf318
   14a28:	mov	r1, #2
   14a2c:	movt	r0, #3
   14a30:	str	r1, [r0]
   14a34:	b	14a70 <__assert_fail@plt+0x29e4>
   14a38:	ldr	sl, [sp, #52]	; 0x34
   14a3c:	b	14a78 <__assert_fail@plt+0x29ec>
   14a40:	ldr	r0, [r8]
   14a44:	cmp	r0, #0
   14a48:	beq	14480 <__assert_fail@plt+0x23f4>
   14a4c:	ldr	r0, [sp, #44]	; 0x2c
   14a50:	bl	12044 <closedir@plt>
   14a54:	b	15050 <__assert_fail@plt+0x2fc4>
   14a58:	movw	r1, #62232	; 0xf318
   14a5c:	movt	r1, #3
   14a60:	ldr	r0, [r1]
   14a64:	cmp	r0, #0
   14a68:	moveq	r0, #1
   14a6c:	streq	r0, [r1]
   14a70:	ldr	sl, [sp, #52]	; 0x34
   14a74:	ldr	r5, [sp, #48]	; 0x30
   14a78:	mov	r4, #0
   14a7c:	movw	r0, #62924	; 0xf5cc
   14a80:	cmp	r5, #0
   14a84:	mvn	r2, #0
   14a88:	mov	r3, #0
   14a8c:	movt	r0, #3
   14a90:	moveq	r5, sl
   14a94:	ldr	r1, [r0]
   14a98:	mov	r0, #1
   14a9c:	str	r0, [sp]
   14aa0:	movw	r0, #62392	; 0xf3b8
   14aa4:	movt	r0, #3
   14aa8:	stmib	sp, {r0, r4}
   14aac:	mov	r0, r5
   14ab0:	bl	195d0 <__assert_fail@plt+0x7544>
   14ab4:	mov	r0, r4
   14ab8:	bl	2046c <__assert_fail@plt+0xe3e0>
   14abc:	ldrd	r0, [r9]
   14ac0:	mov	r2, #2
   14ac4:	adds	r0, r0, #2
   14ac8:	adc	r1, r1, #0
   14acc:	strd	r0, [r9]
   14ad0:	movw	r0, #62220	; 0xf30c
   14ad4:	mov	r1, #1
   14ad8:	movt	r0, #3
   14adc:	ldr	r3, [r0]
   14ae0:	movw	r0, #48724	; 0xbe54
   14ae4:	movt	r0, #2
   14ae8:	bl	11c90 <fwrite_unlocked@plt>
   14aec:	str	r6, [sp, #36]	; 0x24
   14af0:	ldr	r6, [sp, #44]	; 0x2c
   14af4:	mov	sl, #0
   14af8:	mov	r0, #0
   14afc:	str	r0, [sp, #48]	; 0x30
   14b00:	b	14b08 <__assert_fail@plt+0x2a7c>
   14b04:	bl	1a7a0 <__assert_fail@plt+0x8714>
   14b08:	mov	r0, #0
   14b0c:	str	r0, [r8]
   14b10:	mov	r0, r6
   14b14:	bl	11fc0 <readdir64@plt>
   14b18:	cmp	r0, #0
   14b1c:	beq	14d90 <__assert_fail@plt+0x2d04>
   14b20:	mov	r4, r0
   14b24:	add	r9, r0, #19
   14b28:	movw	r0, #62864	; 0xf590
   14b2c:	movt	r0, #3
   14b30:	ldr	r0, [r0]
   14b34:	cmp	r0, #2
   14b38:	beq	14bb0 <__assert_fail@plt+0x2b24>
   14b3c:	ldrb	r1, [r9]
   14b40:	cmp	r1, #46	; 0x2e
   14b44:	bne	14b70 <__assert_fail@plt+0x2ae4>
   14b48:	cmp	r0, #0
   14b4c:	beq	14df8 <__assert_fail@plt+0x2d6c>
   14b50:	ldrb	r1, [r4, #20]
   14b54:	cmp	r1, #46	; 0x2e
   14b58:	mov	r1, #1
   14b5c:	movweq	r1, #2
   14b60:	add	r1, r4, r1
   14b64:	ldrb	r1, [r1, #19]
   14b68:	cmp	r1, #0
   14b6c:	beq	14df8 <__assert_fail@plt+0x2d6c>
   14b70:	cmp	r0, #0
   14b74:	bne	14bb0 <__assert_fail@plt+0x2b24>
   14b78:	movw	r0, #62904	; 0xf5b8
   14b7c:	movt	r0, #3
   14b80:	ldr	r5, [r0]
   14b84:	cmp	r5, #0
   14b88:	beq	14bb0 <__assert_fail@plt+0x2b24>
   14b8c:	ldr	r0, [r5]
   14b90:	mov	r1, r9
   14b94:	mov	r2, #4
   14b98:	bl	11dd4 <fnmatch@plt>
   14b9c:	cmp	r0, #0
   14ba0:	beq	14df8 <__assert_fail@plt+0x2d6c>
   14ba4:	ldr	r5, [r5, #4]
   14ba8:	cmp	r5, #0
   14bac:	bne	14b8c <__assert_fail@plt+0x2b00>
   14bb0:	movw	r0, #62928	; 0xf5d0
   14bb4:	movt	r0, #3
   14bb8:	ldr	r5, [r0]
   14bbc:	cmp	r5, #0
   14bc0:	beq	14be8 <__assert_fail@plt+0x2b5c>
   14bc4:	ldr	r0, [r5]
   14bc8:	mov	r1, r9
   14bcc:	mov	r2, #4
   14bd0:	bl	11dd4 <fnmatch@plt>
   14bd4:	cmp	r0, #0
   14bd8:	beq	14df8 <__assert_fail@plt+0x2d6c>
   14bdc:	ldr	r5, [r5, #4]
   14be0:	cmp	r5, #0
   14be4:	bne	14bc4 <__assert_fail@plt+0x2b38>
   14be8:	ldrb	r0, [r4, #18]
   14bec:	mov	r1, #0
   14bf0:	ldr	r3, [sp, #52]	; 0x34
   14bf4:	sub	r0, r0, #1
   14bf8:	uxtb	r2, r0
   14bfc:	cmp	r2, #13
   14c00:	mov	r2, #0
   14c04:	movwls	r1, #56512	; 0xdcc0
   14c08:	sxtbls	r0, r0
   14c0c:	movtls	r1, #2
   14c10:	ldrls	r1, [r1, r0, lsl #2]
   14c14:	mov	r0, r9
   14c18:	bl	15640 <__assert_fail@plt+0x35b4>
   14c1c:	adds	sl, r0, sl
   14c20:	ldr	r0, [sp, #48]	; 0x30
   14c24:	adc	r0, r1, r0
   14c28:	mov	r1, r0
   14c2c:	movw	r0, #62264	; 0xf338
   14c30:	movt	r0, #3
   14c34:	str	r1, [sp, #48]	; 0x30
   14c38:	ldr	r0, [r0]
   14c3c:	cmp	r0, #1
   14c40:	bne	14df8 <__assert_fail@plt+0x2d6c>
   14c44:	movw	r0, #62336	; 0xf380
   14c48:	movw	r7, #62452	; 0xf3f4
   14c4c:	movt	r0, #3
   14c50:	movt	r7, #3
   14c54:	ldr	r0, [r0]
   14c58:	cmp	r0, #6
   14c5c:	bne	14b04 <__assert_fail@plt+0x2a78>
   14c60:	movw	r0, #62341	; 0xf385
   14c64:	movt	r0, #3
   14c68:	ldrb	r0, [r0]
   14c6c:	cmp	r0, #0
   14c70:	bne	14b04 <__assert_fail@plt+0x2a78>
   14c74:	movw	r0, #62280	; 0xf348
   14c78:	movt	r0, #3
   14c7c:	ldrb	r0, [r0]
   14c80:	cmp	r0, #0
   14c84:	bne	14b04 <__assert_fail@plt+0x2a78>
   14c88:	bl	169f0 <__assert_fail@plt+0x4964>
   14c8c:	bl	16fb8 <__assert_fail@plt+0x4f2c>
   14c90:	ldr	r0, [r7]
   14c94:	cmp	r0, #0
   14c98:	beq	14cf0 <__assert_fail@plt+0x2c64>
   14c9c:	mov	r4, #0
   14ca0:	movw	r0, #484	; 0x1e4
   14ca4:	movt	r0, #4
   14ca8:	ldr	r0, [r0]
   14cac:	ldr	r5, [r0, r4, lsl #2]
   14cb0:	ldr	r0, [r5]
   14cb4:	bl	2046c <__assert_fail@plt+0xe3e0>
   14cb8:	ldr	r0, [r5, #4]
   14cbc:	bl	2046c <__assert_fail@plt+0xe3e0>
   14cc0:	ldr	r0, [r5, #8]
   14cc4:	bl	2046c <__assert_fail@plt+0xe3e0>
   14cc8:	ldr	r0, [r5, #128]	; 0x80
   14ccc:	movw	r1, #62105	; 0xf299
   14cd0:	movt	r1, #3
   14cd4:	cmp	r0, r1
   14cd8:	beq	14ce0 <__assert_fail@plt+0x2c54>
   14cdc:	bl	11ff0 <freecon@plt>
   14ce0:	ldr	r0, [r7]
   14ce4:	add	r4, r4, #1
   14ce8:	cmp	r4, r0
   14cec:	bcc	14ca0 <__assert_fail@plt+0x2c14>
   14cf0:	movw	r0, #481	; 0x1e1
   14cf4:	mov	r1, #0
   14cf8:	movt	r0, #4
   14cfc:	str	r1, [r7]
   14d00:	strb	r1, [r0]
   14d04:	movw	r0, #488	; 0x1e8
   14d08:	movt	r0, #4
   14d0c:	strb	r1, [r0]
   14d10:	movw	r0, #492	; 0x1ec
   14d14:	movt	r0, #4
   14d18:	str	r1, [r0]
   14d1c:	movw	r0, #496	; 0x1f0
   14d20:	movt	r0, #4
   14d24:	str	r1, [r0]
   14d28:	movw	r0, #500	; 0x1f4
   14d2c:	movt	r0, #4
   14d30:	str	r1, [r0]
   14d34:	movw	r0, #504	; 0x1f8
   14d38:	movt	r0, #4
   14d3c:	str	r1, [r0]
   14d40:	movw	r0, #508	; 0x1fc
   14d44:	movt	r0, #4
   14d48:	str	r1, [r0]
   14d4c:	movw	r0, #512	; 0x200
   14d50:	movt	r0, #4
   14d54:	str	r1, [r0]
   14d58:	movw	r0, #516	; 0x204
   14d5c:	movt	r0, #4
   14d60:	str	r1, [r0]
   14d64:	movw	r0, #520	; 0x208
   14d68:	movt	r0, #4
   14d6c:	str	r1, [r0]
   14d70:	movw	r0, #524	; 0x20c
   14d74:	movt	r0, #4
   14d78:	str	r1, [r0]
   14d7c:	movw	r0, #528	; 0x210
   14d80:	movt	r0, #4
   14d84:	str	r1, [r0]
   14d88:	bl	1a7a0 <__assert_fail@plt+0x8714>
   14d8c:	b	14b08 <__assert_fail@plt+0x2a7c>
   14d90:	ldr	r0, [r8]
   14d94:	ldr	r6, [sp, #40]	; 0x28
   14d98:	cmp	r0, #0
   14d9c:	beq	14e38 <__assert_fail@plt+0x2dac>
   14da0:	movw	r1, #49776	; 0xc270
   14da4:	mov	r0, #0
   14da8:	mov	r2, #5
   14dac:	movt	r1, #2
   14db0:	bl	11cb4 <dcgettext@plt>
   14db4:	ldr	r1, [sp, #52]	; 0x34
   14db8:	ldr	r5, [r8]
   14dbc:	mov	r4, r0
   14dc0:	mov	r0, #4
   14dc4:	bl	267f8 <_obstack_memory_used@@Base+0x1784>
   14dc8:	mov	r3, r0
   14dcc:	mov	r0, #0
   14dd0:	mov	r1, r5
   14dd4:	mov	r2, r4
   14dd8:	bl	11db0 <error@plt>
   14ddc:	mov	r0, #2
   14de0:	cmp	r6, #0
   14de4:	beq	14e08 <__assert_fail@plt+0x2d7c>
   14de8:	movw	r1, #62232	; 0xf318
   14dec:	movt	r1, #3
   14df0:	str	r0, [r1]
   14df4:	b	14e1c <__assert_fail@plt+0x2d90>
   14df8:	movw	r7, #62452	; 0xf3f4
   14dfc:	movt	r7, #3
   14e00:	bl	1a7a0 <__assert_fail@plt+0x8714>
   14e04:	b	14b08 <__assert_fail@plt+0x2a7c>
   14e08:	movw	r0, #62232	; 0xf318
   14e0c:	movt	r0, #3
   14e10:	ldr	r0, [r0]
   14e14:	cmp	r0, #0
   14e18:	beq	14e30 <__assert_fail@plt+0x2da4>
   14e1c:	ldr	r0, [r8]
   14e20:	cmp	r0, #75	; 0x4b
   14e24:	bne	14e38 <__assert_fail@plt+0x2dac>
   14e28:	ldr	r6, [sp, #44]	; 0x2c
   14e2c:	b	14b04 <__assert_fail@plt+0x2a78>
   14e30:	mov	r0, #1
   14e34:	b	14de8 <__assert_fail@plt+0x2d5c>
   14e38:	ldr	r0, [sp, #44]	; 0x2c
   14e3c:	bl	12044 <closedir@plt>
   14e40:	cmp	r0, #0
   14e44:	beq	14eac <__assert_fail@plt+0x2e20>
   14e48:	movw	r1, #49797	; 0xc285
   14e4c:	mov	r0, #0
   14e50:	mov	r2, #5
   14e54:	movt	r1, #2
   14e58:	bl	11cb4 <dcgettext@plt>
   14e5c:	ldr	r1, [sp, #52]	; 0x34
   14e60:	ldr	r5, [r8]
   14e64:	mov	r4, r0
   14e68:	mov	r0, #4
   14e6c:	bl	267f8 <_obstack_memory_used@@Base+0x1784>
   14e70:	mov	r3, r0
   14e74:	mov	r0, #0
   14e78:	mov	r1, r5
   14e7c:	mov	r2, r4
   14e80:	bl	11db0 <error@plt>
   14e84:	movw	r0, #62232	; 0xf318
   14e88:	cmp	r6, #0
   14e8c:	movt	r0, #3
   14e90:	beq	14ea0 <__assert_fail@plt+0x2e14>
   14e94:	mov	r1, #2
   14e98:	str	r1, [r0]
   14e9c:	b	14eac <__assert_fail@plt+0x2e20>
   14ea0:	ldr	r0, [r0]
   14ea4:	cmp	r0, #0
   14ea8:	beq	14470 <__assert_fail@plt+0x23e4>
   14eac:	bl	169f0 <__assert_fail@plt+0x4964>
   14eb0:	movw	r0, #62280	; 0xf348
   14eb4:	movt	r0, #3
   14eb8:	ldrb	r0, [r0]
   14ebc:	cmp	r0, #1
   14ec0:	bne	14ed0 <__assert_fail@plt+0x2e44>
   14ec4:	ldr	r0, [sp, #52]	; 0x34
   14ec8:	mov	r1, #0
   14ecc:	bl	16d50 <__assert_fail@plt+0x4cc4>
   14ed0:	movw	r0, #62264	; 0xf338
   14ed4:	movt	r0, #3
   14ed8:	ldr	r0, [r0]
   14edc:	cmp	r0, #0
   14ee0:	beq	14ef8 <__assert_fail@plt+0x2e6c>
   14ee4:	movw	r0, #62341	; 0xf385
   14ee8:	movt	r0, #3
   14eec:	ldrb	r0, [r0]
   14ef0:	cmp	r0, #1
   14ef4:	bne	15018 <__assert_fail@plt+0x2f8c>
   14ef8:	movw	r0, #62876	; 0xf59c
   14efc:	mov	r2, #512	; 0x200
   14f00:	movt	r0, #3
   14f04:	str	r2, [sp]
   14f08:	mov	r2, #0
   14f0c:	ldr	r3, [r0]
   14f10:	movw	r0, #62888	; 0xf5a8
   14f14:	str	r2, [sp, #4]
   14f18:	ldr	r2, [sp, #28]
   14f1c:	movt	r0, #3
   14f20:	ldrd	r0, [r0]
   14f24:	str	r1, [sp, #12]
   14f28:	ldr	r1, [sp, #48]	; 0x30
   14f2c:	str	r0, [sp, #8]
   14f30:	mov	r0, sl
   14f34:	bl	21880 <__assert_fail@plt+0xf7f4>
   14f38:	mov	r4, r0
   14f3c:	bl	11eac <strlen@plt>
   14f40:	add	r6, r4, r0
   14f44:	mov	r0, #32
   14f48:	movw	r8, #62728	; 0xf508
   14f4c:	movw	r9, #62220	; 0xf30c
   14f50:	strb	r0, [r4, #-1]!
   14f54:	movw	r0, #62908	; 0xf5bc
   14f58:	movt	r8, #3
   14f5c:	movt	r9, #3
   14f60:	movt	r0, #3
   14f64:	ldrb	r0, [r0]
   14f68:	cmp	r0, #0
   14f6c:	mov	r0, #10
   14f70:	movwne	r0, #0
   14f74:	strb	r0, [r6], #1
   14f78:	movw	r0, #62344	; 0xf388
   14f7c:	movt	r0, #3
   14f80:	ldrb	r0, [r0]
   14f84:	cmp	r0, #0
   14f88:	beq	14fb4 <__assert_fail@plt+0x2f28>
   14f8c:	ldrd	r0, [r8]
   14f90:	ldr	r3, [r9]
   14f94:	mov	r2, #2
   14f98:	adds	r0, r0, #2
   14f9c:	adc	r1, r1, #0
   14fa0:	strd	r0, [r8]
   14fa4:	movw	r0, #49824	; 0xc2a0
   14fa8:	mov	r1, #1
   14fac:	movt	r0, #2
   14fb0:	bl	11c90 <fwrite_unlocked@plt>
   14fb4:	movw	r1, #49818	; 0xc29a
   14fb8:	mov	r0, #0
   14fbc:	mov	r2, #5
   14fc0:	movt	r1, #2
   14fc4:	bl	11cb4 <dcgettext@plt>
   14fc8:	mov	r5, r0
   14fcc:	bl	11eac <strlen@plt>
   14fd0:	mov	r2, r0
   14fd4:	ldrd	r0, [r8]
   14fd8:	ldr	r3, [r9]
   14fdc:	adds	r0, r0, r2
   14fe0:	adc	r1, r1, #0
   14fe4:	strd	r0, [r8]
   14fe8:	mov	r0, r5
   14fec:	mov	r1, #1
   14ff0:	bl	11c90 <fwrite_unlocked@plt>
   14ff4:	ldrd	r0, [r8]
   14ff8:	sub	r2, r6, r4
   14ffc:	ldr	r3, [r9]
   15000:	adds	r0, r0, r2
   15004:	adc	r1, r1, #0
   15008:	strd	r0, [r8]
   1500c:	mov	r0, r4
   15010:	mov	r1, #1
   15014:	bl	11c90 <fwrite_unlocked@plt>
   15018:	ldr	r0, [r7]
   1501c:	ldr	r6, [sp, #36]	; 0x24
   15020:	movw	r7, #62232	; 0xf318
   15024:	movw	r9, #62240	; 0xf320
   15028:	movw	r4, #62284	; 0xf34c
   1502c:	movw	r5, #62288	; 0xf350
   15030:	add	sl, sp, #56	; 0x38
   15034:	movt	r7, #3
   15038:	movt	r9, #3
   1503c:	movt	r4, #3
   15040:	movt	r5, #3
   15044:	mov	r8, r7
   15048:	cmp	r0, #0
   1504c:	blne	16fb8 <__assert_fail@plt+0x4f2c>
   15050:	ldr	r0, [r6]
   15054:	bl	2046c <__assert_fail@plt+0xe3e0>
   15058:	ldr	r0, [r6, #4]
   1505c:	bl	2046c <__assert_fail@plt+0xe3e0>
   15060:	mov	r0, r6
   15064:	bl	2046c <__assert_fail@plt+0xe3e0>
   15068:	movw	r0, #62236	; 0xf31c
   1506c:	mov	r1, #1
   15070:	movt	r0, #3
   15074:	strb	r1, [r0]
   15078:	ldr	r6, [r9]
   1507c:	cmp	r6, #0
   15080:	bne	14494 <__assert_fail@plt+0x2408>
   15084:	movw	r0, #62252	; 0xf32c
   15088:	movw	r5, #62468	; 0xf404
   1508c:	movt	r0, #3
   15090:	movt	r5, #3
   15094:	ldrb	r0, [r0]
   15098:	cmp	r0, #0
   1509c:	beq	15208 <__assert_fail@plt+0x317c>
   150a0:	movw	r6, #62456	; 0xf3f8
   150a4:	movt	r6, #3
   150a8:	ldrb	r0, [r6]
   150ac:	cmp	r0, #1
   150b0:	bne	15208 <__assert_fail@plt+0x317c>
   150b4:	movw	r4, #61896	; 0xf1c8
   150b8:	movt	r4, #3
   150bc:	ldr	r1, [r4]
   150c0:	ldr	r0, [r4, #4]
   150c4:	cmp	r1, #2
   150c8:	bne	150e4 <__assert_fail@plt+0x3058>
   150cc:	ldrh	r2, [r0]
   150d0:	movw	r3, #23323	; 0x5b1b
   150d4:	cmp	r2, r3
   150d8:	ldreq	r2, [r4, #8]
   150dc:	cmpeq	r2, #1
   150e0:	beq	152a0 <__assert_fail@plt+0x3214>
   150e4:	movw	r8, #62220	; 0xf30c
   150e8:	mov	r2, #1
   150ec:	mov	r7, #1
   150f0:	movt	r8, #3
   150f4:	ldr	r3, [r8]
   150f8:	bl	11c90 <fwrite_unlocked@plt>
   150fc:	ldrb	r0, [r6]
   15100:	cmp	r0, #0
   15104:	bne	15194 <__assert_fail@plt+0x3108>
   15108:	mov	r0, #1
   1510c:	strb	r7, [r6]
   15110:	bl	11ea0 <tcgetpgrp@plt>
   15114:	cmp	r0, #0
   15118:	movge	r0, #1
   1511c:	blge	18e14 <__assert_fail@plt+0x6d88>
   15120:	ldr	r0, [r4, #20]
   15124:	cmp	r0, #0
   15128:	beq	1517c <__assert_fail@plt+0x30f0>
   1512c:	add	r0, r4, #16
   15130:	b	15190 <__assert_fail@plt+0x3104>
   15134:	movw	r1, #48056	; 0xbbb8
   15138:	mov	r2, #2
   1513c:	movt	r1, #2
   15140:	bl	1202c <strncmp@plt>
   15144:	cmp	r0, #0
   15148:	bne	13edc <__assert_fail@plt+0x1e50>
   1514c:	ldr	r1, [r4, #112]	; 0x70
   15150:	cmp	r1, #0
   15154:	beq	152e0 <__assert_fail@plt+0x3254>
   15158:	ldr	r0, [r4, #116]	; 0x74
   1515c:	cmp	r1, #2
   15160:	beq	152b4 <__assert_fail@plt+0x3228>
   15164:	cmp	r1, #1
   15168:	bne	152cc <__assert_fail@plt+0x3240>
   1516c:	ldrb	r0, [r0]
   15170:	cmp	r0, #48	; 0x30
   15174:	bne	152cc <__assert_fail@plt+0x3240>
   15178:	b	152e0 <__assert_fail@plt+0x3254>
   1517c:	mov	r0, r4
   15180:	bl	18d70 <__assert_fail@plt+0x6ce4>
   15184:	add	r0, r4, #24
   15188:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1518c:	add	r0, r4, #8
   15190:	bl	18d70 <__assert_fail@plt+0x6ce4>
   15194:	ldr	r3, [r8]
   15198:	ldr	r1, [r4, #8]
   1519c:	ldr	r0, [r4, #12]
   151a0:	mov	r2, #1
   151a4:	bl	11c90 <fwrite_unlocked@plt>
   151a8:	movw	r7, #62232	; 0xf318
   151ac:	movt	r7, #3
   151b0:	mov	r8, r7
   151b4:	movw	r0, #62220	; 0xf30c
   151b8:	movt	r0, #3
   151bc:	ldr	r0, [r0]
   151c0:	bl	11d14 <fflush_unlocked@plt>
   151c4:	mov	r0, #0
   151c8:	bl	18e14 <__assert_fail@plt+0x6d88>
   151cc:	movw	r0, #62460	; 0xf3fc
   151d0:	movt	r0, #3
   151d4:	ldr	r4, [r0]
   151d8:	cmp	r4, #0
   151dc:	beq	151f0 <__assert_fail@plt+0x3164>
   151e0:	mov	r0, #19
   151e4:	bl	11bac <raise@plt>
   151e8:	subs	r4, r4, #1
   151ec:	bne	151e0 <__assert_fail@plt+0x3154>
   151f0:	movw	r0, #62464	; 0xf400
   151f4:	movt	r0, #3
   151f8:	ldr	r0, [r0]
   151fc:	cmp	r0, #0
   15200:	beq	15208 <__assert_fail@plt+0x317c>
   15204:	bl	11bac <raise@plt>
   15208:	movw	r0, #62344	; 0xf388
   1520c:	movt	r0, #3
   15210:	ldrb	r0, [r0]
   15214:	cmp	r0, #0
   15218:	beq	15268 <__assert_fail@plt+0x31dc>
   1521c:	movw	r0, #40664	; 0x9ed8
   15220:	movw	r1, #62348	; 0xf38c
   15224:	movt	r0, #2
   15228:	movt	r1, #3
   1522c:	bl	18724 <__assert_fail@plt+0x6698>
   15230:	movw	r0, #40674	; 0x9ee2
   15234:	movw	r1, #62392	; 0xf3b8
   15238:	movt	r0, #2
   1523c:	movt	r1, #3
   15240:	bl	18724 <__assert_fail@plt+0x6698>
   15244:	ldr	r0, [r5]
   15248:	bl	251ec <_obstack_memory_used@@Base+0x178>
   1524c:	movw	r1, #57164	; 0xdf4c
   15250:	movt	r1, #2
   15254:	ldr	r2, [r1, r0, lsl #2]
   15258:	movw	r1, #40687	; 0x9eef
   1525c:	mov	r0, #1
   15260:	movt	r1, #2
   15264:	bl	11f00 <__printf_chk@plt>
   15268:	movw	r0, #62284	; 0xf34c
   1526c:	movt	r0, #3
   15270:	ldr	r4, [r0]
   15274:	cmp	r4, #0
   15278:	beq	15294 <__assert_fail@plt+0x3208>
   1527c:	mov	r0, r4
   15280:	bl	20530 <__assert_fail@plt+0xe4a4>
   15284:	cmp	r0, #0
   15288:	bne	154c0 <__assert_fail@plt+0x3434>
   1528c:	mov	r0, r4
   15290:	bl	20ca0 <__assert_fail@plt+0xec14>
   15294:	ldr	r0, [r8]
   15298:	sub	sp, fp, #28
   1529c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152a0:	ldr	r2, [r4, #12]
   152a4:	ldrb	r2, [r2]
   152a8:	cmp	r2, #109	; 0x6d
   152ac:	bne	150e4 <__assert_fail@plt+0x3058>
   152b0:	b	151b4 <__assert_fail@plt+0x3128>
   152b4:	movw	r1, #48056	; 0xbbb8
   152b8:	mov	r2, #2
   152bc:	movt	r1, #2
   152c0:	bl	1202c <strncmp@plt>
   152c4:	cmp	r0, #0
   152c8:	beq	152e0 <__assert_fail@plt+0x3254>
   152cc:	movw	r0, #62262	; 0xf336
   152d0:	movt	r0, #3
   152d4:	ldrb	r0, [r0]
   152d8:	cmp	r0, #0
   152dc:	bne	13edc <__assert_fail@plt+0x1e50>
   152e0:	ldr	r1, [r4, #96]	; 0x60
   152e4:	cmp	r1, #0
   152e8:	beq	13f00 <__assert_fail@plt+0x1e74>
   152ec:	ldr	r2, [r4, #100]	; 0x64
   152f0:	cmp	r1, #2
   152f4:	beq	15314 <__assert_fail@plt+0x3288>
   152f8:	mov	r0, #1
   152fc:	cmp	r1, #1
   15300:	bne	15330 <__assert_fail@plt+0x32a4>
   15304:	ldrb	r1, [r2]
   15308:	cmp	r1, #48	; 0x30
   1530c:	bne	15330 <__assert_fail@plt+0x32a4>
   15310:	b	13f00 <__assert_fail@plt+0x1e74>
   15314:	movw	r1, #48056	; 0xbbb8
   15318:	mov	r0, r2
   1531c:	mov	r2, #2
   15320:	movt	r1, #2
   15324:	bl	1202c <strncmp@plt>
   15328:	cmp	r0, #0
   1532c:	movwne	r0, #1
   15330:	cmp	r0, #0
   15334:	beq	13f00 <__assert_fail@plt+0x1e74>
   15338:	movw	r0, #62264	; 0xf338
   1533c:	movt	r0, #3
   15340:	ldr	r0, [r0]
   15344:	cmp	r0, #0
   15348:	beq	13edc <__assert_fail@plt+0x1e50>
   1534c:	b	13f00 <__assert_fail@plt+0x1e74>
   15350:	mov	r1, #10
   15354:	bl	11f54 <__overflow@plt>
   15358:	ldr	r6, [r9]
   1535c:	cmp	r6, #0
   15360:	bne	14448 <__assert_fail@plt+0x23bc>
   15364:	b	15084 <__assert_fail@plt+0x2ff8>
   15368:	mov	r0, #2
   1536c:	bl	187f0 <__assert_fail@plt+0x6764>
   15370:	movw	r1, #62112	; 0xf2a0
   15374:	movw	r0, #62116	; 0xf2a4
   15378:	movw	r7, #48445	; 0xbd3d
   1537c:	movw	r6, #48425	; 0xbd29
   15380:	movt	r1, #3
   15384:	movt	r0, #3
   15388:	movt	r7, #2
   1538c:	movt	r6, #2
   15390:	ldr	r2, [r1]
   15394:	ldr	r3, [r0]
   15398:	movw	r0, #62220	; 0xf30c
   1539c:	mov	r1, #0
   153a0:	movt	r0, #3
   153a4:	ldr	r0, [r0]
   153a8:	stm	sp, {r6, r7}
   153ac:	movw	r7, #48051	; 0xbbb3
   153b0:	str	r1, [sp, #8]
   153b4:	movw	r1, #49069	; 0xbfad
   153b8:	movt	r1, #2
   153bc:	movt	r7, #2
   153c0:	cmp	r2, #2
   153c4:	moveq	r7, r1
   153c8:	movw	r1, #48422	; 0xbd26
   153cc:	cmp	r2, #1
   153d0:	movw	r2, #48411	; 0xbd1b
   153d4:	movt	r1, #2
   153d8:	movt	r2, #2
   153dc:	movne	r1, r7
   153e0:	bl	27c6c <_obstack_memory_used@@Base+0x2bf8>
   153e4:	mov	r0, #0
   153e8:	bl	11e88 <exit@plt>
   153ec:	mov	r0, #0
   153f0:	bl	187f0 <__assert_fail@plt+0x6764>
   153f4:	movw	r0, #48059	; 0xbbbb
   153f8:	movw	r1, #40629	; 0x9eb5
   153fc:	movw	r3, #48114	; 0xbbf2
   15400:	movw	r2, #1053	; 0x41d
   15404:	movt	r0, #2
   15408:	movt	r1, #2
   1540c:	movt	r3, #2
   15410:	bl	1208c <__assert_fail@plt>
   15414:	movw	r0, #40623	; 0x9eaf
   15418:	movw	r1, #40629	; 0x9eb5
   1541c:	movw	r3, #40638	; 0x9ebe
   15420:	movw	r2, #1805	; 0x70d
   15424:	movt	r0, #2
   15428:	movt	r1, #2
   1542c:	movt	r3, #2
   15430:	bl	1208c <__assert_fail@plt>
   15434:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   15438:	bl	12038 <abort@plt>
   1543c:	movw	r1, #62224	; 0xf310
   15440:	movw	r3, #50656	; 0xc5e0
   15444:	movt	r1, #3
   15448:	movt	r3, #2
   1544c:	ldr	r2, [r1]
   15450:	ldr	r1, [fp, #-36]	; 0xffffffdc
   15454:	str	r2, [sp]
   15458:	mov	r2, #0
   1545c:	bl	286a8 <_obstack_memory_used@@Base+0x3634>
   15460:	movw	r1, #48274	; 0xbc92
   15464:	mov	r0, #0
   15468:	mov	r2, #5
   1546c:	movt	r1, #2
   15470:	bl	11cb4 <dcgettext@plt>
   15474:	mov	r4, r0
   15478:	ldr	r0, [sl]
   1547c:	bl	26d20 <_obstack_memory_used@@Base+0x1cac>
   15480:	movw	r2, #48267	; 0xbc8b
   15484:	str	r0, [sp]
   15488:	mov	r0, #2
   1548c:	mov	r1, #0
   15490:	mov	r3, r4
   15494:	movt	r2, #2
   15498:	bl	11db0 <error@plt>
   1549c:	movw	r1, #48618	; 0xbdea
   154a0:	mov	r0, #0
   154a4:	mov	r2, #5
   154a8:	movt	r1, #2
   154ac:	bl	11cb4 <dcgettext@plt>
   154b0:	mov	r2, r0
   154b4:	mov	r0, #2
   154b8:	mov	r1, #0
   154bc:	bl	11db0 <error@plt>
   154c0:	movw	r0, #40725	; 0x9f15
   154c4:	movw	r1, #40629	; 0x9eb5
   154c8:	movw	r3, #40638	; 0x9ebe
   154cc:	movw	r2, #1857	; 0x741
   154d0:	movt	r0, #2
   154d4:	movt	r1, #2
   154d8:	movt	r3, #2
   154dc:	bl	1208c <__assert_fail@plt>
   154e0:	ldr	r1, [sp, #52]	; 0x34
   154e4:	movw	r0, #48694	; 0xbe36
   154e8:	movt	r0, #2
   154ec:	bl	1ebb8 <__assert_fail@plt+0xcb2c>
   154f0:	movw	r1, #48705	; 0xbe41
   154f4:	mov	r0, #0
   154f8:	mov	r2, #5
   154fc:	movt	r1, #2
   15500:	bl	11cb4 <dcgettext@plt>
   15504:	movw	r5, #62216	; 0xf308
   15508:	movt	r5, #3
   1550c:	ldr	r1, [r5]
   15510:	bl	11b94 <fputs_unlocked@plt>
   15514:	ldr	r0, [r5]
   15518:	movw	r4, #48727	; 0xbe57
   1551c:	movw	r3, #48348	; 0xbcdc
   15520:	mov	r1, #1
   15524:	movt	r4, #2
   15528:	movt	r3, #2
   1552c:	mov	r2, r4
   15530:	bl	11f24 <__fprintf_chk@plt>
   15534:	ldr	r0, [r5]
   15538:	movw	r3, #49459	; 0xc133
   1553c:	mov	r1, #1
   15540:	mov	r2, r4
   15544:	movt	r3, #2
   15548:	bl	11f24 <__fprintf_chk@plt>
   1554c:	ldr	r0, [r5]
   15550:	movw	r3, #49464	; 0xc138
   15554:	mov	r1, #1
   15558:	mov	r2, r4
   1555c:	movt	r3, #2
   15560:	bl	11f24 <__fprintf_chk@plt>
   15564:	ldr	r0, [r5]
   15568:	movw	r3, #40613	; 0x9ea5
   1556c:	mov	r1, #1
   15570:	mov	r2, r4
   15574:	movt	r3, #2
   15578:	bl	11f24 <__fprintf_chk@plt>
   1557c:	movw	r1, #48743	; 0xbe67
   15580:	mov	r0, #0
   15584:	mov	r2, #5
   15588:	movt	r1, #2
   1558c:	bl	11cb4 <dcgettext@plt>
   15590:	ldr	r1, [r5]
   15594:	bl	11b94 <fputs_unlocked@plt>
   15598:	mov	r0, #2
   1559c:	bl	187f0 <__assert_fail@plt+0x6764>
   155a0:	movw	r1, #48665	; 0xbe19
   155a4:	mov	r0, #0
   155a8:	mov	r2, #5
   155ac:	movt	r1, #2
   155b0:	bl	11cb4 <dcgettext@plt>
   155b4:	mov	r4, r0
   155b8:	mov	r0, r8
   155bc:	bl	26d20 <_obstack_memory_used@@Base+0x1cac>
   155c0:	mov	r3, r0
   155c4:	mov	r0, #2
   155c8:	mov	r1, #0
   155cc:	mov	r2, r4
   155d0:	bl	11db0 <error@plt>
   155d4:	push	{fp, lr}
   155d8:	mov	fp, sp
   155dc:	mov	r2, r1
   155e0:	ldrd	r0, [r0]
   155e4:	mov	r3, #0
   155e8:	bl	29c48 <_obstack_memory_used@@Base+0x4bd4>
   155ec:	mov	r0, r2
   155f0:	pop	{fp, pc}
   155f4:	push	{r4, r5, fp, lr}
   155f8:	add	fp, sp, #8
   155fc:	ldrd	r2, [r1]
   15600:	ldrd	r4, [r0]
   15604:	eor	r3, r5, r3
   15608:	eor	r2, r4, r2
   1560c:	orrs	r2, r2, r3
   15610:	mov	r2, #0
   15614:	bne	15634 <__assert_fail@plt+0x35a8>
   15618:	ldrd	r2, [r1, #8]
   1561c:	ldrd	r0, [r0, #8]
   15620:	eor	r1, r1, r3
   15624:	eor	r0, r0, r2
   15628:	orr	r0, r0, r1
   1562c:	clz	r0, r0
   15630:	lsr	r2, r0, #5
   15634:	mov	r0, r2
   15638:	pop	{r4, r5, fp, pc}
   1563c:	b	2046c <__assert_fail@plt+0xe3e0>
   15640:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15644:	add	fp, sp, #28
   15648:	sub	sp, sp, #724	; 0x2d4
   1564c:	movw	r8, #62452	; 0xf3f4
   15650:	movw	r4, #62444	; 0xf3ec
   15654:	mov	r6, r1
   15658:	str	r0, [fp, #-732]	; 0xfffffd24
   1565c:	str	r3, [fp, #-740]	; 0xfffffd1c
   15660:	str	r2, [fp, #-720]	; 0xfffffd30
   15664:	movt	r8, #3
   15668:	movt	r4, #3
   1566c:	ldr	r1, [r8]
   15670:	ldr	r0, [r4]
   15674:	cmp	r1, r0
   15678:	bne	156ac <__assert_fail@plt+0x3620>
   1567c:	movw	r5, #62448	; 0xf3f0
   15680:	mov	r2, #304	; 0x130
   15684:	movt	r5, #3
   15688:	ldr	r0, [r5]
   1568c:	bl	27e64 <_obstack_memory_used@@Base+0x2df0>
   15690:	mov	r7, r0
   15694:	str	r0, [r5]
   15698:	ldr	r0, [r4]
   1569c:	ldr	r1, [r8]
   156a0:	lsl	r0, r0, #1
   156a4:	str	r0, [r4]
   156a8:	b	156b8 <__assert_fail@plt+0x362c>
   156ac:	movw	r0, #62448	; 0xf3f0
   156b0:	movt	r0, #3
   156b4:	ldr	r7, [r0]
   156b8:	mov	r0, #152	; 0x98
   156bc:	str	r1, [fp, #-716]	; 0xfffffd34
   156c0:	mov	r2, #152	; 0x98
   156c4:	mla	r4, r1, r0, r7
   156c8:	mov	r1, #0
   156cc:	mov	r0, r4
   156d0:	bl	11ef4 <memset@plt>
   156d4:	mov	r0, r4
   156d8:	movw	r5, #481	; 0x1e1
   156dc:	str	r4, [fp, #-724]	; 0xfffffd2c
   156e0:	ldr	r8, [fp, #-732]	; 0xfffffd24
   156e4:	str	r6, [fp, #-736]	; 0xfffffd20
   156e8:	str	r6, [r0, #120]!	; 0x78
   156ec:	movt	r5, #4
   156f0:	str	r0, [fp, #-744]	; 0xfffffd18
   156f4:	mvn	r0, #0
   156f8:	str	r0, [r4, #144]!	; 0x90
   156fc:	ldrb	r0, [r5]
   15700:	cmp	r0, #0
   15704:	bne	15788 <__assert_fail@plt+0x36fc>
   15708:	movw	r0, #62921	; 0xf5c9
   1570c:	movt	r0, #3
   15710:	ldrb	r0, [r0]
   15714:	cmp	r0, #0
   15718:	beq	15788 <__assert_fail@plt+0x36fc>
   1571c:	movw	r0, #62468	; 0xf404
   15720:	movt	r0, #3
   15724:	ldr	r0, [r0]
   15728:	sub	sp, sp, #8
   1572c:	str	r0, [sp]
   15730:	sub	r0, fp, #688	; 0x2b0
   15734:	mov	r1, #2
   15738:	mov	r2, r8
   1573c:	mvn	r3, #0
   15740:	bl	252b0 <_obstack_memory_used@@Base+0x23c>
   15744:	add	sp, sp, #8
   15748:	mov	r6, r0
   1574c:	ldrb	r0, [r8]
   15750:	ldrb	r1, [fp, #-688]	; 0xfffffd50
   15754:	cmp	r0, r1
   15758:	bne	15778 <__assert_fail@plt+0x36ec>
   1575c:	mov	r0, r8
   15760:	bl	11eac <strlen@plt>
   15764:	subs	r0, r0, r6
   15768:	movwne	r0, #1
   1576c:	str	r0, [r4]
   15770:	bne	15780 <__assert_fail@plt+0x36f4>
   15774:	b	15788 <__assert_fail@plt+0x36fc>
   15778:	mov	r0, #1
   1577c:	str	r0, [r4]
   15780:	mov	r0, #1
   15784:	strb	r0, [r5]
   15788:	movw	r0, #62436	; 0xf3e4
   1578c:	str	r4, [fp, #-748]	; 0xfffffd14
   15790:	str	r7, [fp, #-728]	; 0xfffffd28
   15794:	movt	r0, #3
   15798:	ldrb	r9, [r0]
   1579c:	movw	r0, #62342	; 0xf386
   157a0:	movt	r0, #3
   157a4:	ldrb	r0, [r0]
   157a8:	orr	r0, r0, r9
   157ac:	tst	r0, #255	; 0xff
   157b0:	ldreq	r0, [fp, #-720]	; 0xfffffd30
   157b4:	cmpeq	r0, #0
   157b8:	beq	15904 <__assert_fail@plt+0x3878>
   157bc:	ldrb	r0, [r8]
   157c0:	ldr	r6, [fp, #-740]	; 0xfffffd1c
   157c4:	mov	sl, r8
   157c8:	cmp	r0, #47	; 0x2f
   157cc:	beq	15878 <__assert_fail@plt+0x37ec>
   157d0:	ldrb	r5, [r6]
   157d4:	mov	sl, r8
   157d8:	cmp	r5, #0
   157dc:	beq	15878 <__assert_fail@plt+0x37ec>
   157e0:	mov	r0, r8
   157e4:	bl	11eac <strlen@plt>
   157e8:	mov	r4, r0
   157ec:	mov	r0, r6
   157f0:	bl	11eac <strlen@plt>
   157f4:	add	r0, r4, r0
   157f8:	add	r0, r0, #9
   157fc:	bic	r0, r0, #7
   15800:	sub	sl, sp, r0
   15804:	mov	sp, sl
   15808:	cmp	r5, #46	; 0x2e
   1580c:	bne	15820 <__assert_fail@plt+0x3794>
   15810:	ldrb	r0, [r6, #1]
   15814:	cmp	r0, #0
   15818:	mov	r0, sl
   1581c:	beq	15850 <__assert_fail@plt+0x37c4>
   15820:	mov	r1, r6
   15824:	mov	r0, sl
   15828:	strb	r5, [r0], #1
   1582c:	ldrb	r5, [r1, #1]!
   15830:	cmp	r5, #0
   15834:	bne	15828 <__assert_fail@plt+0x379c>
   15838:	cmp	r1, r6
   1583c:	bls	15850 <__assert_fail@plt+0x37c4>
   15840:	ldrb	r1, [r1, #-1]
   15844:	cmp	r1, #47	; 0x2f
   15848:	movne	r1, #47	; 0x2f
   1584c:	strbne	r1, [r0], #1
   15850:	ldrb	r1, [r8]
   15854:	cmp	r1, #0
   15858:	beq	15870 <__assert_fail@plt+0x37e4>
   1585c:	add	r2, r8, #1
   15860:	strb	r1, [r0], #1
   15864:	ldrb	r1, [r2], #1
   15868:	cmp	r1, #0
   1586c:	bne	15860 <__assert_fail@plt+0x37d4>
   15870:	mov	r1, #0
   15874:	strb	r1, [r0]
   15878:	cmp	r9, #0
   1587c:	ldr	r9, [fp, #-728]	; 0xfffffd28
   15880:	ldr	r6, [fp, #-716]	; 0xfffffd34
   15884:	beq	15978 <__assert_fail@plt+0x38ec>
   15888:	mov	r0, #152	; 0x98
   1588c:	mov	r1, #2
   15890:	mla	r5, r6, r0, r9
   15894:	mov	r0, sl
   15898:	bl	1f3f0 <__assert_fail@plt+0xd364>
   1589c:	cmp	r0, #0
   158a0:	str	r0, [r5, #8]
   158a4:	bne	15978 <__assert_fail@plt+0x38ec>
   158a8:	movw	r1, #49752	; 0xc258
   158ac:	mov	r0, #0
   158b0:	mov	r2, #5
   158b4:	movt	r1, #2
   158b8:	bl	11cb4 <dcgettext@plt>
   158bc:	mov	r7, r0
   158c0:	bl	11ed0 <__errno_location@plt>
   158c4:	ldr	r5, [r0]
   158c8:	mov	r0, #4
   158cc:	mov	r1, sl
   158d0:	bl	267f8 <_obstack_memory_used@@Base+0x1784>
   158d4:	mov	r3, r0
   158d8:	mov	r0, #0
   158dc:	mov	r1, r5
   158e0:	mov	r2, r7
   158e4:	bl	11db0 <error@plt>
   158e8:	ldr	r0, [fp, #-720]	; 0xfffffd30
   158ec:	cmp	r0, #0
   158f0:	beq	1595c <__assert_fail@plt+0x38d0>
   158f4:	movw	r0, #62232	; 0xf318
   158f8:	mov	r1, #2
   158fc:	movt	r0, #3
   15900:	b	15974 <__assert_fail@plt+0x38e8>
   15904:	movw	r0, #62252	; 0xf32c
   15908:	movt	r0, #3
   1590c:	ldrb	r4, [r0]
   15910:	ldr	r0, [fp, #-736]	; 0xfffffd20
   15914:	cmp	r0, #3
   15918:	bne	16750 <__assert_fail@plt+0x46c4>
   1591c:	cmp	r4, #0
   15920:	beq	16750 <__assert_fail@plt+0x46c4>
   15924:	movw	r5, #61896	; 0xf1c8
   15928:	movt	r5, #3
   1592c:	ldr	r1, [r5, #152]	; 0x98
   15930:	cmp	r1, #0
   15934:	beq	15e78 <__assert_fail@plt+0x3dec>
   15938:	ldr	r0, [r5, #156]	; 0x9c
   1593c:	cmp	r1, #2
   15940:	beq	15e60 <__assert_fail@plt+0x3dd4>
   15944:	cmp	r1, #1
   15948:	bne	157bc <__assert_fail@plt+0x3730>
   1594c:	ldrb	r0, [r0]
   15950:	cmp	r0, #48	; 0x30
   15954:	bne	157bc <__assert_fail@plt+0x3730>
   15958:	b	15e78 <__assert_fail@plt+0x3dec>
   1595c:	movw	r0, #62232	; 0xf318
   15960:	movt	r0, #3
   15964:	ldr	r1, [r0]
   15968:	cmp	r1, #0
   1596c:	bne	15978 <__assert_fail@plt+0x38ec>
   15970:	mov	r1, #1
   15974:	str	r1, [r0]
   15978:	ldr	r0, [fp, #-724]	; 0xfffffd2c
   1597c:	movw	r5, #62268	; 0xf33c
   15980:	movt	r5, #3
   15984:	add	r4, r0, #16
   15988:	ldr	r0, [r5]
   1598c:	sub	r1, r0, #2
   15990:	cmp	r1, #2
   15994:	bcs	159e4 <__assert_fail@plt+0x3958>
   15998:	ldr	r0, [fp, #-720]	; 0xfffffd30
   1599c:	cmp	r0, #0
   159a0:	beq	15a18 <__assert_fail@plt+0x398c>
   159a4:	mov	r0, sl
   159a8:	mov	r1, r4
   159ac:	bl	1afa4 <__assert_fail@plt+0x8f18>
   159b0:	ldr	r1, [r5]
   159b4:	mov	r7, #1
   159b8:	cmp	r1, #2
   159bc:	beq	159fc <__assert_fail@plt+0x3970>
   159c0:	cmn	r0, #1
   159c4:	ble	15a08 <__assert_fail@plt+0x397c>
   159c8:	mov	r1, #152	; 0x98
   159cc:	mla	r1, r6, r1, r9
   159d0:	ldr	r1, [r1, #32]
   159d4:	and	r1, r1, #61440	; 0xf000
   159d8:	cmp	r1, #16384	; 0x4000
   159dc:	beq	159fc <__assert_fail@plt+0x3970>
   159e0:	b	15a18 <__assert_fail@plt+0x398c>
   159e4:	cmp	r0, #4
   159e8:	bne	15a18 <__assert_fail@plt+0x398c>
   159ec:	mov	r0, sl
   159f0:	mov	r1, r4
   159f4:	bl	1afa4 <__assert_fail@plt+0x8f18>
   159f8:	mov	r7, #1
   159fc:	cmp	r0, #0
   15a00:	bne	15b10 <__assert_fail@plt+0x3a84>
   15a04:	b	15b8c <__assert_fail@plt+0x3b00>
   15a08:	bl	11ed0 <__errno_location@plt>
   15a0c:	ldr	r0, [r0]
   15a10:	cmp	r0, #2
   15a14:	bne	15b10 <__assert_fail@plt+0x3a84>
   15a18:	movw	r0, #62896	; 0xf5b0
   15a1c:	movt	r0, #3
   15a20:	ldrb	r1, [r0]
   15a24:	mov	r0, #2
   15a28:	cmp	r1, #0
   15a2c:	movw	r1, #62341	; 0xf385
   15a30:	movt	r1, #3
   15a34:	movwne	r0, #258	; 0x102
   15a38:	ldrb	r1, [r1]
   15a3c:	bfi	r0, r1, #10, #1
   15a40:	movw	r1, #62264	; 0xf338
   15a44:	movt	r1, #3
   15a48:	ldr	r1, [r1]
   15a4c:	cmp	r1, #0
   15a50:	bne	15ac0 <__assert_fail@plt+0x3a34>
   15a54:	movw	r1, #62868	; 0xf594
   15a58:	movt	r1, #3
   15a5c:	ldr	r1, [r1]
   15a60:	cmp	r1, #4
   15a64:	bcs	169e4 <__assert_fail@plt+0x4958>
   15a68:	movw	r2, #56604	; 0xdd1c
   15a6c:	movt	r2, #2
   15a70:	ldr	r1, [r2, r1, lsl #2]
   15a74:	orr	r0, r1, r0
   15a78:	movw	r1, #62872	; 0xf598
   15a7c:	movt	r1, #3
   15a80:	ldrb	r1, [r1]
   15a84:	cmp	r1, #1
   15a88:	bne	15aa0 <__assert_fail@plt+0x3a14>
   15a8c:	movw	r1, #62900	; 0xf5b4
   15a90:	movt	r1, #3
   15a94:	ldrb	r1, [r1]
   15a98:	cmp	r1, #1
   15a9c:	bne	15aa8 <__assert_fail@plt+0x3a1c>
   15aa0:	orr	r0, r0, #524	; 0x20c
   15aa4:	b	15aac <__assert_fail@plt+0x3a20>
   15aa8:	orr	r0, r0, #516	; 0x204
   15aac:	movw	r1, #62898	; 0xf5b2
   15ab0:	movt	r1, #3
   15ab4:	ldrb	r1, [r1]
   15ab8:	cmp	r1, #0
   15abc:	orreq	r0, r0, #16
   15ac0:	movw	r1, #62336	; 0xf380
   15ac4:	movt	r1, #3
   15ac8:	ldr	r1, [r1]
   15acc:	cmp	r1, #6
   15ad0:	bhi	169e4 <__assert_fail@plt+0x4958>
   15ad4:	mov	r2, #1
   15ad8:	mov	r3, #87	; 0x57
   15adc:	tst	r3, r2, lsl r1
   15ae0:	beq	15c48 <__assert_fail@plt+0x3bbc>
   15ae4:	sub	sp, sp, #8
   15ae8:	str	r0, [sp]
   15aec:	mvn	r0, #99	; 0x63
   15af0:	mov	r1, sl
   15af4:	mov	r2, r4
   15af8:	mov	r3, #256	; 0x100
   15afc:	bl	1a8fc <__assert_fail@plt+0x8870>
   15b00:	add	sp, sp, #8
   15b04:	mov	r7, #0
   15b08:	cmp	r0, #0
   15b0c:	beq	15b8c <__assert_fail@plt+0x3b00>
   15b10:	movw	r1, #49861	; 0xc2c5
   15b14:	mov	r0, #0
   15b18:	mov	r2, #5
   15b1c:	mov	r4, #0
   15b20:	movt	r1, #2
   15b24:	bl	11cb4 <dcgettext@plt>
   15b28:	mov	r5, r0
   15b2c:	bl	11ed0 <__errno_location@plt>
   15b30:	ldr	r7, [r0]
   15b34:	mov	r0, #4
   15b38:	mov	r1, sl
   15b3c:	bl	267f8 <_obstack_memory_used@@Base+0x1784>
   15b40:	mov	r3, r0
   15b44:	mov	r0, #0
   15b48:	mov	r1, r7
   15b4c:	mov	r2, r5
   15b50:	bl	11db0 <error@plt>
   15b54:	ldr	r0, [fp, #-720]	; 0xfffffd30
   15b58:	cmp	r0, #0
   15b5c:	beq	15c04 <__assert_fail@plt+0x3b78>
   15b60:	movw	r0, #62232	; 0xf318
   15b64:	mov	r1, #2
   15b68:	mov	r5, #0
   15b6c:	movt	r0, #3
   15b70:	str	r1, [r0]
   15b74:	mov	r0, #152	; 0x98
   15b78:	movw	r1, #62105	; 0xf299
   15b7c:	mla	r0, r6, r0, r9
   15b80:	movt	r1, #3
   15b84:	str	r1, [r0, #128]	; 0x80
   15b88:	b	169d4 <__assert_fail@plt+0x4948>
   15b8c:	mov	r0, #152	; 0x98
   15b90:	mov	r1, #1
   15b94:	mla	r0, r6, r0, r9
   15b98:	strb	r1, [r0, #132]	; 0x84
   15b9c:	ldr	r1, [fp, #-736]	; 0xfffffd20
   15ba0:	cmp	r1, #5
   15ba4:	beq	15bb8 <__assert_fail@plt+0x3b2c>
   15ba8:	ldr	r0, [r0, #32]
   15bac:	and	r0, r0, #61440	; 0xf000
   15bb0:	cmp	r0, #32768	; 0x8000
   15bb4:	bne	15d54 <__assert_fail@plt+0x3cc8>
   15bb8:	movw	r0, #62252	; 0xf32c
   15bbc:	movt	r0, #3
   15bc0:	ldrb	r0, [r0]
   15bc4:	cmp	r0, #0
   15bc8:	beq	15d54 <__assert_fail@plt+0x3cc8>
   15bcc:	movw	r0, #61896	; 0xf1c8
   15bd0:	movt	r0, #3
   15bd4:	ldr	r1, [r0, #168]	; 0xa8
   15bd8:	cmp	r1, #0
   15bdc:	beq	15d54 <__assert_fail@plt+0x3cc8>
   15be0:	ldr	r0, [r0, #172]	; 0xac
   15be4:	cmp	r1, #2
   15be8:	beq	15c80 <__assert_fail@plt+0x3bf4>
   15bec:	cmp	r1, #1
   15bf0:	bne	15c98 <__assert_fail@plt+0x3c0c>
   15bf4:	ldrb	r0, [r0]
   15bf8:	cmp	r0, #48	; 0x30
   15bfc:	bne	15c98 <__assert_fail@plt+0x3c0c>
   15c00:	b	15d54 <__assert_fail@plt+0x3cc8>
   15c04:	movw	r0, #62232	; 0xf318
   15c08:	movt	r0, #3
   15c0c:	ldr	r1, [r0]
   15c10:	cmp	r1, #0
   15c14:	moveq	r1, #1
   15c18:	streq	r1, [r0]
   15c1c:	mov	r0, #152	; 0x98
   15c20:	movw	r1, #62105	; 0xf299
   15c24:	mla	r0, r6, r0, r9
   15c28:	movt	r1, #3
   15c2c:	str	r1, [r0, #128]	; 0x80
   15c30:	mov	r0, r8
   15c34:	bl	283c0 <_obstack_memory_used@@Base+0x334c>
   15c38:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   15c3c:	mov	r4, #0
   15c40:	mov	r5, #0
   15c44:	b	169b8 <__assert_fail@plt+0x492c>
   15c48:	cmp	r1, #3
   15c4c:	bne	15c58 <__assert_fail@plt+0x3bcc>
   15c50:	orr	r0, r0, #512	; 0x200
   15c54:	b	15ae4 <__assert_fail@plt+0x3a58>
   15c58:	movw	r1, #62868	; 0xf594
   15c5c:	movt	r1, #3
   15c60:	ldr	r1, [r1]
   15c64:	cmp	r1, #4
   15c68:	bcs	169e4 <__assert_fail@plt+0x4958>
   15c6c:	movw	r2, #56604	; 0xdd1c
   15c70:	movt	r2, #2
   15c74:	ldr	r1, [r2, r1, lsl #2]
   15c78:	orr	r0, r1, r0
   15c7c:	b	15ae4 <__assert_fail@plt+0x3a58>
   15c80:	movw	r1, #48056	; 0xbbb8
   15c84:	mov	r2, #2
   15c88:	movt	r1, #2
   15c8c:	bl	1202c <strncmp@plt>
   15c90:	cmp	r0, #0
   15c94:	beq	15d54 <__assert_fail@plt+0x3cc8>
   15c98:	mov	r0, #152	; 0x98
   15c9c:	movw	r8, #536	; 0x218
   15ca0:	mla	r6, r6, r0, r9
   15ca4:	movt	r8, #4
   15ca8:	ldr	r0, [r6, #16]!
   15cac:	ldrd	r2, [r8]
   15cb0:	ldr	r1, [r6, #4]
   15cb4:	eor	r0, r0, r2
   15cb8:	eor	r1, r1, r3
   15cbc:	orrs	r0, r0, r1
   15cc0:	bne	15cd8 <__assert_fail@plt+0x3c4c>
   15cc4:	bl	11ed0 <__errno_location@plt>
   15cc8:	mov	r1, #95	; 0x5f
   15ccc:	str	r1, [r0]
   15cd0:	mov	r0, #0
   15cd4:	b	15d40 <__assert_fail@plt+0x3cb4>
   15cd8:	mov	r0, sl
   15cdc:	bl	11f90 <cap_get_file@plt>
   15ce0:	cmp	r0, #0
   15ce4:	beq	15d20 <__assert_fail@plt+0x3c94>
   15ce8:	mov	r1, #0
   15cec:	mov	r5, r0
   15cf0:	bl	11ba0 <cap_to_text@plt>
   15cf4:	mov	r9, r0
   15cf8:	mov	r0, r5
   15cfc:	bl	11fd8 <cap_free@plt>
   15d00:	cmp	r9, #0
   15d04:	beq	15d20 <__assert_fail@plt+0x3c94>
   15d08:	ldrb	r5, [r9]
   15d0c:	mov	r0, r9
   15d10:	bl	11fd8 <cap_free@plt>
   15d14:	mov	r0, #1
   15d18:	cmp	r5, #0
   15d1c:	bne	15d40 <__assert_fail@plt+0x3cb4>
   15d20:	bl	11ed0 <__errno_location@plt>
   15d24:	ldr	r1, [r0]
   15d28:	mov	r0, #0
   15d2c:	cmp	r1, #22
   15d30:	cmpne	r1, #95	; 0x5f
   15d34:	bne	1672c <__assert_fail@plt+0x46a0>
   15d38:	ldrd	r2, [r6]
   15d3c:	strd	r2, [r8]
   15d40:	ldr	r9, [fp, #-728]	; 0xfffffd28
   15d44:	ldr	r6, [fp, #-716]	; 0xfffffd34
   15d48:	mov	r1, #152	; 0x98
   15d4c:	mla	r1, r6, r1, r9
   15d50:	strb	r0, [r1, #140]	; 0x8c
   15d54:	movw	r8, #62264	; 0xf338
   15d58:	movt	r8, #3
   15d5c:	ldr	r0, [r8]
   15d60:	cmp	r0, #0
   15d64:	beq	15d7c <__assert_fail@plt+0x3cf0>
   15d68:	movw	r0, #62340	; 0xf384
   15d6c:	movt	r0, #3
   15d70:	ldrb	r0, [r0]
   15d74:	cmp	r0, #1
   15d78:	bne	1602c <__assert_fail@plt+0x3fa0>
   15d7c:	mov	r0, #152	; 0x98
   15d80:	mla	r5, r6, r0, r9
   15d84:	movw	r9, #544	; 0x220
   15d88:	mov	r6, r5
   15d8c:	movt	r9, #4
   15d90:	ldr	r0, [r6, #16]!
   15d94:	ldrd	r2, [r9]
   15d98:	ldr	r1, [r6, #4]
   15d9c:	eor	r0, r0, r2
   15da0:	eor	r1, r1, r3
   15da4:	orrs	r0, r0, r1
   15da8:	bne	15dc0 <__assert_fail@plt+0x3d34>
   15dac:	bl	11ed0 <__errno_location@plt>
   15db0:	mov	r1, #95	; 0x5f
   15db4:	add	r5, r5, #128	; 0x80
   15db8:	str	r1, [r0]
   15dbc:	b	15e34 <__assert_fail@plt+0x3da8>
   15dc0:	add	r5, r5, #128	; 0x80
   15dc4:	mov	r0, sl
   15dc8:	cmp	r7, #0
   15dcc:	mov	r1, r5
   15dd0:	beq	15e08 <__assert_fail@plt+0x3d7c>
   15dd4:	bl	26fd4 <_obstack_memory_used@@Base+0x1f60>
   15dd8:	cmn	r0, #1
   15ddc:	ble	15e14 <__assert_fail@plt+0x3d88>
   15de0:	ldr	r1, [r5]
   15de4:	movw	r0, #49878	; 0xc2d6
   15de8:	movt	r0, #2
   15dec:	bl	11bd0 <strcmp@plt>
   15df0:	ldr	r9, [fp, #-728]	; 0xfffffd28
   15df4:	mov	r5, r0
   15df8:	cmp	r0, #0
   15dfc:	mov	r0, #0
   15e00:	movwne	r5, #1
   15e04:	b	15eb0 <__assert_fail@plt+0x3e24>
   15e08:	bl	27048 <_obstack_memory_used@@Base+0x1fd4>
   15e0c:	cmn	r0, #1
   15e10:	bgt	15de0 <__assert_fail@plt+0x3d54>
   15e14:	bl	11ed0 <__errno_location@plt>
   15e18:	ldr	r0, [r0]
   15e1c:	cmp	r0, #22
   15e20:	cmpne	r0, #95	; 0x5f
   15e24:	bne	16720 <__assert_fail@plt+0x4694>
   15e28:	ldrd	r0, [r6]
   15e2c:	strd	r0, [r9]
   15e30:	bl	11ed0 <__errno_location@plt>
   15e34:	movw	r1, #62105	; 0xf299
   15e38:	ldr	r9, [fp, #-728]	; 0xfffffd28
   15e3c:	movt	r1, #3
   15e40:	str	r1, [r5]
   15e44:	ldr	r0, [r0]
   15e48:	cmp	r0, #95	; 0x5f
   15e4c:	cmpne	r0, #61	; 0x3d
   15e50:	bne	15ea8 <__assert_fail@plt+0x3e1c>
   15e54:	mov	r5, #0
   15e58:	mov	r0, #0
   15e5c:	b	15eb0 <__assert_fail@plt+0x3e24>
   15e60:	movw	r1, #48056	; 0xbbb8
   15e64:	mov	r2, #2
   15e68:	movt	r1, #2
   15e6c:	bl	1202c <strncmp@plt>
   15e70:	cmp	r0, #0
   15e74:	bne	157bc <__assert_fail@plt+0x3730>
   15e78:	ldr	r1, [r5, #144]	; 0x90
   15e7c:	cmp	r1, #0
   15e80:	beq	15f40 <__assert_fail@plt+0x3eb4>
   15e84:	ldr	r0, [r5, #148]	; 0x94
   15e88:	cmp	r1, #2
   15e8c:	beq	15f28 <__assert_fail@plt+0x3e9c>
   15e90:	cmp	r1, #1
   15e94:	bne	157bc <__assert_fail@plt+0x3730>
   15e98:	ldrb	r0, [r0]
   15e9c:	cmp	r0, #48	; 0x30
   15ea0:	bne	157bc <__assert_fail@plt+0x3730>
   15ea4:	b	15f40 <__assert_fail@plt+0x3eb4>
   15ea8:	mov	r0, #1
   15eac:	mov	r5, #0
   15eb0:	ldr	r1, [r8]
   15eb4:	mov	r6, #0
   15eb8:	orrs	r1, r1, r0
   15ebc:	mov	r1, #0
   15ec0:	bne	15fa4 <__assert_fail@plt+0x3f18>
   15ec4:	movw	r0, #552	; 0x228
   15ec8:	ldrd	r2, [r4]
   15ecc:	movt	r0, #4
   15ed0:	ldrd	r0, [r0]
   15ed4:	eor	r1, r3, r1
   15ed8:	eor	r0, r2, r0
   15edc:	orr	r9, r0, r1
   15ee0:	bl	11ed0 <__errno_location@plt>
   15ee4:	mov	r7, r0
   15ee8:	cmp	r9, #0
   15eec:	bne	15f04 <__assert_fail@plt+0x3e78>
   15ef0:	ldr	r9, [fp, #-728]	; 0xfffffd28
   15ef4:	mov	r0, #95	; 0x5f
   15ef8:	str	r0, [r7]
   15efc:	mov	r0, #0
   15f00:	b	15f94 <__assert_fail@plt+0x3f08>
   15f04:	mov	r0, #0
   15f08:	mov	r1, r4
   15f0c:	str	r0, [r7]
   15f10:	mov	r0, sl
   15f14:	bl	1fcb4 <__assert_fail@plt+0xdc28>
   15f18:	cmp	r0, #0
   15f1c:	ble	15f70 <__assert_fail@plt+0x3ee4>
   15f20:	ldr	r9, [fp, #-728]	; 0xfffffd28
   15f24:	b	15f94 <__assert_fail@plt+0x3f08>
   15f28:	movw	r1, #48056	; 0xbbb8
   15f2c:	mov	r2, #2
   15f30:	movt	r1, #2
   15f34:	bl	1202c <strncmp@plt>
   15f38:	cmp	r0, #0
   15f3c:	bne	157bc <__assert_fail@plt+0x3730>
   15f40:	ldr	r1, [r5, #160]	; 0xa0
   15f44:	cmp	r1, #0
   15f48:	beq	16750 <__assert_fail@plt+0x46c4>
   15f4c:	ldr	r0, [r5, #164]	; 0xa4
   15f50:	cmp	r1, #2
   15f54:	beq	16738 <__assert_fail@plt+0x46ac>
   15f58:	cmp	r1, #1
   15f5c:	bne	157bc <__assert_fail@plt+0x3730>
   15f60:	ldrb	r0, [r0]
   15f64:	cmp	r0, #48	; 0x30
   15f68:	bne	157bc <__assert_fail@plt+0x3730>
   15f6c:	b	16750 <__assert_fail@plt+0x46c4>
   15f70:	ldr	r1, [r7]
   15f74:	ldr	r9, [fp, #-728]	; 0xfffffd28
   15f78:	cmp	r1, #22
   15f7c:	cmpne	r1, #95	; 0x5f
   15f80:	bne	1685c <__assert_fail@plt+0x47d0>
   15f84:	ldrd	r2, [r4]
   15f88:	movw	r1, #552	; 0x228
   15f8c:	movt	r1, #4
   15f90:	strd	r2, [r1]
   15f94:	cmp	r0, #0
   15f98:	mov	r1, #0
   15f9c:	lsr	r0, r0, #31
   15fa0:	movwgt	r1, #1
   15fa4:	orr	r2, r5, r1
   15fa8:	cmp	r2, #1
   15fac:	bne	15fc4 <__assert_fail@plt+0x3f38>
   15fb0:	mov	r6, #1
   15fb4:	cmp	r1, #0
   15fb8:	movwne	r6, #2
   15fbc:	cmp	r5, #0
   15fc0:	moveq	r6, #2
   15fc4:	ldr	r3, [fp, #-716]	; 0xfffffd34
   15fc8:	mov	r1, #152	; 0x98
   15fcc:	cmp	r6, #0
   15fd0:	mla	r1, r3, r1, r9
   15fd4:	str	r6, [r1, #136]	; 0x88
   15fd8:	movw	r1, #488	; 0x1e8
   15fdc:	movwne	r6, #1
   15fe0:	cmp	r0, #0
   15fe4:	movt	r1, #4
   15fe8:	ldrb	r2, [r1]
   15fec:	orr	r2, r2, r6
   15ff0:	mov	r6, r3
   15ff4:	strb	r2, [r1]
   15ff8:	beq	1602c <__assert_fail@plt+0x3fa0>
   15ffc:	bl	11ed0 <__errno_location@plt>
   16000:	ldr	r5, [r0]
   16004:	mov	r0, #0
   16008:	mov	r1, #3
   1600c:	mov	r2, sl
   16010:	bl	26a74 <_obstack_memory_used@@Base+0x1a00>
   16014:	movw	r2, #56722	; 0xdd92
   16018:	mov	r3, r0
   1601c:	mov	r0, #0
   16020:	mov	r1, r5
   16024:	movt	r2, #2
   16028:	bl	11db0 <error@plt>
   1602c:	mov	r0, #152	; 0x98
   16030:	mla	r6, r6, r0, r9
   16034:	ldr	r0, [r6, #32]!
   16038:	and	r1, r0, #61440	; 0xf000
   1603c:	cmp	r1, #40960	; 0xa000
   16040:	bne	1628c <__assert_fail@plt+0x4200>
   16044:	ldr	r1, [r8]
   16048:	cmp	r1, #0
   1604c:	beq	16064 <__assert_fail@plt+0x3fd8>
   16050:	movw	r1, #62261	; 0xf335
   16054:	movt	r1, #3
   16058:	ldrb	r1, [r1]
   1605c:	cmp	r1, #1
   16060:	bne	1628c <__assert_fail@plt+0x4200>
   16064:	ldr	r1, [fp, #-716]	; 0xfffffd34
   16068:	mov	r0, #152	; 0x98
   1606c:	mla	r5, r1, r0, r9
   16070:	mov	r0, sl
   16074:	ldr	r1, [r5, #64]	; 0x40
   16078:	bl	1e928 <__assert_fail@plt+0xc89c>
   1607c:	mov	r7, r0
   16080:	add	r9, r5, #4
   16084:	cmp	r0, #0
   16088:	str	r0, [r5, #4]
   1608c:	bne	16110 <__assert_fail@plt+0x4084>
   16090:	movw	r1, #49888	; 0xc2e0
   16094:	mov	r0, #0
   16098:	mov	r2, #5
   1609c:	movt	r1, #2
   160a0:	bl	11cb4 <dcgettext@plt>
   160a4:	mov	r5, r0
   160a8:	bl	11ed0 <__errno_location@plt>
   160ac:	ldr	r7, [r0]
   160b0:	mov	r0, #4
   160b4:	mov	r1, sl
   160b8:	bl	267f8 <_obstack_memory_used@@Base+0x1784>
   160bc:	mov	r3, r0
   160c0:	mov	r0, #0
   160c4:	mov	r1, r7
   160c8:	mov	r2, r5
   160cc:	bl	11db0 <error@plt>
   160d0:	ldr	r1, [fp, #-720]	; 0xfffffd30
   160d4:	mov	r0, #2
   160d8:	cmp	r1, #0
   160dc:	bne	160f8 <__assert_fail@plt+0x406c>
   160e0:	movw	r0, #62232	; 0xf318
   160e4:	movt	r0, #3
   160e8:	ldr	r0, [r0]
   160ec:	cmp	r0, #0
   160f0:	bne	16104 <__assert_fail@plt+0x4078>
   160f4:	mov	r0, #1
   160f8:	movw	r1, #62232	; 0xf318
   160fc:	movt	r1, #3
   16100:	str	r0, [r1]
   16104:	ldr	r7, [r9]
   16108:	cmp	r7, #0
   1610c:	beq	16270 <__assert_fail@plt+0x41e4>
   16110:	ldrb	r0, [r7]
   16114:	cmp	r0, #47	; 0x2f
   16118:	beq	16174 <__assert_fail@plt+0x40e8>
   1611c:	mov	r0, sl
   16120:	bl	1fbd8 <__assert_fail@plt+0xdb4c>
   16124:	cmp	r0, #0
   16128:	beq	16174 <__assert_fail@plt+0x40e8>
   1612c:	mov	r5, r0
   16130:	mov	r0, r7
   16134:	bl	11eac <strlen@plt>
   16138:	add	r0, r5, r0
   1613c:	add	r0, r0, #2
   16140:	bl	27ea0 <_obstack_memory_used@@Base+0x2e2c>
   16144:	mov	r8, r0
   16148:	add	r0, sl, r5
   1614c:	mov	r1, sl
   16150:	ldrb	r0, [r0, #-1]
   16154:	cmp	r0, #47	; 0x2f
   16158:	mov	r0, r8
   1615c:	addne	r5, r5, #1
   16160:	mov	r2, r5
   16164:	bl	11f0c <stpncpy@plt>
   16168:	mov	r1, r7
   1616c:	bl	11ca8 <stpcpy@plt>
   16170:	b	16180 <__assert_fail@plt+0x40f4>
   16174:	mov	r0, r7
   16178:	bl	283c0 <_obstack_memory_used@@Base+0x334c>
   1617c:	mov	r8, r0
   16180:	ldr	r0, [fp, #-748]	; 0xfffffd14
   16184:	ldr	r0, [r0]
   16188:	cmp	r0, #0
   1618c:	bne	161f0 <__assert_fail@plt+0x4164>
   16190:	movw	r0, #62468	; 0xf404
   16194:	ldr	r4, [r9]
   16198:	movt	r0, #3
   1619c:	ldr	r0, [r0]
   161a0:	sub	sp, sp, #8
   161a4:	str	r0, [sp]
   161a8:	sub	r0, fp, #688	; 0x2b0
   161ac:	mov	r1, #2
   161b0:	mov	r2, r4
   161b4:	mvn	r3, #0
   161b8:	bl	252b0 <_obstack_memory_used@@Base+0x23c>
   161bc:	add	sp, sp, #8
   161c0:	mov	r5, r0
   161c4:	ldrb	r0, [r4]
   161c8:	ldrb	r1, [fp, #-688]	; 0xfffffd50
   161cc:	cmp	r0, r1
   161d0:	bne	161e4 <__assert_fail@plt+0x4158>
   161d4:	mov	r0, r4
   161d8:	bl	11eac <strlen@plt>
   161dc:	cmp	r0, r5
   161e0:	beq	161f0 <__assert_fail@plt+0x4164>
   161e4:	ldr	r1, [fp, #-748]	; 0xfffffd14
   161e8:	mvn	r0, #0
   161ec:	str	r0, [r1]
   161f0:	movw	r0, #62276	; 0xf344
   161f4:	movt	r0, #3
   161f8:	ldr	r0, [r0]
   161fc:	cmp	r0, #1
   16200:	bhi	16218 <__assert_fail@plt+0x418c>
   16204:	movw	r0, #62261	; 0xf335
   16208:	movt	r0, #3
   1620c:	ldrb	r0, [r0]
   16210:	cmp	r0, #1
   16214:	bne	16268 <__assert_fail@plt+0x41dc>
   16218:	sub	sp, sp, #8
   1621c:	mov	r0, #2
   16220:	sub	r2, fp, #688	; 0x2b0
   16224:	mov	r1, r8
   16228:	mov	r3, #0
   1622c:	str	r0, [sp]
   16230:	mvn	r0, #99	; 0x63
   16234:	bl	1a8fc <__assert_fail@plt+0x8870>
   16238:	add	sp, sp, #8
   1623c:	ldr	r9, [fp, #-728]	; 0xfffffd28
   16240:	cmp	r0, #0
   16244:	bne	16278 <__assert_fail@plt+0x41ec>
   16248:	ldr	r1, [fp, #-716]	; 0xfffffd34
   1624c:	mov	r0, #152	; 0x98
   16250:	mla	r0, r1, r0, r9
   16254:	mov	r1, #1
   16258:	strb	r1, [r0, #133]	; 0x85
   1625c:	ldr	r1, [fp, #-672]	; 0xfffffd60
   16260:	str	r1, [r0, #124]	; 0x7c
   16264:	b	16278 <__assert_fail@plt+0x41ec>
   16268:	ldr	r9, [fp, #-728]	; 0xfffffd28
   1626c:	b	16278 <__assert_fail@plt+0x41ec>
   16270:	ldr	r9, [fp, #-728]	; 0xfffffd28
   16274:	mov	r8, #0
   16278:	mov	r0, r8
   1627c:	bl	2046c <__assert_fail@plt+0xe3e0>
   16280:	ldr	r0, [r6]
   16284:	movw	r8, #62264	; 0xf338
   16288:	movt	r8, #3
   1628c:	and	r0, r0, #61440	; 0xf000
   16290:	cmp	r0, #40960	; 0xa000
   16294:	beq	162cc <__assert_fail@plt+0x4240>
   16298:	ldr	r2, [fp, #-744]	; 0xfffffd18
   1629c:	cmp	r0, #16384	; 0x4000
   162a0:	bne	162d8 <__assert_fail@plt+0x424c>
   162a4:	ldr	r0, [fp, #-720]	; 0xfffffd30
   162a8:	cmp	r0, #0
   162ac:	beq	162e0 <__assert_fail@plt+0x4254>
   162b0:	movw	r0, #62272	; 0xf340
   162b4:	movt	r0, #3
   162b8:	ldrb	r1, [r0]
   162bc:	mov	r0, #9
   162c0:	cmp	r1, #1
   162c4:	moveq	r0, #3
   162c8:	b	162e4 <__assert_fail@plt+0x4258>
   162cc:	ldr	r2, [fp, #-744]	; 0xfffffd18
   162d0:	mov	r0, #6
   162d4:	b	162e4 <__assert_fail@plt+0x4258>
   162d8:	mov	r0, #5
   162dc:	b	162e4 <__assert_fail@plt+0x4258>
   162e0:	mov	r0, #3
   162e4:	ldr	r1, [fp, #-716]	; 0xfffffd34
   162e8:	str	r0, [r2]
   162ec:	mov	r0, #152	; 0x98
   162f0:	mla	r0, r1, r0, r9
   162f4:	ldrd	r4, [r0, #80]	; 0x50
   162f8:	ldr	r0, [r8]
   162fc:	cmp	r0, #0
   16300:	beq	16318 <__assert_fail@plt+0x428c>
   16304:	movw	r0, #62341	; 0xf385
   16308:	movt	r0, #3
   1630c:	ldrb	r0, [r0]
   16310:	cmp	r0, #1
   16314:	bne	16568 <__assert_fail@plt+0x44dc>
   16318:	movw	r0, #62876	; 0xf59c
   1631c:	movt	r0, #3
   16320:	ldr	r3, [r0]
   16324:	movw	r0, #62888	; 0xf5a8
   16328:	movt	r0, #3
   1632c:	ldrd	r0, [r0]
   16330:	sub	sp, sp, #16
   16334:	mov	r2, #0
   16338:	mov	r7, #512	; 0x200
   1633c:	str	r0, [sp, #8]
   16340:	str	r1, [sp, #12]
   16344:	mov	r0, r4
   16348:	mov	r1, r5
   1634c:	str	r2, [sp, #4]
   16350:	sub	r2, fp, #688	; 0x2b0
   16354:	str	r7, [sp]
   16358:	bl	21880 <__assert_fail@plt+0xf7f4>
   1635c:	add	sp, sp, #16
   16360:	mov	r1, #0
   16364:	bl	22ce8 <__assert_fail@plt+0x10c5c>
   16368:	movw	r1, #496	; 0x1f0
   1636c:	movt	r1, #4
   16370:	ldr	r2, [r1]
   16374:	cmp	r2, r0
   16378:	strlt	r0, [r1]
   1637c:	ldr	r0, [r8]
   16380:	cmp	r0, #0
   16384:	bne	16568 <__assert_fail@plt+0x44dc>
   16388:	movw	r0, #62872	; 0xf598
   1638c:	movt	r0, #3
   16390:	ldrb	r0, [r0]
   16394:	cmp	r0, #0
   16398:	bne	16428 <__assert_fail@plt+0x439c>
   1639c:	ldr	r1, [fp, #-716]	; 0xfffffd34
   163a0:	mov	r0, #152	; 0x98
   163a4:	mla	r0, r1, r0, r9
   163a8:	ldr	r7, [r0, #40]	; 0x28
   163ac:	movw	r0, #62897	; 0xf5b1
   163b0:	movt	r0, #3
   163b4:	ldrb	r0, [r0]
   163b8:	cmp	r0, #0
   163bc:	bne	163e0 <__assert_fail@plt+0x4354>
   163c0:	mov	r0, r7
   163c4:	bl	223a8 <__assert_fail@plt+0x1031c>
   163c8:	cmp	r0, #0
   163cc:	beq	163e0 <__assert_fail@plt+0x4354>
   163d0:	mov	r1, #0
   163d4:	bl	22ce8 <__assert_fail@plt+0x10c5c>
   163d8:	bic	r0, r0, r0, asr #31
   163dc:	b	16414 <__assert_fail@plt+0x4388>
   163e0:	sub	sp, sp, #16
   163e4:	mov	r0, #0
   163e8:	mov	r1, #0
   163ec:	mov	r2, #1
   163f0:	mvn	r3, #0
   163f4:	str	r7, [sp, #8]
   163f8:	str	r0, [sp, #12]
   163fc:	movw	r0, #49917	; 0xc2fd
   16400:	movt	r0, #2
   16404:	str	r0, [sp]
   16408:	mov	r0, #0
   1640c:	bl	12068 <__snprintf_chk@plt>
   16410:	add	sp, sp, #16
   16414:	movw	r1, #504	; 0x1f8
   16418:	movt	r1, #4
   1641c:	ldr	r2, [r1]
   16420:	cmp	r2, r0
   16424:	strlt	r0, [r1]
   16428:	movw	r0, #62898	; 0xf5b2
   1642c:	movt	r0, #3
   16430:	ldrb	r0, [r0]
   16434:	cmp	r0, #0
   16438:	bne	164c8 <__assert_fail@plt+0x443c>
   1643c:	ldr	r1, [fp, #-716]	; 0xfffffd34
   16440:	mov	r0, #152	; 0x98
   16444:	mla	r0, r1, r0, r9
   16448:	ldr	r7, [r0, #44]	; 0x2c
   1644c:	movw	r0, #62897	; 0xf5b1
   16450:	movt	r0, #3
   16454:	ldrb	r0, [r0]
   16458:	cmp	r0, #0
   1645c:	bne	16480 <__assert_fail@plt+0x43f4>
   16460:	mov	r0, r7
   16464:	bl	2254c <__assert_fail@plt+0x104c0>
   16468:	cmp	r0, #0
   1646c:	beq	16480 <__assert_fail@plt+0x43f4>
   16470:	mov	r1, #0
   16474:	bl	22ce8 <__assert_fail@plt+0x10c5c>
   16478:	bic	r0, r0, r0, asr #31
   1647c:	b	164b4 <__assert_fail@plt+0x4428>
   16480:	sub	sp, sp, #16
   16484:	mov	r0, #0
   16488:	mov	r1, #0
   1648c:	mov	r2, #1
   16490:	mvn	r3, #0
   16494:	str	r7, [sp, #8]
   16498:	str	r0, [sp, #12]
   1649c:	movw	r0, #49917	; 0xc2fd
   164a0:	movt	r0, #2
   164a4:	str	r0, [sp]
   164a8:	mov	r0, #0
   164ac:	bl	12068 <__snprintf_chk@plt>
   164b0:	add	sp, sp, #16
   164b4:	movw	r1, #508	; 0x1fc
   164b8:	movt	r1, #4
   164bc:	ldr	r2, [r1]
   164c0:	cmp	r2, r0
   164c4:	strlt	r0, [r1]
   164c8:	movw	r0, #62900	; 0xf5b4
   164cc:	movt	r0, #3
   164d0:	ldrb	r0, [r0]
   164d4:	cmp	r0, #1
   164d8:	bne	16568 <__assert_fail@plt+0x44dc>
   164dc:	ldr	r1, [fp, #-716]	; 0xfffffd34
   164e0:	mov	r0, #152	; 0x98
   164e4:	mla	r0, r1, r0, r9
   164e8:	ldr	r7, [r0, #40]	; 0x28
   164ec:	movw	r0, #62897	; 0xf5b1
   164f0:	movt	r0, #3
   164f4:	ldrb	r0, [r0]
   164f8:	cmp	r0, #0
   164fc:	bne	16520 <__assert_fail@plt+0x4494>
   16500:	mov	r0, r7
   16504:	bl	223a8 <__assert_fail@plt+0x1031c>
   16508:	cmp	r0, #0
   1650c:	beq	16520 <__assert_fail@plt+0x4494>
   16510:	mov	r1, #0
   16514:	bl	22ce8 <__assert_fail@plt+0x10c5c>
   16518:	bic	r0, r0, r0, asr #31
   1651c:	b	16554 <__assert_fail@plt+0x44c8>
   16520:	sub	sp, sp, #16
   16524:	mov	r0, #0
   16528:	mov	r1, #0
   1652c:	mov	r2, #1
   16530:	mvn	r3, #0
   16534:	str	r7, [sp, #8]
   16538:	str	r0, [sp, #12]
   1653c:	movw	r0, #49917	; 0xc2fd
   16540:	movt	r0, #2
   16544:	str	r0, [sp]
   16548:	mov	r0, #0
   1654c:	bl	12068 <__snprintf_chk@plt>
   16550:	add	sp, sp, #16
   16554:	movw	r1, #512	; 0x200
   16558:	movt	r1, #4
   1655c:	ldr	r2, [r1]
   16560:	cmp	r2, r0
   16564:	strlt	r0, [r1]
   16568:	movw	r0, #62340	; 0xf384
   1656c:	movt	r0, #3
   16570:	ldrb	r0, [r0]
   16574:	cmp	r0, #1
   16578:	bne	165a4 <__assert_fail@plt+0x4518>
   1657c:	ldr	r1, [fp, #-716]	; 0xfffffd34
   16580:	mov	r0, #152	; 0x98
   16584:	mla	r0, r1, r0, r9
   16588:	ldr	r0, [r0, #128]	; 0x80
   1658c:	bl	11eac <strlen@plt>
   16590:	movw	r1, #516	; 0x204
   16594:	movt	r1, #4
   16598:	ldr	r2, [r1]
   1659c:	cmp	r2, r0
   165a0:	strlt	r0, [r1]
   165a4:	ldr	r0, [r8]
   165a8:	cmp	r0, #0
   165ac:	beq	165bc <__assert_fail@plt+0x4530>
   165b0:	mov	r6, r4
   165b4:	ldr	r8, [fp, #-732]	; 0xfffffd24
   165b8:	b	16968 <__assert_fail@plt+0x48dc>
   165bc:	ldr	r1, [fp, #-716]	; 0xfffffd34
   165c0:	mov	r0, #152	; 0x98
   165c4:	sub	lr, fp, #512	; 0x200
   165c8:	sub	r2, lr, #197	; 0xc5
   165cc:	mla	r0, r1, r0, r9
   165d0:	mov	r1, #0
   165d4:	ldr	r0, [r0, #36]	; 0x24
   165d8:	bl	227b0 <__assert_fail@plt+0x10724>
   165dc:	bl	11eac <strlen@plt>
   165e0:	movw	r1, #500	; 0x1f4
   165e4:	movt	r1, #4
   165e8:	ldr	r2, [r1]
   165ec:	cmp	r2, r0
   165f0:	strlt	r0, [r1]
   165f4:	ldr	r0, [r6]
   165f8:	and	r0, r0, #45056	; 0xb000
   165fc:	orr	r0, r0, #16384	; 0x4000
   16600:	cmp	r0, #24576	; 0x6000
   16604:	bne	166b0 <__assert_fail@plt+0x4624>
   16608:	ldr	r1, [fp, #-716]	; 0xfffffd34
   1660c:	mov	r0, #152	; 0x98
   16610:	sub	r2, fp, #688	; 0x2b0
   16614:	mla	r6, r1, r0, r9
   16618:	ldr	r0, [r6, #48]!	; 0x30
   1661c:	ldr	r1, [r6, #4]
   16620:	lsr	r0, r0, #8
   16624:	lsr	r1, r1, #12
   16628:	bfi	r0, r1, #12, #20
   1662c:	mov	r1, #0
   16630:	bl	227b0 <__assert_fail@plt+0x10724>
   16634:	bl	11eac <strlen@plt>
   16638:	movw	r7, #520	; 0x208
   1663c:	movt	r7, #4
   16640:	ldr	r1, [r7]
   16644:	cmp	r1, r0
   16648:	mov	r1, #0
   1664c:	strlt	r0, [r7]
   16650:	ldrd	r2, [r6]
   16654:	lsr	r0, r2, #12
   16658:	orr	r0, r0, r3, lsl #20
   1665c:	bfi	r0, r2, #0, #8
   16660:	sub	r2, fp, #688	; 0x2b0
   16664:	bl	227b0 <__assert_fail@plt+0x10724>
   16668:	bl	11eac <strlen@plt>
   1666c:	movw	r2, #524	; 0x20c
   16670:	ldr	r8, [fp, #-732]	; 0xfffffd24
   16674:	mov	r6, r4
   16678:	movt	r2, #4
   1667c:	ldr	r1, [r2]
   16680:	cmp	r1, r0
   16684:	strlt	r0, [r2]
   16688:	movlt	r1, r0
   1668c:	ldr	r0, [r7]
   16690:	add	r0, r0, r1
   16694:	movw	r1, #528	; 0x210
   16698:	movt	r1, #4
   1669c:	add	r0, r0, #2
   166a0:	ldr	r2, [r1]
   166a4:	cmp	r2, r0
   166a8:	strlt	r0, [r1]
   166ac:	b	16968 <__assert_fail@plt+0x48dc>
   166b0:	ldr	r1, [fp, #-716]	; 0xfffffd34
   166b4:	movw	r2, #62880	; 0xf5a0
   166b8:	mov	r0, #152	; 0x98
   166bc:	mov	r6, r4
   166c0:	movt	r2, #3
   166c4:	ldr	r3, [r2]
   166c8:	movw	r2, #62088	; 0xf288
   166cc:	movt	r2, #3
   166d0:	mla	r0, r1, r0, r9
   166d4:	ldrd	r0, [r0, #64]	; 0x40
   166d8:	ldm	r2, {r2, r7}
   166dc:	sub	sp, sp, #16
   166e0:	mov	ip, #0
   166e4:	mov	r4, #1
   166e8:	stm	sp, {r4, ip}
   166ec:	str	r2, [sp, #8]
   166f0:	sub	r2, fp, #688	; 0x2b0
   166f4:	str	r7, [sp, #12]
   166f8:	bl	21880 <__assert_fail@plt+0xf7f4>
   166fc:	add	sp, sp, #16
   16700:	mov	r1, #0
   16704:	bl	22ce8 <__assert_fail@plt+0x10c5c>
   16708:	movw	r1, #528	; 0x210
   1670c:	movt	r1, #4
   16710:	ldr	r2, [r1]
   16714:	cmp	r2, r0
   16718:	strlt	r0, [r1]
   1671c:	b	165b4 <__assert_fail@plt+0x4528>
   16720:	cmp	r0, #38	; 0x26
   16724:	beq	15e28 <__assert_fail@plt+0x3d9c>
   16728:	b	15e30 <__assert_fail@plt+0x3da4>
   1672c:	cmp	r1, #38	; 0x26
   16730:	beq	15d38 <__assert_fail@plt+0x3cac>
   16734:	b	15d40 <__assert_fail@plt+0x3cb4>
   16738:	movw	r1, #48056	; 0xbbb8
   1673c:	mov	r2, #2
   16740:	movt	r1, #2
   16744:	bl	1202c <strncmp@plt>
   16748:	cmp	r0, #0
   1674c:	bne	157bc <__assert_fail@plt+0x3730>
   16750:	movw	r0, #62343	; 0xf387
   16754:	movw	r1, #62896	; 0xf5b0
   16758:	movt	r0, #3
   1675c:	movt	r1, #3
   16760:	ldrb	r0, [r0]
   16764:	ldrb	r1, [r1]
   16768:	cmp	r0, #0
   1676c:	cmpeq	r1, #0
   16770:	beq	167cc <__assert_fail@plt+0x4740>
   16774:	ldr	r2, [fp, #-736]	; 0xfffffd20
   16778:	cmp	r2, #6
   1677c:	ldrne	r2, [fp, #-736]	; 0xfffffd20
   16780:	cmpne	r2, #0
   16784:	bne	167cc <__assert_fail@plt+0x4740>
   16788:	movw	r2, #62268	; 0xf33c
   1678c:	movt	r2, #3
   16790:	ldr	r2, [r2]
   16794:	cmp	r2, #4
   16798:	beq	157bc <__assert_fail@plt+0x3730>
   1679c:	movw	r2, #62262	; 0xf336
   167a0:	movt	r2, #3
   167a4:	ldrb	r2, [r2]
   167a8:	cmp	r2, #0
   167ac:	bne	157bc <__assert_fail@plt+0x3730>
   167b0:	movw	r2, #62261	; 0xf335
   167b4:	movt	r2, #3
   167b8:	ldrb	r2, [r2]
   167bc:	orr	r1, r1, r2
   167c0:	tst	r1, #1
   167c4:	beq	167d4 <__assert_fail@plt+0x4748>
   167c8:	b	157bc <__assert_fail@plt+0x3730>
   167cc:	cmp	r1, #0
   167d0:	bne	157bc <__assert_fail@plt+0x3730>
   167d4:	cmp	r0, #0
   167d8:	beq	16960 <__assert_fail@plt+0x48d4>
   167dc:	ldr	r0, [fp, #-736]	; 0xfffffd20
   167e0:	cmp	r0, #0
   167e4:	beq	157bc <__assert_fail@plt+0x3730>
   167e8:	ldr	r0, [fp, #-720]	; 0xfffffd30
   167ec:	cmp	r0, #0
   167f0:	bne	157bc <__assert_fail@plt+0x3730>
   167f4:	ldr	r0, [fp, #-736]	; 0xfffffd20
   167f8:	mov	r6, #0
   167fc:	mov	r5, #0
   16800:	cmp	r0, #5
   16804:	bne	16968 <__assert_fail@plt+0x48dc>
   16808:	movw	r0, #62276	; 0xf344
   1680c:	movt	r0, #3
   16810:	ldr	r0, [r0]
   16814:	cmp	r0, #3
   16818:	beq	157bc <__assert_fail@plt+0x3730>
   1681c:	cmp	r4, #0
   16820:	beq	16960 <__assert_fail@plt+0x48d4>
   16824:	movw	r4, #61896	; 0xf1c8
   16828:	movt	r4, #3
   1682c:	ldr	r1, [r4, #112]	; 0x70
   16830:	cmp	r1, #0
   16834:	beq	16880 <__assert_fail@plt+0x47f4>
   16838:	ldr	r0, [r4, #116]	; 0x74
   1683c:	cmp	r1, #2
   16840:	beq	16868 <__assert_fail@plt+0x47dc>
   16844:	cmp	r1, #1
   16848:	bne	157bc <__assert_fail@plt+0x3730>
   1684c:	ldrb	r0, [r0]
   16850:	cmp	r0, #48	; 0x30
   16854:	bne	157bc <__assert_fail@plt+0x3730>
   16858:	b	16880 <__assert_fail@plt+0x47f4>
   1685c:	cmp	r1, #38	; 0x26
   16860:	beq	15f84 <__assert_fail@plt+0x3ef8>
   16864:	b	15f94 <__assert_fail@plt+0x3f08>
   16868:	movw	r1, #48056	; 0xbbb8
   1686c:	mov	r2, #2
   16870:	movt	r1, #2
   16874:	bl	1202c <strncmp@plt>
   16878:	cmp	r0, #0
   1687c:	bne	157bc <__assert_fail@plt+0x3730>
   16880:	ldr	r1, [r4, #128]	; 0x80
   16884:	cmp	r1, #0
   16888:	beq	168c8 <__assert_fail@plt+0x483c>
   1688c:	ldr	r0, [r4, #132]	; 0x84
   16890:	cmp	r1, #2
   16894:	beq	168b0 <__assert_fail@plt+0x4824>
   16898:	cmp	r1, #1
   1689c:	bne	157bc <__assert_fail@plt+0x3730>
   168a0:	ldrb	r0, [r0]
   168a4:	cmp	r0, #48	; 0x30
   168a8:	bne	157bc <__assert_fail@plt+0x3730>
   168ac:	b	168c8 <__assert_fail@plt+0x483c>
   168b0:	movw	r1, #48056	; 0xbbb8
   168b4:	mov	r2, #2
   168b8:	movt	r1, #2
   168bc:	bl	1202c <strncmp@plt>
   168c0:	cmp	r0, #0
   168c4:	bne	157bc <__assert_fail@plt+0x3730>
   168c8:	ldr	r1, [r4, #136]	; 0x88
   168cc:	cmp	r1, #0
   168d0:	beq	16910 <__assert_fail@plt+0x4884>
   168d4:	ldr	r0, [r4, #140]	; 0x8c
   168d8:	cmp	r1, #2
   168dc:	beq	168f8 <__assert_fail@plt+0x486c>
   168e0:	cmp	r1, #1
   168e4:	bne	157bc <__assert_fail@plt+0x3730>
   168e8:	ldrb	r0, [r0]
   168ec:	cmp	r0, #48	; 0x30
   168f0:	bne	157bc <__assert_fail@plt+0x3730>
   168f4:	b	16910 <__assert_fail@plt+0x4884>
   168f8:	movw	r1, #48056	; 0xbbb8
   168fc:	mov	r2, #2
   16900:	movt	r1, #2
   16904:	bl	1202c <strncmp@plt>
   16908:	cmp	r0, #0
   1690c:	bne	157bc <__assert_fail@plt+0x3730>
   16910:	ldr	r1, [r4, #168]	; 0xa8
   16914:	cmp	r1, #0
   16918:	beq	16960 <__assert_fail@plt+0x48d4>
   1691c:	ldr	r0, [r4, #172]	; 0xac
   16920:	cmp	r1, #2
   16924:	beq	16948 <__assert_fail@plt+0x48bc>
   16928:	cmp	r1, #1
   1692c:	bne	157bc <__assert_fail@plt+0x3730>
   16930:	ldrb	r0, [r0]
   16934:	mov	r6, #0
   16938:	mov	r5, #0
   1693c:	cmp	r0, #48	; 0x30
   16940:	bne	157bc <__assert_fail@plt+0x3730>
   16944:	b	16968 <__assert_fail@plt+0x48dc>
   16948:	movw	r1, #48056	; 0xbbb8
   1694c:	mov	r2, #2
   16950:	movt	r1, #2
   16954:	bl	1202c <strncmp@plt>
   16958:	cmp	r0, #0
   1695c:	bne	157bc <__assert_fail@plt+0x3730>
   16960:	mov	r6, #0
   16964:	mov	r5, #0
   16968:	movw	r0, #62896	; 0xf5b0
   1696c:	mov	r4, r6
   16970:	movt	r0, #3
   16974:	ldrb	r0, [r0]
   16978:	cmp	r0, #1
   1697c:	bne	169ac <__assert_fail@plt+0x4920>
   16980:	ldr	r0, [fp, #-724]	; 0xfffffd2c
   16984:	sub	r2, fp, #688	; 0x2b0
   16988:	add	r0, r0, #112	; 0x70
   1698c:	ldrd	r0, [r0]
   16990:	bl	227b0 <__assert_fail@plt+0x10724>
   16994:	bl	11eac <strlen@plt>
   16998:	movw	r1, #492	; 0x1ec
   1699c:	movt	r1, #4
   169a0:	ldr	r2, [r1]
   169a4:	cmp	r2, r0
   169a8:	strlt	r0, [r1]
   169ac:	mov	r0, r8
   169b0:	bl	283c0 <_obstack_memory_used@@Base+0x334c>
   169b4:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   169b8:	str	r0, [r1]
   169bc:	movw	r0, #62452	; 0xf3f4
   169c0:	movt	r0, #3
   169c4:	mov	r1, r0
   169c8:	ldr	r0, [r0]
   169cc:	add	r0, r0, #1
   169d0:	str	r0, [r1]
   169d4:	mov	r0, r4
   169d8:	mov	r1, r5
   169dc:	sub	sp, fp, #28
   169e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169e4:	bl	12038 <abort@plt>
   169e8:	nop	{0}
   169ec:	nop	{0}
   169f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169f4:	add	fp, sp, #28
   169f8:	sub	sp, sp, #28
   169fc:	sub	sp, sp, #8192	; 0x2000
   16a00:	movw	r0, #62452	; 0xf3f4
   16a04:	movw	r4, #560	; 0x230
   16a08:	movt	r0, #3
   16a0c:	movt	r4, #4
   16a10:	ldr	r0, [r0]
   16a14:	ldr	r1, [r4]
   16a18:	add	r2, r0, r0, lsr #1
   16a1c:	cmp	r1, r2
   16a20:	bcs	16a5c <__assert_fail@plt+0x49d0>
   16a24:	movw	r5, #484	; 0x1e4
   16a28:	movt	r5, #4
   16a2c:	ldr	r0, [r5]
   16a30:	bl	2046c <__assert_fail@plt+0xe3e0>
   16a34:	movw	r0, #62452	; 0xf3f4
   16a38:	mov	r1, #12
   16a3c:	movt	r0, #3
   16a40:	mov	r6, r0
   16a44:	ldr	r0, [r0]
   16a48:	bl	27f70 <_obstack_memory_used@@Base+0x2efc>
   16a4c:	str	r0, [r5]
   16a50:	ldr	r0, [r6]
   16a54:	add	r1, r0, r0, lsl #1
   16a58:	str	r1, [r4]
   16a5c:	cmp	r0, #0
   16a60:	beq	16ae8 <__assert_fail@plt+0x4a5c>
   16a64:	movw	r1, #484	; 0x1e4
   16a68:	mov	r7, #0
   16a6c:	cmp	r0, #4
   16a70:	movt	r1, #4
   16a74:	ldr	r6, [r1]
   16a78:	movw	r1, #62448	; 0xf3f0
   16a7c:	movt	r1, #3
   16a80:	ldr	r2, [r1]
   16a84:	bcc	16ac8 <__assert_fail@plt+0x4a3c>
   16a88:	add	r1, pc, #688	; 0x2b0
   16a8c:	bic	r7, r0, #3
   16a90:	vmov.i32	q9, #152	; 0x00000098
   16a94:	vdup.32	q10, r2
   16a98:	vmov.i32	q11, #4	; 0x00000004
   16a9c:	vld1.64	{d16-d17}, [r1 :128]
   16aa0:	mov	r3, r7
   16aa4:	mov	r1, r6
   16aa8:	vorr	q12, q10, q10
   16aac:	subs	r3, r3, #4
   16ab0:	vmla.i32	q12, q8, q9
   16ab4:	vadd.i32	q8, q8, q11
   16ab8:	vst1.32	{d24-d25}, [r1]!
   16abc:	bne	16aa8 <__assert_fail@plt+0x4a1c>
   16ac0:	cmp	r0, r7
   16ac4:	beq	16ae8 <__assert_fail@plt+0x4a5c>
   16ac8:	mov	r1, #152	; 0x98
   16acc:	sub	r3, r0, r7
   16ad0:	mla	r2, r7, r1, r2
   16ad4:	add	r1, r6, r7, lsl #2
   16ad8:	str	r2, [r1], #4
   16adc:	add	r2, r2, #152	; 0x98
   16ae0:	subs	r3, r3, #1
   16ae4:	bne	16ad8 <__assert_fail@plt+0x4a4c>
   16ae8:	movw	r4, #62336	; 0xf380
   16aec:	movt	r4, #3
   16af0:	ldr	r1, [r4]
   16af4:	cmp	r1, #2
   16af8:	bne	16b08 <__assert_fail@plt+0x4a7c>
   16afc:	cmp	r0, #0
   16b00:	bne	16b38 <__assert_fail@plt+0x4aac>
   16b04:	b	16be4 <__assert_fail@plt+0x4b58>
   16b08:	movw	r2, #62912	; 0xf5c0
   16b0c:	movt	r2, #3
   16b10:	ldr	r2, [r2]
   16b14:	cmp	r2, #0
   16b18:	cmpne	r0, #0
   16b1c:	beq	16bdc <__assert_fail@plt+0x4b50>
   16b20:	movw	r2, #62264	; 0xf338
   16b24:	movt	r2, #3
   16b28:	ldr	r2, [r2]
   16b2c:	orr	r2, r2, #1
   16b30:	cmp	r2, #3
   16b34:	bne	16bdc <__assert_fail@plt+0x4b50>
   16b38:	movw	r6, #484	; 0x1e4
   16b3c:	mov	r7, #0
   16b40:	add	r8, sp, #24
   16b44:	add	sl, sp, #16
   16b48:	add	r4, sp, #20
   16b4c:	movt	r6, #4
   16b50:	ldr	r1, [r6]
   16b54:	ldr	r9, [r1, r7, lsl #2]
   16b58:	ldr	r1, [r9, #148]	; 0x94
   16b5c:	cmp	r1, #0
   16b60:	bne	16bc0 <__assert_fail@plt+0x4b34>
   16b64:	movw	r0, #62468	; 0xf404
   16b68:	ldr	r5, [r9]
   16b6c:	ldr	r3, [r9, #144]	; 0x90
   16b70:	str	r8, [sp, #20]
   16b74:	str	sl, [sp]
   16b78:	movt	r0, #3
   16b7c:	ldr	r2, [r0]
   16b80:	add	r0, sp, #15
   16b84:	str	r0, [sp, #4]
   16b88:	mov	r0, r4
   16b8c:	mov	r1, r5
   16b90:	bl	1aa38 <__assert_fail@plt+0x89ac>
   16b94:	ldr	r0, [sp, #20]
   16b98:	cmp	r0, r8
   16b9c:	cmpne	r0, r5
   16ba0:	beq	16ba8 <__assert_fail@plt+0x4b1c>
   16ba4:	bl	2046c <__assert_fail@plt+0xe3e0>
   16ba8:	ldrb	r0, [sp, #15]
   16bac:	ldr	r1, [sp, #16]
   16bb0:	add	r1, r1, r0
   16bb4:	movw	r0, #62452	; 0xf3f4
   16bb8:	movt	r0, #3
   16bbc:	ldr	r0, [r0]
   16bc0:	add	r7, r7, #1
   16bc4:	str	r1, [r9, #148]	; 0x94
   16bc8:	cmp	r7, r0
   16bcc:	bcc	16b50 <__assert_fail@plt+0x4ac4>
   16bd0:	movw	r4, #62336	; 0xf380
   16bd4:	movt	r4, #3
   16bd8:	ldr	r1, [r4]
   16bdc:	cmp	r1, #6
   16be0:	beq	16d10 <__assert_fail@plt+0x4c84>
   16be4:	movw	r0, #568	; 0x238
   16be8:	movt	r0, #4
   16bec:	bl	11c18 <_setjmp@plt>
   16bf0:	cmp	r0, #0
   16bf4:	beq	16ca0 <__assert_fail@plt+0x4c14>
   16bf8:	ldr	r0, [r4]
   16bfc:	cmp	r0, #4
   16c00:	beq	16d18 <__assert_fail@plt+0x4c8c>
   16c04:	movw	r1, #62452	; 0xf3f4
   16c08:	mov	r2, #1
   16c0c:	movt	r1, #3
   16c10:	ldr	r1, [r1]
   16c14:	cmp	r1, #0
   16c18:	beq	16cb8 <__assert_fail@plt+0x4c2c>
   16c1c:	movw	r3, #484	; 0x1e4
   16c20:	mov	r7, #0
   16c24:	cmp	r1, #4
   16c28:	movt	r3, #4
   16c2c:	ldr	r4, [r3]
   16c30:	movw	r3, #62448	; 0xf3f0
   16c34:	movt	r3, #3
   16c38:	ldr	r6, [r3]
   16c3c:	bcc	16c80 <__assert_fail@plt+0x4bf4>
   16c40:	add	r3, pc, #248	; 0xf8
   16c44:	bic	r7, r1, #3
   16c48:	vmov.i32	q9, #152	; 0x00000098
   16c4c:	vdup.32	q10, r6
   16c50:	vmov.i32	q11, #4	; 0x00000004
   16c54:	vld1.64	{d16-d17}, [r3 :128]
   16c58:	mov	r5, r7
   16c5c:	mov	r3, r4
   16c60:	vorr	q12, q10, q10
   16c64:	subs	r5, r5, #4
   16c68:	vmla.i32	q12, q8, q9
   16c6c:	vadd.i32	q8, q8, q11
   16c70:	vst1.32	{d24-d25}, [r3]!
   16c74:	bne	16c60 <__assert_fail@plt+0x4bd4>
   16c78:	cmp	r1, r7
   16c7c:	beq	16cbc <__assert_fail@plt+0x4c30>
   16c80:	mov	r3, #152	; 0x98
   16c84:	mla	r3, r7, r3, r6
   16c88:	str	r3, [r4, r7, lsl #2]
   16c8c:	add	r7, r7, #1
   16c90:	add	r3, r3, #152	; 0x98
   16c94:	cmp	r1, r7
   16c98:	bne	16c88 <__assert_fail@plt+0x4bfc>
   16c9c:	b	16cbc <__assert_fail@plt+0x4c30>
   16ca0:	movw	r1, #62452	; 0xf3f4
   16ca4:	ldr	r0, [r4]
   16ca8:	mov	r2, #0
   16cac:	movt	r1, #3
   16cb0:	ldr	r1, [r1]
   16cb4:	b	16cbc <__assert_fail@plt+0x4c30>
   16cb8:	mov	r1, #0
   16cbc:	movw	r3, #62868	; 0xf594
   16cc0:	cmp	r0, #5
   16cc4:	movt	r3, #3
   16cc8:	ldr	r3, [r3]
   16ccc:	addeq	r0, r0, r3
   16cd0:	movw	r3, #56116	; 0xdb34
   16cd4:	movt	r3, #2
   16cd8:	add	r0, r3, r0, lsl #5
   16cdc:	add	r0, r0, r2, lsl #4
   16ce0:	movw	r2, #62899	; 0xf5b3
   16ce4:	movt	r2, #3
   16ce8:	ldrb	r2, [r2]
   16cec:	add	r0, r0, r2, lsl #3
   16cf0:	movw	r2, #62260	; 0xf334
   16cf4:	movt	r2, #3
   16cf8:	ldrb	r2, [r2]
   16cfc:	ldr	r2, [r0, r2, lsl #2]
   16d00:	movw	r0, #484	; 0x1e4
   16d04:	movt	r0, #4
   16d08:	ldr	r0, [r0]
   16d0c:	bl	230a4 <__assert_fail@plt+0x11018>
   16d10:	sub	sp, fp, #28
   16d14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d18:	movw	r0, #49922	; 0xc302
   16d1c:	movw	r1, #40629	; 0x9eb5
   16d20:	movw	r3, #49948	; 0xc31c
   16d24:	movw	r2, #4102	; 0x1006
   16d28:	movt	r0, #2
   16d2c:	movt	r1, #2
   16d30:	movt	r3, #2
   16d34:	bl	1208c <__assert_fail@plt>
   16d38:	nop	{0}
   16d3c:	nop	{0}
   16d40:	andeq	r0, r0, r0
   16d44:	andeq	r0, r0, r1
   16d48:	andeq	r0, r0, r2
   16d4c:	andeq	r0, r0, r3
   16d50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d54:	add	fp, sp, #28
   16d58:	sub	sp, sp, #12
   16d5c:	cmp	r0, #0
   16d60:	str	r0, [sp, #8]
   16d64:	str	r1, [sp, #4]
   16d68:	movwne	r0, #62284	; 0xf34c
   16d6c:	movtne	r0, #3
   16d70:	ldrne	r0, [r0]
   16d74:	cmpne	r0, #0
   16d78:	beq	16db4 <__assert_fail@plt+0x4d28>
   16d7c:	mov	r0, #16
   16d80:	bl	27ea0 <_obstack_memory_used@@Base+0x2e2c>
   16d84:	mov	r4, r0
   16d88:	ldr	r0, [sp, #8]
   16d8c:	bl	283c0 <_obstack_memory_used@@Base+0x334c>
   16d90:	mov	r1, #0
   16d94:	str	r1, [r4]
   16d98:	str	r0, [r4, #4]
   16d9c:	movw	r0, #62240	; 0xf320
   16da0:	strb	r1, [r4, #8]
   16da4:	movt	r0, #3
   16da8:	ldr	r1, [r0]
   16dac:	str	r4, [r0]
   16db0:	str	r1, [r4, #12]
   16db4:	movw	r7, #62452	; 0xf3f4
   16db8:	mov	sl, #0
   16dbc:	movt	r7, #3
   16dc0:	ldr	r0, [r7]
   16dc4:	cmp	r0, #0
   16dc8:	beq	16fac <__assert_fail@plt+0x4f20>
   16dcc:	rsb	r8, r0, #1
   16dd0:	movw	r0, #484	; 0x1e4
   16dd4:	movt	r0, #4
   16dd8:	ldr	r0, [r0]
   16ddc:	ldr	r9, [r0, -r8, lsl #2]
   16de0:	ldr	r0, [r9, #120]	; 0x78
   16de4:	cmp	r0, #9
   16de8:	cmpne	r0, #3
   16dec:	bne	16f58 <__assert_fail@plt+0x4ecc>
   16df0:	ldr	r0, [sp, #8]
   16df4:	ldr	r6, [r9]
   16df8:	cmp	r0, #0
   16dfc:	beq	16e40 <__assert_fail@plt+0x4db4>
   16e00:	mov	r0, r6
   16e04:	bl	1efc0 <__assert_fail@plt+0xcf34>
   16e08:	ldrb	r1, [r0]
   16e0c:	cmp	r1, #46	; 0x2e
   16e10:	bne	16e34 <__assert_fail@plt+0x4da8>
   16e14:	ldrb	r1, [r0, #1]
   16e18:	cmp	r1, #46	; 0x2e
   16e1c:	mov	r1, #1
   16e20:	movweq	r1, #2
   16e24:	ldrb	r0, [r0, r1]
   16e28:	cmp	r0, #0
   16e2c:	cmpne	r0, #47	; 0x2f
   16e30:	beq	16f58 <__assert_fail@plt+0x4ecc>
   16e34:	ldrb	r0, [r6]
   16e38:	cmp	r0, #47	; 0x2f
   16e3c:	bne	16ea8 <__assert_fail@plt+0x4e1c>
   16e40:	ldr	r5, [r9, #4]
   16e44:	mov	r0, #16
   16e48:	bl	27ea0 <_obstack_memory_used@@Base+0x2e2c>
   16e4c:	mov	r7, r0
   16e50:	mov	r4, #0
   16e54:	cmp	r5, #0
   16e58:	mov	r0, #0
   16e5c:	beq	16e68 <__assert_fail@plt+0x4ddc>
   16e60:	mov	r0, r5
   16e64:	bl	283c0 <_obstack_memory_used@@Base+0x334c>
   16e68:	cmp	r6, #0
   16e6c:	str	r0, [r7, #4]
   16e70:	beq	16e80 <__assert_fail@plt+0x4df4>
   16e74:	mov	r0, r6
   16e78:	bl	283c0 <_obstack_memory_used@@Base+0x334c>
   16e7c:	mov	r4, r0
   16e80:	ldr	r0, [sp, #4]
   16e84:	strb	r0, [r7, #8]
   16e88:	movw	r0, #62240	; 0xf320
   16e8c:	str	r4, [r7]
   16e90:	movt	r0, #3
   16e94:	mov	r1, r0
   16e98:	ldr	r0, [r0]
   16e9c:	str	r7, [r1]
   16ea0:	str	r0, [r7, #12]
   16ea4:	b	16f1c <__assert_fail@plt+0x4e90>
   16ea8:	ldr	r0, [sp, #8]
   16eac:	mov	r1, r6
   16eb0:	mov	r2, #0
   16eb4:	mov	r4, #0
   16eb8:	bl	1fee8 <__assert_fail@plt+0xde5c>
   16ebc:	ldr	r5, [r9, #4]
   16ec0:	mov	r6, r0
   16ec4:	mov	r0, #16
   16ec8:	bl	27ea0 <_obstack_memory_used@@Base+0x2e2c>
   16ecc:	mov	r7, r0
   16ed0:	cmp	r5, #0
   16ed4:	beq	16ee4 <__assert_fail@plt+0x4e58>
   16ed8:	mov	r0, r5
   16edc:	bl	283c0 <_obstack_memory_used@@Base+0x334c>
   16ee0:	mov	r4, r0
   16ee4:	mov	r0, r6
   16ee8:	str	r4, [r7, #4]
   16eec:	bl	283c0 <_obstack_memory_used@@Base+0x334c>
   16ef0:	str	r0, [r7]
   16ef4:	ldr	r0, [sp, #4]
   16ef8:	strb	r0, [r7, #8]
   16efc:	movw	r0, #62240	; 0xf320
   16f00:	movt	r0, #3
   16f04:	mov	r1, r0
   16f08:	ldr	r0, [r0]
   16f0c:	str	r7, [r1]
   16f10:	str	r0, [r7, #12]
   16f14:	mov	r0, r6
   16f18:	bl	2046c <__assert_fail@plt+0xe3e0>
   16f1c:	ldr	r0, [r9, #120]	; 0x78
   16f20:	cmp	r0, #9
   16f24:	bne	16f58 <__assert_fail@plt+0x4ecc>
   16f28:	ldr	r0, [r9]
   16f2c:	bl	2046c <__assert_fail@plt+0xe3e0>
   16f30:	ldr	r0, [r9, #4]
   16f34:	bl	2046c <__assert_fail@plt+0xe3e0>
   16f38:	ldr	r0, [r9, #8]
   16f3c:	bl	2046c <__assert_fail@plt+0xe3e0>
   16f40:	ldr	r0, [r9, #128]	; 0x80
   16f44:	movw	r1, #62105	; 0xf299
   16f48:	movt	r1, #3
   16f4c:	cmp	r0, r1
   16f50:	beq	16f58 <__assert_fail@plt+0x4ecc>
   16f54:	bl	11ff0 <freecon@plt>
   16f58:	add	r8, r8, #1
   16f5c:	cmp	r8, #1
   16f60:	bne	16dd0 <__assert_fail@plt+0x4d44>
   16f64:	movw	r7, #62452	; 0xf3f4
   16f68:	movt	r7, #3
   16f6c:	ldr	r0, [r7]
   16f70:	cmp	r0, #0
   16f74:	beq	16fac <__assert_fail@plt+0x4f20>
   16f78:	movw	r1, #484	; 0x1e4
   16f7c:	mov	r2, #0
   16f80:	mov	sl, #0
   16f84:	movt	r1, #4
   16f88:	ldr	r1, [r1]
   16f8c:	ldr	r3, [r1, r2, lsl #2]
   16f90:	add	r2, r2, #1
   16f94:	str	r3, [r1, sl, lsl #2]
   16f98:	ldr	r3, [r3, #120]	; 0x78
   16f9c:	cmp	r3, #9
   16fa0:	addne	sl, sl, #1
   16fa4:	cmp	r2, r0
   16fa8:	bcc	16f8c <__assert_fail@plt+0x4f00>
   16fac:	str	sl, [r7]
   16fb0:	sub	sp, fp, #28
   16fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fbc:	add	fp, sp, #28
   16fc0:	sub	sp, sp, #700	; 0x2bc
   16fc4:	sub	sp, sp, #4096	; 0x1000
   16fc8:	movw	r0, #62264	; 0xf338
   16fcc:	movt	r0, #3
   16fd0:	ldr	r0, [r0]
   16fd4:	cmp	r0, #4
   16fd8:	bhi	18558 <__assert_fail@plt+0x64cc>
   16fdc:	add	r1, pc, #0
   16fe0:	ldr	pc, [r1, r0, lsl #2]
   16fe4:	strdeq	r6, [r1], -r8
   16fe8:	andeq	r8, r1, ip, asr #3
   16fec:	andeq	r8, r1, r0, lsl #4
   16ff0:	andeq	r8, r1, r8, ror #4
   16ff4:	andeq	r8, r1, r4, asr #3
   16ff8:	movw	r0, #62452	; 0xf3f4
   16ffc:	movt	r0, #3
   17000:	ldr	r0, [r0]
   17004:	cmp	r0, #0
   17008:	beq	18558 <__assert_fail@plt+0x64cc>
   1700c:	sub	lr, fp, #1024	; 0x400
   17010:	movw	r7, #49498	; 0xc15a
   17014:	movw	r9, #62728	; 0xf508
   17018:	movw	r6, #62220	; 0xf30c
   1701c:	movw	r4, #61896	; 0xf1c8
   17020:	movw	r5, #62456	; 0xf3f8
   17024:	add	r8, sp, #88	; 0x58
   17028:	mov	sl, #0
   1702c:	sub	r0, lr, #69	; 0x45
   17030:	movt	r7, #2
   17034:	movt	r9, #3
   17038:	movt	r6, #3
   1703c:	movt	r4, #3
   17040:	movt	r5, #3
   17044:	add	r0, r0, #1
   17048:	str	r0, [sp, #16]
   1704c:	b	171f8 <__assert_fail@plt+0x516c>
   17050:	mov	r1, #47	; 0x2f
   17054:	cmp	r0, #3
   17058:	beq	1810c <__assert_fail@plt+0x6080>
   1705c:	cmp	r0, #5
   17060:	beq	18144 <__assert_fail@plt+0x60b8>
   17064:	cmp	r0, #9
   17068:	beq	1810c <__assert_fail@plt+0x6080>
   1706c:	cmp	r3, #1
   17070:	beq	18144 <__assert_fail@plt+0x60b8>
   17074:	cmp	r6, #0
   17078:	beq	171c0 <__assert_fail@plt+0x5134>
   1707c:	and	r0, r2, #61440	; 0xf000
   17080:	cmp	r0, #4096	; 0x1000
   17084:	beq	171d8 <__assert_fail@plt+0x514c>
   17088:	cmp	r0, #40960	; 0xa000
   1708c:	beq	171e0 <__assert_fail@plt+0x5154>
   17090:	cmp	r0, #49152	; 0xc000
   17094:	beq	171d0 <__assert_fail@plt+0x5144>
   17098:	b	18144 <__assert_fail@plt+0x60b8>
   1709c:	cmp	r1, #1
   170a0:	beq	18144 <__assert_fail@plt+0x60b8>
   170a4:	cmp	r0, #49152	; 0xc000
   170a8:	beq	171d0 <__assert_fail@plt+0x5144>
   170ac:	cmp	r0, #40960	; 0xa000
   170b0:	beq	171e0 <__assert_fail@plt+0x5154>
   170b4:	cmp	r0, #4096	; 0x1000
   170b8:	bne	18144 <__assert_fail@plt+0x60b8>
   170bc:	b	171d8 <__assert_fail@plt+0x514c>
   170c0:	mov	r0, r4
   170c4:	bl	18d70 <__assert_fail@plt+0x6ce4>
   170c8:	add	r0, r4, #24
   170cc:	bl	18d70 <__assert_fail@plt+0x6ce4>
   170d0:	add	r0, r4, #8
   170d4:	bl	18d70 <__assert_fail@plt+0x6ce4>
   170d8:	ldr	r3, [r6]
   170dc:	ldr	r1, [r4]
   170e0:	ldr	r0, [r4, #4]
   170e4:	mov	r2, #1
   170e8:	bl	11c90 <fwrite_unlocked@plt>
   170ec:	ldrb	r0, [r5]
   170f0:	cmp	r0, #0
   170f4:	bne	17140 <__assert_fail@plt+0x50b4>
   170f8:	mov	r0, #1
   170fc:	strb	r0, [r5]
   17100:	mov	r0, #1
   17104:	bl	11ea0 <tcgetpgrp@plt>
   17108:	cmp	r0, #0
   1710c:	movge	r0, #1
   17110:	blge	18e14 <__assert_fail@plt+0x6d88>
   17114:	ldr	r0, [r4, #20]
   17118:	cmp	r0, #0
   1711c:	beq	17128 <__assert_fail@plt+0x509c>
   17120:	add	r0, r4, #16
   17124:	b	1713c <__assert_fail@plt+0x50b0>
   17128:	mov	r0, r4
   1712c:	bl	18d70 <__assert_fail@plt+0x6ce4>
   17130:	add	r0, r4, #24
   17134:	bl	18d70 <__assert_fail@plt+0x6ce4>
   17138:	add	r0, r4, #8
   1713c:	bl	18d70 <__assert_fail@plt+0x6ce4>
   17140:	ldr	r3, [r6]
   17144:	ldr	r1, [r4, #32]
   17148:	ldr	r0, [r4, #36]	; 0x24
   1714c:	mov	r2, #1
   17150:	bl	11c90 <fwrite_unlocked@plt>
   17154:	ldrb	r0, [r5]
   17158:	cmp	r0, #0
   1715c:	bne	171a8 <__assert_fail@plt+0x511c>
   17160:	mov	r0, #1
   17164:	strb	r0, [r5]
   17168:	mov	r0, #1
   1716c:	bl	11ea0 <tcgetpgrp@plt>
   17170:	cmp	r0, #0
   17174:	movge	r0, #1
   17178:	blge	18e14 <__assert_fail@plt+0x6d88>
   1717c:	ldr	r0, [r4, #20]
   17180:	cmp	r0, #0
   17184:	beq	17190 <__assert_fail@plt+0x5104>
   17188:	add	r0, r4, #16
   1718c:	b	171a4 <__assert_fail@plt+0x5118>
   17190:	mov	r0, r4
   17194:	bl	18d70 <__assert_fail@plt+0x6ce4>
   17198:	add	r0, r4, #24
   1719c:	bl	18d70 <__assert_fail@plt+0x6ce4>
   171a0:	add	r0, r4, #8
   171a4:	bl	18d70 <__assert_fail@plt+0x6ce4>
   171a8:	ldr	r3, [r6]
   171ac:	ldr	r1, [r4, #8]
   171b0:	ldr	r0, [r4, #12]
   171b4:	mov	r2, #1
   171b8:	bl	11c90 <fwrite_unlocked@plt>
   171bc:	b	17214 <__assert_fail@plt+0x5188>
   171c0:	cmp	r0, #1
   171c4:	beq	171d8 <__assert_fail@plt+0x514c>
   171c8:	cmp	r0, #7
   171cc:	bne	18144 <__assert_fail@plt+0x60b8>
   171d0:	mov	r1, #61	; 0x3d
   171d4:	b	1810c <__assert_fail@plt+0x6080>
   171d8:	mov	r1, #124	; 0x7c
   171dc:	b	1810c <__assert_fail@plt+0x6080>
   171e0:	mov	r1, #64	; 0x40
   171e4:	b	1810c <__assert_fail@plt+0x6080>
   171e8:	bl	11f54 <__overflow@plt>
   171ec:	b	18194 <__assert_fail@plt+0x6108>
   171f0:	bl	11f54 <__overflow@plt>
   171f4:	b	18144 <__assert_fail@plt+0x60b8>
   171f8:	movw	r0, #62252	; 0xf32c
   171fc:	movt	r0, #3
   17200:	ldrb	r0, [r0]
   17204:	cmp	r0, #0
   17208:	ldrne	r1, [r4, #32]
   1720c:	cmpne	r1, #0
   17210:	bne	172bc <__assert_fail@plt+0x5230>
   17214:	movw	r0, #484	; 0x1e4
   17218:	str	sl, [sp, #24]
   1721c:	movt	r0, #4
   17220:	ldr	r0, [r0]
   17224:	ldr	r4, [r0, sl, lsl #2]
   17228:	ldrb	r0, [r4, #132]	; 0x84
   1722c:	cmp	r0, #0
   17230:	beq	1724c <__assert_fail@plt+0x51c0>
   17234:	sub	lr, fp, #1024	; 0x400
   17238:	add	r0, r4, #16
   1723c:	sub	r1, lr, #69	; 0x45
   17240:	bl	1fee0 <__assert_fail@plt+0xde54>
   17244:	mov	sl, #0
   17248:	b	17284 <__assert_fail@plt+0x51f8>
   1724c:	ldr	r0, [r4, #120]	; 0x78
   17250:	movw	r1, #49970	; 0xc332
   17254:	mov	sl, #0
   17258:	movt	r1, #2
   1725c:	ldrb	r0, [r1, r0]
   17260:	movw	r1, #16191	; 0x3f3f
   17264:	strb	r0, [fp, #-1093]	; 0xfffffbbb
   17268:	ldr	r0, [sp, #16]
   1726c:	strh	r1, [r0, #8]
   17270:	movw	r1, #16191	; 0x3f3f
   17274:	movt	r1, #16191	; 0x3f3f
   17278:	str	r1, [r0, #4]
   1727c:	str	r1, [r0]
   17280:	strb	sl, [fp, #-1082]	; 0xfffffbc6
   17284:	movw	r0, #488	; 0x1e8
   17288:	movt	r0, #4
   1728c:	ldrb	r0, [r0]
   17290:	cmp	r0, #0
   17294:	beq	172b4 <__assert_fail@plt+0x5228>
   17298:	ldr	r0, [r4, #136]	; 0x88
   1729c:	cmp	r0, #1
   172a0:	beq	172e0 <__assert_fail@plt+0x5254>
   172a4:	cmp	r0, #2
   172a8:	bne	172e8 <__assert_fail@plt+0x525c>
   172ac:	mov	r0, #43	; 0x2b
   172b0:	b	172e4 <__assert_fail@plt+0x5258>
   172b4:	mov	r0, #0
   172b8:	b	172e4 <__assert_fail@plt+0x5258>
   172bc:	ldr	r0, [r4, #36]	; 0x24
   172c0:	cmp	r1, #2
   172c4:	beq	17ac4 <__assert_fail@plt+0x5a38>
   172c8:	cmp	r1, #1
   172cc:	bne	17adc <__assert_fail@plt+0x5a50>
   172d0:	ldrb	r0, [r0]
   172d4:	cmp	r0, #48	; 0x30
   172d8:	beq	17214 <__assert_fail@plt+0x5188>
   172dc:	b	17adc <__assert_fail@plt+0x5a50>
   172e0:	mov	r0, #46	; 0x2e
   172e4:	strb	r0, [fp, #-1083]	; 0xfffffbc5
   172e8:	movw	r0, #62868	; 0xf594
   172ec:	movt	r0, #3
   172f0:	ldr	r0, [r0]
   172f4:	cmp	r0, #3
   172f8:	bhi	18720 <__assert_fail@plt+0x6694>
   172fc:	add	r1, pc, #4
   17300:	str	r4, [sp, #32]
   17304:	ldr	pc, [r1, r0, lsl #2]
   17308:	andeq	r7, r1, r8, lsl r3
   1730c:	andeq	r7, r1, ip, asr #6
   17310:	andeq	r7, r1, r0, lsr #6
   17314:	andeq	r7, r1, r8, lsr #6
   17318:	ldrd	r0, [r4, #96]	; 0x60
   1731c:	b	17350 <__assert_fail@plt+0x52c4>
   17320:	ldrd	r0, [r4, #88]	; 0x58
   17324:	b	17350 <__assert_fail@plt+0x52c4>
   17328:	ldrd	r0, [r4, #96]	; 0x60
   1732c:	str	r0, [sp, #80]	; 0x50
   17330:	and	r0, r1, r0
   17334:	str	r1, [sp, #84]	; 0x54
   17338:	add	r1, r0, #1
   1733c:	cmn	r0, #1
   17340:	movwne	r1, #1
   17344:	str	r1, [sp, #28]
   17348:	b	17360 <__assert_fail@plt+0x52d4>
   1734c:	ldrd	r0, [r4, #104]	; 0x68
   17350:	str	r0, [sp, #80]	; 0x50
   17354:	mov	r0, #1
   17358:	str	r1, [sp, #84]	; 0x54
   1735c:	str	r0, [sp, #28]
   17360:	movw	r0, #62896	; 0xf5b0
   17364:	mov	r5, r8
   17368:	movt	r0, #3
   1736c:	ldrb	r0, [r0]
   17370:	cmp	r0, #1
   17374:	bne	173e4 <__assert_fail@plt+0x5358>
   17378:	movw	r0, #492	; 0x1ec
   1737c:	movt	r0, #4
   17380:	ldr	r4, [r0]
   17384:	ldr	r0, [sp, #32]
   17388:	ldrb	r0, [r0, #132]	; 0x84
   1738c:	cmp	r0, #0
   17390:	mov	r0, r7
   17394:	beq	173c0 <__assert_fail@plt+0x5334>
   17398:	ldr	r0, [sp, #32]
   1739c:	ldr	r2, [r0, #112]	; 0x70
   173a0:	ldr	r1, [r0, #116]	; 0x74
   173a4:	orrs	r0, r2, r1
   173a8:	mov	r0, r7
   173ac:	beq	173c0 <__assert_fail@plt+0x5334>
   173b0:	sub	lr, fp, #1024	; 0x400
   173b4:	mov	r0, r2
   173b8:	sub	r2, lr, #57	; 0x39
   173bc:	bl	227b0 <__assert_fail@plt+0x10724>
   173c0:	movw	r3, #49994	; 0xc34a
   173c4:	str	r0, [sp, #4]
   173c8:	mov	r0, r8
   173cc:	mov	r1, #1
   173d0:	movw	r2, #3643	; 0xe3b
   173d4:	str	r4, [sp]
   173d8:	movt	r3, #2
   173dc:	bl	11edc <__sprintf_chk@plt>
   173e0:	add	r5, r8, r0
   173e4:	movw	r0, #62341	; 0xf385
   173e8:	movt	r0, #3
   173ec:	ldrb	r0, [r0]
   173f0:	cmp	r0, #1
   173f4:	bne	174dc <__assert_fail@plt+0x5450>
   173f8:	ldr	r1, [sp, #32]
   173fc:	mov	r6, r7
   17400:	ldrb	r0, [r1, #132]	; 0x84
   17404:	cmp	r0, #0
   17408:	beq	17450 <__assert_fail@plt+0x53c4>
   1740c:	movw	r2, #62876	; 0xf59c
   17410:	ldrd	r0, [r1, #80]	; 0x50
   17414:	mov	r6, #512	; 0x200
   17418:	sub	lr, fp, #1024	; 0x400
   1741c:	movt	r2, #3
   17420:	ldr	r3, [r2]
   17424:	movw	r2, #62888	; 0xf5a8
   17428:	movt	r2, #3
   1742c:	ldm	r2, {r2, r7}
   17430:	stm	sp, {r6, sl}
   17434:	str	r2, [sp, #8]
   17438:	str	r7, [sp, #12]
   1743c:	movw	r7, #49498	; 0xc15a
   17440:	sub	r2, lr, #57	; 0x39
   17444:	movt	r7, #2
   17448:	bl	21880 <__assert_fail@plt+0xf7f4>
   1744c:	mov	r6, r0
   17450:	movw	r0, #496	; 0x1f0
   17454:	mov	r1, #0
   17458:	movt	r0, #4
   1745c:	ldr	sl, [r0]
   17460:	mov	r0, r6
   17464:	bl	22ce8 <__assert_fail@plt+0x10c5c>
   17468:	cmp	sl, r0
   1746c:	ble	174b8 <__assert_fail@plt+0x542c>
   17470:	mov	r4, r0
   17474:	mvn	r1, sl
   17478:	add	r0, sl, #2
   1747c:	add	r7, r4, r1
   17480:	mvn	r1, #1
   17484:	sub	r0, r0, r4
   17488:	cmn	r7, #2
   1748c:	movle	r7, r1
   17490:	mov	r1, #32
   17494:	add	r2, r0, r7
   17498:	mov	r0, r5
   1749c:	bl	11ef4 <memset@plt>
   174a0:	add	r0, sl, r7
   174a4:	movw	r7, #49498	; 0xc15a
   174a8:	sub	r0, r0, r4
   174ac:	movt	r7, #2
   174b0:	add	r0, r5, r0
   174b4:	add	r5, r0, #2
   174b8:	mov	sl, #0
   174bc:	ldrb	r0, [r6], #1
   174c0:	strb	r0, [r5], #1
   174c4:	cmp	r0, #0
   174c8:	bne	174bc <__assert_fail@plt+0x5430>
   174cc:	movw	r6, #62220	; 0xf30c
   174d0:	mov	r0, #32
   174d4:	movt	r6, #3
   174d8:	strb	r0, [r5, #-1]
   174dc:	ldr	r1, [sp, #32]
   174e0:	movw	r0, #500	; 0x1f4
   174e4:	movt	r0, #4
   174e8:	ldr	r4, [r0]
   174ec:	ldrb	r0, [r1, #132]	; 0x84
   174f0:	cmp	r0, #0
   174f4:	mov	r0, r7
   174f8:	beq	17510 <__assert_fail@plt+0x5484>
   174fc:	ldr	r0, [r1, #36]	; 0x24
   17500:	sub	lr, fp, #1024	; 0x400
   17504:	mov	r1, #0
   17508:	sub	r2, lr, #57	; 0x39
   1750c:	bl	227b0 <__assert_fail@plt+0x10724>
   17510:	sub	lr, fp, #1024	; 0x400
   17514:	movw	r3, #49981	; 0xc33d
   17518:	mvn	r2, #0
   1751c:	sub	r1, lr, #69	; 0x45
   17520:	movt	r3, #2
   17524:	stm	sp, {r1, r4}
   17528:	str	r0, [sp, #8]
   1752c:	mov	r0, r5
   17530:	mov	r1, #1
   17534:	bl	11edc <__sprintf_chk@plt>
   17538:	mov	r4, r0
   1753c:	movw	r0, #62344	; 0xf388
   17540:	movt	r0, #3
   17544:	ldrb	r0, [r0]
   17548:	cmp	r0, #0
   1754c:	beq	17578 <__assert_fail@plt+0x54ec>
   17550:	ldrd	r0, [r9]
   17554:	ldr	r3, [r6]
   17558:	mov	r2, #2
   1755c:	adds	r0, r0, #2
   17560:	adc	r1, r1, #0
   17564:	strd	r0, [r9]
   17568:	movw	r0, #49824	; 0xc2a0
   1756c:	mov	r1, #1
   17570:	movt	r0, #2
   17574:	bl	11c90 <fwrite_unlocked@plt>
   17578:	movw	r0, #62872	; 0xf598
   1757c:	add	r5, r5, r4
   17580:	movt	r0, #3
   17584:	ldrb	r0, [r0]
   17588:	cmp	r0, #1
   1758c:	bne	175cc <__assert_fail@plt+0x5540>
   17590:	movw	r0, #62898	; 0xf5b2
   17594:	movt	r0, #3
   17598:	ldrb	r0, [r0]
   1759c:	cmp	r0, #1
   175a0:	bne	175cc <__assert_fail@plt+0x5540>
   175a4:	movw	r0, #62900	; 0xf5b4
   175a8:	movt	r0, #3
   175ac:	ldrb	r0, [r0]
   175b0:	cmp	r0, #0
   175b4:	bne	175cc <__assert_fail@plt+0x5540>
   175b8:	movw	r0, #62340	; 0xf384
   175bc:	movt	r0, #3
   175c0:	ldrb	r0, [r0]
   175c4:	cmp	r0, #1
   175c8:	bne	17b18 <__assert_fail@plt+0x5a8c>
   175cc:	ldrd	r0, [r9]
   175d0:	sub	r2, r5, r8
   175d4:	ldr	r3, [r6]
   175d8:	adds	r0, r0, r2
   175dc:	adc	r1, r1, #0
   175e0:	strd	r0, [r9]
   175e4:	mov	r0, r8
   175e8:	mov	r1, #1
   175ec:	bl	11c90 <fwrite_unlocked@plt>
   175f0:	movw	r0, #62872	; 0xf598
   175f4:	movt	r0, #3
   175f8:	ldrb	r0, [r0]
   175fc:	cmp	r0, #0
   17600:	bne	1772c <__assert_fail@plt+0x56a0>
   17604:	movw	r0, #504	; 0x1f8
   17608:	mov	r6, r7
   1760c:	movt	r0, #4
   17610:	ldr	r5, [r0]
   17614:	ldr	r0, [sp, #32]
   17618:	ldrb	r0, [r0, #132]	; 0x84
   1761c:	cmp	r0, #0
   17620:	beq	17654 <__assert_fail@plt+0x55c8>
   17624:	ldr	r0, [sp, #32]
   17628:	ldr	r4, [r0, #40]	; 0x28
   1762c:	movw	r0, #62897	; 0xf5b1
   17630:	movt	r0, #3
   17634:	ldrb	r0, [r0]
   17638:	cmp	r0, #0
   1763c:	bne	17704 <__assert_fail@plt+0x5678>
   17640:	mov	r0, r4
   17644:	bl	223a8 <__assert_fail@plt+0x1031c>
   17648:	mov	r6, r0
   1764c:	cmp	r0, #0
   17650:	beq	17704 <__assert_fail@plt+0x5678>
   17654:	mov	r0, r6
   17658:	mov	r1, #0
   1765c:	bl	22ce8 <__assert_fail@plt+0x10c5c>
   17660:	mov	r4, r0
   17664:	mov	r0, r6
   17668:	bl	11eac <strlen@plt>
   1766c:	mov	r2, r0
   17670:	ldrd	r0, [r9]
   17674:	adds	r0, r0, r2
   17678:	adc	r1, r1, #0
   1767c:	strd	r0, [r9]
   17680:	movw	r0, #62220	; 0xf30c
   17684:	movt	r0, #3
   17688:	ldr	r3, [r0]
   1768c:	mov	r1, r0
   17690:	mov	r0, r6
   17694:	mov	r6, r1
   17698:	mov	r1, #1
   1769c:	bl	11c90 <fwrite_unlocked@plt>
   176a0:	sub	r0, r5, r4
   176a4:	mvn	r4, #0
   176a8:	mov	r5, #32
   176ac:	cmp	r0, #0
   176b0:	mvngt	r4, r0
   176b4:	ldrd	r0, [r9]
   176b8:	adds	r0, r0, #1
   176bc:	adc	r1, r1, #0
   176c0:	strd	r0, [r9]
   176c4:	ldr	r0, [r6]
   176c8:	ldr	r1, [r0, #20]
   176cc:	ldr	r2, [r0, #24]
   176d0:	cmp	r1, r2
   176d4:	bcs	176f0 <__assert_fail@plt+0x5664>
   176d8:	add	r2, r1, #1
   176dc:	str	r2, [r0, #20]
   176e0:	strb	r5, [r1]
   176e4:	adds	r4, r4, #1
   176e8:	bne	176b4 <__assert_fail@plt+0x5628>
   176ec:	b	1772c <__assert_fail@plt+0x56a0>
   176f0:	mov	r1, #32
   176f4:	bl	11f54 <__overflow@plt>
   176f8:	adds	r4, r4, #1
   176fc:	bne	176b4 <__assert_fail@plt+0x5628>
   17700:	b	1772c <__assert_fail@plt+0x56a0>
   17704:	movw	r1, #50004	; 0xc354
   17708:	mov	r0, #1
   1770c:	mov	r2, r5
   17710:	stm	sp, {r4, sl}
   17714:	movt	r1, #2
   17718:	bl	11f00 <__printf_chk@plt>
   1771c:	ldrd	r2, [r9]
   17720:	adds	r2, r2, r0
   17724:	adc	r3, r3, r0, asr #31
   17728:	strd	r2, [r9]
   1772c:	movw	r0, #62898	; 0xf5b2
   17730:	movt	r0, #3
   17734:	ldrb	r0, [r0]
   17738:	cmp	r0, #0
   1773c:	bne	17868 <__assert_fail@plt+0x57dc>
   17740:	movw	r0, #508	; 0x1fc
   17744:	mov	r6, r7
   17748:	movt	r0, #4
   1774c:	ldr	r5, [r0]
   17750:	ldr	r0, [sp, #32]
   17754:	ldrb	r0, [r0, #132]	; 0x84
   17758:	cmp	r0, #0
   1775c:	beq	17790 <__assert_fail@plt+0x5704>
   17760:	ldr	r0, [sp, #32]
   17764:	ldr	r4, [r0, #44]	; 0x2c
   17768:	movw	r0, #62897	; 0xf5b1
   1776c:	movt	r0, #3
   17770:	ldrb	r0, [r0]
   17774:	cmp	r0, #0
   17778:	bne	17840 <__assert_fail@plt+0x57b4>
   1777c:	mov	r0, r4
   17780:	bl	2254c <__assert_fail@plt+0x104c0>
   17784:	mov	r6, r0
   17788:	cmp	r0, #0
   1778c:	beq	17840 <__assert_fail@plt+0x57b4>
   17790:	mov	r0, r6
   17794:	mov	r1, #0
   17798:	bl	22ce8 <__assert_fail@plt+0x10c5c>
   1779c:	mov	r4, r0
   177a0:	mov	r0, r6
   177a4:	bl	11eac <strlen@plt>
   177a8:	mov	r2, r0
   177ac:	ldrd	r0, [r9]
   177b0:	adds	r0, r0, r2
   177b4:	adc	r1, r1, #0
   177b8:	strd	r0, [r9]
   177bc:	movw	r0, #62220	; 0xf30c
   177c0:	movt	r0, #3
   177c4:	ldr	r3, [r0]
   177c8:	mov	r1, r0
   177cc:	mov	r0, r6
   177d0:	mov	r6, r1
   177d4:	mov	r1, #1
   177d8:	bl	11c90 <fwrite_unlocked@plt>
   177dc:	sub	r0, r5, r4
   177e0:	mvn	r4, #0
   177e4:	mov	r5, #32
   177e8:	cmp	r0, #0
   177ec:	mvngt	r4, r0
   177f0:	ldrd	r0, [r9]
   177f4:	adds	r0, r0, #1
   177f8:	adc	r1, r1, #0
   177fc:	strd	r0, [r9]
   17800:	ldr	r0, [r6]
   17804:	ldr	r1, [r0, #20]
   17808:	ldr	r2, [r0, #24]
   1780c:	cmp	r1, r2
   17810:	bcs	1782c <__assert_fail@plt+0x57a0>
   17814:	add	r2, r1, #1
   17818:	str	r2, [r0, #20]
   1781c:	strb	r5, [r1]
   17820:	adds	r4, r4, #1
   17824:	bne	177f0 <__assert_fail@plt+0x5764>
   17828:	b	17868 <__assert_fail@plt+0x57dc>
   1782c:	mov	r1, #32
   17830:	bl	11f54 <__overflow@plt>
   17834:	adds	r4, r4, #1
   17838:	bne	177f0 <__assert_fail@plt+0x5764>
   1783c:	b	17868 <__assert_fail@plt+0x57dc>
   17840:	movw	r1, #50004	; 0xc354
   17844:	mov	r0, #1
   17848:	mov	r2, r5
   1784c:	stm	sp, {r4, sl}
   17850:	movt	r1, #2
   17854:	bl	11f00 <__printf_chk@plt>
   17858:	ldrd	r2, [r9]
   1785c:	adds	r2, r2, r0
   17860:	adc	r3, r3, r0, asr #31
   17864:	strd	r2, [r9]
   17868:	movw	r0, #62900	; 0xf5b4
   1786c:	movt	r0, #3
   17870:	ldrb	r0, [r0]
   17874:	cmp	r0, #1
   17878:	bne	179a4 <__assert_fail@plt+0x5918>
   1787c:	movw	r0, #512	; 0x200
   17880:	mov	r6, r7
   17884:	movt	r0, #4
   17888:	ldr	r5, [r0]
   1788c:	ldr	r0, [sp, #32]
   17890:	ldrb	r0, [r0, #132]	; 0x84
   17894:	cmp	r0, #0
   17898:	beq	178cc <__assert_fail@plt+0x5840>
   1789c:	ldr	r0, [sp, #32]
   178a0:	ldr	r4, [r0, #40]	; 0x28
   178a4:	movw	r0, #62897	; 0xf5b1
   178a8:	movt	r0, #3
   178ac:	ldrb	r0, [r0]
   178b0:	cmp	r0, #0
   178b4:	bne	1797c <__assert_fail@plt+0x58f0>
   178b8:	mov	r0, r4
   178bc:	bl	223a8 <__assert_fail@plt+0x1031c>
   178c0:	mov	r6, r0
   178c4:	cmp	r0, #0
   178c8:	beq	1797c <__assert_fail@plt+0x58f0>
   178cc:	mov	r0, r6
   178d0:	mov	r1, #0
   178d4:	bl	22ce8 <__assert_fail@plt+0x10c5c>
   178d8:	mov	r4, r0
   178dc:	mov	r0, r6
   178e0:	bl	11eac <strlen@plt>
   178e4:	mov	r2, r0
   178e8:	ldrd	r0, [r9]
   178ec:	adds	r0, r0, r2
   178f0:	adc	r1, r1, #0
   178f4:	strd	r0, [r9]
   178f8:	movw	r0, #62220	; 0xf30c
   178fc:	movt	r0, #3
   17900:	ldr	r3, [r0]
   17904:	mov	r1, r0
   17908:	mov	r0, r6
   1790c:	mov	r6, r1
   17910:	mov	r1, #1
   17914:	bl	11c90 <fwrite_unlocked@plt>
   17918:	sub	r0, r5, r4
   1791c:	mvn	r4, #0
   17920:	mov	r5, #32
   17924:	cmp	r0, #0
   17928:	mvngt	r4, r0
   1792c:	ldrd	r0, [r9]
   17930:	adds	r0, r0, #1
   17934:	adc	r1, r1, #0
   17938:	strd	r0, [r9]
   1793c:	ldr	r0, [r6]
   17940:	ldr	r1, [r0, #20]
   17944:	ldr	r2, [r0, #24]
   17948:	cmp	r1, r2
   1794c:	bcs	17968 <__assert_fail@plt+0x58dc>
   17950:	add	r2, r1, #1
   17954:	str	r2, [r0, #20]
   17958:	strb	r5, [r1]
   1795c:	adds	r4, r4, #1
   17960:	bne	1792c <__assert_fail@plt+0x58a0>
   17964:	b	179a4 <__assert_fail@plt+0x5918>
   17968:	mov	r1, #32
   1796c:	bl	11f54 <__overflow@plt>
   17970:	adds	r4, r4, #1
   17974:	bne	1792c <__assert_fail@plt+0x58a0>
   17978:	b	179a4 <__assert_fail@plt+0x5918>
   1797c:	movw	r1, #50004	; 0xc354
   17980:	mov	r0, #1
   17984:	mov	r2, r5
   17988:	stm	sp, {r4, sl}
   1798c:	movt	r1, #2
   17990:	bl	11f00 <__printf_chk@plt>
   17994:	ldrd	r2, [r9]
   17998:	adds	r2, r2, r0
   1799c:	adc	r3, r3, r0, asr #31
   179a0:	strd	r2, [r9]
   179a4:	movw	r0, #62340	; 0xf384
   179a8:	ldr	r4, [sp, #32]
   179ac:	mov	r5, r8
   179b0:	movt	r0, #3
   179b4:	ldrb	r0, [r0]
   179b8:	cmp	r0, #1
   179bc:	bne	17b1c <__assert_fail@plt+0x5a90>
   179c0:	movw	r0, #516	; 0x204
   179c4:	ldr	r6, [r4, #128]	; 0x80
   179c8:	movt	r0, #4
   179cc:	ldr	r5, [r0]
   179d0:	cmp	r6, #0
   179d4:	beq	17a90 <__assert_fail@plt+0x5a04>
   179d8:	mov	r0, r6
   179dc:	mov	r1, #0
   179e0:	bl	22ce8 <__assert_fail@plt+0x10c5c>
   179e4:	mov	r4, r0
   179e8:	mov	r0, r6
   179ec:	bl	11eac <strlen@plt>
   179f0:	mov	r2, r0
   179f4:	ldrd	r0, [r9]
   179f8:	adds	r0, r0, r2
   179fc:	adc	r1, r1, #0
   17a00:	strd	r0, [r9]
   17a04:	movw	r0, #62220	; 0xf30c
   17a08:	movt	r0, #3
   17a0c:	ldr	r3, [r0]
   17a10:	mov	r1, r0
   17a14:	mov	r0, r6
   17a18:	mov	r6, r1
   17a1c:	mov	r1, #1
   17a20:	bl	11c90 <fwrite_unlocked@plt>
   17a24:	sub	r0, r5, r4
   17a28:	mvn	r4, #0
   17a2c:	mov	r5, #32
   17a30:	cmp	r0, #0
   17a34:	mvngt	r4, r0
   17a38:	ldrd	r0, [r9]
   17a3c:	adds	r0, r0, #1
   17a40:	adc	r1, r1, #0
   17a44:	strd	r0, [r9]
   17a48:	ldr	r0, [r6]
   17a4c:	ldr	r1, [r0, #20]
   17a50:	ldr	r2, [r0, #24]
   17a54:	cmp	r1, r2
   17a58:	bcs	17a74 <__assert_fail@plt+0x59e8>
   17a5c:	add	r2, r1, #1
   17a60:	str	r2, [r0, #20]
   17a64:	strb	r5, [r1]
   17a68:	adds	r4, r4, #1
   17a6c:	bne	17a38 <__assert_fail@plt+0x59ac>
   17a70:	b	17a84 <__assert_fail@plt+0x59f8>
   17a74:	mov	r1, #32
   17a78:	bl	11f54 <__overflow@plt>
   17a7c:	adds	r4, r4, #1
   17a80:	bne	17a38 <__assert_fail@plt+0x59ac>
   17a84:	ldr	r4, [sp, #32]
   17a88:	mov	r5, r8
   17a8c:	b	17b1c <__assert_fail@plt+0x5a90>
   17a90:	movw	r1, #50004	; 0xc354
   17a94:	mov	r0, #1
   17a98:	mov	r2, r5
   17a9c:	str	sl, [sp]
   17aa0:	str	sl, [sp, #4]
   17aa4:	movt	r1, #2
   17aa8:	bl	11f00 <__printf_chk@plt>
   17aac:	ldrd	r2, [r9]
   17ab0:	mov	r5, r8
   17ab4:	adds	r2, r2, r0
   17ab8:	adc	r3, r3, r0, asr #31
   17abc:	strd	r2, [r9]
   17ac0:	b	17b1c <__assert_fail@plt+0x5a90>
   17ac4:	movw	r1, #48056	; 0xbbb8
   17ac8:	mov	r2, #2
   17acc:	movt	r1, #2
   17ad0:	bl	1202c <strncmp@plt>
   17ad4:	cmp	r0, #0
   17ad8:	beq	17214 <__assert_fail@plt+0x5188>
   17adc:	ldrb	r0, [r5]
   17ae0:	cmp	r0, #0
   17ae4:	bne	170d8 <__assert_fail@plt+0x504c>
   17ae8:	mov	r0, #1
   17aec:	strb	r0, [r5]
   17af0:	mov	r0, #1
   17af4:	bl	11ea0 <tcgetpgrp@plt>
   17af8:	cmp	r0, #0
   17afc:	movge	r0, #1
   17b00:	blge	18e14 <__assert_fail@plt+0x6d88>
   17b04:	ldr	r0, [r4, #20]
   17b08:	cmp	r0, #0
   17b0c:	beq	170c0 <__assert_fail@plt+0x5034>
   17b10:	add	r0, r4, #16
   17b14:	b	170d4 <__assert_fail@plt+0x5048>
   17b18:	ldr	r4, [sp, #32]
   17b1c:	ldrb	r0, [r4, #132]	; 0x84
   17b20:	cmp	r0, #0
   17b24:	beq	17c04 <__assert_fail@plt+0x5b78>
   17b28:	ldr	r0, [r4, #32]
   17b2c:	and	r0, r0, #45056	; 0xb000
   17b30:	orr	r0, r0, #16384	; 0x4000
   17b34:	cmp	r0, #24576	; 0x6000
   17b38:	bne	17c0c <__assert_fail@plt+0x5b80>
   17b3c:	ldrd	r0, [r4, #48]	; 0x30
   17b40:	sub	lr, fp, #1024	; 0x400
   17b44:	sub	r2, lr, #57	; 0x39
   17b48:	lsr	r1, r1, #12
   17b4c:	lsr	r0, r0, #8
   17b50:	bfi	r0, r1, #12, #20
   17b54:	movw	r1, #520	; 0x208
   17b58:	movt	r1, #4
   17b5c:	ldr	r6, [r1]
   17b60:	movw	r1, #524	; 0x20c
   17b64:	movt	r1, #4
   17b68:	mov	r8, r1
   17b6c:	ldr	r7, [r1]
   17b70:	movw	r1, #528	; 0x210
   17b74:	movt	r1, #4
   17b78:	ldr	r1, [r1]
   17b7c:	str	r1, [sp, #20]
   17b80:	mov	r1, #0
   17b84:	bl	227b0 <__assert_fail@plt+0x10724>
   17b88:	ldrd	r2, [r4, #48]	; 0x30
   17b8c:	mov	sl, r0
   17b90:	ldr	r8, [r8]
   17b94:	mov	r1, #0
   17b98:	lsr	r0, r2, #12
   17b9c:	orr	r0, r0, r3, lsl #20
   17ba0:	bfi	r0, r2, #0, #8
   17ba4:	sub	r2, fp, #80	; 0x50
   17ba8:	bl	227b0 <__assert_fail@plt+0x10724>
   17bac:	ldr	r1, [sp, #20]
   17bb0:	movw	r3, #49989	; 0xc345
   17bb4:	movt	r3, #2
   17bb8:	sub	r1, r1, #2
   17bbc:	sub	r2, r1, r6
   17bc0:	sub	r2, r2, r7
   17bc4:	cmp	r2, #0
   17bc8:	mvn	r2, #0
   17bcc:	subgt	r6, r1, r7
   17bd0:	mov	r1, #1
   17bd4:	stm	sp, {r6, sl}
   17bd8:	str	r0, [sp, #12]
   17bdc:	mov	r0, r5
   17be0:	str	r8, [sp, #8]
   17be4:	bl	11edc <__sprintf_chk@plt>
   17be8:	ldr	r1, [sp, #28]
   17bec:	movw	r7, #49498	; 0xc15a
   17bf0:	add	r5, r5, r0
   17bf4:	movt	r7, #2
   17bf8:	mov	sl, r7
   17bfc:	mov	r7, #32
   17c00:	b	17cdc <__assert_fail@plt+0x5c50>
   17c04:	mov	r6, r7
   17c08:	b	17c50 <__assert_fail@plt+0x5bc4>
   17c0c:	movw	r2, #62880	; 0xf5a0
   17c10:	ldrd	r0, [r4, #64]	; 0x40
   17c14:	mov	r6, #1
   17c18:	sub	lr, fp, #1024	; 0x400
   17c1c:	movt	r2, #3
   17c20:	ldr	r3, [r2]
   17c24:	movw	r2, #62088	; 0xf288
   17c28:	movt	r2, #3
   17c2c:	ldm	r2, {r2, r7}
   17c30:	stm	sp, {r6, sl}
   17c34:	str	r2, [sp, #8]
   17c38:	sub	r2, lr, #57	; 0x39
   17c3c:	str	r7, [sp, #12]
   17c40:	bl	21880 <__assert_fail@plt+0xf7f4>
   17c44:	movw	r7, #49498	; 0xc15a
   17c48:	mov	r6, r0
   17c4c:	movt	r7, #2
   17c50:	movw	r0, #528	; 0x210
   17c54:	mov	r1, #0
   17c58:	movt	r0, #4
   17c5c:	ldr	r8, [r0]
   17c60:	mov	r0, r6
   17c64:	bl	22ce8 <__assert_fail@plt+0x10c5c>
   17c68:	cmp	r8, r0
   17c6c:	ble	17cb8 <__assert_fail@plt+0x5c2c>
   17c70:	mov	r4, r0
   17c74:	mvn	r1, r8
   17c78:	add	r0, r8, #2
   17c7c:	add	r7, r4, r1
   17c80:	mvn	r1, #1
   17c84:	sub	r0, r0, r4
   17c88:	cmn	r7, #2
   17c8c:	movle	r7, r1
   17c90:	mov	r1, #32
   17c94:	add	r2, r0, r7
   17c98:	mov	r0, r5
   17c9c:	bl	11ef4 <memset@plt>
   17ca0:	add	r0, r8, r7
   17ca4:	movw	r7, #49498	; 0xc15a
   17ca8:	sub	r0, r0, r4
   17cac:	movt	r7, #2
   17cb0:	add	r0, r5, r0
   17cb4:	add	r5, r0, #2
   17cb8:	ldr	r1, [sp, #28]
   17cbc:	mov	sl, r7
   17cc0:	ldrb	r0, [r6], #1
   17cc4:	strb	r0, [r5], #1
   17cc8:	cmp	r0, #0
   17ccc:	bne	17cc0 <__assert_fail@plt+0x5c34>
   17cd0:	ldr	r4, [sp, #32]
   17cd4:	mov	r7, #32
   17cd8:	strb	r7, [r5, #-1]
   17cdc:	mov	r0, #1
   17ce0:	movw	r6, #62220	; 0xf30c
   17ce4:	eor	r8, r1, #1
   17ce8:	strb	r0, [r5]
   17cec:	movt	r6, #3
   17cf0:	ldrb	r0, [r4, #132]	; 0x84
   17cf4:	cmp	r0, #0
   17cf8:	beq	17e78 <__assert_fail@plt+0x5dec>
   17cfc:	cmp	r8, #0
   17d00:	bne	17e78 <__assert_fail@plt+0x5dec>
   17d04:	movw	r0, #62332	; 0xf37c
   17d08:	add	r1, sp, #80	; 0x50
   17d0c:	add	r2, sp, #36	; 0x24
   17d10:	movt	r0, #3
   17d14:	ldr	r0, [r0]
   17d18:	bl	27288 <_obstack_memory_used@@Base+0x2214>
   17d1c:	cmp	r0, #0
   17d20:	beq	17e6c <__assert_fail@plt+0x5de0>
   17d24:	movw	r0, #62244	; 0xf324
   17d28:	ldr	r3, [sp, #80]	; 0x50
   17d2c:	mov	r7, #0
   17d30:	mov	r6, #0
   17d34:	movt	r0, #3
   17d38:	ldr	r2, [r0]
   17d3c:	ldr	r1, [r0, #4]
   17d40:	ldr	r0, [sp, #84]	; 0x54
   17d44:	cmp	r2, r3
   17d48:	movwgt	r7, #1
   17d4c:	sublt	r7, r7, #1
   17d50:	cmp	r1, r0
   17d54:	movwgt	r6, #1
   17d58:	sublt	r6, r6, #1
   17d5c:	add	r7, r6, r7, lsl #1
   17d60:	cmn	r7, #1
   17d64:	bgt	17d88 <__assert_fail@plt+0x5cfc>
   17d68:	movw	r4, #62244	; 0xf324
   17d6c:	movt	r4, #3
   17d70:	mov	r0, r4
   17d74:	bl	20494 <__assert_fail@plt+0xe408>
   17d78:	ldr	r2, [r4]
   17d7c:	ldr	r1, [r4, #4]
   17d80:	ldr	r3, [sp, #80]	; 0x50
   17d84:	ldr	r0, [sp, #84]	; 0x54
   17d88:	movw	r4, #15700	; 0x3d54
   17d8c:	cmp	r1, r0
   17d90:	mov	r7, #0
   17d94:	mov	r6, #0
   17d98:	movt	r4, #65295	; 0xff0f
   17d9c:	movwgt	r7, #1
   17da0:	add	r4, r2, r4
   17da4:	sublt	r7, r7, #1
   17da8:	cmp	r4, r3
   17dac:	mov	r4, #0
   17db0:	movwgt	r4, #1
   17db4:	sublt	r4, r4, #1
   17db8:	add	r7, r7, r4, lsl #1
   17dbc:	cmn	r7, #1
   17dc0:	bgt	17dec <__assert_fail@plt+0x5d60>
   17dc4:	cmp	r3, r2
   17dc8:	mov	r2, #0
   17dcc:	movwgt	r2, #1
   17dd0:	sublt	r2, r2, #1
   17dd4:	cmp	r1, r0
   17dd8:	mov	r1, #0
   17ddc:	movwlt	r1, #1
   17de0:	subgt	r1, r1, #1
   17de4:	add	r1, r1, r2, lsl #1
   17de8:	lsr	r6, r1, #31
   17dec:	movw	r2, #468	; 0x1d4
   17df0:	movw	r1, #62332	; 0xf37c
   17df4:	movw	r7, #49498	; 0xc15a
   17df8:	movt	r2, #4
   17dfc:	movt	r1, #3
   17e00:	movt	r7, #2
   17e04:	ldrb	r2, [r2]
   17e08:	ldr	r1, [r1]
   17e0c:	mov	sl, r7
   17e10:	cmp	r2, #1
   17e14:	bne	17e34 <__assert_fail@plt+0x5da8>
   17e18:	movw	r3, #62932	; 0xf5d4
   17e1c:	add	r2, r6, r6, lsl #1
   17e20:	movt	r3, #3
   17e24:	add	r2, r3, r2, lsl #9
   17e28:	ldr	r3, [sp, #52]	; 0x34
   17e2c:	add	r2, r2, r3, lsl #7
   17e30:	b	17e40 <__assert_fail@plt+0x5db4>
   17e34:	movw	r2, #62096	; 0xf290
   17e38:	movt	r2, #3
   17e3c:	ldr	r2, [r2, r6, lsl #2]
   17e40:	str	r1, [sp]
   17e44:	str	r0, [sp, #4]
   17e48:	mov	r0, r5
   17e4c:	movw	r1, #1001	; 0x3e9
   17e50:	add	r3, sp, #36	; 0x24
   17e54:	bl	2335c <__assert_fail@plt+0x112d0>
   17e58:	movw	r6, #62220	; 0xf30c
   17e5c:	cmp	r0, #0
   17e60:	mov	r7, #32
   17e64:	movt	r6, #3
   17e68:	bne	17fc8 <__assert_fail@plt+0x5f3c>
   17e6c:	ldrb	r0, [r5]
   17e70:	cmp	r0, #0
   17e74:	beq	17fc4 <__assert_fail@plt+0x5f38>
   17e78:	movw	r0, #62108	; 0xf29c
   17e7c:	mov	r7, sl
   17e80:	movt	r0, #3
   17e84:	ldr	r6, [r0]
   17e88:	cmn	r6, #1
   17e8c:	bgt	17f60 <__assert_fail@plt+0x5ed4>
   17e90:	movw	r4, #62332	; 0xf37c
   17e94:	sub	r6, fp, #80	; 0x50
   17e98:	mov	sl, r7
   17e9c:	mov	r7, #0
   17ea0:	sub	r1, fp, #36	; 0x24
   17ea4:	movt	r4, #3
   17ea8:	mov	r2, r6
   17eac:	str	r7, [fp, #-36]	; 0xffffffdc
   17eb0:	ldr	r0, [r4]
   17eb4:	bl	27288 <_obstack_memory_used@@Base+0x2214>
   17eb8:	cmp	r0, #0
   17ebc:	beq	17f38 <__assert_fail@plt+0x5eac>
   17ec0:	movw	r0, #62096	; 0xf290
   17ec4:	ldr	r1, [r4]
   17ec8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17ecc:	sub	lr, fp, #1024	; 0x400
   17ed0:	movt	r0, #3
   17ed4:	ldr	r2, [r0]
   17ed8:	movw	r0, #468	; 0x1d4
   17edc:	movt	r0, #4
   17ee0:	ldrb	r0, [r0]
   17ee4:	stm	sp, {r1, r7}
   17ee8:	movw	r1, #1001	; 0x3e9
   17eec:	cmp	r0, #0
   17ef0:	movw	r0, #62932	; 0xf5d4
   17ef4:	movt	r0, #3
   17ef8:	addne	r2, r0, r3, lsl #7
   17efc:	sub	r0, lr, #57	; 0x39
   17f00:	mov	r3, r6
   17f04:	bl	2335c <__assert_fail@plt+0x112d0>
   17f08:	cmp	r0, #0
   17f0c:	beq	17f38 <__assert_fail@plt+0x5eac>
   17f10:	sub	lr, fp, #1024	; 0x400
   17f14:	mov	r1, r0
   17f18:	mov	r2, #0
   17f1c:	sub	r0, lr, #57	; 0x39
   17f20:	bl	22d10 <__assert_fail@plt+0x10c84>
   17f24:	mov	r6, r0
   17f28:	movw	r0, #62108	; 0xf29c
   17f2c:	movt	r0, #3
   17f30:	str	r6, [r0]
   17f34:	b	17f44 <__assert_fail@plt+0x5eb8>
   17f38:	movw	r0, #62108	; 0xf29c
   17f3c:	movt	r0, #3
   17f40:	ldr	r6, [r0]
   17f44:	cmn	r6, #1
   17f48:	mov	r7, sl
   17f4c:	bgt	17f60 <__assert_fail@plt+0x5ed4>
   17f50:	movw	r0, #62108	; 0xf29c
   17f54:	mov	r6, #0
   17f58:	movt	r0, #3
   17f5c:	str	r6, [r0]
   17f60:	ldr	r4, [sp, #32]
   17f64:	ldrb	r0, [r4, #132]	; 0x84
   17f68:	clz	r0, r0
   17f6c:	lsr	r0, r0, #5
   17f70:	orrs	r0, r0, r8
   17f74:	mov	r0, r7
   17f78:	bne	17f90 <__assert_fail@plt+0x5f04>
   17f7c:	ldr	r0, [sp, #80]	; 0x50
   17f80:	sub	lr, fp, #1024	; 0x400
   17f84:	sub	r2, lr, #57	; 0x39
   17f88:	asr	r1, r0, #31
   17f8c:	bl	226f0 <__assert_fail@plt+0x10664>
   17f90:	movw	r3, #49994	; 0xc34a
   17f94:	str	r0, [sp, #4]
   17f98:	mov	r0, r5
   17f9c:	mov	r1, #1
   17fa0:	mvn	r2, #0
   17fa4:	str	r6, [sp]
   17fa8:	movt	r3, #2
   17fac:	bl	11edc <__sprintf_chk@plt>
   17fb0:	movw	r6, #62220	; 0xf30c
   17fb4:	add	r0, r5, r0
   17fb8:	add	r8, sp, #88	; 0x58
   17fbc:	movt	r6, #3
   17fc0:	b	17fdc <__assert_fail@plt+0x5f50>
   17fc4:	mov	r0, #0
   17fc8:	strb	r7, [r5, r0]!
   17fcc:	add	r8, sp, #88	; 0x58
   17fd0:	mov	r7, sl
   17fd4:	ldr	r4, [sp, #32]
   17fd8:	add	r0, r5, #1
   17fdc:	sub	r5, r0, r8
   17fe0:	ldrd	r0, [r9]
   17fe4:	ldr	r3, [r6]
   17fe8:	mov	r2, r5
   17fec:	adds	r0, r0, r5
   17ff0:	adc	r1, r1, #0
   17ff4:	strd	r0, [r9]
   17ff8:	mov	r0, r8
   17ffc:	mov	r1, #1
   18000:	bl	11c90 <fwrite_unlocked@plt>
   18004:	movw	r2, #62348	; 0xf38c
   18008:	mov	r0, r4
   1800c:	mov	r1, #0
   18010:	mov	r3, r5
   18014:	movt	r2, #3
   18018:	bl	1db6c <__assert_fail@plt+0xbae0>
   1801c:	mov	r6, r0
   18020:	ldr	r0, [r4, #120]	; 0x78
   18024:	cmp	r0, #6
   18028:	bne	180b8 <__assert_fail@plt+0x602c>
   1802c:	ldr	r0, [r4, #4]
   18030:	cmp	r0, #0
   18034:	beq	18144 <__assert_fail@plt+0x60b8>
   18038:	ldrd	r0, [r9]
   1803c:	mov	r2, #4
   18040:	adds	r0, r0, #4
   18044:	adc	r1, r1, #0
   18048:	strd	r0, [r9]
   1804c:	movw	r0, #62220	; 0xf30c
   18050:	mov	r1, #1
   18054:	movt	r0, #3
   18058:	ldr	r3, [r0]
   1805c:	movw	r0, #49999	; 0xc34f
   18060:	movt	r0, #2
   18064:	bl	11c90 <fwrite_unlocked@plt>
   18068:	add	r0, r5, r6
   1806c:	mov	r1, #1
   18070:	mov	r2, #0
   18074:	add	r3, r0, #4
   18078:	mov	r0, r4
   1807c:	bl	1db6c <__assert_fail@plt+0xbae0>
   18080:	movw	r0, #62276	; 0xf344
   18084:	movt	r0, #3
   18088:	ldr	r1, [r0]
   1808c:	cmp	r1, #0
   18090:	beq	18144 <__assert_fail@plt+0x60b8>
   18094:	ldr	r2, [r4, #124]	; 0x7c
   18098:	and	r0, r2, #61440	; 0xf000
   1809c:	cmp	r0, #16384	; 0x4000
   180a0:	beq	18108 <__assert_fail@plt+0x607c>
   180a4:	cmp	r0, #32768	; 0x8000
   180a8:	bne	1709c <__assert_fail@plt+0x5010>
   180ac:	cmp	r1, #3
   180b0:	beq	180f8 <__assert_fail@plt+0x606c>
   180b4:	b	18144 <__assert_fail@plt+0x60b8>
   180b8:	movw	r1, #62276	; 0xf344
   180bc:	movt	r1, #3
   180c0:	ldr	r3, [r1]
   180c4:	cmp	r3, #0
   180c8:	beq	18144 <__assert_fail@plt+0x60b8>
   180cc:	ldrb	r6, [r4, #132]	; 0x84
   180d0:	ldr	r2, [r4, #32]
   180d4:	cmp	r6, #0
   180d8:	beq	17050 <__assert_fail@plt+0x4fc4>
   180dc:	and	r1, r2, #61440	; 0xf000
   180e0:	cmp	r1, #16384	; 0x4000
   180e4:	beq	18108 <__assert_fail@plt+0x607c>
   180e8:	cmp	r1, #32768	; 0x8000
   180ec:	bne	1706c <__assert_fail@plt+0x4fe0>
   180f0:	cmp	r3, #3
   180f4:	bne	18144 <__assert_fail@plt+0x60b8>
   180f8:	ands	r0, r2, #73	; 0x49
   180fc:	mov	r1, #42	; 0x2a
   18100:	bne	1810c <__assert_fail@plt+0x6080>
   18104:	b	18144 <__assert_fail@plt+0x60b8>
   18108:	mov	r1, #47	; 0x2f
   1810c:	ldm	r9, {r0, r3}
   18110:	adds	r0, r0, #1
   18114:	adc	r3, r3, #0
   18118:	stm	r9, {r0, r3}
   1811c:	movw	r0, #62220	; 0xf30c
   18120:	movt	r0, #3
   18124:	ldr	r0, [r0]
   18128:	ldr	r2, [r0, #20]
   1812c:	ldr	r3, [r0, #24]
   18130:	cmp	r2, r3
   18134:	bcs	171f0 <__assert_fail@plt+0x5164>
   18138:	add	r3, r2, #1
   1813c:	str	r3, [r0, #20]
   18140:	strb	r1, [r2]
   18144:	ldrd	r0, [r9]
   18148:	movw	r6, #62220	; 0xf30c
   1814c:	movt	r6, #3
   18150:	adds	r0, r0, #1
   18154:	adc	r1, r1, #0
   18158:	strd	r0, [r9]
   1815c:	movw	r0, #62908	; 0xf5bc
   18160:	mov	r1, #10
   18164:	movt	r0, #3
   18168:	ldrb	r0, [r0]
   1816c:	cmp	r0, #0
   18170:	ldr	r0, [r6]
   18174:	movwne	r1, #0
   18178:	ldr	r2, [r0, #20]
   1817c:	ldr	r3, [r0, #24]
   18180:	cmp	r2, r3
   18184:	bcs	171e8 <__assert_fail@plt+0x515c>
   18188:	add	r3, r2, #1
   1818c:	str	r3, [r0, #20]
   18190:	strb	r1, [r2]
   18194:	movw	r0, #62452	; 0xf3f4
   18198:	ldr	sl, [sp, #24]
   1819c:	movw	r4, #61896	; 0xf1c8
   181a0:	movw	r5, #62456	; 0xf3f8
   181a4:	movt	r0, #3
   181a8:	movt	r4, #3
   181ac:	movt	r5, #3
   181b0:	ldr	r0, [r0]
   181b4:	add	sl, sl, #1
   181b8:	cmp	sl, r0
   181bc:	bcc	171f8 <__assert_fail@plt+0x516c>
   181c0:	b	18558 <__assert_fail@plt+0x64cc>
   181c4:	mov	r0, #44	; 0x2c
   181c8:	b	18308 <__assert_fail@plt+0x627c>
   181cc:	movw	r8, #62452	; 0xf3f4
   181d0:	movt	r8, #3
   181d4:	ldr	r0, [r8]
   181d8:	cmp	r0, #0
   181dc:	beq	18558 <__assert_fail@plt+0x64cc>
   181e0:	movw	r6, #484	; 0x1e4
   181e4:	movw	r7, #62908	; 0xf5bc
   181e8:	movw	r4, #62220	; 0xf30c
   181ec:	mov	r5, #0
   181f0:	movt	r6, #4
   181f4:	movt	r7, #3
   181f8:	movt	r4, #3
   181fc:	b	1831c <__assert_fail@plt+0x6290>
   18200:	movw	r0, #62912	; 0xf5c0
   18204:	movt	r0, #3
   18208:	ldr	r0, [r0]
   1820c:	cmp	r0, #0
   18210:	beq	18304 <__assert_fail@plt+0x6278>
   18214:	mov	r0, #1
   18218:	bl	1e650 <__assert_fail@plt+0xc5c4>
   1821c:	movw	r1, #62452	; 0xf3f4
   18220:	movt	r1, #3
   18224:	ldr	r1, [r1]
   18228:	udiv	r6, r1, r0
   1822c:	mls	r1, r6, r0, r1
   18230:	cmp	r1, #0
   18234:	addne	r6, r6, #1
   18238:	cmp	r6, #0
   1823c:	beq	18558 <__assert_fail@plt+0x64cc>
   18240:	movw	r1, #960	; 0x3c0
   18244:	add	r0, r0, r0, lsl #1
   18248:	mov	r7, #0
   1824c:	movt	r1, #4
   18250:	ldr	r1, [r1]
   18254:	add	r0, r1, r0, lsl #2
   18258:	sub	r0, r0, #4
   1825c:	str	r0, [sp, #32]
   18260:	str	r6, [sp, #28]
   18264:	b	18378 <__assert_fail@plt+0x62ec>
   18268:	movw	r0, #62912	; 0xf5c0
   1826c:	movt	r0, #3
   18270:	ldr	r0, [r0]
   18274:	cmp	r0, #0
   18278:	beq	18304 <__assert_fail@plt+0x6278>
   1827c:	mov	r0, #0
   18280:	mov	r4, #0
   18284:	bl	1e650 <__assert_fail@plt+0xc5c4>
   18288:	movw	r1, #960	; 0x3c0
   1828c:	str	r0, [sp, #28]
   18290:	movt	r1, #4
   18294:	ldr	r2, [r1]
   18298:	add	r1, r0, r0, lsl #1
   1829c:	movw	r0, #484	; 0x1e4
   182a0:	movt	r0, #4
   182a4:	ldr	r0, [r0]
   182a8:	add	r5, r2, r1, lsl #2
   182ac:	ldr	r8, [r0]
   182b0:	mov	r0, r8
   182b4:	bl	1e3b8 <__assert_fail@plt+0xc32c>
   182b8:	mov	r6, r0
   182bc:	ldr	r0, [r5, #-4]!
   182c0:	mov	r1, #0
   182c4:	str	r5, [sp, #24]
   182c8:	ldr	r5, [r0]
   182cc:	mov	r0, r8
   182d0:	bl	1d580 <__assert_fail@plt+0xb4f4>
   182d4:	movw	r0, #62452	; 0xf3f4
   182d8:	movt	r0, #3
   182dc:	ldr	r0, [r0]
   182e0:	cmp	r0, #2
   182e4:	bcc	186d0 <__assert_fail@plt+0x6644>
   182e8:	movw	r9, #62220	; 0xf30c
   182ec:	movw	r8, #62256	; 0xf330
   182f0:	mov	r7, #1
   182f4:	mov	sl, #32
   182f8:	movt	r9, #3
   182fc:	movt	r8, #3
   18300:	b	1856c <__assert_fail@plt+0x64e0>
   18304:	mov	r0, #32
   18308:	sub	sp, fp, #28
   1830c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18310:	b	1d9d0 <__assert_fail@plt+0xb944>
   18314:	bl	11f54 <__overflow@plt>
   18318:	b	1835c <__assert_fail@plt+0x62d0>
   1831c:	ldr	r0, [r6]
   18320:	mov	r1, #0
   18324:	ldr	r0, [r0, r5, lsl #2]
   18328:	bl	1d580 <__assert_fail@plt+0xb4f4>
   1832c:	ldrb	r0, [r7]
   18330:	mov	r1, #10
   18334:	cmp	r0, #0
   18338:	ldr	r0, [r4]
   1833c:	movwne	r1, #0
   18340:	ldr	r2, [r0, #20]
   18344:	ldr	r3, [r0, #24]
   18348:	cmp	r2, r3
   1834c:	bcs	18314 <__assert_fail@plt+0x6288>
   18350:	add	r3, r2, #1
   18354:	str	r3, [r0, #20]
   18358:	strb	r1, [r2]
   1835c:	ldr	r0, [r8]
   18360:	add	r5, r5, #1
   18364:	cmp	r5, r0
   18368:	bcc	1831c <__assert_fail@plt+0x6290>
   1836c:	b	18558 <__assert_fail@plt+0x64cc>
   18370:	bl	11f54 <__overflow@plt>
   18374:	b	18548 <__assert_fail@plt+0x64bc>
   18378:	movw	r0, #484	; 0x1e4
   1837c:	movt	r0, #4
   18380:	ldr	r0, [r0]
   18384:	ldr	r4, [r0, r7, lsl #2]
   18388:	mov	r0, r4
   1838c:	bl	1e3b8 <__assert_fail@plt+0xc32c>
   18390:	mov	r5, r0
   18394:	ldr	r0, [sp, #32]
   18398:	mov	r1, #0
   1839c:	ldr	r0, [r0]
   183a0:	ldr	r8, [r0]
   183a4:	mov	r0, r4
   183a8:	bl	1d580 <__assert_fail@plt+0xb4f4>
   183ac:	movw	r0, #62452	; 0xf3f4
   183b0:	add	sl, r7, r6
   183b4:	str	r7, [sp, #24]
   183b8:	movt	r0, #3
   183bc:	ldr	r0, [r0]
   183c0:	cmp	sl, r0
   183c4:	bcs	18508 <__assert_fail@plt+0x647c>
   183c8:	mov	r0, #0
   183cc:	mov	r9, #1
   183d0:	movw	r6, #62256	; 0xf330
   183d4:	add	r4, r0, r8
   183d8:	add	r5, r0, r5
   183dc:	mov	r7, #32
   183e0:	mov	ip, #9
   183e4:	movt	r6, #3
   183e8:	cmp	r5, r4
   183ec:	mov	r8, r6
   183f0:	movw	r6, #62220	; 0xf30c
   183f4:	movt	r6, #3
   183f8:	bcs	184b0 <__assert_fail@plt+0x6424>
   183fc:	b	1842c <__assert_fail@plt+0x63a0>
   18400:	mov	r1, #32
   18404:	bl	11f54 <__overflow@plt>
   18408:	mov	ip, #9
   1840c:	mov	r7, #32
   18410:	b	184a0 <__assert_fail@plt+0x6414>
   18414:	mov	r1, #9
   18418:	bl	11f54 <__overflow@plt>
   1841c:	ldr	r1, [r8]
   18420:	mov	ip, #9
   18424:	mov	r7, #32
   18428:	b	1846c <__assert_fail@plt+0x63e0>
   1842c:	ldr	r1, [r8]
   18430:	cmp	r1, #0
   18434:	beq	18480 <__assert_fail@plt+0x63f4>
   18438:	add	r2, r5, #1
   1843c:	udiv	r0, r4, r1
   18440:	udiv	r2, r2, r1
   18444:	cmp	r0, r2
   18448:	bls	18480 <__assert_fail@plt+0x63f4>
   1844c:	ldr	r0, [r6]
   18450:	ldr	r2, [r0, #20]
   18454:	ldr	r3, [r0, #24]
   18458:	cmp	r2, r3
   1845c:	bcs	18414 <__assert_fail@plt+0x6388>
   18460:	add	r3, r2, #1
   18464:	str	r3, [r0, #20]
   18468:	strb	ip, [r2]
   1846c:	udiv	r0, r5, r1
   18470:	mul	r0, r0, r1
   18474:	sub	r0, r0, r5
   18478:	add	r0, r1, r0
   1847c:	b	184a4 <__assert_fail@plt+0x6418>
   18480:	ldr	r0, [r6]
   18484:	ldr	r1, [r0, #20]
   18488:	ldr	r2, [r0, #24]
   1848c:	cmp	r1, r2
   18490:	bcs	18400 <__assert_fail@plt+0x6374>
   18494:	add	r2, r1, #1
   18498:	str	r2, [r0, #20]
   1849c:	strb	r7, [r1]
   184a0:	mov	r0, #1
   184a4:	add	r5, r0, r5
   184a8:	cmp	r5, r4
   184ac:	bcc	1842c <__assert_fail@plt+0x63a0>
   184b0:	movw	r0, #484	; 0x1e4
   184b4:	movt	r0, #4
   184b8:	ldr	r0, [r0]
   184bc:	ldr	r6, [r0, sl, lsl #2]
   184c0:	mov	r0, r6
   184c4:	bl	1e3b8 <__assert_fail@plt+0xc32c>
   184c8:	mov	r5, r0
   184cc:	ldr	r0, [sp, #32]
   184d0:	mov	r1, r4
   184d4:	ldr	r0, [r0]
   184d8:	ldr	r8, [r0, r9, lsl #2]
   184dc:	mov	r0, r6
   184e0:	bl	1d580 <__assert_fail@plt+0xb4f4>
   184e4:	movw	r0, #62452	; 0xf3f4
   184e8:	ldr	r6, [sp, #28]
   184ec:	add	r9, r9, #1
   184f0:	movt	r0, #3
   184f4:	ldr	r0, [r0]
   184f8:	add	sl, sl, r6
   184fc:	cmp	sl, r0
   18500:	mov	r0, r4
   18504:	bcc	183d0 <__assert_fail@plt+0x6344>
   18508:	movw	r0, #62908	; 0xf5bc
   1850c:	mov	r1, #10
   18510:	movt	r0, #3
   18514:	ldrb	r0, [r0]
   18518:	cmp	r0, #0
   1851c:	movw	r0, #62220	; 0xf30c
   18520:	movt	r0, #3
   18524:	movwne	r1, #0
   18528:	ldr	r0, [r0]
   1852c:	ldr	r2, [r0, #20]
   18530:	ldr	r3, [r0, #24]
   18534:	cmp	r2, r3
   18538:	bcs	18370 <__assert_fail@plt+0x62e4>
   1853c:	add	r3, r2, #1
   18540:	str	r3, [r0, #20]
   18544:	strb	r1, [r2]
   18548:	ldr	r7, [sp, #24]
   1854c:	add	r7, r7, #1
   18550:	cmp	r7, r6
   18554:	bcc	18378 <__assert_fail@plt+0x62ec>
   18558:	sub	sp, fp, #28
   1855c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18560:	bl	11f54 <__overflow@plt>
   18564:	mov	r4, #0
   18568:	b	18680 <__assert_fail@plt+0x65f4>
   1856c:	ldr	r1, [sp, #28]
   18570:	udiv	r0, r7, r1
   18574:	mls	r0, r0, r1, r7
   18578:	cmp	r0, #0
   1857c:	str	r0, [sp, #32]
   18580:	beq	1859c <__assert_fail@plt+0x6510>
   18584:	add	r5, r4, r5
   18588:	add	r4, r4, r6
   1858c:	cmp	r4, r5
   18590:	bcs	1867c <__assert_fail@plt+0x65f0>
   18594:	mov	r6, #9
   18598:	b	185f8 <__assert_fail@plt+0x656c>
   1859c:	movw	r0, #62908	; 0xf5bc
   185a0:	mov	r1, #10
   185a4:	movt	r0, #3
   185a8:	ldrb	r0, [r0]
   185ac:	cmp	r0, #0
   185b0:	ldr	r0, [r9]
   185b4:	movwne	r1, #0
   185b8:	ldr	r2, [r0, #20]
   185bc:	ldr	r3, [r0, #24]
   185c0:	cmp	r2, r3
   185c4:	bcs	18560 <__assert_fail@plt+0x64d4>
   185c8:	add	r3, r2, #1
   185cc:	mov	r4, #0
   185d0:	str	r3, [r0, #20]
   185d4:	strb	r1, [r2]
   185d8:	b	18680 <__assert_fail@plt+0x65f4>
   185dc:	mov	r1, #32
   185e0:	bl	11f54 <__overflow@plt>
   185e4:	b	1866c <__assert_fail@plt+0x65e0>
   185e8:	mov	r1, #9
   185ec:	bl	11f54 <__overflow@plt>
   185f0:	ldr	r1, [r8]
   185f4:	b	18638 <__assert_fail@plt+0x65ac>
   185f8:	ldr	r1, [r8]
   185fc:	cmp	r1, #0
   18600:	beq	1864c <__assert_fail@plt+0x65c0>
   18604:	add	r2, r4, #1
   18608:	udiv	r0, r5, r1
   1860c:	udiv	r2, r2, r1
   18610:	cmp	r0, r2
   18614:	bls	1864c <__assert_fail@plt+0x65c0>
   18618:	ldr	r0, [r9]
   1861c:	ldr	r2, [r0, #20]
   18620:	ldr	r3, [r0, #24]
   18624:	cmp	r2, r3
   18628:	bcs	185e8 <__assert_fail@plt+0x655c>
   1862c:	add	r3, r2, #1
   18630:	str	r3, [r0, #20]
   18634:	strb	r6, [r2]
   18638:	udiv	r0, r4, r1
   1863c:	mul	r0, r0, r1
   18640:	sub	r0, r0, r4
   18644:	add	r0, r1, r0
   18648:	b	18670 <__assert_fail@plt+0x65e4>
   1864c:	ldr	r0, [r9]
   18650:	ldr	r1, [r0, #20]
   18654:	ldr	r2, [r0, #24]
   18658:	cmp	r1, r2
   1865c:	bcs	185dc <__assert_fail@plt+0x6550>
   18660:	add	r2, r1, #1
   18664:	str	r2, [r0, #20]
   18668:	strb	sl, [r1]
   1866c:	mov	r0, #1
   18670:	add	r4, r0, r4
   18674:	cmp	r4, r5
   18678:	bcc	185f8 <__assert_fail@plt+0x656c>
   1867c:	mov	r4, r5
   18680:	movw	r0, #484	; 0x1e4
   18684:	mov	r1, r4
   18688:	movt	r0, #4
   1868c:	ldr	r0, [r0]
   18690:	ldr	r6, [r0, r7, lsl #2]
   18694:	mov	r0, r6
   18698:	bl	1d580 <__assert_fail@plt+0xb4f4>
   1869c:	mov	r0, r6
   186a0:	bl	1e3b8 <__assert_fail@plt+0xc32c>
   186a4:	mov	r6, r0
   186a8:	ldr	r0, [sp, #24]
   186ac:	ldr	r1, [sp, #32]
   186b0:	add	r7, r7, #1
   186b4:	ldr	r0, [r0]
   186b8:	ldr	r5, [r0, r1, lsl #2]
   186bc:	movw	r0, #62452	; 0xf3f4
   186c0:	movt	r0, #3
   186c4:	ldr	r0, [r0]
   186c8:	cmp	r7, r0
   186cc:	bcc	1856c <__assert_fail@plt+0x64e0>
   186d0:	movw	r0, #62908	; 0xf5bc
   186d4:	mov	r1, #10
   186d8:	movt	r0, #3
   186dc:	ldrb	r0, [r0]
   186e0:	cmp	r0, #0
   186e4:	movw	r0, #62220	; 0xf30c
   186e8:	movt	r0, #3
   186ec:	movwne	r1, #0
   186f0:	ldr	r0, [r0]
   186f4:	ldr	r2, [r0, #20]
   186f8:	ldr	r3, [r0, #24]
   186fc:	cmp	r2, r3
   18700:	addcc	r3, r2, #1
   18704:	strcc	r3, [r0, #20]
   18708:	strbcc	r1, [r2]
   1870c:	subcc	sp, fp, #28
   18710:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18714:	sub	sp, fp, #28
   18718:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1871c:	b	11f54 <__overflow@plt>
   18720:	bl	12038 <abort@plt>
   18724:	push	{r4, r5, r6, r7, fp, lr}
   18728:	add	fp, sp, #16
   1872c:	ldr	r5, [r1, #8]
   18730:	ldr	r3, [r1, #12]
   18734:	mov	r7, #0
   18738:	sub	r2, r3, r5
   1873c:	cmp	r7, r2, lsr #3
   18740:	popeq	{r4, r5, r6, r7, fp, pc}
   18744:	cmp	r3, r5
   18748:	ldrbeq	r7, [r1, #40]	; 0x28
   1874c:	orreq	r7, r7, #2
   18750:	strbeq	r7, [r1, #40]	; 0x28
   18754:	ldr	r4, [r1, #24]
   18758:	ldr	r6, [r1, #4]
   1875c:	ldr	r7, [r1, #16]
   18760:	add	r3, r4, r3
   18764:	bic	r3, r3, r4
   18768:	sub	r4, r3, r6
   1876c:	sub	r6, r7, r6
   18770:	str	r3, [r1, #12]
   18774:	cmp	r4, r6
   18778:	lsr	r6, r2, #3
   1877c:	strhi	r7, [r1, #12]
   18780:	movhi	r3, r7
   18784:	movw	r7, #62220	; 0xf30c
   18788:	str	r3, [r1, #8]
   1878c:	movt	r7, #3
   18790:	ldr	r1, [r7]
   18794:	bl	11b94 <fputs_unlocked@plt>
   18798:	movw	r4, #48217	; 0xbc59
   1879c:	movt	r4, #2
   187a0:	ldrd	r2, [r5]
   187a4:	mov	r0, #1
   187a8:	mov	r1, r4
   187ac:	bl	11f00 <__printf_chk@plt>
   187b0:	subs	r6, r6, #1
   187b4:	add	r5, r5, #8
   187b8:	bne	187a0 <__assert_fail@plt+0x6714>
   187bc:	ldr	r0, [r7]
   187c0:	ldr	r1, [r0, #20]
   187c4:	ldr	r2, [r0, #24]
   187c8:	cmp	r1, r2
   187cc:	bcs	187e4 <__assert_fail@plt+0x6758>
   187d0:	add	r2, r1, #1
   187d4:	str	r2, [r0, #20]
   187d8:	mov	r0, #10
   187dc:	strb	r0, [r1]
   187e0:	pop	{r4, r5, r6, r7, fp, pc}
   187e4:	mov	r1, #10
   187e8:	pop	{r4, r5, r6, r7, fp, lr}
   187ec:	b	11f54 <__overflow@plt>
   187f0:	push	{fp, lr}
   187f4:	mov	fp, sp
   187f8:	sub	sp, sp, #56	; 0x38
   187fc:	mov	r4, r0
   18800:	cmp	r0, #0
   18804:	bne	18d2c <__assert_fail@plt+0x6ca0>
   18808:	movw	r1, #40805	; 0x9f65
   1880c:	mov	r0, #0
   18810:	mov	r2, #5
   18814:	movt	r1, #2
   18818:	bl	11cb4 <dcgettext@plt>
   1881c:	mov	r1, r0
   18820:	movw	r0, #992	; 0x3e0
   18824:	movt	r0, #4
   18828:	ldr	r2, [r0]
   1882c:	mov	r0, #1
   18830:	bl	11f00 <__printf_chk@plt>
   18834:	movw	r1, #40838	; 0x9f86
   18838:	mov	r0, #0
   1883c:	mov	r2, #5
   18840:	movt	r1, #2
   18844:	bl	11cb4 <dcgettext@plt>
   18848:	movw	r7, #62220	; 0xf30c
   1884c:	movt	r7, #3
   18850:	ldr	r1, [r7]
   18854:	bl	11b94 <fputs_unlocked@plt>
   18858:	movw	r1, #50011	; 0xc35b
   1885c:	mov	r0, #0
   18860:	mov	r2, #5
   18864:	movt	r1, #2
   18868:	bl	11cb4 <dcgettext@plt>
   1886c:	ldr	r1, [r7]
   18870:	bl	11b94 <fputs_unlocked@plt>
   18874:	movw	r1, #40982	; 0xa016
   18878:	mov	r0, #0
   1887c:	mov	r2, #5
   18880:	movt	r1, #2
   18884:	bl	11cb4 <dcgettext@plt>
   18888:	ldr	r1, [r7]
   1888c:	bl	11b94 <fputs_unlocked@plt>
   18890:	movw	r1, #41253	; 0xa125
   18894:	mov	r0, #0
   18898:	mov	r2, #5
   1889c:	movt	r1, #2
   188a0:	bl	11cb4 <dcgettext@plt>
   188a4:	ldr	r1, [r7]
   188a8:	bl	11b94 <fputs_unlocked@plt>
   188ac:	movw	r1, #41409	; 0xa1c1
   188b0:	mov	r0, #0
   188b4:	mov	r2, #5
   188b8:	movt	r1, #2
   188bc:	bl	11cb4 <dcgettext@plt>
   188c0:	ldr	r1, [r7]
   188c4:	bl	11b94 <fputs_unlocked@plt>
   188c8:	movw	r1, #41771	; 0xa32b
   188cc:	mov	r0, #0
   188d0:	mov	r2, #5
   188d4:	movt	r1, #2
   188d8:	bl	11cb4 <dcgettext@plt>
   188dc:	ldr	r1, [r7]
   188e0:	bl	11b94 <fputs_unlocked@plt>
   188e4:	movw	r1, #42046	; 0xa43e
   188e8:	mov	r0, #0
   188ec:	mov	r2, #5
   188f0:	movt	r1, #2
   188f4:	bl	11cb4 <dcgettext@plt>
   188f8:	ldr	r1, [r7]
   188fc:	bl	11b94 <fputs_unlocked@plt>
   18900:	movw	r1, #42461	; 0xa5dd
   18904:	mov	r0, #0
   18908:	mov	r2, #5
   1890c:	movt	r1, #2
   18910:	bl	11cb4 <dcgettext@plt>
   18914:	ldr	r1, [r7]
   18918:	bl	11b94 <fputs_unlocked@plt>
   1891c:	movw	r1, #42522	; 0xa61a
   18920:	mov	r0, #0
   18924:	mov	r2, #5
   18928:	movt	r1, #2
   1892c:	bl	11cb4 <dcgettext@plt>
   18930:	ldr	r1, [r7]
   18934:	bl	11b94 <fputs_unlocked@plt>
   18938:	movw	r1, #42767	; 0xa70f
   1893c:	mov	r0, #0
   18940:	mov	r2, #5
   18944:	movt	r1, #2
   18948:	bl	11cb4 <dcgettext@plt>
   1894c:	ldr	r1, [r7]
   18950:	bl	11b94 <fputs_unlocked@plt>
   18954:	movw	r1, #42840	; 0xa758
   18958:	mov	r0, #0
   1895c:	mov	r2, #5
   18960:	movt	r1, #2
   18964:	bl	11cb4 <dcgettext@plt>
   18968:	ldr	r1, [r7]
   1896c:	bl	11b94 <fputs_unlocked@plt>
   18970:	movw	r1, #42990	; 0xa7ee
   18974:	mov	r0, #0
   18978:	mov	r2, #5
   1897c:	movt	r1, #2
   18980:	bl	11cb4 <dcgettext@plt>
   18984:	ldr	r1, [r7]
   18988:	bl	11b94 <fputs_unlocked@plt>
   1898c:	movw	r1, #43412	; 0xa994
   18990:	mov	r0, #0
   18994:	mov	r2, #5
   18998:	movt	r1, #2
   1899c:	bl	11cb4 <dcgettext@plt>
   189a0:	ldr	r1, [r7]
   189a4:	bl	11b94 <fputs_unlocked@plt>
   189a8:	movw	r1, #43468	; 0xa9cc
   189ac:	mov	r0, #0
   189b0:	mov	r2, #5
   189b4:	movt	r1, #2
   189b8:	bl	11cb4 <dcgettext@plt>
   189bc:	ldr	r1, [r7]
   189c0:	bl	11b94 <fputs_unlocked@plt>
   189c4:	movw	r1, #43822	; 0xab2e
   189c8:	mov	r0, #0
   189cc:	mov	r2, #5
   189d0:	movt	r1, #2
   189d4:	bl	11cb4 <dcgettext@plt>
   189d8:	ldr	r1, [r7]
   189dc:	bl	11b94 <fputs_unlocked@plt>
   189e0:	movw	r1, #43977	; 0xabc9
   189e4:	mov	r0, #0
   189e8:	mov	r2, #5
   189ec:	movt	r1, #2
   189f0:	bl	11cb4 <dcgettext@plt>
   189f4:	ldr	r1, [r7]
   189f8:	bl	11b94 <fputs_unlocked@plt>
   189fc:	movw	r1, #44336	; 0xad30
   18a00:	mov	r0, #0
   18a04:	mov	r2, #5
   18a08:	movt	r1, #2
   18a0c:	bl	11cb4 <dcgettext@plt>
   18a10:	ldr	r1, [r7]
   18a14:	bl	11b94 <fputs_unlocked@plt>
   18a18:	movw	r1, #44639	; 0xae5f
   18a1c:	mov	r0, #0
   18a20:	mov	r2, #5
   18a24:	movt	r1, #2
   18a28:	bl	11cb4 <dcgettext@plt>
   18a2c:	ldr	r1, [r7]
   18a30:	bl	11b94 <fputs_unlocked@plt>
   18a34:	movw	r1, #45224	; 0xb0a8
   18a38:	mov	r0, #0
   18a3c:	mov	r2, #5
   18a40:	movt	r1, #2
   18a44:	bl	11cb4 <dcgettext@plt>
   18a48:	ldr	r1, [r7]
   18a4c:	bl	11b94 <fputs_unlocked@plt>
   18a50:	movw	r1, #45421	; 0xb16d
   18a54:	mov	r0, #0
   18a58:	mov	r2, #5
   18a5c:	movt	r1, #2
   18a60:	bl	11cb4 <dcgettext@plt>
   18a64:	ldr	r1, [r7]
   18a68:	bl	11b94 <fputs_unlocked@plt>
   18a6c:	movw	r1, #46062	; 0xb3ee
   18a70:	mov	r0, #0
   18a74:	mov	r2, #5
   18a78:	movt	r1, #2
   18a7c:	bl	11cb4 <dcgettext@plt>
   18a80:	ldr	r1, [r7]
   18a84:	bl	11b94 <fputs_unlocked@plt>
   18a88:	movw	r1, #46141	; 0xb43d
   18a8c:	mov	r0, #0
   18a90:	mov	r2, #5
   18a94:	movt	r1, #2
   18a98:	bl	11cb4 <dcgettext@plt>
   18a9c:	ldr	r1, [r7]
   18aa0:	bl	11b94 <fputs_unlocked@plt>
   18aa4:	movw	r1, #46282	; 0xb4ca
   18aa8:	mov	r0, #0
   18aac:	mov	r2, #5
   18ab0:	movt	r1, #2
   18ab4:	bl	11cb4 <dcgettext@plt>
   18ab8:	ldr	r1, [r7]
   18abc:	bl	11b94 <fputs_unlocked@plt>
   18ac0:	movw	r1, #46654	; 0xb63e
   18ac4:	mov	r0, #0
   18ac8:	mov	r2, #5
   18acc:	movt	r1, #2
   18ad0:	bl	11cb4 <dcgettext@plt>
   18ad4:	ldr	r1, [r7]
   18ad8:	bl	11b94 <fputs_unlocked@plt>
   18adc:	movw	r1, #47062	; 0xb7d6
   18ae0:	mov	r0, #0
   18ae4:	mov	r2, #5
   18ae8:	movt	r1, #2
   18aec:	bl	11cb4 <dcgettext@plt>
   18af0:	ldr	r1, [r7]
   18af4:	bl	11b94 <fputs_unlocked@plt>
   18af8:	movw	r1, #47107	; 0xb803
   18afc:	mov	r0, #0
   18b00:	mov	r2, #5
   18b04:	movt	r1, #2
   18b08:	bl	11cb4 <dcgettext@plt>
   18b0c:	ldr	r1, [r7]
   18b10:	bl	11b94 <fputs_unlocked@plt>
   18b14:	movw	r1, #50086	; 0xc3a6
   18b18:	mov	r0, #0
   18b1c:	mov	r2, #5
   18b20:	movt	r1, #2
   18b24:	bl	11cb4 <dcgettext@plt>
   18b28:	ldr	r1, [r7]
   18b2c:	bl	11b94 <fputs_unlocked@plt>
   18b30:	movw	r1, #47161	; 0xb839
   18b34:	mov	r0, #0
   18b38:	mov	r2, #5
   18b3c:	movt	r1, #2
   18b40:	bl	11cb4 <dcgettext@plt>
   18b44:	ldr	r1, [r7]
   18b48:	bl	11b94 <fputs_unlocked@plt>
   18b4c:	movw	r1, #47537	; 0xb9b1
   18b50:	mov	r0, #0
   18b54:	mov	r2, #5
   18b58:	movt	r1, #2
   18b5c:	bl	11cb4 <dcgettext@plt>
   18b60:	ldr	r1, [r7]
   18b64:	bl	11b94 <fputs_unlocked@plt>
   18b68:	movw	r1, #47613	; 0xb9fd
   18b6c:	mov	r0, #0
   18b70:	mov	r2, #5
   18b74:	movt	r1, #2
   18b78:	bl	11cb4 <dcgettext@plt>
   18b7c:	ldr	r1, [r7]
   18b80:	bl	11b94 <fputs_unlocked@plt>
   18b84:	movw	r1, #47899	; 0xbb1b
   18b88:	mov	r0, #0
   18b8c:	mov	r2, #5
   18b90:	movt	r1, #2
   18b94:	bl	11cb4 <dcgettext@plt>
   18b98:	ldr	r1, [r7]
   18b9c:	bl	11b94 <fputs_unlocked@plt>
   18ba0:	movw	r1, #56448	; 0xdc80
   18ba4:	mov	r3, #48	; 0x30
   18ba8:	movw	r0, #62112	; 0xf2a0
   18bac:	mov	r6, sp
   18bb0:	movt	r1, #2
   18bb4:	movt	r0, #3
   18bb8:	add	r2, r1, #32
   18bbc:	add	r5, r1, #16
   18bc0:	vld1.64	{d18-d19}, [r1], r3
   18bc4:	ldr	r0, [r0]
   18bc8:	vld1.64	{d20-d21}, [r5]
   18bcc:	vld1.64	{d16-d17}, [r2]
   18bd0:	add	r2, r6, #32
   18bd4:	movw	r5, #48422	; 0xbd26
   18bd8:	movt	r5, #2
   18bdc:	vldr	d22, [r1]
   18be0:	add	r1, r6, #16
   18be4:	cmp	r0, #2
   18be8:	vst1.64	{d20-d21}, [r1]
   18bec:	mov	r1, r6
   18bf0:	vst1.64	{d16-d17}, [r2]
   18bf4:	movw	r2, #48051	; 0xbbb3
   18bf8:	vst1.64	{d18-d19}, [r1], r3
   18bfc:	movt	r2, #2
   18c00:	vstr	d22, [r1]
   18c04:	movw	r1, #49069	; 0xbfad
   18c08:	movt	r1, #2
   18c0c:	moveq	r2, r1
   18c10:	movw	r1, #40662	; 0x9ed6
   18c14:	cmp	r0, #1
   18c18:	movne	r5, r2
   18c1c:	movt	r1, #2
   18c20:	mov	r0, r5
   18c24:	bl	11bd0 <strcmp@plt>
   18c28:	cmp	r0, #0
   18c2c:	ldrne	r1, [r6, #8]!
   18c30:	cmpne	r1, #0
   18c34:	bne	18c20 <__assert_fail@plt+0x6b94>
   18c38:	ldr	r6, [r6, #4]
   18c3c:	movw	r1, #50391	; 0xc4d7
   18c40:	mov	r0, #0
   18c44:	mov	r2, #5
   18c48:	movt	r1, #2
   18c4c:	bl	11cb4 <dcgettext@plt>
   18c50:	movw	r2, #48411	; 0xbd1b
   18c54:	movw	r3, #50414	; 0xc4ee
   18c58:	mov	r1, r0
   18c5c:	mov	r0, #1
   18c60:	movt	r2, #2
   18c64:	movt	r3, #2
   18c68:	bl	11f00 <__printf_chk@plt>
   18c6c:	cmp	r6, #0
   18c70:	mov	r0, #5
   18c74:	mov	r1, #0
   18c78:	moveq	r6, r5
   18c7c:	bl	11f60 <setlocale@plt>
   18c80:	cmp	r0, #0
   18c84:	beq	18cbc <__assert_fail@plt+0x6c30>
   18c88:	movw	r1, #50454	; 0xc516
   18c8c:	mov	r2, #3
   18c90:	movt	r1, #2
   18c94:	bl	1202c <strncmp@plt>
   18c98:	cmp	r0, #0
   18c9c:	beq	18cbc <__assert_fail@plt+0x6c30>
   18ca0:	movw	r1, #50458	; 0xc51a
   18ca4:	mov	r0, #0
   18ca8:	mov	r2, #5
   18cac:	movt	r1, #2
   18cb0:	bl	11cb4 <dcgettext@plt>
   18cb4:	ldr	r1, [r7]
   18cb8:	bl	11b94 <fputs_unlocked@plt>
   18cbc:	movw	r1, #50529	; 0xc561
   18cc0:	mov	r0, #0
   18cc4:	mov	r2, #5
   18cc8:	movt	r1, #2
   18ccc:	bl	11cb4 <dcgettext@plt>
   18cd0:	movw	r2, #50414	; 0xc4ee
   18cd4:	mov	r1, r0
   18cd8:	mov	r0, #1
   18cdc:	mov	r3, r5
   18ce0:	movt	r2, #2
   18ce4:	bl	11f00 <__printf_chk@plt>
   18ce8:	movw	r1, #50556	; 0xc57c
   18cec:	mov	r0, #0
   18cf0:	mov	r2, #5
   18cf4:	movt	r1, #2
   18cf8:	bl	11cb4 <dcgettext@plt>
   18cfc:	movw	r3, #49853	; 0xc2bd
   18d00:	mov	r1, r0
   18d04:	movw	r0, #50324	; 0xc494
   18d08:	cmp	r6, r5
   18d0c:	mov	r2, r6
   18d10:	movt	r0, #2
   18d14:	movt	r3, #2
   18d18:	moveq	r3, r0
   18d1c:	mov	r0, #1
   18d20:	bl	11f00 <__printf_chk@plt>
   18d24:	mov	r0, r4
   18d28:	bl	11e88 <exit@plt>
   18d2c:	movw	r0, #62216	; 0xf308
   18d30:	movw	r1, #40766	; 0x9f3e
   18d34:	mov	r2, #5
   18d38:	movt	r0, #3
   18d3c:	movt	r1, #2
   18d40:	ldr	r5, [r0]
   18d44:	mov	r0, #0
   18d48:	bl	11cb4 <dcgettext@plt>
   18d4c:	mov	r2, r0
   18d50:	movw	r0, #992	; 0x3e0
   18d54:	mov	r1, #1
   18d58:	movt	r0, #4
   18d5c:	ldr	r3, [r0]
   18d60:	mov	r0, r5
   18d64:	bl	11f24 <__fprintf_chk@plt>
   18d68:	mov	r0, r4
   18d6c:	bl	11e88 <exit@plt>
   18d70:	push	{r4, sl, fp, lr}
   18d74:	add	fp, sp, #8
   18d78:	mov	r4, r0
   18d7c:	movw	r0, #62456	; 0xf3f8
   18d80:	movt	r0, #3
   18d84:	ldrb	r1, [r0]
   18d88:	cmp	r1, #0
   18d8c:	bne	18db0 <__assert_fail@plt+0x6d24>
   18d90:	mov	r1, #1
   18d94:	strb	r1, [r0]
   18d98:	mov	r0, #1
   18d9c:	bl	11ea0 <tcgetpgrp@plt>
   18da0:	cmp	r0, #0
   18da4:	movge	r0, #1
   18da8:	blge	18e14 <__assert_fail@plt+0x6d88>
   18dac:	bl	18dd0 <__assert_fail@plt+0x6d44>
   18db0:	movw	r0, #62220	; 0xf30c
   18db4:	ldr	r1, [r4]
   18db8:	mov	r2, #1
   18dbc:	movt	r0, #3
   18dc0:	ldr	r3, [r0]
   18dc4:	ldr	r0, [r4, #4]
   18dc8:	pop	{r4, sl, fp, lr}
   18dcc:	b	11c90 <fwrite_unlocked@plt>
   18dd0:	push	{r4, sl, fp, lr}
   18dd4:	add	fp, sp, #8
   18dd8:	movw	r4, #61896	; 0xf1c8
   18ddc:	movt	r4, #3
   18de0:	ldr	r0, [r4, #20]
   18de4:	cmp	r0, #0
   18de8:	beq	18df8 <__assert_fail@plt+0x6d6c>
   18dec:	add	r0, r4, #16
   18df0:	pop	{r4, sl, fp, lr}
   18df4:	b	18d70 <__assert_fail@plt+0x6ce4>
   18df8:	mov	r0, r4
   18dfc:	bl	18d70 <__assert_fail@plt+0x6ce4>
   18e00:	add	r0, r4, #24
   18e04:	bl	18d70 <__assert_fail@plt+0x6ce4>
   18e08:	add	r0, r4, #8
   18e0c:	pop	{r4, sl, fp, lr}
   18e10:	b	18d70 <__assert_fail@plt+0x6ce4>
   18e14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e18:	add	fp, sp, #28
   18e1c:	sub	sp, sp, #140	; 0x8c
   18e20:	cmp	r0, #0
   18e24:	beq	18efc <__assert_fail@plt+0x6e70>
   18e28:	movw	r8, #62736	; 0xf510
   18e2c:	movt	r8, #3
   18e30:	mov	r0, r8
   18e34:	bl	11f6c <sigemptyset@plt>
   18e38:	movw	r7, #50608	; 0xc5b0
   18e3c:	mov	r5, #0
   18e40:	mov	r4, sp
   18e44:	movt	r7, #2
   18e48:	ldr	r6, [r7, r5, lsl #2]
   18e4c:	mov	r1, #0
   18e50:	mov	r2, r4
   18e54:	mov	r0, r6
   18e58:	bl	11d44 <sigaction@plt>
   18e5c:	ldr	r0, [sp]
   18e60:	cmp	r0, #1
   18e64:	beq	18e74 <__assert_fail@plt+0x6de8>
   18e68:	mov	r0, r8
   18e6c:	mov	r1, r6
   18e70:	bl	11e10 <sigaddset@plt>
   18e74:	add	r5, r5, #1
   18e78:	cmp	r5, #12
   18e7c:	bne	18e48 <__assert_fail@plt+0x6dbc>
   18e80:	movw	r8, #62736	; 0xf510
   18e84:	add	r0, r4, #4
   18e88:	mov	r2, #128	; 0x80
   18e8c:	movt	r8, #3
   18e90:	mov	r1, r8
   18e94:	bl	11c60 <memcpy@plt>
   18e98:	movw	r9, #37052	; 0x90bc
   18e9c:	movw	sl, #37096	; 0x90e8
   18ea0:	mov	r0, #268435456	; 0x10000000
   18ea4:	mov	r5, #0
   18ea8:	movt	r9, #1
   18eac:	movt	sl, #1
   18eb0:	str	r0, [sp, #132]	; 0x84
   18eb4:	ldr	r6, [r7, -r5, lsl #2]
   18eb8:	mov	r0, r8
   18ebc:	mov	r1, r6
   18ec0:	bl	11ccc <sigismember@plt>
   18ec4:	cmp	r0, #0
   18ec8:	beq	18eec <__assert_fail@plt+0x6e60>
   18ecc:	cmp	r5, #0
   18ed0:	mov	r0, sl
   18ed4:	mov	r1, r4
   18ed8:	mov	r2, #0
   18edc:	moveq	r0, r9
   18ee0:	str	r0, [sp]
   18ee4:	mov	r0, r6
   18ee8:	bl	11d44 <sigaction@plt>
   18eec:	sub	r5, r5, #1
   18ef0:	cmn	r5, #12
   18ef4:	bne	18eb4 <__assert_fail@plt+0x6e28>
   18ef8:	b	190b4 <__assert_fail@plt+0x7028>
   18efc:	movw	r0, #62736	; 0xf510
   18f00:	mov	r1, #20
   18f04:	movt	r0, #3
   18f08:	bl	11ccc <sigismember@plt>
   18f0c:	cmp	r0, #0
   18f10:	beq	18f20 <__assert_fail@plt+0x6e94>
   18f14:	mov	r0, #20
   18f18:	mov	r1, #0
   18f1c:	bl	11c84 <signal@plt>
   18f20:	movw	r0, #62736	; 0xf510
   18f24:	mov	r1, #14
   18f28:	movt	r0, #3
   18f2c:	bl	11ccc <sigismember@plt>
   18f30:	cmp	r0, #0
   18f34:	beq	18f44 <__assert_fail@plt+0x6eb8>
   18f38:	mov	r0, #14
   18f3c:	mov	r1, #0
   18f40:	bl	11c84 <signal@plt>
   18f44:	movw	r0, #62736	; 0xf510
   18f48:	mov	r1, #1
   18f4c:	movt	r0, #3
   18f50:	bl	11ccc <sigismember@plt>
   18f54:	cmp	r0, #0
   18f58:	beq	18f68 <__assert_fail@plt+0x6edc>
   18f5c:	mov	r0, #1
   18f60:	mov	r1, #0
   18f64:	bl	11c84 <signal@plt>
   18f68:	movw	r0, #62736	; 0xf510
   18f6c:	mov	r1, #2
   18f70:	movt	r0, #3
   18f74:	bl	11ccc <sigismember@plt>
   18f78:	cmp	r0, #0
   18f7c:	beq	18f8c <__assert_fail@plt+0x6f00>
   18f80:	mov	r0, #2
   18f84:	mov	r1, #0
   18f88:	bl	11c84 <signal@plt>
   18f8c:	movw	r0, #62736	; 0xf510
   18f90:	mov	r1, #13
   18f94:	movt	r0, #3
   18f98:	bl	11ccc <sigismember@plt>
   18f9c:	cmp	r0, #0
   18fa0:	beq	18fb0 <__assert_fail@plt+0x6f24>
   18fa4:	mov	r0, #13
   18fa8:	mov	r1, #0
   18fac:	bl	11c84 <signal@plt>
   18fb0:	movw	r0, #62736	; 0xf510
   18fb4:	mov	r1, #3
   18fb8:	movt	r0, #3
   18fbc:	bl	11ccc <sigismember@plt>
   18fc0:	cmp	r0, #0
   18fc4:	beq	18fd4 <__assert_fail@plt+0x6f48>
   18fc8:	mov	r0, #3
   18fcc:	mov	r1, #0
   18fd0:	bl	11c84 <signal@plt>
   18fd4:	movw	r0, #62736	; 0xf510
   18fd8:	mov	r1, #15
   18fdc:	movt	r0, #3
   18fe0:	bl	11ccc <sigismember@plt>
   18fe4:	cmp	r0, #0
   18fe8:	beq	18ff8 <__assert_fail@plt+0x6f6c>
   18fec:	mov	r0, #15
   18ff0:	mov	r1, #0
   18ff4:	bl	11c84 <signal@plt>
   18ff8:	movw	r0, #62736	; 0xf510
   18ffc:	mov	r1, #29
   19000:	movt	r0, #3
   19004:	bl	11ccc <sigismember@plt>
   19008:	cmp	r0, #0
   1900c:	beq	1901c <__assert_fail@plt+0x6f90>
   19010:	mov	r0, #29
   19014:	mov	r1, #0
   19018:	bl	11c84 <signal@plt>
   1901c:	movw	r0, #62736	; 0xf510
   19020:	mov	r1, #27
   19024:	movt	r0, #3
   19028:	bl	11ccc <sigismember@plt>
   1902c:	cmp	r0, #0
   19030:	beq	19040 <__assert_fail@plt+0x6fb4>
   19034:	mov	r0, #27
   19038:	mov	r1, #0
   1903c:	bl	11c84 <signal@plt>
   19040:	movw	r0, #62736	; 0xf510
   19044:	mov	r1, #26
   19048:	movt	r0, #3
   1904c:	bl	11ccc <sigismember@plt>
   19050:	cmp	r0, #0
   19054:	beq	19064 <__assert_fail@plt+0x6fd8>
   19058:	mov	r0, #26
   1905c:	mov	r1, #0
   19060:	bl	11c84 <signal@plt>
   19064:	movw	r0, #62736	; 0xf510
   19068:	mov	r1, #24
   1906c:	movt	r0, #3
   19070:	bl	11ccc <sigismember@plt>
   19074:	cmp	r0, #0
   19078:	beq	19088 <__assert_fail@plt+0x6ffc>
   1907c:	mov	r0, #24
   19080:	mov	r1, #0
   19084:	bl	11c84 <signal@plt>
   19088:	movw	r0, #62736	; 0xf510
   1908c:	mov	r1, #25
   19090:	movt	r0, #3
   19094:	bl	11ccc <sigismember@plt>
   19098:	cmp	r0, #0
   1909c:	beq	190b4 <__assert_fail@plt+0x7028>
   190a0:	mov	r0, #25
   190a4:	mov	r1, #0
   190a8:	sub	sp, fp, #28
   190ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190b0:	b	11c84 <signal@plt>
   190b4:	sub	sp, fp, #28
   190b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190bc:	movw	r0, #62464	; 0xf400
   190c0:	movt	r0, #3
   190c4:	ldr	r0, [r0]
   190c8:	cmp	r0, #0
   190cc:	bxne	lr
   190d0:	movw	r0, #62460	; 0xf3fc
   190d4:	movt	r0, #3
   190d8:	ldr	r1, [r0]
   190dc:	add	r1, r1, #1
   190e0:	str	r1, [r0]
   190e4:	bx	lr
   190e8:	movw	r1, #62464	; 0xf400
   190ec:	movt	r1, #3
   190f0:	ldr	r2, [r1]
   190f4:	cmp	r2, #0
   190f8:	streq	r0, [r1]
   190fc:	bx	lr
   19100:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19104:	add	fp, sp, #28
   19108:	sub	sp, sp, #4
   1910c:	ldr	lr, [r0]
   19110:	ldr	ip, [r1]
   19114:	mov	r6, #0
   19118:	mov	r9, #0
   1911c:	mov	r5, #0
   19120:	cmp	r6, #4
   19124:	bhi	195cc <__assert_fail@plt+0x7540>
   19128:	add	r4, pc, #4
   1912c:	mov	r7, r5
   19130:	ldr	pc, [r4, r6, lsl #2]
   19134:	andeq	r9, r1, r8, asr #2
   19138:	andeq	r9, r1, r4, lsl #5
   1913c:	andeq	r9, r1, r4, lsr #4
   19140:	andeq	r9, r1, r0, asr r2
   19144:	andeq	r9, r1, r4, lsl #4
   19148:	ldrb	sl, [ip]
   1914c:	mov	r6, #5
   19150:	sub	r5, sl, #58	; 0x3a
   19154:	cmp	r5, #36	; 0x24
   19158:	bhi	19500 <__assert_fail@plt+0x7474>
   1915c:	add	r4, pc, #0
   19160:	ldr	pc, [r4, r5, lsl #2]
   19164:			; <UNDEFINED> instruction: 0x000195b0
   19168:	andeq	r9, r1, r8, lsl #10
   1916c:	andeq	r9, r1, r8, lsl #10
   19170:	strdeq	r9, [r1], -r8
   19174:	andeq	r9, r1, r8, lsl #10
   19178:	andeq	r9, r1, r8, lsl #10
   1917c:	andeq	r9, r1, r8, lsl #10
   19180:	andeq	r9, r1, r8, lsl #10
   19184:	andeq	r9, r1, r8, lsl #10
   19188:	andeq	r9, r1, r8, lsl #10
   1918c:	andeq	r9, r1, r8, lsl #10
   19190:	andeq	r9, r1, r8, lsl #10
   19194:	andeq	r9, r1, r8, lsl #10
   19198:	andeq	r9, r1, r8, lsl #10
   1919c:	andeq	r9, r1, r8, lsl #10
   191a0:	andeq	r9, r1, r8, lsl #10
   191a4:	andeq	r9, r1, r8, lsl #10
   191a8:	andeq	r9, r1, r8, lsl #10
   191ac:	andeq	r9, r1, r8, lsl #10
   191b0:	andeq	r9, r1, r8, lsl #10
   191b4:	andeq	r9, r1, r8, lsl #10
   191b8:	andeq	r9, r1, r8, lsl #10
   191bc:	andeq	r9, r1, r8, lsl #10
   191c0:	andeq	r9, r1, r8, lsl #10
   191c4:	andeq	r9, r1, r8, lsl #10
   191c8:	andeq	r9, r1, r8, lsl #10
   191cc:	andeq	r9, r1, r8, lsl #10
   191d0:	andeq	r9, r1, r8, lsl #10
   191d4:	andeq	r9, r1, r8, lsl #10
   191d8:	andeq	r9, r1, r8, lsl #10
   191dc:	andeq	r9, r1, r8, lsl #10
   191e0:	andeq	r9, r1, r8, lsl #10
   191e4:	andeq	r9, r1, r8, lsl #10
   191e8:	andeq	r9, r1, r8, lsl #10
   191ec:	andeq	r9, r1, r8, ror #9
   191f0:	andeq	r9, r1, r8, lsl #10
   191f4:	strdeq	r9, [r1], -r4
   191f8:	cmp	r2, #0
   191fc:	beq	19508 <__assert_fail@plt+0x747c>
   19200:	b	195b0 <__assert_fail@plt+0x7524>
   19204:	ldrb	r4, [ip]
   19208:	sub	r5, r4, #64	; 0x40
   1920c:	uxtb	r5, r5
   19210:	cmp	r5, #62	; 0x3e
   19214:	bhi	194a8 <__assert_fail@plt+0x741c>
   19218:	and	r4, r4, #31
   1921c:	strb	r4, [lr], #1
   19220:	b	1950c <__assert_fail@plt+0x7480>
   19224:	ldrb	r4, [ip]
   19228:	and	r5, r4, #248	; 0xf8
   1922c:	cmp	r5, #48	; 0x30
   19230:	bne	194a0 <__assert_fail@plt+0x7414>
   19234:	add	r4, r4, r7, lsl #3
   19238:	add	ip, ip, #1
   1923c:	mov	r6, #2
   19240:	sub	r5, r4, #48	; 0x30
   19244:	cmp	r6, #5
   19248:	bcc	19120 <__assert_fail@plt+0x7094>
   1924c:	b	195b0 <__assert_fail@plt+0x7524>
   19250:	ldrb	r4, [ip]
   19254:	sub	r5, r4, #48	; 0x30
   19258:	cmp	r5, #10
   1925c:	bcc	194c0 <__assert_fail@plt+0x7434>
   19260:	sub	r5, r4, #65	; 0x41
   19264:	cmp	r5, #6
   19268:	bcc	194cc <__assert_fail@plt+0x7440>
   1926c:	sub	r5, r4, #97	; 0x61
   19270:	cmp	r5, #6
   19274:	bcs	194a0 <__assert_fail@plt+0x7414>
   19278:	add	r4, r4, r7, lsl #4
   1927c:	sub	r5, r4, #87	; 0x57
   19280:	b	194d4 <__assert_fail@plt+0x7448>
   19284:	ldrb	r4, [ip]
   19288:	cmp	r4, #120	; 0x78
   1928c:	bhi	19528 <__assert_fail@plt+0x749c>
   19290:	add	r8, pc, #12
   19294:	mov	sl, #7
   19298:	mov	r6, #3
   1929c:	mov	r5, #0
   192a0:	ldr	pc, [r8, r4, lsl #2]
   192a4:	andeq	r9, r1, r0, lsr r5
   192a8:	andeq	r9, r1, r8, lsr #10
   192ac:	andeq	r9, r1, r8, lsr #10
   192b0:	andeq	r9, r1, r8, lsr #10
   192b4:	andeq	r9, r1, r8, lsr #10
   192b8:	andeq	r9, r1, r8, lsr #10
   192bc:	andeq	r9, r1, r8, lsr #10
   192c0:	andeq	r9, r1, r8, lsr #10
   192c4:	andeq	r9, r1, r8, lsr #10
   192c8:	andeq	r9, r1, r8, lsr #10
   192cc:	andeq	r9, r1, r8, lsr #10
   192d0:	andeq	r9, r1, r8, lsr #10
   192d4:	andeq	r9, r1, r8, lsr #10
   192d8:	andeq	r9, r1, r8, lsr #10
   192dc:	andeq	r9, r1, r8, lsr #10
   192e0:	andeq	r9, r1, r8, lsr #10
   192e4:	andeq	r9, r1, r8, lsr #10
   192e8:	andeq	r9, r1, r8, lsr #10
   192ec:	andeq	r9, r1, r8, lsr #10
   192f0:	andeq	r9, r1, r8, lsr #10
   192f4:	andeq	r9, r1, r8, lsr #10
   192f8:	andeq	r9, r1, r8, lsr #10
   192fc:	andeq	r9, r1, r8, lsr #10
   19300:	andeq	r9, r1, r8, lsr #10
   19304:	andeq	r9, r1, r8, lsr #10
   19308:	andeq	r9, r1, r8, lsr #10
   1930c:	andeq	r9, r1, r8, lsr #10
   19310:	andeq	r9, r1, r8, lsr #10
   19314:	andeq	r9, r1, r8, lsr #10
   19318:	andeq	r9, r1, r8, lsr #10
   1931c:	andeq	r9, r1, r8, lsr #10
   19320:	andeq	r9, r1, r8, lsr #10
   19324:	andeq	r9, r1, r8, lsr #10
   19328:	andeq	r9, r1, r8, lsr #10
   1932c:	andeq	r9, r1, r8, lsr #10
   19330:	andeq	r9, r1, r8, lsr #10
   19334:	andeq	r9, r1, r8, lsr #10
   19338:	andeq	r9, r1, r8, lsr #10
   1933c:	andeq	r9, r1, r8, lsr #10
   19340:	andeq	r9, r1, r8, lsr #10
   19344:	andeq	r9, r1, r8, lsr #10
   19348:	andeq	r9, r1, r8, lsr #10
   1934c:	andeq	r9, r1, r8, lsr #10
   19350:	andeq	r9, r1, r8, lsr #10
   19354:	andeq	r9, r1, r8, lsr #10
   19358:	andeq	r9, r1, r8, lsr #10
   1935c:	andeq	r9, r1, r8, lsr #10
   19360:	andeq	r9, r1, r8, lsr #10
   19364:	andeq	r9, r1, r8, lsl #9
   19368:	andeq	r9, r1, r8, lsl #9
   1936c:	andeq	r9, r1, r8, lsl #9
   19370:	andeq	r9, r1, r8, lsl #9
   19374:	andeq	r9, r1, r8, lsl #9
   19378:	andeq	r9, r1, r8, lsl #9
   1937c:	andeq	r9, r1, r8, lsl #9
   19380:	andeq	r9, r1, r8, lsl #9
   19384:	andeq	r9, r1, r8, lsr #10
   19388:	andeq	r9, r1, r8, lsr #10
   1938c:	andeq	r9, r1, r8, lsr #10
   19390:	andeq	r9, r1, r8, lsr #10
   19394:	andeq	r9, r1, r8, lsr #10
   19398:	andeq	r9, r1, r8, lsr #10
   1939c:	andeq	r9, r1, r8, lsr #10
   193a0:	andeq	r9, r1, r8, ror r5
   193a4:	andeq	r9, r1, r8, lsr #10
   193a8:	andeq	r9, r1, r8, lsr #10
   193ac:	andeq	r9, r1, r8, lsr #10
   193b0:	andeq	r9, r1, r8, lsr #10
   193b4:	andeq	r9, r1, r8, lsr #10
   193b8:	andeq	r9, r1, r8, lsr #10
   193bc:	andeq	r9, r1, r8, lsr #10
   193c0:	andeq	r9, r1, r8, lsr #10
   193c4:	andeq	r9, r1, r8, lsr #10
   193c8:	andeq	r9, r1, r8, lsr #10
   193cc:	andeq	r9, r1, r8, lsr #10
   193d0:	andeq	r9, r1, r8, lsr #10
   193d4:	andeq	r9, r1, r8, lsr #10
   193d8:	andeq	r9, r1, r8, lsr #10
   193dc:	andeq	r9, r1, r8, lsr #10
   193e0:	andeq	r9, r1, r8, lsr #10
   193e4:	andeq	r9, r1, r8, lsr #10
   193e8:	andeq	r9, r1, r8, lsr #10
   193ec:	andeq	r9, r1, r8, lsr #10
   193f0:	andeq	r9, r1, r8, lsr #10
   193f4:	andeq	r9, r1, r8, lsr #10
   193f8:	andeq	r9, r1, r8, lsr #10
   193fc:	andeq	r9, r1, r8, lsr #10
   19400:	andeq	r9, r1, r8, lsr #10
   19404:	muleq	r1, ip, r5
   19408:	andeq	r9, r1, r8, lsr #10
   1940c:	andeq	r9, r1, r8, lsr #10
   19410:	andeq	r9, r1, r8, lsr #10
   19414:	andeq	r9, r1, r8, lsr #10
   19418:	andeq	r9, r1, r8, lsr #10
   1941c:	andeq	r9, r1, r8, lsr #10
   19420:	andeq	r9, r1, r8, asr #10
   19424:	andeq	r9, r1, r8, lsr #10
   19428:	andeq	r9, r1, ip, lsl #11
   1942c:	andeq	r9, r1, r0, asr r5
   19430:	andeq	r9, r1, r8, lsr #10
   19434:	andeq	r9, r1, r8, lsr #10
   19438:	andeq	r9, r1, r8, asr r5
   1943c:	andeq	r9, r1, r0, ror #10
   19440:	andeq	r9, r1, r8, lsr #10
   19444:	andeq	r9, r1, r8, lsr #10
   19448:	andeq	r9, r1, r8, lsr #10
   1944c:	andeq	r9, r1, r8, lsr #10
   19450:	andeq	r9, r1, r8, lsr #10
   19454:	andeq	r9, r1, r8, lsr #10
   19458:	andeq	r9, r1, r8, lsr #10
   1945c:	andeq	r9, r1, r8, ror #10
   19460:	andeq	r9, r1, r8, lsr #10
   19464:	andeq	r9, r1, r8, lsr #10
   19468:	andeq	r9, r1, r8, lsr #10
   1946c:	andeq	r9, r1, r0, lsl #11
   19470:	andeq	r9, r1, r8, lsr #10
   19474:	andeq	r9, r1, r0, ror r5
   19478:	andeq	r9, r1, r8, lsr #10
   1947c:	andeq	r9, r1, r8, lsl #11
   19480:	andeq	r9, r1, r8, lsr #10
   19484:	muleq	r1, ip, r5
   19488:	sub	r5, r4, #48	; 0x30
   1948c:	mov	r6, #2
   19490:	add	ip, ip, #1
   19494:	cmp	r6, #5
   19498:	bcc	19120 <__assert_fail@plt+0x7094>
   1949c:	b	195b0 <__assert_fail@plt+0x7524>
   194a0:	strb	r7, [lr], #1
   194a4:	b	194b8 <__assert_fail@plt+0x742c>
   194a8:	cmp	r4, #63	; 0x3f
   194ac:	bne	195ac <__assert_fail@plt+0x7520>
   194b0:	mov	r4, #127	; 0x7f
   194b4:	strb	r4, [lr], #1
   194b8:	add	r9, r9, #1
   194bc:	b	19514 <__assert_fail@plt+0x7488>
   194c0:	add	r4, r4, r7, lsl #4
   194c4:	sub	r5, r4, #48	; 0x30
   194c8:	b	194d4 <__assert_fail@plt+0x7448>
   194cc:	add	r4, r4, r7, lsl #4
   194d0:	sub	r5, r4, #55	; 0x37
   194d4:	add	ip, ip, #1
   194d8:	mov	r6, #3
   194dc:	cmp	r6, #5
   194e0:	bcc	19120 <__assert_fail@plt+0x7094>
   194e4:	b	195b0 <__assert_fail@plt+0x7524>
   194e8:	add	ip, ip, #1
   194ec:	mov	r6, #1
   194f0:	b	19518 <__assert_fail@plt+0x748c>
   194f4:	add	ip, ip, #1
   194f8:	mov	r6, #4
   194fc:	b	19518 <__assert_fail@plt+0x748c>
   19500:	cmp	sl, #0
   19504:	beq	195b0 <__assert_fail@plt+0x7524>
   19508:	strb	sl, [lr], #1
   1950c:	add	r9, r9, #1
   19510:	add	ip, ip, #1
   19514:	mov	r6, #0
   19518:	mov	r5, r7
   1951c:	cmp	r6, #5
   19520:	bcc	19120 <__assert_fail@plt+0x7094>
   19524:	b	195b0 <__assert_fail@plt+0x7524>
   19528:	mov	sl, r4
   1952c:	b	1958c <__assert_fail@plt+0x7500>
   19530:	mov	r6, #6
   19534:	mov	r5, r7
   19538:	add	ip, ip, #1
   1953c:	cmp	r6, #5
   19540:	bcc	19120 <__assert_fail@plt+0x7094>
   19544:	b	195b0 <__assert_fail@plt+0x7524>
   19548:	mov	sl, #32
   1954c:	b	1958c <__assert_fail@plt+0x7500>
   19550:	mov	sl, #8
   19554:	b	1958c <__assert_fail@plt+0x7500>
   19558:	mov	sl, #27
   1955c:	b	1958c <__assert_fail@plt+0x7500>
   19560:	mov	sl, #12
   19564:	b	1958c <__assert_fail@plt+0x7500>
   19568:	mov	sl, #10
   1956c:	b	1958c <__assert_fail@plt+0x7500>
   19570:	mov	sl, #9
   19574:	b	1958c <__assert_fail@plt+0x7500>
   19578:	mov	sl, #127	; 0x7f
   1957c:	b	1958c <__assert_fail@plt+0x7500>
   19580:	mov	sl, #13
   19584:	b	1958c <__assert_fail@plt+0x7500>
   19588:	mov	sl, #11
   1958c:	strb	sl, [lr], #1
   19590:	add	r9, r9, #1
   19594:	mov	r6, #0
   19598:	mov	r5, sl
   1959c:	add	ip, ip, #1
   195a0:	cmp	r6, #5
   195a4:	bcc	19120 <__assert_fail@plt+0x7094>
   195a8:	b	195b0 <__assert_fail@plt+0x7524>
   195ac:	mov	r6, #6
   195b0:	str	lr, [r0]
   195b4:	subs	r0, r6, #6
   195b8:	str	ip, [r1]
   195bc:	str	r9, [r3]
   195c0:	movwne	r0, #1
   195c4:	sub	sp, fp, #28
   195c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195cc:	bl	12038 <abort@plt>
   195d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195d4:	add	fp, sp, #28
   195d8:	sub	sp, sp, #36	; 0x24
   195dc:	sub	sp, sp, #8192	; 0x2000
   195e0:	mov	r7, r0
   195e4:	mov	r6, r3
   195e8:	mov	r3, r2
   195ec:	mov	r2, r1
   195f0:	add	r0, sp, #27
   195f4:	mov	r1, #0
   195f8:	add	sl, sp, #32
   195fc:	str	r1, [sp]
   19600:	str	r0, [sp, #4]
   19604:	add	r0, sp, #28
   19608:	mov	r1, r7
   1960c:	str	sl, [sp, #28]
   19610:	str	r7, [sp, #16]
   19614:	bl	1aa38 <__assert_fail@plt+0x89ac>
   19618:	ldrb	r9, [sp, #27]
   1961c:	str	r0, [sp, #20]
   19620:	cmp	r9, #0
   19624:	ldrne	r0, [fp, #8]
   19628:	cmpne	r0, #0
   1962c:	bne	1963c <__assert_fail@plt+0x75b0>
   19630:	cmp	r6, #0
   19634:	bne	19688 <__assert_fail@plt+0x75fc>
   19638:	b	1a3fc <__assert_fail@plt+0x8370>
   1963c:	movw	r0, #62728	; 0xf508
   19640:	movt	r0, #3
   19644:	ldrd	r2, [r0]
   19648:	adds	r2, r2, #1
   1964c:	adc	r3, r3, #0
   19650:	strd	r2, [r0]
   19654:	movw	r0, #62220	; 0xf30c
   19658:	movt	r0, #3
   1965c:	ldr	r0, [r0]
   19660:	ldr	r1, [r0, #20]
   19664:	ldr	r2, [r0, #24]
   19668:	cmp	r1, r2
   1966c:	bcs	1a77c <__assert_fail@plt+0x86f0>
   19670:	add	r2, r1, #1
   19674:	str	r2, [r0, #20]
   19678:	mov	r0, #32
   1967c:	strb	r0, [r1]
   19680:	cmp	r6, #0
   19684:	beq	1a3fc <__assert_fail@plt+0x8370>
   19688:	movw	r7, #61896	; 0xf1c8
   1968c:	movt	r7, #3
   19690:	ldr	r1, [r7, #32]
   19694:	cmp	r1, #0
   19698:	beq	19e3c <__assert_fail@plt+0x7db0>
   1969c:	ldr	r0, [r7, #36]	; 0x24
   196a0:	cmp	r1, #2
   196a4:	beq	196c0 <__assert_fail@plt+0x7634>
   196a8:	cmp	r1, #1
   196ac:	bne	196d8 <__assert_fail@plt+0x764c>
   196b0:	ldrb	r0, [r0]
   196b4:	cmp	r0, #48	; 0x30
   196b8:	bne	196d8 <__assert_fail@plt+0x764c>
   196bc:	b	19e3c <__assert_fail@plt+0x7db0>
   196c0:	movw	r1, #48056	; 0xbbb8
   196c4:	mov	r2, #2
   196c8:	movt	r1, #2
   196cc:	bl	1202c <strncmp@plt>
   196d0:	cmp	r0, #0
   196d4:	beq	19e3c <__assert_fail@plt+0x7db0>
   196d8:	movw	sl, #62456	; 0xf3f8
   196dc:	movt	sl, #3
   196e0:	ldrb	r0, [sl]
   196e4:	cmp	r0, #0
   196e8:	bne	19c3c <__assert_fail@plt+0x7bb0>
   196ec:	mov	r0, #1
   196f0:	strb	r0, [sl]
   196f4:	mov	r0, #1
   196f8:	bl	11ea0 <tcgetpgrp@plt>
   196fc:	cmp	r0, #0
   19700:	movge	r0, #1
   19704:	blge	18e14 <__assert_fail@plt+0x6d88>
   19708:	ldr	r0, [r7, #20]
   1970c:	ldrb	r1, [sl]
   19710:	cmp	r0, #0
   19714:	beq	1978c <__assert_fail@plt+0x7700>
   19718:	cmp	r1, #0
   1971c:	bne	198c8 <__assert_fail@plt+0x783c>
   19720:	mov	r0, #1
   19724:	strb	r0, [sl]
   19728:	mov	r0, #1
   1972c:	bl	11ea0 <tcgetpgrp@plt>
   19730:	cmp	r0, #0
   19734:	movge	r0, #1
   19738:	blge	18e14 <__assert_fail@plt+0x6d88>
   1973c:	ldr	r0, [r7, #20]
   19740:	ldrb	r1, [sl]
   19744:	cmp	r0, #0
   19748:	beq	19800 <__assert_fail@plt+0x7774>
   1974c:	cmp	r1, #0
   19750:	bne	19778 <__assert_fail@plt+0x76ec>
   19754:	mov	r0, #1
   19758:	strb	r0, [sl]
   1975c:	mov	r0, #1
   19760:	bl	11ea0 <tcgetpgrp@plt>
   19764:	cmp	r0, #0
   19768:	movge	r0, #1
   1976c:	blge	18e14 <__assert_fail@plt+0x6d88>
   19770:	bl	18dd0 <__assert_fail@plt+0x6d44>
   19774:	ldr	r0, [r7, #20]
   19778:	movw	r1, #62220	; 0xf30c
   1977c:	movt	r1, #3
   19780:	ldr	r3, [r1]
   19784:	ldr	r1, [r7, #16]
   19788:	b	198bc <__assert_fail@plt+0x7830>
   1978c:	cmp	r1, #0
   19790:	bne	199a0 <__assert_fail@plt+0x7914>
   19794:	mov	r0, #1
   19798:	strb	r0, [sl]
   1979c:	mov	r0, #1
   197a0:	bl	11ea0 <tcgetpgrp@plt>
   197a4:	cmp	r0, #0
   197a8:	movge	r0, #1
   197ac:	blge	18e14 <__assert_fail@plt+0x6d88>
   197b0:	ldr	r0, [r7, #20]
   197b4:	ldrb	r1, [sl]
   197b8:	cmp	r0, #0
   197bc:	beq	198dc <__assert_fail@plt+0x7850>
   197c0:	cmp	r1, #0
   197c4:	bne	197ec <__assert_fail@plt+0x7760>
   197c8:	mov	r0, #1
   197cc:	strb	r0, [sl]
   197d0:	mov	r0, #1
   197d4:	bl	11ea0 <tcgetpgrp@plt>
   197d8:	cmp	r0, #0
   197dc:	movge	r0, #1
   197e0:	blge	18e14 <__assert_fail@plt+0x6d88>
   197e4:	bl	18dd0 <__assert_fail@plt+0x6d44>
   197e8:	ldr	r0, [r7, #20]
   197ec:	movw	r1, #62220	; 0xf30c
   197f0:	movt	r1, #3
   197f4:	ldr	r3, [r1]
   197f8:	ldr	r1, [r7, #16]
   197fc:	b	19998 <__assert_fail@plt+0x790c>
   19800:	cmp	r1, #0
   19804:	bne	19828 <__assert_fail@plt+0x779c>
   19808:	mov	r0, #1
   1980c:	strb	r0, [sl]
   19810:	mov	r0, #1
   19814:	bl	11ea0 <tcgetpgrp@plt>
   19818:	cmp	r0, #0
   1981c:	movge	r0, #1
   19820:	blge	18e14 <__assert_fail@plt+0x6d88>
   19824:	bl	18dd0 <__assert_fail@plt+0x6d44>
   19828:	movw	r4, #62220	; 0xf30c
   1982c:	ldr	r1, [r7]
   19830:	ldr	r0, [r7, #4]
   19834:	mov	r2, #1
   19838:	mov	r8, #1
   1983c:	movt	r4, #3
   19840:	ldr	r3, [r4]
   19844:	bl	11c90 <fwrite_unlocked@plt>
   19848:	ldrb	r0, [sl]
   1984c:	cmp	r0, #0
   19850:	bne	19870 <__assert_fail@plt+0x77e4>
   19854:	mov	r0, #1
   19858:	strb	r8, [sl]
   1985c:	bl	11ea0 <tcgetpgrp@plt>
   19860:	cmp	r0, #0
   19864:	movge	r0, #1
   19868:	blge	18e14 <__assert_fail@plt+0x6d88>
   1986c:	bl	18dd0 <__assert_fail@plt+0x6d44>
   19870:	ldr	r3, [r4]
   19874:	ldr	r1, [r7, #24]
   19878:	ldr	r0, [r7, #28]
   1987c:	mov	r2, #1
   19880:	mov	r8, #1
   19884:	bl	11c90 <fwrite_unlocked@plt>
   19888:	ldrb	r0, [sl]
   1988c:	cmp	r0, #0
   19890:	bne	198b0 <__assert_fail@plt+0x7824>
   19894:	mov	r0, #1
   19898:	strb	r8, [sl]
   1989c:	bl	11ea0 <tcgetpgrp@plt>
   198a0:	cmp	r0, #0
   198a4:	movge	r0, #1
   198a8:	blge	18e14 <__assert_fail@plt+0x6d88>
   198ac:	bl	18dd0 <__assert_fail@plt+0x6d44>
   198b0:	ldr	r3, [r4]
   198b4:	ldr	r1, [r7, #8]
   198b8:	ldr	r0, [r7, #12]
   198bc:	mov	r2, #1
   198c0:	bl	11c90 <fwrite_unlocked@plt>
   198c4:	ldr	r0, [r7, #20]
   198c8:	movw	r1, #62220	; 0xf30c
   198cc:	movt	r1, #3
   198d0:	ldr	r3, [r1]
   198d4:	ldr	r1, [r7, #16]
   198d8:	b	19c34 <__assert_fail@plt+0x7ba8>
   198dc:	cmp	r1, #0
   198e0:	bne	19904 <__assert_fail@plt+0x7878>
   198e4:	mov	r0, #1
   198e8:	strb	r0, [sl]
   198ec:	mov	r0, #1
   198f0:	bl	11ea0 <tcgetpgrp@plt>
   198f4:	cmp	r0, #0
   198f8:	movge	r0, #1
   198fc:	blge	18e14 <__assert_fail@plt+0x6d88>
   19900:	bl	18dd0 <__assert_fail@plt+0x6d44>
   19904:	movw	r4, #62220	; 0xf30c
   19908:	ldr	r1, [r7]
   1990c:	ldr	r0, [r7, #4]
   19910:	mov	r2, #1
   19914:	mov	r8, #1
   19918:	movt	r4, #3
   1991c:	ldr	r3, [r4]
   19920:	bl	11c90 <fwrite_unlocked@plt>
   19924:	ldrb	r0, [sl]
   19928:	cmp	r0, #0
   1992c:	bne	1994c <__assert_fail@plt+0x78c0>
   19930:	mov	r0, #1
   19934:	strb	r8, [sl]
   19938:	bl	11ea0 <tcgetpgrp@plt>
   1993c:	cmp	r0, #0
   19940:	movge	r0, #1
   19944:	blge	18e14 <__assert_fail@plt+0x6d88>
   19948:	bl	18dd0 <__assert_fail@plt+0x6d44>
   1994c:	ldr	r3, [r4]
   19950:	ldr	r1, [r7, #24]
   19954:	ldr	r0, [r7, #28]
   19958:	mov	r2, #1
   1995c:	mov	r8, #1
   19960:	bl	11c90 <fwrite_unlocked@plt>
   19964:	ldrb	r0, [sl]
   19968:	cmp	r0, #0
   1996c:	bne	1998c <__assert_fail@plt+0x7900>
   19970:	mov	r0, #1
   19974:	strb	r8, [sl]
   19978:	bl	11ea0 <tcgetpgrp@plt>
   1997c:	cmp	r0, #0
   19980:	movge	r0, #1
   19984:	blge	18e14 <__assert_fail@plt+0x6d88>
   19988:	bl	18dd0 <__assert_fail@plt+0x6d44>
   1998c:	ldr	r3, [r4]
   19990:	ldr	r1, [r7, #8]
   19994:	ldr	r0, [r7, #12]
   19998:	mov	r2, #1
   1999c:	bl	11c90 <fwrite_unlocked@plt>
   199a0:	movw	r8, #62220	; 0xf30c
   199a4:	ldr	r1, [r7]
   199a8:	ldr	r0, [r7, #4]
   199ac:	mov	r2, #1
   199b0:	mov	r4, #1
   199b4:	movt	r8, #3
   199b8:	ldr	r3, [r8]
   199bc:	bl	11c90 <fwrite_unlocked@plt>
   199c0:	ldrb	r0, [sl]
   199c4:	cmp	r0, #0
   199c8:	bne	19ae8 <__assert_fail@plt+0x7a5c>
   199cc:	mov	r0, #1
   199d0:	strb	r4, [sl]
   199d4:	bl	11ea0 <tcgetpgrp@plt>
   199d8:	cmp	r0, #0
   199dc:	movge	r0, #1
   199e0:	blge	18e14 <__assert_fail@plt+0x6d88>
   199e4:	ldr	r0, [r7, #20]
   199e8:	ldrb	r1, [sl]
   199ec:	cmp	r0, #0
   199f0:	beq	19a2c <__assert_fail@plt+0x79a0>
   199f4:	cmp	r1, #0
   199f8:	bne	19a20 <__assert_fail@plt+0x7994>
   199fc:	mov	r0, #1
   19a00:	strb	r0, [sl]
   19a04:	mov	r0, #1
   19a08:	bl	11ea0 <tcgetpgrp@plt>
   19a0c:	cmp	r0, #0
   19a10:	movge	r0, #1
   19a14:	blge	18e14 <__assert_fail@plt+0x6d88>
   19a18:	bl	18dd0 <__assert_fail@plt+0x6d44>
   19a1c:	ldr	r0, [r7, #20]
   19a20:	ldr	r3, [r8]
   19a24:	ldr	r1, [r7, #16]
   19a28:	b	19ae0 <__assert_fail@plt+0x7a54>
   19a2c:	cmp	r1, #0
   19a30:	bne	19a54 <__assert_fail@plt+0x79c8>
   19a34:	mov	r0, #1
   19a38:	strb	r0, [sl]
   19a3c:	mov	r0, #1
   19a40:	bl	11ea0 <tcgetpgrp@plt>
   19a44:	cmp	r0, #0
   19a48:	movge	r0, #1
   19a4c:	blge	18e14 <__assert_fail@plt+0x6d88>
   19a50:	bl	18dd0 <__assert_fail@plt+0x6d44>
   19a54:	ldr	r3, [r8]
   19a58:	ldr	r1, [r7]
   19a5c:	ldr	r0, [r7, #4]
   19a60:	mov	r2, #1
   19a64:	mov	r4, #1
   19a68:	bl	11c90 <fwrite_unlocked@plt>
   19a6c:	ldrb	r0, [sl]
   19a70:	cmp	r0, #0
   19a74:	bne	19a94 <__assert_fail@plt+0x7a08>
   19a78:	mov	r0, #1
   19a7c:	strb	r4, [sl]
   19a80:	bl	11ea0 <tcgetpgrp@plt>
   19a84:	cmp	r0, #0
   19a88:	movge	r0, #1
   19a8c:	blge	18e14 <__assert_fail@plt+0x6d88>
   19a90:	bl	18dd0 <__assert_fail@plt+0x6d44>
   19a94:	ldr	r3, [r8]
   19a98:	ldr	r1, [r7, #24]
   19a9c:	ldr	r0, [r7, #28]
   19aa0:	mov	r2, #1
   19aa4:	mov	r4, #1
   19aa8:	bl	11c90 <fwrite_unlocked@plt>
   19aac:	ldrb	r0, [sl]
   19ab0:	cmp	r0, #0
   19ab4:	bne	19ad4 <__assert_fail@plt+0x7a48>
   19ab8:	mov	r0, #1
   19abc:	strb	r4, [sl]
   19ac0:	bl	11ea0 <tcgetpgrp@plt>
   19ac4:	cmp	r0, #0
   19ac8:	movge	r0, #1
   19acc:	blge	18e14 <__assert_fail@plt+0x6d88>
   19ad0:	bl	18dd0 <__assert_fail@plt+0x6d44>
   19ad4:	ldr	r3, [r8]
   19ad8:	ldr	r1, [r7, #8]
   19adc:	ldr	r0, [r7, #12]
   19ae0:	mov	r2, #1
   19ae4:	bl	11c90 <fwrite_unlocked@plt>
   19ae8:	ldr	r3, [r8]
   19aec:	ldr	r1, [r7, #24]
   19af0:	ldr	r0, [r7, #28]
   19af4:	mov	r2, #1
   19af8:	mov	r4, #1
   19afc:	bl	11c90 <fwrite_unlocked@plt>
   19b00:	ldrb	r0, [sl]
   19b04:	cmp	r0, #0
   19b08:	bne	19c28 <__assert_fail@plt+0x7b9c>
   19b0c:	mov	r0, #1
   19b10:	strb	r4, [sl]
   19b14:	bl	11ea0 <tcgetpgrp@plt>
   19b18:	cmp	r0, #0
   19b1c:	movge	r0, #1
   19b20:	blge	18e14 <__assert_fail@plt+0x6d88>
   19b24:	ldr	r0, [r7, #20]
   19b28:	ldrb	r1, [sl]
   19b2c:	cmp	r0, #0
   19b30:	beq	19b6c <__assert_fail@plt+0x7ae0>
   19b34:	cmp	r1, #0
   19b38:	bne	19b60 <__assert_fail@plt+0x7ad4>
   19b3c:	mov	r0, #1
   19b40:	strb	r0, [sl]
   19b44:	mov	r0, #1
   19b48:	bl	11ea0 <tcgetpgrp@plt>
   19b4c:	cmp	r0, #0
   19b50:	movge	r0, #1
   19b54:	blge	18e14 <__assert_fail@plt+0x6d88>
   19b58:	bl	18dd0 <__assert_fail@plt+0x6d44>
   19b5c:	ldr	r0, [r7, #20]
   19b60:	ldr	r3, [r8]
   19b64:	ldr	r1, [r7, #16]
   19b68:	b	19c20 <__assert_fail@plt+0x7b94>
   19b6c:	cmp	r1, #0
   19b70:	bne	19b94 <__assert_fail@plt+0x7b08>
   19b74:	mov	r0, #1
   19b78:	strb	r0, [sl]
   19b7c:	mov	r0, #1
   19b80:	bl	11ea0 <tcgetpgrp@plt>
   19b84:	cmp	r0, #0
   19b88:	movge	r0, #1
   19b8c:	blge	18e14 <__assert_fail@plt+0x6d88>
   19b90:	bl	18dd0 <__assert_fail@plt+0x6d44>
   19b94:	ldr	r3, [r8]
   19b98:	ldr	r1, [r7]
   19b9c:	ldr	r0, [r7, #4]
   19ba0:	mov	r2, #1
   19ba4:	mov	r4, #1
   19ba8:	bl	11c90 <fwrite_unlocked@plt>
   19bac:	ldrb	r0, [sl]
   19bb0:	cmp	r0, #0
   19bb4:	bne	19bd4 <__assert_fail@plt+0x7b48>
   19bb8:	mov	r0, #1
   19bbc:	strb	r4, [sl]
   19bc0:	bl	11ea0 <tcgetpgrp@plt>
   19bc4:	cmp	r0, #0
   19bc8:	movge	r0, #1
   19bcc:	blge	18e14 <__assert_fail@plt+0x6d88>
   19bd0:	bl	18dd0 <__assert_fail@plt+0x6d44>
   19bd4:	ldr	r3, [r8]
   19bd8:	ldr	r1, [r7, #24]
   19bdc:	ldr	r0, [r7, #28]
   19be0:	mov	r2, #1
   19be4:	mov	r4, #1
   19be8:	bl	11c90 <fwrite_unlocked@plt>
   19bec:	ldrb	r0, [sl]
   19bf0:	cmp	r0, #0
   19bf4:	bne	19c14 <__assert_fail@plt+0x7b88>
   19bf8:	mov	r0, #1
   19bfc:	strb	r4, [sl]
   19c00:	bl	11ea0 <tcgetpgrp@plt>
   19c04:	cmp	r0, #0
   19c08:	movge	r0, #1
   19c0c:	blge	18e14 <__assert_fail@plt+0x6d88>
   19c10:	bl	18dd0 <__assert_fail@plt+0x6d44>
   19c14:	ldr	r3, [r8]
   19c18:	ldr	r1, [r7, #8]
   19c1c:	ldr	r0, [r7, #12]
   19c20:	mov	r2, #1
   19c24:	bl	11c90 <fwrite_unlocked@plt>
   19c28:	ldr	r3, [r8]
   19c2c:	ldr	r1, [r7, #8]
   19c30:	ldr	r0, [r7, #12]
   19c34:	mov	r2, #1
   19c38:	bl	11c90 <fwrite_unlocked@plt>
   19c3c:	movw	r4, #62220	; 0xf30c
   19c40:	ldr	r1, [r7]
   19c44:	ldr	r0, [r7, #4]
   19c48:	mov	r2, #1
   19c4c:	mov	r5, #1
   19c50:	movt	r4, #3
   19c54:	ldr	r3, [r4]
   19c58:	bl	11c90 <fwrite_unlocked@plt>
   19c5c:	ldrb	r0, [sl]
   19c60:	cmp	r0, #0
   19c64:	bne	19e24 <__assert_fail@plt+0x7d98>
   19c68:	mov	r0, #1
   19c6c:	strb	r5, [sl]
   19c70:	bl	11ea0 <tcgetpgrp@plt>
   19c74:	cmp	r0, #0
   19c78:	movge	r0, #1
   19c7c:	blge	18e14 <__assert_fail@plt+0x6d88>
   19c80:	ldr	r1, [r7, #20]
   19c84:	ldrb	r0, [sl]
   19c88:	cmp	r1, #0
   19c8c:	beq	19cc8 <__assert_fail@plt+0x7c3c>
   19c90:	cmp	r0, #0
   19c94:	bne	19d18 <__assert_fail@plt+0x7c8c>
   19c98:	mov	r0, #1
   19c9c:	strb	r0, [sl]
   19ca0:	mov	r0, #1
   19ca4:	bl	11ea0 <tcgetpgrp@plt>
   19ca8:	cmp	r0, #0
   19cac:	movge	r0, #1
   19cb0:	blge	18e14 <__assert_fail@plt+0x6d88>
   19cb4:	ldr	r0, [r7, #20]
   19cb8:	cmp	r0, #0
   19cbc:	beq	19d00 <__assert_fail@plt+0x7c74>
   19cc0:	add	r0, r7, #16
   19cc4:	b	19d14 <__assert_fail@plt+0x7c88>
   19cc8:	cmp	r0, #0
   19ccc:	bne	19d40 <__assert_fail@plt+0x7cb4>
   19cd0:	mov	r0, #1
   19cd4:	strb	r0, [sl]
   19cd8:	mov	r0, #1
   19cdc:	bl	11ea0 <tcgetpgrp@plt>
   19ce0:	cmp	r0, #0
   19ce4:	movge	r0, #1
   19ce8:	blge	18e14 <__assert_fail@plt+0x6d88>
   19cec:	ldr	r0, [r7, #20]
   19cf0:	cmp	r0, #0
   19cf4:	beq	19d28 <__assert_fail@plt+0x7c9c>
   19cf8:	add	r0, r7, #16
   19cfc:	b	19d3c <__assert_fail@plt+0x7cb0>
   19d00:	mov	r0, r7
   19d04:	bl	18d70 <__assert_fail@plt+0x6ce4>
   19d08:	add	r0, r7, #24
   19d0c:	bl	18d70 <__assert_fail@plt+0x6ce4>
   19d10:	add	r0, r7, #8
   19d14:	bl	18d70 <__assert_fail@plt+0x6ce4>
   19d18:	ldr	r3, [r4]
   19d1c:	ldr	r1, [r7, #16]
   19d20:	ldr	r0, [r7, #20]
   19d24:	b	19e1c <__assert_fail@plt+0x7d90>
   19d28:	mov	r0, r7
   19d2c:	bl	18d70 <__assert_fail@plt+0x6ce4>
   19d30:	add	r0, r7, #24
   19d34:	bl	18d70 <__assert_fail@plt+0x6ce4>
   19d38:	add	r0, r7, #8
   19d3c:	bl	18d70 <__assert_fail@plt+0x6ce4>
   19d40:	ldr	r3, [r4]
   19d44:	ldr	r1, [r7]
   19d48:	ldr	r0, [r7, #4]
   19d4c:	mov	r2, #1
   19d50:	mov	r5, #1
   19d54:	bl	11c90 <fwrite_unlocked@plt>
   19d58:	ldrb	r0, [sl]
   19d5c:	cmp	r0, #0
   19d60:	bne	19da8 <__assert_fail@plt+0x7d1c>
   19d64:	mov	r0, #1
   19d68:	strb	r5, [sl]
   19d6c:	bl	11ea0 <tcgetpgrp@plt>
   19d70:	cmp	r0, #0
   19d74:	movge	r0, #1
   19d78:	blge	18e14 <__assert_fail@plt+0x6d88>
   19d7c:	ldr	r0, [r7, #20]
   19d80:	cmp	r0, #0
   19d84:	beq	19d90 <__assert_fail@plt+0x7d04>
   19d88:	add	r0, r7, #16
   19d8c:	b	19da4 <__assert_fail@plt+0x7d18>
   19d90:	mov	r0, r7
   19d94:	bl	18d70 <__assert_fail@plt+0x6ce4>
   19d98:	add	r0, r7, #24
   19d9c:	bl	18d70 <__assert_fail@plt+0x6ce4>
   19da0:	add	r0, r7, #8
   19da4:	bl	18d70 <__assert_fail@plt+0x6ce4>
   19da8:	ldr	r3, [r4]
   19dac:	ldr	r1, [r7, #24]
   19db0:	ldr	r0, [r7, #28]
   19db4:	mov	r2, #1
   19db8:	mov	r5, #1
   19dbc:	bl	11c90 <fwrite_unlocked@plt>
   19dc0:	ldrb	r0, [sl]
   19dc4:	cmp	r0, #0
   19dc8:	bne	19e10 <__assert_fail@plt+0x7d84>
   19dcc:	mov	r0, #1
   19dd0:	strb	r5, [sl]
   19dd4:	bl	11ea0 <tcgetpgrp@plt>
   19dd8:	cmp	r0, #0
   19ddc:	movge	r0, #1
   19de0:	blge	18e14 <__assert_fail@plt+0x6d88>
   19de4:	ldr	r0, [r7, #20]
   19de8:	cmp	r0, #0
   19dec:	beq	19df8 <__assert_fail@plt+0x7d6c>
   19df0:	add	r0, r7, #16
   19df4:	b	19e0c <__assert_fail@plt+0x7d80>
   19df8:	mov	r0, r7
   19dfc:	bl	18d70 <__assert_fail@plt+0x6ce4>
   19e00:	add	r0, r7, #24
   19e04:	bl	18d70 <__assert_fail@plt+0x6ce4>
   19e08:	add	r0, r7, #8
   19e0c:	bl	18d70 <__assert_fail@plt+0x6ce4>
   19e10:	ldr	r3, [r4]
   19e14:	ldr	r1, [r7, #8]
   19e18:	ldr	r0, [r7, #12]
   19e1c:	mov	r2, #1
   19e20:	bl	11c90 <fwrite_unlocked@plt>
   19e24:	ldr	r3, [r4]
   19e28:	ldr	r1, [r7, #8]
   19e2c:	ldr	r0, [r7, #12]
   19e30:	mov	r2, #1
   19e34:	bl	11c90 <fwrite_unlocked@plt>
   19e38:	add	sl, sp, #32
   19e3c:	movw	r5, #62456	; 0xf3f8
   19e40:	movt	r5, #3
   19e44:	ldrb	r0, [r5]
   19e48:	cmp	r0, #0
   19e4c:	bne	1a020 <__assert_fail@plt+0x7f94>
   19e50:	mov	r0, #1
   19e54:	strb	r0, [r5]
   19e58:	mov	r0, #1
   19e5c:	bl	11ea0 <tcgetpgrp@plt>
   19e60:	cmp	r0, #0
   19e64:	movge	r0, #1
   19e68:	blge	18e14 <__assert_fail@plt+0x6d88>
   19e6c:	ldr	r1, [r7, #20]
   19e70:	ldrb	r0, [r5]
   19e74:	cmp	r1, #0
   19e78:	beq	19eb4 <__assert_fail@plt+0x7e28>
   19e7c:	cmp	r0, #0
   19e80:	bne	19f04 <__assert_fail@plt+0x7e78>
   19e84:	mov	r0, #1
   19e88:	strb	r0, [r5]
   19e8c:	mov	r0, #1
   19e90:	bl	11ea0 <tcgetpgrp@plt>
   19e94:	cmp	r0, #0
   19e98:	movge	r0, #1
   19e9c:	blge	18e14 <__assert_fail@plt+0x6d88>
   19ea0:	ldr	r0, [r7, #20]
   19ea4:	cmp	r0, #0
   19ea8:	beq	19eec <__assert_fail@plt+0x7e60>
   19eac:	add	r0, r7, #16
   19eb0:	b	19f00 <__assert_fail@plt+0x7e74>
   19eb4:	cmp	r0, #0
   19eb8:	bne	19f34 <__assert_fail@plt+0x7ea8>
   19ebc:	mov	r0, #1
   19ec0:	strb	r0, [r5]
   19ec4:	mov	r0, #1
   19ec8:	bl	11ea0 <tcgetpgrp@plt>
   19ecc:	cmp	r0, #0
   19ed0:	movge	r0, #1
   19ed4:	blge	18e14 <__assert_fail@plt+0x6d88>
   19ed8:	ldr	r0, [r7, #20]
   19edc:	cmp	r0, #0
   19ee0:	beq	19f1c <__assert_fail@plt+0x7e90>
   19ee4:	add	r0, r7, #16
   19ee8:	b	19f30 <__assert_fail@plt+0x7ea4>
   19eec:	mov	r0, r7
   19ef0:	bl	18d70 <__assert_fail@plt+0x6ce4>
   19ef4:	add	r0, r7, #24
   19ef8:	bl	18d70 <__assert_fail@plt+0x6ce4>
   19efc:	add	r0, r7, #8
   19f00:	bl	18d70 <__assert_fail@plt+0x6ce4>
   19f04:	movw	r0, #62220	; 0xf30c
   19f08:	ldr	r1, [r7, #16]
   19f0c:	movt	r0, #3
   19f10:	ldr	r3, [r0]
   19f14:	ldr	r0, [r7, #20]
   19f18:	b	1a018 <__assert_fail@plt+0x7f8c>
   19f1c:	mov	r0, r7
   19f20:	bl	18d70 <__assert_fail@plt+0x6ce4>
   19f24:	add	r0, r7, #24
   19f28:	bl	18d70 <__assert_fail@plt+0x6ce4>
   19f2c:	add	r0, r7, #8
   19f30:	bl	18d70 <__assert_fail@plt+0x6ce4>
   19f34:	movw	r8, #62220	; 0xf30c
   19f38:	ldr	r1, [r7]
   19f3c:	ldr	r0, [r7, #4]
   19f40:	mov	r2, #1
   19f44:	mov	r4, #1
   19f48:	movt	r8, #3
   19f4c:	ldr	r3, [r8]
   19f50:	bl	11c90 <fwrite_unlocked@plt>
   19f54:	ldrb	r0, [r5]
   19f58:	cmp	r0, #0
   19f5c:	bne	19fa4 <__assert_fail@plt+0x7f18>
   19f60:	mov	r0, #1
   19f64:	strb	r4, [r5]
   19f68:	bl	11ea0 <tcgetpgrp@plt>
   19f6c:	cmp	r0, #0
   19f70:	movge	r0, #1
   19f74:	blge	18e14 <__assert_fail@plt+0x6d88>
   19f78:	ldr	r0, [r7, #20]
   19f7c:	cmp	r0, #0
   19f80:	beq	19f8c <__assert_fail@plt+0x7f00>
   19f84:	add	r0, r7, #16
   19f88:	b	19fa0 <__assert_fail@plt+0x7f14>
   19f8c:	mov	r0, r7
   19f90:	bl	18d70 <__assert_fail@plt+0x6ce4>
   19f94:	add	r0, r7, #24
   19f98:	bl	18d70 <__assert_fail@plt+0x6ce4>
   19f9c:	add	r0, r7, #8
   19fa0:	bl	18d70 <__assert_fail@plt+0x6ce4>
   19fa4:	ldr	r3, [r8]
   19fa8:	ldr	r1, [r7, #24]
   19fac:	ldr	r0, [r7, #28]
   19fb0:	mov	r2, #1
   19fb4:	mov	r4, #1
   19fb8:	bl	11c90 <fwrite_unlocked@plt>
   19fbc:	ldrb	r0, [r5]
   19fc0:	cmp	r0, #0
   19fc4:	bne	1a00c <__assert_fail@plt+0x7f80>
   19fc8:	mov	r0, #1
   19fcc:	strb	r4, [r5]
   19fd0:	bl	11ea0 <tcgetpgrp@plt>
   19fd4:	cmp	r0, #0
   19fd8:	movge	r0, #1
   19fdc:	blge	18e14 <__assert_fail@plt+0x6d88>
   19fe0:	ldr	r0, [r7, #20]
   19fe4:	cmp	r0, #0
   19fe8:	beq	19ff4 <__assert_fail@plt+0x7f68>
   19fec:	add	r0, r7, #16
   19ff0:	b	1a008 <__assert_fail@plt+0x7f7c>
   19ff4:	mov	r0, r7
   19ff8:	bl	18d70 <__assert_fail@plt+0x6ce4>
   19ffc:	add	r0, r7, #24
   1a000:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a004:	add	r0, r7, #8
   1a008:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a00c:	ldr	r3, [r8]
   1a010:	ldr	r1, [r7, #8]
   1a014:	ldr	r0, [r7, #12]
   1a018:	mov	r2, #1
   1a01c:	bl	11c90 <fwrite_unlocked@plt>
   1a020:	movw	r8, #62220	; 0xf30c
   1a024:	ldr	r1, [r7]
   1a028:	ldr	r0, [r7, #4]
   1a02c:	mov	r2, #1
   1a030:	mov	r4, #1
   1a034:	movt	r8, #3
   1a038:	ldr	r3, [r8]
   1a03c:	bl	11c90 <fwrite_unlocked@plt>
   1a040:	ldrb	r0, [r5]
   1a044:	cmp	r0, #0
   1a048:	bne	1a208 <__assert_fail@plt+0x817c>
   1a04c:	mov	r0, #1
   1a050:	strb	r4, [r5]
   1a054:	bl	11ea0 <tcgetpgrp@plt>
   1a058:	cmp	r0, #0
   1a05c:	movge	r0, #1
   1a060:	blge	18e14 <__assert_fail@plt+0x6d88>
   1a064:	ldr	r1, [r7, #20]
   1a068:	ldrb	r0, [r5]
   1a06c:	cmp	r1, #0
   1a070:	beq	1a0ac <__assert_fail@plt+0x8020>
   1a074:	cmp	r0, #0
   1a078:	bne	1a0fc <__assert_fail@plt+0x8070>
   1a07c:	mov	r0, #1
   1a080:	strb	r0, [r5]
   1a084:	mov	r0, #1
   1a088:	bl	11ea0 <tcgetpgrp@plt>
   1a08c:	cmp	r0, #0
   1a090:	movge	r0, #1
   1a094:	blge	18e14 <__assert_fail@plt+0x6d88>
   1a098:	ldr	r0, [r7, #20]
   1a09c:	cmp	r0, #0
   1a0a0:	beq	1a0e4 <__assert_fail@plt+0x8058>
   1a0a4:	add	r0, r7, #16
   1a0a8:	b	1a0f8 <__assert_fail@plt+0x806c>
   1a0ac:	cmp	r0, #0
   1a0b0:	bne	1a124 <__assert_fail@plt+0x8098>
   1a0b4:	mov	r0, #1
   1a0b8:	strb	r0, [r5]
   1a0bc:	mov	r0, #1
   1a0c0:	bl	11ea0 <tcgetpgrp@plt>
   1a0c4:	cmp	r0, #0
   1a0c8:	movge	r0, #1
   1a0cc:	blge	18e14 <__assert_fail@plt+0x6d88>
   1a0d0:	ldr	r0, [r7, #20]
   1a0d4:	cmp	r0, #0
   1a0d8:	beq	1a10c <__assert_fail@plt+0x8080>
   1a0dc:	add	r0, r7, #16
   1a0e0:	b	1a120 <__assert_fail@plt+0x8094>
   1a0e4:	mov	r0, r7
   1a0e8:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a0ec:	add	r0, r7, #24
   1a0f0:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a0f4:	add	r0, r7, #8
   1a0f8:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a0fc:	ldr	r3, [r8]
   1a100:	ldr	r1, [r7, #16]
   1a104:	ldr	r0, [r7, #20]
   1a108:	b	1a200 <__assert_fail@plt+0x8174>
   1a10c:	mov	r0, r7
   1a110:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a114:	add	r0, r7, #24
   1a118:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a11c:	add	r0, r7, #8
   1a120:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a124:	ldr	r3, [r8]
   1a128:	ldr	r1, [r7]
   1a12c:	ldr	r0, [r7, #4]
   1a130:	mov	r2, #1
   1a134:	mov	r4, #1
   1a138:	bl	11c90 <fwrite_unlocked@plt>
   1a13c:	ldrb	r0, [r5]
   1a140:	cmp	r0, #0
   1a144:	bne	1a18c <__assert_fail@plt+0x8100>
   1a148:	mov	r0, #1
   1a14c:	strb	r4, [r5]
   1a150:	bl	11ea0 <tcgetpgrp@plt>
   1a154:	cmp	r0, #0
   1a158:	movge	r0, #1
   1a15c:	blge	18e14 <__assert_fail@plt+0x6d88>
   1a160:	ldr	r0, [r7, #20]
   1a164:	cmp	r0, #0
   1a168:	beq	1a174 <__assert_fail@plt+0x80e8>
   1a16c:	add	r0, r7, #16
   1a170:	b	1a188 <__assert_fail@plt+0x80fc>
   1a174:	mov	r0, r7
   1a178:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a17c:	add	r0, r7, #24
   1a180:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a184:	add	r0, r7, #8
   1a188:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a18c:	ldr	r3, [r8]
   1a190:	ldr	r1, [r7, #24]
   1a194:	ldr	r0, [r7, #28]
   1a198:	mov	r2, #1
   1a19c:	mov	r4, #1
   1a1a0:	bl	11c90 <fwrite_unlocked@plt>
   1a1a4:	ldrb	r0, [r5]
   1a1a8:	cmp	r0, #0
   1a1ac:	bne	1a1f4 <__assert_fail@plt+0x8168>
   1a1b0:	mov	r0, #1
   1a1b4:	strb	r4, [r5]
   1a1b8:	bl	11ea0 <tcgetpgrp@plt>
   1a1bc:	cmp	r0, #0
   1a1c0:	movge	r0, #1
   1a1c4:	blge	18e14 <__assert_fail@plt+0x6d88>
   1a1c8:	ldr	r0, [r7, #20]
   1a1cc:	cmp	r0, #0
   1a1d0:	beq	1a1dc <__assert_fail@plt+0x8150>
   1a1d4:	add	r0, r7, #16
   1a1d8:	b	1a1f0 <__assert_fail@plt+0x8164>
   1a1dc:	mov	r0, r7
   1a1e0:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a1e4:	add	r0, r7, #24
   1a1e8:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a1ec:	add	r0, r7, #8
   1a1f0:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a1f4:	ldr	r3, [r8]
   1a1f8:	ldr	r1, [r7, #8]
   1a1fc:	ldr	r0, [r7, #12]
   1a200:	mov	r2, #1
   1a204:	bl	11c90 <fwrite_unlocked@plt>
   1a208:	ldr	r3, [r8]
   1a20c:	ldr	r1, [r6]
   1a210:	ldr	r0, [r6, #4]
   1a214:	mov	r2, #1
   1a218:	mov	r4, #1
   1a21c:	bl	11c90 <fwrite_unlocked@plt>
   1a220:	ldrb	r0, [r5]
   1a224:	cmp	r0, #0
   1a228:	bne	1a3e8 <__assert_fail@plt+0x835c>
   1a22c:	mov	r0, #1
   1a230:	strb	r4, [r5]
   1a234:	bl	11ea0 <tcgetpgrp@plt>
   1a238:	cmp	r0, #0
   1a23c:	movge	r0, #1
   1a240:	blge	18e14 <__assert_fail@plt+0x6d88>
   1a244:	ldr	r1, [r7, #20]
   1a248:	ldrb	r0, [r5]
   1a24c:	cmp	r1, #0
   1a250:	beq	1a28c <__assert_fail@plt+0x8200>
   1a254:	cmp	r0, #0
   1a258:	bne	1a2dc <__assert_fail@plt+0x8250>
   1a25c:	mov	r0, #1
   1a260:	strb	r0, [r5]
   1a264:	mov	r0, #1
   1a268:	bl	11ea0 <tcgetpgrp@plt>
   1a26c:	cmp	r0, #0
   1a270:	movge	r0, #1
   1a274:	blge	18e14 <__assert_fail@plt+0x6d88>
   1a278:	ldr	r0, [r7, #20]
   1a27c:	cmp	r0, #0
   1a280:	beq	1a2c4 <__assert_fail@plt+0x8238>
   1a284:	add	r0, r7, #16
   1a288:	b	1a2d8 <__assert_fail@plt+0x824c>
   1a28c:	cmp	r0, #0
   1a290:	bne	1a304 <__assert_fail@plt+0x8278>
   1a294:	mov	r0, #1
   1a298:	strb	r0, [r5]
   1a29c:	mov	r0, #1
   1a2a0:	bl	11ea0 <tcgetpgrp@plt>
   1a2a4:	cmp	r0, #0
   1a2a8:	movge	r0, #1
   1a2ac:	blge	18e14 <__assert_fail@plt+0x6d88>
   1a2b0:	ldr	r0, [r7, #20]
   1a2b4:	cmp	r0, #0
   1a2b8:	beq	1a2ec <__assert_fail@plt+0x8260>
   1a2bc:	add	r0, r7, #16
   1a2c0:	b	1a300 <__assert_fail@plt+0x8274>
   1a2c4:	mov	r0, r7
   1a2c8:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a2cc:	add	r0, r7, #24
   1a2d0:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a2d4:	add	r0, r7, #8
   1a2d8:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a2dc:	ldr	r3, [r8]
   1a2e0:	ldr	r1, [r7, #16]
   1a2e4:	ldr	r0, [r7, #20]
   1a2e8:	b	1a3e0 <__assert_fail@plt+0x8354>
   1a2ec:	mov	r0, r7
   1a2f0:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a2f4:	add	r0, r7, #24
   1a2f8:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a2fc:	add	r0, r7, #8
   1a300:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a304:	ldr	r3, [r8]
   1a308:	ldr	r1, [r7]
   1a30c:	ldr	r0, [r7, #4]
   1a310:	mov	r2, #1
   1a314:	mov	r4, #1
   1a318:	bl	11c90 <fwrite_unlocked@plt>
   1a31c:	ldrb	r0, [r5]
   1a320:	cmp	r0, #0
   1a324:	bne	1a36c <__assert_fail@plt+0x82e0>
   1a328:	mov	r0, #1
   1a32c:	strb	r4, [r5]
   1a330:	bl	11ea0 <tcgetpgrp@plt>
   1a334:	cmp	r0, #0
   1a338:	movge	r0, #1
   1a33c:	blge	18e14 <__assert_fail@plt+0x6d88>
   1a340:	ldr	r0, [r7, #20]
   1a344:	cmp	r0, #0
   1a348:	beq	1a354 <__assert_fail@plt+0x82c8>
   1a34c:	add	r0, r7, #16
   1a350:	b	1a368 <__assert_fail@plt+0x82dc>
   1a354:	mov	r0, r7
   1a358:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a35c:	add	r0, r7, #24
   1a360:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a364:	add	r0, r7, #8
   1a368:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a36c:	ldr	r3, [r8]
   1a370:	ldr	r1, [r7, #24]
   1a374:	ldr	r0, [r7, #28]
   1a378:	mov	r2, #1
   1a37c:	mov	r4, #1
   1a380:	bl	11c90 <fwrite_unlocked@plt>
   1a384:	ldrb	r0, [r5]
   1a388:	cmp	r0, #0
   1a38c:	bne	1a3d4 <__assert_fail@plt+0x8348>
   1a390:	mov	r0, #1
   1a394:	strb	r4, [r5]
   1a398:	bl	11ea0 <tcgetpgrp@plt>
   1a39c:	cmp	r0, #0
   1a3a0:	movge	r0, #1
   1a3a4:	blge	18e14 <__assert_fail@plt+0x6d88>
   1a3a8:	ldr	r0, [r7, #20]
   1a3ac:	cmp	r0, #0
   1a3b0:	beq	1a3bc <__assert_fail@plt+0x8330>
   1a3b4:	add	r0, r7, #16
   1a3b8:	b	1a3d0 <__assert_fail@plt+0x8344>
   1a3bc:	mov	r0, r7
   1a3c0:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a3c4:	add	r0, r7, #24
   1a3c8:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a3cc:	add	r0, r7, #8
   1a3d0:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a3d4:	ldr	r3, [r8]
   1a3d8:	ldr	r1, [r7, #8]
   1a3dc:	ldr	r0, [r7, #12]
   1a3e0:	mov	r2, #1
   1a3e4:	bl	11c90 <fwrite_unlocked@plt>
   1a3e8:	ldr	r3, [r8]
   1a3ec:	ldr	r1, [r7, #8]
   1a3f0:	ldr	r0, [r7, #12]
   1a3f4:	mov	r2, #1
   1a3f8:	bl	11c90 <fwrite_unlocked@plt>
   1a3fc:	ldr	r0, [fp, #16]
   1a400:	cmp	r0, #0
   1a404:	beq	1a604 <__assert_fail@plt+0x8578>
   1a408:	movw	r0, #62921	; 0xf5c9
   1a40c:	mov	r1, #0
   1a410:	movt	r0, #3
   1a414:	ldrb	r0, [r0]
   1a418:	cmp	r0, #0
   1a41c:	beq	1a470 <__assert_fail@plt+0x83e4>
   1a420:	cmp	r9, #0
   1a424:	bne	1a470 <__assert_fail@plt+0x83e4>
   1a428:	movw	r0, #481	; 0x1e1
   1a42c:	movt	r0, #4
   1a430:	ldrb	r0, [r0]
   1a434:	cmp	r0, #0
   1a438:	beq	1a470 <__assert_fail@plt+0x83e4>
   1a43c:	ldr	r0, [sp, #28]
   1a440:	ldrb	r1, [r0]
   1a444:	movw	r0, #62220	; 0xf30c
   1a448:	movt	r0, #3
   1a44c:	ldr	r0, [r0]
   1a450:	ldr	r2, [r0, #20]
   1a454:	ldr	r3, [r0, #24]
   1a458:	cmp	r2, r3
   1a45c:	bcs	1a790 <__assert_fail@plt+0x8704>
   1a460:	add	r3, r2, #1
   1a464:	str	r3, [r0, #20]
   1a468:	strb	r1, [r2]
   1a46c:	mov	r1, #1
   1a470:	movw	r0, #62440	; 0xf3e8
   1a474:	str	r1, [sp, #12]
   1a478:	movt	r0, #3
   1a47c:	ldr	r5, [r0]
   1a480:	mov	r0, r5
   1a484:	bl	11eac <strlen@plt>
   1a488:	add	r1, r0, #1
   1a48c:	mov	r0, #3
   1a490:	bl	27f70 <_obstack_memory_used@@Base+0x2efc>
   1a494:	mov	r8, r0
   1a498:	ldrb	r0, [r5]
   1a49c:	mov	r4, r8
   1a4a0:	cmp	r0, #0
   1a4a4:	beq	1a500 <__assert_fail@plt+0x8474>
   1a4a8:	movw	r6, #62472	; 0xf408
   1a4ac:	add	r7, r5, #1
   1a4b0:	movw	r5, #49854	; 0xc2be
   1a4b4:	mov	r4, r8
   1a4b8:	movt	r6, #3
   1a4bc:	movt	r5, #2
   1a4c0:	uxtb	r1, r0
   1a4c4:	ldrb	r2, [r6, r1]
   1a4c8:	cmp	r2, #0
   1a4cc:	beq	1a4d8 <__assert_fail@plt+0x844c>
   1a4d0:	strb	r0, [r4], #1
   1a4d4:	b	1a4f4 <__assert_fail@plt+0x8468>
   1a4d8:	str	r1, [sp]
   1a4dc:	mov	r0, r4
   1a4e0:	mov	r1, #1
   1a4e4:	mvn	r2, #0
   1a4e8:	mov	r3, r5
   1a4ec:	bl	11edc <__sprintf_chk@plt>
   1a4f0:	add	r4, r4, r0
   1a4f4:	ldrb	r0, [r7], #1
   1a4f8:	cmp	r0, #0
   1a4fc:	bne	1a4c0 <__assert_fail@plt+0x8434>
   1a500:	ldr	r5, [fp, #16]
   1a504:	mov	r0, #0
   1a508:	mov	r6, r8
   1a50c:	strb	r0, [r4]
   1a510:	mov	r0, r5
   1a514:	bl	11eac <strlen@plt>
   1a518:	add	r1, r0, #1
   1a51c:	mov	r0, #3
   1a520:	bl	27f70 <_obstack_memory_used@@Base+0x2efc>
   1a524:	mov	r4, r0
   1a528:	ldrb	r0, [r5]
   1a52c:	mov	r7, r4
   1a530:	cmp	r0, #0
   1a534:	beq	1a5a8 <__assert_fail@plt+0x851c>
   1a538:	ldr	r1, [fp, #16]
   1a53c:	movw	r8, #62472	; 0xf408
   1a540:	movw	r5, #49854	; 0xc2be
   1a544:	mov	r9, #47	; 0x2f
   1a548:	mov	r7, r4
   1a54c:	movt	r8, #3
   1a550:	movt	r5, #2
   1a554:	add	sl, r1, #1
   1a558:	uxtb	r1, r0
   1a55c:	cmp	r1, #47	; 0x2f
   1a560:	bne	1a56c <__assert_fail@plt+0x84e0>
   1a564:	strb	r9, [r7], #1
   1a568:	b	1a59c <__assert_fail@plt+0x8510>
   1a56c:	ldrb	r2, [r8, r1]
   1a570:	cmp	r2, #0
   1a574:	beq	1a580 <__assert_fail@plt+0x84f4>
   1a578:	strb	r0, [r7], #1
   1a57c:	b	1a59c <__assert_fail@plt+0x8510>
   1a580:	str	r1, [sp]
   1a584:	mov	r0, r7
   1a588:	mov	r1, #1
   1a58c:	mvn	r2, #0
   1a590:	mov	r3, r5
   1a594:	bl	11edc <__sprintf_chk@plt>
   1a598:	add	r7, r7, r0
   1a59c:	ldrb	r0, [sl], #1
   1a5a0:	cmp	r0, #0
   1a5a4:	bne	1a558 <__assert_fail@plt+0x84cc>
   1a5a8:	mov	r0, #0
   1a5ac:	movw	r1, #49853	; 0xc2bd
   1a5b0:	movw	r3, #40672	; 0x9ee0
   1a5b4:	mov	r2, r6
   1a5b8:	str	r4, [sp]
   1a5bc:	mov	r5, r6
   1a5c0:	strb	r0, [r7]
   1a5c4:	movt	r1, #2
   1a5c8:	movt	r3, #2
   1a5cc:	ldrb	r0, [r4]
   1a5d0:	cmp	r0, #47	; 0x2f
   1a5d4:	mov	r0, #1
   1a5d8:	moveq	r3, r1
   1a5dc:	movw	r1, #49827	; 0xc2a3
   1a5e0:	movt	r1, #2
   1a5e4:	bl	11f00 <__printf_chk@plt>
   1a5e8:	mov	r0, r6
   1a5ec:	bl	2046c <__assert_fail@plt+0xe3e0>
   1a5f0:	mov	r0, r4
   1a5f4:	bl	2046c <__assert_fail@plt+0xe3e0>
   1a5f8:	ldr	r4, [sp, #12]
   1a5fc:	add	sl, sp, #32
   1a600:	b	1a608 <__assert_fail@plt+0x857c>
   1a604:	mov	r4, #0
   1a608:	movw	r9, #62344	; 0xf388
   1a60c:	ldr	r7, [fp, #12]
   1a610:	ldr	r5, [sp, #20]
   1a614:	movt	r9, #3
   1a618:	ldrb	r0, [r9]
   1a61c:	cmp	r0, #0
   1a620:	cmpne	r7, #0
   1a624:	beq	1a66c <__assert_fail@plt+0x85e0>
   1a628:	ldr	r0, [r7, #12]
   1a62c:	ldr	r1, [r7, #16]
   1a630:	sub	r1, r1, r0
   1a634:	cmp	r1, #8
   1a638:	bcs	1a64c <__assert_fail@plt+0x85c0>
   1a63c:	mov	r0, r7
   1a640:	mov	r1, #8
   1a644:	bl	24e50 <_obstack_newchunk@@Base>
   1a648:	ldr	r0, [r7, #12]
   1a64c:	movw	r1, #62728	; 0xf508
   1a650:	movt	r1, #3
   1a654:	ldrd	r2, [r1]
   1a658:	str	r3, [r0, #4]
   1a65c:	str	r2, [r0]
   1a660:	ldr	r0, [r7, #12]
   1a664:	add	r0, r0, #8
   1a668:	str	r0, [r7, #12]
   1a66c:	movw	r1, #62220	; 0xf30c
   1a670:	ldr	r6, [sp, #28]
   1a674:	sub	r2, r5, r4, lsl #1
   1a678:	mov	r8, sl
   1a67c:	mov	sl, r4
   1a680:	movt	r1, #3
   1a684:	ldr	r3, [r1]
   1a688:	mov	r1, #1
   1a68c:	add	r0, r6, r4
   1a690:	bl	11c90 <fwrite_unlocked@plt>
   1a694:	movw	r4, #62728	; 0xf508
   1a698:	ldrb	r2, [r9]
   1a69c:	movt	r4, #3
   1a6a0:	ldrd	r0, [r4]
   1a6a4:	adds	r0, r0, r5
   1a6a8:	adc	r1, r1, #0
   1a6ac:	cmp	r2, #0
   1a6b0:	cmpne	r7, #0
   1a6b4:	strd	r0, [r4]
   1a6b8:	beq	1a6f8 <__assert_fail@plt+0x866c>
   1a6bc:	ldr	r2, [r7, #12]
   1a6c0:	ldr	r3, [r7, #16]
   1a6c4:	sub	r3, r3, r2
   1a6c8:	cmp	r3, #8
   1a6cc:	bcs	1a6e4 <__assert_fail@plt+0x8658>
   1a6d0:	mov	r0, r7
   1a6d4:	mov	r1, #8
   1a6d8:	bl	24e50 <_obstack_newchunk@@Base>
   1a6dc:	ldrd	r0, [r4]
   1a6e0:	ldr	r2, [r7, #12]
   1a6e4:	str	r0, [r2]
   1a6e8:	str	r1, [r2, #4]
   1a6ec:	ldr	r0, [r7, #12]
   1a6f0:	add	r0, r0, #8
   1a6f4:	str	r0, [r7, #12]
   1a6f8:	ldr	r0, [fp, #16]
   1a6fc:	cmp	r0, #0
   1a700:	beq	1a754 <__assert_fail@plt+0x86c8>
   1a704:	movw	r0, #62220	; 0xf30c
   1a708:	movt	r0, #3
   1a70c:	ldr	r1, [r0]
   1a710:	movw	r0, #49847	; 0xc2b7
   1a714:	movt	r0, #2
   1a718:	bl	11b94 <fputs_unlocked@plt>
   1a71c:	cmp	sl, #0
   1a720:	beq	1a754 <__assert_fail@plt+0x86c8>
   1a724:	add	r0, r6, r5
   1a728:	ldrb	r1, [r0, #-1]
   1a72c:	movw	r0, #62220	; 0xf30c
   1a730:	movt	r0, #3
   1a734:	ldr	r0, [r0]
   1a738:	ldr	r2, [r0, #20]
   1a73c:	ldr	r3, [r0, #24]
   1a740:	cmp	r2, r3
   1a744:	bcs	1a798 <__assert_fail@plt+0x870c>
   1a748:	add	r3, r2, #1
   1a74c:	str	r3, [r0, #20]
   1a750:	strb	r1, [r2]
   1a754:	cmp	r6, r8
   1a758:	ldrne	r0, [sp, #16]
   1a75c:	cmpne	r6, r0
   1a760:	beq	1a76c <__assert_fail@plt+0x86e0>
   1a764:	mov	r0, r6
   1a768:	bl	2046c <__assert_fail@plt+0xe3e0>
   1a76c:	ldrb	r0, [sp, #27]
   1a770:	add	r0, r5, r0
   1a774:	sub	sp, fp, #28
   1a778:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a77c:	mov	r1, #32
   1a780:	bl	11f54 <__overflow@plt>
   1a784:	cmp	r6, #0
   1a788:	bne	19688 <__assert_fail@plt+0x75fc>
   1a78c:	b	1a3fc <__assert_fail@plt+0x8370>
   1a790:	bl	11f54 <__overflow@plt>
   1a794:	b	1a46c <__assert_fail@plt+0x83e0>
   1a798:	bl	11f54 <__overflow@plt>
   1a79c:	b	1a754 <__assert_fail@plt+0x86c8>
   1a7a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7a4:	add	fp, sp, #28
   1a7a8:	sub	sp, sp, #140	; 0x8c
   1a7ac:	movw	r4, #61896	; 0xf1c8
   1a7b0:	movw	r8, #62464	; 0xf400
   1a7b4:	movw	r9, #62460	; 0xf3fc
   1a7b8:	movw	sl, #62456	; 0xf3f8
   1a7bc:	movw	r5, #62220	; 0xf30c
   1a7c0:	add	r6, sp, #12
   1a7c4:	movt	r4, #3
   1a7c8:	movt	r8, #3
   1a7cc:	movt	r9, #3
   1a7d0:	movt	sl, #3
   1a7d4:	movt	r5, #3
   1a7d8:	add	r0, r4, #24
   1a7dc:	str	r0, [sp, #4]
   1a7e0:	add	r0, r4, #8
   1a7e4:	str	r0, [sp]
   1a7e8:	add	r0, r4, #16
   1a7ec:	str	r0, [sp, #8]
   1a7f0:	b	1a80c <__assert_fail@plt+0x8780>
   1a7f4:	mov	r0, r7
   1a7f8:	bl	11bac <raise@plt>
   1a7fc:	mov	r0, #2
   1a800:	mov	r1, r6
   1a804:	mov	r2, #0
   1a808:	bl	11c0c <sigprocmask@plt>
   1a80c:	ldr	r0, [r8]
   1a810:	cmp	r0, #0
   1a814:	bne	1a828 <__assert_fail@plt+0x879c>
   1a818:	ldr	r0, [r9]
   1a81c:	cmp	r0, #0
   1a820:	subeq	sp, fp, #28
   1a824:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a828:	ldrb	r0, [sl]
   1a82c:	cmp	r0, #1
   1a830:	bne	1a8b0 <__assert_fail@plt+0x8824>
   1a834:	ldr	r3, [r5]
   1a838:	ldr	r1, [r4]
   1a83c:	ldr	r0, [r4, #4]
   1a840:	mov	r2, #1
   1a844:	bl	11c90 <fwrite_unlocked@plt>
   1a848:	ldrb	r0, [sl]
   1a84c:	cmp	r0, #0
   1a850:	bne	1a89c <__assert_fail@plt+0x8810>
   1a854:	mov	r0, #1
   1a858:	strb	r0, [sl]
   1a85c:	mov	r0, #1
   1a860:	bl	11ea0 <tcgetpgrp@plt>
   1a864:	cmp	r0, #0
   1a868:	movge	r0, #1
   1a86c:	blge	18e14 <__assert_fail@plt+0x6d88>
   1a870:	ldr	r0, [r4, #20]
   1a874:	cmp	r0, #0
   1a878:	beq	1a884 <__assert_fail@plt+0x87f8>
   1a87c:	ldr	r0, [sp, #8]
   1a880:	b	1a898 <__assert_fail@plt+0x880c>
   1a884:	mov	r0, r4
   1a888:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a88c:	ldr	r0, [sp, #4]
   1a890:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a894:	ldr	r0, [sp]
   1a898:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1a89c:	ldr	r3, [r5]
   1a8a0:	ldr	r1, [r4, #8]
   1a8a4:	ldr	r0, [r4, #12]
   1a8a8:	mov	r2, #1
   1a8ac:	bl	11c90 <fwrite_unlocked@plt>
   1a8b0:	ldr	r0, [r5]
   1a8b4:	bl	11d14 <fflush_unlocked@plt>
   1a8b8:	movw	r1, #62736	; 0xf510
   1a8bc:	mov	r0, #0
   1a8c0:	mov	r2, r6
   1a8c4:	movt	r1, #3
   1a8c8:	bl	11c0c <sigprocmask@plt>
   1a8cc:	ldr	r7, [r8]
   1a8d0:	ldr	r0, [r9]
   1a8d4:	cmp	r0, #0
   1a8d8:	beq	1a8ec <__assert_fail@plt+0x8860>
   1a8dc:	sub	r0, r0, #1
   1a8e0:	mov	r7, #19
   1a8e4:	str	r0, [r9]
   1a8e8:	b	1a7f4 <__assert_fail@plt+0x8768>
   1a8ec:	mov	r0, r7
   1a8f0:	mov	r1, #0
   1a8f4:	bl	11c84 <signal@plt>
   1a8f8:	b	1a7f4 <__assert_fail@plt+0x8768>
   1a8fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a900:	add	fp, sp, #24
   1a904:	sub	sp, sp, #264	; 0x108
   1a908:	ldr	r8, [fp, #8]
   1a90c:	mov	r4, r2
   1a910:	add	r2, sp, #8
   1a914:	str	r2, [sp]
   1a918:	mov	r2, r3
   1a91c:	mov	r3, r8
   1a920:	bl	11f48 <statx@plt>
   1a924:	cmp	r0, #0
   1a928:	blt	1aa18 <__assert_fail@plt+0x898c>
   1a92c:	ldr	r5, [sp, #144]	; 0x90
   1a930:	ldr	r2, [sp, #148]	; 0x94
   1a934:	add	sl, r4, #64	; 0x40
   1a938:	tst	r8, #2048	; 0x800
   1a93c:	mov	r1, r5
   1a940:	bic	r3, r2, #255	; 0xff
   1a944:	uxtb	r2, r2
   1a948:	bfc	r1, #0, #12
   1a94c:	bfi	r2, r5, #8, #12
   1a950:	orr	r2, r2, r3, lsl #12
   1a954:	orr	r1, r1, r3, lsr #20
   1a958:	str	r2, [r4]
   1a95c:	str	r1, [r4, #4]
   1a960:	ldr	r2, [sp, #40]	; 0x28
   1a964:	ldr	r3, [sp, #44]	; 0x2c
   1a968:	strd	r2, [r4, #96]	; 0x60
   1a96c:	ldr	r2, [sp, #136]	; 0x88
   1a970:	ldr	r7, [sp, #140]	; 0x8c
   1a974:	ldrh	ip, [sp, #36]	; 0x24
   1a978:	ldr	lr, [sp, #24]
   1a97c:	ldr	r3, [sp, #28]
   1a980:	ldr	r5, [sp, #32]
   1a984:	mov	r6, r2
   1a988:	bic	r1, r7, #255	; 0xff
   1a98c:	uxtb	r7, r7
   1a990:	str	ip, [r4, #16]
   1a994:	str	lr, [r4, #20]
   1a998:	str	r3, [r4, #24]
   1a99c:	str	r5, [r4, #28]
   1a9a0:	add	ip, r4, #48	; 0x30
   1a9a4:	bfc	r6, #0, #12
   1a9a8:	bfi	r7, r2, #8, #12
   1a9ac:	orr	r6, r6, r1, lsr #20
   1a9b0:	orr	r1, r7, r1, lsl #12
   1a9b4:	str	r1, [r4, #32]
   1a9b8:	str	r6, [r4, #36]	; 0x24
   1a9bc:	ldr	r1, [sp, #48]	; 0x30
   1a9c0:	ldr	r2, [sp, #52]	; 0x34
   1a9c4:	ldr	r3, [sp, #12]
   1a9c8:	stm	ip, {r1, r2, r3}
   1a9cc:	ldr	r1, [sp, #56]	; 0x38
   1a9d0:	ldr	r2, [sp, #60]	; 0x3c
   1a9d4:	ldr	r3, [sp, #72]	; 0x48
   1a9d8:	ldr	r7, [sp, #80]	; 0x50
   1a9dc:	ldr	r6, [sp, #120]	; 0x78
   1a9e0:	ldr	r5, [sp, #128]	; 0x80
   1a9e4:	ldr	ip, [sp, #104]	; 0x68
   1a9e8:	ldr	lr, [sp, #112]	; 0x70
   1a9ec:	stm	sl, {r1, r2, r3, r7}
   1a9f0:	add	r1, r4, #84	; 0x54
   1a9f4:	str	r6, [r4, #80]	; 0x50
   1a9f8:	stm	r1, {r5, ip, lr}
   1a9fc:	beq	1aa18 <__assert_fail@plt+0x898c>
   1aa00:	ldrb	r1, [sp, #9]
   1aa04:	tst	r1, #8
   1aa08:	bne	1aa20 <__assert_fail@plt+0x8994>
   1aa0c:	mvn	r1, #0
   1aa10:	str	r1, [r4, #80]	; 0x50
   1aa14:	str	r1, [r4, #84]	; 0x54
   1aa18:	sub	sp, fp, #24
   1aa1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1aa20:	ldr	r2, [sp, #88]	; 0x58
   1aa24:	ldr	r3, [sp, #96]	; 0x60
   1aa28:	add	r1, r4, #80	; 0x50
   1aa2c:	strd	r2, [r1]
   1aa30:	sub	sp, fp, #24
   1aa34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1aa38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa3c:	add	fp, sp, #28
   1aa40:	sub	sp, sp, #36	; 0x24
   1aa44:	ldr	r4, [r0]
   1aa48:	mov	r9, r0
   1aa4c:	mov	r0, r2
   1aa50:	mov	r7, r3
   1aa54:	mov	r6, r2
   1aa58:	mov	r5, r1
   1aa5c:	bl	251ec <_obstack_memory_used@@Base+0x178>
   1aa60:	movw	r1, #62920	; 0xf5c8
   1aa64:	movt	r1, #3
   1aa68:	ldrb	r1, [r1]
   1aa6c:	cmp	r1, #0
   1aa70:	beq	1aa94 <__assert_fail@plt+0x8a08>
   1aa74:	sub	r1, r0, #1
   1aa78:	clz	r0, r0
   1aa7c:	mov	r2, #0
   1aa80:	cmp	r1, #2
   1aa84:	lsr	r0, r0, #5
   1aa88:	movwcc	r2, #1
   1aa8c:	orr	r8, r0, r2
   1aa90:	b	1aa98 <__assert_fail@plt+0x8a0c>
   1aa94:	mov	r8, #0
   1aa98:	ldr	sl, [fp, #8]
   1aa9c:	cmp	r7, #0
   1aaa0:	beq	1ab1c <__assert_fail@plt+0x8a90>
   1aaa4:	mov	r0, r4
   1aaa8:	mov	r1, #8192	; 0x2000
   1aaac:	mov	r2, r5
   1aab0:	mvn	r3, #0
   1aab4:	str	r6, [sp]
   1aab8:	bl	252b0 <_obstack_memory_used@@Base+0x23c>
   1aabc:	mov	r7, r0
   1aac0:	cmp	r0, #8192	; 0x2000
   1aac4:	bcc	1aaec <__assert_fail@plt+0x8a60>
   1aac8:	add	r4, r7, #1
   1aacc:	mov	r0, r4
   1aad0:	bl	27ea0 <_obstack_memory_used@@Base+0x2e2c>
   1aad4:	mov	r1, r4
   1aad8:	mov	r2, r5
   1aadc:	mvn	r3, #0
   1aae0:	str	r6, [sp]
   1aae4:	mov	r4, r0
   1aae8:	bl	252b0 <_obstack_memory_used@@Base+0x23c>
   1aaec:	ldrb	r0, [r4]
   1aaf0:	ldrb	r1, [r5]
   1aaf4:	mov	r6, #1
   1aaf8:	cmp	r1, r0
   1aafc:	bne	1ab10 <__assert_fail@plt+0x8a84>
   1ab00:	mov	r0, r5
   1ab04:	bl	11eac <strlen@plt>
   1ab08:	subs	r6, r0, r7
   1ab0c:	movwne	r6, #1
   1ab10:	cmp	r8, #0
   1ab14:	bne	1ab60 <__assert_fail@plt+0x8ad4>
   1ab18:	b	1aec0 <__assert_fail@plt+0x8e34>
   1ab1c:	mov	r0, r5
   1ab20:	bl	11eac <strlen@plt>
   1ab24:	mov	r7, r0
   1ab28:	mov	r6, #0
   1ab2c:	cmp	r8, #0
   1ab30:	beq	1aebc <__assert_fail@plt+0x8e30>
   1ab34:	add	r6, r7, #1
   1ab38:	cmp	r7, #8192	; 0x2000
   1ab3c:	bcc	1ab4c <__assert_fail@plt+0x8ac0>
   1ab40:	mov	r0, r6
   1ab44:	bl	27ea0 <_obstack_memory_used@@Base+0x2e2c>
   1ab48:	mov	r4, r0
   1ab4c:	mov	r0, r4
   1ab50:	mov	r1, r5
   1ab54:	mov	r2, r6
   1ab58:	bl	11c60 <memcpy@plt>
   1ab5c:	mov	r6, #0
   1ab60:	add	sl, r4, r7
   1ab64:	bl	11d74 <__ctype_get_mb_cur_max@plt>
   1ab68:	cmp	r0, #1
   1ab6c:	str	r6, [sp, #12]
   1ab70:	bls	1ae78 <__assert_fail@plt+0x8dec>
   1ab74:	cmp	r7, #1
   1ab78:	blt	1af3c <__assert_fail@plt+0x8eb0>
   1ab7c:	mov	r3, #0
   1ab80:	add	r7, sp, #24
   1ab84:	mov	r6, #0
   1ab88:	mov	r8, r4
   1ab8c:	mov	r5, r4
   1ab90:	ldrb	r0, [r5]
   1ab94:	sub	r1, r0, #32
   1ab98:	cmp	r1, #94	; 0x5e
   1ab9c:	bhi	1ad3c <__assert_fail@plt+0x8cb0>
   1aba0:	add	r2, pc, #0
   1aba4:	ldr	pc, [r2, r1, lsl #2]
   1aba8:	andeq	sl, r1, r4, lsr #26
   1abac:	andeq	sl, r1, r4, lsr #26
   1abb0:	andeq	sl, r1, r4, lsr #26
   1abb4:	andeq	sl, r1, r4, lsr #26
   1abb8:	andeq	sl, r1, ip, lsr sp
   1abbc:	andeq	sl, r1, r4, lsr #26
   1abc0:	andeq	sl, r1, r4, lsr #26
   1abc4:	andeq	sl, r1, r4, lsr #26
   1abc8:	andeq	sl, r1, r4, lsr #26
   1abcc:	andeq	sl, r1, r4, lsr #26
   1abd0:	andeq	sl, r1, r4, lsr #26
   1abd4:	andeq	sl, r1, r4, lsr #26
   1abd8:	andeq	sl, r1, r4, lsr #26
   1abdc:	andeq	sl, r1, r4, lsr #26
   1abe0:	andeq	sl, r1, r4, lsr #26
   1abe4:	andeq	sl, r1, r4, lsr #26
   1abe8:	andeq	sl, r1, r4, lsr #26
   1abec:	andeq	sl, r1, r4, lsr #26
   1abf0:	andeq	sl, r1, r4, lsr #26
   1abf4:	andeq	sl, r1, r4, lsr #26
   1abf8:	andeq	sl, r1, r4, lsr #26
   1abfc:	andeq	sl, r1, r4, lsr #26
   1ac00:	andeq	sl, r1, r4, lsr #26
   1ac04:	andeq	sl, r1, r4, lsr #26
   1ac08:	andeq	sl, r1, r4, lsr #26
   1ac0c:	andeq	sl, r1, r4, lsr #26
   1ac10:	andeq	sl, r1, r4, lsr #26
   1ac14:	andeq	sl, r1, r4, lsr #26
   1ac18:	andeq	sl, r1, r4, lsr #26
   1ac1c:	andeq	sl, r1, r4, lsr #26
   1ac20:	andeq	sl, r1, r4, lsr #26
   1ac24:	andeq	sl, r1, r4, lsr #26
   1ac28:	andeq	sl, r1, ip, lsr sp
   1ac2c:	andeq	sl, r1, r4, lsr #26
   1ac30:	andeq	sl, r1, r4, lsr #26
   1ac34:	andeq	sl, r1, r4, lsr #26
   1ac38:	andeq	sl, r1, r4, lsr #26
   1ac3c:	andeq	sl, r1, r4, lsr #26
   1ac40:	andeq	sl, r1, r4, lsr #26
   1ac44:	andeq	sl, r1, r4, lsr #26
   1ac48:	andeq	sl, r1, r4, lsr #26
   1ac4c:	andeq	sl, r1, r4, lsr #26
   1ac50:	andeq	sl, r1, r4, lsr #26
   1ac54:	andeq	sl, r1, r4, lsr #26
   1ac58:	andeq	sl, r1, r4, lsr #26
   1ac5c:	andeq	sl, r1, r4, lsr #26
   1ac60:	andeq	sl, r1, r4, lsr #26
   1ac64:	andeq	sl, r1, r4, lsr #26
   1ac68:	andeq	sl, r1, r4, lsr #26
   1ac6c:	andeq	sl, r1, r4, lsr #26
   1ac70:	andeq	sl, r1, r4, lsr #26
   1ac74:	andeq	sl, r1, r4, lsr #26
   1ac78:	andeq	sl, r1, r4, lsr #26
   1ac7c:	andeq	sl, r1, r4, lsr #26
   1ac80:	andeq	sl, r1, r4, lsr #26
   1ac84:	andeq	sl, r1, r4, lsr #26
   1ac88:	andeq	sl, r1, r4, lsr #26
   1ac8c:	andeq	sl, r1, r4, lsr #26
   1ac90:	andeq	sl, r1, r4, lsr #26
   1ac94:	andeq	sl, r1, r4, lsr #26
   1ac98:	andeq	sl, r1, r4, lsr #26
   1ac9c:	andeq	sl, r1, r4, lsr #26
   1aca0:	andeq	sl, r1, r4, lsr #26
   1aca4:	andeq	sl, r1, r4, lsr #26
   1aca8:	andeq	sl, r1, ip, lsr sp
   1acac:	andeq	sl, r1, r4, lsr #26
   1acb0:	andeq	sl, r1, r4, lsr #26
   1acb4:	andeq	sl, r1, r4, lsr #26
   1acb8:	andeq	sl, r1, r4, lsr #26
   1acbc:	andeq	sl, r1, r4, lsr #26
   1acc0:	andeq	sl, r1, r4, lsr #26
   1acc4:	andeq	sl, r1, r4, lsr #26
   1acc8:	andeq	sl, r1, r4, lsr #26
   1accc:	andeq	sl, r1, r4, lsr #26
   1acd0:	andeq	sl, r1, r4, lsr #26
   1acd4:	andeq	sl, r1, r4, lsr #26
   1acd8:	andeq	sl, r1, r4, lsr #26
   1acdc:	andeq	sl, r1, r4, lsr #26
   1ace0:	andeq	sl, r1, r4, lsr #26
   1ace4:	andeq	sl, r1, r4, lsr #26
   1ace8:	andeq	sl, r1, r4, lsr #26
   1acec:	andeq	sl, r1, r4, lsr #26
   1acf0:	andeq	sl, r1, r4, lsr #26
   1acf4:	andeq	sl, r1, r4, lsr #26
   1acf8:	andeq	sl, r1, r4, lsr #26
   1acfc:	andeq	sl, r1, r4, lsr #26
   1ad00:	andeq	sl, r1, r4, lsr #26
   1ad04:	andeq	sl, r1, r4, lsr #26
   1ad08:	andeq	sl, r1, r4, lsr #26
   1ad0c:	andeq	sl, r1, r4, lsr #26
   1ad10:	andeq	sl, r1, r4, lsr #26
   1ad14:	andeq	sl, r1, r4, lsr #26
   1ad18:	andeq	sl, r1, r4, lsr #26
   1ad1c:	andeq	sl, r1, r4, lsr #26
   1ad20:	andeq	sl, r1, r4, lsr #26
   1ad24:	strb	r0, [r8], #1
   1ad28:	add	r6, r6, #1
   1ad2c:	add	r5, r5, #1
   1ad30:	cmp	r5, sl
   1ad34:	bcc	1ab90 <__assert_fail@plt+0x8b04>
   1ad38:	b	1af44 <__assert_fail@plt+0x8eb8>
   1ad3c:	str	r9, [sp, #4]
   1ad40:	str	r3, [sp, #28]
   1ad44:	str	r3, [sp, #24]
   1ad48:	str	r4, [sp, #8]
   1ad4c:	sub	r2, sl, r5
   1ad50:	add	r0, sp, #20
   1ad54:	mov	r1, r5
   1ad58:	mov	r3, r7
   1ad5c:	bl	2280c <__assert_fail@plt+0x10780>
   1ad60:	cmp	r0, #0
   1ad64:	beq	1ad80 <__assert_fail@plt+0x8cf4>
   1ad68:	mov	r9, r0
   1ad6c:	cmn	r0, #2
   1ad70:	beq	1ae48 <__assert_fail@plt+0x8dbc>
   1ad74:	cmn	r9, #1
   1ad78:	bne	1ad84 <__assert_fail@plt+0x8cf8>
   1ad7c:	b	1ae50 <__assert_fail@plt+0x8dc4>
   1ad80:	mov	r9, #1
   1ad84:	add	r0, r5, r9
   1ad88:	str	r0, [sp, #16]
   1ad8c:	ldr	r0, [sp, #20]
   1ad90:	bl	11c00 <wcwidth@plt>
   1ad94:	cmp	r0, #0
   1ad98:	blt	1ae1c <__assert_fail@plt+0x8d90>
   1ad9c:	mov	lr, r7
   1ada0:	cmp	r9, #16
   1ada4:	bcc	1adf4 <__assert_fail@plt+0x8d68>
   1ada8:	ldr	r1, [sp, #16]
   1adac:	cmp	r8, r1
   1adb0:	addcc	r1, r8, r9
   1adb4:	cmpcc	r5, r1
   1adb8:	bcc	1adf4 <__assert_fail@plt+0x8d68>
   1adbc:	bic	ip, r9, #15
   1adc0:	mov	r7, r8
   1adc4:	add	r3, r5, ip
   1adc8:	add	r2, r8, ip
   1adcc:	sub	r1, r9, ip
   1add0:	mov	r4, ip
   1add4:	vld1.8	{d16-d17}, [r5]!
   1add8:	subs	r4, r4, #16
   1addc:	vst1.8	{d16-d17}, [r7]!
   1ade0:	bne	1add4 <__assert_fail@plt+0x8d48>
   1ade4:	ldr	r4, [sp, #8]
   1ade8:	cmp	r9, ip
   1adec:	bne	1ae00 <__assert_fail@plt+0x8d74>
   1adf0:	b	1ae10 <__assert_fail@plt+0x8d84>
   1adf4:	mov	r1, r9
   1adf8:	mov	r2, r8
   1adfc:	mov	r3, r5
   1ae00:	ldrb	r7, [r3], #1
   1ae04:	subs	r1, r1, #1
   1ae08:	strb	r7, [r2], #1
   1ae0c:	bne	1ae00 <__assert_fail@plt+0x8d74>
   1ae10:	add	r8, r8, r9
   1ae14:	mov	r7, lr
   1ae18:	b	1ae28 <__assert_fail@plt+0x8d9c>
   1ae1c:	mov	r0, #63	; 0x3f
   1ae20:	strb	r0, [r8], #1
   1ae24:	mov	r0, #1
   1ae28:	add	r6, r0, r6
   1ae2c:	mov	r0, r7
   1ae30:	bl	11c78 <mbsinit@plt>
   1ae34:	ldr	r1, [sp, #16]
   1ae38:	cmp	r0, #0
   1ae3c:	mov	r5, r1
   1ae40:	beq	1ad4c <__assert_fail@plt+0x8cc0>
   1ae44:	b	1ae60 <__assert_fail@plt+0x8dd4>
   1ae48:	mov	r1, sl
   1ae4c:	b	1ae54 <__assert_fail@plt+0x8dc8>
   1ae50:	add	r1, r5, #1
   1ae54:	mov	r0, #63	; 0x3f
   1ae58:	add	r6, r6, #1
   1ae5c:	strb	r0, [r8], #1
   1ae60:	ldr	r9, [sp, #4]
   1ae64:	mov	r5, r1
   1ae68:	mov	r3, #0
   1ae6c:	cmp	r5, sl
   1ae70:	bcc	1ab90 <__assert_fail@plt+0x8b04>
   1ae74:	b	1af44 <__assert_fail@plt+0x8eb8>
   1ae78:	cmp	r7, #1
   1ae7c:	blt	1aeb0 <__assert_fail@plt+0x8e24>
   1ae80:	bl	11e70 <__ctype_b_loc@plt>
   1ae84:	mov	r1, #63	; 0x3f
   1ae88:	mov	r2, r4
   1ae8c:	ldrb	r3, [r2]
   1ae90:	ldr	r6, [r0]
   1ae94:	add	r3, r6, r3, lsl #1
   1ae98:	ldrb	r3, [r3, #1]
   1ae9c:	tst	r3, #64	; 0x40
   1aea0:	strbeq	r1, [r2]
   1aea4:	add	r2, r2, #1
   1aea8:	cmp	r2, sl
   1aeac:	bcc	1ae8c <__assert_fail@plt+0x8e00>
   1aeb0:	ldr	sl, [fp, #8]
   1aeb4:	mov	r6, r7
   1aeb8:	b	1af4c <__assert_fail@plt+0x8ec0>
   1aebc:	mov	r4, r5
   1aec0:	cmp	sl, #0
   1aec4:	str	r6, [sp, #12]
   1aec8:	beq	1aef0 <__assert_fail@plt+0x8e64>
   1aecc:	bl	11d74 <__ctype_get_mb_cur_max@plt>
   1aed0:	cmp	r0, #2
   1aed4:	bcc	1aef4 <__assert_fail@plt+0x8e68>
   1aed8:	mov	r0, r4
   1aedc:	mov	r1, r7
   1aee0:	mov	r2, #0
   1aee4:	bl	22d10 <__assert_fail@plt+0x10c84>
   1aee8:	mov	r6, r0
   1aeec:	b	1af4c <__assert_fail@plt+0x8ec0>
   1aef0:	b	1af4c <__assert_fail@plt+0x8ec0>
   1aef4:	cmp	r7, #1
   1aef8:	blt	1af9c <__assert_fail@plt+0x8f10>
   1aefc:	mov	r5, r4
   1af00:	add	r4, r4, r7
   1af04:	bl	11e70 <__ctype_b_loc@plt>
   1af08:	ldr	r0, [r0]
   1af0c:	mov	r6, #0
   1af10:	mov	r3, r5
   1af14:	mov	r1, r5
   1af18:	ldrb	r2, [r1], #1
   1af1c:	add	r2, r0, r2, lsl #1
   1af20:	cmp	r1, r4
   1af24:	ldrh	r2, [r2]
   1af28:	ubfx	r2, r2, #14, #1
   1af2c:	add	r6, r6, r2
   1af30:	bcc	1af18 <__assert_fail@plt+0x8e8c>
   1af34:	mov	r4, r3
   1af38:	b	1af4c <__assert_fail@plt+0x8ec0>
   1af3c:	mov	r6, #0
   1af40:	mov	r8, r4
   1af44:	ldr	sl, [fp, #8]
   1af48:	sub	r7, r8, r4
   1af4c:	movw	r1, #62921	; 0xf5c9
   1af50:	ldr	r0, [fp, #12]
   1af54:	movt	r1, #3
   1af58:	ldrb	r2, [r1]
   1af5c:	mov	r1, #0
   1af60:	cmp	r2, #0
   1af64:	beq	1af80 <__assert_fail@plt+0x8ef4>
   1af68:	movw	r2, #481	; 0x1e1
   1af6c:	movt	r2, #4
   1af70:	ldrb	r2, [r2]
   1af74:	cmp	r2, #1
   1af78:	ldreq	r1, [sp, #12]
   1af7c:	eoreq	r1, r1, #1
   1af80:	cmp	sl, #0
   1af84:	strb	r1, [r0]
   1af88:	mov	r0, r7
   1af8c:	strne	r6, [sl]
   1af90:	str	r4, [r9]
   1af94:	sub	sp, fp, #28
   1af98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af9c:	mov	r6, #0
   1afa0:	b	1af4c <__assert_fail@plt+0x8ec0>
   1afa4:	push	{fp, lr}
   1afa8:	mov	fp, sp
   1afac:	sub	sp, sp, #8
   1afb0:	mov	lr, r0
   1afb4:	movw	r0, #62896	; 0xf5b0
   1afb8:	mov	ip, r1
   1afbc:	movt	r0, #3
   1afc0:	ldrb	r3, [r0]
   1afc4:	mov	r0, #2
   1afc8:	cmp	r3, #0
   1afcc:	movw	r3, #62341	; 0xf385
   1afd0:	movt	r3, #3
   1afd4:	movwne	r0, #258	; 0x102
   1afd8:	ldrb	r3, [r3]
   1afdc:	bfi	r0, r3, #10, #1
   1afe0:	movw	r3, #62264	; 0xf338
   1afe4:	movt	r3, #3
   1afe8:	ldr	r3, [r3]
   1afec:	cmp	r3, #0
   1aff0:	bne	1b060 <__assert_fail@plt+0x8fd4>
   1aff4:	movw	r3, #62868	; 0xf594
   1aff8:	movt	r3, #3
   1affc:	ldr	r3, [r3]
   1b000:	cmp	r3, #4
   1b004:	bcs	1b0dc <__assert_fail@plt+0x9050>
   1b008:	movw	r2, #56604	; 0xdd1c
   1b00c:	movt	r2, #2
   1b010:	ldr	r2, [r2, r3, lsl #2]
   1b014:	orr	r0, r2, r0
   1b018:	movw	r2, #62872	; 0xf598
   1b01c:	movt	r2, #3
   1b020:	ldrb	r2, [r2]
   1b024:	cmp	r2, #1
   1b028:	bne	1b040 <__assert_fail@plt+0x8fb4>
   1b02c:	movw	r2, #62900	; 0xf5b4
   1b030:	movt	r2, #3
   1b034:	ldrb	r2, [r2]
   1b038:	cmp	r2, #1
   1b03c:	bne	1b048 <__assert_fail@plt+0x8fbc>
   1b040:	orr	r0, r0, #524	; 0x20c
   1b044:	b	1b04c <__assert_fail@plt+0x8fc0>
   1b048:	orr	r0, r0, #516	; 0x204
   1b04c:	movw	r2, #62898	; 0xf5b2
   1b050:	movt	r2, #3
   1b054:	ldrb	r2, [r2]
   1b058:	cmp	r2, #0
   1b05c:	orreq	r0, r0, #16
   1b060:	movw	r2, #62336	; 0xf380
   1b064:	movt	r2, #3
   1b068:	ldr	r3, [r2]
   1b06c:	cmp	r3, #6
   1b070:	bhi	1b0dc <__assert_fail@plt+0x9050>
   1b074:	mov	r2, #1
   1b078:	mov	r1, #87	; 0x57
   1b07c:	tst	r1, r2, lsl r3
   1b080:	beq	1b0a4 <__assert_fail@plt+0x9018>
   1b084:	str	r0, [sp]
   1b088:	mvn	r0, #99	; 0x63
   1b08c:	mov	r1, lr
   1b090:	mov	r2, ip
   1b094:	mov	r3, #0
   1b098:	bl	1a8fc <__assert_fail@plt+0x8870>
   1b09c:	mov	sp, fp
   1b0a0:	pop	{fp, pc}
   1b0a4:	cmp	r3, #3
   1b0a8:	bne	1b0b4 <__assert_fail@plt+0x9028>
   1b0ac:	orr	r0, r0, #512	; 0x200
   1b0b0:	b	1b084 <__assert_fail@plt+0x8ff8>
   1b0b4:	movw	r1, #62868	; 0xf594
   1b0b8:	movt	r1, #3
   1b0bc:	ldr	r3, [r1]
   1b0c0:	cmp	r3, #4
   1b0c4:	bcs	1b0dc <__assert_fail@plt+0x9050>
   1b0c8:	movw	r1, #56604	; 0xdd1c
   1b0cc:	movt	r1, #2
   1b0d0:	ldr	r1, [r1, r3, lsl #2]
   1b0d4:	orr	r0, r1, r0
   1b0d8:	b	1b084 <__assert_fail@plt+0x8ff8>
   1b0dc:	bl	12038 <abort@plt>
   1b0e0:	push	{r4, r5, fp, lr}
   1b0e4:	add	fp, sp, #8
   1b0e8:	ldr	r4, [r1]
   1b0ec:	ldr	r5, [r0]
   1b0f0:	bl	11ed0 <__errno_location@plt>
   1b0f4:	mov	r1, #0
   1b0f8:	str	r1, [r0]
   1b0fc:	mov	r0, r5
   1b100:	mov	r1, r4
   1b104:	pop	{r4, r5, fp, lr}
   1b108:	b	11de0 <strcoll@plt>
   1b10c:	push	{r4, r5, fp, lr}
   1b110:	add	fp, sp, #8
   1b114:	ldr	r5, [r1, #120]	; 0x78
   1b118:	mov	r2, #1
   1b11c:	mov	r3, #1
   1b120:	cmp	r5, #3
   1b124:	beq	1b148 <__assert_fail@plt+0x90bc>
   1b128:	cmp	r5, #9
   1b12c:	mov	r3, #1
   1b130:	beq	1b148 <__assert_fail@plt+0x90bc>
   1b134:	ldr	r3, [r1, #124]	; 0x7c
   1b138:	and	r3, r3, #61440	; 0xf000
   1b13c:	sub	r3, r3, #16384	; 0x4000
   1b140:	clz	r3, r3
   1b144:	lsr	r3, r3, #5
   1b148:	ldr	r5, [r0, #120]	; 0x78
   1b14c:	cmp	r5, #3
   1b150:	cmpne	r5, #9
   1b154:	beq	1b16c <__assert_fail@plt+0x90e0>
   1b158:	ldr	r2, [r0, #124]	; 0x7c
   1b15c:	and	r2, r2, #61440	; 0xf000
   1b160:	sub	r2, r2, #16384	; 0x4000
   1b164:	clz	r2, r2
   1b168:	lsr	r2, r2, #5
   1b16c:	subs	r2, r3, r2
   1b170:	movne	r0, r2
   1b174:	popne	{r4, r5, fp, pc}
   1b178:	ldr	r4, [r1]
   1b17c:	ldr	r5, [r0]
   1b180:	bl	11ed0 <__errno_location@plt>
   1b184:	mov	r1, #0
   1b188:	str	r1, [r0]
   1b18c:	mov	r0, r5
   1b190:	mov	r1, r4
   1b194:	pop	{r4, r5, fp, lr}
   1b198:	b	11de0 <strcoll@plt>
   1b19c:	push	{r4, r5, fp, lr}
   1b1a0:	add	fp, sp, #8
   1b1a4:	ldr	r4, [r0]
   1b1a8:	ldr	r5, [r1]
   1b1ac:	bl	11ed0 <__errno_location@plt>
   1b1b0:	mov	r1, #0
   1b1b4:	str	r1, [r0]
   1b1b8:	mov	r0, r5
   1b1bc:	mov	r1, r4
   1b1c0:	pop	{r4, r5, fp, lr}
   1b1c4:	b	11de0 <strcoll@plt>
   1b1c8:	push	{r4, r5, fp, lr}
   1b1cc:	add	fp, sp, #8
   1b1d0:	ldr	r5, [r1, #120]	; 0x78
   1b1d4:	mov	r2, #1
   1b1d8:	mov	r3, #1
   1b1dc:	cmp	r5, #3
   1b1e0:	beq	1b204 <__assert_fail@plt+0x9178>
   1b1e4:	cmp	r5, #9
   1b1e8:	mov	r3, #1
   1b1ec:	beq	1b204 <__assert_fail@plt+0x9178>
   1b1f0:	ldr	r3, [r1, #124]	; 0x7c
   1b1f4:	and	r3, r3, #61440	; 0xf000
   1b1f8:	sub	r3, r3, #16384	; 0x4000
   1b1fc:	clz	r3, r3
   1b200:	lsr	r3, r3, #5
   1b204:	ldr	r5, [r0, #120]	; 0x78
   1b208:	cmp	r5, #3
   1b20c:	cmpne	r5, #9
   1b210:	beq	1b228 <__assert_fail@plt+0x919c>
   1b214:	ldr	r2, [r0, #124]	; 0x7c
   1b218:	and	r2, r2, #61440	; 0xf000
   1b21c:	sub	r2, r2, #16384	; 0x4000
   1b220:	clz	r2, r2
   1b224:	lsr	r2, r2, #5
   1b228:	subs	r2, r3, r2
   1b22c:	movne	r0, r2
   1b230:	popne	{r4, r5, fp, pc}
   1b234:	ldr	r4, [r0]
   1b238:	ldr	r5, [r1]
   1b23c:	bl	11ed0 <__errno_location@plt>
   1b240:	mov	r1, #0
   1b244:	str	r1, [r0]
   1b248:	mov	r0, r5
   1b24c:	mov	r1, r4
   1b250:	pop	{r4, r5, fp, lr}
   1b254:	b	11de0 <strcoll@plt>
   1b258:	ldr	r1, [r1]
   1b25c:	ldr	r0, [r0]
   1b260:	b	11bd0 <strcmp@plt>
   1b264:	ldr	r2, [r1, #120]	; 0x78
   1b268:	mov	ip, #1
   1b26c:	mov	r3, #1
   1b270:	cmp	r2, #3
   1b274:	beq	1b298 <__assert_fail@plt+0x920c>
   1b278:	cmp	r2, #9
   1b27c:	mov	r3, #1
   1b280:	beq	1b298 <__assert_fail@plt+0x920c>
   1b284:	ldr	r2, [r1, #124]	; 0x7c
   1b288:	and	r2, r2, #61440	; 0xf000
   1b28c:	sub	r2, r2, #16384	; 0x4000
   1b290:	clz	r2, r2
   1b294:	lsr	r3, r2, #5
   1b298:	ldr	r2, [r0, #120]	; 0x78
   1b29c:	cmp	r2, #3
   1b2a0:	cmpne	r2, #9
   1b2a4:	beq	1b2bc <__assert_fail@plt+0x9230>
   1b2a8:	ldr	r2, [r0, #124]	; 0x7c
   1b2ac:	and	r2, r2, #61440	; 0xf000
   1b2b0:	sub	r2, r2, #16384	; 0x4000
   1b2b4:	clz	r2, r2
   1b2b8:	lsr	ip, r2, #5
   1b2bc:	subs	r2, r3, ip
   1b2c0:	movne	r0, r2
   1b2c4:	bxne	lr
   1b2c8:	ldr	r1, [r1]
   1b2cc:	ldr	r0, [r0]
   1b2d0:	b	11bd0 <strcmp@plt>
   1b2d4:	ldr	r2, [r0]
   1b2d8:	ldr	r0, [r1]
   1b2dc:	mov	r1, r2
   1b2e0:	b	11bd0 <strcmp@plt>
   1b2e4:	ldr	r2, [r1, #120]	; 0x78
   1b2e8:	mov	ip, #1
   1b2ec:	mov	r3, #1
   1b2f0:	cmp	r2, #3
   1b2f4:	beq	1b318 <__assert_fail@plt+0x928c>
   1b2f8:	cmp	r2, #9
   1b2fc:	mov	r3, #1
   1b300:	beq	1b318 <__assert_fail@plt+0x928c>
   1b304:	ldr	r2, [r1, #124]	; 0x7c
   1b308:	and	r2, r2, #61440	; 0xf000
   1b30c:	sub	r2, r2, #16384	; 0x4000
   1b310:	clz	r2, r2
   1b314:	lsr	r3, r2, #5
   1b318:	ldr	r2, [r0, #120]	; 0x78
   1b31c:	cmp	r2, #3
   1b320:	cmpne	r2, #9
   1b324:	beq	1b33c <__assert_fail@plt+0x92b0>
   1b328:	ldr	r2, [r0, #124]	; 0x7c
   1b32c:	and	r2, r2, #61440	; 0xf000
   1b330:	sub	r2, r2, #16384	; 0x4000
   1b334:	clz	r2, r2
   1b338:	lsr	ip, r2, #5
   1b33c:	subs	r2, r3, ip
   1b340:	movne	r0, r2
   1b344:	bxne	lr
   1b348:	ldr	r2, [r0]
   1b34c:	ldr	r0, [r1]
   1b350:	mov	r1, r2
   1b354:	b	11bd0 <strcmp@plt>
   1b358:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b35c:	add	fp, sp, #24
   1b360:	ldr	r8, [r0]
   1b364:	mov	r5, r1
   1b368:	mov	r1, #46	; 0x2e
   1b36c:	mov	r0, r8
   1b370:	bl	11f84 <strrchr@plt>
   1b374:	ldr	r5, [r5]
   1b378:	mov	r7, r0
   1b37c:	mov	r1, #46	; 0x2e
   1b380:	mov	r0, r5
   1b384:	bl	11f84 <strrchr@plt>
   1b388:	mov	r4, r0
   1b38c:	bl	11ed0 <__errno_location@plt>
   1b390:	movw	r1, #49853	; 0xc2bd
   1b394:	cmp	r7, #0
   1b398:	mov	r9, #0
   1b39c:	mov	r6, r0
   1b3a0:	movt	r1, #2
   1b3a4:	str	r9, [r0]
   1b3a8:	moveq	r7, r1
   1b3ac:	cmp	r4, #0
   1b3b0:	movne	r1, r4
   1b3b4:	mov	r0, r7
   1b3b8:	bl	11de0 <strcoll@plt>
   1b3bc:	cmp	r0, #0
   1b3c0:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b3c4:	str	r9, [r6]
   1b3c8:	mov	r0, r8
   1b3cc:	mov	r1, r5
   1b3d0:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b3d4:	b	11de0 <strcoll@plt>
   1b3d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b3dc:	add	fp, sp, #24
   1b3e0:	ldr	r3, [r1, #120]	; 0x78
   1b3e4:	mov	r4, r1
   1b3e8:	mov	r1, #1
   1b3ec:	mov	r2, #1
   1b3f0:	cmp	r3, #3
   1b3f4:	beq	1b418 <__assert_fail@plt+0x938c>
   1b3f8:	cmp	r3, #9
   1b3fc:	mov	r2, #1
   1b400:	beq	1b418 <__assert_fail@plt+0x938c>
   1b404:	ldr	r2, [r4, #124]	; 0x7c
   1b408:	and	r2, r2, #61440	; 0xf000
   1b40c:	sub	r2, r2, #16384	; 0x4000
   1b410:	clz	r2, r2
   1b414:	lsr	r2, r2, #5
   1b418:	ldr	r3, [r0, #120]	; 0x78
   1b41c:	cmp	r3, #3
   1b420:	cmpne	r3, #9
   1b424:	bne	1b4a8 <__assert_fail@plt+0x941c>
   1b428:	subs	r1, r2, r1
   1b42c:	bne	1b4c4 <__assert_fail@plt+0x9438>
   1b430:	ldr	r8, [r0]
   1b434:	mov	r1, #46	; 0x2e
   1b438:	mov	r0, r8
   1b43c:	bl	11f84 <strrchr@plt>
   1b440:	ldr	r4, [r4]
   1b444:	mov	r7, r0
   1b448:	mov	r1, #46	; 0x2e
   1b44c:	mov	r0, r4
   1b450:	bl	11f84 <strrchr@plt>
   1b454:	mov	r5, r0
   1b458:	bl	11ed0 <__errno_location@plt>
   1b45c:	movw	r1, #49853	; 0xc2bd
   1b460:	cmp	r7, #0
   1b464:	mov	r9, #0
   1b468:	mov	r6, r0
   1b46c:	movt	r1, #2
   1b470:	str	r9, [r0]
   1b474:	moveq	r7, r1
   1b478:	cmp	r5, #0
   1b47c:	movne	r1, r5
   1b480:	mov	r0, r7
   1b484:	bl	11de0 <strcoll@plt>
   1b488:	mov	r1, r0
   1b48c:	cmp	r0, #0
   1b490:	bne	1b4c4 <__assert_fail@plt+0x9438>
   1b494:	str	r9, [r6]
   1b498:	mov	r0, r8
   1b49c:	mov	r1, r4
   1b4a0:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b4a4:	b	11de0 <strcoll@plt>
   1b4a8:	ldr	r1, [r0, #124]	; 0x7c
   1b4ac:	and	r1, r1, #61440	; 0xf000
   1b4b0:	sub	r1, r1, #16384	; 0x4000
   1b4b4:	clz	r1, r1
   1b4b8:	lsr	r1, r1, #5
   1b4bc:	subs	r1, r2, r1
   1b4c0:	beq	1b430 <__assert_fail@plt+0x93a4>
   1b4c4:	mov	r0, r1
   1b4c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b4cc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b4d0:	add	fp, sp, #24
   1b4d4:	ldr	r8, [r1]
   1b4d8:	mov	r5, r0
   1b4dc:	mov	r1, #46	; 0x2e
   1b4e0:	mov	r0, r8
   1b4e4:	bl	11f84 <strrchr@plt>
   1b4e8:	ldr	r5, [r5]
   1b4ec:	mov	r7, r0
   1b4f0:	mov	r1, #46	; 0x2e
   1b4f4:	mov	r0, r5
   1b4f8:	bl	11f84 <strrchr@plt>
   1b4fc:	mov	r4, r0
   1b500:	bl	11ed0 <__errno_location@plt>
   1b504:	movw	r1, #49853	; 0xc2bd
   1b508:	cmp	r7, #0
   1b50c:	mov	r9, #0
   1b510:	mov	r6, r0
   1b514:	movt	r1, #2
   1b518:	str	r9, [r0]
   1b51c:	moveq	r7, r1
   1b520:	cmp	r4, #0
   1b524:	movne	r1, r4
   1b528:	mov	r0, r7
   1b52c:	bl	11de0 <strcoll@plt>
   1b530:	cmp	r0, #0
   1b534:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b538:	str	r9, [r6]
   1b53c:	mov	r0, r8
   1b540:	mov	r1, r5
   1b544:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b548:	b	11de0 <strcoll@plt>
   1b54c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b550:	add	fp, sp, #24
   1b554:	ldr	r3, [r1, #120]	; 0x78
   1b558:	mov	r4, r0
   1b55c:	mov	r0, #1
   1b560:	mov	r2, #1
   1b564:	cmp	r3, #3
   1b568:	beq	1b58c <__assert_fail@plt+0x9500>
   1b56c:	cmp	r3, #9
   1b570:	mov	r2, #1
   1b574:	beq	1b58c <__assert_fail@plt+0x9500>
   1b578:	ldr	r2, [r1, #124]	; 0x7c
   1b57c:	and	r2, r2, #61440	; 0xf000
   1b580:	sub	r2, r2, #16384	; 0x4000
   1b584:	clz	r2, r2
   1b588:	lsr	r2, r2, #5
   1b58c:	ldr	r3, [r4, #120]	; 0x78
   1b590:	cmp	r3, #3
   1b594:	cmpne	r3, #9
   1b598:	beq	1b5b0 <__assert_fail@plt+0x9524>
   1b59c:	ldr	r0, [r4, #124]	; 0x7c
   1b5a0:	and	r0, r0, #61440	; 0xf000
   1b5a4:	sub	r0, r0, #16384	; 0x4000
   1b5a8:	clz	r0, r0
   1b5ac:	lsr	r0, r0, #5
   1b5b0:	subs	r0, r2, r0
   1b5b4:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b5b8:	ldr	r8, [r1]
   1b5bc:	mov	r1, #46	; 0x2e
   1b5c0:	mov	r0, r8
   1b5c4:	bl	11f84 <strrchr@plt>
   1b5c8:	ldr	r4, [r4]
   1b5cc:	mov	r7, r0
   1b5d0:	mov	r1, #46	; 0x2e
   1b5d4:	mov	r0, r4
   1b5d8:	bl	11f84 <strrchr@plt>
   1b5dc:	mov	r5, r0
   1b5e0:	bl	11ed0 <__errno_location@plt>
   1b5e4:	movw	r1, #49853	; 0xc2bd
   1b5e8:	cmp	r7, #0
   1b5ec:	mov	r9, #0
   1b5f0:	mov	r6, r0
   1b5f4:	movt	r1, #2
   1b5f8:	str	r9, [r0]
   1b5fc:	moveq	r7, r1
   1b600:	cmp	r5, #0
   1b604:	movne	r1, r5
   1b608:	mov	r0, r7
   1b60c:	bl	11de0 <strcoll@plt>
   1b610:	cmp	r0, #0
   1b614:	beq	1b61c <__assert_fail@plt+0x9590>
   1b618:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b61c:	str	r9, [r6]
   1b620:	mov	r0, r8
   1b624:	mov	r1, r4
   1b628:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b62c:	b	11de0 <strcoll@plt>
   1b630:	push	{r4, r5, r6, sl, fp, lr}
   1b634:	add	fp, sp, #16
   1b638:	ldr	r4, [r0]
   1b63c:	mov	r5, r1
   1b640:	mov	r1, #46	; 0x2e
   1b644:	mov	r0, r4
   1b648:	bl	11f84 <strrchr@plt>
   1b64c:	ldr	r5, [r5]
   1b650:	mov	r6, r0
   1b654:	mov	r1, #46	; 0x2e
   1b658:	mov	r0, r5
   1b65c:	bl	11f84 <strrchr@plt>
   1b660:	movw	r1, #49853	; 0xc2bd
   1b664:	cmp	r6, #0
   1b668:	movt	r1, #2
   1b66c:	moveq	r6, r1
   1b670:	cmp	r0, #0
   1b674:	movne	r1, r0
   1b678:	mov	r0, r6
   1b67c:	bl	11bd0 <strcmp@plt>
   1b680:	cmp	r0, #0
   1b684:	popne	{r4, r5, r6, sl, fp, pc}
   1b688:	mov	r0, r4
   1b68c:	mov	r1, r5
   1b690:	pop	{r4, r5, r6, sl, fp, lr}
   1b694:	b	11bd0 <strcmp@plt>
   1b698:	push	{r4, r5, r6, sl, fp, lr}
   1b69c:	add	fp, sp, #16
   1b6a0:	ldr	r3, [r1, #120]	; 0x78
   1b6a4:	mov	r4, r1
   1b6a8:	mov	r1, #1
   1b6ac:	mov	r2, #1
   1b6b0:	cmp	r3, #3
   1b6b4:	beq	1b6d8 <__assert_fail@plt+0x964c>
   1b6b8:	cmp	r3, #9
   1b6bc:	mov	r2, #1
   1b6c0:	beq	1b6d8 <__assert_fail@plt+0x964c>
   1b6c4:	ldr	r2, [r4, #124]	; 0x7c
   1b6c8:	and	r2, r2, #61440	; 0xf000
   1b6cc:	sub	r2, r2, #16384	; 0x4000
   1b6d0:	clz	r2, r2
   1b6d4:	lsr	r2, r2, #5
   1b6d8:	ldr	r3, [r0, #120]	; 0x78
   1b6dc:	cmp	r3, #3
   1b6e0:	cmpne	r3, #9
   1b6e4:	bne	1b750 <__assert_fail@plt+0x96c4>
   1b6e8:	subs	r1, r2, r1
   1b6ec:	bne	1b76c <__assert_fail@plt+0x96e0>
   1b6f0:	ldr	r5, [r0]
   1b6f4:	mov	r1, #46	; 0x2e
   1b6f8:	mov	r0, r5
   1b6fc:	bl	11f84 <strrchr@plt>
   1b700:	ldr	r4, [r4]
   1b704:	mov	r6, r0
   1b708:	mov	r1, #46	; 0x2e
   1b70c:	mov	r0, r4
   1b710:	bl	11f84 <strrchr@plt>
   1b714:	movw	r1, #49853	; 0xc2bd
   1b718:	cmp	r6, #0
   1b71c:	movt	r1, #2
   1b720:	moveq	r6, r1
   1b724:	cmp	r0, #0
   1b728:	movne	r1, r0
   1b72c:	mov	r0, r6
   1b730:	bl	11bd0 <strcmp@plt>
   1b734:	mov	r1, r0
   1b738:	cmp	r0, #0
   1b73c:	bne	1b76c <__assert_fail@plt+0x96e0>
   1b740:	mov	r0, r5
   1b744:	mov	r1, r4
   1b748:	pop	{r4, r5, r6, sl, fp, lr}
   1b74c:	b	11bd0 <strcmp@plt>
   1b750:	ldr	r1, [r0, #124]	; 0x7c
   1b754:	and	r1, r1, #61440	; 0xf000
   1b758:	sub	r1, r1, #16384	; 0x4000
   1b75c:	clz	r1, r1
   1b760:	lsr	r1, r1, #5
   1b764:	subs	r1, r2, r1
   1b768:	beq	1b6f0 <__assert_fail@plt+0x9664>
   1b76c:	mov	r0, r1
   1b770:	pop	{r4, r5, r6, sl, fp, pc}
   1b774:	push	{r4, r5, r6, sl, fp, lr}
   1b778:	add	fp, sp, #16
   1b77c:	ldr	r4, [r1]
   1b780:	mov	r5, r0
   1b784:	mov	r1, #46	; 0x2e
   1b788:	mov	r0, r4
   1b78c:	bl	11f84 <strrchr@plt>
   1b790:	ldr	r5, [r5]
   1b794:	mov	r6, r0
   1b798:	mov	r1, #46	; 0x2e
   1b79c:	mov	r0, r5
   1b7a0:	bl	11f84 <strrchr@plt>
   1b7a4:	movw	r1, #49853	; 0xc2bd
   1b7a8:	cmp	r6, #0
   1b7ac:	movt	r1, #2
   1b7b0:	moveq	r6, r1
   1b7b4:	cmp	r0, #0
   1b7b8:	movne	r1, r0
   1b7bc:	mov	r0, r6
   1b7c0:	bl	11bd0 <strcmp@plt>
   1b7c4:	cmp	r0, #0
   1b7c8:	popne	{r4, r5, r6, sl, fp, pc}
   1b7cc:	mov	r0, r4
   1b7d0:	mov	r1, r5
   1b7d4:	pop	{r4, r5, r6, sl, fp, lr}
   1b7d8:	b	11bd0 <strcmp@plt>
   1b7dc:	push	{r4, r5, r6, sl, fp, lr}
   1b7e0:	add	fp, sp, #16
   1b7e4:	ldr	r3, [r1, #120]	; 0x78
   1b7e8:	mov	r4, r0
   1b7ec:	mov	r0, #1
   1b7f0:	mov	r2, #1
   1b7f4:	cmp	r3, #3
   1b7f8:	beq	1b81c <__assert_fail@plt+0x9790>
   1b7fc:	cmp	r3, #9
   1b800:	mov	r2, #1
   1b804:	beq	1b81c <__assert_fail@plt+0x9790>
   1b808:	ldr	r2, [r1, #124]	; 0x7c
   1b80c:	and	r2, r2, #61440	; 0xf000
   1b810:	sub	r2, r2, #16384	; 0x4000
   1b814:	clz	r2, r2
   1b818:	lsr	r2, r2, #5
   1b81c:	ldr	r3, [r4, #120]	; 0x78
   1b820:	cmp	r3, #3
   1b824:	cmpne	r3, #9
   1b828:	beq	1b840 <__assert_fail@plt+0x97b4>
   1b82c:	ldr	r0, [r4, #124]	; 0x7c
   1b830:	and	r0, r0, #61440	; 0xf000
   1b834:	sub	r0, r0, #16384	; 0x4000
   1b838:	clz	r0, r0
   1b83c:	lsr	r0, r0, #5
   1b840:	subs	r0, r2, r0
   1b844:	popne	{r4, r5, r6, sl, fp, pc}
   1b848:	ldr	r5, [r1]
   1b84c:	mov	r1, #46	; 0x2e
   1b850:	mov	r0, r5
   1b854:	bl	11f84 <strrchr@plt>
   1b858:	ldr	r4, [r4]
   1b85c:	mov	r6, r0
   1b860:	mov	r1, #46	; 0x2e
   1b864:	mov	r0, r4
   1b868:	bl	11f84 <strrchr@plt>
   1b86c:	movw	r1, #49853	; 0xc2bd
   1b870:	cmp	r6, #0
   1b874:	movt	r1, #2
   1b878:	moveq	r6, r1
   1b87c:	cmp	r0, #0
   1b880:	movne	r1, r0
   1b884:	mov	r0, r6
   1b888:	bl	11bd0 <strcmp@plt>
   1b88c:	cmp	r0, #0
   1b890:	beq	1b898 <__assert_fail@plt+0x980c>
   1b894:	pop	{r4, r5, r6, sl, fp, pc}
   1b898:	mov	r0, r5
   1b89c:	mov	r1, r4
   1b8a0:	pop	{r4, r5, r6, sl, fp, lr}
   1b8a4:	b	11bd0 <strcmp@plt>
   1b8a8:	movw	r2, #54340	; 0xd444
   1b8ac:	movt	r2, #1
   1b8b0:	b	1d470 <__assert_fail@plt+0xb3e4>
   1b8b4:	ldr	r2, [r1, #120]	; 0x78
   1b8b8:	mov	ip, #1
   1b8bc:	mov	r3, #1
   1b8c0:	cmp	r2, #3
   1b8c4:	beq	1b8e8 <__assert_fail@plt+0x985c>
   1b8c8:	cmp	r2, #9
   1b8cc:	mov	r3, #1
   1b8d0:	beq	1b8e8 <__assert_fail@plt+0x985c>
   1b8d4:	ldr	r2, [r1, #124]	; 0x7c
   1b8d8:	and	r2, r2, #61440	; 0xf000
   1b8dc:	sub	r2, r2, #16384	; 0x4000
   1b8e0:	clz	r2, r2
   1b8e4:	lsr	r3, r2, #5
   1b8e8:	ldr	r2, [r0, #120]	; 0x78
   1b8ec:	cmp	r2, #3
   1b8f0:	cmpne	r2, #9
   1b8f4:	beq	1b90c <__assert_fail@plt+0x9880>
   1b8f8:	ldr	r2, [r0, #124]	; 0x7c
   1b8fc:	and	r2, r2, #61440	; 0xf000
   1b900:	sub	r2, r2, #16384	; 0x4000
   1b904:	clz	r2, r2
   1b908:	lsr	ip, r2, #5
   1b90c:	subs	r2, r3, ip
   1b910:	movne	r0, r2
   1b914:	bxne	lr
   1b918:	movw	r2, #54340	; 0xd444
   1b91c:	movt	r2, #1
   1b920:	b	1d470 <__assert_fail@plt+0xb3e4>
   1b924:	movw	r2, #54340	; 0xd444
   1b928:	mov	r3, r0
   1b92c:	mov	r0, r1
   1b930:	movt	r2, #1
   1b934:	mov	r1, r3
   1b938:	b	1d470 <__assert_fail@plt+0xb3e4>
   1b93c:	ldr	r3, [r1, #120]	; 0x78
   1b940:	mov	ip, r0
   1b944:	mov	r0, #1
   1b948:	mov	r2, #1
   1b94c:	cmp	r3, #3
   1b950:	beq	1b974 <__assert_fail@plt+0x98e8>
   1b954:	cmp	r3, #9
   1b958:	mov	r2, #1
   1b95c:	beq	1b974 <__assert_fail@plt+0x98e8>
   1b960:	ldr	r2, [r1, #124]	; 0x7c
   1b964:	and	r2, r2, #61440	; 0xf000
   1b968:	sub	r2, r2, #16384	; 0x4000
   1b96c:	clz	r2, r2
   1b970:	lsr	r2, r2, #5
   1b974:	ldr	r3, [ip, #120]	; 0x78
   1b978:	cmp	r3, #3
   1b97c:	cmpne	r3, #9
   1b980:	beq	1b998 <__assert_fail@plt+0x990c>
   1b984:	ldr	r0, [ip, #124]	; 0x7c
   1b988:	and	r0, r0, #61440	; 0xf000
   1b98c:	sub	r0, r0, #16384	; 0x4000
   1b990:	clz	r0, r0
   1b994:	lsr	r0, r0, #5
   1b998:	subs	r0, r2, r0
   1b99c:	bxne	lr
   1b9a0:	movw	r2, #54340	; 0xd444
   1b9a4:	mov	r0, r1
   1b9a8:	mov	r1, ip
   1b9ac:	movt	r2, #1
   1b9b0:	b	1d470 <__assert_fail@plt+0xb3e4>
   1b9b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b9b8:	add	fp, sp, #24
   1b9bc:	sub	sp, sp, #24
   1b9c0:	sub	sp, sp, #8192	; 0x2000
   1b9c4:	ldr	r7, [r0, #148]	; 0x94
   1b9c8:	mov	r5, r1
   1b9cc:	mov	r4, r0
   1b9d0:	cmp	r7, #0
   1b9d4:	bne	1ba30 <__assert_fail@plt+0x99a4>
   1b9d8:	movw	r0, #62468	; 0xf404
   1b9dc:	ldr	r6, [r4]
   1b9e0:	ldr	r3, [r4, #144]	; 0x90
   1b9e4:	sub	r1, fp, #32
   1b9e8:	add	r7, sp, #15
   1b9ec:	movt	r0, #3
   1b9f0:	str	r1, [sp]
   1b9f4:	str	r7, [fp, #-28]	; 0xffffffe4
   1b9f8:	ldr	r2, [r0]
   1b9fc:	sub	r0, fp, #33	; 0x21
   1ba00:	str	r0, [sp, #4]
   1ba04:	sub	r0, fp, #28
   1ba08:	mov	r1, r6
   1ba0c:	bl	1aa38 <__assert_fail@plt+0x89ac>
   1ba10:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1ba14:	cmp	r0, r7
   1ba18:	cmpne	r0, r6
   1ba1c:	beq	1ba24 <__assert_fail@plt+0x9998>
   1ba20:	bl	2046c <__assert_fail@plt+0xe3e0>
   1ba24:	ldrb	r0, [fp, #-33]	; 0xffffffdf
   1ba28:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1ba2c:	add	r7, r1, r0
   1ba30:	ldr	r0, [r5, #148]	; 0x94
   1ba34:	cmp	r0, #0
   1ba38:	beq	1ba4c <__assert_fail@plt+0x99c0>
   1ba3c:	subs	r0, r7, r0
   1ba40:	beq	1baac <__assert_fail@plt+0x9a20>
   1ba44:	sub	sp, fp, #24
   1ba48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ba4c:	movw	r0, #62468	; 0xf404
   1ba50:	ldr	r6, [r5]
   1ba54:	ldr	r3, [r5, #144]	; 0x90
   1ba58:	sub	r1, fp, #32
   1ba5c:	add	r8, sp, #15
   1ba60:	movt	r0, #3
   1ba64:	str	r1, [sp]
   1ba68:	str	r8, [fp, #-28]	; 0xffffffe4
   1ba6c:	ldr	r2, [r0]
   1ba70:	sub	r0, fp, #33	; 0x21
   1ba74:	str	r0, [sp, #4]
   1ba78:	sub	r0, fp, #28
   1ba7c:	mov	r1, r6
   1ba80:	bl	1aa38 <__assert_fail@plt+0x89ac>
   1ba84:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1ba88:	cmp	r0, r8
   1ba8c:	cmpne	r0, r6
   1ba90:	beq	1ba98 <__assert_fail@plt+0x9a0c>
   1ba94:	bl	2046c <__assert_fail@plt+0xe3e0>
   1ba98:	ldrb	r0, [fp, #-33]	; 0xffffffdf
   1ba9c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1baa0:	add	r0, r1, r0
   1baa4:	subs	r0, r7, r0
   1baa8:	bne	1ba44 <__assert_fail@plt+0x99b8>
   1baac:	ldr	r1, [r5]
   1bab0:	ldr	r0, [r4]
   1bab4:	bl	11bd0 <strcmp@plt>
   1bab8:	sub	sp, fp, #24
   1babc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bac0:	ldr	r2, [r1, #120]	; 0x78
   1bac4:	mov	ip, #1
   1bac8:	mov	r3, #1
   1bacc:	cmp	r2, #3
   1bad0:	beq	1baf4 <__assert_fail@plt+0x9a68>
   1bad4:	cmp	r2, #9
   1bad8:	mov	r3, #1
   1badc:	beq	1baf4 <__assert_fail@plt+0x9a68>
   1bae0:	ldr	r2, [r1, #124]	; 0x7c
   1bae4:	and	r2, r2, #61440	; 0xf000
   1bae8:	sub	r2, r2, #16384	; 0x4000
   1baec:	clz	r2, r2
   1baf0:	lsr	r3, r2, #5
   1baf4:	ldr	r2, [r0, #120]	; 0x78
   1baf8:	cmp	r2, #3
   1bafc:	cmpne	r2, #9
   1bb00:	beq	1bb18 <__assert_fail@plt+0x9a8c>
   1bb04:	ldr	r2, [r0, #124]	; 0x7c
   1bb08:	and	r2, r2, #61440	; 0xf000
   1bb0c:	sub	r2, r2, #16384	; 0x4000
   1bb10:	clz	r2, r2
   1bb14:	lsr	ip, r2, #5
   1bb18:	subs	r2, r3, ip
   1bb1c:	movne	r0, r2
   1bb20:	bxne	lr
   1bb24:	b	1b9b4 <__assert_fail@plt+0x9928>
   1bb28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bb2c:	add	fp, sp, #24
   1bb30:	sub	sp, sp, #24
   1bb34:	sub	sp, sp, #8192	; 0x2000
   1bb38:	ldr	r7, [r1, #148]	; 0x94
   1bb3c:	mov	r4, r1
   1bb40:	mov	r5, r0
   1bb44:	cmp	r7, #0
   1bb48:	bne	1bba4 <__assert_fail@plt+0x9b18>
   1bb4c:	movw	r0, #62468	; 0xf404
   1bb50:	ldr	r6, [r4]
   1bb54:	ldr	r3, [r4, #144]	; 0x90
   1bb58:	sub	r1, fp, #32
   1bb5c:	add	r7, sp, #15
   1bb60:	movt	r0, #3
   1bb64:	str	r1, [sp]
   1bb68:	str	r7, [fp, #-28]	; 0xffffffe4
   1bb6c:	ldr	r2, [r0]
   1bb70:	sub	r0, fp, #33	; 0x21
   1bb74:	str	r0, [sp, #4]
   1bb78:	sub	r0, fp, #28
   1bb7c:	mov	r1, r6
   1bb80:	bl	1aa38 <__assert_fail@plt+0x89ac>
   1bb84:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1bb88:	cmp	r0, r7
   1bb8c:	cmpne	r0, r6
   1bb90:	beq	1bb98 <__assert_fail@plt+0x9b0c>
   1bb94:	bl	2046c <__assert_fail@plt+0xe3e0>
   1bb98:	ldrb	r0, [fp, #-33]	; 0xffffffdf
   1bb9c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1bba0:	add	r7, r1, r0
   1bba4:	ldr	r0, [r5, #148]	; 0x94
   1bba8:	cmp	r0, #0
   1bbac:	beq	1bbc0 <__assert_fail@plt+0x9b34>
   1bbb0:	subs	r0, r7, r0
   1bbb4:	beq	1bc20 <__assert_fail@plt+0x9b94>
   1bbb8:	sub	sp, fp, #24
   1bbbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bbc0:	movw	r0, #62468	; 0xf404
   1bbc4:	ldr	r6, [r5]
   1bbc8:	ldr	r3, [r5, #144]	; 0x90
   1bbcc:	sub	r1, fp, #32
   1bbd0:	add	r8, sp, #15
   1bbd4:	movt	r0, #3
   1bbd8:	str	r1, [sp]
   1bbdc:	str	r8, [fp, #-28]	; 0xffffffe4
   1bbe0:	ldr	r2, [r0]
   1bbe4:	sub	r0, fp, #33	; 0x21
   1bbe8:	str	r0, [sp, #4]
   1bbec:	sub	r0, fp, #28
   1bbf0:	mov	r1, r6
   1bbf4:	bl	1aa38 <__assert_fail@plt+0x89ac>
   1bbf8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1bbfc:	cmp	r0, r8
   1bc00:	cmpne	r0, r6
   1bc04:	beq	1bc0c <__assert_fail@plt+0x9b80>
   1bc08:	bl	2046c <__assert_fail@plt+0xe3e0>
   1bc0c:	ldrb	r0, [fp, #-33]	; 0xffffffdf
   1bc10:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1bc14:	add	r0, r1, r0
   1bc18:	subs	r0, r7, r0
   1bc1c:	bne	1bbb8 <__assert_fail@plt+0x9b2c>
   1bc20:	ldr	r1, [r5]
   1bc24:	ldr	r0, [r4]
   1bc28:	bl	11bd0 <strcmp@plt>
   1bc2c:	sub	sp, fp, #24
   1bc30:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bc34:	ldr	r2, [r1, #120]	; 0x78
   1bc38:	mov	ip, #1
   1bc3c:	mov	r3, #1
   1bc40:	cmp	r2, #3
   1bc44:	beq	1bc68 <__assert_fail@plt+0x9bdc>
   1bc48:	cmp	r2, #9
   1bc4c:	mov	r3, #1
   1bc50:	beq	1bc68 <__assert_fail@plt+0x9bdc>
   1bc54:	ldr	r2, [r1, #124]	; 0x7c
   1bc58:	and	r2, r2, #61440	; 0xf000
   1bc5c:	sub	r2, r2, #16384	; 0x4000
   1bc60:	clz	r2, r2
   1bc64:	lsr	r3, r2, #5
   1bc68:	ldr	r2, [r0, #120]	; 0x78
   1bc6c:	cmp	r2, #3
   1bc70:	cmpne	r2, #9
   1bc74:	beq	1bc8c <__assert_fail@plt+0x9c00>
   1bc78:	ldr	r2, [r0, #124]	; 0x7c
   1bc7c:	and	r2, r2, #61440	; 0xf000
   1bc80:	sub	r2, r2, #16384	; 0x4000
   1bc84:	clz	r2, r2
   1bc88:	lsr	ip, r2, #5
   1bc8c:	subs	r2, r3, ip
   1bc90:	movne	r0, r2
   1bc94:	bxne	lr
   1bc98:	b	1bb28 <__assert_fail@plt+0x9a9c>
   1bc9c:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   1bca0:	add	fp, sp, #24
   1bca4:	ldrd	r4, [r1, #64]	; 0x40
   1bca8:	ldrd	r8, [r0, #64]	; 0x40
   1bcac:	mov	r6, #0
   1bcb0:	subs	r2, r8, r4
   1bcb4:	sbcs	r2, r9, r5
   1bcb8:	mov	r2, #0
   1bcbc:	movwlt	r2, #1
   1bcc0:	subs	r3, r4, r8
   1bcc4:	sbcs	r3, r5, r9
   1bcc8:	mvnlt	r2, #0
   1bccc:	cmp	r2, #0
   1bcd0:	movne	r0, r2
   1bcd4:	popne	{r4, r5, r6, r8, r9, sl, fp, pc}
   1bcd8:	ldr	r4, [r1]
   1bcdc:	ldr	r5, [r0]
   1bce0:	bl	11ed0 <__errno_location@plt>
   1bce4:	str	r6, [r0]
   1bce8:	mov	r0, r5
   1bcec:	mov	r1, r4
   1bcf0:	pop	{r4, r5, r6, r8, r9, sl, fp, lr}
   1bcf4:	b	11de0 <strcoll@plt>
   1bcf8:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   1bcfc:	add	fp, sp, #24
   1bd00:	ldr	r6, [r1, #120]	; 0x78
   1bd04:	mov	r2, #1
   1bd08:	mov	r3, #1
   1bd0c:	cmp	r6, #3
   1bd10:	beq	1bd34 <__assert_fail@plt+0x9ca8>
   1bd14:	cmp	r6, #9
   1bd18:	mov	r3, #1
   1bd1c:	beq	1bd34 <__assert_fail@plt+0x9ca8>
   1bd20:	ldr	r3, [r1, #124]	; 0x7c
   1bd24:	and	r3, r3, #61440	; 0xf000
   1bd28:	sub	r3, r3, #16384	; 0x4000
   1bd2c:	clz	r3, r3
   1bd30:	lsr	r3, r3, #5
   1bd34:	ldr	r6, [r0, #120]	; 0x78
   1bd38:	cmp	r6, #3
   1bd3c:	cmpne	r6, #9
   1bd40:	bne	1bd9c <__assert_fail@plt+0x9d10>
   1bd44:	subs	r2, r3, r2
   1bd48:	bne	1bdb8 <__assert_fail@plt+0x9d2c>
   1bd4c:	ldrd	r4, [r1, #64]	; 0x40
   1bd50:	ldrd	r8, [r0, #64]	; 0x40
   1bd54:	mov	r6, #0
   1bd58:	subs	r2, r8, r4
   1bd5c:	sbcs	r2, r9, r5
   1bd60:	mov	r2, #0
   1bd64:	movwlt	r2, #1
   1bd68:	subs	r3, r4, r8
   1bd6c:	sbcs	r3, r5, r9
   1bd70:	mvnlt	r2, #0
   1bd74:	cmp	r2, #0
   1bd78:	bne	1bdb8 <__assert_fail@plt+0x9d2c>
   1bd7c:	ldr	r4, [r1]
   1bd80:	ldr	r5, [r0]
   1bd84:	bl	11ed0 <__errno_location@plt>
   1bd88:	str	r6, [r0]
   1bd8c:	mov	r0, r5
   1bd90:	mov	r1, r4
   1bd94:	pop	{r4, r5, r6, r8, r9, sl, fp, lr}
   1bd98:	b	11de0 <strcoll@plt>
   1bd9c:	ldr	r2, [r0, #124]	; 0x7c
   1bda0:	and	r2, r2, #61440	; 0xf000
   1bda4:	sub	r2, r2, #16384	; 0x4000
   1bda8:	clz	r2, r2
   1bdac:	lsr	r2, r2, #5
   1bdb0:	subs	r2, r3, r2
   1bdb4:	beq	1bd4c <__assert_fail@plt+0x9cc0>
   1bdb8:	mov	r0, r2
   1bdbc:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   1bdc0:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   1bdc4:	add	fp, sp, #24
   1bdc8:	ldrd	r4, [r0, #64]	; 0x40
   1bdcc:	ldrd	r8, [r1, #64]	; 0x40
   1bdd0:	mov	r6, #0
   1bdd4:	subs	r2, r8, r4
   1bdd8:	sbcs	r2, r9, r5
   1bddc:	mov	r2, #0
   1bde0:	movwlt	r2, #1
   1bde4:	subs	r3, r4, r8
   1bde8:	sbcs	r3, r5, r9
   1bdec:	mvnlt	r2, #0
   1bdf0:	cmp	r2, #0
   1bdf4:	movne	r0, r2
   1bdf8:	popne	{r4, r5, r6, r8, r9, sl, fp, pc}
   1bdfc:	ldr	r4, [r0]
   1be00:	ldr	r5, [r1]
   1be04:	bl	11ed0 <__errno_location@plt>
   1be08:	str	r6, [r0]
   1be0c:	mov	r0, r5
   1be10:	mov	r1, r4
   1be14:	pop	{r4, r5, r6, r8, r9, sl, fp, lr}
   1be18:	b	11de0 <strcoll@plt>
   1be1c:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   1be20:	add	fp, sp, #24
   1be24:	ldr	r6, [r1, #120]	; 0x78
   1be28:	mov	r2, #1
   1be2c:	mov	r3, #1
   1be30:	cmp	r6, #3
   1be34:	beq	1be58 <__assert_fail@plt+0x9dcc>
   1be38:	cmp	r6, #9
   1be3c:	mov	r3, #1
   1be40:	beq	1be58 <__assert_fail@plt+0x9dcc>
   1be44:	ldr	r3, [r1, #124]	; 0x7c
   1be48:	and	r3, r3, #61440	; 0xf000
   1be4c:	sub	r3, r3, #16384	; 0x4000
   1be50:	clz	r3, r3
   1be54:	lsr	r3, r3, #5
   1be58:	ldr	r6, [r0, #120]	; 0x78
   1be5c:	cmp	r6, #3
   1be60:	cmpne	r6, #9
   1be64:	bne	1bec0 <__assert_fail@plt+0x9e34>
   1be68:	subs	r2, r3, r2
   1be6c:	bne	1bedc <__assert_fail@plt+0x9e50>
   1be70:	ldrd	r4, [r0, #64]	; 0x40
   1be74:	ldrd	r8, [r1, #64]	; 0x40
   1be78:	mov	r6, #0
   1be7c:	subs	r2, r8, r4
   1be80:	sbcs	r2, r9, r5
   1be84:	mov	r2, #0
   1be88:	movwlt	r2, #1
   1be8c:	subs	r3, r4, r8
   1be90:	sbcs	r3, r5, r9
   1be94:	mvnlt	r2, #0
   1be98:	cmp	r2, #0
   1be9c:	bne	1bedc <__assert_fail@plt+0x9e50>
   1bea0:	ldr	r4, [r0]
   1bea4:	ldr	r5, [r1]
   1bea8:	bl	11ed0 <__errno_location@plt>
   1beac:	str	r6, [r0]
   1beb0:	mov	r0, r5
   1beb4:	mov	r1, r4
   1beb8:	pop	{r4, r5, r6, r8, r9, sl, fp, lr}
   1bebc:	b	11de0 <strcoll@plt>
   1bec0:	ldr	r2, [r0, #124]	; 0x7c
   1bec4:	and	r2, r2, #61440	; 0xf000
   1bec8:	sub	r2, r2, #16384	; 0x4000
   1becc:	clz	r2, r2
   1bed0:	lsr	r2, r2, #5
   1bed4:	subs	r2, r3, r2
   1bed8:	beq	1be70 <__assert_fail@plt+0x9de4>
   1bedc:	mov	r0, r2
   1bee0:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   1bee4:	push	{r4, r5, r6, r7, fp, lr}
   1bee8:	add	fp, sp, #16
   1beec:	ldrd	r4, [r1, #64]	; 0x40
   1bef0:	ldrd	r6, [r0, #64]	; 0x40
   1bef4:	mov	r2, #0
   1bef8:	subs	r3, r6, r4
   1befc:	sbcs	r3, r7, r5
   1bf00:	movwlt	r2, #1
   1bf04:	subs	r3, r4, r6
   1bf08:	sbcs	r3, r5, r7
   1bf0c:	mvnlt	r2, #0
   1bf10:	cmp	r2, #0
   1bf14:	movne	r0, r2
   1bf18:	popne	{r4, r5, r6, r7, fp, pc}
   1bf1c:	ldr	r1, [r1]
   1bf20:	ldr	r0, [r0]
   1bf24:	pop	{r4, r5, r6, r7, fp, lr}
   1bf28:	b	11bd0 <strcmp@plt>
   1bf2c:	ldr	r2, [r1, #120]	; 0x78
   1bf30:	mov	ip, #1
   1bf34:	mov	r3, #1
   1bf38:	cmp	r2, #3
   1bf3c:	beq	1bf60 <__assert_fail@plt+0x9ed4>
   1bf40:	cmp	r2, #9
   1bf44:	mov	r3, #1
   1bf48:	beq	1bf60 <__assert_fail@plt+0x9ed4>
   1bf4c:	ldr	r2, [r1, #124]	; 0x7c
   1bf50:	and	r2, r2, #61440	; 0xf000
   1bf54:	sub	r2, r2, #16384	; 0x4000
   1bf58:	clz	r2, r2
   1bf5c:	lsr	r3, r2, #5
   1bf60:	ldr	r2, [r0, #120]	; 0x78
   1bf64:	cmp	r2, #3
   1bf68:	cmpne	r2, #9
   1bf6c:	bne	1bfbc <__assert_fail@plt+0x9f30>
   1bf70:	subs	r2, r3, ip
   1bf74:	bne	1bfd8 <__assert_fail@plt+0x9f4c>
   1bf78:	push	{r4, r5, r6, r7, fp, lr}
   1bf7c:	add	fp, sp, #16
   1bf80:	ldrd	r4, [r1, #64]	; 0x40
   1bf84:	ldrd	r6, [r0, #64]	; 0x40
   1bf88:	mov	r2, #0
   1bf8c:	subs	r3, r6, r4
   1bf90:	sbcs	r3, r7, r5
   1bf94:	movwlt	r2, #1
   1bf98:	subs	r3, r4, r6
   1bf9c:	sbcs	r3, r5, r7
   1bfa0:	mvnlt	r2, #0
   1bfa4:	cmp	r2, #0
   1bfa8:	pop	{r4, r5, r6, r7, fp, lr}
   1bfac:	bne	1bfd8 <__assert_fail@plt+0x9f4c>
   1bfb0:	ldr	r1, [r1]
   1bfb4:	ldr	r0, [r0]
   1bfb8:	b	11bd0 <strcmp@plt>
   1bfbc:	ldr	r2, [r0, #124]	; 0x7c
   1bfc0:	and	r2, r2, #61440	; 0xf000
   1bfc4:	sub	r2, r2, #16384	; 0x4000
   1bfc8:	clz	r2, r2
   1bfcc:	lsr	ip, r2, #5
   1bfd0:	subs	r2, r3, ip
   1bfd4:	beq	1bf78 <__assert_fail@plt+0x9eec>
   1bfd8:	mov	r0, r2
   1bfdc:	bx	lr
   1bfe0:	push	{r4, r5, r6, r7, fp, lr}
   1bfe4:	add	fp, sp, #16
   1bfe8:	ldrd	r4, [r0, #64]	; 0x40
   1bfec:	ldrd	r6, [r1, #64]	; 0x40
   1bff0:	mov	r2, #0
   1bff4:	subs	r3, r6, r4
   1bff8:	sbcs	r3, r7, r5
   1bffc:	movwlt	r2, #1
   1c000:	subs	r3, r4, r6
   1c004:	sbcs	r3, r5, r7
   1c008:	mvnlt	r2, #0
   1c00c:	cmp	r2, #0
   1c010:	movne	r0, r2
   1c014:	popne	{r4, r5, r6, r7, fp, pc}
   1c018:	ldr	r2, [r0]
   1c01c:	ldr	r0, [r1]
   1c020:	mov	r1, r2
   1c024:	pop	{r4, r5, r6, r7, fp, lr}
   1c028:	b	11bd0 <strcmp@plt>
   1c02c:	ldr	r2, [r1, #120]	; 0x78
   1c030:	mov	ip, #1
   1c034:	mov	r3, #1
   1c038:	cmp	r2, #3
   1c03c:	beq	1c060 <__assert_fail@plt+0x9fd4>
   1c040:	cmp	r2, #9
   1c044:	mov	r3, #1
   1c048:	beq	1c060 <__assert_fail@plt+0x9fd4>
   1c04c:	ldr	r2, [r1, #124]	; 0x7c
   1c050:	and	r2, r2, #61440	; 0xf000
   1c054:	sub	r2, r2, #16384	; 0x4000
   1c058:	clz	r2, r2
   1c05c:	lsr	r3, r2, #5
   1c060:	ldr	r2, [r0, #120]	; 0x78
   1c064:	cmp	r2, #3
   1c068:	cmpne	r2, #9
   1c06c:	bne	1c0c0 <__assert_fail@plt+0xa034>
   1c070:	subs	r2, r3, ip
   1c074:	bne	1c0dc <__assert_fail@plt+0xa050>
   1c078:	push	{r4, r5, r6, r7, fp, lr}
   1c07c:	add	fp, sp, #16
   1c080:	ldrd	r4, [r0, #64]	; 0x40
   1c084:	ldrd	r6, [r1, #64]	; 0x40
   1c088:	mov	r2, #0
   1c08c:	subs	r3, r6, r4
   1c090:	sbcs	r3, r7, r5
   1c094:	movwlt	r2, #1
   1c098:	subs	r3, r4, r6
   1c09c:	sbcs	r3, r5, r7
   1c0a0:	mvnlt	r2, #0
   1c0a4:	cmp	r2, #0
   1c0a8:	pop	{r4, r5, r6, r7, fp, lr}
   1c0ac:	bne	1c0dc <__assert_fail@plt+0xa050>
   1c0b0:	ldr	r2, [r0]
   1c0b4:	ldr	r0, [r1]
   1c0b8:	mov	r1, r2
   1c0bc:	b	11bd0 <strcmp@plt>
   1c0c0:	ldr	r2, [r0, #124]	; 0x7c
   1c0c4:	and	r2, r2, #61440	; 0xf000
   1c0c8:	sub	r2, r2, #16384	; 0x4000
   1c0cc:	clz	r2, r2
   1c0d0:	lsr	ip, r2, #5
   1c0d4:	subs	r2, r3, ip
   1c0d8:	beq	1c078 <__assert_fail@plt+0x9fec>
   1c0dc:	mov	r0, r2
   1c0e0:	bx	lr
   1c0e4:	ldr	r1, [r1]
   1c0e8:	ldr	r0, [r0]
   1c0ec:	b	1ffe0 <__assert_fail@plt+0xdf54>
   1c0f0:	ldr	r2, [r1, #120]	; 0x78
   1c0f4:	mov	ip, #1
   1c0f8:	mov	r3, #1
   1c0fc:	cmp	r2, #3
   1c100:	beq	1c124 <__assert_fail@plt+0xa098>
   1c104:	cmp	r2, #9
   1c108:	mov	r3, #1
   1c10c:	beq	1c124 <__assert_fail@plt+0xa098>
   1c110:	ldr	r2, [r1, #124]	; 0x7c
   1c114:	and	r2, r2, #61440	; 0xf000
   1c118:	sub	r2, r2, #16384	; 0x4000
   1c11c:	clz	r2, r2
   1c120:	lsr	r3, r2, #5
   1c124:	ldr	r2, [r0, #120]	; 0x78
   1c128:	cmp	r2, #3
   1c12c:	cmpne	r2, #9
   1c130:	beq	1c148 <__assert_fail@plt+0xa0bc>
   1c134:	ldr	r2, [r0, #124]	; 0x7c
   1c138:	and	r2, r2, #61440	; 0xf000
   1c13c:	sub	r2, r2, #16384	; 0x4000
   1c140:	clz	r2, r2
   1c144:	lsr	ip, r2, #5
   1c148:	subs	r2, r3, ip
   1c14c:	movne	r0, r2
   1c150:	bxne	lr
   1c154:	ldr	r1, [r1]
   1c158:	ldr	r0, [r0]
   1c15c:	b	1ffe0 <__assert_fail@plt+0xdf54>
   1c160:	ldr	r2, [r0]
   1c164:	ldr	r0, [r1]
   1c168:	mov	r1, r2
   1c16c:	b	1ffe0 <__assert_fail@plt+0xdf54>
   1c170:	ldr	r2, [r1, #120]	; 0x78
   1c174:	mov	ip, #1
   1c178:	mov	r3, #1
   1c17c:	cmp	r2, #3
   1c180:	beq	1c1a4 <__assert_fail@plt+0xa118>
   1c184:	cmp	r2, #9
   1c188:	mov	r3, #1
   1c18c:	beq	1c1a4 <__assert_fail@plt+0xa118>
   1c190:	ldr	r2, [r1, #124]	; 0x7c
   1c194:	and	r2, r2, #61440	; 0xf000
   1c198:	sub	r2, r2, #16384	; 0x4000
   1c19c:	clz	r2, r2
   1c1a0:	lsr	r3, r2, #5
   1c1a4:	ldr	r2, [r0, #120]	; 0x78
   1c1a8:	cmp	r2, #3
   1c1ac:	cmpne	r2, #9
   1c1b0:	beq	1c1c8 <__assert_fail@plt+0xa13c>
   1c1b4:	ldr	r2, [r0, #124]	; 0x7c
   1c1b8:	and	r2, r2, #61440	; 0xf000
   1c1bc:	sub	r2, r2, #16384	; 0x4000
   1c1c0:	clz	r2, r2
   1c1c4:	lsr	ip, r2, #5
   1c1c8:	subs	r2, r3, ip
   1c1cc:	movne	r0, r2
   1c1d0:	bxne	lr
   1c1d4:	ldr	r2, [r0]
   1c1d8:	ldr	r0, [r1]
   1c1dc:	mov	r1, r2
   1c1e0:	b	1ffe0 <__assert_fail@plt+0xdf54>
   1c1e4:	push	{r4, r5, r6, sl, fp, lr}
   1c1e8:	add	fp, sp, #16
   1c1ec:	ldrd	r2, [r0, #96]	; 0x60
   1c1f0:	ldrd	r4, [r1, #96]	; 0x60
   1c1f4:	mov	r6, #0
   1c1f8:	cmp	r4, r2
   1c1fc:	mov	r2, #0
   1c200:	movwgt	r2, #1
   1c204:	sublt	r2, r2, #1
   1c208:	cmp	r5, r3
   1c20c:	mov	r3, #0
   1c210:	movwgt	r3, #1
   1c214:	sublt	r3, r3, #1
   1c218:	add	r2, r3, r2, lsl #1
   1c21c:	cmp	r2, #0
   1c220:	movne	r0, r2
   1c224:	popne	{r4, r5, r6, sl, fp, pc}
   1c228:	ldr	r4, [r1]
   1c22c:	ldr	r5, [r0]
   1c230:	bl	11ed0 <__errno_location@plt>
   1c234:	str	r6, [r0]
   1c238:	mov	r0, r5
   1c23c:	mov	r1, r4
   1c240:	pop	{r4, r5, r6, sl, fp, lr}
   1c244:	b	11de0 <strcoll@plt>
   1c248:	push	{r4, r5, r6, sl, fp, lr}
   1c24c:	add	fp, sp, #16
   1c250:	ldr	r6, [r1, #120]	; 0x78
   1c254:	mov	r2, #1
   1c258:	mov	r3, #1
   1c25c:	cmp	r6, #3
   1c260:	beq	1c284 <__assert_fail@plt+0xa1f8>
   1c264:	cmp	r6, #9
   1c268:	mov	r3, #1
   1c26c:	beq	1c284 <__assert_fail@plt+0xa1f8>
   1c270:	ldr	r3, [r1, #124]	; 0x7c
   1c274:	and	r3, r3, #61440	; 0xf000
   1c278:	sub	r3, r3, #16384	; 0x4000
   1c27c:	clz	r3, r3
   1c280:	lsr	r3, r3, #5
   1c284:	ldr	r6, [r0, #120]	; 0x78
   1c288:	cmp	r6, #3
   1c28c:	cmpne	r6, #9
   1c290:	bne	1c2f4 <__assert_fail@plt+0xa268>
   1c294:	subs	r2, r3, r2
   1c298:	bne	1c310 <__assert_fail@plt+0xa284>
   1c29c:	ldrd	r2, [r0, #96]	; 0x60
   1c2a0:	ldrd	r4, [r1, #96]	; 0x60
   1c2a4:	mov	r6, #0
   1c2a8:	cmp	r4, r2
   1c2ac:	mov	r2, #0
   1c2b0:	movwgt	r2, #1
   1c2b4:	sublt	r2, r2, #1
   1c2b8:	cmp	r5, r3
   1c2bc:	mov	r3, #0
   1c2c0:	movwgt	r3, #1
   1c2c4:	sublt	r3, r3, #1
   1c2c8:	add	r2, r3, r2, lsl #1
   1c2cc:	cmp	r2, #0
   1c2d0:	bne	1c310 <__assert_fail@plt+0xa284>
   1c2d4:	ldr	r4, [r1]
   1c2d8:	ldr	r5, [r0]
   1c2dc:	bl	11ed0 <__errno_location@plt>
   1c2e0:	str	r6, [r0]
   1c2e4:	mov	r0, r5
   1c2e8:	mov	r1, r4
   1c2ec:	pop	{r4, r5, r6, sl, fp, lr}
   1c2f0:	b	11de0 <strcoll@plt>
   1c2f4:	ldr	r2, [r0, #124]	; 0x7c
   1c2f8:	and	r2, r2, #61440	; 0xf000
   1c2fc:	sub	r2, r2, #16384	; 0x4000
   1c300:	clz	r2, r2
   1c304:	lsr	r2, r2, #5
   1c308:	subs	r2, r3, r2
   1c30c:	beq	1c29c <__assert_fail@plt+0xa210>
   1c310:	mov	r0, r2
   1c314:	pop	{r4, r5, r6, sl, fp, pc}
   1c318:	push	{r4, r5, r6, sl, fp, lr}
   1c31c:	add	fp, sp, #16
   1c320:	ldrd	r2, [r1, #96]	; 0x60
   1c324:	ldrd	r4, [r0, #96]	; 0x60
   1c328:	mov	r6, #0
   1c32c:	cmp	r4, r2
   1c330:	mov	r2, #0
   1c334:	movwgt	r2, #1
   1c338:	sublt	r2, r2, #1
   1c33c:	cmp	r5, r3
   1c340:	mov	r3, #0
   1c344:	movwgt	r3, #1
   1c348:	sublt	r3, r3, #1
   1c34c:	add	r2, r3, r2, lsl #1
   1c350:	cmp	r2, #0
   1c354:	movne	r0, r2
   1c358:	popne	{r4, r5, r6, sl, fp, pc}
   1c35c:	ldr	r4, [r0]
   1c360:	ldr	r5, [r1]
   1c364:	bl	11ed0 <__errno_location@plt>
   1c368:	str	r6, [r0]
   1c36c:	mov	r0, r5
   1c370:	mov	r1, r4
   1c374:	pop	{r4, r5, r6, sl, fp, lr}
   1c378:	b	11de0 <strcoll@plt>
   1c37c:	push	{r4, r5, r6, sl, fp, lr}
   1c380:	add	fp, sp, #16
   1c384:	ldr	r6, [r1, #120]	; 0x78
   1c388:	mov	r2, #1
   1c38c:	mov	r3, #1
   1c390:	cmp	r6, #3
   1c394:	beq	1c3b8 <__assert_fail@plt+0xa32c>
   1c398:	cmp	r6, #9
   1c39c:	mov	r3, #1
   1c3a0:	beq	1c3b8 <__assert_fail@plt+0xa32c>
   1c3a4:	ldr	r3, [r1, #124]	; 0x7c
   1c3a8:	and	r3, r3, #61440	; 0xf000
   1c3ac:	sub	r3, r3, #16384	; 0x4000
   1c3b0:	clz	r3, r3
   1c3b4:	lsr	r3, r3, #5
   1c3b8:	ldr	r6, [r0, #120]	; 0x78
   1c3bc:	cmp	r6, #3
   1c3c0:	cmpne	r6, #9
   1c3c4:	bne	1c428 <__assert_fail@plt+0xa39c>
   1c3c8:	subs	r2, r3, r2
   1c3cc:	bne	1c444 <__assert_fail@plt+0xa3b8>
   1c3d0:	ldrd	r2, [r1, #96]	; 0x60
   1c3d4:	ldrd	r4, [r0, #96]	; 0x60
   1c3d8:	mov	r6, #0
   1c3dc:	cmp	r4, r2
   1c3e0:	mov	r2, #0
   1c3e4:	movwgt	r2, #1
   1c3e8:	sublt	r2, r2, #1
   1c3ec:	cmp	r5, r3
   1c3f0:	mov	r3, #0
   1c3f4:	movwgt	r3, #1
   1c3f8:	sublt	r3, r3, #1
   1c3fc:	add	r2, r3, r2, lsl #1
   1c400:	cmp	r2, #0
   1c404:	bne	1c444 <__assert_fail@plt+0xa3b8>
   1c408:	ldr	r4, [r0]
   1c40c:	ldr	r5, [r1]
   1c410:	bl	11ed0 <__errno_location@plt>
   1c414:	str	r6, [r0]
   1c418:	mov	r0, r5
   1c41c:	mov	r1, r4
   1c420:	pop	{r4, r5, r6, sl, fp, lr}
   1c424:	b	11de0 <strcoll@plt>
   1c428:	ldr	r2, [r0, #124]	; 0x7c
   1c42c:	and	r2, r2, #61440	; 0xf000
   1c430:	sub	r2, r2, #16384	; 0x4000
   1c434:	clz	r2, r2
   1c438:	lsr	r2, r2, #5
   1c43c:	subs	r2, r3, r2
   1c440:	beq	1c3d0 <__assert_fail@plt+0xa344>
   1c444:	mov	r0, r2
   1c448:	pop	{r4, r5, r6, sl, fp, pc}
   1c44c:	push	{r4, r5, r7, sl, fp, lr}
   1c450:	add	fp, sp, #16
   1c454:	ldr	r2, [r0, #96]	; 0x60
   1c458:	ldr	r7, [r0, #100]	; 0x64
   1c45c:	ldrd	r4, [r1, #96]	; 0x60
   1c460:	mov	r3, #0
   1c464:	cmp	r4, r2
   1c468:	mov	r2, #0
   1c46c:	movwgt	r2, #1
   1c470:	sublt	r2, r2, #1
   1c474:	cmp	r5, r7
   1c478:	movwgt	r3, #1
   1c47c:	sublt	r3, r3, #1
   1c480:	add	r2, r3, r2, lsl #1
   1c484:	cmp	r2, #0
   1c488:	movne	r0, r2
   1c48c:	popne	{r4, r5, r7, sl, fp, pc}
   1c490:	ldr	r1, [r1]
   1c494:	ldr	r0, [r0]
   1c498:	pop	{r4, r5, r7, sl, fp, lr}
   1c49c:	b	11bd0 <strcmp@plt>
   1c4a0:	ldr	r2, [r1, #120]	; 0x78
   1c4a4:	mov	ip, #1
   1c4a8:	mov	r3, #1
   1c4ac:	cmp	r2, #3
   1c4b0:	beq	1c4d4 <__assert_fail@plt+0xa448>
   1c4b4:	cmp	r2, #9
   1c4b8:	mov	r3, #1
   1c4bc:	beq	1c4d4 <__assert_fail@plt+0xa448>
   1c4c0:	ldr	r2, [r1, #124]	; 0x7c
   1c4c4:	and	r2, r2, #61440	; 0xf000
   1c4c8:	sub	r2, r2, #16384	; 0x4000
   1c4cc:	clz	r2, r2
   1c4d0:	lsr	r3, r2, #5
   1c4d4:	ldr	r2, [r0, #120]	; 0x78
   1c4d8:	cmp	r2, #3
   1c4dc:	cmpne	r2, #9
   1c4e0:	bne	1c53c <__assert_fail@plt+0xa4b0>
   1c4e4:	subs	r2, r3, ip
   1c4e8:	bne	1c558 <__assert_fail@plt+0xa4cc>
   1c4ec:	push	{r4, r5, r7, sl, fp, lr}
   1c4f0:	add	fp, sp, #16
   1c4f4:	ldr	r2, [r0, #96]	; 0x60
   1c4f8:	ldr	r7, [r0, #100]	; 0x64
   1c4fc:	ldrd	r4, [r1, #96]	; 0x60
   1c500:	mov	r3, #0
   1c504:	cmp	r4, r2
   1c508:	mov	r2, #0
   1c50c:	movwgt	r2, #1
   1c510:	sublt	r2, r2, #1
   1c514:	cmp	r5, r7
   1c518:	movwgt	r3, #1
   1c51c:	sublt	r3, r3, #1
   1c520:	add	r2, r3, r2, lsl #1
   1c524:	cmp	r2, #0
   1c528:	pop	{r4, r5, r7, sl, fp, lr}
   1c52c:	bne	1c558 <__assert_fail@plt+0xa4cc>
   1c530:	ldr	r1, [r1]
   1c534:	ldr	r0, [r0]
   1c538:	b	11bd0 <strcmp@plt>
   1c53c:	ldr	r2, [r0, #124]	; 0x7c
   1c540:	and	r2, r2, #61440	; 0xf000
   1c544:	sub	r2, r2, #16384	; 0x4000
   1c548:	clz	r2, r2
   1c54c:	lsr	ip, r2, #5
   1c550:	subs	r2, r3, ip
   1c554:	beq	1c4ec <__assert_fail@plt+0xa460>
   1c558:	mov	r0, r2
   1c55c:	bx	lr
   1c560:	push	{r4, r5, r7, sl, fp, lr}
   1c564:	add	fp, sp, #16
   1c568:	ldr	r2, [r1, #96]	; 0x60
   1c56c:	ldr	r7, [r1, #100]	; 0x64
   1c570:	ldrd	r4, [r0, #96]	; 0x60
   1c574:	mov	r3, #0
   1c578:	cmp	r4, r2
   1c57c:	mov	r2, #0
   1c580:	movwgt	r2, #1
   1c584:	sublt	r2, r2, #1
   1c588:	cmp	r5, r7
   1c58c:	movwgt	r3, #1
   1c590:	sublt	r3, r3, #1
   1c594:	add	r2, r3, r2, lsl #1
   1c598:	cmp	r2, #0
   1c59c:	movne	r0, r2
   1c5a0:	popne	{r4, r5, r7, sl, fp, pc}
   1c5a4:	ldr	r2, [r0]
   1c5a8:	ldr	r0, [r1]
   1c5ac:	mov	r1, r2
   1c5b0:	pop	{r4, r5, r7, sl, fp, lr}
   1c5b4:	b	11bd0 <strcmp@plt>
   1c5b8:	ldr	r2, [r1, #120]	; 0x78
   1c5bc:	mov	ip, #1
   1c5c0:	mov	r3, #1
   1c5c4:	cmp	r2, #3
   1c5c8:	beq	1c5ec <__assert_fail@plt+0xa560>
   1c5cc:	cmp	r2, #9
   1c5d0:	mov	r3, #1
   1c5d4:	beq	1c5ec <__assert_fail@plt+0xa560>
   1c5d8:	ldr	r2, [r1, #124]	; 0x7c
   1c5dc:	and	r2, r2, #61440	; 0xf000
   1c5e0:	sub	r2, r2, #16384	; 0x4000
   1c5e4:	clz	r2, r2
   1c5e8:	lsr	r3, r2, #5
   1c5ec:	ldr	r2, [r0, #120]	; 0x78
   1c5f0:	cmp	r2, #3
   1c5f4:	cmpne	r2, #9
   1c5f8:	bne	1c658 <__assert_fail@plt+0xa5cc>
   1c5fc:	subs	r2, r3, ip
   1c600:	bne	1c674 <__assert_fail@plt+0xa5e8>
   1c604:	push	{r4, r5, r7, sl, fp, lr}
   1c608:	add	fp, sp, #16
   1c60c:	ldr	r2, [r1, #96]	; 0x60
   1c610:	ldr	r7, [r1, #100]	; 0x64
   1c614:	ldrd	r4, [r0, #96]	; 0x60
   1c618:	mov	r3, #0
   1c61c:	cmp	r4, r2
   1c620:	mov	r2, #0
   1c624:	movwgt	r2, #1
   1c628:	sublt	r2, r2, #1
   1c62c:	cmp	r5, r7
   1c630:	movwgt	r3, #1
   1c634:	sublt	r3, r3, #1
   1c638:	add	r2, r3, r2, lsl #1
   1c63c:	cmp	r2, #0
   1c640:	pop	{r4, r5, r7, sl, fp, lr}
   1c644:	bne	1c674 <__assert_fail@plt+0xa5e8>
   1c648:	ldr	r2, [r0]
   1c64c:	ldr	r0, [r1]
   1c650:	mov	r1, r2
   1c654:	b	11bd0 <strcmp@plt>
   1c658:	ldr	r2, [r0, #124]	; 0x7c
   1c65c:	and	r2, r2, #61440	; 0xf000
   1c660:	sub	r2, r2, #16384	; 0x4000
   1c664:	clz	r2, r2
   1c668:	lsr	ip, r2, #5
   1c66c:	subs	r2, r3, ip
   1c670:	beq	1c604 <__assert_fail@plt+0xa578>
   1c674:	mov	r0, r2
   1c678:	bx	lr
   1c67c:	push	{r4, r5, r6, sl, fp, lr}
   1c680:	add	fp, sp, #16
   1c684:	ldrd	r2, [r0, #104]	; 0x68
   1c688:	ldrd	r4, [r1, #104]	; 0x68
   1c68c:	mov	r6, #0
   1c690:	cmp	r4, r2
   1c694:	mov	r2, #0
   1c698:	movwgt	r2, #1
   1c69c:	sublt	r2, r2, #1
   1c6a0:	cmp	r5, r3
   1c6a4:	mov	r3, #0
   1c6a8:	movwgt	r3, #1
   1c6ac:	sublt	r3, r3, #1
   1c6b0:	add	r2, r3, r2, lsl #1
   1c6b4:	cmp	r2, #0
   1c6b8:	movne	r0, r2
   1c6bc:	popne	{r4, r5, r6, sl, fp, pc}
   1c6c0:	ldr	r4, [r1]
   1c6c4:	ldr	r5, [r0]
   1c6c8:	bl	11ed0 <__errno_location@plt>
   1c6cc:	str	r6, [r0]
   1c6d0:	mov	r0, r5
   1c6d4:	mov	r1, r4
   1c6d8:	pop	{r4, r5, r6, sl, fp, lr}
   1c6dc:	b	11de0 <strcoll@plt>
   1c6e0:	push	{r4, r5, r6, sl, fp, lr}
   1c6e4:	add	fp, sp, #16
   1c6e8:	ldr	r6, [r1, #120]	; 0x78
   1c6ec:	mov	r2, #1
   1c6f0:	mov	r3, #1
   1c6f4:	cmp	r6, #3
   1c6f8:	beq	1c71c <__assert_fail@plt+0xa690>
   1c6fc:	cmp	r6, #9
   1c700:	mov	r3, #1
   1c704:	beq	1c71c <__assert_fail@plt+0xa690>
   1c708:	ldr	r3, [r1, #124]	; 0x7c
   1c70c:	and	r3, r3, #61440	; 0xf000
   1c710:	sub	r3, r3, #16384	; 0x4000
   1c714:	clz	r3, r3
   1c718:	lsr	r3, r3, #5
   1c71c:	ldr	r6, [r0, #120]	; 0x78
   1c720:	cmp	r6, #3
   1c724:	cmpne	r6, #9
   1c728:	bne	1c78c <__assert_fail@plt+0xa700>
   1c72c:	subs	r2, r3, r2
   1c730:	bne	1c7a8 <__assert_fail@plt+0xa71c>
   1c734:	ldrd	r2, [r0, #104]	; 0x68
   1c738:	ldrd	r4, [r1, #104]	; 0x68
   1c73c:	mov	r6, #0
   1c740:	cmp	r4, r2
   1c744:	mov	r2, #0
   1c748:	movwgt	r2, #1
   1c74c:	sublt	r2, r2, #1
   1c750:	cmp	r5, r3
   1c754:	mov	r3, #0
   1c758:	movwgt	r3, #1
   1c75c:	sublt	r3, r3, #1
   1c760:	add	r2, r3, r2, lsl #1
   1c764:	cmp	r2, #0
   1c768:	bne	1c7a8 <__assert_fail@plt+0xa71c>
   1c76c:	ldr	r4, [r1]
   1c770:	ldr	r5, [r0]
   1c774:	bl	11ed0 <__errno_location@plt>
   1c778:	str	r6, [r0]
   1c77c:	mov	r0, r5
   1c780:	mov	r1, r4
   1c784:	pop	{r4, r5, r6, sl, fp, lr}
   1c788:	b	11de0 <strcoll@plt>
   1c78c:	ldr	r2, [r0, #124]	; 0x7c
   1c790:	and	r2, r2, #61440	; 0xf000
   1c794:	sub	r2, r2, #16384	; 0x4000
   1c798:	clz	r2, r2
   1c79c:	lsr	r2, r2, #5
   1c7a0:	subs	r2, r3, r2
   1c7a4:	beq	1c734 <__assert_fail@plt+0xa6a8>
   1c7a8:	mov	r0, r2
   1c7ac:	pop	{r4, r5, r6, sl, fp, pc}
   1c7b0:	push	{r4, r5, r6, sl, fp, lr}
   1c7b4:	add	fp, sp, #16
   1c7b8:	ldrd	r2, [r1, #104]	; 0x68
   1c7bc:	ldrd	r4, [r0, #104]	; 0x68
   1c7c0:	mov	r6, #0
   1c7c4:	cmp	r4, r2
   1c7c8:	mov	r2, #0
   1c7cc:	movwgt	r2, #1
   1c7d0:	sublt	r2, r2, #1
   1c7d4:	cmp	r5, r3
   1c7d8:	mov	r3, #0
   1c7dc:	movwgt	r3, #1
   1c7e0:	sublt	r3, r3, #1
   1c7e4:	add	r2, r3, r2, lsl #1
   1c7e8:	cmp	r2, #0
   1c7ec:	movne	r0, r2
   1c7f0:	popne	{r4, r5, r6, sl, fp, pc}
   1c7f4:	ldr	r4, [r0]
   1c7f8:	ldr	r5, [r1]
   1c7fc:	bl	11ed0 <__errno_location@plt>
   1c800:	str	r6, [r0]
   1c804:	mov	r0, r5
   1c808:	mov	r1, r4
   1c80c:	pop	{r4, r5, r6, sl, fp, lr}
   1c810:	b	11de0 <strcoll@plt>
   1c814:	push	{r4, r5, r6, sl, fp, lr}
   1c818:	add	fp, sp, #16
   1c81c:	ldr	r6, [r1, #120]	; 0x78
   1c820:	mov	r2, #1
   1c824:	mov	r3, #1
   1c828:	cmp	r6, #3
   1c82c:	beq	1c850 <__assert_fail@plt+0xa7c4>
   1c830:	cmp	r6, #9
   1c834:	mov	r3, #1
   1c838:	beq	1c850 <__assert_fail@plt+0xa7c4>
   1c83c:	ldr	r3, [r1, #124]	; 0x7c
   1c840:	and	r3, r3, #61440	; 0xf000
   1c844:	sub	r3, r3, #16384	; 0x4000
   1c848:	clz	r3, r3
   1c84c:	lsr	r3, r3, #5
   1c850:	ldr	r6, [r0, #120]	; 0x78
   1c854:	cmp	r6, #3
   1c858:	cmpne	r6, #9
   1c85c:	bne	1c8c0 <__assert_fail@plt+0xa834>
   1c860:	subs	r2, r3, r2
   1c864:	bne	1c8dc <__assert_fail@plt+0xa850>
   1c868:	ldrd	r2, [r1, #104]	; 0x68
   1c86c:	ldrd	r4, [r0, #104]	; 0x68
   1c870:	mov	r6, #0
   1c874:	cmp	r4, r2
   1c878:	mov	r2, #0
   1c87c:	movwgt	r2, #1
   1c880:	sublt	r2, r2, #1
   1c884:	cmp	r5, r3
   1c888:	mov	r3, #0
   1c88c:	movwgt	r3, #1
   1c890:	sublt	r3, r3, #1
   1c894:	add	r2, r3, r2, lsl #1
   1c898:	cmp	r2, #0
   1c89c:	bne	1c8dc <__assert_fail@plt+0xa850>
   1c8a0:	ldr	r4, [r0]
   1c8a4:	ldr	r5, [r1]
   1c8a8:	bl	11ed0 <__errno_location@plt>
   1c8ac:	str	r6, [r0]
   1c8b0:	mov	r0, r5
   1c8b4:	mov	r1, r4
   1c8b8:	pop	{r4, r5, r6, sl, fp, lr}
   1c8bc:	b	11de0 <strcoll@plt>
   1c8c0:	ldr	r2, [r0, #124]	; 0x7c
   1c8c4:	and	r2, r2, #61440	; 0xf000
   1c8c8:	sub	r2, r2, #16384	; 0x4000
   1c8cc:	clz	r2, r2
   1c8d0:	lsr	r2, r2, #5
   1c8d4:	subs	r2, r3, r2
   1c8d8:	beq	1c868 <__assert_fail@plt+0xa7dc>
   1c8dc:	mov	r0, r2
   1c8e0:	pop	{r4, r5, r6, sl, fp, pc}
   1c8e4:	push	{r4, r5, r7, sl, fp, lr}
   1c8e8:	add	fp, sp, #16
   1c8ec:	ldr	r2, [r0, #104]	; 0x68
   1c8f0:	ldr	r7, [r0, #108]	; 0x6c
   1c8f4:	ldrd	r4, [r1, #104]	; 0x68
   1c8f8:	mov	r3, #0
   1c8fc:	cmp	r4, r2
   1c900:	mov	r2, #0
   1c904:	movwgt	r2, #1
   1c908:	sublt	r2, r2, #1
   1c90c:	cmp	r5, r7
   1c910:	movwgt	r3, #1
   1c914:	sublt	r3, r3, #1
   1c918:	add	r2, r3, r2, lsl #1
   1c91c:	cmp	r2, #0
   1c920:	movne	r0, r2
   1c924:	popne	{r4, r5, r7, sl, fp, pc}
   1c928:	ldr	r1, [r1]
   1c92c:	ldr	r0, [r0]
   1c930:	pop	{r4, r5, r7, sl, fp, lr}
   1c934:	b	11bd0 <strcmp@plt>
   1c938:	ldr	r2, [r1, #120]	; 0x78
   1c93c:	mov	ip, #1
   1c940:	mov	r3, #1
   1c944:	cmp	r2, #3
   1c948:	beq	1c96c <__assert_fail@plt+0xa8e0>
   1c94c:	cmp	r2, #9
   1c950:	mov	r3, #1
   1c954:	beq	1c96c <__assert_fail@plt+0xa8e0>
   1c958:	ldr	r2, [r1, #124]	; 0x7c
   1c95c:	and	r2, r2, #61440	; 0xf000
   1c960:	sub	r2, r2, #16384	; 0x4000
   1c964:	clz	r2, r2
   1c968:	lsr	r3, r2, #5
   1c96c:	ldr	r2, [r0, #120]	; 0x78
   1c970:	cmp	r2, #3
   1c974:	cmpne	r2, #9
   1c978:	bne	1c9d4 <__assert_fail@plt+0xa948>
   1c97c:	subs	r2, r3, ip
   1c980:	bne	1c9f0 <__assert_fail@plt+0xa964>
   1c984:	push	{r4, r5, r7, sl, fp, lr}
   1c988:	add	fp, sp, #16
   1c98c:	ldr	r2, [r0, #104]	; 0x68
   1c990:	ldr	r7, [r0, #108]	; 0x6c
   1c994:	ldrd	r4, [r1, #104]	; 0x68
   1c998:	mov	r3, #0
   1c99c:	cmp	r4, r2
   1c9a0:	mov	r2, #0
   1c9a4:	movwgt	r2, #1
   1c9a8:	sublt	r2, r2, #1
   1c9ac:	cmp	r5, r7
   1c9b0:	movwgt	r3, #1
   1c9b4:	sublt	r3, r3, #1
   1c9b8:	add	r2, r3, r2, lsl #1
   1c9bc:	cmp	r2, #0
   1c9c0:	pop	{r4, r5, r7, sl, fp, lr}
   1c9c4:	bne	1c9f0 <__assert_fail@plt+0xa964>
   1c9c8:	ldr	r1, [r1]
   1c9cc:	ldr	r0, [r0]
   1c9d0:	b	11bd0 <strcmp@plt>
   1c9d4:	ldr	r2, [r0, #124]	; 0x7c
   1c9d8:	and	r2, r2, #61440	; 0xf000
   1c9dc:	sub	r2, r2, #16384	; 0x4000
   1c9e0:	clz	r2, r2
   1c9e4:	lsr	ip, r2, #5
   1c9e8:	subs	r2, r3, ip
   1c9ec:	beq	1c984 <__assert_fail@plt+0xa8f8>
   1c9f0:	mov	r0, r2
   1c9f4:	bx	lr
   1c9f8:	push	{r4, r5, r7, sl, fp, lr}
   1c9fc:	add	fp, sp, #16
   1ca00:	ldr	r2, [r1, #104]	; 0x68
   1ca04:	ldr	r7, [r1, #108]	; 0x6c
   1ca08:	ldrd	r4, [r0, #104]	; 0x68
   1ca0c:	mov	r3, #0
   1ca10:	cmp	r4, r2
   1ca14:	mov	r2, #0
   1ca18:	movwgt	r2, #1
   1ca1c:	sublt	r2, r2, #1
   1ca20:	cmp	r5, r7
   1ca24:	movwgt	r3, #1
   1ca28:	sublt	r3, r3, #1
   1ca2c:	add	r2, r3, r2, lsl #1
   1ca30:	cmp	r2, #0
   1ca34:	movne	r0, r2
   1ca38:	popne	{r4, r5, r7, sl, fp, pc}
   1ca3c:	ldr	r2, [r0]
   1ca40:	ldr	r0, [r1]
   1ca44:	mov	r1, r2
   1ca48:	pop	{r4, r5, r7, sl, fp, lr}
   1ca4c:	b	11bd0 <strcmp@plt>
   1ca50:	ldr	r2, [r1, #120]	; 0x78
   1ca54:	mov	ip, #1
   1ca58:	mov	r3, #1
   1ca5c:	cmp	r2, #3
   1ca60:	beq	1ca84 <__assert_fail@plt+0xa9f8>
   1ca64:	cmp	r2, #9
   1ca68:	mov	r3, #1
   1ca6c:	beq	1ca84 <__assert_fail@plt+0xa9f8>
   1ca70:	ldr	r2, [r1, #124]	; 0x7c
   1ca74:	and	r2, r2, #61440	; 0xf000
   1ca78:	sub	r2, r2, #16384	; 0x4000
   1ca7c:	clz	r2, r2
   1ca80:	lsr	r3, r2, #5
   1ca84:	ldr	r2, [r0, #120]	; 0x78
   1ca88:	cmp	r2, #3
   1ca8c:	cmpne	r2, #9
   1ca90:	bne	1caf0 <__assert_fail@plt+0xaa64>
   1ca94:	subs	r2, r3, ip
   1ca98:	bne	1cb0c <__assert_fail@plt+0xaa80>
   1ca9c:	push	{r4, r5, r7, sl, fp, lr}
   1caa0:	add	fp, sp, #16
   1caa4:	ldr	r2, [r1, #104]	; 0x68
   1caa8:	ldr	r7, [r1, #108]	; 0x6c
   1caac:	ldrd	r4, [r0, #104]	; 0x68
   1cab0:	mov	r3, #0
   1cab4:	cmp	r4, r2
   1cab8:	mov	r2, #0
   1cabc:	movwgt	r2, #1
   1cac0:	sublt	r2, r2, #1
   1cac4:	cmp	r5, r7
   1cac8:	movwgt	r3, #1
   1cacc:	sublt	r3, r3, #1
   1cad0:	add	r2, r3, r2, lsl #1
   1cad4:	cmp	r2, #0
   1cad8:	pop	{r4, r5, r7, sl, fp, lr}
   1cadc:	bne	1cb0c <__assert_fail@plt+0xaa80>
   1cae0:	ldr	r2, [r0]
   1cae4:	ldr	r0, [r1]
   1cae8:	mov	r1, r2
   1caec:	b	11bd0 <strcmp@plt>
   1caf0:	ldr	r2, [r0, #124]	; 0x7c
   1caf4:	and	r2, r2, #61440	; 0xf000
   1caf8:	sub	r2, r2, #16384	; 0x4000
   1cafc:	clz	r2, r2
   1cb00:	lsr	ip, r2, #5
   1cb04:	subs	r2, r3, ip
   1cb08:	beq	1ca9c <__assert_fail@plt+0xaa10>
   1cb0c:	mov	r0, r2
   1cb10:	bx	lr
   1cb14:	push	{r4, r5, r6, sl, fp, lr}
   1cb18:	add	fp, sp, #16
   1cb1c:	ldrd	r2, [r0, #88]	; 0x58
   1cb20:	ldrd	r4, [r1, #88]	; 0x58
   1cb24:	mov	r6, #0
   1cb28:	cmp	r4, r2
   1cb2c:	mov	r2, #0
   1cb30:	movwgt	r2, #1
   1cb34:	sublt	r2, r2, #1
   1cb38:	cmp	r5, r3
   1cb3c:	mov	r3, #0
   1cb40:	movwgt	r3, #1
   1cb44:	sublt	r3, r3, #1
   1cb48:	add	r2, r3, r2, lsl #1
   1cb4c:	cmp	r2, #0
   1cb50:	movne	r0, r2
   1cb54:	popne	{r4, r5, r6, sl, fp, pc}
   1cb58:	ldr	r4, [r1]
   1cb5c:	ldr	r5, [r0]
   1cb60:	bl	11ed0 <__errno_location@plt>
   1cb64:	str	r6, [r0]
   1cb68:	mov	r0, r5
   1cb6c:	mov	r1, r4
   1cb70:	pop	{r4, r5, r6, sl, fp, lr}
   1cb74:	b	11de0 <strcoll@plt>
   1cb78:	push	{r4, r5, r6, sl, fp, lr}
   1cb7c:	add	fp, sp, #16
   1cb80:	ldr	r6, [r1, #120]	; 0x78
   1cb84:	mov	r2, #1
   1cb88:	mov	r3, #1
   1cb8c:	cmp	r6, #3
   1cb90:	beq	1cbb4 <__assert_fail@plt+0xab28>
   1cb94:	cmp	r6, #9
   1cb98:	mov	r3, #1
   1cb9c:	beq	1cbb4 <__assert_fail@plt+0xab28>
   1cba0:	ldr	r3, [r1, #124]	; 0x7c
   1cba4:	and	r3, r3, #61440	; 0xf000
   1cba8:	sub	r3, r3, #16384	; 0x4000
   1cbac:	clz	r3, r3
   1cbb0:	lsr	r3, r3, #5
   1cbb4:	ldr	r6, [r0, #120]	; 0x78
   1cbb8:	cmp	r6, #3
   1cbbc:	cmpne	r6, #9
   1cbc0:	bne	1cc24 <__assert_fail@plt+0xab98>
   1cbc4:	subs	r2, r3, r2
   1cbc8:	bne	1cc40 <__assert_fail@plt+0xabb4>
   1cbcc:	ldrd	r2, [r0, #88]	; 0x58
   1cbd0:	ldrd	r4, [r1, #88]	; 0x58
   1cbd4:	mov	r6, #0
   1cbd8:	cmp	r4, r2
   1cbdc:	mov	r2, #0
   1cbe0:	movwgt	r2, #1
   1cbe4:	sublt	r2, r2, #1
   1cbe8:	cmp	r5, r3
   1cbec:	mov	r3, #0
   1cbf0:	movwgt	r3, #1
   1cbf4:	sublt	r3, r3, #1
   1cbf8:	add	r2, r3, r2, lsl #1
   1cbfc:	cmp	r2, #0
   1cc00:	bne	1cc40 <__assert_fail@plt+0xabb4>
   1cc04:	ldr	r4, [r1]
   1cc08:	ldr	r5, [r0]
   1cc0c:	bl	11ed0 <__errno_location@plt>
   1cc10:	str	r6, [r0]
   1cc14:	mov	r0, r5
   1cc18:	mov	r1, r4
   1cc1c:	pop	{r4, r5, r6, sl, fp, lr}
   1cc20:	b	11de0 <strcoll@plt>
   1cc24:	ldr	r2, [r0, #124]	; 0x7c
   1cc28:	and	r2, r2, #61440	; 0xf000
   1cc2c:	sub	r2, r2, #16384	; 0x4000
   1cc30:	clz	r2, r2
   1cc34:	lsr	r2, r2, #5
   1cc38:	subs	r2, r3, r2
   1cc3c:	beq	1cbcc <__assert_fail@plt+0xab40>
   1cc40:	mov	r0, r2
   1cc44:	pop	{r4, r5, r6, sl, fp, pc}
   1cc48:	push	{r4, r5, r6, sl, fp, lr}
   1cc4c:	add	fp, sp, #16
   1cc50:	ldrd	r2, [r1, #88]	; 0x58
   1cc54:	ldrd	r4, [r0, #88]	; 0x58
   1cc58:	mov	r6, #0
   1cc5c:	cmp	r4, r2
   1cc60:	mov	r2, #0
   1cc64:	movwgt	r2, #1
   1cc68:	sublt	r2, r2, #1
   1cc6c:	cmp	r5, r3
   1cc70:	mov	r3, #0
   1cc74:	movwgt	r3, #1
   1cc78:	sublt	r3, r3, #1
   1cc7c:	add	r2, r3, r2, lsl #1
   1cc80:	cmp	r2, #0
   1cc84:	movne	r0, r2
   1cc88:	popne	{r4, r5, r6, sl, fp, pc}
   1cc8c:	ldr	r4, [r0]
   1cc90:	ldr	r5, [r1]
   1cc94:	bl	11ed0 <__errno_location@plt>
   1cc98:	str	r6, [r0]
   1cc9c:	mov	r0, r5
   1cca0:	mov	r1, r4
   1cca4:	pop	{r4, r5, r6, sl, fp, lr}
   1cca8:	b	11de0 <strcoll@plt>
   1ccac:	push	{r4, r5, r6, sl, fp, lr}
   1ccb0:	add	fp, sp, #16
   1ccb4:	ldr	r6, [r1, #120]	; 0x78
   1ccb8:	mov	r2, #1
   1ccbc:	mov	r3, #1
   1ccc0:	cmp	r6, #3
   1ccc4:	beq	1cce8 <__assert_fail@plt+0xac5c>
   1ccc8:	cmp	r6, #9
   1cccc:	mov	r3, #1
   1ccd0:	beq	1cce8 <__assert_fail@plt+0xac5c>
   1ccd4:	ldr	r3, [r1, #124]	; 0x7c
   1ccd8:	and	r3, r3, #61440	; 0xf000
   1ccdc:	sub	r3, r3, #16384	; 0x4000
   1cce0:	clz	r3, r3
   1cce4:	lsr	r3, r3, #5
   1cce8:	ldr	r6, [r0, #120]	; 0x78
   1ccec:	cmp	r6, #3
   1ccf0:	cmpne	r6, #9
   1ccf4:	bne	1cd58 <__assert_fail@plt+0xaccc>
   1ccf8:	subs	r2, r3, r2
   1ccfc:	bne	1cd74 <__assert_fail@plt+0xace8>
   1cd00:	ldrd	r2, [r1, #88]	; 0x58
   1cd04:	ldrd	r4, [r0, #88]	; 0x58
   1cd08:	mov	r6, #0
   1cd0c:	cmp	r4, r2
   1cd10:	mov	r2, #0
   1cd14:	movwgt	r2, #1
   1cd18:	sublt	r2, r2, #1
   1cd1c:	cmp	r5, r3
   1cd20:	mov	r3, #0
   1cd24:	movwgt	r3, #1
   1cd28:	sublt	r3, r3, #1
   1cd2c:	add	r2, r3, r2, lsl #1
   1cd30:	cmp	r2, #0
   1cd34:	bne	1cd74 <__assert_fail@plt+0xace8>
   1cd38:	ldr	r4, [r0]
   1cd3c:	ldr	r5, [r1]
   1cd40:	bl	11ed0 <__errno_location@plt>
   1cd44:	str	r6, [r0]
   1cd48:	mov	r0, r5
   1cd4c:	mov	r1, r4
   1cd50:	pop	{r4, r5, r6, sl, fp, lr}
   1cd54:	b	11de0 <strcoll@plt>
   1cd58:	ldr	r2, [r0, #124]	; 0x7c
   1cd5c:	and	r2, r2, #61440	; 0xf000
   1cd60:	sub	r2, r2, #16384	; 0x4000
   1cd64:	clz	r2, r2
   1cd68:	lsr	r2, r2, #5
   1cd6c:	subs	r2, r3, r2
   1cd70:	beq	1cd00 <__assert_fail@plt+0xac74>
   1cd74:	mov	r0, r2
   1cd78:	pop	{r4, r5, r6, sl, fp, pc}
   1cd7c:	push	{r4, r5, r7, sl, fp, lr}
   1cd80:	add	fp, sp, #16
   1cd84:	ldr	r2, [r0, #88]	; 0x58
   1cd88:	ldr	r7, [r0, #92]	; 0x5c
   1cd8c:	ldrd	r4, [r1, #88]	; 0x58
   1cd90:	mov	r3, #0
   1cd94:	cmp	r4, r2
   1cd98:	mov	r2, #0
   1cd9c:	movwgt	r2, #1
   1cda0:	sublt	r2, r2, #1
   1cda4:	cmp	r5, r7
   1cda8:	movwgt	r3, #1
   1cdac:	sublt	r3, r3, #1
   1cdb0:	add	r2, r3, r2, lsl #1
   1cdb4:	cmp	r2, #0
   1cdb8:	movne	r0, r2
   1cdbc:	popne	{r4, r5, r7, sl, fp, pc}
   1cdc0:	ldr	r1, [r1]
   1cdc4:	ldr	r0, [r0]
   1cdc8:	pop	{r4, r5, r7, sl, fp, lr}
   1cdcc:	b	11bd0 <strcmp@plt>
   1cdd0:	ldr	r2, [r1, #120]	; 0x78
   1cdd4:	mov	ip, #1
   1cdd8:	mov	r3, #1
   1cddc:	cmp	r2, #3
   1cde0:	beq	1ce04 <__assert_fail@plt+0xad78>
   1cde4:	cmp	r2, #9
   1cde8:	mov	r3, #1
   1cdec:	beq	1ce04 <__assert_fail@plt+0xad78>
   1cdf0:	ldr	r2, [r1, #124]	; 0x7c
   1cdf4:	and	r2, r2, #61440	; 0xf000
   1cdf8:	sub	r2, r2, #16384	; 0x4000
   1cdfc:	clz	r2, r2
   1ce00:	lsr	r3, r2, #5
   1ce04:	ldr	r2, [r0, #120]	; 0x78
   1ce08:	cmp	r2, #3
   1ce0c:	cmpne	r2, #9
   1ce10:	bne	1ce6c <__assert_fail@plt+0xade0>
   1ce14:	subs	r2, r3, ip
   1ce18:	bne	1ce88 <__assert_fail@plt+0xadfc>
   1ce1c:	push	{r4, r5, r7, sl, fp, lr}
   1ce20:	add	fp, sp, #16
   1ce24:	ldr	r2, [r0, #88]	; 0x58
   1ce28:	ldr	r7, [r0, #92]	; 0x5c
   1ce2c:	ldrd	r4, [r1, #88]	; 0x58
   1ce30:	mov	r3, #0
   1ce34:	cmp	r4, r2
   1ce38:	mov	r2, #0
   1ce3c:	movwgt	r2, #1
   1ce40:	sublt	r2, r2, #1
   1ce44:	cmp	r5, r7
   1ce48:	movwgt	r3, #1
   1ce4c:	sublt	r3, r3, #1
   1ce50:	add	r2, r3, r2, lsl #1
   1ce54:	cmp	r2, #0
   1ce58:	pop	{r4, r5, r7, sl, fp, lr}
   1ce5c:	bne	1ce88 <__assert_fail@plt+0xadfc>
   1ce60:	ldr	r1, [r1]
   1ce64:	ldr	r0, [r0]
   1ce68:	b	11bd0 <strcmp@plt>
   1ce6c:	ldr	r2, [r0, #124]	; 0x7c
   1ce70:	and	r2, r2, #61440	; 0xf000
   1ce74:	sub	r2, r2, #16384	; 0x4000
   1ce78:	clz	r2, r2
   1ce7c:	lsr	ip, r2, #5
   1ce80:	subs	r2, r3, ip
   1ce84:	beq	1ce1c <__assert_fail@plt+0xad90>
   1ce88:	mov	r0, r2
   1ce8c:	bx	lr
   1ce90:	push	{r4, r5, r7, sl, fp, lr}
   1ce94:	add	fp, sp, #16
   1ce98:	ldr	r2, [r1, #88]	; 0x58
   1ce9c:	ldr	r7, [r1, #92]	; 0x5c
   1cea0:	ldrd	r4, [r0, #88]	; 0x58
   1cea4:	mov	r3, #0
   1cea8:	cmp	r4, r2
   1ceac:	mov	r2, #0
   1ceb0:	movwgt	r2, #1
   1ceb4:	sublt	r2, r2, #1
   1ceb8:	cmp	r5, r7
   1cebc:	movwgt	r3, #1
   1cec0:	sublt	r3, r3, #1
   1cec4:	add	r2, r3, r2, lsl #1
   1cec8:	cmp	r2, #0
   1cecc:	movne	r0, r2
   1ced0:	popne	{r4, r5, r7, sl, fp, pc}
   1ced4:	ldr	r2, [r0]
   1ced8:	ldr	r0, [r1]
   1cedc:	mov	r1, r2
   1cee0:	pop	{r4, r5, r7, sl, fp, lr}
   1cee4:	b	11bd0 <strcmp@plt>
   1cee8:	ldr	r2, [r1, #120]	; 0x78
   1ceec:	mov	ip, #1
   1cef0:	mov	r3, #1
   1cef4:	cmp	r2, #3
   1cef8:	beq	1cf1c <__assert_fail@plt+0xae90>
   1cefc:	cmp	r2, #9
   1cf00:	mov	r3, #1
   1cf04:	beq	1cf1c <__assert_fail@plt+0xae90>
   1cf08:	ldr	r2, [r1, #124]	; 0x7c
   1cf0c:	and	r2, r2, #61440	; 0xf000
   1cf10:	sub	r2, r2, #16384	; 0x4000
   1cf14:	clz	r2, r2
   1cf18:	lsr	r3, r2, #5
   1cf1c:	ldr	r2, [r0, #120]	; 0x78
   1cf20:	cmp	r2, #3
   1cf24:	cmpne	r2, #9
   1cf28:	bne	1cf88 <__assert_fail@plt+0xaefc>
   1cf2c:	subs	r2, r3, ip
   1cf30:	bne	1cfa4 <__assert_fail@plt+0xaf18>
   1cf34:	push	{r4, r5, r7, sl, fp, lr}
   1cf38:	add	fp, sp, #16
   1cf3c:	ldr	r2, [r1, #88]	; 0x58
   1cf40:	ldr	r7, [r1, #92]	; 0x5c
   1cf44:	ldrd	r4, [r0, #88]	; 0x58
   1cf48:	mov	r3, #0
   1cf4c:	cmp	r4, r2
   1cf50:	mov	r2, #0
   1cf54:	movwgt	r2, #1
   1cf58:	sublt	r2, r2, #1
   1cf5c:	cmp	r5, r7
   1cf60:	movwgt	r3, #1
   1cf64:	sublt	r3, r3, #1
   1cf68:	add	r2, r3, r2, lsl #1
   1cf6c:	cmp	r2, #0
   1cf70:	pop	{r4, r5, r7, sl, fp, lr}
   1cf74:	bne	1cfa4 <__assert_fail@plt+0xaf18>
   1cf78:	ldr	r2, [r0]
   1cf7c:	ldr	r0, [r1]
   1cf80:	mov	r1, r2
   1cf84:	b	11bd0 <strcmp@plt>
   1cf88:	ldr	r2, [r0, #124]	; 0x7c
   1cf8c:	and	r2, r2, #61440	; 0xf000
   1cf90:	sub	r2, r2, #16384	; 0x4000
   1cf94:	clz	r2, r2
   1cf98:	lsr	ip, r2, #5
   1cf9c:	subs	r2, r3, ip
   1cfa0:	beq	1cf34 <__assert_fail@plt+0xaea8>
   1cfa4:	mov	r0, r2
   1cfa8:	bx	lr
   1cfac:	push	{r4, r5, r6, sl, fp, lr}
   1cfb0:	add	fp, sp, #16
   1cfb4:	ldrd	r2, [r0, #96]	; 0x60
   1cfb8:	ldrd	r4, [r1, #96]	; 0x60
   1cfbc:	mov	r6, #0
   1cfc0:	cmp	r4, r2
   1cfc4:	mov	r2, #0
   1cfc8:	movwgt	r2, #1
   1cfcc:	sublt	r2, r2, #1
   1cfd0:	cmp	r5, r3
   1cfd4:	mov	r3, #0
   1cfd8:	movwgt	r3, #1
   1cfdc:	sublt	r3, r3, #1
   1cfe0:	add	r2, r3, r2, lsl #1
   1cfe4:	cmp	r2, #0
   1cfe8:	movne	r0, r2
   1cfec:	popne	{r4, r5, r6, sl, fp, pc}
   1cff0:	ldr	r4, [r1]
   1cff4:	ldr	r5, [r0]
   1cff8:	bl	11ed0 <__errno_location@plt>
   1cffc:	str	r6, [r0]
   1d000:	mov	r0, r5
   1d004:	mov	r1, r4
   1d008:	pop	{r4, r5, r6, sl, fp, lr}
   1d00c:	b	11de0 <strcoll@plt>
   1d010:	push	{r4, r5, r6, sl, fp, lr}
   1d014:	add	fp, sp, #16
   1d018:	ldr	r6, [r1, #120]	; 0x78
   1d01c:	mov	r2, #1
   1d020:	mov	r3, #1
   1d024:	cmp	r6, #3
   1d028:	beq	1d04c <__assert_fail@plt+0xafc0>
   1d02c:	cmp	r6, #9
   1d030:	mov	r3, #1
   1d034:	beq	1d04c <__assert_fail@plt+0xafc0>
   1d038:	ldr	r3, [r1, #124]	; 0x7c
   1d03c:	and	r3, r3, #61440	; 0xf000
   1d040:	sub	r3, r3, #16384	; 0x4000
   1d044:	clz	r3, r3
   1d048:	lsr	r3, r3, #5
   1d04c:	ldr	r6, [r0, #120]	; 0x78
   1d050:	cmp	r6, #3
   1d054:	cmpne	r6, #9
   1d058:	bne	1d0bc <__assert_fail@plt+0xb030>
   1d05c:	subs	r2, r3, r2
   1d060:	bne	1d0d8 <__assert_fail@plt+0xb04c>
   1d064:	ldrd	r2, [r0, #96]	; 0x60
   1d068:	ldrd	r4, [r1, #96]	; 0x60
   1d06c:	mov	r6, #0
   1d070:	cmp	r4, r2
   1d074:	mov	r2, #0
   1d078:	movwgt	r2, #1
   1d07c:	sublt	r2, r2, #1
   1d080:	cmp	r5, r3
   1d084:	mov	r3, #0
   1d088:	movwgt	r3, #1
   1d08c:	sublt	r3, r3, #1
   1d090:	add	r2, r3, r2, lsl #1
   1d094:	cmp	r2, #0
   1d098:	bne	1d0d8 <__assert_fail@plt+0xb04c>
   1d09c:	ldr	r4, [r1]
   1d0a0:	ldr	r5, [r0]
   1d0a4:	bl	11ed0 <__errno_location@plt>
   1d0a8:	str	r6, [r0]
   1d0ac:	mov	r0, r5
   1d0b0:	mov	r1, r4
   1d0b4:	pop	{r4, r5, r6, sl, fp, lr}
   1d0b8:	b	11de0 <strcoll@plt>
   1d0bc:	ldr	r2, [r0, #124]	; 0x7c
   1d0c0:	and	r2, r2, #61440	; 0xf000
   1d0c4:	sub	r2, r2, #16384	; 0x4000
   1d0c8:	clz	r2, r2
   1d0cc:	lsr	r2, r2, #5
   1d0d0:	subs	r2, r3, r2
   1d0d4:	beq	1d064 <__assert_fail@plt+0xafd8>
   1d0d8:	mov	r0, r2
   1d0dc:	pop	{r4, r5, r6, sl, fp, pc}
   1d0e0:	push	{r4, r5, r6, sl, fp, lr}
   1d0e4:	add	fp, sp, #16
   1d0e8:	ldrd	r2, [r1, #96]	; 0x60
   1d0ec:	ldrd	r4, [r0, #96]	; 0x60
   1d0f0:	mov	r6, #0
   1d0f4:	cmp	r4, r2
   1d0f8:	mov	r2, #0
   1d0fc:	movwgt	r2, #1
   1d100:	sublt	r2, r2, #1
   1d104:	cmp	r5, r3
   1d108:	mov	r3, #0
   1d10c:	movwgt	r3, #1
   1d110:	sublt	r3, r3, #1
   1d114:	add	r2, r3, r2, lsl #1
   1d118:	cmp	r2, #0
   1d11c:	movne	r0, r2
   1d120:	popne	{r4, r5, r6, sl, fp, pc}
   1d124:	ldr	r4, [r0]
   1d128:	ldr	r5, [r1]
   1d12c:	bl	11ed0 <__errno_location@plt>
   1d130:	str	r6, [r0]
   1d134:	mov	r0, r5
   1d138:	mov	r1, r4
   1d13c:	pop	{r4, r5, r6, sl, fp, lr}
   1d140:	b	11de0 <strcoll@plt>
   1d144:	push	{r4, r5, r6, sl, fp, lr}
   1d148:	add	fp, sp, #16
   1d14c:	ldr	r6, [r1, #120]	; 0x78
   1d150:	mov	r2, #1
   1d154:	mov	r3, #1
   1d158:	cmp	r6, #3
   1d15c:	beq	1d180 <__assert_fail@plt+0xb0f4>
   1d160:	cmp	r6, #9
   1d164:	mov	r3, #1
   1d168:	beq	1d180 <__assert_fail@plt+0xb0f4>
   1d16c:	ldr	r3, [r1, #124]	; 0x7c
   1d170:	and	r3, r3, #61440	; 0xf000
   1d174:	sub	r3, r3, #16384	; 0x4000
   1d178:	clz	r3, r3
   1d17c:	lsr	r3, r3, #5
   1d180:	ldr	r6, [r0, #120]	; 0x78
   1d184:	cmp	r6, #3
   1d188:	cmpne	r6, #9
   1d18c:	bne	1d1f0 <__assert_fail@plt+0xb164>
   1d190:	subs	r2, r3, r2
   1d194:	bne	1d20c <__assert_fail@plt+0xb180>
   1d198:	ldrd	r2, [r1, #96]	; 0x60
   1d19c:	ldrd	r4, [r0, #96]	; 0x60
   1d1a0:	mov	r6, #0
   1d1a4:	cmp	r4, r2
   1d1a8:	mov	r2, #0
   1d1ac:	movwgt	r2, #1
   1d1b0:	sublt	r2, r2, #1
   1d1b4:	cmp	r5, r3
   1d1b8:	mov	r3, #0
   1d1bc:	movwgt	r3, #1
   1d1c0:	sublt	r3, r3, #1
   1d1c4:	add	r2, r3, r2, lsl #1
   1d1c8:	cmp	r2, #0
   1d1cc:	bne	1d20c <__assert_fail@plt+0xb180>
   1d1d0:	ldr	r4, [r0]
   1d1d4:	ldr	r5, [r1]
   1d1d8:	bl	11ed0 <__errno_location@plt>
   1d1dc:	str	r6, [r0]
   1d1e0:	mov	r0, r5
   1d1e4:	mov	r1, r4
   1d1e8:	pop	{r4, r5, r6, sl, fp, lr}
   1d1ec:	b	11de0 <strcoll@plt>
   1d1f0:	ldr	r2, [r0, #124]	; 0x7c
   1d1f4:	and	r2, r2, #61440	; 0xf000
   1d1f8:	sub	r2, r2, #16384	; 0x4000
   1d1fc:	clz	r2, r2
   1d200:	lsr	r2, r2, #5
   1d204:	subs	r2, r3, r2
   1d208:	beq	1d198 <__assert_fail@plt+0xb10c>
   1d20c:	mov	r0, r2
   1d210:	pop	{r4, r5, r6, sl, fp, pc}
   1d214:	push	{r4, r5, r7, sl, fp, lr}
   1d218:	add	fp, sp, #16
   1d21c:	ldr	r2, [r0, #96]	; 0x60
   1d220:	ldr	r7, [r0, #100]	; 0x64
   1d224:	ldrd	r4, [r1, #96]	; 0x60
   1d228:	mov	r3, #0
   1d22c:	cmp	r4, r2
   1d230:	mov	r2, #0
   1d234:	movwgt	r2, #1
   1d238:	sublt	r2, r2, #1
   1d23c:	cmp	r5, r7
   1d240:	movwgt	r3, #1
   1d244:	sublt	r3, r3, #1
   1d248:	add	r2, r3, r2, lsl #1
   1d24c:	cmp	r2, #0
   1d250:	movne	r0, r2
   1d254:	popne	{r4, r5, r7, sl, fp, pc}
   1d258:	ldr	r1, [r1]
   1d25c:	ldr	r0, [r0]
   1d260:	pop	{r4, r5, r7, sl, fp, lr}
   1d264:	b	11bd0 <strcmp@plt>
   1d268:	ldr	r2, [r1, #120]	; 0x78
   1d26c:	mov	ip, #1
   1d270:	mov	r3, #1
   1d274:	cmp	r2, #3
   1d278:	beq	1d29c <__assert_fail@plt+0xb210>
   1d27c:	cmp	r2, #9
   1d280:	mov	r3, #1
   1d284:	beq	1d29c <__assert_fail@plt+0xb210>
   1d288:	ldr	r2, [r1, #124]	; 0x7c
   1d28c:	and	r2, r2, #61440	; 0xf000
   1d290:	sub	r2, r2, #16384	; 0x4000
   1d294:	clz	r2, r2
   1d298:	lsr	r3, r2, #5
   1d29c:	ldr	r2, [r0, #120]	; 0x78
   1d2a0:	cmp	r2, #3
   1d2a4:	cmpne	r2, #9
   1d2a8:	bne	1d304 <__assert_fail@plt+0xb278>
   1d2ac:	subs	r2, r3, ip
   1d2b0:	bne	1d320 <__assert_fail@plt+0xb294>
   1d2b4:	push	{r4, r5, r7, sl, fp, lr}
   1d2b8:	add	fp, sp, #16
   1d2bc:	ldr	r2, [r0, #96]	; 0x60
   1d2c0:	ldr	r7, [r0, #100]	; 0x64
   1d2c4:	ldrd	r4, [r1, #96]	; 0x60
   1d2c8:	mov	r3, #0
   1d2cc:	cmp	r4, r2
   1d2d0:	mov	r2, #0
   1d2d4:	movwgt	r2, #1
   1d2d8:	sublt	r2, r2, #1
   1d2dc:	cmp	r5, r7
   1d2e0:	movwgt	r3, #1
   1d2e4:	sublt	r3, r3, #1
   1d2e8:	add	r2, r3, r2, lsl #1
   1d2ec:	cmp	r2, #0
   1d2f0:	pop	{r4, r5, r7, sl, fp, lr}
   1d2f4:	bne	1d320 <__assert_fail@plt+0xb294>
   1d2f8:	ldr	r1, [r1]
   1d2fc:	ldr	r0, [r0]
   1d300:	b	11bd0 <strcmp@plt>
   1d304:	ldr	r2, [r0, #124]	; 0x7c
   1d308:	and	r2, r2, #61440	; 0xf000
   1d30c:	sub	r2, r2, #16384	; 0x4000
   1d310:	clz	r2, r2
   1d314:	lsr	ip, r2, #5
   1d318:	subs	r2, r3, ip
   1d31c:	beq	1d2b4 <__assert_fail@plt+0xb228>
   1d320:	mov	r0, r2
   1d324:	bx	lr
   1d328:	push	{r4, r5, r7, sl, fp, lr}
   1d32c:	add	fp, sp, #16
   1d330:	ldr	r2, [r1, #96]	; 0x60
   1d334:	ldr	r7, [r1, #100]	; 0x64
   1d338:	ldrd	r4, [r0, #96]	; 0x60
   1d33c:	mov	r3, #0
   1d340:	cmp	r4, r2
   1d344:	mov	r2, #0
   1d348:	movwgt	r2, #1
   1d34c:	sublt	r2, r2, #1
   1d350:	cmp	r5, r7
   1d354:	movwgt	r3, #1
   1d358:	sublt	r3, r3, #1
   1d35c:	add	r2, r3, r2, lsl #1
   1d360:	cmp	r2, #0
   1d364:	movne	r0, r2
   1d368:	popne	{r4, r5, r7, sl, fp, pc}
   1d36c:	ldr	r2, [r0]
   1d370:	ldr	r0, [r1]
   1d374:	mov	r1, r2
   1d378:	pop	{r4, r5, r7, sl, fp, lr}
   1d37c:	b	11bd0 <strcmp@plt>
   1d380:	ldr	r2, [r1, #120]	; 0x78
   1d384:	mov	ip, #1
   1d388:	mov	r3, #1
   1d38c:	cmp	r2, #3
   1d390:	beq	1d3b4 <__assert_fail@plt+0xb328>
   1d394:	cmp	r2, #9
   1d398:	mov	r3, #1
   1d39c:	beq	1d3b4 <__assert_fail@plt+0xb328>
   1d3a0:	ldr	r2, [r1, #124]	; 0x7c
   1d3a4:	and	r2, r2, #61440	; 0xf000
   1d3a8:	sub	r2, r2, #16384	; 0x4000
   1d3ac:	clz	r2, r2
   1d3b0:	lsr	r3, r2, #5
   1d3b4:	ldr	r2, [r0, #120]	; 0x78
   1d3b8:	cmp	r2, #3
   1d3bc:	cmpne	r2, #9
   1d3c0:	bne	1d420 <__assert_fail@plt+0xb394>
   1d3c4:	subs	r2, r3, ip
   1d3c8:	bne	1d43c <__assert_fail@plt+0xb3b0>
   1d3cc:	push	{r4, r5, r7, sl, fp, lr}
   1d3d0:	add	fp, sp, #16
   1d3d4:	ldr	r2, [r1, #96]	; 0x60
   1d3d8:	ldr	r7, [r1, #100]	; 0x64
   1d3dc:	ldrd	r4, [r0, #96]	; 0x60
   1d3e0:	mov	r3, #0
   1d3e4:	cmp	r4, r2
   1d3e8:	mov	r2, #0
   1d3ec:	movwgt	r2, #1
   1d3f0:	sublt	r2, r2, #1
   1d3f4:	cmp	r5, r7
   1d3f8:	movwgt	r3, #1
   1d3fc:	sublt	r3, r3, #1
   1d400:	add	r2, r3, r2, lsl #1
   1d404:	cmp	r2, #0
   1d408:	pop	{r4, r5, r7, sl, fp, lr}
   1d40c:	bne	1d43c <__assert_fail@plt+0xb3b0>
   1d410:	ldr	r2, [r0]
   1d414:	ldr	r0, [r1]
   1d418:	mov	r1, r2
   1d41c:	b	11bd0 <strcmp@plt>
   1d420:	ldr	r2, [r0, #124]	; 0x7c
   1d424:	and	r2, r2, #61440	; 0xf000
   1d428:	sub	r2, r2, #16384	; 0x4000
   1d42c:	clz	r2, r2
   1d430:	lsr	ip, r2, #5
   1d434:	subs	r2, r3, ip
   1d438:	beq	1d3cc <__assert_fail@plt+0xb340>
   1d43c:	mov	r0, r2
   1d440:	bx	lr
   1d444:	push	{r4, r5, fp, lr}
   1d448:	add	fp, sp, #8
   1d44c:	mov	r4, r1
   1d450:	mov	r5, r0
   1d454:	bl	11ed0 <__errno_location@plt>
   1d458:	mov	r1, #0
   1d45c:	str	r1, [r0]
   1d460:	mov	r0, r5
   1d464:	mov	r1, r4
   1d468:	pop	{r4, r5, fp, lr}
   1d46c:	b	11de0 <strcoll@plt>
   1d470:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d474:	add	fp, sp, #24
   1d478:	sub	sp, sp, #24
   1d47c:	sub	sp, sp, #8192	; 0x2000
   1d480:	ldr	r4, [r0, #148]	; 0x94
   1d484:	mov	r8, r2
   1d488:	mov	r6, r1
   1d48c:	mov	r5, r0
   1d490:	cmp	r4, #0
   1d494:	bne	1d4f0 <__assert_fail@plt+0xb464>
   1d498:	movw	r0, #62468	; 0xf404
   1d49c:	ldr	r7, [r5]
   1d4a0:	ldr	r3, [r5, #144]	; 0x90
   1d4a4:	sub	r1, fp, #36	; 0x24
   1d4a8:	add	r4, sp, #11
   1d4ac:	movt	r0, #3
   1d4b0:	str	r1, [sp]
   1d4b4:	str	r4, [fp, #-32]	; 0xffffffe0
   1d4b8:	ldr	r2, [r0]
   1d4bc:	sub	r0, fp, #37	; 0x25
   1d4c0:	str	r0, [sp, #4]
   1d4c4:	sub	r0, fp, #32
   1d4c8:	mov	r1, r7
   1d4cc:	bl	1aa38 <__assert_fail@plt+0x89ac>
   1d4d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d4d4:	cmp	r0, r4
   1d4d8:	cmpne	r0, r7
   1d4dc:	beq	1d4e4 <__assert_fail@plt+0xb458>
   1d4e0:	bl	2046c <__assert_fail@plt+0xe3e0>
   1d4e4:	ldrb	r0, [fp, #-37]	; 0xffffffdb
   1d4e8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1d4ec:	add	r4, r1, r0
   1d4f0:	ldr	r0, [r6, #148]	; 0x94
   1d4f4:	cmp	r0, #0
   1d4f8:	beq	1d50c <__assert_fail@plt+0xb480>
   1d4fc:	subs	r0, r4, r0
   1d500:	beq	1d56c <__assert_fail@plt+0xb4e0>
   1d504:	sub	sp, fp, #24
   1d508:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d50c:	movw	r0, #62468	; 0xf404
   1d510:	ldr	r7, [r6]
   1d514:	ldr	r3, [r6, #144]	; 0x90
   1d518:	sub	r1, fp, #36	; 0x24
   1d51c:	add	r9, sp, #11
   1d520:	movt	r0, #3
   1d524:	str	r1, [sp]
   1d528:	str	r9, [fp, #-32]	; 0xffffffe0
   1d52c:	ldr	r2, [r0]
   1d530:	sub	r0, fp, #37	; 0x25
   1d534:	str	r0, [sp, #4]
   1d538:	sub	r0, fp, #32
   1d53c:	mov	r1, r7
   1d540:	bl	1aa38 <__assert_fail@plt+0x89ac>
   1d544:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d548:	cmp	r0, r9
   1d54c:	cmpne	r0, r7
   1d550:	beq	1d558 <__assert_fail@plt+0xb4cc>
   1d554:	bl	2046c <__assert_fail@plt+0xe3e0>
   1d558:	ldrb	r0, [fp, #-37]	; 0xffffffdb
   1d55c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1d560:	add	r0, r1, r0
   1d564:	subs	r0, r4, r0
   1d568:	bne	1d504 <__assert_fail@plt+0xb478>
   1d56c:	ldr	r1, [r6]
   1d570:	ldr	r0, [r5]
   1d574:	blx	r8
   1d578:	sub	sp, fp, #24
   1d57c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d580:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d584:	add	fp, sp, #24
   1d588:	sub	sp, sp, #672	; 0x2a0
   1d58c:	mov	r4, r0
   1d590:	movw	r0, #62252	; 0xf32c
   1d594:	mov	r9, r1
   1d598:	movt	r0, #3
   1d59c:	ldrb	r0, [r0]
   1d5a0:	cmp	r0, #0
   1d5a4:	beq	1d740 <__assert_fail@plt+0xb6b4>
   1d5a8:	movw	r6, #61896	; 0xf1c8
   1d5ac:	movt	r6, #3
   1d5b0:	ldr	r1, [r6, #32]
   1d5b4:	cmp	r1, #0
   1d5b8:	beq	1d740 <__assert_fail@plt+0xb6b4>
   1d5bc:	ldr	r0, [r6, #36]	; 0x24
   1d5c0:	cmp	r1, #2
   1d5c4:	beq	1d5e0 <__assert_fail@plt+0xb554>
   1d5c8:	cmp	r1, #1
   1d5cc:	bne	1d5f8 <__assert_fail@plt+0xb56c>
   1d5d0:	ldrb	r0, [r0]
   1d5d4:	cmp	r0, #48	; 0x30
   1d5d8:	bne	1d5f8 <__assert_fail@plt+0xb56c>
   1d5dc:	b	1d740 <__assert_fail@plt+0xb6b4>
   1d5e0:	movw	r1, #48056	; 0xbbb8
   1d5e4:	mov	r2, #2
   1d5e8:	movt	r1, #2
   1d5ec:	bl	1202c <strncmp@plt>
   1d5f0:	cmp	r0, #0
   1d5f4:	beq	1d740 <__assert_fail@plt+0xb6b4>
   1d5f8:	movw	r7, #62456	; 0xf3f8
   1d5fc:	movt	r7, #3
   1d600:	ldrb	r0, [r7]
   1d604:	cmp	r0, #0
   1d608:	bne	1d654 <__assert_fail@plt+0xb5c8>
   1d60c:	mov	r0, #1
   1d610:	strb	r0, [r7]
   1d614:	mov	r0, #1
   1d618:	bl	11ea0 <tcgetpgrp@plt>
   1d61c:	cmp	r0, #0
   1d620:	movge	r0, #1
   1d624:	blge	18e14 <__assert_fail@plt+0x6d88>
   1d628:	ldr	r0, [r6, #20]
   1d62c:	cmp	r0, #0
   1d630:	beq	1d63c <__assert_fail@plt+0xb5b0>
   1d634:	add	r0, r6, #16
   1d638:	b	1d650 <__assert_fail@plt+0xb5c4>
   1d63c:	mov	r0, r6
   1d640:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1d644:	add	r0, r6, #24
   1d648:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1d64c:	add	r0, r6, #8
   1d650:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1d654:	movw	r8, #62220	; 0xf30c
   1d658:	ldr	r1, [r6]
   1d65c:	ldr	r0, [r6, #4]
   1d660:	mov	r2, #1
   1d664:	mov	r5, #1
   1d668:	movt	r8, #3
   1d66c:	ldr	r3, [r8]
   1d670:	bl	11c90 <fwrite_unlocked@plt>
   1d674:	ldrb	r0, [r7]
   1d678:	cmp	r0, #0
   1d67c:	bne	1d6c4 <__assert_fail@plt+0xb638>
   1d680:	mov	r0, #1
   1d684:	strb	r5, [r7]
   1d688:	bl	11ea0 <tcgetpgrp@plt>
   1d68c:	cmp	r0, #0
   1d690:	movge	r0, #1
   1d694:	blge	18e14 <__assert_fail@plt+0x6d88>
   1d698:	ldr	r0, [r6, #20]
   1d69c:	cmp	r0, #0
   1d6a0:	beq	1d6ac <__assert_fail@plt+0xb620>
   1d6a4:	add	r0, r6, #16
   1d6a8:	b	1d6c0 <__assert_fail@plt+0xb634>
   1d6ac:	mov	r0, r6
   1d6b0:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1d6b4:	add	r0, r6, #24
   1d6b8:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1d6bc:	add	r0, r6, #8
   1d6c0:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1d6c4:	ldr	r3, [r8]
   1d6c8:	ldr	r1, [r6, #32]
   1d6cc:	ldr	r0, [r6, #36]	; 0x24
   1d6d0:	mov	r2, #1
   1d6d4:	mov	r5, #1
   1d6d8:	bl	11c90 <fwrite_unlocked@plt>
   1d6dc:	ldrb	r0, [r7]
   1d6e0:	cmp	r0, #0
   1d6e4:	bne	1d72c <__assert_fail@plt+0xb6a0>
   1d6e8:	mov	r0, #1
   1d6ec:	strb	r5, [r7]
   1d6f0:	bl	11ea0 <tcgetpgrp@plt>
   1d6f4:	cmp	r0, #0
   1d6f8:	movge	r0, #1
   1d6fc:	blge	18e14 <__assert_fail@plt+0x6d88>
   1d700:	ldr	r0, [r6, #20]
   1d704:	cmp	r0, #0
   1d708:	beq	1d714 <__assert_fail@plt+0xb688>
   1d70c:	add	r0, r6, #16
   1d710:	b	1d728 <__assert_fail@plt+0xb69c>
   1d714:	mov	r0, r6
   1d718:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1d71c:	add	r0, r6, #24
   1d720:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1d724:	add	r0, r6, #8
   1d728:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1d72c:	ldr	r3, [r8]
   1d730:	ldr	r1, [r6, #8]
   1d734:	ldr	r0, [r6, #12]
   1d738:	mov	r2, #1
   1d73c:	bl	11c90 <fwrite_unlocked@plt>
   1d740:	movw	r0, #62896	; 0xf5b0
   1d744:	movt	r0, #3
   1d748:	ldrb	r0, [r0]
   1d74c:	cmp	r0, #1
   1d750:	bne	1d7b0 <__assert_fail@plt+0xb724>
   1d754:	movw	r1, #62264	; 0xf338
   1d758:	movw	r0, #492	; 0x1ec
   1d75c:	movw	r3, #49498	; 0xc15a
   1d760:	movt	r1, #3
   1d764:	movt	r0, #4
   1d768:	movt	r3, #2
   1d76c:	ldr	r1, [r1]
   1d770:	ldr	r0, [r0]
   1d774:	subs	r6, r1, #4
   1d778:	movne	r6, r0
   1d77c:	ldrb	r0, [r4, #132]	; 0x84
   1d780:	cmp	r0, #0
   1d784:	ldrdne	r0, [r4, #112]	; 0x70
   1d788:	orrsne	r2, r0, r1
   1d78c:	beq	1d79c <__assert_fail@plt+0xb710>
   1d790:	add	r2, sp, #16
   1d794:	bl	227b0 <__assert_fail@plt+0x10724>
   1d798:	mov	r3, r0
   1d79c:	movw	r1, #49994	; 0xc34a
   1d7a0:	mov	r0, #1
   1d7a4:	mov	r2, r6
   1d7a8:	movt	r1, #2
   1d7ac:	bl	11f00 <__printf_chk@plt>
   1d7b0:	movw	r0, #62341	; 0xf385
   1d7b4:	movt	r0, #3
   1d7b8:	ldrb	r0, [r0]
   1d7bc:	cmp	r0, #1
   1d7c0:	bne	1d84c <__assert_fail@plt+0xb7c0>
   1d7c4:	movw	r1, #62264	; 0xf338
   1d7c8:	movw	r0, #496	; 0x1f0
   1d7cc:	movt	r1, #3
   1d7d0:	movt	r0, #4
   1d7d4:	ldr	r1, [r1]
   1d7d8:	ldr	r0, [r0]
   1d7dc:	subs	r6, r1, #4
   1d7e0:	movne	r6, r0
   1d7e4:	ldrb	r0, [r4, #132]	; 0x84
   1d7e8:	cmp	r0, #0
   1d7ec:	beq	1d830 <__assert_fail@plt+0xb7a4>
   1d7f0:	movw	r2, #62876	; 0xf59c
   1d7f4:	ldrd	r0, [r4, #80]	; 0x50
   1d7f8:	mov	ip, #0
   1d7fc:	mov	r7, #512	; 0x200
   1d800:	movt	r2, #3
   1d804:	ldr	r3, [r2]
   1d808:	movw	r2, #62888	; 0xf5a8
   1d80c:	movt	r2, #3
   1d810:	ldm	r2, {r2, r5}
   1d814:	stm	sp, {r7, ip}
   1d818:	str	r2, [sp, #8]
   1d81c:	add	r2, sp, #16
   1d820:	str	r5, [sp, #12]
   1d824:	bl	21880 <__assert_fail@plt+0xf7f4>
   1d828:	mov	r3, r0
   1d82c:	b	1d838 <__assert_fail@plt+0xb7ac>
   1d830:	movw	r3, #49498	; 0xc15a
   1d834:	movt	r3, #2
   1d838:	movw	r1, #49994	; 0xc34a
   1d83c:	mov	r0, #1
   1d840:	mov	r2, r6
   1d844:	movt	r1, #2
   1d848:	bl	11f00 <__printf_chk@plt>
   1d84c:	movw	r0, #62340	; 0xf384
   1d850:	movt	r0, #3
   1d854:	ldrb	r0, [r0]
   1d858:	cmp	r0, #1
   1d85c:	bne	1d894 <__assert_fail@plt+0xb808>
   1d860:	movw	r1, #62264	; 0xf338
   1d864:	movw	r0, #516	; 0x204
   1d868:	ldr	r3, [r4, #128]	; 0x80
   1d86c:	movt	r1, #3
   1d870:	movt	r0, #4
   1d874:	ldr	r1, [r1]
   1d878:	ldr	r0, [r0]
   1d87c:	subs	r2, r1, #4
   1d880:	movw	r1, #49994	; 0xc34a
   1d884:	movne	r2, r0
   1d888:	movt	r1, #2
   1d88c:	mov	r0, #1
   1d890:	bl	11f00 <__printf_chk@plt>
   1d894:	mov	r0, r4
   1d898:	mov	r1, #0
   1d89c:	mov	r2, #0
   1d8a0:	mov	r3, r9
   1d8a4:	bl	1db6c <__assert_fail@plt+0xbae0>
   1d8a8:	movw	r0, #62276	; 0xf344
   1d8ac:	movt	r0, #3
   1d8b0:	ldr	r2, [r0]
   1d8b4:	cmp	r2, #0
   1d8b8:	beq	1d98c <__assert_fail@plt+0xb900>
   1d8bc:	ldrb	r7, [r4, #132]	; 0x84
   1d8c0:	ldr	r3, [r4, #32]
   1d8c4:	ldr	r0, [r4, #120]	; 0x78
   1d8c8:	cmp	r7, #0
   1d8cc:	beq	1d8fc <__assert_fail@plt+0xb870>
   1d8d0:	and	r1, r3, #61440	; 0xf000
   1d8d4:	cmp	r1, #16384	; 0x4000
   1d8d8:	beq	1d948 <__assert_fail@plt+0xb8bc>
   1d8dc:	cmp	r1, #32768	; 0x8000
   1d8e0:	bne	1d918 <__assert_fail@plt+0xb88c>
   1d8e4:	tst	r3, #73	; 0x49
   1d8e8:	beq	1d98c <__assert_fail@plt+0xb900>
   1d8ec:	mov	r1, #42	; 0x2a
   1d8f0:	cmp	r2, #3
   1d8f4:	beq	1d94c <__assert_fail@plt+0xb8c0>
   1d8f8:	b	1d98c <__assert_fail@plt+0xb900>
   1d8fc:	mov	r1, #47	; 0x2f
   1d900:	cmp	r0, #3
   1d904:	beq	1d94c <__assert_fail@plt+0xb8c0>
   1d908:	cmp	r0, #5
   1d90c:	beq	1d98c <__assert_fail@plt+0xb900>
   1d910:	cmp	r0, #9
   1d914:	beq	1d94c <__assert_fail@plt+0xb8c0>
   1d918:	cmp	r2, #1
   1d91c:	beq	1d98c <__assert_fail@plt+0xb900>
   1d920:	cmp	r7, #0
   1d924:	beq	1d994 <__assert_fail@plt+0xb908>
   1d928:	and	r0, r3, #61440	; 0xf000
   1d92c:	cmp	r0, #4096	; 0x1000
   1d930:	beq	1d9ac <__assert_fail@plt+0xb920>
   1d934:	cmp	r0, #40960	; 0xa000
   1d938:	beq	1d9bc <__assert_fail@plt+0xb930>
   1d93c:	cmp	r0, #49152	; 0xc000
   1d940:	bne	1d98c <__assert_fail@plt+0xb900>
   1d944:	b	1d9b4 <__assert_fail@plt+0xb928>
   1d948:	mov	r1, #47	; 0x2f
   1d94c:	movw	r0, #62728	; 0xf508
   1d950:	movt	r0, #3
   1d954:	ldrd	r2, [r0]
   1d958:	adds	r2, r2, #1
   1d95c:	adc	r3, r3, #0
   1d960:	strd	r2, [r0]
   1d964:	movw	r0, #62220	; 0xf30c
   1d968:	movt	r0, #3
   1d96c:	ldr	r0, [r0]
   1d970:	ldr	r2, [r0, #20]
   1d974:	ldr	r3, [r0, #24]
   1d978:	cmp	r2, r3
   1d97c:	bcs	1d9c4 <__assert_fail@plt+0xb938>
   1d980:	add	r3, r2, #1
   1d984:	str	r3, [r0, #20]
   1d988:	strb	r1, [r2]
   1d98c:	sub	sp, fp, #24
   1d990:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d994:	cmp	r0, #7
   1d998:	beq	1d9b4 <__assert_fail@plt+0xb928>
   1d99c:	cmp	r0, #6
   1d9a0:	beq	1d9bc <__assert_fail@plt+0xb930>
   1d9a4:	cmp	r0, #1
   1d9a8:	bne	1d98c <__assert_fail@plt+0xb900>
   1d9ac:	mov	r1, #124	; 0x7c
   1d9b0:	b	1d94c <__assert_fail@plt+0xb8c0>
   1d9b4:	mov	r1, #61	; 0x3d
   1d9b8:	b	1d94c <__assert_fail@plt+0xb8c0>
   1d9bc:	mov	r1, #64	; 0x40
   1d9c0:	b	1d94c <__assert_fail@plt+0xb8c0>
   1d9c4:	bl	11f54 <__overflow@plt>
   1d9c8:	sub	sp, fp, #24
   1d9cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d9d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d9d4:	add	fp, sp, #28
   1d9d8:	push	{r0}		; (str r0, [sp, #-4]!)
   1d9dc:	movw	r0, #62452	; 0xf3f4
   1d9e0:	movt	r0, #3
   1d9e4:	ldr	r0, [r0]
   1d9e8:	cmp	r0, #0
   1d9ec:	beq	1db1c <__assert_fail@plt+0xba90>
   1d9f0:	movw	r9, #62912	; 0xf5c0
   1d9f4:	mov	r5, #0
   1d9f8:	mov	r7, #0
   1d9fc:	movt	r9, #3
   1da00:	b	1da1c <__assert_fail@plt+0xb990>
   1da04:	ldr	r1, [sp]
   1da08:	bl	11f54 <__overflow@plt>
   1da0c:	b	1dac4 <__assert_fail@plt+0xba38>
   1da10:	mov	r1, r4
   1da14:	bl	11f54 <__overflow@plt>
   1da18:	b	1daf4 <__assert_fail@plt+0xba68>
   1da1c:	movw	r0, #484	; 0x1e4
   1da20:	mov	r6, #0
   1da24:	movt	r0, #4
   1da28:	ldr	r0, [r0]
   1da2c:	ldr	sl, [r0, r5, lsl #2]
   1da30:	ldr	r0, [r9]
   1da34:	cmp	r0, #0
   1da38:	beq	1da48 <__assert_fail@plt+0xb9bc>
   1da3c:	mov	r0, sl
   1da40:	bl	1e3b8 <__assert_fail@plt+0xc32c>
   1da44:	mov	r6, r0
   1da48:	cmp	r5, #0
   1da4c:	beq	1daf0 <__assert_fail@plt+0xba64>
   1da50:	ldr	r0, [r9]
   1da54:	add	r8, r7, #2
   1da58:	mov	r4, #32
   1da5c:	cmp	r0, #0
   1da60:	beq	1da98 <__assert_fail@plt+0xba0c>
   1da64:	mvn	r1, #2
   1da68:	sub	r1, r1, r6
   1da6c:	cmp	r7, r1
   1da70:	addls	r1, r8, r6
   1da74:	cmpls	r1, r0
   1da78:	bcc	1da98 <__assert_fail@plt+0xba0c>
   1da7c:	movw	r0, #62908	; 0xf5bc
   1da80:	mov	r4, #10
   1da84:	mov	r8, #0
   1da88:	movt	r0, #3
   1da8c:	ldrb	r0, [r0]
   1da90:	cmp	r0, #0
   1da94:	movwne	r4, #0
   1da98:	movw	r0, #62220	; 0xf30c
   1da9c:	movt	r0, #3
   1daa0:	ldr	r0, [r0]
   1daa4:	ldr	r1, [r0, #20]
   1daa8:	ldr	r2, [r0, #24]
   1daac:	cmp	r1, r2
   1dab0:	bcs	1da04 <__assert_fail@plt+0xb978>
   1dab4:	add	r2, r1, #1
   1dab8:	str	r2, [r0, #20]
   1dabc:	ldr	r0, [sp]
   1dac0:	strb	r0, [r1]
   1dac4:	movw	r0, #62220	; 0xf30c
   1dac8:	movt	r0, #3
   1dacc:	ldr	r0, [r0]
   1dad0:	ldr	r1, [r0, #20]
   1dad4:	ldr	r2, [r0, #24]
   1dad8:	cmp	r1, r2
   1dadc:	bcs	1da10 <__assert_fail@plt+0xb984>
   1dae0:	add	r2, r1, #1
   1dae4:	str	r2, [r0, #20]
   1dae8:	strb	r4, [r1]
   1daec:	b	1daf4 <__assert_fail@plt+0xba68>
   1daf0:	mov	r8, r7
   1daf4:	mov	r0, sl
   1daf8:	mov	r1, r8
   1dafc:	bl	1d580 <__assert_fail@plt+0xb4f4>
   1db00:	movw	r0, #62452	; 0xf3f4
   1db04:	add	r5, r5, #1
   1db08:	add	r7, r8, r6
   1db0c:	movt	r0, #3
   1db10:	ldr	r0, [r0]
   1db14:	cmp	r5, r0
   1db18:	bcc	1da1c <__assert_fail@plt+0xb990>
   1db1c:	movw	r0, #62908	; 0xf5bc
   1db20:	mov	r1, #10
   1db24:	movt	r0, #3
   1db28:	ldrb	r0, [r0]
   1db2c:	cmp	r0, #0
   1db30:	movw	r0, #62220	; 0xf30c
   1db34:	movt	r0, #3
   1db38:	movwne	r1, #0
   1db3c:	ldr	r0, [r0]
   1db40:	ldr	r2, [r0, #20]
   1db44:	ldr	r3, [r0, #24]
   1db48:	cmp	r2, r3
   1db4c:	addcc	r3, r2, #1
   1db50:	strcc	r3, [r0, #20]
   1db54:	strbcc	r1, [r2]
   1db58:	subcc	sp, fp, #28
   1db5c:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db60:	sub	sp, fp, #28
   1db64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db68:	b	11f54 <__overflow@plt>
   1db6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db70:	add	fp, sp, #28
   1db74:	sub	sp, sp, #28
   1db78:	cmp	r1, #0
   1db7c:	mov	r9, r0
   1db80:	mov	r8, r3
   1db84:	mov	r4, r2
   1db88:	mov	r7, r1
   1db8c:	addne	r0, r0, #4
   1db90:	ldr	r6, [r0]
   1db94:	movw	r0, #62252	; 0xf32c
   1db98:	movt	r0, #3
   1db9c:	ldrb	r0, [r0]
   1dba0:	cmp	r0, #0
   1dba4:	beq	1e14c <__assert_fail@plt+0xc0c0>
   1dba8:	cmp	r7, #0
   1dbac:	str	r6, [sp, #16]
   1dbb0:	str	r7, [sp, #12]
   1dbb4:	str	r8, [sp, #24]
   1dbb8:	str	r4, [sp, #20]
   1dbbc:	beq	1dc1c <__assert_fail@plt+0xbb90>
   1dbc0:	ldrb	r0, [r9, #133]	; 0x85
   1dbc4:	ldr	r6, [r9, #4]
   1dbc8:	ldr	r7, [r9, #124]	; 0x7c
   1dbcc:	mov	sl, #0
   1dbd0:	cmp	r0, #0
   1dbd4:	bne	1dc48 <__assert_fail@plt+0xbbbc>
   1dbd8:	movw	r0, #61896	; 0xf1c8
   1dbdc:	mvn	sl, #0
   1dbe0:	movt	r0, #3
   1dbe4:	ldr	r1, [r0, #96]	; 0x60
   1dbe8:	cmp	r1, #0
   1dbec:	beq	1dc48 <__assert_fail@plt+0xbbbc>
   1dbf0:	ldr	r0, [r0, #100]	; 0x64
   1dbf4:	mov	r4, #12
   1dbf8:	mov	r8, #0
   1dbfc:	cmp	r1, #2
   1dc00:	beq	1de18 <__assert_fail@plt+0xbd8c>
   1dc04:	cmp	r1, #1
   1dc08:	bne	1e0c8 <__assert_fail@plt+0xc03c>
   1dc0c:	ldrb	r0, [r0]
   1dc10:	cmp	r0, #48	; 0x30
   1dc14:	beq	1dc48 <__assert_fail@plt+0xbbbc>
   1dc18:	b	1e0c8 <__assert_fail@plt+0xc03c>
   1dc1c:	movw	r0, #62262	; 0xf336
   1dc20:	ldrb	sl, [r9, #133]	; 0x85
   1dc24:	mov	r1, #32
   1dc28:	ldr	r6, [r9]
   1dc2c:	movt	r0, #3
   1dc30:	ldrb	r0, [r0]
   1dc34:	cmp	r0, #0
   1dc38:	movwne	r1, #124	; 0x7c
   1dc3c:	cmp	sl, #0
   1dc40:	movweq	r1, #32
   1dc44:	ldr	r7, [r9, r1]
   1dc48:	ldrb	r0, [r9, #132]	; 0x84
   1dc4c:	cmp	r0, #0
   1dc50:	beq	1dcb4 <__assert_fail@plt+0xbc28>
   1dc54:	and	r0, r7, #61440	; 0xf000
   1dc58:	mov	r8, #0
   1dc5c:	sub	r0, r0, #4096	; 0x1000
   1dc60:	lsr	r1, r0, #12
   1dc64:	cmp	r1, #11
   1dc68:	bhi	1dd54 <__assert_fail@plt+0xbcc8>
   1dc6c:	add	r2, pc, #8
   1dc70:	mov	r4, #8
   1dc74:	mov	r0, #7
   1dc78:	ldr	pc, [r2, r1, lsl #2]
   1dc7c:	andeq	lr, r1, r8, asr #1
   1dc80:	andeq	sp, r1, ip, lsr #25
   1dc84:	andeq	sp, r1, r4, asr sp
   1dc88:	andeq	sp, r1, r4, ror #26
   1dc8c:	andeq	sp, r1, r4, asr sp
   1dc90:			; <UNDEFINED> instruction: 0x0001ddbc
   1dc94:	andeq	sp, r1, r4, asr sp
   1dc98:	andeq	sp, r1, r4, asr #27
   1dc9c:	andeq	sp, r1, r4, asr sp
   1dca0:	andeq	sp, r1, ip, lsr #26
   1dca4:	andeq	sp, r1, r4, asr sp
   1dca8:	andeq	sp, r1, r8, lsl #28
   1dcac:	mov	r4, #11
   1dcb0:	b	1e0c8 <__assert_fail@plt+0xc03c>
   1dcb4:	ldr	r0, [r9, #120]	; 0x78
   1dcb8:	cmp	r0, #8
   1dcbc:	cmpne	r0, #5
   1dcc0:	bne	1dd20 <__assert_fail@plt+0xbc94>
   1dcc4:	mov	r0, r6
   1dcc8:	bl	11eac <strlen@plt>
   1dccc:	mov	r7, r0
   1dcd0:	movw	r0, #476	; 0x1dc
   1dcd4:	mov	r4, #5
   1dcd8:	mov	r8, #0
   1dcdc:	movt	r0, #4
   1dce0:	ldr	r5, [r0]
   1dce4:	cmp	r5, #0
   1dce8:	beq	1e0c8 <__assert_fail@plt+0xc03c>
   1dcec:	add	r6, r6, r7
   1dcf0:	ldr	r2, [r5]
   1dcf4:	cmp	r2, r7
   1dcf8:	bhi	1dd10 <__assert_fail@plt+0xbc84>
   1dcfc:	ldr	r1, [r5, #4]
   1dd00:	sub	r0, r6, r2
   1dd04:	bl	1f368 <__assert_fail@plt+0xd2dc>
   1dd08:	cmp	r0, #0
   1dd0c:	beq	1de10 <__assert_fail@plt+0xbd84>
   1dd10:	ldr	r5, [r5, #16]
   1dd14:	cmp	r5, #0
   1dd18:	bne	1dcf0 <__assert_fail@plt+0xbc64>
   1dd1c:	b	1e0c8 <__assert_fail@plt+0xc03c>
   1dd20:	movw	r1, #56404	; 0xdc54
   1dd24:	movt	r1, #2
   1dd28:	ldr	r0, [r1, r0, lsl #2]
   1dd2c:	mov	r8, #0
   1dd30:	cmp	sl, #0
   1dd34:	bne	1dd5c <__assert_fail@plt+0xbcd0>
   1dd38:	cmp	r0, #7
   1dd3c:	bne	1dd5c <__assert_fail@plt+0xbcd0>
   1dd40:	movw	r0, #62262	; 0xf336
   1dd44:	movt	r0, #3
   1dd48:	ldrb	r0, [r0]
   1dd4c:	cmp	r0, #0
   1dd50:	beq	1de34 <__assert_fail@plt+0xbda8>
   1dd54:	mov	r4, #13
   1dd58:	b	1e0c8 <__assert_fail@plt+0xc03c>
   1dd5c:	mov	r4, r0
   1dd60:	b	1e0c8 <__assert_fail@plt+0xc03c>
   1dd64:	and	r5, r7, #512	; 0x200
   1dd68:	mov	r0, #1
   1dd6c:	ands	r7, r7, #2
   1dd70:	eor	sl, r0, r5, lsr #9
   1dd74:	beq	1dea4 <__assert_fail@plt+0xbe18>
   1dd78:	cmp	sl, #0
   1dd7c:	bne	1dea4 <__assert_fail@plt+0xbe18>
   1dd80:	movw	r0, #61896	; 0xf1c8
   1dd84:	movt	r0, #3
   1dd88:	ldr	r1, [r0, #160]	; 0xa0
   1dd8c:	cmp	r1, #0
   1dd90:	beq	1dea4 <__assert_fail@plt+0xbe18>
   1dd94:	ldr	r0, [r0, #164]	; 0xa4
   1dd98:	mov	r4, #20
   1dd9c:	cmp	r1, #2
   1dda0:	beq	1de8c <__assert_fail@plt+0xbe00>
   1dda4:	cmp	r1, #1
   1dda8:	bne	1e0c8 <__assert_fail@plt+0xc03c>
   1ddac:	ldrb	r0, [r0]
   1ddb0:	cmp	r0, #48	; 0x30
   1ddb4:	beq	1dea4 <__assert_fail@plt+0xbe18>
   1ddb8:	b	1e0c8 <__assert_fail@plt+0xc03c>
   1ddbc:	mov	r4, #10
   1ddc0:	b	1e0c8 <__assert_fail@plt+0xc03c>
   1ddc4:	tst	r7, #2048	; 0x800
   1ddc8:	beq	1df14 <__assert_fail@plt+0xbe88>
   1ddcc:	movw	r0, #61896	; 0xf1c8
   1ddd0:	movt	r0, #3
   1ddd4:	ldr	r1, [r0, #128]	; 0x80
   1ddd8:	cmp	r1, #0
   1dddc:	beq	1df14 <__assert_fail@plt+0xbe88>
   1dde0:	ldr	r0, [r0, #132]	; 0x84
   1dde4:	mov	r4, #16
   1dde8:	cmp	r1, #2
   1ddec:	beq	1defc <__assert_fail@plt+0xbe70>
   1ddf0:	cmp	r1, #1
   1ddf4:	bne	1e0c8 <__assert_fail@plt+0xc03c>
   1ddf8:	ldrb	r0, [r0]
   1ddfc:	cmp	r0, #48	; 0x30
   1de00:	beq	1df14 <__assert_fail@plt+0xbe88>
   1de04:	b	1e0c8 <__assert_fail@plt+0xc03c>
   1de08:	mov	r4, #9
   1de0c:	b	1e0c8 <__assert_fail@plt+0xc03c>
   1de10:	mov	r8, r5
   1de14:	b	1e0c8 <__assert_fail@plt+0xc03c>
   1de18:	movw	r1, #48056	; 0xbbb8
   1de1c:	mov	r2, #2
   1de20:	movt	r1, #2
   1de24:	bl	1202c <strncmp@plt>
   1de28:	cmp	r0, #0
   1de2c:	bne	1e0c8 <__assert_fail@plt+0xc03c>
   1de30:	b	1dc48 <__assert_fail@plt+0xbbbc>
   1de34:	movw	r0, #61896	; 0xf1c8
   1de38:	mov	r4, #7
   1de3c:	movt	r0, #3
   1de40:	ldr	r1, [r0, #104]	; 0x68
   1de44:	cmp	r1, #0
   1de48:	beq	1e0c8 <__assert_fail@plt+0xc03c>
   1de4c:	ldr	r0, [r0, #108]	; 0x6c
   1de50:	cmp	r1, #2
   1de54:	beq	1de70 <__assert_fail@plt+0xbde4>
   1de58:	cmp	r1, #1
   1de5c:	bne	1dd54 <__assert_fail@plt+0xbcc8>
   1de60:	ldrb	r0, [r0]
   1de64:	cmp	r0, #48	; 0x30
   1de68:	movne	r4, #13
   1de6c:	b	1e0c8 <__assert_fail@plt+0xc03c>
   1de70:	movw	r1, #48056	; 0xbbb8
   1de74:	mov	r2, #2
   1de78:	movt	r1, #2
   1de7c:	bl	1202c <strncmp@plt>
   1de80:	cmp	r0, #0
   1de84:	bne	1dd54 <__assert_fail@plt+0xbcc8>
   1de88:	b	1e0c8 <__assert_fail@plt+0xc03c>
   1de8c:	movw	r1, #48056	; 0xbbb8
   1de90:	mov	r2, #2
   1de94:	movt	r1, #2
   1de98:	bl	1202c <strncmp@plt>
   1de9c:	cmp	r0, #0
   1dea0:	bne	1e0c8 <__assert_fail@plt+0xc03c>
   1dea4:	cmp	r7, #0
   1dea8:	beq	1deec <__assert_fail@plt+0xbe60>
   1deac:	movw	r0, #61896	; 0xf1c8
   1deb0:	movt	r0, #3
   1deb4:	ldr	r1, [r0, #152]	; 0x98
   1deb8:	cmp	r1, #0
   1debc:	beq	1deec <__assert_fail@plt+0xbe60>
   1dec0:	ldr	r0, [r0, #156]	; 0x9c
   1dec4:	cmp	r1, #2
   1dec8:	beq	1df58 <__assert_fail@plt+0xbecc>
   1decc:	mov	r4, #19
   1ded0:	cmp	r1, #1
   1ded4:	bne	1e0c8 <__assert_fail@plt+0xc03c>
   1ded8:	ldrb	r0, [r0]
   1dedc:	mov	r4, #6
   1dee0:	cmp	r0, #48	; 0x30
   1dee4:	sub	r0, r0, #48	; 0x30
   1dee8:	b	1df70 <__assert_fail@plt+0xbee4>
   1deec:	mov	r4, #6
   1def0:	cmp	r5, #0
   1def4:	bne	1df80 <__assert_fail@plt+0xbef4>
   1def8:	b	1e0c8 <__assert_fail@plt+0xc03c>
   1defc:	movw	r1, #48056	; 0xbbb8
   1df00:	mov	r2, #2
   1df04:	movt	r1, #2
   1df08:	bl	1202c <strncmp@plt>
   1df0c:	cmp	r0, #0
   1df10:	bne	1e0c8 <__assert_fail@plt+0xc03c>
   1df14:	tst	r7, #1024	; 0x400
   1df18:	beq	1dfd4 <__assert_fail@plt+0xbf48>
   1df1c:	movw	r0, #61896	; 0xf1c8
   1df20:	movt	r0, #3
   1df24:	ldr	r1, [r0, #136]	; 0x88
   1df28:	cmp	r1, #0
   1df2c:	beq	1dfd4 <__assert_fail@plt+0xbf48>
   1df30:	ldr	r0, [r0, #140]	; 0x8c
   1df34:	mov	r4, #17
   1df38:	cmp	r1, #2
   1df3c:	beq	1dfbc <__assert_fail@plt+0xbf30>
   1df40:	cmp	r1, #1
   1df44:	bne	1e0c8 <__assert_fail@plt+0xc03c>
   1df48:	ldrb	r0, [r0]
   1df4c:	cmp	r0, #48	; 0x30
   1df50:	beq	1dfd4 <__assert_fail@plt+0xbf48>
   1df54:	b	1e0c8 <__assert_fail@plt+0xc03c>
   1df58:	movw	r1, #48056	; 0xbbb8
   1df5c:	mov	r2, #2
   1df60:	movt	r1, #2
   1df64:	bl	1202c <strncmp@plt>
   1df68:	mov	r4, #6
   1df6c:	cmp	r0, #0
   1df70:	movwne	r4, #19
   1df74:	movwne	r0, #1
   1df78:	orrs	r0, r0, sl
   1df7c:	bne	1e0c8 <__assert_fail@plt+0xc03c>
   1df80:	movw	r0, #61896	; 0xf1c8
   1df84:	mov	r4, #6
   1df88:	movt	r0, #3
   1df8c:	ldr	r1, [r0, #144]	; 0x90
   1df90:	cmp	r1, #0
   1df94:	beq	1e0c8 <__assert_fail@plt+0xc03c>
   1df98:	ldr	r0, [r0, #148]	; 0x94
   1df9c:	cmp	r1, #2
   1dfa0:	beq	1e0ac <__assert_fail@plt+0xc020>
   1dfa4:	cmp	r1, #1
   1dfa8:	bne	1e0c4 <__assert_fail@plt+0xc038>
   1dfac:	ldrb	r0, [r0]
   1dfb0:	cmp	r0, #48	; 0x30
   1dfb4:	movne	r4, #18
   1dfb8:	b	1e0c8 <__assert_fail@plt+0xc03c>
   1dfbc:	movw	r1, #48056	; 0xbbb8
   1dfc0:	mov	r2, #2
   1dfc4:	movt	r1, #2
   1dfc8:	bl	1202c <strncmp@plt>
   1dfcc:	cmp	r0, #0
   1dfd0:	bne	1e0c8 <__assert_fail@plt+0xc03c>
   1dfd4:	movw	sl, #61896	; 0xf1c8
   1dfd8:	movt	sl, #3
   1dfdc:	ldr	r1, [sl, #168]	; 0xa8
   1dfe0:	cmp	r1, #0
   1dfe4:	beq	1e034 <__assert_fail@plt+0xbfa8>
   1dfe8:	ldr	r0, [sl, #172]	; 0xac
   1dfec:	cmp	r1, #2
   1dff0:	beq	1e00c <__assert_fail@plt+0xbf80>
   1dff4:	cmp	r1, #1
   1dff8:	bne	1e024 <__assert_fail@plt+0xbf98>
   1dffc:	ldrb	r0, [r0]
   1e000:	cmp	r0, #48	; 0x30
   1e004:	bne	1e024 <__assert_fail@plt+0xbf98>
   1e008:	b	1e034 <__assert_fail@plt+0xbfa8>
   1e00c:	movw	r1, #48056	; 0xbbb8
   1e010:	mov	r2, #2
   1e014:	movt	r1, #2
   1e018:	bl	1202c <strncmp@plt>
   1e01c:	cmp	r0, #0
   1e020:	beq	1e034 <__assert_fail@plt+0xbfa8>
   1e024:	ldrb	r0, [r9, #140]	; 0x8c
   1e028:	mov	r4, #21
   1e02c:	cmp	r0, #0
   1e030:	bne	1e0c8 <__assert_fail@plt+0xc03c>
   1e034:	tst	r7, #73	; 0x49
   1e038:	ldrne	r1, [sl, #112]	; 0x70
   1e03c:	cmpne	r1, #0
   1e040:	bne	1e084 <__assert_fail@plt+0xbff8>
   1e044:	ldr	r0, [r9, #36]	; 0x24
   1e048:	cmp	r0, #2
   1e04c:	bcc	1dcc4 <__assert_fail@plt+0xbc38>
   1e050:	ldr	r1, [sl, #176]	; 0xb0
   1e054:	cmp	r1, #0
   1e058:	beq	1dcc4 <__assert_fail@plt+0xbc38>
   1e05c:	ldr	r0, [sl, #180]	; 0xb4
   1e060:	mov	r4, #22
   1e064:	cmp	r1, #2
   1e068:	beq	1e380 <__assert_fail@plt+0xc2f4>
   1e06c:	cmp	r1, #1
   1e070:	bne	1e0c8 <__assert_fail@plt+0xc03c>
   1e074:	ldrb	r0, [r0]
   1e078:	cmp	r0, #48	; 0x30
   1e07c:	beq	1dcc4 <__assert_fail@plt+0xbc38>
   1e080:	b	1e0c8 <__assert_fail@plt+0xc03c>
   1e084:	ldr	r0, [sl, #116]	; 0x74
   1e088:	mov	r4, #14
   1e08c:	cmp	r1, #2
   1e090:	beq	1e39c <__assert_fail@plt+0xc310>
   1e094:	cmp	r1, #1
   1e098:	bne	1e0c8 <__assert_fail@plt+0xc03c>
   1e09c:	ldrb	r0, [r0]
   1e0a0:	cmp	r0, #48	; 0x30
   1e0a4:	beq	1e044 <__assert_fail@plt+0xbfb8>
   1e0a8:	b	1e0c8 <__assert_fail@plt+0xc03c>
   1e0ac:	movw	r1, #48056	; 0xbbb8
   1e0b0:	mov	r2, #2
   1e0b4:	movt	r1, #2
   1e0b8:	bl	1202c <strncmp@plt>
   1e0bc:	cmp	r0, #0
   1e0c0:	beq	1e0c8 <__assert_fail@plt+0xc03c>
   1e0c4:	mov	r4, #18
   1e0c8:	movw	r0, #61896	; 0xf1c8
   1e0cc:	add	r3, r8, #8
   1e0d0:	cmp	r8, #0
   1e0d4:	ldr	r6, [sp, #16]
   1e0d8:	mov	r5, #1
   1e0dc:	movt	r0, #3
   1e0e0:	addeq	r3, r0, r4, lsl #3
   1e0e4:	ldr	r1, [r3, #4]
   1e0e8:	cmp	r1, #0
   1e0ec:	beq	1e100 <__assert_fail@plt+0xc074>
   1e0f0:	ldr	r8, [sp, #24]
   1e0f4:	ldr	r4, [sp, #20]
   1e0f8:	ldr	r7, [sp, #12]
   1e0fc:	b	1e154 <__assert_fail@plt+0xc0c8>
   1e100:	ldr	r1, [r0, #32]
   1e104:	ldr	r8, [sp, #24]
   1e108:	ldr	r4, [sp, #20]
   1e10c:	ldr	r7, [sp, #12]
   1e110:	cmp	r1, #0
   1e114:	beq	1e14c <__assert_fail@plt+0xc0c0>
   1e118:	ldr	r0, [r0, #36]	; 0x24
   1e11c:	cmp	r1, #2
   1e120:	beq	1e31c <__assert_fail@plt+0xc290>
   1e124:	cmp	r1, #1
   1e128:	bne	1e140 <__assert_fail@plt+0xc0b4>
   1e12c:	ldrb	r0, [r0]
   1e130:	mov	r3, #0
   1e134:	mov	r5, #0
   1e138:	cmp	r0, #48	; 0x30
   1e13c:	beq	1e154 <__assert_fail@plt+0xc0c8>
   1e140:	mov	r3, #0
   1e144:	mov	r5, #1
   1e148:	b	1e154 <__assert_fail@plt+0xc0c8>
   1e14c:	mov	r3, #0
   1e150:	mov	r5, #0
   1e154:	movw	r0, #62468	; 0xf404
   1e158:	ldr	r2, [r9, #144]	; 0x90
   1e15c:	eor	r7, r7, #1
   1e160:	movt	r0, #3
   1e164:	ldr	r1, [r0]
   1e168:	ldr	r0, [r9, #8]
   1e16c:	str	r7, [sp]
   1e170:	str	r4, [sp, #4]
   1e174:	str	r0, [sp, #8]
   1e178:	mov	r0, r6
   1e17c:	bl	195d0 <__assert_fail@plt+0x7544>
   1e180:	mov	r4, r0
   1e184:	bl	1a7a0 <__assert_fail@plt+0x8714>
   1e188:	cmp	r5, #0
   1e18c:	beq	1e374 <__assert_fail@plt+0xc2e8>
   1e190:	movw	r5, #61896	; 0xf1c8
   1e194:	movw	r7, #62456	; 0xf3f8
   1e198:	movt	r5, #3
   1e19c:	movt	r7, #3
   1e1a0:	ldr	r0, [r5, #20]
   1e1a4:	ldrb	r1, [r7]
   1e1a8:	cmp	r0, #0
   1e1ac:	beq	1e1f0 <__assert_fail@plt+0xc164>
   1e1b0:	cmp	r1, #0
   1e1b4:	bne	1e1dc <__assert_fail@plt+0xc150>
   1e1b8:	mov	r0, #1
   1e1bc:	strb	r0, [r7]
   1e1c0:	mov	r0, #1
   1e1c4:	bl	11ea0 <tcgetpgrp@plt>
   1e1c8:	cmp	r0, #0
   1e1cc:	movge	r0, #1
   1e1d0:	blge	18e14 <__assert_fail@plt+0x6d88>
   1e1d4:	bl	18dd0 <__assert_fail@plt+0x6d44>
   1e1d8:	ldr	r0, [r5, #20]
   1e1dc:	movw	r1, #62220	; 0xf30c
   1e1e0:	movt	r1, #3
   1e1e4:	ldr	r3, [r1]
   1e1e8:	ldr	r1, [r5, #16]
   1e1ec:	b	1e2ac <__assert_fail@plt+0xc220>
   1e1f0:	cmp	r1, #0
   1e1f4:	bne	1e218 <__assert_fail@plt+0xc18c>
   1e1f8:	mov	r0, #1
   1e1fc:	strb	r0, [r7]
   1e200:	mov	r0, #1
   1e204:	bl	11ea0 <tcgetpgrp@plt>
   1e208:	cmp	r0, #0
   1e20c:	movge	r0, #1
   1e210:	blge	18e14 <__assert_fail@plt+0x6d88>
   1e214:	bl	18dd0 <__assert_fail@plt+0x6d44>
   1e218:	movw	r9, #62220	; 0xf30c
   1e21c:	ldr	r1, [r5]
   1e220:	ldr	r0, [r5, #4]
   1e224:	mov	r2, #1
   1e228:	mov	r6, #1
   1e22c:	movt	r9, #3
   1e230:	ldr	r3, [r9]
   1e234:	bl	11c90 <fwrite_unlocked@plt>
   1e238:	ldrb	r0, [r7]
   1e23c:	cmp	r0, #0
   1e240:	bne	1e260 <__assert_fail@plt+0xc1d4>
   1e244:	mov	r0, #1
   1e248:	strb	r6, [r7]
   1e24c:	bl	11ea0 <tcgetpgrp@plt>
   1e250:	cmp	r0, #0
   1e254:	movge	r0, #1
   1e258:	blge	18e14 <__assert_fail@plt+0x6d88>
   1e25c:	bl	18dd0 <__assert_fail@plt+0x6d44>
   1e260:	ldr	r3, [r9]
   1e264:	ldr	r1, [r5, #24]
   1e268:	ldr	r0, [r5, #28]
   1e26c:	mov	r2, #1
   1e270:	mov	r6, #1
   1e274:	bl	11c90 <fwrite_unlocked@plt>
   1e278:	ldrb	r0, [r7]
   1e27c:	cmp	r0, #0
   1e280:	bne	1e2a0 <__assert_fail@plt+0xc214>
   1e284:	mov	r0, #1
   1e288:	strb	r6, [r7]
   1e28c:	bl	11ea0 <tcgetpgrp@plt>
   1e290:	cmp	r0, #0
   1e294:	movge	r0, #1
   1e298:	blge	18e14 <__assert_fail@plt+0x6d88>
   1e29c:	bl	18dd0 <__assert_fail@plt+0x6d44>
   1e2a0:	ldr	r3, [r9]
   1e2a4:	ldr	r1, [r5, #8]
   1e2a8:	ldr	r0, [r5, #12]
   1e2ac:	mov	r2, #1
   1e2b0:	bl	11c90 <fwrite_unlocked@plt>
   1e2b4:	movw	r0, #62912	; 0xf5c0
   1e2b8:	movt	r0, #3
   1e2bc:	ldr	r0, [r0]
   1e2c0:	cmp	r0, #0
   1e2c4:	beq	1e374 <__assert_fail@plt+0xc2e8>
   1e2c8:	add	r2, r8, r4
   1e2cc:	udiv	r1, r8, r0
   1e2d0:	sub	r2, r2, #1
   1e2d4:	udiv	r0, r2, r0
   1e2d8:	cmp	r1, r0
   1e2dc:	beq	1e374 <__assert_fail@plt+0xc2e8>
   1e2e0:	ldrb	r0, [r7]
   1e2e4:	cmp	r0, #0
   1e2e8:	bne	1e358 <__assert_fail@plt+0xc2cc>
   1e2ec:	mov	r0, #1
   1e2f0:	strb	r0, [r7]
   1e2f4:	mov	r0, #1
   1e2f8:	bl	11ea0 <tcgetpgrp@plt>
   1e2fc:	cmp	r0, #0
   1e300:	movge	r0, #1
   1e304:	blge	18e14 <__assert_fail@plt+0x6d88>
   1e308:	ldr	r0, [r5, #20]
   1e30c:	cmp	r0, #0
   1e310:	beq	1e340 <__assert_fail@plt+0xc2b4>
   1e314:	add	r0, r5, #16
   1e318:	b	1e354 <__assert_fail@plt+0xc2c8>
   1e31c:	movw	r1, #48056	; 0xbbb8
   1e320:	mov	r2, #2
   1e324:	movt	r1, #2
   1e328:	bl	1202c <strncmp@plt>
   1e32c:	mov	r5, r0
   1e330:	cmp	r0, #0
   1e334:	mov	r3, #0
   1e338:	movwne	r5, #1
   1e33c:	b	1e154 <__assert_fail@plt+0xc0c8>
   1e340:	mov	r0, r5
   1e344:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1e348:	add	r0, r5, #24
   1e34c:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1e350:	add	r0, r5, #8
   1e354:	bl	18d70 <__assert_fail@plt+0x6ce4>
   1e358:	movw	r0, #62220	; 0xf30c
   1e35c:	ldr	r1, [r5, #184]	; 0xb8
   1e360:	mov	r2, #1
   1e364:	movt	r0, #3
   1e368:	ldr	r3, [r0]
   1e36c:	ldr	r0, [r5, #188]	; 0xbc
   1e370:	bl	11c90 <fwrite_unlocked@plt>
   1e374:	mov	r0, r4
   1e378:	sub	sp, fp, #28
   1e37c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e380:	movw	r1, #48056	; 0xbbb8
   1e384:	mov	r2, #2
   1e388:	movt	r1, #2
   1e38c:	bl	1202c <strncmp@plt>
   1e390:	cmp	r0, #0
   1e394:	bne	1e0c8 <__assert_fail@plt+0xc03c>
   1e398:	b	1dcc4 <__assert_fail@plt+0xbc38>
   1e39c:	movw	r1, #48056	; 0xbbb8
   1e3a0:	mov	r2, #2
   1e3a4:	movt	r1, #2
   1e3a8:	bl	1202c <strncmp@plt>
   1e3ac:	cmp	r0, #0
   1e3b0:	bne	1e0c8 <__assert_fail@plt+0xc03c>
   1e3b4:	b	1e044 <__assert_fail@plt+0xbfb8>
   1e3b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e3bc:	add	fp, sp, #24
   1e3c0:	sub	sp, sp, #680	; 0x2a8
   1e3c4:	sub	sp, sp, #8192	; 0x2000
   1e3c8:	mov	r4, r0
   1e3cc:	movw	r0, #62896	; 0xf5b0
   1e3d0:	mov	r6, #0
   1e3d4:	movt	r0, #3
   1e3d8:	ldrb	r0, [r0]
   1e3dc:	cmp	r0, #1
   1e3e0:	bne	1e41c <__assert_fail@plt+0xc390>
   1e3e4:	movw	r0, #62264	; 0xf338
   1e3e8:	movt	r0, #3
   1e3ec:	ldr	r0, [r0]
   1e3f0:	cmp	r0, #4
   1e3f4:	bne	1e40c <__assert_fail@plt+0xc380>
   1e3f8:	ldrd	r0, [r4, #112]	; 0x70
   1e3fc:	add	r2, sp, #19
   1e400:	bl	227b0 <__assert_fail@plt+0x10724>
   1e404:	bl	11eac <strlen@plt>
   1e408:	b	1e418 <__assert_fail@plt+0xc38c>
   1e40c:	movw	r0, #492	; 0x1ec
   1e410:	movt	r0, #4
   1e414:	ldr	r0, [r0]
   1e418:	add	r6, r0, #1
   1e41c:	movw	r0, #62341	; 0xf385
   1e420:	movt	r0, #3
   1e424:	ldrb	r0, [r0]
   1e428:	cmp	r0, #1
   1e42c:	bne	1e4b8 <__assert_fail@plt+0xc42c>
   1e430:	movw	r0, #62264	; 0xf338
   1e434:	movt	r0, #3
   1e438:	ldr	r0, [r0]
   1e43c:	cmp	r0, #4
   1e440:	bne	1e494 <__assert_fail@plt+0xc408>
   1e444:	ldrb	r0, [r4, #132]	; 0x84
   1e448:	cmp	r0, #0
   1e44c:	beq	1e4a4 <__assert_fail@plt+0xc418>
   1e450:	movw	r2, #62876	; 0xf59c
   1e454:	ldr	r0, [r4, #80]	; 0x50
   1e458:	ldr	r7, [r4, #84]	; 0x54
   1e45c:	mov	ip, #0
   1e460:	mov	r1, #512	; 0x200
   1e464:	movt	r2, #3
   1e468:	ldr	r3, [r2]
   1e46c:	movw	r2, #62888	; 0xf5a8
   1e470:	movt	r2, #3
   1e474:	ldm	r2, {r2, r5}
   1e478:	stm	sp, {r1, ip}
   1e47c:	mov	r1, r7
   1e480:	str	r2, [sp, #8]
   1e484:	add	r2, sp, #19
   1e488:	str	r5, [sp, #12]
   1e48c:	bl	21880 <__assert_fail@plt+0xf7f4>
   1e490:	b	1e4ac <__assert_fail@plt+0xc420>
   1e494:	movw	r0, #496	; 0x1f0
   1e498:	movt	r0, #4
   1e49c:	ldr	r0, [r0]
   1e4a0:	b	1e4b0 <__assert_fail@plt+0xc424>
   1e4a4:	movw	r0, #49498	; 0xc15a
   1e4a8:	movt	r0, #2
   1e4ac:	bl	11eac <strlen@plt>
   1e4b0:	add	r0, r6, r0
   1e4b4:	add	r6, r0, #1
   1e4b8:	movw	r0, #62340	; 0xf384
   1e4bc:	movt	r0, #3
   1e4c0:	ldrb	r0, [r0]
   1e4c4:	cmp	r0, #1
   1e4c8:	bne	1e500 <__assert_fail@plt+0xc474>
   1e4cc:	movw	r0, #62264	; 0xf338
   1e4d0:	movt	r0, #3
   1e4d4:	ldr	r0, [r0]
   1e4d8:	cmp	r0, #4
   1e4dc:	bne	1e4ec <__assert_fail@plt+0xc460>
   1e4e0:	ldr	r0, [r4, #128]	; 0x80
   1e4e4:	bl	11eac <strlen@plt>
   1e4e8:	b	1e4f8 <__assert_fail@plt+0xc46c>
   1e4ec:	movw	r0, #516	; 0x204
   1e4f0:	movt	r0, #4
   1e4f4:	ldr	r0, [r0]
   1e4f8:	add	r0, r6, r0
   1e4fc:	add	r6, r0, #1
   1e500:	ldr	r0, [r4, #148]	; 0x94
   1e504:	cmp	r0, #0
   1e508:	bne	1e568 <__assert_fail@plt+0xc4dc>
   1e50c:	movw	r0, #62468	; 0xf404
   1e510:	ldr	r5, [r4]
   1e514:	ldr	r3, [r4, #144]	; 0x90
   1e518:	add	lr, sp, #512	; 0x200
   1e51c:	add	r1, sp, #672	; 0x2a0
   1e520:	add	r7, sp, #680	; 0x2a8
   1e524:	movt	r0, #3
   1e528:	str	r1, [sp]
   1e52c:	str	r7, [sp, #676]	; 0x2a4
   1e530:	ldr	r2, [r0]
   1e534:	add	r0, lr, #159	; 0x9f
   1e538:	str	r0, [sp, #4]
   1e53c:	add	r0, sp, #676	; 0x2a4
   1e540:	mov	r1, r5
   1e544:	bl	1aa38 <__assert_fail@plt+0x89ac>
   1e548:	ldr	r0, [sp, #676]	; 0x2a4
   1e54c:	cmp	r0, r7
   1e550:	cmpne	r0, r5
   1e554:	beq	1e55c <__assert_fail@plt+0xc4d0>
   1e558:	bl	2046c <__assert_fail@plt+0xe3e0>
   1e55c:	ldrb	r0, [sp, #671]	; 0x29f
   1e560:	ldr	r1, [sp, #672]	; 0x2a0
   1e564:	add	r0, r1, r0
   1e568:	movw	r1, #62276	; 0xf344
   1e56c:	add	r0, r0, r6
   1e570:	movt	r1, #3
   1e574:	ldr	r3, [r1]
   1e578:	cmp	r3, #0
   1e57c:	beq	1e624 <__assert_fail@plt+0xc598>
   1e580:	ldrb	r6, [r4, #132]	; 0x84
   1e584:	ldr	r2, [r4, #32]
   1e588:	ldr	r5, [r4, #120]	; 0x78
   1e58c:	cmp	r6, #0
   1e590:	beq	1e5d0 <__assert_fail@plt+0xc544>
   1e594:	and	r1, r2, #61440	; 0xf000
   1e598:	cmp	r1, #16384	; 0x4000
   1e59c:	beq	1e61c <__assert_fail@plt+0xc590>
   1e5a0:	cmp	r1, #32768	; 0x8000
   1e5a4:	bne	1e5e8 <__assert_fail@plt+0xc55c>
   1e5a8:	sub	r1, r3, #3
   1e5ac:	cmp	r6, #0
   1e5b0:	clz	r1, r1
   1e5b4:	movwne	r6, #1
   1e5b8:	ands	r2, r2, #73	; 0x49
   1e5bc:	lsr	r1, r1, #5
   1e5c0:	movwne	r2, #1
   1e5c4:	and	r1, r1, r6
   1e5c8:	and	r1, r1, r2
   1e5cc:	b	1e620 <__assert_fail@plt+0xc594>
   1e5d0:	cmp	r5, #3
   1e5d4:	mov	r1, #1
   1e5d8:	cmpne	r5, #9
   1e5dc:	beq	1e620 <__assert_fail@plt+0xc594>
   1e5e0:	cmp	r5, #5
   1e5e4:	beq	1e5a8 <__assert_fail@plt+0xc51c>
   1e5e8:	mov	r1, #0
   1e5ec:	cmp	r3, #1
   1e5f0:	beq	1e620 <__assert_fail@plt+0xc594>
   1e5f4:	cmp	r6, #0
   1e5f8:	beq	1e62c <__assert_fail@plt+0xc5a0>
   1e5fc:	and	r2, r2, #61440	; 0xf000
   1e600:	mov	r1, #1
   1e604:	cmp	r2, #4096	; 0x1000
   1e608:	cmpne	r2, #40960	; 0xa000
   1e60c:	beq	1e620 <__assert_fail@plt+0xc594>
   1e610:	cmp	r2, #49152	; 0xc000
   1e614:	movne	r1, #0
   1e618:	b	1e620 <__assert_fail@plt+0xc594>
   1e61c:	mov	r1, #1
   1e620:	add	r0, r1, r0
   1e624:	sub	sp, fp, #24
   1e628:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e62c:	sub	r1, r5, #1
   1e630:	cmp	r1, #7
   1e634:	bcs	1e648 <__assert_fail@plt+0xc5bc>
   1e638:	movw	r2, #56576	; 0xdd00
   1e63c:	movt	r2, #2
   1e640:	ldr	r1, [r2, r1, lsl #2]
   1e644:	b	1e620 <__assert_fail@plt+0xc594>
   1e648:	mov	r1, #0
   1e64c:	b	1e620 <__assert_fail@plt+0xc594>
   1e650:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e654:	add	fp, sp, #28
   1e658:	sub	sp, sp, #4
   1e65c:	movw	r6, #62916	; 0xf5c4
   1e660:	mov	r9, r0
   1e664:	movw	r0, #62452	; 0xf3f4
   1e668:	movw	r7, #964	; 0x3c4
   1e66c:	movt	r0, #3
   1e670:	movt	r6, #3
   1e674:	movt	r7, #4
   1e678:	ldr	r0, [r0]
   1e67c:	ldr	r1, [r6]
   1e680:	cmp	r1, r0
   1e684:	mov	sl, r0
   1e688:	movcc	sl, r1
   1e68c:	cmp	r1, #0
   1e690:	moveq	sl, r0
   1e694:	ldr	r0, [r7]
   1e698:	cmp	r0, sl
   1e69c:	bcs	1e750 <__assert_fail@plt+0xc6c4>
   1e6a0:	movw	r5, #960	; 0x3c0
   1e6a4:	cmp	r1, #0
   1e6a8:	movt	r5, #4
   1e6ac:	ldr	r0, [r5]
   1e6b0:	beq	1e6d4 <__assert_fail@plt+0xc648>
   1e6b4:	lsr	r2, r1, #1
   1e6b8:	cmp	r2, sl
   1e6bc:	bhi	1e6d4 <__assert_fail@plt+0xc648>
   1e6c0:	mov	r2, #12
   1e6c4:	bl	27e64 <_obstack_memory_used@@Base+0x2df0>
   1e6c8:	ldr	r6, [r6]
   1e6cc:	str	r0, [r5]
   1e6d0:	b	1e6e8 <__assert_fail@plt+0xc65c>
   1e6d4:	mov	r1, sl
   1e6d8:	mov	r2, #24
   1e6dc:	bl	27e64 <_obstack_memory_used@@Base+0x2df0>
   1e6e0:	str	r0, [r5]
   1e6e4:	lsl	r6, sl, #1
   1e6e8:	ldr	r1, [r7]
   1e6ec:	add	r0, r6, r1
   1e6f0:	add	r0, r0, #1
   1e6f4:	cmp	r0, r6
   1e6f8:	bcc	1e924 <__assert_fail@plt+0xc898>
   1e6fc:	sub	r2, r6, r1
   1e700:	mul	r1, r0, r2
   1e704:	udiv	r2, r1, r2
   1e708:	cmp	r2, r0
   1e70c:	bne	1e924 <__assert_fail@plt+0xc898>
   1e710:	lsr	r0, r1, #1
   1e714:	mov	r1, #4
   1e718:	bl	27f70 <_obstack_memory_used@@Base+0x2efc>
   1e71c:	ldr	r1, [r7]
   1e720:	cmp	r1, r6
   1e724:	bcs	1e74c <__assert_fail@plt+0xc6c0>
   1e728:	ldr	r2, [r5]
   1e72c:	add	r3, r1, r1, lsl #1
   1e730:	add	r2, r2, r3, lsl #2
   1e734:	add	r2, r2, #8
   1e738:	add	r1, r1, #1
   1e73c:	str	r0, [r2], #12
   1e740:	add	r0, r0, r1, lsl #2
   1e744:	cmp	r6, r1
   1e748:	bne	1e738 <__assert_fail@plt+0xc6ac>
   1e74c:	str	r6, [r7]
   1e750:	cmp	sl, #0
   1e754:	beq	1e7e4 <__assert_fail@plt+0xc758>
   1e758:	movw	r0, #960	; 0x3c0
   1e75c:	mov	r7, #0
   1e760:	mov	ip, #1
   1e764:	mov	r2, #3
   1e768:	vmov.i32	q8, #3	; 0x00000003
   1e76c:	mov	r3, #1
   1e770:	movt	r0, #4
   1e774:	ldr	lr, [r0]
   1e778:	mov	r8, r7
   1e77c:	add	r0, r7, r7, lsl #1
   1e780:	mov	r1, lr
   1e784:	add	r7, r7, #1
   1e788:	strb	ip, [r1, r0, lsl #2]!
   1e78c:	add	r0, r7, r7, lsl #1
   1e790:	cmp	r7, #4
   1e794:	str	r0, [r1, #4]
   1e798:	mov	r0, #0
   1e79c:	ldr	r1, [r1, #8]
   1e7a0:	bcc	1e7c4 <__assert_fail@plt+0xc738>
   1e7a4:	bic	r5, r3, #3
   1e7a8:	bic	r0, r7, #3
   1e7ac:	mov	r6, r1
   1e7b0:	vst1.32	{d16-d17}, [r6]!
   1e7b4:	subs	r5, r5, #4
   1e7b8:	bne	1e7b0 <__assert_fail@plt+0xc724>
   1e7bc:	cmp	r7, r0
   1e7c0:	beq	1e7d8 <__assert_fail@plt+0xc74c>
   1e7c4:	add	r4, r8, #1
   1e7c8:	str	r2, [r1, r0, lsl #2]
   1e7cc:	add	r0, r0, #1
   1e7d0:	cmp	r4, r0
   1e7d4:	bne	1e7c8 <__assert_fail@plt+0xc73c>
   1e7d8:	add	r3, r3, #1
   1e7dc:	cmp	r7, sl
   1e7e0:	bne	1e778 <__assert_fail@plt+0xc6ec>
   1e7e4:	movw	r0, #62452	; 0xf3f4
   1e7e8:	movt	r0, #3
   1e7ec:	ldr	r0, [r0]
   1e7f0:	cmp	r0, #0
   1e7f4:	beq	1e8e8 <__assert_fail@plt+0xc85c>
   1e7f8:	mov	r7, #0
   1e7fc:	movw	r0, #484	; 0x1e4
   1e800:	movt	r0, #4
   1e804:	ldr	r0, [r0]
   1e808:	ldr	r0, [r0, r7, lsl #2]
   1e80c:	bl	1e3b8 <__assert_fail@plt+0xc32c>
   1e810:	cmp	sl, #0
   1e814:	beq	1e8d0 <__assert_fail@plt+0xc844>
   1e818:	movw	r1, #62912	; 0xf5c0
   1e81c:	mov	r6, #0
   1e820:	movt	r1, #3
   1e824:	ldr	ip, [r1]
   1e828:	movw	r1, #62452	; 0xf3f4
   1e82c:	movt	r1, #3
   1e830:	ldr	lr, [r1]
   1e834:	movw	r1, #960	; 0x3c0
   1e838:	movt	r1, #4
   1e83c:	ldr	r1, [r1]
   1e840:	add	r3, r1, #4
   1e844:	ldrb	r1, [r3, #-4]
   1e848:	cmp	r1, #0
   1e84c:	beq	1e8bc <__assert_fail@plt+0xc830>
   1e850:	cmp	r9, #0
   1e854:	beq	1e86c <__assert_fail@plt+0xc7e0>
   1e858:	add	r1, lr, r6
   1e85c:	add	r2, r6, #1
   1e860:	udiv	r1, r1, r2
   1e864:	udiv	r5, r7, r1
   1e868:	b	1e878 <__assert_fail@plt+0xc7ec>
   1e86c:	add	r1, r6, #1
   1e870:	udiv	r2, r7, r1
   1e874:	mls	r5, r2, r1, r7
   1e878:	ldr	r4, [r3, #4]
   1e87c:	cmp	r6, r5
   1e880:	mov	r2, r0
   1e884:	addne	r2, r2, #2
   1e888:	ldr	r1, [r4, r5, lsl #2]
   1e88c:	cmp	r2, r1
   1e890:	bls	1e8bc <__assert_fail@plt+0xc830>
   1e894:	ldr	r8, [r3]
   1e898:	sub	r1, r2, r1
   1e89c:	add	r1, r1, r8
   1e8a0:	str	r1, [r3]
   1e8a4:	str	r2, [r4, r5, lsl #2]
   1e8a8:	ldr	r1, [r3]
   1e8ac:	cmp	r1, ip
   1e8b0:	mov	r1, #0
   1e8b4:	movwcc	r1, #1
   1e8b8:	strb	r1, [r3, #-4]
   1e8bc:	add	r6, r6, #1
   1e8c0:	add	r3, r3, #12
   1e8c4:	cmp	sl, r6
   1e8c8:	bne	1e844 <__assert_fail@plt+0xc7b8>
   1e8cc:	b	1e8dc <__assert_fail@plt+0xc850>
   1e8d0:	movw	r0, #62452	; 0xf3f4
   1e8d4:	movt	r0, #3
   1e8d8:	ldr	lr, [r0]
   1e8dc:	add	r7, r7, #1
   1e8e0:	cmp	r7, lr
   1e8e4:	bcc	1e7fc <__assert_fail@plt+0xc770>
   1e8e8:	movw	r0, #960	; 0x3c0
   1e8ec:	add	r1, sl, sl, lsl #1
   1e8f0:	movt	r0, #4
   1e8f4:	ldr	r0, [r0]
   1e8f8:	add	r0, r0, r1, lsl #2
   1e8fc:	sub	r1, r0, #12
   1e900:	mov	r0, sl
   1e904:	cmp	sl, #2
   1e908:	bcc	1e91c <__assert_fail@plt+0xc890>
   1e90c:	ldrb	r2, [r1], #-12
   1e910:	sub	sl, r0, #1
   1e914:	cmp	r2, #0
   1e918:	beq	1e900 <__assert_fail@plt+0xc874>
   1e91c:	sub	sp, fp, #28
   1e920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e924:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   1e928:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e92c:	add	fp, sp, #24
   1e930:	sub	sp, sp, #128	; 0x80
   1e934:	mov	r4, r1
   1e938:	mov	r8, r0
   1e93c:	cmp	r1, #0
   1e940:	beq	1e954 <__assert_fail@plt+0xc8c8>
   1e944:	movw	r6, #1025	; 0x401
   1e948:	cmp	r4, #1024	; 0x400
   1e94c:	addls	r6, r4, #1
   1e950:	b	1e958 <__assert_fail@plt+0xc8cc>
   1e954:	mov	r6, #128	; 0x80
   1e958:	mov	r9, sp
   1e95c:	cmp	r4, #0
   1e960:	beq	1e9a0 <__assert_fail@plt+0xc914>
   1e964:	b	1e9b0 <__assert_fail@plt+0xc924>
   1e968:	cmp	r0, r6
   1e96c:	bcc	1e9f0 <__assert_fail@plt+0xc964>
   1e970:	mov	r0, r5
   1e974:	bl	2046c <__assert_fail@plt+0xe3e0>
   1e978:	cmn	r6, #-1073741823	; 0xc0000001
   1e97c:	bhi	1e988 <__assert_fail@plt+0xc8fc>
   1e980:	lsl	r0, r6, #1
   1e984:	b	1e994 <__assert_fail@plt+0xc908>
   1e988:	mvn	r0, #-2147483648	; 0x80000000
   1e98c:	cmn	r6, #-2147483647	; 0x80000001
   1e990:	bcs	1ea28 <__assert_fail@plt+0xc99c>
   1e994:	mov	r6, r0
   1e998:	cmp	r4, #0
   1e99c:	bne	1e9b0 <__assert_fail@plt+0xc924>
   1e9a0:	mov	r5, #0
   1e9a4:	cmp	r6, #128	; 0x80
   1e9a8:	mov	r7, r9
   1e9ac:	beq	1e9c8 <__assert_fail@plt+0xc93c>
   1e9b0:	mov	r0, r6
   1e9b4:	bl	29460 <_obstack_memory_used@@Base+0x43ec>
   1e9b8:	mov	r7, r0
   1e9bc:	cmp	r0, #0
   1e9c0:	mov	r5, r0
   1e9c4:	beq	1ea28 <__assert_fail@plt+0xc99c>
   1e9c8:	mov	r0, r8
   1e9cc:	mov	r1, r7
   1e9d0:	mov	r2, r6
   1e9d4:	bl	11d38 <readlink@plt>
   1e9d8:	cmn	r0, #1
   1e9dc:	bgt	1e968 <__assert_fail@plt+0xc8dc>
   1e9e0:	mov	r0, r5
   1e9e4:	bl	2046c <__assert_fail@plt+0xe3e0>
   1e9e8:	mov	r4, #0
   1e9ec:	b	1ea60 <__assert_fail@plt+0xc9d4>
   1e9f0:	mov	r4, #0
   1e9f4:	add	r8, r0, #1
   1e9f8:	cmp	r5, #0
   1e9fc:	strb	r4, [r7, r0]
   1ea00:	beq	1ea3c <__assert_fail@plt+0xc9b0>
   1ea04:	cmp	r8, r6
   1ea08:	bcs	1ea5c <__assert_fail@plt+0xc9d0>
   1ea0c:	mov	r0, r5
   1ea10:	mov	r1, r8
   1ea14:	bl	29490 <_obstack_memory_used@@Base+0x441c>
   1ea18:	mov	r4, r0
   1ea1c:	cmp	r0, #0
   1ea20:	moveq	r4, r5
   1ea24:	b	1ea60 <__assert_fail@plt+0xc9d4>
   1ea28:	bl	11ed0 <__errno_location@plt>
   1ea2c:	mov	r1, #12
   1ea30:	mov	r4, #0
   1ea34:	str	r1, [r0]
   1ea38:	b	1ea60 <__assert_fail@plt+0xc9d4>
   1ea3c:	mov	r0, r8
   1ea40:	bl	29460 <_obstack_memory_used@@Base+0x43ec>
   1ea44:	cmp	r0, #0
   1ea48:	beq	1ea60 <__assert_fail@plt+0xc9d4>
   1ea4c:	mov	r1, r7
   1ea50:	mov	r2, r8
   1ea54:	mov	r5, r0
   1ea58:	bl	11c60 <memcpy@plt>
   1ea5c:	mov	r4, r5
   1ea60:	mov	r0, r4
   1ea64:	sub	sp, fp, #24
   1ea68:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ea6c:	mov	r0, #1
   1ea70:	b	187f0 <__assert_fail@plt+0x6764>
   1ea74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea78:	add	fp, sp, #28
   1ea7c:	sub	sp, sp, #12
   1ea80:	mov	r4, r3
   1ea84:	mov	r6, r2
   1ea88:	mov	r5, r1
   1ea8c:	mov	sl, r0
   1ea90:	bl	11eac <strlen@plt>
   1ea94:	ldr	r8, [r5]
   1ea98:	cmp	r8, #0
   1ea9c:	beq	1eb58 <__assert_fail@plt+0xcacc>
   1eaa0:	mov	r7, r0
   1eaa4:	mov	r0, #0
   1eaa8:	add	r9, r5, #4
   1eaac:	mov	r5, #0
   1eab0:	str	r6, [sp, #4]
   1eab4:	str	r0, [sp]
   1eab8:	mvn	r0, #0
   1eabc:	str	r0, [sp, #8]
   1eac0:	mov	r0, r8
   1eac4:	mov	r1, sl
   1eac8:	mov	r2, r7
   1eacc:	bl	1202c <strncmp@plt>
   1ead0:	cmp	r0, #0
   1ead4:	bne	1eb2c <__assert_fail@plt+0xcaa0>
   1ead8:	mov	r0, r8
   1eadc:	bl	11eac <strlen@plt>
   1eae0:	cmp	r0, r7
   1eae4:	beq	1eb5c <__assert_fail@plt+0xcad0>
   1eae8:	ldr	r0, [sp, #8]
   1eaec:	cmn	r0, #1
   1eaf0:	beq	1eb28 <__assert_fail@plt+0xca9c>
   1eaf4:	ldr	r0, [sp, #4]
   1eaf8:	cmp	r0, #0
   1eafc:	beq	1eb1c <__assert_fail@plt+0xca90>
   1eb00:	ldr	r1, [sp, #8]
   1eb04:	mov	r2, r4
   1eb08:	mla	r0, r1, r4, r0
   1eb0c:	mov	r1, r6
   1eb10:	bl	11c9c <memcmp@plt>
   1eb14:	cmp	r0, #0
   1eb18:	beq	1eb2c <__assert_fail@plt+0xcaa0>
   1eb1c:	mov	r0, #1
   1eb20:	str	r0, [sp]
   1eb24:	b	1eb2c <__assert_fail@plt+0xcaa0>
   1eb28:	str	r5, [sp, #8]
   1eb2c:	ldr	r8, [r9, r5, lsl #2]
   1eb30:	add	r6, r6, r4
   1eb34:	add	r5, r5, #1
   1eb38:	cmp	r8, #0
   1eb3c:	bne	1eac0 <__assert_fail@plt+0xca34>
   1eb40:	ldr	r0, [sp]
   1eb44:	tst	r0, #1
   1eb48:	ldr	r0, [sp, #8]
   1eb4c:	mvnne	r0, #1
   1eb50:	sub	sp, fp, #28
   1eb54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb58:	mvn	r5, #0
   1eb5c:	mov	r0, r5
   1eb60:	sub	sp, fp, #28
   1eb64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb68:	push	{r4, r5, r6, r7, fp, lr}
   1eb6c:	add	fp, sp, #16
   1eb70:	mov	r5, r0
   1eb74:	ldr	r0, [r1]
   1eb78:	mvn	r4, #0
   1eb7c:	cmp	r0, #0
   1eb80:	beq	1ebb0 <__assert_fail@plt+0xcb24>
   1eb84:	add	r7, r1, #4
   1eb88:	mov	r6, #0
   1eb8c:	mov	r1, r5
   1eb90:	bl	11bd0 <strcmp@plt>
   1eb94:	cmp	r0, #0
   1eb98:	moveq	r0, r6
   1eb9c:	popeq	{r4, r5, r6, r7, fp, pc}
   1eba0:	ldr	r0, [r7, r6, lsl #2]
   1eba4:	add	r6, r6, #1
   1eba8:	cmp	r0, #0
   1ebac:	bne	1eb8c <__assert_fail@plt+0xcb00>
   1ebb0:	mov	r0, r4
   1ebb4:	pop	{r4, r5, r6, r7, fp, pc}
   1ebb8:	push	{r4, r5, r6, sl, fp, lr}
   1ebbc:	add	fp, sp, #16
   1ebc0:	sub	sp, sp, #8
   1ebc4:	mov	r4, r1
   1ebc8:	movw	r1, #56662	; 0xdd56
   1ebcc:	mov	r5, r0
   1ebd0:	movw	r0, #56635	; 0xdd3b
   1ebd4:	cmn	r2, #1
   1ebd8:	mov	r2, #5
   1ebdc:	movt	r0, #2
   1ebe0:	movt	r1, #2
   1ebe4:	moveq	r1, r0
   1ebe8:	mov	r0, #0
   1ebec:	bl	11cb4 <dcgettext@plt>
   1ebf0:	mov	r6, r0
   1ebf4:	mov	r0, #0
   1ebf8:	mov	r1, #8
   1ebfc:	mov	r2, r4
   1ec00:	bl	26750 <_obstack_memory_used@@Base+0x16dc>
   1ec04:	mov	r4, r0
   1ec08:	mov	r0, #1
   1ec0c:	mov	r1, r5
   1ec10:	bl	26d10 <_obstack_memory_used@@Base+0x1c9c>
   1ec14:	str	r0, [sp]
   1ec18:	mov	r0, #0
   1ec1c:	mov	r1, #0
   1ec20:	mov	r2, r6
   1ec24:	mov	r3, r4
   1ec28:	bl	11db0 <error@plt>
   1ec2c:	sub	sp, fp, #16
   1ec30:	pop	{r4, r5, r6, sl, fp, pc}
   1ec34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ec38:	add	fp, sp, #28
   1ec3c:	sub	sp, sp, #4
   1ec40:	mov	r5, r1
   1ec44:	movw	r1, #56691	; 0xdd73
   1ec48:	mov	sl, r2
   1ec4c:	mov	r7, r0
   1ec50:	mov	r0, #0
   1ec54:	mov	r2, #5
   1ec58:	mov	r8, #0
   1ec5c:	movt	r1, #2
   1ec60:	bl	11cb4 <dcgettext@plt>
   1ec64:	movw	r4, #62216	; 0xf308
   1ec68:	movt	r4, #3
   1ec6c:	ldr	r1, [r4]
   1ec70:	bl	11b94 <fputs_unlocked@plt>
   1ec74:	ldr	r6, [r7]
   1ec78:	cmp	r6, #0
   1ec7c:	beq	1ed1c <__assert_fail@plt+0xcc90>
   1ec80:	add	r9, r7, #4
   1ec84:	mov	r7, #0
   1ec88:	str	sl, [sp]
   1ec8c:	cmp	r8, #0
   1ec90:	beq	1ecac <__assert_fail@plt+0xcc20>
   1ec94:	mov	r0, r7
   1ec98:	mov	r1, r5
   1ec9c:	mov	r2, sl
   1eca0:	bl	11c9c <memcmp@plt>
   1eca4:	cmp	r0, #0
   1eca8:	beq	1ecd8 <__assert_fail@plt+0xcc4c>
   1ecac:	ldr	r7, [r4]
   1ecb0:	mov	r0, r6
   1ecb4:	bl	26d20 <_obstack_memory_used@@Base+0x1cac>
   1ecb8:	movw	r2, #56712	; 0xdd88
   1ecbc:	mov	r3, r0
   1ecc0:	mov	r0, r7
   1ecc4:	mov	r1, #1
   1ecc8:	movt	r2, #2
   1eccc:	bl	11f24 <__fprintf_chk@plt>
   1ecd0:	mov	r7, r5
   1ecd4:	b	1ed08 <__assert_fail@plt+0xcc7c>
   1ecd8:	mov	sl, r9
   1ecdc:	ldr	r9, [r4]
   1ece0:	mov	r0, r6
   1ece4:	bl	26d20 <_obstack_memory_used@@Base+0x1cac>
   1ece8:	mov	r3, r0
   1ecec:	mov	r0, r9
   1ecf0:	mov	r9, sl
   1ecf4:	ldr	sl, [sp]
   1ecf8:	movw	r2, #56720	; 0xdd90
   1ecfc:	mov	r1, #1
   1ed00:	movt	r2, #2
   1ed04:	bl	11f24 <__fprintf_chk@plt>
   1ed08:	ldr	r6, [r9, -r8, lsl #2]
   1ed0c:	add	r5, r5, sl
   1ed10:	sub	r8, r8, #1
   1ed14:	cmp	r6, #0
   1ed18:	bne	1ec8c <__assert_fail@plt+0xcc00>
   1ed1c:	ldr	r0, [r4]
   1ed20:	ldr	r1, [r0, #20]
   1ed24:	ldr	r2, [r0, #24]
   1ed28:	cmp	r1, r2
   1ed2c:	addcc	r2, r1, #1
   1ed30:	strcc	r2, [r0, #20]
   1ed34:	movcc	r0, #10
   1ed38:	strbcc	r0, [r1]
   1ed3c:	subcc	sp, fp, #28
   1ed40:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed44:	mov	r1, #10
   1ed48:	sub	sp, fp, #28
   1ed4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed50:	b	11f54 <__overflow@plt>
   1ed54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed58:	add	fp, sp, #28
   1ed5c:	sub	sp, sp, #20
   1ed60:	mov	r9, r0
   1ed64:	ldr	r0, [fp, #16]
   1ed68:	mov	r8, r3
   1ed6c:	mov	sl, r2
   1ed70:	mov	r7, r1
   1ed74:	cmp	r0, #0
   1ed78:	beq	1ee50 <__assert_fail@plt+0xcdc4>
   1ed7c:	mov	r0, r7
   1ed80:	str	r9, [sp, #8]
   1ed84:	str	r8, [sp, #16]
   1ed88:	bl	11eac <strlen@plt>
   1ed8c:	ldr	r9, [sl]
   1ed90:	cmp	r9, #0
   1ed94:	beq	1ee90 <__assert_fail@plt+0xce04>
   1ed98:	str	sl, [sp, #4]
   1ed9c:	add	r8, sl, #4
   1eda0:	ldr	sl, [sp, #16]
   1eda4:	mov	r4, r0
   1eda8:	mov	r0, #0
   1edac:	mvn	r6, #0
   1edb0:	mov	r5, #0
   1edb4:	str	r0, [sp, #12]
   1edb8:	mov	r0, r9
   1edbc:	mov	r1, r7
   1edc0:	mov	r2, r4
   1edc4:	bl	1202c <strncmp@plt>
   1edc8:	cmp	r0, #0
   1edcc:	bne	1ee1c <__assert_fail@plt+0xcd90>
   1edd0:	mov	r0, r9
   1edd4:	bl	11eac <strlen@plt>
   1edd8:	cmp	r0, r4
   1eddc:	beq	1ee9c <__assert_fail@plt+0xce10>
   1ede0:	cmn	r6, #1
   1ede4:	beq	1ee18 <__assert_fail@plt+0xcd8c>
   1ede8:	ldr	r0, [sp, #16]
   1edec:	cmp	r0, #0
   1edf0:	beq	1ee0c <__assert_fail@plt+0xcd80>
   1edf4:	ldr	r2, [fp, #8]
   1edf8:	mov	r1, sl
   1edfc:	mla	r0, r6, r2, r0
   1ee00:	bl	11c9c <memcmp@plt>
   1ee04:	cmp	r0, #0
   1ee08:	beq	1ee1c <__assert_fail@plt+0xcd90>
   1ee0c:	mov	r0, #1
   1ee10:	str	r0, [sp, #12]
   1ee14:	b	1ee1c <__assert_fail@plt+0xcd90>
   1ee18:	mov	r6, r5
   1ee1c:	ldr	r9, [r8, r5, lsl #2]
   1ee20:	ldr	r0, [fp, #8]
   1ee24:	add	r5, r5, #1
   1ee28:	add	sl, sl, r0
   1ee2c:	cmp	r9, #0
   1ee30:	bne	1edb8 <__assert_fail@plt+0xcd2c>
   1ee34:	ldr	r0, [sp, #12]
   1ee38:	ldr	r8, [sp, #16]
   1ee3c:	ldr	sl, [sp, #4]
   1ee40:	ldr	r9, [sp, #8]
   1ee44:	tst	r0, #1
   1ee48:	beq	1eeac <__assert_fail@plt+0xce20>
   1ee4c:	b	1eeb8 <__assert_fail@plt+0xce2c>
   1ee50:	ldr	r0, [sl]
   1ee54:	movw	r4, #56635	; 0xdd3b
   1ee58:	movt	r4, #2
   1ee5c:	cmp	r0, #0
   1ee60:	beq	1eecc <__assert_fail@plt+0xce40>
   1ee64:	add	r5, sl, #4
   1ee68:	mov	r6, #0
   1ee6c:	mov	r1, r7
   1ee70:	bl	11bd0 <strcmp@plt>
   1ee74:	cmp	r0, #0
   1ee78:	beq	1eeac <__assert_fail@plt+0xce20>
   1ee7c:	ldr	r0, [r5, r6, lsl #2]
   1ee80:	add	r6, r6, #1
   1ee84:	cmp	r0, #0
   1ee88:	bne	1ee6c <__assert_fail@plt+0xcde0>
   1ee8c:	b	1eecc <__assert_fail@plt+0xce40>
   1ee90:	ldr	r8, [sp, #16]
   1ee94:	ldr	r9, [sp, #8]
   1ee98:	b	1eec4 <__assert_fail@plt+0xce38>
   1ee9c:	ldr	r8, [sp, #16]
   1eea0:	ldr	sl, [sp, #4]
   1eea4:	ldr	r9, [sp, #8]
   1eea8:	mov	r6, r5
   1eeac:	cmn	r6, #1
   1eeb0:	bgt	1ef34 <__assert_fail@plt+0xcea8>
   1eeb4:	beq	1eec4 <__assert_fail@plt+0xce38>
   1eeb8:	movw	r4, #56662	; 0xdd56
   1eebc:	movt	r4, #2
   1eec0:	b	1eecc <__assert_fail@plt+0xce40>
   1eec4:	movw	r4, #56635	; 0xdd3b
   1eec8:	movt	r4, #2
   1eecc:	ldr	r6, [fp, #12]
   1eed0:	mov	r0, #0
   1eed4:	mov	r1, r4
   1eed8:	mov	r2, #5
   1eedc:	bl	11cb4 <dcgettext@plt>
   1eee0:	mov	r4, r0
   1eee4:	mov	r0, #0
   1eee8:	mov	r1, #8
   1eeec:	mov	r2, r7
   1eef0:	bl	26750 <_obstack_memory_used@@Base+0x16dc>
   1eef4:	mov	r5, r0
   1eef8:	mov	r0, #1
   1eefc:	mov	r1, r9
   1ef00:	bl	26d10 <_obstack_memory_used@@Base+0x1c9c>
   1ef04:	str	r0, [sp]
   1ef08:	mov	r0, #0
   1ef0c:	mov	r1, #0
   1ef10:	mov	r2, r4
   1ef14:	mov	r3, r5
   1ef18:	bl	11db0 <error@plt>
   1ef1c:	ldr	r2, [fp, #8]
   1ef20:	mov	r0, sl
   1ef24:	mov	r1, r8
   1ef28:	bl	1ec34 <__assert_fail@plt+0xcba8>
   1ef2c:	blx	r6
   1ef30:	mvn	r6, #0
   1ef34:	mov	r0, r6
   1ef38:	sub	sp, fp, #28
   1ef3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef40:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ef44:	add	fp, sp, #24
   1ef48:	ldr	r6, [r1]
   1ef4c:	cmp	r6, #0
   1ef50:	beq	1efb4 <__assert_fail@plt+0xcf28>
   1ef54:	mov	r8, r1
   1ef58:	mov	r7, r2
   1ef5c:	mov	r1, r2
   1ef60:	mov	r2, r3
   1ef64:	mov	r4, r3
   1ef68:	mov	r9, r0
   1ef6c:	bl	11c9c <memcmp@plt>
   1ef70:	cmp	r0, #0
   1ef74:	beq	1efac <__assert_fail@plt+0xcf20>
   1ef78:	add	r7, r7, r4
   1ef7c:	add	r5, r8, #4
   1ef80:	ldr	r6, [r5]
   1ef84:	cmp	r6, #0
   1ef88:	beq	1efb4 <__assert_fail@plt+0xcf28>
   1ef8c:	mov	r0, r9
   1ef90:	mov	r1, r7
   1ef94:	mov	r2, r4
   1ef98:	bl	11c9c <memcmp@plt>
   1ef9c:	add	r7, r7, r4
   1efa0:	add	r5, r5, #4
   1efa4:	cmp	r0, #0
   1efa8:	bne	1ef80 <__assert_fail@plt+0xcef4>
   1efac:	mov	r0, r6
   1efb0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1efb4:	mov	r6, #0
   1efb8:	mov	r0, r6
   1efbc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1efc0:	sub	r0, r0, #1
   1efc4:	ldrb	r3, [r0, #1]!
   1efc8:	cmp	r3, #47	; 0x2f
   1efcc:	beq	1efc4 <__assert_fail@plt+0xcf38>
   1efd0:	mov	r2, #0
   1efd4:	mov	r1, r0
   1efd8:	b	1eff4 <__assert_fail@plt+0xcf68>
   1efdc:	cmp	r3, #0
   1efe0:	bxeq	lr
   1efe4:	tst	r2, #1
   1efe8:	mov	r2, #0
   1efec:	movne	r0, r1
   1eff0:	ldrb	r3, [r1, #1]!
   1eff4:	uxtb	r3, r3
   1eff8:	cmp	r3, #47	; 0x2f
   1effc:	bne	1efdc <__assert_fail@plt+0xcf50>
   1f000:	ldrb	r3, [r1, #1]!
   1f004:	mov	r2, #1
   1f008:	b	1eff4 <__assert_fail@plt+0xcf68>
   1f00c:	push	{r4, sl, fp, lr}
   1f010:	add	fp, sp, #8
   1f014:	mov	r4, r0
   1f018:	bl	11eac <strlen@plt>
   1f01c:	mov	r1, r0
   1f020:	sub	r2, r4, #1
   1f024:	mov	r0, r1
   1f028:	cmp	r1, #2
   1f02c:	popcc	{r4, sl, fp, pc}
   1f030:	ldrb	r3, [r2, r0]
   1f034:	sub	r1, r0, #1
   1f038:	cmp	r3, #47	; 0x2f
   1f03c:	beq	1f024 <__assert_fail@plt+0xcf98>
   1f040:	pop	{r4, sl, fp, pc}
   1f044:	sub	r2, r0, #65	; 0x41
   1f048:	mov	r1, r0
   1f04c:	mov	r0, #1
   1f050:	cmp	r2, #26
   1f054:	subcs	r2, r1, #97	; 0x61
   1f058:	cmpcs	r2, #26
   1f05c:	bcs	1f064 <__assert_fail@plt+0xcfd8>
   1f060:	bx	lr
   1f064:	sub	r1, r1, #48	; 0x30
   1f068:	cmp	r1, #10
   1f06c:	movcs	r0, #0
   1f070:	bx	lr
   1f074:	sub	r2, r0, #65	; 0x41
   1f078:	mov	r1, r0
   1f07c:	mov	r0, #1
   1f080:	cmp	r2, #26
   1f084:	subcs	r1, r1, #97	; 0x61
   1f088:	cmpcs	r1, #26
   1f08c:	movcs	r0, #0
   1f090:	bx	lr
   1f094:	mov	r1, #0
   1f098:	cmp	r0, #128	; 0x80
   1f09c:	movwcc	r1, #1
   1f0a0:	mov	r0, r1
   1f0a4:	bx	lr
   1f0a8:	sub	r1, r0, #9
   1f0ac:	sub	r0, r0, #32
   1f0b0:	clz	r1, r1
   1f0b4:	clz	r0, r0
   1f0b8:	lsr	r1, r1, #5
   1f0bc:	lsr	r0, r0, #5
   1f0c0:	orr	r0, r0, r1
   1f0c4:	bx	lr
   1f0c8:	mov	r1, r0
   1f0cc:	mov	r0, #1
   1f0d0:	cmp	r1, #32
   1f0d4:	bxcc	lr
   1f0d8:	cmp	r1, #127	; 0x7f
   1f0dc:	movne	r0, #0
   1f0e0:	bx	lr
   1f0e4:	sub	r1, r0, #48	; 0x30
   1f0e8:	mov	r0, #0
   1f0ec:	cmp	r1, #10
   1f0f0:	movwcc	r0, #1
   1f0f4:	bx	lr
   1f0f8:	sub	r1, r0, #33	; 0x21
   1f0fc:	mov	r0, #0
   1f100:	cmp	r1, #94	; 0x5e
   1f104:	movwcc	r0, #1
   1f108:	bx	lr
   1f10c:	sub	r1, r0, #97	; 0x61
   1f110:	mov	r0, #0
   1f114:	cmp	r1, #26
   1f118:	movwcc	r0, #1
   1f11c:	bx	lr
   1f120:	sub	r1, r0, #32
   1f124:	mov	r0, #0
   1f128:	cmp	r1, #95	; 0x5f
   1f12c:	movwcc	r0, #1
   1f130:	bx	lr
   1f134:	sub	r1, r0, #33	; 0x21
   1f138:	cmp	r1, #93	; 0x5d
   1f13c:	bhi	1f2c8 <__assert_fail@plt+0xd23c>
   1f140:	add	r2, pc, #4
   1f144:	mov	r0, #1
   1f148:	ldr	pc, [r2, r1, lsl #2]
   1f14c:	andeq	pc, r1, r4, asr #5
   1f150:	andeq	pc, r1, r4, asr #5
   1f154:	andeq	pc, r1, r4, asr #5
   1f158:	andeq	pc, r1, r4, asr #5
   1f15c:	andeq	pc, r1, r4, asr #5
   1f160:	andeq	pc, r1, r4, asr #5
   1f164:	andeq	pc, r1, r4, asr #5
   1f168:	andeq	pc, r1, r4, asr #5
   1f16c:	andeq	pc, r1, r4, asr #5
   1f170:	andeq	pc, r1, r4, asr #5
   1f174:	andeq	pc, r1, r4, asr #5
   1f178:	andeq	pc, r1, r4, asr #5
   1f17c:	andeq	pc, r1, r4, asr #5
   1f180:	andeq	pc, r1, r4, asr #5
   1f184:	andeq	pc, r1, r4, asr #5
   1f188:	andeq	pc, r1, r8, asr #5
   1f18c:	andeq	pc, r1, r8, asr #5
   1f190:	andeq	pc, r1, r8, asr #5
   1f194:	andeq	pc, r1, r8, asr #5
   1f198:	andeq	pc, r1, r8, asr #5
   1f19c:	andeq	pc, r1, r8, asr #5
   1f1a0:	andeq	pc, r1, r8, asr #5
   1f1a4:	andeq	pc, r1, r8, asr #5
   1f1a8:	andeq	pc, r1, r8, asr #5
   1f1ac:	andeq	pc, r1, r8, asr #5
   1f1b0:	andeq	pc, r1, r4, asr #5
   1f1b4:	andeq	pc, r1, r4, asr #5
   1f1b8:	andeq	pc, r1, r4, asr #5
   1f1bc:	andeq	pc, r1, r4, asr #5
   1f1c0:	andeq	pc, r1, r4, asr #5
   1f1c4:	andeq	pc, r1, r4, asr #5
   1f1c8:	andeq	pc, r1, r4, asr #5
   1f1cc:	andeq	pc, r1, r8, asr #5
   1f1d0:	andeq	pc, r1, r8, asr #5
   1f1d4:	andeq	pc, r1, r8, asr #5
   1f1d8:	andeq	pc, r1, r8, asr #5
   1f1dc:	andeq	pc, r1, r8, asr #5
   1f1e0:	andeq	pc, r1, r8, asr #5
   1f1e4:	andeq	pc, r1, r8, asr #5
   1f1e8:	andeq	pc, r1, r8, asr #5
   1f1ec:	andeq	pc, r1, r8, asr #5
   1f1f0:	andeq	pc, r1, r8, asr #5
   1f1f4:	andeq	pc, r1, r8, asr #5
   1f1f8:	andeq	pc, r1, r8, asr #5
   1f1fc:	andeq	pc, r1, r8, asr #5
   1f200:	andeq	pc, r1, r8, asr #5
   1f204:	andeq	pc, r1, r8, asr #5
   1f208:	andeq	pc, r1, r8, asr #5
   1f20c:	andeq	pc, r1, r8, asr #5
   1f210:	andeq	pc, r1, r8, asr #5
   1f214:	andeq	pc, r1, r8, asr #5
   1f218:	andeq	pc, r1, r8, asr #5
   1f21c:	andeq	pc, r1, r8, asr #5
   1f220:	andeq	pc, r1, r8, asr #5
   1f224:	andeq	pc, r1, r8, asr #5
   1f228:	andeq	pc, r1, r8, asr #5
   1f22c:	andeq	pc, r1, r8, asr #5
   1f230:	andeq	pc, r1, r8, asr #5
   1f234:	andeq	pc, r1, r4, asr #5
   1f238:	andeq	pc, r1, r4, asr #5
   1f23c:	andeq	pc, r1, r4, asr #5
   1f240:	andeq	pc, r1, r4, asr #5
   1f244:	andeq	pc, r1, r4, asr #5
   1f248:	andeq	pc, r1, r4, asr #5
   1f24c:	andeq	pc, r1, r8, asr #5
   1f250:	andeq	pc, r1, r8, asr #5
   1f254:	andeq	pc, r1, r8, asr #5
   1f258:	andeq	pc, r1, r8, asr #5
   1f25c:	andeq	pc, r1, r8, asr #5
   1f260:	andeq	pc, r1, r8, asr #5
   1f264:	andeq	pc, r1, r8, asr #5
   1f268:	andeq	pc, r1, r8, asr #5
   1f26c:	andeq	pc, r1, r8, asr #5
   1f270:	andeq	pc, r1, r8, asr #5
   1f274:	andeq	pc, r1, r8, asr #5
   1f278:	andeq	pc, r1, r8, asr #5
   1f27c:	andeq	pc, r1, r8, asr #5
   1f280:	andeq	pc, r1, r8, asr #5
   1f284:	andeq	pc, r1, r8, asr #5
   1f288:	andeq	pc, r1, r8, asr #5
   1f28c:	andeq	pc, r1, r8, asr #5
   1f290:	andeq	pc, r1, r8, asr #5
   1f294:	andeq	pc, r1, r8, asr #5
   1f298:	andeq	pc, r1, r8, asr #5
   1f29c:	andeq	pc, r1, r8, asr #5
   1f2a0:	andeq	pc, r1, r8, asr #5
   1f2a4:	andeq	pc, r1, r8, asr #5
   1f2a8:	andeq	pc, r1, r8, asr #5
   1f2ac:	andeq	pc, r1, r8, asr #5
   1f2b0:	andeq	pc, r1, r8, asr #5
   1f2b4:	andeq	pc, r1, r4, asr #5
   1f2b8:	andeq	pc, r1, r4, asr #5
   1f2bc:	andeq	pc, r1, r4, asr #5
   1f2c0:	andeq	pc, r1, r4, asr #5
   1f2c4:	bx	lr
   1f2c8:	mov	r0, #0
   1f2cc:	bx	lr
   1f2d0:	sub	r0, r0, #9
   1f2d4:	cmp	r0, #23
   1f2d8:	movhi	r0, #0
   1f2dc:	bxhi	lr
   1f2e0:	movw	r1, #31
   1f2e4:	bic	r0, r0, #-16777216	; 0xff000000
   1f2e8:	mov	r2, #1
   1f2ec:	movt	r1, #128	; 0x80
   1f2f0:	and	r0, r2, r1, lsr r0
   1f2f4:	bx	lr
   1f2f8:	sub	r1, r0, #65	; 0x41
   1f2fc:	mov	r0, #0
   1f300:	cmp	r1, #26
   1f304:	movwcc	r0, #1
   1f308:	bx	lr
   1f30c:	sub	r2, r0, #48	; 0x30
   1f310:	mov	r1, r0
   1f314:	mov	r0, #1
   1f318:	cmp	r2, #22
   1f31c:	bhi	1f334 <__assert_fail@plt+0xd2a8>
   1f320:	movw	r3, #1023	; 0x3ff
   1f324:	mov	ip, #1
   1f328:	movt	r3, #126	; 0x7e
   1f32c:	tst	r3, ip, lsl r2
   1f330:	bxne	lr
   1f334:	sub	r1, r1, #97	; 0x61
   1f338:	cmp	r1, #6
   1f33c:	movcs	r0, #0
   1f340:	bxcs	lr
   1f344:	bx	lr
   1f348:	sub	r1, r0, #65	; 0x41
   1f34c:	cmp	r1, #26
   1f350:	addcc	r0, r0, #32
   1f354:	bx	lr
   1f358:	sub	r1, r0, #97	; 0x61
   1f35c:	cmp	r1, #26
   1f360:	subcc	r0, r0, #32
   1f364:	bx	lr
   1f368:	push	{fp, lr}
   1f36c:	mov	fp, sp
   1f370:	cmp	r0, r1
   1f374:	mov	r3, #0
   1f378:	cmpne	r2, #0
   1f37c:	bne	1f388 <__assert_fail@plt+0xd2fc>
   1f380:	mov	r0, r3
   1f384:	pop	{fp, pc}
   1f388:	rsb	lr, r2, #1
   1f38c:	ldrb	r2, [r1]
   1f390:	ldrb	ip, [r0]
   1f394:	sub	r3, r2, #65	; 0x41
   1f398:	cmp	r3, #26
   1f39c:	sub	r3, ip, #65	; 0x41
   1f3a0:	addcc	r2, r2, #32
   1f3a4:	cmp	r3, #26
   1f3a8:	addcc	ip, ip, #32
   1f3ac:	cmp	lr, #0
   1f3b0:	uxtb	ip, ip
   1f3b4:	beq	1f3e0 <__assert_fail@plt+0xd354>
   1f3b8:	cmp	ip, #0
   1f3bc:	beq	1f3dc <__assert_fail@plt+0xd350>
   1f3c0:	uxtb	r3, r2
   1f3c4:	add	lr, lr, #1
   1f3c8:	add	r1, r1, #1
   1f3cc:	add	r0, r0, #1
   1f3d0:	cmp	ip, r3
   1f3d4:	beq	1f38c <__assert_fail@plt+0xd300>
   1f3d8:	b	1f3e0 <__assert_fail@plt+0xd354>
   1f3dc:	mov	ip, #0
   1f3e0:	uxtb	r0, r2
   1f3e4:	sub	r3, ip, r0
   1f3e8:	mov	r0, r3
   1f3ec:	pop	{fp, pc}
   1f3f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f3f4:	add	fp, sp, #28
   1f3f8:	sub	sp, sp, #180	; 0xb4
   1f3fc:	sub	sp, sp, #3072	; 0xc00
   1f400:	mov	r8, r0
   1f404:	and	r7, r1, #3
   1f408:	sub	r0, r1, #1
   1f40c:	tst	r0, r7
   1f410:	beq	1f430 <__assert_fail@plt+0xd3a4>
   1f414:	bl	11ed0 <__errno_location@plt>
   1f418:	mov	r1, #22
   1f41c:	mov	r4, #0
   1f420:	str	r1, [r0]
   1f424:	mov	r0, r4
   1f428:	sub	sp, fp, #28
   1f42c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f430:	cmp	r8, #0
   1f434:	beq	1f414 <__assert_fail@plt+0xd388>
   1f438:	ldrb	r0, [r8]
   1f43c:	cmp	r0, #0
   1f440:	beq	1f4b8 <__assert_fail@plt+0xd42c>
   1f444:	sub	lr, fp, #1024	; 0x400
   1f448:	mov	r4, r1
   1f44c:	mov	r1, #1024	; 0x400
   1f450:	cmp	r0, #47	; 0x2f
   1f454:	sub	r2, lr, #40	; 0x28
   1f458:	str	r1, [fp, #-1060]	; 0xfffffbdc
   1f45c:	add	r2, r2, #8
   1f460:	str	r2, [sp, #12]
   1f464:	str	r2, [fp, #-1064]	; 0xfffffbd8
   1f468:	add	r2, sp, #1184	; 0x4a0
   1f46c:	add	r2, r2, #8
   1f470:	str	r2, [sp, #1184]	; 0x4a0
   1f474:	str	r2, [sp, #16]
   1f478:	add	r2, sp, #48	; 0x30
   1f47c:	str	r1, [sp, #1188]	; 0x4a4
   1f480:	add	r5, r2, #8
   1f484:	mov	r0, r5
   1f488:	str	r5, [sp, #48]	; 0x30
   1f48c:	str	r1, [sp, #52]	; 0x34
   1f490:	str	r5, [sp, #8]
   1f494:	bne	1f4c4 <__assert_fail@plt+0xd438>
   1f498:	mov	r1, r8
   1f49c:	mov	r2, #0
   1f4a0:	mov	r3, #1024	; 0x400
   1f4a4:	bl	12080 <__mempcpy_chk@plt>
   1f4a8:	mov	r6, r0
   1f4ac:	mov	r0, #47	; 0x2f
   1f4b0:	strb	r0, [r6], #1
   1f4b4:	b	1f4e4 <__assert_fail@plt+0xd458>
   1f4b8:	bl	11ed0 <__errno_location@plt>
   1f4bc:	mov	r1, #2
   1f4c0:	b	1f41c <__assert_fail@plt+0xd390>
   1f4c4:	mov	r1, #1024	; 0x400
   1f4c8:	bl	11e7c <getcwd@plt>
   1f4cc:	cmp	r0, #0
   1f4d0:	beq	1f9f4 <__assert_fail@plt+0xd968>
   1f4d4:	mov	r0, r5
   1f4d8:	mov	r1, #0
   1f4dc:	bl	11d08 <rawmemchr@plt>
   1f4e0:	mov	r6, r0
   1f4e4:	ldrb	r0, [r8]
   1f4e8:	cmp	r0, #0
   1f4ec:	beq	1f9b8 <__assert_fail@plt+0xd92c>
   1f4f0:	and	r1, r4, #4
   1f4f4:	add	r9, sp, #48	; 0x30
   1f4f8:	str	r7, [sp, #32]
   1f4fc:	str	r1, [sp, #40]	; 0x28
   1f500:	mov	r1, #0
   1f504:	str	r1, [sp, #24]
   1f508:	mov	r1, #0
   1f50c:	str	r1, [sp, #36]	; 0x24
   1f510:	mov	r1, #0
   1f514:	str	r1, [sp, #20]
   1f518:	b	1f960 <__assert_fail@plt+0xd8d4>
   1f51c:	uxtb	r0, r0
   1f520:	cmp	r0, #46	; 0x2e
   1f524:	ldrbeq	r0, [r8, #1]
   1f528:	cmpeq	r0, #46	; 0x2e
   1f52c:	bne	1f56c <__assert_fail@plt+0xd4e0>
   1f530:	add	r0, r5, #1
   1f534:	cmp	r6, r0
   1f538:	bls	1f660 <__assert_fail@plt+0xd5d4>
   1f53c:	sub	r0, r6, #1
   1f540:	mov	r6, r0
   1f544:	cmp	r0, r5
   1f548:	bls	1f660 <__assert_fail@plt+0xd5d4>
   1f54c:	mov	r0, r6
   1f550:	ldrb	r1, [r0, #-1]!
   1f554:	cmp	r1, #47	; 0x2f
   1f558:	bne	1f540 <__assert_fail@plt+0xd4b4>
   1f55c:	b	1f660 <__assert_fail@plt+0xd5d4>
   1f560:	uxtb	r0, r0
   1f564:	cmp	r0, #46	; 0x2e
   1f568:	beq	1f660 <__assert_fail@plt+0xd5d4>
   1f56c:	ldrb	r0, [r6, #-1]
   1f570:	add	r4, r2, #2
   1f574:	str	r2, [sp, #44]	; 0x2c
   1f578:	cmp	r0, #47	; 0x2f
   1f57c:	movne	r0, #47	; 0x2f
   1f580:	strbne	r0, [r6], #1
   1f584:	ldr	r0, [sp, #52]	; 0x34
   1f588:	add	r0, r5, r0
   1f58c:	sub	r0, r0, r6
   1f590:	cmp	r0, r4
   1f594:	bcs	1f5cc <__assert_fail@plt+0xd540>
   1f598:	mov	r0, r9
   1f59c:	bl	26f30 <_obstack_memory_used@@Base+0x1ebc>
   1f5a0:	cmp	r0, #0
   1f5a4:	beq	1fab8 <__assert_fail@plt+0xda2c>
   1f5a8:	sub	r0, r6, r5
   1f5ac:	ldr	r5, [sp, #48]	; 0x30
   1f5b0:	ldr	r1, [sp, #52]	; 0x34
   1f5b4:	add	r6, r5, r0
   1f5b8:	add	r0, r5, r1
   1f5bc:	sub	r0, r0, r6
   1f5c0:	cmp	r0, r4
   1f5c4:	bcc	1f598 <__assert_fail@plt+0xd50c>
   1f5c8:	ldr	r2, [sp, #44]	; 0x2c
   1f5cc:	mov	r0, r6
   1f5d0:	mov	r1, r8
   1f5d4:	mvn	r3, #0
   1f5d8:	bl	12080 <__mempcpy_chk@plt>
   1f5dc:	mov	r6, r0
   1f5e0:	mov	r0, #0
   1f5e4:	strb	r0, [r6]
   1f5e8:	ldr	r0, [sp, #40]	; 0x28
   1f5ec:	cmp	r0, #0
   1f5f0:	bne	1f654 <__assert_fail@plt+0xd5c8>
   1f5f4:	ldr	r0, [sp, #1188]	; 0x4a4
   1f5f8:	ldr	r7, [sp, #1184]	; 0x4a0
   1f5fc:	sub	r9, r0, #1
   1f600:	mov	r0, r5
   1f604:	mov	r1, r7
   1f608:	mov	r2, r9
   1f60c:	bl	11d38 <readlink@plt>
   1f610:	cmp	r0, r9
   1f614:	blt	1f62c <__assert_fail@plt+0xd5a0>
   1f618:	add	r0, sp, #1184	; 0x4a0
   1f61c:	bl	26ec0 <_obstack_memory_used@@Base+0x1e4c>
   1f620:	cmp	r0, #0
   1f624:	bne	1f5f4 <__assert_fail@plt+0xd568>
   1f628:	b	1fab8 <__assert_fail@plt+0xda2c>
   1f62c:	mov	r4, r0
   1f630:	cmp	r0, #0
   1f634:	add	r9, sp, #48	; 0x30
   1f638:	blt	1f654 <__assert_fail@plt+0xd5c8>
   1f63c:	ldr	r0, [sp, #24]
   1f640:	cmp	r0, #19
   1f644:	bgt	1f6e8 <__assert_fail@plt+0xd65c>
   1f648:	add	r0, r0, #1
   1f64c:	str	r0, [sp, #24]
   1f650:	b	1f850 <__assert_fail@plt+0xd7c4>
   1f654:	ldr	r7, [sp, #32]
   1f658:	cmp	r7, #2
   1f65c:	bne	1f674 <__assert_fail@plt+0xd5e8>
   1f660:	mov	r8, sl
   1f664:	ldrb	r0, [r8]
   1f668:	cmp	r0, #0
   1f66c:	bne	1f960 <__assert_fail@plt+0xd8d4>
   1f670:	b	1f9c0 <__assert_fail@plt+0xd934>
   1f674:	ldrb	r0, [sl]
   1f678:	cmp	r0, #47	; 0x2f
   1f67c:	bne	1f7b8 <__assert_fail@plt+0xd72c>
   1f680:	mov	r2, sl
   1f684:	mov	r1, r2
   1f688:	ldrb	r3, [r2, #1]!
   1f68c:	cmp	r3, #47	; 0x2f
   1f690:	beq	1f684 <__assert_fail@plt+0xd5f8>
   1f694:	cmp	r3, #46	; 0x2e
   1f698:	bne	1f7b0 <__assert_fail@plt+0xd724>
   1f69c:	add	r2, r1, #2
   1f6a0:	ldrb	r3, [r2]
   1f6a4:	cmp	r3, #47	; 0x2f
   1f6a8:	beq	1f684 <__assert_fail@plt+0xd5f8>
   1f6ac:	cmp	r3, #0
   1f6b0:	beq	1f6cc <__assert_fail@plt+0xd640>
   1f6b4:	cmp	r3, #46	; 0x2e
   1f6b8:	bne	1f7b8 <__assert_fail@plt+0xd72c>
   1f6bc:	ldrb	r1, [r1, #3]
   1f6c0:	cmp	r1, #47	; 0x2f
   1f6c4:	cmpne	r1, #0
   1f6c8:	bne	1f7b8 <__assert_fail@plt+0xd72c>
   1f6cc:	mov	r0, #47	; 0x2f
   1f6d0:	mov	r1, r5
   1f6d4:	mov	r2, #0
   1f6d8:	mov	r3, #512	; 0x200
   1f6dc:	strh	r0, [r6]
   1f6e0:	mvn	r0, #99	; 0x63
   1f6e4:	b	1f7dc <__assert_fail@plt+0xd750>
   1f6e8:	ldrb	r0, [r8]
   1f6ec:	cmp	r0, #0
   1f6f0:	beq	1f850 <__assert_fail@plt+0xd7c4>
   1f6f4:	ldr	r9, [sp, #44]	; 0x2c
   1f6f8:	mov	r0, #0
   1f6fc:	add	lr, sp, #1024	; 0x400
   1f700:	mov	r1, r5
   1f704:	add	r2, lr, #56	; 0x38
   1f708:	strb	r0, [r6, -r9]
   1f70c:	ldrb	r0, [r5]
   1f710:	cmp	r0, #0
   1f714:	movw	r0, #56738	; 0xdda2
   1f718:	movt	r0, #2
   1f71c:	moveq	r1, r0
   1f720:	mov	r0, #3
   1f724:	bl	12008 <__xstat64@plt>
   1f728:	cmp	r0, #0
   1f72c:	bne	1fac8 <__assert_fail@plt+0xda3c>
   1f730:	rsb	r0, r9, #0
   1f734:	ldr	r9, [sp, #20]
   1f738:	ldrb	r1, [r8]
   1f73c:	cmp	r9, #0
   1f740:	strb	r1, [r6, r0]
   1f744:	bne	1f77c <__assert_fail@plt+0xd6f0>
   1f748:	movw	r0, #6240	; 0x1860
   1f74c:	movw	r2, #6096	; 0x17d0
   1f750:	movw	r3, #6152	; 0x1808
   1f754:	mov	r1, #0
   1f758:	movt	r0, #2
   1f75c:	movt	r2, #2
   1f760:	movt	r3, #2
   1f764:	str	r0, [sp]
   1f768:	mov	r0, #7
   1f76c:	bl	209a8 <__assert_fail@plt+0xe91c>
   1f770:	mov	r9, r0
   1f774:	cmp	r0, #0
   1f778:	beq	1fab8 <__assert_fail@plt+0xda2c>
   1f77c:	add	lr, sp, #1024	; 0x400
   1f780:	mov	r0, r9
   1f784:	mov	r1, r8
   1f788:	add	r2, lr, #56	; 0x38
   1f78c:	bl	1fd38 <__assert_fail@plt+0xdcac>
   1f790:	cmp	r0, #0
   1f794:	str	r9, [sp, #20]
   1f798:	beq	1f83c <__assert_fail@plt+0xd7b0>
   1f79c:	ldr	r7, [sp, #32]
   1f7a0:	cmp	r7, #2
   1f7a4:	bne	1fabc <__assert_fail@plt+0xda30>
   1f7a8:	mov	r8, sl
   1f7ac:	b	1f91c <__assert_fail@plt+0xd890>
   1f7b0:	cmp	r3, #0
   1f7b4:	beq	1f6cc <__assert_fail@plt+0xd640>
   1f7b8:	ldr	r1, [sp, #40]	; 0x28
   1f7bc:	cmp	r1, #0
   1f7c0:	beq	1f7ec <__assert_fail@plt+0xd760>
   1f7c4:	cmp	r0, #0
   1f7c8:	bne	1f660 <__assert_fail@plt+0xd5d4>
   1f7cc:	mvn	r0, #99	; 0x63
   1f7d0:	mov	r1, r5
   1f7d4:	mov	r2, #0
   1f7d8:	mov	r3, #512	; 0x200
   1f7dc:	bl	11c3c <faccessat@plt>
   1f7e0:	cmp	r0, #0
   1f7e4:	bne	1f7fc <__assert_fail@plt+0xd770>
   1f7e8:	b	1f660 <__assert_fail@plt+0xd5d4>
   1f7ec:	bl	11ed0 <__errno_location@plt>
   1f7f0:	ldr	r0, [r0]
   1f7f4:	cmp	r0, #22
   1f7f8:	beq	1f660 <__assert_fail@plt+0xd5d4>
   1f7fc:	mov	r4, #1
   1f800:	cmp	r7, #1
   1f804:	bne	1f9e0 <__assert_fail@plt+0xd954>
   1f808:	bl	11ed0 <__errno_location@plt>
   1f80c:	ldr	r0, [r0]
   1f810:	cmp	r0, #2
   1f814:	bne	1f9e0 <__assert_fail@plt+0xd954>
   1f818:	movw	r1, #40672	; 0x9ee0
   1f81c:	mov	r0, sl
   1f820:	movt	r1, #2
   1f824:	bl	12074 <strspn@plt>
   1f828:	ldrb	r0, [sl, r0]
   1f82c:	mov	r8, sl
   1f830:	cmp	r0, #0
   1f834:	beq	1f664 <__assert_fail@plt+0xd5d8>
   1f838:	b	1f9e0 <__assert_fail@plt+0xd954>
   1f83c:	add	lr, sp, #1024	; 0x400
   1f840:	mov	r0, r9
   1f844:	mov	r1, r8
   1f848:	add	r2, lr, #56	; 0x38
   1f84c:	bl	1fcbc <__assert_fail@plt+0xdc30>
   1f850:	mov	r0, #0
   1f854:	strb	r0, [r7, r4]
   1f858:	ldr	r0, [sp, #36]	; 0x24
   1f85c:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   1f860:	tst	r0, #1
   1f864:	ldr	r0, [sp, #28]
   1f868:	subne	r0, sl, r8
   1f86c:	str	r0, [sp, #28]
   1f870:	mov	r0, sl
   1f874:	bl	11eac <strlen@plt>
   1f878:	adds	r9, r0, r4
   1f87c:	str	r0, [sp, #44]	; 0x2c
   1f880:	bcs	1fab8 <__assert_fail@plt+0xda2c>
   1f884:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   1f888:	cmp	r0, r9
   1f88c:	bhi	1f8b4 <__assert_fail@plt+0xd828>
   1f890:	sub	lr, fp, #1024	; 0x400
   1f894:	sub	r0, lr, #40	; 0x28
   1f898:	bl	26f30 <_obstack_memory_used@@Base+0x1ebc>
   1f89c:	cmp	r0, #0
   1f8a0:	beq	1fab8 <__assert_fail@plt+0xda2c>
   1f8a4:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   1f8a8:	cmp	r0, r9
   1f8ac:	bls	1f890 <__assert_fail@plt+0xd804>
   1f8b0:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   1f8b4:	ldr	r0, [sp, #36]	; 0x24
   1f8b8:	ldr	r1, [sp, #44]	; 0x2c
   1f8bc:	tst	r0, #1
   1f8c0:	ldr	r0, [sp, #28]
   1f8c4:	add	r2, r1, #1
   1f8c8:	addne	sl, r8, r0
   1f8cc:	add	r0, r8, r4
   1f8d0:	mov	r1, sl
   1f8d4:	bl	11c24 <memmove@plt>
   1f8d8:	mov	r0, r8
   1f8dc:	mov	r1, r7
   1f8e0:	mov	r2, r4
   1f8e4:	bl	11c60 <memcpy@plt>
   1f8e8:	ldrb	r0, [r7]
   1f8ec:	cmp	r0, #47	; 0x2f
   1f8f0:	bne	1f924 <__assert_fail@plt+0xd898>
   1f8f4:	mov	r0, r5
   1f8f8:	mov	r1, r7
   1f8fc:	mov	r2, #0
   1f900:	mvn	r3, #0
   1f904:	bl	12080 <__mempcpy_chk@plt>
   1f908:	mov	r6, r0
   1f90c:	mov	r0, #47	; 0x2f
   1f910:	strb	r0, [r6], #1
   1f914:	mov	r0, #1
   1f918:	str	r0, [sp, #36]	; 0x24
   1f91c:	add	r9, sp, #48	; 0x30
   1f920:	b	1f664 <__assert_fail@plt+0xd5d8>
   1f924:	add	r0, r5, #1
   1f928:	mov	r1, #1
   1f92c:	add	r9, sp, #48	; 0x30
   1f930:	cmp	r6, r0
   1f934:	str	r1, [sp, #36]	; 0x24
   1f938:	bls	1f664 <__assert_fail@plt+0xd5d8>
   1f93c:	sub	r0, r6, #1
   1f940:	mov	r6, r0
   1f944:	cmp	r0, r5
   1f948:	bls	1f664 <__assert_fail@plt+0xd5d8>
   1f94c:	mov	r0, r6
   1f950:	ldrb	r1, [r0, #-1]!
   1f954:	cmp	r1, #47	; 0x2f
   1f958:	bne	1f940 <__assert_fail@plt+0xd8b4>
   1f95c:	b	1f664 <__assert_fail@plt+0xd5d8>
   1f960:	uxtb	r1, r0
   1f964:	cmp	r1, #47	; 0x2f
   1f968:	bne	1f978 <__assert_fail@plt+0xd8ec>
   1f96c:	ldrb	r0, [r8, #1]!
   1f970:	cmp	r0, #47	; 0x2f
   1f974:	beq	1f96c <__assert_fail@plt+0xd8e0>
   1f978:	mov	r1, r0
   1f97c:	mov	sl, r8
   1f980:	b	1f988 <__assert_fail@plt+0xd8fc>
   1f984:	ldrb	r1, [sl, #1]!
   1f988:	uxtb	r1, r1
   1f98c:	cmp	r1, #0
   1f990:	cmpne	r1, #47	; 0x2f
   1f994:	bne	1f984 <__assert_fail@plt+0xd8f8>
   1f998:	sub	r2, sl, r8
   1f99c:	cmp	r2, #1
   1f9a0:	beq	1f560 <__assert_fail@plt+0xd4d4>
   1f9a4:	cmp	r2, #2
   1f9a8:	beq	1f51c <__assert_fail@plt+0xd490>
   1f9ac:	cmp	r2, #0
   1f9b0:	bne	1f56c <__assert_fail@plt+0xd4e0>
   1f9b4:	b	1f9c0 <__assert_fail@plt+0xd934>
   1f9b8:	mov	r0, #0
   1f9bc:	str	r0, [sp, #20]
   1f9c0:	add	r0, r5, #1
   1f9c4:	cmp	r6, r0
   1f9c8:	bls	1f9dc <__assert_fail@plt+0xd950>
   1f9cc:	mov	r0, r6
   1f9d0:	ldrb	r1, [r0, #-1]!
   1f9d4:	cmp	r1, #47	; 0x2f
   1f9d8:	moveq	r6, r0
   1f9dc:	mov	r4, #0
   1f9e0:	ldr	r0, [sp, #20]
   1f9e4:	cmp	r0, #0
   1f9e8:	beq	1fa4c <__assert_fail@plt+0xd9c0>
   1f9ec:	bl	20ca0 <__assert_fail@plt+0xec14>
   1f9f0:	b	1fa4c <__assert_fail@plt+0xd9c0>
   1f9f4:	bl	11ed0 <__errno_location@plt>
   1f9f8:	ldr	r5, [sp, #8]
   1f9fc:	mov	r6, r0
   1fa00:	add	r9, sp, #48	; 0x30
   1fa04:	ldr	r0, [r6]
   1fa08:	cmp	r0, #34	; 0x22
   1fa0c:	bne	1fa3c <__assert_fail@plt+0xd9b0>
   1fa10:	mov	r0, r9
   1fa14:	bl	26ec0 <_obstack_memory_used@@Base+0x1e4c>
   1fa18:	cmp	r0, #0
   1fa1c:	beq	1fab8 <__assert_fail@plt+0xda2c>
   1fa20:	ldr	r5, [sp, #48]	; 0x30
   1fa24:	ldr	r1, [sp, #52]	; 0x34
   1fa28:	mov	r0, r5
   1fa2c:	bl	11e7c <getcwd@plt>
   1fa30:	cmp	r0, #0
   1fa34:	beq	1fa04 <__assert_fail@plt+0xd978>
   1fa38:	b	1f4d4 <__assert_fail@plt+0xd448>
   1fa3c:	cmp	r0, #12
   1fa40:	beq	1fab8 <__assert_fail@plt+0xda2c>
   1fa44:	mov	r4, #1
   1fa48:	mov	r6, r5
   1fa4c:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   1fa50:	ldr	r1, [sp, #12]
   1fa54:	cmp	r0, r1
   1fa58:	beq	1fa60 <__assert_fail@plt+0xd9d4>
   1fa5c:	bl	2046c <__assert_fail@plt+0xe3e0>
   1fa60:	ldr	r0, [sp, #1184]	; 0x4a0
   1fa64:	ldr	r1, [sp, #16]
   1fa68:	cmp	r0, r1
   1fa6c:	beq	1fa74 <__assert_fail@plt+0xd9e8>
   1fa70:	bl	2046c <__assert_fail@plt+0xe3e0>
   1fa74:	cmp	r4, #0
   1fa78:	beq	1fa98 <__assert_fail@plt+0xda0c>
   1fa7c:	ldr	r0, [sp, #48]	; 0x30
   1fa80:	ldr	r1, [sp, #8]
   1fa84:	mov	r4, #0
   1fa88:	cmp	r0, r1
   1fa8c:	beq	1f424 <__assert_fail@plt+0xd398>
   1fa90:	bl	2046c <__assert_fail@plt+0xe3e0>
   1fa94:	b	1f424 <__assert_fail@plt+0xd398>
   1fa98:	mov	r0, #0
   1fa9c:	strb	r0, [r6], #1
   1faa0:	add	r0, sp, #48	; 0x30
   1faa4:	sub	r1, r6, r5
   1faa8:	bl	26e58 <_obstack_memory_used@@Base+0x1de4>
   1faac:	mov	r4, r0
   1fab0:	cmp	r0, #0
   1fab4:	bne	1f424 <__assert_fail@plt+0xd398>
   1fab8:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   1fabc:	bl	11ed0 <__errno_location@plt>
   1fac0:	mov	r1, #40	; 0x28
   1fac4:	str	r1, [r0]
   1fac8:	mov	r4, #1
   1facc:	b	1f9e0 <__assert_fail@plt+0xd954>
   1fad0:	movw	r1, #968	; 0x3c8
   1fad4:	movt	r1, #4
   1fad8:	str	r0, [r1]
   1fadc:	bx	lr
   1fae0:	movw	r1, #972	; 0x3cc
   1fae4:	movt	r1, #4
   1fae8:	strb	r0, [r1]
   1faec:	bx	lr
   1faf0:	push	{r4, r5, r6, sl, fp, lr}
   1faf4:	add	fp, sp, #16
   1faf8:	sub	sp, sp, #8
   1fafc:	movw	r0, #62220	; 0xf30c
   1fb00:	movt	r0, #3
   1fb04:	ldr	r0, [r0]
   1fb08:	bl	294e4 <_obstack_memory_used@@Base+0x4470>
   1fb0c:	cmp	r0, #0
   1fb10:	beq	1fb38 <__assert_fail@plt+0xdaac>
   1fb14:	movw	r0, #972	; 0x3cc
   1fb18:	movt	r0, #4
   1fb1c:	ldrb	r0, [r0]
   1fb20:	cmp	r0, #0
   1fb24:	beq	1fb58 <__assert_fail@plt+0xdacc>
   1fb28:	bl	11ed0 <__errno_location@plt>
   1fb2c:	ldr	r0, [r0]
   1fb30:	cmp	r0, #32
   1fb34:	bne	1fb58 <__assert_fail@plt+0xdacc>
   1fb38:	movw	r0, #62216	; 0xf308
   1fb3c:	movt	r0, #3
   1fb40:	ldr	r0, [r0]
   1fb44:	bl	294e4 <_obstack_memory_used@@Base+0x4470>
   1fb48:	cmp	r0, #0
   1fb4c:	subeq	sp, fp, #16
   1fb50:	popeq	{r4, r5, r6, sl, fp, pc}
   1fb54:	b	1fbc8 <__assert_fail@plt+0xdb3c>
   1fb58:	movw	r1, #56725	; 0xdd95
   1fb5c:	mov	r0, #0
   1fb60:	mov	r2, #5
   1fb64:	movt	r1, #2
   1fb68:	bl	11cb4 <dcgettext@plt>
   1fb6c:	mov	r4, r0
   1fb70:	movw	r0, #968	; 0x3c8
   1fb74:	movt	r0, #4
   1fb78:	ldr	r6, [r0]
   1fb7c:	bl	11ed0 <__errno_location@plt>
   1fb80:	ldr	r5, [r0]
   1fb84:	cmp	r6, #0
   1fb88:	bne	1fba4 <__assert_fail@plt+0xdb18>
   1fb8c:	movw	r2, #56722	; 0xdd92
   1fb90:	mov	r0, #0
   1fb94:	mov	r1, r5
   1fb98:	mov	r3, r4
   1fb9c:	movt	r2, #2
   1fba0:	b	1fbc4 <__assert_fail@plt+0xdb38>
   1fba4:	mov	r0, r6
   1fba8:	bl	26998 <_obstack_memory_used@@Base+0x1924>
   1fbac:	movw	r2, #48267	; 0xbc8b
   1fbb0:	mov	r3, r0
   1fbb4:	str	r4, [sp]
   1fbb8:	mov	r0, #0
   1fbbc:	mov	r1, r5
   1fbc0:	movt	r2, #2
   1fbc4:	bl	11db0 <error@plt>
   1fbc8:	movw	r0, #62124	; 0xf2ac
   1fbcc:	movt	r0, #3
   1fbd0:	ldr	r0, [r0]
   1fbd4:	bl	11c54 <_exit@plt>
   1fbd8:	push	{r4, r5, r6, sl, fp, lr}
   1fbdc:	add	fp, sp, #16
   1fbe0:	mov	r5, r0
   1fbe4:	mov	r4, r0
   1fbe8:	ldrb	r6, [r5], #-1
   1fbec:	bl	1efc0 <__assert_fail@plt+0xcf34>
   1fbf0:	sub	r2, r0, r4
   1fbf4:	sub	r0, r6, #47	; 0x2f
   1fbf8:	clz	r0, r0
   1fbfc:	lsr	r1, r0, #5
   1fc00:	mov	r0, r2
   1fc04:	cmp	r2, r1
   1fc08:	popls	{r4, r5, r6, sl, fp, pc}
   1fc0c:	ldrb	r3, [r5, r0]
   1fc10:	sub	r2, r0, #1
   1fc14:	cmp	r3, #47	; 0x2f
   1fc18:	beq	1fc00 <__assert_fail@plt+0xdb74>
   1fc1c:	pop	{r4, r5, r6, sl, fp, pc}
   1fc20:	push	{r4, r5, r6, sl, fp, lr}
   1fc24:	add	fp, sp, #16
   1fc28:	mov	r6, r0
   1fc2c:	mov	r4, r0
   1fc30:	ldrb	r5, [r6], #-1
   1fc34:	bl	1efc0 <__assert_fail@plt+0xcf34>
   1fc38:	sub	r1, r0, r4
   1fc3c:	sub	r0, r5, #47	; 0x2f
   1fc40:	clz	r0, r0
   1fc44:	lsr	r0, r0, #5
   1fc48:	mov	r5, r1
   1fc4c:	cmp	r1, r0
   1fc50:	bls	1fc64 <__assert_fail@plt+0xdbd8>
   1fc54:	ldrb	r2, [r6, r5]
   1fc58:	sub	r1, r5, #1
   1fc5c:	cmp	r2, #47	; 0x2f
   1fc60:	beq	1fc48 <__assert_fail@plt+0xdbbc>
   1fc64:	cmp	r5, #0
   1fc68:	mov	r0, r5
   1fc6c:	addeq	r0, r0, #1
   1fc70:	add	r0, r0, #1
   1fc74:	bl	29460 <_obstack_memory_used@@Base+0x43ec>
   1fc78:	mov	r6, r0
   1fc7c:	cmp	r0, #0
   1fc80:	beq	1fcac <__assert_fail@plt+0xdc20>
   1fc84:	mov	r0, r6
   1fc88:	mov	r1, r4
   1fc8c:	mov	r2, r5
   1fc90:	bl	11c60 <memcpy@plt>
   1fc94:	cmp	r5, #0
   1fc98:	moveq	r0, #46	; 0x2e
   1fc9c:	moveq	r5, #1
   1fca0:	strbeq	r0, [r6]
   1fca4:	mov	r0, #0
   1fca8:	strb	r0, [r6, r5]
   1fcac:	mov	r0, r6
   1fcb0:	pop	{r4, r5, r6, sl, fp, pc}
   1fcb4:	mov	r0, #0
   1fcb8:	bx	lr
   1fcbc:	push	{r4, r5, r6, r7, fp, lr}
   1fcc0:	add	fp, sp, #16
   1fcc4:	cmp	r0, #0
   1fcc8:	popeq	{r4, r5, r6, r7, fp, pc}
   1fccc:	mov	r5, r0
   1fcd0:	mov	r0, #24
   1fcd4:	mov	r6, r2
   1fcd8:	mov	r7, r1
   1fcdc:	bl	27ea0 <_obstack_memory_used@@Base+0x2e2c>
   1fce0:	mov	r4, r0
   1fce4:	mov	r0, r7
   1fce8:	bl	283c0 <_obstack_memory_used@@Base+0x334c>
   1fcec:	str	r0, [r4]
   1fcf0:	ldrd	r0, [r6, #96]	; 0x60
   1fcf4:	str	r1, [r4, #12]
   1fcf8:	str	r0, [r4, #8]
   1fcfc:	ldrd	r0, [r6]
   1fd00:	str	r1, [r4, #20]
   1fd04:	str	r0, [r4, #16]
   1fd08:	mov	r0, r5
   1fd0c:	mov	r1, r4
   1fd10:	bl	214ec <__assert_fail@plt+0xf460>
   1fd14:	cmp	r0, #0
   1fd18:	beq	1fd34 <__assert_fail@plt+0xdca8>
   1fd1c:	cmp	r0, r4
   1fd20:	beq	1fd30 <__assert_fail@plt+0xdca4>
   1fd24:	mov	r0, r4
   1fd28:	pop	{r4, r5, r6, r7, fp, lr}
   1fd2c:	b	21860 <__assert_fail@plt+0xf7d4>
   1fd30:	pop	{r4, r5, r6, r7, fp, pc}
   1fd34:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   1fd38:	cmp	r0, #0
   1fd3c:	moveq	r0, #0
   1fd40:	bxeq	lr
   1fd44:	push	{r4, r5, fp, lr}
   1fd48:	add	fp, sp, #8
   1fd4c:	sub	sp, sp, #24
   1fd50:	str	r1, [sp]
   1fd54:	mov	r1, sp
   1fd58:	ldrd	r4, [r2, #96]	; 0x60
   1fd5c:	str	r5, [sp, #12]
   1fd60:	str	r4, [sp, #8]
   1fd64:	ldrd	r2, [r2]
   1fd68:	str	r3, [sp, #20]
   1fd6c:	str	r2, [sp, #16]
   1fd70:	bl	206f8 <__assert_fail@plt+0xe66c>
   1fd74:	cmp	r0, #0
   1fd78:	movwne	r0, #1
   1fd7c:	sub	sp, fp, #8
   1fd80:	pop	{r4, r5, fp, pc}
   1fd84:	and	r2, r0, #61440	; 0xf000
   1fd88:	sub	r2, r2, #4096	; 0x1000
   1fd8c:	lsr	r3, r2, #12
   1fd90:	cmp	r3, #11
   1fd94:	bhi	1fde4 <__assert_fail@plt+0xdd58>
   1fd98:	add	r2, pc, #4
   1fd9c:	mov	ip, #45	; 0x2d
   1fda0:	ldr	pc, [r2, r3, lsl #2]
   1fda4:	ldrdeq	pc, [r1], -r4
   1fda8:	ldrdeq	pc, [r1], -ip
   1fdac:	andeq	pc, r1, r4, ror #27
   1fdb0:	andeq	pc, r1, ip, ror #27
   1fdb4:	andeq	pc, r1, r4, ror #27
   1fdb8:	andeq	pc, r1, r4, lsl #28
   1fdbc:	andeq	pc, r1, r4, ror #27
   1fdc0:	andeq	pc, r1, r8, lsl #28
   1fdc4:	andeq	pc, r1, r4, ror #27
   1fdc8:	strdeq	pc, [r1], -r4
   1fdcc:	andeq	pc, r1, r4, ror #27
   1fdd0:	strdeq	pc, [r1], -ip
   1fdd4:	mov	ip, #112	; 0x70
   1fdd8:	b	1fe08 <__assert_fail@plt+0xdd7c>
   1fddc:	mov	ip, #99	; 0x63
   1fde0:	b	1fe08 <__assert_fail@plt+0xdd7c>
   1fde4:	mov	ip, #63	; 0x3f
   1fde8:	b	1fe08 <__assert_fail@plt+0xdd7c>
   1fdec:	mov	ip, #100	; 0x64
   1fdf0:	b	1fe08 <__assert_fail@plt+0xdd7c>
   1fdf4:	mov	ip, #108	; 0x6c
   1fdf8:	b	1fe08 <__assert_fail@plt+0xdd7c>
   1fdfc:	mov	ip, #115	; 0x73
   1fe00:	b	1fe08 <__assert_fail@plt+0xdd7c>
   1fe04:	mov	ip, #98	; 0x62
   1fe08:	push	{fp, lr}
   1fe0c:	mov	fp, sp
   1fe10:	mov	r2, #32
   1fe14:	tst	r0, #256	; 0x100
   1fe18:	mov	r3, #114	; 0x72
   1fe1c:	strb	ip, [r1]
   1fe20:	mov	ip, #114	; 0x72
   1fe24:	mov	lr, #45	; 0x2d
   1fe28:	strh	r2, [r1, #10]
   1fe2c:	movweq	r3, #45	; 0x2d
   1fe30:	tst	r0, #128	; 0x80
   1fe34:	mov	r2, #119	; 0x77
   1fe38:	movweq	r2, #45	; 0x2d
   1fe3c:	strb	r3, [r1, #1]
   1fe40:	tst	r0, #32
   1fe44:	mov	r3, #119	; 0x77
   1fe48:	strb	r2, [r1, #2]
   1fe4c:	mov	r2, #114	; 0x72
   1fe50:	movweq	r2, #45	; 0x2d
   1fe54:	tst	r0, #16
   1fe58:	strb	r2, [r1, #4]
   1fe5c:	mov	r2, #119	; 0x77
   1fe60:	movweq	r2, #45	; 0x2d
   1fe64:	tst	r0, #4
   1fe68:	movweq	ip, #45	; 0x2d
   1fe6c:	tst	r0, #2
   1fe70:	strb	r2, [r1, #5]
   1fe74:	movweq	r3, #45	; 0x2d
   1fe78:	strb	ip, [r1, #7]
   1fe7c:	ands	r2, r0, #64	; 0x40
   1fe80:	mov	ip, #45	; 0x2d
   1fe84:	strb	r3, [r1, #8]
   1fe88:	mov	r3, #83	; 0x53
   1fe8c:	movwne	lr, #120	; 0x78
   1fe90:	mov	r2, #83	; 0x53
   1fe94:	movwne	r3, #115	; 0x73
   1fe98:	tst	r0, #2048	; 0x800
   1fe9c:	moveq	r3, lr
   1fea0:	strb	r3, [r1, #3]
   1fea4:	ands	r3, r0, #8
   1fea8:	mov	r3, #45	; 0x2d
   1feac:	movwne	r2, #115	; 0x73
   1feb0:	movwne	r3, #120	; 0x78
   1feb4:	tst	r0, #1024	; 0x400
   1feb8:	moveq	r2, r3
   1febc:	strb	r2, [r1, #6]
   1fec0:	ands	r2, r0, #1
   1fec4:	mov	r2, #84	; 0x54
   1fec8:	movwne	ip, #120	; 0x78
   1fecc:	movwne	r2, #116	; 0x74
   1fed0:	tst	r0, #512	; 0x200
   1fed4:	moveq	r2, ip
   1fed8:	strb	r2, [r1, #9]
   1fedc:	pop	{fp, pc}
   1fee0:	ldr	r0, [r0, #16]
   1fee4:	b	1fd84 <__assert_fail@plt+0xdcf8>
   1fee8:	push	{fp, lr}
   1feec:	mov	fp, sp
   1fef0:	bl	1ff00 <__assert_fail@plt+0xde74>
   1fef4:	cmp	r0, #0
   1fef8:	popne	{fp, pc}
   1fefc:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   1ff00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff04:	add	fp, sp, #28
   1ff08:	push	{r2}		; (str r2, [sp, #-4]!)
   1ff0c:	mov	sl, r1
   1ff10:	mov	r7, r0
   1ff14:	bl	1efc0 <__assert_fail@plt+0xcf34>
   1ff18:	sub	r4, r0, r7
   1ff1c:	bl	1f00c <__assert_fail@plt+0xcf80>
   1ff20:	mov	r6, r0
   1ff24:	add	r5, r4, r0
   1ff28:	mov	r0, sl
   1ff2c:	bl	11eac <strlen@plt>
   1ff30:	mov	r9, r0
   1ff34:	cmp	r6, #0
   1ff38:	beq	1ff60 <__assert_fail@plt+0xded4>
   1ff3c:	add	r0, r7, r5
   1ff40:	mov	r4, #0
   1ff44:	ldrb	r0, [r0, #-1]
   1ff48:	cmp	r0, #47	; 0x2f
   1ff4c:	beq	1ff70 <__assert_fail@plt+0xdee4>
   1ff50:	ldrb	r0, [sl]
   1ff54:	subs	r4, r0, #47	; 0x2f
   1ff58:	movwne	r4, #47	; 0x2f
   1ff5c:	b	1ff70 <__assert_fail@plt+0xdee4>
   1ff60:	ldrb	r0, [sl]
   1ff64:	mov	r4, #0
   1ff68:	cmp	r0, #47	; 0x2f
   1ff6c:	movweq	r4, #46	; 0x2e
   1ff70:	uxtb	r8, r4
   1ff74:	add	r0, r9, r5
   1ff78:	cmp	r8, #0
   1ff7c:	movwne	r8, #1
   1ff80:	add	r0, r0, r8
   1ff84:	add	r0, r0, #1
   1ff88:	bl	29460 <_obstack_memory_used@@Base+0x43ec>
   1ff8c:	mov	r6, r0
   1ff90:	cmp	r0, #0
   1ff94:	beq	1ffd4 <__assert_fail@plt+0xdf48>
   1ff98:	mov	r0, r6
   1ff9c:	mov	r1, r7
   1ffa0:	mov	r2, r5
   1ffa4:	mvn	r3, #0
   1ffa8:	bl	12080 <__mempcpy_chk@plt>
   1ffac:	ldr	r1, [sp]
   1ffb0:	strb	r4, [r0], r8
   1ffb4:	mov	r2, r9
   1ffb8:	mvn	r3, #0
   1ffbc:	cmp	r1, #0
   1ffc0:	strne	r0, [r1]
   1ffc4:	mov	r1, sl
   1ffc8:	bl	12080 <__mempcpy_chk@plt>
   1ffcc:	mov	r1, #0
   1ffd0:	strb	r1, [r0]
   1ffd4:	mov	r0, r6
   1ffd8:	sub	sp, fp, #28
   1ffdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ffe0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ffe4:	add	fp, sp, #28
   1ffe8:	sub	sp, sp, #12
   1ffec:	mov	r8, r1
   1fff0:	mov	r9, r0
   1fff4:	bl	11bd0 <strcmp@plt>
   1fff8:	cmp	r0, #0
   1fffc:	moveq	r0, #0
   20000:	subeq	sp, fp, #28
   20004:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20008:	ldrb	r4, [r9]
   2000c:	cmp	r4, #0
   20010:	beq	20094 <__assert_fail@plt+0xe008>
   20014:	ldrb	r6, [r8]
   20018:	cmp	r6, #0
   2001c:	beq	20444 <__assert_fail@plt+0xe3b8>
   20020:	mov	sl, r0
   20024:	movw	r0, #56738	; 0xdda2
   20028:	mov	r1, r9
   2002c:	movt	r0, #2
   20030:	bl	11bd0 <strcmp@plt>
   20034:	cmp	r0, #0
   20038:	beq	20094 <__assert_fail@plt+0xe008>
   2003c:	movw	r0, #56738	; 0xdda2
   20040:	mov	r1, r8
   20044:	movt	r0, #2
   20048:	bl	11bd0 <strcmp@plt>
   2004c:	cmp	r0, #0
   20050:	beq	20444 <__assert_fail@plt+0xe3b8>
   20054:	movw	r0, #56737	; 0xdda1
   20058:	mov	r1, r9
   2005c:	movt	r0, #2
   20060:	bl	11bd0 <strcmp@plt>
   20064:	cmp	r0, #0
   20068:	beq	20094 <__assert_fail@plt+0xe008>
   2006c:	movw	r0, #56737	; 0xdda1
   20070:	mov	r1, r8
   20074:	movt	r0, #2
   20078:	bl	11bd0 <strcmp@plt>
   2007c:	cmp	r0, #0
   20080:	beq	20444 <__assert_fail@plt+0xe3b8>
   20084:	cmp	r4, #46	; 0x2e
   20088:	bne	200a0 <__assert_fail@plt+0xe014>
   2008c:	cmp	r6, #46	; 0x2e
   20090:	beq	200a0 <__assert_fail@plt+0xe014>
   20094:	mvn	r0, #0
   20098:	sub	sp, fp, #28
   2009c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   200a0:	cmp	r4, #46	; 0x2e
   200a4:	bne	200d0 <__assert_fail@plt+0xe044>
   200a8:	mov	r4, #46	; 0x2e
   200ac:	cmp	r6, #46	; 0x2e
   200b0:	bne	200d8 <__assert_fail@plt+0xe04c>
   200b4:	ldrb	r4, [r9, #1]!
   200b8:	add	r8, r8, #1
   200bc:	cmp	r4, #0
   200c0:	bne	200d8 <__assert_fail@plt+0xe04c>
   200c4:	mov	r7, #0
   200c8:	mov	r6, r9
   200cc:	b	2015c <__assert_fail@plt+0xe0d0>
   200d0:	cmp	r6, #46	; 0x2e
   200d4:	beq	20444 <__assert_fail@plt+0xe3b8>
   200d8:	mov	r1, #0
   200dc:	mvn	r5, #64	; 0x40
   200e0:	mov	r6, r9
   200e4:	mov	r7, #0
   200e8:	tst	r1, #1
   200ec:	beq	20114 <__assert_fail@plt+0xe088>
   200f0:	uxtab	r0, r5, r4
   200f4:	mov	r1, #0
   200f8:	cmp	r0, #26
   200fc:	bcc	20150 <__assert_fail@plt+0xe0c4>
   20100:	uxtb	r0, r4
   20104:	sub	r2, r0, #97	; 0x61
   20108:	cmp	r2, #26
   2010c:	bcc	20150 <__assert_fail@plt+0xe0c4>
   20110:	b	20144 <__assert_fail@plt+0xe0b8>
   20114:	uxtb	r0, r4
   20118:	cmp	r0, #46	; 0x2e
   2011c:	bne	20130 <__assert_fail@plt+0xe0a4>
   20120:	cmp	r7, #0
   20124:	mov	r1, #1
   20128:	moveq	r7, r6
   2012c:	b	20150 <__assert_fail@plt+0xe0c4>
   20130:	bl	1f044 <__assert_fail@plt+0xcfb8>
   20134:	mov	r1, #0
   20138:	cmp	r0, #0
   2013c:	bne	20150 <__assert_fail@plt+0xe0c4>
   20140:	ldrb	r0, [r6]
   20144:	mov	r1, #0
   20148:	cmp	r0, #126	; 0x7e
   2014c:	movne	r7, r1
   20150:	ldrb	r4, [r6, #1]!
   20154:	cmp	r4, #0
   20158:	bne	200e8 <__assert_fail@plt+0xe05c>
   2015c:	ldrb	r0, [r8]
   20160:	str	r7, [sp, #8]
   20164:	cmp	r0, #0
   20168:	beq	201f4 <__assert_fail@plt+0xe168>
   2016c:	mov	r1, #0
   20170:	mvn	r5, #64	; 0x40
   20174:	mov	r4, r8
   20178:	mov	r7, #0
   2017c:	tst	r1, #1
   20180:	beq	201a8 <__assert_fail@plt+0xe11c>
   20184:	uxtab	r2, r5, r0
   20188:	mov	r1, #0
   2018c:	cmp	r2, #26
   20190:	bcc	201e4 <__assert_fail@plt+0xe158>
   20194:	uxtb	r0, r0
   20198:	sub	r2, r0, #97	; 0x61
   2019c:	cmp	r2, #26
   201a0:	bcc	201e4 <__assert_fail@plt+0xe158>
   201a4:	b	201d8 <__assert_fail@plt+0xe14c>
   201a8:	uxtb	r0, r0
   201ac:	cmp	r0, #46	; 0x2e
   201b0:	bne	201c4 <__assert_fail@plt+0xe138>
   201b4:	cmp	r7, #0
   201b8:	mov	r1, #1
   201bc:	moveq	r7, r4
   201c0:	b	201e4 <__assert_fail@plt+0xe158>
   201c4:	bl	1f044 <__assert_fail@plt+0xcfb8>
   201c8:	mov	r1, #0
   201cc:	cmp	r0, #0
   201d0:	bne	201e4 <__assert_fail@plt+0xe158>
   201d4:	ldrb	r0, [r4]
   201d8:	mov	r1, #0
   201dc:	cmp	r0, #126	; 0x7e
   201e0:	movne	r7, r1
   201e4:	ldrb	r0, [r4, #1]!
   201e8:	cmp	r0, #0
   201ec:	bne	2017c <__assert_fail@plt+0xe0f0>
   201f0:	b	201fc <__assert_fail@plt+0xe170>
   201f4:	mov	r7, #0
   201f8:	mov	r4, r8
   201fc:	ldr	r1, [sp, #8]
   20200:	cmp	r7, #0
   20204:	mov	r0, r4
   20208:	movne	r0, r7
   2020c:	sub	lr, r0, r8
   20210:	mov	r0, r6
   20214:	cmp	r1, #0
   20218:	movne	r0, r1
   2021c:	sub	r2, r0, r9
   20220:	orrs	r0, r1, r7
   20224:	beq	20254 <__assert_fail@plt+0xe1c8>
   20228:	cmp	r2, lr
   2022c:	bne	20254 <__assert_fail@plt+0xe1c8>
   20230:	mov	r0, r9
   20234:	mov	r1, r8
   20238:	mov	r5, r2
   2023c:	bl	1202c <strncmp@plt>
   20240:	mov	r2, r5
   20244:	cmp	r0, #0
   20248:	mov	lr, r5
   2024c:	subeq	lr, r4, r8
   20250:	subeq	r2, r6, r9
   20254:	mov	ip, #0
   20258:	mov	r6, #0
   2025c:	cmp	ip, lr
   20260:	cmpcs	r6, r2
   20264:	bcc	20274 <__assert_fail@plt+0xe1e8>
   20268:	b	20460 <__assert_fail@plt+0xe3d4>
   2026c:	add	ip, ip, #1
   20270:	add	r6, r6, #1
   20274:	cmp	r6, r2
   20278:	bcs	2028c <__assert_fail@plt+0xe200>
   2027c:	ldrb	r0, [r9, r6]
   20280:	sub	r0, r0, #48	; 0x30
   20284:	cmp	r0, #9
   20288:	bhi	202a4 <__assert_fail@plt+0xe218>
   2028c:	cmp	ip, lr
   20290:	bcs	20370 <__assert_fail@plt+0xe2e4>
   20294:	ldrb	r0, [r8, ip]
   20298:	sub	r0, r0, #48	; 0x30
   2029c:	cmp	r0, #10
   202a0:	bcc	20370 <__assert_fail@plt+0xe2e4>
   202a4:	mov	r0, #0
   202a8:	cmp	r2, r6
   202ac:	mov	r1, #0
   202b0:	beq	202e4 <__assert_fail@plt+0xe258>
   202b4:	ldrb	r3, [r9, r6]
   202b8:	sub	r1, r3, #48	; 0x30
   202bc:	cmp	r1, #10
   202c0:	mov	r1, #0
   202c4:	bcc	202e4 <__assert_fail@plt+0xe258>
   202c8:	sub	r1, r3, #65	; 0x41
   202cc:	cmp	r1, #26
   202d0:	bcc	20330 <__assert_fail@plt+0xe2a4>
   202d4:	sub	r1, r3, #97	; 0x61
   202d8:	cmp	r1, #26
   202dc:	mov	r1, r3
   202e0:	bcs	20358 <__assert_fail@plt+0xe2cc>
   202e4:	cmp	lr, ip
   202e8:	beq	2033c <__assert_fail@plt+0xe2b0>
   202ec:	ldrb	r3, [r8, ip]
   202f0:	sub	r7, r3, #48	; 0x30
   202f4:	cmp	r7, #10
   202f8:	bcc	2033c <__assert_fail@plt+0xe2b0>
   202fc:	sub	r0, r3, #65	; 0x41
   20300:	cmp	r0, #26
   20304:	bcc	20348 <__assert_fail@plt+0xe2bc>
   20308:	sub	r0, r3, #97	; 0x61
   2030c:	cmp	r0, #26
   20310:	mov	r0, r3
   20314:	bcc	2033c <__assert_fail@plt+0xe2b0>
   20318:	orr	r0, r3, #256	; 0x100
   2031c:	cmp	r3, #126	; 0x7e
   20320:	mvneq	r0, #0
   20324:	cmp	r1, r0
   20328:	beq	2026c <__assert_fail@plt+0xe1e0>
   2032c:	b	20450 <__assert_fail@plt+0xe3c4>
   20330:	mov	r1, r3
   20334:	cmp	lr, ip
   20338:	bne	202ec <__assert_fail@plt+0xe260>
   2033c:	cmp	r1, r0
   20340:	beq	2026c <__assert_fail@plt+0xe1e0>
   20344:	b	20450 <__assert_fail@plt+0xe3c4>
   20348:	mov	r0, r3
   2034c:	cmp	r1, r0
   20350:	beq	2026c <__assert_fail@plt+0xe1e0>
   20354:	b	20450 <__assert_fail@plt+0xe3c4>
   20358:	orr	r1, r3, #256	; 0x100
   2035c:	cmp	r3, #126	; 0x7e
   20360:	mvneq	r1, #0
   20364:	cmp	lr, ip
   20368:	bne	202ec <__assert_fail@plt+0xe260>
   2036c:	b	2033c <__assert_fail@plt+0xe2b0>
   20370:	mov	r3, r6
   20374:	ldrb	r4, [r9, r3]
   20378:	add	r3, r3, #1
   2037c:	cmp	r4, #48	; 0x30
   20380:	beq	20374 <__assert_fail@plt+0xe2e8>
   20384:	sub	r6, r3, #1
   20388:	ldrb	r5, [r8, ip]
   2038c:	add	ip, ip, #1
   20390:	cmp	r5, #48	; 0x30
   20394:	beq	20388 <__assert_fail@plt+0xe2fc>
   20398:	sub	r1, r5, #48	; 0x30
   2039c:	sub	r7, r4, #48	; 0x30
   203a0:	mov	r0, #0
   203a4:	cmp	r1, #10
   203a8:	mov	r1, #0
   203ac:	movwcc	r1, #1
   203b0:	cmp	r7, #9
   203b4:	bhi	2042c <__assert_fail@plt+0xe3a0>
   203b8:	add	r0, r8, ip
   203bc:	mvn	r6, #0
   203c0:	mov	r7, r9
   203c4:	str	lr, [sp, #4]
   203c8:	str	r0, [sp, #8]
   203cc:	mov	r0, #0
   203d0:	tst	r1, #1
   203d4:	beq	20444 <__assert_fail@plt+0xe3b8>
   203d8:	ldr	r1, [sp, #8]
   203dc:	cmp	r0, #0
   203e0:	subeq	r0, r4, r5
   203e4:	ldrb	r4, [r7, r3]
   203e8:	add	r7, r7, #1
   203ec:	add	r1, r1, r6
   203f0:	add	r6, r6, #1
   203f4:	ldrb	r5, [r1, #1]
   203f8:	sub	lr, r4, #48	; 0x30
   203fc:	sub	r1, r5, #48	; 0x30
   20400:	cmp	r1, #10
   20404:	mov	r1, #0
   20408:	movwcc	r1, #1
   2040c:	cmp	lr, #10
   20410:	bcc	203d0 <__assert_fail@plt+0xe344>
   20414:	ldr	lr, [sp, #4]
   20418:	add	ip, ip, r6
   2041c:	add	r6, r3, r6
   20420:	cmp	r1, #0
   20424:	beq	20438 <__assert_fail@plt+0xe3ac>
   20428:	b	20094 <__assert_fail@plt+0xe008>
   2042c:	sub	ip, ip, #1
   20430:	cmp	r1, #0
   20434:	bne	20094 <__assert_fail@plt+0xe008>
   20438:	cmp	r0, #0
   2043c:	beq	2025c <__assert_fail@plt+0xe1d0>
   20440:	b	20458 <__assert_fail@plt+0xe3cc>
   20444:	mov	r0, #1
   20448:	sub	sp, fp, #28
   2044c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20450:	subs	r0, r1, r0
   20454:	moveq	r0, sl
   20458:	sub	sp, fp, #28
   2045c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20460:	mov	r0, sl
   20464:	sub	sp, fp, #28
   20468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2046c:	push	{r4, r5, r6, sl, fp, lr}
   20470:	add	fp, sp, #16
   20474:	mov	r4, r0
   20478:	bl	11ed0 <__errno_location@plt>
   2047c:	ldr	r6, [r0]
   20480:	mov	r5, r0
   20484:	mov	r0, r4
   20488:	bl	11c30 <free@plt>
   2048c:	str	r6, [r5]
   20490:	pop	{r4, r5, r6, sl, fp, pc}
   20494:	mov	r1, r0
   20498:	mov	r0, #0
   2049c:	b	11c48 <clock_gettime@plt>
   204a0:	push	{fp, lr}
   204a4:	mov	fp, sp
   204a8:	mov	r1, r0
   204ac:	mov	r0, #0
   204b0:	bl	11c48 <clock_gettime@plt>
   204b4:	pop	{fp, pc}
   204b8:	push	{r4, sl, fp, lr}
   204bc:	add	fp, sp, #8
   204c0:	sub	sp, sp, #264	; 0x108
   204c4:	add	r1, sp, #7
   204c8:	movw	r2, #257	; 0x101
   204cc:	bl	27130 <_obstack_memory_used@@Base+0x20bc>
   204d0:	mov	r4, #0
   204d4:	cmp	r0, #0
   204d8:	bne	20510 <__assert_fail@plt+0xe484>
   204dc:	movw	r1, #56740	; 0xdda4
   204e0:	add	r0, sp, #7
   204e4:	movt	r1, #2
   204e8:	bl	11bd0 <strcmp@plt>
   204ec:	cmp	r0, #0
   204f0:	beq	20510 <__assert_fail@plt+0xe484>
   204f4:	movw	r1, #56742	; 0xdda6
   204f8:	add	r0, sp, #7
   204fc:	movt	r1, #2
   20500:	bl	11bd0 <strcmp@plt>
   20504:	mov	r4, r0
   20508:	cmp	r0, #0
   2050c:	movwne	r4, #1
   20510:	mov	r0, r4
   20514:	sub	sp, fp, #8
   20518:	pop	{r4, sl, fp, pc}
   2051c:	andeq	r0, r0, r0
   20520:	ldr	r0, [r0, #8]
   20524:	bx	lr
   20528:	ldr	r0, [r0, #12]
   2052c:	bx	lr
   20530:	ldr	r0, [r0, #16]
   20534:	bx	lr
   20538:	ldm	r0, {r2, ip}
   2053c:	mov	r0, #0
   20540:	cmp	r2, ip
   20544:	bxcs	lr
   20548:	mov	r0, #0
   2054c:	ldr	r1, [r2]
   20550:	cmp	r1, #0
   20554:	beq	20578 <__assert_fail@plt+0xe4ec>
   20558:	mov	r3, #0
   2055c:	mov	r1, r2
   20560:	ldr	r1, [r1, #4]
   20564:	add	r3, r3, #1
   20568:	cmp	r1, #0
   2056c:	bne	20560 <__assert_fail@plt+0xe4d4>
   20570:	cmp	r3, r0
   20574:	movhi	r0, r3
   20578:	add	r2, r2, #8
   2057c:	cmp	r2, ip
   20580:	bcc	2054c <__assert_fail@plt+0xe4c0>
   20584:	bx	lr
   20588:	push	{fp, lr}
   2058c:	mov	fp, sp
   20590:	ldm	r0, {r3, ip}
   20594:	mov	lr, #0
   20598:	mov	r1, #0
   2059c:	cmp	r3, ip
   205a0:	bcs	205dc <__assert_fail@plt+0xe550>
   205a4:	mov	r1, #0
   205a8:	mov	lr, #0
   205ac:	ldr	r2, [r3]
   205b0:	cmp	r2, #0
   205b4:	beq	205d0 <__assert_fail@plt+0xe544>
   205b8:	mov	r2, r3
   205bc:	ldr	r2, [r2, #4]
   205c0:	add	r1, r1, #1
   205c4:	cmp	r2, #0
   205c8:	bne	205bc <__assert_fail@plt+0xe530>
   205cc:	add	lr, lr, #1
   205d0:	add	r3, r3, #8
   205d4:	cmp	r3, ip
   205d8:	bcc	205ac <__assert_fail@plt+0xe520>
   205dc:	ldr	r2, [r0, #12]
   205e0:	cmp	lr, r2
   205e4:	bne	205fc <__assert_fail@plt+0xe570>
   205e8:	ldr	r2, [r0, #16]
   205ec:	mov	r0, #1
   205f0:	cmp	r1, r2
   205f4:	movne	r0, #0
   205f8:	pop	{fp, pc}
   205fc:	mov	r0, #0
   20600:	pop	{fp, pc}
   20604:	nop	{0}
   20608:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2060c:	add	fp, sp, #24
   20610:	sub	sp, sp, #8
   20614:	ldr	r6, [r0]
   20618:	ldmib	r0, {r2, r7, r8}
   2061c:	ldr	r3, [r0, #16]
   20620:	mov	r4, r1
   20624:	mov	r5, #0
   20628:	cmp	r6, r2
   2062c:	bcs	2066c <__assert_fail@plt+0xe5e0>
   20630:	mov	r5, #0
   20634:	ldr	r0, [r6]
   20638:	cmp	r0, #0
   2063c:	beq	20660 <__assert_fail@plt+0xe5d4>
   20640:	mov	r0, #0
   20644:	mov	r1, r6
   20648:	ldr	r1, [r1, #4]
   2064c:	add	r0, r0, #1
   20650:	cmp	r1, #0
   20654:	bne	20648 <__assert_fail@plt+0xe5bc>
   20658:	cmp	r0, r5
   2065c:	movhi	r5, r0
   20660:	add	r6, r6, #8
   20664:	cmp	r6, r2
   20668:	bcc	20634 <__assert_fail@plt+0xe5a8>
   2066c:	movw	r2, #56748	; 0xddac
   20670:	mov	r0, r4
   20674:	mov	r1, #1
   20678:	movt	r2, #2
   2067c:	bl	11f24 <__fprintf_chk@plt>
   20680:	movw	r2, #56772	; 0xddc4
   20684:	mov	r0, r4
   20688:	mov	r1, #1
   2068c:	mov	r3, r7
   20690:	movt	r2, #2
   20694:	bl	11f24 <__fprintf_chk@plt>
   20698:	vldr	d16, [pc, #80]	; 206f0 <__assert_fail@plt+0xe664>
   2069c:	vmov	s0, r8
   206a0:	movw	r2, #56796	; 0xdddc
   206a4:	mov	r0, r4
   206a8:	mov	r1, #1
   206ac:	mov	r3, r8
   206b0:	vcvt.f64.u32	d17, s0
   206b4:	vmov	s0, r7
   206b8:	movt	r2, #2
   206bc:	vcvt.f64.u32	d18, s0
   206c0:	vmul.f64	d16, d17, d16
   206c4:	vdiv.f64	d16, d16, d18
   206c8:	vstr	d16, [sp]
   206cc:	bl	11f24 <__fprintf_chk@plt>
   206d0:	movw	r2, #56829	; 0xddfd
   206d4:	mov	r0, r4
   206d8:	mov	r1, #1
   206dc:	mov	r3, r5
   206e0:	movt	r2, #2
   206e4:	sub	sp, fp, #24
   206e8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   206ec:	b	11f24 <__fprintf_chk@plt>
   206f0:	andeq	r0, r0, r0
   206f4:	subsmi	r0, r9, r0
   206f8:	push	{r4, r5, r6, r7, fp, lr}
   206fc:	add	fp, sp, #16
   20700:	mov	r4, r1
   20704:	ldr	r1, [r0, #8]
   20708:	ldr	r2, [r0, #24]
   2070c:	mov	r5, r0
   20710:	mov	r0, r4
   20714:	blx	r2
   20718:	ldr	r1, [r5, #8]
   2071c:	cmp	r0, r1
   20720:	bcs	2078c <__assert_fail@plt+0xe700>
   20724:	ldr	r7, [r5]
   20728:	mov	r6, #0
   2072c:	ldr	r1, [r7, r0, lsl #3]!
   20730:	cmp	r1, #0
   20734:	cmpne	r7, #0
   20738:	bne	20748 <__assert_fail@plt+0xe6bc>
   2073c:	mov	r0, r6
   20740:	pop	{r4, r5, r6, r7, fp, pc}
   20744:	ldr	r1, [r7]
   20748:	cmp	r1, r4
   2074c:	beq	20774 <__assert_fail@plt+0xe6e8>
   20750:	ldr	r2, [r5, #28]
   20754:	mov	r0, r4
   20758:	blx	r2
   2075c:	cmp	r0, #0
   20760:	bne	20780 <__assert_fail@plt+0xe6f4>
   20764:	ldr	r7, [r7, #4]
   20768:	cmp	r7, #0
   2076c:	bne	20744 <__assert_fail@plt+0xe6b8>
   20770:	b	2073c <__assert_fail@plt+0xe6b0>
   20774:	mov	r6, r4
   20778:	mov	r0, r6
   2077c:	pop	{r4, r5, r6, r7, fp, pc}
   20780:	ldr	r6, [r7]
   20784:	mov	r0, r6
   20788:	pop	{r4, r5, r6, r7, fp, pc}
   2078c:	bl	12038 <abort@plt>
   20790:	ldr	r1, [r0, #16]
   20794:	cmp	r1, #0
   20798:	moveq	r0, #0
   2079c:	bxeq	lr
   207a0:	ldm	r0, {r1, r2}
   207a4:	cmp	r1, r2
   207a8:	bcs	207c0 <__assert_fail@plt+0xe734>
   207ac:	ldr	r0, [r1], #8
   207b0:	cmp	r0, #0
   207b4:	bxne	lr
   207b8:	cmp	r1, r2
   207bc:	bcc	207ac <__assert_fail@plt+0xe720>
   207c0:	push	{fp, lr}
   207c4:	mov	fp, sp
   207c8:	bl	12038 <abort@plt>
   207cc:	push	{r4, r5, fp, lr}
   207d0:	add	fp, sp, #8
   207d4:	mov	r5, r1
   207d8:	ldr	r1, [r0, #8]
   207dc:	ldr	r2, [r0, #24]
   207e0:	mov	r4, r0
   207e4:	mov	r0, r5
   207e8:	blx	r2
   207ec:	ldr	r1, [r4, #8]
   207f0:	cmp	r0, r1
   207f4:	bcs	20850 <__assert_fail@plt+0xe7c4>
   207f8:	ldr	r1, [r4]
   207fc:	add	r2, r1, r0, lsl #3
   20800:	ldr	r3, [r2]
   20804:	ldr	r2, [r2, #4]
   20808:	cmp	r3, r5
   2080c:	beq	2081c <__assert_fail@plt+0xe790>
   20810:	cmp	r2, #0
   20814:	bne	20800 <__assert_fail@plt+0xe774>
   20818:	b	20828 <__assert_fail@plt+0xe79c>
   2081c:	cmp	r2, #0
   20820:	ldrne	r0, [r2]
   20824:	popne	{r4, r5, fp, pc}
   20828:	ldr	r2, [r4, #4]
   2082c:	add	r0, r1, r0, lsl #3
   20830:	add	r1, r0, #8
   20834:	cmp	r1, r2
   20838:	movcs	r0, #0
   2083c:	popcs	{r4, r5, fp, pc}
   20840:	ldr	r0, [r1], #8
   20844:	cmp	r0, #0
   20848:	popne	{r4, r5, fp, pc}
   2084c:	b	20834 <__assert_fail@plt+0xe7a8>
   20850:	bl	12038 <abort@plt>
   20854:	push	{r4, r5, fp, lr}
   20858:	add	fp, sp, #8
   2085c:	ldm	r0, {r5, lr}
   20860:	mov	ip, r0
   20864:	mov	r0, #0
   20868:	cmp	r5, lr
   2086c:	bcs	208b8 <__assert_fail@plt+0xe82c>
   20870:	mov	r0, #0
   20874:	ldr	r3, [r5]
   20878:	cmp	r3, #0
   2087c:	cmpne	r5, #0
   20880:	beq	208ac <__assert_fail@plt+0xe820>
   20884:	mov	r3, r5
   20888:	cmp	r0, r2
   2088c:	popcs	{r4, r5, fp, pc}
   20890:	ldr	r4, [r3]
   20894:	str	r4, [r1, r0, lsl #2]
   20898:	add	r0, r0, #1
   2089c:	ldr	r3, [r3, #4]
   208a0:	cmp	r3, #0
   208a4:	bne	20888 <__assert_fail@plt+0xe7fc>
   208a8:	ldr	lr, [ip, #4]
   208ac:	add	r5, r5, #8
   208b0:	cmp	r5, lr
   208b4:	bcc	20874 <__assert_fail@plt+0xe7e8>
   208b8:	pop	{r4, r5, fp, pc}
   208bc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   208c0:	add	fp, sp, #24
   208c4:	mov	r5, r1
   208c8:	ldr	r4, [r0]
   208cc:	ldr	r1, [r0, #4]
   208d0:	mov	r6, #0
   208d4:	cmp	r4, r1
   208d8:	bcs	2094c <__assert_fail@plt+0xe8c0>
   208dc:	mov	r9, r2
   208e0:	mov	r8, r0
   208e4:	mov	r6, #0
   208e8:	b	20930 <__assert_fail@plt+0xe8a4>
   208ec:	mov	r1, r9
   208f0:	blx	r5
   208f4:	cmp	r0, #0
   208f8:	beq	2094c <__assert_fail@plt+0xe8c0>
   208fc:	mov	r7, r4
   20900:	ldr	r7, [r7, #4]
   20904:	add	r6, r6, #1
   20908:	cmp	r7, #0
   2090c:	beq	20928 <__assert_fail@plt+0xe89c>
   20910:	ldr	r0, [r7]
   20914:	mov	r1, r9
   20918:	blx	r5
   2091c:	cmp	r0, #0
   20920:	bne	20900 <__assert_fail@plt+0xe874>
   20924:	b	2094c <__assert_fail@plt+0xe8c0>
   20928:	ldr	r1, [r8, #4]
   2092c:	b	20940 <__assert_fail@plt+0xe8b4>
   20930:	ldr	r0, [r4]
   20934:	cmp	r0, #0
   20938:	cmpne	r4, #0
   2093c:	bne	208ec <__assert_fail@plt+0xe860>
   20940:	add	r4, r4, #8
   20944:	cmp	r4, r1
   20948:	bcc	20930 <__assert_fail@plt+0xe8a4>
   2094c:	mov	r0, r6
   20950:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20954:	ldrb	r2, [r0]
   20958:	cmp	r2, #0
   2095c:	moveq	r0, #0
   20960:	bxeq	lr
   20964:	add	r3, r0, #1
   20968:	mov	r0, #0
   2096c:	rsb	r0, r0, r0, lsl #5
   20970:	uxtab	r0, r0, r2
   20974:	udiv	r2, r0, r1
   20978:	mls	r0, r2, r1, r0
   2097c:	ldrb	r2, [r3], #1
   20980:	cmp	r2, #0
   20984:	bne	2096c <__assert_fail@plt+0xe8e0>
   20988:	bx	lr
   2098c:	movw	r1, #56856	; 0xde18
   20990:	movt	r1, #2
   20994:	vld1.32	{d16-d17}, [r1]!
   20998:	ldr	r1, [r1]
   2099c:	vst1.32	{d16-d17}, [r0]!
   209a0:	str	r1, [r0]
   209a4:	bx	lr
   209a8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   209ac:	add	fp, sp, #24
   209b0:	movw	r9, #3024	; 0xbd0
   209b4:	movw	r5, #3004	; 0xbbc
   209b8:	cmp	r3, #0
   209bc:	mov	r6, r0
   209c0:	mov	r0, #40	; 0x28
   209c4:	mov	r7, r1
   209c8:	movt	r9, #2
   209cc:	movt	r5, #2
   209d0:	movne	r9, r3
   209d4:	cmp	r2, #0
   209d8:	movne	r5, r2
   209dc:	bl	29460 <_obstack_memory_used@@Base+0x43ec>
   209e0:	mov	r8, #0
   209e4:	cmp	r0, #0
   209e8:	beq	20ba4 <__assert_fail@plt+0xeb18>
   209ec:	mov	r4, r0
   209f0:	movw	r0, #56856	; 0xde18
   209f4:	cmp	r7, #0
   209f8:	movt	r0, #2
   209fc:	moveq	r7, r0
   20a00:	cmp	r7, r0
   20a04:	str	r7, [r4, #20]
   20a08:	beq	20a84 <__assert_fail@plt+0xe9f8>
   20a0c:	vldr	s2, [pc, #408]	; 20bac <__assert_fail@plt+0xeb20>
   20a10:	vldr	s0, [r7, #8]
   20a14:	vcmpe.f32	s0, s2
   20a18:	vmrs	APSR_nzcv, fpscr
   20a1c:	ble	20b30 <__assert_fail@plt+0xeaa4>
   20a20:	vldr	s4, [pc, #392]	; 20bb0 <__assert_fail@plt+0xeb24>
   20a24:	vcmpe.f32	s0, s4
   20a28:	vmrs	APSR_nzcv, fpscr
   20a2c:	bpl	20b30 <__assert_fail@plt+0xeaa4>
   20a30:	vldr	s4, [pc, #380]	; 20bb4 <__assert_fail@plt+0xeb28>
   20a34:	vldr	s6, [r7, #12]
   20a38:	vcmpe.f32	s6, s4
   20a3c:	vmrs	APSR_nzcv, fpscr
   20a40:	ble	20b30 <__assert_fail@plt+0xeaa4>
   20a44:	vldr	s4, [r7]
   20a48:	vcmpe.f32	s4, #0.0
   20a4c:	vmrs	APSR_nzcv, fpscr
   20a50:	blt	20b30 <__assert_fail@plt+0xeaa4>
   20a54:	vadd.f32	s2, s4, s2
   20a58:	vcmpe.f32	s2, s0
   20a5c:	vmrs	APSR_nzcv, fpscr
   20a60:	bpl	20b30 <__assert_fail@plt+0xeaa4>
   20a64:	vldr	s0, [r7, #4]
   20a68:	vmov.f32	s4, #112	; 0x3f800000  1.0
   20a6c:	vcmpe.f32	s0, s4
   20a70:	vmrs	APSR_nzcv, fpscr
   20a74:	bhi	20b30 <__assert_fail@plt+0xeaa4>
   20a78:	vcmpe.f32	s2, s0
   20a7c:	vmrs	APSR_nzcv, fpscr
   20a80:	bpl	20b30 <__assert_fail@plt+0xeaa4>
   20a84:	ldrb	r0, [r7, #16]
   20a88:	cmp	r0, #0
   20a8c:	bne	20ab8 <__assert_fail@plt+0xea2c>
   20a90:	vldr	s0, [r7, #8]
   20a94:	vldr	s4, [pc, #284]	; 20bb8 <__assert_fail@plt+0xeb2c>
   20a98:	vmov	s2, r6
   20a9c:	vcvt.f32.u32	s2, s2
   20aa0:	vdiv.f32	s2, s2, s0
   20aa4:	vcmpe.f32	s2, s4
   20aa8:	vcvt.u32.f32	s0, s2
   20aac:	vmrs	APSR_nzcv, fpscr
   20ab0:	bge	20b40 <__assert_fail@plt+0xeab4>
   20ab4:	vmov	r6, s0
   20ab8:	cmp	r6, #10
   20abc:	movls	r6, #10
   20ac0:	orr	r0, r6, #1
   20ac4:	cmn	r0, #1
   20ac8:	beq	20b40 <__assert_fail@plt+0xeab4>
   20acc:	ldr	r6, [fp, #8]
   20ad0:	mov	r1, #3
   20ad4:	cmp	r0, #10
   20ad8:	bcc	20b10 <__assert_fail@plt+0xea84>
   20adc:	mov	r1, #3
   20ae0:	mov	r3, #9
   20ae4:	mov	r2, #12
   20ae8:	udiv	r7, r0, r1
   20aec:	mls	r7, r7, r1, r0
   20af0:	cmp	r7, #0
   20af4:	beq	20b10 <__assert_fail@plt+0xea84>
   20af8:	add	r3, r3, r2
   20afc:	add	r2, r2, #8
   20b00:	add	r1, r1, #2
   20b04:	add	r3, r3, #4
   20b08:	cmp	r3, r0
   20b0c:	bcc	20ae8 <__assert_fail@plt+0xea5c>
   20b10:	udiv	r2, r0, r1
   20b14:	mls	r1, r2, r1, r0
   20b18:	cmp	r1, #0
   20b1c:	bne	20b38 <__assert_fail@plt+0xeaac>
   20b20:	add	r0, r0, #2
   20b24:	cmn	r0, #1
   20b28:	bne	20ad0 <__assert_fail@plt+0xea44>
   20b2c:	b	20b40 <__assert_fail@plt+0xeab4>
   20b30:	str	r0, [r4, #20]
   20b34:	b	20b48 <__assert_fail@plt+0xeabc>
   20b38:	cmp	r0, #536870912	; 0x20000000
   20b3c:	bcc	20b58 <__assert_fail@plt+0xeacc>
   20b40:	mov	r0, #0
   20b44:	str	r0, [r4, #8]
   20b48:	mov	r0, r4
   20b4c:	bl	2046c <__assert_fail@plt+0xe3e0>
   20b50:	mov	r0, r8
   20b54:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20b58:	cmp	r0, #0
   20b5c:	str	r0, [r4, #8]
   20b60:	beq	20b48 <__assert_fail@plt+0xeabc>
   20b64:	mov	r1, #8
   20b68:	bl	2940c <_obstack_memory_used@@Base+0x4398>
   20b6c:	cmp	r0, #0
   20b70:	str	r0, [r4]
   20b74:	beq	20b48 <__assert_fail@plt+0xeabc>
   20b78:	mov	r1, #0
   20b7c:	mov	r8, r4
   20b80:	str	r1, [r4, #12]
   20b84:	str	r1, [r4, #16]
   20b88:	str	r5, [r4, #24]
   20b8c:	str	r9, [r4, #28]
   20b90:	str	r6, [r4, #32]
   20b94:	str	r1, [r4, #36]	; 0x24
   20b98:	ldr	r1, [r4, #8]
   20b9c:	add	r0, r0, r1, lsl #3
   20ba0:	str	r0, [r4, #4]
   20ba4:	mov	r0, r8
   20ba8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20bac:	stclcc	12, cr12, [ip, #820]	; 0x334
   20bb0:	svccc	0x00666666
   20bb4:	svccc	0x008ccccd
   20bb8:	svcmi	0x00800000
   20bbc:	ror	r2, r0, #3
   20bc0:	udiv	r2, r2, r1
   20bc4:	mul	r1, r2, r1
   20bc8:	rsb	r0, r1, r0, ror #3
   20bcc:	bx	lr
   20bd0:	sub	r0, r0, r1
   20bd4:	clz	r0, r0
   20bd8:	lsr	r0, r0, #5
   20bdc:	bx	lr
   20be0:	push	{r4, r5, r6, r7, fp, lr}
   20be4:	add	fp, sp, #16
   20be8:	mov	r4, r0
   20bec:	ldr	r5, [r0]
   20bf0:	ldr	r0, [r0, #4]
   20bf4:	cmp	r5, r0
   20bf8:	bcs	20c90 <__assert_fail@plt+0xec04>
   20bfc:	mov	r6, #0
   20c00:	ldr	r1, [r5]
   20c04:	cmp	r1, #0
   20c08:	beq	20c84 <__assert_fail@plt+0xebf8>
   20c0c:	ldr	r1, [r4, #32]
   20c10:	ldr	r7, [r5, #4]
   20c14:	cmp	r1, #0
   20c18:	mov	r0, r1
   20c1c:	movwne	r0, #1
   20c20:	cmp	r7, #0
   20c24:	beq	20c68 <__assert_fail@plt+0xebdc>
   20c28:	tst	r0, #1
   20c2c:	beq	20c3c <__assert_fail@plt+0xebb0>
   20c30:	ldr	r0, [r7]
   20c34:	blx	r1
   20c38:	ldr	r1, [r4, #32]
   20c3c:	str	r6, [r7]
   20c40:	cmp	r1, #0
   20c44:	ldr	r0, [r4, #36]	; 0x24
   20c48:	ldr	r2, [r7, #4]
   20c4c:	str	r0, [r7, #4]
   20c50:	mov	r0, r1
   20c54:	str	r7, [r4, #36]	; 0x24
   20c58:	mov	r7, r2
   20c5c:	movwne	r0, #1
   20c60:	cmp	r2, #0
   20c64:	bne	20c28 <__assert_fail@plt+0xeb9c>
   20c68:	cmp	r0, #0
   20c6c:	beq	20c78 <__assert_fail@plt+0xebec>
   20c70:	ldr	r0, [r5]
   20c74:	blx	r1
   20c78:	str	r6, [r5]
   20c7c:	str	r6, [r5, #4]
   20c80:	ldr	r0, [r4, #4]
   20c84:	add	r5, r5, #8
   20c88:	cmp	r5, r0
   20c8c:	bcc	20c00 <__assert_fail@plt+0xeb74>
   20c90:	mov	r0, #0
   20c94:	str	r0, [r4, #12]
   20c98:	str	r0, [r4, #16]
   20c9c:	pop	{r4, r5, r6, r7, fp, pc}
   20ca0:	push	{r4, r5, r6, sl, fp, lr}
   20ca4:	add	fp, sp, #16
   20ca8:	mov	r4, r0
   20cac:	ldr	r0, [r0, #32]
   20cb0:	cmp	r0, #0
   20cb4:	ldrne	r0, [r4, #16]
   20cb8:	cmpne	r0, #0
   20cbc:	beq	20d24 <__assert_fail@plt+0xec98>
   20cc0:	ldr	r5, [r4]
   20cc4:	ldr	r1, [r4, #4]
   20cc8:	cmp	r5, r1
   20ccc:	bcc	20ce0 <__assert_fail@plt+0xec54>
   20cd0:	b	20d24 <__assert_fail@plt+0xec98>
   20cd4:	add	r5, r5, #8
   20cd8:	cmp	r5, r1
   20cdc:	bcs	20d24 <__assert_fail@plt+0xec98>
   20ce0:	ldr	r0, [r5]
   20ce4:	cmp	r0, #0
   20ce8:	cmpne	r5, #0
   20cec:	beq	20cd4 <__assert_fail@plt+0xec48>
   20cf0:	ldr	r1, [r4, #32]
   20cf4:	blx	r1
   20cf8:	ldr	r6, [r5, #4]
   20cfc:	cmp	r6, #0
   20d00:	beq	20d1c <__assert_fail@plt+0xec90>
   20d04:	ldr	r1, [r4, #32]
   20d08:	ldr	r0, [r6]
   20d0c:	blx	r1
   20d10:	ldr	r6, [r6, #4]
   20d14:	cmp	r6, #0
   20d18:	bne	20d04 <__assert_fail@plt+0xec78>
   20d1c:	ldr	r1, [r4, #4]
   20d20:	b	20cd4 <__assert_fail@plt+0xec48>
   20d24:	ldr	r5, [r4]
   20d28:	ldr	r1, [r4, #4]
   20d2c:	cmp	r5, r1
   20d30:	bcc	20d44 <__assert_fail@plt+0xecb8>
   20d34:	b	20d6c <__assert_fail@plt+0xece0>
   20d38:	add	r5, r5, #8
   20d3c:	cmp	r5, r1
   20d40:	bcs	20d6c <__assert_fail@plt+0xece0>
   20d44:	ldr	r0, [r5, #4]
   20d48:	cmp	r0, #0
   20d4c:	beq	20d38 <__assert_fail@plt+0xecac>
   20d50:	ldr	r6, [r0, #4]
   20d54:	bl	2046c <__assert_fail@plt+0xe3e0>
   20d58:	cmp	r6, #0
   20d5c:	mov	r0, r6
   20d60:	bne	20d50 <__assert_fail@plt+0xecc4>
   20d64:	ldr	r1, [r4, #4]
   20d68:	b	20d38 <__assert_fail@plt+0xecac>
   20d6c:	ldr	r0, [r4, #36]	; 0x24
   20d70:	cmp	r0, #0
   20d74:	beq	20d8c <__assert_fail@plt+0xed00>
   20d78:	ldr	r5, [r0, #4]
   20d7c:	bl	2046c <__assert_fail@plt+0xe3e0>
   20d80:	cmp	r5, #0
   20d84:	mov	r0, r5
   20d88:	bne	20d78 <__assert_fail@plt+0xecec>
   20d8c:	ldr	r0, [r4]
   20d90:	bl	2046c <__assert_fail@plt+0xe3e0>
   20d94:	mov	r0, r4
   20d98:	pop	{r4, r5, r6, sl, fp, lr}
   20d9c:	b	2046c <__assert_fail@plt+0xe3e0>
   20da0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20da4:	add	fp, sp, #28
   20da8:	sub	sp, sp, #44	; 0x2c
   20dac:	mov	r7, r0
   20db0:	mov	r4, r0
   20db4:	ldr	r0, [r7, #20]!
   20db8:	ldrb	r2, [r0, #16]
   20dbc:	cmp	r2, #0
   20dc0:	bne	20df0 <__assert_fail@plt+0xed64>
   20dc4:	vldr	s0, [r0, #8]
   20dc8:	vldr	s4, [pc, #560]	; 21000 <__assert_fail@plt+0xef74>
   20dcc:	vmov	s2, r1
   20dd0:	mov	r5, #0
   20dd4:	vcvt.f32.u32	s2, s2
   20dd8:	vdiv.f32	s2, s2, s0
   20ddc:	vcmpe.f32	s2, s4
   20de0:	vcvt.u32.f32	s0, s2
   20de4:	vmrs	APSR_nzcv, fpscr
   20de8:	bge	20ff0 <__assert_fail@plt+0xef64>
   20dec:	vmov	r1, s0
   20df0:	cmp	r1, #10
   20df4:	mov	r5, #0
   20df8:	movls	r1, #10
   20dfc:	orr	r6, r1, #1
   20e00:	cmn	r6, #1
   20e04:	bne	20e18 <__assert_fail@plt+0xed8c>
   20e08:	b	20ff0 <__assert_fail@plt+0xef64>
   20e0c:	add	r6, r6, #2
   20e10:	cmn	r6, #1
   20e14:	beq	20ff0 <__assert_fail@plt+0xef64>
   20e18:	mov	r0, #3
   20e1c:	cmp	r6, #10
   20e20:	bcc	20e58 <__assert_fail@plt+0xedcc>
   20e24:	mov	r0, #3
   20e28:	mov	r2, #9
   20e2c:	mov	r1, #12
   20e30:	udiv	r3, r6, r0
   20e34:	mls	r3, r3, r0, r6
   20e38:	cmp	r3, #0
   20e3c:	beq	20e58 <__assert_fail@plt+0xedcc>
   20e40:	add	r2, r2, r1
   20e44:	add	r1, r1, #8
   20e48:	add	r0, r0, #2
   20e4c:	add	r2, r2, #4
   20e50:	cmp	r2, r6
   20e54:	bcc	20e30 <__assert_fail@plt+0xeda4>
   20e58:	udiv	r1, r6, r0
   20e5c:	mls	r0, r1, r0, r6
   20e60:	cmp	r0, #0
   20e64:	beq	20e0c <__assert_fail@plt+0xed80>
   20e68:	sub	r0, r6, #1
   20e6c:	cmn	r0, #-536870910	; 0xe0000002
   20e70:	bhi	20ff0 <__assert_fail@plt+0xef64>
   20e74:	ldr	r0, [r4, #8]
   20e78:	cmp	r6, r0
   20e7c:	bne	20e88 <__assert_fail@plt+0xedfc>
   20e80:	mov	r5, #1
   20e84:	b	20ff0 <__assert_fail@plt+0xef64>
   20e88:	mov	r0, r6
   20e8c:	mov	r1, #8
   20e90:	bl	2940c <_obstack_memory_used@@Base+0x4398>
   20e94:	cmp	r0, #0
   20e98:	str	r0, [sp, #4]
   20e9c:	beq	20ff0 <__assert_fail@plt+0xef64>
   20ea0:	mov	r1, #0
   20ea4:	add	r0, r0, r6, lsl #3
   20ea8:	str	r6, [sp, #12]
   20eac:	add	r5, sp, #4
   20eb0:	mov	sl, r4
   20eb4:	mov	r2, #0
   20eb8:	str	r1, [sp, #16]
   20ebc:	str	r1, [sp, #20]
   20ec0:	str	r0, [sp, #8]
   20ec4:	add	r0, r5, #20
   20ec8:	mov	r1, r4
   20ecc:	vld1.32	{d16-d17}, [r7]
   20ed0:	vst1.32	{d16-d17}, [r0]
   20ed4:	ldr	r0, [sl, #36]!	; 0x24
   20ed8:	str	r0, [sp, #40]	; 0x28
   20edc:	mov	r0, r5
   20ee0:	bl	21004 <__assert_fail@plt+0xef78>
   20ee4:	cmp	r0, #0
   20ee8:	beq	20f10 <__assert_fail@plt+0xee84>
   20eec:	ldr	r0, [r4]
   20ef0:	bl	2046c <__assert_fail@plt+0xe3e0>
   20ef4:	mov	r0, #36	; 0x24
   20ef8:	vld1.32	{d16-d17}, [r5], r0
   20efc:	vst1.32	{d16-d17}, [r4], r0
   20f00:	ldr	r0, [r5]
   20f04:	mov	r5, #1
   20f08:	str	r0, [r4]
   20f0c:	b	20ff0 <__assert_fail@plt+0xef64>
   20f10:	ldr	r0, [sp, #40]	; 0x28
   20f14:	str	r0, [sl]
   20f18:	ldr	r0, [sp, #8]
   20f1c:	ldr	r8, [sp, #4]
   20f20:	cmp	r8, r0
   20f24:	str	r0, [sp]
   20f28:	bcs	20fcc <__assert_fail@plt+0xef40>
   20f2c:	mov	r9, #0
   20f30:	ldr	r0, [r8]
   20f34:	cmp	r0, #0
   20f38:	beq	20fbc <__assert_fail@plt+0xef30>
   20f3c:	ldr	r6, [r8, #4]
   20f40:	cmp	r6, #0
   20f44:	beq	20fb8 <__assert_fail@plt+0xef2c>
   20f48:	ldr	r1, [r4, #8]
   20f4c:	ldr	r5, [r6]
   20f50:	ldr	r2, [r4, #24]
   20f54:	mov	r0, r5
   20f58:	blx	r2
   20f5c:	ldr	r1, [r4, #8]
   20f60:	cmp	r0, r1
   20f64:	bcs	20ffc <__assert_fail@plt+0xef70>
   20f68:	ldr	r3, [r4]
   20f6c:	ldr	r2, [r6, #4]
   20f70:	ldr	r7, [r3, r0, lsl #3]
   20f74:	cmp	r7, #0
   20f78:	beq	20f88 <__assert_fail@plt+0xeefc>
   20f7c:	add	r0, r3, r0, lsl #3
   20f80:	add	r0, r0, #4
   20f84:	b	20fa0 <__assert_fail@plt+0xef14>
   20f88:	str	r5, [r3, r0, lsl #3]
   20f8c:	ldr	r0, [r4, #12]
   20f90:	add	r0, r0, #1
   20f94:	str	r0, [r4, #12]
   20f98:	mov	r0, sl
   20f9c:	str	r9, [r6]
   20fa0:	ldr	r3, [r0]
   20fa4:	cmp	r2, #0
   20fa8:	str	r3, [r6, #4]
   20fac:	str	r6, [r0]
   20fb0:	mov	r6, r2
   20fb4:	bne	20f4c <__assert_fail@plt+0xeec0>
   20fb8:	str	r9, [r8, #4]
   20fbc:	ldr	r0, [sp]
   20fc0:	add	r8, r8, #8
   20fc4:	cmp	r8, r0
   20fc8:	bcc	20f30 <__assert_fail@plt+0xeea4>
   20fcc:	add	r1, sp, #4
   20fd0:	mov	r0, r4
   20fd4:	mov	r2, #0
   20fd8:	mov	r5, #0
   20fdc:	bl	21004 <__assert_fail@plt+0xef78>
   20fe0:	cmp	r0, #0
   20fe4:	beq	20ffc <__assert_fail@plt+0xef70>
   20fe8:	ldr	r0, [sp, #4]
   20fec:	bl	2046c <__assert_fail@plt+0xe3e0>
   20ff0:	mov	r0, r5
   20ff4:	sub	sp, fp, #28
   20ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ffc:	bl	12038 <abort@plt>
   21000:	svcmi	0x00800000
   21004:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21008:	add	fp, sp, #28
   2100c:	sub	sp, sp, #12
   21010:	ldr	sl, [r1]
   21014:	str	r1, [sp, #8]
   21018:	ldr	r1, [r1, #4]
   2101c:	mov	r7, r0
   21020:	mov	r0, #1
   21024:	str	r2, [sp, #4]
   21028:	cmp	sl, r1
   2102c:	bcs	21188 <__assert_fail@plt+0xf0fc>
   21030:	add	r8, r7, #36	; 0x24
   21034:	mov	r9, #0
   21038:	ldr	r4, [sl]
   2103c:	cmp	r4, #0
   21040:	beq	21170 <__assert_fail@plt+0xf0e4>
   21044:	ldr	r5, [sl, #4]
   21048:	cmp	r5, #0
   2104c:	beq	210c4 <__assert_fail@plt+0xf038>
   21050:	ldr	r1, [r7, #8]
   21054:	ldr	r4, [r5]
   21058:	ldr	r2, [r7, #24]
   2105c:	mov	r0, r4
   21060:	blx	r2
   21064:	ldr	r1, [r7, #8]
   21068:	cmp	r0, r1
   2106c:	bcs	2119c <__assert_fail@plt+0xf110>
   21070:	ldr	r3, [r7]
   21074:	ldr	r2, [r5, #4]
   21078:	ldr	r6, [r3, r0, lsl #3]
   2107c:	cmp	r6, #0
   21080:	beq	21090 <__assert_fail@plt+0xf004>
   21084:	add	r0, r3, r0, lsl #3
   21088:	add	r0, r0, #4
   2108c:	b	210a8 <__assert_fail@plt+0xf01c>
   21090:	str	r4, [r3, r0, lsl #3]
   21094:	ldr	r0, [r7, #12]
   21098:	add	r0, r0, #1
   2109c:	str	r0, [r7, #12]
   210a0:	mov	r0, r8
   210a4:	str	r9, [r5]
   210a8:	ldr	r3, [r0]
   210ac:	cmp	r2, #0
   210b0:	str	r3, [r5, #4]
   210b4:	str	r5, [r0]
   210b8:	mov	r5, r2
   210bc:	bne	21054 <__assert_fail@plt+0xefc8>
   210c0:	ldr	r4, [sl]
   210c4:	ldr	r0, [sp, #4]
   210c8:	str	r9, [sl, #4]
   210cc:	cmp	r0, #0
   210d0:	bne	21170 <__assert_fail@plt+0xf0e4>
   210d4:	ldr	r1, [r7, #8]
   210d8:	ldr	r2, [r7, #24]
   210dc:	mov	r0, r4
   210e0:	blx	r2
   210e4:	mov	r5, r0
   210e8:	ldr	r0, [r7, #8]
   210ec:	cmp	r5, r0
   210f0:	bcs	2119c <__assert_fail@plt+0xf110>
   210f4:	ldr	r6, [r7]
   210f8:	ldr	r0, [r6, r5, lsl #3]
   210fc:	cmp	r0, #0
   21100:	beq	21120 <__assert_fail@plt+0xf094>
   21104:	ldr	r0, [r8]
   21108:	cmp	r0, #0
   2110c:	beq	21134 <__assert_fail@plt+0xf0a8>
   21110:	mov	r1, r0
   21114:	ldr	r2, [r1, #4]!
   21118:	str	r2, [r8]
   2111c:	b	21148 <__assert_fail@plt+0xf0bc>
   21120:	str	r4, [r6, r5, lsl #3]
   21124:	ldr	r0, [r7, #12]
   21128:	add	r0, r0, #1
   2112c:	str	r0, [r7, #12]
   21130:	b	2115c <__assert_fail@plt+0xf0d0>
   21134:	mov	r0, #8
   21138:	bl	29460 <_obstack_memory_used@@Base+0x43ec>
   2113c:	cmp	r0, #0
   21140:	beq	21190 <__assert_fail@plt+0xf104>
   21144:	add	r1, r0, #4
   21148:	str	r4, [r0]
   2114c:	add	r2, r6, r5, lsl #3
   21150:	ldr	r3, [r2, #4]
   21154:	str	r3, [r1]
   21158:	str	r0, [r2, #4]
   2115c:	ldr	r1, [sp, #8]
   21160:	str	r9, [sl]
   21164:	ldr	r0, [r1, #12]
   21168:	sub	r0, r0, #1
   2116c:	str	r0, [r1, #12]
   21170:	ldr	r0, [sp, #8]
   21174:	add	sl, sl, #8
   21178:	ldr	r0, [r0, #4]
   2117c:	cmp	sl, r0
   21180:	bcc	21038 <__assert_fail@plt+0xefac>
   21184:	mov	r0, #1
   21188:	sub	sp, fp, #28
   2118c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21190:	mov	r0, #0
   21194:	sub	sp, fp, #28
   21198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2119c:	bl	12038 <abort@plt>
   211a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   211a4:	add	fp, sp, #28
   211a8:	sub	sp, sp, #4
   211ac:	cmp	r1, #0
   211b0:	beq	214d4 <__assert_fail@plt+0xf448>
   211b4:	mov	r8, r2
   211b8:	mov	sl, r1
   211bc:	ldr	r1, [r0, #8]
   211c0:	ldr	r2, [r0, #24]
   211c4:	mov	r4, r0
   211c8:	mov	r0, sl
   211cc:	blx	r2
   211d0:	mov	r7, r0
   211d4:	ldr	r0, [r4, #8]
   211d8:	cmp	r7, r0
   211dc:	bcs	214d4 <__assert_fail@plt+0xf448>
   211e0:	ldr	r5, [r4]
   211e4:	mov	r9, r5
   211e8:	ldr	r1, [r9, r7, lsl #3]!
   211ec:	cmp	r1, #0
   211f0:	beq	2127c <__assert_fail@plt+0xf1f0>
   211f4:	cmp	r1, sl
   211f8:	beq	21224 <__assert_fail@plt+0xf198>
   211fc:	ldr	r2, [r4, #28]
   21200:	mov	r0, sl
   21204:	blx	r2
   21208:	cmp	r0, #0
   2120c:	mov	r6, r9
   21210:	beq	21238 <__assert_fail@plt+0xf1ac>
   21214:	ldr	r0, [r6]
   21218:	cmp	r0, #0
   2121c:	bne	21228 <__assert_fail@plt+0xf19c>
   21220:	b	2127c <__assert_fail@plt+0xf1f0>
   21224:	mov	r0, sl
   21228:	cmp	r8, #0
   2122c:	mov	r7, #0
   21230:	strne	r0, [r8]
   21234:	b	21470 <__assert_fail@plt+0xf3e4>
   21238:	add	r6, r5, r7, lsl #3
   2123c:	ldr	r0, [r6, #4]!
   21240:	cmp	r0, #0
   21244:	beq	2127c <__assert_fail@plt+0xf1f0>
   21248:	ldr	r1, [r0]
   2124c:	cmp	r1, sl
   21250:	beq	21270 <__assert_fail@plt+0xf1e4>
   21254:	ldr	r2, [r4, #28]
   21258:	mov	r0, sl
   2125c:	blx	r2
   21260:	ldr	r6, [r6]
   21264:	cmp	r0, #0
   21268:	beq	2123c <__assert_fail@plt+0xf1b0>
   2126c:	b	21214 <__assert_fail@plt+0xf188>
   21270:	mov	r0, sl
   21274:	cmp	r0, #0
   21278:	bne	21228 <__assert_fail@plt+0xf19c>
   2127c:	vldr	s0, [r4, #8]
   21280:	vldr	s2, [r4, #12]
   21284:	ldr	r0, [r4, #20]
   21288:	vcvt.f32.u32	s0, s0
   2128c:	vcvt.f32.u32	s4, s2
   21290:	vldr	s2, [r0, #8]
   21294:	vmul.f32	s6, s2, s0
   21298:	vcmpe.f32	s6, s4
   2129c:	vmrs	APSR_nzcv, fpscr
   212a0:	bpl	213f4 <__assert_fail@plt+0xf368>
   212a4:	movw	r1, #56856	; 0xde18
   212a8:	movt	r1, #2
   212ac:	cmp	r0, r1
   212b0:	beq	2133c <__assert_fail@plt+0xf2b0>
   212b4:	vldr	s6, [pc, #540]	; 214d8 <__assert_fail@plt+0xf44c>
   212b8:	vcmpe.f32	s2, s6
   212bc:	vmrs	APSR_nzcv, fpscr
   212c0:	ble	21328 <__assert_fail@plt+0xf29c>
   212c4:	vldr	s8, [pc, #528]	; 214dc <__assert_fail@plt+0xf450>
   212c8:	vcmpe.f32	s2, s8
   212cc:	vmrs	APSR_nzcv, fpscr
   212d0:	bpl	21328 <__assert_fail@plt+0xf29c>
   212d4:	vldr	s8, [pc, #516]	; 214e0 <__assert_fail@plt+0xf454>
   212d8:	vldr	s10, [r0, #12]
   212dc:	vcmpe.f32	s10, s8
   212e0:	vmrs	APSR_nzcv, fpscr
   212e4:	ble	21328 <__assert_fail@plt+0xf29c>
   212e8:	vldr	s8, [r0]
   212ec:	vcmpe.f32	s8, #0.0
   212f0:	vmrs	APSR_nzcv, fpscr
   212f4:	blt	21328 <__assert_fail@plt+0xf29c>
   212f8:	vadd.f32	s6, s8, s6
   212fc:	vcmpe.f32	s6, s2
   21300:	vmrs	APSR_nzcv, fpscr
   21304:	bpl	21328 <__assert_fail@plt+0xf29c>
   21308:	vldr	s8, [r0, #4]
   2130c:	vmov.f32	s10, #112	; 0x3f800000  1.0
   21310:	vcmpe.f32	s8, s10
   21314:	vmrs	APSR_nzcv, fpscr
   21318:	bhi	21328 <__assert_fail@plt+0xf29c>
   2131c:	vcmpe.f32	s6, s8
   21320:	vmrs	APSR_nzcv, fpscr
   21324:	bmi	21340 <__assert_fail@plt+0xf2b4>
   21328:	vldr	s2, [pc, #436]	; 214e4 <__assert_fail@plt+0xf458>
   2132c:	movw	r0, #56856	; 0xde18
   21330:	movt	r0, #2
   21334:	str	r0, [r4, #20]
   21338:	b	21340 <__assert_fail@plt+0xf2b4>
   2133c:	mov	r0, r1
   21340:	vmul.f32	s6, s2, s0
   21344:	vcmpe.f32	s6, s4
   21348:	vmrs	APSR_nzcv, fpscr
   2134c:	bpl	213f4 <__assert_fail@plt+0xf368>
   21350:	vldr	s4, [r0, #12]
   21354:	ldrb	r0, [r0, #16]
   21358:	mvn	r7, #0
   2135c:	vmul.f32	s0, s4, s0
   21360:	vldr	s4, [pc, #384]	; 214e8 <__assert_fail@plt+0xf45c>
   21364:	cmp	r0, #0
   21368:	vmul.f32	s2, s2, s0
   2136c:	vseleq.f32	s0, s2, s0
   21370:	vcmpe.f32	s0, s4
   21374:	vmrs	APSR_nzcv, fpscr
   21378:	bge	21470 <__assert_fail@plt+0xf3e4>
   2137c:	vcvt.u32.f32	s0, s0
   21380:	mov	r0, r4
   21384:	vmov	r1, s0
   21388:	bl	20da0 <__assert_fail@plt+0xed14>
   2138c:	cmp	r0, #0
   21390:	beq	21470 <__assert_fail@plt+0xf3e4>
   21394:	ldr	r1, [r4, #8]
   21398:	ldr	r2, [r4, #24]
   2139c:	mov	r0, sl
   213a0:	blx	r2
   213a4:	mov	r7, r0
   213a8:	ldr	r0, [r4, #8]
   213ac:	cmp	r7, r0
   213b0:	bcs	214d4 <__assert_fail@plt+0xf448>
   213b4:	ldr	r5, [r4]
   213b8:	mov	r9, r5
   213bc:	ldr	r1, [r9, r7, lsl #3]!
   213c0:	cmp	r1, #0
   213c4:	beq	2141c <__assert_fail@plt+0xf390>
   213c8:	cmp	r1, sl
   213cc:	mov	r0, sl
   213d0:	beq	213ec <__assert_fail@plt+0xf360>
   213d4:	ldr	r2, [r4, #28]
   213d8:	mov	r0, sl
   213dc:	blx	r2
   213e0:	cmp	r0, #0
   213e4:	beq	21484 <__assert_fail@plt+0xf3f8>
   213e8:	ldr	r0, [r9]
   213ec:	cmp	r0, #0
   213f0:	bne	214d4 <__assert_fail@plt+0xf448>
   213f4:	ldr	r0, [r9]
   213f8:	cmp	r0, #0
   213fc:	beq	2141c <__assert_fail@plt+0xf390>
   21400:	ldr	r0, [r4, #36]	; 0x24
   21404:	cmp	r0, #0
   21408:	beq	2143c <__assert_fail@plt+0xf3b0>
   2140c:	mov	r1, r0
   21410:	ldr	r2, [r1, #4]!
   21414:	str	r2, [r4, #36]	; 0x24
   21418:	b	21450 <__assert_fail@plt+0xf3c4>
   2141c:	str	sl, [r9]
   21420:	ldr	r0, [r4, #12]
   21424:	ldr	r1, [r4, #16]
   21428:	add	r0, r0, #1
   2142c:	add	r1, r1, #1
   21430:	str	r0, [r4, #12]
   21434:	str	r1, [r4, #16]
   21438:	b	2146c <__assert_fail@plt+0xf3e0>
   2143c:	mov	r0, #8
   21440:	bl	29460 <_obstack_memory_used@@Base+0x43ec>
   21444:	cmp	r0, #0
   21448:	beq	2147c <__assert_fail@plt+0xf3f0>
   2144c:	add	r1, r0, #4
   21450:	str	sl, [r0]
   21454:	ldr	r2, [r9, #4]
   21458:	str	r2, [r1]
   2145c:	str	r0, [r9, #4]
   21460:	ldr	r0, [r4, #16]
   21464:	add	r0, r0, #1
   21468:	str	r0, [r4, #16]
   2146c:	mov	r7, #1
   21470:	mov	r0, r7
   21474:	sub	sp, fp, #28
   21478:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2147c:	mvn	r7, #0
   21480:	b	21470 <__assert_fail@plt+0xf3e4>
   21484:	add	r6, r5, r7, lsl #3
   21488:	ldr	r0, [r6, #4]!
   2148c:	cmp	r0, #0
   21490:	beq	213f4 <__assert_fail@plt+0xf368>
   21494:	ldr	r1, [r0]
   21498:	cmp	r1, sl
   2149c:	beq	214c8 <__assert_fail@plt+0xf43c>
   214a0:	ldr	r2, [r4, #28]
   214a4:	mov	r0, sl
   214a8:	blx	r2
   214ac:	ldr	r6, [r6]
   214b0:	cmp	r0, #0
   214b4:	beq	21488 <__assert_fail@plt+0xf3fc>
   214b8:	ldr	r0, [r6]
   214bc:	cmp	r0, #0
   214c0:	beq	213f4 <__assert_fail@plt+0xf368>
   214c4:	b	214d4 <__assert_fail@plt+0xf448>
   214c8:	mov	r0, sl
   214cc:	cmp	r0, #0
   214d0:	beq	213f4 <__assert_fail@plt+0xf368>
   214d4:	bl	12038 <abort@plt>
   214d8:	stclcc	12, cr12, [ip, #820]	; 0x334
   214dc:	svccc	0x00666666
   214e0:	svccc	0x008ccccd
   214e4:	svccc	0x004ccccd
   214e8:	svcmi	0x00800000
   214ec:	push	{r4, sl, fp, lr}
   214f0:	add	fp, sp, #8
   214f4:	sub	sp, sp, #8
   214f8:	add	r2, sp, #4
   214fc:	mov	r4, r1
   21500:	bl	211a0 <__assert_fail@plt+0xf114>
   21504:	cmn	r0, #1
   21508:	beq	2151c <__assert_fail@plt+0xf490>
   2150c:	ldr	r1, [sp, #4]
   21510:	cmp	r0, #0
   21514:	moveq	r4, r1
   21518:	b	21520 <__assert_fail@plt+0xf494>
   2151c:	mov	r4, #0
   21520:	mov	r0, r4
   21524:	sub	sp, fp, #8
   21528:	pop	{r4, sl, fp, pc}
   2152c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21530:	add	fp, sp, #24
   21534:	mov	r9, r1
   21538:	ldr	r1, [r0, #8]
   2153c:	ldr	r2, [r0, #24]
   21540:	mov	r5, r0
   21544:	mov	r0, r9
   21548:	blx	r2
   2154c:	mov	r7, r0
   21550:	ldr	r0, [r5, #8]
   21554:	cmp	r7, r0
   21558:	bcs	217b8 <__assert_fail@plt+0xf72c>
   2155c:	ldr	r6, [r5]
   21560:	mov	r8, #0
   21564:	mov	r4, r6
   21568:	ldr	r1, [r4, r7, lsl #3]!
   2156c:	cmp	r1, #0
   21570:	beq	21624 <__assert_fail@plt+0xf598>
   21574:	cmp	r1, r9
   21578:	beq	21594 <__assert_fail@plt+0xf508>
   2157c:	ldr	r2, [r5, #28]
   21580:	mov	r0, r9
   21584:	blx	r2
   21588:	cmp	r0, #0
   2158c:	beq	215cc <__assert_fail@plt+0xf540>
   21590:	ldr	r9, [r4]
   21594:	add	r0, r6, r7, lsl #3
   21598:	ldr	r0, [r0, #4]
   2159c:	cmp	r0, #0
   215a0:	beq	21614 <__assert_fail@plt+0xf588>
   215a4:	ldm	r0, {r1, r2}
   215a8:	stm	r4, {r1, r2}
   215ac:	mov	r1, #0
   215b0:	str	r1, [r0]
   215b4:	ldr	r1, [r5, #36]	; 0x24
   215b8:	str	r1, [r0, #4]
   215bc:	str	r0, [r5, #36]	; 0x24
   215c0:	cmp	r9, #0
   215c4:	bne	2165c <__assert_fail@plt+0xf5d0>
   215c8:	b	21624 <__assert_fail@plt+0xf598>
   215cc:	add	r7, r6, r7, lsl #3
   215d0:	ldr	r0, [r7, #4]!
   215d4:	cmp	r0, #0
   215d8:	beq	21624 <__assert_fail@plt+0xf598>
   215dc:	ldr	r1, [r0]
   215e0:	cmp	r1, r9
   215e4:	beq	2162c <__assert_fail@plt+0xf5a0>
   215e8:	ldr	r2, [r5, #28]
   215ec:	mov	r0, r9
   215f0:	blx	r2
   215f4:	ldr	r1, [r7]
   215f8:	cmp	r0, #0
   215fc:	bne	21634 <__assert_fail@plt+0xf5a8>
   21600:	ldr	r0, [r1, #4]!
   21604:	cmp	r0, #0
   21608:	mov	r7, r1
   2160c:	bne	215dc <__assert_fail@plt+0xf550>
   21610:	b	21624 <__assert_fail@plt+0xf598>
   21614:	mov	r0, #0
   21618:	str	r0, [r4]
   2161c:	cmp	r9, #0
   21620:	bne	2165c <__assert_fail@plt+0xf5d0>
   21624:	mov	r0, r8
   21628:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2162c:	mov	r1, r0
   21630:	b	21638 <__assert_fail@plt+0xf5ac>
   21634:	ldr	r9, [r1]
   21638:	ldr	r0, [r1, #4]
   2163c:	str	r0, [r7]
   21640:	mov	r0, #0
   21644:	str	r0, [r1]
   21648:	ldr	r0, [r5, #36]	; 0x24
   2164c:	str	r0, [r1, #4]
   21650:	str	r1, [r5, #36]	; 0x24
   21654:	cmp	r9, #0
   21658:	beq	21624 <__assert_fail@plt+0xf598>
   2165c:	ldr	r0, [r5, #16]
   21660:	sub	r0, r0, #1
   21664:	str	r0, [r5, #16]
   21668:	ldr	r0, [r4]
   2166c:	cmp	r0, #0
   21670:	bne	21778 <__assert_fail@plt+0xf6ec>
   21674:	ldr	r0, [r5, #12]
   21678:	vldr	s0, [r5, #8]
   2167c:	sub	r1, r0, #1
   21680:	str	r1, [r5, #12]
   21684:	vmov	s2, r1
   21688:	ldr	r0, [r5, #20]
   2168c:	vcvt.f32.u32	s0, s0
   21690:	vcvt.f32.u32	s2, s2
   21694:	vldr	s4, [r0]
   21698:	vmul.f32	s6, s4, s0
   2169c:	vcmpe.f32	s6, s2
   216a0:	vmrs	APSR_nzcv, fpscr
   216a4:	ble	21778 <__assert_fail@plt+0xf6ec>
   216a8:	movw	r1, #56856	; 0xde18
   216ac:	movt	r1, #2
   216b0:	cmp	r0, r1
   216b4:	beq	2170c <__assert_fail@plt+0xf680>
   216b8:	vldr	s8, [pc, #252]	; 217bc <__assert_fail@plt+0xf730>
   216bc:	vldr	s6, [r0, #8]
   216c0:	vcmpe.f32	s6, s8
   216c4:	vmrs	APSR_nzcv, fpscr
   216c8:	ble	216f8 <__assert_fail@plt+0xf66c>
   216cc:	vldr	s10, [pc, #236]	; 217c0 <__assert_fail@plt+0xf734>
   216d0:	vcmpe.f32	s6, s10
   216d4:	vmrs	APSR_nzcv, fpscr
   216d8:	bpl	216f8 <__assert_fail@plt+0xf66c>
   216dc:	vcmpe.f32	s4, #0.0
   216e0:	vmrs	APSR_nzcv, fpscr
   216e4:	vldrge	s10, [r0, #12]
   216e8:	vldrge	s12, [pc, #212]	; 217c4 <__assert_fail@plt+0xf738>
   216ec:	vcmpege.f32	s10, s12
   216f0:	vmrsge	APSR_nzcv, fpscr
   216f4:	bgt	21784 <__assert_fail@plt+0xf6f8>
   216f8:	vldr	s4, [pc, #200]	; 217c8 <__assert_fail@plt+0xf73c>
   216fc:	movw	r0, #56856	; 0xde18
   21700:	movt	r0, #2
   21704:	str	r0, [r5, #20]
   21708:	b	21710 <__assert_fail@plt+0xf684>
   2170c:	mov	r0, r1
   21710:	vmul.f32	s4, s4, s0
   21714:	vcmpe.f32	s4, s2
   21718:	vmrs	APSR_nzcv, fpscr
   2171c:	ble	21778 <__assert_fail@plt+0xf6ec>
   21720:	ldrb	r1, [r0, #16]
   21724:	vldr	s2, [r0, #4]
   21728:	cmp	r1, #0
   2172c:	vmul.f32	s0, s2, s0
   21730:	vldreq	s2, [r0, #8]
   21734:	mov	r0, r5
   21738:	vmuleq.f32	s0, s0, s2
   2173c:	vcvt.u32.f32	s0, s0
   21740:	vmov	r1, s0
   21744:	bl	20da0 <__assert_fail@plt+0xed14>
   21748:	cmp	r0, #0
   2174c:	bne	21778 <__assert_fail@plt+0xf6ec>
   21750:	ldr	r0, [r5, #36]	; 0x24
   21754:	cmp	r0, #0
   21758:	beq	21770 <__assert_fail@plt+0xf6e4>
   2175c:	ldr	r4, [r0, #4]
   21760:	bl	2046c <__assert_fail@plt+0xe3e0>
   21764:	cmp	r4, #0
   21768:	mov	r0, r4
   2176c:	bne	2175c <__assert_fail@plt+0xf6d0>
   21770:	mov	r0, #0
   21774:	str	r0, [r5, #36]	; 0x24
   21778:	mov	r8, r9
   2177c:	mov	r0, r8
   21780:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21784:	vadd.f32	s8, s4, s8
   21788:	vcmpe.f32	s8, s6
   2178c:	vmrs	APSR_nzcv, fpscr
   21790:	bpl	216f8 <__assert_fail@plt+0xf66c>
   21794:	vldr	s6, [r0, #4]
   21798:	vmov.f32	s10, #112	; 0x3f800000  1.0
   2179c:	vcmpe.f32	s6, s10
   217a0:	vmrs	APSR_nzcv, fpscr
   217a4:	bhi	216f8 <__assert_fail@plt+0xf66c>
   217a8:	vcmpe.f32	s8, s6
   217ac:	vmrs	APSR_nzcv, fpscr
   217b0:	bmi	21710 <__assert_fail@plt+0xf684>
   217b4:	b	216f8 <__assert_fail@plt+0xf66c>
   217b8:	bl	12038 <abort@plt>
   217bc:	stclcc	12, cr12, [ip, #820]	; 0x334
   217c0:	svccc	0x00666666
   217c4:	svccc	0x008ccccd
   217c8:	andeq	r0, r0, r0
   217cc:	b	2152c <__assert_fail@plt+0xf4a0>
   217d0:	push	{r4, r5, fp, lr}
   217d4:	add	fp, sp, #8
   217d8:	mov	r5, r0
   217dc:	ldr	r0, [r0]
   217e0:	mov	r4, r1
   217e4:	bl	29704 <_obstack_memory_used@@Base+0x4690>
   217e8:	ldrd	r2, [r5, #8]
   217ec:	eor	r0, r2, r0
   217f0:	mov	r1, r3
   217f4:	mov	r2, r4
   217f8:	mov	r3, #0
   217fc:	bl	29c48 <_obstack_memory_used@@Base+0x4bd4>
   21800:	mov	r0, r2
   21804:	pop	{r4, r5, fp, pc}
   21808:	push	{r4, r5, r6, r7, fp, lr}
   2180c:	add	fp, sp, #16
   21810:	ldrd	r2, [r1, #8]
   21814:	ldrd	r4, [r0, #8]
   21818:	eor	r3, r5, r3
   2181c:	eor	r2, r4, r2
   21820:	orrs	r2, r2, r3
   21824:	mov	r2, #0
   21828:	bne	21858 <__assert_fail@plt+0xf7cc>
   2182c:	ldrd	r4, [r1, #16]
   21830:	ldrd	r6, [r0, #16]
   21834:	eor	r3, r7, r5
   21838:	eor	r7, r6, r4
   2183c:	orrs	r3, r7, r3
   21840:	bne	21858 <__assert_fail@plt+0xf7cc>
   21844:	ldr	r1, [r1]
   21848:	ldr	r0, [r0]
   2184c:	bl	11bd0 <strcmp@plt>
   21850:	clz	r0, r0
   21854:	lsr	r2, r0, #5
   21858:	mov	r0, r2
   2185c:	pop	{r4, r5, r6, r7, fp, pc}
   21860:	push	{r4, sl, fp, lr}
   21864:	add	fp, sp, #8
   21868:	mov	r4, r0
   2186c:	ldr	r0, [r0]
   21870:	bl	2046c <__assert_fail@plt+0xe3e0>
   21874:	mov	r0, r4
   21878:	pop	{r4, sl, fp, lr}
   2187c:	b	2046c <__assert_fail@plt+0xe3e0>
   21880:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21884:	add	fp, sp, #28
   21888:	sub	sp, sp, #4
   2188c:	vpush	{d8-d9}
   21890:	sub	sp, sp, #104	; 0x68
   21894:	mov	r7, r3
   21898:	mov	r6, r2
   2189c:	mov	r9, r1
   218a0:	str	r0, [sp, #44]	; 0x2c
   218a4:	bl	11fa8 <localeconv@plt>
   218a8:	ldr	r5, [r0]
   218ac:	mov	r4, r0
   218b0:	mov	r0, r5
   218b4:	bl	11eac <strlen@plt>
   218b8:	movw	r2, #56738	; 0xdda2
   218bc:	sub	r1, r0, #1
   218c0:	cmp	r1, #16
   218c4:	movt	r2, #2
   218c8:	movcc	r2, r5
   218cc:	ldr	r5, [r4, #4]
   218d0:	ldr	r4, [r4, #8]
   218d4:	movcs	r0, #1
   218d8:	str	r0, [sp, #16]
   218dc:	str	r2, [sp, #12]
   218e0:	mov	r0, r5
   218e4:	bl	11eac <strlen@plt>
   218e8:	movw	r3, #49853	; 0xc2bd
   218ec:	cmp	r0, #17
   218f0:	movw	r0, #647	; 0x287
   218f4:	ldr	r2, [fp, #16]
   218f8:	ldr	sl, [fp, #8]
   218fc:	ldr	r8, [fp, #12]
   21900:	str	r6, [sp, #28]
   21904:	str	r7, [sp, #36]	; 0x24
   21908:	str	r4, [sp, #20]
   2190c:	movt	r3, #2
   21910:	add	r1, r6, r0
   21914:	movcc	r3, r5
   21918:	ands	r0, r7, #32
   2191c:	ldr	r5, [fp, #20]
   21920:	str	r1, [sp, #32]
   21924:	str	r0, [sp, #24]
   21928:	mov	r0, #1000	; 0x3e8
   2192c:	str	r3, [sp, #52]	; 0x34
   21930:	movwne	r0, #1024	; 0x400
   21934:	str	r0, [sp, #40]	; 0x28
   21938:	and	r0, r7, #3
   2193c:	str	r0, [sp, #48]	; 0x30
   21940:	subs	r0, sl, r2
   21944:	sbcs	r0, r8, r5
   21948:	bcs	21a3c <__assert_fail@plt+0xf9b0>
   2194c:	orrs	r0, sl, r8
   21950:	mov	r4, r9
   21954:	beq	21b24 <__assert_fail@plt+0xfa98>
   21958:	ldr	r5, [fp, #20]
   2195c:	mov	r0, r2
   21960:	mov	r2, sl
   21964:	mov	r3, r8
   21968:	mov	r1, r5
   2196c:	bl	29c48 <_obstack_memory_used@@Base+0x4bd4>
   21970:	ldr	r2, [fp, #16]
   21974:	mov	r6, r0
   21978:	mov	r3, r1
   2197c:	umull	r0, r1, r0, sl
   21980:	mla	r1, r6, r8, r1
   21984:	mla	r1, r3, sl, r1
   21988:	subs	r0, r2, r0
   2198c:	sbc	r1, r5, r1
   21990:	orrs	r0, r0, r1
   21994:	bne	21b24 <__assert_fail@plt+0xfa98>
   21998:	ldr	r5, [sp, #44]	; 0x2c
   2199c:	mov	r1, r4
   219a0:	mov	r2, r6
   219a4:	mov	r8, r3
   219a8:	mov	r0, r5
   219ac:	bl	29c48 <_obstack_memory_used@@Base+0x4bd4>
   219b0:	mov	r7, r0
   219b4:	mov	r9, r1
   219b8:	umull	r0, r1, r0, r6
   219bc:	mov	r2, #10
   219c0:	mov	r3, r8
   219c4:	mla	r1, r7, r8, r1
   219c8:	subs	r0, r5, r0
   219cc:	mla	r1, r9, r6, r1
   219d0:	umull	sl, r0, r0, r2
   219d4:	mov	r2, r6
   219d8:	sbc	r1, r4, r1
   219dc:	add	r1, r1, r1, lsl #2
   219e0:	add	r5, r0, r1, lsl #1
   219e4:	mov	r0, sl
   219e8:	mov	r1, r5
   219ec:	bl	29c48 <_obstack_memory_used@@Base+0x4bd4>
   219f0:	mov	r4, r0
   219f4:	umull	r0, r2, r0, r6
   219f8:	mla	r2, r4, r8, r2
   219fc:	subs	r0, sl, r0
   21a00:	mla	r1, r1, r6, r2
   21a04:	mov	r2, #2
   21a08:	sbc	r1, r5, r1
   21a0c:	subs	r3, r6, r0, lsl #1
   21a10:	lsl	r1, r1, #1
   21a14:	orr	r1, r1, r0, lsr #31
   21a18:	sbcs	r3, r8, r1
   21a1c:	orr	r5, r1, r0, lsl #1
   21a20:	movwcc	r2, #3
   21a24:	cmp	r5, #0
   21a28:	movwne	r5, #1
   21a2c:	rsbs	r0, r6, r0, lsl #1
   21a30:	sbcs	r0, r1, r8
   21a34:	movcs	r5, r2
   21a38:	b	21ab4 <__assert_fail@plt+0xfa28>
   21a3c:	mov	r0, sl
   21a40:	mov	r1, r8
   21a44:	mov	r3, r5
   21a48:	bl	29c48 <_obstack_memory_used@@Base+0x4bd4>
   21a4c:	ldr	r2, [fp, #16]
   21a50:	mov	r6, r0
   21a54:	mov	r3, r1
   21a58:	mov	r4, r9
   21a5c:	umull	r0, r1, r0, r2
   21a60:	mla	r1, r6, r5, r1
   21a64:	subs	r0, sl, r0
   21a68:	mla	r1, r3, r2, r1
   21a6c:	sbc	r1, r8, r1
   21a70:	orrs	r0, r0, r1
   21a74:	bne	21b24 <__assert_fail@plt+0xfa98>
   21a78:	ldr	r5, [sp, #44]	; 0x2c
   21a7c:	mov	r2, r6
   21a80:	umull	r7, r0, r6, r5
   21a84:	mla	r0, r6, r4, r0
   21a88:	mla	r9, r3, r5, r0
   21a8c:	mov	r0, r7
   21a90:	mov	r1, r9
   21a94:	bl	29c48 <_obstack_memory_used@@Base+0x4bd4>
   21a98:	ldr	r2, [fp, #16]
   21a9c:	eor	r1, r1, r4
   21aa0:	eor	r0, r0, r5
   21aa4:	orrs	r0, r0, r1
   21aa8:	bne	21b24 <__assert_fail@plt+0xfa98>
   21aac:	mov	r5, #0
   21ab0:	mov	r4, #0
   21ab4:	ldr	r0, [sp, #36]	; 0x24
   21ab8:	ldr	r2, [sp, #40]	; 0x28
   21abc:	mvn	r6, #0
   21ac0:	ands	r8, r0, #16
   21ac4:	beq	21ad8 <__assert_fail@plt+0xfa4c>
   21ac8:	subs	r0, r7, r2
   21acc:	mov	r6, #0
   21ad0:	sbcs	r0, r9, #0
   21ad4:	bcs	22000 <__assert_fail@plt+0xff74>
   21ad8:	ldr	r0, [sp, #32]
   21adc:	mov	sl, r7
   21ae0:	str	r0, [sp, #44]	; 0x2c
   21ae4:	ldr	r0, [sp, #48]	; 0x30
   21ae8:	cmp	r0, #0
   21aec:	beq	21e14 <__assert_fail@plt+0xfd88>
   21af0:	cmp	r0, #1
   21af4:	bne	21e88 <__assert_fail@plt+0xfdfc>
   21af8:	rsbs	r1, r5, #0
   21afc:	mov	r0, #0
   21b00:	and	r3, sl, #1
   21b04:	ldr	r5, [sp, #44]	; 0x2c
   21b08:	sbc	r0, r0, #0
   21b0c:	eor	r1, r3, r1
   21b10:	orrs	r0, r1, r0
   21b14:	addne	r4, r4, #1
   21b18:	cmp	r4, #5
   21b1c:	bgt	21e24 <__assert_fail@plt+0xfd98>
   21b20:	b	21e78 <__assert_fail@plt+0xfdec>
   21b24:	ldr	r9, [fp, #20]
   21b28:	mov	r0, r2
   21b2c:	mov	r1, r9
   21b30:	bl	29b00 <_obstack_memory_used@@Base+0x4a8c>
   21b34:	vmov	d8, r0, r1
   21b38:	ldr	r0, [sp, #44]	; 0x2c
   21b3c:	mov	r1, r4
   21b40:	bl	29b00 <_obstack_memory_used@@Base+0x4a8c>
   21b44:	mov	r6, r0
   21b48:	mov	r7, r1
   21b4c:	mov	r0, sl
   21b50:	mov	r1, r8
   21b54:	bl	29b00 <_obstack_memory_used@@Base+0x4a8c>
   21b58:	vmov	d17, r6, r7
   21b5c:	ldr	r7, [sp, #36]	; 0x24
   21b60:	vmov	d16, r0, r1
   21b64:	vdiv.f64	d16, d16, d8
   21b68:	vmul.f64	d8, d16, d17
   21b6c:	tst	r7, #16
   21b70:	bne	21be4 <__assert_fail@plt+0xfb58>
   21b74:	ldr	r0, [sp, #48]	; 0x30
   21b78:	ldr	sl, [sp, #28]
   21b7c:	cmp	r0, #1
   21b80:	beq	21d6c <__assert_fail@plt+0xfce0>
   21b84:	vldr	d16, [pc, #756]	; 21e80 <__assert_fail@plt+0xfdf4>
   21b88:	ldr	r8, [sp, #32]
   21b8c:	vcmpe.f64	d8, d16
   21b90:	vmrs	APSR_nzcv, fpscr
   21b94:	bpl	21d70 <__assert_fail@plt+0xfce4>
   21b98:	mov	r6, r0
   21b9c:	vmov	r0, r1, d8
   21ba0:	bl	29c98 <_obstack_memory_used@@Base+0x4c24>
   21ba4:	mov	r4, r0
   21ba8:	mov	r5, r1
   21bac:	bl	29b00 <_obstack_memory_used@@Base+0x4a8c>
   21bb0:	vmov	d16, r0, r1
   21bb4:	clz	r0, r6
   21bb8:	mov	r2, #0
   21bbc:	vcmp.f64	d8, d16
   21bc0:	lsr	r0, r0, #5
   21bc4:	vmrs	APSR_nzcv, fpscr
   21bc8:	movwne	r2, #1
   21bcc:	and	r0, r0, r2
   21bd0:	adds	r0, r0, r4
   21bd4:	adc	r1, r5, #0
   21bd8:	bl	29b00 <_obstack_memory_used@@Base+0x4a8c>
   21bdc:	vmov	d8, r0, r1
   21be0:	b	21d70 <__assert_fail@plt+0xfce4>
   21be4:	ldr	r0, [sp, #40]	; 0x28
   21be8:	vmov.f64	d16, #112	; 0x3f800000  1.0
   21bec:	mov	r6, #0
   21bf0:	vmov	s0, r0
   21bf4:	vcvt.f64.u32	d17, s0
   21bf8:	ldr	sl, [sp, #28]
   21bfc:	add	r6, r6, #1
   21c00:	vmul.f64	d16, d16, d17
   21c04:	cmp	r6, #7
   21c08:	vmulls.f64	d18, d16, d17
   21c0c:	vcmpels.f64	d18, d8
   21c10:	vmrsls	APSR_nzcv, fpscr
   21c14:	bls	21bfc <__assert_fail@plt+0xfb70>
   21c18:	ldr	r0, [sp, #48]	; 0x30
   21c1c:	ldr	r8, [sp, #32]
   21c20:	ldr	r5, [sp, #16]
   21c24:	vdiv.f64	d8, d8, d16
   21c28:	vmov.f64	d16, d8
   21c2c:	cmp	r0, #1
   21c30:	beq	21c94 <__assert_fail@plt+0xfc08>
   21c34:	vldr	d16, [pc, #580]	; 21e80 <__assert_fail@plt+0xfdf4>
   21c38:	vcmpe.f64	d8, d16
   21c3c:	vmov.f64	d16, d8
   21c40:	vmrs	APSR_nzcv, fpscr
   21c44:	bpl	21c94 <__assert_fail@plt+0xfc08>
   21c48:	vmov	r0, r1, d8
   21c4c:	bl	29c98 <_obstack_memory_used@@Base+0x4c24>
   21c50:	mov	r4, r0
   21c54:	mov	r5, r1
   21c58:	bl	29b00 <_obstack_memory_used@@Base+0x4a8c>
   21c5c:	vmov	d16, r0, r1
   21c60:	ldr	r0, [sp, #48]	; 0x30
   21c64:	mov	r2, #0
   21c68:	vcmp.f64	d8, d16
   21c6c:	vmrs	APSR_nzcv, fpscr
   21c70:	movwne	r2, #1
   21c74:	clz	r0, r0
   21c78:	lsr	r0, r0, #5
   21c7c:	and	r0, r0, r2
   21c80:	adds	r0, r0, r4
   21c84:	adc	r1, r5, #0
   21c88:	ldr	r5, [sp, #16]
   21c8c:	bl	29b00 <_obstack_memory_used@@Base+0x4a8c>
   21c90:	vmov	d16, r0, r1
   21c94:	movw	r3, #56882	; 0xde32
   21c98:	mov	r0, sl
   21c9c:	mov	r1, #1
   21ca0:	mvn	r2, #0
   21ca4:	vstr	d16, [sp]
   21ca8:	movt	r3, #2
   21cac:	bl	11edc <__sprintf_chk@plt>
   21cb0:	ldr	r1, [sp, #24]
   21cb4:	mov	r0, #3
   21cb8:	cmp	r1, #0
   21cbc:	movwne	r0, #2
   21cc0:	add	r4, r0, r5
   21cc4:	mov	r0, sl
   21cc8:	bl	11eac <strlen@plt>
   21ccc:	cmp	r4, r0
   21cd0:	bcc	21cf4 <__assert_fail@plt+0xfc68>
   21cd4:	mov	r2, r0
   21cd8:	add	r5, r5, #1
   21cdc:	tst	r7, #8
   21ce0:	beq	21da0 <__assert_fail@plt+0xfd14>
   21ce4:	add	r0, sl, r2
   21ce8:	ldrb	r0, [r0, #-1]
   21cec:	cmp	r0, #48	; 0x30
   21cf0:	bne	21da0 <__assert_fail@plt+0xfd14>
   21cf4:	ldr	r0, [sp, #48]	; 0x30
   21cf8:	vmov.f64	d9, #36	; 0x41200000  10.0
   21cfc:	vmul.f64	d8, d8, d9
   21d00:	cmp	r0, #1
   21d04:	beq	21d60 <__assert_fail@plt+0xfcd4>
   21d08:	vldr	d16, [pc, #368]	; 21e80 <__assert_fail@plt+0xfdf4>
   21d0c:	vcmpe.f64	d8, d16
   21d10:	vmrs	APSR_nzcv, fpscr
   21d14:	bpl	21d60 <__assert_fail@plt+0xfcd4>
   21d18:	vmov	r0, r1, d8
   21d1c:	bl	29c98 <_obstack_memory_used@@Base+0x4c24>
   21d20:	mov	r4, r0
   21d24:	mov	r5, r1
   21d28:	bl	29b00 <_obstack_memory_used@@Base+0x4a8c>
   21d2c:	vmov	d16, r0, r1
   21d30:	ldr	r0, [sp, #48]	; 0x30
   21d34:	mov	r2, #0
   21d38:	vcmp.f64	d8, d16
   21d3c:	vmrs	APSR_nzcv, fpscr
   21d40:	movwne	r2, #1
   21d44:	clz	r0, r0
   21d48:	lsr	r0, r0, #5
   21d4c:	and	r0, r0, r2
   21d50:	adds	r0, r0, r4
   21d54:	adc	r1, r5, #0
   21d58:	bl	29b00 <_obstack_memory_used@@Base+0x4a8c>
   21d5c:	vmov	d8, r0, r1
   21d60:	vdiv.f64	d16, d8, d9
   21d64:	vstr	d16, [sp]
   21d68:	b	21d78 <__assert_fail@plt+0xfcec>
   21d6c:	ldr	r8, [sp, #32]
   21d70:	mvn	r6, #0
   21d74:	vstr	d8, [sp]
   21d78:	movw	r3, #56876	; 0xde2c
   21d7c:	mov	r0, sl
   21d80:	mov	r1, #1
   21d84:	mvn	r2, #0
   21d88:	movt	r3, #2
   21d8c:	bl	11edc <__sprintf_chk@plt>
   21d90:	mov	r0, sl
   21d94:	bl	11eac <strlen@plt>
   21d98:	mov	r2, r0
   21d9c:	mov	r5, #0
   21da0:	sub	r4, r8, r2
   21da4:	mov	r1, sl
   21da8:	mov	r0, r4
   21dac:	bl	11c24 <memmove@plt>
   21db0:	sub	r5, r8, r5
   21db4:	tst	r7, #4
   21db8:	bne	21ee0 <__assert_fail@plt+0xfe54>
   21dbc:	ldr	r3, [sp, #40]	; 0x28
   21dc0:	ldr	r5, [fp, #16]
   21dc4:	tst	r7, #128	; 0x80
   21dc8:	beq	2211c <__assert_fail@plt+0x10090>
   21dcc:	cmn	r6, #1
   21dd0:	bgt	220b4 <__assert_fail@plt+0x10028>
   21dd4:	subs	r0, r5, #2
   21dd8:	mov	r6, #0
   21ddc:	sbcs	r0, r9, #0
   21de0:	bcc	220b4 <__assert_fail@plt+0x10028>
   21de4:	mov	r0, #0
   21de8:	mov	r1, #1
   21dec:	mov	r6, #0
   21df0:	cmp	r6, #7
   21df4:	beq	220b0 <__assert_fail@plt+0x10024>
   21df8:	umull	r1, r2, r1, r3
   21dfc:	add	r6, r6, #1
   21e00:	mla	r0, r0, r3, r2
   21e04:	subs	r2, r1, r5
   21e08:	sbcs	r2, r0, r9
   21e0c:	bcc	21df0 <__assert_fail@plt+0xfd64>
   21e10:	b	220b4 <__assert_fail@plt+0x10028>
   21e14:	add	r0, r4, r5
   21e18:	ldr	r5, [sp, #44]	; 0x2c
   21e1c:	cmp	r0, #1
   21e20:	blt	21e78 <__assert_fail@plt+0xfdec>
   21e24:	adds	sl, sl, #1
   21e28:	adc	r9, r9, #0
   21e2c:	cmp	r6, #7
   21e30:	bgt	21e78 <__assert_fail@plt+0xfdec>
   21e34:	cmp	r8, #0
   21e38:	beq	21e78 <__assert_fail@plt+0xfdec>
   21e3c:	eor	r0, sl, r2
   21e40:	orrs	r0, r0, r9
   21e44:	ldreq	r0, [sp, #36]	; 0x24
   21e48:	addeq	r6, r6, #1
   21e4c:	moveq	r9, #0
   21e50:	moveq	sl, #1
   21e54:	tsteq	r0, #8
   21e58:	bne	21e78 <__assert_fail@plt+0xfdec>
   21e5c:	ldr	r2, [sp, #16]
   21e60:	mov	r0, #48	; 0x30
   21e64:	ldr	r1, [sp, #12]
   21e68:	strb	r0, [r5, #-1]!
   21e6c:	sub	r5, r5, r2
   21e70:	mov	r0, r5
   21e74:	bl	11c60 <memcpy@plt>
   21e78:	ldr	r8, [sp, #32]
   21e7c:	b	21e90 <__assert_fail@plt+0xfe04>
   21e80:	andeq	r0, r0, r0
   21e84:	mvnsmi	r0, #0
   21e88:	ldr	r8, [sp, #32]
   21e8c:	ldr	r5, [sp, #44]	; 0x2c
   21e90:	mov	r4, r5
   21e94:	mov	r0, sl
   21e98:	mov	r1, r9
   21e9c:	mov	r2, #10
   21ea0:	mov	r3, #0
   21ea4:	bl	29c48 <_obstack_memory_used@@Base+0x4bd4>
   21ea8:	add	r2, r0, r0, lsl #2
   21eac:	sub	r2, sl, r2, lsl #1
   21eb0:	orr	r2, r2, #48	; 0x30
   21eb4:	strb	r2, [r4, #-1]!
   21eb8:	rsbs	r2, sl, #9
   21ebc:	mov	sl, r0
   21ec0:	rscs	r2, r9, #0
   21ec4:	mov	r9, r1
   21ec8:	bcc	21e94 <__assert_fail@plt+0xfe08>
   21ecc:	ldr	r7, [sp, #36]	; 0x24
   21ed0:	ldr	r9, [fp, #20]
   21ed4:	ldr	sl, [sp, #28]
   21ed8:	tst	r7, #4
   21edc:	beq	21dbc <__assert_fail@plt+0xfd30>
   21ee0:	ldr	r0, [sp, #52]	; 0x34
   21ee4:	mov	r7, r5
   21ee8:	str	r6, [sp, #16]
   21eec:	sub	r5, r5, r4
   21ef0:	bl	11eac <strlen@plt>
   21ef4:	add	r8, sp, #56	; 0x38
   21ef8:	str	r0, [sp, #48]	; 0x30
   21efc:	mov	r1, r4
   21f00:	mov	r2, r5
   21f04:	mov	r0, r8
   21f08:	bl	11c60 <memcpy@plt>
   21f0c:	ldr	r0, [sp, #20]
   21f10:	ldrb	r6, [r0]
   21f14:	cmp	r6, #255	; 0xff
   21f18:	mov	r9, r6
   21f1c:	moveq	r9, r5
   21f20:	cmp	r6, #0
   21f24:	mvneq	r9, #0
   21f28:	cmp	r9, r5
   21f2c:	movhi	r9, r5
   21f30:	sub	r4, r7, r9
   21f34:	sub	r7, r5, r9
   21f38:	mov	r2, r9
   21f3c:	add	r1, r8, r7
   21f40:	mov	r0, r4
   21f44:	bl	11c60 <memcpy@plt>
   21f48:	cmp	r7, #0
   21f4c:	beq	21fd8 <__assert_fail@plt+0xff4c>
   21f50:	clz	r0, r6
   21f54:	ldr	r8, [sp, #20]
   21f58:	lsr	sl, r0, #5
   21f5c:	ldr	r0, [sp, #48]	; 0x30
   21f60:	rsb	r0, r0, #0
   21f64:	str	r0, [sp, #44]	; 0x2c
   21f68:	ldr	r0, [sp, #44]	; 0x2c
   21f6c:	ldr	r1, [sp, #52]	; 0x34
   21f70:	ldr	r2, [sp, #48]	; 0x30
   21f74:	add	r4, r4, r0
   21f78:	mov	r0, r4
   21f7c:	bl	11c60 <memcpy@plt>
   21f80:	tst	sl, #1
   21f84:	add	r0, sp, #56	; 0x38
   21f88:	addeq	r8, r8, #1
   21f8c:	ldrb	r6, [r8]
   21f90:	cmp	r6, #255	; 0xff
   21f94:	mov	r5, r6
   21f98:	moveq	r5, r7
   21f9c:	cmp	r6, #0
   21fa0:	moveq	r5, r9
   21fa4:	cmp	r7, r5
   21fa8:	movcc	r5, r7
   21fac:	sub	r7, r7, r5
   21fb0:	sub	r4, r4, r5
   21fb4:	mov	r2, r5
   21fb8:	add	r1, r0, r7
   21fbc:	mov	r0, r4
   21fc0:	bl	11c60 <memcpy@plt>
   21fc4:	clz	r0, r6
   21fc8:	cmp	r7, #0
   21fcc:	mov	r9, r5
   21fd0:	lsr	sl, r0, #5
   21fd4:	bne	21f68 <__assert_fail@plt+0xfedc>
   21fd8:	ldr	r8, [sp, #32]
   21fdc:	ldr	sl, [sp, #28]
   21fe0:	ldr	r7, [sp, #36]	; 0x24
   21fe4:	ldr	r3, [sp, #40]	; 0x28
   21fe8:	ldr	r9, [fp, #20]
   21fec:	ldr	r5, [fp, #16]
   21ff0:	ldr	r6, [sp, #16]
   21ff4:	tst	r7, #128	; 0x80
   21ff8:	bne	21dcc <__assert_fail@plt+0xfd40>
   21ffc:	b	2211c <__assert_fail@plt+0x10090>
   22000:	mov	r6, #0
   22004:	mov	r0, r7
   22008:	mov	r1, r9
   2200c:	mov	r3, #0
   22010:	bl	29c48 <_obstack_memory_used@@Base+0x4bd4>
   22014:	ldr	r2, [sp, #40]	; 0x28
   22018:	mov	sl, r0
   2201c:	mov	r9, r1
   22020:	mls	r0, r0, r2, r7
   22024:	add	r0, r0, r0, lsl #2
   22028:	add	r0, r4, r0, lsl #1
   2202c:	udiv	r4, r0, r2
   22030:	mls	r0, r4, r2, r0
   22034:	lsl	r0, r0, #1
   22038:	add	r0, r0, r5, lsr #1
   2203c:	cmp	r0, r2
   22040:	bcs	22058 <__assert_fail@plt+0xffcc>
   22044:	add	r1, r0, r5
   22048:	cmn	r0, r5
   2204c:	movwne	r1, #1
   22050:	mov	r5, r1
   22054:	b	22068 <__assert_fail@plt+0xffdc>
   22058:	add	r0, r0, r5
   2205c:	mov	r5, #2
   22060:	cmp	r2, r0
   22064:	movwcc	r5, #3
   22068:	add	r6, r6, #1
   2206c:	cmp	r6, #7
   22070:	bhi	22084 <__assert_fail@plt+0xfff8>
   22074:	subs	r0, sl, r2
   22078:	mov	r7, sl
   2207c:	sbcs	r0, r9, #0
   22080:	bcs	22004 <__assert_fail@plt+0xff78>
   22084:	rsbs	r0, sl, #9
   22088:	rscs	r0, r9, #0
   2208c:	bcc	22138 <__assert_fail@plt+0x100ac>
   22090:	ldr	r0, [sp, #48]	; 0x30
   22094:	cmp	r0, #1
   22098:	bne	22140 <__assert_fail@plt+0x100b4>
   2209c:	and	r0, r4, #1
   220a0:	add	r0, r5, r0
   220a4:	cmp	r0, #2
   220a8:	bhi	22150 <__assert_fail@plt+0x100c4>
   220ac:	b	22184 <__assert_fail@plt+0x100f8>
   220b0:	mov	r6, #8
   220b4:	and	r0, r7, #256	; 0x100
   220b8:	tst	r7, #64	; 0x40
   220bc:	orrsne	r1, r6, r0
   220c0:	movne	r1, #32
   220c4:	addne	r8, sl, #648	; 0x288
   220c8:	strbne	r1, [sl, #647]	; 0x287
   220cc:	cmp	r6, #0
   220d0:	beq	220f8 <__assert_fail@plt+0x1006c>
   220d4:	ldr	r1, [sp, #24]
   220d8:	cmp	r1, #0
   220dc:	moveq	r1, #107	; 0x6b
   220e0:	cmpeq	r6, #1
   220e4:	beq	220f4 <__assert_fail@plt+0x10068>
   220e8:	movw	r1, #56932	; 0xde64
   220ec:	movt	r1, #2
   220f0:	ldrb	r1, [r1, r6]
   220f4:	strb	r1, [r8], #1
   220f8:	cmp	r0, #0
   220fc:	beq	2211c <__assert_fail@plt+0x10090>
   22100:	ldr	r0, [sp, #24]
   22104:	cmp	r0, #0
   22108:	cmpne	r6, #0
   2210c:	movne	r0, #105	; 0x69
   22110:	strbne	r0, [r8], #1
   22114:	mov	r0, #66	; 0x42
   22118:	strb	r0, [r8], #1
   2211c:	mov	r0, #0
   22120:	strb	r0, [r8]
   22124:	mov	r0, r4
   22128:	sub	sp, fp, #48	; 0x30
   2212c:	vpop	{d8-d9}
   22130:	add	sp, sp, #4
   22134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22138:	ldr	r0, [sp, #32]
   2213c:	b	21ae0 <__assert_fail@plt+0xfa54>
   22140:	cmp	r0, #0
   22144:	bne	22184 <__assert_fail@plt+0x100f8>
   22148:	cmp	r5, #0
   2214c:	beq	22184 <__assert_fail@plt+0x100f8>
   22150:	adds	r0, sl, #1
   22154:	add	r4, r4, #1
   22158:	mov	r5, #0
   2215c:	adc	r1, r9, #0
   22160:	cmp	r4, #10
   22164:	bne	22184 <__assert_fail@plt+0x100f8>
   22168:	rsbs	r3, r0, #9
   2216c:	mov	r4, #0
   22170:	mov	sl, r0
   22174:	mov	r9, r1
   22178:	mov	r5, #0
   2217c:	rscs	r3, r1, #0
   22180:	bcc	221d4 <__assert_fail@plt+0x10148>
   22184:	ldr	r0, [sp, #36]	; 0x24
   22188:	tst	r0, #8
   2218c:	beq	221a4 <__assert_fail@plt+0x10118>
   22190:	cmp	r4, #0
   22194:	bne	221a4 <__assert_fail@plt+0x10118>
   22198:	ldr	r0, [sp, #32]
   2219c:	str	r0, [sp, #44]	; 0x2c
   221a0:	b	221cc <__assert_fail@plt+0x10140>
   221a4:	ldr	r1, [sp, #28]
   221a8:	ldr	r2, [sp, #16]
   221ac:	add	r0, r4, #48	; 0x30
   221b0:	strb	r0, [r1, #646]!	; 0x286
   221b4:	sub	r0, r1, r2
   221b8:	ldr	r1, [sp, #12]
   221bc:	str	r0, [sp, #44]	; 0x2c
   221c0:	bl	11c60 <memcpy@plt>
   221c4:	ldr	r2, [sp, #40]	; 0x28
   221c8:	mov	r5, #0
   221cc:	mov	r4, #0
   221d0:	b	21ae4 <__assert_fail@plt+0xfa58>
   221d4:	ldr	r0, [sp, #32]
   221d8:	mov	r5, #0
   221dc:	mov	sl, #10
   221e0:	mov	r9, #0
   221e4:	b	21ae0 <__assert_fail@plt+0xfa54>
   221e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   221ec:	add	fp, sp, #24
   221f0:	sub	sp, sp, #8
   221f4:	mov	r4, r2
   221f8:	mov	r8, r1
   221fc:	cmp	r0, #0
   22200:	bne	2222c <__assert_fail@plt+0x101a0>
   22204:	movw	r0, #48464	; 0xbd50
   22208:	movt	r0, #2
   2220c:	bl	11dec <getenv@plt>
   22210:	cmp	r0, #0
   22214:	bne	2222c <__assert_fail@plt+0x101a0>
   22218:	movw	r0, #56888	; 0xde38
   2221c:	movt	r0, #2
   22220:	bl	11dec <getenv@plt>
   22224:	cmp	r0, #0
   22228:	beq	22350 <__assert_fail@plt+0x102c4>
   2222c:	mov	r6, r0
   22230:	movw	r7, #56956	; 0xde7c
   22234:	movw	r1, #56944	; 0xde70
   22238:	mov	r3, #4
   2223c:	ldrb	r5, [r6], #1
   22240:	movt	r7, #2
   22244:	movt	r1, #2
   22248:	mov	r2, r7
   2224c:	cmp	r5, #39	; 0x27
   22250:	movne	r6, r0
   22254:	mov	r0, r6
   22258:	bl	1ea74 <__assert_fail@plt+0xc9e8>
   2225c:	sub	r1, r5, #39	; 0x27
   22260:	cmp	r0, #0
   22264:	clz	r1, r1
   22268:	lsr	r1, r1, #5
   2226c:	lsl	r5, r1, #2
   22270:	blt	22298 <__assert_fail@plt+0x1020c>
   22274:	ldr	r0, [r7, r0, lsl #2]
   22278:	mov	r2, #1
   2227c:	mov	r1, #0
   22280:	str	r2, [r4]
   22284:	str	r1, [r4, #4]
   22288:	orr	r1, r0, r5
   2228c:	mov	r0, #0
   22290:	str	r1, [r8]
   22294:	b	222c8 <__assert_fail@plt+0x1023c>
   22298:	movw	r0, #56898	; 0xde42
   2229c:	add	r1, sp, #4
   222a0:	mov	r2, #0
   222a4:	mov	r3, r4
   222a8:	mov	r7, #0
   222ac:	movt	r0, #2
   222b0:	str	r0, [sp]
   222b4:	mov	r0, r6
   222b8:	bl	2876c <_obstack_memory_used@@Base+0x36f8>
   222bc:	cmp	r0, #0
   222c0:	beq	2230c <__assert_fail@plt+0x10280>
   222c4:	str	r7, [r8]
   222c8:	ldrd	r2, [r4]
   222cc:	orrs	r1, r2, r3
   222d0:	beq	222dc <__assert_fail@plt+0x10250>
   222d4:	sub	sp, fp, #24
   222d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   222dc:	movw	r0, #56916	; 0xde54
   222e0:	movt	r0, #2
   222e4:	bl	11dec <getenv@plt>
   222e8:	cmp	r0, #0
   222ec:	mov	r2, #512	; 0x200
   222f0:	mov	r0, #4
   222f4:	mov	r1, #0
   222f8:	movweq	r2, #1024	; 0x400
   222fc:	str	r2, [r4]
   22300:	str	r1, [r4, #4]
   22304:	sub	sp, fp, #24
   22308:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2230c:	ldrb	r0, [r6]
   22310:	sub	r0, r0, #48	; 0x30
   22314:	uxtb	r0, r0
   22318:	cmp	r0, #10
   2231c:	bcc	22348 <__assert_fail@plt+0x102bc>
   22320:	ldr	r0, [sp, #4]
   22324:	cmp	r0, r6
   22328:	beq	22378 <__assert_fail@plt+0x102ec>
   2232c:	ldrb	r2, [r6, #1]
   22330:	add	r1, r6, #1
   22334:	mov	r6, r1
   22338:	sub	r2, r2, #48	; 0x30
   2233c:	uxtb	r2, r2
   22340:	cmp	r2, #10
   22344:	bcs	22324 <__assert_fail@plt+0x10298>
   22348:	mov	r1, r5
   2234c:	b	2228c <__assert_fail@plt+0x10200>
   22350:	movw	r0, #56916	; 0xde54
   22354:	movt	r0, #2
   22358:	bl	11dec <getenv@plt>
   2235c:	mov	r2, #512	; 0x200
   22360:	cmp	r0, #0
   22364:	mov	r1, #0
   22368:	movweq	r2, #1024	; 0x400
   2236c:	str	r2, [r4]
   22370:	str	r1, [r4, #4]
   22374:	b	2228c <__assert_fail@plt+0x10200>
   22378:	ldrb	r2, [r0, #-1]
   2237c:	orr	r1, r5, #384	; 0x180
   22380:	cmp	r2, #66	; 0x42
   22384:	mov	r2, r1
   22388:	orrne	r2, r5, #128	; 0x80
   2238c:	bne	223a0 <__assert_fail@plt+0x10314>
   22390:	ldrb	r0, [r0, #-2]
   22394:	cmp	r0, #105	; 0x69
   22398:	orreq	r1, r2, #32
   2239c:	b	2228c <__assert_fail@plt+0x10200>
   223a0:	orr	r1, r2, #32
   223a4:	b	2228c <__assert_fail@plt+0x10200>
   223a8:	push	{r4, r5, r6, r7, fp, lr}
   223ac:	add	fp, sp, #16
   223b0:	movw	r7, #976	; 0x3d0
   223b4:	mov	r4, r0
   223b8:	movt	r7, #4
   223bc:	ldr	r5, [r7]
   223c0:	cmp	r5, #0
   223c4:	bne	223d8 <__assert_fail@plt+0x1034c>
   223c8:	b	223e8 <__assert_fail@plt+0x1035c>
   223cc:	ldr	r5, [r5, #4]
   223d0:	cmp	r5, #0
   223d4:	beq	223e8 <__assert_fail@plt+0x1035c>
   223d8:	ldr	r0, [r5]
   223dc:	cmp	r0, r4
   223e0:	bne	223cc <__assert_fail@plt+0x10340>
   223e4:	b	2243c <__assert_fail@plt+0x103b0>
   223e8:	mov	r0, r4
   223ec:	bl	11bdc <getpwuid@plt>
   223f0:	cmp	r0, #0
   223f4:	beq	22400 <__assert_fail@plt+0x10374>
   223f8:	ldr	r6, [r0]
   223fc:	b	22408 <__assert_fail@plt+0x1037c>
   22400:	movw	r6, #49853	; 0xc2bd
   22404:	movt	r6, #2
   22408:	mov	r0, r6
   2240c:	bl	11eac <strlen@plt>
   22410:	add	r0, r0, #12
   22414:	bic	r0, r0, #3
   22418:	bl	27ea0 <_obstack_memory_used@@Base+0x2e2c>
   2241c:	mov	r5, r0
   22420:	str	r4, [r0]
   22424:	add	r0, r0, #8
   22428:	mov	r1, r6
   2242c:	bl	11d80 <strcpy@plt>
   22430:	ldr	r0, [r7]
   22434:	str	r5, [r7]
   22438:	str	r0, [r5, #4]
   2243c:	ldrb	r0, [r5, #8]!
   22440:	cmp	r0, #0
   22444:	moveq	r5, r0
   22448:	mov	r0, r5
   2244c:	pop	{r4, r5, r6, r7, fp, pc}
   22450:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22454:	add	fp, sp, #24
   22458:	movw	r8, #976	; 0x3d0
   2245c:	mov	r4, r0
   22460:	movt	r8, #4
   22464:	ldr	r5, [r8]
   22468:	cmp	r5, #0
   2246c:	beq	224a0 <__assert_fail@plt+0x10414>
   22470:	ldrb	r6, [r4]
   22474:	mov	r0, r5
   22478:	ldrb	r1, [r0, #8]!
   2247c:	cmp	r1, r6
   22480:	bne	22494 <__assert_fail@plt+0x10408>
   22484:	mov	r1, r4
   22488:	bl	11bd0 <strcmp@plt>
   2248c:	cmp	r0, #0
   22490:	beq	22544 <__assert_fail@plt+0x104b8>
   22494:	ldr	r5, [r5, #4]
   22498:	cmp	r5, #0
   2249c:	bne	22474 <__assert_fail@plt+0x103e8>
   224a0:	movw	r7, #980	; 0x3d4
   224a4:	movt	r7, #4
   224a8:	ldr	r5, [r7]
   224ac:	cmp	r5, #0
   224b0:	beq	224e4 <__assert_fail@plt+0x10458>
   224b4:	ldrb	r6, [r4]
   224b8:	mov	r0, r5
   224bc:	ldrb	r1, [r0, #8]!
   224c0:	cmp	r1, r6
   224c4:	bne	224d8 <__assert_fail@plt+0x1044c>
   224c8:	mov	r1, r4
   224cc:	bl	11bd0 <strcmp@plt>
   224d0:	cmp	r0, #0
   224d4:	beq	22540 <__assert_fail@plt+0x104b4>
   224d8:	ldr	r5, [r5, #4]
   224dc:	cmp	r5, #0
   224e0:	bne	224b8 <__assert_fail@plt+0x1042c>
   224e4:	mov	r0, r4
   224e8:	bl	11bc4 <getpwnam@plt>
   224ec:	mov	r6, r0
   224f0:	mov	r0, r4
   224f4:	bl	11eac <strlen@plt>
   224f8:	add	r0, r0, #12
   224fc:	bic	r0, r0, #3
   22500:	bl	27ea0 <_obstack_memory_used@@Base+0x2e2c>
   22504:	mov	r5, r0
   22508:	add	r0, r0, #8
   2250c:	mov	r1, r4
   22510:	bl	11d80 <strcpy@plt>
   22514:	cmp	r6, #0
   22518:	beq	22534 <__assert_fail@plt+0x104a8>
   2251c:	ldr	r0, [r6, #8]
   22520:	ldr	r1, [r8]
   22524:	stm	r5, {r0, r1}
   22528:	mov	r0, r5
   2252c:	str	r5, [r8]
   22530:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22534:	ldr	r0, [r7]
   22538:	str	r5, [r7]
   2253c:	str	r0, [r5, #4]
   22540:	mov	r5, #0
   22544:	mov	r0, r5
   22548:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2254c:	push	{r4, r5, r6, r7, fp, lr}
   22550:	add	fp, sp, #16
   22554:	movw	r7, #984	; 0x3d8
   22558:	mov	r4, r0
   2255c:	movt	r7, #4
   22560:	ldr	r5, [r7]
   22564:	cmp	r5, #0
   22568:	bne	2257c <__assert_fail@plt+0x104f0>
   2256c:	b	2258c <__assert_fail@plt+0x10500>
   22570:	ldr	r5, [r5, #4]
   22574:	cmp	r5, #0
   22578:	beq	2258c <__assert_fail@plt+0x10500>
   2257c:	ldr	r0, [r5]
   22580:	cmp	r0, r4
   22584:	bne	22570 <__assert_fail@plt+0x104e4>
   22588:	b	225e0 <__assert_fail@plt+0x10554>
   2258c:	mov	r0, r4
   22590:	bl	12050 <getgrgid@plt>
   22594:	cmp	r0, #0
   22598:	beq	225a4 <__assert_fail@plt+0x10518>
   2259c:	ldr	r6, [r0]
   225a0:	b	225ac <__assert_fail@plt+0x10520>
   225a4:	movw	r6, #49853	; 0xc2bd
   225a8:	movt	r6, #2
   225ac:	mov	r0, r6
   225b0:	bl	11eac <strlen@plt>
   225b4:	add	r0, r0, #12
   225b8:	bic	r0, r0, #3
   225bc:	bl	27ea0 <_obstack_memory_used@@Base+0x2e2c>
   225c0:	mov	r5, r0
   225c4:	str	r4, [r0]
   225c8:	add	r0, r0, #8
   225cc:	mov	r1, r6
   225d0:	bl	11d80 <strcpy@plt>
   225d4:	ldr	r0, [r7]
   225d8:	str	r5, [r7]
   225dc:	str	r0, [r5, #4]
   225e0:	ldrb	r0, [r5, #8]!
   225e4:	cmp	r0, #0
   225e8:	moveq	r5, r0
   225ec:	mov	r0, r5
   225f0:	pop	{r4, r5, r6, r7, fp, pc}
   225f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   225f8:	add	fp, sp, #24
   225fc:	movw	r8, #984	; 0x3d8
   22600:	mov	r4, r0
   22604:	movt	r8, #4
   22608:	ldr	r5, [r8]
   2260c:	cmp	r5, #0
   22610:	beq	22644 <__assert_fail@plt+0x105b8>
   22614:	ldrb	r6, [r4]
   22618:	mov	r0, r5
   2261c:	ldrb	r1, [r0, #8]!
   22620:	cmp	r1, r6
   22624:	bne	22638 <__assert_fail@plt+0x105ac>
   22628:	mov	r1, r4
   2262c:	bl	11bd0 <strcmp@plt>
   22630:	cmp	r0, #0
   22634:	beq	226e8 <__assert_fail@plt+0x1065c>
   22638:	ldr	r5, [r5, #4]
   2263c:	cmp	r5, #0
   22640:	bne	22618 <__assert_fail@plt+0x1058c>
   22644:	movw	r7, #988	; 0x3dc
   22648:	movt	r7, #4
   2264c:	ldr	r5, [r7]
   22650:	cmp	r5, #0
   22654:	beq	22688 <__assert_fail@plt+0x105fc>
   22658:	ldrb	r6, [r4]
   2265c:	mov	r0, r5
   22660:	ldrb	r1, [r0, #8]!
   22664:	cmp	r1, r6
   22668:	bne	2267c <__assert_fail@plt+0x105f0>
   2266c:	mov	r1, r4
   22670:	bl	11bd0 <strcmp@plt>
   22674:	cmp	r0, #0
   22678:	beq	226e4 <__assert_fail@plt+0x10658>
   2267c:	ldr	r5, [r5, #4]
   22680:	cmp	r5, #0
   22684:	bne	2265c <__assert_fail@plt+0x105d0>
   22688:	mov	r0, r4
   2268c:	bl	1205c <getgrnam@plt>
   22690:	mov	r6, r0
   22694:	mov	r0, r4
   22698:	bl	11eac <strlen@plt>
   2269c:	add	r0, r0, #12
   226a0:	bic	r0, r0, #3
   226a4:	bl	27ea0 <_obstack_memory_used@@Base+0x2e2c>
   226a8:	mov	r5, r0
   226ac:	add	r0, r0, #8
   226b0:	mov	r1, r4
   226b4:	bl	11d80 <strcpy@plt>
   226b8:	cmp	r6, #0
   226bc:	beq	226d8 <__assert_fail@plt+0x1064c>
   226c0:	ldr	r0, [r6, #8]
   226c4:	ldr	r1, [r8]
   226c8:	stm	r5, {r0, r1}
   226cc:	mov	r0, r5
   226d0:	str	r5, [r8]
   226d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   226d8:	ldr	r0, [r7]
   226dc:	str	r5, [r7]
   226e0:	str	r0, [r5, #4]
   226e4:	mov	r5, #0
   226e8:	mov	r0, r5
   226ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   226f0:	push	{r4, r5, r6, sl, fp, lr}
   226f4:	add	fp, sp, #16
   226f8:	mov	r5, r0
   226fc:	mov	r0, #0
   22700:	mov	r4, r1
   22704:	add	r6, r2, #19
   22708:	cmp	r1, #0
   2270c:	strb	r0, [r2, #20]
   22710:	blt	22760 <__assert_fail@plt+0x106d4>
   22714:	mov	r0, r5
   22718:	mov	r1, r4
   2271c:	mov	r2, #10
   22720:	mov	r3, #0
   22724:	bl	29b74 <_obstack_memory_used@@Base+0x4b00>
   22728:	add	r2, r0, r0, lsl #2
   2272c:	sub	r2, r5, r2, lsl #1
   22730:	add	r2, r2, #48	; 0x30
   22734:	strb	r2, [r6], #-1
   22738:	adds	r2, r5, #9
   2273c:	mov	r5, r0
   22740:	adc	r3, r4, #0
   22744:	rsbs	r2, r2, #18
   22748:	mov	r4, r1
   2274c:	rscs	r2, r3, #0
   22750:	bcc	22714 <__assert_fail@plt+0x10688>
   22754:	add	r6, r6, #1
   22758:	mov	r0, r6
   2275c:	pop	{r4, r5, r6, sl, fp, pc}
   22760:	mov	r0, r5
   22764:	mov	r1, r4
   22768:	mov	r2, #10
   2276c:	mov	r3, #0
   22770:	bl	29b74 <_obstack_memory_used@@Base+0x4b00>
   22774:	add	r2, r0, r0, lsl #2
   22778:	rsb	r2, r5, r2, lsl #1
   2277c:	add	r2, r2, #48	; 0x30
   22780:	strb	r2, [r6], #-1
   22784:	adds	r2, r5, #9
   22788:	mov	r5, r0
   2278c:	adc	r3, r4, #0
   22790:	rsbs	r2, r2, #18
   22794:	mov	r4, r1
   22798:	rscs	r2, r3, #0
   2279c:	bcc	22760 <__assert_fail@plt+0x106d4>
   227a0:	mov	r0, #45	; 0x2d
   227a4:	strb	r0, [r6]
   227a8:	mov	r0, r6
   227ac:	pop	{r4, r5, r6, sl, fp, pc}
   227b0:	push	{r4, r5, r6, sl, fp, lr}
   227b4:	add	fp, sp, #16
   227b8:	mov	r5, r0
   227bc:	mov	r0, #0
   227c0:	mov	r4, r1
   227c4:	add	r6, r2, #19
   227c8:	strb	r0, [r2, #20]
   227cc:	mov	r0, r5
   227d0:	mov	r1, r4
   227d4:	mov	r2, #10
   227d8:	mov	r3, #0
   227dc:	bl	29c48 <_obstack_memory_used@@Base+0x4bd4>
   227e0:	add	r2, r0, r0, lsl #2
   227e4:	sub	r2, r5, r2, lsl #1
   227e8:	orr	r2, r2, #48	; 0x30
   227ec:	strb	r2, [r6], #-1
   227f0:	rsbs	r2, r5, #9
   227f4:	mov	r5, r0
   227f8:	rscs	r2, r4, #0
   227fc:	mov	r4, r1
   22800:	bcc	227cc <__assert_fail@plt+0x10740>
   22804:	add	r0, r6, #1
   22808:	pop	{r4, r5, r6, sl, fp, pc}
   2280c:	push	{r4, r5, r6, r7, fp, lr}
   22810:	add	fp, sp, #16
   22814:	sub	sp, sp, #8
   22818:	add	r5, sp, #4
   2281c:	cmp	r0, #0
   22820:	mov	r7, r2
   22824:	mov	r4, r1
   22828:	movne	r5, r0
   2282c:	mov	r0, r5
   22830:	bl	11d98 <mbrtowc@plt>
   22834:	mov	r6, r0
   22838:	cmp	r7, #0
   2283c:	beq	22860 <__assert_fail@plt+0x107d4>
   22840:	cmn	r6, #2
   22844:	bcc	22860 <__assert_fail@plt+0x107d4>
   22848:	mov	r0, #0
   2284c:	bl	204b8 <__assert_fail@plt+0xe42c>
   22850:	cmp	r0, #0
   22854:	ldrbeq	r0, [r4]
   22858:	moveq	r6, #1
   2285c:	streq	r0, [r5]
   22860:	mov	r0, r6
   22864:	sub	sp, fp, #16
   22868:	pop	{r4, r5, r6, r7, fp, pc}
   2286c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22870:	add	fp, sp, #28
   22874:	sub	sp, sp, #20
   22878:	mov	r5, r3
   2287c:	str	r2, [sp, #12]
   22880:	str	r1, [sp, #16]
   22884:	mov	r4, r0
   22888:	bl	11eac <strlen@plt>
   2288c:	ldr	r3, [fp, #12]
   22890:	mov	r8, r0
   22894:	mov	sl, #0
   22898:	tst	r3, #2
   2289c:	bne	22970 <__assert_fail@plt+0x108e4>
   228a0:	bl	11d74 <__ctype_get_mb_cur_max@plt>
   228a4:	mov	r6, #0
   228a8:	cmp	r0, #2
   228ac:	bcc	22980 <__assert_fail@plt+0x108f4>
   228b0:	mov	r0, #0
   228b4:	mov	r1, r4
   228b8:	mov	r2, #0
   228bc:	bl	11fb4 <mbstowcs@plt>
   228c0:	cmn	r0, #1
   228c4:	beq	22b1c <__assert_fail@plt+0x10a90>
   228c8:	add	r9, r0, #1
   228cc:	mov	r7, r0
   228d0:	lsl	r0, r9, #2
   228d4:	bl	29460 <_obstack_memory_used@@Base+0x43ec>
   228d8:	cmp	r0, #0
   228dc:	beq	22b18 <__assert_fail@plt+0x10a8c>
   228e0:	mov	r1, r4
   228e4:	mov	r2, r9
   228e8:	mov	r6, r0
   228ec:	bl	11fb4 <mbstowcs@plt>
   228f0:	cmp	r0, #0
   228f4:	beq	22b3c <__assert_fail@plt+0x10ab0>
   228f8:	str	r4, [sp, #4]
   228fc:	mov	r4, #0
   22900:	mov	r1, r6
   22904:	str	r6, [sp]
   22908:	str	r4, [r6, r7, lsl #2]
   2290c:	ldr	r0, [r6]
   22910:	cmp	r0, #0
   22914:	beq	22b4c <__assert_fail@plt+0x10ac0>
   22918:	add	r6, r1, #4
   2291c:	movw	r7, #65533	; 0xfffd
   22920:	bl	11d20 <iswprint@plt>
   22924:	cmp	r0, #0
   22928:	streq	r7, [r6, #-4]
   2292c:	moveq	r4, #1
   22930:	ldr	r0, [r6], #4
   22934:	cmp	r0, #0
   22938:	bne	22920 <__assert_fail@plt+0x10894>
   2293c:	ldr	r6, [sp]
   22940:	mov	r1, r9
   22944:	mov	r0, r6
   22948:	bl	11f78 <wcswidth@plt>
   2294c:	mov	r7, r0
   22950:	tst	r4, #1
   22954:	beq	22b5c <__assert_fail@plt+0x10ad0>
   22958:	mov	r0, #0
   2295c:	mov	r1, r6
   22960:	mov	r2, #0
   22964:	bl	11da4 <wcstombs@plt>
   22968:	ldr	r4, [sp, #4]
   2296c:	b	22b74 <__assert_fail@plt+0x10ae8>
   22970:	mov	r6, #0
   22974:	mov	r2, #0
   22978:	mov	r7, r8
   2297c:	b	2298c <__assert_fail@plt+0x10900>
   22980:	mov	r2, #0
   22984:	mov	r7, r8
   22988:	ldr	r3, [fp, #12]
   2298c:	ldr	r0, [r5]
   22990:	str	r4, [sp, #4]
   22994:	ldr	r4, [fp, #8]
   22998:	mov	r1, r7
   2299c:	str	r6, [sp, #8]
   229a0:	cmp	r7, r0
   229a4:	movhi	r1, r0
   229a8:	movhi	r8, r0
   229ac:	cmp	r0, r7
   229b0:	subhi	sl, r0, r1
   229b4:	cmp	r4, #0
   229b8:	str	r1, [r5]
   229bc:	beq	229d4 <__assert_fail@plt+0x10948>
   229c0:	cmp	r4, #1
   229c4:	bne	229dc <__assert_fail@plt+0x10950>
   229c8:	mov	r9, #0
   229cc:	mov	r4, sl
   229d0:	b	229e8 <__assert_fail@plt+0x1095c>
   229d4:	mov	r9, sl
   229d8:	b	229e8 <__assert_fail@plt+0x1095c>
   229dc:	and	r0, sl, #1
   229e0:	lsr	r9, sl, #1
   229e4:	add	r4, r0, sl, lsr #1
   229e8:	ldr	r5, [sp, #12]
   229ec:	ldr	r1, [sp, #16]
   229f0:	tst	r3, #8
   229f4:	mov	r6, #0
   229f8:	mov	r7, #0
   229fc:	moveq	r6, r9
   22a00:	tst	r3, #4
   22a04:	moveq	r7, r4
   22a08:	cmp	r5, #0
   22a0c:	beq	22af0 <__assert_fail@plt+0x10a64>
   22a10:	add	r0, r1, r5
   22a14:	str	r2, [sp]
   22a18:	sub	sl, r0, #1
   22a1c:	cmp	sl, r1
   22a20:	bls	22a6c <__assert_fail@plt+0x109e0>
   22a24:	cmp	r7, #0
   22a28:	mov	r0, r1
   22a2c:	beq	22a70 <__assert_fail@plt+0x109e4>
   22a30:	sub	r0, r1, sl
   22a34:	rsb	r1, r7, #0
   22a38:	cmp	r0, r1
   22a3c:	movcc	r0, r1
   22a40:	mov	r1, #32
   22a44:	rsb	r2, r0, #0
   22a48:	ldr	r0, [sp, #16]
   22a4c:	bl	11ef4 <memset@plt>
   22a50:	rsb	r0, r4, #0
   22a54:	rsb	r1, r5, #1
   22a58:	cmp	r1, r0
   22a5c:	movcc	r1, r0
   22a60:	ldr	r0, [sp, #16]
   22a64:	sub	r0, r0, r1
   22a68:	b	22a70 <__assert_fail@plt+0x109e4>
   22a6c:	mov	r0, r1
   22a70:	ldr	r1, [sp, #4]
   22a74:	sub	r2, sl, r0
   22a78:	mov	r5, #0
   22a7c:	mvn	r3, #0
   22a80:	cmp	r8, r2
   22a84:	strb	r5, [r0]
   22a88:	movcc	r2, r8
   22a8c:	bl	12080 <__mempcpy_chk@plt>
   22a90:	mov	r4, r0
   22a94:	cmp	r6, #0
   22a98:	beq	22ae8 <__assert_fail@plt+0x10a5c>
   22a9c:	cmp	r4, sl
   22aa0:	bcs	22ae8 <__assert_fail@plt+0x10a5c>
   22aa4:	sub	r0, r4, sl
   22aa8:	rsb	r1, r6, #0
   22aac:	cmp	r0, r1
   22ab0:	movcc	r0, r1
   22ab4:	mov	r1, #32
   22ab8:	rsb	r2, r0, #0
   22abc:	mov	r0, r4
   22ac0:	bl	11ef4 <memset@plt>
   22ac4:	ldr	r0, [sp, #16]
   22ac8:	ldr	r1, [sp, #12]
   22acc:	rsb	r0, r0, #1
   22ad0:	sub	r0, r0, r1
   22ad4:	rsb	r1, r9, #0
   22ad8:	add	r0, r4, r0
   22adc:	cmp	r1, r0
   22ae0:	movhi	r0, r1
   22ae4:	sub	r4, r4, r0
   22ae8:	ldr	r2, [sp]
   22aec:	strb	r5, [r4]
   22af0:	add	r0, r7, r8
   22af4:	add	r9, r0, r6
   22af8:	ldr	r6, [sp, #8]
   22afc:	mov	r0, r2
   22b00:	bl	2046c <__assert_fail@plt+0xe3e0>
   22b04:	mov	r0, r6
   22b08:	bl	2046c <__assert_fail@plt+0xe3e0>
   22b0c:	mov	r0, r9
   22b10:	sub	sp, fp, #28
   22b14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22b18:	mov	r6, #0
   22b1c:	ldr	r3, [fp, #12]
   22b20:	mvn	r9, #0
   22b24:	mov	r2, #0
   22b28:	mov	r7, r8
   22b2c:	mov	r0, #0
   22b30:	tst	r3, #1
   22b34:	bne	2298c <__assert_fail@plt+0x10900>
   22b38:	b	22b00 <__assert_fail@plt+0x10a74>
   22b3c:	mov	r2, r6
   22b40:	mov	r7, r8
   22b44:	mov	r6, #0
   22b48:	b	22988 <__assert_fail@plt+0x108fc>
   22b4c:	mov	r0, r1
   22b50:	mov	r1, r9
   22b54:	bl	11f78 <wcswidth@plt>
   22b58:	mov	r7, r0
   22b5c:	ldr	r0, [r5]
   22b60:	ldr	r4, [sp, #4]
   22b64:	mov	r6, #0
   22b68:	cmp	r7, r0
   22b6c:	mov	r0, r8
   22b70:	bls	22be0 <__assert_fail@plt+0x10b54>
   22b74:	add	r6, r0, #1
   22b78:	mov	r0, r6
   22b7c:	bl	29460 <_obstack_memory_used@@Base+0x43ec>
   22b80:	cmp	r0, #0
   22b84:	beq	22be8 <__assert_fail@plt+0x10b5c>
   22b88:	ldr	r1, [sp]
   22b8c:	str	r0, [sp, #8]
   22b90:	str	r6, [sp, #4]
   22b94:	ldr	r0, [r1]
   22b98:	cmp	r0, #0
   22b9c:	beq	22c08 <__assert_fail@plt+0x10b7c>
   22ba0:	ldr	r4, [r5]
   22ba4:	mov	r8, #0
   22ba8:	movw	r9, #65533	; 0xfffd
   22bac:	mov	r6, r1
   22bb0:	bl	11c00 <wcwidth@plt>
   22bb4:	cmn	r0, #1
   22bb8:	moveq	r0, #1
   22bbc:	streq	r9, [r6]
   22bc0:	add	r7, r0, r8
   22bc4:	cmp	r7, r4
   22bc8:	bhi	22c14 <__assert_fail@plt+0x10b88>
   22bcc:	ldr	r0, [r6, #4]!
   22bd0:	mov	r8, r7
   22bd4:	cmp	r0, #0
   22bd8:	bne	22bb0 <__assert_fail@plt+0x10b24>
   22bdc:	b	22c18 <__assert_fail@plt+0x10b8c>
   22be0:	ldr	r2, [sp]
   22be4:	b	22988 <__assert_fail@plt+0x108fc>
   22be8:	ldr	r3, [fp, #12]
   22bec:	ldr	r2, [sp]
   22bf0:	mov	r6, #0
   22bf4:	mvn	r9, #0
   22bf8:	tst	r3, #1
   22bfc:	mov	r0, r2
   22c00:	bne	2298c <__assert_fail@plt+0x10900>
   22c04:	b	22b00 <__assert_fail@plt+0x10a74>
   22c08:	mov	r6, r1
   22c0c:	mov	r7, #0
   22c10:	b	22c18 <__assert_fail@plt+0x10b8c>
   22c14:	mov	r7, r8
   22c18:	mov	r0, #0
   22c1c:	ldr	r4, [sp]
   22c20:	ldr	r2, [sp, #4]
   22c24:	str	r0, [r6]
   22c28:	ldr	r6, [sp, #8]
   22c2c:	mov	r1, r4
   22c30:	mov	r0, r6
   22c34:	bl	11da4 <wcstombs@plt>
   22c38:	mov	r2, r4
   22c3c:	mov	r8, r0
   22c40:	mov	r4, r6
   22c44:	b	22988 <__assert_fail@plt+0x108fc>
   22c48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22c4c:	add	fp, sp, #28
   22c50:	sub	sp, sp, #12
   22c54:	ldr	r8, [r1]
   22c58:	mov	sl, r0
   22c5c:	mov	r9, r2
   22c60:	mov	r6, r1
   22c64:	mov	r7, #0
   22c68:	str	r3, [sp, #8]
   22c6c:	mov	r0, r8
   22c70:	mov	r5, r8
   22c74:	cmp	r0, r5
   22c78:	bcc	22cdc <__assert_fail@plt+0x10c50>
   22c7c:	add	r5, r0, #1
   22c80:	mov	r0, r7
   22c84:	mov	r1, r5
   22c88:	bl	29490 <_obstack_memory_used@@Base+0x441c>
   22c8c:	cmp	r0, #0
   22c90:	beq	22cd0 <__assert_fail@plt+0x10c44>
   22c94:	mov	r4, r0
   22c98:	ldr	r0, [sp, #8]
   22c9c:	str	r8, [r6]
   22ca0:	mov	r2, r5
   22ca4:	mov	r3, r6
   22ca8:	str	r9, [sp]
   22cac:	mov	r1, r4
   22cb0:	str	r0, [sp, #4]
   22cb4:	mov	r0, sl
   22cb8:	bl	2286c <__assert_fail@plt+0x107e0>
   22cbc:	cmn	r0, #1
   22cc0:	mov	r7, r4
   22cc4:	bne	22c74 <__assert_fail@plt+0x10be8>
   22cc8:	mov	r0, r4
   22ccc:	b	22cd4 <__assert_fail@plt+0x10c48>
   22cd0:	mov	r0, r7
   22cd4:	bl	2046c <__assert_fail@plt+0xe3e0>
   22cd8:	mov	r7, #0
   22cdc:	mov	r0, r7
   22ce0:	sub	sp, fp, #28
   22ce4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22ce8:	push	{r4, r5, fp, lr}
   22cec:	add	fp, sp, #8
   22cf0:	mov	r4, r1
   22cf4:	mov	r5, r0
   22cf8:	bl	11eac <strlen@plt>
   22cfc:	mov	r1, r0
   22d00:	mov	r0, r5
   22d04:	mov	r2, r4
   22d08:	pop	{r4, r5, fp, lr}
   22d0c:	b	22d10 <__assert_fail@plt+0x10c84>
   22d10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22d14:	add	fp, sp, #28
   22d18:	sub	sp, sp, #28
   22d1c:	mov	r4, r2
   22d20:	mov	r5, r1
   22d24:	mov	r7, r0
   22d28:	add	r6, r0, r1
   22d2c:	bl	11d74 <__ctype_get_mb_cur_max@plt>
   22d30:	cmp	r0, #1
   22d34:	bls	23024 <__assert_fail@plt+0x10f98>
   22d38:	cmp	r5, #1
   22d3c:	blt	2308c <__assert_fail@plt+0x11000>
   22d40:	and	r2, r4, #1
   22d44:	and	sl, r4, #2
   22d48:	mov	r5, #0
   22d4c:	add	r8, sp, #12
   22d50:	add	r9, sp, #16
   22d54:	mov	r4, #0
   22d58:	eor	r3, r2, #1
   22d5c:	ldrb	r0, [r7]
   22d60:	sub	r0, r0, #32
   22d64:	cmp	r0, #94	; 0x5e
   22d68:	bhi	22f04 <__assert_fail@plt+0x10e78>
   22d6c:	add	r1, pc, #0
   22d70:	ldr	pc, [r1, r0, lsl #2]
   22d74:	strdeq	r2, [r2], -r0
   22d78:	strdeq	r2, [r2], -r0
   22d7c:	strdeq	r2, [r2], -r0
   22d80:	strdeq	r2, [r2], -r0
   22d84:	andeq	r2, r2, r4, lsl #30
   22d88:	strdeq	r2, [r2], -r0
   22d8c:	strdeq	r2, [r2], -r0
   22d90:	strdeq	r2, [r2], -r0
   22d94:	strdeq	r2, [r2], -r0
   22d98:	strdeq	r2, [r2], -r0
   22d9c:	strdeq	r2, [r2], -r0
   22da0:	strdeq	r2, [r2], -r0
   22da4:	strdeq	r2, [r2], -r0
   22da8:	strdeq	r2, [r2], -r0
   22dac:	strdeq	r2, [r2], -r0
   22db0:	strdeq	r2, [r2], -r0
   22db4:	strdeq	r2, [r2], -r0
   22db8:	strdeq	r2, [r2], -r0
   22dbc:	strdeq	r2, [r2], -r0
   22dc0:	strdeq	r2, [r2], -r0
   22dc4:	strdeq	r2, [r2], -r0
   22dc8:	strdeq	r2, [r2], -r0
   22dcc:	strdeq	r2, [r2], -r0
   22dd0:	strdeq	r2, [r2], -r0
   22dd4:	strdeq	r2, [r2], -r0
   22dd8:	strdeq	r2, [r2], -r0
   22ddc:	strdeq	r2, [r2], -r0
   22de0:	strdeq	r2, [r2], -r0
   22de4:	strdeq	r2, [r2], -r0
   22de8:	strdeq	r2, [r2], -r0
   22dec:	strdeq	r2, [r2], -r0
   22df0:	strdeq	r2, [r2], -r0
   22df4:	andeq	r2, r2, r4, lsl #30
   22df8:	strdeq	r2, [r2], -r0
   22dfc:	strdeq	r2, [r2], -r0
   22e00:	strdeq	r2, [r2], -r0
   22e04:	strdeq	r2, [r2], -r0
   22e08:	strdeq	r2, [r2], -r0
   22e0c:	strdeq	r2, [r2], -r0
   22e10:	strdeq	r2, [r2], -r0
   22e14:	strdeq	r2, [r2], -r0
   22e18:	strdeq	r2, [r2], -r0
   22e1c:	strdeq	r2, [r2], -r0
   22e20:	strdeq	r2, [r2], -r0
   22e24:	strdeq	r2, [r2], -r0
   22e28:	strdeq	r2, [r2], -r0
   22e2c:	strdeq	r2, [r2], -r0
   22e30:	strdeq	r2, [r2], -r0
   22e34:	strdeq	r2, [r2], -r0
   22e38:	strdeq	r2, [r2], -r0
   22e3c:	strdeq	r2, [r2], -r0
   22e40:	strdeq	r2, [r2], -r0
   22e44:	strdeq	r2, [r2], -r0
   22e48:	strdeq	r2, [r2], -r0
   22e4c:	strdeq	r2, [r2], -r0
   22e50:	strdeq	r2, [r2], -r0
   22e54:	strdeq	r2, [r2], -r0
   22e58:	strdeq	r2, [r2], -r0
   22e5c:	strdeq	r2, [r2], -r0
   22e60:	strdeq	r2, [r2], -r0
   22e64:	strdeq	r2, [r2], -r0
   22e68:	strdeq	r2, [r2], -r0
   22e6c:	strdeq	r2, [r2], -r0
   22e70:	strdeq	r2, [r2], -r0
   22e74:	andeq	r2, r2, r4, lsl #30
   22e78:	strdeq	r2, [r2], -r0
   22e7c:	strdeq	r2, [r2], -r0
   22e80:	strdeq	r2, [r2], -r0
   22e84:	strdeq	r2, [r2], -r0
   22e88:	strdeq	r2, [r2], -r0
   22e8c:	strdeq	r2, [r2], -r0
   22e90:	strdeq	r2, [r2], -r0
   22e94:	strdeq	r2, [r2], -r0
   22e98:	strdeq	r2, [r2], -r0
   22e9c:	strdeq	r2, [r2], -r0
   22ea0:	strdeq	r2, [r2], -r0
   22ea4:	strdeq	r2, [r2], -r0
   22ea8:	strdeq	r2, [r2], -r0
   22eac:	strdeq	r2, [r2], -r0
   22eb0:	strdeq	r2, [r2], -r0
   22eb4:	strdeq	r2, [r2], -r0
   22eb8:	strdeq	r2, [r2], -r0
   22ebc:	strdeq	r2, [r2], -r0
   22ec0:	strdeq	r2, [r2], -r0
   22ec4:	strdeq	r2, [r2], -r0
   22ec8:	strdeq	r2, [r2], -r0
   22ecc:	strdeq	r2, [r2], -r0
   22ed0:	strdeq	r2, [r2], -r0
   22ed4:	strdeq	r2, [r2], -r0
   22ed8:	strdeq	r2, [r2], -r0
   22edc:	strdeq	r2, [r2], -r0
   22ee0:	strdeq	r2, [r2], -r0
   22ee4:	strdeq	r2, [r2], -r0
   22ee8:	strdeq	r2, [r2], -r0
   22eec:	strdeq	r2, [r2], -r0
   22ef0:	add	r4, r4, #1
   22ef4:	add	r7, r7, #1
   22ef8:	cmp	r7, r6
   22efc:	bcc	22d5c <__assert_fail@plt+0x10cd0>
   22f00:	b	23098 <__assert_fail@plt+0x1100c>
   22f04:	str	r3, [sp, #4]
   22f08:	str	r2, [sp, #8]
   22f0c:	str	r5, [sp, #20]
   22f10:	str	r5, [sp, #16]
   22f14:	sub	r2, r6, r7
   22f18:	mov	r0, r8
   22f1c:	mov	r1, r7
   22f20:	mov	r3, r9
   22f24:	mov	r5, r7
   22f28:	bl	2280c <__assert_fail@plt+0x10780>
   22f2c:	cmp	r0, #0
   22f30:	beq	22f4c <__assert_fail@plt+0x10ec0>
   22f34:	mov	r7, r0
   22f38:	cmn	r0, #2
   22f3c:	beq	22fbc <__assert_fail@plt+0x10f30>
   22f40:	cmn	r7, #1
   22f44:	bne	22f50 <__assert_fail@plt+0x10ec4>
   22f48:	b	22fdc <__assert_fail@plt+0x10f50>
   22f4c:	mov	r7, #1
   22f50:	ldr	r0, [sp, #12]
   22f54:	bl	11c00 <wcwidth@plt>
   22f58:	cmp	r0, #0
   22f5c:	blt	22f78 <__assert_fail@plt+0x10eec>
   22f60:	mvn	r1, #-2147483648	; 0x80000000
   22f64:	sub	r1, r1, r4
   22f68:	cmp	r0, r1
   22f6c:	bgt	22fb4 <__assert_fail@plt+0x10f28>
   22f70:	add	r4, r0, r4
   22f74:	b	22f9c <__assert_fail@plt+0x10f10>
   22f78:	cmp	sl, #0
   22f7c:	bne	23004 <__assert_fail@plt+0x10f78>
   22f80:	ldr	r0, [sp, #12]
   22f84:	bl	11cfc <iswcntrl@plt>
   22f88:	cmp	r0, #0
   22f8c:	bne	22f9c <__assert_fail@plt+0x10f10>
   22f90:	cmn	r4, #-2147483647	; 0x80000001
   22f94:	beq	22fb4 <__assert_fail@plt+0x10f28>
   22f98:	add	r4, r4, #1
   22f9c:	mov	r0, r9
   22fa0:	add	r7, r5, r7
   22fa4:	bl	11c78 <mbsinit@plt>
   22fa8:	cmp	r0, #0
   22fac:	beq	22f14 <__assert_fail@plt+0x10e88>
   22fb0:	b	22ff4 <__assert_fail@plt+0x10f68>
   22fb4:	mov	r0, #7
   22fb8:	b	23008 <__assert_fail@plt+0x10f7c>
   22fbc:	ldr	r0, [sp, #4]
   22fc0:	ldr	r1, [sp, #8]
   22fc4:	mov	r7, r6
   22fc8:	add	r4, r4, r0
   22fcc:	mov	r0, #1
   22fd0:	cmp	r1, #0
   22fd4:	beq	22ff4 <__assert_fail@plt+0x10f68>
   22fd8:	b	23008 <__assert_fail@plt+0x10f7c>
   22fdc:	ldr	r1, [sp, #8]
   22fe0:	mov	r0, #1
   22fe4:	cmp	r1, #0
   22fe8:	bne	23008 <__assert_fail@plt+0x10f7c>
   22fec:	add	r4, r4, #1
   22ff0:	add	r7, r5, #1
   22ff4:	ldr	r2, [sp, #8]
   22ff8:	ldr	r3, [sp, #4]
   22ffc:	mov	r5, #0
   23000:	b	22ef8 <__assert_fail@plt+0x10e6c>
   23004:	mov	r0, #1
   23008:	ldr	r2, [sp, #8]
   2300c:	ldr	r3, [sp, #4]
   23010:	mov	r7, r5
   23014:	cmp	r0, #0
   23018:	mov	r5, #0
   2301c:	beq	22ef8 <__assert_fail@plt+0x10e6c>
   23020:	b	2307c <__assert_fail@plt+0x10ff0>
   23024:	and	r8, r4, #2
   23028:	mov	r4, #0
   2302c:	cmp	r7, r6
   23030:	bcs	23098 <__assert_fail@plt+0x1100c>
   23034:	ldrb	r5, [r7], #1
   23038:	bl	11e70 <__ctype_b_loc@plt>
   2303c:	ldr	r0, [r0]
   23040:	add	r0, r0, r5, lsl #1
   23044:	ldrh	r1, [r0]
   23048:	tst	r1, #16384	; 0x4000
   2304c:	bne	23064 <__assert_fail@plt+0x10fd8>
   23050:	cmp	r8, #0
   23054:	bne	23094 <__assert_fail@plt+0x11008>
   23058:	mov	r0, #0
   2305c:	tst	r1, #2
   23060:	bne	23074 <__assert_fail@plt+0x10fe8>
   23064:	cmn	r4, #-2147483647	; 0x80000001
   23068:	mov	r0, #0
   2306c:	mvneq	r0, #0
   23070:	addne	r4, r4, #1
   23074:	ands	r0, r0, #7
   23078:	beq	2302c <__assert_fail@plt+0x10fa0>
   2307c:	mvn	r4, #0
   23080:	cmp	r0, #7
   23084:	mvneq	r4, #-2147483648	; 0x80000000
   23088:	b	23098 <__assert_fail@plt+0x1100c>
   2308c:	mov	r4, #0
   23090:	b	23098 <__assert_fail@plt+0x1100c>
   23094:	mvn	r4, #0
   23098:	mov	r0, r4
   2309c:	sub	sp, fp, #28
   230a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   230a4:	mov	r3, r2
   230a8:	add	r2, r0, r1, lsl #2
   230ac:	b	230b0 <__assert_fail@plt+0x11024>
   230b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   230b4:	add	fp, sp, #28
   230b8:	sub	sp, sp, #44	; 0x2c
   230bc:	mov	r5, r3
   230c0:	mov	r8, r0
   230c4:	cmp	r1, #2
   230c8:	bhi	230f4 <__assert_fail@plt+0x11068>
   230cc:	bne	230ec <__assert_fail@plt+0x11060>
   230d0:	ldm	r8, {r6, r7}
   230d4:	mov	r0, r6
   230d8:	mov	r1, r7
   230dc:	blx	r5
   230e0:	cmp	r0, #1
   230e4:	strge	r7, [r8]
   230e8:	strge	r6, [r8, #4]
   230ec:	sub	sp, fp, #28
   230f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   230f4:	lsr	r9, r1, #1
   230f8:	mov	r7, r1
   230fc:	sub	r1, r1, r1, lsr #1
   23100:	mov	r3, r5
   23104:	mov	sl, r2
   23108:	add	r4, r8, r9, lsl #2
   2310c:	mov	r0, r4
   23110:	bl	230b0 <__assert_fail@plt+0x11024>
   23114:	cmp	r7, #3
   23118:	str	r8, [sp, #28]
   2311c:	str	r9, [sp, #36]	; 0x24
   23120:	str	sl, [sp, #32]
   23124:	bne	23134 <__assert_fail@plt+0x110a8>
   23128:	ldr	r6, [r8]
   2312c:	str	r6, [sl]
   23130:	b	23278 <__assert_fail@plt+0x111ec>
   23134:	str	r4, [sp, #8]
   23138:	lsr	r4, r7, #2
   2313c:	sub	r1, r9, r7, lsr #2
   23140:	mov	r2, sl
   23144:	mov	r3, r5
   23148:	str	r7, [sp, #12]
   2314c:	add	r0, r8, r4, lsl #2
   23150:	bl	230b0 <__assert_fail@plt+0x11024>
   23154:	mov	r0, r8
   23158:	mov	r1, r4
   2315c:	mov	r2, sl
   23160:	mov	r3, r5
   23164:	str	r5, [fp, #-32]	; 0xffffffe0
   23168:	bl	230b0 <__assert_fail@plt+0x11024>
   2316c:	ldr	r6, [r8, r4, lsl #2]
   23170:	rsb	r0, r9, #1
   23174:	add	r2, r8, #4
   23178:	mov	r1, #0
   2317c:	mov	r3, r4
   23180:	mov	r5, sl
   23184:	str	r4, [sp, #20]
   23188:	str	r0, [sp, #4]
   2318c:	str	r2, [sp]
   23190:	b	231b0 <__assert_fail@plt+0x11124>
   23194:	ldr	r3, [sp, #16]
   23198:	sub	r2, r2, r7
   2319c:	ldr	r8, [sp, #28]
   231a0:	ldr	r0, [sp, #4]
   231a4:	mov	r5, r2
   231a8:	ldr	r2, [sp]
   231ac:	add	r3, r3, r4
   231b0:	ldr	r8, [r8, r1, lsl #2]
   231b4:	add	r9, r0, r3
   231b8:	add	sl, r2, r3, lsl #2
   231bc:	mvn	r7, #3
   231c0:	mov	r4, #0
   231c4:	str	r3, [sp, #16]
   231c8:	str	r1, [sp, #24]
   231cc:	b	231dc <__assert_fail@plt+0x11150>
   231d0:	ldr	r6, [sl, r4, lsl #2]
   231d4:	sub	r7, r7, #4
   231d8:	add	r4, r4, #1
   231dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   231e0:	mov	r0, r8
   231e4:	mov	r1, r6
   231e8:	blx	r2
   231ec:	cmp	r0, #0
   231f0:	ble	23204 <__assert_fail@plt+0x11178>
   231f4:	adds	r0, r9, r4
   231f8:	str	r6, [r5, r4, lsl #2]
   231fc:	bne	231d0 <__assert_fail@plt+0x11144>
   23200:	b	23238 <__assert_fail@plt+0x111ac>
   23204:	ldr	r1, [sp, #24]
   23208:	ldr	r0, [sp, #20]
   2320c:	mov	r2, r5
   23210:	str	r8, [r5, r4, lsl #2]
   23214:	add	r1, r1, #1
   23218:	cmp	r1, r0
   2321c:	bne	23194 <__assert_fail@plt+0x11108>
   23220:	ldr	r9, [sp, #36]	; 0x24
   23224:	ldr	r0, [sp, #16]
   23228:	str	r9, [sp, #20]
   2322c:	add	r3, r0, r4
   23230:	ldr	r8, [sp, #28]
   23234:	b	23248 <__assert_fail@plt+0x111bc>
   23238:	ldr	r8, [sp, #28]
   2323c:	ldr	r9, [sp, #36]	; 0x24
   23240:	ldr	r3, [sp, #24]
   23244:	mov	r2, r5
   23248:	add	r0, r2, r4, lsl #2
   2324c:	ldr	r2, [sp, #20]
   23250:	add	r1, r8, r3, lsl #2
   23254:	add	r0, r0, #4
   23258:	sub	r2, r2, r3
   2325c:	lsl	r2, r2, #2
   23260:	bl	11c60 <memcpy@plt>
   23264:	ldr	r0, [sp, #32]
   23268:	ldr	r7, [sp, #12]
   2326c:	ldr	r4, [sp, #8]
   23270:	ldr	r5, [fp, #-32]	; 0xffffffe0
   23274:	ldr	r6, [r0]
   23278:	rsb	r0, r7, #1
   2327c:	ldr	r7, [r4]
   23280:	mov	r1, #0
   23284:	add	r2, r8, #4
   23288:	mov	r3, r9
   2328c:	str	r1, [fp, #-32]	; 0xffffffe0
   23290:	mov	r1, #0
   23294:	str	r0, [sp, #16]
   23298:	str	r2, [sp, #12]
   2329c:	b	232c8 <__assert_fail@plt+0x1123c>
   232a0:	ldr	r0, [sp, #32]
   232a4:	ldr	r3, [sp, #24]
   232a8:	str	r1, [fp, #-32]	; 0xffffffe0
   232ac:	ldr	r2, [sp, #12]
   232b0:	ldr	r6, [r0, r1, lsl #2]
   232b4:	ldr	r0, [sp, #20]
   232b8:	add	r3, r3, r9
   232bc:	add	r0, r0, r9
   232c0:	add	r1, r0, #1
   232c4:	ldr	r0, [sp, #16]
   232c8:	add	r8, r8, r1, lsl #2
   232cc:	add	sl, r0, r3
   232d0:	add	r4, r2, r3, lsl #2
   232d4:	mov	r9, #0
   232d8:	str	r1, [sp, #20]
   232dc:	str	r3, [sp, #24]
   232e0:	b	232ec <__assert_fail@plt+0x11260>
   232e4:	ldr	r7, [r4, r9, lsl #2]
   232e8:	add	r9, r9, #1
   232ec:	mov	r0, r6
   232f0:	mov	r1, r7
   232f4:	blx	r5
   232f8:	cmp	r0, #0
   232fc:	ble	23310 <__assert_fail@plt+0x11284>
   23300:	adds	r0, sl, r9
   23304:	str	r7, [r8, r9, lsl #2]
   23308:	bne	232e4 <__assert_fail@plt+0x11258>
   2330c:	b	23330 <__assert_fail@plt+0x112a4>
   23310:	ldr	r1, [fp, #-32]	; 0xffffffe0
   23314:	ldr	r0, [sp, #36]	; 0x24
   23318:	str	r6, [r8, r9, lsl #2]
   2331c:	ldr	r8, [sp, #28]
   23320:	add	r1, r1, #1
   23324:	cmp	r1, r0
   23328:	bne	232a0 <__assert_fail@plt+0x11214>
   2332c:	b	230ec <__assert_fail@plt+0x11060>
   23330:	ldr	r0, [sp, #32]
   23334:	ldr	r2, [fp, #-32]	; 0xffffffe0
   23338:	add	r1, r0, r2, lsl #2
   2333c:	ldr	r0, [sp, #36]	; 0x24
   23340:	sub	r0, r0, r2
   23344:	lsl	r2, r0, #2
   23348:	add	r0, r8, r9, lsl #2
   2334c:	add	r0, r0, #4
   23350:	sub	sp, fp, #28
   23354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23358:	b	11c60 <memcpy@plt>
   2335c:	push	{fp, lr}
   23360:	mov	fp, sp
   23364:	sub	sp, sp, #24
   23368:	mvn	ip, #0
   2336c:	str	ip, [sp, #8]
   23370:	mov	ip, #0
   23374:	str	ip, [sp, #4]
   23378:	str	ip, [sp]
   2337c:	ldr	ip, [fp, #12]
   23380:	str	ip, [sp, #16]
   23384:	ldr	ip, [fp, #8]
   23388:	str	ip, [sp, #12]
   2338c:	bl	23398 <__assert_fail@plt+0x1130c>
   23390:	mov	sp, fp
   23394:	pop	{fp, pc}
   23398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2339c:	add	fp, sp, #28
   233a0:	sub	sp, sp, #124	; 0x7c
   233a4:	sub	sp, sp, #1024	; 0x400
   233a8:	mov	r4, r3
   233ac:	mov	sl, r2
   233b0:	str	r1, [sp, #88]	; 0x58
   233b4:	mov	r5, r0
   233b8:	bl	11ed0 <__errno_location@plt>
   233bc:	mov	r2, r4
   233c0:	ldrb	r3, [sl]
   233c4:	str	r0, [sp, #60]	; 0x3c
   233c8:	ldr	r0, [r0]
   233cc:	movw	r6, #49853	; 0xc2bd
   233d0:	ldr	r1, [r2, #8]!
   233d4:	movt	r6, #2
   233d8:	str	r0, [sp, #56]	; 0x38
   233dc:	cmp	r1, #0
   233e0:	mov	r7, r1
   233e4:	movweq	r7, #12
   233e8:	cmp	r1, #12
   233ec:	subgt	r7, r1, #12
   233f0:	ldr	r1, [r2, #32]
   233f4:	cmp	r1, #0
   233f8:	movne	r6, r1
   233fc:	cmp	r3, #0
   23400:	beq	23480 <__assert_fail@plt+0x113f4>
   23404:	sub	r0, fp, #48	; 0x30
   23408:	mvn	r1, #13
   2340c:	ldr	r9, [fp, #16]
   23410:	sub	r8, r6, #1
   23414:	str	r6, [sp, #36]	; 0x24
   23418:	movw	r6, #52428	; 0xcccc
   2341c:	str	r4, [sp, #72]	; 0x48
   23420:	mov	lr, #0
   23424:	mov	ip, r5
   23428:	str	r7, [sp, #44]	; 0x2c
   2342c:	str	r2, [sp, #48]	; 0x30
   23430:	sub	r1, r1, r0
   23434:	movt	r6, #3276	; 0xccc
   23438:	str	r8, [sp, #20]
   2343c:	str	r1, [sp, #28]
   23440:	add	r1, r0, #13
   23444:	add	r0, r0, #14
   23448:	str	r1, [sp, #24]
   2344c:	add	r1, sp, #96	; 0x60
   23450:	str	r0, [sp, #64]	; 0x40
   23454:	add	r1, r1, #1
   23458:	str	r1, [sp, #32]
   2345c:	add	r1, r4, #12
   23460:	mov	r4, #-2147483648	; 0x80000000
   23464:	str	r1, [sp, #40]	; 0x28
   23468:	sub	r1, fp, #53	; 0x35
   2346c:	add	r0, r1, #3
   23470:	str	r0, [sp, #52]	; 0x34
   23474:	add	r0, r1, #2
   23478:	str	r0, [sp, #68]	; 0x44
   2347c:	b	237ac <__assert_fail@plt+0x11720>
   23480:	mov	lr, #0
   23484:	mov	ip, r5
   23488:	b	24cb4 <__assert_fail@plt+0x12c28>
   2348c:	sub	r0, r9, #6
   23490:	bic	r8, r0, r0, asr #31
   23494:	b	23f9c <__assert_fail@plt+0x11f10>
   23498:	movw	r6, #63636	; 0xf894
   2349c:	movt	r6, #65535	; 0xffff
   234a0:	sub	r6, r6, r3
   234a4:	add	r3, r7, #100	; 0x64
   234a8:	cmp	lr, r6
   234ac:	rsblt	r3, r7, #0
   234b0:	ldr	lr, [sp, #76]	; 0x4c
   234b4:	ldr	r7, [fp, #12]
   234b8:	cmp	r5, #0
   234bc:	mov	r4, #0
   234c0:	moveq	r5, r7
   234c4:	mov	r7, #0
   234c8:	cmp	r5, #43	; 0x2b
   234cc:	bne	2422c <__assert_fail@plt+0x121a0>
   234d0:	ldr	r8, [sp, #80]	; 0x50
   234d4:	mov	r4, #0
   234d8:	movw	r6, #9999	; 0x270f
   234dc:	mov	ip, #0
   234e0:	cmp	r8, r9
   234e4:	movwlt	r4, #1
   234e8:	cmp	r8, #2
   234ec:	movweq	r6, #99	; 0x63
   234f0:	cmp	r6, r3
   234f4:	movwcc	ip, #1
   234f8:	orr	r4, r4, ip
   234fc:	ldr	ip, [sp, #84]	; 0x54
   23500:	b	2422c <__assert_fail@plt+0x121a0>
   23504:	movw	r4, #63636	; 0xf894
   23508:	ldr	ip, [sp, #84]	; 0x54
   2350c:	str	r3, [sp, #80]	; 0x50
   23510:	add	r3, r6, #100	; 0x64
   23514:	movt	r4, #65535	; 0xffff
   23518:	cmp	r7, r4
   2351c:	rsblt	r3, r6, #0
   23520:	b	234b4 <__assert_fail@plt+0x11428>
   23524:	cmp	r7, #0
   23528:	beq	2370c <__assert_fail@plt+0x11680>
   2352c:	movw	r6, #10000	; 0x2710
   23530:	mov	r4, #1
   23534:	mla	r3, r3, r6, r7
   23538:	mov	r7, #100	; 0x64
   2353c:	mla	r3, ip, r7, r3
   23540:	mov	r7, #9
   23544:	str	r7, [sp, #80]	; 0x50
   23548:	mov	r7, #20
   2354c:	b	2372c <__assert_fail@plt+0x116a0>
   23550:	sub	r1, fp, #48	; 0x30
   23554:	mov	r0, r6
   23558:	mov	r2, r4
   2355c:	mov	r7, lr
   23560:	bl	11c60 <memcpy@plt>
   23564:	mov	lr, r7
   23568:	add	ip, r6, r4
   2356c:	cmp	r5, #45	; 0x2d
   23570:	mov	r6, #0
   23574:	subne	r0, r9, r4
   23578:	bicne	r6, r0, r0, asr #31
   2357c:	sub	r0, r8, r4
   23580:	cmp	r6, r0
   23584:	bcs	24cd8 <__assert_fail@plt+0x12c4c>
   23588:	cmp	ip, #0
   2358c:	cmpne	r6, #0
   23590:	beq	2375c <__assert_fail@plt+0x116d0>
   23594:	uxtb	r0, r5
   23598:	cmp	r0, #48	; 0x30
   2359c:	cmpne	r0, #43	; 0x2b
   235a0:	bne	23738 <__assert_fail@plt+0x116ac>
   235a4:	mov	r0, ip
   235a8:	mov	r7, ip
   235ac:	mov	r1, #48	; 0x30
   235b0:	b	23744 <__assert_fail@plt+0x116b8>
   235b4:	mov	r1, #32
   235b8:	mov	r5, r2
   235bc:	bl	11ef4 <memset@plt>
   235c0:	ldr	r0, [sp, #84]	; 0x54
   235c4:	ldr	lr, [sp, #76]	; 0x4c
   235c8:	add	ip, r0, r5
   235cc:	tst	r7, #1
   235d0:	beq	23620 <__assert_fail@plt+0x11594>
   235d4:	ldr	r8, [sp, #20]
   235d8:	cmp	r9, #0
   235dc:	beq	23698 <__assert_fail@plt+0x1160c>
   235e0:	cmp	r6, r9
   235e4:	movls	r6, r9
   235e8:	add	r0, r0, r6
   235ec:	mov	r6, ip
   235f0:	sub	r5, r0, #1
   235f4:	bl	11e40 <__ctype_tolower_loc@plt>
   235f8:	ldr	lr, [sp, #76]	; 0x4c
   235fc:	mov	ip, r6
   23600:	mov	r1, r9
   23604:	ldrb	r2, [r8, r1]
   23608:	ldr	r3, [r0]
   2360c:	subs	r1, r1, #1
   23610:	ldr	r2, [r3, r2, lsl #2]
   23614:	strb	r2, [r5], #-1
   23618:	bne	23604 <__assert_fail@plt+0x11578>
   2361c:	b	23698 <__assert_fail@plt+0x1160c>
   23620:	eor	r1, r7, #1
   23624:	and	r1, r8, r1
   23628:	tst	r1, #1
   2362c:	beq	2367c <__assert_fail@plt+0x115f0>
   23630:	ldr	r8, [sp, #20]
   23634:	cmp	r9, #0
   23638:	beq	23698 <__assert_fail@plt+0x1160c>
   2363c:	cmp	r6, r9
   23640:	movls	r6, r9
   23644:	add	r0, r0, r6
   23648:	mov	r6, ip
   2364c:	sub	r5, r0, #1
   23650:	bl	11e4c <__ctype_toupper_loc@plt>
   23654:	ldr	lr, [sp, #76]	; 0x4c
   23658:	mov	ip, r6
   2365c:	mov	r1, r9
   23660:	ldrb	r2, [r8, r1]
   23664:	ldr	r3, [r0]
   23668:	subs	r1, r1, #1
   2366c:	ldr	r2, [r3, r2, lsl #2]
   23670:	strb	r2, [r5], #-1
   23674:	bne	23660 <__assert_fail@plt+0x115d4>
   23678:	b	23698 <__assert_fail@plt+0x1160c>
   2367c:	ldr	r1, [sp, #36]	; 0x24
   23680:	mov	r0, ip
   23684:	mov	r2, r9
   23688:	mov	r5, ip
   2368c:	bl	11c60 <memcpy@plt>
   23690:	ldr	lr, [sp, #76]	; 0x4c
   23694:	mov	ip, r5
   23698:	add	ip, ip, r9
   2369c:	movw	r6, #52428	; 0xcccc
   236a0:	add	lr, r4, lr
   236a4:	b	24b20 <__assert_fail@plt+0x12a94>
   236a8:	mov	r0, ip
   236ac:	mov	r1, #32
   236b0:	mov	r2, r4
   236b4:	mov	r5, lr
   236b8:	mov	r7, ip
   236bc:	bl	11ef4 <memset@plt>
   236c0:	mov	ip, r7
   236c4:	mov	lr, r5
   236c8:	add	ip, r7, r4
   236cc:	mov	r4, #-2147483648	; 0x80000000
   236d0:	mov	r0, #10
   236d4:	b	23704 <__assert_fail@plt+0x11678>
   236d8:	mov	r0, ip
   236dc:	mov	r1, #32
   236e0:	mov	r2, r4
   236e4:	mov	r5, lr
   236e8:	mov	r7, ip
   236ec:	bl	11ef4 <memset@plt>
   236f0:	mov	ip, r7
   236f4:	mov	lr, r5
   236f8:	add	ip, r7, r4
   236fc:	mov	r4, #-2147483648	; 0x80000000
   23700:	mov	r0, #9
   23704:	strb	r0, [ip], #1
   23708:	b	24c98 <__assert_fail@plt+0x12c0c>
   2370c:	cmp	ip, #0
   23710:	beq	237a4 <__assert_fail@plt+0x11718>
   23714:	mov	r7, #100	; 0x64
   23718:	mov	r4, #1
   2371c:	mla	r3, r3, r7, ip
   23720:	mov	r7, #6
   23724:	str	r7, [sp, #80]	; 0x50
   23728:	mov	r7, #4
   2372c:	ldr	lr, [sp, #76]	; 0x4c
   23730:	mov	ip, r8
   23734:	b	2422c <__assert_fail@plt+0x121a0>
   23738:	mov	r0, ip
   2373c:	mov	r7, ip
   23740:	mov	r1, #32
   23744:	mov	r2, r6
   23748:	mov	r5, lr
   2374c:	bl	11ef4 <memset@plt>
   23750:	mov	lr, r5
   23754:	add	ip, r7, r6
   23758:	mov	r0, r7
   2375c:	add	r0, r6, lr
   23760:	movw	r6, #52428	; 0xcccc
   23764:	add	lr, r0, r4
   23768:	movt	r6, #3276	; 0xccc
   2376c:	mov	r4, #-2147483648	; 0x80000000
   23770:	b	24ca4 <__assert_fail@plt+0x12c18>
   23774:	mov	r0, ip
   23778:	mov	r1, #32
   2377c:	mov	r2, r4
   23780:	mov	r5, lr
   23784:	mov	r7, ip
   23788:	bl	11ef4 <memset@plt>
   2378c:	ldrb	r1, [sl]
   23790:	mov	ip, r7
   23794:	mov	lr, r5
   23798:	add	ip, r7, r4
   2379c:	strb	r1, [ip], #1
   237a0:	b	24c94 <__assert_fail@plt+0x12c08>
   237a4:	mov	r7, #3
   237a8:	b	24a54 <__assert_fail@plt+0x129c8>
   237ac:	uxtb	r1, r3
   237b0:	cmp	r1, #37	; 0x25
   237b4:	bne	237d0 <__assert_fail@plt+0x11744>
   237b8:	ldr	r0, [fp, #8]
   237bc:	mov	r7, #0
   237c0:	mov	r5, #0
   237c4:	str	sl, [sp, #80]	; 0x50
   237c8:	str	r0, [sp, #92]	; 0x5c
   237cc:	b	238c0 <__assert_fail@plt+0x11834>
   237d0:	ldr	r0, [sp, #88]	; 0x58
   237d4:	bic	r1, r9, r9, asr #31
   237d8:	cmp	r1, #1
   237dc:	mov	r5, r1
   237e0:	movls	r5, #1
   237e4:	sub	r2, r0, lr
   237e8:	cmp	r5, r2
   237ec:	bcs	24cd8 <__assert_fail@plt+0x12c4c>
   237f0:	cmp	ip, #0
   237f4:	beq	23954 <__assert_fail@plt+0x118c8>
   237f8:	cmp	r1, #2
   237fc:	bcc	23838 <__assert_fail@plt+0x117ac>
   23800:	sub	r4, r1, #1
   23804:	mov	r0, ip
   23808:	mov	r1, #32
   2380c:	mov	r6, lr
   23810:	mov	r7, ip
   23814:	mov	r2, r4
   23818:	bl	11ef4 <memset@plt>
   2381c:	ldrb	r3, [sl]
   23820:	mov	ip, r7
   23824:	mov	lr, r6
   23828:	movw	r6, #52428	; 0xcccc
   2382c:	add	ip, r7, r4
   23830:	movt	r6, #3276	; 0xccc
   23834:	mov	r4, #-2147483648	; 0x80000000
   23838:	strb	r3, [ip], #1
   2383c:	add	lr, r5, lr
   23840:	b	24ca4 <__assert_fail@plt+0x12c18>
   23844:	mov	r7, #1
   23848:	b	238c0 <__assert_fail@plt+0x11834>
   2384c:	add	r1, r1, #1
   23850:	add	sl, sl, #1
   23854:	mov	r5, r0
   23858:	ldrb	r0, [sl]
   2385c:	sub	r2, r0, #35	; 0x23
   23860:	cmp	r2, #13
   23864:	bhi	238a8 <__assert_fail@plt+0x1181c>
   23868:	add	r3, pc, #0
   2386c:	ldr	pc, [r3, r2, lsl #2]
   23870:	andeq	r3, r2, r4, asr #16
   23874:	andeq	r3, r2, ip, asr #17
   23878:	andeq	r3, r2, ip, asr #17
   2387c:	andeq	r3, r2, ip, asr #17
   23880:	andeq	r3, r2, ip, asr #17
   23884:	andeq	r3, r2, ip, asr #17
   23888:	andeq	r3, r2, ip, asr #17
   2388c:	andeq	r3, r2, ip, asr #17
   23890:	andeq	r3, r2, ip, asr #16
   23894:	andeq	r3, r2, ip, asr #17
   23898:	andeq	r3, r2, ip, asr #16
   2389c:	andeq	r3, r2, ip, asr #17
   238a0:	andeq	r3, r2, ip, asr #17
   238a4:	andeq	r3, r2, ip, asr #16
   238a8:	cmp	r0, #95	; 0x5f
   238ac:	beq	2384c <__assert_fail@plt+0x117c0>
   238b0:	cmp	r0, #94	; 0x5e
   238b4:	bne	238cc <__assert_fail@plt+0x11840>
   238b8:	mov	r0, #1
   238bc:	str	r0, [sp, #92]	; 0x5c
   238c0:	add	r1, sl, #2
   238c4:	add	sl, sl, #1
   238c8:	b	23858 <__assert_fail@plt+0x117cc>
   238cc:	sub	r2, r0, #48	; 0x30
   238d0:	cmp	r2, #9
   238d4:	bhi	23934 <__assert_fail@plt+0x118a8>
   238d8:	mov	r9, #0
   238dc:	cmn	r9, #1
   238e0:	ble	238f0 <__assert_fail@plt+0x11864>
   238e4:	cmp	r9, r6
   238e8:	bgt	23900 <__assert_fail@plt+0x11874>
   238ec:	b	23908 <__assert_fail@plt+0x1187c>
   238f0:	beq	23908 <__assert_fail@plt+0x1187c>
   238f4:	sdiv	r2, r4, r9
   238f8:	cmp	r2, #10
   238fc:	bge	23908 <__assert_fail@plt+0x1187c>
   23900:	mvn	r9, #-2147483648	; 0x80000000
   23904:	b	23920 <__assert_fail@plt+0x11894>
   23908:	add	r2, r9, r9, lsl #2
   2390c:	lsl	r3, r2, #1
   23910:	uxtab	r0, r3, r0
   23914:	sub	r9, r0, #48	; 0x30
   23918:	cmp	r9, r2, lsl #1
   2391c:	mvnvs	r9, #-2147483648	; 0x80000000
   23920:	ldrb	r0, [r1], #1
   23924:	sub	r2, r0, #48	; 0x30
   23928:	cmp	r2, #10
   2392c:	bcc	238dc <__assert_fail@plt+0x11850>
   23930:	sub	sl, r1, #1
   23934:	cmp	r0, #79	; 0x4f
   23938:	str	ip, [sp, #84]	; 0x54
   2393c:	cmpne	r0, #69	; 0x45
   23940:	bne	23960 <__assert_fail@plt+0x118d4>
   23944:	ldrb	r1, [sl, #1]!
   23948:	cmp	r1, #122	; 0x7a
   2394c:	bls	23970 <__assert_fail@plt+0x118e4>
   23950:	b	2456c <__assert_fail@plt+0x124e0>
   23954:	mov	ip, #0
   23958:	add	lr, r5, lr
   2395c:	b	24ca4 <__assert_fail@plt+0x12c18>
   23960:	mov	r1, r0
   23964:	mov	r0, #0
   23968:	cmp	r1, #122	; 0x7a
   2396c:	bhi	2456c <__assert_fail@plt+0x124e0>
   23970:	movw	r4, #48830	; 0xbebe
   23974:	add	r2, pc, #12
   23978:	mov	r6, #0
   2397c:	mvn	r8, #0
   23980:	movt	r4, #2
   23984:	ldr	pc, [r2, r1, lsl #2]
   23988:	andeq	r3, r2, r4, lsl #25
   2398c:	andeq	r4, r2, ip, ror #10
   23990:	andeq	r4, r2, ip, ror #10
   23994:	andeq	r4, r2, ip, ror #10
   23998:	andeq	r4, r2, ip, ror #10
   2399c:	andeq	r4, r2, ip, ror #10
   239a0:	andeq	r4, r2, ip, ror #10
   239a4:	andeq	r4, r2, ip, ror #10
   239a8:	andeq	r4, r2, ip, ror #10
   239ac:	andeq	r4, r2, ip, ror #10
   239b0:	andeq	r4, r2, ip, ror #10
   239b4:	andeq	r4, r2, ip, ror #10
   239b8:	andeq	r4, r2, ip, ror #10
   239bc:	andeq	r4, r2, ip, ror #10
   239c0:	andeq	r4, r2, ip, ror #10
   239c4:	andeq	r4, r2, ip, ror #10
   239c8:	andeq	r4, r2, ip, ror #10
   239cc:	andeq	r4, r2, ip, ror #10
   239d0:	andeq	r4, r2, ip, ror #10
   239d4:	andeq	r4, r2, ip, ror #10
   239d8:	andeq	r4, r2, ip, ror #10
   239dc:	andeq	r4, r2, ip, ror #10
   239e0:	andeq	r4, r2, ip, ror #10
   239e4:	andeq	r4, r2, ip, ror #10
   239e8:	andeq	r4, r2, ip, ror #10
   239ec:	andeq	r4, r2, ip, ror #10
   239f0:	andeq	r4, r2, ip, ror #10
   239f4:	andeq	r4, r2, ip, ror #10
   239f8:	andeq	r4, r2, ip, ror #10
   239fc:	andeq	r4, r2, ip, ror #10
   23a00:	andeq	r4, r2, ip, ror #10
   23a04:	andeq	r4, r2, ip, ror #10
   23a08:	andeq	r4, r2, ip, ror #10
   23a0c:	andeq	r4, r2, ip, ror #10
   23a10:	andeq	r4, r2, ip, ror #10
   23a14:	andeq	r4, r2, ip, ror #10
   23a18:	andeq	r4, r2, ip, ror #10
   23a1c:	muleq	r2, r0, ip
   23a20:	andeq	r4, r2, ip, ror #10
   23a24:	andeq	r4, r2, ip, ror #10
   23a28:	andeq	r4, r2, ip, ror #10
   23a2c:	andeq	r4, r2, ip, ror #10
   23a30:	andeq	r4, r2, ip, ror #10
   23a34:	andeq	r4, r2, ip, ror #10
   23a38:	andeq	r4, r2, ip, ror #10
   23a3c:	andeq	r4, r2, ip, ror #10
   23a40:	andeq	r4, r2, ip, ror #10
   23a44:	andeq	r4, r2, ip, ror #10
   23a48:	andeq	r4, r2, ip, ror #10
   23a4c:	andeq	r4, r2, ip, ror #10
   23a50:	andeq	r4, r2, ip, ror #10
   23a54:	andeq	r4, r2, ip, ror #10
   23a58:	andeq	r4, r2, ip, ror #10
   23a5c:	andeq	r4, r2, ip, ror #10
   23a60:	andeq	r4, r2, ip, ror #10
   23a64:	andeq	r4, r2, ip, ror #10
   23a68:	andeq	r4, r2, ip, ror #10
   23a6c:	andeq	r4, r2, ip, ror #10
   23a70:	strdeq	r3, [r2], -ip
   23a74:	andeq	r4, r2, ip, ror #10
   23a78:	andeq	r4, r2, ip, ror #10
   23a7c:	andeq	r4, r2, ip, ror #10
   23a80:	andeq	r4, r2, ip, ror #10
   23a84:	andeq	r4, r2, ip, ror #10
   23a88:	andeq	r4, r2, ip, ror #10
   23a8c:	andeq	r3, r2, r0, ror sp
   23a90:	muleq	r2, r0, sp
   23a94:			; <UNDEFINED> instruction: 0x00023db0
   23a98:	andeq	r3, r2, r4, asr #27
   23a9c:	andeq	r4, r2, ip, ror #10
   23aa0:	ldrdeq	r3, [r2], -r8
   23aa4:	andeq	r3, r2, r4, ror fp
   23aa8:	andeq	r3, r2, r4, lsl #28
   23aac:	andeq	r3, r2, r8, lsl lr
   23ab0:	andeq	r4, r2, ip, ror #10
   23ab4:	andeq	r4, r2, ip, ror #10
   23ab8:	andeq	r4, r2, ip, ror #10
   23abc:	andeq	r3, r2, r8, lsr #28
   23ac0:	andeq	r3, r2, ip, lsr lr
   23ac4:	andeq	r4, r2, ip, ror #10
   23ac8:	andeq	r3, r2, r0, ror #30
   23acc:	andeq	r4, r2, ip, ror #10
   23ad0:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   23ad4:	andeq	r3, r2, r0, lsl #31
   23ad8:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   23adc:	andeq	r4, r2, ip, lsr r0
   23ae0:	andeq	r3, r2, r4, ror fp
   23ae4:	andeq	r4, r2, r8, rrx
   23ae8:	strheq	r4, [r2], -r4	; <UNPREDICTABLE>
   23aec:	andeq	r4, r2, r8, asr #1
   23af0:	andeq	r4, r2, r4, lsl #2
   23af4:	andeq	r4, r2, ip, ror #10
   23af8:	andeq	r4, r2, ip, ror #10
   23afc:	andeq	r4, r2, ip, ror #10
   23b00:	andeq	r4, r2, ip, ror #10
   23b04:	andeq	r4, r2, ip, ror #10
   23b08:	andeq	r4, r2, ip, ror #10
   23b0c:	andeq	r4, r2, r4, ror r1
   23b10:	andeq	r3, r2, r8, ror #24
   23b14:	muleq	r2, r4, r1
   23b18:	andeq	r4, r2, r8, lsr #3
   23b1c:			; <UNDEFINED> instruction: 0x000241bc
   23b20:	andeq	r4, r2, ip, ror #10
   23b24:	andeq	r3, r2, r4, ror fp
   23b28:	andeq	r3, r2, r8, ror #24
   23b2c:	andeq	r4, r2, ip, ror #10
   23b30:	andeq	r4, r2, ip, asr #3
   23b34:	andeq	r4, r2, r4, ror #3
   23b38:	strdeq	r4, [r2], -r8
   23b3c:	andeq	r4, r2, r0, asr #6
   23b40:	andeq	r4, r2, r0, ror r3
   23b44:	andeq	r4, r2, ip, ror #10
   23b48:	andeq	r3, r2, r4, ror #30
   23b4c:	andeq	r4, r2, ip, asr #7
   23b50:	andeq	r4, r2, ip, ror #20
   23b54:	strdeq	r4, [r2], -r8
   23b58:			; <UNDEFINED> instruction: 0x000244bc
   23b5c:	andeq	r4, r2, r8, lsl r5
   23b60:	andeq	r4, r2, ip, ror #10
   23b64:	andeq	r4, r2, ip, asr #10
   23b68:	andeq	r4, r2, r4, ror #10
   23b6c:	muleq	r2, r0, r6
   23b70:	andeq	r3, r2, r0, lsr #26
   23b74:	cmp	r0, #69	; 0x45
   23b78:	beq	2456c <__assert_fail@plt+0x124e0>
   23b7c:	ldr	r2, [sp, #72]	; 0x48
   23b80:	str	lr, [sp, #76]	; 0x4c
   23b84:	movw	r6, #9363	; 0x2493
   23b88:	movt	r6, #37449	; 0x9249
   23b8c:	add	lr, r2, #20
   23b90:	movw	r2, #382	; 0x17e
   23b94:	ldm	lr, {r3, r8, lr}
   23b98:	add	r2, lr, r2
   23b9c:	cmp	r3, #0
   23ba0:	str	r3, [sp, #80]	; 0x50
   23ba4:	sub	r2, r2, r8
   23ba8:	smmla	r4, r2, r6, r2
   23bac:	asr	r7, r4, #2
   23bb0:	add	r4, r7, r4, lsr #31
   23bb4:	rsb	r4, r4, r4, lsl #3
   23bb8:	sub	r2, r4, r2
   23bbc:	add	r2, lr, r2
   23bc0:	add	r4, r2, #3
   23bc4:	mvn	r2, #99	; 0x63
   23bc8:	movwlt	r2, #300	; 0x12c
   23bcc:	cmn	r4, #1
   23bd0:	add	r2, r2, r3
   23bd4:	ble	247f0 <__assert_fail@plt+0x12764>
   23bd8:	movw	r7, #365	; 0x16d
   23bdc:	tst	r2, #3
   23be0:	bne	23c24 <__assert_fail@plt+0x11b98>
   23be4:	movw	r7, #34079	; 0x851f
   23be8:	mov	ip, #100	; 0x64
   23bec:	movt	r7, #20971	; 0x51eb
   23bf0:	smmul	r7, r2, r7
   23bf4:	asr	r3, r7, #5
   23bf8:	add	r3, r3, r7, lsr #31
   23bfc:	mls	ip, r3, ip, r2
   23c00:	asr	r3, r7, #7
   23c04:	add	r3, r3, r7, lsr #31
   23c08:	mov	r7, #400	; 0x190
   23c0c:	mls	r2, r3, r7, r2
   23c10:	movw	r7, #365	; 0x16d
   23c14:	cmp	r2, #0
   23c18:	movweq	r7, #366	; 0x16e
   23c1c:	cmp	ip, #0
   23c20:	movwne	r7, #366	; 0x16e
   23c24:	movw	r3, #382	; 0x17e
   23c28:	add	r2, r8, r7
   23c2c:	mov	r7, r6
   23c30:	add	r3, lr, r3
   23c34:	sub	r2, r3, r2
   23c38:	smmla	r2, r2, r6, r2
   23c3c:	asr	r3, r2, #2
   23c40:	add	r2, r3, r2, lsr #31
   23c44:	movw	r3, #379	; 0x17b
   23c48:	rsb	r2, r2, r2, lsl #3
   23c4c:	add	r2, r2, r8
   23c50:	sub	r2, r2, r3
   23c54:	mov	r3, #1
   23c58:	cmn	r2, #1
   23c5c:	eor	r3, r3, r2, lsr #31
   23c60:	movgt	r4, r2
   23c64:	b	24870 <__assert_fail@plt+0x127e4>
   23c68:	ldr	r2, [sp, #92]	; 0x5c
   23c6c:	mov	r6, #0
   23c70:	cmp	r0, #69	; 0x45
   23c74:	orr	r2, r7, r2
   23c78:	str	r2, [sp, #92]	; 0x5c
   23c7c:	beq	2456c <__assert_fail@plt+0x124e0>
   23c80:	b	24a6c <__assert_fail@plt+0x129e0>
   23c84:	ldr	ip, [sp, #84]	; 0x54
   23c88:	sub	r8, sl, #1
   23c8c:	b	24574 <__assert_fail@plt+0x124e8>
   23c90:	ldr	r0, [sp, #80]	; 0x50
   23c94:	ldr	ip, [sp, #84]	; 0x54
   23c98:	sub	r8, sl, #1
   23c9c:	cmp	r8, r0
   23ca0:	bne	24574 <__assert_fail@plt+0x124e8>
   23ca4:	ldr	r1, [sp, #88]	; 0x58
   23ca8:	subs	r0, r5, #45	; 0x2d
   23cac:	bicne	r0, r9, r9, asr #31
   23cb0:	cmp	r0, #1
   23cb4:	mov	r6, r0
   23cb8:	movls	r6, #1
   23cbc:	sub	r1, r1, lr
   23cc0:	cmp	r6, r1
   23cc4:	bcs	24cd8 <__assert_fail@plt+0x12c4c>
   23cc8:	cmp	ip, #0
   23ccc:	beq	24744 <__assert_fail@plt+0x126b8>
   23cd0:	mov	r1, #37	; 0x25
   23cd4:	cmp	r0, #2
   23cd8:	bcc	2379c <__assert_fail@plt+0x11710>
   23cdc:	uxtb	r1, r5
   23ce0:	sub	r4, r0, #1
   23ce4:	cmp	r1, #48	; 0x30
   23ce8:	cmpne	r1, #43	; 0x2b
   23cec:	bne	23774 <__assert_fail@plt+0x116e8>
   23cf0:	mov	r0, ip
   23cf4:	mov	r1, #48	; 0x30
   23cf8:	b	2377c <__assert_fail@plt+0x116f0>
   23cfc:	mov	r6, #1
   23d00:	b	23d08 <__assert_fail@plt+0x11c7c>
   23d04:	add	r6, r6, #1
   23d08:	ldrb	r2, [sl, r6]
   23d0c:	cmp	r2, #58	; 0x3a
   23d10:	beq	23d04 <__assert_fail@plt+0x11c78>
   23d14:	cmp	r2, #122	; 0x7a
   23d18:	bne	2456c <__assert_fail@plt+0x124e0>
   23d1c:	add	sl, sl, r6
   23d20:	ldr	r3, [sp, #72]	; 0x48
   23d24:	ldr	r2, [r3, #32]
   23d28:	cmp	r2, #0
   23d2c:	blt	24b18 <__assert_fail@plt+0x12a8c>
   23d30:	str	lr, [sp, #76]	; 0x4c
   23d34:	ldr	lr, [r3, #36]	; 0x24
   23d38:	cmp	lr, #0
   23d3c:	blt	249d8 <__assert_fail@plt+0x1294c>
   23d40:	ldr	ip, [sp, #84]	; 0x54
   23d44:	mov	r2, #0
   23d48:	bne	249e0 <__assert_fail@plt+0x12954>
   23d4c:	ldr	r2, [sp, #36]	; 0x24
   23d50:	ldrb	r2, [r2]
   23d54:	sub	r2, r2, #45	; 0x2d
   23d58:	clz	r2, r2
   23d5c:	lsr	r2, r2, #5
   23d60:	cmp	r6, #3
   23d64:	bls	249e8 <__assert_fail@plt+0x1295c>
   23d68:	ldr	lr, [sp, #76]	; 0x4c
   23d6c:	b	24570 <__assert_fail@plt+0x124e4>
   23d70:	cmp	r0, #0
   23d74:	bne	2456c <__assert_fail@plt+0x124e0>
   23d78:	ldr	r1, [sp, #92]	; 0x5c
   23d7c:	mov	r6, #0
   23d80:	orr	r1, r7, r1
   23d84:	str	r1, [sp, #92]	; 0x5c
   23d88:	mov	r1, #65	; 0x41
   23d8c:	b	24a6c <__assert_fail@plt+0x129e0>
   23d90:	cmp	r0, #69	; 0x45
   23d94:	beq	2456c <__assert_fail@plt+0x124e0>
   23d98:	ldr	r1, [sp, #92]	; 0x5c
   23d9c:	mov	r6, #0
   23da0:	orr	r1, r7, r1
   23da4:	str	r1, [sp, #92]	; 0x5c
   23da8:	mov	r1, #66	; 0x42
   23dac:	b	24a6c <__assert_fail@plt+0x129e0>
   23db0:	cmp	r0, #69	; 0x45
   23db4:	bne	248d4 <__assert_fail@plt+0x12848>
   23db8:	mov	r6, #0
   23dbc:	mov	r1, #67	; 0x43
   23dc0:	b	24a6c <__assert_fail@plt+0x129e0>
   23dc4:	cmp	r0, #0
   23dc8:	bne	2456c <__assert_fail@plt+0x124e0>
   23dcc:	movw	r4, #56964	; 0xde84
   23dd0:	movt	r4, #2
   23dd4:	b	23f9c <__assert_fail@plt+0x11f10>
   23dd8:	cmp	r0, #0
   23ddc:	bne	2456c <__assert_fail@plt+0x124e0>
   23de0:	movw	r4, #56973	; 0xde8d
   23de4:	cmp	r5, #0
   23de8:	movt	r4, #2
   23dec:	bne	2348c <__assert_fail@plt+0x11400>
   23df0:	cmp	r9, #0
   23df4:	bge	2348c <__assert_fail@plt+0x11400>
   23df8:	mov	r5, #43	; 0x2b
   23dfc:	mov	r8, #4
   23e00:	b	23f9c <__assert_fail@plt+0x11f10>
   23e04:	cmp	r0, #69	; 0x45
   23e08:	beq	2456c <__assert_fail@plt+0x124e0>
   23e0c:	ldr	r2, [sp, #48]	; 0x30
   23e10:	ldr	r3, [r2]
   23e14:	b	2420c <__assert_fail@plt+0x12180>
   23e18:	cmp	r0, #69	; 0x45
   23e1c:	beq	2456c <__assert_fail@plt+0x124e0>
   23e20:	ldr	r3, [sp, #44]	; 0x2c
   23e24:	b	2420c <__assert_fail@plt+0x12180>
   23e28:	cmp	r0, #69	; 0x45
   23e2c:	beq	2456c <__assert_fail@plt+0x124e0>
   23e30:	ldr	r2, [sp, #72]	; 0x48
   23e34:	ldr	r3, [r2, #4]
   23e38:	b	2420c <__assert_fail@plt+0x12180>
   23e3c:	cmp	r0, #69	; 0x45
   23e40:	beq	2456c <__assert_fail@plt+0x124e0>
   23e44:	ldr	r0, [fp, #24]
   23e48:	cmp	r9, #1
   23e4c:	mov	r4, #9
   23e50:	mov	r7, #8
   23e54:	movwlt	r9, #9
   23e58:	cmp	r9, r4
   23e5c:	bge	23e84 <__assert_fail@plt+0x11df8>
   23e60:	movw	r1, #26215	; 0x6667
   23e64:	sub	r7, r7, #1
   23e68:	sub	r4, r4, #1
   23e6c:	movt	r1, #26214	; 0x6666
   23e70:	smmul	r0, r0, r1
   23e74:	asr	r1, r0, #2
   23e78:	add	r0, r1, r0, lsr #31
   23e7c:	cmp	r9, r4
   23e80:	blt	23e60 <__assert_fail@plt+0x11dd4>
   23e84:	movw	r1, #26215	; 0x6667
   23e88:	cmp	r4, #2
   23e8c:	movt	r1, #26214	; 0x6666
   23e90:	blt	23eb0 <__assert_fail@plt+0x11e24>
   23e94:	smmul	r2, r0, r1
   23e98:	asr	r3, r2, #2
   23e9c:	add	r2, r3, r2, lsr #31
   23ea0:	add	r2, r2, r2, lsl #2
   23ea4:	sub	r2, r0, r2, lsl #1
   23ea8:	cmp	r2, #0
   23eac:	beq	23e60 <__assert_fail@plt+0x11dd4>
   23eb0:	cmp	r4, #1
   23eb4:	mov	r2, r7
   23eb8:	sub	ip, fp, #48	; 0x30
   23ebc:	blt	23ef4 <__assert_fail@plt+0x11e68>
   23ec0:	smmul	r3, r0, r1
   23ec4:	asr	r6, r3, #2
   23ec8:	add	r3, r6, r3, lsr #31
   23ecc:	add	r6, r3, r3, lsl #2
   23ed0:	sub	r0, r0, r6, lsl #1
   23ed4:	add	r0, r0, #48	; 0x30
   23ed8:	strb	r0, [ip, r2]
   23edc:	sub	r0, r2, #1
   23ee0:	add	r2, r2, #1
   23ee4:	cmp	r2, #1
   23ee8:	mov	r2, r0
   23eec:	mov	r0, r3
   23ef0:	bgt	23ec0 <__assert_fail@plt+0x11e34>
   23ef4:	ldr	r0, [sp, #88]	; 0x58
   23ef8:	cmp	r5, #0
   23efc:	movweq	r5, #48	; 0x30
   23f00:	sub	r8, r0, lr
   23f04:	cmp	r4, r8
   23f08:	bcs	24cd8 <__assert_fail@plt+0x12c4c>
   23f0c:	ldr	r6, [sp, #84]	; 0x54
   23f10:	mov	ip, #0
   23f14:	cmp	r6, #0
   23f18:	beq	2356c <__assert_fail@plt+0x114e0>
   23f1c:	ldr	r0, [sp, #92]	; 0x5c
   23f20:	tst	r0, #1
   23f24:	beq	23550 <__assert_fail@plt+0x114c4>
   23f28:	cmp	r4, #0
   23f2c:	beq	23568 <__assert_fail@plt+0x114dc>
   23f30:	str	lr, [sp, #76]	; 0x4c
   23f34:	bl	11e4c <__ctype_toupper_loc@plt>
   23f38:	ldr	lr, [sp, #76]	; 0x4c
   23f3c:	sub	r3, fp, #48	; 0x30
   23f40:	ldrb	r1, [r3, r7]
   23f44:	ldr	r2, [r0]
   23f48:	ldr	r1, [r2, r1, lsl #2]
   23f4c:	strb	r1, [r6, r7]
   23f50:	sub	r7, r7, #1
   23f54:	cmn	r7, #1
   23f58:	bne	23f40 <__assert_fail@plt+0x11eb4>
   23f5c:	b	23568 <__assert_fail@plt+0x114dc>
   23f60:	mov	r6, #1
   23f64:	ldr	r2, [sp, #92]	; 0x5c
   23f68:	eor	r1, r7, #1
   23f6c:	orr	r6, r7, r6
   23f70:	and	r2, r2, r1
   23f74:	mov	r1, #112	; 0x70
   23f78:	str	r2, [sp, #92]	; 0x5c
   23f7c:	b	24a6c <__assert_fail@plt+0x129e0>
   23f80:	cmp	r0, #69	; 0x45
   23f84:	beq	2456c <__assert_fail@plt+0x124e0>
   23f88:	ldr	r2, [sp, #72]	; 0x48
   23f8c:	ldr	r3, [r2]
   23f90:	b	2420c <__assert_fail@plt+0x12180>
   23f94:	movw	r4, #56982	; 0xde96
   23f98:	movt	r4, #2
   23f9c:	ldr	r0, [sp, #92]	; 0x5c
   23fa0:	mvn	r1, #0
   23fa4:	mov	r2, r4
   23fa8:	and	r0, r0, #1
   23fac:	str	r0, [sp, #92]	; 0x5c
   23fb0:	stm	sp, {r0, r5, r8}
   23fb4:	ldr	r0, [fp, #20]
   23fb8:	str	lr, [sp, #76]	; 0x4c
   23fbc:	ldr	r3, [sp, #72]	; 0x48
   23fc0:	str	r0, [sp, #12]
   23fc4:	ldr	r0, [fp, #24]
   23fc8:	str	r0, [sp, #16]
   23fcc:	mov	r0, #0
   23fd0:	bl	23398 <__assert_fail@plt+0x1130c>
   23fd4:	mov	r7, r0
   23fd8:	subs	r0, r5, #45	; 0x2d
   23fdc:	ldr	lr, [sp, #76]	; 0x4c
   23fe0:	ldr	r1, [sp, #88]	; 0x58
   23fe4:	movne	r0, r9
   23fe8:	cmp	r9, #0
   23fec:	mov	r6, r7
   23ff0:	movwlt	r0, #0
   23ff4:	cmp	r0, r7
   23ff8:	movhi	r6, r0
   23ffc:	sub	r9, r1, lr
   24000:	cmp	r6, r9
   24004:	bcs	24cd8 <__assert_fail@plt+0x12c4c>
   24008:	ldr	ip, [sp, #84]	; 0x54
   2400c:	cmp	ip, #0
   24010:	beq	24744 <__assert_fail@plt+0x126b8>
   24014:	cmp	r0, r7
   24018:	bls	246a4 <__assert_fail@plt+0x12618>
   2401c:	cmp	r5, #48	; 0x30
   24020:	sub	r2, r0, r7
   24024:	cmpne	r5, #43	; 0x2b
   24028:	str	r2, [sp, #80]	; 0x50
   2402c:	bne	24c3c <__assert_fail@plt+0x12bb0>
   24030:	mov	r0, ip
   24034:	mov	r1, #48	; 0x30
   24038:	b	24c44 <__assert_fail@plt+0x12bb8>
   2403c:	cmp	r0, #69	; 0x45
   24040:	beq	2456c <__assert_fail@plt+0x124e0>
   24044:	ldr	r3, [sp, #72]	; 0x48
   24048:	ldr	r2, [r3, #24]
   2404c:	ldr	r3, [r3, #28]
   24050:	add	r3, r3, #7
   24054:	sub	r2, r3, r2
   24058:	movw	r3, #9363	; 0x2493
   2405c:	movt	r3, #37449	; 0x9249
   24060:	smmla	r2, r2, r3, r2
   24064:	b	240a8 <__assert_fail@plt+0x1201c>
   24068:	cmp	r0, #69	; 0x45
   2406c:	beq	2456c <__assert_fail@plt+0x124e0>
   24070:	ldr	r3, [sp, #72]	; 0x48
   24074:	movw	r7, #9363	; 0x2493
   24078:	movt	r7, #37449	; 0x9249
   2407c:	ldr	r2, [r3, #24]
   24080:	ldr	r3, [r3, #28]
   24084:	add	r2, r2, #6
   24088:	smmla	r6, r2, r7, r2
   2408c:	asr	r4, r6, #2
   24090:	add	r6, r4, r6, lsr #31
   24094:	rsb	r6, r6, r6, lsl #3
   24098:	sub	r2, r6, r2
   2409c:	add	r2, r3, r2
   240a0:	add	r2, r2, #7
   240a4:	smmla	r2, r2, r7, r2
   240a8:	asr	r3, r2, #2
   240ac:	add	r3, r3, r2, lsr #31
   240b0:	b	2420c <__assert_fail@plt+0x12180>
   240b4:	cmp	r0, #79	; 0x4f
   240b8:	beq	2456c <__assert_fail@plt+0x124e0>
   240bc:	mov	r6, #0
   240c0:	mov	r1, #88	; 0x58
   240c4:	b	24a6c <__assert_fail@plt+0x129e0>
   240c8:	cmp	r0, #69	; 0x45
   240cc:	beq	24a64 <__assert_fail@plt+0x129d8>
   240d0:	cmp	r0, #79	; 0x4f
   240d4:	beq	2456c <__assert_fail@plt+0x124e0>
   240d8:	ldr	r2, [sp, #72]	; 0x48
   240dc:	movw	r7, #63636	; 0xf894
   240e0:	movt	r7, #65535	; 0xffff
   240e4:	ldr	r3, [r2, #20]
   240e8:	mov	r2, #0
   240ec:	cmp	r3, r7
   240f0:	movw	r7, #1900	; 0x76c
   240f4:	add	r3, r3, r7
   240f8:	movwlt	r2, #1
   240fc:	mov	r7, #4
   24100:	b	24924 <__assert_fail@plt+0x12898>
   24104:	ldr	r0, [sp, #36]	; 0x24
   24108:	ldr	r8, [sp, #92]	; 0x5c
   2410c:	subs	r6, r5, #45	; 0x2d
   24110:	str	lr, [sp, #76]	; 0x4c
   24114:	bicne	r6, r9, r9, asr #31
   24118:	bl	11eac <strlen@plt>
   2411c:	ldr	lr, [sp, #76]	; 0x4c
   24120:	mov	r9, r0
   24124:	cmp	r6, r0
   24128:	mov	r4, r0
   2412c:	ldr	r0, [sp, #88]	; 0x58
   24130:	movhi	r4, r6
   24134:	sub	r0, r0, lr
   24138:	cmp	r4, r0
   2413c:	bcs	24cd8 <__assert_fail@plt+0x12c4c>
   24140:	ldr	r0, [sp, #84]	; 0x54
   24144:	cmp	r0, #0
   24148:	beq	249d0 <__assert_fail@plt+0x12944>
   2414c:	cmp	r6, r9
   24150:	mov	ip, r0
   24154:	bls	235cc <__assert_fail@plt+0x11540>
   24158:	uxtb	r1, r5
   2415c:	sub	r2, r6, r9
   24160:	cmp	r1, #48	; 0x30
   24164:	cmpne	r1, #43	; 0x2b
   24168:	bne	235b4 <__assert_fail@plt+0x11528>
   2416c:	mov	r1, #48	; 0x30
   24170:	b	235b8 <__assert_fail@plt+0x1152c>
   24174:	cmp	r0, #0
   24178:	bne	2456c <__assert_fail@plt+0x124e0>
   2417c:	ldr	r1, [sp, #92]	; 0x5c
   24180:	mov	r6, #0
   24184:	orr	r1, r7, r1
   24188:	str	r1, [sp, #92]	; 0x5c
   2418c:	mov	r1, #97	; 0x61
   24190:	b	24a6c <__assert_fail@plt+0x129e0>
   24194:	cmp	r0, #79	; 0x4f
   24198:	beq	2456c <__assert_fail@plt+0x124e0>
   2419c:	mov	r6, #0
   241a0:	mov	r1, #99	; 0x63
   241a4:	b	24a6c <__assert_fail@plt+0x129e0>
   241a8:	cmp	r0, #69	; 0x45
   241ac:	beq	2456c <__assert_fail@plt+0x124e0>
   241b0:	ldr	r2, [sp, #40]	; 0x28
   241b4:	ldr	r3, [r2]
   241b8:	b	2420c <__assert_fail@plt+0x12180>
   241bc:	ldr	r2, [sp, #40]	; 0x28
   241c0:	cmp	r0, #69	; 0x45
   241c4:	bne	241f0 <__assert_fail@plt+0x12164>
   241c8:	b	2456c <__assert_fail@plt+0x124e0>
   241cc:	cmp	r0, #69	; 0x45
   241d0:	beq	2456c <__assert_fail@plt+0x124e0>
   241d4:	ldr	r2, [sp, #72]	; 0x48
   241d8:	mov	r7, #3
   241dc:	ldr	r3, [r2, #28]
   241e0:	b	24354 <__assert_fail@plt+0x122c8>
   241e4:	ldr	r2, [sp, #48]	; 0x30
   241e8:	cmp	r0, #69	; 0x45
   241ec:	beq	2456c <__assert_fail@plt+0x124e0>
   241f0:	ldr	r3, [r2]
   241f4:	b	24204 <__assert_fail@plt+0x12178>
   241f8:	ldr	r3, [sp, #44]	; 0x2c
   241fc:	cmp	r0, #69	; 0x45
   24200:	beq	2456c <__assert_fail@plt+0x124e0>
   24204:	cmp	r5, #0
   24208:	movweq	r5, #95	; 0x5f
   2420c:	mov	r2, #2
   24210:	str	r2, [sp, #80]	; 0x50
   24214:	ldr	ip, [sp, #84]	; 0x54
   24218:	lsr	r2, r3, #31
   2421c:	cmp	r2, #0
   24220:	mov	r7, #0
   24224:	mov	r4, #0
   24228:	movwne	r2, #1
   2422c:	cmp	r0, #79	; 0x4f
   24230:	moveq	r6, #0
   24234:	cmpeq	r2, #0
   24238:	beq	24a6c <__assert_fail@plt+0x129e0>
   2423c:	ldr	r8, [sp, #64]	; 0x40
   24240:	cmp	r2, #0
   24244:	rsbne	r3, r3, #0
   24248:	tst	r7, #1
   2424c:	asr	r7, r7, #1
   24250:	movne	r0, #58	; 0x3a
   24254:	strbne	r0, [r8, #-1]!
   24258:	movw	r0, #52429	; 0xcccd
   2425c:	cmp	r3, #9
   24260:	movt	r0, #52428	; 0xcccc
   24264:	umull	r0, r1, r3, r0
   24268:	lsr	r0, r1, #3
   2426c:	add	r1, r0, r0, lsl #2
   24270:	sub	r1, r3, r1, lsl #1
   24274:	mov	r3, r0
   24278:	orr	r1, r1, #48	; 0x30
   2427c:	strb	r1, [r8, #-1]!
   24280:	bhi	24248 <__assert_fail@plt+0x121bc>
   24284:	cmp	r7, #0
   24288:	mov	r3, r0
   2428c:	bne	24248 <__assert_fail@plt+0x121bc>
   24290:	ldr	r3, [sp, #80]	; 0x50
   24294:	cmp	r9, #0
   24298:	movge	r3, r9
   2429c:	cmp	r4, #0
   242a0:	movwne	r4, #43	; 0x2b
   242a4:	cmp	r5, #0
   242a8:	movweq	r5, #48	; 0x30
   242ac:	ldr	r1, [sp, #64]	; 0x40
   242b0:	cmp	r2, #0
   242b4:	mov	r0, r3
   242b8:	movwne	r4, #45	; 0x2d
   242bc:	cmp	r4, #0
   242c0:	subne	r0, r0, #1
   242c4:	sub	r9, r1, r8
   242c8:	sub	r6, r0, r9
   242cc:	mov	r0, r4
   242d0:	cmp	r6, #1
   242d4:	movwlt	r6, #0
   242d8:	subs	r4, r5, #45	; 0x2d
   242dc:	moveq	r6, r4
   242e0:	cmp	r0, #0
   242e4:	beq	24330 <__assert_fail@plt+0x122a4>
   242e8:	mov	r7, r0
   242ec:	cmp	r5, #95	; 0x5f
   242f0:	bne	24338 <__assert_fail@plt+0x122ac>
   242f4:	cmp	ip, #0
   242f8:	beq	246b0 <__assert_fail@plt+0x12624>
   242fc:	mov	r0, ip
   24300:	mov	r1, #32
   24304:	mov	r2, r6
   24308:	str	sl, [sp, #80]	; 0x50
   2430c:	str	lr, [sp, #76]	; 0x4c
   24310:	mov	sl, r3
   24314:	bl	11ef4 <memset@plt>
   24318:	ldr	ip, [sp, #84]	; 0x54
   2431c:	mov	r3, sl
   24320:	ldr	lr, [sp, #76]	; 0x4c
   24324:	ldr	sl, [sp, #80]	; 0x50
   24328:	add	ip, ip, r6
   2432c:	b	246b4 <__assert_fail@plt+0x12628>
   24330:	ldr	r1, [sp, #92]	; 0x5c
   24334:	b	246e4 <__assert_fail@plt+0x12658>
   24338:	ldr	r1, [sp, #92]	; 0x5c
   2433c:	b	246c0 <__assert_fail@plt+0x12634>
   24340:	cmp	r0, #69	; 0x45
   24344:	beq	2456c <__assert_fail@plt+0x124e0>
   24348:	ldr	r2, [sp, #72]	; 0x48
   2434c:	mov	r7, #2
   24350:	ldr	r3, [r2, #16]
   24354:	mov	r2, #0
   24358:	cmn	r3, #1
   2435c:	add	r3, r3, #1
   24360:	movwlt	r2, #1
   24364:	ldr	ip, [sp, #84]	; 0x54
   24368:	str	r7, [sp, #80]	; 0x50
   2436c:	b	2421c <__assert_fail@plt+0x12190>
   24370:	ldr	r1, [sp, #88]	; 0x58
   24374:	subs	r0, r5, #45	; 0x2d
   24378:	bicne	r0, r9, r9, asr #31
   2437c:	cmp	r0, #1
   24380:	mov	r6, r0
   24384:	movls	r6, #1
   24388:	sub	r1, r1, lr
   2438c:	cmp	r6, r1
   24390:	bcs	24cd8 <__assert_fail@plt+0x12c4c>
   24394:	ldr	ip, [sp, #84]	; 0x54
   24398:	mov	r4, #-2147483648	; 0x80000000
   2439c:	cmp	ip, #0
   243a0:	beq	2474c <__assert_fail@plt+0x126c0>
   243a4:	cmp	r0, #2
   243a8:	bcc	236d0 <__assert_fail@plt+0x11644>
   243ac:	uxtb	r1, r5
   243b0:	sub	r4, r0, #1
   243b4:	cmp	r1, #48	; 0x30
   243b8:	cmpne	r1, #43	; 0x2b
   243bc:	bne	236a8 <__assert_fail@plt+0x1161c>
   243c0:	mov	r0, ip
   243c4:	mov	r1, #48	; 0x30
   243c8:	b	236b0 <__assert_fail@plt+0x11624>
   243cc:	ldr	r2, [sp, #72]	; 0x48
   243d0:	ldr	ip, [sp, #84]	; 0x54
   243d4:	mov	r3, #11
   243d8:	mov	r7, #1
   243dc:	ldr	r2, [r2, #16]
   243e0:	mul	r2, r2, r3
   243e4:	mov	r3, #1
   243e8:	str	r3, [sp, #80]	; 0x50
   243ec:	add	r3, r7, r2, asr #5
   243f0:	mov	r2, #0
   243f4:	b	2421c <__assert_fail@plt+0x12190>
   243f8:	ldr	r2, [sp, #72]	; 0x48
   243fc:	mov	r0, #28
   24400:	add	r1, sp, #96	; 0x60
   24404:	str	lr, [sp, #76]	; 0x4c
   24408:	mov	r4, r1
   2440c:	mov	r3, r2
   24410:	add	r2, r2, #16
   24414:	vld1.32	{d16-d17}, [r3], r0
   24418:	vld1.32	{d18-d19}, [r2]
   2441c:	add	r2, r1, #16
   24420:	vld1.32	{d20-d21}, [r3]
   24424:	vst1.64	{d16-d17}, [r4], r0
   24428:	mvn	r0, #0
   2442c:	vst1.64	{d18-d19}, [r2]
   24430:	vst1.32	{d20-d21}, [r4]
   24434:	str	r0, [r4]
   24438:	ldr	r0, [fp, #20]
   2443c:	bl	2765c <_obstack_memory_used@@Base+0x25e8>
   24440:	ldr	r1, [r4]
   24444:	cmp	r1, #0
   24448:	blt	24cf4 <__assert_fail@plt+0x12c68>
   2444c:	ldr	r1, [sp, #24]
   24450:	lsr	r2, r0, #31
   24454:	mov	r3, r0
   24458:	movw	r7, #26215	; 0x6667
   2445c:	cmp	r0, #0
   24460:	movt	r7, #26214	; 0x6666
   24464:	smmul	r7, r3, r7
   24468:	asr	r6, r7, #2
   2446c:	add	r7, r6, r7, lsr #31
   24470:	add	r6, r7, r7, lsl #2
   24474:	sub	r6, r3, r6, lsl #1
   24478:	add	r3, r3, #9
   2447c:	rsblt	r6, r6, #0
   24480:	cmp	r3, #18
   24484:	mov	r3, r7
   24488:	add	r6, r6, #48	; 0x30
   2448c:	strb	r6, [r1], #-1
   24490:	bhi	24458 <__assert_fail@plt+0x123cc>
   24494:	ldr	lr, [sp, #76]	; 0x4c
   24498:	ldr	ip, [sp, #84]	; 0x54
   2449c:	cmp	r9, #0
   244a0:	add	r8, r1, #1
   244a4:	mov	r4, #0
   244a8:	movwlt	r9, #1
   244ac:	cmp	r5, #0
   244b0:	movweq	r5, #48	; 0x30
   244b4:	mov	r3, r9
   244b8:	b	242ac <__assert_fail@plt+0x12220>
   244bc:	ldr	r1, [sp, #88]	; 0x58
   244c0:	subs	r0, r5, #45	; 0x2d
   244c4:	bicne	r0, r9, r9, asr #31
   244c8:	cmp	r0, #1
   244cc:	mov	r6, r0
   244d0:	movls	r6, #1
   244d4:	sub	r1, r1, lr
   244d8:	cmp	r6, r1
   244dc:	bcs	24cd8 <__assert_fail@plt+0x12c4c>
   244e0:	ldr	ip, [sp, #84]	; 0x54
   244e4:	mov	r4, #-2147483648	; 0x80000000
   244e8:	cmp	ip, #0
   244ec:	beq	2474c <__assert_fail@plt+0x126c0>
   244f0:	cmp	r0, #2
   244f4:	bcc	23700 <__assert_fail@plt+0x11674>
   244f8:	uxtb	r1, r5
   244fc:	sub	r4, r0, #1
   24500:	cmp	r1, #48	; 0x30
   24504:	cmpne	r1, #43	; 0x2b
   24508:	bne	236d8 <__assert_fail@plt+0x1164c>
   2450c:	mov	r0, ip
   24510:	mov	r1, #48	; 0x30
   24514:	b	236e0 <__assert_fail@plt+0x11654>
   24518:	ldr	r2, [sp, #72]	; 0x48
   2451c:	movw	r3, #9363	; 0x2493
   24520:	movt	r3, #37449	; 0x9249
   24524:	ldr	r2, [r2, #24]
   24528:	add	r2, r2, #6
   2452c:	smmla	r3, r2, r3, r2
   24530:	asr	r7, r3, #2
   24534:	add	r3, r7, r3, lsr #31
   24538:	rsb	r3, r3, r3, lsl #3
   2453c:	sub	r2, r2, r3
   24540:	add	r3, r2, #1
   24544:	mov	r2, #1
   24548:	b	24210 <__assert_fail@plt+0x12184>
   2454c:	cmp	r0, #69	; 0x45
   24550:	beq	2456c <__assert_fail@plt+0x124e0>
   24554:	ldr	r2, [sp, #72]	; 0x48
   24558:	ldr	r3, [r2, #24]
   2455c:	mov	r2, #1
   24560:	b	24210 <__assert_fail@plt+0x12184>
   24564:	cmp	r0, #79	; 0x4f
   24568:	bne	24930 <__assert_fail@plt+0x128a4>
   2456c:	ldr	ip, [sp, #84]	; 0x54
   24570:	mov	r8, sl
   24574:	ldr	r1, [sp, #80]	; 0x50
   24578:	subs	r7, r5, #45	; 0x2d
   2457c:	bicne	r7, r9, r9, asr #31
   24580:	sub	r0, r8, r1
   24584:	add	r6, r0, #1
   24588:	ldr	r0, [sp, #88]	; 0x58
   2458c:	cmp	r7, r6
   24590:	mov	r4, r6
   24594:	movhi	r4, r7
   24598:	sub	r0, r0, lr
   2459c:	cmp	r4, r0
   245a0:	bcs	24cd8 <__assert_fail@plt+0x12c4c>
   245a4:	cmp	ip, #0
   245a8:	beq	245dc <__assert_fail@plt+0x12550>
   245ac:	cmp	r7, r6
   245b0:	mov	r9, ip
   245b4:	bls	24608 <__assert_fail@plt+0x1257c>
   245b8:	uxtb	r0, r5
   245bc:	mov	sl, lr
   245c0:	sub	r9, r7, r6
   245c4:	cmp	r0, #48	; 0x30
   245c8:	cmpne	r0, #43	; 0x2b
   245cc:	bne	245e4 <__assert_fail@plt+0x12558>
   245d0:	mov	r0, ip
   245d4:	mov	r1, #48	; 0x30
   245d8:	b	245ec <__assert_fail@plt+0x12560>
   245dc:	mov	ip, #0
   245e0:	b	24680 <__assert_fail@plt+0x125f4>
   245e4:	mov	r0, ip
   245e8:	mov	r1, #32
   245ec:	mov	r2, r9
   245f0:	mov	r5, ip
   245f4:	bl	11ef4 <memset@plt>
   245f8:	ldr	r1, [sp, #80]	; 0x50
   245fc:	add	r9, r5, r9
   24600:	mov	lr, sl
   24604:	mov	ip, r5
   24608:	ldr	r0, [sp, #92]	; 0x5c
   2460c:	tst	r0, #1
   24610:	beq	24668 <__assert_fail@plt+0x125dc>
   24614:	cmp	r6, #0
   24618:	beq	2467c <__assert_fail@plt+0x125f0>
   2461c:	add	r0, r8, #1
   24620:	sub	r5, r1, r8
   24624:	mov	sl, lr
   24628:	sub	r0, r0, r1
   2462c:	cmp	r7, r0
   24630:	movhi	r0, r7
   24634:	add	r0, ip, r0
   24638:	sub	r7, r0, #1
   2463c:	bl	11e4c <__ctype_toupper_loc@plt>
   24640:	ldr	r3, [sp, #80]	; 0x50
   24644:	mov	lr, sl
   24648:	ldrb	r1, [r3, -r5]
   2464c:	ldr	r2, [r0]
   24650:	add	r5, r5, #1
   24654:	cmp	r5, #1
   24658:	ldr	r1, [r2, r1, lsl #2]
   2465c:	strb	r1, [r7], #-1
   24660:	bne	24648 <__assert_fail@plt+0x125bc>
   24664:	b	2467c <__assert_fail@plt+0x125f0>
   24668:	mov	r0, r9
   2466c:	mov	r2, r6
   24670:	mov	r5, lr
   24674:	bl	11c60 <memcpy@plt>
   24678:	mov	lr, r5
   2467c:	add	ip, r9, r6
   24680:	add	lr, r4, lr
   24684:	mov	sl, r8
   24688:	mov	r4, #-2147483648	; 0x80000000
   2468c:	b	24c9c <__assert_fail@plt+0x12c10>
   24690:	cmp	r0, #69	; 0x45
   24694:	bne	2493c <__assert_fail@plt+0x128b0>
   24698:	mov	r6, #0
   2469c:	mov	r1, #121	; 0x79
   246a0:	b	24a6c <__assert_fail@plt+0x129e0>
   246a4:	ldr	r3, [sp, #72]	; 0x48
   246a8:	ldr	r0, [sp, #92]	; 0x5c
   246ac:	b	24c60 <__assert_fail@plt+0x12bd4>
   246b0:	mov	ip, #0
   246b4:	ldr	r1, [sp, #92]	; 0x5c
   246b8:	sub	r3, r3, r6
   246bc:	add	lr, r6, lr
   246c0:	ldr	r0, [sp, #88]	; 0x58
   246c4:	sub	r0, r0, lr
   246c8:	cmp	r0, #2
   246cc:	bcc	24cd8 <__assert_fail@plt+0x12c4c>
   246d0:	cmp	ip, #0
   246d4:	sub	r3, r3, #1
   246d8:	add	lr, lr, #1
   246dc:	strbne	r7, [ip], #1
   246e0:	moveq	ip, #0
   246e4:	ldr	r0, [sp, #88]	; 0x58
   246e8:	cmp	r5, #45	; 0x2d
   246ec:	mov	r6, r9
   246f0:	bicne	r4, r3, r3, asr #31
   246f4:	cmp	r4, r9
   246f8:	movhi	r6, r4
   246fc:	sub	r0, r0, lr
   24700:	cmp	r6, r0
   24704:	bcs	24cd8 <__assert_fail@plt+0x12c4c>
   24708:	cmp	ip, #0
   2470c:	beq	24744 <__assert_fail@plt+0x126b8>
   24710:	str	sl, [sp, #80]	; 0x50
   24714:	cmp	r4, r9
   24718:	mov	sl, ip
   2471c:	bls	24778 <__assert_fail@plt+0x126ec>
   24720:	cmp	r5, #48	; 0x30
   24724:	mov	r7, lr
   24728:	sub	sl, r4, r9
   2472c:	str	r1, [sp, #92]	; 0x5c
   24730:	cmpne	r5, #43	; 0x2b
   24734:	bne	24754 <__assert_fail@plt+0x126c8>
   24738:	mov	r0, ip
   2473c:	mov	r1, #48	; 0x30
   24740:	b	2475c <__assert_fail@plt+0x126d0>
   24744:	mov	ip, #0
   24748:	b	24c94 <__assert_fail@plt+0x12c08>
   2474c:	mov	ip, #0
   24750:	b	24c98 <__assert_fail@plt+0x12c0c>
   24754:	mov	r0, ip
   24758:	mov	r1, #32
   2475c:	mov	r2, sl
   24760:	mov	r5, ip
   24764:	bl	11ef4 <memset@plt>
   24768:	ldr	r1, [sp, #92]	; 0x5c
   2476c:	add	sl, r5, sl
   24770:	mov	lr, r7
   24774:	mov	ip, r5
   24778:	tst	r1, #1
   2477c:	beq	247cc <__assert_fail@plt+0x12740>
   24780:	cmp	r9, #0
   24784:	beq	247e4 <__assert_fail@plt+0x12758>
   24788:	ldr	r0, [sp, #28]
   2478c:	cmp	r4, r9
   24790:	sub	r7, r8, #1
   24794:	movls	r4, r9
   24798:	add	r5, r0, r8
   2479c:	add	r0, ip, r4
   247a0:	mov	r8, lr
   247a4:	sub	r4, r0, #1
   247a8:	bl	11e4c <__ctype_toupper_loc@plt>
   247ac:	mov	lr, r8
   247b0:	ldrb	r1, [r7, -r5]
   247b4:	ldr	r2, [r0]
   247b8:	adds	r5, r5, #1
   247bc:	ldr	r1, [r2, r1, lsl #2]
   247c0:	strb	r1, [r4], #-1
   247c4:	bne	247b0 <__assert_fail@plt+0x12724>
   247c8:	b	247e4 <__assert_fail@plt+0x12758>
   247cc:	mov	r0, sl
   247d0:	mov	r1, r8
   247d4:	mov	r2, r9
   247d8:	mov	r4, lr
   247dc:	bl	11c60 <memcpy@plt>
   247e0:	mov	lr, r4
   247e4:	add	ip, sl, r9
   247e8:	ldr	sl, [sp, #80]	; 0x50
   247ec:	b	24c94 <__assert_fail@plt+0x12c08>
   247f0:	sub	r2, r2, #1
   247f4:	movw	r4, #365	; 0x16d
   247f8:	tst	r2, #3
   247fc:	bne	24840 <__assert_fail@plt+0x127b4>
   24800:	movw	r4, #34079	; 0x851f
   24804:	movt	r4, #20971	; 0x51eb
   24808:	smmul	r4, r2, r4
   2480c:	asr	r7, r4, #5
   24810:	add	r3, r7, r4, lsr #31
   24814:	mov	r7, #100	; 0x64
   24818:	mls	r3, r3, r7, r2
   2481c:	asr	r7, r4, #7
   24820:	add	r4, r7, r4, lsr #31
   24824:	mov	r7, #400	; 0x190
   24828:	mls	r2, r4, r7, r2
   2482c:	movw	r4, #365	; 0x16d
   24830:	cmp	r2, #0
   24834:	movweq	r4, #366	; 0x16e
   24838:	cmp	r3, #0
   2483c:	movwne	r4, #366	; 0x16e
   24840:	add	r2, r4, lr
   24844:	movw	r4, #382	; 0x17e
   24848:	mov	r7, r6
   2484c:	sub	r3, r4, r8
   24850:	add	r2, r3, r2
   24854:	smmla	r2, r2, r6, r2
   24858:	asr	r4, r2, #2
   2485c:	add	r2, r4, r2, lsr #31
   24860:	rsb	r2, r2, r2, lsl #3
   24864:	sub	r2, r2, r3
   24868:	mvn	r3, #0
   2486c:	add	r4, r2, #3
   24870:	ldr	ip, [sp, #84]	; 0x54
   24874:	ldr	lr, [sp, #80]	; 0x50
   24878:	cmp	r1, #71	; 0x47
   2487c:	beq	24980 <__assert_fail@plt+0x128f4>
   24880:	cmp	r1, #103	; 0x67
   24884:	bne	249b0 <__assert_fail@plt+0x12924>
   24888:	movw	r2, #34079	; 0x851f
   2488c:	movt	r2, #20971	; 0x51eb
   24890:	smmul	r7, lr, r2
   24894:	asr	r6, r7, #5
   24898:	add	r7, r6, r7, lsr #31
   2489c:	mov	r6, #100	; 0x64
   248a0:	mls	r7, r7, r6, lr
   248a4:	add	r7, r3, r7
   248a8:	smmul	r2, r7, r2
   248ac:	asr	r4, r2, #5
   248b0:	add	r2, r4, r2, lsr #31
   248b4:	mls	r7, r2, r6, r7
   248b8:	mov	r2, #2
   248bc:	str	r2, [sp, #80]	; 0x50
   248c0:	mov	r2, #0
   248c4:	cmn	r7, #1
   248c8:	ble	23498 <__assert_fail@plt+0x1140c>
   248cc:	mov	r3, r7
   248d0:	b	234b0 <__assert_fail@plt+0x11424>
   248d4:	ldr	r2, [sp, #72]	; 0x48
   248d8:	movw	r6, #63636	; 0xf894
   248dc:	mov	r3, #0
   248e0:	mvn	r4, #98	; 0x62
   248e4:	movt	r6, #65535	; 0xffff
   248e8:	ldr	r7, [r2, #20]
   248ec:	mov	r2, #0
   248f0:	cmp	r7, r6
   248f4:	movwge	r3, #1
   248f8:	cmp	r7, r6
   248fc:	and	r3, r3, r7, lsr #31
   24900:	movwlt	r2, #1
   24904:	smlabb	r3, r3, r4, r7
   24908:	movw	r4, #34079	; 0x851f
   2490c:	mov	r7, #2
   24910:	movt	r4, #20971	; 0x51eb
   24914:	smmul	r3, r3, r4
   24918:	asr	r4, r3, #5
   2491c:	add	r3, r4, r3, lsr #31
   24920:	add	r3, r3, #19
   24924:	ldr	ip, [sp, #84]	; 0x54
   24928:	str	r7, [sp, #80]	; 0x50
   2492c:	b	234b4 <__assert_fail@plt+0x11428>
   24930:	mov	r6, #0
   24934:	mov	r1, #120	; 0x78
   24938:	b	24a6c <__assert_fail@plt+0x129e0>
   2493c:	ldr	r2, [sp, #72]	; 0x48
   24940:	ldr	r7, [r2, #20]
   24944:	movw	r2, #34079	; 0x851f
   24948:	movt	r2, #20971	; 0x51eb
   2494c:	smmul	r2, r7, r2
   24950:	asr	r3, r2, #5
   24954:	add	r2, r3, r2, lsr #31
   24958:	mov	r3, #100	; 0x64
   2495c:	mls	r6, r2, r3, r7
   24960:	mov	r2, #0
   24964:	mov	r3, #2
   24968:	cmn	r6, #1
   2496c:	ble	23504 <__assert_fail@plt+0x11478>
   24970:	ldr	ip, [sp, #84]	; 0x54
   24974:	str	r3, [sp, #80]	; 0x50
   24978:	mov	r3, r6
   2497c:	b	234b4 <__assert_fail@plt+0x11428>
   24980:	movw	r2, #63636	; 0xf894
   24984:	movt	r2, #65535	; 0xffff
   24988:	sub	r7, r2, r3
   2498c:	add	r3, lr, r3
   24990:	mov	r2, #0
   24994:	cmp	lr, r7
   24998:	movw	r7, #1900	; 0x76c
   2499c:	add	r3, r3, r7
   249a0:	mov	r7, #4
   249a4:	movwlt	r2, #1
   249a8:	str	r7, [sp, #80]	; 0x50
   249ac:	b	234b0 <__assert_fail@plt+0x11424>
   249b0:	smmla	r2, r4, r7, r4
   249b4:	ldr	lr, [sp, #76]	; 0x4c
   249b8:	asr	r3, r2, #2
   249bc:	add	r2, r3, r2, lsr #31
   249c0:	add	r3, r2, #1
   249c4:	mov	r2, #2
   249c8:	str	r2, [sp, #80]	; 0x50
   249cc:	b	24218 <__assert_fail@plt+0x1218c>
   249d0:	mov	ip, #0
   249d4:	b	2369c <__assert_fail@plt+0x11610>
   249d8:	ldr	ip, [sp, #84]	; 0x54
   249dc:	mov	r2, #1
   249e0:	cmp	r6, #3
   249e4:	bhi	23d68 <__assert_fail@plt+0x11cdc>
   249e8:	mov	r8, ip
   249ec:	movw	ip, #34953	; 0x8889
   249f0:	movt	ip, #34952	; 0x8888
   249f4:	smmla	r4, lr, ip, lr
   249f8:	asr	r3, r4, #5
   249fc:	add	r4, r3, r4, lsr #31
   24a00:	smmla	r3, r4, ip, r4
   24a04:	asr	r7, r3, #5
   24a08:	add	r3, r7, r3, lsr #31
   24a0c:	rsb	r3, r3, r3, lsl #4
   24a10:	sub	ip, r4, r3, lsl #2
   24a14:	movw	r3, #46021	; 0xb3c5
   24a18:	rsb	r4, r4, r4, lsl #4
   24a1c:	movt	r3, #37282	; 0x91a2
   24a20:	smmla	r3, lr, r3, lr
   24a24:	asr	r7, r3, #11
   24a28:	add	r3, r7, r3, lsr #31
   24a2c:	sub	r7, lr, r4, lsl #2
   24a30:	add	r4, pc, #0
   24a34:	ldr	pc, [r4, r6, lsl #2]
   24a38:	andeq	r4, r2, r8, asr #20
   24a3c:	andeq	r3, r2, r4, lsl r7
   24a40:	andeq	r3, r2, ip, lsr #10
   24a44:	andeq	r3, r2, r4, lsr #10
   24a48:	mov	r7, #100	; 0x64
   24a4c:	mla	r3, r3, r7, ip
   24a50:	mov	r7, #5
   24a54:	str	r7, [sp, #80]	; 0x50
   24a58:	mov	r4, #1
   24a5c:	mov	r7, #0
   24a60:	b	2372c <__assert_fail@plt+0x116a0>
   24a64:	mov	r6, #0
   24a68:	mov	r1, #89	; 0x59
   24a6c:	movw	r2, #9504	; 0x2520
   24a70:	cmp	r0, #0
   24a74:	ldr	r3, [sp, #72]	; 0x48
   24a78:	str	lr, [sp, #76]	; 0x4c
   24a7c:	strh	r2, [fp, #-53]	; 0xffffffcb
   24a80:	ldr	r2, [sp, #68]	; 0x44
   24a84:	strbne	r0, [fp, #-51]	; 0xffffffcd
   24a88:	mov	r0, #0
   24a8c:	ldrne	r2, [sp, #52]	; 0x34
   24a90:	strb	r0, [r2, #1]
   24a94:	strb	r1, [r2]
   24a98:	add	r0, sp, #96	; 0x60
   24a9c:	sub	r2, fp, #53	; 0x35
   24aa0:	mov	r1, #1024	; 0x400
   24aa4:	bl	11e28 <strftime@plt>
   24aa8:	cmp	r0, #0
   24aac:	beq	24b14 <__assert_fail@plt+0x12a88>
   24ab0:	subs	r8, r5, #45	; 0x2d
   24ab4:	ldr	lr, [sp, #76]	; 0x4c
   24ab8:	movne	r8, r9
   24abc:	cmp	r9, #0
   24ac0:	sub	r9, r0, #1
   24ac4:	ldr	r0, [sp, #88]	; 0x58
   24ac8:	movwlt	r8, #0
   24acc:	mov	r7, r9
   24ad0:	cmp	r8, r9
   24ad4:	movhi	r7, r8
   24ad8:	sub	r0, r0, lr
   24adc:	cmp	r7, r0
   24ae0:	bcs	24cd8 <__assert_fail@plt+0x12c4c>
   24ae4:	ldr	r0, [sp, #84]	; 0x54
   24ae8:	cmp	r0, #0
   24aec:	beq	24b28 <__assert_fail@plt+0x12a9c>
   24af0:	cmp	r8, r9
   24af4:	mov	ip, r0
   24af8:	bls	24b54 <__assert_fail@plt+0x12ac8>
   24afc:	cmp	r5, #48	; 0x30
   24b00:	sub	r4, r8, r9
   24b04:	cmpne	r5, #43	; 0x2b
   24b08:	bne	24b38 <__assert_fail@plt+0x12aac>
   24b0c:	mov	r1, #48	; 0x30
   24b10:	b	24b3c <__assert_fail@plt+0x12ab0>
   24b14:	ldr	lr, [sp, #76]	; 0x4c
   24b18:	ldr	ip, [sp, #84]	; 0x54
   24b1c:	movw	r6, #52428	; 0xcccc
   24b20:	mov	r4, #-2147483648	; 0x80000000
   24b24:	b	24ca0 <__assert_fail@plt+0x12c14>
   24b28:	movw	r6, #52428	; 0xcccc
   24b2c:	mov	ip, #0
   24b30:	movt	r6, #3276	; 0xccc
   24b34:	b	24c30 <__assert_fail@plt+0x12ba4>
   24b38:	mov	r1, #32
   24b3c:	mov	r2, r4
   24b40:	mov	r5, r0
   24b44:	bl	11ef4 <memset@plt>
   24b48:	ldr	lr, [sp, #76]	; 0x4c
   24b4c:	add	ip, r5, r4
   24b50:	mov	r0, r5
   24b54:	tst	r6, #1
   24b58:	beq	24bb0 <__assert_fail@plt+0x12b24>
   24b5c:	movw	r6, #52428	; 0xcccc
   24b60:	cmp	r9, #0
   24b64:	movt	r6, #3276	; 0xccc
   24b68:	beq	24c2c <__assert_fail@plt+0x12ba0>
   24b6c:	cmp	r8, r9
   24b70:	mov	r4, ip
   24b74:	movls	r8, r9
   24b78:	add	r0, r0, r8
   24b7c:	sub	r5, r0, #1
   24b80:	bl	11e40 <__ctype_tolower_loc@plt>
   24b84:	ldr	lr, [sp, #76]	; 0x4c
   24b88:	mov	ip, r4
   24b8c:	add	r4, sp, #96	; 0x60
   24b90:	mov	r1, r9
   24b94:	ldrb	r2, [r4, r1]
   24b98:	ldr	r3, [r0]
   24b9c:	subs	r1, r1, #1
   24ba0:	ldr	r2, [r3, r2, lsl #2]
   24ba4:	strb	r2, [r5], #-1
   24ba8:	bne	24b94 <__assert_fail@plt+0x12b08>
   24bac:	b	24c2c <__assert_fail@plt+0x12ba0>
   24bb0:	ldr	r1, [sp, #92]	; 0x5c
   24bb4:	movw	r6, #52428	; 0xcccc
   24bb8:	movt	r6, #3276	; 0xccc
   24bbc:	tst	r1, #1
   24bc0:	beq	24c10 <__assert_fail@plt+0x12b84>
   24bc4:	cmp	r9, #0
   24bc8:	beq	24c2c <__assert_fail@plt+0x12ba0>
   24bcc:	cmp	r8, r9
   24bd0:	mov	r4, ip
   24bd4:	movls	r8, r9
   24bd8:	add	r0, r0, r8
   24bdc:	sub	r5, r0, #1
   24be0:	bl	11e4c <__ctype_toupper_loc@plt>
   24be4:	ldr	lr, [sp, #76]	; 0x4c
   24be8:	mov	ip, r4
   24bec:	add	r4, sp, #96	; 0x60
   24bf0:	mov	r1, r9
   24bf4:	ldrb	r2, [r4, r1]
   24bf8:	ldr	r3, [r0]
   24bfc:	subs	r1, r1, #1
   24c00:	ldr	r2, [r3, r2, lsl #2]
   24c04:	strb	r2, [r5], #-1
   24c08:	bne	24bf4 <__assert_fail@plt+0x12b68>
   24c0c:	b	24c2c <__assert_fail@plt+0x12ba0>
   24c10:	ldr	r1, [sp, #32]
   24c14:	mov	r0, ip
   24c18:	mov	r2, r9
   24c1c:	mov	r4, ip
   24c20:	bl	11c60 <memcpy@plt>
   24c24:	ldr	lr, [sp, #76]	; 0x4c
   24c28:	mov	ip, r4
   24c2c:	add	ip, ip, r9
   24c30:	add	lr, r7, lr
   24c34:	mov	r4, #-2147483648	; 0x80000000
   24c38:	b	24ca4 <__assert_fail@plt+0x12c18>
   24c3c:	mov	r0, ip
   24c40:	mov	r1, #32
   24c44:	ldr	r2, [sp, #80]	; 0x50
   24c48:	bl	11ef4 <memset@plt>
   24c4c:	ldr	r1, [sp, #80]	; 0x50
   24c50:	ldr	ip, [sp, #84]	; 0x54
   24c54:	ldr	r3, [sp, #72]	; 0x48
   24c58:	ldr	r0, [sp, #92]	; 0x5c
   24c5c:	add	ip, ip, r1
   24c60:	stm	sp, {r0, r5, r8}
   24c64:	ldr	r0, [fp, #20]
   24c68:	mov	r2, r4
   24c6c:	mov	r1, r9
   24c70:	mov	r4, ip
   24c74:	str	r0, [sp, #12]
   24c78:	ldr	r0, [fp, #24]
   24c7c:	str	r0, [sp, #16]
   24c80:	mov	r0, ip
   24c84:	bl	23398 <__assert_fail@plt+0x1130c>
   24c88:	ldr	lr, [sp, #76]	; 0x4c
   24c8c:	mov	ip, r4
   24c90:	add	ip, r4, r7
   24c94:	mov	r4, #-2147483648	; 0x80000000
   24c98:	add	lr, r6, lr
   24c9c:	movw	r6, #52428	; 0xcccc
   24ca0:	movt	r6, #3276	; 0xccc
   24ca4:	ldrb	r3, [sl, #1]!
   24ca8:	mvn	r9, #0
   24cac:	cmp	r3, #0
   24cb0:	bne	237ac <__assert_fail@plt+0x11720>
   24cb4:	ldr	r0, [sp, #88]	; 0x58
   24cb8:	ldr	r1, [sp, #56]	; 0x38
   24cbc:	cmp	r0, #0
   24cc0:	cmpne	ip, #0
   24cc4:	movne	r0, #0
   24cc8:	strbne	r0, [ip]
   24ccc:	ldr	r0, [sp, #60]	; 0x3c
   24cd0:	str	r1, [r0]
   24cd4:	b	24ce8 <__assert_fail@plt+0x12c5c>
   24cd8:	mov	r0, #34	; 0x22
   24cdc:	ldr	r1, [sp, #60]	; 0x3c
   24ce0:	mov	lr, #0
   24ce4:	str	r0, [r1]
   24ce8:	mov	r0, lr
   24cec:	sub	sp, fp, #28
   24cf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24cf4:	mov	r0, #75	; 0x4b
   24cf8:	b	24cdc <__assert_fail@plt+0x12c50>

00024cfc <_obstack_begin@@Base>:
   24cfc:	push	{r4, r5, r6, sl, fp, lr}
   24d00:	add	fp, sp, #16
   24d04:	cmp	r1, #0
   24d08:	mov	r4, r0
   24d0c:	str	r3, [r0, #28]
   24d10:	mov	r5, r2
   24d14:	movweq	r1, #4072	; 0xfe8
   24d18:	cmp	r2, #0
   24d1c:	str	r1, [r0]
   24d20:	ldr	r0, [fp, #8]
   24d24:	movweq	r5, #8
   24d28:	sub	r6, r5, #1
   24d2c:	str	r0, [r4, #32]
   24d30:	str	r6, [r4, #24]
   24d34:	ldrb	r0, [r4, #40]	; 0x28
   24d38:	and	r0, r0, #254	; 0xfe
   24d3c:	strb	r0, [r4, #40]	; 0x28
   24d40:	mov	r0, r1
   24d44:	blx	r3
   24d48:	cmp	r0, #0
   24d4c:	str	r0, [r4, #4]
   24d50:	addne	r1, r6, r0
   24d54:	rsbne	r2, r5, #0
   24d58:	addne	r1, r1, #8
   24d5c:	andne	r1, r1, r2
   24d60:	strne	r1, [r4, #12]
   24d64:	strne	r1, [r4, #8]
   24d68:	ldrne	r1, [r4]
   24d6c:	addne	r1, r0, r1
   24d70:	strne	r1, [r0]
   24d74:	strne	r1, [r4, #16]
   24d78:	movne	r1, #0
   24d7c:	strne	r1, [r0, #4]
   24d80:	ldrbne	r0, [r4, #40]	; 0x28
   24d84:	andne	r0, r0, #249	; 0xf9
   24d88:	strbne	r0, [r4, #40]	; 0x28
   24d8c:	movne	r0, #1
   24d90:	popne	{r4, r5, r6, sl, fp, pc}
   24d94:	movw	r0, #62128	; 0xf2b0
   24d98:	movt	r0, #3
   24d9c:	ldr	r0, [r0]
   24da0:	blx	r0

00024da4 <_obstack_begin_1@@Base>:
   24da4:	push	{r4, r5, r6, sl, fp, lr}
   24da8:	add	fp, sp, #16
   24dac:	cmp	r1, #0
   24db0:	mov	r4, r0
   24db4:	str	r3, [r0, #28]
   24db8:	mov	r5, r2
   24dbc:	movweq	r1, #4072	; 0xfe8
   24dc0:	cmp	r2, #0
   24dc4:	str	r1, [r0]
   24dc8:	ldr	r0, [fp, #8]
   24dcc:	movweq	r5, #8
   24dd0:	sub	r6, r5, #1
   24dd4:	str	r0, [r4, #32]
   24dd8:	ldr	r0, [fp, #12]
   24ddc:	str	r0, [r4, #36]	; 0x24
   24de0:	str	r6, [r4, #24]
   24de4:	ldrb	r2, [r4, #40]	; 0x28
   24de8:	orr	r2, r2, #1
   24dec:	strb	r2, [r4, #40]	; 0x28
   24df0:	blx	r3
   24df4:	cmp	r0, #0
   24df8:	str	r0, [r4, #4]
   24dfc:	addne	r1, r6, r0
   24e00:	rsbne	r2, r5, #0
   24e04:	addne	r1, r1, #8
   24e08:	andne	r1, r1, r2
   24e0c:	strne	r1, [r4, #12]
   24e10:	strne	r1, [r4, #8]
   24e14:	ldrne	r1, [r4]
   24e18:	addne	r1, r0, r1
   24e1c:	strne	r1, [r0]
   24e20:	strne	r1, [r4, #16]
   24e24:	movne	r1, #0
   24e28:	strne	r1, [r0, #4]
   24e2c:	ldrbne	r0, [r4, #40]	; 0x28
   24e30:	andne	r0, r0, #249	; 0xf9
   24e34:	strbne	r0, [r4, #40]	; 0x28
   24e38:	movne	r0, #1
   24e3c:	popne	{r4, r5, r6, sl, fp, pc}
   24e40:	movw	r0, #62128	; 0xf2b0
   24e44:	movt	r0, #3
   24e48:	ldr	r0, [r0]
   24e4c:	blx	r0

00024e50 <_obstack_newchunk@@Base>:
   24e50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e54:	add	fp, sp, #28
   24e58:	sub	sp, sp, #4
   24e5c:	mov	r4, r0
   24e60:	ldr	r2, [r0]
   24e64:	ldr	r0, [r0, #8]
   24e68:	ldr	r3, [r4, #12]
   24e6c:	sub	r9, r3, r0
   24e70:	ldr	r0, [r4, #24]
   24e74:	mov	r3, #0
   24e78:	add	r1, r9, r1
   24e7c:	adds	r6, r1, r0
   24e80:	adc	r0, r3, #0
   24e84:	mov	r3, #100	; 0x64
   24e88:	add	r3, r3, r9, lsr #3
   24e8c:	adds	r7, r3, r6
   24e90:	movcs	r7, r6
   24e94:	cmp	r7, r2
   24e98:	movcc	r7, r2
   24e9c:	cmp	r1, r9
   24ea0:	bcc	24f98 <_obstack_newchunk@@Base+0x148>
   24ea4:	cmp	r0, #0
   24ea8:	bne	24f98 <_obstack_newchunk@@Base+0x148>
   24eac:	ldrb	r0, [r4, #40]	; 0x28
   24eb0:	ldr	r8, [r4, #4]
   24eb4:	tst	r0, #1
   24eb8:	bne	24ecc <_obstack_newchunk@@Base+0x7c>
   24ebc:	ldr	r1, [r4, #28]
   24ec0:	mov	r0, r7
   24ec4:	blx	r1
   24ec8:	b	24edc <_obstack_newchunk@@Base+0x8c>
   24ecc:	ldr	r2, [r4, #28]
   24ed0:	ldr	r0, [r4, #36]	; 0x24
   24ed4:	mov	r1, r7
   24ed8:	blx	r2
   24edc:	mov	r6, r0
   24ee0:	cmp	r0, #0
   24ee4:	beq	24f98 <_obstack_newchunk@@Base+0x148>
   24ee8:	add	r0, r6, r7
   24eec:	str	r6, [r4, #4]
   24ef0:	str	r8, [r6, #4]
   24ef4:	mov	r2, r9
   24ef8:	str	r0, [r4, #16]
   24efc:	str	r0, [r6]
   24f00:	ldr	r5, [r4, #24]
   24f04:	ldr	sl, [r4, #8]
   24f08:	add	r0, r5, r6
   24f0c:	mov	r1, sl
   24f10:	add	r0, r0, #8
   24f14:	bic	r7, r0, r5
   24f18:	mov	r0, r7
   24f1c:	bl	11c60 <memcpy@plt>
   24f20:	ldrb	r0, [r4, #40]	; 0x28
   24f24:	tst	r0, #2
   24f28:	bne	24f78 <_obstack_newchunk@@Base+0x128>
   24f2c:	add	r1, r5, r8
   24f30:	mvn	r0, r5
   24f34:	add	r1, r1, #8
   24f38:	and	r0, r1, r0
   24f3c:	cmp	sl, r0
   24f40:	bne	24f78 <_obstack_newchunk@@Base+0x128>
   24f44:	ldr	r0, [r8, #4]
   24f48:	str	r0, [r6, #4]
   24f4c:	ldrb	r0, [r4, #40]	; 0x28
   24f50:	tst	r0, #1
   24f54:	bne	24f68 <_obstack_newchunk@@Base+0x118>
   24f58:	ldr	r1, [r4, #32]
   24f5c:	mov	r0, r8
   24f60:	blx	r1
   24f64:	b	24f78 <_obstack_newchunk@@Base+0x128>
   24f68:	ldr	r2, [r4, #32]
   24f6c:	ldr	r0, [r4, #36]	; 0x24
   24f70:	mov	r1, r8
   24f74:	blx	r2
   24f78:	add	r0, r7, r9
   24f7c:	str	r7, [r4, #8]
   24f80:	str	r0, [r4, #12]
   24f84:	ldrb	r0, [r4, #40]	; 0x28
   24f88:	and	r0, r0, #253	; 0xfd
   24f8c:	strb	r0, [r4, #40]	; 0x28
   24f90:	sub	sp, fp, #28
   24f94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24f98:	movw	r0, #62128	; 0xf2b0
   24f9c:	movt	r0, #3
   24fa0:	ldr	r0, [r0]
   24fa4:	blx	r0

00024fa8 <_obstack_allocated_p@@Base>:
   24fa8:	ldr	r2, [r0, #4]
   24fac:	mov	r0, #0
   24fb0:	b	24fb8 <_obstack_allocated_p@@Base+0x10>
   24fb4:	ldr	r2, [r2, #4]
   24fb8:	cmp	r2, #0
   24fbc:	bxeq	lr
   24fc0:	cmp	r2, r1
   24fc4:	bcs	24fb4 <_obstack_allocated_p@@Base+0xc>
   24fc8:	ldr	r3, [r2]
   24fcc:	cmp	r3, r1
   24fd0:	bcc	24fb4 <_obstack_allocated_p@@Base+0xc>
   24fd4:	mov	r0, #1
   24fd8:	bx	lr

00024fdc <_obstack_free@@Base>:
   24fdc:	push	{r4, r5, r6, sl, fp, lr}
   24fe0:	add	fp, sp, #16
   24fe4:	mov	r5, r1
   24fe8:	ldr	r1, [r0, #4]
   24fec:	cmp	r1, #0
   24ff0:	beq	25050 <_obstack_free@@Base+0x74>
   24ff4:	mov	r4, r0
   24ff8:	cmp	r1, r5
   24ffc:	bcs	2500c <_obstack_free@@Base+0x30>
   25000:	ldr	r0, [r1]
   25004:	cmp	r0, r5
   25008:	bcs	2505c <_obstack_free@@Base+0x80>
   2500c:	ldrb	r0, [r4, #40]	; 0x28
   25010:	ldr	r6, [r1, #4]
   25014:	tst	r0, #1
   25018:	bne	2502c <_obstack_free@@Base+0x50>
   2501c:	ldr	r2, [r4, #32]
   25020:	mov	r0, r1
   25024:	blx	r2
   25028:	b	25038 <_obstack_free@@Base+0x5c>
   2502c:	ldr	r2, [r4, #32]
   25030:	ldr	r0, [r4, #36]	; 0x24
   25034:	blx	r2
   25038:	ldrb	r0, [r4, #40]	; 0x28
   2503c:	cmp	r6, #0
   25040:	mov	r1, r6
   25044:	orr	r0, r0, #2
   25048:	strb	r0, [r4, #40]	; 0x28
   2504c:	bne	24ff8 <_obstack_free@@Base+0x1c>
   25050:	cmp	r5, #0
   25054:	popeq	{r4, r5, r6, sl, fp, pc}
   25058:	bl	12038 <abort@plt>
   2505c:	str	r5, [r4, #8]
   25060:	str	r5, [r4, #12]
   25064:	ldr	r0, [r1]
   25068:	str	r1, [r4, #4]
   2506c:	str	r0, [r4, #16]
   25070:	pop	{r4, r5, r6, sl, fp, pc}

00025074 <_obstack_memory_used@@Base>:
   25074:	ldr	r1, [r0, #4]
   25078:	mov	r0, #0
   2507c:	b	25090 <_obstack_memory_used@@Base+0x1c>
   25080:	ldr	r2, [r1]
   25084:	sub	r0, r0, r1
   25088:	ldr	r1, [r1, #4]
   2508c:	add	r0, r0, r2
   25090:	cmp	r1, #0
   25094:	bxeq	lr
   25098:	b	25080 <_obstack_memory_used@@Base+0xc>
   2509c:	push	{fp, lr}
   250a0:	mov	fp, sp
   250a4:	movw	r0, #62216	; 0xf308
   250a8:	movw	r1, #56991	; 0xde9f
   250ac:	mov	r2, #5
   250b0:	movt	r0, #3
   250b4:	movt	r1, #2
   250b8:	ldr	r4, [r0]
   250bc:	mov	r0, #0
   250c0:	bl	11cb4 <dcgettext@plt>
   250c4:	movw	r2, #57256	; 0xdfa8
   250c8:	mov	r3, r0
   250cc:	mov	r0, r4
   250d0:	mov	r1, #1
   250d4:	movt	r2, #2
   250d8:	bl	11f24 <__fprintf_chk@plt>
   250dc:	movw	r0, #62124	; 0xf2ac
   250e0:	movt	r0, #3
   250e4:	ldr	r0, [r0]
   250e8:	bl	11e88 <exit@plt>
   250ec:	push	{r4, r5, fp, lr}
   250f0:	add	fp, sp, #8
   250f4:	cmp	r0, #0
   250f8:	beq	2518c <_obstack_memory_used@@Base+0x118>
   250fc:	mov	r1, #47	; 0x2f
   25100:	mov	r4, r0
   25104:	bl	11f84 <strrchr@plt>
   25108:	cmp	r0, #0
   2510c:	mov	r5, r4
   25110:	addne	r5, r0, #1
   25114:	sub	r0, r5, r4
   25118:	cmp	r0, #7
   2511c:	blt	25170 <_obstack_memory_used@@Base+0xfc>
   25120:	movw	r1, #57064	; 0xdee8
   25124:	sub	r0, r5, #7
   25128:	mov	r2, #7
   2512c:	movt	r1, #2
   25130:	bl	1202c <strncmp@plt>
   25134:	cmp	r0, #0
   25138:	bne	25170 <_obstack_memory_used@@Base+0xfc>
   2513c:	movw	r1, #57072	; 0xdef0
   25140:	mov	r0, r5
   25144:	mov	r2, #3
   25148:	movt	r1, #2
   2514c:	bl	1202c <strncmp@plt>
   25150:	cmp	r0, #0
   25154:	beq	25160 <_obstack_memory_used@@Base+0xec>
   25158:	mov	r4, r5
   2515c:	b	25170 <_obstack_memory_used@@Base+0xfc>
   25160:	movw	r0, #62200	; 0xf2f8
   25164:	add	r4, r5, #3
   25168:	movt	r0, #3
   2516c:	str	r4, [r0]
   25170:	movw	r0, #62204	; 0xf2fc
   25174:	movt	r0, #3
   25178:	str	r4, [r0]
   2517c:	movw	r0, #992	; 0x3e0
   25180:	movt	r0, #4
   25184:	str	r4, [r0]
   25188:	pop	{r4, r5, fp, pc}
   2518c:	movw	r0, #62216	; 0xf308
   25190:	mov	r1, #55	; 0x37
   25194:	mov	r2, #1
   25198:	movt	r0, #3
   2519c:	ldr	r3, [r0]
   251a0:	movw	r0, #57008	; 0xdeb0
   251a4:	movt	r0, #2
   251a8:	bl	11d50 <fwrite@plt>
   251ac:	bl	12038 <abort@plt>
   251b0:	push	{r4, r5, r6, sl, fp, lr}
   251b4:	add	fp, sp, #16
   251b8:	mov	r4, r0
   251bc:	movw	r0, #1000	; 0x3e8
   251c0:	movt	r0, #4
   251c4:	cmp	r4, #0
   251c8:	moveq	r4, r0
   251cc:	bl	11ed0 <__errno_location@plt>
   251d0:	ldr	r6, [r0]
   251d4:	mov	r5, r0
   251d8:	mov	r0, r4
   251dc:	mov	r1, #48	; 0x30
   251e0:	bl	28300 <_obstack_memory_used@@Base+0x328c>
   251e4:	str	r6, [r5]
   251e8:	pop	{r4, r5, r6, sl, fp, pc}
   251ec:	movw	r1, #1000	; 0x3e8
   251f0:	cmp	r0, #0
   251f4:	movt	r1, #4
   251f8:	movne	r1, r0
   251fc:	ldr	r0, [r1]
   25200:	bx	lr
   25204:	movw	r2, #1000	; 0x3e8
   25208:	cmp	r0, #0
   2520c:	movt	r2, #4
   25210:	movne	r2, r0
   25214:	str	r1, [r2]
   25218:	bx	lr
   2521c:	movw	r3, #1000	; 0x3e8
   25220:	cmp	r0, #0
   25224:	movt	r3, #4
   25228:	movne	r3, r0
   2522c:	ubfx	r0, r1, #5, #3
   25230:	and	r1, r1, #31
   25234:	add	r0, r3, r0, lsl #2
   25238:	ldr	r3, [r0, #8]
   2523c:	eor	r2, r2, r3, lsr r1
   25240:	and	r2, r2, #1
   25244:	eor	r2, r3, r2, lsl r1
   25248:	str	r2, [r0, #8]
   2524c:	mov	r0, #1
   25250:	and	r0, r0, r3, lsr r1
   25254:	bx	lr
   25258:	movw	r2, #1000	; 0x3e8
   2525c:	cmp	r0, #0
   25260:	movt	r2, #4
   25264:	movne	r2, r0
   25268:	ldr	r0, [r2, #4]
   2526c:	str	r1, [r2, #4]
   25270:	bx	lr
   25274:	movw	r3, #1000	; 0x3e8
   25278:	cmp	r0, #0
   2527c:	movt	r3, #4
   25280:	movne	r3, r0
   25284:	cmp	r1, #0
   25288:	mov	r0, #10
   2528c:	cmpne	r2, #0
   25290:	str	r0, [r3]
   25294:	bne	252a4 <_obstack_memory_used@@Base+0x230>
   25298:	push	{fp, lr}
   2529c:	mov	fp, sp
   252a0:	bl	12038 <abort@plt>
   252a4:	str	r1, [r3, #40]	; 0x28
   252a8:	str	r2, [r3, #44]	; 0x2c
   252ac:	bx	lr
   252b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   252b4:	add	fp, sp, #28
   252b8:	sub	sp, sp, #20
   252bc:	mov	r7, r0
   252c0:	ldr	r0, [fp, #8]
   252c4:	movw	r5, #1000	; 0x3e8
   252c8:	mov	r8, r3
   252cc:	mov	r9, r2
   252d0:	mov	sl, r1
   252d4:	movt	r5, #4
   252d8:	cmp	r0, #0
   252dc:	movne	r5, r0
   252e0:	bl	11ed0 <__errno_location@plt>
   252e4:	mov	r4, r0
   252e8:	ldm	r5, {r0, r1}
   252ec:	ldr	r2, [r5, #40]	; 0x28
   252f0:	ldr	r3, [r5, #44]	; 0x2c
   252f4:	add	r5, r5, #8
   252f8:	ldr	r6, [r4]
   252fc:	stm	sp, {r0, r1, r5}
   25300:	str	r2, [sp, #12]
   25304:	str	r3, [sp, #16]
   25308:	mov	r0, r7
   2530c:	mov	r1, sl
   25310:	mov	r2, r9
   25314:	mov	r3, r8
   25318:	bl	25328 <_obstack_memory_used@@Base+0x2b4>
   2531c:	str	r6, [r4]
   25320:	sub	sp, fp, #28
   25324:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25328:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2532c:	add	fp, sp, #28
   25330:	sub	sp, sp, #156	; 0x9c
   25334:	str	r0, [sp, #80]	; 0x50
   25338:	ldr	r0, [fp, #12]
   2533c:	mov	r6, r1
   25340:	mov	r9, r3
   25344:	str	r2, [fp, #-84]	; 0xffffffac
   25348:	and	r1, r0, #4
   2534c:	str	r1, [sp, #32]
   25350:	and	r1, r0, #1
   25354:	str	r1, [sp, #36]	; 0x24
   25358:	ubfx	r4, r0, #1, #1
   2535c:	bl	11d74 <__ctype_get_mb_cur_max@plt>
   25360:	str	r0, [sp, #40]	; 0x28
   25364:	ldr	r0, [fp, #24]
   25368:	ldr	r7, [fp, #8]
   2536c:	mov	r1, #0
   25370:	mov	r5, #1
   25374:	str	r1, [fp, #-56]	; 0xffffffc8
   25378:	mov	r1, #0
   2537c:	str	r1, [sp, #60]	; 0x3c
   25380:	str	r0, [sp, #76]	; 0x4c
   25384:	ldr	r0, [fp, #20]
   25388:	str	r0, [sp, #72]	; 0x48
   2538c:	mov	r0, #0
   25390:	str	r0, [sp, #56]	; 0x38
   25394:	mov	r0, #0
   25398:	str	r0, [sp, #92]	; 0x5c
   2539c:	mov	r0, #0
   253a0:	str	r0, [fp, #-76]	; 0xffffffb4
   253a4:	mov	r0, #0
   253a8:	cmp	r7, #10
   253ac:	bhi	2632c <_obstack_memory_used@@Base+0x12b8>
   253b0:	add	r1, pc, #28
   253b4:	mov	sl, r6
   253b8:	ldr	r6, [sp, #80]	; 0x50
   253bc:	ldr	ip, [fp, #-84]	; 0xffffffac
   253c0:	mov	r8, #0
   253c4:	mov	r2, #1
   253c8:	mov	r3, #0
   253cc:	mov	lr, r9
   253d0:	ldr	pc, [r1, r7, lsl #2]
   253d4:			; <UNDEFINED> instruction: 0x000254b8
   253d8:	andeq	r5, r2, r4, ror #9
   253dc:	andeq	r5, r2, r8, lsr #9
   253e0:	andeq	r5, r2, r0, lsr #9
   253e4:	ldrdeq	r5, [r2], -r8
   253e8:	andeq	r5, r2, ip, lsr #10
   253ec:	andeq	r5, r2, r8, asr #9
   253f0:	andeq	r5, r2, r8, lsl #11
   253f4:	andeq	r5, r2, r0, lsl #8
   253f8:	andeq	r5, r2, r0, lsl #8
   253fc:	andeq	r5, r2, r8, lsr #8
   25400:	movw	r0, #57146	; 0xdf3a
   25404:	mov	r1, r7
   25408:	movt	r0, #2
   2540c:	bl	26d38 <_obstack_memory_used@@Base+0x1cc4>
   25410:	str	r0, [sp, #72]	; 0x48
   25414:	movw	r0, #58060	; 0xe2cc
   25418:	mov	r1, r7
   2541c:	movt	r0, #2
   25420:	bl	26d38 <_obstack_memory_used@@Base+0x1cc4>
   25424:	str	r0, [sp, #76]	; 0x4c
   25428:	str	r5, [fp, #-48]	; 0xffffffd0
   2542c:	mov	r8, #0
   25430:	mov	r5, r7
   25434:	tst	r4, #1
   25438:	bne	25470 <_obstack_memory_used@@Base+0x3fc>
   2543c:	ldr	r0, [sp, #72]	; 0x48
   25440:	ldrb	r0, [r0]
   25444:	cmp	r0, #0
   25448:	beq	25470 <_obstack_memory_used@@Base+0x3fc>
   2544c:	ldr	r1, [sp, #72]	; 0x48
   25450:	mov	r8, #0
   25454:	add	r1, r1, #1
   25458:	cmp	r8, sl
   2545c:	strbcc	r0, [r6, r8]
   25460:	ldrb	r0, [r1, r8]
   25464:	add	r8, r8, #1
   25468:	cmp	r0, #0
   2546c:	bne	25458 <_obstack_memory_used@@Base+0x3e4>
   25470:	ldr	r7, [sp, #76]	; 0x4c
   25474:	mov	r0, r7
   25478:	bl	11eac <strlen@plt>
   2547c:	str	r7, [sp, #92]	; 0x5c
   25480:	mov	r7, r5
   25484:	ldr	ip, [fp, #-84]	; 0xffffffac
   25488:	ldr	r5, [fp, #-48]	; 0xffffffd0
   2548c:	str	r0, [fp, #-76]	; 0xffffffb4
   25490:	mov	r2, #1
   25494:	mov	r3, r4
   25498:	mov	lr, r9
   2549c:	b	25588 <_obstack_memory_used@@Base+0x514>
   254a0:	mov	r0, #1
   254a4:	b	254e4 <_obstack_memory_used@@Base+0x470>
   254a8:	tst	r4, #1
   254ac:	bne	254e4 <_obstack_memory_used@@Base+0x470>
   254b0:	mov	r2, r0
   254b4:	b	2550c <_obstack_memory_used@@Base+0x498>
   254b8:	mov	r7, #0
   254bc:	mov	r8, #0
   254c0:	mov	r2, r0
   254c4:	b	25584 <_obstack_memory_used@@Base+0x510>
   254c8:	mov	r0, #1
   254cc:	mov	r8, #0
   254d0:	mov	r7, #5
   254d4:	b	25540 <_obstack_memory_used@@Base+0x4cc>
   254d8:	mov	r2, #1
   254dc:	tst	r4, #1
   254e0:	beq	2550c <_obstack_memory_used@@Base+0x498>
   254e4:	mov	r1, #1
   254e8:	mov	r8, #0
   254ec:	mov	r7, #2
   254f0:	mov	r2, r0
   254f4:	mov	r3, #1
   254f8:	str	r1, [fp, #-76]	; 0xffffffb4
   254fc:	movw	r1, #58060	; 0xe2cc
   25500:	movt	r1, #2
   25504:	str	r1, [sp, #92]	; 0x5c
   25508:	b	25588 <_obstack_memory_used@@Base+0x514>
   2550c:	cmp	sl, #0
   25510:	mov	r8, #1
   25514:	mov	r7, #2
   25518:	movne	r0, #39	; 0x27
   2551c:	strbne	r0, [r6]
   25520:	movw	r0, #58060	; 0xe2cc
   25524:	movt	r0, #2
   25528:	b	25578 <_obstack_memory_used@@Base+0x504>
   2552c:	mov	r7, #5
   25530:	tst	r4, #1
   25534:	beq	2555c <_obstack_memory_used@@Base+0x4e8>
   25538:	mov	r0, #1
   2553c:	mov	r8, #0
   25540:	str	r0, [fp, #-76]	; 0xffffffb4
   25544:	movw	r0, #57144	; 0xdf38
   25548:	mov	r2, #1
   2554c:	mov	r3, #1
   25550:	movt	r0, #2
   25554:	str	r0, [sp, #92]	; 0x5c
   25558:	b	25588 <_obstack_memory_used@@Base+0x514>
   2555c:	cmp	sl, #0
   25560:	mov	r8, #1
   25564:	mov	r2, #1
   25568:	movne	r0, #34	; 0x22
   2556c:	strbne	r0, [r6]
   25570:	movw	r0, #57144	; 0xdf38
   25574:	movt	r0, #2
   25578:	str	r0, [sp, #92]	; 0x5c
   2557c:	mov	r0, #1
   25580:	str	r0, [fp, #-76]	; 0xffffffb4
   25584:	mov	r3, #0
   25588:	ldr	r0, [fp, #16]
   2558c:	str	r3, [fp, #-72]	; 0xffffffb8
   25590:	str	r7, [fp, #-64]	; 0xffffffc0
   25594:	str	r2, [sp, #84]	; 0x54
   25598:	cmp	r0, #0
   2559c:	movwne	r0, #1
   255a0:	and	r0, r0, r3
   255a4:	str	r0, [fp, #-88]	; 0xffffffa8
   255a8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   255ac:	cmp	r0, #0
   255b0:	movwne	r0, #1
   255b4:	subs	r4, r7, #2
   255b8:	mov	r7, #0
   255bc:	and	r1, r0, r3
   255c0:	str	r4, [fp, #-80]	; 0xffffffb0
   255c4:	and	r1, r2, r1
   255c8:	str	r1, [sp, #48]	; 0x30
   255cc:	clz	r1, r4
   255d0:	lsr	r1, r1, #5
   255d4:	and	r1, r1, r3
   255d8:	eor	r3, r3, #1
   255dc:	str	r1, [sp, #64]	; 0x40
   255e0:	mov	r1, r4
   255e4:	str	r3, [sp, #88]	; 0x58
   255e8:	movwne	r1, #1
   255ec:	orr	r3, r1, r3
   255f0:	and	r1, r1, r2
   255f4:	and	r0, r0, r1
   255f8:	str	r3, [sp, #68]	; 0x44
   255fc:	str	r1, [fp, #-68]	; 0xffffffbc
   25600:	str	r0, [fp, #-60]	; 0xffffffc4
   25604:	eor	r0, r2, #1
   25608:	str	r0, [sp, #52]	; 0x34
   2560c:	cmn	lr, #1
   25610:	beq	25620 <_obstack_memory_used@@Base+0x5ac>
   25614:	cmp	r7, lr
   25618:	bne	2562c <_obstack_memory_used@@Base+0x5b8>
   2561c:	b	26154 <_obstack_memory_used@@Base+0x10e0>
   25620:	ldrb	r0, [ip, r7]
   25624:	cmp	r0, #0
   25628:	beq	2615c <_obstack_memory_used@@Base+0x10e8>
   2562c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   25630:	mov	r9, #0
   25634:	str	r5, [fp, #-48]	; 0xffffffd0
   25638:	cmp	r0, #0
   2563c:	beq	25670 <_obstack_memory_used@@Base+0x5fc>
   25640:	ldr	r0, [fp, #-76]	; 0xffffffb4
   25644:	add	r4, r7, r0
   25648:	cmp	r0, #2
   2564c:	bcc	25668 <_obstack_memory_used@@Base+0x5f4>
   25650:	cmn	lr, #1
   25654:	bne	25668 <_obstack_memory_used@@Base+0x5f4>
   25658:	mov	r0, ip
   2565c:	bl	11eac <strlen@plt>
   25660:	ldr	ip, [fp, #-84]	; 0xffffffac
   25664:	mov	lr, r0
   25668:	cmp	r4, lr
   2566c:	bls	25678 <_obstack_memory_used@@Base+0x604>
   25670:	mov	r0, #0
   25674:	b	256b8 <_obstack_memory_used@@Base+0x644>
   25678:	ldr	r1, [sp, #92]	; 0x5c
   2567c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   25680:	add	r0, ip, r7
   25684:	mov	r4, lr
   25688:	bl	11c9c <memcmp@plt>
   2568c:	ldr	r2, [sp, #88]	; 0x58
   25690:	cmp	r0, #0
   25694:	mov	r1, r0
   25698:	movwne	r1, #1
   2569c:	orr	r1, r1, r2
   256a0:	tst	r1, #1
   256a4:	beq	261ec <_obstack_memory_used@@Base+0x1178>
   256a8:	ldr	ip, [fp, #-84]	; 0xffffffac
   256ac:	clz	r0, r0
   256b0:	mov	lr, r4
   256b4:	lsr	r0, r0, #5
   256b8:	str	r0, [fp, #-52]	; 0xffffffcc
   256bc:	ldrb	r5, [ip, r7]
   256c0:	cmp	r5, #126	; 0x7e
   256c4:	bhi	25a7c <_obstack_memory_used@@Base+0xa08>
   256c8:	add	r3, pc, #16
   256cc:	mov	r4, #1
   256d0:	mov	r2, #110	; 0x6e
   256d4:	mov	r0, #97	; 0x61
   256d8:	mov	r1, #0
   256dc:	ldr	pc, [r3, r5, lsl #2]
   256e0:	andeq	r5, r2, r8, ror r9
   256e4:	andeq	r5, r2, ip, ror sl
   256e8:	andeq	r5, r2, ip, ror sl
   256ec:	andeq	r5, r2, ip, ror sl
   256f0:	andeq	r5, r2, ip, ror sl
   256f4:	andeq	r5, r2, ip, ror sl
   256f8:	andeq	r5, r2, ip, ror sl
   256fc:	andeq	r5, r2, r0, lsr fp
   25700:	andeq	r5, r2, r8, asr r9
   25704:	andeq	r5, r2, r0, asr r9
   25708:	andeq	r5, r2, r4, ror #18
   2570c:	andeq	r5, r2, r4, ror #19
   25710:	andeq	r5, r2, r8, asr #18
   25714:	andeq	r5, r2, r0, ror #18
   25718:	andeq	r5, r2, ip, ror sl
   2571c:	andeq	r5, r2, ip, ror sl
   25720:	andeq	r5, r2, ip, ror sl
   25724:	andeq	r5, r2, ip, ror sl
   25728:	andeq	r5, r2, ip, ror sl
   2572c:	andeq	r5, r2, ip, ror sl
   25730:	andeq	r5, r2, ip, ror sl
   25734:	andeq	r5, r2, ip, ror sl
   25738:	andeq	r5, r2, ip, ror sl
   2573c:	andeq	r5, r2, ip, ror sl
   25740:	andeq	r5, r2, ip, ror sl
   25744:	andeq	r5, r2, ip, ror sl
   25748:	andeq	r5, r2, ip, ror sl
   2574c:	andeq	r5, r2, ip, ror sl
   25750:	andeq	r5, r2, ip, ror sl
   25754:	andeq	r5, r2, ip, ror sl
   25758:	andeq	r5, r2, ip, ror sl
   2575c:	andeq	r5, r2, ip, ror sl
   25760:	andeq	r5, r2, r8, ror #21
   25764:	andeq	r5, r2, ip, ror #21
   25768:	andeq	r5, r2, ip, ror #21
   2576c:	strdeq	r5, [r2], -r0
   25770:	andeq	r5, r2, ip, ror #21
   25774:	ldrdeq	r5, [r2], -ip
   25778:	andeq	r5, r2, ip, ror #21
   2577c:	andeq	r5, r2, ip, ror #19
   25780:	andeq	r5, r2, ip, ror #21
   25784:	andeq	r5, r2, ip, ror #21
   25788:	andeq	r5, r2, ip, ror #21
   2578c:	ldrdeq	r5, [r2], -ip
   25790:	ldrdeq	r5, [r2], -ip
   25794:	ldrdeq	r5, [r2], -ip
   25798:	ldrdeq	r5, [r2], -ip
   2579c:	ldrdeq	r5, [r2], -ip
   257a0:	ldrdeq	r5, [r2], -ip
   257a4:	ldrdeq	r5, [r2], -ip
   257a8:	ldrdeq	r5, [r2], -ip
   257ac:	ldrdeq	r5, [r2], -ip
   257b0:	ldrdeq	r5, [r2], -ip
   257b4:	ldrdeq	r5, [r2], -ip
   257b8:	ldrdeq	r5, [r2], -ip
   257bc:	ldrdeq	r5, [r2], -ip
   257c0:	ldrdeq	r5, [r2], -ip
   257c4:	ldrdeq	r5, [r2], -ip
   257c8:	ldrdeq	r5, [r2], -ip
   257cc:	andeq	r5, r2, ip, ror #21
   257d0:	andeq	r5, r2, ip, ror #21
   257d4:	andeq	r5, r2, ip, ror #21
   257d8:	andeq	r5, r2, ip, ror #21
   257dc:			; <UNDEFINED> instruction: 0x000259b8
   257e0:	andeq	r5, r2, ip, ror sl
   257e4:	ldrdeq	r5, [r2], -ip
   257e8:	ldrdeq	r5, [r2], -ip
   257ec:	ldrdeq	r5, [r2], -ip
   257f0:	ldrdeq	r5, [r2], -ip
   257f4:	ldrdeq	r5, [r2], -ip
   257f8:	ldrdeq	r5, [r2], -ip
   257fc:	ldrdeq	r5, [r2], -ip
   25800:	ldrdeq	r5, [r2], -ip
   25804:	ldrdeq	r5, [r2], -ip
   25808:	ldrdeq	r5, [r2], -ip
   2580c:	ldrdeq	r5, [r2], -ip
   25810:	ldrdeq	r5, [r2], -ip
   25814:	ldrdeq	r5, [r2], -ip
   25818:	ldrdeq	r5, [r2], -ip
   2581c:	ldrdeq	r5, [r2], -ip
   25820:	ldrdeq	r5, [r2], -ip
   25824:	ldrdeq	r5, [r2], -ip
   25828:	ldrdeq	r5, [r2], -ip
   2582c:	ldrdeq	r5, [r2], -ip
   25830:	ldrdeq	r5, [r2], -ip
   25834:	ldrdeq	r5, [r2], -ip
   25838:	ldrdeq	r5, [r2], -ip
   2583c:	ldrdeq	r5, [r2], -ip
   25840:	ldrdeq	r5, [r2], -ip
   25844:	ldrdeq	r5, [r2], -ip
   25848:	ldrdeq	r5, [r2], -ip
   2584c:	andeq	r5, r2, ip, ror #21
   25850:	andeq	r5, r2, r4, lsr #18
   25854:	ldrdeq	r5, [r2], -ip
   25858:	andeq	r5, r2, ip, ror #21
   2585c:	ldrdeq	r5, [r2], -ip
   25860:	andeq	r5, r2, ip, ror #21
   25864:	ldrdeq	r5, [r2], -ip
   25868:	ldrdeq	r5, [r2], -ip
   2586c:	ldrdeq	r5, [r2], -ip
   25870:	ldrdeq	r5, [r2], -ip
   25874:	ldrdeq	r5, [r2], -ip
   25878:	ldrdeq	r5, [r2], -ip
   2587c:	ldrdeq	r5, [r2], -ip
   25880:	ldrdeq	r5, [r2], -ip
   25884:	ldrdeq	r5, [r2], -ip
   25888:	ldrdeq	r5, [r2], -ip
   2588c:	ldrdeq	r5, [r2], -ip
   25890:	ldrdeq	r5, [r2], -ip
   25894:	ldrdeq	r5, [r2], -ip
   25898:	ldrdeq	r5, [r2], -ip
   2589c:	ldrdeq	r5, [r2], -ip
   258a0:	ldrdeq	r5, [r2], -ip
   258a4:	ldrdeq	r5, [r2], -ip
   258a8:	ldrdeq	r5, [r2], -ip
   258ac:	ldrdeq	r5, [r2], -ip
   258b0:	ldrdeq	r5, [r2], -ip
   258b4:	ldrdeq	r5, [r2], -ip
   258b8:	ldrdeq	r5, [r2], -ip
   258bc:	ldrdeq	r5, [r2], -ip
   258c0:	ldrdeq	r5, [r2], -ip
   258c4:	ldrdeq	r5, [r2], -ip
   258c8:	ldrdeq	r5, [r2], -ip
   258cc:	andeq	r5, r2, r4, lsl #18
   258d0:	andeq	r5, r2, ip, ror #21
   258d4:	andeq	r5, r2, r4, lsl #18
   258d8:	strdeq	r5, [r2], -r0
   258dc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   258e0:	cmp	r0, #0
   258e4:	beq	25b44 <_obstack_memory_used@@Base+0xad0>
   258e8:	ldr	r0, [fp, #16]
   258ec:	b	25b48 <_obstack_memory_used@@Base+0xad4>
   258f0:	mov	r4, #0
   258f4:	cmp	r7, #0
   258f8:	beq	25ae8 <_obstack_memory_used@@Base+0xa74>
   258fc:	mov	r9, #0
   25900:	b	258dc <_obstack_memory_used@@Base+0x868>
   25904:	mov	r4, #0
   25908:	cmn	lr, #1
   2590c:	beq	25acc <_obstack_memory_used@@Base+0xa58>
   25910:	cmp	r7, #0
   25914:	bne	258fc <_obstack_memory_used@@Base+0x888>
   25918:	cmp	lr, #1
   2591c:	beq	25ae8 <_obstack_memory_used@@Base+0xa74>
   25920:	b	258fc <_obstack_memory_used@@Base+0x888>
   25924:	ldr	r0, [fp, #-64]	; 0xffffffc0
   25928:	cmp	r0, #2
   2592c:	bne	25b0c <_obstack_memory_used@@Base+0xa98>
   25930:	ldr	r0, [fp, #-72]	; 0xffffffb8
   25934:	tst	r0, #1
   25938:	bne	26208 <_obstack_memory_used@@Base+0x1194>
   2593c:	mov	r9, #0
   25940:	mov	r0, #92	; 0x5c
   25944:	b	25b20 <_obstack_memory_used@@Base+0xaac>
   25948:	mov	r0, #102	; 0x66
   2594c:	b	25b30 <_obstack_memory_used@@Base+0xabc>
   25950:	mov	r2, #116	; 0x74
   25954:	b	25964 <_obstack_memory_used@@Base+0x8f0>
   25958:	mov	r0, #98	; 0x62
   2595c:	b	25b30 <_obstack_memory_used@@Base+0xabc>
   25960:	mov	r2, #114	; 0x72
   25964:	ldr	r0, [sp, #68]	; 0x44
   25968:	tst	r0, #1
   2596c:	mov	r0, r2
   25970:	bne	25b30 <_obstack_memory_used@@Base+0xabc>
   25974:	b	26208 <_obstack_memory_used@@Base+0x1194>
   25978:	ldr	r0, [sp, #84]	; 0x54
   2597c:	tst	r0, #1
   25980:	beq	25c20 <_obstack_memory_used@@Base+0xbac>
   25984:	ldr	r0, [fp, #-72]	; 0xffffffb8
   25988:	tst	r0, #1
   2598c:	bne	26318 <_obstack_memory_used@@Base+0x12a4>
   25990:	ldr	r0, [fp, #-64]	; 0xffffffc0
   25994:	ldr	r2, [fp, #-56]	; 0xffffffc8
   25998:	cmp	r0, #2
   2599c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   259a0:	movwne	r0, #1
   259a4:	orr	r0, r0, r2
   259a8:	tst	r0, #1
   259ac:	beq	25ff0 <_obstack_memory_used@@Base+0xf7c>
   259b0:	mov	r0, r8
   259b4:	b	26024 <_obstack_memory_used@@Base+0xfb0>
   259b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   259bc:	mov	r9, #0
   259c0:	mov	r5, #63	; 0x3f
   259c4:	cmp	r0, #5
   259c8:	beq	25dd4 <_obstack_memory_used@@Base+0xd60>
   259cc:	cmp	r0, #2
   259d0:	bne	25e78 <_obstack_memory_used@@Base+0xe04>
   259d4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   259d8:	tst	r0, #1
   259dc:	beq	25e7c <_obstack_memory_used@@Base+0xe08>
   259e0:	b	26208 <_obstack_memory_used@@Base+0x1194>
   259e4:	mov	r0, #118	; 0x76
   259e8:	b	25b30 <_obstack_memory_used@@Base+0xabc>
   259ec:	mov	r0, #1
   259f0:	mov	r5, #39	; 0x27
   259f4:	str	r0, [sp, #60]	; 0x3c
   259f8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   259fc:	cmp	r0, #2
   25a00:	bne	25a74 <_obstack_memory_used@@Base+0xa00>
   25a04:	ldr	r0, [fp, #-72]	; 0xffffffb8
   25a08:	tst	r0, #1
   25a0c:	bne	26208 <_obstack_memory_used@@Base+0x1194>
   25a10:	ldr	r2, [sp, #56]	; 0x38
   25a14:	clz	r1, sl
   25a18:	mov	r9, #0
   25a1c:	lsr	r1, r1, #5
   25a20:	cmp	r2, #0
   25a24:	mov	r0, r2
   25a28:	movwne	r0, #1
   25a2c:	orrs	r0, r0, r1
   25a30:	moveq	r2, sl
   25a34:	moveq	sl, r0
   25a38:	cmp	r8, sl
   25a3c:	str	r2, [sp, #56]	; 0x38
   25a40:	movcc	r0, #39	; 0x27
   25a44:	strbcc	r0, [r6, r8]
   25a48:	add	r0, r8, #1
   25a4c:	cmp	r0, sl
   25a50:	movcc	r1, #92	; 0x5c
   25a54:	strbcc	r1, [r6, r0]
   25a58:	add	r0, r8, #2
   25a5c:	add	r8, r8, #3
   25a60:	cmp	r0, sl
   25a64:	movcc	r1, #39	; 0x27
   25a68:	strbcc	r1, [r6, r0]
   25a6c:	mov	r0, #0
   25a70:	str	r0, [fp, #-56]	; 0xffffffc8
   25a74:	mov	r4, #1
   25a78:	b	258dc <_obstack_memory_used@@Base+0x868>
   25a7c:	ldr	r0, [sp, #40]	; 0x28
   25a80:	cmp	r0, #1
   25a84:	bne	25c4c <_obstack_memory_used@@Base+0xbd8>
   25a88:	str	lr, [sp, #28]
   25a8c:	bl	11e70 <__ctype_b_loc@plt>
   25a90:	ldr	r0, [r0]
   25a94:	ldr	ip, [fp, #-84]	; 0xffffffac
   25a98:	mov	r1, #1
   25a9c:	add	r0, r0, r5, lsl #1
   25aa0:	ldrb	r0, [r0, #1]
   25aa4:	ubfx	r4, r0, #6, #1
   25aa8:	ldr	r0, [sp, #52]	; 0x34
   25aac:	mov	r2, r1
   25ab0:	cmp	r1, #1
   25ab4:	orr	r0, r4, r0
   25ab8:	bhi	25e84 <_obstack_memory_used@@Base+0xe10>
   25abc:	tst	r0, #1
   25ac0:	beq	25e84 <_obstack_memory_used@@Base+0xe10>
   25ac4:	ldr	lr, [sp, #28]
   25ac8:	b	258dc <_obstack_memory_used@@Base+0x868>
   25acc:	cmp	r7, #0
   25ad0:	ldrbeq	r0, [ip, #1]
   25ad4:	cmpeq	r0, #0
   25ad8:	beq	25ae8 <_obstack_memory_used@@Base+0xa74>
   25adc:	mvn	lr, #0
   25ae0:	mov	r9, #0
   25ae4:	b	258dc <_obstack_memory_used@@Base+0x868>
   25ae8:	mov	r1, #1
   25aec:	ldr	r0, [fp, #-64]	; 0xffffffc0
   25af0:	cmp	r0, #2
   25af4:	bne	25b04 <_obstack_memory_used@@Base+0xa90>
   25af8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   25afc:	tst	r0, #1
   25b00:	bne	26208 <_obstack_memory_used@@Base+0x1194>
   25b04:	mov	r4, r1
   25b08:	b	258dc <_obstack_memory_used@@Base+0x868>
   25b0c:	ldr	r1, [sp, #48]	; 0x30
   25b10:	mov	r9, #0
   25b14:	mov	r0, #92	; 0x5c
   25b18:	cmp	r1, #0
   25b1c:	beq	25b30 <_obstack_memory_used@@Base+0xabc>
   25b20:	mov	r4, #0
   25b24:	cmp	r9, #0
   25b28:	beq	260bc <_obstack_memory_used@@Base+0x1048>
   25b2c:	b	260f8 <_obstack_memory_used@@Base+0x1084>
   25b30:	ldr	r1, [sp, #84]	; 0x54
   25b34:	mov	r4, #0
   25b38:	mov	r9, #0
   25b3c:	tst	r1, #1
   25b40:	bne	25b80 <_obstack_memory_used@@Base+0xb0c>
   25b44:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25b48:	cmp	r0, #0
   25b4c:	mov	r0, r5
   25b50:	beq	25b74 <_obstack_memory_used@@Base+0xb00>
   25b54:	ldr	r1, [fp, #16]
   25b58:	ubfx	r0, r5, #5, #3
   25b5c:	mov	r2, #1
   25b60:	ldr	r0, [r1, r0, lsl #2]
   25b64:	and	r1, r5, #31
   25b68:	tst	r0, r2, lsl r1
   25b6c:	mov	r0, r5
   25b70:	bne	25b80 <_obstack_memory_used@@Base+0xb0c>
   25b74:	ldr	r1, [fp, #-52]	; 0xffffffcc
   25b78:	cmp	r1, #0
   25b7c:	beq	260b4 <_obstack_memory_used@@Base+0x1040>
   25b80:	ldr	r1, [fp, #-72]	; 0xffffffb8
   25b84:	tst	r1, #1
   25b88:	bne	261e0 <_obstack_memory_used@@Base+0x116c>
   25b8c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   25b90:	ldr	r2, [fp, #-56]	; 0xffffffc8
   25b94:	cmp	r1, #2
   25b98:	ldr	r1, [fp, #-80]	; 0xffffffb0
   25b9c:	movwne	r1, #1
   25ba0:	orr	r1, r1, r2
   25ba4:	tst	r1, #1
   25ba8:	beq	25bb4 <_obstack_memory_used@@Base+0xb40>
   25bac:	ldr	r5, [fp, #-48]	; 0xffffffd0
   25bb0:	b	25bf0 <_obstack_memory_used@@Base+0xb7c>
   25bb4:	cmp	r8, sl
   25bb8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   25bbc:	movcc	r1, #39	; 0x27
   25bc0:	strbcc	r1, [r6, r8]
   25bc4:	add	r1, r8, #1
   25bc8:	cmp	r1, sl
   25bcc:	movcc	r2, #36	; 0x24
   25bd0:	strbcc	r2, [r6, r1]
   25bd4:	add	r1, r8, #2
   25bd8:	add	r8, r8, #3
   25bdc:	cmp	r1, sl
   25be0:	movcc	r2, #39	; 0x27
   25be4:	strbcc	r2, [r6, r1]
   25be8:	mov	r1, #1
   25bec:	str	r1, [fp, #-56]	; 0xffffffc8
   25bf0:	cmp	r8, sl
   25bf4:	movcc	r1, #92	; 0x5c
   25bf8:	strbcc	r1, [r6, r8]
   25bfc:	add	r8, r8, #1
   25c00:	cmp	r8, sl
   25c04:	and	r5, r5, r4
   25c08:	add	r7, r7, #1
   25c0c:	strbcc	r0, [r6, r8]
   25c10:	add	r8, r8, #1
   25c14:	cmn	lr, #1
   25c18:	bne	25614 <_obstack_memory_used@@Base+0x5a0>
   25c1c:	b	25620 <_obstack_memory_used@@Base+0x5ac>
   25c20:	ldr	r0, [sp, #36]	; 0x24
   25c24:	mov	r4, #0
   25c28:	mov	r9, #0
   25c2c:	mov	r5, #0
   25c30:	cmp	r0, #0
   25c34:	beq	25b44 <_obstack_memory_used@@Base+0xad0>
   25c38:	ldr	r5, [fp, #-48]	; 0xffffffd0
   25c3c:	add	r7, r7, #1
   25c40:	cmn	lr, #1
   25c44:	bne	25614 <_obstack_memory_used@@Base+0x5a0>
   25c48:	b	25620 <_obstack_memory_used@@Base+0x5ac>
   25c4c:	mov	r0, #0
   25c50:	cmn	lr, #1
   25c54:	str	r0, [fp, #-36]	; 0xffffffdc
   25c58:	str	r0, [fp, #-40]	; 0xffffffd8
   25c5c:	bne	25c70 <_obstack_memory_used@@Base+0xbfc>
   25c60:	mov	r0, ip
   25c64:	bl	11eac <strlen@plt>
   25c68:	ldr	ip, [fp, #-84]	; 0xffffffac
   25c6c:	mov	lr, r0
   25c70:	add	r0, ip, r7
   25c74:	mov	r4, #1
   25c78:	mov	r6, #0
   25c7c:	str	lr, [sp, #28]
   25c80:	str	r0, [sp, #24]
   25c84:	sub	r0, fp, #40	; 0x28
   25c88:	mov	r3, r0
   25c8c:	str	r6, [sp, #44]	; 0x2c
   25c90:	add	r6, r6, r7
   25c94:	sub	r0, fp, #44	; 0x2c
   25c98:	add	r1, ip, r6
   25c9c:	sub	r2, lr, r6
   25ca0:	bl	2280c <__assert_fail@plt+0x10780>
   25ca4:	cmp	r0, #0
   25ca8:	beq	26140 <_obstack_memory_used@@Base+0x10cc>
   25cac:	cmn	r0, #1
   25cb0:	beq	26100 <_obstack_memory_used@@Base+0x108c>
   25cb4:	ldr	lr, [sp, #28]
   25cb8:	cmn	r0, #2
   25cbc:	beq	26108 <_obstack_memory_used@@Base+0x1094>
   25cc0:	ldr	r2, [sp, #64]	; 0x40
   25cc4:	cmp	r0, #2
   25cc8:	mov	r1, #0
   25ccc:	movwcc	r1, #1
   25cd0:	eor	r2, r2, #1
   25cd4:	orrs	r1, r2, r1
   25cd8:	bne	25d98 <_obstack_memory_used@@Base+0xd24>
   25cdc:	ldr	r1, [sp, #44]	; 0x2c
   25ce0:	ldr	r2, [sp, #24]
   25ce4:	add	r1, r2, r1
   25ce8:	mov	r2, #1
   25cec:	ldrb	r3, [r1, r2]
   25cf0:	sub	r3, r3, #91	; 0x5b
   25cf4:	cmp	r3, #33	; 0x21
   25cf8:	bhi	25d8c <_obstack_memory_used@@Base+0xd18>
   25cfc:	add	r6, pc, #0
   25d00:	ldr	pc, [r6, r3, lsl #2]
   25d04:	andeq	r6, r2, r0, lsl #4
   25d08:	andeq	r6, r2, r0, lsl #4
   25d0c:	andeq	r5, r2, ip, lsl #27
   25d10:	andeq	r6, r2, r0, lsl #4
   25d14:	andeq	r5, r2, ip, lsl #27
   25d18:	andeq	r6, r2, r0, lsl #4
   25d1c:	andeq	r5, r2, ip, lsl #27
   25d20:	andeq	r5, r2, ip, lsl #27
   25d24:	andeq	r5, r2, ip, lsl #27
   25d28:	andeq	r5, r2, ip, lsl #27
   25d2c:	andeq	r5, r2, ip, lsl #27
   25d30:	andeq	r5, r2, ip, lsl #27
   25d34:	andeq	r5, r2, ip, lsl #27
   25d38:	andeq	r5, r2, ip, lsl #27
   25d3c:	andeq	r5, r2, ip, lsl #27
   25d40:	andeq	r5, r2, ip, lsl #27
   25d44:	andeq	r5, r2, ip, lsl #27
   25d48:	andeq	r5, r2, ip, lsl #27
   25d4c:	andeq	r5, r2, ip, lsl #27
   25d50:	andeq	r5, r2, ip, lsl #27
   25d54:	andeq	r5, r2, ip, lsl #27
   25d58:	andeq	r5, r2, ip, lsl #27
   25d5c:	andeq	r5, r2, ip, lsl #27
   25d60:	andeq	r5, r2, ip, lsl #27
   25d64:	andeq	r5, r2, ip, lsl #27
   25d68:	andeq	r5, r2, ip, lsl #27
   25d6c:	andeq	r5, r2, ip, lsl #27
   25d70:	andeq	r5, r2, ip, lsl #27
   25d74:	andeq	r5, r2, ip, lsl #27
   25d78:	andeq	r5, r2, ip, lsl #27
   25d7c:	andeq	r5, r2, ip, lsl #27
   25d80:	andeq	r5, r2, ip, lsl #27
   25d84:	andeq	r5, r2, ip, lsl #27
   25d88:	andeq	r6, r2, r0, lsl #4
   25d8c:	add	r2, r2, #1
   25d90:	cmp	r2, r0
   25d94:	bcc	25cec <_obstack_memory_used@@Base+0xc78>
   25d98:	ldr	r6, [sp, #44]	; 0x2c
   25d9c:	add	r6, r0, r6
   25da0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   25da4:	bl	11d20 <iswprint@plt>
   25da8:	cmp	r0, #0
   25dac:	movwne	r0, #1
   25db0:	and	r4, r4, r0
   25db4:	sub	r0, fp, #40	; 0x28
   25db8:	bl	11c78 <mbsinit@plt>
   25dbc:	ldr	lr, [sp, #28]
   25dc0:	ldr	ip, [fp, #-84]	; 0xffffffac
   25dc4:	sub	r3, fp, #40	; 0x28
   25dc8:	cmp	r0, #0
   25dcc:	beq	25c8c <_obstack_memory_used@@Base+0xc18>
   25dd0:	b	26148 <_obstack_memory_used@@Base+0x10d4>
   25dd4:	ldr	r0, [sp, #32]
   25dd8:	cmp	r0, #0
   25ddc:	beq	25e78 <_obstack_memory_used@@Base+0xe04>
   25de0:	add	r0, r7, #2
   25de4:	cmp	r0, lr
   25de8:	bcs	25e78 <_obstack_memory_used@@Base+0xe04>
   25dec:	add	r1, ip, r7
   25df0:	ldrb	r1, [r1, #1]
   25df4:	cmp	r1, #63	; 0x3f
   25df8:	bne	25e78 <_obstack_memory_used@@Base+0xe04>
   25dfc:	ldrb	r5, [ip, r0]
   25e00:	sub	r1, r5, #33	; 0x21
   25e04:	cmp	r1, #29
   25e08:	bhi	25e78 <_obstack_memory_used@@Base+0xe04>
   25e0c:	movw	r3, #20929	; 0x51c1
   25e10:	mov	r2, #1
   25e14:	movt	r3, #14336	; 0x3800
   25e18:	tst	r3, r2, lsl r1
   25e1c:	beq	25e78 <_obstack_memory_used@@Base+0xe04>
   25e20:	ldr	r1, [fp, #-72]	; 0xffffffb8
   25e24:	tst	r1, #1
   25e28:	bne	26320 <_obstack_memory_used@@Base+0x12ac>
   25e2c:	cmp	r8, sl
   25e30:	mov	r7, r0
   25e34:	mov	r4, #0
   25e38:	movcc	r1, #63	; 0x3f
   25e3c:	strbcc	r1, [r6, r8]
   25e40:	add	r1, r8, #1
   25e44:	cmp	r1, sl
   25e48:	movcc	r2, #34	; 0x22
   25e4c:	strbcc	r2, [r6, r1]
   25e50:	add	r1, r8, #2
   25e54:	cmp	r1, sl
   25e58:	movcc	r2, #34	; 0x22
   25e5c:	strbcc	r2, [r6, r1]
   25e60:	add	r1, r8, #3
   25e64:	add	r8, r8, #4
   25e68:	cmp	r1, sl
   25e6c:	movcc	r2, #63	; 0x3f
   25e70:	strbcc	r2, [r6, r1]
   25e74:	b	258dc <_obstack_memory_used@@Base+0x868>
   25e78:	mov	r5, #63	; 0x3f
   25e7c:	mov	r4, #0
   25e80:	b	258dc <_obstack_memory_used@@Base+0x868>
   25e84:	add	r1, r2, r7
   25e88:	ldr	lr, [sp, #28]
   25e8c:	mov	r3, #0
   25e90:	str	r1, [sp, #44]	; 0x2c
   25e94:	add	r1, r7, #1
   25e98:	ldr	r7, [fp, #-64]	; 0xffffffc0
   25e9c:	tst	r0, #1
   25ea0:	bne	25f74 <_obstack_memory_used@@Base+0xf00>
   25ea4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   25ea8:	tst	r2, #1
   25eac:	bne	26268 <_obstack_memory_used@@Base+0x11f4>
   25eb0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   25eb4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   25eb8:	cmp	r7, #2
   25ebc:	movwne	r3, #1
   25ec0:	orr	r3, r3, r2
   25ec4:	tst	r3, #1
   25ec8:	bne	25f04 <_obstack_memory_used@@Base+0xe90>
   25ecc:	cmp	r8, sl
   25ed0:	add	r3, r8, #1
   25ed4:	movcc	r2, #39	; 0x27
   25ed8:	strbcc	r2, [r6, r8]
   25edc:	cmp	r3, sl
   25ee0:	movcc	r2, #36	; 0x24
   25ee4:	strbcc	r2, [r6, r3]
   25ee8:	add	r3, r8, #2
   25eec:	add	r8, r8, #3
   25ef0:	cmp	r3, sl
   25ef4:	movcc	r2, #39	; 0x27
   25ef8:	strbcc	r2, [r6, r3]
   25efc:	mov	r2, #1
   25f00:	str	r2, [fp, #-56]	; 0xffffffc8
   25f04:	cmp	r8, sl
   25f08:	movcc	r3, #92	; 0x5c
   25f0c:	strbcc	r3, [r6, r8]
   25f10:	add	r3, r8, #1
   25f14:	cmp	r3, sl
   25f18:	andcc	r7, r5, #192	; 0xc0
   25f1c:	movcc	r2, #48	; 0x30
   25f20:	orrcc	r7, r2, r7, lsr #6
   25f24:	strbcc	r7, [r6, r3]
   25f28:	add	r3, r8, #2
   25f2c:	add	r8, r8, #3
   25f30:	cmp	r3, sl
   25f34:	lsrcc	r7, r5, #3
   25f38:	movcc	r2, #6
   25f3c:	bficc	r7, r2, #3, #29
   25f40:	mov	r2, #6
   25f44:	strbcc	r7, [r6, r3]
   25f48:	bfi	r5, r2, #3, #29
   25f4c:	mov	r3, #1
   25f50:	b	25f98 <_obstack_memory_used@@Base+0xf24>
   25f54:	cmp	r8, sl
   25f58:	ldr	r7, [fp, #-64]	; 0xffffffc0
   25f5c:	strbcc	r5, [r6, r8]
   25f60:	add	r8, r8, #1
   25f64:	ldrb	r5, [ip, r1]
   25f68:	add	r1, r1, #1
   25f6c:	tst	r0, #1
   25f70:	beq	25ea4 <_obstack_memory_used@@Base+0xe30>
   25f74:	ldr	r2, [fp, #-52]	; 0xffffffcc
   25f78:	tst	r2, #1
   25f7c:	beq	25f90 <_obstack_memory_used@@Base+0xf1c>
   25f80:	cmp	r8, sl
   25f84:	movcc	r7, #92	; 0x5c
   25f88:	strbcc	r7, [r6, r8]
   25f8c:	add	r8, r8, #1
   25f90:	mov	r2, #0
   25f94:	str	r2, [fp, #-52]	; 0xffffffcc
   25f98:	ldr	r2, [sp, #44]	; 0x2c
   25f9c:	and	r9, r3, #1
   25fa0:	cmp	r2, r1
   25fa4:	bls	260a4 <_obstack_memory_used@@Base+0x1030>
   25fa8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   25fac:	cmp	r9, #0
   25fb0:	movwne	r9, #1
   25fb4:	mvn	r7, r2
   25fb8:	orr	r7, r7, r9
   25fbc:	tst	r7, #1
   25fc0:	bne	25f54 <_obstack_memory_used@@Base+0xee0>
   25fc4:	cmp	r8, sl
   25fc8:	movcc	r7, #39	; 0x27
   25fcc:	strbcc	r7, [r6, r8]
   25fd0:	add	r7, r8, #1
   25fd4:	add	r8, r8, #2
   25fd8:	cmp	r7, sl
   25fdc:	movcc	r2, #39	; 0x27
   25fe0:	strbcc	r2, [r6, r7]
   25fe4:	mov	r2, #0
   25fe8:	str	r2, [fp, #-56]	; 0xffffffc8
   25fec:	b	25f54 <_obstack_memory_used@@Base+0xee0>
   25ff0:	cmp	r8, sl
   25ff4:	mov	r2, #1
   25ff8:	movcc	r0, #39	; 0x27
   25ffc:	strbcc	r0, [r6, r8]
   26000:	add	r0, r8, #1
   26004:	cmp	r0, sl
   26008:	movcc	r1, #36	; 0x24
   2600c:	strbcc	r1, [r6, r0]
   26010:	add	r0, r8, #2
   26014:	cmp	r0, sl
   26018:	movcc	r1, #39	; 0x27
   2601c:	strbcc	r1, [r6, r0]
   26020:	add	r0, r8, #3
   26024:	cmp	r0, sl
   26028:	add	r8, r0, #1
   2602c:	str	r2, [fp, #-56]	; 0xffffffc8
   26030:	movcc	r1, #92	; 0x5c
   26034:	strbcc	r1, [r6, r0]
   26038:	ldr	r1, [fp, #-64]	; 0xffffffc0
   2603c:	cmp	r1, #2
   26040:	beq	26094 <_obstack_memory_used@@Base+0x1020>
   26044:	add	r1, r7, #1
   26048:	mov	r4, #0
   2604c:	mov	r9, #1
   26050:	mov	r5, #48	; 0x30
   26054:	cmp	r1, lr
   26058:	bcs	258dc <_obstack_memory_used@@Base+0x868>
   2605c:	ldrb	r1, [ip, r1]
   26060:	sub	r1, r1, #48	; 0x30
   26064:	uxtb	r1, r1
   26068:	cmp	r1, #9
   2606c:	bhi	258dc <_obstack_memory_used@@Base+0x868>
   26070:	cmp	r8, sl
   26074:	movcc	r1, #48	; 0x30
   26078:	strbcc	r1, [r6, r8]
   2607c:	add	r1, r0, #2
   26080:	add	r8, r0, #3
   26084:	cmp	r1, sl
   26088:	movcc	r2, #48	; 0x30
   2608c:	strbcc	r2, [r6, r1]
   26090:	b	258dc <_obstack_memory_used@@Base+0x868>
   26094:	mov	r0, #48	; 0x30
   26098:	mov	r9, #1
   2609c:	mov	r4, #0
   260a0:	b	25b74 <_obstack_memory_used@@Base+0xb00>
   260a4:	cmp	r9, #0
   260a8:	sub	r7, r1, #1
   260ac:	mov	r0, r5
   260b0:	movwne	r9, #1
   260b4:	cmp	r9, #0
   260b8:	bne	260f8 <_obstack_memory_used@@Base+0x1084>
   260bc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   260c0:	tst	r1, #1
   260c4:	beq	260f8 <_obstack_memory_used@@Base+0x1084>
   260c8:	cmp	r8, sl
   260cc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   260d0:	movcc	r1, #39	; 0x27
   260d4:	strbcc	r1, [r6, r8]
   260d8:	add	r1, r8, #1
   260dc:	add	r8, r8, #2
   260e0:	cmp	r1, sl
   260e4:	movcc	r2, #39	; 0x27
   260e8:	strbcc	r2, [r6, r1]
   260ec:	mov	r1, #0
   260f0:	str	r1, [fp, #-56]	; 0xffffffc8
   260f4:	b	25c00 <_obstack_memory_used@@Base+0xb8c>
   260f8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   260fc:	b	25c00 <_obstack_memory_used@@Base+0xb8c>
   26100:	mov	r4, #0
   26104:	b	26140 <_obstack_memory_used@@Base+0x10cc>
   26108:	mov	r4, #0
   2610c:	cmp	lr, r6
   26110:	bls	26140 <_obstack_memory_used@@Base+0x10cc>
   26114:	ldr	ip, [fp, #-84]	; 0xffffffac
   26118:	ldr	r6, [sp, #44]	; 0x2c
   2611c:	ldr	r0, [sp, #24]
   26120:	ldrb	r0, [r0, r6]
   26124:	cmp	r0, #0
   26128:	beq	26148 <_obstack_memory_used@@Base+0x10d4>
   2612c:	add	r6, r6, #1
   26130:	add	r0, r7, r6
   26134:	cmp	r0, lr
   26138:	bcc	2611c <_obstack_memory_used@@Base+0x10a8>
   2613c:	b	26148 <_obstack_memory_used@@Base+0x10d4>
   26140:	ldr	ip, [fp, #-84]	; 0xffffffac
   26144:	ldr	r6, [sp, #44]	; 0x2c
   26148:	mov	r1, r6
   2614c:	ldr	r6, [sp, #80]	; 0x50
   26150:	b	25aa8 <_obstack_memory_used@@Base+0xa34>
   26154:	mov	lr, r7
   26158:	b	26160 <_obstack_memory_used@@Base+0x10ec>
   2615c:	mvn	lr, #0
   26160:	ldr	r7, [fp, #-64]	; 0xffffffc0
   26164:	ldr	r1, [fp, #-72]	; 0xffffffb8
   26168:	eor	r0, r7, #2
   2616c:	orr	r0, r0, r8
   26170:	clz	r0, r0
   26174:	lsr	r0, r0, #5
   26178:	tst	r1, r0
   2617c:	bne	26208 <_obstack_memory_used@@Base+0x1194>
   26180:	mov	r0, r1
   26184:	ldr	r1, [fp, #-80]	; 0xffffffb0
   26188:	cmp	r7, #2
   2618c:	movwne	r1, #1
   26190:	orr	r0, r0, r1
   26194:	tst	r0, #1
   26198:	ldreq	r0, [sp, #60]	; 0x3c
   2619c:	eoreq	r0, r0, #1
   261a0:	tsteq	r0, #1
   261a4:	bne	262b4 <_obstack_memory_used@@Base+0x1240>
   261a8:	mov	r9, lr
   261ac:	tst	r5, #1
   261b0:	bne	26270 <_obstack_memory_used@@Base+0x11fc>
   261b4:	ldr	r6, [sp, #56]	; 0x38
   261b8:	mov	r4, #0
   261bc:	cmp	r6, #0
   261c0:	beq	262ac <_obstack_memory_used@@Base+0x1238>
   261c4:	ldr	r0, [sp, #84]	; 0x54
   261c8:	mov	r1, #0
   261cc:	cmp	sl, #0
   261d0:	mov	r5, #0
   261d4:	str	r1, [fp, #-72]	; 0xffffffb8
   261d8:	beq	253a8 <_obstack_memory_used@@Base+0x334>
   261dc:	b	262b4 <_obstack_memory_used@@Base+0x1240>
   261e0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   261e4:	ldr	r2, [sp, #84]	; 0x54
   261e8:	b	26210 <_obstack_memory_used@@Base+0x119c>
   261ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   261f0:	mov	r2, #1
   261f4:	mov	lr, r4
   261f8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   261fc:	b	26210 <_obstack_memory_used@@Base+0x119c>
   26200:	ldr	r6, [sp, #80]	; 0x50
   26204:	ldr	ip, [fp, #-84]	; 0xffffffac
   26208:	ldr	r2, [sp, #84]	; 0x54
   2620c:	mov	r7, #2
   26210:	mov	r0, #0
   26214:	ldr	r1, [fp, #12]
   26218:	tst	r2, #1
   2621c:	mov	r2, r7
   26220:	mov	r3, lr
   26224:	str	r0, [sp, #8]
   26228:	ldr	r0, [sp, #72]	; 0x48
   2622c:	movwne	r2, #4
   26230:	cmp	r7, #2
   26234:	movne	r2, r7
   26238:	str	r2, [sp]
   2623c:	mov	r2, ip
   26240:	bic	r1, r1, #2
   26244:	str	r0, [sp, #12]
   26248:	ldr	r0, [sp, #76]	; 0x4c
   2624c:	str	r1, [sp, #4]
   26250:	mov	r1, sl
   26254:	str	r0, [sp, #16]
   26258:	mov	r0, r6
   2625c:	bl	25328 <_obstack_memory_used@@Base+0x2b4>
   26260:	mov	r8, r0
   26264:	b	2630c <_obstack_memory_used@@Base+0x1298>
   26268:	ldr	r2, [sp, #84]	; 0x54
   2626c:	b	26210 <_obstack_memory_used@@Base+0x119c>
   26270:	mov	r0, #5
   26274:	ldr	r1, [sp, #56]	; 0x38
   26278:	ldr	r2, [fp, #-84]	; 0xffffffac
   2627c:	mov	r3, r9
   26280:	str	r0, [sp]
   26284:	ldr	r0, [fp, #12]
   26288:	str	r0, [sp, #4]
   2628c:	ldr	r0, [fp, #16]
   26290:	str	r0, [sp, #8]
   26294:	ldr	r0, [sp, #72]	; 0x48
   26298:	str	r0, [sp, #12]
   2629c:	ldr	r0, [sp, #76]	; 0x4c
   262a0:	str	r0, [sp, #16]
   262a4:	ldr	r0, [sp, #80]	; 0x50
   262a8:	b	2625c <_obstack_memory_used@@Base+0x11e8>
   262ac:	mov	r0, #0
   262b0:	str	r0, [fp, #-72]	; 0xffffffb8
   262b4:	ldr	r1, [sp, #92]	; 0x5c
   262b8:	cmp	r1, #0
   262bc:	beq	262fc <_obstack_memory_used@@Base+0x1288>
   262c0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   262c4:	ldr	r2, [sp, #80]	; 0x50
   262c8:	tst	r0, #1
   262cc:	bne	26300 <_obstack_memory_used@@Base+0x128c>
   262d0:	ldrb	r0, [r1]
   262d4:	cmp	r0, #0
   262d8:	beq	26300 <_obstack_memory_used@@Base+0x128c>
   262dc:	add	r1, r1, #1
   262e0:	cmp	r8, sl
   262e4:	strbcc	r0, [r2, r8]
   262e8:	add	r8, r8, #1
   262ec:	ldrb	r0, [r1], #1
   262f0:	cmp	r0, #0
   262f4:	bne	262e0 <_obstack_memory_used@@Base+0x126c>
   262f8:	b	26300 <_obstack_memory_used@@Base+0x128c>
   262fc:	ldr	r2, [sp, #80]	; 0x50
   26300:	cmp	r8, sl
   26304:	movcc	r0, #0
   26308:	strbcc	r0, [r2, r8]
   2630c:	mov	r0, r8
   26310:	sub	sp, fp, #28
   26314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26318:	mov	r2, #1
   2631c:	b	261f8 <_obstack_memory_used@@Base+0x1184>
   26320:	ldr	r2, [sp, #84]	; 0x54
   26324:	mov	r7, #5
   26328:	b	26210 <_obstack_memory_used@@Base+0x119c>
   2632c:	bl	12038 <abort@plt>
   26330:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26334:	add	fp, sp, #28
   26338:	sub	sp, sp, #28
   2633c:	movw	r5, #1000	; 0x3e8
   26340:	cmp	r2, #0
   26344:	mov	r4, r1
   26348:	mov	r7, r0
   2634c:	str	r0, [sp, #20]
   26350:	movt	r5, #4
   26354:	movne	r5, r2
   26358:	bl	11ed0 <__errno_location@plt>
   2635c:	mov	sl, r0
   26360:	ldm	r5, {r0, r1}
   26364:	ldr	r2, [r5, #40]	; 0x28
   26368:	ldr	r3, [r5, #44]	; 0x2c
   2636c:	add	r9, r5, #8
   26370:	ldr	r6, [sl]
   26374:	orr	r8, r1, #1
   26378:	mov	r1, #0
   2637c:	str	r6, [sp, #24]
   26380:	stm	sp, {r0, r8, r9}
   26384:	str	r2, [sp, #12]
   26388:	str	r3, [sp, #16]
   2638c:	mov	r0, #0
   26390:	mov	r2, r7
   26394:	mov	r3, r4
   26398:	mov	r6, r4
   2639c:	bl	25328 <_obstack_memory_used@@Base+0x2b4>
   263a0:	add	r7, r0, #1
   263a4:	mov	r0, r7
   263a8:	bl	27ed0 <_obstack_memory_used@@Base+0x2e5c>
   263ac:	mov	r4, r0
   263b0:	ldr	r0, [r5]
   263b4:	ldr	r2, [r5, #44]	; 0x2c
   263b8:	ldr	r1, [r5, #40]	; 0x28
   263bc:	mov	r3, r6
   263c0:	stm	sp, {r0, r8, r9}
   263c4:	str	r2, [sp, #16]
   263c8:	str	r1, [sp, #12]
   263cc:	mov	r0, r4
   263d0:	mov	r1, r7
   263d4:	ldr	r2, [sp, #20]
   263d8:	bl	25328 <_obstack_memory_used@@Base+0x2b4>
   263dc:	ldr	r0, [sp, #24]
   263e0:	str	r0, [sl]
   263e4:	mov	r0, r4
   263e8:	sub	sp, fp, #28
   263ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   263f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   263f4:	add	fp, sp, #28
   263f8:	sub	sp, sp, #36	; 0x24
   263fc:	movw	r8, #1000	; 0x3e8
   26400:	cmp	r3, #0
   26404:	mov	r4, r2
   26408:	str	r2, [sp, #24]
   2640c:	mov	r5, r1
   26410:	mov	r6, r0
   26414:	str	r0, [sp, #20]
   26418:	movt	r8, #4
   2641c:	movne	r8, r3
   26420:	bl	11ed0 <__errno_location@plt>
   26424:	str	r0, [sp, #28]
   26428:	cmp	r4, #0
   2642c:	add	sl, r8, #8
   26430:	ldm	r8, {r3, r9}
   26434:	ldr	r7, [r0]
   26438:	ldr	r1, [r8, #40]	; 0x28
   2643c:	ldr	r2, [r8, #44]	; 0x2c
   26440:	mov	r0, #0
   26444:	orreq	r9, r9, #1
   26448:	str	r7, [sp, #32]
   2644c:	mov	r7, r5
   26450:	stm	sp, {r3, r9, sl}
   26454:	str	r1, [sp, #12]
   26458:	str	r2, [sp, #16]
   2645c:	mov	r1, #0
   26460:	mov	r2, r6
   26464:	mov	r3, r5
   26468:	bl	25328 <_obstack_memory_used@@Base+0x2b4>
   2646c:	add	r4, r0, #1
   26470:	mov	r5, r0
   26474:	mov	r0, r4
   26478:	bl	27ed0 <_obstack_memory_used@@Base+0x2e5c>
   2647c:	mov	r6, r0
   26480:	ldr	r0, [r8]
   26484:	ldr	r2, [r8, #44]	; 0x2c
   26488:	ldr	r1, [r8, #40]	; 0x28
   2648c:	mov	r3, r7
   26490:	stm	sp, {r0, r9, sl}
   26494:	str	r2, [sp, #16]
   26498:	str	r1, [sp, #12]
   2649c:	mov	r0, r6
   264a0:	mov	r1, r4
   264a4:	ldr	r2, [sp, #20]
   264a8:	bl	25328 <_obstack_memory_used@@Base+0x2b4>
   264ac:	ldr	r0, [sp, #24]
   264b0:	ldr	r1, [sp, #32]
   264b4:	ldr	r2, [sp, #28]
   264b8:	cmp	r0, #0
   264bc:	str	r1, [r2]
   264c0:	strne	r5, [r0]
   264c4:	mov	r0, r6
   264c8:	sub	sp, fp, #28
   264cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   264d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   264d4:	add	fp, sp, #24
   264d8:	movw	r5, #62140	; 0xf2bc
   264dc:	movw	r8, #62136	; 0xf2b8
   264e0:	movt	r5, #3
   264e4:	movt	r8, #3
   264e8:	ldr	r0, [r5]
   264ec:	ldr	r4, [r8]
   264f0:	cmp	r0, #2
   264f4:	blt	26520 <_obstack_memory_used@@Base+0x14ac>
   264f8:	add	r7, r4, #12
   264fc:	mov	r6, #0
   26500:	ldr	r0, [r7, r6, lsl #3]
   26504:	bl	2046c <__assert_fail@plt+0xe3e0>
   26508:	ldr	r1, [r5]
   2650c:	add	r2, r6, #2
   26510:	add	r0, r6, #1
   26514:	mov	r6, r0
   26518:	cmp	r2, r1
   2651c:	blt	26500 <_obstack_memory_used@@Base+0x148c>
   26520:	ldr	r0, [r4, #4]
   26524:	movw	r7, #1048	; 0x418
   26528:	movt	r7, #4
   2652c:	cmp	r0, r7
   26530:	beq	26548 <_obstack_memory_used@@Base+0x14d4>
   26534:	bl	2046c <__assert_fail@plt+0xe3e0>
   26538:	movw	r0, #62144	; 0xf2c0
   2653c:	mov	r6, #256	; 0x100
   26540:	movt	r0, #3
   26544:	strd	r6, [r0]
   26548:	movw	r6, #62144	; 0xf2c0
   2654c:	movt	r6, #3
   26550:	cmp	r4, r6
   26554:	beq	26564 <_obstack_memory_used@@Base+0x14f0>
   26558:	mov	r0, r4
   2655c:	bl	2046c <__assert_fail@plt+0xe3e0>
   26560:	str	r6, [r8]
   26564:	mov	r0, #1
   26568:	str	r0, [r5]
   2656c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   26570:	movw	r3, #1000	; 0x3e8
   26574:	mvn	r2, #0
   26578:	movt	r3, #4
   2657c:	b	26580 <_obstack_memory_used@@Base+0x150c>
   26580:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26584:	add	fp, sp, #28
   26588:	sub	sp, sp, #44	; 0x2c
   2658c:	mov	r7, r3
   26590:	str	r2, [sp, #36]	; 0x24
   26594:	str	r1, [sp, #32]
   26598:	mov	r5, r0
   2659c:	bl	11ed0 <__errno_location@plt>
   265a0:	cmp	r5, #0
   265a4:	blt	26710 <_obstack_memory_used@@Base+0x169c>
   265a8:	cmn	r5, #-2147483647	; 0x80000001
   265ac:	beq	26710 <_obstack_memory_used@@Base+0x169c>
   265b0:	movw	r8, #62140	; 0xf2bc
   265b4:	movw	r4, #62136	; 0xf2b8
   265b8:	str	r0, [sp, #28]
   265bc:	ldr	r0, [r0]
   265c0:	movt	r8, #3
   265c4:	movt	r4, #3
   265c8:	ldr	r1, [r8]
   265cc:	ldr	r6, [r4]
   265d0:	str	r0, [sp, #24]
   265d4:	cmp	r1, r5
   265d8:	ble	265e4 <_obstack_memory_used@@Base+0x1570>
   265dc:	mov	sl, r6
   265e0:	b	2664c <_obstack_memory_used@@Base+0x15d8>
   265e4:	movw	r9, #62144	; 0xf2c0
   265e8:	mov	r0, #8
   265ec:	add	r2, r5, #1
   265f0:	str	r1, [fp, #-32]	; 0xffffffe0
   265f4:	mvn	r3, #-2147483648	; 0x80000000
   265f8:	movt	r9, #3
   265fc:	str	r0, [sp]
   26600:	sub	r2, r2, r1
   26604:	sub	r1, fp, #32
   26608:	subs	r0, r6, r9
   2660c:	movne	r0, r6
   26610:	bl	280d0 <_obstack_memory_used@@Base+0x305c>
   26614:	cmp	r6, r9
   26618:	mov	sl, r0
   2661c:	str	r0, [r4]
   26620:	ldrdeq	r0, [r9]
   26624:	stmeq	sl, {r0, r1}
   26628:	ldr	r1, [r8]
   2662c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   26630:	add	r0, sl, r1, lsl #3
   26634:	sub	r1, r2, r1
   26638:	lsl	r2, r1, #3
   2663c:	mov	r1, #0
   26640:	bl	11ef4 <memset@plt>
   26644:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26648:	str	r0, [r8]
   2664c:	mov	r9, sl
   26650:	ldr	r6, [r9, r5, lsl #3]!
   26654:	ldr	r4, [r9, #4]!
   26658:	ldm	r7, {r0, r1}
   2665c:	ldr	r2, [r7, #40]	; 0x28
   26660:	ldr	r3, [r7, #44]	; 0x2c
   26664:	orr	r8, r1, #1
   26668:	add	r1, r7, #8
   2666c:	stm	sp, {r0, r8}
   26670:	add	r0, sp, #8
   26674:	str	r1, [sp, #20]
   26678:	stm	r0, {r1, r2, r3}
   2667c:	mov	r0, r4
   26680:	mov	r1, r6
   26684:	ldr	r2, [sp, #32]
   26688:	ldr	r3, [sp, #36]	; 0x24
   2668c:	bl	25328 <_obstack_memory_used@@Base+0x2b4>
   26690:	cmp	r6, r0
   26694:	bhi	266f8 <_obstack_memory_used@@Base+0x1684>
   26698:	add	r6, r0, #1
   2669c:	movw	r0, #1048	; 0x418
   266a0:	movt	r0, #4
   266a4:	str	r6, [sl, r5, lsl #3]
   266a8:	cmp	r4, r0
   266ac:	beq	266b8 <_obstack_memory_used@@Base+0x1644>
   266b0:	mov	r0, r4
   266b4:	bl	2046c <__assert_fail@plt+0xe3e0>
   266b8:	mov	r0, r6
   266bc:	bl	27ed0 <_obstack_memory_used@@Base+0x2e5c>
   266c0:	str	r0, [r9]
   266c4:	mov	r4, r0
   266c8:	add	r3, sp, #8
   266cc:	ldr	r0, [r7]
   266d0:	ldr	r1, [r7, #40]	; 0x28
   266d4:	ldr	r2, [r7, #44]	; 0x2c
   266d8:	stm	sp, {r0, r8}
   266dc:	ldr	r0, [sp, #20]
   266e0:	stm	r3, {r0, r1, r2}
   266e4:	mov	r0, r4
   266e8:	mov	r1, r6
   266ec:	ldr	r2, [sp, #32]
   266f0:	ldr	r3, [sp, #36]	; 0x24
   266f4:	bl	25328 <_obstack_memory_used@@Base+0x2b4>
   266f8:	ldr	r0, [sp, #28]
   266fc:	ldr	r1, [sp, #24]
   26700:	str	r1, [r0]
   26704:	mov	r0, r4
   26708:	sub	sp, fp, #28
   2670c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26710:	bl	12038 <abort@plt>
   26714:	movw	r3, #1000	; 0x3e8
   26718:	movt	r3, #4
   2671c:	b	26580 <_obstack_memory_used@@Base+0x150c>
   26720:	movw	r3, #1000	; 0x3e8
   26724:	mov	r1, r0
   26728:	mov	r0, #0
   2672c:	mvn	r2, #0
   26730:	movt	r3, #4
   26734:	b	26580 <_obstack_memory_used@@Base+0x150c>
   26738:	movw	r3, #1000	; 0x3e8
   2673c:	mov	r2, r1
   26740:	mov	r1, r0
   26744:	mov	r0, #0
   26748:	movt	r3, #4
   2674c:	b	26580 <_obstack_memory_used@@Base+0x150c>
   26750:	push	{fp, lr}
   26754:	mov	fp, sp
   26758:	sub	sp, sp, #48	; 0x30
   2675c:	vmov.i32	q8, #0	; 0x00000000
   26760:	mov	ip, #32
   26764:	mov	r3, sp
   26768:	mov	lr, r2
   2676c:	cmp	r1, #10
   26770:	add	r2, r3, #16
   26774:	vst1.64	{d16-d17}, [r3], ip
   26778:	vst1.64	{d16-d17}, [r3]
   2677c:	vst1.64	{d16-d17}, [r2]
   26780:	beq	267a0 <_obstack_memory_used@@Base+0x172c>
   26784:	str	r1, [sp]
   26788:	mov	r3, sp
   2678c:	mov	r1, lr
   26790:	mvn	r2, #0
   26794:	bl	26580 <_obstack_memory_used@@Base+0x150c>
   26798:	mov	sp, fp
   2679c:	pop	{fp, pc}
   267a0:	bl	12038 <abort@plt>
   267a4:	push	{r4, sl, fp, lr}
   267a8:	add	fp, sp, #8
   267ac:	sub	sp, sp, #48	; 0x30
   267b0:	mov	ip, r3
   267b4:	mov	r3, sp
   267b8:	vmov.i32	q8, #0	; 0x00000000
   267bc:	mov	lr, #32
   267c0:	cmp	r1, #10
   267c4:	add	r4, r3, #16
   267c8:	vst1.64	{d16-d17}, [r3], lr
   267cc:	vst1.64	{d16-d17}, [r3]
   267d0:	vst1.64	{d16-d17}, [r4]
   267d4:	beq	267f4 <_obstack_memory_used@@Base+0x1780>
   267d8:	str	r1, [sp]
   267dc:	mov	r1, r2
   267e0:	mov	r3, sp
   267e4:	mov	r2, ip
   267e8:	bl	26580 <_obstack_memory_used@@Base+0x150c>
   267ec:	sub	sp, fp, #8
   267f0:	pop	{r4, sl, fp, pc}
   267f4:	bl	12038 <abort@plt>
   267f8:	push	{fp, lr}
   267fc:	mov	fp, sp
   26800:	sub	sp, sp, #48	; 0x30
   26804:	mov	r3, sp
   26808:	vmov.i32	q8, #0	; 0x00000000
   2680c:	mov	ip, #32
   26810:	cmp	r0, #10
   26814:	add	r2, r3, #16
   26818:	vst1.64	{d16-d17}, [r3], ip
   2681c:	vst1.64	{d16-d17}, [r3]
   26820:	vst1.64	{d16-d17}, [r2]
   26824:	beq	26844 <_obstack_memory_used@@Base+0x17d0>
   26828:	str	r0, [sp]
   2682c:	mov	r3, sp
   26830:	mov	r0, #0
   26834:	mvn	r2, #0
   26838:	bl	26580 <_obstack_memory_used@@Base+0x150c>
   2683c:	mov	sp, fp
   26840:	pop	{fp, pc}
   26844:	bl	12038 <abort@plt>
   26848:	push	{fp, lr}
   2684c:	mov	fp, sp
   26850:	sub	sp, sp, #48	; 0x30
   26854:	mov	r3, sp
   26858:	vmov.i32	q8, #0	; 0x00000000
   2685c:	mov	ip, #32
   26860:	cmp	r0, #10
   26864:	add	lr, r3, #16
   26868:	vst1.64	{d16-d17}, [r3], ip
   2686c:	vst1.64	{d16-d17}, [r3]
   26870:	vst1.64	{d16-d17}, [lr]
   26874:	beq	26890 <_obstack_memory_used@@Base+0x181c>
   26878:	str	r0, [sp]
   2687c:	mov	r3, sp
   26880:	mov	r0, #0
   26884:	bl	26580 <_obstack_memory_used@@Base+0x150c>
   26888:	mov	sp, fp
   2688c:	pop	{fp, pc}
   26890:	bl	12038 <abort@plt>
   26894:	push	{r4, sl, fp, lr}
   26898:	add	fp, sp, #8
   2689c:	sub	sp, sp, #48	; 0x30
   268a0:	mov	lr, r0
   268a4:	movw	r0, #1000	; 0x3e8
   268a8:	mov	r3, #32
   268ac:	mov	ip, r1
   268b0:	mov	r4, #1
   268b4:	movt	r0, #4
   268b8:	add	r1, r0, #16
   268bc:	vld1.64	{d16-d17}, [r0], r3
   268c0:	mov	r3, sp
   268c4:	vld1.64	{d18-d19}, [r1]
   268c8:	add	r1, r3, #16
   268cc:	vld1.64	{d20-d21}, [r0]
   268d0:	add	r0, r3, #32
   268d4:	vst1.64	{d18-d19}, [r1]
   268d8:	mov	r1, r3
   268dc:	vst1.64	{d20-d21}, [r0]
   268e0:	mov	r0, #28
   268e4:	and	r0, r0, r2, lsr #3
   268e8:	and	r2, r2, #31
   268ec:	vst1.64	{d16-d17}, [r1], r0
   268f0:	ldr	r0, [r1, #8]
   268f4:	bic	r4, r4, r0, lsr r2
   268f8:	eor	r0, r0, r4, lsl r2
   268fc:	mov	r2, ip
   26900:	str	r0, [r1, #8]
   26904:	mov	r0, #0
   26908:	mov	r1, lr
   2690c:	bl	26580 <_obstack_memory_used@@Base+0x150c>
   26910:	sub	sp, fp, #8
   26914:	pop	{r4, sl, fp, pc}
   26918:	push	{fp, lr}
   2691c:	mov	fp, sp
   26920:	sub	sp, sp, #48	; 0x30
   26924:	mov	ip, r0
   26928:	movw	r0, #1000	; 0x3e8
   2692c:	mov	r3, #32
   26930:	movt	r0, #4
   26934:	add	r2, r0, #16
   26938:	vld1.64	{d16-d17}, [r0], r3
   2693c:	mov	r3, sp
   26940:	vld1.64	{d18-d19}, [r2]
   26944:	add	r2, r3, #16
   26948:	vld1.64	{d20-d21}, [r0]
   2694c:	add	r0, r3, #32
   26950:	vst1.64	{d18-d19}, [r2]
   26954:	mov	r2, r3
   26958:	vst1.64	{d20-d21}, [r0]
   2695c:	mov	r0, #28
   26960:	and	r0, r0, r1, lsr #3
   26964:	and	r1, r1, #31
   26968:	vst1.64	{d16-d17}, [r2], r0
   2696c:	mov	r0, #1
   26970:	ldr	lr, [r2, #8]
   26974:	bic	r0, r0, lr, lsr r1
   26978:	eor	r0, lr, r0, lsl r1
   2697c:	mov	r1, ip
   26980:	str	r0, [r2, #8]
   26984:	mov	r0, #0
   26988:	mvn	r2, #0
   2698c:	bl	26580 <_obstack_memory_used@@Base+0x150c>
   26990:	mov	sp, fp
   26994:	pop	{fp, pc}
   26998:	push	{fp, lr}
   2699c:	mov	fp, sp
   269a0:	sub	sp, sp, #48	; 0x30
   269a4:	movw	r2, #1000	; 0x3e8
   269a8:	mov	r3, #32
   269ac:	mov	r1, r0
   269b0:	movt	r2, #4
   269b4:	add	r0, r2, #16
   269b8:	vld1.64	{d16-d17}, [r2], r3
   269bc:	mov	r3, sp
   269c0:	vld1.64	{d18-d19}, [r0]
   269c4:	add	r0, r3, #16
   269c8:	vld1.64	{d20-d21}, [r2]
   269cc:	mov	r2, r3
   269d0:	vst1.64	{d18-d19}, [r0]
   269d4:	add	r0, r3, #32
   269d8:	vst1.64	{d20-d21}, [r0]
   269dc:	mov	r0, #12
   269e0:	vst1.64	{d16-d17}, [r2], r0
   269e4:	ldr	r0, [r2]
   269e8:	orr	r0, r0, #67108864	; 0x4000000
   269ec:	str	r0, [r2]
   269f0:	mov	r0, #0
   269f4:	mvn	r2, #0
   269f8:	bl	26580 <_obstack_memory_used@@Base+0x150c>
   269fc:	mov	sp, fp
   26a00:	pop	{fp, pc}
   26a04:	push	{fp, lr}
   26a08:	mov	fp, sp
   26a0c:	sub	sp, sp, #48	; 0x30
   26a10:	mov	ip, r1
   26a14:	mov	r1, r0
   26a18:	movw	r0, #1000	; 0x3e8
   26a1c:	mov	r3, #32
   26a20:	movt	r0, #4
   26a24:	add	r2, r0, #16
   26a28:	vld1.64	{d16-d17}, [r0], r3
   26a2c:	mov	r3, sp
   26a30:	vld1.64	{d18-d19}, [r2]
   26a34:	add	r2, r3, #16
   26a38:	vld1.64	{d20-d21}, [r0]
   26a3c:	add	r0, r3, #32
   26a40:	vst1.64	{d18-d19}, [r2]
   26a44:	mov	r2, r3
   26a48:	vst1.64	{d20-d21}, [r0]
   26a4c:	mov	r0, #12
   26a50:	vst1.64	{d16-d17}, [r2], r0
   26a54:	ldr	r0, [r2]
   26a58:	orr	r0, r0, #67108864	; 0x4000000
   26a5c:	str	r0, [r2]
   26a60:	mov	r0, #0
   26a64:	mov	r2, ip
   26a68:	bl	26580 <_obstack_memory_used@@Base+0x150c>
   26a6c:	mov	sp, fp
   26a70:	pop	{fp, pc}
   26a74:	push	{r4, sl, fp, lr}
   26a78:	add	fp, sp, #8
   26a7c:	sub	sp, sp, #96	; 0x60
   26a80:	mov	ip, r2
   26a84:	mov	r2, sp
   26a88:	vmov.i32	q8, #0	; 0x00000000
   26a8c:	mov	r4, #28
   26a90:	cmp	r1, #10
   26a94:	mov	r3, r2
   26a98:	add	lr, r2, #16
   26a9c:	vst1.64	{d16-d17}, [r3], r4
   26aa0:	vst1.64	{d16-d17}, [lr]
   26aa4:	vst1.32	{d16-d17}, [r3]
   26aa8:	beq	26af8 <_obstack_memory_used@@Base+0x1a84>
   26aac:	vld1.64	{d16-d17}, [r2], r4
   26ab0:	vld1.64	{d18-d19}, [lr]
   26ab4:	add	r3, sp, #48	; 0x30
   26ab8:	add	r4, r3, #4
   26abc:	vld1.32	{d20-d21}, [r2]
   26ac0:	add	r2, r3, #20
   26ac4:	vst1.32	{d16-d17}, [r4]
   26ac8:	vst1.32	{d18-d19}, [r2]
   26acc:	add	r2, r3, #32
   26ad0:	vst1.32	{d20-d21}, [r2]
   26ad4:	str	r1, [sp, #48]	; 0x30
   26ad8:	mvn	r2, #0
   26adc:	ldr	r1, [sp, #60]	; 0x3c
   26ae0:	orr	r1, r1, #67108864	; 0x4000000
   26ae4:	str	r1, [sp, #60]	; 0x3c
   26ae8:	mov	r1, ip
   26aec:	bl	26580 <_obstack_memory_used@@Base+0x150c>
   26af0:	sub	sp, fp, #8
   26af4:	pop	{r4, sl, fp, pc}
   26af8:	bl	12038 <abort@plt>
   26afc:	push	{r4, r5, fp, lr}
   26b00:	add	fp, sp, #8
   26b04:	sub	sp, sp, #48	; 0x30
   26b08:	mov	ip, r3
   26b0c:	movw	r3, #1000	; 0x3e8
   26b10:	mov	lr, #32
   26b14:	cmp	r1, #0
   26b18:	mov	r5, sp
   26b1c:	movt	r3, #4
   26b20:	cmpne	r2, #0
   26b24:	add	r4, r3, #16
   26b28:	vld1.64	{d16-d17}, [r3], lr
   26b2c:	vld1.64	{d18-d19}, [r4]
   26b30:	add	r4, r5, #16
   26b34:	vld1.64	{d20-d21}, [r3]
   26b38:	vst1.64	{d16-d17}, [r5], lr
   26b3c:	mov	r3, #10
   26b40:	vst1.64	{d18-d19}, [r4]
   26b44:	vst1.64	{d20-d21}, [r5]
   26b48:	str	r3, [sp]
   26b4c:	bne	26b54 <_obstack_memory_used@@Base+0x1ae0>
   26b50:	bl	12038 <abort@plt>
   26b54:	str	r2, [sp, #44]	; 0x2c
   26b58:	str	r1, [sp, #40]	; 0x28
   26b5c:	mov	r3, sp
   26b60:	mov	r1, ip
   26b64:	mvn	r2, #0
   26b68:	bl	26580 <_obstack_memory_used@@Base+0x150c>
   26b6c:	sub	sp, fp, #8
   26b70:	pop	{r4, r5, fp, pc}
   26b74:	push	{r4, r5, fp, lr}
   26b78:	add	fp, sp, #8
   26b7c:	sub	sp, sp, #48	; 0x30
   26b80:	mov	lr, r3
   26b84:	movw	r3, #1000	; 0x3e8
   26b88:	mov	ip, #32
   26b8c:	cmp	r1, #0
   26b90:	mov	r5, sp
   26b94:	movt	r3, #4
   26b98:	cmpne	r2, #0
   26b9c:	add	r4, r3, #16
   26ba0:	vld1.64	{d16-d17}, [r3], ip
   26ba4:	vld1.64	{d18-d19}, [r4]
   26ba8:	add	r4, r5, #16
   26bac:	vld1.64	{d20-d21}, [r3]
   26bb0:	vst1.64	{d16-d17}, [r5], ip
   26bb4:	mov	r3, #10
   26bb8:	vst1.64	{d18-d19}, [r4]
   26bbc:	vst1.64	{d20-d21}, [r5]
   26bc0:	str	r3, [sp]
   26bc4:	bne	26bcc <_obstack_memory_used@@Base+0x1b58>
   26bc8:	bl	12038 <abort@plt>
   26bcc:	ldr	ip, [fp, #8]
   26bd0:	str	r2, [sp, #44]	; 0x2c
   26bd4:	str	r1, [sp, #40]	; 0x28
   26bd8:	mov	r3, sp
   26bdc:	mov	r1, lr
   26be0:	mov	r2, ip
   26be4:	bl	26580 <_obstack_memory_used@@Base+0x150c>
   26be8:	sub	sp, fp, #8
   26bec:	pop	{r4, r5, fp, pc}
   26bf0:	push	{r4, sl, fp, lr}
   26bf4:	add	fp, sp, #8
   26bf8:	sub	sp, sp, #48	; 0x30
   26bfc:	mov	ip, r2
   26c00:	movw	r2, #1000	; 0x3e8
   26c04:	mov	lr, #32
   26c08:	cmp	r0, #0
   26c0c:	mov	r4, sp
   26c10:	movt	r2, #4
   26c14:	cmpne	r1, #0
   26c18:	add	r3, r2, #16
   26c1c:	vld1.64	{d16-d17}, [r2], lr
   26c20:	vld1.64	{d18-d19}, [r3]
   26c24:	add	r3, r4, #16
   26c28:	vld1.64	{d20-d21}, [r2]
   26c2c:	vst1.64	{d16-d17}, [r4], lr
   26c30:	mov	r2, #10
   26c34:	vst1.64	{d18-d19}, [r3]
   26c38:	vst1.64	{d20-d21}, [r4]
   26c3c:	str	r2, [sp]
   26c40:	bne	26c48 <_obstack_memory_used@@Base+0x1bd4>
   26c44:	bl	12038 <abort@plt>
   26c48:	str	r1, [sp, #44]	; 0x2c
   26c4c:	str	r0, [sp, #40]	; 0x28
   26c50:	mov	r3, sp
   26c54:	mov	r0, #0
   26c58:	mov	r1, ip
   26c5c:	mvn	r2, #0
   26c60:	bl	26580 <_obstack_memory_used@@Base+0x150c>
   26c64:	sub	sp, fp, #8
   26c68:	pop	{r4, sl, fp, pc}
   26c6c:	push	{r4, r5, fp, lr}
   26c70:	add	fp, sp, #8
   26c74:	sub	sp, sp, #48	; 0x30
   26c78:	mov	lr, r2
   26c7c:	movw	r2, #1000	; 0x3e8
   26c80:	mov	ip, r3
   26c84:	mov	r3, #32
   26c88:	cmp	r0, #0
   26c8c:	mov	r5, sp
   26c90:	movt	r2, #4
   26c94:	cmpne	r1, #0
   26c98:	add	r4, r2, #16
   26c9c:	vld1.64	{d16-d17}, [r2], r3
   26ca0:	vld1.64	{d18-d19}, [r4]
   26ca4:	add	r4, r5, #16
   26ca8:	vld1.64	{d20-d21}, [r2]
   26cac:	vst1.64	{d16-d17}, [r5], r3
   26cb0:	mov	r2, #10
   26cb4:	vst1.64	{d18-d19}, [r4]
   26cb8:	vst1.64	{d20-d21}, [r5]
   26cbc:	str	r2, [sp]
   26cc0:	bne	26cc8 <_obstack_memory_used@@Base+0x1c54>
   26cc4:	bl	12038 <abort@plt>
   26cc8:	str	r1, [sp, #44]	; 0x2c
   26ccc:	str	r0, [sp, #40]	; 0x28
   26cd0:	mov	r3, sp
   26cd4:	mov	r0, #0
   26cd8:	mov	r1, lr
   26cdc:	mov	r2, ip
   26ce0:	bl	26580 <_obstack_memory_used@@Base+0x150c>
   26ce4:	sub	sp, fp, #8
   26ce8:	pop	{r4, r5, fp, pc}
   26cec:	movw	r3, #62152	; 0xf2c8
   26cf0:	movt	r3, #3
   26cf4:	b	26580 <_obstack_memory_used@@Base+0x150c>
   26cf8:	movw	r3, #62152	; 0xf2c8
   26cfc:	mov	r2, r1
   26d00:	mov	r1, r0
   26d04:	mov	r0, #0
   26d08:	movt	r3, #3
   26d0c:	b	26580 <_obstack_memory_used@@Base+0x150c>
   26d10:	movw	r3, #62152	; 0xf2c8
   26d14:	mvn	r2, #0
   26d18:	movt	r3, #3
   26d1c:	b	26580 <_obstack_memory_used@@Base+0x150c>
   26d20:	movw	r3, #62152	; 0xf2c8
   26d24:	mov	r1, r0
   26d28:	mov	r0, #0
   26d2c:	mvn	r2, #0
   26d30:	movt	r3, #3
   26d34:	b	26580 <_obstack_memory_used@@Base+0x150c>
   26d38:	push	{r4, r5, fp, lr}
   26d3c:	add	fp, sp, #8
   26d40:	mov	r5, r0
   26d44:	mov	r4, r1
   26d48:	mov	r0, #0
   26d4c:	mov	r2, #5
   26d50:	mov	r1, r5
   26d54:	bl	11cb4 <dcgettext@plt>
   26d58:	cmp	r0, r5
   26d5c:	popne	{r4, r5, fp, pc}
   26d60:	bl	29740 <_obstack_memory_used@@Base+0x46cc>
   26d64:	ldrb	r1, [r0]
   26d68:	and	r1, r1, #223	; 0xdf
   26d6c:	cmp	r1, #71	; 0x47
   26d70:	beq	26dd8 <_obstack_memory_used@@Base+0x1d64>
   26d74:	cmp	r1, #85	; 0x55
   26d78:	bne	26dfc <_obstack_memory_used@@Base+0x1d88>
   26d7c:	ldrb	r1, [r0, #1]
   26d80:	and	r1, r1, #223	; 0xdf
   26d84:	cmp	r1, #84	; 0x54
   26d88:	bne	26dfc <_obstack_memory_used@@Base+0x1d88>
   26d8c:	ldrb	r1, [r0, #2]
   26d90:	and	r1, r1, #223	; 0xdf
   26d94:	cmp	r1, #70	; 0x46
   26d98:	ldrbeq	r1, [r0, #3]
   26d9c:	cmpeq	r1, #45	; 0x2d
   26da0:	bne	26dfc <_obstack_memory_used@@Base+0x1d88>
   26da4:	ldrb	r1, [r0, #4]
   26da8:	cmp	r1, #56	; 0x38
   26dac:	ldrbeq	r0, [r0, #5]
   26db0:	cmpeq	r0, #0
   26db4:	bne	26dfc <_obstack_memory_used@@Base+0x1d88>
   26db8:	ldrb	r1, [r5]
   26dbc:	movw	r2, #57148	; 0xdf3c
   26dc0:	movw	r0, #57152	; 0xdf40
   26dc4:	movt	r2, #2
   26dc8:	movt	r0, #2
   26dcc:	cmp	r1, #96	; 0x60
   26dd0:	moveq	r0, r2
   26dd4:	pop	{r4, r5, fp, pc}
   26dd8:	ldrb	r1, [r0, #1]
   26ddc:	and	r1, r1, #223	; 0xdf
   26de0:	cmp	r1, #66	; 0x42
   26de4:	bne	26dfc <_obstack_memory_used@@Base+0x1d88>
   26de8:	ldrb	r1, [r0, #2]
   26dec:	cmp	r1, #49	; 0x31
   26df0:	ldrbeq	r1, [r0, #3]
   26df4:	cmpeq	r1, #56	; 0x38
   26df8:	beq	26e18 <_obstack_memory_used@@Base+0x1da4>
   26dfc:	movw	r1, #57144	; 0xdf38
   26e00:	movw	r0, #58060	; 0xe2cc
   26e04:	cmp	r4, #9
   26e08:	movt	r1, #2
   26e0c:	movt	r0, #2
   26e10:	moveq	r0, r1
   26e14:	pop	{r4, r5, fp, pc}
   26e18:	ldrb	r1, [r0, #4]
   26e1c:	cmp	r1, #48	; 0x30
   26e20:	ldrbeq	r1, [r0, #5]
   26e24:	cmpeq	r1, #51	; 0x33
   26e28:	bne	26dfc <_obstack_memory_used@@Base+0x1d88>
   26e2c:	ldrb	r1, [r0, #6]
   26e30:	cmp	r1, #48	; 0x30
   26e34:	ldrbeq	r0, [r0, #7]
   26e38:	cmpeq	r0, #0
   26e3c:	bne	26dfc <_obstack_memory_used@@Base+0x1d88>
   26e40:	ldrb	r1, [r5]
   26e44:	movw	r2, #57156	; 0xdf44
   26e48:	movw	r0, #57160	; 0xdf48
   26e4c:	movt	r2, #2
   26e50:	movt	r0, #2
   26e54:	b	26dcc <_obstack_memory_used@@Base+0x1d58>
   26e58:	push	{r4, r5, r6, sl, fp, lr}
   26e5c:	add	fp, sp, #16
   26e60:	ldr	r4, [r0], #8
   26e64:	mov	r5, r1
   26e68:	cmp	r4, r0
   26e6c:	beq	26e90 <_obstack_memory_used@@Base+0x1e1c>
   26e70:	mov	r0, r4
   26e74:	mov	r1, r5
   26e78:	bl	29490 <_obstack_memory_used@@Base+0x441c>
   26e7c:	mov	r6, r0
   26e80:	cmp	r0, #0
   26e84:	moveq	r6, r4
   26e88:	mov	r0, r6
   26e8c:	pop	{r4, r5, r6, sl, fp, pc}
   26e90:	mov	r0, r5
   26e94:	bl	29460 <_obstack_memory_used@@Base+0x43ec>
   26e98:	cmp	r0, #0
   26e9c:	moveq	r6, #0
   26ea0:	moveq	r0, r6
   26ea4:	popeq	{r4, r5, r6, sl, fp, pc}
   26ea8:	mov	r1, r4
   26eac:	mov	r2, r5
   26eb0:	mov	r6, r0
   26eb4:	bl	11c60 <memcpy@plt>
   26eb8:	mov	r0, r6
   26ebc:	pop	{r4, r5, r6, sl, fp, pc}
   26ec0:	push	{r4, r5, r6, sl, fp, lr}
   26ec4:	add	fp, sp, #16
   26ec8:	mov	r4, r0
   26ecc:	add	r6, r0, #8
   26ed0:	ldrd	r0, [r0]
   26ed4:	lsl	r5, r1, #1
   26ed8:	cmp	r0, r6
   26edc:	beq	26ee8 <_obstack_memory_used@@Base+0x1e74>
   26ee0:	bl	2046c <__assert_fail@plt+0xe3e0>
   26ee4:	ldr	r1, [r4, #4]
   26ee8:	cmp	r5, r1
   26eec:	bcc	26f10 <_obstack_memory_used@@Base+0x1e9c>
   26ef0:	mov	r0, r5
   26ef4:	bl	29460 <_obstack_memory_used@@Base+0x43ec>
   26ef8:	cmp	r0, #0
   26efc:	strne	r0, [r4]
   26f00:	movne	r0, #1
   26f04:	strne	r5, [r4, #4]
   26f08:	popne	{r4, r5, r6, sl, fp, pc}
   26f0c:	b	26f1c <_obstack_memory_used@@Base+0x1ea8>
   26f10:	bl	11ed0 <__errno_location@plt>
   26f14:	mov	r1, #12
   26f18:	str	r1, [r0]
   26f1c:	mov	r0, #0
   26f20:	mov	r5, #1024	; 0x400
   26f24:	str	r6, [r4]
   26f28:	str	r5, [r4, #4]
   26f2c:	pop	{r4, r5, r6, sl, fp, pc}
   26f30:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   26f34:	add	fp, sp, #24
   26f38:	ldrd	r8, [r0]
   26f3c:	add	r7, r0, #8
   26f40:	mov	r4, r0
   26f44:	lsl	r5, r9, #1
   26f48:	cmp	r8, r7
   26f4c:	beq	26f78 <_obstack_memory_used@@Base+0x1f04>
   26f50:	cmp	r5, r9
   26f54:	bcc	26fac <_obstack_memory_used@@Base+0x1f38>
   26f58:	mov	r0, r8
   26f5c:	mov	r1, r5
   26f60:	bl	29490 <_obstack_memory_used@@Base+0x441c>
   26f64:	mov	r6, r0
   26f68:	cmp	r0, #0
   26f6c:	bne	26f9c <_obstack_memory_used@@Base+0x1f28>
   26f70:	ldr	r8, [r4]
   26f74:	b	26fb8 <_obstack_memory_used@@Base+0x1f44>
   26f78:	mov	r0, r5
   26f7c:	bl	29460 <_obstack_memory_used@@Base+0x43ec>
   26f80:	cmp	r0, #0
   26f84:	moveq	r0, #0
   26f88:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   26f8c:	ldr	r2, [r4, #4]
   26f90:	mov	r1, r8
   26f94:	mov	r6, r0
   26f98:	bl	11c60 <memcpy@plt>
   26f9c:	mov	r0, #1
   26fa0:	str	r6, [r4]
   26fa4:	str	r5, [r4, #4]
   26fa8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26fac:	bl	11ed0 <__errno_location@plt>
   26fb0:	mov	r1, #12
   26fb4:	str	r1, [r0]
   26fb8:	mov	r0, r8
   26fbc:	bl	2046c <__assert_fail@plt+0xe3e0>
   26fc0:	mov	r0, #0
   26fc4:	mov	r5, #1024	; 0x400
   26fc8:	str	r7, [r4]
   26fcc:	str	r5, [r4, #4]
   26fd0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26fd4:	push	{r4, r5, fp, lr}
   26fd8:	add	fp, sp, #8
   26fdc:	mov	r4, r1
   26fe0:	bl	11e94 <getfilecon@plt>
   26fe4:	cmp	r0, #10
   26fe8:	beq	27000 <_obstack_memory_used@@Base+0x1f8c>
   26fec:	cmp	r0, #0
   26ff0:	bne	27044 <_obstack_memory_used@@Base+0x1fd0>
   26ff4:	bl	11ed0 <__errno_location@plt>
   26ff8:	mov	r1, #95	; 0x5f
   26ffc:	b	2703c <_obstack_memory_used@@Base+0x1fc8>
   27000:	ldr	r5, [r4]
   27004:	movw	r1, #49878	; 0xc2d6
   27008:	movt	r1, #2
   2700c:	mov	r0, r5
   27010:	bl	11bd0 <strcmp@plt>
   27014:	mov	r1, r0
   27018:	mov	r0, #10
   2701c:	cmp	r1, #0
   27020:	popne	{r4, r5, fp, pc}
   27024:	mov	r0, r5
   27028:	bl	11ff0 <freecon@plt>
   2702c:	mov	r0, #0
   27030:	str	r0, [r4]
   27034:	bl	11ed0 <__errno_location@plt>
   27038:	mov	r1, #61	; 0x3d
   2703c:	str	r1, [r0]
   27040:	mvn	r0, #0
   27044:	pop	{r4, r5, fp, pc}
   27048:	push	{r4, r5, fp, lr}
   2704c:	add	fp, sp, #8
   27050:	mov	r4, r1
   27054:	bl	11df8 <lgetfilecon@plt>
   27058:	cmp	r0, #10
   2705c:	beq	27074 <_obstack_memory_used@@Base+0x2000>
   27060:	cmp	r0, #0
   27064:	bne	270b8 <_obstack_memory_used@@Base+0x2044>
   27068:	bl	11ed0 <__errno_location@plt>
   2706c:	mov	r1, #95	; 0x5f
   27070:	b	270b0 <_obstack_memory_used@@Base+0x203c>
   27074:	ldr	r5, [r4]
   27078:	movw	r1, #49878	; 0xc2d6
   2707c:	movt	r1, #2
   27080:	mov	r0, r5
   27084:	bl	11bd0 <strcmp@plt>
   27088:	mov	r1, r0
   2708c:	mov	r0, #10
   27090:	cmp	r1, #0
   27094:	popne	{r4, r5, fp, pc}
   27098:	mov	r0, r5
   2709c:	bl	11ff0 <freecon@plt>
   270a0:	mov	r0, #0
   270a4:	str	r0, [r4]
   270a8:	bl	11ed0 <__errno_location@plt>
   270ac:	mov	r1, #61	; 0x3d
   270b0:	str	r1, [r0]
   270b4:	mvn	r0, #0
   270b8:	pop	{r4, r5, fp, pc}
   270bc:	push	{r4, r5, fp, lr}
   270c0:	add	fp, sp, #8
   270c4:	mov	r4, r1
   270c8:	bl	11cd8 <fgetfilecon@plt>
   270cc:	cmp	r0, #10
   270d0:	beq	270e8 <_obstack_memory_used@@Base+0x2074>
   270d4:	cmp	r0, #0
   270d8:	bne	2712c <_obstack_memory_used@@Base+0x20b8>
   270dc:	bl	11ed0 <__errno_location@plt>
   270e0:	mov	r1, #95	; 0x5f
   270e4:	b	27124 <_obstack_memory_used@@Base+0x20b0>
   270e8:	ldr	r5, [r4]
   270ec:	movw	r1, #49878	; 0xc2d6
   270f0:	movt	r1, #2
   270f4:	mov	r0, r5
   270f8:	bl	11bd0 <strcmp@plt>
   270fc:	mov	r1, r0
   27100:	mov	r0, #10
   27104:	cmp	r1, #0
   27108:	popne	{r4, r5, fp, pc}
   2710c:	mov	r0, r5
   27110:	bl	11ff0 <freecon@plt>
   27114:	mov	r0, #0
   27118:	str	r0, [r4]
   2711c:	bl	11ed0 <__errno_location@plt>
   27120:	mov	r1, #61	; 0x3d
   27124:	str	r1, [r0]
   27128:	mvn	r0, #0
   2712c:	pop	{r4, r5, fp, pc}
   27130:	push	{r4, r5, r6, r7, fp, lr}
   27134:	add	fp, sp, #16
   27138:	mov	r4, r1
   2713c:	mov	r1, #0
   27140:	mov	r6, r2
   27144:	bl	11f60 <setlocale@plt>
   27148:	cmp	r0, #0
   2714c:	beq	2717c <_obstack_memory_used@@Base+0x2108>
   27150:	mov	r7, r0
   27154:	bl	11eac <strlen@plt>
   27158:	cmp	r0, r6
   2715c:	bcs	2719c <_obstack_memory_used@@Base+0x2128>
   27160:	add	r2, r0, #1
   27164:	mov	r0, r4
   27168:	mov	r1, r7
   2716c:	bl	11c60 <memcpy@plt>
   27170:	mov	r5, #0
   27174:	mov	r0, r5
   27178:	pop	{r4, r5, r6, r7, fp, pc}
   2717c:	cmp	r6, #0
   27180:	mov	r5, #22
   27184:	movne	r0, #0
   27188:	strbne	r0, [r4]
   2718c:	movne	r0, r5
   27190:	popne	{r4, r5, r6, r7, fp, pc}
   27194:	mov	r0, r5
   27198:	pop	{r4, r5, r6, r7, fp, pc}
   2719c:	mov	r5, #34	; 0x22
   271a0:	cmp	r6, #0
   271a4:	beq	271c4 <_obstack_memory_used@@Base+0x2150>
   271a8:	sub	r6, r6, #1
   271ac:	mov	r0, r4
   271b0:	mov	r1, r7
   271b4:	mov	r2, r6
   271b8:	bl	11c60 <memcpy@plt>
   271bc:	mov	r0, #0
   271c0:	strb	r0, [r4, r6]
   271c4:	mov	r0, r5
   271c8:	pop	{r4, r5, r6, r7, fp, pc}
   271cc:	mov	r1, #0
   271d0:	b	11f60 <setlocale@plt>
   271d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   271d8:	add	fp, sp, #24
   271dc:	mov	r4, r0
   271e0:	cmp	r0, #0
   271e4:	beq	27208 <_obstack_memory_used@@Base+0x2194>
   271e8:	mov	r0, r4
   271ec:	bl	11eac <strlen@plt>
   271f0:	add	r5, r0, #1
   271f4:	cmp	r5, #58	; 0x3a
   271f8:	bls	2720c <_obstack_memory_used@@Base+0x2198>
   271fc:	add	r0, r0, #10
   27200:	bic	r0, r0, #3
   27204:	b	27210 <_obstack_memory_used@@Base+0x219c>
   27208:	mov	r5, #0
   2720c:	mov	r0, #64	; 0x40
   27210:	bl	29460 <_obstack_memory_used@@Base+0x43ec>
   27214:	mov	r6, r0
   27218:	cmp	r0, #0
   2721c:	beq	27258 <_obstack_memory_used@@Base+0x21e4>
   27220:	cmp	r4, #0
   27224:	mov	r0, r4
   27228:	mov	r8, #0
   2722c:	mov	r7, r6
   27230:	movwne	r0, #1
   27234:	str	r8, [r6]
   27238:	strb	r0, [r6, #4]
   2723c:	strb	r8, [r7, #5]!
   27240:	beq	27258 <_obstack_memory_used@@Base+0x21e4>
   27244:	mov	r0, r7
   27248:	mov	r1, r4
   2724c:	mov	r2, r5
   27250:	bl	11c60 <memcpy@plt>
   27254:	strb	r8, [r7, r5]
   27258:	mov	r0, r6
   2725c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   27260:	push	{r4, sl, fp, lr}
   27264:	add	fp, sp, #8
   27268:	cmp	r0, #2
   2726c:	popcc	{r4, sl, fp, pc}
   27270:	ldr	r4, [r0]
   27274:	bl	2046c <__assert_fail@plt+0xe3e0>
   27278:	cmp	r4, #0
   2727c:	mov	r0, r4
   27280:	bne	27270 <_obstack_memory_used@@Base+0x21fc>
   27284:	pop	{r4, sl, fp, pc}
   27288:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2728c:	add	fp, sp, #28
   27290:	sub	sp, sp, #4
   27294:	mov	sl, r2
   27298:	mov	r7, r1
   2729c:	cmp	r0, #0
   272a0:	beq	27370 <_obstack_memory_used@@Base+0x22fc>
   272a4:	mov	r6, r0
   272a8:	bl	273ac <_obstack_memory_used@@Base+0x2338>
   272ac:	cmp	r0, #0
   272b0:	moveq	r0, #0
   272b4:	subeq	sp, fp, #28
   272b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   272bc:	mov	r4, r0
   272c0:	mov	r0, r7
   272c4:	mov	r1, sl
   272c8:	bl	11ce4 <localtime_r@plt>
   272cc:	mov	r7, #1
   272d0:	cmp	r0, #0
   272d4:	mov	r9, #1
   272d8:	beq	272ec <_obstack_memory_used@@Base+0x2278>
   272dc:	mov	r0, r6
   272e0:	mov	r1, sl
   272e4:	bl	274f8 <_obstack_memory_used@@Base+0x2484>
   272e8:	eor	r9, r0, #1
   272ec:	cmp	r4, #1
   272f0:	beq	27354 <_obstack_memory_used@@Base+0x22e0>
   272f4:	bl	11ed0 <__errno_location@plt>
   272f8:	mov	r6, r0
   272fc:	ldr	r8, [r0]
   27300:	ldrb	r0, [r4, #4]
   27304:	cmp	r0, #0
   27308:	beq	27384 <_obstack_memory_used@@Base+0x2310>
   2730c:	movw	r0, #40620	; 0x9eac
   27310:	add	r1, r4, #5
   27314:	mov	r2, #1
   27318:	movt	r0, #2
   2731c:	bl	11ec4 <setenv@plt>
   27320:	cmp	r0, #0
   27324:	beq	27398 <_obstack_memory_used@@Base+0x2324>
   27328:	ldr	r8, [r6]
   2732c:	mov	r7, #0
   27330:	cmp	r4, #2
   27334:	bcc	27350 <_obstack_memory_used@@Base+0x22dc>
   27338:	ldr	r5, [r4]
   2733c:	mov	r0, r4
   27340:	bl	2046c <__assert_fail@plt+0xe3e0>
   27344:	cmp	r5, #0
   27348:	mov	r4, r5
   2734c:	bne	27338 <_obstack_memory_used@@Base+0x22c4>
   27350:	str	r8, [r6]
   27354:	cmp	r7, #0
   27358:	moveq	sl, r7
   2735c:	cmp	r9, #0
   27360:	movwne	sl, #0
   27364:	mov	r0, sl
   27368:	sub	sp, fp, #28
   2736c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27370:	mov	r0, r7
   27374:	mov	r1, sl
   27378:	sub	sp, fp, #28
   2737c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27380:	b	11bb8 <gmtime_r@plt>
   27384:	movw	r0, #40620	; 0x9eac
   27388:	movt	r0, #2
   2738c:	bl	12020 <unsetenv@plt>
   27390:	cmp	r0, #0
   27394:	bne	27328 <_obstack_memory_used@@Base+0x22b4>
   27398:	bl	11d2c <tzset@plt>
   2739c:	mov	r7, #1
   273a0:	cmp	r4, #2
   273a4:	bcs	27338 <_obstack_memory_used@@Base+0x22c4>
   273a8:	b	27350 <_obstack_memory_used@@Base+0x22dc>
   273ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   273b0:	add	fp, sp, #28
   273b4:	sub	sp, sp, #4
   273b8:	mov	r4, r0
   273bc:	movw	r0, #40620	; 0x9eac
   273c0:	movt	r0, #2
   273c4:	bl	11dec <getenv@plt>
   273c8:	mov	r6, r0
   273cc:	ldrb	r0, [r4, #4]
   273d0:	cmp	r6, #0
   273d4:	beq	27418 <_obstack_memory_used@@Base+0x23a4>
   273d8:	cmp	r0, #0
   273dc:	beq	273f4 <_obstack_memory_used@@Base+0x2380>
   273e0:	add	r0, r4, #5
   273e4:	mov	r1, r6
   273e8:	bl	11bd0 <strcmp@plt>
   273ec:	cmp	r0, #0
   273f0:	beq	274cc <_obstack_memory_used@@Base+0x2458>
   273f4:	mov	r0, r6
   273f8:	bl	11eac <strlen@plt>
   273fc:	add	r8, r0, #1
   27400:	mov	r9, #1
   27404:	cmp	r8, #58	; 0x3a
   27408:	bls	27428 <_obstack_memory_used@@Base+0x23b4>
   2740c:	add	r0, r0, #10
   27410:	bic	r0, r0, #3
   27414:	b	2742c <_obstack_memory_used@@Base+0x23b8>
   27418:	mov	r9, #0
   2741c:	cmp	r0, #0
   27420:	mov	r8, #0
   27424:	beq	274cc <_obstack_memory_used@@Base+0x2458>
   27428:	mov	r0, #64	; 0x40
   2742c:	bl	29460 <_obstack_memory_used@@Base+0x43ec>
   27430:	cmp	r0, #0
   27434:	beq	274c4 <_obstack_memory_used@@Base+0x2450>
   27438:	mov	sl, #0
   2743c:	mov	r7, r0
   27440:	strb	r9, [r0, #4]
   27444:	mov	r5, r0
   27448:	cmp	r9, #0
   2744c:	str	sl, [r0]
   27450:	strb	sl, [r7, #5]!
   27454:	beq	2746c <_obstack_memory_used@@Base+0x23f8>
   27458:	mov	r0, r7
   2745c:	mov	r1, r6
   27460:	mov	r2, r8
   27464:	bl	11c60 <memcpy@plt>
   27468:	strb	sl, [r7, r8]
   2746c:	ldrb	r0, [r4, #4]
   27470:	cmp	r0, #0
   27474:	beq	274d4 <_obstack_memory_used@@Base+0x2460>
   27478:	movw	r0, #40620	; 0x9eac
   2747c:	add	r1, r4, #5
   27480:	mov	r2, #1
   27484:	movt	r0, #2
   27488:	bl	11ec4 <setenv@plt>
   2748c:	cmp	r0, #0
   27490:	beq	274e8 <_obstack_memory_used@@Base+0x2474>
   27494:	bl	11ed0 <__errno_location@plt>
   27498:	ldr	r6, [r0]
   2749c:	mov	r4, r0
   274a0:	cmp	r5, #2
   274a4:	bcc	274c0 <_obstack_memory_used@@Base+0x244c>
   274a8:	ldr	r7, [r5]
   274ac:	mov	r0, r5
   274b0:	bl	2046c <__assert_fail@plt+0xe3e0>
   274b4:	cmp	r7, #0
   274b8:	mov	r5, r7
   274bc:	bne	274a8 <_obstack_memory_used@@Base+0x2434>
   274c0:	str	r6, [r4]
   274c4:	mov	r5, #0
   274c8:	b	274ec <_obstack_memory_used@@Base+0x2478>
   274cc:	mov	r5, #1
   274d0:	b	274ec <_obstack_memory_used@@Base+0x2478>
   274d4:	movw	r0, #40620	; 0x9eac
   274d8:	movt	r0, #2
   274dc:	bl	12020 <unsetenv@plt>
   274e0:	cmp	r0, #0
   274e4:	bne	27494 <_obstack_memory_used@@Base+0x2420>
   274e8:	bl	11d2c <tzset@plt>
   274ec:	mov	r0, r5
   274f0:	sub	sp, fp, #28
   274f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   274f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   274fc:	add	fp, sp, #28
   27500:	sub	sp, sp, #4
   27504:	ldr	r7, [r1, #40]	; 0x28
   27508:	mov	r8, #1
   2750c:	cmp	r7, #0
   27510:	beq	275b4 <_obstack_memory_used@@Base+0x2540>
   27514:	mov	r5, r1
   27518:	mov	r6, r0
   2751c:	cmp	r7, r1
   27520:	bcc	27530 <_obstack_memory_used@@Base+0x24bc>
   27524:	add	r0, r5, #44	; 0x2c
   27528:	cmp	r7, r0
   2752c:	bcc	275b4 <_obstack_memory_used@@Base+0x2540>
   27530:	ldrb	r0, [r7]
   27534:	cmp	r0, #0
   27538:	beq	275a8 <_obstack_memory_used@@Base+0x2534>
   2753c:	add	r4, r6, #5
   27540:	b	27554 <_obstack_memory_used@@Base+0x24e0>
   27544:	ldr	r0, [r6]
   27548:	cmp	r0, #0
   2754c:	addne	r4, r0, #5
   27550:	movne	r6, r0
   27554:	mov	r0, r4
   27558:	mov	r1, r7
   2755c:	bl	11bd0 <strcmp@plt>
   27560:	cmp	r0, #0
   27564:	beq	275b0 <_obstack_memory_used@@Base+0x253c>
   27568:	ldrb	r0, [r4]
   2756c:	cmp	r0, #0
   27570:	bne	2758c <_obstack_memory_used@@Base+0x2518>
   27574:	add	r0, r6, #5
   27578:	cmp	r4, r0
   2757c:	bne	275c0 <_obstack_memory_used@@Base+0x254c>
   27580:	ldrb	r0, [r6, #4]
   27584:	cmp	r0, #0
   27588:	beq	275c0 <_obstack_memory_used@@Base+0x254c>
   2758c:	mov	r0, r4
   27590:	bl	11eac <strlen@plt>
   27594:	add	r4, r4, r0
   27598:	ldrb	r0, [r4, #1]!
   2759c:	cmp	r0, #0
   275a0:	bne	27554 <_obstack_memory_used@@Base+0x24e0>
   275a4:	b	27544 <_obstack_memory_used@@Base+0x24d0>
   275a8:	movw	r4, #49853	; 0xc2bd
   275ac:	movt	r4, #2
   275b0:	str	r4, [r5, #40]	; 0x28
   275b4:	mov	r0, r8
   275b8:	sub	sp, fp, #28
   275bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   275c0:	add	r0, r6, #64	; 0x40
   275c4:	sub	sl, r0, r4
   275c8:	mov	r0, r7
   275cc:	bl	11eac <strlen@plt>
   275d0:	add	r9, r0, #1
   275d4:	cmp	r9, sl
   275d8:	bge	275f8 <_obstack_memory_used@@Base+0x2584>
   275dc:	mov	r0, r4
   275e0:	mov	r1, r7
   275e4:	mov	r2, r9
   275e8:	bl	11c60 <memcpy@plt>
   275ec:	mov	r0, #0
   275f0:	strb	r0, [r4, r9]
   275f4:	b	275b0 <_obstack_memory_used@@Base+0x253c>
   275f8:	add	r0, r0, #10
   275fc:	cmp	r9, #59	; 0x3b
   27600:	bic	r0, r0, #3
   27604:	movwcc	r0, #64	; 0x40
   27608:	bl	29460 <_obstack_memory_used@@Base+0x43ec>
   2760c:	cmp	r0, #0
   27610:	beq	27650 <_obstack_memory_used@@Base+0x25dc>
   27614:	mov	sl, r0
   27618:	mov	r0, #0
   2761c:	mov	r1, r7
   27620:	mov	r2, r9
   27624:	str	r0, [sl]
   27628:	mov	r0, #1
   2762c:	add	r4, sl, #5
   27630:	strh	r0, [sl, #4]
   27634:	mov	r0, r4
   27638:	bl	11c60 <memcpy@plt>
   2763c:	mov	r0, #0
   27640:	strb	r0, [r4, r9]
   27644:	str	sl, [r6]
   27648:	strb	r0, [sl, #4]
   2764c:	b	275b0 <_obstack_memory_used@@Base+0x253c>
   27650:	mov	r8, #0
   27654:	str	r8, [r6]
   27658:	b	275b4 <_obstack_memory_used@@Base+0x2540>
   2765c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27660:	add	fp, sp, #28
   27664:	sub	sp, sp, #52	; 0x34
   27668:	mov	r4, r1
   2766c:	cmp	r0, #0
   27670:	beq	2777c <_obstack_memory_used@@Base+0x2708>
   27674:	mov	r6, r0
   27678:	bl	273ac <_obstack_memory_used@@Base+0x2338>
   2767c:	cmp	r0, #0
   27680:	beq	27774 <_obstack_memory_used@@Base+0x2700>
   27684:	mov	r8, r0
   27688:	mov	r0, #32
   2768c:	mov	r1, r4
   27690:	add	r5, sp, #8
   27694:	vld1.32	{d16-d17}, [r1], r0
   27698:	mov	r2, r5
   2769c:	vst1.32	{d16-d17}, [r2], r0
   276a0:	ldr	r0, [r4, #16]
   276a4:	ldr	r3, [r4, #20]
   276a8:	str	r0, [sp, #24]
   276ac:	mvn	r0, #0
   276b0:	str	r0, [sp, #36]	; 0x24
   276b4:	str	r3, [sp, #28]
   276b8:	ldr	r0, [r1]
   276bc:	str	r0, [r2]
   276c0:	mov	r0, r5
   276c4:	bl	11be8 <mktime@plt>
   276c8:	mov	r9, r0
   276cc:	ldr	r0, [sp, #36]	; 0x24
   276d0:	mov	sl, #1
   276d4:	mov	r1, #1
   276d8:	cmp	r0, #0
   276dc:	blt	276f0 <_obstack_memory_used@@Base+0x267c>
   276e0:	add	r1, sp, #8
   276e4:	mov	r0, r6
   276e8:	bl	274f8 <_obstack_memory_used@@Base+0x2484>
   276ec:	eor	r1, r0, #1
   276f0:	cmp	r8, #1
   276f4:	beq	27768 <_obstack_memory_used@@Base+0x26f4>
   276f8:	str	r1, [sp, #4]
   276fc:	bl	11ed0 <__errno_location@plt>
   27700:	mov	r6, r0
   27704:	ldr	r7, [r0]
   27708:	ldrb	r0, [r8, #4]
   2770c:	cmp	r0, #0
   27710:	beq	277bc <_obstack_memory_used@@Base+0x2748>
   27714:	movw	r0, #40620	; 0x9eac
   27718:	add	r1, r8, #5
   2771c:	mov	r2, #1
   27720:	movt	r0, #2
   27724:	bl	11ec4 <setenv@plt>
   27728:	cmp	r0, #0
   2772c:	beq	277d0 <_obstack_memory_used@@Base+0x275c>
   27730:	ldr	r0, [r6]
   27734:	mov	sl, #0
   27738:	str	r0, [sp]
   2773c:	cmp	r8, #2
   27740:	bcc	2775c <_obstack_memory_used@@Base+0x26e8>
   27744:	ldr	r7, [r8]
   27748:	mov	r0, r8
   2774c:	bl	2046c <__assert_fail@plt+0xe3e0>
   27750:	cmp	r7, #0
   27754:	mov	r8, r7
   27758:	bne	27744 <_obstack_memory_used@@Base+0x26d0>
   2775c:	ldr	r0, [sp]
   27760:	ldr	r1, [sp, #4]
   27764:	str	r0, [r6]
   27768:	eor	r0, sl, #1
   2776c:	orrs	r0, r1, r0
   27770:	beq	2778c <_obstack_memory_used@@Base+0x2718>
   27774:	mvn	r9, #0
   27778:	b	277b0 <_obstack_memory_used@@Base+0x273c>
   2777c:	mov	r0, r4
   27780:	sub	sp, fp, #28
   27784:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27788:	b	11fcc <timegm@plt>
   2778c:	mov	r0, #28
   27790:	add	r1, r5, #16
   27794:	vld1.32	{d16-d17}, [r5], r0
   27798:	vld1.64	{d18-d19}, [r1]
   2779c:	add	r1, r4, #16
   277a0:	vld1.32	{d20-d21}, [r5]
   277a4:	vst1.32	{d16-d17}, [r4], r0
   277a8:	vst1.32	{d18-d19}, [r1]
   277ac:	vst1.32	{d20-d21}, [r4]
   277b0:	mov	r0, r9
   277b4:	sub	sp, fp, #28
   277b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   277bc:	movw	r0, #40620	; 0x9eac
   277c0:	movt	r0, #2
   277c4:	bl	12020 <unsetenv@plt>
   277c8:	cmp	r0, #0
   277cc:	bne	27730 <_obstack_memory_used@@Base+0x26bc>
   277d0:	str	r7, [sp]
   277d4:	bl	11d2c <tzset@plt>
   277d8:	mov	sl, #1
   277dc:	cmp	r8, #2
   277e0:	bcs	27744 <_obstack_memory_used@@Base+0x26d0>
   277e4:	b	2775c <_obstack_memory_used@@Base+0x26e8>
   277e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   277ec:	add	fp, sp, #24
   277f0:	sub	sp, sp, #32
   277f4:	ldr	r6, [fp, #12]
   277f8:	ldr	r7, [fp, #8]
   277fc:	mov	r4, r2
   27800:	mov	r8, r0
   27804:	cmp	r1, #0
   27808:	beq	27830 <_obstack_memory_used@@Base+0x27bc>
   2780c:	movw	r2, #57248	; 0xdfa0
   27810:	mov	r5, r1
   27814:	str	r3, [sp, #4]
   27818:	str	r4, [sp]
   2781c:	mov	r0, r8
   27820:	mov	r1, #1
   27824:	movt	r2, #2
   27828:	mov	r3, r5
   2782c:	b	27848 <_obstack_memory_used@@Base+0x27d4>
   27830:	movw	r2, #57260	; 0xdfac
   27834:	str	r3, [sp]
   27838:	mov	r0, r8
   2783c:	mov	r1, #1
   27840:	mov	r3, r4
   27844:	movt	r2, #2
   27848:	bl	11f24 <__fprintf_chk@plt>
   2784c:	movw	r1, #57267	; 0xdfb3
   27850:	mov	r0, #0
   27854:	mov	r2, #5
   27858:	movt	r1, #2
   2785c:	bl	11cb4 <dcgettext@plt>
   27860:	movw	r2, #57985	; 0xe281
   27864:	mov	r3, r0
   27868:	movw	r0, #2022	; 0x7e6
   2786c:	mov	r1, #1
   27870:	str	r0, [sp]
   27874:	movt	r2, #2
   27878:	mov	r0, r8
   2787c:	bl	11f24 <__fprintf_chk@plt>
   27880:	movw	r4, #50605	; 0xc5ad
   27884:	mov	r1, r8
   27888:	movt	r4, #2
   2788c:	mov	r0, r4
   27890:	bl	11b94 <fputs_unlocked@plt>
   27894:	movw	r1, #57271	; 0xdfb7
   27898:	mov	r0, #0
   2789c:	mov	r2, #5
   278a0:	movt	r1, #2
   278a4:	bl	11cb4 <dcgettext@plt>
   278a8:	movw	r3, #57442	; 0xe062
   278ac:	mov	r2, r0
   278b0:	mov	r0, r8
   278b4:	mov	r1, #1
   278b8:	movt	r3, #2
   278bc:	bl	11f24 <__fprintf_chk@plt>
   278c0:	mov	r0, r4
   278c4:	mov	r1, r8
   278c8:	bl	11b94 <fputs_unlocked@plt>
   278cc:	cmp	r6, #9
   278d0:	bhi	2790c <_obstack_memory_used@@Base+0x2898>
   278d4:	add	r0, pc, #0
   278d8:	ldr	pc, [r0, r6, lsl #2]
   278dc:	andeq	r7, r2, r4, lsl #18
   278e0:	andeq	r7, r2, r8, lsl r9
   278e4:	andeq	r7, r2, r8, asr #18
   278e8:	andeq	r7, r2, r0, ror r9
   278ec:	muleq	r2, r8, r9
   278f0:	andeq	r7, r2, r0, asr #19
   278f4:	andeq	r7, r2, r8, ror #19
   278f8:	andeq	r7, r2, r0, lsr #20
   278fc:	andeq	r7, r2, r0, asr #21
   27900:	andeq	r7, r2, r8, ror #20
   27904:	sub	sp, fp, #24
   27908:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2790c:	movw	r1, #57795	; 0xe1c3
   27910:	movt	r1, #2
   27914:	b	27a70 <_obstack_memory_used@@Base+0x29fc>
   27918:	movw	r1, #57476	; 0xe084
   2791c:	mov	r0, #0
   27920:	mov	r2, #5
   27924:	movt	r1, #2
   27928:	bl	11cb4 <dcgettext@plt>
   2792c:	ldr	r3, [r7]
   27930:	mov	r2, r0
   27934:	mov	r0, r8
   27938:	mov	r1, #1
   2793c:	sub	sp, fp, #24
   27940:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   27944:	b	11f24 <__fprintf_chk@plt>
   27948:	movw	r1, #57492	; 0xe094
   2794c:	mov	r0, #0
   27950:	mov	r2, #5
   27954:	movt	r1, #2
   27958:	bl	11cb4 <dcgettext@plt>
   2795c:	mov	r2, r0
   27960:	ldr	r3, [r7]
   27964:	ldr	r0, [r7, #4]
   27968:	str	r0, [sp]
   2796c:	b	27a5c <_obstack_memory_used@@Base+0x29e8>
   27970:	movw	r1, #57515	; 0xe0ab
   27974:	mov	r0, #0
   27978:	mov	r2, #5
   2797c:	movt	r1, #2
   27980:	bl	11cb4 <dcgettext@plt>
   27984:	ldr	r3, [r7]
   27988:	mov	r2, r0
   2798c:	ldmib	r7, {r0, r1}
   27990:	stm	sp, {r0, r1}
   27994:	b	27a5c <_obstack_memory_used@@Base+0x29e8>
   27998:	movw	r1, #57543	; 0xe0c7
   2799c:	mov	r0, #0
   279a0:	mov	r2, #5
   279a4:	movt	r1, #2
   279a8:	bl	11cb4 <dcgettext@plt>
   279ac:	ldr	r3, [r7]
   279b0:	mov	r2, r0
   279b4:	ldmib	r7, {r0, r1, r7}
   279b8:	stm	sp, {r0, r1, r7}
   279bc:	b	27a5c <_obstack_memory_used@@Base+0x29e8>
   279c0:	movw	r1, #57575	; 0xe0e7
   279c4:	mov	r0, #0
   279c8:	mov	r2, #5
   279cc:	movt	r1, #2
   279d0:	bl	11cb4 <dcgettext@plt>
   279d4:	ldr	r3, [r7]
   279d8:	mov	r2, r0
   279dc:	ldmib	r7, {r0, r1, r6, r7}
   279e0:	stm	sp, {r0, r1, r6, r7}
   279e4:	b	27a5c <_obstack_memory_used@@Base+0x29e8>
   279e8:	movw	r1, #57611	; 0xe10b
   279ec:	mov	r0, #0
   279f0:	mov	r2, #5
   279f4:	movt	r1, #2
   279f8:	bl	11cb4 <dcgettext@plt>
   279fc:	ldr	r3, [r7]
   27a00:	mov	r2, r0
   27a04:	ldmib	r7, {r0, r1, r6}
   27a08:	ldr	r5, [r7, #16]
   27a0c:	ldr	r7, [r7, #20]
   27a10:	stm	sp, {r0, r1, r6}
   27a14:	str	r5, [sp, #12]
   27a18:	str	r7, [sp, #16]
   27a1c:	b	27a5c <_obstack_memory_used@@Base+0x29e8>
   27a20:	movw	r1, #57651	; 0xe133
   27a24:	mov	r0, #0
   27a28:	mov	r2, #5
   27a2c:	movt	r1, #2
   27a30:	bl	11cb4 <dcgettext@plt>
   27a34:	ldr	r3, [r7]
   27a38:	mov	r2, r0
   27a3c:	ldmib	r7, {r0, r1, r6}
   27a40:	ldr	r5, [r7, #16]
   27a44:	ldr	r4, [r7, #20]
   27a48:	ldr	r7, [r7, #24]
   27a4c:	stm	sp, {r0, r1, r6}
   27a50:	str	r5, [sp, #12]
   27a54:	str	r4, [sp, #16]
   27a58:	str	r7, [sp, #20]
   27a5c:	mov	r0, r8
   27a60:	mov	r1, #1
   27a64:	b	27b10 <_obstack_memory_used@@Base+0x2a9c>
   27a68:	movw	r1, #57743	; 0xe18f
   27a6c:	movt	r1, #2
   27a70:	mov	r0, #0
   27a74:	mov	r2, #5
   27a78:	bl	11cb4 <dcgettext@plt>
   27a7c:	mov	ip, r0
   27a80:	ldr	r3, [r7]
   27a84:	ldr	r0, [r7, #4]
   27a88:	ldr	r1, [r7, #8]
   27a8c:	ldr	r6, [r7, #12]
   27a90:	ldr	r5, [r7, #16]
   27a94:	ldr	r4, [r7, #20]
   27a98:	ldr	r2, [r7, #24]
   27a9c:	ldr	lr, [r7, #28]
   27aa0:	ldr	r7, [r7, #32]
   27aa4:	stm	sp, {r0, r1, r6}
   27aa8:	str	r5, [sp, #12]
   27aac:	str	r4, [sp, #16]
   27ab0:	str	r2, [sp, #20]
   27ab4:	str	lr, [sp, #24]
   27ab8:	str	r7, [sp, #28]
   27abc:	b	27b04 <_obstack_memory_used@@Base+0x2a90>
   27ac0:	movw	r1, #57695	; 0xe15f
   27ac4:	mov	r0, #0
   27ac8:	mov	r2, #5
   27acc:	movt	r1, #2
   27ad0:	bl	11cb4 <dcgettext@plt>
   27ad4:	mov	ip, r0
   27ad8:	ldr	r3, [r7]
   27adc:	ldmib	r7, {r0, r1, r6}
   27ae0:	ldr	r5, [r7, #16]
   27ae4:	ldr	r4, [r7, #20]
   27ae8:	ldr	r2, [r7, #24]
   27aec:	ldr	r7, [r7, #28]
   27af0:	stm	sp, {r0, r1, r6}
   27af4:	str	r5, [sp, #12]
   27af8:	str	r4, [sp, #16]
   27afc:	str	r2, [sp, #20]
   27b00:	str	r7, [sp, #24]
   27b04:	mov	r0, r8
   27b08:	mov	r1, #1
   27b0c:	mov	r2, ip
   27b10:	bl	11f24 <__fprintf_chk@plt>
   27b14:	sub	sp, fp, #24
   27b18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   27b1c:	push	{r4, sl, fp, lr}
   27b20:	add	fp, sp, #8
   27b24:	sub	sp, sp, #8
   27b28:	ldr	ip, [fp, #8]
   27b2c:	mov	lr, #0
   27b30:	ldr	r4, [ip, lr, lsl #2]
   27b34:	add	lr, lr, #1
   27b38:	cmp	r4, #0
   27b3c:	bne	27b30 <_obstack_memory_used@@Base+0x2abc>
   27b40:	sub	r4, lr, #1
   27b44:	str	ip, [sp]
   27b48:	str	r4, [sp, #4]
   27b4c:	bl	277e8 <_obstack_memory_used@@Base+0x2774>
   27b50:	sub	sp, fp, #8
   27b54:	pop	{r4, sl, fp, pc}
   27b58:	push	{fp, lr}
   27b5c:	mov	fp, sp
   27b60:	sub	sp, sp, #48	; 0x30
   27b64:	ldr	ip, [fp, #8]
   27b68:	ldr	lr, [ip]
   27b6c:	cmp	lr, #0
   27b70:	str	lr, [sp, #8]
   27b74:	beq	27c10 <_obstack_memory_used@@Base+0x2b9c>
   27b78:	ldr	lr, [ip, #4]
   27b7c:	cmp	lr, #0
   27b80:	str	lr, [sp, #12]
   27b84:	beq	27c18 <_obstack_memory_used@@Base+0x2ba4>
   27b88:	ldr	lr, [ip, #8]
   27b8c:	cmp	lr, #0
   27b90:	str	lr, [sp, #16]
   27b94:	beq	27c20 <_obstack_memory_used@@Base+0x2bac>
   27b98:	ldr	lr, [ip, #12]
   27b9c:	cmp	lr, #0
   27ba0:	str	lr, [sp, #20]
   27ba4:	beq	27c28 <_obstack_memory_used@@Base+0x2bb4>
   27ba8:	ldr	lr, [ip, #16]
   27bac:	cmp	lr, #0
   27bb0:	str	lr, [sp, #24]
   27bb4:	beq	27c30 <_obstack_memory_used@@Base+0x2bbc>
   27bb8:	ldr	lr, [ip, #20]
   27bbc:	cmp	lr, #0
   27bc0:	str	lr, [sp, #28]
   27bc4:	beq	27c38 <_obstack_memory_used@@Base+0x2bc4>
   27bc8:	ldr	lr, [ip, #24]
   27bcc:	cmp	lr, #0
   27bd0:	str	lr, [sp, #32]
   27bd4:	beq	27c40 <_obstack_memory_used@@Base+0x2bcc>
   27bd8:	ldr	lr, [ip, #28]
   27bdc:	cmp	lr, #0
   27be0:	str	lr, [sp, #36]	; 0x24
   27be4:	beq	27c48 <_obstack_memory_used@@Base+0x2bd4>
   27be8:	ldr	lr, [ip, #32]
   27bec:	cmp	lr, #0
   27bf0:	str	lr, [sp, #40]	; 0x28
   27bf4:	beq	27c50 <_obstack_memory_used@@Base+0x2bdc>
   27bf8:	ldr	lr, [ip, #36]	; 0x24
   27bfc:	mov	ip, #10
   27c00:	cmp	lr, #0
   27c04:	str	lr, [sp, #44]	; 0x2c
   27c08:	movweq	ip, #9
   27c0c:	b	27c54 <_obstack_memory_used@@Base+0x2be0>
   27c10:	mov	ip, #0
   27c14:	b	27c54 <_obstack_memory_used@@Base+0x2be0>
   27c18:	mov	ip, #1
   27c1c:	b	27c54 <_obstack_memory_used@@Base+0x2be0>
   27c20:	mov	ip, #2
   27c24:	b	27c54 <_obstack_memory_used@@Base+0x2be0>
   27c28:	mov	ip, #3
   27c2c:	b	27c54 <_obstack_memory_used@@Base+0x2be0>
   27c30:	mov	ip, #4
   27c34:	b	27c54 <_obstack_memory_used@@Base+0x2be0>
   27c38:	mov	ip, #5
   27c3c:	b	27c54 <_obstack_memory_used@@Base+0x2be0>
   27c40:	mov	ip, #6
   27c44:	b	27c54 <_obstack_memory_used@@Base+0x2be0>
   27c48:	mov	ip, #7
   27c4c:	b	27c54 <_obstack_memory_used@@Base+0x2be0>
   27c50:	mov	ip, #8
   27c54:	add	lr, sp, #8
   27c58:	str	ip, [sp, #4]
   27c5c:	str	lr, [sp]
   27c60:	bl	277e8 <_obstack_memory_used@@Base+0x2774>
   27c64:	mov	sp, fp
   27c68:	pop	{fp, pc}
   27c6c:	push	{fp, lr}
   27c70:	mov	fp, sp
   27c74:	sub	sp, sp, #56	; 0x38
   27c78:	add	ip, fp, #8
   27c7c:	str	ip, [sp, #12]
   27c80:	ldr	lr, [fp, #8]
   27c84:	cmp	lr, #0
   27c88:	str	lr, [sp, #16]
   27c8c:	beq	27d28 <_obstack_memory_used@@Base+0x2cb4>
   27c90:	ldr	lr, [ip, #4]
   27c94:	cmp	lr, #0
   27c98:	str	lr, [sp, #20]
   27c9c:	beq	27d30 <_obstack_memory_used@@Base+0x2cbc>
   27ca0:	ldr	lr, [ip, #8]
   27ca4:	cmp	lr, #0
   27ca8:	str	lr, [sp, #24]
   27cac:	beq	27d38 <_obstack_memory_used@@Base+0x2cc4>
   27cb0:	ldr	lr, [ip, #12]
   27cb4:	cmp	lr, #0
   27cb8:	str	lr, [sp, #28]
   27cbc:	beq	27d40 <_obstack_memory_used@@Base+0x2ccc>
   27cc0:	ldr	lr, [ip, #16]
   27cc4:	cmp	lr, #0
   27cc8:	str	lr, [sp, #32]
   27ccc:	beq	27d48 <_obstack_memory_used@@Base+0x2cd4>
   27cd0:	ldr	lr, [ip, #20]
   27cd4:	cmp	lr, #0
   27cd8:	str	lr, [sp, #36]	; 0x24
   27cdc:	beq	27d50 <_obstack_memory_used@@Base+0x2cdc>
   27ce0:	ldr	lr, [ip, #24]
   27ce4:	cmp	lr, #0
   27ce8:	str	lr, [sp, #40]	; 0x28
   27cec:	beq	27d58 <_obstack_memory_used@@Base+0x2ce4>
   27cf0:	ldr	lr, [ip, #28]
   27cf4:	cmp	lr, #0
   27cf8:	str	lr, [sp, #44]	; 0x2c
   27cfc:	beq	27d60 <_obstack_memory_used@@Base+0x2cec>
   27d00:	ldr	lr, [ip, #32]
   27d04:	cmp	lr, #0
   27d08:	str	lr, [sp, #48]	; 0x30
   27d0c:	beq	27d68 <_obstack_memory_used@@Base+0x2cf4>
   27d10:	ldr	lr, [ip, #36]	; 0x24
   27d14:	mov	ip, #10
   27d18:	cmp	lr, #0
   27d1c:	str	lr, [sp, #52]	; 0x34
   27d20:	movweq	ip, #9
   27d24:	b	27d6c <_obstack_memory_used@@Base+0x2cf8>
   27d28:	mov	ip, #0
   27d2c:	b	27d6c <_obstack_memory_used@@Base+0x2cf8>
   27d30:	mov	ip, #1
   27d34:	b	27d6c <_obstack_memory_used@@Base+0x2cf8>
   27d38:	mov	ip, #2
   27d3c:	b	27d6c <_obstack_memory_used@@Base+0x2cf8>
   27d40:	mov	ip, #3
   27d44:	b	27d6c <_obstack_memory_used@@Base+0x2cf8>
   27d48:	mov	ip, #4
   27d4c:	b	27d6c <_obstack_memory_used@@Base+0x2cf8>
   27d50:	mov	ip, #5
   27d54:	b	27d6c <_obstack_memory_used@@Base+0x2cf8>
   27d58:	mov	ip, #6
   27d5c:	b	27d6c <_obstack_memory_used@@Base+0x2cf8>
   27d60:	mov	ip, #7
   27d64:	b	27d6c <_obstack_memory_used@@Base+0x2cf8>
   27d68:	mov	ip, #8
   27d6c:	add	lr, sp, #16
   27d70:	str	ip, [sp, #4]
   27d74:	str	lr, [sp]
   27d78:	bl	277e8 <_obstack_memory_used@@Base+0x2774>
   27d7c:	mov	sp, fp
   27d80:	pop	{fp, pc}
   27d84:	push	{fp, lr}
   27d88:	mov	fp, sp
   27d8c:	movw	r0, #62220	; 0xf30c
   27d90:	movt	r0, #3
   27d94:	ldr	r1, [r0]
   27d98:	movw	r0, #50605	; 0xc5ad
   27d9c:	movt	r0, #2
   27da0:	bl	11b94 <fputs_unlocked@plt>
   27da4:	movw	r1, #57855	; 0xe1ff
   27da8:	mov	r0, #0
   27dac:	mov	r2, #5
   27db0:	movt	r1, #2
   27db4:	bl	11cb4 <dcgettext@plt>
   27db8:	movw	r2, #57875	; 0xe213
   27dbc:	mov	r1, r0
   27dc0:	mov	r0, #1
   27dc4:	movt	r2, #2
   27dc8:	bl	11f00 <__printf_chk@plt>
   27dcc:	movw	r1, #57897	; 0xe229
   27dd0:	mov	r0, #0
   27dd4:	mov	r2, #5
   27dd8:	movt	r1, #2
   27ddc:	bl	11cb4 <dcgettext@plt>
   27de0:	movw	r2, #48411	; 0xbd1b
   27de4:	movw	r3, #50414	; 0xc4ee
   27de8:	mov	r1, r0
   27dec:	mov	r0, #1
   27df0:	movt	r2, #2
   27df4:	movt	r3, #2
   27df8:	bl	11f00 <__printf_chk@plt>
   27dfc:	movw	r1, #57917	; 0xe23d
   27e00:	mov	r0, #0
   27e04:	mov	r2, #5
   27e08:	movt	r1, #2
   27e0c:	bl	11cb4 <dcgettext@plt>
   27e10:	movw	r2, #57956	; 0xe264
   27e14:	mov	r1, r0
   27e18:	mov	r0, #1
   27e1c:	movt	r2, #2
   27e20:	pop	{fp, lr}
   27e24:	b	11f00 <__printf_chk@plt>
   27e28:	push	{r4, r5, r6, sl, fp, lr}
   27e2c:	add	fp, sp, #16
   27e30:	mov	r4, r2
   27e34:	mov	r5, r1
   27e38:	mov	r6, r0
   27e3c:	bl	29778 <_obstack_memory_used@@Base+0x4704>
   27e40:	cmp	r0, #0
   27e44:	popne	{r4, r5, r6, sl, fp, pc}
   27e48:	cmp	r6, #0
   27e4c:	beq	27e60 <_obstack_memory_used@@Base+0x2dec>
   27e50:	cmp	r5, #0
   27e54:	cmpne	r4, #0
   27e58:	bne	27e60 <_obstack_memory_used@@Base+0x2dec>
   27e5c:	pop	{r4, r5, r6, sl, fp, pc}
   27e60:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   27e64:	push	{r4, r5, r6, sl, fp, lr}
   27e68:	add	fp, sp, #16
   27e6c:	mov	r4, r2
   27e70:	mov	r5, r1
   27e74:	mov	r6, r0
   27e78:	bl	29778 <_obstack_memory_used@@Base+0x4704>
   27e7c:	cmp	r0, #0
   27e80:	popne	{r4, r5, r6, sl, fp, pc}
   27e84:	cmp	r6, #0
   27e88:	beq	27e9c <_obstack_memory_used@@Base+0x2e28>
   27e8c:	cmp	r5, #0
   27e90:	cmpne	r4, #0
   27e94:	bne	27e9c <_obstack_memory_used@@Base+0x2e28>
   27e98:	pop	{r4, r5, r6, sl, fp, pc}
   27e9c:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   27ea0:	push	{fp, lr}
   27ea4:	mov	fp, sp
   27ea8:	bl	29460 <_obstack_memory_used@@Base+0x43ec>
   27eac:	cmp	r0, #0
   27eb0:	popne	{fp, pc}
   27eb4:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   27eb8:	push	{fp, lr}
   27ebc:	mov	fp, sp
   27ec0:	bl	29460 <_obstack_memory_used@@Base+0x43ec>
   27ec4:	cmp	r0, #0
   27ec8:	popne	{fp, pc}
   27ecc:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   27ed0:	push	{fp, lr}
   27ed4:	mov	fp, sp
   27ed8:	bl	29460 <_obstack_memory_used@@Base+0x43ec>
   27edc:	cmp	r0, #0
   27ee0:	popne	{fp, pc}
   27ee4:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   27ee8:	push	{r4, r5, fp, lr}
   27eec:	add	fp, sp, #8
   27ef0:	mov	r4, r1
   27ef4:	mov	r5, r0
   27ef8:	bl	29490 <_obstack_memory_used@@Base+0x441c>
   27efc:	cmp	r0, #0
   27f00:	popne	{r4, r5, fp, pc}
   27f04:	cmp	r5, #0
   27f08:	beq	27f18 <_obstack_memory_used@@Base+0x2ea4>
   27f0c:	cmp	r4, #0
   27f10:	bne	27f18 <_obstack_memory_used@@Base+0x2ea4>
   27f14:	pop	{r4, r5, fp, pc}
   27f18:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   27f1c:	push	{fp, lr}
   27f20:	mov	fp, sp
   27f24:	cmp	r1, #0
   27f28:	orreq	r1, r1, #1
   27f2c:	bl	29490 <_obstack_memory_used@@Base+0x441c>
   27f30:	cmp	r0, #0
   27f34:	popne	{fp, pc}
   27f38:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   27f3c:	push	{fp, lr}
   27f40:	mov	fp, sp
   27f44:	clz	r3, r2
   27f48:	lsr	ip, r3, #5
   27f4c:	clz	r3, r1
   27f50:	lsr	r3, r3, #5
   27f54:	orrs	r3, r3, ip
   27f58:	movwne	r1, #1
   27f5c:	movwne	r2, #1
   27f60:	bl	29778 <_obstack_memory_used@@Base+0x4704>
   27f64:	cmp	r0, #0
   27f68:	popne	{fp, pc}
   27f6c:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   27f70:	push	{fp, lr}
   27f74:	mov	fp, sp
   27f78:	mov	r2, r1
   27f7c:	mov	r1, r0
   27f80:	mov	r0, #0
   27f84:	bl	29778 <_obstack_memory_used@@Base+0x4704>
   27f88:	cmp	r0, #0
   27f8c:	popne	{fp, pc}
   27f90:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   27f94:	push	{fp, lr}
   27f98:	mov	fp, sp
   27f9c:	mov	r2, r1
   27fa0:	mov	r1, r0
   27fa4:	clz	r0, r2
   27fa8:	clz	r3, r1
   27fac:	lsr	r0, r0, #5
   27fb0:	lsr	r3, r3, #5
   27fb4:	orrs	r0, r3, r0
   27fb8:	movwne	r1, #1
   27fbc:	movwne	r2, #1
   27fc0:	mov	r0, #0
   27fc4:	bl	29778 <_obstack_memory_used@@Base+0x4704>
   27fc8:	cmp	r0, #0
   27fcc:	popne	{fp, pc}
   27fd0:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   27fd4:	push	{r4, r5, r6, sl, fp, lr}
   27fd8:	add	fp, sp, #16
   27fdc:	ldr	r5, [r1]
   27fe0:	mov	r4, r1
   27fe4:	mov	r6, r0
   27fe8:	cmp	r0, #0
   27fec:	beq	28004 <_obstack_memory_used@@Base+0x2f90>
   27ff0:	mov	r0, #1
   27ff4:	add	r0, r0, r5, lsr #1
   27ff8:	adds	r5, r5, r0
   27ffc:	bcc	2800c <_obstack_memory_used@@Base+0x2f98>
   28000:	b	28048 <_obstack_memory_used@@Base+0x2fd4>
   28004:	cmp	r5, #0
   28008:	movweq	r5, #64	; 0x40
   2800c:	mov	r0, r6
   28010:	mov	r1, r5
   28014:	mov	r2, #1
   28018:	bl	29778 <_obstack_memory_used@@Base+0x4704>
   2801c:	cmp	r5, #0
   28020:	mov	r1, r5
   28024:	movwne	r1, #1
   28028:	cmp	r0, #0
   2802c:	bne	28040 <_obstack_memory_used@@Base+0x2fcc>
   28030:	clz	r2, r6
   28034:	lsr	r2, r2, #5
   28038:	orrs	r1, r2, r1
   2803c:	bne	28048 <_obstack_memory_used@@Base+0x2fd4>
   28040:	str	r5, [r4]
   28044:	pop	{r4, r5, r6, sl, fp, pc}
   28048:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   2804c:	push	{r4, r5, r6, r7, fp, lr}
   28050:	add	fp, sp, #16
   28054:	ldr	r5, [r1]
   28058:	mov	r6, r2
   2805c:	mov	r4, r1
   28060:	mov	r7, r0
   28064:	cmp	r0, #0
   28068:	beq	28080 <_obstack_memory_used@@Base+0x300c>
   2806c:	mov	r0, #1
   28070:	add	r0, r0, r5, lsr #1
   28074:	adds	r5, r5, r0
   28078:	bcc	28098 <_obstack_memory_used@@Base+0x3024>
   2807c:	b	280cc <_obstack_memory_used@@Base+0x3058>
   28080:	cmp	r5, #0
   28084:	bne	28098 <_obstack_memory_used@@Base+0x3024>
   28088:	mov	r0, #64	; 0x40
   2808c:	cmp	r6, #64	; 0x40
   28090:	udiv	r5, r0, r6
   28094:	addhi	r5, r5, #1
   28098:	mov	r0, r7
   2809c:	mov	r1, r5
   280a0:	mov	r2, r6
   280a4:	bl	29778 <_obstack_memory_used@@Base+0x4704>
   280a8:	cmp	r0, #0
   280ac:	bne	280c4 <_obstack_memory_used@@Base+0x3050>
   280b0:	cmp	r7, #0
   280b4:	beq	280cc <_obstack_memory_used@@Base+0x3058>
   280b8:	cmp	r6, #0
   280bc:	cmpne	r5, #0
   280c0:	bne	280cc <_obstack_memory_used@@Base+0x3058>
   280c4:	str	r5, [r4]
   280c8:	pop	{r4, r5, r6, r7, fp, pc}
   280cc:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   280d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   280d4:	add	fp, sp, #24
   280d8:	mov	r8, r1
   280dc:	ldr	r1, [r1]
   280e0:	mov	r5, r0
   280e4:	add	r0, r1, r1, asr #1
   280e8:	cmp	r0, r1
   280ec:	mvnvs	r0, #-2147483648	; 0x80000000
   280f0:	cmp	r0, r3
   280f4:	mov	r7, r0
   280f8:	movgt	r7, r3
   280fc:	cmn	r3, #1
   28100:	movle	r7, r0
   28104:	ldr	r0, [fp, #8]
   28108:	cmn	r0, #1
   2810c:	ble	28134 <_obstack_memory_used@@Base+0x30c0>
   28110:	cmp	r0, #0
   28114:	beq	28188 <_obstack_memory_used@@Base+0x3114>
   28118:	cmn	r7, #1
   2811c:	ble	2815c <_obstack_memory_used@@Base+0x30e8>
   28120:	mvn	r4, #-2147483648	; 0x80000000
   28124:	udiv	r6, r4, r0
   28128:	cmp	r6, r7
   2812c:	bge	28188 <_obstack_memory_used@@Base+0x3114>
   28130:	b	28198 <_obstack_memory_used@@Base+0x3124>
   28134:	cmn	r7, #1
   28138:	ble	28178 <_obstack_memory_used@@Base+0x3104>
   2813c:	cmn	r0, #1
   28140:	beq	28188 <_obstack_memory_used@@Base+0x3114>
   28144:	mov	r6, #-2147483648	; 0x80000000
   28148:	mvn	r4, #-2147483648	; 0x80000000
   2814c:	sdiv	r6, r6, r0
   28150:	cmp	r6, r7
   28154:	bge	28188 <_obstack_memory_used@@Base+0x3114>
   28158:	b	28198 <_obstack_memory_used@@Base+0x3124>
   2815c:	beq	28188 <_obstack_memory_used@@Base+0x3114>
   28160:	mov	r6, #-2147483648	; 0x80000000
   28164:	mvn	r4, #-2147483648	; 0x80000000
   28168:	sdiv	r6, r6, r7
   2816c:	cmp	r6, r0
   28170:	bge	28188 <_obstack_memory_used@@Base+0x3114>
   28174:	b	28198 <_obstack_memory_used@@Base+0x3124>
   28178:	mvn	r4, #-2147483648	; 0x80000000
   2817c:	sdiv	r6, r4, r0
   28180:	cmp	r7, r6
   28184:	blt	28198 <_obstack_memory_used@@Base+0x3124>
   28188:	mul	r6, r7, r0
   2818c:	mov	r4, #64	; 0x40
   28190:	cmp	r6, #63	; 0x3f
   28194:	bgt	281a0 <_obstack_memory_used@@Base+0x312c>
   28198:	sdiv	r7, r4, r0
   2819c:	mul	r6, r7, r0
   281a0:	cmp	r5, #0
   281a4:	moveq	r4, #0
   281a8:	streq	r4, [r8]
   281ac:	sub	r4, r7, r1
   281b0:	cmp	r4, r2
   281b4:	bge	28260 <_obstack_memory_used@@Base+0x31ec>
   281b8:	add	r7, r1, r2
   281bc:	mov	r6, #0
   281c0:	mov	r2, #0
   281c4:	cmp	r7, r3
   281c8:	movwgt	r6, #1
   281cc:	cmn	r3, #1
   281d0:	movwgt	r2, #1
   281d4:	cmp	r7, r1
   281d8:	bvs	28294 <_obstack_memory_used@@Base+0x3220>
   281dc:	ands	r1, r2, r6
   281e0:	bne	28294 <_obstack_memory_used@@Base+0x3220>
   281e4:	cmn	r0, #1
   281e8:	ble	28210 <_obstack_memory_used@@Base+0x319c>
   281ec:	cmp	r0, #0
   281f0:	beq	2825c <_obstack_memory_used@@Base+0x31e8>
   281f4:	cmn	r7, #1
   281f8:	ble	28234 <_obstack_memory_used@@Base+0x31c0>
   281fc:	mvn	r1, #-2147483648	; 0x80000000
   28200:	udiv	r1, r1, r0
   28204:	cmp	r1, r7
   28208:	bge	2825c <_obstack_memory_used@@Base+0x31e8>
   2820c:	b	28294 <_obstack_memory_used@@Base+0x3220>
   28210:	cmn	r7, #1
   28214:	ble	2824c <_obstack_memory_used@@Base+0x31d8>
   28218:	cmn	r0, #1
   2821c:	beq	2825c <_obstack_memory_used@@Base+0x31e8>
   28220:	mov	r1, #-2147483648	; 0x80000000
   28224:	sdiv	r1, r1, r0
   28228:	cmp	r1, r7
   2822c:	bge	2825c <_obstack_memory_used@@Base+0x31e8>
   28230:	b	28294 <_obstack_memory_used@@Base+0x3220>
   28234:	beq	2825c <_obstack_memory_used@@Base+0x31e8>
   28238:	mov	r1, #-2147483648	; 0x80000000
   2823c:	sdiv	r1, r1, r7
   28240:	cmp	r1, r0
   28244:	bge	2825c <_obstack_memory_used@@Base+0x31e8>
   28248:	b	28294 <_obstack_memory_used@@Base+0x3220>
   2824c:	mvn	r1, #-2147483648	; 0x80000000
   28250:	sdiv	r1, r1, r0
   28254:	cmp	r7, r1
   28258:	blt	28294 <_obstack_memory_used@@Base+0x3220>
   2825c:	mul	r6, r7, r0
   28260:	mov	r0, r5
   28264:	mov	r1, r6
   28268:	bl	29490 <_obstack_memory_used@@Base+0x441c>
   2826c:	cmp	r6, #0
   28270:	movwne	r6, #1
   28274:	cmp	r0, #0
   28278:	bne	2828c <_obstack_memory_used@@Base+0x3218>
   2827c:	clz	r1, r5
   28280:	lsr	r1, r1, #5
   28284:	orrs	r1, r1, r6
   28288:	bne	28294 <_obstack_memory_used@@Base+0x3220>
   2828c:	str	r7, [r8]
   28290:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28294:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   28298:	push	{fp, lr}
   2829c:	mov	fp, sp
   282a0:	mov	r1, #1
   282a4:	bl	2940c <_obstack_memory_used@@Base+0x4398>
   282a8:	cmp	r0, #0
   282ac:	popne	{fp, pc}
   282b0:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   282b4:	push	{fp, lr}
   282b8:	mov	fp, sp
   282bc:	bl	2940c <_obstack_memory_used@@Base+0x4398>
   282c0:	cmp	r0, #0
   282c4:	popne	{fp, pc}
   282c8:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   282cc:	push	{fp, lr}
   282d0:	mov	fp, sp
   282d4:	mov	r1, #1
   282d8:	bl	2940c <_obstack_memory_used@@Base+0x4398>
   282dc:	cmp	r0, #0
   282e0:	popne	{fp, pc}
   282e4:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   282e8:	push	{fp, lr}
   282ec:	mov	fp, sp
   282f0:	bl	2940c <_obstack_memory_used@@Base+0x4398>
   282f4:	cmp	r0, #0
   282f8:	popne	{fp, pc}
   282fc:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   28300:	push	{r4, r5, r6, sl, fp, lr}
   28304:	add	fp, sp, #16
   28308:	mov	r5, r0
   2830c:	mov	r0, r1
   28310:	mov	r4, r1
   28314:	bl	29460 <_obstack_memory_used@@Base+0x43ec>
   28318:	cmp	r0, #0
   2831c:	beq	28338 <_obstack_memory_used@@Base+0x32c4>
   28320:	mov	r1, r5
   28324:	mov	r2, r4
   28328:	mov	r6, r0
   2832c:	bl	11c60 <memcpy@plt>
   28330:	mov	r0, r6
   28334:	pop	{r4, r5, r6, sl, fp, pc}
   28338:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   2833c:	push	{r4, r5, r6, sl, fp, lr}
   28340:	add	fp, sp, #16
   28344:	mov	r5, r0
   28348:	mov	r0, r1
   2834c:	mov	r4, r1
   28350:	bl	29460 <_obstack_memory_used@@Base+0x43ec>
   28354:	cmp	r0, #0
   28358:	beq	28374 <_obstack_memory_used@@Base+0x3300>
   2835c:	mov	r1, r5
   28360:	mov	r2, r4
   28364:	mov	r6, r0
   28368:	bl	11c60 <memcpy@plt>
   2836c:	mov	r0, r6
   28370:	pop	{r4, r5, r6, sl, fp, pc}
   28374:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   28378:	push	{r4, r5, r6, sl, fp, lr}
   2837c:	add	fp, sp, #16
   28380:	mov	r5, r0
   28384:	add	r0, r1, #1
   28388:	mov	r4, r1
   2838c:	bl	29460 <_obstack_memory_used@@Base+0x43ec>
   28390:	cmp	r0, #0
   28394:	beq	283bc <_obstack_memory_used@@Base+0x3348>
   28398:	mov	r6, r0
   2839c:	mov	r0, #0
   283a0:	mov	r1, r5
   283a4:	mov	r2, r4
   283a8:	strb	r0, [r6, r4]
   283ac:	mov	r0, r6
   283b0:	bl	11c60 <memcpy@plt>
   283b4:	mov	r0, r6
   283b8:	pop	{r4, r5, r6, sl, fp, pc}
   283bc:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   283c0:	push	{r4, r5, r6, sl, fp, lr}
   283c4:	add	fp, sp, #16
   283c8:	mov	r4, r0
   283cc:	bl	11eac <strlen@plt>
   283d0:	add	r5, r0, #1
   283d4:	mov	r0, r5
   283d8:	bl	29460 <_obstack_memory_used@@Base+0x43ec>
   283dc:	cmp	r0, #0
   283e0:	beq	283fc <_obstack_memory_used@@Base+0x3388>
   283e4:	mov	r1, r4
   283e8:	mov	r2, r5
   283ec:	mov	r6, r0
   283f0:	bl	11c60 <memcpy@plt>
   283f4:	mov	r0, r6
   283f8:	pop	{r4, r5, r6, sl, fp, pc}
   283fc:	bl	28400 <_obstack_memory_used@@Base+0x338c>
   28400:	push	{fp, lr}
   28404:	mov	fp, sp
   28408:	movw	r0, #62124	; 0xf2ac
   2840c:	movw	r1, #56991	; 0xde9f
   28410:	mov	r2, #5
   28414:	movt	r0, #3
   28418:	movt	r1, #2
   2841c:	ldr	r4, [r0]
   28420:	mov	r0, #0
   28424:	bl	11cb4 <dcgettext@plt>
   28428:	movw	r2, #56722	; 0xdd92
   2842c:	mov	r3, r0
   28430:	mov	r0, r4
   28434:	mov	r1, #0
   28438:	movt	r2, #2
   2843c:	bl	11db0 <error@plt>
   28440:	bl	12038 <abort@plt>
   28444:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   28448:	add	fp, sp, #24
   2844c:	sub	sp, sp, #16
   28450:	mov	r8, r0
   28454:	ldr	r0, [fp, #16]
   28458:	mov	r5, r3
   2845c:	mov	r6, r2
   28460:	mov	r2, r1
   28464:	add	r3, sp, #8
   28468:	mov	r1, #0
   2846c:	str	r0, [sp]
   28470:	mov	r0, r8
   28474:	bl	2876c <_obstack_memory_used@@Base+0x36f8>
   28478:	cmp	r0, #0
   2847c:	bne	28508 <_obstack_memory_used@@Base+0x3494>
   28480:	ldr	r4, [sp, #8]
   28484:	ldr	r7, [sp, #12]
   28488:	subs	r0, r4, r6
   2848c:	sbcs	r0, r7, r5
   28490:	bcc	284b4 <_obstack_memory_used@@Base+0x3440>
   28494:	ldr	r1, [fp, #8]
   28498:	ldr	r0, [fp, #12]
   2849c:	subs	r1, r1, r4
   284a0:	sbcs	r0, r0, r7
   284a4:	movcs	r0, r4
   284a8:	movcs	r1, r7
   284ac:	subcs	sp, fp, #24
   284b0:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   284b4:	bl	11ed0 <__errno_location@plt>
   284b8:	subs	r1, r4, #1073741824	; 0x40000000
   284bc:	sbcs	r1, r7, #0
   284c0:	movcc	r1, #34	; 0x22
   284c4:	movcs	r1, #75	; 0x4b
   284c8:	str	r1, [r0]
   284cc:	ldr	r6, [r0]
   284d0:	ldr	r4, [fp, #24]
   284d4:	ldr	r5, [fp, #20]
   284d8:	mov	r0, r8
   284dc:	bl	26d20 <_obstack_memory_used@@Base+0x1cac>
   284e0:	subs	r1, r6, #22
   284e4:	movw	r2, #48267	; 0xbc8b
   284e8:	str	r0, [sp]
   284ec:	mov	r3, r5
   284f0:	movne	r1, r6
   284f4:	cmp	r4, #0
   284f8:	movt	r2, #2
   284fc:	movweq	r4, #1
   28500:	mov	r0, r4
   28504:	bl	11db0 <error@plt>
   28508:	cmp	r0, #1
   2850c:	beq	28524 <_obstack_memory_used@@Base+0x34b0>
   28510:	cmp	r0, #3
   28514:	bne	28530 <_obstack_memory_used@@Base+0x34bc>
   28518:	bl	11ed0 <__errno_location@plt>
   2851c:	mov	r1, #0
   28520:	b	284c8 <_obstack_memory_used@@Base+0x3454>
   28524:	bl	11ed0 <__errno_location@plt>
   28528:	mov	r1, #75	; 0x4b
   2852c:	b	284c8 <_obstack_memory_used@@Base+0x3454>
   28530:	bl	11ed0 <__errno_location@plt>
   28534:	b	284cc <_obstack_memory_used@@Base+0x3458>
   28538:	mov	r1, #10
   2853c:	b	28444 <_obstack_memory_used@@Base+0x33d0>
   28540:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28544:	add	fp, sp, #28
   28548:	sub	sp, sp, #108	; 0x6c
   2854c:	mov	r5, #100	; 0x64
   28550:	mov	r9, #0
   28554:	add	r7, sp, #8
   28558:	str	r5, [sp, #4]
   2855c:	bl	11ed0 <__errno_location@plt>
   28560:	mov	r4, r0
   28564:	mov	sl, #1
   28568:	add	r8, sp, #4
   2856c:	mov	r6, #0
   28570:	b	28598 <_obstack_memory_used@@Base+0x3524>
   28574:	mov	r0, #0
   28578:	mov	r1, r8
   2857c:	mov	r2, #1
   28580:	mvn	r3, #0
   28584:	str	sl, [sp]
   28588:	bl	280d0 <_obstack_memory_used@@Base+0x305c>
   2858c:	ldr	r5, [sp, #4]
   28590:	mov	r6, r0
   28594:	mov	r7, r0
   28598:	sub	r5, r5, #1
   2859c:	mov	r0, r7
   285a0:	mov	r1, r5
   285a4:	strb	r9, [r7, r5]
   285a8:	str	r9, [r4]
   285ac:	bl	11dbc <gethostname@plt>
   285b0:	cmp	r0, #0
   285b4:	bne	285d0 <_obstack_memory_used@@Base+0x355c>
   285b8:	mov	r0, r7
   285bc:	bl	11eac <strlen@plt>
   285c0:	add	r1, r0, #1
   285c4:	cmp	r1, r5
   285c8:	blt	28690 <_obstack_memory_used@@Base+0x361c>
   285cc:	str	r9, [r4]
   285d0:	mov	r0, r6
   285d4:	bl	2046c <__assert_fail@plt+0xe3e0>
   285d8:	ldr	r0, [r4]
   285dc:	cmp	r0, #36	; 0x24
   285e0:	bhi	28680 <_obstack_memory_used@@Base+0x360c>
   285e4:	add	r1, pc, #0
   285e8:	ldr	pc, [r1, r0, lsl #2]
   285ec:	andeq	r8, r2, r4, ror r5
   285f0:	andeq	r8, r2, r0, lsl #13
   285f4:	andeq	r8, r2, r0, lsl #13
   285f8:	andeq	r8, r2, r0, lsl #13
   285fc:	andeq	r8, r2, r0, lsl #13
   28600:	andeq	r8, r2, r0, lsl #13
   28604:	andeq	r8, r2, r0, lsl #13
   28608:	andeq	r8, r2, r0, lsl #13
   2860c:	andeq	r8, r2, r0, lsl #13
   28610:	andeq	r8, r2, r0, lsl #13
   28614:	andeq	r8, r2, r0, lsl #13
   28618:	andeq	r8, r2, r0, lsl #13
   2861c:	andeq	r8, r2, r4, ror r5
   28620:	andeq	r8, r2, r0, lsl #13
   28624:	andeq	r8, r2, r0, lsl #13
   28628:	andeq	r8, r2, r0, lsl #13
   2862c:	andeq	r8, r2, r0, lsl #13
   28630:	andeq	r8, r2, r0, lsl #13
   28634:	andeq	r8, r2, r0, lsl #13
   28638:	andeq	r8, r2, r0, lsl #13
   2863c:	andeq	r8, r2, r0, lsl #13
   28640:	andeq	r8, r2, r0, lsl #13
   28644:	andeq	r8, r2, r4, ror r5
   28648:	andeq	r8, r2, r0, lsl #13
   2864c:	andeq	r8, r2, r0, lsl #13
   28650:	andeq	r8, r2, r0, lsl #13
   28654:	andeq	r8, r2, r0, lsl #13
   28658:	andeq	r8, r2, r0, lsl #13
   2865c:	andeq	r8, r2, r0, lsl #13
   28660:	andeq	r8, r2, r0, lsl #13
   28664:	andeq	r8, r2, r0, lsl #13
   28668:	andeq	r8, r2, r0, lsl #13
   2866c:	andeq	r8, r2, r0, lsl #13
   28670:	andeq	r8, r2, r0, lsl #13
   28674:	andeq	r8, r2, r0, lsl #13
   28678:	andeq	r8, r2, r0, lsl #13
   2867c:	andeq	r8, r2, r4, ror r5
   28680:	mov	r6, #0
   28684:	mov	r0, r6
   28688:	sub	sp, fp, #28
   2868c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28690:	cmp	r6, #0
   28694:	bne	28684 <_obstack_memory_used@@Base+0x3610>
   28698:	mov	r0, r7
   2869c:	bl	2833c <_obstack_memory_used@@Base+0x32c8>
   286a0:	mov	r6, r0
   286a4:	b	28684 <_obstack_memory_used@@Base+0x3610>
   286a8:	push	{fp, lr}
   286ac:	mov	fp, sp
   286b0:	sub	sp, sp, #8
   286b4:	movw	ip, #62124	; 0xf2ac
   286b8:	movt	ip, #3
   286bc:	ldr	ip, [ip]
   286c0:	str	ip, [sp, #4]
   286c4:	ldr	ip, [fp, #8]
   286c8:	str	ip, [sp]
   286cc:	bl	286d4 <_obstack_memory_used@@Base+0x3660>
   286d0:	bl	12038 <abort@plt>
   286d4:	push	{r4, r5, r6, r7, fp, lr}
   286d8:	add	fp, sp, #16
   286dc:	sub	sp, sp, #16
   286e0:	sub	r0, r0, #1
   286e4:	cmp	r0, #4
   286e8:	bcs	28768 <_obstack_memory_used@@Base+0x36f4>
   286ec:	mov	r5, r1
   286f0:	movw	r1, #58128	; 0xe310
   286f4:	ldr	r4, [fp, #12]
   286f8:	ldr	r6, [fp, #8]
   286fc:	movt	r1, #2
   28700:	cmn	r5, #1
   28704:	ldr	r1, [r1, r0, lsl #2]
   28708:	ble	2871c <_obstack_memory_used@@Base+0x36a8>
   2870c:	ldr	r7, [r3, r5, lsl #4]
   28710:	movw	r5, #58032	; 0xe2b0
   28714:	movt	r5, #2
   28718:	b	28738 <_obstack_memory_used@@Base+0x36c4>
   2871c:	mov	r0, #0
   28720:	add	r7, sp, #14
   28724:	strb	r0, [sp, #15]
   28728:	movw	r0, #58032	; 0xe2b0
   2872c:	strb	r2, [sp, #14]
   28730:	movt	r0, #2
   28734:	sub	r5, r0, r5
   28738:	mov	r0, #0
   2873c:	mov	r2, #5
   28740:	bl	11cb4 <dcgettext@plt>
   28744:	mov	r2, r0
   28748:	mov	r0, r4
   2874c:	mov	r1, #0
   28750:	mov	r3, r5
   28754:	str	r7, [sp]
   28758:	str	r6, [sp, #4]
   2875c:	bl	11db0 <error@plt>
   28760:	sub	sp, fp, #16
   28764:	pop	{r4, r5, r6, r7, fp, pc}
   28768:	bl	12038 <abort@plt>
   2876c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28770:	add	fp, sp, #28
   28774:	sub	sp, sp, #44	; 0x2c
   28778:	cmp	r2, #37	; 0x25
   2877c:	bcs	293ec <_obstack_memory_used@@Base+0x4378>
   28780:	ldr	sl, [fp, #8]
   28784:	mov	r6, r2
   28788:	mov	r7, r1
   2878c:	mov	r4, r0
   28790:	str	r3, [sp, #36]	; 0x24
   28794:	bl	11ed0 <__errno_location@plt>
   28798:	mov	r5, r0
   2879c:	mov	r0, #0
   287a0:	str	r0, [r5]
   287a4:	bl	11e70 <__ctype_b_loc@plt>
   287a8:	ldr	r1, [r0]
   287ac:	mov	r2, r4
   287b0:	ldrb	r0, [r2], #1
   287b4:	add	r3, r1, r0, lsl #1
   287b8:	ldrb	r3, [r3, #1]
   287bc:	tst	r3, #32
   287c0:	bne	287b0 <_obstack_memory_used@@Base+0x373c>
   287c4:	sub	r9, fp, #32
   287c8:	cmp	r7, #0
   287cc:	mov	r8, #4
   287d0:	movne	r9, r7
   287d4:	cmp	r0, #45	; 0x2d
   287d8:	beq	293e0 <_obstack_memory_used@@Base+0x436c>
   287dc:	mov	r0, r4
   287e0:	mov	r1, r9
   287e4:	mov	r2, r6
   287e8:	mov	r3, #0
   287ec:	bl	11c6c <__strtoull_internal@plt>
   287f0:	mov	r7, r1
   287f4:	ldr	r1, [r9]
   287f8:	cmp	r1, r4
   287fc:	beq	28828 <_obstack_memory_used@@Base+0x37b4>
   28800:	mov	r6, r0
   28804:	ldr	r0, [r5]
   28808:	cmp	r0, #0
   2880c:	beq	28864 <_obstack_memory_used@@Base+0x37f0>
   28810:	cmp	r0, #34	; 0x22
   28814:	bne	293e0 <_obstack_memory_used@@Base+0x436c>
   28818:	mov	r8, #1
   2881c:	cmp	sl, #0
   28820:	bne	28870 <_obstack_memory_used@@Base+0x37fc>
   28824:	b	293d8 <_obstack_memory_used@@Base+0x4364>
   28828:	cmp	sl, #0
   2882c:	beq	293e0 <_obstack_memory_used@@Base+0x436c>
   28830:	mov	r5, r1
   28834:	ldrb	r1, [r4]
   28838:	cmp	r1, #0
   2883c:	beq	293e0 <_obstack_memory_used@@Base+0x436c>
   28840:	mov	r0, sl
   28844:	bl	11eb8 <strchr@plt>
   28848:	cmp	r0, #0
   2884c:	beq	293e0 <_obstack_memory_used@@Base+0x436c>
   28850:	mov	r1, r5
   28854:	mov	r8, #0
   28858:	mov	r6, #1
   2885c:	mov	r7, #0
   28860:	b	28870 <_obstack_memory_used@@Base+0x37fc>
   28864:	mov	r8, r0
   28868:	cmp	sl, #0
   2886c:	beq	293d8 <_obstack_memory_used@@Base+0x4364>
   28870:	ldrb	r4, [r1]
   28874:	cmp	r4, #0
   28878:	beq	293d8 <_obstack_memory_used@@Base+0x4364>
   2887c:	str	r1, [sp, #32]
   28880:	mov	r0, sl
   28884:	mov	r1, r4
   28888:	bl	11eb8 <strchr@plt>
   2888c:	cmp	r0, #0
   28890:	beq	28b58 <_obstack_memory_used@@Base+0x3ae4>
   28894:	sub	r0, r4, #69	; 0x45
   28898:	mov	r1, #1
   2889c:	mov	r3, #0
   288a0:	mov	r5, #1024	; 0x400
   288a4:	cmp	r0, #47	; 0x2f
   288a8:	str	r1, [sp, #28]
   288ac:	bhi	289b0 <_obstack_memory_used@@Base+0x393c>
   288b0:	add	r1, pc, #0
   288b4:	ldr	pc, [r1, r0, lsl #2]
   288b8:	andeq	r8, r2, r8, ror r9
   288bc:			; <UNDEFINED> instruction: 0x000289b0
   288c0:	andeq	r8, r2, r8, ror r9
   288c4:			; <UNDEFINED> instruction: 0x000289b0
   288c8:			; <UNDEFINED> instruction: 0x000289b0
   288cc:			; <UNDEFINED> instruction: 0x000289b0
   288d0:	andeq	r8, r2, r8, ror r9
   288d4:			; <UNDEFINED> instruction: 0x000289b0
   288d8:	andeq	r8, r2, r8, ror r9
   288dc:			; <UNDEFINED> instruction: 0x000289b0
   288e0:			; <UNDEFINED> instruction: 0x000289b0
   288e4:	andeq	r8, r2, r8, ror r9
   288e8:			; <UNDEFINED> instruction: 0x000289b0
   288ec:			; <UNDEFINED> instruction: 0x000289b0
   288f0:			; <UNDEFINED> instruction: 0x000289b0
   288f4:	andeq	r8, r2, r8, ror r9
   288f8:			; <UNDEFINED> instruction: 0x000289b0
   288fc:			; <UNDEFINED> instruction: 0x000289b0
   28900:			; <UNDEFINED> instruction: 0x000289b0
   28904:			; <UNDEFINED> instruction: 0x000289b0
   28908:	andeq	r8, r2, r8, ror r9
   2890c:	andeq	r8, r2, r8, ror r9
   28910:			; <UNDEFINED> instruction: 0x000289b0
   28914:			; <UNDEFINED> instruction: 0x000289b0
   28918:			; <UNDEFINED> instruction: 0x000289b0
   2891c:			; <UNDEFINED> instruction: 0x000289b0
   28920:			; <UNDEFINED> instruction: 0x000289b0
   28924:			; <UNDEFINED> instruction: 0x000289b0
   28928:			; <UNDEFINED> instruction: 0x000289b0
   2892c:			; <UNDEFINED> instruction: 0x000289b0
   28930:			; <UNDEFINED> instruction: 0x000289b0
   28934:			; <UNDEFINED> instruction: 0x000289b0
   28938:			; <UNDEFINED> instruction: 0x000289b0
   2893c:			; <UNDEFINED> instruction: 0x000289b0
   28940:	andeq	r8, r2, r8, ror r9
   28944:			; <UNDEFINED> instruction: 0x000289b0
   28948:			; <UNDEFINED> instruction: 0x000289b0
   2894c:			; <UNDEFINED> instruction: 0x000289b0
   28950:	andeq	r8, r2, r8, ror r9
   28954:			; <UNDEFINED> instruction: 0x000289b0
   28958:	andeq	r8, r2, r8, ror r9
   2895c:			; <UNDEFINED> instruction: 0x000289b0
   28960:			; <UNDEFINED> instruction: 0x000289b0
   28964:			; <UNDEFINED> instruction: 0x000289b0
   28968:			; <UNDEFINED> instruction: 0x000289b0
   2896c:			; <UNDEFINED> instruction: 0x000289b0
   28970:			; <UNDEFINED> instruction: 0x000289b0
   28974:	andeq	r8, r2, r8, ror r9
   28978:	mov	r0, sl
   2897c:	mov	r1, #48	; 0x30
   28980:	bl	11eb8 <strchr@plt>
   28984:	cmp	r0, #0
   28988:	beq	289ac <_obstack_memory_used@@Base+0x3938>
   2898c:	ldr	r1, [sp, #32]
   28990:	ldrb	r0, [r1, #1]
   28994:	cmp	r0, #66	; 0x42
   28998:	cmpne	r0, #68	; 0x44
   2899c:	bne	28b64 <_obstack_memory_used@@Base+0x3af0>
   289a0:	mov	r5, #1000	; 0x3e8
   289a4:	mov	r0, #2
   289a8:	str	r0, [sp, #28]
   289ac:	mov	r3, #0
   289b0:	sub	r0, r4, #66	; 0x42
   289b4:	cmp	r0, #53	; 0x35
   289b8:	bhi	28b58 <_obstack_memory_used@@Base+0x3ae4>
   289bc:	add	r1, pc, #0
   289c0:	ldr	pc, [r1, r0, lsl #2]
   289c4:	andeq	r8, r2, r0, ror #29
   289c8:	andeq	r8, r2, r8, asr fp
   289cc:	andeq	r8, r2, r8, asr fp
   289d0:	andeq	r8, r2, r8, lsl #30
   289d4:	andeq	r8, r2, r8, asr fp
   289d8:	muleq	r2, ip, sl
   289dc:	andeq	r8, r2, r8, asr fp
   289e0:	andeq	r8, r2, r8, asr fp
   289e4:	andeq	r8, r2, r8, asr fp
   289e8:	andeq	r8, r2, r8, lsl #23
   289ec:	andeq	r8, r2, r8, asr fp
   289f0:	ldrdeq	r8, [r2], -r0
   289f4:	andeq	r8, r2, r8, asr fp
   289f8:	andeq	r8, r2, r8, asr fp
   289fc:	andeq	r9, r2, r0, rrx
   28a00:	andeq	r8, r2, r8, asr fp
   28a04:	andeq	r8, r2, r8, asr fp
   28a08:	andeq	r8, r2, r8, asr fp
   28a0c:	andeq	r8, r2, ip, asr ip
   28a10:	andeq	r8, r2, r8, asr fp
   28a14:	andeq	r8, r2, r8, asr fp
   28a18:	andeq	r8, r2, r8, asr fp
   28a1c:	andeq	r8, r2, r8, asr fp
   28a20:	andeq	r9, r2, r8, lsl #3
   28a24:	andeq	r8, r2, r4, asr #26
   28a28:	andeq	r8, r2, r8, asr fp
   28a2c:	andeq	r8, r2, r8, asr fp
   28a30:	andeq	r8, r2, r8, asr fp
   28a34:	andeq	r8, r2, r8, asr fp
   28a38:	andeq	r8, r2, r8, asr fp
   28a3c:	andeq	r8, r2, r8, asr fp
   28a40:	andeq	r8, r2, r8, asr fp
   28a44:	andeq	r9, r2, r0, ror #6
   28a48:			; <UNDEFINED> instruction: 0x000293b8
   28a4c:	andeq	r8, r2, r8, asr fp
   28a50:	andeq	r8, r2, r8, asr fp
   28a54:	andeq	r8, r2, r8, asr fp
   28a58:	muleq	r2, ip, sl
   28a5c:	andeq	r8, r2, r8, asr fp
   28a60:	andeq	r8, r2, r8, asr fp
   28a64:	andeq	r8, r2, r8, asr fp
   28a68:	andeq	r8, r2, r8, lsl #23
   28a6c:	andeq	r8, r2, r8, asr fp
   28a70:	ldrdeq	r8, [r2], -r0
   28a74:	andeq	r8, r2, r8, asr fp
   28a78:	andeq	r8, r2, r8, asr fp
   28a7c:	andeq	r8, r2, r8, asr fp
   28a80:	andeq	r8, r2, r8, asr fp
   28a84:	andeq	r8, r2, r8, asr fp
   28a88:	andeq	r8, r2, r8, asr fp
   28a8c:	andeq	r8, r2, ip, asr ip
   28a90:	andeq	r8, r2, r8, asr fp
   28a94:	andeq	r8, r2, r8, asr fp
   28a98:	muleq	r2, r4, r3
   28a9c:	mvn	r0, #0
   28aa0:	mvn	r1, #0
   28aa4:	mov	r2, r5
   28aa8:	mov	sl, r3
   28aac:	bl	29c48 <_obstack_memory_used@@Base+0x4bd4>
   28ab0:	subs	r3, r0, r6
   28ab4:	mov	lr, #0
   28ab8:	umull	r4, r2, r6, r5
   28abc:	str	r1, [sp, #20]
   28ac0:	sbcs	r3, r1, r7
   28ac4:	mla	ip, r6, sl, r2
   28ac8:	mov	r2, r1
   28acc:	movwcc	lr, #1
   28ad0:	mla	r7, r7, r5, ip
   28ad4:	mov	r2, #0
   28ad8:	cmp	lr, #0
   28adc:	mvnne	r4, #0
   28ae0:	mvnne	r7, #0
   28ae4:	subs	r6, r0, r4
   28ae8:	sbcs	r6, r1, r7
   28aec:	movwcc	r2, #1
   28af0:	umull	r3, r6, r4, r5
   28af4:	cmp	r2, #0
   28af8:	str	r6, [sp, #16]
   28afc:	mvnne	r3, #0
   28b00:	cmp	r2, #0
   28b04:	umull	r6, ip, r3, r5
   28b08:	mla	r1, r3, sl, ip
   28b0c:	ldr	ip, [sp, #16]
   28b10:	str	r1, [sp, #12]
   28b14:	mla	r4, r4, sl, ip
   28b18:	mla	r4, r7, r5, r4
   28b1c:	ldr	r7, [sp, #12]
   28b20:	mvnne	r4, #0
   28b24:	subs	r0, r0, r3
   28b28:	ldr	r0, [sp, #20]
   28b2c:	mla	r7, r4, r5, r7
   28b30:	sbcs	r0, r0, r4
   28b34:	mov	r0, #0
   28b38:	movwcc	r0, #1
   28b3c:	cmp	r0, #0
   28b40:	mov	r1, r0
   28b44:	orr	r0, lr, r2
   28b48:	mvnne	r7, #0
   28b4c:	mvnne	r6, #0
   28b50:	orr	r3, r0, r1
   28b54:	b	293b8 <_obstack_memory_used@@Base+0x4344>
   28b58:	ldr	r0, [sp, #36]	; 0x24
   28b5c:	orr	r8, r8, #2
   28b60:	b	293dc <_obstack_memory_used@@Base+0x4368>
   28b64:	cmp	r0, #105	; 0x69
   28b68:	mov	r3, #0
   28b6c:	bne	289b0 <_obstack_memory_used@@Base+0x393c>
   28b70:	ldrb	r0, [r1, #2]
   28b74:	mov	r1, #1
   28b78:	cmp	r0, #66	; 0x42
   28b7c:	movweq	r1, #3
   28b80:	str	r1, [sp, #28]
   28b84:	b	289b0 <_obstack_memory_used@@Base+0x393c>
   28b88:	mvn	r0, #0
   28b8c:	mvn	r1, #0
   28b90:	mov	r2, r5
   28b94:	mov	r4, r3
   28b98:	bl	29c48 <_obstack_memory_used@@Base+0x4bd4>
   28b9c:	subs	r0, r0, r6
   28ba0:	mov	r2, #0
   28ba4:	sbcs	r0, r1, r7
   28ba8:	movwcc	r2, #1
   28bac:	umull	r0, r1, r6, r5
   28bb0:	mla	r1, r6, r4, r1
   28bb4:	cmp	r2, #0
   28bb8:	mov	r3, r2
   28bbc:	mla	r7, r7, r5, r1
   28bc0:	mvnne	r0, #0
   28bc4:	mvnne	r7, #0
   28bc8:	mov	r6, r0
   28bcc:	b	293b8 <_obstack_memory_used@@Base+0x4344>
   28bd0:	mvn	r0, #0
   28bd4:	mvn	r1, #0
   28bd8:	mov	r2, r5
   28bdc:	str	r3, [sp, #24]
   28be0:	bl	29c48 <_obstack_memory_used@@Base+0x4bd4>
   28be4:	subs	r3, r0, r6
   28be8:	mov	ip, r0
   28bec:	umull	r4, r0, r6, r5
   28bf0:	mov	sl, #0
   28bf4:	sbcs	r3, r1, r7
   28bf8:	str	r0, [sp, #20]
   28bfc:	ldr	r0, [sp, #24]
   28c00:	mov	r3, #0
   28c04:	movwcc	r3, #1
   28c08:	cmp	r3, #0
   28c0c:	mvnne	r4, #0
   28c10:	cmp	r3, #0
   28c14:	umull	lr, r2, r4, r5
   28c18:	mla	r2, r4, r0, r2
   28c1c:	str	r2, [sp, #16]
   28c20:	ldr	r2, [sp, #20]
   28c24:	mla	r6, r6, r0, r2
   28c28:	ldr	r0, [sp, #16]
   28c2c:	mla	r6, r7, r5, r6
   28c30:	mvnne	r6, #0
   28c34:	mla	r7, r6, r5, r0
   28c38:	subs	r0, ip, r4
   28c3c:	sbcs	r0, r1, r6
   28c40:	movwcc	sl, #1
   28c44:	cmp	sl, #0
   28c48:	orr	r3, r3, sl
   28c4c:	mvnne	lr, #0
   28c50:	mvnne	r7, #0
   28c54:	mov	r6, lr
   28c58:	b	293b8 <_obstack_memory_used@@Base+0x4344>
   28c5c:	mvn	r0, #0
   28c60:	mvn	r1, #0
   28c64:	mov	r2, r5
   28c68:	mov	sl, r3
   28c6c:	bl	29c48 <_obstack_memory_used@@Base+0x4bd4>
   28c70:	subs	r3, r0, r6
   28c74:	mov	ip, r1
   28c78:	umull	r2, lr, r6, r5
   28c7c:	str	r0, [sp, #20]
   28c80:	sbcs	r3, r1, r7
   28c84:	mov	r1, #0
   28c88:	mla	r6, r6, sl, lr
   28c8c:	mov	lr, #0
   28c90:	str	ip, [sp, #16]
   28c94:	movwcc	r1, #1
   28c98:	mla	r7, r7, r5, r6
   28c9c:	cmp	r1, #0
   28ca0:	mvnne	r2, #0
   28ca4:	cmp	r1, #0
   28ca8:	umull	r3, r4, r2, r5
   28cac:	mvnne	r7, #0
   28cb0:	mla	r4, r2, sl, r4
   28cb4:	subs	r2, r0, r2
   28cb8:	sbcs	r2, ip, r7
   28cbc:	mla	r4, r7, r5, r4
   28cc0:	movwcc	lr, #1
   28cc4:	mov	r2, #0
   28cc8:	cmp	lr, #0
   28ccc:	mvnne	r3, #0
   28cd0:	mvnne	r4, #0
   28cd4:	subs	r7, r0, r3
   28cd8:	mov	r0, r5
   28cdc:	sbcs	r7, ip, r4
   28ce0:	movwcc	r2, #1
   28ce4:	umull	r5, r7, r3, r5
   28ce8:	cmp	r2, #0
   28cec:	mla	r3, r3, sl, r7
   28cf0:	mvnne	r5, #0
   28cf4:	mla	r3, r4, r0, r3
   28cf8:	cmp	r2, #0
   28cfc:	umull	r6, ip, r5, r0
   28d00:	mvnne	r3, #0
   28d04:	mla	ip, r5, sl, ip
   28d08:	mla	r7, r3, r0, ip
   28d0c:	ldr	r0, [sp, #20]
   28d10:	subs	r0, r0, r5
   28d14:	ldr	r0, [sp, #16]
   28d18:	sbcs	r0, r0, r3
   28d1c:	mov	r0, #0
   28d20:	movwcc	r0, #1
   28d24:	cmp	r0, #0
   28d28:	mov	r3, r0
   28d2c:	orr	r0, r1, lr
   28d30:	orr	r0, r0, r2
   28d34:	mvnne	r7, #0
   28d38:	mvnne	r6, #0
   28d3c:	orr	r3, r0, r3
   28d40:	b	293b8 <_obstack_memory_used@@Base+0x4344>
   28d44:	mvn	r0, #0
   28d48:	mvn	r1, #0
   28d4c:	mov	r2, r5
   28d50:	mov	r4, r3
   28d54:	str	r3, [sp, #24]
   28d58:	bl	29c48 <_obstack_memory_used@@Base+0x4bd4>
   28d5c:	umull	r3, r2, r6, r5
   28d60:	mla	r2, r6, r4, r2
   28d64:	subs	r6, r0, r6
   28d68:	sbcs	r6, r1, r7
   28d6c:	mla	ip, r7, r5, r2
   28d70:	ldr	r2, [sp, #24]
   28d74:	mov	r6, #0
   28d78:	movwcc	r6, #1
   28d7c:	cmp	r6, #0
   28d80:	str	r6, [sp, #20]
   28d84:	mov	r6, #0
   28d88:	mvnne	r3, #0
   28d8c:	mvnne	ip, #0
   28d90:	subs	r4, r0, r3
   28d94:	umull	r7, lr, r3, r5
   28d98:	sbcs	r4, r1, ip
   28d9c:	mla	r3, r3, r2, lr
   28da0:	movwcc	r6, #1
   28da4:	cmp	r6, #0
   28da8:	str	r6, [sp, #16]
   28dac:	mvnne	r7, #0
   28db0:	cmp	r6, #0
   28db4:	umull	sl, r4, r7, r5
   28db8:	mla	r4, r7, r2, r4
   28dbc:	mla	r2, ip, r5, r3
   28dc0:	mov	ip, #0
   28dc4:	mvnne	r2, #0
   28dc8:	subs	r3, r0, r7
   28dcc:	mla	r6, r2, r5, r4
   28dd0:	mov	r4, r0
   28dd4:	sbcs	r2, r1, r2
   28dd8:	mov	r0, #0
   28ddc:	movwcc	r0, #1
   28de0:	mov	r3, r4
   28de4:	cmp	r0, #0
   28de8:	str	r0, [sp, #12]
   28dec:	mov	r0, r1
   28df0:	str	r3, [sp, #4]
   28df4:	mvnne	sl, #0
   28df8:	mvnne	r6, #0
   28dfc:	str	r0, [sp, #8]
   28e00:	subs	r2, r4, sl
   28e04:	ldr	r4, [sp, #24]
   28e08:	sbcs	r2, r1, r6
   28e0c:	movwcc	ip, #1
   28e10:	umull	r7, r2, sl, r5
   28e14:	cmp	ip, #0
   28e18:	mla	r2, sl, r4, r2
   28e1c:	mvnne	r7, #0
   28e20:	cmp	ip, #0
   28e24:	mov	sl, #0
   28e28:	umull	r1, lr, r7, r5
   28e2c:	mla	r2, r6, r5, r2
   28e30:	mvnne	r2, #0
   28e34:	mla	lr, r7, r4, lr
   28e38:	subs	r6, r3, r7
   28e3c:	mla	lr, r2, r5, lr
   28e40:	sbcs	r2, r0, r2
   28e44:	movwcc	sl, #1
   28e48:	mov	r2, #0
   28e4c:	cmp	sl, #0
   28e50:	mvnne	r1, #0
   28e54:	mvnne	lr, #0
   28e58:	subs	r6, r3, r1
   28e5c:	ldr	r3, [sp, #24]
   28e60:	sbcs	r6, r0, lr
   28e64:	umull	r0, r7, r1, r5
   28e68:	movwcc	r2, #1
   28e6c:	cmp	r2, #0
   28e70:	mvnne	r0, #0
   28e74:	mla	r1, r1, r3, r7
   28e78:	cmp	r2, #0
   28e7c:	umull	r6, r4, r0, r5
   28e80:	mla	r1, lr, r5, r1
   28e84:	mla	r4, r0, r3, r4
   28e88:	ldr	r3, [sp, #4]
   28e8c:	mvnne	r1, #0
   28e90:	mla	r7, r1, r5, r4
   28e94:	ldr	r5, [sp, #16]
   28e98:	subs	r0, r3, r0
   28e9c:	ldr	r0, [sp, #8]
   28ea0:	sbcs	r0, r0, r1
   28ea4:	mov	r0, #0
   28ea8:	movwcc	r0, #1
   28eac:	cmp	r0, #0
   28eb0:	mov	r1, r0
   28eb4:	ldr	r0, [sp, #20]
   28eb8:	mvnne	r7, #0
   28ebc:	mvnne	r6, #0
   28ec0:	orr	r0, r0, r5
   28ec4:	ldr	r5, [sp, #12]
   28ec8:	orr	r0, r0, r5
   28ecc:	orr	r0, r0, ip
   28ed0:	orr	r0, r0, sl
   28ed4:	orr	r0, r0, r2
   28ed8:	orr	r0, r0, r1
   28edc:	b	29358 <_obstack_memory_used@@Base+0x42e4>
   28ee0:	mov	r1, #0
   28ee4:	lsl	r2, r7, #10
   28ee8:	lsl	r0, r6, #10
   28eec:	lsr	r3, r7, #22
   28ef0:	cmp	r1, r7, lsr #22
   28ef4:	orr	r2, r2, r6, lsr #22
   28ef8:	mvnne	r0, #0
   28efc:	movwne	r3, #1
   28f00:	cmp	r1, r7, lsr #22
   28f04:	b	29384 <_obstack_memory_used@@Base+0x4310>
   28f08:	mvn	r0, #0
   28f0c:	mvn	r1, #0
   28f10:	mov	r2, r5
   28f14:	mov	sl, r3
   28f18:	bl	29c48 <_obstack_memory_used@@Base+0x4bd4>
   28f1c:	subs	r2, r0, r6
   28f20:	mov	ip, r0
   28f24:	mov	r0, #0
   28f28:	sbcs	r2, r1, r7
   28f2c:	movwcc	r0, #1
   28f30:	umull	r4, r2, r6, r5
   28f34:	cmp	r0, #0
   28f38:	mla	r2, r6, sl, r2
   28f3c:	str	r0, [sp, #20]
   28f40:	mvnne	r4, #0
   28f44:	cmp	r0, #0
   28f48:	mla	r2, r7, r5, r2
   28f4c:	mov	r0, #0
   28f50:	umull	lr, r3, r4, r5
   28f54:	mvnne	r2, #0
   28f58:	mla	r3, r4, sl, r3
   28f5c:	mla	r6, r2, r5, r3
   28f60:	subs	r3, ip, r4
   28f64:	sbcs	r2, r1, r2
   28f68:	mov	r3, r1
   28f6c:	movwcc	r0, #1
   28f70:	str	r3, [sp, #8]
   28f74:	cmp	r0, #0
   28f78:	str	r0, [sp, #16]
   28f7c:	mov	r0, ip
   28f80:	mvnne	lr, #0
   28f84:	mvnne	r6, #0
   28f88:	str	r0, [sp, #12]
   28f8c:	subs	r2, ip, lr
   28f90:	umull	r7, r4, lr, r5
   28f94:	sbcs	r2, r1, r6
   28f98:	mla	r4, lr, sl, r4
   28f9c:	mov	r2, #0
   28fa0:	mla	r6, r6, r5, r4
   28fa4:	mov	r4, #0
   28fa8:	movwcc	r2, #1
   28fac:	cmp	r2, #0
   28fb0:	mvnne	r7, #0
   28fb4:	cmp	r2, #0
   28fb8:	umull	r1, ip, r7, r5
   28fbc:	mvnne	r6, #0
   28fc0:	mla	ip, r7, sl, ip
   28fc4:	subs	r7, r0, r7
   28fc8:	mla	lr, r6, r5, ip
   28fcc:	sbcs	r7, r3, r6
   28fd0:	mov	ip, #0
   28fd4:	movwcc	ip, #1
   28fd8:	cmp	ip, #0
   28fdc:	mvnne	r1, #0
   28fe0:	mvnne	lr, #0
   28fe4:	subs	r7, r0, r1
   28fe8:	sbcs	r7, r3, lr
   28fec:	movwcc	r4, #1
   28ff0:	umull	r0, r7, r1, r5
   28ff4:	cmp	r4, #0
   28ff8:	mla	r1, r1, sl, r7
   28ffc:	mvnne	r0, #0
   29000:	mla	r1, lr, r5, r1
   29004:	cmp	r4, #0
   29008:	umull	r6, r3, r0, r5
   2900c:	mvnne	r1, #0
   29010:	mla	r3, r0, sl, r3
   29014:	mla	r7, r1, r5, r3
   29018:	ldr	r3, [sp, #12]
   2901c:	subs	r0, r3, r0
   29020:	ldr	r3, [sp, #16]
   29024:	ldr	r0, [sp, #8]
   29028:	sbcs	r0, r0, r1
   2902c:	mov	r0, #0
   29030:	movwcc	r0, #1
   29034:	cmp	r0, #0
   29038:	mov	r1, r0
   2903c:	ldr	r0, [sp, #20]
   29040:	mvnne	r7, #0
   29044:	mvnne	r6, #0
   29048:	orr	r0, r0, r3
   2904c:	orr	r0, r0, r2
   29050:	orr	r0, r0, ip
   29054:	orr	r0, r0, r4
   29058:	orr	r3, r0, r1
   2905c:	b	293b8 <_obstack_memory_used@@Base+0x4344>
   29060:	mvn	r0, #0
   29064:	mvn	r1, #0
   29068:	mov	r2, r5
   2906c:	mov	sl, r3
   29070:	bl	29c48 <_obstack_memory_used@@Base+0x4bd4>
   29074:	umull	r3, r2, r6, r5
   29078:	mov	lr, r1
   2907c:	mov	r1, r0
   29080:	mla	r2, r6, sl, r2
   29084:	subs	r6, r0, r6
   29088:	mov	r0, #0
   2908c:	sbcs	r6, lr, r7
   29090:	mla	r2, r7, r5, r2
   29094:	movwcc	r0, #1
   29098:	cmp	r0, #0
   2909c:	str	r0, [sp, #20]
   290a0:	mov	r0, r1
   290a4:	mvnne	r3, #0
   290a8:	mvnne	r2, #0
   290ac:	str	r0, [sp, #16]
   290b0:	subs	r4, r1, r3
   290b4:	umull	r7, ip, r3, r5
   290b8:	sbcs	r4, lr, r2
   290bc:	mla	r3, r3, sl, ip
   290c0:	mov	ip, #0
   290c4:	mov	r4, #0
   290c8:	mla	r2, r2, r5, r3
   290cc:	movwcc	r4, #1
   290d0:	cmp	r4, #0
   290d4:	mvnne	r7, #0
   290d8:	cmp	r4, #0
   290dc:	umull	r1, r6, r7, r5
   290e0:	mvnne	r2, #0
   290e4:	mla	r6, r7, sl, r6
   290e8:	mla	r3, r2, r5, r6
   290ec:	subs	r6, r0, r7
   290f0:	sbcs	r2, lr, r2
   290f4:	movwcc	ip, #1
   290f8:	mov	r2, #0
   290fc:	cmp	ip, #0
   29100:	mvnne	r1, #0
   29104:	mvnne	r3, #0
   29108:	subs	r6, r0, r1
   2910c:	sbcs	r6, lr, r3
   29110:	movwcc	r2, #1
   29114:	umull	r0, r6, r1, r5
   29118:	cmp	r2, #0
   2911c:	str	r6, [sp, #12]
   29120:	mvnne	r0, #0
   29124:	cmp	r2, #0
   29128:	umull	r6, r7, r0, r5
   2912c:	mla	r7, r0, sl, r7
   29130:	str	r7, [sp, #8]
   29134:	ldr	r7, [sp, #12]
   29138:	mla	r1, r1, sl, r7
   2913c:	mla	r1, r3, r5, r1
   29140:	ldr	r3, [sp, #8]
   29144:	mvnne	r1, #0
   29148:	mla	r7, r1, r5, r3
   2914c:	ldr	r3, [sp, #16]
   29150:	subs	r0, r3, r0
   29154:	sbcs	r0, lr, r1
   29158:	mov	r0, #0
   2915c:	movwcc	r0, #1
   29160:	cmp	r0, #0
   29164:	mov	r1, r0
   29168:	ldr	r0, [sp, #20]
   2916c:	mvnne	r7, #0
   29170:	mvnne	r6, #0
   29174:	orr	r0, r0, r4
   29178:	orr	r0, r0, ip
   2917c:	orr	r0, r0, r2
   29180:	orr	r3, r0, r1
   29184:	b	293b8 <_obstack_memory_used@@Base+0x4344>
   29188:	mvn	r0, #0
   2918c:	mvn	r1, #0
   29190:	mov	r2, r5
   29194:	mov	sl, r3
   29198:	bl	29c48 <_obstack_memory_used@@Base+0x4bd4>
   2919c:	mov	lr, r0
   291a0:	subs	r0, r0, r6
   291a4:	mov	r2, #0
   291a8:	mov	ip, r1
   291ac:	str	sl, [sp, #24]
   291b0:	sbcs	r0, r1, r7
   291b4:	umull	r3, r1, r6, r5
   291b8:	str	lr, [sp, #4]
   291bc:	movwcc	r2, #1
   291c0:	mla	r6, r6, sl, r1
   291c4:	mov	r1, #0
   291c8:	cmp	r2, #0
   291cc:	mla	r7, r7, r5, r6
   291d0:	str	r2, [sp, #20]
   291d4:	mvnne	r3, #0
   291d8:	cmp	r2, #0
   291dc:	mov	r2, #0
   291e0:	umull	r0, r4, r3, r5
   291e4:	mvnne	r7, #0
   291e8:	mla	r4, r3, sl, r4
   291ec:	subs	r3, lr, r3
   291f0:	sbcs	r3, ip, r7
   291f4:	mla	r4, r7, r5, r4
   291f8:	movwcc	r1, #1
   291fc:	cmp	r1, #0
   29200:	str	r1, [sp, #16]
   29204:	mvnne	r0, #0
   29208:	mvnne	r4, #0
   2920c:	subs	r3, lr, r0
   29210:	sbcs	r3, ip, r4
   29214:	movwcc	r2, #1
   29218:	umull	r6, r3, r0, r5
   2921c:	cmp	r2, #0
   29220:	mla	r0, r0, sl, r3
   29224:	str	r2, [sp, #12]
   29228:	mvnne	r6, #0
   2922c:	mla	r0, r4, r5, r0
   29230:	cmp	r2, #0
   29234:	ldr	r4, [sp, #24]
   29238:	umull	r1, r7, r6, r5
   2923c:	mvnne	r0, #0
   29240:	subs	r3, lr, r6
   29244:	mla	r7, r6, sl, r7
   29248:	mov	r3, ip
   2924c:	mla	r7, r0, r5, r7
   29250:	sbcs	r0, ip, r0
   29254:	str	r3, [sp]
   29258:	mov	r0, #0
   2925c:	movwcc	r0, #1
   29260:	cmp	r0, #0
   29264:	str	r0, [sp, #8]
   29268:	mvnne	r1, #0
   2926c:	mvnne	r7, #0
   29270:	subs	r0, lr, r1
   29274:	sbcs	r0, ip, r7
   29278:	mov	ip, #0
   2927c:	movwcc	ip, #1
   29280:	umull	r6, r0, r1, r5
   29284:	cmp	ip, #0
   29288:	mla	r1, r1, r4, r0
   2928c:	mov	r0, lr
   29290:	mvnne	r6, #0
   29294:	mla	r1, r7, r5, r1
   29298:	cmp	ip, #0
   2929c:	umull	r2, sl, r6, r5
   292a0:	mvnne	r1, #0
   292a4:	mla	sl, r6, r4, sl
   292a8:	subs	r6, lr, r6
   292ac:	mov	lr, #0
   292b0:	mla	r7, r1, r5, sl
   292b4:	sbcs	r1, r3, r1
   292b8:	movwcc	lr, #1
   292bc:	ldr	r1, [sp, #24]
   292c0:	cmp	lr, #0
   292c4:	mvnne	r2, #0
   292c8:	mvnne	r7, #0
   292cc:	subs	r6, r0, r2
   292d0:	umull	r0, sl, r2, r5
   292d4:	sbcs	r6, r3, r7
   292d8:	mov	r3, #0
   292dc:	mla	r2, r2, r1, sl
   292e0:	movwcc	r3, #1
   292e4:	mla	r2, r7, r5, r2
   292e8:	cmp	r3, #0
   292ec:	mvnne	r0, #0
   292f0:	cmp	r3, #0
   292f4:	umull	r6, r4, r0, r5
   292f8:	mvnne	r2, #0
   292fc:	mla	r4, r0, r1, r4
   29300:	ldr	r1, [sp, #4]
   29304:	mla	r7, r2, r5, r4
   29308:	ldr	r5, [sp, #16]
   2930c:	subs	r0, r1, r0
   29310:	ldr	r0, [sp]
   29314:	sbcs	r0, r0, r2
   29318:	mov	r0, #0
   2931c:	movwcc	r0, #1
   29320:	cmp	r0, #0
   29324:	mov	r2, r0
   29328:	ldr	r0, [sp, #20]
   2932c:	mvnne	r7, #0
   29330:	mvnne	r6, #0
   29334:	orr	r0, r0, r5
   29338:	ldr	r5, [sp, #12]
   2933c:	orr	r0, r0, r5
   29340:	ldr	r5, [sp, #8]
   29344:	orr	r0, r0, r5
   29348:	orr	r0, r0, ip
   2934c:	orr	r0, r0, lr
   29350:	orr	r0, r0, r3
   29354:	orr	r0, r0, r2
   29358:	and	r3, r0, #1
   2935c:	b	293b8 <_obstack_memory_used@@Base+0x4344>
   29360:	mov	r1, #0
   29364:	lsl	r2, r7, #9
   29368:	lsl	r0, r6, #9
   2936c:	lsr	r3, r7, #23
   29370:	cmp	r1, r7, lsr #23
   29374:	orr	r2, r2, r6, lsr #23
   29378:	mvnne	r0, #0
   2937c:	movwne	r3, #1
   29380:	cmp	r1, r7, lsr #23
   29384:	mvnne	r2, #0
   29388:	mov	r6, r0
   2938c:	mov	r7, r2
   29390:	b	293b8 <_obstack_memory_used@@Base+0x4344>
   29394:	lsl	r1, r7, #1
   29398:	lsl	r0, r6, #1
   2939c:	cmp	r7, #0
   293a0:	lsr	r3, r7, #31
   293a4:	orr	r1, r1, r6, lsr #31
   293a8:	mvnlt	r0, #0
   293ac:	mvnlt	r1, #0
   293b0:	mov	r6, r0
   293b4:	mov	r7, r1
   293b8:	ldr	r1, [sp, #32]
   293bc:	ldr	r2, [sp, #28]
   293c0:	orr	r8, r3, r8
   293c4:	add	r0, r1, r2
   293c8:	str	r0, [r9]
   293cc:	ldrb	r0, [r1, r2]
   293d0:	cmp	r0, #0
   293d4:	orrne	r8, r8, #2
   293d8:	ldr	r0, [sp, #36]	; 0x24
   293dc:	strd	r6, [r0]
   293e0:	mov	r0, r8
   293e4:	sub	sp, fp, #28
   293e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   293ec:	movw	r0, #58144	; 0xe320
   293f0:	movw	r1, #58182	; 0xe346
   293f4:	movw	r3, #58198	; 0xe356
   293f8:	mov	r2, #85	; 0x55
   293fc:	movt	r0, #2
   29400:	movt	r1, #2
   29404:	movt	r3, #2
   29408:	bl	1208c <__assert_fail@plt>
   2940c:	clz	r2, r1
   29410:	clz	r3, r0
   29414:	lsr	r2, r2, #5
   29418:	lsr	r3, r3, #5
   2941c:	orrs	r2, r3, r2
   29420:	movwne	r1, #1
   29424:	movwne	r0, #1
   29428:	cmp	r1, #0
   2942c:	beq	2945c <_obstack_memory_used@@Base+0x43e8>
   29430:	mvn	r2, #-2147483648	; 0x80000000
   29434:	udiv	r2, r2, r1
   29438:	cmp	r2, r0
   2943c:	bcs	2945c <_obstack_memory_used@@Base+0x43e8>
   29440:	push	{fp, lr}
   29444:	mov	fp, sp
   29448:	bl	11ed0 <__errno_location@plt>
   2944c:	mov	r1, #12
   29450:	str	r1, [r0]
   29454:	mov	r0, #0
   29458:	pop	{fp, pc}
   2945c:	b	11b88 <calloc@plt>
   29460:	cmp	r0, #0
   29464:	movweq	r0, #1
   29468:	cmn	r0, #1
   2946c:	ble	29474 <_obstack_memory_used@@Base+0x4400>
   29470:	b	11e04 <malloc@plt>
   29474:	push	{fp, lr}
   29478:	mov	fp, sp
   2947c:	bl	11ed0 <__errno_location@plt>
   29480:	mov	r1, #12
   29484:	str	r1, [r0]
   29488:	mov	r0, #0
   2948c:	pop	{fp, pc}
   29490:	push	{fp, lr}
   29494:	mov	fp, sp
   29498:	cmp	r0, #0
   2949c:	beq	294b8 <_obstack_memory_used@@Base+0x4444>
   294a0:	cmp	r1, #0
   294a4:	beq	294c4 <_obstack_memory_used@@Base+0x4450>
   294a8:	cmn	r1, #1
   294ac:	ble	294d0 <_obstack_memory_used@@Base+0x445c>
   294b0:	pop	{fp, lr}
   294b4:	b	11cc0 <realloc@plt>
   294b8:	mov	r0, r1
   294bc:	pop	{fp, lr}
   294c0:	b	29460 <_obstack_memory_used@@Base+0x43ec>
   294c4:	bl	2046c <__assert_fail@plt+0xe3e0>
   294c8:	mov	r0, #0
   294cc:	pop	{fp, pc}
   294d0:	bl	11ed0 <__errno_location@plt>
   294d4:	mov	r1, #12
   294d8:	str	r1, [r0]
   294dc:	mov	r0, #0
   294e0:	pop	{fp, pc}
   294e4:	push	{r4, r5, r6, sl, fp, lr}
   294e8:	add	fp, sp, #16
   294ec:	mov	r4, r0
   294f0:	bl	11d8c <__fpending@plt>
   294f4:	ldr	r6, [r4]
   294f8:	mov	r5, r0
   294fc:	mov	r0, r4
   29500:	bl	29568 <_obstack_memory_used@@Base+0x44f4>
   29504:	tst	r6, #32
   29508:	bne	29540 <_obstack_memory_used@@Base+0x44cc>
   2950c:	cmp	r0, #0
   29510:	mov	r4, r0
   29514:	mvnne	r4, #0
   29518:	cmp	r5, #0
   2951c:	bne	2954c <_obstack_memory_used@@Base+0x44d8>
   29520:	cmp	r0, #0
   29524:	beq	2954c <_obstack_memory_used@@Base+0x44d8>
   29528:	bl	11ed0 <__errno_location@plt>
   2952c:	ldr	r0, [r0]
   29530:	subs	r4, r0, #9
   29534:	mvnne	r4, #0
   29538:	mov	r0, r4
   2953c:	pop	{r4, r5, r6, sl, fp, pc}
   29540:	mvn	r4, #0
   29544:	cmp	r0, #0
   29548:	beq	29554 <_obstack_memory_used@@Base+0x44e0>
   2954c:	mov	r0, r4
   29550:	pop	{r4, r5, r6, sl, fp, pc}
   29554:	bl	11ed0 <__errno_location@plt>
   29558:	mov	r1, #0
   2955c:	str	r1, [r0]
   29560:	mov	r0, r4
   29564:	pop	{r4, r5, r6, sl, fp, pc}
   29568:	push	{r4, r5, r6, sl, fp, lr}
   2956c:	add	fp, sp, #16
   29570:	sub	sp, sp, #8
   29574:	mov	r4, r0
   29578:	bl	11f18 <fileno@plt>
   2957c:	cmn	r0, #1
   29580:	ble	295f4 <_obstack_memory_used@@Base+0x4580>
   29584:	mov	r0, r4
   29588:	bl	11e34 <__freading@plt>
   2958c:	cmp	r0, #0
   29590:	beq	295bc <_obstack_memory_used@@Base+0x4548>
   29594:	mov	r0, r4
   29598:	bl	11f18 <fileno@plt>
   2959c:	mov	r1, #1
   295a0:	mov	r2, #0
   295a4:	mov	r3, #0
   295a8:	str	r1, [sp]
   295ac:	bl	11d68 <lseek64@plt>
   295b0:	and	r0, r0, r1
   295b4:	cmn	r0, #1
   295b8:	beq	295f4 <_obstack_memory_used@@Base+0x4580>
   295bc:	mov	r0, r4
   295c0:	bl	29604 <_obstack_memory_used@@Base+0x4590>
   295c4:	cmp	r0, #0
   295c8:	beq	295f4 <_obstack_memory_used@@Base+0x4580>
   295cc:	bl	11ed0 <__errno_location@plt>
   295d0:	ldr	r6, [r0]
   295d4:	mov	r5, r0
   295d8:	mov	r0, r4
   295dc:	bl	11f30 <fclose@plt>
   295e0:	cmp	r6, #0
   295e4:	strne	r6, [r5]
   295e8:	mvnne	r0, #0
   295ec:	sub	sp, fp, #16
   295f0:	pop	{r4, r5, r6, sl, fp, pc}
   295f4:	mov	r0, r4
   295f8:	sub	sp, fp, #16
   295fc:	pop	{r4, r5, r6, sl, fp, lr}
   29600:	b	11f30 <fclose@plt>
   29604:	push	{r4, sl, fp, lr}
   29608:	add	fp, sp, #8
   2960c:	sub	sp, sp, #8
   29610:	mov	r4, r0
   29614:	cmp	r0, #0
   29618:	beq	29634 <_obstack_memory_used@@Base+0x45c0>
   2961c:	mov	r0, r4
   29620:	bl	11e34 <__freading@plt>
   29624:	cmp	r0, #0
   29628:	ldrbne	r0, [r4, #1]
   2962c:	tstne	r0, #1
   29630:	bne	29644 <_obstack_memory_used@@Base+0x45d0>
   29634:	mov	r0, r4
   29638:	sub	sp, fp, #8
   2963c:	pop	{r4, sl, fp, lr}
   29640:	b	11bf4 <fflush@plt>
   29644:	mov	r0, #1
   29648:	mov	r2, #0
   2964c:	mov	r3, #0
   29650:	str	r0, [sp]
   29654:	mov	r0, r4
   29658:	bl	29660 <_obstack_memory_used@@Base+0x45ec>
   2965c:	b	29634 <_obstack_memory_used@@Base+0x45c0>
   29660:	push	{r4, r5, r6, r7, fp, lr}
   29664:	add	fp, sp, #16
   29668:	sub	sp, sp, #8
   2966c:	mov	r4, r0
   29670:	ldr	r0, [r0, #4]
   29674:	mov	r5, r3
   29678:	mov	r6, r2
   2967c:	ldr	r1, [r4, #8]
   29680:	cmp	r1, r0
   29684:	bne	296a0 <_obstack_memory_used@@Base+0x462c>
   29688:	ldrd	r0, [r4, #16]
   2968c:	cmp	r1, r0
   29690:	bne	296a0 <_obstack_memory_used@@Base+0x462c>
   29694:	ldr	r0, [r4, #36]	; 0x24
   29698:	cmp	r0, #0
   2969c:	beq	296b8 <_obstack_memory_used@@Base+0x4644>
   296a0:	mov	r0, r4
   296a4:	mov	r2, r6
   296a8:	mov	r3, r5
   296ac:	sub	sp, fp, #16
   296b0:	pop	{r4, r5, r6, r7, fp, lr}
   296b4:	b	11f3c <fseeko64@plt>
   296b8:	ldr	r7, [fp, #8]
   296bc:	mov	r0, r4
   296c0:	bl	11f18 <fileno@plt>
   296c4:	mov	r2, r6
   296c8:	mov	r3, r5
   296cc:	str	r7, [sp]
   296d0:	bl	11d68 <lseek64@plt>
   296d4:	and	r2, r0, r1
   296d8:	cmn	r2, #1
   296dc:	mvneq	r0, #0
   296e0:	subeq	sp, fp, #16
   296e4:	popeq	{r4, r5, r6, r7, fp, pc}
   296e8:	strd	r0, [r4, #80]	; 0x50
   296ec:	ldr	r0, [r4]
   296f0:	bic	r0, r0, #16
   296f4:	str	r0, [r4]
   296f8:	mov	r0, #0
   296fc:	sub	sp, fp, #16
   29700:	pop	{r4, r5, r6, r7, fp, pc}
   29704:	ldrb	r2, [r0]
   29708:	cmp	r2, #0
   2970c:	beq	29730 <_obstack_memory_used@@Base+0x46bc>
   29710:	add	r3, r0, #1
   29714:	mov	r0, #0
   29718:	ror	r0, r0, #23
   2971c:	uxtab	r0, r0, r2
   29720:	ldrb	r2, [r3], #1
   29724:	cmp	r2, #0
   29728:	bne	29718 <_obstack_memory_used@@Base+0x46a4>
   2972c:	b	29734 <_obstack_memory_used@@Base+0x46c0>
   29730:	mov	r0, #0
   29734:	udiv	r2, r0, r1
   29738:	mls	r0, r2, r1, r0
   2973c:	bx	lr
   29740:	push	{fp, lr}
   29744:	mov	fp, sp
   29748:	mov	r0, #14
   2974c:	bl	11f9c <nl_langinfo@plt>
   29750:	movw	r1, #49853	; 0xc2bd
   29754:	cmp	r0, #0
   29758:	movt	r1, #2
   2975c:	movne	r1, r0
   29760:	movw	r0, #58277	; 0xe3a5
   29764:	ldrb	r2, [r1]
   29768:	movt	r0, #2
   2976c:	cmp	r2, #0
   29770:	movne	r0, r1
   29774:	pop	{fp, pc}
   29778:	cmp	r2, #0
   2977c:	beq	297ac <_obstack_memory_used@@Base+0x4738>
   29780:	mvn	r3, #0
   29784:	udiv	r3, r3, r2
   29788:	cmp	r3, r1
   2978c:	bcs	297ac <_obstack_memory_used@@Base+0x4738>
   29790:	push	{fp, lr}
   29794:	mov	fp, sp
   29798:	bl	11ed0 <__errno_location@plt>
   2979c:	mov	r1, #12
   297a0:	str	r1, [r0]
   297a4:	mov	r0, #0
   297a8:	pop	{fp, pc}
   297ac:	mul	r1, r2, r1
   297b0:	b	29490 <_obstack_memory_used@@Base+0x441c>
   297b4:	eor	r1, r1, #-2147483648	; 0x80000000
   297b8:	b	297c0 <_obstack_memory_used@@Base+0x474c>
   297bc:	eor	r3, r3, #-2147483648	; 0x80000000
   297c0:	push	{r4, r5, lr}
   297c4:	lsl	r4, r1, #1
   297c8:	lsl	r5, r3, #1
   297cc:	teq	r4, r5
   297d0:	teqeq	r0, r2
   297d4:	orrsne	ip, r4, r0
   297d8:	orrsne	ip, r5, r2
   297dc:	mvnsne	ip, r4, asr #21
   297e0:	mvnsne	ip, r5, asr #21
   297e4:	beq	299d0 <_obstack_memory_used@@Base+0x495c>
   297e8:	lsr	r4, r4, #21
   297ec:	rsbs	r5, r4, r5, lsr #21
   297f0:	rsblt	r5, r5, #0
   297f4:	ble	29814 <_obstack_memory_used@@Base+0x47a0>
   297f8:	add	r4, r4, r5
   297fc:	eor	r2, r0, r2
   29800:	eor	r3, r1, r3
   29804:	eor	r0, r2, r0
   29808:	eor	r1, r3, r1
   2980c:	eor	r2, r0, r2
   29810:	eor	r3, r1, r3
   29814:	cmp	r5, #54	; 0x36
   29818:	pophi	{r4, r5, pc}
   2981c:	tst	r1, #-2147483648	; 0x80000000
   29820:	lsl	r1, r1, #12
   29824:	mov	ip, #1048576	; 0x100000
   29828:	orr	r1, ip, r1, lsr #12
   2982c:	beq	29838 <_obstack_memory_used@@Base+0x47c4>
   29830:	rsbs	r0, r0, #0
   29834:	rsc	r1, r1, #0
   29838:	tst	r3, #-2147483648	; 0x80000000
   2983c:	lsl	r3, r3, #12
   29840:	orr	r3, ip, r3, lsr #12
   29844:	beq	29850 <_obstack_memory_used@@Base+0x47dc>
   29848:	rsbs	r2, r2, #0
   2984c:	rsc	r3, r3, #0
   29850:	teq	r4, r5
   29854:	beq	299b8 <_obstack_memory_used@@Base+0x4944>
   29858:	sub	r4, r4, #1
   2985c:	rsbs	lr, r5, #32
   29860:	blt	2987c <_obstack_memory_used@@Base+0x4808>
   29864:	lsl	ip, r2, lr
   29868:	adds	r0, r0, r2, lsr r5
   2986c:	adc	r1, r1, #0
   29870:	adds	r0, r0, r3, lsl lr
   29874:	adcs	r1, r1, r3, asr r5
   29878:	b	29898 <_obstack_memory_used@@Base+0x4824>
   2987c:	sub	r5, r5, #32
   29880:	add	lr, lr, #32
   29884:	cmp	r2, #1
   29888:	lsl	ip, r3, lr
   2988c:	orrcs	ip, ip, #2
   29890:	adds	r0, r0, r3, asr r5
   29894:	adcs	r1, r1, r3, asr #31
   29898:	and	r5, r1, #-2147483648	; 0x80000000
   2989c:	bpl	298ac <_obstack_memory_used@@Base+0x4838>
   298a0:	rsbs	ip, ip, #0
   298a4:	rscs	r0, r0, #0
   298a8:	rsc	r1, r1, #0
   298ac:	cmp	r1, #1048576	; 0x100000
   298b0:	bcc	298f0 <_obstack_memory_used@@Base+0x487c>
   298b4:	cmp	r1, #2097152	; 0x200000
   298b8:	bcc	298d8 <_obstack_memory_used@@Base+0x4864>
   298bc:	lsrs	r1, r1, #1
   298c0:	rrxs	r0, r0
   298c4:	rrx	ip, ip
   298c8:	add	r4, r4, #1
   298cc:	lsl	r2, r4, #21
   298d0:	cmn	r2, #4194304	; 0x400000
   298d4:	bcs	29a30 <_obstack_memory_used@@Base+0x49bc>
   298d8:	cmp	ip, #-2147483648	; 0x80000000
   298dc:	lsrseq	ip, r0, #1
   298e0:	adcs	r0, r0, #0
   298e4:	adc	r1, r1, r4, lsl #20
   298e8:	orr	r1, r1, r5
   298ec:	pop	{r4, r5, pc}
   298f0:	lsls	ip, ip, #1
   298f4:	adcs	r0, r0, r0
   298f8:	adc	r1, r1, r1
   298fc:	tst	r1, #1048576	; 0x100000
   29900:	sub	r4, r4, #1
   29904:	bne	298d8 <_obstack_memory_used@@Base+0x4864>
   29908:	teq	r1, #0
   2990c:	moveq	r1, r0
   29910:	moveq	r0, #0
   29914:	clz	r3, r1
   29918:	addeq	r3, r3, #32
   2991c:	sub	r3, r3, #11
   29920:	subs	r2, r3, #32
   29924:	bge	29948 <_obstack_memory_used@@Base+0x48d4>
   29928:	adds	r2, r2, #12
   2992c:	ble	29944 <_obstack_memory_used@@Base+0x48d0>
   29930:	add	ip, r2, #20
   29934:	rsb	r2, r2, #12
   29938:	lsl	r0, r1, ip
   2993c:	lsr	r1, r1, r2
   29940:	b	29958 <_obstack_memory_used@@Base+0x48e4>
   29944:	add	r2, r2, #20
   29948:	rsble	ip, r2, #32
   2994c:	lsl	r1, r1, r2
   29950:	orrle	r1, r1, r0, lsr ip
   29954:	lslle	r0, r0, r2
   29958:	subs	r4, r4, r3
   2995c:	addge	r1, r1, r4, lsl #20
   29960:	orrge	r1, r1, r5
   29964:	popge	{r4, r5, pc}
   29968:	mvn	r4, r4
   2996c:	subs	r4, r4, #31
   29970:	bge	299ac <_obstack_memory_used@@Base+0x4938>
   29974:	adds	r4, r4, #12
   29978:	bgt	29994 <_obstack_memory_used@@Base+0x4920>
   2997c:	add	r4, r4, #20
   29980:	rsb	r2, r4, #32
   29984:	lsr	r0, r0, r4
   29988:	orr	r0, r0, r1, lsl r2
   2998c:	orr	r1, r5, r1, lsr r4
   29990:	pop	{r4, r5, pc}
   29994:	rsb	r4, r4, #12
   29998:	rsb	r2, r4, #32
   2999c:	lsr	r0, r0, r2
   299a0:	orr	r0, r0, r1, lsl r4
   299a4:	mov	r1, r5
   299a8:	pop	{r4, r5, pc}
   299ac:	lsr	r0, r1, r4
   299b0:	mov	r1, r5
   299b4:	pop	{r4, r5, pc}
   299b8:	teq	r4, #0
   299bc:	eor	r3, r3, #1048576	; 0x100000
   299c0:	eoreq	r1, r1, #1048576	; 0x100000
   299c4:	addeq	r4, r4, #1
   299c8:	subne	r5, r5, #1
   299cc:	b	29858 <_obstack_memory_used@@Base+0x47e4>
   299d0:	mvns	ip, r4, asr #21
   299d4:	mvnsne	ip, r5, asr #21
   299d8:	beq	29a40 <_obstack_memory_used@@Base+0x49cc>
   299dc:	teq	r4, r5
   299e0:	teqeq	r0, r2
   299e4:	beq	299f8 <_obstack_memory_used@@Base+0x4984>
   299e8:	orrs	ip, r4, r0
   299ec:	moveq	r1, r3
   299f0:	moveq	r0, r2
   299f4:	pop	{r4, r5, pc}
   299f8:	teq	r1, r3
   299fc:	movne	r1, #0
   29a00:	movne	r0, #0
   29a04:	popne	{r4, r5, pc}
   29a08:	lsrs	ip, r4, #21
   29a0c:	bne	29a20 <_obstack_memory_used@@Base+0x49ac>
   29a10:	lsls	r0, r0, #1
   29a14:	adcs	r1, r1, r1
   29a18:	orrcs	r1, r1, #-2147483648	; 0x80000000
   29a1c:	pop	{r4, r5, pc}
   29a20:	adds	r4, r4, #4194304	; 0x400000
   29a24:	addcc	r1, r1, #1048576	; 0x100000
   29a28:	popcc	{r4, r5, pc}
   29a2c:	and	r5, r1, #-2147483648	; 0x80000000
   29a30:	orr	r1, r5, #2130706432	; 0x7f000000
   29a34:	orr	r1, r1, #15728640	; 0xf00000
   29a38:	mov	r0, #0
   29a3c:	pop	{r4, r5, pc}
   29a40:	mvns	ip, r4, asr #21
   29a44:	movne	r1, r3
   29a48:	movne	r0, r2
   29a4c:	mvnseq	ip, r5, asr #21
   29a50:	movne	r3, r1
   29a54:	movne	r2, r0
   29a58:	orrs	r4, r0, r1, lsl #12
   29a5c:	orrseq	r5, r2, r3, lsl #12
   29a60:	teqeq	r1, r3
   29a64:	orrne	r1, r1, #524288	; 0x80000
   29a68:	pop	{r4, r5, pc}
   29a6c:	teq	r0, #0
   29a70:	moveq	r1, #0
   29a74:	bxeq	lr
   29a78:	push	{r4, r5, lr}
   29a7c:	mov	r4, #1024	; 0x400
   29a80:	add	r4, r4, #50	; 0x32
   29a84:	mov	r5, #0
   29a88:	mov	r1, #0
   29a8c:	b	29908 <_obstack_memory_used@@Base+0x4894>
   29a90:	teq	r0, #0
   29a94:	moveq	r1, #0
   29a98:	bxeq	lr
   29a9c:	push	{r4, r5, lr}
   29aa0:	mov	r4, #1024	; 0x400
   29aa4:	add	r4, r4, #50	; 0x32
   29aa8:	ands	r5, r0, #-2147483648	; 0x80000000
   29aac:	rsbmi	r0, r0, #0
   29ab0:	mov	r1, #0
   29ab4:	b	29908 <_obstack_memory_used@@Base+0x4894>
   29ab8:	lsls	r2, r0, #1
   29abc:	asr	r1, r2, #3
   29ac0:	rrx	r1, r1
   29ac4:	lsl	r0, r2, #28
   29ac8:	andsne	r3, r2, #-16777216	; 0xff000000
   29acc:	teqne	r3, #-16777216	; 0xff000000
   29ad0:	eorne	r1, r1, #939524096	; 0x38000000
   29ad4:	bxne	lr
   29ad8:	bics	r2, r2, #-16777216	; 0xff000000
   29adc:	bxeq	lr
   29ae0:	teq	r3, #-16777216	; 0xff000000
   29ae4:	orreq	r1, r1, #524288	; 0x80000
   29ae8:	bxeq	lr
   29aec:	push	{r4, r5, lr}
   29af0:	mov	r4, #896	; 0x380
   29af4:	and	r5, r1, #-2147483648	; 0x80000000
   29af8:	bic	r1, r1, #-2147483648	; 0x80000000
   29afc:	b	29908 <_obstack_memory_used@@Base+0x4894>
   29b00:	orrs	r2, r0, r1
   29b04:	bxeq	lr
   29b08:	push	{r4, r5, lr}
   29b0c:	mov	r5, #0
   29b10:	b	29b30 <_obstack_memory_used@@Base+0x4abc>
   29b14:	orrs	r2, r0, r1
   29b18:	bxeq	lr
   29b1c:	push	{r4, r5, lr}
   29b20:	ands	r5, r1, #-2147483648	; 0x80000000
   29b24:	bpl	29b30 <_obstack_memory_used@@Base+0x4abc>
   29b28:	rsbs	r0, r0, #0
   29b2c:	rsc	r1, r1, #0
   29b30:	mov	r4, #1024	; 0x400
   29b34:	add	r4, r4, #50	; 0x32
   29b38:	lsrs	ip, r1, #22
   29b3c:	beq	298ac <_obstack_memory_used@@Base+0x4838>
   29b40:	mov	r2, #3
   29b44:	lsrs	ip, ip, #3
   29b48:	addne	r2, r2, #3
   29b4c:	lsrs	ip, ip, #3
   29b50:	addne	r2, r2, #3
   29b54:	add	r2, r2, ip, lsr #3
   29b58:	rsb	r3, r2, #32
   29b5c:	lsl	ip, r0, r3
   29b60:	lsr	r0, r0, r2
   29b64:	orr	r0, r0, r1, lsl r3
   29b68:	lsr	r1, r1, r2
   29b6c:	add	r4, r4, r2
   29b70:	b	298ac <_obstack_memory_used@@Base+0x4838>
   29b74:	cmp	r3, #0
   29b78:	cmpeq	r2, #0
   29b7c:	bne	29ba0 <_obstack_memory_used@@Base+0x4b2c>
   29b80:	cmp	r1, #0
   29b84:	movlt	r1, #-2147483648	; 0x80000000
   29b88:	movlt	r0, #0
   29b8c:	blt	29b9c <_obstack_memory_used@@Base+0x4b28>
   29b90:	cmpeq	r0, #0
   29b94:	mvnne	r1, #-2147483648	; 0x80000000
   29b98:	mvnne	r0, #0
   29b9c:	b	29c84 <_obstack_memory_used@@Base+0x4c10>
   29ba0:	sub	sp, sp, #8
   29ba4:	push	{sp, lr}
   29ba8:	cmp	r1, #0
   29bac:	blt	29bcc <_obstack_memory_used@@Base+0x4b58>
   29bb0:	cmp	r3, #0
   29bb4:	blt	29c00 <_obstack_memory_used@@Base+0x4b8c>
   29bb8:	bl	29cd8 <_obstack_memory_used@@Base+0x4c64>
   29bbc:	ldr	lr, [sp, #4]
   29bc0:	add	sp, sp, #8
   29bc4:	pop	{r2, r3}
   29bc8:	bx	lr
   29bcc:	rsbs	r0, r0, #0
   29bd0:	sbc	r1, r1, r1, lsl #1
   29bd4:	cmp	r3, #0
   29bd8:	blt	29c24 <_obstack_memory_used@@Base+0x4bb0>
   29bdc:	bl	29cd8 <_obstack_memory_used@@Base+0x4c64>
   29be0:	ldr	lr, [sp, #4]
   29be4:	add	sp, sp, #8
   29be8:	pop	{r2, r3}
   29bec:	rsbs	r0, r0, #0
   29bf0:	sbc	r1, r1, r1, lsl #1
   29bf4:	rsbs	r2, r2, #0
   29bf8:	sbc	r3, r3, r3, lsl #1
   29bfc:	bx	lr
   29c00:	rsbs	r2, r2, #0
   29c04:	sbc	r3, r3, r3, lsl #1
   29c08:	bl	29cd8 <_obstack_memory_used@@Base+0x4c64>
   29c0c:	ldr	lr, [sp, #4]
   29c10:	add	sp, sp, #8
   29c14:	pop	{r2, r3}
   29c18:	rsbs	r0, r0, #0
   29c1c:	sbc	r1, r1, r1, lsl #1
   29c20:	bx	lr
   29c24:	rsbs	r2, r2, #0
   29c28:	sbc	r3, r3, r3, lsl #1
   29c2c:	bl	29cd8 <_obstack_memory_used@@Base+0x4c64>
   29c30:	ldr	lr, [sp, #4]
   29c34:	add	sp, sp, #8
   29c38:	pop	{r2, r3}
   29c3c:	rsbs	r2, r2, #0
   29c40:	sbc	r3, r3, r3, lsl #1
   29c44:	bx	lr
   29c48:	cmp	r3, #0
   29c4c:	cmpeq	r2, #0
   29c50:	bne	29c68 <_obstack_memory_used@@Base+0x4bf4>
   29c54:	cmp	r1, #0
   29c58:	cmpeq	r0, #0
   29c5c:	mvnne	r1, #0
   29c60:	mvnne	r0, #0
   29c64:	b	29c84 <_obstack_memory_used@@Base+0x4c10>
   29c68:	sub	sp, sp, #8
   29c6c:	push	{sp, lr}
   29c70:	bl	29cd8 <_obstack_memory_used@@Base+0x4c64>
   29c74:	ldr	lr, [sp, #4]
   29c78:	add	sp, sp, #8
   29c7c:	pop	{r2, r3}
   29c80:	bx	lr
   29c84:	push	{r1, lr}
   29c88:	mov	r0, #8
   29c8c:	bl	11bac <raise@plt>
   29c90:	pop	{r1, pc}
   29c94:	andeq	r0, r0, r0
   29c98:	vmov	d6, r0, r1
   29c9c:	vldr	d7, [pc, #36]	; 29cc8 <_obstack_memory_used@@Base+0x4c54>
   29ca0:	vldr	d5, [pc, #40]	; 29cd0 <_obstack_memory_used@@Base+0x4c5c>
   29ca4:	vmul.f64	d7, d6, d7
   29ca8:	vcvt.u32.f64	s14, d7
   29cac:	vcvt.f64.u32	d4, s14
   29cb0:	vmov	r1, s14
   29cb4:	vmls.f64	d6, d4, d5
   29cb8:	vcvt.u32.f64	s15, d6
   29cbc:	vmov	r0, s15
   29cc0:	bx	lr
   29cc4:	nop			; (mov r0, r0)
   29cc8:	andeq	r0, r0, r0
   29ccc:	ldclcc	0, cr0, [r0]
   29cd0:	andeq	r0, r0, r0
   29cd4:	mvnsmi	r0, r0
   29cd8:	cmp	r1, r3
   29cdc:	cmpeq	r0, r2
   29ce0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ce4:	mov	r4, r0
   29ce8:	movcc	r0, #0
   29cec:	mov	r5, r1
   29cf0:	ldr	lr, [sp, #36]	; 0x24
   29cf4:	movcc	r1, r0
   29cf8:	bcc	29df4 <_obstack_memory_used@@Base+0x4d80>
   29cfc:	cmp	r3, #0
   29d00:	clzeq	ip, r2
   29d04:	clzne	ip, r3
   29d08:	addeq	ip, ip, #32
   29d0c:	cmp	r5, #0
   29d10:	clzeq	r1, r4
   29d14:	addeq	r1, r1, #32
   29d18:	clzne	r1, r5
   29d1c:	sub	ip, ip, r1
   29d20:	sub	sl, ip, #32
   29d24:	lsl	r9, r3, ip
   29d28:	rsb	fp, ip, #32
   29d2c:	orr	r9, r9, r2, lsl sl
   29d30:	orr	r9, r9, r2, lsr fp
   29d34:	lsl	r8, r2, ip
   29d38:	cmp	r5, r9
   29d3c:	cmpeq	r4, r8
   29d40:	movcc	r0, #0
   29d44:	movcc	r1, r0
   29d48:	bcc	29d64 <_obstack_memory_used@@Base+0x4cf0>
   29d4c:	mov	r0, #1
   29d50:	subs	r4, r4, r8
   29d54:	lsl	r1, r0, sl
   29d58:	orr	r1, r1, r0, lsr fp
   29d5c:	lsl	r0, r0, ip
   29d60:	sbc	r5, r5, r9
   29d64:	cmp	ip, #0
   29d68:	beq	29df4 <_obstack_memory_used@@Base+0x4d80>
   29d6c:	lsr	r6, r8, #1
   29d70:	orr	r6, r6, r9, lsl #31
   29d74:	lsr	r7, r9, #1
   29d78:	mov	r2, ip
   29d7c:	b	29da0 <_obstack_memory_used@@Base+0x4d2c>
   29d80:	subs	r3, r4, r6
   29d84:	sbc	r8, r5, r7
   29d88:	adds	r3, r3, r3
   29d8c:	adc	r8, r8, r8
   29d90:	adds	r4, r3, #1
   29d94:	adc	r5, r8, #0
   29d98:	subs	r2, r2, #1
   29d9c:	beq	29dbc <_obstack_memory_used@@Base+0x4d48>
   29da0:	cmp	r5, r7
   29da4:	cmpeq	r4, r6
   29da8:	bcs	29d80 <_obstack_memory_used@@Base+0x4d0c>
   29dac:	adds	r4, r4, r4
   29db0:	adc	r5, r5, r5
   29db4:	subs	r2, r2, #1
   29db8:	bne	29da0 <_obstack_memory_used@@Base+0x4d2c>
   29dbc:	lsr	r3, r4, ip
   29dc0:	orr	r3, r3, r5, lsl fp
   29dc4:	lsr	r2, r5, ip
   29dc8:	orr	r3, r3, r5, lsr sl
   29dcc:	adds	r0, r0, r4
   29dd0:	mov	r4, r3
   29dd4:	lsl	r3, r2, ip
   29dd8:	orr	r3, r3, r4, lsl sl
   29ddc:	lsl	ip, r4, ip
   29de0:	orr	r3, r3, r4, lsr fp
   29de4:	adc	r1, r1, r5
   29de8:	subs	r0, r0, ip
   29dec:	mov	r5, r2
   29df0:	sbc	r1, r1, r3
   29df4:	cmp	lr, #0
   29df8:	strdne	r4, [lr]
   29dfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29e00:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29e04:	mov	r7, r0
   29e08:	ldr	r6, [pc, #72]	; 29e58 <_obstack_memory_used@@Base+0x4de4>
   29e0c:	ldr	r5, [pc, #72]	; 29e5c <_obstack_memory_used@@Base+0x4de8>
   29e10:	add	r6, pc, r6
   29e14:	add	r5, pc, r5
   29e18:	sub	r6, r6, r5
   29e1c:	mov	r8, r1
   29e20:	mov	r9, r2
   29e24:	bl	11b68 <calloc@plt-0x20>
   29e28:	asrs	r6, r6, #2
   29e2c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   29e30:	mov	r4, #0
   29e34:	add	r4, r4, #1
   29e38:	ldr	r3, [r5], #4
   29e3c:	mov	r2, r9
   29e40:	mov	r1, r8
   29e44:	mov	r0, r7
   29e48:	blx	r3
   29e4c:	cmp	r6, r4
   29e50:	bne	29e34 <_obstack_memory_used@@Base+0x4dc0>
   29e54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29e58:	andeq	r5, r1, r4, ror #1
   29e5c:	ldrdeq	r5, [r1], -ip
   29e60:	bx	lr
   29e64:	ldr	r3, [pc, #12]	; 29e78 <_obstack_memory_used@@Base+0x4e04>
   29e68:	mov	r1, #0
   29e6c:	add	r3, pc, r3
   29e70:	ldr	r2, [r3]
   29e74:	b	11ee8 <__cxa_atexit@plt>
   29e78:	andeq	r5, r1, r0, asr r3

Disassembly of section .fini:

00029e7c <.fini>:
   29e7c:	push	{r3, lr}
   29e80:	pop	{r3, pc}
