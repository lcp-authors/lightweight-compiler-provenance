
../repos/coreutils/src/base32:     file format elf32-littlearm


Disassembly of section .init:

00010cc4 <.init>:
   10cc4:	push	{r3, lr}
   10cc8:	bl	115c8 <__assert_fail@plt+0x668>
   10ccc:	pop	{r3, pc}

Disassembly of section .plt:

00010cd0 <calloc@plt-0x14>:
   10cd0:	push	{lr}		; (str lr, [sp, #-4]!)
   10cd4:	ldr	lr, [pc, #4]	; 10ce0 <calloc@plt-0x4>
   10cd8:	add	lr, pc, lr
   10cdc:	ldr	pc, [lr, #8]!
   10ce0:	andeq	r5, r1, r0, lsr #6

00010ce4 <calloc@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #86016	; 0x15000
   10cec:	ldr	pc, [ip, #800]!	; 0x320

00010cf0 <fputs_unlocked@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #86016	; 0x15000
   10cf8:	ldr	pc, [ip, #792]!	; 0x318

00010cfc <raise@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #86016	; 0x15000
   10d04:	ldr	pc, [ip, #784]!	; 0x310

00010d08 <strcmp@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #86016	; 0x15000
   10d10:	ldr	pc, [ip, #776]!	; 0x308

00010d14 <posix_fadvise64@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #86016	; 0x15000
   10d1c:	ldr	pc, [ip, #768]!	; 0x300

00010d20 <fflush@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #86016	; 0x15000
   10d28:	ldr	pc, [ip, #760]!	; 0x2f8

00010d2c <memmove@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #86016	; 0x15000
   10d34:	ldr	pc, [ip, #752]!	; 0x2f0

00010d38 <free@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #86016	; 0x15000
   10d40:	ldr	pc, [ip, #744]!	; 0x2e8

00010d44 <_exit@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #86016	; 0x15000
   10d4c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d50 <memcpy@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #86016	; 0x15000
   10d58:	ldr	pc, [ip, #728]!	; 0x2d8

00010d5c <mbsinit@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #86016	; 0x15000
   10d64:	ldr	pc, [ip, #720]!	; 0x2d0

00010d68 <fwrite_unlocked@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #86016	; 0x15000
   10d70:	ldr	pc, [ip, #712]!	; 0x2c8

00010d74 <memcmp@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #86016	; 0x15000
   10d7c:	ldr	pc, [ip, #704]!	; 0x2c0

00010d80 <fputc_unlocked@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #86016	; 0x15000
   10d88:	ldr	pc, [ip, #696]!	; 0x2b8

00010d8c <dcgettext@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #86016	; 0x15000
   10d94:	ldr	pc, [ip, #688]!	; 0x2b0

00010d98 <realloc@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #86016	; 0x15000
   10da0:	ldr	pc, [ip, #680]!	; 0x2a8

00010da4 <textdomain@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #86016	; 0x15000
   10dac:	ldr	pc, [ip, #672]!	; 0x2a0

00010db0 <iswprint@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #86016	; 0x15000
   10db8:	ldr	pc, [ip, #664]!	; 0x298

00010dbc <lseek64@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #86016	; 0x15000
   10dc4:	ldr	pc, [ip, #656]!	; 0x290

00010dc8 <__ctype_get_mb_cur_max@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #86016	; 0x15000
   10dd0:	ldr	pc, [ip, #648]!	; 0x288

00010dd4 <__fpending@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #86016	; 0x15000
   10ddc:	ldr	pc, [ip, #640]!	; 0x280

00010de0 <ferror_unlocked@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #86016	; 0x15000
   10de8:	ldr	pc, [ip, #632]!	; 0x278

00010dec <mbrtowc@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #86016	; 0x15000
   10df4:	ldr	pc, [ip, #624]!	; 0x270

00010df8 <error@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #86016	; 0x15000
   10e00:	ldr	pc, [ip, #616]!	; 0x268

00010e04 <malloc@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #86016	; 0x15000
   10e0c:	ldr	pc, [ip, #608]!	; 0x260

00010e10 <__libc_start_main@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #86016	; 0x15000
   10e18:	ldr	pc, [ip, #600]!	; 0x258

00010e1c <__freading@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #86016	; 0x15000
   10e24:	ldr	pc, [ip, #592]!	; 0x250

00010e28 <__gmon_start__@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #86016	; 0x15000
   10e30:	ldr	pc, [ip, #584]!	; 0x248

00010e34 <getopt_long@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #86016	; 0x15000
   10e3c:	ldr	pc, [ip, #576]!	; 0x240

00010e40 <__ctype_b_loc@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #86016	; 0x15000
   10e48:	ldr	pc, [ip, #568]!	; 0x238

00010e4c <exit@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #86016	; 0x15000
   10e54:	ldr	pc, [ip, #560]!	; 0x230

00010e58 <strlen@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #86016	; 0x15000
   10e60:	ldr	pc, [ip, #552]!	; 0x228

00010e64 <strchr@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #86016	; 0x15000
   10e6c:	ldr	pc, [ip, #544]!	; 0x220

00010e70 <__errno_location@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #86016	; 0x15000
   10e78:	ldr	pc, [ip, #536]!	; 0x218

00010e7c <__cxa_atexit@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #86016	; 0x15000
   10e84:	ldr	pc, [ip, #528]!	; 0x210

00010e88 <memset@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #86016	; 0x15000
   10e90:	ldr	pc, [ip, #520]!	; 0x208

00010e94 <__printf_chk@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #86016	; 0x15000
   10e9c:	ldr	pc, [ip, #512]!	; 0x200

00010ea0 <fileno@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #86016	; 0x15000
   10ea8:	ldr	pc, [ip, #504]!	; 0x1f8

00010eac <__fprintf_chk@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #86016	; 0x15000
   10eb4:	ldr	pc, [ip, #496]!	; 0x1f0

00010eb8 <memchr@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #86016	; 0x15000
   10ec0:	ldr	pc, [ip, #488]!	; 0x1e8

00010ec4 <strtoimax@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #86016	; 0x15000
   10ecc:	ldr	pc, [ip, #480]!	; 0x1e0

00010ed0 <fclose@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #86016	; 0x15000
   10ed8:	ldr	pc, [ip, #472]!	; 0x1d8

00010edc <fseeko64@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #86016	; 0x15000
   10ee4:	ldr	pc, [ip, #464]!	; 0x1d0

00010ee8 <setlocale@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #86016	; 0x15000
   10ef0:	ldr	pc, [ip, #456]!	; 0x1c8

00010ef4 <strrchr@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #86016	; 0x15000
   10efc:	ldr	pc, [ip, #448]!	; 0x1c0

00010f00 <nl_langinfo@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #86016	; 0x15000
   10f08:	ldr	pc, [ip, #440]!	; 0x1b8

00010f0c <fopen64@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #86016	; 0x15000
   10f14:	ldr	pc, [ip, #432]!	; 0x1b0

00010f18 <bindtextdomain@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #86016	; 0x15000
   10f20:	ldr	pc, [ip, #424]!	; 0x1a8

00010f24 <fread_unlocked@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #86016	; 0x15000
   10f2c:	ldr	pc, [ip, #416]!	; 0x1a0

00010f30 <fputs@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #86016	; 0x15000
   10f38:	ldr	pc, [ip, #408]!	; 0x198

00010f3c <strncmp@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #86016	; 0x15000
   10f44:	ldr	pc, [ip, #400]!	; 0x190

00010f48 <abort@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #86016	; 0x15000
   10f50:	ldr	pc, [ip, #392]!	; 0x188

00010f54 <feof_unlocked@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #86016	; 0x15000
   10f5c:	ldr	pc, [ip, #384]!	; 0x180

00010f60 <__assert_fail@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #86016	; 0x15000
   10f68:	ldr	pc, [ip, #376]!	; 0x178

Disassembly of section .text:

00010f6c <.text>:
   10f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f70:	mov	r9, r0
   10f74:	sub	sp, sp, #60	; 0x3c
   10f78:	ldr	r0, [r1]
   10f7c:	mov	r5, r1
   10f80:	bl	12428 <__assert_fail@plt+0x14c8>
   10f84:	ldr	r1, [pc, #1436]	; 11528 <__assert_fail@plt+0x5c8>
   10f88:	mov	r0, #6
   10f8c:	bl	10ee8 <setlocale@plt>
   10f90:	ldr	r1, [pc, #1428]	; 1152c <__assert_fail@plt+0x5cc>
   10f94:	ldr	r0, [pc, #1428]	; 11530 <__assert_fail@plt+0x5d0>
   10f98:	bl	10f18 <bindtextdomain@plt>
   10f9c:	ldr	r0, [pc, #1420]	; 11530 <__assert_fail@plt+0x5d0>
   10fa0:	bl	10da4 <textdomain@plt>
   10fa4:	ldr	r0, [pc, #1416]	; 11534 <__assert_fail@plt+0x5d4>
   10fa8:	bl	15268 <__assert_fail@plt+0x4308>
   10fac:	mov	r8, #0
   10fb0:	ldr	sl, [pc, #1408]	; 11538 <__assert_fail@plt+0x5d8>
   10fb4:	mov	r6, #76	; 0x4c
   10fb8:	mov	r7, r8
   10fbc:	mov	r4, #0
   10fc0:	str	r4, [sp]
   10fc4:	ldr	r3, [pc, #1392]	; 1153c <__assert_fail@plt+0x5dc>
   10fc8:	ldr	r2, [pc, #1392]	; 11540 <__assert_fail@plt+0x5e0>
   10fcc:	mov	r1, r5
   10fd0:	mov	r0, r9
   10fd4:	bl	10e34 <getopt_long@plt>
   10fd8:	cmn	r0, #1
   10fdc:	bne	11030 <__assert_fail@plt+0xd0>
   10fe0:	ldr	sl, [pc, #1372]	; 11544 <__assert_fail@plt+0x5e4>
   10fe4:	ldr	r3, [sl]
   10fe8:	sub	r2, r9, r3
   10fec:	cmp	r2, #1
   10ff0:	ble	11134 <__assert_fail@plt+0x1d4>
   10ff4:	mov	r2, #5
   10ff8:	ldr	r1, [pc, #1352]	; 11548 <__assert_fail@plt+0x5e8>
   10ffc:	mov	r0, r4
   11000:	bl	10d8c <dcgettext@plt>
   11004:	ldr	r3, [sl]
   11008:	add	r3, r3, #1
   1100c:	mov	r6, r0
   11010:	ldr	r0, [r5, r3, lsl #2]
   11014:	bl	13a58 <__assert_fail@plt+0x2af8>
   11018:	mov	r2, r6
   1101c:	mov	r1, r4
   11020:	mov	r3, r0
   11024:	mov	r0, r4
   11028:	bl	10df8 <error@plt>
   1102c:	b	11050 <__assert_fail@plt+0xf0>
   11030:	cmp	r0, #100	; 0x64
   11034:	beq	1112c <__assert_fail@plt+0x1cc>
   11038:	bgt	11058 <__assert_fail@plt+0xf8>
   1103c:	cmn	r0, #3
   11040:	beq	110fc <__assert_fail@plt+0x19c>
   11044:	cmn	r0, #2
   11048:	moveq	r0, r4
   1104c:	beq	11054 <__assert_fail@plt+0xf4>
   11050:	mov	r0, #1
   11054:	bl	11740 <__assert_fail@plt+0x7e0>
   11058:	cmp	r0, #105	; 0x69
   1105c:	beq	110d0 <__assert_fail@plt+0x170>
   11060:	cmp	r0, #119	; 0x77
   11064:	bne	11050 <__assert_fail@plt+0xf0>
   11068:	ldr	r3, [pc, #1208]	; 11528 <__assert_fail@plt+0x5c8>
   1106c:	mov	r2, #10
   11070:	str	r3, [sp]
   11074:	mov	r1, r4
   11078:	add	r3, sp, #40	; 0x28
   1107c:	ldr	r0, [sl]
   11080:	bl	145b0 <__assert_fail@plt+0x3650>
   11084:	cmp	r0, #1
   11088:	bhi	1109c <__assert_fail@plt+0x13c>
   1108c:	ldrd	r2, [sp, #40]	; 0x28
   11090:	cmp	r2, #0
   11094:	sbcs	r1, r3, #0
   11098:	bge	110d8 <__assert_fail@plt+0x178>
   1109c:	mov	r2, #5
   110a0:	ldr	r1, [pc, #1188]	; 1154c <__assert_fail@plt+0x5ec>
   110a4:	mov	r0, #0
   110a8:	bl	10d8c <dcgettext@plt>
   110ac:	mov	r4, r0
   110b0:	ldr	r0, [sl]
   110b4:	bl	13a58 <__assert_fail@plt+0x2af8>
   110b8:	mov	r3, r4
   110bc:	ldr	r2, [pc, #1164]	; 11550 <__assert_fail@plt+0x5f0>
   110c0:	mov	r1, #0
   110c4:	str	r0, [sp]
   110c8:	mov	r0, #1
   110cc:	bl	10df8 <error@plt>
   110d0:	mov	r8, #1
   110d4:	b	10fbc <__assert_fail@plt+0x5c>
   110d8:	cmp	r2, #-2147483648	; 0x80000000
   110dc:	sbcs	r1, r3, #0
   110e0:	eor	r0, r0, #1
   110e4:	andlt	r0, r0, #1
   110e8:	movge	r0, #0
   110ec:	cmp	r0, #0
   110f0:	moveq	r2, #0
   110f4:	mov	r6, r2
   110f8:	b	10fbc <__assert_fail@plt+0x5c>
   110fc:	ldr	r3, [pc, #1104]	; 11554 <__assert_fail@plt+0x5f4>
   11100:	ldr	r0, [pc, #1104]	; 11558 <__assert_fail@plt+0x5f8>
   11104:	str	r3, [sp]
   11108:	ldr	r3, [pc, #1100]	; 1155c <__assert_fail@plt+0x5fc>
   1110c:	str	r4, [sp, #4]
   11110:	ldr	r2, [pc, #1096]	; 11560 <__assert_fail@plt+0x600>
   11114:	ldr	r0, [r0]
   11118:	ldr	r3, [r3]
   1111c:	ldr	r1, [pc, #1088]	; 11564 <__assert_fail@plt+0x604>
   11120:	bl	13ea8 <__assert_fail@plt+0x2f48>
   11124:	mov	r0, r4
   11128:	bl	10e4c <exit@plt>
   1112c:	mov	r7, #1
   11130:	b	10fbc <__assert_fail@plt+0x5c>
   11134:	cmp	r9, r3
   11138:	ldr	r1, [pc, #1064]	; 11568 <__assert_fail@plt+0x608>
   1113c:	ldrgt	r3, [r5, r3, lsl #2]
   11140:	ldrle	r3, [pc, #1056]	; 11568 <__assert_fail@plt+0x608>
   11144:	str	r3, [sp, #12]
   11148:	ldr	r0, [sp, #12]
   1114c:	bl	10d08 <strcmp@plt>
   11150:	cmp	r0, #0
   11154:	ldreq	r3, [pc, #1040]	; 1156c <__assert_fail@plt+0x60c>
   11158:	ldreq	r4, [r3]
   1115c:	beq	111a0 <__assert_fail@plt+0x240>
   11160:	ldr	r1, [pc, #1032]	; 11570 <__assert_fail@plt+0x610>
   11164:	ldr	r0, [sp, #12]
   11168:	bl	10f0c <fopen64@plt>
   1116c:	subs	r4, r0, #0
   11170:	bne	111a0 <__assert_fail@plt+0x240>
   11174:	bl	10e70 <__errno_location@plt>
   11178:	ldr	r2, [sp, #12]
   1117c:	mov	r1, #3
   11180:	ldr	r5, [r0]
   11184:	mov	r0, r4
   11188:	bl	13918 <__assert_fail@plt+0x29b8>
   1118c:	ldr	r2, [pc, #992]	; 11574 <__assert_fail@plt+0x614>
   11190:	mov	r1, r5
   11194:	mov	r3, r0
   11198:	mov	r0, #1
   1119c:	bl	10df8 <error@plt>
   111a0:	ldr	fp, [pc, #944]	; 11558 <__assert_fail@plt+0x5f8>
   111a4:	mov	r1, #2
   111a8:	mov	r0, r4
   111ac:	bl	12218 <__assert_fail@plt+0x12b8>
   111b0:	ldr	r3, [fp]
   111b4:	cmp	r7, #0
   111b8:	str	r3, [sp, #20]
   111bc:	beq	113a0 <__assert_fail@plt+0x440>
   111c0:	mov	r0, #8192	; 0x2000
   111c4:	bl	13f70 <__assert_fail@plt+0x3010>
   111c8:	add	r5, sp, #40	; 0x28
   111cc:	mov	r7, r0
   111d0:	mov	r0, #5120	; 0x1400
   111d4:	bl	13f70 <__assert_fail@plt+0x3010>
   111d8:	str	r0, [sp, #16]
   111dc:	mov	r0, r5
   111e0:	bl	11e68 <__assert_fail@plt+0xf08>
   111e4:	str	r5, [sp, #24]
   111e8:	mov	r6, #0
   111ec:	mov	sl, #1
   111f0:	add	r9, r7, r6
   111f4:	mov	r3, r4
   111f8:	rsb	r2, r6, #8192	; 0x2000
   111fc:	mov	r1, sl
   11200:	mov	r0, r9
   11204:	bl	10f24 <fread_unlocked@plt>
   11208:	cmp	r8, #0
   1120c:	movne	r5, #0
   11210:	mov	fp, r0
   11214:	bne	11284 <__assert_fail@plt+0x324>
   11218:	mov	r0, r4
   1121c:	bl	10de0 <ferror_unlocked@plt>
   11220:	add	r6, r6, fp
   11224:	subs	r5, r0, #0
   11228:	beq	11290 <__assert_fail@plt+0x330>
   1122c:	bl	10e70 <__errno_location@plt>
   11230:	mov	r2, #5
   11234:	ldr	r1, [pc, #828]	; 11578 <__assert_fail@plt+0x618>
   11238:	ldr	r4, [r0]
   1123c:	b	1135c <__assert_fail@plt+0x3fc>
   11240:	ldrb	r3, [r9, r5]
   11244:	mov	r0, r3
   11248:	str	r3, [sp, #28]
   1124c:	bl	11e50 <__assert_fail@plt+0xef0>
   11250:	ldr	r3, [sp, #28]
   11254:	cmp	r3, #61	; 0x3d
   11258:	orreq	r0, r0, #1
   1125c:	tst	r0, #255	; 0xff
   11260:	addne	r5, r5, #1
   11264:	bne	11284 <__assert_fail@plt+0x324>
   11268:	add	r0, r5, r6
   1126c:	add	r1, r0, #1
   11270:	sub	fp, fp, #1
   11274:	sub	r2, fp, r5
   11278:	add	r1, r7, r1
   1127c:	add	r0, r7, r0
   11280:	bl	10d2c <memmove@plt>
   11284:	cmp	r5, fp
   11288:	blt	11240 <__assert_fail@plt+0x2e0>
   1128c:	b	11218 <__assert_fail@plt+0x2b8>
   11290:	ldr	r3, [pc, #740]	; 1157c <__assert_fail@plt+0x61c>
   11294:	cmp	r6, r3
   11298:	ble	112dc <__assert_fail@plt+0x37c>
   1129c:	mov	sl, #5120	; 0x1400
   112a0:	add	fp, sp, #36	; 0x24
   112a4:	mov	r0, r4
   112a8:	bl	10f54 <feof_unlocked@plt>
   112ac:	cmp	r0, #0
   112b0:	movne	r0, #2
   112b4:	moveq	r0, #1
   112b8:	cmp	r5, r0
   112bc:	blt	112f0 <__assert_fail@plt+0x390>
   112c0:	mov	r0, r4
   112c4:	bl	10f54 <feof_unlocked@plt>
   112c8:	cmp	r0, #0
   112cc:	beq	111e8 <__assert_fail@plt+0x288>
   112d0:	ldr	r1, [sp, #12]
   112d4:	mov	r0, r4
   112d8:	bl	116b4 <__assert_fail@plt+0x754>
   112dc:	mov	r0, r4
   112e0:	bl	10f54 <feof_unlocked@plt>
   112e4:	cmp	r0, #0
   112e8:	beq	111f0 <__assert_fail@plt+0x290>
   112ec:	b	1129c <__assert_fail@plt+0x33c>
   112f0:	cmp	r5, #1
   112f4:	bne	11304 <__assert_fail@plt+0x3a4>
   112f8:	ldr	r3, [sp, #40]	; 0x28
   112fc:	cmp	r3, #0
   11300:	beq	112c0 <__assert_fail@plt+0x360>
   11304:	cmp	r5, #0
   11308:	moveq	r2, r6
   1130c:	movne	r2, #0
   11310:	ldr	r3, [sp, #16]
   11314:	mov	r1, r7
   11318:	str	fp, [sp]
   1131c:	ldr	r0, [sp, #24]
   11320:	str	sl, [sp, #36]	; 0x24
   11324:	bl	11e74 <__assert_fail@plt+0xf14>
   11328:	ldr	r3, [sp, #20]
   1132c:	ldr	r2, [sp, #36]	; 0x24
   11330:	mov	r1, #1
   11334:	mov	r9, r0
   11338:	ldr	r0, [sp, #16]
   1133c:	bl	10d68 <fwrite_unlocked@plt>
   11340:	ldr	r3, [sp, #36]	; 0x24
   11344:	cmp	r0, r3
   11348:	bcs	11370 <__assert_fail@plt+0x410>
   1134c:	bl	10e70 <__errno_location@plt>
   11350:	ldr	r1, [pc, #552]	; 11580 <__assert_fail@plt+0x620>
   11354:	mov	r2, #5
   11358:	ldr	r4, [r0]
   1135c:	mov	r0, #0
   11360:	bl	10d8c <dcgettext@plt>
   11364:	mov	r1, r4
   11368:	mov	r2, r0
   1136c:	b	11390 <__assert_fail@plt+0x430>
   11370:	cmp	r9, #0
   11374:	bne	11398 <__assert_fail@plt+0x438>
   11378:	mov	r2, #5
   1137c:	ldr	r1, [pc, #512]	; 11584 <__assert_fail@plt+0x624>
   11380:	mov	r0, r9
   11384:	bl	10d8c <dcgettext@plt>
   11388:	mov	r1, r9
   1138c:	mov	r2, r0
   11390:	mov	r0, #1
   11394:	bl	10df8 <error@plt>
   11398:	add	r5, r5, #1
   1139c:	b	112a4 <__assert_fail@plt+0x344>
   113a0:	mov	r0, #30720	; 0x7800
   113a4:	bl	13f70 <__assert_fail@plt+0x3010>
   113a8:	str	r0, [sp, #24]
   113ac:	mov	r0, #49152	; 0xc000
   113b0:	bl	13f70 <__assert_fail@plt+0x3010>
   113b4:	str	r0, [sp, #16]
   113b8:	mov	r8, #0
   113bc:	mov	r5, #1
   113c0:	ldr	r0, [sp, #24]
   113c4:	rsb	r2, r8, #30720	; 0x7800
   113c8:	mov	r3, r4
   113cc:	mov	r1, r5
   113d0:	add	r0, r0, r8
   113d4:	bl	10f24 <fread_unlocked@plt>
   113d8:	add	r8, r8, r0
   113dc:	mov	r0, r4
   113e0:	bl	10f54 <feof_unlocked@plt>
   113e4:	cmp	r0, #0
   113e8:	bne	11458 <__assert_fail@plt+0x4f8>
   113ec:	mov	r0, r4
   113f0:	bl	10de0 <ferror_unlocked@plt>
   113f4:	cmp	r0, #0
   113f8:	bne	11458 <__assert_fail@plt+0x4f8>
   113fc:	ldr	r3, [pc, #388]	; 11588 <__assert_fail@plt+0x628>
   11400:	cmp	r8, r3
   11404:	ble	113c0 <__assert_fail@plt+0x460>
   11408:	mov	r1, #5
   1140c:	add	r0, r8, #4
   11410:	bl	14db8 <__assert_fail@plt+0x3e58>
   11414:	ldr	r2, [sp, #16]
   11418:	mov	r1, r8
   1141c:	lsl	sl, r0, #3
   11420:	mov	r3, sl
   11424:	ldr	r0, [sp, #24]
   11428:	bl	11bc8 <__assert_fail@plt+0xc68>
   1142c:	cmp	r6, #0
   11430:	movne	r9, #0
   11434:	bne	114bc <__assert_fail@plt+0x55c>
   11438:	ldr	r3, [fp]
   1143c:	mov	r2, sl
   11440:	mov	r1, #1
   11444:	ldr	r0, [sp, #16]
   11448:	bl	10d68 <fwrite_unlocked@plt>
   1144c:	cmp	sl, r0
   11450:	bls	11460 <__assert_fail@plt+0x500>
   11454:	b	1134c <__assert_fail@plt+0x3ec>
   11458:	cmp	r8, #0
   1145c:	bgt	11408 <__assert_fail@plt+0x4a8>
   11460:	mov	r0, r4
   11464:	bl	10f54 <feof_unlocked@plt>
   11468:	cmp	r0, #0
   1146c:	beq	114f8 <__assert_fail@plt+0x598>
   11470:	cmp	r6, #0
   11474:	cmpne	r7, #0
   11478:	bgt	11510 <__assert_fail@plt+0x5b0>
   1147c:	mov	r0, r4
   11480:	bl	10de0 <ferror_unlocked@plt>
   11484:	cmp	r0, #0
   11488:	beq	112d0 <__assert_fail@plt+0x370>
   1148c:	b	1122c <__assert_fail@plt+0x2cc>
   11490:	ldr	r3, [pc, #192]	; 11558 <__assert_fail@plt+0x5f8>
   11494:	ldr	r0, [sp, #16]
   11498:	mov	r2, r5
   1149c:	ldr	r3, [r3]
   114a0:	mov	r1, #1
   114a4:	add	r0, r0, r9
   114a8:	bl	10d68 <fwrite_unlocked@plt>
   114ac:	cmp	r5, r0
   114b0:	bhi	1134c <__assert_fail@plt+0x3ec>
   114b4:	add	r7, r7, r5
   114b8:	add	r9, r9, r5
   114bc:	cmp	sl, r9
   114c0:	ble	11460 <__assert_fail@plt+0x500>
   114c4:	sub	r5, sl, r9
   114c8:	sub	r3, r6, r7
   114cc:	cmp	r5, r3
   114d0:	movge	r5, r3
   114d4:	cmp	r5, #0
   114d8:	bne	11490 <__assert_fail@plt+0x530>
   114dc:	ldr	r1, [sp, #20]
   114e0:	mov	r0, #10
   114e4:	bl	10d80 <fputc_unlocked@plt>
   114e8:	cmn	r0, #1
   114ec:	beq	1134c <__assert_fail@plt+0x3ec>
   114f0:	mov	r7, r5
   114f4:	b	114bc <__assert_fail@plt+0x55c>
   114f8:	mov	r0, r4
   114fc:	bl	10de0 <ferror_unlocked@plt>
   11500:	cmp	r0, #0
   11504:	cmpeq	r8, #30720	; 0x7800
   11508:	beq	113b8 <__assert_fail@plt+0x458>
   1150c:	b	11470 <__assert_fail@plt+0x510>
   11510:	ldr	r1, [sp, #20]
   11514:	mov	r0, #10
   11518:	bl	10d80 <fputc_unlocked@plt>
   1151c:	cmn	r0, #1
   11520:	bne	1147c <__assert_fail@plt+0x51c>
   11524:	b	1134c <__assert_fail@plt+0x3ec>
   11528:	muleq	r1, r6, r7
   1152c:	muleq	r1, r7, r7
   11530:	strdeq	r5, [r1], -r4
   11534:	andeq	r2, r1, r8, lsr #2
   11538:	andeq	r6, r2, r8, asr r1
   1153c:	andeq	r5, r1, r4, asr #5
   11540:	ldrdeq	r5, [r1], -r8
   11544:	andeq	r6, r2, r0, asr #2
   11548:	ldrdeq	r5, [r1], -sp
   1154c:	andeq	r5, r1, pc, lsr #15
   11550:	andeq	r5, r1, r1, asr #15
   11554:	andeq	r5, r1, r8, asr #15
   11558:	andeq	r6, r2, r4, asr r1
   1155c:	strdeq	r6, [r2], -r0
   11560:	strdeq	r5, [r1], -r0
   11564:	andeq	r5, r1, fp, lsr r3
   11568:	andeq	r5, r1, lr, lsl #20
   1156c:	andeq	r6, r2, r0, asr r1
   11570:	andeq	r5, r1, lr, ror #15
   11574:	andeq	r5, r1, r5, asr #15
   11578:	strdeq	r5, [r1], -r1
   1157c:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   11580:	strdeq	r5, [r1], -ip
   11584:	andeq	r5, r1, r8, lsl #16
   11588:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   1158c:	mov	fp, #0
   11590:	mov	lr, #0
   11594:	pop	{r1}		; (ldr r1, [sp], #4)
   11598:	mov	r2, sp
   1159c:	push	{r2}		; (str r2, [sp, #-4]!)
   115a0:	push	{r0}		; (str r0, [sp, #-4]!)
   115a4:	ldr	ip, [pc, #16]	; 115bc <__assert_fail@plt+0x65c>
   115a8:	push	{ip}		; (str ip, [sp, #-4]!)
   115ac:	ldr	r0, [pc, #12]	; 115c0 <__assert_fail@plt+0x660>
   115b0:	ldr	r3, [pc, #12]	; 115c4 <__assert_fail@plt+0x664>
   115b4:	bl	10e10 <__libc_start_main@plt>
   115b8:	bl	10f48 <abort@plt>
   115bc:	andeq	r5, r1, r4, ror #4
   115c0:	andeq	r0, r1, ip, ror #30
   115c4:	andeq	r5, r1, r4, lsl #4
   115c8:	ldr	r3, [pc, #20]	; 115e4 <__assert_fail@plt+0x684>
   115cc:	ldr	r2, [pc, #20]	; 115e8 <__assert_fail@plt+0x688>
   115d0:	add	r3, pc, r3
   115d4:	ldr	r2, [r3, r2]
   115d8:	cmp	r2, #0
   115dc:	bxeq	lr
   115e0:	b	10e28 <__gmon_start__@plt>
   115e4:	andeq	r4, r1, r8, lsr #20
   115e8:	andeq	r0, r0, r4, ror #1
   115ec:	ldr	r3, [pc, #28]	; 11610 <__assert_fail@plt+0x6b0>
   115f0:	ldr	r0, [pc, #28]	; 11614 <__assert_fail@plt+0x6b4>
   115f4:	sub	r3, r3, r0
   115f8:	cmp	r3, #6
   115fc:	bxls	lr
   11600:	ldr	r3, [pc, #16]	; 11618 <__assert_fail@plt+0x6b8>
   11604:	cmp	r3, #0
   11608:	bxeq	lr
   1160c:	bx	r3
   11610:	andeq	r6, r2, fp, lsr r1
   11614:	andeq	r6, r2, r8, lsr r1
   11618:	andeq	r0, r0, r0
   1161c:	ldr	r1, [pc, #36]	; 11648 <__assert_fail@plt+0x6e8>
   11620:	ldr	r0, [pc, #36]	; 1164c <__assert_fail@plt+0x6ec>
   11624:	sub	r1, r1, r0
   11628:	asr	r1, r1, #2
   1162c:	add	r1, r1, r1, lsr #31
   11630:	asrs	r1, r1, #1
   11634:	bxeq	lr
   11638:	ldr	r3, [pc, #16]	; 11650 <__assert_fail@plt+0x6f0>
   1163c:	cmp	r3, #0
   11640:	bxeq	lr
   11644:	bx	r3
   11648:	andeq	r6, r2, r8, lsr r1
   1164c:	andeq	r6, r2, r8, lsr r1
   11650:	andeq	r0, r0, r0
   11654:	push	{r4, lr}
   11658:	ldr	r4, [pc, #24]	; 11678 <__assert_fail@plt+0x718>
   1165c:	ldrb	r3, [r4]
   11660:	cmp	r3, #0
   11664:	popne	{r4, pc}
   11668:	bl	115ec <__assert_fail@plt+0x68c>
   1166c:	mov	r3, #1
   11670:	strb	r3, [r4]
   11674:	pop	{r4, pc}
   11678:	andeq	r6, r2, ip, asr r1
   1167c:	ldr	r0, [pc, #40]	; 116ac <__assert_fail@plt+0x74c>
   11680:	ldr	r3, [r0]
   11684:	cmp	r3, #0
   11688:	bne	11690 <__assert_fail@plt+0x730>
   1168c:	b	1161c <__assert_fail@plt+0x6bc>
   11690:	ldr	r3, [pc, #24]	; 116b0 <__assert_fail@plt+0x750>
   11694:	cmp	r3, #0
   11698:	beq	1168c <__assert_fail@plt+0x72c>
   1169c:	push	{r4, lr}
   116a0:	blx	r3
   116a4:	pop	{r4, lr}
   116a8:	b	1161c <__assert_fail@plt+0x6bc>
   116ac:	andeq	r5, r2, r4, lsl pc
   116b0:	andeq	r0, r0, r0
   116b4:	push	{r4, lr}
   116b8:	mov	r4, r1
   116bc:	bl	12248 <__assert_fail@plt+0x12e8>
   116c0:	cmp	r0, #0
   116c4:	beq	11730 <__assert_fail@plt+0x7d0>
   116c8:	ldr	r1, [pc, #100]	; 11734 <__assert_fail@plt+0x7d4>
   116cc:	mov	r0, r4
   116d0:	bl	10d08 <strcmp@plt>
   116d4:	subs	r5, r0, #0
   116d8:	bne	11704 <__assert_fail@plt+0x7a4>
   116dc:	bl	10e70 <__errno_location@plt>
   116e0:	mov	r2, #5
   116e4:	ldr	r1, [pc, #76]	; 11738 <__assert_fail@plt+0x7d8>
   116e8:	ldr	r4, [r0]
   116ec:	mov	r0, r5
   116f0:	bl	10d8c <dcgettext@plt>
   116f4:	mov	r1, r4
   116f8:	mov	r2, r0
   116fc:	mov	r0, #1
   11700:	bl	10df8 <error@plt>
   11704:	bl	10e70 <__errno_location@plt>
   11708:	mov	r2, r4
   1170c:	mov	r1, #3
   11710:	ldr	r5, [r0]
   11714:	mov	r0, #0
   11718:	bl	13918 <__assert_fail@plt+0x29b8>
   1171c:	ldr	r2, [pc, #24]	; 1173c <__assert_fail@plt+0x7dc>
   11720:	mov	r1, r5
   11724:	mov	r3, r0
   11728:	mov	r0, #1
   1172c:	bl	10df8 <error@plt>
   11730:	bl	10e4c <exit@plt>
   11734:	andeq	r5, r1, lr, lsl #20
   11738:	andeq	r5, r1, r4, lsr #6
   1173c:	andeq	r5, r1, r5, asr #15
   11740:	subs	r4, r0, #0
   11744:	push	{r7, lr}
   11748:	sub	sp, sp, #56	; 0x38
   1174c:	ldr	r5, [pc, #568]	; 1198c <__assert_fail@plt+0xa2c>
   11750:	beq	11788 <__assert_fail@plt+0x828>
   11754:	ldr	r3, [pc, #564]	; 11990 <__assert_fail@plt+0xa30>
   11758:	mov	r2, #5
   1175c:	ldr	r1, [pc, #560]	; 11994 <__assert_fail@plt+0xa34>
   11760:	mov	r0, #0
   11764:	ldr	r6, [r3]
   11768:	bl	10d8c <dcgettext@plt>
   1176c:	ldr	r3, [r5]
   11770:	mov	r1, #1
   11774:	mov	r2, r0
   11778:	mov	r0, r6
   1177c:	bl	10eac <__fprintf_chk@plt>
   11780:	mov	r0, r4
   11784:	bl	10e4c <exit@plt>
   11788:	mov	r2, #5
   1178c:	ldr	r1, [pc, #516]	; 11998 <__assert_fail@plt+0xa38>
   11790:	bl	10d8c <dcgettext@plt>
   11794:	ldr	r2, [r5]
   11798:	ldr	r5, [pc, #508]	; 1199c <__assert_fail@plt+0xa3c>
   1179c:	ldr	r8, [pc, #508]	; 119a0 <__assert_fail@plt+0xa40>
   117a0:	mov	r6, r4
   117a4:	mov	r1, r0
   117a8:	mov	r0, #1
   117ac:	bl	10e94 <__printf_chk@plt>
   117b0:	mov	r2, #5
   117b4:	ldr	r1, [pc, #488]	; 119a4 <__assert_fail@plt+0xa44>
   117b8:	mov	r0, r4
   117bc:	bl	10d8c <dcgettext@plt>
   117c0:	mov	r2, #32
   117c4:	mov	r1, r0
   117c8:	mov	r0, #1
   117cc:	bl	10e94 <__printf_chk@plt>
   117d0:	mov	r2, #5
   117d4:	ldr	r1, [pc, #460]	; 119a8 <__assert_fail@plt+0xa48>
   117d8:	mov	r0, r4
   117dc:	bl	10d8c <dcgettext@plt>
   117e0:	ldr	r1, [r5]
   117e4:	bl	10cf0 <fputs_unlocked@plt>
   117e8:	mov	r2, #5
   117ec:	ldr	r1, [pc, #440]	; 119ac <__assert_fail@plt+0xa4c>
   117f0:	mov	r0, r4
   117f4:	bl	10d8c <dcgettext@plt>
   117f8:	ldr	r1, [r5]
   117fc:	bl	10cf0 <fputs_unlocked@plt>
   11800:	mov	r2, #5
   11804:	ldr	r1, [pc, #420]	; 119b0 <__assert_fail@plt+0xa50>
   11808:	mov	r0, r4
   1180c:	bl	10d8c <dcgettext@plt>
   11810:	ldr	r1, [r5]
   11814:	bl	10cf0 <fputs_unlocked@plt>
   11818:	mov	r2, #5
   1181c:	ldr	r1, [pc, #400]	; 119b4 <__assert_fail@plt+0xa54>
   11820:	mov	r0, r4
   11824:	bl	10d8c <dcgettext@plt>
   11828:	ldr	r1, [r5]
   1182c:	bl	10cf0 <fputs_unlocked@plt>
   11830:	mov	r2, #5
   11834:	ldr	r1, [pc, #380]	; 119b8 <__assert_fail@plt+0xa58>
   11838:	mov	r0, r4
   1183c:	bl	10d8c <dcgettext@plt>
   11840:	ldr	r1, [r5]
   11844:	bl	10cf0 <fputs_unlocked@plt>
   11848:	mov	r2, #5
   1184c:	ldr	r1, [pc, #360]	; 119bc <__assert_fail@plt+0xa5c>
   11850:	mov	r0, r4
   11854:	bl	10d8c <dcgettext@plt>
   11858:	ldr	r3, [pc, #320]	; 119a0 <__assert_fail@plt+0xa40>
   1185c:	mov	r2, r3
   11860:	mov	r1, r0
   11864:	mov	r0, #1
   11868:	bl	10e94 <__printf_chk@plt>
   1186c:	ldr	lr, [pc, #332]	; 119c0 <__assert_fail@plt+0xa60>
   11870:	mov	ip, sp
   11874:	ldm	lr!, {r0, r1, r2, r3}
   11878:	stmia	ip!, {r0, r1, r2, r3}
   1187c:	ldm	lr!, {r0, r1, r2, r3}
   11880:	stmia	ip!, {r0, r1, r2, r3}
   11884:	ldm	lr!, {r0, r1, r2, r3}
   11888:	stmia	ip!, {r0, r1, r2, r3}
   1188c:	ldm	lr, {r0, r1}
   11890:	stm	ip, {r0, r1}
   11894:	ldr	r1, [sp, r6]
   11898:	add	r7, sp, r6
   1189c:	cmp	r1, #0
   118a0:	bne	11944 <__assert_fail@plt+0x9e4>
   118a4:	ldr	r6, [r7, #4]
   118a8:	ldr	r7, [pc, #240]	; 119a0 <__assert_fail@plt+0xa40>
   118ac:	cmp	r6, #0
   118b0:	mov	r2, #5
   118b4:	ldr	r1, [pc, #264]	; 119c4 <__assert_fail@plt+0xa64>
   118b8:	mov	r0, #0
   118bc:	moveq	r6, r7
   118c0:	bl	10d8c <dcgettext@plt>
   118c4:	ldr	r3, [pc, #252]	; 119c8 <__assert_fail@plt+0xa68>
   118c8:	ldr	r2, [pc, #252]	; 119cc <__assert_fail@plt+0xa6c>
   118cc:	mov	r1, r0
   118d0:	mov	r0, #1
   118d4:	bl	10e94 <__printf_chk@plt>
   118d8:	mov	r1, #0
   118dc:	mov	r0, #5
   118e0:	bl	10ee8 <setlocale@plt>
   118e4:	cmp	r0, #0
   118e8:	bne	1195c <__assert_fail@plt+0x9fc>
   118ec:	mov	r2, #5
   118f0:	ldr	r1, [pc, #216]	; 119d0 <__assert_fail@plt+0xa70>
   118f4:	mov	r0, #0
   118f8:	bl	10d8c <dcgettext@plt>
   118fc:	ldr	r3, [pc, #156]	; 119a0 <__assert_fail@plt+0xa40>
   11900:	ldr	r2, [pc, #192]	; 119c8 <__assert_fail@plt+0xa68>
   11904:	mov	r1, r0
   11908:	mov	r0, #1
   1190c:	bl	10e94 <__printf_chk@plt>
   11910:	mov	r2, #5
   11914:	ldr	r1, [pc, #184]	; 119d4 <__assert_fail@plt+0xa74>
   11918:	mov	r0, #0
   1191c:	bl	10d8c <dcgettext@plt>
   11920:	ldr	r2, [pc, #176]	; 119d8 <__assert_fail@plt+0xa78>
   11924:	cmp	r6, r7
   11928:	ldr	r3, [pc, #172]	; 119dc <__assert_fail@plt+0xa7c>
   1192c:	moveq	r3, r2
   11930:	mov	r2, r6
   11934:	mov	r1, r0
   11938:	mov	r0, #1
   1193c:	bl	10e94 <__printf_chk@plt>
   11940:	b	11780 <__assert_fail@plt+0x820>
   11944:	mov	r0, r8
   11948:	bl	10d08 <strcmp@plt>
   1194c:	add	r6, r6, #8
   11950:	cmp	r0, #0
   11954:	bne	11894 <__assert_fail@plt+0x934>
   11958:	b	118a4 <__assert_fail@plt+0x944>
   1195c:	mov	r2, #3
   11960:	ldr	r1, [pc, #120]	; 119e0 <__assert_fail@plt+0xa80>
   11964:	bl	10f3c <strncmp@plt>
   11968:	cmp	r0, #0
   1196c:	beq	118ec <__assert_fail@plt+0x98c>
   11970:	mov	r2, #5
   11974:	ldr	r1, [pc, #104]	; 119e4 <__assert_fail@plt+0xa84>
   11978:	mov	r0, #0
   1197c:	bl	10d8c <dcgettext@plt>
   11980:	ldr	r1, [r5]
   11984:	bl	10cf0 <fputs_unlocked@plt>
   11988:	b	118ec <__assert_fail@plt+0x98c>
   1198c:	andeq	r6, r2, r8, ror #2
   11990:	andeq	r6, r2, r8, asr #2
   11994:	andeq	r5, r1, r2, asr #6
   11998:	andeq	r5, r1, r9, ror #6
   1199c:	andeq	r6, r2, r4, asr r1
   119a0:	andeq	r5, r1, fp, lsr r3
   119a4:	andeq	r5, r1, r7, lsl #7
   119a8:	andeq	r5, r1, sp, asr #7
   119ac:	andeq	r5, r1, r5, lsl #8
   119b0:	andeq	r5, r1, r0, asr r4
   119b4:	andeq	r5, r1, r2, asr #10
   119b8:	andeq	r5, r1, pc, ror #10
   119bc:	andeq	r5, r1, r5, lsr #11
   119c0:	andeq	r5, r1, ip, lsl #5
   119c4:			; <UNDEFINED> instruction: 0x000156b1
   119c8:	andeq	r5, r1, r8, asr #13
   119cc:	strdeq	r5, [r1], -r0
   119d0:	andeq	r5, r1, r9, asr #14
   119d4:	andeq	r5, r1, r4, ror #14
   119d8:	andeq	r5, r1, r2, lsr r8
   119dc:	muleq	r1, r6, r7
   119e0:	strdeq	r5, [r1], -lr
   119e4:	andeq	r5, r1, r2, lsl #14
   119e8:	cmp	r1, #7
   119ec:	ble	11bbc <__assert_fail@plt+0xc5c>
   119f0:	push	{r4, r5, r6, lr}
   119f4:	ldrb	r1, [r0]
   119f8:	ldr	ip, [pc, #452]	; 11bc4 <__assert_fail@plt+0xc64>
   119fc:	ldrsb	r4, [ip, r1]
   11a00:	cmp	r4, #0
   11a04:	blt	11ab8 <__assert_fail@plt+0xb58>
   11a08:	ldrb	r1, [r0, #1]
   11a0c:	ldrsb	r5, [ip, r1]
   11a10:	cmp	r5, #0
   11a14:	blt	11ab8 <__assert_fail@plt+0xb58>
   11a18:	ldr	lr, [r3]
   11a1c:	ldr	r1, [r2]
   11a20:	cmp	lr, #0
   11a24:	beq	11a44 <__assert_fail@plt+0xae4>
   11a28:	asr	lr, r5, #2
   11a2c:	orr	lr, lr, r4, lsl #3
   11a30:	strb	lr, [r1]
   11a34:	ldr	lr, [r3]
   11a38:	add	r1, r1, #1
   11a3c:	sub	lr, lr, #1
   11a40:	str	lr, [r3]
   11a44:	ldrb	lr, [r0, #2]
   11a48:	cmp	lr, #61	; 0x3d
   11a4c:	bne	11a98 <__assert_fail@plt+0xb38>
   11a50:	ldrb	r3, [r0, #3]
   11a54:	cmp	r3, #61	; 0x3d
   11a58:	bne	11ab4 <__assert_fail@plt+0xb54>
   11a5c:	ldrb	r3, [r0, #4]
   11a60:	cmp	r3, #61	; 0x3d
   11a64:	bne	11ab4 <__assert_fail@plt+0xb54>
   11a68:	ldrb	r3, [r0, #5]
   11a6c:	cmp	r3, #61	; 0x3d
   11a70:	bne	11ab4 <__assert_fail@plt+0xb54>
   11a74:	ldrb	r3, [r0, #6]
   11a78:	cmp	r3, #61	; 0x3d
   11a7c:	bne	11ab4 <__assert_fail@plt+0xb54>
   11a80:	ldrb	r3, [r0, #7]
   11a84:	cmp	r3, #61	; 0x3d
   11a88:	bne	11ab4 <__assert_fail@plt+0xb54>
   11a8c:	str	r1, [r2]
   11a90:	mov	r0, #1
   11a94:	pop	{r4, r5, r6, pc}
   11a98:	ldrsb	lr, [ip, lr]
   11a9c:	cmp	lr, #0
   11aa0:	blt	11ab4 <__assert_fail@plt+0xb54>
   11aa4:	ldrb	r4, [r0, #3]
   11aa8:	ldrsb	r4, [ip, r4]
   11aac:	cmp	r4, #0
   11ab0:	bge	11ac0 <__assert_fail@plt+0xb60>
   11ab4:	str	r1, [r2]
   11ab8:	mov	r0, #0
   11abc:	pop	{r4, r5, r6, pc}
   11ac0:	ldr	r6, [r3]
   11ac4:	cmp	r6, #0
   11ac8:	beq	11aec <__assert_fail@plt+0xb8c>
   11acc:	lsl	lr, lr, #1
   11ad0:	orr	lr, lr, r5, lsl #6
   11ad4:	orr	lr, lr, r4, asr #4
   11ad8:	strb	lr, [r1]
   11adc:	ldr	lr, [r3]
   11ae0:	add	r1, r1, #1
   11ae4:	sub	lr, lr, #1
   11ae8:	str	lr, [r3]
   11aec:	ldrb	lr, [r0, #4]
   11af0:	cmp	lr, #61	; 0x3d
   11af4:	beq	11a68 <__assert_fail@plt+0xb08>
   11af8:	ldrsb	r5, [ip, lr]
   11afc:	cmp	r5, #0
   11b00:	blt	11ab4 <__assert_fail@plt+0xb54>
   11b04:	ldr	lr, [r3]
   11b08:	cmp	lr, #0
   11b0c:	beq	11b2c <__assert_fail@plt+0xbcc>
   11b10:	asr	lr, r5, #1
   11b14:	orr	lr, lr, r4, lsl #4
   11b18:	strb	lr, [r1]
   11b1c:	ldr	lr, [r3]
   11b20:	add	r1, r1, #1
   11b24:	sub	lr, lr, #1
   11b28:	str	lr, [r3]
   11b2c:	ldrb	lr, [r0, #5]
   11b30:	cmp	lr, #61	; 0x3d
   11b34:	beq	11a74 <__assert_fail@plt+0xb14>
   11b38:	ldrsb	lr, [ip, lr]
   11b3c:	cmp	lr, #0
   11b40:	blt	11ab4 <__assert_fail@plt+0xb54>
   11b44:	ldrb	r4, [r0, #6]
   11b48:	ldrsb	r4, [ip, r4]
   11b4c:	cmp	r4, #0
   11b50:	blt	11ab4 <__assert_fail@plt+0xb54>
   11b54:	ldr	r6, [r3]
   11b58:	cmp	r6, #0
   11b5c:	beq	11b80 <__assert_fail@plt+0xc20>
   11b60:	lsl	lr, lr, #2
   11b64:	orr	lr, lr, r5, lsl #7
   11b68:	orr	lr, lr, r4, asr #3
   11b6c:	strb	lr, [r1]
   11b70:	ldr	lr, [r3]
   11b74:	add	r1, r1, #1
   11b78:	sub	lr, lr, #1
   11b7c:	str	lr, [r3]
   11b80:	ldrb	r0, [r0, #7]
   11b84:	cmp	r0, #61	; 0x3d
   11b88:	beq	11a8c <__assert_fail@plt+0xb2c>
   11b8c:	ldrsb	r0, [ip, r0]
   11b90:	cmp	r0, #0
   11b94:	blt	11ab4 <__assert_fail@plt+0xb54>
   11b98:	ldr	ip, [r3]
   11b9c:	cmp	ip, #0
   11ba0:	orrne	r0, r0, r4, lsl #5
   11ba4:	strbne	r0, [r1]
   11ba8:	ldrne	r0, [r3]
   11bac:	addne	r1, r1, #1
   11bb0:	subne	r0, r0, #1
   11bb4:	strne	r0, [r3]
   11bb8:	b	11a8c <__assert_fail@plt+0xb2c>
   11bbc:	mov	r0, #0
   11bc0:	bx	lr
   11bc4:	andeq	r5, r1, ip, lsr #17
   11bc8:	push	{r4, r5, r6, r7, lr}
   11bcc:	mov	r6, #0
   11bd0:	ldr	r4, [pc, #432]	; 11d88 <__assert_fail@plt+0xe28>
   11bd4:	mov	r5, #61	; 0x3d
   11bd8:	cmp	r1, #0
   11bdc:	cmpne	r3, #0
   11be0:	movne	ip, #1
   11be4:	moveq	ip, #0
   11be8:	bne	11bf8 <__assert_fail@plt+0xc98>
   11bec:	cmp	r3, #0
   11bf0:	strbne	ip, [r2]
   11bf4:	pop	{r4, r5, r6, r7, pc}
   11bf8:	ldrb	lr, [r0]
   11bfc:	cmp	r3, #1
   11c00:	add	ip, r4, lr, lsr #3
   11c04:	ldrb	ip, [ip, #256]	; 0x100
   11c08:	strb	ip, [r2]
   11c0c:	popeq	{r4, r5, r6, r7, pc}
   11c10:	subs	ip, r1, #1
   11c14:	lsl	r7, lr, #2
   11c18:	ldrbne	lr, [r0, #1]
   11c1c:	moveq	lr, r6
   11c20:	lsrne	lr, lr, #6
   11c24:	add	lr, lr, r7
   11c28:	and	lr, lr, #31
   11c2c:	add	lr, r4, lr
   11c30:	cmp	r3, #2
   11c34:	ldrb	lr, [lr, #256]	; 0x100
   11c38:	strb	lr, [r2, #1]
   11c3c:	popeq	{r4, r5, r6, r7, pc}
   11c40:	cmp	ip, #0
   11c44:	moveq	lr, r5
   11c48:	ldrbne	lr, [r0, #1]
   11c4c:	lslne	lr, lr, #26
   11c50:	addne	lr, r4, lr, lsr #27
   11c54:	ldrbne	lr, [lr, #256]	; 0x100
   11c58:	cmp	r3, #3
   11c5c:	strb	lr, [r2, #2]
   11c60:	popeq	{r4, r5, r6, r7, pc}
   11c64:	cmp	ip, #0
   11c68:	moveq	r1, r5
   11c6c:	beq	11c98 <__assert_fail@plt+0xd38>
   11c70:	subs	ip, r1, #2
   11c74:	ldrb	r7, [r0, #1]
   11c78:	ldrbne	lr, [r0, #2]
   11c7c:	moveq	r1, r6
   11c80:	lsl	r7, r7, #4
   11c84:	lsrne	r1, lr, #4
   11c88:	add	r1, r1, r7
   11c8c:	and	r1, r1, #31
   11c90:	add	r1, r4, r1
   11c94:	ldrb	r1, [r1, #256]	; 0x100
   11c98:	cmp	r3, #4
   11c9c:	strb	r1, [r2, #3]
   11ca0:	popeq	{r4, r5, r6, r7, pc}
   11ca4:	cmp	ip, #0
   11ca8:	moveq	r1, r5
   11cac:	beq	11cd8 <__assert_fail@plt+0xd78>
   11cb0:	subs	ip, ip, #1
   11cb4:	ldrb	r1, [r0, #2]
   11cb8:	ldrbne	lr, [r0, #3]
   11cbc:	lsl	r7, r1, #1
   11cc0:	lsrne	r1, lr, #7
   11cc4:	moveq	r1, r6
   11cc8:	add	r1, r1, r7
   11ccc:	and	r1, r1, #31
   11cd0:	add	r1, r4, r1
   11cd4:	ldrb	r1, [r1, #256]	; 0x100
   11cd8:	cmp	r3, #5
   11cdc:	strb	r1, [r2, #4]
   11ce0:	popeq	{r4, r5, r6, r7, pc}
   11ce4:	cmp	ip, #0
   11ce8:	moveq	r1, r5
   11cec:	ldrbne	r1, [r0, #3]
   11cf0:	lslne	r1, r1, #25
   11cf4:	addne	r1, r4, r1, lsr #27
   11cf8:	ldrbne	r1, [r1, #256]	; 0x100
   11cfc:	cmp	r3, #6
   11d00:	strb	r1, [r2, #5]
   11d04:	popeq	{r4, r5, r6, r7, pc}
   11d08:	cmp	ip, #0
   11d0c:	moveq	r1, r5
   11d10:	beq	11d3c <__assert_fail@plt+0xddc>
   11d14:	subs	ip, ip, #1
   11d18:	ldrb	r1, [r0, #3]
   11d1c:	ldrbne	lr, [r0, #4]
   11d20:	lsl	r7, r1, #3
   11d24:	lsrne	r1, lr, #5
   11d28:	moveq	r1, r6
   11d2c:	add	r1, r1, r7
   11d30:	and	r1, r1, #31
   11d34:	add	r1, r4, r1
   11d38:	ldrb	r1, [r1, #256]	; 0x100
   11d3c:	cmp	r3, #7
   11d40:	strb	r1, [r2, #6]
   11d44:	popeq	{r4, r5, r6, r7, pc}
   11d48:	cmp	ip, #0
   11d4c:	moveq	r1, r5
   11d50:	ldrbne	r1, [r0, #4]
   11d54:	add	r2, r2, #8
   11d58:	andne	r1, r1, #31
   11d5c:	addne	r1, r4, r1
   11d60:	ldrbne	r1, [r1, #256]	; 0x100
   11d64:	subs	r3, r3, #8
   11d68:	strb	r1, [r2, #-1]
   11d6c:	popeq	{r4, r5, r6, r7, pc}
   11d70:	cmp	ip, #0
   11d74:	beq	11d80 <__assert_fail@plt+0xe20>
   11d78:	subs	ip, ip, #1
   11d7c:	addne	r0, r0, #5
   11d80:	mov	r1, ip
   11d84:	b	11bd8 <__assert_fail@plt+0xc78>
   11d88:	andeq	r5, r1, ip, lsr #17
   11d8c:	push	{r4, r5, r6, r7, r8, lr}
   11d90:	mov	r6, r1
   11d94:	mov	r8, r0
   11d98:	mov	r1, #5
   11d9c:	mov	r0, r6
   11da0:	mov	r7, r2
   11da4:	bl	14fd8 <__assert_fail@plt+0x4078>
   11da8:	mov	r0, r6
   11dac:	adds	r4, r1, #0
   11db0:	mov	r1, #5
   11db4:	movne	r4, #1
   11db8:	bl	14db8 <__assert_fail@plt+0x3e58>
   11dbc:	adds	r4, r4, r0
   11dc0:	bpl	11e08 <__assert_fail@plt+0xea8>
   11dc4:	cmn	r4, #1
   11dc8:	moveq	r0, #0
   11dcc:	beq	11de8 <__assert_fail@plt+0xe88>
   11dd0:	mov	r1, r4
   11dd4:	mov	r0, #-2147483648	; 0x80000000
   11dd8:	bl	14db8 <__assert_fail@plt+0x3e58>
   11ddc:	cmp	r0, #7
   11de0:	movgt	r0, #0
   11de4:	movle	r0, #1
   11de8:	cmp	r0, #0
   11dec:	bne	11df8 <__assert_fail@plt+0xe98>
   11df0:	cmp	r6, #0
   11df4:	bge	11e18 <__assert_fail@plt+0xeb8>
   11df8:	mov	r5, #0
   11dfc:	str	r5, [r7]
   11e00:	mov	r0, r5
   11e04:	pop	{r4, r5, r6, r7, r8, pc}
   11e08:	cmn	r4, #-268435455	; 0xf0000001
   11e0c:	movle	r0, #0
   11e10:	movgt	r0, #1
   11e14:	b	11de8 <__assert_fail@plt+0xe88>
   11e18:	lsl	r4, r4, #3
   11e1c:	add	r5, r4, #1
   11e20:	mov	r0, r5
   11e24:	bl	148f0 <__assert_fail@plt+0x3990>
   11e28:	cmp	r0, #0
   11e2c:	mov	r2, r0
   11e30:	str	r0, [r7]
   11e34:	beq	11e00 <__assert_fail@plt+0xea0>
   11e38:	mov	r3, r5
   11e3c:	mov	r1, r6
   11e40:	mov	r0, r8
   11e44:	bl	11bc8 <__assert_fail@plt+0xc68>
   11e48:	mov	r5, r4
   11e4c:	b	11e00 <__assert_fail@plt+0xea0>
   11e50:	ldr	r3, [pc, #12]	; 11e64 <__assert_fail@plt+0xf04>
   11e54:	ldrb	r0, [r3, r0]
   11e58:	eor	r0, r0, #128	; 0x80
   11e5c:	lsr	r0, r0, #7
   11e60:	bx	lr
   11e64:	andeq	r5, r1, ip, lsr #17
   11e68:	mov	r3, #0
   11e6c:	str	r3, [r0]
   11e70:	bx	lr
   11e74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e78:	sub	sp, sp, #28
   11e7c:	subs	r6, r0, #0
   11e80:	ldr	sl, [sp, #64]	; 0x40
   11e84:	str	r3, [sp, #12]
   11e88:	clzne	r8, r2
   11e8c:	ldr	r3, [sl]
   11e90:	lsrne	r8, r8, #5
   11e94:	str	r3, [sp, #20]
   11e98:	movne	r3, #1
   11e9c:	moveq	r3, #0
   11ea0:	str	r3, [sp]
   11ea4:	ldrne	r3, [r6]
   11ea8:	moveq	r8, r6
   11eac:	strne	r3, [sp, #4]
   11eb0:	ldr	r3, [sp]
   11eb4:	eor	r8, r8, #1
   11eb8:	mov	r9, r1
   11ebc:	mov	r7, r2
   11ec0:	and	r3, r3, r8
   11ec4:	streq	r6, [sp, #4]
   11ec8:	str	r3, [sp, #8]
   11ecc:	ldr	r3, [sp, #4]
   11ed0:	cmp	r3, #0
   11ed4:	movne	r3, #0
   11ed8:	andeq	r3, r8, #1
   11edc:	cmp	r3, #0
   11ee0:	moveq	r5, r7
   11ee4:	ldreq	fp, [sp, #20]
   11ee8:	moveq	r4, r9
   11eec:	beq	11f20 <__assert_fail@plt+0xfc0>
   11ef0:	mov	r4, r9
   11ef4:	sub	r5, r7, r4
   11ef8:	add	r5, r9, r5
   11efc:	add	r3, sp, #20
   11f00:	add	r2, sp, #12
   11f04:	mov	r1, r5
   11f08:	mov	r0, r4
   11f0c:	ldr	fp, [sp, #20]
   11f10:	bl	119e8 <__assert_fail@plt+0xa88>
   11f14:	cmp	r0, #0
   11f18:	addne	r4, r4, #8
   11f1c:	bne	11ef4 <__assert_fail@plt+0xf94>
   11f20:	cmp	r5, #0
   11f24:	movne	r3, #0
   11f28:	andeq	r3, r8, #1
   11f2c:	cmp	r3, #0
   11f30:	bne	12054 <__assert_fail@plt+0x10f4>
   11f34:	cmp	r5, #0
   11f38:	beq	11f60 <__assert_fail@plt+0x1000>
   11f3c:	ldrb	r3, [r4]
   11f40:	ldr	r2, [sp]
   11f44:	cmp	r3, #10
   11f48:	movne	r2, #0
   11f4c:	andeq	r2, r2, #1
   11f50:	cmp	r2, #0
   11f54:	subne	r7, r5, #1
   11f58:	addne	r4, r4, #1
   11f5c:	bne	12044 <__assert_fail@plt+0x10e4>
   11f60:	ldr	r3, [sp, #20]
   11f64:	cmp	r6, #0
   11f68:	sub	r2, fp, r3
   11f6c:	ldr	r3, [sp, #12]
   11f70:	str	fp, [sp, #20]
   11f74:	sub	r3, r3, r2
   11f78:	str	r3, [sp, #12]
   11f7c:	add	r7, r4, r5
   11f80:	beq	1204c <__assert_fail@plt+0x10ec>
   11f84:	ldr	r3, [r6]
   11f88:	cmp	r3, #8
   11f8c:	moveq	r3, #0
   11f90:	streq	r3, [r6]
   11f94:	cmp	r5, #7
   11f98:	ldr	r3, [r6]
   11f9c:	clz	r3, r3
   11fa0:	lsr	r3, r3, #5
   11fa4:	movle	r3, #0
   11fa8:	cmp	r3, #0
   11fac:	beq	11fd4 <__assert_fail@plt+0x1074>
   11fb0:	mov	r0, r4
   11fb4:	mov	r2, #8
   11fb8:	mov	r1, #10
   11fbc:	bl	10eb8 <memchr@plt>
   11fc0:	cmp	r0, #0
   11fc4:	moveq	r0, r4
   11fc8:	moveq	r5, #8
   11fcc:	addeq	r4, r4, #8
   11fd0:	beq	12028 <__assert_fail@plt+0x10c8>
   11fd4:	cmp	r7, r4
   11fd8:	bls	12004 <__assert_fail@plt+0x10a4>
   11fdc:	ldrb	r1, [r4], #1
   11fe0:	cmp	r1, #10
   11fe4:	beq	11fd4 <__assert_fail@plt+0x1074>
   11fe8:	ldr	r0, [r6]
   11fec:	mov	r3, r6
   11ff0:	add	r2, r0, #1
   11ff4:	cmp	r2, #8
   11ff8:	str	r2, [r3], r0
   11ffc:	strb	r1, [r3, #4]
   12000:	bne	11fd4 <__assert_fail@plt+0x1074>
   12004:	mov	r0, r6
   12008:	ldr	r5, [r0], #4
   1200c:	cmp	r5, #0
   12010:	beq	12054 <__assert_fail@plt+0x10f4>
   12014:	cmp	r5, #7
   12018:	bgt	12028 <__assert_fail@plt+0x10c8>
   1201c:	ldr	r3, [sp, #8]
   12020:	cmp	r3, #0
   12024:	bne	12054 <__assert_fail@plt+0x10f4>
   12028:	add	r3, sp, #20
   1202c:	add	r2, sp, #12
   12030:	mov	r1, r5
   12034:	bl	119e8 <__assert_fail@plt+0xa88>
   12038:	cmp	r0, #0
   1203c:	beq	12058 <__assert_fail@plt+0x10f8>
   12040:	sub	r7, r7, r4
   12044:	mov	r9, r4
   12048:	b	11ecc <__assert_fail@plt+0xf6c>
   1204c:	mov	r0, r4
   12050:	b	1200c <__assert_fail@plt+0x10ac>
   12054:	mov	r5, #0
   12058:	ldr	r3, [sl]
   1205c:	ldr	r2, [sp, #20]
   12060:	clz	r0, r5
   12064:	sub	r3, r3, r2
   12068:	lsr	r0, r0, #5
   1206c:	str	r3, [sl]
   12070:	add	sp, sp, #28
   12074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12078:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1207c:	mov	r7, r0
   12080:	asr	r0, r2, #3
   12084:	add	r0, r0, #1
   12088:	mov	r5, r3
   1208c:	add	r0, r0, r0, lsl #2
   12090:	mov	r8, r1
   12094:	mov	r4, r2
   12098:	ldr	r6, [sp, #40]	; 0x28
   1209c:	str	r0, [sp, #12]
   120a0:	bl	148f0 <__assert_fail@plt+0x3990>
   120a4:	cmp	r0, #0
   120a8:	str	r0, [r5]
   120ac:	bne	120c0 <__assert_fail@plt+0x1160>
   120b0:	mov	r4, #1
   120b4:	mov	r0, r4
   120b8:	add	sp, sp, #16
   120bc:	pop	{r4, r5, r6, r7, r8, pc}
   120c0:	add	r2, sp, #12
   120c4:	mov	r3, r0
   120c8:	str	r2, [sp]
   120cc:	mov	r1, r8
   120d0:	mov	r2, r4
   120d4:	mov	r0, r7
   120d8:	bl	11e74 <__assert_fail@plt+0xf14>
   120dc:	subs	r4, r0, #0
   120e0:	bne	120f4 <__assert_fail@plt+0x1194>
   120e4:	ldr	r0, [r5]
   120e8:	bl	12340 <__assert_fail@plt+0x13e0>
   120ec:	str	r4, [r5]
   120f0:	b	120b4 <__assert_fail@plt+0x1154>
   120f4:	cmp	r6, #0
   120f8:	beq	120b0 <__assert_fail@plt+0x1150>
   120fc:	ldr	r3, [sp, #12]
   12100:	str	r3, [r6]
   12104:	b	120b4 <__assert_fail@plt+0x1154>
   12108:	ldr	r3, [pc, #4]	; 12114 <__assert_fail@plt+0x11b4>
   1210c:	str	r0, [r3]
   12110:	bx	lr
   12114:	andeq	r6, r2, r0, ror #2
   12118:	ldr	r3, [pc, #4]	; 12124 <__assert_fail@plt+0x11c4>
   1211c:	strb	r0, [r3, #4]
   12120:	bx	lr
   12124:	andeq	r6, r2, r0, ror #2
   12128:	ldr	r3, [pc, #192]	; 121f0 <__assert_fail@plt+0x1290>
   1212c:	push	{r0, r1, r4, r5, r6, lr}
   12130:	ldr	r0, [r3]
   12134:	bl	1498c <__assert_fail@plt+0x3a2c>
   12138:	cmp	r0, #0
   1213c:	beq	121d4 <__assert_fail@plt+0x1274>
   12140:	ldr	r3, [pc, #172]	; 121f4 <__assert_fail@plt+0x1294>
   12144:	mov	r4, r3
   12148:	ldrb	r2, [r3, #4]
   1214c:	cmp	r2, #0
   12150:	beq	12164 <__assert_fail@plt+0x1204>
   12154:	bl	10e70 <__errno_location@plt>
   12158:	ldr	r3, [r0]
   1215c:	cmp	r3, #32
   12160:	beq	121d4 <__assert_fail@plt+0x1274>
   12164:	mov	r2, #5
   12168:	ldr	r1, [pc, #136]	; 121f8 <__assert_fail@plt+0x1298>
   1216c:	mov	r0, #0
   12170:	bl	10d8c <dcgettext@plt>
   12174:	ldr	r4, [r4]
   12178:	cmp	r4, #0
   1217c:	mov	r5, r0
   12180:	beq	121b8 <__assert_fail@plt+0x1258>
   12184:	bl	10e70 <__errno_location@plt>
   12188:	ldr	r6, [r0]
   1218c:	mov	r0, r4
   12190:	bl	13908 <__assert_fail@plt+0x29a8>
   12194:	str	r5, [sp]
   12198:	ldr	r2, [pc, #92]	; 121fc <__assert_fail@plt+0x129c>
   1219c:	mov	r1, r6
   121a0:	mov	r3, r0
   121a4:	mov	r0, #0
   121a8:	bl	10df8 <error@plt>
   121ac:	ldr	r3, [pc, #76]	; 12200 <__assert_fail@plt+0x12a0>
   121b0:	ldr	r0, [r3]
   121b4:	bl	10d44 <_exit@plt>
   121b8:	bl	10e70 <__errno_location@plt>
   121bc:	mov	r3, r5
   121c0:	ldr	r2, [pc, #60]	; 12204 <__assert_fail@plt+0x12a4>
   121c4:	ldr	r1, [r0]
   121c8:	mov	r0, r4
   121cc:	bl	10df8 <error@plt>
   121d0:	b	121ac <__assert_fail@plt+0x124c>
   121d4:	ldr	r3, [pc, #44]	; 12208 <__assert_fail@plt+0x12a8>
   121d8:	ldr	r0, [r3]
   121dc:	bl	1498c <__assert_fail@plt+0x3a2c>
   121e0:	cmp	r0, #0
   121e4:	bne	121ac <__assert_fail@plt+0x124c>
   121e8:	add	sp, sp, #8
   121ec:	pop	{r4, r5, r6, pc}
   121f0:	andeq	r6, r2, r4, asr r1
   121f4:	andeq	r6, r2, r0, ror #2
   121f8:	strdeq	r5, [r1], -ip
   121fc:	andeq	r5, r1, r1, asr #15
   12200:	strdeq	r6, [r2], -r4
   12204:	andeq	r5, r1, r5, asr #15
   12208:	andeq	r6, r2, r8, asr #2
   1220c:	push	{r4, r5}
   12210:	pop	{r4, r5}
   12214:	b	10d14 <posix_fadvise64@plt>
   12218:	cmp	r0, #0
   1221c:	bxeq	lr
   12220:	push	{r0, r1, r2, r3, r4, lr}
   12224:	mov	r4, r1
   12228:	bl	10ea0 <fileno@plt>
   1222c:	mov	r2, #0
   12230:	mov	r3, #0
   12234:	str	r4, [sp, #8]
   12238:	strd	r2, [sp]
   1223c:	bl	10d14 <posix_fadvise64@plt>
   12240:	add	sp, sp, #16
   12244:	pop	{r4, pc}
   12248:	push	{r0, r1, r2, r4, r5, lr}
   1224c:	mov	r4, r0
   12250:	bl	10ea0 <fileno@plt>
   12254:	cmp	r0, #0
   12258:	mov	r0, r4
   1225c:	bge	1226c <__assert_fail@plt+0x130c>
   12260:	add	sp, sp, #12
   12264:	pop	{r4, r5, lr}
   12268:	b	10ed0 <fclose@plt>
   1226c:	bl	10e1c <__freading@plt>
   12270:	cmp	r0, #0
   12274:	bne	122b0 <__assert_fail@plt+0x1350>
   12278:	mov	r0, r4
   1227c:	bl	122f0 <__assert_fail@plt+0x1390>
   12280:	cmp	r0, #0
   12284:	bne	122e4 <__assert_fail@plt+0x1384>
   12288:	mov	r5, #0
   1228c:	mov	r0, r4
   12290:	bl	10ed0 <fclose@plt>
   12294:	cmp	r5, #0
   12298:	beq	122a8 <__assert_fail@plt+0x1348>
   1229c:	bl	10e70 <__errno_location@plt>
   122a0:	str	r5, [r0]
   122a4:	mvn	r0, #0
   122a8:	add	sp, sp, #12
   122ac:	pop	{r4, r5, pc}
   122b0:	mov	r0, r4
   122b4:	bl	10ea0 <fileno@plt>
   122b8:	mov	r3, #1
   122bc:	str	r3, [sp]
   122c0:	mov	r2, #0
   122c4:	mov	r3, #0
   122c8:	bl	10dbc <lseek64@plt>
   122cc:	mvn	r3, #0
   122d0:	mvn	r2, #0
   122d4:	cmp	r1, r3
   122d8:	cmpeq	r0, r2
   122dc:	bne	12278 <__assert_fail@plt+0x1318>
   122e0:	b	12288 <__assert_fail@plt+0x1328>
   122e4:	bl	10e70 <__errno_location@plt>
   122e8:	ldr	r5, [r0]
   122ec:	b	1228c <__assert_fail@plt+0x132c>
   122f0:	push	{r0, r1, r4, lr}
   122f4:	subs	r4, r0, #0
   122f8:	bne	1230c <__assert_fail@plt+0x13ac>
   122fc:	mov	r0, r4
   12300:	add	sp, sp, #8
   12304:	pop	{r4, lr}
   12308:	b	10d20 <fflush@plt>
   1230c:	bl	10e1c <__freading@plt>
   12310:	cmp	r0, #0
   12314:	beq	122fc <__assert_fail@plt+0x139c>
   12318:	ldr	r3, [r4]
   1231c:	tst	r3, #256	; 0x100
   12320:	beq	122fc <__assert_fail@plt+0x139c>
   12324:	mov	r3, #1
   12328:	str	r3, [sp]
   1232c:	mov	r2, #0
   12330:	mov	r3, #0
   12334:	mov	r0, r4
   12338:	bl	12394 <__assert_fail@plt+0x1434>
   1233c:	b	122fc <__assert_fail@plt+0x139c>
   12340:	push	{r0, r1, r2, r4, r5, lr}
   12344:	mov	r5, r0
   12348:	bl	10e70 <__errno_location@plt>
   1234c:	ldr	r3, [r0]
   12350:	mov	r4, r0
   12354:	str	r3, [sp]
   12358:	str	r3, [sp, #4]
   1235c:	mov	r3, #0
   12360:	str	r3, [r0]
   12364:	mov	r0, r5
   12368:	bl	10d38 <free@plt>
   1236c:	ldr	r3, [r4]
   12370:	add	r2, sp, #8
   12374:	cmp	r3, #0
   12378:	moveq	r3, #4
   1237c:	movne	r3, #0
   12380:	add	r3, r2, r3
   12384:	ldr	r3, [r3, #-8]
   12388:	str	r3, [r4]
   1238c:	add	sp, sp, #12
   12390:	pop	{r4, r5, pc}
   12394:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   12398:	mov	r4, r0
   1239c:	ldmib	r0, {ip, lr}
   123a0:	ldr	r8, [sp, #32]
   123a4:	cmp	lr, ip
   123a8:	bne	12414 <__assert_fail@plt+0x14b4>
   123ac:	ldr	lr, [r0, #20]
   123b0:	ldr	ip, [r0, #16]
   123b4:	cmp	lr, ip
   123b8:	bne	12414 <__assert_fail@plt+0x14b4>
   123bc:	ldr	r5, [r0, #36]	; 0x24
   123c0:	cmp	r5, #0
   123c4:	bne	12414 <__assert_fail@plt+0x14b4>
   123c8:	mov	r6, r2
   123cc:	mov	r7, r3
   123d0:	bl	10ea0 <fileno@plt>
   123d4:	mov	r2, r6
   123d8:	mov	r3, r7
   123dc:	str	r8, [sp]
   123e0:	bl	10dbc <lseek64@plt>
   123e4:	mvn	r3, #0
   123e8:	mvn	r2, #0
   123ec:	cmp	r1, r3
   123f0:	cmpeq	r0, r2
   123f4:	mvneq	r0, #0
   123f8:	ldrne	r3, [r4]
   123fc:	strdne	r0, [r4, #80]	; 0x50
   12400:	movne	r0, r5
   12404:	bicne	r3, r3, #16
   12408:	strne	r3, [r4]
   1240c:	add	sp, sp, #8
   12410:	pop	{r4, r5, r6, r7, r8, pc}
   12414:	str	r8, [sp, #32]
   12418:	mov	r0, r4
   1241c:	add	sp, sp, #8
   12420:	pop	{r4, r5, r6, r7, r8, lr}
   12424:	b	10edc <fseeko64@plt>
   12428:	push	{r4, r5, r6, lr}
   1242c:	subs	r5, r0, #0
   12430:	bne	12448 <__assert_fail@plt+0x14e8>
   12434:	ldr	r3, [pc, #124]	; 124b8 <__assert_fail@plt+0x1558>
   12438:	ldr	r0, [pc, #124]	; 124bc <__assert_fail@plt+0x155c>
   1243c:	ldr	r1, [r3]
   12440:	bl	10f30 <fputs@plt>
   12444:	bl	10f48 <abort@plt>
   12448:	mov	r1, #47	; 0x2f
   1244c:	bl	10ef4 <strrchr@plt>
   12450:	cmp	r0, #0
   12454:	addne	r4, r0, #1
   12458:	moveq	r4, r5
   1245c:	sub	r3, r4, r5
   12460:	cmp	r3, #6
   12464:	ble	124a4 <__assert_fail@plt+0x1544>
   12468:	mov	r2, #7
   1246c:	ldr	r1, [pc, #76]	; 124c0 <__assert_fail@plt+0x1560>
   12470:	sub	r0, r4, #7
   12474:	bl	10f3c <strncmp@plt>
   12478:	cmp	r0, #0
   1247c:	bne	124a4 <__assert_fail@plt+0x1544>
   12480:	mov	r2, #3
   12484:	ldr	r1, [pc, #56]	; 124c4 <__assert_fail@plt+0x1564>
   12488:	mov	r0, r4
   1248c:	bl	10f3c <strncmp@plt>
   12490:	cmp	r0, #0
   12494:	movne	r5, r4
   12498:	ldreq	r3, [pc, #40]	; 124c8 <__assert_fail@plt+0x1568>
   1249c:	addeq	r5, r4, #3
   124a0:	streq	r5, [r3]
   124a4:	ldr	r3, [pc, #32]	; 124cc <__assert_fail@plt+0x156c>
   124a8:	str	r5, [r3]
   124ac:	ldr	r3, [pc, #28]	; 124d0 <__assert_fail@plt+0x1570>
   124b0:	str	r5, [r3]
   124b4:	pop	{r4, r5, r6, pc}
   124b8:	andeq	r6, r2, r8, asr #2
   124bc:	andeq	r5, r1, ip, asr #19
   124c0:	andeq	r5, r1, r4, lsl #20
   124c4:	andeq	r5, r1, ip, lsl #20
   124c8:	andeq	r6, r2, r8, lsr r1
   124cc:	andeq	r6, r2, r8, ror #2
   124d0:	andeq	r6, r2, ip, lsr r1
   124d4:	push	{r4, r5, r6, lr}
   124d8:	mov	r2, #48	; 0x30
   124dc:	mov	r5, r1
   124e0:	mov	r1, #0
   124e4:	mov	r4, r0
   124e8:	bl	10e88 <memset@plt>
   124ec:	cmp	r5, #10
   124f0:	bne	124f8 <__assert_fail@plt+0x1598>
   124f4:	bl	10f48 <abort@plt>
   124f8:	str	r5, [r4]
   124fc:	mov	r0, r4
   12500:	pop	{r4, r5, r6, pc}
   12504:	push	{r4, r5, r6, lr}
   12508:	mov	r4, r0
   1250c:	mov	r5, r1
   12510:	bl	149fc <__assert_fail@plt+0x3a9c>
   12514:	ldrb	r3, [r0]
   12518:	bic	r3, r3, #32
   1251c:	cmp	r3, #85	; 0x55
   12520:	bne	12590 <__assert_fail@plt+0x1630>
   12524:	ldrb	r3, [r0, #1]
   12528:	bic	r3, r3, #32
   1252c:	cmp	r3, #84	; 0x54
   12530:	bne	12568 <__assert_fail@plt+0x1608>
   12534:	ldrb	r3, [r0, #2]
   12538:	bic	r3, r3, #32
   1253c:	cmp	r3, #70	; 0x46
   12540:	bne	12568 <__assert_fail@plt+0x1608>
   12544:	ldrb	r3, [r0, #3]
   12548:	cmp	r3, #45	; 0x2d
   1254c:	bne	12568 <__assert_fail@plt+0x1608>
   12550:	ldrb	r3, [r0, #4]
   12554:	cmp	r3, #56	; 0x38
   12558:	bne	12568 <__assert_fail@plt+0x1608>
   1255c:	ldrb	r3, [r0, #5]
   12560:	cmp	r3, #0
   12564:	beq	1257c <__assert_fail@plt+0x161c>
   12568:	ldr	r1, [pc, #144]	; 12600 <__assert_fail@plt+0x16a0>
   1256c:	ldr	r0, [pc, #144]	; 12604 <__assert_fail@plt+0x16a4>
   12570:	cmp	r5, #9
   12574:	movne	r0, r1
   12578:	pop	{r4, r5, r6, pc}
   1257c:	ldrb	r3, [r4]
   12580:	ldr	r1, [pc, #128]	; 12608 <__assert_fail@plt+0x16a8>
   12584:	ldr	r0, [pc, #128]	; 1260c <__assert_fail@plt+0x16ac>
   12588:	cmp	r3, #96	; 0x60
   1258c:	b	12574 <__assert_fail@plt+0x1614>
   12590:	cmp	r3, #71	; 0x47
   12594:	bne	12568 <__assert_fail@plt+0x1608>
   12598:	ldrb	r3, [r0, #1]
   1259c:	bic	r3, r3, #32
   125a0:	cmp	r3, #66	; 0x42
   125a4:	bne	12568 <__assert_fail@plt+0x1608>
   125a8:	ldrb	r3, [r0, #2]
   125ac:	cmp	r3, #49	; 0x31
   125b0:	bne	12568 <__assert_fail@plt+0x1608>
   125b4:	ldrb	r3, [r0, #3]
   125b8:	cmp	r3, #56	; 0x38
   125bc:	bne	12568 <__assert_fail@plt+0x1608>
   125c0:	ldrb	r3, [r0, #4]
   125c4:	cmp	r3, #48	; 0x30
   125c8:	bne	12568 <__assert_fail@plt+0x1608>
   125cc:	ldrb	r3, [r0, #5]
   125d0:	cmp	r3, #51	; 0x33
   125d4:	bne	12568 <__assert_fail@plt+0x1608>
   125d8:	ldrb	r3, [r0, #6]
   125dc:	cmp	r3, #48	; 0x30
   125e0:	bne	12568 <__assert_fail@plt+0x1608>
   125e4:	ldrb	r3, [r0, #7]
   125e8:	cmp	r3, #0
   125ec:	bne	12568 <__assert_fail@plt+0x1608>
   125f0:	ldrb	r3, [r4]
   125f4:	ldr	r1, [pc, #20]	; 12610 <__assert_fail@plt+0x16b0>
   125f8:	ldr	r0, [pc, #20]	; 12614 <__assert_fail@plt+0x16b4>
   125fc:	b	12588 <__assert_fail@plt+0x1628>
   12600:	andeq	r5, r1, r5, ror sl
   12604:	andeq	r5, r1, r3, ror sl
   12608:	andeq	r5, r1, r8, ror #20
   1260c:	andeq	r5, r1, r4, ror #20
   12610:	andeq	r5, r1, r0, ror sl
   12614:	andeq	r5, r1, ip, ror #20
   12618:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1261c:	sub	sp, sp, #108	; 0x6c
   12620:	mov	r8, r0
   12624:	str	r3, [sp, #36]	; 0x24
   12628:	mov	r5, r1
   1262c:	str	r2, [sp, #44]	; 0x2c
   12630:	ldr	sl, [sp, #144]	; 0x90
   12634:	bl	10dc8 <__ctype_get_mb_cur_max@plt>
   12638:	ldr	r3, [sp, #148]	; 0x94
   1263c:	mov	r7, #0
   12640:	str	r7, [sp, #48]	; 0x30
   12644:	lsr	r6, r3, #1
   12648:	and	r6, r6, #1
   1264c:	mov	r3, #1
   12650:	str	r3, [sp, #72]	; 0x48
   12654:	str	r7, [sp, #24]
   12658:	str	r7, [sp, #32]
   1265c:	str	r7, [sp, #40]	; 0x28
   12660:	str	r7, [sp, #60]	; 0x3c
   12664:	str	r0, [sp, #76]	; 0x4c
   12668:	cmp	sl, #10
   1266c:	ldrls	pc, [pc, sl, lsl #2]
   12670:	b	128ac <__assert_fail@plt+0x194c>
   12674:	andeq	r2, r1, r0, lsr #13
   12678:	andeq	r3, r1, r4, lsr r3
   1267c:	andeq	r2, r1, r8, ror r8
   12680:	andeq	r2, r1, r4, asr #17
   12684:	andeq	r2, r1, r4, asr r8
   12688:	andeq	r2, r1, ip, lsr #13
   1268c:	andeq	r3, r1, r4, lsl r3
   12690:			; <UNDEFINED> instruction: 0x000128b0
   12694:	andeq	r2, r1, r4, lsr #15
   12698:	andeq	r2, r1, r4, lsr #15
   1269c:	andeq	r2, r1, r4, lsr #15
   126a0:	mov	r6, #0
   126a4:	mov	r4, #0
   126a8:	b	126d8 <__assert_fail@plt+0x1778>
   126ac:	cmp	r6, #0
   126b0:	bne	128d4 <__assert_fail@plt+0x1974>
   126b4:	cmp	r5, #0
   126b8:	movne	r3, #34	; 0x22
   126bc:	strbne	r3, [r8]
   126c0:	mov	r3, #1
   126c4:	str	r3, [sp, #24]
   126c8:	str	r3, [sp, #32]
   126cc:	mov	r4, #1
   126d0:	ldr	r3, [pc, #3172]	; 1333c <__assert_fail@plt+0x23dc>
   126d4:	str	r3, [sp, #40]	; 0x28
   126d8:	mov	r9, r5
   126dc:	mov	r3, #0
   126e0:	str	r7, [sp, #68]	; 0x44
   126e4:	str	r3, [sp, #28]
   126e8:	ldr	r3, [sp, #36]	; 0x24
   126ec:	cmn	r3, #1
   126f0:	bne	13280 <__assert_fail@plt+0x2320>
   126f4:	ldr	r3, [sp, #44]	; 0x2c
   126f8:	ldr	r2, [sp, #28]
   126fc:	ldrb	r3, [r3, r2]
   12700:	adds	r3, r3, #0
   12704:	movne	r3, #1
   12708:	str	r3, [sp, #52]	; 0x34
   1270c:	ldr	r3, [sp, #52]	; 0x34
   12710:	cmp	r3, #0
   12714:	bne	128fc <__assert_fail@plt+0x199c>
   12718:	sub	r2, sl, #2
   1271c:	clz	r2, r2
   12720:	lsr	r2, r2, #5
   12724:	and	r3, r6, r2
   12728:	cmp	r4, #0
   1272c:	movne	r3, #0
   12730:	andeq	r3, r3, #1
   12734:	cmp	r3, #0
   12738:	bne	12ac4 <__assert_fail@plt+0x1b64>
   1273c:	eor	r3, r6, #1
   12740:	ands	r2, r2, r3
   12744:	beq	132b8 <__assert_fail@plt+0x2358>
   12748:	ldr	r3, [sp, #68]	; 0x44
   1274c:	cmp	r3, #0
   12750:	beq	132f0 <__assert_fail@plt+0x2390>
   12754:	ldr	r3, [sp, #72]	; 0x48
   12758:	cmp	r3, #0
   1275c:	beq	13294 <__assert_fail@plt+0x2334>
   12760:	ldr	r3, [sp, #160]	; 0xa0
   12764:	ldr	r2, [sp, #44]	; 0x2c
   12768:	str	r3, [sp, #16]
   1276c:	ldr	r3, [sp, #156]	; 0x9c
   12770:	ldr	r1, [sp, #60]	; 0x3c
   12774:	str	r3, [sp, #12]
   12778:	ldr	r3, [sp, #152]	; 0x98
   1277c:	str	r3, [sp, #8]
   12780:	ldr	r3, [sp, #148]	; 0x94
   12784:	str	r3, [sp, #4]
   12788:	mov	r3, #5
   1278c:	str	r3, [sp]
   12790:	ldr	r3, [sp, #36]	; 0x24
   12794:	mov	r0, r8
   12798:	bl	12618 <__assert_fail@plt+0x16b8>
   1279c:	mov	r4, r0
   127a0:	b	132e4 <__assert_fail@plt+0x2384>
   127a4:	cmp	sl, #10
   127a8:	beq	12804 <__assert_fail@plt+0x18a4>
   127ac:	ldr	r4, [pc, #2956]	; 13340 <__assert_fail@plt+0x23e0>
   127b0:	mov	r2, #5
   127b4:	mov	r1, r4
   127b8:	mov	r0, #0
   127bc:	bl	10d8c <dcgettext@plt>
   127c0:	cmp	r0, r4
   127c4:	str	r0, [sp, #156]	; 0x9c
   127c8:	bne	127d8 <__assert_fail@plt+0x1878>
   127cc:	mov	r1, sl
   127d0:	bl	12504 <__assert_fail@plt+0x15a4>
   127d4:	str	r0, [sp, #156]	; 0x9c
   127d8:	ldr	r4, [pc, #2916]	; 13344 <__assert_fail@plt+0x23e4>
   127dc:	mov	r2, #5
   127e0:	mov	r1, r4
   127e4:	mov	r0, #0
   127e8:	bl	10d8c <dcgettext@plt>
   127ec:	cmp	r0, r4
   127f0:	str	r0, [sp, #160]	; 0xa0
   127f4:	bne	12804 <__assert_fail@plt+0x18a4>
   127f8:	mov	r1, sl
   127fc:	bl	12504 <__assert_fail@plt+0x15a4>
   12800:	str	r0, [sp, #160]	; 0xa0
   12804:	cmp	r6, #0
   12808:	moveq	r4, r6
   1280c:	beq	12824 <__assert_fail@plt+0x18c4>
   12810:	mov	r4, #0
   12814:	b	12834 <__assert_fail@plt+0x18d4>
   12818:	cmp	r5, r4
   1281c:	strbhi	r3, [r8, r4]
   12820:	add	r4, r4, #1
   12824:	ldr	r3, [sp, #156]	; 0x9c
   12828:	ldrb	r3, [r3, r4]
   1282c:	cmp	r3, #0
   12830:	bne	12818 <__assert_fail@plt+0x18b8>
   12834:	ldr	r0, [sp, #160]	; 0xa0
   12838:	bl	10e58 <strlen@plt>
   1283c:	ldr	r3, [sp, #160]	; 0xa0
   12840:	str	r3, [sp, #40]	; 0x28
   12844:	mov	r3, #1
   12848:	str	r3, [sp, #24]
   1284c:	str	r0, [sp, #32]
   12850:	b	126d8 <__assert_fail@plt+0x1778>
   12854:	mov	r3, #1
   12858:	cmp	r6, #0
   1285c:	streq	r3, [sp, #24]
   12860:	beq	12880 <__assert_fail@plt+0x1920>
   12864:	str	r3, [sp, #32]
   12868:	ldr	r3, [pc, #2772]	; 13344 <__assert_fail@plt+0x23e4>
   1286c:	mov	r4, #0
   12870:	str	r3, [sp, #40]	; 0x28
   12874:	b	128a4 <__assert_fail@plt+0x1944>
   12878:	cmp	r6, #0
   1287c:	bne	128ec <__assert_fail@plt+0x198c>
   12880:	cmp	r5, #0
   12884:	movne	r3, #39	; 0x27
   12888:	strbne	r3, [r8]
   1288c:	mov	r3, #1
   12890:	str	r3, [sp, #32]
   12894:	mov	r6, #0
   12898:	ldr	r3, [pc, #2724]	; 13344 <__assert_fail@plt+0x23e4>
   1289c:	mov	r4, #1
   128a0:	str	r3, [sp, #40]	; 0x28
   128a4:	mov	sl, #2
   128a8:	b	126d8 <__assert_fail@plt+0x1778>
   128ac:	bl	10f48 <abort@plt>
   128b0:	mov	r6, #0
   128b4:	mov	r3, #1
   128b8:	str	r3, [sp, #24]
   128bc:	mov	r4, r6
   128c0:	b	126d8 <__assert_fail@plt+0x1778>
   128c4:	mov	r6, #1
   128c8:	str	r6, [sp, #24]
   128cc:	str	r6, [sp, #32]
   128d0:	b	12868 <__assert_fail@plt+0x1908>
   128d4:	mov	r3, #1
   128d8:	str	r3, [sp, #32]
   128dc:	ldr	r3, [pc, #2648]	; 1333c <__assert_fail@plt+0x23dc>
   128e0:	str	r6, [sp, #24]
   128e4:	str	r3, [sp, #40]	; 0x28
   128e8:	b	126a4 <__assert_fail@plt+0x1744>
   128ec:	mov	r3, #1
   128f0:	str	r3, [sp, #32]
   128f4:	ldr	r3, [pc, #2632]	; 13344 <__assert_fail@plt+0x23e4>
   128f8:	b	128e4 <__assert_fail@plt+0x1984>
   128fc:	ldr	r3, [sp, #32]
   12900:	ldr	fp, [sp, #24]
   12904:	cmp	sl, #2
   12908:	moveq	fp, #0
   1290c:	andne	fp, fp, #1
   12910:	adds	r5, r3, #0
   12914:	movne	r5, #1
   12918:	ands	r3, r5, fp
   1291c:	str	r3, [sp, #64]	; 0x40
   12920:	beq	129f0 <__assert_fail@plt+0x1a90>
   12924:	ldr	r2, [sp, #32]
   12928:	ldr	r3, [sp, #28]
   1292c:	add	r7, r3, r2
   12930:	mov	r3, r2
   12934:	ldr	r2, [sp, #36]	; 0x24
   12938:	cmp	r3, #1
   1293c:	movls	r3, #0
   12940:	movhi	r3, #1
   12944:	cmn	r2, #1
   12948:	movne	r3, #0
   1294c:	cmp	r3, #0
   12950:	beq	12960 <__assert_fail@plt+0x1a00>
   12954:	ldr	r0, [sp, #44]	; 0x2c
   12958:	bl	10e58 <strlen@plt>
   1295c:	str	r0, [sp, #36]	; 0x24
   12960:	ldr	r3, [sp, #36]	; 0x24
   12964:	cmp	r3, r7
   12968:	bcc	129e8 <__assert_fail@plt+0x1a88>
   1296c:	ldr	r3, [sp, #44]	; 0x2c
   12970:	ldr	r0, [sp, #28]
   12974:	ldr	r2, [sp, #32]
   12978:	ldr	r1, [sp, #40]	; 0x28
   1297c:	add	r0, r3, r0
   12980:	bl	10d74 <memcmp@plt>
   12984:	cmp	r0, #0
   12988:	bne	129e8 <__assert_fail@plt+0x1a88>
   1298c:	cmp	r6, #0
   12990:	beq	129f0 <__assert_fail@plt+0x1a90>
   12994:	str	r6, [sp, #24]
   12998:	ldr	r3, [sp, #24]
   1299c:	ldr	r2, [sp, #44]	; 0x2c
   129a0:	cmp	sl, #2
   129a4:	movne	r3, #0
   129a8:	andeq	r3, r3, #1
   129ac:	cmp	r3, #0
   129b0:	ldr	r3, [sp, #160]	; 0xa0
   129b4:	movne	sl, #4
   129b8:	str	r3, [sp, #16]
   129bc:	ldr	r3, [sp, #156]	; 0x9c
   129c0:	str	sl, [sp]
   129c4:	str	r3, [sp, #12]
   129c8:	mov	r3, #0
   129cc:	str	r3, [sp, #8]
   129d0:	ldr	r3, [sp, #148]	; 0x94
   129d4:	mov	r1, r9
   129d8:	bic	r3, r3, #2
   129dc:	str	r3, [sp, #4]
   129e0:	ldr	r3, [sp, #36]	; 0x24
   129e4:	b	12794 <__assert_fail@plt+0x1834>
   129e8:	mov	r3, #0
   129ec:	str	r3, [sp, #64]	; 0x40
   129f0:	ldr	r2, [sp, #28]
   129f4:	ldr	r3, [sp, #44]	; 0x2c
   129f8:	add	r3, r3, r2
   129fc:	str	r3, [sp, #80]	; 0x50
   12a00:	ldr	r3, [sp, #44]	; 0x2c
   12a04:	ldrb	r7, [r3, r2]
   12a08:	cmp	r7, #58	; 0x3a
   12a0c:	bhi	12b74 <__assert_fail@plt+0x1c14>
   12a10:	cmp	r7, #43	; 0x2b
   12a14:	bcs	12bc8 <__assert_fail@plt+0x1c68>
   12a18:	cmp	r7, #32
   12a1c:	beq	12c20 <__assert_fail@plt+0x1cc0>
   12a20:	bhi	12acc <__assert_fail@plt+0x1b6c>
   12a24:	cmp	r7, #9
   12a28:	beq	12ed4 <__assert_fail@plt+0x1f74>
   12a2c:	bhi	12a90 <__assert_fail@plt+0x1b30>
   12a30:	cmp	r7, #7
   12a34:	beq	12f80 <__assert_fail@plt+0x2020>
   12a38:	bhi	12c3c <__assert_fail@plt+0x1cdc>
   12a3c:	cmp	r7, #0
   12a40:	beq	12c58 <__assert_fail@plt+0x1cf8>
   12a44:	ldr	r3, [sp, #76]	; 0x4c
   12a48:	cmp	r3, #1
   12a4c:	bne	12fc4 <__assert_fail@plt+0x2064>
   12a50:	bl	10e40 <__ctype_b_loc@plt>
   12a54:	sxth	r3, r7
   12a58:	lsl	r3, r3, #1
   12a5c:	ldr	r2, [r0]
   12a60:	ldrh	r5, [r2, r3]
   12a64:	ldr	r3, [sp, #76]	; 0x4c
   12a68:	str	r3, [sp, #56]	; 0x38
   12a6c:	lsr	r5, r5, #14
   12a70:	and	r5, r5, #1
   12a74:	ldr	r3, [sp, #24]
   12a78:	eor	fp, r5, #1
   12a7c:	and	fp, fp, r3
   12a80:	ands	fp, fp, #255	; 0xff
   12a84:	beq	12e0c <__assert_fail@plt+0x1eac>
   12a88:	mov	r5, #0
   12a8c:	b	13070 <__assert_fail@plt+0x2110>
   12a90:	cmp	r7, #11
   12a94:	beq	12edc <__assert_fail@plt+0x1f7c>
   12a98:	bcc	12f78 <__assert_fail@plt+0x2018>
   12a9c:	cmp	r7, #12
   12aa0:	beq	12f88 <__assert_fail@plt+0x2028>
   12aa4:	cmp	r7, #13
   12aa8:	moveq	r3, #114	; 0x72
   12aac:	bne	12a44 <__assert_fail@plt+0x1ae4>
   12ab0:	cmp	sl, #2
   12ab4:	movne	r2, #0
   12ab8:	andeq	r2, r6, #1
   12abc:	cmp	r2, #0
   12ac0:	beq	12c40 <__assert_fail@plt+0x1ce0>
   12ac4:	mov	sl, #2
   12ac8:	b	12998 <__assert_fail@plt+0x1a38>
   12acc:	cmp	r7, #37	; 0x25
   12ad0:	beq	12bc8 <__assert_fail@plt+0x1c68>
   12ad4:	bhi	12ae8 <__assert_fail@plt+0x1b88>
   12ad8:	cmp	r7, #35	; 0x23
   12adc:	beq	12c14 <__assert_fail@plt+0x1cb4>
   12ae0:	mov	r5, #0
   12ae4:	b	12c24 <__assert_fail@plt+0x1cc4>
   12ae8:	cmp	r7, #39	; 0x27
   12aec:	bne	12ae0 <__assert_fail@plt+0x1b80>
   12af0:	cmp	sl, #2
   12af4:	ldrne	r5, [sp, #52]	; 0x34
   12af8:	movne	r3, r5
   12afc:	strne	r3, [sp, #68]	; 0x44
   12b00:	bne	12bcc <__assert_fail@plt+0x1c6c>
   12b04:	cmp	r6, #0
   12b08:	bne	12998 <__assert_fail@plt+0x1a38>
   12b0c:	ldr	r2, [sp, #60]	; 0x3c
   12b10:	adds	r3, r9, #0
   12b14:	movne	r3, #1
   12b18:	cmp	r2, #0
   12b1c:	movne	r3, #0
   12b20:	cmp	r3, #0
   12b24:	strne	r9, [sp, #60]	; 0x3c
   12b28:	movne	r9, #0
   12b2c:	bne	12b3c <__assert_fail@plt+0x1bdc>
   12b30:	cmp	r9, r4
   12b34:	movhi	r3, #39	; 0x27
   12b38:	strbhi	r3, [r8, r4]
   12b3c:	add	r3, r4, #1
   12b40:	cmp	r3, r9
   12b44:	movcc	r2, #92	; 0x5c
   12b48:	strbcc	r2, [r8, r3]
   12b4c:	add	r3, r4, #2
   12b50:	cmp	r3, r9
   12b54:	ldr	r5, [sp, #52]	; 0x34
   12b58:	movcc	r2, #39	; 0x27
   12b5c:	strbcc	r2, [r8, r3]
   12b60:	add	r4, r4, #3
   12b64:	mov	fp, r6
   12b68:	str	r5, [sp, #68]	; 0x44
   12b6c:	str	r6, [sp, #48]	; 0x30
   12b70:	b	12e0c <__assert_fail@plt+0x1eac>
   12b74:	cmp	r7, #94	; 0x5e
   12b78:	beq	12ae0 <__assert_fail@plt+0x1b80>
   12b7c:	bhi	12bd4 <__assert_fail@plt+0x1c74>
   12b80:	cmp	r7, #90	; 0x5a
   12b84:	bhi	12bbc <__assert_fail@plt+0x1c5c>
   12b88:	cmp	r7, #65	; 0x41
   12b8c:	bcs	12bc8 <__assert_fail@plt+0x1c68>
   12b90:	cmp	r7, #62	; 0x3e
   12b94:	bls	12ae0 <__assert_fail@plt+0x1b80>
   12b98:	cmp	r7, #63	; 0x3f
   12b9c:	bne	12a44 <__assert_fail@plt+0x1ae4>
   12ba0:	cmp	sl, #2
   12ba4:	beq	12d48 <__assert_fail@plt+0x1de8>
   12ba8:	cmp	sl, #5
   12bac:	beq	12d58 <__assert_fail@plt+0x1df8>
   12bb0:	mov	fp, #0
   12bb4:	mov	r5, fp
   12bb8:	b	12e0c <__assert_fail@plt+0x1eac>
   12bbc:	cmp	r7, #92	; 0x5c
   12bc0:	beq	12ee4 <__assert_fail@plt+0x1f84>
   12bc4:	bls	12ae0 <__assert_fail@plt+0x1b80>
   12bc8:	ldr	r5, [sp, #52]	; 0x34
   12bcc:	mov	fp, #0
   12bd0:	b	12e0c <__assert_fail@plt+0x1eac>
   12bd4:	cmp	r7, #122	; 0x7a
   12bd8:	bhi	12bf8 <__assert_fail@plt+0x1c98>
   12bdc:	cmp	r7, #97	; 0x61
   12be0:	bcs	12bc8 <__assert_fail@plt+0x1c68>
   12be4:	cmp	r7, #95	; 0x5f
   12be8:	beq	12bc8 <__assert_fail@plt+0x1c68>
   12bec:	cmp	r7, #96	; 0x60
   12bf0:	bne	12a44 <__assert_fail@plt+0x1ae4>
   12bf4:	b	12ae0 <__assert_fail@plt+0x1b80>
   12bf8:	cmp	r7, #124	; 0x7c
   12bfc:	beq	12ae0 <__assert_fail@plt+0x1b80>
   12c00:	bcc	12f90 <__assert_fail@plt+0x2030>
   12c04:	cmp	r7, #125	; 0x7d
   12c08:	beq	12f90 <__assert_fail@plt+0x2030>
   12c0c:	cmp	r7, #126	; 0x7e
   12c10:	bne	12a44 <__assert_fail@plt+0x1ae4>
   12c14:	ldr	r3, [sp, #28]
   12c18:	cmp	r3, #0
   12c1c:	bne	12d50 <__assert_fail@plt+0x1df0>
   12c20:	ldr	r5, [sp, #52]	; 0x34
   12c24:	cmp	sl, #2
   12c28:	movne	fp, #0
   12c2c:	andeq	fp, r6, #1
   12c30:	cmp	fp, #0
   12c34:	beq	12e0c <__assert_fail@plt+0x1eac>
   12c38:	b	12ac4 <__assert_fail@plt+0x1b64>
   12c3c:	mov	r3, #98	; 0x62
   12c40:	ldr	r2, [sp, #24]
   12c44:	cmp	r2, #0
   12c48:	beq	12d50 <__assert_fail@plt+0x1df0>
   12c4c:	mov	r7, r3
   12c50:	mov	r5, #0
   12c54:	b	12e64 <__assert_fail@plt+0x1f04>
   12c58:	ldr	r3, [sp, #24]
   12c5c:	cmp	r3, #0
   12c60:	beq	12d2c <__assert_fail@plt+0x1dcc>
   12c64:	cmp	r6, #0
   12c68:	bne	12994 <__assert_fail@plt+0x1a34>
   12c6c:	ldr	r3, [sp, #48]	; 0x30
   12c70:	eor	r2, r3, #1
   12c74:	cmp	sl, #2
   12c78:	movne	r2, #0
   12c7c:	andeq	r2, r2, #1
   12c80:	cmp	r2, #0
   12c84:	moveq	r3, r4
   12c88:	beq	12cc0 <__assert_fail@plt+0x1d60>
   12c8c:	cmp	r9, r4
   12c90:	movhi	r3, #39	; 0x27
   12c94:	strbhi	r3, [r8, r4]
   12c98:	add	r3, r4, #1
   12c9c:	cmp	r9, r3
   12ca0:	movhi	r1, #36	; 0x24
   12ca4:	strbhi	r1, [r8, r3]
   12ca8:	add	r3, r4, #2
   12cac:	cmp	r9, r3
   12cb0:	movhi	r1, #39	; 0x27
   12cb4:	strbhi	r1, [r8, r3]
   12cb8:	add	r3, r4, #3
   12cbc:	str	r2, [sp, #48]	; 0x30
   12cc0:	cmp	r9, r3
   12cc4:	movhi	r2, #92	; 0x5c
   12cc8:	strbhi	r2, [r8, r3]
   12ccc:	cmp	fp, #0
   12cd0:	add	r4, r3, #1
   12cd4:	beq	13264 <__assert_fail@plt+0x2304>
   12cd8:	ldr	r2, [sp, #28]
   12cdc:	ldr	r1, [sp, #36]	; 0x24
   12ce0:	add	r2, r2, #1
   12ce4:	cmp	r1, r2
   12ce8:	bls	12d24 <__assert_fail@plt+0x1dc4>
   12cec:	ldr	r1, [sp, #44]	; 0x2c
   12cf0:	mov	r7, #48	; 0x30
   12cf4:	ldrb	r2, [r1, r2]
   12cf8:	sub	r2, r2, #48	; 0x30
   12cfc:	cmp	r2, #9
   12d00:	movhi	r5, r6
   12d04:	bhi	12e0c <__assert_fail@plt+0x1eac>
   12d08:	cmp	r9, r4
   12d0c:	add	r2, r3, #2
   12d10:	strbhi	r7, [r8, r4]
   12d14:	cmp	r9, r2
   12d18:	add	r4, r3, #3
   12d1c:	movhi	r1, #48	; 0x30
   12d20:	strbhi	r1, [r8, r2]
   12d24:	mov	r5, r6
   12d28:	b	1326c <__assert_fail@plt+0x230c>
   12d2c:	ldr	r3, [sp, #148]	; 0x94
   12d30:	tst	r3, #1
   12d34:	ldreq	r5, [sp, #24]
   12d38:	beq	13278 <__assert_fail@plt+0x2318>
   12d3c:	ldr	r3, [sp, #28]
   12d40:	add	r3, r3, #1
   12d44:	b	126e4 <__assert_fail@plt+0x1784>
   12d48:	cmp	r6, #0
   12d4c:	bne	12998 <__assert_fail@plt+0x1a38>
   12d50:	mov	r5, #0
   12d54:	b	12bcc <__assert_fail@plt+0x1c6c>
   12d58:	ldr	r3, [sp, #148]	; 0x94
   12d5c:	tst	r3, #4
   12d60:	beq	12d50 <__assert_fail@plt+0x1df0>
   12d64:	ldr	r3, [sp, #28]
   12d68:	add	r2, r3, #2
   12d6c:	ldr	r3, [sp, #36]	; 0x24
   12d70:	cmp	r3, r2
   12d74:	bls	12d50 <__assert_fail@plt+0x1df0>
   12d78:	ldr	r3, [sp, #44]	; 0x2c
   12d7c:	ldr	r1, [sp, #28]
   12d80:	add	r3, r3, r1
   12d84:	ldrb	r0, [r3, #1]
   12d88:	cmp	r0, #63	; 0x3f
   12d8c:	bne	12d50 <__assert_fail@plt+0x1df0>
   12d90:	ldr	r3, [sp, #44]	; 0x2c
   12d94:	ldrb	r1, [r3, r2]
   12d98:	sub	r3, r1, #33	; 0x21
   12d9c:	uxtb	r3, r3
   12da0:	cmp	r3, #29
   12da4:	bhi	13274 <__assert_fail@plt+0x2314>
   12da8:	mov	ip, #1
   12dac:	ldr	r5, [pc, #1428]	; 13348 <__assert_fail@plt+0x23e8>
   12db0:	ands	r5, r5, ip, lsl r3
   12db4:	beq	12bcc <__assert_fail@plt+0x1c6c>
   12db8:	cmp	r6, #0
   12dbc:	bne	12998 <__assert_fail@plt+0x1a38>
   12dc0:	add	r3, r4, #1
   12dc4:	cmp	r9, r4
   12dc8:	strbhi	r0, [r8, r4]
   12dcc:	cmp	r9, r3
   12dd0:	movhi	r0, #34	; 0x22
   12dd4:	strbhi	r0, [r8, r3]
   12dd8:	add	r3, r4, #2
   12ddc:	cmp	r9, r3
   12de0:	movhi	r0, #34	; 0x22
   12de4:	strbhi	r0, [r8, r3]
   12de8:	add	r3, r4, #3
   12dec:	cmp	r9, r3
   12df0:	add	r4, r4, #4
   12df4:	mov	r5, r6
   12df8:	mov	fp, r6
   12dfc:	mov	r7, r1
   12e00:	movhi	r0, #63	; 0x3f
   12e04:	strbhi	r0, [r8, r3]
   12e08:	str	r2, [sp, #28]
   12e0c:	ldr	r3, [sp, #24]
   12e10:	eor	r3, r3, #1
   12e14:	cmp	sl, #2
   12e18:	orreq	r3, r3, #1
   12e1c:	eor	r3, r3, #1
   12e20:	orr	r3, r6, r3
   12e24:	tst	r3, #255	; 0xff
   12e28:	beq	12e58 <__assert_fail@plt+0x1ef8>
   12e2c:	ldr	r3, [sp, #152]	; 0x98
   12e30:	cmp	r3, #0
   12e34:	beq	12e58 <__assert_fail@plt+0x1ef8>
   12e38:	lsr	r2, r7, #5
   12e3c:	ldr	r1, [sp, #152]	; 0x98
   12e40:	uxtb	r2, r2
   12e44:	and	r3, r7, #31
   12e48:	ldr	r2, [r1, r2, lsl #2]
   12e4c:	lsr	r3, r2, r3
   12e50:	tst	r3, #1
   12e54:	bne	12e64 <__assert_fail@plt+0x1f04>
   12e58:	ldr	r3, [sp, #64]	; 0x40
   12e5c:	cmp	r3, #0
   12e60:	beq	12efc <__assert_fail@plt+0x1f9c>
   12e64:	cmp	r6, #0
   12e68:	bne	12998 <__assert_fail@plt+0x1a38>
   12e6c:	ldr	r3, [sp, #48]	; 0x30
   12e70:	eor	r3, r3, #1
   12e74:	cmp	sl, #2
   12e78:	movne	r3, #0
   12e7c:	andeq	r3, r3, #1
   12e80:	cmp	r3, #0
   12e84:	beq	12ebc <__assert_fail@plt+0x1f5c>
   12e88:	cmp	r9, r4
   12e8c:	movhi	r2, #39	; 0x27
   12e90:	strbhi	r2, [r8, r4]
   12e94:	add	r2, r4, #1
   12e98:	cmp	r9, r2
   12e9c:	movhi	r1, #36	; 0x24
   12ea0:	strbhi	r1, [r8, r2]
   12ea4:	add	r2, r4, #2
   12ea8:	cmp	r9, r2
   12eac:	add	r4, r4, #3
   12eb0:	movhi	r1, #39	; 0x27
   12eb4:	strbhi	r1, [r8, r2]
   12eb8:	str	r3, [sp, #48]	; 0x30
   12ebc:	cmp	r9, r4
   12ec0:	movhi	r3, #92	; 0x5c
   12ec4:	strbhi	r3, [r8, r4]
   12ec8:	ldr	fp, [sp, #52]	; 0x34
   12ecc:	add	r4, r4, #1
   12ed0:	b	12efc <__assert_fail@plt+0x1f9c>
   12ed4:	mov	r3, #116	; 0x74
   12ed8:	b	12ab0 <__assert_fail@plt+0x1b50>
   12edc:	mov	r3, #118	; 0x76
   12ee0:	b	12c40 <__assert_fail@plt+0x1ce0>
   12ee4:	cmp	sl, #2
   12ee8:	bne	12f58 <__assert_fail@plt+0x1ff8>
   12eec:	cmp	r6, #0
   12ef0:	bne	12998 <__assert_fail@plt+0x1a38>
   12ef4:	mov	r5, r6
   12ef8:	mov	fp, r6
   12efc:	ldr	r3, [sp, #48]	; 0x30
   12f00:	eor	fp, fp, #1
   12f04:	and	fp, fp, r3
   12f08:	tst	fp, #255	; 0xff
   12f0c:	beq	12f38 <__assert_fail@plt+0x1fd8>
   12f10:	cmp	r9, r4
   12f14:	movhi	r3, #39	; 0x27
   12f18:	strbhi	r3, [r8, r4]
   12f1c:	add	r3, r4, #1
   12f20:	cmp	r9, r3
   12f24:	movhi	r2, #39	; 0x27
   12f28:	add	r4, r4, #2
   12f2c:	strbhi	r2, [r8, r3]
   12f30:	mov	r3, #0
   12f34:	str	r3, [sp, #48]	; 0x30
   12f38:	cmp	r9, r4
   12f3c:	strbhi	r7, [r8, r4]
   12f40:	ldr	r3, [sp, #72]	; 0x48
   12f44:	cmp	r5, #0
   12f48:	moveq	r3, #0
   12f4c:	add	r4, r4, #1
   12f50:	str	r3, [sp, #72]	; 0x48
   12f54:	b	12d3c <__assert_fail@plt+0x1ddc>
   12f58:	ldr	r3, [sp, #24]
   12f5c:	and	r3, r3, r6
   12f60:	tst	r5, r3
   12f64:	moveq	r3, r7
   12f68:	beq	12ab0 <__assert_fail@plt+0x1b50>
   12f6c:	mov	fp, #0
   12f70:	mov	r5, fp
   12f74:	b	12efc <__assert_fail@plt+0x1f9c>
   12f78:	mov	r3, #110	; 0x6e
   12f7c:	b	12ab0 <__assert_fail@plt+0x1b50>
   12f80:	mov	r3, #97	; 0x61
   12f84:	b	12c40 <__assert_fail@plt+0x1ce0>
   12f88:	mov	r3, #102	; 0x66
   12f8c:	b	12c40 <__assert_fail@plt+0x1ce0>
   12f90:	ldr	r3, [sp, #36]	; 0x24
   12f94:	cmn	r3, #1
   12f98:	bne	12fb8 <__assert_fail@plt+0x2058>
   12f9c:	ldr	r3, [sp, #44]	; 0x2c
   12fa0:	ldrb	r3, [r3, #1]
   12fa4:	adds	r3, r3, #0
   12fa8:	movne	r3, #1
   12fac:	cmp	r3, #0
   12fb0:	bne	12d50 <__assert_fail@plt+0x1df0>
   12fb4:	b	12c14 <__assert_fail@plt+0x1cb4>
   12fb8:	ldr	r3, [sp, #36]	; 0x24
   12fbc:	subs	r3, r3, #1
   12fc0:	b	12fa8 <__assert_fail@plt+0x2048>
   12fc4:	mov	r3, #0
   12fc8:	str	r3, [sp, #96]	; 0x60
   12fcc:	str	r3, [sp, #100]	; 0x64
   12fd0:	ldr	r3, [sp, #36]	; 0x24
   12fd4:	cmn	r3, #1
   12fd8:	bne	12fe8 <__assert_fail@plt+0x2088>
   12fdc:	ldr	r0, [sp, #44]	; 0x2c
   12fe0:	bl	10e58 <strlen@plt>
   12fe4:	str	r0, [sp, #36]	; 0x24
   12fe8:	ldr	r5, [sp, #52]	; 0x34
   12fec:	mov	r3, #0
   12ff0:	str	r3, [sp, #56]	; 0x38
   12ff4:	ldr	r3, [sp, #28]
   12ff8:	ldr	r2, [sp, #56]	; 0x38
   12ffc:	ldr	r1, [sp, #36]	; 0x24
   13000:	add	r2, r3, r2
   13004:	ldr	r3, [sp, #44]	; 0x2c
   13008:	add	r0, sp, #92	; 0x5c
   1300c:	add	fp, r3, r2
   13010:	sub	r2, r1, r2
   13014:	add	r3, sp, #96	; 0x60
   13018:	mov	r1, fp
   1301c:	bl	14a30 <__assert_fail@plt+0x3ad0>
   13020:	subs	r2, r0, #0
   13024:	beq	13064 <__assert_fail@plt+0x2104>
   13028:	cmn	r2, #1
   1302c:	beq	1323c <__assert_fail@plt+0x22dc>
   13030:	cmn	r2, #2
   13034:	bne	131ac <__assert_fail@plt+0x224c>
   13038:	ldr	r2, [sp, #56]	; 0x38
   1303c:	ldr	r3, [sp, #28]
   13040:	add	r3, r3, r2
   13044:	ldr	r2, [sp, #36]	; 0x24
   13048:	cmp	r2, r3
   1304c:	bls	1323c <__assert_fail@plt+0x22dc>
   13050:	ldr	r3, [sp, #80]	; 0x50
   13054:	ldr	r2, [sp, #56]	; 0x38
   13058:	ldrb	r5, [r3, r2]
   1305c:	cmp	r5, #0
   13060:	bne	1319c <__assert_fail@plt+0x223c>
   13064:	ldr	r3, [sp, #56]	; 0x38
   13068:	cmp	r3, #1
   1306c:	bls	12a74 <__assert_fail@plt+0x1b14>
   13070:	ldr	r2, [sp, #56]	; 0x38
   13074:	ldr	r3, [sp, #28]
   13078:	mov	fp, #0
   1307c:	add	r3, r3, r2
   13080:	ldr	r2, [sp, #24]
   13084:	str	r3, [sp, #52]	; 0x34
   13088:	eor	r3, r5, #1
   1308c:	and	r3, r3, r2
   13090:	mov	ip, #92	; 0x5c
   13094:	uxtb	r3, r3
   13098:	mov	r2, #39	; 0x27
   1309c:	cmp	r3, #0
   130a0:	beq	13244 <__assert_fail@plt+0x22e4>
   130a4:	cmp	r6, #0
   130a8:	bne	12994 <__assert_fail@plt+0x1a34>
   130ac:	ldr	r1, [sp, #48]	; 0x30
   130b0:	eor	r1, r1, #1
   130b4:	cmp	sl, #2
   130b8:	movne	r1, #0
   130bc:	andeq	r1, r1, #1
   130c0:	cmp	r1, #0
   130c4:	beq	130f4 <__assert_fail@plt+0x2194>
   130c8:	add	r0, r4, #1
   130cc:	cmp	r9, r4
   130d0:	strbhi	r2, [r8, r4]
   130d4:	cmp	r9, r0
   130d8:	movhi	lr, #36	; 0x24
   130dc:	strbhi	lr, [r8, r0]
   130e0:	add	r0, r4, #2
   130e4:	add	r4, r4, #3
   130e8:	cmp	r9, r0
   130ec:	strbhi	r2, [r8, r0]
   130f0:	str	r1, [sp, #48]	; 0x30
   130f4:	add	r0, r4, #1
   130f8:	cmp	r9, r4
   130fc:	strbhi	ip, [r8, r4]
   13100:	cmp	r9, r0
   13104:	lsrhi	r1, r7, #6
   13108:	addhi	r1, r1, #48	; 0x30
   1310c:	strbhi	r1, [r8, r0]
   13110:	add	r0, r4, #2
   13114:	cmp	r9, r0
   13118:	lsrhi	r1, r7, #3
   1311c:	and	r7, r7, #7
   13120:	andhi	r1, r1, #7
   13124:	add	r4, r4, #3
   13128:	add	r7, r7, #48	; 0x30
   1312c:	mov	fp, r3
   13130:	addhi	r1, r1, #48	; 0x30
   13134:	strbhi	r1, [r8, r0]
   13138:	ldr	r1, [sp, #28]
   1313c:	ldr	r0, [sp, #52]	; 0x34
   13140:	add	r1, r1, #1
   13144:	cmp	r0, r1
   13148:	bls	12efc <__assert_fail@plt+0x1f9c>
   1314c:	ldr	lr, [sp, #48]	; 0x30
   13150:	eor	r0, fp, #1
   13154:	and	r0, r0, lr
   13158:	tst	r0, #255	; 0xff
   1315c:	beq	13180 <__assert_fail@plt+0x2220>
   13160:	add	r0, r4, #1
   13164:	cmp	r9, r4
   13168:	strbhi	r2, [r8, r4]
   1316c:	cmp	r9, r0
   13170:	add	r4, r4, #2
   13174:	strbhi	r2, [r8, r0]
   13178:	mov	r0, #0
   1317c:	str	r0, [sp, #48]	; 0x30
   13180:	ldr	r0, [sp, #44]	; 0x2c
   13184:	cmp	r9, r4
   13188:	strbhi	r7, [r8, r4]
   1318c:	str	r1, [sp, #28]
   13190:	add	r4, r4, #1
   13194:	ldrb	r7, [r0, r1]
   13198:	b	1309c <__assert_fail@plt+0x213c>
   1319c:	ldr	r3, [sp, #56]	; 0x38
   131a0:	add	r3, r3, #1
   131a4:	str	r3, [sp, #56]	; 0x38
   131a8:	b	13038 <__assert_fail@plt+0x20d8>
   131ac:	cmp	sl, #2
   131b0:	movne	r3, #0
   131b4:	andeq	r3, r6, #1
   131b8:	cmp	r3, #0
   131bc:	movne	r1, #1
   131c0:	bne	1321c <__assert_fail@plt+0x22bc>
   131c4:	ldr	r0, [sp, #92]	; 0x5c
   131c8:	str	r2, [sp, #84]	; 0x54
   131cc:	bl	10db0 <iswprint@plt>
   131d0:	ldr	r3, [sp, #56]	; 0x38
   131d4:	ldr	r2, [sp, #84]	; 0x54
   131d8:	add	r3, r3, r2
   131dc:	str	r3, [sp, #56]	; 0x38
   131e0:	cmp	r0, #0
   131e4:	add	r0, sp, #96	; 0x60
   131e8:	moveq	r5, #0
   131ec:	bl	10d5c <mbsinit@plt>
   131f0:	cmp	r0, #0
   131f4:	beq	12ff4 <__assert_fail@plt+0x2094>
   131f8:	b	13064 <__assert_fail@plt+0x2104>
   131fc:	ldrb	r3, [fp, r1]
   13200:	cmp	r3, #94	; 0x5e
   13204:	beq	12ac4 <__assert_fail@plt+0x1b64>
   13208:	bhi	13228 <__assert_fail@plt+0x22c8>
   1320c:	sub	r3, r3, #91	; 0x5b
   13210:	cmp	r3, #1
   13214:	bls	12ac4 <__assert_fail@plt+0x1b64>
   13218:	add	r1, r1, #1
   1321c:	cmp	r1, r2
   13220:	bne	131fc <__assert_fail@plt+0x229c>
   13224:	b	131c4 <__assert_fail@plt+0x2264>
   13228:	cmp	r3, #96	; 0x60
   1322c:	beq	12ac4 <__assert_fail@plt+0x1b64>
   13230:	cmp	r3, #124	; 0x7c
   13234:	bne	13218 <__assert_fail@plt+0x22b8>
   13238:	b	12ac4 <__assert_fail@plt+0x1b64>
   1323c:	mov	r5, #0
   13240:	b	13064 <__assert_fail@plt+0x2104>
   13244:	ldr	r1, [sp, #64]	; 0x40
   13248:	cmp	r1, #0
   1324c:	beq	13138 <__assert_fail@plt+0x21d8>
   13250:	cmp	r9, r4
   13254:	strbhi	ip, [r8, r4]
   13258:	str	r3, [sp, #64]	; 0x40
   1325c:	add	r4, r4, #1
   13260:	b	13138 <__assert_fail@plt+0x21d8>
   13264:	mov	r5, fp
   13268:	ldr	fp, [sp, #24]
   1326c:	mov	r7, #48	; 0x30
   13270:	b	12e0c <__assert_fail@plt+0x1eac>
   13274:	mov	r5, #0
   13278:	mov	fp, r5
   1327c:	b	12e0c <__assert_fail@plt+0x1eac>
   13280:	ldr	r3, [sp, #36]	; 0x24
   13284:	ldr	r2, [sp, #28]
   13288:	subs	r3, r3, r2
   1328c:	movne	r3, #1
   13290:	b	12708 <__assert_fail@plt+0x17a8>
   13294:	ldr	r3, [sp, #60]	; 0x3c
   13298:	clz	r7, r9
   1329c:	cmp	r3, #0
   132a0:	lsr	r7, r7, #5
   132a4:	moveq	r7, #0
   132a8:	cmp	r7, #0
   132ac:	mov	r5, r3
   132b0:	bne	12668 <__assert_fail@plt+0x1708>
   132b4:	ldr	r3, [sp, #68]	; 0x44
   132b8:	ldr	r2, [sp, #40]	; 0x28
   132bc:	cmp	r2, #0
   132c0:	moveq	r3, #0
   132c4:	andne	r3, r3, #1
   132c8:	cmp	r3, #0
   132cc:	movne	r3, r2
   132d0:	subne	r2, r3, #1
   132d4:	bne	13304 <__assert_fail@plt+0x23a4>
   132d8:	cmp	r9, r4
   132dc:	movhi	r3, #0
   132e0:	strbhi	r3, [r8, r4]
   132e4:	mov	r0, r4
   132e8:	add	sp, sp, #108	; 0x6c
   132ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132f0:	mov	r3, r2
   132f4:	b	132b8 <__assert_fail@plt+0x2358>
   132f8:	cmp	r9, r4
   132fc:	strbhi	r3, [r8, r4]
   13300:	add	r4, r4, #1
   13304:	ldrb	r3, [r2, #1]!
   13308:	cmp	r3, #0
   1330c:	bne	132f8 <__assert_fail@plt+0x2398>
   13310:	b	132d8 <__assert_fail@plt+0x2378>
   13314:	ldr	r3, [pc, #32]	; 1333c <__assert_fail@plt+0x23dc>
   13318:	mov	r6, #1
   1331c:	str	r6, [sp, #24]
   13320:	str	r6, [sp, #32]
   13324:	str	r3, [sp, #40]	; 0x28
   13328:	mov	r4, #0
   1332c:	mov	sl, #5
   13330:	b	126d8 <__assert_fail@plt+0x1778>
   13334:	mov	r6, #1
   13338:	b	128cc <__assert_fail@plt+0x196c>
   1333c:	andeq	r5, r1, r3, ror sl
   13340:	andeq	r5, r1, r7, ror sl
   13344:	andeq	r5, r1, r5, ror sl
   13348:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1334c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13350:	sub	sp, sp, #52	; 0x34
   13354:	mov	r6, r0
   13358:	mov	r5, r3
   1335c:	mov	r8, r1
   13360:	mov	r9, r2
   13364:	bl	10e70 <__errno_location@plt>
   13368:	ldr	r7, [pc, #380]	; 134ec <__assert_fail@plt+0x258c>
   1336c:	cmn	r6, #-2147483647	; 0x80000001
   13370:	ldr	r4, [r7]
   13374:	ldr	r3, [r0]
   13378:	str	r0, [sp, #24]
   1337c:	str	r3, [sp, #32]
   13380:	movne	r3, #0
   13384:	moveq	r3, #1
   13388:	orrs	r3, r3, r6, lsr #31
   1338c:	beq	13394 <__assert_fail@plt+0x2434>
   13390:	bl	10f48 <abort@plt>
   13394:	ldr	r2, [r7, #4]
   13398:	cmp	r6, r2
   1339c:	blt	1340c <__assert_fail@plt+0x24ac>
   133a0:	add	r1, sp, #48	; 0x30
   133a4:	add	sl, r7, #8
   133a8:	str	r2, [r1, #-4]!
   133ac:	cmp	r4, sl
   133b0:	mov	r3, #8
   133b4:	sub	r2, r6, r2
   133b8:	movne	r0, r4
   133bc:	str	r3, [sp]
   133c0:	add	r2, r2, #1
   133c4:	mvn	r3, #-2147483648	; 0x80000000
   133c8:	moveq	r0, #0
   133cc:	bl	140e0 <__assert_fail@plt+0x3180>
   133d0:	cmp	r4, sl
   133d4:	ldr	r2, [sp, #44]	; 0x2c
   133d8:	mov	fp, r0
   133dc:	str	r0, [r7]
   133e0:	ldmeq	r4, {r0, r1}
   133e4:	mov	r4, fp
   133e8:	stmeq	fp, {r0, r1}
   133ec:	ldr	r0, [r7, #4]
   133f0:	mov	r1, #0
   133f4:	sub	r2, r2, r0
   133f8:	add	r0, fp, r0, lsl #3
   133fc:	lsl	r2, r2, #3
   13400:	bl	10e88 <memset@plt>
   13404:	ldr	r3, [sp, #44]	; 0x2c
   13408:	str	r3, [r7, #4]
   1340c:	ldr	r3, [r5, #4]
   13410:	add	sl, r4, r6, lsl #3
   13414:	orr	r3, r3, #1
   13418:	str	r3, [sp, #28]
   1341c:	add	r3, r5, #8
   13420:	str	r3, [sp, #36]	; 0x24
   13424:	ldr	r3, [r5, #44]	; 0x2c
   13428:	ldr	fp, [r4, r6, lsl #3]
   1342c:	ldr	r7, [sl, #4]
   13430:	str	r3, [sp, #16]
   13434:	ldr	r3, [r5, #40]	; 0x28
   13438:	mov	r2, r8
   1343c:	str	r3, [sp, #12]
   13440:	add	r3, r5, #8
   13444:	str	r3, [sp, #8]
   13448:	ldr	r3, [sp, #28]
   1344c:	mov	r1, fp
   13450:	str	r3, [sp, #4]
   13454:	ldr	r3, [r5]
   13458:	mov	r0, r7
   1345c:	str	r3, [sp]
   13460:	mov	r3, r9
   13464:	bl	12618 <__assert_fail@plt+0x16b8>
   13468:	cmp	fp, r0
   1346c:	bhi	134d4 <__assert_fail@plt+0x2574>
   13470:	ldr	r3, [pc, #120]	; 134f0 <__assert_fail@plt+0x2590>
   13474:	add	fp, r0, #1
   13478:	cmp	r7, r3
   1347c:	str	fp, [r4, r6, lsl #3]
   13480:	beq	1348c <__assert_fail@plt+0x252c>
   13484:	mov	r0, r7
   13488:	bl	12340 <__assert_fail@plt+0x13e0>
   1348c:	mov	r0, fp
   13490:	bl	13f98 <__assert_fail@plt+0x3038>
   13494:	ldr	r3, [r5, #44]	; 0x2c
   13498:	mov	r2, r8
   1349c:	mov	r1, fp
   134a0:	str	r0, [sl, #4]
   134a4:	str	r3, [sp, #16]
   134a8:	ldr	r3, [r5, #40]	; 0x28
   134ac:	mov	r7, r0
   134b0:	str	r3, [sp, #12]
   134b4:	add	r3, r5, #8
   134b8:	str	r3, [sp, #8]
   134bc:	ldr	r3, [sp, #28]
   134c0:	str	r3, [sp, #4]
   134c4:	ldr	r3, [r5]
   134c8:	str	r3, [sp]
   134cc:	mov	r3, r9
   134d0:	bl	12618 <__assert_fail@plt+0x16b8>
   134d4:	ldr	r3, [sp, #24]
   134d8:	ldr	r2, [sp, #32]
   134dc:	mov	r0, r7
   134e0:	str	r2, [r3]
   134e4:	add	sp, sp, #52	; 0x34
   134e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134ec:	strdeq	r6, [r2], -r8
   134f0:	andeq	r6, r2, ip, ror #2
   134f4:	push	{r4, r5, r6, lr}
   134f8:	mov	r5, r0
   134fc:	bl	10e70 <__errno_location@plt>
   13500:	cmp	r5, #0
   13504:	mov	r1, #48	; 0x30
   13508:	ldr	r6, [r0]
   1350c:	mov	r4, r0
   13510:	ldr	r0, [pc, #12]	; 13524 <__assert_fail@plt+0x25c4>
   13514:	movne	r0, r5
   13518:	bl	14374 <__assert_fail@plt+0x3414>
   1351c:	str	r6, [r4]
   13520:	pop	{r4, r5, r6, pc}
   13524:	andeq	r6, r2, ip, ror #4
   13528:	ldr	r3, [pc, #12]	; 1353c <__assert_fail@plt+0x25dc>
   1352c:	cmp	r0, #0
   13530:	moveq	r0, r3
   13534:	ldr	r0, [r0]
   13538:	bx	lr
   1353c:	andeq	r6, r2, ip, ror #4
   13540:	ldr	r3, [pc, #12]	; 13554 <__assert_fail@plt+0x25f4>
   13544:	cmp	r0, #0
   13548:	moveq	r0, r3
   1354c:	str	r1, [r0]
   13550:	bx	lr
   13554:	andeq	r6, r2, ip, ror #4
   13558:	ldr	r3, [pc, #52]	; 13594 <__assert_fail@plt+0x2634>
   1355c:	cmp	r0, #0
   13560:	moveq	r0, r3
   13564:	add	r3, r0, #8
   13568:	push	{lr}		; (str lr, [sp, #-4]!)
   1356c:	lsr	lr, r1, #5
   13570:	and	r1, r1, #31
   13574:	ldr	ip, [r3, lr, lsl #2]
   13578:	lsr	r0, ip, r1
   1357c:	eor	r2, r2, r0
   13580:	and	r2, r2, #1
   13584:	and	r0, r0, #1
   13588:	eor	r1, ip, r2, lsl r1
   1358c:	str	r1, [r3, lr, lsl #2]
   13590:	pop	{pc}		; (ldr pc, [sp], #4)
   13594:	andeq	r6, r2, ip, ror #4
   13598:	ldr	r3, [pc, #16]	; 135b0 <__assert_fail@plt+0x2650>
   1359c:	cmp	r0, #0
   135a0:	movne	r3, r0
   135a4:	ldr	r0, [r3, #4]
   135a8:	str	r1, [r3, #4]
   135ac:	bx	lr
   135b0:	andeq	r6, r2, ip, ror #4
   135b4:	ldr	r3, [pc, #44]	; 135e8 <__assert_fail@plt+0x2688>
   135b8:	cmp	r0, #0
   135bc:	moveq	r0, r3
   135c0:	mov	r3, #10
   135c4:	cmp	r2, #0
   135c8:	cmpne	r1, #0
   135cc:	str	r3, [r0]
   135d0:	bne	135dc <__assert_fail@plt+0x267c>
   135d4:	push	{r4, lr}
   135d8:	bl	10f48 <abort@plt>
   135dc:	str	r1, [r0, #40]	; 0x28
   135e0:	str	r2, [r0, #44]	; 0x2c
   135e4:	bx	lr
   135e8:	andeq	r6, r2, ip, ror #4
   135ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   135f0:	sub	sp, sp, #24
   135f4:	mov	sl, r3
   135f8:	ldr	r4, [sp, #56]	; 0x38
   135fc:	ldr	r3, [pc, #100]	; 13668 <__assert_fail@plt+0x2708>
   13600:	cmp	r4, #0
   13604:	moveq	r4, r3
   13608:	mov	r7, r0
   1360c:	mov	r8, r1
   13610:	mov	r9, r2
   13614:	bl	10e70 <__errno_location@plt>
   13618:	ldr	r3, [r4, #44]	; 0x2c
   1361c:	mov	r2, r9
   13620:	mov	r1, r8
   13624:	ldr	r6, [r0]
   13628:	str	r3, [sp, #16]
   1362c:	ldr	r3, [r4, #40]	; 0x28
   13630:	mov	r5, r0
   13634:	str	r3, [sp, #12]
   13638:	add	r3, r4, #8
   1363c:	str	r3, [sp, #8]
   13640:	ldr	r3, [r4, #4]
   13644:	mov	r0, r7
   13648:	str	r3, [sp, #4]
   1364c:	ldr	r3, [r4]
   13650:	str	r3, [sp]
   13654:	mov	r3, sl
   13658:	bl	12618 <__assert_fail@plt+0x16b8>
   1365c:	str	r6, [r5]
   13660:	add	sp, sp, #24
   13664:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13668:	andeq	r6, r2, ip, ror #4
   1366c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13670:	cmp	r3, #0
   13674:	sub	sp, sp, #44	; 0x2c
   13678:	ldr	r4, [pc, #188]	; 1373c <__assert_fail@plt+0x27dc>
   1367c:	mov	r6, r2
   13680:	movne	r4, r3
   13684:	mov	sl, r1
   13688:	mov	r9, r0
   1368c:	bl	10e70 <__errno_location@plt>
   13690:	ldr	r5, [r4, #4]
   13694:	add	fp, r4, #8
   13698:	cmp	r6, #0
   1369c:	orreq	r5, r5, #1
   136a0:	mov	r1, #0
   136a4:	mov	r2, r9
   136a8:	ldr	r3, [r0]
   136ac:	mov	r8, r0
   136b0:	str	r3, [sp, #28]
   136b4:	ldr	r3, [r4, #44]	; 0x2c
   136b8:	mov	r0, r1
   136bc:	str	r3, [sp, #16]
   136c0:	ldr	r3, [r4, #40]	; 0x28
   136c4:	stmib	sp, {r5, fp}
   136c8:	str	r3, [sp, #12]
   136cc:	ldr	r3, [r4]
   136d0:	str	r3, [sp]
   136d4:	mov	r3, sl
   136d8:	bl	12618 <__assert_fail@plt+0x16b8>
   136dc:	add	r1, r0, #1
   136e0:	mov	r7, r0
   136e4:	mov	r0, r1
   136e8:	str	r1, [sp, #36]	; 0x24
   136ec:	bl	13f98 <__assert_fail@plt+0x3038>
   136f0:	ldr	r3, [r4, #44]	; 0x2c
   136f4:	mov	r2, r9
   136f8:	str	r3, [sp, #16]
   136fc:	ldr	r3, [r4, #40]	; 0x28
   13700:	stmib	sp, {r5, fp}
   13704:	str	r3, [sp, #12]
   13708:	ldr	r3, [r4]
   1370c:	ldr	r1, [sp, #36]	; 0x24
   13710:	str	r3, [sp]
   13714:	mov	r3, sl
   13718:	str	r0, [sp, #32]
   1371c:	bl	12618 <__assert_fail@plt+0x16b8>
   13720:	ldr	r3, [sp, #28]
   13724:	cmp	r6, #0
   13728:	str	r3, [r8]
   1372c:	ldr	r0, [sp, #32]
   13730:	strne	r7, [r6]
   13734:	add	sp, sp, #44	; 0x2c
   13738:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1373c:	andeq	r6, r2, ip, ror #4
   13740:	mov	r3, r2
   13744:	mov	r2, #0
   13748:	b	1366c <__assert_fail@plt+0x270c>
   1374c:	push	{r4, r5, r6, r7, r8, lr}
   13750:	mov	r6, #1
   13754:	ldr	r4, [pc, #104]	; 137c4 <__assert_fail@plt+0x2864>
   13758:	ldr	r5, [r4]
   1375c:	add	r7, r5, #12
   13760:	ldr	r3, [r4, #4]
   13764:	add	r7, r7, #8
   13768:	cmp	r6, r3
   1376c:	blt	137b4 <__assert_fail@plt+0x2854>
   13770:	ldr	r0, [r5, #4]
   13774:	ldr	r6, [pc, #76]	; 137c8 <__assert_fail@plt+0x2868>
   13778:	cmp	r0, r6
   1377c:	beq	13790 <__assert_fail@plt+0x2830>
   13780:	bl	12340 <__assert_fail@plt+0x13e0>
   13784:	mov	r3, #256	; 0x100
   13788:	str	r3, [r4, #8]
   1378c:	str	r6, [r4, #12]
   13790:	ldr	r6, [pc, #52]	; 137cc <__assert_fail@plt+0x286c>
   13794:	cmp	r5, r6
   13798:	beq	137a8 <__assert_fail@plt+0x2848>
   1379c:	mov	r0, r5
   137a0:	bl	12340 <__assert_fail@plt+0x13e0>
   137a4:	str	r6, [r4]
   137a8:	mov	r3, #1
   137ac:	str	r3, [r4, #4]
   137b0:	pop	{r4, r5, r6, r7, r8, pc}
   137b4:	ldr	r0, [r7, #-8]
   137b8:	bl	12340 <__assert_fail@plt+0x13e0>
   137bc:	add	r6, r6, #1
   137c0:	b	13760 <__assert_fail@plt+0x2800>
   137c4:	strdeq	r6, [r2], -r8
   137c8:	andeq	r6, r2, ip, ror #2
   137cc:	andeq	r6, r2, r0, lsl #2
   137d0:	ldr	r3, [pc, #4]	; 137dc <__assert_fail@plt+0x287c>
   137d4:	mvn	r2, #0
   137d8:	b	1334c <__assert_fail@plt+0x23ec>
   137dc:	andeq	r6, r2, ip, ror #4
   137e0:	ldr	r3, [pc]	; 137e8 <__assert_fail@plt+0x2888>
   137e4:	b	1334c <__assert_fail@plt+0x23ec>
   137e8:	andeq	r6, r2, ip, ror #4
   137ec:	mov	r1, r0
   137f0:	mov	r0, #0
   137f4:	b	137d0 <__assert_fail@plt+0x2870>
   137f8:	mov	r2, r1
   137fc:	mov	r1, r0
   13800:	mov	r0, #0
   13804:	b	137e0 <__assert_fail@plt+0x2880>
   13808:	push	{r4, r5, lr}
   1380c:	sub	sp, sp, #52	; 0x34
   13810:	mov	r5, r2
   13814:	mov	r4, r0
   13818:	mov	r0, sp
   1381c:	bl	124d4 <__assert_fail@plt+0x1574>
   13820:	mov	r3, sp
   13824:	mvn	r2, #0
   13828:	mov	r1, r5
   1382c:	mov	r0, r4
   13830:	bl	1334c <__assert_fail@plt+0x23ec>
   13834:	add	sp, sp, #52	; 0x34
   13838:	pop	{r4, r5, pc}
   1383c:	push	{r4, r5, r6, lr}
   13840:	sub	sp, sp, #48	; 0x30
   13844:	mov	r5, r2
   13848:	mov	r6, r3
   1384c:	mov	r4, r0
   13850:	mov	r0, sp
   13854:	bl	124d4 <__assert_fail@plt+0x1574>
   13858:	mov	r3, sp
   1385c:	mov	r2, r6
   13860:	mov	r1, r5
   13864:	mov	r0, r4
   13868:	bl	1334c <__assert_fail@plt+0x23ec>
   1386c:	add	sp, sp, #48	; 0x30
   13870:	pop	{r4, r5, r6, pc}
   13874:	mov	r2, r1
   13878:	mov	r1, r0
   1387c:	mov	r0, #0
   13880:	b	13808 <__assert_fail@plt+0x28a8>
   13884:	mov	r3, r2
   13888:	mov	r2, r1
   1388c:	mov	r1, r0
   13890:	mov	r0, #0
   13894:	b	1383c <__assert_fail@plt+0x28dc>
   13898:	push	{r4, r5, r6, lr}
   1389c:	mov	r4, r0
   138a0:	ldr	lr, [pc, #80]	; 138f8 <__assert_fail@plt+0x2998>
   138a4:	mov	r5, r1
   138a8:	mov	r6, r2
   138ac:	ldm	lr!, {r0, r1, r2, r3}
   138b0:	sub	sp, sp, #48	; 0x30
   138b4:	mov	ip, sp
   138b8:	stmia	ip!, {r0, r1, r2, r3}
   138bc:	ldm	lr!, {r0, r1, r2, r3}
   138c0:	stmia	ip!, {r0, r1, r2, r3}
   138c4:	ldm	lr, {r0, r1, r2, r3}
   138c8:	stm	ip, {r0, r1, r2, r3}
   138cc:	mov	r1, r6
   138d0:	mov	r2, #1
   138d4:	mov	r0, sp
   138d8:	bl	13558 <__assert_fail@plt+0x25f8>
   138dc:	mov	r3, sp
   138e0:	mov	r2, r5
   138e4:	mov	r1, r4
   138e8:	mov	r0, #0
   138ec:	bl	1334c <__assert_fail@plt+0x23ec>
   138f0:	add	sp, sp, #48	; 0x30
   138f4:	pop	{r4, r5, r6, pc}
   138f8:	andeq	r6, r2, ip, ror #4
   138fc:	mov	r2, r1
   13900:	mvn	r1, #0
   13904:	b	13898 <__assert_fail@plt+0x2938>
   13908:	mov	r1, #58	; 0x3a
   1390c:	b	138fc <__assert_fail@plt+0x299c>
   13910:	mov	r2, #58	; 0x3a
   13914:	b	13898 <__assert_fail@plt+0x2938>
   13918:	push	{r4, r5, lr}
   1391c:	sub	sp, sp, #100	; 0x64
   13920:	mov	r4, r0
   13924:	mov	r0, sp
   13928:	mov	r5, r2
   1392c:	bl	124d4 <__assert_fail@plt+0x1574>
   13930:	mov	ip, sp
   13934:	add	lr, sp, #48	; 0x30
   13938:	ldm	ip!, {r0, r1, r2, r3}
   1393c:	stmia	lr!, {r0, r1, r2, r3}
   13940:	ldm	ip!, {r0, r1, r2, r3}
   13944:	stmia	lr!, {r0, r1, r2, r3}
   13948:	ldm	ip, {r0, r1, r2, r3}
   1394c:	stm	lr, {r0, r1, r2, r3}
   13950:	mov	r2, #1
   13954:	mov	r1, #58	; 0x3a
   13958:	add	r0, sp, #48	; 0x30
   1395c:	bl	13558 <__assert_fail@plt+0x25f8>
   13960:	add	r3, sp, #48	; 0x30
   13964:	mvn	r2, #0
   13968:	mov	r1, r5
   1396c:	mov	r0, r4
   13970:	bl	1334c <__assert_fail@plt+0x23ec>
   13974:	add	sp, sp, #100	; 0x64
   13978:	pop	{r4, r5, pc}
   1397c:	push	{r4, r5, r6, r7, lr}
   13980:	mov	r4, r0
   13984:	ldr	lr, [pc, #84]	; 139e0 <__assert_fail@plt+0x2a80>
   13988:	mov	r6, r1
   1398c:	mov	r7, r2
   13990:	mov	r5, r3
   13994:	ldm	lr!, {r0, r1, r2, r3}
   13998:	sub	sp, sp, #52	; 0x34
   1399c:	mov	ip, sp
   139a0:	stmia	ip!, {r0, r1, r2, r3}
   139a4:	ldm	lr!, {r0, r1, r2, r3}
   139a8:	stmia	ip!, {r0, r1, r2, r3}
   139ac:	ldm	lr, {r0, r1, r2, r3}
   139b0:	stm	ip, {r0, r1, r2, r3}
   139b4:	mov	r2, r7
   139b8:	mov	r1, r6
   139bc:	mov	r0, sp
   139c0:	bl	135b4 <__assert_fail@plt+0x2654>
   139c4:	mov	r3, sp
   139c8:	ldr	r2, [sp, #72]	; 0x48
   139cc:	mov	r1, r5
   139d0:	mov	r0, r4
   139d4:	bl	1334c <__assert_fail@plt+0x23ec>
   139d8:	add	sp, sp, #52	; 0x34
   139dc:	pop	{r4, r5, r6, r7, pc}
   139e0:	andeq	r6, r2, ip, ror #4
   139e4:	mvn	ip, #0
   139e8:	push	{r0, r1, r2, lr}
   139ec:	str	ip, [sp]
   139f0:	bl	1397c <__assert_fail@plt+0x2a1c>
   139f4:	add	sp, sp, #12
   139f8:	pop	{pc}		; (ldr pc, [sp], #4)
   139fc:	mov	r3, r2
   13a00:	mov	r2, r1
   13a04:	mov	r1, r0
   13a08:	mov	r0, #0
   13a0c:	b	139e4 <__assert_fail@plt+0x2a84>
   13a10:	push	{r0, r1, r2, lr}
   13a14:	str	r3, [sp]
   13a18:	mov	r3, r2
   13a1c:	mov	r2, r1
   13a20:	mov	r1, r0
   13a24:	mov	r0, #0
   13a28:	bl	1397c <__assert_fail@plt+0x2a1c>
   13a2c:	add	sp, sp, #12
   13a30:	pop	{pc}		; (ldr pc, [sp], #4)
   13a34:	ldr	r3, [pc]	; 13a3c <__assert_fail@plt+0x2adc>
   13a38:	b	1334c <__assert_fail@plt+0x23ec>
   13a3c:	andeq	r6, r2, r8, lsl #2
   13a40:	mov	r2, r1
   13a44:	mov	r1, r0
   13a48:	mov	r0, #0
   13a4c:	b	13a34 <__assert_fail@plt+0x2ad4>
   13a50:	mvn	r2, #0
   13a54:	b	13a34 <__assert_fail@plt+0x2ad4>
   13a58:	mov	r1, r0
   13a5c:	mov	r0, #0
   13a60:	b	13a50 <__assert_fail@plt+0x2af0>
   13a64:	push	{r4, r5, r6, lr}
   13a68:	sub	sp, sp, #32
   13a6c:	cmp	r1, #0
   13a70:	mov	r5, r0
   13a74:	ldr	r4, [sp, #48]	; 0x30
   13a78:	ldr	r6, [sp, #52]	; 0x34
   13a7c:	beq	13b30 <__assert_fail@plt+0x2bd0>
   13a80:	stm	sp, {r2, r3}
   13a84:	mov	r3, r1
   13a88:	ldr	r2, [pc, #860]	; 13dec <__assert_fail@plt+0x2e8c>
   13a8c:	mov	r1, #1
   13a90:	bl	10eac <__fprintf_chk@plt>
   13a94:	mov	r2, #5
   13a98:	ldr	r1, [pc, #848]	; 13df0 <__assert_fail@plt+0x2e90>
   13a9c:	mov	r0, #0
   13aa0:	bl	10d8c <dcgettext@plt>
   13aa4:	ldr	r3, [pc, #840]	; 13df4 <__assert_fail@plt+0x2e94>
   13aa8:	ldr	r2, [pc, #840]	; 13df8 <__assert_fail@plt+0x2e98>
   13aac:	str	r3, [sp]
   13ab0:	mov	r1, #1
   13ab4:	mov	r3, r0
   13ab8:	mov	r0, r5
   13abc:	bl	10eac <__fprintf_chk@plt>
   13ac0:	mov	r1, r5
   13ac4:	mov	r0, #10
   13ac8:	bl	10d80 <fputc_unlocked@plt>
   13acc:	mov	r2, #5
   13ad0:	ldr	r1, [pc, #804]	; 13dfc <__assert_fail@plt+0x2e9c>
   13ad4:	mov	r0, #0
   13ad8:	bl	10d8c <dcgettext@plt>
   13adc:	mov	r1, #1
   13ae0:	ldr	r3, [pc, #792]	; 13e00 <__assert_fail@plt+0x2ea0>
   13ae4:	mov	r2, r0
   13ae8:	mov	r0, r5
   13aec:	bl	10eac <__fprintf_chk@plt>
   13af0:	mov	r1, r5
   13af4:	mov	r0, #10
   13af8:	bl	10d80 <fputc_unlocked@plt>
   13afc:	cmp	r6, #9
   13b00:	ldrls	pc, [pc, r6, lsl #2]
   13b04:	b	13de0 <__assert_fail@plt+0x2e80>
   13b08:	andeq	r3, r1, r0, lsr #24
   13b0c:	andeq	r3, r1, r8, asr #22
   13b10:	andeq	r3, r1, r4, ror fp
   13b14:	andeq	r3, r1, r8, lsr #23
   13b18:	andeq	r3, r1, r4, ror #23
   13b1c:	andeq	r3, r1, r8, lsr #24
   13b20:	andeq	r3, r1, r0, ror ip
   13b24:	andeq	r3, r1, r0, asr #25
   13b28:	andeq	r3, r1, r8, lsl sp
   13b2c:	andeq	r3, r1, r8, ror sp
   13b30:	str	r3, [sp]
   13b34:	mov	r1, #1
   13b38:	mov	r3, r2
   13b3c:	ldr	r2, [pc, #704]	; 13e04 <__assert_fail@plt+0x2ea4>
   13b40:	bl	10eac <__fprintf_chk@plt>
   13b44:	b	13a94 <__assert_fail@plt+0x2b34>
   13b48:	mov	r2, #5
   13b4c:	ldr	r1, [pc, #692]	; 13e08 <__assert_fail@plt+0x2ea8>
   13b50:	mov	r0, #0
   13b54:	bl	10d8c <dcgettext@plt>
   13b58:	ldr	r3, [r4]
   13b5c:	mov	r1, #1
   13b60:	mov	r2, r0
   13b64:	mov	r0, r5
   13b68:	add	sp, sp, #32
   13b6c:	pop	{r4, r5, r6, lr}
   13b70:	b	10eac <__fprintf_chk@plt>
   13b74:	mov	r2, #5
   13b78:	ldr	r1, [pc, #652]	; 13e0c <__assert_fail@plt+0x2eac>
   13b7c:	mov	r0, #0
   13b80:	bl	10d8c <dcgettext@plt>
   13b84:	ldr	r3, [r4, #4]
   13b88:	mov	r1, #1
   13b8c:	str	r3, [sp, #48]	; 0x30
   13b90:	ldr	r3, [r4]
   13b94:	mov	r2, r0
   13b98:	mov	r0, r5
   13b9c:	add	sp, sp, #32
   13ba0:	pop	{r4, r5, r6, lr}
   13ba4:	b	10eac <__fprintf_chk@plt>
   13ba8:	mov	r2, #5
   13bac:	ldr	r1, [pc, #604]	; 13e10 <__assert_fail@plt+0x2eb0>
   13bb0:	mov	r0, #0
   13bb4:	bl	10d8c <dcgettext@plt>
   13bb8:	ldr	r3, [r4, #8]
   13bbc:	mov	r1, #1
   13bc0:	str	r3, [sp, #52]	; 0x34
   13bc4:	ldr	r3, [r4, #4]
   13bc8:	str	r3, [sp, #48]	; 0x30
   13bcc:	ldr	r3, [r4]
   13bd0:	mov	r2, r0
   13bd4:	mov	r0, r5
   13bd8:	add	sp, sp, #32
   13bdc:	pop	{r4, r5, r6, lr}
   13be0:	b	10eac <__fprintf_chk@plt>
   13be4:	mov	r2, #5
   13be8:	ldr	r1, [pc, #548]	; 13e14 <__assert_fail@plt+0x2eb4>
   13bec:	mov	r0, #0
   13bf0:	bl	10d8c <dcgettext@plt>
   13bf4:	ldr	r3, [r4, #12]
   13bf8:	mov	r1, #1
   13bfc:	str	r3, [sp, #8]
   13c00:	ldr	r3, [r4, #8]
   13c04:	str	r3, [sp, #4]
   13c08:	ldr	r3, [r4, #4]
   13c0c:	str	r3, [sp]
   13c10:	ldr	r3, [r4]
   13c14:	mov	r2, r0
   13c18:	mov	r0, r5
   13c1c:	bl	10eac <__fprintf_chk@plt>
   13c20:	add	sp, sp, #32
   13c24:	pop	{r4, r5, r6, pc}
   13c28:	mov	r2, #5
   13c2c:	ldr	r1, [pc, #484]	; 13e18 <__assert_fail@plt+0x2eb8>
   13c30:	mov	r0, #0
   13c34:	bl	10d8c <dcgettext@plt>
   13c38:	ldr	r3, [r4, #16]
   13c3c:	mov	r1, #1
   13c40:	str	r3, [sp, #12]
   13c44:	ldr	r3, [r4, #12]
   13c48:	str	r3, [sp, #8]
   13c4c:	ldr	r3, [r4, #8]
   13c50:	str	r3, [sp, #4]
   13c54:	ldr	r3, [r4, #4]
   13c58:	str	r3, [sp]
   13c5c:	ldr	r3, [r4]
   13c60:	mov	r2, r0
   13c64:	mov	r0, r5
   13c68:	bl	10eac <__fprintf_chk@plt>
   13c6c:	b	13c20 <__assert_fail@plt+0x2cc0>
   13c70:	mov	r2, #5
   13c74:	ldr	r1, [pc, #416]	; 13e1c <__assert_fail@plt+0x2ebc>
   13c78:	mov	r0, #0
   13c7c:	bl	10d8c <dcgettext@plt>
   13c80:	ldr	r3, [r4, #20]
   13c84:	mov	r1, #1
   13c88:	str	r3, [sp, #16]
   13c8c:	ldr	r3, [r4, #16]
   13c90:	str	r3, [sp, #12]
   13c94:	ldr	r3, [r4, #12]
   13c98:	str	r3, [sp, #8]
   13c9c:	ldr	r3, [r4, #8]
   13ca0:	str	r3, [sp, #4]
   13ca4:	ldr	r3, [r4, #4]
   13ca8:	str	r3, [sp]
   13cac:	ldr	r3, [r4]
   13cb0:	mov	r2, r0
   13cb4:	mov	r0, r5
   13cb8:	bl	10eac <__fprintf_chk@plt>
   13cbc:	b	13c20 <__assert_fail@plt+0x2cc0>
   13cc0:	mov	r2, #5
   13cc4:	ldr	r1, [pc, #340]	; 13e20 <__assert_fail@plt+0x2ec0>
   13cc8:	mov	r0, #0
   13ccc:	bl	10d8c <dcgettext@plt>
   13cd0:	ldr	r3, [r4, #24]
   13cd4:	mov	r1, #1
   13cd8:	str	r3, [sp, #20]
   13cdc:	ldr	r3, [r4, #20]
   13ce0:	str	r3, [sp, #16]
   13ce4:	ldr	r3, [r4, #16]
   13ce8:	str	r3, [sp, #12]
   13cec:	ldr	r3, [r4, #12]
   13cf0:	str	r3, [sp, #8]
   13cf4:	ldr	r3, [r4, #8]
   13cf8:	str	r3, [sp, #4]
   13cfc:	ldr	r3, [r4, #4]
   13d00:	str	r3, [sp]
   13d04:	ldr	r3, [r4]
   13d08:	mov	r2, r0
   13d0c:	mov	r0, r5
   13d10:	bl	10eac <__fprintf_chk@plt>
   13d14:	b	13c20 <__assert_fail@plt+0x2cc0>
   13d18:	mov	r2, #5
   13d1c:	ldr	r1, [pc, #256]	; 13e24 <__assert_fail@plt+0x2ec4>
   13d20:	mov	r0, #0
   13d24:	bl	10d8c <dcgettext@plt>
   13d28:	ldr	r3, [r4, #28]
   13d2c:	mov	r1, #1
   13d30:	str	r3, [sp, #24]
   13d34:	ldr	r3, [r4, #24]
   13d38:	str	r3, [sp, #20]
   13d3c:	ldr	r3, [r4, #20]
   13d40:	str	r3, [sp, #16]
   13d44:	ldr	r3, [r4, #16]
   13d48:	str	r3, [sp, #12]
   13d4c:	ldr	r3, [r4, #12]
   13d50:	str	r3, [sp, #8]
   13d54:	ldr	r3, [r4, #8]
   13d58:	str	r3, [sp, #4]
   13d5c:	ldr	r3, [r4, #4]
   13d60:	str	r3, [sp]
   13d64:	ldr	r3, [r4]
   13d68:	mov	r2, r0
   13d6c:	mov	r0, r5
   13d70:	bl	10eac <__fprintf_chk@plt>
   13d74:	b	13c20 <__assert_fail@plt+0x2cc0>
   13d78:	ldr	r1, [pc, #168]	; 13e28 <__assert_fail@plt+0x2ec8>
   13d7c:	mov	r2, #5
   13d80:	mov	r0, #0
   13d84:	bl	10d8c <dcgettext@plt>
   13d88:	ldr	r3, [r4, #32]
   13d8c:	mov	r1, #1
   13d90:	str	r3, [sp, #28]
   13d94:	ldr	r3, [r4, #28]
   13d98:	str	r3, [sp, #24]
   13d9c:	ldr	r3, [r4, #24]
   13da0:	str	r3, [sp, #20]
   13da4:	ldr	r3, [r4, #20]
   13da8:	str	r3, [sp, #16]
   13dac:	ldr	r3, [r4, #16]
   13db0:	str	r3, [sp, #12]
   13db4:	ldr	r3, [r4, #12]
   13db8:	str	r3, [sp, #8]
   13dbc:	ldr	r3, [r4, #8]
   13dc0:	str	r3, [sp, #4]
   13dc4:	ldr	r3, [r4, #4]
   13dc8:	str	r3, [sp]
   13dcc:	ldr	r3, [r4]
   13dd0:	mov	r2, r0
   13dd4:	mov	r0, r5
   13dd8:	bl	10eac <__fprintf_chk@plt>
   13ddc:	b	13c20 <__assert_fail@plt+0x2cc0>
   13de0:	mov	r2, #5
   13de4:	ldr	r1, [pc, #64]	; 13e2c <__assert_fail@plt+0x2ecc>
   13de8:	b	13d80 <__assert_fail@plt+0x2e20>
   13dec:	andeq	r5, r1, r5, asr #21
   13df0:	ldrdeq	r5, [r1], -r8
   13df4:	andeq	r0, r0, r6, ror #15
   13df8:	andeq	r5, r1, r6, lsr #27
   13dfc:	ldrdeq	r5, [r1], -ip
   13e00:	andeq	r5, r1, r7, lsl #23
   13e04:	ldrdeq	r5, [r1], -r1
   13e08:	andeq	r5, r1, r9, lsr #23
   13e0c:			; <UNDEFINED> instruction: 0x00015bb9
   13e10:	ldrdeq	r5, [r1], -r0
   13e14:	andeq	r5, r1, ip, ror #23
   13e18:	andeq	r5, r1, ip, lsl #24
   13e1c:	andeq	r5, r1, r0, lsr ip
   13e20:	andeq	r5, r1, r8, asr ip
   13e24:	andeq	r5, r1, r4, lsl #25
   13e28:			; <UNDEFINED> instruction: 0x00015cb4
   13e2c:	andeq	r5, r1, r8, ror #25
   13e30:	push	{r0, r1, r4, lr}
   13e34:	mov	ip, #0
   13e38:	ldr	lr, [sp, #16]
   13e3c:	ldr	r4, [lr, ip, lsl #2]
   13e40:	cmp	r4, #0
   13e44:	bne	13e5c <__assert_fail@plt+0x2efc>
   13e48:	str	ip, [sp, #4]
   13e4c:	str	lr, [sp]
   13e50:	bl	13a64 <__assert_fail@plt+0x2b04>
   13e54:	add	sp, sp, #8
   13e58:	pop	{r4, pc}
   13e5c:	add	ip, ip, #1
   13e60:	b	13e3c <__assert_fail@plt+0x2edc>
   13e64:	push	{r4, r5, lr}
   13e68:	sub	sp, sp, #52	; 0x34
   13e6c:	mov	ip, #0
   13e70:	ldr	r5, [sp, #64]	; 0x40
   13e74:	add	lr, sp, #8
   13e78:	ldr	r4, [r5, ip, lsl #2]
   13e7c:	cmp	r4, #0
   13e80:	str	r4, [lr, ip, lsl #2]
   13e84:	beq	13e94 <__assert_fail@plt+0x2f34>
   13e88:	add	ip, ip, #1
   13e8c:	cmp	ip, #10
   13e90:	bne	13e78 <__assert_fail@plt+0x2f18>
   13e94:	str	ip, [sp, #4]
   13e98:	str	lr, [sp]
   13e9c:	bl	13a64 <__assert_fail@plt+0x2b04>
   13ea0:	add	sp, sp, #52	; 0x34
   13ea4:	pop	{r4, r5, pc}
   13ea8:	push	{r3}		; (str r3, [sp, #-4]!)
   13eac:	push	{r0, r1, r2, r3, lr}
   13eb0:	add	r3, sp, #24
   13eb4:	str	r3, [sp, #12]
   13eb8:	str	r3, [sp]
   13ebc:	ldr	r3, [sp, #20]
   13ec0:	bl	13e64 <__assert_fail@plt+0x2f04>
   13ec4:	add	sp, sp, #16
   13ec8:	pop	{lr}		; (ldr lr, [sp], #4)
   13ecc:	add	sp, sp, #4
   13ed0:	bx	lr
   13ed4:	ldr	r3, [pc, #116]	; 13f50 <__assert_fail@plt+0x2ff0>
   13ed8:	push	{r4, lr}
   13edc:	mov	r0, #10
   13ee0:	ldr	r1, [r3]
   13ee4:	bl	10d80 <fputc_unlocked@plt>
   13ee8:	mov	r2, #5
   13eec:	ldr	r1, [pc, #96]	; 13f54 <__assert_fail@plt+0x2ff4>
   13ef0:	mov	r0, #0
   13ef4:	bl	10d8c <dcgettext@plt>
   13ef8:	ldr	r2, [pc, #88]	; 13f58 <__assert_fail@plt+0x2ff8>
   13efc:	mov	r1, r0
   13f00:	mov	r0, #1
   13f04:	bl	10e94 <__printf_chk@plt>
   13f08:	mov	r2, #5
   13f0c:	ldr	r1, [pc, #72]	; 13f5c <__assert_fail@plt+0x2ffc>
   13f10:	mov	r0, #0
   13f14:	bl	10d8c <dcgettext@plt>
   13f18:	ldr	r3, [pc, #64]	; 13f60 <__assert_fail@plt+0x3000>
   13f1c:	ldr	r2, [pc, #64]	; 13f64 <__assert_fail@plt+0x3004>
   13f20:	mov	r1, r0
   13f24:	mov	r0, #1
   13f28:	bl	10e94 <__printf_chk@plt>
   13f2c:	mov	r2, #5
   13f30:	ldr	r1, [pc, #48]	; 13f68 <__assert_fail@plt+0x3008>
   13f34:	mov	r0, #0
   13f38:	bl	10d8c <dcgettext@plt>
   13f3c:	ldr	r2, [pc, #40]	; 13f6c <__assert_fail@plt+0x300c>
   13f40:	pop	{r4, lr}
   13f44:	mov	r1, r0
   13f48:	mov	r0, #1
   13f4c:	b	10e94 <__printf_chk@plt>
   13f50:	andeq	r6, r2, r4, asr r1
   13f54:	andeq	r5, r1, r4, lsr #26
   13f58:	andeq	r5, r1, r8, lsr sp
   13f5c:	andeq	r5, r1, lr, asr #26
   13f60:	andeq	r5, r1, r8, asr #13
   13f64:	strdeq	r5, [r1], -r0
   13f68:	andeq	r5, r1, r2, ror #26
   13f6c:	andeq	r5, r1, r9, lsl #27
   13f70:	push	{r4, lr}
   13f74:	bl	148f0 <__assert_fail@plt+0x3990>
   13f78:	cmp	r0, #0
   13f7c:	popne	{r4, pc}
   13f80:	bl	14404 <__assert_fail@plt+0x34a4>
   13f84:	push	{r4, lr}
   13f88:	bl	148f0 <__assert_fail@plt+0x3990>
   13f8c:	cmp	r0, #0
   13f90:	popne	{r4, pc}
   13f94:	bl	14404 <__assert_fail@plt+0x34a4>
   13f98:	b	13f70 <__assert_fail@plt+0x3010>
   13f9c:	push	{r4, r5, r6, lr}
   13fa0:	mov	r5, r0
   13fa4:	mov	r4, r1
   13fa8:	bl	14930 <__assert_fail@plt+0x39d0>
   13fac:	cmp	r0, #0
   13fb0:	popne	{r4, r5, r6, pc}
   13fb4:	adds	r4, r4, #0
   13fb8:	movne	r4, #1
   13fbc:	cmp	r5, #0
   13fc0:	orreq	r4, r4, #1
   13fc4:	cmp	r4, #0
   13fc8:	popeq	{r4, r5, r6, pc}
   13fcc:	bl	14404 <__assert_fail@plt+0x34a4>
   13fd0:	push	{r4, lr}
   13fd4:	cmp	r1, #0
   13fd8:	orreq	r1, r1, #1
   13fdc:	bl	14930 <__assert_fail@plt+0x39d0>
   13fe0:	cmp	r0, #0
   13fe4:	popne	{r4, pc}
   13fe8:	bl	14404 <__assert_fail@plt+0x34a4>
   13fec:	push	{r4, r5, r6, lr}
   13ff0:	mov	r6, r0
   13ff4:	mov	r5, r1
   13ff8:	mov	r4, r2
   13ffc:	bl	14a80 <__assert_fail@plt+0x3b20>
   14000:	cmp	r0, #0
   14004:	popne	{r4, r5, r6, pc}
   14008:	cmp	r6, #0
   1400c:	beq	1401c <__assert_fail@plt+0x30bc>
   14010:	cmp	r5, #0
   14014:	cmpne	r4, #0
   14018:	popeq	{r4, r5, r6, pc}
   1401c:	bl	14404 <__assert_fail@plt+0x34a4>
   14020:	b	13fec <__assert_fail@plt+0x308c>
   14024:	cmp	r2, #0
   14028:	cmpne	r1, #0
   1402c:	moveq	r2, #1
   14030:	moveq	r1, r2
   14034:	push	{r4, lr}
   14038:	bl	14a80 <__assert_fail@plt+0x3b20>
   1403c:	cmp	r0, #0
   14040:	popne	{r4, pc}
   14044:	bl	14404 <__assert_fail@plt+0x34a4>
   14048:	mov	r2, r1
   1404c:	mov	r1, r0
   14050:	mov	r0, #0
   14054:	b	13fec <__assert_fail@plt+0x308c>
   14058:	mov	r2, r1
   1405c:	mov	r1, r0
   14060:	mov	r0, #0
   14064:	b	14024 <__assert_fail@plt+0x30c4>
   14068:	push	{r4, r5, r6, r7, r8, lr}
   1406c:	subs	r7, r0, #0
   14070:	mov	r5, r1
   14074:	mov	r6, r2
   14078:	ldr	r4, [r1]
   1407c:	bne	140b8 <__assert_fail@plt+0x3158>
   14080:	cmp	r4, #0
   14084:	bne	140a0 <__assert_fail@plt+0x3140>
   14088:	mov	r1, r2
   1408c:	mov	r0, #64	; 0x40
   14090:	bl	14bac <__assert_fail@plt+0x3c4c>
   14094:	cmp	r0, #0
   14098:	movne	r4, r0
   1409c:	addeq	r4, r0, #1
   140a0:	mov	r2, r6
   140a4:	mov	r1, r4
   140a8:	mov	r0, r7
   140ac:	bl	13fec <__assert_fail@plt+0x308c>
   140b0:	str	r4, [r5]
   140b4:	pop	{r4, r5, r6, r7, r8, pc}
   140b8:	lsr	r2, r4, #1
   140bc:	add	r3, r2, #1
   140c0:	mvn	r3, r3
   140c4:	cmp	r4, r3
   140c8:	addls	r4, r4, #1
   140cc:	addls	r4, r4, r2
   140d0:	bls	140a0 <__assert_fail@plt+0x3140>
   140d4:	bl	14404 <__assert_fail@plt+0x34a4>
   140d8:	mov	r2, #1
   140dc:	b	14068 <__assert_fail@plt+0x3108>
   140e0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140e4:	mov	sl, r0
   140e8:	ldr	r8, [r1]
   140ec:	mov	fp, r1
   140f0:	mov	r5, r2
   140f4:	asrs	r4, r8, #1
   140f8:	mov	r9, r3
   140fc:	ldr	r7, [sp, #48]	; 0x30
   14100:	bpl	1419c <__assert_fail@plt+0x323c>
   14104:	rsb	r2, r4, #-2147483648	; 0x80000000
   14108:	cmp	r8, r2
   1410c:	movge	r2, #0
   14110:	movlt	r2, #1
   14114:	mvn	r3, r9
   14118:	cmp	r2, #0
   1411c:	lsr	r3, r3, #31
   14120:	addeq	r4, r4, r8
   14124:	mvnne	r4, #-2147483648	; 0x80000000
   14128:	mov	r0, r3
   1412c:	cmp	r9, r4
   14130:	movge	r0, #0
   14134:	andlt	r0, r0, #1
   14138:	cmp	r0, #0
   1413c:	str	r3, [sp, #4]
   14140:	bne	14310 <__assert_fail@plt+0x33b0>
   14144:	cmp	r7, #0
   14148:	bge	1425c <__assert_fail@plt+0x32fc>
   1414c:	cmp	r4, #0
   14150:	bge	141b4 <__assert_fail@plt+0x3254>
   14154:	mov	r1, r7
   14158:	mvn	r0, #-2147483648	; 0x80000000
   1415c:	bl	14db8 <__assert_fail@plt+0x3e58>
   14160:	cmp	r0, r4
   14164:	movle	r0, #0
   14168:	movgt	r0, #1
   1416c:	cmp	r0, #0
   14170:	mvnne	r6, #-2147483648	; 0x80000000
   14174:	beq	141c4 <__assert_fail@plt+0x3264>
   14178:	mov	r1, r7
   1417c:	mov	r0, r6
   14180:	bl	14db8 <__assert_fail@plt+0x3e58>
   14184:	mov	r1, r7
   14188:	mov	r4, r0
   1418c:	mov	r0, r6
   14190:	bl	14fd8 <__assert_fail@plt+0x4078>
   14194:	sub	r1, r6, r1
   14198:	b	141d4 <__assert_fail@plt+0x3274>
   1419c:	mvn	r2, #-2147483648	; 0x80000000
   141a0:	sub	r2, r2, r4
   141a4:	cmp	r8, r2
   141a8:	movle	r2, #0
   141ac:	movgt	r2, #1
   141b0:	b	14114 <__assert_fail@plt+0x31b4>
   141b4:	cmn	r7, #1
   141b8:	movne	r1, r7
   141bc:	movne	r0, #-2147483648	; 0x80000000
   141c0:	bne	14328 <__assert_fail@plt+0x33c8>
   141c4:	mul	r1, r7, r4
   141c8:	cmp	r1, #63	; 0x3f
   141cc:	movle	r6, #64	; 0x40
   141d0:	ble	14178 <__assert_fail@plt+0x3218>
   141d4:	cmp	sl, #0
   141d8:	sub	r2, r4, r8
   141dc:	streq	sl, [fp]
   141e0:	cmp	r2, r5
   141e4:	bge	142b8 <__assert_fail@plt+0x3358>
   141e8:	cmp	r5, #0
   141ec:	bge	14284 <__assert_fail@plt+0x3324>
   141f0:	rsb	r2, r5, #-2147483648	; 0x80000000
   141f4:	cmp	r8, r2
   141f8:	movge	r2, #0
   141fc:	movlt	r2, #1
   14200:	cmp	r2, #0
   14204:	bne	14258 <__assert_fail@plt+0x32f8>
   14208:	ldr	r0, [sp, #4]
   1420c:	add	r5, r8, r5
   14210:	cmp	r9, r5
   14214:	movge	r0, #0
   14218:	andlt	r0, r0, #1
   1421c:	cmp	r0, #0
   14220:	mov	r4, r5
   14224:	bne	14258 <__assert_fail@plt+0x32f8>
   14228:	cmp	r7, #0
   1422c:	bge	142cc <__assert_fail@plt+0x336c>
   14230:	cmp	r5, #0
   14234:	bge	142a4 <__assert_fail@plt+0x3344>
   14238:	mov	r1, r7
   1423c:	mvn	r0, #-2147483648	; 0x80000000
   14240:	bl	14db8 <__assert_fail@plt+0x3e58>
   14244:	cmp	r5, r0
   14248:	movge	r0, #0
   1424c:	movlt	r0, #1
   14250:	cmp	r0, #0
   14254:	beq	142b4 <__assert_fail@plt+0x3354>
   14258:	bl	14404 <__assert_fail@plt+0x34a4>
   1425c:	beq	141c4 <__assert_fail@plt+0x3264>
   14260:	cmp	r4, #0
   14264:	bge	14320 <__assert_fail@plt+0x33c0>
   14268:	cmn	r4, #1
   1426c:	beq	141c4 <__assert_fail@plt+0x3264>
   14270:	mov	r1, r4
   14274:	mov	r0, #-2147483648	; 0x80000000
   14278:	bl	14db8 <__assert_fail@plt+0x3e58>
   1427c:	cmp	r7, r0
   14280:	b	14164 <__assert_fail@plt+0x3204>
   14284:	cmp	r8, #0
   14288:	blt	14208 <__assert_fail@plt+0x32a8>
   1428c:	mvn	r2, #-2147483648	; 0x80000000
   14290:	sub	r2, r2, r5
   14294:	cmp	r8, r2
   14298:	movle	r2, #0
   1429c:	movgt	r2, #1
   142a0:	b	14200 <__assert_fail@plt+0x32a0>
   142a4:	cmn	r7, #1
   142a8:	movne	r1, r7
   142ac:	movne	r0, #-2147483648	; 0x80000000
   142b0:	bne	14304 <__assert_fail@plt+0x33a4>
   142b4:	mul	r1, r5, r7
   142b8:	mov	r0, sl
   142bc:	bl	13f9c <__assert_fail@plt+0x303c>
   142c0:	str	r4, [fp]
   142c4:	add	sp, sp, #12
   142c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142cc:	beq	142b4 <__assert_fail@plt+0x3354>
   142d0:	cmp	r5, #0
   142d4:	movge	r1, r7
   142d8:	mvnge	r0, #-2147483648	; 0x80000000
   142dc:	bge	14304 <__assert_fail@plt+0x33a4>
   142e0:	cmn	r5, #1
   142e4:	beq	142b4 <__assert_fail@plt+0x3354>
   142e8:	mov	r1, r5
   142ec:	mov	r0, #-2147483648	; 0x80000000
   142f0:	bl	14db8 <__assert_fail@plt+0x3e58>
   142f4:	cmp	r7, r0
   142f8:	movle	r0, #0
   142fc:	movgt	r0, #1
   14300:	b	14250 <__assert_fail@plt+0x32f0>
   14304:	bl	14db8 <__assert_fail@plt+0x3e58>
   14308:	cmp	r5, r0
   1430c:	b	142f8 <__assert_fail@plt+0x3398>
   14310:	cmp	r7, #0
   14314:	mov	r4, r9
   14318:	blt	141b4 <__assert_fail@plt+0x3254>
   1431c:	beq	141c4 <__assert_fail@plt+0x3264>
   14320:	mov	r1, r7
   14324:	mvn	r0, #-2147483648	; 0x80000000
   14328:	bl	14db8 <__assert_fail@plt+0x3e58>
   1432c:	cmp	r0, r4
   14330:	movge	r0, #0
   14334:	movlt	r0, #1
   14338:	b	1416c <__assert_fail@plt+0x320c>
   1433c:	push	{r4, lr}
   14340:	bl	148a8 <__assert_fail@plt+0x3948>
   14344:	cmp	r0, #0
   14348:	popne	{r4, pc}
   1434c:	bl	14404 <__assert_fail@plt+0x34a4>
   14350:	mov	r1, #1
   14354:	b	1433c <__assert_fail@plt+0x33dc>
   14358:	push	{r4, lr}
   1435c:	bl	148a8 <__assert_fail@plt+0x3948>
   14360:	cmp	r0, #0
   14364:	popne	{r4, pc}
   14368:	bl	14404 <__assert_fail@plt+0x34a4>
   1436c:	mov	r1, #1
   14370:	b	14358 <__assert_fail@plt+0x33f8>
   14374:	push	{r4, r5, r6, lr}
   14378:	mov	r4, r1
   1437c:	mov	r5, r0
   14380:	mov	r0, r1
   14384:	bl	13f70 <__assert_fail@plt+0x3010>
   14388:	mov	r2, r4
   1438c:	mov	r1, r5
   14390:	pop	{r4, r5, r6, lr}
   14394:	b	10d50 <memcpy@plt>
   14398:	push	{r4, r5, r6, lr}
   1439c:	mov	r4, r1
   143a0:	mov	r5, r0
   143a4:	mov	r0, r1
   143a8:	bl	13f84 <__assert_fail@plt+0x3024>
   143ac:	mov	r2, r4
   143b0:	mov	r1, r5
   143b4:	pop	{r4, r5, r6, lr}
   143b8:	b	10d50 <memcpy@plt>
   143bc:	push	{r4, r5, r6, lr}
   143c0:	mov	r5, r0
   143c4:	add	r0, r1, #1
   143c8:	mov	r4, r1
   143cc:	bl	13f84 <__assert_fail@plt+0x3024>
   143d0:	mov	r2, #0
   143d4:	mov	r1, r5
   143d8:	strb	r2, [r0, r4]
   143dc:	mov	r2, r4
   143e0:	pop	{r4, r5, r6, lr}
   143e4:	b	10d50 <memcpy@plt>
   143e8:	push	{r4, lr}
   143ec:	mov	r4, r0
   143f0:	bl	10e58 <strlen@plt>
   143f4:	add	r1, r0, #1
   143f8:	mov	r0, r4
   143fc:	pop	{r4, lr}
   14400:	b	14374 <__assert_fail@plt+0x3414>
   14404:	ldr	r3, [pc, #44]	; 14438 <__assert_fail@plt+0x34d8>
   14408:	push	{r4, lr}
   1440c:	mov	r2, #5
   14410:	ldr	r1, [pc, #36]	; 1443c <__assert_fail@plt+0x34dc>
   14414:	mov	r0, #0
   14418:	ldr	r4, [r3]
   1441c:	bl	10d8c <dcgettext@plt>
   14420:	ldr	r2, [pc, #24]	; 14440 <__assert_fail@plt+0x34e0>
   14424:	mov	r1, #0
   14428:	mov	r3, r0
   1442c:	mov	r0, r4
   14430:	bl	10df8 <error@plt>
   14434:	bl	10f48 <abort@plt>
   14438:	strdeq	r6, [r2], -r4
   1443c:	ldrdeq	r5, [r1], -r5	; <UNPREDICTABLE>
   14440:	andeq	r5, r1, r5, asr #15
   14444:	push	{r4, r5, r6, r7, r8, lr}
   14448:	subs	r4, r1, #0
   1444c:	mov	r5, r0
   14450:	bge	1450c <__assert_fail@plt+0x35ac>
   14454:	ldrd	r6, [r0]
   14458:	cmp	r6, #0
   1445c:	sbcs	r3, r7, #0
   14460:	bge	144c0 <__assert_fail@plt+0x3560>
   14464:	asr	r3, r4, #31
   14468:	mov	r2, r4
   1446c:	mvn	r0, #0
   14470:	mvn	r1, #-2147483648	; 0x80000000
   14474:	bl	14ff8 <__assert_fail@plt+0x4098>
   14478:	cmp	r6, r0
   1447c:	sbcs	r3, r7, r1
   14480:	movlt	r3, #1
   14484:	movge	r3, #0
   14488:	cmp	r3, #0
   1448c:	movne	r2, #0
   14490:	movne	r3, #-2147483648	; 0x80000000
   14494:	bne	14500 <__assert_fail@plt+0x35a0>
   14498:	ldr	r2, [r5]
   1449c:	asr	r3, r4, #31
   144a0:	ldr	r1, [r5, #4]
   144a4:	mul	r3, r3, r2
   144a8:	mov	r0, #0
   144ac:	mla	r1, r4, r1, r3
   144b0:	umull	r2, r3, r2, r4
   144b4:	add	r3, r1, r3
   144b8:	strd	r2, [r5]
   144bc:	pop	{r4, r5, r6, r7, r8, pc}
   144c0:	cmn	r4, #1
   144c4:	moveq	r3, #0
   144c8:	beq	144f0 <__assert_fail@plt+0x3590>
   144cc:	mov	r2, r4
   144d0:	asr	r3, r4, #31
   144d4:	mov	r0, #0
   144d8:	mov	r1, #-2147483648	; 0x80000000
   144dc:	bl	14ff8 <__assert_fail@plt+0x4098>
   144e0:	cmp	r0, r6
   144e4:	sbcs	r3, r1, r7
   144e8:	movlt	r3, #1
   144ec:	movge	r3, #0
   144f0:	cmp	r3, #0
   144f4:	mvnne	r2, #0
   144f8:	mvnne	r3, #-2147483648	; 0x80000000
   144fc:	beq	14498 <__assert_fail@plt+0x3538>
   14500:	strd	r2, [r5]
   14504:	mov	r0, #1
   14508:	pop	{r4, r5, r6, r7, r8, pc}
   1450c:	beq	14498 <__assert_fail@plt+0x3538>
   14510:	ldrd	r6, [r0]
   14514:	cmp	r6, #0
   14518:	sbcs	r3, r7, #0
   1451c:	bge	14560 <__assert_fail@plt+0x3600>
   14520:	mvn	r3, #0
   14524:	cmp	r7, r3
   14528:	mvn	r2, #0
   1452c:	cmpeq	r6, r2
   14530:	moveq	r3, #0
   14534:	beq	14488 <__assert_fail@plt+0x3528>
   14538:	mov	r2, r6
   1453c:	mov	r3, r7
   14540:	mov	r0, #0
   14544:	mov	r1, #-2147483648	; 0x80000000
   14548:	bl	14ff8 <__assert_fail@plt+0x4098>
   1454c:	asr	r3, r4, #31
   14550:	mov	r2, r4
   14554:	cmp	r0, r4
   14558:	sbcs	r3, r1, r3
   1455c:	b	14480 <__assert_fail@plt+0x3520>
   14560:	mov	r2, r4
   14564:	asr	r3, r4, #31
   14568:	mvn	r0, #0
   1456c:	mvn	r1, #-2147483648	; 0x80000000
   14570:	b	144dc <__assert_fail@plt+0x357c>
   14574:	push	{r4, r5, r6, r7, r8, lr}
   14578:	mov	r6, r0
   1457c:	mov	r7, r1
   14580:	mov	r5, r2
   14584:	mov	r4, #0
   14588:	cmp	r5, #0
   1458c:	bne	14598 <__assert_fail@plt+0x3638>
   14590:	mov	r0, r4
   14594:	pop	{r4, r5, r6, r7, r8, pc}
   14598:	mov	r1, r7
   1459c:	mov	r0, r6
   145a0:	bl	14444 <__assert_fail@plt+0x34e4>
   145a4:	sub	r5, r5, #1
   145a8:	orr	r4, r4, r0
   145ac:	b	14588 <__assert_fail@plt+0x3628>
   145b0:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   145b4:	cmp	r2, #36	; 0x24
   145b8:	ldr	r9, [sp, #48]	; 0x30
   145bc:	bls	145d4 <__assert_fail@plt+0x3674>
   145c0:	ldr	r3, [pc, #724]	; 1489c <__assert_fail@plt+0x393c>
   145c4:	mov	r2, #85	; 0x55
   145c8:	ldr	r1, [pc, #720]	; 148a0 <__assert_fail@plt+0x3940>
   145cc:	ldr	r0, [pc, #720]	; 148a4 <__assert_fail@plt+0x3944>
   145d0:	bl	10f60 <__assert_fail@plt>
   145d4:	cmp	r1, #0
   145d8:	mov	r7, r1
   145dc:	mov	r4, r0
   145e0:	addeq	r7, sp, #4
   145e4:	mov	r6, r2
   145e8:	mov	r8, r3
   145ec:	bl	10e70 <__errno_location@plt>
   145f0:	mov	r5, #0
   145f4:	mov	r2, r6
   145f8:	mov	r1, r7
   145fc:	str	r5, [r0]
   14600:	mov	sl, r0
   14604:	mov	r0, r4
   14608:	bl	10ec4 <strtoimax@plt>
   1460c:	ldr	r6, [r7]
   14610:	cmp	r4, r6
   14614:	strd	r0, [sp, #8]
   14618:	bne	1467c <__assert_fail@plt+0x371c>
   1461c:	cmp	r9, r5
   14620:	beq	14894 <__assert_fail@plt+0x3934>
   14624:	ldrb	r1, [r6]
   14628:	cmp	r1, r5
   1462c:	beq	14894 <__assert_fail@plt+0x3934>
   14630:	mov	r0, r9
   14634:	bl	10e64 <strchr@plt>
   14638:	cmp	r0, r5
   1463c:	beq	14894 <__assert_fail@plt+0x3934>
   14640:	mov	r2, #1
   14644:	mov	r3, #0
   14648:	strd	r2, [sp, #8]
   1464c:	ldrb	r4, [r6]
   14650:	cmp	r4, #0
   14654:	beq	14794 <__assert_fail@plt+0x3834>
   14658:	mov	r1, r4
   1465c:	mov	r0, r9
   14660:	bl	10e64 <strchr@plt>
   14664:	cmp	r0, #0
   14668:	bne	146ac <__assert_fail@plt+0x374c>
   1466c:	ldrd	r2, [sp, #8]
   14670:	orr	r5, r5, #2
   14674:	strd	r2, [r8]
   14678:	b	146a0 <__assert_fail@plt+0x3740>
   1467c:	ldr	r5, [sl]
   14680:	cmp	r5, #0
   14684:	beq	14694 <__assert_fail@plt+0x3734>
   14688:	cmp	r5, #34	; 0x22
   1468c:	bne	14894 <__assert_fail@plt+0x3934>
   14690:	mov	r5, #1
   14694:	cmp	r9, #0
   14698:	bne	1464c <__assert_fail@plt+0x36ec>
   1469c:	strd	r0, [r8]
   146a0:	mov	r0, r5
   146a4:	add	sp, sp, #16
   146a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   146ac:	cmp	r4, #84	; 0x54
   146b0:	beq	14704 <__assert_fail@plt+0x37a4>
   146b4:	bhi	146ec <__assert_fail@plt+0x378c>
   146b8:	cmp	r4, #75	; 0x4b
   146bc:	beq	14704 <__assert_fail@plt+0x37a4>
   146c0:	bhi	146dc <__assert_fail@plt+0x377c>
   146c4:	cmp	r4, #69	; 0x45
   146c8:	beq	14704 <__assert_fail@plt+0x37a4>
   146cc:	cmp	r4, #71	; 0x47
   146d0:	beq	14704 <__assert_fail@plt+0x37a4>
   146d4:	mov	r6, #1
   146d8:	b	147c8 <__assert_fail@plt+0x3868>
   146dc:	cmp	r4, #77	; 0x4d
   146e0:	beq	14704 <__assert_fail@plt+0x37a4>
   146e4:	cmp	r4, #80	; 0x50
   146e8:	b	146d0 <__assert_fail@plt+0x3770>
   146ec:	cmp	r4, #103	; 0x67
   146f0:	beq	14704 <__assert_fail@plt+0x37a4>
   146f4:	bhi	147a0 <__assert_fail@plt+0x3840>
   146f8:	sub	r3, r4, #89	; 0x59
   146fc:	cmp	r3, #1
   14700:	bhi	146d4 <__assert_fail@plt+0x3774>
   14704:	mov	r1, #48	; 0x30
   14708:	mov	r0, r9
   1470c:	bl	10e64 <strchr@plt>
   14710:	cmp	r0, #0
   14714:	beq	146d4 <__assert_fail@plt+0x3774>
   14718:	ldrb	r3, [r6, #1]
   1471c:	cmp	r3, #68	; 0x44
   14720:	beq	14734 <__assert_fail@plt+0x37d4>
   14724:	cmp	r3, #105	; 0x69
   14728:	beq	147b8 <__assert_fail@plt+0x3858>
   1472c:	cmp	r3, #66	; 0x42
   14730:	bne	146d4 <__assert_fail@plt+0x3774>
   14734:	mov	r6, #2
   14738:	mov	r1, #1000	; 0x3e8
   1473c:	cmp	r4, #89	; 0x59
   14740:	beq	1487c <__assert_fail@plt+0x391c>
   14744:	bhi	147f0 <__assert_fail@plt+0x3890>
   14748:	cmp	r4, #75	; 0x4b
   1474c:	beq	14830 <__assert_fail@plt+0x38d0>
   14750:	bhi	147d0 <__assert_fail@plt+0x3870>
   14754:	cmp	r4, #69	; 0x45
   14758:	beq	14858 <__assert_fail@plt+0x38f8>
   1475c:	cmp	r4, #71	; 0x47
   14760:	beq	14864 <__assert_fail@plt+0x3904>
   14764:	cmp	r4, #66	; 0x42
   14768:	moveq	r1, #1024	; 0x400
   1476c:	bne	1466c <__assert_fail@plt+0x370c>
   14770:	add	r0, sp, #8
   14774:	bl	14444 <__assert_fail@plt+0x34e4>
   14778:	ldr	r3, [r7]
   1477c:	orr	r5, r5, r0
   14780:	add	r2, r3, r6
   14784:	str	r2, [r7]
   14788:	ldrb	r3, [r3, r6]
   1478c:	cmp	r3, #0
   14790:	orrne	r5, r5, #2
   14794:	ldrd	r2, [sp, #8]
   14798:	strd	r2, [r8]
   1479c:	b	146a0 <__assert_fail@plt+0x3740>
   147a0:	cmp	r4, #109	; 0x6d
   147a4:	beq	14704 <__assert_fail@plt+0x37a4>
   147a8:	cmp	r4, #116	; 0x74
   147ac:	beq	14704 <__assert_fail@plt+0x37a4>
   147b0:	cmp	r4, #107	; 0x6b
   147b4:	b	146d0 <__assert_fail@plt+0x3770>
   147b8:	ldrb	r6, [r6, #2]
   147bc:	cmp	r6, #66	; 0x42
   147c0:	movne	r6, #1
   147c4:	moveq	r6, #3
   147c8:	mov	r1, #1024	; 0x400
   147cc:	b	1473c <__assert_fail@plt+0x37dc>
   147d0:	cmp	r4, #80	; 0x50
   147d4:	beq	1486c <__assert_fail@plt+0x390c>
   147d8:	cmp	r4, #84	; 0x54
   147dc:	beq	14874 <__assert_fail@plt+0x3914>
   147e0:	cmp	r4, #77	; 0x4d
   147e4:	bne	1466c <__assert_fail@plt+0x370c>
   147e8:	mov	r2, #2
   147ec:	b	1485c <__assert_fail@plt+0x38fc>
   147f0:	cmp	r4, #103	; 0x67
   147f4:	beq	14864 <__assert_fail@plt+0x3904>
   147f8:	bhi	1481c <__assert_fail@plt+0x38bc>
   147fc:	cmp	r4, #98	; 0x62
   14800:	beq	14850 <__assert_fail@plt+0x38f0>
   14804:	cmp	r4, #99	; 0x63
   14808:	beq	1488c <__assert_fail@plt+0x392c>
   1480c:	cmp	r4, #90	; 0x5a
   14810:	bne	1466c <__assert_fail@plt+0x370c>
   14814:	mov	r2, #7
   14818:	b	1485c <__assert_fail@plt+0x38fc>
   1481c:	cmp	r4, #109	; 0x6d
   14820:	beq	147e8 <__assert_fail@plt+0x3888>
   14824:	bhi	14838 <__assert_fail@plt+0x38d8>
   14828:	cmp	r4, #107	; 0x6b
   1482c:	bne	1466c <__assert_fail@plt+0x370c>
   14830:	mov	r2, #1
   14834:	b	1485c <__assert_fail@plt+0x38fc>
   14838:	cmp	r4, #116	; 0x74
   1483c:	beq	14874 <__assert_fail@plt+0x3914>
   14840:	cmp	r4, #119	; 0x77
   14844:	moveq	r1, #2
   14848:	beq	14770 <__assert_fail@plt+0x3810>
   1484c:	b	1466c <__assert_fail@plt+0x370c>
   14850:	mov	r1, #512	; 0x200
   14854:	b	14770 <__assert_fail@plt+0x3810>
   14858:	mov	r2, #6
   1485c:	add	r0, sp, #8
   14860:	b	14884 <__assert_fail@plt+0x3924>
   14864:	mov	r2, #3
   14868:	b	1485c <__assert_fail@plt+0x38fc>
   1486c:	mov	r2, #5
   14870:	b	1485c <__assert_fail@plt+0x38fc>
   14874:	mov	r2, #4
   14878:	b	1485c <__assert_fail@plt+0x38fc>
   1487c:	mov	r2, #8
   14880:	add	r0, sp, r2
   14884:	bl	14574 <__assert_fail@plt+0x3614>
   14888:	b	14778 <__assert_fail@plt+0x3818>
   1488c:	mov	r0, #0
   14890:	b	14778 <__assert_fail@plt+0x3818>
   14894:	mov	r5, #4
   14898:	b	146a0 <__assert_fail@plt+0x3740>
   1489c:	andeq	r5, r1, r6, ror #27
   148a0:	strdeq	r5, [r1], -r1
   148a4:	strdeq	r5, [r1], -pc	; <UNPREDICTABLE>
   148a8:	cmp	r1, #0
   148ac:	cmpne	r0, #0
   148b0:	moveq	r1, #1
   148b4:	moveq	r0, r1
   148b8:	umull	r2, r3, r0, r1
   148bc:	adds	r3, r3, #0
   148c0:	movne	r3, #1
   148c4:	cmp	r2, #0
   148c8:	blt	148d8 <__assert_fail@plt+0x3978>
   148cc:	cmp	r3, #0
   148d0:	bne	148d8 <__assert_fail@plt+0x3978>
   148d4:	b	10ce4 <calloc@plt>
   148d8:	push	{r4, lr}
   148dc:	bl	10e70 <__errno_location@plt>
   148e0:	mov	r3, #12
   148e4:	str	r3, [r0]
   148e8:	mov	r0, #0
   148ec:	pop	{r4, pc}
   148f0:	cmp	r0, #0
   148f4:	mov	r3, #0
   148f8:	moveq	r0, #1
   148fc:	adds	r3, r3, #0
   14900:	movne	r3, #1
   14904:	cmp	r0, #0
   14908:	blt	14918 <__assert_fail@plt+0x39b8>
   1490c:	cmp	r3, #0
   14910:	bne	14918 <__assert_fail@plt+0x39b8>
   14914:	b	10e04 <malloc@plt>
   14918:	push	{r4, lr}
   1491c:	bl	10e70 <__errno_location@plt>
   14920:	mov	r3, #12
   14924:	str	r3, [r0]
   14928:	mov	r0, #0
   1492c:	pop	{r4, pc}
   14930:	cmp	r0, #0
   14934:	push	{r4, lr}
   14938:	mov	r4, r1
   1493c:	bne	1494c <__assert_fail@plt+0x39ec>
   14940:	mov	r0, r1
   14944:	pop	{r4, lr}
   14948:	b	148f0 <__assert_fail@plt+0x3990>
   1494c:	cmp	r1, #0
   14950:	bne	14960 <__assert_fail@plt+0x3a00>
   14954:	bl	12340 <__assert_fail@plt+0x13e0>
   14958:	mov	r0, #0
   1495c:	pop	{r4, pc}
   14960:	cmp	r1, #0
   14964:	blt	14974 <__assert_fail@plt+0x3a14>
   14968:	mov	r3, #0
   1496c:	cmp	r3, r3
   14970:	beq	14984 <__assert_fail@plt+0x3a24>
   14974:	bl	10e70 <__errno_location@plt>
   14978:	mov	r3, #12
   1497c:	str	r3, [r0]
   14980:	b	14958 <__assert_fail@plt+0x39f8>
   14984:	pop	{r4, lr}
   14988:	b	10d98 <realloc@plt>
   1498c:	push	{r4, r5, r6, lr}
   14990:	mov	r4, r0
   14994:	bl	10dd4 <__fpending@plt>
   14998:	mov	r5, r0
   1499c:	mov	r0, r4
   149a0:	bl	10de0 <ferror_unlocked@plt>
   149a4:	mov	r6, r0
   149a8:	mov	r0, r4
   149ac:	bl	12248 <__assert_fail@plt+0x12e8>
   149b0:	cmp	r6, #0
   149b4:	mov	r4, r0
   149b8:	bne	149e4 <__assert_fail@plt+0x3a84>
   149bc:	cmp	r0, #0
   149c0:	beq	149dc <__assert_fail@plt+0x3a7c>
   149c4:	cmp	r5, #0
   149c8:	bne	149f4 <__assert_fail@plt+0x3a94>
   149cc:	bl	10e70 <__errno_location@plt>
   149d0:	ldr	r4, [r0]
   149d4:	subs	r4, r4, #9
   149d8:	mvnne	r4, #0
   149dc:	mov	r0, r4
   149e0:	pop	{r4, r5, r6, pc}
   149e4:	cmp	r0, #0
   149e8:	bne	149f4 <__assert_fail@plt+0x3a94>
   149ec:	bl	10e70 <__errno_location@plt>
   149f0:	str	r4, [r0]
   149f4:	mvn	r4, #0
   149f8:	b	149dc <__assert_fail@plt+0x3a7c>
   149fc:	push	{r4, lr}
   14a00:	mov	r0, #14
   14a04:	bl	10f00 <nl_langinfo@plt>
   14a08:	ldr	r3, [pc, #24]	; 14a28 <__assert_fail@plt+0x3ac8>
   14a0c:	cmp	r0, #0
   14a10:	moveq	r0, r3
   14a14:	ldr	r3, [pc, #16]	; 14a2c <__assert_fail@plt+0x3acc>
   14a18:	ldrb	r2, [r0]
   14a1c:	cmp	r2, #0
   14a20:	moveq	r0, r3
   14a24:	pop	{r4, pc}
   14a28:	muleq	r1, r6, r7
   14a2c:	andeq	r5, r1, r5, lsr #28
   14a30:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14a34:	subs	r5, r0, #0
   14a38:	addeq	r5, sp, #4
   14a3c:	mov	r0, r5
   14a40:	mov	r7, r2
   14a44:	mov	r6, r1
   14a48:	bl	10dec <mbrtowc@plt>
   14a4c:	cmp	r7, #0
   14a50:	cmnne	r0, #3
   14a54:	mov	r4, r0
   14a58:	bls	14a74 <__assert_fail@plt+0x3b14>
   14a5c:	mov	r0, #0
   14a60:	bl	14acc <__assert_fail@plt+0x3b6c>
   14a64:	cmp	r0, #0
   14a68:	moveq	r4, #1
   14a6c:	ldrbeq	r3, [r6]
   14a70:	streq	r3, [r5]
   14a74:	mov	r0, r4
   14a78:	add	sp, sp, #12
   14a7c:	pop	{r4, r5, r6, r7, pc}
   14a80:	push	{r4, r5, r6, lr}
   14a84:	subs	r4, r2, #0
   14a88:	mov	r6, r0
   14a8c:	mov	r5, r1
   14a90:	beq	14aa8 <__assert_fail@plt+0x3b48>
   14a94:	mov	r1, r4
   14a98:	mvn	r0, #0
   14a9c:	bl	14bac <__assert_fail@plt+0x3c4c>
   14aa0:	cmp	r0, r5
   14aa4:	bcc	14ab8 <__assert_fail@plt+0x3b58>
   14aa8:	mul	r1, r5, r4
   14aac:	mov	r0, r6
   14ab0:	pop	{r4, r5, r6, lr}
   14ab4:	b	14930 <__assert_fail@plt+0x39d0>
   14ab8:	bl	10e70 <__errno_location@plt>
   14abc:	mov	r3, #12
   14ac0:	str	r3, [r0]
   14ac4:	mov	r0, #0
   14ac8:	pop	{r4, r5, r6, pc}
   14acc:	push	{lr}		; (str lr, [sp, #-4]!)
   14ad0:	sub	sp, sp, #268	; 0x10c
   14ad4:	ldr	r2, [pc, #64]	; 14b1c <__assert_fail@plt+0x3bbc>
   14ad8:	add	r1, sp, #4
   14adc:	bl	14b28 <__assert_fail@plt+0x3bc8>
   14ae0:	cmp	r0, #0
   14ae4:	movne	r0, #0
   14ae8:	bne	14b14 <__assert_fail@plt+0x3bb4>
   14aec:	ldr	r1, [pc, #44]	; 14b20 <__assert_fail@plt+0x3bc0>
   14af0:	add	r0, sp, #4
   14af4:	bl	10d08 <strcmp@plt>
   14af8:	cmp	r0, #0
   14afc:	beq	14b14 <__assert_fail@plt+0x3bb4>
   14b00:	ldr	r1, [pc, #28]	; 14b24 <__assert_fail@plt+0x3bc4>
   14b04:	add	r0, sp, #4
   14b08:	bl	10d08 <strcmp@plt>
   14b0c:	adds	r0, r0, #0
   14b10:	movne	r0, #1
   14b14:	add	sp, sp, #268	; 0x10c
   14b18:	pop	{pc}		; (ldr pc, [sp], #4)
   14b1c:	andeq	r0, r0, r1, lsl #2
   14b20:	andeq	r5, r1, fp, lsr #28
   14b24:	andeq	r5, r1, sp, lsr #28
   14b28:	push	{r4, r5, r6, lr}
   14b2c:	mov	r5, r1
   14b30:	mov	r1, #0
   14b34:	mov	r4, r2
   14b38:	bl	10ee8 <setlocale@plt>
   14b3c:	subs	r6, r0, #0
   14b40:	bne	14b54 <__assert_fail@plt+0x3bf4>
   14b44:	cmp	r4, #0
   14b48:	strbne	r6, [r5]
   14b4c:	mov	r0, #22
   14b50:	pop	{r4, r5, r6, pc}
   14b54:	bl	10e58 <strlen@plt>
   14b58:	cmp	r4, r0
   14b5c:	bls	14b78 <__assert_fail@plt+0x3c18>
   14b60:	add	r2, r0, #1
   14b64:	mov	r1, r6
   14b68:	mov	r0, r5
   14b6c:	bl	10d50 <memcpy@plt>
   14b70:	mov	r0, #0
   14b74:	pop	{r4, r5, r6, pc}
   14b78:	cmp	r4, #0
   14b7c:	beq	14b9c <__assert_fail@plt+0x3c3c>
   14b80:	sub	r4, r4, #1
   14b84:	mov	r2, r4
   14b88:	mov	r1, r6
   14b8c:	mov	r0, r5
   14b90:	bl	10d50 <memcpy@plt>
   14b94:	mov	r3, #0
   14b98:	strb	r3, [r5, r4]
   14b9c:	mov	r0, #34	; 0x22
   14ba0:	pop	{r4, r5, r6, pc}
   14ba4:	mov	r1, #0
   14ba8:	b	10ee8 <setlocale@plt>
   14bac:	subs	r2, r1, #1
   14bb0:	bxeq	lr
   14bb4:	bcc	14d8c <__assert_fail@plt+0x3e2c>
   14bb8:	cmp	r0, r1
   14bbc:	bls	14d70 <__assert_fail@plt+0x3e10>
   14bc0:	tst	r1, r2
   14bc4:	beq	14d7c <__assert_fail@plt+0x3e1c>
   14bc8:	clz	r3, r0
   14bcc:	clz	r2, r1
   14bd0:	sub	r3, r2, r3
   14bd4:	rsbs	r3, r3, #31
   14bd8:	addne	r3, r3, r3, lsl #1
   14bdc:	mov	r2, #0
   14be0:	addne	pc, pc, r3, lsl #2
   14be4:	nop			; (mov r0, r0)
   14be8:	cmp	r0, r1, lsl #31
   14bec:	adc	r2, r2, r2
   14bf0:	subcs	r0, r0, r1, lsl #31
   14bf4:	cmp	r0, r1, lsl #30
   14bf8:	adc	r2, r2, r2
   14bfc:	subcs	r0, r0, r1, lsl #30
   14c00:	cmp	r0, r1, lsl #29
   14c04:	adc	r2, r2, r2
   14c08:	subcs	r0, r0, r1, lsl #29
   14c0c:	cmp	r0, r1, lsl #28
   14c10:	adc	r2, r2, r2
   14c14:	subcs	r0, r0, r1, lsl #28
   14c18:	cmp	r0, r1, lsl #27
   14c1c:	adc	r2, r2, r2
   14c20:	subcs	r0, r0, r1, lsl #27
   14c24:	cmp	r0, r1, lsl #26
   14c28:	adc	r2, r2, r2
   14c2c:	subcs	r0, r0, r1, lsl #26
   14c30:	cmp	r0, r1, lsl #25
   14c34:	adc	r2, r2, r2
   14c38:	subcs	r0, r0, r1, lsl #25
   14c3c:	cmp	r0, r1, lsl #24
   14c40:	adc	r2, r2, r2
   14c44:	subcs	r0, r0, r1, lsl #24
   14c48:	cmp	r0, r1, lsl #23
   14c4c:	adc	r2, r2, r2
   14c50:	subcs	r0, r0, r1, lsl #23
   14c54:	cmp	r0, r1, lsl #22
   14c58:	adc	r2, r2, r2
   14c5c:	subcs	r0, r0, r1, lsl #22
   14c60:	cmp	r0, r1, lsl #21
   14c64:	adc	r2, r2, r2
   14c68:	subcs	r0, r0, r1, lsl #21
   14c6c:	cmp	r0, r1, lsl #20
   14c70:	adc	r2, r2, r2
   14c74:	subcs	r0, r0, r1, lsl #20
   14c78:	cmp	r0, r1, lsl #19
   14c7c:	adc	r2, r2, r2
   14c80:	subcs	r0, r0, r1, lsl #19
   14c84:	cmp	r0, r1, lsl #18
   14c88:	adc	r2, r2, r2
   14c8c:	subcs	r0, r0, r1, lsl #18
   14c90:	cmp	r0, r1, lsl #17
   14c94:	adc	r2, r2, r2
   14c98:	subcs	r0, r0, r1, lsl #17
   14c9c:	cmp	r0, r1, lsl #16
   14ca0:	adc	r2, r2, r2
   14ca4:	subcs	r0, r0, r1, lsl #16
   14ca8:	cmp	r0, r1, lsl #15
   14cac:	adc	r2, r2, r2
   14cb0:	subcs	r0, r0, r1, lsl #15
   14cb4:	cmp	r0, r1, lsl #14
   14cb8:	adc	r2, r2, r2
   14cbc:	subcs	r0, r0, r1, lsl #14
   14cc0:	cmp	r0, r1, lsl #13
   14cc4:	adc	r2, r2, r2
   14cc8:	subcs	r0, r0, r1, lsl #13
   14ccc:	cmp	r0, r1, lsl #12
   14cd0:	adc	r2, r2, r2
   14cd4:	subcs	r0, r0, r1, lsl #12
   14cd8:	cmp	r0, r1, lsl #11
   14cdc:	adc	r2, r2, r2
   14ce0:	subcs	r0, r0, r1, lsl #11
   14ce4:	cmp	r0, r1, lsl #10
   14ce8:	adc	r2, r2, r2
   14cec:	subcs	r0, r0, r1, lsl #10
   14cf0:	cmp	r0, r1, lsl #9
   14cf4:	adc	r2, r2, r2
   14cf8:	subcs	r0, r0, r1, lsl #9
   14cfc:	cmp	r0, r1, lsl #8
   14d00:	adc	r2, r2, r2
   14d04:	subcs	r0, r0, r1, lsl #8
   14d08:	cmp	r0, r1, lsl #7
   14d0c:	adc	r2, r2, r2
   14d10:	subcs	r0, r0, r1, lsl #7
   14d14:	cmp	r0, r1, lsl #6
   14d18:	adc	r2, r2, r2
   14d1c:	subcs	r0, r0, r1, lsl #6
   14d20:	cmp	r0, r1, lsl #5
   14d24:	adc	r2, r2, r2
   14d28:	subcs	r0, r0, r1, lsl #5
   14d2c:	cmp	r0, r1, lsl #4
   14d30:	adc	r2, r2, r2
   14d34:	subcs	r0, r0, r1, lsl #4
   14d38:	cmp	r0, r1, lsl #3
   14d3c:	adc	r2, r2, r2
   14d40:	subcs	r0, r0, r1, lsl #3
   14d44:	cmp	r0, r1, lsl #2
   14d48:	adc	r2, r2, r2
   14d4c:	subcs	r0, r0, r1, lsl #2
   14d50:	cmp	r0, r1, lsl #1
   14d54:	adc	r2, r2, r2
   14d58:	subcs	r0, r0, r1, lsl #1
   14d5c:	cmp	r0, r1
   14d60:	adc	r2, r2, r2
   14d64:	subcs	r0, r0, r1
   14d68:	mov	r0, r2
   14d6c:	bx	lr
   14d70:	moveq	r0, #1
   14d74:	movne	r0, #0
   14d78:	bx	lr
   14d7c:	clz	r2, r1
   14d80:	rsb	r2, r2, #31
   14d84:	lsr	r0, r0, r2
   14d88:	bx	lr
   14d8c:	cmp	r0, #0
   14d90:	mvnne	r0, #0
   14d94:	b	150cc <__assert_fail@plt+0x416c>
   14d98:	cmp	r1, #0
   14d9c:	beq	14d8c <__assert_fail@plt+0x3e2c>
   14da0:	push	{r0, r1, lr}
   14da4:	bl	14bac <__assert_fail@plt+0x3c4c>
   14da8:	pop	{r1, r2, lr}
   14dac:	mul	r3, r2, r0
   14db0:	sub	r1, r1, r3
   14db4:	bx	lr
   14db8:	cmp	r1, #0
   14dbc:	beq	14fc8 <__assert_fail@plt+0x4068>
   14dc0:	eor	ip, r0, r1
   14dc4:	rsbmi	r1, r1, #0
   14dc8:	subs	r2, r1, #1
   14dcc:	beq	14f94 <__assert_fail@plt+0x4034>
   14dd0:	movs	r3, r0
   14dd4:	rsbmi	r3, r0, #0
   14dd8:	cmp	r3, r1
   14ddc:	bls	14fa0 <__assert_fail@plt+0x4040>
   14de0:	tst	r1, r2
   14de4:	beq	14fb0 <__assert_fail@plt+0x4050>
   14de8:	clz	r2, r3
   14dec:	clz	r0, r1
   14df0:	sub	r2, r0, r2
   14df4:	rsbs	r2, r2, #31
   14df8:	addne	r2, r2, r2, lsl #1
   14dfc:	mov	r0, #0
   14e00:	addne	pc, pc, r2, lsl #2
   14e04:	nop			; (mov r0, r0)
   14e08:	cmp	r3, r1, lsl #31
   14e0c:	adc	r0, r0, r0
   14e10:	subcs	r3, r3, r1, lsl #31
   14e14:	cmp	r3, r1, lsl #30
   14e18:	adc	r0, r0, r0
   14e1c:	subcs	r3, r3, r1, lsl #30
   14e20:	cmp	r3, r1, lsl #29
   14e24:	adc	r0, r0, r0
   14e28:	subcs	r3, r3, r1, lsl #29
   14e2c:	cmp	r3, r1, lsl #28
   14e30:	adc	r0, r0, r0
   14e34:	subcs	r3, r3, r1, lsl #28
   14e38:	cmp	r3, r1, lsl #27
   14e3c:	adc	r0, r0, r0
   14e40:	subcs	r3, r3, r1, lsl #27
   14e44:	cmp	r3, r1, lsl #26
   14e48:	adc	r0, r0, r0
   14e4c:	subcs	r3, r3, r1, lsl #26
   14e50:	cmp	r3, r1, lsl #25
   14e54:	adc	r0, r0, r0
   14e58:	subcs	r3, r3, r1, lsl #25
   14e5c:	cmp	r3, r1, lsl #24
   14e60:	adc	r0, r0, r0
   14e64:	subcs	r3, r3, r1, lsl #24
   14e68:	cmp	r3, r1, lsl #23
   14e6c:	adc	r0, r0, r0
   14e70:	subcs	r3, r3, r1, lsl #23
   14e74:	cmp	r3, r1, lsl #22
   14e78:	adc	r0, r0, r0
   14e7c:	subcs	r3, r3, r1, lsl #22
   14e80:	cmp	r3, r1, lsl #21
   14e84:	adc	r0, r0, r0
   14e88:	subcs	r3, r3, r1, lsl #21
   14e8c:	cmp	r3, r1, lsl #20
   14e90:	adc	r0, r0, r0
   14e94:	subcs	r3, r3, r1, lsl #20
   14e98:	cmp	r3, r1, lsl #19
   14e9c:	adc	r0, r0, r0
   14ea0:	subcs	r3, r3, r1, lsl #19
   14ea4:	cmp	r3, r1, lsl #18
   14ea8:	adc	r0, r0, r0
   14eac:	subcs	r3, r3, r1, lsl #18
   14eb0:	cmp	r3, r1, lsl #17
   14eb4:	adc	r0, r0, r0
   14eb8:	subcs	r3, r3, r1, lsl #17
   14ebc:	cmp	r3, r1, lsl #16
   14ec0:	adc	r0, r0, r0
   14ec4:	subcs	r3, r3, r1, lsl #16
   14ec8:	cmp	r3, r1, lsl #15
   14ecc:	adc	r0, r0, r0
   14ed0:	subcs	r3, r3, r1, lsl #15
   14ed4:	cmp	r3, r1, lsl #14
   14ed8:	adc	r0, r0, r0
   14edc:	subcs	r3, r3, r1, lsl #14
   14ee0:	cmp	r3, r1, lsl #13
   14ee4:	adc	r0, r0, r0
   14ee8:	subcs	r3, r3, r1, lsl #13
   14eec:	cmp	r3, r1, lsl #12
   14ef0:	adc	r0, r0, r0
   14ef4:	subcs	r3, r3, r1, lsl #12
   14ef8:	cmp	r3, r1, lsl #11
   14efc:	adc	r0, r0, r0
   14f00:	subcs	r3, r3, r1, lsl #11
   14f04:	cmp	r3, r1, lsl #10
   14f08:	adc	r0, r0, r0
   14f0c:	subcs	r3, r3, r1, lsl #10
   14f10:	cmp	r3, r1, lsl #9
   14f14:	adc	r0, r0, r0
   14f18:	subcs	r3, r3, r1, lsl #9
   14f1c:	cmp	r3, r1, lsl #8
   14f20:	adc	r0, r0, r0
   14f24:	subcs	r3, r3, r1, lsl #8
   14f28:	cmp	r3, r1, lsl #7
   14f2c:	adc	r0, r0, r0
   14f30:	subcs	r3, r3, r1, lsl #7
   14f34:	cmp	r3, r1, lsl #6
   14f38:	adc	r0, r0, r0
   14f3c:	subcs	r3, r3, r1, lsl #6
   14f40:	cmp	r3, r1, lsl #5
   14f44:	adc	r0, r0, r0
   14f48:	subcs	r3, r3, r1, lsl #5
   14f4c:	cmp	r3, r1, lsl #4
   14f50:	adc	r0, r0, r0
   14f54:	subcs	r3, r3, r1, lsl #4
   14f58:	cmp	r3, r1, lsl #3
   14f5c:	adc	r0, r0, r0
   14f60:	subcs	r3, r3, r1, lsl #3
   14f64:	cmp	r3, r1, lsl #2
   14f68:	adc	r0, r0, r0
   14f6c:	subcs	r3, r3, r1, lsl #2
   14f70:	cmp	r3, r1, lsl #1
   14f74:	adc	r0, r0, r0
   14f78:	subcs	r3, r3, r1, lsl #1
   14f7c:	cmp	r3, r1
   14f80:	adc	r0, r0, r0
   14f84:	subcs	r3, r3, r1
   14f88:	cmp	ip, #0
   14f8c:	rsbmi	r0, r0, #0
   14f90:	bx	lr
   14f94:	teq	ip, r0
   14f98:	rsbmi	r0, r0, #0
   14f9c:	bx	lr
   14fa0:	movcc	r0, #0
   14fa4:	asreq	r0, ip, #31
   14fa8:	orreq	r0, r0, #1
   14fac:	bx	lr
   14fb0:	clz	r2, r1
   14fb4:	rsb	r2, r2, #31
   14fb8:	cmp	ip, #0
   14fbc:	lsr	r0, r3, r2
   14fc0:	rsbmi	r0, r0, #0
   14fc4:	bx	lr
   14fc8:	cmp	r0, #0
   14fcc:	mvngt	r0, #-2147483648	; 0x80000000
   14fd0:	movlt	r0, #-2147483648	; 0x80000000
   14fd4:	b	150cc <__assert_fail@plt+0x416c>
   14fd8:	cmp	r1, #0
   14fdc:	beq	14fc8 <__assert_fail@plt+0x4068>
   14fe0:	push	{r0, r1, lr}
   14fe4:	bl	14dc0 <__assert_fail@plt+0x3e60>
   14fe8:	pop	{r1, r2, lr}
   14fec:	mul	r3, r2, r0
   14ff0:	sub	r1, r1, r3
   14ff4:	bx	lr
   14ff8:	cmp	r3, #0
   14ffc:	cmpeq	r2, #0
   15000:	bne	15024 <__assert_fail@plt+0x40c4>
   15004:	cmp	r1, #0
   15008:	movlt	r1, #-2147483648	; 0x80000000
   1500c:	movlt	r0, #0
   15010:	blt	15020 <__assert_fail@plt+0x40c0>
   15014:	cmpeq	r0, #0
   15018:	mvnne	r1, #-2147483648	; 0x80000000
   1501c:	mvnne	r0, #0
   15020:	b	150cc <__assert_fail@plt+0x416c>
   15024:	sub	sp, sp, #8
   15028:	push	{sp, lr}
   1502c:	cmp	r1, #0
   15030:	blt	15050 <__assert_fail@plt+0x40f0>
   15034:	cmp	r3, #0
   15038:	blt	15084 <__assert_fail@plt+0x4124>
   1503c:	bl	150dc <__assert_fail@plt+0x417c>
   15040:	ldr	lr, [sp, #4]
   15044:	add	sp, sp, #8
   15048:	pop	{r2, r3}
   1504c:	bx	lr
   15050:	rsbs	r0, r0, #0
   15054:	sbc	r1, r1, r1, lsl #1
   15058:	cmp	r3, #0
   1505c:	blt	150a8 <__assert_fail@plt+0x4148>
   15060:	bl	150dc <__assert_fail@plt+0x417c>
   15064:	ldr	lr, [sp, #4]
   15068:	add	sp, sp, #8
   1506c:	pop	{r2, r3}
   15070:	rsbs	r0, r0, #0
   15074:	sbc	r1, r1, r1, lsl #1
   15078:	rsbs	r2, r2, #0
   1507c:	sbc	r3, r3, r3, lsl #1
   15080:	bx	lr
   15084:	rsbs	r2, r2, #0
   15088:	sbc	r3, r3, r3, lsl #1
   1508c:	bl	150dc <__assert_fail@plt+0x417c>
   15090:	ldr	lr, [sp, #4]
   15094:	add	sp, sp, #8
   15098:	pop	{r2, r3}
   1509c:	rsbs	r0, r0, #0
   150a0:	sbc	r1, r1, r1, lsl #1
   150a4:	bx	lr
   150a8:	rsbs	r2, r2, #0
   150ac:	sbc	r3, r3, r3, lsl #1
   150b0:	bl	150dc <__assert_fail@plt+0x417c>
   150b4:	ldr	lr, [sp, #4]
   150b8:	add	sp, sp, #8
   150bc:	pop	{r2, r3}
   150c0:	rsbs	r2, r2, #0
   150c4:	sbc	r3, r3, r3, lsl #1
   150c8:	bx	lr
   150cc:	push	{r1, lr}
   150d0:	mov	r0, #8
   150d4:	bl	10cfc <raise@plt>
   150d8:	pop	{r1, pc}
   150dc:	cmp	r1, r3
   150e0:	push	{r4, r5, r6, r7, r8, r9, lr}
   150e4:	cmpeq	r0, r2
   150e8:	mov	r4, r0
   150ec:	mov	r5, r1
   150f0:	ldr	r9, [sp, #28]
   150f4:	movcc	r0, #0
   150f8:	movcc	r1, #0
   150fc:	bcc	151f4 <__assert_fail@plt+0x4294>
   15100:	cmp	r3, #0
   15104:	clzeq	ip, r2
   15108:	clzne	ip, r3
   1510c:	addeq	ip, ip, #32
   15110:	cmp	r5, #0
   15114:	clzeq	r1, r4
   15118:	addeq	r1, r1, #32
   1511c:	clzne	r1, r5
   15120:	sub	ip, ip, r1
   15124:	sub	lr, ip, #32
   15128:	lsl	r7, r3, ip
   1512c:	rsb	r8, ip, #32
   15130:	orr	r7, r7, r2, lsl lr
   15134:	orr	r7, r7, r2, lsr r8
   15138:	lsl	r6, r2, ip
   1513c:	cmp	r5, r7
   15140:	cmpeq	r4, r6
   15144:	movcc	r0, #0
   15148:	movcc	r1, #0
   1514c:	bcc	15168 <__assert_fail@plt+0x4208>
   15150:	mov	r3, #1
   15154:	subs	r4, r4, r6
   15158:	lsl	r1, r3, lr
   1515c:	lsl	r0, r3, ip
   15160:	orr	r1, r1, r3, lsr r8
   15164:	sbc	r5, r5, r7
   15168:	cmp	ip, #0
   1516c:	beq	151f4 <__assert_fail@plt+0x4294>
   15170:	lsrs	r3, r7, #1
   15174:	rrx	r2, r6
   15178:	mov	r6, ip
   1517c:	b	151a0 <__assert_fail@plt+0x4240>
   15180:	subs	r4, r4, r2
   15184:	sbc	r5, r5, r3
   15188:	adds	r4, r4, r4
   1518c:	adc	r5, r5, r5
   15190:	adds	r4, r4, #1
   15194:	adc	r5, r5, #0
   15198:	subs	r6, r6, #1
   1519c:	beq	151bc <__assert_fail@plt+0x425c>
   151a0:	cmp	r5, r3
   151a4:	cmpeq	r4, r2
   151a8:	bcs	15180 <__assert_fail@plt+0x4220>
   151ac:	adds	r4, r4, r4
   151b0:	adc	r5, r5, r5
   151b4:	subs	r6, r6, #1
   151b8:	bne	151a0 <__assert_fail@plt+0x4240>
   151bc:	lsr	r6, r4, ip
   151c0:	lsr	r7, r5, ip
   151c4:	orr	r6, r6, r5, lsl r8
   151c8:	adds	r2, r0, r4
   151cc:	orr	r6, r6, r5, lsr lr
   151d0:	adc	r3, r1, r5
   151d4:	lsl	r1, r7, ip
   151d8:	orr	r1, r1, r6, lsl lr
   151dc:	lsl	r0, r6, ip
   151e0:	orr	r1, r1, r6, lsr r8
   151e4:	subs	r0, r2, r0
   151e8:	mov	r4, r6
   151ec:	mov	r5, r7
   151f0:	sbc	r1, r3, r1
   151f4:	cmp	r9, #0
   151f8:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   151fc:	strd	r4, [r9]
   15200:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15204:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15208:	mov	r7, r0
   1520c:	ldr	r6, [pc, #72]	; 1525c <__assert_fail@plt+0x42fc>
   15210:	ldr	r5, [pc, #72]	; 15260 <__assert_fail@plt+0x4300>
   15214:	add	r6, pc, r6
   15218:	add	r5, pc, r5
   1521c:	sub	r6, r6, r5
   15220:	mov	r8, r1
   15224:	mov	r9, r2
   15228:	bl	10cc4 <calloc@plt-0x20>
   1522c:	asrs	r6, r6, #2
   15230:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15234:	mov	r4, #0
   15238:	add	r4, r4, #1
   1523c:	ldr	r3, [r5], #4
   15240:	mov	r2, r9
   15244:	mov	r1, r8
   15248:	mov	r0, r7
   1524c:	blx	r3
   15250:	cmp	r6, r4
   15254:	bne	15238 <__assert_fail@plt+0x42d8>
   15258:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1525c:	strdeq	r0, [r1], -r4
   15260:	andeq	r0, r1, ip, ror #25
   15264:	bx	lr
   15268:	ldr	r3, [pc, #12]	; 1527c <__assert_fail@plt+0x431c>
   1526c:	mov	r1, #0
   15270:	add	r3, pc, r3
   15274:	ldr	r2, [r3]
   15278:	b	10e7c <__cxa_atexit@plt>
   1527c:	andeq	r0, r1, r4, ror lr

Disassembly of section .fini:

00015280 <.fini>:
   15280:	push	{r3, lr}
   15284:	pop	{r3, pc}
