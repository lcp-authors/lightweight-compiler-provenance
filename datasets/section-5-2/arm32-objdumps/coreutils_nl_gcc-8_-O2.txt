
../repos/coreutils/src/nl:     file format elf32-littlearm


Disassembly of section .init:

00010f70 <.init>:
   10f70:	push	{r3, lr}
   10f74:	bl	11b04 <__assert_fail@plt+0x85c>
   10f78:	pop	{r3, pc}

Disassembly of section .plt:

00010f7c <pthread_mutex_unlock@plt-0x14>:
   10f7c:	push	{lr}		; (str lr, [sp, #-4]!)
   10f80:	ldr	lr, [pc, #4]	; 10f8c <pthread_mutex_unlock@plt-0x4>
   10f84:	add	lr, pc, lr
   10f88:	ldr	pc, [lr, #8]!
   10f8c:	andeq	r5, r2, r4, ror r0

00010f90 <pthread_mutex_unlock@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #151552	; 0x25000
   10f98:	ldr	pc, [ip, #116]!	; 0x74

00010f9c <calloc@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #151552	; 0x25000
   10fa4:	ldr	pc, [ip, #108]!	; 0x6c

00010fa8 <fputs_unlocked@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #151552	; 0x25000
   10fb0:	ldr	pc, [ip, #100]!	; 0x64

00010fb4 <wctype@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #151552	; 0x25000
   10fbc:	ldr	pc, [ip, #92]!	; 0x5c

00010fc0 <wcrtomb@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #151552	; 0x25000
   10fc8:	ldr	pc, [ip, #84]!	; 0x54

00010fcc <iswctype@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #151552	; 0x25000
   10fd4:	ldr	pc, [ip, #76]!	; 0x4c

00010fd8 <strcmp@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #151552	; 0x25000
   10fe0:	ldr	pc, [ip, #68]!	; 0x44

00010fe4 <posix_fadvise64@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #151552	; 0x25000
   10fec:	ldr	pc, [ip, #60]!	; 0x3c

00010ff0 <pthread_mutex_destroy@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #151552	; 0x25000
   10ff8:	ldr	pc, [ip, #52]!	; 0x34

00010ffc <fflush@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #151552	; 0x25000
   11004:	ldr	pc, [ip, #44]!	; 0x2c

00011008 <memmove@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #151552	; 0x25000
   11010:	ldr	pc, [ip, #36]!	; 0x24

00011014 <free@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #151552	; 0x25000
   1101c:	ldr	pc, [ip, #28]!

00011020 <pthread_mutex_lock@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #151552	; 0x25000
   11028:	ldr	pc, [ip, #20]!

0001102c <_exit@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #151552	; 0x25000
   11034:	ldr	pc, [ip, #12]!

00011038 <memcpy@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #151552	; 0x25000
   11040:	ldr	pc, [ip, #4]!

00011044 <pthread_mutex_init@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #36, 20	; 0x24000
   1104c:	ldr	pc, [ip, #4092]!	; 0xffc

00011050 <towlower@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #36, 20	; 0x24000
   11058:	ldr	pc, [ip, #4084]!	; 0xff4

0001105c <mbsinit@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #36, 20	; 0x24000
   11064:	ldr	pc, [ip, #4076]!	; 0xfec

00011068 <fwrite_unlocked@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #36, 20	; 0x24000
   11070:	ldr	pc, [ip, #4068]!	; 0xfe4

00011074 <memcmp@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #36, 20	; 0x24000
   1107c:	ldr	pc, [ip, #4060]!	; 0xfdc

00011080 <stpcpy@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #36, 20	; 0x24000
   11088:	ldr	pc, [ip, #4052]!	; 0xfd4

0001108c <fputc_unlocked@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #36, 20	; 0x24000
   11094:	ldr	pc, [ip, #4044]!	; 0xfcc

00011098 <dcgettext@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #36, 20	; 0x24000
   110a0:	ldr	pc, [ip, #4036]!	; 0xfc4

000110a4 <realloc@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #36, 20	; 0x24000
   110ac:	ldr	pc, [ip, #4028]!	; 0xfbc

000110b0 <textdomain@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #36, 20	; 0x24000
   110b8:	ldr	pc, [ip, #4020]!	; 0xfb4

000110bc <iswprint@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #36, 20	; 0x24000
   110c4:	ldr	pc, [ip, #4012]!	; 0xfac

000110c8 <fwrite@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #36, 20	; 0x24000
   110d0:	ldr	pc, [ip, #4004]!	; 0xfa4

000110d4 <lseek64@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #36, 20	; 0x24000
   110dc:	ldr	pc, [ip, #3996]!	; 0xf9c

000110e0 <__ctype_get_mb_cur_max@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #36, 20	; 0x24000
   110e8:	ldr	pc, [ip, #3988]!	; 0xf94

000110ec <strcpy@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #36, 20	; 0x24000
   110f4:	ldr	pc, [ip, #3980]!	; 0xf8c

000110f8 <__fpending@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #36, 20	; 0x24000
   11100:	ldr	pc, [ip, #3972]!	; 0xf84

00011104 <mbrtowc@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #36, 20	; 0x24000
   1110c:	ldr	pc, [ip, #3964]!	; 0xf7c

00011110 <error@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #36, 20	; 0x24000
   11118:	ldr	pc, [ip, #3956]!	; 0xf74

0001111c <malloc@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #36, 20	; 0x24000
   11124:	ldr	pc, [ip, #3948]!	; 0xf6c

00011128 <__libc_start_main@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #36, 20	; 0x24000
   11130:	ldr	pc, [ip, #3940]!	; 0xf64

00011134 <__freading@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #36, 20	; 0x24000
   1113c:	ldr	pc, [ip, #3932]!	; 0xf5c

00011140 <__ctype_tolower_loc@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #36, 20	; 0x24000
   11148:	ldr	pc, [ip, #3924]!	; 0xf54

0001114c <__ctype_toupper_loc@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #36, 20	; 0x24000
   11154:	ldr	pc, [ip, #3916]!	; 0xf4c

00011158 <__gmon_start__@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #36, 20	; 0x24000
   11160:	ldr	pc, [ip, #3908]!	; 0xf44

00011164 <getopt_long@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #36, 20	; 0x24000
   1116c:	ldr	pc, [ip, #3900]!	; 0xf3c

00011170 <__ctype_b_loc@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #36, 20	; 0x24000
   11178:	ldr	pc, [ip, #3892]!	; 0xf34

0001117c <exit@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #36, 20	; 0x24000
   11184:	ldr	pc, [ip, #3884]!	; 0xf2c

00011188 <strlen@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #36, 20	; 0x24000
   11190:	ldr	pc, [ip, #3876]!	; 0xf24

00011194 <strchr@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #36, 20	; 0x24000
   1119c:	ldr	pc, [ip, #3868]!	; 0xf1c

000111a0 <__errno_location@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #36, 20	; 0x24000
   111a8:	ldr	pc, [ip, #3860]!	; 0xf14

000111ac <iswalnum@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #36, 20	; 0x24000
   111b4:	ldr	pc, [ip, #3852]!	; 0xf0c

000111b8 <__cxa_atexit@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #36, 20	; 0x24000
   111c0:	ldr	pc, [ip, #3844]!	; 0xf04

000111c4 <memset@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #36, 20	; 0x24000
   111cc:	ldr	pc, [ip, #3836]!	; 0xefc

000111d0 <btowc@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #36, 20	; 0x24000
   111d8:	ldr	pc, [ip, #3828]!	; 0xef4

000111dc <__printf_chk@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #36, 20	; 0x24000
   111e4:	ldr	pc, [ip, #3820]!	; 0xeec

000111e8 <fileno@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #36, 20	; 0x24000
   111f0:	ldr	pc, [ip, #3812]!	; 0xee4

000111f4 <__fprintf_chk@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #36, 20	; 0x24000
   111fc:	ldr	pc, [ip, #3804]!	; 0xedc

00011200 <fclose@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #36, 20	; 0x24000
   11208:	ldr	pc, [ip, #3796]!	; 0xed4

0001120c <fseeko64@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #36, 20	; 0x24000
   11214:	ldr	pc, [ip, #3788]!	; 0xecc

00011218 <__uflow@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #36, 20	; 0x24000
   11220:	ldr	pc, [ip, #3780]!	; 0xec4

00011224 <__overflow@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #36, 20	; 0x24000
   1122c:	ldr	pc, [ip, #3772]!	; 0xebc

00011230 <setlocale@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #36, 20	; 0x24000
   11238:	ldr	pc, [ip, #3764]!	; 0xeb4

0001123c <strrchr@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #36, 20	; 0x24000
   11244:	ldr	pc, [ip, #3756]!	; 0xeac

00011248 <nl_langinfo@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #36, 20	; 0x24000
   11250:	ldr	pc, [ip, #3748]!	; 0xea4

00011254 <clearerr_unlocked@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #36, 20	; 0x24000
   1125c:	ldr	pc, [ip, #3740]!	; 0xe9c

00011260 <__strtoll_internal@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #36, 20	; 0x24000
   11268:	ldr	pc, [ip, #3732]!	; 0xe94

0001126c <fopen64@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #36, 20	; 0x24000
   11274:	ldr	pc, [ip, #3724]!	; 0xe8c

00011278 <bindtextdomain@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #36, 20	; 0x24000
   11280:	ldr	pc, [ip, #3716]!	; 0xe84

00011284 <towupper@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #36, 20	; 0x24000
   1128c:	ldr	pc, [ip, #3708]!	; 0xe7c

00011290 <strncmp@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #36, 20	; 0x24000
   11298:	ldr	pc, [ip, #3700]!	; 0xe74

0001129c <abort@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #36, 20	; 0x24000
   112a4:	ldr	pc, [ip, #3692]!	; 0xe6c

000112a8 <__assert_fail@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #36, 20	; 0x24000
   112b0:	ldr	pc, [ip, #3684]!	; 0xe64

Disassembly of section .text:

000112b4 <.text>:
   112b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   112b8:	mov	r5, r1
   112bc:	strd	r6, [sp, #8]
   112c0:	mov	r6, r0
   112c4:	mov	r7, #1
   112c8:	strd	r8, [sp, #16]
   112cc:	movw	r8, #25056	; 0x61e0
   112d0:	movt	r8, #3
   112d4:	strd	sl, [sp, #24]
   112d8:	movw	r9, #21532	; 0x541c
   112dc:	movt	r9, #2
   112e0:	str	lr, [sp, #32]
   112e4:	sub	sp, sp, #44	; 0x2c
   112e8:	movw	sl, #25048	; 0x61d8
   112ec:	movt	sl, #3
   112f0:	ldr	r0, [r1]
   112f4:	bl	12a50 <__assert_fail@plt+0x17a8>
   112f8:	movw	r1, #19172	; 0x4ae4
   112fc:	movt	r1, #2
   11300:	ldr	fp, [pc, #1936]	; 11a98 <__assert_fail@plt+0x7f0>
   11304:	mov	r0, #6
   11308:	bl	11230 <setlocale@plt>
   1130c:	movw	r1, #21188	; 0x52c4
   11310:	movt	r1, #2
   11314:	movw	r0, #21020	; 0x521c
   11318:	movt	r0, #2
   1131c:	bl	11278 <bindtextdomain@plt>
   11320:	movw	r0, #21020	; 0x521c
   11324:	movt	r0, #2
   11328:	bl	110b0 <textdomain@plt>
   1132c:	movw	r0, #9692	; 0x25dc
   11330:	movt	r0, #1
   11334:	bl	248fc <__assert_fail@plt+0x13654>
   11338:	mov	r3, #0
   1133c:	str	r5, [sp, #28]
   11340:	strb	r3, [r8, #9]
   11344:	mov	r4, #0
   11348:	mov	r3, fp
   1134c:	mov	r2, r9
   11350:	str	r4, [sp]
   11354:	mov	r0, r6
   11358:	ldr	r1, [sp, #28]
   1135c:	bl	11164 <getopt_long@plt>
   11360:	cmn	r0, #1
   11364:	beq	118b4 <__assert_fail@plt+0x60c>
   11368:	add	r0, r0, #3
   1136c:	cmp	r0, #122	; 0x7a
   11370:	ldrls	pc, [pc, r0, lsl #2]
   11374:	b	11868 <__assert_fail@plt+0x5c0>
   11378:			; <UNDEFINED> instruction: 0x000117b8
   1137c:	andeq	r1, r1, r8, lsl #21
   11380:	andeq	r1, r1, r8, ror #16
   11384:	andeq	r1, r1, r8, ror #16
   11388:	andeq	r1, r1, r8, ror #16
   1138c:	andeq	r1, r1, r8, ror #16
   11390:	andeq	r1, r1, r8, ror #16
   11394:	andeq	r1, r1, r8, ror #16
   11398:	andeq	r1, r1, r8, ror #16
   1139c:	andeq	r1, r1, r8, ror #16
   113a0:	andeq	r1, r1, r8, ror #16
   113a4:	andeq	r1, r1, r8, ror #16
   113a8:	andeq	r1, r1, r8, ror #16
   113ac:	andeq	r1, r1, r8, ror #16
   113b0:	andeq	r1, r1, r8, ror #16
   113b4:	andeq	r1, r1, r8, ror #16
   113b8:	andeq	r1, r1, r8, ror #16
   113bc:	andeq	r1, r1, r8, ror #16
   113c0:	andeq	r1, r1, r8, ror #16
   113c4:	andeq	r1, r1, r8, ror #16
   113c8:	andeq	r1, r1, r8, ror #16
   113cc:	andeq	r1, r1, r8, ror #16
   113d0:	andeq	r1, r1, r8, ror #16
   113d4:	andeq	r1, r1, r8, ror #16
   113d8:	andeq	r1, r1, r8, ror #16
   113dc:	andeq	r1, r1, r8, ror #16
   113e0:	andeq	r1, r1, r8, ror #16
   113e4:	andeq	r1, r1, r8, ror #16
   113e8:	andeq	r1, r1, r8, ror #16
   113ec:	andeq	r1, r1, r8, ror #16
   113f0:	andeq	r1, r1, r8, ror #16
   113f4:	andeq	r1, r1, r8, ror #16
   113f8:	andeq	r1, r1, r8, ror #16
   113fc:	andeq	r1, r1, r8, ror #16
   11400:	andeq	r1, r1, r8, ror #16
   11404:	andeq	r1, r1, r8, ror #16
   11408:	andeq	r1, r1, r8, ror #16
   1140c:	andeq	r1, r1, r8, ror #16
   11410:	andeq	r1, r1, r8, ror #16
   11414:	andeq	r1, r1, r8, ror #16
   11418:	andeq	r1, r1, r8, ror #16
   1141c:	andeq	r1, r1, r8, ror #16
   11420:	andeq	r1, r1, r8, ror #16
   11424:	andeq	r1, r1, r8, ror #16
   11428:	andeq	r1, r1, r8, ror #16
   1142c:	andeq	r1, r1, r8, ror #16
   11430:	andeq	r1, r1, r8, ror #16
   11434:	andeq	r1, r1, r8, ror #16
   11438:	andeq	r1, r1, r8, ror #16
   1143c:	andeq	r1, r1, r8, ror #16
   11440:	andeq	r1, r1, r8, ror #16
   11444:	andeq	r1, r1, r8, ror #16
   11448:	andeq	r1, r1, r8, ror #16
   1144c:	andeq	r1, r1, r8, ror #16
   11450:	andeq	r1, r1, r8, ror #16
   11454:	andeq	r1, r1, r8, ror #16
   11458:	andeq	r1, r1, r8, ror #16
   1145c:	andeq	r1, r1, r8, ror #16
   11460:	andeq	r1, r1, r8, ror #16
   11464:	andeq	r1, r1, r8, ror #16
   11468:	andeq	r1, r1, r8, ror #16
   1146c:	andeq	r1, r1, r8, ror #16
   11470:	andeq	r1, r1, r8, ror #16
   11474:	andeq	r1, r1, r8, ror #16
   11478:	andeq	r1, r1, r8, ror #16
   1147c:	andeq	r1, r1, r8, ror #16
   11480:	andeq	r1, r1, r8, ror #16
   11484:	andeq	r1, r1, r8, ror #16
   11488:	andeq	r1, r1, r8, ror #16
   1148c:	andeq	r1, r1, r8, ror #16
   11490:	andeq	r1, r1, r8, ror #16
   11494:	andeq	r1, r1, r8, ror #16
   11498:	andeq	r1, r1, r8, ror #16
   1149c:	andeq	r1, r1, r8, ror #16
   114a0:	andeq	r1, r1, r8, ror #16
   114a4:	andeq	r1, r1, r8, ror #16
   114a8:	andeq	r1, r1, r8, ror #16
   114ac:	andeq	r1, r1, r8, ror #16
   114b0:	andeq	r1, r1, r8, ror #16
   114b4:	andeq	r1, r1, r8, ror #16
   114b8:	andeq	r1, r1, r8, ror #16
   114bc:	andeq	r1, r1, r8, ror #16
   114c0:	andeq	r1, r1, r8, ror #16
   114c4:	andeq	r1, r1, r8, ror #16
   114c8:	andeq	r1, r1, r8, ror #16
   114cc:	andeq	r1, r1, r8, ror #16
   114d0:	andeq	r1, r1, r8, ror #16
   114d4:	andeq	r1, r1, r8, ror #16
   114d8:	andeq	r1, r1, r8, ror #16
   114dc:	andeq	r1, r1, r8, ror #16
   114e0:	andeq	r1, r1, r8, ror #16
   114e4:	andeq	r1, r1, r8, ror #16
   114e8:	andeq	r1, r1, r8, ror #16
   114ec:	andeq	r1, r1, r8, ror #16
   114f0:	andeq	r1, r1, r8, ror #16
   114f4:	andeq	r1, r1, r8, ror #16
   114f8:	andeq	r1, r1, r8, ror #16
   114fc:	andeq	r1, r1, r8, ror #16
   11500:	andeq	r1, r1, r8, ror #16
   11504:	andeq	r1, r1, r8, ror #16
   11508:	andeq	r1, r1, r8, ror #16
   1150c:	muleq	r1, r4, r7
   11510:	andeq	r1, r1, r8, ror #16
   11514:	andeq	r1, r1, r8, lsl #16
   11518:	andeq	r1, r1, r8, ror #16
   1151c:	andeq	r1, r1, r0, ror r7
   11520:	andeq	r1, r1, r8, ror #16
   11524:	andeq	r1, r1, ip, lsl r7
   11528:	andeq	r1, r1, r4, asr #13
   1152c:	andeq	r1, r1, r8, ror #16
   11530:	andeq	r1, r1, r8, ror #16
   11534:	andeq	r1, r1, ip, ror #12
   11538:	andeq	r1, r1, r8, ror #16
   1153c:	andeq	r1, r1, ip, lsr r6
   11540:	andeq	r1, r1, r8, ror #16
   11544:	andeq	r1, r1, r8, lsr #12
   11548:	andeq	r1, r1, r8, ror #16
   1154c:	andeq	r1, r1, r8, ror #16
   11550:	andeq	r1, r1, r4, lsl r6
   11554:	andeq	r1, r1, r8, ror #16
   11558:	andeq	r1, r1, r8, ror #16
   1155c:			; <UNDEFINED> instruction: 0x000115bc
   11560:	andeq	r1, r1, r4, ror #10
   11564:	ldr	r4, [sl]
   11568:	mov	r2, #5
   1156c:	movw	r1, #21420	; 0x53ac
   11570:	movt	r1, #2
   11574:	mov	r0, #0
   11578:	bl	11098 <dcgettext@plt>
   1157c:	mov	r1, #0
   11580:	mov	r5, #0
   11584:	movw	r3, #19172	; 0x4ae4
   11588:	movt	r3, #2
   1158c:	mov	r2, #1
   11590:	strd	r0, [sp, #12]
   11594:	mov	r0, r4
   11598:	mvn	r4, #-2147483648	; 0x80000000
   1159c:	strd	r4, [sp]
   115a0:	str	r3, [sp, #8]
   115a4:	mov	r3, #0
   115a8:	bl	23688 <__assert_fail@plt+0x123e0>
   115ac:	movw	r3, #24872	; 0x6128
   115b0:	movt	r3, #3
   115b4:	str	r0, [r3, #8]
   115b8:	b	11344 <__assert_fail@plt+0x9c>
   115bc:	ldr	r4, [sl]
   115c0:	mov	r2, #5
   115c4:	movw	r1, #21320	; 0x5348
   115c8:	movt	r1, #2
   115cc:	mov	r0, #0
   115d0:	bl	11098 <dcgettext@plt>
   115d4:	mov	r1, #0
   115d8:	mvn	r5, #-2147483648	; 0x80000000
   115dc:	movw	r3, #19172	; 0x4ae4
   115e0:	movt	r3, #2
   115e4:	mov	r2, #0
   115e8:	strd	r0, [sp, #12]
   115ec:	mov	r0, r4
   115f0:	mvn	r4, #0
   115f4:	strd	r4, [sp]
   115f8:	str	r3, [sp, #8]
   115fc:	mov	r3, #-2147483648	; 0x80000000
   11600:	bl	23688 <__assert_fail@plt+0x123e0>
   11604:	movw	r3, #24872	; 0x6128
   11608:	movt	r3, #3
   1160c:	strd	r0, [r3]
   11610:	b	11344 <__assert_fail@plt+0x9c>
   11614:	ldr	r2, [sl]
   11618:	movw	r3, #24872	; 0x6128
   1161c:	movt	r3, #3
   11620:	str	r2, [r3, #16]
   11624:	b	11344 <__assert_fail@plt+0x9c>
   11628:	movw	r3, #24872	; 0x6128
   1162c:	movt	r3, #3
   11630:	mov	r2, #0
   11634:	strb	r2, [r3, #40]	; 0x28
   11638:	b	11344 <__assert_fail@plt+0x9c>
   1163c:	ldr	r4, [sl]
   11640:	movw	r1, #21452	; 0x53cc
   11644:	movt	r1, #2
   11648:	mov	r0, r4
   1164c:	bl	10fd8 <strcmp@plt>
   11650:	cmp	r0, #0
   11654:	bne	11870 <__assert_fail@plt+0x5c8>
   11658:	ldr	r2, [pc, #1084]	; 11a9c <__assert_fail@plt+0x7f4>
   1165c:	movw	r3, #24872	; 0x6128
   11660:	movt	r3, #3
   11664:	str	r2, [r3, #12]
   11668:	b	11344 <__assert_fail@plt+0x9c>
   1166c:	ldr	r4, [sl]
   11670:	mov	r2, #5
   11674:	movw	r1, #21384	; 0x5388
   11678:	movt	r1, #2
   1167c:	mov	r0, #0
   11680:	bl	11098 <dcgettext@plt>
   11684:	mov	r1, #0
   11688:	mvn	r5, #-2147483648	; 0x80000000
   1168c:	movw	r3, #19172	; 0x4ae4
   11690:	movt	r3, #2
   11694:	mov	r2, #1
   11698:	strd	r0, [sp, #12]
   1169c:	mov	r0, r4
   116a0:	mvn	r4, #0
   116a4:	strd	r4, [sp]
   116a8:	str	r3, [sp, #8]
   116ac:	mov	r3, #0
   116b0:	bl	23688 <__assert_fail@plt+0x123e0>
   116b4:	movw	r3, #24872	; 0x6128
   116b8:	movt	r3, #3
   116bc:	strd	r0, [r3, #56]	; 0x38
   116c0:	b	11344 <__assert_fail@plt+0x9c>
   116c4:	ldr	r4, [sl]
   116c8:	mov	r2, #5
   116cc:	movw	r1, #21352	; 0x5368
   116d0:	movt	r1, #2
   116d4:	mov	r0, #0
   116d8:	bl	11098 <dcgettext@plt>
   116dc:	mov	r1, #0
   116e0:	mvn	r5, #-2147483648	; 0x80000000
   116e4:	movw	r3, #19172	; 0x4ae4
   116e8:	movt	r3, #2
   116ec:	mov	r2, #0
   116f0:	strd	r0, [sp, #12]
   116f4:	mov	r0, r4
   116f8:	mvn	r4, #0
   116fc:	strd	r4, [sp]
   11700:	str	r3, [sp, #8]
   11704:	mov	r3, #-2147483648	; 0x80000000
   11708:	bl	23688 <__assert_fail@plt+0x123e0>
   1170c:	movw	r3, #24872	; 0x6128
   11710:	movt	r3, #3
   11714:	strd	r0, [r3, #24]
   11718:	b	11344 <__assert_fail@plt+0x9c>
   1171c:	ldr	r2, [pc, #892]	; 11aa0 <__assert_fail@plt+0x7f8>
   11720:	ldr	r0, [pc, #892]	; 11aa4 <__assert_fail@plt+0x7fc>
   11724:	sub	r1, r2, #44	; 0x2c
   11728:	bl	11bb8 <__assert_fail@plt+0x910>
   1172c:	subs	r4, r0, #0
   11730:	movweq	r1, #21212	; 0x52dc
   11734:	movteq	r1, #2
   11738:	bne	11344 <__assert_fail@plt+0x9c>
   1173c:	mov	r2, #5
   11740:	mov	r7, r4
   11744:	bl	11098 <dcgettext@plt>
   11748:	mov	r2, r0
   1174c:	ldr	r0, [sl]
   11750:	str	r2, [sp, #32]
   11754:	bl	14d40 <__assert_fail@plt+0x3a98>
   11758:	mov	r3, r0
   1175c:	mov	r1, r4
   11760:	ldr	r2, [sp, #32]
   11764:	mov	r0, r4
   11768:	bl	11110 <error@plt>
   1176c:	b	11344 <__assert_fail@plt+0x9c>
   11770:	ldr	r2, [pc, #816]	; 11aa8 <__assert_fail@plt+0x800>
   11774:	ldr	r0, [pc, #816]	; 11aac <__assert_fail@plt+0x804>
   11778:	sub	r1, r2, #620	; 0x26c
   1177c:	bl	11bb8 <__assert_fail@plt+0x910>
   11780:	subs	r4, r0, #0
   11784:	movweq	r1, #21284	; 0x5324
   11788:	movteq	r1, #2
   1178c:	bne	11344 <__assert_fail@plt+0x9c>
   11790:	b	1173c <__assert_fail@plt+0x494>
   11794:	ldr	r2, [pc, #788]	; 11ab0 <__assert_fail@plt+0x808>
   11798:	ldr	r0, [pc, #788]	; 11ab4 <__assert_fail@plt+0x80c>
   1179c:	sub	r1, r2, #332	; 0x14c
   117a0:	bl	11bb8 <__assert_fail@plt+0x910>
   117a4:	subs	r4, r0, #0
   117a8:	bne	11344 <__assert_fail@plt+0x9c>
   117ac:	movw	r1, #21248	; 0x5300
   117b0:	movt	r1, #2
   117b4:	b	1173c <__assert_fail@plt+0x494>
   117b8:	mov	r4, #0
   117bc:	movw	r1, #21500	; 0x53fc
   117c0:	movt	r1, #2
   117c4:	movw	r2, #21516	; 0x540c
   117c8:	movt	r2, #2
   117cc:	movw	r3, #24940	; 0x616c
   117d0:	movt	r3, #3
   117d4:	movw	r0, #25044	; 0x61d4
   117d8:	movt	r0, #3
   117dc:	str	r2, [sp]
   117e0:	movw	r2, #21016	; 0x5218
   117e4:	movt	r2, #2
   117e8:	stmib	sp, {r1, r4}
   117ec:	movw	r1, #19096	; 0x4a98
   117f0:	movt	r1, #2
   117f4:	ldr	r0, [r0]
   117f8:	ldr	r3, [r3]
   117fc:	bl	22f54 <__assert_fail@plt+0x11cac>
   11800:	mov	r0, r4
   11804:	bl	1117c <exit@plt>
   11808:	ldr	r4, [sl]
   1180c:	mov	r0, r4
   11810:	bl	11188 <strlen@plt>
   11814:	sub	r0, r0, #1
   11818:	cmp	r0, #1
   1181c:	movwhi	r3, #24872	; 0x6128
   11820:	movthi	r3, #3
   11824:	strhi	r4, [r3, #32]
   11828:	bhi	11344 <__assert_fail@plt+0x9c>
   1182c:	ldrb	r2, [r4]
   11830:	movw	r3, #24872	; 0x6128
   11834:	movt	r3, #3
   11838:	ldr	r3, [r3, #32]
   1183c:	cmp	r2, #0
   11840:	beq	11344 <__assert_fail@plt+0x9c>
   11844:	add	r2, r4, #1
   11848:	str	r2, [sl]
   1184c:	ldrb	r2, [r4]
   11850:	strb	r2, [r3], #1
   11854:	ldr	r4, [sl]
   11858:	ldrb	r2, [r4]
   1185c:	cmp	r2, #0
   11860:	bne	11844 <__assert_fail@plt+0x59c>
   11864:	b	11344 <__assert_fail@plt+0x9c>
   11868:	mov	r7, #0
   1186c:	b	11348 <__assert_fail@plt+0xa0>
   11870:	movw	r1, #21456	; 0x53d0
   11874:	movt	r1, #2
   11878:	mov	r0, r4
   1187c:	bl	10fd8 <strcmp@plt>
   11880:	cmp	r0, #0
   11884:	beq	119f4 <__assert_fail@plt+0x74c>
   11888:	mov	r0, r4
   1188c:	movw	r1, #21460	; 0x53d4
   11890:	movt	r1, #2
   11894:	bl	10fd8 <strcmp@plt>
   11898:	cmp	r0, #0
   1189c:	bne	11a38 <__assert_fail@plt+0x790>
   118a0:	ldr	r2, [pc, #528]	; 11ab8 <__assert_fail@plt+0x810>
   118a4:	movw	r3, #24872	; 0x6128
   118a8:	movt	r3, #3
   118ac:	str	r2, [r3, #12]
   118b0:	b	11344 <__assert_fail@plt+0x9c>
   118b4:	cmp	r7, #0
   118b8:	ldr	r5, [sp, #28]
   118bc:	beq	11a90 <__assert_fail@plt+0x7e8>
   118c0:	movw	sl, #24872	; 0x6128
   118c4:	movt	sl, #3
   118c8:	ldr	r0, [sl, #32]
   118cc:	movw	r9, #25024	; 0x61c0
   118d0:	movt	r9, #3
   118d4:	bl	11188 <strlen@plt>
   118d8:	lsl	r2, r0, #1
   118dc:	str	r2, [sp, #28]
   118e0:	add	r2, r2, r0
   118e4:	str	r0, [sp, #36]	; 0x24
   118e8:	add	r0, r2, #1
   118ec:	str	r2, [r8, #28]
   118f0:	bl	23064 <__assert_fail@plt+0x11dbc>
   118f4:	ldr	fp, [sl, #32]
   118f8:	str	r0, [r8, #32]
   118fc:	str	r0, [sp, #32]
   11900:	mov	r1, fp
   11904:	bl	11080 <stpcpy@plt>
   11908:	mov	r1, fp
   1190c:	bl	11080 <stpcpy@plt>
   11910:	mov	r1, fp
   11914:	bl	110ec <strcpy@plt>
   11918:	ldrd	r2, [sp, #32]
   1191c:	ldr	r0, [pc, #408]	; 11abc <__assert_fail@plt+0x814>
   11920:	add	fp, r2, r3
   11924:	str	r3, [r8, #24]
   11928:	add	r2, fp, r3
   1192c:	ldr	r3, [sp, #28]
   11930:	str	r3, [r8, #36]	; 0x24
   11934:	str	fp, [r8, #40]	; 0x28
   11938:	str	r2, [r8, #44]	; 0x2c
   1193c:	bl	12900 <__assert_fail@plt+0x1658>
   11940:	ldr	r0, [sl, #16]
   11944:	bl	11188 <strlen@plt>
   11948:	mov	fp, r0
   1194c:	ldr	r0, [sl, #8]
   11950:	add	r0, r0, #1
   11954:	add	r0, r0, fp
   11958:	bl	23064 <__assert_fail@plt+0x11dbc>
   1195c:	ldr	r2, [sl, #8]
   11960:	mov	r1, #32
   11964:	str	r0, [r8, #160]	; 0xa0
   11968:	add	fp, fp, r2
   1196c:	mov	r2, fp
   11970:	bl	111c4 <memset@plt>
   11974:	ldr	r1, [r9]
   11978:	strb	r4, [r0, fp]
   1197c:	ldr	ip, [pc, #316]	; 11ac0 <__assert_fail@plt+0x818>
   11980:	ldrd	r2, [sl]
   11984:	cmp	r1, r6
   11988:	ldr	r0, [sl, #44]	; 0x2c
   1198c:	strd	r2, [r8]
   11990:	str	ip, [r8, #52]	; 0x34
   11994:	str	r0, [r8, #48]	; 0x30
   11998:	beq	11a74 <__assert_fail@plt+0x7cc>
   1199c:	bge	119c4 <__assert_fail@plt+0x71c>
   119a0:	ldr	r0, [r5, r1, lsl #2]
   119a4:	bl	11d94 <__assert_fail@plt+0xaec>
   119a8:	ldr	r1, [r9]
   119ac:	and	r7, r7, r0
   119b0:	uxtb	r7, r7
   119b4:	add	r1, r1, #1
   119b8:	cmp	r1, r6
   119bc:	str	r1, [r9]
   119c0:	blt	119a0 <__assert_fail@plt+0x6f8>
   119c4:	ldrb	r3, [r8, #9]
   119c8:	cmp	r3, #0
   119cc:	bne	11a08 <__assert_fail@plt+0x760>
   119d0:	eor	r0, r7, #1
   119d4:	uxtb	r0, r0
   119d8:	add	sp, sp, #44	; 0x2c
   119dc:	ldrd	r4, [sp]
   119e0:	ldrd	r6, [sp, #8]
   119e4:	ldrd	r8, [sp, #16]
   119e8:	ldrd	sl, [sp, #24]
   119ec:	add	sp, sp, #32
   119f0:	pop	{pc}		; (ldr pc, [sp], #4)
   119f4:	ldr	r2, [pc, #200]	; 11ac4 <__assert_fail@plt+0x81c>
   119f8:	movw	r3, #24872	; 0x6128
   119fc:	movt	r3, #3
   11a00:	str	r2, [r3, #12]
   11a04:	b	11344 <__assert_fail@plt+0x9c>
   11a08:	movw	r3, #25040	; 0x61d0
   11a0c:	movt	r3, #3
   11a10:	ldr	r0, [r3]
   11a14:	bl	1271c <__assert_fail@plt+0x1474>
   11a18:	cmn	r0, #1
   11a1c:	bne	119d0 <__assert_fail@plt+0x728>
   11a20:	bl	111a0 <__errno_location@plt>
   11a24:	movw	r2, #19056	; 0x4a70
   11a28:	movt	r2, #2
   11a2c:	ldr	r1, [r0]
   11a30:	mov	r0, #1
   11a34:	bl	11110 <error@plt>
   11a38:	mov	r2, #5
   11a3c:	movw	r1, #21464	; 0x53d8
   11a40:	movt	r1, #2
   11a44:	mov	r0, #0
   11a48:	bl	11098 <dcgettext@plt>
   11a4c:	mov	r4, r0
   11a50:	ldr	r0, [sl]
   11a54:	mov	r7, #0
   11a58:	bl	14d40 <__assert_fail@plt+0x3a98>
   11a5c:	mov	r3, r0
   11a60:	mov	r2, r4
   11a64:	mov	r1, r7
   11a68:	mov	r0, r7
   11a6c:	bl	11110 <error@plt>
   11a70:	b	11344 <__assert_fail@plt+0x9c>
   11a74:	movw	r0, #19056	; 0x4a70
   11a78:	movt	r0, #2
   11a7c:	bl	11d94 <__assert_fail@plt+0xaec>
   11a80:	mov	r7, r0
   11a84:	b	119c4 <__assert_fail@plt+0x71c>
   11a88:	mov	r0, #0
   11a8c:	bl	121c4 <__assert_fail@plt+0xf1c>
   11a90:	mov	r0, #1
   11a94:	bl	121c4 <__assert_fail@plt+0xf1c>
   11a98:	andeq	r4, r2, r8, ror r9
   11a9c:	andeq	r4, r2, r8, asr r9
   11aa0:	andeq	r6, r3, r4, lsl #5
   11aa4:	andeq	r6, r3, r8, asr r1
   11aa8:	andeq	r6, r3, r4, lsl #9
   11aac:	andeq	r6, r3, ip, asr #2
   11ab0:	andeq	r6, r3, r4, lsl #7
   11ab4:	andeq	r6, r3, r4, asr r1
   11ab8:	andeq	r4, r2, ip, ror #18
   11abc:	andeq	r6, r3, ip, ror #3
   11ac0:	andeq	r6, r3, r8, lsr r2
   11ac4:	andeq	r4, r2, r4, ror #18
   11ac8:	mov	fp, #0
   11acc:	mov	lr, #0
   11ad0:	pop	{r1}		; (ldr r1, [sp], #4)
   11ad4:	mov	r2, sp
   11ad8:	push	{r2}		; (str r2, [sp, #-4]!)
   11adc:	push	{r0}		; (str r0, [sp, #-4]!)
   11ae0:	ldr	ip, [pc, #16]	; 11af8 <__assert_fail@plt+0x850>
   11ae4:	push	{ip}		; (str ip, [sp, #-4]!)
   11ae8:	ldr	r0, [pc, #12]	; 11afc <__assert_fail@plt+0x854>
   11aec:	ldr	r3, [pc, #12]	; 11b00 <__assert_fail@plt+0x858>
   11af0:	bl	11128 <__libc_start_main@plt>
   11af4:	bl	1129c <abort@plt>
   11af8:	strdeq	r4, [r2], -r8
   11afc:			; <UNDEFINED> instruction: 0x000112b4
   11b00:	muleq	r2, r8, r8
   11b04:	ldr	r3, [pc, #20]	; 11b20 <__assert_fail@plt+0x878>
   11b08:	ldr	r2, [pc, #20]	; 11b24 <__assert_fail@plt+0x87c>
   11b0c:	add	r3, pc, r3
   11b10:	ldr	r2, [r3, r2]
   11b14:	cmp	r2, #0
   11b18:	bxeq	lr
   11b1c:	b	11158 <__gmon_start__@plt>
   11b20:	andeq	r4, r2, ip, ror #9
   11b24:	andeq	r0, r0, r8, lsl r1
   11b28:	ldr	r0, [pc, #24]	; 11b48 <__assert_fail@plt+0x8a0>
   11b2c:	ldr	r3, [pc, #24]	; 11b4c <__assert_fail@plt+0x8a4>
   11b30:	cmp	r3, r0
   11b34:	bxeq	lr
   11b38:	ldr	r3, [pc, #16]	; 11b50 <__assert_fail@plt+0x8a8>
   11b3c:	cmp	r3, #0
   11b40:	bxeq	lr
   11b44:	bx	r3
   11b48:			; <UNDEFINED> instruction: 0x000361b4
   11b4c:			; <UNDEFINED> instruction: 0x000361b4
   11b50:	andeq	r0, r0, r0
   11b54:	ldr	r0, [pc, #36]	; 11b80 <__assert_fail@plt+0x8d8>
   11b58:	ldr	r1, [pc, #36]	; 11b84 <__assert_fail@plt+0x8dc>
   11b5c:	sub	r1, r1, r0
   11b60:	asr	r1, r1, #2
   11b64:	add	r1, r1, r1, lsr #31
   11b68:	asrs	r1, r1, #1
   11b6c:	bxeq	lr
   11b70:	ldr	r3, [pc, #16]	; 11b88 <__assert_fail@plt+0x8e0>
   11b74:	cmp	r3, #0
   11b78:	bxeq	lr
   11b7c:	bx	r3
   11b80:			; <UNDEFINED> instruction: 0x000361b4
   11b84:			; <UNDEFINED> instruction: 0x000361b4
   11b88:	andeq	r0, r0, r0
   11b8c:	push	{r4, lr}
   11b90:	ldr	r4, [pc, #24]	; 11bb0 <__assert_fail@plt+0x908>
   11b94:	ldrb	r3, [r4]
   11b98:	cmp	r3, #0
   11b9c:	popne	{r4, pc}
   11ba0:	bl	11b28 <__assert_fail@plt+0x880>
   11ba4:	mov	r3, #1
   11ba8:	strb	r3, [r4]
   11bac:	pop	{r4, pc}
   11bb0:	ldrdeq	r6, [r3], -ip
   11bb4:	b	11b54 <__assert_fail@plt+0x8ac>
   11bb8:	movw	ip, #25048	; 0x61d8
   11bbc:	movt	ip, #3
   11bc0:	strd	r4, [sp, #-16]!
   11bc4:	str	r6, [sp, #8]
   11bc8:	str	lr, [sp, #12]
   11bcc:	ldr	lr, [ip]
   11bd0:	ldrb	r3, [lr]
   11bd4:	sub	r3, r3, #97	; 0x61
   11bd8:	cmp	r3, #19
   11bdc:	ldrls	pc, [pc, r3, lsl #2]
   11be0:	b	11cb0 <__assert_fail@plt+0xa08>
   11be4:	andeq	r1, r1, r4, lsr #25
   11be8:			; <UNDEFINED> instruction: 0x00011cb0
   11bec:			; <UNDEFINED> instruction: 0x00011cb0
   11bf0:			; <UNDEFINED> instruction: 0x00011cb0
   11bf4:			; <UNDEFINED> instruction: 0x00011cb0
   11bf8:			; <UNDEFINED> instruction: 0x00011cb0
   11bfc:			; <UNDEFINED> instruction: 0x00011cb0
   11c00:			; <UNDEFINED> instruction: 0x00011cb0
   11c04:			; <UNDEFINED> instruction: 0x00011cb0
   11c08:			; <UNDEFINED> instruction: 0x00011cb0
   11c0c:			; <UNDEFINED> instruction: 0x00011cb0
   11c10:			; <UNDEFINED> instruction: 0x00011cb0
   11c14:			; <UNDEFINED> instruction: 0x00011cb0
   11c18:	andeq	r1, r1, r4, lsr #25
   11c1c:			; <UNDEFINED> instruction: 0x00011cb0
   11c20:	andeq	r1, r1, r4, lsr ip
   11c24:			; <UNDEFINED> instruction: 0x00011cb0
   11c28:			; <UNDEFINED> instruction: 0x00011cb0
   11c2c:			; <UNDEFINED> instruction: 0x00011cb0
   11c30:	andeq	r1, r1, r4, lsr #25
   11c34:	add	r3, lr, #1
   11c38:	mov	r4, r1
   11c3c:	mov	r5, #0
   11c40:	movw	r1, #710	; 0x2c6
   11c44:	str	r3, [ip]
   11c48:	movw	r3, #26304	; 0x66c0
   11c4c:	movt	r3, #3
   11c50:	str	lr, [r0]
   11c54:	ldr	r6, [ip]
   11c58:	str	r5, [r4]
   11c5c:	str	r5, [r4, #4]
   11c60:	str	r2, [r4, #16]
   11c64:	str	r5, [r4, #20]
   11c68:	mov	r0, r6
   11c6c:	str	r1, [r3]
   11c70:	bl	11188 <strlen@plt>
   11c74:	mov	r1, r0
   11c78:	mov	r2, r4
   11c7c:	mov	r0, r6
   11c80:	bl	21fd8 <__assert_fail@plt+0x10d30>
   11c84:	cmp	r0, #0
   11c88:	moveq	r3, #1
   11c8c:	bne	11cb8 <__assert_fail@plt+0xa10>
   11c90:	ldrd	r4, [sp]
   11c94:	mov	r0, r3
   11c98:	ldr	r6, [sp, #8]
   11c9c:	add	sp, sp, #12
   11ca0:	pop	{pc}		; (ldr pc, [sp], #4)
   11ca4:	mov	r3, #1
   11ca8:	str	lr, [r0]
   11cac:	b	11c90 <__assert_fail@plt+0x9e8>
   11cb0:	mov	r3, #0
   11cb4:	b	11c90 <__assert_fail@plt+0x9e8>
   11cb8:	mov	r3, r0
   11cbc:	movw	r2, #21244	; 0x52fc
   11cc0:	movt	r2, #2
   11cc4:	mov	r1, r5
   11cc8:	mov	r0, #1
   11ccc:	bl	11110 <error@plt>
   11cd0:	movw	r3, #24872	; 0x6128
   11cd4:	movt	r3, #3
   11cd8:	ldrd	r0, [r3]
   11cdc:	mov	r2, #0
   11ce0:	movw	r3, #25056	; 0x61e0
   11ce4:	movt	r3, #3
   11ce8:	strd	r0, [r3]
   11cec:	strb	r2, [r3, #8]
   11cf0:	bx	lr
   11cf4:	strd	r4, [sp, #-20]!	; 0xffffffec
   11cf8:	movw	r4, #25056	; 0x61e0
   11cfc:	movt	r4, #3
   11d00:	ldrb	r3, [r4, #8]
   11d04:	strd	r6, [sp, #8]
   11d08:	str	lr, [sp, #16]
   11d0c:	sub	sp, sp, #20
   11d10:	cmp	r3, #0
   11d14:	bne	11d70 <__assert_fail@plt+0xac8>
   11d18:	movw	r5, #24872	; 0x6128
   11d1c:	movt	r5, #3
   11d20:	ldrd	r6, [r4]
   11d24:	mov	r0, #1
   11d28:	ldr	r2, [r5, #8]
   11d2c:	ldr	r3, [r5, #16]
   11d30:	strd	r6, [sp]
   11d34:	ldr	r1, [r5, #12]
   11d38:	str	r3, [sp, #8]
   11d3c:	bl	111dc <__printf_chk@plt>
   11d40:	ldrd	r2, [r4]
   11d44:	ldrd	r0, [r5, #24]
   11d48:	adds	r6, r2, r0
   11d4c:	adcs	r7, r3, r1
   11d50:	movvs	r3, #1
   11d54:	strd	r6, [r4]
   11d58:	strbvs	r3, [r4, #8]
   11d5c:	add	sp, sp, #20
   11d60:	ldrd	r4, [sp]
   11d64:	ldrd	r6, [sp, #8]
   11d68:	add	sp, sp, #16
   11d6c:	pop	{pc}		; (ldr pc, [sp], #4)
   11d70:	mov	r2, #5
   11d74:	movw	r1, #19032	; 0x4a58
   11d78:	movt	r1, #2
   11d7c:	mov	r0, #0
   11d80:	bl	11098 <dcgettext@plt>
   11d84:	mov	r2, r0
   11d88:	mov	r1, #0
   11d8c:	mov	r0, #1
   11d90:	bl	11110 <error@plt>
   11d94:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11d98:	movw	r1, #19056	; 0x4a70
   11d9c:	movt	r1, #2
   11da0:	strd	r6, [sp, #8]
   11da4:	strd	r8, [sp, #16]
   11da8:	strd	sl, [sp, #24]
   11dac:	str	lr, [sp, #32]
   11db0:	sub	sp, sp, #28
   11db4:	str	r0, [sp, #16]
   11db8:	bl	10fd8 <strcmp@plt>
   11dbc:	mov	r4, r0
   11dc0:	bl	111a0 <__errno_location@plt>
   11dc4:	cmp	r4, #0
   11dc8:	str	r0, [sp, #20]
   11dcc:	bne	12104 <__assert_fail@plt+0xe5c>
   11dd0:	movw	r3, #25040	; 0x61d0
   11dd4:	movt	r3, #3
   11dd8:	ldr	r9, [r3]
   11ddc:	movw	r4, #25056	; 0x61e0
   11de0:	movt	r4, #3
   11de4:	mov	r2, #1
   11de8:	strb	r2, [r4, #9]
   11dec:	mov	r1, #2
   11df0:	mov	r0, r9
   11df4:	movw	r8, #25044	; 0x61d4
   11df8:	movt	r8, #3
   11dfc:	movw	r5, #24872	; 0x6128
   11e00:	movt	r5, #3
   11e04:	bl	126cc <__assert_fail@plt+0x1424>
   11e08:	mov	r1, r9
   11e0c:	ldr	r0, [pc, #928]	; 121b4 <__assert_fail@plt+0xf0c>
   11e10:	bl	12a40 <__assert_fail@plt+0x1798>
   11e14:	cmp	r0, #0
   11e18:	beq	12088 <__assert_fail@plt+0xde0>
   11e1c:	ldr	r6, [r4, #16]
   11e20:	sub	r7, r6, #1
   11e24:	cmp	r7, #1
   11e28:	bls	11e50 <__assert_fail@plt+0xba8>
   11e2c:	ldr	fp, [r4, #24]
   11e30:	cmp	fp, #1
   11e34:	bls	11e50 <__assert_fail@plt+0xba8>
   11e38:	ldr	sl, [r4, #20]
   11e3c:	ldr	r3, [r5, #32]
   11e40:	ldrb	r1, [sl]
   11e44:	ldrb	r2, [r3]
   11e48:	cmp	r1, r2
   11e4c:	beq	11f80 <__assert_fail@plt+0xcd8>
   11e50:	ldr	r3, [r4, #48]	; 0x30
   11e54:	ldrb	r3, [r3]
   11e58:	sub	r3, r3, #97	; 0x61
   11e5c:	cmp	r3, #19
   11e60:	ldrls	pc, [pc, r3, lsl #2]
   11e64:	b	11ec8 <__assert_fail@plt+0xc20>
   11e68:	andeq	r1, r1, r0, ror #29
   11e6c:	andeq	r1, r1, r8, asr #29
   11e70:	andeq	r1, r1, r8, asr #29
   11e74:	andeq	r1, r1, r8, asr #29
   11e78:	andeq	r1, r1, r8, asr #29
   11e7c:	andeq	r1, r1, r8, asr #29
   11e80:	andeq	r1, r1, r8, asr #29
   11e84:	andeq	r1, r1, r8, asr #29
   11e88:	andeq	r1, r1, r8, asr #29
   11e8c:	andeq	r1, r1, r8, asr #29
   11e90:	andeq	r1, r1, r8, asr #29
   11e94:	andeq	r1, r1, r8, asr #29
   11e98:	andeq	r1, r1, r8, asr #29
   11e9c:	andeq	r1, r1, ip, ror #30
   11ea0:	andeq	r1, r1, r8, asr #29
   11ea4:	andeq	r1, r1, ip, lsr pc
   11ea8:	andeq	r1, r1, r8, asr #29
   11eac:	andeq	r1, r1, r8, asr #29
   11eb0:	andeq	r1, r1, r8, asr #29
   11eb4:			; <UNDEFINED> instruction: 0x00011eb8
   11eb8:	cmp	r6, #1
   11ebc:	ble	11f6c <__assert_fail@plt+0xcc4>
   11ec0:	bl	11cf4 <__assert_fail@plt+0xa4c>
   11ec4:	ldr	r6, [r4, #16]
   11ec8:	mov	r2, r6
   11ecc:	mov	r1, #1
   11ed0:	ldr	r3, [r8]
   11ed4:	ldr	r0, [r4, #20]
   11ed8:	bl	11068 <fwrite_unlocked@plt>
   11edc:	b	11e08 <__assert_fail@plt+0xb60>
   11ee0:	ldrd	r0, [r5, #56]	; 0x38
   11ee4:	cmp	r0, #2
   11ee8:	sbcs	r3, r1, #0
   11eec:	blt	11ec0 <__assert_fail@plt+0xc18>
   11ef0:	cmp	r6, #1
   11ef4:	bgt	11f24 <__assert_fail@plt+0xc7c>
   11ef8:	ldr	r3, [r4, #152]	; 0x98
   11efc:	ldr	r2, [r4, #156]	; 0x9c
   11f00:	adds	r3, r3, #1
   11f04:	str	r3, [sp, #8]
   11f08:	adc	r3, r2, #0
   11f0c:	str	r3, [sp, #12]
   11f10:	ldrd	r2, [sp, #8]
   11f14:	cmp	r1, r3
   11f18:	strd	r2, [r4, #152]	; 0x98
   11f1c:	cmpeq	r0, r2
   11f20:	bne	11f6c <__assert_fail@plt+0xcc4>
   11f24:	bl	11cf4 <__assert_fail@plt+0xa4c>
   11f28:	mov	r2, #0
   11f2c:	mov	r3, #0
   11f30:	ldr	r6, [r4, #16]
   11f34:	strd	r2, [r4, #152]	; 0x98
   11f38:	b	11ec8 <__assert_fail@plt+0xc20>
   11f3c:	mov	r6, #0
   11f40:	mov	r2, r7
   11f44:	str	r7, [sp]
   11f48:	mov	r3, r6
   11f4c:	ldr	r1, [r4, #20]
   11f50:	str	r6, [sp, #4]
   11f54:	ldr	r0, [r4, #52]	; 0x34
   11f58:	bl	229b4 <__assert_fail@plt+0x1170c>
   11f5c:	cmn	r0, #2
   11f60:	beq	12188 <__assert_fail@plt+0xee0>
   11f64:	cmn	r0, #1
   11f68:	bne	11ec0 <__assert_fail@plt+0xc18>
   11f6c:	ldr	r1, [r8]
   11f70:	ldr	r0, [r4, #160]	; 0xa0
   11f74:	bl	10fa8 <fputs_unlocked@plt>
   11f78:	ldr	r6, [r4, #16]
   11f7c:	b	11ec8 <__assert_fail@plt+0xc20>
   11f80:	ldrb	r3, [r3, #1]
   11f84:	ldrb	r2, [sl, #1]
   11f88:	cmp	r2, r3
   11f8c:	bne	11e50 <__assert_fail@plt+0xba8>
   11f90:	ldr	r3, [r4, #28]
   11f94:	cmp	r7, r3
   11f98:	beq	12050 <__assert_fail@plt+0xda8>
   11f9c:	ldr	r3, [r4, #36]	; 0x24
   11fa0:	cmp	r7, r3
   11fa4:	beq	12018 <__assert_fail@plt+0xd70>
   11fa8:	cmp	r7, fp
   11fac:	bne	11e50 <__assert_fail@plt+0xba8>
   11fb0:	mov	r0, sl
   11fb4:	mov	r2, r7
   11fb8:	ldr	r1, [r4, #44]	; 0x2c
   11fbc:	bl	11074 <memcmp@plt>
   11fc0:	cmp	r0, #0
   11fc4:	bne	11e50 <__assert_fail@plt+0xba8>
   11fc8:	ldrb	r1, [r5, #40]	; 0x28
   11fcc:	ldr	r2, [pc, #484]	; 121b8 <__assert_fail@plt+0xf10>
   11fd0:	ldr	r3, [r5, #36]	; 0x24
   11fd4:	cmp	r1, #0
   11fd8:	str	r3, [r4, #48]	; 0x30
   11fdc:	str	r2, [r4, #52]	; 0x34
   11fe0:	beq	11fe8 <__assert_fail@plt+0xd40>
   11fe4:	bl	11cd0 <__assert_fail@plt+0xa28>
   11fe8:	ldr	r0, [r8]
   11fec:	ldr	r3, [r0, #20]
   11ff0:	ldr	r2, [r0, #24]
   11ff4:	cmp	r3, r2
   11ff8:	addcc	r1, r3, #1
   11ffc:	movcc	r2, #10
   12000:	strcc	r1, [r0, #20]
   12004:	strbcc	r2, [r3]
   12008:	bcc	11e08 <__assert_fail@plt+0xb60>
   1200c:	mov	r1, #10
   12010:	bl	11224 <__overflow@plt>
   12014:	b	11e08 <__assert_fail@plt+0xb60>
   12018:	mov	r2, r7
   1201c:	mov	r0, sl
   12020:	ldr	r1, [r4, #40]	; 0x28
   12024:	bl	11074 <memcmp@plt>
   12028:	cmp	r0, #0
   1202c:	bne	11fa8 <__assert_fail@plt+0xd00>
   12030:	ldrb	r1, [r5, #40]	; 0x28
   12034:	ldr	r2, [pc, #384]	; 121bc <__assert_fail@plt+0xf14>
   12038:	ldr	r3, [r5, #44]	; 0x2c
   1203c:	cmp	r1, #0
   12040:	str	r3, [r4, #48]	; 0x30
   12044:	str	r2, [r4, #52]	; 0x34
   12048:	bne	11fe4 <__assert_fail@plt+0xd3c>
   1204c:	b	11fe8 <__assert_fail@plt+0xd40>
   12050:	mov	r2, r7
   12054:	mov	r0, sl
   12058:	ldr	r1, [r4, #32]
   1205c:	bl	11074 <memcmp@plt>
   12060:	cmp	r0, #0
   12064:	bne	11f9c <__assert_fail@plt+0xcf4>
   12068:	ldrb	r1, [r5, #40]	; 0x28
   1206c:	ldr	r2, [pc, #332]	; 121c0 <__assert_fail@plt+0xf18>
   12070:	ldr	r3, [r5, #48]	; 0x30
   12074:	cmp	r1, #0
   12078:	str	r3, [r4, #48]	; 0x30
   1207c:	str	r2, [r4, #52]	; 0x34
   12080:	beq	11fe8 <__assert_fail@plt+0xd40>
   12084:	b	11fe4 <__assert_fail@plt+0xd3c>
   12088:	ldr	r3, [r9]
   1208c:	movw	r1, #19056	; 0x4a70
   12090:	movt	r1, #2
   12094:	ldr	r0, [sp, #16]
   12098:	ldr	r2, [sp, #20]
   1209c:	tst	r3, #32
   120a0:	ldr	r4, [r2]
   120a4:	moveq	r4, #0
   120a8:	bl	10fd8 <strcmp@plt>
   120ac:	cmp	r0, #0
   120b0:	mov	r0, r9
   120b4:	bne	120e4 <__assert_fail@plt+0xe3c>
   120b8:	bl	11254 <clearerr_unlocked@plt>
   120bc:	cmp	r4, #0
   120c0:	moveq	r0, #1
   120c4:	bne	12128 <__assert_fail@plt+0xe80>
   120c8:	add	sp, sp, #28
   120cc:	ldrd	r4, [sp]
   120d0:	ldrd	r6, [sp, #8]
   120d4:	ldrd	r8, [sp, #16]
   120d8:	ldrd	sl, [sp, #24]
   120dc:	add	sp, sp, #32
   120e0:	pop	{pc}		; (ldr pc, [sp], #4)
   120e4:	bl	1271c <__assert_fail@plt+0x1474>
   120e8:	cmp	r0, #0
   120ec:	beq	120bc <__assert_fail@plt+0xe14>
   120f0:	cmp	r4, #0
   120f4:	bne	12128 <__assert_fail@plt+0xe80>
   120f8:	ldr	r3, [sp, #20]
   120fc:	ldr	r4, [r3]
   12100:	b	120bc <__assert_fail@plt+0xe14>
   12104:	movw	r1, #22696	; 0x58a8
   12108:	movt	r1, #2
   1210c:	ldr	r0, [sp, #16]
   12110:	bl	1126c <fopen64@plt>
   12114:	subs	r9, r0, #0
   12118:	beq	12158 <__assert_fail@plt+0xeb0>
   1211c:	movw	r4, #25056	; 0x61e0
   12120:	movt	r4, #3
   12124:	b	11dec <__assert_fail@plt+0xb44>
   12128:	mov	r1, #3
   1212c:	mov	r0, #0
   12130:	ldr	r2, [sp, #16]
   12134:	bl	14b68 <__assert_fail@plt+0x38c0>
   12138:	mov	r3, r0
   1213c:	mov	r1, r4
   12140:	mov	r0, #0
   12144:	movw	r2, #21244	; 0x52fc
   12148:	movt	r2, #2
   1214c:	bl	11110 <error@plt>
   12150:	mov	r0, #0
   12154:	b	120c8 <__assert_fail@plt+0xe20>
   12158:	ldrd	r2, [sp, #16]
   1215c:	mov	r1, #3
   12160:	ldr	r4, [r3]
   12164:	bl	14b68 <__assert_fail@plt+0x38c0>
   12168:	mov	r3, r0
   1216c:	movw	r2, #21244	; 0x52fc
   12170:	movt	r2, #2
   12174:	mov	r0, r9
   12178:	mov	r1, r4
   1217c:	bl	11110 <error@plt>
   12180:	mov	r0, r9
   12184:	b	120c8 <__assert_fail@plt+0xe20>
   12188:	ldr	r3, [sp, #20]
   1218c:	mov	r2, #5
   12190:	mov	r0, r6
   12194:	movw	r1, #19060	; 0x4a74
   12198:	movt	r1, #2
   1219c:	ldr	r4, [r3]
   121a0:	bl	11098 <dcgettext@plt>
   121a4:	mov	r2, r0
   121a8:	mov	r0, #1
   121ac:	mov	r1, r4
   121b0:	bl	11110 <error@plt>
   121b4:	andeq	r6, r3, ip, ror #3
   121b8:	andeq	r6, r3, r8, lsl r2
   121bc:	andeq	r6, r3, r8, lsr r2
   121c0:	andeq	r6, r3, r8, asr r2
   121c4:	subs	r6, r0, #0
   121c8:	str	r7, [sp, #-8]!
   121cc:	str	lr, [sp, #4]
   121d0:	sub	sp, sp, #56	; 0x38
   121d4:	beq	1221c <__assert_fail@plt+0xf74>
   121d8:	movw	r3, #25032	; 0x61c8
   121dc:	movt	r3, #3
   121e0:	ldr	r4, [r3]
   121e4:	mov	r2, #5
   121e8:	movw	r1, #19100	; 0x4a9c
   121ec:	movt	r1, #2
   121f0:	mov	r0, #0
   121f4:	bl	11098 <dcgettext@plt>
   121f8:	movw	r3, #25996	; 0x658c
   121fc:	movt	r3, #3
   12200:	mov	r2, r0
   12204:	mov	r1, #1
   12208:	ldr	r3, [r3]
   1220c:	mov	r0, r4
   12210:	bl	111f4 <__fprintf_chk@plt>
   12214:	mov	r0, r6
   12218:	bl	1117c <exit@plt>
   1221c:	mov	r2, #5
   12220:	movw	r1, #19140	; 0x4ac4
   12224:	movt	r1, #2
   12228:	movw	r7, #25044	; 0x61d4
   1222c:	movt	r7, #3
   12230:	bl	11098 <dcgettext@plt>
   12234:	movw	r3, #25996	; 0x658c
   12238:	movt	r3, #3
   1223c:	mov	r1, r0
   12240:	mov	r0, #1
   12244:	ldr	r2, [r3]
   12248:	bl	111dc <__printf_chk@plt>
   1224c:	mov	r2, #5
   12250:	movw	r1, #19176	; 0x4ae8
   12254:	movt	r1, #2
   12258:	mov	r0, r6
   1225c:	bl	11098 <dcgettext@plt>
   12260:	ldr	r1, [r7]
   12264:	bl	10fa8 <fputs_unlocked@plt>
   12268:	mov	r2, #5
   1226c:	movw	r1, #19240	; 0x4b28
   12270:	movt	r1, #2
   12274:	mov	r0, r6
   12278:	bl	11098 <dcgettext@plt>
   1227c:	ldr	r1, [r7]
   12280:	bl	10fa8 <fputs_unlocked@plt>
   12284:	mov	r2, #5
   12288:	movw	r1, #19296	; 0x4b60
   1228c:	movt	r1, #2
   12290:	mov	r0, r6
   12294:	bl	11098 <dcgettext@plt>
   12298:	ldr	r1, [r7]
   1229c:	bl	10fa8 <fputs_unlocked@plt>
   122a0:	mov	r2, #5
   122a4:	movw	r1, #19372	; 0x4bac
   122a8:	movt	r1, #2
   122ac:	mov	r0, r6
   122b0:	bl	11098 <dcgettext@plt>
   122b4:	ldr	r1, [r7]
   122b8:	bl	10fa8 <fputs_unlocked@plt>
   122bc:	mov	r2, #5
   122c0:	movw	r1, #19584	; 0x4c80
   122c4:	movt	r1, #2
   122c8:	mov	r0, r6
   122cc:	bl	11098 <dcgettext@plt>
   122d0:	ldr	r1, [r7]
   122d4:	bl	10fa8 <fputs_unlocked@plt>
   122d8:	mov	r2, #5
   122dc:	movw	r1, #20028	; 0x4e3c
   122e0:	movt	r1, #2
   122e4:	mov	r0, r6
   122e8:	bl	11098 <dcgettext@plt>
   122ec:	ldr	r1, [r7]
   122f0:	bl	10fa8 <fputs_unlocked@plt>
   122f4:	mov	r2, #5
   122f8:	movw	r1, #20172	; 0x4ecc
   122fc:	movt	r1, #2
   12300:	mov	r0, r6
   12304:	bl	11098 <dcgettext@plt>
   12308:	ldr	r1, [r7]
   1230c:	bl	10fa8 <fputs_unlocked@plt>
   12310:	mov	r2, #5
   12314:	movw	r1, #20220	; 0x4efc
   12318:	movt	r1, #2
   1231c:	mov	r0, r6
   12320:	bl	11098 <dcgettext@plt>
   12324:	ldr	r1, [r7]
   12328:	bl	10fa8 <fputs_unlocked@plt>
   1232c:	mov	r2, #5
   12330:	movw	r1, #20276	; 0x4f34
   12334:	movt	r1, #2
   12338:	mov	r0, r6
   1233c:	bl	11098 <dcgettext@plt>
   12340:	ldr	r1, [r7]
   12344:	bl	10fa8 <fputs_unlocked@plt>
   12348:	mov	r2, #5
   1234c:	movw	r1, #20600	; 0x5078
   12350:	movt	r1, #2
   12354:	mov	r0, r6
   12358:	bl	11098 <dcgettext@plt>
   1235c:	ldr	r1, [r7]
   12360:	bl	10fa8 <fputs_unlocked@plt>
   12364:	mov	r2, #5
   12368:	movw	r1, #20804	; 0x5144
   1236c:	movt	r1, #2
   12370:	mov	r0, r6
   12374:	bl	11098 <dcgettext@plt>
   12378:	ldr	r1, [r7]
   1237c:	bl	10fa8 <fputs_unlocked@plt>
   12380:	movw	lr, #18720	; 0x4920
   12384:	movt	lr, #2
   12388:	ldr	ip, [lr]
   1238c:	ldr	r4, [lr, #4]
   12390:	ldrd	r8, [lr, #8]
   12394:	subs	r1, ip, #0
   12398:	str	ip, [sp]
   1239c:	ldrd	r2, [lr, #16]
   123a0:	str	r4, [sp, #4]
   123a4:	ldrd	r4, [lr, #24]
   123a8:	strd	r8, [sp, #8]
   123ac:	ldrd	r8, [lr, #32]
   123b0:	strd	r2, [sp, #16]
   123b4:	ldrd	r2, [lr, #40]	; 0x28
   123b8:	strd	r4, [sp, #24]
   123bc:	ldrd	r4, [lr, #48]	; 0x30
   123c0:	strd	r8, [sp, #32]
   123c4:	strd	r2, [sp, #40]	; 0x28
   123c8:	strd	r4, [sp, #48]	; 0x30
   123cc:	movwne	r5, #19096	; 0x4a98
   123d0:	mov	r4, sp
   123d4:	movtne	r5, #2
   123d8:	bne	124d0 <__assert_fail@plt+0x1228>
   123dc:	ldr	r4, [r4, #4]
   123e0:	movw	r1, #20952	; 0x51d8
   123e4:	movt	r1, #2
   123e8:	mov	r2, #5
   123ec:	cmp	r4, #0
   123f0:	beq	124e4 <__assert_fail@plt+0x123c>
   123f4:	mov	r0, #0
   123f8:	bl	11098 <dcgettext@plt>
   123fc:	mov	r1, r0
   12400:	movw	r3, #20976	; 0x51f0
   12404:	movt	r3, #2
   12408:	movw	r2, #21016	; 0x5218
   1240c:	movt	r2, #2
   12410:	mov	r0, #1
   12414:	bl	111dc <__printf_chk@plt>
   12418:	mov	r1, #0
   1241c:	mov	r0, #5
   12420:	bl	11230 <setlocale@plt>
   12424:	cmp	r0, #0
   12428:	movweq	r5, #19096	; 0x4a98
   1242c:	movteq	r5, #2
   12430:	beq	12454 <__assert_fail@plt+0x11ac>
   12434:	movw	r1, #21032	; 0x5228
   12438:	movt	r1, #2
   1243c:	mov	r2, #3
   12440:	movw	r5, #19096	; 0x4a98
   12444:	movt	r5, #2
   12448:	bl	11290 <strncmp@plt>
   1244c:	cmp	r0, #0
   12450:	bne	1259c <__assert_fail@plt+0x12f4>
   12454:	mov	r2, #5
   12458:	movw	r1, #21108	; 0x5274
   1245c:	movt	r1, #2
   12460:	mov	r0, #0
   12464:	bl	11098 <dcgettext@plt>
   12468:	mov	r1, r0
   1246c:	movw	r3, #19096	; 0x4a98
   12470:	movt	r3, #2
   12474:	movw	r2, #20976	; 0x51f0
   12478:	movt	r2, #2
   1247c:	mov	r0, #1
   12480:	bl	111dc <__printf_chk@plt>
   12484:	mov	r2, #5
   12488:	movw	r1, #21136	; 0x5290
   1248c:	movt	r1, #2
   12490:	mov	r0, #0
   12494:	bl	11098 <dcgettext@plt>
   12498:	movw	r2, #21564	; 0x543c
   1249c:	movt	r2, #2
   124a0:	cmp	r4, r5
   124a4:	movw	r3, #19172	; 0x4ae4
   124a8:	movt	r3, #2
   124ac:	mov	r1, r0
   124b0:	moveq	r3, r2
   124b4:	mov	r2, r4
   124b8:	mov	r0, #1
   124bc:	bl	111dc <__printf_chk@plt>
   124c0:	b	12214 <__assert_fail@plt+0xf6c>
   124c4:	ldr	r1, [r4, #8]!
   124c8:	cmp	r1, #0
   124cc:	beq	123dc <__assert_fail@plt+0x1134>
   124d0:	mov	r0, r5
   124d4:	bl	10fd8 <strcmp@plt>
   124d8:	cmp	r0, #0
   124dc:	bne	124c4 <__assert_fail@plt+0x121c>
   124e0:	b	123dc <__assert_fail@plt+0x1134>
   124e4:	mov	r0, r4
   124e8:	bl	11098 <dcgettext@plt>
   124ec:	mov	r1, r0
   124f0:	movw	r3, #20976	; 0x51f0
   124f4:	movt	r3, #2
   124f8:	movw	r2, #21016	; 0x5218
   124fc:	movt	r2, #2
   12500:	mov	r0, #1
   12504:	bl	111dc <__printf_chk@plt>
   12508:	mov	r1, r4
   1250c:	mov	r0, #5
   12510:	bl	11230 <setlocale@plt>
   12514:	cmp	r0, #0
   12518:	beq	12534 <__assert_fail@plt+0x128c>
   1251c:	movw	r1, #21032	; 0x5228
   12520:	movt	r1, #2
   12524:	mov	r2, #3
   12528:	bl	11290 <strncmp@plt>
   1252c:	cmp	r0, #0
   12530:	bne	12590 <__assert_fail@plt+0x12e8>
   12534:	mov	r2, #5
   12538:	movw	r1, #21108	; 0x5274
   1253c:	movt	r1, #2
   12540:	mov	r0, #0
   12544:	bl	11098 <dcgettext@plt>
   12548:	mov	r1, r0
   1254c:	movw	r3, #19096	; 0x4a98
   12550:	movt	r3, #2
   12554:	movw	r2, #20976	; 0x51f0
   12558:	movt	r2, #2
   1255c:	mov	r0, #1
   12560:	bl	111dc <__printf_chk@plt>
   12564:	movw	r1, #21136	; 0x5290
   12568:	movt	r1, #2
   1256c:	mov	r2, #5
   12570:	mov	r0, #0
   12574:	bl	11098 <dcgettext@plt>
   12578:	movw	r4, #19096	; 0x4a98
   1257c:	movt	r4, #2
   12580:	movw	r3, #21564	; 0x543c
   12584:	movt	r3, #2
   12588:	mov	r1, r0
   1258c:	b	124b4 <__assert_fail@plt+0x120c>
   12590:	movw	r5, #19096	; 0x4a98
   12594:	movt	r5, #2
   12598:	mov	r4, r5
   1259c:	mov	r2, #5
   125a0:	movw	r1, #21036	; 0x522c
   125a4:	movt	r1, #2
   125a8:	mov	r0, #0
   125ac:	bl	11098 <dcgettext@plt>
   125b0:	ldr	r1, [r7]
   125b4:	bl	10fa8 <fputs_unlocked@plt>
   125b8:	b	12454 <__assert_fail@plt+0x11ac>
   125bc:	movw	r3, #25988	; 0x6584
   125c0:	movt	r3, #3
   125c4:	str	r0, [r3]
   125c8:	bx	lr
   125cc:	movw	r3, #25988	; 0x6584
   125d0:	movt	r3, #3
   125d4:	strb	r0, [r3, #4]
   125d8:	bx	lr
   125dc:	movw	r3, #25044	; 0x61d4
   125e0:	movt	r3, #3
   125e4:	strd	r4, [sp, #-16]!
   125e8:	ldr	r0, [r3]
   125ec:	str	r6, [sp, #8]
   125f0:	str	lr, [sp, #12]
   125f4:	sub	sp, sp, #8
   125f8:	bl	244d4 <__assert_fail@plt+0x1322c>
   125fc:	cmp	r0, #0
   12600:	beq	1262c <__assert_fail@plt+0x1384>
   12604:	movw	r4, #25988	; 0x6584
   12608:	movt	r4, #3
   1260c:	ldrb	r6, [r4, #4]
   12610:	bl	111a0 <__errno_location@plt>
   12614:	mov	r5, r0
   12618:	cmp	r6, #0
   1261c:	beq	12658 <__assert_fail@plt+0x13b0>
   12620:	ldr	r3, [r0]
   12624:	cmp	r3, #32
   12628:	bne	12658 <__assert_fail@plt+0x13b0>
   1262c:	movw	r3, #25032	; 0x61c8
   12630:	movt	r3, #3
   12634:	ldr	r0, [r3]
   12638:	bl	244d4 <__assert_fail@plt+0x1322c>
   1263c:	cmp	r0, #0
   12640:	bne	126a0 <__assert_fail@plt+0x13f8>
   12644:	add	sp, sp, #8
   12648:	ldrd	r4, [sp]
   1264c:	ldr	r6, [sp, #8]
   12650:	add	sp, sp, #12
   12654:	pop	{pc}		; (ldr pc, [sp], #4)
   12658:	movw	r1, #21900	; 0x558c
   1265c:	movt	r1, #2
   12660:	mov	r2, #5
   12664:	mov	r0, #0
   12668:	bl	11098 <dcgettext@plt>
   1266c:	mov	r6, r0
   12670:	ldr	r0, [r4]
   12674:	cmp	r0, #0
   12678:	beq	126b0 <__assert_fail@plt+0x1408>
   1267c:	ldr	r4, [r5]
   12680:	bl	14b54 <__assert_fail@plt+0x38ac>
   12684:	mov	r3, r0
   12688:	movw	r2, #21912	; 0x5598
   1268c:	movt	r2, #2
   12690:	mov	r0, #0
   12694:	str	r6, [sp]
   12698:	mov	r1, r4
   1269c:	bl	11110 <error@plt>
   126a0:	movw	r3, #24944	; 0x6170
   126a4:	movt	r3, #3
   126a8:	ldr	r0, [r3]
   126ac:	bl	1102c <_exit@plt>
   126b0:	mov	r3, r6
   126b4:	movw	r2, #21244	; 0x52fc
   126b8:	movt	r2, #2
   126bc:	ldr	r1, [r5]
   126c0:	bl	11110 <error@plt>
   126c4:	b	126a0 <__assert_fail@plt+0x13f8>
   126c8:	b	10fe4 <posix_fadvise64@plt>
   126cc:	cmp	r0, #0
   126d0:	bxeq	lr
   126d4:	str	r4, [sp, #-16]!
   126d8:	mov	r4, r1
   126dc:	strd	r6, [sp, #4]
   126e0:	mov	r6, #0
   126e4:	mov	r7, #0
   126e8:	str	lr, [sp, #12]
   126ec:	sub	sp, sp, #16
   126f0:	bl	111e8 <fileno@plt>
   126f4:	mov	r2, r6
   126f8:	mov	r3, r7
   126fc:	strd	r6, [sp]
   12700:	str	r4, [sp, #8]
   12704:	bl	10fe4 <posix_fadvise64@plt>
   12708:	add	sp, sp, #16
   1270c:	ldr	r4, [sp]
   12710:	ldrd	r6, [sp, #4]
   12714:	add	sp, sp, #12
   12718:	pop	{pc}		; (ldr pc, [sp], #4)
   1271c:	strd	r4, [sp, #-12]!
   12720:	mov	r4, r0
   12724:	str	lr, [sp, #8]
   12728:	sub	sp, sp, #12
   1272c:	bl	111e8 <fileno@plt>
   12730:	cmp	r0, #0
   12734:	mov	r0, r4
   12738:	blt	127bc <__assert_fail@plt+0x1514>
   1273c:	bl	11134 <__freading@plt>
   12740:	cmp	r0, #0
   12744:	bne	12788 <__assert_fail@plt+0x14e0>
   12748:	mov	r0, r4
   1274c:	bl	127d0 <__assert_fail@plt+0x1528>
   12750:	cmp	r0, #0
   12754:	beq	127b8 <__assert_fail@plt+0x1510>
   12758:	bl	111a0 <__errno_location@plt>
   1275c:	mov	r5, r0
   12760:	mov	r0, r4
   12764:	ldr	r4, [r5]
   12768:	bl	11200 <fclose@plt>
   1276c:	cmp	r4, #0
   12770:	mvnne	r0, #0
   12774:	strne	r4, [r5]
   12778:	add	sp, sp, #12
   1277c:	ldrd	r4, [sp]
   12780:	add	sp, sp, #8
   12784:	pop	{pc}		; (ldr pc, [sp], #4)
   12788:	mov	r0, r4
   1278c:	bl	111e8 <fileno@plt>
   12790:	mov	r1, #1
   12794:	mov	r2, #0
   12798:	mov	r3, #0
   1279c:	str	r1, [sp]
   127a0:	bl	110d4 <lseek64@plt>
   127a4:	mvn	r3, #0
   127a8:	mvn	r2, #0
   127ac:	cmp	r1, r3
   127b0:	cmpeq	r0, r2
   127b4:	bne	12748 <__assert_fail@plt+0x14a0>
   127b8:	mov	r0, r4
   127bc:	add	sp, sp, #12
   127c0:	ldrd	r4, [sp]
   127c4:	ldr	lr, [sp, #8]
   127c8:	add	sp, sp, #12
   127cc:	b	11200 <fclose@plt>
   127d0:	str	r4, [sp, #-8]!
   127d4:	subs	r4, r0, #0
   127d8:	str	lr, [sp, #4]
   127dc:	sub	sp, sp, #8
   127e0:	beq	127fc <__assert_fail@plt+0x1554>
   127e4:	bl	11134 <__freading@plt>
   127e8:	cmp	r0, #0
   127ec:	beq	127fc <__assert_fail@plt+0x1554>
   127f0:	ldr	r3, [r4]
   127f4:	tst	r3, #256	; 0x100
   127f8:	bne	12814 <__assert_fail@plt+0x156c>
   127fc:	mov	r0, r4
   12800:	add	sp, sp, #8
   12804:	ldr	r4, [sp]
   12808:	ldr	lr, [sp, #4]
   1280c:	add	sp, sp, #8
   12810:	b	10ffc <fflush@plt>
   12814:	mov	r1, #1
   12818:	mov	r2, #0
   1281c:	mov	r3, #0
   12820:	mov	r0, r4
   12824:	str	r1, [sp]
   12828:	bl	12830 <__assert_fail@plt+0x1588>
   1282c:	b	127fc <__assert_fail@plt+0x1554>
   12830:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12834:	mov	r4, r0
   12838:	ldr	ip, [r0, #4]
   1283c:	strd	r6, [sp, #8]
   12840:	str	lr, [sp, #20]
   12844:	ldr	lr, [r0, #8]
   12848:	str	r8, [sp, #16]
   1284c:	sub	sp, sp, #8
   12850:	ldr	r5, [sp, #32]
   12854:	cmp	lr, ip
   12858:	beq	12880 <__assert_fail@plt+0x15d8>
   1285c:	mov	r0, r4
   12860:	str	r5, [sp, #32]
   12864:	add	sp, sp, #8
   12868:	ldrd	r4, [sp]
   1286c:	ldrd	r6, [sp, #8]
   12870:	ldr	r8, [sp, #16]
   12874:	ldr	lr, [sp, #20]
   12878:	add	sp, sp, #24
   1287c:	b	1120c <fseeko64@plt>
   12880:	ldr	ip, [r0, #16]
   12884:	ldr	lr, [r0, #20]
   12888:	cmp	lr, ip
   1288c:	bne	1285c <__assert_fail@plt+0x15b4>
   12890:	ldr	r8, [r0, #36]	; 0x24
   12894:	cmp	r8, #0
   12898:	bne	1285c <__assert_fail@plt+0x15b4>
   1289c:	mov	r6, r2
   128a0:	mov	r7, r3
   128a4:	bl	111e8 <fileno@plt>
   128a8:	mov	r2, r6
   128ac:	mov	r3, r7
   128b0:	str	r5, [sp]
   128b4:	bl	110d4 <lseek64@plt>
   128b8:	mvn	r3, #0
   128bc:	mvn	r2, #0
   128c0:	cmp	r1, r3
   128c4:	cmpeq	r0, r2
   128c8:	beq	128f8 <__assert_fail@plt+0x1650>
   128cc:	ldr	r3, [r4]
   128d0:	strd	r0, [r4, #80]	; 0x50
   128d4:	bic	r3, r3, #16
   128d8:	str	r3, [r4]
   128dc:	mov	r0, r8
   128e0:	add	sp, sp, #8
   128e4:	ldrd	r4, [sp]
   128e8:	ldrd	r6, [sp, #8]
   128ec:	ldr	r8, [sp, #16]
   128f0:	add	sp, sp, #20
   128f4:	pop	{pc}		; (ldr pc, [sp], #4)
   128f8:	mvn	r8, #0
   128fc:	b	128dc <__assert_fail@plt+0x1634>
   12900:	mov	r3, #0
   12904:	str	r3, [r0]
   12908:	str	r3, [r0, #4]
   1290c:	str	r3, [r0, #8]
   12910:	bx	lr
   12914:	ldr	ip, [r1]
   12918:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1291c:	ldr	r3, [r0]
   12920:	strd	r6, [sp, #8]
   12924:	strd	sl, [sp, #24]
   12928:	ldr	fp, [r0, #8]
   1292c:	tst	ip, #16
   12930:	strd	r8, [sp, #16]
   12934:	str	lr, [sp, #32]
   12938:	sub	sp, sp, #12
   1293c:	add	r9, fp, r3
   12940:	bne	12a30 <__assert_fail@plt+0x1788>
   12944:	mov	r8, r2
   12948:	mov	r7, r0
   1294c:	mov	r5, r1
   12950:	mov	r4, fp
   12954:	b	1297c <__assert_fail@plt+0x16d4>
   12958:	add	r1, r3, #1
   1295c:	str	r1, [r5, #4]
   12960:	ldrb	r6, [r3]
   12964:	mov	sl, r6
   12968:	cmp	r4, r9
   1296c:	beq	129d0 <__assert_fail@plt+0x1728>
   12970:	cmp	sl, r8
   12974:	strb	r6, [r4], #1
   12978:	beq	12a08 <__assert_fail@plt+0x1760>
   1297c:	ldr	r3, [r5, #4]
   12980:	ldr	r1, [r5, #8]
   12984:	cmp	r3, r1
   12988:	bcc	12958 <__assert_fail@plt+0x16b0>
   1298c:	mov	r0, r5
   12990:	bl	11218 <__uflow@plt>
   12994:	cmn	r0, #1
   12998:	mov	sl, r0
   1299c:	bne	12a38 <__assert_fail@plt+0x1790>
   129a0:	cmp	fp, r4
   129a4:	beq	12a30 <__assert_fail@plt+0x1788>
   129a8:	ldr	r3, [r5]
   129ac:	tst	r3, #32
   129b0:	bne	12a30 <__assert_fail@plt+0x1788>
   129b4:	ldrb	r3, [r4, #-1]
   129b8:	cmp	r3, r8
   129bc:	beq	12a08 <__assert_fail@plt+0x1760>
   129c0:	cmp	r4, r9
   129c4:	mov	sl, r8
   129c8:	bne	12a04 <__assert_fail@plt+0x175c>
   129cc:	mov	r6, r8
   129d0:	mov	r2, #1
   129d4:	mov	r0, fp
   129d8:	mvn	r3, #0
   129dc:	mov	r1, r7
   129e0:	str	r2, [sp]
   129e4:	ldr	r4, [r7]
   129e8:	bl	2325c <__assert_fail@plt+0x11fb4>
   129ec:	ldr	r2, [r7]
   129f0:	mov	fp, r0
   129f4:	str	r0, [r7, #8]
   129f8:	add	r4, r0, r4
   129fc:	add	r9, r0, r2
   12a00:	b	12970 <__assert_fail@plt+0x16c8>
   12a04:	strb	r8, [r4], #1
   12a08:	sub	r4, r4, fp
   12a0c:	mov	r0, r7
   12a10:	str	r4, [r7, #4]
   12a14:	add	sp, sp, #12
   12a18:	ldrd	r4, [sp]
   12a1c:	ldrd	r6, [sp, #8]
   12a20:	ldrd	r8, [sp, #16]
   12a24:	ldrd	sl, [sp, #24]
   12a28:	add	sp, sp, #32
   12a2c:	pop	{pc}		; (ldr pc, [sp], #4)
   12a30:	mov	r0, #0
   12a34:	b	12a14 <__assert_fail@plt+0x176c>
   12a38:	uxtb	r6, r0
   12a3c:	b	12968 <__assert_fail@plt+0x16c0>
   12a40:	mov	r2, #10
   12a44:	b	12914 <__assert_fail@plt+0x166c>
   12a48:	ldr	r0, [r0, #8]
   12a4c:	b	24628 <__assert_fail@plt+0x13380>
   12a50:	strd	r4, [sp, #-16]!
   12a54:	subs	r4, r0, #0
   12a58:	str	r6, [sp, #8]
   12a5c:	str	lr, [sp, #12]
   12a60:	beq	12af8 <__assert_fail@plt+0x1850>
   12a64:	mov	r1, #47	; 0x2f
   12a68:	bl	1123c <strrchr@plt>
   12a6c:	subs	r5, r0, #0
   12a70:	beq	12ad0 <__assert_fail@plt+0x1828>
   12a74:	add	r6, r5, #1
   12a78:	sub	r3, r6, r4
   12a7c:	cmp	r3, #6
   12a80:	ble	12ad0 <__assert_fail@plt+0x1828>
   12a84:	movw	r1, #21976	; 0x55d8
   12a88:	movt	r1, #2
   12a8c:	mov	r2, #7
   12a90:	sub	r0, r5, #6
   12a94:	bl	11290 <strncmp@plt>
   12a98:	cmp	r0, #0
   12a9c:	bne	12ad0 <__assert_fail@plt+0x1828>
   12aa0:	movw	r1, #21984	; 0x55e0
   12aa4:	movt	r1, #2
   12aa8:	mov	r2, #3
   12aac:	mov	r0, r6
   12ab0:	bl	11290 <strncmp@plt>
   12ab4:	cmp	r0, #0
   12ab8:	movne	r4, r6
   12abc:	bne	12ad0 <__assert_fail@plt+0x1828>
   12ac0:	add	r4, r5, #4
   12ac4:	movw	r3, #25016	; 0x61b8
   12ac8:	movt	r3, #3
   12acc:	str	r4, [r3]
   12ad0:	movw	r2, #25996	; 0x658c
   12ad4:	movt	r2, #3
   12ad8:	ldr	r6, [sp, #8]
   12adc:	movw	r3, #25020	; 0x61bc
   12ae0:	movt	r3, #3
   12ae4:	str	r4, [r2]
   12ae8:	str	r4, [r3]
   12aec:	ldrd	r4, [sp]
   12af0:	add	sp, sp, #12
   12af4:	pop	{pc}		; (ldr pc, [sp], #4)
   12af8:	movw	r3, #25032	; 0x61c8
   12afc:	movt	r3, #3
   12b00:	movw	r0, #21920	; 0x55a0
   12b04:	movt	r0, #2
   12b08:	ldr	r3, [r3]
   12b0c:	mov	r2, #55	; 0x37
   12b10:	mov	r1, #1
   12b14:	bl	110c8 <fwrite@plt>
   12b18:	bl	1129c <abort@plt>
   12b1c:	strd	r4, [sp, #-16]!
   12b20:	mov	r4, #0
   12b24:	mov	r5, #0
   12b28:	cmp	r1, #10
   12b2c:	str	r6, [sp, #8]
   12b30:	strd	r4, [r0]
   12b34:	strd	r4, [r0, #8]
   12b38:	str	lr, [sp, #12]
   12b3c:	strd	r4, [r0, #16]
   12b40:	strd	r4, [r0, #24]
   12b44:	strd	r4, [r0, #32]
   12b48:	strd	r4, [r0, #40]	; 0x28
   12b4c:	beq	12b64 <__assert_fail@plt+0x18bc>
   12b50:	ldrd	r4, [sp]
   12b54:	str	r1, [r0]
   12b58:	ldr	r6, [sp, #8]
   12b5c:	add	sp, sp, #12
   12b60:	pop	{pc}		; (ldr pc, [sp], #4)
   12b64:	bl	1129c <abort@plt>
   12b68:	mov	r2, #5
   12b6c:	strd	r4, [sp, #-16]!
   12b70:	mov	r5, r0
   12b74:	str	r6, [sp, #8]
   12b78:	mov	r6, r1
   12b7c:	mov	r1, r0
   12b80:	mov	r0, #0
   12b84:	str	lr, [sp, #12]
   12b88:	bl	11098 <dcgettext@plt>
   12b8c:	cmp	r5, r0
   12b90:	mov	r4, r0
   12b94:	beq	12bac <__assert_fail@plt+0x1904>
   12b98:	mov	r0, r4
   12b9c:	ldrd	r4, [sp]
   12ba0:	ldr	r6, [sp, #8]
   12ba4:	add	sp, sp, #12
   12ba8:	pop	{pc}		; (ldr pc, [sp], #4)
   12bac:	bl	24688 <__assert_fail@plt+0x133e0>
   12bb0:	ldrb	r3, [r0]
   12bb4:	bic	r3, r3, #32
   12bb8:	cmp	r3, #85	; 0x55
   12bbc:	bne	12c24 <__assert_fail@plt+0x197c>
   12bc0:	ldrb	r3, [r0, #1]
   12bc4:	bic	r3, r3, #32
   12bc8:	cmp	r3, #84	; 0x54
   12bcc:	bne	12ca4 <__assert_fail@plt+0x19fc>
   12bd0:	ldrb	r3, [r0, #2]
   12bd4:	bic	r3, r3, #32
   12bd8:	cmp	r3, #70	; 0x46
   12bdc:	bne	12ca4 <__assert_fail@plt+0x19fc>
   12be0:	ldrb	r3, [r0, #3]
   12be4:	cmp	r3, #45	; 0x2d
   12be8:	bne	12ca4 <__assert_fail@plt+0x19fc>
   12bec:	ldrb	r3, [r0, #4]
   12bf0:	cmp	r3, #56	; 0x38
   12bf4:	bne	12ca4 <__assert_fail@plt+0x19fc>
   12bf8:	ldrb	r3, [r0, #5]
   12bfc:	cmp	r3, #0
   12c00:	bne	12ca4 <__assert_fail@plt+0x19fc>
   12c04:	ldrb	r2, [r4]
   12c08:	movw	r3, #22076	; 0x563c
   12c0c:	movt	r3, #2
   12c10:	movw	r4, #22088	; 0x5648
   12c14:	movt	r4, #2
   12c18:	cmp	r2, #96	; 0x60
   12c1c:	movne	r4, r3
   12c20:	b	12b98 <__assert_fail@plt+0x18f0>
   12c24:	cmp	r3, #71	; 0x47
   12c28:	bne	12ca4 <__assert_fail@plt+0x19fc>
   12c2c:	ldrb	r3, [r0, #1]
   12c30:	bic	r3, r3, #32
   12c34:	cmp	r3, #66	; 0x42
   12c38:	bne	12ca4 <__assert_fail@plt+0x19fc>
   12c3c:	ldrb	r3, [r0, #2]
   12c40:	cmp	r3, #49	; 0x31
   12c44:	bne	12ca4 <__assert_fail@plt+0x19fc>
   12c48:	ldrb	r3, [r0, #3]
   12c4c:	cmp	r3, #56	; 0x38
   12c50:	bne	12ca4 <__assert_fail@plt+0x19fc>
   12c54:	ldrb	r3, [r0, #4]
   12c58:	cmp	r3, #48	; 0x30
   12c5c:	bne	12ca4 <__assert_fail@plt+0x19fc>
   12c60:	ldrb	r3, [r0, #5]
   12c64:	cmp	r3, #51	; 0x33
   12c68:	bne	12ca4 <__assert_fail@plt+0x19fc>
   12c6c:	ldrb	r3, [r0, #6]
   12c70:	cmp	r3, #48	; 0x30
   12c74:	bne	12ca4 <__assert_fail@plt+0x19fc>
   12c78:	ldrb	r3, [r0, #7]
   12c7c:	cmp	r3, #0
   12c80:	bne	12ca4 <__assert_fail@plt+0x19fc>
   12c84:	ldrb	r2, [r4]
   12c88:	movw	r3, #22080	; 0x5640
   12c8c:	movt	r3, #2
   12c90:	movw	r4, #22084	; 0x5644
   12c94:	movt	r4, #2
   12c98:	cmp	r2, #96	; 0x60
   12c9c:	movne	r4, r3
   12ca0:	b	12b98 <__assert_fail@plt+0x18f0>
   12ca4:	movw	r3, #22092	; 0x564c
   12ca8:	movt	r3, #2
   12cac:	cmp	r6, #9
   12cb0:	movw	r4, #22072	; 0x5638
   12cb4:	movt	r4, #2
   12cb8:	movne	r4, r3
   12cbc:	b	12b98 <__assert_fail@plt+0x18f0>
   12cc0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12cc4:	strd	r6, [sp, #8]
   12cc8:	strd	r8, [sp, #16]
   12ccc:	strd	sl, [sp, #24]
   12cd0:	mov	fp, r0
   12cd4:	mov	sl, r1
   12cd8:	str	lr, [sp, #32]
   12cdc:	sub	sp, sp, #116	; 0x74
   12ce0:	ldr	r8, [sp, #152]	; 0x98
   12ce4:	str	r3, [sp, #28]
   12ce8:	ldr	r3, [sp, #156]	; 0x9c
   12cec:	str	r2, [sp, #32]
   12cf0:	and	r4, r3, #2
   12cf4:	ubfx	r3, r3, #1, #1
   12cf8:	str	r3, [sp, #44]	; 0x2c
   12cfc:	bl	110e0 <__ctype_get_mb_cur_max@plt>
   12d00:	str	r0, [sp, #64]	; 0x40
   12d04:	cmp	r8, #10
   12d08:	ldrls	pc, [pc, r8, lsl #2]
   12d0c:	b	1447c <__assert_fail@plt+0x31d4>
   12d10:	andeq	r3, r1, r4, lsl r1
   12d14:			; <UNDEFINED> instruction: 0x000131b0
   12d18:	andeq	r3, r1, ip, lsl #15
   12d1c:	ldrdeq	r3, [r1], -r0
   12d20:	andeq	r3, r1, r8, ror r0
   12d24:	andeq	r3, r1, r4, asr #1
   12d28:	andeq	r3, r1, r4, asr #2
   12d2c:	andeq	r3, r1, r0, lsl #3
   12d30:	andeq	r2, r1, ip, lsr sp
   12d34:	andeq	r2, r1, ip, lsr sp
   12d38:	andeq	r2, r1, ip, lsr sp
   12d3c:	cmp	r8, #10
   12d40:	beq	12d6c <__assert_fail@plt+0x1ac4>
   12d44:	mov	r1, r8
   12d48:	movw	r0, #22096	; 0x5650
   12d4c:	movt	r0, #2
   12d50:	bl	12b68 <__assert_fail@plt+0x18c0>
   12d54:	mov	r1, r8
   12d58:	str	r0, [sp, #164]	; 0xa4
   12d5c:	movw	r0, #22092	; 0x564c
   12d60:	movt	r0, #2
   12d64:	bl	12b68 <__assert_fail@plt+0x18c0>
   12d68:	str	r0, [sp, #168]	; 0xa8
   12d6c:	cmp	r4, #0
   12d70:	movne	r4, #0
   12d74:	beq	14158 <__assert_fail@plt+0x2eb0>
   12d78:	mov	r3, #1
   12d7c:	mov	r5, #0
   12d80:	ldr	r0, [sp, #168]	; 0xa8
   12d84:	str	r3, [sp, #36]	; 0x24
   12d88:	str	r3, [sp, #40]	; 0x28
   12d8c:	str	r5, [sp, #68]	; 0x44
   12d90:	bl	11188 <strlen@plt>
   12d94:	ldr	r3, [sp, #168]	; 0xa8
   12d98:	str	r5, [sp, #48]	; 0x30
   12d9c:	str	r0, [sp, #56]	; 0x38
   12da0:	str	r3, [sp, #60]	; 0x3c
   12da4:	str	r5, [sp, #72]	; 0x48
   12da8:	str	r8, [sp, #152]	; 0x98
   12dac:	mov	r8, fp
   12db0:	mov	r9, #0
   12db4:	ldr	fp, [sp, #152]	; 0x98
   12db8:	ldr	r3, [sp, #28]
   12dbc:	cmn	r3, #1
   12dc0:	beq	13320 <__assert_fail@plt+0x2078>
   12dc4:	ldr	r3, [sp, #28]
   12dc8:	subs	r6, r3, r9
   12dcc:	movne	r6, #1
   12dd0:	cmp	r6, #0
   12dd4:	beq	13338 <__assert_fail@plt+0x2090>
   12dd8:	ldr	r0, [sp, #32]
   12ddc:	ldr	r7, [sp, #40]	; 0x28
   12de0:	add	r3, r0, r9
   12de4:	cmp	fp, #2
   12de8:	moveq	r7, #0
   12dec:	andne	r7, r7, #1
   12df0:	str	r3, [sp, #52]	; 0x34
   12df4:	cmp	r7, #0
   12df8:	beq	137d4 <__assert_fail@plt+0x252c>
   12dfc:	ldr	r2, [sp, #56]	; 0x38
   12e00:	cmp	r2, #0
   12e04:	beq	13a70 <__assert_fail@plt+0x27c8>
   12e08:	ldr	r1, [sp, #28]
   12e0c:	cmp	r2, #1
   12e10:	mov	r3, r2
   12e14:	movls	r3, #0
   12e18:	movhi	r3, #1
   12e1c:	add	r5, r9, r2
   12e20:	cmn	r1, #1
   12e24:	movne	r3, #0
   12e28:	cmp	r3, #0
   12e2c:	beq	12e38 <__assert_fail@plt+0x1b90>
   12e30:	bl	11188 <strlen@plt>
   12e34:	str	r0, [sp, #28]
   12e38:	ldr	r3, [sp, #28]
   12e3c:	cmp	r5, r3
   12e40:	bhi	13a70 <__assert_fail@plt+0x27c8>
   12e44:	ldr	r0, [sp, #52]	; 0x34
   12e48:	ldr	r2, [sp, #56]	; 0x38
   12e4c:	ldr	r1, [sp, #60]	; 0x3c
   12e50:	bl	11074 <memcmp@plt>
   12e54:	cmp	r0, #0
   12e58:	bne	13a70 <__assert_fail@plt+0x27c8>
   12e5c:	ldr	r3, [sp, #44]	; 0x2c
   12e60:	cmp	r3, #0
   12e64:	bne	143a0 <__assert_fail@plt+0x30f8>
   12e68:	ldr	r3, [sp, #52]	; 0x34
   12e6c:	ldrb	r5, [r3]
   12e70:	cmp	r5, #126	; 0x7e
   12e74:	ldrls	pc, [pc, r5, lsl #2]
   12e78:	b	13730 <__assert_fail@plt+0x2488>
   12e7c:	andeq	r3, r1, r4, lsr r6
   12e80:	andeq	r3, r1, r0, lsr r7
   12e84:	andeq	r3, r1, r0, lsr r7
   12e88:	andeq	r3, r1, r0, lsr r7
   12e8c:	andeq	r3, r1, r0, lsr r7
   12e90:	andeq	r3, r1, r0, lsr r7
   12e94:	andeq	r3, r1, r0, lsr r7
   12e98:	andeq	r3, r1, r8, lsl #12
   12e9c:	andeq	r3, r1, r0, lsl #12
   12ea0:	andeq	r3, r1, r8, asr #10
   12ea4:	strdeq	r3, [r1], -r4
   12ea8:	andeq	r3, r1, r0, asr #10
   12eac:	ldrdeq	r3, [r1], -r0
   12eb0:	andeq	r3, r1, ip, lsl r6
   12eb4:	andeq	r3, r1, r0, lsr r7
   12eb8:	andeq	r3, r1, r0, lsr r7
   12ebc:	andeq	r3, r1, r0, lsr r7
   12ec0:	andeq	r3, r1, r0, lsr r7
   12ec4:	andeq	r3, r1, r0, lsr r7
   12ec8:	andeq	r3, r1, r0, lsr r7
   12ecc:	andeq	r3, r1, r0, lsr r7
   12ed0:	andeq	r3, r1, r0, lsr r7
   12ed4:	andeq	r3, r1, r0, lsr r7
   12ed8:	andeq	r3, r1, r0, lsr r7
   12edc:	andeq	r3, r1, r0, lsr r7
   12ee0:	andeq	r3, r1, r0, lsr r7
   12ee4:	andeq	r3, r1, r0, lsr r7
   12ee8:	andeq	r3, r1, r0, lsr r7
   12eec:	andeq	r3, r1, r0, lsr r7
   12ef0:	andeq	r3, r1, r0, lsr r7
   12ef4:	andeq	r3, r1, r0, lsr r7
   12ef8:	andeq	r3, r1, r0, lsr r7
   12efc:	andeq	r3, r1, ip, lsl #14
   12f00:	andeq	r3, r1, r4, lsl r6
   12f04:	andeq	r3, r1, r4, lsl r6
   12f08:	strdeq	r3, [r1], -r0
   12f0c:	andeq	r3, r1, r4, lsl r6
   12f10:	andeq	r3, r1, r4, lsr #14
   12f14:	andeq	r3, r1, r4, lsl r6
   12f18:	andeq	r3, r1, r0, ror r4
   12f1c:	andeq	r3, r1, r4, lsl r6
   12f20:	andeq	r3, r1, r4, lsl r6
   12f24:	andeq	r3, r1, r4, lsl r6
   12f28:	andeq	r3, r1, r4, lsr #14
   12f2c:	andeq	r3, r1, r4, lsr #14
   12f30:	andeq	r3, r1, r4, lsr #14
   12f34:	andeq	r3, r1, r4, lsr #14
   12f38:	andeq	r3, r1, r4, lsr #14
   12f3c:	andeq	r3, r1, r4, lsr #14
   12f40:	andeq	r3, r1, r4, lsr #14
   12f44:	andeq	r3, r1, r4, lsr #14
   12f48:	andeq	r3, r1, r4, lsr #14
   12f4c:	andeq	r3, r1, r4, lsr #14
   12f50:	andeq	r3, r1, r4, lsr #14
   12f54:	andeq	r3, r1, r4, lsr #14
   12f58:	andeq	r3, r1, r4, lsr #14
   12f5c:	andeq	r3, r1, r4, lsr #14
   12f60:	andeq	r3, r1, r4, lsr #14
   12f64:	andeq	r3, r1, r4, lsr #14
   12f68:	andeq	r3, r1, r4, lsl r6
   12f6c:	andeq	r3, r1, r4, lsl r6
   12f70:	andeq	r3, r1, r4, lsl r6
   12f74:	andeq	r3, r1, r4, lsl r6
   12f78:	andeq	r3, r1, r4, asr #8
   12f7c:	andeq	r3, r1, r0, lsr r7
   12f80:	andeq	r3, r1, r4, lsr #14
   12f84:	andeq	r3, r1, r4, lsr #14
   12f88:	andeq	r3, r1, r4, lsr #14
   12f8c:	andeq	r3, r1, r4, lsr #14
   12f90:	andeq	r3, r1, r4, lsr #14
   12f94:	andeq	r3, r1, r4, lsr #14
   12f98:	andeq	r3, r1, r4, lsr #14
   12f9c:	andeq	r3, r1, r4, lsr #14
   12fa0:	andeq	r3, r1, r4, lsr #14
   12fa4:	andeq	r3, r1, r4, lsr #14
   12fa8:	andeq	r3, r1, r4, lsr #14
   12fac:	andeq	r3, r1, r4, lsr #14
   12fb0:	andeq	r3, r1, r4, lsr #14
   12fb4:	andeq	r3, r1, r4, lsr #14
   12fb8:	andeq	r3, r1, r4, lsr #14
   12fbc:	andeq	r3, r1, r4, lsr #14
   12fc0:	andeq	r3, r1, r4, lsr #14
   12fc4:	andeq	r3, r1, r4, lsr #14
   12fc8:	andeq	r3, r1, r4, lsr #14
   12fcc:	andeq	r3, r1, r4, lsr #14
   12fd0:	andeq	r3, r1, r4, lsr #14
   12fd4:	andeq	r3, r1, r4, lsr #14
   12fd8:	andeq	r3, r1, r4, lsr #14
   12fdc:	andeq	r3, r1, r4, lsr #14
   12fe0:	andeq	r3, r1, r4, lsr #14
   12fe4:	andeq	r3, r1, r4, lsr #14
   12fe8:	andeq	r3, r1, r4, lsl r6
   12fec:	andeq	r3, r1, ip, ror #7
   12ff0:	andeq	r3, r1, r4, lsr #14
   12ff4:	andeq	r3, r1, r4, lsl r6
   12ff8:	andeq	r3, r1, r4, lsr #14
   12ffc:	andeq	r3, r1, r4, lsl r6
   13000:	andeq	r3, r1, r4, lsr #14
   13004:	andeq	r3, r1, r4, lsr #14
   13008:	andeq	r3, r1, r4, lsr #14
   1300c:	andeq	r3, r1, r4, lsr #14
   13010:	andeq	r3, r1, r4, lsr #14
   13014:	andeq	r3, r1, r4, lsr #14
   13018:	andeq	r3, r1, r4, lsr #14
   1301c:	andeq	r3, r1, r4, lsr #14
   13020:	andeq	r3, r1, r4, lsr #14
   13024:	andeq	r3, r1, r4, lsr #14
   13028:	andeq	r3, r1, r4, lsr #14
   1302c:	andeq	r3, r1, r4, lsr #14
   13030:	andeq	r3, r1, r4, lsr #14
   13034:	andeq	r3, r1, r4, lsr #14
   13038:	andeq	r3, r1, r4, lsr #14
   1303c:	andeq	r3, r1, r4, lsr #14
   13040:	andeq	r3, r1, r4, lsr #14
   13044:	andeq	r3, r1, r4, lsr #14
   13048:	andeq	r3, r1, r4, lsr #14
   1304c:	andeq	r3, r1, r4, lsr #14
   13050:	andeq	r3, r1, r4, lsr #14
   13054:	andeq	r3, r1, r4, lsr #14
   13058:	andeq	r3, r1, r4, lsr #14
   1305c:	andeq	r3, r1, r4, lsr #14
   13060:	andeq	r3, r1, r4, lsr #14
   13064:	andeq	r3, r1, r4, lsr #14
   13068:	andeq	r3, r1, r0, lsl r2
   1306c:	andeq	r3, r1, r4, lsl r6
   13070:	andeq	r3, r1, r0, lsl r2
   13074:	strdeq	r3, [r1], -r0
   13078:	cmp	r4, #0
   1307c:	moveq	r3, #1
   13080:	streq	r3, [sp, #40]	; 0x28
   13084:	beq	13798 <__assert_fail@plt+0x24f0>
   13088:	mov	r3, #0
   1308c:	mov	r2, #1
   13090:	mov	r4, r3
   13094:	str	r2, [sp, #36]	; 0x24
   13098:	str	r2, [sp, #44]	; 0x2c
   1309c:	str	r2, [sp, #56]	; 0x38
   130a0:	str	r3, [sp, #68]	; 0x44
   130a4:	movw	r3, #22092	; 0x564c
   130a8:	movt	r3, #2
   130ac:	str	r4, [sp, #40]	; 0x28
   130b0:	mov	r8, #2
   130b4:	str	r4, [sp, #48]	; 0x30
   130b8:	str	r3, [sp, #60]	; 0x3c
   130bc:	str	r4, [sp, #72]	; 0x48
   130c0:	b	12da8 <__assert_fail@plt+0x1b00>
   130c4:	cmp	r4, #0
   130c8:	bne	14314 <__assert_fail@plt+0x306c>
   130cc:	cmp	sl, #0
   130d0:	beq	140d4 <__assert_fail@plt+0x2e2c>
   130d4:	mov	r3, #34	; 0x22
   130d8:	mov	r1, r4
   130dc:	mov	r2, #1
   130e0:	strb	r3, [fp]
   130e4:	movw	r3, #22072	; 0x5638
   130e8:	movt	r3, #2
   130ec:	mov	r4, r2
   130f0:	str	r2, [sp, #36]	; 0x24
   130f4:	str	r2, [sp, #40]	; 0x28
   130f8:	str	r1, [sp, #44]	; 0x2c
   130fc:	str	r1, [sp, #48]	; 0x30
   13100:	str	r2, [sp, #56]	; 0x38
   13104:	str	r3, [sp, #60]	; 0x3c
   13108:	str	r1, [sp, #68]	; 0x44
   1310c:	str	r1, [sp, #72]	; 0x48
   13110:	b	12da8 <__assert_fail@plt+0x1b00>
   13114:	mov	r3, #0
   13118:	mov	r4, r8
   1311c:	str	r3, [sp, #40]	; 0x28
   13120:	str	r3, [sp, #44]	; 0x2c
   13124:	str	r3, [sp, #48]	; 0x30
   13128:	str	r8, [sp, #56]	; 0x38
   1312c:	str	r3, [sp, #60]	; 0x3c
   13130:	str	r3, [sp, #68]	; 0x44
   13134:	mov	r3, #1
   13138:	str	r3, [sp, #36]	; 0x24
   1313c:	str	r8, [sp, #72]	; 0x48
   13140:	b	12da8 <__assert_fail@plt+0x1b00>
   13144:	mov	r3, #1
   13148:	mov	r2, #0
   1314c:	mov	r4, r2
   13150:	mov	r8, #5
   13154:	str	r3, [sp, #36]	; 0x24
   13158:	str	r3, [sp, #40]	; 0x28
   1315c:	str	r3, [sp, #44]	; 0x2c
   13160:	str	r2, [sp, #48]	; 0x30
   13164:	str	r3, [sp, #56]	; 0x38
   13168:	movw	r3, #22072	; 0x5638
   1316c:	movt	r3, #2
   13170:	str	r3, [sp, #60]	; 0x3c
   13174:	str	r2, [sp, #68]	; 0x44
   13178:	str	r2, [sp, #72]	; 0x48
   1317c:	b	12da8 <__assert_fail@plt+0x1b00>
   13180:	mov	r3, #0
   13184:	mov	r2, #1
   13188:	mov	r4, r3
   1318c:	str	r2, [sp, #36]	; 0x24
   13190:	str	r2, [sp, #40]	; 0x28
   13194:	str	r3, [sp, #44]	; 0x2c
   13198:	str	r3, [sp, #48]	; 0x30
   1319c:	str	r3, [sp, #56]	; 0x38
   131a0:	str	r3, [sp, #60]	; 0x3c
   131a4:	str	r3, [sp, #68]	; 0x44
   131a8:	str	r3, [sp, #72]	; 0x48
   131ac:	b	12da8 <__assert_fail@plt+0x1b00>
   131b0:	mov	r2, #1
   131b4:	mov	r3, #0
   131b8:	mov	r4, r3
   131bc:	str	r2, [sp, #36]	; 0x24
   131c0:	str	r2, [sp, #44]	; 0x2c
   131c4:	str	r8, [sp, #56]	; 0x38
   131c8:	str	r3, [sp, #68]	; 0x44
   131cc:	b	130a4 <__assert_fail@plt+0x1dfc>
   131d0:	mov	r3, #1
   131d4:	mov	r2, #0
   131d8:	mov	r4, r2
   131dc:	mov	r8, #2
   131e0:	str	r3, [sp, #36]	; 0x24
   131e4:	str	r3, [sp, #40]	; 0x28
   131e8:	str	r3, [sp, #44]	; 0x2c
   131ec:	str	r2, [sp, #48]	; 0x30
   131f0:	str	r3, [sp, #56]	; 0x38
   131f4:	movw	r3, #22092	; 0x564c
   131f8:	movt	r3, #2
   131fc:	str	r3, [sp, #60]	; 0x3c
   13200:	str	r2, [sp, #68]	; 0x44
   13204:	str	r2, [sp, #72]	; 0x48
   13208:	b	12da8 <__assert_fail@plt+0x1b00>
   1320c:	mov	r7, #0
   13210:	ldr	r3, [sp, #28]
   13214:	cmn	r3, #1
   13218:	beq	13cf0 <__assert_fail@plt+0x2a48>
   1321c:	ldr	r3, [sp, #28]
   13220:	subs	r2, r3, #1
   13224:	movne	r2, #1
   13228:	sub	r3, fp, #2
   1322c:	cmp	r2, #0
   13230:	clz	r3, r3
   13234:	lsr	r3, r3, #5
   13238:	bne	13244 <__assert_fail@plt+0x1f9c>
   1323c:	cmp	r9, #0
   13240:	beq	13a50 <__assert_fail@plt+0x27a8>
   13244:	mov	r6, #0
   13248:	ldr	r2, [sp, #40]	; 0x28
   1324c:	eor	r2, r2, #1
   13250:	orrs	r3, r3, r2
   13254:	bne	1342c <__assert_fail@plt+0x2184>
   13258:	ldr	r2, [sp, #160]	; 0xa0
   1325c:	cmp	r2, #0
   13260:	beq	13280 <__assert_fail@plt+0x1fd8>
   13264:	ldr	r0, [sp, #160]	; 0xa0
   13268:	ubfx	r1, r5, #5, #8
   1326c:	and	r2, r5, #31
   13270:	ldr	r1, [r0, r1, lsl #2]
   13274:	lsr	r2, r1, r2
   13278:	tst	r2, #1
   1327c:	bne	13288 <__assert_fail@plt+0x1fe0>
   13280:	cmp	r7, #0
   13284:	beq	134f8 <__assert_fail@plt+0x2250>
   13288:	ldr	r2, [sp, #44]	; 0x2c
   1328c:	sub	r3, fp, #2
   13290:	clz	r3, r3
   13294:	lsr	r3, r3, #5
   13298:	cmp	r2, #0
   1329c:	bne	14044 <__assert_fail@plt+0x2d9c>
   132a0:	ldr	r2, [sp, #48]	; 0x30
   132a4:	eor	r2, r2, #1
   132a8:	ands	r3, r3, r2
   132ac:	beq	132e4 <__assert_fail@plt+0x203c>
   132b0:	cmp	sl, r4
   132b4:	str	r3, [sp, #48]	; 0x30
   132b8:	movhi	r2, #39	; 0x27
   132bc:	strbhi	r2, [r8, r4]
   132c0:	add	r2, r4, #1
   132c4:	cmp	sl, r2
   132c8:	movhi	r1, #36	; 0x24
   132cc:	strbhi	r1, [r8, r2]
   132d0:	add	r2, r4, #2
   132d4:	add	r4, r4, #3
   132d8:	cmp	sl, r2
   132dc:	movhi	r1, #39	; 0x27
   132e0:	strbhi	r1, [r8, r2]
   132e4:	cmp	r4, sl
   132e8:	add	r9, r9, #1
   132ec:	movcc	r3, #92	; 0x5c
   132f0:	strbcc	r3, [r8, r4]
   132f4:	add	r4, r4, #1
   132f8:	cmp	r4, sl
   132fc:	ldr	r3, [sp, #36]	; 0x24
   13300:	strbcc	r5, [r8, r4]
   13304:	cmp	r6, #0
   13308:	add	r4, r4, #1
   1330c:	moveq	r3, #0
   13310:	str	r3, [sp, #36]	; 0x24
   13314:	ldr	r3, [sp, #28]
   13318:	cmn	r3, #1
   1331c:	bne	12dc4 <__assert_fail@plt+0x1b1c>
   13320:	ldr	r3, [sp, #32]
   13324:	ldrb	r6, [r3, r9]
   13328:	adds	r6, r6, #0
   1332c:	movne	r6, #1
   13330:	cmp	r6, #0
   13334:	bne	12dd8 <__assert_fail@plt+0x1b30>
   13338:	str	fp, [sp, #152]	; 0x98
   1333c:	mov	fp, r8
   13340:	cmp	r4, #0
   13344:	ldr	r1, [sp, #44]	; 0x2c
   13348:	movne	r3, #0
   1334c:	ldr	r8, [sp, #152]	; 0x98
   13350:	sub	r2, r8, #2
   13354:	clz	r2, r2
   13358:	lsr	r2, r2, #5
   1335c:	andeq	r3, r2, r1
   13360:	cmp	r3, #0
   13364:	bne	14420 <__assert_fail@plt+0x3178>
   13368:	eor	r3, r1, #1
   1336c:	ands	r2, r2, r3
   13370:	beq	1434c <__assert_fail@plt+0x30a4>
   13374:	ldr	r3, [sp, #68]	; 0x44
   13378:	cmp	r3, #0
   1337c:	beq	14350 <__assert_fail@plt+0x30a8>
   13380:	ldr	r3, [sp, #36]	; 0x24
   13384:	cmp	r3, #0
   13388:	bne	143dc <__assert_fail@plt+0x3134>
   1338c:	ldr	r3, [sp, #72]	; 0x48
   13390:	adds	r3, r3, #0
   13394:	movne	r3, #1
   13398:	cmp	sl, #0
   1339c:	movne	r3, #0
   133a0:	cmp	r3, #0
   133a4:	ldreq	r2, [sp, #68]	; 0x44
   133a8:	beq	14350 <__assert_fail@plt+0x30a8>
   133ac:	ldr	r2, [sp, #72]	; 0x48
   133b0:	str	r3, [sp, #68]	; 0x44
   133b4:	movw	r3, #22092	; 0x564c
   133b8:	movt	r3, #2
   133bc:	mov	r1, #39	; 0x27
   133c0:	mov	r4, #1
   133c4:	ldr	sl, [sp, #72]	; 0x48
   133c8:	mov	r8, #2
   133cc:	str	r3, [sp, #60]	; 0x3c
   133d0:	mov	r3, #0
   133d4:	strb	r1, [fp]
   133d8:	str	r3, [sp, #44]	; 0x2c
   133dc:	str	r4, [sp, #56]	; 0x38
   133e0:	str	r2, [sp, #72]	; 0x48
   133e4:	b	12da8 <__assert_fail@plt+0x1b00>
   133e8:	mov	r7, #0
   133ec:	cmp	fp, #2
   133f0:	beq	13cd0 <__assert_fail@plt+0x2a28>
   133f4:	ldr	r2, [sp, #40]	; 0x28
   133f8:	ldr	r3, [sp, #56]	; 0x38
   133fc:	ldr	r1, [sp, #44]	; 0x2c
   13400:	cmp	r3, #0
   13404:	moveq	r3, #0
   13408:	andne	r3, r2, r1
   1340c:	cmp	r3, #0
   13410:	moveq	r5, #92	; 0x5c
   13414:	moveq	r3, r5
   13418:	bne	13cdc <__assert_fail@plt+0x2a34>
   1341c:	ldr	r2, [sp, #40]	; 0x28
   13420:	cmp	r2, #0
   13424:	bne	14118 <__assert_fail@plt+0x2e70>
   13428:	mov	r6, #0
   1342c:	ldr	r3, [sp, #44]	; 0x2c
   13430:	cmp	r3, #0
   13434:	beq	13cc8 <__assert_fail@plt+0x2a20>
   13438:	mov	r3, #0
   1343c:	b	13258 <__assert_fail@plt+0x1fb0>
   13440:	mov	r7, #0
   13444:	cmp	fp, #2
   13448:	beq	13d40 <__assert_fail@plt+0x2a98>
   1344c:	cmp	fp, #5
   13450:	beq	13d04 <__assert_fail@plt+0x2a5c>
   13454:	sub	r3, fp, #2
   13458:	mov	r6, #0
   1345c:	clz	r3, r3
   13460:	mov	r5, #63	; 0x3f
   13464:	lsr	r3, r3, #5
   13468:	b	13248 <__assert_fail@plt+0x1fa0>
   1346c:	mov	r7, #0
   13470:	cmp	fp, #2
   13474:	movne	r3, #0
   13478:	movne	r5, #39	; 0x27
   1347c:	strne	r6, [sp, #68]	; 0x44
   13480:	bne	13248 <__assert_fail@plt+0x1fa0>
   13484:	ldr	r3, [sp, #44]	; 0x2c
   13488:	cmp	r3, #0
   1348c:	bne	14148 <__assert_fail@plt+0x2ea0>
   13490:	ldr	r3, [sp, #72]	; 0x48
   13494:	cmp	sl, #0
   13498:	clz	r3, r3
   1349c:	lsr	r3, r3, #5
   134a0:	moveq	r3, #0
   134a4:	cmp	r3, #0
   134a8:	bne	14074 <__assert_fail@plt+0x2dcc>
   134ac:	cmp	sl, r4
   134b0:	movhi	r3, #39	; 0x27
   134b4:	strbhi	r3, [r8, r4]
   134b8:	add	r3, r4, #1
   134bc:	cmp	sl, r3
   134c0:	movhi	r2, #92	; 0x5c
   134c4:	strbhi	r2, [r8, r3]
   134c8:	add	r3, r4, #2
   134cc:	cmp	sl, r3
   134d0:	bls	134dc <__assert_fail@plt+0x2234>
   134d4:	mov	r2, #39	; 0x27
   134d8:	strb	r2, [r8, r3]
   134dc:	mov	r3, #0
   134e0:	cmp	r7, #0
   134e4:	add	r4, r4, #3
   134e8:	mov	r5, #39	; 0x27
   134ec:	str	r3, [sp, #48]	; 0x30
   134f0:	str	r6, [sp, #68]	; 0x44
   134f4:	bne	13288 <__assert_fail@plt+0x1fe0>
   134f8:	ldr	r2, [sp, #48]	; 0x30
   134fc:	eor	r3, r3, #1
   13500:	add	r9, r9, #1
   13504:	and	r3, r3, r2
   13508:	uxtb	r3, r3
   1350c:	cmp	r3, #0
   13510:	beq	132f8 <__assert_fail@plt+0x2050>
   13514:	cmp	sl, r4
   13518:	movhi	r3, #39	; 0x27
   1351c:	strbhi	r3, [r8, r4]
   13520:	add	r3, r4, #1
   13524:	add	r4, r4, #2
   13528:	cmp	sl, r3
   1352c:	movhi	r2, #39	; 0x27
   13530:	strbhi	r2, [r8, r3]
   13534:	mov	r3, #0
   13538:	str	r3, [sp, #48]	; 0x30
   1353c:	b	132f8 <__assert_fail@plt+0x2050>
   13540:	mov	r3, #118	; 0x76
   13544:	b	1341c <__assert_fail@plt+0x2174>
   13548:	mov	r3, #116	; 0x74
   1354c:	ldr	r2, [sp, #44]	; 0x2c
   13550:	cmp	fp, #2
   13554:	movne	r2, #0
   13558:	andeq	r2, r2, #1
   1355c:	cmp	r2, #0
   13560:	beq	1341c <__assert_fail@plt+0x2174>
   13564:	mov	fp, r8
   13568:	mov	r8, #2
   1356c:	ldr	r3, [sp, #40]	; 0x28
   13570:	cmp	r3, #0
   13574:	movne	r8, #4
   13578:	mov	lr, #0
   1357c:	mov	r0, fp
   13580:	ldr	r2, [sp, #32]
   13584:	ldr	r3, [sp, #156]	; 0x9c
   13588:	ldr	r1, [sp, #164]	; 0xa4
   1358c:	bic	ip, r3, #2
   13590:	ldr	r3, [sp, #28]
   13594:	stm	sp, {r8, ip, lr}
   13598:	ldr	ip, [sp, #168]	; 0xa8
   1359c:	str	r1, [sp, #12]
   135a0:	mov	r1, sl
   135a4:	str	ip, [sp, #16]
   135a8:	bl	12cc0 <__assert_fail@plt+0x1a18>
   135ac:	mov	r4, r0
   135b0:	mov	r0, r4
   135b4:	add	sp, sp, #116	; 0x74
   135b8:	ldrd	r4, [sp]
   135bc:	ldrd	r6, [sp, #8]
   135c0:	ldrd	r8, [sp, #16]
   135c4:	ldrd	sl, [sp, #24]
   135c8:	add	sp, sp, #32
   135cc:	pop	{pc}		; (ldr pc, [sp], #4)
   135d0:	mov	r5, #102	; 0x66
   135d4:	ldr	r2, [sp, #44]	; 0x2c
   135d8:	sub	r3, fp, #2
   135dc:	clz	r3, r3
   135e0:	lsr	r3, r3, #5
   135e4:	cmp	r2, #0
   135e8:	bne	14044 <__assert_fail@plt+0x2d9c>
   135ec:	mov	r6, r2
   135f0:	b	132e4 <__assert_fail@plt+0x203c>
   135f4:	mov	r5, #110	; 0x6e
   135f8:	mov	r6, #0
   135fc:	b	13288 <__assert_fail@plt+0x1fe0>
   13600:	mov	r5, #98	; 0x62
   13604:	b	135d4 <__assert_fail@plt+0x232c>
   13608:	mov	r5, #97	; 0x61
   1360c:	b	135d4 <__assert_fail@plt+0x232c>
   13610:	mov	r7, #0
   13614:	mov	r6, #0
   13618:	b	13438 <__assert_fail@plt+0x2190>
   1361c:	mov	r5, #114	; 0x72
   13620:	b	135f8 <__assert_fail@plt+0x2350>
   13624:	ldr	r3, [sp, #44]	; 0x2c
   13628:	cmp	r3, #0
   1362c:	bne	143bc <__assert_fail@plt+0x3114>
   13630:	mov	r7, r3
   13634:	ldr	r3, [sp, #48]	; 0x30
   13638:	sub	r2, fp, #2
   1363c:	clz	r2, r2
   13640:	lsr	r2, r2, #5
   13644:	eor	r3, r3, #1
   13648:	ands	r3, r2, r3
   1364c:	beq	14060 <__assert_fail@plt+0x2db8>
   13650:	cmp	sl, r4
   13654:	movhi	r1, #39	; 0x27
   13658:	strbhi	r1, [r8, r4]
   1365c:	add	r1, r4, #1
   13660:	cmp	sl, r1
   13664:	movhi	r0, #36	; 0x24
   13668:	strbhi	r0, [r8, r1]
   1366c:	add	r1, r4, #2
   13670:	cmp	sl, r1
   13674:	movhi	r0, #39	; 0x27
   13678:	strbhi	r0, [r8, r1]
   1367c:	add	r1, r4, #3
   13680:	cmp	sl, r1
   13684:	bls	140b8 <__assert_fail@plt+0x2e10>
   13688:	mov	r4, r1
   1368c:	mov	r1, #92	; 0x5c
   13690:	mov	r0, r4
   13694:	str	r3, [sp, #48]	; 0x30
   13698:	strb	r1, [r8, r4]
   1369c:	cmp	fp, #2
   136a0:	add	r4, r4, #1
   136a4:	beq	14108 <__assert_fail@plt+0x2e60>
   136a8:	ldr	r1, [sp, #28]
   136ac:	add	r3, r9, #1
   136b0:	cmp	r3, r1
   136b4:	bcs	136cc <__assert_fail@plt+0x2424>
   136b8:	ldr	r1, [sp, #32]
   136bc:	ldrb	r3, [r1, r3]
   136c0:	sub	r3, r3, #48	; 0x30
   136c4:	cmp	r3, #9
   136c8:	bls	14120 <__assert_fail@plt+0x2e78>
   136cc:	mov	r5, #48	; 0x30
   136d0:	ldr	r3, [sp, #40]	; 0x28
   136d4:	eor	r3, r3, #1
   136d8:	orrs	r2, r2, r3
   136dc:	mov	r3, r6
   136e0:	moveq	r6, r2
   136e4:	beq	13258 <__assert_fail@plt+0x1fb0>
   136e8:	mov	r6, #0
   136ec:	b	13280 <__assert_fail@plt+0x1fd8>
   136f0:	cmp	r9, #0
   136f4:	mov	r2, r7
   136f8:	bne	13c98 <__assert_fail@plt+0x29f0>
   136fc:	mov	r6, r7
   13700:	mov	r3, r9
   13704:	mov	r7, r2
   13708:	b	13248 <__assert_fail@plt+0x1fa0>
   1370c:	mov	r2, r7
   13710:	mov	r6, r7
   13714:	mov	r3, #0
   13718:	mov	r7, r2
   1371c:	mov	r5, #32
   13720:	b	13248 <__assert_fail@plt+0x1fa0>
   13724:	mov	r6, r7
   13728:	b	13438 <__assert_fail@plt+0x2190>
   1372c:	mov	r7, #0
   13730:	ldr	r3, [sp, #64]	; 0x40
   13734:	cmp	r3, #1
   13738:	bne	13d58 <__assert_fail@plt+0x2ab0>
   1373c:	bl	11170 <__ctype_b_loc@plt>
   13740:	ldr	r2, [r0]
   13744:	sxth	r3, r5
   13748:	lsl	r3, r3, #1
   1374c:	ldr	r1, [sp, #64]	; 0x40
   13750:	ldrh	r3, [r2, r3]
   13754:	mov	ip, r1
   13758:	and	r3, r3, #16384	; 0x4000
   1375c:	cmp	r3, #0
   13760:	ldr	r3, [sp, #40]	; 0x28
   13764:	movne	r6, #1
   13768:	moveq	r6, #0
   1376c:	movne	r2, #0
   13770:	andeq	r2, r3, #1
   13774:	cmp	r2, #0
   13778:	bne	140a0 <__assert_fail@plt+0x2df8>
   1377c:	sub	r3, fp, #2
   13780:	clz	r3, r3
   13784:	lsr	r3, r3, #5
   13788:	b	13248 <__assert_fail@plt+0x1fa0>
   1378c:	cmp	r4, #0
   13790:	bne	14430 <__assert_fail@plt+0x3188>
   13794:	str	r4, [sp, #40]	; 0x28
   13798:	cmp	sl, #0
   1379c:	bne	14460 <__assert_fail@plt+0x31b8>
   137a0:	mov	r3, #1
   137a4:	movw	r2, #22092	; 0x564c
   137a8:	movt	r2, #2
   137ac:	mov	r4, r3
   137b0:	mov	r8, #2
   137b4:	str	r3, [sp, #36]	; 0x24
   137b8:	str	sl, [sp, #44]	; 0x2c
   137bc:	str	sl, [sp, #48]	; 0x30
   137c0:	str	r3, [sp, #56]	; 0x38
   137c4:	str	r2, [sp, #60]	; 0x3c
   137c8:	str	sl, [sp, #68]	; 0x44
   137cc:	str	sl, [sp, #72]	; 0x48
   137d0:	b	12da8 <__assert_fail@plt+0x1b00>
   137d4:	ldr	r3, [sp, #32]
   137d8:	ldrb	r5, [r3, r9]
   137dc:	cmp	r5, #126	; 0x7e
   137e0:	ldrls	pc, [pc, r5, lsl #2]
   137e4:	b	13730 <__assert_fail@plt+0x2488>
   137e8:	andeq	r3, r1, ip, lsl #20
   137ec:	andeq	r3, r1, r0, lsr r7
   137f0:	andeq	r3, r1, r0, lsr r7
   137f4:	andeq	r3, r1, r0, lsr r7
   137f8:	andeq	r3, r1, r0, lsr r7
   137fc:	andeq	r3, r1, r0, lsr r7
   13800:	andeq	r3, r1, r0, lsr r7
   13804:	andeq	r3, r1, r4, lsl #20
   13808:	strdeq	r3, [r1], -ip
   1380c:	andeq	r3, r1, r8, asr #10
   13810:	strdeq	r3, [r1], -r4
   13814:	andeq	r3, r1, r0, asr #10
   13818:	andeq	r3, r1, ip, ror #19
   1381c:	andeq	r3, r1, r4, ror #19
   13820:	andeq	r3, r1, r0, lsr r7
   13824:	andeq	r3, r1, r0, lsr r7
   13828:	andeq	r3, r1, r0, lsr r7
   1382c:	andeq	r3, r1, r0, lsr r7
   13830:	andeq	r3, r1, r0, lsr r7
   13834:	andeq	r3, r1, r0, lsr r7
   13838:	andeq	r3, r1, r0, lsr r7
   1383c:	andeq	r3, r1, r0, lsr r7
   13840:	andeq	r3, r1, r0, lsr r7
   13844:	andeq	r3, r1, r0, lsr r7
   13848:	andeq	r3, r1, r0, lsr r7
   1384c:	andeq	r3, r1, r0, lsr r7
   13850:	andeq	r3, r1, r0, lsr r7
   13854:	andeq	r3, r1, r0, lsr r7
   13858:	andeq	r3, r1, r0, lsr r7
   1385c:	andeq	r3, r1, r0, lsr r7
   13860:	andeq	r3, r1, r0, lsr r7
   13864:	andeq	r3, r1, r0, lsr r7
   13868:	andeq	r3, r1, r0, ror #20
   1386c:	andeq	r3, r1, r0, asr #20
   13870:	andeq	r3, r1, r0, asr #20
   13874:	andeq	r3, r1, r0, lsr sl
   13878:	andeq	r3, r1, r0, asr #20
   1387c:	andeq	r3, r1, ip, ror r7
   13880:	andeq	r3, r1, r0, asr #20
   13884:	andeq	r3, r1, r0, ror r4
   13888:	andeq	r3, r1, r0, asr #20
   1388c:	andeq	r3, r1, r0, asr #20
   13890:	andeq	r3, r1, r0, asr #20
   13894:	andeq	r3, r1, ip, ror r7
   13898:	andeq	r3, r1, ip, ror r7
   1389c:	andeq	r3, r1, ip, ror r7
   138a0:	andeq	r3, r1, ip, ror r7
   138a4:	andeq	r3, r1, ip, ror r7
   138a8:	andeq	r3, r1, ip, ror r7
   138ac:	andeq	r3, r1, ip, ror r7
   138b0:	andeq	r3, r1, ip, ror r7
   138b4:	andeq	r3, r1, ip, ror r7
   138b8:	andeq	r3, r1, ip, ror r7
   138bc:	andeq	r3, r1, ip, ror r7
   138c0:	andeq	r3, r1, ip, ror r7
   138c4:	andeq	r3, r1, ip, ror r7
   138c8:	andeq	r3, r1, ip, ror r7
   138cc:	andeq	r3, r1, ip, ror r7
   138d0:	andeq	r3, r1, ip, ror r7
   138d4:	andeq	r3, r1, r0, asr #20
   138d8:	andeq	r3, r1, r0, asr #20
   138dc:	andeq	r3, r1, r0, asr #20
   138e0:	andeq	r3, r1, r0, asr #20
   138e4:	andeq	r3, r1, r4, asr #8
   138e8:	andeq	r3, r1, r0, lsr r7
   138ec:	andeq	r3, r1, ip, ror r7
   138f0:	andeq	r3, r1, ip, ror r7
   138f4:	andeq	r3, r1, ip, ror r7
   138f8:	andeq	r3, r1, ip, ror r7
   138fc:	andeq	r3, r1, ip, ror r7
   13900:	andeq	r3, r1, ip, ror r7
   13904:	andeq	r3, r1, ip, ror r7
   13908:	andeq	r3, r1, ip, ror r7
   1390c:	andeq	r3, r1, ip, ror r7
   13910:	andeq	r3, r1, ip, ror r7
   13914:	andeq	r3, r1, ip, ror r7
   13918:	andeq	r3, r1, ip, ror r7
   1391c:	andeq	r3, r1, ip, ror r7
   13920:	andeq	r3, r1, ip, ror r7
   13924:	andeq	r3, r1, ip, ror r7
   13928:	andeq	r3, r1, ip, ror r7
   1392c:	andeq	r3, r1, ip, ror r7
   13930:	andeq	r3, r1, ip, ror r7
   13934:	andeq	r3, r1, ip, ror r7
   13938:	andeq	r3, r1, ip, ror r7
   1393c:	andeq	r3, r1, ip, ror r7
   13940:	andeq	r3, r1, ip, ror r7
   13944:	andeq	r3, r1, ip, ror r7
   13948:	andeq	r3, r1, ip, ror r7
   1394c:	andeq	r3, r1, ip, ror r7
   13950:	andeq	r3, r1, ip, ror r7
   13954:	andeq	r3, r1, r0, asr #20
   13958:	andeq	r3, r1, ip, ror #7
   1395c:	andeq	r3, r1, ip, ror r7
   13960:	andeq	r3, r1, r0, asr #20
   13964:	andeq	r3, r1, ip, ror r7
   13968:	andeq	r3, r1, r0, asr #20
   1396c:	andeq	r3, r1, ip, ror r7
   13970:	andeq	r3, r1, ip, ror r7
   13974:	andeq	r3, r1, ip, ror r7
   13978:	andeq	r3, r1, ip, ror r7
   1397c:	andeq	r3, r1, ip, ror r7
   13980:	andeq	r3, r1, ip, ror r7
   13984:	andeq	r3, r1, ip, ror r7
   13988:	andeq	r3, r1, ip, ror r7
   1398c:	andeq	r3, r1, ip, ror r7
   13990:	andeq	r3, r1, ip, ror r7
   13994:	andeq	r3, r1, ip, ror r7
   13998:	andeq	r3, r1, ip, ror r7
   1399c:	andeq	r3, r1, ip, ror r7
   139a0:	andeq	r3, r1, ip, ror r7
   139a4:	andeq	r3, r1, ip, ror r7
   139a8:	andeq	r3, r1, ip, ror r7
   139ac:	andeq	r3, r1, ip, ror r7
   139b0:	andeq	r3, r1, ip, ror r7
   139b4:	andeq	r3, r1, ip, ror r7
   139b8:	andeq	r3, r1, ip, ror r7
   139bc:	andeq	r3, r1, ip, ror r7
   139c0:	andeq	r3, r1, ip, ror r7
   139c4:	andeq	r3, r1, ip, ror r7
   139c8:	andeq	r3, r1, ip, ror r7
   139cc:	andeq	r3, r1, ip, ror r7
   139d0:	andeq	r3, r1, ip, ror r7
   139d4:	andeq	r3, r1, r0, lsl r2
   139d8:	andeq	r3, r1, r0, asr #20
   139dc:	andeq	r3, r1, r0, lsl r2
   139e0:	andeq	r3, r1, r0, lsr sl
   139e4:	mov	r3, #114	; 0x72
   139e8:	b	1354c <__assert_fail@plt+0x22a4>
   139ec:	mov	r3, #102	; 0x66
   139f0:	b	1341c <__assert_fail@plt+0x2174>
   139f4:	mov	r3, #110	; 0x6e
   139f8:	b	1354c <__assert_fail@plt+0x22a4>
   139fc:	mov	r3, #98	; 0x62
   13a00:	b	1341c <__assert_fail@plt+0x2174>
   13a04:	mov	r3, #97	; 0x61
   13a08:	b	1341c <__assert_fail@plt+0x2174>
   13a0c:	ldr	r3, [sp, #40]	; 0x28
   13a10:	cmp	r3, #0
   13a14:	bne	13624 <__assert_fail@plt+0x237c>
   13a18:	ldr	r3, [sp, #156]	; 0x9c
   13a1c:	tst	r3, #1
   13a20:	addne	r9, r9, #1
   13a24:	bne	12db8 <__assert_fail@plt+0x1b10>
   13a28:	ldr	r7, [sp, #40]	; 0x28
   13a2c:	b	13428 <__assert_fail@plt+0x2180>
   13a30:	sub	r3, fp, #2
   13a34:	clz	r3, r3
   13a38:	lsr	r3, r3, #5
   13a3c:	b	1323c <__assert_fail@plt+0x1f94>
   13a40:	sub	r3, fp, #2
   13a44:	mov	r6, #0
   13a48:	clz	r3, r3
   13a4c:	lsr	r3, r3, #5
   13a50:	ldr	r2, [sp, #44]	; 0x2c
   13a54:	tst	r2, r3
   13a58:	beq	13248 <__assert_fail@plt+0x1fa0>
   13a5c:	b	13564 <__assert_fail@plt+0x22bc>
   13a60:	sub	r3, fp, #2
   13a64:	clz	r3, r3
   13a68:	lsr	r3, r3, #5
   13a6c:	b	13a50 <__assert_fail@plt+0x27a8>
   13a70:	ldr	r3, [sp, #52]	; 0x34
   13a74:	ldrb	r5, [r3]
   13a78:	cmp	r5, #126	; 0x7e
   13a7c:	ldrls	pc, [pc, r5, lsl #2]
   13a80:	b	1372c <__assert_fail@plt+0x2484>
   13a84:	andeq	r3, r1, r4, lsr #12
   13a88:	andeq	r3, r1, ip, lsr #14
   13a8c:	andeq	r3, r1, ip, lsr #14
   13a90:	andeq	r3, r1, ip, lsr #14
   13a94:	andeq	r3, r1, ip, lsr #14
   13a98:	andeq	r3, r1, ip, lsr #14
   13a9c:	andeq	r3, r1, ip, lsr #14
   13aa0:	andeq	r3, r1, r8, lsl #12
   13aa4:	andeq	r3, r1, r0, lsl #12
   13aa8:			; <UNDEFINED> instruction: 0x00013cbc
   13aac:	strdeq	r3, [r1], -r4
   13ab0:			; <UNDEFINED> instruction: 0x00013cb0
   13ab4:	ldrdeq	r3, [r1], -r0
   13ab8:	andeq	r3, r1, ip, lsl r6
   13abc:	andeq	r3, r1, ip, lsr #14
   13ac0:	andeq	r3, r1, ip, lsr #14
   13ac4:	andeq	r3, r1, ip, lsr #14
   13ac8:	andeq	r3, r1, ip, lsr #14
   13acc:	andeq	r3, r1, ip, lsr #14
   13ad0:	andeq	r3, r1, ip, lsr #14
   13ad4:	andeq	r3, r1, ip, lsr #14
   13ad8:	andeq	r3, r1, ip, lsr #14
   13adc:	andeq	r3, r1, ip, lsr #14
   13ae0:	andeq	r3, r1, ip, lsr #14
   13ae4:	andeq	r3, r1, ip, lsr #14
   13ae8:	andeq	r3, r1, ip, lsr #14
   13aec:	andeq	r3, r1, ip, lsr #14
   13af0:	andeq	r3, r1, ip, lsr #14
   13af4:	andeq	r3, r1, ip, lsr #14
   13af8:	andeq	r3, r1, ip, lsr #14
   13afc:	andeq	r3, r1, ip, lsr #14
   13b00:	andeq	r3, r1, ip, lsr #14
   13b04:	andeq	r3, r1, r8, lsr #25
   13b08:	andeq	r3, r1, r0, lsl r6
   13b0c:	andeq	r3, r1, r0, lsl r6
   13b10:	andeq	r3, r1, ip, lsl #25
   13b14:	andeq	r3, r1, r0, lsl r6
   13b18:	andeq	r3, r1, r0, lsl #25
   13b1c:	andeq	r3, r1, r0, lsl r6
   13b20:	andeq	r3, r1, ip, ror #8
   13b24:	andeq	r3, r1, r0, lsl r6
   13b28:	andeq	r3, r1, r0, lsl r6
   13b2c:	andeq	r3, r1, r0, lsl r6
   13b30:	andeq	r3, r1, r0, lsl #25
   13b34:	andeq	r3, r1, r0, lsl #25
   13b38:	andeq	r3, r1, r0, lsl #25
   13b3c:	andeq	r3, r1, r0, lsl #25
   13b40:	andeq	r3, r1, r0, lsl #25
   13b44:	andeq	r3, r1, r0, lsl #25
   13b48:	andeq	r3, r1, r0, lsl #25
   13b4c:	andeq	r3, r1, r0, lsl #25
   13b50:	andeq	r3, r1, r0, lsl #25
   13b54:	andeq	r3, r1, r0, lsl #25
   13b58:	andeq	r3, r1, r0, lsl #25
   13b5c:	andeq	r3, r1, r0, lsl #25
   13b60:	andeq	r3, r1, r0, lsl #25
   13b64:	andeq	r3, r1, r0, lsl #25
   13b68:	andeq	r3, r1, r0, lsl #25
   13b6c:	andeq	r3, r1, r0, lsl #25
   13b70:	andeq	r3, r1, r0, lsl r6
   13b74:	andeq	r3, r1, r0, lsl r6
   13b78:	andeq	r3, r1, r0, lsl r6
   13b7c:	andeq	r3, r1, r0, lsl r6
   13b80:	andeq	r3, r1, r0, asr #8
   13b84:	andeq	r3, r1, ip, lsr #14
   13b88:	andeq	r3, r1, r0, lsl #25
   13b8c:	andeq	r3, r1, r0, lsl #25
   13b90:	andeq	r3, r1, r0, lsl #25
   13b94:	andeq	r3, r1, r0, lsl #25
   13b98:	andeq	r3, r1, r0, lsl #25
   13b9c:	andeq	r3, r1, r0, lsl #25
   13ba0:	andeq	r3, r1, r0, lsl #25
   13ba4:	andeq	r3, r1, r0, lsl #25
   13ba8:	andeq	r3, r1, r0, lsl #25
   13bac:	andeq	r3, r1, r0, lsl #25
   13bb0:	andeq	r3, r1, r0, lsl #25
   13bb4:	andeq	r3, r1, r0, lsl #25
   13bb8:	andeq	r3, r1, r0, lsl #25
   13bbc:	andeq	r3, r1, r0, lsl #25
   13bc0:	andeq	r3, r1, r0, lsl #25
   13bc4:	andeq	r3, r1, r0, lsl #25
   13bc8:	andeq	r3, r1, r0, lsl #25
   13bcc:	andeq	r3, r1, r0, lsl #25
   13bd0:	andeq	r3, r1, r0, lsl #25
   13bd4:	andeq	r3, r1, r0, lsl #25
   13bd8:	andeq	r3, r1, r0, lsl #25
   13bdc:	andeq	r3, r1, r0, lsl #25
   13be0:	andeq	r3, r1, r0, lsl #25
   13be4:	andeq	r3, r1, r0, lsl #25
   13be8:	andeq	r3, r1, r0, lsl #25
   13bec:	andeq	r3, r1, r0, lsl #25
   13bf0:	andeq	r3, r1, r0, lsl r6
   13bf4:	andeq	r3, r1, r8, ror #7
   13bf8:	andeq	r3, r1, r0, lsl #25
   13bfc:	andeq	r3, r1, r0, lsl r6
   13c00:	andeq	r3, r1, r0, lsl #25
   13c04:	andeq	r3, r1, r0, lsl r6
   13c08:	andeq	r3, r1, r0, lsl #25
   13c0c:	andeq	r3, r1, r0, lsl #25
   13c10:	andeq	r3, r1, r0, lsl #25
   13c14:	andeq	r3, r1, r0, lsl #25
   13c18:	andeq	r3, r1, r0, lsl #25
   13c1c:	andeq	r3, r1, r0, lsl #25
   13c20:	andeq	r3, r1, r0, lsl #25
   13c24:	andeq	r3, r1, r0, lsl #25
   13c28:	andeq	r3, r1, r0, lsl #25
   13c2c:	andeq	r3, r1, r0, lsl #25
   13c30:	andeq	r3, r1, r0, lsl #25
   13c34:	andeq	r3, r1, r0, lsl #25
   13c38:	andeq	r3, r1, r0, lsl #25
   13c3c:	andeq	r3, r1, r0, lsl #25
   13c40:	andeq	r3, r1, r0, lsl #25
   13c44:	andeq	r3, r1, r0, lsl #25
   13c48:	andeq	r3, r1, r0, lsl #25
   13c4c:	andeq	r3, r1, r0, lsl #25
   13c50:	andeq	r3, r1, r0, lsl #25
   13c54:	andeq	r3, r1, r0, lsl #25
   13c58:	andeq	r3, r1, r0, lsl #25
   13c5c:	andeq	r3, r1, r0, lsl #25
   13c60:	andeq	r3, r1, r0, lsl #25
   13c64:	andeq	r3, r1, r0, lsl #25
   13c68:	andeq	r3, r1, r0, lsl #25
   13c6c:	andeq	r3, r1, r0, lsl #25
   13c70:	andeq	r3, r1, ip, lsl #4
   13c74:	andeq	r3, r1, r0, lsl r6
   13c78:	andeq	r3, r1, ip, lsl #4
   13c7c:	andeq	r3, r1, ip, lsl #25
   13c80:	mov	r6, r7
   13c84:	mov	r7, #0
   13c88:	b	13438 <__assert_fail@plt+0x2190>
   13c8c:	cmp	r9, #0
   13c90:	mov	r2, #0
   13c94:	beq	136fc <__assert_fail@plt+0x2454>
   13c98:	mov	r6, #0
   13c9c:	mov	r7, r2
   13ca0:	mov	r3, r6
   13ca4:	b	13258 <__assert_fail@plt+0x1fb0>
   13ca8:	mov	r2, #0
   13cac:	b	13710 <__assert_fail@plt+0x2468>
   13cb0:	mov	r7, #0
   13cb4:	mov	r3, #118	; 0x76
   13cb8:	b	1341c <__assert_fail@plt+0x2174>
   13cbc:	mov	r7, #0
   13cc0:	mov	r3, #116	; 0x74
   13cc4:	b	1354c <__assert_fail@plt+0x22a4>
   13cc8:	ldr	r3, [sp, #44]	; 0x2c
   13ccc:	b	13280 <__assert_fail@plt+0x1fd8>
   13cd0:	ldr	r3, [sp, #44]	; 0x2c
   13cd4:	cmp	r3, #0
   13cd8:	bne	14148 <__assert_fail@plt+0x2ea0>
   13cdc:	add	r9, r9, #1
   13ce0:	mov	r6, #0
   13ce4:	ldr	r3, [sp, #48]	; 0x30
   13ce8:	mov	r5, #92	; 0x5c
   13cec:	b	1350c <__assert_fail@plt+0x2264>
   13cf0:	ldr	r3, [sp, #32]
   13cf4:	ldrb	r2, [r3, #1]
   13cf8:	adds	r2, r2, #0
   13cfc:	movne	r2, #1
   13d00:	b	13228 <__assert_fail@plt+0x1f80>
   13d04:	ldr	r3, [sp, #156]	; 0x9c
   13d08:	ands	r3, r3, #4
   13d0c:	beq	13d34 <__assert_fail@plt+0x2a8c>
   13d10:	ldr	r2, [sp, #28]
   13d14:	add	r3, r9, #2
   13d18:	cmp	r3, r2
   13d1c:	bcs	13d30 <__assert_fail@plt+0x2a88>
   13d20:	ldr	r2, [sp, #52]	; 0x34
   13d24:	ldrb	r5, [r2, #1]
   13d28:	cmp	r5, #63	; 0x3f
   13d2c:	beq	141ac <__assert_fail@plt+0x2f04>
   13d30:	mov	r3, #0
   13d34:	mov	r5, #63	; 0x3f
   13d38:	mov	r6, r3
   13d3c:	b	13248 <__assert_fail@plt+0x1fa0>
   13d40:	ldr	r3, [sp, #44]	; 0x2c
   13d44:	cmp	r3, #0
   13d48:	bne	14148 <__assert_fail@plt+0x2ea0>
   13d4c:	mov	r6, r3
   13d50:	mov	r5, #63	; 0x3f
   13d54:	b	13280 <__assert_fail@plt+0x1fd8>
   13d58:	ldr	r1, [sp, #28]
   13d5c:	mov	r2, #0
   13d60:	mov	r3, #0
   13d64:	strd	r2, [sp, #104]	; 0x68
   13d68:	cmn	r1, #1
   13d6c:	bne	13d7c <__assert_fail@plt+0x2ad4>
   13d70:	ldr	r0, [sp, #32]
   13d74:	bl	11188 <strlen@plt>
   13d78:	str	r0, [sp, #28]
   13d7c:	str	r8, [sp, #76]	; 0x4c
   13d80:	mov	r3, #0
   13d84:	str	sl, [sp, #80]	; 0x50
   13d88:	ldr	sl, [sp, #32]
   13d8c:	str	r5, [sp, #84]	; 0x54
   13d90:	mov	r5, r3
   13d94:	ldr	r8, [sp, #44]	; 0x2c
   13d98:	str	r7, [sp, #88]	; 0x58
   13d9c:	str	r4, [sp, #92]	; 0x5c
   13da0:	ldr	r2, [sp, #28]
   13da4:	add	r4, r9, r5
   13da8:	add	r3, sp, #104	; 0x68
   13dac:	add	r7, sl, r4
   13db0:	add	r0, sp, #100	; 0x64
   13db4:	mov	r1, r7
   13db8:	sub	r2, r2, r4
   13dbc:	bl	246d4 <__assert_fail@plt+0x1342c>
   13dc0:	subs	r1, r0, #0
   13dc4:	beq	13e10 <__assert_fail@plt+0x2b68>
   13dc8:	cmn	r1, #1
   13dcc:	beq	14188 <__assert_fail@plt+0x2ee0>
   13dd0:	cmn	r1, #2
   13dd4:	beq	142a8 <__assert_fail@plt+0x3000>
   13dd8:	cmp	fp, #2
   13ddc:	movne	r3, #0
   13de0:	andeq	r3, r8, #1
   13de4:	cmp	r3, #0
   13de8:	bne	13f74 <__assert_fail@plt+0x2ccc>
   13dec:	ldr	r0, [sp, #100]	; 0x64
   13df0:	add	r5, r5, r1
   13df4:	bl	110bc <iswprint@plt>
   13df8:	cmp	r0, #0
   13dfc:	add	r0, sp, #104	; 0x68
   13e00:	moveq	r6, #0
   13e04:	bl	1105c <mbsinit@plt>
   13e08:	cmp	r0, #0
   13e0c:	beq	13da0 <__assert_fail@plt+0x2af8>
   13e10:	ldr	r3, [sp, #40]	; 0x28
   13e14:	mov	ip, r5
   13e18:	eor	r2, r6, #1
   13e1c:	ldr	r8, [sp, #76]	; 0x4c
   13e20:	ldr	sl, [sp, #80]	; 0x50
   13e24:	and	r2, r2, r3
   13e28:	ldr	r5, [sp, #84]	; 0x54
   13e2c:	ldr	r7, [sp, #88]	; 0x58
   13e30:	ldr	r4, [sp, #92]	; 0x5c
   13e34:	cmp	ip, #1
   13e38:	bls	13774 <__assert_fail@plt+0x24cc>
   13e3c:	add	r1, ip, r9
   13e40:	mov	r0, #39	; 0x27
   13e44:	ldr	lr, [sp, #52]	; 0x34
   13e48:	mov	ip, #0
   13e4c:	str	r6, [sp, #52]	; 0x34
   13e50:	ldr	r6, [sp, #48]	; 0x30
   13e54:	b	13f10 <__assert_fail@plt+0x2c68>
   13e58:	ldr	ip, [sp, #44]	; 0x2c
   13e5c:	sub	r3, fp, #2
   13e60:	clz	r3, r3
   13e64:	lsr	r3, r3, #5
   13e68:	cmp	ip, #0
   13e6c:	bne	14080 <__assert_fail@plt+0x2dd8>
   13e70:	eor	ip, r6, #1
   13e74:	ands	r3, r3, ip
   13e78:	beq	13ea8 <__assert_fail@plt+0x2c00>
   13e7c:	cmp	sl, r4
   13e80:	add	ip, r4, #1
   13e84:	strbhi	r0, [r8, r4]
   13e88:	cmp	sl, ip
   13e8c:	movhi	r6, #36	; 0x24
   13e90:	strbhi	r6, [r8, ip]
   13e94:	add	ip, r4, #2
   13e98:	mov	r6, r3
   13e9c:	cmp	sl, ip
   13ea0:	add	r4, r4, #3
   13ea4:	strbhi	r0, [r8, ip]
   13ea8:	cmp	sl, r4
   13eac:	movhi	r3, #92	; 0x5c
   13eb0:	strbhi	r3, [r8, r4]
   13eb4:	add	r3, r4, #1
   13eb8:	cmp	sl, r3
   13ebc:	bls	13ecc <__assert_fail@plt+0x2c24>
   13ec0:	lsr	ip, r5, #6
   13ec4:	add	ip, ip, #48	; 0x30
   13ec8:	strb	ip, [r8, r3]
   13ecc:	add	r3, r4, #2
   13ed0:	cmp	sl, r3
   13ed4:	bls	13ee4 <__assert_fail@plt+0x2c3c>
   13ed8:	ubfx	ip, r5, #3, #3
   13edc:	add	ip, ip, #48	; 0x30
   13ee0:	strb	ip, [r8, r3]
   13ee4:	add	r9, r9, #1
   13ee8:	and	r5, r5, #7
   13eec:	cmp	r9, r1
   13ef0:	add	r5, r5, #48	; 0x30
   13ef4:	add	r4, r4, #3
   13ef8:	bcs	140ac <__assert_fail@plt+0x2e04>
   13efc:	mov	ip, r2
   13f00:	cmp	sl, r4
   13f04:	strbhi	r5, [r8, r4]
   13f08:	add	r4, r4, #1
   13f0c:	ldrb	r5, [lr, #1]!
   13f10:	cmp	r2, #0
   13f14:	bne	13e58 <__assert_fail@plt+0x2bb0>
   13f18:	eor	r3, ip, #1
   13f1c:	cmp	r7, #0
   13f20:	and	r3, r3, r6
   13f24:	uxtb	r3, r3
   13f28:	beq	13f3c <__assert_fail@plt+0x2c94>
   13f2c:	cmp	sl, r4
   13f30:	movhi	r7, #92	; 0x5c
   13f34:	strbhi	r7, [r8, r4]
   13f38:	add	r4, r4, #1
   13f3c:	add	r9, r9, #1
   13f40:	cmp	r9, r1
   13f44:	bcs	14094 <__assert_fail@plt+0x2dec>
   13f48:	cmp	r3, #0
   13f4c:	beq	140cc <__assert_fail@plt+0x2e24>
   13f50:	cmp	sl, r4
   13f54:	add	r3, r4, #1
   13f58:	mov	r7, #0
   13f5c:	strbhi	r0, [r8, r4]
   13f60:	cmp	sl, r3
   13f64:	add	r4, r4, #2
   13f68:	mov	r6, r7
   13f6c:	strbhi	r0, [r8, r3]
   13f70:	b	13f00 <__assert_fail@plt+0x2c58>
   13f74:	cmp	r1, #1
   13f78:	beq	13dec <__assert_fail@plt+0x2b44>
   13f7c:	add	r2, r4, #1
   13f80:	add	r3, sl, r1
   13f84:	add	r2, sl, r2
   13f88:	add	r4, r3, r4
   13f8c:	ldrb	r3, [r2], #1
   13f90:	sub	r3, r3, #91	; 0x5b
   13f94:	cmp	r3, #33	; 0x21
   13f98:	ldrls	pc, [pc, r3, lsl #2]
   13f9c:	b	14028 <__assert_fail@plt+0x2d80>
   13fa0:	andeq	r4, r1, r4, lsr r0
   13fa4:	andeq	r4, r1, r4, lsr r0
   13fa8:	andeq	r4, r1, r8, lsr #32
   13fac:	andeq	r4, r1, r4, lsr r0
   13fb0:	andeq	r4, r1, r8, lsr #32
   13fb4:	andeq	r4, r1, r4, lsr r0
   13fb8:	andeq	r4, r1, r8, lsr #32
   13fbc:	andeq	r4, r1, r8, lsr #32
   13fc0:	andeq	r4, r1, r8, lsr #32
   13fc4:	andeq	r4, r1, r8, lsr #32
   13fc8:	andeq	r4, r1, r8, lsr #32
   13fcc:	andeq	r4, r1, r8, lsr #32
   13fd0:	andeq	r4, r1, r8, lsr #32
   13fd4:	andeq	r4, r1, r8, lsr #32
   13fd8:	andeq	r4, r1, r8, lsr #32
   13fdc:	andeq	r4, r1, r8, lsr #32
   13fe0:	andeq	r4, r1, r8, lsr #32
   13fe4:	andeq	r4, r1, r8, lsr #32
   13fe8:	andeq	r4, r1, r8, lsr #32
   13fec:	andeq	r4, r1, r8, lsr #32
   13ff0:	andeq	r4, r1, r8, lsr #32
   13ff4:	andeq	r4, r1, r8, lsr #32
   13ff8:	andeq	r4, r1, r8, lsr #32
   13ffc:	andeq	r4, r1, r8, lsr #32
   14000:	andeq	r4, r1, r8, lsr #32
   14004:	andeq	r4, r1, r8, lsr #32
   14008:	andeq	r4, r1, r8, lsr #32
   1400c:	andeq	r4, r1, r8, lsr #32
   14010:	andeq	r4, r1, r8, lsr #32
   14014:	andeq	r4, r1, r8, lsr #32
   14018:	andeq	r4, r1, r8, lsr #32
   1401c:	andeq	r4, r1, r8, lsr #32
   14020:	andeq	r4, r1, r8, lsr #32
   14024:	andeq	r4, r1, r4, lsr r0
   14028:	cmp	r4, r2
   1402c:	bne	13f8c <__assert_fail@plt+0x2ce4>
   14030:	b	13dec <__assert_fail@plt+0x2b44>
   14034:	mov	r8, #2
   14038:	ldr	fp, [sp, #76]	; 0x4c
   1403c:	ldr	sl, [sp, #80]	; 0x50
   14040:	b	1356c <__assert_fail@plt+0x22c4>
   14044:	ldr	r2, [sp, #40]	; 0x28
   14048:	str	fp, [sp, #152]	; 0x98
   1404c:	mov	fp, r8
   14050:	ldr	r8, [sp, #152]	; 0x98
   14054:	and	r2, r2, r3
   14058:	str	r2, [sp, #40]	; 0x28
   1405c:	b	1356c <__assert_fail@plt+0x22c4>
   14060:	cmp	sl, r4
   14064:	movls	r0, r4
   14068:	bls	1369c <__assert_fail@plt+0x23f4>
   1406c:	ldr	r3, [sp, #48]	; 0x30
   14070:	b	1368c <__assert_fail@plt+0x23e4>
   14074:	str	sl, [sp, #72]	; 0x48
   14078:	ldr	sl, [sp, #44]	; 0x2c
   1407c:	b	134dc <__assert_fail@plt+0x2234>
   14080:	str	r3, [sp, #40]	; 0x28
   14084:	str	fp, [sp, #152]	; 0x98
   14088:	mov	fp, r8
   1408c:	ldr	r8, [sp, #152]	; 0x98
   14090:	b	1356c <__assert_fail@plt+0x22c4>
   14094:	str	r6, [sp, #48]	; 0x30
   14098:	ldr	r6, [sp, #52]	; 0x34
   1409c:	b	1350c <__assert_fail@plt+0x2264>
   140a0:	mov	r6, #0
   140a4:	ldr	r2, [sp, #40]	; 0x28
   140a8:	b	13e3c <__assert_fail@plt+0x2b94>
   140ac:	str	r6, [sp, #48]	; 0x30
   140b0:	ldr	r6, [sp, #52]	; 0x34
   140b4:	b	132f8 <__assert_fail@plt+0x2050>
   140b8:	add	r4, r4, #4
   140bc:	mov	r6, #0
   140c0:	str	r3, [sp, #48]	; 0x30
   140c4:	mov	r5, #48	; 0x30
   140c8:	b	13280 <__assert_fail@plt+0x1fd8>
   140cc:	mov	r7, r3
   140d0:	b	13f00 <__assert_fail@plt+0x2c58>
   140d4:	mov	r3, #1
   140d8:	movw	r2, #22072	; 0x5638
   140dc:	movt	r2, #2
   140e0:	mov	r4, r3
   140e4:	str	r3, [sp, #36]	; 0x24
   140e8:	str	r3, [sp, #40]	; 0x28
   140ec:	str	sl, [sp, #44]	; 0x2c
   140f0:	str	sl, [sp, #48]	; 0x30
   140f4:	str	r3, [sp, #56]	; 0x38
   140f8:	str	r2, [sp, #60]	; 0x3c
   140fc:	str	sl, [sp, #68]	; 0x44
   14100:	str	sl, [sp, #72]	; 0x48
   14104:	b	12da8 <__assert_fail@plt+0x1b00>
   14108:	mov	r3, r6
   1410c:	mov	r5, #48	; 0x30
   14110:	mov	r6, #0
   14114:	b	13280 <__assert_fail@plt+0x1fd8>
   14118:	mov	r5, r3
   1411c:	b	135f8 <__assert_fail@plt+0x2350>
   14120:	cmp	sl, r4
   14124:	mov	r5, #48	; 0x30
   14128:	movhi	r3, #48	; 0x30
   1412c:	strbhi	r3, [r8, r4]
   14130:	add	r3, r0, #2
   14134:	add	r4, r0, #3
   14138:	cmp	sl, r3
   1413c:	movhi	r1, #48	; 0x30
   14140:	strbhi	r1, [r8, r3]
   14144:	b	136d0 <__assert_fail@plt+0x2428>
   14148:	str	fp, [sp, #152]	; 0x98
   1414c:	mov	fp, r8
   14150:	ldr	r8, [sp, #152]	; 0x98
   14154:	b	1356c <__assert_fail@plt+0x22c4>
   14158:	ldr	r3, [sp, #164]	; 0xa4
   1415c:	ldrb	r3, [r3]
   14160:	cmp	r3, #0
   14164:	beq	12d78 <__assert_fail@plt+0x1ad0>
   14168:	ldr	r2, [sp, #164]	; 0xa4
   1416c:	cmp	sl, r4
   14170:	strbhi	r3, [fp, r4]
   14174:	add	r4, r4, #1
   14178:	ldrb	r3, [r2, #1]!
   1417c:	cmp	r3, #0
   14180:	bne	1416c <__assert_fail@plt+0x2ec4>
   14184:	b	12d78 <__assert_fail@plt+0x1ad0>
   14188:	mov	ip, r5
   1418c:	mov	r6, #0
   14190:	ldr	r2, [sp, #40]	; 0x28
   14194:	ldr	r8, [sp, #76]	; 0x4c
   14198:	ldr	sl, [sp, #80]	; 0x50
   1419c:	ldr	r5, [sp, #84]	; 0x54
   141a0:	ldr	r7, [sp, #88]	; 0x58
   141a4:	ldr	r4, [sp, #92]	; 0x5c
   141a8:	b	13e34 <__assert_fail@plt+0x2b8c>
   141ac:	ldr	r2, [sp, #32]
   141b0:	ldrb	r1, [r2, r3]
   141b4:	sub	r2, r1, #33	; 0x21
   141b8:	cmp	r2, #29
   141bc:	ldrls	pc, [pc, r2, lsl #2]
   141c0:	b	1429c <__assert_fail@plt+0x2ff4>
   141c4:	andeq	r4, r1, ip, lsr r2
   141c8:	muleq	r1, ip, r2
   141cc:	muleq	r1, ip, r2
   141d0:	muleq	r1, ip, r2
   141d4:	muleq	r1, ip, r2
   141d8:	muleq	r1, ip, r2
   141dc:	andeq	r4, r1, ip, lsr r2
   141e0:	andeq	r4, r1, ip, lsr r2
   141e4:	andeq	r4, r1, ip, lsr r2
   141e8:	muleq	r1, ip, r2
   141ec:	muleq	r1, ip, r2
   141f0:	muleq	r1, ip, r2
   141f4:	andeq	r4, r1, ip, lsr r2
   141f8:	muleq	r1, ip, r2
   141fc:	andeq	r4, r1, ip, lsr r2
   14200:	muleq	r1, ip, r2
   14204:	muleq	r1, ip, r2
   14208:	muleq	r1, ip, r2
   1420c:	muleq	r1, ip, r2
   14210:	muleq	r1, ip, r2
   14214:	muleq	r1, ip, r2
   14218:	muleq	r1, ip, r2
   1421c:	muleq	r1, ip, r2
   14220:	muleq	r1, ip, r2
   14224:	muleq	r1, ip, r2
   14228:	muleq	r1, ip, r2
   1422c:	muleq	r1, ip, r2
   14230:	andeq	r4, r1, ip, lsr r2
   14234:	andeq	r4, r1, ip, lsr r2
   14238:	andeq	r4, r1, ip, lsr r2
   1423c:	ldr	r2, [sp, #44]	; 0x2c
   14240:	cmp	r2, #0
   14244:	bne	143a0 <__assert_fail@plt+0x30f8>
   14248:	cmp	sl, r4
   1424c:	mov	r5, r1
   14250:	movhi	r2, #63	; 0x3f
   14254:	mov	r9, r3
   14258:	strbhi	r2, [r8, r4]
   1425c:	add	r2, r4, #1
   14260:	cmp	sl, r2
   14264:	movhi	r0, #34	; 0x22
   14268:	strbhi	r0, [r8, r2]
   1426c:	add	r2, r4, #2
   14270:	cmp	sl, r2
   14274:	movhi	r0, #34	; 0x22
   14278:	strbhi	r0, [r8, r2]
   1427c:	add	r2, r4, #3
   14280:	add	r4, r4, #4
   14284:	cmp	sl, r2
   14288:	movhi	r0, #63	; 0x3f
   1428c:	strbhi	r0, [r8, r2]
   14290:	mov	r2, #0
   14294:	mov	r6, r2
   14298:	b	136d0 <__assert_fail@plt+0x2428>
   1429c:	mov	r3, #0
   142a0:	mov	r6, r3
   142a4:	b	13248 <__assert_fail@plt+0x1fa0>
   142a8:	ldr	r0, [sp, #28]
   142ac:	mov	r1, r4
   142b0:	mov	r2, r7
   142b4:	mov	r3, r5
   142b8:	mov	ip, r5
   142bc:	ldr	r8, [sp, #76]	; 0x4c
   142c0:	ldr	sl, [sp, #80]	; 0x50
   142c4:	cmp	r1, r0
   142c8:	ldr	r5, [sp, #84]	; 0x54
   142cc:	ldr	r7, [sp, #88]	; 0x58
   142d0:	ldr	r4, [sp, #92]	; 0x5c
   142d4:	bcs	14308 <__assert_fail@plt+0x3060>
   142d8:	ldrb	r6, [r2]
   142dc:	cmp	r6, #0
   142e0:	bne	142f4 <__assert_fail@plt+0x304c>
   142e4:	b	14428 <__assert_fail@plt+0x3180>
   142e8:	ldrb	r6, [r2, #1]!
   142ec:	cmp	r6, #0
   142f0:	beq	143b0 <__assert_fail@plt+0x3108>
   142f4:	add	r3, r3, #1
   142f8:	add	r1, r9, r3
   142fc:	cmp	r1, r0
   14300:	bcc	142e8 <__assert_fail@plt+0x3040>
   14304:	mov	ip, r3
   14308:	mov	r6, #0
   1430c:	ldr	r2, [sp, #40]	; 0x28
   14310:	b	13e34 <__assert_fail@plt+0x2b8c>
   14314:	mov	r3, #1
   14318:	mov	r2, #0
   1431c:	mov	r4, r2
   14320:	str	r3, [sp, #36]	; 0x24
   14324:	str	r3, [sp, #40]	; 0x28
   14328:	str	r3, [sp, #44]	; 0x2c
   1432c:	str	r2, [sp, #48]	; 0x30
   14330:	str	r3, [sp, #56]	; 0x38
   14334:	movw	r3, #22072	; 0x5638
   14338:	movt	r3, #2
   1433c:	str	r3, [sp, #60]	; 0x3c
   14340:	str	r2, [sp, #68]	; 0x44
   14344:	str	r2, [sp, #72]	; 0x48
   14348:	b	12da8 <__assert_fail@plt+0x1b00>
   1434c:	mov	r2, r3
   14350:	ldr	r3, [sp, #60]	; 0x3c
   14354:	cmp	r3, #0
   14358:	moveq	r2, #0
   1435c:	andne	r2, r2, #1
   14360:	cmp	r2, #0
   14364:	beq	14390 <__assert_fail@plt+0x30e8>
   14368:	mov	r2, r3
   1436c:	ldrb	r3, [r3]
   14370:	cmp	r3, #0
   14374:	beq	14390 <__assert_fail@plt+0x30e8>
   14378:	cmp	sl, r4
   1437c:	strbhi	r3, [fp, r4]
   14380:	add	r4, r4, #1
   14384:	ldrb	r3, [r2, #1]!
   14388:	cmp	r3, #0
   1438c:	bne	14378 <__assert_fail@plt+0x30d0>
   14390:	cmp	sl, r4
   14394:	movhi	r3, #0
   14398:	strbhi	r3, [fp, r4]
   1439c:	b	135b0 <__assert_fail@plt+0x2308>
   143a0:	str	fp, [sp, #152]	; 0x98
   143a4:	mov	fp, r8
   143a8:	ldr	r8, [sp, #152]	; 0x98
   143ac:	b	13578 <__assert_fail@plt+0x22d0>
   143b0:	mov	ip, r3
   143b4:	ldr	r2, [sp, #40]	; 0x28
   143b8:	b	13e34 <__assert_fail@plt+0x2b8c>
   143bc:	str	fp, [sp, #152]	; 0x98
   143c0:	mov	fp, r8
   143c4:	ldr	r8, [sp, #152]	; 0x98
   143c8:	sub	r3, r8, #2
   143cc:	clz	r3, r3
   143d0:	lsr	r3, r3, #5
   143d4:	str	r3, [sp, #40]	; 0x28
   143d8:	b	1356c <__assert_fail@plt+0x22c4>
   143dc:	mov	ip, #5
   143e0:	ldr	r3, [sp, #28]
   143e4:	str	ip, [sp]
   143e8:	ldr	r2, [sp, #156]	; 0x9c
   143ec:	ldr	ip, [sp, #164]	; 0xa4
   143f0:	ldr	r0, [sp, #160]	; 0xa0
   143f4:	str	r2, [sp, #4]
   143f8:	ldr	r2, [sp, #32]
   143fc:	ldr	r1, [sp, #72]	; 0x48
   14400:	str	ip, [sp, #12]
   14404:	ldr	ip, [sp, #168]	; 0xa8
   14408:	str	r0, [sp, #8]
   1440c:	mov	r0, fp
   14410:	str	ip, [sp, #16]
   14414:	bl	12cc0 <__assert_fail@plt+0x1a18>
   14418:	mov	r4, r0
   1441c:	b	135b0 <__assert_fail@plt+0x2308>
   14420:	mov	r8, #2
   14424:	b	1356c <__assert_fail@plt+0x22c4>
   14428:	ldr	r2, [sp, #40]	; 0x28
   1442c:	b	13e34 <__assert_fail@plt+0x2b8c>
   14430:	mov	r3, #0
   14434:	mov	r2, #1
   14438:	mov	r4, r3
   1443c:	strd	r2, [sp, #36]	; 0x24
   14440:	strd	r2, [sp, #44]	; 0x2c
   14444:	str	r2, [sp, #56]	; 0x38
   14448:	str	r3, [sp, #68]	; 0x44
   1444c:	str	r3, [sp, #72]	; 0x48
   14450:	movw	r3, #22092	; 0x564c
   14454:	movt	r3, #2
   14458:	str	r3, [sp, #60]	; 0x3c
   1445c:	b	12da8 <__assert_fail@plt+0x1b00>
   14460:	mov	r3, #0
   14464:	mov	r1, #1
   14468:	mov	r2, r3
   1446c:	str	r1, [sp, #36]	; 0x24
   14470:	str	r3, [sp, #48]	; 0x30
   14474:	str	sl, [sp, #72]	; 0x48
   14478:	b	133b0 <__assert_fail@plt+0x2108>
   1447c:	bl	1129c <abort@plt>
   14480:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14484:	mov	r4, r0
   14488:	mov	r5, r3
   1448c:	strd	r6, [sp, #8]
   14490:	movw	r7, #24948	; 0x6174
   14494:	movt	r7, #3
   14498:	strd	r8, [sp, #16]
   1449c:	strd	sl, [sp, #24]
   144a0:	mov	sl, r1
   144a4:	mov	fp, r2
   144a8:	str	lr, [sp, #32]
   144ac:	sub	sp, sp, #60	; 0x3c
   144b0:	bl	111a0 <__errno_location@plt>
   144b4:	mov	r8, r0
   144b8:	cmn	r4, #-2147483647	; 0x80000001
   144bc:	ldr	r6, [r7]
   144c0:	movne	r0, #0
   144c4:	moveq	r0, #1
   144c8:	ldr	r3, [r8]
   144cc:	orrs	r0, r0, r4, lsr #31
   144d0:	str	r3, [sp, #28]
   144d4:	bne	14664 <__assert_fail@plt+0x33bc>
   144d8:	ldr	r3, [r7, #4]
   144dc:	cmp	r3, r4
   144e0:	bgt	14540 <__assert_fail@plt+0x3298>
   144e4:	add	r1, r7, #8
   144e8:	sub	r2, r4, r3
   144ec:	str	r3, [sp, #52]	; 0x34
   144f0:	cmp	r6, r1
   144f4:	add	r2, r2, #1
   144f8:	beq	1463c <__assert_fail@plt+0x3394>
   144fc:	mov	r1, #8
   14500:	mov	r0, r6
   14504:	mvn	r3, #-2147483648	; 0x80000000
   14508:	str	r1, [sp]
   1450c:	add	r1, sp, #52	; 0x34
   14510:	bl	2325c <__assert_fail@plt+0x11fb4>
   14514:	mov	r6, r0
   14518:	str	r0, [r7]
   1451c:	ldr	r0, [r7, #4]
   14520:	mov	r1, #0
   14524:	ldr	r2, [sp, #52]	; 0x34
   14528:	sub	r2, r2, r0
   1452c:	add	r0, r6, r0, lsl #3
   14530:	lsl	r2, r2, #3
   14534:	bl	111c4 <memset@plt>
   14538:	ldr	r3, [sp, #52]	; 0x34
   1453c:	str	r3, [r7, #4]
   14540:	ldr	r1, [r5, #4]
   14544:	add	r0, r6, r4, lsl #3
   14548:	add	ip, r5, #8
   1454c:	mov	r3, fp
   14550:	mov	r2, sl
   14554:	ldr	r7, [r0, #4]
   14558:	str	r0, [sp, #36]	; 0x24
   1455c:	str	ip, [sp, #40]	; 0x28
   14560:	orr	r0, r1, #1
   14564:	ldr	r9, [r6, r4, lsl #3]
   14568:	str	ip, [sp, #8]
   1456c:	ldr	lr, [r5, #44]	; 0x2c
   14570:	str	r0, [sp, #4]
   14574:	ldr	ip, [r5]
   14578:	mov	r1, r9
   1457c:	str	ip, [sp, #32]
   14580:	ldr	ip, [r5, #40]	; 0x28
   14584:	str	ip, [sp, #12]
   14588:	ldr	ip, [sp, #32]
   1458c:	str	lr, [sp, #16]
   14590:	str	r0, [sp, #44]	; 0x2c
   14594:	mov	r0, r7
   14598:	str	ip, [sp]
   1459c:	bl	12cc0 <__assert_fail@plt+0x1a18>
   145a0:	cmp	r9, r0
   145a4:	bhi	14614 <__assert_fail@plt+0x336c>
   145a8:	add	r9, r0, #1
   145ac:	movw	r3, #26000	; 0x6590
   145b0:	movt	r3, #3
   145b4:	cmp	r7, r3
   145b8:	str	r9, [r6, r4, lsl #3]
   145bc:	beq	145c8 <__assert_fail@plt+0x3320>
   145c0:	mov	r0, r7
   145c4:	bl	24628 <__assert_fail@plt+0x13380>
   145c8:	mov	r0, r9
   145cc:	bl	230ac <__assert_fail@plt+0x11e04>
   145d0:	ldr	ip, [r5]
   145d4:	mov	r3, fp
   145d8:	mov	r2, sl
   145dc:	mov	r1, r9
   145e0:	mov	r7, r0
   145e4:	ldr	lr, [sp, #36]	; 0x24
   145e8:	ldr	r4, [r5, #40]	; 0x28
   145ec:	str	r0, [lr, #4]
   145f0:	ldr	lr, [r5, #44]	; 0x2c
   145f4:	str	ip, [sp]
   145f8:	ldr	ip, [sp, #44]	; 0x2c
   145fc:	str	ip, [sp, #4]
   14600:	ldr	ip, [sp, #40]	; 0x28
   14604:	str	r4, [sp, #12]
   14608:	str	lr, [sp, #16]
   1460c:	str	ip, [sp, #8]
   14610:	bl	12cc0 <__assert_fail@plt+0x1a18>
   14614:	ldr	r3, [sp, #28]
   14618:	mov	r0, r7
   1461c:	str	r3, [r8]
   14620:	add	sp, sp, #60	; 0x3c
   14624:	ldrd	r4, [sp]
   14628:	ldrd	r6, [sp, #8]
   1462c:	ldrd	r8, [sp, #16]
   14630:	ldrd	sl, [sp, #24]
   14634:	add	sp, sp, #32
   14638:	pop	{pc}		; (ldr pc, [sp], #4)
   1463c:	mov	r1, #8
   14640:	mvn	r3, #-2147483648	; 0x80000000
   14644:	str	r1, [sp]
   14648:	add	r1, sp, #52	; 0x34
   1464c:	bl	2325c <__assert_fail@plt+0x11fb4>
   14650:	ldrd	r2, [r7, #8]
   14654:	mov	r6, r0
   14658:	str	r0, [r7]
   1465c:	strd	r2, [r0]
   14660:	b	1451c <__assert_fail@plt+0x3274>
   14664:	bl	1129c <abort@plt>
   14668:	strd	r4, [sp, #-16]!
   1466c:	mov	r5, r0
   14670:	str	r6, [sp, #8]
   14674:	str	lr, [sp, #12]
   14678:	bl	111a0 <__errno_location@plt>
   1467c:	mov	r4, r0
   14680:	cmp	r5, #0
   14684:	ldr	r0, [pc, #32]	; 146ac <__assert_fail@plt+0x3404>
   14688:	mov	r1, #48	; 0x30
   1468c:	movne	r0, r5
   14690:	ldr	r6, [r4]
   14694:	bl	233d4 <__assert_fail@plt+0x1212c>
   14698:	str	r6, [r4]
   1469c:	ldrd	r4, [sp]
   146a0:	ldr	r6, [sp, #8]
   146a4:	add	sp, sp, #12
   146a8:	pop	{pc}		; (ldr pc, [sp], #4)
   146ac:	muleq	r3, r0, r6
   146b0:	ldr	r3, [pc, #12]	; 146c4 <__assert_fail@plt+0x341c>
   146b4:	cmp	r0, #0
   146b8:	moveq	r0, r3
   146bc:	ldr	r0, [r0]
   146c0:	bx	lr
   146c4:	muleq	r3, r0, r6
   146c8:	ldr	r3, [pc, #12]	; 146dc <__assert_fail@plt+0x3434>
   146cc:	cmp	r0, #0
   146d0:	moveq	r0, r3
   146d4:	str	r1, [r0]
   146d8:	bx	lr
   146dc:	muleq	r3, r0, r6
   146e0:	ldr	r3, [pc, #52]	; 1471c <__assert_fail@plt+0x3474>
   146e4:	cmp	r0, #0
   146e8:	push	{lr}		; (str lr, [sp, #-4]!)
   146ec:	lsr	lr, r1, #5
   146f0:	and	r1, r1, #31
   146f4:	moveq	r0, r3
   146f8:	add	r3, r0, #8
   146fc:	ldr	ip, [r3, lr, lsl #2]
   14700:	lsr	r0, ip, r1
   14704:	eor	r2, r2, r0
   14708:	and	r0, r0, #1
   1470c:	and	r2, r2, #1
   14710:	eor	r1, ip, r2, lsl r1
   14714:	str	r1, [r3, lr, lsl #2]
   14718:	pop	{pc}		; (ldr pc, [sp], #4)
   1471c:	muleq	r3, r0, r6
   14720:	ldr	r3, [pc, #16]	; 14738 <__assert_fail@plt+0x3490>
   14724:	cmp	r0, #0
   14728:	movne	r3, r0
   1472c:	ldr	r0, [r3, #4]
   14730:	str	r1, [r3, #4]
   14734:	bx	lr
   14738:	muleq	r3, r0, r6
   1473c:	ldr	r3, [pc, #48]	; 14774 <__assert_fail@plt+0x34cc>
   14740:	cmp	r0, #0
   14744:	mov	ip, #10
   14748:	moveq	r0, r3
   1474c:	cmp	r2, #0
   14750:	cmpne	r1, #0
   14754:	str	ip, [r0]
   14758:	beq	14768 <__assert_fail@plt+0x34c0>
   1475c:	str	r1, [r0, #40]	; 0x28
   14760:	str	r2, [r0, #44]	; 0x2c
   14764:	bx	lr
   14768:	str	r4, [sp, #-8]!
   1476c:	str	lr, [sp, #4]
   14770:	bl	1129c <abort@plt>
   14774:	muleq	r3, r0, r6
   14778:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1477c:	strd	r6, [sp, #8]
   14780:	mov	r7, r0
   14784:	mov	r6, r1
   14788:	strd	r8, [sp, #16]
   1478c:	mov	r8, r2
   14790:	mov	r9, r3
   14794:	str	lr, [sp, #24]
   14798:	sub	sp, sp, #28
   1479c:	ldr	r4, [sp, #56]	; 0x38
   147a0:	ldr	ip, [pc, #104]	; 14810 <__assert_fail@plt+0x3568>
   147a4:	cmp	r4, #0
   147a8:	moveq	r4, ip
   147ac:	bl	111a0 <__errno_location@plt>
   147b0:	ldr	ip, [r4, #44]	; 0x2c
   147b4:	mov	r5, r0
   147b8:	mov	r1, r6
   147bc:	add	lr, r4, #8
   147c0:	mov	r3, r9
   147c4:	ldr	r6, [r5]
   147c8:	mov	r2, r8
   147cc:	mov	r0, r7
   147d0:	str	ip, [sp, #16]
   147d4:	ldr	ip, [r4, #40]	; 0x28
   147d8:	str	lr, [sp, #8]
   147dc:	str	ip, [sp, #12]
   147e0:	ldr	ip, [r4, #4]
   147e4:	str	ip, [sp, #4]
   147e8:	ldr	ip, [r4]
   147ec:	str	ip, [sp]
   147f0:	bl	12cc0 <__assert_fail@plt+0x1a18>
   147f4:	str	r6, [r5]
   147f8:	add	sp, sp, #28
   147fc:	ldrd	r4, [sp]
   14800:	ldrd	r6, [sp, #8]
   14804:	ldrd	r8, [sp, #16]
   14808:	add	sp, sp, #24
   1480c:	pop	{pc}		; (ldr pc, [sp], #4)
   14810:	muleq	r3, r0, r6
   14814:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14818:	cmp	r3, #0
   1481c:	ldr	r4, [pc, #220]	; 14900 <__assert_fail@plt+0x3658>
   14820:	movne	r4, r3
   14824:	strd	r6, [sp, #8]
   14828:	mov	r6, r2
   1482c:	strd	r8, [sp, #16]
   14830:	mov	r9, r0
   14834:	strd	sl, [sp, #24]
   14838:	mov	sl, r1
   1483c:	str	lr, [sp, #32]
   14840:	sub	sp, sp, #44	; 0x2c
   14844:	bl	111a0 <__errno_location@plt>
   14848:	ldr	r5, [r4, #4]
   1484c:	mov	r7, r0
   14850:	mov	r1, #0
   14854:	add	r8, r4, #8
   14858:	mov	r3, sl
   1485c:	ldr	ip, [r4, #44]	; 0x2c
   14860:	mov	r2, r9
   14864:	mov	r0, r1
   14868:	ldr	lr, [r7]
   1486c:	cmp	r6, r1
   14870:	orreq	r5, r5, #1
   14874:	str	ip, [sp, #16]
   14878:	ldr	ip, [r4, #40]	; 0x28
   1487c:	stmib	sp, {r5, r8, ip}
   14880:	ldr	ip, [r4]
   14884:	str	lr, [sp, #28]
   14888:	str	ip, [sp]
   1488c:	bl	12cc0 <__assert_fail@plt+0x1a18>
   14890:	add	r1, r0, #1
   14894:	mov	fp, r0
   14898:	mov	r0, r1
   1489c:	str	r1, [sp, #36]	; 0x24
   148a0:	bl	230ac <__assert_fail@plt+0x11e04>
   148a4:	ldr	ip, [r4, #44]	; 0x2c
   148a8:	mov	r3, sl
   148ac:	mov	r2, r9
   148b0:	ldr	r1, [sp, #36]	; 0x24
   148b4:	str	ip, [sp, #16]
   148b8:	ldr	ip, [r4, #40]	; 0x28
   148bc:	str	r0, [sp, #32]
   148c0:	stmib	sp, {r5, r8, ip}
   148c4:	ldr	ip, [r4]
   148c8:	str	ip, [sp]
   148cc:	bl	12cc0 <__assert_fail@plt+0x1a18>
   148d0:	ldr	lr, [sp, #28]
   148d4:	cmp	r6, #0
   148d8:	ldr	r0, [sp, #32]
   148dc:	str	lr, [r7]
   148e0:	strne	fp, [r6]
   148e4:	add	sp, sp, #44	; 0x2c
   148e8:	ldrd	r4, [sp]
   148ec:	ldrd	r6, [sp, #8]
   148f0:	ldrd	r8, [sp, #16]
   148f4:	ldrd	sl, [sp, #24]
   148f8:	add	sp, sp, #32
   148fc:	pop	{pc}		; (ldr pc, [sp], #4)
   14900:	muleq	r3, r0, r6
   14904:	mov	r3, r2
   14908:	mov	r2, #0
   1490c:	b	14814 <__assert_fail@plt+0x356c>
   14910:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14914:	movw	r5, #24948	; 0x6174
   14918:	movt	r5, #3
   1491c:	ldr	r3, [r5, #4]
   14920:	strd	r6, [sp, #8]
   14924:	str	r8, [sp, #16]
   14928:	str	lr, [sp, #20]
   1492c:	ldr	r7, [r5]
   14930:	cmp	r3, #1
   14934:	ble	14958 <__assert_fail@plt+0x36b0>
   14938:	mov	r4, #1
   1493c:	add	r6, r7, #4
   14940:	ldr	r0, [r6, r4, lsl #3]
   14944:	add	r4, r4, #1
   14948:	bl	24628 <__assert_fail@plt+0x13380>
   1494c:	ldr	r3, [r5, #4]
   14950:	cmp	r3, r4
   14954:	bgt	14940 <__assert_fail@plt+0x3698>
   14958:	ldr	r0, [r7, #4]
   1495c:	movw	r4, #26000	; 0x6590
   14960:	movt	r4, #3
   14964:	cmp	r0, r4
   14968:	beq	1497c <__assert_fail@plt+0x36d4>
   1496c:	bl	24628 <__assert_fail@plt+0x13380>
   14970:	mov	r3, #256	; 0x100
   14974:	str	r3, [r5, #8]
   14978:	str	r4, [r5, #12]
   1497c:	ldr	r4, [pc, #44]	; 149b0 <__assert_fail@plt+0x3708>
   14980:	cmp	r7, r4
   14984:	beq	14994 <__assert_fail@plt+0x36ec>
   14988:	mov	r0, r7
   1498c:	bl	24628 <__assert_fail@plt+0x13380>
   14990:	str	r4, [r5]
   14994:	mov	r3, #1
   14998:	ldrd	r6, [sp, #8]
   1499c:	str	r3, [r5, #4]
   149a0:	ldrd	r4, [sp]
   149a4:	ldr	r8, [sp, #16]
   149a8:	add	sp, sp, #20
   149ac:	pop	{pc}		; (ldr pc, [sp], #4)
   149b0:	andeq	r6, r3, ip, ror r1
   149b4:	ldr	r3, [pc, #4]	; 149c0 <__assert_fail@plt+0x3718>
   149b8:	mvn	r2, #0
   149bc:	b	14480 <__assert_fail@plt+0x31d8>
   149c0:	muleq	r3, r0, r6
   149c4:	ldr	r3, [pc]	; 149cc <__assert_fail@plt+0x3724>
   149c8:	b	14480 <__assert_fail@plt+0x31d8>
   149cc:	muleq	r3, r0, r6
   149d0:	mov	r1, r0
   149d4:	ldr	r3, [pc, #8]	; 149e4 <__assert_fail@plt+0x373c>
   149d8:	mvn	r2, #0
   149dc:	mov	r0, #0
   149e0:	b	14480 <__assert_fail@plt+0x31d8>
   149e4:	muleq	r3, r0, r6
   149e8:	mov	r2, r1
   149ec:	ldr	r3, [pc, #8]	; 149fc <__assert_fail@plt+0x3754>
   149f0:	mov	r1, r0
   149f4:	mov	r0, #0
   149f8:	b	14480 <__assert_fail@plt+0x31d8>
   149fc:	muleq	r3, r0, r6
   14a00:	strd	r4, [sp, #-12]!
   14a04:	mov	r5, r2
   14a08:	mov	r4, r0
   14a0c:	str	lr, [sp, #8]
   14a10:	sub	sp, sp, #52	; 0x34
   14a14:	mov	r0, sp
   14a18:	bl	12b1c <__assert_fail@plt+0x1874>
   14a1c:	mov	r3, sp
   14a20:	mov	r1, r5
   14a24:	mov	r0, r4
   14a28:	mvn	r2, #0
   14a2c:	bl	14480 <__assert_fail@plt+0x31d8>
   14a30:	add	sp, sp, #52	; 0x34
   14a34:	ldrd	r4, [sp]
   14a38:	add	sp, sp, #8
   14a3c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a40:	strd	r4, [sp, #-16]!
   14a44:	mov	r5, r2
   14a48:	mov	r4, r0
   14a4c:	str	r6, [sp, #8]
   14a50:	mov	r6, r3
   14a54:	str	lr, [sp, #12]
   14a58:	sub	sp, sp, #48	; 0x30
   14a5c:	mov	r0, sp
   14a60:	bl	12b1c <__assert_fail@plt+0x1874>
   14a64:	mov	r3, sp
   14a68:	mov	r2, r6
   14a6c:	mov	r1, r5
   14a70:	mov	r0, r4
   14a74:	bl	14480 <__assert_fail@plt+0x31d8>
   14a78:	add	sp, sp, #48	; 0x30
   14a7c:	ldrd	r4, [sp]
   14a80:	ldr	r6, [sp, #8]
   14a84:	add	sp, sp, #12
   14a88:	pop	{pc}		; (ldr pc, [sp], #4)
   14a8c:	mov	r2, r1
   14a90:	mov	r1, r0
   14a94:	mov	r0, #0
   14a98:	b	14a00 <__assert_fail@plt+0x3758>
   14a9c:	mov	r3, r2
   14aa0:	mov	r2, r1
   14aa4:	mov	r1, r0
   14aa8:	mov	r0, #0
   14aac:	b	14a40 <__assert_fail@plt+0x3798>
   14ab0:	ldr	ip, [pc, #140]	; 14b44 <__assert_fail@plt+0x389c>
   14ab4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14ab8:	ldrd	r4, [ip]
   14abc:	strd	r6, [sp, #8]
   14ac0:	ldrd	r6, [ip, #8]
   14ac4:	strd	r8, [sp, #16]
   14ac8:	lsr	r9, r2, #5
   14acc:	str	lr, [sp, #24]
   14ad0:	sub	sp, sp, #52	; 0x34
   14ad4:	and	lr, r2, #31
   14ad8:	add	r8, sp, #8
   14adc:	mov	r2, r1
   14ae0:	strd	r4, [sp]
   14ae4:	mov	r1, r0
   14ae8:	mov	r3, sp
   14aec:	strd	r6, [sp, #8]
   14af0:	mov	r0, #0
   14af4:	ldrd	r4, [ip, #16]
   14af8:	ldrd	r6, [ip, #24]
   14afc:	strd	r4, [sp, #16]
   14b00:	ldrd	r4, [ip, #32]
   14b04:	strd	r6, [sp, #24]
   14b08:	ldrd	r6, [ip, #40]	; 0x28
   14b0c:	strd	r4, [sp, #32]
   14b10:	strd	r6, [sp, #40]	; 0x28
   14b14:	ldr	ip, [r8, r9, lsl #2]
   14b18:	mvn	r4, ip, lsr lr
   14b1c:	and	r4, r4, #1
   14b20:	eor	lr, ip, r4, lsl lr
   14b24:	str	lr, [r8, r9, lsl #2]
   14b28:	bl	14480 <__assert_fail@plt+0x31d8>
   14b2c:	add	sp, sp, #52	; 0x34
   14b30:	ldrd	r4, [sp]
   14b34:	ldrd	r6, [sp, #8]
   14b38:	ldrd	r8, [sp, #16]
   14b3c:	add	sp, sp, #24
   14b40:	pop	{pc}		; (ldr pc, [sp], #4)
   14b44:	muleq	r3, r0, r6
   14b48:	mov	r2, r1
   14b4c:	mvn	r1, #0
   14b50:	b	14ab0 <__assert_fail@plt+0x3808>
   14b54:	mov	r2, #58	; 0x3a
   14b58:	mvn	r1, #0
   14b5c:	b	14ab0 <__assert_fail@plt+0x3808>
   14b60:	mov	r2, #58	; 0x3a
   14b64:	b	14ab0 <__assert_fail@plt+0x3808>
   14b68:	strd	r4, [sp, #-20]!	; 0xffffffec
   14b6c:	strd	r6, [sp, #8]
   14b70:	mov	r6, r0
   14b74:	mov	r7, r2
   14b78:	str	lr, [sp, #16]
   14b7c:	sub	sp, sp, #100	; 0x64
   14b80:	mov	r0, sp
   14b84:	bl	12b1c <__assert_fail@plt+0x1874>
   14b88:	ldrd	r4, [sp, #8]
   14b8c:	mov	r1, r7
   14b90:	mov	r0, r6
   14b94:	add	r3, sp, #48	; 0x30
   14b98:	mvn	r2, #0
   14b9c:	ldrd	r6, [sp]
   14ba0:	strd	r4, [sp, #56]	; 0x38
   14ba4:	ldrd	r4, [sp, #16]
   14ba8:	strd	r6, [sp, #48]	; 0x30
   14bac:	ldrd	r6, [sp, #32]
   14bb0:	ldr	lr, [sp, #60]	; 0x3c
   14bb4:	strd	r4, [sp, #64]	; 0x40
   14bb8:	ldrd	r4, [sp, #24]
   14bbc:	mvn	ip, lr
   14bc0:	and	ip, ip, #67108864	; 0x4000000
   14bc4:	strd	r4, [sp, #72]	; 0x48
   14bc8:	eor	ip, ip, lr
   14bcc:	ldrd	r4, [sp, #40]	; 0x28
   14bd0:	str	ip, [sp, #60]	; 0x3c
   14bd4:	strd	r6, [sp, #80]	; 0x50
   14bd8:	strd	r4, [sp, #88]	; 0x58
   14bdc:	bl	14480 <__assert_fail@plt+0x31d8>
   14be0:	add	sp, sp, #100	; 0x64
   14be4:	ldrd	r4, [sp]
   14be8:	ldrd	r6, [sp, #8]
   14bec:	add	sp, sp, #16
   14bf0:	pop	{pc}		; (ldr pc, [sp], #4)
   14bf4:	ldr	ip, [pc, #156]	; 14c98 <__assert_fail@plt+0x39f0>
   14bf8:	cmp	r2, #0
   14bfc:	cmpne	r1, #0
   14c00:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14c04:	strd	r6, [sp, #8]
   14c08:	mov	r6, r2
   14c0c:	str	r8, [sp, #16]
   14c10:	mov	r8, r3
   14c14:	strd	sl, [sp, #20]
   14c18:	ldrd	r4, [ip]
   14c1c:	str	lr, [sp, #28]
   14c20:	sub	sp, sp, #48	; 0x30
   14c24:	mov	lr, #10
   14c28:	ldrd	r2, [ip, #8]
   14c2c:	ldrd	sl, [ip, #16]
   14c30:	strd	r4, [sp]
   14c34:	ldrd	r4, [ip, #32]
   14c38:	str	lr, [sp]
   14c3c:	strd	r2, [sp, #8]
   14c40:	strd	sl, [sp, #16]
   14c44:	ldrd	r2, [ip, #24]
   14c48:	ldrd	sl, [ip, #40]	; 0x28
   14c4c:	strd	r2, [sp, #24]
   14c50:	strd	r4, [sp, #32]
   14c54:	strd	sl, [sp, #40]	; 0x28
   14c58:	beq	14c94 <__assert_fail@plt+0x39ec>
   14c5c:	ldr	r2, [sp, #80]	; 0x50
   14c60:	mov	r7, r1
   14c64:	mov	r3, sp
   14c68:	mov	r1, r8
   14c6c:	str	r7, [sp, #40]	; 0x28
   14c70:	str	r6, [sp, #44]	; 0x2c
   14c74:	bl	14480 <__assert_fail@plt+0x31d8>
   14c78:	add	sp, sp, #48	; 0x30
   14c7c:	ldrd	r4, [sp]
   14c80:	ldrd	r6, [sp, #8]
   14c84:	ldr	r8, [sp, #16]
   14c88:	ldrd	sl, [sp, #20]
   14c8c:	add	sp, sp, #28
   14c90:	pop	{pc}		; (ldr pc, [sp], #4)
   14c94:	bl	1129c <abort@plt>
   14c98:	muleq	r3, r0, r6
   14c9c:	mvn	ip, #0
   14ca0:	push	{lr}		; (str lr, [sp, #-4]!)
   14ca4:	sub	sp, sp, #12
   14ca8:	str	ip, [sp]
   14cac:	bl	14bf4 <__assert_fail@plt+0x394c>
   14cb0:	add	sp, sp, #12
   14cb4:	pop	{pc}		; (ldr pc, [sp], #4)
   14cb8:	mvn	ip, #0
   14cbc:	push	{lr}		; (str lr, [sp, #-4]!)
   14cc0:	sub	sp, sp, #12
   14cc4:	mov	r3, r2
   14cc8:	mov	r2, r1
   14ccc:	mov	r1, r0
   14cd0:	mov	r0, #0
   14cd4:	str	ip, [sp]
   14cd8:	bl	14bf4 <__assert_fail@plt+0x394c>
   14cdc:	add	sp, sp, #12
   14ce0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ce4:	push	{lr}		; (str lr, [sp, #-4]!)
   14ce8:	sub	sp, sp, #12
   14cec:	str	r3, [sp]
   14cf0:	mov	r3, r2
   14cf4:	mov	r2, r1
   14cf8:	mov	r1, r0
   14cfc:	mov	r0, #0
   14d00:	bl	14bf4 <__assert_fail@plt+0x394c>
   14d04:	add	sp, sp, #12
   14d08:	pop	{pc}		; (ldr pc, [sp], #4)
   14d0c:	ldr	r3, [pc]	; 14d14 <__assert_fail@plt+0x3a6c>
   14d10:	b	14480 <__assert_fail@plt+0x31d8>
   14d14:	andeq	r6, r3, r4, lsl #3
   14d18:	mov	r2, r1
   14d1c:	ldr	r3, [pc, #8]	; 14d2c <__assert_fail@plt+0x3a84>
   14d20:	mov	r1, r0
   14d24:	mov	r0, #0
   14d28:	b	14480 <__assert_fail@plt+0x31d8>
   14d2c:	andeq	r6, r3, r4, lsl #3
   14d30:	ldr	r3, [pc, #4]	; 14d3c <__assert_fail@plt+0x3a94>
   14d34:	mvn	r2, #0
   14d38:	b	14480 <__assert_fail@plt+0x31d8>
   14d3c:	andeq	r6, r3, r4, lsl #3
   14d40:	mov	r1, r0
   14d44:	ldr	r3, [pc, #8]	; 14d54 <__assert_fail@plt+0x3aac>
   14d48:	mvn	r2, #0
   14d4c:	mov	r0, #0
   14d50:	b	14480 <__assert_fail@plt+0x31d8>
   14d54:	andeq	r6, r3, r4, lsl #3
   14d58:	clz	r3, r1
   14d5c:	cmp	r0, #0
   14d60:	push	{lr}		; (str lr, [sp, #-4]!)
   14d64:	lsr	r3, r3, #5
   14d68:	mov	lr, r0
   14d6c:	moveq	r0, #1
   14d70:	movne	r0, r3
   14d74:	cmp	r0, #0
   14d78:	movne	r0, #0
   14d7c:	bne	14d90 <__assert_fail@plt+0x3ae8>
   14d80:	ldr	r2, [r1, #4]
   14d84:	ldr	r3, [lr, #4]
   14d88:	cmp	r3, r2
   14d8c:	beq	14dac <__assert_fail@plt+0x3b04>
   14d90:	pop	{pc}		; (ldr pc, [sp], #4)
   14d94:	ldr	r2, [r1, #8]
   14d98:	ldr	ip, [lr, #8]
   14d9c:	ldr	r2, [r2, r3, lsl #2]
   14da0:	ldr	ip, [ip, r3, lsl #2]
   14da4:	cmp	ip, r2
   14da8:	bne	14d90 <__assert_fail@plt+0x3ae8>
   14dac:	subs	r3, r3, #1
   14db0:	bpl	14d94 <__assert_fail@plt+0x3aec>
   14db4:	mov	r0, #1
   14db8:	pop	{pc}		; (ldr pc, [sp], #4)
   14dbc:	strd	r4, [sp, #-16]!
   14dc0:	mov	r4, r0
   14dc4:	mov	r5, r2
   14dc8:	str	r6, [sp, #8]
   14dcc:	mov	r6, r1
   14dd0:	str	lr, [sp, #12]
   14dd4:	b	14ddc <__assert_fail@plt+0x3b34>
   14dd8:	mov	r4, r3
   14ddc:	ldr	r3, [r4, #4]
   14de0:	cmp	r3, #0
   14de4:	bne	14dd8 <__assert_fail@plt+0x3b30>
   14de8:	ldr	r3, [r4, #8]
   14dec:	cmp	r3, #0
   14df0:	bne	14dd8 <__assert_fail@plt+0x3b30>
   14df4:	b	14e2c <__assert_fail@plt+0x3b84>
   14df8:	ldr	r2, [r4]
   14dfc:	cmp	r2, #0
   14e00:	beq	14e40 <__assert_fail@plt+0x3b98>
   14e04:	ldr	r3, [r2, #8]
   14e08:	sub	r1, r3, r4
   14e0c:	cmp	r3, #0
   14e10:	clz	r1, r1
   14e14:	mov	r4, r2
   14e18:	lsr	r1, r1, #5
   14e1c:	moveq	r2, #1
   14e20:	movne	r2, r1
   14e24:	cmp	r2, #0
   14e28:	beq	14dd8 <__assert_fail@plt+0x3b30>
   14e2c:	mov	r1, r4
   14e30:	mov	r0, r5
   14e34:	blx	r6
   14e38:	cmp	r0, #0
   14e3c:	beq	14df8 <__assert_fail@plt+0x3b50>
   14e40:	ldrd	r4, [sp]
   14e44:	ldr	r6, [sp, #8]
   14e48:	add	sp, sp, #12
   14e4c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e50:	ldr	r3, [r1, #40]	; 0x28
   14e54:	ldr	ip, [r1, #56]	; 0x38
   14e58:	cmp	ip, r3
   14e5c:	ble	14f20 <__assert_fail@plt+0x3c78>
   14e60:	str	r4, [sp, #-8]!
   14e64:	ldr	r4, [r1, #80]	; 0x50
   14e68:	str	lr, [sp, #4]
   14e6c:	ldr	lr, [r1, #4]
   14e70:	cmp	r4, #1
   14e74:	ldrb	ip, [lr, r3]
   14e78:	strb	ip, [r0]
   14e7c:	ble	14e9c <__assert_fail@plt+0x3bf4>
   14e80:	ldr	r4, [r1, #28]
   14e84:	cmp	r3, r4
   14e88:	beq	14e9c <__assert_fail@plt+0x3bf4>
   14e8c:	ldr	r4, [r1, #8]
   14e90:	ldr	r4, [r4, r3, lsl #2]
   14e94:	cmn	r4, #1
   14e98:	beq	14ee0 <__assert_fail@plt+0x3c38>
   14e9c:	cmp	ip, #92	; 0x5c
   14ea0:	beq	14ed8 <__assert_fail@plt+0x3c30>
   14ea4:	cmp	ip, #91	; 0x5b
   14ea8:	beq	14f60 <__assert_fail@plt+0x3cb8>
   14eac:	cmp	ip, #93	; 0x5d
   14eb0:	beq	14fb8 <__assert_fail@plt+0x3d10>
   14eb4:	cmp	ip, #94	; 0x5e
   14eb8:	bne	14efc <__assert_fail@plt+0x3c54>
   14ebc:	mov	r2, #25
   14ec0:	mov	r3, #1
   14ec4:	ldr	r4, [sp]
   14ec8:	add	sp, sp, #4
   14ecc:	strb	r2, [r0, #4]
   14ed0:	mov	r0, r3
   14ed4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ed8:	tst	r2, #1
   14edc:	bne	14f34 <__assert_fail@plt+0x3c8c>
   14ee0:	mov	r2, #1
   14ee4:	mov	r3, r2
   14ee8:	strb	r2, [r0, #4]
   14eec:	ldr	r4, [sp]
   14ef0:	add	sp, sp, #4
   14ef4:	mov	r0, r3
   14ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   14efc:	cmp	ip, #45	; 0x2d
   14f00:	bne	14ee0 <__assert_fail@plt+0x3c38>
   14f04:	mov	r2, #22
   14f08:	mov	r3, #1
   14f0c:	ldr	r4, [sp]
   14f10:	add	sp, sp, #4
   14f14:	strb	r2, [r0, #4]
   14f18:	mov	r0, r3
   14f1c:	pop	{pc}		; (ldr pc, [sp], #4)
   14f20:	mov	r2, #2
   14f24:	mov	r3, #0
   14f28:	strb	r2, [r0, #4]
   14f2c:	mov	r0, r3
   14f30:	bx	lr
   14f34:	ldr	r2, [r1, #48]	; 0x30
   14f38:	add	r3, r3, #1
   14f3c:	cmp	r3, r2
   14f40:	bge	14ee0 <__assert_fail@plt+0x3c38>
   14f44:	str	r3, [r1, #40]	; 0x28
   14f48:	mov	r2, #1
   14f4c:	ldrb	r1, [lr, r3]
   14f50:	mov	r3, r2
   14f54:	strb	r1, [r0]
   14f58:	strb	r2, [r0, #4]
   14f5c:	b	14eec <__assert_fail@plt+0x3c44>
   14f60:	ldr	r1, [r1, #48]	; 0x30
   14f64:	add	ip, r3, #1
   14f68:	cmp	ip, r1
   14f6c:	bge	14fa0 <__assert_fail@plt+0x3cf8>
   14f70:	add	r3, lr, r3
   14f74:	ldrb	r3, [r3, #1]
   14f78:	cmp	r3, #58	; 0x3a
   14f7c:	strb	r3, [r0]
   14f80:	beq	14fe4 <__assert_fail@plt+0x3d3c>
   14f84:	cmp	r3, #61	; 0x3d
   14f88:	beq	14fd4 <__assert_fail@plt+0x3d2c>
   14f8c:	cmp	r3, #46	; 0x2e
   14f90:	moveq	r2, #26
   14f94:	moveq	r3, #2
   14f98:	strbeq	r2, [r0, #4]
   14f9c:	beq	14eec <__assert_fail@plt+0x3c44>
   14fa0:	mov	r2, #1
   14fa4:	mov	r1, #91	; 0x5b
   14fa8:	mov	r3, r2
   14fac:	strb	r1, [r0]
   14fb0:	strb	r2, [r0, #4]
   14fb4:	b	14eec <__assert_fail@plt+0x3c44>
   14fb8:	mov	r2, #21
   14fbc:	mov	r3, #1
   14fc0:	ldr	r4, [sp]
   14fc4:	add	sp, sp, #4
   14fc8:	strb	r2, [r0, #4]
   14fcc:	mov	r0, r3
   14fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   14fd4:	mov	r2, #28
   14fd8:	mov	r3, #2
   14fdc:	strb	r2, [r0, #4]
   14fe0:	b	14eec <__assert_fail@plt+0x3c44>
   14fe4:	tst	r2, #4
   14fe8:	beq	14fa0 <__assert_fail@plt+0x3cf8>
   14fec:	mov	r2, #30
   14ff0:	mov	r3, #2
   14ff4:	strb	r2, [r0, #4]
   14ff8:	b	14eec <__assert_fail@plt+0x3c44>
   14ffc:	ldrb	r3, [r1, #24]
   15000:	cmp	r3, #17
   15004:	beq	15010 <__assert_fail@plt+0x3d68>
   15008:	mov	r0, #0
   1500c:	bx	lr
   15010:	ldr	r3, [r1, #20]
   15014:	cmp	r0, r3
   15018:	bne	15008 <__assert_fail@plt+0x3d60>
   1501c:	ldrb	r3, [r1, #26]
   15020:	mov	r0, #0
   15024:	orr	r3, r3, #8
   15028:	strb	r3, [r1, #26]
   1502c:	bx	lr
   15030:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15034:	strd	r6, [sp, #8]
   15038:	strd	r8, [sp, #16]
   1503c:	ldr	r8, [r0, #84]	; 0x54
   15040:	strd	sl, [sp, #24]
   15044:	mov	fp, r1
   15048:	str	lr, [sp, #32]
   1504c:	sub	sp, sp, #44	; 0x2c
   15050:	str	r3, [sp, #24]
   15054:	add	r3, r3, r3, lsl #1
   15058:	ldr	r9, [r8, #24]
   1505c:	add	r9, r9, r3, lsl #2
   15060:	ldr	r1, [r9, #4]
   15064:	cmp	r1, #0
   15068:	ble	15214 <__assert_fail@plt+0x3f6c>
   1506c:	ldr	r3, [sp, #80]	; 0x50
   15070:	mov	r7, r2
   15074:	mov	r2, #1
   15078:	mov	sl, r0
   1507c:	mov	r4, #0
   15080:	add	r3, r3, r2
   15084:	lsl	r2, r2, r7
   15088:	add	r3, r3, r3, lsl #1
   1508c:	str	r2, [sp, #12]
   15090:	str	r3, [sp, #28]
   15094:	mvn	r3, r2
   15098:	str	r3, [sp, #16]
   1509c:	b	150b4 <__assert_fail@plt+0x3e0c>
   150a0:	cmp	r3, #4
   150a4:	beq	15128 <__assert_fail@plt+0x3e80>
   150a8:	add	r4, r4, #1
   150ac:	cmp	r1, r4
   150b0:	ble	15214 <__assert_fail@plt+0x3f6c>
   150b4:	ldr	r3, [r9, #8]
   150b8:	ldr	r2, [r8]
   150bc:	ldr	r5, [r3, r4, lsl #2]
   150c0:	add	r3, r2, r5, lsl #3
   150c4:	ldrb	r3, [r3, #4]
   150c8:	cmp	r3, #8
   150cc:	beq	150f4 <__assert_fail@plt+0x3e4c>
   150d0:	cmp	r3, #9
   150d4:	bne	150a0 <__assert_fail@plt+0x3df8>
   150d8:	tst	fp, #2
   150dc:	beq	150a8 <__assert_fail@plt+0x3e00>
   150e0:	ldr	r3, [r2, r5, lsl #3]
   150e4:	cmp	r3, r7
   150e8:	bne	150a8 <__assert_fail@plt+0x3e00>
   150ec:	mov	r0, #0
   150f0:	b	1510c <__assert_fail@plt+0x3e64>
   150f4:	tst	fp, #1
   150f8:	beq	150a8 <__assert_fail@plt+0x3e00>
   150fc:	ldr	r3, [r2, r5, lsl #3]
   15100:	cmp	r3, r7
   15104:	bne	150a8 <__assert_fail@plt+0x3e00>
   15108:	mvn	r0, #0
   1510c:	add	sp, sp, #44	; 0x2c
   15110:	ldrd	r4, [sp]
   15114:	ldrd	r6, [sp, #8]
   15118:	ldrd	r8, [sp, #16]
   1511c:	ldrd	sl, [sp, #24]
   15120:	add	sp, sp, #32
   15124:	pop	{pc}		; (ldr pc, [sp], #4)
   15128:	ldr	r3, [sp, #80]	; 0x50
   1512c:	cmn	r3, #1
   15130:	beq	150a8 <__assert_fail@plt+0x3e00>
   15134:	and	r2, fp, #2
   15138:	ldr	r6, [sl, #116]	; 0x74
   1513c:	add	r3, r5, r5, lsl #1
   15140:	str	r2, [sp, #20]
   15144:	lsl	r3, r3, #2
   15148:	ldr	r2, [sp, #28]
   1514c:	str	r9, [sp, #32]
   15150:	mov	r9, r3
   15154:	str	r4, [sp, #36]	; 0x24
   15158:	ldr	r4, [sp, #24]
   1515c:	add	r6, r6, r2, lsl #3
   15160:	ldr	r3, [r6, #-24]	; 0xffffffe8
   15164:	mov	r2, r7
   15168:	mov	r1, fp
   1516c:	mov	r0, sl
   15170:	cmp	r3, r5
   15174:	bne	151ec <__assert_fail@plt+0x3f44>
   15178:	cmp	r7, #31
   1517c:	bgt	15190 <__assert_fail@plt+0x3ee8>
   15180:	ldr	r3, [r6, #-8]
   15184:	ldr	ip, [sp, #12]
   15188:	tst	ip, r3
   1518c:	beq	151ec <__assert_fail@plt+0x3f44>
   15190:	ldr	r3, [r8, #20]
   15194:	add	r3, r3, r9
   15198:	ldr	r3, [r3, #8]
   1519c:	ldr	ip, [r3]
   151a0:	cmp	r4, ip
   151a4:	mov	r3, ip
   151a8:	beq	1521c <__assert_fail@plt+0x3f74>
   151ac:	ldr	ip, [sp, #80]	; 0x50
   151b0:	str	ip, [sp]
   151b4:	bl	15030 <__assert_fail@plt+0x3d88>
   151b8:	cmn	r0, #1
   151bc:	beq	15108 <__assert_fail@plt+0x3e60>
   151c0:	cmp	r0, #0
   151c4:	bne	151d4 <__assert_fail@plt+0x3f2c>
   151c8:	ldr	r3, [sp, #20]
   151cc:	cmp	r3, #0
   151d0:	bne	150ec <__assert_fail@plt+0x3e44>
   151d4:	cmp	r7, #31
   151d8:	bgt	151ec <__assert_fail@plt+0x3f44>
   151dc:	ldr	r3, [r6, #-8]
   151e0:	ldr	r2, [sp, #16]
   151e4:	and	r3, r3, r2
   151e8:	str	r3, [r6, #-8]
   151ec:	add	r6, r6, #24
   151f0:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   151f4:	cmp	r3, #0
   151f8:	bne	15160 <__assert_fail@plt+0x3eb8>
   151fc:	ldr	r9, [sp, #32]
   15200:	ldr	r4, [sp, #36]	; 0x24
   15204:	ldr	r1, [r9, #4]
   15208:	add	r4, r4, #1
   1520c:	cmp	r1, r4
   15210:	bgt	150b4 <__assert_fail@plt+0x3e0c>
   15214:	asr	r0, fp, #1
   15218:	b	1510c <__assert_fail@plt+0x3e64>
   1521c:	sbfx	r0, fp, #0, #1
   15220:	b	1510c <__assert_fail@plt+0x3e64>
   15224:	ldr	ip, [r0, #116]	; 0x74
   15228:	add	r1, r1, r1, lsl #1
   1522c:	strd	r4, [sp, #-12]!
   15230:	ldr	r5, [sp, #16]
   15234:	add	r1, ip, r1, lsl #3
   15238:	ldr	ip, [r1, #8]
   1523c:	str	lr, [sp, #8]
   15240:	ldr	lr, [sp, #12]
   15244:	cmp	ip, lr
   15248:	bgt	152ac <__assert_fail@plt+0x4004>
   1524c:	ldr	r4, [r1, #12]
   15250:	cmp	r4, lr
   15254:	blt	1529c <__assert_fail@plt+0x3ff4>
   15258:	sub	r1, ip, lr
   1525c:	cmp	r4, lr
   15260:	clz	r1, r1
   15264:	lsr	r1, r1, #5
   15268:	beq	15284 <__assert_fail@plt+0x3fdc>
   1526c:	cmp	ip, lr
   15270:	movne	r0, #0
   15274:	beq	15288 <__assert_fail@plt+0x3fe0>
   15278:	ldrd	r4, [sp]
   1527c:	add	sp, sp, #8
   15280:	pop	{pc}		; (ldr pc, [sp], #4)
   15284:	orr	r1, r1, #2
   15288:	str	r5, [sp, #12]
   1528c:	ldrd	r4, [sp]
   15290:	ldr	lr, [sp, #8]
   15294:	add	sp, sp, #12
   15298:	b	15030 <__assert_fail@plt+0x3d88>
   1529c:	ldrd	r4, [sp]
   152a0:	add	sp, sp, #8
   152a4:	mov	r0, #1
   152a8:	pop	{pc}		; (ldr pc, [sp], #4)
   152ac:	mvn	r0, #0
   152b0:	b	15278 <__assert_fail@plt+0x3fd0>
   152b4:	ldr	r3, [r0, #80]	; 0x50
   152b8:	strd	r4, [sp, #-16]!
   152bc:	mov	r4, r0
   152c0:	mov	r5, r1
   152c4:	str	r6, [sp, #8]
   152c8:	str	lr, [sp, #12]
   152cc:	cmp	r3, #1
   152d0:	ble	15318 <__assert_fail@plt+0x4070>
   152d4:	cmn	r1, #-1073741823	; 0xc0000001
   152d8:	bhi	15358 <__assert_fail@plt+0x40b0>
   152dc:	lsl	r6, r1, #2
   152e0:	ldr	r0, [r0, #8]
   152e4:	mov	r1, r6
   152e8:	bl	2447c <__assert_fail@plt+0x131d4>
   152ec:	subs	r3, r0, #0
   152f0:	beq	15358 <__assert_fail@plt+0x40b0>
   152f4:	ldr	r0, [r4, #12]
   152f8:	str	r3, [r4, #8]
   152fc:	cmp	r0, #0
   15300:	beq	15318 <__assert_fail@plt+0x4070>
   15304:	mov	r1, r6
   15308:	bl	2447c <__assert_fail@plt+0x131d4>
   1530c:	cmp	r0, #0
   15310:	beq	15358 <__assert_fail@plt+0x40b0>
   15314:	str	r0, [r4, #12]
   15318:	ldrb	r3, [r4, #75]	; 0x4b
   1531c:	cmp	r3, #0
   15320:	bne	1533c <__assert_fail@plt+0x4094>
   15324:	str	r5, [r4, #36]	; 0x24
   15328:	mov	r0, #0
   1532c:	ldrd	r4, [sp]
   15330:	ldr	r6, [sp, #8]
   15334:	add	sp, sp, #12
   15338:	pop	{pc}		; (ldr pc, [sp], #4)
   1533c:	mov	r1, r5
   15340:	ldr	r0, [r4, #4]
   15344:	bl	2447c <__assert_fail@plt+0x131d4>
   15348:	cmp	r0, #0
   1534c:	beq	15358 <__assert_fail@plt+0x40b0>
   15350:	str	r0, [r4, #4]
   15354:	b	15324 <__assert_fail@plt+0x407c>
   15358:	ldrd	r4, [sp]
   1535c:	mov	r0, #12
   15360:	ldr	r6, [sp, #8]
   15364:	add	sp, sp, #12
   15368:	pop	{pc}		; (ldr pc, [sp], #4)
   1536c:	strd	r4, [sp, #-16]!
   15370:	mov	r5, r1
   15374:	mov	r4, r0
   15378:	ldr	r2, [r0]
   1537c:	ldmib	r0, {r1, r3}
   15380:	str	r6, [sp, #8]
   15384:	str	lr, [sp, #12]
   15388:	cmp	r2, r1
   1538c:	beq	153b0 <__assert_fail@plt+0x4108>
   15390:	add	r2, r1, #1
   15394:	mov	r0, #1
   15398:	str	r2, [r4, #4]
   1539c:	str	r5, [r3, r1, lsl #2]
   153a0:	ldrd	r4, [sp]
   153a4:	ldr	r6, [sp, #8]
   153a8:	add	sp, sp, #12
   153ac:	pop	{pc}		; (ldr pc, [sp], #4)
   153b0:	add	r1, r1, #1
   153b4:	mov	r0, r3
   153b8:	lsl	r3, r1, #1
   153bc:	lsl	r1, r1, #3
   153c0:	str	r3, [r4]
   153c4:	bl	2447c <__assert_fail@plt+0x131d4>
   153c8:	subs	r3, r0, #0
   153cc:	beq	153dc <__assert_fail@plt+0x4134>
   153d0:	str	r3, [r4, #8]
   153d4:	ldr	r1, [r4, #4]
   153d8:	b	15390 <__assert_fail@plt+0x40e8>
   153dc:	mov	r0, r3
   153e0:	b	153a0 <__assert_fail@plt+0x40f8>
   153e4:	ldr	r3, [r1, #8]
   153e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   153ec:	mov	r5, r1
   153f0:	mov	r4, #0
   153f4:	strd	r6, [sp, #8]
   153f8:	mov	r7, r1
   153fc:	mov	r6, r2
   15400:	str	r8, [sp, #16]
   15404:	mov	r8, r0
   15408:	str	lr, [sp, #20]
   1540c:	lsl	r0, r3, #2
   15410:	str	r2, [r5], #16
   15414:	str	r3, [r1, #16]
   15418:	str	r4, [r1, #20]
   1541c:	bl	24440 <__assert_fail@plt+0x13198>
   15420:	cmp	r0, r4
   15424:	str	r0, [r7, #24]
   15428:	beq	154d0 <__assert_fail@plt+0x4228>
   1542c:	ldr	r0, [r7, #8]
   15430:	cmp	r0, #0
   15434:	bgt	15448 <__assert_fail@plt+0x41a0>
   15438:	b	15484 <__assert_fail@plt+0x41dc>
   1543c:	add	r4, r4, #1
   15440:	cmp	r0, r4
   15444:	ble	15484 <__assert_fail@plt+0x41dc>
   15448:	ldr	r2, [r7, #12]
   1544c:	ldr	r3, [r8]
   15450:	ldr	r1, [r2, r4, lsl #2]
   15454:	add	r3, r3, r1, lsl #3
   15458:	ldrb	r3, [r3, #4]
   1545c:	tst	r3, #8
   15460:	bne	1543c <__assert_fail@plt+0x4194>
   15464:	mov	r0, r5
   15468:	bl	1536c <__assert_fail@plt+0x40c4>
   1546c:	cmp	r0, #0
   15470:	beq	154d0 <__assert_fail@plt+0x4228>
   15474:	ldr	r0, [r7, #8]
   15478:	add	r4, r4, #1
   1547c:	cmp	r0, r4
   15480:	bgt	15448 <__assert_fail@plt+0x41a0>
   15484:	ldr	r5, [r8, #32]
   15488:	ldr	r4, [r8, #68]	; 0x44
   1548c:	and	r6, r6, r4
   15490:	add	r6, r6, r6, lsl #1
   15494:	lsl	r4, r6, #2
   15498:	add	r6, r5, r4
   1549c:	ldr	r3, [r5, r4]
   154a0:	ldrd	r0, [r6, #4]
   154a4:	add	r2, r3, #1
   154a8:	cmp	r0, r3
   154ac:	ble	154d8 <__assert_fail@plt+0x4230>
   154b0:	mov	r0, #0
   154b4:	str	r2, [r5, r4]
   154b8:	str	r7, [r1, r3, lsl #2]
   154bc:	ldrd	r4, [sp]
   154c0:	ldrd	r6, [sp, #8]
   154c4:	ldr	r8, [sp, #16]
   154c8:	add	sp, sp, #20
   154cc:	pop	{pc}		; (ldr pc, [sp], #4)
   154d0:	mov	r0, #12
   154d4:	b	154bc <__assert_fail@plt+0x4214>
   154d8:	mov	r0, r1
   154dc:	lsl	r1, r2, #3
   154e0:	lsl	r8, r2, #1
   154e4:	bl	2447c <__assert_fail@plt+0x131d4>
   154e8:	subs	r1, r0, #0
   154ec:	beq	154d0 <__assert_fail@plt+0x4228>
   154f0:	ldr	r3, [r5, r4]
   154f4:	str	r8, [r6, #4]
   154f8:	str	r1, [r6, #8]
   154fc:	add	r2, r3, #1
   15500:	b	154b0 <__assert_fail@plt+0x4208>
   15504:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15508:	mov	r5, r0
   1550c:	ldr	r4, [r0, #28]
   15510:	ldr	r3, [r0, #48]	; 0x30
   15514:	strd	r6, [sp, #8]
   15518:	ldr	r7, [r0, #36]	; 0x24
   1551c:	strd	r8, [sp, #16]
   15520:	str	lr, [sp, #24]
   15524:	sub	sp, sp, #84	; 0x54
   15528:	cmp	r7, r3
   1552c:	movge	r7, r3
   15530:	cmp	r7, r4
   15534:	ble	155c8 <__assert_fail@plt+0x4320>
   15538:	add	r8, r0, #16
   1553c:	mvn	r6, #0
   15540:	ldr	ip, [r5, #64]	; 0x40
   15544:	sub	r2, r7, r4
   15548:	ldrd	r0, [r8]
   1554c:	cmp	ip, #0
   15550:	strd	r0, [sp, #8]
   15554:	bne	15624 <__assert_fail@plt+0x437c>
   15558:	ldr	r1, [r5]
   1555c:	ldr	r3, [r5, #24]
   15560:	add	r3, r4, r3
   15564:	add	r1, r1, r3
   15568:	mov	r3, r8
   1556c:	add	r0, sp, #4
   15570:	bl	246d4 <__assert_fail@plt+0x1342c>
   15574:	sub	r3, r0, #1
   15578:	cmn	r3, #3
   1557c:	bhi	155e8 <__assert_fail@plt+0x4340>
   15580:	cmn	r0, #2
   15584:	ldrne	r1, [sp, #4]
   15588:	beq	15688 <__assert_fail@plt+0x43e0>
   1558c:	add	r0, r4, r0
   15590:	add	ip, r4, #1
   15594:	ldr	r2, [r5, #8]
   15598:	cmp	ip, r0
   1559c:	add	r3, r2, r4, lsl #2
   155a0:	str	r1, [r2, r4, lsl #2]
   155a4:	bge	1561c <__assert_fail@plt+0x4374>
   155a8:	sub	r2, r2, #4
   155ac:	add	r2, r2, r0, lsl #2
   155b0:	str	r6, [r3, #4]!
   155b4:	cmp	r2, r3
   155b8:	bne	155b0 <__assert_fail@plt+0x4308>
   155bc:	mov	r4, r0
   155c0:	cmp	r7, r4
   155c4:	bgt	15540 <__assert_fail@plt+0x4298>
   155c8:	str	r4, [r5, #28]
   155cc:	str	r4, [r5, #32]
   155d0:	add	sp, sp, #84	; 0x54
   155d4:	ldrd	r4, [sp]
   155d8:	ldrd	r6, [sp, #8]
   155dc:	ldrd	r8, [sp, #16]
   155e0:	add	sp, sp, #24
   155e4:	pop	{pc}		; (ldr pc, [sp], #4)
   155e8:	ldr	r3, [r5]
   155ec:	mov	r0, #1
   155f0:	ldr	r1, [r5, #24]
   155f4:	ldr	r2, [r5, #64]	; 0x40
   155f8:	add	r3, r3, r4
   155fc:	ldrb	r1, [r3, r1]
   15600:	cmp	r2, #0
   15604:	str	r1, [sp, #4]
   15608:	ldrbne	r1, [r2, r1]
   1560c:	ldrd	r2, [sp, #8]
   15610:	strne	r1, [sp, #4]
   15614:	strd	r2, [r8]
   15618:	b	1558c <__assert_fail@plt+0x42e4>
   1561c:	mov	r4, ip
   15620:	b	155c0 <__assert_fail@plt+0x4318>
   15624:	ldr	r3, [r5, #80]	; 0x50
   15628:	cmp	r3, #0
   1562c:	cmpgt	r2, #0
   15630:	ble	15680 <__assert_fail@plt+0x43d8>
   15634:	add	r0, sp, #16
   15638:	mov	r1, #0
   1563c:	b	15644 <__assert_fail@plt+0x439c>
   15640:	ldr	ip, [r5, #64]	; 0x40
   15644:	ldm	r5, {r3, lr}
   15648:	ldr	r9, [r5, #24]
   1564c:	add	r3, r3, r4
   15650:	add	r3, r3, r1
   15654:	ldrb	r9, [r3, r9]
   15658:	add	r3, lr, r4
   1565c:	ldrb	ip, [ip, r9]
   15660:	strb	ip, [r3, r1]
   15664:	add	r1, r1, #1
   15668:	ldr	r3, [r5, #80]	; 0x50
   1566c:	strb	ip, [r0], #1
   15670:	cmp	r2, r3
   15674:	movlt	r3, r2
   15678:	cmp	r3, r1
   1567c:	bgt	15640 <__assert_fail@plt+0x4398>
   15680:	add	r1, sp, #16
   15684:	b	15568 <__assert_fail@plt+0x42c0>
   15688:	ldr	r2, [r5, #36]	; 0x24
   1568c:	ldr	r3, [r5, #48]	; 0x30
   15690:	cmp	r2, r3
   15694:	bge	155e8 <__assert_fail@plt+0x4340>
   15698:	ldrd	r2, [sp, #8]
   1569c:	strd	r2, [r5, #16]
   156a0:	b	155c8 <__assert_fail@plt+0x4320>
   156a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   156a8:	mov	r5, r0
   156ac:	ldr	r3, [r0, #48]	; 0x30
   156b0:	strd	r6, [sp, #8]
   156b4:	strd	r8, [sp, #16]
   156b8:	ldr	r7, [r0, #36]	; 0x24
   156bc:	strd	sl, [sp, #24]
   156c0:	str	lr, [sp, #32]
   156c4:	sub	sp, sp, #100	; 0x64
   156c8:	ldrb	r2, [r0, #74]	; 0x4a
   156cc:	cmp	r7, r3
   156d0:	ldr	r6, [r0, #28]
   156d4:	movge	r7, r3
   156d8:	cmp	r2, #0
   156dc:	bne	156ec <__assert_fail@plt+0x4444>
   156e0:	ldr	r3, [r0, #64]	; 0x40
   156e4:	cmp	r3, #0
   156e8:	beq	15834 <__assert_fail@plt+0x458c>
   156ec:	ldr	r4, [r5, #32]
   156f0:	cmp	r6, r7
   156f4:	bge	1580c <__assert_fail@plt+0x4564>
   156f8:	add	r3, r5, #16
   156fc:	str	r3, [sp, #12]
   15700:	sub	r3, r7, r6
   15704:	str	r3, [sp, #8]
   15708:	add	r3, sp, #20
   1570c:	mov	r9, r3
   15710:	ldrd	r0, [r5, #16]
   15714:	ldr	r3, [r5, #64]	; 0x40
   15718:	strd	r0, [sp, #24]
   1571c:	cmp	r3, #0
   15720:	bne	15a10 <__assert_fail@plt+0x4768>
   15724:	ldr	r8, [r5]
   15728:	ldr	r3, [r5, #24]
   1572c:	add	r3, r4, r3
   15730:	add	r8, r8, r3
   15734:	mov	r0, r9
   15738:	mov	r1, r8
   1573c:	ldrd	r2, [sp, #8]
   15740:	bl	246d4 <__assert_fail@plt+0x1342c>
   15744:	sub	r3, r0, #1
   15748:	mov	sl, r0
   1574c:	cmn	r3, #4
   15750:	str	r3, [sp, #4]
   15754:	bhi	15a90 <__assert_fail@plt+0x47e8>
   15758:	ldr	r3, [sp, #20]
   1575c:	mov	r9, r6
   15760:	mov	r0, r3
   15764:	str	r3, [sp]
   15768:	bl	11284 <towupper@plt>
   1576c:	ldr	r3, [sp]
   15770:	mov	fp, r0
   15774:	cmp	r3, r0
   15778:	beq	15a78 <__assert_fail@plt+0x47d0>
   1577c:	add	r3, sp, #32
   15780:	add	r2, sp, #24
   15784:	mov	r0, r3
   15788:	mov	r1, fp
   1578c:	str	r3, [sp]
   15790:	bl	10fc0 <wcrtomb@plt>
   15794:	cmp	sl, r0
   15798:	mov	r3, r0
   1579c:	bne	15b24 <__assert_fail@plt+0x487c>
   157a0:	ldr	r0, [r5, #4]
   157a4:	mov	r2, sl
   157a8:	ldr	r1, [sp]
   157ac:	add	r0, r0, r6
   157b0:	bl	11038 <memcpy@plt>
   157b4:	ldrb	r3, [r5, #76]	; 0x4c
   157b8:	cmp	r3, #0
   157bc:	bne	15b04 <__assert_fail@plt+0x485c>
   157c0:	add	r2, sl, r4
   157c4:	ldr	r3, [r5, #8]
   157c8:	add	sl, sl, r9
   157cc:	add	r6, r6, #1
   157d0:	cmp	r6, sl
   157d4:	mov	r4, r2
   157d8:	mvnlt	r2, #0
   157dc:	str	fp, [r3, r9, lsl #2]
   157e0:	add	r9, r3, r9, lsl #2
   157e4:	sublt	r3, r3, #4
   157e8:	addlt	r3, r3, sl, lsl #2
   157ec:	bge	156f0 <__assert_fail@plt+0x4448>
   157f0:	str	r2, [r9, #4]!
   157f4:	cmp	r3, r9
   157f8:	bne	157f0 <__assert_fail@plt+0x4548>
   157fc:	mov	r6, sl
   15800:	b	156f0 <__assert_fail@plt+0x4448>
   15804:	ldrd	r2, [sp, #24]
   15808:	strd	r2, [r5, #16]
   1580c:	mov	r0, #0
   15810:	str	r6, [r5, #28]
   15814:	str	r4, [r5, #32]
   15818:	add	sp, sp, #100	; 0x64
   1581c:	ldrd	r4, [sp]
   15820:	ldrd	r6, [sp, #8]
   15824:	ldrd	r8, [sp, #16]
   15828:	ldrd	sl, [sp, #24]
   1582c:	add	sp, sp, #32
   15830:	pop	{pc}		; (ldr pc, [sp], #4)
   15834:	ldrb	r3, [r0, #76]	; 0x4c
   15838:	cmp	r3, #0
   1583c:	bne	156ec <__assert_fail@plt+0x4444>
   15840:	cmp	r6, r7
   15844:	bge	1596c <__assert_fail@plt+0x46c4>
   15848:	add	fp, r0, #16
   1584c:	str	r7, [sp]
   15850:	str	fp, [sp, #12]
   15854:	ldr	r8, [r5]
   15858:	mov	r4, r6
   1585c:	ldr	r7, [r5, #24]
   15860:	add	r3, r8, r7
   15864:	ldrb	sl, [r3, r6]
   15868:	tst	sl, #128	; 0x80
   1586c:	bne	15890 <__assert_fail@plt+0x45e8>
   15870:	mov	r0, fp
   15874:	bl	1105c <mbsinit@plt>
   15878:	cmp	r0, #0
   1587c:	beq	15890 <__assert_fail@plt+0x45e8>
   15880:	mov	r0, sl
   15884:	bl	11284 <towupper@plt>
   15888:	bics	r3, r0, #127	; 0x7f
   1588c:	beq	159a0 <__assert_fail@plt+0x46f8>
   15890:	ldr	r3, [sp]
   15894:	add	r1, r7, r6
   15898:	add	r0, sp, #20
   1589c:	add	r1, r8, r1
   158a0:	ldrd	r8, [fp]
   158a4:	sub	r3, r3, r6
   158a8:	mov	r2, r3
   158ac:	str	r3, [sp, #8]
   158b0:	mov	r3, fp
   158b4:	strd	r8, [sp, #24]
   158b8:	mov	r9, r0
   158bc:	bl	246d4 <__assert_fail@plt+0x1342c>
   158c0:	sub	r3, r0, #1
   158c4:	mov	r8, r0
   158c8:	cmn	r3, #4
   158cc:	bhi	159b8 <__assert_fail@plt+0x4710>
   158d0:	ldr	r3, [sp, #20]
   158d4:	mov	r0, r3
   158d8:	str	r3, [sp, #4]
   158dc:	bl	11284 <towupper@plt>
   158e0:	ldr	r3, [sp, #4]
   158e4:	mov	sl, r0
   158e8:	cmp	r3, r0
   158ec:	beq	1597c <__assert_fail@plt+0x46d4>
   158f0:	add	r3, sp, #32
   158f4:	add	r2, sp, #24
   158f8:	mov	r0, r3
   158fc:	mov	r1, sl
   15900:	str	r3, [sp, #4]
   15904:	bl	10fc0 <wcrtomb@plt>
   15908:	cmp	r8, r0
   1590c:	bne	15a6c <__assert_fail@plt+0x47c4>
   15910:	ldr	r0, [r5, #4]
   15914:	mov	r2, r8
   15918:	ldr	r3, [sp, #4]
   1591c:	add	r0, r0, r6
   15920:	mov	r1, r3
   15924:	bl	11038 <memcpy@plt>
   15928:	ldr	r3, [r5, #8]
   1592c:	add	r8, r8, r4
   15930:	add	r6, r6, #1
   15934:	cmp	r6, r8
   15938:	str	sl, [r3, r4, lsl #2]
   1593c:	add	r4, r3, r4, lsl #2
   15940:	bge	15960 <__assert_fail@plt+0x46b8>
   15944:	sub	r3, r3, #4
   15948:	add	r3, r3, r8, lsl #2
   1594c:	mvn	r2, #0
   15950:	str	r2, [r4, #4]!
   15954:	cmp	r4, r3
   15958:	bne	1594c <__assert_fail@plt+0x46a4>
   1595c:	mov	r6, r8
   15960:	ldr	r3, [sp]
   15964:	cmp	r3, r6
   15968:	bgt	15854 <__assert_fail@plt+0x45ac>
   1596c:	mov	r0, #0
   15970:	str	r6, [r5, #28]
   15974:	str	r6, [r5, #32]
   15978:	b	15818 <__assert_fail@plt+0x4570>
   1597c:	ldr	r1, [r5]
   15980:	mov	r2, r8
   15984:	ldr	r3, [r5, #24]
   15988:	ldr	r0, [r5, #4]
   1598c:	add	r3, r6, r3
   15990:	add	r1, r1, r3
   15994:	add	r0, r0, r6
   15998:	bl	11038 <memcpy@plt>
   1599c:	b	15928 <__assert_fail@plt+0x4680>
   159a0:	ldr	r3, [r5, #4]
   159a4:	strb	r0, [r3, r6]
   159a8:	ldr	r3, [r5, #8]
   159ac:	str	r0, [r3, r6, lsl #2]
   159b0:	add	r6, r6, #1
   159b4:	b	15960 <__assert_fail@plt+0x46b8>
   159b8:	cmn	r3, #3
   159bc:	beq	159e8 <__assert_fail@plt+0x4740>
   159c0:	ldr	r3, [r5, #4]
   159c4:	cmn	r0, #1
   159c8:	strb	sl, [r3, r6]
   159cc:	add	r6, r6, #1
   159d0:	ldr	r3, [r5, #8]
   159d4:	str	sl, [r3, r4, lsl #2]
   159d8:	bne	15960 <__assert_fail@plt+0x46b8>
   159dc:	ldrd	r2, [sp, #24]
   159e0:	strd	r2, [fp]
   159e4:	b	15960 <__assert_fail@plt+0x46b8>
   159e8:	ldr	r2, [r5, #36]	; 0x24
   159ec:	ldr	r3, [r5, #48]	; 0x30
   159f0:	cmp	r2, r3
   159f4:	blt	15c28 <__assert_fail@plt+0x4980>
   159f8:	ldr	r3, [r5, #4]
   159fc:	strb	sl, [r3, r6]
   15a00:	add	r6, r6, #1
   15a04:	ldr	r3, [r5, #8]
   15a08:	str	sl, [r3, r4, lsl #2]
   15a0c:	b	15960 <__assert_fail@plt+0x46b8>
   15a10:	ldr	r2, [sp, #8]
   15a14:	ldr	r8, [r5, #80]	; 0x50
   15a18:	cmp	r2, #0
   15a1c:	cmpgt	r8, #0
   15a20:	ble	15c58 <__assert_fail@plt+0x49b0>
   15a24:	ldr	lr, [r5]
   15a28:	add	r1, sp, #32
   15a2c:	ldr	r2, [r5, #24]
   15a30:	str	r1, [sp]
   15a34:	ldr	r0, [sp, #8]
   15a38:	add	r2, r4, r2
   15a3c:	add	lr, lr, r2
   15a40:	cmp	r8, r0
   15a44:	mov	r2, lr
   15a48:	movge	r8, r0
   15a4c:	ldrb	r0, [r2], #1
   15a50:	ldrb	r0, [r3, r0]
   15a54:	sub	ip, r2, lr
   15a58:	cmp	ip, r8
   15a5c:	strb	r0, [r1], #1
   15a60:	blt	15a4c <__assert_fail@plt+0x47a4>
   15a64:	ldr	r8, [sp]
   15a68:	b	15734 <__assert_fail@plt+0x448c>
   15a6c:	mov	r4, r6
   15a70:	ldr	r7, [sp]
   15a74:	b	15710 <__assert_fail@plt+0x4468>
   15a78:	ldr	r0, [r5, #4]
   15a7c:	mov	r1, r8
   15a80:	mov	r2, sl
   15a84:	add	r0, r0, r6
   15a88:	bl	11038 <memcpy@plt>
   15a8c:	b	157b4 <__assert_fail@plt+0x450c>
   15a90:	ldr	r3, [sp, #4]
   15a94:	cmn	r3, #3
   15a98:	bne	15aac <__assert_fail@plt+0x4804>
   15a9c:	ldr	r2, [r5, #36]	; 0x24
   15aa0:	ldr	r3, [r5, #48]	; 0x30
   15aa4:	cmp	r2, r3
   15aa8:	blt	15804 <__assert_fail@plt+0x455c>
   15aac:	ldr	r3, [r5]
   15ab0:	ldr	r1, [r5, #24]
   15ab4:	ldr	r2, [r5, #64]	; 0x40
   15ab8:	add	r3, r3, r4
   15abc:	ldrb	r3, [r3, r1]
   15ac0:	cmp	r2, #0
   15ac4:	ldr	r1, [r5, #4]
   15ac8:	ldrbne	r3, [r2, r3]
   15acc:	lsl	r2, r6, #2
   15ad0:	strb	r3, [r1, r6]
   15ad4:	ldrb	r1, [r5, #76]	; 0x4c
   15ad8:	cmp	r1, #0
   15adc:	ldrne	r1, [r5, #12]
   15ae0:	strne	r4, [r1, r6, lsl #2]
   15ae4:	cmn	sl, #1
   15ae8:	add	r4, r4, #1
   15aec:	ldr	r1, [r5, #8]
   15af0:	add	r6, r6, #1
   15af4:	str	r3, [r1, r2]
   15af8:	ldrdeq	r2, [sp, #24]
   15afc:	strdeq	r2, [r5, #16]
   15b00:	b	156f0 <__assert_fail@plt+0x4448>
   15b04:	ldr	r3, [r5, #12]
   15b08:	add	r2, sl, r4
   15b0c:	add	r3, r3, r6, lsl #2
   15b10:	str	r4, [r3], #4
   15b14:	add	r4, r4, #1
   15b18:	cmp	r2, r4
   15b1c:	bne	15b10 <__assert_fail@plt+0x4868>
   15b20:	b	157c4 <__assert_fail@plt+0x451c>
   15b24:	cmn	r0, #1
   15b28:	beq	15a78 <__assert_fail@plt+0x47d0>
   15b2c:	add	r8, r0, r6
   15b30:	ldr	r0, [r5, #36]	; 0x24
   15b34:	cmp	r8, r0
   15b38:	bhi	15804 <__assert_fail@plt+0x455c>
   15b3c:	ldr	r2, [r5, #12]
   15b40:	cmp	r2, #0
   15b44:	beq	15c34 <__assert_fail@plt+0x498c>
   15b48:	ldrb	r2, [r5, #76]	; 0x4c
   15b4c:	cmp	r2, #0
   15b50:	bne	15b7c <__assert_fail@plt+0x48d4>
   15b54:	cmp	r6, #0
   15b58:	ldrne	r1, [r5, #12]
   15b5c:	subne	r1, r1, #4
   15b60:	beq	15b74 <__assert_fail@plt+0x48cc>
   15b64:	str	r2, [r1, #4]!
   15b68:	add	r2, r2, #1
   15b6c:	cmp	r2, r6
   15b70:	bne	15b64 <__assert_fail@plt+0x48bc>
   15b74:	mov	r2, #1
   15b78:	strb	r2, [r5, #76]	; 0x4c
   15b7c:	ldr	r0, [r5, #4]
   15b80:	mov	r2, r3
   15b84:	ldr	r1, [sp]
   15b88:	str	r3, [sp]
   15b8c:	add	r0, r0, r6
   15b90:	bl	11038 <memcpy@plt>
   15b94:	ldr	r3, [sp]
   15b98:	lsl	r1, r6, #2
   15b9c:	ldr	r2, [r5, #8]
   15ba0:	ldr	r0, [r5, #12]
   15ba4:	cmp	r3, #1
   15ba8:	mvnhi	lr, #0
   15bac:	str	fp, [r2, r6, lsl #2]
   15bb0:	add	r2, r2, r1
   15bb4:	add	r1, r0, r1
   15bb8:	str	r4, [r0, r6, lsl #2]
   15bbc:	movhi	r0, #1
   15bc0:	bls	15be8 <__assert_fail@plt+0x4940>
   15bc4:	ldr	ip, [sp, #4]
   15bc8:	cmp	r0, sl
   15bcc:	movcc	ip, r0
   15bd0:	add	r0, r0, #1
   15bd4:	cmp	r0, r3
   15bd8:	add	ip, ip, r4
   15bdc:	str	ip, [r1, #4]!
   15be0:	str	lr, [r2, #4]!
   15be4:	bne	15bc4 <__assert_fail@plt+0x491c>
   15be8:	ldr	r7, [r5, #48]	; 0x30
   15bec:	sub	r3, r3, sl
   15bf0:	ldr	r2, [r5, #52]	; 0x34
   15bf4:	add	r7, r3, r7
   15bf8:	cmp	r2, r4
   15bfc:	str	r7, [r5, #48]	; 0x30
   15c00:	ble	15c10 <__assert_fail@plt+0x4968>
   15c04:	ldr	r2, [r5, #56]	; 0x38
   15c08:	add	r3, r2, r3
   15c0c:	str	r3, [r5, #56]	; 0x38
   15c10:	ldr	r3, [r5, #36]	; 0x24
   15c14:	mov	r6, r8
   15c18:	add	r4, sl, r4
   15c1c:	cmp	r7, r3
   15c20:	movge	r7, r3
   15c24:	b	156f0 <__assert_fail@plt+0x4448>
   15c28:	ldrd	r2, [sp, #24]
   15c2c:	strd	r2, [fp]
   15c30:	b	1596c <__assert_fail@plt+0x46c4>
   15c34:	lsl	r0, r0, #2
   15c38:	str	r3, [sp, #8]
   15c3c:	bl	24440 <__assert_fail@plt+0x13198>
   15c40:	cmp	r0, #0
   15c44:	str	r0, [r5, #12]
   15c48:	moveq	r0, #12
   15c4c:	ldr	r3, [sp, #8]
   15c50:	bne	15b48 <__assert_fail@plt+0x48a0>
   15c54:	b	15818 <__assert_fail@plt+0x4570>
   15c58:	add	r3, sp, #32
   15c5c:	str	r3, [sp]
   15c60:	b	15a64 <__assert_fail@plt+0x47bc>
   15c64:	strd	r4, [sp, #-16]!
   15c68:	mov	r5, r0
   15c6c:	ldr	r4, [r0, #28]
   15c70:	ldr	r3, [r0, #48]	; 0x30
   15c74:	str	r6, [sp, #8]
   15c78:	ldr	r6, [r0, #36]	; 0x24
   15c7c:	str	lr, [sp, #12]
   15c80:	cmp	r6, r3
   15c84:	movge	r6, r3
   15c88:	cmp	r6, r4
   15c8c:	ble	15ce4 <__assert_fail@plt+0x4a3c>
   15c90:	bl	1114c <__ctype_toupper_loc@plt>
   15c94:	ldr	r3, [r5]
   15c98:	ldr	r1, [r5, #24]
   15c9c:	ldr	r2, [r5, #64]	; 0x40
   15ca0:	add	r3, r3, r4
   15ca4:	ldrb	r3, [r3, r1]
   15ca8:	cmp	r2, #0
   15cac:	ldr	r1, [r0]
   15cb0:	ldrbne	r3, [r2, r3]
   15cb4:	ldr	r2, [r5, #4]
   15cb8:	ldr	r3, [r1, r3, lsl #2]
   15cbc:	strb	r3, [r2, r4]
   15cc0:	add	r4, r4, #1
   15cc4:	cmp	r6, r4
   15cc8:	bne	15c94 <__assert_fail@plt+0x49ec>
   15ccc:	str	r6, [r5, #28]
   15cd0:	str	r6, [r5, #32]
   15cd4:	ldrd	r4, [sp]
   15cd8:	ldr	r6, [sp, #8]
   15cdc:	add	sp, sp, #12
   15ce0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ce4:	mov	r6, r4
   15ce8:	b	15ccc <__assert_fail@plt+0x4a24>
   15cec:	ldr	r3, [r0, #36]	; 0x24
   15cf0:	strd	r4, [sp, #-16]!
   15cf4:	str	r6, [sp, #8]
   15cf8:	str	lr, [sp, #12]
   15cfc:	cmn	r3, #-536870910	; 0xe0000002
   15d00:	bhi	15e24 <__assert_fail@plt+0x4b7c>
   15d04:	ldr	r2, [r0, #48]	; 0x30
   15d08:	lsl	r3, r3, #1
   15d0c:	mov	r4, r0
   15d10:	cmp	r3, r2
   15d14:	movge	r3, r2
   15d18:	cmp	r3, r1
   15d1c:	movge	r1, r3
   15d20:	bl	152b4 <__assert_fail@plt+0x400c>
   15d24:	subs	r5, r0, #0
   15d28:	bne	15d90 <__assert_fail@plt+0x4ae8>
   15d2c:	ldr	r0, [r4, #100]	; 0x64
   15d30:	cmp	r0, #0
   15d34:	beq	15d54 <__assert_fail@plt+0x4aac>
   15d38:	ldr	r1, [r4, #36]	; 0x24
   15d3c:	add	r1, r1, #1
   15d40:	lsl	r1, r1, #2
   15d44:	bl	2447c <__assert_fail@plt+0x131d4>
   15d48:	cmp	r0, #0
   15d4c:	beq	15e24 <__assert_fail@plt+0x4b7c>
   15d50:	str	r0, [r4, #100]	; 0x64
   15d54:	ldrb	r3, [r4, #72]	; 0x48
   15d58:	ldr	r2, [r4, #80]	; 0x50
   15d5c:	cmp	r3, #0
   15d60:	beq	15da4 <__assert_fail@plt+0x4afc>
   15d64:	cmp	r2, #1
   15d68:	mov	r0, r4
   15d6c:	ble	15e1c <__assert_fail@plt+0x4b74>
   15d70:	ldrd	r4, [sp]
   15d74:	ldr	r6, [sp, #8]
   15d78:	ldr	lr, [sp, #12]
   15d7c:	add	sp, sp, #16
   15d80:	b	156a4 <__assert_fail@plt+0x43fc>
   15d84:	mov	lr, r3
   15d88:	str	lr, [r4, #28]
   15d8c:	str	lr, [r4, #32]
   15d90:	mov	r0, r5
   15d94:	ldrd	r4, [sp]
   15d98:	ldr	r6, [sp, #8]
   15d9c:	add	sp, sp, #12
   15da0:	pop	{pc}		; (ldr pc, [sp], #4)
   15da4:	cmp	r2, #1
   15da8:	bgt	15e10 <__assert_fail@plt+0x4b68>
   15dac:	ldr	r1, [r4, #64]	; 0x40
   15db0:	cmp	r1, #0
   15db4:	beq	15d90 <__assert_fail@plt+0x4ae8>
   15db8:	ldr	r3, [r4, #28]
   15dbc:	ldr	lr, [r4, #36]	; 0x24
   15dc0:	ldr	r2, [r4, #48]	; 0x30
   15dc4:	cmp	lr, r2
   15dc8:	movge	lr, r2
   15dcc:	cmp	lr, r3
   15dd0:	bgt	15ddc <__assert_fail@plt+0x4b34>
   15dd4:	b	15d84 <__assert_fail@plt+0x4adc>
   15dd8:	ldr	r1, [r4, #64]	; 0x40
   15ddc:	ldr	r2, [r4]
   15de0:	ldr	r0, [r4, #4]
   15de4:	ldr	ip, [r4, #24]
   15de8:	add	r2, r2, r3
   15dec:	ldrb	r2, [r2, ip]
   15df0:	ldrb	r2, [r1, r2]
   15df4:	strb	r2, [r0, r3]
   15df8:	add	r3, r3, #1
   15dfc:	cmp	lr, r3
   15e00:	bne	15dd8 <__assert_fail@plt+0x4b30>
   15e04:	str	lr, [r4, #28]
   15e08:	str	lr, [r4, #32]
   15e0c:	b	15d90 <__assert_fail@plt+0x4ae8>
   15e10:	mov	r0, r4
   15e14:	bl	15504 <__assert_fail@plt+0x425c>
   15e18:	b	15d90 <__assert_fail@plt+0x4ae8>
   15e1c:	bl	15c64 <__assert_fail@plt+0x49bc>
   15e20:	b	15d90 <__assert_fail@plt+0x4ae8>
   15e24:	mov	r5, #12
   15e28:	b	15d90 <__assert_fail@plt+0x4ae8>
   15e2c:	str	r4, [sp, #-8]!
   15e30:	mov	r4, r0
   15e34:	ldr	r0, [r0]
   15e38:	str	lr, [sp, #4]
   15e3c:	bl	24628 <__assert_fail@plt+0x13380>
   15e40:	ldr	r0, [r4, #4]
   15e44:	bl	24628 <__assert_fail@plt+0x13380>
   15e48:	ldr	r0, [r4, #8]
   15e4c:	bl	24628 <__assert_fail@plt+0x13380>
   15e50:	ldr	r0, [r4, #12]
   15e54:	bl	24628 <__assert_fail@plt+0x13380>
   15e58:	mov	r0, r4
   15e5c:	ldr	r4, [sp]
   15e60:	ldr	lr, [sp, #4]
   15e64:	add	sp, sp, #8
   15e68:	b	24628 <__assert_fail@plt+0x13380>
   15e6c:	ldr	r2, [r0, #4]
   15e70:	mov	r3, #255	; 0xff
   15e74:	movt	r3, #4
   15e78:	and	r3, r3, r2
   15e7c:	cmp	r3, #6
   15e80:	beq	15e90 <__assert_fail@plt+0x4be8>
   15e84:	cmp	r3, #3
   15e88:	beq	15e98 <__assert_fail@plt+0x4bf0>
   15e8c:	bx	lr
   15e90:	ldr	r0, [r0]
   15e94:	b	15e2c <__assert_fail@plt+0x4b84>
   15e98:	ldr	r0, [r0]
   15e9c:	b	24628 <__assert_fail@plt+0x13380>
   15ea0:	add	r0, r1, #20
   15ea4:	str	r4, [sp, #-8]!
   15ea8:	str	lr, [sp, #4]
   15eac:	bl	15e6c <__assert_fail@plt+0x4bc4>
   15eb0:	ldr	r4, [sp]
   15eb4:	add	sp, sp, #4
   15eb8:	mov	r0, #0
   15ebc:	pop	{pc}		; (ldr pc, [sp], #4)
   15ec0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15ec4:	mov	r4, r0
   15ec8:	ldr	ip, [r0, #8]
   15ecc:	strd	r6, [sp, #8]
   15ed0:	ldr	r6, [r0, #4]
   15ed4:	strd	r8, [sp, #16]
   15ed8:	str	sl, [sp, #24]
   15edc:	str	lr, [sp, #28]
   15ee0:	sub	sp, sp, #8
   15ee4:	add	r3, sp, #8
   15ee8:	cmp	ip, r6
   15eec:	stmdb	r3, {r1, r2}
   15ef0:	ldrb	r5, [sp, #4]
   15ef4:	bcs	15fc4 <__assert_fail@plt+0x4d1c>
   15ef8:	ldr	r7, [r0, #12]
   15efc:	ldr	r6, [r0, #20]
   15f00:	lsl	r0, ip, #3
   15f04:	cmp	r5, #5
   15f08:	ldr	lr, [r4]
   15f0c:	ldrd	r2, [sp]
   15f10:	add	r1, lr, r0
   15f14:	strd	r2, [lr, r0]
   15f18:	ldr	r3, [r1, #4]
   15f1c:	bfc	r3, #8, #10
   15f20:	str	r3, [r1, #4]
   15f24:	beq	15fb0 <__assert_fail@plt+0x4d08>
   15f28:	sub	r5, r5, #6
   15f2c:	clz	r5, r5
   15f30:	lsr	r5, r5, #5
   15f34:	ldrb	r3, [r1, #6]
   15f38:	mvn	r0, #0
   15f3c:	mov	r2, #0
   15f40:	bfi	r3, r5, #4, #1
   15f44:	strb	r3, [r1, #6]
   15f48:	str	r0, [r7, ip, lsl #2]
   15f4c:	ldr	r3, [r4, #8]
   15f50:	add	r3, r3, r3, lsl #1
   15f54:	lsl	r3, r3, #2
   15f58:	add	r1, r6, r3
   15f5c:	str	r2, [r6, r3]
   15f60:	str	r2, [r1, #4]
   15f64:	str	r2, [r1, #8]
   15f68:	ldr	r3, [r4, #8]
   15f6c:	ldr	r0, [r4, #24]
   15f70:	add	r3, r3, r3, lsl #1
   15f74:	lsl	r3, r3, #2
   15f78:	add	r1, r0, r3
   15f7c:	str	r2, [r0, r3]
   15f80:	str	r2, [r1, #4]
   15f84:	str	r2, [r1, #8]
   15f88:	ldr	r0, [r4, #8]
   15f8c:	add	r3, r0, #1
   15f90:	str	r3, [r4, #8]
   15f94:	add	sp, sp, #8
   15f98:	ldrd	r4, [sp]
   15f9c:	ldrd	r6, [sp, #8]
   15fa0:	ldrd	r8, [sp, #16]
   15fa4:	ldr	sl, [sp, #24]
   15fa8:	add	sp, sp, #28
   15fac:	pop	{pc}		; (ldr pc, [sp], #4)
   15fb0:	ldr	r5, [r4, #92]	; 0x5c
   15fb4:	cmp	r5, #1
   15fb8:	movle	r5, #0
   15fbc:	movgt	r5, #1
   15fc0:	b	15f34 <__assert_fail@plt+0x4c8c>
   15fc4:	lsl	r9, r6, #1
   15fc8:	movw	r3, #21845	; 0x5555
   15fcc:	movt	r3, #5461	; 0x1555
   15fd0:	cmp	r9, r3
   15fd4:	bhi	16090 <__assert_fail@plt+0x4de8>
   15fd8:	lsl	r1, r6, #4
   15fdc:	ldr	r0, [r0]
   15fe0:	bl	2447c <__assert_fail@plt+0x131d4>
   15fe4:	cmp	r0, #0
   15fe8:	beq	16090 <__assert_fail@plt+0x4de8>
   15fec:	lsl	r8, r6, #3
   15ff0:	str	r0, [r4]
   15ff4:	add	r6, r9, r6
   15ff8:	ldr	r0, [r4, #12]
   15ffc:	mov	r1, r8
   16000:	bl	2447c <__assert_fail@plt+0x131d4>
   16004:	mov	r7, r0
   16008:	mov	r1, r8
   1600c:	lsl	r8, r6, #3
   16010:	ldr	r0, [r4, #16]
   16014:	bl	2447c <__assert_fail@plt+0x131d4>
   16018:	mov	sl, r0
   1601c:	mov	r1, r8
   16020:	ldr	r0, [r4, #20]
   16024:	bl	2447c <__assert_fail@plt+0x131d4>
   16028:	mov	r6, r0
   1602c:	mov	r1, r8
   16030:	ldr	r0, [r4, #24]
   16034:	bl	2447c <__assert_fail@plt+0x131d4>
   16038:	cmp	sl, #0
   1603c:	cmpne	r7, #0
   16040:	mov	r8, r0
   16044:	beq	16070 <__assert_fail@plt+0x4dc8>
   16048:	cmp	r0, #0
   1604c:	cmpne	r6, #0
   16050:	beq	16070 <__assert_fail@plt+0x4dc8>
   16054:	str	r9, [r4, #4]
   16058:	str	r7, [r4, #12]
   1605c:	str	sl, [r4, #16]
   16060:	str	r6, [r4, #20]
   16064:	str	r0, [r4, #24]
   16068:	ldr	ip, [r4, #8]
   1606c:	b	15f00 <__assert_fail@plt+0x4c58>
   16070:	mov	r0, r7
   16074:	bl	24628 <__assert_fail@plt+0x13380>
   16078:	mov	r0, sl
   1607c:	bl	24628 <__assert_fail@plt+0x13380>
   16080:	mov	r0, r6
   16084:	bl	24628 <__assert_fail@plt+0x13380>
   16088:	mov	r0, r8
   1608c:	bl	24628 <__assert_fail@plt+0x13380>
   16090:	mvn	r0, #0
   16094:	b	15f94 <__assert_fail@plt+0x4cec>
   16098:	ldr	r3, [r0]
   1609c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   160a0:	mov	r4, r2
   160a4:	mov	r5, r0
   160a8:	strd	r6, [sp, #8]
   160ac:	lsl	r7, r1, #3
   160b0:	mov	r6, r1
   160b4:	str	r8, [sp, #16]
   160b8:	str	lr, [sp, #20]
   160bc:	add	r3, r3, r7
   160c0:	ldm	r3, {r1, r2}
   160c4:	bl	15ec0 <__assert_fail@plt+0x4c18>
   160c8:	cmn	r0, #1
   160cc:	beq	16118 <__assert_fail@plt+0x4e70>
   160d0:	ldr	r1, [r5]
   160d4:	ubfx	r2, r4, #0, #10
   160d8:	add	r3, r1, r0, lsl #3
   160dc:	add	r7, r1, r7
   160e0:	ldr	ip, [r3, #4]
   160e4:	bfi	ip, r2, #8, #10
   160e8:	mov	r1, ip
   160ec:	str	ip, [r3, #4]
   160f0:	ldr	ip, [r7, #4]
   160f4:	ubfx	ip, ip, #8, #10
   160f8:	orr	r2, r2, ip
   160fc:	bfi	r1, r2, #8, #10
   16100:	ubfx	r2, r1, #16, #8
   16104:	str	r1, [r3, #4]
   16108:	orr	r2, r2, #4
   1610c:	strb	r2, [r3, #6]
   16110:	ldr	r3, [r5, #16]
   16114:	str	r6, [r3, r0, lsl #2]
   16118:	ldrd	r4, [sp]
   1611c:	ldrd	r6, [sp, #8]
   16120:	ldr	r8, [sp, #16]
   16124:	add	sp, sp, #20
   16128:	pop	{pc}		; (ldr pc, [sp], #4)
   1612c:	str	r4, [sp, #-8]!
   16130:	mov	r4, r0
   16134:	ldr	r0, [r0, #24]
   16138:	str	lr, [sp, #4]
   1613c:	bl	24628 <__assert_fail@plt+0x13380>
   16140:	ldr	r0, [r4, #36]	; 0x24
   16144:	bl	24628 <__assert_fail@plt+0x13380>
   16148:	ldr	r3, [r4, #40]	; 0x28
   1614c:	add	r2, r4, #4
   16150:	cmp	r3, r2
   16154:	beq	16168 <__assert_fail@plt+0x4ec0>
   16158:	ldr	r0, [r3, #8]
   1615c:	bl	24628 <__assert_fail@plt+0x13380>
   16160:	ldr	r0, [r4, #40]	; 0x28
   16164:	bl	24628 <__assert_fail@plt+0x13380>
   16168:	ldr	r0, [r4, #12]
   1616c:	bl	24628 <__assert_fail@plt+0x13380>
   16170:	ldr	r0, [r4, #48]	; 0x30
   16174:	bl	24628 <__assert_fail@plt+0x13380>
   16178:	ldr	r0, [r4, #44]	; 0x2c
   1617c:	bl	24628 <__assert_fail@plt+0x13380>
   16180:	mov	r0, r4
   16184:	ldr	r4, [sp]
   16188:	ldr	lr, [sp, #4]
   1618c:	add	sp, sp, #8
   16190:	b	24628 <__assert_fail@plt+0x13380>
   16194:	str	r4, [sp, #-8]!
   16198:	mov	r4, r0
   1619c:	ldr	r0, [r0, #8]
   161a0:	str	lr, [sp, #4]
   161a4:	bl	24628 <__assert_fail@plt+0x13380>
   161a8:	ldr	r0, [r4, #12]
   161ac:	bl	24628 <__assert_fail@plt+0x13380>
   161b0:	ldrb	r3, [r4, #75]	; 0x4b
   161b4:	cmp	r3, #0
   161b8:	bne	161c8 <__assert_fail@plt+0x4f20>
   161bc:	ldr	r4, [sp]
   161c0:	add	sp, sp, #4
   161c4:	pop	{pc}		; (ldr pc, [sp], #4)
   161c8:	ldr	r0, [r4, #4]
   161cc:	ldr	r4, [sp]
   161d0:	ldr	lr, [sp, #4]
   161d4:	add	sp, sp, #8
   161d8:	b	24628 <__assert_fail@plt+0x13380>
   161dc:	ldr	r3, [r0, #124]	; 0x7c
   161e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   161e4:	strd	r6, [sp, #8]
   161e8:	str	r8, [sp, #16]
   161ec:	mov	r8, r0
   161f0:	str	lr, [sp, #20]
   161f4:	cmp	r3, #0
   161f8:	ble	1627c <__assert_fail@plt+0x4fd4>
   161fc:	mov	r7, #0
   16200:	ldr	r3, [r8, #132]	; 0x84
   16204:	ldr	r6, [r3, r7, lsl #2]
   16208:	ldr	r3, [r6, #16]
   1620c:	cmp	r3, #0
   16210:	ble	16240 <__assert_fail@plt+0x4f98>
   16214:	mov	r4, #0
   16218:	ldr	r3, [r6, #20]
   1621c:	ldr	r5, [r3, r4, lsl #2]
   16220:	add	r4, r4, #1
   16224:	ldr	r0, [r5, #16]
   16228:	bl	24628 <__assert_fail@plt+0x13380>
   1622c:	mov	r0, r5
   16230:	bl	24628 <__assert_fail@plt+0x13380>
   16234:	ldr	r3, [r6, #16]
   16238:	cmp	r3, r4
   1623c:	bgt	16218 <__assert_fail@plt+0x4f70>
   16240:	ldr	r0, [r6, #20]
   16244:	bl	24628 <__assert_fail@plt+0x13380>
   16248:	ldr	r3, [r6, #8]
   1624c:	cmp	r3, #0
   16250:	beq	16264 <__assert_fail@plt+0x4fbc>
   16254:	ldr	r0, [r3, #8]
   16258:	bl	24628 <__assert_fail@plt+0x13380>
   1625c:	ldr	r0, [r6, #8]
   16260:	bl	24628 <__assert_fail@plt+0x13380>
   16264:	mov	r0, r6
   16268:	add	r7, r7, #1
   1626c:	bl	24628 <__assert_fail@plt+0x13380>
   16270:	ldr	r3, [r8, #124]	; 0x7c
   16274:	cmp	r3, r7
   16278:	bgt	16200 <__assert_fail@plt+0x4f58>
   1627c:	mov	r3, #0
   16280:	ldrd	r4, [sp]
   16284:	ldrd	r6, [sp, #8]
   16288:	str	r3, [r8, #108]	; 0x6c
   1628c:	str	r3, [r8, #124]	; 0x7c
   16290:	ldr	r8, [sp, #16]
   16294:	add	sp, sp, #20
   16298:	pop	{pc}		; (ldr pc, [sp], #4)
   1629c:	ldrb	r3, [r1, #24]
   162a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   162a4:	ldr	r2, [r1, #28]
   162a8:	strd	r6, [sp, #8]
   162ac:	str	r8, [sp, #16]
   162b0:	sub	r3, r3, #2
   162b4:	str	lr, [sp, #20]
   162b8:	cmp	r3, #14
   162bc:	ldrls	pc, [pc, r3, lsl #2]
   162c0:	b	16408 <__assert_fail@plt+0x5160>
   162c4:	andeq	r6, r1, ip, lsl r3
   162c8:	andeq	r6, r1, r8, lsl #8
   162cc:	andeq	r6, r1, r0, lsl #6
   162d0:	andeq	r6, r1, r8, lsl #8
   162d4:	andeq	r6, r1, r8, lsl #8
   162d8:	andeq	r6, r1, r8, lsl #8
   162dc:			; <UNDEFINED> instruction: 0x000163b8
   162e0:			; <UNDEFINED> instruction: 0x000163b8
   162e4:	andeq	r6, r1, r8, lsr r3
   162e8:	andeq	r6, r1, r8, lsr r3
   162ec:			; <UNDEFINED> instruction: 0x000163b8
   162f0:	andeq	r6, r1, r8, lsl #8
   162f4:	andeq	r6, r1, r8, lsl #8
   162f8:	andeq	r6, r1, r8, lsl #8
   162fc:	andeq	r6, r1, ip, lsl r3
   16300:	ldr	ip, [r1, #16]
   16304:	ldr	r3, [r0, #12]
   16308:	ldr	r4, [ip, #28]
   1630c:	str	r4, [r3, r2, lsl #2]
   16310:	ldrb	r3, [r1, #24]
   16314:	cmp	r3, #4
   16318:	beq	16434 <__assert_fail@plt+0x518c>
   1631c:	mov	r3, #0
   16320:	ldrd	r4, [sp]
   16324:	mov	r0, r3
   16328:	ldrd	r6, [sp, #8]
   1632c:	ldr	r8, [sp, #16]
   16330:	add	sp, sp, #20
   16334:	pop	{pc}		; (ldr pc, [sp], #4)
   16338:	ldrb	r3, [r0, #88]	; 0x58
   1633c:	add	r2, r2, r2, lsl #1
   16340:	mov	r6, #2
   16344:	lsl	r2, r2, r6
   16348:	orr	r3, r3, #1
   1634c:	strb	r3, [r0, #88]	; 0x58
   16350:	ldr	r3, [r1, #4]
   16354:	cmp	r3, #0
   16358:	ldrne	r3, [r3, #12]
   1635c:	ldreq	r3, [r1, #16]
   16360:	ldr	r5, [r3, #28]
   16364:	ldr	r3, [r1, #8]
   16368:	cmp	r3, #0
   1636c:	ldrne	r3, [r3, #12]
   16370:	ldreq	r3, [r1, #16]
   16374:	ldr	r7, [r3, #28]
   16378:	ldr	r3, [r0, #20]
   1637c:	mov	r0, #8
   16380:	str	r6, [r3, r2]
   16384:	add	r4, r3, r2
   16388:	bl	24440 <__assert_fail@plt+0x13198>
   1638c:	cmp	r0, #0
   16390:	str	r0, [r4, #8]
   16394:	beq	1647c <__assert_fail@plt+0x51d4>
   16398:	cmp	r5, r7
   1639c:	beq	16420 <__assert_fail@plt+0x5178>
   163a0:	mov	r3, #0
   163a4:	str	r6, [r4, #4]
   163a8:	stmlt	r0, {r5, r7}
   163ac:	strge	r7, [r0]
   163b0:	strge	r5, [r0, #4]
   163b4:	b	16320 <__assert_fail@plt+0x5078>
   163b8:	ldr	r5, [r0, #20]
   163bc:	add	r2, r2, r2, lsl #1
   163c0:	mov	r3, #1
   163c4:	mov	r0, #4
   163c8:	ldr	r1, [r1, #16]
   163cc:	lsl	r4, r2, #2
   163d0:	add	r6, r5, r4
   163d4:	ldr	r7, [r1, #28]
   163d8:	str	r3, [r5, r4]
   163dc:	str	r3, [r6, #4]
   163e0:	bl	24440 <__assert_fail@plt+0x13198>
   163e4:	cmp	r0, #0
   163e8:	str	r0, [r6, #8]
   163ec:	moveq	r3, #12
   163f0:	streq	r0, [r6, #4]
   163f4:	streq	r0, [r5, r4]
   163f8:	beq	16320 <__assert_fail@plt+0x5078>
   163fc:	mov	r3, #0
   16400:	str	r7, [r0]
   16404:	b	16320 <__assert_fail@plt+0x5078>
   16408:	ldr	ip, [r1, #16]
   1640c:	mov	r3, #0
   16410:	ldr	r1, [r0, #12]
   16414:	ldr	r0, [ip, #28]
   16418:	str	r0, [r1, r2, lsl #2]
   1641c:	b	16320 <__assert_fail@plt+0x5078>
   16420:	mov	r2, #1
   16424:	mov	r3, #0
   16428:	str	r2, [r4, #4]
   1642c:	str	r5, [r0]
   16430:	b	16320 <__assert_fail@plt+0x5078>
   16434:	ldr	r6, [r0, #20]
   16438:	add	r2, r2, r2, lsl #1
   1643c:	mov	r1, #1
   16440:	mov	r0, r3
   16444:	lsl	r5, r2, #2
   16448:	add	r7, r6, r5
   1644c:	str	r1, [r6, r5]
   16450:	str	r1, [r7, #4]
   16454:	bl	24440 <__assert_fail@plt+0x13198>
   16458:	cmp	r0, #0
   1645c:	str	r0, [r7, #8]
   16460:	moveq	r3, #12
   16464:	streq	r0, [r7, #4]
   16468:	streq	r0, [r6, r5]
   1646c:	beq	16320 <__assert_fail@plt+0x5078>
   16470:	mov	r3, #0
   16474:	str	r4, [r0]
   16478:	b	16320 <__assert_fail@plt+0x5078>
   1647c:	mov	r3, #12
   16480:	b	16320 <__assert_fail@plt+0x5078>
   16484:	ldr	r3, [r0]
   16488:	strd	r4, [sp, #-16]!
   1648c:	mov	r4, r0
   16490:	str	r6, [sp, #8]
   16494:	mov	r6, r1
   16498:	str	lr, [sp, #12]
   1649c:	cmp	r3, #0
   164a0:	beq	164d8 <__assert_fail@plt+0x5230>
   164a4:	ldr	r1, [r0, #4]
   164a8:	ldr	r0, [r0, #8]
   164ac:	cmp	r1, #0
   164b0:	bne	1651c <__assert_fail@plt+0x5274>
   164b4:	str	r6, [r0]
   164b8:	mov	r0, #1
   164bc:	ldr	r3, [r4, #4]
   164c0:	add	r3, r3, r0
   164c4:	str	r3, [r4, #4]
   164c8:	ldrd	r4, [sp]
   164cc:	ldr	r6, [sp, #8]
   164d0:	add	sp, sp, #12
   164d4:	pop	{pc}		; (ldr pc, [sp], #4)
   164d8:	mov	r5, #1
   164dc:	mov	r0, #4
   164e0:	str	r5, [r4]
   164e4:	str	r5, [r4, #4]
   164e8:	bl	24440 <__assert_fail@plt+0x13198>
   164ec:	mov	r3, r0
   164f0:	cmp	r0, #0
   164f4:	str	r0, [r4, #8]
   164f8:	streq	r3, [r4]
   164fc:	streq	r3, [r4, #4]
   16500:	beq	164c8 <__assert_fail@plt+0x5220>
   16504:	mov	r0, r5
   16508:	str	r6, [r3]
   1650c:	ldrd	r4, [sp]
   16510:	ldr	r6, [sp, #8]
   16514:	add	sp, sp, #12
   16518:	pop	{pc}		; (ldr pc, [sp], #4)
   1651c:	cmp	r3, r1
   16520:	beq	165a4 <__assert_fail@plt+0x52fc>
   16524:	ldr	r2, [r0]
   16528:	mov	r3, r1
   1652c:	cmp	r2, r6
   16530:	ble	16558 <__assert_fail@plt+0x52b0>
   16534:	cmp	r1, #0
   16538:	ble	1658c <__assert_fail@plt+0x52e4>
   1653c:	add	r1, r0, r1, lsl #2
   16540:	ldr	r3, [r1, #-4]
   16544:	str	r3, [r1], #-4
   16548:	cmp	r1, r0
   1654c:	bne	16540 <__assert_fail@plt+0x5298>
   16550:	mov	r3, #0
   16554:	b	1658c <__assert_fail@plt+0x52e4>
   16558:	sub	r3, r1, #-1073741823	; 0xc0000001
   1655c:	ldr	r2, [r0, r3, lsl #2]
   16560:	lsl	r3, r3, #2
   16564:	cmp	r6, r2
   16568:	bge	16588 <__assert_fail@plt+0x52e0>
   1656c:	add	r3, r3, #4
   16570:	add	r3, r0, r3
   16574:	str	r2, [r3], #-4
   16578:	sub	r1, r1, #1
   1657c:	ldr	r2, [r3, #-4]
   16580:	cmp	r2, r6
   16584:	bgt	16574 <__assert_fail@plt+0x52cc>
   16588:	mov	r3, r1
   1658c:	str	r6, [r0, r3, lsl #2]
   16590:	mov	r0, #1
   16594:	ldr	r3, [r4, #4]
   16598:	add	r3, r3, r0
   1659c:	str	r3, [r4, #4]
   165a0:	b	164c8 <__assert_fail@plt+0x5220>
   165a4:	lsl	r3, r1, #1
   165a8:	lsl	r1, r1, #3
   165ac:	str	r3, [r4]
   165b0:	bl	2447c <__assert_fail@plt+0x131d4>
   165b4:	cmp	r0, #0
   165b8:	beq	164c8 <__assert_fail@plt+0x5220>
   165bc:	str	r0, [r4, #8]
   165c0:	ldr	r1, [r4, #4]
   165c4:	b	16524 <__assert_fail@plt+0x527c>
   165c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   165cc:	mov	r4, r0
   165d0:	mov	r5, r2
   165d4:	strd	r6, [sp, #8]
   165d8:	mov	r7, r1
   165dc:	strd	r8, [sp, #16]
   165e0:	strd	sl, [sp, #24]
   165e4:	mov	sl, #0
   165e8:	str	lr, [sp, #32]
   165ec:	sub	sp, sp, #20
   165f0:	ldr	r9, [sp, #56]	; 0x38
   165f4:	str	r3, [sp, #12]
   165f8:	ldr	r2, [r4]
   165fc:	mov	r6, r5
   16600:	ldr	r1, [r4, #20]
   16604:	add	ip, r2, r7, lsl #3
   16608:	ldrb	r3, [ip, #4]
   1660c:	cmp	r3, #4
   16610:	beq	167a0 <__assert_fail@plt+0x54f8>
   16614:	add	r8, r7, r7, lsl #1
   16618:	lsl	r8, r8, #2
   1661c:	add	r3, r1, r8
   16620:	ldr	r0, [r3, #4]
   16624:	cmp	r0, #0
   16628:	beq	16858 <__assert_fail@plt+0x55b0>
   1662c:	ldr	r3, [r3, #8]
   16630:	add	r6, r5, r5, lsl #1
   16634:	cmp	r0, #1
   16638:	lsl	r6, r6, #2
   1663c:	add	r0, r1, r6
   16640:	ldr	fp, [r3]
   16644:	beq	16734 <__assert_fail@plt+0x548c>
   16648:	ldr	r5, [r4, #8]
   1664c:	sub	r1, r5, #1
   16650:	add	ip, r2, r1, lsl #3
   16654:	cmp	r1, #0
   16658:	movle	lr, #0
   1665c:	movgt	lr, #1
   16660:	ldrb	r7, [ip, #6]
   16664:	str	sl, [r0, #4]
   16668:	ands	r3, lr, r7, lsr #2
   1666c:	beq	16800 <__assert_fail@plt+0x5558>
   16670:	ldr	lr, [r4, #16]
   16674:	add	r2, r2, r5, lsl #3
   16678:	sub	r2, r2, ip
   1667c:	sub	r2, r2, #16
   16680:	add	lr, lr, r5, lsl #2
   16684:	b	166a8 <__assert_fail@plt+0x5400>
   16688:	add	ip, ip, r2
   1668c:	sub	r1, r1, #1
   16690:	ldrb	r7, [ip, #6]
   16694:	cmp	r1, #0
   16698:	movle	r5, #0
   1669c:	movgt	r5, #1
   166a0:	ands	r3, r5, r7, lsr #2
   166a4:	beq	16800 <__assert_fail@plt+0x5558>
   166a8:	ldr	r5, [lr, #-4]!
   166ac:	cmp	r5, fp
   166b0:	bne	16688 <__assert_fail@plt+0x53e0>
   166b4:	ldr	r7, [ip, #4]
   166b8:	ubfx	r7, r7, #8, #10
   166bc:	cmp	r9, r7
   166c0:	bne	16688 <__assert_fail@plt+0x53e0>
   166c4:	bl	16484 <__assert_fail@plt+0x51dc>
   166c8:	cmp	r0, #0
   166cc:	beq	16714 <__assert_fail@plt+0x546c>
   166d0:	ldr	r3, [r4, #20]
   166d4:	mov	r2, r9
   166d8:	mov	r0, r4
   166dc:	add	r8, r3, r8
   166e0:	ldr	r3, [r8, #8]
   166e4:	ldr	r7, [r3, #4]
   166e8:	mov	r1, r7
   166ec:	bl	16098 <__assert_fail@plt+0x4df0>
   166f0:	cmn	r0, #1
   166f4:	mov	r5, r0
   166f8:	beq	16714 <__assert_fail@plt+0x546c>
   166fc:	mov	r1, r0
   16700:	ldr	r0, [r4, #20]
   16704:	add	r0, r0, r6
   16708:	bl	16484 <__assert_fail@plt+0x51dc>
   1670c:	cmp	r0, #0
   16710:	bne	165f8 <__assert_fail@plt+0x5350>
   16714:	mov	r0, #12
   16718:	add	sp, sp, #20
   1671c:	ldrd	r4, [sp]
   16720:	ldrd	r6, [sp, #8]
   16724:	ldrd	r8, [sp, #16]
   16728:	ldrd	sl, [sp, #24]
   1672c:	add	sp, sp, #32
   16730:	pop	{pc}		; (ldr pc, [sp], #4)
   16734:	ldr	r2, [sp, #12]
   16738:	cmp	r7, r5
   1673c:	str	sl, [r0, #4]
   16740:	sub	r2, r7, r2
   16744:	clz	r2, r2
   16748:	lsr	r2, r2, #5
   1674c:	moveq	r2, #0
   16750:	cmp	r2, #0
   16754:	bne	16868 <__assert_fail@plt+0x55c0>
   16758:	ldr	r2, [ip, #4]
   1675c:	mov	r1, fp
   16760:	mov	r0, r4
   16764:	ubfx	r2, r2, #8, #10
   16768:	orr	r9, r9, r2
   1676c:	mov	r2, r9
   16770:	bl	16098 <__assert_fail@plt+0x4df0>
   16774:	cmn	r0, #1
   16778:	mov	r5, r0
   1677c:	beq	16714 <__assert_fail@plt+0x546c>
   16780:	mov	r1, r0
   16784:	ldr	r0, [r4, #20]
   16788:	add	r0, r0, r6
   1678c:	bl	16484 <__assert_fail@plt+0x51dc>
   16790:	cmp	r0, #0
   16794:	beq	16714 <__assert_fail@plt+0x546c>
   16798:	mov	r7, fp
   1679c:	b	165f8 <__assert_fail@plt+0x5350>
   167a0:	ldr	ip, [r4, #12]
   167a4:	add	r5, r5, r5, lsl #1
   167a8:	mov	r2, r9
   167ac:	lsl	fp, r7, #2
   167b0:	mov	r0, r4
   167b4:	lsl	r8, r5, #2
   167b8:	add	r1, r1, r8
   167bc:	ldr	r7, [ip, r7, lsl #2]
   167c0:	str	sl, [r1, #4]
   167c4:	mov	r1, r7
   167c8:	bl	16098 <__assert_fail@plt+0x4df0>
   167cc:	cmn	r0, #1
   167d0:	mov	r5, r0
   167d4:	beq	16714 <__assert_fail@plt+0x546c>
   167d8:	ldr	r2, [r4, #12]
   167dc:	mov	r1, r0
   167e0:	ldr	r0, [r4, #20]
   167e4:	ldr	r3, [r2, fp]
   167e8:	add	r0, r0, r8
   167ec:	str	r3, [r2, r6, lsl #2]
   167f0:	bl	16484 <__assert_fail@plt+0x51dc>
   167f4:	cmp	r0, #0
   167f8:	bne	165f8 <__assert_fail@plt+0x5350>
   167fc:	b	16714 <__assert_fail@plt+0x546c>
   16800:	mov	r2, r9
   16804:	mov	r1, fp
   16808:	mov	r0, r4
   1680c:	bl	16098 <__assert_fail@plt+0x4df0>
   16810:	cmn	r0, #1
   16814:	mov	r5, r0
   16818:	beq	16714 <__assert_fail@plt+0x546c>
   1681c:	ldr	r0, [r4, #20]
   16820:	mov	r1, r5
   16824:	add	r0, r0, r6
   16828:	bl	16484 <__assert_fail@plt+0x51dc>
   1682c:	cmp	r0, #0
   16830:	beq	16714 <__assert_fail@plt+0x546c>
   16834:	mov	r2, r5
   16838:	mov	r1, fp
   1683c:	str	r9, [sp]
   16840:	mov	r0, r4
   16844:	ldr	r3, [sp, #12]
   16848:	bl	165c8 <__assert_fail@plt+0x5320>
   1684c:	cmp	r0, #0
   16850:	beq	166d0 <__assert_fail@plt+0x5428>
   16854:	b	16718 <__assert_fail@plt+0x5470>
   16858:	ldr	r3, [r4, #12]
   1685c:	ldr	r2, [r3, r7, lsl #2]
   16860:	str	r2, [r3, r5, lsl #2]
   16864:	b	16718 <__assert_fail@plt+0x5470>
   16868:	mov	r1, fp
   1686c:	bl	16484 <__assert_fail@plt+0x51dc>
   16870:	cmp	r0, #0
   16874:	movne	r0, #0
   16878:	bne	16718 <__assert_fail@plt+0x5470>
   1687c:	b	16714 <__assert_fail@plt+0x546c>
   16880:	ldr	r3, [r0, #36]	; 0x24
   16884:	strd	r4, [sp, #-16]!
   16888:	mov	r4, r0
   1688c:	mov	r5, r1
   16890:	str	r6, [sp, #8]
   16894:	str	lr, [sp, #12]
   16898:	ldr	r6, [r0, #104]	; 0x68
   1689c:	cmp	r3, r1
   168a0:	bgt	168e0 <__assert_fail@plt+0x5638>
   168a4:	ldr	r2, [r0, #48]	; 0x30
   168a8:	cmp	r3, r2
   168ac:	bge	168e0 <__assert_fail@plt+0x5638>
   168b0:	add	r1, r5, #1
   168b4:	mov	r0, r4
   168b8:	bl	15cec <__assert_fail@plt+0x4a44>
   168bc:	cmp	r0, #0
   168c0:	bne	168d0 <__assert_fail@plt+0x5628>
   168c4:	cmp	r6, r5
   168c8:	movge	r0, #0
   168cc:	blt	168fc <__assert_fail@plt+0x5654>
   168d0:	ldrd	r4, [sp]
   168d4:	ldr	r6, [sp, #8]
   168d8:	add	sp, sp, #12
   168dc:	pop	{pc}		; (ldr pc, [sp], #4)
   168e0:	ldr	r3, [r4, #28]
   168e4:	cmp	r3, r5
   168e8:	bgt	168c4 <__assert_fail@plt+0x561c>
   168ec:	ldr	r2, [r4, #48]	; 0x30
   168f0:	cmp	r3, r2
   168f4:	bge	168c4 <__assert_fail@plt+0x561c>
   168f8:	b	168b0 <__assert_fail@plt+0x5608>
   168fc:	ldr	r3, [r4, #100]	; 0x64
   16900:	sub	r2, r5, r6
   16904:	add	r0, r6, #1
   16908:	lsl	r2, r2, #2
   1690c:	mov	r1, #0
   16910:	add	r0, r3, r0, lsl #2
   16914:	bl	111c4 <memset@plt>
   16918:	str	r5, [r4, #104]	; 0x68
   1691c:	mov	r0, #0
   16920:	ldrd	r4, [sp]
   16924:	ldr	r6, [sp, #8]
   16928:	add	sp, sp, #12
   1692c:	pop	{pc}		; (ldr pc, [sp], #4)
   16930:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16934:	subs	r4, r0, #0
   16938:	strd	r6, [sp, #8]
   1693c:	str	r8, [sp, #16]
   16940:	str	lr, [sp, #20]
   16944:	ldr	r7, [sp, #28]
   16948:	beq	169f4 <__assert_fail@plt+0x574c>
   1694c:	ldr	ip, [r4]
   16950:	cmp	ip, #0
   16954:	beq	169f4 <__assert_fail@plt+0x574c>
   16958:	sub	ip, ip, #1
   1695c:	ldr	lr, [r4, #8]
   16960:	mov	r0, r3
   16964:	add	r5, ip, ip, lsl #1
   16968:	mov	r8, r1
   1696c:	lsl	r6, r2, #3
   16970:	lsl	r5, r5, #3
   16974:	mov	r2, r6
   16978:	ldr	r3, [lr, r5]
   1697c:	add	lr, lr, r5
   16980:	ldr	r1, [lr, #8]
   16984:	str	ip, [r4]
   16988:	str	r3, [r8]
   1698c:	bl	11038 <memcpy@plt>
   16990:	ldr	r3, [r4, #8]
   16994:	mov	r2, r6
   16998:	ldr	r0, [sp, #24]
   1699c:	add	r3, r3, r5
   169a0:	ldr	r1, [r3, #8]
   169a4:	add	r1, r1, r6
   169a8:	bl	11038 <memcpy@plt>
   169ac:	ldr	r0, [r7, #8]
   169b0:	bl	24628 <__assert_fail@plt+0x13380>
   169b4:	ldr	r3, [r4, #8]
   169b8:	add	r3, r3, r5
   169bc:	ldr	r0, [r3, #8]
   169c0:	bl	24628 <__assert_fail@plt+0x13380>
   169c4:	ldr	r3, [r4, #8]
   169c8:	add	r5, r3, r5
   169cc:	ldr	r0, [r5, #4]
   169d0:	ldrd	r2, [r5, #12]
   169d4:	strd	r2, [r7]
   169d8:	ldr	r3, [r5, #20]
   169dc:	str	r3, [r7, #8]
   169e0:	ldrd	r4, [sp]
   169e4:	ldrd	r6, [sp, #8]
   169e8:	ldr	r8, [sp, #16]
   169ec:	add	sp, sp, #20
   169f0:	pop	{pc}		; (ldr pc, [sp], #4)
   169f4:	mvn	r0, #0
   169f8:	b	169e0 <__assert_fail@plt+0x5738>
   169fc:	ldr	r3, [r0, #28]
   16a00:	add	ip, r1, #1
   16a04:	cmp	ip, r3
   16a08:	bge	16a50 <__assert_fail@plt+0x57a8>
   16a0c:	ldr	r2, [r0, #8]
   16a10:	ldr	r0, [r2, ip, lsl #2]
   16a14:	add	r2, r2, ip, lsl #2
   16a18:	cmn	r0, #1
   16a1c:	bne	16a50 <__assert_fail@plt+0x57a8>
   16a20:	sub	r0, r3, r1
   16a24:	mov	r3, #1
   16a28:	b	16a38 <__assert_fail@plt+0x5790>
   16a2c:	ldr	ip, [r2, #4]!
   16a30:	cmn	ip, #1
   16a34:	bne	16a48 <__assert_fail@plt+0x57a0>
   16a38:	add	r3, r3, #1
   16a3c:	cmp	r3, r0
   16a40:	bne	16a2c <__assert_fail@plt+0x5784>
   16a44:	bx	lr
   16a48:	mov	r0, r3
   16a4c:	bx	lr
   16a50:	mov	r0, #1
   16a54:	bx	lr
   16a58:	cmp	r0, #0
   16a5c:	ble	16ad8 <__assert_fail@plt+0x5830>
   16a60:	push	{lr}		; (str lr, [sp, #-4]!)
   16a64:	sub	ip, r0, #1
   16a68:	mov	r0, #0
   16a6c:	ldr	lr, [r1]
   16a70:	cmp	r0, ip
   16a74:	bcs	16ab0 <__assert_fail@plt+0x5808>
   16a78:	add	r1, r0, ip
   16a7c:	lsr	r1, r1, #1
   16a80:	ldr	r3, [lr, r1, lsl #2]
   16a84:	cmp	r2, r3
   16a88:	ble	16aa0 <__assert_fail@plt+0x57f8>
   16a8c:	b	16ac4 <__assert_fail@plt+0x581c>
   16a90:	ldr	ip, [lr, r3, lsl #2]
   16a94:	cmp	ip, r2
   16a98:	blt	16acc <__assert_fail@plt+0x5824>
   16a9c:	mov	r1, r3
   16aa0:	add	r3, r0, r1
   16aa4:	cmp	r0, r1
   16aa8:	lsr	r3, r3, #1
   16aac:	bcc	16a90 <__assert_fail@plt+0x57e8>
   16ab0:	ldr	r3, [lr, r0, lsl #2]
   16ab4:	cmp	r2, r3
   16ab8:	addeq	r0, r0, #1
   16abc:	movne	r0, #0
   16ac0:	pop	{pc}		; (ldr pc, [sp], #4)
   16ac4:	mov	r3, r1
   16ac8:	mov	r1, ip
   16acc:	add	r0, r3, #1
   16ad0:	mov	ip, r1
   16ad4:	b	16a70 <__assert_fail@plt+0x57c8>
   16ad8:	mov	r0, #0
   16adc:	bx	lr
   16ae0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16ae4:	mov	r5, r1
   16ae8:	mov	r4, r2
   16aec:	strd	r6, [sp, #8]
   16af0:	mov	r6, r0
   16af4:	strd	r8, [sp, #16]
   16af8:	mov	r9, r3
   16afc:	add	r8, r1, #8
   16b00:	str	lr, [sp, #24]
   16b04:	sub	sp, sp, #12
   16b08:	ldr	r7, [sp, #40]	; 0x28
   16b0c:	mov	r1, r8
   16b10:	mov	r2, r4
   16b14:	ldr	r0, [r5, #4]
   16b18:	bl	16a58 <__assert_fail@plt+0x57b0>
   16b1c:	cmp	r0, #0
   16b20:	mov	r1, r4
   16b24:	mov	r0, r5
   16b28:	bne	16bf0 <__assert_fail@plt+0x5948>
   16b2c:	ldr	r3, [r6]
   16b30:	add	r2, r3, r4, lsl #3
   16b34:	ldrb	r2, [r2, #4]
   16b38:	cmp	r2, r7
   16b3c:	bne	16b4c <__assert_fail@plt+0x58a4>
   16b40:	ldr	r3, [r3, r4, lsl #3]
   16b44:	cmp	r3, r9
   16b48:	beq	16bb8 <__assert_fail@plt+0x5910>
   16b4c:	bl	16484 <__assert_fail@plt+0x51dc>
   16b50:	cmp	r0, #0
   16b54:	add	r4, r4, r4, lsl #1
   16b58:	beq	16bd4 <__assert_fail@plt+0x592c>
   16b5c:	ldr	r3, [r6, #20]
   16b60:	lsl	r4, r4, #2
   16b64:	add	r3, r3, r4
   16b68:	ldr	r2, [r3, #4]
   16b6c:	cmp	r2, #0
   16b70:	beq	16bf0 <__assert_fail@plt+0x5948>
   16b74:	cmp	r2, #2
   16b78:	ldr	r2, [r3, #8]
   16b7c:	beq	16b88 <__assert_fail@plt+0x58e0>
   16b80:	ldr	r4, [r2]
   16b84:	b	16b0c <__assert_fail@plt+0x5864>
   16b88:	mov	r3, r9
   16b8c:	mov	r1, r5
   16b90:	ldr	r2, [r2, #4]
   16b94:	mov	r0, r6
   16b98:	str	r7, [sp]
   16b9c:	bl	16ae0 <__assert_fail@plt+0x5838>
   16ba0:	cmp	r0, #0
   16ba4:	bne	16bd8 <__assert_fail@plt+0x5930>
   16ba8:	ldr	r3, [r6, #20]
   16bac:	add	r4, r3, r4
   16bb0:	ldr	r2, [r4, #8]
   16bb4:	b	16b80 <__assert_fail@plt+0x58d8>
   16bb8:	cmp	r7, #9
   16bbc:	bne	16bf0 <__assert_fail@plt+0x5948>
   16bc0:	mov	r1, r4
   16bc4:	mov	r0, r5
   16bc8:	bl	16484 <__assert_fail@plt+0x51dc>
   16bcc:	cmp	r0, #0
   16bd0:	bne	16bf0 <__assert_fail@plt+0x5948>
   16bd4:	mov	r0, #12
   16bd8:	add	sp, sp, #12
   16bdc:	ldrd	r4, [sp]
   16be0:	ldrd	r6, [sp, #8]
   16be4:	ldrd	r8, [sp, #16]
   16be8:	add	sp, sp, #24
   16bec:	pop	{pc}		; (ldr pc, [sp], #4)
   16bf0:	mov	r0, #0
   16bf4:	b	16bd8 <__assert_fail@plt+0x5930>
   16bf8:	ldr	r3, [r0]
   16bfc:	cmp	r2, r3
   16c00:	bge	16c24 <__assert_fail@plt+0x597c>
   16c04:	ldr	r3, [r1]
   16c08:	add	r3, r3, r2, lsl #2
   16c0c:	ldr	r1, [r3, #4]
   16c10:	add	r2, r2, #1
   16c14:	str	r1, [r3], #4
   16c18:	ldr	r1, [r0]
   16c1c:	cmp	r2, r1
   16c20:	blt	16c0c <__assert_fail@plt+0x5964>
   16c24:	bx	lr
   16c28:	ldrb	r3, [r1, #24]
   16c2c:	cmp	r3, #4
   16c30:	beq	16c9c <__assert_fail@plt+0x59f4>
   16c34:	cmp	r3, #17
   16c38:	beq	16c44 <__assert_fail@plt+0x599c>
   16c3c:	mov	r0, #0
   16c40:	bx	lr
   16c44:	ldr	r3, [r1, #4]
   16c48:	cmp	r3, #0
   16c4c:	beq	16c3c <__assert_fail@plt+0x5994>
   16c50:	ldrb	r2, [r3, #24]
   16c54:	cmp	r2, #17
   16c58:	bne	16c3c <__assert_fail@plt+0x5994>
   16c5c:	ldr	r2, [r3, #4]
   16c60:	ldr	r3, [r3, #20]
   16c64:	cmp	r2, #0
   16c68:	str	r2, [r1, #4]
   16c6c:	strne	r1, [r2]
   16c70:	cmp	r3, #31
   16c74:	ldr	r1, [r1, #20]
   16c78:	ldr	r2, [r0, #132]	; 0x84
   16c7c:	ldr	r1, [r2, r1, lsl #2]
   16c80:	str	r1, [r2, r3, lsl #2]
   16c84:	bgt	16c3c <__assert_fail@plt+0x5994>
   16c88:	ldr	r2, [r0, #80]	; 0x50
   16c8c:	mov	r1, #1
   16c90:	bic	r3, r2, r1, lsl r3
   16c94:	str	r3, [r0, #80]	; 0x50
   16c98:	b	16c3c <__assert_fail@plt+0x5994>
   16c9c:	ldr	r2, [r0, #132]	; 0x84
   16ca0:	cmp	r2, #0
   16ca4:	beq	16c3c <__assert_fail@plt+0x5994>
   16ca8:	push	{lr}		; (str lr, [sp, #-4]!)
   16cac:	mov	ip, #1
   16cb0:	ldr	lr, [r1, #20]
   16cb4:	ldr	r3, [r0, #80]	; 0x50
   16cb8:	ldr	r2, [r2, lr, lsl #2]
   16cbc:	orr	r3, r3, ip, lsl r2
   16cc0:	str	r2, [r1, #20]
   16cc4:	str	r3, [r0, #80]	; 0x50
   16cc8:	mov	r0, #0
   16ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   16cd0:	ldrb	r3, [r1, #24]
   16cd4:	ldr	r2, [r1, #4]
   16cd8:	cmp	r3, #11
   16cdc:	streq	r1, [r2, #16]
   16ce0:	beq	16d00 <__assert_fail@plt+0x5a58>
   16ce4:	cmp	r3, #16
   16ce8:	bne	16d08 <__assert_fail@plt+0x5a60>
   16cec:	ldr	r3, [r1, #8]
   16cf0:	ldr	r0, [r3, #12]
   16cf4:	str	r0, [r2, #16]
   16cf8:	ldr	r2, [r1, #16]
   16cfc:	str	r2, [r3, #16]
   16d00:	mov	r0, #0
   16d04:	bx	lr
   16d08:	cmp	r2, #0
   16d0c:	mov	r0, #0
   16d10:	ldrne	r3, [r1, #16]
   16d14:	strne	r3, [r2, #16]
   16d18:	ldr	r3, [r1, #8]
   16d1c:	cmp	r3, #0
   16d20:	ldrne	r2, [r1, #16]
   16d24:	strne	r2, [r3, #16]
   16d28:	bx	lr
   16d2c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16d30:	mov	r4, #0
   16d34:	strd	r6, [sp, #8]
   16d38:	strd	r8, [sp, #16]
   16d3c:	ldr	r9, [r0, #108]	; 0x6c
   16d40:	strd	sl, [sp, #24]
   16d44:	str	lr, [sp, #32]
   16d48:	sub	sp, sp, #28
   16d4c:	ldr	r6, [sp, #64]	; 0x40
   16d50:	ldr	r7, [sp, #72]	; 0x48
   16d54:	mov	ip, r9
   16d58:	ldr	lr, [r0, #84]	; 0x54
   16d5c:	str	lr, [sp, #8]
   16d60:	cmp	r4, ip
   16d64:	bge	16dc0 <__assert_fail@plt+0x5b18>
   16d68:	add	lr, r4, ip
   16d6c:	ldr	r5, [r0, #116]	; 0x74
   16d70:	add	lr, lr, lr, lsr #31
   16d74:	asr	lr, lr, #1
   16d78:	add	r8, lr, lr, lsl #1
   16d7c:	add	r8, r5, r8, lsl #3
   16d80:	ldr	r8, [r8, #4]
   16d84:	cmp	r6, r8
   16d88:	ble	16db0 <__assert_fail@plt+0x5b08>
   16d8c:	b	16f10 <__assert_fail@plt+0x5c68>
   16d90:	asr	ip, ip, #1
   16d94:	add	r8, ip, ip, lsl #1
   16d98:	mov	sl, ip
   16d9c:	add	r8, r5, r8, lsl #3
   16da0:	ldr	r8, [r8, #4]
   16da4:	cmp	r8, r6
   16da8:	blt	16f18 <__assert_fail@plt+0x5c70>
   16dac:	mov	lr, ip
   16db0:	add	ip, r4, lr
   16db4:	cmp	r4, lr
   16db8:	add	ip, ip, ip, lsr #31
   16dbc:	blt	16d90 <__assert_fail@plt+0x5ae8>
   16dc0:	cmp	r9, r4
   16dc4:	ble	16f54 <__assert_fail@plt+0x5cac>
   16dc8:	ldr	ip, [r0, #116]	; 0x74
   16dcc:	add	lr, r4, r4, lsl #1
   16dd0:	add	ip, ip, lr, lsl #3
   16dd4:	ldr	ip, [ip, #4]
   16dd8:	cmp	r6, ip
   16ddc:	mvnne	r4, #0
   16de0:	mov	ip, r9
   16de4:	mov	r5, #0
   16de8:	cmp	r5, ip
   16dec:	bge	16e48 <__assert_fail@plt+0x5ba0>
   16df0:	add	lr, r5, ip
   16df4:	ldr	r8, [r0, #116]	; 0x74
   16df8:	add	lr, lr, lr, lsr #31
   16dfc:	asr	lr, lr, #1
   16e00:	add	sl, lr, lr, lsl #1
   16e04:	add	sl, r8, sl, lsl #3
   16e08:	ldr	sl, [sl, #4]
   16e0c:	cmp	r7, sl
   16e10:	ble	16e38 <__assert_fail@plt+0x5b90>
   16e14:	b	16f24 <__assert_fail@plt+0x5c7c>
   16e18:	asr	ip, ip, #1
   16e1c:	add	sl, ip, ip, lsl #1
   16e20:	mov	fp, ip
   16e24:	add	sl, r8, sl, lsl #3
   16e28:	ldr	sl, [sl, #4]
   16e2c:	cmp	sl, r7
   16e30:	blt	16f2c <__assert_fail@plt+0x5c84>
   16e34:	mov	lr, ip
   16e38:	add	ip, r5, lr
   16e3c:	cmp	r5, lr
   16e40:	add	ip, ip, ip, lsr #31
   16e44:	blt	16e18 <__assert_fail@plt+0x5b70>
   16e48:	cmp	r9, r5
   16e4c:	ble	16f5c <__assert_fail@plt+0x5cb4>
   16e50:	ldr	ip, [r0, #116]	; 0x74
   16e54:	add	lr, r5, r5, lsl #1
   16e58:	add	ip, ip, lr, lsl #3
   16e5c:	ldr	ip, [ip, #4]
   16e60:	cmp	r7, ip
   16e64:	mvnne	r5, #0
   16e68:	ldr	ip, [r1]
   16e6c:	cmp	ip, #0
   16e70:	ble	16f4c <__assert_fail@plt+0x5ca4>
   16e74:	mov	r9, r2
   16e78:	mov	r8, r0
   16e7c:	str	r3, [sp, #12]
   16e80:	mov	fp, #0
   16e84:	str	r4, [sp, #16]
   16e88:	str	r1, [sp, #20]
   16e8c:	ldr	r1, [r9]
   16e90:	mov	r0, r8
   16e94:	ldrd	r2, [sp, #8]
   16e98:	ldr	ip, [r8, #116]	; 0x74
   16e9c:	ldr	r1, [r1, fp, lsl #2]
   16ea0:	ldr	r2, [r2]
   16ea4:	add	lr, r1, r1, lsl #1
   16ea8:	ldr	ip, [ip, lr, lsl #3]
   16eac:	ldr	r4, [r2, ip, lsl #3]
   16eb0:	str	r6, [sp]
   16eb4:	ldr	r2, [sp, #16]
   16eb8:	str	r2, [sp, #4]
   16ebc:	mov	r2, r4
   16ec0:	bl	15224 <__assert_fail@plt+0x3f7c>
   16ec4:	ldr	r1, [r9]
   16ec8:	mov	sl, r0
   16ecc:	mov	r2, r4
   16ed0:	mov	r0, r8
   16ed4:	ldr	r3, [sp, #68]	; 0x44
   16ed8:	ldr	r1, [r1, fp, lsl #2]
   16edc:	str	r7, [sp]
   16ee0:	str	r5, [sp, #4]
   16ee4:	bl	15224 <__assert_fail@plt+0x3f7c>
   16ee8:	cmp	sl, r0
   16eec:	beq	16f38 <__assert_fail@plt+0x5c90>
   16ef0:	mov	r0, #1
   16ef4:	add	sp, sp, #28
   16ef8:	ldrd	r4, [sp]
   16efc:	ldrd	r6, [sp, #8]
   16f00:	ldrd	r8, [sp, #16]
   16f04:	ldrd	sl, [sp, #24]
   16f08:	add	sp, sp, #32
   16f0c:	pop	{pc}		; (ldr pc, [sp], #4)
   16f10:	mov	sl, lr
   16f14:	mov	lr, ip
   16f18:	add	r4, sl, #1
   16f1c:	mov	ip, lr
   16f20:	b	16d60 <__assert_fail@plt+0x5ab8>
   16f24:	mov	fp, lr
   16f28:	mov	lr, ip
   16f2c:	add	r5, fp, #1
   16f30:	mov	ip, lr
   16f34:	b	16de8 <__assert_fail@plt+0x5b40>
   16f38:	ldr	r3, [sp, #20]
   16f3c:	add	fp, fp, #1
   16f40:	ldr	r3, [r3]
   16f44:	cmp	fp, r3
   16f48:	blt	16e8c <__assert_fail@plt+0x5be4>
   16f4c:	mov	r0, #0
   16f50:	b	16ef4 <__assert_fail@plt+0x5c4c>
   16f54:	mvn	r4, #0
   16f58:	b	16de0 <__assert_fail@plt+0x5b38>
   16f5c:	mvn	r5, #0
   16f60:	b	16e68 <__assert_fail@plt+0x5bc0>
   16f64:	strd	r4, [sp, #-16]!
   16f68:	mov	r4, r0
   16f6c:	mov	r5, r2
   16f70:	str	r6, [sp, #8]
   16f74:	mov	r6, r1
   16f78:	str	lr, [sp, #12]
   16f7c:	b	16f84 <__assert_fail@plt+0x5cdc>
   16f80:	mov	r4, r3
   16f84:	mov	r1, r4
   16f88:	mov	r0, r5
   16f8c:	blx	r6
   16f90:	cmp	r0, #0
   16f94:	bne	16fc4 <__assert_fail@plt+0x5d1c>
   16f98:	ldr	r3, [r4, #4]
   16f9c:	cmp	r3, #0
   16fa0:	bne	16f80 <__assert_fail@plt+0x5cd8>
   16fa4:	ldr	r2, [r4, #8]
   16fa8:	cmp	r2, #0
   16fac:	cmpne	r2, r3
   16fb0:	mov	r3, r4
   16fb4:	bne	16fd4 <__assert_fail@plt+0x5d2c>
   16fb8:	ldr	r2, [r4]
   16fbc:	subs	r4, r2, #0
   16fc0:	bne	16fa4 <__assert_fail@plt+0x5cfc>
   16fc4:	ldrd	r4, [sp]
   16fc8:	ldr	r6, [sp, #8]
   16fcc:	add	sp, sp, #12
   16fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   16fd4:	mov	r3, r2
   16fd8:	b	16f80 <__assert_fail@plt+0x5cd8>
   16fdc:	ldr	ip, [r1, #4]
   16fe0:	cmp	ip, #0
   16fe4:	beq	1717c <__assert_fail@plt+0x5ed4>
   16fe8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16fec:	strd	r6, [sp, #8]
   16ff0:	str	lr, [sp, #28]
   16ff4:	ldr	lr, [r2, #4]
   16ff8:	strd	r8, [sp, #16]
   16ffc:	str	sl, [sp, #24]
   17000:	cmp	lr, #0
   17004:	beq	17104 <__assert_fail@plt+0x5e5c>
   17008:	ldr	r4, [r0]
   1700c:	mov	r9, r2
   17010:	add	r2, ip, lr
   17014:	mov	r8, r1
   17018:	mov	r7, r0
   1701c:	ldmib	r0, {r3, sl}
   17020:	add	r1, r2, r3
   17024:	cmp	r1, r4
   17028:	bgt	1718c <__assert_fail@plt+0x5ee4>
   1702c:	ldr	r0, [r8, #8]
   17030:	add	r1, r3, ip
   17034:	sub	r5, ip, #1
   17038:	sub	r6, lr, #1
   1703c:	add	r1, r1, lr
   17040:	ldr	r2, [r9, #8]
   17044:	sub	r3, r3, #1
   17048:	ldr	ip, [r0, r5, lsl #2]
   1704c:	ldr	lr, [r2, r6, lsl #2]
   17050:	cmp	ip, lr
   17054:	beq	17070 <__assert_fail@plt+0x5dc8>
   17058:	bge	17124 <__assert_fail@plt+0x5e7c>
   1705c:	subs	r6, r6, #1
   17060:	bmi	170c0 <__assert_fail@plt+0x5e18>
   17064:	ldr	lr, [r2, r6, lsl #2]
   17068:	cmp	ip, lr
   1706c:	bne	17058 <__assert_fail@plt+0x5db0>
   17070:	cmp	r3, #0
   17074:	blt	170a0 <__assert_fail@plt+0x5df8>
   17078:	ldr	r4, [sl, r3, lsl #2]
   1707c:	add	lr, sl, r3, lsl #2
   17080:	cmp	r4, ip
   17084:	bgt	17098 <__assert_fail@plt+0x5df0>
   17088:	b	17134 <__assert_fail@plt+0x5e8c>
   1708c:	ldr	r4, [lr, #-4]!
   17090:	cmp	r4, ip
   17094:	ble	17134 <__assert_fail@plt+0x5e8c>
   17098:	subs	r3, r3, #1
   1709c:	bcs	1708c <__assert_fail@plt+0x5de4>
   170a0:	sub	r1, r1, #1
   170a4:	str	ip, [sl, r1, lsl #2]
   170a8:	subs	r5, r5, #1
   170ac:	bmi	170c0 <__assert_fail@plt+0x5e18>
   170b0:	subs	r6, r6, #1
   170b4:	bmi	170c0 <__assert_fail@plt+0x5e18>
   170b8:	ldr	ip, [r0, r5, lsl #2]
   170bc:	b	17064 <__assert_fail@plt+0x5dbc>
   170c0:	ldr	ip, [r7, #4]
   170c4:	ldr	r0, [r8, #4]
   170c8:	ldr	r2, [r9, #4]
   170cc:	sub	r3, ip, #1
   170d0:	add	r0, ip, r0
   170d4:	add	r0, r0, r2
   170d8:	sub	r2, r0, r1
   170dc:	sub	r0, r0, #1
   170e0:	add	ip, ip, r2
   170e4:	cmp	r3, #0
   170e8:	cmpge	r2, #0
   170ec:	str	ip, [r7, #4]
   170f0:	bgt	17150 <__assert_fail@plt+0x5ea8>
   170f4:	lsl	r2, r2, #2
   170f8:	add	r1, sl, r1, lsl #2
   170fc:	mov	r0, sl
   17100:	bl	11038 <memcpy@plt>
   17104:	mov	ip, #0
   17108:	ldrd	r4, [sp]
   1710c:	mov	r0, ip
   17110:	ldrd	r6, [sp, #8]
   17114:	ldrd	r8, [sp, #16]
   17118:	ldr	sl, [sp, #24]
   1711c:	add	sp, sp, #28
   17120:	pop	{pc}		; (ldr pc, [sp], #4)
   17124:	subs	r5, r5, #1
   17128:	bmi	170c0 <__assert_fail@plt+0x5e18>
   1712c:	ldr	ip, [r0, r5, lsl #2]
   17130:	b	17050 <__assert_fail@plt+0x5da8>
   17134:	cmp	r4, ip
   17138:	bne	170a0 <__assert_fail@plt+0x5df8>
   1713c:	b	170a8 <__assert_fail@plt+0x5e00>
   17140:	sub	r3, r3, #1
   17144:	str	ip, [sl, r4, lsl #2]
   17148:	cmn	r3, #1
   1714c:	beq	17184 <__assert_fail@plt+0x5edc>
   17150:	ldr	lr, [sl, r0, lsl #2]
   17154:	add	r4, r3, r2
   17158:	ldr	ip, [sl, r3, lsl #2]
   1715c:	cmp	lr, ip
   17160:	ble	17140 <__assert_fail@plt+0x5e98>
   17164:	subs	r2, r2, #1
   17168:	sub	r0, r0, #1
   1716c:	str	lr, [sl, r4, lsl #2]
   17170:	bne	17150 <__assert_fail@plt+0x5ea8>
   17174:	ldr	sl, [r7, #8]
   17178:	b	170f8 <__assert_fail@plt+0x5e50>
   1717c:	mov	r0, ip
   17180:	bx	lr
   17184:	ldr	sl, [r7, #8]
   17188:	b	170f4 <__assert_fail@plt+0x5e4c>
   1718c:	add	r4, r2, r4
   17190:	mov	r0, sl
   17194:	lsl	r1, r4, #2
   17198:	bl	2447c <__assert_fail@plt+0x131d4>
   1719c:	subs	sl, r0, #0
   171a0:	beq	171bc <__assert_fail@plt+0x5f14>
   171a4:	ldr	ip, [r8, #4]
   171a8:	ldr	lr, [r9, #4]
   171ac:	str	r4, [r7]
   171b0:	str	sl, [r7, #8]
   171b4:	ldr	r3, [r7, #4]
   171b8:	b	1702c <__assert_fail@plt+0x5d84>
   171bc:	mov	ip, #12
   171c0:	b	17108 <__assert_fail@plt+0x5e60>
   171c4:	strd	r4, [sp, #-20]!	; 0xffffffec
   171c8:	mov	r5, r0
   171cc:	ldr	r0, [r1]
   171d0:	strd	r6, [sp, #8]
   171d4:	str	lr, [sp, #16]
   171d8:	sub	sp, sp, #20
   171dc:	cmp	r0, #31
   171e0:	beq	17260 <__assert_fail@plt+0x5fb8>
   171e4:	lsl	ip, r0, #5
   171e8:	add	r4, r0, #1
   171ec:	ldr	r0, [r5]
   171f0:	add	r7, ip, #4
   171f4:	str	r4, [r1]
   171f8:	add	lr, r0, ip
   171fc:	mov	r6, #0
   17200:	ldr	r1, [sp, #40]	; 0x28
   17204:	add	ip, ip, #16
   17208:	cmp	r2, r6
   1720c:	str	r6, [lr, #4]
   17210:	add	ip, r0, ip
   17214:	add	r0, r0, r7
   17218:	strd	r2, [lr, #8]
   1721c:	mvn	r7, #0
   17220:	ldrd	r4, [r1]
   17224:	strd	r4, [lr, #24]
   17228:	ldrb	r1, [ip, #14]
   1722c:	bic	r1, r1, #12
   17230:	strb	r1, [ip, #14]
   17234:	str	r6, [lr, #16]
   17238:	str	r6, [lr, #20]
   1723c:	str	r7, [lr, #32]
   17240:	strne	r0, [r2]
   17244:	cmp	r3, #0
   17248:	strne	r0, [r3]
   1724c:	add	sp, sp, #20
   17250:	ldrd	r4, [sp]
   17254:	ldrd	r6, [sp, #8]
   17258:	add	sp, sp, #16
   1725c:	pop	{pc}		; (ldr pc, [sp], #4)
   17260:	mov	r0, #996	; 0x3e4
   17264:	stmib	sp, {r1, r2, r3}
   17268:	bl	24440 <__assert_fail@plt+0x13198>
   1726c:	cmp	r0, #0
   17270:	beq	1724c <__assert_fail@plt+0x5fa4>
   17274:	ldr	lr, [r5]
   17278:	mov	r7, #4
   1727c:	mov	r4, #1
   17280:	mov	ip, #0
   17284:	str	r0, [r5]
   17288:	ldmib	sp, {r1, r2, r3}
   1728c:	str	lr, [r0]
   17290:	b	171f4 <__assert_fail@plt+0x5f4c>
   17294:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17298:	mov	r4, r0
   1729c:	ldr	r5, [r0]
   172a0:	strd	r6, [sp, #8]
   172a4:	add	r7, r1, #56	; 0x38
   172a8:	add	r6, r1, #64	; 0x40
   172ac:	str	r8, [sp, #16]
   172b0:	str	lr, [sp, #20]
   172b4:	sub	sp, sp, #16
   172b8:	add	r8, sp, #12
   172bc:	b	172c8 <__assert_fail@plt+0x6020>
   172c0:	mov	r4, r3
   172c4:	add	r8, r5, #4
   172c8:	add	ip, r4, #20
   172cc:	mov	r3, #0
   172d0:	mov	r2, r3
   172d4:	mov	r1, r6
   172d8:	mov	r0, r7
   172dc:	str	ip, [sp]
   172e0:	bl	171c4 <__assert_fail@plt+0x5f1c>
   172e4:	cmp	r0, #0
   172e8:	str	r0, [r8]
   172ec:	beq	17338 <__assert_fail@plt+0x6090>
   172f0:	str	r5, [r0]
   172f4:	ldr	r5, [r8]
   172f8:	ldrb	r3, [r5, #26]
   172fc:	orr	r3, r3, #4
   17300:	strb	r3, [r5, #26]
   17304:	ldr	r3, [r4, #4]
   17308:	cmp	r3, #0
   1730c:	bne	172c0 <__assert_fail@plt+0x6018>
   17310:	ldr	r2, [r4, #8]
   17314:	cmp	r2, r3
   17318:	cmpne	r2, #0
   1731c:	mov	r3, r4
   17320:	bne	17350 <__assert_fail@plt+0x60a8>
   17324:	ldr	r2, [r4]
   17328:	ldr	r5, [r5]
   1732c:	subs	r4, r2, #0
   17330:	bne	17310 <__assert_fail@plt+0x6068>
   17334:	ldr	r0, [sp, #12]
   17338:	add	sp, sp, #16
   1733c:	ldrd	r4, [sp]
   17340:	ldrd	r6, [sp, #8]
   17344:	ldr	r8, [sp, #16]
   17348:	add	sp, sp, #20
   1734c:	pop	{pc}		; (ldr pc, [sp], #4)
   17350:	mov	r4, r2
   17354:	add	r8, r5, #8
   17358:	b	172c8 <__assert_fail@plt+0x6020>
   1735c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17360:	ldr	r4, [r1]
   17364:	ldr	r5, [r2, #4]
   17368:	strd	r6, [sp, #8]
   1736c:	ldrb	r7, [r1, #28]
   17370:	strd	r8, [sp, #16]
   17374:	mov	r8, r2
   17378:	strd	sl, [sp, #24]
   1737c:	str	lr, [sp, #32]
   17380:	sub	sp, sp, #28
   17384:	ands	r7, r7, #16
   17388:	str	r0, [sp, #12]
   1738c:	beq	17558 <__assert_fail@plt+0x62b0>
   17390:	cmp	r5, #0
   17394:	beq	174e8 <__assert_fail@plt+0x6240>
   17398:	ldr	r3, [r2, #20]
   1739c:	cmp	r3, #31
   173a0:	bgt	174c8 <__assert_fail@plt+0x6220>
   173a4:	ldr	r2, [r4, #80]	; 0x50
   173a8:	lsr	r3, r2, r3
   173ac:	tst	r3, #1
   173b0:	beq	174c8 <__assert_fail@plt+0x6220>
   173b4:	add	r7, sp, #16
   173b8:	mov	ip, #8
   173bc:	add	r9, r4, #56	; 0x38
   173c0:	mov	r3, #0
   173c4:	add	r4, r4, #64	; 0x40
   173c8:	mov	sl, #0
   173cc:	str	r7, [sp]
   173d0:	mov	fp, #0
   173d4:	mov	r2, r3
   173d8:	str	r7, [sp, #8]
   173dc:	mov	r1, r4
   173e0:	mov	r0, r9
   173e4:	strd	sl, [sp, #16]
   173e8:	strb	ip, [sp, #20]
   173ec:	bl	171c4 <__assert_fail@plt+0x5f1c>
   173f0:	mov	ip, #9
   173f4:	mov	r3, #0
   173f8:	str	r7, [sp]
   173fc:	mov	r6, r0
   17400:	mov	r1, r4
   17404:	strd	sl, [sp, #16]
   17408:	mov	r0, r9
   1740c:	mov	r2, r3
   17410:	strb	ip, [sp, #20]
   17414:	bl	171c4 <__assert_fail@plt+0x5f1c>
   17418:	mov	r7, r0
   1741c:	ldr	r3, [sp, #8]
   17420:	mov	r0, #0
   17424:	mov	r1, #0
   17428:	mov	ip, #16
   1742c:	mov	r2, r5
   17430:	str	r3, [sp]
   17434:	mov	r3, r7
   17438:	strd	r0, [sp, #16]
   1743c:	mov	r1, r4
   17440:	mov	r0, r9
   17444:	strb	ip, [sp, #20]
   17448:	bl	171c4 <__assert_fail@plt+0x5f1c>
   1744c:	mov	fp, r0
   17450:	ldr	r0, [sp, #8]
   17454:	mov	r2, #0
   17458:	mov	r3, #0
   1745c:	mov	ip, #16
   17460:	mov	r1, r4
   17464:	str	r0, [sp]
   17468:	mov	r0, r9
   1746c:	strd	r2, [sp, #16]
   17470:	mov	r3, fp
   17474:	mov	r2, r6
   17478:	strb	ip, [sp, #20]
   1747c:	bl	171c4 <__assert_fail@plt+0x5f1c>
   17480:	cmp	fp, #0
   17484:	cmpne	r0, #0
   17488:	mov	r5, r0
   1748c:	beq	175d4 <__assert_fail@plt+0x632c>
   17490:	cmp	r7, #0
   17494:	cmpne	r6, #0
   17498:	beq	175d4 <__assert_fail@plt+0x632c>
   1749c:	ldr	r2, [r8, #20]
   174a0:	ldrb	r3, [r8, #26]
   174a4:	str	r2, [r7, #20]
   174a8:	str	r2, [r6, #20]
   174ac:	ldrb	r2, [r7, #26]
   174b0:	ubfx	r3, r3, #3, #1
   174b4:	bfi	r2, r3, #3, #1
   174b8:	strb	r2, [r7, #26]
   174bc:	ldrb	r2, [r6, #26]
   174c0:	bfi	r2, r3, #3, #1
   174c4:	strb	r2, [r6, #26]
   174c8:	mov	r0, r5
   174cc:	add	sp, sp, #28
   174d0:	ldrd	r4, [sp]
   174d4:	ldrd	r6, [sp, #8]
   174d8:	ldrd	r8, [sp, #16]
   174dc:	ldrd	sl, [sp, #24]
   174e0:	add	sp, sp, #32
   174e4:	pop	{pc}		; (ldr pc, [sp], #4)
   174e8:	add	r7, sp, #16
   174ec:	mov	ip, #8
   174f0:	add	r9, r4, #56	; 0x38
   174f4:	mov	fp, #0
   174f8:	add	r4, r4, #64	; 0x40
   174fc:	mov	sl, #0
   17500:	str	r7, [sp]
   17504:	mov	r1, r4
   17508:	mov	r3, r5
   1750c:	str	r7, [sp, #8]
   17510:	mov	r2, r5
   17514:	mov	r0, r9
   17518:	strd	sl, [sp, #16]
   1751c:	strb	ip, [sp, #20]
   17520:	bl	171c4 <__assert_fail@plt+0x5f1c>
   17524:	mov	ip, #9
   17528:	mov	r6, r0
   1752c:	str	r7, [sp]
   17530:	mov	r1, r4
   17534:	mov	r0, r9
   17538:	strd	sl, [sp, #16]
   1753c:	mov	r3, r5
   17540:	mov	r2, r5
   17544:	strb	ip, [sp, #20]
   17548:	bl	171c4 <__assert_fail@plt+0x5f1c>
   1754c:	mov	fp, r0
   17550:	mov	r7, r0
   17554:	b	17450 <__assert_fail@plt+0x61a8>
   17558:	add	r3, sp, #16
   1755c:	mov	ip, #8
   17560:	add	r9, r4, #56	; 0x38
   17564:	mov	fp, #0
   17568:	add	r4, r4, #64	; 0x40
   1756c:	mov	sl, #0
   17570:	str	r3, [sp]
   17574:	mov	r2, r7
   17578:	mov	r1, r4
   1757c:	str	r3, [sp, #8]
   17580:	mov	r0, r9
   17584:	mov	r3, r7
   17588:	strd	sl, [sp, #16]
   1758c:	strb	ip, [sp, #20]
   17590:	bl	171c4 <__assert_fail@plt+0x5f1c>
   17594:	ldr	r3, [sp, #8]
   17598:	mov	ip, #9
   1759c:	mov	r2, r7
   175a0:	mov	r6, r0
   175a4:	mov	r1, r4
   175a8:	mov	r0, r9
   175ac:	str	r3, [sp]
   175b0:	mov	r3, r7
   175b4:	strd	sl, [sp, #16]
   175b8:	strb	ip, [sp, #20]
   175bc:	bl	171c4 <__assert_fail@plt+0x5f1c>
   175c0:	cmp	r5, #0
   175c4:	mov	r7, r0
   175c8:	moveq	fp, r0
   175cc:	bne	1741c <__assert_fail@plt+0x6174>
   175d0:	b	17450 <__assert_fail@plt+0x61a8>
   175d4:	ldr	r2, [sp, #12]
   175d8:	mov	r3, #12
   175dc:	mov	r5, #0
   175e0:	str	r3, [r2]
   175e4:	b	174c8 <__assert_fail@plt+0x6220>
   175e8:	ldr	r2, [r1, #4]
   175ec:	mov	r3, #0
   175f0:	strd	r4, [sp, #-12]!
   175f4:	mov	r4, r1
   175f8:	mov	r5, r0
   175fc:	str	lr, [sp, #8]
   17600:	sub	sp, sp, #12
   17604:	str	r3, [sp, #4]
   17608:	cmp	r2, r3
   1760c:	beq	1761c <__assert_fail@plt+0x6374>
   17610:	ldrb	r3, [r2, #24]
   17614:	cmp	r3, #17
   17618:	beq	17648 <__assert_fail@plt+0x63a0>
   1761c:	ldr	r2, [r4, #8]
   17620:	cmp	r2, #0
   17624:	beq	17634 <__assert_fail@plt+0x638c>
   17628:	ldrb	r3, [r2, #24]
   1762c:	cmp	r3, #17
   17630:	beq	17664 <__assert_fail@plt+0x63bc>
   17634:	ldr	r0, [sp, #4]
   17638:	add	sp, sp, #12
   1763c:	ldrd	r4, [sp]
   17640:	add	sp, sp, #8
   17644:	pop	{pc}		; (ldr pc, [sp], #4)
   17648:	mov	r1, r0
   1764c:	add	r0, sp, #4
   17650:	bl	1735c <__assert_fail@plt+0x60b4>
   17654:	cmp	r0, #0
   17658:	str	r0, [r4, #4]
   1765c:	strne	r4, [r0]
   17660:	b	1761c <__assert_fail@plt+0x6374>
   17664:	mov	r1, r5
   17668:	add	r0, sp, #4
   1766c:	bl	1735c <__assert_fail@plt+0x60b4>
   17670:	cmp	r0, #0
   17674:	str	r0, [r4, #8]
   17678:	strne	r4, [r0]
   1767c:	b	17634 <__assert_fail@plt+0x638c>
   17680:	ldr	r3, [r1, #4]
   17684:	cmp	r3, #0
   17688:	str	r3, [r0, #4]
   1768c:	ble	176f0 <__assert_fail@plt+0x6448>
   17690:	strd	r4, [sp, #-16]!
   17694:	mov	r4, r0
   17698:	lsl	r0, r3, #2
   1769c:	str	r6, [sp, #8]
   176a0:	mov	r5, r1
   176a4:	str	lr, [sp, #12]
   176a8:	str	r3, [r4]
   176ac:	bl	24440 <__assert_fail@plt+0x13198>
   176b0:	cmp	r0, #0
   176b4:	str	r0, [r4, #8]
   176b8:	moveq	r2, #12
   176bc:	streq	r0, [r4]
   176c0:	streq	r0, [r4, #4]
   176c4:	beq	176dc <__assert_fail@plt+0x6434>
   176c8:	ldr	r2, [r5, #4]
   176cc:	ldr	r1, [r5, #8]
   176d0:	lsl	r2, r2, #2
   176d4:	bl	11038 <memcpy@plt>
   176d8:	mov	r2, #0
   176dc:	ldrd	r4, [sp]
   176e0:	mov	r0, r2
   176e4:	ldr	r6, [sp, #8]
   176e8:	add	sp, sp, #12
   176ec:	pop	{pc}		; (ldr pc, [sp], #4)
   176f0:	mov	r3, #0
   176f4:	str	r3, [r0]
   176f8:	str	r3, [r0, #4]
   176fc:	str	r3, [r0, #8]
   17700:	mov	r0, r3
   17704:	bx	lr
   17708:	cmp	r1, #0
   1770c:	beq	17728 <__assert_fail@plt+0x6480>
   17710:	ldr	r3, [r1, #4]
   17714:	cmp	r2, #0
   17718:	cmpne	r3, #0
   1771c:	bgt	17754 <__assert_fail@plt+0x64ac>
   17720:	cmp	r3, #0
   17724:	bgt	17830 <__assert_fail@plt+0x6588>
   17728:	cmp	r2, #0
   1772c:	beq	1773c <__assert_fail@plt+0x6494>
   17730:	ldr	r3, [r2, #4]
   17734:	cmp	r3, #0
   17738:	bgt	1782c <__assert_fail@plt+0x6584>
   1773c:	mov	r3, #0
   17740:	str	r3, [r0]
   17744:	str	r3, [r0, #4]
   17748:	str	r3, [r0, #8]
   1774c:	mov	r0, r3
   17750:	bx	lr
   17754:	ldr	ip, [r2, #4]
   17758:	cmp	ip, #0
   1775c:	ble	17830 <__assert_fail@plt+0x6588>
   17760:	add	r3, r3, ip
   17764:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17768:	mov	r4, r2
   1776c:	strd	r6, [sp, #8]
   17770:	mov	r6, r0
   17774:	lsl	r0, r3, #2
   17778:	strd	r8, [sp, #16]
   1777c:	mov	r5, r1
   17780:	str	sl, [sp, #24]
   17784:	str	lr, [sp, #28]
   17788:	str	r3, [r6]
   1778c:	bl	24440 <__assert_fail@plt+0x13198>
   17790:	cmp	r0, #0
   17794:	str	r0, [r6, #8]
   17798:	beq	1786c <__assert_fail@plt+0x65c4>
   1779c:	mov	r7, #0
   177a0:	mov	lr, r0
   177a4:	ldr	r9, [r4, #4]
   177a8:	mov	ip, r7
   177ac:	mov	r3, r7
   177b0:	ldr	r8, [r5, #4]
   177b4:	b	177f8 <__assert_fail@plt+0x6550>
   177b8:	ldr	r2, [r5, #8]
   177bc:	cmp	ip, r9
   177c0:	add	r1, r2, r3, lsl #2
   177c4:	bge	17854 <__assert_fail@plt+0x65ac>
   177c8:	ldr	r1, [r4, #8]
   177cc:	add	r7, r7, #1
   177d0:	ldr	r2, [r2, r3, lsl #2]
   177d4:	ldr	r1, [r1, ip, lsl #2]
   177d8:	cmp	r2, r1
   177dc:	addgt	ip, ip, #1
   177e0:	strgt	r1, [lr]
   177e4:	bgt	177f4 <__assert_fail@plt+0x654c>
   177e8:	add	r3, r3, #1
   177ec:	addeq	ip, ip, #1
   177f0:	str	r2, [lr]
   177f4:	add	lr, lr, #4
   177f8:	cmp	r8, r3
   177fc:	bgt	177b8 <__assert_fail@plt+0x6510>
   17800:	cmp	ip, r9
   17804:	blt	17834 <__assert_fail@plt+0x658c>
   17808:	mov	r2, #0
   1780c:	str	r7, [r6, #4]
   17810:	ldrd	r4, [sp]
   17814:	mov	r0, r2
   17818:	ldrd	r6, [sp, #8]
   1781c:	ldrd	r8, [sp, #16]
   17820:	ldr	sl, [sp, #24]
   17824:	add	sp, sp, #28
   17828:	pop	{pc}		; (ldr pc, [sp], #4)
   1782c:	mov	r1, r2
   17830:	b	17680 <__assert_fail@plt+0x63d8>
   17834:	ldr	r1, [r4, #8]
   17838:	sub	r2, r9, ip
   1783c:	add	r0, r0, r7, lsl #2
   17840:	add	r7, r7, r2
   17844:	lsl	r2, r2, #2
   17848:	add	r1, r1, ip, lsl #2
   1784c:	bl	11038 <memcpy@plt>
   17850:	b	17808 <__assert_fail@plt+0x6560>
   17854:	sub	r3, r8, r3
   17858:	mov	r0, lr
   1785c:	lsl	r2, r3, #2
   17860:	add	r7, r7, r3
   17864:	bl	11038 <memcpy@plt>
   17868:	b	17808 <__assert_fail@plt+0x6560>
   1786c:	mov	r2, #12
   17870:	b	17810 <__assert_fail@plt+0x6568>
   17874:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17878:	mov	ip, #0
   1787c:	ldr	r4, [r2, #4]
   17880:	strd	r6, [sp, #8]
   17884:	strd	r8, [sp, #16]
   17888:	strd	sl, [sp, #24]
   1788c:	str	lr, [sp, #32]
   17890:	sub	sp, sp, #28
   17894:	cmp	r4, ip
   17898:	str	ip, [r0]
   1789c:	beq	17944 <__assert_fail@plt+0x669c>
   178a0:	add	r7, r3, r4
   178a4:	ble	178c0 <__assert_fail@plt+0x6618>
   178a8:	ldr	ip, [r2, #8]
   178ac:	add	r4, ip, r4, lsl #2
   178b0:	ldr	lr, [ip], #4
   178b4:	cmp	r4, ip
   178b8:	add	r7, r7, lr
   178bc:	bne	178b0 <__assert_fail@plt+0x6608>
   178c0:	mov	sl, r3
   178c4:	ldr	r3, [r1, #68]	; 0x44
   178c8:	mov	r8, r2
   178cc:	mov	r9, r1
   178d0:	str	r0, [sp, #20]
   178d4:	ldr	r2, [r1, #32]
   178d8:	and	r3, r3, r7
   178dc:	add	r3, r3, r3, lsl #1
   178e0:	lsl	r3, r3, #2
   178e4:	ldr	fp, [r2, r3]
   178e8:	add	r3, r2, r3
   178ec:	cmp	fp, #0
   178f0:	ble	17964 <__assert_fail@plt+0x66bc>
   178f4:	ldr	r6, [r3, #8]
   178f8:	mov	r5, #0
   178fc:	sub	r6, r6, #4
   17900:	b	1790c <__assert_fail@plt+0x6664>
   17904:	cmp	r5, fp
   17908:	beq	17964 <__assert_fail@plt+0x66bc>
   1790c:	ldr	r4, [r6, #4]!
   17910:	add	r5, r5, #1
   17914:	ldr	r3, [r4]
   17918:	cmp	r3, r7
   1791c:	bne	17904 <__assert_fail@plt+0x665c>
   17920:	ldrb	r3, [r4, #52]	; 0x34
   17924:	and	r3, r3, #15
   17928:	cmp	r3, sl
   1792c:	bne	17904 <__assert_fail@plt+0x665c>
   17930:	mov	r1, r8
   17934:	ldr	r0, [r4, #40]	; 0x28
   17938:	bl	14d58 <__assert_fail@plt+0x3ab0>
   1793c:	cmp	r0, #0
   17940:	beq	17904 <__assert_fail@plt+0x665c>
   17944:	mov	r0, r4
   17948:	add	sp, sp, #28
   1794c:	ldrd	r4, [sp]
   17950:	ldrd	r6, [sp, #8]
   17954:	ldrd	r8, [sp, #16]
   17958:	ldrd	sl, [sp, #24]
   1795c:	add	sp, sp, #32
   17960:	pop	{pc}		; (ldr pc, [sp], #4)
   17964:	mov	r1, #1
   17968:	mov	r0, #56	; 0x38
   1796c:	bl	243cc <__assert_fail@plt+0x13124>
   17970:	subs	r4, r0, #0
   17974:	beq	17aec <__assert_fail@plt+0x6844>
   17978:	add	fp, r4, #4
   1797c:	mov	r1, r8
   17980:	mov	r0, fp
   17984:	bl	17680 <__assert_fail@plt+0x63d8>
   17988:	subs	r3, r0, #0
   1798c:	bne	17b50 <__assert_fail@plt+0x68a8>
   17990:	ldrb	r2, [r4, #52]	; 0x34
   17994:	str	fp, [r4, #40]	; 0x28
   17998:	ldr	lr, [r8, #4]
   1799c:	bfi	r2, sl, #0, #4
   179a0:	cmp	lr, #0
   179a4:	strb	r2, [r4, #52]	; 0x34
   179a8:	ble	17acc <__assert_fail@plt+0x6824>
   179ac:	add	r2, r4, #12
   179b0:	mov	r6, r3
   179b4:	str	r2, [sp, #4]
   179b8:	add	r2, r4, #8
   179bc:	str	r2, [sp, #8]
   179c0:	and	r2, sl, #4
   179c4:	str	r7, [sp, #16]
   179c8:	mov	r7, r3
   179cc:	str	r2, [sp, #12]
   179d0:	ldr	r1, [r8, #8]
   179d4:	ldr	r2, [r9]
   179d8:	ldr	r1, [r1, r6, lsl #2]
   179dc:	add	r2, r2, r1, lsl #3
   179e0:	ldr	r5, [r2, #4]
   179e4:	ldrb	r1, [r2, #4]
   179e8:	ubfx	r5, r5, #8, #10
   179ec:	cmp	r1, #1
   179f0:	cmpeq	r5, #0
   179f4:	beq	17abc <__assert_fail@plt+0x6814>
   179f8:	ldrb	ip, [r2, #6]
   179fc:	cmp	r1, #2
   17a00:	ldrb	r2, [r4, #52]	; 0x34
   17a04:	ubfx	ip, ip, #4, #1
   17a08:	ubfx	r0, r2, #5, #1
   17a0c:	orr	r0, r0, ip
   17a10:	bfi	r2, r0, #5, #1
   17a14:	strb	r2, [r4, #52]	; 0x34
   17a18:	uxtbeq	r2, r2
   17a1c:	orreq	r2, r2, #16
   17a20:	strbeq	r2, [r4, #52]	; 0x34
   17a24:	beq	17a3c <__assert_fail@plt+0x6794>
   17a28:	cmp	r1, #4
   17a2c:	bne	17a3c <__assert_fail@plt+0x6794>
   17a30:	ldrb	r2, [r4, #52]	; 0x34
   17a34:	orr	r2, r2, #64	; 0x40
   17a38:	strb	r2, [r4, #52]	; 0x34
   17a3c:	cmp	r5, #0
   17a40:	beq	17abc <__assert_fail@plt+0x6814>
   17a44:	ldr	r2, [r4, #40]	; 0x28
   17a48:	cmp	fp, r2
   17a4c:	beq	17b1c <__assert_fail@plt+0x6874>
   17a50:	tst	r5, #1
   17a54:	beq	17b08 <__assert_fail@plt+0x6860>
   17a58:	tst	sl, #1
   17a5c:	beq	17a8c <__assert_fail@plt+0x67e4>
   17a60:	tst	r5, #2
   17a64:	bne	17a8c <__assert_fail@plt+0x67e4>
   17a68:	tst	r5, #16
   17a6c:	beq	17a78 <__assert_fail@plt+0x67d0>
   17a70:	tst	sl, #2
   17a74:	beq	17a8c <__assert_fail@plt+0x67e4>
   17a78:	tst	r5, #64	; 0x40
   17a7c:	beq	17b00 <__assert_fail@plt+0x6858>
   17a80:	ldr	r3, [sp, #12]
   17a84:	cmp	r3, #0
   17a88:	bne	17b00 <__assert_fail@plt+0x6858>
   17a8c:	subs	r2, r6, r7
   17a90:	bmi	17ab4 <__assert_fail@plt+0x680c>
   17a94:	ldr	r1, [r4, #8]
   17a98:	cmp	r2, r1
   17a9c:	bge	17ab4 <__assert_fail@plt+0x680c>
   17aa0:	sub	ip, r1, #1
   17aa4:	ldr	r1, [sp, #4]
   17aa8:	str	ip, [r4, #8]
   17aac:	ldr	r0, [sp, #8]
   17ab0:	bl	16bf8 <__assert_fail@plt+0x5950>
   17ab4:	ldr	lr, [r8, #4]
   17ab8:	add	r7, r7, #1
   17abc:	add	r6, r6, #1
   17ac0:	cmp	r6, lr
   17ac4:	blt	179d0 <__assert_fail@plt+0x6728>
   17ac8:	ldr	r7, [sp, #16]
   17acc:	mov	r2, r7
   17ad0:	mov	r0, r9
   17ad4:	mov	r1, r4
   17ad8:	bl	153e4 <__assert_fail@plt+0x413c>
   17adc:	cmp	r0, #0
   17ae0:	beq	17944 <__assert_fail@plt+0x669c>
   17ae4:	mov	r0, r4
   17ae8:	bl	1612c <__assert_fail@plt+0x4e84>
   17aec:	ldr	r2, [sp, #20]
   17af0:	mov	r3, #12
   17af4:	mov	r4, #0
   17af8:	str	r3, [r2]
   17afc:	b	17944 <__assert_fail@plt+0x669c>
   17b00:	ldr	lr, [r8, #4]
   17b04:	b	17abc <__assert_fail@plt+0x6814>
   17b08:	tst	r5, #2
   17b0c:	beq	17a68 <__assert_fail@plt+0x67c0>
   17b10:	tst	sl, #1
   17b14:	beq	17a68 <__assert_fail@plt+0x67c0>
   17b18:	b	17a8c <__assert_fail@plt+0x67e4>
   17b1c:	mov	r0, #12
   17b20:	bl	24440 <__assert_fail@plt+0x13198>
   17b24:	subs	r3, r0, #0
   17b28:	beq	17ae4 <__assert_fail@plt+0x683c>
   17b2c:	mov	r1, r8
   17b30:	str	r3, [r4, #40]	; 0x28
   17b34:	bl	17680 <__assert_fail@plt+0x63d8>
   17b38:	subs	r7, r0, #0
   17b3c:	bne	17ae4 <__assert_fail@plt+0x683c>
   17b40:	ldrb	r2, [r4, #52]	; 0x34
   17b44:	orr	r2, r2, #128	; 0x80
   17b48:	strb	r2, [r4, #52]	; 0x34
   17b4c:	b	17a50 <__assert_fail@plt+0x67a8>
   17b50:	mov	r0, r4
   17b54:	bl	24628 <__assert_fail@plt+0x13380>
   17b58:	b	17aec <__assert_fail@plt+0x6844>
   17b5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17b60:	mov	r3, #0
   17b64:	strd	r6, [sp, #8]
   17b68:	ldr	r6, [r2, #4]
   17b6c:	strd	r8, [sp, #16]
   17b70:	strd	sl, [sp, #24]
   17b74:	str	lr, [sp, #32]
   17b78:	sub	sp, sp, #4
   17b7c:	str	r3, [r0]
   17b80:	cmp	r6, r3
   17b84:	beq	17d6c <__assert_fail@plt+0x6ac4>
   17b88:	ble	17ba4 <__assert_fail@plt+0x68fc>
   17b8c:	ldr	r3, [r2, #8]
   17b90:	add	lr, r3, r6, lsl #2
   17b94:	ldr	ip, [r3], #4
   17b98:	cmp	lr, r3
   17b9c:	add	r6, r6, ip
   17ba0:	bne	17b94 <__assert_fail@plt+0x68ec>
   17ba4:	ldr	r3, [r1, #68]	; 0x44
   17ba8:	mov	sl, r2
   17bac:	mov	r8, r1
   17bb0:	mov	r9, r0
   17bb4:	ldr	r2, [r1, #32]
   17bb8:	and	r3, r3, r6
   17bbc:	add	r3, r3, r3, lsl #1
   17bc0:	lsl	r3, r3, #2
   17bc4:	ldr	fp, [r2, r3]
   17bc8:	add	r3, r2, r3
   17bcc:	cmp	fp, #0
   17bd0:	ble	17c10 <__assert_fail@plt+0x6968>
   17bd4:	ldr	r7, [r3, #8]
   17bd8:	mov	r5, #0
   17bdc:	sub	r7, r7, #4
   17be0:	ldr	r4, [r7, #4]!
   17be4:	mov	r1, sl
   17be8:	add	r5, r5, #1
   17bec:	ldr	r3, [r4]
   17bf0:	add	r0, r4, #4
   17bf4:	cmp	r3, r6
   17bf8:	bne	17c08 <__assert_fail@plt+0x6960>
   17bfc:	bl	14d58 <__assert_fail@plt+0x3ab0>
   17c00:	cmp	r0, #0
   17c04:	bne	17d0c <__assert_fail@plt+0x6a64>
   17c08:	cmp	fp, r5
   17c0c:	bne	17be0 <__assert_fail@plt+0x6938>
   17c10:	mov	r1, #1
   17c14:	mov	r0, #56	; 0x38
   17c18:	bl	243cc <__assert_fail@plt+0x13124>
   17c1c:	subs	r4, r0, #0
   17c20:	beq	17d5c <__assert_fail@plt+0x6ab4>
   17c24:	add	r7, r4, #4
   17c28:	mov	r1, sl
   17c2c:	mov	r0, r7
   17c30:	bl	17680 <__assert_fail@plt+0x63d8>
   17c34:	cmp	r0, #0
   17c38:	bne	17d54 <__assert_fail@plt+0x6aac>
   17c3c:	ldr	r5, [sl, #4]
   17c40:	str	r7, [r4, #40]	; 0x28
   17c44:	cmp	r5, #0
   17c48:	ble	17cf4 <__assert_fail@plt+0x6a4c>
   17c4c:	ldr	r1, [sl, #8]
   17c50:	mov	sl, #65280	; 0xff00
   17c54:	movt	sl, #3
   17c58:	ldr	r7, [r8]
   17c5c:	add	r5, r1, r5, lsl #2
   17c60:	b	17ca4 <__assert_fail@plt+0x69fc>
   17c64:	ldrb	r2, [r4, #52]	; 0x34
   17c68:	cmp	r0, #2
   17c6c:	ldrb	lr, [r3, #6]
   17c70:	ubfx	ip, r2, #5, #1
   17c74:	ubfx	lr, lr, #4, #1
   17c78:	orr	ip, ip, lr
   17c7c:	bfi	r2, ip, #5, #1
   17c80:	strb	r2, [r4, #52]	; 0x34
   17c84:	beq	17d2c <__assert_fail@plt+0x6a84>
   17c88:	cmp	r0, #4
   17c8c:	bne	17d3c <__assert_fail@plt+0x6a94>
   17c90:	ldrb	r3, [r4, #52]	; 0x34
   17c94:	orr	r3, r3, #64	; 0x40
   17c98:	strb	r3, [r4, #52]	; 0x34
   17c9c:	cmp	r5, r1
   17ca0:	beq	17cf4 <__assert_fail@plt+0x6a4c>
   17ca4:	ldr	r3, [r1], #4
   17ca8:	add	r3, r7, r3, lsl #3
   17cac:	ldrb	r0, [r3, #4]
   17cb0:	cmp	r0, #1
   17cb4:	bne	17c64 <__assert_fail@plt+0x69bc>
   17cb8:	ldr	r2, [r3, #4]
   17cbc:	tst	sl, r2
   17cc0:	beq	17c9c <__assert_fail@plt+0x69f4>
   17cc4:	ldrb	r2, [r3, #6]
   17cc8:	ldrb	r3, [r4, #52]	; 0x34
   17ccc:	ubfx	r0, r2, #4, #1
   17cd0:	ubfx	r2, r3, #5, #1
   17cd4:	orr	r2, r2, r0
   17cd8:	bfi	r3, r2, #5, #1
   17cdc:	strb	r3, [r4, #52]	; 0x34
   17ce0:	ldrb	r3, [r4, #52]	; 0x34
   17ce4:	cmp	r5, r1
   17ce8:	orr	r3, r3, #128	; 0x80
   17cec:	strb	r3, [r4, #52]	; 0x34
   17cf0:	bne	17ca4 <__assert_fail@plt+0x69fc>
   17cf4:	mov	r2, r6
   17cf8:	mov	r0, r8
   17cfc:	mov	r1, r4
   17d00:	bl	153e4 <__assert_fail@plt+0x413c>
   17d04:	cmp	r0, #0
   17d08:	bne	17d74 <__assert_fail@plt+0x6acc>
   17d0c:	mov	r0, r4
   17d10:	add	sp, sp, #4
   17d14:	ldrd	r4, [sp]
   17d18:	ldrd	r6, [sp, #8]
   17d1c:	ldrd	r8, [sp, #16]
   17d20:	ldrd	sl, [sp, #24]
   17d24:	add	sp, sp, #32
   17d28:	pop	{pc}		; (ldr pc, [sp], #4)
   17d2c:	uxtb	r3, r2
   17d30:	orr	r3, r3, #16
   17d34:	strb	r3, [r4, #52]	; 0x34
   17d38:	b	17c9c <__assert_fail@plt+0x69f4>
   17d3c:	cmp	r0, #12
   17d40:	beq	17ce0 <__assert_fail@plt+0x6a38>
   17d44:	ldr	r3, [r3, #4]
   17d48:	tst	sl, r3
   17d4c:	beq	17c9c <__assert_fail@plt+0x69f4>
   17d50:	b	17ce0 <__assert_fail@plt+0x6a38>
   17d54:	mov	r0, r4
   17d58:	bl	24628 <__assert_fail@plt+0x13380>
   17d5c:	mov	r3, #12
   17d60:	mov	r4, #0
   17d64:	str	r3, [r9]
   17d68:	b	17d0c <__assert_fail@plt+0x6a64>
   17d6c:	mov	r4, r6
   17d70:	b	17d0c <__assert_fail@plt+0x6a64>
   17d74:	mov	r0, r4
   17d78:	bl	1612c <__assert_fail@plt+0x4e84>
   17d7c:	b	17d5c <__assert_fail@plt+0x6ab4>
   17d80:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17d84:	strd	r6, [sp, #8]
   17d88:	subs	r7, r3, #0
   17d8c:	subgt	r4, r1, #4
   17d90:	subgt	r6, r2, #4
   17d94:	str	r8, [sp, #16]
   17d98:	movgt	r5, #0
   17d9c:	movgt	r8, r0
   17da0:	str	lr, [sp, #20]
   17da4:	sub	sp, sp, #16
   17da8:	bgt	17dd8 <__assert_fail@plt+0x6b30>
   17dac:	b	17e3c <__assert_fail@plt+0x6b94>
   17db0:	bl	17b5c <__assert_fail@plt+0x68b4>
   17db4:	str	r0, [r4]
   17db8:	ldr	r0, [sp, #12]
   17dbc:	bl	24628 <__assert_fail@plt+0x13380>
   17dc0:	ldr	r3, [sp]
   17dc4:	cmp	r3, #0
   17dc8:	bne	17e20 <__assert_fail@plt+0x6b78>
   17dcc:	add	r5, r5, #1
   17dd0:	cmp	r7, r5
   17dd4:	beq	17e3c <__assert_fail@plt+0x6b94>
   17dd8:	ldr	r1, [r4, #4]!
   17ddc:	ldr	ip, [r6, #4]!
   17de0:	cmp	r1, #0
   17de4:	streq	ip, [r4]
   17de8:	beq	17dcc <__assert_fail@plt+0x6b24>
   17dec:	cmp	ip, #0
   17df0:	add	r2, ip, #4
   17df4:	add	r1, r1, #4
   17df8:	add	r0, sp, #4
   17dfc:	beq	17dcc <__assert_fail@plt+0x6b24>
   17e00:	bl	17708 <__assert_fail@plt+0x6460>
   17e04:	mov	r3, r0
   17e08:	add	r2, sp, #4
   17e0c:	cmp	r3, #0
   17e10:	mov	r1, r8
   17e14:	mov	r0, sp
   17e18:	str	r3, [sp]
   17e1c:	beq	17db0 <__assert_fail@plt+0x6b08>
   17e20:	mov	r0, r3
   17e24:	add	sp, sp, #16
   17e28:	ldrd	r4, [sp]
   17e2c:	ldrd	r6, [sp, #8]
   17e30:	ldr	r8, [sp, #16]
   17e34:	add	sp, sp, #20
   17e38:	pop	{pc}		; (ldr pc, [sp], #4)
   17e3c:	mov	r3, #0
   17e40:	b	17e20 <__assert_fail@plt+0x6b78>
   17e44:	ldrb	r2, [r1, #24]
   17e48:	cmp	r2, #16
   17e4c:	bne	17e6c <__assert_fail@plt+0x6bc4>
   17e50:	ldr	r3, [r1, #4]
   17e54:	mov	r0, #0
   17e58:	ldr	r2, [r3, #12]
   17e5c:	ldr	r3, [r3, #28]
   17e60:	str	r2, [r1, #12]
   17e64:	str	r3, [r1, #28]
   17e68:	bx	lr
   17e6c:	strd	r4, [sp, #-16]!
   17e70:	mov	r4, r1
   17e74:	add	r3, r1, #20
   17e78:	ldm	r3, {r1, r2}
   17e7c:	mov	r5, r0
   17e80:	str	r6, [sp, #8]
   17e84:	str	lr, [sp, #12]
   17e88:	str	r4, [r4, #12]
   17e8c:	bl	15ec0 <__assert_fail@plt+0x4c18>
   17e90:	cmn	r0, #1
   17e94:	mov	r3, r0
   17e98:	str	r0, [r4, #28]
   17e9c:	beq	17edc <__assert_fail@plt+0x6c34>
   17ea0:	ldrb	r2, [r4, #24]
   17ea4:	cmp	r2, #12
   17ea8:	movne	r0, #0
   17eac:	bne	17ecc <__assert_fail@plt+0x6c24>
   17eb0:	ldr	r2, [r5]
   17eb4:	mov	r0, #0
   17eb8:	ldr	r1, [r4, #20]
   17ebc:	add	r3, r2, r3, lsl #3
   17ec0:	ldr	r2, [r3, #4]
   17ec4:	bfi	r2, r1, #8, #10
   17ec8:	str	r2, [r3, #4]
   17ecc:	ldrd	r4, [sp]
   17ed0:	ldr	r6, [sp, #8]
   17ed4:	add	sp, sp, #12
   17ed8:	pop	{pc}		; (ldr pc, [sp], #4)
   17edc:	mov	r0, #12
   17ee0:	b	17ecc <__assert_fail@plt+0x6c24>
   17ee4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17ee8:	strd	r6, [sp, #8]
   17eec:	mov	r6, r0
   17ef0:	ldr	r0, [r0]
   17ef4:	str	r8, [sp, #16]
   17ef8:	str	lr, [sp, #20]
   17efc:	cmp	r0, #0
   17f00:	beq	17f34 <__assert_fail@plt+0x6c8c>
   17f04:	ldr	r3, [r6, #8]
   17f08:	cmp	r3, #0
   17f0c:	beq	17f34 <__assert_fail@plt+0x6c8c>
   17f10:	mov	r4, #0
   17f14:	b	17f1c <__assert_fail@plt+0x6c74>
   17f18:	ldr	r0, [r6]
   17f1c:	add	r0, r0, r4, lsl #3
   17f20:	add	r4, r4, #1
   17f24:	bl	15e6c <__assert_fail@plt+0x4bc4>
   17f28:	ldr	r3, [r6, #8]
   17f2c:	cmp	r3, r4
   17f30:	bhi	17f18 <__assert_fail@plt+0x6c70>
   17f34:	ldr	r0, [r6, #12]
   17f38:	bl	24628 <__assert_fail@plt+0x13380>
   17f3c:	ldr	r3, [r6, #8]
   17f40:	cmp	r3, #0
   17f44:	movne	r4, #0
   17f48:	movne	r5, r4
   17f4c:	beq	17fac <__assert_fail@plt+0x6d04>
   17f50:	ldr	r3, [r6, #24]
   17f54:	add	r5, r5, #1
   17f58:	cmp	r3, #0
   17f5c:	add	r2, r3, r4
   17f60:	beq	17f6c <__assert_fail@plt+0x6cc4>
   17f64:	ldr	r0, [r2, #8]
   17f68:	bl	24628 <__assert_fail@plt+0x13380>
   17f6c:	ldr	r3, [r6, #28]
   17f70:	cmp	r3, #0
   17f74:	add	r2, r3, r4
   17f78:	beq	17f84 <__assert_fail@plt+0x6cdc>
   17f7c:	ldr	r0, [r2, #8]
   17f80:	bl	24628 <__assert_fail@plt+0x13380>
   17f84:	ldr	r3, [r6, #20]
   17f88:	cmp	r3, #0
   17f8c:	add	r2, r3, r4
   17f90:	beq	17f9c <__assert_fail@plt+0x6cf4>
   17f94:	ldr	r0, [r2, #8]
   17f98:	bl	24628 <__assert_fail@plt+0x13380>
   17f9c:	ldr	r3, [r6, #8]
   17fa0:	add	r4, r4, #12
   17fa4:	cmp	r3, r5
   17fa8:	bhi	17f50 <__assert_fail@plt+0x6ca8>
   17fac:	ldr	r0, [r6, #20]
   17fb0:	bl	24628 <__assert_fail@plt+0x13380>
   17fb4:	ldr	r0, [r6, #24]
   17fb8:	bl	24628 <__assert_fail@plt+0x13380>
   17fbc:	ldr	r0, [r6, #28]
   17fc0:	bl	24628 <__assert_fail@plt+0x13380>
   17fc4:	ldr	r0, [r6]
   17fc8:	bl	24628 <__assert_fail@plt+0x13380>
   17fcc:	ldr	r0, [r6, #32]
   17fd0:	cmp	r0, #0
   17fd4:	movne	r7, #0
   17fd8:	beq	18034 <__assert_fail@plt+0x6d8c>
   17fdc:	add	r5, r7, r7, lsl #1
   17fe0:	ldr	r3, [r0, r5, lsl #2]
   17fe4:	add	r5, r0, r5, lsl #2
   17fe8:	cmp	r3, #0
   17fec:	movgt	r4, #0
   17ff0:	ble	18010 <__assert_fail@plt+0x6d68>
   17ff4:	ldr	r3, [r5, #8]
   17ff8:	ldr	r0, [r3, r4, lsl #2]
   17ffc:	add	r4, r4, #1
   18000:	bl	1612c <__assert_fail@plt+0x4e84>
   18004:	ldr	r3, [r5]
   18008:	cmp	r4, r3
   1800c:	blt	17ff4 <__assert_fail@plt+0x6d4c>
   18010:	ldr	r0, [r5, #8]
   18014:	add	r7, r7, #1
   18018:	bl	24628 <__assert_fail@plt+0x13380>
   1801c:	ldr	r3, [r6, #68]	; 0x44
   18020:	cmp	r3, r7
   18024:	bcc	18030 <__assert_fail@plt+0x6d88>
   18028:	ldr	r0, [r6, #32]
   1802c:	b	17fdc <__assert_fail@plt+0x6d34>
   18030:	ldr	r0, [r6, #32]
   18034:	bl	24628 <__assert_fail@plt+0x13380>
   18038:	ldr	r0, [r6, #60]	; 0x3c
   1803c:	movw	r3, #22200	; 0x56b8
   18040:	movt	r3, #2
   18044:	cmp	r0, r3
   18048:	beq	18050 <__assert_fail@plt+0x6da8>
   1804c:	bl	24628 <__assert_fail@plt+0x13380>
   18050:	ldr	r0, [r6, #132]	; 0x84
   18054:	bl	24628 <__assert_fail@plt+0x13380>
   18058:	mov	r0, r6
   1805c:	ldrd	r4, [sp]
   18060:	ldrd	r6, [sp, #8]
   18064:	ldr	r8, [sp, #16]
   18068:	ldr	lr, [sp, #20]
   1806c:	add	sp, sp, #24
   18070:	b	24628 <__assert_fail@plt+0x13380>
   18074:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18078:	mov	r5, #0
   1807c:	strd	r6, [sp, #8]
   18080:	ldr	r7, [r0, #28]
   18084:	strd	r8, [sp, #16]
   18088:	strd	sl, [sp, #24]
   1808c:	mov	sl, r1
   18090:	add	r1, r1, r1, lsl #1
   18094:	str	lr, [sp, #32]
   18098:	sub	sp, sp, #44	; 0x2c
   1809c:	add	r7, r7, r1, lsl #2
   180a0:	str	r2, [sp, #12]
   180a4:	str	r5, [sp, #28]
   180a8:	str	r5, [sp, #32]
   180ac:	str	r5, [sp, #36]	; 0x24
   180b0:	ldr	r6, [r7, #4]
   180b4:	str	r3, [sp, #20]
   180b8:	cmp	r6, r5
   180bc:	ble	182a4 <__assert_fail@plt+0x6ffc>
   180c0:	add	r3, r7, #8
   180c4:	mov	r9, r0
   180c8:	str	r3, [sp, #8]
   180cc:	add	r3, r2, #8
   180d0:	str	r3, [sp, #16]
   180d4:	b	18128 <__assert_fail@plt+0x6e80>
   180d8:	cmp	r0, #0
   180dc:	bne	181b0 <__assert_fail@plt+0x6f08>
   180e0:	mov	r2, r3
   180e4:	ldr	r3, [sp, #12]
   180e8:	ldr	r1, [sp, #16]
   180ec:	ldr	r0, [r3, #4]
   180f0:	bl	16a58 <__assert_fail@plt+0x57b0>
   180f4:	cmp	r0, #0
   180f8:	beq	181b0 <__assert_fail@plt+0x6f08>
   180fc:	ldr	r2, [r9, #28]
   18100:	add	r0, sp, #28
   18104:	ldr	r1, [sp, #20]
   18108:	add	r2, r2, r4
   1810c:	bl	16fdc <__assert_fail@plt+0x5d34>
   18110:	cmp	r0, #0
   18114:	bne	18294 <__assert_fail@plt+0x6fec>
   18118:	ldr	r6, [r7, #4]
   1811c:	add	r5, r5, #1
   18120:	cmp	r6, r5
   18124:	ble	181e0 <__assert_fail@plt+0x6f38>
   18128:	ldr	r3, [r7, #8]
   1812c:	ldr	r4, [r3, r5, lsl #2]
   18130:	cmp	sl, r4
   18134:	beq	1811c <__assert_fail@plt+0x6e74>
   18138:	ldr	r3, [r9]
   1813c:	add	r3, r3, r4, lsl #3
   18140:	ldrb	r3, [r3, #4]
   18144:	tst	r3, #8
   18148:	beq	1811c <__assert_fail@plt+0x6e74>
   1814c:	ldr	r8, [r9, #20]
   18150:	add	r4, r4, r4, lsl #1
   18154:	mov	r0, r6
   18158:	lsl	r4, r4, #2
   1815c:	ldr	r1, [sp, #8]
   18160:	add	r8, r8, r4
   18164:	ldr	fp, [r8, #8]
   18168:	ldr	r3, [fp]
   1816c:	mov	r2, r3
   18170:	str	r3, [sp, #4]
   18174:	bl	16a58 <__assert_fail@plt+0x57b0>
   18178:	ldr	r2, [r8, #4]
   1817c:	ldr	r3, [sp, #4]
   18180:	cmp	r2, #1
   18184:	bgt	180d8 <__assert_fail@plt+0x6e30>
   18188:	cmp	r0, #0
   1818c:	moveq	r2, r3
   18190:	bne	1811c <__assert_fail@plt+0x6e74>
   18194:	ldr	r3, [sp, #12]
   18198:	ldr	r1, [sp, #16]
   1819c:	ldr	r0, [r3, #4]
   181a0:	bl	16a58 <__assert_fail@plt+0x57b0>
   181a4:	cmp	r0, #0
   181a8:	beq	1811c <__assert_fail@plt+0x6e74>
   181ac:	b	180fc <__assert_fail@plt+0x6e54>
   181b0:	ldr	r8, [fp, #4]
   181b4:	cmp	r8, #0
   181b8:	ble	1811c <__assert_fail@plt+0x6e74>
   181bc:	mov	r2, r8
   181c0:	mov	r0, r6
   181c4:	ldr	r1, [sp, #8]
   181c8:	bl	16a58 <__assert_fail@plt+0x57b0>
   181cc:	cmp	r0, #0
   181d0:	beq	18194 <__assert_fail@plt+0x6eec>
   181d4:	add	r5, r5, #1
   181d8:	cmp	r6, r5
   181dc:	bgt	18128 <__assert_fail@plt+0x6e80>
   181e0:	cmp	r6, #0
   181e4:	ble	18268 <__assert_fail@plt+0x6fc0>
   181e8:	ldr	sl, [sp, #12]
   181ec:	mov	r4, #0
   181f0:	add	r8, sl, #8
   181f4:	add	r9, sl, #4
   181f8:	ldr	r3, [r7, #8]
   181fc:	add	r1, sp, #36	; 0x24
   18200:	ldr	r0, [sp, #32]
   18204:	ldr	r5, [r3, r4, lsl #2]
   18208:	add	r4, r4, #1
   1820c:	mov	r2, r5
   18210:	bl	16a58 <__assert_fail@plt+0x57b0>
   18214:	cmp	r0, #0
   18218:	mov	r1, r8
   1821c:	bne	18260 <__assert_fail@plt+0x6fb8>
   18220:	ldr	r5, [sl, #4]
   18224:	mov	r0, r5
   18228:	bl	16a58 <__assert_fail@plt+0x57b0>
   1822c:	sub	r3, r0, #1
   18230:	sub	ip, r5, #1
   18234:	cmp	r3, r5
   18238:	mov	r2, r3
   1823c:	movlt	r5, #0
   18240:	movge	r5, #1
   18244:	orrs	r3, r5, r3, lsr #31
   18248:	mov	r1, r8
   1824c:	mov	r0, r9
   18250:	bne	18260 <__assert_fail@plt+0x6fb8>
   18254:	str	ip, [sl, #4]
   18258:	bl	16bf8 <__assert_fail@plt+0x5950>
   1825c:	ldr	r6, [r7, #4]
   18260:	cmp	r6, r4
   18264:	bgt	181f8 <__assert_fail@plt+0x6f50>
   18268:	ldr	r0, [sp, #36]	; 0x24
   1826c:	mov	r4, #0
   18270:	bl	24628 <__assert_fail@plt+0x13380>
   18274:	mov	r0, r4
   18278:	add	sp, sp, #44	; 0x2c
   1827c:	ldrd	r4, [sp]
   18280:	ldrd	r6, [sp, #8]
   18284:	ldrd	r8, [sp, #16]
   18288:	ldrd	sl, [sp, #24]
   1828c:	add	sp, sp, #32
   18290:	pop	{pc}		; (ldr pc, [sp], #4)
   18294:	mov	r4, r0
   18298:	ldr	r0, [sp, #36]	; 0x24
   1829c:	bl	24628 <__assert_fail@plt+0x13380>
   182a0:	b	18274 <__assert_fail@plt+0x6fcc>
   182a4:	mov	r0, r5
   182a8:	b	1826c <__assert_fail@plt+0x6fc4>
   182ac:	ldr	r3, [r0]
   182b0:	strd	r4, [sp, #-16]!
   182b4:	mov	r5, r0
   182b8:	str	r6, [sp, #8]
   182bc:	str	lr, [sp, #12]
   182c0:	cmp	r3, #0
   182c4:	ble	18304 <__assert_fail@plt+0x705c>
   182c8:	mov	r4, #0
   182cc:	mov	r6, r4
   182d0:	ldr	r3, [r5, #8]
   182d4:	add	r6, r6, #1
   182d8:	add	r3, r3, r4
   182dc:	ldr	r0, [r3, #20]
   182e0:	bl	24628 <__assert_fail@plt+0x13380>
   182e4:	ldr	r3, [r5, #8]
   182e8:	add	r3, r3, r4
   182ec:	add	r4, r4, #24
   182f0:	ldr	r0, [r3, #8]
   182f4:	bl	24628 <__assert_fail@plt+0x13380>
   182f8:	ldr	r3, [r5]
   182fc:	cmp	r6, r3
   18300:	blt	182d0 <__assert_fail@plt+0x7028>
   18304:	ldr	r0, [r5, #8]
   18308:	ldrd	r4, [sp]
   1830c:	ldr	r6, [sp, #8]
   18310:	ldr	lr, [sp, #12]
   18314:	add	sp, sp, #16
   18318:	b	24628 <__assert_fail@plt+0x13380>
   1831c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18320:	strd	r6, [sp, #8]
   18324:	subs	r6, r1, #0
   18328:	str	r8, [sp, #16]
   1832c:	str	lr, [sp, #20]
   18330:	beq	18424 <__assert_fail@plt+0x717c>
   18334:	ldr	r2, [r6, #4]
   18338:	cmp	r2, #0
   1833c:	mov	ip, r2
   18340:	beq	18424 <__assert_fail@plt+0x717c>
   18344:	ldm	r0, {r1, r3}
   18348:	mov	r5, r0
   1834c:	add	r4, r3, r2, lsl #1
   18350:	cmp	r1, r4
   18354:	blt	18460 <__assert_fail@plt+0x71b8>
   18358:	cmp	r3, #0
   1835c:	beq	184a0 <__assert_fail@plt+0x71f8>
   18360:	sub	r2, r2, #1
   18364:	sub	r3, r3, #1
   18368:	mvn	r7, r2
   1836c:	mvn	lr, r3
   18370:	tst	r7, lr
   18374:	bpl	183b4 <__assert_fail@plt+0x710c>
   18378:	ldr	r1, [r5, #8]
   1837c:	ldr	r0, [r6, #8]
   18380:	ldr	ip, [r1, r3, lsl #2]
   18384:	ldr	r0, [r0, r2, lsl #2]
   18388:	cmp	ip, r0
   1838c:	beq	18360 <__assert_fail@plt+0x70b8>
   18390:	subge	r3, r3, #1
   18394:	mvnge	lr, r3
   18398:	bge	18370 <__assert_fail@plt+0x70c8>
   1839c:	sub	r2, r2, #1
   183a0:	sub	r4, r4, #1
   183a4:	mvn	r7, r2
   183a8:	tst	r7, lr
   183ac:	str	r0, [r1, r4, lsl #2]
   183b0:	bmi	18378 <__assert_fail@plt+0x70d0>
   183b4:	cmp	r2, #0
   183b8:	blt	183d8 <__assert_fail@plt+0x7130>
   183bc:	ldr	r0, [r5, #8]
   183c0:	add	r2, r2, #1
   183c4:	sub	r4, r4, r2
   183c8:	lsl	r2, r2, #2
   183cc:	ldr	r1, [r6, #8]
   183d0:	add	r0, r0, r4, lsl #2
   183d4:	bl	11038 <memcpy@plt>
   183d8:	ldr	r3, [r5, #4]
   183dc:	ldr	r0, [r6, #4]
   183e0:	add	r0, r3, r0, lsl #1
   183e4:	subs	r2, r0, r4
   183e8:	sub	r0, r0, #1
   183ec:	beq	18424 <__assert_fail@plt+0x717c>
   183f0:	ldr	r1, [r5, #8]
   183f4:	add	ip, r3, r2
   183f8:	sub	r3, r3, #1
   183fc:	str	ip, [r5, #4]
   18400:	ldr	lr, [r1, r0, lsl #2]
   18404:	add	r5, r3, r2
   18408:	ldr	ip, [r1, r3, lsl #2]
   1840c:	cmp	lr, ip
   18410:	ble	1843c <__assert_fail@plt+0x7194>
   18414:	subs	r2, r2, #1
   18418:	sub	r0, r0, #1
   1841c:	str	lr, [r1, r5, lsl #2]
   18420:	bne	18400 <__assert_fail@plt+0x7158>
   18424:	mov	r0, #0
   18428:	ldrd	r4, [sp]
   1842c:	ldrd	r6, [sp, #8]
   18430:	ldr	r8, [sp, #16]
   18434:	add	sp, sp, #20
   18438:	pop	{pc}		; (ldr pc, [sp], #4)
   1843c:	subs	r3, r3, #1
   18440:	str	ip, [r1, r5, lsl #2]
   18444:	bpl	18400 <__assert_fail@plt+0x7158>
   18448:	mov	r0, r1
   1844c:	lsl	r2, r2, #2
   18450:	add	r1, r1, r4, lsl #2
   18454:	bl	11038 <memcpy@plt>
   18458:	mov	r0, #0
   1845c:	b	18428 <__assert_fail@plt+0x7180>
   18460:	add	r2, r2, r1
   18464:	ldr	r0, [r0, #8]
   18468:	lsl	r1, r2, #3
   1846c:	lsl	r4, r2, #1
   18470:	bl	2447c <__assert_fail@plt+0x131d4>
   18474:	cmp	r0, #0
   18478:	beq	184bc <__assert_fail@plt+0x7214>
   1847c:	ldr	r3, [r5, #4]
   18480:	str	r4, [r5]
   18484:	str	r0, [r5, #8]
   18488:	cmp	r3, #0
   1848c:	ldreq	ip, [r6, #4]
   18490:	beq	184a4 <__assert_fail@plt+0x71fc>
   18494:	ldr	r2, [r6, #4]
   18498:	add	r4, r3, r2, lsl #1
   1849c:	b	18360 <__assert_fail@plt+0x70b8>
   184a0:	ldr	r0, [r0, #8]
   184a4:	ldr	r1, [r6, #8]
   184a8:	str	ip, [r5, #4]
   184ac:	ldr	r2, [r6, #4]
   184b0:	lsl	r2, r2, #2
   184b4:	bl	11038 <memcpy@plt>
   184b8:	b	18424 <__assert_fail@plt+0x717c>
   184bc:	mov	r0, #12
   184c0:	b	18428 <__assert_fail@plt+0x7180>
   184c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   184c8:	mov	r4, r2
   184cc:	mov	r5, r1
   184d0:	ldr	r2, [r1, #20]
   184d4:	mov	r1, #0
   184d8:	strd	r6, [sp, #8]
   184dc:	add	r7, r4, r4, lsl #1
   184e0:	strd	r8, [sp, #16]
   184e4:	mov	r8, r0
   184e8:	lsl	r7, r7, #2
   184ec:	strd	sl, [sp, #24]
   184f0:	mov	sl, r3
   184f4:	str	lr, [sp, #32]
   184f8:	sub	sp, sp, #36	; 0x24
   184fc:	add	r2, r2, r7
   18500:	ldr	r3, [r2, #4]
   18504:	str	r1, [sp, #12]
   18508:	add	r3, r3, #1
   1850c:	lsl	r0, r3, #2
   18510:	str	r3, [sp, #8]
   18514:	bl	24440 <__assert_fail@plt+0x13198>
   18518:	cmp	r0, #0
   1851c:	str	r0, [sp, #16]
   18520:	beq	18710 <__assert_fail@plt+0x7468>
   18524:	ldr	lr, [r5]
   18528:	lsl	r6, r4, #3
   1852c:	mov	r3, #65280	; 0xff00
   18530:	movt	r3, #3
   18534:	mvn	r9, #0
   18538:	ldr	r2, [sp, #12]
   1853c:	ldr	r1, [r5, #24]
   18540:	add	ip, lr, r6
   18544:	str	r4, [r0, r2, lsl #2]
   18548:	add	r2, r2, #1
   1854c:	ldr	fp, [ip, #4]
   18550:	add	r0, r1, r7
   18554:	str	r2, [sp, #12]
   18558:	str	r9, [r0, #4]
   1855c:	and	r3, r3, fp
   18560:	cmp	r3, #0
   18564:	beq	18594 <__assert_fail@plt+0x72ec>
   18568:	ldr	r3, [r5, #20]
   1856c:	add	r3, r3, r7
   18570:	ldr	r2, [r3, #4]
   18574:	cmp	r2, #0
   18578:	beq	18660 <__assert_fail@plt+0x73b8>
   1857c:	ldr	r3, [r3, #8]
   18580:	ldr	r3, [r3]
   18584:	add	lr, lr, r3, lsl #3
   18588:	ldrb	r3, [lr, #6]
   1858c:	tst	r3, #4
   18590:	beq	186dc <__assert_fail@plt+0x7434>
   18594:	ldrb	r3, [ip, #4]
   18598:	tst	r3, #8
   1859c:	beq	1865c <__assert_fail@plt+0x73b4>
   185a0:	ldr	ip, [r5, #20]
   185a4:	add	r3, ip, r7
   185a8:	ldr	r2, [r3, #4]
   185ac:	cmp	r2, #0
   185b0:	movgt	r9, #0
   185b4:	movgt	r6, r9
   185b8:	bgt	18610 <__assert_fail@plt+0x7368>
   185bc:	b	1865c <__assert_fail@plt+0x73b4>
   185c0:	ldrd	r2, [r0]
   185c4:	strd	r2, [sp, #20]
   185c8:	ldr	r3, [r0, #8]
   185cc:	str	r3, [fp, #8]
   185d0:	mov	r1, fp
   185d4:	add	r0, sp, #8
   185d8:	bl	1831c <__assert_fail@plt+0x7074>
   185dc:	cmp	r0, #0
   185e0:	bne	18688 <__assert_fail@plt+0x73e0>
   185e4:	ldr	r1, [r5, #24]
   185e8:	add	r4, r1, r4
   185ec:	ldr	r3, [r4, #4]
   185f0:	cmp	r3, #0
   185f4:	beq	186a4 <__assert_fail@plt+0x73fc>
   185f8:	ldr	ip, [r5, #20]
   185fc:	add	r3, ip, r7
   18600:	add	r6, r6, #1
   18604:	ldr	r2, [r3, #4]
   18608:	cmp	r2, r6
   1860c:	ble	186bc <__assert_fail@plt+0x7414>
   18610:	ldr	r3, [r3, #8]
   18614:	add	fp, sp, #20
   18618:	ldr	r2, [r3, r6, lsl #2]
   1861c:	add	r4, r2, r2, lsl #1
   18620:	lsl	r4, r4, #2
   18624:	add	r0, r1, r4
   18628:	ldr	r3, [r0, #4]
   1862c:	cmn	r3, #1
   18630:	moveq	r9, #1
   18634:	beq	185fc <__assert_fail@plt+0x7354>
   18638:	cmp	r3, #0
   1863c:	bne	185c0 <__assert_fail@plt+0x7318>
   18640:	add	fp, sp, #20
   18644:	mov	r1, r5
   18648:	mov	r0, fp
   1864c:	bl	184c4 <__assert_fail@plt+0x721c>
   18650:	cmp	r0, #0
   18654:	beq	185d0 <__assert_fail@plt+0x7328>
   18658:	b	18688 <__assert_fail@plt+0x73e0>
   1865c:	add	r0, r1, r7
   18660:	ldrd	r2, [sp, #8]
   18664:	add	ip, sp, #8
   18668:	strd	r2, [r1, r7]
   1866c:	ldr	r3, [sp, #16]
   18670:	str	r3, [r0, #8]
   18674:	ldr	r1, [ip, #8]
   18678:	mov	r0, #0
   1867c:	ldrd	r2, [sp, #8]
   18680:	strd	r2, [r8]
   18684:	str	r1, [r8, #8]
   18688:	add	sp, sp, #36	; 0x24
   1868c:	ldrd	r4, [sp]
   18690:	ldrd	r6, [sp, #8]
   18694:	ldrd	r8, [sp, #16]
   18698:	ldrd	sl, [sp, #24]
   1869c:	add	sp, sp, #32
   186a0:	pop	{pc}		; (ldr pc, [sp], #4)
   186a4:	ldr	r0, [sp, #28]
   186a8:	mov	r9, #1
   186ac:	bl	24628 <__assert_fail@plt+0x13380>
   186b0:	ldr	ip, [r5, #20]
   186b4:	ldr	r1, [r5, #24]
   186b8:	b	185fc <__assert_fail@plt+0x7354>
   186bc:	eor	sl, sl, #1
   186c0:	add	r0, r1, r7
   186c4:	tst	r9, sl
   186c8:	beq	18660 <__assert_fail@plt+0x73b8>
   186cc:	mov	r3, #0
   186d0:	add	ip, sp, #8
   186d4:	str	r3, [r0, #4]
   186d8:	b	18674 <__assert_fail@plt+0x73cc>
   186dc:	ubfx	fp, fp, #8, #10
   186e0:	mov	r3, r4
   186e4:	mov	r2, r4
   186e8:	mov	r1, r4
   186ec:	mov	r0, r5
   186f0:	str	fp, [sp]
   186f4:	bl	165c8 <__assert_fail@plt+0x5320>
   186f8:	cmp	r0, #0
   186fc:	bne	18688 <__assert_fail@plt+0x73e0>
   18700:	ldr	ip, [r5]
   18704:	ldr	r1, [r5, #24]
   18708:	add	ip, ip, r6
   1870c:	b	18594 <__assert_fail@plt+0x72ec>
   18710:	mov	r0, #12
   18714:	b	18688 <__assert_fail@plt+0x73e0>
   18718:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1871c:	mov	r5, r2
   18720:	mov	r4, r3
   18724:	strd	r6, [sp, #8]
   18728:	mov	r6, #0
   1872c:	mov	r7, r0
   18730:	strd	r8, [sp, #16]
   18734:	mov	r8, r1
   18738:	ldr	r1, [r1, #4]
   1873c:	strd	sl, [sp, #24]
   18740:	str	lr, [sp, #32]
   18744:	sub	sp, sp, #28
   18748:	lsl	r0, r1, #2
   1874c:	str	r1, [sp, #12]
   18750:	str	r6, [sp, #16]
   18754:	bl	24440 <__assert_fail@plt+0x13198>
   18758:	cmp	r0, r6
   1875c:	str	r0, [sp, #20]
   18760:	beq	18860 <__assert_fail@plt+0x75b8>
   18764:	ldr	r3, [r8, #4]
   18768:	add	r9, sp, #12
   1876c:	cmp	r3, r6
   18770:	ble	18808 <__assert_fail@plt+0x7560>
   18774:	ldr	r3, [r8, #8]
   18778:	ldr	r1, [r7, #24]
   1877c:	ldr	r2, [r3, r6, lsl #2]
   18780:	add	r3, r2, r2, lsl #1
   18784:	add	r1, r1, r3, lsl #2
   18788:	ldr	fp, [r1, #4]
   1878c:	cmp	fp, #0
   18790:	ble	18828 <__assert_fail@plt+0x7580>
   18794:	ldr	ip, [r1, #8]
   18798:	mov	r3, #0
   1879c:	ldr	sl, [r7]
   187a0:	sub	ip, ip, #4
   187a4:	b	187b0 <__assert_fail@plt+0x7508>
   187a8:	cmp	fp, r3
   187ac:	beq	18828 <__assert_fail@plt+0x7580>
   187b0:	ldr	r0, [ip, #4]!
   187b4:	add	r3, r3, #1
   187b8:	add	lr, sl, r0, lsl #3
   187bc:	ldrb	lr, [lr, #4]
   187c0:	cmp	r4, lr
   187c4:	bne	187a8 <__assert_fail@plt+0x7500>
   187c8:	ldr	lr, [sl, r0, lsl #3]
   187cc:	cmp	r5, lr
   187d0:	bne	187a8 <__assert_fail@plt+0x7500>
   187d4:	cmn	r0, #1
   187d8:	beq	18828 <__assert_fail@plt+0x7580>
   187dc:	mov	r3, r5
   187e0:	mov	r1, r9
   187e4:	str	r4, [sp]
   187e8:	mov	r0, r7
   187ec:	bl	16ae0 <__assert_fail@plt+0x5838>
   187f0:	subs	sl, r0, #0
   187f4:	bne	18838 <__assert_fail@plt+0x7590>
   187f8:	ldr	r3, [r8, #4]
   187fc:	add	r6, r6, #1
   18800:	cmp	r3, r6
   18804:	bgt	18774 <__assert_fail@plt+0x74cc>
   18808:	ldr	r0, [r8, #8]
   1880c:	mov	sl, #0
   18810:	bl	24628 <__assert_fail@plt+0x13380>
   18814:	ldr	r1, [r9, #8]
   18818:	ldrd	r2, [sp, #12]
   1881c:	strd	r2, [r8]
   18820:	str	r1, [r8, #8]
   18824:	b	18840 <__assert_fail@plt+0x7598>
   18828:	mov	r0, r9
   1882c:	bl	1831c <__assert_fail@plt+0x7074>
   18830:	subs	sl, r0, #0
   18834:	beq	187f8 <__assert_fail@plt+0x7550>
   18838:	ldr	r0, [sp, #20]
   1883c:	bl	24628 <__assert_fail@plt+0x13380>
   18840:	mov	r0, sl
   18844:	add	sp, sp, #28
   18848:	ldrd	r4, [sp]
   1884c:	ldrd	r6, [sp, #8]
   18850:	ldrd	r8, [sp, #16]
   18854:	ldrd	sl, [sp, #24]
   18858:	add	sp, sp, #32
   1885c:	pop	{pc}		; (ldr pc, [sp], #4)
   18860:	mov	sl, #12
   18864:	b	18840 <__assert_fail@plt+0x7598>
   18868:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1886c:	mov	r5, #0
   18870:	strd	r6, [sp, #8]
   18874:	ldr	r7, [r0, #108]	; 0x6c
   18878:	strd	r8, [sp, #16]
   1887c:	strd	sl, [sp, #24]
   18880:	str	lr, [sp, #32]
   18884:	sub	sp, sp, #36	; 0x24
   18888:	mov	r4, r7
   1888c:	cmp	r5, r4
   18890:	bge	188ec <__assert_fail@plt+0x7644>
   18894:	add	lr, r5, r4
   18898:	ldr	r6, [r0, #116]	; 0x74
   1889c:	add	lr, lr, lr, lsr #31
   188a0:	asr	lr, lr, #1
   188a4:	add	ip, lr, lr, lsl #1
   188a8:	add	ip, r6, ip, lsl #3
   188ac:	ldr	ip, [ip, #4]
   188b0:	cmp	r2, ip
   188b4:	ble	188dc <__assert_fail@plt+0x7634>
   188b8:	b	18b18 <__assert_fail@plt+0x7870>
   188bc:	asr	ip, ip, #1
   188c0:	add	r4, ip, ip, lsl #1
   188c4:	mov	r8, ip
   188c8:	add	r4, r6, r4, lsl #3
   188cc:	ldr	r4, [r4, #4]
   188d0:	cmp	r2, r4
   188d4:	bgt	18b20 <__assert_fail@plt+0x7878>
   188d8:	mov	lr, ip
   188dc:	add	ip, lr, r5
   188e0:	cmp	lr, r5
   188e4:	add	ip, ip, ip, lsr #31
   188e8:	bgt	188bc <__assert_fail@plt+0x7614>
   188ec:	cmp	r7, r5
   188f0:	ble	18b2c <__assert_fail@plt+0x7884>
   188f4:	ldr	r4, [r0, #116]	; 0x74
   188f8:	add	ip, r5, r5, lsl #1
   188fc:	cmn	r5, #1
   18900:	movne	r5, #0
   18904:	moveq	r5, #1
   18908:	lsl	ip, ip, #3
   1890c:	add	lr, r4, ip
   18910:	ldr	lr, [lr, #4]
   18914:	cmp	lr, r2
   18918:	orrne	r5, r5, #1
   1891c:	cmp	r5, #0
   18920:	bne	18b2c <__assert_fail@plt+0x7884>
   18924:	ldr	sl, [r0, #84]	; 0x54
   18928:	mov	r6, r2
   1892c:	mov	r7, r0
   18930:	add	r9, r1, #8
   18934:	str	r1, [sp]
   18938:	str	r3, [sp, #12]
   1893c:	add	r3, ip, #24
   18940:	str	r3, [sp, #8]
   18944:	ldr	r3, [sp, #8]
   18948:	add	r4, r4, r3
   1894c:	b	18a00 <__assert_fail@plt+0x7758>
   18950:	ldr	r3, [r7, #100]	; 0x64
   18954:	ldr	r2, [sl, #12]
   18958:	ldr	fp, [r3, r5, lsl #2]
   1895c:	ldr	r8, [r2, r8, lsl #2]
   18960:	cmp	fp, #0
   18964:	beq	18ae8 <__assert_fail@plt+0x7840>
   18968:	mov	r2, r8
   1896c:	add	r1, fp, #12
   18970:	ldr	r0, [fp, #8]
   18974:	bl	16a58 <__assert_fail@plt+0x57b0>
   18978:	cmp	r0, #0
   1897c:	bne	189f0 <__assert_fail@plt+0x7748>
   18980:	add	r2, sp, #20
   18984:	add	r1, fp, #4
   18988:	mov	r0, r2
   1898c:	str	r2, [sp, #4]
   18990:	bl	17680 <__assert_fail@plt+0x63d8>
   18994:	ldr	r2, [sp, #4]
   18998:	mov	r1, r8
   1899c:	str	r0, [sp, #16]
   189a0:	mov	r0, r2
   189a4:	bl	16484 <__assert_fail@plt+0x51dc>
   189a8:	eor	r0, r0, #1
   189ac:	ldr	r2, [sp, #4]
   189b0:	ldr	r3, [sp, #16]
   189b4:	cmp	r3, #0
   189b8:	orrne	r0, r0, #1
   189bc:	tst	r0, #255	; 0xff
   189c0:	bne	18b5c <__assert_fail@plt+0x78b4>
   189c4:	ldr	r8, [r7, #100]	; 0x64
   189c8:	mov	r1, sl
   189cc:	add	r0, sp, #16
   189d0:	bl	17b5c <__assert_fail@plt+0x68b4>
   189d4:	str	r0, [r8, r5, lsl #2]
   189d8:	ldr	r0, [sp, #28]
   189dc:	bl	24628 <__assert_fail@plt+0x13380>
   189e0:	ldr	r3, [r7, #100]	; 0x64
   189e4:	ldr	r3, [r3, r5, lsl #2]
   189e8:	cmp	r3, #0
   189ec:	beq	18b4c <__assert_fail@plt+0x78a4>
   189f0:	add	r4, r4, #24
   189f4:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   189f8:	cmp	r3, #0
   189fc:	beq	18b2c <__assert_fail@plt+0x7884>
   18a00:	ldr	r3, [sp]
   18a04:	mov	r1, r9
   18a08:	ldr	r8, [r4, #-24]	; 0xffffffe8
   18a0c:	ldr	fp, [r3, #4]
   18a10:	mov	r2, r8
   18a14:	mov	r0, fp
   18a18:	bl	16a58 <__assert_fail@plt+0x57b0>
   18a1c:	cmp	r0, #0
   18a20:	beq	189f0 <__assert_fail@plt+0x7748>
   18a24:	ldr	r2, [r4, #-16]
   18a28:	ldr	r5, [r4, #-12]
   18a2c:	add	r5, r6, r5
   18a30:	sub	r5, r5, r2
   18a34:	cmp	r6, r5
   18a38:	bne	18950 <__assert_fail@plt+0x76a8>
   18a3c:	ldr	r2, [sl, #20]
   18a40:	add	r8, r8, r8, lsl #1
   18a44:	mov	r0, fp
   18a48:	mov	r1, r9
   18a4c:	add	r8, r2, r8, lsl #2
   18a50:	ldr	r3, [r8, #8]
   18a54:	ldr	r5, [r3]
   18a58:	mov	r2, r5
   18a5c:	bl	16a58 <__assert_fail@plt+0x57b0>
   18a60:	cmp	r0, #0
   18a64:	bne	189f0 <__assert_fail@plt+0x7748>
   18a68:	mov	r3, #1
   18a6c:	mov	fp, r0
   18a70:	mov	r0, #4
   18a74:	add	r4, sp, #20
   18a78:	str	r3, [sp, #20]
   18a7c:	str	r3, [sp, #24]
   18a80:	bl	24440 <__assert_fail@plt+0x13198>
   18a84:	cmp	r0, #0
   18a88:	mov	r1, r4
   18a8c:	str	r0, [sp, #28]
   18a90:	ldr	r2, [sp, #12]
   18a94:	streq	fp, [sp, #20]
   18a98:	streq	fp, [sp, #24]
   18a9c:	moveq	fp, #12
   18aa0:	strne	r5, [r0]
   18aa4:	mov	r0, sl
   18aa8:	ldr	r3, [sp, #72]	; 0x48
   18aac:	str	fp, [sp, #16]
   18ab0:	bl	18718 <__assert_fail@plt+0x7470>
   18ab4:	mov	r5, r0
   18ab8:	mov	r1, r4
   18abc:	ldr	r0, [sp]
   18ac0:	bl	1831c <__assert_fail@plt+0x7074>
   18ac4:	mov	r4, r0
   18ac8:	ldr	r0, [sp, #28]
   18acc:	bl	24628 <__assert_fail@plt+0x13380>
   18ad0:	ldr	r0, [sp, #16]
   18ad4:	orr	r3, r5, r4
   18ad8:	orrs	r3, r3, r0
   18adc:	bne	18b78 <__assert_fail@plt+0x78d0>
   18ae0:	ldr	r4, [r7, #116]	; 0x74
   18ae4:	b	18944 <__assert_fail@plt+0x769c>
   18ae8:	mov	r3, #1
   18aec:	mov	r0, #4
   18af0:	str	r3, [sp, #20]
   18af4:	str	r3, [sp, #24]
   18af8:	bl	24440 <__assert_fail@plt+0x13198>
   18afc:	cmp	r0, #0
   18b00:	str	r0, [sp, #28]
   18b04:	beq	18b70 <__assert_fail@plt+0x78c8>
   18b08:	add	r2, sp, #20
   18b0c:	str	r8, [r0]
   18b10:	str	fp, [sp, #16]
   18b14:	b	189c4 <__assert_fail@plt+0x771c>
   18b18:	mov	r8, lr
   18b1c:	mov	lr, r4
   18b20:	add	r5, r8, #1
   18b24:	mov	r4, lr
   18b28:	b	1888c <__assert_fail@plt+0x75e4>
   18b2c:	mov	r0, #0
   18b30:	add	sp, sp, #36	; 0x24
   18b34:	ldrd	r4, [sp]
   18b38:	ldrd	r6, [sp, #8]
   18b3c:	ldrd	r8, [sp, #16]
   18b40:	ldrd	sl, [sp, #24]
   18b44:	add	sp, sp, #32
   18b48:	pop	{pc}		; (ldr pc, [sp], #4)
   18b4c:	ldr	r0, [sp, #16]
   18b50:	cmp	r0, #0
   18b54:	beq	189f0 <__assert_fail@plt+0x7748>
   18b58:	b	18b30 <__assert_fail@plt+0x7888>
   18b5c:	ldr	r0, [sp, #28]
   18b60:	bl	24628 <__assert_fail@plt+0x13380>
   18b64:	ldr	r0, [sp, #16]
   18b68:	cmp	r0, #0
   18b6c:	bne	18b30 <__assert_fail@plt+0x7888>
   18b70:	mov	r0, #12
   18b74:	b	18b30 <__assert_fail@plt+0x7888>
   18b78:	cmp	r0, #0
   18b7c:	bne	18b30 <__assert_fail@plt+0x7888>
   18b80:	cmp	r5, #0
   18b84:	movne	r0, r5
   18b88:	moveq	r0, r4
   18b8c:	b	18b30 <__assert_fail@plt+0x7888>
   18b90:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18b94:	mov	r3, #0
   18b98:	strd	r6, [sp, #8]
   18b9c:	strd	sl, [sp, #24]
   18ba0:	ldr	sl, [r1, #8]
   18ba4:	strd	r8, [sp, #16]
   18ba8:	str	lr, [sp, #32]
   18bac:	sub	sp, sp, #14400	; 0x3840
   18bb0:	sub	sp, sp, #44	; 0x2c
   18bb4:	str	r3, [r1, #44]	; 0x2c
   18bb8:	add	r8, sp, #104	; 0x68
   18bbc:	str	r3, [r1, #48]	; 0x30
   18bc0:	cmp	sl, r3
   18bc4:	str	r3, [r8]
   18bc8:	str	r3, [r8, #4]
   18bcc:	str	r3, [r8, #8]
   18bd0:	str	r3, [r8, #12]
   18bd4:	str	r3, [r8, #16]
   18bd8:	str	r1, [sp, #16]
   18bdc:	str	r3, [r8, #20]
   18be0:	str	r3, [r8, #24]
   18be4:	str	r3, [r8, #28]
   18be8:	ble	195b0 <__assert_fail@plt+0x8308>
   18bec:	add	r7, sp, #1120	; 0x460
   18bf0:	str	r3, [sp, #20]
   18bf4:	add	r7, r7, #8
   18bf8:	str	r3, [sp, #24]
   18bfc:	str	r0, [sp, #36]	; 0x24
   18c00:	str	r3, [sp, #48]	; 0x30
   18c04:	str	r3, [sp, #52]	; 0x34
   18c08:	ldr	r3, [sp, #16]
   18c0c:	ldr	r1, [sp, #24]
   18c10:	ldr	r2, [r3, #12]
   18c14:	lsl	r3, r1, #2
   18c18:	str	r3, [sp, #32]
   18c1c:	ldr	r3, [sp, #36]	; 0x24
   18c20:	ldr	r1, [r2, r1, lsl #2]
   18c24:	ldr	r3, [r3]
   18c28:	add	r2, r3, r1, lsl #3
   18c2c:	ldrb	r6, [r2, #4]
   18c30:	str	r2, [sp, #12]
   18c34:	ldr	r2, [r2, #4]
   18c38:	cmp	r6, #1
   18c3c:	ubfx	r2, r2, #8, #10
   18c40:	beq	18ed0 <__assert_fail@plt+0x7c28>
   18c44:	cmp	r6, #3
   18c48:	beq	19348 <__assert_fail@plt+0x80a0>
   18c4c:	cmp	r6, #5
   18c50:	beq	191ac <__assert_fail@plt+0x7f04>
   18c54:	cmp	r6, #7
   18c58:	beq	192b0 <__assert_fail@plt+0x8008>
   18c5c:	ldr	r3, [sp, #24]
   18c60:	add	r3, r3, #1
   18c64:	cmp	r3, sl
   18c68:	str	r3, [sp, #24]
   18c6c:	blt	18c08 <__assert_fail@plt+0x7960>
   18c70:	ldr	r3, [sp, #20]
   18c74:	ldr	r9, [sp, #36]	; 0x24
   18c78:	cmp	r3, #0
   18c7c:	ble	195ac <__assert_fail@plt+0x8304>
   18c80:	ldr	r3, [sp, #20]
   18c84:	add	r5, sp, #2144	; 0x860
   18c88:	mov	fp, #0
   18c8c:	add	r5, r5, #8
   18c90:	str	fp, [r5, #-2088]	; 0xfffff7d8
   18c94:	add	r3, r3, #1
   18c98:	lsl	r0, r3, #2
   18c9c:	str	r3, [r5, #-2092]	; 0xfffff7d4
   18ca0:	bl	24440 <__assert_fail@plt+0x13198>
   18ca4:	cmp	r0, fp
   18ca8:	str	r0, [r5, #-2084]	; 0xfffff7dc
   18cac:	beq	1954c <__assert_fail@plt+0x82a4>
   18cb0:	mov	r3, #0
   18cb4:	mov	r2, #0
   18cb8:	str	fp, [r5, #-2096]	; 0xfffff7d0
   18cbc:	add	r1, sp, #6208	; 0x1840
   18cc0:	add	r4, sp, #3168	; 0xc60
   18cc4:	str	r8, [sp]
   18cc8:	add	r1, r1, #40	; 0x28
   18ccc:	add	r4, r4, #8
   18cd0:	strd	r2, [r8, #-32]	; 0xffffffe0
   18cd4:	mov	sl, fp
   18cd8:	add	r6, r1, #28
   18cdc:	str	r1, [sp, #24]
   18ce0:	strd	r2, [sp, #80]	; 0x50
   18ce4:	strd	r2, [sp, #88]	; 0x58
   18ce8:	strd	r2, [sp, #96]	; 0x60
   18cec:	sub	r3, r8, #48	; 0x30
   18cf0:	str	r3, [sp, #12]
   18cf4:	str	r4, [sp, #28]
   18cf8:	str	r4, [sp, #40]	; 0x28
   18cfc:	ldr	ip, [r4, #4]
   18d00:	mov	r3, #0
   18d04:	str	r3, [r5, #-2088]	; 0xfffff7d8
   18d08:	cmp	ip, r3
   18d0c:	movgt	r7, #0
   18d10:	ble	18d5c <__assert_fail@plt+0x7ab4>
   18d14:	ldr	r2, [r4, #8]
   18d18:	add	r0, sp, #60	; 0x3c
   18d1c:	ldr	r3, [r9, #12]
   18d20:	ldr	r2, [r2, r7, lsl #2]
   18d24:	ldr	r3, [r3, r2, lsl #2]
   18d28:	cmn	r3, #1
   18d2c:	add	r2, r3, r3, lsl #1
   18d30:	beq	18d50 <__assert_fail@plt+0x7aa8>
   18d34:	ldr	r1, [r9, #24]
   18d38:	add	r1, r1, r2, lsl #2
   18d3c:	bl	1831c <__assert_fail@plt+0x7074>
   18d40:	cmp	r0, #0
   18d44:	str	r0, [r5, #-2096]	; 0xfffff7d0
   18d48:	bne	193ec <__assert_fail@plt+0x8144>
   18d4c:	ldr	ip, [r4, #4]
   18d50:	add	r7, r7, #1
   18d54:	cmp	ip, r7
   18d58:	bgt	18d14 <__assert_fail@plt+0x7a6c>
   18d5c:	mov	r3, #0
   18d60:	add	r2, sp, #60	; 0x3c
   18d64:	ldr	r0, [sp, #12]
   18d68:	mov	r1, r9
   18d6c:	bl	17874 <__assert_fail@plt+0x65cc>
   18d70:	ldr	r3, [sp]
   18d74:	cmp	r0, #0
   18d78:	mov	r7, r0
   18d7c:	str	r0, [r3], #4
   18d80:	str	r3, [sp]
   18d84:	beq	19564 <__assert_fail@plt+0x82bc>
   18d88:	ldrsb	r3, [r7, #52]	; 0x34
   18d8c:	cmp	r3, #0
   18d90:	blt	1941c <__assert_fail@plt+0x8174>
   18d94:	add	r3, sp, #1120	; 0x460
   18d98:	str	r7, [r5, sl, lsl #2]
   18d9c:	add	r3, r3, #8
   18da0:	str	r7, [r3, sl, lsl #2]
   18da4:	sub	r7, r8, #36	; 0x24
   18da8:	sub	r1, r6, #32
   18dac:	mov	r2, r7
   18db0:	ldr	r3, [r2, #4]!
   18db4:	ldr	r0, [r1, #4]!
   18db8:	orr	r3, r3, r0
   18dbc:	cmp	r6, r1
   18dc0:	str	r3, [r2]
   18dc4:	bne	18db0 <__assert_fail@plt+0x7b08>
   18dc8:	ldr	r3, [sp, #20]
   18dcc:	add	sl, sl, #1
   18dd0:	add	r4, r4, #12
   18dd4:	add	r6, r6, #32
   18dd8:	cmp	sl, r3
   18ddc:	bne	18cfc <__assert_fail@plt+0x7a54>
   18de0:	cmp	fp, #0
   18de4:	bne	195f0 <__assert_fail@plt+0x8348>
   18de8:	mov	r1, #256	; 0x100
   18dec:	mov	r0, #4
   18df0:	bl	243cc <__assert_fail@plt+0x13124>
   18df4:	ldr	r3, [sp, #16]
   18df8:	cmp	r0, #0
   18dfc:	mov	r6, r0
   18e00:	str	r0, [r3, #44]	; 0x2c
   18e04:	beq	193ec <__assert_fail@plt+0x8144>
   18e08:	ldr	r8, [sp, #24]
   18e0c:	add	r4, r9, #96	; 0x60
   18e10:	mov	lr, r0
   18e14:	add	ip, r0, #1024	; 0x400
   18e18:	ldr	r3, [r7, #4]!
   18e1c:	cmp	r3, #0
   18e20:	movne	r0, lr
   18e24:	movne	r1, #1
   18e28:	beq	18e44 <__assert_fail@plt+0x7b9c>
   18e2c:	tst	r3, #1
   18e30:	bne	19574 <__assert_fail@plt+0x82cc>
   18e34:	lsrs	r3, r3, #1
   18e38:	add	r0, r0, #4
   18e3c:	lsl	r1, r1, #1
   18e40:	bne	18e2c <__assert_fail@plt+0x7b84>
   18e44:	add	lr, lr, #128	; 0x80
   18e48:	add	r4, r4, #4
   18e4c:	cmp	ip, lr
   18e50:	add	r8, r8, #4
   18e54:	bne	18e18 <__assert_fail@plt+0x7b70>
   18e58:	ldr	r3, [r5, #-2080]	; 0xfffff7e0
   18e5c:	ubfx	r3, r3, #10, #1
   18e60:	cmp	r3, #0
   18e64:	beq	18e98 <__assert_fail@plt+0x7bf0>
   18e68:	ldr	ip, [sp, #20]
   18e6c:	add	r2, sp, #6208	; 0x1840
   18e70:	add	r1, r3, #1
   18e74:	add	r2, r2, #40	; 0x28
   18e78:	sub	r0, r3, #1
   18e7c:	add	r2, r2, r3, lsl #5
   18e80:	ldr	r2, [r2, #-32]	; 0xffffffe0
   18e84:	tst	r2, #1024	; 0x400
   18e88:	bne	195dc <__assert_fail@plt+0x8334>
   18e8c:	cmp	ip, r3
   18e90:	mov	r3, r1
   18e94:	bne	18e6c <__assert_fail@plt+0x7bc4>
   18e98:	ldr	r0, [r5, #-2084]	; 0xfffff7dc
   18e9c:	bl	24628 <__assert_fail@plt+0x13380>
   18ea0:	ldr	r3, [sp, #20]
   18ea4:	ldr	r5, [sp, #28]
   18ea8:	ldr	r2, [sp, #40]	; 0x28
   18eac:	add	r3, r3, r3, lsl #1
   18eb0:	add	r4, r2, r3, lsl #2
   18eb4:	add	r5, r5, #12
   18eb8:	ldr	r0, [r5, #-4]
   18ebc:	bl	24628 <__assert_fail@plt+0x13380>
   18ec0:	cmp	r4, r5
   18ec4:	bne	18eb4 <__assert_fail@plt+0x7c0c>
   18ec8:	mov	r0, #1
   18ecc:	b	19290 <__assert_fail@plt+0x7fe8>
   18ed0:	ldrb	r3, [r3, r1, lsl #3]
   18ed4:	asr	r0, r3, #5
   18ed8:	and	r3, r3, #31
   18edc:	ldr	r1, [r8, r0, lsl #2]
   18ee0:	orr	r3, r1, r6, lsl r3
   18ee4:	str	r3, [r8, r0, lsl #2]
   18ee8:	cmp	r2, #0
   18eec:	beq	18fcc <__assert_fail@plt+0x7d24>
   18ef0:	tst	r2, #32
   18ef4:	bne	1920c <__assert_fail@plt+0x7f64>
   18ef8:	tst	r2, #128	; 0x80
   18efc:	bne	19240 <__assert_fail@plt+0x7f98>
   18f00:	tst	r2, #4
   18f04:	beq	18f68 <__assert_fail@plt+0x7cc0>
   18f08:	cmp	r6, #1
   18f0c:	beq	193cc <__assert_fail@plt+0x8124>
   18f10:	ldr	r1, [sp, #36]	; 0x24
   18f14:	ldr	r3, [r1, #92]	; 0x5c
   18f18:	cmp	r3, #1
   18f1c:	ble	1930c <__assert_fail@plt+0x8064>
   18f20:	ldr	lr, [r1, #60]	; 0x3c
   18f24:	add	r0, r1, #96	; 0x60
   18f28:	add	r9, r1, #128	; 0x80
   18f2c:	sub	ip, r8, #4
   18f30:	mov	r1, #0
   18f34:	sub	lr, lr, #4
   18f38:	ldr	r3, [lr, #4]!
   18f3c:	ldr	r5, [r0], #4
   18f40:	ldr	r4, [ip, #4]!
   18f44:	mvn	r3, r3
   18f48:	orr	r3, r3, r5
   18f4c:	cmp	r0, r9
   18f50:	and	r3, r3, r4
   18f54:	orr	r1, r1, r3
   18f58:	str	r3, [ip]
   18f5c:	bne	18f38 <__assert_fail@plt+0x7c90>
   18f60:	cmp	r1, #0
   18f64:	beq	18c5c <__assert_fail@plt+0x79b4>
   18f68:	tst	r2, #8
   18f6c:	beq	18fcc <__assert_fail@plt+0x7d24>
   18f70:	cmp	r6, #1
   18f74:	beq	193b0 <__assert_fail@plt+0x8108>
   18f78:	ldr	r2, [sp, #36]	; 0x24
   18f7c:	ldr	r3, [r2, #92]	; 0x5c
   18f80:	cmp	r3, #1
   18f84:	ble	19374 <__assert_fail@plt+0x80cc>
   18f88:	ldr	lr, [r2, #60]	; 0x3c
   18f8c:	sub	ip, r8, #4
   18f90:	add	r0, r2, #96	; 0x60
   18f94:	add	r5, r2, #128	; 0x80
   18f98:	mov	r1, #0
   18f9c:	sub	lr, lr, #4
   18fa0:	ldr	r2, [r0], #4
   18fa4:	ldr	r4, [lr, #4]!
   18fa8:	ldr	r3, [ip, #4]!
   18fac:	cmp	r5, r0
   18fb0:	and	r2, r2, r4
   18fb4:	bic	r3, r3, r2
   18fb8:	orr	r1, r1, r3
   18fbc:	str	r3, [ip]
   18fc0:	bne	18fa0 <__assert_fail@plt+0x7cf8>
   18fc4:	cmp	r1, #0
   18fc8:	beq	18c5c <__assert_fail@plt+0x79b4>
   18fcc:	ldr	r3, [sp, #20]
   18fd0:	cmp	r3, #0
   18fd4:	movle	r5, #0
   18fd8:	ble	19194 <__assert_fail@plt+0x7eec>
   18fdc:	add	r4, sp, #6272	; 0x1880
   18fe0:	add	r9, sp, #2144	; 0x860
   18fe4:	str	r6, [sp]
   18fe8:	add	r4, r4, #4
   18fec:	mov	r5, #0
   18ff0:	ldr	r6, [sp, #20]
   18ff4:	add	r9, r9, #8
   18ff8:	b	19040 <__assert_fail@plt+0x7d98>
   18ffc:	ldr	r3, [sp, #12]
   19000:	add	r0, sp, #14400	; 0x3840
   19004:	add	r0, r0, #40	; 0x28
   19008:	ldrb	r2, [r3]
   1900c:	asr	r3, r2, #5
   19010:	and	r2, r2, #31
   19014:	add	r3, r0, r3, lsl #2
   19018:	add	r3, r3, r1
   1901c:	sub	r3, r3, #8192	; 0x2000
   19020:	ldr	r3, [r3]
   19024:	lsr	r2, r3, r2
   19028:	tst	r2, #1
   1902c:	bne	19050 <__assert_fail@plt+0x7da8>
   19030:	add	r5, r5, #1
   19034:	add	r4, r4, #32
   19038:	cmp	r5, r6
   1903c:	bge	19190 <__assert_fail@plt+0x7ee8>
   19040:	ldr	r3, [sp]
   19044:	lsl	r1, r5, #5
   19048:	cmp	r3, #1
   1904c:	beq	18ffc <__assert_fail@plt+0x7d54>
   19050:	sub	r1, r8, #4
   19054:	sub	r2, r4, #32
   19058:	mov	sl, r1
   1905c:	mov	r0, r2
   19060:	sub	lr, r7, #4
   19064:	mov	ip, #0
   19068:	ldr	fp, [r0, #4]!
   1906c:	ldr	r3, [sl, #4]!
   19070:	cmp	r0, r4
   19074:	and	r3, r3, fp
   19078:	orr	ip, ip, r3
   1907c:	str	r3, [lr, #4]!
   19080:	bne	19068 <__assert_fail@plt+0x7dc0>
   19084:	cmp	ip, #0
   19088:	beq	19030 <__assert_fail@plt+0x7d88>
   1908c:	mov	sl, #0
   19090:	sub	fp, r9, #4
   19094:	mov	lr, sl
   19098:	ldr	r3, [r1, #4]!
   1909c:	ldr	ip, [r2, #4]!
   190a0:	bic	r0, ip, r3
   190a4:	bic	r3, r3, ip
   190a8:	cmp	r2, r4
   190ac:	orr	lr, lr, r0
   190b0:	orr	sl, sl, r3
   190b4:	str	r0, [fp, #4]!
   190b8:	str	r3, [r1]
   190bc:	bne	19098 <__assert_fail@plt+0x7df0>
   190c0:	add	fp, r5, r5, lsl #1
   190c4:	add	r3, sp, #3168	; 0xc60
   190c8:	cmp	lr, #0
   190cc:	add	r3, r3, #8
   190d0:	str	sl, [sp, #28]
   190d4:	add	lr, r3, fp, lsl #2
   190d8:	str	lr, [sp, #20]
   190dc:	str	r3, [sp, #40]	; 0x28
   190e0:	beq	19164 <__assert_fail@plt+0x7ebc>
   190e4:	add	r3, sp, #14400	; 0x3840
   190e8:	ldrd	r0, [r9]
   190ec:	add	r3, r3, #40	; 0x28
   190f0:	add	ip, r3, r6, lsl #5
   190f4:	ldrd	sl, [r9, #16]
   190f8:	lsl	r3, r6, #1
   190fc:	sub	ip, ip, #8192	; 0x2000
   19100:	strd	r0, [ip]
   19104:	ldrd	r0, [r9, #8]
   19108:	strd	r0, [ip, #8]
   1910c:	ldrd	r0, [r9, #24]
   19110:	strd	sl, [ip, #16]
   19114:	strd	r0, [ip, #24]
   19118:	ldrd	r0, [r7]
   1911c:	strd	r0, [r4, #-28]	; 0xffffffe4
   19120:	add	r0, r3, r6
   19124:	mov	r1, lr
   19128:	ldrd	sl, [r7, #8]
   1912c:	str	r3, [sp, #44]	; 0x2c
   19130:	add	r3, sp, #3168	; 0xc60
   19134:	add	r3, r3, #8
   19138:	add	r0, r3, r0, lsl #2
   1913c:	strd	sl, [r4, #-20]	; 0xffffffec
   19140:	ldrd	sl, [r7, #16]
   19144:	strd	sl, [r4, #-12]
   19148:	ldrd	sl, [r7, #24]
   1914c:	strd	sl, [r4, #-4]
   19150:	bl	17680 <__assert_fail@plt+0x63d8>
   19154:	cmp	r0, #0
   19158:	ldr	r3, [sp, #44]	; 0x2c
   1915c:	bne	193c4 <__assert_fail@plt+0x811c>
   19160:	add	r6, r6, #1
   19164:	ldr	r3, [sp, #16]
   19168:	ldr	r0, [sp, #20]
   1916c:	ldr	r2, [sp, #32]
   19170:	ldr	r3, [r3, #12]
   19174:	ldr	r1, [r3, r2]
   19178:	bl	16484 <__assert_fail@plt+0x51dc>
   1917c:	cmp	r0, #0
   19180:	beq	19260 <__assert_fail@plt+0x7fb8>
   19184:	ldr	r3, [sp, #28]
   19188:	cmp	r3, #0
   1918c:	bne	19030 <__assert_fail@plt+0x7d88>
   19190:	str	r6, [sp, #20]
   19194:	ldr	r3, [sp, #20]
   19198:	cmp	r5, r3
   1919c:	beq	19488 <__assert_fail@plt+0x81e0>
   191a0:	ldr	r3, [sp, #16]
   191a4:	ldr	sl, [r3, #8]
   191a8:	b	18c5c <__assert_fail@plt+0x79b4>
   191ac:	ldr	r1, [sp, #36]	; 0x24
   191b0:	ldr	r3, [r1, #92]	; 0x5c
   191b4:	cmp	r3, #1
   191b8:	ble	192e0 <__assert_fail@plt+0x8038>
   191bc:	ldr	lr, [r1, #60]	; 0x3c
   191c0:	sub	r0, r8, #4
   191c4:	sub	r1, lr, #4
   191c8:	add	lr, lr, #28
   191cc:	ldr	r3, [r0, #4]!
   191d0:	ldr	ip, [r1, #4]!
   191d4:	orr	r3, r3, ip
   191d8:	cmp	r1, lr
   191dc:	str	r3, [r0]
   191e0:	bne	191cc <__assert_fail@plt+0x7f24>
   191e4:	ldr	r3, [sp, #36]	; 0x24
   191e8:	ldr	r3, [r3, #128]	; 0x80
   191ec:	tst	r3, #64	; 0x40
   191f0:	beq	192d0 <__assert_fail@plt+0x8028>
   191f4:	tst	r3, #128	; 0x80
   191f8:	beq	18ee8 <__assert_fail@plt+0x7c40>
   191fc:	ldr	r3, [sp, #104]	; 0x68
   19200:	bic	r3, r3, #1
   19204:	str	r3, [sp, #104]	; 0x68
   19208:	b	18ee8 <__assert_fail@plt+0x7c40>
   1920c:	ldrd	r0, [sp, #48]	; 0x30
   19210:	str	r1, [r8, #4]
   19214:	ldr	r3, [sp, #104]	; 0x68
   19218:	str	r0, [r8]
   1921c:	strd	r0, [r8, #8]
   19220:	strd	r0, [r8, #16]
   19224:	strd	r0, [r8, #24]
   19228:	tst	r3, #1024	; 0x400
   1922c:	beq	18c5c <__assert_fail@plt+0x79b4>
   19230:	mov	r3, #1024	; 0x400
   19234:	tst	r2, #128	; 0x80
   19238:	str	r3, [sp, #104]	; 0x68
   1923c:	beq	18f00 <__assert_fail@plt+0x7c58>
   19240:	ldr	r3, [sp, #48]	; 0x30
   19244:	ldr	r2, [sp, #52]	; 0x34
   19248:	str	r3, [r8]
   1924c:	strd	r2, [r8, #4]
   19250:	strd	r2, [r8, #12]
   19254:	strd	r2, [r8, #20]
   19258:	str	r2, [r8, #28]
   1925c:	b	18c5c <__assert_fail@plt+0x79b4>
   19260:	lsl	r3, r6, #1
   19264:	str	r6, [sp, #20]
   19268:	ldr	r2, [sp, #20]
   1926c:	ldr	r4, [sp, #40]	; 0x28
   19270:	add	r3, r3, r2
   19274:	add	r5, r4, r3, lsl #2
   19278:	add	r4, r4, #12
   1927c:	ldr	r0, [r4, #-4]
   19280:	bl	24628 <__assert_fail@plt+0x13380>
   19284:	cmp	r5, r4
   19288:	bne	19278 <__assert_fail@plt+0x7fd0>
   1928c:	mov	r0, #0
   19290:	add	sp, sp, #14400	; 0x3840
   19294:	add	sp, sp, #44	; 0x2c
   19298:	ldrd	r4, [sp]
   1929c:	ldrd	r6, [sp, #8]
   192a0:	ldrd	r8, [sp, #16]
   192a4:	ldrd	sl, [sp, #24]
   192a8:	add	sp, sp, #32
   192ac:	pop	{pc}		; (ldr pc, [sp], #4)
   192b0:	ldr	r3, [sp, #36]	; 0x24
   192b4:	mvn	r0, #0
   192b8:	mvn	r1, #0
   192bc:	strd	r0, [r8]
   192c0:	strd	r0, [r8, #8]
   192c4:	ldr	r3, [r3, #128]	; 0x80
   192c8:	tst	r3, #64	; 0x40
   192cc:	bne	191f4 <__assert_fail@plt+0x7f4c>
   192d0:	ldr	r1, [sp, #104]	; 0x68
   192d4:	bic	r1, r1, #1024	; 0x400
   192d8:	str	r1, [sp, #104]	; 0x68
   192dc:	b	191f4 <__assert_fail@plt+0x7f4c>
   192e0:	ldr	r3, [sp, #36]	; 0x24
   192e4:	mvn	r0, #0
   192e8:	mvn	r1, #0
   192ec:	strd	r0, [r8]
   192f0:	strd	r0, [r8, #8]
   192f4:	strd	r0, [r8, #16]
   192f8:	ldr	r3, [r3, #128]	; 0x80
   192fc:	strd	r0, [r8, #24]
   19300:	tst	r3, #64	; 0x40
   19304:	bne	191f4 <__assert_fail@plt+0x7f4c>
   19308:	b	192d0 <__assert_fail@plt+0x8028>
   1930c:	ldr	r3, [sp, #36]	; 0x24
   19310:	sub	ip, r8, #4
   19314:	mov	r1, #0
   19318:	add	r0, r3, #96	; 0x60
   1931c:	add	r4, r3, #128	; 0x80
   19320:	ldr	r3, [r0], #4
   19324:	ldr	lr, [ip, #4]!
   19328:	cmp	r0, r4
   1932c:	and	r3, r3, lr
   19330:	orr	r1, r1, r3
   19334:	str	r3, [ip]
   19338:	bne	19320 <__assert_fail@plt+0x8078>
   1933c:	cmp	r1, #0
   19340:	bne	18f68 <__assert_fail@plt+0x7cc0>
   19344:	b	18c5c <__assert_fail@plt+0x79b4>
   19348:	ldr	lr, [r3, r1, lsl #3]
   1934c:	sub	r0, r8, #4
   19350:	sub	r1, lr, #4
   19354:	add	lr, lr, #28
   19358:	ldr	r3, [r0, #4]!
   1935c:	ldr	ip, [r1, #4]!
   19360:	orr	r3, r3, ip
   19364:	cmp	r1, lr
   19368:	str	r3, [r0]
   1936c:	bne	19358 <__assert_fail@plt+0x80b0>
   19370:	b	18ee8 <__assert_fail@plt+0x7c40>
   19374:	ldr	r3, [sp, #36]	; 0x24
   19378:	sub	r0, r8, #4
   1937c:	mov	r1, #0
   19380:	add	r2, r3, #96	; 0x60
   19384:	add	lr, r3, #128	; 0x80
   19388:	ldr	ip, [r2], #4
   1938c:	ldr	r3, [r0, #4]!
   19390:	cmp	lr, r2
   19394:	bic	r3, r3, ip
   19398:	orr	r1, r1, r3
   1939c:	str	r3, [r0]
   193a0:	bne	19388 <__assert_fail@plt+0x80e0>
   193a4:	cmp	r1, #0
   193a8:	beq	18c5c <__assert_fail@plt+0x79b4>
   193ac:	b	18fcc <__assert_fail@plt+0x7d24>
   193b0:	ldr	r3, [sp, #12]
   193b4:	ldrb	r3, [r3, #6]
   193b8:	tst	r3, #64	; 0x40
   193bc:	beq	18f78 <__assert_fail@plt+0x7cd0>
   193c0:	b	19240 <__assert_fail@plt+0x7f98>
   193c4:	str	r6, [sp, #20]
   193c8:	b	19268 <__assert_fail@plt+0x7fc0>
   193cc:	ldr	r3, [sp, #12]
   193d0:	ldrb	r3, [r3, #6]
   193d4:	tst	r3, #64	; 0x40
   193d8:	bne	18f10 <__assert_fail@plt+0x7c68>
   193dc:	b	19240 <__assert_fail@plt+0x7f98>
   193e0:	ldr	r3, [r5, #-2096]	; 0xfffff7d0
   193e4:	cmp	r3, #0
   193e8:	beq	1944c <__assert_fail@plt+0x81a4>
   193ec:	ldr	r0, [r5, #-2084]	; 0xfffff7dc
   193f0:	ldr	r4, [sp, #40]	; 0x28
   193f4:	bl	24628 <__assert_fail@plt+0x13380>
   193f8:	ldr	r3, [sp, #20]
   193fc:	add	r5, r3, r3, lsl #1
   19400:	add	r5, r4, r5, lsl #2
   19404:	add	r4, r4, #12
   19408:	ldr	r0, [r4, #-4]
   1940c:	bl	24628 <__assert_fail@plt+0x13380>
   19410:	cmp	r5, r4
   19414:	bne	19404 <__assert_fail@plt+0x815c>
   19418:	b	1928c <__assert_fail@plt+0x7fe4>
   1941c:	mov	r3, #1
   19420:	add	r2, sp, #60	; 0x3c
   19424:	ldr	r0, [sp, #12]
   19428:	mov	r1, r9
   1942c:	bl	17874 <__assert_fail@plt+0x65cc>
   19430:	add	r3, sp, #1120	; 0x460
   19434:	cmp	r0, #0
   19438:	add	r3, r3, #8
   1943c:	str	r0, [r3, sl, lsl #2]
   19440:	beq	193e0 <__assert_fail@plt+0x8138>
   19444:	cmp	r7, r0
   19448:	beq	19458 <__assert_fail@plt+0x81b0>
   1944c:	ldr	r3, [r9, #92]	; 0x5c
   19450:	cmp	r3, #2
   19454:	movge	fp, #1
   19458:	mov	r3, #2
   1945c:	add	r2, sp, #60	; 0x3c
   19460:	ldr	r0, [sp, #12]
   19464:	mov	r1, r9
   19468:	bl	17874 <__assert_fail@plt+0x65cc>
   1946c:	cmp	r0, #0
   19470:	str	r0, [r5, sl, lsl #2]
   19474:	bne	18da4 <__assert_fail@plt+0x7afc>
   19478:	ldr	r3, [r5, #-2096]	; 0xfffff7d0
   1947c:	cmp	r3, #0
   19480:	beq	18da4 <__assert_fail@plt+0x7afc>
   19484:	b	193ec <__assert_fail@plt+0x8144>
   19488:	ldr	r0, [sp, #16]
   1948c:	add	r1, sp, #3168	; 0xc60
   19490:	add	r1, r1, #8
   19494:	ldr	r2, [sp, #20]
   19498:	str	r1, [sp, #40]	; 0x28
   1949c:	ldrd	sl, [r8]
   194a0:	ldr	ip, [r0, #12]
   194a4:	lsl	r3, r2, #1
   194a8:	ldr	lr, [sp, #32]
   194ac:	add	r0, r3, r2
   194b0:	add	r5, r1, r0, lsl #2
   194b4:	str	r3, [sp, #12]
   194b8:	mov	r3, r1
   194bc:	add	r1, sp, #14400	; 0x3840
   194c0:	add	r1, r1, #40	; 0x28
   194c4:	add	r2, r1, r2, lsl #5
   194c8:	mov	r1, #1
   194cc:	ldr	r4, [ip, lr]
   194d0:	sub	r2, r2, #8192	; 0x2000
   194d4:	str	r1, [r3, r0, lsl #2]
   194d8:	mov	r0, #4
   194dc:	str	r1, [r5, #4]
   194e0:	strd	sl, [r2]
   194e4:	ldrd	sl, [r8, #16]
   194e8:	strd	sl, [sp]
   194ec:	ldrd	sl, [r8, #8]
   194f0:	strd	sl, [r2, #8]
   194f4:	ldrd	sl, [sp]
   194f8:	strd	sl, [r2, #16]
   194fc:	ldrd	sl, [r8, #24]
   19500:	strd	sl, [r2, #24]
   19504:	bl	24440 <__assert_fail@plt+0x13198>
   19508:	cmp	r0, #0
   1950c:	str	r0, [r5, #8]
   19510:	ldr	r3, [sp, #12]
   19514:	beq	19534 <__assert_fail@plt+0x828c>
   19518:	str	r4, [r0]
   1951c:	ldr	r3, [sp, #16]
   19520:	ldr	sl, [r3, #8]
   19524:	ldr	r3, [sp, #20]
   19528:	add	r3, r3, #1
   1952c:	str	r3, [sp, #20]
   19530:	b	19240 <__assert_fail@plt+0x7f98>
   19534:	ldr	r2, [sp, #20]
   19538:	str	r0, [r5]
   1953c:	str	r0, [r5, #4]
   19540:	cmp	r2, #0
   19544:	beq	1928c <__assert_fail@plt+0x7fe4>
   19548:	b	19268 <__assert_fail@plt+0x7fc0>
   1954c:	add	r2, sp, #3168	; 0xc60
   19550:	mov	r3, #12
   19554:	add	r2, r2, #8
   19558:	str	r3, [r5, #-2096]	; 0xfffff7d0
   1955c:	str	r2, [sp, #40]	; 0x28
   19560:	b	193f0 <__assert_fail@plt+0x8148>
   19564:	ldr	r3, [r5, #-2096]	; 0xfffff7d0
   19568:	cmp	r3, #0
   1956c:	beq	18d88 <__assert_fail@plt+0x7ae0>
   19570:	b	193ec <__assert_fail@plt+0x8144>
   19574:	ldr	r2, [r8]
   19578:	ands	r2, r1, r2
   1957c:	bne	195d4 <__assert_fail@plt+0x832c>
   19580:	add	r2, r2, #1
   19584:	ldr	r9, [r8, r2, lsl #5]
   19588:	tst	r1, r9
   1958c:	beq	19580 <__assert_fail@plt+0x82d8>
   19590:	ldr	r9, [r4]
   19594:	add	r2, r5, r2, lsl #2
   19598:	tst	r1, r9
   1959c:	ldrne	r2, [r2, #-1024]	; 0xfffffc00
   195a0:	ldreq	r2, [r2, #-2048]	; 0xfffff800
   195a4:	str	r2, [r0]
   195a8:	b	18e34 <__assert_fail@plt+0x7b8c>
   195ac:	bne	1928c <__assert_fail@plt+0x7fe4>
   195b0:	mov	r1, #256	; 0x100
   195b4:	mov	r0, #4
   195b8:	bl	243cc <__assert_fail@plt+0x13124>
   195bc:	ldr	r2, [sp, #16]
   195c0:	mov	r3, r0
   195c4:	adds	r0, r0, #0
   195c8:	movne	r0, #1
   195cc:	str	r3, [r2, #44]	; 0x2c
   195d0:	b	19290 <__assert_fail@plt+0x7fe8>
   195d4:	mov	r2, #0
   195d8:	b	19590 <__assert_fail@plt+0x82e8>
   195dc:	ldr	r3, [r5, r0, lsl #2]
   195e0:	cmp	fp, #0
   195e4:	strne	r3, [r6, #1064]	; 0x428
   195e8:	str	r3, [r6, #40]	; 0x28
   195ec:	b	18e98 <__assert_fail@plt+0x7bf0>
   195f0:	mov	r1, #512	; 0x200
   195f4:	mov	r0, #4
   195f8:	bl	243cc <__assert_fail@plt+0x13124>
   195fc:	ldr	r3, [sp, #16]
   19600:	cmp	r0, #0
   19604:	mov	r6, r0
   19608:	str	r0, [r3, #48]	; 0x30
   1960c:	beq	193ec <__assert_fail@plt+0x8144>
   19610:	ldr	ip, [sp, #24]
   19614:	mov	lr, r0
   19618:	add	r4, r0, #1024	; 0x400
   1961c:	ldr	r3, [r7, #4]!
   19620:	cmp	r3, #0
   19624:	movne	r0, lr
   19628:	movne	r1, #1
   1962c:	beq	19648 <__assert_fail@plt+0x83a0>
   19630:	tst	r3, #1
   19634:	bne	1965c <__assert_fail@plt+0x83b4>
   19638:	lsrs	r3, r3, #1
   1963c:	add	r0, r0, #4
   19640:	lsl	r1, r1, #1
   19644:	bne	19630 <__assert_fail@plt+0x8388>
   19648:	add	lr, lr, #128	; 0x80
   1964c:	add	ip, ip, #4
   19650:	cmp	r4, lr
   19654:	bne	1961c <__assert_fail@plt+0x8374>
   19658:	b	18e58 <__assert_fail@plt+0x7bb0>
   1965c:	ldr	r2, [ip]
   19660:	ands	r2, r1, r2
   19664:	bne	19690 <__assert_fail@plt+0x83e8>
   19668:	add	r2, r2, #1
   1966c:	ldr	r8, [ip, r2, lsl #5]
   19670:	tst	r1, r8
   19674:	beq	19668 <__assert_fail@plt+0x83c0>
   19678:	add	r2, r5, r2, lsl #2
   1967c:	ldr	r8, [r2, #-2048]	; 0xfffff800
   19680:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   19684:	str	r8, [r0]
   19688:	str	r2, [r0, #1024]	; 0x400
   1968c:	b	19638 <__assert_fail@plt+0x8390>
   19690:	mov	r2, #0
   19694:	b	19678 <__assert_fail@plt+0x83d0>
   19698:	cmp	r1, #0
   1969c:	strd	r4, [sp, #-16]!
   196a0:	mov	r5, r0
   196a4:	str	r6, [sp, #8]
   196a8:	str	lr, [sp, #12]
   196ac:	blt	19760 <__assert_fail@plt+0x84b8>
   196b0:	ldr	r3, [r0, #48]	; 0x30
   196b4:	cmp	r3, r1
   196b8:	beq	19774 <__assert_fail@plt+0x84cc>
   196bc:	ldr	r3, [r0, #80]	; 0x50
   196c0:	cmp	r3, #1
   196c4:	ble	19714 <__assert_fail@plt+0x846c>
   196c8:	ldr	r3, [r0, #8]
   196cc:	add	r3, r3, r1, lsl #2
   196d0:	b	196dc <__assert_fail@plt+0x8434>
   196d4:	cmn	r1, #1
   196d8:	beq	19760 <__assert_fail@plt+0x84b8>
   196dc:	ldr	r4, [r3], #-4
   196e0:	sub	r1, r1, #1
   196e4:	cmn	r4, #1
   196e8:	beq	196d4 <__assert_fail@plt+0x842c>
   196ec:	ldrb	r3, [r5, #78]	; 0x4e
   196f0:	cmp	r3, #0
   196f4:	bne	19784 <__assert_fail@plt+0x84dc>
   196f8:	cmp	r4, #10
   196fc:	movne	r0, #0
   19700:	beq	19740 <__assert_fail@plt+0x8498>
   19704:	ldrd	r4, [sp]
   19708:	ldr	r6, [sp, #8]
   1970c:	add	sp, sp, #12
   19710:	pop	{pc}		; (ldr pc, [sp], #4)
   19714:	ldr	r3, [r0, #4]
   19718:	ldr	r0, [r0, #68]	; 0x44
   1971c:	ldrb	r3, [r3, r1]
   19720:	asr	r1, r3, #5
   19724:	and	r2, r3, #31
   19728:	ldr	r0, [r0, r1, lsl #2]
   1972c:	lsr	r0, r0, r2
   19730:	ands	r0, r0, #1
   19734:	bne	19704 <__assert_fail@plt+0x845c>
   19738:	cmp	r3, #10
   1973c:	bne	19704 <__assert_fail@plt+0x845c>
   19740:	ldrb	r3, [r5, #77]	; 0x4d
   19744:	ldrd	r4, [sp]
   19748:	ldr	r6, [sp, #8]
   1974c:	add	sp, sp, #12
   19750:	cmp	r3, #0
   19754:	moveq	r0, #0
   19758:	movne	r0, #2
   1975c:	pop	{pc}		; (ldr pc, [sp], #4)
   19760:	ldr	r6, [sp, #8]
   19764:	ldr	r0, [r5, #60]	; 0x3c
   19768:	ldrd	r4, [sp]
   1976c:	add	sp, sp, #12
   19770:	pop	{pc}		; (ldr pc, [sp], #4)
   19774:	tst	r2, #2
   19778:	movne	r0, #8
   1977c:	moveq	r0, #10
   19780:	b	19704 <__assert_fail@plt+0x845c>
   19784:	mov	r0, r4
   19788:	bl	111ac <iswalnum@plt>
   1978c:	sub	r3, r4, #95	; 0x5f
   19790:	cmp	r0, #0
   19794:	clz	r3, r3
   19798:	lsr	r3, r3, #5
   1979c:	movne	r3, #1
   197a0:	cmp	r3, #0
   197a4:	movne	r0, #1
   197a8:	bne	19704 <__assert_fail@plt+0x845c>
   197ac:	b	196f8 <__assert_fail@plt+0x8450>
   197b0:	ldrb	ip, [r1, #4]
   197b4:	str	r4, [sp, #-8]!
   197b8:	ldr	r3, [r0, #4]
   197bc:	str	lr, [sp, #4]
   197c0:	sub	ip, ip, #1
   197c4:	ldrb	r3, [r3, r2]
   197c8:	cmp	ip, #6
   197cc:	ldrls	pc, [pc, ip, lsl #2]
   197d0:	b	197fc <__assert_fail@plt+0x8554>
   197d4:	strdeq	r9, [r1], -r0
   197d8:	strdeq	r9, [r1], -ip
   197dc:	andeq	r9, r1, r0, lsr #17
   197e0:	strdeq	r9, [r1], -ip
   197e4:	andeq	r9, r1, r4, lsl r8
   197e8:	strdeq	r9, [r1], -ip
   197ec:	andeq	r9, r1, ip, lsl #16
   197f0:	ldrb	ip, [r1]
   197f4:	cmp	ip, r3
   197f8:	beq	19834 <__assert_fail@plt+0x858c>
   197fc:	mov	r0, #0
   19800:	ldr	r4, [sp]
   19804:	add	sp, sp, #4
   19808:	pop	{pc}		; (ldr pc, [sp], #4)
   1980c:	tst	r3, #128	; 0x80
   19810:	bne	197fc <__assert_fail@plt+0x8554>
   19814:	cmp	r3, #10
   19818:	beq	198d4 <__assert_fail@plt+0x862c>
   1981c:	cmp	r3, #0
   19820:	bne	19834 <__assert_fail@plt+0x858c>
   19824:	ldr	ip, [r0, #84]	; 0x54
   19828:	ldr	ip, [ip, #128]	; 0x80
   1982c:	tst	ip, #128	; 0x80
   19830:	bne	197fc <__assert_fail@plt+0x8554>
   19834:	ldr	r4, [r1, #4]
   19838:	mov	r3, #65280	; 0xff00
   1983c:	movt	r3, #3
   19840:	and	r3, r3, r4
   19844:	cmp	r3, #0
   19848:	beq	19890 <__assert_fail@plt+0x85e8>
   1984c:	mov	r1, r2
   19850:	ldr	r2, [r0, #88]	; 0x58
   19854:	bl	19698 <__assert_fail@plt+0x83f0>
   19858:	ubfx	r1, r4, #8, #10
   1985c:	ands	r2, r1, #4
   19860:	bne	198c0 <__assert_fail@plt+0x8618>
   19864:	tst	r1, #8
   19868:	beq	19874 <__assert_fail@plt+0x85cc>
   1986c:	tst	r0, #1
   19870:	bne	197fc <__assert_fail@plt+0x8554>
   19874:	tst	r1, #32
   19878:	beq	19884 <__assert_fail@plt+0x85dc>
   1987c:	ands	r3, r0, #2
   19880:	beq	197fc <__assert_fail@plt+0x8554>
   19884:	tst	r1, #128	; 0x80
   19888:	ubfxne	r0, r0, #3, #1
   1988c:	bne	19800 <__assert_fail@plt+0x8558>
   19890:	ldr	r4, [sp]
   19894:	add	sp, sp, #4
   19898:	mov	r0, #1
   1989c:	pop	{pc}		; (ldr pc, [sp], #4)
   198a0:	ldr	ip, [r1]
   198a4:	asr	lr, r3, #5
   198a8:	and	r3, r3, #31
   198ac:	ldr	ip, [ip, lr, lsl #2]
   198b0:	lsr	r3, ip, r3
   198b4:	ands	r3, r3, #1
   198b8:	bne	19834 <__assert_fail@plt+0x858c>
   198bc:	b	197fc <__assert_fail@plt+0x8554>
   198c0:	ands	r3, r0, #1
   198c4:	beq	197fc <__assert_fail@plt+0x8554>
   198c8:	tst	r1, #8
   198cc:	beq	19874 <__assert_fail@plt+0x85cc>
   198d0:	b	197fc <__assert_fail@plt+0x8554>
   198d4:	ldr	r3, [r0, #84]	; 0x54
   198d8:	ldr	r3, [r3, #128]	; 0x80
   198dc:	ands	r3, r3, #64	; 0x40
   198e0:	bne	19834 <__assert_fail@plt+0x858c>
   198e4:	b	197fc <__assert_fail@plt+0x8554>
   198e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   198ec:	mov	r4, r0
   198f0:	ldr	r5, [r0, #24]
   198f4:	strd	r6, [sp, #8]
   198f8:	mov	r7, r1
   198fc:	strd	r8, [sp, #16]
   19900:	mov	r8, r2
   19904:	strd	sl, [sp, #24]
   19908:	str	lr, [sp, #32]
   1990c:	sub	sp, sp, #44	; 0x2c
   19910:	cmp	r5, r1
   19914:	suble	r5, r1, r5
   19918:	ble	1997c <__assert_fail@plt+0x86d4>
   1991c:	ldr	r3, [r0, #80]	; 0x50
   19920:	cmp	r3, #1
   19924:	ble	19934 <__assert_fail@plt+0x868c>
   19928:	mov	r2, #0
   1992c:	mov	r3, #0
   19930:	strd	r2, [r0, #16]
   19934:	ldrb	r3, [r4, #75]	; 0x4b
   19938:	mov	r2, #0
   1993c:	tst	r8, #1
   19940:	movne	r0, #4
   19944:	moveq	r0, #6
   19948:	ldr	ip, [r4, #44]	; 0x2c
   1994c:	mov	r5, r7
   19950:	str	r2, [r4, #24]
   19954:	ldr	r1, [r4, #52]	; 0x34
   19958:	cmp	r3, r2
   1995c:	str	r2, [r4, #28]
   19960:	ldreq	r3, [r4]
   19964:	str	r2, [r4, #32]
   19968:	str	ip, [r4, #48]	; 0x30
   1996c:	str	r1, [r4, #56]	; 0x38
   19970:	str	r0, [r4, #60]	; 0x3c
   19974:	streq	r3, [r4, #4]
   19978:	strb	r2, [r4, #76]	; 0x4c
   1997c:	cmp	r5, #0
   19980:	beq	19afc <__assert_fail@plt+0x8854>
   19984:	ldrb	r2, [r4, #76]	; 0x4c
   19988:	ldr	r3, [r4, #32]
   1998c:	ldr	r6, [r4, #28]
   19990:	cmp	r3, r5
   19994:	ble	19b0c <__assert_fail@plt+0x8864>
   19998:	cmp	r2, #0
   1999c:	bne	19c78 <__assert_fail@plt+0x89d0>
   199a0:	mov	r2, r8
   199a4:	sub	r1, r5, #1
   199a8:	mov	r0, r4
   199ac:	bl	19698 <__assert_fail@plt+0x83f0>
   199b0:	ldr	r3, [r4, #80]	; 0x50
   199b4:	sub	r2, r6, r5
   199b8:	str	r0, [r4, #60]	; 0x3c
   199bc:	cmp	r3, #1
   199c0:	bgt	19a58 <__assert_fail@plt+0x87b0>
   199c4:	ldrb	r3, [r4, #75]	; 0x4b
   199c8:	cmp	r3, #0
   199cc:	bne	19cb8 <__assert_fail@plt+0x8a10>
   199d0:	ldr	ip, [r4, #32]
   199d4:	str	r2, [r4, #28]
   199d8:	ldr	r1, [r4, #48]	; 0x30
   199dc:	ldr	r0, [r4, #56]	; 0x38
   199e0:	sub	ip, ip, r5
   199e4:	ldr	r2, [r4, #80]	; 0x50
   199e8:	sub	r1, r1, r5
   199ec:	str	ip, [r4, #32]
   199f0:	sub	r0, r0, r5
   199f4:	cmp	r3, #0
   199f8:	bne	19a08 <__assert_fail@plt+0x8760>
   199fc:	ldr	r3, [r4, #4]
   19a00:	add	r5, r3, r5
   19a04:	str	r5, [r4, #4]
   19a08:	cmp	r2, #1
   19a0c:	str	r7, [r4, #24]
   19a10:	str	r1, [r4, #48]	; 0x30
   19a14:	str	r0, [r4, #56]	; 0x38
   19a18:	ble	19a84 <__assert_fail@plt+0x87dc>
   19a1c:	ldrb	r3, [r4, #72]	; 0x48
   19a20:	mov	r0, r4
   19a24:	cmp	r3, #0
   19a28:	bne	19a74 <__assert_fail@plt+0x87cc>
   19a2c:	bl	15504 <__assert_fail@plt+0x425c>
   19a30:	mov	r3, #0
   19a34:	mov	r0, r3
   19a38:	str	r3, [r4, #40]	; 0x28
   19a3c:	add	sp, sp, #44	; 0x2c
   19a40:	ldrd	r4, [sp]
   19a44:	ldrd	r6, [sp, #8]
   19a48:	ldrd	r8, [sp, #16]
   19a4c:	ldrd	sl, [sp, #24]
   19a50:	add	sp, sp, #32
   19a54:	pop	{pc}		; (ldr pc, [sp], #4)
   19a58:	ldr	r0, [r4, #8]
   19a5c:	lsl	r2, r2, #2
   19a60:	add	r1, r0, r5, lsl #2
   19a64:	bl	11008 <memmove@plt>
   19a68:	ldr	r2, [r4, #28]
   19a6c:	sub	r2, r2, r5
   19a70:	b	199c4 <__assert_fail@plt+0x871c>
   19a74:	bl	156a4 <__assert_fail@plt+0x43fc>
   19a78:	cmp	r0, #0
   19a7c:	beq	19a30 <__assert_fail@plt+0x8788>
   19a80:	b	19a3c <__assert_fail@plt+0x8794>
   19a84:	ldrb	r3, [r4, #75]	; 0x4b
   19a88:	cmp	r3, #0
   19a8c:	streq	r1, [r4, #28]
   19a90:	beq	19a30 <__assert_fail@plt+0x8788>
   19a94:	ldrb	r3, [r4, #72]	; 0x48
   19a98:	cmp	r3, #0
   19a9c:	bne	19f78 <__assert_fail@plt+0x8cd0>
   19aa0:	ldr	r0, [r4, #64]	; 0x40
   19aa4:	cmp	r0, #0
   19aa8:	beq	19a30 <__assert_fail@plt+0x8788>
   19aac:	ldr	r3, [r4, #28]
   19ab0:	ldr	r2, [r4, #36]	; 0x24
   19ab4:	cmp	r1, r2
   19ab8:	movge	r1, r2
   19abc:	cmp	r1, r3
   19ac0:	bgt	19ad0 <__assert_fail@plt+0x8828>
   19ac4:	b	1a0d8 <__assert_fail@plt+0x8e30>
   19ac8:	ldr	r7, [r4, #24]
   19acc:	ldr	r0, [r4, #64]	; 0x40
   19ad0:	ldm	r4, {r2, ip}
   19ad4:	add	r2, r2, r3
   19ad8:	ldrb	r2, [r2, r7]
   19adc:	ldrb	r2, [r0, r2]
   19ae0:	strb	r2, [ip, r3]
   19ae4:	add	r3, r3, #1
   19ae8:	cmp	r1, r3
   19aec:	bne	19ac8 <__assert_fail@plt+0x8820>
   19af0:	str	r1, [r4, #28]
   19af4:	str	r1, [r4, #32]
   19af8:	b	19a30 <__assert_fail@plt+0x8788>
   19afc:	ldr	r1, [r4, #48]	; 0x30
   19b00:	ldr	r0, [r4, #56]	; 0x38
   19b04:	ldr	r2, [r4, #80]	; 0x50
   19b08:	b	19a08 <__assert_fail@plt+0x8760>
   19b0c:	cmp	r2, #0
   19b10:	bne	1a014 <__assert_fail@plt+0x8d6c>
   19b14:	mov	r1, #0
   19b18:	ldr	r9, [r4, #24]
   19b1c:	ldr	r2, [r4, #80]	; 0x50
   19b20:	str	r1, [r4, #28]
   19b24:	cmp	r2, #1
   19b28:	ble	19e38 <__assert_fail@plt+0x8b90>
   19b2c:	ldrb	r1, [r4, #73]	; 0x49
   19b30:	cmp	r1, #0
   19b34:	beq	19ba8 <__assert_fail@plt+0x8900>
   19b38:	ldr	r0, [r4]
   19b3c:	sub	r2, r5, r2
   19b40:	sub	r1, r5, #1
   19b44:	add	ip, r0, r9
   19b48:	add	r2, ip, r2
   19b4c:	add	lr, ip, r1
   19b50:	cmp	r0, r2
   19b54:	movcc	r0, r2
   19b58:	str	lr, [sp, #4]
   19b5c:	cmp	lr, r0
   19b60:	str	ip, [sp, #8]
   19b64:	bcc	19ba8 <__assert_fail@plt+0x8900>
   19b68:	ldrb	r2, [ip, r1]
   19b6c:	and	r2, r2, #192	; 0xc0
   19b70:	cmp	r2, #128	; 0x80
   19b74:	bne	19f88 <__assert_fail@plt+0x8ce0>
   19b78:	ldmib	sp, {r2, fp}
   19b7c:	sub	r0, r0, #1
   19b80:	sub	r2, r2, #1
   19b84:	b	19b9c <__assert_fail@plt+0x88f4>
   19b88:	ldrb	r1, [sl]
   19b8c:	sub	r2, r2, #1
   19b90:	and	r1, r1, #192	; 0xc0
   19b94:	cmp	r1, #128	; 0x80
   19b98:	bne	19f84 <__assert_fail@plt+0x8cdc>
   19b9c:	cmp	r0, r2
   19ba0:	mov	sl, r2
   19ba4:	bne	19b88 <__assert_fail@plt+0x88e0>
   19ba8:	add	r9, r9, r3
   19bac:	cmp	r7, r9
   19bb0:	ble	19eb8 <__assert_fail@plt+0x8c10>
   19bb4:	add	fp, r4, #16
   19bb8:	add	sl, sp, #24
   19bbc:	stmib	sp, {r4, r6}
   19bc0:	str	r5, [sp, #12]
   19bc4:	ldr	r2, [sp, #4]
   19bc8:	mov	r3, fp
   19bcc:	mov	r0, sl
   19bd0:	ldrd	r4, [fp]
   19bd4:	ldr	r1, [r2]
   19bd8:	ldr	r6, [r2, #44]	; 0x2c
   19bdc:	strd	r4, [sp, #32]
   19be0:	add	r1, r1, r9
   19be4:	sub	r6, r6, r9
   19be8:	mov	r2, r6
   19bec:	bl	246d4 <__assert_fail@plt+0x1342c>
   19bf0:	sub	r3, r0, #1
   19bf4:	cmn	r3, #4
   19bf8:	ldrls	r1, [sp, #24]
   19bfc:	bhi	1a040 <__assert_fail@plt+0x8d98>
   19c00:	add	r9, r9, r0
   19c04:	cmp	r7, r9
   19c08:	bgt	19bc4 <__assert_fail@plt+0x891c>
   19c0c:	ldmib	sp, {r4, r6}
   19c10:	sub	r9, r9, r7
   19c14:	cmn	r1, #1
   19c18:	ldr	r5, [sp, #12]
   19c1c:	str	r9, [r4, #28]
   19c20:	beq	19ec0 <__assert_fail@plt+0x8c18>
   19c24:	ldrb	r3, [r4, #78]	; 0x4e
   19c28:	cmp	r3, #0
   19c2c:	bne	1a0a8 <__assert_fail@plt+0x8e00>
   19c30:	cmp	r1, #10
   19c34:	movne	r3, #0
   19c38:	bne	19c4c <__assert_fail@plt+0x89a4>
   19c3c:	ldrb	r3, [r4, #77]	; 0x4d
   19c40:	cmp	r3, #0
   19c44:	moveq	r3, #0
   19c48:	movne	r3, #2
   19c4c:	str	r3, [r4, #60]	; 0x3c
   19c50:	cmp	r9, #0
   19c54:	bne	1a06c <__assert_fail@plt+0x8dc4>
   19c58:	ldrb	r3, [r4, #75]	; 0x4b
   19c5c:	str	r9, [r4, #32]
   19c60:	ldr	r1, [r4, #48]	; 0x30
   19c64:	ldr	r0, [r4, #56]	; 0x38
   19c68:	ldr	r2, [r4, #80]	; 0x50
   19c6c:	sub	r1, r1, r5
   19c70:	sub	r0, r0, r5
   19c74:	b	199f4 <__assert_fail@plt+0x874c>
   19c78:	mov	r3, r6
   19c7c:	mov	r2, #0
   19c80:	ldr	r9, [r4, #12]
   19c84:	b	19c98 <__assert_fail@plt+0x89f0>
   19c88:	bge	19e2c <__assert_fail@plt+0x8b84>
   19c8c:	add	r2, r1, #1
   19c90:	cmp	r2, r3
   19c94:	bge	19cd4 <__assert_fail@plt+0x8a2c>
   19c98:	add	r1, r2, r3
   19c9c:	add	r1, r1, r1, lsr #31
   19ca0:	asr	r1, r1, #1
   19ca4:	ldr	r0, [r9, r1, lsl #2]
   19ca8:	cmp	r0, r5
   19cac:	ble	19c88 <__assert_fail@plt+0x89e0>
   19cb0:	mov	r3, r1
   19cb4:	b	19c90 <__assert_fail@plt+0x89e8>
   19cb8:	ldr	r0, [r4, #4]
   19cbc:	add	r1, r0, r5
   19cc0:	bl	11008 <memmove@plt>
   19cc4:	ldr	r2, [r4, #28]
   19cc8:	ldrb	r3, [r4, #75]	; 0x4b
   19ccc:	sub	r2, r2, r5
   19cd0:	b	199d0 <__assert_fail@plt+0x8728>
   19cd4:	cmp	r0, r5
   19cd8:	addlt	sl, r1, #1
   19cdc:	bge	19e2c <__assert_fail@plt+0x8b84>
   19ce0:	mov	r2, r8
   19ce4:	mov	r0, r4
   19ce8:	bl	19698 <__assert_fail@plt+0x83f0>
   19cec:	sub	r3, r5, sl
   19cf0:	cmp	r6, r5
   19cf4:	str	r0, [r4, #60]	; 0x3c
   19cf8:	clz	r3, r3
   19cfc:	lsr	r3, r3, #5
   19d00:	movle	r3, #0
   19d04:	cmp	r3, #0
   19d08:	bne	19ed8 <__assert_fail@plt+0x8c30>
   19d0c:	ldr	r1, [r4, #44]	; 0x2c
   19d10:	mov	r3, #0
   19d14:	cmp	sl, #0
   19d18:	ldr	r0, [r4, #52]	; 0x34
   19d1c:	strb	r3, [r4, #76]	; 0x4c
   19d20:	sub	r1, r1, r7
   19d24:	add	r2, r1, r5
   19d28:	sub	r0, r0, r7
   19d2c:	add	r3, r0, r5
   19d30:	str	r2, [r4, #48]	; 0x30
   19d34:	str	r3, [r4, #56]	; 0x38
   19d38:	ble	19d68 <__assert_fail@plt+0x8ac0>
   19d3c:	sub	r3, sl, #-1073741823	; 0xc0000001
   19d40:	ldr	r2, [r9, r3, lsl #2]
   19d44:	add	r3, r9, r3, lsl #2
   19d48:	cmp	r2, r5
   19d4c:	beq	19d60 <__assert_fail@plt+0x8ab8>
   19d50:	b	19d68 <__assert_fail@plt+0x8ac0>
   19d54:	ldr	r2, [r3, #-4]!
   19d58:	cmp	r2, r5
   19d5c:	bne	19d68 <__assert_fail@plt+0x8ac0>
   19d60:	subs	sl, sl, #1
   19d64:	bne	19d54 <__assert_fail@plt+0x8aac>
   19d68:	cmp	r6, sl
   19d6c:	ble	19dc4 <__assert_fail@plt+0x8b1c>
   19d70:	ldr	r3, [r4, #8]
   19d74:	lsl	ip, sl, #2
   19d78:	ldr	r2, [r3, sl, lsl #2]
   19d7c:	add	r3, r3, ip
   19d80:	cmn	r2, #1
   19d84:	beq	19d98 <__assert_fail@plt+0x8af0>
   19d88:	b	19dcc <__assert_fail@plt+0x8b24>
   19d8c:	ldr	r2, [r3, #4]!
   19d90:	cmn	r2, #1
   19d94:	bne	19dcc <__assert_fail@plt+0x8b24>
   19d98:	add	sl, sl, #1
   19d9c:	cmp	r6, sl
   19da0:	lsl	ip, sl, #2
   19da4:	bne	19d8c <__assert_fail@plt+0x8ae4>
   19da8:	mov	r3, #0
   19dac:	mov	r2, r3
   19db0:	str	r3, [r4, #28]
   19db4:	ldrb	r3, [r4, #75]	; 0x4b
   19db8:	str	r2, [r4, #32]
   19dbc:	ldr	r2, [r4, #80]	; 0x50
   19dc0:	b	199f4 <__assert_fail@plt+0x874c>
   19dc4:	beq	19da8 <__assert_fail@plt+0x8b00>
   19dc8:	lsl	ip, sl, #2
   19dcc:	ldr	r2, [r9, ip]
   19dd0:	sub	r2, r2, r5
   19dd4:	cmp	r2, #0
   19dd8:	str	r2, [r4, #28]
   19ddc:	beq	19db4 <__assert_fail@plt+0x8b0c>
   19de0:	ble	19e08 <__assert_fail@plt+0x8b60>
   19de4:	ldr	r1, [r4, #8]
   19de8:	mov	r3, #0
   19dec:	mvn	r0, #0
   19df0:	sub	r1, r1, #4
   19df4:	str	r0, [r1, #4]!
   19df8:	add	r3, r3, #1
   19dfc:	ldr	r2, [r4, #28]
   19e00:	cmp	r2, r3
   19e04:	bgt	19df4 <__assert_fail@plt+0x8b4c>
   19e08:	mov	r1, #255	; 0xff
   19e0c:	ldr	r0, [r4, #4]
   19e10:	bl	111c4 <memset@plt>
   19e14:	ldr	r2, [r4, #28]
   19e18:	ldr	r1, [r4, #48]	; 0x30
   19e1c:	ldr	r0, [r4, #56]	; 0x38
   19e20:	sub	r1, r1, r5
   19e24:	sub	r0, r0, r5
   19e28:	b	19db4 <__assert_fail@plt+0x8b0c>
   19e2c:	mov	sl, r1
   19e30:	sub	r1, r1, #1
   19e34:	b	19ce0 <__assert_fail@plt+0x8a38>
   19e38:	ldr	r3, [r4]
   19e3c:	ldr	ip, [r4, #64]	; 0x40
   19e40:	add	r3, r3, r5
   19e44:	add	r9, r3, r9
   19e48:	ldrb	r0, [r9, #-1]
   19e4c:	cmp	ip, #0
   19e50:	str	r1, [r4, #32]
   19e54:	ldrbne	r0, [ip, r0]
   19e58:	ldr	ip, [r4, #68]	; 0x44
   19e5c:	asr	r1, r0, #5
   19e60:	and	r3, r0, #31
   19e64:	ldr	r1, [ip, r1, lsl #2]
   19e68:	lsr	r3, r1, r3
   19e6c:	ands	r1, r3, #1
   19e70:	bne	19e88 <__assert_fail@plt+0x8be0>
   19e74:	cmp	r0, #10
   19e78:	bne	19e88 <__assert_fail@plt+0x8be0>
   19e7c:	ldrb	r3, [r4, #77]	; 0x4d
   19e80:	cmp	r3, #0
   19e84:	movne	r1, #2
   19e88:	ldrb	r3, [r4, #75]	; 0x4b
   19e8c:	str	r1, [r4, #60]	; 0x3c
   19e90:	ldr	r1, [r4, #48]	; 0x30
   19e94:	ldr	r0, [r4, #56]	; 0x38
   19e98:	cmp	r3, #0
   19e9c:	sub	r1, r1, r5
   19ea0:	sub	r0, r0, r5
   19ea4:	beq	199fc <__assert_fail@plt+0x8754>
   19ea8:	str	r7, [r4, #24]
   19eac:	str	r1, [r4, #48]	; 0x30
   19eb0:	str	r0, [r4, #56]	; 0x38
   19eb4:	b	19a88 <__assert_fail@plt+0x87e0>
   19eb8:	sub	r9, r9, r7
   19ebc:	str	r9, [r4, #28]
   19ec0:	mov	r2, r8
   19ec4:	sub	r1, r6, #1
   19ec8:	mov	r0, r4
   19ecc:	bl	19698 <__assert_fail@plt+0x83f0>
   19ed0:	str	r0, [r4, #60]	; 0x3c
   19ed4:	b	19c50 <__assert_fail@plt+0x89a8>
   19ed8:	ldr	r3, [r9, sl, lsl #2]
   19edc:	cmp	r3, r5
   19ee0:	bne	19d0c <__assert_fail@plt+0x8a64>
   19ee4:	ldr	r0, [r4, #8]
   19ee8:	lsl	r8, r5, #2
   19eec:	sub	r2, r6, r5
   19ef0:	lsl	r2, r2, #2
   19ef4:	add	r1, r0, r8
   19ef8:	bl	11008 <memmove@plt>
   19efc:	ldr	r0, [r4, #4]
   19f00:	ldr	r2, [r4, #28]
   19f04:	add	r1, r0, r5
   19f08:	sub	r2, r2, r5
   19f0c:	bl	11008 <memmove@plt>
   19f10:	ldr	r3, [r4, #28]
   19f14:	ldr	r2, [r4, #32]
   19f18:	sub	r3, r3, r5
   19f1c:	cmp	r3, #0
   19f20:	sub	r2, r2, r5
   19f24:	str	r3, [r4, #28]
   19f28:	str	r2, [r4, #32]
   19f2c:	ble	19f5c <__assert_fail@plt+0x8cb4>
   19f30:	ldr	r1, [r4, #12]
   19f34:	mov	r2, #0
   19f38:	add	r0, r1, r8
   19f3c:	sub	r1, r1, #4
   19f40:	ldr	r3, [r0], #4
   19f44:	add	r2, r2, #1
   19f48:	sub	r3, r3, r5
   19f4c:	str	r3, [r1, #4]!
   19f50:	ldr	r3, [r4, #28]
   19f54:	cmp	r3, r2
   19f58:	bgt	19f40 <__assert_fail@plt+0x8c98>
   19f5c:	ldr	r1, [r4, #48]	; 0x30
   19f60:	ldr	r0, [r4, #56]	; 0x38
   19f64:	ldrb	r3, [r4, #75]	; 0x4b
   19f68:	sub	r1, r1, r5
   19f6c:	ldr	r2, [r4, #80]	; 0x50
   19f70:	sub	r0, r0, r5
   19f74:	b	199f4 <__assert_fail@plt+0x874c>
   19f78:	mov	r0, r4
   19f7c:	bl	15c64 <__assert_fail@plt+0x49bc>
   19f80:	b	19a30 <__assert_fail@plt+0x8788>
   19f84:	strd	sl, [sp, #4]
   19f88:	ldr	r1, [sp, #8]
   19f8c:	ldr	r2, [r4, #48]	; 0x30
   19f90:	ldr	r3, [r4, #64]	; 0x40
   19f94:	add	r2, r1, r2
   19f98:	ldr	r1, [sp, #4]
   19f9c:	cmp	r3, #0
   19fa0:	sub	r2, r2, r1
   19fa4:	ldreq	r1, [sp, #4]
   19fa8:	bne	1a0f8 <__assert_fail@plt+0x8e50>
   19fac:	mov	sl, #0
   19fb0:	mov	fp, #0
   19fb4:	add	r3, sp, #32
   19fb8:	add	r0, sp, #20
   19fbc:	strd	sl, [sp, #32]
   19fc0:	bl	246d4 <__assert_fail@plt+0x1342c>
   19fc4:	ldr	r3, [sp, #8]
   19fc8:	add	r9, r3, r5
   19fcc:	ldr	r3, [sp, #4]
   19fd0:	sub	r9, r9, r3
   19fd4:	cmp	r0, r9
   19fd8:	bcc	19fe4 <__assert_fail@plt+0x8d3c>
   19fdc:	cmn	r0, #3
   19fe0:	bls	19ff0 <__assert_fail@plt+0x8d48>
   19fe4:	ldr	r9, [r4, #24]
   19fe8:	ldr	r3, [r4, #32]
   19fec:	b	19ba8 <__assert_fail@plt+0x8900>
   19ff0:	ldr	r1, [sp, #20]
   19ff4:	sub	r9, r0, r9
   19ff8:	mov	r2, #0
   19ffc:	mov	r3, #0
   1a000:	strd	r2, [r4, #16]
   1a004:	str	r9, [r4, #28]
   1a008:	cmn	r1, #1
   1a00c:	bne	19c24 <__assert_fail@plt+0x897c>
   1a010:	b	19fe4 <__assert_fail@plt+0x8d3c>
   1a014:	ldr	r1, [r4, #44]	; 0x2c
   1a018:	mov	r0, #0
   1a01c:	ldr	r2, [r4, #52]	; 0x34
   1a020:	strb	r0, [r4, #76]	; 0x4c
   1a024:	sub	r1, r1, r7
   1a028:	add	r1, r1, r5
   1a02c:	sub	r2, r2, r7
   1a030:	add	r2, r2, r5
   1a034:	str	r1, [r4, #48]	; 0x30
   1a038:	str	r2, [r4, #56]	; 0x38
   1a03c:	b	19b14 <__assert_fail@plt+0x886c>
   1a040:	mov	r1, #0
   1a044:	cmp	r6, r1
   1a048:	cmpne	r0, r1
   1a04c:	beq	1a05c <__assert_fail@plt+0x8db4>
   1a050:	ldr	r3, [sp, #4]
   1a054:	ldr	r3, [r3]
   1a058:	ldrb	r1, [r3, r9]
   1a05c:	mov	r0, #1
   1a060:	ldrd	r2, [sp, #32]
   1a064:	strd	r2, [fp]
   1a068:	b	19c00 <__assert_fail@plt+0x8958>
   1a06c:	ble	1a094 <__assert_fail@plt+0x8dec>
   1a070:	ldr	r2, [r4, #8]
   1a074:	mov	r3, #0
   1a078:	mvn	r1, #0
   1a07c:	sub	r2, r2, #4
   1a080:	str	r1, [r2, #4]!
   1a084:	add	r3, r3, #1
   1a088:	ldr	r9, [r4, #28]
   1a08c:	cmp	r9, r3
   1a090:	bgt	1a080 <__assert_fail@plt+0x8dd8>
   1a094:	ldrb	r3, [r4, #75]	; 0x4b
   1a098:	cmp	r3, #0
   1a09c:	bne	1a0e0 <__assert_fail@plt+0x8e38>
   1a0a0:	ldr	r9, [r4, #28]
   1a0a4:	b	19c5c <__assert_fail@plt+0x89b4>
   1a0a8:	mov	r0, r1
   1a0ac:	str	r1, [sp, #4]
   1a0b0:	bl	111ac <iswalnum@plt>
   1a0b4:	ldr	r1, [sp, #4]
   1a0b8:	subs	r3, r1, #95	; 0x5f
   1a0bc:	movne	r3, #1
   1a0c0:	cmp	r0, #0
   1a0c4:	movne	r3, #0
   1a0c8:	cmp	r3, #0
   1a0cc:	moveq	r3, #1
   1a0d0:	beq	19c4c <__assert_fail@plt+0x89a4>
   1a0d4:	b	19c30 <__assert_fail@plt+0x8988>
   1a0d8:	mov	r1, r3
   1a0dc:	b	19af0 <__assert_fail@plt+0x8848>
   1a0e0:	mov	r2, r9
   1a0e4:	mov	r1, #255	; 0xff
   1a0e8:	ldr	r0, [r4, #4]
   1a0ec:	bl	111c4 <memset@plt>
   1a0f0:	ldrb	r3, [r4, #75]	; 0x4b
   1a0f4:	b	1a0a0 <__assert_fail@plt+0x8df8>
   1a0f8:	cmp	r2, #6
   1a0fc:	movlt	r1, r2
   1a100:	movge	r1, #6
   1a104:	cmp	r2, #0
   1a108:	ble	1a148 <__assert_fail@plt+0x8ea0>
   1a10c:	ldrd	sl, [sp, #4]
   1a110:	add	r0, sp, #24
   1a114:	mov	ip, r0
   1a118:	mov	lr, r0
   1a11c:	sub	r0, r1, #1
   1a120:	add	r0, ip, r0
   1a124:	add	r1, sl, r1
   1a128:	ldrb	ip, [r1, #-1]!
   1a12c:	ldrb	ip, [r3, ip]
   1a130:	cmp	sl, r1
   1a134:	strb	ip, [r0], #-1
   1a138:	bne	1a128 <__assert_fail@plt+0x8e80>
   1a13c:	strd	sl, [sp, #4]
   1a140:	mov	r1, lr
   1a144:	b	19fac <__assert_fail@plt+0x8d04>
   1a148:	add	r3, sp, #24
   1a14c:	mov	lr, r3
   1a150:	b	1a140 <__assert_fail@plt+0x8e98>
   1a154:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a158:	mov	r4, r1
   1a15c:	mov	r1, r2
   1a160:	ldr	r2, [r0, #88]	; 0x58
   1a164:	mov	r5, r0
   1a168:	strd	r6, [sp, #8]
   1a16c:	str	r8, [sp, #16]
   1a170:	str	lr, [sp, #20]
   1a174:	bl	19698 <__assert_fail@plt+0x83f0>
   1a178:	ldr	lr, [r4, #8]
   1a17c:	cmp	lr, #0
   1a180:	ble	1a230 <__assert_fail@plt+0x8f88>
   1a184:	ldr	r3, [r5, #84]	; 0x54
   1a188:	mov	r2, #0
   1a18c:	and	r7, r0, #8
   1a190:	and	r6, r0, #2
   1a194:	and	r5, r0, #1
   1a198:	ldr	r1, [r4, #12]
   1a19c:	ldr	r4, [r3]
   1a1a0:	sub	r1, r1, #4
   1a1a4:	ldr	r0, [r1, #4]!
   1a1a8:	add	r3, r4, r0, lsl #3
   1a1ac:	ldrb	ip, [r3, #4]
   1a1b0:	ldr	r3, [r3, #4]
   1a1b4:	cmp	ip, #2
   1a1b8:	ubfx	r3, r3, #8, #10
   1a1bc:	bne	1a224 <__assert_fail@plt+0x8f7c>
   1a1c0:	cmp	r3, #0
   1a1c4:	beq	1a200 <__assert_fail@plt+0x8f58>
   1a1c8:	tst	r3, #4
   1a1cc:	beq	1a214 <__assert_fail@plt+0x8f6c>
   1a1d0:	cmp	r5, #0
   1a1d4:	beq	1a224 <__assert_fail@plt+0x8f7c>
   1a1d8:	tst	r3, #8
   1a1dc:	bne	1a224 <__assert_fail@plt+0x8f7c>
   1a1e0:	tst	r3, #32
   1a1e4:	beq	1a1f0 <__assert_fail@plt+0x8f48>
   1a1e8:	cmp	r6, #0
   1a1ec:	beq	1a224 <__assert_fail@plt+0x8f7c>
   1a1f0:	tst	r3, #128	; 0x80
   1a1f4:	beq	1a200 <__assert_fail@plt+0x8f58>
   1a1f8:	cmp	r7, #0
   1a1fc:	beq	1a224 <__assert_fail@plt+0x8f7c>
   1a200:	ldrd	r4, [sp]
   1a204:	ldrd	r6, [sp, #8]
   1a208:	ldr	r8, [sp, #16]
   1a20c:	add	sp, sp, #20
   1a210:	pop	{pc}		; (ldr pc, [sp], #4)
   1a214:	tst	r3, #8
   1a218:	beq	1a1e0 <__assert_fail@plt+0x8f38>
   1a21c:	cmp	r5, #0
   1a220:	beq	1a1e0 <__assert_fail@plt+0x8f38>
   1a224:	add	r2, r2, #1
   1a228:	cmp	r2, lr
   1a22c:	bne	1a1a4 <__assert_fail@plt+0x8efc>
   1a230:	mov	r0, #0
   1a234:	b	1a200 <__assert_fail@plt+0x8f58>
   1a238:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a23c:	strd	r6, [sp, #8]
   1a240:	strd	sl, [sp, #24]
   1a244:	ldr	fp, [r1]
   1a248:	strd	r8, [sp, #16]
   1a24c:	str	lr, [sp, #32]
   1a250:	sub	sp, sp, #12
   1a254:	ldr	r6, [r0, #84]	; 0x54
   1a258:	cmp	fp, #0
   1a25c:	ble	1a318 <__assert_fail@plt+0x9070>
   1a260:	mov	r8, r3
   1a264:	mov	r9, r2
   1a268:	mov	sl, r0
   1a26c:	mov	r7, r1
   1a270:	mov	r4, #0
   1a274:	b	1a280 <__assert_fail@plt+0x8fd8>
   1a278:	cmp	r4, fp
   1a27c:	bge	1a318 <__assert_fail@plt+0x9070>
   1a280:	ldr	r3, [r9]
   1a284:	ldr	ip, [r6]
   1a288:	ldr	r5, [r3, r4, lsl #2]
   1a28c:	add	r4, r4, #1
   1a290:	add	lr, ip, r5, lsl #3
   1a294:	ldrb	lr, [lr, #4]
   1a298:	cmp	lr, #8
   1a29c:	bne	1a278 <__assert_fail@plt+0x8fd0>
   1a2a0:	ldr	r3, [ip, r5, lsl #3]
   1a2a4:	cmp	r3, #31
   1a2a8:	bgt	1a278 <__assert_fail@plt+0x8fd0>
   1a2ac:	ldr	r2, [r6, #80]	; 0x50
   1a2b0:	lsr	r3, r2, r3
   1a2b4:	tst	r3, #1
   1a2b8:	beq	1a278 <__assert_fail@plt+0x8fd0>
   1a2bc:	ldr	fp, [sl, #124]	; 0x7c
   1a2c0:	ldr	r3, [sl, #128]	; 0x80
   1a2c4:	ldr	r2, [sl, #132]	; 0x84
   1a2c8:	cmp	r3, fp
   1a2cc:	beq	1a340 <__assert_fail@plt+0x9098>
   1a2d0:	mov	r1, #24
   1a2d4:	mov	r0, #1
   1a2d8:	str	r2, [sp, #4]
   1a2dc:	bl	243cc <__assert_fail@plt+0x13124>
   1a2e0:	ldr	r2, [sp, #4]
   1a2e4:	ldr	r3, [sl, #124]	; 0x7c
   1a2e8:	str	r0, [r2, fp, lsl #2]
   1a2ec:	ldr	r2, [sl, #132]	; 0x84
   1a2f0:	add	r1, r3, #1
   1a2f4:	ldr	r3, [r2, r3, lsl #2]
   1a2f8:	cmp	r3, #0
   1a2fc:	beq	1a338 <__assert_fail@plt+0x9090>
   1a300:	str	r5, [r3, #4]
   1a304:	str	r1, [sl, #124]	; 0x7c
   1a308:	str	r8, [r3]
   1a30c:	ldr	fp, [r7]
   1a310:	cmp	r4, fp
   1a314:	blt	1a280 <__assert_fail@plt+0x8fd8>
   1a318:	mov	r0, #0
   1a31c:	add	sp, sp, #12
   1a320:	ldrd	r4, [sp]
   1a324:	ldrd	r6, [sp, #8]
   1a328:	ldrd	r8, [sp, #16]
   1a32c:	ldrd	sl, [sp, #24]
   1a330:	add	sp, sp, #32
   1a334:	pop	{pc}		; (ldr pc, [sp], #4)
   1a338:	mov	r0, #12
   1a33c:	b	1a31c <__assert_fail@plt+0x9074>
   1a340:	mov	r0, r2
   1a344:	lsl	r1, fp, #3
   1a348:	bl	2447c <__assert_fail@plt+0x131d4>
   1a34c:	subs	r2, r0, #0
   1a350:	lsl	r3, fp, #1
   1a354:	beq	1a338 <__assert_fail@plt+0x9090>
   1a358:	str	r3, [sl, #128]	; 0x80
   1a35c:	str	r2, [sl, #132]	; 0x84
   1a360:	ldr	fp, [sl, #124]	; 0x7c
   1a364:	b	1a2d0 <__assert_fail@plt+0x9028>
   1a368:	strd	r4, [sp, #-16]!
   1a36c:	mov	r5, r0
   1a370:	mov	r0, r1
   1a374:	mov	r4, r1
   1a378:	str	r6, [sp, #8]
   1a37c:	str	lr, [sp, #12]
   1a380:	bl	11188 <strlen@plt>
   1a384:	cmp	r0, #1
   1a388:	bne	1a3bc <__assert_fail@plt+0x9114>
   1a38c:	ldrb	r3, [r4]
   1a390:	mov	ip, #0
   1a394:	asr	r1, r3, #5
   1a398:	and	r3, r3, #31
   1a39c:	ldr	r2, [r5, r1, lsl #2]
   1a3a0:	orr	r3, r2, r0, lsl r3
   1a3a4:	str	r3, [r5, r1, lsl #2]
   1a3a8:	ldrd	r4, [sp]
   1a3ac:	mov	r0, ip
   1a3b0:	ldr	r6, [sp, #8]
   1a3b4:	add	sp, sp, #12
   1a3b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3bc:	mov	ip, #3
   1a3c0:	b	1a3a8 <__assert_fail@plt+0x9100>
   1a3c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a3c8:	mov	r5, r1
   1a3cc:	strd	r6, [sp, #8]
   1a3d0:	mov	r6, r0
   1a3d4:	strd	r8, [sp, #16]
   1a3d8:	mov	r8, r3
   1a3dc:	strd	sl, [sp, #24]
   1a3e0:	mov	sl, r2
   1a3e4:	str	lr, [sp, #32]
   1a3e8:	sub	sp, sp, #4
   1a3ec:	ldr	r9, [sp, #40]	; 0x28
   1a3f0:	ldr	ip, [sp, #48]	; 0x30
   1a3f4:	ldr	r7, [sp, #44]	; 0x2c
   1a3f8:	tst	ip, #4194304	; 0x400000
   1a3fc:	beq	1a420 <__assert_fail@plt+0x9178>
   1a400:	mov	r0, r7
   1a404:	movw	r1, #22692	; 0x58a4
   1a408:	movt	r1, #2
   1a40c:	bl	10fd8 <strcmp@plt>
   1a410:	cmp	r0, #0
   1a414:	movweq	r7, #22684	; 0x589c
   1a418:	movteq	r7, #2
   1a41c:	bne	1a524 <__assert_fail@plt+0x927c>
   1a420:	ldr	r4, [r8]
   1a424:	ldr	r3, [r9]
   1a428:	ldr	fp, [sl]
   1a42c:	cmp	r3, r4
   1a430:	beq	1a608 <__assert_fail@plt+0x9360>
   1a434:	add	r3, r4, #1
   1a438:	mov	r0, r7
   1a43c:	str	r3, [r8]
   1a440:	bl	10fb4 <wctype@plt>
   1a444:	movw	r1, #22708	; 0x58b4
   1a448:	movt	r1, #2
   1a44c:	str	r0, [fp, r4, lsl #2]
   1a450:	mov	r0, r7
   1a454:	bl	10fd8 <strcmp@plt>
   1a458:	subs	r4, r0, #0
   1a45c:	beq	1a4dc <__assert_fail@plt+0x9234>
   1a460:	movw	r1, #22716	; 0x58bc
   1a464:	movt	r1, #2
   1a468:	mov	r0, r7
   1a46c:	bl	10fd8 <strcmp@plt>
   1a470:	subs	r4, r0, #0
   1a474:	bne	1a548 <__assert_fail@plt+0x92a0>
   1a478:	bl	11170 <__ctype_b_loc@plt>
   1a47c:	ldr	r3, [r0]
   1a480:	cmp	r6, #0
   1a484:	moveq	ip, #1
   1a488:	sub	r3, r3, #2
   1a48c:	bne	1a730 <__assert_fail@plt+0x9488>
   1a490:	ldrh	r2, [r3, #2]!
   1a494:	asr	r1, r4, #5
   1a498:	and	r0, r4, #31
   1a49c:	add	r4, r4, #1
   1a4a0:	tst	r2, #2
   1a4a4:	beq	1a4b4 <__assert_fail@plt+0x920c>
   1a4a8:	ldr	r2, [r5, r1, lsl #2]
   1a4ac:	orr	r2, r2, ip, lsl r0
   1a4b0:	str	r2, [r5, r1, lsl #2]
   1a4b4:	cmp	r4, #256	; 0x100
   1a4b8:	bne	1a490 <__assert_fail@plt+0x91e8>
   1a4bc:	mov	r0, #0
   1a4c0:	add	sp, sp, #4
   1a4c4:	ldrd	r4, [sp]
   1a4c8:	ldrd	r6, [sp, #8]
   1a4cc:	ldrd	r8, [sp, #16]
   1a4d0:	ldrd	sl, [sp, #24]
   1a4d4:	add	sp, sp, #32
   1a4d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4dc:	bl	11170 <__ctype_b_loc@plt>
   1a4e0:	ldr	r3, [r0]
   1a4e4:	cmp	r6, #0
   1a4e8:	moveq	lr, #1
   1a4ec:	sub	r3, r3, #2
   1a4f0:	bne	1a6f4 <__assert_fail@plt+0x944c>
   1a4f4:	ldrh	r0, [r3, #2]!
   1a4f8:	asr	r2, r4, #5
   1a4fc:	and	ip, r4, #31
   1a500:	add	r4, r4, #1
   1a504:	tst	r0, #8
   1a508:	beq	1a518 <__assert_fail@plt+0x9270>
   1a50c:	ldr	r1, [r5, r2, lsl #2]
   1a510:	orr	r1, r1, lr, lsl ip
   1a514:	str	r1, [r5, r2, lsl #2]
   1a518:	cmp	r4, #256	; 0x100
   1a51c:	bne	1a4f4 <__assert_fail@plt+0x924c>
   1a520:	b	1a4bc <__assert_fail@plt+0x9214>
   1a524:	mov	r0, r7
   1a528:	movw	r1, #22700	; 0x58ac
   1a52c:	movt	r1, #2
   1a530:	bl	10fd8 <strcmp@plt>
   1a534:	cmp	r0, #0
   1a538:	movw	r3, #22684	; 0x589c
   1a53c:	movt	r3, #2
   1a540:	moveq	r7, r3
   1a544:	b	1a420 <__assert_fail@plt+0x9178>
   1a548:	movw	r1, #22700	; 0x58ac
   1a54c:	movt	r1, #2
   1a550:	mov	r0, r7
   1a554:	bl	10fd8 <strcmp@plt>
   1a558:	subs	r4, r0, #0
   1a55c:	beq	1a5c0 <__assert_fail@plt+0x9318>
   1a560:	movw	r1, #22724	; 0x58c4
   1a564:	movt	r1, #2
   1a568:	mov	r0, r7
   1a56c:	bl	10fd8 <strcmp@plt>
   1a570:	subs	r4, r0, #0
   1a574:	bne	1a634 <__assert_fail@plt+0x938c>
   1a578:	bl	11170 <__ctype_b_loc@plt>
   1a57c:	ldr	r3, [r0]
   1a580:	cmp	r6, #0
   1a584:	moveq	ip, #1
   1a588:	sub	r3, r3, #2
   1a58c:	bne	1a90c <__assert_fail@plt+0x9664>
   1a590:	ldrh	r2, [r3, #2]!
   1a594:	asr	r1, r4, #5
   1a598:	and	r0, r4, #31
   1a59c:	add	r4, r4, #1
   1a5a0:	tst	r2, #8192	; 0x2000
   1a5a4:	beq	1a5b4 <__assert_fail@plt+0x930c>
   1a5a8:	ldr	r2, [r5, r1, lsl #2]
   1a5ac:	orr	r2, r2, ip, lsl r0
   1a5b0:	str	r2, [r5, r1, lsl #2]
   1a5b4:	cmp	r4, #256	; 0x100
   1a5b8:	bne	1a590 <__assert_fail@plt+0x92e8>
   1a5bc:	b	1a4bc <__assert_fail@plt+0x9214>
   1a5c0:	bl	11170 <__ctype_b_loc@plt>
   1a5c4:	ldr	r3, [r0]
   1a5c8:	cmp	r6, #0
   1a5cc:	moveq	ip, #1
   1a5d0:	sub	r3, r3, #2
   1a5d4:	bne	1a76c <__assert_fail@plt+0x94c4>
   1a5d8:	ldrh	r2, [r3, #2]!
   1a5dc:	asr	r1, r4, #5
   1a5e0:	and	r0, r4, #31
   1a5e4:	add	r4, r4, #1
   1a5e8:	tst	r2, #512	; 0x200
   1a5ec:	beq	1a5fc <__assert_fail@plt+0x9354>
   1a5f0:	ldr	r2, [r5, r1, lsl #2]
   1a5f4:	orr	r2, r2, ip, lsl r0
   1a5f8:	str	r2, [r5, r1, lsl #2]
   1a5fc:	cmp	r4, #256	; 0x100
   1a600:	bne	1a5d8 <__assert_fail@plt+0x9330>
   1a604:	b	1a4bc <__assert_fail@plt+0x9214>
   1a608:	lsl	r4, r4, #1
   1a60c:	mov	r0, fp
   1a610:	add	r4, r4, #1
   1a614:	lsl	r1, r4, #2
   1a618:	bl	2447c <__assert_fail@plt+0x131d4>
   1a61c:	subs	fp, r0, #0
   1a620:	beq	1a868 <__assert_fail@plt+0x95c0>
   1a624:	str	fp, [sl]
   1a628:	str	r4, [r9]
   1a62c:	ldr	r4, [r8]
   1a630:	b	1a434 <__assert_fail@plt+0x918c>
   1a634:	movw	r1, #22684	; 0x589c
   1a638:	movt	r1, #2
   1a63c:	mov	r0, r7
   1a640:	bl	10fd8 <strcmp@plt>
   1a644:	subs	r4, r0, #0
   1a648:	beq	1a6ac <__assert_fail@plt+0x9404>
   1a64c:	movw	r1, #22732	; 0x58cc
   1a650:	movt	r1, #2
   1a654:	mov	r0, r7
   1a658:	bl	10fd8 <strcmp@plt>
   1a65c:	subs	r4, r0, #0
   1a660:	bne	1a7a8 <__assert_fail@plt+0x9500>
   1a664:	bl	11170 <__ctype_b_loc@plt>
   1a668:	ldr	r3, [r0]
   1a66c:	cmp	r6, #0
   1a670:	moveq	ip, #1
   1a674:	sub	r3, r3, #2
   1a678:	bne	1a948 <__assert_fail@plt+0x96a0>
   1a67c:	ldrh	r1, [r3, #2]!
   1a680:	asr	r2, r4, #5
   1a684:	and	r0, r4, #31
   1a688:	add	r4, r4, #1
   1a68c:	tst	r1, #2048	; 0x800
   1a690:	beq	1a6a0 <__assert_fail@plt+0x93f8>
   1a694:	ldr	r1, [r5, r2, lsl #2]
   1a698:	orr	r1, r1, ip, lsl r0
   1a69c:	str	r1, [r5, r2, lsl #2]
   1a6a0:	cmp	r4, #256	; 0x100
   1a6a4:	bne	1a67c <__assert_fail@plt+0x93d4>
   1a6a8:	b	1a4bc <__assert_fail@plt+0x9214>
   1a6ac:	bl	11170 <__ctype_b_loc@plt>
   1a6b0:	ldr	r3, [r0]
   1a6b4:	cmp	r6, #0
   1a6b8:	moveq	ip, #1
   1a6bc:	sub	r3, r3, #2
   1a6c0:	bne	1a8d0 <__assert_fail@plt+0x9628>
   1a6c4:	ldrh	r2, [r3, #2]!
   1a6c8:	asr	r1, r4, #5
   1a6cc:	and	r0, r4, #31
   1a6d0:	add	r4, r4, #1
   1a6d4:	tst	r2, #1024	; 0x400
   1a6d8:	beq	1a6e8 <__assert_fail@plt+0x9440>
   1a6dc:	ldr	r2, [r5, r1, lsl #2]
   1a6e0:	orr	r2, r2, ip, lsl r0
   1a6e4:	str	r2, [r5, r1, lsl #2]
   1a6e8:	cmp	r4, #256	; 0x100
   1a6ec:	bne	1a6c4 <__assert_fail@plt+0x941c>
   1a6f0:	b	1a4bc <__assert_fail@plt+0x9214>
   1a6f4:	add	ip, r6, #256	; 0x100
   1a6f8:	mov	lr, #1
   1a6fc:	ldrh	r2, [r3, #2]!
   1a700:	tst	r2, #8
   1a704:	beq	1a720 <__assert_fail@plt+0x9478>
   1a708:	ldrb	r2, [r6]
   1a70c:	asr	r0, r2, #5
   1a710:	and	r2, r2, #31
   1a714:	ldr	r1, [r5, r0, lsl #2]
   1a718:	orr	r2, r1, lr, lsl r2
   1a71c:	str	r2, [r5, r0, lsl #2]
   1a720:	add	r6, r6, #1
   1a724:	cmp	ip, r6
   1a728:	bne	1a6fc <__assert_fail@plt+0x9454>
   1a72c:	b	1a4bc <__assert_fail@plt+0x9214>
   1a730:	add	ip, r6, #256	; 0x100
   1a734:	mov	lr, #1
   1a738:	ldrh	r2, [r3, #2]!
   1a73c:	tst	r2, #2
   1a740:	beq	1a75c <__assert_fail@plt+0x94b4>
   1a744:	ldrb	r2, [r6]
   1a748:	asr	r0, r2, #5
   1a74c:	and	r2, r2, #31
   1a750:	ldr	r1, [r5, r0, lsl #2]
   1a754:	orr	r2, r1, lr, lsl r2
   1a758:	str	r2, [r5, r0, lsl #2]
   1a75c:	add	r6, r6, #1
   1a760:	cmp	ip, r6
   1a764:	bne	1a738 <__assert_fail@plt+0x9490>
   1a768:	b	1a4bc <__assert_fail@plt+0x9214>
   1a76c:	add	ip, r6, #256	; 0x100
   1a770:	mov	lr, #1
   1a774:	ldrh	r2, [r3, #2]!
   1a778:	tst	r2, #512	; 0x200
   1a77c:	beq	1a798 <__assert_fail@plt+0x94f0>
   1a780:	ldrb	r2, [r6]
   1a784:	asr	r0, r2, #5
   1a788:	and	r2, r2, #31
   1a78c:	ldr	r1, [r5, r0, lsl #2]
   1a790:	orr	r2, r1, lr, lsl r2
   1a794:	str	r2, [r5, r0, lsl #2]
   1a798:	add	r6, r6, #1
   1a79c:	cmp	ip, r6
   1a7a0:	bne	1a774 <__assert_fail@plt+0x94cc>
   1a7a4:	b	1a4bc <__assert_fail@plt+0x9214>
   1a7a8:	movw	r1, #22740	; 0x58d4
   1a7ac:	movt	r1, #2
   1a7b0:	mov	r0, r7
   1a7b4:	bl	10fd8 <strcmp@plt>
   1a7b8:	subs	r4, r0, #0
   1a7bc:	bne	1a808 <__assert_fail@plt+0x9560>
   1a7c0:	bl	11170 <__ctype_b_loc@plt>
   1a7c4:	ldr	r3, [r0]
   1a7c8:	cmp	r6, #0
   1a7cc:	moveq	ip, #1
   1a7d0:	sub	r3, r3, #2
   1a7d4:	bne	1ab58 <__assert_fail@plt+0x98b0>
   1a7d8:	ldrh	r2, [r3, #2]!
   1a7dc:	asr	r1, r4, #5
   1a7e0:	and	r0, r4, #31
   1a7e4:	add	r4, r4, #1
   1a7e8:	tst	r2, #16384	; 0x4000
   1a7ec:	beq	1a7fc <__assert_fail@plt+0x9554>
   1a7f0:	ldr	r2, [r5, r1, lsl #2]
   1a7f4:	orr	r2, r2, ip, lsl r0
   1a7f8:	str	r2, [r5, r1, lsl #2]
   1a7fc:	cmp	r4, #256	; 0x100
   1a800:	bne	1a7d8 <__assert_fail@plt+0x9530>
   1a804:	b	1a4bc <__assert_fail@plt+0x9214>
   1a808:	movw	r1, #22692	; 0x58a4
   1a80c:	movt	r1, #2
   1a810:	mov	r0, r7
   1a814:	bl	10fd8 <strcmp@plt>
   1a818:	subs	r4, r0, #0
   1a81c:	bne	1a870 <__assert_fail@plt+0x95c8>
   1a820:	bl	11170 <__ctype_b_loc@plt>
   1a824:	ldr	r3, [r0]
   1a828:	cmp	r6, #0
   1a82c:	moveq	ip, #1
   1a830:	sub	r3, r3, #2
   1a834:	bne	1abd0 <__assert_fail@plt+0x9928>
   1a838:	ldrh	r2, [r3, #2]!
   1a83c:	asr	r1, r4, #5
   1a840:	and	r0, r4, #31
   1a844:	add	r4, r4, #1
   1a848:	tst	r2, #256	; 0x100
   1a84c:	beq	1a85c <__assert_fail@plt+0x95b4>
   1a850:	ldr	r2, [r5, r1, lsl #2]
   1a854:	orr	r2, r2, ip, lsl r0
   1a858:	str	r2, [r5, r1, lsl #2]
   1a85c:	cmp	r4, #256	; 0x100
   1a860:	bne	1a838 <__assert_fail@plt+0x9590>
   1a864:	b	1a4bc <__assert_fail@plt+0x9214>
   1a868:	mov	r0, #12
   1a86c:	b	1a4c0 <__assert_fail@plt+0x9218>
   1a870:	movw	r1, #22748	; 0x58dc
   1a874:	movt	r1, #2
   1a878:	mov	r0, r7
   1a87c:	bl	10fd8 <strcmp@plt>
   1a880:	subs	r4, r0, #0
   1a884:	bne	1a984 <__assert_fail@plt+0x96dc>
   1a888:	bl	11170 <__ctype_b_loc@plt>
   1a88c:	ldr	r3, [r0]
   1a890:	cmp	r6, #0
   1a894:	moveq	ip, #1
   1a898:	sub	r3, r3, #2
   1a89c:	bne	1ab94 <__assert_fail@plt+0x98ec>
   1a8a0:	ldrh	r2, [r3, #2]!
   1a8a4:	asr	r1, r4, #5
   1a8a8:	and	r0, r4, #31
   1a8ac:	add	r4, r4, #1
   1a8b0:	tst	r2, #1
   1a8b4:	beq	1a8c4 <__assert_fail@plt+0x961c>
   1a8b8:	ldr	r2, [r5, r1, lsl #2]
   1a8bc:	orr	r2, r2, ip, lsl r0
   1a8c0:	str	r2, [r5, r1, lsl #2]
   1a8c4:	cmp	r4, #256	; 0x100
   1a8c8:	bne	1a8a0 <__assert_fail@plt+0x95f8>
   1a8cc:	b	1a4bc <__assert_fail@plt+0x9214>
   1a8d0:	add	ip, r6, #256	; 0x100
   1a8d4:	mov	lr, #1
   1a8d8:	ldrh	r2, [r3, #2]!
   1a8dc:	tst	r2, #1024	; 0x400
   1a8e0:	beq	1a8fc <__assert_fail@plt+0x9654>
   1a8e4:	ldrb	r2, [r6]
   1a8e8:	asr	r0, r2, #5
   1a8ec:	and	r2, r2, #31
   1a8f0:	ldr	r1, [r5, r0, lsl #2]
   1a8f4:	orr	r2, r1, lr, lsl r2
   1a8f8:	str	r2, [r5, r0, lsl #2]
   1a8fc:	add	r6, r6, #1
   1a900:	cmp	ip, r6
   1a904:	bne	1a8d8 <__assert_fail@plt+0x9630>
   1a908:	b	1a4bc <__assert_fail@plt+0x9214>
   1a90c:	add	ip, r6, #256	; 0x100
   1a910:	mov	lr, #1
   1a914:	ldrh	r2, [r3, #2]!
   1a918:	tst	r2, #8192	; 0x2000
   1a91c:	beq	1a938 <__assert_fail@plt+0x9690>
   1a920:	ldrb	r2, [r6]
   1a924:	asr	r0, r2, #5
   1a928:	and	r2, r2, #31
   1a92c:	ldr	r1, [r5, r0, lsl #2]
   1a930:	orr	r2, r1, lr, lsl r2
   1a934:	str	r2, [r5, r0, lsl #2]
   1a938:	add	r6, r6, #1
   1a93c:	cmp	r6, ip
   1a940:	bne	1a914 <__assert_fail@plt+0x966c>
   1a944:	b	1a4bc <__assert_fail@plt+0x9214>
   1a948:	add	r1, r6, #256	; 0x100
   1a94c:	mov	lr, #1
   1a950:	ldrh	r2, [r3, #2]!
   1a954:	tst	r2, #2048	; 0x800
   1a958:	beq	1a974 <__assert_fail@plt+0x96cc>
   1a95c:	ldrb	r2, [r6]
   1a960:	asr	ip, r2, #5
   1a964:	and	r2, r2, #31
   1a968:	ldr	r0, [r5, ip, lsl #2]
   1a96c:	orr	r2, r0, lr, lsl r2
   1a970:	str	r2, [r5, ip, lsl #2]
   1a974:	add	r6, r6, #1
   1a978:	cmp	r1, r6
   1a97c:	bne	1a950 <__assert_fail@plt+0x96a8>
   1a980:	b	1a4bc <__assert_fail@plt+0x9214>
   1a984:	movw	r1, #22756	; 0x58e4
   1a988:	movt	r1, #2
   1a98c:	mov	r0, r7
   1a990:	bl	10fd8 <strcmp@plt>
   1a994:	subs	r4, r0, #0
   1a998:	bne	1aa20 <__assert_fail@plt+0x9778>
   1a99c:	bl	11170 <__ctype_b_loc@plt>
   1a9a0:	ldr	r3, [r0]
   1a9a4:	cmp	r6, #0
   1a9a8:	moveq	r0, #1
   1a9ac:	sub	r3, r3, #2
   1a9b0:	bne	1a9e4 <__assert_fail@plt+0x973c>
   1a9b4:	ldrsh	r2, [r3, #2]!
   1a9b8:	asr	r1, r4, #5
   1a9bc:	and	ip, r4, #31
   1a9c0:	add	r4, r4, #1
   1a9c4:	cmp	r2, #0
   1a9c8:	bge	1a9d8 <__assert_fail@plt+0x9730>
   1a9cc:	ldr	r2, [r5, r1, lsl #2]
   1a9d0:	orr	r2, r2, r0, lsl ip
   1a9d4:	str	r2, [r5, r1, lsl #2]
   1a9d8:	cmp	r4, #256	; 0x100
   1a9dc:	bne	1a9b4 <__assert_fail@plt+0x970c>
   1a9e0:	b	1a4bc <__assert_fail@plt+0x9214>
   1a9e4:	add	lr, r6, #256	; 0x100
   1a9e8:	mov	ip, #1
   1a9ec:	ldrsh	r2, [r3, #2]!
   1a9f0:	cmp	r2, #0
   1a9f4:	bge	1aa10 <__assert_fail@plt+0x9768>
   1a9f8:	ldrb	r2, [r6]
   1a9fc:	asr	r0, r2, #5
   1aa00:	and	r2, r2, #31
   1aa04:	ldr	r1, [r5, r0, lsl #2]
   1aa08:	orr	r2, r1, ip, lsl r2
   1aa0c:	str	r2, [r5, r0, lsl #2]
   1aa10:	add	r6, r6, #1
   1aa14:	cmp	lr, r6
   1aa18:	bne	1a9ec <__assert_fail@plt+0x9744>
   1aa1c:	b	1a4bc <__assert_fail@plt+0x9214>
   1aa20:	movw	r1, #22764	; 0x58ec
   1aa24:	movt	r1, #2
   1aa28:	mov	r0, r7
   1aa2c:	bl	10fd8 <strcmp@plt>
   1aa30:	subs	r4, r0, #0
   1aa34:	bne	1aabc <__assert_fail@plt+0x9814>
   1aa38:	bl	11170 <__ctype_b_loc@plt>
   1aa3c:	ldr	r3, [r0]
   1aa40:	cmp	r6, #0
   1aa44:	moveq	r0, #1
   1aa48:	sub	r3, r3, #2
   1aa4c:	bne	1aa80 <__assert_fail@plt+0x97d8>
   1aa50:	ldrh	r2, [r3, #2]!
   1aa54:	asr	r1, r4, #5
   1aa58:	and	ip, r4, #31
   1aa5c:	add	r4, r4, #1
   1aa60:	tst	r2, #4
   1aa64:	beq	1aa74 <__assert_fail@plt+0x97cc>
   1aa68:	ldr	r2, [r5, r1, lsl #2]
   1aa6c:	orr	r2, r2, r0, lsl ip
   1aa70:	str	r2, [r5, r1, lsl #2]
   1aa74:	cmp	r4, #256	; 0x100
   1aa78:	bne	1aa50 <__assert_fail@plt+0x97a8>
   1aa7c:	b	1a4bc <__assert_fail@plt+0x9214>
   1aa80:	add	lr, r6, #256	; 0x100
   1aa84:	mov	ip, #1
   1aa88:	ldrh	r2, [r3, #2]!
   1aa8c:	tst	r2, #4
   1aa90:	beq	1aaac <__assert_fail@plt+0x9804>
   1aa94:	ldrb	r2, [r6]
   1aa98:	asr	r0, r2, #5
   1aa9c:	and	r2, r2, #31
   1aaa0:	ldr	r1, [r5, r0, lsl #2]
   1aaa4:	orr	r2, r1, ip, lsl r2
   1aaa8:	str	r2, [r5, r0, lsl #2]
   1aaac:	add	r6, r6, #1
   1aab0:	cmp	r6, lr
   1aab4:	bne	1aa88 <__assert_fail@plt+0x97e0>
   1aab8:	b	1a4bc <__assert_fail@plt+0x9214>
   1aabc:	mov	r0, r7
   1aac0:	movw	r1, #22772	; 0x58f4
   1aac4:	movt	r1, #2
   1aac8:	bl	10fd8 <strcmp@plt>
   1aacc:	subs	r4, r0, #0
   1aad0:	movne	r0, #4
   1aad4:	bne	1a4c0 <__assert_fail@plt+0x9218>
   1aad8:	bl	11170 <__ctype_b_loc@plt>
   1aadc:	ldr	r3, [r0]
   1aae0:	cmp	r6, #0
   1aae4:	moveq	r0, #1
   1aae8:	sub	r3, r3, #2
   1aaec:	bne	1ab20 <__assert_fail@plt+0x9878>
   1aaf0:	ldrh	r2, [r3, #2]!
   1aaf4:	asr	r1, r4, #5
   1aaf8:	and	ip, r4, #31
   1aafc:	add	r4, r4, #1
   1ab00:	tst	r2, #4096	; 0x1000
   1ab04:	beq	1ab14 <__assert_fail@plt+0x986c>
   1ab08:	ldr	r2, [r5, r1, lsl #2]
   1ab0c:	orr	r2, r2, r0, lsl ip
   1ab10:	str	r2, [r5, r1, lsl #2]
   1ab14:	cmp	r4, #256	; 0x100
   1ab18:	bne	1aaf0 <__assert_fail@plt+0x9848>
   1ab1c:	b	1a4bc <__assert_fail@plt+0x9214>
   1ab20:	mov	ip, #1
   1ab24:	ldrh	r2, [r3, #2]!
   1ab28:	tst	r2, #4096	; 0x1000
   1ab2c:	beq	1ab48 <__assert_fail@plt+0x98a0>
   1ab30:	ldrb	r2, [r6, r4]
   1ab34:	asr	r0, r2, #5
   1ab38:	and	r2, r2, #31
   1ab3c:	ldr	r1, [r5, r0, lsl #2]
   1ab40:	orr	r2, r1, ip, lsl r2
   1ab44:	str	r2, [r5, r0, lsl #2]
   1ab48:	add	r4, r4, #1
   1ab4c:	cmp	r4, #256	; 0x100
   1ab50:	bne	1ab24 <__assert_fail@plt+0x987c>
   1ab54:	b	1a4bc <__assert_fail@plt+0x9214>
   1ab58:	add	lr, r6, #256	; 0x100
   1ab5c:	mov	ip, #1
   1ab60:	ldrh	r2, [r3, #2]!
   1ab64:	tst	r2, #16384	; 0x4000
   1ab68:	beq	1ab84 <__assert_fail@plt+0x98dc>
   1ab6c:	ldrb	r2, [r6]
   1ab70:	asr	r0, r2, #5
   1ab74:	and	r2, r2, #31
   1ab78:	ldr	r1, [r5, r0, lsl #2]
   1ab7c:	orr	r2, r1, ip, lsl r2
   1ab80:	str	r2, [r5, r0, lsl #2]
   1ab84:	add	r6, r6, #1
   1ab88:	cmp	lr, r6
   1ab8c:	bne	1ab60 <__assert_fail@plt+0x98b8>
   1ab90:	b	1a4bc <__assert_fail@plt+0x9214>
   1ab94:	add	lr, r6, #256	; 0x100
   1ab98:	mov	ip, #1
   1ab9c:	ldrh	r2, [r3, #2]!
   1aba0:	tst	r2, #1
   1aba4:	beq	1abc0 <__assert_fail@plt+0x9918>
   1aba8:	ldrb	r2, [r6]
   1abac:	asr	r0, r2, #5
   1abb0:	and	r2, r2, #31
   1abb4:	ldr	r1, [r5, r0, lsl #2]
   1abb8:	orr	r2, r1, ip, lsl r2
   1abbc:	str	r2, [r5, r0, lsl #2]
   1abc0:	add	r6, r6, #1
   1abc4:	cmp	lr, r6
   1abc8:	bne	1ab9c <__assert_fail@plt+0x98f4>
   1abcc:	b	1a4bc <__assert_fail@plt+0x9214>
   1abd0:	add	lr, r6, #256	; 0x100
   1abd4:	mov	ip, #1
   1abd8:	ldrh	r2, [r3, #2]!
   1abdc:	tst	r2, #256	; 0x100
   1abe0:	beq	1abfc <__assert_fail@plt+0x9954>
   1abe4:	ldrb	r2, [r6]
   1abe8:	asr	r0, r2, #5
   1abec:	and	r2, r2, #31
   1abf0:	ldr	r1, [r5, r0, lsl #2]
   1abf4:	orr	r2, r1, ip, lsl r2
   1abf8:	str	r2, [r5, r0, lsl #2]
   1abfc:	add	r6, r6, #1
   1ac00:	cmp	r6, lr
   1ac04:	bne	1abd8 <__assert_fail@plt+0x9930>
   1ac08:	b	1a4bc <__assert_fail@plt+0x9214>
   1ac0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ac10:	mov	r5, r3
   1ac14:	strd	r6, [sp, #8]
   1ac18:	mov	r6, r0
   1ac1c:	mov	r0, #32
   1ac20:	strd	r8, [sp, #16]
   1ac24:	mov	r9, #0
   1ac28:	strd	sl, [sp, #24]
   1ac2c:	mov	fp, r1
   1ac30:	mov	r1, #1
   1ac34:	str	lr, [sp, #32]
   1ac38:	sub	sp, sp, #44	; 0x2c
   1ac3c:	mov	sl, r2
   1ac40:	ldrb	r8, [sp, #80]	; 0x50
   1ac44:	str	r9, [sp, #20]
   1ac48:	bl	243cc <__assert_fail@plt+0x13124>
   1ac4c:	subs	r4, r0, #0
   1ac50:	beq	1ae28 <__assert_fail@plt+0x9b80>
   1ac54:	mov	r1, #1
   1ac58:	mov	r0, #40	; 0x28
   1ac5c:	bl	243cc <__assert_fail@plt+0x13124>
   1ac60:	subs	r7, r0, #0
   1ac64:	beq	1ae3c <__assert_fail@plt+0x9b94>
   1ac68:	ldrb	ip, [r7, #16]
   1ac6c:	add	lr, sp, #20
   1ac70:	mov	r0, fp
   1ac74:	add	r3, r7, #36	; 0x24
   1ac78:	add	r2, r7, #12
   1ac7c:	mov	r1, r4
   1ac80:	bfi	ip, r8, #0, #1
   1ac84:	strb	ip, [r7, #16]
   1ac88:	str	lr, [sp]
   1ac8c:	str	sl, [sp, #4]
   1ac90:	str	r9, [sp, #8]
   1ac94:	bl	1a3c4 <__assert_fail@plt+0x911c>
   1ac98:	subs	sl, r0, #0
   1ac9c:	bne	1ae58 <__assert_fail@plt+0x9bb0>
   1aca0:	ldrb	r3, [r5]
   1aca4:	cmp	r3, #0
   1aca8:	beq	1acd0 <__assert_fail@plt+0x9a28>
   1acac:	mov	ip, #1
   1acb0:	asr	r1, r3, #5
   1acb4:	and	r0, r3, #31
   1acb8:	ldrb	r3, [r5, #1]!
   1acbc:	ldr	r2, [r4, r1, lsl #2]
   1acc0:	cmp	r3, #0
   1acc4:	orr	r2, r2, ip, lsl r0
   1acc8:	str	r2, [r4, r1, lsl #2]
   1accc:	bne	1acb0 <__assert_fail@plt+0x9a08>
   1acd0:	cmp	r8, #0
   1acd4:	beq	1acf4 <__assert_fail@plt+0x9a4c>
   1acd8:	sub	r3, r4, #4
   1acdc:	add	r1, r4, #28
   1ace0:	ldr	r2, [r3, #4]!
   1ace4:	mvn	r2, r2
   1ace8:	cmp	r1, r3
   1acec:	str	r2, [r3]
   1acf0:	bne	1ace0 <__assert_fail@plt+0x9a38>
   1acf4:	ldr	r3, [r6, #92]	; 0x5c
   1acf8:	cmp	r3, #1
   1acfc:	ble	1ad28 <__assert_fail@plt+0x9a80>
   1ad00:	ldr	r1, [r6, #60]	; 0x3c
   1ad04:	sub	r3, r4, #4
   1ad08:	add	ip, r4, #28
   1ad0c:	sub	r1, r1, #4
   1ad10:	ldr	r2, [r3, #4]!
   1ad14:	ldr	r0, [r1, #4]!
   1ad18:	cmp	ip, r3
   1ad1c:	and	r2, r2, r0
   1ad20:	str	r2, [r3]
   1ad24:	bne	1ad10 <__assert_fail@plt+0x9a68>
   1ad28:	add	fp, sp, #24
   1ad2c:	mov	r5, #0
   1ad30:	mov	ip, #3
   1ad34:	add	r9, r6, #56	; 0x38
   1ad38:	add	sl, r6, #64	; 0x40
   1ad3c:	mov	r3, r5
   1ad40:	str	fp, [sp]
   1ad44:	mov	r2, r5
   1ad48:	mov	r0, r9
   1ad4c:	strd	r4, [sp, #24]
   1ad50:	mov	r1, sl
   1ad54:	strb	ip, [sp, #28]
   1ad58:	bl	171c4 <__assert_fail@plt+0x5f1c>
   1ad5c:	subs	r8, r0, #0
   1ad60:	beq	1ae04 <__assert_fail@plt+0x9b5c>
   1ad64:	ldr	r3, [r6, #92]	; 0x5c
   1ad68:	cmp	r3, #1
   1ad6c:	ble	1adf8 <__assert_fail@plt+0x9b50>
   1ad70:	ldrb	ip, [r6, #88]	; 0x58
   1ad74:	mov	r0, #6
   1ad78:	mov	r3, r5
   1ad7c:	mov	r2, r5
   1ad80:	mov	r1, sl
   1ad84:	str	fp, [sp]
   1ad88:	str	r7, [sp, #24]
   1ad8c:	strb	r0, [sp, #28]
   1ad90:	mov	r0, r9
   1ad94:	orr	ip, ip, #2
   1ad98:	strb	ip, [r6, #88]	; 0x58
   1ad9c:	bl	171c4 <__assert_fail@plt+0x5f1c>
   1ada0:	subs	r3, r0, #0
   1ada4:	beq	1ae04 <__assert_fail@plt+0x9b5c>
   1ada8:	add	ip, sp, #32
   1adac:	mov	r4, #0
   1adb0:	mov	r5, #0
   1adb4:	mov	r2, r8
   1adb8:	str	ip, [sp]
   1adbc:	mov	ip, #10
   1adc0:	mov	r1, sl
   1adc4:	mov	r0, r9
   1adc8:	strd	r4, [sp, #32]
   1adcc:	strb	ip, [sp, #36]	; 0x24
   1add0:	bl	171c4 <__assert_fail@plt+0x5f1c>
   1add4:	mov	r8, r0
   1add8:	mov	r0, r8
   1addc:	add	sp, sp, #44	; 0x2c
   1ade0:	ldrd	r4, [sp]
   1ade4:	ldrd	r6, [sp, #8]
   1ade8:	ldrd	r8, [sp, #16]
   1adec:	ldrd	sl, [sp, #24]
   1adf0:	add	sp, sp, #32
   1adf4:	pop	{pc}		; (ldr pc, [sp], #4)
   1adf8:	mov	r0, r7
   1adfc:	bl	15e2c <__assert_fail@plt+0x4b84>
   1ae00:	b	1add8 <__assert_fail@plt+0x9b30>
   1ae04:	mov	r0, r4
   1ae08:	mov	r8, #0
   1ae0c:	bl	24628 <__assert_fail@plt+0x13380>
   1ae10:	mov	r0, r7
   1ae14:	bl	15e2c <__assert_fail@plt+0x4b84>
   1ae18:	ldr	r2, [sp, #84]	; 0x54
   1ae1c:	mov	r3, #12
   1ae20:	str	r3, [r2]
   1ae24:	b	1add8 <__assert_fail@plt+0x9b30>
   1ae28:	ldr	r2, [sp, #84]	; 0x54
   1ae2c:	mov	r3, #12
   1ae30:	mov	r8, r4
   1ae34:	str	r3, [r2]
   1ae38:	b	1add8 <__assert_fail@plt+0x9b30>
   1ae3c:	mov	r0, r4
   1ae40:	mov	r8, r7
   1ae44:	bl	24628 <__assert_fail@plt+0x13380>
   1ae48:	ldr	r2, [sp, #84]	; 0x54
   1ae4c:	mov	r3, #12
   1ae50:	str	r3, [r2]
   1ae54:	b	1add8 <__assert_fail@plt+0x9b30>
   1ae58:	mov	r0, r4
   1ae5c:	mov	r8, r9
   1ae60:	bl	24628 <__assert_fail@plt+0x13380>
   1ae64:	mov	r0, r7
   1ae68:	bl	15e2c <__assert_fail@plt+0x4b84>
   1ae6c:	ldr	r3, [sp, #84]	; 0x54
   1ae70:	str	sl, [r3]
   1ae74:	b	1add8 <__assert_fail@plt+0x9b30>
   1ae78:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ae7c:	strd	r6, [sp, #8]
   1ae80:	ldr	r6, [r0]
   1ae84:	strd	r8, [sp, #16]
   1ae88:	strd	sl, [sp, #24]
   1ae8c:	str	lr, [sp, #32]
   1ae90:	sub	sp, sp, #316	; 0x13c
   1ae94:	ldr	ip, [r6, #92]	; 0x5c
   1ae98:	cmp	ip, #1
   1ae9c:	ldr	ip, [r1]
   1aea0:	movne	r5, #0
   1aea4:	ldreq	r5, [r0, #12]
   1aea8:	ubfxeq	r5, r5, #22, #1
   1aeac:	cmp	ip, #0
   1aeb0:	ble	1af9c <__assert_fail@plt+0x9cf4>
   1aeb4:	mov	r4, r3
   1aeb8:	mov	r3, #255	; 0xff
   1aebc:	movt	r3, #32
   1aec0:	mov	r8, #0
   1aec4:	str	r5, [sp, #4]
   1aec8:	str	r2, [sp, #8]
   1aecc:	str	r4, [sp, #12]
   1aed0:	str	r3, [sp, #32]
   1aed4:	mov	r3, #1
   1aed8:	movt	r3, #32
   1aedc:	str	r1, [sp, #20]
   1aee0:	str	r0, [sp, #24]
   1aee4:	str	r3, [sp, #36]	; 0x24
   1aee8:	b	1af1c <__assert_fail@plt+0x9c74>
   1aeec:	cmp	r7, #3
   1aef0:	beq	1b14c <__assert_fail@plt+0x9ea4>
   1aef4:	cmp	r7, #6
   1aef8:	beq	1afb8 <__assert_fail@plt+0x9d10>
   1aefc:	and	r3, r7, #253	; 0xfd
   1af00:	cmp	r3, #5
   1af04:	beq	1b304 <__assert_fail@plt+0xa05c>
   1af08:	cmp	r7, #2
   1af0c:	beq	1b324 <__assert_fail@plt+0xa07c>
   1af10:	add	r8, r8, #1
   1af14:	cmp	r8, ip
   1af18:	bge	1af9c <__assert_fail@plt+0x9cf4>
   1af1c:	ldr	r3, [sp, #8]
   1af20:	ldr	r2, [r6]
   1af24:	ldr	r3, [r3]
   1af28:	ldr	r9, [r3, r8, lsl #2]
   1af2c:	lsl	r3, r9, #3
   1af30:	str	r3, [sp]
   1af34:	add	r3, r2, r3
   1af38:	ldrb	r7, [r3, #4]
   1af3c:	cmp	r7, #1
   1af40:	bne	1aeec <__assert_fail@plt+0x9c44>
   1af44:	ldr	r3, [sp, #4]
   1af48:	ldrb	fp, [r2, r9, lsl #3]
   1af4c:	ldr	r4, [sp, #12]
   1af50:	cmp	r3, #0
   1af54:	strb	r7, [r4, fp]
   1af58:	beq	1af6c <__assert_fail@plt+0x9cc4>
   1af5c:	bl	11140 <__ctype_tolower_loc@plt>
   1af60:	ldr	r3, [r0]
   1af64:	ldr	r3, [r3, fp, lsl #2]
   1af68:	strb	r7, [r4, r3]
   1af6c:	ldr	r3, [sp, #24]
   1af70:	ldr	r3, [r3, #12]
   1af74:	tst	r3, #4194304	; 0x400000
   1af78:	beq	1af88 <__assert_fail@plt+0x9ce0>
   1af7c:	ldr	r3, [r6, #92]	; 0x5c
   1af80:	cmp	r3, #1
   1af84:	bgt	1b204 <__assert_fail@plt+0x9f5c>
   1af88:	ldr	r3, [sp, #20]
   1af8c:	add	r8, r8, #1
   1af90:	ldr	ip, [r3]
   1af94:	cmp	r8, ip
   1af98:	blt	1af1c <__assert_fail@plt+0x9c74>
   1af9c:	add	sp, sp, #316	; 0x13c
   1afa0:	ldrd	r4, [sp]
   1afa4:	ldrd	r6, [sp, #8]
   1afa8:	ldrd	r8, [sp, #16]
   1afac:	ldrd	sl, [sp, #24]
   1afb0:	add	sp, sp, #32
   1afb4:	pop	{pc}		; (ldr pc, [sp], #4)
   1afb8:	ldr	r2, [r6, #92]	; 0x5c
   1afbc:	ldr	fp, [r3]
   1afc0:	cmp	r2, #1
   1afc4:	ble	1afec <__assert_fail@plt+0x9d44>
   1afc8:	ldr	r2, [fp, #36]	; 0x24
   1afcc:	cmp	r2, #0
   1afd0:	bne	1b0e8 <__assert_fail@plt+0x9e40>
   1afd4:	ldrb	r2, [fp, #16]
   1afd8:	tst	r2, #1
   1afdc:	bne	1b0e8 <__assert_fail@plt+0x9e40>
   1afe0:	ldr	r2, [fp, #32]
   1afe4:	cmp	r2, #0
   1afe8:	bne	1b0e8 <__assert_fail@plt+0x9e40>
   1afec:	ldr	r2, [fp, #20]
   1aff0:	cmp	r2, #0
   1aff4:	ble	1af10 <__assert_fail@plt+0x9c68>
   1aff8:	mov	r5, fp
   1affc:	mov	r7, #0
   1b000:	str	r8, [sp, #16]
   1b004:	add	r9, sp, #56	; 0x38
   1b008:	add	sl, sp, #48	; 0x30
   1b00c:	ldr	r4, [sp, #12]
   1b010:	ldr	fp, [sp, #24]
   1b014:	b	1b024 <__assert_fail@plt+0x9d7c>
   1b018:	ldr	r2, [r5, #20]
   1b01c:	cmp	r7, r2
   1b020:	bge	1b0dc <__assert_fail@plt+0x9e34>
   1b024:	mov	r2, #0
   1b028:	mov	r3, #0
   1b02c:	lsl	r8, r7, #2
   1b030:	mov	r0, r9
   1b034:	strd	r2, [sl]
   1b038:	mov	r2, sl
   1b03c:	ldr	r1, [r5]
   1b040:	ldr	r1, [r1, r7, lsl #2]
   1b044:	add	r7, r7, #1
   1b048:	bl	10fc0 <wcrtomb@plt>
   1b04c:	cmn	r0, #1
   1b050:	beq	1b088 <__assert_fail@plt+0x9de0>
   1b054:	ldr	r3, [sp, #4]
   1b058:	ldrb	r2, [sp, #56]	; 0x38
   1b05c:	cmp	r3, #0
   1b060:	mov	r3, #1
   1b064:	str	r2, [sp]
   1b068:	strb	r3, [r4, r2]
   1b06c:	beq	1b088 <__assert_fail@plt+0x9de0>
   1b070:	bl	11140 <__ctype_tolower_loc@plt>
   1b074:	ldr	r1, [r0]
   1b078:	mov	r3, #1
   1b07c:	ldr	r2, [sp]
   1b080:	ldr	r2, [r1, r2, lsl #2]
   1b084:	strb	r3, [r4, r2]
   1b088:	ldr	r2, [fp, #12]
   1b08c:	tst	r2, #4194304	; 0x400000
   1b090:	beq	1b018 <__assert_fail@plt+0x9d70>
   1b094:	ldr	r2, [r6, #92]	; 0x5c
   1b098:	cmp	r2, #1
   1b09c:	ble	1b018 <__assert_fail@plt+0x9d70>
   1b0a0:	ldr	r2, [r5]
   1b0a4:	ldr	r0, [r2, r8]
   1b0a8:	bl	11050 <towlower@plt>
   1b0ac:	mov	r1, r0
   1b0b0:	mov	r2, sl
   1b0b4:	mov	r0, r9
   1b0b8:	bl	10fc0 <wcrtomb@plt>
   1b0bc:	cmn	r0, #1
   1b0c0:	beq	1b018 <__assert_fail@plt+0x9d70>
   1b0c4:	ldrb	r2, [sp, #56]	; 0x38
   1b0c8:	mov	r3, #1
   1b0cc:	strb	r3, [r4, r2]
   1b0d0:	ldr	r2, [r5, #20]
   1b0d4:	cmp	r7, r2
   1b0d8:	blt	1b024 <__assert_fail@plt+0x9d7c>
   1b0dc:	str	r4, [sp, #12]
   1b0e0:	ldr	r8, [sp, #16]
   1b0e4:	b	1af88 <__assert_fail@plt+0x9ce0>
   1b0e8:	ldr	r5, [sp, #4]
   1b0ec:	mov	r3, #0
   1b0f0:	add	r9, sp, #56	; 0x38
   1b0f4:	add	sl, sp, #48	; 0x30
   1b0f8:	mov	r7, #1
   1b0fc:	ldr	r4, [sp, #12]
   1b100:	strb	r3, [sp, #48]	; 0x30
   1b104:	mov	r0, #0
   1b108:	mov	r1, #0
   1b10c:	mov	r3, r9
   1b110:	mov	r2, #1
   1b114:	strd	r0, [r9]
   1b118:	mov	r1, sl
   1b11c:	bl	246d4 <__assert_fail@plt+0x1342c>
   1b120:	ldrb	r3, [sp, #48]	; 0x30
   1b124:	cmn	r0, #2
   1b128:	strbeq	r7, [r4, r3]
   1b12c:	add	r3, r3, #1
   1b130:	uxtb	r3, r3
   1b134:	cmp	r3, #0
   1b138:	strb	r3, [sp, #48]	; 0x30
   1b13c:	bne	1b104 <__assert_fail@plt+0x9e5c>
   1b140:	str	r5, [sp, #4]
   1b144:	str	r4, [sp, #12]
   1b148:	b	1af88 <__assert_fail@plt+0x9ce0>
   1b14c:	ldr	r4, [sp, #12]
   1b150:	mov	sl, #0
   1b154:	mov	r9, #32
   1b158:	str	r8, [sp, #28]
   1b15c:	mov	fp, #1
   1b160:	mov	r5, sl
   1b164:	ldr	r8, [sp, #4]
   1b168:	str	r6, [sp, #16]
   1b16c:	ldr	r3, [sp]
   1b170:	sub	r7, r9, #32
   1b174:	ldr	r2, [r2, r3]
   1b178:	ldr	r6, [r2, sl]
   1b17c:	add	r3, r5, r7
   1b180:	add	r2, r4, r7
   1b184:	lsr	r3, r6, r3
   1b188:	tst	r3, #1
   1b18c:	beq	1b1bc <__assert_fail@plt+0x9f14>
   1b190:	cmp	r8, #0
   1b194:	add	r3, r7, #128	; 0x80
   1b198:	strb	fp, [r4, r7]
   1b19c:	beq	1b1bc <__assert_fail@plt+0x9f14>
   1b1a0:	cmp	r3, #384	; 0x180
   1b1a4:	bcs	1b1b8 <__assert_fail@plt+0x9f10>
   1b1a8:	bl	11140 <__ctype_tolower_loc@plt>
   1b1ac:	ldr	r3, [r0]
   1b1b0:	ldr	r2, [r3, r7, lsl #2]
   1b1b4:	add	r2, r4, r2
   1b1b8:	strb	fp, [r2]
   1b1bc:	add	r7, r7, #1
   1b1c0:	cmp	r9, r7
   1b1c4:	bne	1b17c <__assert_fail@plt+0x9ed4>
   1b1c8:	add	r9, r9, #32
   1b1cc:	add	sl, sl, #4
   1b1d0:	cmp	r9, #288	; 0x120
   1b1d4:	sub	r5, r5, #32
   1b1d8:	beq	1b1e8 <__assert_fail@plt+0x9f40>
   1b1dc:	ldr	r3, [sp, #16]
   1b1e0:	ldr	r2, [r3]
   1b1e4:	b	1b16c <__assert_fail@plt+0x9ec4>
   1b1e8:	str	r8, [sp, #4]
   1b1ec:	ldr	r3, [sp, #20]
   1b1f0:	str	r4, [sp, #12]
   1b1f4:	ldr	r6, [sp, #16]
   1b1f8:	ldr	r8, [sp, #28]
   1b1fc:	ldr	ip, [r3]
   1b200:	b	1af10 <__assert_fail@plt+0x9c68>
   1b204:	ldr	r3, [r6]
   1b208:	add	r2, r9, #1
   1b20c:	ldrb	r1, [r3, r9, lsl #3]
   1b210:	strb	r1, [sp, #56]	; 0x38
   1b214:	ldr	r1, [r6, #8]
   1b218:	cmp	r2, r1
   1b21c:	bcs	1b34c <__assert_fail@plt+0xa0a4>
   1b220:	ldr	r1, [sp]
   1b224:	ldr	r0, [sp, #32]
   1b228:	add	sl, r1, #8
   1b22c:	add	r3, r3, sl
   1b230:	ldr	r1, [r3, #4]
   1b234:	and	r1, r1, r0
   1b238:	ldr	r0, [sp, #36]	; 0x24
   1b23c:	cmp	r1, r0
   1b240:	bne	1b34c <__assert_fail@plt+0xa0a4>
   1b244:	add	r7, sp, #57	; 0x39
   1b248:	ldr	r5, [sp, #4]
   1b24c:	ldr	r4, [sp, #12]
   1b250:	ldr	r0, [sp, #32]
   1b254:	ldr	ip, [sp, #36]	; 0x24
   1b258:	b	1b274 <__assert_fail@plt+0x9fcc>
   1b25c:	ldr	r3, [r6]
   1b260:	add	r3, r3, r2, lsl #3
   1b264:	ldr	r1, [r3, #4]
   1b268:	and	r1, r1, r0
   1b26c:	cmp	r1, ip
   1b270:	bne	1b28c <__assert_fail@plt+0x9fe4>
   1b274:	ldrb	r3, [r3]
   1b278:	add	r2, r2, #1
   1b27c:	strb	r3, [r7], #1
   1b280:	ldr	r3, [r6, #8]
   1b284:	cmp	r3, r2
   1b288:	bhi	1b25c <__assert_fail@plt+0x9fb4>
   1b28c:	add	r9, sp, #56	; 0x38
   1b290:	str	r5, [sp, #4]
   1b294:	sub	r7, r7, r9
   1b298:	str	r4, [sp, #12]
   1b29c:	add	sl, sp, #48	; 0x30
   1b2a0:	mov	r4, #0
   1b2a4:	mov	r5, #0
   1b2a8:	mov	r2, r7
   1b2ac:	mov	r3, sl
   1b2b0:	mov	r1, r9
   1b2b4:	add	r0, sp, #44	; 0x2c
   1b2b8:	strd	r4, [sl]
   1b2bc:	bl	246d4 <__assert_fail@plt+0x1342c>
   1b2c0:	cmp	r0, r7
   1b2c4:	bne	1af88 <__assert_fail@plt+0x9ce0>
   1b2c8:	ldr	r0, [sp, #44]	; 0x2c
   1b2cc:	bl	11050 <towlower@plt>
   1b2d0:	mov	r1, r0
   1b2d4:	mov	r2, sl
   1b2d8:	mov	r0, r9
   1b2dc:	bl	10fc0 <wcrtomb@plt>
   1b2e0:	cmn	r0, #1
   1b2e4:	beq	1af88 <__assert_fail@plt+0x9ce0>
   1b2e8:	ldrb	r3, [sp, #56]	; 0x38
   1b2ec:	mov	r2, #1
   1b2f0:	ldr	r1, [sp, #12]
   1b2f4:	strb	r2, [r1, r3]
   1b2f8:	ldr	r3, [sp, #20]
   1b2fc:	ldr	ip, [r3]
   1b300:	b	1af10 <__assert_fail@plt+0x9c68>
   1b304:	ldr	r4, [sp, #12]
   1b308:	mov	r2, #256	; 0x100
   1b30c:	mov	r1, #1
   1b310:	mov	r0, r4
   1b314:	bl	111c4 <memset@plt>
   1b318:	cmp	r7, #2
   1b31c:	bne	1af9c <__assert_fail@plt+0x9cf4>
   1b320:	b	1b338 <__assert_fail@plt+0xa090>
   1b324:	ldr	r4, [sp, #12]
   1b328:	mov	r2, #256	; 0x100
   1b32c:	mov	r1, #1
   1b330:	mov	r0, r4
   1b334:	bl	111c4 <memset@plt>
   1b338:	ldr	r2, [sp, #24]
   1b33c:	ldrb	r3, [r2, #28]
   1b340:	orr	r3, r3, #1
   1b344:	strb	r3, [r2, #28]
   1b348:	b	1af9c <__assert_fail@plt+0x9cf4>
   1b34c:	add	r9, sp, #56	; 0x38
   1b350:	b	1b29c <__assert_fail@plt+0x9ff4>
   1b354:	add	ip, r0, r2, lsl #3
   1b358:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1b35c:	strd	r6, [sp, #8]
   1b360:	str	sl, [sp, #24]
   1b364:	ldrb	sl, [ip, #4]
   1b368:	strd	r8, [sp, #16]
   1b36c:	str	lr, [sp, #28]
   1b370:	cmp	sl, #7
   1b374:	beq	1b4e0 <__assert_fail@plt+0xa238>
   1b378:	ldr	ip, [r3, #80]	; 0x50
   1b37c:	cmp	ip, #1
   1b380:	beq	1b3c8 <__assert_fail@plt+0xa120>
   1b384:	mov	r9, r1
   1b388:	mov	r5, r0
   1b38c:	ldr	r1, [sp, #32]
   1b390:	mov	r0, r3
   1b394:	mov	r8, r3
   1b398:	mov	r6, r2
   1b39c:	bl	169fc <__assert_fail@plt+0x5754>
   1b3a0:	cmp	sl, #5
   1b3a4:	mov	r7, r0
   1b3a8:	beq	1b3e8 <__assert_fail@plt+0xa140>
   1b3ac:	sub	r4, sl, #6
   1b3b0:	cmp	r0, #1
   1b3b4:	clz	r4, r4
   1b3b8:	lsr	r4, r4, #5
   1b3bc:	movle	r4, #0
   1b3c0:	cmp	r4, #0
   1b3c4:	bne	1b430 <__assert_fail@plt+0xa188>
   1b3c8:	mov	r7, #0
   1b3cc:	mov	r0, r7
   1b3d0:	ldrd	r4, [sp]
   1b3d4:	ldrd	r6, [sp, #8]
   1b3d8:	ldrd	r8, [sp, #16]
   1b3dc:	ldr	sl, [sp, #24]
   1b3e0:	add	sp, sp, #28
   1b3e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b3e8:	cmp	r0, #1
   1b3ec:	ble	1b3c8 <__assert_fail@plt+0xa120>
   1b3f0:	ldr	r3, [r9]
   1b3f4:	tst	r3, #64	; 0x40
   1b3f8:	bne	1b410 <__assert_fail@plt+0xa168>
   1b3fc:	ldr	r2, [r8, #4]
   1b400:	ldr	r1, [sp, #32]
   1b404:	ldrb	r2, [r2, r1]
   1b408:	cmp	r2, #10
   1b40c:	beq	1b3c8 <__assert_fail@plt+0xa120>
   1b410:	tst	r3, #128	; 0x80
   1b414:	beq	1b3cc <__assert_fail@plt+0xa124>
   1b418:	ldr	r3, [r8, #4]
   1b41c:	ldr	r2, [sp, #32]
   1b420:	ldrb	r3, [r3, r2]
   1b424:	cmp	r3, #0
   1b428:	beq	1b3c8 <__assert_fail@plt+0xa120>
   1b42c:	b	1b3cc <__assert_fail@plt+0xa124>
   1b430:	ldr	r6, [r5, r6, lsl #3]
   1b434:	ldr	r0, [r6, #20]
   1b438:	ldr	ip, [r6, #32]
   1b43c:	cmp	ip, #0
   1b440:	bne	1b450 <__assert_fail@plt+0xa1a8>
   1b444:	ldr	r3, [r6, #36]	; 0x24
   1b448:	orrs	r3, r0, r3
   1b44c:	beq	1b5b4 <__assert_fail@plt+0xa30c>
   1b450:	ldr	r3, [r8, #8]
   1b454:	cmp	r0, #0
   1b458:	ldr	r2, [sp, #32]
   1b45c:	ldr	r4, [r3, r2, lsl #2]
   1b460:	ble	1b494 <__assert_fail@plt+0xa1ec>
   1b464:	ldr	r2, [r6]
   1b468:	ldr	r3, [r2]
   1b46c:	cmp	r4, r3
   1b470:	beq	1b4d0 <__assert_fail@plt+0xa228>
   1b474:	mov	r3, #0
   1b478:	b	1b488 <__assert_fail@plt+0xa1e0>
   1b47c:	ldr	r1, [r2, #4]!
   1b480:	cmp	r4, r1
   1b484:	beq	1b4d0 <__assert_fail@plt+0xa228>
   1b488:	add	r3, r3, #1
   1b48c:	cmp	r0, r3
   1b490:	bne	1b47c <__assert_fail@plt+0xa1d4>
   1b494:	ldr	r3, [r6, #36]	; 0x24
   1b498:	cmp	r3, #0
   1b49c:	ble	1b578 <__assert_fail@plt+0xa2d0>
   1b4a0:	mov	r5, #0
   1b4a4:	b	1b4b4 <__assert_fail@plt+0xa20c>
   1b4a8:	ldr	r3, [r6, #36]	; 0x24
   1b4ac:	cmp	r5, r3
   1b4b0:	bge	1b574 <__assert_fail@plt+0xa2cc>
   1b4b4:	ldr	r3, [r6, #12]
   1b4b8:	mov	r0, r4
   1b4bc:	ldr	r1, [r3, r5, lsl #2]
   1b4c0:	add	r5, r5, #1
   1b4c4:	bl	10fcc <iswctype@plt>
   1b4c8:	cmp	r0, #0
   1b4cc:	beq	1b4a8 <__assert_fail@plt+0xa200>
   1b4d0:	ldrb	r3, [r6, #16]
   1b4d4:	tst	r3, #1
   1b4d8:	beq	1b3cc <__assert_fail@plt+0xa124>
   1b4dc:	b	1b3c8 <__assert_fail@plt+0xa120>
   1b4e0:	ldr	r2, [r3, #4]
   1b4e4:	ldr	r1, [sp, #32]
   1b4e8:	ldr	r0, [sp, #32]
   1b4ec:	ldrb	r1, [r2, r1]
   1b4f0:	add	r0, r2, r0
   1b4f4:	cmp	r1, #193	; 0xc1
   1b4f8:	bls	1b3c8 <__assert_fail@plt+0xa120>
   1b4fc:	ldr	ip, [sp, #32]
   1b500:	ldr	r3, [r3, #48]	; 0x30
   1b504:	add	ip, ip, #1
   1b508:	cmp	ip, r3
   1b50c:	bge	1b3c8 <__assert_fail@plt+0xa120>
   1b510:	cmp	r1, #223	; 0xdf
   1b514:	ldrb	ip, [r0, #1]
   1b518:	bls	1b5e0 <__assert_fail@plt+0xa338>
   1b51c:	cmp	r1, #239	; 0xef
   1b520:	bhi	1b5c4 <__assert_fail@plt+0xa31c>
   1b524:	cmp	ip, #159	; 0x9f
   1b528:	cmpls	r1, #224	; 0xe0
   1b52c:	movne	r7, #3
   1b530:	beq	1b3c8 <__assert_fail@plt+0xa120>
   1b534:	ldr	r1, [sp, #32]
   1b538:	add	r1, r1, r7
   1b53c:	cmp	r3, r1
   1b540:	blt	1b3c8 <__assert_fail@plt+0xa120>
   1b544:	ldr	r3, [sp, #32]
   1b548:	sub	r3, r3, #1
   1b54c:	add	r3, r2, r3
   1b550:	add	r3, r3, r7
   1b554:	b	1b560 <__assert_fail@plt+0xa2b8>
   1b558:	cmp	r3, r0
   1b55c:	beq	1b3cc <__assert_fail@plt+0xa124>
   1b560:	ldrb	r2, [r0, #1]!
   1b564:	eor	r2, r2, #128	; 0x80
   1b568:	cmp	r2, #63	; 0x3f
   1b56c:	bls	1b558 <__assert_fail@plt+0xa2b0>
   1b570:	b	1b3c8 <__assert_fail@plt+0xa120>
   1b574:	ldr	ip, [r6, #32]
   1b578:	cmp	ip, #0
   1b57c:	ble	1b5b4 <__assert_fail@plt+0xa30c>
   1b580:	ldr	r2, [r6, #4]
   1b584:	mov	r3, #0
   1b588:	sub	r2, r2, #4
   1b58c:	ldr	r1, [r2, #4]!
   1b590:	cmp	r4, r1
   1b594:	bcc	1b5a8 <__assert_fail@plt+0xa300>
   1b598:	ldr	r1, [r6, #8]
   1b59c:	ldr	r1, [r1, r3, lsl #2]
   1b5a0:	cmp	r4, r1
   1b5a4:	bls	1b4d0 <__assert_fail@plt+0xa228>
   1b5a8:	add	r3, r3, #1
   1b5ac:	cmp	r3, ip
   1b5b0:	bne	1b58c <__assert_fail@plt+0xa2e4>
   1b5b4:	ldrb	r3, [r6, #16]
   1b5b8:	tst	r3, #1
   1b5bc:	bne	1b3cc <__assert_fail@plt+0xa124>
   1b5c0:	b	1b3c8 <__assert_fail@plt+0xa120>
   1b5c4:	cmp	r1, #247	; 0xf7
   1b5c8:	bhi	1b5f4 <__assert_fail@plt+0xa34c>
   1b5cc:	cmp	ip, #143	; 0x8f
   1b5d0:	cmpls	r1, #240	; 0xf0
   1b5d4:	movne	r7, #4
   1b5d8:	bne	1b534 <__assert_fail@plt+0xa28c>
   1b5dc:	b	1b3c8 <__assert_fail@plt+0xa120>
   1b5e0:	eor	ip, ip, #128	; 0x80
   1b5e4:	cmp	ip, #63	; 0x3f
   1b5e8:	movls	r7, #2
   1b5ec:	bls	1b3cc <__assert_fail@plt+0xa124>
   1b5f0:	b	1b3c8 <__assert_fail@plt+0xa120>
   1b5f4:	cmp	r1, #251	; 0xfb
   1b5f8:	bhi	1b610 <__assert_fail@plt+0xa368>
   1b5fc:	cmp	ip, #135	; 0x87
   1b600:	cmpls	r1, #248	; 0xf8
   1b604:	movne	r7, #5
   1b608:	bne	1b534 <__assert_fail@plt+0xa28c>
   1b60c:	b	1b3c8 <__assert_fail@plt+0xa120>
   1b610:	cmp	r1, #253	; 0xfd
   1b614:	bhi	1b3c8 <__assert_fail@plt+0xa120>
   1b618:	cmp	ip, #131	; 0x83
   1b61c:	cmpls	r1, #252	; 0xfc
   1b620:	beq	1b3c8 <__assert_fail@plt+0xa120>
   1b624:	mov	r7, #6
   1b628:	b	1b534 <__assert_fail@plt+0xa28c>
   1b62c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b630:	mov	r5, r0
   1b634:	ldr	r0, [r0, #84]	; 0x54
   1b638:	ldr	r4, [r1, #4]
   1b63c:	strd	r6, [sp, #8]
   1b640:	mov	r7, r2
   1b644:	mov	r6, #0
   1b648:	strd	sl, [sp, #24]
   1b64c:	mov	sl, r3
   1b650:	ldr	r3, [r0]
   1b654:	strd	r8, [sp, #16]
   1b658:	str	lr, [sp, #32]
   1b65c:	sub	sp, sp, #84	; 0x54
   1b660:	ldr	r2, [r5, #120]	; 0x78
   1b664:	str	r0, [sp, #20]
   1b668:	str	r1, [sp, #36]	; 0x24
   1b66c:	ldr	r1, [sp, #124]	; 0x7c
   1b670:	ldr	r3, [r3, r7, lsl #3]
   1b674:	add	r2, r1, r2
   1b678:	cmp	r2, r4
   1b67c:	str	r3, [sp, #28]
   1b680:	str	r6, [sp, #48]	; 0x30
   1b684:	bge	1bb70 <__assert_fail@plt+0xa8c8>
   1b688:	ldr	r3, [sp, #36]	; 0x24
   1b68c:	ldr	r2, [r5, #88]	; 0x58
   1b690:	ldr	r4, [r3]
   1b694:	ldr	r8, [r3, #8]
   1b698:	ldr	r3, [r5, #40]	; 0x28
   1b69c:	cmp	r4, #0
   1b6a0:	str	r3, [sp, #44]	; 0x2c
   1b6a4:	ldr	r3, [r5, #100]	; 0x64
   1b6a8:	str	r3, [sp, #40]	; 0x28
   1b6ac:	beq	1bafc <__assert_fail@plt+0xa854>
   1b6b0:	sub	r1, r4, #1
   1b6b4:	mov	r0, r5
   1b6b8:	str	r4, [r5, #40]	; 0x28
   1b6bc:	str	r8, [r5, #100]	; 0x64
   1b6c0:	bl	19698 <__assert_fail@plt+0x83f0>
   1b6c4:	cmp	r4, sl
   1b6c8:	mov	r6, r0
   1b6cc:	beq	1bb14 <__assert_fail@plt+0xa86c>
   1b6d0:	ldr	sl, [r8, r4, lsl #2]
   1b6d4:	cmp	sl, #0
   1b6d8:	beq	1bbc4 <__assert_fail@plt+0xa91c>
   1b6dc:	ldrb	r3, [sl, #52]	; 0x34
   1b6e0:	ands	r3, r3, #64	; 0x40
   1b6e4:	bne	1b9f4 <__assert_fail@plt+0xa74c>
   1b6e8:	add	r2, sp, #56	; 0x38
   1b6ec:	str	r2, [sp, #8]
   1b6f0:	str	r3, [sp, #56]	; 0x38
   1b6f4:	str	r3, [sp, #60]	; 0x3c
   1b6f8:	str	r3, [sp, #64]	; 0x40
   1b6fc:	ldr	r3, [sp, #124]	; 0x7c
   1b700:	cmp	r4, r3
   1b704:	bge	1b98c <__assert_fail@plt+0xa6e4>
   1b708:	ldr	r3, [r5, #120]	; 0x78
   1b70c:	cmp	r3, #0
   1b710:	blt	1b98c <__assert_fail@plt+0xa6e4>
   1b714:	ldr	r3, [r5, #100]	; 0x64
   1b718:	mov	r2, #0
   1b71c:	add	fp, r4, #1
   1b720:	str	r2, [sp, #12]
   1b724:	ldr	r1, [r3, fp, lsl #2]
   1b728:	lsl	r3, fp, #2
   1b72c:	sub	r6, fp, #1
   1b730:	str	r3, [sp, #16]
   1b734:	mov	r3, #0
   1b738:	cmp	r1, r3
   1b73c:	str	r3, [sp, #60]	; 0x3c
   1b740:	beq	1ba8c <__assert_fail@plt+0xa7e4>
   1b744:	add	r1, r1, #4
   1b748:	ldr	r0, [sp, #8]
   1b74c:	bl	1831c <__assert_fail@plt+0x7074>
   1b750:	cmp	r0, #0
   1b754:	str	r0, [sp, #48]	; 0x30
   1b758:	bne	1baac <__assert_fail@plt+0xa804>
   1b75c:	cmp	sl, #0
   1b760:	beq	1b8d4 <__assert_fail@plt+0xa62c>
   1b764:	ldr	r3, [sl, #20]
   1b768:	mov	r2, #0
   1b76c:	str	r2, [sp, #52]	; 0x34
   1b770:	str	r2, [sp, #68]	; 0x44
   1b774:	str	r2, [sp, #72]	; 0x48
   1b778:	cmp	r3, r2
   1b77c:	str	r2, [sp, #76]	; 0x4c
   1b780:	ldr	r7, [r5, #84]	; 0x54
   1b784:	ble	1bc14 <__assert_fail@plt+0xa96c>
   1b788:	mov	r2, r7
   1b78c:	mov	r8, #0
   1b790:	str	fp, [sp, #32]
   1b794:	ldr	r3, [sl, #24]
   1b798:	ldr	r0, [r2], #128	; 0x80
   1b79c:	ldr	r4, [r3]
   1b7a0:	str	r2, [sp, #24]
   1b7a4:	lsl	r9, r4, #3
   1b7a8:	add	r3, r0, r9
   1b7ac:	b	1b808 <__assert_fail@plt+0xa560>
   1b7b0:	add	r1, r0, r9
   1b7b4:	mov	r2, r6
   1b7b8:	mov	r0, r5
   1b7bc:	bl	197b0 <__assert_fail@plt+0x8508>
   1b7c0:	cmp	r0, #0
   1b7c4:	beq	1b7e4 <__assert_fail@plt+0xa53c>
   1b7c8:	lsl	fp, r4, #2
   1b7cc:	ldr	r3, [r7, #12]
   1b7d0:	ldr	r0, [sp, #8]
   1b7d4:	ldr	r1, [r3, fp]
   1b7d8:	bl	16484 <__assert_fail@plt+0x51dc>
   1b7dc:	cmp	r0, #0
   1b7e0:	beq	1ba9c <__assert_fail@plt+0xa7f4>
   1b7e4:	ldr	r3, [sl, #20]
   1b7e8:	add	r8, r8, #1
   1b7ec:	cmp	r8, r3
   1b7f0:	bge	1babc <__assert_fail@plt+0xa814>
   1b7f4:	ldr	r3, [sl, #24]
   1b7f8:	ldr	r0, [r7]
   1b7fc:	ldr	r4, [r3, r8, lsl #2]
   1b800:	lsl	r9, r4, #3
   1b804:	add	r3, r0, r9
   1b808:	ldrb	r3, [r3, #6]
   1b80c:	tst	r3, #16
   1b810:	beq	1b7b0 <__assert_fail@plt+0xa508>
   1b814:	mov	r3, r5
   1b818:	mov	r2, r4
   1b81c:	str	r6, [sp]
   1b820:	ldr	r1, [sp, #24]
   1b824:	bl	1b354 <__assert_fail@plt+0xa0ac>
   1b828:	cmp	r0, #1
   1b82c:	ble	1ba7c <__assert_fail@plt+0xa7d4>
   1b830:	ldr	r2, [r5, #100]	; 0x64
   1b834:	add	r9, r0, r6
   1b838:	lsl	fp, r4, #2
   1b83c:	ldr	r3, [r7, #12]
   1b840:	ldr	r1, [r2, r9, lsl #2]
   1b844:	ldr	r4, [r3, r4, lsl #2]
   1b848:	mov	r3, #0
   1b84c:	str	r3, [sp, #72]	; 0x48
   1b850:	cmp	r1, r3
   1b854:	beq	1b870 <__assert_fail@plt+0xa5c8>
   1b858:	add	r1, r1, #4
   1b85c:	add	r0, sp, #68	; 0x44
   1b860:	bl	1831c <__assert_fail@plt+0x7074>
   1b864:	cmp	r0, #0
   1b868:	str	r0, [sp, #52]	; 0x34
   1b86c:	bne	1b8b8 <__assert_fail@plt+0xa610>
   1b870:	mov	r1, r4
   1b874:	add	r0, sp, #68	; 0x44
   1b878:	bl	16484 <__assert_fail@plt+0x51dc>
   1b87c:	cmp	r0, #0
   1b880:	beq	1ba9c <__assert_fail@plt+0xa7f4>
   1b884:	add	r2, sp, #68	; 0x44
   1b888:	mov	r1, r7
   1b88c:	ldr	r4, [r5, #100]	; 0x64
   1b890:	add	r0, sp, #52	; 0x34
   1b894:	bl	17b5c <__assert_fail@plt+0x68b4>
   1b898:	ldr	r3, [r5, #100]	; 0x64
   1b89c:	str	r0, [r4, r9, lsl #2]
   1b8a0:	ldr	r3, [r3, r9, lsl #2]
   1b8a4:	cmp	r3, #0
   1b8a8:	bne	1b7cc <__assert_fail@plt+0xa524>
   1b8ac:	ldr	r3, [sp, #52]	; 0x34
   1b8b0:	cmp	r3, #0
   1b8b4:	beq	1b7cc <__assert_fail@plt+0xa524>
   1b8b8:	ldr	fp, [sp, #32]
   1b8bc:	ldr	r0, [sp, #76]	; 0x4c
   1b8c0:	bl	24628 <__assert_fail@plt+0x13380>
   1b8c4:	ldr	r3, [sp, #52]	; 0x34
   1b8c8:	cmp	r3, #0
   1b8cc:	str	r3, [sp, #48]	; 0x30
   1b8d0:	bne	1baac <__assert_fail@plt+0xa804>
   1b8d4:	ldr	r3, [sp, #60]	; 0x3c
   1b8d8:	mov	r4, fp
   1b8dc:	cmp	r3, #0
   1b8e0:	beq	1b92c <__assert_fail@plt+0xa684>
   1b8e4:	ldr	r1, [sp, #8]
   1b8e8:	ldr	r0, [sp, #20]
   1b8ec:	ldr	r2, [sp, #28]
   1b8f0:	ldr	r3, [sp, #128]	; 0x80
   1b8f4:	bl	18718 <__assert_fail@plt+0x7470>
   1b8f8:	cmp	r0, #0
   1b8fc:	str	r0, [sp, #48]	; 0x30
   1b900:	bne	1baac <__assert_fail@plt+0xa804>
   1b904:	mov	r2, fp
   1b908:	mov	r0, r5
   1b90c:	ldr	r3, [sp, #28]
   1b910:	ldr	r1, [sp, #128]	; 0x80
   1b914:	str	r1, [sp]
   1b918:	ldr	r1, [sp, #8]
   1b91c:	bl	18868 <__assert_fail@plt+0x75c0>
   1b920:	cmp	r0, #0
   1b924:	str	r0, [sp, #48]	; 0x30
   1b928:	bne	1baac <__assert_fail@plt+0xa804>
   1b92c:	mov	r1, r6
   1b930:	mov	r0, r5
   1b934:	ldr	r2, [r5, #88]	; 0x58
   1b938:	bl	19698 <__assert_fail@plt+0x83f0>
   1b93c:	mov	r3, r0
   1b940:	add	r0, sp, #48	; 0x30
   1b944:	ldr	r2, [sp, #8]
   1b948:	ldr	r1, [sp, #20]
   1b94c:	bl	17874 <__assert_fail@plt+0x65cc>
   1b950:	subs	sl, r0, #0
   1b954:	beq	1bad4 <__assert_fail@plt+0xa82c>
   1b958:	mov	r2, #0
   1b95c:	ldr	r3, [r5, #100]	; 0x64
   1b960:	str	r2, [sp, #12]
   1b964:	ldr	r2, [sp, #16]
   1b968:	str	sl, [r3, r2]
   1b96c:	ldr	r2, [sp, #124]	; 0x7c
   1b970:	cmp	r2, fp
   1b974:	ble	1b98c <__assert_fail@plt+0xa6e4>
   1b978:	ldr	r1, [sp, #12]
   1b97c:	add	fp, fp, #1
   1b980:	ldr	r2, [r5, #120]	; 0x78
   1b984:	cmp	r2, r1
   1b988:	bge	1b724 <__assert_fail@plt+0xa47c>
   1b98c:	ldr	r0, [sp, #64]	; 0x40
   1b990:	bl	24628 <__assert_fail@plt+0x13380>
   1b994:	ldr	r3, [r5, #100]	; 0x64
   1b998:	ldr	r2, [sp, #124]	; 0x7c
   1b99c:	ldr	r3, [r3, r2, lsl #2]
   1b9a0:	cmp	r3, #0
   1b9a4:	beq	1bbf4 <__assert_fail@plt+0xa94c>
   1b9a8:	ldr	r2, [sp, #36]	; 0x24
   1b9ac:	add	r1, r3, #12
   1b9b0:	ldr	r0, [sp, #44]	; 0x2c
   1b9b4:	str	r4, [r2]
   1b9b8:	ldr	r2, [sp, #120]	; 0x78
   1b9bc:	str	r0, [r5, #40]	; 0x28
   1b9c0:	ldr	r0, [sp, #40]	; 0x28
   1b9c4:	str	r0, [r5, #100]	; 0x64
   1b9c8:	ldr	r0, [r3, #8]
   1b9cc:	bl	16a58 <__assert_fail@plt+0x57b0>
   1b9d0:	clz	r0, r0
   1b9d4:	lsr	r0, r0, #5
   1b9d8:	add	sp, sp, #84	; 0x54
   1b9dc:	ldrd	r4, [sp]
   1b9e0:	ldrd	r6, [sp, #8]
   1b9e4:	ldrd	r8, [sp, #16]
   1b9e8:	ldrd	sl, [sp, #24]
   1b9ec:	add	sp, sp, #32
   1b9f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9f4:	add	r3, sp, #56	; 0x38
   1b9f8:	add	r1, sl, #4
   1b9fc:	mov	r0, r3
   1ba00:	str	r3, [sp, #8]
   1ba04:	bl	17680 <__assert_fail@plt+0x63d8>
   1ba08:	cmp	r0, #0
   1ba0c:	str	r0, [sp, #48]	; 0x30
   1ba10:	bne	1b9d8 <__assert_fail@plt+0xa730>
   1ba14:	ldrb	r3, [sl, #52]	; 0x34
   1ba18:	tst	r3, #64	; 0x40
   1ba1c:	beq	1b6fc <__assert_fail@plt+0xa454>
   1ba20:	ldr	r3, [sp, #60]	; 0x3c
   1ba24:	cmp	r3, #0
   1ba28:	beq	1ba54 <__assert_fail@plt+0xa7ac>
   1ba2c:	mov	r2, r4
   1ba30:	mov	r0, r5
   1ba34:	ldr	r3, [sp, #28]
   1ba38:	ldr	r1, [sp, #128]	; 0x80
   1ba3c:	str	r1, [sp]
   1ba40:	ldr	r1, [sp, #8]
   1ba44:	bl	18868 <__assert_fail@plt+0x75c0>
   1ba48:	cmp	r0, #0
   1ba4c:	str	r0, [sp, #48]	; 0x30
   1ba50:	bne	1baac <__assert_fail@plt+0xa804>
   1ba54:	mov	r3, r6
   1ba58:	add	r0, sp, #48	; 0x30
   1ba5c:	ldr	r2, [sp, #8]
   1ba60:	ldr	r1, [sp, #20]
   1ba64:	bl	17874 <__assert_fail@plt+0x65cc>
   1ba68:	subs	sl, r0, #0
   1ba6c:	beq	1bbdc <__assert_fail@plt+0xa934>
   1ba70:	ldr	r3, [r5, #100]	; 0x64
   1ba74:	str	sl, [r3, r4, lsl #2]
   1ba78:	b	1b6fc <__assert_fail@plt+0xa454>
   1ba7c:	cmp	r0, #0
   1ba80:	bne	1b7c8 <__assert_fail@plt+0xa520>
   1ba84:	ldr	r0, [r7]
   1ba88:	b	1b7b0 <__assert_fail@plt+0xa508>
   1ba8c:	cmp	sl, #0
   1ba90:	bne	1b764 <__assert_fail@plt+0xa4bc>
   1ba94:	mov	r4, fp
   1ba98:	b	1b92c <__assert_fail@plt+0xa684>
   1ba9c:	ldr	r0, [sp, #76]	; 0x4c
   1baa0:	bl	24628 <__assert_fail@plt+0x13380>
   1baa4:	mov	r3, #12
   1baa8:	str	r3, [sp, #48]	; 0x30
   1baac:	ldr	r0, [sp, #64]	; 0x40
   1bab0:	bl	24628 <__assert_fail@plt+0x13380>
   1bab4:	ldr	r0, [sp, #48]	; 0x30
   1bab8:	b	1b9d8 <__assert_fail@plt+0xa730>
   1babc:	ldr	fp, [sp, #32]
   1bac0:	ldr	r0, [sp, #76]	; 0x4c
   1bac4:	bl	24628 <__assert_fail@plt+0x13380>
   1bac8:	mov	r3, #0
   1bacc:	str	r3, [sp, #48]	; 0x30
   1bad0:	b	1b8d4 <__assert_fail@plt+0xa62c>
   1bad4:	ldr	r3, [sp, #48]	; 0x30
   1bad8:	cmp	r3, #0
   1badc:	bne	1baac <__assert_fail@plt+0xa804>
   1bae0:	ldr	r2, [sp, #12]
   1bae4:	ldr	r3, [r5, #100]	; 0x64
   1bae8:	add	r2, r2, #1
   1baec:	str	r2, [sp, #12]
   1baf0:	ldr	r2, [sp, #16]
   1baf4:	str	sl, [r3, r2]
   1baf8:	b	1b96c <__assert_fail@plt+0xa6c4>
   1bafc:	sub	r1, sl, #1
   1bb00:	mov	r0, r5
   1bb04:	str	sl, [r5, #40]	; 0x28
   1bb08:	str	r8, [r5, #100]	; 0x64
   1bb0c:	bl	19698 <__assert_fail@plt+0x83f0>
   1bb10:	mov	r6, r0
   1bb14:	mov	r3, #1
   1bb18:	mov	r0, #4
   1bb1c:	str	r3, [sp, #56]	; 0x38
   1bb20:	str	r3, [sp, #60]	; 0x3c
   1bb24:	bl	24440 <__assert_fail@plt+0x13198>
   1bb28:	cmp	r0, #0
   1bb2c:	str	r0, [sp, #64]	; 0x40
   1bb30:	beq	1bbec <__assert_fail@plt+0xa944>
   1bb34:	add	r3, sp, #56	; 0x38
   1bb38:	mov	ip, #0
   1bb3c:	str	r7, [r0]
   1bb40:	mov	r1, r3
   1bb44:	ldr	r0, [sp, #20]
   1bb48:	str	r3, [sp, #8]
   1bb4c:	ldr	r2, [sp, #28]
   1bb50:	str	ip, [sp, #48]	; 0x30
   1bb54:	ldr	r3, [sp, #128]	; 0x80
   1bb58:	bl	18718 <__assert_fail@plt+0x7470>
   1bb5c:	cmp	r0, #0
   1bb60:	str	r0, [sp, #48]	; 0x30
   1bb64:	moveq	r4, sl
   1bb68:	beq	1ba20 <__assert_fail@plt+0xa778>
   1bb6c:	b	1baac <__assert_fail@plt+0xa804>
   1bb70:	mvn	r3, #-2147483648	; 0x80000000
   1bb74:	add	r9, r2, #1
   1bb78:	sub	r3, r3, r4
   1bb7c:	cmp	r3, r9
   1bb80:	blt	1bbec <__assert_fail@plt+0xa944>
   1bb84:	add	r8, r4, r9
   1bb88:	cmn	r8, #-1073741823	; 0xc0000001
   1bb8c:	bhi	1bbec <__assert_fail@plt+0xa944>
   1bb90:	ldr	fp, [sp, #36]	; 0x24
   1bb94:	lsl	r1, r8, #2
   1bb98:	ldr	r0, [fp, #8]
   1bb9c:	bl	2447c <__assert_fail@plt+0x131d4>
   1bba0:	subs	r3, r0, #0
   1bba4:	beq	1bbec <__assert_fail@plt+0xa944>
   1bba8:	lsl	r2, r9, #2
   1bbac:	mov	r1, r6
   1bbb0:	str	r8, [fp, #4]
   1bbb4:	add	r0, r3, r4, lsl #2
   1bbb8:	str	r3, [fp, #8]
   1bbbc:	bl	111c4 <memset@plt>
   1bbc0:	b	1b688 <__assert_fail@plt+0xa3e0>
   1bbc4:	add	r3, sp, #56	; 0x38
   1bbc8:	str	r3, [sp, #8]
   1bbcc:	str	sl, [sp, #56]	; 0x38
   1bbd0:	str	sl, [sp, #60]	; 0x3c
   1bbd4:	str	sl, [sp, #64]	; 0x40
   1bbd8:	b	1b6fc <__assert_fail@plt+0xa454>
   1bbdc:	ldr	r3, [sp, #48]	; 0x30
   1bbe0:	cmp	r3, #0
   1bbe4:	beq	1ba70 <__assert_fail@plt+0xa7c8>
   1bbe8:	b	1baac <__assert_fail@plt+0xa804>
   1bbec:	mov	r0, #12
   1bbf0:	b	1b9d8 <__assert_fail@plt+0xa730>
   1bbf4:	ldr	r3, [sp, #36]	; 0x24
   1bbf8:	mov	r0, #1
   1bbfc:	str	r4, [r3]
   1bc00:	ldr	r3, [sp, #44]	; 0x2c
   1bc04:	str	r3, [r5, #40]	; 0x28
   1bc08:	ldr	r3, [sp, #40]	; 0x28
   1bc0c:	str	r3, [r5, #100]	; 0x64
   1bc10:	b	1b9d8 <__assert_fail@plt+0xa730>
   1bc14:	mov	r0, #0
   1bc18:	b	1bac4 <__assert_fail@plt+0xa81c>
   1bc1c:	mov	ip, r2
   1bc20:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bc24:	mov	r4, r0
   1bc28:	strd	r6, [sp, #8]
   1bc2c:	mov	r6, r2
   1bc30:	mov	r7, r3
   1bc34:	strd	r8, [sp, #16]
   1bc38:	mov	r3, #8
   1bc3c:	mov	r8, r1
   1bc40:	strd	sl, [sp, #24]
   1bc44:	str	lr, [sp, #32]
   1bc48:	sub	sp, sp, #20
   1bc4c:	ldr	r2, [ip], #8
   1bc50:	str	r7, [sp]
   1bc54:	ldr	r5, [sp, #56]	; 0x38
   1bc58:	mov	r1, ip
   1bc5c:	str	r5, [sp, #4]
   1bc60:	str	r3, [sp, #8]
   1bc64:	ldr	r3, [r6, #4]
   1bc68:	bl	1b62c <__assert_fail@plt+0xa384>
   1bc6c:	subs	fp, r0, #0
   1bc70:	beq	1bc94 <__assert_fail@plt+0xa9ec>
   1bc74:	mov	r0, fp
   1bc78:	add	sp, sp, #20
   1bc7c:	ldrd	r4, [sp]
   1bc80:	ldrd	r6, [sp, #8]
   1bc84:	ldrd	r8, [sp, #16]
   1bc88:	ldrd	sl, [sp, #24]
   1bc8c:	add	sp, sp, #32
   1bc90:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc94:	ldr	r3, [r4, #108]	; 0x6c
   1bc98:	ldr	r1, [r4, #112]	; 0x70
   1bc9c:	ldr	r9, [r6, #4]
   1bca0:	ldr	sl, [r8]
   1bca4:	cmp	r3, r1
   1bca8:	ldr	r0, [r4, #116]	; 0x74
   1bcac:	movlt	lr, r9
   1bcb0:	bge	1bd4c <__assert_fail@plt+0xaaa4>
   1bcb4:	add	r2, r3, r3, lsl #1
   1bcb8:	cmp	r3, #0
   1bcbc:	lsl	r2, r2, #3
   1bcc0:	ble	1bcdc <__assert_fail@plt+0xaa34>
   1bcc4:	sub	r1, r2, #24
   1bcc8:	add	r1, r0, r1
   1bccc:	ldr	ip, [r1, #4]
   1bcd0:	cmp	r5, ip
   1bcd4:	moveq	ip, #1
   1bcd8:	strbeq	ip, [r1, #20]
   1bcdc:	cmp	sl, r9
   1bce0:	add	ip, r0, r2
   1bce4:	str	r7, [r0, r2]
   1bce8:	add	r3, r3, #1
   1bcec:	movne	r0, #0
   1bcf0:	mvneq	r0, #0
   1bcf4:	mov	r1, #0
   1bcf8:	stmib	ip, {r5, sl}
   1bcfc:	str	r9, [ip, #12]
   1bd00:	sub	r2, r9, sl
   1bd04:	add	r5, r5, lr
   1bd08:	str	r0, [ip, #16]
   1bd0c:	mov	r0, r4
   1bd10:	str	r3, [r4, #108]	; 0x6c
   1bd14:	strb	r1, [ip, #20]
   1bd18:	ldr	r3, [r4, #120]	; 0x78
   1bd1c:	cmp	r3, r2
   1bd20:	strlt	r2, [r4, #120]	; 0x78
   1bd24:	ldr	r1, [r8]
   1bd28:	sub	r1, r5, r1
   1bd2c:	add	sp, sp, #20
   1bd30:	ldrd	r4, [sp]
   1bd34:	ldrd	r6, [sp, #8]
   1bd38:	ldrd	r8, [sp, #16]
   1bd3c:	ldrd	sl, [sp, #24]
   1bd40:	ldr	lr, [sp, #32]
   1bd44:	add	sp, sp, #36	; 0x24
   1bd48:	b	16880 <__assert_fail@plt+0x55d8>
   1bd4c:	add	r1, r1, r1, lsl #1
   1bd50:	lsl	r1, r1, #4
   1bd54:	bl	2447c <__assert_fail@plt+0x131d4>
   1bd58:	cmp	r0, #0
   1bd5c:	beq	1bda0 <__assert_fail@plt+0xaaf8>
   1bd60:	ldr	r3, [r4, #108]	; 0x6c
   1bd64:	mov	r1, fp
   1bd68:	str	r0, [r4, #116]	; 0x74
   1bd6c:	ldr	r2, [r4, #112]	; 0x70
   1bd70:	add	r3, r3, r3, lsl #1
   1bd74:	add	r2, r2, r2, lsl #1
   1bd78:	add	r0, r0, r3, lsl #3
   1bd7c:	lsl	r2, r2, #3
   1bd80:	bl	111c4 <memset@plt>
   1bd84:	ldr	lr, [r6, #4]
   1bd88:	ldr	r2, [r4, #112]	; 0x70
   1bd8c:	ldr	r3, [r4, #108]	; 0x6c
   1bd90:	ldr	r0, [r4, #116]	; 0x74
   1bd94:	lsl	r2, r2, #1
   1bd98:	str	r2, [r4, #112]	; 0x70
   1bd9c:	b	1bcb4 <__assert_fail@plt+0xaa0c>
   1bda0:	ldr	r0, [r4, #116]	; 0x74
   1bda4:	mov	fp, #12
   1bda8:	bl	24628 <__assert_fail@plt+0x13380>
   1bdac:	b	1bc74 <__assert_fail@plt+0xa9cc>
   1bdb0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bdb4:	ldr	r3, [r0, #84]	; 0x54
   1bdb8:	strd	r6, [sp, #8]
   1bdbc:	ldr	r6, [r1]
   1bdc0:	strd	r8, [sp, #16]
   1bdc4:	strd	sl, [sp, #24]
   1bdc8:	str	lr, [sp, #32]
   1bdcc:	sub	sp, sp, #84	; 0x54
   1bdd0:	ldr	sl, [r0, #40]	; 0x28
   1bdd4:	cmp	r6, #0
   1bdd8:	str	r3, [sp, #24]
   1bddc:	ble	1c304 <__assert_fail@plt+0xb05c>
   1bde0:	lsl	r3, sl, #2
   1bde4:	mov	fp, r0
   1bde8:	mov	r9, sl
   1bdec:	str	r2, [sp, #36]	; 0x24
   1bdf0:	str	r3, [sp, #44]	; 0x2c
   1bdf4:	mov	r3, #0
   1bdf8:	str	r1, [sp, #56]	; 0x38
   1bdfc:	str	r3, [sp, #16]
   1be00:	b	1be48 <__assert_fail@plt+0xaba0>
   1be04:	tst	r0, #1
   1be08:	beq	1be34 <__assert_fail@plt+0xab8c>
   1be0c:	tst	r3, #8
   1be10:	bne	1be34 <__assert_fail@plt+0xab8c>
   1be14:	tst	r3, #32
   1be18:	beq	1be24 <__assert_fail@plt+0xab7c>
   1be1c:	tst	r0, #2
   1be20:	beq	1be34 <__assert_fail@plt+0xab8c>
   1be24:	tst	r3, #128	; 0x80
   1be28:	beq	1beb8 <__assert_fail@plt+0xac10>
   1be2c:	tst	r0, #8
   1be30:	bne	1beb8 <__assert_fail@plt+0xac10>
   1be34:	ldr	r3, [sp, #16]
   1be38:	add	r3, r3, #1
   1be3c:	cmp	r3, r6
   1be40:	str	r3, [sp, #16]
   1be44:	bge	1c304 <__assert_fail@plt+0xb05c>
   1be48:	ldr	r1, [sp, #16]
   1be4c:	ldr	r3, [sp, #36]	; 0x24
   1be50:	ldr	r2, [r3]
   1be54:	ldr	r3, [sp, #24]
   1be58:	ldr	sl, [r2, r1, lsl #2]
   1be5c:	ldr	r3, [r3]
   1be60:	add	r3, r3, sl, lsl #3
   1be64:	ldrb	r2, [r3, #4]
   1be68:	cmp	r2, #4
   1be6c:	bne	1be34 <__assert_fail@plt+0xab8c>
   1be70:	ldr	r4, [r3, #4]
   1be74:	mov	r3, #65280	; 0xff00
   1be78:	movt	r3, #3
   1be7c:	and	r3, r3, r4
   1be80:	cmp	r3, #0
   1be84:	beq	1beb8 <__assert_fail@plt+0xac10>
   1be88:	mov	r1, r9
   1be8c:	mov	r0, fp
   1be90:	ldr	r2, [fp, #88]	; 0x58
   1be94:	bl	19698 <__assert_fail@plt+0x83f0>
   1be98:	ubfx	r3, r4, #8, #10
   1be9c:	tst	r3, #4
   1bea0:	bne	1be04 <__assert_fail@plt+0xab5c>
   1bea4:	tst	r3, #8
   1bea8:	beq	1be14 <__assert_fail@plt+0xab6c>
   1beac:	tst	r0, #1
   1beb0:	beq	1be14 <__assert_fail@plt+0xab6c>
   1beb4:	b	1be34 <__assert_fail@plt+0xab8c>
   1beb8:	ldr	ip, [fp, #108]	; 0x6c
   1bebc:	mov	r0, #0
   1bec0:	mov	r4, ip
   1bec4:	mov	r3, ip
   1bec8:	cmp	r0, r3
   1becc:	bge	1bf28 <__assert_fail@plt+0xac80>
   1bed0:	add	r2, r0, r3
   1bed4:	ldr	lr, [fp, #116]	; 0x74
   1bed8:	add	r2, r2, r2, lsr #31
   1bedc:	asr	r2, r2, #1
   1bee0:	add	r1, r2, r2, lsl #1
   1bee4:	add	r1, lr, r1, lsl #3
   1bee8:	ldr	r1, [r1, #4]
   1beec:	cmp	r9, r1
   1bef0:	ble	1bf18 <__assert_fail@plt+0xac70>
   1bef4:	b	1c130 <__assert_fail@plt+0xae88>
   1bef8:	asr	r3, r3, #1
   1befc:	add	r1, r3, r3, lsl #1
   1bf00:	mov	r5, r3
   1bf04:	add	r1, lr, r1, lsl #3
   1bf08:	ldr	r1, [r1, #4]
   1bf0c:	cmp	r9, r1
   1bf10:	bgt	1c138 <__assert_fail@plt+0xae90>
   1bf14:	mov	r2, r3
   1bf18:	add	r3, r0, r2
   1bf1c:	cmp	r0, r2
   1bf20:	add	r3, r3, r3, lsr #31
   1bf24:	blt	1bef8 <__assert_fail@plt+0xac50>
   1bf28:	cmp	ip, r0
   1bf2c:	ble	1c144 <__assert_fail@plt+0xae9c>
   1bf30:	ldr	r3, [fp, #116]	; 0x74
   1bf34:	add	r2, r0, r0, lsl #1
   1bf38:	cmn	r0, #1
   1bf3c:	add	r3, r3, r2, lsl #3
   1bf40:	ldr	r1, [r3, #4]
   1bf44:	sub	r2, r1, r9
   1bf48:	clz	r2, r2
   1bf4c:	lsr	r2, r2, #5
   1bf50:	moveq	r2, #0
   1bf54:	cmp	r2, #0
   1bf58:	beq	1c144 <__assert_fail@plt+0xae9c>
   1bf5c:	add	r3, r3, #24
   1bf60:	b	1bf70 <__assert_fail@plt+0xacc8>
   1bf64:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   1bf68:	cmp	r2, #0
   1bf6c:	beq	1c144 <__assert_fail@plt+0xae9c>
   1bf70:	ldr	r2, [r3, #-24]	; 0xffffffe8
   1bf74:	add	r3, r3, #24
   1bf78:	cmp	sl, r2
   1bf7c:	bne	1bf64 <__assert_fail@plt+0xacbc>
   1bf80:	lsl	r2, sl, #2
   1bf84:	mov	r3, #0
   1bf88:	cmp	r4, ip
   1bf8c:	str	r2, [sp, #40]	; 0x28
   1bf90:	str	r3, [sp, #64]	; 0x40
   1bf94:	bge	1c2b8 <__assert_fail@plt+0xb010>
   1bf98:	add	r3, sl, sl, lsl #1
   1bf9c:	ldr	r8, [sp, #24]
   1bfa0:	lsl	r3, r3, #2
   1bfa4:	str	r3, [sp, #48]	; 0x30
   1bfa8:	b	1c090 <__assert_fail@plt+0xade8>
   1bfac:	ldr	r2, [r8, #20]
   1bfb0:	ldr	r1, [sp, #48]	; 0x30
   1bfb4:	add	r2, r2, r1
   1bfb8:	ldr	r2, [r2, #8]
   1bfbc:	ldr	r2, [r2]
   1bfc0:	add	r2, r2, r2, lsl #1
   1bfc4:	add	r6, r6, r2, lsl #2
   1bfc8:	add	r3, r9, r3
   1bfcc:	mov	r0, fp
   1bfd0:	ldr	r2, [fp, #88]	; 0x58
   1bfd4:	sub	r5, r3, r5
   1bfd8:	sub	r1, r5, #1
   1bfdc:	bl	19698 <__assert_fail@plt+0x83f0>
   1bfe0:	ldr	r2, [sp, #44]	; 0x2c
   1bfe4:	mov	r3, r0
   1bfe8:	ldr	r7, [fp, #100]	; 0x64
   1bfec:	ldr	r2, [r7, r2]
   1bff0:	ldr	r1, [r7, r5, lsl #2]
   1bff4:	cmp	r2, #0
   1bff8:	ldrne	r2, [r2, #8]
   1bffc:	cmp	r1, #0
   1c000:	str	r2, [sp, #28]
   1c004:	beq	1c0e4 <__assert_fail@plt+0xae3c>
   1c008:	mov	r2, r6
   1c00c:	add	r0, sp, #68	; 0x44
   1c010:	ldr	r1, [r1, #40]	; 0x28
   1c014:	str	r3, [sp, #32]
   1c018:	bl	17708 <__assert_fail@plt+0x6460>
   1c01c:	cmp	r0, #0
   1c020:	str	r0, [sp, #64]	; 0x40
   1c024:	ldr	r3, [sp, #32]
   1c028:	bne	1c2f4 <__assert_fail@plt+0xb04c>
   1c02c:	add	r2, sp, #68	; 0x44
   1c030:	mov	r1, r8
   1c034:	ldr	r7, [fp, #100]	; 0x64
   1c038:	add	r0, sp, #64	; 0x40
   1c03c:	bl	17874 <__assert_fail@plt+0x65cc>
   1c040:	str	r0, [r7, r5, lsl #2]
   1c044:	ldr	r0, [sp, #76]	; 0x4c
   1c048:	bl	24628 <__assert_fail@plt+0x13380>
   1c04c:	ldr	r3, [fp, #100]	; 0x64
   1c050:	ldr	r2, [r3, r5, lsl #2]
   1c054:	cmp	r2, #0
   1c058:	beq	1c108 <__assert_fail@plt+0xae60>
   1c05c:	ldr	r2, [sp, #20]
   1c060:	cmp	r2, #0
   1c064:	bne	1c080 <__assert_fail@plt+0xadd8>
   1c068:	ldr	r2, [sp, #44]	; 0x2c
   1c06c:	ldr	r3, [r3, r2]
   1c070:	ldr	r2, [sp, #28]
   1c074:	ldr	r3, [r3, #8]
   1c078:	cmp	r3, r2
   1c07c:	bgt	1c270 <__assert_fail@plt+0xafc8>
   1c080:	ldr	ip, [fp, #108]	; 0x6c
   1c084:	add	r4, r4, #1
   1c088:	cmp	r4, ip
   1c08c:	bge	1c2b8 <__assert_fail@plt+0xb010>
   1c090:	ldr	r3, [fp, #116]	; 0x74
   1c094:	add	r2, r4, r4, lsl #1
   1c098:	ldr	r1, [r3, r2, lsl #3]
   1c09c:	add	r3, r3, r2, lsl #3
   1c0a0:	cmp	sl, r1
   1c0a4:	bne	1c084 <__assert_fail@plt+0xaddc>
   1c0a8:	ldr	r2, [r3, #4]
   1c0ac:	cmp	r9, r2
   1c0b0:	bne	1c084 <__assert_fail@plt+0xaddc>
   1c0b4:	ldr	r5, [r3, #8]
   1c0b8:	ldr	r3, [r3, #12]
   1c0bc:	ldr	r6, [r8, #24]
   1c0c0:	subs	r2, r3, r5
   1c0c4:	str	r2, [sp, #20]
   1c0c8:	beq	1bfac <__assert_fail@plt+0xad04>
   1c0cc:	ldr	r2, [r8, #12]
   1c0d0:	ldr	r1, [sp, #40]	; 0x28
   1c0d4:	ldr	r2, [r2, r1]
   1c0d8:	add	r2, r2, r2, lsl #1
   1c0dc:	add	r6, r6, r2, lsl #2
   1c0e0:	b	1bfc8 <__assert_fail@plt+0xad20>
   1c0e4:	mov	r2, r6
   1c0e8:	mov	r1, r8
   1c0ec:	add	r0, sp, #64	; 0x40
   1c0f0:	bl	17874 <__assert_fail@plt+0x65cc>
   1c0f4:	ldr	r3, [fp, #100]	; 0x64
   1c0f8:	str	r0, [r7, r5, lsl #2]
   1c0fc:	ldr	r2, [r3, r5, lsl #2]
   1c100:	cmp	r2, #0
   1c104:	bne	1c05c <__assert_fail@plt+0xadb4>
   1c108:	ldr	r0, [sp, #64]	; 0x40
   1c10c:	cmp	r0, #0
   1c110:	beq	1c05c <__assert_fail@plt+0xadb4>
   1c114:	add	sp, sp, #84	; 0x54
   1c118:	ldrd	r4, [sp]
   1c11c:	ldrd	r6, [sp, #8]
   1c120:	ldrd	r8, [sp, #16]
   1c124:	ldrd	sl, [sp, #24]
   1c128:	add	sp, sp, #32
   1c12c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c130:	mov	r5, r2
   1c134:	mov	r2, r3
   1c138:	add	r0, r5, #1
   1c13c:	mov	r3, r2
   1c140:	b	1bec8 <__assert_fail@plt+0xac20>
   1c144:	ldr	r3, [fp, #84]	; 0x54
   1c148:	ldr	r1, [fp, #124]	; 0x7c
   1c14c:	str	r3, [sp, #52]	; 0x34
   1c150:	ldr	r3, [r3]
   1c154:	cmp	r1, #0
   1c158:	ldr	r2, [r3, sl, lsl #3]
   1c15c:	str	r2, [sp, #48]	; 0x30
   1c160:	ble	1bf80 <__assert_fail@plt+0xacd8>
   1c164:	mov	r2, #0
   1c168:	str	sl, [sp, #40]	; 0x28
   1c16c:	str	r2, [sp, #28]
   1c170:	ldr	r2, [fp, #4]
   1c174:	str	r9, [sp, #32]
   1c178:	str	r4, [sp, #60]	; 0x3c
   1c17c:	mov	sl, r2
   1c180:	ldr	r0, [sp, #28]
   1c184:	ldr	r2, [fp, #132]	; 0x84
   1c188:	ldr	r4, [r2, r0, lsl #2]
   1c18c:	ldr	r2, [r4, #4]
   1c190:	ldr	r3, [r3, r2, lsl #3]
   1c194:	ldr	r2, [sp, #48]	; 0x30
   1c198:	cmp	r2, r3
   1c19c:	beq	1c1c0 <__assert_fail@plt+0xaf18>
   1c1a0:	ldr	r3, [sp, #28]
   1c1a4:	add	r3, r3, #1
   1c1a8:	cmp	r3, r1
   1c1ac:	str	r3, [sp, #28]
   1c1b0:	bge	1c4fc <__assert_fail@plt+0xb254>
   1c1b4:	ldr	r3, [sp, #52]	; 0x34
   1c1b8:	ldr	r3, [r3]
   1c1bc:	b	1c180 <__assert_fail@plt+0xaed8>
   1c1c0:	ldr	r6, [r4]
   1c1c4:	ldr	ip, [r4, #16]
   1c1c8:	ldr	r7, [sp, #32]
   1c1cc:	cmp	ip, #0
   1c1d0:	ble	1c31c <__assert_fail@plt+0xb074>
   1c1d4:	mov	r3, sl
   1c1d8:	mov	r5, #0
   1c1dc:	mov	sl, r7
   1c1e0:	mov	r7, r6
   1c1e4:	b	1c1f8 <__assert_fail@plt+0xaf50>
   1c1e8:	ldr	ip, [r4, #16]
   1c1ec:	mov	sl, r6
   1c1f0:	cmp	r5, ip
   1c1f4:	bge	1c30c <__assert_fail@plt+0xb064>
   1c1f8:	ldr	r2, [r4, #20]
   1c1fc:	ldr	r9, [r2, r5, lsl #2]
   1c200:	ldr	r8, [r9, #4]
   1c204:	sub	r2, r8, r7
   1c208:	cmp	r2, #0
   1c20c:	add	r6, r2, sl
   1c210:	ble	1c23c <__assert_fail@plt+0xaf94>
   1c214:	ldr	r1, [fp, #28]
   1c218:	cmp	r1, r6
   1c21c:	blt	1c2c4 <__assert_fail@plt+0xb01c>
   1c220:	add	r1, r3, r7
   1c224:	add	r0, r3, sl
   1c228:	str	r3, [sp, #20]
   1c22c:	bl	11074 <memcmp@plt>
   1c230:	cmp	r0, #0
   1c234:	ldr	r3, [sp, #20]
   1c238:	bne	1c4a4 <__assert_fail@plt+0xb1fc>
   1c23c:	ldr	r1, [sp, #32]
   1c240:	mov	r2, r9
   1c244:	mov	r0, fp
   1c248:	add	r5, r5, #1
   1c24c:	mov	r7, r8
   1c250:	ldr	r3, [sp, #40]	; 0x28
   1c254:	str	r1, [sp]
   1c258:	mov	r1, r4
   1c25c:	bl	1bc1c <__assert_fail@plt+0xa974>
   1c260:	cmp	r0, #1
   1c264:	ldr	r3, [fp, #4]
   1c268:	bls	1c1e8 <__assert_fail@plt+0xaf40>
   1c26c:	b	1c114 <__assert_fail@plt+0xae6c>
   1c270:	add	r5, r6, #4
   1c274:	add	r6, r6, #8
   1c278:	mov	r2, r6
   1c27c:	mov	r1, r5
   1c280:	mov	r3, r9
   1c284:	mov	r0, fp
   1c288:	bl	1a238 <__assert_fail@plt+0x8f90>
   1c28c:	cmp	r0, #0
   1c290:	str	r0, [sp, #64]	; 0x40
   1c294:	bne	1c114 <__assert_fail@plt+0xae6c>
   1c298:	mov	r2, r6
   1c29c:	mov	r1, r5
   1c2a0:	mov	r0, fp
   1c2a4:	bl	1bdb0 <__assert_fail@plt+0xab08>
   1c2a8:	cmp	r0, #0
   1c2ac:	str	r0, [sp, #64]	; 0x40
   1c2b0:	beq	1c080 <__assert_fail@plt+0xadd8>
   1c2b4:	b	1c114 <__assert_fail@plt+0xae6c>
   1c2b8:	ldr	r3, [sp, #56]	; 0x38
   1c2bc:	ldr	r6, [r3]
   1c2c0:	b	1be34 <__assert_fail@plt+0xab8c>
   1c2c4:	ldr	lr, [fp, #48]	; 0x30
   1c2c8:	mov	r1, r6
   1c2cc:	mov	r0, fp
   1c2d0:	str	r2, [sp, #20]
   1c2d4:	cmp	lr, r6
   1c2d8:	blt	1c540 <__assert_fail@plt+0xb298>
   1c2dc:	bl	16880 <__assert_fail@plt+0x55d8>
   1c2e0:	cmp	r0, #0
   1c2e4:	bne	1c114 <__assert_fail@plt+0xae6c>
   1c2e8:	ldr	r3, [fp, #4]
   1c2ec:	ldr	r2, [sp, #20]
   1c2f0:	b	1c220 <__assert_fail@plt+0xaf78>
   1c2f4:	ldr	r0, [sp, #76]	; 0x4c
   1c2f8:	bl	24628 <__assert_fail@plt+0x13380>
   1c2fc:	ldr	r0, [sp, #64]	; 0x40
   1c300:	b	1c114 <__assert_fail@plt+0xae6c>
   1c304:	mov	r0, #0
   1c308:	b	1c114 <__assert_fail@plt+0xae6c>
   1c30c:	mov	r9, r6
   1c310:	mov	sl, r3
   1c314:	add	r6, r8, #1
   1c318:	mov	r7, r9
   1c31c:	ldr	r3, [sp, #32]
   1c320:	cmp	r3, r6
   1c324:	blt	1c474 <__assert_fail@plt+0xb1cc>
   1c328:	ldr	r9, [sp, #32]
   1c32c:	ldr	r8, [sp, #48]	; 0x30
   1c330:	ldr	r3, [r4]
   1c334:	sub	r3, r6, r3
   1c338:	cmp	r3, #0
   1c33c:	ble	1c368 <__assert_fail@plt+0xb0c0>
   1c340:	ldr	r3, [fp, #28]
   1c344:	cmp	r3, r7
   1c348:	ble	1c4d0 <__assert_fail@plt+0xb228>
   1c34c:	add	r5, r7, #1
   1c350:	add	r3, sl, r6
   1c354:	ldrb	r2, [sl, r7]
   1c358:	ldrb	r3, [r3, #-1]
   1c35c:	cmp	r2, r3
   1c360:	bne	1c474 <__assert_fail@plt+0xb1cc>
   1c364:	mov	r7, r5
   1c368:	ldr	r3, [fp, #100]	; 0x64
   1c36c:	ldr	r3, [r3, r6, lsl #2]
   1c370:	cmp	r3, #0
   1c374:	beq	1c468 <__assert_fail@plt+0xb1c0>
   1c378:	ldr	ip, [r3, #8]
   1c37c:	cmp	ip, #0
   1c380:	ble	1c468 <__assert_fail@plt+0xb1c0>
   1c384:	ldr	r2, [r3, #12]
   1c388:	mov	r3, #0
   1c38c:	ldr	r1, [sp, #52]	; 0x34
   1c390:	sub	r2, r2, #4
   1c394:	ldr	r0, [r1]
   1c398:	b	1c3a4 <__assert_fail@plt+0xb0fc>
   1c39c:	cmp	ip, r3
   1c3a0:	beq	1c468 <__assert_fail@plt+0xb1c0>
   1c3a4:	ldr	r5, [r2, #4]!
   1c3a8:	add	r3, r3, #1
   1c3ac:	add	r1, r0, r5, lsl #3
   1c3b0:	ldrb	r1, [r1, #4]
   1c3b4:	cmp	r1, #9
   1c3b8:	bne	1c39c <__assert_fail@plt+0xb0f4>
   1c3bc:	ldr	r1, [r0, r5, lsl #3]
   1c3c0:	cmp	r8, r1
   1c3c4:	bne	1c39c <__assert_fail@plt+0xb0f4>
   1c3c8:	cmn	r5, #1
   1c3cc:	beq	1c468 <__assert_fail@plt+0xb1c0>
   1c3d0:	ldr	r3, [r4]
   1c3d4:	ldr	r1, [r4, #8]
   1c3d8:	cmp	r1, #0
   1c3dc:	beq	1c47c <__assert_fail@plt+0xb1d4>
   1c3e0:	mov	ip, #9
   1c3e4:	mov	r0, fp
   1c3e8:	ldr	r2, [r4, #4]
   1c3ec:	stm	sp, {r5, r6, ip}
   1c3f0:	bl	1b62c <__assert_fail@plt+0xa384>
   1c3f4:	cmp	r0, #1
   1c3f8:	beq	1c468 <__assert_fail@plt+0xb1c0>
   1c3fc:	cmp	r0, #0
   1c400:	bne	1c114 <__assert_fail@plt+0xae6c>
   1c404:	ldrd	r2, [r4, #12]
   1c408:	cmp	r3, r2
   1c40c:	beq	1c518 <__assert_fail@plt+0xb270>
   1c410:	mov	r1, #20
   1c414:	mov	r0, #1
   1c418:	bl	243cc <__assert_fail@plt+0x13124>
   1c41c:	subs	ip, r0, #0
   1c420:	beq	1c510 <__assert_fail@plt+0xb268>
   1c424:	ldr	lr, [r4, #16]
   1c428:	mov	r2, ip
   1c42c:	mov	r1, r4
   1c430:	mov	r0, fp
   1c434:	ldr	r3, [sp, #40]	; 0x28
   1c438:	add	sl, lr, #1
   1c43c:	str	sl, [sp, #20]
   1c440:	ldr	sl, [r4, #20]
   1c444:	str	ip, [sl, lr, lsl #2]
   1c448:	stm	ip, {r5, r6}
   1c44c:	ldr	ip, [sp, #20]
   1c450:	str	ip, [r4, #16]
   1c454:	str	r9, [sp]
   1c458:	bl	1bc1c <__assert_fail@plt+0xa974>
   1c45c:	cmp	r0, #1
   1c460:	ldr	sl, [fp, #4]
   1c464:	bhi	1c114 <__assert_fail@plt+0xae6c>
   1c468:	add	r6, r6, #1
   1c46c:	cmp	r9, r6
   1c470:	bge	1c330 <__assert_fail@plt+0xb088>
   1c474:	ldr	r1, [fp, #124]	; 0x7c
   1c478:	b	1c1a0 <__assert_fail@plt+0xaef8>
   1c47c:	sub	r3, r6, r3
   1c480:	mov	r0, #12
   1c484:	add	r1, r3, #1
   1c488:	bl	243cc <__assert_fail@plt+0x13124>
   1c48c:	cmp	r0, #0
   1c490:	mov	r1, r0
   1c494:	str	r0, [r4, #8]
   1c498:	beq	1c510 <__assert_fail@plt+0xb268>
   1c49c:	ldr	r3, [r4]
   1c4a0:	b	1c3e0 <__assert_fail@plt+0xb138>
   1c4a4:	ldr	ip, [r4, #16]
   1c4a8:	mov	r6, r7
   1c4ac:	mov	r7, sl
   1c4b0:	mov	sl, r3
   1c4b4:	cmp	ip, r5
   1c4b8:	bgt	1c474 <__assert_fail@plt+0xb1cc>
   1c4bc:	cmp	r5, #0
   1c4c0:	ble	1c31c <__assert_fail@plt+0xb074>
   1c4c4:	mov	r9, r7
   1c4c8:	mov	r8, r6
   1c4cc:	b	1c314 <__assert_fail@plt+0xb06c>
   1c4d0:	ldr	r3, [fp, #48]	; 0x30
   1c4d4:	cmp	r3, r7
   1c4d8:	ble	1c474 <__assert_fail@plt+0xb1cc>
   1c4dc:	add	r5, r7, #1
   1c4e0:	mov	r0, fp
   1c4e4:	mov	r1, r5
   1c4e8:	bl	15cec <__assert_fail@plt+0x4a44>
   1c4ec:	cmp	r0, #0
   1c4f0:	bne	1c114 <__assert_fail@plt+0xae6c>
   1c4f4:	ldr	sl, [fp, #4]
   1c4f8:	b	1c350 <__assert_fail@plt+0xb0a8>
   1c4fc:	ldr	r9, [sp, #32]
   1c500:	ldr	sl, [sp, #40]	; 0x28
   1c504:	ldr	r4, [sp, #60]	; 0x3c
   1c508:	ldr	ip, [fp, #108]	; 0x6c
   1c50c:	b	1bf80 <__assert_fail@plt+0xacd8>
   1c510:	mov	r0, #12
   1c514:	b	1c114 <__assert_fail@plt+0xae6c>
   1c518:	lsl	r3, r3, #1
   1c51c:	ldr	r0, [r4, #20]
   1c520:	add	sl, r3, #1
   1c524:	lsl	r1, sl, #2
   1c528:	bl	2447c <__assert_fail@plt+0x131d4>
   1c52c:	cmp	r0, #0
   1c530:	beq	1c510 <__assert_fail@plt+0xb268>
   1c534:	str	sl, [r4, #12]
   1c538:	str	r0, [r4, #20]
   1c53c:	b	1c410 <__assert_fail@plt+0xb168>
   1c540:	mov	r6, r7
   1c544:	mov	r7, sl
   1c548:	mov	sl, r3
   1c54c:	b	1c4b4 <__assert_fail@plt+0xb20c>
   1c550:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1c554:	mov	r4, r1
   1c558:	ldr	r5, [r1, #40]	; 0x28
   1c55c:	ldr	r3, [r1, #104]	; 0x68
   1c560:	strd	r6, [sp, #8]
   1c564:	strd	r8, [sp, #16]
   1c568:	str	sl, [sp, #24]
   1c56c:	mov	sl, r0
   1c570:	str	lr, [sp, #28]
   1c574:	sub	sp, sp, #16
   1c578:	cmp	r3, r5
   1c57c:	ldr	r8, [r1, #84]	; 0x54
   1c580:	ldr	r9, [r1, #100]	; 0x64
   1c584:	bge	1c5c0 <__assert_fail@plt+0xb318>
   1c588:	mov	r6, r2
   1c58c:	str	r2, [r9, r5, lsl #2]
   1c590:	str	r5, [r1, #104]	; 0x68
   1c594:	ldr	r3, [r8, #76]	; 0x4c
   1c598:	cmp	r3, #0
   1c59c:	bne	1c688 <__assert_fail@plt+0xb3e0>
   1c5a0:	mov	r0, r6
   1c5a4:	add	sp, sp, #16
   1c5a8:	ldrd	r4, [sp]
   1c5ac:	ldrd	r6, [sp, #8]
   1c5b0:	ldrd	r8, [sp, #16]
   1c5b4:	ldr	sl, [sp, #24]
   1c5b8:	add	sp, sp, #28
   1c5bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c5c0:	ldr	r3, [r9, r5, lsl #2]
   1c5c4:	cmp	r3, #0
   1c5c8:	moveq	r6, r2
   1c5cc:	streq	r2, [r9, r5, lsl #2]
   1c5d0:	beq	1c594 <__assert_fail@plt+0xb2ec>
   1c5d4:	cmp	r2, #0
   1c5d8:	ldr	r3, [r3, #40]	; 0x28
   1c5dc:	beq	1c648 <__assert_fail@plt+0xb3a0>
   1c5e0:	ldr	r7, [r2, #40]	; 0x28
   1c5e4:	add	r0, sp, #4
   1c5e8:	mov	r2, r3
   1c5ec:	mov	r1, r7
   1c5f0:	bl	17708 <__assert_fail@plt+0x6460>
   1c5f4:	cmp	r0, #0
   1c5f8:	str	r0, [sl]
   1c5fc:	bne	1c6ec <__assert_fail@plt+0xb444>
   1c600:	ldr	r1, [r4, #40]	; 0x28
   1c604:	mov	r0, r4
   1c608:	ldr	r2, [r4, #88]	; 0x58
   1c60c:	sub	r1, r1, #1
   1c610:	bl	19698 <__assert_fail@plt+0x83f0>
   1c614:	ldr	r9, [r4, #100]	; 0x64
   1c618:	mov	r3, r0
   1c61c:	add	r2, sp, #4
   1c620:	mov	r1, r8
   1c624:	mov	r0, sl
   1c628:	bl	17874 <__assert_fail@plt+0x65cc>
   1c62c:	cmp	r7, #0
   1c630:	mov	r6, r0
   1c634:	str	r0, [r9, r5, lsl #2]
   1c638:	beq	1c594 <__assert_fail@plt+0xb2ec>
   1c63c:	ldr	r0, [sp, #12]
   1c640:	bl	24628 <__assert_fail@plt+0x13380>
   1c644:	b	1c594 <__assert_fail@plt+0xb2ec>
   1c648:	ldrd	r6, [r3]
   1c64c:	sub	r1, r5, #1
   1c650:	mov	r0, r4
   1c654:	ldr	r2, [r4, #88]	; 0x58
   1c658:	strd	r6, [sp, #4]
   1c65c:	ldr	r3, [r3, #8]
   1c660:	str	r3, [sp, #12]
   1c664:	bl	19698 <__assert_fail@plt+0x83f0>
   1c668:	mov	r3, r0
   1c66c:	add	r2, sp, #4
   1c670:	mov	r1, r8
   1c674:	mov	r0, sl
   1c678:	bl	17874 <__assert_fail@plt+0x65cc>
   1c67c:	mov	r6, r0
   1c680:	str	r0, [r9, r5, lsl #2]
   1c684:	b	1c594 <__assert_fail@plt+0xb2ec>
   1c688:	cmp	r6, #0
   1c68c:	beq	1c6ec <__assert_fail@plt+0xb444>
   1c690:	add	r7, r6, #8
   1c694:	add	r8, r6, #12
   1c698:	mov	r1, r7
   1c69c:	mov	r2, r8
   1c6a0:	mov	r3, r5
   1c6a4:	mov	r0, r4
   1c6a8:	bl	1a238 <__assert_fail@plt+0x8f90>
   1c6ac:	cmp	r0, #0
   1c6b0:	str	r0, [sl]
   1c6b4:	bne	1c6ec <__assert_fail@plt+0xb444>
   1c6b8:	ldrb	r3, [r6, #52]	; 0x34
   1c6bc:	tst	r3, #64	; 0x40
   1c6c0:	beq	1c5a0 <__assert_fail@plt+0xb2f8>
   1c6c4:	mov	r2, r8
   1c6c8:	mov	r1, r7
   1c6cc:	mov	r0, r4
   1c6d0:	bl	1bdb0 <__assert_fail@plt+0xab08>
   1c6d4:	cmp	r0, #0
   1c6d8:	str	r0, [sl]
   1c6dc:	bne	1c6ec <__assert_fail@plt+0xb444>
   1c6e0:	ldr	r3, [r4, #100]	; 0x64
   1c6e4:	ldr	r6, [r3, r5, lsl #2]
   1c6e8:	b	1c5a0 <__assert_fail@plt+0xb2f8>
   1c6ec:	mov	r6, #0
   1c6f0:	b	1c5a0 <__assert_fail@plt+0xb2f8>
   1c6f4:	mov	r3, #1
   1c6f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c6fc:	ldr	r4, [r1, #8]
   1c700:	strd	r6, [sp, #8]
   1c704:	strd	r8, [sp, #16]
   1c708:	mov	r9, r1
   1c70c:	strd	sl, [sp, #24]
   1c710:	mov	fp, r0
   1c714:	mov	r0, #4
   1c718:	str	lr, [sp, #32]
   1c71c:	sub	sp, sp, #60	; 0x3c
   1c720:	ldr	sl, [r1, #12]
   1c724:	str	r3, [sp, #44]	; 0x2c
   1c728:	str	r3, [sp, #48]	; 0x30
   1c72c:	bl	24440 <__assert_fail@plt+0x13198>
   1c730:	cmp	r0, #0
   1c734:	str	r0, [sp, #52]	; 0x34
   1c738:	beq	1c9c4 <__assert_fail@plt+0xb71c>
   1c73c:	mov	r2, sl
   1c740:	add	r3, sp, #44	; 0x2c
   1c744:	str	r4, [r0]
   1c748:	mov	r1, r9
   1c74c:	mov	r0, fp
   1c750:	bl	1e500 <__assert_fail@plt+0xd258>
   1c754:	cmp	r0, #0
   1c758:	bne	1c9a0 <__assert_fail@plt+0xb6f8>
   1c75c:	cmp	sl, #0
   1c760:	addgt	r3, r9, #24
   1c764:	strgt	r0, [sp, #20]
   1c768:	strgt	r3, [sp, #36]	; 0x24
   1c76c:	ble	1c96c <__assert_fail@plt+0xb6c4>
   1c770:	ldr	r0, [r9]
   1c774:	lsl	r3, sl, #2
   1c778:	str	r3, [sp, #16]
   1c77c:	ldr	r3, [r0, sl, lsl #2]
   1c780:	cmp	r3, #0
   1c784:	ldreq	r3, [sp, #20]
   1c788:	movne	r3, #0
   1c78c:	addeq	r3, r3, #1
   1c790:	str	r3, [sp, #20]
   1c794:	ldr	r2, [sp, #20]
   1c798:	ldr	r3, [fp, #120]	; 0x78
   1c79c:	cmp	r3, r2
   1c7a0:	blt	1c9a8 <__assert_fail@plt+0xb700>
   1c7a4:	mov	r2, #0
   1c7a8:	ldr	r3, [fp, #100]	; 0x64
   1c7ac:	sub	sl, sl, #1
   1c7b0:	str	r2, [sp, #48]	; 0x30
   1c7b4:	ldr	r2, [sp, #16]
   1c7b8:	add	r3, r3, r2
   1c7bc:	ldr	r6, [r3, #-4]
   1c7c0:	cmp	r6, #0
   1c7c4:	beq	1c948 <__assert_fail@plt+0xb6a0>
   1c7c8:	ldr	r3, [r6, #20]
   1c7cc:	ldr	r5, [fp, #84]	; 0x54
   1c7d0:	cmp	r3, #0
   1c7d4:	ble	1c948 <__assert_fail@plt+0xb6a0>
   1c7d8:	ldr	r3, [r6, #24]
   1c7dc:	add	r2, r9, #20
   1c7e0:	mov	r8, #0
   1c7e4:	ldr	r1, [r5]
   1c7e8:	str	r2, [sp, #28]
   1c7ec:	ldr	r4, [r3]
   1c7f0:	lsl	r7, r4, #3
   1c7f4:	add	r3, r1, r7
   1c7f8:	b	1c8b8 <__assert_fail@plt+0xb610>
   1c7fc:	add	r1, r1, r7
   1c800:	mov	r2, sl
   1c804:	mov	r0, fp
   1c808:	bl	197b0 <__assert_fail@plt+0x8508>
   1c80c:	cmp	r0, #0
   1c810:	beq	1c894 <__assert_fail@plt+0xb5ec>
   1c814:	ldr	r3, [r9]
   1c818:	ldr	r2, [sp, #16]
   1c81c:	ldr	r3, [r3, r2]
   1c820:	cmp	r3, #0
   1c824:	beq	1c894 <__assert_fail@plt+0xb5ec>
   1c828:	ldr	r2, [r5, #12]
   1c82c:	add	r1, r3, #12
   1c830:	ldr	r0, [r3, #8]
   1c834:	ldr	r2, [r2, r4, lsl #2]
   1c838:	bl	16a58 <__assert_fail@plt+0x57b0>
   1c83c:	cmp	r0, #0
   1c840:	beq	1c894 <__assert_fail@plt+0xb5ec>
   1c844:	mov	r3, #1
   1c848:	ldr	r2, [r9, #20]
   1c84c:	cmp	r2, #0
   1c850:	beq	1c880 <__assert_fail@plt+0xb5d8>
   1c854:	ldr	lr, [r5, #12]
   1c858:	add	ip, sl, r3
   1c85c:	mov	r0, fp
   1c860:	ldr	r1, [sp, #28]
   1c864:	ldr	r2, [sp, #36]	; 0x24
   1c868:	ldr	r3, [lr, r4, lsl #2]
   1c86c:	str	ip, [sp]
   1c870:	stmib	sp, {r4, sl}
   1c874:	bl	16d2c <__assert_fail@plt+0x5a84>
   1c878:	cmp	r0, #0
   1c87c:	bne	1c894 <__assert_fail@plt+0xb5ec>
   1c880:	mov	r1, r4
   1c884:	add	r0, sp, #44	; 0x2c
   1c888:	bl	16484 <__assert_fail@plt+0x51dc>
   1c88c:	cmp	r0, #0
   1c890:	beq	1c974 <__assert_fail@plt+0xb6cc>
   1c894:	ldr	r3, [r6, #20]
   1c898:	add	r8, r8, #1
   1c89c:	cmp	r8, r3
   1c8a0:	bge	1c948 <__assert_fail@plt+0xb6a0>
   1c8a4:	ldr	r3, [r6, #24]
   1c8a8:	ldr	r1, [r5]
   1c8ac:	ldr	r4, [r3, r8, lsl #2]
   1c8b0:	lsl	r7, r4, #3
   1c8b4:	add	r3, r1, r7
   1c8b8:	ldrb	r3, [r3, #6]
   1c8bc:	tst	r3, #16
   1c8c0:	beq	1c7fc <__assert_fail@plt+0xb554>
   1c8c4:	ldr	r0, [r9, #12]
   1c8c8:	mov	r3, fp
   1c8cc:	mov	r2, r4
   1c8d0:	ldr	r1, [fp, #84]	; 0x54
   1c8d4:	str	r0, [sp, #24]
   1c8d8:	str	r1, [sp, #32]
   1c8dc:	ldr	r0, [r1], #128	; 0x80
   1c8e0:	str	sl, [sp]
   1c8e4:	bl	1b354 <__assert_fail@plt+0xa0ac>
   1c8e8:	subs	r3, r0, #0
   1c8ec:	ble	1c940 <__assert_fail@plt+0xb698>
   1c8f0:	ldr	r0, [sp, #24]
   1c8f4:	add	r2, sl, r3
   1c8f8:	cmp	r0, r2
   1c8fc:	blt	1c848 <__assert_fail@plt+0xb5a0>
   1c900:	ldr	r1, [r9]
   1c904:	ldr	r2, [r1, r2, lsl #2]
   1c908:	cmp	r2, #0
   1c90c:	beq	1c938 <__assert_fail@plt+0xb690>
   1c910:	str	r3, [sp, #24]
   1c914:	add	r1, r2, #12
   1c918:	ldr	r3, [sp, #32]
   1c91c:	ldr	r0, [r2, #8]
   1c920:	ldr	ip, [r3, #12]
   1c924:	ldr	r2, [ip, r4, lsl #2]
   1c928:	bl	16a58 <__assert_fail@plt+0x57b0>
   1c92c:	cmp	r0, #0
   1c930:	ldr	r3, [sp, #24]
   1c934:	bne	1c848 <__assert_fail@plt+0xb5a0>
   1c938:	ldr	r1, [r5]
   1c93c:	b	1c7fc <__assert_fail@plt+0xb554>
   1c940:	beq	1c938 <__assert_fail@plt+0xb690>
   1c944:	b	1c848 <__assert_fail@plt+0xb5a0>
   1c948:	add	r3, sp, #44	; 0x2c
   1c94c:	mov	r2, sl
   1c950:	mov	r1, r9
   1c954:	mov	r0, fp
   1c958:	bl	1e500 <__assert_fail@plt+0xd258>
   1c95c:	cmp	r0, #0
   1c960:	bne	1c9a0 <__assert_fail@plt+0xb6f8>
   1c964:	cmp	sl, #0
   1c968:	bne	1c770 <__assert_fail@plt+0xb4c8>
   1c96c:	mov	r4, #0
   1c970:	b	1c978 <__assert_fail@plt+0xb6d0>
   1c974:	mov	r4, #12
   1c978:	ldr	r0, [sp, #52]	; 0x34
   1c97c:	bl	24628 <__assert_fail@plt+0x13380>
   1c980:	mov	r0, r4
   1c984:	add	sp, sp, #60	; 0x3c
   1c988:	ldrd	r4, [sp]
   1c98c:	ldrd	r6, [sp, #8]
   1c990:	ldrd	r8, [sp, #16]
   1c994:	ldrd	sl, [sp, #24]
   1c998:	add	sp, sp, #32
   1c99c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c9a0:	mov	r4, r0
   1c9a4:	b	1c978 <__assert_fail@plt+0xb6d0>
   1c9a8:	mov	r1, #0
   1c9ac:	ldr	r2, [sp, #16]
   1c9b0:	mov	r4, r1
   1c9b4:	bl	111c4 <memset@plt>
   1c9b8:	ldr	r0, [sp, #52]	; 0x34
   1c9bc:	bl	24628 <__assert_fail@plt+0x13380>
   1c9c0:	b	1c980 <__assert_fail@plt+0xb6d8>
   1c9c4:	mov	r4, #12
   1c9c8:	b	1c980 <__assert_fail@plt+0xb6d8>
   1c9cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c9d0:	mov	r4, r0
   1c9d4:	mov	r5, r3
   1c9d8:	strd	r6, [sp, #8]
   1c9dc:	strd	r8, [sp, #16]
   1c9e0:	strd	sl, [sp, #24]
   1c9e4:	str	lr, [sp, #32]
   1c9e8:	sub	sp, sp, #428	; 0x1ac
   1c9ec:	ldr	r9, [r0]
   1c9f0:	str	r0, [sp, #32]
   1c9f4:	add	r0, sp, #148	; 0x94
   1c9f8:	str	r1, [sp, #56]	; 0x38
   1c9fc:	mov	r1, #0
   1ca00:	str	r2, [sp, #72]	; 0x48
   1ca04:	mov	r2, #136	; 0x88
   1ca08:	ldr	r6, [sp, #464]	; 0x1d0
   1ca0c:	bl	111c4 <memset@plt>
   1ca10:	ldr	r2, [r4, #16]
   1ca14:	cmp	r2, #0
   1ca18:	str	r2, [sp, #48]	; 0x30
   1ca1c:	str	r9, [sp, #232]	; 0xe8
   1ca20:	beq	1ca3c <__assert_fail@plt+0xb794>
   1ca24:	ldrb	r2, [r4, #28]
   1ca28:	subs	r3, r5, r6
   1ca2c:	movne	r3, #1
   1ca30:	ands	r3, r3, r2, lsr #3
   1ca34:	streq	r3, [sp, #48]	; 0x30
   1ca38:	bne	1cde0 <__assert_fail@plt+0xbb38>
   1ca3c:	ldr	r3, [sp, #32]
   1ca40:	ldr	r2, [sp, #472]	; 0x1d8
   1ca44:	ldr	r3, [r3, #24]
   1ca48:	cmp	r3, r2
   1ca4c:	movcs	r3, #0
   1ca50:	strcs	r3, [sp, #108]	; 0x6c
   1ca54:	bcs	1ca74 <__assert_fail@plt+0xb7cc>
   1ca58:	sub	r2, r2, #1
   1ca5c:	sub	r1, r3, r2
   1ca60:	sub	r3, r2, r3
   1ca64:	str	r3, [sp, #108]	; 0x6c
   1ca68:	ldr	r3, [sp, #472]	; 0x1d8
   1ca6c:	add	r3, r3, r1
   1ca70:	str	r3, [sp, #472]	; 0x1d8
   1ca74:	ldr	ip, [sp, #32]
   1ca78:	ldr	r3, [ip, #8]
   1ca7c:	cmp	r3, #0
   1ca80:	beq	1d6bc <__assert_fail@plt+0xc414>
   1ca84:	ldr	r3, [r9, #36]	; 0x24
   1ca88:	cmp	r3, #0
   1ca8c:	beq	1d6bc <__assert_fail@plt+0xc414>
   1ca90:	ldr	r2, [r9, #40]	; 0x28
   1ca94:	cmp	r2, #0
   1ca98:	beq	1d6bc <__assert_fail@plt+0xc414>
   1ca9c:	ldr	r1, [r9, #44]	; 0x2c
   1caa0:	cmp	r1, #0
   1caa4:	beq	1d6bc <__assert_fail@plt+0xc414>
   1caa8:	ldr	r0, [r9, #48]	; 0x30
   1caac:	cmp	r0, #0
   1cab0:	beq	1d6bc <__assert_fail@plt+0xc414>
   1cab4:	ldr	r3, [r3, #8]
   1cab8:	cmp	r3, #0
   1cabc:	bne	1cb00 <__assert_fail@plt+0xb858>
   1cac0:	ldr	r3, [r2, #8]
   1cac4:	cmp	r3, #0
   1cac8:	bne	1cb00 <__assert_fail@plt+0xb858>
   1cacc:	ldr	r3, [r1, #8]
   1cad0:	cmp	r3, #0
   1cad4:	beq	1cae4 <__assert_fail@plt+0xb83c>
   1cad8:	ldrsb	r3, [ip, #28]
   1cadc:	cmp	r3, #0
   1cae0:	blt	1cb00 <__assert_fail@plt+0xb858>
   1cae4:	adds	r6, r6, #0
   1cae8:	movne	r6, #1
   1caec:	cmp	r5, #0
   1caf0:	moveq	r6, #0
   1caf4:	cmp	r6, #0
   1caf8:	bne	1d6bc <__assert_fail@plt+0xc414>
   1cafc:	mov	r5, r6
   1cb00:	ldr	r3, [sp, #472]	; 0x1d8
   1cb04:	cmp	r3, #0
   1cb08:	bne	1cdd0 <__assert_fail@plt+0xbb28>
   1cb0c:	ldr	r3, [r9, #76]	; 0x4c
   1cb10:	adds	r3, r3, #0
   1cb14:	movne	r3, #1
   1cb18:	str	r3, [sp, #20]
   1cb1c:	str	r3, [sp, #60]	; 0x3c
   1cb20:	ldr	r8, [sp, #32]
   1cb24:	add	r0, sp, #148	; 0x94
   1cb28:	ldr	r2, [sp, #56]	; 0x38
   1cb2c:	ldr	r3, [r9, #8]
   1cb30:	ldr	ip, [r8, #12]
   1cb34:	str	r2, [sp, #148]	; 0x94
   1cb38:	ldr	lr, [r9, #92]	; 0x5c
   1cb3c:	add	r3, r3, #1
   1cb40:	ldrb	r2, [r9, #88]	; 0x58
   1cb44:	and	r4, ip, #4194304	; 0x400000
   1cb48:	ubfx	ip, ip, #22, #1
   1cb4c:	ldr	r8, [r8, #20]
   1cb50:	cmp	r3, lr
   1cb54:	ldr	r7, [sp, #72]	; 0x48
   1cb58:	movlt	r3, lr
   1cb5c:	str	r8, [sp, #80]	; 0x50
   1cb60:	strb	ip, [sp, #220]	; 0xdc
   1cb64:	ubfx	ip, r2, #2, #1
   1cb68:	add	r1, r7, #1
   1cb6c:	ubfx	r2, r2, #3, #1
   1cb70:	str	lr, [sp, #228]	; 0xe4
   1cb74:	orrs	lr, r8, r4
   1cb78:	str	r7, [sp, #192]	; 0xc0
   1cb7c:	movne	lr, #1
   1cb80:	moveq	lr, #0
   1cb84:	str	r7, [sp, #196]	; 0xc4
   1cb88:	cmp	r3, r1
   1cb8c:	str	r7, [sp, #200]	; 0xc8
   1cb90:	movlt	r1, r3
   1cb94:	str	r7, [sp, #204]	; 0xcc
   1cb98:	str	r8, [sp, #212]	; 0xd4
   1cb9c:	strb	ip, [sp, #221]	; 0xdd
   1cba0:	strb	r2, [sp, #222]	; 0xde
   1cba4:	strb	lr, [sp, #223]	; 0xdf
   1cba8:	bl	152b4 <__assert_fail@plt+0x400c>
   1cbac:	subs	r3, r0, #0
   1cbb0:	str	r3, [sp, #36]	; 0x24
   1cbb4:	bne	1d298 <__assert_fail@plt+0xbff0>
   1cbb8:	ldrb	r3, [r9, #88]	; 0x58
   1cbbc:	add	r1, r9, #96	; 0x60
   1cbc0:	ldrb	r2, [sp, #223]	; 0xdf
   1cbc4:	str	r1, [sp, #216]	; 0xd8
   1cbc8:	ubfx	r3, r3, #4, #1
   1cbcc:	cmp	r2, #0
   1cbd0:	strb	r3, [sp, #226]	; 0xe2
   1cbd4:	bne	1cbec <__assert_fail@plt+0xb944>
   1cbd8:	ldr	r3, [r9, #92]	; 0x5c
   1cbdc:	ldr	r2, [sp, #56]	; 0x38
   1cbe0:	cmp	r3, #1
   1cbe4:	str	r2, [sp, #152]	; 0x98
   1cbe8:	ble	1d7b4 <__assert_fail@plt+0xc50c>
   1cbec:	mov	r2, #0
   1cbf0:	ldr	r3, [sp, #32]
   1cbf4:	mvn	r1, #0
   1cbf8:	str	r2, [sp, #176]	; 0xb0
   1cbfc:	str	r2, [sp, #180]	; 0xb4
   1cc00:	ldr	r2, [sp, #468]	; 0x1d4
   1cc04:	ldrb	r3, [r3, #28]
   1cc08:	str	r2, [sp, #200]	; 0xc8
   1cc0c:	str	r2, [sp, #204]	; 0xcc
   1cc10:	ubfx	r3, r3, #7, #1
   1cc14:	strb	r3, [sp, #225]	; 0xe1
   1cc18:	ldr	r7, [r9, #76]	; 0x4c
   1cc1c:	str	r1, [sp, #240]	; 0xf0
   1cc20:	ldr	r3, [sp, #480]	; 0x1e0
   1cc24:	lsl	r4, r7, #1
   1cc28:	cmp	r4, #0
   1cc2c:	str	r3, [sp, #236]	; 0xec
   1cc30:	ble	1cc70 <__assert_fail@plt+0xb9c8>
   1cc34:	movw	r3, #43690	; 0xaaaa
   1cc38:	movt	r3, #2730	; 0xaaa
   1cc3c:	cmp	r4, r3
   1cc40:	bgt	1da14 <__assert_fail@plt+0xc76c>
   1cc44:	add	r0, r4, r7, lsl #2
   1cc48:	lsl	r0, r0, #3
   1cc4c:	bl	24440 <__assert_fail@plt+0x13198>
   1cc50:	str	r0, [sp, #264]	; 0x108
   1cc54:	lsl	r0, r7, #3
   1cc58:	bl	24440 <__assert_fail@plt+0x13198>
   1cc5c:	ldr	r3, [sp, #264]	; 0x108
   1cc60:	str	r0, [sp, #280]	; 0x118
   1cc64:	cmp	r0, #0
   1cc68:	cmpne	r3, #0
   1cc6c:	beq	1da14 <__assert_fail@plt+0xc76c>
   1cc70:	ldr	r2, [sp, #472]	; 0x1d8
   1cc74:	mov	r3, #1
   1cc78:	str	r4, [sp, #260]	; 0x104
   1cc7c:	str	r3, [sp, #268]	; 0x10c
   1cc80:	str	r4, [sp, #276]	; 0x114
   1cc84:	cmp	r2, r3
   1cc88:	bls	1d9a8 <__assert_fail@plt+0xc700>
   1cc8c:	ldr	r0, [sp, #184]	; 0xb8
   1cc90:	cmn	r0, #-1073741822	; 0xc0000002
   1cc94:	bhi	1da14 <__assert_fail@plt+0xc76c>
   1cc98:	add	r0, r0, #1
   1cc9c:	lsl	r0, r0, #2
   1cca0:	bl	24440 <__assert_fail@plt+0x13198>
   1cca4:	cmp	r0, #0
   1cca8:	mov	r4, r0
   1ccac:	str	r0, [sp, #248]	; 0xf8
   1ccb0:	beq	1d6e8 <__assert_fail@plt+0xc440>
   1ccb4:	ldr	r3, [sp, #480]	; 0x1e0
   1ccb8:	str	r5, [sp, #116]	; 0x74
   1ccbc:	ldr	r2, [r9, #92]	; 0x5c
   1ccc0:	tst	r3, #1
   1ccc4:	movne	r3, #4
   1ccc8:	moveq	r3, #6
   1cccc:	cmp	r5, r6
   1ccd0:	str	r2, [sp, #88]	; 0x58
   1ccd4:	str	r3, [sp, #208]	; 0xd0
   1ccd8:	movge	r3, r5
   1ccdc:	movlt	r3, r6
   1cce0:	mvngt	r2, #0
   1cce4:	movle	r2, #1
   1cce8:	str	r3, [sp, #64]	; 0x40
   1ccec:	ldr	r3, [sp, #48]	; 0x30
   1ccf0:	str	r2, [sp, #96]	; 0x60
   1ccf4:	movlt	r2, r5
   1ccf8:	movge	r2, r6
   1ccfc:	str	r2, [sp, #76]	; 0x4c
   1cd00:	cmp	r3, #0
   1cd04:	beq	1da24 <__assert_fail@plt+0xc77c>
   1cd08:	ldr	r3, [sp, #88]	; 0x58
   1cd0c:	cmp	r3, #1
   1cd10:	moveq	r3, #4
   1cd14:	beq	1cd34 <__assert_fail@plt+0xba8c>
   1cd18:	ldr	r3, [sp, #32]
   1cd1c:	ldr	r2, [sp, #80]	; 0x50
   1cd20:	ldr	r3, [r3, #12]
   1cd24:	and	r3, r3, #4194304	; 0x400000
   1cd28:	orrs	r3, r2, r3
   1cd2c:	moveq	r3, #4
   1cd30:	movne	r3, #0
   1cd34:	ldr	r2, [sp, #36]	; 0x24
   1cd38:	cmp	r5, r6
   1cd3c:	movle	r2, #2
   1cd40:	ldr	r1, [sp, #80]	; 0x50
   1cd44:	cmp	r1, #0
   1cd48:	orrne	r3, r3, #1
   1cd4c:	orr	r3, r3, r2
   1cd50:	ldr	r1, [sp, #64]	; 0x40
   1cd54:	ldr	r2, [sp, #76]	; 0x4c
   1cd58:	cmp	r5, r2
   1cd5c:	movge	r2, #0
   1cd60:	movlt	r2, #1
   1cd64:	cmp	r5, r1
   1cd68:	orrgt	r2, r2, #1
   1cd6c:	cmp	r2, #0
   1cd70:	bne	1d290 <__assert_fail@plt+0xbfe8>
   1cd74:	add	r2, sp, #424	; 0x1a8
   1cd78:	cmp	r5, r6
   1cd7c:	str	r9, [sp, #68]	; 0x44
   1cd80:	sub	r3, r3, #4
   1cd84:	suble	r2, r2, #308	; 0x134
   1cd88:	movgt	r2, #0
   1cd8c:	str	r3, [sp, #92]	; 0x5c
   1cd90:	adds	r3, r2, #0
   1cd94:	movne	r3, #1
   1cd98:	str	r2, [sp, #100]	; 0x64
   1cd9c:	str	r3, [sp, #104]	; 0x68
   1cda0:	mov	r3, #65280	; 0xff00
   1cda4:	movt	r3, #3
   1cda8:	str	r3, [sp, #52]	; 0x34
   1cdac:	ldr	r3, [sp, #92]	; 0x5c
   1cdb0:	cmp	r3, #4
   1cdb4:	ldrls	pc, [pc, r3, lsl #2]
   1cdb8:	b	1da40 <__assert_fail@plt+0xc798>
   1cdbc:	andeq	sp, r1, r8, lsl #6
   1cdc0:	andeq	sp, r1, r8, lsl #6
   1cdc4:	andeq	sp, r1, r0, lsr #5
   1cdc8:	ldrdeq	sp, [r1], -ip
   1cdcc:	strdeq	ip, [r1], -r8
   1cdd0:	mov	r3, #1
   1cdd4:	str	r3, [sp, #20]
   1cdd8:	str	r3, [sp, #60]	; 0x3c
   1cddc:	b	1cb20 <__assert_fail@plt+0xb878>
   1cde0:	ldr	r3, [sp, #48]	; 0x30
   1cde4:	tst	r2, #1
   1cde8:	movne	r3, #0
   1cdec:	str	r3, [sp, #48]	; 0x30
   1cdf0:	b	1ca3c <__assert_fail@plt+0xb794>
   1cdf4:	str	r5, [sp, #116]	; 0x74
   1cdf8:	mov	r1, r5
   1cdfc:	add	r0, sp, #148	; 0x94
   1ce00:	ldr	r2, [sp, #480]	; 0x1e0
   1ce04:	bl	198e8 <__assert_fail@plt+0x8640>
   1ce08:	subs	r3, r0, #0
   1ce0c:	str	r3, [sp, #36]	; 0x24
   1ce10:	bne	1da74 <__assert_fail@plt+0xc7cc>
   1ce14:	ldr	r3, [sp, #88]	; 0x58
   1ce18:	cmp	r3, #1
   1ce1c:	beq	1ce3c <__assert_fail@plt+0xbb94>
   1ce20:	ldr	r3, [sp, #176]	; 0xb0
   1ce24:	cmp	r3, #0
   1ce28:	beq	1ce3c <__assert_fail@plt+0xbb94>
   1ce2c:	ldr	r3, [sp, #156]	; 0x9c
   1ce30:	ldr	r3, [r3]
   1ce34:	cmn	r3, #1
   1ce38:	beq	1d66c <__assert_fail@plt+0xc3c4>
   1ce3c:	ldr	r4, [sp, #232]	; 0xe8
   1ce40:	mov	r3, #0
   1ce44:	ldr	sl, [r4, #36]	; 0x24
   1ce48:	str	r3, [sp, #124]	; 0x7c
   1ce4c:	str	r3, [sp, #252]	; 0xfc
   1ce50:	str	r3, [sp, #256]	; 0x100
   1ce54:	str	r3, [sp, #268]	; 0x10c
   1ce58:	ldr	r3, [sp, #188]	; 0xbc
   1ce5c:	mov	r2, r3
   1ce60:	ldrsb	r3, [sl, #52]	; 0x34
   1ce64:	str	r2, [sp, #12]
   1ce68:	cmp	r3, #0
   1ce6c:	bge	1ceac <__assert_fail@plt+0xbc04>
   1ce70:	sub	r1, r2, #1
   1ce74:	add	r0, sp, #148	; 0x94
   1ce78:	ldr	r2, [sp, #236]	; 0xec
   1ce7c:	bl	19698 <__assert_fail@plt+0x83f0>
   1ce80:	tst	r0, #1
   1ce84:	bne	1d9d4 <__assert_fail@plt+0xc72c>
   1ce88:	cmp	r0, #0
   1ce8c:	beq	1ceac <__assert_fail@plt+0xbc04>
   1ce90:	and	r3, r0, #6
   1ce94:	cmp	r3, #6
   1ce98:	beq	1db64 <__assert_fail@plt+0xc8bc>
   1ce9c:	tst	r0, #2
   1cea0:	bne	1dab8 <__assert_fail@plt+0xc810>
   1cea4:	tst	r0, #4
   1cea8:	bne	1dae0 <__assert_fail@plt+0xc838>
   1ceac:	ldr	r3, [sp, #248]	; 0xf8
   1ceb0:	cmp	r3, #0
   1ceb4:	beq	1d77c <__assert_fail@plt+0xc4d4>
   1ceb8:	ldr	r2, [r4, #76]	; 0x4c
   1cebc:	ldr	r1, [sp, #12]
   1cec0:	cmp	r2, #0
   1cec4:	str	sl, [r3, r1, lsl #2]
   1cec8:	bne	1db20 <__assert_fail@plt+0xc878>
   1cecc:	ldrb	r3, [sl, #52]	; 0x34
   1ced0:	ldr	r2, [sp, #104]	; 0x68
   1ced4:	str	r2, [sp, #16]
   1ced8:	ubfx	r3, r3, #4, #1
   1cedc:	cmp	r3, #0
   1cee0:	mvneq	fp, #0
   1cee4:	streq	r3, [sp, #28]
   1cee8:	bne	1da80 <__assert_fail@plt+0xc7d8>
   1ceec:	ldr	r3, [sp, #100]	; 0x64
   1cef0:	str	fp, [sp, #24]
   1cef4:	ldr	r4, [sp, #188]	; 0xbc
   1cef8:	str	r3, [sp, #40]	; 0x28
   1cefc:	b	1cf60 <__assert_fail@plt+0xbcb8>
   1cf00:	ldrb	r3, [r5, #52]	; 0x34
   1cf04:	ldr	r2, [sp, #16]
   1cf08:	ldr	r1, [sp, #12]
   1cf0c:	ldr	r4, [sp, #188]	; 0xbc
   1cf10:	cmp	sl, r5
   1cf14:	movne	r2, #0
   1cf18:	andeq	r2, r2, #1
   1cf1c:	cmp	r2, #0
   1cf20:	movne	r1, r8
   1cf24:	tst	r3, #16
   1cf28:	str	r1, [sp, #12]
   1cf2c:	str	r2, [sp, #16]
   1cf30:	beq	1cf5c <__assert_fail@plt+0xbcb4>
   1cf34:	tst	r3, #128	; 0x80
   1cf38:	bne	1d3b8 <__assert_fail@plt+0xc110>
   1cf3c:	ldr	r3, [sp, #20]
   1cf40:	cmp	r3, #0
   1cf44:	beq	1dab0 <__assert_fail@plt+0xc808>
   1cf48:	ldr	r3, [sp, #20]
   1cf4c:	str	r4, [sp, #24]
   1cf50:	str	r3, [sp, #28]
   1cf54:	mov	r3, #0
   1cf58:	str	r3, [sp, #40]	; 0x28
   1cf5c:	mov	sl, r5
   1cf60:	ldr	r3, [sp, #204]	; 0xcc
   1cf64:	cmp	r3, r4
   1cf68:	ble	1d3b0 <__assert_fail@plt+0xc108>
   1cf6c:	ldr	r3, [sp, #184]	; 0xb8
   1cf70:	add	r8, r4, #1
   1cf74:	cmp	r8, r3
   1cf78:	bge	1d3d4 <__assert_fail@plt+0xc12c>
   1cf7c:	ldr	r3, [sp, #176]	; 0xb0
   1cf80:	cmp	r8, r3
   1cf84:	bge	1d640 <__assert_fail@plt+0xc398>
   1cf88:	ldrb	r3, [sl, #52]	; 0x34
   1cf8c:	tst	r3, #32
   1cf90:	bne	1d408 <__assert_fail@plt+0xc160>
   1cf94:	ldr	r3, [sp, #152]	; 0x98
   1cf98:	add	r2, r4, #1
   1cf9c:	str	r2, [sp, #188]	; 0xbc
   1cfa0:	ldrb	r4, [r3, r4]
   1cfa4:	ldr	r3, [sl, #44]	; 0x2c
   1cfa8:	cmp	r3, #0
   1cfac:	beq	1d610 <__assert_fail@plt+0xc368>
   1cfb0:	ldr	r5, [r3, r4, lsl #2]
   1cfb4:	ldr	r3, [sp, #248]	; 0xf8
   1cfb8:	cmp	r3, #0
   1cfbc:	beq	1cfd4 <__assert_fail@plt+0xbd2c>
   1cfc0:	mov	r2, r5
   1cfc4:	add	r1, sp, #148	; 0x94
   1cfc8:	add	r0, sp, #124	; 0x7c
   1cfcc:	bl	1c550 <__assert_fail@plt+0xb2a8>
   1cfd0:	mov	r5, r0
   1cfd4:	cmp	r5, #0
   1cfd8:	bne	1cf00 <__assert_fail@plt+0xbc58>
   1cfdc:	ldr	r3, [sp, #124]	; 0x7c
   1cfe0:	ldr	r4, [sp, #248]	; 0xf8
   1cfe4:	cmp	r3, #0
   1cfe8:	bne	1d6e4 <__assert_fail@plt+0xc43c>
   1cfec:	cmp	r4, #0
   1cff0:	beq	1d3b0 <__assert_fail@plt+0xc108>
   1cff4:	ldr	r2, [sp, #28]
   1cff8:	ldr	r3, [sp, #60]	; 0x3c
   1cffc:	eor	r3, r3, #1
   1d000:	tst	r2, r3
   1d004:	bne	1d3b0 <__assert_fail@plt+0xc108>
   1d008:	ldr	r3, [sp, #188]	; 0xbc
   1d00c:	mov	r1, #0
   1d010:	ldr	r0, [sp, #252]	; 0xfc
   1d014:	add	r4, r4, r3, lsl #2
   1d018:	b	1d030 <__assert_fail@plt+0xbd88>
   1d01c:	ldr	ip, [r4, #4]!
   1d020:	mov	r3, r2
   1d024:	mov	r1, #1
   1d028:	cmp	ip, #0
   1d02c:	bne	1d374 <__assert_fail@plt+0xc0cc>
   1d030:	add	r2, r3, #1
   1d034:	cmp	r0, r2
   1d038:	bge	1d01c <__assert_fail@plt+0xbd74>
   1d03c:	ldr	fp, [sp, #24]
   1d040:	cmp	r1, #0
   1d044:	strne	r3, [sp, #188]	; 0xbc
   1d048:	ldr	r2, [sp, #40]	; 0x28
   1d04c:	cmp	r2, #0
   1d050:	beq	1d064 <__assert_fail@plt+0xbdbc>
   1d054:	ldr	r3, [r2]
   1d058:	ldr	r1, [sp, #12]
   1d05c:	add	r3, r3, r1
   1d060:	str	r3, [r2]
   1d064:	cmn	fp, #1
   1d068:	beq	1d660 <__assert_fail@plt+0xc3b8>
   1d06c:	cmn	fp, #2
   1d070:	ldr	r4, [sp, #248]	; 0xf8
   1d074:	beq	1d6e4 <__assert_fail@plt+0xc43c>
   1d078:	ldr	r3, [sp, #32]
   1d07c:	str	fp, [sp, #240]	; 0xf0
   1d080:	ldrb	r3, [r3, #28]
   1d084:	tst	r3, #16
   1d088:	bne	1d720 <__assert_fail@plt+0xc478>
   1d08c:	ldr	r2, [sp, #472]	; 0x1d8
   1d090:	cmp	r2, #1
   1d094:	bls	1d78c <__assert_fail@plt+0xc4e4>
   1d098:	mov	r2, fp
   1d09c:	add	r0, sp, #148	; 0x94
   1d0a0:	ldr	r1, [r4, fp, lsl #2]
   1d0a4:	bl	1a154 <__assert_fail@plt+0x8eac>
   1d0a8:	ldr	r3, [sp, #68]	; 0x44
   1d0ac:	ldrb	r3, [r3, #88]	; 0x58
   1d0b0:	str	r0, [sp, #244]	; 0xf4
   1d0b4:	tst	r3, #1
   1d0b8:	bne	1d0cc <__assert_fail@plt+0xbe24>
   1d0bc:	ldr	r3, [sp, #68]	; 0x44
   1d0c0:	ldr	r3, [r3, #76]	; 0x4c
   1d0c4:	cmp	r3, #0
   1d0c8:	beq	1e494 <__assert_fail@plt+0xd1ec>
   1d0cc:	ldr	r3, [sp, #232]	; 0xe8
   1d0d0:	cmn	fp, #-1073741822	; 0xc0000002
   1d0d4:	ldr	r9, [sp, #244]	; 0xf4
   1d0d8:	str	r3, [sp, #12]
   1d0dc:	bhi	1d6e4 <__assert_fail@plt+0xc43c>
   1d0e0:	add	r5, fp, #1
   1d0e4:	lsl	r4, r5, #2
   1d0e8:	mov	r0, r4
   1d0ec:	bl	24440 <__assert_fail@plt+0x13198>
   1d0f0:	subs	sl, r0, #0
   1d0f4:	beq	1dac0 <__assert_fail@plt+0xc818>
   1d0f8:	ldr	r3, [sp, #12]
   1d0fc:	ldr	r6, [r3, #76]	; 0x4c
   1d100:	cmp	r6, #0
   1d104:	beq	1d7bc <__assert_fail@plt+0xc514>
   1d108:	mov	r0, r4
   1d10c:	bl	24440 <__assert_fail@plt+0x13198>
   1d110:	cmp	r0, #0
   1d114:	mov	r6, r0
   1d118:	str	r0, [sp, #24]
   1d11c:	beq	1db98 <__assert_fail@plt+0xc8f0>
   1d120:	add	r4, sp, #300	; 0x12c
   1d124:	mov	r8, #0
   1d128:	lsl	r7, r5, #2
   1d12c:	mov	r1, #0
   1d130:	mov	r0, r6
   1d134:	mov	r2, r7
   1d138:	bl	111c4 <memset@plt>
   1d13c:	add	r1, sp, #284	; 0x11c
   1d140:	add	r0, sp, #148	; 0x94
   1d144:	str	sl, [sp, #284]	; 0x11c
   1d148:	str	r6, [sp, #288]	; 0x120
   1d14c:	str	r9, [sp, #292]	; 0x124
   1d150:	str	fp, [sp, #296]	; 0x128
   1d154:	str	r8, [r4]
   1d158:	str	r8, [r4, #4]
   1d15c:	str	r8, [r4, #8]
   1d160:	bl	1c6f4 <__assert_fail@plt+0xb44c>
   1d164:	mov	r3, r0
   1d168:	ldr	r0, [sp, #308]	; 0x134
   1d16c:	str	r3, [sp, #16]
   1d170:	bl	24628 <__assert_fail@plt+0x13380>
   1d174:	ldr	r3, [sp, #16]
   1d178:	cmp	r3, #0
   1d17c:	bne	1db6c <__assert_fail@plt+0xc8c4>
   1d180:	ldr	r3, [sl]
   1d184:	cmp	r3, #0
   1d188:	bne	1dbc0 <__assert_fail@plt+0xc918>
   1d18c:	ldr	r3, [r6]
   1d190:	cmp	r3, #0
   1d194:	bne	1dbc0 <__assert_fail@plt+0xc918>
   1d198:	ldr	r3, [sp, #248]	; 0xf8
   1d19c:	sub	r7, r7, #4
   1d1a0:	add	r3, r3, r7
   1d1a4:	subs	fp, fp, #1
   1d1a8:	bcc	1d9f4 <__assert_fail@plt+0xc74c>
   1d1ac:	ldr	r1, [r3, #-4]!
   1d1b0:	cmp	r1, #0
   1d1b4:	beq	1d1a4 <__assert_fail@plt+0xbefc>
   1d1b8:	ldrb	r2, [r1, #52]	; 0x34
   1d1bc:	tst	r2, #16
   1d1c0:	beq	1d1a4 <__assert_fail@plt+0xbefc>
   1d1c4:	mov	r2, fp
   1d1c8:	add	r0, sp, #148	; 0x94
   1d1cc:	bl	1a154 <__assert_fail@plt+0x8eac>
   1d1d0:	add	r5, fp, #1
   1d1d4:	mov	r9, r0
   1d1d8:	b	1d128 <__assert_fail@plt+0xbe80>
   1d1dc:	ldr	r3, [sp, #64]	; 0x40
   1d1e0:	cmp	r3, r5
   1d1e4:	ble	1d250 <__assert_fail@plt+0xbfa8>
   1d1e8:	ldr	r3, [sp, #56]	; 0x38
   1d1ec:	ldr	r1, [sp, #80]	; 0x50
   1d1f0:	ldrb	r2, [r3, r5]
   1d1f4:	add	r3, r3, r5
   1d1f8:	ldrb	r2, [r1, r2]
   1d1fc:	ldr	r1, [sp, #48]	; 0x30
   1d200:	ldrb	r2, [r1, r2]
   1d204:	cmp	r2, #0
   1d208:	bne	1cdf8 <__assert_fail@plt+0xbb50>
   1d20c:	ldr	ip, [sp, #48]	; 0x30
   1d210:	ldr	r2, [sp, #56]	; 0x38
   1d214:	ldr	r1, [sp, #64]	; 0x40
   1d218:	ldr	lr, [sp, #80]	; 0x50
   1d21c:	sub	r0, r2, #1
   1d220:	rsb	r2, r2, #1
   1d224:	add	r0, r0, r1
   1d228:	b	1d240 <__assert_fail@plt+0xbf98>
   1d22c:	ldrb	r1, [r3, #1]!
   1d230:	ldrb	r1, [lr, r1]
   1d234:	ldrb	r1, [ip, r1]
   1d238:	cmp	r1, #0
   1d23c:	bne	1cdf4 <__assert_fail@plt+0xbb4c>
   1d240:	cmp	r3, r0
   1d244:	add	r5, r2, r3
   1d248:	bne	1d22c <__assert_fail@plt+0xbf84>
   1d24c:	str	r5, [sp, #116]	; 0x74
   1d250:	ldr	r3, [sp, #64]	; 0x40
   1d254:	cmp	r3, r5
   1d258:	bne	1cdf8 <__assert_fail@plt+0xbb50>
   1d25c:	ldr	r2, [sp, #72]	; 0x48
   1d260:	cmp	r2, r3
   1d264:	ldrgt	r2, [sp, #56]	; 0x38
   1d268:	movle	r3, #0
   1d26c:	ldrbgt	r3, [r2, r3]
   1d270:	ldr	r2, [sp, #80]	; 0x50
   1d274:	cmp	r2, #0
   1d278:	ldrbne	r3, [r2, r3]
   1d27c:	ldr	r2, [sp, #48]	; 0x30
   1d280:	ldrb	r3, [r2, r3]
   1d284:	cmp	r3, #0
   1d288:	bne	1cdf8 <__assert_fail@plt+0xbb50>
   1d28c:	ldr	r9, [sp, #68]	; 0x44
   1d290:	mov	r3, #1
   1d294:	str	r3, [sp, #36]	; 0x24
   1d298:	ldr	r4, [sp, #248]	; 0xf8
   1d29c:	b	1d6f0 <__assert_fail@plt+0xc448>
   1d2a0:	ldr	r3, [sp, #64]	; 0x40
   1d2a4:	cmp	r3, r5
   1d2a8:	ble	1d250 <__assert_fail@plt+0xbfa8>
   1d2ac:	ldr	r1, [sp, #48]	; 0x30
   1d2b0:	ldr	r3, [sp, #56]	; 0x38
   1d2b4:	ldrb	r2, [r3, r5]
   1d2b8:	add	r3, r3, r5
   1d2bc:	ldrb	r2, [r1, r2]
   1d2c0:	cmp	r2, #0
   1d2c4:	bne	1cdf8 <__assert_fail@plt+0xbb50>
   1d2c8:	ldr	ip, [sp, #48]	; 0x30
   1d2cc:	ldr	r2, [sp, #56]	; 0x38
   1d2d0:	ldr	r1, [sp, #64]	; 0x40
   1d2d4:	sub	r0, r2, #1
   1d2d8:	rsb	r2, r2, #1
   1d2dc:	add	r0, r0, r1
   1d2e0:	b	1d2f4 <__assert_fail@plt+0xc04c>
   1d2e4:	ldrb	r1, [r3, #1]!
   1d2e8:	ldrb	r1, [ip, r1]
   1d2ec:	cmp	r1, #0
   1d2f0:	bne	1cdf4 <__assert_fail@plt+0xbb4c>
   1d2f4:	cmp	r0, r3
   1d2f8:	add	r5, r2, r3
   1d2fc:	bne	1d2e4 <__assert_fail@plt+0xc03c>
   1d300:	str	r5, [sp, #116]	; 0x74
   1d304:	b	1d250 <__assert_fail@plt+0xbfa8>
   1d308:	ldr	r3, [sp, #76]	; 0x4c
   1d30c:	cmp	r3, r5
   1d310:	bgt	1d28c <__assert_fail@plt+0xbfe4>
   1d314:	mov	r1, #0
   1d318:	mov	r3, r5
   1d31c:	ldr	ip, [sp, #48]	; 0x30
   1d320:	ldr	r6, [sp, #56]	; 0x38
   1d324:	ldr	lr, [sp, #72]	; 0x48
   1d328:	ldr	r4, [sp, #76]	; 0x4c
   1d32c:	ldr	r0, [sp, #80]	; 0x50
   1d330:	b	1d344 <__assert_fail@plt+0xc09c>
   1d334:	sub	r3, r3, #1
   1d338:	mov	r1, #1
   1d33c:	cmp	r3, r4
   1d340:	blt	1da2c <__assert_fail@plt+0xc784>
   1d344:	cmp	lr, r3
   1d348:	mov	r2, #0
   1d34c:	ldrbgt	r2, [r6, r3]
   1d350:	cmp	r0, #0
   1d354:	ldrbne	r2, [r0, r2]
   1d358:	ldrb	r2, [ip, r2]
   1d35c:	cmp	r2, #0
   1d360:	beq	1d334 <__assert_fail@plt+0xc08c>
   1d364:	cmp	r1, #0
   1d368:	movne	r5, r3
   1d36c:	strne	r3, [sp, #116]	; 0x74
   1d370:	b	1cdf8 <__assert_fail@plt+0xbb50>
   1d374:	mov	r2, #0
   1d378:	add	r1, sp, #148	; 0x94
   1d37c:	str	r3, [sp, #188]	; 0xbc
   1d380:	add	r0, sp, #124	; 0x7c
   1d384:	bl	1c550 <__assert_fail@plt+0xb2a8>
   1d388:	ldr	r3, [sp, #124]	; 0x7c
   1d38c:	cmp	r3, #0
   1d390:	bne	1d3a4 <__assert_fail@plt+0xc0fc>
   1d394:	cmp	r0, #0
   1d398:	bne	1daa8 <__assert_fail@plt+0xc800>
   1d39c:	ldr	r4, [sp, #248]	; 0xf8
   1d3a0:	b	1d008 <__assert_fail@plt+0xbd60>
   1d3a4:	cmp	r0, #0
   1d3a8:	mov	r5, r0
   1d3ac:	bne	1cf00 <__assert_fail@plt+0xbc58>
   1d3b0:	ldr	fp, [sp, #24]
   1d3b4:	b	1d048 <__assert_fail@plt+0xbda0>
   1d3b8:	mov	r2, r4
   1d3bc:	mov	r1, r5
   1d3c0:	add	r0, sp, #148	; 0x94
   1d3c4:	bl	1a154 <__assert_fail@plt+0x8eac>
   1d3c8:	cmp	r0, #0
   1d3cc:	beq	1cf5c <__assert_fail@plt+0xbcb4>
   1d3d0:	b	1cf3c <__assert_fail@plt+0xbc94>
   1d3d4:	ldr	r2, [sp, #196]	; 0xc4
   1d3d8:	cmp	r3, r2
   1d3dc:	bge	1cf7c <__assert_fail@plt+0xbcd4>
   1d3e0:	add	r1, r4, #2
   1d3e4:	add	r0, sp, #148	; 0x94
   1d3e8:	bl	15cec <__assert_fail@plt+0x4a44>
   1d3ec:	cmp	r0, #0
   1d3f0:	str	r0, [sp, #124]	; 0x7c
   1d3f4:	bne	1d9e0 <__assert_fail@plt+0xc738>
   1d3f8:	ldrb	r3, [sl, #52]	; 0x34
   1d3fc:	ldr	r4, [sp, #188]	; 0xbc
   1d400:	tst	r3, #32
   1d404:	beq	1cf94 <__assert_fail@plt+0xbcec>
   1d408:	ldr	fp, [sl, #8]
   1d40c:	ldr	r6, [sp, #232]	; 0xe8
   1d410:	cmp	fp, #0
   1d414:	ble	1d714 <__assert_fail@plt+0xc46c>
   1d418:	add	r3, r6, #128	; 0x80
   1d41c:	mov	r7, #0
   1d420:	str	r3, [sp, #44]	; 0x2c
   1d424:	str	r8, [sp, #84]	; 0x54
   1d428:	b	1d548 <__assert_fail@plt+0xc2a0>
   1d42c:	tst	r0, #1
   1d430:	beq	1d53c <__assert_fail@plt+0xc294>
   1d434:	tst	r5, #8
   1d438:	bne	1d53c <__assert_fail@plt+0xc294>
   1d43c:	tst	r5, #32
   1d440:	beq	1d44c <__assert_fail@plt+0xc1a4>
   1d444:	tst	r0, #2
   1d448:	beq	1d53c <__assert_fail@plt+0xc294>
   1d44c:	tst	r5, #128	; 0x80
   1d450:	beq	1d45c <__assert_fail@plt+0xc1b4>
   1d454:	tst	r0, #8
   1d458:	beq	1d53c <__assert_fail@plt+0xc294>
   1d45c:	mov	r0, r8
   1d460:	add	r3, sp, #148	; 0x94
   1d464:	str	r4, [sp]
   1d468:	mov	r2, r9
   1d46c:	ldr	r1, [sp, #44]	; 0x2c
   1d470:	bl	1b354 <__assert_fail@plt+0xa0ac>
   1d474:	subs	r4, r0, #0
   1d478:	beq	1d534 <__assert_fail@plt+0xc28c>
   1d47c:	ldr	r2, [sp, #188]	; 0xbc
   1d480:	add	r0, sp, #148	; 0x94
   1d484:	ldr	r3, [sp, #268]	; 0x10c
   1d488:	cmp	r3, r4
   1d48c:	movlt	r3, r4
   1d490:	add	r4, r4, r2
   1d494:	mov	r1, r4
   1d498:	str	r3, [sp, #268]	; 0x10c
   1d49c:	bl	16880 <__assert_fail@plt+0x55d8>
   1d4a0:	cmp	r0, #0
   1d4a4:	str	r0, [sp, #136]	; 0x88
   1d4a8:	bne	1d6a0 <__assert_fail@plt+0xc3f8>
   1d4ac:	ldr	r3, [r6, #12]
   1d4b0:	ldr	r5, [sp, #248]	; 0xf8
   1d4b4:	ldr	r2, [r6, #24]
   1d4b8:	ldr	r3, [r3, r9, lsl #2]
   1d4bc:	ldr	r1, [r5, r4, lsl #2]
   1d4c0:	add	r3, r3, r3, lsl #1
   1d4c4:	lsl	r3, r3, #2
   1d4c8:	cmp	r1, #0
   1d4cc:	add	ip, r2, r3
   1d4d0:	beq	1d5a4 <__assert_fail@plt+0xc2fc>
   1d4d4:	mov	r2, ip
   1d4d8:	add	r0, sp, #284	; 0x11c
   1d4dc:	ldr	r1, [r1, #40]	; 0x28
   1d4e0:	bl	17708 <__assert_fail@plt+0x6460>
   1d4e4:	cmp	r0, #0
   1d4e8:	str	r0, [sp, #136]	; 0x88
   1d4ec:	bne	1d6a0 <__assert_fail@plt+0xc3f8>
   1d4f0:	sub	r1, r4, #1
   1d4f4:	add	r0, sp, #148	; 0x94
   1d4f8:	ldr	r2, [sp, #236]	; 0xec
   1d4fc:	bl	19698 <__assert_fail@plt+0x83f0>
   1d500:	ldr	r5, [sp, #248]	; 0xf8
   1d504:	mov	r3, r0
   1d508:	add	r2, sp, #284	; 0x11c
   1d50c:	mov	r1, r6
   1d510:	add	r0, sp, #136	; 0x88
   1d514:	bl	17874 <__assert_fail@plt+0x65cc>
   1d518:	str	r0, [r5, r4, lsl #2]
   1d51c:	ldr	r0, [sp, #292]	; 0x124
   1d520:	bl	24628 <__assert_fail@plt+0x13380>
   1d524:	ldr	r3, [sp, #248]	; 0xf8
   1d528:	ldr	r2, [r3, r4, lsl #2]
   1d52c:	cmp	r2, #0
   1d530:	beq	1d5fc <__assert_fail@plt+0xc354>
   1d534:	ldr	fp, [sl, #8]
   1d538:	ldr	r4, [sp, #188]	; 0xbc
   1d53c:	add	r7, r7, #1
   1d540:	cmp	r7, fp
   1d544:	bge	1d710 <__assert_fail@plt+0xc468>
   1d548:	ldr	r2, [sl, #12]
   1d54c:	ldr	r8, [r6]
   1d550:	ldr	r9, [r2, r7, lsl #2]
   1d554:	add	r2, r8, r9, lsl #3
   1d558:	ldrb	r1, [r2, #6]
   1d55c:	tst	r1, #16
   1d560:	beq	1d53c <__assert_fail@plt+0xc294>
   1d564:	ldr	r5, [r2, #4]
   1d568:	ldr	r3, [sp, #52]	; 0x34
   1d56c:	tst	r3, r5
   1d570:	beq	1d45c <__assert_fail@plt+0xc1b4>
   1d574:	ubfx	r5, r5, #8, #10
   1d578:	mov	r1, r4
   1d57c:	add	r0, sp, #148	; 0x94
   1d580:	ldr	r2, [sp, #236]	; 0xec
   1d584:	bl	19698 <__assert_fail@plt+0x83f0>
   1d588:	tst	r5, #4
   1d58c:	bne	1d42c <__assert_fail@plt+0xc184>
   1d590:	tst	r5, #8
   1d594:	beq	1d43c <__assert_fail@plt+0xc194>
   1d598:	tst	r0, #1
   1d59c:	beq	1d43c <__assert_fail@plt+0xc194>
   1d5a0:	b	1d53c <__assert_fail@plt+0xc294>
   1d5a4:	add	r2, r2, r3
   1d5a8:	sub	r1, r4, #1
   1d5ac:	ldrd	r2, [r2]
   1d5b0:	add	r0, sp, #148	; 0x94
   1d5b4:	mov	r8, r2
   1d5b8:	mov	r9, r3
   1d5bc:	ldr	r2, [sp, #236]	; 0xec
   1d5c0:	add	r3, sp, #284	; 0x11c
   1d5c4:	strd	r8, [r3]
   1d5c8:	ldr	r3, [ip, #8]
   1d5cc:	str	r3, [sp, #292]	; 0x124
   1d5d0:	bl	19698 <__assert_fail@plt+0x83f0>
   1d5d4:	mov	r3, r0
   1d5d8:	add	r2, sp, #284	; 0x11c
   1d5dc:	mov	r1, r6
   1d5e0:	add	r0, sp, #136	; 0x88
   1d5e4:	bl	17874 <__assert_fail@plt+0x65cc>
   1d5e8:	ldr	r3, [sp, #248]	; 0xf8
   1d5ec:	str	r0, [r5, r4, lsl #2]
   1d5f0:	ldr	r2, [r3, r4, lsl #2]
   1d5f4:	cmp	r2, #0
   1d5f8:	bne	1d534 <__assert_fail@plt+0xc28c>
   1d5fc:	ldr	r0, [sp, #136]	; 0x88
   1d600:	cmp	r0, #0
   1d604:	beq	1d534 <__assert_fail@plt+0xc28c>
   1d608:	ldr	r8, [sp, #84]	; 0x54
   1d60c:	b	1d6a8 <__assert_fail@plt+0xc400>
   1d610:	ldr	r5, [sl, #48]	; 0x30
   1d614:	cmp	r5, #0
   1d618:	beq	1d748 <__assert_fail@plt+0xc4a0>
   1d61c:	ldr	r1, [sp, #188]	; 0xbc
   1d620:	add	r0, sp, #148	; 0x94
   1d624:	ldr	r2, [sp, #236]	; 0xec
   1d628:	sub	r1, r1, #1
   1d62c:	bl	19698 <__assert_fail@plt+0x83f0>
   1d630:	tst	r0, #1
   1d634:	addne	r4, r4, #256	; 0x100
   1d638:	ldr	r5, [r5, r4, lsl #2]
   1d63c:	b	1cfb4 <__assert_fail@plt+0xbd0c>
   1d640:	ldr	r2, [sp, #196]	; 0xc4
   1d644:	cmp	r3, r2
   1d648:	bge	1cf88 <__assert_fail@plt+0xbce0>
   1d64c:	b	1d3e0 <__assert_fail@plt+0xc138>
   1d650:	mov	r0, sl
   1d654:	bl	24628 <__assert_fail@plt+0x13380>
   1d658:	mov	r0, r4
   1d65c:	bl	24628 <__assert_fail@plt+0x13380>
   1d660:	add	r0, sp, #148	; 0x94
   1d664:	bl	161dc <__assert_fail@plt+0x4f34>
   1d668:	ldr	r5, [sp, #116]	; 0x74
   1d66c:	ldr	r2, [sp, #76]	; 0x4c
   1d670:	ldr	r3, [sp, #96]	; 0x60
   1d674:	add	r5, r5, r3
   1d678:	ldr	r3, [sp, #64]	; 0x40
   1d67c:	str	r5, [sp, #116]	; 0x74
   1d680:	cmp	r5, r3
   1d684:	movle	r3, #0
   1d688:	movgt	r3, #1
   1d68c:	cmp	r5, r2
   1d690:	orrlt	r3, r3, #1
   1d694:	cmp	r3, #0
   1d698:	beq	1cdac <__assert_fail@plt+0xbb04>
   1d69c:	b	1d28c <__assert_fail@plt+0xbfe4>
   1d6a0:	ldr	r8, [sp, #84]	; 0x54
   1d6a4:	ldr	r3, [sp, #248]	; 0xf8
   1d6a8:	cmp	r3, #0
   1d6ac:	str	r0, [sp, #124]	; 0x7c
   1d6b0:	beq	1d770 <__assert_fail@plt+0xc4c8>
   1d6b4:	mov	r5, #0
   1d6b8:	b	1cfc0 <__assert_fail@plt+0xbd18>
   1d6bc:	mov	r3, #1
   1d6c0:	str	r3, [sp, #36]	; 0x24
   1d6c4:	ldr	r0, [sp, #36]	; 0x24
   1d6c8:	add	sp, sp, #428	; 0x1ac
   1d6cc:	ldrd	r4, [sp]
   1d6d0:	ldrd	r6, [sp, #8]
   1d6d4:	ldrd	r8, [sp, #16]
   1d6d8:	ldrd	sl, [sp, #24]
   1d6dc:	add	sp, sp, #32
   1d6e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d6e4:	ldr	r9, [sp, #68]	; 0x44
   1d6e8:	mov	r3, #12
   1d6ec:	str	r3, [sp, #36]	; 0x24
   1d6f0:	mov	r0, r4
   1d6f4:	bl	24628 <__assert_fail@plt+0x13380>
   1d6f8:	ldr	r3, [r9, #76]	; 0x4c
   1d6fc:	cmp	r3, #0
   1d700:	bne	1d9b8 <__assert_fail@plt+0xc710>
   1d704:	add	r0, sp, #148	; 0x94
   1d708:	bl	16194 <__assert_fail@plt+0x4eec>
   1d70c:	b	1d6c4 <__assert_fail@plt+0xc41c>
   1d710:	ldr	r8, [sp, #84]	; 0x54
   1d714:	mov	r3, #0
   1d718:	str	r3, [sp, #124]	; 0x7c
   1d71c:	b	1cf94 <__assert_fail@plt+0xbcec>
   1d720:	ldr	r9, [sp, #68]	; 0x44
   1d724:	ldr	r3, [r9, #76]	; 0x4c
   1d728:	cmp	r3, #0
   1d72c:	beq	1d838 <__assert_fail@plt+0xc590>
   1d730:	mov	r2, fp
   1d734:	add	r0, sp, #148	; 0x94
   1d738:	ldr	r1, [r4, fp, lsl #2]
   1d73c:	bl	1a154 <__assert_fail@plt+0x8eac>
   1d740:	str	r0, [sp, #244]	; 0xf4
   1d744:	b	1d0cc <__assert_fail@plt+0xbe24>
   1d748:	mov	r1, sl
   1d74c:	ldr	r0, [sp, #232]	; 0xe8
   1d750:	bl	18b90 <__assert_fail@plt+0x78e8>
   1d754:	cmp	r0, #0
   1d758:	bne	1cfa4 <__assert_fail@plt+0xbcfc>
   1d75c:	ldr	r3, [sp, #248]	; 0xf8
   1d760:	mov	r2, #12
   1d764:	str	r2, [sp, #124]	; 0x7c
   1d768:	cmp	r3, #0
   1d76c:	bne	1d6b4 <__assert_fail@plt+0xc40c>
   1d770:	mov	r4, #0
   1d774:	ldr	r9, [sp, #68]	; 0x44
   1d778:	b	1d6e8 <__assert_fail@plt+0xc440>
   1d77c:	ldr	r3, [sp, #104]	; 0x68
   1d780:	str	r3, [sp, #16]
   1d784:	ldrb	r3, [sl, #52]	; 0x34
   1d788:	b	1ced8 <__assert_fail@plt+0xbc30>
   1d78c:	ldr	r2, [sp, #68]	; 0x44
   1d790:	ldr	r2, [r2, #76]	; 0x4c
   1d794:	cmp	r2, #0
   1d798:	bne	1d730 <__assert_fail@plt+0xc488>
   1d79c:	ldr	r9, [sp, #68]	; 0x44
   1d7a0:	ldr	r2, [sp, #472]	; 0x1d8
   1d7a4:	cmp	r2, #0
   1d7a8:	bne	1d87c <__assert_fail@plt+0xc5d4>
   1d7ac:	str	r2, [sp, #36]	; 0x24
   1d7b0:	b	1d6f0 <__assert_fail@plt+0xc448>
   1d7b4:	ldr	r2, [sp, #72]	; 0x48
   1d7b8:	b	1cbf0 <__assert_fail@plt+0xb948>
   1d7bc:	add	r1, sp, #284	; 0x11c
   1d7c0:	add	r0, sp, #148	; 0x94
   1d7c4:	str	sl, [sp, #284]	; 0x11c
   1d7c8:	str	r6, [sp, #288]	; 0x120
   1d7cc:	str	r9, [sp, #292]	; 0x124
   1d7d0:	str	fp, [sp, #296]	; 0x128
   1d7d4:	str	r6, [sp, #300]	; 0x12c
   1d7d8:	str	r6, [sp, #304]	; 0x130
   1d7dc:	str	r6, [sp, #308]	; 0x134
   1d7e0:	bl	1c6f4 <__assert_fail@plt+0xb44c>
   1d7e4:	mov	r7, r0
   1d7e8:	ldr	r0, [sp, #308]	; 0x134
   1d7ec:	bl	24628 <__assert_fail@plt+0x13380>
   1d7f0:	cmp	r7, #0
   1d7f4:	bne	1dbb8 <__assert_fail@plt+0xc910>
   1d7f8:	ldr	r4, [sl]
   1d7fc:	cmp	r4, #0
   1d800:	beq	1d650 <__assert_fail@plt+0xc3a8>
   1d804:	mov	r8, fp
   1d808:	mov	fp, r9
   1d80c:	ldr	r9, [sp, #68]	; 0x44
   1d810:	ldr	r0, [sp, #248]	; 0xf8
   1d814:	bl	24628 <__assert_fail@plt+0x13380>
   1d818:	mov	r0, #0
   1d81c:	str	r8, [sp, #240]	; 0xf0
   1d820:	str	fp, [sp, #244]	; 0xf4
   1d824:	str	sl, [sp, #248]	; 0xf8
   1d828:	bl	24628 <__assert_fail@plt+0x13380>
   1d82c:	mov	r0, #0
   1d830:	bl	24628 <__assert_fail@plt+0x13380>
   1d834:	ldr	r4, [sp, #248]	; 0xf8
   1d838:	ldr	r3, [sp, #472]	; 0x1d8
   1d83c:	cmp	r3, #0
   1d840:	beq	1d6f0 <__assert_fail@plt+0xc448>
   1d844:	ldr	r3, [sp, #472]	; 0x1d8
   1d848:	cmp	r3, #1
   1d84c:	bls	1d874 <__assert_fail@plt+0xc5cc>
   1d850:	ldr	r2, [sp, #472]	; 0x1d8
   1d854:	ldr	r3, [sp, #476]	; 0x1dc
   1d858:	sub	r1, r3, #8
   1d85c:	add	r1, r1, r2, lsl #3
   1d860:	mvn	r2, #0
   1d864:	str	r2, [r3, #12]
   1d868:	str	r2, [r3, #8]!
   1d86c:	cmp	r1, r3
   1d870:	bne	1d864 <__assert_fail@plt+0xc5bc>
   1d874:	ldr	r3, [sp, #32]
   1d878:	ldrb	r3, [r3, #28]
   1d87c:	eor	r3, r3, #16
   1d880:	mov	r5, #0
   1d884:	ldr	r1, [sp, #240]	; 0xf0
   1d888:	ldr	r2, [sp, #472]	; 0x1d8
   1d88c:	subs	r2, r2, #1
   1d890:	movne	r2, #1
   1d894:	ands	r3, r2, r3, lsr #4
   1d898:	ldr	r2, [sp, #476]	; 0x1dc
   1d89c:	str	r5, [r2]
   1d8a0:	str	r1, [r2, #4]
   1d8a4:	bne	1dc3c <__assert_fail@plt+0xc994>
   1d8a8:	ldrb	lr, [sp, #224]	; 0xe0
   1d8ac:	mov	r1, #0
   1d8b0:	ldr	ip, [sp, #116]	; 0x74
   1d8b4:	ldr	r7, [sp, #160]	; 0xa0
   1d8b8:	ldr	r5, [sp, #176]	; 0xb0
   1d8bc:	ldr	r6, [sp, #180]	; 0xb4
   1d8c0:	ldr	r8, [sp, #472]	; 0x1d8
   1d8c4:	ldr	r2, [sp, #476]	; 0x1dc
   1d8c8:	b	1d8d0 <__assert_fail@plt+0xc628>
   1d8cc:	ldr	r3, [r2, #8]!
   1d8d0:	cmn	r3, #1
   1d8d4:	beq	1d8f4 <__assert_fail@plt+0xc64c>
   1d8d8:	cmp	lr, #0
   1d8dc:	ldr	r0, [r2, #4]
   1d8e0:	bne	1dc1c <__assert_fail@plt+0xc974>
   1d8e4:	add	r3, ip, r3
   1d8e8:	add	r0, ip, r0
   1d8ec:	str	r3, [r2]
   1d8f0:	str	r0, [r2, #4]
   1d8f4:	add	r1, r1, #1
   1d8f8:	cmp	r1, r8
   1d8fc:	bne	1d8cc <__assert_fail@plt+0xc624>
   1d900:	ldr	r3, [sp, #108]	; 0x6c
   1d904:	cmp	r3, #0
   1d908:	ble	1d940 <__assert_fail@plt+0xc698>
   1d90c:	ldr	r3, [sp, #108]	; 0x6c
   1d910:	ldr	r2, [sp, #472]	; 0x1d8
   1d914:	ldr	r0, [sp, #476]	; 0x1dc
   1d918:	add	r1, r3, r2
   1d91c:	ldr	r3, [sp, #476]	; 0x1dc
   1d920:	add	r1, r0, r1, lsl #3
   1d924:	add	r3, r3, r2, lsl #3
   1d928:	mvn	r2, #0
   1d92c:	add	r3, r3, #8
   1d930:	str	r2, [r3, #-8]
   1d934:	str	r2, [r3, #-4]
   1d938:	cmp	r1, r3
   1d93c:	bne	1d92c <__assert_fail@plt+0xc684>
   1d940:	ldr	r1, [r9, #132]	; 0x84
   1d944:	cmp	r1, #0
   1d948:	beq	1d6f0 <__assert_fail@plt+0xc448>
   1d94c:	ldr	r3, [sp, #472]	; 0x1d8
   1d950:	ldr	r2, [sp, #476]	; 0x1dc
   1d954:	sub	ip, r3, #1
   1d958:	mov	r3, #0
   1d95c:	add	r5, r2, #8
   1d960:	add	lr, r2, #12
   1d964:	b	1d99c <__assert_fail@plt+0xc6f4>
   1d968:	ldr	r2, [r1, r3, lsl #2]
   1d96c:	cmp	r2, r3
   1d970:	add	r0, r2, #1
   1d974:	beq	1d998 <__assert_fail@plt+0xc6f0>
   1d978:	ldr	r2, [sp, #476]	; 0x1dc
   1d97c:	ldr	r2, [r2, r0, lsl #3]
   1d980:	ldr	r0, [sp, #476]	; 0x1dc
   1d984:	str	r2, [r5, r3, lsl #3]
   1d988:	ldr	r2, [r1, r3, lsl #2]
   1d98c:	add	r2, r0, r2, lsl #3
   1d990:	ldr	r2, [r2, #12]
   1d994:	str	r2, [lr, r3, lsl #3]
   1d998:	add	r3, r3, #1
   1d99c:	cmp	r3, ip
   1d9a0:	bne	1d968 <__assert_fail@plt+0xc6c0>
   1d9a4:	b	1d6f0 <__assert_fail@plt+0xc448>
   1d9a8:	ldrb	r3, [r9, #88]	; 0x58
   1d9ac:	tst	r3, #2
   1d9b0:	bne	1cc8c <__assert_fail@plt+0xb9e4>
   1d9b4:	b	1ccb4 <__assert_fail@plt+0xba0c>
   1d9b8:	add	r0, sp, #148	; 0x94
   1d9bc:	bl	161dc <__assert_fail@plt+0x4f34>
   1d9c0:	ldr	r0, [sp, #280]	; 0x118
   1d9c4:	bl	24628 <__assert_fail@plt+0x13380>
   1d9c8:	ldr	r0, [sp, #264]	; 0x108
   1d9cc:	bl	24628 <__assert_fail@plt+0x13380>
   1d9d0:	b	1d704 <__assert_fail@plt+0xc45c>
   1d9d4:	ldr	sl, [r4, #40]	; 0x28
   1d9d8:	cmp	sl, #0
   1d9dc:	bne	1ceac <__assert_fail@plt+0xbc04>
   1d9e0:	mov	r3, #12
   1d9e4:	ldr	r9, [sp, #68]	; 0x44
   1d9e8:	str	r3, [sp, #36]	; 0x24
   1d9ec:	ldr	r4, [sp, #248]	; 0xf8
   1d9f0:	b	1d6f0 <__assert_fail@plt+0xc448>
   1d9f4:	mov	r0, sl
   1d9f8:	bl	24628 <__assert_fail@plt+0x13380>
   1d9fc:	mov	r0, r6
   1da00:	bl	24628 <__assert_fail@plt+0x13380>
   1da04:	add	r0, sp, #148	; 0x94
   1da08:	bl	161dc <__assert_fail@plt+0x4f34>
   1da0c:	ldr	r5, [sp, #116]	; 0x74
   1da10:	b	1d66c <__assert_fail@plt+0xc3c4>
   1da14:	mov	r3, #12
   1da18:	ldr	r4, [sp, #248]	; 0xf8
   1da1c:	str	r3, [sp, #36]	; 0x24
   1da20:	b	1d6f0 <__assert_fail@plt+0xc448>
   1da24:	mov	r3, #8
   1da28:	b	1cd50 <__assert_fail@plt+0xbaa8>
   1da2c:	str	r1, [sp, #36]	; 0x24
   1da30:	str	r3, [sp, #116]	; 0x74
   1da34:	ldr	r9, [sp, #68]	; 0x44
   1da38:	ldr	r4, [sp, #248]	; 0xf8
   1da3c:	b	1d6f0 <__assert_fail@plt+0xc448>
   1da40:	ldr	r4, [sp, #48]	; 0x30
   1da44:	ldr	r1, [sp, #172]	; 0xac
   1da48:	sub	r2, r5, r1
   1da4c:	ldr	r3, [sp, #180]	; 0xb4
   1da50:	cmp	r3, r2
   1da54:	bhi	1e4a4 <__assert_fail@plt+0xd1fc>
   1da58:	mov	r1, r5
   1da5c:	add	r0, sp, #148	; 0x94
   1da60:	ldr	r2, [sp, #480]	; 0x1e0
   1da64:	bl	198e8 <__assert_fail@plt+0x8640>
   1da68:	subs	r3, r0, #0
   1da6c:	str	r3, [sp, #36]	; 0x24
   1da70:	beq	1e49c <__assert_fail@plt+0xd1f4>
   1da74:	ldr	r9, [sp, #68]	; 0x44
   1da78:	ldr	r4, [sp, #248]	; 0xf8
   1da7c:	b	1d6f0 <__assert_fail@plt+0xc448>
   1da80:	ldrsb	r3, [sl, #52]	; 0x34
   1da84:	cmp	r3, #0
   1da88:	blt	1dafc <__assert_fail@plt+0xc854>
   1da8c:	ldr	fp, [sp, #12]
   1da90:	ldr	r3, [sp, #20]
   1da94:	cmp	r3, #0
   1da98:	beq	1d064 <__assert_fail@plt+0xbdbc>
   1da9c:	ldr	r3, [sp, #20]
   1daa0:	str	r3, [sp, #28]
   1daa4:	b	1ceec <__assert_fail@plt+0xbc44>
   1daa8:	mov	r5, r0
   1daac:	b	1cf00 <__assert_fail@plt+0xbc58>
   1dab0:	mov	fp, r4
   1dab4:	b	1d064 <__assert_fail@plt+0xbdbc>
   1dab8:	ldr	sl, [r4, #44]	; 0x2c
   1dabc:	b	1d9d8 <__assert_fail@plt+0xc730>
   1dac0:	ldr	r9, [sp, #68]	; 0x44
   1dac4:	bl	24628 <__assert_fail@plt+0x13380>
   1dac8:	mov	r3, #12
   1dacc:	mov	r0, sl
   1dad0:	str	r3, [sp, #36]	; 0x24
   1dad4:	bl	24628 <__assert_fail@plt+0x13380>
   1dad8:	ldr	r4, [sp, #248]	; 0xf8
   1dadc:	b	1d6f0 <__assert_fail@plt+0xc448>
   1dae0:	mov	r3, r0
   1dae4:	mov	r1, r4
   1dae8:	ldr	r2, [sl, #40]	; 0x28
   1daec:	add	r0, sp, #124	; 0x7c
   1daf0:	bl	17874 <__assert_fail@plt+0x65cc>
   1daf4:	mov	sl, r0
   1daf8:	b	1d9d8 <__assert_fail@plt+0xc730>
   1dafc:	mov	r1, sl
   1db00:	add	r0, sp, #148	; 0x94
   1db04:	ldr	r2, [sp, #12]
   1db08:	bl	1a154 <__assert_fail@plt+0x8eac>
   1db0c:	subs	r3, r0, #0
   1db10:	str	r3, [sp, #28]
   1db14:	bne	1da8c <__assert_fail@plt+0xc7e4>
   1db18:	mvn	fp, #0
   1db1c:	b	1ceec <__assert_fail@plt+0xbc44>
   1db20:	add	r4, sl, #8
   1db24:	add	r5, sl, #12
   1db28:	mov	r1, r4
   1db2c:	mov	r2, r5
   1db30:	mov	r3, #0
   1db34:	add	r0, sp, #148	; 0x94
   1db38:	bl	1a238 <__assert_fail@plt+0x8f90>
   1db3c:	cmp	r0, #0
   1db40:	mov	fp, r0
   1db44:	str	r0, [sp, #124]	; 0x7c
   1db48:	bne	1d064 <__assert_fail@plt+0xbdbc>
   1db4c:	ldrb	r3, [sl, #52]	; 0x34
   1db50:	tst	r3, #64	; 0x40
   1db54:	bne	1dbf4 <__assert_fail@plt+0xc94c>
   1db58:	mov	r2, #0
   1db5c:	str	r2, [sp, #16]
   1db60:	b	1ced8 <__assert_fail@plt+0xbc30>
   1db64:	ldr	sl, [r4, #48]	; 0x30
   1db68:	b	1d9d8 <__assert_fail@plt+0xc730>
   1db6c:	mov	r7, r3
   1db70:	mov	r0, sl
   1db74:	bl	24628 <__assert_fail@plt+0x13380>
   1db78:	ldr	r0, [sp, #24]
   1db7c:	bl	24628 <__assert_fail@plt+0x13380>
   1db80:	cmp	r7, #1
   1db84:	beq	1d660 <__assert_fail@plt+0xc3b8>
   1db88:	str	r7, [sp, #36]	; 0x24
   1db8c:	ldr	r9, [sp, #68]	; 0x44
   1db90:	ldr	r4, [sp, #248]	; 0xf8
   1db94:	b	1d6f0 <__assert_fail@plt+0xc448>
   1db98:	mov	r3, #12
   1db9c:	mov	r0, sl
   1dba0:	ldr	r9, [sp, #68]	; 0x44
   1dba4:	str	r3, [sp, #36]	; 0x24
   1dba8:	bl	24628 <__assert_fail@plt+0x13380>
   1dbac:	mov	r0, r6
   1dbb0:	bl	24628 <__assert_fail@plt+0x13380>
   1dbb4:	b	1d298 <__assert_fail@plt+0xbff0>
   1dbb8:	str	r6, [sp, #24]
   1dbbc:	b	1db70 <__assert_fail@plt+0xc8c8>
   1dbc0:	mov	r3, r5
   1dbc4:	mov	r2, r6
   1dbc8:	ldr	r0, [sp, #12]
   1dbcc:	mov	r1, sl
   1dbd0:	bl	17d80 <__assert_fail@plt+0x6ad8>
   1dbd4:	mov	r7, r0
   1dbd8:	mov	r0, r6
   1dbdc:	bl	24628 <__assert_fail@plt+0x13380>
   1dbe0:	cmp	r7, #0
   1dbe4:	beq	1d804 <__assert_fail@plt+0xc55c>
   1dbe8:	mov	r3, #0
   1dbec:	str	r3, [sp, #24]
   1dbf0:	b	1db70 <__assert_fail@plt+0xc8c8>
   1dbf4:	mov	r2, r5
   1dbf8:	mov	r1, r4
   1dbfc:	add	r0, sp, #148	; 0x94
   1dc00:	bl	1bdb0 <__assert_fail@plt+0xab08>
   1dc04:	cmp	r0, #0
   1dc08:	mov	fp, r0
   1dc0c:	str	r0, [sp, #124]	; 0x7c
   1dc10:	bne	1d064 <__assert_fail@plt+0xbdbc>
   1dc14:	ldrb	r3, [sl, #52]	; 0x34
   1dc18:	b	1db58 <__assert_fail@plt+0xc8b0>
   1dc1c:	cmp	r5, r3
   1dc20:	ldrne	r3, [r7, r3, lsl #2]
   1dc24:	moveq	r3, r6
   1dc28:	cmp	r5, r0
   1dc2c:	moveq	r0, r6
   1dc30:	str	r3, [r2]
   1dc34:	ldrne	r0, [r7, r0, lsl #2]
   1dc38:	b	1d8e4 <__assert_fail@plt+0xc63c>
   1dc3c:	ldr	r2, [sp, #32]
   1dc40:	ldrb	r3, [r9, #88]	; 0x58
   1dc44:	ldr	r2, [r2]
   1dc48:	tst	r3, #1
   1dc4c:	str	r2, [sp, #16]
   1dc50:	beq	1e2b0 <__assert_fail@plt+0xd008>
   1dc54:	ldr	r3, [r9, #76]	; 0x4c
   1dc58:	cmp	r3, r5
   1dc5c:	ble	1e2b0 <__assert_fail@plt+0xd008>
   1dc60:	add	r1, sp, #296	; 0x128
   1dc64:	mov	r2, #2
   1dc68:	mov	r3, #16
   1dc6c:	mov	r0, #48	; 0x30
   1dc70:	str	r1, [sp, #20]
   1dc74:	str	r5, [sp, #136]	; 0x88
   1dc78:	str	r2, [sp, #140]	; 0x8c
   1dc7c:	str	r5, [sp, #144]	; 0x90
   1dc80:	str	r5, [sp, #284]	; 0x11c
   1dc84:	str	r3, [sp, #288]	; 0x120
   1dc88:	str	r1, [sp, #292]	; 0x124
   1dc8c:	bl	24440 <__assert_fail@plt+0x13198>
   1dc90:	cmp	r0, #0
   1dc94:	str	r0, [sp, #144]	; 0x90
   1dc98:	beq	1da14 <__assert_fail@plt+0xc76c>
   1dc9c:	ldr	r1, [sp, #16]
   1dca0:	add	r2, sp, #124	; 0x7c
   1dca4:	ldr	r3, [sp, #284]	; 0x11c
   1dca8:	str	r2, [sp, #28]
   1dcac:	ldr	sl, [r1, #72]	; 0x48
   1dcb0:	str	r5, [sp, #124]	; 0x7c
   1dcb4:	ldr	r1, [sp, #472]	; 0x1d8
   1dcb8:	str	r5, [sp, #128]	; 0x80
   1dcbc:	str	r5, [sp, #132]	; 0x84
   1dcc0:	cmp	r3, r1
   1dcc4:	add	r3, sp, #136	; 0x88
   1dcc8:	str	r3, [sp, #12]
   1dccc:	bcc	1e2fc <__assert_fail@plt+0xd054>
   1dcd0:	ldr	r3, [sp, #472]	; 0x1d8
   1dcd4:	str	r3, [sp, #284]	; 0x11c
   1dcd8:	ldr	r0, [sp, #292]	; 0x124
   1dcdc:	ldr	r3, [sp, #472]	; 0x1d8
   1dce0:	ldr	r1, [sp, #476]	; 0x1dc
   1dce4:	str	r0, [sp, #32]
   1dce8:	lsl	r2, r3, #3
   1dcec:	lsl	r3, r3, #4
   1dcf0:	mov	r4, r1
   1dcf4:	str	r2, [sp, #40]	; 0x28
   1dcf8:	str	r3, [sp, #48]	; 0x30
   1dcfc:	bl	11038 <memcpy@plt>
   1dd00:	ldr	r5, [r4], #4
   1dd04:	str	r9, [sp, #24]
   1dd08:	ldr	fp, [sp, #472]	; 0x1d8
   1dd0c:	str	r4, [sp, #44]	; 0x2c
   1dd10:	str	r5, [sp, #120]	; 0x78
   1dd14:	ldr	r3, [sp, #476]	; 0x1dc
   1dd18:	ldr	r3, [r3, #4]
   1dd1c:	cmp	r5, r3
   1dd20:	bgt	1e3f0 <__assert_fail@plt+0xd148>
   1dd24:	ldr	r2, [sp, #16]
   1dd28:	lsl	r4, sl, #3
   1dd2c:	mov	r6, sl
   1dd30:	ldr	r1, [r2]
   1dd34:	add	r0, r1, r4
   1dd38:	ldrb	r2, [r0, #4]
   1dd3c:	cmp	r2, #8
   1dd40:	beq	1df54 <__assert_fail@plt+0xccac>
   1dd44:	cmp	r2, #9
   1dd48:	beq	1dfb8 <__assert_fail@plt+0xcd10>
   1dd4c:	cmp	r5, r3
   1dd50:	beq	1deb0 <__assert_fail@plt+0xcc08>
   1dd54:	ldr	r3, [sp, #12]
   1dd58:	cmp	r3, #0
   1dd5c:	beq	1dd78 <__assert_fail@plt+0xcad0>
   1dd60:	mov	r2, sl
   1dd64:	add	r1, sp, #132	; 0x84
   1dd68:	ldr	r0, [sp, #128]	; 0x80
   1dd6c:	bl	16a58 <__assert_fail@plt+0x57b0>
   1dd70:	cmp	r0, #0
   1dd74:	bne	1dec8 <__assert_fail@plt+0xcc20>
   1dd78:	ldr	r5, [sp, #232]	; 0xe8
   1dd7c:	ldr	r0, [r5]
   1dd80:	add	r1, r0, r4
   1dd84:	ldrb	r3, [r1, #4]
   1dd88:	tst	r3, #8
   1dd8c:	beq	1de28 <__assert_fail@plt+0xcb80>
   1dd90:	ldr	r5, [r5, #20]
   1dd94:	add	r4, sl, sl, lsl #1
   1dd98:	add	r1, sp, #132	; 0x84
   1dd9c:	mov	r2, sl
   1dda0:	ldr	lr, [sp, #120]	; 0x78
   1dda4:	ldr	r0, [sp, #128]	; 0x80
   1dda8:	add	r4, r5, r4, lsl #2
   1ddac:	ldr	ip, [sp, #248]	; 0xf8
   1ddb0:	ldr	r5, [ip, lr, lsl #2]
   1ddb4:	bl	16a58 <__assert_fail@plt+0x57b0>
   1ddb8:	cmp	r0, #0
   1ddbc:	beq	1e15c <__assert_fail@plt+0xceb4>
   1ddc0:	ldr	r6, [r4, #4]
   1ddc4:	cmp	r6, #0
   1ddc8:	ble	1e224 <__assert_fail@plt+0xcf7c>
   1ddcc:	ldr	r3, [r4, #8]
   1ddd0:	add	r8, r5, #12
   1ddd4:	mvn	sl, #0
   1ddd8:	mov	r4, #0
   1dddc:	ldr	r7, [r5, #8]
   1dde0:	sub	r9, r3, #4
   1dde4:	ldr	r5, [r9, #4]!
   1dde8:	mov	r1, r8
   1ddec:	mov	r0, r7
   1ddf0:	add	r4, r4, #1
   1ddf4:	mov	r2, r5
   1ddf8:	bl	16a58 <__assert_fail@plt+0x57b0>
   1ddfc:	cmp	r0, #0
   1de00:	beq	1de10 <__assert_fail@plt+0xcb68>
   1de04:	cmn	sl, #1
   1de08:	bne	1e010 <__assert_fail@plt+0xcd68>
   1de0c:	mov	sl, r5
   1de10:	cmp	r4, r6
   1de14:	bne	1dde4 <__assert_fail@plt+0xcb3c>
   1de18:	cmp	sl, #0
   1de1c:	blt	1e21c <__assert_fail@plt+0xcf74>
   1de20:	ldr	r5, [sp, #120]	; 0x78
   1de24:	b	1dd14 <__assert_fail@plt+0xca6c>
   1de28:	ldrb	r2, [r1, #6]
   1de2c:	tst	r2, #16
   1de30:	bne	1e12c <__assert_fail@plt+0xce84>
   1de34:	cmp	r3, #4
   1de38:	beq	1e190 <__assert_fail@plt+0xcee8>
   1de3c:	ldr	r7, [sp, #120]	; 0x78
   1de40:	mov	r2, r7
   1de44:	add	r0, sp, #148	; 0x94
   1de48:	bl	197b0 <__assert_fail@plt+0x8508>
   1de4c:	cmp	r0, #0
   1de50:	beq	1e224 <__assert_fail@plt+0xcf7c>
   1de54:	ldr	r2, [r5, #12]
   1de58:	add	r3, r7, #1
   1de5c:	ldr	sl, [r2, r6, lsl #2]
   1de60:	str	r3, [sp, #120]	; 0x78
   1de64:	ldr	r2, [sp, #12]
   1de68:	cmp	r2, #0
   1de6c:	beq	1dea4 <__assert_fail@plt+0xcbfc>
   1de70:	ldr	r2, [sp, #240]	; 0xf0
   1de74:	cmp	r3, r2
   1de78:	bgt	1e224 <__assert_fail@plt+0xcf7c>
   1de7c:	ldr	r2, [sp, #248]	; 0xf8
   1de80:	ldr	r3, [r2, r3, lsl #2]
   1de84:	cmp	r3, #0
   1de88:	beq	1e224 <__assert_fail@plt+0xcf7c>
   1de8c:	mov	r2, sl
   1de90:	add	r1, r3, #12
   1de94:	ldr	r0, [r3, #8]
   1de98:	bl	16a58 <__assert_fail@plt+0x57b0>
   1de9c:	cmp	r0, #0
   1dea0:	beq	1e224 <__assert_fail@plt+0xcf7c>
   1dea4:	mov	r3, #0
   1dea8:	str	r3, [sp, #128]	; 0x80
   1deac:	b	1de18 <__assert_fail@plt+0xcb70>
   1deb0:	ldr	r3, [sp, #244]	; 0xf4
   1deb4:	cmp	sl, r3
   1deb8:	bne	1dd54 <__assert_fail@plt+0xcaac>
   1debc:	ldr	r3, [sp, #12]
   1dec0:	cmp	r3, #0
   1dec4:	beq	1e45c <__assert_fail@plt+0xd1b4>
   1dec8:	ldr	r1, [sp, #44]	; 0x2c
   1decc:	mov	r3, #0
   1ded0:	ldr	r2, [sp, #476]	; 0x1dc
   1ded4:	ldr	r2, [r2, r3, lsl #3]
   1ded8:	cmp	r2, #0
   1dedc:	blt	1deec <__assert_fail@plt+0xcc44>
   1dee0:	ldr	r2, [r1, r3, lsl #3]
   1dee4:	cmn	r2, #1
   1dee8:	beq	1df84 <__assert_fail@plt+0xccdc>
   1deec:	add	r3, r3, #1
   1def0:	cmp	fp, r3
   1def4:	bne	1ded0 <__assert_fail@plt+0xcc28>
   1def8:	ldr	r9, [sp, #24]
   1defc:	ldr	r0, [sp, #132]	; 0x84
   1df00:	bl	24628 <__assert_fail@plt+0x13380>
   1df04:	ldr	r3, [sp, #20]
   1df08:	ldr	r0, [sp, #292]	; 0x124
   1df0c:	cmp	r0, r3
   1df10:	beq	1e480 <__assert_fail@plt+0xd1d8>
   1df14:	bl	24628 <__assert_fail@plt+0x13380>
   1df18:	ldr	r1, [sp, #20]
   1df1c:	mov	r2, #0
   1df20:	mov	r3, #16
   1df24:	str	r2, [sp, #284]	; 0x11c
   1df28:	str	r3, [sp, #288]	; 0x120
   1df2c:	str	r1, [sp, #292]	; 0x124
   1df30:	ldr	r1, [sp, #12]
   1df34:	cmp	r1, r2
   1df38:	beq	1e438 <__assert_fail@plt+0xd190>
   1df3c:	ldr	r0, [sp, #12]
   1df40:	bl	182ac <__assert_fail@plt+0x7004>
   1df44:	ldr	r4, [sp, #248]	; 0xf8
   1df48:	ldr	r3, [sp, #476]	; 0x1dc
   1df4c:	ldr	r3, [r3]
   1df50:	b	1d8a8 <__assert_fail@plt+0xc600>
   1df54:	ldr	r2, [r1, sl, lsl #3]
   1df58:	add	r2, r2, #1
   1df5c:	cmp	fp, r2
   1df60:	ble	1dd4c <__assert_fail@plt+0xcaa4>
   1df64:	ldr	r3, [sp, #476]	; 0x1dc
   1df68:	ldr	r1, [sp, #476]	; 0x1dc
   1df6c:	add	r3, r3, r2, lsl #3
   1df70:	str	r5, [r1, r2, lsl #3]
   1df74:	mvn	r2, #0
   1df78:	str	r2, [r3, #4]
   1df7c:	ldr	r3, [r1, #4]
   1df80:	b	1dd4c <__assert_fail@plt+0xcaa4>
   1df84:	mov	r2, fp
   1df88:	ldr	r0, [sp, #12]
   1df8c:	ldr	ip, [sp, #28]
   1df90:	ldr	r1, [sp, #32]
   1df94:	ldr	r3, [sp, #476]	; 0x1dc
   1df98:	stm	sp, {r1, ip}
   1df9c:	add	r1, sp, #120	; 0x78
   1dfa0:	bl	16930 <__assert_fail@plt+0x5688>
   1dfa4:	subs	sl, r0, #0
   1dfa8:	blt	1def8 <__assert_fail@plt+0xcc50>
   1dfac:	mov	r6, sl
   1dfb0:	lsl	r4, sl, #3
   1dfb4:	b	1dd78 <__assert_fail@plt+0xcad0>
   1dfb8:	ldr	r2, [r0]
   1dfbc:	add	r2, r2, #1
   1dfc0:	cmp	fp, r2
   1dfc4:	ble	1dd4c <__assert_fail@plt+0xcaa4>
   1dfc8:	ldr	r3, [sp, #476]	; 0x1dc
   1dfcc:	ldr	r1, [r3, r2, lsl #3]
   1dfd0:	add	r3, r3, r2, lsl #3
   1dfd4:	cmp	r5, r1
   1dfd8:	bgt	1e3a0 <__assert_fail@plt+0xd0f8>
   1dfdc:	ldrb	r1, [r0, #6]
   1dfe0:	tst	r1, #8
   1dfe4:	beq	1e31c <__assert_fail@plt+0xd074>
   1dfe8:	ldr	r1, [sp, #32]
   1dfec:	ldr	r2, [r1, r2, lsl #3]
   1dff0:	cmn	r2, #1
   1dff4:	beq	1e31c <__assert_fail@plt+0xd074>
   1dff8:	ldr	r2, [sp, #40]	; 0x28
   1dffc:	ldr	r0, [sp, #476]	; 0x1dc
   1e000:	bl	11038 <memcpy@plt>
   1e004:	ldr	r3, [sp, #476]	; 0x1dc
   1e008:	ldr	r3, [r3, #4]
   1e00c:	b	1dd4c <__assert_fail@plt+0xcaa4>
   1e010:	add	r1, sp, #132	; 0x84
   1e014:	mov	r2, sl
   1e018:	ldr	r0, [sp, #128]	; 0x80
   1e01c:	bl	16a58 <__assert_fail@plt+0x57b0>
   1e020:	cmp	r0, #0
   1e024:	bne	1e2a8 <__assert_fail@plt+0xd000>
   1e028:	ldr	r0, [sp, #12]
   1e02c:	cmp	r0, #0
   1e030:	beq	1de18 <__assert_fail@plt+0xcb70>
   1e034:	ldr	r4, [r0]
   1e038:	ldmib	r0, {r1, r3}
   1e03c:	ldr	r6, [sp, #120]	; 0x78
   1e040:	add	r2, r4, #1
   1e044:	cmp	r2, r1
   1e048:	str	r2, [r0]
   1e04c:	beq	1e3c4 <__assert_fail@plt+0xd11c>
   1e050:	add	r2, r4, r4, lsl #1
   1e054:	ldr	r0, [sp, #48]	; 0x30
   1e058:	lsl	r4, r2, #3
   1e05c:	str	r6, [r3, r2, lsl #3]
   1e060:	add	r6, r3, r4
   1e064:	str	r5, [r6, #4]
   1e068:	bl	24440 <__assert_fail@plt+0x13198>
   1e06c:	ldr	r5, [sp, #12]
   1e070:	ldr	r3, [r5, #8]
   1e074:	str	r0, [r6, #8]
   1e078:	add	r3, r3, r4
   1e07c:	ldr	r0, [r3, #8]
   1e080:	cmp	r0, #0
   1e084:	beq	1e0d0 <__assert_fail@plt+0xce28>
   1e088:	ldr	r6, [sp, #40]	; 0x28
   1e08c:	ldr	r1, [sp, #476]	; 0x1dc
   1e090:	mov	r2, r6
   1e094:	bl	11038 <memcpy@plt>
   1e098:	ldr	r3, [r5, #8]
   1e09c:	mov	r2, r6
   1e0a0:	ldr	r1, [sp, #32]
   1e0a4:	add	r3, r3, r4
   1e0a8:	ldr	r0, [r3, #8]
   1e0ac:	add	r0, r0, r6
   1e0b0:	bl	11038 <memcpy@plt>
   1e0b4:	ldr	r0, [r5, #8]
   1e0b8:	ldr	r1, [sp, #28]
   1e0bc:	add	r0, r0, r4
   1e0c0:	add	r0, r0, #12
   1e0c4:	bl	17680 <__assert_fail@plt+0x63d8>
   1e0c8:	cmp	r0, #0
   1e0cc:	beq	1de18 <__assert_fail@plt+0xcb70>
   1e0d0:	ldr	r9, [sp, #24]
   1e0d4:	ldr	r0, [sp, #132]	; 0x84
   1e0d8:	bl	24628 <__assert_fail@plt+0x13380>
   1e0dc:	ldr	r3, [sp, #20]
   1e0e0:	ldr	r0, [sp, #292]	; 0x124
   1e0e4:	cmp	r0, r3
   1e0e8:	beq	1e448 <__assert_fail@plt+0xd1a0>
   1e0ec:	bl	24628 <__assert_fail@plt+0x13380>
   1e0f0:	ldr	r1, [sp, #20]
   1e0f4:	mov	r2, #0
   1e0f8:	mov	r3, #16
   1e0fc:	str	r2, [sp, #284]	; 0x11c
   1e100:	str	r3, [sp, #288]	; 0x120
   1e104:	str	r1, [sp, #292]	; 0x124
   1e108:	ldr	r1, [sp, #12]
   1e10c:	cmp	r1, r2
   1e110:	beq	1da14 <__assert_fail@plt+0xc76c>
   1e114:	mov	r3, #12
   1e118:	ldr	r0, [sp, #12]
   1e11c:	str	r3, [sp, #36]	; 0x24
   1e120:	bl	182ac <__assert_fail@plt+0x7004>
   1e124:	ldr	r4, [sp, #248]	; 0xf8
   1e128:	b	1d6f0 <__assert_fail@plt+0xc448>
   1e12c:	ldr	ip, [sp, #120]	; 0x78
   1e130:	add	r3, sp, #148	; 0x94
   1e134:	mov	r2, sl
   1e138:	add	r1, r5, #128	; 0x80
   1e13c:	str	ip, [sp]
   1e140:	bl	1b354 <__assert_fail@plt+0xa0ac>
   1e144:	subs	r7, r0, #0
   1e148:	bne	1e398 <__assert_fail@plt+0xd0f0>
   1e14c:	ldr	r1, [r5]
   1e150:	ldr	r7, [sp, #120]	; 0x78
   1e154:	add	r1, r1, r4
   1e158:	b	1de40 <__assert_fail@plt+0xcb98>
   1e15c:	mov	r1, sl
   1e160:	ldr	r0, [sp, #28]
   1e164:	bl	16484 <__assert_fail@plt+0x51dc>
   1e168:	cmp	r0, #0
   1e16c:	bne	1ddc0 <__assert_fail@plt+0xcb18>
   1e170:	ldr	r9, [sp, #24]
   1e174:	ldr	r0, [sp, #132]	; 0x84
   1e178:	bl	24628 <__assert_fail@plt+0x13380>
   1e17c:	ldr	r3, [sp, #20]
   1e180:	ldr	r0, [sp, #292]	; 0x124
   1e184:	cmp	r0, r3
   1e188:	bne	1e0ec <__assert_fail@plt+0xce44>
   1e18c:	b	1e0f0 <__assert_fail@plt+0xce48>
   1e190:	ldr	r3, [r1]
   1e194:	add	r3, r3, #1
   1e198:	cmp	fp, r3
   1e19c:	ble	1e32c <__assert_fail@plt+0xd084>
   1e1a0:	ldr	r2, [sp, #476]	; 0x1dc
   1e1a4:	ldr	r1, [sp, #476]	; 0x1dc
   1e1a8:	add	r2, r2, r3, lsl #3
   1e1ac:	ldr	r0, [r1, r3, lsl #3]
   1e1b0:	ldr	r3, [sp, #12]
   1e1b4:	cmp	r3, #0
   1e1b8:	ldr	r3, [r2, #4]
   1e1bc:	sub	r7, r3, r0
   1e1c0:	beq	1e390 <__assert_fail@plt+0xd0e8>
   1e1c4:	cmn	r0, #1
   1e1c8:	beq	1e224 <__assert_fail@plt+0xcf7c>
   1e1cc:	cmn	r3, #1
   1e1d0:	beq	1e224 <__assert_fail@plt+0xcf7c>
   1e1d4:	cmp	r7, #0
   1e1d8:	beq	1e338 <__assert_fail@plt+0xd090>
   1e1dc:	ldr	r4, [sp, #120]	; 0x78
   1e1e0:	ldr	r1, [sp, #152]	; 0x98
   1e1e4:	ldr	r3, [sp, #176]	; 0xb0
   1e1e8:	sub	r3, r3, r4
   1e1ec:	cmp	r7, r3
   1e1f0:	bgt	1e224 <__assert_fail@plt+0xcf7c>
   1e1f4:	add	r0, r1, r0
   1e1f8:	mov	r2, r7
   1e1fc:	add	r1, r1, r4
   1e200:	bl	11074 <memcmp@plt>
   1e204:	cmp	r0, #0
   1e208:	bne	1e224 <__assert_fail@plt+0xcf7c>
   1e20c:	ldr	r2, [r5, #12]
   1e210:	add	r3, r4, r7
   1e214:	ldr	sl, [r2, sl, lsl #2]
   1e218:	b	1de60 <__assert_fail@plt+0xcbb8>
   1e21c:	cmn	sl, #2
   1e220:	beq	1e170 <__assert_fail@plt+0xcec8>
   1e224:	mov	r2, fp
   1e228:	ldr	r0, [sp, #12]
   1e22c:	ldr	ip, [sp, #28]
   1e230:	ldr	r1, [sp, #32]
   1e234:	ldr	r3, [sp, #476]	; 0x1dc
   1e238:	stm	sp, {r1, ip}
   1e23c:	add	r1, sp, #120	; 0x78
   1e240:	bl	16930 <__assert_fail@plt+0x5688>
   1e244:	subs	sl, r0, #0
   1e248:	bge	1de20 <__assert_fail@plt+0xcb78>
   1e24c:	ldr	r9, [sp, #24]
   1e250:	ldr	r0, [sp, #132]	; 0x84
   1e254:	bl	24628 <__assert_fail@plt+0x13380>
   1e258:	ldr	r3, [sp, #20]
   1e25c:	ldr	r0, [sp, #292]	; 0x124
   1e260:	cmp	r0, r3
   1e264:	beq	1e26c <__assert_fail@plt+0xcfc4>
   1e268:	bl	24628 <__assert_fail@plt+0x13380>
   1e26c:	ldr	r1, [sp, #20]
   1e270:	mov	r2, #0
   1e274:	mov	r3, #16
   1e278:	str	r2, [sp, #284]	; 0x11c
   1e27c:	str	r3, [sp, #288]	; 0x120
   1e280:	str	r1, [sp, #292]	; 0x124
   1e284:	ldr	r1, [sp, #12]
   1e288:	cmp	r1, r2
   1e28c:	beq	1d290 <__assert_fail@plt+0xbfe8>
   1e290:	mov	r3, #1
   1e294:	ldr	r0, [sp, #12]
   1e298:	str	r3, [sp, #36]	; 0x24
   1e29c:	bl	182ac <__assert_fail@plt+0x7004>
   1e2a0:	ldr	r4, [sp, #248]	; 0xf8
   1e2a4:	b	1d6f0 <__assert_fail@plt+0xc448>
   1e2a8:	mov	sl, r5
   1e2ac:	b	1de18 <__assert_fail@plt+0xcb70>
   1e2b0:	ldr	r2, [sp, #16]
   1e2b4:	mov	r3, #0
   1e2b8:	add	ip, sp, #296	; 0x128
   1e2bc:	add	r0, sp, #124	; 0x7c
   1e2c0:	mov	r1, #2
   1e2c4:	str	r3, [sp, #12]
   1e2c8:	str	ip, [sp, #20]
   1e2cc:	str	r0, [sp, #28]
   1e2d0:	ldr	sl, [r2, #72]	; 0x48
   1e2d4:	mov	r2, #16
   1e2d8:	str	r3, [sp, #124]	; 0x7c
   1e2dc:	str	r3, [sp, #128]	; 0x80
   1e2e0:	str	r3, [sp, #132]	; 0x84
   1e2e4:	str	r3, [sp, #136]	; 0x88
   1e2e8:	str	r1, [sp, #140]	; 0x8c
   1e2ec:	str	r3, [sp, #144]	; 0x90
   1e2f0:	str	r3, [sp, #284]	; 0x11c
   1e2f4:	str	r2, [sp, #288]	; 0x120
   1e2f8:	str	ip, [sp, #292]	; 0x124
   1e2fc:	mov	r3, #8
   1e300:	add	r0, sp, #284	; 0x11c
   1e304:	ldr	r2, [sp, #20]
   1e308:	ldr	r1, [sp, #472]	; 0x1d8
   1e30c:	bl	2455c <__assert_fail@plt+0x132b4>
   1e310:	cmp	r0, #0
   1e314:	bne	1dcd8 <__assert_fail@plt+0xca30>
   1e318:	b	1e17c <__assert_fail@plt+0xced4>
   1e31c:	str	r5, [r3, #4]
   1e320:	ldr	r3, [sp, #476]	; 0x1dc
   1e324:	ldr	r3, [r3, #4]
   1e328:	b	1dd4c <__assert_fail@plt+0xcaa4>
   1e32c:	ldr	r3, [sp, #12]
   1e330:	cmp	r3, #0
   1e334:	bne	1e224 <__assert_fail@plt+0xcf7c>
   1e338:	mov	r1, sl
   1e33c:	ldr	r0, [sp, #28]
   1e340:	bl	16484 <__assert_fail@plt+0x51dc>
   1e344:	cmp	r0, #0
   1e348:	beq	1e170 <__assert_fail@plt+0xcec8>
   1e34c:	ldr	r3, [r5, #20]
   1e350:	add	sl, sl, sl, lsl #1
   1e354:	ldr	r7, [sp, #120]	; 0x78
   1e358:	ldr	r1, [sp, #248]	; 0xf8
   1e35c:	add	r3, r3, sl, lsl #2
   1e360:	ldr	r2, [r3, #8]
   1e364:	ldr	r3, [r1, r7, lsl #2]
   1e368:	ldr	sl, [r2]
   1e36c:	add	r1, r3, #12
   1e370:	ldr	r0, [r3, #8]
   1e374:	mov	r2, sl
   1e378:	bl	16a58 <__assert_fail@plt+0x57b0>
   1e37c:	cmp	r0, #0
   1e380:	bne	1de18 <__assert_fail@plt+0xcb70>
   1e384:	ldr	r1, [r5]
   1e388:	add	r1, r1, r4
   1e38c:	b	1de40 <__assert_fail@plt+0xcb98>
   1e390:	cmp	r7, #0
   1e394:	beq	1e338 <__assert_fail@plt+0xd090>
   1e398:	ldr	r4, [sp, #120]	; 0x78
   1e39c:	b	1e20c <__assert_fail@plt+0xcf64>
   1e3a0:	str	r5, [r3, #4]
   1e3a4:	ldr	r0, [sp, #32]
   1e3a8:	ldr	r2, [sp, #40]	; 0x28
   1e3ac:	ldr	r1, [sp, #476]	; 0x1dc
   1e3b0:	bl	11038 <memcpy@plt>
   1e3b4:	ldr	r5, [sp, #120]	; 0x78
   1e3b8:	ldr	r3, [sp, #476]	; 0x1dc
   1e3bc:	ldr	r3, [r3, #4]
   1e3c0:	b	1dd4c <__assert_fail@plt+0xcaa4>
   1e3c4:	mov	r1, #48	; 0x30
   1e3c8:	mov	r0, r3
   1e3cc:	mul	r1, r1, r2
   1e3d0:	bl	2447c <__assert_fail@plt+0x131d4>
   1e3d4:	subs	r3, r0, #0
   1e3d8:	beq	1e0d0 <__assert_fail@plt+0xce28>
   1e3dc:	ldr	r1, [sp, #12]
   1e3e0:	ldr	r2, [r1, #4]
   1e3e4:	lsl	r2, r2, #1
   1e3e8:	strd	r2, [r1, #4]
   1e3ec:	b	1e050 <__assert_fail@plt+0xcda8>
   1e3f0:	ldr	r9, [sp, #24]
   1e3f4:	ldr	r0, [sp, #132]	; 0x84
   1e3f8:	bl	24628 <__assert_fail@plt+0x13380>
   1e3fc:	ldr	r3, [sp, #20]
   1e400:	ldr	r0, [sp, #292]	; 0x124
   1e404:	cmp	r0, r3
   1e408:	beq	1e410 <__assert_fail@plt+0xd168>
   1e40c:	bl	24628 <__assert_fail@plt+0x13380>
   1e410:	ldr	r0, [sp, #12]
   1e414:	mov	r2, #0
   1e418:	ldr	r3, [sp, #20]
   1e41c:	str	r2, [sp, #284]	; 0x11c
   1e420:	cmp	r0, r2
   1e424:	str	r3, [sp, #292]	; 0x124
   1e428:	mov	r3, #16
   1e42c:	str	r3, [sp, #288]	; 0x120
   1e430:	beq	1e438 <__assert_fail@plt+0xd190>
   1e434:	bl	182ac <__assert_fail@plt+0x7004>
   1e438:	ldr	r4, [sp, #248]	; 0xf8
   1e43c:	ldr	r3, [sp, #476]	; 0x1dc
   1e440:	ldr	r3, [r3]
   1e444:	b	1d8a8 <__assert_fail@plt+0xc600>
   1e448:	mov	r2, #0
   1e44c:	mov	r3, #16
   1e450:	str	r2, [sp, #284]	; 0x11c
   1e454:	str	r3, [sp, #288]	; 0x120
   1e458:	b	1e114 <__assert_fail@plt+0xce6c>
   1e45c:	ldr	r9, [sp, #24]
   1e460:	ldr	r0, [sp, #132]	; 0x84
   1e464:	bl	24628 <__assert_fail@plt+0x13380>
   1e468:	ldr	r3, [sp, #20]
   1e46c:	ldr	r0, [sp, #292]	; 0x124
   1e470:	cmp	r0, r3
   1e474:	beq	1e438 <__assert_fail@plt+0xd190>
   1e478:	bl	24628 <__assert_fail@plt+0x13380>
   1e47c:	b	1e438 <__assert_fail@plt+0xd190>
   1e480:	mov	r2, #0
   1e484:	mov	r3, #16
   1e488:	str	r2, [sp, #284]	; 0x11c
   1e48c:	str	r3, [sp, #288]	; 0x120
   1e490:	b	1df3c <__assert_fail@plt+0xcc94>
   1e494:	ldr	r9, [sp, #68]	; 0x44
   1e498:	b	1d844 <__assert_fail@plt+0xc59c>
   1e49c:	ldr	r1, [sp, #172]	; 0xac
   1e4a0:	sub	r2, r5, r1
   1e4a4:	ldr	r0, [sp, #176]	; 0xb0
   1e4a8:	mov	r3, r4
   1e4ac:	cmp	r0, r2
   1e4b0:	bls	1e4c0 <__assert_fail@plt+0xd218>
   1e4b4:	ldr	r3, [sp, #152]	; 0x98
   1e4b8:	ldrb	r3, [r3, r2]
   1e4bc:	add	r3, r4, r3
   1e4c0:	ldrb	r3, [r3]
   1e4c4:	cmp	r3, #0
   1e4c8:	bne	1cdf8 <__assert_fail@plt+0xbb50>
   1e4cc:	ldr	r2, [sp, #76]	; 0x4c
   1e4d0:	ldr	r3, [sp, #96]	; 0x60
   1e4d4:	add	r5, r5, r3
   1e4d8:	ldr	r3, [sp, #64]	; 0x40
   1e4dc:	str	r5, [sp, #116]	; 0x74
   1e4e0:	cmp	r5, r3
   1e4e4:	movle	r3, #0
   1e4e8:	movgt	r3, #1
   1e4ec:	cmp	r5, r2
   1e4f0:	orrlt	r3, r3, #1
   1e4f4:	cmp	r3, #0
   1e4f8:	beq	1da48 <__assert_fail@plt+0xc7a0>
   1e4fc:	b	1d28c <__assert_fail@plt+0xbfe4>
   1e500:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e504:	mov	r4, r3
   1e508:	ldr	r3, [r3, #4]
   1e50c:	ldr	r5, [r0, #84]	; 0x54
   1e510:	strd	r6, [sp, #8]
   1e514:	strd	sl, [sp, #24]
   1e518:	mov	fp, r2
   1e51c:	mov	sl, r1
   1e520:	str	lr, [sp, #32]
   1e524:	lsl	lr, r2, #2
   1e528:	ldr	r2, [r0, #100]	; 0x64
   1e52c:	strd	r8, [sp, #16]
   1e530:	sub	sp, sp, #108	; 0x6c
   1e534:	str	lr, [sp, #24]
   1e538:	ldr	r1, [r2, fp, lsl #2]
   1e53c:	add	r2, r2, lr
   1e540:	strd	r0, [sp, #16]
   1e544:	mov	r0, #0
   1e548:	cmp	r1, r0
   1e54c:	str	r0, [sp, #72]	; 0x48
   1e550:	beq	1e9a8 <__assert_fail@plt+0xd700>
   1e554:	cmp	r3, #0
   1e558:	bne	1e594 <__assert_fail@plt+0xd2ec>
   1e55c:	ldr	r1, [sl]
   1e560:	str	r3, [r1, fp, lsl #2]
   1e564:	ldr	r3, [r2]
   1e568:	ldrb	r3, [r3, #52]	; 0x34
   1e56c:	ands	r3, r3, #64	; 0x40
   1e570:	bne	1e6b0 <__assert_fail@plt+0xd408>
   1e574:	mov	r0, r3
   1e578:	add	sp, sp, #108	; 0x6c
   1e57c:	ldrd	r4, [sp]
   1e580:	ldrd	r6, [sp, #8]
   1e584:	ldrd	r8, [sp, #16]
   1e588:	ldrd	sl, [sp, #24]
   1e58c:	add	sp, sp, #32
   1e590:	pop	{pc}		; (ldr pc, [sp], #4)
   1e594:	mov	r2, r4
   1e598:	mov	r1, r5
   1e59c:	str	r0, [sp, #76]	; 0x4c
   1e5a0:	add	r0, sp, #76	; 0x4c
   1e5a4:	bl	17b5c <__assert_fail@plt+0x68b4>
   1e5a8:	ldr	r3, [sp, #76]	; 0x4c
   1e5ac:	mov	r8, r0
   1e5b0:	cmp	r3, #0
   1e5b4:	bne	1e574 <__assert_fail@plt+0xd2cc>
   1e5b8:	mov	r6, r0
   1e5bc:	ldr	r7, [r6, #28]!
   1e5c0:	cmp	r7, #0
   1e5c4:	bne	1e638 <__assert_fail@plt+0xd390>
   1e5c8:	ldr	r2, [r4, #4]
   1e5cc:	lsl	r0, r2, #2
   1e5d0:	strd	r2, [r8, #28]
   1e5d4:	bl	24440 <__assert_fail@plt+0x13198>
   1e5d8:	cmp	r0, #0
   1e5dc:	str	r0, [r8, #36]	; 0x24
   1e5e0:	beq	1e630 <__assert_fail@plt+0xd388>
   1e5e4:	ldr	r3, [r4, #4]
   1e5e8:	str	r7, [sp, #76]	; 0x4c
   1e5ec:	cmp	r3, #0
   1e5f0:	bgt	1e604 <__assert_fail@plt+0xd35c>
   1e5f4:	b	1e638 <__assert_fail@plt+0xd390>
   1e5f8:	ldr	r3, [r4, #4]
   1e5fc:	cmp	r7, r3
   1e600:	bge	1e638 <__assert_fail@plt+0xd390>
   1e604:	ldr	r3, [r4, #8]
   1e608:	mov	r0, r6
   1e60c:	ldr	r1, [r5, #28]
   1e610:	ldr	r3, [r3, r7, lsl #2]
   1e614:	add	r7, r7, #1
   1e618:	add	r3, r3, r3, lsl #1
   1e61c:	add	r1, r1, r3, lsl #2
   1e620:	bl	1831c <__assert_fail@plt+0x7074>
   1e624:	cmp	r0, #0
   1e628:	str	r0, [sp, #76]	; 0x4c
   1e62c:	beq	1e5f8 <__assert_fail@plt+0xd350>
   1e630:	mov	r3, #12
   1e634:	b	1e574 <__assert_fail@plt+0xd2cc>
   1e638:	ldr	r3, [sp, #20]
   1e63c:	mov	r2, r6
   1e640:	mov	r0, r4
   1e644:	add	r3, r3, #4
   1e648:	mov	r1, r3
   1e64c:	str	r3, [sp, #36]	; 0x24
   1e650:	bl	16fdc <__assert_fail@plt+0x5d34>
   1e654:	cmp	r0, #0
   1e658:	str	r0, [sp, #72]	; 0x48
   1e65c:	bne	1ec74 <__assert_fail@plt+0xd9cc>
   1e660:	ldr	r3, [sl, #20]
   1e664:	cmp	r3, #0
   1e668:	bne	1ea74 <__assert_fail@plt+0xd7cc>
   1e66c:	mov	r2, r4
   1e670:	mov	r1, r5
   1e674:	ldr	r4, [sl]
   1e678:	add	r0, sp, #72	; 0x48
   1e67c:	bl	17b5c <__assert_fail@plt+0x68b4>
   1e680:	ldr	r3, [sp, #72]	; 0x48
   1e684:	str	r0, [r4, fp, lsl #2]
   1e688:	cmp	r3, #0
   1e68c:	bne	1e574 <__assert_fail@plt+0xd2cc>
   1e690:	ldr	r3, [sp, #16]
   1e694:	ldr	r2, [r3, #100]	; 0x64
   1e698:	ldr	r3, [sp, #24]
   1e69c:	add	r2, r2, r3
   1e6a0:	ldr	r3, [r2]
   1e6a4:	ldrb	r3, [r3, #52]	; 0x34
   1e6a8:	ands	r3, r3, #64	; 0x40
   1e6ac:	beq	1e574 <__assert_fail@plt+0xd2cc>
   1e6b0:	ldr	r3, [sp, #16]
   1e6b4:	mov	r8, #0
   1e6b8:	ldr	ip, [r3, #108]	; 0x6c
   1e6bc:	mov	r3, ip
   1e6c0:	cmp	r8, r3
   1e6c4:	bge	1e724 <__assert_fail@plt+0xd47c>
   1e6c8:	ldr	r1, [sp, #16]
   1e6cc:	add	r2, r8, r3
   1e6d0:	add	r2, r2, r2, lsr #31
   1e6d4:	asr	r2, r2, #1
   1e6d8:	ldr	r0, [r1, #116]	; 0x74
   1e6dc:	add	r1, r2, r2, lsl #1
   1e6e0:	add	r1, r0, r1, lsl #3
   1e6e4:	ldr	r1, [r1, #4]
   1e6e8:	cmp	fp, r1
   1e6ec:	ble	1e714 <__assert_fail@plt+0xd46c>
   1e6f0:	b	1e9e8 <__assert_fail@plt+0xd740>
   1e6f4:	asr	r3, r3, #1
   1e6f8:	add	r1, r3, r3, lsl #1
   1e6fc:	mov	lr, r3
   1e700:	add	r1, r0, r1, lsl #3
   1e704:	ldr	r1, [r1, #4]
   1e708:	cmp	fp, r1
   1e70c:	bgt	1e9f0 <__assert_fail@plt+0xd748>
   1e710:	mov	r2, r3
   1e714:	add	r3, r8, r2
   1e718:	cmp	r8, r2
   1e71c:	add	r3, r3, r3, lsr #31
   1e720:	blt	1e6f4 <__assert_fail@plt+0xd44c>
   1e724:	cmp	ip, r8
   1e728:	ble	1e9e0 <__assert_fail@plt+0xd738>
   1e72c:	ldr	r1, [sp, #16]
   1e730:	add	r2, r8, r8, lsl #1
   1e734:	lsl	r2, r2, #3
   1e738:	ldr	r3, [r1, #116]	; 0x74
   1e73c:	str	r2, [sp, #48]	; 0x30
   1e740:	add	r3, r3, r2
   1e744:	ldr	r3, [r3, #4]
   1e748:	cmp	fp, r3
   1e74c:	bne	1e9e0 <__assert_fail@plt+0xd738>
   1e750:	cmn	r8, #1
   1e754:	beq	1e9e0 <__assert_fail@plt+0xd738>
   1e758:	ldr	r3, [sp, #20]
   1e75c:	ldr	r9, [r1, #84]	; 0x54
   1e760:	ldr	r0, [r3, #8]
   1e764:	mov	r3, #0
   1e768:	str	r3, [sp, #76]	; 0x4c
   1e76c:	cmp	r0, r3
   1e770:	ble	1e9e0 <__assert_fail@plt+0xd738>
   1e774:	add	r2, sl, #24
   1e778:	str	r2, [sp, #36]	; 0x24
   1e77c:	add	r2, sl, #20
   1e780:	str	fp, [sp, #44]	; 0x2c
   1e784:	mov	fp, r3
   1e788:	str	r2, [sp, #40]	; 0x28
   1e78c:	str	r8, [sp, #56]	; 0x38
   1e790:	b	1e7a8 <__assert_fail@plt+0xd500>
   1e794:	cmp	r3, #4
   1e798:	beq	1e7e4 <__assert_fail@plt+0xd53c>
   1e79c:	add	fp, fp, #1
   1e7a0:	cmp	fp, r0
   1e7a4:	bge	1e9d4 <__assert_fail@plt+0xd72c>
   1e7a8:	ldr	r3, [sp, #20]
   1e7ac:	ldr	r2, [sl, #8]
   1e7b0:	ldr	r1, [r3, #12]
   1e7b4:	ldr	r3, [r9]
   1e7b8:	ldr	r6, [r1, fp, lsl #2]
   1e7bc:	add	r3, r3, r6, lsl #3
   1e7c0:	cmp	r6, r2
   1e7c4:	ldrb	r3, [r3, #4]
   1e7c8:	bne	1e794 <__assert_fail@plt+0xd4ec>
   1e7cc:	ldr	r2, [sl, #12]
   1e7d0:	ldr	r1, [sp, #44]	; 0x2c
   1e7d4:	cmp	r1, r2
   1e7d8:	beq	1e79c <__assert_fail@plt+0xd4f4>
   1e7dc:	cmp	r3, #4
   1e7e0:	bne	1e79c <__assert_fail@plt+0xd4f4>
   1e7e4:	ldr	r3, [sp, #16]
   1e7e8:	lsl	r2, r6, #2
   1e7ec:	str	fp, [sp, #60]	; 0x3c
   1e7f0:	ldr	fp, [sp, #44]	; 0x2c
   1e7f4:	ldr	r7, [sp, #56]	; 0x38
   1e7f8:	ldr	r4, [r3, #116]	; 0x74
   1e7fc:	add	r3, r6, r6, lsl #1
   1e800:	lsl	r3, r3, #2
   1e804:	strd	r2, [sp, #28]
   1e808:	add	r2, sl, #16
   1e80c:	ldr	r3, [sp, #48]	; 0x30
   1e810:	str	r2, [sp, #52]	; 0x34
   1e814:	add	r4, r4, r3
   1e818:	b	1e96c <__assert_fail@plt+0xd6c4>
   1e81c:	ldr	r3, [r9, #12]
   1e820:	ldr	r2, [sp, #28]
   1e824:	ldr	r8, [r3, r2]
   1e828:	ldr	r3, [sl, #12]
   1e82c:	cmp	r5, r3
   1e830:	bgt	1e958 <__assert_fail@plt+0xd6b0>
   1e834:	ldr	r3, [sl]
   1e838:	ldr	r3, [r3, r5, lsl #2]
   1e83c:	cmp	r3, #0
   1e840:	beq	1e958 <__assert_fail@plt+0xd6b0>
   1e844:	mov	r2, r8
   1e848:	add	r1, r3, #12
   1e84c:	ldr	r0, [r3, #8]
   1e850:	bl	16a58 <__assert_fail@plt+0x57b0>
   1e854:	cmp	r0, #0
   1e858:	beq	1e958 <__assert_fail@plt+0xd6b0>
   1e85c:	mov	r3, r6
   1e860:	str	fp, [sp]
   1e864:	str	r8, [sp, #4]
   1e868:	str	r5, [sp, #8]
   1e86c:	ldr	r0, [sp, #16]
   1e870:	ldr	r2, [sp, #36]	; 0x24
   1e874:	ldr	r1, [sp, #40]	; 0x28
   1e878:	bl	16d2c <__assert_fail@plt+0x5a84>
   1e87c:	cmp	r0, #0
   1e880:	bne	1e958 <__assert_fail@plt+0xd6b0>
   1e884:	ldr	r3, [sp, #76]	; 0x4c
   1e888:	cmp	r3, #0
   1e88c:	beq	1e9fc <__assert_fail@plt+0xd754>
   1e890:	add	r4, sp, #76	; 0x4c
   1e894:	add	r5, sp, #92	; 0x5c
   1e898:	mov	r0, r5
   1e89c:	mov	r1, r7
   1e8a0:	str	r6, [sp, #84]	; 0x54
   1e8a4:	str	fp, [sp, #88]	; 0x58
   1e8a8:	bl	16484 <__assert_fail@plt+0x51dc>
   1e8ac:	cmp	r0, #0
   1e8b0:	beq	1ecb4 <__assert_fail@plt+0xda0c>
   1e8b4:	mov	r1, r4
   1e8b8:	ldr	r0, [sp, #16]
   1e8bc:	ldr	r2, [sp, #24]
   1e8c0:	ldr	r3, [sp, #76]	; 0x4c
   1e8c4:	ldr	r4, [r3, r2]
   1e8c8:	bl	1c6f4 <__assert_fail@plt+0xb44c>
   1e8cc:	cmp	r0, #0
   1e8d0:	bne	1ea40 <__assert_fail@plt+0xd798>
   1e8d4:	ldr	r1, [sl, #4]
   1e8d8:	ldr	r3, [sp, #76]	; 0x4c
   1e8dc:	cmp	r1, #0
   1e8e0:	beq	1e900 <__assert_fail@plt+0xd658>
   1e8e4:	mov	r2, r3
   1e8e8:	mov	r0, r9
   1e8ec:	add	r3, fp, #1
   1e8f0:	bl	17d80 <__assert_fail@plt+0x6ad8>
   1e8f4:	cmp	r0, #0
   1e8f8:	bne	1ea40 <__assert_fail@plt+0xd798>
   1e8fc:	ldr	r3, [sp, #76]	; 0x4c
   1e900:	mov	r2, r7
   1e904:	ldr	r1, [sp, #24]
   1e908:	str	r4, [r3, r1]
   1e90c:	add	r1, sp, #100	; 0x64
   1e910:	ldr	r4, [sp, #96]	; 0x60
   1e914:	mov	r0, r4
   1e918:	bl	16a58 <__assert_fail@plt+0x57b0>
   1e91c:	sub	r2, r0, #1
   1e920:	cmp	r4, r2
   1e924:	movgt	r3, #0
   1e928:	movle	r3, #1
   1e92c:	orrs	r3, r3, r2, lsr #31
   1e930:	bne	1e948 <__assert_fail@plt+0xd6a0>
   1e934:	sub	r4, r4, #1
   1e938:	add	r1, sp, #100	; 0x64
   1e93c:	add	r0, sp, #96	; 0x60
   1e940:	str	r4, [sp, #96]	; 0x60
   1e944:	bl	16bf8 <__assert_fail@plt+0x5950>
   1e948:	ldr	r3, [sp, #16]
   1e94c:	ldr	r4, [r3, #116]	; 0x74
   1e950:	add	r3, r7, r7, lsl #1
   1e954:	add	r4, r4, r3, lsl #3
   1e958:	ldrb	r3, [r4, #20]
   1e95c:	add	r7, r7, #1
   1e960:	add	r4, r4, #24
   1e964:	cmp	r3, #0
   1e968:	beq	1ea64 <__assert_fail@plt+0xd7bc>
   1e96c:	ldr	r3, [r4]
   1e970:	cmp	r6, r3
   1e974:	bne	1e958 <__assert_fail@plt+0xd6b0>
   1e978:	ldr	r3, [r4, #8]
   1e97c:	ldr	r5, [r4, #12]
   1e980:	sub	r5, r5, r3
   1e984:	cmp	r5, #0
   1e988:	add	r5, fp, r5
   1e98c:	bne	1e81c <__assert_fail@plt+0xd574>
   1e990:	ldr	r3, [r9, #20]
   1e994:	ldr	r2, [sp, #32]
   1e998:	add	r3, r3, r2
   1e99c:	ldr	r3, [r3, #8]
   1e9a0:	ldr	r8, [r3]
   1e9a4:	b	1e828 <__assert_fail@plt+0xd580>
   1e9a8:	ldr	r6, [sl]
   1e9ac:	cmp	r3, r0
   1e9b0:	streq	r3, [r6, fp, lsl #2]
   1e9b4:	beq	1e574 <__assert_fail@plt+0xd2cc>
   1e9b8:	mov	r2, r4
   1e9bc:	mov	r1, r5
   1e9c0:	add	r0, sp, #72	; 0x48
   1e9c4:	bl	17b5c <__assert_fail@plt+0x68b4>
   1e9c8:	str	r0, [r6, fp, lsl #2]
   1e9cc:	ldr	r3, [sp, #72]	; 0x48
   1e9d0:	b	1e574 <__assert_fail@plt+0xd2cc>
   1e9d4:	ldr	r3, [sp, #76]	; 0x4c
   1e9d8:	cmp	r3, #0
   1e9dc:	bne	1ecc4 <__assert_fail@plt+0xda1c>
   1e9e0:	mov	r3, #0
   1e9e4:	b	1e574 <__assert_fail@plt+0xd2cc>
   1e9e8:	mov	lr, r2
   1e9ec:	mov	r2, r3
   1e9f0:	add	r8, lr, #1
   1e9f4:	mov	r3, r2
   1e9f8:	b	1e6c0 <__assert_fail@plt+0xd418>
   1e9fc:	ldrd	r2, [sl]
   1ea00:	add	r4, sp, #76	; 0x4c
   1ea04:	add	r5, sp, #92	; 0x5c
   1ea08:	mov	r0, r5
   1ea0c:	ldr	ip, [sl, #24]
   1ea10:	ldr	r1, [sp, #52]	; 0x34
   1ea14:	strd	r2, [sp, #76]	; 0x4c
   1ea18:	ldrd	r2, [sl, #16]
   1ea1c:	str	ip, [r4, #24]
   1ea20:	strd	r2, [sp, #64]	; 0x40
   1ea24:	ldrd	r2, [sl, #8]
   1ea28:	strd	r2, [r4, #8]
   1ea2c:	ldrd	r2, [sp, #64]	; 0x40
   1ea30:	strd	r2, [r4, #16]
   1ea34:	bl	17680 <__assert_fail@plt+0x63d8>
   1ea38:	cmp	r0, #0
   1ea3c:	beq	1e898 <__assert_fail@plt+0xd5f0>
   1ea40:	mov	r3, r0
   1ea44:	ldr	r2, [sp, #76]	; 0x4c
   1ea48:	cmp	r2, #0
   1ea4c:	beq	1e574 <__assert_fail@plt+0xd2cc>
   1ea50:	ldr	r0, [sp, #100]	; 0x64
   1ea54:	str	r3, [sp, #16]
   1ea58:	bl	24628 <__assert_fail@plt+0x13380>
   1ea5c:	ldr	r3, [sp, #16]
   1ea60:	b	1e574 <__assert_fail@plt+0xd2cc>
   1ea64:	ldr	r3, [sp, #20]
   1ea68:	ldr	fp, [sp, #60]	; 0x3c
   1ea6c:	ldr	r0, [r3, #8]
   1ea70:	b	1e79c <__assert_fail@plt+0xd4f4>
   1ea74:	ldr	r3, [sp, #16]
   1ea78:	ldr	r3, [r3, #116]	; 0x74
   1ea7c:	str	r3, [sp, #32]
   1ea80:	ble	1eb60 <__assert_fail@plt+0xd8b8>
   1ea84:	mov	r6, r0
   1ea88:	str	fp, [sp, #28]
   1ea8c:	ldr	r3, [sl, #24]
   1ea90:	ldr	r0, [sp, #28]
   1ea94:	ldr	ip, [sp, #32]
   1ea98:	ldr	r3, [r3, r6, lsl #2]
   1ea9c:	add	r3, r3, r3, lsl #1
   1eaa0:	add	r2, ip, r3, lsl #3
   1eaa4:	ldr	r1, [r2, #8]
   1eaa8:	cmp	r0, r1
   1eaac:	ble	1eb4c <__assert_fail@plt+0xd8a4>
   1eab0:	ldr	r1, [r2, #4]
   1eab4:	cmp	r0, r1
   1eab8:	bgt	1eb4c <__assert_fail@plt+0xd8a4>
   1eabc:	ldr	r1, [r2, #12]
   1eac0:	ldr	r2, [ip, r3, lsl #3]
   1eac4:	ldr	r3, [r5]
   1eac8:	cmp	r0, r1
   1eacc:	ldr	r7, [r4, #4]
   1ead0:	ldr	r9, [r3, r2, lsl #3]
   1ead4:	beq	1eb6c <__assert_fail@plt+0xd8c4>
   1ead8:	cmp	r7, #0
   1eadc:	ble	1eb4c <__assert_fail@plt+0xd8a4>
   1eae0:	mov	r8, #0
   1eae4:	ldr	fp, [sp, #36]	; 0x24
   1eae8:	b	1eafc <__assert_fail@plt+0xd854>
   1eaec:	add	r8, r8, #1
   1eaf0:	cmp	r8, r7
   1eaf4:	bge	1eb4c <__assert_fail@plt+0xd8a4>
   1eaf8:	ldr	r3, [r5]
   1eafc:	ldr	r2, [r4, #8]
   1eb00:	ldr	r1, [r2, r8, lsl #2]
   1eb04:	add	r2, r3, r1, lsl #3
   1eb08:	ldrb	r2, [r2, #4]
   1eb0c:	sub	r2, r2, #8
   1eb10:	cmp	r2, #1
   1eb14:	bhi	1eaec <__assert_fail@plt+0xd844>
   1eb18:	ldr	r3, [r3, r1, lsl #3]
   1eb1c:	cmp	r9, r3
   1eb20:	bne	1eaec <__assert_fail@plt+0xd844>
   1eb24:	mov	r3, fp
   1eb28:	mov	r2, r4
   1eb2c:	mov	r0, r5
   1eb30:	bl	18074 <__assert_fail@plt+0x6dcc>
   1eb34:	cmp	r0, #0
   1eb38:	bne	1ec74 <__assert_fail@plt+0xd9cc>
   1eb3c:	ldr	r7, [r4, #4]
   1eb40:	add	r8, r8, #1
   1eb44:	cmp	r8, r7
   1eb48:	blt	1eaf8 <__assert_fail@plt+0xd850>
   1eb4c:	ldr	r3, [sl, #20]
   1eb50:	add	r6, r6, #1
   1eb54:	cmp	r6, r3
   1eb58:	blt	1ea8c <__assert_fail@plt+0xd7e4>
   1eb5c:	ldr	fp, [sp, #28]
   1eb60:	mov	r3, #0
   1eb64:	str	r3, [sp, #72]	; 0x48
   1eb68:	b	1e66c <__assert_fail@plt+0xd3c4>
   1eb6c:	cmp	r7, #0
   1eb70:	ble	1eb4c <__assert_fail@plt+0xd8a4>
   1eb74:	ldr	lr, [r4, #8]
   1eb78:	mvn	r8, #0
   1eb7c:	mov	fp, r8
   1eb80:	str	r6, [sp, #40]	; 0x28
   1eb84:	add	r2, lr, r7, lsl #2
   1eb88:	mov	r1, lr
   1eb8c:	mov	r6, r2
   1eb90:	b	1ebb0 <__assert_fail@plt+0xd908>
   1eb94:	cmp	r0, #9
   1eb98:	bne	1eba8 <__assert_fail@plt+0xd900>
   1eb9c:	ldr	r0, [ip]
   1eba0:	cmp	r9, r0
   1eba4:	moveq	r8, r2
   1eba8:	cmp	r6, r1
   1ebac:	beq	1ebd8 <__assert_fail@plt+0xd930>
   1ebb0:	ldr	r2, [r1], #4
   1ebb4:	add	ip, r3, r2, lsl #3
   1ebb8:	ldrb	r0, [ip, #4]
   1ebbc:	cmp	r0, #8
   1ebc0:	bne	1eb94 <__assert_fail@plt+0xd8ec>
   1ebc4:	ldr	r0, [r3, r2, lsl #3]
   1ebc8:	cmp	r9, r0
   1ebcc:	moveq	fp, r2
   1ebd0:	cmp	r6, r1
   1ebd4:	bne	1ebb0 <__assert_fail@plt+0xd908>
   1ebd8:	cmp	fp, #0
   1ebdc:	ldr	r6, [sp, #40]	; 0x28
   1ebe0:	bge	1ec7c <__assert_fail@plt+0xd9d4>
   1ebe4:	cmp	r8, #0
   1ebe8:	blt	1eb4c <__assert_fail@plt+0xd8a4>
   1ebec:	mov	r9, #0
   1ebf0:	str	r6, [sp, #40]	; 0x28
   1ebf4:	b	1ec08 <__assert_fail@plt+0xd960>
   1ebf8:	add	r9, r9, #1
   1ebfc:	cmp	r7, r9
   1ec00:	ble	1ecbc <__assert_fail@plt+0xda14>
   1ec04:	ldr	lr, [r4, #8]
   1ec08:	mov	r2, r8
   1ec0c:	ldr	r6, [lr, r9, lsl #2]
   1ec10:	ldr	r0, [r5, #28]
   1ec14:	add	fp, r6, r6, lsl #1
   1ec18:	lsl	fp, fp, #2
   1ec1c:	add	r0, r0, fp
   1ec20:	add	r1, r0, #8
   1ec24:	ldr	r0, [r0, #4]
   1ec28:	bl	16a58 <__assert_fail@plt+0x57b0>
   1ec2c:	cmp	r0, #0
   1ec30:	bne	1ebf8 <__assert_fail@plt+0xd950>
   1ec34:	ldr	r1, [r5, #24]
   1ec38:	add	fp, r1, fp
   1ec3c:	add	r1, fp, #8
   1ec40:	ldr	r0, [fp, #4]
   1ec44:	bl	16a58 <__assert_fail@plt+0x57b0>
   1ec48:	cmp	r0, #0
   1ec4c:	bne	1ebf8 <__assert_fail@plt+0xd950>
   1ec50:	mov	r1, r6
   1ec54:	mov	r2, r4
   1ec58:	ldr	r3, [sp, #36]	; 0x24
   1ec5c:	mov	r0, r5
   1ec60:	bl	18074 <__assert_fail@plt+0x6dcc>
   1ec64:	cmp	r0, #0
   1ec68:	bne	1ec74 <__assert_fail@plt+0xd9cc>
   1ec6c:	ldr	r7, [r4, #4]
   1ec70:	b	1ebfc <__assert_fail@plt+0xd954>
   1ec74:	mov	r3, r0
   1ec78:	b	1e574 <__assert_fail@plt+0xd2cc>
   1ec7c:	mov	r1, fp
   1ec80:	mov	r2, r4
   1ec84:	ldr	r3, [sp, #36]	; 0x24
   1ec88:	mov	r0, r5
   1ec8c:	bl	18074 <__assert_fail@plt+0x6dcc>
   1ec90:	cmp	r0, #0
   1ec94:	bne	1ec74 <__assert_fail@plt+0xd9cc>
   1ec98:	cmp	r8, #0
   1ec9c:	blt	1eb4c <__assert_fail@plt+0xd8a4>
   1eca0:	ldr	r7, [r4, #4]
   1eca4:	cmp	r7, #0
   1eca8:	ble	1eb4c <__assert_fail@plt+0xd8a4>
   1ecac:	ldr	lr, [r4, #8]
   1ecb0:	b	1ebec <__assert_fail@plt+0xd944>
   1ecb4:	mov	r3, #12
   1ecb8:	b	1ea44 <__assert_fail@plt+0xd79c>
   1ecbc:	ldr	r6, [sp, #40]	; 0x28
   1ecc0:	b	1eb4c <__assert_fail@plt+0xd8a4>
   1ecc4:	mov	r3, #0
   1ecc8:	b	1ea50 <__assert_fail@plt+0xd7a8>
   1eccc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1ecd0:	ldr	r3, [r1, #56]	; 0x38
   1ecd4:	strd	r6, [sp, #8]
   1ecd8:	mov	r6, r0
   1ecdc:	ldr	r7, [r1, #40]	; 0x28
   1ece0:	strd	r8, [sp, #16]
   1ece4:	str	sl, [sp, #24]
   1ece8:	str	lr, [sp, #28]
   1ecec:	sub	sp, sp, #8
   1ecf0:	cmp	r3, r7
   1ecf4:	movle	r3, #2
   1ecf8:	movle	r0, #0
   1ecfc:	strble	r3, [r6, #4]
   1ed00:	ble	1efc8 <__assert_fail@plt+0xdd20>
   1ed04:	ldr	sl, [r1, #4]
   1ed08:	mov	r8, r2
   1ed0c:	mov	r5, r1
   1ed10:	ldrb	r3, [r6, #6]
   1ed14:	ldr	r2, [r1, #80]	; 0x50
   1ed18:	ldrb	r4, [sl, r7]
   1ed1c:	bic	r3, r3, #96	; 0x60
   1ed20:	cmp	r2, #1
   1ed24:	strb	r4, [r6]
   1ed28:	strb	r3, [r6, #6]
   1ed2c:	ble	1efe4 <__assert_fail@plt+0xdd3c>
   1ed30:	ldr	r3, [r1, #28]
   1ed34:	cmp	r7, r3
   1ed38:	beq	1ed4c <__assert_fail@plt+0xdaa4>
   1ed3c:	ldr	r3, [r1, #8]
   1ed40:	ldr	r3, [r3, r7, lsl #2]
   1ed44:	cmn	r3, #1
   1ed48:	beq	1f22c <__assert_fail@plt+0xdf84>
   1ed4c:	cmp	r4, #92	; 0x5c
   1ed50:	beq	1f020 <__assert_fail@plt+0xdd78>
   1ed54:	ldr	r3, [r5, #8]
   1ed58:	mov	r2, #1
   1ed5c:	strb	r2, [r6, #4]
   1ed60:	ldr	r9, [r3, r7, lsl #2]
   1ed64:	mov	r0, r9
   1ed68:	sub	r9, r9, #95	; 0x5f
   1ed6c:	bl	111ac <iswalnum@plt>
   1ed70:	ldrb	r3, [r6, #6]
   1ed74:	clz	r9, r9
   1ed78:	cmp	r0, #0
   1ed7c:	lsr	r9, r9, #5
   1ed80:	movne	r9, #1
   1ed84:	bfi	r3, r9, #6, #1
   1ed88:	strb	r3, [r6, #6]
   1ed8c:	sub	r4, r4, #10
   1ed90:	cmp	r4, #115	; 0x73
   1ed94:	ldrls	pc, [pc, r4, lsl #2]
   1ed98:	b	1f224 <__assert_fail@plt+0xdf7c>
   1ed9c:	andeq	pc, r1, r4, lsl #7
   1eda0:	andeq	pc, r1, r4, lsr #4
   1eda4:	andeq	pc, r1, r4, lsr #4
   1eda8:	andeq	pc, r1, r4, lsr #4
   1edac:	andeq	pc, r1, r4, lsr #4
   1edb0:	andeq	pc, r1, r4, lsr #4
   1edb4:	andeq	pc, r1, r4, lsr #4
   1edb8:	andeq	pc, r1, r4, lsr #4
   1edbc:	andeq	pc, r1, r4, lsr #4
   1edc0:	andeq	pc, r1, r4, lsr #4
   1edc4:	andeq	pc, r1, r4, lsr #4
   1edc8:	andeq	pc, r1, r4, lsr #4
   1edcc:	andeq	pc, r1, r4, lsr #4
   1edd0:	andeq	pc, r1, r4, lsr #4
   1edd4:	andeq	pc, r1, r4, lsr #4
   1edd8:	andeq	pc, r1, r4, lsr #4
   1eddc:	andeq	pc, r1, r4, lsr #4
   1ede0:	andeq	pc, r1, r4, lsr #4
   1ede4:	andeq	pc, r1, r4, lsr #4
   1ede8:	andeq	pc, r1, r4, lsr #4
   1edec:	andeq	pc, r1, r4, lsr #4
   1edf0:	andeq	pc, r1, r4, lsr #4
   1edf4:	andeq	pc, r1, r4, lsr #4
   1edf8:	andeq	pc, r1, r4, lsr #4
   1edfc:	andeq	pc, r1, r4, lsr #4
   1ee00:	andeq	pc, r1, r4, lsr #4
   1ee04:	andeq	lr, r1, ip, ror #30
   1ee08:	andeq	pc, r1, r4, lsr #4
   1ee0c:	andeq	pc, r1, r4, lsr #4
   1ee10:	andeq	pc, r1, r4, lsr #4
   1ee14:	andeq	pc, r1, r0, lsl #6
   1ee18:	andeq	pc, r1, r8, lsl r3	; <UNPREDICTABLE>
   1ee1c:	strdeq	pc, [r1], -r0
   1ee20:	andeq	pc, r1, r0, lsr r3	; <UNPREDICTABLE>
   1ee24:	andeq	pc, r1, r4, lsr #4
   1ee28:	andeq	pc, r1, r4, lsr #4
   1ee2c:	andeq	pc, r1, r8, ror r2	; <UNPREDICTABLE>
   1ee30:	andeq	pc, r1, r4, lsr #4
   1ee34:	andeq	pc, r1, r4, lsr #4
   1ee38:	andeq	pc, r1, r4, lsr #4
   1ee3c:	andeq	pc, r1, r4, lsr #4
   1ee40:	andeq	pc, r1, r4, lsr #4
   1ee44:	andeq	pc, r1, r4, lsr #4
   1ee48:	andeq	pc, r1, r4, lsr #4
   1ee4c:	andeq	pc, r1, r4, lsr #4
   1ee50:	andeq	pc, r1, r4, lsr #4
   1ee54:	andeq	pc, r1, r4, lsr #4
   1ee58:	andeq	pc, r1, r4, lsr #4
   1ee5c:	andeq	pc, r1, r4, lsr #4
   1ee60:	andeq	pc, r1, r4, lsr #4
   1ee64:	andeq	pc, r1, r4, lsr #4
   1ee68:	andeq	pc, r1, r4, lsr #4
   1ee6c:	andeq	pc, r1, r4, lsr #4
   1ee70:	andeq	pc, r1, r8, lsl #5
   1ee74:	andeq	pc, r1, r4, lsr #4
   1ee78:	andeq	pc, r1, r4, lsr #4
   1ee7c:	andeq	pc, r1, r4, lsr #4
   1ee80:	andeq	pc, r1, r4, lsr #4
   1ee84:	andeq	pc, r1, r4, lsr #4
   1ee88:	andeq	pc, r1, r4, lsr #4
   1ee8c:	andeq	pc, r1, r4, lsr #4
   1ee90:	andeq	pc, r1, r4, lsr #4
   1ee94:	andeq	pc, r1, r4, lsr #4
   1ee98:	andeq	pc, r1, r4, lsr #4
   1ee9c:	andeq	pc, r1, r4, lsr #4
   1eea0:	andeq	pc, r1, r4, lsr #4
   1eea4:	andeq	pc, r1, r4, lsr #4
   1eea8:	andeq	pc, r1, r4, lsr #4
   1eeac:	andeq	pc, r1, r4, lsr #4
   1eeb0:	andeq	pc, r1, r4, lsr #4
   1eeb4:	andeq	pc, r1, r4, lsr #4
   1eeb8:	andeq	pc, r1, r4, lsr #4
   1eebc:	andeq	pc, r1, r4, lsr #4
   1eec0:	andeq	pc, r1, r4, lsr #4
   1eec4:	andeq	pc, r1, r4, lsr #4
   1eec8:	andeq	pc, r1, r4, lsr #4
   1eecc:	andeq	pc, r1, r4, lsr #4
   1eed0:	andeq	pc, r1, r4, lsr #4
   1eed4:	andeq	pc, r1, r4, lsr #4
   1eed8:	andeq	pc, r1, r4, lsr #4
   1eedc:	andeq	pc, r1, r4, lsr #4
   1eee0:	andeq	pc, r1, r4, lsr #5
   1eee4:	andeq	pc, r1, r4, lsr #4
   1eee8:	andeq	pc, r1, r4, lsr #4
   1eeec:			; <UNDEFINED> instruction: 0x0001f2b4
   1eef0:	andeq	pc, r1, r4, lsr #4
   1eef4:	andeq	pc, r1, r4, lsr #4
   1eef8:	andeq	pc, r1, r4, lsr #4
   1eefc:	andeq	pc, r1, r4, lsr #4
   1ef00:	andeq	pc, r1, r4, lsr #4
   1ef04:	andeq	pc, r1, r4, lsr #4
   1ef08:	andeq	pc, r1, r4, lsr #4
   1ef0c:	andeq	pc, r1, r4, lsr #4
   1ef10:	andeq	pc, r1, r4, lsr #4
   1ef14:	andeq	pc, r1, r4, lsr #4
   1ef18:	andeq	pc, r1, r4, lsr #4
   1ef1c:	andeq	pc, r1, r4, lsr #4
   1ef20:	andeq	pc, r1, r4, lsr #4
   1ef24:	andeq	pc, r1, r4, lsr #4
   1ef28:	andeq	pc, r1, r4, lsr #4
   1ef2c:	andeq	pc, r1, r4, lsr #4
   1ef30:	andeq	pc, r1, r4, lsr #4
   1ef34:	andeq	pc, r1, r4, lsr #4
   1ef38:	andeq	pc, r1, r4, lsr #4
   1ef3c:	andeq	pc, r1, r4, lsr #4
   1ef40:	andeq	pc, r1, r4, lsr #4
   1ef44:	andeq	pc, r1, r4, lsr #4
   1ef48:	andeq	pc, r1, r4, lsr #4
   1ef4c:	andeq	pc, r1, r4, lsr #4
   1ef50:	andeq	pc, r1, r4, lsr #4
   1ef54:	andeq	pc, r1, r4, lsr #4
   1ef58:	andeq	pc, r1, r4, lsr #4
   1ef5c:	andeq	pc, r1, r4, lsr #4
   1ef60:	andeq	pc, r1, ip, asr #6
   1ef64:	andeq	pc, r1, r8, ror #6
   1ef68:	muleq	r1, r0, r3
   1ef6c:	tst	r8, #8
   1ef70:	bne	1efb4 <__assert_fail@plt+0xdd0c>
   1ef74:	ldr	r3, [r5, #48]	; 0x30
   1ef78:	add	r7, r7, #1
   1ef7c:	cmp	r7, r3
   1ef80:	beq	1efb4 <__assert_fail@plt+0xdd0c>
   1ef84:	mov	r2, r8
   1ef88:	mov	r1, r5
   1ef8c:	str	r7, [r5, #40]	; 0x28
   1ef90:	mov	r0, sp
   1ef94:	bl	1eccc <__assert_fail@plt+0xda24>
   1ef98:	ldrb	r2, [sp, #4]
   1ef9c:	ldr	r3, [r5, #40]	; 0x28
   1efa0:	sub	r2, r2, #9
   1efa4:	cmp	r2, #1
   1efa8:	sub	r3, r3, #1
   1efac:	str	r3, [r5, #40]	; 0x28
   1efb0:	bhi	1f224 <__assert_fail@plt+0xdf7c>
   1efb4:	mov	r3, #12
   1efb8:	mov	r2, #32
   1efbc:	mov	r0, #1
   1efc0:	str	r2, [r6]
   1efc4:	strb	r3, [r6, #4]
   1efc8:	add	sp, sp, #8
   1efcc:	ldrd	r4, [sp]
   1efd0:	ldrd	r6, [sp, #8]
   1efd4:	ldrd	r8, [sp, #16]
   1efd8:	ldr	sl, [sp, #24]
   1efdc:	add	sp, sp, #28
   1efe0:	pop	{pc}		; (ldr pc, [sp], #4)
   1efe4:	cmp	r4, #92	; 0x5c
   1efe8:	beq	1f020 <__assert_fail@plt+0xdd78>
   1efec:	mov	r3, #1
   1eff0:	strb	r3, [r6, #4]
   1eff4:	bl	11170 <__ctype_b_loc@plt>
   1eff8:	ldr	r1, [r0]
   1effc:	lsl	r3, r4, #1
   1f000:	ldrb	r2, [r6, #6]
   1f004:	ldrh	r3, [r1, r3]
   1f008:	ubfx	r3, r3, #3, #1
   1f00c:	cmp	r4, #95	; 0x5f
   1f010:	orreq	r3, r3, #1
   1f014:	bfi	r2, r3, #6, #1
   1f018:	strb	r2, [r6, #6]
   1f01c:	b	1ed8c <__assert_fail@plt+0xdae4>
   1f020:	ldr	r1, [r5, #48]	; 0x30
   1f024:	add	r3, r7, #1
   1f028:	cmp	r3, r1
   1f02c:	blt	1f040 <__assert_fail@plt+0xdd98>
   1f030:	mov	r3, #36	; 0x24
   1f034:	mov	r0, #1
   1f038:	strb	r3, [r6, #4]
   1f03c:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f040:	ldrb	r1, [r5, #75]	; 0x4b
   1f044:	cmp	r1, #0
   1f048:	bne	1f5b0 <__assert_fail@plt+0xe308>
   1f04c:	ldrb	r7, [sl, r3]
   1f050:	mov	r1, #1
   1f054:	strb	r7, [r6]
   1f058:	cmp	r2, r1
   1f05c:	strb	r1, [r6, #4]
   1f060:	ble	1f24c <__assert_fail@plt+0xdfa4>
   1f064:	ldr	r1, [r5, #8]
   1f068:	add	r1, r1, r3, lsl #2
   1f06c:	ldr	r4, [r1]
   1f070:	mov	r0, r4
   1f074:	sub	r4, r4, #95	; 0x5f
   1f078:	bl	111ac <iswalnum@plt>
   1f07c:	ldrb	r3, [r6, #6]
   1f080:	clz	r4, r4
   1f084:	cmp	r0, #0
   1f088:	lsr	r4, r4, #5
   1f08c:	movne	r4, #1
   1f090:	bfi	r3, r4, #6, #1
   1f094:	strb	r3, [r6, #6]
   1f098:	sub	r3, r7, #39	; 0x27
   1f09c:	cmp	r3, #86	; 0x56
   1f0a0:	ldrls	pc, [pc, r3, lsl #2]
   1f0a4:	b	1f3c4 <__assert_fail@plt+0xe11c>
   1f0a8:	andeq	pc, r1, r8, ror r5	; <UNPREDICTABLE>
   1f0ac:	muleq	r1, r8, r5
   1f0b0:	andeq	pc, r1, r0, ror #10
   1f0b4:	andeq	pc, r1, r4, asr #7
   1f0b8:	andeq	pc, r1, r0, asr #10
   1f0bc:	andeq	pc, r1, r4, asr #7
   1f0c0:	andeq	pc, r1, r4, asr #7
   1f0c4:	andeq	pc, r1, r4, asr #7
   1f0c8:	andeq	pc, r1, r4, asr #7
   1f0cc:	andeq	pc, r1, r4, asr #7
   1f0d0:	andeq	pc, r1, r0, lsr #10
   1f0d4:	andeq	pc, r1, r0, lsr #10
   1f0d8:	andeq	pc, r1, r0, lsr #10
   1f0dc:	andeq	pc, r1, r0, lsr #10
   1f0e0:	andeq	pc, r1, r0, lsr #10
   1f0e4:	andeq	pc, r1, r0, lsr #10
   1f0e8:	andeq	pc, r1, r0, lsr #10
   1f0ec:	andeq	pc, r1, r0, lsr #10
   1f0f0:	andeq	pc, r1, r0, lsr #10
   1f0f4:	andeq	pc, r1, r4, asr #7
   1f0f8:	andeq	pc, r1, r4, asr #7
   1f0fc:	andeq	pc, r1, r0, lsl #10
   1f100:	andeq	pc, r1, r4, asr #7
   1f104:	andeq	pc, r1, r0, ror #9
   1f108:	andeq	pc, r1, r0, asr #9
   1f10c:	andeq	pc, r1, r4, asr #7
   1f110:	andeq	pc, r1, r4, asr #7
   1f114:	andeq	pc, r1, r0, lsr #9
   1f118:	andeq	pc, r1, r4, asr #7
   1f11c:	andeq	pc, r1, r4, asr #7
   1f120:	andeq	pc, r1, r4, asr #7
   1f124:	andeq	pc, r1, r4, asr #7
   1f128:	andeq	pc, r1, r4, asr #7
   1f12c:	andeq	pc, r1, r4, asr #7
   1f130:	andeq	pc, r1, r4, asr #7
   1f134:	andeq	pc, r1, r4, asr #7
   1f138:	andeq	pc, r1, r4, asr #7
   1f13c:	andeq	pc, r1, r4, asr #7
   1f140:	andeq	pc, r1, r4, asr #7
   1f144:	andeq	pc, r1, r4, asr #7
   1f148:	andeq	pc, r1, r4, asr #7
   1f14c:	andeq	pc, r1, r4, asr #7
   1f150:	andeq	pc, r1, r4, asr #7
   1f154:	andeq	pc, r1, r4, asr #7
   1f158:	andeq	pc, r1, r8, lsl #9
   1f15c:	andeq	pc, r1, r4, asr #7
   1f160:	andeq	pc, r1, r4, asr #7
   1f164:	andeq	pc, r1, r4, asr #7
   1f168:	andeq	pc, r1, r0, ror r4	; <UNPREDICTABLE>
   1f16c:	andeq	pc, r1, r4, asr #7
   1f170:	andeq	pc, r1, r4, asr #7
   1f174:	andeq	pc, r1, r4, asr #7
   1f178:	andeq	pc, r1, r4, asr #7
   1f17c:	andeq	pc, r1, r4, asr #7
   1f180:	andeq	pc, r1, r4, asr #7
   1f184:	andeq	pc, r1, r4, asr #7
   1f188:	andeq	pc, r1, r4, asr #7
   1f18c:	andeq	pc, r1, r0, asr r4	; <UNPREDICTABLE>
   1f190:	andeq	pc, r1, r4, asr #7
   1f194:	andeq	pc, r1, r0, lsr r4	; <UNPREDICTABLE>
   1f198:	andeq	pc, r1, r4, asr #7
   1f19c:	andeq	pc, r1, r4, asr #7
   1f1a0:	andeq	pc, r1, r4, asr #7
   1f1a4:	andeq	pc, r1, r4, asr #7
   1f1a8:	andeq	pc, r1, r4, asr #7
   1f1ac:	andeq	pc, r1, r4, asr #7
   1f1b0:	andeq	pc, r1, r4, asr #7
   1f1b4:	andeq	pc, r1, r4, asr #7
   1f1b8:	andeq	pc, r1, r4, asr #7
   1f1bc:	andeq	pc, r1, r4, asr #7
   1f1c0:	andeq	pc, r1, r4, asr #7
   1f1c4:	andeq	pc, r1, r4, asr #7
   1f1c8:	andeq	pc, r1, r4, asr #7
   1f1cc:	andeq	pc, r1, r4, asr #7
   1f1d0:	andeq	pc, r1, r4, asr #7
   1f1d4:	andeq	pc, r1, r4, asr #7
   1f1d8:	andeq	pc, r1, r8, lsl r4	; <UNPREDICTABLE>
   1f1dc:	andeq	pc, r1, r4, asr #7
   1f1e0:	andeq	pc, r1, r4, asr #7
   1f1e4:	andeq	pc, r1, r4, asr #7
   1f1e8:	andeq	pc, r1, r0, lsl #8
   1f1ec:	andeq	pc, r1, r4, asr #7
   1f1f0:	andeq	pc, r1, r4, asr #7
   1f1f4:	andeq	pc, r1, r4, asr #7
   1f1f8:	andeq	pc, r1, r4, ror #7
   1f1fc:	andeq	pc, r1, ip, asr #7
   1f200:	andeq	pc, r1, ip, lsr #7
   1f204:	add	r7, sl, r7
   1f208:	eor	r3, r8, #2048	; 0x800
   1f20c:	ldrb	r2, [r7, #-1]
   1f210:	ubfx	r3, r3, #11, #1
   1f214:	cmp	r2, #10
   1f218:	orrne	r3, r3, #1
   1f21c:	cmp	r3, #0
   1f220:	beq	1f2d8 <__assert_fail@plt+0xe030>
   1f224:	mov	r0, #1
   1f228:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f22c:	ldr	r3, [r6, #4]
   1f230:	mov	r0, #1
   1f234:	bic	r3, r3, #2097152	; 0x200000
   1f238:	bic	r3, r3, #255	; 0xff
   1f23c:	orr	r3, r3, #2097152	; 0x200000
   1f240:	orr	r3, r3, r0
   1f244:	str	r3, [r6, #4]
   1f248:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f24c:	bl	11170 <__ctype_b_loc@plt>
   1f250:	ldr	r1, [r0]
   1f254:	lsl	r3, r7, #1
   1f258:	ldrb	r2, [r6, #6]
   1f25c:	ldrh	r3, [r1, r3]
   1f260:	ubfx	r3, r3, #3, #1
   1f264:	cmp	r7, #95	; 0x5f
   1f268:	orreq	r3, r3, #1
   1f26c:	bfi	r2, r3, #6, #1
   1f270:	strb	r2, [r6, #6]
   1f274:	b	1f098 <__assert_fail@plt+0xddf0>
   1f278:	mov	r3, #5
   1f27c:	mov	r0, #1
   1f280:	strb	r3, [r6, #4]
   1f284:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f288:	movw	r3, #1026	; 0x402
   1f28c:	tst	r8, r3
   1f290:	bne	1f224 <__assert_fail@plt+0xdf7c>
   1f294:	mov	r3, #19
   1f298:	mov	r0, #1
   1f29c:	strb	r3, [r6, #4]
   1f2a0:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f2a4:	mov	r3, #20
   1f2a8:	mov	r0, #1
   1f2ac:	strb	r3, [r6, #4]
   1f2b0:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f2b4:	mov	r3, #8
   1f2b8:	movt	r3, #128	; 0x80
   1f2bc:	tst	r8, r3
   1f2c0:	moveq	r3, #1
   1f2c4:	movne	r3, #0
   1f2c8:	cmp	r7, #0
   1f2cc:	moveq	r3, #0
   1f2d0:	cmp	r3, #0
   1f2d4:	bne	1f204 <__assert_fail@plt+0xdf5c>
   1f2d8:	mov	r3, #12
   1f2dc:	mov	r2, #16
   1f2e0:	mov	r0, #1
   1f2e4:	str	r2, [r6]
   1f2e8:	strb	r3, [r6, #4]
   1f2ec:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f2f0:	mov	r3, #11
   1f2f4:	mov	r0, #1
   1f2f8:	strb	r3, [r6, #4]
   1f2fc:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f300:	tst	r8, #8192	; 0x2000
   1f304:	beq	1f224 <__assert_fail@plt+0xdf7c>
   1f308:	mov	r3, #8
   1f30c:	mov	r0, #1
   1f310:	strb	r3, [r6, #4]
   1f314:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f318:	tst	r8, #8192	; 0x2000
   1f31c:	beq	1f224 <__assert_fail@plt+0xdf7c>
   1f320:	mov	r3, #9
   1f324:	mov	r0, #1
   1f328:	strb	r3, [r6, #4]
   1f32c:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f330:	movw	r3, #1026	; 0x402
   1f334:	tst	r8, r3
   1f338:	bne	1f224 <__assert_fail@plt+0xdf7c>
   1f33c:	mov	r3, #18
   1f340:	mov	r0, #1
   1f344:	strb	r3, [r6, #4]
   1f348:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f34c:	and	r2, r8, #4608	; 0x1200
   1f350:	cmp	r2, #4608	; 0x1200
   1f354:	moveq	r3, #23
   1f358:	moveq	r0, #1
   1f35c:	strbeq	r3, [r6, #4]
   1f360:	bne	1f224 <__assert_fail@plt+0xdf7c>
   1f364:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f368:	and	r2, r8, #33792	; 0x8400
   1f36c:	cmp	r2, #32768	; 0x8000
   1f370:	bne	1f224 <__assert_fail@plt+0xdf7c>
   1f374:	mov	r3, #10
   1f378:	mov	r0, #1
   1f37c:	strb	r3, [r6, #4]
   1f380:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f384:	tst	r8, #2048	; 0x800
   1f388:	beq	1f224 <__assert_fail@plt+0xdf7c>
   1f38c:	b	1f374 <__assert_fail@plt+0xe0cc>
   1f390:	and	r2, r8, #4608	; 0x1200
   1f394:	cmp	r2, #4608	; 0x1200
   1f398:	moveq	r3, #24
   1f39c:	moveq	r0, #1
   1f3a0:	strbeq	r3, [r6, #4]
   1f3a4:	bne	1f224 <__assert_fail@plt+0xdf7c>
   1f3a8:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f3ac:	and	r2, r8, #4608	; 0x1200
   1f3b0:	cmp	r2, #512	; 0x200
   1f3b4:	moveq	r3, #24
   1f3b8:	moveq	r0, #2
   1f3bc:	strbeq	r3, [r6, #4]
   1f3c0:	beq	1efc8 <__assert_fail@plt+0xdd20>
   1f3c4:	mov	r0, #2
   1f3c8:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f3cc:	tst	r8, #33792	; 0x8400
   1f3d0:	bne	1f3c4 <__assert_fail@plt+0xe11c>
   1f3d4:	mov	r3, #10
   1f3d8:	mov	r0, #2
   1f3dc:	strb	r3, [r6, #4]
   1f3e0:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f3e4:	and	r2, r8, #4608	; 0x1200
   1f3e8:	cmp	r2, #512	; 0x200
   1f3ec:	moveq	r3, #23
   1f3f0:	moveq	r0, #2
   1f3f4:	strbeq	r3, [r6, #4]
   1f3f8:	bne	1f3c4 <__assert_fail@plt+0xe11c>
   1f3fc:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f400:	tst	r8, #524288	; 0x80000
   1f404:	bne	1f3c4 <__assert_fail@plt+0xe11c>
   1f408:	mov	r3, #32
   1f40c:	mov	r0, #2
   1f410:	strb	r3, [r6, #4]
   1f414:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f418:	tst	r8, #524288	; 0x80000
   1f41c:	bne	1f3c4 <__assert_fail@plt+0xe11c>
   1f420:	mov	r3, #34	; 0x22
   1f424:	mov	r0, #2
   1f428:	strb	r3, [r6, #4]
   1f42c:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f430:	tst	r8, #524288	; 0x80000
   1f434:	bne	1f3c4 <__assert_fail@plt+0xe11c>
   1f438:	mov	r3, #12
   1f43c:	mov	r2, #256	; 0x100
   1f440:	mov	r0, #2
   1f444:	str	r2, [r6]
   1f448:	strb	r3, [r6, #4]
   1f44c:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f450:	tst	r8, #524288	; 0x80000
   1f454:	bne	1f3c4 <__assert_fail@plt+0xe11c>
   1f458:	mov	r3, #12
   1f45c:	mov	r2, #64	; 0x40
   1f460:	mov	r0, #2
   1f464:	str	r2, [r6]
   1f468:	strb	r3, [r6, #4]
   1f46c:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f470:	tst	r8, #524288	; 0x80000
   1f474:	bne	1f3c4 <__assert_fail@plt+0xe11c>
   1f478:	mov	r3, #33	; 0x21
   1f47c:	mov	r0, #2
   1f480:	strb	r3, [r6, #4]
   1f484:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f488:	tst	r8, #524288	; 0x80000
   1f48c:	bne	1f3c4 <__assert_fail@plt+0xe11c>
   1f490:	mov	r3, #35	; 0x23
   1f494:	mov	r0, #2
   1f498:	strb	r3, [r6, #4]
   1f49c:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f4a0:	tst	r8, #524288	; 0x80000
   1f4a4:	bne	1f3c4 <__assert_fail@plt+0xe11c>
   1f4a8:	mov	r3, #12
   1f4ac:	mov	r2, #512	; 0x200
   1f4b0:	mov	r0, #2
   1f4b4:	str	r2, [r6]
   1f4b8:	strb	r3, [r6, #4]
   1f4bc:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f4c0:	movw	r2, #1026	; 0x402
   1f4c4:	and	r2, r2, r8
   1f4c8:	cmp	r2, #2
   1f4cc:	moveq	r3, #19
   1f4d0:	moveq	r0, r2
   1f4d4:	strbeq	r3, [r6, #4]
   1f4d8:	bne	1f3c4 <__assert_fail@plt+0xe11c>
   1f4dc:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f4e0:	tst	r8, #524288	; 0x80000
   1f4e4:	bne	1f3c4 <__assert_fail@plt+0xe11c>
   1f4e8:	mov	r3, #12
   1f4ec:	mov	r2, #9
   1f4f0:	mov	r0, #2
   1f4f4:	str	r2, [r6]
   1f4f8:	strb	r3, [r6, #4]
   1f4fc:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f500:	tst	r8, #524288	; 0x80000
   1f504:	bne	1f3c4 <__assert_fail@plt+0xe11c>
   1f508:	mov	r3, #12
   1f50c:	mov	r2, #6
   1f510:	mov	r0, #2
   1f514:	str	r2, [r6]
   1f518:	strb	r3, [r6, #4]
   1f51c:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f520:	tst	r8, #16384	; 0x4000
   1f524:	bne	1f3c4 <__assert_fail@plt+0xe11c>
   1f528:	sub	r7, r7, #49	; 0x31
   1f52c:	mov	r3, #4
   1f530:	mov	r0, #2
   1f534:	str	r7, [r6]
   1f538:	strb	r3, [r6, #4]
   1f53c:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f540:	movw	r2, #1026	; 0x402
   1f544:	and	r2, r2, r8
   1f548:	cmp	r2, #2
   1f54c:	moveq	r3, #18
   1f550:	moveq	r0, r2
   1f554:	strbeq	r3, [r6, #4]
   1f558:	bne	1f3c4 <__assert_fail@plt+0xe11c>
   1f55c:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f560:	tst	r8, #8192	; 0x2000
   1f564:	bne	1f3c4 <__assert_fail@plt+0xe11c>
   1f568:	mov	r3, #9
   1f56c:	mov	r0, #2
   1f570:	strb	r3, [r6, #4]
   1f574:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f578:	tst	r8, #524288	; 0x80000
   1f57c:	bne	1f3c4 <__assert_fail@plt+0xe11c>
   1f580:	mov	r3, #12
   1f584:	mov	r2, #128	; 0x80
   1f588:	mov	r0, #2
   1f58c:	str	r2, [r6]
   1f590:	strb	r3, [r6, #4]
   1f594:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f598:	tst	r8, #8192	; 0x2000
   1f59c:	bne	1f3c4 <__assert_fail@plt+0xe11c>
   1f5a0:	mov	r3, #8
   1f5a4:	mov	r0, #2
   1f5a8:	strb	r3, [r6, #4]
   1f5ac:	b	1efc8 <__assert_fail@plt+0xdd20>
   1f5b0:	cmp	r2, #1
   1f5b4:	ble	1f5e8 <__assert_fail@plt+0xe340>
   1f5b8:	ldr	r1, [r5, #8]
   1f5bc:	ldr	r0, [r1, r3, lsl #2]
   1f5c0:	add	r1, r1, r3, lsl #2
   1f5c4:	cmn	r0, #1
   1f5c8:	beq	1f624 <__assert_fail@plt+0xe37c>
   1f5cc:	ldr	r0, [r5, #28]
   1f5d0:	add	r7, r7, #2
   1f5d4:	cmp	r0, r7
   1f5d8:	beq	1f5e8 <__assert_fail@plt+0xe340>
   1f5dc:	ldr	r0, [r1, #4]
   1f5e0:	cmn	r0, #1
   1f5e4:	beq	1f624 <__assert_fail@plt+0xe37c>
   1f5e8:	ldrb	r0, [r5, #76]	; 0x4c
   1f5ec:	ldr	r1, [r5]
   1f5f0:	ldr	ip, [r5, #24]
   1f5f4:	cmp	r0, #0
   1f5f8:	beq	1f618 <__assert_fail@plt+0xe370>
   1f5fc:	ldr	r0, [r5, #12]
   1f600:	add	r1, r1, ip
   1f604:	ldr	r0, [r0, r3, lsl #2]
   1f608:	ldrb	r7, [r1, r0]
   1f60c:	tst	r7, #128	; 0x80
   1f610:	beq	1f050 <__assert_fail@plt+0xdda8>
   1f614:	b	1f04c <__assert_fail@plt+0xdda4>
   1f618:	add	r1, r1, r3
   1f61c:	ldrb	r7, [r1, ip]
   1f620:	b	1f050 <__assert_fail@plt+0xdda8>
   1f624:	ldrb	r7, [sl, r3]
   1f628:	mov	r3, #1
   1f62c:	strb	r7, [r6]
   1f630:	strb	r3, [r6, #4]
   1f634:	b	1f06c <__assert_fail@plt+0xddc4>
   1f638:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1f63c:	mov	r5, r0
   1f640:	mov	r4, r1
   1f644:	strd	r6, [sp, #8]
   1f648:	mov	r7, r2
   1f64c:	mvn	r6, #0
   1f650:	str	r8, [sp, #16]
   1f654:	movw	r8, #32816	; 0x8030
   1f658:	str	lr, [sp, #20]
   1f65c:	mov	r2, r7
   1f660:	mov	r1, r5
   1f664:	mov	r0, r4
   1f668:	bl	1eccc <__assert_fail@plt+0xda24>
   1f66c:	ldr	r3, [r5, #40]	; 0x28
   1f670:	ldrb	r2, [r4, #4]
   1f674:	ldrb	r1, [r4]
   1f678:	add	r0, r3, r0
   1f67c:	cmp	r2, #2
   1f680:	str	r0, [r5, #40]	; 0x28
   1f684:	beq	1f6ec <__assert_fail@plt+0xe444>
   1f688:	cmp	r1, #44	; 0x2c
   1f68c:	cmpne	r2, #24
   1f690:	beq	1f6f0 <__assert_fail@plt+0xe448>
   1f694:	cmp	r2, #1
   1f698:	beq	1f6a4 <__assert_fail@plt+0xe3fc>
   1f69c:	mvn	r6, #1
   1f6a0:	b	1f65c <__assert_fail@plt+0xe3b4>
   1f6a4:	sub	r2, r1, #48	; 0x30
   1f6a8:	uxtb	r0, r2
   1f6ac:	cmp	r0, #9
   1f6b0:	movhi	r3, #0
   1f6b4:	movls	r3, #1
   1f6b8:	cmn	r6, #2
   1f6bc:	moveq	r3, #0
   1f6c0:	cmp	r3, #0
   1f6c4:	beq	1f69c <__assert_fail@plt+0xe3f4>
   1f6c8:	cmn	r6, #1
   1f6cc:	add	r3, r6, r6, lsl #2
   1f6d0:	moveq	r6, r2
   1f6d4:	beq	1f65c <__assert_fail@plt+0xe3b4>
   1f6d8:	add	r6, r1, r3, lsl #1
   1f6dc:	cmp	r6, r8
   1f6e0:	movge	r6, r8
   1f6e4:	sub	r6, r6, #48	; 0x30
   1f6e8:	b	1f65c <__assert_fail@plt+0xe3b4>
   1f6ec:	mvn	r6, #1
   1f6f0:	mov	r0, r6
   1f6f4:	ldrd	r4, [sp]
   1f6f8:	ldrd	r6, [sp, #8]
   1f6fc:	ldr	r8, [sp, #16]
   1f700:	add	sp, sp, #20
   1f704:	pop	{pc}		; (ldr pc, [sp], #4)
   1f708:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f70c:	mov	r4, r1
   1f710:	ldr	r5, [r1, #40]	; 0x28
   1f714:	strd	r6, [sp, #8]
   1f718:	mov	r6, r0
   1f71c:	strd	r8, [sp, #16]
   1f720:	mov	r8, r2
   1f724:	mov	r9, r3
   1f728:	ldr	r2, [r1, #80]	; 0x50
   1f72c:	strd	sl, [sp, #24]
   1f730:	str	lr, [sp, #32]
   1f734:	sub	sp, sp, #12
   1f738:	ldrb	r7, [sp, #52]	; 0x34
   1f73c:	cmp	r2, #1
   1f740:	beq	1f758 <__assert_fail@plt+0xe4b0>
   1f744:	mov	r1, r5
   1f748:	mov	r0, r4
   1f74c:	bl	169fc <__assert_fail@plt+0x5754>
   1f750:	cmp	r0, #1
   1f754:	bgt	1f7b8 <__assert_fail@plt+0xe510>
   1f758:	ldrb	r2, [r8, #4]
   1f75c:	add	r5, r5, r9
   1f760:	str	r5, [r4, #40]	; 0x28
   1f764:	and	r3, r2, #251	; 0xfb
   1f768:	cmp	r2, #28
   1f76c:	cmpne	r3, #26
   1f770:	beq	1f7d8 <__assert_fail@plt+0xe530>
   1f774:	cmp	r2, #22
   1f778:	moveq	r2, r7
   1f77c:	orrne	r2, r7, #1
   1f780:	cmp	r2, #0
   1f784:	beq	1f920 <__assert_fail@plt+0xe678>
   1f788:	ldrb	r2, [r8]
   1f78c:	mov	r3, #0
   1f790:	mov	r0, r3
   1f794:	str	r3, [r6]
   1f798:	strb	r2, [r6, #4]
   1f79c:	add	sp, sp, #12
   1f7a0:	ldrd	r4, [sp]
   1f7a4:	ldrd	r6, [sp, #8]
   1f7a8:	ldrd	r8, [sp, #16]
   1f7ac:	ldrd	sl, [sp, #24]
   1f7b0:	add	sp, sp, #32
   1f7b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f7b8:	ldr	r2, [r4, #8]
   1f7bc:	add	r3, r5, r0
   1f7c0:	mov	r1, #1
   1f7c4:	mov	r0, #0
   1f7c8:	ldr	r2, [r2, r5, lsl #2]
   1f7cc:	stm	r6, {r1, r2}
   1f7d0:	str	r3, [r4, #40]	; 0x28
   1f7d4:	b	1f79c <__assert_fail@plt+0xe4f4>
   1f7d8:	ldr	sl, [r4, #56]	; 0x38
   1f7dc:	cmp	r5, sl
   1f7e0:	bge	1f880 <__assert_fail@plt+0xe5d8>
   1f7e4:	ldrb	fp, [r8]
   1f7e8:	mov	r9, #0
   1f7ec:	b	1f810 <__assert_fail@plt+0xe568>
   1f7f0:	ldr	r3, [r6, #4]
   1f7f4:	strb	r7, [r3, r9]
   1f7f8:	add	r9, r9, #1
   1f7fc:	cmp	r9, #32
   1f800:	beq	1f880 <__assert_fail@plt+0xe5d8>
   1f804:	ldrb	r2, [r8, #4]
   1f808:	ldr	r5, [r4, #40]	; 0x28
   1f80c:	ldr	sl, [r4, #56]	; 0x38
   1f810:	cmp	r2, #30
   1f814:	beq	1f888 <__assert_fail@plt+0xe5e0>
   1f818:	ldr	r2, [r4, #4]
   1f81c:	add	r3, r5, #1
   1f820:	str	r3, [r4, #40]	; 0x28
   1f824:	ldrb	r7, [r2, r5]
   1f828:	cmp	sl, r3
   1f82c:	ble	1f880 <__assert_fail@plt+0xe5d8>
   1f830:	cmp	fp, r7
   1f834:	bne	1f7f0 <__assert_fail@plt+0xe548>
   1f838:	ldr	r2, [r4, #4]
   1f83c:	ldrb	r2, [r2, r3]
   1f840:	cmp	r2, #93	; 0x5d
   1f844:	bne	1f7f0 <__assert_fail@plt+0xe548>
   1f848:	ldr	r2, [r6, #4]
   1f84c:	add	r3, r3, #1
   1f850:	mov	r0, #0
   1f854:	str	r3, [r4, #40]	; 0x28
   1f858:	strb	r0, [r2, r9]
   1f85c:	ldrb	r3, [r8, #4]
   1f860:	cmp	r3, #28
   1f864:	beq	1f950 <__assert_fail@plt+0xe6a8>
   1f868:	cmp	r3, #30
   1f86c:	beq	1f944 <__assert_fail@plt+0xe69c>
   1f870:	cmp	r3, #26
   1f874:	moveq	r3, #3
   1f878:	streq	r3, [r6]
   1f87c:	b	1f79c <__assert_fail@plt+0xe4f4>
   1f880:	mov	r0, #7
   1f884:	b	1f79c <__assert_fail@plt+0xe4f4>
   1f888:	ldrb	r3, [r4, #75]	; 0x4b
   1f88c:	cmp	r3, #0
   1f890:	beq	1f818 <__assert_fail@plt+0xe570>
   1f894:	ldrb	r3, [r4, #76]	; 0x4c
   1f898:	cmp	r3, #0
   1f89c:	beq	1f904 <__assert_fail@plt+0xe65c>
   1f8a0:	ldr	r3, [r4, #28]
   1f8a4:	lsl	r2, r5, #2
   1f8a8:	cmp	r5, r3
   1f8ac:	beq	1f8c0 <__assert_fail@plt+0xe618>
   1f8b0:	ldr	r3, [r4, #8]
   1f8b4:	ldr	r3, [r3, r5, lsl #2]
   1f8b8:	cmn	r3, #1
   1f8bc:	beq	1f818 <__assert_fail@plt+0xe570>
   1f8c0:	ldr	r3, [r4]
   1f8c4:	ldr	r1, [r4, #12]
   1f8c8:	ldr	r1, [r1, r2]
   1f8cc:	ldr	r2, [r4, #24]
   1f8d0:	add	r3, r3, r1
   1f8d4:	ldrb	r7, [r3, r2]
   1f8d8:	tst	r7, #128	; 0x80
   1f8dc:	bne	1f818 <__assert_fail@plt+0xe570>
   1f8e0:	ldr	r0, [r4, #80]	; 0x50
   1f8e4:	cmp	r0, #1
   1f8e8:	beq	1f8f8 <__assert_fail@plt+0xe650>
   1f8ec:	mov	r1, r5
   1f8f0:	mov	r0, r4
   1f8f4:	bl	169fc <__assert_fail@plt+0x5754>
   1f8f8:	add	r3, r5, r0
   1f8fc:	str	r3, [r4, #40]	; 0x28
   1f900:	b	1f828 <__assert_fail@plt+0xe580>
   1f904:	ldr	r2, [r4]
   1f908:	add	r3, r5, #1
   1f90c:	ldr	r1, [r4, #24]
   1f910:	str	r3, [r4, #40]	; 0x28
   1f914:	add	r5, r2, r5
   1f918:	ldrb	r7, [r5, r1]
   1f91c:	b	1f828 <__assert_fail@plt+0xe580>
   1f920:	mov	r1, r4
   1f924:	mov	r0, sp
   1f928:	ldr	r2, [sp, #48]	; 0x30
   1f92c:	bl	14e50 <__assert_fail@plt+0x3ba8>
   1f930:	ldrb	r3, [sp, #4]
   1f934:	cmp	r3, #21
   1f938:	movne	r0, #11
   1f93c:	beq	1f788 <__assert_fail@plt+0xe4e0>
   1f940:	b	1f79c <__assert_fail@plt+0xe4f4>
   1f944:	mov	r3, #4
   1f948:	str	r3, [r6]
   1f94c:	b	1f79c <__assert_fail@plt+0xe4f4>
   1f950:	mov	r3, #2
   1f954:	str	r3, [r6]
   1f958:	b	1f79c <__assert_fail@plt+0xe4f4>
   1f95c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f960:	mov	r5, r1
   1f964:	strd	r6, [sp, #8]
   1f968:	strd	r8, [sp, #16]
   1f96c:	strd	sl, [sp, #24]
   1f970:	mov	fp, r2
   1f974:	mov	sl, r0
   1f978:	str	lr, [sp, #32]
   1f97c:	sub	sp, sp, #164	; 0xa4
   1f980:	ldrb	r2, [r2, #4]
   1f984:	str	r3, [sp, #20]
   1f988:	ldr	r3, [r1]
   1f98c:	str	r3, [sp, #32]
   1f990:	sub	r3, r2, #1
   1f994:	cmp	r3, #35	; 0x23
   1f998:	ldrls	pc, [pc, r3, lsl #2]
   1f99c:	b	204ec <__assert_fail@plt+0xf244>
   1f9a0:	andeq	r0, r2, r4, ror #6
   1f9a4:	muleq	r1, r0, sp
   1f9a8:	andeq	r0, r2, ip, ror #9
   1f9ac:	andeq	r0, r2, r4, lsl #10
   1f9b0:	andeq	r0, r2, r0, ror r5
   1f9b4:	andeq	r0, r2, ip, ror #9
   1f9b8:	andeq	r0, r2, ip, ror #9
   1f9bc:	andeq	pc, r1, ip, ror #25
   1f9c0:			; <UNDEFINED> instruction: 0x000205b4
   1f9c4:	muleq	r1, r0, sp
   1f9c8:	andeq	pc, r1, ip, lsr sl	; <UNPREDICTABLE>
   1f9cc:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f9d0:	andeq	r0, r2, ip, ror #9
   1f9d4:	andeq	r0, r2, ip, ror #9
   1f9d8:	andeq	r0, r2, ip, ror #9
   1f9dc:	andeq	r0, r2, ip, ror #9
   1f9e0:	andeq	r0, r2, ip, ror #9
   1f9e4:	andeq	pc, r1, ip, lsr sl	; <UNPREDICTABLE>
   1f9e8:	andeq	pc, r1, ip, lsr sl	; <UNPREDICTABLE>
   1f9ec:	andeq	r0, r2, ip, lsr r2
   1f9f0:	andeq	r0, r2, ip, ror #9
   1f9f4:	andeq	r0, r2, ip, ror #9
   1f9f8:	andeq	pc, r1, r0, lsr sl	; <UNPREDICTABLE>
   1f9fc:	andeq	pc, r1, r8, asr sl	; <UNPREDICTABLE>
   1fa00:	andeq	r0, r2, ip, ror #9
   1fa04:	andeq	r0, r2, ip, ror #9
   1fa08:	andeq	r0, r2, ip, ror #9
   1fa0c:	andeq	r0, r2, ip, ror #9
   1fa10:	andeq	r0, r2, ip, ror #9
   1fa14:	andeq	r0, r2, ip, ror #9
   1fa18:	andeq	r0, r2, ip, ror #9
   1fa1c:	andeq	r0, r2, r0, ror r4
   1fa20:	andeq	r0, r2, r0, ror r4
   1fa24:	andeq	r0, r2, ip, asr #9
   1fa28:	andeq	r0, r2, ip, asr #9
   1fa2c:	andeq	r0, r2, ip, ror #9
   1fa30:	ldr	r3, [sp, #20]
   1fa34:	tst	r3, #16777216	; 0x1000000
   1fa38:	bne	1fcb8 <__assert_fail@plt+0xea10>
   1fa3c:	ldr	r3, [sp, #20]
   1fa40:	tst	r3, #32
   1fa44:	bne	1fcb8 <__assert_fail@plt+0xea10>
   1fa48:	tst	r3, #16
   1fa4c:	bne	207cc <__assert_fail@plt+0xf524>
   1fa50:	cmp	r2, #9
   1fa54:	beq	205b4 <__assert_fail@plt+0xf30c>
   1fa58:	ldr	ip, [sp, #32]
   1fa5c:	mov	r0, #1
   1fa60:	mov	r3, #0
   1fa64:	mov	r2, r3
   1fa68:	str	fp, [sp]
   1fa6c:	strb	r0, [fp, #4]
   1fa70:	add	r1, ip, #64	; 0x40
   1fa74:	add	r0, ip, #56	; 0x38
   1fa78:	bl	171c4 <__assert_fail@plt+0x5f1c>
   1fa7c:	subs	r3, r0, #0
   1fa80:	str	r3, [sp, #24]
   1fa84:	beq	20458 <__assert_fail@plt+0xf1b0>
   1fa88:	mov	r1, sl
   1fa8c:	mov	r0, fp
   1fa90:	ldr	r2, [sp, #20]
   1fa94:	bl	1eccc <__assert_fail@plt+0xda24>
   1fa98:	ldr	r3, [sl, #40]	; 0x28
   1fa9c:	ldrb	r5, [fp, #4]
   1faa0:	add	r0, r3, r0
   1faa4:	str	r0, [sl, #40]	; 0x28
   1faa8:	cmp	r5, #23
   1faac:	cmpne	r5, #11
   1fab0:	sub	r2, r5, #18
   1fab4:	moveq	r3, #1
   1fab8:	movne	r3, #0
   1fabc:	cmp	r2, #1
   1fac0:	orrls	r3, r3, #1
   1fac4:	sub	r4, r5, #18
   1fac8:	clz	r4, r4
   1facc:	cmp	r3, #0
   1fad0:	lsr	r4, r4, #5
   1fad4:	beq	1fccc <__assert_fail@plt+0xea24>
   1fad8:	ldrd	r2, [fp]
   1fadc:	cmp	r5, #23
   1fae0:	add	r7, sp, #96	; 0x60
   1fae4:	ldr	r6, [sl, #40]	; 0x28
   1fae8:	strd	r2, [sp, #96]	; 0x60
   1faec:	beq	1fee0 <__assert_fail@plt+0xec38>
   1faf0:	cmp	r5, #19
   1faf4:	beq	1fe60 <__assert_fail@plt+0xebb8>
   1faf8:	mov	r1, sl
   1fafc:	mov	r0, fp
   1fb00:	ldr	r2, [sp, #20]
   1fb04:	bl	1eccc <__assert_fail@plt+0xda24>
   1fb08:	ldr	r3, [sl, #40]	; 0x28
   1fb0c:	ldr	r2, [sp, #24]
   1fb10:	add	r0, r3, r0
   1fb14:	cmp	r2, #0
   1fb18:	str	r0, [sl, #40]	; 0x28
   1fb1c:	beq	1ff58 <__assert_fail@plt+0xecb0>
   1fb20:	cmp	r5, #18
   1fb24:	beq	200b0 <__assert_fail@plt+0xee08>
   1fb28:	ldr	r6, [sp, #24]
   1fb2c:	ldrb	r3, [r6, #24]
   1fb30:	cmp	r3, #17
   1fb34:	beq	1feac <__assert_fail@plt+0xec04>
   1fb38:	mov	r4, #0
   1fb3c:	mvn	r9, #0
   1fb40:	str	r4, [sp, #36]	; 0x24
   1fb44:	mov	r3, #11
   1fb48:	ldr	r2, [sp, #32]
   1fb4c:	mov	r0, #0
   1fb50:	mov	r1, #0
   1fb54:	add	r5, sp, #128	; 0x80
   1fb58:	str	r5, [sp]
   1fb5c:	strd	r0, [sp, #128]	; 0x80
   1fb60:	add	r7, r2, #56	; 0x38
   1fb64:	add	r8, r2, #64	; 0x40
   1fb68:	strb	r3, [sp, #132]	; 0x84
   1fb6c:	mov	r2, r6
   1fb70:	mov	r0, r7
   1fb74:	mov	r1, r8
   1fb78:	mov	r3, #0
   1fb7c:	bl	171c4 <__assert_fail@plt+0x5f1c>
   1fb80:	subs	r2, r0, #0
   1fb84:	beq	1fe34 <__assert_fail@plt+0xeb8c>
   1fb88:	add	r4, r4, #2
   1fb8c:	cmp	r4, r9
   1fb90:	bgt	1fc30 <__assert_fail@plt+0xe988>
   1fb94:	strd	sl, [sp, #40]	; 0x28
   1fb98:	mov	sl, r2
   1fb9c:	mov	r0, r6
   1fba0:	ldr	r1, [sp, #32]
   1fba4:	mov	fp, #0
   1fba8:	bl	17294 <__assert_fail@plt+0x5fec>
   1fbac:	mov	r2, sl
   1fbb0:	mov	sl, #0
   1fbb4:	str	r5, [sp]
   1fbb8:	mov	ip, #16
   1fbbc:	mov	r3, r0
   1fbc0:	mov	r6, r0
   1fbc4:	mov	r1, r8
   1fbc8:	strd	sl, [r5]
   1fbcc:	mov	r0, r7
   1fbd0:	strb	ip, [sp, #132]	; 0x84
   1fbd4:	add	r4, r4, #1
   1fbd8:	bl	171c4 <__assert_fail@plt+0x5f1c>
   1fbdc:	clz	r3, r0
   1fbe0:	cmp	r6, #0
   1fbe4:	lsr	r3, r3, #5
   1fbe8:	moveq	ip, #1
   1fbec:	mov	r2, r0
   1fbf0:	mov	r1, r8
   1fbf4:	mov	r0, r7
   1fbf8:	movne	ip, r3
   1fbfc:	subs	r3, ip, #0
   1fc00:	bne	1fe34 <__assert_fail@plt+0xeb8c>
   1fc04:	mov	ip, #10
   1fc08:	str	r5, [sp]
   1fc0c:	strd	sl, [r5]
   1fc10:	strb	ip, [sp, #132]	; 0x84
   1fc14:	bl	171c4 <__assert_fail@plt+0x5f1c>
   1fc18:	subs	sl, r0, #0
   1fc1c:	beq	1fe34 <__assert_fail@plt+0xeb8c>
   1fc20:	cmp	r4, r9
   1fc24:	ble	1fb9c <__assert_fail@plt+0xe8f4>
   1fc28:	mov	r2, sl
   1fc2c:	ldrd	sl, [sp, #40]	; 0x28
   1fc30:	ldr	r1, [sp, #36]	; 0x24
   1fc34:	cmp	r1, #0
   1fc38:	beq	200a8 <__assert_fail@plt+0xee00>
   1fc3c:	mov	r3, r2
   1fc40:	mov	r9, #0
   1fc44:	str	r5, [sp]
   1fc48:	mov	r2, r1
   1fc4c:	mov	r1, r8
   1fc50:	mov	r8, #0
   1fc54:	mov	ip, #16
   1fc58:	mov	r0, r7
   1fc5c:	strd	r8, [r5]
   1fc60:	strb	ip, [sp, #132]	; 0x84
   1fc64:	bl	171c4 <__assert_fail@plt+0x5f1c>
   1fc68:	ldr	r3, [sp, #204]	; 0xcc
   1fc6c:	ldr	r3, [r3]
   1fc70:	cmp	r3, #0
   1fc74:	bne	1ff4c <__assert_fail@plt+0xeca4>
   1fc78:	str	r0, [sp, #24]
   1fc7c:	ldr	r3, [sp, #20]
   1fc80:	ldrb	r5, [fp, #4]
   1fc84:	tst	r3, #16777216	; 0x1000000
   1fc88:	beq	1faa8 <__assert_fail@plt+0xe800>
   1fc8c:	cmp	r5, #11
   1fc90:	cmpne	r5, #23
   1fc94:	bne	1faa8 <__assert_fail@plt+0xe800>
   1fc98:	ldr	r3, [sp, #24]
   1fc9c:	cmp	r3, #0
   1fca0:	beq	1fcb8 <__assert_fail@plt+0xea10>
   1fca4:	movw	r1, #24224	; 0x5ea0
   1fca8:	movt	r1, #1
   1fcac:	mov	r0, r3
   1fcb0:	mov	r2, #0
   1fcb4:	bl	14dbc <__assert_fail@plt+0x3b14>
   1fcb8:	mov	r2, #0
   1fcbc:	mov	r3, #13
   1fcc0:	str	r2, [sp, #24]
   1fcc4:	ldr	r2, [sp, #204]	; 0xcc
   1fcc8:	str	r3, [r2]
   1fccc:	ldr	r0, [sp, #24]
   1fcd0:	add	sp, sp, #164	; 0xa4
   1fcd4:	ldrd	r4, [sp]
   1fcd8:	ldrd	r6, [sp, #8]
   1fcdc:	ldrd	r8, [sp, #16]
   1fce0:	ldrd	sl, [sp, #24]
   1fce4:	add	sp, sp, #32
   1fce8:	pop	{pc}		; (ldr pc, [sp], #4)
   1fcec:	ldr	r4, [r5, #24]
   1fcf0:	mov	r1, r0
   1fcf4:	mov	r0, fp
   1fcf8:	ldr	r6, [sp, #20]
   1fcfc:	add	r3, r4, #1
   1fd00:	orr	r2, r6, #8388608	; 0x800000
   1fd04:	str	r3, [r5, #24]
   1fd08:	bl	1eccc <__assert_fail@plt+0xda24>
   1fd0c:	ldr	r3, [sl, #40]	; 0x28
   1fd10:	ldrb	r2, [fp, #4]
   1fd14:	add	r3, r3, r0
   1fd18:	cmp	r2, #9
   1fd1c:	str	r3, [sl, #40]	; 0x28
   1fd20:	moveq	r2, #0
   1fd24:	beq	205d4 <__assert_fail@plt+0xf32c>
   1fd28:	ldr	r3, [sp, #200]	; 0xc8
   1fd2c:	mov	r2, fp
   1fd30:	mov	r1, r5
   1fd34:	add	r0, r3, #1
   1fd38:	ldr	r3, [sp, #204]	; 0xcc
   1fd3c:	stm	sp, {r0, r3}
   1fd40:	mov	r3, r6
   1fd44:	mov	r0, sl
   1fd48:	bl	210a0 <__assert_fail@plt+0xfdf8>
   1fd4c:	ldr	r3, [sp, #204]	; 0xcc
   1fd50:	mov	r2, r0
   1fd54:	ldr	r3, [r3]
   1fd58:	cmp	r3, #0
   1fd5c:	bne	1fd90 <__assert_fail@plt+0xeae8>
   1fd60:	ldrb	r1, [fp, #4]
   1fd64:	cmp	r1, #9
   1fd68:	beq	205d4 <__assert_fail@plt+0xf32c>
   1fd6c:	cmp	r0, #0
   1fd70:	beq	1fd84 <__assert_fail@plt+0xeadc>
   1fd74:	movw	r1, #24224	; 0x5ea0
   1fd78:	movt	r1, #1
   1fd7c:	mov	r2, r3
   1fd80:	bl	14dbc <__assert_fail@plt+0x3b14>
   1fd84:	ldr	r2, [sp, #204]	; 0xcc
   1fd88:	mov	r3, #8
   1fd8c:	str	r3, [r2]
   1fd90:	mov	r3, #0
   1fd94:	str	r3, [sp, #24]
   1fd98:	b	1fccc <__assert_fail@plt+0xea24>
   1fd9c:	cmp	r4, #0
   1fda0:	ble	20eac <__assert_fail@plt+0xfc04>
   1fda4:	cmp	r4, #1
   1fda8:	beq	20e48 <__assert_fail@plt+0xfba0>
   1fdac:	ldr	r6, [sp, #24]
   1fdb0:	mov	r7, #2
   1fdb4:	add	r5, sp, #128	; 0x80
   1fdb8:	str	r9, [sp, #36]	; 0x24
   1fdbc:	ldr	r3, [sp, #32]
   1fdc0:	strd	sl, [sp, #40]	; 0x28
   1fdc4:	mov	r9, r6
   1fdc8:	add	r1, r3, #56	; 0x38
   1fdcc:	add	r3, r3, #64	; 0x40
   1fdd0:	mov	sl, r3
   1fdd4:	mov	fp, r1
   1fdd8:	b	1fde4 <__assert_fail@plt+0xeb3c>
   1fddc:	cmp	r7, r4
   1fde0:	bgt	20094 <__assert_fail@plt+0xedec>
   1fde4:	mov	r0, r6
   1fde8:	ldr	r1, [sp, #32]
   1fdec:	mov	r8, #0
   1fdf0:	bl	17294 <__assert_fail@plt+0x5fec>
   1fdf4:	mov	r2, r9
   1fdf8:	mov	r9, #0
   1fdfc:	str	r5, [sp]
   1fe00:	mov	ip, #16
   1fe04:	mov	r6, r0
   1fe08:	mov	r3, r0
   1fe0c:	mov	r1, sl
   1fe10:	strd	r8, [r5]
   1fe14:	mov	r0, fp
   1fe18:	strb	ip, [sp, #132]	; 0x84
   1fe1c:	add	r7, r7, #1
   1fe20:	bl	171c4 <__assert_fail@plt+0x5f1c>
   1fe24:	cmp	r0, #0
   1fe28:	cmpne	r6, #0
   1fe2c:	mov	r9, r0
   1fe30:	bne	1fddc <__assert_fail@plt+0xeb34>
   1fe34:	ldr	r2, [sp, #204]	; 0xcc
   1fe38:	mov	r3, #12
   1fe3c:	str	r3, [r2]
   1fe40:	movw	r1, #24224	; 0x5ea0
   1fe44:	movt	r1, #1
   1fe48:	ldr	r0, [sp, #24]
   1fe4c:	mov	r2, #0
   1fe50:	bl	14dbc <__assert_fail@plt+0x3b14>
   1fe54:	mov	r3, #0
   1fe58:	str	r3, [sp, #24]
   1fe5c:	b	1fccc <__assert_fail@plt+0xea24>
   1fe60:	mov	r1, sl
   1fe64:	mov	r0, fp
   1fe68:	ldr	r2, [sp, #20]
   1fe6c:	bl	1eccc <__assert_fail@plt+0xda24>
   1fe70:	ldr	r3, [sl, #40]	; 0x28
   1fe74:	ldr	r2, [sp, #24]
   1fe78:	add	r0, r3, r0
   1fe7c:	cmp	r2, #0
   1fe80:	str	r0, [sl, #40]	; 0x28
   1fe84:	beq	1ff58 <__assert_fail@plt+0xecb0>
   1fe88:	ldr	r6, [sp, #24]
   1fe8c:	ldrb	r3, [r6, #24]
   1fe90:	cmp	r3, #17
   1fe94:	beq	20edc <__assert_fail@plt+0xfc34>
   1fe98:	mov	r3, #0
   1fe9c:	mov	r9, #1
   1fea0:	str	r3, [sp, #36]	; 0x24
   1fea4:	mov	r3, #10
   1fea8:	b	1fb48 <__assert_fail@plt+0xe8a0>
   1feac:	ldr	r6, [sp, #24]
   1feb0:	mov	r3, #0
   1feb4:	mvn	r9, #0
   1feb8:	mov	r4, r3
   1febc:	str	r3, [sp, #36]	; 0x24
   1fec0:	movw	r1, #20476	; 0x4ffc
   1fec4:	movt	r1, #1
   1fec8:	ldr	r2, [r6, #20]
   1fecc:	mov	r0, r6
   1fed0:	bl	14dbc <__assert_fail@plt+0x3b14>
   1fed4:	cmn	r9, #1
   1fed8:	bne	1fea4 <__assert_fail@plt+0xebfc>
   1fedc:	b	1fb44 <__assert_fail@plt+0xe89c>
   1fee0:	mov	r1, fp
   1fee4:	mov	r0, sl
   1fee8:	ldr	r2, [sp, #20]
   1feec:	bl	1f638 <__assert_fail@plt+0xe390>
   1fef0:	cmn	r0, #1
   1fef4:	mov	r4, r0
   1fef8:	beq	1ff74 <__assert_fail@plt+0xeccc>
   1fefc:	cmn	r0, #2
   1ff00:	beq	1ff18 <__assert_fail@plt+0xec70>
   1ff04:	ldrb	r3, [fp, #4]
   1ff08:	cmp	r3, #24
   1ff0c:	beq	20038 <__assert_fail@plt+0xed90>
   1ff10:	cmp	r3, #1
   1ff14:	beq	20060 <__assert_fail@plt+0xedb8>
   1ff18:	ldr	r3, [sp, #20]
   1ff1c:	tst	r3, #2097152	; 0x200000
   1ff20:	beq	20a54 <__assert_fail@plt+0xf7ac>
   1ff24:	ldrd	r2, [r7]
   1ff28:	mov	r1, #1
   1ff2c:	str	r6, [sl, #40]	; 0x28
   1ff30:	ldr	r0, [sp, #24]
   1ff34:	strd	r2, [fp]
   1ff38:	ldr	r3, [sp, #204]	; 0xcc
   1ff3c:	strb	r1, [fp, #4]
   1ff40:	ldr	r3, [r3]
   1ff44:	cmp	r3, #0
   1ff48:	beq	1fc78 <__assert_fail@plt+0xe9d0>
   1ff4c:	cmp	r0, #0
   1ff50:	bne	1fc78 <__assert_fail@plt+0xe9d0>
   1ff54:	b	20084 <__assert_fail@plt+0xeddc>
   1ff58:	ldr	r3, [sp, #204]	; 0xcc
   1ff5c:	ldr	r3, [r3]
   1ff60:	cmp	r3, #0
   1ff64:	bne	1fd90 <__assert_fail@plt+0xeae8>
   1ff68:	mov	r3, #0
   1ff6c:	str	r3, [sp, #24]
   1ff70:	b	1fc7c <__assert_fail@plt+0xe9d4>
   1ff74:	ldrb	r3, [fp, #4]
   1ff78:	cmp	r3, #1
   1ff7c:	bne	20078 <__assert_fail@plt+0xedd0>
   1ff80:	ldrb	r3, [fp]
   1ff84:	cmp	r3, #44	; 0x2c
   1ff88:	bne	20078 <__assert_fail@plt+0xedd0>
   1ff8c:	mov	r4, #0
   1ff90:	mov	r1, fp
   1ff94:	mov	r0, sl
   1ff98:	ldr	r2, [sp, #20]
   1ff9c:	bl	1f638 <__assert_fail@plt+0xe390>
   1ffa0:	cmn	r0, #2
   1ffa4:	mov	r9, r0
   1ffa8:	beq	1ff18 <__assert_fail@plt+0xec70>
   1ffac:	cmn	r0, #1
   1ffb0:	cmpne	r0, r4
   1ffb4:	blt	20078 <__assert_fail@plt+0xedd0>
   1ffb8:	ldrb	r3, [fp, #4]
   1ffbc:	cmp	r3, #24
   1ffc0:	bne	20078 <__assert_fail@plt+0xedd0>
   1ffc4:	cmn	r0, #1
   1ffc8:	bne	2003c <__assert_fail@plt+0xed94>
   1ffcc:	cmp	r4, #32768	; 0x8000
   1ffd0:	movlt	r5, #0
   1ffd4:	movge	r5, #1
   1ffd8:	cmp	r5, #0
   1ffdc:	bne	20050 <__assert_fail@plt+0xeda8>
   1ffe0:	mov	r1, sl
   1ffe4:	mov	r0, fp
   1ffe8:	ldr	r2, [sp, #20]
   1ffec:	bl	1eccc <__assert_fail@plt+0xda24>
   1fff0:	ldr	r3, [sl, #40]	; 0x28
   1fff4:	ldr	ip, [sp, #24]
   1fff8:	add	r0, r3, r0
   1fffc:	cmp	ip, #0
   20000:	str	r0, [sl, #40]	; 0x28
   20004:	beq	1ff58 <__assert_fail@plt+0xecb0>
   20008:	orrs	r3, r9, r4
   2000c:	bne	1fd9c <__assert_fail@plt+0xeaf4>
   20010:	mov	r2, r5
   20014:	movw	r1, #24224	; 0x5ea0
   20018:	movt	r1, #1
   2001c:	mov	r0, ip
   20020:	bl	14dbc <__assert_fail@plt+0x3b14>
   20024:	ldr	r3, [sp, #204]	; 0xcc
   20028:	ldr	r3, [r3]
   2002c:	cmp	r3, #0
   20030:	beq	1ff68 <__assert_fail@plt+0xecc0>
   20034:	b	1fe40 <__assert_fail@plt+0xeb98>
   20038:	mov	r9, r0
   2003c:	cmp	r9, #32768	; 0x8000
   20040:	movlt	r5, #0
   20044:	movge	r5, #1
   20048:	cmp	r5, #0
   2004c:	beq	1ffe0 <__assert_fail@plt+0xed38>
   20050:	ldr	r2, [sp, #204]	; 0xcc
   20054:	mov	r3, #15
   20058:	str	r3, [r2]
   2005c:	b	20084 <__assert_fail@plt+0xeddc>
   20060:	ldrb	r3, [fp]
   20064:	cmp	r3, #44	; 0x2c
   20068:	beq	1ff90 <__assert_fail@plt+0xece8>
   2006c:	ldr	r3, [sp, #20]
   20070:	tst	r3, #2097152	; 0x200000
   20074:	bne	1ff24 <__assert_fail@plt+0xec7c>
   20078:	ldr	r2, [sp, #204]	; 0xcc
   2007c:	mov	r3, #10
   20080:	str	r3, [r2]
   20084:	ldr	r3, [sp, #24]
   20088:	cmp	r3, #0
   2008c:	beq	1fd90 <__assert_fail@plt+0xeae8>
   20090:	b	1fe40 <__assert_fail@plt+0xeb98>
   20094:	add	r9, sp, #36	; 0x24
   20098:	mov	r2, r0
   2009c:	ldm	r9, {r9, sl, fp}
   200a0:	cmp	r4, r9
   200a4:	bne	200c0 <__assert_fail@plt+0xee18>
   200a8:	str	r2, [sp, #24]
   200ac:	b	1fc7c <__assert_fail@plt+0xe9d4>
   200b0:	ldr	r2, [sp, #24]
   200b4:	mvn	r9, #0
   200b8:	mov	r4, #1
   200bc:	mov	r6, r2
   200c0:	mov	r0, r6
   200c4:	ldr	r1, [sp, #32]
   200c8:	str	r2, [sp, #36]	; 0x24
   200cc:	bl	17294 <__assert_fail@plt+0x5fec>
   200d0:	subs	r6, r0, #0
   200d4:	ldr	r2, [sp, #36]	; 0x24
   200d8:	beq	1fe34 <__assert_fail@plt+0xeb8c>
   200dc:	ldrb	r3, [r6, #24]
   200e0:	str	r2, [sp, #36]	; 0x24
   200e4:	cmp	r3, #17
   200e8:	bne	1fed4 <__assert_fail@plt+0xec2c>
   200ec:	b	1fec0 <__assert_fail@plt+0xec18>
   200f0:	ldr	r4, [fp]
   200f4:	movw	r3, #783	; 0x30f
   200f8:	tst	r4, r3
   200fc:	beq	20160 <__assert_fail@plt+0xeeb8>
   20100:	ldr	r3, [sp, #32]
   20104:	ldrb	r3, [r3, #88]	; 0x58
   20108:	ands	r5, r3, #16
   2010c:	bne	20160 <__assert_fail@plt+0xeeb8>
   20110:	ldr	r0, [sp, #32]
   20114:	orr	r3, r3, #16
   20118:	ands	r2, r3, #8
   2011c:	mov	r1, r3
   20120:	strb	r3, [r0, #88]	; 0x58
   20124:	bne	20ddc <__assert_fail@plt+0xfb34>
   20128:	mov	r3, #0
   2012c:	movt	r3, #1023	; 0x3ff
   20130:	tst	r1, #4
   20134:	mvn	r1, #2013265921	; 0x78000001
   20138:	strd	r2, [r0, #96]	; 0x60
   2013c:	mvn	r3, #-134217727	; 0xf8000001
   20140:	str	r1, [r0, #104]	; 0x68
   20144:	str	r3, [r0, #108]	; 0x6c
   20148:	beq	20d28 <__assert_fail@plt+0xfa80>
   2014c:	str	r2, [r0, #112]	; 0x70
   20150:	str	r2, [r0, #116]	; 0x74
   20154:	str	r2, [r0, #120]	; 0x78
   20158:	str	r2, [r0, #124]	; 0x7c
   2015c:	ldr	r4, [fp]
   20160:	sub	r3, r4, #256	; 0x100
   20164:	ldr	r2, [sp, #32]
   20168:	bics	r3, r3, #256	; 0x100
   2016c:	add	r5, r2, #56	; 0x38
   20170:	add	r6, r2, #64	; 0x40
   20174:	bne	20738 <__assert_fail@plt+0xf490>
   20178:	cmp	r4, #256	; 0x100
   2017c:	beq	2082c <__assert_fail@plt+0xf584>
   20180:	mov	r0, #5
   20184:	mov	r2, r3
   20188:	str	fp, [sp]
   2018c:	mov	r1, r6
   20190:	str	r0, [fp]
   20194:	mov	r0, r5
   20198:	bl	171c4 <__assert_fail@plt+0x5f1c>
   2019c:	mov	r7, r0
   201a0:	mov	r3, #10
   201a4:	str	r3, [fp]
   201a8:	mov	r3, #0
   201ac:	mov	r1, r6
   201b0:	str	fp, [sp]
   201b4:	mov	r2, r3
   201b8:	mov	r0, r5
   201bc:	bl	171c4 <__assert_fail@plt+0x5f1c>
   201c0:	add	r3, sp, #128	; 0x80
   201c4:	mov	r4, r0
   201c8:	mov	ip, #10
   201cc:	mov	r8, #0
   201d0:	mov	r9, #0
   201d4:	mov	r1, r6
   201d8:	str	r3, [sp]
   201dc:	mov	r0, r5
   201e0:	mov	r3, r4
   201e4:	mov	r2, r7
   201e8:	clz	r4, r4
   201ec:	strd	r8, [sp, #128]	; 0x80
   201f0:	lsr	r4, r4, #5
   201f4:	strb	ip, [sp, #132]	; 0x84
   201f8:	bl	171c4 <__assert_fail@plt+0x5f1c>
   201fc:	cmp	r7, #0
   20200:	str	r0, [sp, #24]
   20204:	moveq	r4, #1
   20208:	cmp	r0, #0
   2020c:	movne	r3, r4
   20210:	moveq	r3, #1
   20214:	cmp	r3, #0
   20218:	bne	20458 <__assert_fail@plt+0xf1b0>
   2021c:	mov	r0, fp
   20220:	mov	r1, sl
   20224:	ldr	r2, [sp, #20]
   20228:	bl	1eccc <__assert_fail@plt+0xda24>
   2022c:	ldr	r3, [sl, #40]	; 0x28
   20230:	add	r3, r3, r0
   20234:	str	r3, [sl, #40]	; 0x28
   20238:	b	1fccc <__assert_fail@plt+0xea24>
   2023c:	mov	r5, #0
   20240:	mov	r1, #1
   20244:	mov	r0, #32
   20248:	str	r5, [sp, #68]	; 0x44
   2024c:	bl	243cc <__assert_fail@plt+0x13124>
   20250:	mov	r8, r0
   20254:	mov	r1, #1
   20258:	mov	r0, #40	; 0x28
   2025c:	bl	243cc <__assert_fail@plt+0x13124>
   20260:	clz	r4, r0
   20264:	cmp	r8, r5
   20268:	lsr	r4, r4, #5
   2026c:	moveq	r4, #1
   20270:	mov	r9, r0
   20274:	cmp	r4, r5
   20278:	bne	20a70 <__assert_fail@plt+0xf7c8>
   2027c:	mov	r1, sl
   20280:	mov	r0, fp
   20284:	ldr	r2, [sp, #20]
   20288:	bl	14e50 <__assert_fail@plt+0x3ba8>
   2028c:	ldrb	r3, [fp, #4]
   20290:	mov	r5, r0
   20294:	cmp	r3, #2
   20298:	beq	20a44 <__assert_fail@plt+0xf79c>
   2029c:	cmp	r3, #25
   202a0:	strne	r4, [sp, #44]	; 0x2c
   202a4:	beq	20760 <__assert_fail@plt+0xf4b8>
   202a8:	ldr	r7, [sp, #20]
   202ac:	cmp	r3, #21
   202b0:	mov	r0, #1
   202b4:	moveq	r3, #1
   202b8:	strbeq	r3, [fp, #4]
   202bc:	mov	r3, #0
   202c0:	ubfx	r2, r7, #16, #1
   202c4:	str	r3, [sp, #24]
   202c8:	str	r3, [sp, #40]	; 0x28
   202cc:	add	r3, sp, #96	; 0x60
   202d0:	str	r3, [sp, #36]	; 0x24
   202d4:	str	r2, [sp, #48]	; 0x30
   202d8:	mov	ip, #3
   202dc:	mov	r3, r5
   202e0:	str	r7, [sp]
   202e4:	mov	r2, fp
   202e8:	mov	r1, sl
   202ec:	str	r0, [sp, #4]
   202f0:	str	ip, [sp, #72]	; 0x48
   202f4:	add	r0, sp, #72	; 0x48
   202f8:	ldr	ip, [sp, #36]	; 0x24
   202fc:	str	ip, [sp, #76]	; 0x4c
   20300:	bl	1f708 <__assert_fail@plt+0xe460>
   20304:	cmp	r0, #0
   20308:	bne	20818 <__assert_fail@plt+0xf570>
   2030c:	mov	r2, r7
   20310:	mov	r1, sl
   20314:	mov	r0, fp
   20318:	bl	14e50 <__assert_fail@plt+0x3ba8>
   2031c:	ldr	r3, [sp, #72]	; 0x48
   20320:	mov	r5, r0
   20324:	sub	r2, r3, #2
   20328:	bics	r2, r2, #2
   2032c:	beq	20344 <__assert_fail@plt+0xf09c>
   20330:	ldrb	r2, [fp, #4]
   20334:	cmp	r2, #2
   20338:	beq	207bc <__assert_fail@plt+0xf514>
   2033c:	cmp	r2, #22
   20340:	beq	20858 <__assert_fail@plt+0xf5b0>
   20344:	cmp	r3, #4
   20348:	ldrls	pc, [pc, r3, lsl #2]
   2034c:	b	20690 <__assert_fail@plt+0xf3e8>
   20350:	andeq	r0, r2, r0, ror r6
   20354:	andeq	r0, r2, r0, lsl r7
   20358:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   2035c:	andeq	r0, r2, r8, lsr r6
   20360:	muleq	r2, r0, r6
   20364:	ldr	r3, [sp, #32]
   20368:	str	fp, [sp]
   2036c:	add	r6, r3, #56	; 0x38
   20370:	add	r5, r3, #64	; 0x40
   20374:	mov	r3, #0
   20378:	mov	r0, r6
   2037c:	mov	r2, r3
   20380:	mov	r1, r5
   20384:	bl	171c4 <__assert_fail@plt+0x5f1c>
   20388:	subs	r3, r0, #0
   2038c:	str	r3, [sp, #24]
   20390:	beq	20458 <__assert_fail@plt+0xf1b0>
   20394:	ldr	r3, [sp, #32]
   20398:	ldr	r3, [r3, #92]	; 0x5c
   2039c:	cmp	r3, #1
   203a0:	ble	1fa88 <__assert_fail@plt+0xe7e0>
   203a4:	mov	r9, #0
   203a8:	mov	r8, #0
   203ac:	ldr	r4, [sp, #24]
   203b0:	add	r7, sp, #128	; 0x80
   203b4:	strd	r8, [sp, #24]
   203b8:	mov	r9, r5
   203bc:	ldr	r3, [sl, #40]	; 0x28
   203c0:	mov	r1, sl
   203c4:	mov	r0, fp
   203c8:	ldr	ip, [sl, #56]	; 0x38
   203cc:	ldr	r2, [sp, #20]
   203d0:	cmp	ip, r3
   203d4:	ble	20824 <__assert_fail@plt+0xf57c>
   203d8:	ldr	ip, [sl, #28]
   203dc:	cmp	r3, ip
   203e0:	beq	20824 <__assert_fail@plt+0xf57c>
   203e4:	ldr	ip, [sl, #8]
   203e8:	ldr	r3, [ip, r3, lsl #2]
   203ec:	cmn	r3, #1
   203f0:	bne	20824 <__assert_fail@plt+0xf57c>
   203f4:	bl	1eccc <__assert_fail@plt+0xda24>
   203f8:	ldr	ip, [sl, #40]	; 0x28
   203fc:	mov	r3, #0
   20400:	mov	r1, r9
   20404:	mov	r2, r3
   20408:	str	fp, [sp]
   2040c:	add	ip, ip, r0
   20410:	mov	r0, r6
   20414:	str	ip, [sl, #40]	; 0x28
   20418:	bl	171c4 <__assert_fail@plt+0x5f1c>
   2041c:	mov	r5, r0
   20420:	mov	r3, r0
   20424:	ldrd	r0, [sp, #24]
   20428:	mov	ip, #16
   2042c:	mov	r2, r4
   20430:	str	r7, [sp]
   20434:	strd	r0, [r7]
   20438:	mov	r1, r9
   2043c:	mov	r0, r6
   20440:	strb	ip, [sp, #132]	; 0x84
   20444:	bl	171c4 <__assert_fail@plt+0x5f1c>
   20448:	cmp	r0, #0
   2044c:	cmpne	r5, #0
   20450:	mov	r4, r0
   20454:	bne	203bc <__assert_fail@plt+0xf114>
   20458:	mov	r2, #0
   2045c:	mov	r3, #12
   20460:	str	r2, [sp, #24]
   20464:	ldr	r2, [sp, #204]	; 0xcc
   20468:	str	r3, [r2]
   2046c:	b	1fccc <__assert_fail@plt+0xea24>
   20470:	sub	r1, r2, #33	; 0x21
   20474:	movw	r3, #22780	; 0x58fc
   20478:	movt	r3, #2
   2047c:	clz	r1, r1
   20480:	lsr	r1, r1, #5
   20484:	movw	r2, #22708	; 0x58b4
   20488:	movt	r2, #2
   2048c:	str	r1, [sp]
   20490:	ldr	r0, [sp, #32]
   20494:	ldr	r1, [sp, #204]	; 0xcc
   20498:	str	r1, [sp, #4]
   2049c:	ldr	r1, [sl, #64]	; 0x40
   204a0:	bl	1ac0c <__assert_fail@plt+0x9964>
   204a4:	ldr	r3, [sp, #204]	; 0xcc
   204a8:	str	r0, [sp, #24]
   204ac:	ldr	r2, [r3]
   204b0:	clz	r3, r0
   204b4:	lsr	r3, r3, #5
   204b8:	cmp	r2, #0
   204bc:	moveq	r3, #0
   204c0:	cmp	r3, #0
   204c4:	beq	1fa88 <__assert_fail@plt+0xe7e0>
   204c8:	b	1fd90 <__assert_fail@plt+0xeae8>
   204cc:	sub	r1, r2, #35	; 0x23
   204d0:	movw	r3, #19172	; 0x4ae4
   204d4:	movt	r3, #2
   204d8:	clz	r1, r1
   204dc:	movw	r2, #22724	; 0x58c4
   204e0:	movt	r2, #2
   204e4:	lsr	r1, r1, #5
   204e8:	b	2048c <__assert_fail@plt+0xf1e4>
   204ec:	mov	r2, #0
   204f0:	mov	r3, #5
   204f4:	str	r2, [sp, #24]
   204f8:	ldr	r2, [sp, #204]	; 0xcc
   204fc:	str	r3, [r2]
   20500:	b	1fccc <__assert_fail@plt+0xea24>
   20504:	ldr	r3, [sp, #32]
   20508:	mov	ip, #1
   2050c:	ldr	r2, [fp]
   20510:	ldr	r3, [r3, #84]	; 0x54
   20514:	lsl	ip, ip, r2
   20518:	ands	r3, ip, r3
   2051c:	beq	20a94 <__assert_fail@plt+0xf7ec>
   20520:	ldr	r4, [sp, #32]
   20524:	mov	r3, #0
   20528:	mov	r2, r3
   2052c:	ldr	lr, [r4, #80]	; 0x50
   20530:	add	r1, r4, #64	; 0x40
   20534:	add	r0, r4, #56	; 0x38
   20538:	orr	ip, lr, ip
   2053c:	str	ip, [r4, #80]	; 0x50
   20540:	str	fp, [sp]
   20544:	bl	171c4 <__assert_fail@plt+0x5f1c>
   20548:	subs	r3, r0, #0
   2054c:	str	r3, [sp, #24]
   20550:	beq	20458 <__assert_fail@plt+0xf1b0>
   20554:	ldrb	r3, [r4, #88]	; 0x58
   20558:	ldr	r2, [r4, #76]	; 0x4c
   2055c:	orr	r3, r3, #2
   20560:	add	r2, r2, #1
   20564:	str	r2, [r4, #76]	; 0x4c
   20568:	strb	r3, [r4, #88]	; 0x58
   2056c:	b	1fa88 <__assert_fail@plt+0xe7e0>
   20570:	ldr	r4, [sp, #32]
   20574:	mov	r3, #0
   20578:	mov	r2, r3
   2057c:	str	fp, [sp]
   20580:	add	r1, r4, #64	; 0x40
   20584:	add	r0, r4, #56	; 0x38
   20588:	bl	171c4 <__assert_fail@plt+0x5f1c>
   2058c:	subs	r3, r0, #0
   20590:	str	r3, [sp, #24]
   20594:	beq	20458 <__assert_fail@plt+0xf1b0>
   20598:	ldr	r3, [r4, #92]	; 0x5c
   2059c:	cmp	r3, #1
   205a0:	ble	1fa88 <__assert_fail@plt+0xe7e0>
   205a4:	ldrb	r3, [r4, #88]	; 0x58
   205a8:	orr	r3, r3, #2
   205ac:	strb	r3, [r4, #88]	; 0x58
   205b0:	b	1fa88 <__assert_fail@plt+0xe7e0>
   205b4:	ldr	r3, [sp, #20]
   205b8:	ands	r3, r3, #131072	; 0x20000
   205bc:	bne	1fa58 <__assert_fail@plt+0xe7b0>
   205c0:	str	r3, [sp, #24]
   205c4:	mov	r2, #16
   205c8:	ldr	r3, [sp, #204]	; 0xcc
   205cc:	str	r2, [r3]
   205d0:	b	1fccc <__assert_fail@plt+0xea24>
   205d4:	cmp	r4, #8
   205d8:	bls	20620 <__assert_fail@plt+0xf378>
   205dc:	ldr	r0, [sp, #32]
   205e0:	add	ip, sp, #128	; 0x80
   205e4:	mov	lr, #17
   205e8:	mov	r6, #0
   205ec:	mov	r7, #0
   205f0:	mov	r3, #0
   205f4:	str	ip, [sp]
   205f8:	strd	r6, [sp, #128]	; 0x80
   205fc:	strb	lr, [sp, #132]	; 0x84
   20600:	add	r1, r0, #64	; 0x40
   20604:	add	r0, r0, #56	; 0x38
   20608:	bl	171c4 <__assert_fail@plt+0x5f1c>
   2060c:	subs	r3, r0, #0
   20610:	str	r3, [sp, #24]
   20614:	beq	20458 <__assert_fail@plt+0xf1b0>
   20618:	str	r4, [r3, #20]
   2061c:	b	1fa88 <__assert_fail@plt+0xe7e0>
   20620:	ldr	r0, [sp, #32]
   20624:	mov	r1, #1
   20628:	ldr	r3, [r0, #84]	; 0x54
   2062c:	orr	r3, r3, r1, lsl r4
   20630:	str	r3, [r0, #84]	; 0x54
   20634:	b	205dc <__assert_fail@plt+0xf334>
   20638:	mov	r0, r8
   2063c:	ldr	r1, [sp, #76]	; 0x4c
   20640:	bl	1a368 <__assert_fail@plt+0x90c0>
   20644:	ldr	r3, [sp, #204]	; 0xcc
   20648:	cmp	r0, #0
   2064c:	str	r0, [r3]
   20650:	bne	206c8 <__assert_fail@plt+0xf420>
   20654:	ldrb	r3, [fp, #4]
   20658:	cmp	r3, #2
   2065c:	beq	207bc <__assert_fail@plt+0xf514>
   20660:	cmp	r3, #21
   20664:	beq	20aec <__assert_fail@plt+0xf844>
   20668:	mov	r0, #0
   2066c:	b	202d8 <__assert_fail@plt+0xf030>
   20670:	ldrb	r3, [sp, #76]	; 0x4c
   20674:	mov	r0, #1
   20678:	asr	r1, r3, #5
   2067c:	and	r3, r3, #31
   20680:	ldr	r2, [r8, r1, lsl #2]
   20684:	orr	r3, r2, r0, lsl r3
   20688:	str	r3, [r8, r1, lsl #2]
   2068c:	b	20654 <__assert_fail@plt+0xf3ac>
   20690:	ldr	ip, [sp, #76]	; 0x4c
   20694:	add	r0, sp, #68	; 0x44
   20698:	add	r3, r9, #36	; 0x24
   2069c:	add	r2, r9, #12
   206a0:	mov	r1, r8
   206a4:	str	r0, [sp]
   206a8:	str	r7, [sp, #8]
   206ac:	ldr	r0, [sl, #64]	; 0x40
   206b0:	str	ip, [sp, #4]
   206b4:	bl	1a3c4 <__assert_fail@plt+0x911c>
   206b8:	ldr	r3, [sp, #204]	; 0xcc
   206bc:	cmp	r0, #0
   206c0:	str	r0, [r3]
   206c4:	beq	20654 <__assert_fail@plt+0xf3ac>
   206c8:	mov	r0, r8
   206cc:	bl	24628 <__assert_fail@plt+0x13380>
   206d0:	mov	r0, r9
   206d4:	bl	15e2c <__assert_fail@plt+0x4b84>
   206d8:	ldr	r3, [sp, #204]	; 0xcc
   206dc:	ldr	r3, [r3]
   206e0:	cmp	r3, #0
   206e4:	bne	1fd90 <__assert_fail@plt+0xeae8>
   206e8:	str	r3, [sp, #24]
   206ec:	b	1fa88 <__assert_fail@plt+0xe7e0>
   206f0:	mov	r0, r8
   206f4:	ldr	r1, [sp, #76]	; 0x4c
   206f8:	bl	1a368 <__assert_fail@plt+0x90c0>
   206fc:	ldr	r3, [sp, #204]	; 0xcc
   20700:	cmp	r0, #0
   20704:	str	r0, [r3]
   20708:	beq	20654 <__assert_fail@plt+0xf3ac>
   2070c:	b	206c8 <__assert_fail@plt+0xf420>
   20710:	ldr	r2, [sp, #24]
   20714:	ldr	r3, [r9, #20]
   20718:	ldr	r0, [r9]
   2071c:	cmp	r3, r2
   20720:	beq	20ac4 <__assert_fail@plt+0xf81c>
   20724:	ldr	r2, [sp, #76]	; 0x4c
   20728:	add	r1, r3, #1
   2072c:	str	r1, [r9, #20]
   20730:	str	r2, [r0, r3, lsl #2]
   20734:	b	20654 <__assert_fail@plt+0xf3ac>
   20738:	mov	r3, #0
   2073c:	mov	r1, r6
   20740:	str	fp, [sp]
   20744:	mov	r2, r3
   20748:	mov	r0, r5
   2074c:	bl	171c4 <__assert_fail@plt+0x5f1c>
   20750:	subs	r3, r0, #0
   20754:	str	r3, [sp, #24]
   20758:	bne	2021c <__assert_fail@plt+0xef74>
   2075c:	b	20458 <__assert_fail@plt+0xf1b0>
   20760:	ldrb	r3, [r9, #16]
   20764:	ldr	r2, [sp, #20]
   20768:	orr	r3, r3, #1
   2076c:	tst	r2, #256	; 0x100
   20770:	strb	r3, [r9, #16]
   20774:	beq	20784 <__assert_fail@plt+0xf4dc>
   20778:	ldr	r3, [r8]
   2077c:	orr	r3, r3, #1024	; 0x400
   20780:	str	r3, [r8]
   20784:	ldr	r3, [sl, #40]	; 0x28
   20788:	mov	r1, sl
   2078c:	mov	r0, fp
   20790:	ldr	r2, [sp, #20]
   20794:	add	r3, r3, r5
   20798:	str	r3, [sl, #40]	; 0x28
   2079c:	bl	14e50 <__assert_fail@plt+0x3ba8>
   207a0:	ldrb	r3, [fp, #4]
   207a4:	mov	r5, r0
   207a8:	cmp	r3, #2
   207ac:	beq	20a44 <__assert_fail@plt+0xf79c>
   207b0:	mov	r2, #1
   207b4:	str	r2, [sp, #44]	; 0x2c
   207b8:	b	202a8 <__assert_fail@plt+0xf000>
   207bc:	ldr	r2, [sp, #204]	; 0xcc
   207c0:	mov	r3, #7
   207c4:	str	r3, [r2]
   207c8:	b	206c8 <__assert_fail@plt+0xf420>
   207cc:	mov	r2, r3
   207d0:	mov	r1, sl
   207d4:	mov	r0, fp
   207d8:	mov	r4, r3
   207dc:	bl	1eccc <__assert_fail@plt+0xda24>
   207e0:	ldr	lr, [sp, #200]	; 0xc8
   207e4:	mov	r3, r4
   207e8:	mov	r2, fp
   207ec:	mov	r1, r5
   207f0:	ldr	ip, [sl, #40]	; 0x28
   207f4:	str	lr, [sp]
   207f8:	ldr	lr, [sp, #204]	; 0xcc
   207fc:	add	ip, ip, r0
   20800:	mov	r0, sl
   20804:	str	lr, [sp, #4]
   20808:	str	ip, [sl, #40]	; 0x28
   2080c:	bl	1f95c <__assert_fail@plt+0xe6b4>
   20810:	str	r0, [sp, #24]
   20814:	b	1fccc <__assert_fail@plt+0xea24>
   20818:	ldr	r3, [sp, #204]	; 0xcc
   2081c:	str	r0, [r3]
   20820:	b	206c8 <__assert_fail@plt+0xf420>
   20824:	str	r4, [sp, #24]
   20828:	b	1fa88 <__assert_fail@plt+0xe7e0>
   2082c:	mov	r0, #6
   20830:	mov	r2, r3
   20834:	str	fp, [sp]
   20838:	mov	r1, r6
   2083c:	str	r0, [fp]
   20840:	mov	r0, r5
   20844:	bl	171c4 <__assert_fail@plt+0x5f1c>
   20848:	mov	r3, #9
   2084c:	mov	r7, r0
   20850:	str	r3, [fp]
   20854:	b	201a8 <__assert_fail@plt+0xef00>
   20858:	ldr	r3, [sl, #40]	; 0x28
   2085c:	mov	r2, r7
   20860:	add	r0, sp, #88	; 0x58
   20864:	mov	r1, sl
   20868:	add	r3, r3, r5
   2086c:	str	r3, [sl, #40]	; 0x28
   20870:	bl	14e50 <__assert_fail@plt+0x3ba8>
   20874:	ldrb	r2, [sp, #92]	; 0x5c
   20878:	mov	r3, r0
   2087c:	cmp	r2, #2
   20880:	beq	207bc <__assert_fail@plt+0xf514>
   20884:	cmp	r2, #21
   20888:	beq	20aa8 <__assert_fail@plt+0xf800>
   2088c:	mov	r1, #1
   20890:	mov	r0, #3
   20894:	str	r7, [sp]
   20898:	add	ip, sp, #128	; 0x80
   2089c:	add	r2, sp, #88	; 0x58
   208a0:	str	r1, [sp, #4]
   208a4:	mov	r1, sl
   208a8:	str	r0, [sp, #80]	; 0x50
   208ac:	add	r0, sp, #80	; 0x50
   208b0:	str	ip, [sp, #84]	; 0x54
   208b4:	bl	1f708 <__assert_fail@plt+0xe460>
   208b8:	cmp	r0, #0
   208bc:	bne	20818 <__assert_fail@plt+0xf570>
   208c0:	mov	r2, r7
   208c4:	mov	r1, sl
   208c8:	mov	r0, fp
   208cc:	bl	14e50 <__assert_fail@plt+0x3ba8>
   208d0:	ldr	r2, [sp, #72]	; 0x48
   208d4:	mov	r5, r0
   208d8:	sub	r3, r2, #2
   208dc:	bics	r3, r3, #2
   208e0:	beq	20d18 <__assert_fail@plt+0xfa70>
   208e4:	ldr	r3, [sp, #80]	; 0x50
   208e8:	sub	r1, r3, #2
   208ec:	bics	r1, r1, #2
   208f0:	beq	20d18 <__assert_fail@plt+0xfa70>
   208f4:	cmp	r2, #3
   208f8:	moveq	r1, #1
   208fc:	movne	r1, #0
   20900:	str	r1, [sp, #52]	; 0x34
   20904:	beq	20e14 <__assert_fail@plt+0xfb6c>
   20908:	cmp	r3, #3
   2090c:	beq	20de4 <__assert_fail@plt+0xfb3c>
   20910:	cmp	r2, #0
   20914:	bne	20d00 <__assert_fail@plt+0xfa58>
   20918:	ldrb	r4, [sp, #76]	; 0x4c
   2091c:	cmp	r3, #0
   20920:	beq	20d10 <__assert_fail@plt+0xfa68>
   20924:	cmp	r3, #3
   20928:	bne	20cf8 <__assert_fail@plt+0xfa50>
   2092c:	ldr	r1, [sp, #84]	; 0x54
   20930:	ldrb	r6, [r1]
   20934:	cmp	r2, #0
   20938:	ldr	r1, [sp, #52]	; 0x34
   2093c:	moveq	r1, #1
   20940:	cmp	r1, #0
   20944:	beq	20cf0 <__assert_fail@plt+0xfa48>
   20948:	ldr	r2, [sp, #32]
   2094c:	ldr	r2, [r2, #92]	; 0x5c
   20950:	cmp	r2, #1
   20954:	ble	20cdc <__assert_fail@plt+0xfa34>
   20958:	mov	r0, r4
   2095c:	bl	111d0 <btowc@plt>
   20960:	ldr	r3, [sp, #80]	; 0x50
   20964:	mov	r4, r0
   20968:	cmp	r3, #3
   2096c:	cmpne	r3, #0
   20970:	bne	20ce8 <__assert_fail@plt+0xfa40>
   20974:	ldr	r3, [sp, #32]
   20978:	ldr	r3, [r3, #92]	; 0x5c
   2097c:	cmp	r3, #1
   20980:	ble	20990 <__assert_fail@plt+0xf6e8>
   20984:	mov	r0, r6
   20988:	bl	111d0 <btowc@plt>
   2098c:	mov	r6, r0
   20990:	cmn	r4, #1
   20994:	cmnne	r6, #1
   20998:	beq	20dcc <__assert_fail@plt+0xfb24>
   2099c:	ldr	r3, [sp, #48]	; 0x30
   209a0:	cmp	r4, r6
   209a4:	movls	r3, #0
   209a8:	andhi	r3, r3, #1
   209ac:	cmp	r3, #0
   209b0:	bne	20d18 <__assert_fail@plt+0xfa70>
   209b4:	ldr	r3, [sp, #32]
   209b8:	ldr	r3, [r3, #92]	; 0x5c
   209bc:	cmp	r3, #1
   209c0:	ble	209f0 <__assert_fail@plt+0xf748>
   209c4:	ldr	r1, [sp, #40]	; 0x28
   209c8:	ldr	r3, [r9, #32]
   209cc:	ldr	r2, [r9, #4]
   209d0:	cmp	r3, r1
   209d4:	beq	20e54 <__assert_fail@plt+0xfbac>
   209d8:	str	r4, [r2, r3, lsl #2]
   209dc:	ldr	r2, [r9, #8]
   209e0:	ldr	r3, [r9, #32]
   209e4:	add	r1, r3, #1
   209e8:	str	r1, [r9, #32]
   209ec:	str	r6, [r2, r3, lsl #2]
   209f0:	mov	r3, #0
   209f4:	mov	ip, #1
   209f8:	cmp	r4, r3
   209fc:	asr	r2, r3, #5
   20a00:	and	r0, r3, #31
   20a04:	movhi	r1, #0
   20a08:	movls	r1, #1
   20a0c:	cmp	r6, r3
   20a10:	add	r3, r3, #1
   20a14:	movcc	r1, #0
   20a18:	cmp	r1, #0
   20a1c:	beq	20a2c <__assert_fail@plt+0xf784>
   20a20:	ldr	r1, [r8, r2, lsl #2]
   20a24:	orr	r1, r1, ip, lsl r0
   20a28:	str	r1, [r8, r2, lsl #2]
   20a2c:	cmp	r3, #256	; 0x100
   20a30:	bne	209f8 <__assert_fail@plt+0xf750>
   20a34:	ldr	r2, [sp, #204]	; 0xcc
   20a38:	mov	r3, #0
   20a3c:	str	r3, [r2]
   20a40:	b	20654 <__assert_fail@plt+0xf3ac>
   20a44:	ldr	r2, [sp, #204]	; 0xcc
   20a48:	mov	r3, #2
   20a4c:	str	r3, [r2]
   20a50:	b	206c8 <__assert_fail@plt+0xf420>
   20a54:	ldrb	r3, [fp, #4]
   20a58:	cmp	r3, #2
   20a5c:	bne	20078 <__assert_fail@plt+0xedd0>
   20a60:	ldr	r2, [sp, #204]	; 0xcc
   20a64:	mov	r3, #9
   20a68:	str	r3, [r2]
   20a6c:	b	20084 <__assert_fail@plt+0xeddc>
   20a70:	mov	r0, r8
   20a74:	str	r5, [sp, #24]
   20a78:	bl	24628 <__assert_fail@plt+0x13380>
   20a7c:	mov	r0, r9
   20a80:	bl	24628 <__assert_fail@plt+0x13380>
   20a84:	ldr	r2, [sp, #204]	; 0xcc
   20a88:	mov	r3, #12
   20a8c:	str	r3, [r2]
   20a90:	b	1fccc <__assert_fail@plt+0xea24>
   20a94:	str	r3, [sp, #24]
   20a98:	mov	r2, #6
   20a9c:	ldr	r3, [sp, #204]	; 0xcc
   20aa0:	str	r2, [r3]
   20aa4:	b	1fccc <__assert_fail@plt+0xea24>
   20aa8:	ldr	r2, [sl, #40]	; 0x28
   20aac:	mov	r1, #1
   20ab0:	ldr	r3, [sp, #72]	; 0x48
   20ab4:	sub	r2, r2, r5
   20ab8:	str	r2, [sl, #40]	; 0x28
   20abc:	strb	r1, [fp, #4]
   20ac0:	b	20344 <__assert_fail@plt+0xf09c>
   20ac4:	lsl	r3, r2, #1
   20ac8:	add	r3, r3, #1
   20acc:	lsl	r1, r3, #2
   20ad0:	str	r3, [sp, #24]
   20ad4:	bl	2447c <__assert_fail@plt+0x131d4>
   20ad8:	cmp	r0, #0
   20adc:	beq	20bec <__assert_fail@plt+0xf944>
   20ae0:	str	r0, [r9]
   20ae4:	ldr	r3, [r9, #20]
   20ae8:	b	20724 <__assert_fail@plt+0xf47c>
   20aec:	ldr	r3, [sl, #40]	; 0x28
   20af0:	ldr	r2, [sp, #44]	; 0x2c
   20af4:	add	r3, r3, r5
   20af8:	cmp	r2, #0
   20afc:	str	r3, [sl, #40]	; 0x28
   20b00:	beq	20b20 <__assert_fail@plt+0xf878>
   20b04:	sub	r3, r8, #4
   20b08:	add	r1, r8, #28
   20b0c:	ldr	r2, [r3, #4]!
   20b10:	mvn	r2, r2
   20b14:	cmp	r1, r3
   20b18:	str	r2, [r3]
   20b1c:	bne	20b0c <__assert_fail@plt+0xf864>
   20b20:	ldr	r3, [sp, #32]
   20b24:	ldr	r0, [r3, #92]	; 0x5c
   20b28:	cmp	r0, #1
   20b2c:	ble	20b5c <__assert_fail@plt+0xf8b4>
   20b30:	ldr	r3, [sp, #32]
   20b34:	sub	r2, r8, #4
   20b38:	add	ip, r8, #28
   20b3c:	ldr	r3, [r3, #60]	; 0x3c
   20b40:	sub	r3, r3, #4
   20b44:	ldr	r1, [r2, #4]!
   20b48:	ldr	lr, [r3, #4]!
   20b4c:	cmp	ip, r2
   20b50:	and	r1, r1, lr
   20b54:	str	r1, [r2]
   20b58:	bne	20b44 <__assert_fail@plt+0xf89c>
   20b5c:	ldr	r3, [r9, #20]
   20b60:	cmp	r3, #0
   20b64:	bne	20bfc <__assert_fail@plt+0xf954>
   20b68:	ldr	r3, [r9, #24]
   20b6c:	cmp	r3, #0
   20b70:	bne	20bfc <__assert_fail@plt+0xf954>
   20b74:	ldr	r3, [r9, #28]
   20b78:	cmp	r3, #0
   20b7c:	bne	20bfc <__assert_fail@plt+0xf954>
   20b80:	ldr	r3, [r9, #32]
   20b84:	cmp	r3, #0
   20b88:	bne	20bfc <__assert_fail@plt+0xf954>
   20b8c:	cmp	r0, #1
   20b90:	ble	20bac <__assert_fail@plt+0xf904>
   20b94:	ldr	r3, [r9, #36]	; 0x24
   20b98:	cmp	r3, #0
   20b9c:	bne	20bfc <__assert_fail@plt+0xf954>
   20ba0:	ldrb	r3, [r9, #16]
   20ba4:	tst	r3, #1
   20ba8:	bne	20bfc <__assert_fail@plt+0xf954>
   20bac:	mov	r0, r9
   20bb0:	bl	15e2c <__assert_fail@plt+0x4b84>
   20bb4:	ldr	r0, [sp, #32]
   20bb8:	mov	r3, #0
   20bbc:	mov	ip, #3
   20bc0:	str	r8, [sp, #96]	; 0x60
   20bc4:	ldr	r2, [sp, #36]	; 0x24
   20bc8:	add	r1, r0, #64	; 0x40
   20bcc:	add	r0, r0, #56	; 0x38
   20bd0:	str	r2, [sp]
   20bd4:	mov	r2, r3
   20bd8:	strb	ip, [sp, #100]	; 0x64
   20bdc:	bl	171c4 <__assert_fail@plt+0x5f1c>
   20be0:	subs	r3, r0, #0
   20be4:	str	r3, [sp, #24]
   20be8:	bne	1fa88 <__assert_fail@plt+0xe7e0>
   20bec:	ldr	r2, [sp, #204]	; 0xcc
   20bf0:	mov	r3, #12
   20bf4:	str	r3, [r2]
   20bf8:	b	206c8 <__assert_fail@plt+0xf420>
   20bfc:	ldr	r4, [sp, #32]
   20c00:	mov	r3, #0
   20c04:	mov	lr, #6
   20c08:	mov	r2, r3
   20c0c:	ldrb	ip, [r4, #88]	; 0x58
   20c10:	add	r7, r4, #56	; 0x38
   20c14:	add	r6, r4, #64	; 0x40
   20c18:	mov	r0, r7
   20c1c:	mov	r1, r6
   20c20:	orr	ip, ip, #2
   20c24:	strb	ip, [r4, #88]	; 0x58
   20c28:	ldr	ip, [sp, #36]	; 0x24
   20c2c:	str	ip, [sp]
   20c30:	str	r9, [sp, #96]	; 0x60
   20c34:	strb	lr, [sp, #100]	; 0x64
   20c38:	bl	171c4 <__assert_fail@plt+0x5f1c>
   20c3c:	subs	r3, r0, #0
   20c40:	str	r3, [sp, #24]
   20c44:	beq	20bec <__assert_fail@plt+0xf944>
   20c48:	sub	r3, r8, #4
   20c4c:	add	r2, r8, #28
   20c50:	ldr	r1, [r3, #4]!
   20c54:	cmp	r1, #0
   20c58:	bne	20c70 <__assert_fail@plt+0xf9c8>
   20c5c:	cmp	r2, r3
   20c60:	bne	20c50 <__assert_fail@plt+0xf9a8>
   20c64:	mov	r0, r8
   20c68:	bl	24628 <__assert_fail@plt+0x13380>
   20c6c:	b	1fa88 <__assert_fail@plt+0xe7e0>
   20c70:	ldr	r2, [sp, #36]	; 0x24
   20c74:	mov	ip, #3
   20c78:	mov	r3, #0
   20c7c:	mov	r1, r6
   20c80:	mov	r0, r7
   20c84:	str	r2, [sp]
   20c88:	mov	r2, r3
   20c8c:	str	r8, [sp, #96]	; 0x60
   20c90:	strb	ip, [sp, #100]	; 0x64
   20c94:	bl	171c4 <__assert_fail@plt+0x5f1c>
   20c98:	subs	r2, r0, #0
   20c9c:	beq	20bec <__assert_fail@plt+0xf944>
   20ca0:	add	ip, sp, #128	; 0x80
   20ca4:	mov	r4, #0
   20ca8:	ldr	r3, [sp, #24]
   20cac:	mov	r5, #0
   20cb0:	mov	r1, r6
   20cb4:	str	ip, [sp]
   20cb8:	mov	ip, #10
   20cbc:	mov	r0, r7
   20cc0:	strd	r4, [sp, #128]	; 0x80
   20cc4:	strb	ip, [sp, #132]	; 0x84
   20cc8:	bl	171c4 <__assert_fail@plt+0x5f1c>
   20ccc:	subs	r3, r0, #0
   20cd0:	str	r3, [sp, #24]
   20cd4:	bne	1fa88 <__assert_fail@plt+0xe7e0>
   20cd8:	b	20bec <__assert_fail@plt+0xf944>
   20cdc:	cmp	r3, #0
   20ce0:	cmpne	r3, #3
   20ce4:	beq	2099c <__assert_fail@plt+0xf6f4>
   20ce8:	ldr	r6, [sp, #84]	; 0x54
   20cec:	b	20990 <__assert_fail@plt+0xf6e8>
   20cf0:	ldr	r4, [sp, #76]	; 0x4c
   20cf4:	b	20968 <__assert_fail@plt+0xf6c0>
   20cf8:	mov	r6, #0
   20cfc:	b	20934 <__assert_fail@plt+0xf68c>
   20d00:	cmp	r3, #0
   20d04:	movne	r4, #0
   20d08:	bne	20cf8 <__assert_fail@plt+0xfa50>
   20d0c:	mov	r4, r3
   20d10:	ldrb	r6, [sp, #84]	; 0x54
   20d14:	b	20934 <__assert_fail@plt+0xf68c>
   20d18:	ldr	r2, [sp, #204]	; 0xcc
   20d1c:	mov	r3, #11
   20d20:	str	r3, [r2]
   20d24:	b	206c8 <__assert_fail@plt+0xf420>
   20d28:	mov	r5, #128	; 0x80
   20d2c:	mov	r7, #4
   20d30:	bl	11170 <__ctype_b_loc@plt>
   20d34:	ldr	r2, [r0]
   20d38:	add	ip, r7, #24
   20d3c:	sub	r3, r5, #-2147483647	; 0x80000001
   20d40:	mov	lr, #1
   20d44:	ldr	r1, [sp, #32]
   20d48:	add	r6, r2, r3, lsl lr
   20d4c:	add	ip, r1, ip, lsl #2
   20d50:	add	r7, r1, #128	; 0x80
   20d54:	mov	r0, r6
   20d58:	mov	r1, #0
   20d5c:	ldrh	r2, [r0, #2]!
   20d60:	add	r3, r5, r1
   20d64:	ubfx	r2, r2, #3, #1
   20d68:	cmp	r3, #95	; 0x5f
   20d6c:	movne	r3, r2
   20d70:	orreq	r3, r2, #1
   20d74:	cmp	r3, #0
   20d78:	beq	20d88 <__assert_fail@plt+0xfae0>
   20d7c:	ldr	r3, [ip]
   20d80:	orr	r3, r3, lr, lsl r1
   20d84:	str	r3, [ip]
   20d88:	add	r1, r1, #1
   20d8c:	cmp	r1, #32
   20d90:	bne	20d5c <__assert_fail@plt+0xfab4>
   20d94:	add	ip, ip, #4
   20d98:	add	r5, r5, #32
   20d9c:	cmp	r7, ip
   20da0:	add	r6, r6, #64	; 0x40
   20da4:	bne	20d54 <__assert_fail@plt+0xfaac>
   20da8:	b	20160 <__assert_fail@plt+0xeeb8>
   20dac:	ldr	r0, [sp, #84]	; 0x54
   20db0:	str	r3, [sp, #56]	; 0x38
   20db4:	str	r2, [sp, #60]	; 0x3c
   20db8:	bl	11188 <strlen@plt>
   20dbc:	cmp	r0, #1
   20dc0:	ldr	r3, [sp, #56]	; 0x38
   20dc4:	ldr	r2, [sp, #60]	; 0x3c
   20dc8:	bls	20e3c <__assert_fail@plt+0xfb94>
   20dcc:	ldr	r2, [sp, #204]	; 0xcc
   20dd0:	mov	r3, #3
   20dd4:	str	r3, [r2]
   20dd8:	b	206c8 <__assert_fail@plt+0xf420>
   20ddc:	mov	r7, r5
   20de0:	b	20d30 <__assert_fail@plt+0xfa88>
   20de4:	ldr	r0, [sp, #84]	; 0x54
   20de8:	str	r3, [sp, #56]	; 0x38
   20dec:	str	r2, [sp, #60]	; 0x3c
   20df0:	bl	11188 <strlen@plt>
   20df4:	cmp	r0, #1
   20df8:	bhi	20dcc <__assert_fail@plt+0xfb24>
   20dfc:	ldr	r3, [sp, #56]	; 0x38
   20e00:	ldr	r2, [sp, #60]	; 0x3c
   20e04:	cmp	r2, #0
   20e08:	movne	r4, #0
   20e0c:	bne	2092c <__assert_fail@plt+0xf684>
   20e10:	b	20918 <__assert_fail@plt+0xf670>
   20e14:	ldr	r0, [sp, #76]	; 0x4c
   20e18:	str	r3, [sp, #56]	; 0x38
   20e1c:	str	r2, [sp, #60]	; 0x3c
   20e20:	bl	11188 <strlen@plt>
   20e24:	cmp	r0, #1
   20e28:	ldr	r3, [sp, #56]	; 0x38
   20e2c:	ldr	r2, [sp, #60]	; 0x3c
   20e30:	bhi	20dcc <__assert_fail@plt+0xfb24>
   20e34:	cmp	r3, #3
   20e38:	beq	20dac <__assert_fail@plt+0xfb04>
   20e3c:	ldr	r1, [sp, #76]	; 0x4c
   20e40:	ldrb	r4, [r1]
   20e44:	b	2091c <__assert_fail@plt+0xf674>
   20e48:	ldr	r6, [sp, #24]
   20e4c:	mov	r2, r6
   20e50:	b	200a0 <__assert_fail@plt+0xedf8>
   20e54:	lsl	r3, r1, #1
   20e58:	mov	r0, r2
   20e5c:	add	r3, r3, #1
   20e60:	str	r3, [sp, #40]	; 0x28
   20e64:	lsl	r3, r3, #2
   20e68:	mov	r1, r3
   20e6c:	str	r3, [sp, #56]	; 0x38
   20e70:	bl	2447c <__assert_fail@plt+0x131d4>
   20e74:	ldr	r3, [sp, #56]	; 0x38
   20e78:	mov	r2, r0
   20e7c:	ldr	r0, [r9, #8]
   20e80:	str	r2, [sp, #52]	; 0x34
   20e84:	mov	r1, r3
   20e88:	bl	2447c <__assert_fail@plt+0x131d4>
   20e8c:	ldr	r2, [sp, #52]	; 0x34
   20e90:	cmp	r0, #0
   20e94:	cmpne	r2, #0
   20e98:	beq	20eb8 <__assert_fail@plt+0xfc10>
   20e9c:	str	r2, [r9, #4]
   20ea0:	str	r0, [r9, #8]
   20ea4:	ldr	r3, [r9, #32]
   20ea8:	b	209d8 <__assert_fail@plt+0xf730>
   20eac:	mov	r2, r5
   20eb0:	ldr	r6, [sp, #24]
   20eb4:	b	200dc <__assert_fail@plt+0xee34>
   20eb8:	mov	r7, r0
   20ebc:	mov	r0, r2
   20ec0:	bl	24628 <__assert_fail@plt+0x13380>
   20ec4:	mov	r0, r7
   20ec8:	bl	24628 <__assert_fail@plt+0x13380>
   20ecc:	ldr	r2, [sp, #204]	; 0xcc
   20ed0:	mov	r3, #12
   20ed4:	str	r3, [r2]
   20ed8:	b	206c8 <__assert_fail@plt+0xf420>
   20edc:	mov	r3, #0
   20ee0:	mov	r9, #1
   20ee4:	ldr	r6, [sp, #24]
   20ee8:	str	r3, [sp, #36]	; 0x24
   20eec:	b	1fec0 <__assert_fail@plt+0xec18>
   20ef0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20ef4:	ldr	ip, [r1]
   20ef8:	strd	r6, [sp, #8]
   20efc:	mov	r7, r2
   20f00:	strd	r8, [sp, #16]
   20f04:	mov	r8, r1
   20f08:	mov	r9, r0
   20f0c:	strd	sl, [sp, #24]
   20f10:	mov	sl, r3
   20f14:	str	lr, [sp, #32]
   20f18:	sub	sp, sp, #36	; 0x24
   20f1c:	ldr	r6, [sp, #72]	; 0x48
   20f20:	ldr	r5, [sp, #76]	; 0x4c
   20f24:	str	r6, [sp]
   20f28:	str	ip, [sp, #20]
   20f2c:	str	r5, [sp, #4]
   20f30:	bl	1f95c <__assert_fail@plt+0xe6b4>
   20f34:	ldr	r2, [r5]
   20f38:	clz	r3, r0
   20f3c:	lsr	r3, r3, #5
   20f40:	cmp	r2, #0
   20f44:	moveq	r3, #0
   20f48:	cmp	r3, #0
   20f4c:	bne	21098 <__assert_fail@plt+0xfdf0>
   20f50:	mov	r4, r0
   20f54:	str	r9, [sp, #12]
   20f58:	str	r8, [sp, #16]
   20f5c:	ldrb	lr, [r7, #4]
   20f60:	clz	ip, r6
   20f64:	mov	r3, sl
   20f68:	mov	r2, r7
   20f6c:	lsr	ip, ip, #5
   20f70:	ldrd	r0, [sp, #12]
   20f74:	and	fp, lr, #247	; 0xf7
   20f78:	cmp	fp, #2
   20f7c:	beq	2105c <__assert_fail@plt+0xfdb4>
   20f80:	cmp	lr, #9
   20f84:	orrne	ip, ip, #1
   20f88:	cmp	ip, #0
   20f8c:	beq	2105c <__assert_fail@plt+0xfdb4>
   20f90:	str	r6, [sp]
   20f94:	str	r5, [sp, #4]
   20f98:	bl	1f95c <__assert_fail@plt+0xe6b4>
   20f9c:	ldr	r2, [r5]
   20fa0:	clz	r3, r0
   20fa4:	mov	fp, r0
   20fa8:	lsr	r3, r3, #5
   20fac:	cmp	r2, #0
   20fb0:	moveq	r3, #0
   20fb4:	cmp	r3, #0
   20fb8:	bne	2107c <__assert_fail@plt+0xfdd4>
   20fbc:	cmp	r4, #0
   20fc0:	cmpne	r0, #0
   20fc4:	bne	20fd4 <__assert_fail@plt+0xfd2c>
   20fc8:	cmp	r4, #0
   20fcc:	moveq	r4, r0
   20fd0:	b	20f5c <__assert_fail@plt+0xfcb4>
   20fd4:	mov	r3, r0
   20fd8:	ldr	r0, [sp, #20]
   20fdc:	add	r1, sp, #24
   20fe0:	mov	ip, #16
   20fe4:	mov	r8, #0
   20fe8:	mov	r9, #0
   20fec:	mov	r2, r4
   20ff0:	str	r1, [sp]
   20ff4:	strd	r8, [sp, #24]
   20ff8:	add	r1, r0, #64	; 0x40
   20ffc:	add	r0, r0, #56	; 0x38
   21000:	strb	ip, [sp, #28]
   21004:	bl	171c4 <__assert_fail@plt+0x5f1c>
   21008:	cmp	r0, #0
   2100c:	beq	21018 <__assert_fail@plt+0xfd70>
   21010:	mov	r4, r0
   21014:	b	20f5c <__assert_fail@plt+0xfcb4>
   21018:	mov	r3, r0
   2101c:	movw	r1, #24224	; 0x5ea0
   21020:	movt	r1, #1
   21024:	mov	r2, r3
   21028:	mov	r0, fp
   2102c:	str	r3, [sp, #12]
   21030:	bl	14dbc <__assert_fail@plt+0x3b14>
   21034:	ldr	r3, [sp, #12]
   21038:	mov	r0, r4
   2103c:	movw	r1, #24224	; 0x5ea0
   21040:	movt	r1, #1
   21044:	mov	r2, r3
   21048:	bl	14dbc <__assert_fail@plt+0x3b14>
   2104c:	ldr	r3, [sp, #12]
   21050:	mov	r2, #12
   21054:	str	r2, [r5]
   21058:	mov	r4, r3
   2105c:	mov	r0, r4
   21060:	add	sp, sp, #36	; 0x24
   21064:	ldrd	r4, [sp]
   21068:	ldrd	r6, [sp, #8]
   2106c:	ldrd	r8, [sp, #16]
   21070:	ldrd	sl, [sp, #24]
   21074:	add	sp, sp, #32
   21078:	pop	{pc}		; (ldr pc, [sp], #4)
   2107c:	cmp	r4, #0
   21080:	beq	21098 <__assert_fail@plt+0xfdf0>
   21084:	movw	r1, #24224	; 0x5ea0
   21088:	movt	r1, #1
   2108c:	mov	r0, r4
   21090:	mov	r2, #0
   21094:	bl	14dbc <__assert_fail@plt+0x3b14>
   21098:	mov	r4, #0
   2109c:	b	2105c <__assert_fail@plt+0xfdb4>
   210a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   210a4:	mov	r5, r2
   210a8:	ldr	r4, [r1]
   210ac:	ldr	ip, [r4, #84]	; 0x54
   210b0:	strd	r6, [sp, #8]
   210b4:	mov	r6, r0
   210b8:	strd	r8, [sp, #16]
   210bc:	strd	sl, [sp, #24]
   210c0:	mov	fp, r3
   210c4:	mov	sl, r1
   210c8:	str	lr, [sp, #32]
   210cc:	sub	sp, sp, #36	; 0x24
   210d0:	ldrd	r8, [sp, #72]	; 0x48
   210d4:	strd	r8, [sp]
   210d8:	str	r3, [sp, #12]
   210dc:	str	ip, [sp, #20]
   210e0:	bl	20ef0 <__assert_fail@plt+0xfc48>
   210e4:	ldr	r2, [r9]
   210e8:	clz	r3, r0
   210ec:	lsr	r3, r3, #5
   210f0:	cmp	r2, #0
   210f4:	moveq	r3, #0
   210f8:	cmp	r3, #0
   210fc:	bne	21214 <__assert_fail@plt+0xff6c>
   21100:	orr	r3, fp, #8388608	; 0x800000
   21104:	mov	r7, r0
   21108:	str	r3, [sp, #8]
   2110c:	str	sl, [sp, #16]
   21110:	b	21198 <__assert_fail@plt+0xfef0>
   21114:	cmp	fp, #9
   21118:	orrne	ip, ip, #1
   2111c:	cmp	ip, #0
   21120:	beq	211f0 <__assert_fail@plt+0xff48>
   21124:	ldr	ip, [sp, #20]
   21128:	ldr	fp, [r4, #84]	; 0x54
   2112c:	str	ip, [r4, #84]	; 0x54
   21130:	strd	r8, [sp]
   21134:	bl	20ef0 <__assert_fail@plt+0xfc48>
   21138:	ldr	r1, [r9]
   2113c:	clz	r2, r0
   21140:	mov	r3, r0
   21144:	lsr	r2, r2, #5
   21148:	cmp	r1, #0
   2114c:	moveq	r2, #0
   21150:	cmp	r2, #0
   21154:	bne	211f8 <__assert_fail@plt+0xff50>
   21158:	ldr	r2, [r4, #84]	; 0x54
   2115c:	orr	fp, r2, fp
   21160:	str	fp, [r4, #84]	; 0x54
   21164:	add	r1, sp, #24
   21168:	mov	ip, #10
   2116c:	mov	sl, #0
   21170:	mov	fp, #0
   21174:	mov	r2, r7
   21178:	add	r0, r4, #56	; 0x38
   2117c:	str	r1, [sp]
   21180:	add	r1, r4, #64	; 0x40
   21184:	strd	sl, [sp, #24]
   21188:	strb	ip, [sp, #28]
   2118c:	bl	171c4 <__assert_fail@plt+0x5f1c>
   21190:	subs	r7, r0, #0
   21194:	beq	21238 <__assert_fail@plt+0xff90>
   21198:	ldrb	r3, [r5, #4]
   2119c:	mov	r1, r6
   211a0:	mov	r0, r5
   211a4:	ldr	r2, [sp, #8]
   211a8:	cmp	r3, #10
   211ac:	bne	21218 <__assert_fail@plt+0xff70>
   211b0:	bl	1eccc <__assert_fail@plt+0xda24>
   211b4:	ldr	lr, [r6, #40]	; 0x28
   211b8:	clz	ip, r8
   211bc:	mov	r2, r5
   211c0:	lsr	ip, ip, #5
   211c4:	ldrb	fp, [r5, #4]
   211c8:	ldr	r3, [sp, #12]
   211cc:	add	lr, lr, r0
   211d0:	mov	r0, r6
   211d4:	ldr	r1, [sp, #16]
   211d8:	str	lr, [r6, #40]	; 0x28
   211dc:	and	lr, fp, #247	; 0xf7
   211e0:	cmp	lr, #2
   211e4:	bne	21114 <__assert_fail@plt+0xfe6c>
   211e8:	mov	r3, #0
   211ec:	b	21164 <__assert_fail@plt+0xfebc>
   211f0:	mov	r3, ip
   211f4:	b	21164 <__assert_fail@plt+0xfebc>
   211f8:	cmp	r7, #0
   211fc:	beq	21214 <__assert_fail@plt+0xff6c>
   21200:	movw	r1, #24224	; 0x5ea0
   21204:	movt	r1, #1
   21208:	mov	r0, r7
   2120c:	mov	r2, #0
   21210:	bl	14dbc <__assert_fail@plt+0x3b14>
   21214:	mov	r7, #0
   21218:	mov	r0, r7
   2121c:	add	sp, sp, #36	; 0x24
   21220:	ldrd	r4, [sp]
   21224:	ldrd	r6, [sp, #8]
   21228:	ldrd	r8, [sp, #16]
   2122c:	ldrd	sl, [sp, #24]
   21230:	add	sp, sp, #32
   21234:	pop	{pc}		; (ldr pc, [sp], #4)
   21238:	mov	r3, #12
   2123c:	str	r3, [r9]
   21240:	b	21218 <__assert_fail@plt+0xff70>
   21244:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21248:	mov	r5, r0
   2124c:	ldr	r4, [r0]
   21250:	strd	r6, [sp, #8]
   21254:	mov	r7, r3
   21258:	mov	r6, r2
   2125c:	ldrb	r3, [r0, #28]
   21260:	mov	r0, #0
   21264:	strd	r8, [sp, #16]
   21268:	mov	r8, r1
   2126c:	ldr	r2, [r5, #4]
   21270:	strd	sl, [sp, #24]
   21274:	str	lr, [sp, #32]
   21278:	sub	sp, sp, #140	; 0x8c
   2127c:	bic	r3, r3, #111	; 0x6f
   21280:	str	r0, [r5, #8]
   21284:	str	r7, [r5, #12]
   21288:	cmp	r2, #159	; 0x9f
   2128c:	str	r0, [r5, #24]
   21290:	strb	r3, [r5, #28]
   21294:	str	r0, [sp, #28]
   21298:	bls	21e1c <__assert_fail@plt+0x10b74>
   2129c:	mov	r3, #160	; 0xa0
   212a0:	mov	r1, #0
   212a4:	mov	r2, r3
   212a8:	mov	r0, r4
   212ac:	str	r3, [r5, #8]
   212b0:	bl	111c4 <memset@plt>
   212b4:	movw	r3, #43689	; 0xaaa9
   212b8:	movt	r3, #2730	; 0xaaa
   212bc:	mov	r2, #31
   212c0:	cmp	r6, r3
   212c4:	str	r2, [r4, #64]	; 0x40
   212c8:	bhi	218cc <__assert_fail@plt+0x10624>
   212cc:	add	r9, r6, #1
   212d0:	lsl	r0, r9, #3
   212d4:	str	r9, [r4, #4]
   212d8:	bl	24440 <__assert_fail@plt+0x13198>
   212dc:	cmp	r6, #0
   212e0:	str	r0, [r4]
   212e4:	beq	21e40 <__assert_fail@plt+0x10b98>
   212e8:	mov	r1, #1
   212ec:	lsl	r1, r1, #1
   212f0:	cmp	r6, r1
   212f4:	bcs	212ec <__assert_fail@plt+0x10044>
   212f8:	sub	sl, r1, #1
   212fc:	mov	r0, #12
   21300:	bl	243cc <__assert_fail@plt+0x13124>
   21304:	str	r0, [r4, #32]
   21308:	str	sl, [r4, #68]	; 0x44
   2130c:	bl	110e0 <__ctype_get_mb_cur_max@plt>
   21310:	str	r0, [r4, #92]	; 0x5c
   21314:	mov	r0, #14
   21318:	bl	11248 <nl_langinfo@plt>
   2131c:	ldrb	r3, [r0]
   21320:	and	r3, r3, #223	; 0xdf
   21324:	cmp	r3, #85	; 0x55
   21328:	bne	21380 <__assert_fail@plt+0x100d8>
   2132c:	ldrb	r3, [r0, #1]
   21330:	and	r3, r3, #223	; 0xdf
   21334:	cmp	r3, #84	; 0x54
   21338:	bne	21380 <__assert_fail@plt+0x100d8>
   2133c:	ldrb	r3, [r0, #2]
   21340:	and	r3, r3, #223	; 0xdf
   21344:	cmp	r3, #70	; 0x46
   21348:	bne	21380 <__assert_fail@plt+0x100d8>
   2134c:	ldrb	r3, [r0, #3]
   21350:	movw	r1, #22784	; 0x5900
   21354:	movt	r1, #2
   21358:	cmp	r3, #45	; 0x2d
   2135c:	moveq	r3, #4
   21360:	movne	r3, #3
   21364:	add	r0, r0, r3
   21368:	bl	10fd8 <strcmp@plt>
   2136c:	cmp	r0, #0
   21370:	bne	21380 <__assert_fail@plt+0x100d8>
   21374:	ldrb	r3, [r4, #88]	; 0x58
   21378:	orr	r3, r3, #4
   2137c:	strb	r3, [r4, #88]	; 0x58
   21380:	ldrb	r3, [r4, #88]	; 0x58
   21384:	ldr	r2, [r4, #92]	; 0x5c
   21388:	bfc	r3, #3, #1
   2138c:	cmp	r2, #1
   21390:	strb	r3, [r4, #88]	; 0x58
   21394:	ble	213b0 <__assert_fail@plt+0x10108>
   21398:	uxtb	sl, r3
   2139c:	ands	sl, sl, #4
   213a0:	beq	21930 <__assert_fail@plt+0x10688>
   213a4:	movw	r3, #22200	; 0x56b8
   213a8:	movt	r3, #2
   213ac:	str	r3, [r4, #60]	; 0x3c
   213b0:	ldr	r3, [r4]
   213b4:	cmp	r3, #0
   213b8:	beq	218cc <__assert_fail@plt+0x10624>
   213bc:	ldr	r3, [r4, #32]
   213c0:	cmp	r3, #0
   213c4:	beq	218cc <__assert_fail@plt+0x10624>
   213c8:	mov	r1, #0
   213cc:	movw	r2, #0
   213d0:	movt	r2, #0
   213d4:	mov	r3, #1
   213d8:	cmp	r2, r1
   213dc:	str	r1, [sp, #28]
   213e0:	mov	r1, #1
   213e4:	moveq	r3, r2
   213e8:	movw	r2, #0
   213ec:	movt	r2, #0
   213f0:	cmp	r2, #0
   213f4:	moveq	r1, r2
   213f8:	orr	r3, r3, r1
   213fc:	ands	r3, r3, #255	; 0xff
   21400:	str	r3, [sp, #8]
   21404:	beq	21428 <__assert_fail@plt+0x10180>
   21408:	mov	r1, #0
   2140c:	add	r0, r4, #136	; 0x88
   21410:	bl	11044 <pthread_mutex_init@plt>
   21414:	cmp	r0, #0
   21418:	bne	218cc <__assert_fail@plt+0x10624>
   2141c:	ldr	r3, [sp, #28]
   21420:	cmp	r3, #0
   21424:	bne	218d4 <__assert_fail@plt+0x1062c>
   21428:	mov	r2, #76	; 0x4c
   2142c:	mov	r1, #0
   21430:	ldr	sl, [r5, #20]
   21434:	add	r0, sp, #56	; 0x38
   21438:	and	fp, r7, #4194304	; 0x400000
   2143c:	bl	111c4 <memset@plt>
   21440:	ldrb	r3, [r4, #88]	; 0x58
   21444:	adds	lr, fp, #0
   21448:	movne	lr, #1
   2144c:	str	r8, [sp, #52]	; 0x34
   21450:	ldr	r0, [r4, #92]	; 0x5c
   21454:	orr	r2, sl, fp
   21458:	adds	r1, r2, #0
   2145c:	str	r6, [sp, #96]	; 0x60
   21460:	movne	r1, #1
   21464:	cmp	r6, #0
   21468:	str	r6, [sp, #100]	; 0x64
   2146c:	ubfx	ip, r3, #2, #1
   21470:	str	r6, [sp, #104]	; 0x68
   21474:	ubfx	r3, r3, #3, #1
   21478:	str	r6, [sp, #108]	; 0x6c
   2147c:	str	sl, [sp, #116]	; 0x74
   21480:	strb	lr, [sp, #124]	; 0x7c
   21484:	strb	ip, [sp, #125]	; 0x7d
   21488:	strb	r3, [sp, #126]	; 0x7e
   2148c:	strb	r1, [sp, #127]	; 0x7f
   21490:	str	r0, [sp, #132]	; 0x84
   21494:	bne	21908 <__assert_fail@plt+0x10660>
   21498:	cmp	r1, #0
   2149c:	ldrne	r8, [sp, #56]	; 0x38
   214a0:	cmp	fp, #0
   214a4:	str	r8, [sp, #56]	; 0x38
   214a8:	beq	21560 <__assert_fail@plt+0x102b8>
   214ac:	cmp	r0, #1
   214b0:	ble	21e08 <__assert_fail@plt+0x10b60>
   214b4:	add	r0, sp, #52	; 0x34
   214b8:	bl	156a4 <__assert_fail@plt+0x43fc>
   214bc:	cmp	r0, #0
   214c0:	bne	214fc <__assert_fail@plt+0x10254>
   214c4:	ldr	r3, [sp, #84]	; 0x54
   214c8:	cmp	r6, r3
   214cc:	ble	21e94 <__assert_fail@plt+0x10bec>
   214d0:	ldr	r3, [sp, #80]	; 0x50
   214d4:	ldr	r2, [r4, #92]	; 0x5c
   214d8:	ldr	r1, [sp, #88]	; 0x58
   214dc:	add	r3, r3, r2
   214e0:	cmp	r1, r3
   214e4:	bgt	21e94 <__assert_fail@plt+0x10bec>
   214e8:	lsl	r1, r1, #1
   214ec:	add	r0, sp, #52	; 0x34
   214f0:	bl	152b4 <__assert_fail@plt+0x400c>
   214f4:	cmp	r0, #0
   214f8:	beq	214b4 <__assert_fail@plt+0x1020c>
   214fc:	ldr	r6, [r5]
   21500:	str	r0, [sp, #28]
   21504:	ldr	r0, [r6, #56]	; 0x38
   21508:	cmp	r0, #0
   2150c:	beq	21520 <__assert_fail@plt+0x10278>
   21510:	ldr	r7, [r0]
   21514:	bl	24628 <__assert_fail@plt+0x13380>
   21518:	subs	r0, r7, #0
   2151c:	bne	21510 <__assert_fail@plt+0x10268>
   21520:	mov	r7, #0
   21524:	mov	r3, #31
   21528:	ldr	r0, [r6, #16]
   2152c:	str	r7, [r6, #52]	; 0x34
   21530:	str	r7, [r6, #56]	; 0x38
   21534:	str	r3, [r6, #64]	; 0x40
   21538:	bl	24628 <__assert_fail@plt+0x13380>
   2153c:	add	r0, sp, #52	; 0x34
   21540:	str	r7, [r6, #16]
   21544:	bl	16194 <__assert_fail@plt+0x4eec>
   21548:	ldr	r3, [sp, #8]
   2154c:	cmp	r3, r7
   21550:	beq	218d4 <__assert_fail@plt+0x1062c>
   21554:	add	r0, r4, #136	; 0x88
   21558:	bl	10ff0 <pthread_mutex_destroy@plt>
   2155c:	b	218d4 <__assert_fail@plt+0x1062c>
   21560:	cmp	r0, #1
   21564:	bgt	21d20 <__assert_fail@plt+0x10a78>
   21568:	cmp	r2, #0
   2156c:	ldr	r1, [sp, #88]	; 0x58
   21570:	beq	219e0 <__assert_fail@plt+0x10738>
   21574:	ldr	r3, [sp, #80]	; 0x50
   21578:	ldr	r2, [sp, #100]	; 0x64
   2157c:	cmp	r1, r2
   21580:	movge	r1, r2
   21584:	cmp	r1, r3
   21588:	bgt	21594 <__assert_fail@plt+0x102ec>
   2158c:	b	21f80 <__assert_fail@plt+0x10cd8>
   21590:	ldr	r8, [sp, #56]	; 0x38
   21594:	ldr	r2, [sp, #52]	; 0x34
   21598:	ldr	ip, [sp, #76]	; 0x4c
   2159c:	ldr	r0, [sp, #116]	; 0x74
   215a0:	add	r2, r2, r3
   215a4:	ldrb	r2, [r2, ip]
   215a8:	ldrb	r2, [r0, r2]
   215ac:	strb	r2, [r8, r3]
   215b0:	add	r3, r3, #1
   215b4:	cmp	r1, r3
   215b8:	bne	21590 <__assert_fail@plt+0x102e8>
   215bc:	mov	r3, #0
   215c0:	str	r3, [sp, #28]
   215c4:	str	r1, [sp, #80]	; 0x50
   215c8:	str	r1, [sp, #84]	; 0x54
   215cc:	ldr	r6, [r5]
   215d0:	mov	r8, #0
   215d4:	orr	r2, r7, #8388608	; 0x800000
   215d8:	add	r1, sp, #52	; 0x34
   215dc:	add	r0, sp, #32
   215e0:	str	r8, [r5, #24]
   215e4:	str	r7, [r6, #128]	; 0x80
   215e8:	bl	1eccc <__assert_fail@plt+0xda24>
   215ec:	ldr	ip, [sp, #92]	; 0x5c
   215f0:	add	r1, sp, #28
   215f4:	mov	r3, r7
   215f8:	add	r2, sp, #32
   215fc:	str	r8, [sp]
   21600:	str	r1, [sp, #4]
   21604:	mov	r1, r5
   21608:	add	ip, ip, r0
   2160c:	add	r0, sp, #52	; 0x34
   21610:	str	ip, [sp, #92]	; 0x5c
   21614:	bl	210a0 <__assert_fail@plt+0xfdf8>
   21618:	ldr	lr, [sp, #28]
   2161c:	mov	r9, r0
   21620:	cmp	lr, r8
   21624:	bne	21e4c <__assert_fail@plt+0x10ba4>
   21628:	mov	r2, #0
   2162c:	mov	r3, #0
   21630:	add	r7, sp, #40	; 0x28
   21634:	mov	ip, #2
   21638:	add	sl, r6, #56	; 0x38
   2163c:	add	r6, r6, #64	; 0x40
   21640:	mov	r0, sl
   21644:	mov	r1, r6
   21648:	str	r7, [sp]
   2164c:	strd	r2, [sp, #40]	; 0x28
   21650:	mov	r3, lr
   21654:	mov	r2, lr
   21658:	strb	ip, [sp, #44]	; 0x2c
   2165c:	bl	171c4 <__assert_fail@plt+0x5f1c>
   21660:	cmp	r9, #0
   21664:	mov	lr, r0
   21668:	moveq	r9, r0
   2166c:	beq	216a4 <__assert_fail@plt+0x103fc>
   21670:	mov	ip, #16
   21674:	mov	r2, r9
   21678:	str	r7, [sp]
   2167c:	mov	r9, #0
   21680:	mov	r8, #0
   21684:	mov	r3, lr
   21688:	mov	r1, r6
   2168c:	mov	r0, sl
   21690:	strd	r8, [sp, #40]	; 0x28
   21694:	mov	r9, lr
   21698:	strb	ip, [sp, #44]	; 0x2c
   2169c:	bl	171c4 <__assert_fail@plt+0x5f1c>
   216a0:	mov	lr, r0
   216a4:	clz	r3, lr
   216a8:	cmp	r9, #0
   216ac:	ldr	r6, [r5]
   216b0:	lsr	r3, r3, #5
   216b4:	moveq	r9, #1
   216b8:	movne	r9, r3
   216bc:	cmp	r9, #0
   216c0:	movne	r2, #12
   216c4:	movne	r3, #0
   216c8:	strne	r2, [sp, #28]
   216cc:	strne	r3, [r4, #52]	; 0x34
   216d0:	bne	21504 <__assert_fail@plt+0x1025c>
   216d4:	ldr	r0, [r6, #4]
   216d8:	str	lr, [r4, #52]	; 0x34
   216dc:	lsl	r0, r0, #2
   216e0:	bl	24440 <__assert_fail@plt+0x13198>
   216e4:	ldr	r3, [r6, #4]
   216e8:	str	r0, [r6, #12]
   216ec:	lsl	r0, r3, #2
   216f0:	bl	24440 <__assert_fail@plt+0x13198>
   216f4:	ldr	r3, [r6, #4]
   216f8:	str	r0, [r6, #16]
   216fc:	add	r3, r3, r3, lsl #1
   21700:	lsl	r0, r3, #2
   21704:	bl	24440 <__assert_fail@plt+0x13198>
   21708:	ldr	r3, [r6, #4]
   2170c:	str	r0, [r6, #20]
   21710:	add	r3, r3, r3, lsl #1
   21714:	lsl	r0, r3, #2
   21718:	bl	24440 <__assert_fail@plt+0x13198>
   2171c:	ldr	r3, [r6, #12]
   21720:	str	r0, [r6, #24]
   21724:	cmp	r3, #0
   21728:	beq	21d10 <__assert_fail@plt+0x10a68>
   2172c:	ldr	r3, [r6, #16]
   21730:	cmp	r3, #0
   21734:	beq	21d10 <__assert_fail@plt+0x10a68>
   21738:	ldr	r3, [r6, #20]
   2173c:	cmp	r3, #0
   21740:	beq	21d10 <__assert_fail@plt+0x10a68>
   21744:	cmp	r0, #0
   21748:	beq	21d10 <__assert_fail@plt+0x10a68>
   2174c:	ldr	r0, [r5, #24]
   21750:	lsl	r0, r0, #2
   21754:	bl	24440 <__assert_fail@plt+0x13198>
   21758:	cmp	r0, #0
   2175c:	str	r0, [r6, #132]	; 0x84
   21760:	beq	217e4 <__assert_fail@plt+0x1053c>
   21764:	ldr	r2, [r5, #24]
   21768:	cmp	r2, #0
   2176c:	subne	r0, r0, #4
   21770:	movne	r3, r9
   21774:	beq	21788 <__assert_fail@plt+0x104e0>
   21778:	str	r3, [r0, #4]!
   2177c:	add	r3, r3, #1
   21780:	cmp	r3, r2
   21784:	bne	21778 <__assert_fail@plt+0x104d0>
   21788:	movw	r1, #27688	; 0x6c28
   2178c:	movt	r1, #1
   21790:	ldr	r0, [r6, #52]	; 0x34
   21794:	mov	r2, r6
   21798:	bl	16f64 <__assert_fail@plt+0x5cbc>
   2179c:	ldr	ip, [r5, #24]
   217a0:	cmp	ip, #0
   217a4:	beq	21f88 <__assert_fail@plt+0x10ce0>
   217a8:	ldr	r0, [r6, #132]	; 0x84
   217ac:	ldr	r3, [r0]
   217b0:	cmp	r3, #0
   217b4:	bne	217e4 <__assert_fail@plt+0x1053c>
   217b8:	mov	r2, r0
   217bc:	b	217cc <__assert_fail@plt+0x10524>
   217c0:	ldr	r1, [r2, #4]!
   217c4:	cmp	r1, r3
   217c8:	bne	217e4 <__assert_fail@plt+0x1053c>
   217cc:	add	r3, r3, #1
   217d0:	cmp	r3, ip
   217d4:	bne	217c0 <__assert_fail@plt+0x10518>
   217d8:	bl	24628 <__assert_fail@plt+0x13380>
   217dc:	mov	r3, #0
   217e0:	str	r3, [r6, #132]	; 0x84
   217e4:	movw	r1, #30184	; 0x75e8
   217e8:	movt	r1, #1
   217ec:	ldr	r0, [r6, #52]	; 0x34
   217f0:	mov	r2, r5
   217f4:	bl	14dbc <__assert_fail@plt+0x3b14>
   217f8:	cmp	r0, #0
   217fc:	bne	214fc <__assert_fail@plt+0x10254>
   21800:	movw	r1, #32324	; 0x7e44
   21804:	movt	r1, #1
   21808:	ldr	r0, [r6, #52]	; 0x34
   2180c:	mov	r2, r6
   21810:	bl	14dbc <__assert_fail@plt+0x3b14>
   21814:	cmp	r0, #0
   21818:	bne	214fc <__assert_fail@plt+0x10254>
   2181c:	mov	r2, r6
   21820:	movw	r1, #27856	; 0x6cd0
   21824:	movt	r1, #1
   21828:	ldr	r0, [r6, #52]	; 0x34
   2182c:	bl	16f64 <__assert_fail@plt+0x5cbc>
   21830:	mov	r2, r6
   21834:	movw	r1, #25244	; 0x629c
   21838:	movt	r1, #1
   2183c:	ldr	r0, [r6, #52]	; 0x34
   21840:	bl	16f64 <__assert_fail@plt+0x5cbc>
   21844:	subs	r3, r0, #0
   21848:	str	r3, [sp, #12]
   2184c:	bne	21f64 <__assert_fail@plt+0x10cbc>
   21850:	ldr	r1, [r6, #24]
   21854:	mov	sl, r3
   21858:	mov	r8, r3
   2185c:	add	r9, r8, r8, lsl #1
   21860:	lsl	r9, r9, #2
   21864:	add	r3, r1, r9
   21868:	ldr	r3, [r3, #4]
   2186c:	cmp	r3, #0
   21870:	addne	r8, r8, #1
   21874:	bne	218ac <__assert_fail@plt+0x10604>
   21878:	mov	r3, #1
   2187c:	mov	r2, r8
   21880:	mov	r1, r6
   21884:	mov	r0, r7
   21888:	bl	184c4 <__assert_fail@plt+0x721c>
   2188c:	cmp	r0, #0
   21890:	bne	214fc <__assert_fail@plt+0x10254>
   21894:	ldr	r1, [r6, #24]
   21898:	add	r8, r8, #1
   2189c:	add	r9, r1, r9
   218a0:	ldr	r9, [r9, #4]
   218a4:	cmp	r9, #0
   218a8:	beq	219f0 <__assert_fail@plt+0x10748>
   218ac:	ldr	r3, [r6, #8]
   218b0:	cmp	r8, r3
   218b4:	bne	2185c <__assert_fail@plt+0x105b4>
   218b8:	cmp	sl, #0
   218bc:	beq	21a14 <__assert_fail@plt+0x1076c>
   218c0:	mov	sl, #0
   218c4:	mov	r8, sl
   218c8:	b	2185c <__assert_fail@plt+0x105b4>
   218cc:	mov	r3, #12
   218d0:	str	r3, [sp, #28]
   218d4:	mov	r0, r4
   218d8:	bl	17ee4 <__assert_fail@plt+0x6c3c>
   218dc:	ldr	r0, [sp, #28]
   218e0:	mov	r3, #0
   218e4:	str	r3, [r5]
   218e8:	str	r3, [r5, #4]
   218ec:	add	sp, sp, #140	; 0x8c
   218f0:	ldrd	r4, [sp]
   218f4:	ldrd	r6, [sp, #8]
   218f8:	ldrd	r8, [sp, #16]
   218fc:	ldrd	sl, [sp, #24]
   21900:	add	sp, sp, #32
   21904:	pop	{pc}		; (ldr pc, [sp], #4)
   21908:	mov	r1, r9
   2190c:	add	r0, sp, #52	; 0x34
   21910:	str	r2, [sp, #12]
   21914:	bl	152b4 <__assert_fail@plt+0x400c>
   21918:	cmp	r0, #0
   2191c:	bne	214fc <__assert_fail@plt+0x10254>
   21920:	ldrb	r1, [sp, #127]	; 0x7f
   21924:	ldr	r2, [sp, #12]
   21928:	ldr	r0, [r4, #92]	; 0x5c
   2192c:	b	21498 <__assert_fail@plt+0x101f0>
   21930:	mov	r1, #1
   21934:	mov	r0, #32
   21938:	bl	243cc <__assert_fail@plt+0x13124>
   2193c:	cmp	r0, #0
   21940:	str	r0, [r4, #60]	; 0x3c
   21944:	beq	218cc <__assert_fail@plt+0x10624>
   21948:	str	r5, [sp, #8]
   2194c:	mov	r5, r4
   21950:	lsl	fp, sl, #3
   21954:	mov	r4, #0
   21958:	b	21980 <__assert_fail@plt+0x106d8>
   2195c:	cmp	r3, #0
   21960:	bne	21970 <__assert_fail@plt+0x106c8>
   21964:	ldrb	r3, [r5, #88]	; 0x58
   21968:	orr	r3, r3, #8
   2196c:	strb	r3, [r5, #88]	; 0x58
   21970:	add	r4, r4, #1
   21974:	add	fp, fp, #1
   21978:	cmp	r4, #32
   2197c:	beq	219c8 <__assert_fail@plt+0x10720>
   21980:	mov	r0, fp
   21984:	bl	111d0 <btowc@plt>
   21988:	cmn	r0, #1
   2198c:	bic	r3, fp, #127	; 0x7f
   21990:	beq	2195c <__assert_fail@plt+0x106b4>
   21994:	ldr	r1, [r5, #60]	; 0x3c
   21998:	cmp	r3, #0
   2199c:	mov	r2, #1
   219a0:	ldr	r3, [r1, sl]
   219a4:	orr	r3, r3, r2, lsl r4
   219a8:	str	r3, [r1, sl]
   219ac:	bne	21970 <__assert_fail@plt+0x106c8>
   219b0:	cmp	r0, fp
   219b4:	bne	21964 <__assert_fail@plt+0x106bc>
   219b8:	add	r4, r4, #1
   219bc:	add	fp, fp, #1
   219c0:	cmp	r4, #32
   219c4:	bne	21980 <__assert_fail@plt+0x106d8>
   219c8:	add	sl, sl, #4
   219cc:	cmp	sl, #32
   219d0:	bne	21950 <__assert_fail@plt+0x106a8>
   219d4:	mov	r4, r5
   219d8:	ldr	r5, [sp, #8]
   219dc:	b	213b0 <__assert_fail@plt+0x10108>
   219e0:	str	fp, [sp, #28]
   219e4:	str	r1, [sp, #80]	; 0x50
   219e8:	str	r1, [sp, #84]	; 0x54
   219ec:	b	215cc <__assert_fail@plt+0x10324>
   219f0:	ldr	r0, [sp, #48]	; 0x30
   219f4:	bl	24628 <__assert_fail@plt+0x13380>
   219f8:	ldr	r3, [r6, #8]
   219fc:	cmp	r3, r8
   21a00:	moveq	sl, r9
   21a04:	moveq	r8, sl
   21a08:	movne	sl, #1
   21a0c:	ldr	r1, [r6, #24]
   21a10:	b	2185c <__assert_fail@plt+0x105b4>
   21a14:	ldrb	r3, [r5, #28]
   21a18:	tst	r3, #16
   21a1c:	bne	21a38 <__assert_fail@plt+0x10790>
   21a20:	ldr	r3, [r5, #24]
   21a24:	cmp	r3, #0
   21a28:	beq	21a38 <__assert_fail@plt+0x10790>
   21a2c:	ldrb	r3, [r6, #88]	; 0x58
   21a30:	tst	r3, #1
   21a34:	bne	21a44 <__assert_fail@plt+0x1079c>
   21a38:	ldr	r3, [r6, #76]	; 0x4c
   21a3c:	cmp	r3, #0
   21a40:	beq	21b3c <__assert_fail@plt+0x10894>
   21a44:	add	r8, r8, r8, lsl #1
   21a48:	lsl	r0, r8, #2
   21a4c:	bl	24440 <__assert_fail@plt+0x13198>
   21a50:	cmp	r0, #0
   21a54:	str	r0, [r6, #28]
   21a58:	beq	21d10 <__assert_fail@plt+0x10a68>
   21a5c:	ldr	r3, [r6, #8]
   21a60:	cmp	r3, #0
   21a64:	movne	r3, #0
   21a68:	movne	r2, r3
   21a6c:	bne	21a78 <__assert_fail@plt+0x107d0>
   21a70:	b	21b3c <__assert_fail@plt+0x10894>
   21a74:	ldr	r0, [r6, #28]
   21a78:	add	ip, r3, r3, lsl #1
   21a7c:	add	r3, r3, #1
   21a80:	add	r1, r0, ip, lsl #2
   21a84:	str	r2, [r0, ip, lsl #2]
   21a88:	str	r2, [r1, #4]
   21a8c:	str	r2, [r1, #8]
   21a90:	ldr	r0, [r6, #8]
   21a94:	cmp	r0, r3
   21a98:	bhi	21a74 <__assert_fail@plt+0x107cc>
   21a9c:	cmp	r0, #0
   21aa0:	beq	21b3c <__assert_fail@plt+0x10894>
   21aa4:	mov	r3, #0
   21aa8:	ldr	r1, [r6, #24]
   21aac:	mov	r9, r3
   21ab0:	str	r7, [sp, #20]
   21ab4:	mov	r7, r6
   21ab8:	mov	r6, r3
   21abc:	str	sl, [sp, #16]
   21ac0:	add	r3, r1, r9
   21ac4:	ldr	ip, [r3, #4]
   21ac8:	ldr	r3, [r3, #8]
   21acc:	cmp	ip, #0
   21ad0:	movgt	r8, #0
   21ad4:	subgt	sl, r3, #4
   21ad8:	bgt	21af8 <__assert_fail@plt+0x10850>
   21adc:	b	21b24 <__assert_fail@plt+0x1087c>
   21ae0:	ldr	r1, [r7, #24]
   21ae4:	add	r8, r8, #1
   21ae8:	add	r3, r1, r9
   21aec:	ldr	r3, [r3, #4]
   21af0:	cmp	r8, r3
   21af4:	bge	21b20 <__assert_fail@plt+0x10878>
   21af8:	ldr	r3, [sl, #4]!
   21afc:	mov	r1, r6
   21b00:	ldr	r0, [r7, #28]
   21b04:	add	r3, r3, r3, lsl #1
   21b08:	add	r0, r0, r3, lsl #2
   21b0c:	bl	1536c <__assert_fail@plt+0x40c4>
   21b10:	cmp	r0, #0
   21b14:	bne	21ae0 <__assert_fail@plt+0x10838>
   21b18:	mov	r0, #12
   21b1c:	b	214fc <__assert_fail@plt+0x10254>
   21b20:	ldr	r0, [r7, #8]
   21b24:	add	r6, r6, #1
   21b28:	add	r9, r9, #12
   21b2c:	cmp	r0, r6
   21b30:	bhi	21ac0 <__assert_fail@plt+0x10818>
   21b34:	ldr	sl, [sp, #16]
   21b38:	ldr	r7, [sp, #20]
   21b3c:	clz	fp, fp
   21b40:	mov	r2, #0
   21b44:	ldrb	r3, [r4, #88]	; 0x58
   21b48:	lsr	fp, fp, #5
   21b4c:	str	r2, [sp, #28]
   21b50:	ands	fp, fp, r3, lsr #2
   21b54:	bne	21d30 <__assert_fail@plt+0x10a88>
   21b58:	ldr	r2, [r4, #24]
   21b5c:	mov	r0, r7
   21b60:	ldr	r3, [r4, #52]	; 0x34
   21b64:	ldr	r3, [r3, #12]
   21b68:	ldr	r3, [r3, #28]
   21b6c:	add	r1, r3, r3, lsl #1
   21b70:	str	r3, [r4, #72]	; 0x48
   21b74:	add	r1, r2, r1, lsl #2
   21b78:	bl	17680 <__assert_fail@plt+0x63d8>
   21b7c:	cmp	r0, #0
   21b80:	mov	r8, r0
   21b84:	str	r0, [sp, #32]
   21b88:	bne	21ca8 <__assert_fail@plt+0x10a00>
   21b8c:	ldr	r3, [r4, #76]	; 0x4c
   21b90:	cmp	r3, #0
   21b94:	ble	21c68 <__assert_fail@plt+0x109c0>
   21b98:	ldr	r9, [sp, #44]	; 0x2c
   21b9c:	cmp	r9, #0
   21ba0:	ble	21c68 <__assert_fail@plt+0x109c0>
   21ba4:	mov	r6, r0
   21ba8:	b	21bb8 <__assert_fail@plt+0x10910>
   21bac:	add	r6, r6, #1
   21bb0:	cmp	r9, r6
   21bb4:	ble	21c68 <__assert_fail@plt+0x109c0>
   21bb8:	ldr	r2, [sp, #48]	; 0x30
   21bbc:	ldr	r0, [r4]
   21bc0:	ldr	r3, [r2, r6, lsl #2]
   21bc4:	add	ip, r0, r3, lsl #3
   21bc8:	ldrb	r1, [ip, #4]
   21bcc:	cmp	r1, #4
   21bd0:	bne	21bac <__assert_fail@plt+0x10904>
   21bd4:	sub	r2, r2, #4
   21bd8:	mov	r1, #0
   21bdc:	b	21bec <__assert_fail@plt+0x10944>
   21be0:	add	r1, r1, #1
   21be4:	cmp	r9, r1
   21be8:	beq	21bac <__assert_fail@plt+0x10904>
   21bec:	ldr	lr, [r2, #4]!
   21bf0:	add	sl, r0, lr, lsl #3
   21bf4:	ldrb	sl, [sl, #4]
   21bf8:	cmp	sl, #9
   21bfc:	bne	21be0 <__assert_fail@plt+0x10938>
   21c00:	ldr	sl, [r0, lr, lsl #3]
   21c04:	ldr	lr, [ip]
   21c08:	cmp	sl, lr
   21c0c:	bne	21be0 <__assert_fail@plt+0x10938>
   21c10:	ldr	r2, [r4, #20]
   21c14:	add	r3, r3, r3, lsl #1
   21c18:	add	r1, sp, #48	; 0x30
   21c1c:	mov	r0, r9
   21c20:	add	r3, r2, r3, lsl #2
   21c24:	ldr	r3, [r3, #8]
   21c28:	ldr	sl, [r3]
   21c2c:	mov	r2, sl
   21c30:	bl	16a58 <__assert_fail@plt+0x57b0>
   21c34:	cmp	r0, #0
   21c38:	bne	21bac <__assert_fail@plt+0x10904>
   21c3c:	ldr	r1, [r4, #24]
   21c40:	add	sl, sl, sl, lsl #1
   21c44:	mov	r0, r7
   21c48:	add	r1, r1, sl, lsl #2
   21c4c:	bl	1831c <__assert_fail@plt+0x7074>
   21c50:	cmp	r0, #0
   21c54:	bne	21f6c <__assert_fail@plt+0x10cc4>
   21c58:	ldr	r9, [sp, #44]	; 0x2c
   21c5c:	mov	r6, #1
   21c60:	cmp	r9, r6
   21c64:	bgt	21bb8 <__assert_fail@plt+0x10910>
   21c68:	mov	r3, #0
   21c6c:	mov	r2, r7
   21c70:	mov	r1, r4
   21c74:	add	r0, sp, #32
   21c78:	bl	17874 <__assert_fail@plt+0x65cc>
   21c7c:	cmp	r0, #0
   21c80:	str	r0, [r4, #36]	; 0x24
   21c84:	beq	21e00 <__assert_fail@plt+0x10b58>
   21c88:	ldrsb	r3, [r0, #52]	; 0x34
   21c8c:	cmp	r3, #0
   21c90:	strge	r0, [r4, #40]	; 0x28
   21c94:	strge	r0, [r4, #44]	; 0x2c
   21c98:	strge	r0, [r4, #48]	; 0x30
   21c9c:	blt	21d9c <__assert_fail@plt+0x10af4>
   21ca0:	ldr	r0, [sp, #48]	; 0x30
   21ca4:	bl	24628 <__assert_fail@plt+0x13380>
   21ca8:	ldr	r6, [r5]
   21cac:	str	r8, [sp, #28]
   21cb0:	ldr	r0, [r6, #56]	; 0x38
   21cb4:	cmp	r0, #0
   21cb8:	beq	21ccc <__assert_fail@plt+0x10a24>
   21cbc:	ldr	r7, [r0]
   21cc0:	bl	24628 <__assert_fail@plt+0x13380>
   21cc4:	subs	r0, r7, #0
   21cc8:	bne	21cbc <__assert_fail@plt+0x10a14>
   21ccc:	mov	r7, #0
   21cd0:	mov	r3, #31
   21cd4:	ldr	r0, [r6, #16]
   21cd8:	str	r7, [r6, #52]	; 0x34
   21cdc:	str	r7, [r6, #56]	; 0x38
   21ce0:	str	r3, [r6, #64]	; 0x40
   21ce4:	bl	24628 <__assert_fail@plt+0x13380>
   21ce8:	add	r0, sp, #52	; 0x34
   21cec:	str	r7, [r6, #16]
   21cf0:	bl	16194 <__assert_fail@plt+0x4eec>
   21cf4:	ldr	r0, [sp, #28]
   21cf8:	cmp	r0, r7
   21cfc:	beq	218ec <__assert_fail@plt+0x10644>
   21d00:	ldr	r3, [sp, #8]
   21d04:	cmp	r3, #0
   21d08:	bne	21554 <__assert_fail@plt+0x102ac>
   21d0c:	b	218d4 <__assert_fail@plt+0x1062c>
   21d10:	mov	r3, #12
   21d14:	ldr	r6, [r5]
   21d18:	str	r3, [sp, #28]
   21d1c:	b	21504 <__assert_fail@plt+0x1025c>
   21d20:	add	r0, sp, #52	; 0x34
   21d24:	bl	15504 <__assert_fail@plt+0x425c>
   21d28:	str	fp, [sp, #28]
   21d2c:	b	215cc <__assert_fail@plt+0x10324>
   21d30:	ldr	r3, [r5, #20]
   21d34:	cmp	r3, #0
   21d38:	bne	21b58 <__assert_fail@plt+0x108b0>
   21d3c:	ldr	r0, [r4, #8]
   21d40:	cmp	r0, #0
   21d44:	beq	21fa4 <__assert_fail@plt+0x10cfc>
   21d48:	ldr	ip, [r4]
   21d4c:	mov	r1, r3
   21d50:	ldr	lr, [sp, #12]
   21d54:	mov	r2, ip
   21d58:	ldrb	r3, [r2, #4]
   21d5c:	sub	r3, r3, #1
   21d60:	cmp	r3, #11
   21d64:	ldrls	pc, [pc, r3, lsl #2]
   21d68:	b	21fd4 <__assert_fail@plt+0x10d2c>
   21d6c:	andeq	r1, r2, ip, lsl #30
   21d70:	andeq	r1, r2, r4, lsr #29
   21d74:	andeq	r1, r2, r0, asr #30
   21d78:	andeq	r1, r2, r4, lsr #29
   21d7c:	andeq	r1, r2, r0, lsr #29
   21d80:	andeq	r1, r2, r8, asr fp
   21d84:	ldrdeq	r1, [r2], -r4
   21d88:	andeq	r1, r2, r4, lsr #29
   21d8c:	andeq	r1, r2, r4, lsr #29
   21d90:	andeq	r1, r2, r4, lsr #29
   21d94:	andeq	r1, r2, r4, lsr #29
   21d98:	andeq	r1, r2, ip, lsl pc
   21d9c:	mov	r3, #1
   21da0:	mov	r2, r7
   21da4:	mov	r1, r4
   21da8:	add	r0, sp, #32
   21dac:	bl	17874 <__assert_fail@plt+0x65cc>
   21db0:	mov	r3, #2
   21db4:	mov	r2, r7
   21db8:	str	r0, [r4, #40]	; 0x28
   21dbc:	mov	r1, r4
   21dc0:	add	r0, sp, #32
   21dc4:	bl	17874 <__assert_fail@plt+0x65cc>
   21dc8:	mov	r3, #6
   21dcc:	mov	r2, r7
   21dd0:	str	r0, [r4, #44]	; 0x2c
   21dd4:	mov	r1, r4
   21dd8:	add	r0, sp, #32
   21ddc:	bl	17874 <__assert_fail@plt+0x65cc>
   21de0:	ldr	r3, [r4, #40]	; 0x28
   21de4:	str	r0, [r4, #48]	; 0x30
   21de8:	cmp	r3, #0
   21dec:	beq	21e00 <__assert_fail@plt+0x10b58>
   21df0:	ldr	r3, [r4, #44]	; 0x2c
   21df4:	cmp	r0, #0
   21df8:	cmpne	r3, #0
   21dfc:	bne	21ca0 <__assert_fail@plt+0x109f8>
   21e00:	ldr	r8, [sp, #32]
   21e04:	b	21ca8 <__assert_fail@plt+0x10a00>
   21e08:	add	r0, sp, #52	; 0x34
   21e0c:	bl	15c64 <__assert_fail@plt+0x49bc>
   21e10:	mov	r3, #0
   21e14:	str	r3, [sp, #28]
   21e18:	b	215cc <__assert_fail@plt+0x10324>
   21e1c:	mov	r0, r4
   21e20:	mov	r1, #160	; 0xa0
   21e24:	bl	2447c <__assert_fail@plt+0x131d4>
   21e28:	subs	r4, r0, #0
   21e2c:	beq	21f90 <__assert_fail@plt+0x10ce8>
   21e30:	mov	r3, #160	; 0xa0
   21e34:	str	r4, [r5]
   21e38:	str	r3, [r5, #4]
   21e3c:	b	2129c <__assert_fail@plt+0xfff4>
   21e40:	mov	sl, r6
   21e44:	mov	r1, #1
   21e48:	b	212fc <__assert_fail@plt+0x10054>
   21e4c:	cmp	r0, r8
   21e50:	beq	21f98 <__assert_fail@plt+0x10cf0>
   21e54:	mov	r2, #0
   21e58:	mov	r3, #0
   21e5c:	add	r7, sp, #40	; 0x28
   21e60:	mov	ip, #2
   21e64:	add	sl, r6, #56	; 0x38
   21e68:	add	r6, r6, #64	; 0x40
   21e6c:	mov	r0, sl
   21e70:	mov	r1, r6
   21e74:	str	r7, [sp]
   21e78:	strd	r2, [sp, #40]	; 0x28
   21e7c:	mov	r3, r8
   21e80:	mov	r2, r8
   21e84:	strb	ip, [sp, #44]	; 0x2c
   21e88:	bl	171c4 <__assert_fail@plt+0x5f1c>
   21e8c:	mov	lr, r0
   21e90:	b	21670 <__assert_fail@plt+0x103c8>
   21e94:	mov	r3, #0
   21e98:	str	r3, [sp, #28]
   21e9c:	b	215cc <__assert_fail@plt+0x10324>
   21ea0:	mov	r1, fp
   21ea4:	add	lr, lr, #1
   21ea8:	add	r2, r2, #8
   21eac:	cmp	lr, r0
   21eb0:	bne	21d58 <__assert_fail@plt+0x10ab0>
   21eb4:	orr	sl, sl, r1
   21eb8:	ands	sl, sl, #255	; 0xff
   21ebc:	moveq	r1, sl
   21ec0:	beq	21fa8 <__assert_fail@plt+0x10d00>
   21ec4:	add	r2, ip, lr, lsl #3
   21ec8:	mov	r0, #7
   21ecc:	b	21ee4 <__assert_fail@plt+0x10c3c>
   21ed0:	cmp	r3, #5
   21ed4:	strbeq	r0, [ip, #4]
   21ed8:	add	ip, ip, #8
   21edc:	cmp	r2, ip
   21ee0:	beq	21fa8 <__assert_fail@plt+0x10d00>
   21ee4:	ldrb	r3, [ip, #4]
   21ee8:	cmp	r3, #1
   21eec:	bne	21ed0 <__assert_fail@plt+0x10c28>
   21ef0:	ldrsb	r3, [ip]
   21ef4:	cmp	r3, #0
   21ef8:	bge	21ed8 <__assert_fail@plt+0x10c30>
   21efc:	ldrb	r3, [ip, #6]
   21f00:	bfc	r3, #5, #1
   21f04:	strb	r3, [ip, #6]
   21f08:	b	21ed8 <__assert_fail@plt+0x10c30>
   21f0c:	ldrsb	r3, [r2]
   21f10:	cmp	r3, #0
   21f14:	movlt	sl, fp
   21f18:	b	21ea4 <__assert_fail@plt+0x10bfc>
   21f1c:	ldr	r3, [r2]
   21f20:	cmp	r3, #32
   21f24:	beq	21ea4 <__assert_fail@plt+0x10bfc>
   21f28:	bls	21f74 <__assert_fail@plt+0x10ccc>
   21f2c:	cmp	r3, #64	; 0x40
   21f30:	beq	21ea4 <__assert_fail@plt+0x10bfc>
   21f34:	cmp	r3, #128	; 0x80
   21f38:	beq	21ea4 <__assert_fail@plt+0x10bfc>
   21f3c:	b	21b58 <__assert_fail@plt+0x108b0>
   21f40:	ldr	r6, [r2]
   21f44:	add	r3, r6, #12
   21f48:	add	r6, r6, #28
   21f4c:	ldr	r8, [r3, #4]!
   21f50:	cmp	r8, #0
   21f54:	bne	21b58 <__assert_fail@plt+0x108b0>
   21f58:	cmp	r6, r3
   21f5c:	bne	21f4c <__assert_fail@plt+0x10ca4>
   21f60:	b	21ea4 <__assert_fail@plt+0x10bfc>
   21f64:	ldr	r0, [sp, #12]
   21f68:	b	214fc <__assert_fail@plt+0x10254>
   21f6c:	mov	r8, r0
   21f70:	b	21ca8 <__assert_fail@plt+0x10a00>
   21f74:	cmp	r3, #16
   21f78:	beq	21ea4 <__assert_fail@plt+0x10bfc>
   21f7c:	b	21b58 <__assert_fail@plt+0x108b0>
   21f80:	mov	r1, r3
   21f84:	b	215bc <__assert_fail@plt+0x10314>
   21f88:	ldr	r0, [r6, #132]	; 0x84
   21f8c:	b	217d8 <__assert_fail@plt+0x10530>
   21f90:	mov	r0, #12
   21f94:	b	218ec <__assert_fail@plt+0x10644>
   21f98:	ldr	r6, [r5]
   21f9c:	str	r0, [r4, #52]	; 0x34
   21fa0:	b	21504 <__assert_fail@plt+0x1025c>
   21fa4:	mov	r1, r0
   21fa8:	ldrb	r2, [r4, #88]	; 0x58
   21fac:	mov	r0, #1
   21fb0:	ldr	r3, [r4, #76]	; 0x4c
   21fb4:	str	r0, [r4, #92]	; 0x5c
   21fb8:	and	r2, r2, #251	; 0xfb
   21fbc:	cmp	r3, #0
   21fc0:	movle	r3, r1
   21fc4:	orrgt	r3, r1, #1
   21fc8:	bfi	r2, r3, #1, #1
   21fcc:	strb	r2, [r4, #88]	; 0x58
   21fd0:	b	21b58 <__assert_fail@plt+0x108b0>
   21fd4:	bl	1129c <abort@plt>
   21fd8:	movw	r3, #26304	; 0x66c0
   21fdc:	movt	r3, #3
   21fe0:	str	r4, [sp, #-8]!
   21fe4:	ldr	r3, [r3]
   21fe8:	str	lr, [sp, #4]
   21fec:	mov	lr, r2
   21ff0:	mov	r2, r1
   21ff4:	ldrb	ip, [lr, #28]
   21ff8:	mov	r1, r0
   21ffc:	mov	r0, lr
   22000:	ubfx	r4, r3, #25, #1
   22004:	bfi	ip, r4, #4, #1
   22008:	mvn	ip, ip, lsl #25
   2200c:	mvn	ip, ip, lsr #25
   22010:	strb	ip, [lr, #28]
   22014:	bl	21244 <__assert_fail@plt+0xff9c>
   22018:	subs	r3, r0, #0
   2201c:	beq	22050 <__assert_fail@plt+0x10da8>
   22020:	movw	r1, #22200	; 0x56b8
   22024:	movt	r1, #2
   22028:	ldr	r4, [sp]
   2202c:	add	r3, r1, r3, lsl #2
   22030:	add	r1, r1, #32
   22034:	mov	r2, #5
   22038:	mov	r0, #0
   2203c:	ldr	lr, [sp, #4]
   22040:	add	sp, sp, #8
   22044:	ldr	r3, [r3, #416]	; 0x1a0
   22048:	add	r1, r1, r3
   2204c:	b	11098 <dcgettext@plt>
   22050:	ldr	r4, [sp]
   22054:	add	sp, sp, #4
   22058:	pop	{pc}		; (ldr pc, [sp], #4)
   2205c:	movw	r3, #26304	; 0x66c0
   22060:	movt	r3, #3
   22064:	ldr	r2, [r3]
   22068:	str	r0, [r3]
   2206c:	mov	r0, r2
   22070:	bx	lr
   22074:	strd	r4, [sp, #-16]!
   22078:	mov	r2, #256	; 0x100
   2207c:	mov	r4, r0
   22080:	ldr	r5, [r0]
   22084:	mov	r1, #0
   22088:	str	r6, [sp, #8]
   2208c:	ldr	r6, [r0, #16]
   22090:	str	lr, [sp, #12]
   22094:	mov	r0, r6
   22098:	bl	111c4 <memset@plt>
   2209c:	ldr	r1, [r5, #36]	; 0x24
   220a0:	mov	r3, r6
   220a4:	mov	r0, r4
   220a8:	add	r2, r1, #12
   220ac:	add	r1, r1, #8
   220b0:	bl	1ae78 <__assert_fail@plt+0x9bd0>
   220b4:	ldr	r3, [r5, #36]	; 0x24
   220b8:	ldr	r0, [r5, #40]	; 0x28
   220bc:	cmp	r3, r0
   220c0:	beq	220dc <__assert_fail@plt+0x10e34>
   220c4:	add	r2, r0, #12
   220c8:	add	r1, r0, #8
   220cc:	mov	r3, r6
   220d0:	mov	r0, r4
   220d4:	bl	1ae78 <__assert_fail@plt+0x9bd0>
   220d8:	ldr	r0, [r5, #36]	; 0x24
   220dc:	ldr	r1, [r5, #44]	; 0x2c
   220e0:	cmp	r1, r0
   220e4:	beq	22100 <__assert_fail@plt+0x10e58>
   220e8:	add	r2, r1, #12
   220ec:	mov	r0, r4
   220f0:	mov	r3, r6
   220f4:	add	r1, r1, #8
   220f8:	bl	1ae78 <__assert_fail@plt+0x9bd0>
   220fc:	ldr	r0, [r5, #36]	; 0x24
   22100:	ldr	r1, [r5, #48]	; 0x30
   22104:	cmp	r1, r0
   22108:	beq	22120 <__assert_fail@plt+0x10e78>
   2210c:	add	r2, r1, #12
   22110:	mov	r3, r6
   22114:	add	r1, r1, #8
   22118:	mov	r0, r4
   2211c:	bl	1ae78 <__assert_fail@plt+0x9bd0>
   22120:	ldrb	r3, [r4, #28]
   22124:	mov	r0, #0
   22128:	ldr	r6, [sp, #8]
   2212c:	orr	r3, r3, #8
   22130:	strb	r3, [r4, #28]
   22134:	ldrd	r4, [sp]
   22138:	add	sp, sp, #12
   2213c:	pop	{pc}		; (ldr pc, [sp], #4)
   22140:	cmp	r3, r2
   22144:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22148:	strd	r6, [sp, #8]
   2214c:	strd	r8, [sp, #16]
   22150:	strd	sl, [sp, #24]
   22154:	str	lr, [sp, #32]
   22158:	sub	sp, sp, #52	; 0x34
   2215c:	movle	lr, #0
   22160:	movgt	lr, #1
   22164:	ldr	ip, [sp, #88]	; 0x58
   22168:	orrs	lr, lr, r3, lsr #31
   2216c:	ldrb	lr, [sp, #100]	; 0x64
   22170:	ldr	r8, [sp, #96]	; 0x60
   22174:	add	r7, r3, ip
   22178:	str	lr, [sp, #36]	; 0x24
   2217c:	ldr	lr, [r0]
   22180:	str	lr, [sp, #28]
   22184:	bne	22478 <__assert_fail@plt+0x111d0>
   22188:	cmp	r7, r2
   2218c:	mov	r4, r0
   22190:	str	r2, [sp, #32]
   22194:	mov	fp, r3
   22198:	str	r1, [sp, #40]	; 0x28
   2219c:	bgt	22424 <__assert_fail@plt+0x1117c>
   221a0:	cmp	ip, #0
   221a4:	cmpge	fp, r7
   221a8:	bgt	22424 <__assert_fail@plt+0x1117c>
   221ac:	cmp	r7, #0
   221b0:	blt	2242c <__assert_fail@plt+0x11184>
   221b4:	cmp	fp, r7
   221b8:	movgt	r2, #0
   221bc:	movle	r2, #1
   221c0:	ands	r3, r2, ip, lsr #31
   221c4:	bne	2242c <__assert_fail@plt+0x11184>
   221c8:	movw	r2, #0
   221cc:	movt	r2, #0
   221d0:	cmp	r2, #0
   221d4:	mov	r5, #1
   221d8:	moveq	r5, r2
   221dc:	movw	r2, #0
   221e0:	movt	r2, #0
   221e4:	mov	r0, #1
   221e8:	cmp	r2, #0
   221ec:	moveq	r0, r2
   221f0:	orr	r5, r5, r0
   221f4:	ands	r5, r5, #255	; 0xff
   221f8:	beq	2220c <__assert_fail@plt+0x10f64>
   221fc:	ldr	r3, [sp, #28]
   22200:	mov	r5, #1
   22204:	add	r0, r3, #136	; 0x88
   22208:	bl	11020 <pthread_mutex_lock@plt>
   2220c:	ldrb	r0, [r4, #28]
   22210:	cmp	fp, r7
   22214:	ubfx	r3, r0, #5, #2
   22218:	str	r3, [sp, #44]	; 0x2c
   2221c:	bge	22234 <__assert_fail@plt+0x10f8c>
   22220:	ldr	r2, [r4, #16]
   22224:	cmp	r2, #0
   22228:	beq	22234 <__assert_fail@plt+0x10f8c>
   2222c:	tst	r0, #8
   22230:	beq	223d0 <__assert_fail@plt+0x11128>
   22234:	ubfx	r2, r0, #4, #1
   22238:	cmp	r8, #0
   2223c:	orreq	r2, r2, #1
   22240:	ands	r2, r2, #255	; 0xff
   22244:	bne	223bc <__assert_fail@plt+0x11114>
   22248:	and	r0, r0, #6
   2224c:	ldr	ip, [r4, #24]
   22250:	cmp	r0, #4
   22254:	beq	22488 <__assert_fail@plt+0x111e0>
   22258:	add	sl, ip, #1
   2225c:	mov	r6, sl
   22260:	lsl	r0, sl, #3
   22264:	bl	24440 <__assert_fail@plt+0x13198>
   22268:	subs	r9, r0, #0
   2226c:	beq	22480 <__assert_fail@plt+0x111d8>
   22270:	mov	r3, fp
   22274:	mov	r0, r4
   22278:	str	sl, [sp, #8]
   2227c:	ldr	ip, [sp, #92]	; 0x5c
   22280:	ldr	r2, [sp, #32]
   22284:	ldr	r1, [sp, #40]	; 0x28
   22288:	stm	sp, {r7, ip}
   2228c:	ldr	ip, [sp, #44]	; 0x2c
   22290:	str	r9, [sp, #12]
   22294:	str	ip, [sp, #16]
   22298:	bl	1c9cc <__assert_fail@plt+0xb724>
   2229c:	cmp	r0, #0
   222a0:	beq	222f0 <__assert_fail@plt+0x11048>
   222a4:	cmp	r0, #1
   222a8:	mvneq	r4, #0
   222ac:	beq	222b4 <__assert_fail@plt+0x1100c>
   222b0:	mvn	r4, #1
   222b4:	mov	r0, r9
   222b8:	bl	24628 <__assert_fail@plt+0x13380>
   222bc:	cmp	r5, #0
   222c0:	beq	222d0 <__assert_fail@plt+0x11028>
   222c4:	ldr	r3, [sp, #28]
   222c8:	add	r0, r3, #136	; 0x88
   222cc:	bl	10f90 <pthread_mutex_unlock@plt>
   222d0:	mov	r0, r4
   222d4:	add	sp, sp, #52	; 0x34
   222d8:	ldrd	r4, [sp]
   222dc:	ldrd	r6, [sp, #8]
   222e0:	ldrd	r8, [sp, #16]
   222e4:	ldrd	sl, [sp, #24]
   222e8:	add	sp, sp, #32
   222ec:	pop	{pc}		; (ldr pc, [sp], #4)
   222f0:	cmp	r8, #0
   222f4:	beq	223a0 <__assert_fail@plt+0x110f8>
   222f8:	ldrb	r7, [r4, #28]
   222fc:	add	sl, r6, #1
   22300:	ubfx	r7, r7, #1, #2
   22304:	cmp	r7, #0
   22308:	beq	223e0 <__assert_fail@plt+0x11138>
   2230c:	cmp	r7, #1
   22310:	movne	r7, #2
   22314:	beq	224b4 <__assert_fail@plt+0x1120c>
   22318:	cmp	r6, #0
   2231c:	ble	22500 <__assert_fail@plt+0x11258>
   22320:	ldrd	r0, [r8, #4]
   22324:	add	lr, r9, r6, lsl #3
   22328:	mov	r3, r9
   2232c:	mov	r2, r6
   22330:	sub	r0, r0, #4
   22334:	sub	r1, r1, #4
   22338:	ldr	ip, [r3]
   2233c:	add	r3, r3, #8
   22340:	str	ip, [r0, #4]!
   22344:	ldr	ip, [r3, #-4]
   22348:	cmp	lr, r3
   2234c:	str	ip, [r1, #4]!
   22350:	bne	22338 <__assert_fail@plt+0x11090>
   22354:	ldr	r3, [r8]
   22358:	cmp	r3, r2
   2235c:	bls	22388 <__assert_fail@plt+0x110e0>
   22360:	ldr	ip, [r8, #4]
   22364:	mvn	r3, #0
   22368:	ldr	r0, [r8, #8]
   2236c:	str	r3, [r0, r2, lsl #2]
   22370:	add	r6, r6, #1
   22374:	str	r3, [ip, r2, lsl #2]
   22378:	mov	r2, r6
   2237c:	ldr	r1, [r8]
   22380:	cmp	r1, r6
   22384:	bhi	2236c <__assert_fail@plt+0x110c4>
   22388:	ldrb	r3, [r4, #28]
   2238c:	bfi	r3, r7, #1, #2
   22390:	and	r2, r3, #6
   22394:	cmp	r2, #0
   22398:	strb	r3, [r4, #28]
   2239c:	beq	222b0 <__assert_fail@plt+0x11008>
   223a0:	ldr	r3, [sp, #36]	; 0x24
   223a4:	ldr	r4, [r9]
   223a8:	cmp	r3, #0
   223ac:	beq	222b4 <__assert_fail@plt+0x1100c>
   223b0:	ldr	r3, [r9, #4]
   223b4:	sub	r4, r3, r4
   223b8:	b	222b4 <__assert_fail@plt+0x1100c>
   223bc:	mov	sl, #1
   223c0:	mov	r0, #8
   223c4:	mov	r6, sl
   223c8:	mov	r8, #0
   223cc:	b	22264 <__assert_fail@plt+0x10fbc>
   223d0:	mov	r0, r4
   223d4:	bl	22074 <__assert_fail@plt+0x10dcc>
   223d8:	ldrb	r0, [r4, #28]
   223dc:	b	22234 <__assert_fail@plt+0x10f8c>
   223e0:	lsl	r7, sl, #2
   223e4:	mov	r0, r7
   223e8:	bl	24440 <__assert_fail@plt+0x13198>
   223ec:	cmp	r0, #0
   223f0:	str	r0, [r8, #4]
   223f4:	beq	2250c <__assert_fail@plt+0x11264>
   223f8:	mov	r0, r7
   223fc:	bl	24440 <__assert_fail@plt+0x13198>
   22400:	cmp	r0, #0
   22404:	mov	r7, r0
   22408:	str	r0, [r8, #8]
   2240c:	movne	r7, #1
   22410:	strne	sl, [r8]
   22414:	bne	22318 <__assert_fail@plt+0x11070>
   22418:	ldr	r0, [r8, #4]
   2241c:	bl	24628 <__assert_fail@plt+0x13380>
   22420:	b	22388 <__assert_fail@plt+0x110e0>
   22424:	ldr	r7, [sp, #32]
   22428:	b	221c8 <__assert_fail@plt+0x10f20>
   2242c:	movw	r2, #0
   22430:	movt	r2, #0
   22434:	cmp	r2, #0
   22438:	mov	r5, #1
   2243c:	moveq	r5, r2
   22440:	movw	r2, #0
   22444:	movt	r2, #0
   22448:	mov	r1, #1
   2244c:	cmp	r2, #0
   22450:	moveq	r1, r2
   22454:	orr	r5, r5, r1
   22458:	ands	r5, r5, #255	; 0xff
   2245c:	movne	r7, #0
   22460:	bne	221fc <__assert_fail@plt+0x10f54>
   22464:	ldrb	r0, [r4, #28]
   22468:	mov	r7, r5
   2246c:	ubfx	r3, r0, #5, #2
   22470:	str	r3, [sp, #44]	; 0x2c
   22474:	b	22234 <__assert_fail@plt+0x10f8c>
   22478:	mvn	r4, #0
   2247c:	b	222d0 <__assert_fail@plt+0x11028>
   22480:	mvn	r4, #1
   22484:	b	222bc <__assert_fail@plt+0x11014>
   22488:	ldr	sl, [r8]
   2248c:	cmp	sl, ip
   22490:	bhi	22258 <__assert_fail@plt+0x10fb0>
   22494:	cmp	sl, #0
   22498:	mov	r6, sl
   2249c:	bgt	22260 <__assert_fail@plt+0x10fb8>
   224a0:	mov	sl, #1
   224a4:	mov	r8, r2
   224a8:	mov	r6, sl
   224ac:	mov	r0, #8
   224b0:	b	22264 <__assert_fail@plt+0x10fbc>
   224b4:	ldr	r3, [r8]
   224b8:	cmp	r3, sl
   224bc:	bcs	22318 <__assert_fail@plt+0x11070>
   224c0:	lsl	fp, sl, #2
   224c4:	ldr	r0, [r8, #4]
   224c8:	mov	r1, fp
   224cc:	bl	2447c <__assert_fail@plt+0x131d4>
   224d0:	subs	r2, r0, #0
   224d4:	str	r2, [sp, #32]
   224d8:	beq	2250c <__assert_fail@plt+0x11264>
   224dc:	mov	r1, fp
   224e0:	ldr	r0, [r8, #8]
   224e4:	bl	2447c <__assert_fail@plt+0x131d4>
   224e8:	subs	fp, r0, #0
   224ec:	ldr	r2, [sp, #32]
   224f0:	beq	22514 <__assert_fail@plt+0x1126c>
   224f4:	str	sl, [r8]
   224f8:	stmib	r8, {r2, fp}
   224fc:	b	22318 <__assert_fail@plt+0x11070>
   22500:	mov	r6, #0
   22504:	mov	r2, r6
   22508:	b	22354 <__assert_fail@plt+0x110ac>
   2250c:	mov	r7, #0
   22510:	b	22388 <__assert_fail@plt+0x110e0>
   22514:	mov	r0, r2
   22518:	mov	r7, fp
   2251c:	bl	24628 <__assert_fail@plt+0x13380>
   22520:	b	22388 <__assert_fail@plt+0x110e0>
   22524:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22528:	strd	r6, [sp, #8]
   2252c:	mov	r7, r3
   22530:	strd	r8, [sp, #16]
   22534:	strd	sl, [sp, #24]
   22538:	str	lr, [sp, #32]
   2253c:	sub	sp, sp, #28
   22540:	ldr	r5, [sp, #64]	; 0x40
   22544:	ldr	r6, [sp, #80]	; 0x50
   22548:	ldrb	fp, [sp, #84]	; 0x54
   2254c:	orr	r3, r5, r2
   22550:	orrs	r3, r3, r6
   22554:	bmi	22604 <__assert_fail@plt+0x1135c>
   22558:	adds	r9, r2, r5
   2255c:	mov	r4, r2
   22560:	bvs	22604 <__assert_fail@plt+0x1135c>
   22564:	cmp	r5, #0
   22568:	mov	sl, r0
   2256c:	beq	2260c <__assert_fail@plt+0x11364>
   22570:	cmp	r2, #0
   22574:	str	r1, [sp, #20]
   22578:	moveq	r8, r2
   2257c:	bne	225d0 <__assert_fail@plt+0x11328>
   22580:	ldr	r3, [sp, #72]	; 0x48
   22584:	mov	r2, r9
   22588:	mov	r1, r7
   2258c:	mov	r0, sl
   22590:	str	fp, [sp, #12]
   22594:	ldr	ip, [sp, #76]	; 0x4c
   22598:	stm	sp, {r3, r6, ip}
   2259c:	ldr	r3, [sp, #68]	; 0x44
   225a0:	bl	22140 <__assert_fail@plt+0x10e98>
   225a4:	mov	r4, r0
   225a8:	mov	r0, r8
   225ac:	bl	24628 <__assert_fail@plt+0x13380>
   225b0:	mov	r0, r4
   225b4:	add	sp, sp, #28
   225b8:	ldrd	r4, [sp]
   225bc:	ldrd	r6, [sp, #8]
   225c0:	ldrd	r8, [sp, #16]
   225c4:	ldrd	sl, [sp, #24]
   225c8:	add	sp, sp, #32
   225cc:	pop	{pc}		; (ldr pc, [sp], #4)
   225d0:	mov	r0, r9
   225d4:	bl	24440 <__assert_fail@plt+0x13198>
   225d8:	subs	r8, r0, #0
   225dc:	beq	22604 <__assert_fail@plt+0x1135c>
   225e0:	mov	r2, r4
   225e4:	ldr	r1, [sp, #20]
   225e8:	bl	11038 <memcpy@plt>
   225ec:	mov	r1, r7
   225f0:	mov	r2, r5
   225f4:	add	r0, r8, r4
   225f8:	mov	r7, r8
   225fc:	bl	11038 <memcpy@plt>
   22600:	b	22580 <__assert_fail@plt+0x112d8>
   22604:	mvn	r4, #1
   22608:	b	225b0 <__assert_fail@plt+0x11308>
   2260c:	mov	r7, r1
   22610:	mov	r8, r5
   22614:	b	22580 <__assert_fail@plt+0x112d8>
   22618:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2261c:	mov	r4, r0
   22620:	mov	r0, #0
   22624:	tst	r2, #1
   22628:	movw	r5, #45820	; 0xb2fc
   2262c:	movt	r5, #3
   22630:	movw	r3, #710	; 0x2c6
   22634:	movt	r3, #257	; 0x101
   22638:	strd	r6, [sp, #8]
   2263c:	mov	r6, r2
   22640:	str	r8, [sp, #16]
   22644:	mov	r7, r1
   22648:	movne	r8, r5
   2264c:	str	lr, [sp, #20]
   22650:	moveq	r8, r3
   22654:	str	r0, [r4]
   22658:	str	r0, [r4, #4]
   2265c:	str	r0, [r4, #8]
   22660:	mov	r0, #256	; 0x100
   22664:	bl	24440 <__assert_fail@plt+0x13198>
   22668:	cmp	r0, #0
   2266c:	str	r0, [r4, #16]
   22670:	beq	2271c <__assert_fail@plt+0x11474>
   22674:	lsl	r5, r6, #21
   22678:	ands	r2, r6, #4
   2267c:	and	r5, r5, #4194304	; 0x400000
   22680:	orr	r5, r5, r8
   22684:	bne	226f4 <__assert_fail@plt+0x1144c>
   22688:	ldrb	r3, [r4, #28]
   2268c:	ubfx	r6, r6, #3, #1
   22690:	mov	r1, #0
   22694:	mov	r0, r7
   22698:	str	r1, [r4, #20]
   2269c:	bfi	r3, r2, #7, #1
   226a0:	bfi	r3, r6, #4, #1
   226a4:	strb	r3, [r4, #28]
   226a8:	bl	11188 <strlen@plt>
   226ac:	mov	r2, r0
   226b0:	mov	r3, r5
   226b4:	mov	r1, r7
   226b8:	mov	r0, r4
   226bc:	bl	21244 <__assert_fail@plt+0xff9c>
   226c0:	cmp	r0, #16
   226c4:	mov	r5, r0
   226c8:	beq	22704 <__assert_fail@plt+0x1145c>
   226cc:	cmp	r0, #0
   226d0:	bne	22708 <__assert_fail@plt+0x11460>
   226d4:	mov	r0, r4
   226d8:	bl	22074 <__assert_fail@plt+0x10dcc>
   226dc:	mov	r0, r5
   226e0:	ldrd	r4, [sp]
   226e4:	ldrd	r6, [sp, #8]
   226e8:	ldr	r8, [sp, #16]
   226ec:	add	sp, sp, #20
   226f0:	pop	{pc}		; (ldr pc, [sp], #4)
   226f4:	bic	r5, r5, #64	; 0x40
   226f8:	mov	r2, #1
   226fc:	orr	r5, r5, #256	; 0x100
   22700:	b	22688 <__assert_fail@plt+0x113e0>
   22704:	mov	r5, #8
   22708:	ldr	r0, [r4, #16]
   2270c:	bl	24628 <__assert_fail@plt+0x13380>
   22710:	mov	r3, #0
   22714:	str	r3, [r4, #16]
   22718:	b	226dc <__assert_fail@plt+0x11434>
   2271c:	mov	r5, #12
   22720:	b	226dc <__assert_fail@plt+0x11434>
   22724:	cmp	r0, #16
   22728:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2272c:	strd	r6, [sp, #8]
   22730:	str	r8, [sp, #16]
   22734:	str	lr, [sp, #20]
   22738:	bhi	227b4 <__assert_fail@plt+0x1150c>
   2273c:	movw	r1, #22200	; 0x56b8
   22740:	movt	r1, #2
   22744:	add	ip, r1, r0, lsl #2
   22748:	mov	r4, r3
   2274c:	add	r1, r1, #32
   22750:	mov	r6, r2
   22754:	mov	r0, #0
   22758:	ldr	r3, [ip, #416]	; 0x1a0
   2275c:	mov	r2, #5
   22760:	add	r1, r1, r3
   22764:	bl	11098 <dcgettext@plt>
   22768:	mov	r7, r0
   2276c:	bl	11188 <strlen@plt>
   22770:	cmp	r4, #0
   22774:	add	r5, r0, #1
   22778:	beq	2279c <__assert_fail@plt+0x114f4>
   2277c:	cmp	r5, r4
   22780:	mov	r1, r7
   22784:	subhi	r2, r4, #1
   22788:	movhi	r3, #0
   2278c:	movls	r2, r5
   22790:	mov	r0, r6
   22794:	strbhi	r3, [r6, r2]
   22798:	bl	11038 <memcpy@plt>
   2279c:	mov	r0, r5
   227a0:	ldrd	r4, [sp]
   227a4:	ldrd	r6, [sp, #8]
   227a8:	ldr	r8, [sp, #16]
   227ac:	add	sp, sp, #20
   227b0:	pop	{pc}		; (ldr pc, [sp], #4)
   227b4:	bl	1129c <abort@plt>
   227b8:	strd	r4, [sp, #-16]!
   227bc:	mov	r4, r0
   227c0:	ldr	r5, [r0]
   227c4:	str	r6, [sp, #8]
   227c8:	str	lr, [sp, #12]
   227cc:	cmp	r5, #0
   227d0:	beq	22818 <__assert_fail@plt+0x11570>
   227d4:	movw	r2, #0
   227d8:	movt	r2, #0
   227dc:	cmp	r2, #0
   227e0:	mov	r3, #1
   227e4:	moveq	r3, r2
   227e8:	movw	r2, #0
   227ec:	movt	r2, #0
   227f0:	mov	r1, #1
   227f4:	cmp	r2, #0
   227f8:	moveq	r1, r2
   227fc:	orr	r3, r3, r1
   22800:	tst	r3, #1
   22804:	beq	22810 <__assert_fail@plt+0x11568>
   22808:	add	r0, r5, #136	; 0x88
   2280c:	bl	10ff0 <pthread_mutex_destroy@plt>
   22810:	mov	r0, r5
   22814:	bl	17ee4 <__assert_fail@plt+0x6c3c>
   22818:	mov	r5, #0
   2281c:	ldr	r0, [r4, #16]
   22820:	str	r5, [r4]
   22824:	str	r5, [r4, #4]
   22828:	bl	24628 <__assert_fail@plt+0x13380>
   2282c:	str	r5, [r4, #16]
   22830:	ldr	r0, [r4, #20]
   22834:	bl	24628 <__assert_fail@plt+0x13380>
   22838:	ldr	r6, [sp, #8]
   2283c:	str	r5, [r4, #20]
   22840:	ldrd	r4, [sp]
   22844:	add	sp, sp, #12
   22848:	pop	{pc}		; (ldr pc, [sp], #4)
   2284c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22850:	strd	r6, [sp, #8]
   22854:	strd	r8, [sp, #16]
   22858:	strd	sl, [sp, #24]
   2285c:	str	lr, [sp, #32]
   22860:	sub	sp, sp, #36	; 0x24
   22864:	ldr	r6, [sp, #72]	; 0x48
   22868:	bics	ip, r6, #7
   2286c:	movne	r0, #2
   22870:	bne	22928 <__assert_fail@plt+0x11680>
   22874:	ands	sl, r6, #4
   22878:	mov	r7, r3
   2287c:	str	r2, [sp, #28]
   22880:	mov	r8, r1
   22884:	mov	r5, r0
   22888:	bne	22944 <__assert_fail@plt+0x1169c>
   2288c:	mov	r0, r1
   22890:	bl	11188 <strlen@plt>
   22894:	mov	r9, r0
   22898:	movw	r2, #0
   2289c:	movt	r2, #0
   228a0:	ldr	fp, [r5]
   228a4:	cmp	r2, #0
   228a8:	mov	r4, #1
   228ac:	moveq	r4, r2
   228b0:	movw	r2, #0
   228b4:	movt	r2, #0
   228b8:	mov	r1, #1
   228bc:	cmp	r2, #0
   228c0:	moveq	r1, r2
   228c4:	orr	r4, r4, r1
   228c8:	ands	r4, r4, #255	; 0xff
   228cc:	beq	228d8 <__assert_fail@plt+0x11630>
   228d0:	add	r0, fp, #136	; 0x88
   228d4:	bl	11020 <pthread_mutex_lock@plt>
   228d8:	ldrb	r2, [r5, #28]
   228dc:	tst	r2, #16
   228e0:	beq	22950 <__assert_fail@plt+0x116a8>
   228e4:	mov	ip, #0
   228e8:	mov	r0, r5
   228ec:	str	r9, [sp]
   228f0:	mov	r3, sl
   228f4:	mov	r1, r8
   228f8:	mov	r2, r9
   228fc:	stmib	sp, {r9, ip}
   22900:	str	ip, [sp, #12]
   22904:	str	r6, [sp, #16]
   22908:	bl	1c9cc <__assert_fail@plt+0xb724>
   2290c:	mov	r5, r0
   22910:	cmp	r4, #0
   22914:	beq	22920 <__assert_fail@plt+0x11678>
   22918:	add	r0, fp, #136	; 0x88
   2291c:	bl	10f90 <pthread_mutex_unlock@plt>
   22920:	adds	r0, r5, #0
   22924:	movne	r0, #1
   22928:	add	sp, sp, #36	; 0x24
   2292c:	ldrd	r4, [sp]
   22930:	ldrd	r6, [sp, #8]
   22934:	ldrd	r8, [sp, #16]
   22938:	ldrd	sl, [sp, #24]
   2293c:	add	sp, sp, #32
   22940:	pop	{pc}		; (ldr pc, [sp], #4)
   22944:	ldr	sl, [r3]
   22948:	ldr	r9, [r3, #4]
   2294c:	b	22898 <__assert_fail@plt+0x115f0>
   22950:	ldr	ip, [sp, #28]
   22954:	mov	r0, r5
   22958:	mov	r3, sl
   2295c:	mov	r1, r8
   22960:	mov	r2, r9
   22964:	str	r9, [sp]
   22968:	stmib	sp, {r9, ip}
   2296c:	str	r7, [sp, #12]
   22970:	str	r6, [sp, #16]
   22974:	bl	1c9cc <__assert_fail@plt+0xb724>
   22978:	mov	r5, r0
   2297c:	b	22910 <__assert_fail@plt+0x11668>
   22980:	str	r4, [sp, #-8]!
   22984:	mov	r4, #0
   22988:	str	lr, [sp, #4]
   2298c:	sub	sp, sp, #16
   22990:	mov	lr, #1
   22994:	ldr	ip, [sp, #24]
   22998:	str	r4, [sp]
   2299c:	stmib	sp, {r2, ip, lr}
   229a0:	bl	22140 <__assert_fail@plt+0x10e98>
   229a4:	add	sp, sp, #16
   229a8:	ldr	r4, [sp]
   229ac:	add	sp, sp, #4
   229b0:	pop	{pc}		; (ldr pc, [sp], #4)
   229b4:	str	r4, [sp, #-8]!
   229b8:	mov	r4, #0
   229bc:	str	lr, [sp, #4]
   229c0:	sub	sp, sp, #16
   229c4:	ldr	lr, [sp, #24]
   229c8:	ldr	ip, [sp, #28]
   229cc:	str	lr, [sp]
   229d0:	str	r4, [sp, #12]
   229d4:	stmib	sp, {r2, ip}
   229d8:	bl	22140 <__assert_fail@plt+0x10e98>
   229dc:	add	sp, sp, #16
   229e0:	ldr	r4, [sp]
   229e4:	add	sp, sp, #4
   229e8:	pop	{pc}		; (ldr pc, [sp], #4)
   229ec:	strd	r4, [sp, #-12]!
   229f0:	mov	r4, #1
   229f4:	str	lr, [sp, #8]
   229f8:	sub	sp, sp, #28
   229fc:	mov	lr, #0
   22a00:	ldr	ip, [sp, #40]	; 0x28
   22a04:	ldr	r5, [sp, #44]	; 0x2c
   22a08:	str	ip, [sp]
   22a0c:	ldr	ip, [sp, #52]	; 0x34
   22a10:	stmib	sp, {r5, lr}
   22a14:	ldr	lr, [sp, #48]	; 0x30
   22a18:	str	r4, [sp, #20]
   22a1c:	str	lr, [sp, #12]
   22a20:	str	ip, [sp, #16]
   22a24:	bl	22524 <__assert_fail@plt+0x1127c>
   22a28:	add	sp, sp, #28
   22a2c:	ldrd	r4, [sp]
   22a30:	add	sp, sp, #8
   22a34:	pop	{pc}		; (ldr pc, [sp], #4)
   22a38:	str	r4, [sp, #-8]!
   22a3c:	mov	r4, #0
   22a40:	str	lr, [sp, #4]
   22a44:	sub	sp, sp, #24
   22a48:	ldr	lr, [sp, #32]
   22a4c:	ldr	ip, [sp, #36]	; 0x24
   22a50:	str	lr, [sp]
   22a54:	str	r4, [sp, #20]
   22a58:	str	ip, [sp, #4]
   22a5c:	ldr	r4, [sp, #40]	; 0x28
   22a60:	ldr	lr, [sp, #44]	; 0x2c
   22a64:	ldr	ip, [sp, #48]	; 0x30
   22a68:	str	r4, [sp, #8]
   22a6c:	str	lr, [sp, #12]
   22a70:	str	ip, [sp, #16]
   22a74:	bl	22524 <__assert_fail@plt+0x1127c>
   22a78:	add	sp, sp, #24
   22a7c:	ldr	r4, [sp]
   22a80:	add	sp, sp, #4
   22a84:	pop	{pc}		; (ldr pc, [sp], #4)
   22a88:	cmp	r2, #0
   22a8c:	beq	22ab4 <__assert_fail@plt+0x1180c>
   22a90:	ldrb	ip, [r0, #28]
   22a94:	push	{lr}		; (str lr, [sp, #-4]!)
   22a98:	mov	lr, #1
   22a9c:	bfi	ip, lr, #1, #2
   22aa0:	strb	ip, [r0, #28]
   22aa4:	strd	r2, [r1]
   22aa8:	ldr	r3, [sp, #4]
   22aac:	str	r3, [r1, #8]
   22ab0:	pop	{pc}		; (ldr pc, [sp], #4)
   22ab4:	ldrb	r3, [r0, #28]
   22ab8:	bfi	r3, r2, #1, #2
   22abc:	strb	r3, [r0, #28]
   22ac0:	str	r2, [r1]
   22ac4:	str	r2, [r1, #4]
   22ac8:	str	r2, [r1, #8]
   22acc:	bx	lr
   22ad0:	cmp	r1, #0
   22ad4:	strd	r4, [sp, #-16]!
   22ad8:	mov	ip, r3
   22adc:	str	r6, [sp, #8]
   22ae0:	mov	r4, r0
   22ae4:	str	lr, [sp, #12]
   22ae8:	sub	sp, sp, #32
   22aec:	ldr	r5, [sp, #48]	; 0x30
   22af0:	ldr	r6, [sp, #52]	; 0x34
   22af4:	beq	22c38 <__assert_fail@plt+0x11990>
   22af8:	mov	r3, r1
   22afc:	mov	r1, #1
   22b00:	stm	sp, {r2, ip}
   22b04:	movw	r2, #22788	; 0x5904
   22b08:	movt	r2, #2
   22b0c:	bl	111f4 <__fprintf_chk@plt>
   22b10:	mov	r2, #5
   22b14:	movw	r1, #22808	; 0x5918
   22b18:	movt	r1, #2
   22b1c:	mov	r0, #0
   22b20:	bl	11098 <dcgettext@plt>
   22b24:	movw	ip, #2022	; 0x7e6
   22b28:	mov	r3, r0
   22b2c:	mov	r1, #1
   22b30:	movw	r2, #23536	; 0x5bf0
   22b34:	movt	r2, #2
   22b38:	mov	r0, r4
   22b3c:	str	ip, [sp]
   22b40:	bl	111f4 <__fprintf_chk@plt>
   22b44:	mov	r1, r4
   22b48:	mov	r0, #10
   22b4c:	bl	1108c <fputc_unlocked@plt>
   22b50:	mov	r2, #5
   22b54:	movw	r1, #22812	; 0x591c
   22b58:	movt	r1, #2
   22b5c:	mov	r0, #0
   22b60:	bl	11098 <dcgettext@plt>
   22b64:	mov	r2, r0
   22b68:	mov	r1, #1
   22b6c:	movw	r3, #22984	; 0x59c8
   22b70:	movt	r3, #2
   22b74:	mov	r0, r4
   22b78:	bl	111f4 <__fprintf_chk@plt>
   22b7c:	mov	r1, r4
   22b80:	mov	r0, #10
   22b84:	bl	1108c <fputc_unlocked@plt>
   22b88:	cmp	r6, #9
   22b8c:	ldrls	pc, [pc, r6, lsl #2]
   22b90:	b	22ea4 <__assert_fail@plt+0x11bfc>
   22b94:	andeq	r2, r2, r4, lsr #24
   22b98:	andeq	r2, r2, r4, asr ip
   22b9c:	muleq	r2, r0, ip
   22ba0:	ldrdeq	r2, [r2], -r0
   22ba4:	andeq	r2, r2, r8, lsl sp
   22ba8:	andeq	r2, r2, r0, asr sp
   22bac:	muleq	r2, r8, sp
   22bb0:	andeq	r2, r2, ip, ror #27
   22bb4:	andeq	r2, r2, r4, asr #28
   22bb8:			; <UNDEFINED> instruction: 0x00022bbc
   22bbc:	movw	r1, #23288	; 0x5af8
   22bc0:	movt	r1, #2
   22bc4:	mov	r2, #5
   22bc8:	mov	r0, #0
   22bcc:	bl	11098 <dcgettext@plt>
   22bd0:	ldr	lr, [r5, #4]
   22bd4:	mov	r2, r0
   22bd8:	mov	r1, #1
   22bdc:	mov	r0, r4
   22be0:	ldr	r3, [r5, #8]
   22be4:	ldr	ip, [r5, #32]
   22be8:	str	lr, [sp]
   22bec:	ldr	lr, [r5, #12]
   22bf0:	str	ip, [sp, #28]
   22bf4:	ldr	ip, [r5, #28]
   22bf8:	str	r3, [sp, #4]
   22bfc:	ldr	r3, [r5, #16]
   22c00:	str	lr, [sp, #8]
   22c04:	ldr	lr, [r5, #20]
   22c08:	str	ip, [sp, #24]
   22c0c:	ldr	ip, [r5, #24]
   22c10:	str	r3, [sp, #12]
   22c14:	ldr	r3, [r5]
   22c18:	str	lr, [sp, #16]
   22c1c:	str	ip, [sp, #20]
   22c20:	bl	111f4 <__fprintf_chk@plt>
   22c24:	add	sp, sp, #32
   22c28:	ldrd	r4, [sp]
   22c2c:	ldr	r6, [sp, #8]
   22c30:	add	sp, sp, #12
   22c34:	pop	{pc}		; (ldr pc, [sp], #4)
   22c38:	mov	r3, r2
   22c3c:	mov	r1, #1
   22c40:	str	ip, [sp]
   22c44:	movw	r2, #22800	; 0x5910
   22c48:	movt	r2, #2
   22c4c:	bl	111f4 <__fprintf_chk@plt>
   22c50:	b	22b10 <__assert_fail@plt+0x11868>
   22c54:	mov	r2, #5
   22c58:	movw	r1, #23020	; 0x59ec
   22c5c:	movt	r1, #2
   22c60:	mov	r0, #0
   22c64:	bl	11098 <dcgettext@plt>
   22c68:	ldr	r3, [r5]
   22c6c:	mov	r2, r0
   22c70:	mov	r1, #1
   22c74:	mov	r0, r4
   22c78:	add	sp, sp, #32
   22c7c:	ldrd	r4, [sp]
   22c80:	ldr	r6, [sp, #8]
   22c84:	ldr	lr, [sp, #12]
   22c88:	add	sp, sp, #16
   22c8c:	b	111f4 <__fprintf_chk@plt>
   22c90:	mov	r2, #5
   22c94:	movw	r1, #23036	; 0x59fc
   22c98:	movt	r1, #2
   22c9c:	mov	r0, #0
   22ca0:	bl	11098 <dcgettext@plt>
   22ca4:	ldm	r5, {r3, ip}
   22ca8:	mov	r2, r0
   22cac:	mov	r1, #1
   22cb0:	mov	r0, r4
   22cb4:	str	ip, [sp, #48]	; 0x30
   22cb8:	add	sp, sp, #32
   22cbc:	ldrd	r4, [sp]
   22cc0:	ldr	r6, [sp, #8]
   22cc4:	ldr	lr, [sp, #12]
   22cc8:	add	sp, sp, #16
   22ccc:	b	111f4 <__fprintf_chk@plt>
   22cd0:	mov	r2, #5
   22cd4:	movw	r1, #23060	; 0x5a14
   22cd8:	movt	r1, #2
   22cdc:	mov	r0, #0
   22ce0:	bl	11098 <dcgettext@plt>
   22ce4:	ldm	r5, {r3, lr}
   22ce8:	mov	r2, r0
   22cec:	mov	r1, #1
   22cf0:	mov	r0, r4
   22cf4:	ldr	ip, [r5, #8]
   22cf8:	str	lr, [sp, #48]	; 0x30
   22cfc:	str	ip, [sp, #52]	; 0x34
   22d00:	add	sp, sp, #32
   22d04:	ldrd	r4, [sp]
   22d08:	ldr	r6, [sp, #8]
   22d0c:	ldr	lr, [sp, #12]
   22d10:	add	sp, sp, #16
   22d14:	b	111f4 <__fprintf_chk@plt>
   22d18:	mov	r2, #5
   22d1c:	movw	r1, #23088	; 0x5a30
   22d20:	movt	r1, #2
   22d24:	mov	r0, #0
   22d28:	bl	11098 <dcgettext@plt>
   22d2c:	ldmib	r5, {r3, ip, lr}
   22d30:	mov	r2, r0
   22d34:	mov	r1, #1
   22d38:	mov	r0, r4
   22d3c:	str	r3, [sp]
   22d40:	ldr	r3, [r5]
   22d44:	stmib	sp, {ip, lr}
   22d48:	bl	111f4 <__fprintf_chk@plt>
   22d4c:	b	22c24 <__assert_fail@plt+0x1197c>
   22d50:	mov	r2, #5
   22d54:	movw	r1, #23120	; 0x5a50
   22d58:	movt	r1, #2
   22d5c:	mov	r0, #0
   22d60:	bl	11098 <dcgettext@plt>
   22d64:	ldmib	r5, {ip, lr}
   22d68:	mov	r2, r0
   22d6c:	mov	r1, #1
   22d70:	mov	r0, r4
   22d74:	ldr	r3, [r5, #16]
   22d78:	str	ip, [sp]
   22d7c:	ldr	ip, [r5, #12]
   22d80:	str	r3, [sp, #12]
   22d84:	ldr	r3, [r5]
   22d88:	str	lr, [sp, #4]
   22d8c:	str	ip, [sp, #8]
   22d90:	bl	111f4 <__fprintf_chk@plt>
   22d94:	b	22c24 <__assert_fail@plt+0x1197c>
   22d98:	mov	r2, #5
   22d9c:	movw	r1, #23156	; 0x5a74
   22da0:	movt	r1, #2
   22da4:	mov	r0, #0
   22da8:	bl	11098 <dcgettext@plt>
   22dac:	ldr	lr, [r5, #4]
   22db0:	mov	r2, r0
   22db4:	mov	r1, #1
   22db8:	mov	r0, r4
   22dbc:	ldr	r3, [r5, #8]
   22dc0:	ldr	ip, [r5, #20]
   22dc4:	str	lr, [sp]
   22dc8:	ldr	lr, [r5, #12]
   22dcc:	str	ip, [sp, #16]
   22dd0:	ldr	ip, [r5, #16]
   22dd4:	str	r3, [sp, #4]
   22dd8:	ldr	r3, [r5]
   22ddc:	str	lr, [sp, #8]
   22de0:	str	ip, [sp, #12]
   22de4:	bl	111f4 <__fprintf_chk@plt>
   22de8:	b	22c24 <__assert_fail@plt+0x1197c>
   22dec:	mov	r2, #5
   22df0:	movw	r1, #23196	; 0x5a9c
   22df4:	movt	r1, #2
   22df8:	mov	r0, #0
   22dfc:	bl	11098 <dcgettext@plt>
   22e00:	ldmib	r5, {r3, ip}
   22e04:	mov	r2, r0
   22e08:	mov	r1, #1
   22e0c:	mov	r0, r4
   22e10:	ldr	lr, [r5, #24]
   22e14:	str	r3, [sp]
   22e18:	ldr	r3, [r5, #12]
   22e1c:	str	lr, [sp, #20]
   22e20:	ldr	lr, [r5, #20]
   22e24:	str	ip, [sp, #4]
   22e28:	ldr	ip, [r5, #16]
   22e2c:	str	r3, [sp, #8]
   22e30:	ldr	r3, [r5]
   22e34:	str	ip, [sp, #12]
   22e38:	str	lr, [sp, #16]
   22e3c:	bl	111f4 <__fprintf_chk@plt>
   22e40:	b	22c24 <__assert_fail@plt+0x1197c>
   22e44:	mov	r2, #5
   22e48:	movw	r1, #23240	; 0x5ac8
   22e4c:	movt	r1, #2
   22e50:	mov	r0, #0
   22e54:	bl	11098 <dcgettext@plt>
   22e58:	ldmib	r5, {ip, lr}
   22e5c:	mov	r2, r0
   22e60:	mov	r1, #1
   22e64:	mov	r0, r4
   22e68:	ldr	r3, [r5, #28]
   22e6c:	str	ip, [sp]
   22e70:	ldr	ip, [r5, #12]
   22e74:	str	r3, [sp, #24]
   22e78:	ldr	r3, [r5, #24]
   22e7c:	str	lr, [sp, #4]
   22e80:	ldr	lr, [r5, #16]
   22e84:	str	ip, [sp, #8]
   22e88:	ldr	ip, [r5, #20]
   22e8c:	str	r3, [sp, #20]
   22e90:	ldr	r3, [r5]
   22e94:	str	lr, [sp, #12]
   22e98:	str	ip, [sp, #16]
   22e9c:	bl	111f4 <__fprintf_chk@plt>
   22ea0:	b	22c24 <__assert_fail@plt+0x1197c>
   22ea4:	movw	r1, #23340	; 0x5b2c
   22ea8:	movt	r1, #2
   22eac:	b	22bc4 <__assert_fail@plt+0x1191c>
   22eb0:	strd	r4, [sp, #-12]!
   22eb4:	str	lr, [sp, #8]
   22eb8:	sub	sp, sp, #12
   22ebc:	ldr	r5, [sp, #24]
   22ec0:	ldr	ip, [r5]
   22ec4:	cmp	ip, #0
   22ec8:	beq	22ee4 <__assert_fail@plt+0x11c3c>
   22ecc:	mov	lr, r5
   22ed0:	mov	ip, #0
   22ed4:	ldr	r4, [lr, #4]!
   22ed8:	add	ip, ip, #1
   22edc:	cmp	r4, #0
   22ee0:	bne	22ed4 <__assert_fail@plt+0x11c2c>
   22ee4:	stm	sp, {r5, ip}
   22ee8:	bl	22ad0 <__assert_fail@plt+0x11828>
   22eec:	add	sp, sp, #12
   22ef0:	ldrd	r4, [sp]
   22ef4:	add	sp, sp, #8
   22ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   22efc:	strd	r4, [sp, #-16]!
   22f00:	mov	ip, #0
   22f04:	str	r6, [sp, #8]
   22f08:	str	lr, [sp, #12]
   22f0c:	sub	sp, sp, #48	; 0x30
   22f10:	ldr	r5, [sp, #64]	; 0x40
   22f14:	add	r6, sp, #8
   22f18:	mov	r4, r6
   22f1c:	ldr	lr, [r5], #4
   22f20:	cmp	lr, #0
   22f24:	str	lr, [r4], #4
   22f28:	beq	22f38 <__assert_fail@plt+0x11c90>
   22f2c:	add	ip, ip, #1
   22f30:	cmp	ip, #10
   22f34:	bne	22f1c <__assert_fail@plt+0x11c74>
   22f38:	stm	sp, {r6, ip}
   22f3c:	bl	22ad0 <__assert_fail@plt+0x11828>
   22f40:	add	sp, sp, #48	; 0x30
   22f44:	ldrd	r4, [sp]
   22f48:	ldr	r6, [sp, #8]
   22f4c:	add	sp, sp, #12
   22f50:	pop	{pc}		; (ldr pc, [sp], #4)
   22f54:	push	{r3}		; (str r3, [sp, #-4]!)
   22f58:	mov	ip, #0
   22f5c:	strd	r4, [sp, #-12]!
   22f60:	str	lr, [sp, #8]
   22f64:	sub	sp, sp, #56	; 0x38
   22f68:	add	r3, sp, #72	; 0x48
   22f6c:	add	r5, sp, #16
   22f70:	mov	r4, r3
   22f74:	mov	lr, r5
   22f78:	str	r3, [sp, #12]
   22f7c:	ldr	r3, [r4], #4
   22f80:	cmp	r3, #0
   22f84:	str	r3, [lr], #4
   22f88:	beq	22f98 <__assert_fail@plt+0x11cf0>
   22f8c:	add	ip, ip, #1
   22f90:	cmp	ip, #10
   22f94:	bne	22f7c <__assert_fail@plt+0x11cd4>
   22f98:	ldr	r3, [sp, #68]	; 0x44
   22f9c:	stm	sp, {r5, ip}
   22fa0:	bl	22ad0 <__assert_fail@plt+0x11828>
   22fa4:	add	sp, sp, #56	; 0x38
   22fa8:	ldrd	r4, [sp]
   22fac:	ldr	lr, [sp, #8]
   22fb0:	add	sp, sp, #12
   22fb4:	add	sp, sp, #4
   22fb8:	bx	lr
   22fbc:	movw	r3, #25044	; 0x61d4
   22fc0:	movt	r3, #3
   22fc4:	str	r4, [sp, #-8]!
   22fc8:	mov	r0, #10
   22fcc:	ldr	r1, [r3]
   22fd0:	str	lr, [sp, #4]
   22fd4:	bl	1108c <fputc_unlocked@plt>
   22fd8:	mov	r2, #5
   22fdc:	movw	r1, #23400	; 0x5b68
   22fe0:	movt	r1, #2
   22fe4:	mov	r0, #0
   22fe8:	bl	11098 <dcgettext@plt>
   22fec:	mov	r1, r0
   22ff0:	movw	r2, #23420	; 0x5b7c
   22ff4:	movt	r2, #2
   22ff8:	mov	r0, #1
   22ffc:	bl	111dc <__printf_chk@plt>
   23000:	mov	r2, #5
   23004:	movw	r1, #23444	; 0x5b94
   23008:	movt	r1, #2
   2300c:	mov	r0, #0
   23010:	bl	11098 <dcgettext@plt>
   23014:	mov	r1, r0
   23018:	movw	r3, #20976	; 0x51f0
   2301c:	movt	r3, #2
   23020:	movw	r2, #21016	; 0x5218
   23024:	movt	r2, #2
   23028:	mov	r0, #1
   2302c:	bl	111dc <__printf_chk@plt>
   23030:	mov	r2, #5
   23034:	movw	r1, #23464	; 0x5ba8
   23038:	movt	r1, #2
   2303c:	mov	r0, #0
   23040:	bl	11098 <dcgettext@plt>
   23044:	mov	r1, r0
   23048:	movw	r2, #23504	; 0x5bd0
   2304c:	movt	r2, #2
   23050:	mov	r0, #1
   23054:	ldr	r4, [sp]
   23058:	ldr	lr, [sp, #4]
   2305c:	add	sp, sp, #8
   23060:	b	111dc <__printf_chk@plt>
   23064:	str	r4, [sp, #-8]!
   23068:	str	lr, [sp, #4]
   2306c:	bl	24440 <__assert_fail@plt+0x13198>
   23070:	cmp	r0, #0
   23074:	beq	23084 <__assert_fail@plt+0x11ddc>
   23078:	ldr	r4, [sp]
   2307c:	add	sp, sp, #4
   23080:	pop	{pc}		; (ldr pc, [sp], #4)
   23084:	bl	234dc <__assert_fail@plt+0x12234>
   23088:	str	r4, [sp, #-8]!
   2308c:	str	lr, [sp, #4]
   23090:	bl	24440 <__assert_fail@plt+0x13198>
   23094:	cmp	r0, #0
   23098:	beq	230a8 <__assert_fail@plt+0x11e00>
   2309c:	ldr	r4, [sp]
   230a0:	add	sp, sp, #4
   230a4:	pop	{pc}		; (ldr pc, [sp], #4)
   230a8:	bl	234dc <__assert_fail@plt+0x12234>
   230ac:	str	r4, [sp, #-8]!
   230b0:	str	lr, [sp, #4]
   230b4:	bl	24440 <__assert_fail@plt+0x13198>
   230b8:	cmp	r0, #0
   230bc:	beq	230cc <__assert_fail@plt+0x11e24>
   230c0:	ldr	r4, [sp]
   230c4:	add	sp, sp, #4
   230c8:	pop	{pc}		; (ldr pc, [sp], #4)
   230cc:	bl	234dc <__assert_fail@plt+0x12234>
   230d0:	strd	r4, [sp, #-16]!
   230d4:	mov	r5, r0
   230d8:	mov	r4, r1
   230dc:	str	r6, [sp, #8]
   230e0:	str	lr, [sp, #12]
   230e4:	bl	2447c <__assert_fail@plt+0x131d4>
   230e8:	cmp	r0, #0
   230ec:	beq	23100 <__assert_fail@plt+0x11e58>
   230f0:	ldrd	r4, [sp]
   230f4:	ldr	r6, [sp, #8]
   230f8:	add	sp, sp, #12
   230fc:	pop	{pc}		; (ldr pc, [sp], #4)
   23100:	adds	r4, r4, #0
   23104:	movne	r4, #1
   23108:	cmp	r5, #0
   2310c:	moveq	r4, #1
   23110:	cmp	r4, #0
   23114:	beq	230f0 <__assert_fail@plt+0x11e48>
   23118:	bl	234dc <__assert_fail@plt+0x12234>
   2311c:	cmp	r1, #0
   23120:	orreq	r1, r1, #1
   23124:	str	r4, [sp, #-8]!
   23128:	str	lr, [sp, #4]
   2312c:	bl	2447c <__assert_fail@plt+0x131d4>
   23130:	cmp	r0, #0
   23134:	beq	23144 <__assert_fail@plt+0x11e9c>
   23138:	ldr	r4, [sp]
   2313c:	add	sp, sp, #4
   23140:	pop	{pc}		; (ldr pc, [sp], #4)
   23144:	bl	234dc <__assert_fail@plt+0x12234>
   23148:	strd	r4, [sp, #-16]!
   2314c:	mov	r4, r0
   23150:	mov	r5, r2
   23154:	str	r6, [sp, #8]
   23158:	mov	r6, r1
   2315c:	str	lr, [sp, #12]
   23160:	bl	24744 <__assert_fail@plt+0x1349c>
   23164:	cmp	r0, #0
   23168:	beq	2317c <__assert_fail@plt+0x11ed4>
   2316c:	ldrd	r4, [sp]
   23170:	ldr	r6, [sp, #8]
   23174:	add	sp, sp, #12
   23178:	pop	{pc}		; (ldr pc, [sp], #4)
   2317c:	cmp	r4, #0
   23180:	beq	23190 <__assert_fail@plt+0x11ee8>
   23184:	cmp	r6, #0
   23188:	cmpne	r5, #0
   2318c:	beq	2316c <__assert_fail@plt+0x11ec4>
   23190:	bl	234dc <__assert_fail@plt+0x12234>
   23194:	b	23148 <__assert_fail@plt+0x11ea0>
   23198:	cmp	r2, #0
   2319c:	cmpne	r1, #0
   231a0:	str	r4, [sp, #-8]!
   231a4:	moveq	r2, #1
   231a8:	str	lr, [sp, #4]
   231ac:	moveq	r1, r2
   231b0:	bl	24744 <__assert_fail@plt+0x1349c>
   231b4:	cmp	r0, #0
   231b8:	beq	231c8 <__assert_fail@plt+0x11f20>
   231bc:	ldr	r4, [sp]
   231c0:	add	sp, sp, #4
   231c4:	pop	{pc}		; (ldr pc, [sp], #4)
   231c8:	bl	234dc <__assert_fail@plt+0x12234>
   231cc:	mov	r2, r1
   231d0:	mov	r1, r0
   231d4:	mov	r0, #0
   231d8:	b	23148 <__assert_fail@plt+0x11ea0>
   231dc:	mov	r2, r1
   231e0:	mov	r1, r0
   231e4:	mov	r0, #0
   231e8:	b	23198 <__assert_fail@plt+0x11ef0>
   231ec:	cmp	r0, #0
   231f0:	strd	r4, [sp, #-16]!
   231f4:	mov	r5, r1
   231f8:	ldr	r4, [r1]
   231fc:	str	r6, [sp, #8]
   23200:	str	lr, [sp, #12]
   23204:	beq	23234 <__assert_fail@plt+0x11f8c>
   23208:	lsr	r3, r4, #1
   2320c:	add	r3, r3, #1
   23210:	adds	r4, r4, r3
   23214:	bcs	23250 <__assert_fail@plt+0x11fa8>
   23218:	mov	r1, r4
   2321c:	bl	23148 <__assert_fail@plt+0x11ea0>
   23220:	ldr	r6, [sp, #8]
   23224:	str	r4, [r5]
   23228:	ldrd	r4, [sp]
   2322c:	add	sp, sp, #12
   23230:	pop	{pc}		; (ldr pc, [sp], #4)
   23234:	cmp	r4, #0
   23238:	bne	23218 <__assert_fail@plt+0x11f70>
   2323c:	mov	r4, #64	; 0x40
   23240:	udiv	r4, r4, r2
   23244:	cmp	r2, #64	; 0x40
   23248:	addhi	r4, r4, #1
   2324c:	b	23218 <__assert_fail@plt+0x11f70>
   23250:	bl	234dc <__assert_fail@plt+0x12234>
   23254:	mov	r2, #1
   23258:	b	231ec <__assert_fail@plt+0x11f44>
   2325c:	ldr	ip, [r1]
   23260:	strd	r4, [sp, #-32]!	; 0xffffffe0
   23264:	mov	r5, r1
   23268:	strd	r6, [sp, #8]
   2326c:	str	lr, [sp, #28]
   23270:	strd	r8, [sp, #16]
   23274:	asr	lr, ip, #1
   23278:	ldr	r8, [sp, #32]
   2327c:	str	sl, [sp, #24]
   23280:	adds	r4, ip, lr
   23284:	mvn	lr, r3
   23288:	lsr	lr, lr, #31
   2328c:	mvnvs	r4, #-2147483648	; 0x80000000
   23290:	cmp	r3, r4
   23294:	movge	r1, #0
   23298:	andlt	r1, lr, #1
   2329c:	cmp	r1, #0
   232a0:	movne	r4, r3
   232a4:	smull	r6, r7, r4, r8
   232a8:	cmp	r7, r6, asr #31
   232ac:	bne	23334 <__assert_fail@plt+0x1208c>
   232b0:	cmp	r6, #63	; 0x3f
   232b4:	mov	r1, r6
   232b8:	ble	2331c <__assert_fail@plt+0x12074>
   232bc:	cmp	r0, #0
   232c0:	sub	r6, r4, ip
   232c4:	streq	r0, [r5]
   232c8:	cmp	r6, r2
   232cc:	bge	232fc <__assert_fail@plt+0x12054>
   232d0:	adds	r4, ip, r2
   232d4:	bvs	23330 <__assert_fail@plt+0x12088>
   232d8:	cmp	r4, r3
   232dc:	movle	r3, #0
   232e0:	andgt	r3, lr, #1
   232e4:	cmp	r3, #0
   232e8:	bne	23330 <__assert_fail@plt+0x12088>
   232ec:	smull	r8, r9, r4, r8
   232f0:	cmp	r9, r8, asr #31
   232f4:	mov	r1, r8
   232f8:	bne	23330 <__assert_fail@plt+0x12088>
   232fc:	bl	230d0 <__assert_fail@plt+0x11e28>
   23300:	ldrd	r6, [sp, #8]
   23304:	ldrd	r8, [sp, #16]
   23308:	ldr	sl, [sp, #24]
   2330c:	str	r4, [r5]
   23310:	ldrd	r4, [sp]
   23314:	add	sp, sp, #28
   23318:	pop	{pc}		; (ldr pc, [sp], #4)
   2331c:	mov	r6, #64	; 0x40
   23320:	sdiv	r4, r6, r8
   23324:	mls	r1, r8, r4, r6
   23328:	sub	r1, r6, r1
   2332c:	b	232bc <__assert_fail@plt+0x12014>
   23330:	bl	234dc <__assert_fail@plt+0x12234>
   23334:	mvn	r6, #-2147483648	; 0x80000000
   23338:	b	23320 <__assert_fail@plt+0x12078>
   2333c:	mov	r1, #1
   23340:	str	r4, [sp, #-8]!
   23344:	str	lr, [sp, #4]
   23348:	bl	243cc <__assert_fail@plt+0x13124>
   2334c:	cmp	r0, #0
   23350:	beq	23360 <__assert_fail@plt+0x120b8>
   23354:	ldr	r4, [sp]
   23358:	add	sp, sp, #4
   2335c:	pop	{pc}		; (ldr pc, [sp], #4)
   23360:	bl	234dc <__assert_fail@plt+0x12234>
   23364:	mov	r1, #1
   23368:	str	r4, [sp, #-8]!
   2336c:	str	lr, [sp, #4]
   23370:	bl	243cc <__assert_fail@plt+0x13124>
   23374:	cmp	r0, #0
   23378:	beq	23388 <__assert_fail@plt+0x120e0>
   2337c:	ldr	r4, [sp]
   23380:	add	sp, sp, #4
   23384:	pop	{pc}		; (ldr pc, [sp], #4)
   23388:	bl	234dc <__assert_fail@plt+0x12234>
   2338c:	str	r4, [sp, #-8]!
   23390:	str	lr, [sp, #4]
   23394:	bl	243cc <__assert_fail@plt+0x13124>
   23398:	cmp	r0, #0
   2339c:	beq	233ac <__assert_fail@plt+0x12104>
   233a0:	ldr	r4, [sp]
   233a4:	add	sp, sp, #4
   233a8:	pop	{pc}		; (ldr pc, [sp], #4)
   233ac:	bl	234dc <__assert_fail@plt+0x12234>
   233b0:	str	r4, [sp, #-8]!
   233b4:	str	lr, [sp, #4]
   233b8:	bl	243cc <__assert_fail@plt+0x13124>
   233bc:	cmp	r0, #0
   233c0:	beq	233d0 <__assert_fail@plt+0x12128>
   233c4:	ldr	r4, [sp]
   233c8:	add	sp, sp, #4
   233cc:	pop	{pc}		; (ldr pc, [sp], #4)
   233d0:	bl	234dc <__assert_fail@plt+0x12234>
   233d4:	strd	r4, [sp, #-16]!
   233d8:	mov	r4, r1
   233dc:	str	r6, [sp, #8]
   233e0:	mov	r6, r0
   233e4:	mov	r0, r1
   233e8:	str	lr, [sp, #12]
   233ec:	bl	24440 <__assert_fail@plt+0x13198>
   233f0:	subs	r5, r0, #0
   233f4:	beq	23418 <__assert_fail@plt+0x12170>
   233f8:	mov	r2, r4
   233fc:	mov	r1, r6
   23400:	bl	11038 <memcpy@plt>
   23404:	mov	r0, r5
   23408:	ldrd	r4, [sp]
   2340c:	ldr	r6, [sp, #8]
   23410:	add	sp, sp, #12
   23414:	pop	{pc}		; (ldr pc, [sp], #4)
   23418:	bl	234dc <__assert_fail@plt+0x12234>
   2341c:	strd	r4, [sp, #-16]!
   23420:	mov	r4, r1
   23424:	str	r6, [sp, #8]
   23428:	mov	r6, r0
   2342c:	mov	r0, r1
   23430:	str	lr, [sp, #12]
   23434:	bl	24440 <__assert_fail@plt+0x13198>
   23438:	subs	r5, r0, #0
   2343c:	beq	23460 <__assert_fail@plt+0x121b8>
   23440:	mov	r2, r4
   23444:	mov	r1, r6
   23448:	bl	11038 <memcpy@plt>
   2344c:	mov	r0, r5
   23450:	ldrd	r4, [sp]
   23454:	ldr	r6, [sp, #8]
   23458:	add	sp, sp, #12
   2345c:	pop	{pc}		; (ldr pc, [sp], #4)
   23460:	bl	234dc <__assert_fail@plt+0x12234>
   23464:	strd	r4, [sp, #-16]!
   23468:	mov	r4, r1
   2346c:	str	r6, [sp, #8]
   23470:	mov	r6, r0
   23474:	add	r0, r1, #1
   23478:	str	lr, [sp, #12]
   2347c:	bl	24440 <__assert_fail@plt+0x13198>
   23480:	subs	r5, r0, #0
   23484:	beq	234b0 <__assert_fail@plt+0x12208>
   23488:	mov	r3, #0
   2348c:	mov	r1, r6
   23490:	mov	r2, r4
   23494:	strb	r3, [r5, r4]
   23498:	bl	11038 <memcpy@plt>
   2349c:	mov	r0, r5
   234a0:	ldrd	r4, [sp]
   234a4:	ldr	r6, [sp, #8]
   234a8:	add	sp, sp, #12
   234ac:	pop	{pc}		; (ldr pc, [sp], #4)
   234b0:	bl	234dc <__assert_fail@plt+0x12234>
   234b4:	str	r4, [sp, #-8]!
   234b8:	mov	r4, r0
   234bc:	str	lr, [sp, #4]
   234c0:	bl	11188 <strlen@plt>
   234c4:	add	r1, r0, #1
   234c8:	mov	r0, r4
   234cc:	ldr	r4, [sp]
   234d0:	ldr	lr, [sp, #4]
   234d4:	add	sp, sp, #8
   234d8:	b	233d4 <__assert_fail@plt+0x1212c>
   234dc:	movw	r3, #24944	; 0x6170
   234e0:	movt	r3, #3
   234e4:	str	r4, [sp, #-8]!
   234e8:	ldr	r4, [r3]
   234ec:	mov	r2, #5
   234f0:	movw	r1, #23584	; 0x5c20
   234f4:	movt	r1, #2
   234f8:	mov	r0, #0
   234fc:	str	lr, [sp, #4]
   23500:	bl	11098 <dcgettext@plt>
   23504:	mov	r3, r0
   23508:	movw	r2, #21244	; 0x52fc
   2350c:	movt	r2, #2
   23510:	mov	r1, #0
   23514:	mov	r0, r4
   23518:	bl	11110 <error@plt>
   2351c:	bl	1129c <abort@plt>
   23520:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23524:	strd	r6, [sp, #8]
   23528:	mov	r6, r2
   2352c:	mov	r7, r3
   23530:	str	r8, [sp, #16]
   23534:	mov	r2, r1
   23538:	mov	r1, #0
   2353c:	str	lr, [sp, #20]
   23540:	sub	sp, sp, #16
   23544:	mov	r8, r0
   23548:	ldr	ip, [sp, #48]	; 0x30
   2354c:	add	r3, sp, #8
   23550:	str	ip, [sp]
   23554:	bl	23690 <__assert_fail@plt+0x123e8>
   23558:	subs	r4, r0, #0
   2355c:	bne	235ac <__assert_fail@plt+0x12304>
   23560:	ldrd	r4, [sp, #8]
   23564:	ldrd	r0, [sp, #40]	; 0x28
   23568:	cmp	r4, r6
   2356c:	sbcs	r3, r5, r7
   23570:	movlt	r3, #1
   23574:	movge	r3, #0
   23578:	cmp	r0, r4
   2357c:	sbcs	r2, r1, r5
   23580:	orrlt	r3, r3, #1
   23584:	cmp	r3, #0
   23588:	bne	2362c <__assert_fail@plt+0x12384>
   2358c:	mov	r0, r4
   23590:	mov	r1, r5
   23594:	add	sp, sp, #16
   23598:	ldrd	r4, [sp]
   2359c:	ldrd	r6, [sp, #8]
   235a0:	ldr	r8, [sp, #16]
   235a4:	add	sp, sp, #20
   235a8:	pop	{pc}		; (ldr pc, [sp], #4)
   235ac:	bl	111a0 <__errno_location@plt>
   235b0:	cmp	r4, #1
   235b4:	moveq	r3, #75	; 0x4b
   235b8:	moveq	r4, r3
   235bc:	streq	r3, [r0]
   235c0:	beq	2361c <__assert_fail@plt+0x12374>
   235c4:	cmp	r4, #3
   235c8:	beq	23610 <__assert_fail@plt+0x12368>
   235cc:	ldr	r3, [sp, #56]	; 0x38
   235d0:	ldr	r4, [r0]
   235d4:	cmp	r3, #0
   235d8:	bne	235e4 <__assert_fail@plt+0x1233c>
   235dc:	mov	r3, #1
   235e0:	str	r3, [sp, #56]	; 0x38
   235e4:	cmp	r4, #22
   235e8:	moveq	r4, #0
   235ec:	mov	r0, r8
   235f0:	bl	14d40 <__assert_fail@plt+0x3a98>
   235f4:	movw	r2, #21912	; 0x5598
   235f8:	movt	r2, #2
   235fc:	str	r0, [sp]
   23600:	mov	r1, r4
   23604:	ldr	r3, [sp, #52]	; 0x34
   23608:	ldr	r0, [sp, #56]	; 0x38
   2360c:	bl	11110 <error@plt>
   23610:	mov	r3, #0
   23614:	mov	r4, r3
   23618:	str	r3, [r0]
   2361c:	ldr	r3, [sp, #56]	; 0x38
   23620:	cmp	r3, #0
   23624:	bne	235ec <__assert_fail@plt+0x12344>
   23628:	b	235dc <__assert_fail@plt+0x12334>
   2362c:	bl	111a0 <__errno_location@plt>
   23630:	cmp	r4, #1073741824	; 0x40000000
   23634:	sbcs	r3, r5, #0
   23638:	bge	23660 <__assert_fail@plt+0x123b8>
   2363c:	mov	r2, #-1073741824	; 0xc0000000
   23640:	mvn	r3, #0
   23644:	cmp	r4, r2
   23648:	sbcs	r3, r5, r3
   2364c:	blt	23660 <__assert_fail@plt+0x123b8>
   23650:	mov	r3, #34	; 0x22
   23654:	mov	r4, r3
   23658:	str	r3, [r0]
   2365c:	b	2361c <__assert_fail@plt+0x12374>
   23660:	mov	r3, #75	; 0x4b
   23664:	str	r3, [r0]
   23668:	ldr	r3, [sp, #56]	; 0x38
   2366c:	cmp	r3, #0
   23670:	movne	r4, #75	; 0x4b
   23674:	bne	235ec <__assert_fail@plt+0x12344>
   23678:	mov	r3, #1
   2367c:	mov	r4, #75	; 0x4b
   23680:	str	r3, [sp, #56]	; 0x38
   23684:	b	235ec <__assert_fail@plt+0x12344>
   23688:	mov	r1, #10
   2368c:	b	23520 <__assert_fail@plt+0x12278>
   23690:	cmp	r2, #36	; 0x24
   23694:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23698:	strd	r6, [sp, #8]
   2369c:	strd	r8, [sp, #16]
   236a0:	strd	sl, [sp, #24]
   236a4:	str	lr, [sp, #32]
   236a8:	sub	sp, sp, #44	; 0x2c
   236ac:	bhi	24298 <__assert_fail@plt+0x12ff0>
   236b0:	cmp	r1, #0
   236b4:	mov	r5, r1
   236b8:	mov	r6, r2
   236bc:	addeq	r5, sp, #36	; 0x24
   236c0:	mov	sl, r0
   236c4:	mov	r7, r3
   236c8:	bl	111a0 <__errno_location@plt>
   236cc:	mov	fp, r0
   236d0:	mov	r4, #0
   236d4:	mov	r2, r6
   236d8:	mov	r3, r4
   236dc:	mov	r1, r5
   236e0:	mov	r0, sl
   236e4:	str	r4, [fp]
   236e8:	bl	11260 <__strtoll_internal@plt>
   236ec:	ldr	r6, [r5]
   236f0:	mov	r8, r0
   236f4:	mov	r9, r1
   236f8:	cmp	r6, sl
   236fc:	beq	23754 <__assert_fail@plt+0x124ac>
   23700:	ldr	r4, [fp]
   23704:	cmp	r4, #0
   23708:	beq	23718 <__assert_fail@plt+0x12470>
   2370c:	cmp	r4, #34	; 0x22
   23710:	bne	23858 <__assert_fail@plt+0x125b0>
   23714:	mov	r4, #1
   23718:	ldr	r3, [sp, #80]	; 0x50
   2371c:	cmp	r3, #0
   23720:	beq	23730 <__assert_fail@plt+0x12488>
   23724:	ldrb	sl, [r6]
   23728:	cmp	sl, #0
   2372c:	bne	2395c <__assert_fail@plt+0x126b4>
   23730:	strd	r8, [r7]
   23734:	mov	r0, r4
   23738:	add	sp, sp, #44	; 0x2c
   2373c:	ldrd	r4, [sp]
   23740:	ldrd	r6, [sp, #8]
   23744:	ldrd	r8, [sp, #16]
   23748:	ldrd	sl, [sp, #24]
   2374c:	add	sp, sp, #32
   23750:	pop	{pc}		; (ldr pc, [sp], #4)
   23754:	ldr	r3, [sp, #80]	; 0x50
   23758:	cmp	r3, r4
   2375c:	beq	23858 <__assert_fail@plt+0x125b0>
   23760:	ldrb	sl, [sl]
   23764:	cmp	sl, r4
   23768:	beq	23858 <__assert_fail@plt+0x125b0>
   2376c:	mov	r1, sl
   23770:	mov	r0, r3
   23774:	bl	11194 <strchr@plt>
   23778:	cmp	r0, r4
   2377c:	movne	r8, #1
   23780:	movne	r9, #0
   23784:	beq	23858 <__assert_fail@plt+0x125b0>
   23788:	sub	fp, sl, #69	; 0x45
   2378c:	cmp	fp, #47	; 0x2f
   23790:	ldrls	pc, [pc, fp, lsl #2]
   23794:	b	23978 <__assert_fail@plt+0x126d0>
   23798:	andeq	r3, r2, r0, ror #16
   2379c:	andeq	r3, r2, r8, ror r9
   237a0:	andeq	r3, r2, r0, ror #16
   237a4:	andeq	r3, r2, r8, ror r9
   237a8:	andeq	r3, r2, r8, ror r9
   237ac:	andeq	r3, r2, r8, ror r9
   237b0:	andeq	r3, r2, r0, ror #16
   237b4:	andeq	r3, r2, r8, ror r9
   237b8:	andeq	r3, r2, r0, ror #16
   237bc:	andeq	r3, r2, r8, ror r9
   237c0:	andeq	r3, r2, r8, ror r9
   237c4:	andeq	r3, r2, r0, ror #16
   237c8:	andeq	r3, r2, r8, ror r9
   237cc:	andeq	r3, r2, r8, ror r9
   237d0:	andeq	r3, r2, r8, ror r9
   237d4:	andeq	r3, r2, r0, ror #16
   237d8:	andeq	r3, r2, r8, ror r9
   237dc:	andeq	r3, r2, r8, ror r9
   237e0:	andeq	r3, r2, r8, ror r9
   237e4:	andeq	r3, r2, r8, ror r9
   237e8:	andeq	r3, r2, r0, ror #16
   237ec:	andeq	r3, r2, r0, ror #16
   237f0:	andeq	r3, r2, r8, ror r9
   237f4:	andeq	r3, r2, r8, ror r9
   237f8:	andeq	r3, r2, r8, ror r9
   237fc:	andeq	r3, r2, r8, ror r9
   23800:	andeq	r3, r2, r8, ror r9
   23804:	andeq	r3, r2, r8, ror r9
   23808:	andeq	r3, r2, r8, ror r9
   2380c:	andeq	r3, r2, r8, ror r9
   23810:	andeq	r3, r2, r8, ror r9
   23814:	andeq	r3, r2, r8, ror r9
   23818:	andeq	r3, r2, r8, ror r9
   2381c:	andeq	r3, r2, r8, ror r9
   23820:	andeq	r3, r2, r0, ror #16
   23824:	andeq	r3, r2, r8, ror r9
   23828:	andeq	r3, r2, r8, ror r9
   2382c:	andeq	r3, r2, r8, ror r9
   23830:	andeq	r3, r2, r0, ror #16
   23834:	andeq	r3, r2, r8, ror r9
   23838:	andeq	r3, r2, r0, ror #16
   2383c:	andeq	r3, r2, r8, ror r9
   23840:	andeq	r3, r2, r8, ror r9
   23844:	andeq	r3, r2, r8, ror r9
   23848:	andeq	r3, r2, r8, ror r9
   2384c:	andeq	r3, r2, r8, ror r9
   23850:	andeq	r3, r2, r8, ror r9
   23854:	andeq	r3, r2, r0, ror #16
   23858:	mov	r4, #4
   2385c:	b	23734 <__assert_fail@plt+0x1248c>
   23860:	mov	r1, #48	; 0x30
   23864:	ldr	r0, [sp, #80]	; 0x50
   23868:	bl	11194 <strchr@plt>
   2386c:	cmp	r0, #0
   23870:	beq	23978 <__assert_fail@plt+0x126d0>
   23874:	ldrb	r3, [r6, #1]
   23878:	cmp	r3, #68	; 0x44
   2387c:	beq	23f40 <__assert_fail@plt+0x12c98>
   23880:	cmp	r3, #105	; 0x69
   23884:	beq	240f0 <__assert_fail@plt+0x12e48>
   23888:	cmp	r3, #66	; 0x42
   2388c:	beq	23f40 <__assert_fail@plt+0x12c98>
   23890:	cmp	fp, #47	; 0x2f
   23894:	ldrls	pc, [pc, fp, lsl #2]
   23898:	b	23970 <__assert_fail@plt+0x126c8>
   2389c:	muleq	r2, r8, lr
   238a0:	andeq	r3, r2, r0, ror r9
   238a4:	andeq	r3, r2, r8, lsl #29
   238a8:	andeq	r3, r2, r0, ror r9
   238ac:	andeq	r3, r2, r0, ror r9
   238b0:	andeq	r3, r2, r0, ror r9
   238b4:	andeq	r3, r2, r4, lsl #30
   238b8:	andeq	r3, r2, r0, ror r9
   238bc:	strdeq	r3, [r2], -r4
   238c0:	andeq	r3, r2, r0, ror r9
   238c4:	andeq	r3, r2, r0, ror r9
   238c8:	andeq	r3, r2, r4, asr #29
   238cc:	andeq	r3, r2, r0, ror r9
   238d0:	andeq	r3, r2, r0, ror r9
   238d4:	andeq	r3, r2, r0, ror r9
   238d8:			; <UNDEFINED> instruction: 0x00023eb4
   238dc:	andeq	r3, r2, r0, ror r9
   238e0:	andeq	r3, r2, r0, ror r9
   238e4:	andeq	r3, r2, r0, ror r9
   238e8:	andeq	r3, r2, r0, ror r9
   238ec:	andeq	r3, r2, r4, ror #29
   238f0:	ldrdeq	r3, [r2], -r4
   238f4:	andeq	r3, r2, r0, ror r9
   238f8:	andeq	r3, r2, r0, ror r9
   238fc:	andeq	r3, r2, r0, ror r9
   23900:	andeq	r3, r2, r0, ror r9
   23904:	andeq	r3, r2, r0, ror r9
   23908:	andeq	r3, r2, r0, ror r9
   2390c:	andeq	r3, r2, r0, ror r9
   23910:	andeq	r3, r2, r8, ror #20
   23914:	andeq	r3, r2, r8, lsr #29
   23918:	andeq	r3, r2, r0, ror r9
   2391c:	andeq	r3, r2, r0, ror r9
   23920:	andeq	r3, r2, r0, ror r9
   23924:	andeq	r3, r2, r8, lsl #29
   23928:	andeq	r3, r2, r0, ror r9
   2392c:	andeq	r3, r2, r0, ror r9
   23930:	andeq	r3, r2, r0, ror r9
   23934:	andeq	r3, r2, r4, lsl #30
   23938:	andeq	r3, r2, r0, ror r9
   2393c:	strdeq	r3, [r2], -r4
   23940:	andeq	r3, r2, r0, ror r9
   23944:	andeq	r3, r2, r0, ror r9
   23948:	andeq	r3, r2, r0, ror r9
   2394c:	andeq	r3, r2, r0, ror r9
   23950:	andeq	r3, r2, r0, ror r9
   23954:	andeq	r3, r2, r0, ror r9
   23958:			; <UNDEFINED> instruction: 0x00023eb4
   2395c:	mov	r1, sl
   23960:	ldr	r0, [sp, #80]	; 0x50
   23964:	bl	11194 <strchr@plt>
   23968:	cmp	r0, #0
   2396c:	bne	23788 <__assert_fail@plt+0x124e0>
   23970:	orr	r4, r4, #2
   23974:	b	23730 <__assert_fail@plt+0x12488>
   23978:	mov	r3, #1
   2397c:	mov	fp, #1024	; 0x400
   23980:	sub	sl, sl, #66	; 0x42
   23984:	cmp	sl, #53	; 0x35
   23988:	ldrls	pc, [pc, sl, lsl #2]
   2398c:	b	23970 <__assert_fail@plt+0x126c8>
   23990:			; <UNDEFINED> instruction: 0x00023ab4
   23994:	andeq	r3, r2, r0, ror r9
   23998:	andeq	r3, r2, r0, ror r9
   2399c:	andeq	r3, r2, r0, lsr #25
   239a0:	andeq	r3, r2, r0, ror r9
   239a4:	andeq	r3, r2, r8, lsr #24
   239a8:	andeq	r3, r2, r0, ror r9
   239ac:	andeq	r3, r2, r0, ror r9
   239b0:	andeq	r3, r2, r0, ror r9
   239b4:	andeq	r3, r2, ip, ror #23
   239b8:	andeq	r3, r2, r0, ror r9
   239bc:	muleq	r2, r0, fp
   239c0:	andeq	r3, r2, r0, ror r9
   239c4:	andeq	r3, r2, r0, ror r9
   239c8:	muleq	r2, r0, sp
   239cc:	andeq	r3, r2, r0, ror r9
   239d0:	andeq	r3, r2, r0, ror r9
   239d4:	andeq	r3, r2, r0, ror r9
   239d8:	andeq	r3, r2, r8, lsl sp
   239dc:	andeq	r3, r2, r0, ror r9
   239e0:	andeq	r3, r2, r0, ror r9
   239e4:	andeq	r3, r2, r0, ror r9
   239e8:	andeq	r3, r2, r0, ror r9
   239ec:	andeq	r3, r2, r8, lsl #28
   239f0:	andeq	r3, r2, r8, lsl fp
   239f4:	andeq	r3, r2, r0, ror r9
   239f8:	andeq	r3, r2, r0, ror r9
   239fc:	andeq	r3, r2, r0, ror r9
   23a00:	andeq	r3, r2, r0, ror r9
   23a04:	andeq	r3, r2, r0, ror r9
   23a08:	andeq	r3, r2, r0, ror r9
   23a0c:	andeq	r3, r2, r0, ror r9
   23a10:	andeq	r3, r2, ip, ror #20
   23a14:	andeq	r3, r2, r0, lsl #29
   23a18:	andeq	r3, r2, r0, ror r9
   23a1c:	andeq	r3, r2, r0, ror r9
   23a20:	andeq	r3, r2, r0, ror r9
   23a24:	andeq	r3, r2, r8, lsr #24
   23a28:	andeq	r3, r2, r0, ror r9
   23a2c:	andeq	r3, r2, r0, ror r9
   23a30:	andeq	r3, r2, r0, ror r9
   23a34:	andeq	r3, r2, ip, ror #23
   23a38:	andeq	r3, r2, r0, ror r9
   23a3c:	muleq	r2, r0, fp
   23a40:	andeq	r3, r2, r0, ror r9
   23a44:	andeq	r3, r2, r0, ror r9
   23a48:	andeq	r3, r2, r0, ror r9
   23a4c:	andeq	r3, r2, r0, ror r9
   23a50:	andeq	r3, r2, r0, ror r9
   23a54:	andeq	r3, r2, r0, ror r9
   23a58:	andeq	r3, r2, r8, lsl sp
   23a5c:	andeq	r3, r2, r0, ror r9
   23a60:	andeq	r3, r2, r0, ror r9
   23a64:	ldrdeq	r3, [r2], -r4
   23a68:	mov	r3, #1
   23a6c:	cmp	r9, r8, asr #31
   23a70:	mov	ip, #0
   23a74:	str	r3, [sp, #4]
   23a78:	bne	24108 <__assert_fail@plt+0x12e60>
   23a7c:	lsl	r3, r9, #9
   23a80:	lsl	r2, r8, #9
   23a84:	orr	r3, r3, r8, lsr #23
   23a88:	cmp	ip, #0
   23a8c:	bne	23afc <__assert_fail@plt+0x12854>
   23a90:	mov	r8, r2
   23a94:	mov	r9, r3
   23a98:	ldr	r2, [sp, #4]
   23a9c:	add	r3, r6, r2
   23aa0:	str	r3, [r5]
   23aa4:	ldrb	r3, [r6, r2]
   23aa8:	cmp	r3, #0
   23aac:	beq	23730 <__assert_fail@plt+0x12488>
   23ab0:	b	23970 <__assert_fail@plt+0x126c8>
   23ab4:	cmp	r9, r8, asr #31
   23ab8:	mov	ip, #0
   23abc:	str	r3, [sp, #4]
   23ac0:	bne	24150 <__assert_fail@plt+0x12ea8>
   23ac4:	lsl	r3, r9, #10
   23ac8:	lsl	r2, r8, #10
   23acc:	orr	r3, r3, r8, lsr #22
   23ad0:	b	23a88 <__assert_fail@plt+0x127e0>
   23ad4:	cmp	r9, r8, asr #31
   23ad8:	mov	r1, #0
   23adc:	str	r3, [sp, #4]
   23ae0:	bne	241d4 <__assert_fail@plt+0x12f2c>
   23ae4:	adds	ip, r8, r8
   23ae8:	adc	r3, r9, r9
   23aec:	cmp	r1, #0
   23af0:	moveq	r8, ip
   23af4:	moveq	r9, r3
   23af8:	beq	23a98 <__assert_fail@plt+0x127f0>
   23afc:	cmp	r8, #0
   23b00:	mov	r4, #1
   23b04:	sbcs	r3, r9, #0
   23b08:	blt	23f34 <__assert_fail@plt+0x12c8c>
   23b0c:	mvn	r8, #0
   23b10:	mvn	r9, #-2147483648	; 0x80000000
   23b14:	b	23a98 <__assert_fail@plt+0x127f0>
   23b18:	str	r3, [sp, #4]
   23b1c:	asr	r1, fp, #31
   23b20:	mov	r0, fp
   23b24:	mov	r3, #0
   23b28:	mov	ip, #7
   23b2c:	mov	lr, r3
   23b30:	strd	r0, [sp, #8]
   23b34:	str	r4, [sp, #16]
   23b38:	str	r5, [sp, #24]
   23b3c:	b	23b50 <__assert_fail@plt+0x128a8>
   23b40:	mov	r8, fp
   23b44:	mov	r9, r2
   23b48:	subs	ip, ip, #1
   23b4c:	beq	23f14 <__assert_fail@plt+0x12c6c>
   23b50:	cmp	r9, r8, asr #31
   23b54:	mov	r1, #0
   23b58:	bne	24048 <__assert_fail@plt+0x12da0>
   23b5c:	smull	r2, r3, r8, r0
   23b60:	mov	fp, r2
   23b64:	mov	r2, r3
   23b68:	cmp	r1, #0
   23b6c:	beq	23b40 <__assert_fail@plt+0x12898>
   23b70:	cmp	r8, #0
   23b74:	mov	lr, #1
   23b78:	sbcs	r3, r9, #0
   23b7c:	mvnge	r8, #0
   23b80:	mvnge	r9, #-2147483648	; 0x80000000
   23b84:	movlt	r8, #0
   23b88:	movlt	r9, #-2147483648	; 0x80000000
   23b8c:	b	23b48 <__assert_fail@plt+0x128a0>
   23b90:	str	r3, [sp, #4]
   23b94:	asr	r3, fp, #31
   23b98:	mov	r2, fp
   23b9c:	mov	r1, #0
   23ba0:	cmp	r9, r8, asr #31
   23ba4:	strd	r2, [sp, #8]
   23ba8:	bne	24194 <__assert_fail@plt+0x12eec>
   23bac:	smull	r2, r3, r8, fp
   23bb0:	mov	lr, r2
   23bb4:	subs	ip, r1, #0
   23bb8:	bne	23afc <__assert_fail@plt+0x12854>
   23bbc:	cmp	r3, lr, asr #31
   23bc0:	mov	r0, lr
   23bc4:	mov	r1, r3
   23bc8:	bne	24228 <__assert_fail@plt+0x12f80>
   23bcc:	smull	r2, r3, lr, fp
   23bd0:	mov	sl, r2
   23bd4:	mov	r2, r3
   23bd8:	cmp	ip, #0
   23bdc:	bne	23f24 <__assert_fail@plt+0x12c7c>
   23be0:	mov	r8, sl
   23be4:	mov	r9, r2
   23be8:	b	23a98 <__assert_fail@plt+0x127f0>
   23bec:	str	r3, [sp, #4]
   23bf0:	asr	r3, fp, #31
   23bf4:	mov	r2, fp
   23bf8:	mov	ip, #0
   23bfc:	cmp	r9, r8, asr #31
   23c00:	strd	r2, [sp, #8]
   23c04:	bne	23fbc <__assert_fail@plt+0x12d14>
   23c08:	smull	r2, r3, r8, fp
   23c0c:	mov	r1, r2
   23c10:	mov	r2, r3
   23c14:	cmp	ip, #0
   23c18:	bne	23afc <__assert_fail@plt+0x12854>
   23c1c:	mov	r8, r1
   23c20:	mov	r9, r2
   23c24:	b	23a98 <__assert_fail@plt+0x127f0>
   23c28:	str	r3, [sp, #4]
   23c2c:	asr	r1, fp, #31
   23c30:	mov	r0, fp
   23c34:	mov	r3, #0
   23c38:	mov	ip, #3
   23c3c:	mov	lr, r3
   23c40:	strd	r0, [sp, #8]
   23c44:	str	r4, [sp, #16]
   23c48:	str	r5, [sp, #24]
   23c4c:	b	23c60 <__assert_fail@plt+0x129b8>
   23c50:	mov	r8, fp
   23c54:	mov	r9, r2
   23c58:	subs	ip, ip, #1
   23c5c:	beq	23f14 <__assert_fail@plt+0x12c6c>
   23c60:	cmp	r9, r8, asr #31
   23c64:	mov	r1, #0
   23c68:	bne	23f84 <__assert_fail@plt+0x12cdc>
   23c6c:	smull	r2, r3, r8, r0
   23c70:	mov	fp, r2
   23c74:	mov	r2, r3
   23c78:	cmp	r1, #0
   23c7c:	beq	23c50 <__assert_fail@plt+0x129a8>
   23c80:	cmp	r8, #0
   23c84:	mov	lr, #1
   23c88:	sbcs	r3, r9, #0
   23c8c:	mvnge	r8, #0
   23c90:	mvnge	r9, #-2147483648	; 0x80000000
   23c94:	movlt	r8, #0
   23c98:	movlt	r9, #-2147483648	; 0x80000000
   23c9c:	b	23c58 <__assert_fail@plt+0x129b0>
   23ca0:	str	r3, [sp, #4]
   23ca4:	asr	r1, fp, #31
   23ca8:	mov	r0, fp
   23cac:	mov	r3, #0
   23cb0:	mov	ip, #6
   23cb4:	mov	lr, r3
   23cb8:	strd	r0, [sp, #8]
   23cbc:	str	r4, [sp, #16]
   23cc0:	str	r5, [sp, #24]
   23cc4:	b	23cd8 <__assert_fail@plt+0x12a30>
   23cc8:	mov	r8, fp
   23ccc:	mov	r9, r2
   23cd0:	subs	ip, ip, #1
   23cd4:	beq	23f14 <__assert_fail@plt+0x12c6c>
   23cd8:	cmp	r9, r8, asr #31
   23cdc:	mov	r1, #0
   23ce0:	bne	240b8 <__assert_fail@plt+0x12e10>
   23ce4:	smull	r2, r3, r8, r0
   23ce8:	mov	fp, r2
   23cec:	mov	r2, r3
   23cf0:	cmp	r1, #0
   23cf4:	beq	23cc8 <__assert_fail@plt+0x12a20>
   23cf8:	cmp	r8, #0
   23cfc:	mov	lr, #1
   23d00:	sbcs	r3, r9, #0
   23d04:	mvnge	r8, #0
   23d08:	mvnge	r9, #-2147483648	; 0x80000000
   23d0c:	movlt	r8, #0
   23d10:	movlt	r9, #-2147483648	; 0x80000000
   23d14:	b	23cd0 <__assert_fail@plt+0x12a28>
   23d18:	str	r3, [sp, #4]
   23d1c:	asr	r1, fp, #31
   23d20:	mov	r0, fp
   23d24:	mov	r3, #0
   23d28:	mov	ip, #4
   23d2c:	mov	lr, r3
   23d30:	strd	r0, [sp, #8]
   23d34:	str	r4, [sp, #16]
   23d38:	str	r5, [sp, #24]
   23d3c:	b	23d50 <__assert_fail@plt+0x12aa8>
   23d40:	mov	r8, fp
   23d44:	mov	r9, r2
   23d48:	subs	ip, ip, #1
   23d4c:	beq	23f14 <__assert_fail@plt+0x12c6c>
   23d50:	cmp	r9, r8, asr #31
   23d54:	mov	r1, #0
   23d58:	bne	24080 <__assert_fail@plt+0x12dd8>
   23d5c:	smull	r2, r3, r8, r0
   23d60:	mov	fp, r2
   23d64:	mov	r2, r3
   23d68:	cmp	r1, #0
   23d6c:	beq	23d40 <__assert_fail@plt+0x12a98>
   23d70:	cmp	r8, #0
   23d74:	mov	lr, #1
   23d78:	sbcs	r3, r9, #0
   23d7c:	mvnge	r8, #0
   23d80:	mvnge	r9, #-2147483648	; 0x80000000
   23d84:	movlt	r8, #0
   23d88:	movlt	r9, #-2147483648	; 0x80000000
   23d8c:	b	23d48 <__assert_fail@plt+0x12aa0>
   23d90:	str	r3, [sp, #4]
   23d94:	asr	r1, fp, #31
   23d98:	mov	r0, fp
   23d9c:	mov	r3, #0
   23da0:	mov	ip, #5
   23da4:	mov	lr, r3
   23da8:	strd	r0, [sp, #8]
   23dac:	str	r4, [sp, #16]
   23db0:	str	r5, [sp, #24]
   23db4:	b	23dc8 <__assert_fail@plt+0x12b20>
   23db8:	mov	r8, fp
   23dbc:	mov	r9, r2
   23dc0:	subs	ip, ip, #1
   23dc4:	beq	23f14 <__assert_fail@plt+0x12c6c>
   23dc8:	cmp	r9, r8, asr #31
   23dcc:	mov	r1, #0
   23dd0:	bne	24010 <__assert_fail@plt+0x12d68>
   23dd4:	smull	r2, r3, r8, r0
   23dd8:	mov	fp, r2
   23ddc:	mov	r2, r3
   23de0:	cmp	r1, #0
   23de4:	beq	23db8 <__assert_fail@plt+0x12b10>
   23de8:	cmp	r8, #0
   23dec:	mov	lr, #1
   23df0:	sbcs	r3, r9, #0
   23df4:	mvnge	r8, #0
   23df8:	mvnge	r9, #-2147483648	; 0x80000000
   23dfc:	movlt	r8, #0
   23e00:	movlt	r9, #-2147483648	; 0x80000000
   23e04:	b	23dc0 <__assert_fail@plt+0x12b18>
   23e08:	str	r3, [sp, #4]
   23e0c:	asr	r1, fp, #31
   23e10:	mov	r0, fp
   23e14:	mov	r3, #0
   23e18:	mov	ip, #8
   23e1c:	mov	lr, r3
   23e20:	strd	r0, [sp, #8]
   23e24:	str	r4, [sp, #16]
   23e28:	str	r5, [sp, #24]
   23e2c:	b	23e40 <__assert_fail@plt+0x12b98>
   23e30:	mov	r8, fp
   23e34:	mov	r9, r2
   23e38:	subs	ip, ip, #1
   23e3c:	beq	23f14 <__assert_fail@plt+0x12c6c>
   23e40:	cmp	r9, r8, asr #31
   23e44:	mov	r1, #0
   23e48:	bne	23f4c <__assert_fail@plt+0x12ca4>
   23e4c:	smull	r2, r3, r8, r0
   23e50:	mov	fp, r2
   23e54:	mov	r2, r3
   23e58:	cmp	r1, #0
   23e5c:	beq	23e30 <__assert_fail@plt+0x12b88>
   23e60:	cmp	r8, #0
   23e64:	mov	lr, #1
   23e68:	sbcs	r3, r9, #0
   23e6c:	mvnge	r8, #0
   23e70:	mvnge	r9, #-2147483648	; 0x80000000
   23e74:	movlt	r8, #0
   23e78:	movlt	r9, #-2147483648	; 0x80000000
   23e7c:	b	23e38 <__assert_fail@plt+0x12b90>
   23e80:	str	r3, [sp, #4]
   23e84:	b	23a98 <__assert_fail@plt+0x127f0>
   23e88:	mov	r3, #1
   23e8c:	mov	fp, #1024	; 0x400
   23e90:	str	r3, [sp, #4]
   23e94:	b	23c2c <__assert_fail@plt+0x12984>
   23e98:	mov	r3, #1
   23e9c:	mov	fp, #1024	; 0x400
   23ea0:	str	r3, [sp, #4]
   23ea4:	b	23ca4 <__assert_fail@plt+0x129fc>
   23ea8:	mov	r3, #1
   23eac:	str	r3, [sp, #4]
   23eb0:	b	23a98 <__assert_fail@plt+0x127f0>
   23eb4:	mov	r3, #1
   23eb8:	mov	fp, #1024	; 0x400
   23ebc:	str	r3, [sp, #4]
   23ec0:	b	23d1c <__assert_fail@plt+0x12a74>
   23ec4:	mov	r3, #1
   23ec8:	mov	fp, #1024	; 0x400
   23ecc:	str	r3, [sp, #4]
   23ed0:	b	23d94 <__assert_fail@plt+0x12aec>
   23ed4:	mov	r3, #1
   23ed8:	mov	fp, #1024	; 0x400
   23edc:	str	r3, [sp, #4]
   23ee0:	b	23b1c <__assert_fail@plt+0x12874>
   23ee4:	mov	r3, #1
   23ee8:	mov	fp, #1024	; 0x400
   23eec:	str	r3, [sp, #4]
   23ef0:	b	23e0c <__assert_fail@plt+0x12b64>
   23ef4:	mov	r3, #1
   23ef8:	mov	fp, #1024	; 0x400
   23efc:	str	r3, [sp, #4]
   23f00:	b	23b94 <__assert_fail@plt+0x128ec>
   23f04:	mov	r3, #1
   23f08:	mov	fp, #1024	; 0x400
   23f0c:	str	r3, [sp, #4]
   23f10:	b	23bf0 <__assert_fail@plt+0x12948>
   23f14:	ldr	r4, [sp, #16]
   23f18:	ldr	r5, [sp, #24]
   23f1c:	orr	r4, r4, lr
   23f20:	b	23a98 <__assert_fail@plt+0x127f0>
   23f24:	cmp	r0, #0
   23f28:	mov	r4, #1
   23f2c:	sbcs	r3, r1, #0
   23f30:	bge	23b0c <__assert_fail@plt+0x12864>
   23f34:	mov	r8, #0
   23f38:	mov	r9, #-2147483648	; 0x80000000
   23f3c:	b	23a98 <__assert_fail@plt+0x127f0>
   23f40:	mov	r3, #2
   23f44:	mov	fp, #1000	; 0x3e8
   23f48:	b	23980 <__assert_fail@plt+0x126d8>
   23f4c:	cmp	r9, #0
   23f50:	umull	r4, r5, r8, r0
   23f54:	umull	sl, fp, r0, r9
   23f58:	bge	23f68 <__assert_fail@plt+0x12cc0>
   23f5c:	mov	r3, #0
   23f60:	subs	sl, sl, r3
   23f64:	sbc	fp, fp, r0
   23f68:	adds	r2, sl, r5
   23f6c:	mov	r3, #0
   23f70:	adc	r3, fp, r3
   23f74:	cmp	r3, r2, asr #31
   23f78:	bne	24308 <__assert_fail@plt+0x13060>
   23f7c:	mov	fp, r4
   23f80:	b	23e58 <__assert_fail@plt+0x12bb0>
   23f84:	cmp	r9, #0
   23f88:	umull	r4, r5, r8, r0
   23f8c:	umull	sl, fp, r0, r9
   23f90:	bge	23fa0 <__assert_fail@plt+0x12cf8>
   23f94:	mov	r3, #0
   23f98:	subs	sl, sl, r3
   23f9c:	sbc	fp, fp, r0
   23fa0:	adds	r2, sl, r5
   23fa4:	mov	r3, #0
   23fa8:	adc	r3, fp, r3
   23fac:	cmp	r3, r2, asr #31
   23fb0:	bne	24328 <__assert_fail@plt+0x13080>
   23fb4:	mov	fp, r4
   23fb8:	b	23c78 <__assert_fail@plt+0x129d0>
   23fbc:	umull	r0, r1, fp, r9
   23fc0:	cmp	r9, #0
   23fc4:	umull	r2, r3, r8, fp
   23fc8:	strd	r0, [sp, #16]
   23fcc:	bge	23fe4 <__assert_fail@plt+0x12d3c>
   23fd0:	subs	r1, r0, ip
   23fd4:	str	r1, [sp, #16]
   23fd8:	ldr	r1, [sp, #20]
   23fdc:	sbc	r1, r1, fp
   23fe0:	str	r1, [sp, #20]
   23fe4:	mov	r1, r3
   23fe8:	ldr	r3, [sp, #16]
   23fec:	mov	r0, r2
   23ff0:	mov	lr, #0
   23ff4:	adds	r2, r3, r1
   23ff8:	ldr	r3, [sp, #20]
   23ffc:	adc	lr, r3, lr
   24000:	cmp	lr, r2, asr #31
   24004:	bne	24388 <__assert_fail@plt+0x130e0>
   24008:	mov	r1, r0
   2400c:	b	23c14 <__assert_fail@plt+0x1296c>
   24010:	cmp	r9, #0
   24014:	umull	r4, r5, r8, r0
   24018:	umull	sl, fp, r0, r9
   2401c:	bge	2402c <__assert_fail@plt+0x12d84>
   24020:	mov	r3, #0
   24024:	subs	sl, sl, r3
   24028:	sbc	fp, fp, r0
   2402c:	adds	r2, sl, r5
   24030:	mov	r3, #0
   24034:	adc	r3, fp, r3
   24038:	cmp	r3, r2, asr #31
   2403c:	bne	242c8 <__assert_fail@plt+0x13020>
   24040:	mov	fp, r4
   24044:	b	23de0 <__assert_fail@plt+0x12b38>
   24048:	cmp	r9, #0
   2404c:	umull	r4, r5, r8, r0
   24050:	umull	sl, fp, r0, r9
   24054:	bge	24064 <__assert_fail@plt+0x12dbc>
   24058:	mov	r3, #0
   2405c:	subs	sl, sl, r3
   24060:	sbc	fp, fp, r0
   24064:	adds	r2, sl, r5
   24068:	mov	r3, #0
   2406c:	adc	r3, fp, r3
   24070:	cmp	r3, r2, asr #31
   24074:	bne	24348 <__assert_fail@plt+0x130a0>
   24078:	mov	fp, r4
   2407c:	b	23b68 <__assert_fail@plt+0x128c0>
   24080:	cmp	r9, #0
   24084:	umull	r4, r5, r8, r0
   24088:	umull	sl, fp, r0, r9
   2408c:	bge	2409c <__assert_fail@plt+0x12df4>
   24090:	mov	r3, #0
   24094:	subs	sl, sl, r3
   24098:	sbc	fp, fp, r0
   2409c:	adds	r2, sl, r5
   240a0:	mov	r3, #0
   240a4:	adc	r3, fp, r3
   240a8:	cmp	r3, r2, asr #31
   240ac:	bne	24368 <__assert_fail@plt+0x130c0>
   240b0:	mov	fp, r4
   240b4:	b	23d68 <__assert_fail@plt+0x12ac0>
   240b8:	cmp	r9, #0
   240bc:	umull	r4, r5, r8, r0
   240c0:	umull	sl, fp, r0, r9
   240c4:	bge	240d4 <__assert_fail@plt+0x12e2c>
   240c8:	mov	r3, #0
   240cc:	subs	sl, sl, r3
   240d0:	sbc	fp, fp, r0
   240d4:	adds	r2, sl, r5
   240d8:	mov	r3, #0
   240dc:	adc	r3, fp, r3
   240e0:	cmp	r3, r2, asr #31
   240e4:	bne	242e8 <__assert_fail@plt+0x13040>
   240e8:	mov	fp, r4
   240ec:	b	23cf0 <__assert_fail@plt+0x12a48>
   240f0:	ldrb	r3, [r6, #2]
   240f4:	mov	fp, #1024	; 0x400
   240f8:	cmp	r3, #66	; 0x42
   240fc:	movne	r3, #1
   24100:	moveq	r3, #3
   24104:	b	23980 <__assert_fail@plt+0x126d8>
   24108:	mov	lr, #512	; 0x200
   2410c:	cmp	r9, #0
   24110:	lsr	r3, r8, #23
   24114:	lsl	r2, r8, #9
   24118:	umull	r0, r1, lr, r9
   2411c:	bge	24128 <__assert_fail@plt+0x12e80>
   24120:	subs	r0, r0, ip
   24124:	sbc	r1, r1, lr
   24128:	adds	r3, r0, r3
   2412c:	mov	lr, #0
   24130:	adc	r1, r1, lr
   24134:	cmp	r1, r3, asr #31
   24138:	beq	23a88 <__assert_fail@plt+0x127e0>
   2413c:	lsl	r3, r9, #9
   24140:	mov	ip, #1
   24144:	lsl	r2, r8, #9
   24148:	orr	r3, r3, r8, lsr #23
   2414c:	b	23a88 <__assert_fail@plt+0x127e0>
   24150:	mov	lr, #1024	; 0x400
   24154:	cmp	r9, #0
   24158:	lsr	r3, r8, #22
   2415c:	lsl	r2, r8, #10
   24160:	umull	r0, r1, lr, r9
   24164:	bge	24170 <__assert_fail@plt+0x12ec8>
   24168:	subs	r0, r0, ip
   2416c:	sbc	r1, r1, lr
   24170:	adds	r3, r0, r3
   24174:	mov	lr, #0
   24178:	adc	r1, r1, lr
   2417c:	cmp	r1, r3, asr #31
   24180:	lslne	r3, r9, #10
   24184:	movne	ip, #1
   24188:	lslne	r2, r8, #10
   2418c:	orrne	r3, r3, r8, lsr #22
   24190:	b	23a88 <__assert_fail@plt+0x127e0>
   24194:	umull	r2, r3, r8, fp
   24198:	cmp	r9, #0
   2419c:	strd	r2, [sp, #16]
   241a0:	umull	r2, r3, fp, r9
   241a4:	bge	241b0 <__assert_fail@plt+0x12f08>
   241a8:	subs	r2, r2, r1
   241ac:	sbc	r3, r3, fp
   241b0:	ldr	r0, [sp, #20]
   241b4:	mov	ip, #0
   241b8:	adds	r0, r2, r0
   241bc:	adc	ip, r3, ip
   241c0:	cmp	ip, r0, asr #31
   241c4:	bne	243a8 <__assert_fail@plt+0x13100>
   241c8:	mov	r3, r0
   241cc:	ldr	lr, [sp, #16]
   241d0:	b	23bb4 <__assert_fail@plt+0x1290c>
   241d4:	mov	lr, #2
   241d8:	mov	r3, #0
   241dc:	adds	ip, r8, r8
   241e0:	adc	r0, r3, r3
   241e4:	umull	r2, r3, lr, r9
   241e8:	cmp	r9, #0
   241ec:	strd	r2, [sp, #8]
   241f0:	bge	24208 <__assert_fail@plt+0x12f60>
   241f4:	subs	r3, r2, r1
   241f8:	str	r3, [sp, #8]
   241fc:	ldr	r3, [sp, #12]
   24200:	sbc	r3, r3, lr
   24204:	str	r3, [sp, #12]
   24208:	ldrd	sl, [sp, #8]
   2420c:	mov	lr, #0
   24210:	adds	r2, sl, r0
   24214:	adc	r3, fp, lr
   24218:	cmp	r3, r2, asr #31
   2421c:	bne	242b8 <__assert_fail@plt+0x13010>
   24220:	mov	r3, r2
   24224:	b	23aec <__assert_fail@plt+0x12844>
   24228:	cmp	r3, #0
   2422c:	umull	r8, r9, lr, fp
   24230:	umull	r2, r3, fp, r3
   24234:	strd	r2, [sp, #16]
   24238:	strd	r8, [sp, #24]
   2423c:	bge	24254 <__assert_fail@plt+0x12fac>
   24240:	subs	r3, r2, ip
   24244:	str	r3, [sp, #16]
   24248:	ldr	r3, [sp, #20]
   2424c:	sbc	r3, r3, fp
   24250:	str	r3, [sp, #20]
   24254:	ldr	r3, [sp, #16]
   24258:	mov	lr, #0
   2425c:	ldrd	sl, [sp, #24]
   24260:	adds	r2, r3, fp
   24264:	ldr	r3, [sp, #20]
   24268:	adc	lr, r3, lr
   2426c:	cmp	lr, r2, asr #31
   24270:	beq	23bd8 <__assert_fail@plt+0x12930>
   24274:	ldrd	r8, [sp, #8]
   24278:	mov	ip, #1
   2427c:	mul	lr, r0, r9
   24280:	umull	r2, r3, r0, r8
   24284:	mla	lr, r8, r1, lr
   24288:	mov	sl, r2
   2428c:	add	r3, lr, r3
   24290:	mov	r2, r3
   24294:	b	23bd8 <__assert_fail@plt+0x12930>
   24298:	movw	r3, #23604	; 0x5c34
   2429c:	movt	r3, #2
   242a0:	movw	r1, #23616	; 0x5c40
   242a4:	movt	r1, #2
   242a8:	movw	r0, #23632	; 0x5c50
   242ac:	movt	r0, #2
   242b0:	mov	r2, #85	; 0x55
   242b4:	bl	112a8 <__assert_fail@plt>
   242b8:	adds	ip, r8, r8
   242bc:	mov	r1, #1
   242c0:	adc	r3, r9, r9
   242c4:	b	23aec <__assert_fail@plt+0x12844>
   242c8:	ldrd	r4, [sp, #8]
   242cc:	mov	r1, #1
   242d0:	mul	sl, r8, r5
   242d4:	umull	r2, r3, r8, r4
   242d8:	mla	sl, r4, r9, sl
   242dc:	mov	fp, r2
   242e0:	add	r2, sl, r3
   242e4:	b	23de0 <__assert_fail@plt+0x12b38>
   242e8:	ldrd	r4, [sp, #8]
   242ec:	mov	r1, #1
   242f0:	mul	sl, r8, r5
   242f4:	umull	r2, r3, r8, r4
   242f8:	mla	sl, r4, r9, sl
   242fc:	mov	fp, r2
   24300:	add	r2, sl, r3
   24304:	b	23cf0 <__assert_fail@plt+0x12a48>
   24308:	ldrd	r4, [sp, #8]
   2430c:	mov	r1, #1
   24310:	mul	sl, r8, r5
   24314:	umull	r2, r3, r8, r4
   24318:	mla	sl, r4, r9, sl
   2431c:	mov	fp, r2
   24320:	add	r2, sl, r3
   24324:	b	23e58 <__assert_fail@plt+0x12bb0>
   24328:	ldrd	r4, [sp, #8]
   2432c:	mov	r1, #1
   24330:	mul	sl, r8, r5
   24334:	umull	r2, r3, r8, r4
   24338:	mla	sl, r4, r9, sl
   2433c:	mov	fp, r2
   24340:	add	r2, sl, r3
   24344:	b	23c78 <__assert_fail@plt+0x129d0>
   24348:	ldrd	r4, [sp, #8]
   2434c:	mov	r1, #1
   24350:	mul	sl, r8, r5
   24354:	umull	r2, r3, r8, r4
   24358:	mla	sl, r4, r9, sl
   2435c:	mov	fp, r2
   24360:	add	r2, sl, r3
   24364:	b	23b68 <__assert_fail@plt+0x128c0>
   24368:	ldrd	r4, [sp, #8]
   2436c:	mov	r1, #1
   24370:	mul	sl, r8, r5
   24374:	umull	r2, r3, r8, r4
   24378:	mla	sl, r4, r9, sl
   2437c:	mov	fp, r2
   24380:	add	r2, sl, r3
   24384:	b	23d68 <__assert_fail@plt+0x12ac0>
   24388:	ldrd	sl, [sp, #8]
   2438c:	mov	ip, #1
   24390:	mul	r1, r8, fp
   24394:	umull	r2, r3, r8, sl
   24398:	mla	r0, sl, r9, r1
   2439c:	mov	r1, r2
   243a0:	add	r2, r0, r3
   243a4:	b	23c14 <__assert_fail@plt+0x1296c>
   243a8:	ldrd	r2, [sp, #8]
   243ac:	mov	r1, #1
   243b0:	ldr	ip, [sp, #8]
   243b4:	mul	r0, r8, r3
   243b8:	umull	r2, r3, r8, r2
   243bc:	mla	r0, ip, r9, r0
   243c0:	mov	lr, r2
   243c4:	add	r3, r0, r3
   243c8:	b	23bb4 <__assert_fail@plt+0x1290c>
   243cc:	cmp	r1, #0
   243d0:	cmpne	r0, #0
   243d4:	beq	24420 <__assert_fail@plt+0x13178>
   243d8:	strd	r4, [sp, #-16]!
   243dc:	umull	r4, r5, r0, r1
   243e0:	str	r6, [sp, #8]
   243e4:	str	lr, [sp, #12]
   243e8:	adds	r3, r5, #0
   243ec:	movne	r3, #1
   243f0:	cmp	r4, #0
   243f4:	blt	24400 <__assert_fail@plt+0x13158>
   243f8:	cmp	r3, #0
   243fc:	beq	2442c <__assert_fail@plt+0x13184>
   24400:	bl	111a0 <__errno_location@plt>
   24404:	mov	r3, #12
   24408:	ldrd	r4, [sp]
   2440c:	ldr	r6, [sp, #8]
   24410:	add	sp, sp, #12
   24414:	str	r3, [r0]
   24418:	mov	r0, #0
   2441c:	pop	{pc}		; (ldr pc, [sp], #4)
   24420:	mov	r1, #1
   24424:	mov	r0, r1
   24428:	b	10f9c <calloc@plt>
   2442c:	ldrd	r4, [sp]
   24430:	ldr	r6, [sp, #8]
   24434:	ldr	lr, [sp, #12]
   24438:	add	sp, sp, #16
   2443c:	b	10f9c <calloc@plt>
   24440:	cmp	r0, #0
   24444:	beq	24450 <__assert_fail@plt+0x131a8>
   24448:	blt	24458 <__assert_fail@plt+0x131b0>
   2444c:	b	1111c <malloc@plt>
   24450:	mov	r0, #1
   24454:	b	1111c <malloc@plt>
   24458:	str	r4, [sp, #-8]!
   2445c:	str	lr, [sp, #4]
   24460:	bl	111a0 <__errno_location@plt>
   24464:	mov	r3, #12
   24468:	ldr	r4, [sp]
   2446c:	add	sp, sp, #4
   24470:	str	r3, [r0]
   24474:	mov	r0, #0
   24478:	pop	{pc}		; (ldr pc, [sp], #4)
   2447c:	cmp	r0, #0
   24480:	beq	244a8 <__assert_fail@plt+0x13200>
   24484:	cmp	r1, #0
   24488:	str	r4, [sp, #-8]!
   2448c:	str	lr, [sp, #4]
   24490:	beq	244b0 <__assert_fail@plt+0x13208>
   24494:	blt	244c4 <__assert_fail@plt+0x1321c>
   24498:	ldr	r4, [sp]
   2449c:	ldr	lr, [sp, #4]
   244a0:	add	sp, sp, #8
   244a4:	b	110a4 <realloc@plt>
   244a8:	mov	r0, r1
   244ac:	b	24440 <__assert_fail@plt+0x13198>
   244b0:	bl	24628 <__assert_fail@plt+0x13380>
   244b4:	ldr	r4, [sp]
   244b8:	add	sp, sp, #4
   244bc:	mov	r0, #0
   244c0:	pop	{pc}		; (ldr pc, [sp], #4)
   244c4:	bl	111a0 <__errno_location@plt>
   244c8:	mov	r3, #12
   244cc:	str	r3, [r0]
   244d0:	b	244b4 <__assert_fail@plt+0x1320c>
   244d4:	strd	r4, [sp, #-16]!
   244d8:	mov	r4, r0
   244dc:	str	r6, [sp, #8]
   244e0:	str	lr, [sp, #12]
   244e4:	bl	110f8 <__fpending@plt>
   244e8:	ldr	r5, [r4]
   244ec:	mov	r6, r0
   244f0:	mov	r0, r4
   244f4:	bl	1271c <__assert_fail@plt+0x1474>
   244f8:	mov	r4, r0
   244fc:	and	r5, r5, #32
   24500:	cmp	r5, #0
   24504:	bne	2453c <__assert_fail@plt+0x13294>
   24508:	cmp	r0, #0
   2450c:	beq	24528 <__assert_fail@plt+0x13280>
   24510:	cmp	r6, #0
   24514:	bne	24554 <__assert_fail@plt+0x132ac>
   24518:	bl	111a0 <__errno_location@plt>
   2451c:	ldr	r4, [r0]
   24520:	subs	r4, r4, #9
   24524:	mvnne	r4, #0
   24528:	mov	r0, r4
   2452c:	ldrd	r4, [sp]
   24530:	ldr	r6, [sp, #8]
   24534:	add	sp, sp, #12
   24538:	pop	{pc}		; (ldr pc, [sp], #4)
   2453c:	cmp	r0, #0
   24540:	bne	24554 <__assert_fail@plt+0x132ac>
   24544:	bl	111a0 <__errno_location@plt>
   24548:	str	r4, [r0]
   2454c:	mvn	r4, #0
   24550:	b	24528 <__assert_fail@plt+0x13280>
   24554:	mvn	r4, #0
   24558:	b	24528 <__assert_fail@plt+0x13280>
   2455c:	ldr	ip, [r0, #4]
   24560:	cmp	ip, r1
   24564:	bcs	245d0 <__assert_fail@plt+0x13328>
   24568:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2456c:	mov	r5, r1
   24570:	mov	r4, r0
   24574:	strd	r6, [sp, #8]
   24578:	umull	r6, r7, r1, r3
   2457c:	str	r8, [sp, #16]
   24580:	mov	r8, r3
   24584:	str	lr, [sp, #20]
   24588:	cmp	r7, #0
   2458c:	bne	24614 <__assert_fail@plt+0x1336c>
   24590:	ldr	r0, [r0, #8]
   24594:	cmp	r0, r2
   24598:	beq	245e0 <__assert_fail@plt+0x13338>
   2459c:	mov	r1, r6
   245a0:	bl	2447c <__assert_fail@plt+0x131d4>
   245a4:	subs	r6, r0, #0
   245a8:	beq	2460c <__assert_fail@plt+0x13364>
   245ac:	mov	r3, #1
   245b0:	str	r5, [r4]
   245b4:	stmib	r4, {r5, r6}
   245b8:	ldrd	r4, [sp]
   245bc:	mov	r0, r3
   245c0:	ldrd	r6, [sp, #8]
   245c4:	ldr	r8, [sp, #16]
   245c8:	add	sp, sp, #20
   245cc:	pop	{pc}		; (ldr pc, [sp], #4)
   245d0:	mov	r3, #1
   245d4:	str	r1, [r0]
   245d8:	mov	r0, r3
   245dc:	bx	lr
   245e0:	mov	r0, r6
   245e4:	bl	24440 <__assert_fail@plt+0x13198>
   245e8:	subs	r6, r0, #0
   245ec:	beq	2460c <__assert_fail@plt+0x13364>
   245f0:	ldr	r1, [r4, #8]
   245f4:	cmp	r1, #0
   245f8:	beq	245ac <__assert_fail@plt+0x13304>
   245fc:	ldr	r2, [r4]
   24600:	mul	r2, r2, r8
   24604:	bl	11038 <memcpy@plt>
   24608:	b	245ac <__assert_fail@plt+0x13304>
   2460c:	mov	r3, #0
   24610:	b	245b8 <__assert_fail@plt+0x13310>
   24614:	bl	111a0 <__errno_location@plt>
   24618:	mov	r2, #12
   2461c:	mov	r3, #0
   24620:	str	r2, [r0]
   24624:	b	245b8 <__assert_fail@plt+0x13310>
   24628:	strd	r4, [sp, #-12]!
   2462c:	mov	r5, r0
   24630:	str	lr, [sp, #8]
   24634:	sub	sp, sp, #12
   24638:	bl	111a0 <__errno_location@plt>
   2463c:	mov	r4, r0
   24640:	mov	r2, #0
   24644:	ldr	r3, [r4]
   24648:	mov	r0, r5
   2464c:	str	r2, [r4]
   24650:	str	r3, [sp]
   24654:	str	r3, [sp, #4]
   24658:	bl	11014 <free@plt>
   2465c:	ldr	r3, [r4]
   24660:	add	r2, sp, #8
   24664:	clz	r3, r3
   24668:	lsr	r3, r3, #5
   2466c:	add	r3, r2, r3, lsl #2
   24670:	ldr	r3, [r3, #-8]
   24674:	str	r3, [r4]
   24678:	add	sp, sp, #12
   2467c:	ldrd	r4, [sp]
   24680:	add	sp, sp, #8
   24684:	pop	{pc}		; (ldr pc, [sp], #4)
   24688:	mov	r0, #14
   2468c:	str	r4, [sp, #-8]!
   24690:	str	lr, [sp, #4]
   24694:	bl	11248 <nl_langinfo@plt>
   24698:	cmp	r0, #0
   2469c:	beq	246c0 <__assert_fail@plt+0x13418>
   246a0:	ldrb	r2, [r0]
   246a4:	movw	r3, #23672	; 0x5c78
   246a8:	movt	r3, #2
   246ac:	ldr	r4, [sp]
   246b0:	add	sp, sp, #4
   246b4:	cmp	r2, #0
   246b8:	moveq	r0, r3
   246bc:	pop	{pc}		; (ldr pc, [sp], #4)
   246c0:	ldr	r4, [sp]
   246c4:	add	sp, sp, #4
   246c8:	movw	r0, #23672	; 0x5c78
   246cc:	movt	r0, #2
   246d0:	pop	{pc}		; (ldr pc, [sp], #4)
   246d4:	strd	r4, [sp, #-20]!	; 0xffffffec
   246d8:	mov	r5, r2
   246dc:	strd	r6, [sp, #8]
   246e0:	subs	r6, r0, #0
   246e4:	mov	r7, r1
   246e8:	str	lr, [sp, #16]
   246ec:	sub	sp, sp, #12
   246f0:	addeq	r6, sp, #4
   246f4:	mov	r0, r6
   246f8:	bl	11104 <mbrtowc@plt>
   246fc:	cmp	r5, #0
   24700:	cmnne	r0, #3
   24704:	mov	r4, r0
   24708:	bhi	24724 <__assert_fail@plt+0x1347c>
   2470c:	mov	r0, r4
   24710:	add	sp, sp, #12
   24714:	ldrd	r4, [sp]
   24718:	ldrd	r6, [sp, #8]
   2471c:	add	sp, sp, #16
   24720:	pop	{pc}		; (ldr pc, [sp], #4)
   24724:	mov	r0, #0
   24728:	bl	2477c <__assert_fail@plt+0x134d4>
   2472c:	cmp	r0, #0
   24730:	bne	2470c <__assert_fail@plt+0x13464>
   24734:	ldrb	r3, [r7]
   24738:	mov	r4, #1
   2473c:	str	r3, [r6]
   24740:	b	2470c <__assert_fail@plt+0x13464>
   24744:	umull	r2, r3, r1, r2
   24748:	cmp	r3, #0
   2474c:	bne	24758 <__assert_fail@plt+0x134b0>
   24750:	mov	r1, r2
   24754:	b	2447c <__assert_fail@plt+0x131d4>
   24758:	str	r4, [sp, #-8]!
   2475c:	str	lr, [sp, #4]
   24760:	bl	111a0 <__errno_location@plt>
   24764:	mov	r3, #12
   24768:	ldr	r4, [sp]
   2476c:	add	sp, sp, #4
   24770:	str	r3, [r0]
   24774:	mov	r0, #0
   24778:	pop	{pc}		; (ldr pc, [sp], #4)
   2477c:	push	{lr}		; (str lr, [sp, #-4]!)
   24780:	sub	sp, sp, #268	; 0x10c
   24784:	movw	r2, #257	; 0x101
   24788:	add	r1, sp, #4
   2478c:	bl	247d4 <__assert_fail@plt+0x1352c>
   24790:	cmp	r0, #0
   24794:	movne	r0, #0
   24798:	bne	247cc <__assert_fail@plt+0x13524>
   2479c:	movw	r1, #23680	; 0x5c80
   247a0:	movt	r1, #2
   247a4:	add	r0, sp, #4
   247a8:	bl	10fd8 <strcmp@plt>
   247ac:	cmp	r0, #0
   247b0:	beq	247cc <__assert_fail@plt+0x13524>
   247b4:	add	r0, sp, #4
   247b8:	movw	r1, #23684	; 0x5c84
   247bc:	movt	r1, #2
   247c0:	bl	10fd8 <strcmp@plt>
   247c4:	adds	r0, r0, #0
   247c8:	movne	r0, #1
   247cc:	add	sp, sp, #268	; 0x10c
   247d0:	pop	{pc}		; (ldr pc, [sp], #4)
   247d4:	strd	r4, [sp, #-16]!
   247d8:	mov	r5, r1
   247dc:	mov	r1, #0
   247e0:	mov	r4, r2
   247e4:	str	r6, [sp, #8]
   247e8:	str	lr, [sp, #12]
   247ec:	bl	11230 <setlocale@plt>
   247f0:	subs	r6, r0, #0
   247f4:	beq	24874 <__assert_fail@plt+0x135cc>
   247f8:	bl	11188 <strlen@plt>
   247fc:	cmp	r4, r0
   24800:	bhi	24820 <__assert_fail@plt+0x13578>
   24804:	cmp	r4, #0
   24808:	moveq	r0, #34	; 0x22
   2480c:	bne	24844 <__assert_fail@plt+0x1359c>
   24810:	ldrd	r4, [sp]
   24814:	ldr	r6, [sp, #8]
   24818:	add	sp, sp, #12
   2481c:	pop	{pc}		; (ldr pc, [sp], #4)
   24820:	add	r2, r0, #1
   24824:	mov	r1, r6
   24828:	mov	r0, r5
   2482c:	bl	11038 <memcpy@plt>
   24830:	ldrd	r4, [sp]
   24834:	mov	r0, #0
   24838:	ldr	r6, [sp, #8]
   2483c:	add	sp, sp, #12
   24840:	pop	{pc}		; (ldr pc, [sp], #4)
   24844:	sub	r4, r4, #1
   24848:	mov	r1, r6
   2484c:	mov	r2, r4
   24850:	mov	r0, r5
   24854:	bl	11038 <memcpy@plt>
   24858:	mov	r3, #0
   2485c:	mov	r0, #34	; 0x22
   24860:	strb	r3, [r5, r4]
   24864:	ldrd	r4, [sp]
   24868:	ldr	r6, [sp, #8]
   2486c:	add	sp, sp, #12
   24870:	pop	{pc}		; (ldr pc, [sp], #4)
   24874:	cmp	r4, #0
   24878:	mov	r0, #22
   2487c:	strbne	r6, [r5]
   24880:	ldrd	r4, [sp]
   24884:	ldr	r6, [sp, #8]
   24888:	add	sp, sp, #12
   2488c:	pop	{pc}		; (ldr pc, [sp], #4)
   24890:	mov	r1, #0
   24894:	b	11230 <setlocale@plt>
   24898:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2489c:	mov	r7, r0
   248a0:	ldr	r6, [pc, #72]	; 248f0 <__assert_fail@plt+0x13648>
   248a4:	ldr	r5, [pc, #72]	; 248f4 <__assert_fail@plt+0x1364c>
   248a8:	add	r6, pc, r6
   248ac:	add	r5, pc, r5
   248b0:	sub	r6, r6, r5
   248b4:	mov	r8, r1
   248b8:	mov	r9, r2
   248bc:	bl	10f70 <pthread_mutex_unlock@plt-0x20>
   248c0:	asrs	r6, r6, #2
   248c4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   248c8:	mov	r4, #0
   248cc:	add	r4, r4, #1
   248d0:	ldr	r3, [r5], #4
   248d4:	mov	r2, r9
   248d8:	mov	r1, r8
   248dc:	mov	r0, r7
   248e0:	blx	r3
   248e4:	cmp	r6, r4
   248e8:	bne	248cc <__assert_fail@plt+0x13624>
   248ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   248f0:	andeq	r1, r1, r4, ror #12
   248f4:	andeq	r1, r1, ip, asr r6
   248f8:	bx	lr
   248fc:	ldr	r3, [pc, #12]	; 24910 <__assert_fail@plt+0x13668>
   24900:	mov	r1, #0
   24904:	add	r3, pc, r3
   24908:	ldr	r2, [r3]
   2490c:	b	111b8 <__cxa_atexit@plt>
   24910:	andeq	r1, r1, r8, lsl r8

Disassembly of section .fini:

00024914 <.fini>:
   24914:	push	{r3, lr}
   24918:	pop	{r3, pc}
