
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/load_test:     file format elf32-littlearm


Disassembly of section .init:

00011f40 <.init>:
   11f40:	push	{r3, lr}
   11f44:	bl	124fc <_start@@Base+0x3c>
   11f48:	pop	{r3, pc}

Disassembly of section .plt:

00011f4c <strcmp@plt-0x14>:
   11f4c:	push	{lr}		; (str lr, [sp, #-4]!)
   11f50:	ldr	lr, [pc, #4]	; 11f5c <strcmp@plt-0x4>
   11f54:	add	lr, pc, lr
   11f58:	ldr	pc, [lr, #8]!
   11f5c:	andeq	r5, r1, r4, lsr #1

00011f60 <strcmp@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #86016	; 0x15000
   11f68:	ldr	pc, [ip, #164]!	; 0xa4

00011f6c <printf@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #86016	; 0x15000
   11f74:	ldr	pc, [ip, #156]!	; 0x9c

00011f78 <fopen@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #86016	; 0x15000
   11f80:	ldr	pc, [ip, #148]!	; 0x94

00011f84 <free@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #86016	; 0x15000
   11f8c:	ldr	pc, [ip, #140]!	; 0x8c

00011f90 <memcpy@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #86016	; 0x15000
   11f98:	ldr	pc, [ip, #132]!	; 0x84

00011f9c <memcmp@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #86016	; 0x15000
   11fa4:	ldr	pc, [ip, #124]!	; 0x7c

00011fa8 <realloc@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #86016	; 0x15000
   11fb0:	ldr	pc, [ip, #116]!	; 0x74

00011fb4 <fwrite@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #86016	; 0x15000
   11fbc:	ldr	pc, [ip, #108]!	; 0x6c

00011fc0 <gettimeofday@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #86016	; 0x15000
   11fc8:	ldr	pc, [ip, #100]!	; 0x64

00011fcc <puts@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #86016	; 0x15000
   11fd4:	ldr	pc, [ip, #92]!	; 0x5c

00011fd8 <malloc@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #86016	; 0x15000
   11fe0:	ldr	pc, [ip, #84]!	; 0x54

00011fe4 <__libc_start_main@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #86016	; 0x15000
   11fec:	ldr	pc, [ip, #76]!	; 0x4c

00011ff0 <__gmon_start__@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #86016	; 0x15000
   11ff8:	ldr	pc, [ip, #68]!	; 0x44

00011ffc <strlen@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #86016	; 0x15000
   12004:	ldr	pc, [ip, #60]!	; 0x3c

00012008 <posix_memalign@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #86016	; 0x15000
   12010:	ldr	pc, [ip, #52]!	; 0x34

00012014 <memset@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #86016	; 0x15000
   1201c:	ldr	pc, [ip, #44]!	; 0x2c

00012020 <memchr@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #86016	; 0x15000
   12028:	ldr	pc, [ip, #36]!	; 0x24

0001202c <fclose@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #86016	; 0x15000
   12034:	ldr	pc, [ip, #28]!

00012038 <abort@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #86016	; 0x15000
   12040:	ldr	pc, [ip, #20]!

00012044 <__assert_fail@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #86016	; 0x15000
   1204c:	ldr	pc, [ip, #12]!

Disassembly of section .text:

00012050 <main@@Base>:
   12050:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12054:	vpush	{d8-d10}
   12058:	sub	sp, sp, #252	; 0xfc
   1205c:	add	r0, sp, #16
   12060:	bl	13110 <flatcc_builder_init@@Base>
   12064:	add	r0, sp, #16
   12068:	bl	126e8 <_start@@Base+0x228>
   1206c:	add	r1, sp, #8
   12070:	add	r0, sp, #16
   12074:	bl	15560 <flatcc_builder_finalize_buffer@@Base>
   12078:	mov	r6, r0
   1207c:	ldr	r1, [pc, #956]	; 12440 <main@@Base+0x3f0>
   12080:	ldr	r0, [pc, #956]	; 12444 <main@@Base+0x3f4>
   12084:	bl	11f78 <fopen@plt>
   12088:	subs	r4, r0, #0
   1208c:	beq	12414 <main@@Base+0x3c4>
   12090:	mov	r3, r4
   12094:	mov	r1, #1
   12098:	ldr	r2, [sp, #8]
   1209c:	mov	r0, r6
   120a0:	bl	11fb4 <fwrite@plt>
   120a4:	ldr	r5, [sp, #8]
   120a8:	mov	r7, r0
   120ac:	mov	r0, r4
   120b0:	bl	1202c <fclose@plt>
   120b4:	cmp	r7, r5
   120b8:	movne	r7, #1
   120bc:	bne	123b8 <main@@Base+0x368>
   120c0:	ldr	r0, [pc, #896]	; 12448 <main@@Base+0x3f8>
   120c4:	mov	r9, #10
   120c8:	ldr	r1, [sp, #8]
   120cc:	bl	11f6c <printf@plt>
   120d0:	ldr	r0, [pc, #884]	; 1244c <main@@Base+0x3fc>
   120d4:	bl	11fcc <puts@plt>
   120d8:	ldr	sl, [pc, #880]	; 12450 <main@@Base+0x400>
   120dc:	bl	125b0 <_start@@Base+0xf0>
   120e0:	vmov.f64	d8, d0
   120e4:	add	r0, sp, #16
   120e8:	bl	126e8 <_start@@Base+0x228>
   120ec:	mov	r1, r6
   120f0:	add	r0, sp, #16
   120f4:	ldr	r2, [sp, #8]
   120f8:	bl	15518 <flatcc_builder_copy_buffer@@Base>
   120fc:	ldr	r3, [r6, #4]
   12100:	str	sl, [sp, #12]
   12104:	cmp	r3, sl
   12108:	ldreq	r4, [r6]
   1210c:	movne	r4, #0
   12110:	addeq	r4, r6, r4
   12114:	mov	r0, r4
   12118:	bl	12624 <_start@@Base+0x164>
   1211c:	ldr	r1, [pc, #816]	; 12454 <main@@Base+0x404>
   12120:	bl	11f60 <strcmp@plt>
   12124:	cmp	r0, #0
   12128:	beq	12140 <main@@Base+0xf0>
   1212c:	ldr	r3, [pc, #804]	; 12458 <main@@Base+0x408>
   12130:	mov	r2, #139	; 0x8b
   12134:	ldr	r1, [pc, #800]	; 1245c <main@@Base+0x40c>
   12138:	ldr	r0, [pc, #800]	; 12460 <main@@Base+0x410>
   1213c:	b	12158 <main@@Base+0x108>
   12140:	cmp	r4, #0
   12144:	bne	1215c <main@@Base+0x10c>
   12148:	ldr	r3, [pc, #788]	; 12464 <main@@Base+0x414>
   1214c:	movw	r2, #711	; 0x2c7
   12150:	ldr	r1, [pc, #784]	; 12468 <main@@Base+0x418>
   12154:	ldr	r0, [pc, #784]	; 1246c <main@@Base+0x41c>
   12158:	bl	12044 <__assert_fail@plt>
   1215c:	ldr	r3, [r4]
   12160:	sub	r3, r4, r3
   12164:	ldrh	r2, [r3]
   12168:	cmp	r2, #27
   1216c:	bls	1219c <main@@Base+0x14c>
   12170:	ldrh	r3, [r3, #26]
   12174:	cmp	r3, #0
   12178:	beq	1219c <main@@Base+0x14c>
   1217c:	add	r5, r4, r3
   12180:	ldr	r3, [r4, r3]
   12184:	add	r3, r3, #4
   12188:	adds	r5, r5, r3
   1218c:	beq	1219c <main@@Base+0x14c>
   12190:	ldr	r3, [r5, #-4]
   12194:	cmp	r3, #1000	; 0x3e8
   12198:	beq	121a8 <main@@Base+0x158>
   1219c:	ldr	r3, [pc, #692]	; 12458 <main@@Base+0x408>
   121a0:	mov	r2, #143	; 0x8f
   121a4:	b	12134 <main@@Base+0xe4>
   121a8:	ldr	fp, [pc, #704]	; 12470 <main@@Base+0x420>
   121ac:	add	r3, r5, #4000	; 0xfa0
   121b0:	str	r3, [sp]
   121b4:	mov	r4, r5
   121b8:	add	r5, r5, #4
   121bc:	ldr	r8, [r4]
   121c0:	add	r7, r4, r8
   121c4:	mov	r0, r7
   121c8:	bl	12624 <_start@@Base+0x164>
   121cc:	cmp	r7, #0
   121d0:	mov	r3, r0
   121d4:	ldreq	r3, [pc, #664]	; 12474 <main@@Base+0x424>
   121d8:	movweq	r2, #706	; 0x2c2
   121dc:	beq	12150 <main@@Base+0x100>
   121e0:	ldr	r2, [r4, r8]
   121e4:	sub	r2, r7, r2
   121e8:	ldrh	r1, [r2]
   121ec:	cmp	r1, #15
   121f0:	movls	r4, #0
   121f4:	bls	12210 <main@@Base+0x1c0>
   121f8:	ldrh	r4, [r2, #14]
   121fc:	cmp	r4, #0
   12200:	addne	r2, r7, r4
   12204:	ldrne	r4, [r7, r4]
   12208:	addne	r4, r4, #4
   1220c:	addne	r4, r2, r4
   12210:	cmp	r3, #0
   12214:	beq	12224 <main@@Base+0x1d4>
   12218:	ldr	r2, [r3, #-4]
   1221c:	cmp	r2, #700	; 0x2bc
   12220:	beq	12238 <main@@Base+0x1e8>
   12224:	ldr	r3, [pc, #588]	; 12478 <main@@Base+0x428>
   12228:	mov	r2, #74	; 0x4a
   1222c:	ldr	r1, [pc, #552]	; 1245c <main@@Base+0x40c>
   12230:	ldr	r0, [pc, #580]	; 1247c <main@@Base+0x42c>
   12234:	b	12158 <main@@Base+0x108>
   12238:	cmp	r4, #0
   1223c:	beq	12250 <main@@Base+0x200>
   12240:	ldr	r1, [pc, #568]	; 12480 <main@@Base+0x430>
   12244:	ldr	r2, [r4, #-4]
   12248:	cmp	r2, r1
   1224c:	beq	1225c <main@@Base+0x20c>
   12250:	ldr	r3, [pc, #544]	; 12478 <main@@Base+0x428>
   12254:	mov	r2, #78	; 0x4e
   12258:	b	1222c <main@@Base+0x1dc>
   1225c:	mov	r7, #0
   12260:	rsb	r8, r7, r7, lsl #3
   12264:	mov	r2, #7
   12268:	ldr	r1, [pc, #532]	; 12484 <main@@Base+0x434>
   1226c:	str	r3, [sp, #4]
   12270:	add	r8, r3, r8
   12274:	mov	r0, r8
   12278:	bl	11f9c <memcmp@plt>
   1227c:	cmp	r0, #0
   12280:	ldr	r3, [sp, #4]
   12284:	beq	122b0 <main@@Base+0x260>
   12288:	mov	r2, r3
   1228c:	mov	r1, r7
   12290:	ldr	r0, [pc, #496]	; 12488 <main@@Base+0x438>
   12294:	bl	11f6c <printf@plt>
   12298:	sub	r1, r8, r6
   1229c:	ldr	r0, [pc, #488]	; 1248c <main@@Base+0x43c>
   122a0:	bl	11f6c <printf@plt>
   122a4:	ldr	r3, [pc, #460]	; 12478 <main@@Base+0x428>
   122a8:	mov	r2, #85	; 0x55
   122ac:	b	1222c <main@@Base+0x1dc>
   122b0:	add	r7, r7, #1
   122b4:	cmp	r7, #100	; 0x64
   122b8:	bne	12260 <main@@Base+0x210>
   122bc:	add	r8, r4, #99328	; 0x18400
   122c0:	add	r8, r8, #672	; 0x2a0
   122c4:	mov	r2, #1000	; 0x3e8
   122c8:	mov	r1, fp
   122cc:	mov	r0, r4
   122d0:	bl	11f9c <memcmp@plt>
   122d4:	subs	r7, r0, #0
   122d8:	ldrne	r3, [pc, #408]	; 12478 <main@@Base+0x428>
   122dc:	movne	r2, #91	; 0x5b
   122e0:	bne	1222c <main@@Base+0x1dc>
   122e4:	add	r4, r4, #1000	; 0x3e8
   122e8:	cmp	r4, r8
   122ec:	bne	122c4 <main@@Base+0x274>
   122f0:	ldr	r3, [sp]
   122f4:	cmp	r5, r3
   122f8:	bne	121b4 <main@@Base+0x164>
   122fc:	subs	r9, r9, #1
   12300:	bne	120e4 <main@@Base+0x94>
   12304:	bl	125b0 <_start@@Base+0xf0>
   12308:	vsub.f64	d8, d0, d8
   1230c:	ldr	r4, [sp, #8]
   12310:	ldr	r1, [pc, #376]	; 12490 <main@@Base+0x440>
   12314:	ldr	r0, [pc, #376]	; 12494 <main@@Base+0x444>
   12318:	bl	11f6c <printf@plt>
   1231c:	vmov	r2, r3, d8
   12320:	ldr	r0, [pc, #368]	; 12498 <main@@Base+0x448>
   12324:	bl	11f6c <printf@plt>
   12328:	mov	r1, #10
   1232c:	ldr	r0, [pc, #360]	; 1249c <main@@Base+0x44c>
   12330:	bl	11f6c <printf@plt>
   12334:	mov	r1, r4
   12338:	ldr	r0, [pc, #352]	; 124a0 <main@@Base+0x450>
   1233c:	bl	11f6c <printf@plt>
   12340:	vmov	s15, r4
   12344:	vldr	d10, [pc, #212]	; 12420 <main@@Base+0x3d0>
   12348:	vldr	d9, [pc, #216]	; 12428 <main@@Base+0x3d8>
   1234c:	ldr	r0, [pc, #336]	; 124a4 <main@@Base+0x454>
   12350:	vcvt.f64.u32	d7, s15
   12354:	vmul.f64	d7, d7, d10
   12358:	vdiv.f64	d6, d7, d9
   1235c:	vdiv.f64	d7, d6, d8
   12360:	vmov	r2, r3, d7
   12364:	bl	11f6c <printf@plt>
   12368:	vdiv.f64	d7, d10, d8
   1236c:	ldr	r0, [pc, #308]	; 124a8 <main@@Base+0x458>
   12370:	vmov	r2, r3, d7
   12374:	bl	11f6c <printf@plt>
   12378:	vldr	d6, [pc, #176]	; 12430 <main@@Base+0x3e0>
   1237c:	vldr	d5, [pc, #180]	; 12438 <main@@Base+0x3e8>
   12380:	vmul.f64	d8, d8, d6
   12384:	vdiv.f64	d7, d8, d10
   12388:	vcmpe.f64	d7, d5
   1238c:	vmrs	APSR_nzcv, fpscr
   12390:	vmovmi	r2, r3, d7
   12394:	ldrmi	r0, [pc, #272]	; 124ac <main@@Base+0x45c>
   12398:	bmi	123b4 <main@@Base+0x364>
   1239c:	vcmpe.f64	d7, d9
   123a0:	vmrs	APSR_nzcv, fpscr
   123a4:	bpl	123e8 <main@@Base+0x398>
   123a8:	vdiv.f64	d7, d7, d5
   123ac:	ldr	r0, [pc, #252]	; 124b0 <main@@Base+0x460>
   123b0:	vmov	r2, r3, d7
   123b4:	bl	11f6c <printf@plt>
   123b8:	add	r0, sp, #16
   123bc:	bl	1328c <flatcc_builder_clear@@Base>
   123c0:	mov	r0, r6
   123c4:	bl	11f84 <free@plt>
   123c8:	cmp	r7, #0
   123cc:	beq	123d8 <main@@Base+0x388>
   123d0:	ldr	r0, [pc, #220]	; 124b4 <main@@Base+0x464>
   123d4:	bl	11fcc <puts@plt>
   123d8:	mov	r0, r7
   123dc:	add	sp, sp, #252	; 0xfc
   123e0:	vpop	{d8-d10}
   123e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123e8:	vcmpe.f64	d7, d6
   123ec:	vmrs	APSR_nzcv, fpscr
   123f0:	bpl	12404 <main@@Base+0x3b4>
   123f4:	vdiv.f64	d7, d7, d9
   123f8:	ldr	r0, [pc, #184]	; 124b8 <main@@Base+0x468>
   123fc:	vmov	r2, r3, d7
   12400:	b	123b4 <main@@Base+0x364>
   12404:	vdiv.f64	d7, d7, d6
   12408:	ldr	r0, [pc, #172]	; 124bc <main@@Base+0x46c>
   1240c:	vmov	r2, r3, d7
   12410:	b	123b4 <main@@Base+0x364>
   12414:	mvn	r7, #0
   12418:	b	123b8 <main@@Base+0x368>
   1241c:	nop	{0}
   12420:	andeq	r0, r0, r0
   12424:	eormi	r0, r4, r0
   12428:	andeq	r0, r0, r0
   1242c:	smlawbmi	lr, r0, r4, r8
   12430:	andeq	r0, r0, r0
   12434:	bicmi	ip, sp, r5, ror #26
   12438:	andeq	r0, r0, r0
   1243c:	addmi	r4, pc, r0
   12440:	andeq	r5, r1, pc, lsr #29
   12444:			; <UNDEFINED> instruction: 0x00015eb2
   12448:	andeq	r5, r1, r8, asr #29
   1244c:	ldrdeq	r5, [r1], -sl
   12450:	movtpl	r4, #61261	; 0xef4d
   12454:	andeq	r5, r1, sl, asr #28
   12458:	andeq	r5, r1, pc, lsr ip
   1245c:	andeq	r5, r1, pc, asr lr
   12460:	andeq	r5, r1, fp, ror #29
   12464:	andeq	r5, r1, r4, asr #24
   12468:	muleq	r1, sp, ip
   1246c:	strdeq	r5, [r1], -ip
   12470:	andeq	r7, r2, r4, ror r0
   12474:	andeq	r5, r1, sp, ror #24
   12478:	andeq	r5, r1, lr, lsl #25
   1247c:	andeq	r6, r1, r9, lsr #15
   12480:	andeq	r8, r1, r0, lsr #13
   12484:	andeq	r5, r1, r7, asr lr
   12488:	strdeq	r5, [r1], -r4
   1248c:	andeq	r5, r1, r4, lsl pc
   12490:	andeq	r5, r1, r1, lsr #30
   12494:	andeq	r5, r1, sl, asr #30
   12498:	andeq	r5, r1, r9, asr pc
   1249c:	andeq	r5, r1, r1, ror pc
   124a0:	andeq	r5, r1, r1, lsl #31
   124a4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   124a8:	andeq	r5, r1, ip, lsr #31
   124ac:	andeq	r5, r1, sp, asr #31
   124b0:	andeq	r5, r1, r5, ror #31
   124b4:	andeq	r6, r1, ip, lsr #32
   124b8:	strdeq	r5, [r1], -sp
   124bc:	andeq	r6, r1, r5, lsl r0

000124c0 <_start@@Base>:
   124c0:	mov	fp, #0
   124c4:	mov	lr, #0
   124c8:	pop	{r1}		; (ldr r1, [sp], #4)
   124cc:	mov	r2, sp
   124d0:	push	{r2}		; (str r2, [sp, #-4]!)
   124d4:	push	{r0}		; (str r0, [sp, #-4]!)
   124d8:	ldr	ip, [pc, #16]	; 124f0 <_start@@Base+0x30>
   124dc:	push	{ip}		; (str ip, [sp, #-4]!)
   124e0:	ldr	r0, [pc, #12]	; 124f4 <_start@@Base+0x34>
   124e4:	ldr	r3, [pc, #12]	; 124f8 <_start@@Base+0x38>
   124e8:	bl	11fe4 <__libc_start_main@plt>
   124ec:	bl	12038 <abort@plt>
   124f0:	ldrdeq	r5, [r1], -r0
   124f4:	andeq	r2, r1, r0, asr r0
   124f8:	andeq	r5, r1, r0, ror fp
   124fc:	ldr	r3, [pc, #20]	; 12518 <_start@@Base+0x58>
   12500:	ldr	r2, [pc, #20]	; 1251c <_start@@Base+0x5c>
   12504:	add	r3, pc, r3
   12508:	ldr	r2, [r3, r2]
   1250c:	cmp	r2, #0
   12510:	bxeq	lr
   12514:	b	11ff0 <__gmon_start__@plt>
   12518:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1251c:	andeq	r0, r0, ip, asr r0
   12520:	ldr	r0, [pc, #24]	; 12540 <_start@@Base+0x80>
   12524:	ldr	r3, [pc, #24]	; 12544 <_start@@Base+0x84>
   12528:	cmp	r3, r0
   1252c:	bxeq	lr
   12530:	ldr	r3, [pc, #16]	; 12548 <_start@@Base+0x88>
   12534:	cmp	r3, #0
   12538:	bxeq	lr
   1253c:	bx	r3
   12540:	andeq	r7, r2, r8, rrx
   12544:	andeq	r7, r2, r8, rrx
   12548:	andeq	r0, r0, r0
   1254c:	ldr	r0, [pc, #36]	; 12578 <_start@@Base+0xb8>
   12550:	ldr	r1, [pc, #36]	; 1257c <_start@@Base+0xbc>
   12554:	sub	r1, r1, r0
   12558:	asr	r1, r1, #2
   1255c:	add	r1, r1, r1, lsr #31
   12560:	asrs	r1, r1, #1
   12564:	bxeq	lr
   12568:	ldr	r3, [pc, #16]	; 12580 <_start@@Base+0xc0>
   1256c:	cmp	r3, #0
   12570:	bxeq	lr
   12574:	bx	r3
   12578:	andeq	r7, r2, r8, rrx
   1257c:	andeq	r7, r2, r8, rrx
   12580:	andeq	r0, r0, r0
   12584:	push	{r4, lr}
   12588:	ldr	r4, [pc, #24]	; 125a8 <_start@@Base+0xe8>
   1258c:	ldrb	r3, [r4]
   12590:	cmp	r3, #0
   12594:	popne	{r4, pc}
   12598:	bl	12520 <_start@@Base+0x60>
   1259c:	mov	r3, #1
   125a0:	strb	r3, [r4]
   125a4:	pop	{r4, pc}
   125a8:	andeq	r7, r2, r8, rrx
   125ac:	b	1254c <_start@@Base+0x8c>
   125b0:	push	{r0, r1, r4, lr}
   125b4:	mov	r4, sp
   125b8:	mov	r1, #0
   125bc:	mov	r0, r4
   125c0:	bl	11fc0 <gettimeofday@plt>
   125c4:	ldr	r3, [pc, #84]	; 12620 <_start@@Base+0x160>
   125c8:	vldr	d5, [pc, #72]	; 12618 <_start@@Base+0x158>
   125cc:	ldr	r2, [r3]
   125d0:	cmp	r2, #0
   125d4:	ldr	r2, [sp, #4]
   125d8:	ldmeq	r4, {r0, r1}
   125dc:	stmeq	r3, {r0, r1}
   125e0:	ldr	r1, [r3, #4]
   125e4:	sub	r2, r2, r1
   125e8:	vmov	s15, r2
   125ec:	ldr	r2, [r3]
   125f0:	ldr	r3, [sp]
   125f4:	sub	r3, r3, r2
   125f8:	vcvt.f64.s32	d7, s15
   125fc:	vmov	s0, r3
   12600:	vdiv.f64	d6, d7, d5
   12604:	vcvt.f64.s32	d0, s0
   12608:	vadd.f64	d0, d6, d0
   1260c:	add	sp, sp, #8
   12610:	pop	{r4, pc}
   12614:	nop	{0}
   12618:	andeq	r0, r0, r0
   1261c:	smlawbmi	lr, r0, r4, r8
   12620:	andeq	r7, r2, ip, rrx
   12624:	cmp	r0, #0
   12628:	push	{r4, lr}
   1262c:	bne	12644 <_start@@Base+0x184>
   12630:	ldr	r3, [pc, #84]	; 1268c <_start@@Base+0x1cc>
   12634:	movw	r2, #699	; 0x2bb
   12638:	ldr	r1, [pc, #80]	; 12690 <_start@@Base+0x1d0>
   1263c:	ldr	r0, [pc, #80]	; 12694 <_start@@Base+0x1d4>
   12640:	bl	12044 <__assert_fail@plt>
   12644:	ldr	r3, [r0]
   12648:	sub	r3, r0, r3
   1264c:	ldrh	r2, [r3]
   12650:	cmp	r2, #11
   12654:	bls	12664 <_start@@Base+0x1a4>
   12658:	ldrh	r2, [r3, #10]
   1265c:	cmp	r2, #0
   12660:	bne	12678 <_start@@Base+0x1b8>
   12664:	ldr	r3, [pc, #32]	; 1268c <_start@@Base+0x1cc>
   12668:	movw	r2, #699	; 0x2bb
   1266c:	ldr	r1, [pc, #28]	; 12690 <_start@@Base+0x1d0>
   12670:	ldr	r0, [pc, #32]	; 12698 <_start@@Base+0x1d8>
   12674:	b	12640 <_start@@Base+0x180>
   12678:	add	r3, r0, r2
   1267c:	ldr	r0, [r0, r2]
   12680:	add	r0, r0, #4
   12684:	add	r0, r3, r0
   12688:	pop	{r4, pc}
   1268c:	andeq	r5, r1, r0, ror #23
   12690:	muleq	r1, sp, ip
   12694:	strdeq	r5, [r1], -ip
   12698:	andeq	r5, r1, r2, lsr #26
   1269c:	push	{r4, lr}
   126a0:	mov	r2, #1
   126a4:	mov	r4, r0
   126a8:	ldr	r1, [pc, #40]	; 126d8 <_start@@Base+0x218>
   126ac:	bl	14578 <flatcc_builder_check_required@@Base>
   126b0:	cmp	r0, #0
   126b4:	bne	126cc <_start@@Base+0x20c>
   126b8:	ldr	r3, [pc, #28]	; 126dc <_start@@Base+0x21c>
   126bc:	mov	r2, #235	; 0xeb
   126c0:	ldr	r1, [pc, #24]	; 126e0 <_start@@Base+0x220>
   126c4:	ldr	r0, [pc, #24]	; 126e4 <_start@@Base+0x224>
   126c8:	bl	12044 <__assert_fail@plt>
   126cc:	mov	r0, r4
   126d0:	pop	{r4, lr}
   126d4:	b	145f4 <flatcc_builder_end_table@@Base>
   126d8:	strdeq	r5, [r1], -ip
   126dc:	andeq	r5, r1, r0, lsl #24
   126e0:	andeq	r5, r1, r3, asr #26
   126e4:	andeq	r5, r1, r3, lsr #27
   126e8:	push	{r4, r5, r6, r7, r8, lr}
   126ec:	mov	r4, r0
   126f0:	bl	13280 <flatcc_builder_reset@@Base>
   126f4:	mov	r3, #0
   126f8:	ldr	r1, [pc, #392]	; 12888 <_start@@Base+0x3c8>
   126fc:	mov	r0, r4
   12700:	mov	r2, r3
   12704:	bl	137f0 <flatcc_builder_start_buffer@@Base>
   12708:	cmp	r0, #0
   1270c:	bne	1271c <_start@@Base+0x25c>
   12710:	mov	r1, #36	; 0x24
   12714:	mov	r0, r4
   12718:	bl	13fcc <flatcc_builder_start_table@@Base>
   1271c:	ldr	r1, [pc, #360]	; 1288c <_start@@Base+0x3cc>
   12720:	mov	r0, r4
   12724:	bl	14e5c <flatcc_builder_create_string_str@@Base>
   12728:	subs	r5, r0, #0
   1272c:	beq	12744 <_start@@Base+0x284>
   12730:	mov	r1, #3
   12734:	mov	r0, r4
   12738:	bl	150f4 <flatcc_builder_table_add_offset@@Base>
   1273c:	cmp	r0, #0
   12740:	strne	r5, [r0]
   12744:	ldr	r8, [pc, #324]	; 12890 <_start@@Base+0x3d0>
   12748:	mov	r0, r4
   1274c:	mov	r5, #1000	; 0x3e8
   12750:	bl	13f0c <flatcc_builder_start_offset_vector@@Base>
   12754:	ldr	r7, [pc, #312]	; 12894 <_start@@Base+0x3d4>
   12758:	mov	r1, #36	; 0x24
   1275c:	mov	r0, r4
   12760:	bl	13fcc <flatcc_builder_start_table@@Base>
   12764:	mov	r6, #100	; 0x64
   12768:	mov	r0, r4
   1276c:	bl	13f54 <flatcc_builder_start_string@@Base>
   12770:	mov	r2, #7
   12774:	mov	r1, r8
   12778:	mov	r0, r4
   1277c:	bl	13c90 <flatcc_builder_append_string@@Base>
   12780:	subs	r6, r6, #1
   12784:	bne	12770 <_start@@Base+0x2b0>
   12788:	mov	r0, r4
   1278c:	bl	14ebc <flatcc_builder_end_string@@Base>
   12790:	subs	r6, r0, #0
   12794:	beq	127ac <_start@@Base+0x2ec>
   12798:	mov	r1, #3
   1279c:	mov	r0, r4
   127a0:	bl	150f4 <flatcc_builder_table_add_offset@@Base>
   127a4:	cmp	r0, #0
   127a8:	strne	r6, [r0]
   127ac:	mov	r2, #1
   127b0:	mvn	r3, #0
   127b4:	mov	r1, r2
   127b8:	mov	r0, r4
   127bc:	mov	r6, #100	; 0x64
   127c0:	bl	13eb4 <flatcc_builder_start_vector@@Base>
   127c4:	mov	r2, #1000	; 0x3e8
   127c8:	mov	r1, r7
   127cc:	mov	r0, r4
   127d0:	bl	13aa4 <flatcc_builder_append_vector@@Base>
   127d4:	subs	r6, r6, #1
   127d8:	bne	127c4 <_start@@Base+0x304>
   127dc:	mov	r0, r4
   127e0:	bl	14810 <flatcc_builder_end_vector@@Base>
   127e4:	subs	r6, r0, #0
   127e8:	beq	12800 <_start@@Base+0x340>
   127ec:	mov	r1, #5
   127f0:	mov	r0, r4
   127f4:	bl	150f4 <flatcc_builder_table_add_offset@@Base>
   127f8:	cmp	r0, #0
   127fc:	strne	r6, [r0]
   12800:	mov	r0, r4
   12804:	bl	1269c <_start@@Base+0x1dc>
   12808:	subs	r1, r0, #0
   1280c:	bne	12824 <_start@@Base+0x364>
   12810:	ldr	r3, [pc, #128]	; 12898 <_start@@Base+0x3d8>
   12814:	mov	r2, #42	; 0x2a
   12818:	ldr	r1, [pc, #124]	; 1289c <_start@@Base+0x3dc>
   1281c:	ldr	r0, [pc, #124]	; 128a0 <_start@@Base+0x3e0>
   12820:	bl	12044 <__assert_fail@plt>
   12824:	mov	r0, r4
   12828:	bl	13b54 <flatcc_builder_offset_vector_push@@Base>
   1282c:	subs	r5, r5, #1
   12830:	bne	12758 <_start@@Base+0x298>
   12834:	mov	r0, r4
   12838:	bl	148b0 <flatcc_builder_end_offset_vector@@Base>
   1283c:	subs	r5, r0, #0
   12840:	bne	12858 <_start@@Base+0x398>
   12844:	ldr	r3, [pc, #88]	; 128a4 <_start@@Base+0x3e4>
   12848:	mov	r2, #56	; 0x38
   1284c:	ldr	r1, [pc, #72]	; 1289c <_start@@Base+0x3dc>
   12850:	ldr	r0, [pc, #80]	; 128a8 <_start@@Base+0x3e8>
   12854:	b	12820 <_start@@Base+0x360>
   12858:	mov	r1, #11
   1285c:	mov	r0, r4
   12860:	bl	150f4 <flatcc_builder_table_add_offset@@Base>
   12864:	cmp	r0, #0
   12868:	strne	r5, [r0]
   1286c:	mov	r0, r4
   12870:	bl	1269c <_start@@Base+0x1dc>
   12874:	mov	r1, r0
   12878:	mov	r0, r4
   1287c:	bl	1388c <flatcc_builder_end_buffer@@Base>
   12880:	mov	r0, #0
   12884:	pop	{r4, r5, r6, r7, r8, pc}
   12888:	andeq	r5, r1, r5, asr #28
   1288c:	andeq	r5, r1, sl, asr #28
   12890:	andeq	r5, r1, r7, asr lr
   12894:	andeq	r7, r2, r4, ror r0
   12898:	andeq	r5, r1, fp, lsl ip
   1289c:	andeq	r5, r1, pc, asr lr
   128a0:	andeq	r5, r1, sl, lsr #29
   128a4:	andeq	r5, r1, fp, lsr #24
   128a8:	andeq	r5, r1, ip, lsr #29
   128ac:	ldr	ip, [r0, #28]
   128b0:	ldrd	r2, [r0, #60]	; 0x3c
   128b4:	sub	r3, r3, ip
   128b8:	add	r2, r2, ip
   128bc:	cmp	r3, r1
   128c0:	strls	r3, [r0, #24]
   128c4:	strhi	r1, [r0, #24]
   128c8:	ldr	r3, [r0, #32]
   128cc:	str	r2, [r0, #16]
   128d0:	str	r1, [r3, #4]
   128d4:	bx	lr
   128d8:	push	{r0, r1, r4, r5, r6, lr}
   128dc:	mov	r6, r2
   128e0:	mov	r3, #1
   128e4:	mov	r4, r0
   128e8:	ldr	r2, [r0, #28]
   128ec:	str	r3, [sp]
   128f0:	ldr	r5, [r0, #48]	; 0x30
   128f4:	add	r2, r1, r2
   128f8:	add	r1, r0, #60	; 0x3c
   128fc:	ldr	r0, [r0, #40]	; 0x28
   12900:	blx	r5
   12904:	subs	r5, r0, #0
   12908:	mvnne	r5, #0
   1290c:	bne	1291c <_start@@Base+0x45c>
   12910:	mov	r1, r6
   12914:	mov	r0, r4
   12918:	bl	128ac <_start@@Base+0x3ec>
   1291c:	mov	r0, r5
   12920:	add	sp, sp, #8
   12924:	pop	{r4, r5, r6, pc}
   12928:	push	{r4, r5, r6, lr}
   1292c:	mov	r4, r0
   12930:	ldr	r5, [r0, #20]
   12934:	ldr	r3, [r0, #24]
   12938:	add	r1, r5, r1
   1293c:	cmp	r1, r3
   12940:	str	r1, [r0, #20]
   12944:	bcs	12954 <_start@@Base+0x494>
   12948:	ldr	r0, [r4, #16]
   1294c:	add	r0, r0, r5
   12950:	pop	{r4, r5, r6, pc}
   12954:	mvn	r2, #3
   12958:	add	r1, r1, #1
   1295c:	bl	128d8 <_start@@Base+0x418>
   12960:	cmp	r0, #0
   12964:	beq	12948 <_start@@Base+0x488>
   12968:	mov	r0, #0
   1296c:	pop	{r4, r5, r6, pc}
   12970:	push	{r4, lr}
   12974:	mov	r1, #0
   12978:	mov	r4, r0
   1297c:	ldr	r2, [r0, #20]
   12980:	ldr	r0, [r0, #16]
   12984:	bl	12014 <memset@plt>
   12988:	ldr	r3, [r4, #32]
   1298c:	mov	r0, r4
   12990:	ldmib	r3, {r1, r2}
   12994:	str	r2, [r4, #20]
   12998:	ldr	r2, [r3]
   1299c:	str	r2, [r4, #28]
   129a0:	bl	128ac <_start@@Base+0x3ec>
   129a4:	ldrh	r3, [r4, #130]	; 0x82
   129a8:	ldrh	r2, [r4, #128]	; 0x80
   129ac:	cmp	r2, r3
   129b0:	strhcc	r3, [r4, #128]	; 0x80
   129b4:	ldr	r3, [r4, #32]
   129b8:	ldrh	r2, [r3, #12]
   129bc:	sub	r3, r3, #36	; 0x24
   129c0:	str	r3, [r4, #32]
   129c4:	ldr	r3, [r4, #156]	; 0x9c
   129c8:	strh	r2, [r4, #130]	; 0x82
   129cc:	sub	r3, r3, #1
   129d0:	str	r3, [r4, #156]	; 0x9c
   129d4:	pop	{r4, pc}
   129d8:	ldr	r3, [r0, #20]
   129dc:	mov	r2, r1
   129e0:	mov	r1, #0
   129e4:	sub	r3, r3, r2
   129e8:	str	r3, [r0, #20]
   129ec:	ldr	r0, [r0, #16]
   129f0:	add	r0, r0, r3
   129f4:	b	12014 <memset@plt>
   129f8:	push	{r4, r5, r6, lr}
   129fc:	mov	r6, r1
   12a00:	mov	r1, r2
   12a04:	mov	r4, r2
   12a08:	bl	12928 <_start@@Base+0x468>
   12a0c:	subs	r5, r0, #0
   12a10:	beq	12a20 <_start@@Base+0x560>
   12a14:	mov	r2, r4
   12a18:	mov	r1, r6
   12a1c:	bl	11f90 <memcpy@plt>
   12a20:	mov	r0, r5
   12a24:	pop	{r4, r5, r6, pc}
   12a28:	push	{r0, r1, r4, lr}
   12a2c:	cmp	r0, #4
   12a30:	mov	r4, #0
   12a34:	mov	r2, r1
   12a38:	movcs	r1, r0
   12a3c:	movcc	r1, #4
   12a40:	add	r0, sp, #4
   12a44:	str	r4, [sp, #4]
   12a48:	bl	12008 <posix_memalign@plt>
   12a4c:	cmp	r0, r4
   12a50:	beq	12a68 <_start@@Base+0x5a8>
   12a54:	ldr	r0, [sp, #4]
   12a58:	cmp	r0, r4
   12a5c:	beq	12a68 <_start@@Base+0x5a8>
   12a60:	bl	11f84 <free@plt>
   12a64:	str	r4, [sp, #4]
   12a68:	ldr	r0, [sp, #4]
   12a6c:	add	sp, sp, #8
   12a70:	pop	{r4, pc}

00012a74 <flatcc_builder_default_alloc@@Base>:
   12a74:	push	{r4, r5, r6, r7, r8, lr}
   12a78:	subs	r6, r2, #0
   12a7c:	mov	r5, r1
   12a80:	bne	12aa4 <flatcc_builder_default_alloc@@Base+0x30>
   12a84:	ldr	r0, [r1]
   12a88:	cmp	r0, #0
   12a8c:	popeq	{r4, r5, r6, r7, r8, pc}
   12a90:	bl	11f84 <free@plt>
   12a94:	str	r6, [r5]
   12a98:	str	r6, [r5, #4]
   12a9c:	mov	r0, #0
   12aa0:	pop	{r4, r5, r6, r7, r8, pc}
   12aa4:	ldr	r2, [sp, #24]
   12aa8:	mov	r7, r3
   12aac:	sub	r2, r2, #1
   12ab0:	cmp	r2, #6
   12ab4:	ldrls	pc, [pc, r2, lsl #2]
   12ab8:	b	12b4c <flatcc_builder_default_alloc@@Base+0xd8>
   12abc:	andeq	r2, r1, r4, asr fp
   12ac0:	andeq	r2, r1, ip, asr #22
   12ac4:	andeq	r2, r1, ip, asr #22
   12ac8:	andeq	r2, r1, ip, lsr fp
   12acc:	ldrdeq	r2, [r1], -r8
   12ad0:	andeq	r2, r1, ip, asr #22
   12ad4:	andeq	r2, r1, r4, asr #22
   12ad8:	mov	r4, r6
   12adc:	cmp	r6, r4
   12ae0:	bhi	12b5c <flatcc_builder_default_alloc@@Base+0xe8>
   12ae4:	ldr	r2, [r5, #4]
   12ae8:	cmp	r6, r2
   12aec:	bhi	12af8 <flatcc_builder_default_alloc@@Base+0x84>
   12af0:	cmp	r4, r2, lsr #1
   12af4:	bls	12a9c <flatcc_builder_default_alloc@@Base+0x28>
   12af8:	mov	r1, r4
   12afc:	ldr	r0, [r5]
   12b00:	bl	11fa8 <realloc@plt>
   12b04:	subs	r6, r0, #0
   12b08:	beq	12b64 <flatcc_builder_default_alloc@@Base+0xf0>
   12b0c:	cmp	r7, #0
   12b10:	beq	12b30 <flatcc_builder_default_alloc@@Base+0xbc>
   12b14:	ldr	r0, [r5, #4]
   12b18:	cmp	r4, r0
   12b1c:	bls	12b30 <flatcc_builder_default_alloc@@Base+0xbc>
   12b20:	sub	r2, r4, r0
   12b24:	mov	r1, #0
   12b28:	add	r0, r6, r0
   12b2c:	bl	12014 <memset@plt>
   12b30:	str	r6, [r5]
   12b34:	str	r4, [r5, #4]
   12b38:	b	12a9c <flatcc_builder_default_alloc@@Base+0x28>
   12b3c:	mov	r4, #288	; 0x120
   12b40:	b	12adc <flatcc_builder_default_alloc@@Base+0x68>
   12b44:	mov	r4, #64	; 0x40
   12b48:	b	12adc <flatcc_builder_default_alloc@@Base+0x68>
   12b4c:	mov	r4, #32
   12b50:	b	12adc <flatcc_builder_default_alloc@@Base+0x68>
   12b54:	mov	r4, #256	; 0x100
   12b58:	b	12adc <flatcc_builder_default_alloc@@Base+0x68>
   12b5c:	lsl	r4, r4, #1
   12b60:	b	12adc <flatcc_builder_default_alloc@@Base+0x68>
   12b64:	mvn	r0, #0
   12b68:	pop	{r4, r5, r6, r7, r8, pc}
   12b6c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12b70:	add	r6, r0, #52	; 0x34
   12b74:	mov	r4, r1
   12b78:	add	r1, r6, r1, lsl #3
   12b7c:	mov	r5, r2
   12b80:	add	r2, r2, r3
   12b84:	ldr	r3, [r1, #4]
   12b88:	cmp	r2, r3
   12b8c:	bls	12bc0 <flatcc_builder_default_alloc@@Base+0x14c>
   12b90:	str	r4, [sp]
   12b94:	ldr	r3, [sp, #32]
   12b98:	ldr	r7, [r0, #48]	; 0x30
   12b9c:	ldr	r0, [r0, #40]	; 0x28
   12ba0:	blx	r7
   12ba4:	cmp	r0, #0
   12ba8:	beq	12bc0 <flatcc_builder_default_alloc@@Base+0x14c>
   12bac:	ldr	r3, [pc, #28]	; 12bd0 <flatcc_builder_default_alloc@@Base+0x15c>
   12bb0:	mov	r2, #308	; 0x134
   12bb4:	ldr	r1, [pc, #24]	; 12bd4 <flatcc_builder_default_alloc@@Base+0x160>
   12bb8:	ldr	r0, [pc, #24]	; 12bd8 <flatcc_builder_default_alloc@@Base+0x164>
   12bbc:	bl	12044 <__assert_fail@plt>
   12bc0:	ldr	r0, [r6, r4, lsl #3]
   12bc4:	add	r0, r0, r5
   12bc8:	add	sp, sp, #12
   12bcc:	pop	{r4, r5, r6, r7, pc}
   12bd0:	andeq	r6, r1, sp, lsr r0
   12bd4:	andeq	r6, r1, ip, lsr r7
   12bd8:	andeq	r6, r1, r9, lsr #15
   12bdc:	ldrd	r2, [r0, #156]	; 0x9c
   12be0:	push	{r0, r1, r4, r5, r6, lr}
   12be4:	mov	r5, r1
   12be8:	mov	r4, r0
   12bec:	add	r1, r2, #1
   12bf0:	cmp	r1, r3
   12bf4:	str	r1, [r0, #156]	; 0x9c
   12bf8:	ble	12ca4 <flatcc_builder_default_alloc@@Base+0x230>
   12bfc:	ldr	r3, [r0, #176]	; 0xb0
   12c00:	cmp	r1, r3
   12c04:	cmpgt	r3, #0
   12c08:	movgt	r3, #1
   12c0c:	movle	r3, #0
   12c10:	ble	12c20 <flatcc_builder_default_alloc@@Base+0x1ac>
   12c14:	mvn	r0, #0
   12c18:	add	sp, sp, #8
   12c1c:	pop	{r4, r5, r6, pc}
   12c20:	mov	r6, #36	; 0x24
   12c24:	mov	r1, #4
   12c28:	str	r3, [sp]
   12c2c:	mov	r3, r6
   12c30:	mul	r2, r6, r2
   12c34:	bl	12b6c <flatcc_builder_default_alloc@@Base+0xf8>
   12c38:	cmp	r0, #0
   12c3c:	str	r0, [r4, #32]
   12c40:	beq	12c14 <flatcc_builder_default_alloc@@Base+0x1a0>
   12c44:	ldr	r3, [r4, #88]	; 0x58
   12c48:	ldr	r2, [r4, #176]	; 0xb0
   12c4c:	udiv	r3, r3, r6
   12c50:	cmp	r2, #0
   12c54:	cmpgt	r3, r2
   12c58:	movgt	r3, r2
   12c5c:	str	r3, [r4, #160]	; 0xa0
   12c60:	ldrh	r1, [r4, #130]	; 0x82
   12c64:	mvn	r0, #3
   12c68:	ldr	r3, [r4, #20]
   12c6c:	ldr	r2, [r4, #32]
   12c70:	str	r3, [r2, #8]
   12c74:	strh	r1, [r2, #12]
   12c78:	ldr	r1, [r4, #28]
   12c7c:	strh	r5, [r4, #130]	; 0x82
   12c80:	add	r3, r3, r1
   12c84:	str	r0, [r2, #4]
   12c88:	mov	r0, #0
   12c8c:	add	r3, r3, #7
   12c90:	str	r1, [r2]
   12c94:	bic	r3, r3, #7
   12c98:	str	r0, [r4, #20]
   12c9c:	str	r3, [r4, #28]
   12ca0:	b	12c18 <flatcc_builder_default_alloc@@Base+0x1a4>
   12ca4:	ldr	r3, [r0, #32]
   12ca8:	add	r3, r3, #36	; 0x24
   12cac:	str	r3, [r0, #32]
   12cb0:	b	12c60 <flatcc_builder_default_alloc@@Base+0x1ec>
   12cb4:	ldr	r3, [r0, #32]
   12cb8:	push	{r0, r1, r2, r4, r5, lr}
   12cbc:	add	r1, r1, #2
   12cc0:	mov	r4, r0
   12cc4:	lsl	r5, r1, #1
   12cc8:	ldrh	r1, [r3, #28]
   12ccc:	ldr	r2, [r3, #16]
   12cd0:	mov	r3, #1
   12cd4:	str	r3, [sp]
   12cd8:	mov	r3, r5
   12cdc:	add	r2, r2, r1, lsl #1
   12ce0:	mov	r1, #0
   12ce4:	bl	12b6c <flatcc_builder_default_alloc@@Base+0xf8>
   12ce8:	cmp	r0, #0
   12cec:	streq	r0, [r4, #4]
   12cf0:	mvneq	r0, #0
   12cf4:	beq	12d30 <flatcc_builder_default_alloc@@Base+0x2bc>
   12cf8:	ldr	r2, [r4, #32]
   12cfc:	add	r0, r0, #4
   12d00:	mov	r3, #0
   12d04:	mov	r1, #3
   12d08:	str	r0, [r4, #4]
   12d0c:	mov	r0, r4
   12d10:	str	r3, [sp]
   12d14:	sub	r3, r5, #3
   12d18:	ldr	r2, [r2, #20]
   12d1c:	bl	12b6c <flatcc_builder_default_alloc@@Base+0xf8>
   12d20:	str	r0, [r4]
   12d24:	clz	r0, r0
   12d28:	lsr	r0, r0, #5
   12d2c:	rsb	r0, r0, #0
   12d30:	add	sp, sp, #12
   12d34:	pop	{r4, r5, pc}
   12d38:	push	{r0, r1, r2, r4, r5, lr}
   12d3c:	ldr	r3, [r1]
   12d40:	ldr	r4, [r0, #140]	; 0x8c
   12d44:	add	r2, r3, r4
   12d48:	cmp	r2, r4
   12d4c:	ldrlt	r3, [pc, #76]	; 12da0 <flatcc_builder_default_alloc@@Base+0x32c>
   12d50:	str	r2, [r0, #140]	; 0x8c
   12d54:	movwlt	r2, #673	; 0x2a1
   12d58:	blt	12d88 <flatcc_builder_default_alloc@@Base+0x314>
   12d5c:	add	r1, r1, #8
   12d60:	str	r3, [sp]
   12d64:	mov	r3, r4
   12d68:	ldr	r2, [r1, #-4]
   12d6c:	ldr	r5, [r0, #44]	; 0x2c
   12d70:	ldr	r0, [r0, #36]	; 0x24
   12d74:	blx	r5
   12d78:	cmp	r0, #0
   12d7c:	beq	12d94 <flatcc_builder_default_alloc@@Base+0x320>
   12d80:	ldr	r3, [pc, #24]	; 12da0 <flatcc_builder_default_alloc@@Base+0x32c>
   12d84:	movw	r2, #677	; 0x2a5
   12d88:	ldr	r1, [pc, #20]	; 12da4 <flatcc_builder_default_alloc@@Base+0x330>
   12d8c:	ldr	r0, [pc, #20]	; 12da8 <flatcc_builder_default_alloc@@Base+0x334>
   12d90:	bl	12044 <__assert_fail@plt>
   12d94:	add	r0, r4, #1
   12d98:	add	sp, sp, #12
   12d9c:	pop	{r4, r5, pc}
   12da0:	andeq	r6, r1, ip, asr #32
   12da4:	andeq	r6, r1, ip, lsr r7
   12da8:	andeq	r6, r1, r9, lsr #15
   12dac:	cmp	r2, #0
   12db0:	bne	12dc0 <flatcc_builder_default_alloc@@Base+0x34c>
   12db4:	ldrh	r2, [r0, #132]	; 0x84
   12db8:	cmp	r2, #0
   12dbc:	moveq	r2, #1
   12dc0:	ldrh	ip, [r1]
   12dc4:	cmp	ip, #3
   12dc8:	movls	ip, #4
   12dcc:	strhls	ip, [r1]
   12dd0:	ldrh	ip, [r1]
   12dd4:	cmp	ip, r2
   12dd8:	strhcc	r2, [r1]
   12ddc:	cmp	r3, #0
   12de0:	bne	12e40 <flatcc_builder_default_alloc@@Base+0x3cc>
   12de4:	ldr	r3, [r0, #140]	; 0x8c
   12de8:	sub	r2, r2, #1
   12dec:	ands	r2, r2, r3
   12df0:	beq	12e40 <flatcc_builder_default_alloc@@Base+0x3cc>
   12df4:	push	{r4, lr}
   12df8:	mov	r3, #1
   12dfc:	sub	sp, sp, #72	; 0x48
   12e00:	mov	r1, sp
   12e04:	ldr	r4, [pc, #60]	; 12e48 <flatcc_builder_default_alloc@@Base+0x3d4>
   12e08:	strd	r2, [sp]
   12e0c:	str	r4, [sp, #8]
   12e10:	str	r2, [sp, #12]
   12e14:	bl	12d38 <flatcc_builder_default_alloc@@Base+0x2c4>
   12e18:	cmp	r0, #0
   12e1c:	bne	12e34 <flatcc_builder_default_alloc@@Base+0x3c0>
   12e20:	add	r3, r4, #512	; 0x200
   12e24:	movw	r2, #702	; 0x2be
   12e28:	ldr	r1, [pc, #28]	; 12e4c <flatcc_builder_default_alloc@@Base+0x3d8>
   12e2c:	ldr	r0, [pc, #28]	; 12e50 <flatcc_builder_default_alloc@@Base+0x3dc>
   12e30:	bl	12044 <__assert_fail@plt>
   12e34:	mov	r0, #0
   12e38:	add	sp, sp, #72	; 0x48
   12e3c:	pop	{r4, pc}
   12e40:	mov	r0, #0
   12e44:	bx	lr
   12e48:	andeq	r6, r1, r6, asr r0
   12e4c:	andeq	r6, r1, ip, lsr r7
   12e50:	andeq	r6, r1, r9, lsr #15
   12e54:	ldr	r3, [r1]
   12e58:	push	{r0, r1, r4, r5, r6, lr}
   12e5c:	ldr	r2, [r0, #136]	; 0x88
   12e60:	sub	r4, r2, r3
   12e64:	cmp	r2, r4
   12e68:	ldrle	r3, [pc, #80]	; 12ec0 <flatcc_builder_default_alloc@@Base+0x44c>
   12e6c:	movwle	r2, #647	; 0x287
   12e70:	ble	12ea4 <flatcc_builder_default_alloc@@Base+0x430>
   12e74:	mov	r5, r0
   12e78:	add	r1, r1, #8
   12e7c:	str	r3, [sp]
   12e80:	mov	r3, r4
   12e84:	ldr	r2, [r1, #-4]
   12e88:	ldr	r0, [r0, #36]	; 0x24
   12e8c:	ldr	r6, [r5, #44]	; 0x2c
   12e90:	blx	r6
   12e94:	cmp	r0, #0
   12e98:	beq	12eb0 <flatcc_builder_default_alloc@@Base+0x43c>
   12e9c:	ldr	r3, [pc, #28]	; 12ec0 <flatcc_builder_default_alloc@@Base+0x44c>
   12ea0:	movw	r2, #651	; 0x28b
   12ea4:	ldr	r1, [pc, #24]	; 12ec4 <flatcc_builder_default_alloc@@Base+0x450>
   12ea8:	ldr	r0, [pc, #24]	; 12ec8 <flatcc_builder_default_alloc@@Base+0x454>
   12eac:	bl	12044 <__assert_fail@plt>
   12eb0:	mov	r0, r4
   12eb4:	str	r4, [r5, #136]	; 0x88
   12eb8:	add	sp, sp, #8
   12ebc:	pop	{r4, r5, r6, pc}
   12ec0:	andeq	r6, r1, r5, ror #4
   12ec4:	andeq	r6, r1, ip, lsr r7
   12ec8:	andeq	r6, r1, r9, lsr #15
   12ecc:	ldr	r3, [r0, #20]
   12ed0:	adds	r1, r3, r1
   12ed4:	movcs	r3, #1
   12ed8:	movcc	r3, #0
   12edc:	cmp	r1, r2
   12ee0:	movls	r2, r3
   12ee4:	orrhi	r2, r3, #1
   12ee8:	cmp	r2, #0
   12eec:	beq	12f08 <flatcc_builder_default_alloc@@Base+0x494>
   12ef0:	push	{r4, lr}
   12ef4:	mov	r2, #892	; 0x37c
   12ef8:	ldr	r3, [pc, #20]	; 12f14 <flatcc_builder_default_alloc@@Base+0x4a0>
   12efc:	ldr	r1, [pc, #20]	; 12f18 <flatcc_builder_default_alloc@@Base+0x4a4>
   12f00:	ldr	r0, [pc, #20]	; 12f1c <flatcc_builder_default_alloc@@Base+0x4a8>
   12f04:	bl	12044 <__assert_fail@plt>
   12f08:	str	r1, [r0, #20]
   12f0c:	mov	r0, r2
   12f10:	bx	lr
   12f14:	andeq	r6, r1, r0, ror r2
   12f18:	andeq	r6, r1, ip, lsr r7
   12f1c:	andeq	r6, r1, r2, lsl #15
   12f20:	ldrh	ip, [r0, #128]	; 0x80
   12f24:	push	{r4, r5, r6, lr}
   12f28:	sub	sp, sp, #80	; 0x50
   12f2c:	ldr	r5, [r0, #136]	; 0x88
   12f30:	cmp	ip, #3
   12f34:	movls	ip, #4
   12f38:	strhls	ip, [r0, #128]	; 0x80
   12f3c:	mov	ip, #4
   12f40:	add	lr, sp, ip
   12f44:	and	r4, r5, #3
   12f48:	stmib	sp, {r2, ip}
   12f4c:	str	lr, [sp, #16]
   12f50:	str	ip, [sp, #20]
   12f54:	mov	ip, #1
   12f58:	str	ip, [sp, #12]
   12f5c:	lsls	ip, r2, #2
   12f60:	beq	12f7c <flatcc_builder_default_alloc@@Base+0x508>
   12f64:	add	lr, ip, #4
   12f68:	str	ip, [sp, #28]
   12f6c:	mov	ip, #2
   12f70:	str	lr, [sp, #8]
   12f74:	str	ip, [sp, #12]
   12f78:	str	r1, [sp, #24]
   12f7c:	cmp	r4, #0
   12f80:	beq	12fb0 <flatcc_builder_default_alloc@@Base+0x53c>
   12f84:	ldr	ip, [sp, #8]
   12f88:	add	lr, sp, #80	; 0x50
   12f8c:	ldr	r6, [pc, #204]	; 13060 <flatcc_builder_default_alloc@@Base+0x5ec>
   12f90:	add	ip, ip, r4
   12f94:	str	ip, [sp, #8]
   12f98:	ldr	ip, [sp, #12]
   12f9c:	add	ip, ip, #1
   12fa0:	add	lr, lr, ip, lsl #3
   12fa4:	str	ip, [sp, #12]
   12fa8:	str	r6, [lr, #-72]	; 0xffffffb8
   12fac:	str	r4, [lr, #-68]	; 0xffffffbc
   12fb0:	ldr	lr, [sp, #8]
   12fb4:	mov	ip, #0
   12fb8:	mvn	r6, #3
   12fbc:	sub	lr, lr, #4
   12fc0:	sub	lr, lr, r5
   12fc4:	cmp	r2, ip
   12fc8:	bne	12fdc <flatcc_builder_default_alloc@@Base+0x568>
   12fcc:	add	r1, sp, #8
   12fd0:	bl	12e54 <flatcc_builder_default_alloc@@Base+0x3e0>
   12fd4:	add	sp, sp, #80	; 0x50
   12fd8:	pop	{r4, r5, r6, pc}
   12fdc:	ldr	r5, [r1, ip, lsl #2]
   12fe0:	cmp	r5, #0
   12fe4:	beq	1301c <flatcc_builder_default_alloc@@Base+0x5a8>
   12fe8:	mla	r4, r6, ip, lr
   12fec:	cmp	r3, #0
   12ff0:	add	r4, r4, r5
   12ff4:	str	r4, [r1, ip, lsl #2]
   12ff8:	beq	13058 <flatcc_builder_default_alloc@@Base+0x5e4>
   12ffc:	ldrb	r4, [r3, ip]
   13000:	cmp	r4, #0
   13004:	bne	13058 <flatcc_builder_default_alloc@@Base+0x5e4>
   13008:	ldr	r3, [pc, #84]	; 13064 <flatcc_builder_default_alloc@@Base+0x5f0>
   1300c:	movw	r2, #1457	; 0x5b1
   13010:	ldr	r1, [pc, #80]	; 13068 <flatcc_builder_default_alloc@@Base+0x5f4>
   13014:	ldr	r0, [pc, #80]	; 1306c <flatcc_builder_default_alloc@@Base+0x5f8>
   13018:	bl	12044 <__assert_fail@plt>
   1301c:	cmp	r3, #0
   13020:	beq	13044 <flatcc_builder_default_alloc@@Base+0x5d0>
   13024:	ldrb	r4, [r3, ip]
   13028:	cmp	r4, #0
   1302c:	beq	13058 <flatcc_builder_default_alloc@@Base+0x5e4>
   13030:	ldr	r3, [pc, #44]	; 13064 <flatcc_builder_default_alloc@@Base+0x5f0>
   13034:	movw	r2, #1461	; 0x5b5
   13038:	ldr	r1, [pc, #40]	; 13068 <flatcc_builder_default_alloc@@Base+0x5f4>
   1303c:	ldr	r0, [pc, #44]	; 13070 <flatcc_builder_default_alloc@@Base+0x5fc>
   13040:	b	13018 <flatcc_builder_default_alloc@@Base+0x5a4>
   13044:	ldr	r3, [pc, #24]	; 13064 <flatcc_builder_default_alloc@@Base+0x5f0>
   13048:	movw	r2, #1463	; 0x5b7
   1304c:	ldr	r1, [pc, #20]	; 13068 <flatcc_builder_default_alloc@@Base+0x5f4>
   13050:	ldr	r0, [pc, #28]	; 13074 <flatcc_builder_default_alloc@@Base+0x600>
   13054:	b	13018 <flatcc_builder_default_alloc@@Base+0x5a4>
   13058:	add	ip, ip, #1
   1305c:	b	12fc4 <flatcc_builder_default_alloc@@Base+0x550>
   13060:	andeq	r6, r1, r6, asr r0
   13064:	andeq	r6, r1, r1, lsl #5
   13068:	andeq	r6, r1, ip, lsr r7
   1306c:	muleq	r1, sp, r7
   13070:	andeq	r6, r1, fp, lsr #15
   13074:	andeq	r6, r1, r9, lsr #15

00013078 <flatcc_builder_flush_vtable_cache@@Base>:
   13078:	ldr	r3, [r0, #116]	; 0x74
   1307c:	cmp	r3, #0
   13080:	bxeq	lr
   13084:	push	{r4, lr}
   13088:	mov	r4, r0
   1308c:	mov	r1, #0
   13090:	ldr	r0, [r0, #92]	; 0x5c
   13094:	ldr	r2, [r4, #96]	; 0x60
   13098:	bl	12014 <memset@plt>
   1309c:	mov	r0, #0
   130a0:	mov	r1, #16
   130a4:	strd	r0, [r4, #120]	; 0x78
   130a8:	pop	{r4, pc}

000130ac <flatcc_builder_custom_init@@Base>:
   130ac:	push	{r4, r5, r6, r7, r8, lr}
   130b0:	mov	r6, r1
   130b4:	mov	r7, r2
   130b8:	mov	r1, #0
   130bc:	mov	r2, #232	; 0xe8
   130c0:	mov	r4, r0
   130c4:	mov	r5, r3
   130c8:	bl	12014 <memset@plt>
   130cc:	cmp	r6, #0
   130d0:	mov	r0, #0
   130d4:	moveq	r3, #1
   130d8:	addeq	r7, r4, #188	; 0xbc
   130dc:	ldreq	r6, [pc, #36]	; 13108 <flatcc_builder_custom_init@@Base+0x5c>
   130e0:	streq	r3, [r4, #184]	; 0xb8
   130e4:	cmp	r5, #0
   130e8:	ldr	r3, [pc, #28]	; 1310c <flatcc_builder_custom_init@@Base+0x60>
   130ec:	str	r7, [r4, #36]	; 0x24
   130f0:	str	r6, [r4, #44]	; 0x2c
   130f4:	moveq	r5, r3
   130f8:	ldr	r3, [sp, #24]
   130fc:	str	r3, [r4, #40]	; 0x28
   13100:	str	r5, [r4, #48]	; 0x30
   13104:	pop	{r4, r5, r6, r7, r8, pc}
   13108:			; <UNDEFINED> instruction: 0x000157bc
   1310c:	andeq	r2, r1, r4, ror sl

00013110 <flatcc_builder_init@@Base>:
   13110:	push	{r4, lr}
   13114:	mov	r2, #232	; 0xe8
   13118:	mov	r1, #0
   1311c:	bl	12014 <memset@plt>
   13120:	mov	r3, r0
   13124:	mov	r2, #1
   13128:	mov	r0, #0
   1312c:	str	r2, [r3, #184]	; 0xb8
   13130:	ldr	r2, [pc, #20]	; 1314c <flatcc_builder_init@@Base+0x3c>
   13134:	str	r2, [r3, #48]	; 0x30
   13138:	add	r2, r3, #188	; 0xbc
   1313c:	str	r2, [r3, #36]	; 0x24
   13140:	ldr	r2, [pc, #8]	; 13150 <flatcc_builder_init@@Base+0x40>
   13144:	str	r2, [r3, #44]	; 0x2c
   13148:	pop	{r4, pc}
   1314c:	andeq	r2, r1, r4, ror sl
   13150:			; <UNDEFINED> instruction: 0x000157bc

00013154 <flatcc_builder_custom_reset@@Base>:
   13154:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   13158:	mov	r4, r0
   1315c:	mov	r7, r1
   13160:	mov	r8, r2
   13164:	mov	r5, r0
   13168:	mov	r6, #0
   1316c:	ldr	r3, [r5, #52]	; 0x34
   13170:	add	r1, r5, #52	; 0x34
   13174:	cmp	r3, #0
   13178:	beq	13254 <flatcc_builder_custom_reset@@Base+0x100>
   1317c:	cmp	r6, #5
   13180:	cmpne	r8, #0
   13184:	bne	1322c <flatcc_builder_custom_reset@@Base+0xd8>
   13188:	mov	r1, #0
   1318c:	ldr	r0, [r5, #52]	; 0x34
   13190:	ldr	r2, [r5, #56]	; 0x38
   13194:	bl	12014 <memset@plt>
   13198:	add	r6, r6, #1
   1319c:	add	r5, r5, #8
   131a0:	cmp	r6, #8
   131a4:	bne	1316c <flatcc_builder_custom_reset@@Base+0x18>
   131a8:	ldr	r2, [r4, #124]	; 0x7c
   131ac:	mov	r3, #0
   131b0:	ldr	r0, [r4, #184]	; 0xb8
   131b4:	str	r3, [r4, #24]
   131b8:	str	r3, [r4, #32]
   131bc:	cmp	r2, r3
   131c0:	str	r3, [r4, #120]	; 0x78
   131c4:	movne	r2, #16
   131c8:	strh	r3, [r4, #128]	; 0x80
   131cc:	str	r3, [r4, #136]	; 0x88
   131d0:	strne	r2, [r4, #124]	; 0x7c
   131d4:	cmp	r7, #0
   131d8:	ldr	r2, [r4, #60]	; 0x3c
   131dc:	strne	r3, [r4, #172]	; 0xac
   131e0:	strne	r3, [r4, #176]	; 0xb0
   131e4:	strne	r3, [r4, #180]	; 0xb4
   131e8:	cmp	r0, #0
   131ec:	strd	r2, [r4, #16]
   131f0:	ldr	r2, [r4, #76]	; 0x4c
   131f4:	str	r2, [r4]
   131f8:	ldr	r2, [r4, #52]	; 0x34
   131fc:	str	r3, [r4, #140]	; 0x8c
   13200:	str	r3, [r4, #148]	; 0x94
   13204:	str	r3, [r4, #152]	; 0x98
   13208:	str	r3, [r4, #156]	; 0x9c
   1320c:	str	r2, [r4, #4]
   13210:	str	r3, [r4, #160]	; 0xa0
   13214:	beq	13224 <flatcc_builder_custom_reset@@Base+0xd0>
   13218:	add	r0, r4, #188	; 0xbc
   1321c:	bl	156bc <flatcc_emitter_reset@@Base>
   13220:	mov	r0, #0
   13224:	add	sp, sp, #12
   13228:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1322c:	mov	r3, #1
   13230:	ldr	r0, [r4, #40]	; 0x28
   13234:	mov	r2, r3
   13238:	ldr	r9, [r4, #48]	; 0x30
   1323c:	str	r6, [sp]
   13240:	blx	r9
   13244:	cmp	r0, #0
   13248:	beq	13188 <flatcc_builder_custom_reset@@Base+0x34>
   1324c:	mvn	r0, #0
   13250:	b	13224 <flatcc_builder_custom_reset@@Base+0xd0>
   13254:	ldr	r3, [r5, #56]	; 0x38
   13258:	cmp	r3, #0
   1325c:	beq	13198 <flatcc_builder_custom_reset@@Base+0x44>
   13260:	ldr	r3, [pc, #12]	; 13274 <flatcc_builder_custom_reset@@Base+0x120>
   13264:	movw	r2, #434	; 0x1b2
   13268:	ldr	r1, [pc, #8]	; 13278 <flatcc_builder_custom_reset@@Base+0x124>
   1326c:	ldr	r0, [pc, #8]	; 1327c <flatcc_builder_custom_reset@@Base+0x128>
   13270:	bl	12044 <__assert_fail@plt>
   13274:	muleq	r1, lr, r2
   13278:	andeq	r6, r1, ip, lsr r7
   1327c:			; <UNDEFINED> instruction: 0x000167b9

00013280 <flatcc_builder_reset@@Base>:
   13280:	mov	r2, #0
   13284:	mov	r1, r2
   13288:	b	13154 <flatcc_builder_custom_reset@@Base>

0001328c <flatcc_builder_clear@@Base>:
   1328c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13290:	mov	r4, r0
   13294:	add	r6, r0, #52	; 0x34
   13298:	mov	r5, #0
   1329c:	mov	r3, #0
   132a0:	mov	r1, r6
   132a4:	mov	r2, r3
   132a8:	ldr	r0, [r4, #40]	; 0x28
   132ac:	add	r6, r6, #8
   132b0:	ldr	r7, [r4, #48]	; 0x30
   132b4:	str	r5, [sp]
   132b8:	add	r5, r5, #1
   132bc:	blx	r7
   132c0:	cmp	r5, #8
   132c4:	bne	1329c <flatcc_builder_clear@@Base+0x10>
   132c8:	ldr	r3, [r4, #184]	; 0xb8
   132cc:	cmp	r3, #0
   132d0:	beq	132dc <flatcc_builder_clear@@Base+0x50>
   132d4:	add	r0, r4, #188	; 0xbc
   132d8:	bl	15764 <flatcc_emitter_clear@@Base>
   132dc:	mov	r2, #232	; 0xe8
   132e0:	mov	r1, #0
   132e4:	mov	r0, r4
   132e8:	add	sp, sp, #12
   132ec:	pop	{r4, r5, r6, r7, lr}
   132f0:	b	12014 <memset@plt>

000132f4 <flatcc_builder_enter_user_frame_ptr@@Base>:
   132f4:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   132f8:	add	r5, r1, #3
   132fc:	mov	r7, #0
   13300:	bic	r5, r5, #3
   13304:	mov	r1, #7
   13308:	add	r5, r5, #4
   1330c:	mov	r6, r0
   13310:	mov	r3, r5
   13314:	str	r7, [sp]
   13318:	ldr	r2, [r0, #228]	; 0xe4
   1331c:	bl	12b6c <flatcc_builder_default_alloc@@Base+0xf8>
   13320:	subs	r4, r0, #0
   13324:	beq	13350 <flatcc_builder_enter_user_frame_ptr@@Base+0x5c>
   13328:	mov	r2, r5
   1332c:	mov	r1, r7
   13330:	bl	12014 <memset@plt>
   13334:	ldr	r3, [r6, #224]	; 0xe0
   13338:	str	r3, [r4], #4
   1333c:	ldr	r1, [r6, #228]	; 0xe4
   13340:	add	r3, r1, #4
   13344:	add	r5, r1, r5
   13348:	str	r3, [r6, #224]	; 0xe0
   1334c:	str	r5, [r6, #228]	; 0xe4
   13350:	mov	r0, r4
   13354:	add	sp, sp, #12
   13358:	pop	{r4, r5, r6, r7, pc}

0001335c <flatcc_builder_enter_user_frame@@Base>:
   1335c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13360:	add	r4, r1, #3
   13364:	mov	r7, #0
   13368:	bic	r4, r4, #3
   1336c:	mov	r1, #7
   13370:	add	r4, r4, #4
   13374:	mov	r6, r0
   13378:	mov	r3, r4
   1337c:	str	r7, [sp]
   13380:	ldr	r2, [r0, #228]	; 0xe4
   13384:	bl	12b6c <flatcc_builder_default_alloc@@Base+0xf8>
   13388:	subs	r5, r0, #0
   1338c:	moveq	r0, r5
   13390:	beq	133bc <flatcc_builder_enter_user_frame@@Base+0x60>
   13394:	mov	r2, r4
   13398:	mov	r1, r7
   1339c:	bl	12014 <memset@plt>
   133a0:	ldr	r3, [r6, #224]	; 0xe0
   133a4:	str	r3, [r5]
   133a8:	ldr	r1, [r6, #228]	; 0xe4
   133ac:	add	r0, r1, #4
   133b0:	add	r4, r1, r4
   133b4:	str	r0, [r6, #224]	; 0xe0
   133b8:	str	r4, [r6, #228]	; 0xe4
   133bc:	add	sp, sp, #12
   133c0:	pop	{r4, r5, r6, r7, pc}

000133c4 <flatcc_builder_exit_user_frame@@Base>:
   133c4:	ldr	r3, [r0, #224]	; 0xe0
   133c8:	cmp	r3, #0
   133cc:	bne	133e8 <flatcc_builder_exit_user_frame@@Base+0x24>
   133d0:	push	{r4, lr}
   133d4:	movw	r2, #542	; 0x21e
   133d8:	ldr	r3, [pc, #40]	; 13408 <flatcc_builder_exit_user_frame@@Base+0x44>
   133dc:	ldr	r1, [pc, #40]	; 1340c <flatcc_builder_exit_user_frame@@Base+0x48>
   133e0:	ldr	r0, [pc, #40]	; 13410 <flatcc_builder_exit_user_frame@@Base+0x4c>
   133e4:	bl	12044 <__assert_fail@plt>
   133e8:	ldr	r1, [r0, #108]	; 0x6c
   133ec:	mov	r2, r0
   133f0:	add	r1, r1, r3
   133f4:	sub	r3, r3, #4
   133f8:	str	r3, [r0, #228]	; 0xe4
   133fc:	ldr	r0, [r1, #-4]
   13400:	str	r0, [r2, #224]	; 0xe0
   13404:	bx	lr
   13408:			; <UNDEFINED> instruction: 0x000162ba
   1340c:	andeq	r6, r1, ip, lsr r7
   13410:	andeq	r6, r1, fp, asr #15

00013414 <flatcc_builder_exit_user_frame_at@@Base>:
   13414:	ldr	r2, [r0, #224]	; 0xe0
   13418:	cmp	r2, r1
   1341c:	bcs	13438 <flatcc_builder_exit_user_frame_at@@Base+0x24>
   13420:	push	{r4, lr}
   13424:	movw	r2, #551	; 0x227
   13428:	ldr	r3, [pc, #16]	; 13440 <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   1342c:	ldr	r1, [pc, #16]	; 13444 <flatcc_builder_exit_user_frame_at@@Base+0x30>
   13430:	ldr	r0, [pc, #16]	; 13448 <flatcc_builder_exit_user_frame_at@@Base+0x34>
   13434:	bl	12044 <__assert_fail@plt>
   13438:	str	r1, [r0, #224]	; 0xe0
   1343c:	b	133c4 <flatcc_builder_exit_user_frame@@Base>
   13440:	ldrdeq	r6, [r1], -r9
   13444:	andeq	r6, r1, ip, lsr r7
   13448:	andeq	r6, r1, r4, ror #15

0001344c <flatcc_builder_get_current_user_frame@@Base>:
   1344c:	ldr	r0, [r0, #224]	; 0xe0
   13450:	bx	lr

00013454 <flatcc_builder_get_user_frame_ptr@@Base>:
   13454:	ldr	r0, [r0, #108]	; 0x6c
   13458:	add	r0, r0, r1
   1345c:	bx	lr

00013460 <flatcc_builder_embed_buffer@@Base>:
   13460:	push	{r4, r5, r6, lr}
   13464:	mov	r4, r3
   13468:	sub	sp, sp, #80	; 0x50
   1346c:	mov	r6, r2
   13470:	mov	r2, r1
   13474:	add	r1, sp, #96	; 0x60
   13478:	mov	r5, r0
   1347c:	ldr	r3, [r0, #152]	; 0x98
   13480:	adds	r3, r3, #0
   13484:	movne	r3, #1
   13488:	bl	12dac <flatcc_builder_default_alloc@@Base+0x338>
   1348c:	cmp	r0, #0
   13490:	movne	r0, #0
   13494:	bne	13568 <flatcc_builder_embed_buffer@@Base+0x108>
   13498:	ldr	r3, [sp, #100]	; 0x64
   1349c:	str	r0, [sp, #8]
   134a0:	str	r0, [sp, #12]
   134a4:	tst	r3, #2
   134a8:	ldr	r3, [r5, #136]	; 0x88
   134ac:	movne	r2, #4
   134b0:	moveq	r2, #0
   134b4:	sub	r3, r3, r4
   134b8:	sub	r3, r3, r2
   134bc:	ldrh	r2, [sp, #96]	; 0x60
   134c0:	sub	r2, r2, #1
   134c4:	and	r3, r3, r2
   134c8:	add	r2, r4, r3
   134cc:	str	r2, [sp, #4]
   134d0:	ldr	r2, [r5, #152]	; 0x98
   134d4:	cmp	r2, #0
   134d8:	beq	134f8 <flatcc_builder_embed_buffer@@Base+0x98>
   134dc:	mov	r2, #4
   134e0:	add	r1, sp, r2
   134e4:	str	r2, [sp, #8]
   134e8:	str	r1, [sp, #16]
   134ec:	str	r2, [sp, #20]
   134f0:	mov	r2, #1
   134f4:	str	r2, [sp, #12]
   134f8:	cmp	r4, #0
   134fc:	beq	13528 <flatcc_builder_embed_buffer@@Base+0xc8>
   13500:	ldr	r2, [sp, #8]
   13504:	add	r1, sp, #80	; 0x50
   13508:	add	r2, r2, r4
   1350c:	str	r2, [sp, #8]
   13510:	ldr	r2, [sp, #12]
   13514:	add	r2, r2, #1
   13518:	add	r1, r1, r2, lsl #3
   1351c:	str	r2, [sp, #12]
   13520:	str	r6, [r1, #-72]	; 0xffffffb8
   13524:	str	r4, [r1, #-68]	; 0xffffffbc
   13528:	cmp	r3, #0
   1352c:	beq	1355c <flatcc_builder_embed_buffer@@Base+0xfc>
   13530:	ldr	r2, [sp, #8]
   13534:	add	r1, sp, #80	; 0x50
   13538:	ldr	r0, [pc, #48]	; 13570 <flatcc_builder_embed_buffer@@Base+0x110>
   1353c:	add	r2, r2, r3
   13540:	str	r2, [sp, #8]
   13544:	ldr	r2, [sp, #12]
   13548:	add	r2, r2, #1
   1354c:	add	r1, r1, r2, lsl #3
   13550:	str	r2, [sp, #12]
   13554:	str	r0, [r1, #-72]	; 0xffffffb8
   13558:	str	r3, [r1, #-68]	; 0xffffffbc
   1355c:	add	r1, sp, #8
   13560:	mov	r0, r5
   13564:	bl	12e54 <flatcc_builder_default_alloc@@Base+0x3e0>
   13568:	add	sp, sp, #80	; 0x50
   1356c:	pop	{r4, r5, r6, pc}
   13570:	andeq	r6, r1, r6, asr r0

00013574 <flatcc_builder_create_buffer@@Base>:
   13574:	push	{r4, r5, r6, r7, r8, r9, lr}
   13578:	sub	sp, sp, #92	; 0x5c
   1357c:	mov	r8, #0
   13580:	mov	r9, r1
   13584:	mov	r5, r3
   13588:	add	r1, sp, #120	; 0x78
   1358c:	mov	r4, r0
   13590:	ldr	r7, [sp, #124]	; 0x7c
   13594:	str	r8, [sp, #12]
   13598:	and	r6, r7, #1
   1359c:	mov	r3, r6
   135a0:	bl	12dac <flatcc_builder_default_alloc@@Base+0x338>
   135a4:	cmp	r0, r8
   135a8:	bne	13718 <flatcc_builder_create_buffer@@Base+0x1a4>
   135ac:	ldrh	r3, [r4, #128]	; 0x80
   135b0:	ldrh	r1, [sp, #120]	; 0x78
   135b4:	ldr	r2, [r4, #136]	; 0x88
   135b8:	cmp	r3, r1
   135bc:	strhcc	r1, [r4, #128]	; 0x80
   135c0:	cmp	r9, #0
   135c4:	sub	r1, r1, #1
   135c8:	ldrne	r3, [r9]
   135cc:	strne	r3, [sp, #12]
   135d0:	sub	r3, r2, #4
   135d4:	ldr	r0, [sp, #12]
   135d8:	cmp	r0, #0
   135dc:	movne	r0, #4
   135e0:	tst	r7, #2
   135e4:	movne	ip, #4
   135e8:	moveq	ip, #0
   135ec:	sub	r3, r3, r0
   135f0:	ands	r7, r7, #3
   135f4:	sub	r3, r3, ip
   135f8:	and	r3, r3, r1
   135fc:	mov	r1, #0
   13600:	str	r1, [sp, #16]
   13604:	str	r1, [sp, #20]
   13608:	beq	13628 <flatcc_builder_create_buffer@@Base+0xb4>
   1360c:	mov	r1, #4
   13610:	add	ip, sp, #8
   13614:	str	r1, [sp, #16]
   13618:	str	ip, [sp, #24]
   1361c:	str	r1, [sp, #28]
   13620:	mov	r1, #1
   13624:	str	r1, [sp, #20]
   13628:	ldr	ip, [sp, #16]
   1362c:	add	r8, sp, #88	; 0x58
   13630:	add	r9, sp, #4
   13634:	cmp	r0, #0
   13638:	ldr	lr, [sp, #20]
   1363c:	add	ip, ip, #4
   13640:	add	r1, lr, #1
   13644:	str	ip, [sp, #16]
   13648:	add	r8, r8, r1, lsl #3
   1364c:	str	r1, [sp, #20]
   13650:	str	r9, [r8, #-72]	; 0xffffffb8
   13654:	mov	r9, #4
   13658:	str	r9, [r8, #-68]	; 0xffffffbc
   1365c:	beq	13688 <flatcc_builder_create_buffer@@Base+0x114>
   13660:	add	ip, ip, r0
   13664:	add	r1, lr, #2
   13668:	add	lr, lr, #2
   1366c:	str	ip, [sp, #16]
   13670:	add	ip, sp, #88	; 0x58
   13674:	add	r1, ip, r1, lsl #3
   13678:	add	ip, sp, #12
   1367c:	str	lr, [sp, #20]
   13680:	str	ip, [r1, #-72]	; 0xffffffb8
   13684:	str	r0, [r1, #-68]	; 0xffffffbc
   13688:	cmp	r3, #0
   1368c:	beq	136bc <flatcc_builder_create_buffer@@Base+0x148>
   13690:	ldr	r1, [sp, #16]
   13694:	add	r0, sp, #88	; 0x58
   13698:	ldr	ip, [pc, #132]	; 13724 <flatcc_builder_create_buffer@@Base+0x1b0>
   1369c:	add	r1, r1, r3
   136a0:	str	r1, [sp, #16]
   136a4:	ldr	r1, [sp, #20]
   136a8:	add	r1, r1, #1
   136ac:	add	r0, r0, r1, lsl #3
   136b0:	str	r1, [sp, #20]
   136b4:	str	ip, [r0, #-72]	; 0xffffffb8
   136b8:	str	r3, [r0, #-68]	; 0xffffffbc
   136bc:	ldr	r3, [sp, #16]
   136c0:	cmp	r7, #0
   136c4:	add	r1, sp, #16
   136c8:	mov	r0, r4
   136cc:	sub	r3, r2, r3
   136d0:	movne	r2, #4
   136d4:	moveq	r2, #0
   136d8:	cmp	r6, #0
   136dc:	add	r3, r3, r2
   136e0:	ldrne	r2, [r4, #144]	; 0x90
   136e4:	ldreq	r2, [r4, #140]	; 0x8c
   136e8:	sub	r2, r2, r3
   136ec:	sub	r3, r5, r3
   136f0:	str	r3, [sp, #4]
   136f4:	str	r2, [sp, #8]
   136f8:	bl	12e54 <flatcc_builder_default_alloc@@Base+0x3e0>
   136fc:	cmp	r0, #0
   13700:	bne	1371c <flatcc_builder_create_buffer@@Base+0x1a8>
   13704:	ldr	r3, [pc, #28]	; 13728 <flatcc_builder_create_buffer@@Base+0x1b4>
   13708:	mov	r2, #772	; 0x304
   1370c:	ldr	r1, [pc, #24]	; 1372c <flatcc_builder_create_buffer@@Base+0x1b8>
   13710:	ldr	r0, [pc, #24]	; 13730 <flatcc_builder_create_buffer@@Base+0x1bc>
   13714:	bl	12044 <__assert_fail@plt>
   13718:	mov	r0, r8
   1371c:	add	sp, sp, #92	; 0x5c
   13720:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13724:	andeq	r6, r1, r6, asr r0
   13728:	strdeq	r6, [r1], -fp
   1372c:	andeq	r6, r1, ip, lsr r7
   13730:	andeq	r6, r1, r9, lsr #15

00013734 <flatcc_builder_create_struct@@Base>:
   13734:	cmp	r3, #0
   13738:	push	{lr}		; (str lr, [sp, #-4]!)
   1373c:	sub	sp, sp, #76	; 0x4c
   13740:	bne	13758 <flatcc_builder_create_struct@@Base+0x24>
   13744:	ldr	r3, [pc, #148]	; 137e0 <flatcc_builder_create_struct@@Base+0xac>
   13748:	movw	r2, #783	; 0x30f
   1374c:	ldr	r1, [pc, #144]	; 137e4 <flatcc_builder_create_struct@@Base+0xb0>
   13750:	ldr	r0, [pc, #144]	; 137e8 <flatcc_builder_create_struct@@Base+0xb4>
   13754:	bl	12044 <__assert_fail@plt>
   13758:	ldrh	ip, [r0, #128]	; 0x80
   1375c:	cmp	ip, r3
   13760:	ldr	ip, [r0, #136]	; 0x88
   13764:	strhcc	r3, [r0, #128]	; 0x80
   13768:	sub	r3, r3, #1
   1376c:	sub	ip, ip, r2
   13770:	and	r3, r3, ip
   13774:	mov	ip, #0
   13778:	cmp	r2, ip
   1377c:	str	ip, [sp]
   13780:	str	ip, [sp, #4]
   13784:	beq	1379c <flatcc_builder_create_struct@@Base+0x68>
   13788:	str	r2, [sp]
   1378c:	str	r1, [sp, #8]
   13790:	str	r2, [sp, #12]
   13794:	mov	r2, #1
   13798:	str	r2, [sp, #4]
   1379c:	cmp	r3, #0
   137a0:	beq	137d0 <flatcc_builder_create_struct@@Base+0x9c>
   137a4:	ldr	r2, [sp]
   137a8:	add	r1, sp, #72	; 0x48
   137ac:	ldr	ip, [pc, #56]	; 137ec <flatcc_builder_create_struct@@Base+0xb8>
   137b0:	add	r2, r2, r3
   137b4:	str	r2, [sp]
   137b8:	ldr	r2, [sp, #4]
   137bc:	add	r2, r2, #1
   137c0:	add	r1, r1, r2, lsl #3
   137c4:	str	r2, [sp, #4]
   137c8:	str	ip, [r1, #-72]	; 0xffffffb8
   137cc:	str	r3, [r1, #-68]	; 0xffffffbc
   137d0:	mov	r1, sp
   137d4:	bl	12e54 <flatcc_builder_default_alloc@@Base+0x3e0>
   137d8:	add	sp, sp, #76	; 0x4c
   137dc:	pop	{pc}		; (ldr pc, [sp], #4)
   137e0:	andeq	r6, r1, r8, lsl r3
   137e4:	andeq	r6, r1, ip, lsr r7
   137e8:	andeq	r6, r1, r3, lsl #16
   137ec:	andeq	r6, r1, r6, asr r0

000137f0 <flatcc_builder_start_buffer@@Base>:
   137f0:	push	{r4, r5, r6, r7, r8, lr}
   137f4:	mov	r5, r1
   137f8:	mov	r4, r0
   137fc:	mov	r7, r2
   13800:	mov	r6, r3
   13804:	ldrh	r1, [r0, #128]	; 0x80
   13808:	bl	12bdc <flatcc_builder_default_alloc@@Base+0x168>
   1380c:	cmp	r0, #0
   13810:	bne	13880 <flatcc_builder_start_buffer@@Base+0x90>
   13814:	ldrh	r3, [r4, #132]	; 0x84
   13818:	mov	ip, #1
   1381c:	cmp	r5, #0
   13820:	ldr	r1, [r4, #32]
   13824:	strh	ip, [r4, #128]	; 0x80
   13828:	strh	r3, [r1, #34]	; 0x22
   1382c:	ldrh	r3, [r4, #164]	; 0xa4
   13830:	strh	r7, [r4, #132]	; 0x84
   13834:	strh	r3, [r1, #32]
   13838:	ldr	r3, [r4, #144]	; 0x90
   1383c:	strh	r6, [r4, #164]	; 0xa4
   13840:	str	r3, [r1, #20]
   13844:	ldr	r3, [r4, #152]	; 0x98
   13848:	str	r3, [r1, #28]
   1384c:	ldr	r3, [r4, #136]	; 0x88
   13850:	str	r3, [r4, #144]	; 0x90
   13854:	ldr	r3, [r4, #148]	; 0x94
   13858:	add	r2, r3, ip
   1385c:	strd	r2, [r4, #148]	; 0x94
   13860:	ldr	r3, [r4, #168]	; 0xa8
   13864:	str	r3, [r1, #16]
   13868:	ldr	r3, [pc, #24]	; 13888 <flatcc_builder_start_buffer@@Base+0x98>
   1386c:	moveq	r5, r3
   13870:	ldr	r3, [r5]
   13874:	str	r3, [r4, #168]	; 0xa8
   13878:	strh	ip, [r1, #14]
   1387c:	pop	{r4, r5, r6, r7, r8, pc}
   13880:	mvn	r0, #0
   13884:	pop	{r4, r5, r6, r7, r8, pc}
   13888:	andeq	r6, r1, r6, asr r0

0001388c <flatcc_builder_end_buffer@@Base>:
   1388c:	push	{r0, r1, r2, r4, r5, lr}
   13890:	mov	r4, r0
   13894:	ldrh	r0, [r0, #164]	; 0xa4
   13898:	ldr	r2, [r4, #152]	; 0x98
   1389c:	and	r0, r0, #2
   138a0:	cmp	r2, #0
   138a4:	orrne	r0, r0, #1
   138a8:	ldr	r2, [r4, #32]
   138ac:	ldrh	r2, [r2, #14]
   138b0:	cmp	r2, #1
   138b4:	beq	138cc <flatcc_builder_end_buffer@@Base+0x40>
   138b8:	ldr	r3, [pc, #120]	; 13938 <flatcc_builder_end_buffer@@Base+0xac>
   138bc:	movw	r2, #838	; 0x346
   138c0:	ldr	r1, [pc, #116]	; 1393c <flatcc_builder_end_buffer@@Base+0xb0>
   138c4:	ldr	r0, [pc, #116]	; 13940 <flatcc_builder_end_buffer@@Base+0xb4>
   138c8:	bl	12044 <__assert_fail@plt>
   138cc:	ldrh	r2, [r4, #132]	; 0x84
   138d0:	mov	r3, r1
   138d4:	ldrh	r1, [r4, #128]	; 0x80
   138d8:	cmp	r1, r2
   138dc:	strhcc	r2, [r4, #128]	; 0x80
   138e0:	ldrh	r1, [r4, #128]	; 0x80
   138e4:	str	r1, [sp]
   138e8:	add	r1, r4, #168	; 0xa8
   138ec:	str	r0, [sp, #4]
   138f0:	mov	r0, r4
   138f4:	bl	13574 <flatcc_builder_create_buffer@@Base>
   138f8:	subs	r5, r0, #0
   138fc:	beq	1392c <flatcc_builder_end_buffer@@Base+0xa0>
   13900:	ldr	r3, [r4, #32]
   13904:	mov	r0, r4
   13908:	ldr	r2, [r3, #20]
   1390c:	str	r2, [r4, #144]	; 0x90
   13910:	ldr	r2, [r3, #28]
   13914:	str	r2, [r4, #152]	; 0x98
   13918:	ldr	r2, [r3, #16]
   1391c:	ldrh	r3, [r3, #32]
   13920:	strh	r3, [r4, #164]	; 0xa4
   13924:	str	r2, [r4, #168]	; 0xa8
   13928:	bl	12970 <_start@@Base+0x4b0>
   1392c:	mov	r0, r5
   13930:	add	sp, sp, #12
   13934:	pop	{r4, r5, pc}
   13938:	andeq	r6, r1, r5, lsr r3
   1393c:	andeq	r6, r1, ip, lsr r7
   13940:	andeq	r6, r1, lr, lsl #16

00013944 <flatcc_builder_start_struct@@Base>:
   13944:	push	{r4, r5, r6, lr}
   13948:	mov	r5, r1
   1394c:	mov	r1, r2
   13950:	mov	r4, r0
   13954:	bl	12bdc <flatcc_builder_default_alloc@@Base+0x168>
   13958:	cmp	r0, #0
   1395c:	bne	13984 <flatcc_builder_start_struct@@Base+0x40>
   13960:	ldr	r3, [r4, #32]
   13964:	mov	r2, #2
   13968:	mvn	r1, #3
   1396c:	mov	r0, r4
   13970:	strh	r2, [r3, #14]
   13974:	bl	128ac <_start@@Base+0x3ec>
   13978:	mov	r1, r5
   1397c:	pop	{r4, r5, r6, lr}
   13980:	b	12928 <_start@@Base+0x468>
   13984:	mov	r0, #0
   13988:	pop	{r4, r5, r6, pc}

0001398c <flatcc_builder_struct_edit@@Base>:
   1398c:	ldr	r0, [r0, #16]
   13990:	bx	lr

00013994 <flatcc_builder_end_struct@@Base>:
   13994:	ldr	r3, [r0, #32]
   13998:	push	{r4, r5, r6, lr}
   1399c:	ldrh	r3, [r3, #14]
   139a0:	cmp	r3, #2
   139a4:	beq	139bc <flatcc_builder_end_struct@@Base+0x28>
   139a8:	ldr	r3, [pc, #56]	; 139e8 <flatcc_builder_end_struct@@Base+0x54>
   139ac:	mov	r2, #872	; 0x368
   139b0:	ldr	r1, [pc, #52]	; 139ec <flatcc_builder_end_struct@@Base+0x58>
   139b4:	ldr	r0, [pc, #52]	; 139f0 <flatcc_builder_end_struct@@Base+0x5c>
   139b8:	bl	12044 <__assert_fail@plt>
   139bc:	ldrh	r3, [r0, #130]	; 0x82
   139c0:	mov	r4, r0
   139c4:	ldr	r1, [r0, #16]
   139c8:	ldr	r2, [r0, #20]
   139cc:	bl	13734 <flatcc_builder_create_struct@@Base>
   139d0:	subs	r5, r0, #0
   139d4:	beq	139e0 <flatcc_builder_end_struct@@Base+0x4c>
   139d8:	mov	r0, r4
   139dc:	bl	12970 <_start@@Base+0x4b0>
   139e0:	mov	r0, r5
   139e4:	pop	{r4, r5, r6, pc}
   139e8:	andeq	r6, r1, pc, asr #6
   139ec:	andeq	r6, r1, ip, lsr r7
   139f0:	andeq	r6, r1, sl, lsr r8

000139f4 <flatcc_builder_extend_vector@@Base>:
   139f4:	push	{r4, r5, r6, lr}
   139f8:	mov	r4, r0
   139fc:	mov	r5, r1
   13a00:	ldr	r0, [r0, #32]
   13a04:	ldr	r2, [r0, #24]
   13a08:	bl	12ecc <flatcc_builder_default_alloc@@Base+0x458>
   13a0c:	cmp	r0, #0
   13a10:	bne	13a2c <flatcc_builder_extend_vector@@Base+0x38>
   13a14:	ldr	r3, [r4, #32]
   13a18:	mov	r0, r4
   13a1c:	ldr	r1, [r3, #16]
   13a20:	mul	r1, r1, r5
   13a24:	pop	{r4, r5, r6, lr}
   13a28:	b	12928 <_start@@Base+0x468>
   13a2c:	mov	r0, #0
   13a30:	pop	{r4, r5, r6, pc}

00013a34 <flatcc_builder_vector_push@@Base>:
   13a34:	ldr	r3, [r0, #32]
   13a38:	push	{r4, lr}
   13a3c:	ldrh	r2, [r3, #14]
   13a40:	cmp	r2, #4
   13a44:	beq	13a5c <flatcc_builder_vector_push@@Base+0x28>
   13a48:	ldr	r3, [pc, #68]	; 13a94 <flatcc_builder_vector_push@@Base+0x60>
   13a4c:	movw	r2, #907	; 0x38b
   13a50:	ldr	r1, [pc, #64]	; 13a98 <flatcc_builder_vector_push@@Base+0x64>
   13a54:	ldr	r0, [pc, #64]	; 13a9c <flatcc_builder_vector_push@@Base+0x68>
   13a58:	bl	12044 <__assert_fail@plt>
   13a5c:	ldr	r2, [r3, #20]
   13a60:	ldr	ip, [r3, #24]
   13a64:	cmp	r2, ip
   13a68:	bls	13a80 <flatcc_builder_vector_push@@Base+0x4c>
   13a6c:	ldr	r3, [pc, #32]	; 13a94 <flatcc_builder_vector_push@@Base+0x60>
   13a70:	mov	r2, #908	; 0x38c
   13a74:	ldr	r1, [pc, #28]	; 13a98 <flatcc_builder_vector_push@@Base+0x64>
   13a78:	ldr	r0, [pc, #32]	; 13aa0 <flatcc_builder_vector_push@@Base+0x6c>
   13a7c:	b	13a58 <flatcc_builder_vector_push@@Base+0x24>
   13a80:	add	r2, r2, #1
   13a84:	pop	{r4, lr}
   13a88:	str	r2, [r3, #20]
   13a8c:	ldr	r2, [r3, #16]
   13a90:	b	129f8 <_start@@Base+0x538>
   13a94:	andeq	r6, r1, r9, ror #6
   13a98:	andeq	r6, r1, ip, lsr r7
   13a9c:	andeq	r6, r1, r6, ror #16
   13aa0:	muleq	r1, r2, r8

00013aa4 <flatcc_builder_append_vector@@Base>:
   13aa4:	push	{r4, r5, r6, lr}
   13aa8:	mov	r4, r0
   13aac:	ldr	r0, [r0, #32]
   13ab0:	ldrh	r3, [r0, #14]
   13ab4:	cmp	r3, #4
   13ab8:	beq	13ad0 <flatcc_builder_append_vector@@Base+0x2c>
   13abc:	ldr	r3, [pc, #76]	; 13b10 <flatcc_builder_append_vector@@Base+0x6c>
   13ac0:	movw	r2, #915	; 0x393
   13ac4:	ldr	r1, [pc, #72]	; 13b14 <flatcc_builder_append_vector@@Base+0x70>
   13ac8:	ldr	r0, [pc, #72]	; 13b18 <flatcc_builder_append_vector@@Base+0x74>
   13acc:	bl	12044 <__assert_fail@plt>
   13ad0:	mov	r6, r1
   13ad4:	mov	r5, r2
   13ad8:	mov	r1, r2
   13adc:	ldr	r2, [r0, #24]
   13ae0:	bl	12ecc <flatcc_builder_default_alloc@@Base+0x458>
   13ae4:	cmp	r0, #0
   13ae8:	bne	13b08 <flatcc_builder_append_vector@@Base+0x64>
   13aec:	ldr	r3, [r4, #32]
   13af0:	mov	r1, r6
   13af4:	mov	r0, r4
   13af8:	ldr	r2, [r3, #16]
   13afc:	mul	r2, r2, r5
   13b00:	pop	{r4, r5, r6, lr}
   13b04:	b	129f8 <_start@@Base+0x538>
   13b08:	mov	r0, #0
   13b0c:	pop	{r4, r5, r6, pc}
   13b10:	andeq	r6, r1, r4, lsl #7
   13b14:	andeq	r6, r1, ip, lsr r7
   13b18:	andeq	r6, r1, r6, ror #16

00013b1c <flatcc_builder_extend_offset_vector@@Base>:
   13b1c:	push	{r4, r5, r6, lr}
   13b20:	mvn	r2, #-1073741824	; 0xc0000000
   13b24:	mov	r4, r0
   13b28:	mov	r5, r1
   13b2c:	ldr	r0, [r0, #32]
   13b30:	bl	12ecc <flatcc_builder_default_alloc@@Base+0x458>
   13b34:	cmp	r0, #0
   13b38:	bne	13b4c <flatcc_builder_extend_offset_vector@@Base+0x30>
   13b3c:	lsl	r1, r5, #2
   13b40:	mov	r0, r4
   13b44:	pop	{r4, r5, r6, lr}
   13b48:	b	12928 <_start@@Base+0x468>
   13b4c:	mov	r0, #0
   13b50:	pop	{r4, r5, r6, pc}

00013b54 <flatcc_builder_offset_vector_push@@Base>:
   13b54:	ldr	r2, [r0, #32]
   13b58:	push	{r4, lr}
   13b5c:	ldrh	r3, [r2, #14]
   13b60:	cmp	r3, #5
   13b64:	beq	13b7c <flatcc_builder_offset_vector_push@@Base+0x28>
   13b68:	ldr	r3, [pc, #64]	; 13bb0 <flatcc_builder_offset_vector_push@@Base+0x5c>
   13b6c:	movw	r2, #934	; 0x3a6
   13b70:	ldr	r1, [pc, #60]	; 13bb4 <flatcc_builder_offset_vector_push@@Base+0x60>
   13b74:	ldr	r0, [pc, #60]	; 13bb8 <flatcc_builder_offset_vector_push@@Base+0x64>
   13b78:	bl	12044 <__assert_fail@plt>
   13b7c:	ldr	r3, [r2, #20]
   13b80:	cmn	r3, #-1073741823	; 0xc0000001
   13b84:	beq	13ba8 <flatcc_builder_offset_vector_push@@Base+0x54>
   13b88:	add	r3, r3, #1
   13b8c:	mov	r4, r1
   13b90:	mov	r1, #4
   13b94:	str	r3, [r2, #20]
   13b98:	bl	12928 <_start@@Base+0x468>
   13b9c:	cmp	r0, #0
   13ba0:	strne	r4, [r0]
   13ba4:	pop	{r4, pc}
   13ba8:	mov	r0, #0
   13bac:	pop	{r4, pc}
   13bb0:	andeq	r6, r1, r1, lsr #7
   13bb4:	andeq	r6, r1, ip, lsr r7
   13bb8:	andeq	r6, r1, pc, asr #17

00013bbc <flatcc_builder_append_offset_vector@@Base>:
   13bbc:	push	{r4, r5, r6, lr}
   13bc0:	mov	r4, r0
   13bc4:	ldr	r0, [r0, #32]
   13bc8:	ldrh	r3, [r0, #14]
   13bcc:	cmp	r3, #5
   13bd0:	beq	13be8 <flatcc_builder_append_offset_vector@@Base+0x2c>
   13bd4:	ldr	r3, [pc, #68]	; 13c20 <flatcc_builder_append_offset_vector@@Base+0x64>
   13bd8:	mov	r2, #948	; 0x3b4
   13bdc:	ldr	r1, [pc, #64]	; 13c24 <flatcc_builder_append_offset_vector@@Base+0x68>
   13be0:	ldr	r0, [pc, #64]	; 13c28 <flatcc_builder_append_offset_vector@@Base+0x6c>
   13be4:	bl	12044 <__assert_fail@plt>
   13be8:	mov	r5, r2
   13bec:	mov	r6, r1
   13bf0:	mvn	r2, #-1073741824	; 0xc0000000
   13bf4:	mov	r1, r5
   13bf8:	bl	12ecc <flatcc_builder_default_alloc@@Base+0x458>
   13bfc:	cmp	r0, #0
   13c00:	bne	13c18 <flatcc_builder_append_offset_vector@@Base+0x5c>
   13c04:	lsl	r2, r5, #2
   13c08:	mov	r1, r6
   13c0c:	mov	r0, r4
   13c10:	pop	{r4, r5, r6, lr}
   13c14:	b	129f8 <_start@@Base+0x538>
   13c18:	mov	r0, #0
   13c1c:	pop	{r4, r5, r6, pc}
   13c20:	andeq	r6, r1, r3, asr #7
   13c24:	andeq	r6, r1, ip, lsr r7
   13c28:	andeq	r6, r1, pc, asr #17

00013c2c <flatcc_builder_extend_string@@Base>:
   13c2c:	push	{r4, r5, r6, lr}
   13c30:	mov	r4, r0
   13c34:	ldr	r0, [r0, #32]
   13c38:	ldrh	r3, [r0, #14]
   13c3c:	cmp	r3, #6
   13c40:	beq	13c58 <flatcc_builder_extend_string@@Base+0x2c>
   13c44:	ldr	r3, [pc, #56]	; 13c84 <flatcc_builder_extend_string@@Base+0x58>
   13c48:	movw	r2, #957	; 0x3bd
   13c4c:	ldr	r1, [pc, #52]	; 13c88 <flatcc_builder_extend_string@@Base+0x5c>
   13c50:	ldr	r0, [pc, #52]	; 13c8c <flatcc_builder_extend_string@@Base+0x60>
   13c54:	bl	12044 <__assert_fail@plt>
   13c58:	mvn	r2, #0
   13c5c:	mov	r5, r1
   13c60:	bl	12ecc <flatcc_builder_default_alloc@@Base+0x458>
   13c64:	cmp	r0, #0
   13c68:	bne	13c7c <flatcc_builder_extend_string@@Base+0x50>
   13c6c:	mov	r1, r5
   13c70:	mov	r0, r4
   13c74:	pop	{r4, r5, r6, lr}
   13c78:	b	12928 <_start@@Base+0x468>
   13c7c:	mov	r0, #0
   13c80:	pop	{r4, r5, r6, pc}
   13c84:	andeq	r6, r1, r7, ror #7
   13c88:	andeq	r6, r1, ip, lsr r7
   13c8c:	andeq	r6, r1, r2, lsl #18

00013c90 <flatcc_builder_append_string@@Base>:
   13c90:	push	{r4, r5, r6, lr}
   13c94:	mov	r4, r0
   13c98:	ldr	r0, [r0, #32]
   13c9c:	ldrh	r3, [r0, #14]
   13ca0:	cmp	r3, #6
   13ca4:	beq	13cbc <flatcc_builder_append_string@@Base+0x2c>
   13ca8:	ldr	r3, [pc, #68]	; 13cf4 <flatcc_builder_append_string@@Base+0x64>
   13cac:	movw	r2, #966	; 0x3c6
   13cb0:	ldr	r1, [pc, #64]	; 13cf8 <flatcc_builder_append_string@@Base+0x68>
   13cb4:	ldr	r0, [pc, #64]	; 13cfc <flatcc_builder_append_string@@Base+0x6c>
   13cb8:	bl	12044 <__assert_fail@plt>
   13cbc:	mov	r5, r2
   13cc0:	mov	r6, r1
   13cc4:	mvn	r2, #0
   13cc8:	mov	r1, r5
   13ccc:	bl	12ecc <flatcc_builder_default_alloc@@Base+0x458>
   13cd0:	cmp	r0, #0
   13cd4:	bne	13cec <flatcc_builder_append_string@@Base+0x5c>
   13cd8:	mov	r2, r5
   13cdc:	mov	r1, r6
   13ce0:	mov	r0, r4
   13ce4:	pop	{r4, r5, r6, lr}
   13ce8:	b	129f8 <_start@@Base+0x538>
   13cec:	mov	r0, #0
   13cf0:	pop	{r4, r5, r6, pc}
   13cf4:	andeq	r6, r1, r4, lsl #8
   13cf8:	andeq	r6, r1, ip, lsr r7
   13cfc:	andeq	r6, r1, r2, lsl #18

00013d00 <flatcc_builder_append_string_str@@Base>:
   13d00:	push	{r4, r5, r6, lr}
   13d04:	mov	r5, r0
   13d08:	mov	r0, r1
   13d0c:	mov	r4, r1
   13d10:	bl	11ffc <strlen@plt>
   13d14:	mov	r2, r0
   13d18:	mov	r1, r4
   13d1c:	mov	r0, r5
   13d20:	pop	{r4, r5, r6, lr}
   13d24:	b	13c90 <flatcc_builder_append_string@@Base>

00013d28 <flatcc_builder_append_string_strn@@Base>:
   13d28:	push	{r4, r5, r6, lr}
   13d2c:	mov	r4, r1
   13d30:	mov	r6, r0
   13d34:	mov	r1, #0
   13d38:	mov	r0, r4
   13d3c:	mov	r5, r2
   13d40:	bl	12020 <memchr@plt>
   13d44:	cmp	r0, #0
   13d48:	mov	r1, r4
   13d4c:	subne	r5, r0, r4
   13d50:	mov	r0, r6
   13d54:	mov	r2, r5
   13d58:	pop	{r4, r5, r6, lr}
   13d5c:	b	13c90 <flatcc_builder_append_string@@Base>

00013d60 <flatcc_builder_truncate_vector@@Base>:
   13d60:	ldr	r3, [r0, #32]
   13d64:	push	{r4, lr}
   13d68:	ldrh	r2, [r3, #14]
   13d6c:	cmp	r2, #4
   13d70:	beq	13d88 <flatcc_builder_truncate_vector@@Base+0x28>
   13d74:	ldr	r3, [pc, #72]	; 13dc4 <flatcc_builder_truncate_vector@@Base+0x64>
   13d78:	movw	r2, #985	; 0x3d9
   13d7c:	ldr	r1, [pc, #68]	; 13dc8 <flatcc_builder_truncate_vector@@Base+0x68>
   13d80:	ldr	r0, [pc, #68]	; 13dcc <flatcc_builder_truncate_vector@@Base+0x6c>
   13d84:	bl	12044 <__assert_fail@plt>
   13d88:	ldr	r2, [r3, #20]
   13d8c:	cmp	r2, r1
   13d90:	bcs	13da8 <flatcc_builder_truncate_vector@@Base+0x48>
   13d94:	ldr	r3, [pc, #40]	; 13dc4 <flatcc_builder_truncate_vector@@Base+0x64>
   13d98:	movw	r2, #986	; 0x3da
   13d9c:	ldr	r1, [pc, #36]	; 13dc8 <flatcc_builder_truncate_vector@@Base+0x68>
   13da0:	ldr	r0, [pc, #40]	; 13dd0 <flatcc_builder_truncate_vector@@Base+0x70>
   13da4:	b	13d84 <flatcc_builder_truncate_vector@@Base+0x24>
   13da8:	sub	r2, r2, r1
   13dac:	str	r2, [r3, #20]
   13db0:	ldr	r3, [r3, #16]
   13db4:	mul	r1, r3, r1
   13db8:	bl	129d8 <_start@@Base+0x518>
   13dbc:	mov	r0, #0
   13dc0:	pop	{r4, pc}
   13dc4:	andeq	r6, r1, r1, lsr #8
   13dc8:	andeq	r6, r1, ip, lsr r7
   13dcc:	andeq	r6, r1, r6, ror #16
   13dd0:	andeq	r6, r1, lr, lsr #18

00013dd4 <flatcc_builder_truncate_offset_vector@@Base>:
   13dd4:	ldr	r3, [r0, #32]
   13dd8:	push	{r4, lr}
   13ddc:	ldrh	r2, [r3, #14]
   13de0:	cmp	r2, #5
   13de4:	beq	13dfc <flatcc_builder_truncate_offset_vector@@Base+0x28>
   13de8:	ldr	r3, [pc, #72]	; 13e38 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   13dec:	movw	r2, #994	; 0x3e2
   13df0:	ldr	r1, [pc, #68]	; 13e3c <flatcc_builder_truncate_offset_vector@@Base+0x68>
   13df4:	ldr	r0, [pc, #68]	; 13e40 <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   13df8:	bl	12044 <__assert_fail@plt>
   13dfc:	ldr	r2, [r3, #20]
   13e00:	cmp	r2, r1
   13e04:	bcs	13e1c <flatcc_builder_truncate_offset_vector@@Base+0x48>
   13e08:	ldr	r3, [pc, #40]	; 13e38 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   13e0c:	movw	r2, #995	; 0x3e3
   13e10:	ldr	r1, [pc, #36]	; 13e3c <flatcc_builder_truncate_offset_vector@@Base+0x68>
   13e14:	ldr	r0, [pc, #40]	; 13e44 <flatcc_builder_truncate_offset_vector@@Base+0x70>
   13e18:	b	13df8 <flatcc_builder_truncate_offset_vector@@Base+0x24>
   13e1c:	sub	r2, r2, r1
   13e20:	str	r2, [r3, #20]
   13e24:	ldr	r3, [r3, #16]
   13e28:	mul	r1, r3, r1
   13e2c:	bl	129d8 <_start@@Base+0x518>
   13e30:	mov	r0, #0
   13e34:	pop	{r4, pc}
   13e38:	andeq	r6, r1, r0, asr #8
   13e3c:	andeq	r6, r1, ip, lsr r7
   13e40:	andeq	r6, r1, pc, asr #17
   13e44:	andeq	r6, r1, r2, asr r9

00013e48 <flatcc_builder_truncate_string@@Base>:
   13e48:	ldr	r2, [r0, #32]
   13e4c:	push	{r4, lr}
   13e50:	ldrh	r3, [r2, #14]
   13e54:	cmp	r3, #6
   13e58:	beq	13e70 <flatcc_builder_truncate_string@@Base+0x28>
   13e5c:	ldr	r3, [pc, #64]	; 13ea4 <flatcc_builder_truncate_string@@Base+0x5c>
   13e60:	movw	r2, #1003	; 0x3eb
   13e64:	ldr	r1, [pc, #60]	; 13ea8 <flatcc_builder_truncate_string@@Base+0x60>
   13e68:	ldr	r0, [pc, #60]	; 13eac <flatcc_builder_truncate_string@@Base+0x64>
   13e6c:	bl	12044 <__assert_fail@plt>
   13e70:	ldr	r3, [r2, #20]
   13e74:	cmp	r3, r1
   13e78:	bcs	13e90 <flatcc_builder_truncate_string@@Base+0x48>
   13e7c:	ldr	r3, [pc, #32]	; 13ea4 <flatcc_builder_truncate_string@@Base+0x5c>
   13e80:	mov	r2, #1004	; 0x3ec
   13e84:	ldr	r1, [pc, #28]	; 13ea8 <flatcc_builder_truncate_string@@Base+0x60>
   13e88:	ldr	r0, [pc, #32]	; 13eb0 <flatcc_builder_truncate_string@@Base+0x68>
   13e8c:	b	13e6c <flatcc_builder_truncate_string@@Base+0x24>
   13e90:	sub	r3, r3, r1
   13e94:	str	r3, [r2, #20]
   13e98:	bl	129d8 <_start@@Base+0x518>
   13e9c:	mov	r0, #0
   13ea0:	pop	{r4, pc}
   13ea4:	andeq	r6, r1, r6, ror #8
   13ea8:	andeq	r6, r1, ip, lsr r7
   13eac:	andeq	r6, r1, r2, lsl #18
   13eb0:	andeq	r6, r1, sp, lsl #19

00013eb4 <flatcc_builder_start_vector@@Base>:
   13eb4:	cmp	r2, #4
   13eb8:	push	{r4, r5, r6, r7, r8, lr}
   13ebc:	mov	r7, r1
   13ec0:	movcs	r1, r2
   13ec4:	movcc	r1, #4
   13ec8:	mov	r5, r0
   13ecc:	mov	r6, r3
   13ed0:	bl	12bdc <flatcc_builder_default_alloc@@Base+0x168>
   13ed4:	subs	r4, r0, #0
   13ed8:	mvnne	r4, #0
   13edc:	bne	13f04 <flatcc_builder_start_vector@@Base+0x50>
   13ee0:	ldr	r2, [r5, #32]
   13ee4:	mov	r3, #4
   13ee8:	mvn	r1, #3
   13eec:	mov	r0, r5
   13ef0:	strh	r3, [r2, #14]
   13ef4:	str	r7, [r2, #16]
   13ef8:	str	r4, [r2, #20]
   13efc:	str	r6, [r2, #24]
   13f00:	bl	128ac <_start@@Base+0x3ec>
   13f04:	mov	r0, r4
   13f08:	pop	{r4, r5, r6, r7, r8, pc}

00013f0c <flatcc_builder_start_offset_vector@@Base>:
   13f0c:	push	{r4, r5, r6, lr}
   13f10:	mov	r1, #4
   13f14:	mov	r5, r0
   13f18:	bl	12bdc <flatcc_builder_default_alloc@@Base+0x168>
   13f1c:	subs	r4, r0, #0
   13f20:	mvnne	r4, #0
   13f24:	bne	13f4c <flatcc_builder_start_offset_vector@@Base+0x40>
   13f28:	ldr	r3, [r5, #32]
   13f2c:	mov	r2, #4
   13f30:	mvn	r1, #3
   13f34:	mov	r0, r5
   13f38:	str	r2, [r3, #16]
   13f3c:	mov	r2, #5
   13f40:	strh	r2, [r3, #14]
   13f44:	str	r4, [r3, #20]
   13f48:	bl	128ac <_start@@Base+0x3ec>
   13f4c:	mov	r0, r4
   13f50:	pop	{r4, r5, r6, pc}

00013f54 <flatcc_builder_start_string@@Base>:
   13f54:	push	{r4, r5, r6, lr}
   13f58:	mov	r1, #1
   13f5c:	mov	r5, r0
   13f60:	bl	12bdc <flatcc_builder_default_alloc@@Base+0x168>
   13f64:	subs	r4, r0, #0
   13f68:	mvnne	r4, #0
   13f6c:	bne	13f94 <flatcc_builder_start_string@@Base+0x40>
   13f70:	ldr	r3, [r5, #32]
   13f74:	mov	r2, #1
   13f78:	mvn	r1, #3
   13f7c:	mov	r0, r5
   13f80:	str	r2, [r3, #16]
   13f84:	mov	r2, #6
   13f88:	strh	r2, [r3, #14]
   13f8c:	str	r4, [r3, #20]
   13f90:	bl	128ac <_start@@Base+0x3ec>
   13f94:	mov	r0, r4
   13f98:	pop	{r4, r5, r6, pc}

00013f9c <flatcc_builder_reserve_table@@Base>:
   13f9c:	cmp	r1, #0
   13fa0:	bge	13fbc <flatcc_builder_reserve_table@@Base+0x20>
   13fa4:	push	{r4, lr}
   13fa8:	movw	r2, #1065	; 0x429
   13fac:	ldr	r3, [pc, #12]	; 13fc0 <flatcc_builder_reserve_table@@Base+0x24>
   13fb0:	ldr	r1, [pc, #12]	; 13fc4 <flatcc_builder_reserve_table@@Base+0x28>
   13fb4:	ldr	r0, [pc, #12]	; 13fc8 <flatcc_builder_reserve_table@@Base+0x2c>
   13fb8:	bl	12044 <__assert_fail@plt>
   13fbc:	b	12cb4 <flatcc_builder_default_alloc@@Base+0x240>
   13fc0:	andeq	r6, r1, r5, lsl #9
   13fc4:	andeq	r6, r1, ip, lsr r7
   13fc8:	andeq	r6, r1, r5, asr #19

00013fcc <flatcc_builder_start_table@@Base>:
   13fcc:	push	{r4, r5, r6, lr}
   13fd0:	mov	r5, r1
   13fd4:	mov	r1, #4
   13fd8:	mov	r4, r0
   13fdc:	bl	12bdc <flatcc_builder_default_alloc@@Base+0x168>
   13fe0:	cmp	r0, #0
   13fe4:	beq	13ff4 <flatcc_builder_start_table@@Base+0x28>
   13fe8:	mvn	r5, #0
   13fec:	mov	r0, r5
   13ff0:	pop	{r4, r5, r6, pc}
   13ff4:	ldr	r2, [r4, #4]
   13ff8:	ldr	r3, [r4, #32]
   13ffc:	ldr	r1, [r4, #52]	; 0x34
   14000:	sub	r2, r2, r1
   14004:	ldr	r1, [r4, #76]	; 0x4c
   14008:	str	r2, [r3, #16]
   1400c:	ldr	r2, [r4]
   14010:	sub	r2, r2, r1
   14014:	mov	r1, r5
   14018:	str	r2, [r3, #20]
   1401c:	ldr	r2, [r4, #12]
   14020:	str	r2, [r3, #24]
   14024:	ldrh	r2, [r4, #8]
   14028:	strh	r2, [r3, #28]
   1402c:	ldr	r2, [pc, #44]	; 14060 <flatcc_builder_start_table@@Base+0x94>
   14030:	strh	r0, [r4, #8]
   14034:	mov	r0, r4
   14038:	str	r2, [r4, #12]
   1403c:	mov	r2, #3
   14040:	strh	r2, [r3, #14]
   14044:	bl	12cb4 <flatcc_builder_default_alloc@@Base+0x240>
   14048:	subs	r5, r0, #0
   1404c:	bne	13fe8 <flatcc_builder_start_table@@Base+0x1c>
   14050:	movw	r1, #65532	; 0xfffc
   14054:	mov	r0, r4
   14058:	bl	128ac <_start@@Base+0x3ec>
   1405c:	b	13fec <flatcc_builder_start_table@@Base+0x20>
   14060:	svccs	0x00693b52

00014064 <flatcc_builder_create_vtable@@Base>:
   14064:	mov	r3, #0
   14068:	push	{lr}		; (str lr, [sp, #-4]!)
   1406c:	sub	sp, sp, #76	; 0x4c
   14070:	cmp	r2, #0
   14074:	str	r3, [sp]
   14078:	str	r3, [sp, #4]
   1407c:	movne	r3, #1
   14080:	strne	r1, [sp, #8]
   14084:	mov	r1, sp
   14088:	strdne	r2, [sp]
   1408c:	ldr	r3, [r0, #152]	; 0x98
   14090:	strne	r2, [sp, #12]
   14094:	cmp	r3, #0
   14098:	bne	140b4 <flatcc_builder_create_vtable@@Base+0x50>
   1409c:	ldr	r3, [r0, #180]	; 0xb4
   140a0:	cmp	r3, #0
   140a4:	bne	140b4 <flatcc_builder_create_vtable@@Base+0x50>
   140a8:	bl	12d38 <flatcc_builder_default_alloc@@Base+0x2c4>
   140ac:	add	sp, sp, #76	; 0x4c
   140b0:	pop	{pc}		; (ldr pc, [sp], #4)
   140b4:	bl	12e54 <flatcc_builder_default_alloc@@Base+0x3e0>
   140b8:	cmp	r0, #0
   140bc:	addne	r0, r0, #1
   140c0:	b	140ac <flatcc_builder_create_vtable@@Base+0x48>

000140c4 <flatcc_builder_create_cached_vtable@@Base>:
   140c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140c8:	mov	r6, r3
   140cc:	sub	sp, sp, #20
   140d0:	mov	r4, r0
   140d4:	mov	sl, r1
   140d8:	mov	r7, r2
   140dc:	ldr	r3, [r0, #116]	; 0x74
   140e0:	cmp	r3, #0
   140e4:	bne	1418c <flatcc_builder_create_cached_vtable@@Base+0xc8>
   140e8:	ldr	r5, [r0, #124]	; 0x7c
   140ec:	add	r9, r0, #92	; 0x5c
   140f0:	cmp	r5, #0
   140f4:	beq	1410c <flatcc_builder_create_cached_vtable@@Base+0x48>
   140f8:	ldr	r3, [pc, #560]	; 14330 <flatcc_builder_create_cached_vtable@@Base+0x26c>
   140fc:	movw	r2, #342	; 0x156
   14100:	ldr	r1, [pc, #556]	; 14334 <flatcc_builder_create_cached_vtable@@Base+0x270>
   14104:	ldr	r0, [pc, #556]	; 14338 <flatcc_builder_create_cached_vtable@@Base+0x274>
   14108:	bl	12044 <__assert_fail@plt>
   1410c:	mov	r3, #16
   14110:	mov	r2, r5
   14114:	str	r5, [sp]
   14118:	mov	r1, #6
   1411c:	bl	12b6c <flatcc_builder_default_alloc@@Base+0xf8>
   14120:	cmp	r0, #0
   14124:	bne	14134 <flatcc_builder_create_cached_vtable@@Base+0x70>
   14128:	mov	r0, #0
   1412c:	add	sp, sp, #20
   14130:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14134:	mov	r3, #16
   14138:	mov	r1, r9
   1413c:	ldr	r0, [r4, #40]	; 0x28
   14140:	mov	r2, #256	; 0x100
   14144:	str	r3, [r4, #124]	; 0x7c
   14148:	mov	r3, #5
   1414c:	ldr	r8, [r4, #48]	; 0x30
   14150:	str	r3, [sp]
   14154:	mov	r3, #1
   14158:	blx	r8
   1415c:	cmp	r0, #0
   14160:	moveq	r3, #256	; 0x100
   14164:	ldreq	r1, [r4, #96]	; 0x60
   14168:	bne	14128 <flatcc_builder_create_cached_vtable@@Base+0x64>
   1416c:	lsl	r2, r3, #1
   14170:	cmp	r2, r1
   14174:	bls	1424c <flatcc_builder_create_cached_vtable@@Base+0x188>
   14178:	lsr	r3, r3, #2
   1417c:	mov	r2, #1
   14180:	cmp	r3, r2, lsl r5
   14184:	bhi	14254 <flatcc_builder_create_cached_vtable@@Base+0x190>
   14188:	str	r5, [r4, #116]	; 0x74
   1418c:	ldr	r8, [r4, #92]	; 0x5c
   14190:	ldr	r3, [r4, #116]	; 0x74
   14194:	rsb	r3, r3, #32
   14198:	lsr	r6, r6, r3
   1419c:	adds	r3, r8, r6, lsl #2
   141a0:	ldrne	r9, [r8, r6, lsl #2]
   141a4:	movne	fp, #0
   141a8:	str	r3, [sp, #8]
   141ac:	beq	14128 <flatcc_builder_create_cached_vtable@@Base+0x64>
   141b0:	cmp	r9, #0
   141b4:	bne	1425c <flatcc_builder_create_cached_vtable@@Base+0x198>
   141b8:	mov	r3, #16
   141bc:	mov	r1, #6
   141c0:	ldr	r2, [r4, #124]	; 0x7c
   141c4:	mov	r0, r4
   141c8:	str	r9, [sp]
   141cc:	bl	12b6c <flatcc_builder_default_alloc@@Base+0xf8>
   141d0:	subs	r5, r0, #0
   141d4:	beq	14128 <flatcc_builder_create_cached_vtable@@Base+0x64>
   141d8:	ldr	r3, [r4, #124]	; 0x7c
   141dc:	mov	r1, sl
   141e0:	mov	r0, r4
   141e4:	add	r2, r3, #16
   141e8:	str	r2, [r4, #124]	; 0x7c
   141ec:	ldr	r2, [r4, #152]	; 0x98
   141f0:	str	r2, [r5, #4]
   141f4:	ldr	r2, [r8, r6, lsl #2]
   141f8:	str	r2, [r5, #12]
   141fc:	mov	r2, r7
   14200:	str	r3, [r8, r6, lsl #2]
   14204:	bl	14064 <flatcc_builder_create_vtable@@Base>
   14208:	cmp	r0, #0
   1420c:	str	r0, [r5]
   14210:	beq	14128 <flatcc_builder_create_cached_vtable@@Base+0x64>
   14214:	cmp	fp, #0
   14218:	ldrne	r3, [fp, #8]
   1421c:	strne	r3, [r5, #8]
   14220:	bne	142e4 <flatcc_builder_create_cached_vtable@@Base+0x220>
   14224:	ldr	r2, [r4, #120]	; 0x78
   14228:	ldr	r3, [r4, #172]	; 0xac
   1422c:	cmp	r3, #0
   14230:	beq	142ec <flatcc_builder_create_cached_vtable@@Base+0x228>
   14234:	add	r1, r7, r2
   14238:	cmp	r3, r1
   1423c:	bcs	142ec <flatcc_builder_create_cached_vtable@@Base+0x228>
   14240:	mov	r0, r4
   14244:	bl	13078 <flatcc_builder_flush_vtable_cache@@Base>
   14248:	b	142e4 <flatcc_builder_create_cached_vtable@@Base+0x220>
   1424c:	mov	r3, r2
   14250:	b	1416c <flatcc_builder_create_cached_vtable@@Base+0xa8>
   14254:	add	r5, r5, #1
   14258:	b	14180 <flatcc_builder_create_cached_vtable@@Base+0xbc>
   1425c:	ldr	r0, [r4, #68]	; 0x44
   14260:	str	r3, [sp, #12]
   14264:	ldr	r5, [r4, #100]	; 0x64
   14268:	add	r5, r5, r9
   1426c:	ldr	r2, [r5, #8]
   14270:	add	r1, r0, r2
   14274:	ldrh	r2, [r0, r2]
   14278:	cmp	r2, r7
   1427c:	bne	14298 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   14280:	mov	r2, r7
   14284:	mov	r0, sl
   14288:	bl	11f9c <memcmp@plt>
   1428c:	cmp	r0, #0
   14290:	ldr	r3, [sp, #12]
   14294:	beq	142a4 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   14298:	add	r3, r5, #12
   1429c:	ldr	r9, [r5, #12]
   142a0:	b	141b0 <flatcc_builder_create_cached_vtable@@Base+0xec>
   142a4:	ldr	r1, [r5, #4]
   142a8:	ldr	r2, [r4, #152]	; 0x98
   142ac:	cmp	r1, r2
   142b0:	beq	142c4 <flatcc_builder_create_cached_vtable@@Base+0x200>
   142b4:	add	r3, r5, #12
   142b8:	mov	fp, r5
   142bc:	ldr	r9, [r5, #12]
   142c0:	b	141b0 <flatcc_builder_create_cached_vtable@@Base+0xec>
   142c4:	ldr	r2, [sp, #8]
   142c8:	cmp	r3, r2
   142cc:	beq	142e4 <flatcc_builder_create_cached_vtable@@Base+0x220>
   142d0:	ldr	r2, [r5, #12]
   142d4:	str	r2, [r3]
   142d8:	ldr	r3, [r8, r6, lsl #2]
   142dc:	str	r3, [r5, #12]
   142e0:	str	r9, [r8, r6, lsl #2]
   142e4:	ldr	r0, [r5]
   142e8:	b	1412c <flatcc_builder_create_cached_vtable@@Base+0x68>
   142ec:	mov	r3, #0
   142f0:	mov	r1, #2
   142f4:	mov	r0, r4
   142f8:	str	r3, [sp]
   142fc:	mov	r3, r7
   14300:	bl	12b6c <flatcc_builder_default_alloc@@Base+0xf8>
   14304:	cmp	r0, #0
   14308:	mvneq	r0, #0
   1430c:	beq	1412c <flatcc_builder_create_cached_vtable@@Base+0x68>
   14310:	ldr	r3, [r4, #120]	; 0x78
   14314:	mov	r2, r7
   14318:	mov	r1, sl
   1431c:	str	r3, [r5, #8]
   14320:	add	r3, r3, r7
   14324:	str	r3, [r4, #120]	; 0x78
   14328:	bl	11f90 <memcpy@plt>
   1432c:	b	142e4 <flatcc_builder_create_cached_vtable@@Base+0x220>
   14330:	andeq	r6, r1, r2, lsr #9
   14334:	andeq	r6, r1, ip, lsr r7
   14338:	andeq	r6, r1, pc, lsr #19

0001433c <flatcc_builder_create_table@@Base>:
   1433c:	push	{r4, r5, r6, r7, lr}
   14340:	sub	sp, sp, #84	; 0x54
   14344:	ldr	r4, [sp, #108]	; 0x6c
   14348:	ldr	ip, [sp, #112]	; 0x70
   1434c:	cmp	r4, #0
   14350:	bge	14368 <flatcc_builder_create_table@@Base+0x2c>
   14354:	ldr	r3, [pc, #276]	; 14470 <flatcc_builder_create_table@@Base+0x134>
   14358:	movw	r2, #1237	; 0x4d5
   1435c:	ldr	r1, [pc, #272]	; 14474 <flatcc_builder_create_table@@Base+0x138>
   14360:	ldr	r0, [pc, #272]	; 14478 <flatcc_builder_create_table@@Base+0x13c>
   14364:	bl	12044 <__assert_fail@plt>
   14368:	tst	ip, #1
   1436c:	bne	14384 <flatcc_builder_create_table@@Base+0x48>
   14370:	ldr	r3, [pc, #248]	; 14470 <flatcc_builder_create_table@@Base+0x134>
   14374:	movw	r2, #1243	; 0x4db
   14378:	ldr	r1, [pc, #244]	; 14474 <flatcc_builder_create_table@@Base+0x138>
   1437c:	ldr	r0, [pc, #248]	; 1447c <flatcc_builder_create_table@@Base+0x140>
   14380:	b	14364 <flatcc_builder_create_table@@Base+0x28>
   14384:	cmp	r3, #4
   14388:	sub	ip, ip, #1
   1438c:	movcs	lr, r3
   14390:	ldrh	r3, [r0, #128]	; 0x80
   14394:	movcc	lr, #4
   14398:	cmp	r3, lr
   1439c:	ldr	r3, [r0, #136]	; 0x88
   143a0:	strhcc	lr, [r0, #128]	; 0x80
   143a4:	sub	lr, lr, #1
   143a8:	sub	r5, r3, r2
   143ac:	sub	r3, r5, #4
   143b0:	and	lr, lr, r5
   143b4:	sub	ip, r3, ip
   143b8:	sub	r3, lr, r3
   143bc:	sub	ip, ip, lr
   143c0:	sub	r3, r3, #4
   143c4:	str	ip, [sp, #4]
   143c8:	ldr	ip, [sp, #104]	; 0x68
   143cc:	add	r4, ip, r4, lsl #1
   143d0:	cmp	r4, ip
   143d4:	bne	14458 <flatcc_builder_create_table@@Base+0x11c>
   143d8:	mov	r3, #4
   143dc:	cmp	r2, #0
   143e0:	add	ip, sp, r3
   143e4:	str	r3, [sp, #8]
   143e8:	str	ip, [sp, #16]
   143ec:	str	r3, [sp, #20]
   143f0:	mov	r3, #1
   143f4:	str	r3, [sp, #12]
   143f8:	beq	14414 <flatcc_builder_create_table@@Base+0xd8>
   143fc:	add	r3, r2, #4
   14400:	str	r3, [sp, #8]
   14404:	mov	r3, #2
   14408:	str	r1, [sp, #24]
   1440c:	str	r3, [sp, #12]
   14410:	str	r2, [sp, #28]
   14414:	cmp	lr, #0
   14418:	beq	14448 <flatcc_builder_create_table@@Base+0x10c>
   1441c:	ldr	r3, [sp, #8]
   14420:	add	r2, sp, #80	; 0x50
   14424:	ldr	r1, [pc, #84]	; 14480 <flatcc_builder_create_table@@Base+0x144>
   14428:	add	r3, r3, lr
   1442c:	str	r3, [sp, #8]
   14430:	ldr	r3, [sp, #12]
   14434:	add	r3, r3, #1
   14438:	add	r2, r2, r3, lsl #3
   1443c:	str	r3, [sp, #12]
   14440:	str	r1, [r2, #-72]	; 0xffffffb8
   14444:	str	lr, [r2, #-68]	; 0xffffffbc
   14448:	add	r1, sp, #8
   1444c:	bl	12e54 <flatcc_builder_default_alloc@@Base+0x3e0>
   14450:	add	sp, sp, #84	; 0x54
   14454:	pop	{r4, r5, r6, r7, pc}
   14458:	ldrh	r5, [ip], #2
   1445c:	ldr	r6, [r1, r5]
   14460:	sub	r7, r3, r5
   14464:	add	r6, r6, r7
   14468:	str	r6, [r1, r5]
   1446c:	b	143d0 <flatcc_builder_create_table@@Base+0x94>
   14470:	andeq	r6, r1, fp, lsr #9
   14474:	andeq	r6, r1, ip, lsr r7
   14478:			; <UNDEFINED> instruction: 0x000169be
   1447c:	ldrdeq	r6, [r1], -r0
   14480:	andeq	r6, r1, r6, asr r0

00014484 <flatcc_builder_check_required_field@@Base>:
   14484:	ldr	r3, [r0, #32]
   14488:	ldrh	r3, [r3, #14]
   1448c:	cmp	r3, #3
   14490:	beq	144ac <flatcc_builder_check_required_field@@Base+0x28>
   14494:	push	{r4, lr}
   14498:	movw	r2, #1272	; 0x4f8
   1449c:	ldr	r3, [pc, #52]	; 144d8 <flatcc_builder_check_required_field@@Base+0x54>
   144a0:	ldr	r1, [pc, #52]	; 144dc <flatcc_builder_check_required_field@@Base+0x58>
   144a4:	ldr	r0, [pc, #52]	; 144e0 <flatcc_builder_check_required_field@@Base+0x5c>
   144a8:	bl	12044 <__assert_fail@plt>
   144ac:	ldrh	r3, [r0, #8]
   144b0:	cmp	r3, r1
   144b4:	bls	144d0 <flatcc_builder_check_required_field@@Base+0x4c>
   144b8:	ldr	r3, [r0, #4]
   144bc:	lsl	r1, r1, #1
   144c0:	ldrh	r0, [r3, r1]
   144c4:	adds	r0, r0, #0
   144c8:	movne	r0, #1
   144cc:	bx	lr
   144d0:	mov	r0, #0
   144d4:	bx	lr
   144d8:	andeq	r6, r1, r7, asr #9
   144dc:	andeq	r6, r1, ip, lsr r7
   144e0:	ldrdeq	r6, [r1], -fp

000144e4 <flatcc_builder_check_union_field@@Base>:
   144e4:	ldr	r3, [r0, #32]
   144e8:	ldrh	r3, [r3, #14]
   144ec:	cmp	r3, #3
   144f0:	beq	1450c <flatcc_builder_check_union_field@@Base+0x28>
   144f4:	push	{r4, lr}
   144f8:	movw	r2, #1279	; 0x4ff
   144fc:	ldr	r3, [pc, #104]	; 1456c <flatcc_builder_check_union_field@@Base+0x88>
   14500:	ldr	r1, [pc, #104]	; 14570 <flatcc_builder_check_union_field@@Base+0x8c>
   14504:	ldr	r0, [pc, #104]	; 14574 <flatcc_builder_check_union_field@@Base+0x90>
   14508:	bl	12044 <__assert_fail@plt>
   1450c:	cmp	r1, #0
   14510:	beq	14564 <flatcc_builder_check_union_field@@Base+0x80>
   14514:	ldrh	r3, [r0, #8]
   14518:	cmp	r3, r1
   1451c:	bls	14564 <flatcc_builder_check_union_field@@Base+0x80>
   14520:	ldr	r3, [r0, #4]
   14524:	sub	r1, r1, #-2147483647	; 0x80000001
   14528:	lsl	r1, r1, #1
   1452c:	ldrh	r2, [r3, r1]!
   14530:	cmp	r2, #0
   14534:	ldrh	r1, [r3, #2]
   14538:	bne	14548 <flatcc_builder_check_union_field@@Base+0x64>
   1453c:	clz	r0, r1
   14540:	lsr	r0, r0, #5
   14544:	bx	lr
   14548:	ldr	r3, [r0, #16]
   1454c:	ldrb	r3, [r3, r2]
   14550:	cmp	r3, #0
   14554:	beq	1453c <flatcc_builder_check_union_field@@Base+0x58>
   14558:	adds	r0, r1, #0
   1455c:	movne	r0, #1
   14560:	bx	lr
   14564:	mov	r0, #0
   14568:	bx	lr
   1456c:	andeq	r6, r1, fp, ror #9
   14570:	andeq	r6, r1, ip, lsr r7
   14574:	ldrdeq	r6, [r1], -fp

00014578 <flatcc_builder_check_required@@Base>:
   14578:	ldr	r3, [r0, #32]
   1457c:	push	{r4, lr}
   14580:	ldrh	r3, [r3, #14]
   14584:	cmp	r3, #3
   14588:	beq	145a0 <flatcc_builder_check_required@@Base+0x28>
   1458c:	ldr	r3, [pc, #84]	; 145e8 <flatcc_builder_check_required@@Base+0x70>
   14590:	movw	r2, #1297	; 0x511
   14594:	ldr	r1, [pc, #80]	; 145ec <flatcc_builder_check_required@@Base+0x74>
   14598:	ldr	r0, [pc, #80]	; 145f0 <flatcc_builder_check_required@@Base+0x78>
   1459c:	bl	12044 <__assert_fail@plt>
   145a0:	ldrh	r3, [r0, #8]
   145a4:	cmp	r3, r2
   145a8:	subge	r1, r1, #2
   145ac:	movge	ip, #0
   145b0:	bge	145d8 <flatcc_builder_check_required@@Base+0x60>
   145b4:	mov	r0, #0
   145b8:	pop	{r4, pc}
   145bc:	ldrh	r3, [r1, #2]!
   145c0:	ldr	lr, [r0, #4]
   145c4:	lsl	r3, r3, #1
   145c8:	ldrh	r3, [lr, r3]
   145cc:	cmp	r3, #0
   145d0:	beq	145b4 <flatcc_builder_check_required@@Base+0x3c>
   145d4:	add	ip, ip, #1
   145d8:	cmp	ip, r2
   145dc:	blt	145bc <flatcc_builder_check_required@@Base+0x44>
   145e0:	mov	r0, #1
   145e4:	pop	{r4, pc}
   145e8:	andeq	r6, r1, ip, lsl #10
   145ec:	andeq	r6, r1, ip, lsr r7
   145f0:	ldrdeq	r6, [r1], -fp

000145f4 <flatcc_builder_end_table@@Base>:
   145f4:	ldr	r3, [r0, #32]
   145f8:	push	{r4, r5, r6, r7, lr}
   145fc:	sub	sp, sp, #20
   14600:	ldrh	r3, [r3, #14]
   14604:	cmp	r3, #3
   14608:	beq	14620 <flatcc_builder_end_table@@Base+0x2c>
   1460c:	ldr	r3, [pc, #260]	; 14718 <flatcc_builder_end_table@@Base+0x124>
   14610:	movw	r2, #1317	; 0x525
   14614:	ldr	r1, [pc, #256]	; 1471c <flatcc_builder_end_table@@Base+0x128>
   14618:	ldr	r0, [pc, #256]	; 14720 <flatcc_builder_end_table@@Base+0x12c>
   1461c:	bl	12044 <__assert_fail@plt>
   14620:	ldrh	r5, [r0, #8]
   14624:	mov	r4, r0
   14628:	ldr	r1, [r0, #4]
   1462c:	ldr	r3, [r0, #20]
   14630:	add	r5, r5, #2
   14634:	lsl	r5, r5, #1
   14638:	sub	r6, r1, #4
   1463c:	uxth	r5, r5
   14640:	add	r3, r3, #4
   14644:	uxth	r2, r3
   14648:	ldr	r3, [r0, #12]
   1464c:	strh	r5, [r1, #-4]
   14650:	strh	r2, [r1, #-2]
   14654:	ldr	r1, [pc, #200]	; 14724 <flatcc_builder_end_table@@Base+0x130>
   14658:	eor	r3, r3, r5
   1465c:	mul	r3, r1, r3
   14660:	eor	r3, r3, r2
   14664:	mov	r2, r5
   14668:	mul	r3, r1, r3
   1466c:	mov	r1, r6
   14670:	str	r3, [r0, #12]
   14674:	bl	140c4 <flatcc_builder_create_cached_vtable@@Base>
   14678:	subs	r7, r0, #0
   1467c:	beq	1470c <flatcc_builder_end_table@@Base+0x118>
   14680:	mov	r2, r5
   14684:	mov	r1, #0
   14688:	mov	r0, r6
   1468c:	bl	12014 <memset@plt>
   14690:	ldr	r3, [r4, #32]
   14694:	mov	r0, r4
   14698:	ldr	r2, [r4, #76]	; 0x4c
   1469c:	ldr	r3, [r3, #20]
   146a0:	str	r7, [sp, #8]
   146a4:	add	r2, r2, r3
   146a8:	ldr	r3, [r4]
   146ac:	sub	r3, r3, r2
   146b0:	asr	r3, r3, #1
   146b4:	strd	r2, [sp]
   146b8:	ldrh	r3, [r4, #130]	; 0x82
   146bc:	ldr	r1, [r4, #16]
   146c0:	ldr	r2, [r4, #20]
   146c4:	bl	1433c <flatcc_builder_create_table@@Base>
   146c8:	subs	r7, r0, #0
   146cc:	beq	1470c <flatcc_builder_end_table@@Base+0x118>
   146d0:	ldr	r3, [r4, #32]
   146d4:	mov	r0, r4
   146d8:	ldr	r1, [r3, #16]
   146dc:	ldr	r2, [r3, #24]
   146e0:	str	r2, [r4, #12]
   146e4:	ldrh	r2, [r3, #28]
   146e8:	ldr	r3, [r3, #20]
   146ec:	strh	r2, [r4, #8]
   146f0:	ldr	r2, [r4, #52]	; 0x34
   146f4:	add	r2, r2, r1
   146f8:	str	r2, [r4, #4]
   146fc:	ldr	r2, [r4, #76]	; 0x4c
   14700:	add	r3, r2, r3
   14704:	str	r3, [r4]
   14708:	bl	12970 <_start@@Base+0x4b0>
   1470c:	mov	r0, r7
   14710:	add	sp, sp, #20
   14714:	pop	{r4, r5, r6, r7, pc}
   14718:	andeq	r6, r1, sl, lsr #10
   1471c:	andeq	r6, r1, ip, lsr r7
   14720:	ldrdeq	r6, [r1], -fp
   14724:			; <UNDEFINED> instruction: 0x9e3779b1

00014728 <flatcc_builder_create_vector@@Base>:
   14728:	push	{lr}		; (str lr, [sp, #-4]!)
   1472c:	sub	sp, sp, #84	; 0x54
   14730:	ldr	lr, [sp, #92]	; 0x5c
   14734:	ldrh	ip, [sp, #88]	; 0x58
   14738:	cmp	r2, lr
   1473c:	bls	14754 <flatcc_builder_create_vector@@Base+0x2c>
   14740:	ldr	r3, [pc, #184]	; 14800 <flatcc_builder_create_vector@@Base+0xd8>
   14744:	movw	r2, #1365	; 0x555
   14748:	ldr	r1, [pc, #180]	; 14804 <flatcc_builder_create_vector@@Base+0xdc>
   1474c:	ldr	r0, [pc, #180]	; 14808 <flatcc_builder_create_vector@@Base+0xe0>
   14750:	bl	12044 <__assert_fail@plt>
   14754:	ldrh	lr, [r0, #128]	; 0x80
   14758:	mul	r3, r3, r2
   1475c:	cmp	ip, #4
   14760:	str	r2, [sp, #4]
   14764:	movcc	ip, #4
   14768:	ldr	r2, [r0, #136]	; 0x88
   1476c:	cmp	lr, ip
   14770:	sub	r2, r2, r3
   14774:	strhcc	ip, [r0, #128]	; 0x80
   14778:	sub	ip, ip, #1
   1477c:	and	ip, ip, r2
   14780:	mov	r2, #4
   14784:	add	lr, sp, r2
   14788:	cmp	r3, #0
   1478c:	str	r2, [sp, #8]
   14790:	str	lr, [sp, #16]
   14794:	str	r2, [sp, #20]
   14798:	mov	r2, #1
   1479c:	str	r2, [sp, #12]
   147a0:	beq	147bc <flatcc_builder_create_vector@@Base+0x94>
   147a4:	add	r2, r3, #4
   147a8:	str	r3, [sp, #28]
   147ac:	mov	r3, #2
   147b0:	str	r2, [sp, #8]
   147b4:	str	r3, [sp, #12]
   147b8:	str	r1, [sp, #24]
   147bc:	cmp	ip, #0
   147c0:	beq	147f0 <flatcc_builder_create_vector@@Base+0xc8>
   147c4:	ldr	r3, [sp, #8]
   147c8:	add	r2, sp, #80	; 0x50
   147cc:	ldr	r1, [pc, #56]	; 1480c <flatcc_builder_create_vector@@Base+0xe4>
   147d0:	add	r3, r3, ip
   147d4:	str	r3, [sp, #8]
   147d8:	ldr	r3, [sp, #12]
   147dc:	add	r3, r3, #1
   147e0:	add	r2, r2, r3, lsl #3
   147e4:	str	r3, [sp, #12]
   147e8:	str	r1, [r2, #-72]	; 0xffffffb8
   147ec:	str	ip, [r2, #-68]	; 0xffffffbc
   147f0:	add	r1, sp, #8
   147f4:	bl	12e54 <flatcc_builder_default_alloc@@Base+0x3e0>
   147f8:	add	sp, sp, #84	; 0x54
   147fc:	pop	{pc}		; (ldr pc, [sp], #4)
   14800:	andeq	r6, r1, r3, asr #10
   14804:	andeq	r6, r1, ip, lsr r7
   14808:	andeq	r6, r1, r6, lsl #20
   1480c:	andeq	r6, r1, r6, asr r0

00014810 <flatcc_builder_end_vector@@Base>:
   14810:	push	{r0, r1, r2, r4, r5, lr}
   14814:	ldr	r2, [r0, #32]
   14818:	ldrh	r3, [r2, #14]
   1481c:	cmp	r3, #4
   14820:	beq	14838 <flatcc_builder_end_vector@@Base+0x28>
   14824:	ldr	r3, [pc, #76]	; 14878 <flatcc_builder_end_vector@@Base+0x68>
   14828:	movw	r2, #1400	; 0x578
   1482c:	ldr	r1, [pc, #72]	; 1487c <flatcc_builder_end_vector@@Base+0x6c>
   14830:	ldr	r0, [pc, #72]	; 14880 <flatcc_builder_end_vector@@Base+0x70>
   14834:	bl	12044 <__assert_fail@plt>
   14838:	ldr	r3, [r2, #24]
   1483c:	mov	r4, r0
   14840:	str	r3, [sp, #4]
   14844:	ldrh	r3, [r0, #130]	; 0x82
   14848:	str	r3, [sp]
   1484c:	ldr	r3, [r2, #16]
   14850:	ldr	r1, [r0, #16]
   14854:	ldr	r2, [r2, #20]
   14858:	bl	14728 <flatcc_builder_create_vector@@Base>
   1485c:	subs	r5, r0, #0
   14860:	beq	1486c <flatcc_builder_end_vector@@Base+0x5c>
   14864:	mov	r0, r4
   14868:	bl	12970 <_start@@Base+0x4b0>
   1486c:	mov	r0, r5
   14870:	add	sp, sp, #12
   14874:	pop	{r4, r5, pc}
   14878:	andeq	r6, r1, r0, ror #10
   1487c:	andeq	r6, r1, ip, lsr r7
   14880:	andeq	r6, r1, r6, ror #16

00014884 <flatcc_builder_vector_count@@Base>:
   14884:	ldr	r3, [r0, #32]
   14888:	ldr	r0, [r3, #20]
   1488c:	bx	lr

00014890 <flatcc_builder_vector_edit@@Base>:
   14890:	ldr	r0, [r0, #16]
   14894:	bx	lr

00014898 <flatcc_builder_create_offset_vector_direct@@Base>:
   14898:	cmn	r2, #-1073741823	; 0xc0000001
   1489c:	bhi	148a8 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   148a0:	mov	r3, #0
   148a4:	b	12f20 <flatcc_builder_default_alloc@@Base+0x4ac>
   148a8:	mov	r0, #0
   148ac:	bx	lr

000148b0 <flatcc_builder_end_offset_vector@@Base>:
   148b0:	ldr	r3, [r0, #32]
   148b4:	push	{r4, r5, r6, lr}
   148b8:	ldrh	r2, [r3, #14]
   148bc:	cmp	r2, #5
   148c0:	beq	148d8 <flatcc_builder_end_offset_vector@@Base+0x28>
   148c4:	ldr	r3, [pc, #52]	; 14900 <flatcc_builder_end_offset_vector@@Base+0x50>
   148c8:	movw	r2, #1480	; 0x5c8
   148cc:	ldr	r1, [pc, #48]	; 14904 <flatcc_builder_end_offset_vector@@Base+0x54>
   148d0:	ldr	r0, [pc, #48]	; 14908 <flatcc_builder_end_offset_vector@@Base+0x58>
   148d4:	bl	12044 <__assert_fail@plt>
   148d8:	ldr	r1, [r0, #16]
   148dc:	mov	r4, r0
   148e0:	ldr	r2, [r3, #20]
   148e4:	bl	14898 <flatcc_builder_create_offset_vector_direct@@Base>
   148e8:	subs	r5, r0, #0
   148ec:	beq	148f8 <flatcc_builder_end_offset_vector@@Base+0x48>
   148f0:	mov	r0, r4
   148f4:	bl	12970 <_start@@Base+0x4b0>
   148f8:	mov	r0, r5
   148fc:	pop	{r4, r5, r6, pc}
   14900:	andeq	r6, r1, sl, ror r5
   14904:	andeq	r6, r1, ip, lsr r7
   14908:	andeq	r6, r1, pc, asr #17

0001490c <flatcc_builder_create_offset_vector@@Base>:
   1490c:	push	{r4, r5, r6, lr}
   14910:	mov	r4, r0
   14914:	mov	r6, r1
   14918:	mov	r5, r2
   1491c:	bl	13f0c <flatcc_builder_start_offset_vector@@Base>
   14920:	cmp	r0, #0
   14924:	bne	14954 <flatcc_builder_create_offset_vector@@Base+0x48>
   14928:	mov	r1, r5
   1492c:	mov	r0, r4
   14930:	bl	13b1c <flatcc_builder_extend_offset_vector@@Base>
   14934:	cmp	r0, #0
   14938:	beq	14954 <flatcc_builder_create_offset_vector@@Base+0x48>
   1493c:	lsl	r2, r5, #2
   14940:	mov	r1, r6
   14944:	bl	11f90 <memcpy@plt>
   14948:	mov	r0, r4
   1494c:	pop	{r4, r5, r6, lr}
   14950:	b	148b0 <flatcc_builder_end_offset_vector@@Base>
   14954:	mov	r0, #0
   14958:	pop	{r4, r5, r6, pc}

0001495c <flatcc_builder_end_offset_vector_for_unions@@Base>:
   1495c:	ldr	r2, [r0, #32]
   14960:	mov	r3, r1
   14964:	push	{r4, r5, r6, lr}
   14968:	ldrh	r1, [r2, #14]
   1496c:	cmp	r1, #5
   14970:	beq	14988 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   14974:	ldr	r3, [pc, #64]	; 149bc <flatcc_builder_end_offset_vector_for_unions@@Base+0x60>
   14978:	movw	r2, #1493	; 0x5d5
   1497c:	ldr	r1, [pc, #60]	; 149c0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x64>
   14980:	ldr	r0, [pc, #60]	; 149c4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x68>
   14984:	bl	12044 <__assert_fail@plt>
   14988:	ldr	r2, [r2, #20]
   1498c:	cmn	r2, #-1073741823	; 0xc0000001
   14990:	movhi	r5, #0
   14994:	bhi	149b4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   14998:	ldr	r1, [r0, #16]
   1499c:	mov	r4, r0
   149a0:	bl	12f20 <flatcc_builder_default_alloc@@Base+0x4ac>
   149a4:	subs	r5, r0, #0
   149a8:	beq	149b4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   149ac:	mov	r0, r4
   149b0:	bl	12970 <_start@@Base+0x4b0>
   149b4:	mov	r0, r5
   149b8:	pop	{r4, r5, r6, pc}
   149bc:	muleq	r1, fp, r5
   149c0:	andeq	r6, r1, ip, lsr r7
   149c4:	andeq	r6, r1, pc, asr #17

000149c8 <flatcc_builder_offset_vector_edit@@Base>:
   149c8:	ldr	r0, [r0, #16]
   149cc:	bx	lr

000149d0 <flatcc_builder_offset_vector_count@@Base>:
   149d0:	ldr	r3, [r0, #32]
   149d4:	ldr	r0, [r3, #20]
   149d8:	bx	lr

000149dc <flatcc_builder_create_union_vector_direct@@Base>:
   149dc:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   149e0:	mov	r4, r0
   149e4:	ldr	r5, [sp, #32]
   149e8:	cmn	r5, #-1073741823	; 0xc0000001
   149ec:	bls	14a08 <flatcc_builder_create_union_vector_direct@@Base+0x2c>
   149f0:	mov	r3, #0
   149f4:	str	r3, [r4]
   149f8:	str	r3, [r4, #4]
   149fc:	mov	r0, r4
   14a00:	add	sp, sp, #8
   14a04:	pop	{r4, r5, r6, r7, r8, pc}
   14a08:	mov	r7, r1
   14a0c:	mov	r8, r2
   14a10:	mov	r1, r3
   14a14:	mov	r0, r7
   14a18:	mov	r3, r2
   14a1c:	mov	r2, r5
   14a20:	bl	12f20 <flatcc_builder_default_alloc@@Base+0x4ac>
   14a24:	subs	r6, r0, #0
   14a28:	beq	149f0 <flatcc_builder_create_union_vector_direct@@Base+0x14>
   14a2c:	mvn	r3, #0
   14a30:	mov	r2, r5
   14a34:	mov	r1, r8
   14a38:	mov	r0, r7
   14a3c:	str	r3, [sp, #4]
   14a40:	mov	r3, #1
   14a44:	str	r3, [sp]
   14a48:	bl	14728 <flatcc_builder_create_vector@@Base>
   14a4c:	stm	r4, {r0, r6}
   14a50:	b	149fc <flatcc_builder_create_union_vector_direct@@Base+0x20>

00014a54 <flatcc_builder_create_union_vector@@Base>:
   14a54:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   14a58:	mov	r6, r0
   14a5c:	mov	r0, r1
   14a60:	mov	r5, r1
   14a64:	mov	r8, r2
   14a68:	mov	r7, r3
   14a6c:	bl	13f0c <flatcc_builder_start_offset_vector@@Base>
   14a70:	subs	r4, r0, #0
   14a74:	beq	14a90 <flatcc_builder_create_union_vector@@Base+0x3c>
   14a78:	mov	r3, #0
   14a7c:	str	r3, [r6]
   14a80:	str	r3, [r6, #4]
   14a84:	mov	r0, r6
   14a88:	add	sp, sp, #16
   14a8c:	pop	{r4, r5, r6, r7, r8, pc}
   14a90:	mov	r1, r7
   14a94:	mov	r0, r5
   14a98:	bl	13b1c <flatcc_builder_extend_offset_vector@@Base>
   14a9c:	cmp	r0, #0
   14aa0:	beq	14a78 <flatcc_builder_create_union_vector@@Base+0x24>
   14aa4:	mov	r1, r7
   14aa8:	mov	r0, r5
   14aac:	bl	12928 <_start@@Base+0x468>
   14ab0:	subs	r2, r0, #0
   14ab4:	movne	r1, r4
   14ab8:	addne	r0, r8, #4
   14abc:	ldrne	r3, [r5, #16]
   14ac0:	beq	14a78 <flatcc_builder_create_union_vector@@Base+0x24>
   14ac4:	cmp	r1, r7
   14ac8:	bne	14af8 <flatcc_builder_create_union_vector@@Base+0xa4>
   14acc:	add	r0, sp, #8
   14ad0:	str	r1, [sp]
   14ad4:	mov	r1, r5
   14ad8:	bl	149dc <flatcc_builder_create_union_vector_direct@@Base>
   14adc:	ldr	r7, [sp, #8]
   14ae0:	mov	r0, r5
   14ae4:	ldr	r4, [sp, #12]
   14ae8:	bl	12970 <_start@@Base+0x4b0>
   14aec:	str	r7, [r6]
   14af0:	str	r4, [r6, #4]
   14af4:	b	14a84 <flatcc_builder_create_union_vector@@Base+0x30>
   14af8:	ldrb	ip, [r8, r1, lsl #3]
   14afc:	strb	ip, [r2, r1]
   14b00:	ldr	ip, [r0, r1, lsl #3]
   14b04:	str	ip, [r3, r1, lsl #2]
   14b08:	add	r1, r1, #1
   14b0c:	b	14ac4 <flatcc_builder_create_union_vector@@Base+0x70>

00014b10 <flatcc_builder_start_union_vector@@Base>:
   14b10:	push	{r4, r5, r6, lr}
   14b14:	mov	r1, #4
   14b18:	mov	r5, r0
   14b1c:	bl	12bdc <flatcc_builder_default_alloc@@Base+0x168>
   14b20:	subs	r4, r0, #0
   14b24:	mvnne	r4, #0
   14b28:	bne	14b50 <flatcc_builder_start_union_vector@@Base+0x40>
   14b2c:	ldr	r3, [r5, #32]
   14b30:	mov	r2, #8
   14b34:	mvn	r1, #3
   14b38:	mov	r0, r5
   14b3c:	str	r2, [r3, #16]
   14b40:	mov	r2, #7
   14b44:	strh	r2, [r3, #14]
   14b48:	str	r4, [r3, #20]
   14b4c:	bl	128ac <_start@@Base+0x3ec>
   14b50:	mov	r0, r4
   14b54:	pop	{r4, r5, r6, pc}

00014b58 <flatcc_builder_end_union_vector@@Base>:
   14b58:	ldr	r3, [r1, #32]
   14b5c:	push	{r4, r5, r6, r7, lr}
   14b60:	sub	sp, sp, #20
   14b64:	ldrh	r2, [r3, #14]
   14b68:	cmp	r2, #7
   14b6c:	beq	14b84 <flatcc_builder_end_union_vector@@Base+0x2c>
   14b70:	ldr	r3, [pc, #156]	; 14c14 <flatcc_builder_end_union_vector@@Base+0xbc>
   14b74:	movw	r2, #1617	; 0x651
   14b78:	ldr	r1, [pc, #152]	; 14c18 <flatcc_builder_end_union_vector@@Base+0xc0>
   14b7c:	ldr	r0, [pc, #152]	; 14c1c <flatcc_builder_end_union_vector@@Base+0xc4>
   14b80:	bl	12044 <__assert_fail@plt>
   14b84:	ldr	r7, [r3, #20]
   14b88:	mov	r4, r0
   14b8c:	mov	r5, r1
   14b90:	mov	r0, r1
   14b94:	lsl	r6, r7, #2
   14b98:	add	r1, r6, r7
   14b9c:	bl	12928 <_start@@Base+0x468>
   14ba0:	subs	r3, r0, #0
   14ba4:	streq	r3, [r4]
   14ba8:	streq	r3, [r4, #4]
   14bac:	beq	14bf0 <flatcc_builder_end_union_vector@@Base+0x98>
   14bb0:	ldr	r0, [r5, #16]
   14bb4:	add	r2, r3, r6
   14bb8:	mov	r1, #0
   14bbc:	add	ip, r0, #4
   14bc0:	cmp	r1, r7
   14bc4:	bne	14bfc <flatcc_builder_end_union_vector@@Base+0xa4>
   14bc8:	add	r0, sp, #8
   14bcc:	str	r1, [sp]
   14bd0:	mov	r1, r5
   14bd4:	bl	149dc <flatcc_builder_create_union_vector_direct@@Base>
   14bd8:	ldr	r7, [sp, #8]
   14bdc:	mov	r0, r5
   14be0:	ldr	r6, [sp, #12]
   14be4:	bl	12970 <_start@@Base+0x4b0>
   14be8:	str	r7, [r4]
   14bec:	str	r6, [r4, #4]
   14bf0:	mov	r0, r4
   14bf4:	add	sp, sp, #20
   14bf8:	pop	{r4, r5, r6, r7, pc}
   14bfc:	ldrb	lr, [r0, r1, lsl #3]
   14c00:	strb	lr, [r2, r1]
   14c04:	ldr	lr, [ip, r1, lsl #3]
   14c08:	str	lr, [r3, r1, lsl #2]
   14c0c:	add	r1, r1, #1
   14c10:	b	14bc0 <flatcc_builder_end_union_vector@@Base+0x68>
   14c14:	andeq	r6, r1, r7, asr #11
   14c18:	andeq	r6, r1, ip, lsr r7
   14c1c:	andeq	r6, r1, r9, lsl sl

00014c20 <flatcc_builder_union_vector_edit@@Base>:
   14c20:	ldr	r0, [r0, #16]
   14c24:	bx	lr

00014c28 <flatcc_builder_union_vector_count@@Base>:
   14c28:	ldr	r3, [r0, #32]
   14c2c:	ldr	r0, [r3, #20]
   14c30:	bx	lr

00014c34 <flatcc_builder_extend_union_vector@@Base>:
   14c34:	push	{r4, r5, r6, lr}
   14c38:	mvn	r2, #-536870912	; 0xe0000000
   14c3c:	mov	r4, r0
   14c40:	mov	r5, r1
   14c44:	ldr	r0, [r0, #32]
   14c48:	bl	12ecc <flatcc_builder_default_alloc@@Base+0x458>
   14c4c:	cmp	r0, #0
   14c50:	bne	14c64 <flatcc_builder_extend_union_vector@@Base+0x30>
   14c54:	lsl	r1, r5, #3
   14c58:	mov	r0, r4
   14c5c:	pop	{r4, r5, r6, lr}
   14c60:	b	12928 <_start@@Base+0x468>
   14c64:	mov	r0, #0
   14c68:	pop	{r4, r5, r6, pc}

00014c6c <flatcc_builder_truncate_union_vector@@Base>:
   14c6c:	ldr	r3, [r0, #32]
   14c70:	push	{r4, lr}
   14c74:	ldrh	r2, [r3, #14]
   14c78:	cmp	r2, #7
   14c7c:	beq	14c94 <flatcc_builder_truncate_union_vector@@Base+0x28>
   14c80:	ldr	r3, [pc, #72]	; 14cd0 <flatcc_builder_truncate_union_vector@@Base+0x64>
   14c84:	movw	r2, #1665	; 0x681
   14c88:	ldr	r1, [pc, #68]	; 14cd4 <flatcc_builder_truncate_union_vector@@Base+0x68>
   14c8c:	ldr	r0, [pc, #68]	; 14cd8 <flatcc_builder_truncate_union_vector@@Base+0x6c>
   14c90:	bl	12044 <__assert_fail@plt>
   14c94:	ldr	r2, [r3, #20]
   14c98:	cmp	r2, r1
   14c9c:	bcs	14cb4 <flatcc_builder_truncate_union_vector@@Base+0x48>
   14ca0:	ldr	r3, [pc, #40]	; 14cd0 <flatcc_builder_truncate_union_vector@@Base+0x64>
   14ca4:	movw	r2, #1666	; 0x682
   14ca8:	ldr	r1, [pc, #36]	; 14cd4 <flatcc_builder_truncate_union_vector@@Base+0x68>
   14cac:	ldr	r0, [pc, #40]	; 14cdc <flatcc_builder_truncate_union_vector@@Base+0x70>
   14cb0:	b	14c90 <flatcc_builder_truncate_union_vector@@Base+0x24>
   14cb4:	sub	r2, r2, r1
   14cb8:	str	r2, [r3, #20]
   14cbc:	ldr	r3, [r3, #16]
   14cc0:	mul	r1, r3, r1
   14cc4:	bl	129d8 <_start@@Base+0x518>
   14cc8:	mov	r0, #0
   14ccc:	pop	{r4, pc}
   14cd0:	andeq	r6, r1, r7, ror #11
   14cd4:	andeq	r6, r1, ip, lsr r7
   14cd8:	andeq	r6, r1, r9, lsl sl
   14cdc:	andeq	r6, r1, r2, asr r9

00014ce0 <flatcc_builder_union_vector_push@@Base>:
   14ce0:	push	{r0, r1, r4, lr}
   14ce4:	mov	r4, sp
   14ce8:	stm	r4, {r1, r2}
   14cec:	ldr	r2, [r0, #32]
   14cf0:	ldrh	r3, [r2, #14]
   14cf4:	cmp	r3, #7
   14cf8:	beq	14d10 <flatcc_builder_union_vector_push@@Base+0x30>
   14cfc:	ldr	r3, [pc, #68]	; 14d48 <flatcc_builder_union_vector_push@@Base+0x68>
   14d00:	movw	r2, #1677	; 0x68d
   14d04:	ldr	r1, [pc, #64]	; 14d4c <flatcc_builder_union_vector_push@@Base+0x6c>
   14d08:	ldr	r0, [pc, #64]	; 14d50 <flatcc_builder_union_vector_push@@Base+0x70>
   14d0c:	bl	12044 <__assert_fail@plt>
   14d10:	ldr	r3, [r2, #20]
   14d14:	cmn	r3, #-536870911	; 0xe0000001
   14d18:	moveq	r3, #0
   14d1c:	beq	14d3c <flatcc_builder_union_vector_push@@Base+0x5c>
   14d20:	add	r3, r3, #1
   14d24:	mov	r1, #8
   14d28:	str	r3, [r2, #20]
   14d2c:	bl	12928 <_start@@Base+0x468>
   14d30:	subs	r3, r0, #0
   14d34:	ldmne	r4, {r0, r1}
   14d38:	stmne	r3, {r0, r1}
   14d3c:	mov	r0, r3
   14d40:	add	sp, sp, #8
   14d44:	pop	{r4, pc}
   14d48:	andeq	r6, r1, ip, lsl #12
   14d4c:	andeq	r6, r1, ip, lsr r7
   14d50:	andeq	r6, r1, r9, lsl sl

00014d54 <flatcc_builder_append_union_vector@@Base>:
   14d54:	push	{r4, r5, r6, lr}
   14d58:	mov	r4, r0
   14d5c:	ldr	r0, [r0, #32]
   14d60:	ldrh	r3, [r0, #14]
   14d64:	cmp	r3, #7
   14d68:	beq	14d80 <flatcc_builder_append_union_vector@@Base+0x2c>
   14d6c:	ldr	r3, [pc, #68]	; 14db8 <flatcc_builder_append_union_vector@@Base+0x64>
   14d70:	movw	r2, #1692	; 0x69c
   14d74:	ldr	r1, [pc, #64]	; 14dbc <flatcc_builder_append_union_vector@@Base+0x68>
   14d78:	ldr	r0, [pc, #64]	; 14dc0 <flatcc_builder_append_union_vector@@Base+0x6c>
   14d7c:	bl	12044 <__assert_fail@plt>
   14d80:	mov	r5, r2
   14d84:	mov	r6, r1
   14d88:	mvn	r2, #-536870912	; 0xe0000000
   14d8c:	mov	r1, r5
   14d90:	bl	12ecc <flatcc_builder_default_alloc@@Base+0x458>
   14d94:	cmp	r0, #0
   14d98:	bne	14db0 <flatcc_builder_append_union_vector@@Base+0x5c>
   14d9c:	lsl	r2, r5, #3
   14da0:	mov	r1, r6
   14da4:	mov	r0, r4
   14da8:	pop	{r4, r5, r6, lr}
   14dac:	b	129f8 <_start@@Base+0x538>
   14db0:	mov	r0, #0
   14db4:	pop	{r4, r5, r6, pc}
   14db8:	andeq	r6, r1, sp, lsr #12
   14dbc:	andeq	r6, r1, ip, lsr r7
   14dc0:	andeq	r6, r1, r9, lsl sl

00014dc4 <flatcc_builder_create_string@@Base>:
   14dc4:	ldr	r3, [r0, #136]	; 0x88
   14dc8:	mov	ip, #4
   14dcc:	cmp	r2, #0
   14dd0:	push	{lr}		; (str lr, [sp, #-4]!)
   14dd4:	sub	sp, sp, #84	; 0x54
   14dd8:	add	lr, sp, ip
   14ddc:	stmib	sp, {r2, ip}
   14de0:	sub	r3, r3, r2
   14de4:	str	lr, [sp, #16]
   14de8:	sub	r3, r3, #1
   14dec:	str	ip, [sp, #20]
   14df0:	mov	ip, #1
   14df4:	and	r3, r3, #3
   14df8:	add	r3, r3, #1
   14dfc:	str	ip, [sp, #12]
   14e00:	beq	14e1c <flatcc_builder_create_string@@Base+0x58>
   14e04:	add	ip, r2, #4
   14e08:	str	r2, [sp, #28]
   14e0c:	mov	r2, #2
   14e10:	str	ip, [sp, #8]
   14e14:	str	r2, [sp, #12]
   14e18:	str	r1, [sp, #24]
   14e1c:	ldr	r2, [sp, #8]
   14e20:	add	r1, sp, #80	; 0x50
   14e24:	ldr	ip, [pc, #44]	; 14e58 <flatcc_builder_create_string@@Base+0x94>
   14e28:	add	r2, r2, r3
   14e2c:	str	r2, [sp, #8]
   14e30:	ldr	r2, [sp, #12]
   14e34:	add	r2, r2, #1
   14e38:	add	r1, r1, r2, lsl #3
   14e3c:	str	r2, [sp, #12]
   14e40:	str	ip, [r1, #-72]	; 0xffffffb8
   14e44:	str	r3, [r1, #-68]	; 0xffffffbc
   14e48:	add	r1, sp, #8
   14e4c:	bl	12e54 <flatcc_builder_default_alloc@@Base+0x3e0>
   14e50:	add	sp, sp, #84	; 0x54
   14e54:	pop	{pc}		; (ldr pc, [sp], #4)
   14e58:	andeq	r6, r1, r6, asr r0

00014e5c <flatcc_builder_create_string_str@@Base>:
   14e5c:	push	{r4, r5, r6, lr}
   14e60:	mov	r5, r0
   14e64:	mov	r0, r1
   14e68:	mov	r4, r1
   14e6c:	bl	11ffc <strlen@plt>
   14e70:	mov	r2, r0
   14e74:	mov	r1, r4
   14e78:	mov	r0, r5
   14e7c:	pop	{r4, r5, r6, lr}
   14e80:	b	14dc4 <flatcc_builder_create_string@@Base>

00014e84 <flatcc_builder_create_string_strn@@Base>:
   14e84:	push	{r4, r5, r6, lr}
   14e88:	mov	r4, r1
   14e8c:	mov	r6, r0
   14e90:	mov	r1, #0
   14e94:	mov	r0, r4
   14e98:	mov	r5, r2
   14e9c:	bl	12020 <memchr@plt>
   14ea0:	cmp	r0, #0
   14ea4:	mov	r1, r4
   14ea8:	subne	r5, r0, r4
   14eac:	mov	r0, r6
   14eb0:	mov	r2, r5
   14eb4:	pop	{r4, r5, r6, lr}
   14eb8:	b	14dc4 <flatcc_builder_create_string@@Base>

00014ebc <flatcc_builder_end_string@@Base>:
   14ebc:	ldr	r3, [r0, #32]
   14ec0:	push	{r4, r5, r6, lr}
   14ec4:	ldrh	r2, [r3, #14]
   14ec8:	cmp	r2, #6
   14ecc:	beq	14ee4 <flatcc_builder_end_string@@Base+0x28>
   14ed0:	ldr	r3, [pc, #84]	; 14f2c <flatcc_builder_end_string@@Base+0x70>
   14ed4:	movw	r2, #1732	; 0x6c4
   14ed8:	ldr	r1, [pc, #80]	; 14f30 <flatcc_builder_end_string@@Base+0x74>
   14edc:	ldr	r0, [pc, #80]	; 14f34 <flatcc_builder_end_string@@Base+0x78>
   14ee0:	bl	12044 <__assert_fail@plt>
   14ee4:	ldr	r2, [r3, #20]
   14ee8:	mov	r4, r0
   14eec:	ldr	r1, [r0, #20]
   14ef0:	cmp	r2, r1
   14ef4:	beq	14f0c <flatcc_builder_end_string@@Base+0x50>
   14ef8:	ldr	r3, [pc, #44]	; 14f2c <flatcc_builder_end_string@@Base+0x70>
   14efc:	movw	r2, #1733	; 0x6c5
   14f00:	ldr	r1, [pc, #40]	; 14f30 <flatcc_builder_end_string@@Base+0x74>
   14f04:	ldr	r0, [pc, #44]	; 14f38 <flatcc_builder_end_string@@Base+0x7c>
   14f08:	b	14ee0 <flatcc_builder_end_string@@Base+0x24>
   14f0c:	ldr	r1, [r0, #16]
   14f10:	bl	14dc4 <flatcc_builder_create_string@@Base>
   14f14:	subs	r5, r0, #0
   14f18:	beq	14f24 <flatcc_builder_end_string@@Base+0x68>
   14f1c:	mov	r0, r4
   14f20:	bl	12970 <_start@@Base+0x4b0>
   14f24:	mov	r0, r5
   14f28:	pop	{r4, r5, r6, pc}
   14f2c:	andeq	r6, r1, r0, asr r6
   14f30:	andeq	r6, r1, ip, lsr r7
   14f34:	andeq	r6, r1, r2, lsl #18
   14f38:	andeq	r6, r1, fp, asr #20

00014f3c <flatcc_builder_string_edit@@Base>:
   14f3c:	ldr	r0, [r0, #16]
   14f40:	bx	lr

00014f44 <flatcc_builder_string_len@@Base>:
   14f44:	ldr	r3, [r0, #32]
   14f48:	ldr	r0, [r3, #20]
   14f4c:	bx	lr

00014f50 <flatcc_builder_table_add@@Base>:
   14f50:	push	{r4, r5, r6, r7, r8, lr}
   14f54:	mov	r4, r0
   14f58:	ldr	r0, [r0, #32]
   14f5c:	ldrh	r0, [r0, #14]
   14f60:	cmp	r0, #3
   14f64:	beq	14f7c <flatcc_builder_table_add@@Base+0x2c>
   14f68:	ldr	r3, [pc, #240]	; 15060 <flatcc_builder_table_add@@Base+0x110>
   14f6c:	movw	r2, #1773	; 0x6ed
   14f70:	ldr	r1, [pc, #236]	; 15064 <flatcc_builder_table_add@@Base+0x114>
   14f74:	ldr	r0, [pc, #236]	; 15068 <flatcc_builder_table_add@@Base+0x118>
   14f78:	bl	12044 <__assert_fail@plt>
   14f7c:	movw	r0, #32764	; 0x7ffc
   14f80:	cmp	r1, r0
   14f84:	bls	14f9c <flatcc_builder_table_add@@Base+0x4c>
   14f88:	ldr	r3, [pc, #208]	; 15060 <flatcc_builder_table_add@@Base+0x110>
   14f8c:	movw	r2, #1774	; 0x6ee
   14f90:	ldr	r1, [pc, #204]	; 15064 <flatcc_builder_table_add@@Base+0x114>
   14f94:	ldr	r0, [pc, #208]	; 1506c <flatcc_builder_table_add@@Base+0x11c>
   14f98:	b	14f78 <flatcc_builder_table_add@@Base+0x28>
   14f9c:	ldrh	r0, [r4, #130]	; 0x82
   14fa0:	lsl	r7, r1, #1
   14fa4:	cmp	r0, r3
   14fa8:	ldr	r0, [r4, #4]
   14fac:	strhcc	r3, [r4, #130]	; 0x82
   14fb0:	ldrh	r5, [r0, r7]
   14fb4:	cmp	r5, #0
   14fb8:	beq	14fd0 <flatcc_builder_table_add@@Base+0x80>
   14fbc:	ldr	r3, [pc, #156]	; 15060 <flatcc_builder_table_add@@Base+0x110>
   14fc0:	movw	r2, #1784	; 0x6f8
   14fc4:	ldr	r1, [pc, #152]	; 15064 <flatcc_builder_table_add@@Base+0x114>
   14fc8:	ldr	r0, [pc, #160]	; 15070 <flatcc_builder_table_add@@Base+0x120>
   14fcc:	b	14f78 <flatcc_builder_table_add@@Base+0x28>
   14fd0:	ldr	ip, [r4, #12]
   14fd4:	sub	r0, r3, #1
   14fd8:	rsb	r3, r3, #0
   14fdc:	uxth	r8, r1
   14fe0:	ldr	lr, [pc, #140]	; 15074 <flatcc_builder_table_add@@Base+0x124>
   14fe4:	ldr	r6, [r4, #20]
   14fe8:	eor	ip, ip, r1
   14fec:	mul	ip, lr, ip
   14ff0:	add	r0, r0, r6
   14ff4:	and	r6, r0, r3
   14ff8:	ldr	r3, [r4, #24]
   14ffc:	eor	ip, ip, r2
   15000:	add	r1, r2, r6
   15004:	mul	ip, lr, ip
   15008:	cmp	r1, r3
   1500c:	str	ip, [r4, #12]
   15010:	str	r1, [r4, #20]
   15014:	bcs	15040 <flatcc_builder_table_add@@Base+0xf0>
   15018:	ldr	r3, [r4, #4]
   1501c:	add	r2, r6, #4
   15020:	ldr	r0, [r4, #16]
   15024:	strh	r2, [r3, r7]
   15028:	ldrh	r3, [r4, #8]
   1502c:	add	r0, r0, r6
   15030:	cmp	r3, r8
   15034:	addls	r1, r8, #1
   15038:	strhls	r1, [r4, #8]
   1503c:	pop	{r4, r5, r6, r7, r8, pc}
   15040:	movw	r2, #65532	; 0xfffc
   15044:	add	r1, r1, #1
   15048:	mov	r0, r4
   1504c:	bl	128d8 <_start@@Base+0x418>
   15050:	cmp	r0, #0
   15054:	beq	15018 <flatcc_builder_table_add@@Base+0xc8>
   15058:	mov	r0, r5
   1505c:	pop	{r4, r5, r6, r7, r8, pc}
   15060:	andeq	r6, r1, sl, ror #12
   15064:	andeq	r6, r1, ip, lsr r7
   15068:	ldrdeq	r6, [r1], -fp
   1506c:	andeq	r6, r1, pc, ror #20
   15070:	andeq	r6, r1, r9, lsr #15
   15074:			; <UNDEFINED> instruction: 0x9e3779b1

00015078 <flatcc_builder_table_edit@@Base>:
   15078:	ldr	r3, [r0, #32]
   1507c:	ldrh	r3, [r3, #14]
   15080:	cmp	r3, #3
   15084:	beq	150a0 <flatcc_builder_table_edit@@Base+0x28>
   15088:	push	{r4, lr}
   1508c:	movw	r2, #1794	; 0x702
   15090:	ldr	r3, [pc, #28]	; 150b4 <flatcc_builder_table_edit@@Base+0x3c>
   15094:	ldr	r1, [pc, #28]	; 150b8 <flatcc_builder_table_edit@@Base+0x40>
   15098:	ldr	r0, [pc, #28]	; 150bc <flatcc_builder_table_edit@@Base+0x44>
   1509c:	bl	12044 <__assert_fail@plt>
   150a0:	ldr	r3, [r0, #20]
   150a4:	ldr	r0, [r0, #16]
   150a8:	sub	r3, r3, r1
   150ac:	add	r0, r0, r3
   150b0:	bx	lr
   150b4:	andeq	r6, r1, r3, lsl #13
   150b8:	andeq	r6, r1, ip, lsr r7
   150bc:	ldrdeq	r6, [r1], -fp

000150c0 <flatcc_builder_table_add_copy@@Base>:
   150c0:	push	{r4, r5, r6, lr}
   150c4:	mov	r4, r3
   150c8:	mov	r6, r2
   150cc:	mov	r2, r4
   150d0:	ldrh	r3, [sp, #16]
   150d4:	bl	14f50 <flatcc_builder_table_add@@Base>
   150d8:	subs	r5, r0, #0
   150dc:	beq	150ec <flatcc_builder_table_add_copy@@Base+0x2c>
   150e0:	mov	r2, r4
   150e4:	mov	r1, r6
   150e8:	bl	11f90 <memcpy@plt>
   150ec:	mov	r0, r5
   150f0:	pop	{r4, r5, r6, pc}

000150f4 <flatcc_builder_table_add_offset@@Base>:
   150f4:	ldr	r3, [r0, #32]
   150f8:	push	{r4, r5, r6, r7, r8, lr}
   150fc:	ldrh	r3, [r3, #14]
   15100:	cmp	r3, #3
   15104:	beq	1511c <flatcc_builder_table_add_offset@@Base+0x28>
   15108:	ldr	r3, [pc, #236]	; 151fc <flatcc_builder_table_add_offset@@Base+0x108>
   1510c:	movw	r2, #1811	; 0x713
   15110:	ldr	r1, [pc, #232]	; 15200 <flatcc_builder_table_add_offset@@Base+0x10c>
   15114:	ldr	r0, [pc, #232]	; 15204 <flatcc_builder_table_add_offset@@Base+0x110>
   15118:	bl	12044 <__assert_fail@plt>
   1511c:	movw	r3, #32764	; 0x7ffc
   15120:	cmp	r1, r3
   15124:	bls	1513c <flatcc_builder_table_add_offset@@Base+0x48>
   15128:	ldr	r3, [pc, #204]	; 151fc <flatcc_builder_table_add_offset@@Base+0x108>
   1512c:	movw	r2, #1812	; 0x714
   15130:	ldr	r1, [pc, #200]	; 15200 <flatcc_builder_table_add_offset@@Base+0x10c>
   15134:	ldr	r0, [pc, #204]	; 15208 <flatcc_builder_table_add_offset@@Base+0x114>
   15138:	b	15118 <flatcc_builder_table_add_offset@@Base+0x24>
   1513c:	ldr	r3, [r0, #4]
   15140:	lsl	r7, r1, #1
   15144:	mov	r4, r0
   15148:	ldrh	r6, [r3, r7]
   1514c:	cmp	r6, #0
   15150:	beq	15168 <flatcc_builder_table_add_offset@@Base+0x74>
   15154:	ldr	r3, [pc, #160]	; 151fc <flatcc_builder_table_add_offset@@Base+0x108>
   15158:	movw	r2, #1819	; 0x71b
   1515c:	ldr	r1, [pc, #156]	; 15200 <flatcc_builder_table_add_offset@@Base+0x10c>
   15160:	ldr	r0, [pc, #164]	; 1520c <flatcc_builder_table_add_offset@@Base+0x118>
   15164:	b	15118 <flatcc_builder_table_add_offset@@Base+0x24>
   15168:	ldr	r3, [r0, #12]
   1516c:	uxth	r5, r1
   15170:	ldr	r2, [pc, #152]	; 15210 <flatcc_builder_table_add_offset@@Base+0x11c>
   15174:	ldr	r8, [r0, #20]
   15178:	eor	r3, r3, r1
   1517c:	mul	r3, r2, r3
   15180:	add	r8, r8, #3
   15184:	eor	r3, r3, #4
   15188:	bic	r8, r8, #3
   1518c:	add	r1, r8, #4
   15190:	mul	r3, r2, r3
   15194:	str	r3, [r0, #12]
   15198:	ldr	r3, [r0, #24]
   1519c:	str	r1, [r0, #20]
   151a0:	cmp	r1, r3
   151a4:	bhi	151e4 <flatcc_builder_table_add_offset@@Base+0xf0>
   151a8:	ldr	r3, [r4, #4]
   151ac:	uxth	r2, r8
   151b0:	add	r1, r2, #4
   151b4:	ldr	r0, [r4, #16]
   151b8:	strh	r1, [r3, r7]
   151bc:	ldrh	r3, [r4, #8]
   151c0:	add	r0, r0, r8
   151c4:	cmp	r3, r5
   151c8:	ldr	r3, [r4]
   151cc:	addls	r1, r5, #1
   151d0:	strhls	r1, [r4, #8]
   151d4:	add	r1, r3, #2
   151d8:	str	r1, [r4]
   151dc:	strh	r2, [r3]
   151e0:	pop	{r4, r5, r6, r7, r8, pc}
   151e4:	movw	r2, #65532	; 0xfffc
   151e8:	bl	128d8 <_start@@Base+0x418>
   151ec:	cmp	r0, #0
   151f0:	beq	151a8 <flatcc_builder_table_add_offset@@Base+0xb4>
   151f4:	mov	r0, r6
   151f8:	pop	{r4, r5, r6, r7, r8, pc}
   151fc:	muleq	r1, sp, r6
   15200:	andeq	r6, r1, ip, lsr r7
   15204:	ldrdeq	r6, [r1], -fp
   15208:	andeq	r6, r1, pc, ror #20
   1520c:	andeq	r6, r1, r9, lsr #15
   15210:			; <UNDEFINED> instruction: 0x9e3779b1

00015214 <flatcc_builder_table_add_union@@Base>:
   15214:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15218:	add	ip, sp, #8
   1521c:	stmdb	ip, {r2, r3}
   15220:	ldr	r3, [r0, #32]
   15224:	ldrb	r5, [sp]
   15228:	ldr	r4, [sp, #4]
   1522c:	ldrh	r3, [r3, #14]
   15230:	cmp	r3, #3
   15234:	beq	1524c <flatcc_builder_table_add_union@@Base+0x38>
   15238:	ldr	r3, [pc, #164]	; 152e4 <flatcc_builder_table_add_union@@Base+0xd0>
   1523c:	movw	r2, #1518	; 0x5ee
   15240:	ldr	r1, [pc, #160]	; 152e8 <flatcc_builder_table_add_union@@Base+0xd4>
   15244:	ldr	r0, [pc, #160]	; 152ec <flatcc_builder_table_add_union@@Base+0xd8>
   15248:	bl	12044 <__assert_fail@plt>
   1524c:	cmp	r5, #0
   15250:	mov	r6, r0
   15254:	mov	r7, r1
   15258:	bne	15278 <flatcc_builder_table_add_union@@Base+0x64>
   1525c:	cmp	r4, #0
   15260:	beq	152a4 <flatcc_builder_table_add_union@@Base+0x90>
   15264:	ldr	r3, [pc, #120]	; 152e4 <flatcc_builder_table_add_union@@Base+0xd0>
   15268:	movw	r2, #1519	; 0x5ef
   1526c:	ldr	r1, [pc, #116]	; 152e8 <flatcc_builder_table_add_union@@Base+0xd4>
   15270:	ldr	r0, [pc, #120]	; 152f0 <flatcc_builder_table_add_union@@Base+0xdc>
   15274:	b	15248 <flatcc_builder_table_add_union@@Base+0x34>
   15278:	cmp	r4, #0
   1527c:	beq	152a4 <flatcc_builder_table_add_union@@Base+0x90>
   15280:	bl	150f4 <flatcc_builder_table_add_offset@@Base>
   15284:	cmp	r0, #0
   15288:	strne	r4, [r0]
   1528c:	bne	152a4 <flatcc_builder_table_add_union@@Base+0x90>
   15290:	ldr	r3, [pc, #76]	; 152e4 <flatcc_builder_table_add_union@@Base+0xd0>
   15294:	movw	r2, #1522	; 0x5f2
   15298:	ldr	r1, [pc, #72]	; 152e8 <flatcc_builder_table_add_union@@Base+0xd4>
   1529c:	ldr	r0, [pc, #80]	; 152f4 <flatcc_builder_table_add_union@@Base+0xe0>
   152a0:	b	15248 <flatcc_builder_table_add_union@@Base+0x34>
   152a4:	mov	r3, #1
   152a8:	sub	r1, r7, #1
   152ac:	mov	r2, r3
   152b0:	mov	r0, r6
   152b4:	bl	14f50 <flatcc_builder_table_add@@Base>
   152b8:	cmp	r0, #0
   152bc:	bne	152d4 <flatcc_builder_table_add_union@@Base+0xc0>
   152c0:	ldr	r3, [pc, #28]	; 152e4 <flatcc_builder_table_add_union@@Base+0xd0>
   152c4:	movw	r2, #1526	; 0x5f6
   152c8:	ldr	r1, [pc, #24]	; 152e8 <flatcc_builder_table_add_union@@Base+0xd4>
   152cc:	ldr	r0, [pc, #36]	; 152f8 <flatcc_builder_table_add_union@@Base+0xe4>
   152d0:	b	15248 <flatcc_builder_table_add_union@@Base+0x34>
   152d4:	strb	r5, [r0]
   152d8:	mov	r0, #0
   152dc:	add	sp, sp, #12
   152e0:	pop	{r4, r5, r6, r7, pc}
   152e4:			; <UNDEFINED> instruction: 0x000166bd
   152e8:	andeq	r6, r1, ip, lsr r7
   152ec:	ldrdeq	r6, [r1], -fp
   152f0:			; <UNDEFINED> instruction: 0x00016ab3
   152f4:	ldrdeq	r6, [r1], -r5
   152f8:	ldrdeq	r6, [r1], -pc	; <UNPREDICTABLE>

000152fc <flatcc_builder_table_add_union_vector@@Base>:
   152fc:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15300:	mov	r7, r1
   15304:	add	r1, sp, #8
   15308:	stmdb	r1, {r2, r3}
   1530c:	ldr	r3, [r0, #32]
   15310:	ldrd	r4, [sp]
   15314:	ldrh	r3, [r3, #14]
   15318:	cmp	r3, #3
   1531c:	beq	15334 <flatcc_builder_table_add_union_vector@@Base+0x38>
   15320:	ldr	r3, [pc, #176]	; 153d8 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15324:	mov	r2, #1536	; 0x600
   15328:	ldr	r1, [pc, #172]	; 153dc <flatcc_builder_table_add_union_vector@@Base+0xe0>
   1532c:	ldr	r0, [pc, #172]	; 153e0 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   15330:	bl	12044 <__assert_fail@plt>
   15334:	clz	r3, r5
   15338:	clz	r2, r4
   1533c:	lsr	r3, r3, #5
   15340:	lsr	r2, r2, #5
   15344:	cmp	r2, r3
   15348:	beq	15374 <flatcc_builder_table_add_union_vector@@Base+0x78>
   1534c:	adds	r4, r4, #0
   15350:	movne	r4, #1
   15354:	cmp	r4, r3
   15358:	mvnne	r4, #0
   1535c:	bne	153cc <flatcc_builder_table_add_union_vector@@Base+0xd0>
   15360:	ldr	r3, [pc, #112]	; 153d8 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15364:	movw	r2, #1537	; 0x601
   15368:	ldr	r1, [pc, #108]	; 153dc <flatcc_builder_table_add_union_vector@@Base+0xe0>
   1536c:	ldr	r0, [pc, #112]	; 153e4 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   15370:	b	15330 <flatcc_builder_table_add_union_vector@@Base+0x34>
   15374:	cmp	r4, #0
   15378:	beq	153cc <flatcc_builder_table_add_union_vector@@Base+0xd0>
   1537c:	sub	r1, r7, #1
   15380:	mov	r6, r0
   15384:	bl	150f4 <flatcc_builder_table_add_offset@@Base>
   15388:	cmp	r0, #0
   1538c:	ldreq	r3, [pc, #68]	; 153d8 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15390:	movweq	r2, #1540	; 0x604
   15394:	beq	153c0 <flatcc_builder_table_add_union_vector@@Base+0xc4>
   15398:	mov	r1, r7
   1539c:	str	r4, [r0]
   153a0:	mov	r0, r6
   153a4:	bl	150f4 <flatcc_builder_table_add_offset@@Base>
   153a8:	cmp	r0, #0
   153ac:	movne	r4, #0
   153b0:	strne	r5, [r0]
   153b4:	bne	153cc <flatcc_builder_table_add_union_vector@@Base+0xd0>
   153b8:	ldr	r3, [pc, #24]	; 153d8 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   153bc:	movw	r2, #1544	; 0x608
   153c0:	ldr	r1, [pc, #20]	; 153dc <flatcc_builder_table_add_union_vector@@Base+0xe0>
   153c4:	ldr	r0, [pc, #28]	; 153e8 <flatcc_builder_table_add_union_vector@@Base+0xec>
   153c8:	b	15330 <flatcc_builder_table_add_union_vector@@Base+0x34>
   153cc:	mov	r0, r4
   153d0:	add	sp, sp, #12
   153d4:	pop	{r4, r5, r6, r7, pc}
   153d8:	ldrdeq	r6, [r1], -ip
   153dc:	andeq	r6, r1, ip, lsr r7
   153e0:	ldrdeq	r6, [r1], -fp
   153e4:	andeq	r6, r1, fp, ror #21
   153e8:	ldrdeq	r6, [r1], -r5

000153ec <flatcc_builder_push_buffer_alignment@@Base>:
   153ec:	mov	r3, r0
   153f0:	mov	r2, #4
   153f4:	ldrh	r0, [r0, #128]	; 0x80
   153f8:	strh	r2, [r3, #128]	; 0x80
   153fc:	bx	lr

00015400 <flatcc_builder_pop_buffer_alignment@@Base>:
   15400:	ldrh	r3, [r0, #128]	; 0x80
   15404:	cmp	r3, r1
   15408:	strhcc	r1, [r0, #128]	; 0x80
   1540c:	bx	lr

00015410 <flatcc_builder_get_buffer_alignment@@Base>:
   15410:	ldrh	r0, [r0, #128]	; 0x80
   15414:	bx	lr

00015418 <flatcc_builder_set_vtable_clustering@@Base>:
   15418:	clz	r1, r1
   1541c:	lsr	r1, r1, #5
   15420:	str	r1, [r0, #180]	; 0xb4
   15424:	bx	lr

00015428 <flatcc_builder_set_block_align@@Base>:
   15428:	strh	r1, [r0, #132]	; 0x84
   1542c:	bx	lr

00015430 <flatcc_builder_get_level@@Base>:
   15430:	ldr	r0, [r0, #156]	; 0x9c
   15434:	bx	lr

00015438 <flatcc_builder_set_max_level@@Base>:
   15438:	ldr	r3, [r0, #160]	; 0xa0
   1543c:	str	r1, [r0, #176]	; 0xb0
   15440:	cmp	r3, r1
   15444:	strlt	r1, [r0, #160]	; 0xa0
   15448:	bx	lr

0001544c <flatcc_builder_get_buffer_size@@Base>:
   1544c:	ldr	r2, [r0, #140]	; 0x8c
   15450:	ldr	r0, [r0, #136]	; 0x88
   15454:	sub	r0, r2, r0
   15458:	bx	lr

0001545c <flatcc_builder_get_buffer_start@@Base>:
   1545c:	ldr	r0, [r0, #136]	; 0x88
   15460:	bx	lr

00015464 <flatcc_builder_get_buffer_end@@Base>:
   15464:	ldr	r0, [r0, #140]	; 0x8c
   15468:	bx	lr

0001546c <flatcc_builder_set_vtable_cache_limit@@Base>:
   1546c:	str	r1, [r0, #172]	; 0xac
   15470:	bx	lr

00015474 <flatcc_builder_set_identifier@@Base>:
   15474:	ldr	r3, [pc, #16]	; 1548c <flatcc_builder_set_identifier@@Base+0x18>
   15478:	cmp	r1, #0
   1547c:	moveq	r1, r3
   15480:	ldr	r3, [r1]
   15484:	str	r3, [r0, #168]	; 0xa8
   15488:	bx	lr
   1548c:	andeq	r6, r1, r6, asr r0

00015490 <flatcc_builder_get_type@@Base>:
   15490:	ldr	r0, [r0, #32]
   15494:	cmp	r0, #0
   15498:	ldrhne	r0, [r0, #14]
   1549c:	bx	lr

000154a0 <flatcc_builder_get_type_at@@Base>:
   154a0:	cmp	r1, #0
   154a4:	ble	154cc <flatcc_builder_get_type_at@@Base+0x2c>
   154a8:	ldr	r3, [r0, #156]	; 0x9c
   154ac:	cmp	r3, r1
   154b0:	blt	154cc <flatcc_builder_get_type_at@@Base+0x2c>
   154b4:	sub	r1, r1, r3
   154b8:	ldr	r3, [r0, #32]
   154bc:	mov	r2, #36	; 0x24
   154c0:	mla	r1, r2, r1, r3
   154c4:	ldrh	r0, [r1, #14]
   154c8:	bx	lr
   154cc:	mov	r0, #0
   154d0:	bx	lr

000154d4 <flatcc_builder_get_direct_buffer@@Base>:
   154d4:	ldr	r3, [r0, #184]	; 0xb8
   154d8:	cmp	r3, #0
   154dc:	beq	15504 <flatcc_builder_get_direct_buffer@@Base+0x30>
   154e0:	ldrd	r2, [r0, #188]	; 0xbc
   154e4:	cmp	r2, r3
   154e8:	bne	15504 <flatcc_builder_get_direct_buffer@@Base+0x30>
   154ec:	cmp	r1, #0
   154f0:	ldrne	r3, [r0, #212]	; 0xd4
   154f4:	strne	r3, [r1]
   154f8:	ldr	r1, [r0, #196]	; 0xc4
   154fc:	mov	r0, r1
   15500:	bx	lr
   15504:	cmp	r1, #0
   15508:	movne	r3, #0
   1550c:	strne	r3, [r1]
   15510:	movne	r1, r3
   15514:	b	154fc <flatcc_builder_get_direct_buffer@@Base+0x28>

00015518 <flatcc_builder_copy_buffer@@Base>:
   15518:	ldr	r3, [r0, #184]	; 0xb8
   1551c:	cmp	r3, #0
   15520:	beq	1554c <flatcc_builder_copy_buffer@@Base+0x34>
   15524:	push	{r4, lr}
   15528:	add	r0, r0, #188	; 0xbc
   1552c:	bl	15ac0 <flatcc_emitter_copy_buffer@@Base>
   15530:	cmp	r0, #0
   15534:	popne	{r4, pc}
   15538:	ldr	r3, [pc, #20]	; 15554 <flatcc_builder_copy_buffer@@Base+0x3c>
   1553c:	movw	r2, #1926	; 0x786
   15540:	ldr	r1, [pc, #16]	; 15558 <flatcc_builder_copy_buffer@@Base+0x40>
   15544:	ldr	r0, [pc, #16]	; 1555c <flatcc_builder_copy_buffer@@Base+0x44>
   15548:	bl	12044 <__assert_fail@plt>
   1554c:	mov	r0, r3
   15550:	bx	lr
   15554:	andeq	r6, r1, r2, lsl #14
   15558:	andeq	r6, r1, ip, lsr r7
   1555c:	andeq	r5, r1, r3, asr #30

00015560 <flatcc_builder_finalize_buffer@@Base>:
   15560:	push	{r4, r5, r6, lr}
   15564:	cmp	r1, #0
   15568:	mov	r5, r0
   1556c:	ldr	r2, [r0, #136]	; 0x88
   15570:	ldr	r4, [r0, #140]	; 0x8c
   15574:	sub	r4, r4, r2
   15578:	mov	r0, r4
   1557c:	strne	r4, [r1]
   15580:	bl	11fd8 <malloc@plt>
   15584:	subs	r6, r0, #0
   15588:	ldreq	r3, [pc, #56]	; 155c8 <flatcc_builder_finalize_buffer@@Base+0x68>
   1558c:	movweq	r2, #1944	; 0x798
   15590:	beq	155b4 <flatcc_builder_finalize_buffer@@Base+0x54>
   15594:	mov	r2, r4
   15598:	mov	r1, r6
   1559c:	mov	r0, r5
   155a0:	bl	15518 <flatcc_builder_copy_buffer@@Base>
   155a4:	cmp	r0, #0
   155a8:	bne	155c0 <flatcc_builder_finalize_buffer@@Base+0x60>
   155ac:	ldr	r3, [pc, #20]	; 155c8 <flatcc_builder_finalize_buffer@@Base+0x68>
   155b0:	movw	r2, #1948	; 0x79c
   155b4:	ldr	r1, [pc, #16]	; 155cc <flatcc_builder_finalize_buffer@@Base+0x6c>
   155b8:	ldr	r0, [pc, #16]	; 155d0 <flatcc_builder_finalize_buffer@@Base+0x70>
   155bc:	bl	12044 <__assert_fail@plt>
   155c0:	mov	r0, r6
   155c4:	pop	{r4, r5, r6, pc}
   155c8:	andeq	r6, r1, sp, lsl r7
   155cc:	andeq	r6, r1, ip, lsr r7
   155d0:	andeq	r6, r1, r9, lsr #15

000155d4 <flatcc_builder_finalize_aligned_buffer@@Base>:
   155d4:	push	{r4, r5, r6, r7, r8, lr}
   155d8:	mov	r6, r0
   155dc:	subs	r7, r1, #0
   155e0:	ldr	r2, [r0, #136]	; 0x88
   155e4:	ldr	r4, [r0, #140]	; 0x8c
   155e8:	ldrh	r0, [r0, #128]	; 0x80
   155ec:	sub	r2, r4, r2
   155f0:	sub	r4, r0, #1
   155f4:	strne	r2, [r7]
   155f8:	add	r4, r4, r2
   155fc:	rsb	r2, r0, #0
   15600:	and	r4, r4, r2
   15604:	mov	r1, r4
   15608:	bl	12a28 <_start@@Base+0x568>
   1560c:	subs	r5, r0, #0
   15610:	beq	15638 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   15614:	mov	r2, r4
   15618:	mov	r1, r5
   1561c:	mov	r0, r6
   15620:	bl	15518 <flatcc_builder_copy_buffer@@Base>
   15624:	subs	r4, r0, #0
   15628:	bne	15638 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   1562c:	mov	r0, r5
   15630:	mov	r5, r4
   15634:	bl	11f84 <free@plt>
   15638:	adds	r3, r7, #0
   1563c:	mov	r0, r5
   15640:	movne	r3, #1
   15644:	cmp	r5, #0
   15648:	movne	r3, #0
   1564c:	cmp	r3, #0
   15650:	movne	r3, #0
   15654:	strne	r3, [r7]
   15658:	pop	{r4, r5, r6, r7, r8, pc}

0001565c <flatcc_builder_aligned_alloc@@Base>:
   1565c:	b	12a28 <_start@@Base+0x568>

00015660 <flatcc_builder_aligned_free@@Base>:
   15660:	b	11f84 <free@plt>

00015664 <flatcc_builder_get_emit_context@@Base>:
   15664:	ldr	r0, [r0, #36]	; 0x24
   15668:	bx	lr

0001566c <flatcc_emitter_recycle_page@@Base>:
   1566c:	ldr	r3, [r0]
   15670:	cmp	r3, r1
   15674:	beq	156b4 <flatcc_emitter_recycle_page@@Base+0x48>
   15678:	ldr	r2, [r0, #4]
   1567c:	cmp	r2, r1
   15680:	beq	156b4 <flatcc_emitter_recycle_page@@Base+0x48>
   15684:	ldr	r0, [r1, #2944]	; 0xb80
   15688:	ldr	r2, [r1, #2948]	; 0xb84
   1568c:	str	r2, [r0, #2948]	; 0xb84
   15690:	str	r0, [r2, #2944]	; 0xb80
   15694:	mov	r0, #0
   15698:	ldr	r2, [r3, #2948]	; 0xb84
   1569c:	str	r3, [r1, #2944]	; 0xb80
   156a0:	str	r2, [r1, #2948]	; 0xb84
   156a4:	str	r1, [r2, #2944]	; 0xb80
   156a8:	ldr	r3, [r1, #2944]	; 0xb80
   156ac:	str	r1, [r3, #2948]	; 0xb84
   156b0:	bx	lr
   156b4:	mvn	r0, #0
   156b8:	bx	lr

000156bc <flatcc_emitter_reset@@Base>:
   156bc:	ldr	r3, [r0]
   156c0:	cmp	r3, #0
   156c4:	bxeq	lr
   156c8:	add	r2, r3, #1472	; 0x5c0
   156cc:	push	{r4, lr}
   156d0:	mov	r4, r0
   156d4:	str	r3, [r0, #4]
   156d8:	str	r2, [r0, #8]
   156dc:	str	r2, [r0, #16]
   156e0:	mov	r2, #1472	; 0x5c0
   156e4:	str	r2, [r0, #12]
   156e8:	str	r2, [r0, #20]
   156ec:	sub	r2, r2, #2944	; 0xb80
   156f0:	str	r2, [r3, #2952]	; 0xb88
   156f4:	ldr	r3, [r0, #24]
   156f8:	ldr	r2, [r0, #32]
   156fc:	cmp	r2, #0
   15700:	streq	r3, [r0, #32]
   15704:	lsr	r3, r3, #2
   15708:	ldr	r2, [r0, #32]
   1570c:	add	r2, r2, r2, lsl #1
   15710:	add	r3, r3, r2, lsr #2
   15714:	str	r3, [r0, #32]
   15718:	mov	r3, #0
   1571c:	str	r3, [r0, #24]
   15720:	ldr	r3, [r4, #28]
   15724:	ldr	r2, [r4, #32]
   15728:	cmp	r3, r2, lsl #1
   1572c:	popls	{r4, pc}
   15730:	ldrd	r2, [r4]
   15734:	ldr	r0, [r3, #2944]	; 0xb80
   15738:	cmp	r0, r2
   1573c:	popeq	{r4, pc}
   15740:	ldr	r2, [r0, #2944]	; 0xb80
   15744:	str	r2, [r3, #2944]	; 0xb80
   15748:	ldr	r2, [r0, #2944]	; 0xb80
   1574c:	str	r3, [r2, #2948]	; 0xb84
   15750:	bl	11f84 <free@plt>
   15754:	ldr	r3, [r4, #28]
   15758:	sub	r3, r3, #2944	; 0xb80
   1575c:	str	r3, [r4, #28]
   15760:	b	15720 <flatcc_emitter_reset@@Base+0x64>

00015764 <flatcc_emitter_clear@@Base>:
   15764:	ldr	r3, [r0]
   15768:	cmp	r3, #0
   1576c:	bxeq	lr
   15770:	push	{r4, r5, r6, lr}
   15774:	mov	r1, #0
   15778:	mov	r4, r0
   1577c:	ldr	r2, [r3, #2948]	; 0xb84
   15780:	str	r1, [r2, #2944]	; 0xb80
   15784:	ldr	r5, [r3, #2944]	; 0xb80
   15788:	cmp	r5, #0
   1578c:	bne	157ac <flatcc_emitter_clear@@Base+0x48>
   15790:	mov	r0, r3
   15794:	bl	11f84 <free@plt>
   15798:	mov	r1, r5
   1579c:	mov	r0, r4
   157a0:	pop	{r4, r5, r6, lr}
   157a4:	mov	r2, #36	; 0x24
   157a8:	b	12014 <memset@plt>
   157ac:	ldr	r0, [r5, #2948]	; 0xb84
   157b0:	bl	11f84 <free@plt>
   157b4:	mov	r3, r5
   157b8:	b	15784 <flatcc_emitter_clear@@Base+0x20>

000157bc <flatcc_emitter@@Base>:
   157bc:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157c0:	mov	r4, r0
   157c4:	mov	r6, r2
   157c8:	cmp	r3, #0
   157cc:	ldr	r0, [r0, #24]
   157d0:	ldr	r2, [sp, #40]	; 0x28
   157d4:	add	r0, r0, r2
   157d8:	str	r0, [r4, #24]
   157dc:	bge	15974 <flatcc_emitter@@Base+0x1b8>
   157e0:	ldr	r0, [r4, #12]
   157e4:	cmp	r0, r2
   157e8:	bcc	1582c <flatcc_emitter@@Base+0x70>
   157ec:	ldr	r3, [r4, #8]
   157f0:	sub	r3, r3, r2
   157f4:	sub	r2, r0, r2
   157f8:	str	r3, [r4, #8]
   157fc:	str	r2, [r4, #12]
   15800:	mov	r4, r1
   15804:	sub	r6, r6, #1
   15808:	add	r4, r4, #8
   1580c:	cmn	r6, #1
   15810:	beq	15840 <flatcc_emitter@@Base+0x84>
   15814:	mov	r0, r3
   15818:	ldmdb	r4, {r1, r2}
   1581c:	bl	11f90 <memcpy@plt>
   15820:	ldr	r2, [r4, #-4]
   15824:	add	r3, r0, r2
   15828:	b	15804 <flatcc_emitter@@Base+0x48>
   1582c:	ldr	r9, [pc, #648]	; 15abc <flatcc_emitter@@Base+0x300>
   15830:	add	r5, r1, r6, lsl #3
   15834:	mov	r8, #2944	; 0xb80
   15838:	cmp	r6, #0
   1583c:	bne	15848 <flatcc_emitter@@Base+0x8c>
   15840:	mov	r0, #0
   15844:	b	158e0 <flatcc_emitter@@Base+0x124>
   15848:	ldr	sl, [r5, #-8]
   1584c:	ldr	r7, [r5, #-4]
   15850:	add	sl, sl, r7
   15854:	cmp	r7, #0
   15858:	subeq	r5, r5, #8
   1585c:	subeq	r6, r6, #1
   15860:	beq	15838 <flatcc_emitter@@Base+0x7c>
   15864:	ldr	r3, [r4, #12]
   15868:	cmp	r3, r7
   1586c:	bcs	15944 <flatcc_emitter@@Base+0x188>
   15870:	cmp	r3, #0
   15874:	movne	r2, r3
   15878:	bne	15948 <flatcc_emitter@@Base+0x18c>
   1587c:	ldr	fp, [r4]
   15880:	cmp	fp, #0
   15884:	beq	158cc <flatcc_emitter@@Base+0x110>
   15888:	ldr	r2, [r4, #4]
   1588c:	ldr	r3, [fp, #2948]	; 0xb84
   15890:	cmp	r3, r2
   15894:	beq	158cc <flatcc_emitter@@Base+0x110>
   15898:	ldr	r2, [fp, #2952]	; 0xb88
   1589c:	sub	r2, r2, #2944	; 0xb80
   158a0:	str	r2, [r3, #2952]	; 0xb88
   158a4:	str	r3, [r4]
   158a8:	ldr	r3, [r4]
   158ac:	str	r8, [r4, #12]
   158b0:	add	r2, r3, #2944	; 0xb80
   158b4:	str	r2, [r4, #8]
   158b8:	ldr	r2, [r3, #2944]	; 0xb80
   158bc:	ldr	r2, [r2, #2952]	; 0xb88
   158c0:	sub	r2, r2, #2944	; 0xb80
   158c4:	str	r2, [r3, #2952]	; 0xb88
   158c8:	b	15854 <flatcc_emitter@@Base+0x98>
   158cc:	movw	r0, #2956	; 0xb8c
   158d0:	bl	11fd8 <malloc@plt>
   158d4:	cmp	r0, #0
   158d8:	bne	158e8 <flatcc_emitter@@Base+0x12c>
   158dc:	mvn	r0, #0
   158e0:	add	sp, sp, #4
   158e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158e8:	ldr	r3, [r4, #28]
   158ec:	cmp	fp, #0
   158f0:	add	r3, r3, #2944	; 0xb80
   158f4:	str	r3, [r4, #28]
   158f8:	beq	15918 <flatcc_emitter@@Base+0x15c>
   158fc:	ldr	r3, [r4, #4]
   15900:	str	fp, [r0, #2944]	; 0xb80
   15904:	str	r3, [r0, #2948]	; 0xb84
   15908:	str	r0, [fp, #2948]	; 0xb84
   1590c:	str	r0, [r3, #2944]	; 0xb80
   15910:	str	r0, [r4]
   15914:	b	158a8 <flatcc_emitter@@Base+0xec>
   15918:	add	r3, r0, #1472	; 0x5c0
   1591c:	str	r0, [r4]
   15920:	str	r0, [r0, #2944]	; 0xb80
   15924:	stmib	r4, {r0, r3}
   15928:	str	r3, [r4, #16]
   1592c:	mov	r3, #1472	; 0x5c0
   15930:	str	r0, [r0, #2948]	; 0xb84
   15934:	str	r3, [r4, #12]
   15938:	str	r3, [r4, #20]
   1593c:	str	r9, [r0, #2952]	; 0xb88
   15940:	b	15854 <flatcc_emitter@@Base+0x98>
   15944:	mov	r2, r7
   15948:	ldr	r0, [r4, #8]
   1594c:	rsb	r1, r2, #0
   15950:	sub	r3, r3, r2
   15954:	add	sl, sl, r1
   15958:	sub	r7, r7, r2
   1595c:	str	r3, [r4, #12]
   15960:	add	r0, r0, r1
   15964:	mov	r1, sl
   15968:	str	r0, [r4, #8]
   1596c:	bl	11f90 <memcpy@plt>
   15970:	b	15854 <flatcc_emitter@@Base+0x98>
   15974:	ldr	r0, [r4, #20]
   15978:	cmp	r0, r2
   1597c:	bcs	159b0 <flatcc_emitter@@Base+0x1f4>
   15980:	ldr	sl, [pc, #308]	; 15abc <flatcc_emitter@@Base+0x300>
   15984:	add	r5, r1, #8
   15988:	mov	r9, #2944	; 0xb80
   1598c:	cmp	r6, #0
   15990:	beq	15840 <flatcc_emitter@@Base+0x84>
   15994:	ldr	fp, [r5, #-8]
   15998:	ldr	r8, [r5, #-4]
   1599c:	cmp	r8, #0
   159a0:	bne	159c8 <flatcc_emitter@@Base+0x20c>
   159a4:	sub	r6, r6, #1
   159a8:	add	r5, r5, #8
   159ac:	b	1598c <flatcc_emitter@@Base+0x1d0>
   159b0:	ldr	r3, [r4, #16]
   159b4:	add	ip, r3, r2
   159b8:	sub	r2, r0, r2
   159bc:	str	ip, [r4, #16]
   159c0:	str	r2, [r4, #20]
   159c4:	b	15800 <flatcc_emitter@@Base+0x44>
   159c8:	ldr	r7, [r4, #20]
   159cc:	cmp	r7, r8
   159d0:	bcs	15a84 <flatcc_emitter@@Base+0x2c8>
   159d4:	cmp	r7, #0
   159d8:	bne	15a88 <flatcc_emitter@@Base+0x2cc>
   159dc:	ldr	r7, [r4, #4]
   159e0:	cmp	r7, #0
   159e4:	beq	159fc <flatcc_emitter@@Base+0x240>
   159e8:	ldr	r2, [r4]
   159ec:	ldr	r3, [r7, #2944]	; 0xb80
   159f0:	cmp	r3, r2
   159f4:	strne	r3, [r4, #4]
   159f8:	bne	15a38 <flatcc_emitter@@Base+0x27c>
   159fc:	movw	r0, #2956	; 0xb8c
   15a00:	bl	11fd8 <malloc@plt>
   15a04:	cmp	r0, #0
   15a08:	beq	158dc <flatcc_emitter@@Base+0x120>
   15a0c:	ldr	r3, [r4, #28]
   15a10:	cmp	r7, #0
   15a14:	add	r3, r3, #2944	; 0xb80
   15a18:	str	r3, [r4, #28]
   15a1c:	beq	15a58 <flatcc_emitter@@Base+0x29c>
   15a20:	ldr	r3, [r4]
   15a24:	str	r3, [r0, #2944]	; 0xb80
   15a28:	str	r7, [r0, #2948]	; 0xb84
   15a2c:	str	r0, [r3, #2948]	; 0xb84
   15a30:	str	r0, [r7, #2944]	; 0xb80
   15a34:	str	r0, [r4, #4]
   15a38:	ldr	r3, [r4, #4]
   15a3c:	ldr	r2, [r3, #2948]	; 0xb84
   15a40:	ldr	r2, [r2, #2952]	; 0xb88
   15a44:	str	r3, [r4, #16]
   15a48:	str	r9, [r4, #20]
   15a4c:	add	r2, r2, #2944	; 0xb80
   15a50:	str	r2, [r3, #2952]	; 0xb88
   15a54:	b	1599c <flatcc_emitter@@Base+0x1e0>
   15a58:	add	r3, r0, #1472	; 0x5c0
   15a5c:	str	r0, [r4]
   15a60:	str	r0, [r0, #2944]	; 0xb80
   15a64:	stmib	r4, {r0, r3}
   15a68:	str	r3, [r4, #16]
   15a6c:	mov	r3, #1472	; 0x5c0
   15a70:	str	r0, [r0, #2948]	; 0xb84
   15a74:	str	r3, [r4, #12]
   15a78:	str	r3, [r4, #20]
   15a7c:	str	sl, [r0, #2952]	; 0xb88
   15a80:	b	1599c <flatcc_emitter@@Base+0x1e0>
   15a84:	mov	r7, r8
   15a88:	mov	r2, r7
   15a8c:	mov	r1, fp
   15a90:	ldr	r0, [r4, #16]
   15a94:	bl	11f90 <memcpy@plt>
   15a98:	ldr	r3, [r4, #16]
   15a9c:	sub	r8, r8, r7
   15aa0:	add	fp, fp, r7
   15aa4:	add	r3, r3, r7
   15aa8:	str	r3, [r4, #16]
   15aac:	ldr	r3, [r4, #20]
   15ab0:	sub	r7, r3, r7
   15ab4:	str	r7, [r4, #20]
   15ab8:	b	1599c <flatcc_emitter@@Base+0x1e0>
   15abc:			; <UNDEFINED> instruction: 0xfffffa40

00015ac0 <flatcc_emitter_copy_buffer@@Base>:
   15ac0:	ldr	ip, [r0, #24]
   15ac4:	push	{r4, r5, r6, lr}
   15ac8:	cmp	ip, r2
   15acc:	movhi	r6, #0
   15ad0:	bhi	15b08 <flatcc_emitter_copy_buffer@@Base+0x48>
   15ad4:	ldr	r6, [r0]
   15ad8:	cmp	r6, #0
   15adc:	beq	15b08 <flatcc_emitter_copy_buffer@@Base+0x48>
   15ae0:	ldr	r2, [r0, #4]
   15ae4:	mov	r5, r1
   15ae8:	mov	r4, r0
   15aec:	ldr	r1, [r0, #8]
   15af0:	cmp	r6, r2
   15af4:	bne	15b10 <flatcc_emitter_copy_buffer@@Base+0x50>
   15af8:	mov	r2, ip
   15afc:	mov	r0, r5
   15b00:	mov	r6, r5
   15b04:	bl	11f90 <memcpy@plt>
   15b08:	mov	r0, r6
   15b0c:	pop	{r4, r5, r6, pc}
   15b10:	ldr	r3, [r4, #12]
   15b14:	mov	r0, r5
   15b18:	rsb	r6, r3, #2944	; 0xb80
   15b1c:	mov	r2, r6
   15b20:	add	r6, r5, r6
   15b24:	bl	11f90 <memcpy@plt>
   15b28:	ldr	r2, [r4]
   15b2c:	ldr	r5, [r2, #2944]	; 0xb80
   15b30:	ldr	r2, [r4, #4]
   15b34:	cmp	r2, r5
   15b38:	bne	15b54 <flatcc_emitter_copy_buffer@@Base+0x94>
   15b3c:	ldr	r2, [r4, #20]
   15b40:	mov	r1, r5
   15b44:	mov	r0, r6
   15b48:	rsb	r2, r2, #2944	; 0xb80
   15b4c:	bl	11f90 <memcpy@plt>
   15b50:	b	15b08 <flatcc_emitter_copy_buffer@@Base+0x48>
   15b54:	mov	r1, r5
   15b58:	mov	r0, r6
   15b5c:	mov	r2, #2944	; 0xb80
   15b60:	add	r6, r6, #2944	; 0xb80
   15b64:	bl	11f90 <memcpy@plt>
   15b68:	ldr	r5, [r5, #2944]	; 0xb80
   15b6c:	b	15b30 <flatcc_emitter_copy_buffer@@Base+0x70>

00015b70 <__libc_csu_init@@Base>:
   15b70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15b74:	mov	r7, r0
   15b78:	ldr	r6, [pc, #72]	; 15bc8 <__libc_csu_init@@Base+0x58>
   15b7c:	ldr	r5, [pc, #72]	; 15bcc <__libc_csu_init@@Base+0x5c>
   15b80:	add	r6, pc, r6
   15b84:	add	r5, pc, r5
   15b88:	sub	r6, r6, r5
   15b8c:	mov	r8, r1
   15b90:	mov	r9, r2
   15b94:	bl	11f40 <strcmp@plt-0x20>
   15b98:	asrs	r6, r6, #2
   15b9c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ba0:	mov	r4, #0
   15ba4:	add	r4, r4, #1
   15ba8:	ldr	r3, [r5], #4
   15bac:	mov	r2, r9
   15bb0:	mov	r1, r8
   15bb4:	mov	r0, r7
   15bb8:	blx	r3
   15bbc:	cmp	r6, r4
   15bc0:	bne	15ba4 <__libc_csu_init@@Base+0x34>
   15bc4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15bc8:	andeq	r1, r1, ip, lsl #7
   15bcc:	andeq	r1, r1, r4, lsl #7

00015bd0 <__libc_csu_fini@@Base>:
   15bd0:	bx	lr

Disassembly of section .fini:

00015bd4 <.fini>:
   15bd4:	push	{r3, lr}
   15bd8:	pop	{r3, pc}
