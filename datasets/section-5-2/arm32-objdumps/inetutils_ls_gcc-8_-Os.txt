
../repos/inetutils/tests/ls:     file format elf32-littlearm


Disassembly of section .init:

00010b38 <.init>:
   10b38:	push	{r3, lr}
   10b3c:	bl	10e20 <__assert_fail@plt+0x4c>
   10b40:	pop	{r3, pc}

Disassembly of section .plt:

00010b44 <fstatfs64@plt-0x14>:
   10b44:	push	{lr}		; (str lr, [sp, #-4]!)
   10b48:	ldr	lr, [pc, #4]	; 10b54 <fstatfs64@plt-0x4>
   10b4c:	add	lr, pc, lr
   10b50:	ldr	pc, [lr, #8]!
   10b54:	andeq	r6, r1, ip, lsr #9

00010b58 <fstatfs64@plt>:
   10b58:	add	ip, pc, #0, 12
   10b5c:	add	ip, ip, #90112	; 0x16000
   10b60:	ldr	pc, [ip, #1196]!	; 0x4ac

00010b64 <calloc@plt>:
   10b64:	add	ip, pc, #0, 12
   10b68:	add	ip, ip, #90112	; 0x16000
   10b6c:	ldr	pc, [ip, #1188]!	; 0x4a4

00010b70 <raise@plt>:
   10b70:	add	ip, pc, #0, 12
   10b74:	add	ip, ip, #90112	; 0x16000
   10b78:	ldr	pc, [ip, #1180]!	; 0x49c

00010b7c <strcmp@plt>:
   10b7c:	add	ip, pc, #0, 12
   10b80:	add	ip, ip, #90112	; 0x16000
   10b84:	ldr	pc, [ip, #1172]!	; 0x494

00010b88 <getpwuid@plt>:
   10b88:	add	ip, pc, #0, 12
   10b8c:	add	ip, ip, #90112	; 0x16000
   10b90:	ldr	pc, [ip, #1164]!	; 0x48c

00010b94 <printf@plt>:
   10b94:	add	ip, pc, #0, 12
   10b98:	add	ip, ip, #90112	; 0x16000
   10b9c:	ldr	pc, [ip, #1156]!	; 0x484

00010ba0 <getuid@plt>:
   10ba0:	add	ip, pc, #0, 12
   10ba4:	add	ip, ip, #90112	; 0x16000
   10ba8:	ldr	pc, [ip, #1148]!	; 0x47c

00010bac <memmove@plt>:
   10bac:	add	ip, pc, #0, 12
   10bb0:	add	ip, ip, #90112	; 0x16000
   10bb4:	ldr	pc, [ip, #1140]!	; 0x474

00010bb8 <free@plt>:
   10bb8:	add	ip, pc, #0, 12
   10bbc:	add	ip, ip, #90112	; 0x16000
   10bc0:	ldr	pc, [ip, #1132]!	; 0x46c

00010bc4 <memcpy@plt>:
   10bc4:	add	ip, pc, #0, 12
   10bc8:	add	ip, ip, #90112	; 0x16000
   10bcc:	ldr	pc, [ip, #1124]!	; 0x464

00010bd0 <time@plt>:
   10bd0:	add	ip, pc, #0, 12
   10bd4:	add	ip, ip, #90112	; 0x16000
   10bd8:	ldr	pc, [ip, #1116]!	; 0x45c

00010bdc <ctime@plt>:
   10bdc:	add	ip, pc, #0, 12
   10be0:	add	ip, ip, #90112	; 0x16000
   10be4:	ldr	pc, [ip, #1108]!	; 0x454

00010be8 <realloc@plt>:
   10be8:	add	ip, pc, #0, 12
   10bec:	add	ip, ip, #90112	; 0x16000
   10bf0:	ldr	pc, [ip, #1100]!	; 0x44c

00010bf4 <funlockfile@plt>:
   10bf4:	add	ip, pc, #0, 12
   10bf8:	add	ip, ip, #90112	; 0x16000
   10bfc:	ldr	pc, [ip, #1092]!	; 0x444

00010c00 <__fxstatat64@plt>:
   10c00:	add	ip, pc, #0, 12
   10c04:	add	ip, ip, #90112	; 0x16000
   10c08:	ldr	pc, [ip, #1084]!	; 0x43c

00010c0c <__fxstat64@plt>:
   10c0c:	add	ip, pc, #0, 12
   10c10:	add	ip, ip, #90112	; 0x16000
   10c14:	ldr	pc, [ip, #1076]!	; 0x434

00010c18 <readlink@plt>:
   10c18:	add	ip, pc, #0, 12
   10c1c:	add	ip, ip, #90112	; 0x16000
   10c20:	ldr	pc, [ip, #1068]!	; 0x42c

00010c24 <ioctl@plt>:
   10c24:	add	ip, pc, #0, 12
   10c28:	add	ip, ip, #90112	; 0x16000
   10c2c:	ldr	pc, [ip, #1060]!	; 0x424

00010c30 <strcpy@plt>:
   10c30:	add	ip, pc, #0, 12
   10c34:	add	ip, ip, #90112	; 0x16000
   10c38:	ldr	pc, [ip, #1052]!	; 0x41c

00010c3c <open64@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #90112	; 0x16000
   10c44:	ldr	pc, [ip, #1044]!	; 0x414

00010c48 <getenv@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #90112	; 0x16000
   10c50:	ldr	pc, [ip, #1036]!	; 0x40c

00010c54 <malloc@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #90112	; 0x16000
   10c5c:	ldr	pc, [ip, #1028]!	; 0x404

00010c60 <__libc_start_main@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #90112	; 0x16000
   10c68:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c6c <strerror@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #90112	; 0x16000
   10c74:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c78 <__gmon_start__@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #90112	; 0x16000
   10c80:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c84 <__ctype_b_loc@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #90112	; 0x16000
   10c8c:	ldr	pc, [ip, #996]!	; 0x3e4

00010c90 <strlen@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #90112	; 0x16000
   10c98:	ldr	pc, [ip, #988]!	; 0x3dc

00010c9c <strchr@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #90112	; 0x16000
   10ca4:	ldr	pc, [ip, #980]!	; 0x3d4

00010ca8 <openat64@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #90112	; 0x16000
   10cb0:	ldr	pc, [ip, #972]!	; 0x3cc

00010cb4 <fprintf@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #90112	; 0x16000
   10cbc:	ldr	pc, [ip, #964]!	; 0x3c4

00010cc0 <__errno_location@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #90112	; 0x16000
   10cc8:	ldr	pc, [ip, #956]!	; 0x3bc

00010ccc <snprintf@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #90112	; 0x16000
   10cd4:	ldr	pc, [ip, #948]!	; 0x3b4

00010cd8 <memset@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #90112	; 0x16000
   10ce0:	ldr	pc, [ip, #940]!	; 0x3ac

00010ce4 <putchar@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #90112	; 0x16000
   10cec:	ldr	pc, [ip, #932]!	; 0x3a4

00010cf0 <fcntl64@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #90112	; 0x16000
   10cf8:	ldr	pc, [ip, #924]!	; 0x39c

00010cfc <strrchr@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #90112	; 0x16000
   10d04:	ldr	pc, [ip, #916]!	; 0x394

00010d08 <fputc@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #90112	; 0x16000
   10d10:	ldr	pc, [ip, #908]!	; 0x38c

00010d14 <readdir64@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #90112	; 0x16000
   10d1c:	ldr	pc, [ip, #900]!	; 0x384

00010d20 <fdopendir@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #90112	; 0x16000
   10d28:	ldr	pc, [ip, #892]!	; 0x37c

00010d2c <dirfd@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #90112	; 0x16000
   10d34:	ldr	pc, [ip, #884]!	; 0x374

00010d38 <flockfile@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #90112	; 0x16000
   10d40:	ldr	pc, [ip, #876]!	; 0x36c

00010d44 <atoi@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #90112	; 0x16000
   10d4c:	ldr	pc, [ip, #868]!	; 0x364

00010d50 <fchdir@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #90112	; 0x16000
   10d58:	ldr	pc, [ip, #860]!	; 0x35c

00010d5c <qsort@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #90112	; 0x16000
   10d64:	ldr	pc, [ip, #852]!	; 0x354

00010d68 <__xstat64@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #90112	; 0x16000
   10d70:	ldr	pc, [ip, #844]!	; 0x34c

00010d74 <isatty@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #90112	; 0x16000
   10d7c:	ldr	pc, [ip, #836]!	; 0x344

00010d80 <fputs@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #90112	; 0x16000
   10d88:	ldr	pc, [ip, #828]!	; 0x33c

00010d8c <strncmp@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #90112	; 0x16000
   10d94:	ldr	pc, [ip, #820]!	; 0x334

00010d98 <abort@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #90112	; 0x16000
   10da0:	ldr	pc, [ip, #812]!	; 0x32c

00010da4 <close@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #90112	; 0x16000
   10dac:	ldr	pc, [ip, #804]!	; 0x324

00010db0 <__lxstat64@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #90112	; 0x16000
   10db8:	ldr	pc, [ip, #796]!	; 0x31c

00010dbc <closedir@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #90112	; 0x16000
   10dc4:	ldr	pc, [ip, #788]!	; 0x314

00010dc8 <getgrgid@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #780]!	; 0x30c

00010dd4 <__assert_fail@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #772]!	; 0x304

Disassembly of section .text:

00010de0 <.text>:
   10de0:	b	11648 <__assert_fail@plt+0x874>
   10de4:	mov	fp, #0
   10de8:	mov	lr, #0
   10dec:	pop	{r1}		; (ldr r1, [sp], #4)
   10df0:	mov	r2, sp
   10df4:	push	{r2}		; (str r2, [sp, #-4]!)
   10df8:	push	{r0}		; (str r0, [sp, #-4]!)
   10dfc:	ldr	ip, [pc, #16]	; 10e14 <__assert_fail@plt+0x40>
   10e00:	push	{ip}		; (str ip, [sp, #-4]!)
   10e04:	ldr	r0, [pc, #12]	; 10e18 <__assert_fail@plt+0x44>
   10e08:	ldr	r3, [pc, #12]	; 10e1c <__assert_fail@plt+0x48>
   10e0c:	bl	10c60 <__libc_start_main@plt>
   10e10:	bl	10d98 <abort@plt>
   10e14:	andeq	r6, r1, r0, ror #14
   10e18:	andeq	r0, r1, r0, ror #27
   10e1c:	andeq	r6, r1, r0, lsl #14
   10e20:	ldr	r3, [pc, #20]	; 10e3c <__assert_fail@plt+0x68>
   10e24:	ldr	r2, [pc, #20]	; 10e40 <__assert_fail@plt+0x6c>
   10e28:	add	r3, pc, r3
   10e2c:	ldr	r2, [r3, r2]
   10e30:	cmp	r2, #0
   10e34:	bxeq	lr
   10e38:	b	10c78 <__gmon_start__@plt>
   10e3c:	ldrdeq	r6, [r1], -r0
   10e40:	andeq	r0, r0, r4, ror #1
   10e44:	ldr	r0, [pc, #24]	; 10e64 <__assert_fail@plt+0x90>
   10e48:	ldr	r3, [pc, #24]	; 10e68 <__assert_fail@plt+0x94>
   10e4c:	cmp	r3, r0
   10e50:	bxeq	lr
   10e54:	ldr	r3, [pc, #16]	; 10e6c <__assert_fail@plt+0x98>
   10e58:	cmp	r3, #0
   10e5c:	bxeq	lr
   10e60:	bx	r3
   10e64:	andeq	r7, r2, r0, lsl r1
   10e68:	andeq	r7, r2, r0, lsl r1
   10e6c:	andeq	r0, r0, r0
   10e70:	ldr	r0, [pc, #36]	; 10e9c <__assert_fail@plt+0xc8>
   10e74:	ldr	r1, [pc, #36]	; 10ea0 <__assert_fail@plt+0xcc>
   10e78:	sub	r1, r1, r0
   10e7c:	asr	r1, r1, #2
   10e80:	add	r1, r1, r1, lsr #31
   10e84:	asrs	r1, r1, #1
   10e88:	bxeq	lr
   10e8c:	ldr	r3, [pc, #16]	; 10ea4 <__assert_fail@plt+0xd0>
   10e90:	cmp	r3, #0
   10e94:	bxeq	lr
   10e98:	bx	r3
   10e9c:	andeq	r7, r2, r0, lsl r1
   10ea0:	andeq	r7, r2, r0, lsl r1
   10ea4:	andeq	r0, r0, r0
   10ea8:	push	{r4, lr}
   10eac:	ldr	r4, [pc, #24]	; 10ecc <__assert_fail@plt+0xf8>
   10eb0:	ldrb	r3, [r4]
   10eb4:	cmp	r3, #0
   10eb8:	popne	{r4, pc}
   10ebc:	bl	10e44 <__assert_fail@plt+0x70>
   10ec0:	mov	r3, #1
   10ec4:	strb	r3, [r4]
   10ec8:	pop	{r4, pc}
   10ecc:	andeq	r7, r2, r4, lsl r1
   10ed0:	b	10e70 <__assert_fail@plt+0x9c>
   10ed4:	ldr	r0, [r0]
   10ed8:	ldrh	r3, [r0, #56]	; 0x38
   10edc:	cmp	r3, #7
   10ee0:	beq	10f54 <__assert_fail@plt+0x180>
   10ee4:	ldr	r1, [r1]
   10ee8:	ldrh	r2, [r1, #56]	; 0x38
   10eec:	cmp	r2, #7
   10ef0:	beq	10f54 <__assert_fail@plt+0x180>
   10ef4:	cmp	r2, #10
   10ef8:	cmpne	r3, #10
   10efc:	bne	10f14 <__assert_fail@plt+0x140>
   10f00:	cmp	r2, #10
   10f04:	bne	10f60 <__assert_fail@plt+0x18c>
   10f08:	cmp	r3, #10
   10f0c:	bne	10f68 <__assert_fail@plt+0x194>
   10f10:	b	12754 <__assert_fail@plt+0x1980>
   10f14:	cmp	r3, r2
   10f18:	beq	10f7c <__assert_fail@plt+0x1a8>
   10f1c:	ldr	ip, [pc, #100]	; 10f88 <__assert_fail@plt+0x1b4>
   10f20:	push	{lr}		; (str lr, [sp, #-4]!)
   10f24:	ldr	lr, [r0, #48]	; 0x30
   10f28:	ldr	ip, [ip]
   10f2c:	orrs	ip, lr, ip
   10f30:	bne	10f44 <__assert_fail@plt+0x170>
   10f34:	cmp	r3, #1
   10f38:	beq	10f74 <__assert_fail@plt+0x1a0>
   10f3c:	cmp	r2, #1
   10f40:	beq	10f70 <__assert_fail@plt+0x19c>
   10f44:	ldr	r3, [pc, #64]	; 10f8c <__assert_fail@plt+0x1b8>
   10f48:	pop	{lr}		; (ldr lr, [sp], #4)
   10f4c:	ldr	r3, [r3]
   10f50:	bx	r3
   10f54:	mov	r3, #0
   10f58:	mov	r0, r3
   10f5c:	bx	lr
   10f60:	mov	r3, #1
   10f64:	b	10f58 <__assert_fail@plt+0x184>
   10f68:	mvn	r3, #0
   10f6c:	b	10f58 <__assert_fail@plt+0x184>
   10f70:	mvn	r3, #0
   10f74:	mov	r0, r3
   10f78:	pop	{pc}		; (ldr pc, [sp], #4)
   10f7c:	ldr	r3, [pc, #8]	; 10f8c <__assert_fail@plt+0x1b8>
   10f80:	ldr	r3, [r3]
   10f84:	b	10f50 <__assert_fail@plt+0x17c>
   10f88:	muleq	r2, ip, r1
   10f8c:	andeq	r7, r2, r8, lsl r1
   10f90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f94:	sub	sp, sp, #188	; 0xbc
   10f98:	subs	r8, r1, #0
   10f9c:	str	r0, [sp, #56]	; 0x38
   10fa0:	beq	11330 <__assert_fail@plt+0x55c>
   10fa4:	ldr	r2, [pc, #1044]	; 113c0 <__assert_fail@plt+0x5ec>
   10fa8:	mov	r5, #0
   10fac:	mov	r0, #0
   10fb0:	mov	r4, r8
   10fb4:	mov	r9, r5
   10fb8:	ldr	r3, [pc, #1028]	; 113c4 <__assert_fail@plt+0x5f0>
   10fbc:	mov	sl, r5
   10fc0:	str	r5, [sp, #8]
   10fc4:	str	r5, [sp, #12]
   10fc8:	ldr	r1, [r2]
   10fcc:	str	r5, [sp, #16]
   10fd0:	ldr	r3, [r3]
   10fd4:	str	r5, [sp, #20]
   10fd8:	str	r5, [sp, #32]
   10fdc:	str	r5, [sp, #36]	; 0x24
   10fe0:	str	r5, [sp, #40]	; 0x28
   10fe4:	orr	r3, r3, r1
   10fe8:	ldr	r1, [pc, #984]	; 113c8 <__assert_fail@plt+0x5f4>
   10fec:	str	r5, [sp, #44]	; 0x2c
   10ff0:	str	r2, [sp, #60]	; 0x3c
   10ff4:	ldr	r1, [r1]
   10ff8:	orr	r3, r3, r1
   10ffc:	mov	r1, #0
   11000:	strd	r0, [sp, #24]
   11004:	str	r3, [sp, #48]	; 0x30
   11008:	ldrh	r3, [r4, #56]	; 0x38
   1100c:	cmp	r3, #10
   11010:	cmpne	r3, #7
   11014:	bne	11140 <__assert_fail@plt+0x36c>
   11018:	ldr	r3, [pc, #940]	; 113cc <__assert_fail@plt+0x5f8>
   1101c:	ldr	r0, [r4, #32]
   11020:	ldr	r6, [r3]
   11024:	bl	10c6c <strerror@plt>
   11028:	mov	r3, r0
   1102c:	add	r2, r4, #168	; 0xa8
   11030:	ldr	r1, [pc, #920]	; 113d0 <__assert_fail@plt+0x5fc>
   11034:	mov	r0, r6
   11038:	bl	10cb4 <fprintf@plt>
   1103c:	ldr	r2, [pc, #912]	; 113d4 <__assert_fail@plt+0x600>
   11040:	mov	r3, #1
   11044:	str	r3, [r4, #16]
   11048:	str	r3, [r2]
   1104c:	ldr	r4, [r4, #8]
   11050:	cmp	r4, #0
   11054:	bne	11008 <__assert_fail@plt+0x234>
   11058:	ldr	r3, [sp, #32]
   1105c:	cmp	r3, #0
   11060:	beq	11330 <__assert_fail@plt+0x55c>
   11064:	str	r8, [sp, #136]	; 0x88
   11068:	str	r3, [sp, #148]	; 0x94
   1106c:	ldr	r3, [sp, #8]
   11070:	str	r3, [sp, #152]	; 0x98
   11074:	ldr	r3, [sp, #48]	; 0x30
   11078:	cmp	r3, #0
   1107c:	beq	11104 <__assert_fail@plt+0x330>
   11080:	ldr	r0, [sp, #12]
   11084:	add	r2, sp, #64	; 0x40
   11088:	ldr	r3, [sp, #40]	; 0x28
   1108c:	asr	r1, r0, #31
   11090:	str	r3, [sp, #144]	; 0x90
   11094:	ldr	r3, [sp, #36]	; 0x24
   11098:	str	r3, [sp, #140]	; 0x8c
   1109c:	bl	15fe4 <__assert_fail@plt+0x5210>
   110a0:	bl	10c90 <strlen@plt>
   110a4:	ldr	r3, [sp, #44]	; 0x2c
   110a8:	add	r2, sp, #64	; 0x40
   110ac:	mov	r1, r4
   110b0:	str	r0, [sp, #156]	; 0x9c
   110b4:	mov	r0, sl
   110b8:	str	r3, [sp, #160]	; 0xa0
   110bc:	ldr	r3, [sp, #16]
   110c0:	str	r3, [sp, #164]	; 0xa4
   110c4:	bl	15fe4 <__assert_fail@plt+0x5210>
   110c8:	bl	10c90 <strlen@plt>
   110cc:	add	r2, sp, #64	; 0x40
   110d0:	mov	r1, r4
   110d4:	str	r0, [sp, #168]	; 0xa8
   110d8:	mov	r0, r9
   110dc:	bl	15fe4 <__assert_fail@plt+0x5210>
   110e0:	bl	10c90 <strlen@plt>
   110e4:	add	r2, sp, #64	; 0x40
   110e8:	str	r0, [sp, #172]	; 0xac
   110ec:	ldrd	r0, [sp, #24]
   110f0:	bl	15fe4 <__assert_fail@plt+0x5210>
   110f4:	bl	10c90 <strlen@plt>
   110f8:	ldr	r3, [sp, #20]
   110fc:	str	r0, [sp, #176]	; 0xb0
   11100:	str	r3, [sp, #180]	; 0xb4
   11104:	ldr	r4, [pc, #716]	; 113d8 <__assert_fail@plt+0x604>
   11108:	add	r0, sp, #136	; 0x88
   1110c:	ldr	r3, [r4, #4]
   11110:	blx	r3
   11114:	mov	r3, #1
   11118:	str	r3, [r4, #8]
   1111c:	ldr	r3, [pc, #668]	; 113c0 <__assert_fail@plt+0x5ec>
   11120:	ldr	r3, [r3]
   11124:	cmp	r3, #0
   11128:	beq	11330 <__assert_fail@plt+0x55c>
   1112c:	ldr	r0, [r8, #20]
   11130:	bl	12a20 <__assert_fail@plt+0x1c4c>
   11134:	ldr	r8, [r8, #8]
   11138:	cmp	r8, #0
   1113c:	b	11128 <__assert_fail@plt+0x354>
   11140:	ldr	r2, [sp, #56]	; 0x38
   11144:	cmp	r2, #0
   11148:	bne	1116c <__assert_fail@plt+0x398>
   1114c:	cmp	r3, #1
   11150:	bne	1118c <__assert_fail@plt+0x3b8>
   11154:	ldr	r2, [pc, #640]	; 113dc <__assert_fail@plt+0x608>
   11158:	ldr	r2, [r2]
   1115c:	cmp	r2, #0
   11160:	bne	1118c <__assert_fail@plt+0x3b8>
   11164:	str	r3, [r4, #16]
   11168:	b	1104c <__assert_fail@plt+0x278>
   1116c:	ldrb	r3, [r4, #168]	; 0xa8
   11170:	cmp	r3, #46	; 0x2e
   11174:	bne	1118c <__assert_fail@plt+0x3b8>
   11178:	ldr	r3, [pc, #608]	; 113e0 <__assert_fail@plt+0x60c>
   1117c:	ldr	r3, [r3]
   11180:	cmp	r3, #0
   11184:	moveq	r3, #1
   11188:	beq	11164 <__assert_fail@plt+0x390>
   1118c:	ldr	r2, [sp, #8]
   11190:	ldr	r3, [r4, #52]	; 0x34
   11194:	cmp	r2, r3
   11198:	movcs	r3, r2
   1119c:	str	r3, [sp, #8]
   111a0:	ldr	r3, [sp, #48]	; 0x30
   111a4:	cmp	r3, #0
   111a8:	beq	113a4 <__assert_fail@plt+0x5d0>
   111ac:	ldr	r0, [sp, #12]
   111b0:	mov	r7, #0
   111b4:	ldrd	r2, [r4, #128]	; 0x80
   111b8:	asr	r1, r0, #31
   111bc:	cmp	r0, r2
   111c0:	sbcs	r1, r1, r3
   111c4:	ldr	r1, [sp, #12]
   111c8:	movlt	r1, r2
   111cc:	str	r1, [sp, #12]
   111d0:	ldrd	r0, [r4, #160]	; 0xa0
   111d4:	cmp	r1, r7
   111d8:	ldr	r1, [r4, #84]	; 0x54
   111dc:	cmpeq	r0, sl
   111e0:	movhi	sl, r0
   111e4:	ldrd	r6, [sp, #24]
   111e8:	cmp	r9, r1
   111ec:	movcc	r9, r1
   111f0:	ldrd	r0, [r4, #112]	; 0x70
   111f4:	cmp	r6, r0
   111f8:	sbcs	ip, r7, r1
   111fc:	strdlt	r0, [sp, #24]
   11200:	ldr	r1, [sp, #36]	; 0x24
   11204:	add	r3, r1, r2
   11208:	str	r3, [sp, #36]	; 0x24
   1120c:	ldr	r3, [sp, #60]	; 0x3c
   11210:	ldr	r3, [r3]
   11214:	cmp	r3, #0
   11218:	beq	113a4 <__assert_fail@plt+0x5d0>
   1121c:	ldr	r3, [pc, #448]	; 113e4 <__assert_fail@plt+0x610>
   11220:	ldr	r3, [r3]
   11224:	cmp	r3, #0
   11228:	beq	11248 <__assert_fail@plt+0x474>
   1122c:	mov	fp, #0
   11230:	add	r2, sp, #88	; 0x58
   11234:	mov	r1, #0
   11238:	ldr	r0, [r4, #88]	; 0x58
   1123c:	bl	15fe4 <__assert_fail@plt+0x5210>
   11240:	mov	r6, r0
   11244:	b	11274 <__assert_fail@plt+0x4a0>
   11248:	ldr	r0, [r4, #88]	; 0x58
   1124c:	bl	10b88 <getpwuid@plt>
   11250:	subs	r6, r0, #0
   11254:	ldr	r0, [r4, #92]	; 0x5c
   11258:	ldrne	r6, [r6]
   1125c:	bl	10dc8 <getgrgid@plt>
   11260:	cmp	r0, #0
   11264:	beq	113b4 <__assert_fail@plt+0x5e0>
   11268:	cmp	r6, #0
   1126c:	ldr	fp, [r0]
   11270:	beq	11230 <__assert_fail@plt+0x45c>
   11274:	cmp	fp, #0
   11278:	bne	11290 <__assert_fail@plt+0x4bc>
   1127c:	add	r2, sp, #112	; 0x70
   11280:	mov	r1, #0
   11284:	ldr	r0, [r4, #92]	; 0x5c
   11288:	bl	15fe4 <__assert_fail@plt+0x5210>
   1128c:	mov	fp, r0
   11290:	mov	r0, r6
   11294:	bl	10c90 <strlen@plt>
   11298:	ldr	r3, [sp, #20]
   1129c:	str	r0, [sp, #4]
   112a0:	cmp	r3, r0
   112a4:	movlt	r3, r0
   112a8:	mov	r0, fp
   112ac:	str	r3, [sp, #20]
   112b0:	bl	10c90 <strlen@plt>
   112b4:	ldr	r3, [sp, #16]
   112b8:	cmp	r3, r0
   112bc:	movlt	r3, r0
   112c0:	str	r3, [sp, #16]
   112c4:	ldr	r3, [pc, #284]	; 113e8 <__assert_fail@plt+0x614>
   112c8:	ldr	r2, [r3]
   112cc:	cmp	r2, #0
   112d0:	movne	r3, #1
   112d4:	ldrne	r5, [pc, #272]	; 113ec <__assert_fail@plt+0x618>
   112d8:	movne	r2, r3
   112dc:	strne	r3, [sp, #44]	; 0x2c
   112e0:	ldr	r3, [sp, #4]
   112e4:	add	r3, r3, r0
   112e8:	add	r0, r3, #19
   112ec:	add	r0, r0, r2
   112f0:	str	r3, [sp, #52]	; 0x34
   112f4:	bl	1618c <__assert_fail@plt+0x53b8>
   112f8:	subs	r7, r0, #0
   112fc:	bne	11338 <__assert_fail@plt+0x564>
   11300:	ldr	r3, [pc, #196]	; 113cc <__assert_fail@plt+0x5f8>
   11304:	ldr	r4, [r3]
   11308:	bl	10cc0 <__errno_location@plt>
   1130c:	ldr	r0, [r0]
   11310:	bl	10c6c <strerror@plt>
   11314:	mov	r2, r0
   11318:	ldr	r1, [pc, #208]	; 113f0 <__assert_fail@plt+0x61c>
   1131c:	mov	r0, r4
   11320:	bl	10cb4 <fprintf@plt>
   11324:	ldr	r3, [pc, #168]	; 113d4 <__assert_fail@plt+0x600>
   11328:	mov	r2, #1
   1132c:	str	r2, [r3]
   11330:	add	sp, sp, #188	; 0xbc
   11334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11338:	add	r0, r7, #12
   1133c:	mov	r1, r6
   11340:	str	r0, [r7]
   11344:	bl	10c30 <strcpy@plt>
   11348:	ldr	r3, [sp, #4]
   1134c:	mov	r1, fp
   11350:	add	r0, r3, #13
   11354:	add	r0, r7, r0
   11358:	str	r0, [r7, #4]
   1135c:	bl	10c30 <strcpy@plt>
   11360:	ldr	r3, [r4, #80]	; 0x50
   11364:	and	r3, r3, #45056	; 0xb000
   11368:	cmp	r3, #8192	; 0x2000
   1136c:	ldr	r3, [sp, #40]	; 0x28
   11370:	moveq	r3, #1
   11374:	str	r3, [sp, #40]	; 0x28
   11378:	ldr	r3, [pc, #104]	; 113e8 <__assert_fail@plt+0x614>
   1137c:	ldr	r3, [r3]
   11380:	cmp	r3, #0
   11384:	beq	113a0 <__assert_fail@plt+0x5cc>
   11388:	ldr	r3, [sp, #52]	; 0x34
   1138c:	mov	r1, r5
   11390:	add	r0, r3, #14
   11394:	add	r0, r7, r0
   11398:	str	r0, [r7, #8]
   1139c:	bl	10c30 <strcpy@plt>
   113a0:	str	r7, [r4, #20]
   113a4:	ldr	r3, [sp, #32]
   113a8:	add	r3, r3, #1
   113ac:	str	r3, [sp, #32]
   113b0:	b	1104c <__assert_fail@plt+0x278>
   113b4:	cmp	r6, #0
   113b8:	bne	1127c <__assert_fail@plt+0x4a8>
   113bc:	b	1122c <__assert_fail@plt+0x458>
   113c0:	andeq	r7, r2, r8, lsl #3
   113c4:	andeq	r7, r2, ip, ror #2
   113c8:	andeq	r7, r2, r4, asr r1
   113cc:	andeq	r7, r2, r0, lsl r1
   113d0:	andeq	r6, r1, r3, asr #16
   113d4:	andeq	r7, r2, r4, lsl #3
   113d8:	andeq	r7, r2, r8, lsl r1
   113dc:	muleq	r2, ip, r1
   113e0:	andeq	r7, r2, ip, lsr #3
   113e4:	muleq	r2, r4, r1
   113e8:	andeq	r7, r2, r4, ror #2
   113ec:	ldrdeq	r6, [r1], -r6	; <UNPREDICTABLE>
   113f0:	andeq	r6, r1, r8, asr #15
   113f4:	ldr	r3, [pc, #532]	; 11610 <__assert_fail@plt+0x83c>
   113f8:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113fc:	mov	r5, r1
   11400:	mov	r4, r2
   11404:	mov	r9, r0
   11408:	mov	r1, r4
   1140c:	mov	r0, r5
   11410:	ldr	r2, [pc, #508]	; 11614 <__assert_fail@plt+0x840>
   11414:	ldr	r3, [r3]
   11418:	cmp	r3, #0
   1141c:	movne	r2, #0
   11420:	bl	13c20 <__assert_fail@plt+0x2e4c>
   11424:	subs	r7, r0, #0
   11428:	bne	1146c <__assert_fail@plt+0x698>
   1142c:	ldr	r3, [pc, #484]	; 11618 <__assert_fail@plt+0x844>
   11430:	ldr	r5, [r5]
   11434:	ldr	r4, [r3]
   11438:	bl	10cc0 <__errno_location@plt>
   1143c:	ldr	r0, [r0]
   11440:	bl	10c6c <strerror@plt>
   11444:	mov	r3, r0
   11448:	mov	r2, r5
   1144c:	ldr	r1, [pc, #456]	; 1161c <__assert_fail@plt+0x848>
   11450:	mov	r0, r4
   11454:	bl	10cb4 <fprintf@plt>
   11458:	ldr	r3, [pc, #448]	; 11620 <__assert_fail@plt+0x84c>
   1145c:	mov	r2, #1
   11460:	str	r2, [r3]
   11464:	add	sp, sp, #4
   11468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1146c:	mov	r1, #0
   11470:	bl	14618 <__assert_fail@plt+0x3844>
   11474:	mov	r1, r0
   11478:	mov	r0, #0
   1147c:	bl	10f90 <__assert_fail@plt+0x1bc>
   11480:	ldr	r3, [pc, #412]	; 11624 <__assert_fail@plt+0x850>
   11484:	ldr	r5, [r3]
   11488:	cmp	r5, #0
   1148c:	bne	11464 <__assert_fail@plt+0x690>
   11490:	ldr	r6, [pc, #400]	; 11628 <__assert_fail@plt+0x854>
   11494:	ldr	r3, [r6]
   11498:	cmp	r3, #0
   1149c:	bne	114a8 <__assert_fail@plt+0x6d4>
   114a0:	ands	r5, r4, #8
   114a4:	movne	r5, #4096	; 0x1000
   114a8:	ldr	r8, [pc, #360]	; 11618 <__assert_fail@plt+0x844>
   114ac:	ldr	sl, [pc, #364]	; 11620 <__assert_fail@plt+0x84c>
   114b0:	mov	r0, r7
   114b4:	bl	14028 <__assert_fail@plt+0x3254>
   114b8:	subs	r4, r0, #0
   114bc:	bne	114f0 <__assert_fail@plt+0x71c>
   114c0:	bl	10cc0 <__errno_location@plt>
   114c4:	ldr	r0, [r0]
   114c8:	cmp	r0, #0
   114cc:	beq	11464 <__assert_fail@plt+0x690>
   114d0:	ldr	r3, [pc, #320]	; 11618 <__assert_fail@plt+0x844>
   114d4:	ldr	r4, [r3]
   114d8:	bl	10c6c <strerror@plt>
   114dc:	mov	r2, r0
   114e0:	ldr	r1, [pc, #324]	; 1162c <__assert_fail@plt+0x858>
   114e4:	mov	r0, r4
   114e8:	bl	10cb4 <fprintf@plt>
   114ec:	b	11458 <__assert_fail@plt+0x684>
   114f0:	ldrh	r3, [r4, #56]	; 0x38
   114f4:	sub	r3, r3, #1
   114f8:	cmp	r3, #6
   114fc:	ldrls	pc, [pc, r3, lsl #2]
   11500:	b	114b0 <__assert_fail@plt+0x6dc>
   11504:	andeq	r1, r1, r0, lsr #10
   11508:	ldrdeq	r1, [r1], -r0
   1150c:			; <UNDEFINED> instruction: 0x000114b0
   11510:	andeq	r1, r1, r4, ror #11
   11514:			; <UNDEFINED> instruction: 0x000114b0
   11518:			; <UNDEFINED> instruction: 0x000114b0
   1151c:	andeq	r1, r1, r4, ror #11
   11520:	ldrb	r3, [r4, #168]	; 0xa8
   11524:	cmp	r3, #46	; 0x2e
   11528:	bne	11548 <__assert_fail@plt+0x774>
   1152c:	ldr	r3, [r4, #48]	; 0x30
   11530:	cmp	r3, #0
   11534:	beq	11548 <__assert_fail@plt+0x774>
   11538:	ldr	r3, [pc, #240]	; 11630 <__assert_fail@plt+0x85c>
   1153c:	ldr	r3, [r3]
   11540:	cmp	r3, #0
   11544:	beq	114b0 <__assert_fail@plt+0x6dc>
   11548:	ldr	fp, [pc, #228]	; 11634 <__assert_fail@plt+0x860>
   1154c:	ldr	r3, [fp, #8]
   11550:	cmp	r3, #0
   11554:	beq	115b0 <__assert_fail@plt+0x7dc>
   11558:	ldr	r0, [pc, #216]	; 11638 <__assert_fail@plt+0x864>
   1155c:	ldr	r1, [r4, #28]
   11560:	bl	10b94 <printf@plt>
   11564:	mov	r1, r5
   11568:	mov	r0, r7
   1156c:	bl	14618 <__assert_fail@plt+0x3844>
   11570:	mov	fp, r0
   11574:	mov	r1, r0
   11578:	mov	r0, r4
   1157c:	bl	10f90 <__assert_fail@plt+0x1bc>
   11580:	ldr	r3, [r6]
   11584:	adds	fp, fp, #0
   11588:	movne	fp, #1
   1158c:	cmp	r3, #0
   11590:	movne	fp, #0
   11594:	cmp	fp, #0
   11598:	beq	114b0 <__assert_fail@plt+0x6dc>
   1159c:	mov	r2, #4
   115a0:	mov	r1, r4
   115a4:	mov	r0, r7
   115a8:	bl	145ec <__assert_fail@plt+0x3818>
   115ac:	b	114b0 <__assert_fail@plt+0x6dc>
   115b0:	cmp	r9, #1
   115b4:	ble	11564 <__assert_fail@plt+0x790>
   115b8:	ldr	r0, [pc, #124]	; 1163c <__assert_fail@plt+0x868>
   115bc:	ldr	r1, [r4, #28]
   115c0:	bl	10b94 <printf@plt>
   115c4:	mov	r3, #1
   115c8:	str	r3, [fp, #8]
   115cc:	b	11564 <__assert_fail@plt+0x790>
   115d0:	add	r2, r4, #168	; 0xa8
   115d4:	ldr	r1, [pc, #100]	; 11640 <__assert_fail@plt+0x86c>
   115d8:	ldr	r0, [r8]
   115dc:	bl	10cb4 <fprintf@plt>
   115e0:	b	114b0 <__assert_fail@plt+0x6dc>
   115e4:	ldr	fp, [r8]
   115e8:	ldr	r0, [r4, #32]
   115ec:	bl	10c6c <strerror@plt>
   115f0:	mov	r3, r0
   115f4:	add	r2, r4, #168	; 0xa8
   115f8:	ldr	r1, [pc, #68]	; 11644 <__assert_fail@plt+0x870>
   115fc:	mov	r0, fp
   11600:	bl	10cb4 <fprintf@plt>
   11604:	mov	r3, #1
   11608:	str	r3, [sl]
   1160c:	b	114b0 <__assert_fail@plt+0x6dc>
   11610:	andeq	r7, r2, r8, ror r1
   11614:	ldrdeq	r0, [r1], -r4
   11618:	andeq	r7, r2, r0, lsl r1
   1161c:	ldrdeq	r6, [r1], -r3
   11620:	andeq	r7, r2, r4, lsl #3
   11624:	muleq	r2, ip, r1
   11628:	andeq	r7, r2, r8, ror #2
   1162c:	andeq	r6, r1, r7, lsl #16
   11630:	andeq	r7, r2, ip, lsr #3
   11634:	andeq	r7, r2, r8, lsl r1
   11638:	andeq	r6, r1, r4, ror #15
   1163c:	andeq	r6, r1, r5, ror #15
   11640:	andeq	r6, r1, sl, ror #15
   11644:	andeq	r6, r1, r3, asr #16
   11648:	ldr	ip, [pc, #1576]	; 11c78 <__assert_fail@plt+0xea4>
   1164c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11650:	sub	sp, sp, #36	; 0x24
   11654:	strd	r0, [sp, #4]
   11658:	mov	r0, #0
   1165c:	ldr	r3, [pc, #1560]	; 11c7c <__assert_fail@plt+0xea8>
   11660:	str	r0, [ip]
   11664:	ldr	ip, [pc, #1556]	; 11c80 <__assert_fail@plt+0xeac>
   11668:	ldr	r2, [pc, #1556]	; 11c84 <__assert_fail@plt+0xeb0>
   1166c:	str	r0, [r3]
   11670:	ldr	r1, [pc, #1552]	; 11c88 <__assert_fail@plt+0xeb4>
   11674:	str	r0, [ip]
   11678:	ldr	ip, [pc, #1548]	; 11c8c <__assert_fail@plt+0xeb8>
   1167c:	str	r0, [r2]
   11680:	ldr	r3, [pc, #1544]	; 11c90 <__assert_fail@plt+0xebc>
   11684:	str	r0, [r1]
   11688:	ldr	sl, [pc, #1540]	; 11c94 <__assert_fail@plt+0xec0>
   1168c:	str	r0, [ip]
   11690:	ldr	ip, [pc, #1536]	; 11c98 <__assert_fail@plt+0xec4>
   11694:	str	r0, [r3]
   11698:	ldr	r4, [pc, #1532]	; 11c9c <__assert_fail@plt+0xec8>
   1169c:	str	r0, [sl]
   116a0:	ldr	r5, [pc, #1528]	; 11ca0 <__assert_fail@plt+0xecc>
   116a4:	str	r0, [ip]
   116a8:	ldr	ip, [pc, #1524]	; 11ca4 <__assert_fail@plt+0xed0>
   116ac:	str	r0, [r4, #8]
   116b0:	ldr	r7, [pc, #1520]	; 11ca8 <__assert_fail@plt+0xed4>
   116b4:	str	r0, [r5]
   116b8:	ldr	r8, [pc, #1516]	; 11cac <__assert_fail@plt+0xed8>
   116bc:	str	r0, [ip]
   116c0:	ldr	ip, [pc, #1512]	; 11cb0 <__assert_fail@plt+0xedc>
   116c4:	str	r0, [r7]
   116c8:	ldr	r6, [pc, #1508]	; 11cb4 <__assert_fail@plt+0xee0>
   116cc:	str	r0, [r8]
   116d0:	ldr	fp, [pc, #1504]	; 11cb8 <__assert_fail@plt+0xee4>
   116d4:	str	r0, [ip]
   116d8:	ldr	ip, [pc, #1500]	; 11cbc <__assert_fail@plt+0xee8>
   116dc:	str	r0, [r6]
   116e0:	ldr	r9, [pc, #1496]	; 11cc0 <__assert_fail@plt+0xeec>
   116e4:	str	r0, [fp]
   116e8:	str	r0, [ip]
   116ec:	ldr	ip, [pc, #1488]	; 11cc4 <__assert_fail@plt+0xef0>
   116f0:	str	r0, [r9]
   116f4:	str	r0, [ip]
   116f8:	ldr	ip, [pc, #1480]	; 11cc8 <__assert_fail@plt+0xef4>
   116fc:	str	r0, [ip]
   11700:	ldr	ip, [pc, #1476]	; 11ccc <__assert_fail@plt+0xef8>
   11704:	str	r0, [ip]
   11708:	ldr	ip, [pc, #1472]	; 11cd0 <__assert_fail@plt+0xefc>
   1170c:	str	r0, [ip]
   11710:	ldr	ip, [pc, #1468]	; 11cd4 <__assert_fail@plt+0xf00>
   11714:	str	r0, [ip]
   11718:	mov	r0, #1
   1171c:	bl	10d74 <isatty@plt>
   11720:	ldr	r3, [pc, #1384]	; 11c90 <__assert_fail@plt+0xebc>
   11724:	cmp	r0, #0
   11728:	ldr	r1, [pc, #1368]	; 11c88 <__assert_fail@plt+0xeb4>
   1172c:	ldr	r2, [pc, #1360]	; 11c84 <__assert_fail@plt+0xeb0>
   11730:	str	r3, [sp, #16]
   11734:	moveq	r3, #1
   11738:	str	r1, [sp, #12]
   1173c:	streq	r3, [sl]
   11740:	str	r2, [sp, #20]
   11744:	beq	11770 <__assert_fail@plt+0x99c>
   11748:	ldr	r0, [pc, #1416]	; 11cd8 <__assert_fail@plt+0xf04>
   1174c:	bl	10c48 <getenv@plt>
   11750:	cmp	r0, #0
   11754:	beq	118d4 <__assert_fail@plt+0xb00>
   11758:	bl	10d44 <atoi@plt>
   1175c:	ldr	r3, [pc, #1400]	; 11cdc <__assert_fail@plt+0xf08>
   11760:	str	r0, [r3]
   11764:	mov	r3, #1
   11768:	str	r3, [r7]
   1176c:	str	r3, [r9]
   11770:	bl	10ba0 <getuid@plt>
   11774:	cmp	r0, #0
   11778:	ldr	sl, [pc, #1292]	; 11c8c <__assert_fail@plt+0xeb8>
   1177c:	mov	r9, #20
   11780:	moveq	r3, #1
   11784:	ldreq	r2, [sp, #16]
   11788:	streq	r3, [r2]
   1178c:	mov	r2, #1
   11790:	ldr	r3, [pc, #1352]	; 11ce0 <__assert_fail@plt+0xf0c>
   11794:	str	r2, [r3]
   11798:	ldr	r3, [pc, #1348]	; 11ce4 <__assert_fail@plt+0xf10>
   1179c:	mov	r2, r3
   117a0:	ldrd	r0, [sp, #4]
   117a4:	bl	151c8 <__assert_fail@plt+0x43f4>
   117a8:	cmn	r0, #1
   117ac:	ldr	r3, [pc, #1328]	; 11ce4 <__assert_fail@plt+0xf10>
   117b0:	bne	11900 <__assert_fail@plt+0xb2c>
   117b4:	ldr	r3, [pc, #1316]	; 11ce0 <__assert_fail@plt+0xf0c>
   117b8:	ldr	ip, [r6]
   117bc:	ldr	r1, [r3]
   117c0:	ldr	r3, [sp, #4]
   117c4:	cmp	ip, #0
   117c8:	sub	r0, r3, r1
   117cc:	ldr	r3, [pc, #1268]	; 11cc8 <__assert_fail@plt+0xef4>
   117d0:	ldr	lr, [r3]
   117d4:	ldr	r3, [r4, #12]
   117d8:	bne	11818 <__assert_fail@plt+0xa44>
   117dc:	ldr	r7, [sp, #12]
   117e0:	ldr	r2, [pc, #1260]	; 11cd4 <__assert_fail@plt+0xf00>
   117e4:	ldr	r7, [r7]
   117e8:	ldr	r6, [r2]
   117ec:	orr	r2, r3, lr
   117f0:	orr	r2, r2, r7
   117f4:	ldr	r7, [pc, #1236]	; 11cd0 <__assert_fail@plt+0xefc>
   117f8:	orr	r2, r2, r6
   117fc:	ldr	r7, [r7]
   11800:	orrs	r2, r2, r7
   11804:	ldr	r2, [pc, #1196]	; 11cb8 <__assert_fail@plt+0xee4>
   11808:	orreq	r9, r9, #8
   1180c:	ldr	r2, [r2]
   11810:	orrs	r2, r6, r2
   11814:	orreq	r9, r9, #1
   11818:	ldr	r2, [pc, #1196]	; 11ccc <__assert_fail@plt+0xef8>
   1181c:	ldr	r2, [r2]
   11820:	cmp	r2, #0
   11824:	orrne	r9, r9, #128	; 0x80
   11828:	orrs	r2, ip, lr
   1182c:	ldrne	r2, [pc, #1204]	; 11ce8 <__assert_fail@plt+0xf14>
   11830:	movne	lr, #2
   11834:	strne	lr, [r2]
   11838:	ldr	r2, [pc, #1112]	; 11c98 <__assert_fail@plt+0xec4>
   1183c:	ldr	r2, [r2]
   11840:	cmp	r2, #0
   11844:	beq	11c28 <__assert_fail@plt+0xe54>
   11848:	cmp	r3, #1
   1184c:	beq	11bf4 <__assert_fail@plt+0xe20>
   11850:	cmp	r3, #2
   11854:	beq	11c00 <__assert_fail@plt+0xe2c>
   11858:	cmp	r3, #0
   1185c:	ldreq	r3, [pc, #1160]	; 11cec <__assert_fail@plt+0xf18>
   11860:	beq	11bf8 <__assert_fail@plt+0xe24>
   11864:	ldr	r3, [pc, #1064]	; 11c94 <__assert_fail@plt+0xec0>
   11868:	ldr	r3, [r3]
   1186c:	cmp	r3, #0
   11870:	ldrne	r3, [pc, #1144]	; 11cf0 <__assert_fail@plt+0xf1c>
   11874:	bne	118a8 <__assert_fail@plt+0xad4>
   11878:	ldr	r3, [r5]
   1187c:	cmp	r3, #0
   11880:	ldrne	r3, [pc, #1132]	; 11cf4 <__assert_fail@plt+0xf20>
   11884:	bne	118a8 <__assert_fail@plt+0xad4>
   11888:	cmp	ip, #0
   1188c:	ldrne	r3, [pc, #1124]	; 11cf8 <__assert_fail@plt+0xf24>
   11890:	bne	118a8 <__assert_fail@plt+0xad4>
   11894:	ldr	r3, [pc, #1056]	; 11cbc <__assert_fail@plt+0xee8>
   11898:	ldr	r3, [r3]
   1189c:	cmp	r3, #0
   118a0:	ldrne	r3, [pc, #1108]	; 11cfc <__assert_fail@plt+0xf28>
   118a4:	ldreq	r3, [pc, #1108]	; 11d00 <__assert_fail@plt+0xf2c>
   118a8:	cmp	r0, #0
   118ac:	str	r3, [r4, #4]
   118b0:	mov	r2, r9
   118b4:	ldrne	r3, [sp, #8]
   118b8:	moveq	r0, #1
   118bc:	ldreq	r1, [pc, #1088]	; 11d04 <__assert_fail@plt+0xf30>
   118c0:	addne	r1, r3, r1, lsl #2
   118c4:	bl	113f4 <__assert_fail@plt+0x620>
   118c8:	ldr	r3, [pc, #1080]	; 11d08 <__assert_fail@plt+0xf34>
   118cc:	ldr	r0, [r3]
   118d0:	b	11bec <__assert_fail@plt+0xe18>
   118d4:	add	r2, sp, #24
   118d8:	movw	r1, #21523	; 0x5413
   118dc:	mov	r0, #1
   118e0:	bl	1604c <__assert_fail@plt+0x5278>
   118e4:	cmp	r0, #0
   118e8:	bne	11764 <__assert_fail@plt+0x990>
   118ec:	ldrh	r3, [sp, #26]
   118f0:	cmp	r3, #0
   118f4:	ldrne	r2, [pc, #992]	; 11cdc <__assert_fail@plt+0xf08>
   118f8:	strne	r3, [r2]
   118fc:	b	11764 <__assert_fail@plt+0x990>
   11900:	sub	r0, r0, #49	; 0x31
   11904:	cmp	r0, #71	; 0x47
   11908:	ldrls	pc, [pc, r0, lsl #2]
   1190c:	b	11be8 <__assert_fail@plt+0xe14>
   11910:	andeq	r1, r1, r0, lsr sl
   11914:	andeq	r1, r1, r8, ror #23
   11918:	andeq	r1, r1, r8, ror #23
   1191c:	andeq	r1, r1, r8, ror #23
   11920:	andeq	r1, r1, r8, ror #23
   11924:	andeq	r1, r1, r8, ror #23
   11928:	andeq	r1, r1, r8, ror #23
   1192c:	andeq	r1, r1, r8, ror #23
   11930:	andeq	r1, r1, r8, ror #23
   11934:	andeq	r1, r1, r8, ror #23
   11938:	andeq	r1, r1, r8, ror #23
   1193c:	andeq	r1, r1, r8, ror #23
   11940:	andeq	r1, r1, r8, ror #23
   11944:	andeq	r1, r1, r8, ror #23
   11948:	andeq	r1, r1, r8, ror #23
   1194c:	andeq	r1, r1, r8, ror #23
   11950:	andeq	r1, r1, r0, asr fp
   11954:	andeq	r1, r1, r8, ror #23
   11958:	andeq	r1, r1, r0, asr sl
   1195c:	andeq	r1, r1, r8, ror #23
   11960:	andeq	r1, r1, r8, ror #23
   11964:	andeq	r1, r1, ip, lsr #22
   11968:	andeq	r1, r1, r8, ror #23
   1196c:	andeq	r1, r1, r8, ror #23
   11970:	andeq	r1, r1, r8, ror #23
   11974:	andeq	r1, r1, r8, ror #23
   11978:	andeq	r1, r1, r8, ror #23
   1197c:	andeq	r1, r1, r8, lsr fp
   11980:	andeq	r1, r1, r8, ror #23
   11984:	andeq	r1, r1, r8, ror #23
   11988:	andeq	r1, r1, r8, ror #23
   1198c:	andeq	r1, r1, r8, ror #23
   11990:	andeq	r1, r1, r8, ror #23
   11994:	andeq	r1, r1, r4, asr #22
   11998:			; <UNDEFINED> instruction: 0x00011bb4
   1199c:	andeq	r1, r1, r8, asr #23
   119a0:	andeq	r1, r1, r8, ror #23
   119a4:	andeq	r1, r1, r8, ror #23
   119a8:	ldrdeq	r1, [r1], -ip
   119ac:	andeq	r1, r1, r8, ror #23
   119b0:	andeq	r1, r1, r8, ror #23
   119b4:	andeq	r1, r1, r8, ror #23
   119b8:	andeq	r1, r1, r8, ror #23
   119bc:	andeq	r1, r1, r8, ror #23
   119c0:	andeq	r1, r1, r8, ror #23
   119c4:	andeq	r1, r1, r8, ror #23
   119c8:	andeq	r1, r1, r8, ror #23
   119cc:	andeq	r1, r1, r8, ror #23
   119d0:	andeq	r1, r1, ip, asr #22
   119d4:	andeq	r1, r1, r8, ror #23
   119d8:	strdeq	r1, [r1], -ip
   119dc:	andeq	r1, r1, r0, ror #22
   119e0:	andeq	r1, r1, r8, ror #23
   119e4:	andeq	r1, r1, r0, ror fp
   119e8:	muleq	r1, ip, r7
   119ec:	andeq	r1, r1, r8, ror #23
   119f0:	andeq	r1, r1, r8, ror fp
   119f4:	andeq	r1, r1, r8, ror #23
   119f8:	andeq	r1, r1, r4, lsl #23
   119fc:	andeq	r1, r1, r8, ror sl
   11a00:	andeq	r1, r1, r8, lsr #21
   11a04:	andeq	r1, r1, r4, ror #21
   11a08:	muleq	r1, r0, fp
   11a0c:	muleq	r1, ip, fp
   11a10:	andeq	r1, r1, r4, lsr #23
   11a14:	andeq	r1, r1, ip, lsr #23
   11a18:	andeq	r1, r1, r0, asr #23
   11a1c:	ldrdeq	r1, [r1], -r4
   11a20:	andeq	r1, r1, r4, lsl fp
   11a24:	andeq	r1, r1, r8, ror #23
   11a28:	andeq	r1, r1, r8, ror #23
   11a2c:	andeq	r1, r1, r0, asr #21
   11a30:	ldr	r2, [pc, #604]	; 11c94 <__assert_fail@plt+0xec0>
   11a34:	mov	r1, #1
   11a38:	str	r1, [r2]
   11a3c:	mov	r2, #0
   11a40:	ldr	r1, [pc, #628]	; 11cbc <__assert_fail@plt+0xee8>
   11a44:	str	r2, [r1]
   11a48:	str	r2, [r6]
   11a4c:	b	11a9c <__assert_fail@plt+0xcc8>
   11a50:	ldr	r1, [pc, #612]	; 11cbc <__assert_fail@plt+0xee8>
   11a54:	mov	r2, #1
   11a58:	str	r2, [r7]
   11a5c:	mov	r2, #0
   11a60:	str	r2, [r5]
   11a64:	str	r2, [r1]
   11a68:	ldr	r1, [pc, #548]	; 11c94 <__assert_fail@plt+0xec0>
   11a6c:	str	r2, [r6]
   11a70:	str	r2, [r1]
   11a74:	b	1179c <__assert_fail@plt+0x9c8>
   11a78:	ldr	r1, [pc, #504]	; 11c78 <__assert_fail@plt+0xea4>
   11a7c:	mov	r2, #1
   11a80:	str	r2, [r6]
   11a84:	mov	r2, #0
   11a88:	str	r2, [r1]
   11a8c:	ldr	r1, [pc, #552]	; 11cbc <__assert_fail@plt+0xee8>
   11a90:	str	r2, [r1]
   11a94:	ldr	r1, [pc, #504]	; 11c94 <__assert_fail@plt+0xec0>
   11a98:	str	r2, [r1]
   11a9c:	str	r2, [r5]
   11aa0:	str	r2, [r7]
   11aa4:	b	1179c <__assert_fail@plt+0x9c8>
   11aa8:	ldr	r2, [pc, #524]	; 11cbc <__assert_fail@plt+0xee8>
   11aac:	mov	r1, #1
   11ab0:	str	r1, [r2]
   11ab4:	mov	r2, #0
   11ab8:	ldr	r1, [pc, #468]	; 11c94 <__assert_fail@plt+0xec0>
   11abc:	b	11a44 <__assert_fail@plt+0xc70>
   11ac0:	ldr	r1, [pc, #500]	; 11cbc <__assert_fail@plt+0xee8>
   11ac4:	mov	r2, #1
   11ac8:	str	r2, [r5]
   11acc:	mov	r2, #0
   11ad0:	str	r2, [r6]
   11ad4:	str	r2, [r1]
   11ad8:	ldr	r1, [pc, #436]	; 11c94 <__assert_fail@plt+0xec0>
   11adc:	str	r2, [r1]
   11ae0:	b	11aa0 <__assert_fail@plt+0xccc>
   11ae4:	ldr	r1, [pc, #396]	; 11c78 <__assert_fail@plt+0xea4>
   11ae8:	mov	r2, #1
   11aec:	str	r2, [r6]
   11af0:	str	r2, [r1]
   11af4:	mov	r2, #0
   11af8:	b	11a8c <__assert_fail@plt+0xcb8>
   11afc:	ldr	r2, [pc, #448]	; 11cc4 <__assert_fail@plt+0xef0>
   11b00:	mov	r1, #1
   11b04:	str	r1, [r2]
   11b08:	mov	r2, #0
   11b0c:	str	r2, [r8]
   11b10:	b	1179c <__assert_fail@plt+0x9c8>
   11b14:	mov	r2, #1
   11b18:	str	r2, [r8]
   11b1c:	ldr	r2, [pc, #416]	; 11cc4 <__assert_fail@plt+0xef0>
   11b20:	mov	r1, #0
   11b24:	str	r1, [r2]
   11b28:	b	1179c <__assert_fail@plt+0x9c8>
   11b2c:	ldr	r2, [pc, #416]	; 11cd4 <__assert_fail@plt+0xf00>
   11b30:	mov	r1, #1
   11b34:	b	11b24 <__assert_fail@plt+0xd50>
   11b38:	bic	r9, r9, #16
   11b3c:	orr	r9, r9, #2
   11b40:	b	1179c <__assert_fail@plt+0x9c8>
   11b44:	ldr	r2, [pc, #344]	; 11ca4 <__assert_fail@plt+0xed0>
   11b48:	b	11b30 <__assert_fail@plt+0xd5c>
   11b4c:	orr	r9, r9, #32
   11b50:	ldr	r1, [sp, #16]
   11b54:	mov	r2, #1
   11b58:	str	r2, [r1]
   11b5c:	b	1179c <__assert_fail@plt+0x9c8>
   11b60:	mov	r2, #1
   11b64:	str	r2, [fp]
   11b68:	ldr	r2, [pc, #308]	; 11ca4 <__assert_fail@plt+0xed0>
   11b6c:	b	11b20 <__assert_fail@plt+0xd4c>
   11b70:	ldr	r2, [pc, #264]	; 11c80 <__assert_fail@plt+0xeac>
   11b74:	b	11b30 <__assert_fail@plt+0xd5c>
   11b78:	mov	r2, #1
   11b7c:	ldr	r1, [sp, #12]
   11b80:	b	11b58 <__assert_fail@plt+0xd84>
   11b84:	ldr	r2, [pc, #348]	; 11ce8 <__assert_fail@plt+0xf14>
   11b88:	mov	r1, #1024	; 0x400
   11b8c:	b	11b24 <__assert_fail@plt+0xd50>
   11b90:	mov	r2, #1
   11b94:	ldr	r1, [sp, #20]
   11b98:	b	11b58 <__assert_fail@plt+0xd84>
   11b9c:	ldr	r2, [pc, #300]	; 11cd0 <__assert_fail@plt+0xefc>
   11ba0:	b	11b30 <__assert_fail@plt+0xd5c>
   11ba4:	ldr	r2, [pc, #276]	; 11cc0 <__assert_fail@plt+0xeec>
   11ba8:	b	11b30 <__assert_fail@plt+0xd5c>
   11bac:	ldr	r2, [pc, #228]	; 11c98 <__assert_fail@plt+0xec4>
   11bb0:	b	11b30 <__assert_fail@plt+0xd5c>
   11bb4:	mov	r2, #1
   11bb8:	str	r2, [r4, #12]
   11bbc:	b	1179c <__assert_fail@plt+0x9c8>
   11bc0:	ldr	r2, [pc, #256]	; 11cc8 <__assert_fail@plt+0xef4>
   11bc4:	b	11b30 <__assert_fail@plt+0xd5c>
   11bc8:	mov	r2, #1
   11bcc:	str	r2, [sl]
   11bd0:	b	1179c <__assert_fail@plt+0x9c8>
   11bd4:	mov	r2, #2
   11bd8:	b	11bb8 <__assert_fail@plt+0xde4>
   11bdc:	mov	r2, #1
   11be0:	ldr	r1, [pc, #228]	; 11ccc <__assert_fail@plt+0xef8>
   11be4:	b	11b58 <__assert_fail@plt+0xd84>
   11be8:	bl	12730 <__assert_fail@plt+0x195c>
   11bec:	add	sp, sp, #36	; 0x24
   11bf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bf4:	ldr	r3, [pc, #272]	; 11d0c <__assert_fail@plt+0xf38>
   11bf8:	str	r3, [r4]
   11bfc:	b	11864 <__assert_fail@plt+0xa90>
   11c00:	ldr	r3, [r8]
   11c04:	cmp	r3, #0
   11c08:	ldrne	r3, [pc, #256]	; 11d10 <__assert_fail@plt+0xf3c>
   11c0c:	bne	11bf8 <__assert_fail@plt+0xe24>
   11c10:	ldr	r3, [pc, #172]	; 11cc4 <__assert_fail@plt+0xef0>
   11c14:	ldr	r3, [r3]
   11c18:	cmp	r3, #0
   11c1c:	ldrne	r3, [pc, #240]	; 11d14 <__assert_fail@plt+0xf40>
   11c20:	ldreq	r3, [pc, #240]	; 11d18 <__assert_fail@plt+0xf44>
   11c24:	b	11bf8 <__assert_fail@plt+0xe24>
   11c28:	cmp	r3, #1
   11c2c:	beq	11c48 <__assert_fail@plt+0xe74>
   11c30:	cmp	r3, #2
   11c34:	beq	11c50 <__assert_fail@plt+0xe7c>
   11c38:	cmp	r3, #0
   11c3c:	ldreq	r3, [pc, #216]	; 11d1c <__assert_fail@plt+0xf48>
   11c40:	bne	11864 <__assert_fail@plt+0xa90>
   11c44:	b	11bf8 <__assert_fail@plt+0xe24>
   11c48:	ldr	r3, [pc, #208]	; 11d20 <__assert_fail@plt+0xf4c>
   11c4c:	b	11bf8 <__assert_fail@plt+0xe24>
   11c50:	ldr	r3, [r8]
   11c54:	cmp	r3, #0
   11c58:	ldrne	r3, [pc, #196]	; 11d24 <__assert_fail@plt+0xf50>
   11c5c:	bne	11bf8 <__assert_fail@plt+0xe24>
   11c60:	ldr	r3, [pc, #92]	; 11cc4 <__assert_fail@plt+0xef0>
   11c64:	ldr	r3, [r3]
   11c68:	cmp	r3, #0
   11c6c:	ldrne	r3, [pc, #180]	; 11d28 <__assert_fail@plt+0xf54>
   11c70:	ldreq	r3, [pc, #180]	; 11d2c <__assert_fail@plt+0xf58>
   11c74:	b	11bf8 <__assert_fail@plt+0xe24>
   11c78:	muleq	r2, r4, r1
   11c7c:	andeq	r7, r2, r8, lsr #3
   11c80:	andeq	r7, r2, r8, ror r1
   11c84:	andeq	r7, r2, r4, ror #2
   11c88:	andeq	r7, r2, ip, ror #2
   11c8c:	muleq	r2, r0, r1
   11c90:	andeq	r7, r2, ip, lsr #3
   11c94:	andeq	r7, r2, ip, asr r1
   11c98:	andeq	r7, r2, r0, ror r1
   11c9c:	andeq	r7, r2, r8, lsl r1
   11ca0:	muleq	r2, r8, r1
   11ca4:	andeq	r7, r2, r8, ror #2
   11ca8:	andeq	r7, r2, r0, ror #2
   11cac:	andeq	r7, r2, r4, ror r1
   11cb0:	andeq	r7, r2, r8, asr r1
   11cb4:	andeq	r7, r2, r8, lsl #3
   11cb8:	muleq	r2, ip, r1
   11cbc:			; <UNDEFINED> instruction: 0x000271b4
   11cc0:			; <UNDEFINED> instruction: 0x000271b0
   11cc4:	andeq	r7, r2, r0, lsr #3
   11cc8:	andeq	r7, r2, r4, asr r1
   11ccc:	andeq	r7, r2, r0, lsl #3
   11cd0:	andeq	r7, r2, ip, lsl #3
   11cd4:	andeq	r7, r2, ip, ror r1
   11cd8:	andeq	r6, r1, r4, lsl r8
   11cdc:	strdeq	r7, [r2], -r0
   11ce0:	andeq	r7, r2, r4, lsl #2
   11ce4:	andeq	r6, r1, ip, lsl r8
   11ce8:	andeq	r7, r2, r4, lsr #3
   11cec:	andeq	r2, r1, r0, ror #14
   11cf0:	strdeq	r1, [r1], -ip
   11cf4:	strdeq	r2, [r1], -r4
   11cf8:	ldrdeq	r2, [r1], -r4
   11cfc:	strdeq	r2, [r1], -r0
   11d00:	andeq	r2, r1, ip, asr #6
   11d04:	strdeq	r7, [r2], -r4
   11d08:	andeq	r7, r2, r4, lsl #3
   11d0c:			; <UNDEFINED> instruction: 0x000128b4
   11d10:	andeq	r2, r1, r8, lsl #16
   11d14:	andeq	r2, r1, ip, asr r8
   11d18:			; <UNDEFINED> instruction: 0x000127b4
   11d1c:	andeq	r2, r1, r4, asr r7
   11d20:	andeq	r2, r1, ip, ror #16
   11d24:	andeq	r2, r1, r4, asr #15
   11d28:	andeq	r2, r1, r8, lsl r8
   11d2c:	andeq	r2, r1, r0, ror r7
   11d30:	push	{r0, r1, r4, r5, r6, lr}
   11d34:	str	r0, [sp, #4]
   11d38:	add	r0, sp, #4
   11d3c:	bl	10bdc <ctime@plt>
   11d40:	mov	r5, r0
   11d44:	add	r4, r0, #3
   11d48:	add	r6, r0, #10
   11d4c:	ldrb	r0, [r4, #1]!
   11d50:	bl	10ce4 <putchar@plt>
   11d54:	cmp	r4, r6
   11d58:	bne	11d4c <__assert_fail@plt+0xf78>
   11d5c:	ldr	r3, [pc, #128]	; 11de4 <__assert_fail@plt+0x1010>
   11d60:	ldr	r0, [r3]
   11d64:	cmp	r0, #0
   11d68:	beq	11d90 <__assert_fail@plt+0xfbc>
   11d6c:	add	r5, r5, #23
   11d70:	ldrb	r0, [r4, #1]!
   11d74:	bl	10ce4 <putchar@plt>
   11d78:	cmp	r5, r4
   11d7c:	bne	11d70 <__assert_fail@plt+0xf9c>
   11d80:	mov	r0, #32
   11d84:	bl	10ce4 <putchar@plt>
   11d88:	add	sp, sp, #8
   11d8c:	pop	{r4, r5, r6, pc}
   11d90:	ldr	r6, [pc, #80]	; 11de8 <__assert_fail@plt+0x1014>
   11d94:	ldr	r3, [sp, #4]
   11d98:	add	r6, r3, r6
   11d9c:	bl	10bd0 <time@plt>
   11da0:	cmp	r6, r0
   11da4:	blt	11dc0 <__assert_fail@plt+0xfec>
   11da8:	add	r5, r5, #15
   11dac:	ldrb	r0, [r4, #1]!
   11db0:	bl	10ce4 <putchar@plt>
   11db4:	cmp	r4, r5
   11db8:	bne	11dac <__assert_fail@plt+0xfd8>
   11dbc:	b	11d80 <__assert_fail@plt+0xfac>
   11dc0:	mov	r0, #32
   11dc4:	add	r4, r5, #19
   11dc8:	add	r5, r5, #23
   11dcc:	bl	10ce4 <putchar@plt>
   11dd0:	ldrb	r0, [r4, #1]!
   11dd4:	bl	10ce4 <putchar@plt>
   11dd8:	cmp	r4, r5
   11ddc:	bne	11dd0 <__assert_fail@plt+0xffc>
   11de0:	b	11d80 <__assert_fail@plt+0xfac>
   11de4:	muleq	r2, r0, r1
   11de8:	strdeq	pc, [pc], #15	; <UNPREDICTABLE>
   11dec:	ldr	r2, [r0, #48]	; 0x30
   11df0:	add	r3, r0, #168	; 0xa8
   11df4:	push	{r4, lr}
   11df8:	sub	sp, sp, #8192	; 0x2000
   11dfc:	sub	sp, sp, #8
   11e00:	cmp	r2, #0
   11e04:	bne	11e6c <__assert_fail@plt+0x1098>
   11e08:	ldr	r2, [pc, #152]	; 11ea8 <__assert_fail@plt+0x10d4>
   11e0c:	mov	r1, #4096	; 0x1000
   11e10:	add	r0, sp, #8
   11e14:	bl	10ccc <snprintf@plt>
   11e18:	add	r4, sp, #4096	; 0x1000
   11e1c:	movw	r2, #4095	; 0xfff
   11e20:	add	r4, r4, #8
   11e24:	add	r0, sp, #8
   11e28:	mov	r1, r4
   11e2c:	bl	10c18 <readlink@plt>
   11e30:	cmn	r0, #1
   11e34:	bne	11e8c <__assert_fail@plt+0x10b8>
   11e38:	ldr	r3, [pc, #108]	; 11eac <__assert_fail@plt+0x10d8>
   11e3c:	ldr	r4, [r3]
   11e40:	bl	10cc0 <__errno_location@plt>
   11e44:	ldr	r0, [r0]
   11e48:	bl	10c6c <strerror@plt>
   11e4c:	mov	r3, r0
   11e50:	add	r2, sp, #8
   11e54:	ldr	r1, [pc, #84]	; 11eb0 <__assert_fail@plt+0x10dc>
   11e58:	mov	r0, r4
   11e5c:	bl	10cb4 <fprintf@plt>
   11e60:	add	sp, sp, #8192	; 0x2000
   11e64:	add	sp, sp, #8
   11e68:	pop	{r4, pc}
   11e6c:	ldr	r2, [r0, #4]
   11e70:	mov	r1, #4096	; 0x1000
   11e74:	add	r0, sp, #8
   11e78:	str	r3, [sp]
   11e7c:	ldr	r3, [r2, #24]
   11e80:	ldr	r2, [pc, #44]	; 11eb4 <__assert_fail@plt+0x10e0>
   11e84:	bl	10ccc <snprintf@plt>
   11e88:	b	11e18 <__assert_fail@plt+0x1044>
   11e8c:	mov	r3, #0
   11e90:	strb	r3, [r4, r0]
   11e94:	ldr	r0, [pc, #28]	; 11eb8 <__assert_fail@plt+0x10e4>
   11e98:	bl	10b94 <printf@plt>
   11e9c:	mov	r0, r4
   11ea0:	bl	126d0 <__assert_fail@plt+0x18fc>
   11ea4:	b	11e60 <__assert_fail@plt+0x108c>
   11ea8:	ldrdeq	r6, [r1], -r0
   11eac:	andeq	r7, r2, r0, lsl r1
   11eb0:	andeq	r6, r1, lr, lsr r8
   11eb4:	andeq	r6, r1, r8, lsr r8
   11eb8:	andeq	r6, r1, fp, asr #16
   11ebc:	and	r3, r0, #61440	; 0xf000
   11ec0:	push	{r4, lr}
   11ec4:	cmp	r3, #16384	; 0x4000
   11ec8:	beq	11f0c <__assert_fail@plt+0x1138>
   11ecc:	bhi	11eec <__assert_fail@plt+0x1118>
   11ed0:	cmp	r3, #4096	; 0x1000
   11ed4:	moveq	r0, #124	; 0x7c
   11ed8:	beq	11f00 <__assert_fail@plt+0x112c>
   11edc:	ands	r0, r0, #73	; 0x49
   11ee0:	popeq	{r4, pc}
   11ee4:	mov	r0, #42	; 0x2a
   11ee8:	b	11f00 <__assert_fail@plt+0x112c>
   11eec:	cmp	r3, #40960	; 0xa000
   11ef0:	beq	11f14 <__assert_fail@plt+0x1140>
   11ef4:	cmp	r3, #49152	; 0xc000
   11ef8:	moveq	r0, #61	; 0x3d
   11efc:	bne	11edc <__assert_fail@plt+0x1108>
   11f00:	bl	10ce4 <putchar@plt>
   11f04:	mov	r0, #1
   11f08:	pop	{r4, pc}
   11f0c:	mov	r0, #47	; 0x2f
   11f10:	b	11f00 <__assert_fail@plt+0x112c>
   11f14:	mov	r0, #64	; 0x40
   11f18:	b	11f00 <__assert_fail@plt+0x112c>
   11f1c:	ldr	r3, [pc, #188]	; 11fe0 <__assert_fail@plt+0x120c>
   11f20:	push	{r4, r5, r6, r8, r9, lr}
   11f24:	mov	r5, r0
   11f28:	mov	r6, r2
   11f2c:	ldr	r4, [r3]
   11f30:	cmp	r4, #0
   11f34:	beq	11f48 <__assert_fail@plt+0x1174>
   11f38:	ldr	r0, [pc, #164]	; 11fe4 <__assert_fail@plt+0x1210>
   11f3c:	ldr	r2, [r5, #160]	; 0xa0
   11f40:	bl	10b94 <printf@plt>
   11f44:	mov	r4, r0
   11f48:	ldr	r3, [pc, #152]	; 11fe8 <__assert_fail@plt+0x1214>
   11f4c:	ldr	r3, [r3]
   11f50:	cmp	r3, #0
   11f54:	beq	11f90 <__assert_fail@plt+0x11bc>
   11f58:	ldr	r3, [pc, #140]	; 11fec <__assert_fail@plt+0x1218>
   11f5c:	ldrd	r8, [r5, #128]	; 0x80
   11f60:	ldr	r2, [r3]
   11f64:	sub	ip, r2, #1
   11f68:	asr	r3, r2, #31
   11f6c:	adds	r0, r8, ip
   11f70:	adc	r1, r9, ip, asr #31
   11f74:	bl	164b8 <__assert_fail@plt+0x56e4>
   11f78:	mov	r2, r0
   11f7c:	mov	r3, r1
   11f80:	ldr	r0, [pc, #104]	; 11ff0 <__assert_fail@plt+0x121c>
   11f84:	mov	r1, r6
   11f88:	bl	10b94 <printf@plt>
   11f8c:	add	r4, r4, r0
   11f90:	add	r0, r5, #168	; 0xa8
   11f94:	bl	126d0 <__assert_fail@plt+0x18fc>
   11f98:	ldr	r3, [pc, #84]	; 11ff4 <__assert_fail@plt+0x1220>
   11f9c:	add	r4, r4, r0
   11fa0:	ldr	r3, [r3]
   11fa4:	cmp	r3, #0
   11fa8:	bne	11fcc <__assert_fail@plt+0x11f8>
   11fac:	ldr	r3, [pc, #68]	; 11ff8 <__assert_fail@plt+0x1224>
   11fb0:	ldr	r3, [r3]
   11fb4:	cmp	r3, #0
   11fb8:	beq	11fd8 <__assert_fail@plt+0x1204>
   11fbc:	ldr	r3, [r5, #80]	; 0x50
   11fc0:	and	r3, r3, #61440	; 0xf000
   11fc4:	cmp	r3, #16384	; 0x4000
   11fc8:	bne	11fd8 <__assert_fail@plt+0x1204>
   11fcc:	ldr	r0, [r5, #80]	; 0x50
   11fd0:	bl	11ebc <__assert_fail@plt+0x10e8>
   11fd4:	add	r4, r4, r0
   11fd8:	mov	r0, r4
   11fdc:	pop	{r4, r5, r6, r8, r9, pc}
   11fe0:	andeq	r7, r2, ip, ror #2
   11fe4:	andeq	r6, r1, r0, asr r8
   11fe8:	andeq	r7, r2, r4, asr r1
   11fec:	andeq	r7, r2, r4, lsr #3
   11ff0:	andeq	r6, r1, r8, lsl #17
   11ff4:	andeq	r7, r2, ip, ror r1
   11ff8:	andeq	r7, r2, ip, lsl #3
   11ffc:	push	{r4, r5, r6, lr}
   12000:	mov	r5, r0
   12004:	ldr	r4, [r0]
   12008:	cmp	r4, #0
   1200c:	popeq	{r4, r5, r6, pc}
   12010:	ldr	r3, [r4, #16]
   12014:	cmp	r3, #1
   12018:	beq	12034 <__assert_fail@plt+0x1260>
   1201c:	mov	r0, r4
   12020:	ldr	r2, [r5, #20]
   12024:	ldr	r1, [r5, #32]
   12028:	bl	11f1c <__assert_fail@plt+0x1148>
   1202c:	mov	r0, #10
   12030:	bl	10ce4 <putchar@plt>
   12034:	ldr	r4, [r4, #8]
   12038:	b	12008 <__assert_fail@plt+0x1234>
   1203c:	ldr	r2, [pc, #124]	; 120c0 <__assert_fail@plt+0x12ec>
   12040:	ldr	r3, [r0, #16]
   12044:	ldr	r2, [r2]
   12048:	cmp	r2, #0
   1204c:	ldrne	r2, [r0, #32]
   12050:	addne	r2, r2, #1
   12054:	addne	r3, r3, r2
   12058:	ldr	r2, [pc, #100]	; 120c4 <__assert_fail@plt+0x12f0>
   1205c:	ldr	r2, [r2]
   12060:	cmp	r2, #0
   12064:	ldrne	r2, [r0, #20]
   12068:	addne	r2, r2, #1
   1206c:	addne	r3, r3, r2
   12070:	ldr	r2, [pc, #80]	; 120c8 <__assert_fail@plt+0x12f4>
   12074:	ldr	ip, [r2]
   12078:	ldr	r2, [pc, #76]	; 120cc <__assert_fail@plt+0x12f8>
   1207c:	ldr	r2, [r2]
   12080:	orrs	r2, ip, r2
   12084:	ldr	r2, [pc, #68]	; 120d0 <__assert_fail@plt+0x12fc>
   12088:	addne	r3, r3, #1
   1208c:	add	r3, r3, #1
   12090:	ldr	r2, [r2]
   12094:	add	r2, r2, #1
   12098:	cmp	r2, r3, lsl #1
   1209c:	bge	120b0 <__assert_fail@plt+0x12dc>
   120a0:	push	{r4, lr}
   120a4:	bl	11ffc <__assert_fail@plt+0x1228>
   120a8:	mov	r0, #0
   120ac:	pop	{r4, pc}
   120b0:	sdiv	r3, r2, r3
   120b4:	sdiv	r0, r2, r3
   120b8:	str	r3, [r1]
   120bc:	bx	lr
   120c0:	andeq	r7, r2, ip, ror #2
   120c4:	andeq	r7, r2, r4, asr r1
   120c8:	andeq	r7, r2, ip, ror r1
   120cc:	andeq	r7, r2, ip, lsl #3
   120d0:	strdeq	r7, [r2], -r0
   120d4:	ldr	r3, [r0]
   120d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120dc:	mov	r5, r0
   120e0:	sub	sp, sp, #44	; 0x2c
   120e4:	ldr	r3, [r3, #48]	; 0x30
   120e8:	cmp	r3, #0
   120ec:	beq	12128 <__assert_fail@plt+0x1354>
   120f0:	ldr	r3, [pc, #528]	; 12308 <__assert_fail@plt+0x1534>
   120f4:	ldr	r2, [r3]
   120f8:	ldr	r3, [pc, #524]	; 1230c <__assert_fail@plt+0x1538>
   120fc:	ldr	r3, [r3]
   12100:	orrs	r3, r2, r3
   12104:	beq	12128 <__assert_fail@plt+0x1354>
   12108:	ldr	r3, [pc, #512]	; 12310 <__assert_fail@plt+0x153c>
   1210c:	ldr	r2, [r5, #4]
   12110:	ldr	r0, [pc, #508]	; 12314 <__assert_fail@plt+0x1540>
   12114:	ldr	r1, [r3]
   12118:	sub	r3, r1, #1
   1211c:	add	r3, r3, r2
   12120:	udiv	r1, r3, r1
   12124:	bl	10b94 <printf@plt>
   12128:	ldr	r6, [pc, #488]	; 12318 <__assert_fail@plt+0x1544>
   1212c:	ldr	r7, [pc, #472]	; 1230c <__assert_fail@plt+0x1538>
   12130:	ldr	r8, [pc, #484]	; 1231c <__assert_fail@plt+0x1548>
   12134:	ldr	r4, [r5]
   12138:	cmp	r4, #0
   1213c:	bne	12148 <__assert_fail@plt+0x1374>
   12140:	add	sp, sp, #44	; 0x2c
   12144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12148:	ldr	r3, [r4, #16]
   1214c:	cmp	r3, #1
   12150:	beq	122c4 <__assert_fail@plt+0x14f0>
   12154:	ldr	r3, [r6]
   12158:	cmp	r3, #0
   1215c:	beq	12170 <__assert_fail@plt+0x139c>
   12160:	ldr	r0, [pc, #440]	; 12320 <__assert_fail@plt+0x154c>
   12164:	ldr	r1, [r5, #32]
   12168:	ldr	r2, [r4, #160]	; 0xa0
   1216c:	bl	10b94 <printf@plt>
   12170:	ldr	r3, [r7]
   12174:	cmp	r3, #0
   12178:	beq	121b0 <__assert_fail@plt+0x13dc>
   1217c:	ldr	r3, [pc, #396]	; 12310 <__assert_fail@plt+0x153c>
   12180:	ldrd	sl, [r4, #128]	; 0x80
   12184:	ldr	r2, [r3]
   12188:	sub	ip, r2, #1
   1218c:	asr	r3, r2, #31
   12190:	adds	r0, sl, ip
   12194:	adc	r1, fp, ip, asr #31
   12198:	bl	164b8 <__assert_fail@plt+0x56e4>
   1219c:	mov	r2, r0
   121a0:	mov	r3, r1
   121a4:	ldr	r0, [pc, #376]	; 12324 <__assert_fail@plt+0x1550>
   121a8:	ldr	r1, [r5, #20]
   121ac:	bl	10b94 <printf@plt>
   121b0:	add	r1, sp, #20
   121b4:	ldr	r0, [r4, #80]	; 0x50
   121b8:	bl	128c4 <__assert_fail@plt+0x1af0>
   121bc:	ldr	r9, [r4, #20]
   121c0:	add	r1, sp, #20
   121c4:	mov	r0, r8
   121c8:	ldr	r2, [r5, #36]	; 0x24
   121cc:	ldr	r3, [r9, #4]
   121d0:	str	r3, [sp, #12]
   121d4:	ldr	r3, [r5, #28]
   121d8:	str	r3, [sp, #8]
   121dc:	ldr	r3, [r9]
   121e0:	str	r3, [sp, #4]
   121e4:	ldr	r3, [r5, #44]	; 0x2c
   121e8:	str	r3, [sp]
   121ec:	ldr	r3, [r4, #84]	; 0x54
   121f0:	bl	10b94 <printf@plt>
   121f4:	ldr	r3, [pc, #300]	; 12328 <__assert_fail@plt+0x1554>
   121f8:	ldr	r3, [r3]
   121fc:	cmp	r3, #0
   12200:	beq	12214 <__assert_fail@plt+0x1440>
   12204:	ldr	r0, [pc, #288]	; 1232c <__assert_fail@plt+0x1558>
   12208:	ldr	r2, [r9, #8]
   1220c:	ldr	r1, [r5, #24]
   12210:	bl	10b94 <printf@plt>
   12214:	ldr	r3, [r4, #80]	; 0x50
   12218:	and	r3, r3, #45056	; 0xb000
   1221c:	cmp	r3, #8192	; 0x2000
   12220:	bne	122cc <__assert_fail@plt+0x14f8>
   12224:	ldr	r1, [r4, #96]	; 0x60
   12228:	ldr	r0, [pc, #256]	; 12330 <__assert_fail@plt+0x155c>
   1222c:	uxtb	r2, r1
   12230:	ubfx	r1, r1, #8, #8
   12234:	bl	10b94 <printf@plt>
   12238:	ldr	r3, [pc, #244]	; 12334 <__assert_fail@plt+0x1560>
   1223c:	ldr	r3, [r3]
   12240:	cmp	r3, #0
   12244:	ldrne	r0, [r4, #136]	; 0x88
   12248:	bne	12260 <__assert_fail@plt+0x148c>
   1224c:	ldr	r3, [pc, #228]	; 12338 <__assert_fail@plt+0x1564>
   12250:	ldr	r3, [r3]
   12254:	cmp	r3, #0
   12258:	ldrne	r0, [r4, #152]	; 0x98
   1225c:	ldreq	r0, [r4, #144]	; 0x90
   12260:	bl	11d30 <__assert_fail@plt+0xf5c>
   12264:	add	r0, r4, #168	; 0xa8
   12268:	bl	126d0 <__assert_fail@plt+0x18fc>
   1226c:	ldr	r3, [pc, #200]	; 1233c <__assert_fail@plt+0x1568>
   12270:	ldr	r3, [r3]
   12274:	cmp	r3, #0
   12278:	bne	1229c <__assert_fail@plt+0x14c8>
   1227c:	ldr	r3, [pc, #188]	; 12340 <__assert_fail@plt+0x156c>
   12280:	ldr	r3, [r3]
   12284:	cmp	r3, #0
   12288:	beq	122a4 <__assert_fail@plt+0x14d0>
   1228c:	ldr	r3, [r4, #80]	; 0x50
   12290:	and	r3, r3, #61440	; 0xf000
   12294:	cmp	r3, #16384	; 0x4000
   12298:	bne	122a4 <__assert_fail@plt+0x14d0>
   1229c:	ldr	r0, [r4, #80]	; 0x50
   122a0:	bl	11ebc <__assert_fail@plt+0x10e8>
   122a4:	ldr	r3, [r4, #80]	; 0x50
   122a8:	and	r3, r3, #61440	; 0xf000
   122ac:	cmp	r3, #40960	; 0xa000
   122b0:	bne	122bc <__assert_fail@plt+0x14e8>
   122b4:	mov	r0, r4
   122b8:	bl	11dec <__assert_fail@plt+0x1018>
   122bc:	mov	r0, #10
   122c0:	bl	10ce4 <putchar@plt>
   122c4:	ldr	r4, [r4, #8]
   122c8:	b	12138 <__assert_fail@plt+0x1364>
   122cc:	ldr	r0, [r5, #8]
   122d0:	ldr	r1, [r5, #40]	; 0x28
   122d4:	ldrd	r2, [r4, #112]	; 0x70
   122d8:	cmp	r0, #0
   122dc:	beq	122fc <__assert_fail@plt+0x1528>
   122e0:	ldr	r0, [pc, #92]	; 12344 <__assert_fail@plt+0x1570>
   122e4:	strd	r2, [sp]
   122e8:	mov	r3, r1
   122ec:	rsb	r1, r1, #8
   122f0:	ldr	r2, [pc, #80]	; 12348 <__assert_fail@plt+0x1574>
   122f4:	bl	10b94 <printf@plt>
   122f8:	b	12238 <__assert_fail@plt+0x1464>
   122fc:	ldr	r0, [pc, #32]	; 12324 <__assert_fail@plt+0x1550>
   12300:	bl	10b94 <printf@plt>
   12304:	b	12238 <__assert_fail@plt+0x1464>
   12308:	andeq	r7, r2, r8, lsl #3
   1230c:	andeq	r7, r2, r4, asr r1
   12310:	andeq	r7, r2, r4, lsr #3
   12314:	andeq	r6, r1, r6, asr r8
   12318:	andeq	r7, r2, ip, ror #2
   1231c:	andeq	r6, r1, r1, ror #16
   12320:	andeq	r6, r1, r0, asr r8
   12324:	andeq	r6, r1, r8, lsl #17
   12328:	andeq	r7, r2, r4, ror #2
   1232c:	andeq	r6, r1, r5, ror r8
   12330:	andeq	r6, r1, fp, ror r8
   12334:	andeq	r7, r2, r4, ror r1
   12338:	andeq	r7, r2, r0, lsr #3
   1233c:	andeq	r7, r2, ip, ror r1
   12340:	andeq	r7, r2, ip, lsl #3
   12344:	andeq	r6, r1, r5, lsl #17
   12348:	muleq	r1, sp, r8
   1234c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12350:	sub	sp, sp, #20
   12354:	mov	r4, r0
   12358:	add	r1, sp, #12
   1235c:	bl	1203c <__assert_fail@plt+0x1268>
   12360:	subs	r3, r0, #0
   12364:	str	r3, [sp, #4]
   12368:	beq	123d0 <__assert_fail@plt+0x15fc>
   1236c:	ldr	r5, [pc, #352]	; 124d4 <__assert_fail@plt+0x1700>
   12370:	ldr	r1, [r4, #12]
   12374:	ldr	r9, [pc, #348]	; 124d8 <__assert_fail@plt+0x1704>
   12378:	ldr	r3, [r5]
   1237c:	cmp	r1, r3
   12380:	ble	123d8 <__assert_fail@plt+0x1604>
   12384:	lsl	r1, r1, #2
   12388:	ldr	r0, [r9]
   1238c:	bl	161b8 <__assert_fail@plt+0x53e4>
   12390:	cmp	r0, #0
   12394:	ldrne	r3, [r4, #12]
   12398:	strne	r0, [r9]
   1239c:	strne	r3, [r5]
   123a0:	bne	123d8 <__assert_fail@plt+0x1604>
   123a4:	ldr	r3, [pc, #304]	; 124dc <__assert_fail@plt+0x1708>
   123a8:	ldr	r5, [r3]
   123ac:	bl	10cc0 <__errno_location@plt>
   123b0:	ldr	r0, [r0]
   123b4:	bl	10c6c <strerror@plt>
   123b8:	mov	r2, r0
   123bc:	ldr	r1, [pc, #284]	; 124e0 <__assert_fail@plt+0x170c>
   123c0:	mov	r0, r5
   123c4:	bl	10cb4 <fprintf@plt>
   123c8:	mov	r0, r4
   123cc:	bl	11ffc <__assert_fail@plt+0x1228>
   123d0:	add	sp, sp, #20
   123d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123d8:	ldr	r3, [r4]
   123dc:	mov	r5, #0
   123e0:	ldr	r2, [r9]
   123e4:	cmp	r3, #0
   123e8:	bne	124ac <__assert_fail@plt+0x16d8>
   123ec:	ldr	r3, [sp, #12]
   123f0:	sdiv	r6, r5, r3
   123f4:	mls	r3, r3, r6, r5
   123f8:	cmp	r3, #0
   123fc:	ldr	r3, [r4]
   12400:	addne	r6, r6, #1
   12404:	ldr	r3, [r3, #48]	; 0x30
   12408:	cmp	r3, #0
   1240c:	beq	12448 <__assert_fail@plt+0x1674>
   12410:	ldr	r3, [pc, #204]	; 124e4 <__assert_fail@plt+0x1710>
   12414:	ldr	r2, [r3]
   12418:	ldr	r3, [pc, #200]	; 124e8 <__assert_fail@plt+0x1714>
   1241c:	ldr	r3, [r3]
   12420:	orrs	r3, r2, r3
   12424:	beq	12448 <__assert_fail@plt+0x1674>
   12428:	ldr	r3, [pc, #188]	; 124ec <__assert_fail@plt+0x1718>
   1242c:	ldr	r2, [r4, #4]
   12430:	ldr	r0, [pc, #184]	; 124f0 <__assert_fail@plt+0x171c>
   12434:	ldr	r1, [r3]
   12438:	sub	r3, r1, #1
   1243c:	add	r3, r3, r2
   12440:	udiv	r1, r3, r1
   12444:	bl	10b94 <printf@plt>
   12448:	mov	r8, #0
   1244c:	cmp	r6, r8
   12450:	ble	123d0 <__assert_fail@plt+0x15fc>
   12454:	mov	sl, r8
   12458:	mov	fp, #0
   1245c:	ldr	r0, [r9]
   12460:	ldr	r2, [r4, #20]
   12464:	ldr	r1, [r4, #32]
   12468:	ldr	r0, [r0, sl, lsl #2]
   1246c:	add	sl, sl, r6
   12470:	bl	11f1c <__assert_fail@plt+0x1148>
   12474:	cmp	r5, sl
   12478:	ble	124c4 <__assert_fail@plt+0x16f0>
   1247c:	ldr	r2, [sp, #12]
   12480:	add	fp, fp, #1
   12484:	cmp	r2, fp
   12488:	beq	124c4 <__assert_fail@plt+0x16f0>
   1248c:	mov	r7, r0
   12490:	ldr	r3, [sp, #4]
   12494:	cmp	r3, r7
   12498:	ble	1245c <__assert_fail@plt+0x1688>
   1249c:	mov	r0, #32
   124a0:	add	r7, r7, #1
   124a4:	bl	10ce4 <putchar@plt>
   124a8:	b	12490 <__assert_fail@plt+0x16bc>
   124ac:	ldr	r1, [r3, #16]
   124b0:	cmp	r1, #1
   124b4:	strne	r3, [r2, r5, lsl #2]
   124b8:	addne	r5, r5, #1
   124bc:	ldr	r3, [r3, #8]
   124c0:	b	123e4 <__assert_fail@plt+0x1610>
   124c4:	mov	r0, #10
   124c8:	add	r8, r8, #1
   124cc:	bl	10ce4 <putchar@plt>
   124d0:	b	1244c <__assert_fail@plt+0x1678>
   124d4:	andeq	r7, r2, r0, lsl #2
   124d8:	andeq	r7, r2, r8, lsr #2
   124dc:	andeq	r7, r2, r0, lsl r1
   124e0:	andeq	r6, r1, pc, lsl #17
   124e4:	andeq	r7, r2, r8, lsl #3
   124e8:	andeq	r7, r2, r4, asr r1
   124ec:	andeq	r7, r2, r4, lsr #3
   124f0:	andeq	r6, r1, r6, asr r8
   124f4:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   124f8:	add	r1, sp, #4
   124fc:	mov	r6, r0
   12500:	bl	1203c <__assert_fail@plt+0x1268>
   12504:	subs	r8, r0, #0
   12508:	beq	12570 <__assert_fail@plt+0x179c>
   1250c:	ldr	r3, [r6]
   12510:	ldr	r3, [r3, #48]	; 0x30
   12514:	cmp	r3, #0
   12518:	beq	12558 <__assert_fail@plt+0x1784>
   1251c:	ldr	r3, [pc, #188]	; 125e0 <__assert_fail@plt+0x180c>
   12520:	ldr	r2, [r3]
   12524:	ldr	r3, [pc, #184]	; 125e4 <__assert_fail@plt+0x1810>
   12528:	ldr	r3, [r3]
   1252c:	orrs	r3, r2, r3
   12530:	beq	12558 <__assert_fail@plt+0x1784>
   12534:	ldr	r3, [pc, #172]	; 125e8 <__assert_fail@plt+0x1814>
   12538:	ldr	r1, [r6, #4]
   1253c:	ldr	r0, [pc, #168]	; 125ec <__assert_fail@plt+0x1818>
   12540:	ldr	r2, [r3]
   12544:	sub	r3, r2, #1
   12548:	add	r3, r3, r1
   1254c:	udiv	r2, r3, r2
   12550:	mov	r3, #0
   12554:	bl	10b94 <printf@plt>
   12558:	ldr	r4, [r6]
   1255c:	mov	r5, #0
   12560:	cmp	r4, #0
   12564:	bne	12578 <__assert_fail@plt+0x17a4>
   12568:	mov	r0, #10
   1256c:	bl	10ce4 <putchar@plt>
   12570:	add	sp, sp, #8
   12574:	pop	{r4, r5, r6, r7, r8, pc}
   12578:	ldr	r3, [r4, #16]
   1257c:	cmp	r3, #1
   12580:	beq	125c0 <__assert_fail@plt+0x17ec>
   12584:	ldr	r3, [sp, #4]
   12588:	cmp	r3, r5
   1258c:	bgt	1259c <__assert_fail@plt+0x17c8>
   12590:	mov	r0, #10
   12594:	mov	r5, #0
   12598:	bl	10ce4 <putchar@plt>
   1259c:	mov	r0, r4
   125a0:	ldr	r2, [r6, #20]
   125a4:	add	r5, r5, #1
   125a8:	ldr	r1, [r6, #32]
   125ac:	bl	11f1c <__assert_fail@plt+0x1148>
   125b0:	ldr	r3, [sp, #4]
   125b4:	cmp	r3, r5
   125b8:	movgt	r7, r0
   125bc:	bgt	125d4 <__assert_fail@plt+0x1800>
   125c0:	ldr	r4, [r4, #8]
   125c4:	b	12560 <__assert_fail@plt+0x178c>
   125c8:	mov	r0, #32
   125cc:	add	r7, r7, #1
   125d0:	bl	10ce4 <putchar@plt>
   125d4:	cmp	r7, r8
   125d8:	blt	125c8 <__assert_fail@plt+0x17f4>
   125dc:	b	125c0 <__assert_fail@plt+0x17ec>
   125e0:	andeq	r7, r2, r8, lsl #3
   125e4:	andeq	r7, r2, r4, asr r1
   125e8:	andeq	r7, r2, r4, lsr #3
   125ec:	muleq	r1, lr, r8
   125f0:	ldr	r3, [pc, #200]	; 126c0 <__assert_fail@plt+0x18ec>
   125f4:	push	{r4, r5, r6, r7, r8, lr}
   125f8:	mov	r7, r0
   125fc:	mov	r5, #0
   12600:	ldr	r8, [pc, #188]	; 126c4 <__assert_fail@plt+0x18f0>
   12604:	ldr	r4, [r3]
   12608:	ldr	r3, [pc, #184]	; 126c8 <__assert_fail@plt+0x18f4>
   1260c:	ldr	r6, [r0]
   12610:	cmp	r4, #0
   12614:	ldrne	r4, [r0, #32]
   12618:	ldr	r3, [r3]
   1261c:	addne	r4, r4, #1
   12620:	cmp	r3, #0
   12624:	ldrne	r3, [r0, #20]
   12628:	addne	r3, r3, #1
   1262c:	addne	r4, r4, r3
   12630:	ldr	r3, [pc, #148]	; 126cc <__assert_fail@plt+0x18f8>
   12634:	ldr	r3, [r3]
   12638:	cmp	r3, #0
   1263c:	addne	r4, r4, #1
   12640:	cmp	r6, #0
   12644:	bne	12654 <__assert_fail@plt+0x1880>
   12648:	mov	r0, #10
   1264c:	pop	{r4, r5, r6, r7, r8, lr}
   12650:	b	10ce4 <putchar@plt>
   12654:	ldr	r3, [r6, #16]
   12658:	cmp	r3, #1
   1265c:	beq	126ac <__assert_fail@plt+0x18d8>
   12660:	cmp	r5, #0
   12664:	ble	12698 <__assert_fail@plt+0x18c4>
   12668:	mov	r0, #44	; 0x2c
   1266c:	add	r5, r5, #2
   12670:	bl	10ce4 <putchar@plt>
   12674:	ldr	r2, [r6, #52]	; 0x34
   12678:	add	r3, r5, r4
   1267c:	add	r3, r3, r2
   12680:	ldr	r2, [r8]
   12684:	cmp	r3, r2
   12688:	bcc	126b4 <__assert_fail@plt+0x18e0>
   1268c:	mov	r0, #10
   12690:	mov	r5, #0
   12694:	bl	10ce4 <putchar@plt>
   12698:	mov	r0, r6
   1269c:	ldr	r2, [r7, #20]
   126a0:	ldr	r1, [r7, #32]
   126a4:	bl	11f1c <__assert_fail@plt+0x1148>
   126a8:	add	r5, r5, r0
   126ac:	ldr	r6, [r6, #8]
   126b0:	b	12640 <__assert_fail@plt+0x186c>
   126b4:	mov	r0, #32
   126b8:	bl	10ce4 <putchar@plt>
   126bc:	b	12698 <__assert_fail@plt+0x18c4>
   126c0:	andeq	r7, r2, ip, ror #2
   126c4:	strdeq	r7, [r2], -r0
   126c8:	andeq	r7, r2, r4, asr r1
   126cc:	andeq	r7, r2, ip, ror r1
   126d0:	push	{r4, r5, r6, r7, r8, lr}
   126d4:	mov	r6, r0
   126d8:	mov	r5, #0
   126dc:	ldr	r7, [pc, #72]	; 1272c <__assert_fail@plt+0x1958>
   126e0:	ldrb	r4, [r6, r5]
   126e4:	cmp	r4, #0
   126e8:	bne	126f4 <__assert_fail@plt+0x1920>
   126ec:	mov	r0, r5
   126f0:	pop	{r4, r5, r6, r7, r8, pc}
   126f4:	bl	10c84 <__ctype_b_loc@plt>
   126f8:	ldr	r2, [r0]
   126fc:	lsl	r3, r4, #1
   12700:	ldrh	r3, [r2, r3]
   12704:	tst	r3, #16384	; 0x4000
   12708:	bne	1271c <__assert_fail@plt+0x1948>
   1270c:	ldr	r3, [r7]
   12710:	cmp	r3, #0
   12714:	movne	r0, #63	; 0x3f
   12718:	bne	12720 <__assert_fail@plt+0x194c>
   1271c:	mov	r0, r4
   12720:	bl	10ce4 <putchar@plt>
   12724:	add	r5, r5, #1
   12728:	b	126e0 <__assert_fail@plt+0x190c>
   1272c:			; <UNDEFINED> instruction: 0x000271b0
   12730:	ldr	r3, [pc, #20]	; 1274c <__assert_fail@plt+0x1978>
   12734:	push	{r4, lr}
   12738:	ldr	r0, [pc, #16]	; 12750 <__assert_fail@plt+0x197c>
   1273c:	ldr	r1, [r3]
   12740:	bl	10d80 <fputs@plt>
   12744:	mov	r0, #1
   12748:	pop	{r4, pc}
   1274c:	andeq	r7, r2, r0, lsl r1
   12750:	andeq	r6, r1, sl, lsr #17
   12754:	add	r1, r1, #168	; 0xa8
   12758:	add	r0, r0, #168	; 0xa8
   1275c:	b	10b7c <strcmp@plt>
   12760:	add	r3, r1, #168	; 0xa8
   12764:	add	r1, r0, #168	; 0xa8
   12768:	mov	r0, r3
   1276c:	b	10b7c <strcmp@plt>
   12770:	ldr	r3, [r0, #144]	; 0x90
   12774:	ldr	r2, [r1, #144]	; 0x90
   12778:	cmp	r2, r3
   1277c:	bgt	127a4 <__assert_fail@plt+0x19d0>
   12780:	bne	12794 <__assert_fail@plt+0x19c0>
   12784:	ldr	r3, [r0, #148]	; 0x94
   12788:	ldr	r2, [r1, #148]	; 0x94
   1278c:	cmp	r2, r3
   12790:	bgt	127a4 <__assert_fail@plt+0x19d0>
   12794:	blt	127ac <__assert_fail@plt+0x19d8>
   12798:	add	r1, r1, #168	; 0xa8
   1279c:	add	r0, r0, #168	; 0xa8
   127a0:	b	10b7c <strcmp@plt>
   127a4:	mov	r0, #1
   127a8:	bx	lr
   127ac:	mvn	r0, #0
   127b0:	bx	lr
   127b4:	push	{r4, lr}
   127b8:	bl	12770 <__assert_fail@plt+0x199c>
   127bc:	rsb	r0, r0, #0
   127c0:	pop	{r4, pc}
   127c4:	ldr	r3, [r0, #136]	; 0x88
   127c8:	ldr	r2, [r1, #136]	; 0x88
   127cc:	cmp	r2, r3
   127d0:	bgt	127f8 <__assert_fail@plt+0x1a24>
   127d4:	bne	127e8 <__assert_fail@plt+0x1a14>
   127d8:	ldr	r3, [r0, #140]	; 0x8c
   127dc:	ldr	r2, [r1, #140]	; 0x8c
   127e0:	cmp	r2, r3
   127e4:	bgt	127f8 <__assert_fail@plt+0x1a24>
   127e8:	blt	12800 <__assert_fail@plt+0x1a2c>
   127ec:	add	r1, r1, #168	; 0xa8
   127f0:	add	r0, r0, #168	; 0xa8
   127f4:	b	10b7c <strcmp@plt>
   127f8:	mov	r0, #1
   127fc:	bx	lr
   12800:	mvn	r0, #0
   12804:	bx	lr
   12808:	push	{r4, lr}
   1280c:	bl	127c4 <__assert_fail@plt+0x19f0>
   12810:	rsb	r0, r0, #0
   12814:	pop	{r4, pc}
   12818:	ldr	r3, [r0, #152]	; 0x98
   1281c:	ldr	r2, [r1, #152]	; 0x98
   12820:	cmp	r2, r3
   12824:	bgt	1284c <__assert_fail@plt+0x1a78>
   12828:	bne	1283c <__assert_fail@plt+0x1a68>
   1282c:	ldr	r3, [r0, #156]	; 0x9c
   12830:	ldr	r2, [r1, #156]	; 0x9c
   12834:	cmp	r2, r3
   12838:	bgt	1284c <__assert_fail@plt+0x1a78>
   1283c:	blt	12854 <__assert_fail@plt+0x1a80>
   12840:	add	r1, r1, #168	; 0xa8
   12844:	add	r0, r0, #168	; 0xa8
   12848:	b	10b7c <strcmp@plt>
   1284c:	mov	r0, #1
   12850:	bx	lr
   12854:	mvn	r0, #0
   12858:	bx	lr
   1285c:	push	{r4, lr}
   12860:	bl	12818 <__assert_fail@plt+0x1a44>
   12864:	rsb	r0, r0, #0
   12868:	pop	{r4, pc}
   1286c:	push	{r4, r5}
   12870:	ldrd	r2, [r0, #112]	; 0x70
   12874:	ldrd	r4, [r1, #112]	; 0x70
   12878:	cmp	r2, r4
   1287c:	sbcs	ip, r3, r5
   12880:	blt	128a0 <__assert_fail@plt+0x1acc>
   12884:	cmp	r4, r2
   12888:	sbcs	r3, r5, r3
   1288c:	blt	128ac <__assert_fail@plt+0x1ad8>
   12890:	add	r1, r1, #168	; 0xa8
   12894:	add	r0, r0, #168	; 0xa8
   12898:	pop	{r4, r5}
   1289c:	b	10b7c <strcmp@plt>
   128a0:	mov	r0, #1
   128a4:	pop	{r4, r5}
   128a8:	bx	lr
   128ac:	mvn	r0, #0
   128b0:	b	128a4 <__assert_fail@plt+0x1ad0>
   128b4:	push	{r4, lr}
   128b8:	bl	1286c <__assert_fail@plt+0x1a98>
   128bc:	rsb	r0, r0, #0
   128c0:	pop	{r4, pc}
   128c4:	and	r3, r0, #61440	; 0xf000
   128c8:	cmp	r3, #32768	; 0x8000
   128cc:	moveq	r3, #45	; 0x2d
   128d0:	beq	1291c <__assert_fail@plt+0x1b48>
   128d4:	cmp	r3, #16384	; 0x4000
   128d8:	moveq	r3, #100	; 0x64
   128dc:	beq	1291c <__assert_fail@plt+0x1b48>
   128e0:	cmp	r3, #24576	; 0x6000
   128e4:	moveq	r3, #98	; 0x62
   128e8:	beq	1291c <__assert_fail@plt+0x1b48>
   128ec:	cmp	r3, #8192	; 0x2000
   128f0:	moveq	r3, #99	; 0x63
   128f4:	beq	1291c <__assert_fail@plt+0x1b48>
   128f8:	cmp	r3, #40960	; 0xa000
   128fc:	moveq	r3, #108	; 0x6c
   12900:	beq	1291c <__assert_fail@plt+0x1b48>
   12904:	cmp	r3, #4096	; 0x1000
   12908:	moveq	r3, #112	; 0x70
   1290c:	beq	1291c <__assert_fail@plt+0x1b48>
   12910:	cmp	r3, #49152	; 0xc000
   12914:	moveq	r3, #115	; 0x73
   12918:	movne	r3, #63	; 0x3f
   1291c:	tst	r0, #256	; 0x100
   12920:	strb	r3, [r1]
   12924:	movne	r3, #114	; 0x72
   12928:	moveq	r3, #45	; 0x2d
   1292c:	tst	r0, #128	; 0x80
   12930:	strb	r3, [r1, #1]
   12934:	movne	r3, #119	; 0x77
   12938:	moveq	r3, #45	; 0x2d
   1293c:	tst	r0, #2048	; 0x800
   12940:	strb	r3, [r1, #2]
   12944:	and	r3, r0, #64	; 0x40
   12948:	beq	129e8 <__assert_fail@plt+0x1c14>
   1294c:	cmp	r3, #0
   12950:	movne	r3, #115	; 0x73
   12954:	moveq	r3, #83	; 0x53
   12958:	tst	r0, #32
   1295c:	strb	r3, [r1, #3]
   12960:	movne	r3, #114	; 0x72
   12964:	moveq	r3, #45	; 0x2d
   12968:	tst	r0, #16
   1296c:	strb	r3, [r1, #4]
   12970:	movne	r3, #119	; 0x77
   12974:	moveq	r3, #45	; 0x2d
   12978:	tst	r0, #1024	; 0x400
   1297c:	strb	r3, [r1, #5]
   12980:	and	r3, r0, #8
   12984:	beq	129f8 <__assert_fail@plt+0x1c24>
   12988:	cmp	r3, #0
   1298c:	movne	r3, #115	; 0x73
   12990:	moveq	r3, #83	; 0x53
   12994:	tst	r0, #4
   12998:	strb	r3, [r1, #6]
   1299c:	movne	r3, #114	; 0x72
   129a0:	moveq	r3, #45	; 0x2d
   129a4:	tst	r0, #2
   129a8:	strb	r3, [r1, #7]
   129ac:	movne	r3, #119	; 0x77
   129b0:	moveq	r3, #45	; 0x2d
   129b4:	tst	r0, #512	; 0x200
   129b8:	strb	r3, [r1, #8]
   129bc:	and	r3, r0, #1
   129c0:	beq	12a08 <__assert_fail@plt+0x1c34>
   129c4:	cmp	r3, #0
   129c8:	movne	r3, #116	; 0x74
   129cc:	moveq	r3, #84	; 0x54
   129d0:	strb	r3, [r1, #9]
   129d4:	mov	r3, #32
   129d8:	strb	r3, [r1, #10]
   129dc:	mov	r3, #0
   129e0:	strb	r3, [r1, #11]
   129e4:	bx	lr
   129e8:	cmp	r3, #0
   129ec:	movne	r3, #120	; 0x78
   129f0:	moveq	r3, #45	; 0x2d
   129f4:	b	12958 <__assert_fail@plt+0x1b84>
   129f8:	cmp	r3, #0
   129fc:	movne	r3, #120	; 0x78
   12a00:	moveq	r3, #45	; 0x2d
   12a04:	b	12994 <__assert_fail@plt+0x1bc0>
   12a08:	cmp	r3, #0
   12a0c:	movne	r3, #120	; 0x78
   12a10:	moveq	r3, #45	; 0x2d
   12a14:	b	129d0 <__assert_fail@plt+0x1bfc>
   12a18:	ldr	r0, [r0, #16]
   12a1c:	b	128c4 <__assert_fail@plt+0x1af0>
   12a20:	push	{r0, r1, r2, r4, r5, lr}
   12a24:	mov	r5, r0
   12a28:	bl	10cc0 <__errno_location@plt>
   12a2c:	mov	r4, r0
   12a30:	mov	r0, r5
   12a34:	ldr	r3, [r4]
   12a38:	str	r3, [sp]
   12a3c:	str	r3, [sp, #4]
   12a40:	mov	r3, #0
   12a44:	str	r3, [r4]
   12a48:	bl	10bb8 <free@plt>
   12a4c:	ldr	r3, [r4]
   12a50:	add	r2, sp, #8
   12a54:	clz	r3, r3
   12a58:	lsr	r3, r3, #5
   12a5c:	add	r3, r2, r3, lsl #2
   12a60:	ldr	r3, [r3, #-8]
   12a64:	str	r3, [r4]
   12a68:	add	sp, sp, #12
   12a6c:	pop	{r4, r5, pc}
   12a70:	push	{r4, r5, lr}
   12a74:	ldrd	r2, [r1, #8]
   12a78:	ldrd	r4, [r0, #8]
   12a7c:	cmp	r5, r3
   12a80:	cmpeq	r4, r2
   12a84:	bne	12aa4 <__assert_fail@plt+0x1cd0>
   12a88:	ldrd	r4, [r0]
   12a8c:	ldrd	r2, [r1]
   12a90:	cmp	r5, r3
   12a94:	cmpeq	r4, r2
   12a98:	moveq	r0, #1
   12a9c:	movne	r0, #0
   12aa0:	pop	{r4, r5, pc}
   12aa4:	mov	r0, #0
   12aa8:	pop	{r4, r5, pc}
   12aac:	push	{r4, lr}
   12ab0:	mov	r2, r1
   12ab4:	mov	r3, #0
   12ab8:	ldrd	r0, [r0, #8]
   12abc:	bl	1658c <__assert_fail@plt+0x57b8>
   12ac0:	mov	r0, r2
   12ac4:	pop	{r4, pc}
   12ac8:	push	{r4, lr}
   12acc:	mov	r2, r1
   12ad0:	mov	r3, #0
   12ad4:	ldrd	r0, [r0]
   12ad8:	bl	1658c <__assert_fail@plt+0x57b8>
   12adc:	mov	r0, r2
   12ae0:	pop	{r4, pc}
   12ae4:	push	{r4, r5, lr}
   12ae8:	ldrd	r2, [r1]
   12aec:	ldrd	r4, [r0]
   12af0:	cmp	r5, r3
   12af4:	cmpeq	r4, r2
   12af8:	moveq	r0, #1
   12afc:	movne	r0, #0
   12b00:	pop	{r4, r5, pc}
   12b04:	ldr	r3, [r0]
   12b08:	push	{r4, r5, lr}
   12b0c:	ldrd	r4, [r3, #160]	; 0xa0
   12b10:	ldr	r3, [r1]
   12b14:	ldrd	r2, [r3, #160]	; 0xa0
   12b18:	cmp	r5, r3
   12b1c:	cmpeq	r4, r2
   12b20:	movhi	r0, #1
   12b24:	movls	r0, #0
   12b28:	movcc	r3, #1
   12b2c:	movcs	r3, #0
   12b30:	sub	r0, r0, r3
   12b34:	pop	{r4, r5, pc}
   12b38:	push	{r4, r5, r6, lr}
   12b3c:	mov	r4, r1
   12b40:	add	r5, r1, #64	; 0x40
   12b44:	ldr	r1, [r1, #48]	; 0x30
   12b48:	ldr	r3, [r0, #48]	; 0x30
   12b4c:	cmp	r1, #0
   12b50:	bne	12b5c <__assert_fail@plt+0x1d88>
   12b54:	tst	r3, #1
   12b58:	bne	12b68 <__assert_fail@plt+0x1d94>
   12b5c:	ubfx	r3, r3, #1, #1
   12b60:	orrs	r3, r2, r3
   12b64:	beq	12bd0 <__assert_fail@plt+0x1dfc>
   12b68:	mov	r1, r5
   12b6c:	ldr	r0, [r4, #24]
   12b70:	bl	16764 <__assert_fail@plt+0x5990>
   12b74:	cmp	r0, #0
   12b78:	beq	12bf8 <__assert_fail@plt+0x1e24>
   12b7c:	bl	10cc0 <__errno_location@plt>
   12b80:	ldr	r3, [r0]
   12b84:	mov	r6, r0
   12b88:	cmp	r3, #2
   12b8c:	bne	12bb0 <__assert_fail@plt+0x1ddc>
   12b90:	mov	r1, r5
   12b94:	ldr	r0, [r4, #24]
   12b98:	bl	16784 <__assert_fail@plt+0x59b0>
   12b9c:	cmp	r0, #0
   12ba0:	bne	12bb0 <__assert_fail@plt+0x1ddc>
   12ba4:	str	r0, [r6]
   12ba8:	mov	r0, #13
   12bac:	pop	{r4, r5, r6, pc}
   12bb0:	ldr	r3, [r6]
   12bb4:	mov	r2, #104	; 0x68
   12bb8:	mov	r1, #0
   12bbc:	str	r3, [r4, #32]
   12bc0:	mov	r0, r5
   12bc4:	bl	10cd8 <memset@plt>
   12bc8:	mov	r0, #10
   12bcc:	pop	{r4, r5, r6, pc}
   12bd0:	mov	r3, #256	; 0x100
   12bd4:	mov	r2, r5
   12bd8:	ldr	r1, [r4, #24]
   12bdc:	ldr	r0, [r0, #32]
   12be0:	bl	16794 <__assert_fail@plt+0x59c0>
   12be4:	cmp	r0, #0
   12be8:	beq	12bf8 <__assert_fail@plt+0x1e24>
   12bec:	bl	10cc0 <__errno_location@plt>
   12bf0:	ldr	r3, [r0]
   12bf4:	b	12bb4 <__assert_fail@plt+0x1de0>
   12bf8:	ldr	r3, [r4, #80]	; 0x50
   12bfc:	and	r3, r3, #61440	; 0xf000
   12c00:	cmp	r3, #16384	; 0x4000
   12c04:	bne	12c48 <__assert_fail@plt+0x1e74>
   12c08:	ldrb	r3, [r4, #168]	; 0xa8
   12c0c:	cmp	r3, #46	; 0x2e
   12c10:	bne	12c60 <__assert_fail@plt+0x1e8c>
   12c14:	ldrb	r3, [r4, #169]	; 0xa9
   12c18:	cmp	r3, #0
   12c1c:	beq	12c34 <__assert_fail@plt+0x1e60>
   12c20:	ldr	r3, [r4, #168]	; 0xa8
   12c24:	bic	r3, r3, #-16777216	; 0xff000000
   12c28:	bic	r3, r3, #255	; 0xff
   12c2c:	cmp	r3, #11776	; 0x2e00
   12c30:	bne	12c60 <__assert_fail@plt+0x1e8c>
   12c34:	ldr	r3, [r4, #48]	; 0x30
   12c38:	cmp	r3, #0
   12c3c:	moveq	r0, #1
   12c40:	movne	r0, #5
   12c44:	pop	{r4, r5, r6, pc}
   12c48:	cmp	r3, #40960	; 0xa000
   12c4c:	beq	12c68 <__assert_fail@plt+0x1e94>
   12c50:	cmp	r3, #32768	; 0x8000
   12c54:	movne	r0, #3
   12c58:	moveq	r0, #8
   12c5c:	pop	{r4, r5, r6, pc}
   12c60:	mov	r0, #1
   12c64:	pop	{r4, r5, r6, pc}
   12c68:	mov	r0, #12
   12c6c:	pop	{r4, r5, r6, pc}
   12c70:	ldr	r3, [r0, #40]	; 0x28
   12c74:	push	{r4, r5, r6, r7, r8, lr}
   12c78:	mov	r4, r0
   12c7c:	mov	r6, r1
   12c80:	mov	r5, r2
   12c84:	ldr	r7, [r0, #44]	; 0x2c
   12c88:	cmp	r3, r2
   12c8c:	bcs	12cd4 <__assert_fail@plt+0x1f00>
   12c90:	add	r1, r2, #40	; 0x28
   12c94:	ldr	r0, [r0, #8]
   12c98:	cmn	r1, #-1073741823	; 0xc0000001
   12c9c:	str	r1, [r4, #40]	; 0x28
   12ca0:	bls	12cc0 <__assert_fail@plt+0x1eec>
   12ca4:	ldr	r0, [r4, #8]
   12ca8:	bl	12a20 <__assert_fail@plt+0x1c4c>
   12cac:	mov	r3, #0
   12cb0:	str	r3, [r4, #8]
   12cb4:	str	r3, [r4, #40]	; 0x28
   12cb8:	mov	r0, r6
   12cbc:	pop	{r4, r5, r6, r7, r8, pc}
   12cc0:	lsl	r1, r1, #2
   12cc4:	bl	161b8 <__assert_fail@plt+0x53e4>
   12cc8:	cmp	r0, #0
   12ccc:	beq	12ca4 <__assert_fail@plt+0x1ed0>
   12cd0:	str	r0, [r4, #8]
   12cd4:	ldr	r0, [r4, #8]
   12cd8:	mov	r2, r0
   12cdc:	cmp	r6, #0
   12ce0:	bne	12d10 <__assert_fail@plt+0x1f3c>
   12ce4:	mov	r3, r7
   12ce8:	mov	r2, #4
   12cec:	mov	r1, r5
   12cf0:	bl	10d5c <qsort@plt>
   12cf4:	ldr	r3, [r4, #8]
   12cf8:	ldr	r6, [r3]
   12cfc:	subs	r5, r5, #1
   12d00:	ldr	r2, [r3]
   12d04:	bne	12d1c <__assert_fail@plt+0x1f48>
   12d08:	str	r5, [r2, #8]
   12d0c:	b	12cb8 <__assert_fail@plt+0x1ee4>
   12d10:	str	r6, [r2], #4
   12d14:	ldr	r6, [r6, #8]
   12d18:	b	12cdc <__assert_fail@plt+0x1f08>
   12d1c:	ldr	r1, [r3, #4]!
   12d20:	str	r1, [r2, #8]
   12d24:	b	12cfc <__assert_fail@plt+0x1f28>
   12d28:	push	{r4, r5, r6, r7, r8, lr}
   12d2c:	mov	r6, r0
   12d30:	add	r0, r2, #176	; 0xb0
   12d34:	bic	r0, r0, #7
   12d38:	mov	r7, r1
   12d3c:	mov	r5, r2
   12d40:	bl	1618c <__assert_fail@plt+0x53b8>
   12d44:	subs	r4, r0, #0
   12d48:	beq	12d94 <__assert_fail@plt+0x1fc0>
   12d4c:	mov	r2, r5
   12d50:	mov	r1, r7
   12d54:	add	r0, r4, #168	; 0xa8
   12d58:	bl	10bc4 <memcpy@plt>
   12d5c:	mov	r3, #0
   12d60:	add	r2, r4, r5
   12d64:	strb	r3, [r2, #168]	; 0xa8
   12d68:	ldr	r2, [r6, #24]
   12d6c:	str	r3, [r4, #12]
   12d70:	str	r3, [r4, #16]
   12d74:	str	r3, [r4, #20]
   12d78:	str	r2, [r4, #28]
   12d7c:	mov	r2, #3
   12d80:	str	r3, [r4, #32]
   12d84:	str	r6, [r4, #44]	; 0x2c
   12d88:	str	r5, [r4, #52]	; 0x34
   12d8c:	strh	r3, [r4, #58]	; 0x3a
   12d90:	strh	r2, [r4, #60]	; 0x3c
   12d94:	mov	r0, r4
   12d98:	pop	{r4, r5, r6, r7, r8, pc}
   12d9c:	mov	r3, r0
   12da0:	mov	r0, r1
   12da4:	ldr	ip, [r3, #48]	; 0x30
   12da8:	lsl	r2, ip, #11
   12dac:	tst	ip, #512	; 0x200
   12db0:	and	r2, r2, #32768	; 0x8000
   12db4:	orr	r2, r2, #540672	; 0x84000
   12db8:	orr	r2, r2, #2304	; 0x900
   12dbc:	beq	12dc8 <__assert_fail@plt+0x1ff4>
   12dc0:	ldr	r0, [r3, #32]
   12dc4:	b	16078 <__assert_fail@plt+0x52a4>
   12dc8:	mov	r1, r2
   12dcc:	b	16478 <__assert_fail@plt+0x56a4>
   12dd0:	push	{r4, r5, r6, lr}
   12dd4:	mov	r4, r0
   12dd8:	cmp	r4, #0
   12ddc:	popeq	{r4, r5, r6, pc}
   12de0:	ldr	r5, [r4, #8]
   12de4:	ldr	r0, [r4, #12]
   12de8:	cmp	r0, #0
   12dec:	beq	12df4 <__assert_fail@plt+0x2020>
   12df0:	bl	10dbc <closedir@plt>
   12df4:	mov	r0, r4
   12df8:	mov	r4, r5
   12dfc:	bl	12a20 <__assert_fail@plt+0x1c4c>
   12e00:	b	12dd8 <__assert_fail@plt+0x2004>
   12e04:	push	{r4, lr}
   12e08:	mov	r4, r0
   12e0c:	mov	r0, r4
   12e10:	bl	15f50 <__assert_fail@plt+0x517c>
   12e14:	cmp	r0, #0
   12e18:	popne	{r4, pc}
   12e1c:	mov	r0, r4
   12e20:	bl	15f9c <__assert_fail@plt+0x51c8>
   12e24:	cmp	r0, #0
   12e28:	blt	12e0c <__assert_fail@plt+0x2038>
   12e2c:	bl	10da4 <close@plt>
   12e30:	b	12e0c <__assert_fail@plt+0x2038>
   12e34:	push	{r4, r5, r6, r7, lr}
   12e38:	sub	sp, sp, #100	; 0x64
   12e3c:	ldr	r5, [r0, #44]	; 0x2c
   12e40:	ldr	r3, [r5, #48]	; 0x30
   12e44:	tst	r3, #512	; 0x200
   12e48:	bne	12e58 <__assert_fail@plt+0x2084>
   12e4c:	mov	r0, #0
   12e50:	add	sp, sp, #100	; 0x64
   12e54:	pop	{r4, r5, r6, r7, pc}
   12e58:	ldr	r4, [r5, #52]	; 0x34
   12e5c:	mov	r7, r1
   12e60:	mov	r6, r0
   12e64:	cmp	r4, #0
   12e68:	bne	12e98 <__assert_fail@plt+0x20c4>
   12e6c:	ldr	r3, [pc, #184]	; 12f2c <__assert_fail@plt+0x2158>
   12e70:	mov	r1, r4
   12e74:	mov	r0, #13
   12e78:	ldr	r2, [pc, #176]	; 12f30 <__assert_fail@plt+0x215c>
   12e7c:	str	r3, [sp]
   12e80:	ldr	r3, [pc, #172]	; 12f34 <__assert_fail@plt+0x2160>
   12e84:	bl	15930 <__assert_fail@plt+0x4b5c>
   12e88:	cmp	r0, #0
   12e8c:	mov	r4, r0
   12e90:	str	r0, [r5, #52]	; 0x34
   12e94:	beq	12eb8 <__assert_fail@plt+0x20e4>
   12e98:	ldrd	r2, [r6, #64]	; 0x40
   12e9c:	add	r1, sp, #8
   12ea0:	mov	r0, r4
   12ea4:	strd	r2, [sp, #8]
   12ea8:	bl	15720 <__assert_fail@plt+0x494c>
   12eac:	cmp	r0, #0
   12eb0:	ldrne	r0, [r0, #8]
   12eb4:	bne	12e50 <__assert_fail@plt+0x207c>
   12eb8:	cmp	r7, #0
   12ebc:	blt	12e4c <__assert_fail@plt+0x2078>
   12ec0:	add	r1, sp, #8
   12ec4:	mov	r0, r7
   12ec8:	bl	10b58 <fstatfs64@plt>
   12ecc:	cmp	r0, #0
   12ed0:	bne	12e4c <__assert_fail@plt+0x2078>
   12ed4:	cmp	r4, #0
   12ed8:	beq	12f24 <__assert_fail@plt+0x2150>
   12edc:	mov	r0, #16
   12ee0:	bl	1618c <__assert_fail@plt+0x53b8>
   12ee4:	subs	r5, r0, #0
   12ee8:	beq	12f24 <__assert_fail@plt+0x2150>
   12eec:	ldrd	r2, [r6, #64]	; 0x40
   12ef0:	mov	r1, r5
   12ef4:	mov	r0, r4
   12ef8:	strd	r2, [r5]
   12efc:	ldr	r3, [sp, #8]
   12f00:	str	r3, [r5, #8]
   12f04:	bl	15df8 <__assert_fail@plt+0x5024>
   12f08:	cmp	r0, #0
   12f0c:	beq	12f1c <__assert_fail@plt+0x2148>
   12f10:	cmp	r5, r0
   12f14:	beq	12f24 <__assert_fail@plt+0x2150>
   12f18:	bl	10d98 <abort@plt>
   12f1c:	mov	r0, r5
   12f20:	bl	12a20 <__assert_fail@plt+0x1c4c>
   12f24:	ldr	r0, [sp, #8]
   12f28:	b	12e50 <__assert_fail@plt+0x207c>
   12f2c:	andeq	r2, r1, r0, lsr #20
   12f30:	andeq	r2, r1, r8, asr #21
   12f34:	andeq	r2, r1, r4, ror #21
   12f38:	push	{r4, r5, r6, lr}
   12f3c:	mov	r5, r1
   12f40:	ldr	r1, [r0, #32]
   12f44:	sub	r3, r1, r5
   12f48:	cmn	r1, #100	; 0x64
   12f4c:	clz	r3, r3
   12f50:	lsr	r3, r3, #5
   12f54:	moveq	r3, #0
   12f58:	cmp	r3, #0
   12f5c:	beq	12f64 <__assert_fail@plt+0x2190>
   12f60:	bl	10d98 <abort@plt>
   12f64:	cmp	r2, #0
   12f68:	mov	r4, r0
   12f6c:	beq	12f8c <__assert_fail@plt+0x21b8>
   12f70:	add	r0, r0, #60	; 0x3c
   12f74:	bl	15f58 <__assert_fail@plt+0x5184>
   12f78:	cmp	r0, #0
   12f7c:	blt	12f84 <__assert_fail@plt+0x21b0>
   12f80:	bl	10da4 <close@plt>
   12f84:	str	r5, [r4, #32]
   12f88:	pop	{r4, r5, r6, pc}
   12f8c:	ldr	r3, [r0, #48]	; 0x30
   12f90:	mvn	r2, r1
   12f94:	lsr	r2, r2, #31
   12f98:	eor	r3, r3, #4
   12f9c:	ands	r3, r2, r3, lsr #2
   12fa0:	beq	12f84 <__assert_fail@plt+0x21b0>
   12fa4:	mov	r0, r1
   12fa8:	b	12f80 <__assert_fail@plt+0x21ac>
   12fac:	ldr	r3, [r0, #48]	; 0x30
   12fb0:	push	{r4, r5, r6, lr}
   12fb4:	mov	r5, r0
   12fb8:	ands	r4, r3, #4
   12fbc:	movne	r4, #0
   12fc0:	bne	12fd8 <__assert_fail@plt+0x2204>
   12fc4:	tst	r3, #512	; 0x200
   12fc8:	beq	12fe8 <__assert_fail@plt+0x2214>
   12fcc:	mov	r2, #1
   12fd0:	mvn	r1, #99	; 0x63
   12fd4:	bl	12f38 <__assert_fail@plt+0x2164>
   12fd8:	add	r0, r5, #60	; 0x3c
   12fdc:	bl	12e04 <__assert_fail@plt+0x2030>
   12fe0:	mov	r0, r4
   12fe4:	pop	{r4, r5, r6, pc}
   12fe8:	ldr	r0, [r0, #28]
   12fec:	bl	10d50 <fchdir@plt>
   12ff0:	adds	r4, r0, #0
   12ff4:	movne	r4, #1
   12ff8:	b	12fd8 <__assert_fail@plt+0x2204>
   12ffc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13000:	subs	sl, r3, #0
   13004:	sub	sp, sp, #104	; 0x68
   13008:	mov	r7, r0
   1300c:	mov	r8, r1
   13010:	mov	r6, r2
   13014:	moveq	r9, sl
   13018:	beq	13030 <__assert_fail@plt+0x225c>
   1301c:	ldr	r1, [pc, #368]	; 13194 <__assert_fail@plt+0x23c0>
   13020:	mov	r0, sl
   13024:	bl	10b7c <strcmp@plt>
   13028:	clz	r9, r0
   1302c:	lsr	r9, r9, #5
   13030:	ldr	r3, [r7, #48]	; 0x30
   13034:	ands	r4, r3, #4
   13038:	beq	13064 <__assert_fail@plt+0x2290>
   1303c:	mvn	r4, r6
   13040:	lsr	r4, r4, #31
   13044:	ands	r4, r4, r3, lsr #9
   13048:	beq	13058 <__assert_fail@plt+0x2284>
   1304c:	mov	r0, r6
   13050:	mov	r4, #0
   13054:	bl	10da4 <close@plt>
   13058:	mov	r0, r4
   1305c:	add	sp, sp, #104	; 0x68
   13060:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13064:	ands	r2, r9, r6, lsr #31
   13068:	beq	13154 <__assert_fail@plt+0x2380>
   1306c:	tst	r3, #512	; 0x200
   13070:	bne	13090 <__assert_fail@plt+0x22bc>
   13074:	mov	r1, sl
   13078:	mov	r0, r7
   1307c:	bl	12d9c <__assert_fail@plt+0x1fc8>
   13080:	subs	r5, r0, #0
   13084:	bge	130bc <__assert_fail@plt+0x22e8>
   13088:	mvn	r4, #0
   1308c:	b	13058 <__assert_fail@plt+0x2284>
   13090:	add	r5, r7, #60	; 0x3c
   13094:	mov	r0, r5
   13098:	bl	15f50 <__assert_fail@plt+0x517c>
   1309c:	cmp	r0, #0
   130a0:	bne	13074 <__assert_fail@plt+0x22a0>
   130a4:	mov	r0, r5
   130a8:	bl	15f9c <__assert_fail@plt+0x51c8>
   130ac:	subs	r5, r0, #0
   130b0:	movge	r6, r5
   130b4:	movge	sl, r4
   130b8:	blt	13074 <__assert_fail@plt+0x22a0>
   130bc:	ldr	r3, [r7, #48]	; 0x30
   130c0:	tst	r3, #2
   130c4:	bne	130e4 <__assert_fail@plt+0x2310>
   130c8:	cmp	sl, #0
   130cc:	beq	13164 <__assert_fail@plt+0x2390>
   130d0:	ldr	r1, [pc, #188]	; 13194 <__assert_fail@plt+0x23c0>
   130d4:	mov	r0, sl
   130d8:	bl	10b7c <strcmp@plt>
   130dc:	cmp	r0, #0
   130e0:	bne	13164 <__assert_fail@plt+0x2390>
   130e4:	mov	r1, sp
   130e8:	mov	r0, r5
   130ec:	bl	16774 <__assert_fail@plt+0x59a0>
   130f0:	cmp	r0, #0
   130f4:	bne	1312c <__assert_fail@plt+0x2358>
   130f8:	ldrd	r2, [sp]
   130fc:	ldrd	r0, [r8, #64]	; 0x40
   13100:	cmp	r1, r3
   13104:	cmpeq	r0, r2
   13108:	bne	13120 <__assert_fail@plt+0x234c>
   1310c:	ldrd	r2, [sp, #96]	; 0x60
   13110:	ldrd	r0, [r8, #160]	; 0xa0
   13114:	cmp	r1, r3
   13118:	cmpeq	r0, r2
   1311c:	beq	13164 <__assert_fail@plt+0x2390>
   13120:	bl	10cc0 <__errno_location@plt>
   13124:	mov	r3, #2
   13128:	str	r3, [r0]
   1312c:	mvn	r4, #0
   13130:	cmp	r6, #0
   13134:	bge	13058 <__assert_fail@plt+0x2284>
   13138:	bl	10cc0 <__errno_location@plt>
   1313c:	mov	r6, r0
   13140:	mov	r0, r5
   13144:	ldr	r7, [r6]
   13148:	bl	10da4 <close@plt>
   1314c:	str	r7, [r6]
   13150:	b	13058 <__assert_fail@plt+0x2284>
   13154:	cmp	r6, #0
   13158:	movge	r5, r6
   1315c:	bge	130bc <__assert_fail@plt+0x22e8>
   13160:	b	13074 <__assert_fail@plt+0x22a0>
   13164:	ldr	r3, [r7, #48]	; 0x30
   13168:	tst	r3, #512	; 0x200
   1316c:	beq	13184 <__assert_fail@plt+0x23b0>
   13170:	eor	r2, r9, #1
   13174:	mov	r1, r5
   13178:	mov	r0, r7
   1317c:	bl	12f38 <__assert_fail@plt+0x2164>
   13180:	b	13058 <__assert_fail@plt+0x2284>
   13184:	mov	r0, r5
   13188:	bl	10d50 <fchdir@plt>
   1318c:	mov	r4, r0
   13190:	b	13130 <__assert_fail@plt+0x235c>
   13194:	strdeq	r6, [r1], -r6	; <UNPREDICTABLE>
   13198:	ldr	r3, [r0, #36]	; 0x24
   1319c:	add	r1, r1, #256	; 0x100
   131a0:	push	{r4, r5, r6, lr}
   131a4:	mov	r5, r0
   131a8:	ldr	r0, [r0, #24]
   131ac:	adds	r1, r3, r1
   131b0:	bcc	131d4 <__assert_fail@plt+0x2400>
   131b4:	mov	r4, #0
   131b8:	bl	12a20 <__assert_fail@plt+0x1c4c>
   131bc:	str	r4, [r5, #24]
   131c0:	bl	10cc0 <__errno_location@plt>
   131c4:	mov	r3, #36	; 0x24
   131c8:	str	r3, [r0]
   131cc:	mov	r0, r4
   131d0:	pop	{r4, r5, r6, pc}
   131d4:	str	r1, [r5, #36]	; 0x24
   131d8:	bl	161b8 <__assert_fail@plt+0x53e4>
   131dc:	subs	r4, r0, #0
   131e0:	bne	131f4 <__assert_fail@plt+0x2420>
   131e4:	ldr	r0, [r5, #24]
   131e8:	bl	12a20 <__assert_fail@plt+0x1c4c>
   131ec:	str	r4, [r5, #24]
   131f0:	b	131cc <__assert_fail@plt+0x23f8>
   131f4:	mov	r0, #1
   131f8:	str	r4, [r5, #24]
   131fc:	pop	{r4, r5, r6, pc}
   13200:	ldr	r3, [r0, #48]	; 0x30
   13204:	movw	r2, #258	; 0x102
   13208:	push	{r0, r1, r4, lr}
   1320c:	mov	r4, r0
   13210:	tst	r2, r3
   13214:	beq	13248 <__assert_fail@plt+0x2474>
   13218:	ldr	r3, [pc, #72]	; 13268 <__assert_fail@plt+0x2494>
   1321c:	mov	r1, #0
   13220:	mov	r0, #31
   13224:	ldr	r2, [pc, #64]	; 1326c <__assert_fail@plt+0x2498>
   13228:	str	r3, [sp]
   1322c:	ldr	r3, [pc, #60]	; 13270 <__assert_fail@plt+0x249c>
   13230:	bl	15930 <__assert_fail@plt+0x4b5c>
   13234:	str	r0, [r4, #56]	; 0x38
   13238:	adds	r0, r0, #0
   1323c:	movne	r0, #1
   13240:	add	sp, sp, #8
   13244:	pop	{r4, pc}
   13248:	mov	r0, #32
   1324c:	bl	1618c <__assert_fail@plt+0x53b8>
   13250:	cmp	r0, #0
   13254:	str	r0, [r4, #56]	; 0x38
   13258:	beq	13240 <__assert_fail@plt+0x246c>
   1325c:	bl	161fc <__assert_fail@plt+0x5428>
   13260:	mov	r0, #1
   13264:	b	13240 <__assert_fail@plt+0x246c>
   13268:	andeq	r2, r1, r0, lsr #20
   1326c:	andeq	r2, r1, ip, lsr #21
   13270:	andeq	r2, r1, r0, ror sl
   13274:	mov	r3, r0
   13278:	movw	r2, #258	; 0x102
   1327c:	ldr	r0, [r0, #56]	; 0x38
   13280:	ldr	r3, [r3, #48]	; 0x30
   13284:	tst	r2, r3
   13288:	beq	13298 <__assert_fail@plt+0x24c4>
   1328c:	cmp	r0, #0
   13290:	bxeq	lr
   13294:	b	15a98 <__assert_fail@plt+0x4cc4>
   13298:	b	12a20 <__assert_fail@plt+0x1c4c>
   1329c:	ldr	r3, [r0, #48]	; 0x30
   132a0:	movw	r2, #258	; 0x102
   132a4:	push	{r4, r5, r6, lr}
   132a8:	mov	r6, r0
   132ac:	mov	r4, r1
   132b0:	tst	r2, r3
   132b4:	beq	13328 <__assert_fail@plt+0x2554>
   132b8:	mov	r0, #24
   132bc:	bl	1618c <__assert_fail@plt+0x53b8>
   132c0:	subs	r5, r0, #0
   132c4:	bne	132d0 <__assert_fail@plt+0x24fc>
   132c8:	mov	r0, #0
   132cc:	pop	{r4, r5, r6, pc}
   132d0:	ldrd	r2, [r4, #64]	; 0x40
   132d4:	mov	r1, r5
   132d8:	ldr	r0, [r6, #56]	; 0x38
   132dc:	strd	r2, [r5]
   132e0:	ldrd	r2, [r4, #160]	; 0xa0
   132e4:	str	r4, [r5, #16]
   132e8:	strd	r2, [r5, #8]
   132ec:	bl	15df8 <__assert_fail@plt+0x5024>
   132f0:	cmp	r5, r0
   132f4:	mov	r6, r0
   132f8:	bne	13304 <__assert_fail@plt+0x2530>
   132fc:	mov	r0, #1
   13300:	pop	{r4, r5, r6, pc}
   13304:	mov	r0, r5
   13308:	bl	12a20 <__assert_fail@plt+0x1c4c>
   1330c:	cmp	r6, #0
   13310:	beq	132c8 <__assert_fail@plt+0x24f4>
   13314:	ldr	r3, [r6, #16]
   13318:	str	r3, [r4]
   1331c:	mov	r3, #2
   13320:	strh	r3, [r4, #56]	; 0x38
   13324:	b	132fc <__assert_fail@plt+0x2528>
   13328:	add	r1, r1, #64	; 0x40
   1332c:	ldr	r0, [r0, #56]	; 0x38
   13330:	bl	16218 <__assert_fail@plt+0x5444>
   13334:	cmp	r0, #0
   13338:	beq	132fc <__assert_fail@plt+0x2528>
   1333c:	mov	r3, #2
   13340:	str	r4, [r4]
   13344:	strh	r3, [r4, #56]	; 0x38
   13348:	pop	{r4, r5, r6, pc}
   1334c:	ldr	r3, [r0, #48]	; 0x30
   13350:	mov	r2, r1
   13354:	movw	r1, #258	; 0x102
   13358:	push	{r4, r5, lr}
   1335c:	sub	sp, sp, #28
   13360:	tst	r1, r3
   13364:	beq	1339c <__assert_fail@plt+0x25c8>
   13368:	ldrd	r4, [r2, #64]	; 0x40
   1336c:	mov	r1, sp
   13370:	ldrd	r2, [r2, #160]	; 0xa0
   13374:	ldr	r0, [r0, #56]	; 0x38
   13378:	strd	r4, [sp]
   1337c:	strd	r2, [sp, #8]
   13380:	bl	15e28 <__assert_fail@plt+0x5054>
   13384:	cmp	r0, #0
   13388:	bne	13390 <__assert_fail@plt+0x25bc>
   1338c:	bl	10d98 <abort@plt>
   13390:	bl	12a20 <__assert_fail@plt+0x1c4c>
   13394:	add	sp, sp, #28
   13398:	pop	{r4, r5, pc}
   1339c:	ldr	ip, [r2, #4]
   133a0:	cmp	ip, #0
   133a4:	beq	13394 <__assert_fail@plt+0x25c0>
   133a8:	ldr	r3, [ip, #48]	; 0x30
   133ac:	cmp	r3, #0
   133b0:	blt	13394 <__assert_fail@plt+0x25c0>
   133b4:	ldr	r3, [r0, #56]	; 0x38
   133b8:	ldrd	r0, [r3, #16]
   133bc:	orrs	r1, r0, r1
   133c0:	beq	1338c <__assert_fail@plt+0x25b8>
   133c4:	ldrd	r4, [r3]
   133c8:	ldrd	r0, [r2, #160]	; 0xa0
   133cc:	cmp	r5, r1
   133d0:	cmpeq	r4, r0
   133d4:	bne	13394 <__assert_fail@plt+0x25c0>
   133d8:	ldrd	r0, [r3, #8]
   133dc:	ldrd	r4, [r2, #64]	; 0x40
   133e0:	cmp	r1, r5
   133e4:	cmpeq	r0, r4
   133e8:	ldrdeq	r0, [ip, #64]	; 0x40
   133ec:	strdeq	r0, [r3, #8]
   133f0:	ldrdeq	r0, [ip, #160]	; 0xa0
   133f4:	strdeq	r0, [r3]
   133f8:	b	13394 <__assert_fail@plt+0x25c0>
   133fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13400:	sub	sp, sp, #60	; 0x3c
   13404:	mov	r4, r0
   13408:	ldr	r5, [r0]
   1340c:	str	r1, [sp, #8]
   13410:	ldr	r3, [r5, #12]
   13414:	cmp	r3, #0
   13418:	str	r3, [sp]
   1341c:	beq	13470 <__assert_fail@plt+0x269c>
   13420:	mov	r0, r3
   13424:	bl	10d2c <dirfd@plt>
   13428:	cmp	r0, #0
   1342c:	str	r0, [sp, #52]	; 0x34
   13430:	bge	134e0 <__assert_fail@plt+0x270c>
   13434:	mov	r6, #0
   13438:	ldr	r0, [r5, #12]
   1343c:	bl	10dbc <closedir@plt>
   13440:	str	r6, [r5, #12]
   13444:	ldr	r3, [sp, #8]
   13448:	cmp	r3, #3
   1344c:	bne	13668 <__assert_fail@plt+0x2894>
   13450:	mov	r3, #4
   13454:	strh	r3, [r5, #56]	; 0x38
   13458:	bl	10cc0 <__errno_location@plt>
   1345c:	ldr	r3, [r0]
   13460:	str	r3, [r5, #32]
   13464:	mov	r0, r6
   13468:	add	sp, sp, #60	; 0x3c
   1346c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13470:	ldr	r3, [r0, #48]	; 0x30
   13474:	ldr	r1, [r5, #24]
   13478:	and	r2, r3, #516	; 0x204
   1347c:	cmp	r2, #512	; 0x200
   13480:	ldreq	r0, [r0, #32]
   13484:	mvnne	r0, #99	; 0x63
   13488:	ands	r2, r3, #16
   1348c:	beq	134a8 <__assert_fail@plt+0x26d4>
   13490:	tst	r3, #1
   13494:	moveq	r2, #32768	; 0x8000
   13498:	beq	134a8 <__assert_fail@plt+0x26d4>
   1349c:	ldr	r2, [r5, #48]	; 0x30
   134a0:	cmp	r2, #0
   134a4:	movne	r2, #32768	; 0x8000
   134a8:	add	r3, sp, #52	; 0x34
   134ac:	bl	160ac <__assert_fail@plt+0x52d8>
   134b0:	cmp	r0, #0
   134b4:	mov	r6, r0
   134b8:	str	r0, [r5, #12]
   134bc:	beq	13444 <__assert_fail@plt+0x2670>
   134c0:	ldrh	r3, [r5, #56]	; 0x38
   134c4:	cmp	r3, #11
   134c8:	bne	13670 <__assert_fail@plt+0x289c>
   134cc:	mov	r2, #0
   134d0:	mov	r1, r5
   134d4:	mov	r0, r4
   134d8:	bl	12b38 <__assert_fail@plt+0x1d64>
   134dc:	strh	r0, [r5, #56]	; 0x38
   134e0:	ldr	r3, [r4, #44]	; 0x2c
   134e4:	cmp	r3, #0
   134e8:	ldr	r3, [pc, #1812]	; 13c04 <__assert_fail@plt+0x2e30>
   134ec:	mvnne	r3, #0
   134f0:	str	r3, [sp, #36]	; 0x24
   134f4:	ldr	r3, [sp]
   134f8:	cmp	r3, #0
   134fc:	beq	136bc <__assert_fail@plt+0x28e8>
   13500:	mov	r3, #1
   13504:	str	r3, [sp, #24]
   13508:	ldr	r2, [r5, #28]
   1350c:	mov	r8, #0
   13510:	mov	r9, r8
   13514:	mov	r6, r8
   13518:	ldr	r3, [r5, #40]	; 0x28
   1351c:	str	r8, [sp, #20]
   13520:	str	r8, [sp, #32]
   13524:	sub	fp, r3, #1
   13528:	ldrb	r2, [r2, fp]
   1352c:	cmp	r2, #47	; 0x2f
   13530:	movne	fp, r3
   13534:	ldr	r3, [r4, #48]	; 0x30
   13538:	ands	r3, r3, #4
   1353c:	ldrne	r3, [r4, #24]
   13540:	streq	r3, [sp, #4]
   13544:	addne	r2, r3, fp
   13548:	addne	r2, r2, #1
   1354c:	strne	r2, [sp, #4]
   13550:	movne	r2, #47	; 0x2f
   13554:	strbne	r2, [r3, fp]
   13558:	add	r3, fp, #1
   1355c:	add	r2, fp, #1
   13560:	str	r3, [sp, #16]
   13564:	ldr	r3, [r4, #36]	; 0x24
   13568:	sub	r3, r3, r2
   1356c:	str	r3, [sp, #28]
   13570:	ldr	r3, [r5, #48]	; 0x30
   13574:	add	r3, r3, #1
   13578:	str	r3, [sp, #40]	; 0x28
   1357c:	ldr	r7, [r5, #12]
   13580:	cmp	r7, #0
   13584:	beq	135d0 <__assert_fail@plt+0x27fc>
   13588:	bl	10cc0 <__errno_location@plt>
   1358c:	mov	r3, #0
   13590:	str	r0, [sp, #12]
   13594:	str	r3, [r0]
   13598:	mov	r0, r7
   1359c:	bl	10d14 <readdir64@plt>
   135a0:	subs	r3, r0, #0
   135a4:	bne	13800 <__assert_fail@plt+0x2a2c>
   135a8:	ldr	r3, [sp, #12]
   135ac:	ldr	r3, [r3]
   135b0:	cmp	r3, #0
   135b4:	beq	135d0 <__assert_fail@plt+0x27fc>
   135b8:	str	r3, [r5, #32]
   135bc:	ldr	r3, [sp]
   135c0:	orrs	r3, r3, r9
   135c4:	moveq	r3, #4
   135c8:	movne	r3, #7
   135cc:	strh	r3, [r5, #56]	; 0x38
   135d0:	ldr	r0, [r5, #12]
   135d4:	cmp	r0, #0
   135d8:	beq	135e8 <__assert_fail@plt+0x2814>
   135dc:	bl	10dbc <closedir@plt>
   135e0:	mov	r3, #0
   135e4:	str	r3, [r5, #12]
   135e8:	ldr	r3, [sp, #20]
   135ec:	cmp	r3, #0
   135f0:	bne	13ac0 <__assert_fail@plt+0x2cec>
   135f4:	ldr	r3, [r4, #48]	; 0x30
   135f8:	tst	r3, #4
   135fc:	bne	13b3c <__assert_fail@plt+0x2d68>
   13600:	ldr	r2, [sp]
   13604:	ldr	r3, [sp, #24]
   13608:	cmp	r2, #0
   1360c:	movne	r3, #0
   13610:	cmp	r3, #0
   13614:	beq	13b80 <__assert_fail@plt+0x2dac>
   13618:	ldr	r3, [sp, #8]
   1361c:	cmp	r9, #0
   13620:	cmpne	r3, #1
   13624:	bne	13bac <__assert_fail@plt+0x2dd8>
   13628:	ldr	r3, [r5, #48]	; 0x30
   1362c:	cmp	r3, #0
   13630:	bne	13b68 <__assert_fail@plt+0x2d94>
   13634:	mov	r0, r4
   13638:	bl	12fac <__assert_fail@plt+0x21d8>
   1363c:	adds	r0, r0, #0
   13640:	movne	r0, #1
   13644:	cmp	r0, #0
   13648:	beq	13b80 <__assert_fail@plt+0x2dac>
   1364c:	mov	r3, #7
   13650:	strh	r3, [r5, #56]	; 0x38
   13654:	ldr	r3, [r4, #48]	; 0x30
   13658:	orr	r3, r3, #8192	; 0x2000
   1365c:	str	r3, [r4, #48]	; 0x30
   13660:	mov	r0, r6
   13664:	bl	12dd0 <__assert_fail@plt+0x1ffc>
   13668:	mov	r6, #0
   1366c:	b	13464 <__assert_fail@plt+0x2690>
   13670:	ldr	r3, [r4, #48]	; 0x30
   13674:	tst	r3, #256	; 0x100
   13678:	beq	134e0 <__assert_fail@plt+0x270c>
   1367c:	mov	r1, r5
   13680:	mov	r0, r4
   13684:	bl	1334c <__assert_fail@plt+0x2578>
   13688:	mov	r2, #0
   1368c:	mov	r1, r5
   13690:	mov	r0, r4
   13694:	bl	12b38 <__assert_fail@plt+0x1d64>
   13698:	mov	r1, r5
   1369c:	mov	r0, r4
   136a0:	bl	1329c <__assert_fail@plt+0x24c8>
   136a4:	subs	r6, r0, #0
   136a8:	bne	134e0 <__assert_fail@plt+0x270c>
   136ac:	bl	10cc0 <__errno_location@plt>
   136b0:	mov	r3, #12
   136b4:	str	r3, [r0]
   136b8:	b	13464 <__assert_fail@plt+0x2690>
   136bc:	ldr	r3, [sp, #8]
   136c0:	cmp	r3, #2
   136c4:	ldreq	r0, [sp]
   136c8:	beq	1373c <__assert_fail@plt+0x2968>
   136cc:	ldr	r3, [r4, #48]	; 0x30
   136d0:	and	r3, r3, #56	; 0x38
   136d4:	cmp	r3, #24
   136d8:	bne	13718 <__assert_fail@plt+0x2944>
   136dc:	ldr	r3, [r5, #84]	; 0x54
   136e0:	cmp	r3, #2
   136e4:	bne	13718 <__assert_fail@plt+0x2944>
   136e8:	mov	r0, r5
   136ec:	ldr	r1, [sp, #52]	; 0x34
   136f0:	bl	12e34 <__assert_fail@plt+0x2060>
   136f4:	movw	r3, #26985	; 0x6969
   136f8:	cmp	r0, r3
   136fc:	beq	13718 <__assert_fail@plt+0x2944>
   13700:	bgt	13720 <__assert_fail@plt+0x294c>
   13704:	ldr	r3, [pc, #1276]	; 13c08 <__assert_fail@plt+0x2e34>
   13708:	cmp	r0, r3
   1370c:	clzne	r0, r0
   13710:	lsrne	r0, r0, #5
   13714:	bne	1373c <__assert_fail@plt+0x2968>
   13718:	mov	r0, #1
   1371c:	b	1373c <__assert_fail@plt+0x2968>
   13720:	movw	r3, #40864	; 0x9fa0
   13724:	cmp	r0, r3
   13728:	beq	13718 <__assert_fail@plt+0x2944>
   1372c:	ldr	r3, [pc, #1240]	; 13c0c <__assert_fail@plt+0x2e38>
   13730:	sub	r0, r0, r3
   13734:	clz	r0, r0
   13738:	lsr	r0, r0, #5
   1373c:	ldr	r3, [sp, #8]
   13740:	mov	r6, r0
   13744:	sub	r7, r3, #3
   13748:	clz	r7, r7
   1374c:	lsr	r7, r7, #5
   13750:	orrs	r3, r7, r0
   13754:	str	r3, [sp, #24]
   13758:	beq	13508 <__assert_fail@plt+0x2734>
   1375c:	ldr	r3, [r4, #48]	; 0x30
   13760:	tst	r3, #512	; 0x200
   13764:	beq	1377c <__assert_fail@plt+0x29a8>
   13768:	mov	r2, #3
   1376c:	movw	r1, #1030	; 0x406
   13770:	ldr	r0, [sp, #52]	; 0x34
   13774:	bl	162c8 <__assert_fail@plt+0x54f4>
   13778:	str	r0, [sp, #52]	; 0x34
   1377c:	ldr	r2, [sp, #52]	; 0x34
   13780:	cmp	r2, #0
   13784:	bge	137d4 <__assert_fail@plt+0x2a00>
   13788:	tst	r7, r6
   1378c:	bne	137f0 <__assert_fail@plt+0x2a1c>
   13790:	ldrh	r3, [r5, #58]	; 0x3a
   13794:	ldr	r0, [r5, #12]
   13798:	orr	r3, r3, #1
   1379c:	strh	r3, [r5, #58]	; 0x3a
   137a0:	bl	10dbc <closedir@plt>
   137a4:	mov	r3, #0
   137a8:	str	r3, [r5, #12]
   137ac:	ldr	r3, [r4, #48]	; 0x30
   137b0:	tst	r3, #512	; 0x200
   137b4:	beq	137c8 <__assert_fail@plt+0x29f4>
   137b8:	ldr	r0, [sp, #52]	; 0x34
   137bc:	cmp	r0, #0
   137c0:	blt	137c8 <__assert_fail@plt+0x29f4>
   137c4:	bl	10da4 <close@plt>
   137c8:	mov	r3, #0
   137cc:	str	r3, [r5, #12]
   137d0:	b	13504 <__assert_fail@plt+0x2730>
   137d4:	mov	r3, #0
   137d8:	mov	r1, r5
   137dc:	mov	r0, r4
   137e0:	bl	12ffc <__assert_fail@plt+0x2228>
   137e4:	cmp	r0, #0
   137e8:	bne	13788 <__assert_fail@plt+0x29b4>
   137ec:	b	13500 <__assert_fail@plt+0x272c>
   137f0:	bl	10cc0 <__errno_location@plt>
   137f4:	ldr	r3, [r0]
   137f8:	str	r3, [r5, #32]
   137fc:	b	13790 <__assert_fail@plt+0x29bc>
   13800:	ldr	r2, [r4, #48]	; 0x30
   13804:	tst	r2, #32
   13808:	bne	13830 <__assert_fail@plt+0x2a5c>
   1380c:	ldrb	r2, [r3, #19]
   13810:	cmp	r2, #46	; 0x2e
   13814:	bne	13830 <__assert_fail@plt+0x2a5c>
   13818:	ldrb	r2, [r3, #20]
   1381c:	cmp	r2, #0
   13820:	beq	1357c <__assert_fail@plt+0x27a8>
   13824:	ldrh	r2, [r3, #20]
   13828:	cmp	r2, #46	; 0x2e
   1382c:	beq	1357c <__assert_fail@plt+0x27a8>
   13830:	add	r7, r3, #19
   13834:	str	r3, [sp, #44]	; 0x2c
   13838:	mov	r0, r7
   1383c:	bl	10c90 <strlen@plt>
   13840:	mov	r2, r0
   13844:	mov	r1, r7
   13848:	mov	sl, r0
   1384c:	mov	r0, r4
   13850:	bl	12d28 <__assert_fail@plt+0x1f54>
   13854:	subs	r7, r0, #0
   13858:	beq	13894 <__assert_fail@plt+0x2ac0>
   1385c:	ldr	r3, [sp, #28]
   13860:	cmp	r3, sl
   13864:	ldr	r3, [sp, #44]	; 0x2c
   13868:	bhi	13914 <__assert_fail@plt+0x2b40>
   1386c:	ldr	r2, [r4, #24]
   13870:	add	r1, fp, #2
   13874:	mov	r0, r4
   13878:	add	r1, r1, sl
   1387c:	str	r2, [sp, #28]
   13880:	bl	13198 <__assert_fail@plt+0x23c4>
   13884:	cmp	r0, #0
   13888:	ldr	r2, [sp, #28]
   1388c:	ldr	r3, [sp, #44]	; 0x2c
   13890:	bne	138dc <__assert_fail@plt+0x2b08>
   13894:	ldr	r3, [sp, #12]
   13898:	mov	r0, r7
   1389c:	ldr	r8, [r3]
   138a0:	bl	12a20 <__assert_fail@plt+0x1c4c>
   138a4:	mov	r0, r6
   138a8:	mov	r6, #0
   138ac:	bl	12dd0 <__assert_fail@plt+0x1ffc>
   138b0:	ldr	r0, [r5, #12]
   138b4:	bl	10dbc <closedir@plt>
   138b8:	mov	r3, #7
   138bc:	str	r6, [r5, #12]
   138c0:	strh	r3, [r5, #56]	; 0x38
   138c4:	ldr	r3, [r4, #48]	; 0x30
   138c8:	orr	r3, r3, #8192	; 0x2000
   138cc:	str	r3, [r4, #48]	; 0x30
   138d0:	ldr	r3, [sp, #12]
   138d4:	str	r8, [r3]
   138d8:	b	13464 <__assert_fail@plt+0x2690>
   138dc:	ldr	r1, [r4, #24]
   138e0:	cmp	r1, r2
   138e4:	ldreq	r0, [sp, #20]
   138e8:	beq	13900 <__assert_fail@plt+0x2b2c>
   138ec:	ldr	r2, [r4, #48]	; 0x30
   138f0:	tst	r2, #4
   138f4:	ldrne	r2, [sp, #16]
   138f8:	addne	r2, r1, r2
   138fc:	strne	r2, [sp, #4]
   13900:	ldr	r1, [sp, #16]
   13904:	str	r0, [sp, #20]
   13908:	ldr	r2, [r4, #36]	; 0x24
   1390c:	sub	r2, r2, r1
   13910:	str	r2, [sp, #28]
   13914:	ldr	r2, [sp, #16]
   13918:	adds	r2, r2, sl
   1391c:	movcs	sl, #1
   13920:	movcc	sl, #0
   13924:	bcc	1396c <__assert_fail@plt+0x2b98>
   13928:	mov	r0, r7
   1392c:	bl	12a20 <__assert_fail@plt+0x1c4c>
   13930:	mov	r0, r6
   13934:	mov	r6, #0
   13938:	bl	12dd0 <__assert_fail@plt+0x1ffc>
   1393c:	ldr	r0, [r5, #12]
   13940:	bl	10dbc <closedir@plt>
   13944:	mov	r3, #7
   13948:	ldr	r2, [sp, #12]
   1394c:	str	r6, [r5, #12]
   13950:	strh	r3, [r5, #56]	; 0x38
   13954:	ldr	r3, [r4, #48]	; 0x30
   13958:	orr	r3, r3, #8192	; 0x2000
   1395c:	str	r3, [r4, #48]	; 0x30
   13960:	mov	r3, #36	; 0x24
   13964:	str	r3, [r2]
   13968:	b	13464 <__assert_fail@plt+0x2690>
   1396c:	ldr	r1, [sp, #40]	; 0x28
   13970:	str	r1, [r7, #48]	; 0x30
   13974:	ldr	r1, [r4]
   13978:	str	r1, [r7, #4]
   1397c:	str	r2, [r7, #40]	; 0x28
   13980:	ldrd	r0, [r3]
   13984:	ldr	r2, [r4, #48]	; 0x30
   13988:	strd	r0, [r7, #160]	; 0xa0
   1398c:	add	r1, r7, #168	; 0xa8
   13990:	tst	r2, #4
   13994:	streq	r1, [r7, #24]
   13998:	beq	139bc <__assert_fail@plt+0x2be8>
   1399c:	ldr	r2, [r7, #28]
   139a0:	str	r3, [sp, #12]
   139a4:	ldr	r0, [sp, #4]
   139a8:	str	r2, [r7, #24]
   139ac:	ldr	r2, [r7, #52]	; 0x34
   139b0:	add	r2, r2, #1
   139b4:	bl	10bac <memmove@plt>
   139b8:	ldr	r3, [sp, #12]
   139bc:	ldr	r2, [r4, #44]	; 0x2c
   139c0:	ldr	r1, [r4, #48]	; 0x30
   139c4:	cmp	r2, #0
   139c8:	beq	139d4 <__assert_fail@plt+0x2c00>
   139cc:	ands	r2, r1, #1024	; 0x400
   139d0:	beq	13aa4 <__assert_fail@plt+0x2cd0>
   139d4:	ands	r2, r1, #8
   139d8:	ldrb	r3, [r3, #18]
   139dc:	beq	139f8 <__assert_fail@plt+0x2c24>
   139e0:	ands	r2, r3, #251	; 0xfb
   139e4:	beq	139f8 <__assert_fail@plt+0x2c24>
   139e8:	ubfx	r1, r1, #4, #1
   139ec:	cmp	r3, #10
   139f0:	moveq	r2, r1
   139f4:	orrne	r2, r1, #1
   139f8:	mov	r1, #11
   139fc:	sub	r3, r3, #1
   13a00:	cmp	r3, r1
   13a04:	strh	r1, [r7, #56]	; 0x38
   13a08:	lslls	r3, r3, #1
   13a0c:	ldrls	r1, [pc, #508]	; 13c10 <__assert_fail@plt+0x2e3c>
   13a10:	ldrhls	sl, [r1, r3]
   13a14:	cmp	r2, #0
   13a18:	mov	r3, #0
   13a1c:	movne	r2, #1
   13a20:	moveq	r2, #2
   13a24:	str	sl, [r7, #80]	; 0x50
   13a28:	strd	r2, [r7, #112]	; 0x70
   13a2c:	mov	r3, #0
   13a30:	cmp	r6, r3
   13a34:	str	r3, [r7, #8]
   13a38:	moveq	r6, r7
   13a3c:	ldrne	r3, [sp, #32]
   13a40:	strne	r7, [r3, #8]
   13a44:	movw	r3, #10000	; 0x2710
   13a48:	cmp	r9, r3
   13a4c:	bne	13a8c <__assert_fail@plt+0x2cb8>
   13a50:	ldr	sl, [r4, #44]	; 0x2c
   13a54:	cmp	sl, #0
   13a58:	bne	13a8c <__assert_fail@plt+0x2cb8>
   13a5c:	mov	r0, r5
   13a60:	ldr	r1, [sp, #52]	; 0x34
   13a64:	bl	12e34 <__assert_fail@plt+0x2060>
   13a68:	movw	r3, #26985	; 0x6969
   13a6c:	cmp	r0, r3
   13a70:	beq	13ab8 <__assert_fail@plt+0x2ce4>
   13a74:	ldr	r3, [pc, #408]	; 13c14 <__assert_fail@plt+0x2e40>
   13a78:	cmp	r0, r3
   13a7c:	beq	13ab8 <__assert_fail@plt+0x2ce4>
   13a80:	ldr	r3, [pc, #384]	; 13c08 <__assert_fail@plt+0x2e34>
   13a84:	subs	r8, r0, r3
   13a88:	movne	r8, #1
   13a8c:	ldr	r3, [sp, #36]	; 0x24
   13a90:	add	r9, r9, #1
   13a94:	cmp	r3, r9
   13a98:	bls	135e8 <__assert_fail@plt+0x2814>
   13a9c:	str	r7, [sp, #32]
   13aa0:	b	1357c <__assert_fail@plt+0x27a8>
   13aa4:	mov	r1, r7
   13aa8:	mov	r0, r4
   13aac:	bl	12b38 <__assert_fail@plt+0x1d64>
   13ab0:	strh	r0, [r7, #56]	; 0x38
   13ab4:	b	13a2c <__assert_fail@plt+0x2c58>
   13ab8:	mov	r8, sl
   13abc:	b	13a8c <__assert_fail@plt+0x2cb8>
   13ac0:	ldr	r3, [r4, #4]
   13ac4:	ldr	r1, [r4, #24]
   13ac8:	cmp	r3, #0
   13acc:	bne	13b14 <__assert_fail@plt+0x2d40>
   13ad0:	mov	r3, r6
   13ad4:	ldr	r2, [r3, #48]	; 0x30
   13ad8:	cmp	r2, #0
   13adc:	blt	135f4 <__assert_fail@plt+0x2820>
   13ae0:	ldr	r2, [r3, #24]
   13ae4:	add	r0, r3, #168	; 0xa8
   13ae8:	cmp	r2, r0
   13aec:	ldrne	r0, [r3, #28]
   13af0:	str	r1, [r3, #28]
   13af4:	subne	r2, r2, r0
   13af8:	addne	r2, r1, r2
   13afc:	strne	r2, [r3, #24]
   13b00:	ldr	r2, [r3, #8]
   13b04:	cmp	r2, #0
   13b08:	ldreq	r2, [r3, #4]
   13b0c:	mov	r3, r2
   13b10:	b	13ad4 <__assert_fail@plt+0x2d00>
   13b14:	ldr	r2, [r3, #24]
   13b18:	add	r0, r3, #168	; 0xa8
   13b1c:	cmp	r2, r0
   13b20:	ldrne	r0, [r3, #28]
   13b24:	str	r1, [r3, #28]
   13b28:	subne	r2, r2, r0
   13b2c:	addne	r2, r1, r2
   13b30:	strne	r2, [r3, #24]
   13b34:	ldr	r3, [r3, #8]
   13b38:	b	13ac8 <__assert_fail@plt+0x2cf4>
   13b3c:	ldr	r2, [sp, #16]
   13b40:	ldr	r3, [r4, #36]	; 0x24
   13b44:	cmp	r9, #0
   13b48:	cmpne	r3, r2
   13b4c:	ldreq	r3, [sp, #4]
   13b50:	subeq	r3, r3, #1
   13b54:	streq	r3, [sp, #4]
   13b58:	mov	r3, #0
   13b5c:	ldr	r2, [sp, #4]
   13b60:	strb	r3, [r2]
   13b64:	b	13600 <__assert_fail@plt+0x282c>
   13b68:	ldr	r3, [pc, #168]	; 13c18 <__assert_fail@plt+0x2e44>
   13b6c:	mvn	r2, #0
   13b70:	mov	r0, r4
   13b74:	ldr	r1, [r5, #4]
   13b78:	bl	12ffc <__assert_fail@plt+0x2228>
   13b7c:	b	1363c <__assert_fail@plt+0x2868>
   13b80:	cmp	r9, #0
   13b84:	bne	13bac <__assert_fail@plt+0x2dd8>
   13b88:	ldr	r3, [sp, #8]
   13b8c:	cmp	r3, #3
   13b90:	bne	13660 <__assert_fail@plt+0x288c>
   13b94:	ldrh	r3, [r5, #56]	; 0x38
   13b98:	cmp	r3, #4
   13b9c:	cmpne	r3, #7
   13ba0:	movne	r3, #6
   13ba4:	strhne	r3, [r5, #56]	; 0x38
   13ba8:	b	13660 <__assert_fail@plt+0x288c>
   13bac:	cmp	r8, #0
   13bb0:	beq	13bdc <__assert_fail@plt+0x2e08>
   13bb4:	ldr	r3, [pc, #96]	; 13c1c <__assert_fail@plt+0x2e48>
   13bb8:	mov	r1, r6
   13bbc:	mov	r2, r9
   13bc0:	mov	r0, r4
   13bc4:	str	r3, [r4, #44]	; 0x2c
   13bc8:	bl	12c70 <__assert_fail@plt+0x1e9c>
   13bcc:	mov	r3, #0
   13bd0:	mov	r6, r0
   13bd4:	str	r3, [r4, #44]	; 0x2c
   13bd8:	b	13464 <__assert_fail@plt+0x2690>
   13bdc:	ldr	r3, [r4, #44]	; 0x2c
   13be0:	cmp	r3, #0
   13be4:	cmpne	r9, #1
   13be8:	beq	13464 <__assert_fail@plt+0x2690>
   13bec:	mov	r1, r6
   13bf0:	mov	r2, r9
   13bf4:	mov	r0, r4
   13bf8:	bl	12c70 <__assert_fail@plt+0x1e9c>
   13bfc:	mov	r6, r0
   13c00:	b	13464 <__assert_fail@plt+0x2690>
   13c04:	andeq	r8, r1, r0, lsr #13
   13c08:			; <UNDEFINED> instruction: 0xff534d42
   13c0c:	movtpl	r4, #24911	; 0x614f
   13c10:	ldrdeq	r6, [r1], -lr
   13c14:			; <UNDEFINED> instruction: 0x01021994
   13c18:	strdeq	r6, [r1], -r6	; <UNPREDICTABLE>
   13c1c:	andeq	r2, r1, r4, lsl #22
   13c20:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c24:	bic	r4, r1, #4080	; 0xff0
   13c28:	bic	r4, r4, #15
   13c2c:	cmp	r4, #0
   13c30:	str	r0, [sp]
   13c34:	beq	13c4c <__assert_fail@plt+0x2e78>
   13c38:	bl	10cc0 <__errno_location@plt>
   13c3c:	mov	r3, #22
   13c40:	str	r3, [r0]
   13c44:	mov	r4, #0
   13c48:	b	13c68 <__assert_fail@plt+0x2e94>
   13c4c:	and	r3, r1, #516	; 0x204
   13c50:	mov	r6, r1
   13c54:	cmp	r3, #516	; 0x204
   13c58:	bne	13c74 <__assert_fail@plt+0x2ea0>
   13c5c:	bl	10cc0 <__errno_location@plt>
   13c60:	mov	r3, #22
   13c64:	str	r3, [r0]
   13c68:	mov	r0, r4
   13c6c:	add	sp, sp, #12
   13c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c74:	ands	r4, r1, #18
   13c78:	beq	13c5c <__assert_fail@plt+0x2e88>
   13c7c:	mov	r1, #96	; 0x60
   13c80:	mov	r0, #1
   13c84:	mov	sl, r2
   13c88:	bl	16138 <__assert_fail@plt+0x5364>
   13c8c:	subs	r4, r0, #0
   13c90:	beq	13c68 <__assert_fail@plt+0x2e94>
   13c94:	tst	r6, #2
   13c98:	mov	r5, #0
   13c9c:	str	sl, [r4, #44]	; 0x2c
   13ca0:	bicne	r3, r6, #512	; 0x200
   13ca4:	orrne	r3, r3, #4
   13ca8:	streq	r6, [r4, #48]	; 0x30
   13cac:	strne	r3, [r4, #48]	; 0x30
   13cb0:	mvn	r3, #99	; 0x63
   13cb4:	str	r3, [r4, #32]
   13cb8:	ldr	r3, [sp]
   13cbc:	sub	r8, r3, #4
   13cc0:	ldr	r7, [r8, #4]!
   13cc4:	cmp	r7, #0
   13cc8:	bne	13dec <__assert_fail@plt+0x3018>
   13ccc:	add	r1, r5, #1
   13cd0:	mov	r0, r4
   13cd4:	cmp	r1, #4096	; 0x1000
   13cd8:	movcc	r1, #4096	; 0x1000
   13cdc:	bl	13198 <__assert_fail@plt+0x23c4>
   13ce0:	cmp	r0, #0
   13ce4:	beq	13efc <__assert_fail@plt+0x3128>
   13ce8:	ldr	r3, [sp]
   13cec:	ldr	r8, [r3]
   13cf0:	cmp	r8, #0
   13cf4:	beq	13d18 <__assert_fail@plt+0x2f44>
   13cf8:	mov	r2, r7
   13cfc:	ldr	r1, [pc, #516]	; 13f08 <__assert_fail@plt+0x3134>
   13d00:	mov	r0, r4
   13d04:	bl	12d28 <__assert_fail@plt+0x1f54>
   13d08:	subs	r8, r0, #0
   13d0c:	beq	13ef4 <__assert_fail@plt+0x3120>
   13d10:	mvn	r3, #0
   13d14:	str	r3, [r8, #48]	; 0x30
   13d18:	cmp	sl, #0
   13d1c:	eor	r6, r6, #2048	; 0x800
   13d20:	ldrne	r3, [r4, #48]	; 0x30
   13d24:	mov	fp, #0
   13d28:	ubfx	r6, r6, #11, #1
   13d2c:	moveq	r3, #1
   13d30:	mov	r7, fp
   13d34:	mov	r9, fp
   13d38:	ubfxne	r3, r3, #10, #1
   13d3c:	str	r3, [sp, #4]
   13d40:	ldr	r3, [sp]
   13d44:	ldr	r5, [r3, r9, lsl #2]
   13d48:	cmp	r5, #0
   13d4c:	bne	13e00 <__assert_fail@plt+0x302c>
   13d50:	cmp	sl, #0
   13d54:	cmpne	r9, #1
   13d58:	bls	13d70 <__assert_fail@plt+0x2f9c>
   13d5c:	mov	r1, r7
   13d60:	mov	r2, r9
   13d64:	mov	r0, r4
   13d68:	bl	12c70 <__assert_fail@plt+0x1e9c>
   13d6c:	mov	r7, r0
   13d70:	mov	r2, #0
   13d74:	ldr	r1, [pc, #396]	; 13f08 <__assert_fail@plt+0x3134>
   13d78:	mov	r0, r4
   13d7c:	bl	12d28 <__assert_fail@plt+0x1f54>
   13d80:	cmp	r0, #0
   13d84:	str	r0, [r4]
   13d88:	beq	13ee4 <__assert_fail@plt+0x3110>
   13d8c:	mov	r3, #9
   13d90:	str	r7, [r0, #8]
   13d94:	strh	r3, [r0, #56]	; 0x38
   13d98:	mov	r3, #1
   13d9c:	str	r3, [r0, #48]	; 0x30
   13da0:	mov	r0, r4
   13da4:	bl	13200 <__assert_fail@plt+0x242c>
   13da8:	cmp	r0, #0
   13dac:	beq	13ee4 <__assert_fail@plt+0x3110>
   13db0:	ldr	r3, [r4, #48]	; 0x30
   13db4:	tst	r3, #516	; 0x204
   13db8:	bne	13ddc <__assert_fail@plt+0x3008>
   13dbc:	ldr	r1, [pc, #328]	; 13f0c <__assert_fail@plt+0x3138>
   13dc0:	mov	r0, r4
   13dc4:	bl	12d9c <__assert_fail@plt+0x1fc8>
   13dc8:	cmp	r0, #0
   13dcc:	str	r0, [r4, #28]
   13dd0:	ldrlt	r3, [r4, #48]	; 0x30
   13dd4:	orrlt	r3, r3, #4
   13dd8:	strlt	r3, [r4, #48]	; 0x30
   13ddc:	mvn	r1, #0
   13de0:	add	r0, r4, #60	; 0x3c
   13de4:	bl	15f24 <__assert_fail@plt+0x5150>
   13de8:	b	13c68 <__assert_fail@plt+0x2e94>
   13dec:	mov	r0, r7
   13df0:	bl	10c90 <strlen@plt>
   13df4:	cmp	r5, r0
   13df8:	movcc	r5, r0
   13dfc:	b	13cc0 <__assert_fail@plt+0x2eec>
   13e00:	mov	r0, r5
   13e04:	bl	10c90 <strlen@plt>
   13e08:	cmp	r0, #2
   13e0c:	movls	r1, #0
   13e10:	andhi	r1, r6, #1
   13e14:	mov	r2, r0
   13e18:	cmp	r1, #0
   13e1c:	beq	13e34 <__assert_fail@plt+0x3060>
   13e20:	add	r1, r5, r0
   13e24:	ldrb	r1, [r1, #-1]
   13e28:	cmp	r1, #47	; 0x2f
   13e2c:	subeq	r0, r5, #2
   13e30:	beq	13ec0 <__assert_fail@plt+0x30ec>
   13e34:	mov	r1, r5
   13e38:	mov	r0, r4
   13e3c:	bl	12d28 <__assert_fail@plt+0x1f54>
   13e40:	subs	r5, r0, #0
   13e44:	beq	13ee4 <__assert_fail@plt+0x3110>
   13e48:	mov	r2, #0
   13e4c:	cmp	r7, #0
   13e50:	str	r8, [r5, #4]
   13e54:	str	r2, [r5, #48]	; 0x30
   13e58:	add	r2, r5, #168	; 0xa8
   13e5c:	str	r2, [r5, #24]
   13e60:	ldr	r2, [sp, #4]
   13e64:	moveq	r2, #0
   13e68:	cmp	r2, #0
   13e6c:	beq	13ed0 <__assert_fail@plt+0x30fc>
   13e70:	mov	r2, #11
   13e74:	mov	r0, #2
   13e78:	mov	r1, #0
   13e7c:	strh	r2, [r5, #56]	; 0x38
   13e80:	strd	r0, [r5, #112]	; 0x70
   13e84:	cmp	sl, #0
   13e88:	strne	r7, [r5, #8]
   13e8c:	bne	13ea8 <__assert_fail@plt+0x30d4>
   13e90:	cmp	r7, #0
   13e94:	str	sl, [r5, #8]
   13e98:	moveq	fp, r5
   13e9c:	strne	r5, [fp, #8]
   13ea0:	movne	fp, r5
   13ea4:	movne	r5, r7
   13ea8:	add	r9, r9, #1
   13eac:	mov	r7, r5
   13eb0:	b	13d40 <__assert_fail@plt+0x2f6c>
   13eb4:	sub	r2, r2, #1
   13eb8:	cmp	r2, #1
   13ebc:	beq	13e34 <__assert_fail@plt+0x3060>
   13ec0:	ldrb	r1, [r0, r2]
   13ec4:	cmp	r1, #47	; 0x2f
   13ec8:	beq	13eb4 <__assert_fail@plt+0x30e0>
   13ecc:	b	13e34 <__assert_fail@plt+0x3060>
   13ed0:	mov	r1, r5
   13ed4:	mov	r0, r4
   13ed8:	bl	12b38 <__assert_fail@plt+0x1d64>
   13edc:	strh	r0, [r5, #56]	; 0x38
   13ee0:	b	13e84 <__assert_fail@plt+0x30b0>
   13ee4:	mov	r0, r7
   13ee8:	bl	12dd0 <__assert_fail@plt+0x1ffc>
   13eec:	mov	r0, r8
   13ef0:	bl	12a20 <__assert_fail@plt+0x1c4c>
   13ef4:	ldr	r0, [r4, #24]
   13ef8:	bl	12a20 <__assert_fail@plt+0x1c4c>
   13efc:	mov	r0, r4
   13f00:	bl	12a20 <__assert_fail@plt+0x1c4c>
   13f04:	b	13c44 <__assert_fail@plt+0x2e70>
   13f08:	muleq	r1, sp, r8
   13f0c:	strdeq	r6, [r1], -r7
   13f10:	push	{r4, r5, r6, lr}
   13f14:	mov	r4, r0
   13f18:	ldr	r0, [r0]
   13f1c:	cmp	r0, #0
   13f20:	bne	13fb8 <__assert_fail@plt+0x31e4>
   13f24:	ldr	r0, [r4, #4]
   13f28:	cmp	r0, #0
   13f2c:	beq	13f34 <__assert_fail@plt+0x3160>
   13f30:	bl	12dd0 <__assert_fail@plt+0x1ffc>
   13f34:	ldr	r0, [r4, #8]
   13f38:	bl	12a20 <__assert_fail@plt+0x1c4c>
   13f3c:	ldr	r0, [r4, #24]
   13f40:	bl	12a20 <__assert_fail@plt+0x1c4c>
   13f44:	ldr	r3, [r4, #48]	; 0x30
   13f48:	tst	r3, #512	; 0x200
   13f4c:	beq	13fe4 <__assert_fail@plt+0x3210>
   13f50:	ldr	r0, [r4, #32]
   13f54:	cmp	r0, #0
   13f58:	bge	13fcc <__assert_fail@plt+0x31f8>
   13f5c:	mov	r5, #0
   13f60:	add	r0, r4, #60	; 0x3c
   13f64:	bl	12e04 <__assert_fail@plt+0x2030>
   13f68:	ldr	r0, [r4, #52]	; 0x34
   13f6c:	cmp	r0, #0
   13f70:	beq	13f78 <__assert_fail@plt+0x31a4>
   13f74:	bl	15a98 <__assert_fail@plt+0x4cc4>
   13f78:	mov	r0, r4
   13f7c:	bl	13274 <__assert_fail@plt+0x24a0>
   13f80:	mov	r0, r4
   13f84:	bl	12a20 <__assert_fail@plt+0x1c4c>
   13f88:	cmp	r5, #0
   13f8c:	beq	13f9c <__assert_fail@plt+0x31c8>
   13f90:	bl	10cc0 <__errno_location@plt>
   13f94:	str	r5, [r0]
   13f98:	mvn	r5, #0
   13f9c:	mov	r0, r5
   13fa0:	pop	{r4, r5, r6, pc}
   13fa4:	ldr	r5, [r0, #8]
   13fa8:	cmp	r5, #0
   13fac:	ldreq	r5, [r0, #4]
   13fb0:	bl	12a20 <__assert_fail@plt+0x1c4c>
   13fb4:	mov	r0, r5
   13fb8:	ldr	r3, [r0, #48]	; 0x30
   13fbc:	cmp	r3, #0
   13fc0:	bge	13fa4 <__assert_fail@plt+0x31d0>
   13fc4:	bl	12a20 <__assert_fail@plt+0x1c4c>
   13fc8:	b	13f24 <__assert_fail@plt+0x3150>
   13fcc:	bl	10da4 <close@plt>
   13fd0:	cmp	r0, #0
   13fd4:	beq	13f5c <__assert_fail@plt+0x3188>
   13fd8:	bl	10cc0 <__errno_location@plt>
   13fdc:	ldr	r5, [r0]
   13fe0:	b	13f60 <__assert_fail@plt+0x318c>
   13fe4:	tst	r3, #4
   13fe8:	bne	13f5c <__assert_fail@plt+0x3188>
   13fec:	ldr	r0, [r4, #28]
   13ff0:	bl	10d50 <fchdir@plt>
   13ff4:	subs	r5, r0, #0
   13ff8:	beq	14004 <__assert_fail@plt+0x3230>
   13ffc:	bl	10cc0 <__errno_location@plt>
   14000:	ldr	r5, [r0]
   14004:	ldr	r0, [r4, #28]
   14008:	bl	10da4 <close@plt>
   1400c:	adds	r0, r0, #0
   14010:	movne	r0, #1
   14014:	cmp	r5, #0
   14018:	movne	r0, #0
   1401c:	cmp	r0, #0
   14020:	beq	13f60 <__assert_fail@plt+0x318c>
   14024:	b	13fd8 <__assert_fail@plt+0x3204>
   14028:	push	{r4, r5, r6, r7, r8, lr}
   1402c:	ldr	r4, [r0]
   14030:	cmp	r4, #0
   14034:	bne	14044 <__assert_fail@plt+0x3270>
   14038:	mov	r4, #0
   1403c:	mov	r0, r4
   14040:	pop	{r4, r5, r6, r7, r8, pc}
   14044:	ldr	r1, [r0, #48]	; 0x30
   14048:	mov	r5, r0
   1404c:	ands	r2, r1, #8192	; 0x2000
   14050:	bne	14038 <__assert_fail@plt+0x3264>
   14054:	ldrh	ip, [r4, #60]	; 0x3c
   14058:	mov	r3, #3
   1405c:	strh	r3, [r4, #60]	; 0x3c
   14060:	cmp	ip, #1
   14064:	bne	14078 <__assert_fail@plt+0x32a4>
   14068:	mov	r1, r4
   1406c:	bl	12b38 <__assert_fail@plt+0x1d64>
   14070:	strh	r0, [r4, #56]	; 0x38
   14074:	b	1403c <__assert_fail@plt+0x3268>
   14078:	cmp	ip, #2
   1407c:	ldrh	r3, [r4, #56]	; 0x38
   14080:	bne	14160 <__assert_fail@plt+0x338c>
   14084:	sub	r2, r3, #12
   14088:	cmp	r2, #1
   1408c:	bhi	14554 <__assert_fail@plt+0x3780>
   14090:	mov	r2, #1
   14094:	mov	r1, r4
   14098:	bl	12b38 <__assert_fail@plt+0x1d64>
   1409c:	cmp	r0, #1
   140a0:	strh	r0, [r4, #56]	; 0x38
   140a4:	bne	140ec <__assert_fail@plt+0x3318>
   140a8:	ldr	r3, [r5, #48]	; 0x30
   140ac:	tst	r3, #4
   140b0:	bne	140ec <__assert_fail@plt+0x3318>
   140b4:	ldr	r1, [pc, #1320]	; 145e4 <__assert_fail@plt+0x3810>
   140b8:	mov	r0, r5
   140bc:	bl	12d9c <__assert_fail@plt+0x1fc8>
   140c0:	cmp	r0, #0
   140c4:	str	r0, [r4, #36]	; 0x24
   140c8:	ldrhge	r3, [r4, #58]	; 0x3a
   140cc:	orrge	r3, r3, #2
   140d0:	strhge	r3, [r4, #58]	; 0x3a
   140d4:	bge	140ec <__assert_fail@plt+0x3318>
   140d8:	bl	10cc0 <__errno_location@plt>
   140dc:	ldr	r3, [r0]
   140e0:	str	r3, [r4, #32]
   140e4:	mov	r3, #7
   140e8:	strh	r3, [r4, #56]	; 0x38
   140ec:	ldrh	r3, [r4, #56]	; 0x38
   140f0:	str	r4, [r5]
   140f4:	cmp	r3, #11
   140f8:	bne	14120 <__assert_fail@plt+0x334c>
   140fc:	ldrd	r2, [r4, #112]	; 0x70
   14100:	cmp	r3, #0
   14104:	cmpeq	r2, #2
   14108:	bne	1439c <__assert_fail@plt+0x35c8>
   1410c:	mov	r2, #0
   14110:	mov	r1, r4
   14114:	mov	r0, r5
   14118:	bl	12b38 <__assert_fail@plt+0x1d64>
   1411c:	strh	r0, [r4, #56]	; 0x38
   14120:	ldrh	r3, [r4, #56]	; 0x38
   14124:	cmp	r3, #1
   14128:	bne	1403c <__assert_fail@plt+0x3268>
   1412c:	ldr	r3, [r4, #48]	; 0x30
   14130:	mov	r0, r5
   14134:	mov	r1, r4
   14138:	cmp	r3, #0
   1413c:	ldrdeq	r2, [r4, #64]	; 0x40
   14140:	strdeq	r2, [r5, #16]
   14144:	bl	1329c <__assert_fail@plt+0x24c8>
   14148:	subs	r5, r0, #0
   1414c:	bne	1403c <__assert_fail@plt+0x3268>
   14150:	bl	10cc0 <__errno_location@plt>
   14154:	mov	r3, #12
   14158:	str	r3, [r0]
   1415c:	b	14038 <__assert_fail@plt+0x3264>
   14160:	cmp	r3, #1
   14164:	bne	1455c <__assert_fail@plt+0x3788>
   14168:	cmp	ip, #4
   1416c:	beq	1418c <__assert_fail@plt+0x33b8>
   14170:	tst	r1, #64	; 0x40
   14174:	beq	141d0 <__assert_fail@plt+0x33fc>
   14178:	ldrd	r2, [r5, #16]
   1417c:	ldrd	r6, [r4, #64]	; 0x40
   14180:	cmp	r7, r3
   14184:	cmpeq	r6, r2
   14188:	beq	141d0 <__assert_fail@plt+0x33fc>
   1418c:	ldrh	r3, [r4, #58]	; 0x3a
   14190:	tst	r3, #2
   14194:	beq	141a0 <__assert_fail@plt+0x33cc>
   14198:	ldr	r0, [r4, #36]	; 0x24
   1419c:	bl	10da4 <close@plt>
   141a0:	ldr	r0, [r5, #4]
   141a4:	cmp	r0, #0
   141a8:	beq	141b8 <__assert_fail@plt+0x33e4>
   141ac:	bl	12dd0 <__assert_fail@plt+0x1ffc>
   141b0:	mov	r3, #0
   141b4:	str	r3, [r5, #4]
   141b8:	mov	r3, #6
   141bc:	strh	r3, [r4, #56]	; 0x38
   141c0:	mov	r1, r4
   141c4:	mov	r0, r5
   141c8:	bl	1334c <__assert_fail@plt+0x2578>
   141cc:	b	1403c <__assert_fail@plt+0x3268>
   141d0:	ldr	r0, [r5, #4]
   141d4:	cmp	r0, #0
   141d8:	beq	141f8 <__assert_fail@plt+0x3424>
   141dc:	tst	r1, #4096	; 0x1000
   141e0:	beq	144c4 <__assert_fail@plt+0x36f0>
   141e4:	bic	r1, r1, #4096	; 0x1000
   141e8:	str	r1, [r5, #48]	; 0x30
   141ec:	bl	12dd0 <__assert_fail@plt+0x1ffc>
   141f0:	mov	r3, #0
   141f4:	str	r3, [r5, #4]
   141f8:	mov	r1, #3
   141fc:	mov	r0, r5
   14200:	bl	133fc <__assert_fail@plt+0x2628>
   14204:	cmp	r0, #0
   14208:	str	r0, [r5, #4]
   1420c:	bne	14504 <__assert_fail@plt+0x3730>
   14210:	ldr	r3, [r5, #48]	; 0x30
   14214:	tst	r3, #8192	; 0x2000
   14218:	bne	14038 <__assert_fail@plt+0x3264>
   1421c:	ldr	r3, [r4, #32]
   14220:	cmp	r3, #0
   14224:	beq	141c0 <__assert_fail@plt+0x33ec>
   14228:	ldrh	r3, [r4, #56]	; 0x38
   1422c:	cmp	r3, #4
   14230:	beq	141c0 <__assert_fail@plt+0x33ec>
   14234:	mov	r3, #7
   14238:	b	141bc <__assert_fail@plt+0x33e8>
   1423c:	ldr	r2, [r3, #4]
   14240:	ldr	r2, [r2, #24]
   14244:	str	r2, [r3, #24]
   14248:	ldr	r3, [r3, #8]
   1424c:	b	144fc <__assert_fail@plt+0x3728>
   14250:	mov	r0, r6
   14254:	bl	12a20 <__assert_fail@plt+0x1c4c>
   14258:	b	14510 <__assert_fail@plt+0x373c>
   1425c:	mov	r0, r6
   14260:	str	r4, [r5]
   14264:	bl	12a20 <__assert_fail@plt+0x1c4c>
   14268:	ldr	r6, [r4, #48]	; 0x30
   1426c:	cmp	r6, #0
   14270:	bne	14318 <__assert_fail@plt+0x3544>
   14274:	mov	r0, r5
   14278:	bl	12fac <__assert_fail@plt+0x21d8>
   1427c:	cmp	r0, #0
   14280:	ldrne	r3, [r5, #48]	; 0x30
   14284:	orrne	r3, r3, #8192	; 0x2000
   14288:	strne	r3, [r5, #48]	; 0x30
   1428c:	bne	14038 <__assert_fail@plt+0x3264>
   14290:	mov	r0, r5
   14294:	add	r6, r4, #168	; 0xa8
   14298:	bl	13274 <__assert_fail@plt+0x24a0>
   1429c:	ldr	r2, [r4, #52]	; 0x34
   142a0:	mov	r1, r6
   142a4:	ldr	r0, [r5, #24]
   142a8:	str	r2, [r4, #40]	; 0x28
   142ac:	add	r2, r2, #1
   142b0:	bl	10bac <memmove@plt>
   142b4:	mov	r1, #47	; 0x2f
   142b8:	mov	r0, r6
   142bc:	bl	10cfc <strrchr@plt>
   142c0:	cmp	r0, #0
   142c4:	beq	14300 <__assert_fail@plt+0x352c>
   142c8:	cmp	r6, r0
   142cc:	bne	142dc <__assert_fail@plt+0x3508>
   142d0:	ldrb	r3, [r6, #1]
   142d4:	cmp	r3, #0
   142d8:	beq	14300 <__assert_fail@plt+0x352c>
   142dc:	add	r7, r0, #1
   142e0:	mov	r0, r7
   142e4:	bl	10c90 <strlen@plt>
   142e8:	mov	r8, r0
   142ec:	add	r2, r0, #1
   142f0:	mov	r1, r7
   142f4:	mov	r0, r6
   142f8:	bl	10bac <memmove@plt>
   142fc:	str	r8, [r4, #52]	; 0x34
   14300:	ldr	r3, [r5, #24]
   14304:	mov	r0, r5
   14308:	str	r3, [r4, #24]
   1430c:	str	r3, [r4, #28]
   14310:	bl	13200 <__assert_fail@plt+0x242c>
   14314:	b	140ec <__assert_fail@plt+0x3318>
   14318:	ldrh	r3, [r4, #60]	; 0x3c
   1431c:	mov	r6, r4
   14320:	cmp	r3, #4
   14324:	beq	14560 <__assert_fail@plt+0x378c>
   14328:	cmp	r3, #2
   1432c:	bne	14510 <__assert_fail@plt+0x373c>
   14330:	mov	r2, #1
   14334:	mov	r1, r4
   14338:	mov	r0, r5
   1433c:	bl	12b38 <__assert_fail@plt+0x1d64>
   14340:	cmp	r0, #1
   14344:	strh	r0, [r4, #56]	; 0x38
   14348:	bne	14390 <__assert_fail@plt+0x35bc>
   1434c:	ldr	r3, [r5, #48]	; 0x30
   14350:	tst	r3, #4
   14354:	bne	14390 <__assert_fail@plt+0x35bc>
   14358:	ldr	r1, [pc, #644]	; 145e4 <__assert_fail@plt+0x3810>
   1435c:	mov	r0, r5
   14360:	bl	12d9c <__assert_fail@plt+0x1fc8>
   14364:	cmp	r0, #0
   14368:	str	r0, [r4, #36]	; 0x24
   1436c:	ldrhge	r3, [r4, #58]	; 0x3a
   14370:	orrge	r3, r3, #2
   14374:	strhge	r3, [r4, #58]	; 0x3a
   14378:	bge	14390 <__assert_fail@plt+0x35bc>
   1437c:	bl	10cc0 <__errno_location@plt>
   14380:	ldr	r3, [r0]
   14384:	str	r3, [r4, #32]
   14388:	mov	r3, #7
   1438c:	strh	r3, [r4, #56]	; 0x38
   14390:	mov	r3, #3
   14394:	strh	r3, [r4, #60]	; 0x3c
   14398:	b	14510 <__assert_fail@plt+0x373c>
   1439c:	cmp	r3, #0
   143a0:	cmpeq	r2, #1
   143a4:	beq	1403c <__assert_fail@plt+0x3268>
   143a8:	bl	10d98 <abort@plt>
   143ac:	ldrh	r3, [r4, #56]	; 0x38
   143b0:	cmp	r3, #11
   143b4:	beq	143a8 <__assert_fail@plt+0x35d4>
   143b8:	ldr	r2, [r5, #24]
   143bc:	mov	r1, #0
   143c0:	ldr	r3, [r4, #40]	; 0x28
   143c4:	strb	r1, [r2, r3]
   143c8:	ldr	r3, [r4, #48]	; 0x30
   143cc:	cmp	r3, r1
   143d0:	bne	14400 <__assert_fail@plt+0x362c>
   143d4:	mov	r0, r5
   143d8:	bl	12fac <__assert_fail@plt+0x21d8>
   143dc:	cmp	r0, #0
   143e0:	beq	14438 <__assert_fail@plt+0x3664>
   143e4:	bl	10cc0 <__errno_location@plt>
   143e8:	ldr	r3, [r0]
   143ec:	str	r3, [r4, #32]
   143f0:	ldr	r3, [r5, #48]	; 0x30
   143f4:	orr	r3, r3, #8192	; 0x2000
   143f8:	str	r3, [r5, #48]	; 0x30
   143fc:	b	14438 <__assert_fail@plt+0x3664>
   14400:	ldrh	r3, [r4, #58]	; 0x3a
   14404:	tst	r3, #2
   14408:	beq	144a4 <__assert_fail@plt+0x36d0>
   1440c:	ldr	r3, [r5, #48]	; 0x30
   14410:	tst	r3, #4
   14414:	bne	14430 <__assert_fail@plt+0x365c>
   14418:	tst	r3, #512	; 0x200
   1441c:	ldr	r1, [r4, #36]	; 0x24
   14420:	beq	14478 <__assert_fail@plt+0x36a4>
   14424:	mov	r2, #1
   14428:	mov	r0, r5
   1442c:	bl	12f38 <__assert_fail@plt+0x2164>
   14430:	ldr	r0, [r4, #36]	; 0x24
   14434:	bl	10da4 <close@plt>
   14438:	ldrh	r3, [r4, #56]	; 0x38
   1443c:	cmp	r3, #2
   14440:	beq	14468 <__assert_fail@plt+0x3694>
   14444:	ldr	r3, [r4, #32]
   14448:	cmp	r3, #0
   1444c:	movne	r3, #7
   14450:	moveq	r3, #6
   14454:	strh	r3, [r4, #56]	; 0x38
   14458:	bne	14468 <__assert_fail@plt+0x3694>
   1445c:	mov	r1, r4
   14460:	mov	r0, r5
   14464:	bl	1334c <__assert_fail@plt+0x2578>
   14468:	ldr	r3, [r5, #48]	; 0x30
   1446c:	tst	r3, #8192	; 0x2000
   14470:	beq	1403c <__assert_fail@plt+0x3268>
   14474:	b	14038 <__assert_fail@plt+0x3264>
   14478:	mov	r0, r1
   1447c:	bl	10d50 <fchdir@plt>
   14480:	cmp	r0, #0
   14484:	beq	14430 <__assert_fail@plt+0x365c>
   14488:	bl	10cc0 <__errno_location@plt>
   1448c:	ldr	r3, [r0]
   14490:	str	r3, [r4, #32]
   14494:	ldr	r3, [r5, #48]	; 0x30
   14498:	orr	r3, r3, #8192	; 0x2000
   1449c:	str	r3, [r5, #48]	; 0x30
   144a0:	b	14430 <__assert_fail@plt+0x365c>
   144a4:	tst	r3, #1
   144a8:	bne	14438 <__assert_fail@plt+0x3664>
   144ac:	ldr	r3, [pc, #308]	; 145e8 <__assert_fail@plt+0x3814>
   144b0:	mvn	r2, #0
   144b4:	mov	r0, r5
   144b8:	ldr	r1, [r4, #4]
   144bc:	bl	12ffc <__assert_fail@plt+0x2228>
   144c0:	b	143dc <__assert_fail@plt+0x3608>
   144c4:	mvn	r2, #0
   144c8:	mov	r1, r4
   144cc:	ldr	r3, [r4, #24]
   144d0:	mov	r0, r5
   144d4:	bl	12ffc <__assert_fail@plt+0x2228>
   144d8:	cmp	r0, #0
   144dc:	beq	14504 <__assert_fail@plt+0x3730>
   144e0:	bl	10cc0 <__errno_location@plt>
   144e4:	ldr	r3, [r0]
   144e8:	str	r3, [r4, #32]
   144ec:	ldrh	r3, [r4, #58]	; 0x3a
   144f0:	orr	r3, r3, #1
   144f4:	strh	r3, [r4, #58]	; 0x3a
   144f8:	ldr	r3, [r5, #4]
   144fc:	cmp	r3, #0
   14500:	bne	1423c <__assert_fail@plt+0x3468>
   14504:	mov	r3, #0
   14508:	ldr	r4, [r5, #4]
   1450c:	str	r3, [r5, #4]
   14510:	ldr	r0, [r4, #4]
   14514:	ldr	r2, [r5, #24]
   14518:	ldr	r1, [r0, #40]	; 0x28
   1451c:	ldr	r0, [r0, #28]
   14520:	sub	r3, r1, #1
   14524:	ldrb	r0, [r0, r3]
   14528:	cmp	r0, #47	; 0x2f
   1452c:	movne	r3, r1
   14530:	mov	r1, #47	; 0x2f
   14534:	add	r0, r2, r3
   14538:	strb	r1, [r2, r3]
   1453c:	add	r0, r0, #1
   14540:	add	r1, r4, #168	; 0xa8
   14544:	ldr	r2, [r4, #52]	; 0x34
   14548:	add	r2, r2, #1
   1454c:	bl	10bac <memmove@plt>
   14550:	b	140ec <__assert_fail@plt+0x3318>
   14554:	cmp	r3, #1
   14558:	beq	14170 <__assert_fail@plt+0x339c>
   1455c:	mov	r6, r4
   14560:	ldr	r4, [r6, #8]
   14564:	cmp	r4, #0
   14568:	bne	1425c <__assert_fail@plt+0x3488>
   1456c:	ldr	r3, [r6, #4]
   14570:	ldr	r2, [r3, #12]
   14574:	cmp	r2, #0
   14578:	beq	145ac <__assert_fail@plt+0x37d8>
   1457c:	str	r3, [r5]
   14580:	mov	r1, #3
   14584:	mov	r0, r5
   14588:	ldr	r2, [r5, #24]
   1458c:	ldr	r3, [r3, #40]	; 0x28
   14590:	strb	r4, [r2, r3]
   14594:	bl	133fc <__assert_fail@plt+0x2628>
   14598:	subs	r4, r0, #0
   1459c:	bne	14250 <__assert_fail@plt+0x347c>
   145a0:	ldr	r3, [r5, #48]	; 0x30
   145a4:	tst	r3, #8192	; 0x2000
   145a8:	bne	14038 <__assert_fail@plt+0x3264>
   145ac:	ldr	r4, [r6, #4]
   145b0:	mov	r0, r6
   145b4:	str	r4, [r5]
   145b8:	bl	12a20 <__assert_fail@plt+0x1c4c>
   145bc:	ldr	r3, [r4, #48]	; 0x30
   145c0:	cmn	r3, #1
   145c4:	bne	143ac <__assert_fail@plt+0x35d8>
   145c8:	mov	r0, r4
   145cc:	mov	r4, #0
   145d0:	bl	12a20 <__assert_fail@plt+0x1c4c>
   145d4:	bl	10cc0 <__errno_location@plt>
   145d8:	str	r4, [r0]
   145dc:	str	r4, [r5]
   145e0:	b	1403c <__assert_fail@plt+0x3268>
   145e4:	strdeq	r6, [r1], -r7
   145e8:	strdeq	r6, [r1], -r6	; <UNPREDICTABLE>
   145ec:	cmp	r2, #4
   145f0:	bls	1460c <__assert_fail@plt+0x3838>
   145f4:	push	{r4, lr}
   145f8:	bl	10cc0 <__errno_location@plt>
   145fc:	mov	r3, #22
   14600:	str	r3, [r0]
   14604:	mov	r0, #1
   14608:	pop	{r4, pc}
   1460c:	mov	r0, #0
   14610:	strh	r2, [r1, #60]	; 0x3c
   14614:	bx	lr
   14618:	push	{r4, r5, r6, r7, r8, lr}
   1461c:	mov	r7, r1
   14620:	mov	r5, r0
   14624:	bl	10cc0 <__errno_location@plt>
   14628:	bics	r2, r7, #4096	; 0x1000
   1462c:	mov	r6, r0
   14630:	beq	14644 <__assert_fail@plt+0x3870>
   14634:	mov	r3, #22
   14638:	str	r3, [r0]
   1463c:	mov	r0, #0
   14640:	pop	{r4, r5, r6, r7, r8, pc}
   14644:	ldr	r4, [r5]
   14648:	str	r2, [r0]
   1464c:	ldr	r3, [r5, #48]	; 0x30
   14650:	ands	r0, r3, #8192	; 0x2000
   14654:	bne	1463c <__assert_fail@plt+0x3868>
   14658:	ldrh	r3, [r4, #56]	; 0x38
   1465c:	cmp	r3, #9
   14660:	bne	1466c <__assert_fail@plt+0x3898>
   14664:	ldr	r0, [r4, #8]
   14668:	pop	{r4, r5, r6, r7, r8, pc}
   1466c:	cmp	r3, #1
   14670:	popne	{r4, r5, r6, r7, r8, pc}
   14674:	ldr	r0, [r5, #4]
   14678:	cmp	r0, #0
   1467c:	beq	14684 <__assert_fail@plt+0x38b0>
   14680:	bl	12dd0 <__assert_fail@plt+0x1ffc>
   14684:	cmp	r7, #4096	; 0x1000
   14688:	ldreq	r3, [r5, #48]	; 0x30
   1468c:	moveq	r8, #2
   14690:	movne	r8, #1
   14694:	orreq	r3, r3, #4096	; 0x1000
   14698:	streq	r3, [r5, #48]	; 0x30
   1469c:	ldr	r3, [r4, #48]	; 0x30
   146a0:	cmp	r3, #0
   146a4:	bne	146c4 <__assert_fail@plt+0x38f0>
   146a8:	ldr	r3, [r4, #24]
   146ac:	ldrb	r3, [r3]
   146b0:	cmp	r3, #47	; 0x2f
   146b4:	beq	146c4 <__assert_fail@plt+0x38f0>
   146b8:	ldr	r0, [r5, #48]	; 0x30
   146bc:	ands	r4, r0, #4
   146c0:	beq	146d8 <__assert_fail@plt+0x3904>
   146c4:	mov	r1, r8
   146c8:	mov	r0, r5
   146cc:	bl	133fc <__assert_fail@plt+0x2628>
   146d0:	str	r0, [r5, #4]
   146d4:	pop	{r4, r5, r6, r7, r8, pc}
   146d8:	ldr	r1, [pc, #116]	; 14754 <__assert_fail@plt+0x3980>
   146dc:	mov	r0, r5
   146e0:	bl	12d9c <__assert_fail@plt+0x1fc8>
   146e4:	subs	r7, r0, #0
   146e8:	strlt	r4, [r5, #4]
   146ec:	blt	1463c <__assert_fail@plt+0x3868>
   146f0:	mov	r1, r8
   146f4:	mov	r0, r5
   146f8:	bl	133fc <__assert_fail@plt+0x2628>
   146fc:	str	r0, [r5, #4]
   14700:	ldr	r0, [r5, #48]	; 0x30
   14704:	ands	r4, r0, #512	; 0x200
   14708:	beq	14724 <__assert_fail@plt+0x3950>
   1470c:	mov	r2, #1
   14710:	mov	r1, r7
   14714:	mov	r0, r5
   14718:	bl	12f38 <__assert_fail@plt+0x2164>
   1471c:	ldr	r0, [r5, #4]
   14720:	pop	{r4, r5, r6, r7, r8, pc}
   14724:	mov	r0, r7
   14728:	bl	10d50 <fchdir@plt>
   1472c:	cmp	r0, #0
   14730:	beq	14748 <__assert_fail@plt+0x3974>
   14734:	ldr	r5, [r6]
   14738:	mov	r0, r7
   1473c:	bl	10da4 <close@plt>
   14740:	str	r5, [r6]
   14744:	b	1463c <__assert_fail@plt+0x3868>
   14748:	mov	r0, r7
   1474c:	bl	10da4 <close@plt>
   14750:	b	1471c <__assert_fail@plt+0x3948>
   14754:	strdeq	r6, [r1], -r7
   14758:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1475c:	ldr	r7, [r1]
   14760:	ldr	lr, [r1, #32]
   14764:	ldr	r8, [r1, #28]
   14768:	mov	r4, r7
   1476c:	add	r9, r0, lr, lsl #2
   14770:	mov	r5, r8
   14774:	cmp	r4, lr
   14778:	movle	r3, #0
   1477c:	movgt	r3, #1
   14780:	cmp	r5, lr
   14784:	movge	r3, #0
   14788:	cmp	r3, #0
   1478c:	bne	147a4 <__assert_fail@plt+0x39d0>
   14790:	sub	r3, r7, lr
   14794:	str	r7, [r1, #32]
   14798:	add	r3, r3, r8
   1479c:	str	r3, [r1, #28]
   147a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147a4:	sub	r6, r4, lr
   147a8:	sub	r2, lr, r5
   147ac:	lsl	ip, r5, #2
   147b0:	cmp	r6, r2
   147b4:	ble	147e8 <__assert_fail@plt+0x3a14>
   147b8:	sub	r2, r4, r2
   147bc:	add	r4, r0, r4, lsl #2
   147c0:	add	ip, r0, ip
   147c4:	add	r6, r0, r2, lsl #2
   147c8:	ldr	sl, [r6]
   147cc:	ldr	r3, [ip]
   147d0:	str	sl, [ip], #4
   147d4:	str	r3, [r6], #4
   147d8:	cmp	r4, r6
   147dc:	bne	147c8 <__assert_fail@plt+0x39f4>
   147e0:	mov	r4, r2
   147e4:	b	14774 <__assert_fail@plt+0x39a0>
   147e8:	add	r2, r6, r5
   147ec:	add	r3, r0, ip
   147f0:	add	r2, r0, r2, lsl #2
   147f4:	mov	ip, r9
   147f8:	ldr	fp, [ip]
   147fc:	ldr	sl, [r3]
   14800:	str	fp, [r3], #4
   14804:	cmp	r3, r2
   14808:	str	sl, [ip], #4
   1480c:	bne	147f8 <__assert_fail@plt+0x3a24>
   14810:	add	r5, r5, r6
   14814:	mov	r2, r4
   14818:	b	147e0 <__assert_fail@plt+0x3a0c>
   1481c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14820:	sub	sp, sp, #44	; 0x2c
   14824:	mov	sl, r1
   14828:	ldr	r4, [sp, #88]	; 0x58
   1482c:	str	r3, [sp, #20]
   14830:	str	r2, [sp, #32]
   14834:	str	r0, [sp, #36]	; 0x24
   14838:	ldr	r8, [r4, #20]
   1483c:	mov	r2, r8
   14840:	ldrb	r3, [r2]
   14844:	mov	r9, r2
   14848:	add	r2, r2, #1
   1484c:	subs	r7, r3, #61	; 0x3d
   14850:	movne	r7, #1
   14854:	cmp	r3, #0
   14858:	moveq	r7, #0
   1485c:	cmp	r7, #0
   14860:	bne	14840 <__assert_fail@plt+0x3a6c>
   14864:	sub	r3, r9, r8
   14868:	str	r3, [sp, #24]
   1486c:	ldr	r3, [sp, #20]
   14870:	ldr	r5, [r3, r7, lsl #4]
   14874:	add	r6, r3, r7, lsl #4
   14878:	cmp	r5, #0
   1487c:	bne	14924 <__assert_fail@plt+0x3b50>
   14880:	mov	fp, r3
   14884:	mov	r6, r5
   14888:	str	r5, [sp, #12]
   1488c:	mvn	r3, #0
   14890:	mov	r8, r5
   14894:	str	r3, [sp, #16]
   14898:	str	r5, [sp, #28]
   1489c:	ldr	r0, [fp]
   148a0:	cmp	r0, #0
   148a4:	bne	14958 <__assert_fail@plt+0x3b84>
   148a8:	orrs	r3, r5, r8
   148ac:	beq	14a8c <__assert_fail@plt+0x3cb8>
   148b0:	ldr	r3, [sp, #92]	; 0x5c
   148b4:	cmp	r3, #0
   148b8:	beq	148e4 <__assert_fail@plt+0x3b10>
   148bc:	ldr	r6, [pc, #900]	; 14c48 <__assert_fail@plt+0x3e74>
   148c0:	cmp	r8, #0
   148c4:	ldr	r0, [r6]
   148c8:	beq	14a1c <__assert_fail@plt+0x3c48>
   148cc:	ldr	r3, [r4, #20]
   148d0:	ldr	r1, [pc, #884]	; 14c4c <__assert_fail@plt+0x3e78>
   148d4:	ldr	r2, [sl]
   148d8:	str	r3, [sp]
   148dc:	ldr	r3, [sp, #96]	; 0x60
   148e0:	bl	10cb4 <fprintf@plt>
   148e4:	ldr	r3, [sp, #28]
   148e8:	cmp	r3, #0
   148ec:	beq	148f8 <__assert_fail@plt+0x3b24>
   148f0:	mov	r0, r5
   148f4:	bl	12a20 <__assert_fail@plt+0x1c4c>
   148f8:	ldr	r5, [r4, #20]
   148fc:	mov	r0, r5
   14900:	bl	10c90 <strlen@plt>
   14904:	ldr	r3, [r4]
   14908:	add	r0, r5, r0
   1490c:	str	r0, [r4, #20]
   14910:	add	r3, r3, #1
   14914:	str	r3, [r4]
   14918:	mov	r3, #0
   1491c:	str	r3, [r4, #8]
   14920:	b	14b14 <__assert_fail@plt+0x3d40>
   14924:	mov	r1, r8
   14928:	mov	r0, r5
   1492c:	ldr	r2, [sp, #24]
   14930:	bl	10d8c <strncmp@plt>
   14934:	cmp	r0, #0
   14938:	bne	14950 <__assert_fail@plt+0x3b7c>
   1493c:	mov	r0, r5
   14940:	bl	10c90 <strlen@plt>
   14944:	ldr	r3, [sp, #24]
   14948:	cmp	r0, r3
   1494c:	beq	14b20 <__assert_fail@plt+0x3d4c>
   14950:	add	r7, r7, #1
   14954:	b	1486c <__assert_fail@plt+0x3a98>
   14958:	ldr	r1, [r4, #20]
   1495c:	ldr	r2, [sp, #24]
   14960:	bl	10d8c <strncmp@plt>
   14964:	cmp	r0, #0
   14968:	bne	14a08 <__assert_fail@plt+0x3c34>
   1496c:	cmp	r6, #0
   14970:	ldreq	r3, [sp, #12]
   14974:	moveq	r6, fp
   14978:	streq	r3, [sp, #16]
   1497c:	beq	14a08 <__assert_fail@plt+0x3c34>
   14980:	ldr	r3, [sp, #84]	; 0x54
   14984:	cmp	r3, #0
   14988:	bne	149bc <__assert_fail@plt+0x3be8>
   1498c:	ldr	r1, [r6, #4]
   14990:	ldr	r2, [fp, #4]
   14994:	cmp	r1, r2
   14998:	bne	149bc <__assert_fail@plt+0x3be8>
   1499c:	ldr	r1, [r6, #8]
   149a0:	ldr	r2, [fp, #8]
   149a4:	cmp	r1, r2
   149a8:	bne	149bc <__assert_fail@plt+0x3be8>
   149ac:	ldr	r1, [r6, #12]
   149b0:	ldr	r2, [fp, #12]
   149b4:	cmp	r1, r2
   149b8:	beq	14a08 <__assert_fail@plt+0x3c34>
   149bc:	cmp	r8, #0
   149c0:	bne	14a08 <__assert_fail@plt+0x3c34>
   149c4:	ldr	r3, [sp, #92]	; 0x5c
   149c8:	cmp	r3, #0
   149cc:	beq	149f0 <__assert_fail@plt+0x3c1c>
   149d0:	cmp	r5, #0
   149d4:	bne	149fc <__assert_fail@plt+0x3c28>
   149d8:	mov	r0, r7
   149dc:	bl	1618c <__assert_fail@plt+0x53b8>
   149e0:	subs	r5, r0, #0
   149e4:	bne	14c24 <__assert_fail@plt+0x3e50>
   149e8:	mov	r8, #1
   149ec:	b	14a08 <__assert_fail@plt+0x3c34>
   149f0:	cmp	r5, #0
   149f4:	mov	r8, #1
   149f8:	beq	14a08 <__assert_fail@plt+0x3c34>
   149fc:	ldr	r3, [sp, #12]
   14a00:	mov	r2, #1
   14a04:	strb	r2, [r5, r3]
   14a08:	ldr	r3, [sp, #12]
   14a0c:	add	fp, fp, #16
   14a10:	add	r3, r3, #1
   14a14:	str	r3, [sp, #12]
   14a18:	b	1489c <__assert_fail@plt+0x3ac8>
   14a1c:	bl	10d38 <flockfile@plt>
   14a20:	ldr	r3, [r4, #20]
   14a24:	ldr	r1, [pc, #548]	; 14c50 <__assert_fail@plt+0x3e7c>
   14a28:	ldr	r2, [sl]
   14a2c:	str	r3, [sp]
   14a30:	ldr	r0, [r6]
   14a34:	ldr	r3, [sp, #96]	; 0x60
   14a38:	ldr	r9, [pc, #532]	; 14c54 <__assert_fail@plt+0x3e80>
   14a3c:	bl	10cb4 <fprintf@plt>
   14a40:	cmp	r7, r8
   14a44:	ldr	r0, [r6]
   14a48:	bne	14a64 <__assert_fail@plt+0x3c90>
   14a4c:	mov	r1, r0
   14a50:	mov	r0, #10
   14a54:	bl	10d08 <fputc@plt>
   14a58:	ldr	r0, [r6]
   14a5c:	bl	10bf4 <funlockfile@plt>
   14a60:	b	148e4 <__assert_fail@plt+0x3b10>
   14a64:	ldrb	r3, [r5, r8]
   14a68:	cmp	r3, #0
   14a6c:	beq	14a84 <__assert_fail@plt+0x3cb0>
   14a70:	ldr	r3, [sp, #20]
   14a74:	mov	r1, r9
   14a78:	ldr	r2, [sp, #96]	; 0x60
   14a7c:	ldr	r3, [r3, r8, lsl #4]
   14a80:	bl	10cb4 <fprintf@plt>
   14a84:	add	r8, r8, #1
   14a88:	b	14a40 <__assert_fail@plt+0x3c6c>
   14a8c:	cmp	r6, #0
   14a90:	bne	14b24 <__assert_fail@plt+0x3d50>
   14a94:	ldr	r3, [sp, #84]	; 0x54
   14a98:	cmp	r3, #0
   14a9c:	beq	14ad0 <__assert_fail@plt+0x3cfc>
   14aa0:	ldr	r3, [r4]
   14aa4:	ldr	r3, [sl, r3, lsl #2]
   14aa8:	ldrb	r3, [r3, #1]
   14aac:	cmp	r3, #45	; 0x2d
   14ab0:	beq	14ad0 <__assert_fail@plt+0x3cfc>
   14ab4:	ldr	r3, [r4, #20]
   14ab8:	ldr	r0, [sp, #32]
   14abc:	ldrb	r1, [r3]
   14ac0:	bl	10c9c <strchr@plt>
   14ac4:	cmp	r0, #0
   14ac8:	mvnne	r0, #0
   14acc:	bne	14b18 <__assert_fail@plt+0x3d44>
   14ad0:	ldr	r3, [sp, #92]	; 0x5c
   14ad4:	cmp	r3, #0
   14ad8:	beq	14afc <__assert_fail@plt+0x3d28>
   14adc:	ldr	r0, [pc, #356]	; 14c48 <__assert_fail@plt+0x3e74>
   14ae0:	ldr	r3, [r4, #20]
   14ae4:	ldr	r1, [pc, #364]	; 14c58 <__assert_fail@plt+0x3e84>
   14ae8:	ldr	r2, [sl]
   14aec:	str	r3, [sp]
   14af0:	ldr	r0, [r0]
   14af4:	ldr	r3, [sp, #96]	; 0x60
   14af8:	bl	10cb4 <fprintf@plt>
   14afc:	ldr	r3, [r4]
   14b00:	mov	r2, #0
   14b04:	str	r2, [r4, #8]
   14b08:	str	r2, [r4, #20]
   14b0c:	add	r3, r3, #1
   14b10:	str	r3, [r4]
   14b14:	mov	r0, #63	; 0x3f
   14b18:	add	sp, sp, #44	; 0x2c
   14b1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b20:	str	r7, [sp, #16]
   14b24:	ldr	r3, [r4]
   14b28:	mov	r1, #0
   14b2c:	str	r1, [r4, #20]
   14b30:	ldr	r1, [r6, #4]
   14b34:	add	r2, r3, #1
   14b38:	str	r2, [r4]
   14b3c:	ldrb	r0, [r9]
   14b40:	cmp	r0, #0
   14b44:	beq	14b8c <__assert_fail@plt+0x3db8>
   14b48:	cmp	r1, #0
   14b4c:	addne	r9, r9, #1
   14b50:	strne	r9, [r4, #12]
   14b54:	bne	14bb0 <__assert_fail@plt+0x3ddc>
   14b58:	ldr	r3, [sp, #92]	; 0x5c
   14b5c:	cmp	r3, #0
   14b60:	beq	14b84 <__assert_fail@plt+0x3db0>
   14b64:	ldr	r0, [pc, #220]	; 14c48 <__assert_fail@plt+0x3e74>
   14b68:	ldr	r3, [r6]
   14b6c:	ldr	r1, [pc, #232]	; 14c5c <__assert_fail@plt+0x3e88>
   14b70:	ldr	r2, [sl]
   14b74:	str	r3, [sp]
   14b78:	ldr	r0, [r0]
   14b7c:	ldr	r3, [sp, #96]	; 0x60
   14b80:	bl	10cb4 <fprintf@plt>
   14b84:	ldr	r3, [r6, #12]
   14b88:	b	1491c <__assert_fail@plt+0x3b48>
   14b8c:	cmp	r1, #1
   14b90:	bne	14bb0 <__assert_fail@plt+0x3ddc>
   14b94:	ldr	r1, [sp, #36]	; 0x24
   14b98:	cmp	r2, r1
   14b9c:	bge	14bd8 <__assert_fail@plt+0x3e04>
   14ba0:	add	r3, r3, #2
   14ba4:	str	r3, [r4]
   14ba8:	ldr	r3, [sl, r2, lsl #2]
   14bac:	str	r3, [r4, #12]
   14bb0:	ldr	r3, [sp, #80]	; 0x50
   14bb4:	cmp	r3, #0
   14bb8:	ldrne	r2, [sp, #16]
   14bbc:	strne	r2, [r3]
   14bc0:	ldr	r3, [r6, #8]
   14bc4:	ldr	r0, [r6, #12]
   14bc8:	cmp	r3, #0
   14bcc:	strne	r0, [r3]
   14bd0:	movne	r0, #0
   14bd4:	b	14b18 <__assert_fail@plt+0x3d44>
   14bd8:	ldr	r3, [sp, #92]	; 0x5c
   14bdc:	cmp	r3, #0
   14be0:	beq	14c04 <__assert_fail@plt+0x3e30>
   14be4:	ldr	r0, [pc, #92]	; 14c48 <__assert_fail@plt+0x3e74>
   14be8:	ldr	r3, [r6]
   14bec:	ldr	r1, [pc, #108]	; 14c60 <__assert_fail@plt+0x3e8c>
   14bf0:	ldr	r2, [sl]
   14bf4:	str	r3, [sp]
   14bf8:	ldr	r0, [r0]
   14bfc:	ldr	r3, [sp, #96]	; 0x60
   14c00:	bl	10cb4 <fprintf@plt>
   14c04:	ldr	r3, [r6, #12]
   14c08:	str	r3, [r4, #8]
   14c0c:	ldr	r3, [sp, #32]
   14c10:	ldrb	r3, [r3]
   14c14:	cmp	r3, #58	; 0x3a
   14c18:	moveq	r0, #58	; 0x3a
   14c1c:	movne	r0, #63	; 0x3f
   14c20:	b	14b18 <__assert_fail@plt+0x3d44>
   14c24:	mov	r2, r7
   14c28:	mov	r1, r8
   14c2c:	bl	10cd8 <memset@plt>
   14c30:	ldr	r3, [sp, #16]
   14c34:	mov	r2, #1
   14c38:	strb	r2, [r5, r3]
   14c3c:	mov	r3, #1
   14c40:	str	r3, [sp, #28]
   14c44:	b	149fc <__assert_fail@plt+0x3c28>
   14c48:	andeq	r7, r2, r0, lsl r1
   14c4c:	strdeq	r6, [r1], -r9
   14c50:	andeq	r6, r1, r9, lsl r9
   14c54:	andeq	r6, r1, r8, asr #18
   14c58:	andeq	r6, r1, r0, asr r9
   14c5c:	andeq	r6, r1, r0, ror r9
   14c60:	muleq	r1, sp, r9
   14c64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c68:	sub	sp, sp, #36	; 0x24
   14c6c:	subs	r8, r0, #0
   14c70:	ldr	fp, [sp, #72]	; 0x48
   14c74:	ldr	r4, [sp, #80]	; 0x50
   14c78:	ldr	r5, [sp, #76]	; 0x4c
   14c7c:	ldr	r9, [r4, #4]
   14c80:	bgt	14c90 <__assert_fail@plt+0x3ebc>
   14c84:	mvn	r0, #0
   14c88:	add	sp, sp, #36	; 0x24
   14c8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c90:	mov	sl, r3
   14c94:	mov	r3, #0
   14c98:	mov	r7, r1
   14c9c:	mov	r6, r2
   14ca0:	str	r3, [r4, #12]
   14ca4:	ldr	r3, [r4]
   14ca8:	cmp	r3, #0
   14cac:	beq	14cd0 <__assert_fail@plt+0x3efc>
   14cb0:	ldr	r3, [r4, #16]
   14cb4:	cmp	r3, #0
   14cb8:	beq	14cd8 <__assert_fail@plt+0x3f04>
   14cbc:	ldrb	r3, [r2]
   14cc0:	sub	r3, r3, #43	; 0x2b
   14cc4:	tst	r3, #253	; 0xfd
   14cc8:	addeq	r6, r2, #1
   14ccc:	b	14d14 <__assert_fail@plt+0x3f40>
   14cd0:	mov	r3, #1
   14cd4:	str	r3, [r4]
   14cd8:	ldr	r3, [r4]
   14cdc:	str	r3, [r4, #28]
   14ce0:	str	r3, [r4, #32]
   14ce4:	mov	r3, #0
   14ce8:	str	r3, [r4, #20]
   14cec:	ldrb	r2, [r6]
   14cf0:	cmp	r2, #45	; 0x2d
   14cf4:	moveq	r3, #2
   14cf8:	beq	14d04 <__assert_fail@plt+0x3f30>
   14cfc:	cmp	r2, #43	; 0x2b
   14d00:	bne	14e30 <__assert_fail@plt+0x405c>
   14d04:	add	r6, r6, #1
   14d08:	str	r3, [r4, #24]
   14d0c:	mov	r3, #1
   14d10:	str	r3, [r4, #16]
   14d14:	ldrb	r3, [r6]
   14d18:	cmp	r3, #58	; 0x3a
   14d1c:	ldr	r3, [r4, #20]
   14d20:	moveq	r9, #0
   14d24:	cmp	r3, #0
   14d28:	beq	14d38 <__assert_fail@plt+0x3f64>
   14d2c:	ldrb	r3, [r3]
   14d30:	cmp	r3, #0
   14d34:	bne	14ecc <__assert_fail@plt+0x40f8>
   14d38:	ldr	r3, [r4]
   14d3c:	ldr	r2, [r4, #32]
   14d40:	cmp	r2, r3
   14d44:	ldr	r2, [r4, #28]
   14d48:	strgt	r3, [r4, #32]
   14d4c:	cmp	r3, r2
   14d50:	ldr	r2, [r4, #24]
   14d54:	strlt	r3, [r4, #28]
   14d58:	cmp	r2, #1
   14d5c:	bne	14db0 <__assert_fail@plt+0x3fdc>
   14d60:	ldr	r2, [r4, #28]
   14d64:	ldr	r1, [r4, #32]
   14d68:	cmp	r2, r1
   14d6c:	beq	14e60 <__assert_fail@plt+0x408c>
   14d70:	cmp	r3, r1
   14d74:	beq	14d84 <__assert_fail@plt+0x3fb0>
   14d78:	mov	r1, r4
   14d7c:	mov	r0, r7
   14d80:	bl	14758 <__assert_fail@plt+0x3984>
   14d84:	ldr	r3, [r4]
   14d88:	cmp	r3, r8
   14d8c:	bge	14dac <__assert_fail@plt+0x3fd8>
   14d90:	ldr	r2, [r7, r3, lsl #2]
   14d94:	ldrb	r1, [r2]
   14d98:	cmp	r1, #45	; 0x2d
   14d9c:	bne	14e6c <__assert_fail@plt+0x4098>
   14da0:	ldrb	r2, [r2, #1]
   14da4:	cmp	r2, #0
   14da8:	beq	14e6c <__assert_fail@plt+0x4098>
   14dac:	str	r3, [r4, #32]
   14db0:	ldr	r3, [r4]
   14db4:	cmp	r3, r8
   14db8:	beq	14e10 <__assert_fail@plt+0x403c>
   14dbc:	ldr	r1, [pc, #888]	; 1513c <__assert_fail@plt+0x4368>
   14dc0:	str	r3, [sp, #24]
   14dc4:	ldr	r0, [r7, r3, lsl #2]
   14dc8:	bl	10b7c <strcmp@plt>
   14dcc:	cmp	r0, #0
   14dd0:	bne	14e10 <__assert_fail@plt+0x403c>
   14dd4:	ldr	r3, [sp, #24]
   14dd8:	ldr	r1, [r4, #28]
   14ddc:	ldr	r2, [r4, #32]
   14de0:	add	r3, r3, #1
   14de4:	str	r3, [r4]
   14de8:	cmp	r1, r2
   14dec:	streq	r3, [r4, #28]
   14df0:	beq	14e08 <__assert_fail@plt+0x4034>
   14df4:	cmp	r3, r2
   14df8:	beq	14e08 <__assert_fail@plt+0x4034>
   14dfc:	mov	r1, r4
   14e00:	mov	r0, r7
   14e04:	bl	14758 <__assert_fail@plt+0x3984>
   14e08:	str	r8, [r4]
   14e0c:	str	r8, [r4, #32]
   14e10:	ldr	r2, [r4]
   14e14:	cmp	r2, r8
   14e18:	bne	14e78 <__assert_fail@plt+0x40a4>
   14e1c:	ldr	r3, [r4, #28]
   14e20:	ldr	r2, [r4, #32]
   14e24:	cmp	r3, r2
   14e28:	strne	r3, [r4]
   14e2c:	b	14c84 <__assert_fail@plt+0x3eb0>
   14e30:	ldr	r3, [sp, #84]	; 0x54
   14e34:	cmp	r3, #0
   14e38:	beq	14e48 <__assert_fail@plt+0x4074>
   14e3c:	mov	r3, #0
   14e40:	str	r3, [r4, #24]
   14e44:	b	14d0c <__assert_fail@plt+0x3f38>
   14e48:	ldr	r0, [pc, #752]	; 15140 <__assert_fail@plt+0x436c>
   14e4c:	bl	10c48 <getenv@plt>
   14e50:	cmp	r0, #0
   14e54:	bne	14e3c <__assert_fail@plt+0x4068>
   14e58:	mov	r3, #1
   14e5c:	b	14e40 <__assert_fail@plt+0x406c>
   14e60:	cmp	r3, r2
   14e64:	strne	r3, [r4, #28]
   14e68:	b	14d84 <__assert_fail@plt+0x3fb0>
   14e6c:	add	r3, r3, #1
   14e70:	str	r3, [r4]
   14e74:	b	14d84 <__assert_fail@plt+0x3fb0>
   14e78:	ldr	r3, [r7, r2, lsl #2]
   14e7c:	ldrb	r1, [r3]
   14e80:	cmp	r1, #45	; 0x2d
   14e84:	bne	14e94 <__assert_fail@plt+0x40c0>
   14e88:	ldrb	r1, [r3, #1]
   14e8c:	cmp	r1, #0
   14e90:	bne	14eb4 <__assert_fail@plt+0x40e0>
   14e94:	ldr	r1, [r4, #24]
   14e98:	cmp	r1, #0
   14e9c:	beq	14c84 <__assert_fail@plt+0x3eb0>
   14ea0:	add	r2, r2, #1
   14ea4:	mov	r0, #1
   14ea8:	str	r2, [r4]
   14eac:	str	r3, [r4, #12]
   14eb0:	b	14c88 <__assert_fail@plt+0x3eb4>
   14eb4:	cmp	sl, #0
   14eb8:	bne	14f48 <__assert_fail@plt+0x4174>
   14ebc:	ldr	r3, [r4]
   14ec0:	ldr	r3, [r7, r3, lsl #2]
   14ec4:	add	r3, r3, #1
   14ec8:	str	r3, [r4, #20]
   14ecc:	ldr	r3, [r4, #20]
   14ed0:	mov	r0, r6
   14ed4:	add	r2, r3, #1
   14ed8:	str	r3, [sp, #24]
   14edc:	str	r2, [r4, #20]
   14ee0:	ldrb	r5, [r3]
   14ee4:	str	r2, [sp, #28]
   14ee8:	mov	r1, r5
   14eec:	bl	10c9c <strchr@plt>
   14ef0:	ldr	r3, [sp, #24]
   14ef4:	ldr	r2, [sp, #28]
   14ef8:	ldrb	r1, [r3, #1]
   14efc:	cmp	r1, #0
   14f00:	ldreq	r1, [r4]
   14f04:	addeq	r1, r1, #1
   14f08:	streq	r1, [r4]
   14f0c:	sub	r1, r5, #58	; 0x3a
   14f10:	cmp	r0, #0
   14f14:	cmpne	r1, #1
   14f18:	bhi	14ff4 <__assert_fail@plt+0x4220>
   14f1c:	cmp	r9, #0
   14f20:	beq	14f3c <__assert_fail@plt+0x4168>
   14f24:	ldr	r0, [pc, #536]	; 15144 <__assert_fail@plt+0x4370>
   14f28:	mov	r3, r5
   14f2c:	ldr	r1, [pc, #532]	; 15148 <__assert_fail@plt+0x4374>
   14f30:	ldr	r2, [r7]
   14f34:	ldr	r0, [r0]
   14f38:	bl	10cb4 <fprintf@plt>
   14f3c:	mov	r0, #63	; 0x3f
   14f40:	str	r5, [r4, #8]
   14f44:	b	14c88 <__assert_fail@plt+0x3eb4>
   14f48:	cmp	r1, #45	; 0x2d
   14f4c:	bne	14f88 <__assert_fail@plt+0x41b4>
   14f50:	add	r3, r3, #2
   14f54:	str	r3, [r4, #20]
   14f58:	ldr	r3, [pc, #476]	; 1513c <__assert_fail@plt+0x4368>
   14f5c:	str	r5, [sp, #4]
   14f60:	str	r4, [sp, #8]
   14f64:	str	r9, [sp, #12]
   14f68:	str	r3, [sp, #16]
   14f6c:	mov	r3, sl
   14f70:	mov	r2, r6
   14f74:	str	fp, [sp]
   14f78:	mov	r1, r7
   14f7c:	mov	r0, r8
   14f80:	bl	1481c <__assert_fail@plt+0x3a48>
   14f84:	b	14c88 <__assert_fail@plt+0x3eb4>
   14f88:	cmp	r5, #0
   14f8c:	beq	14ebc <__assert_fail@plt+0x40e8>
   14f90:	ldrb	r2, [r3, #2]
   14f94:	cmp	r2, #0
   14f98:	bne	14fb4 <__assert_fail@plt+0x41e0>
   14f9c:	mov	r0, r6
   14fa0:	str	r3, [sp, #24]
   14fa4:	bl	10c9c <strchr@plt>
   14fa8:	cmp	r0, #0
   14fac:	ldr	r3, [sp, #24]
   14fb0:	bne	14ebc <__assert_fail@plt+0x40e8>
   14fb4:	add	r3, r3, #1
   14fb8:	mov	r2, r6
   14fbc:	mov	r1, r7
   14fc0:	mov	r0, r8
   14fc4:	str	r3, [r4, #20]
   14fc8:	ldr	r3, [pc, #380]	; 1514c <__assert_fail@plt+0x4378>
   14fcc:	str	fp, [sp]
   14fd0:	str	r5, [sp, #4]
   14fd4:	str	r4, [sp, #8]
   14fd8:	str	r9, [sp, #12]
   14fdc:	str	r3, [sp, #16]
   14fe0:	mov	r3, sl
   14fe4:	bl	1481c <__assert_fail@plt+0x3a48>
   14fe8:	cmn	r0, #1
   14fec:	bne	14c88 <__assert_fail@plt+0x3eb4>
   14ff0:	b	14ebc <__assert_fail@plt+0x40e8>
   14ff4:	ldrb	r1, [r0]
   14ff8:	ldrb	ip, [r0, #1]
   14ffc:	cmp	r1, #87	; 0x57
   15000:	bne	15098 <__assert_fail@plt+0x42c4>
   15004:	sub	r1, ip, #59	; 0x3b
   15008:	cmp	sl, #0
   1500c:	clz	r1, r1
   15010:	lsr	r1, r1, #5
   15014:	moveq	r1, #0
   15018:	cmp	r1, #0
   1501c:	beq	15098 <__assert_fail@plt+0x42c4>
   15020:	ldrb	r3, [r3, #1]
   15024:	cmp	r3, #0
   15028:	strne	r2, [r4, #12]
   1502c:	bne	15078 <__assert_fail@plt+0x42a4>
   15030:	ldr	r3, [r4]
   15034:	cmp	r3, r8
   15038:	ldrne	r3, [r7, r3, lsl #2]
   1503c:	strne	r3, [r4, #12]
   15040:	bne	15078 <__assert_fail@plt+0x42a4>
   15044:	cmp	r9, #0
   15048:	beq	15064 <__assert_fail@plt+0x4290>
   1504c:	ldr	r0, [pc, #240]	; 15144 <__assert_fail@plt+0x4370>
   15050:	mov	r3, r5
   15054:	ldr	r1, [pc, #244]	; 15150 <__assert_fail@plt+0x437c>
   15058:	ldr	r2, [r7]
   1505c:	ldr	r0, [r0]
   15060:	bl	10cb4 <fprintf@plt>
   15064:	str	r5, [r4, #8]
   15068:	ldrb	r0, [r6]
   1506c:	cmp	r0, #58	; 0x3a
   15070:	movne	r0, #63	; 0x3f
   15074:	b	14c88 <__assert_fail@plt+0x3eb4>
   15078:	ldr	r3, [r4, #12]
   1507c:	ldr	r2, [pc, #208]	; 15154 <__assert_fail@plt+0x4380>
   15080:	str	r3, [r4, #20]
   15084:	mov	r3, #0
   15088:	str	r3, [r4, #12]
   1508c:	stmib	sp, {r3, r4, r9}
   15090:	str	r2, [sp, #16]
   15094:	b	14f6c <__assert_fail@plt+0x4198>
   15098:	cmp	ip, #58	; 0x3a
   1509c:	bne	150d4 <__assert_fail@plt+0x4300>
   150a0:	ldrb	r1, [r3, #1]
   150a4:	ldrb	r3, [r0, #2]
   150a8:	cmp	r3, #58	; 0x3a
   150ac:	bne	150dc <__assert_fail@plt+0x4308>
   150b0:	cmp	r1, #0
   150b4:	ldrne	r3, [r4]
   150b8:	strne	r2, [r4, #12]
   150bc:	streq	r1, [r4, #12]
   150c0:	beq	150cc <__assert_fail@plt+0x42f8>
   150c4:	add	r3, r3, #1
   150c8:	str	r3, [r4]
   150cc:	mov	r3, #0
   150d0:	str	r3, [r4, #20]
   150d4:	mov	r0, r5
   150d8:	b	14c88 <__assert_fail@plt+0x3eb4>
   150dc:	cmp	r1, #0
   150e0:	ldr	r3, [r4]
   150e4:	strne	r2, [r4, #12]
   150e8:	bne	150c4 <__assert_fail@plt+0x42f0>
   150ec:	cmp	r8, r3
   150f0:	bne	15128 <__assert_fail@plt+0x4354>
   150f4:	cmp	r9, #0
   150f8:	beq	15114 <__assert_fail@plt+0x4340>
   150fc:	ldr	r0, [pc, #64]	; 15144 <__assert_fail@plt+0x4370>
   15100:	mov	r3, r5
   15104:	ldr	r1, [pc, #68]	; 15150 <__assert_fail@plt+0x437c>
   15108:	ldr	r2, [r7]
   1510c:	ldr	r0, [r0]
   15110:	bl	10cb4 <fprintf@plt>
   15114:	str	r5, [r4, #8]
   15118:	ldrb	r5, [r6]
   1511c:	cmp	r5, #58	; 0x3a
   15120:	movne	r5, #63	; 0x3f
   15124:	b	150cc <__assert_fail@plt+0x42f8>
   15128:	add	r2, r3, #1
   1512c:	ldr	r3, [r7, r3, lsl #2]
   15130:	str	r2, [r4]
   15134:	str	r3, [r4, #12]
   15138:	b	150cc <__assert_fail@plt+0x42f8>
   1513c:	ldrdeq	r6, [r1], -r5
   15140:	andeq	r6, r1, r5, asr #19
   15144:	andeq	r7, r2, r0, lsl r1
   15148:	ldrdeq	r6, [r1], -r8
   1514c:	ldrdeq	r6, [r1], -r6	; <UNPREDICTABLE>
   15150:	strdeq	r6, [r1], -r4
   15154:	andeq	r6, r1, sp, lsl sl
   15158:	push	{r4, r5, lr}
   1515c:	sub	sp, sp, #20
   15160:	ldr	r5, [pc, #84]	; 151bc <__assert_fail@plt+0x43e8>
   15164:	ldr	r4, [pc, #84]	; 151c0 <__assert_fail@plt+0x43ec>
   15168:	ldr	ip, [r5]
   1516c:	str	r4, [sp, #8]
   15170:	str	ip, [r4]
   15174:	ldr	ip, [r5, #4]
   15178:	str	ip, [r4, #4]
   1517c:	ldr	ip, [sp, #40]	; 0x28
   15180:	str	ip, [sp, #12]
   15184:	ldr	ip, [sp, #36]	; 0x24
   15188:	str	ip, [sp, #4]
   1518c:	ldr	ip, [sp, #32]
   15190:	str	ip, [sp]
   15194:	bl	14c64 <__assert_fail@plt+0x3e90>
   15198:	ldr	r3, [r4]
   1519c:	ldr	r2, [r4, #12]
   151a0:	str	r3, [r5]
   151a4:	ldr	r3, [pc, #24]	; 151c4 <__assert_fail@plt+0x43f0>
   151a8:	str	r2, [r3]
   151ac:	ldr	r3, [r4, #8]
   151b0:	str	r3, [r5, #8]
   151b4:	add	sp, sp, #20
   151b8:	pop	{r4, r5, pc}
   151bc:	andeq	r7, r2, r4, lsl #2
   151c0:	andeq	r7, r2, ip, lsr #2
   151c4:			; <UNDEFINED> instruction: 0x000271b8
   151c8:	push	{r0, r1, r2, r3, r4, lr}
   151cc:	mov	r3, #1
   151d0:	str	r3, [sp, #8]
   151d4:	mov	r3, #0
   151d8:	str	r3, [sp]
   151dc:	str	r3, [sp, #4]
   151e0:	bl	15158 <__assert_fail@plt+0x4384>
   151e4:	add	sp, sp, #20
   151e8:	pop	{pc}		; (ldr pc, [sp], #4)
   151ec:	andeq	r0, r0, r0
   151f0:	ror	r0, r0, #3
   151f4:	udiv	r3, r0, r1
   151f8:	mls	r0, r3, r1, r0
   151fc:	bx	lr
   15200:	sub	r0, r1, r0
   15204:	clz	r0, r0
   15208:	lsr	r0, r0, #5
   1520c:	bx	lr
   15210:	ldrb	r3, [r1, #16]
   15214:	cmp	r3, #0
   15218:	bne	15244 <__assert_fail@plt+0x4470>
   1521c:	vmov	s15, r0
   15220:	vldr	s14, [r1, #8]
   15224:	vcvt.f32.u32	s13, s15
   15228:	vdiv.f32	s15, s13, s14
   1522c:	vldr	s14, [pc, #140]	; 152c0 <__assert_fail@plt+0x44ec>
   15230:	vcmpe.f32	s15, s14
   15234:	vmrs	APSR_nzcv, fpscr
   15238:	bge	15258 <__assert_fail@plt+0x4484>
   1523c:	vcvt.u32.f32	s15, s15
   15240:	vmov	r0, s15
   15244:	cmp	r0, #10
   15248:	movcc	r0, #10
   1524c:	orr	r0, r0, #1
   15250:	cmn	r0, #1
   15254:	bne	1528c <__assert_fail@plt+0x44b8>
   15258:	mov	r0, #0
   1525c:	bx	lr
   15260:	add	r2, r3, #1
   15264:	add	r3, r3, #2
   15268:	add	r1, r1, r2, lsl #2
   1526c:	udiv	r2, r0, r3
   15270:	cmp	r0, r1
   15274:	mls	r2, r3, r2, r0
   15278:	bls	15298 <__assert_fail@plt+0x44c4>
   1527c:	cmp	r2, #0
   15280:	bne	15260 <__assert_fail@plt+0x448c>
   15284:	add	r0, r0, #2
   15288:	b	15250 <__assert_fail@plt+0x447c>
   1528c:	mov	r1, #9
   15290:	mov	r3, #3
   15294:	b	1526c <__assert_fail@plt+0x4498>
   15298:	cmp	r2, #0
   1529c:	beq	15284 <__assert_fail@plt+0x44b0>
   152a0:	lsrs	r3, r0, #30
   152a4:	movne	r3, #1
   152a8:	moveq	r3, #0
   152ac:	tst	r0, #536870912	; 0x20000000
   152b0:	bne	15258 <__assert_fail@plt+0x4484>
   152b4:	cmp	r3, #0
   152b8:	bxeq	lr
   152bc:	b	15258 <__assert_fail@plt+0x4484>
   152c0:	svcmi	0x00800000
   152c4:	push	{r4, lr}
   152c8:	mov	r4, r0
   152cc:	mov	r0, r1
   152d0:	ldr	r1, [r4, #8]
   152d4:	ldr	r3, [r4, #24]
   152d8:	blx	r3
   152dc:	ldr	r3, [r4, #8]
   152e0:	cmp	r3, r0
   152e4:	bhi	152ec <__assert_fail@plt+0x4518>
   152e8:	bl	10d98 <abort@plt>
   152ec:	ldr	r3, [r4]
   152f0:	add	r0, r3, r0, lsl #3
   152f4:	pop	{r4, pc}
   152f8:	push	{r4, r5, r6, r7, r8, lr}
   152fc:	mov	r8, r2
   15300:	mov	r6, r1
   15304:	mov	r5, r0
   15308:	mov	r7, r3
   1530c:	bl	152c4 <__assert_fail@plt+0x44f0>
   15310:	str	r0, [r8]
   15314:	ldr	r1, [r0]
   15318:	cmp	r1, #0
   1531c:	bne	1532c <__assert_fail@plt+0x4558>
   15320:	mov	r2, #0
   15324:	mov	r0, r2
   15328:	pop	{r4, r5, r6, r7, r8, pc}
   1532c:	cmp	r1, r6
   15330:	mov	r4, r0
   15334:	beq	1534c <__assert_fail@plt+0x4578>
   15338:	mov	r0, r6
   1533c:	ldr	r3, [r5, #28]
   15340:	blx	r3
   15344:	cmp	r0, #0
   15348:	beq	153a0 <__assert_fail@plt+0x45cc>
   1534c:	cmp	r7, #0
   15350:	ldr	r2, [r4]
   15354:	beq	15324 <__assert_fail@plt+0x4550>
   15358:	ldr	r3, [r4, #4]
   1535c:	cmp	r3, #0
   15360:	streq	r3, [r4]
   15364:	beq	15324 <__assert_fail@plt+0x4550>
   15368:	ldm	r3, {r0, r1}
   1536c:	stm	r4, {r0, r1}
   15370:	mov	r1, #0
   15374:	str	r1, [r3]
   15378:	ldr	r1, [r5, #36]	; 0x24
   1537c:	str	r1, [r3, #4]
   15380:	str	r3, [r5, #36]	; 0x24
   15384:	b	15324 <__assert_fail@plt+0x4550>
   15388:	mov	r0, r6
   1538c:	ldr	r3, [r5, #28]
   15390:	blx	r3
   15394:	cmp	r0, #0
   15398:	bne	153b8 <__assert_fail@plt+0x45e4>
   1539c:	ldr	r4, [r4, #4]
   153a0:	ldr	r3, [r4, #4]
   153a4:	cmp	r3, #0
   153a8:	beq	15320 <__assert_fail@plt+0x454c>
   153ac:	ldr	r1, [r3]
   153b0:	cmp	r1, r6
   153b4:	bne	15388 <__assert_fail@plt+0x45b4>
   153b8:	ldr	r3, [r4, #4]
   153bc:	cmp	r7, #0
   153c0:	ldr	r2, [r3]
   153c4:	beq	15324 <__assert_fail@plt+0x4550>
   153c8:	ldr	r1, [r3, #4]
   153cc:	str	r1, [r4, #4]
   153d0:	b	15370 <__assert_fail@plt+0x459c>
   153d4:	ldr	r2, [pc, #164]	; 15480 <__assert_fail@plt+0x46ac>
   153d8:	ldr	r3, [r0]
   153dc:	cmp	r3, r2
   153e0:	beq	15468 <__assert_fail@plt+0x4694>
   153e4:	vldr	s13, [pc, #132]	; 15470 <__assert_fail@plt+0x469c>
   153e8:	vldr	s14, [r3, #8]
   153ec:	vcmpe.f32	s14, s13
   153f0:	vmrs	APSR_nzcv, fpscr
   153f4:	ble	1545c <__assert_fail@plt+0x4688>
   153f8:	vldr	s15, [pc, #116]	; 15474 <__assert_fail@plt+0x46a0>
   153fc:	vcmpe.f32	s14, s15
   15400:	vmrs	APSR_nzcv, fpscr
   15404:	bpl	1545c <__assert_fail@plt+0x4688>
   15408:	vldr	s15, [pc, #104]	; 15478 <__assert_fail@plt+0x46a4>
   1540c:	vldr	s12, [r3, #12]
   15410:	vcmpe.f32	s12, s15
   15414:	vmrs	APSR_nzcv, fpscr
   15418:	ble	1545c <__assert_fail@plt+0x4688>
   1541c:	vldr	s15, [r3]
   15420:	vcmpe.f32	s15, #0.0
   15424:	vmrs	APSR_nzcv, fpscr
   15428:	blt	1545c <__assert_fail@plt+0x4688>
   1542c:	vadd.f32	s15, s15, s13
   15430:	vldr	s13, [r3, #4]
   15434:	vcmpe.f32	s15, s13
   15438:	vmrs	APSR_nzcv, fpscr
   1543c:	bpl	1545c <__assert_fail@plt+0x4688>
   15440:	vldr	s12, [pc, #52]	; 1547c <__assert_fail@plt+0x46a8>
   15444:	vcmpe.f32	s13, s12
   15448:	vmrs	APSR_nzcv, fpscr
   1544c:	bhi	1545c <__assert_fail@plt+0x4688>
   15450:	vcmpe.f32	s14, s15
   15454:	vmrs	APSR_nzcv, fpscr
   15458:	bgt	15468 <__assert_fail@plt+0x4694>
   1545c:	str	r2, [r0]
   15460:	mov	r0, #0
   15464:	bx	lr
   15468:	mov	r0, #1
   1546c:	bx	lr
   15470:	stclcc	12, cr12, [ip, #820]	; 0x334
   15474:	svccc	0x00666666
   15478:	svccc	0x008ccccd
   1547c:	svccc	0x00800000
   15480:	andeq	r6, r1, r4, lsr #20
   15484:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15488:	mov	r5, r0
   1548c:	mov	r7, r1
   15490:	mov	r8, r2
   15494:	mov	r9, #0
   15498:	ldr	r4, [r1]
   1549c:	add	r4, r4, #8
   154a0:	ldr	r2, [r7, #4]
   154a4:	sub	r3, r4, #8
   154a8:	cmp	r2, r3
   154ac:	bhi	154bc <__assert_fail@plt+0x46e8>
   154b0:	mov	r8, #1
   154b4:	mov	r0, r8
   154b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   154bc:	ldr	r3, [r4, #-8]
   154c0:	cmp	r3, #0
   154c4:	ldrne	r6, [r4, #-4]
   154c8:	bne	15524 <__assert_fail@plt+0x4750>
   154cc:	add	r4, r4, #8
   154d0:	b	154a0 <__assert_fail@plt+0x46cc>
   154d4:	ldr	sl, [r6]
   154d8:	mov	r0, r5
   154dc:	mov	r1, sl
   154e0:	bl	152c4 <__assert_fail@plt+0x44f0>
   154e4:	ldr	r2, [r0]
   154e8:	ldr	r1, [r6, #4]
   154ec:	cmp	r2, #0
   154f0:	ldrne	r3, [r0, #4]
   154f4:	strne	r3, [r6, #4]
   154f8:	strne	r6, [r0, #4]
   154fc:	bne	15520 <__assert_fail@plt+0x474c>
   15500:	ldr	r3, [r5, #12]
   15504:	str	sl, [r0]
   15508:	add	r3, r3, #1
   1550c:	str	r3, [r5, #12]
   15510:	str	r2, [r6]
   15514:	ldr	r3, [r5, #36]	; 0x24
   15518:	str	r3, [r6, #4]
   1551c:	str	r6, [r5, #36]	; 0x24
   15520:	mov	r6, r1
   15524:	cmp	r6, #0
   15528:	bne	154d4 <__assert_fail@plt+0x4700>
   1552c:	cmp	r8, #0
   15530:	str	r6, [r4, #-4]
   15534:	ldr	sl, [r4, #-8]
   15538:	bne	154cc <__assert_fail@plt+0x46f8>
   1553c:	mov	r1, sl
   15540:	mov	r0, r5
   15544:	bl	152c4 <__assert_fail@plt+0x44f0>
   15548:	ldr	r3, [r0]
   1554c:	mov	r6, r0
   15550:	cmp	r3, #0
   15554:	beq	155a0 <__assert_fail@plt+0x47cc>
   15558:	ldr	r0, [r5, #36]	; 0x24
   1555c:	cmp	r0, #0
   15560:	ldrne	r3, [r0, #4]
   15564:	strne	r3, [r5, #36]	; 0x24
   15568:	bne	1557c <__assert_fail@plt+0x47a8>
   1556c:	mov	r0, #8
   15570:	bl	1618c <__assert_fail@plt+0x53b8>
   15574:	cmp	r0, #0
   15578:	beq	154b4 <__assert_fail@plt+0x46e0>
   1557c:	ldr	r3, [r6, #4]
   15580:	str	sl, [r0]
   15584:	str	r3, [r0, #4]
   15588:	str	r0, [r6, #4]
   1558c:	ldr	r3, [r7, #12]
   15590:	str	r9, [r4, #-8]
   15594:	sub	r3, r3, #1
   15598:	str	r3, [r7, #12]
   1559c:	b	154cc <__assert_fail@plt+0x46f8>
   155a0:	ldr	r3, [r5, #12]
   155a4:	str	sl, [r0]
   155a8:	add	r3, r3, #1
   155ac:	str	r3, [r5, #12]
   155b0:	b	1558c <__assert_fail@plt+0x47b8>
   155b4:	ldr	r0, [r0, #8]
   155b8:	bx	lr
   155bc:	ldr	r0, [r0, #12]
   155c0:	bx	lr
   155c4:	ldr	r0, [r0, #16]
   155c8:	bx	lr
   155cc:	ldm	r0, {r3, ip}
   155d0:	mov	r0, #0
   155d4:	cmp	ip, r3
   155d8:	bxls	lr
   155dc:	ldr	r2, [r3]
   155e0:	cmp	r2, #0
   155e4:	beq	1560c <__assert_fail@plt+0x4838>
   155e8:	mov	r1, r3
   155ec:	mov	r2, #1
   155f0:	b	155f8 <__assert_fail@plt+0x4824>
   155f4:	add	r2, r2, #1
   155f8:	ldr	r1, [r1, #4]
   155fc:	cmp	r1, #0
   15600:	bne	155f4 <__assert_fail@plt+0x4820>
   15604:	cmp	r0, r2
   15608:	movcc	r0, r2
   1560c:	add	r3, r3, #8
   15610:	b	155d4 <__assert_fail@plt+0x4800>
   15614:	push	{lr}		; (str lr, [sp, #-4]!)
   15618:	mov	r3, #0
   1561c:	mov	r1, r3
   15620:	ldm	r0, {r2, lr}
   15624:	cmp	lr, r2
   15628:	bhi	1564c <__assert_fail@plt+0x4878>
   1562c:	ldr	r2, [r0, #12]
   15630:	cmp	r2, r1
   15634:	ldreq	r0, [r0, #16]
   15638:	subeq	r0, r0, r3
   1563c:	clzeq	r0, r0
   15640:	lsreq	r0, r0, #5
   15644:	movne	r0, #0
   15648:	pop	{pc}		; (ldr pc, [sp], #4)
   1564c:	ldr	ip, [r2]
   15650:	cmp	ip, #0
   15654:	addne	r1, r1, #1
   15658:	addne	r3, r3, #1
   1565c:	movne	ip, r2
   15660:	bne	15670 <__assert_fail@plt+0x489c>
   15664:	add	r2, r2, #8
   15668:	b	15624 <__assert_fail@plt+0x4850>
   1566c:	add	r3, r3, #1
   15670:	ldr	ip, [ip, #4]
   15674:	cmp	ip, #0
   15678:	bne	1566c <__assert_fail@plt+0x4898>
   1567c:	b	15664 <__assert_fail@plt+0x4890>
   15680:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   15684:	mov	r6, r0
   15688:	mov	r4, r1
   1568c:	bl	155cc <__assert_fail@plt+0x47f8>
   15690:	ldr	r5, [r6, #8]
   15694:	mov	r8, r0
   15698:	mov	r0, r4
   1569c:	ldr	r7, [r6, #12]
   156a0:	ldr	r1, [pc, #104]	; 15710 <__assert_fail@plt+0x493c>
   156a4:	ldr	r2, [r6, #16]
   156a8:	bl	10cb4 <fprintf@plt>
   156ac:	mov	r2, r5
   156b0:	ldr	r1, [pc, #92]	; 15714 <__assert_fail@plt+0x4940>
   156b4:	mov	r0, r4
   156b8:	bl	10cb4 <fprintf@plt>
   156bc:	vmov	s15, r7
   156c0:	mov	r2, r7
   156c4:	mov	r0, r4
   156c8:	ldr	r1, [pc, #72]	; 15718 <__assert_fail@plt+0x4944>
   156cc:	vcvt.f64.u32	d6, s15
   156d0:	vldr	d7, [pc, #48]	; 15708 <__assert_fail@plt+0x4934>
   156d4:	vmul.f64	d6, d6, d7
   156d8:	vmov	s15, r5
   156dc:	vcvt.f64.u32	d7, s15
   156e0:	vdiv.f64	d5, d6, d7
   156e4:	vstr	d5, [sp]
   156e8:	bl	10cb4 <fprintf@plt>
   156ec:	ldr	r1, [pc, #40]	; 1571c <__assert_fail@plt+0x4948>
   156f0:	mov	r2, r8
   156f4:	mov	r0, r4
   156f8:	add	sp, sp, #8
   156fc:	pop	{r4, r5, r6, r7, r8, lr}
   15700:	b	10cb4 <fprintf@plt>
   15704:	nop	{0}
   15708:	andeq	r0, r0, r0
   1570c:	subsmi	r0, r9, r0
   15710:	andeq	r6, r1, r8, lsr sl
   15714:	andeq	r6, r1, r0, asr sl
   15718:	andeq	r6, r1, r8, ror #20
   1571c:	andeq	r6, r1, r9, lsl #21
   15720:	push	{r4, r5, r6, lr}
   15724:	mov	r6, r0
   15728:	mov	r5, r1
   1572c:	bl	152c4 <__assert_fail@plt+0x44f0>
   15730:	ldr	r3, [r0]
   15734:	cmp	r3, #0
   15738:	beq	15774 <__assert_fail@plt+0x49a0>
   1573c:	mov	r4, r0
   15740:	ldr	r1, [r4]
   15744:	cmp	r1, r5
   15748:	bne	15754 <__assert_fail@plt+0x4980>
   1574c:	ldr	r0, [r4]
   15750:	pop	{r4, r5, r6, pc}
   15754:	mov	r0, r5
   15758:	ldr	r3, [r6, #28]
   1575c:	blx	r3
   15760:	cmp	r0, #0
   15764:	bne	1574c <__assert_fail@plt+0x4978>
   15768:	ldr	r4, [r4, #4]
   1576c:	cmp	r4, #0
   15770:	bne	15740 <__assert_fail@plt+0x496c>
   15774:	mov	r0, #0
   15778:	pop	{r4, r5, r6, pc}
   1577c:	ldr	r3, [r0, #16]
   15780:	cmp	r3, #0
   15784:	beq	157b4 <__assert_fail@plt+0x49e0>
   15788:	ldr	r3, [r0]
   1578c:	ldr	r2, [r0, #4]
   15790:	cmp	r2, r3
   15794:	bhi	157a0 <__assert_fail@plt+0x49cc>
   15798:	push	{r4, lr}
   1579c:	bl	10d98 <abort@plt>
   157a0:	ldr	r0, [r3]
   157a4:	cmp	r0, #0
   157a8:	bxne	lr
   157ac:	add	r3, r3, #8
   157b0:	b	15790 <__assert_fail@plt+0x49bc>
   157b4:	mov	r0, r3
   157b8:	bx	lr
   157bc:	push	{r4, r5, r6, lr}
   157c0:	mov	r4, r0
   157c4:	mov	r5, r1
   157c8:	bl	152c4 <__assert_fail@plt+0x44f0>
   157cc:	mov	r2, r0
   157d0:	mov	r3, r0
   157d4:	ldm	r3, {r1, r3}
   157d8:	cmp	r1, r5
   157dc:	bne	157f0 <__assert_fail@plt+0x4a1c>
   157e0:	cmp	r3, #0
   157e4:	beq	157f8 <__assert_fail@plt+0x4a24>
   157e8:	ldr	r0, [r3]
   157ec:	pop	{r4, r5, r6, pc}
   157f0:	cmp	r3, #0
   157f4:	bne	157d4 <__assert_fail@plt+0x4a00>
   157f8:	ldr	r3, [r4, #4]
   157fc:	add	r2, r2, #8
   15800:	cmp	r3, r2
   15804:	bhi	15810 <__assert_fail@plt+0x4a3c>
   15808:	mov	r0, #0
   1580c:	pop	{r4, r5, r6, pc}
   15810:	ldr	r0, [r2]
   15814:	cmp	r0, #0
   15818:	beq	157fc <__assert_fail@plt+0x4a28>
   1581c:	pop	{r4, r5, r6, pc}
   15820:	ldr	ip, [r0]
   15824:	mov	r3, #0
   15828:	push	{r4, r5, lr}
   1582c:	ldr	lr, [r0, #4]
   15830:	cmp	lr, ip
   15834:	bhi	15840 <__assert_fail@plt+0x4a6c>
   15838:	mov	r0, r3
   1583c:	pop	{r4, r5, pc}
   15840:	ldr	lr, [ip]
   15844:	cmp	lr, #0
   15848:	beq	15874 <__assert_fail@plt+0x4aa0>
   1584c:	add	r4, r1, r3, lsl #2
   15850:	mov	lr, ip
   15854:	cmp	r2, r3
   15858:	bls	15838 <__assert_fail@plt+0x4a64>
   1585c:	ldr	r5, [lr]
   15860:	add	r3, r3, #1
   15864:	str	r5, [r4], #4
   15868:	ldr	lr, [lr, #4]
   1586c:	cmp	lr, #0
   15870:	bne	15854 <__assert_fail@plt+0x4a80>
   15874:	add	ip, ip, #8
   15878:	b	1582c <__assert_fail@plt+0x4a58>
   1587c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15880:	mov	r7, r0
   15884:	mov	r8, r1
   15888:	mov	r9, r2
   1588c:	mov	r6, #0
   15890:	ldr	r4, [r0]
   15894:	ldr	r3, [r7, #4]
   15898:	cmp	r3, r4
   1589c:	bhi	158a8 <__assert_fail@plt+0x4ad4>
   158a0:	mov	r0, r6
   158a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   158a8:	ldr	r3, [r4]
   158ac:	cmp	r3, #0
   158b0:	beq	158dc <__assert_fail@plt+0x4b08>
   158b4:	mov	r5, r4
   158b8:	mov	r1, r9
   158bc:	ldr	r0, [r5]
   158c0:	blx	r8
   158c4:	cmp	r0, #0
   158c8:	beq	158a0 <__assert_fail@plt+0x4acc>
   158cc:	ldr	r5, [r5, #4]
   158d0:	add	r6, r6, #1
   158d4:	cmp	r5, #0
   158d8:	bne	158b8 <__assert_fail@plt+0x4ae4>
   158dc:	add	r4, r4, #8
   158e0:	b	15894 <__assert_fail@plt+0x4ac0>
   158e4:	sub	r2, r0, #1
   158e8:	mov	r0, #0
   158ec:	ldrb	r3, [r2, #1]!
   158f0:	cmp	r3, #0
   158f4:	bxeq	lr
   158f8:	rsb	r0, r0, r0, lsl #5
   158fc:	add	r0, r0, r3
   15900:	udiv	r3, r0, r1
   15904:	mls	r0, r1, r3, r0
   15908:	b	158ec <__assert_fail@plt+0x4b18>
   1590c:	push	{lr}		; (str lr, [sp, #-4]!)
   15910:	mov	ip, r0
   15914:	ldr	lr, [pc, #16]	; 1592c <__assert_fail@plt+0x4b58>
   15918:	ldm	lr!, {r0, r1, r2, r3}
   1591c:	stmia	ip!, {r0, r1, r2, r3}
   15920:	ldr	r3, [lr]
   15924:	str	r3, [ip]
   15928:	pop	{pc}		; (ldr pc, [sp], #4)
   1592c:	andeq	r6, r1, r4, lsr #20
   15930:	cmp	r2, #0
   15934:	push	{r4, r5, r6, r7, r8, lr}
   15938:	mov	r8, r0
   1593c:	mov	r0, #40	; 0x28
   15940:	mov	r5, r1
   15944:	ldr	r7, [pc, #164]	; 159f0 <__assert_fail@plt+0x4c1c>
   15948:	movne	r7, r2
   1594c:	cmp	r3, #0
   15950:	ldr	r6, [pc, #156]	; 159f4 <__assert_fail@plt+0x4c20>
   15954:	movne	r6, r3
   15958:	bl	1618c <__assert_fail@plt+0x53b8>
   1595c:	subs	r4, r0, #0
   15960:	beq	159d8 <__assert_fail@plt+0x4c04>
   15964:	ldr	r3, [pc, #140]	; 159f8 <__assert_fail@plt+0x4c24>
   15968:	cmp	r5, #0
   1596c:	mov	r0, r4
   15970:	moveq	r5, r3
   15974:	str	r5, [r0, #20]!
   15978:	bl	153d4 <__assert_fail@plt+0x4600>
   1597c:	cmp	r0, #0
   15980:	beq	159e0 <__assert_fail@plt+0x4c0c>
   15984:	mov	r1, r5
   15988:	mov	r0, r8
   1598c:	bl	15210 <__assert_fail@plt+0x443c>
   15990:	cmp	r0, #0
   15994:	str	r0, [r4, #8]
   15998:	beq	159e0 <__assert_fail@plt+0x4c0c>
   1599c:	mov	r1, #8
   159a0:	bl	16138 <__assert_fail@plt+0x5364>
   159a4:	cmp	r0, #0
   159a8:	str	r0, [r4]
   159ac:	beq	159e0 <__assert_fail@plt+0x4c0c>
   159b0:	ldr	r3, [r4, #8]
   159b4:	str	r7, [r4, #24]
   159b8:	ldr	r2, [sp, #24]
   159bc:	str	r6, [r4, #28]
   159c0:	add	r0, r0, r3, lsl #3
   159c4:	mov	r3, #0
   159c8:	str	r0, [r4, #4]
   159cc:	str	r3, [r4, #12]
   159d0:	str	r3, [r4, #16]
   159d4:	strd	r2, [r4, #32]
   159d8:	mov	r0, r4
   159dc:	pop	{r4, r5, r6, r7, r8, pc}
   159e0:	mov	r0, r4
   159e4:	mov	r4, #0
   159e8:	bl	12a20 <__assert_fail@plt+0x1c4c>
   159ec:	b	159d8 <__assert_fail@plt+0x4c04>
   159f0:	strdeq	r5, [r1], -r0
   159f4:	andeq	r5, r1, r0, lsl #4
   159f8:	andeq	r6, r1, r4, lsr #20
   159fc:	push	{r4, r5, r6, r7, r8, lr}
   15a00:	mov	r5, r0
   15a04:	mov	r7, #0
   15a08:	ldr	r4, [r0]
   15a0c:	add	r4, r4, #8
   15a10:	ldr	r2, [r5, #4]
   15a14:	sub	r3, r4, #8
   15a18:	cmp	r2, r3
   15a1c:	bhi	15a30 <__assert_fail@plt+0x4c5c>
   15a20:	mov	r3, #0
   15a24:	str	r3, [r5, #12]
   15a28:	str	r3, [r5, #16]
   15a2c:	pop	{r4, r5, r6, r7, r8, pc}
   15a30:	ldr	r3, [r4, #-8]
   15a34:	cmp	r3, #0
   15a38:	ldrne	r6, [r4, #-4]
   15a3c:	bne	15a70 <__assert_fail@plt+0x4c9c>
   15a40:	add	r4, r4, #8
   15a44:	b	15a10 <__assert_fail@plt+0x4c3c>
   15a48:	cmp	r3, #0
   15a4c:	beq	15a58 <__assert_fail@plt+0x4c84>
   15a50:	ldr	r0, [r6]
   15a54:	blx	r3
   15a58:	ldr	r3, [r6, #4]
   15a5c:	ldr	r2, [r5, #36]	; 0x24
   15a60:	str	r7, [r6]
   15a64:	str	r2, [r6, #4]
   15a68:	str	r6, [r5, #36]	; 0x24
   15a6c:	mov	r6, r3
   15a70:	cmp	r6, #0
   15a74:	ldr	r3, [r5, #32]
   15a78:	bne	15a48 <__assert_fail@plt+0x4c74>
   15a7c:	cmp	r3, #0
   15a80:	beq	15a8c <__assert_fail@plt+0x4cb8>
   15a84:	ldr	r0, [r4, #-8]
   15a88:	blx	r3
   15a8c:	str	r7, [r4, #-8]
   15a90:	str	r7, [r4, #-4]
   15a94:	b	15a40 <__assert_fail@plt+0x4c6c>
   15a98:	ldr	r3, [r0, #32]
   15a9c:	push	{r4, r5, r6, lr}
   15aa0:	mov	r4, r0
   15aa4:	cmp	r3, #0
   15aa8:	bne	15adc <__assert_fail@plt+0x4d08>
   15aac:	ldr	r5, [r4]
   15ab0:	ldr	r3, [r4, #4]
   15ab4:	cmp	r3, r5
   15ab8:	bhi	15b2c <__assert_fail@plt+0x4d58>
   15abc:	ldr	r0, [r4, #36]	; 0x24
   15ac0:	cmp	r0, #0
   15ac4:	bne	15b4c <__assert_fail@plt+0x4d78>
   15ac8:	ldr	r0, [r4]
   15acc:	bl	12a20 <__assert_fail@plt+0x1c4c>
   15ad0:	mov	r0, r4
   15ad4:	pop	{r4, r5, r6, lr}
   15ad8:	b	12a20 <__assert_fail@plt+0x1c4c>
   15adc:	ldr	r3, [r0, #16]
   15ae0:	cmp	r3, #0
   15ae4:	ldrne	r5, [r0]
   15ae8:	beq	15aac <__assert_fail@plt+0x4cd8>
   15aec:	ldr	r3, [r4, #4]
   15af0:	cmp	r3, r5
   15af4:	bls	15aac <__assert_fail@plt+0x4cd8>
   15af8:	ldr	r3, [r5]
   15afc:	cmp	r3, #0
   15b00:	bne	15b0c <__assert_fail@plt+0x4d38>
   15b04:	add	r5, r5, #8
   15b08:	b	15aec <__assert_fail@plt+0x4d18>
   15b0c:	mov	r6, r5
   15b10:	ldr	r0, [r6]
   15b14:	ldr	r3, [r4, #32]
   15b18:	blx	r3
   15b1c:	ldr	r6, [r6, #4]
   15b20:	cmp	r6, #0
   15b24:	bne	15b10 <__assert_fail@plt+0x4d3c>
   15b28:	b	15b04 <__assert_fail@plt+0x4d30>
   15b2c:	ldr	r0, [r5, #4]
   15b30:	cmp	r0, #0
   15b34:	addeq	r5, r5, #8
   15b38:	beq	15ab0 <__assert_fail@plt+0x4cdc>
   15b3c:	ldr	r6, [r0, #4]
   15b40:	bl	12a20 <__assert_fail@plt+0x1c4c>
   15b44:	mov	r0, r6
   15b48:	b	15b30 <__assert_fail@plt+0x4d5c>
   15b4c:	ldr	r5, [r0, #4]
   15b50:	bl	12a20 <__assert_fail@plt+0x1c4c>
   15b54:	mov	r0, r5
   15b58:	b	15ac0 <__assert_fail@plt+0x4cec>
   15b5c:	push	{r4, r5, lr}
   15b60:	mov	r4, r0
   15b64:	sub	sp, sp, #44	; 0x2c
   15b68:	mov	r0, r1
   15b6c:	ldr	r1, [r4, #20]
   15b70:	bl	15210 <__assert_fail@plt+0x443c>
   15b74:	subs	r5, r0, #0
   15b78:	bne	15b8c <__assert_fail@plt+0x4db8>
   15b7c:	mov	r5, #0
   15b80:	mov	r0, r5
   15b84:	add	sp, sp, #44	; 0x2c
   15b88:	pop	{r4, r5, pc}
   15b8c:	ldr	r3, [r4, #8]
   15b90:	cmp	r3, r5
   15b94:	beq	15c74 <__assert_fail@plt+0x4ea0>
   15b98:	mov	r1, #8
   15b9c:	bl	16138 <__assert_fail@plt+0x5364>
   15ba0:	cmp	r0, #0
   15ba4:	str	r0, [sp]
   15ba8:	beq	15b7c <__assert_fail@plt+0x4da8>
   15bac:	ldr	r3, [r4, #20]
   15bb0:	mov	r2, #0
   15bb4:	add	r0, r0, r5, lsl #3
   15bb8:	mov	r1, r4
   15bbc:	stmib	sp, {r0, r5}
   15bc0:	mov	r0, sp
   15bc4:	str	r2, [sp, #12]
   15bc8:	strd	r2, [sp, #16]
   15bcc:	ldr	r3, [r4, #24]
   15bd0:	str	r3, [sp, #24]
   15bd4:	ldr	r3, [r4, #28]
   15bd8:	str	r3, [sp, #28]
   15bdc:	ldr	r3, [r4, #32]
   15be0:	str	r3, [sp, #32]
   15be4:	ldr	r3, [r4, #36]	; 0x24
   15be8:	str	r3, [sp, #36]	; 0x24
   15bec:	bl	15484 <__assert_fail@plt+0x46b0>
   15bf0:	subs	r5, r0, #0
   15bf4:	beq	15c2c <__assert_fail@plt+0x4e58>
   15bf8:	ldr	r0, [r4]
   15bfc:	bl	12a20 <__assert_fail@plt+0x1c4c>
   15c00:	ldr	r3, [sp]
   15c04:	str	r3, [r4]
   15c08:	ldr	r3, [sp, #4]
   15c0c:	str	r3, [r4, #4]
   15c10:	ldr	r3, [sp, #8]
   15c14:	str	r3, [r4, #8]
   15c18:	ldr	r3, [sp, #12]
   15c1c:	str	r3, [r4, #12]
   15c20:	ldr	r3, [sp, #36]	; 0x24
   15c24:	str	r3, [r4, #36]	; 0x24
   15c28:	b	15b80 <__assert_fail@plt+0x4dac>
   15c2c:	ldr	r3, [sp, #36]	; 0x24
   15c30:	mov	r2, #1
   15c34:	mov	r1, sp
   15c38:	mov	r0, r4
   15c3c:	str	r3, [r4, #36]	; 0x24
   15c40:	bl	15484 <__assert_fail@plt+0x46b0>
   15c44:	cmp	r0, #0
   15c48:	bne	15c50 <__assert_fail@plt+0x4e7c>
   15c4c:	bl	10d98 <abort@plt>
   15c50:	mov	r2, r5
   15c54:	mov	r1, sp
   15c58:	mov	r0, r4
   15c5c:	bl	15484 <__assert_fail@plt+0x46b0>
   15c60:	cmp	r0, #0
   15c64:	beq	15c4c <__assert_fail@plt+0x4e78>
   15c68:	ldr	r0, [sp]
   15c6c:	bl	12a20 <__assert_fail@plt+0x1c4c>
   15c70:	b	15b80 <__assert_fail@plt+0x4dac>
   15c74:	mov	r5, #1
   15c78:	b	15b80 <__assert_fail@plt+0x4dac>
   15c7c:	push	{r0, r1, r4, r5, r6, lr}
   15c80:	subs	r6, r1, #0
   15c84:	bne	15c8c <__assert_fail@plt+0x4eb8>
   15c88:	bl	10d98 <abort@plt>
   15c8c:	mov	r5, r2
   15c90:	mov	r3, #0
   15c94:	add	r2, sp, #4
   15c98:	mov	r4, r0
   15c9c:	bl	152f8 <__assert_fail@plt+0x4524>
   15ca0:	cmp	r0, #0
   15ca4:	beq	15cbc <__assert_fail@plt+0x4ee8>
   15ca8:	cmp	r5, #0
   15cac:	strne	r0, [r5]
   15cb0:	movne	r0, #0
   15cb4:	moveq	r0, r5
   15cb8:	b	15d3c <__assert_fail@plt+0x4f68>
   15cbc:	vldr	s15, [r4, #12]
   15cc0:	ldr	r3, [r4, #20]
   15cc4:	vcvt.f32.u32	s14, s15
   15cc8:	vldr	s15, [r4, #8]
   15ccc:	vldr	s13, [r3, #8]
   15cd0:	vcvt.f32.u32	s15, s15
   15cd4:	vmul.f32	s15, s15, s13
   15cd8:	vcmpe.f32	s14, s15
   15cdc:	vmrs	APSR_nzcv, fpscr
   15ce0:	ble	15d78 <__assert_fail@plt+0x4fa4>
   15ce4:	add	r0, r4, #20
   15ce8:	bl	153d4 <__assert_fail@plt+0x4600>
   15cec:	vldr	s15, [r4, #8]
   15cf0:	vldr	s14, [r4, #12]
   15cf4:	ldr	r3, [r4, #20]
   15cf8:	vcvt.f32.u32	s15, s15
   15cfc:	vcvt.f32.u32	s14, s14
   15d00:	vldr	s13, [r3, #8]
   15d04:	vmul.f32	s12, s13, s15
   15d08:	vcmpe.f32	s14, s12
   15d0c:	vmrs	APSR_nzcv, fpscr
   15d10:	ble	15d78 <__assert_fail@plt+0x4fa4>
   15d14:	vldr	s14, [r3, #12]
   15d18:	ldrb	r3, [r3, #16]
   15d1c:	vmul.f32	s15, s15, s14
   15d20:	vldr	s14, [pc, #204]	; 15df4 <__assert_fail@plt+0x5020>
   15d24:	cmp	r3, #0
   15d28:	vmuleq.f32	s15, s15, s13
   15d2c:	vcmpe.f32	s15, s14
   15d30:	vmrs	APSR_nzcv, fpscr
   15d34:	blt	15d44 <__assert_fail@plt+0x4f70>
   15d38:	mvn	r0, #0
   15d3c:	add	sp, sp, #8
   15d40:	pop	{r4, r5, r6, pc}
   15d44:	vcvt.u32.f32	s15, s15
   15d48:	mov	r0, r4
   15d4c:	vmov	r1, s15
   15d50:	bl	15b5c <__assert_fail@plt+0x4d88>
   15d54:	cmp	r0, #0
   15d58:	beq	15d38 <__assert_fail@plt+0x4f64>
   15d5c:	mov	r3, #0
   15d60:	add	r2, sp, #4
   15d64:	mov	r1, r6
   15d68:	mov	r0, r4
   15d6c:	bl	152f8 <__assert_fail@plt+0x4524>
   15d70:	cmp	r0, #0
   15d74:	bne	15c88 <__assert_fail@plt+0x4eb4>
   15d78:	ldr	r3, [sp, #4]
   15d7c:	ldr	r2, [r3]
   15d80:	cmp	r2, #0
   15d84:	beq	15dd4 <__assert_fail@plt+0x5000>
   15d88:	ldr	r0, [r4, #36]	; 0x24
   15d8c:	cmp	r0, #0
   15d90:	ldrne	r3, [r0, #4]
   15d94:	strne	r3, [r4, #36]	; 0x24
   15d98:	bne	15dac <__assert_fail@plt+0x4fd8>
   15d9c:	mov	r0, #8
   15da0:	bl	1618c <__assert_fail@plt+0x53b8>
   15da4:	cmp	r0, #0
   15da8:	beq	15d38 <__assert_fail@plt+0x4f64>
   15dac:	ldr	r3, [sp, #4]
   15db0:	ldr	r2, [r3, #4]
   15db4:	str	r6, [r0]
   15db8:	str	r2, [r0, #4]
   15dbc:	str	r0, [r3, #4]
   15dc0:	ldr	r3, [r4, #16]
   15dc4:	add	r3, r3, #1
   15dc8:	str	r3, [r4, #16]
   15dcc:	mov	r0, #1
   15dd0:	b	15d3c <__assert_fail@plt+0x4f68>
   15dd4:	str	r6, [r3]
   15dd8:	ldr	r3, [r4, #16]
   15ddc:	add	r3, r3, #1
   15de0:	str	r3, [r4, #16]
   15de4:	ldr	r3, [r4, #12]
   15de8:	add	r3, r3, #1
   15dec:	str	r3, [r4, #12]
   15df0:	b	15dcc <__assert_fail@plt+0x4ff8>
   15df4:	svcmi	0x00800000
   15df8:	push	{r0, r1, r4, lr}
   15dfc:	add	r2, sp, #4
   15e00:	mov	r4, r1
   15e04:	bl	15c7c <__assert_fail@plt+0x4ea8>
   15e08:	cmn	r0, #1
   15e0c:	moveq	r4, #0
   15e10:	beq	15e1c <__assert_fail@plt+0x5048>
   15e14:	cmp	r0, #0
   15e18:	ldreq	r4, [sp, #4]
   15e1c:	mov	r0, r4
   15e20:	add	sp, sp, #8
   15e24:	pop	{r4, pc}
   15e28:	push	{r0, r1, r4, r5, r6, lr}
   15e2c:	mov	r3, #1
   15e30:	add	r2, sp, #4
   15e34:	mov	r4, r0
   15e38:	bl	152f8 <__assert_fail@plt+0x4524>
   15e3c:	subs	r5, r0, #0
   15e40:	beq	15ef8 <__assert_fail@plt+0x5124>
   15e44:	ldr	r3, [r4, #16]
   15e48:	sub	r3, r3, #1
   15e4c:	str	r3, [r4, #16]
   15e50:	ldr	r3, [sp, #4]
   15e54:	ldr	r3, [r3]
   15e58:	cmp	r3, #0
   15e5c:	bne	15ef8 <__assert_fail@plt+0x5124>
   15e60:	vldr	s14, [r4, #8]
   15e64:	ldr	r3, [r4, #12]
   15e68:	vcvt.f32.u32	s14, s14
   15e6c:	sub	r3, r3, #1
   15e70:	vmov	s15, r3
   15e74:	str	r3, [r4, #12]
   15e78:	ldr	r3, [r4, #20]
   15e7c:	vldr	s13, [r3]
   15e80:	vcvt.f32.u32	s15, s15
   15e84:	vmul.f32	s14, s14, s13
   15e88:	vcmpe.f32	s15, s14
   15e8c:	vmrs	APSR_nzcv, fpscr
   15e90:	bpl	15ef8 <__assert_fail@plt+0x5124>
   15e94:	add	r0, r4, #20
   15e98:	bl	153d4 <__assert_fail@plt+0x4600>
   15e9c:	vldr	s15, [r4, #8]
   15ea0:	vldr	s14, [r4, #12]
   15ea4:	ldr	r3, [r4, #20]
   15ea8:	vcvt.f32.u32	s15, s15
   15eac:	vcvt.f32.u32	s13, s14
   15eb0:	vldr	s14, [r3]
   15eb4:	vmul.f32	s14, s15, s14
   15eb8:	vcmpe.f32	s13, s14
   15ebc:	vmrs	APSR_nzcv, fpscr
   15ec0:	bpl	15ef8 <__assert_fail@plt+0x5124>
   15ec4:	ldrb	r2, [r3, #16]
   15ec8:	mov	r0, r4
   15ecc:	vldr	s14, [r3, #4]
   15ed0:	cmp	r2, #0
   15ed4:	vmul.f32	s15, s15, s14
   15ed8:	vldreq	s14, [r3, #8]
   15edc:	vmuleq.f32	s15, s15, s14
   15ee0:	vcvt.u32.f32	s15, s15
   15ee4:	vmov	r1, s15
   15ee8:	bl	15b5c <__assert_fail@plt+0x4d88>
   15eec:	cmp	r0, #0
   15ef0:	ldreq	r0, [r4, #36]	; 0x24
   15ef4:	beq	15f10 <__assert_fail@plt+0x513c>
   15ef8:	mov	r0, r5
   15efc:	add	sp, sp, #8
   15f00:	pop	{r4, r5, r6, pc}
   15f04:	ldr	r6, [r0, #4]
   15f08:	bl	12a20 <__assert_fail@plt+0x1c4c>
   15f0c:	mov	r0, r6
   15f10:	cmp	r0, #0
   15f14:	bne	15f04 <__assert_fail@plt+0x5130>
   15f18:	str	r0, [r4, #36]	; 0x24
   15f1c:	b	15ef8 <__assert_fail@plt+0x5124>
   15f20:	b	15e28 <__assert_fail@plt+0x5054>
   15f24:	mov	r3, #1
   15f28:	str	r1, [r0]
   15f2c:	str	r1, [r0, #4]
   15f30:	str	r1, [r0, #8]
   15f34:	strb	r3, [r0, #28]
   15f38:	mov	r3, #0
   15f3c:	str	r1, [r0, #12]
   15f40:	str	r1, [r0, #16]
   15f44:	str	r3, [r0, #20]
   15f48:	str	r3, [r0, #24]
   15f4c:	bx	lr
   15f50:	ldrb	r0, [r0, #28]
   15f54:	bx	lr
   15f58:	ldrb	r2, [r0, #28]
   15f5c:	mov	r3, r0
   15f60:	ldr	ip, [r0, #20]
   15f64:	eor	r2, r2, #1
   15f68:	add	ip, r2, ip
   15f6c:	and	ip, ip, #3
   15f70:	ldr	r0, [r0, ip, lsl #2]
   15f74:	str	r1, [r3, ip, lsl #2]
   15f78:	ldr	r1, [r3, #24]
   15f7c:	str	ip, [r3, #20]
   15f80:	cmp	r1, ip
   15f84:	addeq	r2, r2, r1
   15f88:	andeq	r2, r2, #3
   15f8c:	streq	r2, [r3, #24]
   15f90:	mov	r2, #0
   15f94:	strb	r2, [r3, #28]
   15f98:	bx	lr
   15f9c:	ldrb	r2, [r0, #28]
   15fa0:	cmp	r2, #0
   15fa4:	beq	15fb0 <__assert_fail@plt+0x51dc>
   15fa8:	push	{r4, lr}
   15fac:	bl	10d98 <abort@plt>
   15fb0:	ldr	r1, [r0, #16]
   15fb4:	mov	r3, r0
   15fb8:	ldr	r2, [r0, #20]
   15fbc:	ldr	r0, [r0, r2, lsl #2]
   15fc0:	str	r1, [r3, r2, lsl #2]
   15fc4:	ldr	r1, [r3, #24]
   15fc8:	cmp	r2, r1
   15fcc:	addne	r2, r2, #3
   15fd0:	moveq	r2, #1
   15fd4:	andne	r2, r2, #3
   15fd8:	strbeq	r2, [r3, #28]
   15fdc:	strne	r2, [r3, #20]
   15fe0:	bx	lr
   15fe4:	push	{r4, r5, r6, lr}
   15fe8:	mov	r3, #0
   15fec:	mov	r4, r0
   15ff0:	mov	r5, r1
   15ff4:	add	r6, r2, #20
   15ff8:	strb	r3, [r2, #20]
   15ffc:	mov	r2, #10
   16000:	mov	r3, #0
   16004:	mov	r0, r4
   16008:	mov	r1, r5
   1600c:	bl	1658c <__assert_fail@plt+0x57b8>
   16010:	add	r2, r2, #48	; 0x30
   16014:	mov	r3, #0
   16018:	mov	r0, r4
   1601c:	mov	r1, r5
   16020:	strb	r2, [r6, #-1]!
   16024:	mov	r2, #10
   16028:	bl	1658c <__assert_fail@plt+0x57b8>
   1602c:	cmp	r5, #0
   16030:	cmpeq	r4, #9
   16034:	bhi	16040 <__assert_fail@plt+0x526c>
   16038:	mov	r0, r6
   1603c:	pop	{r4, r5, r6, pc}
   16040:	mov	r4, r0
   16044:	mov	r5, r1
   16048:	b	15ffc <__assert_fail@plt+0x5228>
   1604c:	push	{r1, r2, r3}
   16050:	push	{r0, r1, lr}
   16054:	add	r3, sp, #16
   16058:	ldr	r1, [sp, #12]
   1605c:	str	r3, [sp, #4]
   16060:	ldr	r2, [sp, #16]
   16064:	bl	10c24 <ioctl@plt>
   16068:	add	sp, sp, #8
   1606c:	pop	{lr}		; (ldr lr, [sp], #4)
   16070:	add	sp, sp, #12
   16074:	bx	lr
   16078:	push	{r2, r3}
   1607c:	push	{r0, r1, r2, lr}
   16080:	ldr	r2, [sp, #16]
   16084:	ands	r3, r2, #64	; 0x40
   16088:	addne	r3, sp, #20
   1608c:	strne	r3, [sp, #4]
   16090:	ldrne	r3, [sp, #20]
   16094:	bl	10ca8 <openat64@plt>
   16098:	bl	160fc <__assert_fail@plt+0x5328>
   1609c:	add	sp, sp, #12
   160a0:	pop	{lr}		; (ldr lr, [sp], #4)
   160a4:	add	sp, sp, #8
   160a8:	bx	lr
   160ac:	orr	r2, r2, #540672	; 0x84000
   160b0:	push	{r4, r5, r6, r7, r8, lr}
   160b4:	mov	r5, r3
   160b8:	orr	r2, r2, #2304	; 0x900
   160bc:	bl	16078 <__assert_fail@plt+0x52a4>
   160c0:	subs	r6, r0, #0
   160c4:	movlt	r4, #0
   160c8:	blt	160f4 <__assert_fail@plt+0x5320>
   160cc:	bl	10d20 <fdopendir@plt>
   160d0:	subs	r4, r0, #0
   160d4:	strne	r6, [r5]
   160d8:	bne	160f4 <__assert_fail@plt+0x5320>
   160dc:	bl	10cc0 <__errno_location@plt>
   160e0:	mov	r5, r0
   160e4:	mov	r0, r6
   160e8:	ldr	r7, [r5]
   160ec:	bl	10da4 <close@plt>
   160f0:	str	r7, [r5]
   160f4:	mov	r0, r4
   160f8:	pop	{r4, r5, r6, r7, r8, pc}
   160fc:	cmp	r0, #2
   16100:	push	{r4, r5, r6, r7, r8, lr}
   16104:	mov	r4, r0
   16108:	bhi	16130 <__assert_fail@plt+0x535c>
   1610c:	bl	164ac <__assert_fail@plt+0x56d8>
   16110:	mov	r6, r0
   16114:	bl	10cc0 <__errno_location@plt>
   16118:	mov	r5, r0
   1611c:	mov	r0, r4
   16120:	ldr	r7, [r5]
   16124:	mov	r4, r6
   16128:	bl	10da4 <close@plt>
   1612c:	str	r7, [r5]
   16130:	mov	r0, r4
   16134:	pop	{r4, r5, r6, r7, r8, pc}
   16138:	cmp	r1, #0
   1613c:	cmpne	r0, #0
   16140:	beq	16178 <__assert_fail@plt+0x53a4>
   16144:	push	{r4, r5, r6, lr}
   16148:	umull	r4, r5, r0, r1
   1614c:	adds	r3, r5, #0
   16150:	movne	r3, #1
   16154:	cmp	r4, #0
   16158:	blt	16164 <__assert_fail@plt+0x5390>
   1615c:	cmp	r3, #0
   16160:	beq	16184 <__assert_fail@plt+0x53b0>
   16164:	bl	10cc0 <__errno_location@plt>
   16168:	mov	r3, #12
   1616c:	str	r3, [r0]
   16170:	mov	r0, #0
   16174:	pop	{r4, r5, r6, pc}
   16178:	mov	r1, #1
   1617c:	mov	r0, r1
   16180:	b	10b64 <calloc@plt>
   16184:	pop	{r4, r5, r6, lr}
   16188:	b	16180 <__assert_fail@plt+0x53ac>
   1618c:	cmp	r0, #0
   16190:	beq	161b0 <__assert_fail@plt+0x53dc>
   16194:	bge	161b4 <__assert_fail@plt+0x53e0>
   16198:	push	{r4, lr}
   1619c:	bl	10cc0 <__errno_location@plt>
   161a0:	mov	r3, #12
   161a4:	str	r3, [r0]
   161a8:	mov	r0, #0
   161ac:	pop	{r4, pc}
   161b0:	mov	r0, #1
   161b4:	b	10c54 <malloc@plt>
   161b8:	cmp	r0, #0
   161bc:	bne	161c8 <__assert_fail@plt+0x53f4>
   161c0:	mov	r0, r1
   161c4:	b	1618c <__assert_fail@plt+0x53b8>
   161c8:	cmp	r1, #0
   161cc:	push	{r4, lr}
   161d0:	bne	161e0 <__assert_fail@plt+0x540c>
   161d4:	bl	12a20 <__assert_fail@plt+0x1c4c>
   161d8:	mov	r0, #0
   161dc:	pop	{r4, pc}
   161e0:	blt	161ec <__assert_fail@plt+0x5418>
   161e4:	pop	{r4, lr}
   161e8:	b	10be8 <realloc@plt>
   161ec:	bl	10cc0 <__errno_location@plt>
   161f0:	mov	r3, #12
   161f4:	str	r3, [r0]
   161f8:	b	161d8 <__assert_fail@plt+0x5404>
   161fc:	mov	r3, #0
   16200:	mov	r2, #0
   16204:	strd	r2, [r0, #16]
   16208:	ldr	r3, [pc, #4]	; 16214 <__assert_fail@plt+0x5440>
   1620c:	str	r3, [r0, #24]
   16210:	bx	lr
   16214:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   16218:	ldr	r3, [pc, #152]	; 162b8 <__assert_fail@plt+0x54e4>
   1621c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16220:	ldr	r2, [r0, #24]
   16224:	cmp	r2, r3
   16228:	beq	16240 <__assert_fail@plt+0x546c>
   1622c:	ldr	r3, [pc, #136]	; 162bc <__assert_fail@plt+0x54e8>
   16230:	mov	r2, #60	; 0x3c
   16234:	ldr	r1, [pc, #132]	; 162c0 <__assert_fail@plt+0x54ec>
   16238:	ldr	r0, [pc, #132]	; 162c4 <__assert_fail@plt+0x54f0>
   1623c:	bl	10dd4 <__assert_fail@plt>
   16240:	ldrd	r6, [r0, #16]
   16244:	orrs	r3, r6, r7
   16248:	beq	1627c <__assert_fail@plt+0x54a8>
   1624c:	ldrd	r2, [r0]
   16250:	ldrd	r4, [r1, #96]	; 0x60
   16254:	cmp	r5, r3
   16258:	cmpeq	r4, r2
   1625c:	bne	1627c <__assert_fail@plt+0x54a8>
   16260:	ldrd	r4, [r1]
   16264:	ldrd	r2, [r0, #8]
   16268:	cmp	r5, r3
   1626c:	cmpeq	r4, r2
   16270:	bne	1627c <__assert_fail@plt+0x54a8>
   16274:	mov	r0, #1
   16278:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1627c:	adds	r8, r6, #1
   16280:	adc	r9, r7, #0
   16284:	and	r2, r6, r8
   16288:	and	r3, r7, r9
   1628c:	orrs	r3, r2, r3
   16290:	strd	r8, [r0, #16]
   16294:	bne	162b0 <__assert_fail@plt+0x54dc>
   16298:	orrs	r3, r8, r9
   1629c:	beq	16274 <__assert_fail@plt+0x54a0>
   162a0:	ldrd	r2, [r1]
   162a4:	strd	r2, [r0, #8]
   162a8:	ldrd	r2, [r1, #96]	; 0x60
   162ac:	strd	r2, [r0]
   162b0:	mov	r0, #0
   162b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   162b8:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   162bc:	andeq	r6, r1, r1, lsr #21
   162c0:	andeq	r6, r1, sp, lsr #21
   162c4:			; <UNDEFINED> instruction: 0x00016abb
   162c8:	push	{r1, r2, r3}
   162cc:	push	{r0, r1, r2, r4, r5, r6, r7, r8, lr}
   162d0:	add	r2, sp, #40	; 0x28
   162d4:	ldr	r1, [sp, #36]	; 0x24
   162d8:	str	r2, [sp, #4]
   162dc:	cmp	r1, #0
   162e0:	beq	16330 <__assert_fail@plt+0x555c>
   162e4:	movw	r3, #1030	; 0x406
   162e8:	mov	r5, r0
   162ec:	cmp	r1, r3
   162f0:	beq	1633c <__assert_fail@plt+0x5568>
   162f4:	cmp	r1, #11
   162f8:	beq	16320 <__assert_fail@plt+0x554c>
   162fc:	bgt	16430 <__assert_fail@plt+0x565c>
   16300:	cmp	r1, #4
   16304:	beq	16448 <__assert_fail@plt+0x5674>
   16308:	bgt	16428 <__assert_fail@plt+0x5654>
   1630c:	cmp	r1, #2
   16310:	beq	16448 <__assert_fail@plt+0x5674>
   16314:	bgt	16320 <__assert_fail@plt+0x554c>
   16318:	cmp	r1, #1
   1631c:	bne	16448 <__assert_fail@plt+0x5674>
   16320:	mov	r0, r5
   16324:	bl	10cf0 <fcntl64@plt>
   16328:	mov	r4, r0
   1632c:	b	16384 <__assert_fail@plt+0x55b0>
   16330:	ldr	r2, [sp, #40]	; 0x28
   16334:	bl	10cf0 <fcntl64@plt>
   16338:	b	16328 <__assert_fail@plt+0x5554>
   1633c:	ldr	r6, [pc, #304]	; 16474 <__assert_fail@plt+0x56a0>
   16340:	add	r3, sp, #44	; 0x2c
   16344:	str	r3, [sp, #4]
   16348:	ldr	r7, [r2]
   1634c:	ldr	r3, [r6]
   16350:	mov	r8, r6
   16354:	mov	r2, r7
   16358:	cmp	r3, #0
   1635c:	blt	163ec <__assert_fail@plt+0x5618>
   16360:	bl	10cf0 <fcntl64@plt>
   16364:	subs	r4, r0, #0
   16368:	bge	1637c <__assert_fail@plt+0x55a8>
   1636c:	bl	10cc0 <__errno_location@plt>
   16370:	ldr	r3, [r0]
   16374:	cmp	r3, #22
   16378:	beq	16398 <__assert_fail@plt+0x55c4>
   1637c:	mov	r3, #1
   16380:	str	r3, [r8]
   16384:	mov	r0, r4
   16388:	add	sp, sp, #12
   1638c:	pop	{r4, r5, r6, r7, r8, lr}
   16390:	add	sp, sp, #12
   16394:	bx	lr
   16398:	mov	r2, r7
   1639c:	mov	r1, #0
   163a0:	mov	r0, r5
   163a4:	bl	10cf0 <fcntl64@plt>
   163a8:	subs	r4, r0, #0
   163ac:	mvnge	r3, #0
   163b0:	strge	r3, [r6]
   163b4:	blt	16384 <__assert_fail@plt+0x55b0>
   163b8:	mov	r1, #1
   163bc:	mov	r0, r4
   163c0:	bl	10cf0 <fcntl64@plt>
   163c4:	subs	r2, r0, #0
   163c8:	bge	1640c <__assert_fail@plt+0x5638>
   163cc:	bl	10cc0 <__errno_location@plt>
   163d0:	mov	r5, r0
   163d4:	mov	r0, r4
   163d8:	ldr	r6, [r5]
   163dc:	mvn	r4, #0
   163e0:	bl	10da4 <close@plt>
   163e4:	str	r6, [r5]
   163e8:	b	16384 <__assert_fail@plt+0x55b0>
   163ec:	mov	r1, #0
   163f0:	bl	10cf0 <fcntl64@plt>
   163f4:	subs	r4, r0, #0
   163f8:	blt	16384 <__assert_fail@plt+0x55b0>
   163fc:	ldr	r3, [r6]
   16400:	cmn	r3, #1
   16404:	bne	16384 <__assert_fail@plt+0x55b0>
   16408:	b	163b8 <__assert_fail@plt+0x55e4>
   1640c:	orr	r2, r2, #1
   16410:	mov	r1, #2
   16414:	mov	r0, r4
   16418:	bl	10cf0 <fcntl64@plt>
   1641c:	cmn	r0, #1
   16420:	bne	16384 <__assert_fail@plt+0x55b0>
   16424:	b	163cc <__assert_fail@plt+0x55f8>
   16428:	cmp	r1, #9
   1642c:	b	1631c <__assert_fail@plt+0x5548>
   16430:	movw	r2, #1031	; 0x407
   16434:	cmp	r1, r2
   16438:	bgt	16458 <__assert_fail@plt+0x5684>
   1643c:	cmp	r1, r3
   16440:	movwlt	r3, #1025	; 0x401
   16444:	blt	1646c <__assert_fail@plt+0x5698>
   16448:	ldr	r3, [sp, #4]
   1644c:	mov	r0, r5
   16450:	ldr	r2, [r3]
   16454:	b	16334 <__assert_fail@plt+0x5560>
   16458:	movw	r3, #1033	; 0x409
   1645c:	cmp	r1, r3
   16460:	beq	16448 <__assert_fail@plt+0x5674>
   16464:	blt	16320 <__assert_fail@plt+0x554c>
   16468:	movw	r3, #1034	; 0x40a
   1646c:	cmp	r1, r3
   16470:	b	1631c <__assert_fail@plt+0x5548>
   16474:	andeq	r7, r2, r0, asr r1
   16478:	push	{r1, r2, r3}
   1647c:	push	{r0, r1, lr}
   16480:	ldr	r1, [sp, #12]
   16484:	ands	r2, r1, #64	; 0x40
   16488:	ldrne	r2, [sp, #16]
   1648c:	addne	r3, sp, #16
   16490:	strne	r3, [sp, #4]
   16494:	bl	10c3c <open64@plt>
   16498:	bl	160fc <__assert_fail@plt+0x5328>
   1649c:	add	sp, sp, #8
   164a0:	pop	{lr}		; (ldr lr, [sp], #4)
   164a4:	add	sp, sp, #12
   164a8:	bx	lr
   164ac:	mov	r2, #3
   164b0:	mov	r1, #0
   164b4:	b	162c8 <__assert_fail@plt+0x54f4>
   164b8:	cmp	r3, #0
   164bc:	cmpeq	r2, #0
   164c0:	bne	164e4 <__assert_fail@plt+0x5710>
   164c4:	cmp	r1, #0
   164c8:	movlt	r1, #-2147483648	; 0x80000000
   164cc:	movlt	r0, #0
   164d0:	blt	164e0 <__assert_fail@plt+0x570c>
   164d4:	cmpeq	r0, #0
   164d8:	mvnne	r1, #-2147483648	; 0x80000000
   164dc:	mvnne	r0, #0
   164e0:	b	165c8 <__assert_fail@plt+0x57f4>
   164e4:	sub	sp, sp, #8
   164e8:	push	{sp, lr}
   164ec:	cmp	r1, #0
   164f0:	blt	16510 <__assert_fail@plt+0x573c>
   164f4:	cmp	r3, #0
   164f8:	blt	16544 <__assert_fail@plt+0x5770>
   164fc:	bl	165d8 <__assert_fail@plt+0x5804>
   16500:	ldr	lr, [sp, #4]
   16504:	add	sp, sp, #8
   16508:	pop	{r2, r3}
   1650c:	bx	lr
   16510:	rsbs	r0, r0, #0
   16514:	sbc	r1, r1, r1, lsl #1
   16518:	cmp	r3, #0
   1651c:	blt	16568 <__assert_fail@plt+0x5794>
   16520:	bl	165d8 <__assert_fail@plt+0x5804>
   16524:	ldr	lr, [sp, #4]
   16528:	add	sp, sp, #8
   1652c:	pop	{r2, r3}
   16530:	rsbs	r0, r0, #0
   16534:	sbc	r1, r1, r1, lsl #1
   16538:	rsbs	r2, r2, #0
   1653c:	sbc	r3, r3, r3, lsl #1
   16540:	bx	lr
   16544:	rsbs	r2, r2, #0
   16548:	sbc	r3, r3, r3, lsl #1
   1654c:	bl	165d8 <__assert_fail@plt+0x5804>
   16550:	ldr	lr, [sp, #4]
   16554:	add	sp, sp, #8
   16558:	pop	{r2, r3}
   1655c:	rsbs	r0, r0, #0
   16560:	sbc	r1, r1, r1, lsl #1
   16564:	bx	lr
   16568:	rsbs	r2, r2, #0
   1656c:	sbc	r3, r3, r3, lsl #1
   16570:	bl	165d8 <__assert_fail@plt+0x5804>
   16574:	ldr	lr, [sp, #4]
   16578:	add	sp, sp, #8
   1657c:	pop	{r2, r3}
   16580:	rsbs	r2, r2, #0
   16584:	sbc	r3, r3, r3, lsl #1
   16588:	bx	lr
   1658c:	cmp	r3, #0
   16590:	cmpeq	r2, #0
   16594:	bne	165ac <__assert_fail@plt+0x57d8>
   16598:	cmp	r1, #0
   1659c:	cmpeq	r0, #0
   165a0:	mvnne	r1, #0
   165a4:	mvnne	r0, #0
   165a8:	b	165c8 <__assert_fail@plt+0x57f4>
   165ac:	sub	sp, sp, #8
   165b0:	push	{sp, lr}
   165b4:	bl	165d8 <__assert_fail@plt+0x5804>
   165b8:	ldr	lr, [sp, #4]
   165bc:	add	sp, sp, #8
   165c0:	pop	{r2, r3}
   165c4:	bx	lr
   165c8:	push	{r1, lr}
   165cc:	mov	r0, #8
   165d0:	bl	10b70 <raise@plt>
   165d4:	pop	{r1, pc}
   165d8:	cmp	r1, r3
   165dc:	cmpeq	r0, r2
   165e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165e4:	mov	r4, r0
   165e8:	movcc	r0, #0
   165ec:	mov	r5, r1
   165f0:	ldr	lr, [sp, #36]	; 0x24
   165f4:	movcc	r1, r0
   165f8:	bcc	166f4 <__assert_fail@plt+0x5920>
   165fc:	cmp	r3, #0
   16600:	clzeq	ip, r2
   16604:	clzne	ip, r3
   16608:	addeq	ip, ip, #32
   1660c:	cmp	r5, #0
   16610:	clzeq	r1, r4
   16614:	addeq	r1, r1, #32
   16618:	clzne	r1, r5
   1661c:	sub	ip, ip, r1
   16620:	sub	sl, ip, #32
   16624:	lsl	r9, r3, ip
   16628:	rsb	fp, ip, #32
   1662c:	orr	r9, r9, r2, lsl sl
   16630:	orr	r9, r9, r2, lsr fp
   16634:	lsl	r8, r2, ip
   16638:	cmp	r5, r9
   1663c:	cmpeq	r4, r8
   16640:	movcc	r0, #0
   16644:	movcc	r1, r0
   16648:	bcc	16664 <__assert_fail@plt+0x5890>
   1664c:	mov	r0, #1
   16650:	subs	r4, r4, r8
   16654:	lsl	r1, r0, sl
   16658:	orr	r1, r1, r0, lsr fp
   1665c:	lsl	r0, r0, ip
   16660:	sbc	r5, r5, r9
   16664:	cmp	ip, #0
   16668:	beq	166f4 <__assert_fail@plt+0x5920>
   1666c:	lsr	r6, r8, #1
   16670:	orr	r6, r6, r9, lsl #31
   16674:	lsr	r7, r9, #1
   16678:	mov	r2, ip
   1667c:	b	166a0 <__assert_fail@plt+0x58cc>
   16680:	subs	r3, r4, r6
   16684:	sbc	r8, r5, r7
   16688:	adds	r3, r3, r3
   1668c:	adc	r8, r8, r8
   16690:	adds	r4, r3, #1
   16694:	adc	r5, r8, #0
   16698:	subs	r2, r2, #1
   1669c:	beq	166bc <__assert_fail@plt+0x58e8>
   166a0:	cmp	r5, r7
   166a4:	cmpeq	r4, r6
   166a8:	bcs	16680 <__assert_fail@plt+0x58ac>
   166ac:	adds	r4, r4, r4
   166b0:	adc	r5, r5, r5
   166b4:	subs	r2, r2, #1
   166b8:	bne	166a0 <__assert_fail@plt+0x58cc>
   166bc:	lsr	r3, r4, ip
   166c0:	orr	r3, r3, r5, lsl fp
   166c4:	lsr	r2, r5, ip
   166c8:	orr	r3, r3, r5, lsr sl
   166cc:	adds	r0, r0, r4
   166d0:	mov	r4, r3
   166d4:	lsl	r3, r2, ip
   166d8:	orr	r3, r3, r4, lsl sl
   166dc:	lsl	ip, r4, ip
   166e0:	orr	r3, r3, r4, lsr fp
   166e4:	adc	r1, r1, r5
   166e8:	subs	r0, r0, ip
   166ec:	mov	r5, r2
   166f0:	sbc	r1, r1, r3
   166f4:	cmp	lr, #0
   166f8:	strdne	r4, [lr]
   166fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16700:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16704:	mov	r7, r0
   16708:	ldr	r6, [pc, #72]	; 16758 <__assert_fail@plt+0x5984>
   1670c:	ldr	r5, [pc, #72]	; 1675c <__assert_fail@plt+0x5988>
   16710:	add	r6, pc, r6
   16714:	add	r5, pc, r5
   16718:	sub	r6, r6, r5
   1671c:	mov	r8, r1
   16720:	mov	r9, r2
   16724:	bl	10b38 <fstatfs64@plt-0x20>
   16728:	asrs	r6, r6, #2
   1672c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16730:	mov	r4, #0
   16734:	add	r4, r4, #1
   16738:	ldr	r3, [r5], #4
   1673c:	mov	r2, r9
   16740:	mov	r1, r8
   16744:	mov	r0, r7
   16748:	blx	r3
   1674c:	cmp	r6, r4
   16750:	bne	16734 <__assert_fail@plt+0x5960>
   16754:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16758:	strdeq	r0, [r1], -ip
   1675c:	strdeq	r0, [r1], -r4
   16760:	bx	lr
   16764:	mov	r2, r1
   16768:	mov	r1, r0
   1676c:	mov	r0, #3
   16770:	b	10d68 <__xstat64@plt>
   16774:	mov	r2, r1
   16778:	mov	r1, r0
   1677c:	mov	r0, #3
   16780:	b	10c0c <__fxstat64@plt>
   16784:	mov	r2, r1
   16788:	mov	r1, r0
   1678c:	mov	r0, #3
   16790:	b	10db0 <__lxstat64@plt>
   16794:	push	{lr}		; (str lr, [sp, #-4]!)
   16798:	sub	sp, sp, #12
   1679c:	str	r3, [sp]
   167a0:	mov	r3, r2
   167a4:	mov	r2, r1
   167a8:	mov	r1, r0
   167ac:	mov	r0, #3
   167b0:	bl	10c00 <__fxstatat64@plt>
   167b4:	add	sp, sp, #12
   167b8:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

000167bc <.fini>:
   167bc:	push	{r3, lr}
   167c0:	pop	{r3, pc}
