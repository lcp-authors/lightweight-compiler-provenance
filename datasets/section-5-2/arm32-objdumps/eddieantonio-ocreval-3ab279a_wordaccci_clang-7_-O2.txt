
../repos/eddieantonio-ocreval-3ab279a/wordaccci/wordaccci:     file format elf32-littlearm


Disassembly of section .init:

00010820 <.init>:
   10820:	push	{r3, lr}
   10824:	bl	109ac <abort@plt+0x4c>
   10828:	pop	{r3, pc}

Disassembly of section .plt:

0001082c <calloc@plt-0x14>:
   1082c:	push	{lr}		; (str lr, [sp, #-4]!)
   10830:	ldr	lr, [pc, #4]	; 1083c <calloc@plt-0x4>
   10834:	add	lr, pc, lr
   10838:	ldr	pc, [lr, #8]!
   1083c:	andeq	r2, r1, r4, asr #15

00010840 <calloc@plt>:
   10840:	add	ip, pc, #0, 12
   10844:	add	ip, ip, #73728	; 0x12000
   10848:	ldr	pc, [ip, #1988]!	; 0x7c4

0001084c <strcmp@plt>:
   1084c:	add	ip, pc, #0, 12
   10850:	add	ip, ip, #73728	; 0x12000
   10854:	ldr	pc, [ip, #1980]!	; 0x7bc

00010858 <strtol@plt>:
   10858:	add	ip, pc, #0, 12
   1085c:	add	ip, ip, #73728	; 0x12000
   10860:	ldr	pc, [ip, #1972]!	; 0x7b4

00010864 <printf@plt>:
   10864:	add	ip, pc, #0, 12
   10868:	add	ip, ip, #73728	; 0x12000
   1086c:	ldr	pc, [ip, #1964]!	; 0x7ac

00010870 <fopen@plt>:
   10870:	add	ip, pc, #0, 12
   10874:	add	ip, ip, #73728	; 0x12000
   10878:	ldr	pc, [ip, #1956]!	; 0x7a4

0001087c <free@plt>:
   1087c:	add	ip, pc, #0, 12
   10880:	add	ip, ip, #73728	; 0x12000
   10884:	ldr	pc, [ip, #1948]!	; 0x79c

00010888 <fgets@plt>:
   10888:	add	ip, pc, #0, 12
   1088c:	add	ip, ip, #73728	; 0x12000
   10890:	ldr	pc, [ip, #1940]!	; 0x794

00010894 <strdup@plt>:
   10894:	add	ip, pc, #0, 12
   10898:	add	ip, ip, #73728	; 0x12000
   1089c:	ldr	pc, [ip, #1932]!	; 0x78c

000108a0 <unlink@plt>:
   108a0:	add	ip, pc, #0, 12
   108a4:	add	ip, ip, #73728	; 0x12000
   108a8:	ldr	pc, [ip, #1924]!	; 0x784

000108ac <__xstat@plt>:
   108ac:	add	ip, pc, #0, 12
   108b0:	add	ip, ip, #73728	; 0x12000
   108b4:	ldr	pc, [ip, #1916]!	; 0x77c

000108b8 <fwrite@plt>:
   108b8:	add	ip, pc, #0, 12
   108bc:	add	ip, ip, #73728	; 0x12000
   108c0:	ldr	pc, [ip, #1908]!	; 0x774

000108c4 <__libc_start_main@plt>:
   108c4:	add	ip, pc, #0, 12
   108c8:	add	ip, ip, #73728	; 0x12000
   108cc:	ldr	pc, [ip, #1900]!	; 0x76c

000108d0 <__sysv_signal@plt>:
   108d0:	add	ip, pc, #0, 12
   108d4:	add	ip, ip, #73728	; 0x12000
   108d8:	ldr	pc, [ip, #1892]!	; 0x764

000108dc <__gmon_start__@plt>:
   108dc:	add	ip, pc, #0, 12
   108e0:	add	ip, ip, #73728	; 0x12000
   108e4:	ldr	pc, [ip, #1884]!	; 0x75c

000108e8 <getpid@plt>:
   108e8:	add	ip, pc, #0, 12
   108ec:	add	ip, ip, #73728	; 0x12000
   108f0:	ldr	pc, [ip, #1876]!	; 0x754

000108f4 <exit@plt>:
   108f4:	add	ip, pc, #0, 12
   108f8:	add	ip, ip, #73728	; 0x12000
   108fc:	ldr	pc, [ip, #1868]!	; 0x74c

00010900 <strlen@plt>:
   10900:	add	ip, pc, #0, 12
   10904:	add	ip, ip, #73728	; 0x12000
   10908:	ldr	pc, [ip, #1860]!	; 0x744

0001090c <fprintf@plt>:
   1090c:	add	ip, pc, #0, 12
   10910:	add	ip, ip, #73728	; 0x12000
   10914:	ldr	pc, [ip, #1852]!	; 0x73c

00010918 <sqrt@plt>:
   10918:	add	ip, pc, #0, 12
   1091c:	add	ip, ip, #73728	; 0x12000
   10920:	ldr	pc, [ip, #1844]!	; 0x734

00010924 <__isoc99_sscanf@plt>:
   10924:	add	ip, pc, #0, 12
   10928:	add	ip, ip, #73728	; 0x12000
   1092c:	ldr	pc, [ip, #1836]!	; 0x72c

00010930 <fclose@plt>:
   10930:	add	ip, pc, #0, 12
   10934:	add	ip, ip, #73728	; 0x12000
   10938:	ldr	pc, [ip, #1828]!	; 0x724

0001093c <fputc@plt>:
   1093c:	add	ip, pc, #0, 12
   10940:	add	ip, ip, #73728	; 0x12000
   10944:	ldr	pc, [ip, #1820]!	; 0x71c

00010948 <sprintf@plt>:
   10948:	add	ip, pc, #0, 12
   1094c:	add	ip, ip, #73728	; 0x12000
   10950:	ldr	pc, [ip, #1812]!	; 0x714

00010954 <strncmp@plt>:
   10954:	add	ip, pc, #0, 12
   10958:	add	ip, ip, #73728	; 0x12000
   1095c:	ldr	pc, [ip, #1804]!	; 0x70c

00010960 <abort@plt>:
   10960:	add	ip, pc, #0, 12
   10964:	add	ip, ip, #73728	; 0x12000
   10968:	ldr	pc, [ip, #1796]!	; 0x704

Disassembly of section .text:

00010970 <error@@Base-0x9bc>:
   10970:	mov	fp, #0
   10974:	mov	lr, #0
   10978:	pop	{r1}		; (ldr r1, [sp], #4)
   1097c:	mov	r2, sp
   10980:	push	{r2}		; (str r2, [sp, #-4]!)
   10984:	push	{r0}		; (str r0, [sp, #-4]!)
   10988:	ldr	ip, [pc, #16]	; 109a0 <abort@plt+0x40>
   1098c:	push	{ip}		; (str ip, [sp, #-4]!)
   10990:	ldr	r0, [pc, #12]	; 109a4 <abort@plt+0x44>
   10994:	ldr	r3, [pc, #12]	; 109a8 <abort@plt+0x48>
   10998:	bl	108c4 <__libc_start_main@plt>
   1099c:	bl	10960 <abort@plt>
   109a0:	andeq	r2, r1, r8, asr #18
   109a4:	muleq	r1, r0, fp
   109a8:	andeq	r2, r1, r8, ror #17
   109ac:	ldr	r3, [pc, #20]	; 109c8 <abort@plt+0x68>
   109b0:	ldr	r2, [pc, #20]	; 109cc <abort@plt+0x6c>
   109b4:	add	r3, pc, r3
   109b8:	ldr	r2, [r3, r2]
   109bc:	cmp	r2, #0
   109c0:	bxeq	lr
   109c4:	b	108dc <__gmon_start__@plt>
   109c8:	andeq	r2, r1, r4, asr #12
   109cc:	andeq	r0, r0, ip, ror r0
   109d0:	ldr	r0, [pc, #24]	; 109f0 <abort@plt+0x90>
   109d4:	ldr	r3, [pc, #24]	; 109f4 <abort@plt+0x94>
   109d8:	cmp	r3, r0
   109dc:	bxeq	lr
   109e0:	ldr	r3, [pc, #16]	; 109f8 <abort@plt+0x98>
   109e4:	cmp	r3, #0
   109e8:	bxeq	lr
   109ec:	bx	r3
   109f0:	andeq	r3, r2, ip, lsr #1
   109f4:	andeq	r3, r2, ip, lsr #1
   109f8:	andeq	r0, r0, r0
   109fc:	ldr	r0, [pc, #36]	; 10a28 <abort@plt+0xc8>
   10a00:	ldr	r1, [pc, #36]	; 10a2c <abort@plt+0xcc>
   10a04:	sub	r1, r1, r0
   10a08:	asr	r1, r1, #2
   10a0c:	add	r1, r1, r1, lsr #31
   10a10:	asrs	r1, r1, #1
   10a14:	bxeq	lr
   10a18:	ldr	r3, [pc, #16]	; 10a30 <abort@plt+0xd0>
   10a1c:	cmp	r3, #0
   10a20:	bxeq	lr
   10a24:	bx	r3
   10a28:	andeq	r3, r2, ip, lsr #1
   10a2c:	andeq	r3, r2, ip, lsr #1
   10a30:	andeq	r0, r0, r0
   10a34:	push	{r4, lr}
   10a38:	ldr	r4, [pc, #24]	; 10a58 <abort@plt+0xf8>
   10a3c:	ldrb	r3, [r4]
   10a40:	cmp	r3, #0
   10a44:	popne	{r4, pc}
   10a48:	bl	109d0 <abort@plt+0x70>
   10a4c:	mov	r3, #1
   10a50:	strb	r3, [r4]
   10a54:	pop	{r4, pc}
   10a58:	strheq	r3, [r2], -r0
   10a5c:	b	109fc <abort@plt+0x9c>
   10a60:	push	{r4, r5, r6, sl, fp, lr}
   10a64:	add	fp, sp, #16
   10a68:	ldr	r4, [pc, #44]	; 10a9c <abort@plt+0x13c>
   10a6c:	mov	r1, r0
   10a70:	ldr	r4, [pc, r4]
   10a74:	ldm	r4, {r5, r6}
   10a78:	mov	r0, r4
   10a7c:	bl	115d8 <error@@Base+0x2ac>
   10a80:	ldm	r4, {r0, r2}
   10a84:	sub	r1, r0, r5
   10a88:	ldr	r0, [pc, #16]	; 10aa0 <abort@plt+0x140>
   10a8c:	sub	r2, r2, r6
   10a90:	ldr	r0, [pc, r0]
   10a94:	pop	{r4, r5, r6, sl, fp, lr}
   10a98:	b	10c38 <abort@plt+0x2d8>
   10a9c:	andeq	r2, r1, ip, lsl #12
   10aa0:	strdeq	r2, [r1], -r0
   10aa4:	nop	{0}
   10aa8:	push	{r4, sl, fp, lr}
   10aac:	add	fp, sp, #8
   10ab0:	sub	sp, sp, #32
   10ab4:	ldr	r4, [pc, #180]	; 10b70 <abort@plt+0x210>
   10ab8:	sub	r1, fp, #16
   10abc:	add	r2, sp, #16
   10ac0:	ldr	r4, [pc, r4]
   10ac4:	mov	r0, r4
   10ac8:	bl	10c88 <abort@plt+0x328>
   10acc:	ldr	r1, [r4, #12]
   10ad0:	ldr	r0, [pc, #156]	; 10b74 <abort@plt+0x214>
   10ad4:	add	r0, pc, r0
   10ad8:	bl	10864 <printf@plt>
   10adc:	ldr	r4, [pc, #148]	; 10b78 <abort@plt+0x218>
   10ae0:	ldr	r4, [pc, r4]
   10ae4:	ldr	r1, [r4]
   10ae8:	ldr	r0, [pc, #140]	; 10b7c <abort@plt+0x21c>
   10aec:	add	r0, pc, r0
   10af0:	bl	10864 <printf@plt>
   10af4:	ldr	r1, [r4, #4]
   10af8:	ldr	r0, [pc, #128]	; 10b80 <abort@plt+0x220>
   10afc:	add	r0, pc, r0
   10b00:	bl	10864 <printf@plt>
   10b04:	ldm	r4, {r0, r1}
   10b08:	vldr	d16, [pc, #88]	; 10b68 <abort@plt+0x208>
   10b0c:	sub	r1, r0, r1
   10b10:	vmov	s2, r0
   10b14:	vmov	s0, r1
   10b18:	vcvt.f64.s32	d17, s0
   10b1c:	vcvt.f64.s32	d18, s2
   10b20:	ldr	r0, [pc, #92]	; 10b84 <abort@plt+0x224>
   10b24:	vmul.f64	d16, d17, d16
   10b28:	vdiv.f64	d16, d16, d18
   10b2c:	vmov	r2, r3, d16
   10b30:	add	r0, pc, r0
   10b34:	bl	10864 <printf@plt>
   10b38:	vldr	d16, [fp, #-16]
   10b3c:	vldr	d17, [sp, #16]
   10b40:	ldr	r0, [pc, #64]	; 10b88 <abort@plt+0x228>
   10b44:	add	r0, pc, r0
   10b48:	vstr	d17, [sp]
   10b4c:	vmov	r2, r3, d16
   10b50:	str	r0, [sp, #8]
   10b54:	ldr	r0, [pc, #48]	; 10b8c <abort@plt+0x22c>
   10b58:	add	r0, pc, r0
   10b5c:	bl	10864 <printf@plt>
   10b60:	sub	sp, fp, #8
   10b64:	pop	{r4, sl, fp, pc}
   10b68:	andeq	r0, r0, r0
   10b6c:	subsmi	r0, r9, r0
   10b70:	andeq	r2, r1, r0, asr #11
   10b74:	andeq	r1, r0, ip, ror lr
   10b78:	muleq	r1, ip, r5
   10b7c:	andeq	r1, r0, sl, ror lr
   10b80:	andeq	r1, r0, r9, ror lr
   10b84:	andeq	r1, r0, ip, asr lr
   10b88:	andeq	r1, r0, r1, ror lr
   10b8c:	andeq	r1, r0, r8, asr #28
   10b90:	push	{fp, lr}
   10b94:	mov	fp, sp
   10b98:	sub	sp, sp, #8
   10b9c:	str	r0, [sp, #4]
   10ba0:	add	r0, sp, #4
   10ba4:	mov	r3, #0
   10ba8:	mov	r9, r1
   10bac:	mov	r7, #0
   10bb0:	ldr	r2, [pc, #108]	; 10c24 <abort@plt+0x2c4>
   10bb4:	add	r2, pc, r2
   10bb8:	bl	110a4 <abort@plt+0x744>
   10bbc:	ldr	r0, [sp, #4]
   10bc0:	cmp	r0, #2
   10bc4:	blt	10c18 <abort@plt+0x2b8>
   10bc8:	ldr	r5, [pc, #88]	; 10c28 <abort@plt+0x2c8>
   10bcc:	ldr	r5, [pc, r5]
   10bd0:	ldr	r8, [pc, #84]	; 10c2c <abort@plt+0x2cc>
   10bd4:	ldr	r8, [pc, r8]
   10bd8:	ldr	r1, [r9, r7, lsl #2]
   10bdc:	ldr	r6, [r5]
   10be0:	ldr	r4, [r5, #4]
   10be4:	mov	r0, r5
   10be8:	bl	115d8 <error@@Base+0x2ac>
   10bec:	ldm	r5, {r0, r2}
   10bf0:	sub	r1, r0, r6
   10bf4:	sub	r2, r2, r4
   10bf8:	mov	r0, r8
   10bfc:	bl	10c38 <abort@plt+0x2d8>
   10c00:	ldr	r0, [sp, #4]
   10c04:	add	r7, r7, #1
   10c08:	cmp	r7, r0
   10c0c:	blt	10bd8 <abort@plt+0x278>
   10c10:	bl	10aa8 <abort@plt+0x148>
   10c14:	bl	112e8 <abort@plt+0x988>
   10c18:	ldr	r0, [pc, #16]	; 10c30 <abort@plt+0x2d0>
   10c1c:	add	r0, pc, r0
   10c20:	bl	1132c <error@@Base>
   10c24:	andeq	r1, r0, r2, lsr lr
   10c28:			; <UNDEFINED> instruction: 0x000124b0
   10c2c:	andeq	r2, r1, ip, lsr #9
   10c30:	strdeq	r1, [r0], -sl
   10c34:	andeq	r0, r0, r0
   10c38:	push	{r4, r5, r6, sl, fp, lr}
   10c3c:	add	fp, sp, #16
   10c40:	mov	r6, r1
   10c44:	mov	r4, r0
   10c48:	mov	r0, #1
   10c4c:	mov	r1, #32
   10c50:	mov	r5, r2
   10c54:	bl	10e6c <abort@plt+0x50c>
   10c58:	mov	r1, r0
   10c5c:	str	r6, [r1, #8]
   10c60:	str	r5, [r1, #12]
   10c64:	ldr	r0, [r4, #24]
   10c68:	ldr	r3, [r4, #28]
   10c6c:	add	r2, r0, r6
   10c70:	add	r3, r3, r5
   10c74:	mov	r0, r4
   10c78:	strd	r2, [r4, #24]
   10c7c:	pop	{r4, r5, r6, sl, fp, lr}
   10c80:	b	1226c <error@@Base+0xf40>
   10c84:	nop	{0}
   10c88:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   10c8c:	add	fp, sp, #24
   10c90:	vpush	{d8}
   10c94:	mov	r5, r0
   10c98:	ldr	r0, [r0]
   10c9c:	cmp	r0, #0
   10ca0:	beq	10e4c <abort@plt+0x4ec>
   10ca4:	mov	r8, r2
   10ca8:	mov	r9, r1
   10cac:	mov	r1, #0
   10cb0:	mov	r2, r0
   10cb4:	ldr	r3, [r2, #4]
   10cb8:	ldr	r2, [r2, #8]
   10cbc:	cmp	r2, #0
   10cc0:	mov	r2, r3
   10cc4:	addgt	r1, r1, #1
   10cc8:	cmp	r3, #0
   10ccc:	bne	10cb4 <abort@plt+0x354>
   10cd0:	cmp	r1, #1
   10cd4:	bls	10e4c <abort@plt+0x4ec>
   10cd8:	ldrd	r2, [r5, #24]
   10cdc:	ldr	r1, [r5, #12]
   10ce0:	vldr	d8, [pc, #368]	; 10e58 <abort@plt+0x4f8>
   10ce4:	vmov.i32	d19, #0	; 0x00000000
   10ce8:	sub	r4, r2, r3
   10cec:	vmov	s2, r2
   10cf0:	vmov	s0, r4
   10cf4:	sub	r4, r1, #1
   10cf8:	vcvt.f64.s32	d16, s0
   10cfc:	vmov	s0, r1
   10d00:	vcvt.f64.s32	d17, s2
   10d04:	mov	r1, r0
   10d08:	vmul.f64	d18, d16, d8
   10d0c:	vcvt.f64.s32	d16, s0
   10d10:	vmov	s0, r4
   10d14:	vdiv.f64	d20, d18, d17
   10d18:	vcvt.f64.s32	d17, s0
   10d1c:	vmul.f64	d18, d20, d16
   10d20:	vstr	d20, [r5, #32]
   10d24:	ldmib	r1, {r4, r7}
   10d28:	ldr	r6, [r1, #12]
   10d2c:	sub	r7, r2, r7
   10d30:	sub	r6, r6, r3
   10d34:	cmp	r4, #0
   10d38:	add	r6, r6, r7
   10d3c:	vmov	s2, r7
   10d40:	vmov	s0, r6
   10d44:	vcvt.f64.s32	d20, s0
   10d48:	vcvt.f64.s32	d21, s2
   10d4c:	vmul.f64	d20, d20, d8
   10d50:	vdiv.f64	d20, d20, d21
   10d54:	vmov.f64	d21, d18
   10d58:	vmls.f64	d21, d20, d17
   10d5c:	vstr	d20, [r1, #16]
   10d60:	vadd.f64	d19, d19, d20
   10d64:	vstr	d21, [r1, #24]
   10d68:	mov	r1, r4
   10d6c:	bne	10d24 <abort@plt+0x3c4>
   10d70:	vmul.f64	d19, d19, d17
   10d74:	vdiv.f64	d19, d19, d16
   10d78:	vsub.f64	d19, d18, d19
   10d7c:	vmov.i32	d18, #0	; 0x00000000
   10d80:	vstr	d19, [r5, #40]	; 0x28
   10d84:	vldr	d20, [r0, #24]
   10d88:	ldr	r0, [r0, #4]
   10d8c:	vsub.f64	d20, d20, d19
   10d90:	cmp	r0, #0
   10d94:	vmla.f64	d18, d20, d20
   10d98:	bne	10d84 <abort@plt+0x424>
   10d9c:	vdiv.f64	d17, d18, d17
   10da0:	vdiv.f64	d16, d17, d16
   10da4:	vsqrt.f64	d0, d16
   10da8:	vcmpe.f64	d0, d0
   10dac:	vmrs	APSR_nzcv, fpscr
   10db0:	bvc	10dbc <abort@plt+0x45c>
   10db4:	vmov.f64	d0, d16
   10db8:	bl	10918 <sqrt@plt>
   10dbc:	vldr	d16, [pc, #156]	; 10e60 <abort@plt+0x500>
   10dc0:	vldr	d17, [r5, #40]	; 0x28
   10dc4:	vmov.i32	d18, #0	; 0x00000000
   10dc8:	vmov.f64	d20, d8
   10dcc:	vmul.f64	d16, d0, d16
   10dd0:	vsub.f64	d17, d17, d16
   10dd4:	vcmpe.f64	d17, d8
   10dd8:	vmrs	APSR_nzcv, fpscr
   10ddc:	vcmpe.f64	d17, #0.0
   10de0:	vselgt.f64	d19, d8, d18
   10de4:	vmrs	APSR_nzcv, fpscr
   10de8:	vcmpe.f64	d17, d8
   10dec:	vmovmi.f64	d20, d19
   10df0:	vmrs	APSR_nzcv, fpscr
   10df4:	vcmpe.f64	d17, #0.0
   10df8:	vselgt.f64	d19, d20, d17
   10dfc:	vmrs	APSR_nzcv, fpscr
   10e00:	vmovmi.f64	d19, d20
   10e04:	vstr	d19, [r9]
   10e08:	vldr	d17, [r5, #40]	; 0x28
   10e0c:	vadd.f64	d16, d16, d17
   10e10:	vcmpe.f64	d16, d8
   10e14:	vmrs	APSR_nzcv, fpscr
   10e18:	vcmpe.f64	d16, #0.0
   10e1c:	vselgt.f64	d17, d8, d18
   10e20:	vmrs	APSR_nzcv, fpscr
   10e24:	vcmpe.f64	d16, d8
   10e28:	vmovmi.f64	d8, d17
   10e2c:	vmrs	APSR_nzcv, fpscr
   10e30:	vcmpe.f64	d16, #0.0
   10e34:	vselgt.f64	d17, d8, d16
   10e38:	vmrs	APSR_nzcv, fpscr
   10e3c:	vmovmi.f64	d17, d8
   10e40:	vstr	d17, [r8]
   10e44:	vpop	{d8}
   10e48:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   10e4c:	ldr	r0, [pc, #20]	; 10e68 <abort@plt+0x508>
   10e50:	add	r0, pc, r0
   10e54:	bl	1132c <error@@Base>
   10e58:	andeq	r0, r0, r0
   10e5c:	subsmi	r0, r9, r0
   10e60:			; <UNDEFINED> instruction: 0xf5c28f5c
   10e64:	svccc	0x00ff5c28
   10e68:	ldrdeq	r1, [r0], -sp
   10e6c:	push	{fp, lr}
   10e70:	mov	fp, sp
   10e74:	bl	10840 <calloc@plt>
   10e78:	cmp	r0, #0
   10e7c:	popne	{fp, pc}
   10e80:	ldr	r0, [pc, #4]	; 10e8c <abort@plt+0x52c>
   10e84:	add	r0, pc, r0
   10e88:	bl	1132c <error@@Base>
   10e8c:	andeq	r1, r0, r1, asr #23
   10e90:	push	{r4, r5, r6, sl, fp, lr}
   10e94:	add	fp, sp, #16
   10e98:	ldrb	r3, [r0]
   10e9c:	ldrb	ip, [r1]
   10ea0:	mov	r2, r0
   10ea4:	mov	r0, #0
   10ea8:	cmp	r3, #0
   10eac:	beq	10ee4 <abort@plt+0x584>
   10eb0:	add	r6, r2, #1
   10eb4:	add	lr, r1, #1
   10eb8:	mov	r2, #0
   10ebc:	uxtb	r4, ip
   10ec0:	uxtb	r5, r3
   10ec4:	cmp	r5, r4
   10ec8:	bne	10ef4 <abort@plt+0x594>
   10ecc:	ldrb	r3, [r6, r2]
   10ed0:	ldrb	ip, [lr, r2]
   10ed4:	add	r2, r2, #1
   10ed8:	cmp	r3, #0
   10edc:	bne	10ebc <abort@plt+0x55c>
   10ee0:	b	10ee8 <abort@plt+0x588>
   10ee4:	mov	r2, #0
   10ee8:	cmp	ip, #0
   10eec:	popeq	{r4, r5, r6, sl, fp, pc}
   10ef0:	mov	r3, #0
   10ef4:	ldrb	r1, [r1, r2]
   10ef8:	uxtb	r2, r3
   10efc:	mov	r0, #1
   10f00:	cmp	r2, r1
   10f04:	mvncc	r0, #0
   10f08:	pop	{r4, r5, r6, sl, fp, pc}
   10f0c:	push	{r4, r5, fp, lr}
   10f10:	add	fp, sp, #8
   10f14:	mov	r5, r1
   10f18:	cmp	r0, #0
   10f1c:	beq	10f50 <abort@plt+0x5f0>
   10f20:	mov	r1, r5
   10f24:	mov	r4, r0
   10f28:	bl	10870 <fopen@plt>
   10f2c:	cmp	r0, #0
   10f30:	popne	{r4, r5, fp, pc}
   10f34:	ldrb	r0, [r5]
   10f38:	cmp	r0, #119	; 0x77
   10f3c:	bne	10f74 <abort@plt+0x614>
   10f40:	ldr	r0, [pc, #72]	; 10f90 <abort@plt+0x630>
   10f44:	mov	r1, r4
   10f48:	add	r0, pc, r0
   10f4c:	bl	1137c <error@@Base+0x50>
   10f50:	ldrb	r0, [r5]
   10f54:	ldr	r1, [pc, #40]	; 10f84 <abort@plt+0x624>
   10f58:	ldr	r1, [pc, r1]
   10f5c:	ldr	r2, [pc, #36]	; 10f88 <abort@plt+0x628>
   10f60:	cmp	r0, #114	; 0x72
   10f64:	ldr	r2, [pc, r2]
   10f68:	moveq	r2, r1
   10f6c:	ldr	r0, [r2]
   10f70:	pop	{r4, r5, fp, pc}
   10f74:	ldr	r0, [pc, #16]	; 10f8c <abort@plt+0x62c>
   10f78:	mov	r1, r4
   10f7c:	add	r0, pc, r0
   10f80:	bl	1137c <error@@Base+0x50>
   10f84:	andeq	r2, r1, r0, lsr r1
   10f88:	andeq	r2, r1, r8, lsr #2
   10f8c:	strdeq	r1, [r0], -r9
   10f90:	andeq	r1, r0, r7, lsl fp
   10f94:	ldr	r1, [pc, #32]	; 10fbc <abort@plt+0x65c>
   10f98:	ldr	r1, [pc, r1]
   10f9c:	ldr	r1, [r1]
   10fa0:	cmp	r1, r0
   10fa4:	ldrne	r1, [pc, #20]	; 10fc0 <abort@plt+0x660>
   10fa8:	ldrne	r1, [pc, r1]
   10fac:	ldrne	r1, [r1]
   10fb0:	cmpne	r1, r0
   10fb4:	bxeq	lr
   10fb8:	b	10930 <fclose@plt>
   10fbc:	strdeq	r2, [r1], -r0
   10fc0:	andeq	r2, r1, r4, ror #1
   10fc4:	push	{fp, lr}
   10fc8:	mov	fp, sp
   10fcc:	sub	sp, sp, #88	; 0x58
   10fd0:	mov	r1, r0
   10fd4:	mov	r2, sp
   10fd8:	mov	r0, #3
   10fdc:	bl	108ac <__xstat@plt>
   10fe0:	clz	r0, r0
   10fe4:	lsr	r0, r0, #5
   10fe8:	mov	sp, fp
   10fec:	pop	{fp, pc}
   10ff0:	push	{r4, r5, fp, lr}
   10ff4:	add	fp, sp, #8
   10ff8:	sub	sp, sp, #104	; 0x68
   10ffc:	ldr	r0, [pc, #92]	; 11060 <abort@plt+0x700>
   11000:	add	r0, pc, r0
   11004:	ldrh	r1, [r0]
   11008:	add	r5, r1, #1
   1100c:	strh	r5, [r0]
   11010:	ldr	r0, [pc, #76]	; 11064 <abort@plt+0x704>
   11014:	ldr	r0, [pc, r0]
   11018:	ldr	r4, [r0]
   1101c:	bl	108e8 <getpid@plt>
   11020:	mov	r3, r0
   11024:	sxth	r0, r5
   11028:	add	r5, sp, #4
   1102c:	mov	r2, r4
   11030:	str	r0, [sp]
   11034:	mov	r0, r5
   11038:	ldr	r1, [pc, #40]	; 11068 <abort@plt+0x708>
   1103c:	add	r1, pc, r1
   11040:	bl	10948 <sprintf@plt>
   11044:	mov	r0, r5
   11048:	bl	10894 <strdup@plt>
   1104c:	mov	r4, r0
   11050:	bl	108a0 <unlink@plt>
   11054:	mov	r0, r4
   11058:	sub	sp, fp, #8
   1105c:	pop	{r4, r5, fp, pc}
   11060:	andeq	r2, r1, sl, lsr #1
   11064:	andeq	r2, r1, r4, rrx
   11068:	andeq	r1, r0, r2, ror #20
   1106c:	push	{r4, sl, fp, lr}
   11070:	add	fp, sp, #8
   11074:	mov	r4, r0
   11078:	bl	10900 <strlen@plt>
   1107c:	sub	r0, r0, #1
   11080:	sxth	r0, r0
   11084:	cmp	r0, #0
   11088:	blt	11098 <abort@plt+0x738>
   1108c:	ldrb	r1, [r4, r0]
   11090:	cmp	r1, #47	; 0x2f
   11094:	bne	1107c <abort@plt+0x71c>
   11098:	add	r0, r4, r0
   1109c:	add	r0, r0, #1
   110a0:	pop	{r4, sl, fp, pc}
   110a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110a8:	add	fp, sp, #28
   110ac:	sub	sp, sp, #12
   110b0:	str	r2, [sp]
   110b4:	stmib	sp, {r0, r1}
   110b8:	mov	r6, r3
   110bc:	ldr	r4, [r1]
   110c0:	mov	r0, r4
   110c4:	bl	10900 <strlen@plt>
   110c8:	sub	r0, r0, #1
   110cc:	sxth	r0, r0
   110d0:	cmp	r0, #0
   110d4:	blt	110e4 <abort@plt+0x784>
   110d8:	ldrb	r1, [r4, r0]
   110dc:	cmp	r1, #47	; 0x2f
   110e0:	bne	110c8 <abort@plt+0x768>
   110e4:	ldr	r1, [pc, #484]	; 112d0 <abort@plt+0x970>
   110e8:	add	r0, r4, r0
   110ec:	add	r0, r0, #1
   110f0:	ldr	r1, [pc, r1]
   110f4:	str	r0, [r1]
   110f8:	mov	r0, #2
   110fc:	ldr	r4, [pc, #464]	; 112d4 <abort@plt+0x974>
   11100:	add	r4, pc, r4
   11104:	mov	r1, r4
   11108:	bl	108d0 <__sysv_signal@plt>
   1110c:	mov	r0, #15
   11110:	mov	r1, r4
   11114:	bl	108d0 <__sysv_signal@plt>
   11118:	ldr	r0, [sp, #4]
   1111c:	ldr	r5, [r0]
   11120:	cmp	r5, #1
   11124:	bne	1113c <abort@plt+0x7dc>
   11128:	ldr	r0, [pc, #424]	; 112d8 <abort@plt+0x978>
   1112c:	ldr	r0, [pc, r0]
   11130:	ldrb	r0, [r0]
   11134:	cmp	r0, #0
   11138:	bne	112b8 <abort@plt+0x958>
   1113c:	ldr	ip, [sp, #8]
   11140:	mov	r8, #0
   11144:	cmp	r5, #2
   11148:	blt	11294 <abort@plt+0x934>
   1114c:	mov	r8, #0
   11150:	mov	r7, #1
   11154:	mov	r9, #1
   11158:	ldr	r4, [ip, r7, lsl #2]
   1115c:	ldrb	r0, [r4]
   11160:	cmp	r0, #45	; 0x2d
   11164:	bne	1123c <abort@plt+0x8dc>
   11168:	ldrb	sl, [r4, #1]
   1116c:	cmp	sl, #0
   11170:	beq	1123c <abort@plt+0x8dc>
   11174:	mov	r0, r4
   11178:	bl	10900 <strlen@plt>
   1117c:	mov	r2, r0
   11180:	ldr	r0, [pc, #340]	; 112dc <abort@plt+0x97c>
   11184:	mov	r1, r4
   11188:	add	r0, pc, r0
   1118c:	bl	10954 <strncmp@plt>
   11190:	cmp	r0, #0
   11194:	beq	112b8 <abort@plt+0x958>
   11198:	ldr	ip, [sp, #8]
   1119c:	add	r1, r7, #1
   111a0:	mov	r0, #0
   111a4:	cmp	r1, r5
   111a8:	ldrlt	r0, [ip, r1, lsl #2]
   111ac:	cmp	r6, #0
   111b0:	ldrbne	r2, [r6]
   111b4:	cmpne	r2, #0
   111b8:	beq	112a8 <abort@plt+0x948>
   111bc:	mov	r1, #0
   111c0:	cmp	sl, r2
   111c4:	beq	111ec <abort@plt+0x88c>
   111c8:	mov	r2, #1
   111cc:	sxth	r1, r2
   111d0:	add	r3, r1, r1, lsl #1
   111d4:	ldrb	r3, [r6, r3, lsl #2]
   111d8:	cmp	r3, #0
   111dc:	beq	112a8 <abort@plt+0x948>
   111e0:	add	r2, r2, #1
   111e4:	cmp	sl, r3
   111e8:	bne	111cc <abort@plt+0x86c>
   111ec:	add	r1, r1, r1, lsl #1
   111f0:	add	r3, r6, r1, lsl #2
   111f4:	ldr	r1, [r3, #4]
   111f8:	cmp	r1, #0
   111fc:	beq	1125c <abort@plt+0x8fc>
   11200:	mov	r2, r4
   11204:	cmp	r0, #0
   11208:	ldrb	r7, [r2, #2]!
   1120c:	cmpeq	r7, #0
   11210:	beq	1125c <abort@plt+0x8fc>
   11214:	ldr	r3, [r1]
   11218:	cmp	r3, #0
   1121c:	bne	112c0 <abort@plt+0x960>
   11220:	cmp	r7, #0
   11224:	movne	r0, r2
   11228:	str	r0, [r1]
   1122c:	ldrb	r0, [r2]
   11230:	cmp	r0, #0
   11234:	addeq	r9, r9, #1
   11238:	b	11248 <abort@plt+0x8e8>
   1123c:	sxth	r0, r8
   11240:	add	r8, r8, #1
   11244:	str	r4, [ip, r0, lsl #2]
   11248:	add	r9, r9, #1
   1124c:	sxth	r7, r9
   11250:	cmp	r5, r7
   11254:	bgt	11158 <abort@plt+0x7f8>
   11258:	b	11294 <abort@plt+0x934>
   1125c:	ldr	r0, [r3, #8]
   11260:	cmp	r0, #0
   11264:	beq	112a8 <abort@plt+0x948>
   11268:	ldrb	r1, [r4, #2]
   1126c:	cmp	r1, #0
   11270:	bne	112a8 <abort@plt+0x948>
   11274:	ldrb	r1, [r0]
   11278:	cmp	r1, #0
   1127c:	bne	112c0 <abort@plt+0x960>
   11280:	mov	r1, #1
   11284:	strb	r1, [r0]
   11288:	ldr	r0, [sp, #4]
   1128c:	ldr	r5, [r0]
   11290:	b	11248 <abort@plt+0x8e8>
   11294:	ldr	r1, [sp, #4]
   11298:	sxth	r0, r8
   1129c:	str	r0, [r1]
   112a0:	sub	sp, fp, #28
   112a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112a8:	ldr	r0, [pc, #52]	; 112e4 <abort@plt+0x984>
   112ac:	mov	r1, r4
   112b0:	add	r0, pc, r0
   112b4:	bl	1137c <error@@Base+0x50>
   112b8:	ldr	r0, [sp]
   112bc:	bl	11458 <error@@Base+0x12c>
   112c0:	ldr	r0, [pc, #24]	; 112e0 <abort@plt+0x980>
   112c4:	mov	r1, r4
   112c8:	add	r0, pc, r0
   112cc:	bl	1137c <error@@Base+0x50>
   112d0:	andeq	r1, r1, r8, lsl #31
   112d4:	andeq	r0, r0, r8, lsl r3
   112d8:	andeq	r1, r1, ip, lsr pc
   112dc:	andeq	r1, r0, r3, lsr r9
   112e0:	andeq	r1, r0, r7, lsl r8
   112e4:	andeq	r1, r0, r0, lsr #16
   112e8:	push	{fp, lr}
   112ec:	mov	fp, sp
   112f0:	mov	r0, #0
   112f4:	bl	112f8 <abort@plt+0x998>
   112f8:	push	{fp, lr}
   112fc:	mov	fp, sp
   11300:	mov	r4, r0
   11304:	ldr	r0, [pc, #28]	; 11328 <abort@plt+0x9c8>
   11308:	ldr	r0, [pc, r0]
   1130c:	ldr	r0, [r0]
   11310:	cmp	r0, #0
   11314:	beq	1131c <abort@plt+0x9bc>
   11318:	blx	r0
   1131c:	bl	114b8 <error@@Base+0x18c>
   11320:	mov	r0, r4
   11324:	bl	108f4 <exit@plt>
   11328:	andeq	r1, r1, ip, ror sp

0001132c <error@@Base>:
   1132c:	push	{fp, lr}
   11330:	mov	fp, sp
   11334:	mov	r3, r0
   11338:	ldr	r0, [pc, #44]	; 1136c <error@@Base+0x40>
   1133c:	ldr	r0, [pc, r0]
   11340:	ldr	r2, [r0]
   11344:	ldr	r0, [pc, #36]	; 11370 <error@@Base+0x44>
   11348:	ldr	r0, [pc, r0]
   1134c:	ldr	r0, [r0]
   11350:	ldr	r1, [pc, #28]	; 11374 <error@@Base+0x48>
   11354:	add	r1, pc, r1
   11358:	bl	1090c <fprintf@plt>
   1135c:	ldr	r0, [pc, #20]	; 11378 <error@@Base+0x4c>
   11360:	ldr	r0, [pc, r0]
   11364:	ldr	r0, [r0]
   11368:	bl	112f8 <abort@plt+0x998>
   1136c:	andeq	r1, r1, ip, lsr sp
   11370:	andeq	r1, r1, r8, lsr #26
   11374:	andeq	r1, r0, r5, lsr r7
   11378:	andeq	r1, r1, r0, lsr sp
   1137c:	push	{fp, lr}
   11380:	mov	fp, sp
   11384:	sub	sp, sp, #8
   11388:	mov	r3, r0
   1138c:	ldr	r0, [pc, #48]	; 113c4 <error@@Base+0x98>
   11390:	ldr	r0, [pc, r0]
   11394:	ldr	r2, [r0]
   11398:	ldr	r0, [pc, #40]	; 113c8 <error@@Base+0x9c>
   1139c:	ldr	r0, [pc, r0]
   113a0:	str	r1, [sp]
   113a4:	ldr	r0, [r0]
   113a8:	ldr	r1, [pc, #28]	; 113cc <error@@Base+0xa0>
   113ac:	add	r1, pc, r1
   113b0:	bl	1090c <fprintf@plt>
   113b4:	ldr	r0, [pc, #20]	; 113d0 <error@@Base+0xa4>
   113b8:	ldr	r0, [pc, r0]
   113bc:	ldr	r0, [r0]
   113c0:	bl	112f8 <abort@plt+0x998>
   113c4:	andeq	r1, r1, r8, ror #25
   113c8:	ldrdeq	r1, [r1], -r4
   113cc:	andeq	r1, r0, r5, ror #13
   113d0:	ldrdeq	r1, [r1], -r8
   113d4:	push	{fp, lr}
   113d8:	mov	fp, sp
   113dc:	sub	sp, sp, #8
   113e0:	mov	r3, r0
   113e4:	ldr	r0, [pc, #40]	; 11414 <error@@Base+0xe8>
   113e8:	ldr	r0, [pc, r0]
   113ec:	ldr	r2, [r0]
   113f0:	ldr	r0, [pc, #32]	; 11418 <error@@Base+0xec>
   113f4:	ldr	r0, [pc, r0]
   113f8:	str	r1, [sp]
   113fc:	ldr	r0, [r0]
   11400:	ldr	r1, [pc, #20]	; 1141c <error@@Base+0xf0>
   11404:	add	r1, pc, r1
   11408:	bl	1090c <fprintf@plt>
   1140c:	mov	sp, fp
   11410:	pop	{fp, pc}
   11414:	muleq	r1, r0, ip
   11418:	andeq	r1, r1, ip, ror ip
   1141c:	andeq	r1, r0, sp, lsl #13
   11420:	ldr	r0, [pc, #40]	; 11450 <error@@Base+0x124>
   11424:	add	r0, pc, r0
   11428:	ldrb	r1, [r0]
   1142c:	cmp	r1, #1
   11430:	bxeq	lr
   11434:	push	{fp, lr}
   11438:	mov	fp, sp
   1143c:	mov	r1, #1
   11440:	strb	r1, [r0]
   11444:	ldr	r0, [pc, #8]	; 11454 <error@@Base+0x128>
   11448:	add	r0, pc, r0
   1144c:	bl	1132c <error@@Base>
   11450:	andeq	r1, r1, r8, lsl #25
   11454:	andeq	r1, r0, r4, ror #12
   11458:	push	{fp, lr}
   1145c:	mov	fp, sp
   11460:	mov	r3, r0
   11464:	ldr	r0, [pc, #60]	; 114a8 <error@@Base+0x17c>
   11468:	ldr	r0, [pc, r0]
   1146c:	ldr	r0, [r0]
   11470:	cmp	r0, #0
   11474:	bne	114a0 <error@@Base+0x174>
   11478:	ldr	r0, [pc, #44]	; 114ac <error@@Base+0x180>
   1147c:	ldr	r0, [pc, r0]
   11480:	ldr	r2, [r0]
   11484:	ldr	r0, [pc, #36]	; 114b0 <error@@Base+0x184>
   11488:	ldr	r0, [pc, r0]
   1148c:	ldr	r0, [r0]
   11490:	ldr	r1, [pc, #28]	; 114b4 <error@@Base+0x188>
   11494:	add	r1, pc, r1
   11498:	bl	1090c <fprintf@plt>
   1149c:	bl	112e8 <abort@plt+0x988>
   114a0:	blx	r0
   114a4:	bl	112e8 <abort@plt+0x988>
   114a8:	andeq	r1, r1, r4, lsl #24
   114ac:	strdeq	r1, [r1], -ip
   114b0:	andeq	r1, r1, r8, ror #23
   114b4:	andeq	r1, r0, sp, lsr #12
   114b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   114bc:	add	fp, sp, #24
   114c0:	sub	sp, sp, #104	; 0x68
   114c4:	ldr	r8, [pc, #124]	; 11548 <error@@Base+0x21c>
   114c8:	add	r8, pc, r8
   114cc:	ldrsh	r0, [r8]
   114d0:	cmp	r0, #1
   114d4:	blt	11540 <error@@Base+0x214>
   114d8:	ldr	r9, [pc, #108]	; 1154c <error@@Base+0x220>
   114dc:	mov	r7, #1
   114e0:	add	r4, sp, #4
   114e4:	ldr	r9, [pc, r9]
   114e8:	ldr	r5, [pc, #96]	; 11550 <error@@Base+0x224>
   114ec:	add	r5, pc, r5
   114f0:	ldr	r6, [r9]
   114f4:	bl	108e8 <getpid@plt>
   114f8:	mov	r3, r0
   114fc:	sxth	r0, r7
   11500:	mov	r1, r5
   11504:	mov	r2, r6
   11508:	str	r0, [sp]
   1150c:	mov	r0, r4
   11510:	bl	10948 <sprintf@plt>
   11514:	mov	r0, r4
   11518:	bl	10894 <strdup@plt>
   1151c:	mov	r6, r0
   11520:	bl	108a0 <unlink@plt>
   11524:	mov	r0, r6
   11528:	bl	1087c <free@plt>
   1152c:	add	r0, r7, #1
   11530:	sxth	r7, r0
   11534:	ldrsh	r0, [r8]
   11538:	cmp	r7, r0
   1153c:	ble	114f0 <error@@Base+0x1c4>
   11540:	sub	sp, fp, #24
   11544:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11548:	andeq	r1, r1, r2, ror #23
   1154c:	muleq	r1, r4, fp
   11550:			; <UNDEFINED> instruction: 0x000015b2
   11554:	andeq	r0, r0, r0
   11558:	ldm	r0, {r3, ip}
   1155c:	add	r1, r3, r1
   11560:	add	r2, ip, r2
   11564:	stm	r0, {r1, r2}
   11568:	bx	lr
   1156c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11570:	add	fp, sp, #24
   11574:	mov	r8, r3
   11578:	mov	r5, r2
   1157c:	mov	r4, r1
   11580:	mov	r6, r0
   11584:	bl	1265c <error@@Base+0x1330>
   11588:	mov	r7, r0
   1158c:	cmp	r0, #0
   11590:	bne	115bc <error@@Base+0x290>
   11594:	mov	r0, #1
   11598:	mov	r1, #20
   1159c:	bl	10e6c <abort@plt+0x50c>
   115a0:	mov	r7, r0
   115a4:	mov	r0, r4
   115a8:	bl	10894 <strdup@plt>
   115ac:	str	r0, [r7, #8]
   115b0:	mov	r0, r6
   115b4:	mov	r1, r7
   115b8:	bl	126ec <error@@Base+0x13c0>
   115bc:	ldr	r0, [r7, #12]
   115c0:	ldr	r1, [r7, #16]
   115c4:	add	r0, r0, r5
   115c8:	add	r1, r1, r8
   115cc:	str	r0, [r7, #12]
   115d0:	str	r1, [r7, #16]
   115d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   115d8:	push	{r4, r5, r6, r7, fp, lr}
   115dc:	add	fp, sp, #16
   115e0:	sub	sp, sp, #8
   115e4:	mov	r6, r1
   115e8:	ldr	r1, [pc, #488]	; 117d8 <error@@Base+0x4ac>
   115ec:	mov	r5, r0
   115f0:	mov	r0, r6
   115f4:	add	r1, pc, r1
   115f8:	bl	10f0c <abort@plt+0x5ac>
   115fc:	mov	r4, r0
   11600:	ldr	r0, [pc, #468]	; 117dc <error@@Base+0x4b0>
   11604:	mov	r1, #99	; 0x63
   11608:	mov	r2, r4
   1160c:	add	r0, pc, r0
   11610:	bl	10888 <fgets@plt>
   11614:	cmp	r0, #0
   11618:	beq	117bc <error@@Base+0x490>
   1161c:	ldr	r0, [pc, #444]	; 117e0 <error@@Base+0x4b4>
   11620:	ldr	r1, [pc, #444]	; 117e4 <error@@Base+0x4b8>
   11624:	mov	r2, #45	; 0x2d
   11628:	add	r0, pc, r0
   1162c:	add	r1, pc, r1
   11630:	bl	10954 <strncmp@plt>
   11634:	cmp	r0, #0
   11638:	bne	117bc <error@@Base+0x490>
   1163c:	ldr	r0, [pc, #420]	; 117e8 <error@@Base+0x4bc>
   11640:	mov	r1, #99	; 0x63
   11644:	mov	r2, r4
   11648:	add	r0, pc, r0
   1164c:	bl	10888 <fgets@plt>
   11650:	cmp	r0, #0
   11654:	beq	117bc <error@@Base+0x490>
   11658:	ldr	r0, [pc, #396]	; 117ec <error@@Base+0x4c0>
   1165c:	ldr	r1, [pc, #396]	; 117f0 <error@@Base+0x4c4>
   11660:	add	r0, pc, r0
   11664:	add	r1, pc, r1
   11668:	bl	1084c <strcmp@plt>
   1166c:	cmp	r0, #0
   11670:	bne	117bc <error@@Base+0x490>
   11674:	ldr	r0, [pc, #376]	; 117f4 <error@@Base+0x4c8>
   11678:	mov	r1, #99	; 0x63
   1167c:	mov	r2, r4
   11680:	add	r0, pc, r0
   11684:	bl	10888 <fgets@plt>
   11688:	cmp	r0, #0
   1168c:	beq	117bc <error@@Base+0x490>
   11690:	ldr	r0, [pc, #352]	; 117f8 <error@@Base+0x4cc>
   11694:	ldr	r1, [pc, #352]	; 117fc <error@@Base+0x4d0>
   11698:	add	r2, sp, #4
   1169c:	add	r0, pc, r0
   116a0:	add	r1, pc, r1
   116a4:	bl	10924 <__isoc99_sscanf@plt>
   116a8:	cmp	r0, #1
   116ac:	bne	117bc <error@@Base+0x490>
   116b0:	ldr	r0, [pc, #328]	; 11800 <error@@Base+0x4d4>
   116b4:	mov	r1, #99	; 0x63
   116b8:	mov	r2, r4
   116bc:	add	r0, pc, r0
   116c0:	bl	10888 <fgets@plt>
   116c4:	cmp	r0, #0
   116c8:	beq	117bc <error@@Base+0x490>
   116cc:	ldr	r0, [pc, #304]	; 11804 <error@@Base+0x4d8>
   116d0:	ldr	r1, [pc, #304]	; 11808 <error@@Base+0x4dc>
   116d4:	mov	r2, sp
   116d8:	add	r0, pc, r0
   116dc:	add	r1, pc, r1
   116e0:	bl	10924 <__isoc99_sscanf@plt>
   116e4:	cmp	r0, #1
   116e8:	bne	117bc <error@@Base+0x490>
   116ec:	ldr	r0, [pc, #280]	; 1180c <error@@Base+0x4e0>
   116f0:	mov	r1, #99	; 0x63
   116f4:	mov	r2, r4
   116f8:	add	r0, pc, r0
   116fc:	bl	10888 <fgets@plt>
   11700:	cmp	r0, #0
   11704:	beq	117bc <error@@Base+0x490>
   11708:	ldr	r0, [pc, #256]	; 11810 <error@@Base+0x4e4>
   1170c:	mov	r1, #99	; 0x63
   11710:	mov	r2, r4
   11714:	add	r0, pc, r0
   11718:	bl	10888 <fgets@plt>
   1171c:	cmp	r0, #0
   11720:	beq	117bc <error@@Base+0x490>
   11724:	ldm	r5, {r0, r1}
   11728:	ldr	r2, [sp, #4]
   1172c:	add	r0, r0, r2
   11730:	ldr	r2, [sp]
   11734:	add	r1, r1, r2
   11738:	stm	r5, {r0, r1}
   1173c:	add	r1, r5, #8
   11740:	mov	r0, r4
   11744:	bl	1181c <error@@Base+0x4f0>
   11748:	mov	r7, r0
   1174c:	add	r1, r5, #416	; 0x1a0
   11750:	mov	r0, r4
   11754:	bl	1181c <error@@Base+0x4f0>
   11758:	mov	r6, r0
   1175c:	add	r1, r5, #824	; 0x338
   11760:	mov	r0, r4
   11764:	bl	1181c <error@@Base+0x4f0>
   11768:	ldr	r0, [sp, #4]
   1176c:	cmp	r0, #1
   11770:	blt	117ac <error@@Base+0x480>
   11774:	add	r1, r5, #920	; 0x398
   11778:	mov	r0, r4
   1177c:	bl	1181c <error@@Base+0x4f0>
   11780:	cmp	r7, #1
   11784:	blt	11794 <error@@Base+0x468>
   11788:	add	r1, r5, #992	; 0x3e0
   1178c:	mov	r0, r4
   11790:	bl	11954 <error@@Base+0x628>
   11794:	cmp	r6, #1
   11798:	blt	117ac <error@@Base+0x480>
   1179c:	movw	r0, #9048	; 0x2358
   117a0:	add	r1, r5, r0
   117a4:	mov	r0, r4
   117a8:	bl	11954 <error@@Base+0x628>
   117ac:	mov	r0, r4
   117b0:	bl	10f94 <abort@plt+0x634>
   117b4:	sub	sp, fp, #16
   117b8:	pop	{r4, r5, r6, r7, fp, pc}
   117bc:	ldr	r1, [pc, #80]	; 11814 <error@@Base+0x4e8>
   117c0:	ldr	r0, [pc, #80]	; 11818 <error@@Base+0x4ec>
   117c4:	cmp	r6, #0
   117c8:	add	r1, pc, r1
   117cc:	add	r0, pc, r0
   117d0:	movne	r1, r6
   117d4:	bl	1137c <error@@Base+0x50>
   117d8:	strdeq	r1, [r0], -ip
   117dc:	andeq	r1, r1, r1, lsr #21
   117e0:	andeq	r1, r1, r5, lsl #21
   117e4:	andeq	r1, r0, r6, asr #9
   117e8:	andeq	r1, r1, r5, ror #20
   117ec:	andeq	r1, r1, sp, asr #20
   117f0:			; <UNDEFINED> instruction: 0x000014be
   117f4:	andeq	r1, r1, sp, lsr #20
   117f8:	andeq	r1, r1, r1, lsl sl
   117fc:	andeq	r1, r0, sl, lsr #10
   11800:	strdeq	r1, [r1], -r1	; <UNPREDICTABLE>
   11804:	ldrdeq	r1, [r1], -r5
   11808:	andeq	r1, r0, lr, ror #9
   1180c:			; <UNDEFINED> instruction: 0x000119b5
   11810:	muleq	r1, r9, r9
   11814:	muleq	r0, ip, r3
   11818:	andeq	r1, r0, r6, lsl #7
   1181c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11820:	add	fp, sp, #28
   11824:	sub	sp, sp, #12
   11828:	mov	r5, r0
   1182c:	ldr	r0, [pc, #268]	; 11940 <error@@Base+0x614>
   11830:	mov	r4, r1
   11834:	mov	r1, #99	; 0x63
   11838:	mov	r2, r5
   1183c:	add	r0, pc, r0
   11840:	bl	10888 <fgets@plt>
   11844:	mov	r6, #0
   11848:	cmp	r0, #0
   1184c:	beq	11934 <error@@Base+0x608>
   11850:	ldr	r0, [pc, #236]	; 11944 <error@@Base+0x618>
   11854:	mov	r1, #99	; 0x63
   11858:	mov	r2, r5
   1185c:	add	r0, pc, r0
   11860:	bl	10888 <fgets@plt>
   11864:	cmp	r0, #0
   11868:	beq	11934 <error@@Base+0x608>
   1186c:	ldr	r7, [pc, #212]	; 11948 <error@@Base+0x61c>
   11870:	mov	r1, #99	; 0x63
   11874:	mov	r2, r5
   11878:	add	r7, pc, r7
   1187c:	mov	r0, r7
   11880:	bl	10888 <fgets@plt>
   11884:	cmp	r0, #0
   11888:	beq	11934 <error@@Base+0x608>
   1188c:	mov	r6, #0
   11890:	add	r9, sp, #8
   11894:	add	sl, sp, #4
   11898:	add	r8, r7, #29
   1189c:	ldr	r1, [pc, #168]	; 1194c <error@@Base+0x620>
   118a0:	mov	r0, r7
   118a4:	mov	r2, r9
   118a8:	mov	r3, sl
   118ac:	add	r1, pc, r1
   118b0:	bl	10924 <__isoc99_sscanf@plt>
   118b4:	cmp	r0, #2
   118b8:	bne	11934 <error@@Base+0x608>
   118bc:	mov	r0, r8
   118c0:	mov	r1, #0
   118c4:	mov	r2, #10
   118c8:	bl	10858 <strtol@plt>
   118cc:	cmp	r0, #0
   118d0:	beq	118dc <error@@Base+0x5b0>
   118d4:	ldr	r1, [sp, #8]
   118d8:	b	118fc <error@@Base+0x5d0>
   118dc:	ldr	r1, [pc, #108]	; 11950 <error@@Base+0x624>
   118e0:	mov	r0, r8
   118e4:	add	r1, pc, r1
   118e8:	bl	1084c <strcmp@plt>
   118ec:	ldr	r1, [sp, #8]
   118f0:	cmp	r0, #0
   118f4:	movwne	r0, #11
   118f8:	moveq	r6, r1
   118fc:	mov	r2, r4
   11900:	ldr	r0, [r2, r0, lsl #3]!
   11904:	add	r0, r0, r1
   11908:	ldr	r1, [sp, #4]
   1190c:	str	r0, [r2]
   11910:	ldr	r0, [r2, #4]
   11914:	add	r0, r0, r1
   11918:	mov	r1, #99	; 0x63
   1191c:	str	r0, [r2, #4]
   11920:	mov	r0, r7
   11924:	mov	r2, r5
   11928:	bl	10888 <fgets@plt>
   1192c:	cmp	r0, #0
   11930:	bne	1189c <error@@Base+0x570>
   11934:	mov	r0, r6
   11938:	sub	sp, fp, #28
   1193c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11940:	andeq	r1, r1, r1, ror r8
   11944:	andeq	r1, r1, r1, asr r8
   11948:	andeq	r1, r1, r5, lsr r8
   1194c:	andeq	r1, r0, sl, lsl r3
   11950:	ldrdeq	r1, [r0], -sl
   11954:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11958:	add	fp, sp, #28
   1195c:	sub	sp, sp, #12
   11960:	mov	r5, r0
   11964:	ldr	r0, [pc, #268]	; 11a78 <error@@Base+0x74c>
   11968:	mov	r4, r1
   1196c:	mov	r1, #99	; 0x63
   11970:	mov	r2, r5
   11974:	add	r0, pc, r0
   11978:	bl	10888 <fgets@plt>
   1197c:	cmp	r0, #0
   11980:	beq	11a70 <error@@Base+0x744>
   11984:	ldr	r0, [pc, #240]	; 11a7c <error@@Base+0x750>
   11988:	mov	r1, #99	; 0x63
   1198c:	mov	r2, r5
   11990:	add	r0, pc, r0
   11994:	bl	10888 <fgets@plt>
   11998:	cmp	r0, #0
   1199c:	beq	11a70 <error@@Base+0x744>
   119a0:	ldr	r6, [pc, #216]	; 11a80 <error@@Base+0x754>
   119a4:	mov	r1, #99	; 0x63
   119a8:	mov	r2, r5
   119ac:	add	r6, pc, r6
   119b0:	mov	r0, r6
   119b4:	bl	10888 <fgets@plt>
   119b8:	cmp	r0, #0
   119bc:	beq	11a70 <error@@Base+0x744>
   119c0:	add	r7, r6, #29
   119c4:	ldr	r1, [pc, #184]	; 11a84 <error@@Base+0x758>
   119c8:	mov	r0, r6
   119cc:	add	r2, sp, #8
   119d0:	add	r3, sp, #4
   119d4:	add	r1, pc, r1
   119d8:	bl	10924 <__isoc99_sscanf@plt>
   119dc:	cmp	r0, #2
   119e0:	bne	11a70 <error@@Base+0x744>
   119e4:	mov	r0, r6
   119e8:	bl	10900 <strlen@plt>
   119ec:	ldr	r9, [sp, #8]
   119f0:	ldr	sl, [sp, #4]
   119f4:	add	r0, r6, r0
   119f8:	mov	r1, #0
   119fc:	strb	r1, [r0, #-1]
   11a00:	mov	r0, r4
   11a04:	mov	r1, r7
   11a08:	bl	1265c <error@@Base+0x1330>
   11a0c:	mov	r8, r0
   11a10:	cmp	r0, #0
   11a14:	bne	11a40 <error@@Base+0x714>
   11a18:	mov	r0, #1
   11a1c:	mov	r1, #20
   11a20:	bl	10e6c <abort@plt+0x50c>
   11a24:	mov	r8, r0
   11a28:	mov	r0, r7
   11a2c:	bl	10894 <strdup@plt>
   11a30:	str	r0, [r8, #8]
   11a34:	mov	r0, r4
   11a38:	mov	r1, r8
   11a3c:	bl	126ec <error@@Base+0x13c0>
   11a40:	ldr	r0, [r8, #12]
   11a44:	ldr	r1, [r8, #16]
   11a48:	mov	r2, r5
   11a4c:	add	r0, r0, r9
   11a50:	add	r1, r1, sl
   11a54:	str	r0, [r8, #12]
   11a58:	str	r1, [r8, #16]
   11a5c:	mov	r0, r6
   11a60:	mov	r1, #99	; 0x63
   11a64:	bl	10888 <fgets@plt>
   11a68:	cmp	r0, #0
   11a6c:	bne	119c4 <error@@Base+0x698>
   11a70:	sub	sp, fp, #28
   11a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a78:	andeq	r1, r1, r9, lsr r7
   11a7c:	andeq	r1, r1, sp, lsl r7
   11a80:	andeq	r1, r1, r1, lsl #14
   11a84:	strdeq	r1, [r0], -r2
   11a88:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11a8c:	add	fp, sp, #24
   11a90:	sub	sp, sp, #8
   11a94:	mov	r2, r1
   11a98:	ldr	r1, [pc, #448]	; 11c60 <error@@Base+0x934>
   11a9c:	mov	r5, r0
   11aa0:	mov	r0, r2
   11aa4:	add	r1, pc, r1
   11aa8:	bl	10f0c <abort@plt+0x5ac>
   11aac:	ldr	r1, [pc, #432]	; 11c64 <error@@Base+0x938>
   11ab0:	ldr	r2, [pc, #432]	; 11c68 <error@@Base+0x93c>
   11ab4:	ldr	r3, [pc, #432]	; 11c6c <error@@Base+0x940>
   11ab8:	mov	r4, r0
   11abc:	add	r1, pc, r1
   11ac0:	add	r2, pc, r2
   11ac4:	add	r3, pc, r3
   11ac8:	bl	1090c <fprintf@plt>
   11acc:	ldr	r2, [r5]
   11ad0:	ldr	r1, [pc, #408]	; 11c70 <error@@Base+0x944>
   11ad4:	mov	r0, r4
   11ad8:	add	r1, pc, r1
   11adc:	bl	1090c <fprintf@plt>
   11ae0:	ldr	r2, [r5, #4]
   11ae4:	ldr	r1, [pc, #392]	; 11c74 <error@@Base+0x948>
   11ae8:	mov	r0, r4
   11aec:	add	r1, pc, r1
   11af0:	bl	1090c <fprintf@plt>
   11af4:	ldr	r0, [r5]
   11af8:	cmp	r0, #0
   11afc:	beq	11b3c <error@@Base+0x810>
   11b00:	ldr	r1, [r5, #4]
   11b04:	vldr	d16, [pc, #332]	; 11c58 <error@@Base+0x92c>
   11b08:	vmov	s2, r0
   11b0c:	sub	r1, r0, r1
   11b10:	mov	r0, r4
   11b14:	vmov	s0, r1
   11b18:	vcvt.f64.s32	d17, s0
   11b1c:	vcvt.f64.s32	d18, s2
   11b20:	ldr	r1, [pc, #340]	; 11c7c <error@@Base+0x950>
   11b24:	vmul.f64	d16, d17, d16
   11b28:	vdiv.f64	d16, d16, d18
   11b2c:	vmov	r2, r3, d16
   11b30:	add	r1, pc, r1
   11b34:	bl	1090c <fprintf@plt>
   11b38:	b	11b54 <error@@Base+0x828>
   11b3c:	ldr	r0, [pc, #308]	; 11c78 <error@@Base+0x94c>
   11b40:	mov	r1, #8
   11b44:	mov	r2, #1
   11b48:	mov	r3, r4
   11b4c:	add	r0, pc, r0
   11b50:	bl	108b8 <fwrite@plt>
   11b54:	ldr	r0, [pc, #292]	; 11c80 <error@@Base+0x954>
   11b58:	mov	r1, #12
   11b5c:	mov	r2, #1
   11b60:	mov	r3, r4
   11b64:	mov	r7, #1
   11b68:	add	r0, pc, r0
   11b6c:	bl	108b8 <fwrite@plt>
   11b70:	mov	r8, #0
   11b74:	str	r7, [sp, #4]
   11b78:	add	r1, r5, #8
   11b7c:	mov	r0, r4
   11b80:	mov	r2, #50	; 0x32
   11b84:	str	r8, [sp]
   11b88:	ldr	r3, [pc, #244]	; 11c84 <error@@Base+0x958>
   11b8c:	add	r3, pc, r3
   11b90:	bl	11ca0 <error@@Base+0x974>
   11b94:	str	r8, [sp]
   11b98:	str	r7, [sp, #4]
   11b9c:	add	r6, r5, #416	; 0x1a0
   11ba0:	mov	r0, r4
   11ba4:	mov	r2, #50	; 0x32
   11ba8:	ldr	r3, [pc, #216]	; 11c88 <error@@Base+0x95c>
   11bac:	mov	r1, r6
   11bb0:	add	r3, pc, r3
   11bb4:	bl	11ca0 <error@@Base+0x974>
   11bb8:	str	r7, [sp]
   11bbc:	str	r7, [sp, #4]
   11bc0:	add	r1, r5, #824	; 0x338
   11bc4:	mov	r0, r4
   11bc8:	mov	r2, #10
   11bcc:	ldr	r3, [pc, #184]	; 11c8c <error@@Base+0x960>
   11bd0:	add	r3, pc, r3
   11bd4:	bl	11ca0 <error@@Base+0x974>
   11bd8:	ldr	r0, [r5]
   11bdc:	cmp	r0, #1
   11be0:	blt	11c48 <error@@Base+0x91c>
   11be4:	str	r8, [sp]
   11be8:	str	r8, [sp, #4]
   11bec:	add	r1, r5, #920	; 0x398
   11bf0:	mov	r0, r4
   11bf4:	mov	r2, #8
   11bf8:	ldr	r3, [pc, #144]	; 11c90 <error@@Base+0x964>
   11bfc:	add	r3, pc, r3
   11c00:	bl	11ca0 <error@@Base+0x974>
   11c04:	ldr	r0, [r5, #8]
   11c08:	cmp	r0, #1
   11c0c:	blt	11c24 <error@@Base+0x8f8>
   11c10:	ldr	r2, [pc, #124]	; 11c94 <error@@Base+0x968>
   11c14:	add	r1, r5, #992	; 0x3e0
   11c18:	mov	r0, r4
   11c1c:	add	r2, pc, r2
   11c20:	bl	12060 <error@@Base+0xd34>
   11c24:	ldr	r0, [r6]
   11c28:	cmp	r0, #1
   11c2c:	blt	11c48 <error@@Base+0x91c>
   11c30:	ldr	r2, [pc, #96]	; 11c98 <error@@Base+0x96c>
   11c34:	movw	r0, #9048	; 0x2358
   11c38:	add	r1, r5, r0
   11c3c:	mov	r0, r4
   11c40:	add	r2, pc, r2
   11c44:	bl	12060 <error@@Base+0xd34>
   11c48:	mov	r0, r4
   11c4c:	sub	sp, fp, #24
   11c50:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   11c54:	b	10f94 <abort@plt+0x634>
   11c58:	andeq	r0, r0, r0
   11c5c:	subsmi	r0, r9, r0
   11c60:	andeq	r1, r0, r6, asr #1
   11c64:	strheq	r1, [r0], -r0
   11c68:	andeq	r1, r0, r2, lsr r0
   11c6c:	andeq	r1, r0, lr, asr r0
   11c70:	muleq	r0, r9, r0
   11c74:	muleq	r0, r3, r0
   11c78:	andeq	r1, r0, r2, lsl #1
   11c7c:	andeq	r1, r0, r7, lsr #1
   11c80:	andeq	r0, r0, fp, lsr #28
   11c84:	andeq	r1, r0, r9
   11c88:	strdeq	r0, [r0], -r8
   11c8c:	andeq	r0, r0, pc, asr #31
   11c90:			; <UNDEFINED> instruction: 0x00000fba
   11c94:	andeq	r0, r0, r9, ror pc
   11c98:	andeq	r0, r0, r8, ror #30
   11c9c:	nop	{0}
   11ca0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ca4:	add	fp, sp, #28
   11ca8:	sub	sp, sp, #4
   11cac:	vpush	{d8}
   11cb0:	sub	sp, sp, #8
   11cb4:	mov	r5, r1
   11cb8:	ldr	r1, [pc, #832]	; 12000 <error@@Base+0xcd4>
   11cbc:	mov	r8, r2
   11cc0:	mov	r2, r3
   11cc4:	mov	r4, r0
   11cc8:	add	r1, pc, r1
   11ccc:	bl	1090c <fprintf@plt>
   11cd0:	ldr	r0, [pc, #812]	; 12004 <error@@Base+0xcd8>
   11cd4:	mov	r1, #26
   11cd8:	mov	r2, #1
   11cdc:	mov	r3, r4
   11ce0:	mov	r7, #1
   11ce4:	add	r0, pc, r0
   11ce8:	bl	108b8 <fwrite@plt>
   11cec:	ldr	r0, [pc, #788]	; 12008 <error@@Base+0xcdc>
   11cf0:	mov	r1, #3
   11cf4:	mov	r2, #1
   11cf8:	mov	r3, r4
   11cfc:	add	r0, pc, r0
   11d00:	bl	108b8 <fwrite@plt>
   11d04:	ldrb	r1, [fp, #8]
   11d08:	ldr	r0, [pc, #764]	; 1200c <error@@Base+0xce0>
   11d0c:	ldr	r2, [pc, #764]	; 12010 <error@@Base+0xce4>
   11d10:	str	r1, [sp]
   11d14:	cmp	r1, #0
   11d18:	add	r0, pc, r0
   11d1c:	add	r2, pc, r2
   11d20:	ldr	r1, [pc, #748]	; 12014 <error@@Base+0xce8>
   11d24:	movne	r2, r0
   11d28:	mov	r0, r4
   11d2c:	add	r1, pc, r1
   11d30:	bl	1090c <fprintf@plt>
   11d34:	ldr	r1, [fp, #12]
   11d38:	lsl	r0, r8, #16
   11d3c:	sxth	r6, r8
   11d40:	cmp	r0, #65536	; 0x10000
   11d44:	str	r1, [sp, #4]
   11d48:	blt	11e30 <error@@Base+0xb04>
   11d4c:	ldr	sl, [pc, #708]	; 12018 <error@@Base+0xcec>
   11d50:	vldr	d8, [pc, #672]	; 11ff8 <error@@Base+0xccc>
   11d54:	mov	r8, #1
   11d58:	add	sl, pc, sl
   11d5c:	mov	r0, r5
   11d60:	ldr	r2, [r0, r7, lsl #3]!
   11d64:	cmp	r2, #1
   11d68:	blt	11e20 <error@@Base+0xaf4>
   11d6c:	cmp	r0, #0
   11d70:	beq	11dd0 <error@@Base+0xaa4>
   11d74:	add	r9, r5, r7, lsl #3
   11d78:	mov	r0, r4
   11d7c:	ldr	r3, [r9, #4]!
   11d80:	ldr	r1, [pc, #660]	; 1201c <error@@Base+0xcf0>
   11d84:	add	r1, pc, r1
   11d88:	bl	1090c <fprintf@plt>
   11d8c:	ldr	r0, [r5, r7, lsl #3]
   11d90:	cmp	r0, #0
   11d94:	beq	11de0 <error@@Base+0xab4>
   11d98:	ldr	r1, [r9]
   11d9c:	vmov	s2, r0
   11da0:	sub	r1, r0, r1
   11da4:	mov	r0, r4
   11da8:	vmov	s0, r1
   11dac:	vcvt.f64.s32	d16, s0
   11db0:	vcvt.f64.s32	d17, s2
   11db4:	ldr	r1, [pc, #616]	; 12024 <error@@Base+0xcf8>
   11db8:	vmul.f64	d16, d16, d8
   11dbc:	vdiv.f64	d16, d16, d17
   11dc0:	vmov	r2, r3, d16
   11dc4:	add	r1, pc, r1
   11dc8:	bl	1090c <fprintf@plt>
   11dcc:	b	11df8 <error@@Base+0xacc>
   11dd0:	ldr	r0, [pc, #592]	; 12028 <error@@Base+0xcfc>
   11dd4:	mov	r1, #26
   11dd8:	add	r0, pc, r0
   11ddc:	b	11dec <error@@Base+0xac0>
   11de0:	ldr	r0, [pc, #568]	; 12020 <error@@Base+0xcf4>
   11de4:	mov	r1, #8
   11de8:	add	r0, pc, r0
   11dec:	mov	r2, #1
   11df0:	mov	r3, r4
   11df4:	bl	108b8 <fwrite@plt>
   11df8:	ldr	r0, [pc, #556]	; 1202c <error@@Base+0xd00>
   11dfc:	mov	r1, #3
   11e00:	mov	r2, #1
   11e04:	mov	r3, r4
   11e08:	add	r0, pc, r0
   11e0c:	bl	108b8 <fwrite@plt>
   11e10:	mov	r0, r4
   11e14:	mov	r1, sl
   11e18:	mov	r2, r7
   11e1c:	bl	1090c <fprintf@plt>
   11e20:	add	r8, r8, #1
   11e24:	sxth	r7, r8
   11e28:	cmp	r6, r7
   11e2c:	bge	11d5c <error@@Base+0xa30>
   11e30:	ldr	r0, [sp]
   11e34:	cmp	r0, #0
   11e38:	beq	11f0c <error@@Base+0xbe0>
   11e3c:	add	r7, r6, #1
   11e40:	mov	r0, r5
   11e44:	ldr	r2, [r0, r7, lsl #3]!
   11e48:	cmp	r2, #1
   11e4c:	blt	11f0c <error@@Base+0xbe0>
   11e50:	cmp	r0, #0
   11e54:	beq	11eb8 <error@@Base+0xb8c>
   11e58:	add	r8, r5, r7, lsl #3
   11e5c:	mov	r0, r4
   11e60:	ldr	r3, [r8, #4]!
   11e64:	ldr	r1, [pc, #452]	; 12030 <error@@Base+0xd04>
   11e68:	add	r1, pc, r1
   11e6c:	bl	1090c <fprintf@plt>
   11e70:	ldr	r0, [r5, r7, lsl #3]
   11e74:	cmp	r0, #0
   11e78:	beq	11ec8 <error@@Base+0xb9c>
   11e7c:	ldr	r1, [r8]
   11e80:	vldr	d16, [pc, #368]	; 11ff8 <error@@Base+0xccc>
   11e84:	vmov	s2, r0
   11e88:	sub	r1, r0, r1
   11e8c:	mov	r0, r4
   11e90:	vmov	s0, r1
   11e94:	vcvt.f64.s32	d17, s0
   11e98:	vcvt.f64.s32	d18, s2
   11e9c:	ldr	r1, [pc, #404]	; 12038 <error@@Base+0xd0c>
   11ea0:	vmul.f64	d16, d17, d16
   11ea4:	vdiv.f64	d16, d16, d18
   11ea8:	vmov	r2, r3, d16
   11eac:	add	r1, pc, r1
   11eb0:	bl	1090c <fprintf@plt>
   11eb4:	b	11ee0 <error@@Base+0xbb4>
   11eb8:	ldr	r0, [pc, #380]	; 1203c <error@@Base+0xd10>
   11ebc:	mov	r1, #26
   11ec0:	add	r0, pc, r0
   11ec4:	b	11ed4 <error@@Base+0xba8>
   11ec8:	ldr	r0, [pc, #356]	; 12034 <error@@Base+0xd08>
   11ecc:	mov	r1, #8
   11ed0:	add	r0, pc, r0
   11ed4:	mov	r2, #1
   11ed8:	mov	r3, r4
   11edc:	bl	108b8 <fwrite@plt>
   11ee0:	ldr	r0, [pc, #344]	; 12040 <error@@Base+0xd14>
   11ee4:	mov	r1, #3
   11ee8:	mov	r2, #1
   11eec:	mov	r3, r4
   11ef0:	add	r0, pc, r0
   11ef4:	bl	108b8 <fwrite@plt>
   11ef8:	ldr	r1, [pc, #324]	; 12044 <error@@Base+0xd18>
   11efc:	mov	r0, r4
   11f00:	mov	r2, r6
   11f04:	add	r1, pc, r1
   11f08:	bl	1090c <fprintf@plt>
   11f0c:	ldr	r0, [sp, #4]
   11f10:	tst	r0, #255	; 0xff
   11f14:	beq	11f7c <error@@Base+0xc50>
   11f18:	cmp	r5, #0
   11f1c:	beq	11f8c <error@@Base+0xc60>
   11f20:	ldm	r5, {r2, r3}
   11f24:	ldr	r1, [pc, #284]	; 12048 <error@@Base+0xd1c>
   11f28:	mov	r0, r4
   11f2c:	add	r1, pc, r1
   11f30:	bl	1090c <fprintf@plt>
   11f34:	ldr	r0, [r5]
   11f38:	cmp	r0, #0
   11f3c:	beq	11f9c <error@@Base+0xc70>
   11f40:	ldr	r1, [r5, #4]
   11f44:	vldr	d16, [pc, #172]	; 11ff8 <error@@Base+0xccc>
   11f48:	vmov	s2, r0
   11f4c:	sub	r1, r0, r1
   11f50:	mov	r0, r4
   11f54:	vmov	s0, r1
   11f58:	vcvt.f64.s32	d17, s0
   11f5c:	vcvt.f64.s32	d18, s2
   11f60:	ldr	r1, [pc, #232]	; 12050 <error@@Base+0xd24>
   11f64:	vmul.f64	d16, d17, d16
   11f68:	vdiv.f64	d16, d16, d18
   11f6c:	vmov	r2, r3, d16
   11f70:	add	r1, pc, r1
   11f74:	bl	1090c <fprintf@plt>
   11f78:	b	11fb4 <error@@Base+0xc88>
   11f7c:	sub	sp, fp, #40	; 0x28
   11f80:	vpop	{d8}
   11f84:	add	sp, sp, #4
   11f88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f8c:	ldr	r0, [pc, #192]	; 12054 <error@@Base+0xd28>
   11f90:	mov	r1, #26
   11f94:	add	r0, pc, r0
   11f98:	b	11fa8 <error@@Base+0xc7c>
   11f9c:	ldr	r0, [pc, #168]	; 1204c <error@@Base+0xd20>
   11fa0:	mov	r1, #8
   11fa4:	add	r0, pc, r0
   11fa8:	mov	r2, #1
   11fac:	mov	r3, r4
   11fb0:	bl	108b8 <fwrite@plt>
   11fb4:	ldr	r0, [pc, #156]	; 12058 <error@@Base+0xd2c>
   11fb8:	mov	r1, #3
   11fbc:	mov	r2, #1
   11fc0:	mov	r3, r4
   11fc4:	add	r0, pc, r0
   11fc8:	bl	108b8 <fwrite@plt>
   11fcc:	ldr	r0, [pc, #136]	; 1205c <error@@Base+0xd30>
   11fd0:	mov	r1, #7
   11fd4:	mov	r2, #1
   11fd8:	mov	r3, r4
   11fdc:	add	r0, pc, r0
   11fe0:	sub	sp, fp, #40	; 0x28
   11fe4:	vpop	{d8}
   11fe8:	add	sp, sp, #4
   11fec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ff0:	b	108b8 <fwrite@plt>
   11ff4:	nop	{0}
   11ff8:	andeq	r0, r0, r0
   11ffc:	subsmi	r0, r9, r0
   12000:	andeq	r0, r0, r5, lsl pc
   12004:	andeq	r0, r0, r9, lsr #30
   12008:	andeq	r0, r0, ip, lsr #30
   1200c:	andeq	r0, r0, sl, asr #29
   12010:	andeq	r0, r0, sp, asr #29
   12014:			; <UNDEFINED> instruction: 0x00000eb2
   12018:	muleq	r0, r8, lr
   1201c:	andeq	r0, r0, lr, ror lr
   12020:	andeq	r0, r0, r6, ror #27
   12024:	andeq	r0, r0, r3, lsl lr
   12028:	andeq	r0, r0, r5, lsr lr
   1202c:	andeq	r0, r0, r0, lsr #28
   12030:	muleq	r0, sl, sp
   12034:	strdeq	r0, [r0], -lr
   12038:	andeq	r0, r0, fp, lsr #26
   1203c:	andeq	r0, r0, sp, asr #26
   12040:	andeq	r0, r0, r8, lsr sp
   12044:	strdeq	r0, [r0], -r5
   12048:	ldrdeq	r0, [r0], -r6
   1204c:	andeq	r0, r0, sl, lsr #24
   12050:	andeq	r0, r0, r7, ror #24
   12054:	andeq	r0, r0, r9, ror ip
   12058:	andeq	r0, r0, r4, ror #24
   1205c:	andeq	r0, r0, r2, ror #23
   12060:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12064:	add	fp, sp, #28
   12068:	sub	sp, sp, #4
   1206c:	vpush	{d8}
   12070:	mov	r5, r0
   12074:	mov	r0, r1
   12078:	mov	r6, r2
   1207c:	mov	r8, r1
   12080:	bl	1280c <error@@Base+0x14e0>
   12084:	movw	r0, #8052	; 0x1f74
   12088:	ldr	r0, [r8, r0]!
   1208c:	mov	r4, r8
   12090:	ldr	r1, [r4, #-4]!
   12094:	ldr	r2, [pc, #324]	; 121e0 <error@@Base+0xeb4>
   12098:	add	r2, pc, r2
   1209c:	bl	124b0 <error@@Base+0x1184>
   120a0:	ldr	r1, [pc, #316]	; 121e4 <error@@Base+0xeb8>
   120a4:	mov	r0, r5
   120a8:	mov	r2, r6
   120ac:	add	r1, pc, r1
   120b0:	bl	1090c <fprintf@plt>
   120b4:	ldr	r0, [pc, #300]	; 121e8 <error@@Base+0xebc>
   120b8:	mov	r1, #26
   120bc:	mov	r2, #1
   120c0:	mov	r3, r5
   120c4:	add	r0, pc, r0
   120c8:	bl	108b8 <fwrite@plt>
   120cc:	ldr	r0, [pc, #280]	; 121ec <error@@Base+0xec0>
   120d0:	mov	r1, #3
   120d4:	mov	r2, #1
   120d8:	mov	r3, r5
   120dc:	add	r0, pc, r0
   120e0:	bl	108b8 <fwrite@plt>
   120e4:	mov	r0, #10
   120e8:	mov	r1, r5
   120ec:	bl	1093c <fputc@plt>
   120f0:	ldr	r0, [r8]
   120f4:	cmp	r0, #1
   120f8:	blt	121cc <error@@Base+0xea0>
   120fc:	ldr	r7, [pc, #236]	; 121f0 <error@@Base+0xec4>
   12100:	ldr	r6, [pc, #236]	; 121f4 <error@@Base+0xec8>
   12104:	vldr	d8, [pc, #204]	; 121d8 <error@@Base+0xeac>
   12108:	mov	sl, #0
   1210c:	add	r7, pc, r7
   12110:	add	r6, pc, r6
   12114:	ldr	r0, [r4]
   12118:	ldr	r9, [r0, sl, lsl #2]
   1211c:	mov	r0, r5
   12120:	ldr	r2, [r9, #12]
   12124:	ldr	r3, [r9, #16]
   12128:	ldr	r1, [pc, #200]	; 121f8 <error@@Base+0xecc>
   1212c:	add	r1, pc, r1
   12130:	bl	1090c <fprintf@plt>
   12134:	ldr	r0, [r9, #12]
   12138:	cmp	r0, #0
   1213c:	beq	12178 <error@@Base+0xe4c>
   12140:	ldr	r1, [r9, #16]
   12144:	vmov	s2, r0
   12148:	sub	r1, r0, r1
   1214c:	mov	r0, r5
   12150:	vmov	s0, r1
   12154:	vcvt.f64.s32	d16, s0
   12158:	vcvt.f64.s32	d17, s2
   1215c:	ldr	r1, [pc, #156]	; 12200 <error@@Base+0xed4>
   12160:	vmul.f64	d16, d16, d8
   12164:	vdiv.f64	d16, d16, d17
   12168:	vmov	r2, r3, d16
   1216c:	add	r1, pc, r1
   12170:	bl	1090c <fprintf@plt>
   12174:	b	12190 <error@@Base+0xe64>
   12178:	ldr	r0, [pc, #124]	; 121fc <error@@Base+0xed0>
   1217c:	mov	r1, #8
   12180:	mov	r2, #1
   12184:	mov	r3, r5
   12188:	add	r0, pc, r0
   1218c:	bl	108b8 <fwrite@plt>
   12190:	mov	r0, r7
   12194:	mov	r1, #3
   12198:	mov	r2, #1
   1219c:	mov	r3, r5
   121a0:	bl	108b8 <fwrite@plt>
   121a4:	ldr	r0, [r4]
   121a8:	mov	r1, r6
   121ac:	ldr	r0, [r0, sl, lsl #2]
   121b0:	ldr	r2, [r0, #8]
   121b4:	mov	r0, r5
   121b8:	bl	1090c <fprintf@plt>
   121bc:	ldr	r0, [r8]
   121c0:	add	sl, sl, #1
   121c4:	cmp	sl, r0
   121c8:	blt	12114 <error@@Base+0xde8>
   121cc:	vpop	{d8}
   121d0:	add	sp, sp, #4
   121d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121d8:	andeq	r0, r0, r0
   121dc:	subsmi	r0, r9, r0
   121e0:	andeq	r0, r0, r4, ror #2
   121e4:	andeq	r0, r0, r1, lsr fp
   121e8:	andeq	r0, r0, r9, asr #22
   121ec:	andeq	r0, r0, ip, asr #22
   121f0:	andeq	r0, r0, ip, lsl fp
   121f4:	andeq	r0, r0, lr, asr #21
   121f8:	ldrdeq	r0, [r0], -r6
   121fc:	andeq	r0, r0, r6, asr #20
   12200:	andeq	r0, r0, fp, ror #20
   12204:	ldr	r1, [r1, #8]
   12208:	ldr	r0, [r0, #8]
   1220c:	b	10e90 <abort@plt+0x530>
   12210:	vmov.i32	q8, #0	; 0x00000000
   12214:	vst1.32	{d16-d17}, [r0]
   12218:	bx	lr
   1221c:	push	{r4, r5, fp, lr}
   12220:	add	fp, sp, #8
   12224:	mov	r4, r0
   12228:	ldr	r0, [r0]
   1222c:	mov	r5, #0
   12230:	str	r5, [r1]
   12234:	cmp	r0, #0
   12238:	str	r0, [r1, #4]
   1223c:	str	r1, [r4]
   12240:	addeq	r0, r4, #4
   12244:	str	r1, [r0]
   12248:	ldr	r0, [r4, #8]
   1224c:	cmp	r0, #0
   12250:	beq	1225c <error@@Base+0xf30>
   12254:	bl	1087c <free@plt>
   12258:	str	r5, [r4, #8]
   1225c:	ldr	r0, [r4, #12]
   12260:	add	r0, r0, #1
   12264:	str	r0, [r4, #12]
   12268:	pop	{r4, r5, fp, pc}
   1226c:	push	{r4, r5, fp, lr}
   12270:	add	fp, sp, #8
   12274:	mov	r4, r0
   12278:	ldr	r0, [r0, #4]
   1227c:	mov	r5, #0
   12280:	mov	r2, r4
   12284:	cmp	r0, #0
   12288:	stm	r1, {r0, r5}
   1228c:	addne	r2, r0, #4
   12290:	str	r1, [r2]
   12294:	str	r1, [r4, #4]
   12298:	ldr	r0, [r4, #8]
   1229c:	cmp	r0, #0
   122a0:	beq	122ac <error@@Base+0xf80>
   122a4:	bl	1087c <free@plt>
   122a8:	str	r5, [r4, #8]
   122ac:	ldr	r0, [r4, #12]
   122b0:	add	r0, r0, #1
   122b4:	str	r0, [r4, #12]
   122b8:	pop	{r4, r5, fp, pc}
   122bc:	push	{r4, sl, fp, lr}
   122c0:	add	fp, sp, #8
   122c4:	mov	r4, r0
   122c8:	ldr	r0, [r2]
   122cc:	mov	r3, r4
   122d0:	cmp	r0, #0
   122d4:	stm	r1, {r0, r2}
   122d8:	addne	r3, r0, #4
   122dc:	str	r1, [r3]
   122e0:	str	r1, [r2]
   122e4:	ldr	r0, [r4, #8]
   122e8:	cmp	r0, #0
   122ec:	beq	122fc <error@@Base+0xfd0>
   122f0:	bl	1087c <free@plt>
   122f4:	mov	r0, #0
   122f8:	str	r0, [r4, #8]
   122fc:	ldr	r0, [r4, #12]
   12300:	add	r0, r0, #1
   12304:	str	r0, [r4, #12]
   12308:	pop	{r4, sl, fp, pc}
   1230c:	push	{r4, sl, fp, lr}
   12310:	add	fp, sp, #8
   12314:	mov	r4, r0
   12318:	mov	r0, r1
   1231c:	cmp	r1, #0
   12320:	ldr	r3, [r0, #4]!
   12324:	moveq	r0, r4
   12328:	cmp	r3, #0
   1232c:	stm	r2, {r1, r3}
   12330:	addeq	r3, r4, #4
   12334:	str	r2, [r0]
   12338:	str	r2, [r3]
   1233c:	ldr	r0, [r4, #8]
   12340:	cmp	r0, #0
   12344:	beq	12354 <error@@Base+0x1028>
   12348:	bl	1087c <free@plt>
   1234c:	mov	r0, #0
   12350:	str	r0, [r4, #8]
   12354:	ldr	r0, [r4, #12]
   12358:	add	r0, r0, #1
   1235c:	str	r0, [r4, #12]
   12360:	pop	{r4, sl, fp, pc}
   12364:	push	{r4, r5, fp, lr}
   12368:	add	fp, sp, #8
   1236c:	mov	r4, r0
   12370:	ldm	r1, {r0, r2}
   12374:	mov	r5, #0
   12378:	cmp	r0, #0
   1237c:	streq	r2, [r4]
   12380:	strne	r2, [r0, #4]
   12384:	ldrne	r2, [r1, #4]
   12388:	cmp	r2, #0
   1238c:	addeq	r2, r4, #4
   12390:	str	r0, [r2]
   12394:	str	r5, [r1]
   12398:	str	r5, [r1, #4]
   1239c:	ldr	r0, [r4, #8]
   123a0:	cmp	r0, #0
   123a4:	beq	123b0 <error@@Base+0x1084>
   123a8:	bl	1087c <free@plt>
   123ac:	str	r5, [r4, #8]
   123b0:	ldr	r0, [r4, #12]
   123b4:	sub	r0, r0, #1
   123b8:	str	r0, [r4, #12]
   123bc:	pop	{r4, r5, fp, pc}
   123c0:	push	{r4, sl, fp, lr}
   123c4:	add	fp, sp, #8
   123c8:	mov	r4, r0
   123cc:	ldr	r0, [r0, #8]
   123d0:	cmp	r0, #0
   123d4:	beq	123dc <error@@Base+0x10b0>
   123d8:	pop	{r4, sl, fp, pc}
   123dc:	ldr	r0, [r4, #12]
   123e0:	cmp	r0, #0
   123e4:	beq	123d8 <error@@Base+0x10ac>
   123e8:	mov	r1, #4
   123ec:	bl	10e6c <abort@plt+0x50c>
   123f0:	str	r0, [r4, #8]
   123f4:	ldr	r1, [r4]
   123f8:	cmp	r1, #0
   123fc:	beq	123d8 <error@@Base+0x10ac>
   12400:	str	r1, [r0]
   12404:	ldr	r0, [r1, #4]
   12408:	cmp	r0, #0
   1240c:	popeq	{r4, sl, fp, pc}
   12410:	mov	r1, #4
   12414:	ldr	r2, [r4, #8]
   12418:	str	r0, [r2, r1]
   1241c:	add	r1, r1, #4
   12420:	ldr	r0, [r0, #4]
   12424:	cmp	r0, #0
   12428:	bne	12414 <error@@Base+0x10e8>
   1242c:	b	123d8 <error@@Base+0x10ac>
   12430:	push	{r4, r5, r6, r7, fp, lr}
   12434:	add	fp, sp, #16
   12438:	ldr	r6, [r0]
   1243c:	cmp	r6, #0
   12440:	popeq	{r4, r5, r6, r7, fp, pc}
   12444:	mov	r4, r1
   12448:	mov	r5, r0
   1244c:	mov	r7, #0
   12450:	ldm	r6, {r0, r1}
   12454:	cmp	r0, #0
   12458:	streq	r1, [r5]
   1245c:	strne	r1, [r0, #4]
   12460:	ldrne	r1, [r6, #4]
   12464:	cmp	r1, #0
   12468:	addeq	r1, r5, #4
   1246c:	str	r0, [r1]
   12470:	str	r7, [r6]
   12474:	str	r7, [r6, #4]
   12478:	ldr	r0, [r5, #8]
   1247c:	cmp	r0, #0
   12480:	beq	1248c <error@@Base+0x1160>
   12484:	bl	1087c <free@plt>
   12488:	str	r7, [r5, #8]
   1248c:	ldr	r0, [r5, #12]
   12490:	sub	r0, r0, #1
   12494:	str	r0, [r5, #12]
   12498:	mov	r0, r6
   1249c:	blx	r4
   124a0:	ldr	r6, [r5]
   124a4:	cmp	r6, #0
   124a8:	bne	12450 <error@@Base+0x1124>
   124ac:	pop	{r4, r5, r6, r7, fp, pc}
   124b0:	cmp	r0, #2
   124b4:	bxlt	lr
   124b8:	ldr	r3, [pc, #28]	; 124dc <error@@Base+0x11b0>
   124bc:	add	r3, pc, r3
   124c0:	str	r2, [r3]
   124c4:	ldr	r2, [pc, #20]	; 124e0 <error@@Base+0x11b4>
   124c8:	add	r2, pc, r2
   124cc:	str	r1, [r2]
   124d0:	sub	r1, r0, #1
   124d4:	mov	r0, #0
   124d8:	b	124e4 <error@@Base+0x11b8>
   124dc:	andeq	r0, r1, ip, asr ip
   124e0:	andeq	r0, r1, ip, asr #24
   124e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   124e8:	add	fp, sp, #24
   124ec:	mov	r8, r1
   124f0:	mov	r5, r0
   124f4:	b	12518 <error@@Base+0x11ec>
   124f8:	sub	r1, r4, #1
   124fc:	str	r6, [r0, r4, lsl #2]
   12500:	cmp	r1, r5
   12504:	movgt	r0, r5
   12508:	blgt	124e4 <error@@Base+0x11b8>
   1250c:	add	r5, r7, #1
   12510:	cmp	r5, r8
   12514:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   12518:	ldr	r0, [pc, #220]	; 125fc <error@@Base+0x12d0>
   1251c:	cmp	r5, r8
   12520:	mov	r4, r8
   12524:	mov	r7, r5
   12528:	ldr	r0, [pc, r0]
   1252c:	ldr	r6, [r0, r5, lsl #2]
   12530:	bge	124f8 <error@@Base+0x11cc>
   12534:	mov	r7, r5
   12538:	mov	r4, r8
   1253c:	cmp	r7, r4
   12540:	blt	12554 <error@@Base+0x1228>
   12544:	b	12578 <error@@Base+0x124c>
   12548:	sub	r4, r4, #1
   1254c:	cmp	r7, r4
   12550:	bge	12578 <error@@Base+0x124c>
   12554:	ldr	r0, [pc, #164]	; 12600 <error@@Base+0x12d4>
   12558:	ldr	r0, [pc, r0]
   1255c:	ldr	r1, [r0, r4, lsl #2]
   12560:	ldr	r2, [pc, #156]	; 12604 <error@@Base+0x12d8>
   12564:	mov	r0, r6
   12568:	ldr	r2, [pc, r2]
   1256c:	blx	r2
   12570:	cmn	r0, #1
   12574:	ble	12548 <error@@Base+0x121c>
   12578:	cmp	r7, r4
   1257c:	beq	12594 <error@@Base+0x1268>
   12580:	ldr	r0, [pc, #128]	; 12608 <error@@Base+0x12dc>
   12584:	ldr	r0, [pc, r0]
   12588:	ldr	r1, [r0, r4, lsl #2]
   1258c:	str	r1, [r0, r7, lsl #2]
   12590:	add	r7, r7, #1
   12594:	cmp	r7, r4
   12598:	bge	125c0 <error@@Base+0x1294>
   1259c:	ldr	r0, [pc, #104]	; 1260c <error@@Base+0x12e0>
   125a0:	ldr	r0, [pc, r0]
   125a4:	ldr	r1, [r0, r7, lsl #2]
   125a8:	ldr	r2, [pc, #96]	; 12610 <error@@Base+0x12e4>
   125ac:	mov	r0, r6
   125b0:	ldr	r2, [pc, r2]
   125b4:	blx	r2
   125b8:	cmp	r0, #1
   125bc:	bge	12590 <error@@Base+0x1264>
   125c0:	cmp	r7, r4
   125c4:	bne	125d4 <error@@Base+0x12a8>
   125c8:	cmp	r7, r4
   125cc:	blt	1254c <error@@Base+0x1220>
   125d0:	b	125f0 <error@@Base+0x12c4>
   125d4:	ldr	r0, [pc, #56]	; 12614 <error@@Base+0x12e8>
   125d8:	ldr	r0, [pc, r0]
   125dc:	ldr	r1, [r0, r7, lsl #2]
   125e0:	str	r1, [r0, r4, lsl #2]
   125e4:	sub	r4, r4, #1
   125e8:	cmp	r7, r4
   125ec:	blt	1254c <error@@Base+0x1220>
   125f0:	ldr	r0, [pc, #32]	; 12618 <error@@Base+0x12ec>
   125f4:	ldr	r0, [pc, r0]
   125f8:	b	124f8 <error@@Base+0x11cc>
   125fc:	andeq	r0, r1, ip, ror #23
   12600:			; <UNDEFINED> instruction: 0x00010bbc
   12604:			; <UNDEFINED> instruction: 0x00010bb0
   12608:	muleq	r1, r0, fp
   1260c:	andeq	r0, r1, r4, ror fp
   12610:	andeq	r0, r1, r8, ror #22
   12614:	andeq	r0, r1, ip, lsr fp
   12618:	andeq	r0, r1, r0, lsr #22
   1261c:	push	{r4, r5, r6, sl, fp, lr}
   12620:	add	fp, sp, #16
   12624:	mov	r4, r0
   12628:	movw	r6, #503	; 0x1f7
   1262c:	mov	r5, r0
   12630:	mov	r0, r5
   12634:	bl	12210 <error@@Base+0xee4>
   12638:	subs	r6, r6, #1
   1263c:	add	r5, r5, #16
   12640:	bne	12630 <error@@Base+0x1304>
   12644:	movw	r0, #8052	; 0x1f74
   12648:	mov	r1, #0
   1264c:	str	r1, [r4, r0]
   12650:	movw	r0, #8048	; 0x1f70
   12654:	str	r1, [r4, r0]
   12658:	pop	{r4, r5, r6, sl, fp, pc}
   1265c:	push	{r4, r5, r6, sl, fp, lr}
   12660:	add	fp, sp, #16
   12664:	mov	r5, r1
   12668:	ldrb	r1, [r1]
   1266c:	mov	r4, #0
   12670:	mov	r2, #0
   12674:	cmp	r1, #0
   12678:	beq	126ac <error@@Base+0x1380>
   1267c:	add	r3, r5, #1
   12680:	mov	r2, #0
   12684:	uxtab	r2, r2, r1
   12688:	ldrb	r1, [r3], #1
   1268c:	cmp	r1, #0
   12690:	bne	12684 <error@@Base+0x1358>
   12694:	movw	r1, #20065	; 0x4e61
   12698:	movt	r1, #33354	; 0x824a
   1269c:	umull	r1, r3, r2, r1
   126a0:	lsr	r1, r3, #8
   126a4:	movw	r3, #503	; 0x1f7
   126a8:	mls	r2, r1, r3, r2
   126ac:	ldr	r6, [r0, r2, lsl #4]
   126b0:	cmp	r6, #0
   126b4:	bne	126cc <error@@Base+0x13a0>
   126b8:	mov	r0, r4
   126bc:	pop	{r4, r5, r6, sl, fp, pc}
   126c0:	ldr	r6, [r6, #4]
   126c4:	cmp	r6, #0
   126c8:	beq	126b8 <error@@Base+0x138c>
   126cc:	ldr	r1, [r6, #8]
   126d0:	mov	r0, r5
   126d4:	bl	1084c <strcmp@plt>
   126d8:	cmp	r0, #0
   126dc:	bne	126c0 <error@@Base+0x1394>
   126e0:	mov	r4, r6
   126e4:	mov	r0, r4
   126e8:	pop	{r4, r5, r6, sl, fp, pc}
   126ec:	push	{r4, r5, fp, lr}
   126f0:	add	fp, sp, #8
   126f4:	mov	r4, r0
   126f8:	ldr	r0, [r1, #8]
   126fc:	ldrb	r2, [r0]
   12700:	cmp	r2, #0
   12704:	beq	1273c <error@@Base+0x1410>
   12708:	add	r3, r0, #1
   1270c:	mov	r0, #0
   12710:	uxtab	r0, r0, r2
   12714:	ldrb	r2, [r3], #1
   12718:	cmp	r2, #0
   1271c:	bne	12710 <error@@Base+0x13e4>
   12720:	movw	r2, #20065	; 0x4e61
   12724:	movt	r2, #33354	; 0x824a
   12728:	umull	r2, r3, r0, r2
   1272c:	lsr	r2, r3, #8
   12730:	movw	r3, #503	; 0x1f7
   12734:	mls	r0, r2, r3, r0
   12738:	b	12740 <error@@Base+0x1414>
   1273c:	mov	r0, #0
   12740:	add	r0, r4, r0, lsl #4
   12744:	bl	1221c <error@@Base+0xef0>
   12748:	movw	r0, #8048	; 0x1f70
   1274c:	mov	r5, r4
   12750:	ldr	r0, [r5, r0]!
   12754:	cmp	r0, #0
   12758:	beq	12768 <error@@Base+0x143c>
   1275c:	bl	1087c <free@plt>
   12760:	mov	r0, #0
   12764:	str	r0, [r5]
   12768:	movw	r0, #8052	; 0x1f74
   1276c:	ldr	r0, [r4, r0]!
   12770:	add	r0, r0, #1
   12774:	str	r0, [r4]
   12778:	pop	{r4, r5, fp, pc}
   1277c:	push	{r4, r5, fp, lr}
   12780:	add	fp, sp, #8
   12784:	mov	r4, r0
   12788:	ldr	r0, [r1, #8]
   1278c:	ldrb	r2, [r0]
   12790:	cmp	r2, #0
   12794:	beq	127cc <error@@Base+0x14a0>
   12798:	add	r3, r0, #1
   1279c:	mov	r0, #0
   127a0:	uxtab	r0, r0, r2
   127a4:	ldrb	r2, [r3], #1
   127a8:	cmp	r2, #0
   127ac:	bne	127a0 <error@@Base+0x1474>
   127b0:	movw	r2, #20065	; 0x4e61
   127b4:	movt	r2, #33354	; 0x824a
   127b8:	umull	r2, r3, r0, r2
   127bc:	lsr	r2, r3, #8
   127c0:	movw	r3, #503	; 0x1f7
   127c4:	mls	r0, r2, r3, r0
   127c8:	b	127d0 <error@@Base+0x14a4>
   127cc:	mov	r0, #0
   127d0:	add	r0, r4, r0, lsl #4
   127d4:	bl	12364 <error@@Base+0x1038>
   127d8:	movw	r0, #8048	; 0x1f70
   127dc:	mov	r5, r4
   127e0:	ldr	r0, [r5, r0]!
   127e4:	cmp	r0, #0
   127e8:	beq	127f8 <error@@Base+0x14cc>
   127ec:	bl	1087c <free@plt>
   127f0:	mov	r0, #0
   127f4:	str	r0, [r5]
   127f8:	movw	r0, #8052	; 0x1f74
   127fc:	ldr	r0, [r4, r0]!
   12800:	sub	r0, r0, #1
   12804:	str	r0, [r4]
   12808:	pop	{r4, r5, fp, pc}
   1280c:	push	{r4, r5, fp, lr}
   12810:	add	fp, sp, #8
   12814:	mov	r4, r0
   12818:	movw	r0, #8048	; 0x1f70
   1281c:	mov	r5, r4
   12820:	ldr	r0, [r5, r0]!
   12824:	cmp	r0, #0
   12828:	bne	12884 <error@@Base+0x1558>
   1282c:	movw	r0, #8052	; 0x1f74
   12830:	ldr	r0, [r4, r0]
   12834:	cmp	r0, #0
   12838:	popeq	{r4, r5, fp, pc}
   1283c:	mov	r1, #4
   12840:	bl	10e6c <abort@plt+0x50c>
   12844:	str	r0, [r5]
   12848:	mov	r0, #0
   1284c:	movw	ip, #503	; 0x1f7
   12850:	mov	r2, #0
   12854:	ldr	r3, [r4, r2, lsl #4]
   12858:	cmp	r3, #0
   1285c:	beq	12878 <error@@Base+0x154c>
   12860:	ldr	r1, [r5]
   12864:	str	r3, [r1, r0, lsl #2]
   12868:	add	r0, r0, #1
   1286c:	ldr	r3, [r3, #4]
   12870:	cmp	r3, #0
   12874:	bne	12860 <error@@Base+0x1534>
   12878:	add	r2, r2, #1
   1287c:	cmp	r2, ip
   12880:	bne	12854 <error@@Base+0x1528>
   12884:	pop	{r4, r5, fp, pc}
   12888:	push	{r4, r5, r6, r7, fp, lr}
   1288c:	add	fp, sp, #16
   12890:	mov	r5, r1
   12894:	mov	r4, r0
   12898:	movw	r7, #503	; 0x1f7
   1289c:	mov	r6, r0
   128a0:	mov	r0, r6
   128a4:	mov	r1, r5
   128a8:	bl	12430 <error@@Base+0x1104>
   128ac:	subs	r7, r7, #1
   128b0:	add	r6, r6, #16
   128b4:	bne	128a0 <error@@Base+0x1574>
   128b8:	movw	r0, #8048	; 0x1f70
   128bc:	mov	r5, r4
   128c0:	ldr	r0, [r5, r0]!
   128c4:	cmp	r0, #0
   128c8:	beq	128d8 <error@@Base+0x15ac>
   128cc:	bl	1087c <free@plt>
   128d0:	mov	r0, #0
   128d4:	str	r0, [r5]
   128d8:	movw	r0, #8052	; 0x1f74
   128dc:	mov	r1, #0
   128e0:	str	r1, [r4, r0]
   128e4:	pop	{r4, r5, r6, r7, fp, pc}
   128e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   128ec:	mov	r7, r0
   128f0:	ldr	r6, [pc, #72]	; 12940 <error@@Base+0x1614>
   128f4:	ldr	r5, [pc, #72]	; 12944 <error@@Base+0x1618>
   128f8:	add	r6, pc, r6
   128fc:	add	r5, pc, r5
   12900:	sub	r6, r6, r5
   12904:	mov	r8, r1
   12908:	mov	r9, r2
   1290c:	bl	10820 <calloc@plt-0x20>
   12910:	asrs	r6, r6, #2
   12914:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12918:	mov	r4, #0
   1291c:	add	r4, r4, #1
   12920:	ldr	r3, [r5], #4
   12924:	mov	r2, r9
   12928:	mov	r1, r8
   1292c:	mov	r0, r7
   12930:	blx	r3
   12934:	cmp	r6, r4
   12938:	bne	1291c <error@@Base+0x15f0>
   1293c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12940:	strdeq	r0, [r1], -ip
   12944:	strdeq	r0, [r1], -r4
   12948:	bx	lr

Disassembly of section .fini:

0001294c <.fini>:
   1294c:	push	{r3, lr}
   12950:	pop	{r3, pc}
