
../repos/findutils/locate/frcode:     file format elf32-littlearm


Disassembly of section .init:

00010c68 <.init>:
   10c68:	push	{r3, lr}
   10c6c:	bl	10ed4 <__assert_fail@plt+0x48>
   10c70:	pop	{r3, pc}

Disassembly of section .plt:

00010c74 <calloc@plt-0x14>:
   10c74:	push	{lr}		; (str lr, [sp, #-4]!)
   10c78:	ldr	lr, [pc, #4]	; 10c84 <calloc@plt-0x4>
   10c7c:	add	lr, pc, lr
   10c80:	ldr	pc, [lr, #8]!
   10c84:	andeq	r4, r1, ip, ror r3

00010c88 <calloc@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #20, 20	; 0x14000
   10c90:	ldr	pc, [ip, #892]!	; 0x37c

00010c94 <strtol@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #20, 20	; 0x14000
   10c9c:	ldr	pc, [ip, #884]!	; 0x374

00010ca0 <printf@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #20, 20	; 0x14000
   10ca8:	ldr	pc, [ip, #876]!	; 0x36c

00010cac <fflush@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #20, 20	; 0x14000
   10cb4:	ldr	pc, [ip, #868]!	; 0x364

00010cb8 <free@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #20, 20	; 0x14000
   10cc0:	ldr	pc, [ip, #860]!	; 0x35c

00010cc4 <ferror@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #20, 20	; 0x14000
   10ccc:	ldr	pc, [ip, #852]!	; 0x354

00010cd0 <_exit@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #20, 20	; 0x14000
   10cd8:	ldr	pc, [ip, #844]!	; 0x34c

00010cdc <memcpy@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #20, 20	; 0x14000
   10ce4:	ldr	pc, [ip, #836]!	; 0x344

00010ce8 <mbsinit@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #20, 20	; 0x14000
   10cf0:	ldr	pc, [ip, #828]!	; 0x33c

00010cf4 <dcgettext@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #20, 20	; 0x14000
   10cfc:	ldr	pc, [ip, #820]!	; 0x334

00010d00 <realloc@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #20, 20	; 0x14000
   10d08:	ldr	pc, [ip, #812]!	; 0x32c

00010d0c <iswprint@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #20, 20	; 0x14000
   10d14:	ldr	pc, [ip, #804]!	; 0x324

00010d18 <fwrite@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #20, 20	; 0x14000
   10d20:	ldr	pc, [ip, #796]!	; 0x31c

00010d24 <lseek64@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #20, 20	; 0x14000
   10d2c:	ldr	pc, [ip, #788]!	; 0x314

00010d30 <__ctype_get_mb_cur_max@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #20, 20	; 0x14000
   10d38:	ldr	pc, [ip, #780]!	; 0x30c

00010d3c <__fpending@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #20, 20	; 0x14000
   10d44:	ldr	pc, [ip, #772]!	; 0x304

00010d48 <mbrtowc@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #20, 20	; 0x14000
   10d50:	ldr	pc, [ip, #764]!	; 0x2fc

00010d54 <error@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #20, 20	; 0x14000
   10d5c:	ldr	pc, [ip, #756]!	; 0x2f4

00010d60 <malloc@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #20, 20	; 0x14000
   10d68:	ldr	pc, [ip, #748]!	; 0x2ec

00010d6c <__libc_start_main@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #20, 20	; 0x14000
   10d74:	ldr	pc, [ip, #740]!	; 0x2e4

00010d78 <__freading@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #20, 20	; 0x14000
   10d80:	ldr	pc, [ip, #732]!	; 0x2dc

00010d84 <__gmon_start__@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #20, 20	; 0x14000
   10d8c:	ldr	pc, [ip, #724]!	; 0x2d4

00010d90 <getopt_long@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #20, 20	; 0x14000
   10d98:	ldr	pc, [ip, #716]!	; 0x2cc

00010d9c <__ctype_b_loc@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #20, 20	; 0x14000
   10da4:	ldr	pc, [ip, #708]!	; 0x2c4

00010da8 <exit@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #20, 20	; 0x14000
   10db0:	ldr	pc, [ip, #700]!	; 0x2bc

00010db4 <bcmp@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #20, 20	; 0x14000
   10dbc:	ldr	pc, [ip, #692]!	; 0x2b4

00010dc0 <strlen@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #20, 20	; 0x14000
   10dc8:	ldr	pc, [ip, #684]!	; 0x2ac

00010dcc <fprintf@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #20, 20	; 0x14000
   10dd4:	ldr	pc, [ip, #676]!	; 0x2a4

00010dd8 <__errno_location@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #20, 20	; 0x14000
   10de0:	ldr	pc, [ip, #668]!	; 0x29c

00010de4 <__cxa_atexit@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #20, 20	; 0x14000
   10dec:	ldr	pc, [ip, #660]!	; 0x294

00010df0 <memset@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #20, 20	; 0x14000
   10df8:	ldr	pc, [ip, #652]!	; 0x28c

00010dfc <fileno@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #20, 20	; 0x14000
   10e04:	ldr	pc, [ip, #644]!	; 0x284

00010e08 <fclose@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #20, 20	; 0x14000
   10e10:	ldr	pc, [ip, #636]!	; 0x27c

00010e14 <fseeko64@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #20, 20	; 0x14000
   10e1c:	ldr	pc, [ip, #628]!	; 0x274

00010e20 <setlocale@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #20, 20	; 0x14000
   10e28:	ldr	pc, [ip, #620]!	; 0x26c

00010e2c <strrchr@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #20, 20	; 0x14000
   10e34:	ldr	pc, [ip, #612]!	; 0x264

00010e38 <nl_langinfo@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #20, 20	; 0x14000
   10e40:	ldr	pc, [ip, #604]!	; 0x25c

00010e44 <fputc@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #20, 20	; 0x14000
   10e4c:	ldr	pc, [ip, #596]!	; 0x254

00010e50 <putc@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #20, 20	; 0x14000
   10e58:	ldr	pc, [ip, #588]!	; 0x24c

00010e5c <getdelim@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #20, 20	; 0x14000
   10e64:	ldr	pc, [ip, #580]!	; 0x244

00010e68 <fputs@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #20, 20	; 0x14000
   10e70:	ldr	pc, [ip, #572]!	; 0x23c

00010e74 <strncmp@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #20, 20	; 0x14000
   10e7c:	ldr	pc, [ip, #564]!	; 0x234

00010e80 <abort@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #20, 20	; 0x14000
   10e88:	ldr	pc, [ip, #556]!	; 0x22c

00010e8c <__assert_fail@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #20, 20	; 0x14000
   10e94:	ldr	pc, [ip, #548]!	; 0x224

Disassembly of section .text:

00010e98 <.text>:
   10e98:	mov	fp, #0
   10e9c:	mov	lr, #0
   10ea0:	pop	{r1}		; (ldr r1, [sp], #4)
   10ea4:	mov	r2, sp
   10ea8:	push	{r2}		; (str r2, [sp, #-4]!)
   10eac:	push	{r0}		; (str r0, [sp, #-4]!)
   10eb0:	ldr	ip, [pc, #16]	; 10ec8 <__assert_fail@plt+0x3c>
   10eb4:	push	{ip}		; (str ip, [sp, #-4]!)
   10eb8:	ldr	r0, [pc, #12]	; 10ecc <__assert_fail@plt+0x40>
   10ebc:	ldr	r3, [pc, #12]	; 10ed0 <__assert_fail@plt+0x44>
   10ec0:	bl	10d6c <__libc_start_main@plt>
   10ec4:	bl	10e80 <abort@plt>
   10ec8:	andeq	r4, r1, r4, ror #12
   10ecc:	andeq	r0, r1, r8, lsl #31
   10ed0:	andeq	r4, r1, r4, lsl #12
   10ed4:	ldr	r3, [pc, #20]	; 10ef0 <__assert_fail@plt+0x64>
   10ed8:	ldr	r2, [pc, #20]	; 10ef4 <__assert_fail@plt+0x68>
   10edc:	add	r3, pc, r3
   10ee0:	ldr	r2, [r3, r2]
   10ee4:	cmp	r2, #0
   10ee8:	bxeq	lr
   10eec:	b	10d84 <__gmon_start__@plt>
   10ef0:	andeq	r4, r1, ip, lsl r1
   10ef4:	strheq	r0, [r0], -ip
   10ef8:	ldr	r0, [pc, #24]	; 10f18 <__assert_fail@plt+0x8c>
   10efc:	ldr	r3, [pc, #24]	; 10f1c <__assert_fail@plt+0x90>
   10f00:	cmp	r3, r0
   10f04:	bxeq	lr
   10f08:	ldr	r3, [pc, #16]	; 10f20 <__assert_fail@plt+0x94>
   10f0c:	cmp	r3, #0
   10f10:	bxeq	lr
   10f14:	bx	r3
   10f18:	andeq	r5, r2, r0, lsl r1
   10f1c:	andeq	r5, r2, r0, lsl r1
   10f20:	andeq	r0, r0, r0
   10f24:	ldr	r0, [pc, #36]	; 10f50 <__assert_fail@plt+0xc4>
   10f28:	ldr	r1, [pc, #36]	; 10f54 <__assert_fail@plt+0xc8>
   10f2c:	sub	r1, r1, r0
   10f30:	asr	r1, r1, #2
   10f34:	add	r1, r1, r1, lsr #31
   10f38:	asrs	r1, r1, #1
   10f3c:	bxeq	lr
   10f40:	ldr	r3, [pc, #16]	; 10f58 <__assert_fail@plt+0xcc>
   10f44:	cmp	r3, #0
   10f48:	bxeq	lr
   10f4c:	bx	r3
   10f50:	andeq	r5, r2, r0, lsl r1
   10f54:	andeq	r5, r2, r0, lsl r1
   10f58:	andeq	r0, r0, r0
   10f5c:	push	{r4, lr}
   10f60:	ldr	r4, [pc, #24]	; 10f80 <__assert_fail@plt+0xf4>
   10f64:	ldrb	r3, [r4]
   10f68:	cmp	r3, #0
   10f6c:	popne	{r4, pc}
   10f70:	bl	10ef8 <__assert_fail@plt+0x6c>
   10f74:	mov	r3, #1
   10f78:	strb	r3, [r4]
   10f7c:	pop	{r4, pc}
   10f80:	andeq	r5, r2, r4, lsr r1
   10f84:	b	10f24 <__assert_fail@plt+0x98>
   10f88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f8c:	add	fp, sp, #28
   10f90:	sub	sp, sp, #28
   10f94:	mov	r4, r0
   10f98:	ldr	r0, [r1]
   10f9c:	mov	r6, r1
   10fa0:	cmp	r0, #0
   10fa4:	movweq	r0, #18060	; 0x468c
   10fa8:	movteq	r0, #1
   10fac:	bl	117ec <__assert_fail@plt+0x960>
   10fb0:	movw	r0, #5892	; 0x1704
   10fb4:	movt	r0, #1
   10fb8:	bl	14668 <__assert_fail@plt+0x37dc>
   10fbc:	cmp	r0, #0
   10fc0:	bne	11488 <__assert_fail@plt+0x5fc>
   10fc4:	movw	r0, #1026	; 0x402
   10fc8:	str	r0, [sp, #16]
   10fcc:	movw	r0, #1026	; 0x402
   10fd0:	bl	13c18 <__assert_fail@plt+0x2d8c>
   10fd4:	str	r0, [sp, #20]
   10fd8:	movw	r0, #1026	; 0x402
   10fdc:	bl	13c18 <__assert_fail@plt+0x2d8c>
   10fe0:	mov	r1, #0
   10fe4:	movw	r2, #18102	; 0x46b6
   10fe8:	movw	r3, #18588	; 0x489c
   10fec:	mov	r5, r0
   10ff0:	mov	r9, #0
   10ff4:	strb	r1, [r0]
   10ff8:	mov	r0, #10
   10ffc:	movt	r2, #1
   11000:	movt	r3, #1
   11004:	str	r0, [sp, #12]
   11008:	mov	r0, #0
   1100c:	str	r0, [sp, #8]
   11010:	str	r1, [sp]
   11014:	mov	r0, r4
   11018:	mov	r1, r6
   1101c:	mov	sl, r4
   11020:	mov	r7, r6
   11024:	mov	r4, r2
   11028:	mov	r8, r3
   1102c:	bl	10d90 <getopt_long@plt>
   11030:	cmp	r0, #82	; 0x52
   11034:	ble	110ec <__assert_fail@plt+0x260>
   11038:	movw	r6, #20784	; 0x5130
   1103c:	cmp	r0, #83	; 0x53
   11040:	movt	r6, #2
   11044:	bne	11120 <__assert_fail@plt+0x294>
   11048:	ldr	r9, [r6]
   1104c:	bl	10dd8 <__errno_location@plt>
   11050:	mov	r1, r0
   11054:	mov	r0, #0
   11058:	mov	r2, #10
   1105c:	str	r9, [sp, #4]
   11060:	str	r0, [r1]
   11064:	str	r1, [sp, #8]
   11068:	mov	r0, r9
   1106c:	add	r1, sp, #24
   11070:	bl	10c94 <strtol@plt>
   11074:	cmp	r0, #0
   11078:	beq	110a4 <__assert_fail@plt+0x218>
   1107c:	add	r1, r0, #-2147483647	; 0x80000001
   11080:	mov	r2, r4
   11084:	mov	r3, r8
   11088:	cmp	r1, #1
   1108c:	bhi	110bc <__assert_fail@plt+0x230>
   11090:	ldr	r1, [sp, #8]
   11094:	ldr	r1, [r1]
   11098:	cmp	r1, #0
   1109c:	beq	110bc <__assert_fail@plt+0x230>
   110a0:	b	113f4 <__assert_fail@plt+0x568>
   110a4:	ldr	r2, [r6]
   110a8:	ldr	r1, [sp, #24]
   110ac:	mov	r3, r8
   110b0:	cmp	r1, r2
   110b4:	mov	r2, r4
   110b8:	beq	11410 <__assert_fail@plt+0x584>
   110bc:	ldr	r8, [sp, #24]
   110c0:	ldrb	r1, [r8]
   110c4:	cmp	r1, #0
   110c8:	bne	11434 <__assert_fail@plt+0x5a8>
   110cc:	mov	r4, sl
   110d0:	mov	r6, r7
   110d4:	mov	r9, #1
   110d8:	cmp	r0, #2
   110dc:	mov	r1, #0
   110e0:	str	r0, [sp, #8]
   110e4:	bcc	11010 <__assert_fail@plt+0x184>
   110e8:	b	11458 <__assert_fail@plt+0x5cc>
   110ec:	cmn	r0, #1
   110f0:	beq	11138 <__assert_fail@plt+0x2ac>
   110f4:	cmp	r0, #48	; 0x30
   110f8:	ldr	r0, [sp, #8]
   110fc:	bne	11480 <__assert_fail@plt+0x5f4>
   11100:	mov	r1, #0
   11104:	mov	r2, r4
   11108:	mov	r3, r8
   1110c:	mov	r4, sl
   11110:	mov	r6, r7
   11114:	str	r1, [sp, #12]
   11118:	mov	r1, #0
   1111c:	b	1100c <__assert_fail@plt+0x180>
   11120:	cmp	r0, #118	; 0x76
   11124:	bne	113ac <__assert_fail@plt+0x520>
   11128:	movw	r0, #18060	; 0x468c
   1112c:	movt	r0, #1
   11130:	bl	115c8 <__assert_fail@plt+0x73c>
   11134:	b	1139c <__assert_fail@plt+0x510>
   11138:	movw	r0, #20760	; 0x5118
   1113c:	ldr	r1, [sp, #8]
   11140:	movt	r0, #2
   11144:	ldr	r0, [r0]
   11148:	cmp	r0, sl
   1114c:	bne	114b4 <__assert_fail@plt+0x628>
   11150:	movw	r4, #20780	; 0x512c
   11154:	cmp	r9, #0
   11158:	movt	r4, #2
   1115c:	beq	11184 <__assert_fail@plt+0x2f8>
   11160:	cmp	r1, #0
   11164:	ldr	r1, [r4]
   11168:	mov	r0, #49	; 0x31
   1116c:	movweq	r0, #48	; 0x30
   11170:	bl	10e44 <fputc@plt>
   11174:	ldr	r1, [r4]
   11178:	mov	r0, #0
   1117c:	bl	10e44 <fputc@plt>
   11180:	b	111a4 <__assert_fail@plt+0x318>
   11184:	ldr	r3, [r4]
   11188:	movw	r0, #18652	; 0x48dc
   1118c:	mov	r1, #1
   11190:	mov	r2, #10
   11194:	movt	r0, #1
   11198:	bl	10d18 <fwrite@plt>
   1119c:	cmp	r0, #10
   111a0:	bne	114e0 <__assert_fail@plt+0x654>
   111a4:	movw	r0, #20776	; 0x5128
   111a8:	ldr	r4, [sp, #12]
   111ac:	add	r1, sp, #16
   111b0:	movt	r0, #2
   111b4:	ldr	r3, [r0]
   111b8:	add	r0, sp, #20
   111bc:	mov	r2, r4
   111c0:	bl	10e5c <getdelim@plt>
   111c4:	mov	r1, r0
   111c8:	ldr	r0, [sp, #20]
   111cc:	cmp	r1, #1
   111d0:	blt	1138c <__assert_fail@plt+0x500>
   111d4:	movw	sl, #1026	; 0x402
   111d8:	mov	r7, #0
   111dc:	sub	r1, r1, #1
   111e0:	ldrb	r2, [r0, r1]
   111e4:	cmp	r4, r2
   111e8:	bne	111f8 <__assert_fail@plt+0x36c>
   111ec:	mov	r2, #0
   111f0:	strb	r2, [r0, r1]
   111f4:	b	1121c <__assert_fail@plt+0x390>
   111f8:	movw	r1, #18208	; 0x4720
   111fc:	mov	r0, #0
   11200:	mov	r2, #5
   11204:	movt	r1, #1
   11208:	bl	10cf4 <dcgettext@plt>
   1120c:	mov	r2, r0
   11210:	mov	r0, #0
   11214:	mov	r1, #0
   11218:	bl	10d54 <error@plt>
   1121c:	ldrb	r2, [r5]
   11220:	mov	r1, r5
   11224:	cmp	r2, #0
   11228:	beq	1127c <__assert_fail@plt+0x3f0>
   1122c:	ldr	r0, [sp, #20]
   11230:	ldrb	r1, [r0]
   11234:	cmp	r2, r1
   11238:	mov	r1, r5
   1123c:	bne	1127c <__assert_fail@plt+0x3f0>
   11240:	mov	r1, #1
   11244:	cmn	r1, #-2147483647	; 0x80000001
   11248:	beq	11274 <__assert_fail@plt+0x3e8>
   1124c:	ldrb	r3, [r5, r1]
   11250:	add	r2, r1, #1
   11254:	cmp	r3, #0
   11258:	beq	1126c <__assert_fail@plt+0x3e0>
   1125c:	ldrb	r1, [r0, r1]
   11260:	cmp	r3, r1
   11264:	mov	r1, r2
   11268:	beq	11244 <__assert_fail@plt+0x3b8>
   1126c:	add	r0, r5, r2
   11270:	b	11278 <__assert_fail@plt+0x3ec>
   11274:	add	r0, r5, r1
   11278:	sub	r1, r0, #1
   1127c:	sub	r8, r1, r5
   11280:	mov	r1, #0
   11284:	movw	r4, #20780	; 0x512c
   11288:	sub	r6, r8, r7
   1128c:	movt	r4, #2
   11290:	add	r0, r6, #32768	; 0x8000
   11294:	cmp	r1, r0, lsr #16
   11298:	rsbne	r6, r7, #0
   1129c:	movwne	r8, #0
   112a0:	cmp	r9, #0
   112a4:	bne	1130c <__assert_fail@plt+0x480>
   112a8:	ldr	r1, [r4]
   112ac:	add	r0, r6, #127	; 0x7f
   112b0:	cmp	r0, #255	; 0xff
   112b4:	bcc	112fc <__assert_fail@plt+0x470>
   112b8:	mov	r0, #128	; 0x80
   112bc:	bl	10e50 <putc@plt>
   112c0:	cmn	r0, #1
   112c4:	beq	113a8 <__assert_fail@plt+0x51c>
   112c8:	cmp	r6, #32768	; 0x8000
   112cc:	bge	113bc <__assert_fail@plt+0x530>
   112d0:	cmn	r6, #32768	; 0x8000
   112d4:	blt	113d4 <__assert_fail@plt+0x548>
   112d8:	ldr	r7, [r4]
   112dc:	asr	r0, r6, #8
   112e0:	mov	r1, r7
   112e4:	bl	10e50 <putc@plt>
   112e8:	cmn	r0, #1
   112ec:	beq	113a8 <__assert_fail@plt+0x51c>
   112f0:	mov	r0, r6
   112f4:	mov	r1, r7
   112f8:	b	11300 <__assert_fail@plt+0x474>
   112fc:	mov	r0, r6
   11300:	bl	10e50 <putc@plt>
   11304:	cmn	r0, #1
   11308:	beq	113a8 <__assert_fail@plt+0x51c>
   1130c:	ldr	r0, [sp, #20]
   11310:	ldr	r1, [r4]
   11314:	add	r0, r0, r8
   11318:	bl	10e68 <fputs@plt>
   1131c:	cmn	r0, #1
   11320:	beq	113a8 <__assert_fail@plt+0x51c>
   11324:	ldr	r1, [r4]
   11328:	mov	r0, #0
   1132c:	bl	10e50 <putc@plt>
   11330:	cmn	r0, #1
   11334:	beq	113a8 <__assert_fail@plt+0x51c>
   11338:	movw	r0, #20776	; 0x5128
   1133c:	ldr	r4, [sp, #12]
   11340:	ldr	r6, [sp, #20]
   11344:	ldr	r7, [sp, #16]
   11348:	add	r1, sp, #16
   1134c:	str	r5, [sp, #20]
   11350:	str	sl, [sp, #16]
   11354:	movt	r0, #2
   11358:	ldr	r3, [r0]
   1135c:	add	r0, sp, #20
   11360:	mov	r2, r4
   11364:	bl	10e5c <getdelim@plt>
   11368:	mov	r1, r0
   1136c:	ldr	r0, [sp, #20]
   11370:	mov	sl, r7
   11374:	mov	r9, #0
   11378:	mov	r5, r6
   1137c:	mov	r7, r8
   11380:	cmp	r1, #0
   11384:	bgt	111dc <__assert_fail@plt+0x350>
   11388:	b	11390 <__assert_fail@plt+0x504>
   1138c:	mov	r6, r5
   11390:	bl	14248 <__assert_fail@plt+0x33bc>
   11394:	mov	r0, r6
   11398:	bl	14248 <__assert_fail@plt+0x33bc>
   1139c:	mov	r0, #0
   113a0:	sub	sp, fp, #28
   113a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113a8:	bl	11594 <__assert_fail@plt+0x708>
   113ac:	cmp	r0, #104	; 0x68
   113b0:	bne	11480 <__assert_fail@plt+0x5f4>
   113b4:	mov	r0, #0
   113b8:	bl	114f4 <__assert_fail@plt+0x668>
   113bc:	movw	r0, #18523	; 0x485b
   113c0:	movw	r1, #18537	; 0x4869
   113c4:	movw	r3, #18546	; 0x4872
   113c8:	mov	r2, #104	; 0x68
   113cc:	movt	r0, #1
   113d0:	b	113e8 <__assert_fail@plt+0x55c>
   113d4:	movw	r0, #18573	; 0x488d
   113d8:	movw	r1, #18537	; 0x4869
   113dc:	movw	r3, #18546	; 0x4872
   113e0:	mov	r2, #105	; 0x69
   113e4:	movt	r0, #1
   113e8:	movt	r1, #1
   113ec:	movt	r3, #1
   113f0:	bl	10e8c <__assert_fail@plt>
   113f4:	movw	r1, #18330	; 0x479a
   113f8:	mov	r0, #0
   113fc:	mov	r2, #5
   11400:	movt	r1, #1
   11404:	bl	10cf4 <dcgettext@plt>
   11408:	mov	r2, r0
   1140c:	b	11450 <__assert_fail@plt+0x5c4>
   11410:	movw	r1, #18271	; 0x475f
   11414:	mov	r0, #0
   11418:	mov	r2, #5
   1141c:	movt	r1, #1
   11420:	bl	10cf4 <dcgettext@plt>
   11424:	mov	r2, r0
   11428:	mov	r0, #1
   1142c:	mov	r1, #0
   11430:	bl	10d54 <error@plt>
   11434:	movw	r1, #18382	; 0x47ce
   11438:	mov	r0, #0
   1143c:	mov	r2, #5
   11440:	movt	r1, #1
   11444:	bl	10cf4 <dcgettext@plt>
   11448:	mov	r2, r0
   1144c:	str	r8, [sp]
   11450:	ldr	r3, [sp, #4]
   11454:	b	11474 <__assert_fail@plt+0x5e8>
   11458:	movw	r1, #18108	; 0x46bc
   1145c:	mov	r0, #0
   11460:	mov	r2, #5
   11464:	movt	r1, #1
   11468:	bl	10cf4 <dcgettext@plt>
   1146c:	ldr	r3, [sp, #8]
   11470:	mov	r2, r0
   11474:	mov	r0, #1
   11478:	mov	r1, #0
   1147c:	bl	10d54 <error@plt>
   11480:	mov	r0, #1
   11484:	bl	114f4 <__assert_fail@plt+0x668>
   11488:	bl	10dd8 <__errno_location@plt>
   1148c:	ldr	r4, [r0]
   11490:	movw	r1, #18067	; 0x4693
   11494:	movt	r1, #1
   11498:	mov	r0, #0
   1149c:	mov	r2, #5
   114a0:	bl	10cf4 <dcgettext@plt>
   114a4:	mov	r2, r0
   114a8:	mov	r0, #1
   114ac:	mov	r1, r4
   114b0:	bl	10d54 <error@plt>
   114b4:	movw	r1, #18151	; 0x46e7
   114b8:	mov	r0, #0
   114bc:	mov	r2, #5
   114c0:	movt	r1, #1
   114c4:	bl	10cf4 <dcgettext@plt>
   114c8:	mov	r2, r0
   114cc:	mov	r0, #0
   114d0:	mov	r1, #0
   114d4:	bl	10d54 <error@plt>
   114d8:	mov	r0, #1
   114dc:	bl	114f4 <__assert_fail@plt+0x668>
   114e0:	bl	10dd8 <__errno_location@plt>
   114e4:	ldr	r4, [r0]
   114e8:	movw	r1, #18173	; 0x46fd
   114ec:	movt	r1, #1
   114f0:	b	11498 <__assert_fail@plt+0x60c>
   114f4:	push	{fp, lr}
   114f8:	mov	fp, sp
   114fc:	cmp	r0, #0
   11500:	bne	11550 <__assert_fail@plt+0x6c4>
   11504:	movw	r5, #20780	; 0x512c
   11508:	movw	r1, #18465	; 0x4821
   1150c:	mov	r0, #0
   11510:	mov	r2, #5
   11514:	movt	r5, #2
   11518:	movt	r1, #1
   1151c:	ldr	r4, [r5]
   11520:	bl	10cf4 <dcgettext@plt>
   11524:	movw	r6, #20800	; 0x5140
   11528:	mov	r1, r0
   1152c:	mov	r0, r4
   11530:	movt	r6, #2
   11534:	ldr	r2, [r6]
   11538:	bl	10dcc <fprintf@plt>
   1153c:	ldr	r0, [r5]
   11540:	ldr	r1, [r6]
   11544:	bl	11678 <__assert_fail@plt+0x7ec>
   11548:	mov	r0, #0
   1154c:	bl	10da8 <exit@plt>
   11550:	mov	r4, r0
   11554:	movw	r0, #20768	; 0x5120
   11558:	movw	r1, #18426	; 0x47fa
   1155c:	mov	r2, #5
   11560:	movt	r0, #2
   11564:	movt	r1, #1
   11568:	ldr	r5, [r0]
   1156c:	mov	r0, #0
   11570:	bl	10cf4 <dcgettext@plt>
   11574:	mov	r1, r0
   11578:	movw	r0, #20800	; 0x5140
   1157c:	movt	r0, #2
   11580:	ldr	r2, [r0]
   11584:	mov	r0, r5
   11588:	bl	10dcc <fprintf@plt>
   1158c:	mov	r0, r4
   11590:	bl	10da8 <exit@plt>
   11594:	push	{fp, lr}
   11598:	mov	fp, sp
   1159c:	bl	10dd8 <__errno_location@plt>
   115a0:	movw	r1, #18511	; 0x484f
   115a4:	ldr	r4, [r0]
   115a8:	mov	r0, #0
   115ac:	mov	r2, #5
   115b0:	movt	r1, #1
   115b4:	bl	10cf4 <dcgettext@plt>
   115b8:	mov	r2, r0
   115bc:	mov	r0, #1
   115c0:	mov	r1, r4
   115c4:	bl	10d54 <error@plt>
   115c8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   115cc:	add	fp, sp, #24
   115d0:	sub	sp, sp, #16
   115d4:	mov	r8, r0
   115d8:	movw	r0, #20768	; 0x5120
   115dc:	movt	r0, #2
   115e0:	ldr	r0, [r0]
   115e4:	bl	141ec <__assert_fail@plt+0x3360>
   115e8:	movw	r0, #20780	; 0x512c
   115ec:	movw	r1, #18690	; 0x4902
   115f0:	mov	r2, #5
   115f4:	mov	r9, #0
   115f8:	movt	r0, #2
   115fc:	movt	r1, #1
   11600:	ldr	r6, [r0]
   11604:	movw	r0, #20680	; 0x50c8
   11608:	movt	r0, #2
   1160c:	ldr	r5, [r0]
   11610:	mov	r0, #0
   11614:	bl	10cf4 <dcgettext@plt>
   11618:	movw	r1, #18705	; 0x4911
   1161c:	mov	r7, r0
   11620:	mov	r0, #0
   11624:	mov	r2, #5
   11628:	movt	r1, #1
   1162c:	bl	10cf4 <dcgettext@plt>
   11630:	movw	r1, #18720	; 0x4920
   11634:	mov	r4, r0
   11638:	mov	r0, #0
   1163c:	mov	r2, #5
   11640:	movt	r1, #1
   11644:	bl	10cf4 <dcgettext@plt>
   11648:	movw	r2, #18676	; 0x48f4
   1164c:	str	r0, [sp, #8]
   11650:	mov	r0, r6
   11654:	mov	r1, r8
   11658:	mov	r3, r5
   1165c:	str	r7, [sp]
   11660:	str	r4, [sp, #4]
   11664:	str	r9, [sp, #12]
   11668:	movt	r2, #1
   1166c:	bl	13a00 <__assert_fail@plt+0x2b74>
   11670:	sub	sp, fp, #24
   11674:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11678:	push	{r4, r5, fp, lr}
   1167c:	add	fp, sp, #8
   11680:	sub	sp, sp, #16
   11684:	mov	r4, r1
   11688:	movw	r1, #18733	; 0x492d
   1168c:	mov	r5, r0
   11690:	mov	r0, #0
   11694:	mov	r2, #5
   11698:	movt	r1, #1
   1169c:	bl	10cf4 <dcgettext@plt>
   116a0:	movw	r2, #18978	; 0x4a22
   116a4:	movw	r3, #18676	; 0x48f4
   116a8:	mov	r1, r0
   116ac:	movw	r0, #19025	; 0x4a51
   116b0:	movt	r2, #1
   116b4:	movt	r0, #1
   116b8:	movt	r3, #1
   116bc:	str	r2, [sp, #4]
   116c0:	movw	r2, #18939	; 0x49fb
   116c4:	str	r3, [sp]
   116c8:	str	r0, [sp, #8]
   116cc:	mov	r0, r5
   116d0:	mov	r3, r4
   116d4:	movt	r2, #1
   116d8:	bl	10dcc <fprintf@plt>
   116dc:	sub	sp, fp, #8
   116e0:	pop	{r4, r5, fp, pc}
   116e4:	movw	r1, #20792	; 0x5138
   116e8:	movt	r1, #2
   116ec:	str	r0, [r1]
   116f0:	bx	lr
   116f4:	movw	r1, #20796	; 0x513c
   116f8:	movt	r1, #2
   116fc:	strb	r0, [r1]
   11700:	bx	lr
   11704:	push	{r4, r5, r6, sl, fp, lr}
   11708:	add	fp, sp, #16
   1170c:	sub	sp, sp, #8
   11710:	movw	r0, #20780	; 0x512c
   11714:	movt	r0, #2
   11718:	ldr	r0, [r0]
   1171c:	bl	1443c <__assert_fail@plt+0x35b0>
   11720:	cmp	r0, #0
   11724:	beq	1174c <__assert_fail@plt+0x8c0>
   11728:	movw	r0, #20796	; 0x513c
   1172c:	movt	r0, #2
   11730:	ldrb	r0, [r0]
   11734:	cmp	r0, #0
   11738:	beq	1176c <__assert_fail@plt+0x8e0>
   1173c:	bl	10dd8 <__errno_location@plt>
   11740:	ldr	r0, [r0]
   11744:	cmp	r0, #32
   11748:	bne	1176c <__assert_fail@plt+0x8e0>
   1174c:	movw	r0, #20768	; 0x5120
   11750:	movt	r0, #2
   11754:	ldr	r0, [r0]
   11758:	bl	1443c <__assert_fail@plt+0x35b0>
   1175c:	cmp	r0, #0
   11760:	subeq	sp, fp, #16
   11764:	popeq	{r4, r5, r6, sl, fp, pc}
   11768:	b	117dc <__assert_fail@plt+0x950>
   1176c:	movw	r1, #18511	; 0x484f
   11770:	mov	r0, #0
   11774:	mov	r2, #5
   11778:	movt	r1, #1
   1177c:	bl	10cf4 <dcgettext@plt>
   11780:	mov	r4, r0
   11784:	movw	r0, #20792	; 0x5138
   11788:	movt	r0, #2
   1178c:	ldr	r6, [r0]
   11790:	bl	10dd8 <__errno_location@plt>
   11794:	ldr	r5, [r0]
   11798:	cmp	r6, #0
   1179c:	bne	117b8 <__assert_fail@plt+0x92c>
   117a0:	movw	r2, #19051	; 0x4a6b
   117a4:	mov	r0, #0
   117a8:	mov	r1, r5
   117ac:	mov	r3, r4
   117b0:	movt	r2, #1
   117b4:	b	117d8 <__assert_fail@plt+0x94c>
   117b8:	mov	r0, r6
   117bc:	bl	130b8 <__assert_fail@plt+0x222c>
   117c0:	movw	r2, #19047	; 0x4a67
   117c4:	mov	r3, r0
   117c8:	str	r4, [sp]
   117cc:	mov	r0, #0
   117d0:	mov	r1, r5
   117d4:	movt	r2, #1
   117d8:	bl	10d54 <error@plt>
   117dc:	movw	r0, #20684	; 0x50cc
   117e0:	movt	r0, #2
   117e4:	ldr	r0, [r0]
   117e8:	bl	10cd0 <_exit@plt>
   117ec:	push	{r4, r5, fp, lr}
   117f0:	add	fp, sp, #8
   117f4:	cmp	r0, #0
   117f8:	beq	1188c <__assert_fail@plt+0xa00>
   117fc:	mov	r1, #47	; 0x2f
   11800:	mov	r4, r0
   11804:	bl	10e2c <strrchr@plt>
   11808:	cmp	r0, #0
   1180c:	mov	r5, r4
   11810:	addne	r5, r0, #1
   11814:	sub	r0, r5, r4
   11818:	cmp	r0, #7
   1181c:	blt	11870 <__assert_fail@plt+0x9e4>
   11820:	movw	r1, #19110	; 0x4aa6
   11824:	sub	r0, r5, #7
   11828:	mov	r2, #7
   1182c:	movt	r1, #1
   11830:	bl	10e74 <strncmp@plt>
   11834:	cmp	r0, #0
   11838:	bne	11870 <__assert_fail@plt+0x9e4>
   1183c:	movw	r1, #19118	; 0x4aae
   11840:	mov	r0, r5
   11844:	mov	r2, #3
   11848:	movt	r1, #1
   1184c:	bl	10e74 <strncmp@plt>
   11850:	cmp	r0, #0
   11854:	beq	11860 <__assert_fail@plt+0x9d4>
   11858:	mov	r4, r5
   1185c:	b	11870 <__assert_fail@plt+0x9e4>
   11860:	movw	r0, #20752	; 0x5110
   11864:	add	r4, r5, #3
   11868:	movt	r0, #2
   1186c:	str	r4, [r0]
   11870:	movw	r0, #20756	; 0x5114
   11874:	movt	r0, #2
   11878:	str	r4, [r0]
   1187c:	movw	r0, #20800	; 0x5140
   11880:	movt	r0, #2
   11884:	str	r4, [r0]
   11888:	pop	{r4, r5, fp, pc}
   1188c:	movw	r0, #20768	; 0x5120
   11890:	mov	r1, #55	; 0x37
   11894:	mov	r2, #1
   11898:	movt	r0, #2
   1189c:	ldr	r3, [r0]
   118a0:	movw	r0, #19054	; 0x4a6e
   118a4:	movt	r0, #1
   118a8:	bl	10d18 <fwrite@plt>
   118ac:	bl	10e80 <abort@plt>
   118b0:	push	{r4, r5, r6, sl, fp, lr}
   118b4:	add	fp, sp, #16
   118b8:	mov	r4, r0
   118bc:	movw	r0, #20808	; 0x5148
   118c0:	movt	r0, #2
   118c4:	cmp	r4, #0
   118c8:	moveq	r4, r0
   118cc:	bl	10dd8 <__errno_location@plt>
   118d0:	ldr	r6, [r0]
   118d4:	mov	r5, r0
   118d8:	mov	r0, r4
   118dc:	mov	r1, #48	; 0x30
   118e0:	bl	14078 <__assert_fail@plt+0x31ec>
   118e4:	str	r6, [r5]
   118e8:	pop	{r4, r5, r6, sl, fp, pc}
   118ec:	movw	r1, #20808	; 0x5148
   118f0:	cmp	r0, #0
   118f4:	movt	r1, #2
   118f8:	movne	r1, r0
   118fc:	ldr	r0, [r1]
   11900:	bx	lr
   11904:	movw	r2, #20808	; 0x5148
   11908:	cmp	r0, #0
   1190c:	movt	r2, #2
   11910:	movne	r2, r0
   11914:	str	r1, [r2]
   11918:	bx	lr
   1191c:	movw	r3, #20808	; 0x5148
   11920:	cmp	r0, #0
   11924:	and	r2, r2, #1
   11928:	movt	r3, #2
   1192c:	movne	r3, r0
   11930:	ubfx	r0, r1, #5, #3
   11934:	and	r1, r1, #31
   11938:	add	ip, r3, r0, lsl #2
   1193c:	mov	r0, #1
   11940:	ldr	r3, [ip, #8]
   11944:	and	r0, r0, r3, lsr r1
   11948:	eor	r2, r0, r2
   1194c:	eor	r1, r3, r2, lsl r1
   11950:	str	r1, [ip, #8]
   11954:	bx	lr
   11958:	movw	r2, #20808	; 0x5148
   1195c:	cmp	r0, #0
   11960:	movt	r2, #2
   11964:	movne	r2, r0
   11968:	ldr	r0, [r2, #4]
   1196c:	str	r1, [r2, #4]
   11970:	bx	lr
   11974:	push	{fp, lr}
   11978:	mov	fp, sp
   1197c:	movw	r3, #20808	; 0x5148
   11980:	cmp	r0, #0
   11984:	movt	r3, #2
   11988:	movne	r3, r0
   1198c:	cmp	r1, #0
   11990:	mov	r0, #10
   11994:	cmpne	r2, #0
   11998:	str	r0, [r3]
   1199c:	bne	119a4 <__assert_fail@plt+0xb18>
   119a0:	bl	10e80 <abort@plt>
   119a4:	str	r1, [r3, #40]	; 0x28
   119a8:	str	r2, [r3, #44]	; 0x2c
   119ac:	pop	{fp, pc}
   119b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119b4:	add	fp, sp, #28
   119b8:	sub	sp, sp, #20
   119bc:	mov	r7, r0
   119c0:	ldr	r0, [fp, #8]
   119c4:	movw	r5, #20808	; 0x5148
   119c8:	mov	r8, r3
   119cc:	mov	r9, r2
   119d0:	mov	sl, r1
   119d4:	movt	r5, #2
   119d8:	cmp	r0, #0
   119dc:	movne	r5, r0
   119e0:	bl	10dd8 <__errno_location@plt>
   119e4:	ldr	r2, [r5, #40]	; 0x28
   119e8:	ldr	r3, [r5, #44]	; 0x2c
   119ec:	mov	r4, r0
   119f0:	ldm	r5, {r0, r1}
   119f4:	add	r5, r5, #8
   119f8:	ldr	r6, [r4]
   119fc:	stm	sp, {r0, r1, r5}
   11a00:	mov	r0, r7
   11a04:	mov	r1, sl
   11a08:	str	r2, [sp, #12]
   11a0c:	str	r3, [sp, #16]
   11a10:	mov	r2, r9
   11a14:	mov	r3, r8
   11a18:	bl	11a28 <__assert_fail@plt+0xb9c>
   11a1c:	str	r6, [r4]
   11a20:	sub	sp, fp, #28
   11a24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a2c:	add	fp, sp, #28
   11a30:	sub	sp, sp, #156	; 0x9c
   11a34:	mov	r5, r0
   11a38:	add	r0, r2, #1
   11a3c:	mov	r6, r1
   11a40:	mov	sl, r3
   11a44:	str	r2, [fp, #-80]	; 0xffffffb0
   11a48:	str	r0, [sp, #72]	; 0x48
   11a4c:	ldr	r0, [fp, #12]
   11a50:	and	r1, r0, #1
   11a54:	str	r1, [sp, #36]	; 0x24
   11a58:	and	r1, r0, #4
   11a5c:	str	r1, [sp, #32]
   11a60:	ubfx	r9, r0, #1, #1
   11a64:	bl	10d30 <__ctype_get_mb_cur_max@plt>
   11a68:	str	r0, [sp, #40]	; 0x28
   11a6c:	ldr	r0, [fp, #24]
   11a70:	ldr	r7, [fp, #8]
   11a74:	mov	r1, #0
   11a78:	str	r5, [fp, #-84]	; 0xffffffac
   11a7c:	str	r1, [fp, #-56]	; 0xffffffc8
   11a80:	mov	r1, #0
   11a84:	str	r1, [sp, #60]	; 0x3c
   11a88:	mov	r1, #1
   11a8c:	str	r1, [fp, #-48]	; 0xffffffd0
   11a90:	str	r0, [sp, #80]	; 0x50
   11a94:	ldr	r0, [fp, #20]
   11a98:	str	r0, [sp, #76]	; 0x4c
   11a9c:	mov	r0, #0
   11aa0:	str	r0, [sp, #56]	; 0x38
   11aa4:	mov	r0, #0
   11aa8:	str	r0, [fp, #-88]	; 0xffffffa8
   11aac:	mov	r0, #0
   11ab0:	str	r0, [fp, #-72]	; 0xffffffb8
   11ab4:	mov	r0, #0
   11ab8:	cmp	r7, #10
   11abc:	bhi	12a50 <__assert_fail@plt+0x1bc4>
   11ac0:	add	r1, pc, #24
   11ac4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11ac8:	mov	r4, r6
   11acc:	mov	r8, #0
   11ad0:	mov	r2, #1
   11ad4:	mov	r3, #0
   11ad8:	mov	lr, sl
   11adc:	ldr	pc, [r1, r7, lsl #2]
   11ae0:	andeq	r1, r1, r4, lsr #23
   11ae4:	strdeq	r1, [r1], -r8
   11ae8:			; <UNDEFINED> instruction: 0x00011bb8
   11aec:	muleq	r1, ip, fp
   11af0:	andeq	r1, r1, ip, ror #23
   11af4:	andeq	r1, r1, r0, lsr #24
   11af8:	andeq	r1, r1, r8, asr #23
   11afc:	andeq	r1, r1, r4, lsr #25
   11b00:	andeq	r1, r1, ip, lsl #22
   11b04:	andeq	r1, r1, ip, lsl #22
   11b08:	andeq	r1, r1, r4, lsr fp
   11b0c:	movw	r0, #19200	; 0x4b00
   11b10:	mov	r1, r7
   11b14:	movt	r0, #1
   11b18:	bl	13458 <__assert_fail@plt+0x25cc>
   11b1c:	str	r0, [sp, #76]	; 0x4c
   11b20:	movw	r0, #19202	; 0x4b02
   11b24:	mov	r1, r7
   11b28:	movt	r0, #1
   11b2c:	bl	13458 <__assert_fail@plt+0x25cc>
   11b30:	str	r0, [sp, #80]	; 0x50
   11b34:	mov	r8, #0
   11b38:	tst	r9, #1
   11b3c:	bne	11b74 <__assert_fail@plt+0xce8>
   11b40:	ldr	r0, [sp, #76]	; 0x4c
   11b44:	ldrb	r0, [r0]
   11b48:	cmp	r0, #0
   11b4c:	beq	11b74 <__assert_fail@plt+0xce8>
   11b50:	ldr	r1, [sp, #76]	; 0x4c
   11b54:	mov	r8, #0
   11b58:	add	r1, r1, #1
   11b5c:	cmp	r8, r4
   11b60:	strbcc	r0, [r5, r8]
   11b64:	ldrb	r0, [r1, r8]
   11b68:	add	r8, r8, #1
   11b6c:	cmp	r0, #0
   11b70:	bne	11b5c <__assert_fail@plt+0xcd0>
   11b74:	ldr	r6, [sp, #80]	; 0x50
   11b78:	mov	r0, r6
   11b7c:	bl	10dc0 <strlen@plt>
   11b80:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11b84:	str	r0, [fp, #-72]	; 0xffffffb8
   11b88:	str	r6, [fp, #-88]	; 0xffffffa8
   11b8c:	mov	r2, #1
   11b90:	mov	r3, r9
   11b94:	mov	lr, sl
   11b98:	b	11ca4 <__assert_fail@plt+0xe18>
   11b9c:	mov	r0, #1
   11ba0:	b	11bf8 <__assert_fail@plt+0xd6c>
   11ba4:	mov	r7, #0
   11ba8:	mov	r8, #0
   11bac:	mov	r2, r0
   11bb0:	mov	r3, #0
   11bb4:	b	11ca4 <__assert_fail@plt+0xe18>
   11bb8:	tst	r9, #1
   11bbc:	bne	11bf8 <__assert_fail@plt+0xd6c>
   11bc0:	mov	r2, r0
   11bc4:	b	11c50 <__assert_fail@plt+0xdc4>
   11bc8:	mov	r0, #1
   11bcc:	mov	r8, #0
   11bd0:	mov	r7, #5
   11bd4:	mov	r2, #1
   11bd8:	str	r0, [fp, #-72]	; 0xffffffb8
   11bdc:	movw	r0, #19198	; 0x4afe
   11be0:	movt	r0, #1
   11be4:	str	r0, [fp, #-88]	; 0xffffffa8
   11be8:	b	11c18 <__assert_fail@plt+0xd8c>
   11bec:	mov	r2, #1
   11bf0:	tst	r9, #1
   11bf4:	beq	11c50 <__assert_fail@plt+0xdc4>
   11bf8:	mov	r1, #1
   11bfc:	mov	r8, #0
   11c00:	mov	r7, #2
   11c04:	mov	r2, r0
   11c08:	str	r1, [fp, #-72]	; 0xffffffb8
   11c0c:	movw	r1, #19202	; 0x4b02
   11c10:	movt	r1, #1
   11c14:	str	r1, [fp, #-88]	; 0xffffffa8
   11c18:	mov	r3, #1
   11c1c:	b	11ca4 <__assert_fail@plt+0xe18>
   11c20:	tst	r9, #1
   11c24:	beq	11c74 <__assert_fail@plt+0xde8>
   11c28:	mov	r0, #1
   11c2c:	mov	r8, #0
   11c30:	mov	r2, #1
   11c34:	mov	r3, #1
   11c38:	mov	r7, #5
   11c3c:	str	r0, [fp, #-72]	; 0xffffffb8
   11c40:	movw	r0, #19198	; 0x4afe
   11c44:	movt	r0, #1
   11c48:	str	r0, [fp, #-88]	; 0xffffffa8
   11c4c:	b	11ca4 <__assert_fail@plt+0xe18>
   11c50:	cmp	r4, #0
   11c54:	mov	r8, #1
   11c58:	mov	r3, #0
   11c5c:	mov	r7, #2
   11c60:	movne	r0, #39	; 0x27
   11c64:	strbne	r0, [r5]
   11c68:	movw	r0, #19202	; 0x4b02
   11c6c:	movt	r0, #1
   11c70:	b	11c98 <__assert_fail@plt+0xe0c>
   11c74:	cmp	r4, #0
   11c78:	mov	r8, #1
   11c7c:	mov	r2, #1
   11c80:	mov	r7, #5
   11c84:	mov	r3, #0
   11c88:	movne	r0, #34	; 0x22
   11c8c:	strbne	r0, [r5]
   11c90:	movw	r0, #19198	; 0x4afe
   11c94:	movt	r0, #1
   11c98:	str	r0, [fp, #-88]	; 0xffffffa8
   11c9c:	mov	r0, #1
   11ca0:	str	r0, [fp, #-72]	; 0xffffffb8
   11ca4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11ca8:	eor	r6, r3, #1
   11cac:	str	r7, [fp, #-68]	; 0xffffffbc
   11cb0:	str	r3, [fp, #-76]	; 0xffffffb4
   11cb4:	str	r2, [sp, #84]	; 0x54
   11cb8:	str	r6, [sp, #92]	; 0x5c
   11cbc:	cmp	r0, #0
   11cc0:	movwne	r0, #1
   11cc4:	and	r1, r0, r3
   11cc8:	and	r1, r2, r1
   11ccc:	str	r1, [sp, #48]	; 0x30
   11cd0:	sub	r1, r7, #2
   11cd4:	clz	r1, r1
   11cd8:	lsr	r1, r1, #5
   11cdc:	and	r1, r1, r3
   11ce0:	str	r1, [sp, #64]	; 0x40
   11ce4:	subs	r1, r7, #2
   11ce8:	mov	r7, #0
   11cec:	movwne	r1, #1
   11cf0:	orr	r6, r1, r6
   11cf4:	and	r1, r1, r2
   11cf8:	and	r0, r0, r1
   11cfc:	str	r6, [sp, #68]	; 0x44
   11d00:	str	r0, [fp, #-60]	; 0xffffffc4
   11d04:	orr	r0, r1, r3
   11d08:	ldr	r1, [fp, #16]
   11d0c:	eor	r0, r0, #1
   11d10:	clz	r1, r1
   11d14:	lsr	r1, r1, #5
   11d18:	orr	r0, r1, r0
   11d1c:	str	r0, [fp, #-64]	; 0xffffffc0
   11d20:	eor	r0, r2, #1
   11d24:	str	r0, [sp, #52]	; 0x34
   11d28:	cmn	lr, #1
   11d2c:	beq	11d3c <__assert_fail@plt+0xeb0>
   11d30:	cmp	r7, lr
   11d34:	bne	11d48 <__assert_fail@plt+0xebc>
   11d38:	b	12890 <__assert_fail@plt+0x1a04>
   11d3c:	ldrb	r0, [ip, r7]
   11d40:	cmp	r0, #0
   11d44:	beq	12898 <__assert_fail@plt+0x1a0c>
   11d48:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11d4c:	mov	sl, #0
   11d50:	cmp	r0, #0
   11d54:	beq	11d8c <__assert_fail@plt+0xf00>
   11d58:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11d5c:	add	r5, r7, r0
   11d60:	cmp	r0, #2
   11d64:	bcc	11d80 <__assert_fail@plt+0xef4>
   11d68:	cmn	lr, #1
   11d6c:	bne	11d80 <__assert_fail@plt+0xef4>
   11d70:	mov	r0, ip
   11d74:	bl	10dc0 <strlen@plt>
   11d78:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11d7c:	mov	lr, r0
   11d80:	cmp	r5, lr
   11d84:	bls	11d94 <__assert_fail@plt+0xf08>
   11d88:	ldr	r5, [fp, #-84]	; 0xffffffac
   11d8c:	mov	r0, #0
   11d90:	b	11de0 <__assert_fail@plt+0xf54>
   11d94:	ldr	r1, [fp, #-88]	; 0xffffffa8
   11d98:	ldr	r2, [fp, #-72]	; 0xffffffb8
   11d9c:	add	r0, ip, r7
   11da0:	mov	r6, r4
   11da4:	mov	r4, lr
   11da8:	bl	10db4 <bcmp@plt>
   11dac:	ldr	r2, [sp, #92]	; 0x5c
   11db0:	cmp	r0, #0
   11db4:	ldr	r5, [fp, #-84]	; 0xffffffac
   11db8:	mov	r1, r0
   11dbc:	movwne	r1, #1
   11dc0:	orr	r1, r1, r2
   11dc4:	tst	r1, #1
   11dc8:	beq	12920 <__assert_fail@plt+0x1a94>
   11dcc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11dd0:	clz	r0, r0
   11dd4:	mov	lr, r4
   11dd8:	mov	r4, r6
   11ddc:	lsr	r0, r0, #5
   11de0:	str	r0, [fp, #-52]	; 0xffffffcc
   11de4:	ldrb	r6, [ip, r7]
   11de8:	cmp	r6, #126	; 0x7e
   11dec:	bhi	1231c <__assert_fail@plt+0x1490>
   11df0:	add	r3, pc, #16
   11df4:	mov	r9, #1
   11df8:	mov	r2, #110	; 0x6e
   11dfc:	mov	r0, #97	; 0x61
   11e00:	mov	r1, #0
   11e04:	ldr	pc, [r3, r6, lsl #2]
   11e08:	andeq	r2, r1, ip, ror r1
   11e0c:	andeq	r2, r1, ip, lsl r3
   11e10:	andeq	r2, r1, ip, lsl r3
   11e14:	andeq	r2, r1, ip, lsl r3
   11e18:	andeq	r2, r1, ip, lsl r3
   11e1c:	andeq	r2, r1, ip, lsl r3
   11e20:	andeq	r2, r1, ip, lsl r3
   11e24:	strdeq	r2, [r1], -r8
   11e28:	andeq	r2, r1, ip, asr r1
   11e2c:	andeq	r2, r1, r4, asr r1
   11e30:	andeq	r2, r1, r8, ror #2
   11e34:	andeq	r2, r1, r4, lsl #5
   11e38:	andeq	r2, r1, ip, asr #2
   11e3c:	andeq	r2, r1, r4, ror #2
   11e40:	andeq	r2, r1, ip, lsl r3
   11e44:	andeq	r2, r1, ip, lsl r3
   11e48:	andeq	r2, r1, ip, lsl r3
   11e4c:	andeq	r2, r1, ip, lsl r3
   11e50:	andeq	r2, r1, ip, lsl r3
   11e54:	andeq	r2, r1, ip, lsl r3
   11e58:	andeq	r2, r1, ip, lsl r3
   11e5c:	andeq	r2, r1, ip, lsl r3
   11e60:	andeq	r2, r1, ip, lsl r3
   11e64:	andeq	r2, r1, ip, lsl r3
   11e68:	andeq	r2, r1, ip, lsl r3
   11e6c:	andeq	r2, r1, ip, lsl r3
   11e70:	andeq	r2, r1, ip, lsl r3
   11e74:	andeq	r2, r1, ip, lsl r3
   11e78:	andeq	r2, r1, ip, lsl r3
   11e7c:	andeq	r2, r1, ip, lsl r3
   11e80:	andeq	r2, r1, ip, lsl r3
   11e84:	andeq	r2, r1, ip, lsl r3
   11e88:	andeq	r2, r1, r0, lsl #2
   11e8c:	andeq	r2, r1, r4, lsl #2
   11e90:	andeq	r2, r1, r4, lsl #2
   11e94:	andeq	r2, r1, ip, ror #1
   11e98:	andeq	r2, r1, r4, lsl #2
   11e9c:	andeq	r2, r1, r4
   11ea0:	andeq	r2, r1, r4, lsl #2
   11ea4:	andeq	r2, r1, ip, lsl #5
   11ea8:	andeq	r2, r1, r4, lsl #2
   11eac:	andeq	r2, r1, r4, lsl #2
   11eb0:	andeq	r2, r1, r4, lsl #2
   11eb4:	andeq	r2, r1, r4
   11eb8:	andeq	r2, r1, r4
   11ebc:	andeq	r2, r1, r4
   11ec0:	andeq	r2, r1, r4
   11ec4:	andeq	r2, r1, r4
   11ec8:	andeq	r2, r1, r4
   11ecc:	andeq	r2, r1, r4
   11ed0:	andeq	r2, r1, r4
   11ed4:	andeq	r2, r1, r4
   11ed8:	andeq	r2, r1, r4
   11edc:	andeq	r2, r1, r4
   11ee0:	andeq	r2, r1, r4
   11ee4:	andeq	r2, r1, r4
   11ee8:	andeq	r2, r1, r4
   11eec:	andeq	r2, r1, r4
   11ef0:	andeq	r2, r1, r4
   11ef4:	andeq	r2, r1, r4, lsl #2
   11ef8:	andeq	r2, r1, r4, lsl #2
   11efc:	andeq	r2, r1, r4, lsl #2
   11f00:	andeq	r2, r1, r4, lsl #2
   11f04:	andeq	r2, r1, r4, asr r2
   11f08:	andeq	r2, r1, ip, lsl r3
   11f0c:	andeq	r2, r1, r4
   11f10:	andeq	r2, r1, r4
   11f14:	andeq	r2, r1, r4
   11f18:	andeq	r2, r1, r4
   11f1c:	andeq	r2, r1, r4
   11f20:	andeq	r2, r1, r4
   11f24:	andeq	r2, r1, r4
   11f28:	andeq	r2, r1, r4
   11f2c:	andeq	r2, r1, r4
   11f30:	andeq	r2, r1, r4
   11f34:	andeq	r2, r1, r4
   11f38:	andeq	r2, r1, r4
   11f3c:	andeq	r2, r1, r4
   11f40:	andeq	r2, r1, r4
   11f44:	andeq	r2, r1, r4
   11f48:	andeq	r2, r1, r4
   11f4c:	andeq	r2, r1, r4
   11f50:	andeq	r2, r1, r4
   11f54:	andeq	r2, r1, r4
   11f58:	andeq	r2, r1, r4
   11f5c:	andeq	r2, r1, r4
   11f60:	andeq	r2, r1, r4
   11f64:	andeq	r2, r1, r4
   11f68:	andeq	r2, r1, r4
   11f6c:	andeq	r2, r1, r4
   11f70:	andeq	r2, r1, r4
   11f74:	andeq	r2, r1, r4, lsl #2
   11f78:	andeq	r2, r1, ip, lsr #2
   11f7c:	andeq	r2, r1, r4
   11f80:	andeq	r2, r1, r4, lsl #2
   11f84:	andeq	r2, r1, r4
   11f88:	andeq	r2, r1, r4, lsl #2
   11f8c:	andeq	r2, r1, r4
   11f90:	andeq	r2, r1, r4
   11f94:	andeq	r2, r1, r4
   11f98:	andeq	r2, r1, r4
   11f9c:	andeq	r2, r1, r4
   11fa0:	andeq	r2, r1, r4
   11fa4:	andeq	r2, r1, r4
   11fa8:	andeq	r2, r1, r4
   11fac:	andeq	r2, r1, r4
   11fb0:	andeq	r2, r1, r4
   11fb4:	andeq	r2, r1, r4
   11fb8:	andeq	r2, r1, r4
   11fbc:	andeq	r2, r1, r4
   11fc0:	andeq	r2, r1, r4
   11fc4:	andeq	r2, r1, r4
   11fc8:	andeq	r2, r1, r4
   11fcc:	andeq	r2, r1, r4
   11fd0:	andeq	r2, r1, r4
   11fd4:	andeq	r2, r1, r4
   11fd8:	andeq	r2, r1, r4
   11fdc:	andeq	r2, r1, r4
   11fe0:	andeq	r2, r1, r4
   11fe4:	andeq	r2, r1, r4
   11fe8:	andeq	r2, r1, r4
   11fec:	andeq	r2, r1, r4
   11ff0:	andeq	r2, r1, r4
   11ff4:	andeq	r2, r1, r0, asr #1
   11ff8:	andeq	r2, r1, r4, lsl #2
   11ffc:	andeq	r2, r1, r0, asr #1
   12000:	andeq	r2, r1, ip, ror #1
   12004:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12008:	tst	r0, #1
   1200c:	bne	12038 <__assert_fail@plt+0x11ac>
   12010:	ldr	r1, [fp, #16]
   12014:	ubfx	r0, r6, #5, #3
   12018:	mov	r2, #1
   1201c:	ldr	r0, [r1, r0, lsl #2]
   12020:	and	r1, r6, #31
   12024:	tst	r0, r2, lsl r1
   12028:	beq	12038 <__assert_fail@plt+0x11ac>
   1202c:	mov	r0, r6
   12030:	mov	r1, r9
   12034:	b	1204c <__assert_fail@plt+0x11c0>
   12038:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1203c:	mov	r1, r9
   12040:	cmp	r0, #0
   12044:	mov	r0, r6
   12048:	beq	1238c <__assert_fail@plt+0x1500>
   1204c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12050:	tst	r2, #1
   12054:	bne	1295c <__assert_fail@plt+0x1ad0>
   12058:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1205c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12060:	subs	r2, r2, #2
   12064:	movwne	r2, #1
   12068:	orr	r2, r2, r3
   1206c:	tst	r2, #1
   12070:	bne	120ac <__assert_fail@plt+0x1220>
   12074:	cmp	r8, r4
   12078:	movcc	r2, #39	; 0x27
   1207c:	strbcc	r2, [r5, r8]
   12080:	add	r2, r8, #1
   12084:	cmp	r2, r4
   12088:	movcc	r3, #36	; 0x24
   1208c:	strbcc	r3, [r5, r2]
   12090:	add	r2, r8, #2
   12094:	add	r8, r8, #3
   12098:	cmp	r2, r4
   1209c:	movcc	r3, #39	; 0x27
   120a0:	strbcc	r3, [r5, r2]
   120a4:	mov	r2, #1
   120a8:	str	r2, [fp, #-56]	; 0xffffffc8
   120ac:	cmp	r8, r4
   120b0:	movcc	r2, #92	; 0x5c
   120b4:	strbcc	r2, [r5, r8]
   120b8:	add	r8, r8, #1
   120bc:	b	123d0 <__assert_fail@plt+0x1544>
   120c0:	cmp	lr, #1
   120c4:	beq	120ec <__assert_fail@plt+0x1260>
   120c8:	mov	r9, #0
   120cc:	cmn	lr, #1
   120d0:	bne	120f8 <__assert_fail@plt+0x126c>
   120d4:	ldrb	r0, [ip, #1]
   120d8:	cmp	r0, #0
   120dc:	beq	120ec <__assert_fail@plt+0x1260>
   120e0:	mvn	lr, #0
   120e4:	mov	sl, #0
   120e8:	b	12004 <__assert_fail@plt+0x1178>
   120ec:	mov	r9, #0
   120f0:	cmp	r7, #0
   120f4:	beq	12100 <__assert_fail@plt+0x1274>
   120f8:	mov	sl, #0
   120fc:	b	12004 <__assert_fail@plt+0x1178>
   12100:	mov	r1, #1
   12104:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12108:	cmp	r0, #2
   1210c:	bne	12124 <__assert_fail@plt+0x1298>
   12110:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12114:	mov	r9, r1
   12118:	tst	r0, #1
   1211c:	beq	12004 <__assert_fail@plt+0x1178>
   12120:	b	1295c <__assert_fail@plt+0x1ad0>
   12124:	mov	r9, r1
   12128:	b	12004 <__assert_fail@plt+0x1178>
   1212c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12130:	cmp	r0, #2
   12134:	bne	12370 <__assert_fail@plt+0x14e4>
   12138:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1213c:	tst	r0, #1
   12140:	bne	1295c <__assert_fail@plt+0x1ad0>
   12144:	mov	sl, #0
   12148:	b	12384 <__assert_fail@plt+0x14f8>
   1214c:	mov	r0, #102	; 0x66
   12150:	b	123f8 <__assert_fail@plt+0x156c>
   12154:	mov	r2, #116	; 0x74
   12158:	b	12168 <__assert_fail@plt+0x12dc>
   1215c:	mov	r0, #98	; 0x62
   12160:	b	123f8 <__assert_fail@plt+0x156c>
   12164:	mov	r2, #114	; 0x72
   12168:	ldr	r0, [sp, #68]	; 0x44
   1216c:	tst	r0, #1
   12170:	mov	r0, r2
   12174:	bne	123f8 <__assert_fail@plt+0x156c>
   12178:	b	1295c <__assert_fail@plt+0x1ad0>
   1217c:	ldr	r0, [sp, #84]	; 0x54
   12180:	tst	r0, #1
   12184:	beq	12414 <__assert_fail@plt+0x1588>
   12188:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1218c:	tst	r0, #1
   12190:	bne	12a48 <__assert_fail@plt+0x1bbc>
   12194:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12198:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1219c:	subs	r0, r0, #2
   121a0:	movwne	r0, #1
   121a4:	orr	r0, r0, r1
   121a8:	tst	r0, #1
   121ac:	bne	121e8 <__assert_fail@plt+0x135c>
   121b0:	cmp	r8, r4
   121b4:	movcc	r0, #39	; 0x27
   121b8:	strbcc	r0, [r5, r8]
   121bc:	add	r0, r8, #1
   121c0:	cmp	r0, r4
   121c4:	movcc	r1, #36	; 0x24
   121c8:	strbcc	r1, [r5, r0]
   121cc:	add	r0, r8, #2
   121d0:	add	r8, r8, #3
   121d4:	cmp	r0, r4
   121d8:	movcc	r1, #39	; 0x27
   121dc:	strbcc	r1, [r5, r0]
   121e0:	mov	r0, #1
   121e4:	str	r0, [fp, #-56]	; 0xffffffc8
   121e8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   121ec:	cmp	r8, r4
   121f0:	mov	r9, #0
   121f4:	mov	sl, #1
   121f8:	mov	r6, #48	; 0x30
   121fc:	movcc	r0, #92	; 0x5c
   12200:	strbcc	r0, [r5, r8]
   12204:	add	r0, r8, #1
   12208:	cmp	r1, #2
   1220c:	beq	125dc <__assert_fail@plt+0x1750>
   12210:	add	r1, r7, #1
   12214:	cmp	r1, lr
   12218:	bcs	125dc <__assert_fail@plt+0x1750>
   1221c:	ldrb	r1, [ip, r1]
   12220:	sub	r1, r1, #48	; 0x30
   12224:	uxtb	r1, r1
   12228:	cmp	r1, #9
   1222c:	bhi	125dc <__assert_fail@plt+0x1750>
   12230:	cmp	r0, r4
   12234:	movcc	r1, #48	; 0x30
   12238:	strbcc	r1, [r5, r0]
   1223c:	add	r0, r8, #2
   12240:	add	r8, r8, #3
   12244:	cmp	r0, r4
   12248:	movcc	r1, #48	; 0x30
   1224c:	strbcc	r1, [r5, r0]
   12250:	b	12004 <__assert_fail@plt+0x1178>
   12254:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12258:	mov	sl, #0
   1225c:	mov	r6, #63	; 0x3f
   12260:	cmp	r0, #5
   12264:	beq	125e4 <__assert_fail@plt+0x1758>
   12268:	cmp	r0, #2
   1226c:	bne	1268c <__assert_fail@plt+0x1800>
   12270:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12274:	mov	r9, #0
   12278:	tst	r0, #1
   1227c:	beq	12004 <__assert_fail@plt+0x1178>
   12280:	b	1295c <__assert_fail@plt+0x1ad0>
   12284:	mov	r0, #118	; 0x76
   12288:	b	123f8 <__assert_fail@plt+0x156c>
   1228c:	mov	r0, #1
   12290:	mov	r6, #39	; 0x27
   12294:	str	r0, [sp, #60]	; 0x3c
   12298:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1229c:	cmp	r0, #2
   122a0:	bne	12430 <__assert_fail@plt+0x15a4>
   122a4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   122a8:	tst	r0, #1
   122ac:	bne	1295c <__assert_fail@plt+0x1ad0>
   122b0:	ldr	r2, [sp, #56]	; 0x38
   122b4:	clz	r1, r4
   122b8:	mov	sl, #0
   122bc:	mov	r9, #1
   122c0:	lsr	r1, r1, #5
   122c4:	cmp	r2, #0
   122c8:	mov	r0, r2
   122cc:	movwne	r0, #1
   122d0:	orrs	r0, r0, r1
   122d4:	moveq	r2, r4
   122d8:	moveq	r4, r0
   122dc:	cmp	r8, r4
   122e0:	str	r2, [sp, #56]	; 0x38
   122e4:	movcc	r0, #39	; 0x27
   122e8:	strbcc	r0, [r5, r8]
   122ec:	add	r0, r8, #1
   122f0:	cmp	r0, r4
   122f4:	movcc	r1, #92	; 0x5c
   122f8:	strbcc	r1, [r5, r0]
   122fc:	add	r0, r8, #2
   12300:	add	r8, r8, #3
   12304:	cmp	r0, r4
   12308:	movcc	r1, #39	; 0x27
   1230c:	strbcc	r1, [r5, r0]
   12310:	mov	r0, #0
   12314:	str	r0, [fp, #-56]	; 0xffffffc8
   12318:	b	12004 <__assert_fail@plt+0x1178>
   1231c:	ldr	r0, [sp, #40]	; 0x28
   12320:	str	r4, [sp, #88]	; 0x58
   12324:	cmp	r0, #1
   12328:	bne	12438 <__assert_fail@plt+0x15ac>
   1232c:	str	lr, [sp, #28]
   12330:	bl	10d9c <__ctype_b_loc@plt>
   12334:	ldr	r0, [r0]
   12338:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1233c:	mov	r2, #1
   12340:	add	r0, r0, r6, lsl #1
   12344:	ldrb	r0, [r0, #1]
   12348:	ubfx	r9, r0, #6, #1
   1234c:	ldr	r0, [sp, #52]	; 0x34
   12350:	cmp	r2, #1
   12354:	orr	r0, r9, r0
   12358:	bhi	12694 <__assert_fail@plt+0x1808>
   1235c:	tst	r0, #1
   12360:	beq	12694 <__assert_fail@plt+0x1808>
   12364:	ldr	lr, [sp, #28]
   12368:	ldr	r4, [sp, #88]	; 0x58
   1236c:	b	12004 <__assert_fail@plt+0x1178>
   12370:	ldr	r1, [sp, #48]	; 0x30
   12374:	mov	sl, #0
   12378:	mov	r0, #92	; 0x5c
   1237c:	cmp	r1, #0
   12380:	beq	123f8 <__assert_fail@plt+0x156c>
   12384:	mov	r6, #92	; 0x5c
   12388:	mov	r9, #0
   1238c:	cmp	sl, #0
   12390:	bne	123c8 <__assert_fail@plt+0x153c>
   12394:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12398:	tst	r0, #1
   1239c:	beq	123c8 <__assert_fail@plt+0x153c>
   123a0:	cmp	r8, r4
   123a4:	movcc	r0, #39	; 0x27
   123a8:	strbcc	r0, [r5, r8]
   123ac:	add	r0, r8, #1
   123b0:	add	r8, r8, #2
   123b4:	cmp	r0, r4
   123b8:	movcc	r1, #39	; 0x27
   123bc:	strbcc	r1, [r5, r0]
   123c0:	mov	r0, #0
   123c4:	str	r0, [fp, #-56]	; 0xffffffc8
   123c8:	mov	r1, r9
   123cc:	mov	r0, r6
   123d0:	cmp	r8, r4
   123d4:	strbcc	r0, [r5, r8]
   123d8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   123dc:	add	r8, r8, #1
   123e0:	and	r0, r0, r1
   123e4:	str	r0, [fp, #-48]	; 0xffffffd0
   123e8:	add	r7, r7, #1
   123ec:	cmn	lr, #1
   123f0:	bne	11d30 <__assert_fail@plt+0xea4>
   123f4:	b	11d3c <__assert_fail@plt+0xeb0>
   123f8:	ldr	r1, [sp, #84]	; 0x54
   123fc:	mov	sl, #0
   12400:	mov	r9, #0
   12404:	tst	r1, #1
   12408:	mov	r1, #0
   1240c:	beq	12004 <__assert_fail@plt+0x1178>
   12410:	b	1204c <__assert_fail@plt+0x11c0>
   12414:	ldr	r0, [sp, #36]	; 0x24
   12418:	mov	r6, #0
   1241c:	mov	sl, #0
   12420:	mov	r9, #0
   12424:	cmp	r0, #0
   12428:	beq	12004 <__assert_fail@plt+0x1178>
   1242c:	b	123e8 <__assert_fail@plt+0x155c>
   12430:	mov	r9, #1
   12434:	b	12004 <__assert_fail@plt+0x1178>
   12438:	mov	r0, #0
   1243c:	cmn	lr, #1
   12440:	sub	r4, fp, #40	; 0x28
   12444:	str	r0, [fp, #-36]	; 0xffffffdc
   12448:	str	r0, [fp, #-40]	; 0xffffffd8
   1244c:	bne	12460 <__assert_fail@plt+0x15d4>
   12450:	mov	r0, ip
   12454:	bl	10dc0 <strlen@plt>
   12458:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1245c:	mov	lr, r0
   12460:	ldr	r0, [sp, #72]	; 0x48
   12464:	mov	r9, #1
   12468:	mov	r2, #0
   1246c:	str	lr, [sp, #28]
   12470:	add	r0, r0, r7
   12474:	str	r0, [sp, #20]
   12478:	b	124bc <__assert_fail@plt+0x1630>
   1247c:	ldr	r5, [sp, #44]	; 0x2c
   12480:	add	r5, r0, r5
   12484:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12488:	bl	10d0c <iswprint@plt>
   1248c:	cmp	r0, #0
   12490:	sub	r4, fp, #40	; 0x28
   12494:	movwne	r0, #1
   12498:	and	r9, r9, r0
   1249c:	mov	r0, r4
   124a0:	bl	10ce8 <mbsinit@plt>
   124a4:	mov	r2, r5
   124a8:	ldr	lr, [sp, #28]
   124ac:	ldr	r5, [fp, #-84]	; 0xffffffac
   124b0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   124b4:	cmp	r0, #0
   124b8:	bne	1234c <__assert_fail@plt+0x14c0>
   124bc:	add	r0, r2, r7
   124c0:	str	r2, [sp, #44]	; 0x2c
   124c4:	mov	r3, r4
   124c8:	add	r1, ip, r0
   124cc:	str	r0, [sp, #24]
   124d0:	sub	r2, lr, r0
   124d4:	sub	r0, fp, #44	; 0x2c
   124d8:	bl	14348 <__assert_fail@plt+0x34bc>
   124dc:	cmp	r0, #0
   124e0:	beq	12884 <__assert_fail@plt+0x19f8>
   124e4:	cmn	r0, #1
   124e8:	beq	12840 <__assert_fail@plt+0x19b4>
   124ec:	ldr	lr, [sp, #28]
   124f0:	cmn	r0, #2
   124f4:	beq	12848 <__assert_fail@plt+0x19bc>
   124f8:	ldr	r2, [sp, #64]	; 0x40
   124fc:	ldr	r4, [sp, #88]	; 0x58
   12500:	ldr	ip, [sp, #84]	; 0x54
   12504:	cmp	r0, #2
   12508:	mov	r1, #0
   1250c:	movwcc	r1, #1
   12510:	eor	r2, r2, #1
   12514:	orrs	r1, r2, r1
   12518:	bne	1247c <__assert_fail@plt+0x15f0>
   1251c:	ldr	r1, [sp, #44]	; 0x2c
   12520:	ldr	r2, [sp, #20]
   12524:	add	r1, r2, r1
   12528:	sub	r2, r0, #1
   1252c:	b	1253c <__assert_fail@plt+0x16b0>
   12530:	add	r1, r1, #1
   12534:	subs	r2, r2, #1
   12538:	beq	1247c <__assert_fail@plt+0x15f0>
   1253c:	ldrb	r3, [r1]
   12540:	sub	r3, r3, #91	; 0x5b
   12544:	cmp	r3, #33	; 0x21
   12548:	bhi	12530 <__assert_fail@plt+0x16a4>
   1254c:	add	r5, pc, #0
   12550:	ldr	pc, [r5, r3, lsl #2]
   12554:	andeq	r2, r1, r8, lsr r9
   12558:	andeq	r2, r1, r8, lsr r9
   1255c:	andeq	r2, r1, r0, lsr r5
   12560:	andeq	r2, r1, r8, lsr r9
   12564:	andeq	r2, r1, r0, lsr r5
   12568:	andeq	r2, r1, r8, lsr r9
   1256c:	andeq	r2, r1, r0, lsr r5
   12570:	andeq	r2, r1, r0, lsr r5
   12574:	andeq	r2, r1, r0, lsr r5
   12578:	andeq	r2, r1, r0, lsr r5
   1257c:	andeq	r2, r1, r0, lsr r5
   12580:	andeq	r2, r1, r0, lsr r5
   12584:	andeq	r2, r1, r0, lsr r5
   12588:	andeq	r2, r1, r0, lsr r5
   1258c:	andeq	r2, r1, r0, lsr r5
   12590:	andeq	r2, r1, r0, lsr r5
   12594:	andeq	r2, r1, r0, lsr r5
   12598:	andeq	r2, r1, r0, lsr r5
   1259c:	andeq	r2, r1, r0, lsr r5
   125a0:	andeq	r2, r1, r0, lsr r5
   125a4:	andeq	r2, r1, r0, lsr r5
   125a8:	andeq	r2, r1, r0, lsr r5
   125ac:	andeq	r2, r1, r0, lsr r5
   125b0:	andeq	r2, r1, r0, lsr r5
   125b4:	andeq	r2, r1, r0, lsr r5
   125b8:	andeq	r2, r1, r0, lsr r5
   125bc:	andeq	r2, r1, r0, lsr r5
   125c0:	andeq	r2, r1, r0, lsr r5
   125c4:	andeq	r2, r1, r0, lsr r5
   125c8:	andeq	r2, r1, r0, lsr r5
   125cc:	andeq	r2, r1, r0, lsr r5
   125d0:	andeq	r2, r1, r0, lsr r5
   125d4:	andeq	r2, r1, r0, lsr r5
   125d8:	andeq	r2, r1, r8, lsr r9
   125dc:	mov	r8, r0
   125e0:	b	12004 <__assert_fail@plt+0x1178>
   125e4:	ldr	r0, [sp, #32]
   125e8:	cmp	r0, #0
   125ec:	beq	1268c <__assert_fail@plt+0x1800>
   125f0:	add	r0, r7, #2
   125f4:	cmp	r0, lr
   125f8:	bcs	1268c <__assert_fail@plt+0x1800>
   125fc:	add	r1, r7, ip
   12600:	ldrb	r1, [r1, #1]
   12604:	cmp	r1, #63	; 0x3f
   12608:	bne	1268c <__assert_fail@plt+0x1800>
   1260c:	ldrb	r9, [ip, r0]
   12610:	sub	r2, r9, #33	; 0x21
   12614:	cmp	r2, #29
   12618:	bhi	1268c <__assert_fail@plt+0x1800>
   1261c:	movw	r1, #20929	; 0x51c1
   12620:	mov	r3, #1
   12624:	movt	r1, #14336	; 0x3800
   12628:	tst	r1, r3, lsl r2
   1262c:	beq	1268c <__assert_fail@plt+0x1800>
   12630:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12634:	tst	r1, #1
   12638:	bne	1295c <__assert_fail@plt+0x1ad0>
   1263c:	cmp	r8, r4
   12640:	add	r2, r8, #1
   12644:	mov	r6, r9
   12648:	mov	r7, r0
   1264c:	mov	r9, #0
   12650:	movcc	r1, #63	; 0x3f
   12654:	strbcc	r1, [r5, r8]
   12658:	cmp	r2, r4
   1265c:	movcc	r1, #34	; 0x22
   12660:	strbcc	r1, [r5, r2]
   12664:	add	r2, r8, #2
   12668:	cmp	r2, r4
   1266c:	movcc	r1, #34	; 0x22
   12670:	strbcc	r1, [r5, r2]
   12674:	add	r2, r8, #3
   12678:	add	r8, r8, #4
   1267c:	cmp	r2, r4
   12680:	movcc	r1, #63	; 0x3f
   12684:	strbcc	r1, [r5, r2]
   12688:	b	12004 <__assert_fail@plt+0x1178>
   1268c:	mov	r9, #0
   12690:	b	12004 <__assert_fail@plt+0x1178>
   12694:	ldr	lr, [sp, #28]
   12698:	ldr	r4, [fp, #-56]	; 0xffffffc8
   1269c:	add	r1, r2, r7
   126a0:	mov	r2, #0
   126a4:	str	r1, [sp, #44]	; 0x2c
   126a8:	tst	r0, #1
   126ac:	bne	127c8 <__assert_fail@plt+0x193c>
   126b0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   126b4:	tst	r1, #1
   126b8:	bne	12958 <__assert_fail@plt+0x1acc>
   126bc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   126c0:	subs	r2, r1, #2
   126c4:	movwne	r2, #1
   126c8:	orr	r2, r2, r4
   126cc:	tst	r2, #1
   126d0:	bne	12714 <__assert_fail@plt+0x1888>
   126d4:	ldr	r1, [sp, #88]	; 0x58
   126d8:	add	r2, r8, #1
   126dc:	mov	r4, #1
   126e0:	cmp	r8, r1
   126e4:	movcc	r1, #39	; 0x27
   126e8:	strbcc	r1, [r5, r8]
   126ec:	ldr	r1, [sp, #88]	; 0x58
   126f0:	cmp	r2, r1
   126f4:	movcc	r1, #36	; 0x24
   126f8:	strbcc	r1, [r5, r2]
   126fc:	ldr	r1, [sp, #88]	; 0x58
   12700:	add	r2, r8, #2
   12704:	add	r8, r8, #3
   12708:	cmp	r2, r1
   1270c:	movcc	r1, #39	; 0x27
   12710:	strbcc	r1, [r5, r2]
   12714:	ldr	r1, [sp, #88]	; 0x58
   12718:	add	r2, r8, #1
   1271c:	cmp	r8, r1
   12720:	movcc	r1, #92	; 0x5c
   12724:	strbcc	r1, [r5, r8]
   12728:	ldr	r1, [sp, #88]	; 0x58
   1272c:	cmp	r2, r1
   12730:	bcs	12744 <__assert_fail@plt+0x18b8>
   12734:	uxtb	r3, r6
   12738:	mov	r1, #48	; 0x30
   1273c:	orr	r3, r1, r3, lsr #6
   12740:	strb	r3, [r5, r2]
   12744:	ldr	r1, [sp, #88]	; 0x58
   12748:	add	r2, r8, #2
   1274c:	add	r8, r8, #3
   12750:	cmp	r2, r1
   12754:	lsrcc	r3, r6, #3
   12758:	movcc	r1, #6
   1275c:	bficc	r3, r1, #3, #29
   12760:	mov	r1, #6
   12764:	bfi	r6, r1, #3, #29
   12768:	strbcc	r3, [r5, r2]
   1276c:	mov	r2, #1
   12770:	b	127f0 <__assert_fail@plt+0x1964>
   12774:	ldr	r1, [sp, #88]	; 0x58
   12778:	ldr	r5, [fp, #-84]	; 0xffffffac
   1277c:	ldr	r4, [sp, #88]	; 0x58
   12780:	cmp	r8, r1
   12784:	movcc	r1, #39	; 0x27
   12788:	strbcc	r1, [r5, r8]
   1278c:	add	r1, r8, #1
   12790:	add	r8, r8, #2
   12794:	cmp	r1, r4
   12798:	movcc	r4, #39	; 0x27
   1279c:	strbcc	r4, [r5, r1]
   127a0:	mov	r4, #0
   127a4:	ldr	r1, [sp, #88]	; 0x58
   127a8:	cmp	r8, r1
   127ac:	ldr	r1, [sp, #72]	; 0x48
   127b0:	strbcc	r6, [r5, r8]
   127b4:	add	r8, r8, #1
   127b8:	ldrb	r6, [r1, r7]
   127bc:	mov	r7, r3
   127c0:	tst	r0, #1
   127c4:	beq	126b0 <__assert_fail@plt+0x1824>
   127c8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   127cc:	tst	r1, #1
   127d0:	beq	127e8 <__assert_fail@plt+0x195c>
   127d4:	ldr	r1, [sp, #88]	; 0x58
   127d8:	cmp	r8, r1
   127dc:	movcc	r1, #92	; 0x5c
   127e0:	strbcc	r1, [r5, r8]
   127e4:	add	r8, r8, #1
   127e8:	mov	r1, #0
   127ec:	str	r1, [fp, #-52]	; 0xffffffcc
   127f0:	ldr	r1, [sp, #44]	; 0x2c
   127f4:	add	r3, r7, #1
   127f8:	and	sl, r2, #1
   127fc:	cmp	r1, r3
   12800:	bls	12824 <__assert_fail@plt+0x1998>
   12804:	cmp	sl, #0
   12808:	mvn	r5, r4
   1280c:	movwne	sl, #1
   12810:	orr	r5, r5, sl
   12814:	tst	r5, #1
   12818:	beq	12774 <__assert_fail@plt+0x18e8>
   1281c:	ldr	r5, [fp, #-84]	; 0xffffffac
   12820:	b	127a4 <__assert_fail@plt+0x1918>
   12824:	str	r4, [fp, #-56]	; 0xffffffc8
   12828:	ldr	r4, [sp, #88]	; 0x58
   1282c:	cmp	sl, #0
   12830:	movwne	sl, #1
   12834:	cmp	sl, #0
   12838:	beq	12394 <__assert_fail@plt+0x1508>
   1283c:	b	123c8 <__assert_fail@plt+0x153c>
   12840:	mov	r9, #0
   12844:	b	12884 <__assert_fail@plt+0x19f8>
   12848:	ldr	r0, [sp, #24]
   1284c:	mov	r9, #0
   12850:	cmp	lr, r0
   12854:	bls	12884 <__assert_fail@plt+0x19f8>
   12858:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1285c:	ldr	r2, [sp, #44]	; 0x2c
   12860:	add	r0, ip, r7
   12864:	ldrb	r1, [r0, r2]
   12868:	cmp	r1, #0
   1286c:	beq	1234c <__assert_fail@plt+0x14c0>
   12870:	add	r2, r2, #1
   12874:	add	r1, r7, r2
   12878:	cmp	r1, lr
   1287c:	bcc	12864 <__assert_fail@plt+0x19d8>
   12880:	b	1234c <__assert_fail@plt+0x14c0>
   12884:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12888:	ldr	r2, [sp, #44]	; 0x2c
   1288c:	b	1234c <__assert_fail@plt+0x14c0>
   12890:	mov	lr, r7
   12894:	b	1289c <__assert_fail@plt+0x1a10>
   12898:	mvn	lr, #0
   1289c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   128a0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   128a4:	eor	r0, r1, #2
   128a8:	orr	r0, r0, r8
   128ac:	clz	r0, r0
   128b0:	lsr	r0, r0, #5
   128b4:	tst	r2, r0
   128b8:	bne	1295c <__assert_fail@plt+0x1ad0>
   128bc:	subs	r0, r1, #2
   128c0:	movwne	r0, #1
   128c4:	orr	r0, r2, r0
   128c8:	tst	r0, #1
   128cc:	ldreq	r0, [sp, #60]	; 0x3c
   128d0:	eoreq	r0, r0, #1
   128d4:	tsteq	r0, #1
   128d8:	bne	129f0 <__assert_fail@plt+0x1b64>
   128dc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   128e0:	mov	sl, lr
   128e4:	tst	r0, #1
   128e8:	bne	129bc <__assert_fail@plt+0x1b30>
   128ec:	ldr	r6, [sp, #56]	; 0x38
   128f0:	mov	r9, #0
   128f4:	cmp	r6, #0
   128f8:	beq	129e8 <__assert_fail@plt+0x1b5c>
   128fc:	ldr	r0, [sp, #84]	; 0x54
   12900:	mov	r1, #0
   12904:	mov	r7, #2
   12908:	cmp	r4, #0
   1290c:	str	r1, [fp, #-48]	; 0xffffffd0
   12910:	mov	r1, #0
   12914:	str	r1, [fp, #-76]	; 0xffffffb4
   12918:	beq	11ab8 <__assert_fail@plt+0xc2c>
   1291c:	b	129f0 <__assert_fail@plt+0x1b64>
   12920:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12924:	ldr	r1, [fp, #12]
   12928:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1292c:	mov	lr, r4
   12930:	mov	r4, r6
   12934:	b	1297c <__assert_fail@plt+0x1af0>
   12938:	tst	ip, #1
   1293c:	ldr	r5, [fp, #-84]	; 0xffffffac
   12940:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12944:	ldr	r1, [fp, #12]
   12948:	mov	r0, #2
   1294c:	movwne	r0, #4
   12950:	mov	r2, r0
   12954:	b	1297c <__assert_fail@plt+0x1af0>
   12958:	ldr	r4, [sp, #88]	; 0x58
   1295c:	ldr	r1, [sp, #84]	; 0x54
   12960:	mov	r0, #2
   12964:	tst	r1, #1
   12968:	movwne	r0, #4
   1296c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12970:	ldr	r1, [fp, #12]
   12974:	cmp	r2, #2
   12978:	moveq	r2, r0
   1297c:	mov	r0, #0
   12980:	bic	r1, r1, #2
   12984:	str	r2, [sp]
   12988:	mov	r2, ip
   1298c:	mov	r3, lr
   12990:	str	r0, [sp, #8]
   12994:	ldr	r0, [sp, #76]	; 0x4c
   12998:	str	r1, [sp, #4]
   1299c:	mov	r1, r4
   129a0:	str	r0, [sp, #12]
   129a4:	ldr	r0, [sp, #80]	; 0x50
   129a8:	str	r0, [sp, #16]
   129ac:	mov	r0, r5
   129b0:	bl	11a28 <__assert_fail@plt+0xb9c>
   129b4:	mov	r8, r0
   129b8:	b	12a3c <__assert_fail@plt+0x1bb0>
   129bc:	mov	r0, #5
   129c0:	ldr	r1, [sp, #56]	; 0x38
   129c4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   129c8:	mov	r3, sl
   129cc:	str	r0, [sp]
   129d0:	ldr	r0, [fp, #12]
   129d4:	str	r0, [sp, #4]
   129d8:	ldr	r0, [fp, #16]
   129dc:	str	r0, [sp, #8]
   129e0:	ldr	r0, [sp, #76]	; 0x4c
   129e4:	b	129a0 <__assert_fail@plt+0x1b14>
   129e8:	mov	r0, #0
   129ec:	str	r0, [fp, #-76]	; 0xffffffb4
   129f0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   129f4:	cmp	r1, #0
   129f8:	beq	12a30 <__assert_fail@plt+0x1ba4>
   129fc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a00:	tst	r0, #1
   12a04:	bne	12a30 <__assert_fail@plt+0x1ba4>
   12a08:	ldrb	r0, [r1]
   12a0c:	cmp	r0, #0
   12a10:	beq	12a30 <__assert_fail@plt+0x1ba4>
   12a14:	add	r1, r1, #1
   12a18:	cmp	r8, r4
   12a1c:	strbcc	r0, [r5, r8]
   12a20:	add	r8, r8, #1
   12a24:	ldrb	r0, [r1], #1
   12a28:	cmp	r0, #0
   12a2c:	bne	12a18 <__assert_fail@plt+0x1b8c>
   12a30:	cmp	r8, r4
   12a34:	movcc	r0, #0
   12a38:	strbcc	r0, [r5, r8]
   12a3c:	mov	r0, r8
   12a40:	sub	sp, fp, #28
   12a44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a48:	mov	r0, #4
   12a4c:	b	1296c <__assert_fail@plt+0x1ae0>
   12a50:	bl	10e80 <abort@plt>
   12a54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a58:	add	fp, sp, #28
   12a5c:	sub	sp, sp, #28
   12a60:	movw	r5, #20808	; 0x5148
   12a64:	cmp	r2, #0
   12a68:	mov	r4, r1
   12a6c:	mov	r7, r0
   12a70:	str	r0, [sp, #20]
   12a74:	movt	r5, #2
   12a78:	movne	r5, r2
   12a7c:	bl	10dd8 <__errno_location@plt>
   12a80:	mov	sl, r0
   12a84:	ldr	r2, [r5, #40]	; 0x28
   12a88:	ldr	r3, [r5, #44]	; 0x2c
   12a8c:	ldm	r5, {r0, r1}
   12a90:	orr	r8, r1, #1
   12a94:	add	r9, r5, #8
   12a98:	mov	r1, #0
   12a9c:	ldr	r6, [sl]
   12aa0:	stm	sp, {r0, r8, r9}
   12aa4:	mov	r0, #0
   12aa8:	str	r2, [sp, #12]
   12aac:	str	r3, [sp, #16]
   12ab0:	mov	r2, r7
   12ab4:	mov	r3, r4
   12ab8:	str	r6, [sp, #24]
   12abc:	mov	r6, r4
   12ac0:	bl	11a28 <__assert_fail@plt+0xb9c>
   12ac4:	add	r7, r0, #1
   12ac8:	mov	r0, r7
   12acc:	bl	13c48 <__assert_fail@plt+0x2dbc>
   12ad0:	mov	r4, r0
   12ad4:	ldr	r0, [r5]
   12ad8:	ldr	r2, [r5, #44]	; 0x2c
   12adc:	ldr	r1, [r5, #40]	; 0x28
   12ae0:	mov	r3, r6
   12ae4:	stm	sp, {r0, r8, r9}
   12ae8:	str	r2, [sp, #16]
   12aec:	ldr	r2, [sp, #20]
   12af0:	str	r1, [sp, #12]
   12af4:	mov	r0, r4
   12af8:	mov	r1, r7
   12afc:	bl	11a28 <__assert_fail@plt+0xb9c>
   12b00:	ldr	r0, [sp, #24]
   12b04:	str	r0, [sl]
   12b08:	mov	r0, r4
   12b0c:	sub	sp, fp, #28
   12b10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b18:	add	fp, sp, #28
   12b1c:	sub	sp, sp, #36	; 0x24
   12b20:	movw	r8, #20808	; 0x5148
   12b24:	cmp	r3, #0
   12b28:	mov	r4, r2
   12b2c:	str	r2, [sp, #24]
   12b30:	mov	r5, r1
   12b34:	mov	r6, r0
   12b38:	str	r0, [sp, #20]
   12b3c:	movt	r8, #2
   12b40:	movne	r8, r3
   12b44:	bl	10dd8 <__errno_location@plt>
   12b48:	str	r0, [sp, #28]
   12b4c:	ldr	r1, [r8, #40]	; 0x28
   12b50:	ldr	r2, [r8, #44]	; 0x2c
   12b54:	ldr	r7, [r0]
   12b58:	cmp	r4, #0
   12b5c:	add	sl, r8, #8
   12b60:	mov	r0, #0
   12b64:	ldm	r8, {r3, r9}
   12b68:	orreq	r9, r9, #1
   12b6c:	stm	sp, {r3, r9, sl}
   12b70:	str	r1, [sp, #12]
   12b74:	str	r2, [sp, #16]
   12b78:	mov	r1, #0
   12b7c:	mov	r2, r6
   12b80:	mov	r3, r5
   12b84:	str	r7, [sp, #32]
   12b88:	mov	r7, r5
   12b8c:	bl	11a28 <__assert_fail@plt+0xb9c>
   12b90:	add	r4, r0, #1
   12b94:	mov	r5, r0
   12b98:	mov	r0, r4
   12b9c:	bl	13c48 <__assert_fail@plt+0x2dbc>
   12ba0:	mov	r6, r0
   12ba4:	ldr	r0, [r8]
   12ba8:	ldr	r2, [r8, #44]	; 0x2c
   12bac:	ldr	r1, [r8, #40]	; 0x28
   12bb0:	mov	r3, r7
   12bb4:	stm	sp, {r0, r9, sl}
   12bb8:	str	r2, [sp, #16]
   12bbc:	ldr	r2, [sp, #20]
   12bc0:	str	r1, [sp, #12]
   12bc4:	mov	r0, r6
   12bc8:	mov	r1, r4
   12bcc:	bl	11a28 <__assert_fail@plt+0xb9c>
   12bd0:	ldr	r0, [sp, #24]
   12bd4:	ldr	r1, [sp, #32]
   12bd8:	ldr	r2, [sp, #28]
   12bdc:	cmp	r0, #0
   12be0:	str	r1, [r2]
   12be4:	strne	r5, [r0]
   12be8:	mov	r0, r6
   12bec:	sub	sp, fp, #28
   12bf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bf4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12bf8:	add	fp, sp, #24
   12bfc:	movw	r5, #20692	; 0x50d4
   12c00:	movw	r8, #20688	; 0x50d0
   12c04:	movt	r5, #2
   12c08:	movt	r8, #2
   12c0c:	ldr	r0, [r5]
   12c10:	ldr	r4, [r8]
   12c14:	cmp	r0, #2
   12c18:	blt	12c44 <__assert_fail@plt+0x1db8>
   12c1c:	add	r7, r4, #12
   12c20:	mov	r6, #0
   12c24:	ldr	r0, [r7, r6, lsl #3]
   12c28:	bl	14248 <__assert_fail@plt+0x33bc>
   12c2c:	ldr	r1, [r5]
   12c30:	add	r2, r6, #2
   12c34:	add	r0, r6, #1
   12c38:	mov	r6, r0
   12c3c:	cmp	r2, r1
   12c40:	blt	12c24 <__assert_fail@plt+0x1d98>
   12c44:	ldr	r0, [r4, #4]
   12c48:	movw	r9, #20856	; 0x5178
   12c4c:	movw	r7, #20696	; 0x50d8
   12c50:	movt	r9, #2
   12c54:	movt	r7, #2
   12c58:	cmp	r0, r9
   12c5c:	beq	12c6c <__assert_fail@plt+0x1de0>
   12c60:	bl	14248 <__assert_fail@plt+0x33bc>
   12c64:	mov	r0, #256	; 0x100
   12c68:	stm	r7, {r0, r9}
   12c6c:	cmp	r4, r7
   12c70:	beq	12c80 <__assert_fail@plt+0x1df4>
   12c74:	mov	r0, r4
   12c78:	bl	14248 <__assert_fail@plt+0x33bc>
   12c7c:	str	r7, [r8]
   12c80:	mov	r0, #1
   12c84:	str	r0, [r5]
   12c88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12c8c:	movw	r3, #20808	; 0x5148
   12c90:	mvn	r2, #0
   12c94:	movt	r3, #2
   12c98:	b	12c9c <__assert_fail@plt+0x1e10>
   12c9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ca0:	add	fp, sp, #28
   12ca4:	sub	sp, sp, #44	; 0x2c
   12ca8:	mov	r7, r3
   12cac:	str	r2, [sp, #36]	; 0x24
   12cb0:	str	r1, [sp, #32]
   12cb4:	mov	r5, r0
   12cb8:	bl	10dd8 <__errno_location@plt>
   12cbc:	cmp	r5, #0
   12cc0:	bmi	12e30 <__assert_fail@plt+0x1fa4>
   12cc4:	cmn	r5, #-2147483647	; 0x80000001
   12cc8:	beq	12e30 <__assert_fail@plt+0x1fa4>
   12ccc:	movw	r8, #20692	; 0x50d4
   12cd0:	movw	r4, #20688	; 0x50d0
   12cd4:	str	r0, [sp, #28]
   12cd8:	ldr	r0, [r0]
   12cdc:	movt	r8, #2
   12ce0:	movt	r4, #2
   12ce4:	ldr	r1, [r8]
   12ce8:	ldr	r6, [r4]
   12cec:	str	r0, [sp, #24]
   12cf0:	cmp	r1, r5
   12cf4:	ble	12d00 <__assert_fail@plt+0x1e74>
   12cf8:	mov	sl, r6
   12cfc:	b	12d6c <__assert_fail@plt+0x1ee0>
   12d00:	movw	r9, #20696	; 0x50d8
   12d04:	mov	r0, #8
   12d08:	str	r1, [fp, #-32]	; 0xffffffe0
   12d0c:	sub	r1, r5, r1
   12d10:	mvn	r3, #-2147483648	; 0x80000000
   12d14:	movt	r9, #2
   12d18:	str	r0, [sp]
   12d1c:	add	r2, r1, #1
   12d20:	sub	r1, fp, #32
   12d24:	subs	r0, r6, r9
   12d28:	movne	r0, r6
   12d2c:	bl	13e48 <__assert_fail@plt+0x2fbc>
   12d30:	mov	sl, r0
   12d34:	cmp	r6, r9
   12d38:	str	r0, [r4]
   12d3c:	bne	12d48 <__assert_fail@plt+0x1ebc>
   12d40:	ldrd	r0, [r9]
   12d44:	stm	sl, {r0, r1}
   12d48:	ldr	r1, [r8]
   12d4c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12d50:	add	r0, sl, r1, lsl #3
   12d54:	sub	r1, r2, r1
   12d58:	lsl	r2, r1, #3
   12d5c:	mov	r1, #0
   12d60:	bl	10df0 <memset@plt>
   12d64:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d68:	str	r0, [r8]
   12d6c:	mov	r9, sl
   12d70:	ldm	r7, {r0, r1}
   12d74:	orr	r8, r1, #1
   12d78:	add	r1, r7, #8
   12d7c:	ldr	r2, [r7, #40]	; 0x28
   12d80:	ldr	r3, [r7, #44]	; 0x2c
   12d84:	ldr	r6, [r9, r5, lsl #3]!
   12d88:	str	r1, [sp, #20]
   12d8c:	ldr	r4, [r9, #4]!
   12d90:	stm	sp, {r0, r8}
   12d94:	add	r0, sp, #8
   12d98:	stm	r0, {r1, r2, r3}
   12d9c:	ldr	r2, [sp, #32]
   12da0:	ldr	r3, [sp, #36]	; 0x24
   12da4:	mov	r1, r6
   12da8:	mov	r0, r4
   12dac:	bl	11a28 <__assert_fail@plt+0xb9c>
   12db0:	cmp	r6, r0
   12db4:	bhi	12e18 <__assert_fail@plt+0x1f8c>
   12db8:	add	r6, r0, #1
   12dbc:	movw	r0, #20856	; 0x5178
   12dc0:	movt	r0, #2
   12dc4:	str	r6, [sl, r5, lsl #3]
   12dc8:	cmp	r4, r0
   12dcc:	beq	12dd8 <__assert_fail@plt+0x1f4c>
   12dd0:	mov	r0, r4
   12dd4:	bl	14248 <__assert_fail@plt+0x33bc>
   12dd8:	mov	r0, r6
   12ddc:	bl	13c48 <__assert_fail@plt+0x2dbc>
   12de0:	str	r0, [r9]
   12de4:	mov	r4, r0
   12de8:	add	r3, sp, #8
   12dec:	ldr	r0, [r7]
   12df0:	ldr	r1, [r7, #40]	; 0x28
   12df4:	ldr	r2, [r7, #44]	; 0x2c
   12df8:	stm	sp, {r0, r8}
   12dfc:	ldr	r0, [sp, #20]
   12e00:	stm	r3, {r0, r1, r2}
   12e04:	ldr	r2, [sp, #32]
   12e08:	ldr	r3, [sp, #36]	; 0x24
   12e0c:	mov	r0, r4
   12e10:	mov	r1, r6
   12e14:	bl	11a28 <__assert_fail@plt+0xb9c>
   12e18:	ldr	r0, [sp, #28]
   12e1c:	ldr	r1, [sp, #24]
   12e20:	str	r1, [r0]
   12e24:	mov	r0, r4
   12e28:	sub	sp, fp, #28
   12e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e30:	bl	10e80 <abort@plt>
   12e34:	movw	r3, #20808	; 0x5148
   12e38:	movt	r3, #2
   12e3c:	b	12c9c <__assert_fail@plt+0x1e10>
   12e40:	movw	r3, #20808	; 0x5148
   12e44:	mov	r1, r0
   12e48:	mov	r0, #0
   12e4c:	mvn	r2, #0
   12e50:	movt	r3, #2
   12e54:	b	12c9c <__assert_fail@plt+0x1e10>
   12e58:	movw	r3, #20808	; 0x5148
   12e5c:	mov	r2, r1
   12e60:	mov	r1, r0
   12e64:	mov	r0, #0
   12e68:	movt	r3, #2
   12e6c:	b	12c9c <__assert_fail@plt+0x1e10>
   12e70:	push	{fp, lr}
   12e74:	mov	fp, sp
   12e78:	sub	sp, sp, #48	; 0x30
   12e7c:	vmov.i32	q8, #0	; 0x00000000
   12e80:	mov	ip, #32
   12e84:	mov	r3, sp
   12e88:	mov	lr, r2
   12e8c:	cmp	r1, #10
   12e90:	add	r2, r3, #16
   12e94:	vst1.64	{d16-d17}, [r3], ip
   12e98:	vst1.64	{d16-d17}, [r2]
   12e9c:	vst1.64	{d16-d17}, [r3]
   12ea0:	beq	12ec0 <__assert_fail@plt+0x2034>
   12ea4:	str	r1, [sp]
   12ea8:	mov	r3, sp
   12eac:	mov	r1, lr
   12eb0:	mvn	r2, #0
   12eb4:	bl	12c9c <__assert_fail@plt+0x1e10>
   12eb8:	mov	sp, fp
   12ebc:	pop	{fp, pc}
   12ec0:	bl	10e80 <abort@plt>
   12ec4:	push	{r4, sl, fp, lr}
   12ec8:	add	fp, sp, #8
   12ecc:	sub	sp, sp, #48	; 0x30
   12ed0:	vmov.i32	q8, #0	; 0x00000000
   12ed4:	mov	ip, r3
   12ed8:	mov	r3, sp
   12edc:	mov	lr, #32
   12ee0:	cmp	r1, #10
   12ee4:	add	r4, r3, #16
   12ee8:	vst1.64	{d16-d17}, [r3], lr
   12eec:	vst1.64	{d16-d17}, [r4]
   12ef0:	vst1.64	{d16-d17}, [r3]
   12ef4:	beq	12f14 <__assert_fail@plt+0x2088>
   12ef8:	str	r1, [sp]
   12efc:	mov	r1, r2
   12f00:	mov	r3, sp
   12f04:	mov	r2, ip
   12f08:	bl	12c9c <__assert_fail@plt+0x1e10>
   12f0c:	sub	sp, fp, #8
   12f10:	pop	{r4, sl, fp, pc}
   12f14:	bl	10e80 <abort@plt>
   12f18:	push	{fp, lr}
   12f1c:	mov	fp, sp
   12f20:	sub	sp, sp, #48	; 0x30
   12f24:	vmov.i32	q8, #0	; 0x00000000
   12f28:	mov	r3, sp
   12f2c:	mov	ip, #32
   12f30:	cmp	r0, #10
   12f34:	add	r2, r3, #16
   12f38:	vst1.64	{d16-d17}, [r3], ip
   12f3c:	vst1.64	{d16-d17}, [r2]
   12f40:	vst1.64	{d16-d17}, [r3]
   12f44:	beq	12f64 <__assert_fail@plt+0x20d8>
   12f48:	str	r0, [sp]
   12f4c:	mov	r3, sp
   12f50:	mov	r0, #0
   12f54:	mvn	r2, #0
   12f58:	bl	12c9c <__assert_fail@plt+0x1e10>
   12f5c:	mov	sp, fp
   12f60:	pop	{fp, pc}
   12f64:	bl	10e80 <abort@plt>
   12f68:	push	{fp, lr}
   12f6c:	mov	fp, sp
   12f70:	sub	sp, sp, #48	; 0x30
   12f74:	vmov.i32	q8, #0	; 0x00000000
   12f78:	mov	r3, sp
   12f7c:	mov	ip, #32
   12f80:	cmp	r0, #10
   12f84:	add	lr, r3, #16
   12f88:	vst1.64	{d16-d17}, [r3], ip
   12f8c:	vst1.64	{d16-d17}, [lr]
   12f90:	vst1.64	{d16-d17}, [r3]
   12f94:	beq	12fb0 <__assert_fail@plt+0x2124>
   12f98:	str	r0, [sp]
   12f9c:	mov	r3, sp
   12fa0:	mov	r0, #0
   12fa4:	bl	12c9c <__assert_fail@plt+0x1e10>
   12fa8:	mov	sp, fp
   12fac:	pop	{fp, pc}
   12fb0:	bl	10e80 <abort@plt>
   12fb4:	push	{r4, sl, fp, lr}
   12fb8:	add	fp, sp, #8
   12fbc:	sub	sp, sp, #48	; 0x30
   12fc0:	mov	lr, r0
   12fc4:	movw	r0, #20808	; 0x5148
   12fc8:	mov	ip, r1
   12fcc:	mov	r1, #32
   12fd0:	mov	r4, #1
   12fd4:	movt	r0, #2
   12fd8:	add	r3, r0, #16
   12fdc:	vld1.64	{d16-d17}, [r0], r1
   12fe0:	vld1.64	{d20-d21}, [r0]
   12fe4:	vld1.64	{d18-d19}, [r3]
   12fe8:	mov	r3, sp
   12fec:	add	r0, r3, #32
   12ff0:	add	r1, r3, #16
   12ff4:	vst1.64	{d20-d21}, [r0]
   12ff8:	mov	r0, #28
   12ffc:	vst1.64	{d18-d19}, [r1]
   13000:	mov	r1, r3
   13004:	and	r0, r0, r2, lsr #3
   13008:	and	r2, r2, #31
   1300c:	vst1.64	{d16-d17}, [r1], r0
   13010:	ldr	r0, [r1, #8]
   13014:	bic	r4, r4, r0, lsr r2
   13018:	eor	r0, r0, r4, lsl r2
   1301c:	mov	r2, ip
   13020:	str	r0, [r1, #8]
   13024:	mov	r0, #0
   13028:	mov	r1, lr
   1302c:	bl	12c9c <__assert_fail@plt+0x1e10>
   13030:	sub	sp, fp, #8
   13034:	pop	{r4, sl, fp, pc}
   13038:	push	{fp, lr}
   1303c:	mov	fp, sp
   13040:	sub	sp, sp, #48	; 0x30
   13044:	mov	ip, r0
   13048:	movw	r0, #20808	; 0x5148
   1304c:	mov	r2, #32
   13050:	movt	r0, #2
   13054:	add	r3, r0, #16
   13058:	vld1.64	{d16-d17}, [r0], r2
   1305c:	vld1.64	{d20-d21}, [r0]
   13060:	vld1.64	{d18-d19}, [r3]
   13064:	mov	r3, sp
   13068:	add	r0, r3, #32
   1306c:	add	r2, r3, #16
   13070:	vst1.64	{d20-d21}, [r0]
   13074:	mov	r0, #28
   13078:	vst1.64	{d18-d19}, [r2]
   1307c:	mov	r2, r3
   13080:	and	r0, r0, r1, lsr #3
   13084:	and	r1, r1, #31
   13088:	vst1.64	{d16-d17}, [r2], r0
   1308c:	mov	r0, #1
   13090:	ldr	lr, [r2, #8]
   13094:	bic	r0, r0, lr, lsr r1
   13098:	eor	r0, lr, r0, lsl r1
   1309c:	mov	r1, ip
   130a0:	str	r0, [r2, #8]
   130a4:	mov	r0, #0
   130a8:	mvn	r2, #0
   130ac:	bl	12c9c <__assert_fail@plt+0x1e10>
   130b0:	mov	sp, fp
   130b4:	pop	{fp, pc}
   130b8:	push	{fp, lr}
   130bc:	mov	fp, sp
   130c0:	sub	sp, sp, #48	; 0x30
   130c4:	mov	r1, r0
   130c8:	movw	r0, #20808	; 0x5148
   130cc:	mov	r3, #32
   130d0:	movt	r0, #2
   130d4:	add	r2, r0, #16
   130d8:	vld1.64	{d16-d17}, [r0], r3
   130dc:	mov	r3, sp
   130e0:	vld1.64	{d18-d19}, [r2]
   130e4:	vld1.64	{d20-d21}, [r0]
   130e8:	add	r2, r3, #16
   130ec:	add	r0, r3, #32
   130f0:	vst1.64	{d18-d19}, [r2]
   130f4:	vst1.64	{d20-d21}, [r0]
   130f8:	mov	r0, #12
   130fc:	mov	r2, r3
   13100:	vst1.64	{d16-d17}, [r2], r0
   13104:	ldr	r0, [r2]
   13108:	orr	r0, r0, #67108864	; 0x4000000
   1310c:	str	r0, [r2]
   13110:	mov	r0, #0
   13114:	mvn	r2, #0
   13118:	bl	12c9c <__assert_fail@plt+0x1e10>
   1311c:	mov	sp, fp
   13120:	pop	{fp, pc}
   13124:	push	{fp, lr}
   13128:	mov	fp, sp
   1312c:	sub	sp, sp, #48	; 0x30
   13130:	mov	ip, r1
   13134:	mov	r1, r0
   13138:	movw	r0, #20808	; 0x5148
   1313c:	mov	r2, #32
   13140:	movt	r0, #2
   13144:	add	r3, r0, #16
   13148:	vld1.64	{d16-d17}, [r0], r2
   1314c:	vld1.64	{d18-d19}, [r3]
   13150:	vld1.64	{d20-d21}, [r0]
   13154:	mov	r3, sp
   13158:	add	r2, r3, #16
   1315c:	add	r0, r3, #32
   13160:	vst1.64	{d18-d19}, [r2]
   13164:	vst1.64	{d20-d21}, [r0]
   13168:	mov	r0, #12
   1316c:	mov	r2, r3
   13170:	vst1.64	{d16-d17}, [r2], r0
   13174:	ldr	r0, [r2]
   13178:	orr	r0, r0, #67108864	; 0x4000000
   1317c:	str	r0, [r2]
   13180:	mov	r0, #0
   13184:	mov	r2, ip
   13188:	bl	12c9c <__assert_fail@plt+0x1e10>
   1318c:	mov	sp, fp
   13190:	pop	{fp, pc}
   13194:	push	{r4, sl, fp, lr}
   13198:	add	fp, sp, #8
   1319c:	sub	sp, sp, #96	; 0x60
   131a0:	vmov.i32	q8, #0	; 0x00000000
   131a4:	mov	ip, r2
   131a8:	mov	r2, sp
   131ac:	mov	r4, #28
   131b0:	cmp	r1, #10
   131b4:	mov	r3, r2
   131b8:	add	lr, r2, #16
   131bc:	vst1.64	{d16-d17}, [r3], r4
   131c0:	vst1.64	{d16-d17}, [lr]
   131c4:	vst1.32	{d16-d17}, [r3]
   131c8:	beq	13218 <__assert_fail@plt+0x238c>
   131cc:	vld1.64	{d16-d17}, [r2], r4
   131d0:	vld1.64	{d18-d19}, [lr]
   131d4:	add	r3, sp, #48	; 0x30
   131d8:	vld1.32	{d20-d21}, [r2]
   131dc:	add	r2, r3, #20
   131e0:	add	r4, r3, #4
   131e4:	vst1.32	{d18-d19}, [r2]
   131e8:	add	r2, r3, #32
   131ec:	vst1.32	{d16-d17}, [r4]
   131f0:	vst1.32	{d20-d21}, [r2]
   131f4:	str	r1, [sp, #48]	; 0x30
   131f8:	mvn	r2, #0
   131fc:	ldr	r1, [sp, #60]	; 0x3c
   13200:	orr	r1, r1, #67108864	; 0x4000000
   13204:	str	r1, [sp, #60]	; 0x3c
   13208:	mov	r1, ip
   1320c:	bl	12c9c <__assert_fail@plt+0x1e10>
   13210:	sub	sp, fp, #8
   13214:	pop	{r4, sl, fp, pc}
   13218:	bl	10e80 <abort@plt>
   1321c:	push	{r4, r5, r6, sl, fp, lr}
   13220:	add	fp, sp, #16
   13224:	sub	sp, sp, #48	; 0x30
   13228:	mov	ip, r3
   1322c:	movw	r3, #20808	; 0x5148
   13230:	mov	r6, #32
   13234:	cmp	r1, #0
   13238:	mov	r4, sp
   1323c:	movt	r3, #2
   13240:	cmpne	r2, #0
   13244:	add	r5, r4, #16
   13248:	add	lr, r3, #16
   1324c:	vld1.64	{d16-d17}, [r3], r6
   13250:	vld1.64	{d18-d19}, [lr]
   13254:	vld1.64	{d20-d21}, [r3]
   13258:	mov	r3, #10
   1325c:	vst1.64	{d16-d17}, [r4], r6
   13260:	vst1.64	{d18-d19}, [r5]
   13264:	vst1.64	{d20-d21}, [r4]
   13268:	str	r3, [sp]
   1326c:	bne	13274 <__assert_fail@plt+0x23e8>
   13270:	bl	10e80 <abort@plt>
   13274:	str	r2, [sp, #44]	; 0x2c
   13278:	str	r1, [sp, #40]	; 0x28
   1327c:	mov	r3, sp
   13280:	mov	r1, ip
   13284:	mvn	r2, #0
   13288:	bl	12c9c <__assert_fail@plt+0x1e10>
   1328c:	sub	sp, fp, #16
   13290:	pop	{r4, r5, r6, sl, fp, pc}
   13294:	push	{r4, r5, r6, sl, fp, lr}
   13298:	add	fp, sp, #16
   1329c:	sub	sp, sp, #48	; 0x30
   132a0:	mov	lr, r3
   132a4:	movw	r3, #20808	; 0x5148
   132a8:	mov	r6, #32
   132ac:	cmp	r1, #0
   132b0:	mov	r4, sp
   132b4:	movt	r3, #2
   132b8:	cmpne	r2, #0
   132bc:	add	r5, r4, #16
   132c0:	add	ip, r3, #16
   132c4:	vld1.64	{d16-d17}, [r3], r6
   132c8:	vld1.64	{d18-d19}, [ip]
   132cc:	vld1.64	{d20-d21}, [r3]
   132d0:	mov	r3, #10
   132d4:	vst1.64	{d16-d17}, [r4], r6
   132d8:	vst1.64	{d18-d19}, [r5]
   132dc:	vst1.64	{d20-d21}, [r4]
   132e0:	str	r3, [sp]
   132e4:	bne	132ec <__assert_fail@plt+0x2460>
   132e8:	bl	10e80 <abort@plt>
   132ec:	ldr	ip, [fp, #8]
   132f0:	str	r2, [sp, #44]	; 0x2c
   132f4:	str	r1, [sp, #40]	; 0x28
   132f8:	mov	r3, sp
   132fc:	mov	r1, lr
   13300:	mov	r2, ip
   13304:	bl	12c9c <__assert_fail@plt+0x1e10>
   13308:	sub	sp, fp, #16
   1330c:	pop	{r4, r5, r6, sl, fp, pc}
   13310:	push	{r4, sl, fp, lr}
   13314:	add	fp, sp, #8
   13318:	sub	sp, sp, #48	; 0x30
   1331c:	movw	r3, #20808	; 0x5148
   13320:	mov	lr, #32
   13324:	mov	ip, r2
   13328:	cmp	r0, #0
   1332c:	movt	r3, #2
   13330:	cmpne	r1, #0
   13334:	add	r2, r3, #16
   13338:	vld1.64	{d16-d17}, [r3], lr
   1333c:	vld1.64	{d20-d21}, [r3]
   13340:	vld1.64	{d18-d19}, [r2]
   13344:	mov	r2, sp
   13348:	add	r4, r2, #16
   1334c:	vst1.64	{d16-d17}, [r2], lr
   13350:	vst1.64	{d20-d21}, [r2]
   13354:	mov	r2, #10
   13358:	vst1.64	{d18-d19}, [r4]
   1335c:	str	r2, [sp]
   13360:	bne	13368 <__assert_fail@plt+0x24dc>
   13364:	bl	10e80 <abort@plt>
   13368:	str	r1, [sp, #44]	; 0x2c
   1336c:	str	r0, [sp, #40]	; 0x28
   13370:	mov	r3, sp
   13374:	mov	r0, #0
   13378:	mov	r1, ip
   1337c:	mvn	r2, #0
   13380:	bl	12c9c <__assert_fail@plt+0x1e10>
   13384:	sub	sp, fp, #8
   13388:	pop	{r4, sl, fp, pc}
   1338c:	push	{r4, r5, fp, lr}
   13390:	add	fp, sp, #8
   13394:	sub	sp, sp, #48	; 0x30
   13398:	mov	ip, r3
   1339c:	movw	r3, #20808	; 0x5148
   133a0:	mov	r4, #32
   133a4:	mov	lr, r2
   133a8:	cmp	r0, #0
   133ac:	movt	r3, #2
   133b0:	cmpne	r1, #0
   133b4:	add	r2, r3, #16
   133b8:	vld1.64	{d16-d17}, [r3], r4
   133bc:	vld1.64	{d20-d21}, [r3]
   133c0:	vld1.64	{d18-d19}, [r2]
   133c4:	mov	r2, sp
   133c8:	add	r5, r2, #16
   133cc:	vst1.64	{d16-d17}, [r2], r4
   133d0:	vst1.64	{d20-d21}, [r2]
   133d4:	mov	r2, #10
   133d8:	vst1.64	{d18-d19}, [r5]
   133dc:	str	r2, [sp]
   133e0:	bne	133e8 <__assert_fail@plt+0x255c>
   133e4:	bl	10e80 <abort@plt>
   133e8:	str	r1, [sp, #44]	; 0x2c
   133ec:	str	r0, [sp, #40]	; 0x28
   133f0:	mov	r3, sp
   133f4:	mov	r0, #0
   133f8:	mov	r1, lr
   133fc:	mov	r2, ip
   13400:	bl	12c9c <__assert_fail@plt+0x1e10>
   13404:	sub	sp, fp, #8
   13408:	pop	{r4, r5, fp, pc}
   1340c:	movw	r3, #20704	; 0x50e0
   13410:	movt	r3, #2
   13414:	b	12c9c <__assert_fail@plt+0x1e10>
   13418:	movw	r3, #20704	; 0x50e0
   1341c:	mov	r2, r1
   13420:	mov	r1, r0
   13424:	mov	r0, #0
   13428:	movt	r3, #2
   1342c:	b	12c9c <__assert_fail@plt+0x1e10>
   13430:	movw	r3, #20704	; 0x50e0
   13434:	mvn	r2, #0
   13438:	movt	r3, #2
   1343c:	b	12c9c <__assert_fail@plt+0x1e10>
   13440:	movw	r3, #20704	; 0x50e0
   13444:	mov	r1, r0
   13448:	mov	r0, #0
   1344c:	mvn	r2, #0
   13450:	movt	r3, #2
   13454:	b	12c9c <__assert_fail@plt+0x1e10>
   13458:	push	{r4, r5, fp, lr}
   1345c:	add	fp, sp, #8
   13460:	mov	r5, r0
   13464:	mov	r4, r1
   13468:	mov	r0, #0
   1346c:	mov	r2, #5
   13470:	mov	r1, r5
   13474:	bl	10cf4 <dcgettext@plt>
   13478:	cmp	r0, r5
   1347c:	popne	{r4, r5, fp, pc}
   13480:	bl	1452c <__assert_fail@plt+0x36a0>
   13484:	ldrb	r1, [r0]
   13488:	and	r1, r1, #223	; 0xdf
   1348c:	cmp	r1, #71	; 0x47
   13490:	beq	134f8 <__assert_fail@plt+0x266c>
   13494:	cmp	r1, #85	; 0x55
   13498:	bne	13550 <__assert_fail@plt+0x26c4>
   1349c:	ldrb	r1, [r0, #1]
   134a0:	and	r1, r1, #223	; 0xdf
   134a4:	cmp	r1, #84	; 0x54
   134a8:	bne	13550 <__assert_fail@plt+0x26c4>
   134ac:	ldrb	r1, [r0, #2]
   134b0:	and	r1, r1, #223	; 0xdf
   134b4:	cmp	r1, #70	; 0x46
   134b8:	bne	13550 <__assert_fail@plt+0x26c4>
   134bc:	ldrb	r1, [r0, #3]
   134c0:	cmp	r1, #45	; 0x2d
   134c4:	bne	13550 <__assert_fail@plt+0x26c4>
   134c8:	ldrb	r1, [r0, #4]
   134cc:	cmp	r1, #56	; 0x38
   134d0:	bne	13550 <__assert_fail@plt+0x26c4>
   134d4:	ldrb	r0, [r0, #5]
   134d8:	cmp	r0, #0
   134dc:	bne	13550 <__assert_fail@plt+0x26c4>
   134e0:	ldrb	r1, [r5]
   134e4:	movw	r2, #19204	; 0x4b04
   134e8:	movw	r0, #19208	; 0x4b08
   134ec:	movt	r2, #1
   134f0:	movt	r0, #1
   134f4:	b	13580 <__assert_fail@plt+0x26f4>
   134f8:	ldrb	r1, [r0, #1]
   134fc:	and	r1, r1, #223	; 0xdf
   13500:	cmp	r1, #66	; 0x42
   13504:	bne	13550 <__assert_fail@plt+0x26c4>
   13508:	ldrb	r1, [r0, #2]
   1350c:	cmp	r1, #49	; 0x31
   13510:	bne	13550 <__assert_fail@plt+0x26c4>
   13514:	ldrb	r1, [r0, #3]
   13518:	cmp	r1, #56	; 0x38
   1351c:	bne	13550 <__assert_fail@plt+0x26c4>
   13520:	ldrb	r1, [r0, #4]
   13524:	cmp	r1, #48	; 0x30
   13528:	bne	13550 <__assert_fail@plt+0x26c4>
   1352c:	ldrb	r1, [r0, #5]
   13530:	cmp	r1, #51	; 0x33
   13534:	bne	13550 <__assert_fail@plt+0x26c4>
   13538:	ldrb	r1, [r0, #6]
   1353c:	cmp	r1, #48	; 0x30
   13540:	bne	13550 <__assert_fail@plt+0x26c4>
   13544:	ldrb	r0, [r0, #7]
   13548:	cmp	r0, #0
   1354c:	beq	1356c <__assert_fail@plt+0x26e0>
   13550:	movw	r1, #19198	; 0x4afe
   13554:	movw	r0, #19202	; 0x4b02
   13558:	cmp	r4, #9
   1355c:	movt	r1, #1
   13560:	movt	r0, #1
   13564:	moveq	r0, r1
   13568:	pop	{r4, r5, fp, pc}
   1356c:	ldrb	r1, [r5]
   13570:	movw	r2, #19212	; 0x4b0c
   13574:	movw	r0, #19216	; 0x4b10
   13578:	movt	r2, #1
   1357c:	movt	r0, #1
   13580:	cmp	r1, #96	; 0x60
   13584:	moveq	r0, r2
   13588:	pop	{r4, r5, fp, pc}
   1358c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13590:	add	fp, sp, #24
   13594:	sub	sp, sp, #32
   13598:	ldr	r7, [fp, #12]
   1359c:	ldr	r6, [fp, #8]
   135a0:	mov	r4, r2
   135a4:	mov	r5, r0
   135a8:	cmp	r1, #0
   135ac:	beq	135cc <__assert_fail@plt+0x2740>
   135b0:	mov	r2, r1
   135b4:	movw	r1, #19304	; 0x4b68
   135b8:	str	r3, [sp]
   135bc:	mov	r0, r5
   135c0:	mov	r3, r4
   135c4:	movt	r1, #1
   135c8:	b	135dc <__assert_fail@plt+0x2750>
   135cc:	movw	r1, #19316	; 0x4b74
   135d0:	mov	r0, r5
   135d4:	mov	r2, r4
   135d8:	movt	r1, #1
   135dc:	bl	10dcc <fprintf@plt>
   135e0:	movw	r1, #19323	; 0x4b7b
   135e4:	mov	r0, #0
   135e8:	mov	r2, #5
   135ec:	movt	r1, #1
   135f0:	bl	10cf4 <dcgettext@plt>
   135f4:	movw	r1, #20019	; 0x4e33
   135f8:	mov	r2, r0
   135fc:	mov	r0, r5
   13600:	movw	r3, #2022	; 0x7e6
   13604:	movt	r1, #1
   13608:	bl	10dcc <fprintf@plt>
   1360c:	mov	r0, #10
   13610:	mov	r1, r5
   13614:	bl	10e44 <fputc@plt>
   13618:	movw	r1, #19327	; 0x4b7f
   1361c:	mov	r0, #0
   13620:	mov	r2, #5
   13624:	movt	r1, #1
   13628:	bl	10cf4 <dcgettext@plt>
   1362c:	movw	r2, #19498	; 0x4c2a
   13630:	mov	r1, r0
   13634:	mov	r0, r5
   13638:	movt	r2, #1
   1363c:	bl	10dcc <fprintf@plt>
   13640:	mov	r0, #10
   13644:	mov	r1, r5
   13648:	bl	10e44 <fputc@plt>
   1364c:	cmp	r7, #9
   13650:	bhi	1368c <__assert_fail@plt+0x2800>
   13654:	add	r0, pc, #0
   13658:	ldr	pc, [r0, r7, lsl #2]
   1365c:	andeq	r3, r1, r4, lsl #13
   13660:	muleq	r1, r8, r6
   13664:	andeq	r3, r1, r4, asr #13
   13668:	strdeq	r3, [r1], -r0
   1366c:	andeq	r3, r1, r8, lsl r7
   13670:	andeq	r3, r1, r4, asr #14
   13674:	andeq	r3, r1, r8, ror r7
   13678:			; <UNDEFINED> instruction: 0x000137b8
   1367c:	andeq	r3, r1, r4, asr r8
   13680:	strdeq	r3, [r1], -ip
   13684:	sub	sp, fp, #24
   13688:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1368c:	movw	r1, #19851	; 0x4d8b
   13690:	movt	r1, #1
   13694:	b	13804 <__assert_fail@plt+0x2978>
   13698:	movw	r1, #19532	; 0x4c4c
   1369c:	mov	r0, #0
   136a0:	mov	r2, #5
   136a4:	movt	r1, #1
   136a8:	bl	10cf4 <dcgettext@plt>
   136ac:	ldr	r2, [r6]
   136b0:	mov	r1, r0
   136b4:	mov	r0, r5
   136b8:	sub	sp, fp, #24
   136bc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   136c0:	b	10dcc <fprintf@plt>
   136c4:	movw	r1, #19548	; 0x4c5c
   136c8:	mov	r0, #0
   136cc:	mov	r2, #5
   136d0:	movt	r1, #1
   136d4:	bl	10cf4 <dcgettext@plt>
   136d8:	ldm	r6, {r2, r3}
   136dc:	mov	r1, r0
   136e0:	mov	r0, r5
   136e4:	sub	sp, fp, #24
   136e8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   136ec:	b	10dcc <fprintf@plt>
   136f0:	movw	r1, #19571	; 0x4c73
   136f4:	mov	r0, #0
   136f8:	mov	r2, #5
   136fc:	movt	r1, #1
   13700:	bl	10cf4 <dcgettext@plt>
   13704:	mov	r1, r0
   13708:	ldr	r0, [r6, #8]
   1370c:	ldm	r6, {r2, r3}
   13710:	str	r0, [sp]
   13714:	b	137b0 <__assert_fail@plt+0x2924>
   13718:	movw	r1, #19599	; 0x4c8f
   1371c:	mov	r0, #0
   13720:	mov	r2, #5
   13724:	movt	r1, #1
   13728:	bl	10cf4 <dcgettext@plt>
   1372c:	mov	r1, r0
   13730:	ldr	r0, [r6, #8]
   13734:	ldm	r6, {r2, r3}
   13738:	ldr	r7, [r6, #12]
   1373c:	stm	sp, {r0, r7}
   13740:	b	137b0 <__assert_fail@plt+0x2924>
   13744:	movw	r1, #19631	; 0x4caf
   13748:	mov	r0, #0
   1374c:	mov	r2, #5
   13750:	movt	r1, #1
   13754:	bl	10cf4 <dcgettext@plt>
   13758:	mov	r1, r0
   1375c:	ldm	r6, {r2, r3}
   13760:	ldr	r0, [r6, #8]
   13764:	ldr	r7, [r6, #12]
   13768:	ldr	r6, [r6, #16]
   1376c:	stm	sp, {r0, r7}
   13770:	str	r6, [sp, #8]
   13774:	b	137b0 <__assert_fail@plt+0x2924>
   13778:	movw	r1, #19667	; 0x4cd3
   1377c:	mov	r0, #0
   13780:	mov	r2, #5
   13784:	movt	r1, #1
   13788:	bl	10cf4 <dcgettext@plt>
   1378c:	mov	r1, r0
   13790:	ldm	r6, {r2, r3}
   13794:	ldr	r0, [r6, #8]
   13798:	ldr	r7, [r6, #12]
   1379c:	ldr	r4, [r6, #16]
   137a0:	ldr	r6, [r6, #20]
   137a4:	stm	sp, {r0, r7}
   137a8:	str	r4, [sp, #8]
   137ac:	str	r6, [sp, #12]
   137b0:	mov	r0, r5
   137b4:	b	138a4 <__assert_fail@plt+0x2a18>
   137b8:	movw	r1, #19707	; 0x4cfb
   137bc:	mov	r0, #0
   137c0:	mov	r2, #5
   137c4:	movt	r1, #1
   137c8:	bl	10cf4 <dcgettext@plt>
   137cc:	mov	ip, r0
   137d0:	ldm	r6, {r2, r3}
   137d4:	ldr	r0, [r6, #8]
   137d8:	ldr	r7, [r6, #12]
   137dc:	ldr	r4, [r6, #16]
   137e0:	ldr	r1, [r6, #20]
   137e4:	ldr	r6, [r6, #24]
   137e8:	stm	sp, {r0, r7}
   137ec:	str	r4, [sp, #8]
   137f0:	str	r1, [sp, #12]
   137f4:	str	r6, [sp, #16]
   137f8:	b	1389c <__assert_fail@plt+0x2a10>
   137fc:	movw	r1, #19799	; 0x4d57
   13800:	movt	r1, #1
   13804:	mov	r0, #0
   13808:	mov	r2, #5
   1380c:	bl	10cf4 <dcgettext@plt>
   13810:	mov	ip, r0
   13814:	ldr	r2, [r6]
   13818:	ldr	r3, [r6, #4]
   1381c:	ldr	r0, [r6, #8]
   13820:	ldr	r7, [r6, #12]
   13824:	ldr	r4, [r6, #16]
   13828:	ldr	r1, [r6, #20]
   1382c:	ldr	lr, [r6, #24]
   13830:	ldr	r8, [r6, #28]
   13834:	ldr	r6, [r6, #32]
   13838:	stm	sp, {r0, r7}
   1383c:	str	r4, [sp, #8]
   13840:	str	r1, [sp, #12]
   13844:	str	lr, [sp, #16]
   13848:	str	r8, [sp, #20]
   1384c:	str	r6, [sp, #24]
   13850:	b	1389c <__assert_fail@plt+0x2a10>
   13854:	movw	r1, #19751	; 0x4d27
   13858:	mov	r0, #0
   1385c:	mov	r2, #5
   13860:	movt	r1, #1
   13864:	bl	10cf4 <dcgettext@plt>
   13868:	mov	ip, r0
   1386c:	ldm	r6, {r2, r3}
   13870:	ldr	r0, [r6, #8]
   13874:	ldr	r7, [r6, #12]
   13878:	ldr	r4, [r6, #16]
   1387c:	ldr	r1, [r6, #20]
   13880:	ldr	lr, [r6, #24]
   13884:	ldr	r6, [r6, #28]
   13888:	stm	sp, {r0, r7}
   1388c:	str	r4, [sp, #8]
   13890:	str	r1, [sp, #12]
   13894:	str	lr, [sp, #16]
   13898:	str	r6, [sp, #20]
   1389c:	mov	r0, r5
   138a0:	mov	r1, ip
   138a4:	bl	10dcc <fprintf@plt>
   138a8:	sub	sp, fp, #24
   138ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   138b0:	push	{r4, sl, fp, lr}
   138b4:	add	fp, sp, #8
   138b8:	sub	sp, sp, #8
   138bc:	ldr	ip, [fp, #8]
   138c0:	mov	lr, #0
   138c4:	ldr	r4, [ip, lr, lsl #2]
   138c8:	add	lr, lr, #1
   138cc:	cmp	r4, #0
   138d0:	bne	138c4 <__assert_fail@plt+0x2a38>
   138d4:	sub	r4, lr, #1
   138d8:	str	ip, [sp]
   138dc:	str	r4, [sp, #4]
   138e0:	bl	1358c <__assert_fail@plt+0x2700>
   138e4:	sub	sp, fp, #8
   138e8:	pop	{r4, sl, fp, pc}
   138ec:	push	{fp, lr}
   138f0:	mov	fp, sp
   138f4:	sub	sp, sp, #48	; 0x30
   138f8:	ldr	ip, [fp, #8]
   138fc:	ldr	lr, [ip]
   13900:	cmp	lr, #0
   13904:	str	lr, [sp, #8]
   13908:	beq	139a4 <__assert_fail@plt+0x2b18>
   1390c:	ldr	lr, [ip, #4]
   13910:	cmp	lr, #0
   13914:	str	lr, [sp, #12]
   13918:	beq	139ac <__assert_fail@plt+0x2b20>
   1391c:	ldr	lr, [ip, #8]
   13920:	cmp	lr, #0
   13924:	str	lr, [sp, #16]
   13928:	beq	139b4 <__assert_fail@plt+0x2b28>
   1392c:	ldr	lr, [ip, #12]
   13930:	cmp	lr, #0
   13934:	str	lr, [sp, #20]
   13938:	beq	139bc <__assert_fail@plt+0x2b30>
   1393c:	ldr	lr, [ip, #16]
   13940:	cmp	lr, #0
   13944:	str	lr, [sp, #24]
   13948:	beq	139c4 <__assert_fail@plt+0x2b38>
   1394c:	ldr	lr, [ip, #20]
   13950:	cmp	lr, #0
   13954:	str	lr, [sp, #28]
   13958:	beq	139cc <__assert_fail@plt+0x2b40>
   1395c:	ldr	lr, [ip, #24]
   13960:	cmp	lr, #0
   13964:	str	lr, [sp, #32]
   13968:	beq	139d4 <__assert_fail@plt+0x2b48>
   1396c:	ldr	lr, [ip, #28]
   13970:	cmp	lr, #0
   13974:	str	lr, [sp, #36]	; 0x24
   13978:	beq	139dc <__assert_fail@plt+0x2b50>
   1397c:	ldr	lr, [ip, #32]
   13980:	cmp	lr, #0
   13984:	str	lr, [sp, #40]	; 0x28
   13988:	beq	139e4 <__assert_fail@plt+0x2b58>
   1398c:	ldr	lr, [ip, #36]	; 0x24
   13990:	mov	ip, #10
   13994:	cmp	lr, #0
   13998:	str	lr, [sp, #44]	; 0x2c
   1399c:	movweq	ip, #9
   139a0:	b	139e8 <__assert_fail@plt+0x2b5c>
   139a4:	mov	ip, #0
   139a8:	b	139e8 <__assert_fail@plt+0x2b5c>
   139ac:	mov	ip, #1
   139b0:	b	139e8 <__assert_fail@plt+0x2b5c>
   139b4:	mov	ip, #2
   139b8:	b	139e8 <__assert_fail@plt+0x2b5c>
   139bc:	mov	ip, #3
   139c0:	b	139e8 <__assert_fail@plt+0x2b5c>
   139c4:	mov	ip, #4
   139c8:	b	139e8 <__assert_fail@plt+0x2b5c>
   139cc:	mov	ip, #5
   139d0:	b	139e8 <__assert_fail@plt+0x2b5c>
   139d4:	mov	ip, #6
   139d8:	b	139e8 <__assert_fail@plt+0x2b5c>
   139dc:	mov	ip, #7
   139e0:	b	139e8 <__assert_fail@plt+0x2b5c>
   139e4:	mov	ip, #8
   139e8:	add	lr, sp, #8
   139ec:	str	ip, [sp, #4]
   139f0:	str	lr, [sp]
   139f4:	bl	1358c <__assert_fail@plt+0x2700>
   139f8:	mov	sp, fp
   139fc:	pop	{fp, pc}
   13a00:	push	{fp, lr}
   13a04:	mov	fp, sp
   13a08:	sub	sp, sp, #56	; 0x38
   13a0c:	add	ip, fp, #8
   13a10:	str	ip, [sp, #12]
   13a14:	ldr	lr, [fp, #8]
   13a18:	cmp	lr, #0
   13a1c:	str	lr, [sp, #16]
   13a20:	beq	13abc <__assert_fail@plt+0x2c30>
   13a24:	ldr	lr, [ip, #4]
   13a28:	cmp	lr, #0
   13a2c:	str	lr, [sp, #20]
   13a30:	beq	13ac4 <__assert_fail@plt+0x2c38>
   13a34:	ldr	lr, [ip, #8]
   13a38:	cmp	lr, #0
   13a3c:	str	lr, [sp, #24]
   13a40:	beq	13acc <__assert_fail@plt+0x2c40>
   13a44:	ldr	lr, [ip, #12]
   13a48:	cmp	lr, #0
   13a4c:	str	lr, [sp, #28]
   13a50:	beq	13ad4 <__assert_fail@plt+0x2c48>
   13a54:	ldr	lr, [ip, #16]
   13a58:	cmp	lr, #0
   13a5c:	str	lr, [sp, #32]
   13a60:	beq	13adc <__assert_fail@plt+0x2c50>
   13a64:	ldr	lr, [ip, #20]
   13a68:	cmp	lr, #0
   13a6c:	str	lr, [sp, #36]	; 0x24
   13a70:	beq	13ae4 <__assert_fail@plt+0x2c58>
   13a74:	ldr	lr, [ip, #24]
   13a78:	cmp	lr, #0
   13a7c:	str	lr, [sp, #40]	; 0x28
   13a80:	beq	13aec <__assert_fail@plt+0x2c60>
   13a84:	ldr	lr, [ip, #28]
   13a88:	cmp	lr, #0
   13a8c:	str	lr, [sp, #44]	; 0x2c
   13a90:	beq	13af4 <__assert_fail@plt+0x2c68>
   13a94:	ldr	lr, [ip, #32]
   13a98:	cmp	lr, #0
   13a9c:	str	lr, [sp, #48]	; 0x30
   13aa0:	beq	13afc <__assert_fail@plt+0x2c70>
   13aa4:	ldr	lr, [ip, #36]	; 0x24
   13aa8:	mov	ip, #10
   13aac:	cmp	lr, #0
   13ab0:	str	lr, [sp, #52]	; 0x34
   13ab4:	movweq	ip, #9
   13ab8:	b	13b00 <__assert_fail@plt+0x2c74>
   13abc:	mov	ip, #0
   13ac0:	b	13b00 <__assert_fail@plt+0x2c74>
   13ac4:	mov	ip, #1
   13ac8:	b	13b00 <__assert_fail@plt+0x2c74>
   13acc:	mov	ip, #2
   13ad0:	b	13b00 <__assert_fail@plt+0x2c74>
   13ad4:	mov	ip, #3
   13ad8:	b	13b00 <__assert_fail@plt+0x2c74>
   13adc:	mov	ip, #4
   13ae0:	b	13b00 <__assert_fail@plt+0x2c74>
   13ae4:	mov	ip, #5
   13ae8:	b	13b00 <__assert_fail@plt+0x2c74>
   13aec:	mov	ip, #6
   13af0:	b	13b00 <__assert_fail@plt+0x2c74>
   13af4:	mov	ip, #7
   13af8:	b	13b00 <__assert_fail@plt+0x2c74>
   13afc:	mov	ip, #8
   13b00:	add	lr, sp, #16
   13b04:	str	ip, [sp, #4]
   13b08:	str	lr, [sp]
   13b0c:	bl	1358c <__assert_fail@plt+0x2700>
   13b10:	mov	sp, fp
   13b14:	pop	{fp, pc}
   13b18:	push	{fp, lr}
   13b1c:	mov	fp, sp
   13b20:	movw	r0, #20780	; 0x512c
   13b24:	movt	r0, #2
   13b28:	ldr	r1, [r0]
   13b2c:	mov	r0, #10
   13b30:	bl	10e44 <fputc@plt>
   13b34:	movw	r1, #19911	; 0x4dc7
   13b38:	mov	r0, #0
   13b3c:	mov	r2, #5
   13b40:	movt	r1, #1
   13b44:	bl	10cf4 <dcgettext@plt>
   13b48:	movw	r1, #19025	; 0x4a51
   13b4c:	movt	r1, #1
   13b50:	bl	10ca0 <printf@plt>
   13b54:	movw	r1, #19931	; 0x4ddb
   13b58:	mov	r0, #0
   13b5c:	mov	r2, #5
   13b60:	movt	r1, #1
   13b64:	bl	10cf4 <dcgettext@plt>
   13b68:	movw	r1, #18676	; 0x48f4
   13b6c:	movw	r2, #18939	; 0x49fb
   13b70:	movt	r1, #1
   13b74:	movt	r2, #1
   13b78:	bl	10ca0 <printf@plt>
   13b7c:	movw	r1, #19951	; 0x4def
   13b80:	mov	r0, #0
   13b84:	mov	r2, #5
   13b88:	movt	r1, #1
   13b8c:	bl	10cf4 <dcgettext@plt>
   13b90:	movw	r1, #19990	; 0x4e16
   13b94:	movt	r1, #1
   13b98:	pop	{fp, lr}
   13b9c:	b	10ca0 <printf@plt>
   13ba0:	push	{r4, r5, r6, sl, fp, lr}
   13ba4:	add	fp, sp, #16
   13ba8:	mov	r4, r2
   13bac:	mov	r5, r1
   13bb0:	mov	r6, r0
   13bb4:	bl	14400 <__assert_fail@plt+0x3574>
   13bb8:	cmp	r0, #0
   13bbc:	popne	{r4, r5, r6, sl, fp, pc}
   13bc0:	cmp	r6, #0
   13bc4:	beq	13bd8 <__assert_fail@plt+0x2d4c>
   13bc8:	cmp	r5, #0
   13bcc:	cmpne	r4, #0
   13bd0:	bne	13bd8 <__assert_fail@plt+0x2d4c>
   13bd4:	pop	{r4, r5, r6, sl, fp, pc}
   13bd8:	bl	14154 <__assert_fail@plt+0x32c8>
   13bdc:	push	{r4, r5, r6, sl, fp, lr}
   13be0:	add	fp, sp, #16
   13be4:	mov	r4, r2
   13be8:	mov	r5, r1
   13bec:	mov	r6, r0
   13bf0:	bl	14400 <__assert_fail@plt+0x3574>
   13bf4:	cmp	r0, #0
   13bf8:	popne	{r4, r5, r6, sl, fp, pc}
   13bfc:	cmp	r6, #0
   13c00:	beq	13c14 <__assert_fail@plt+0x2d88>
   13c04:	cmp	r5, #0
   13c08:	cmpne	r4, #0
   13c0c:	bne	13c14 <__assert_fail@plt+0x2d88>
   13c10:	pop	{r4, r5, r6, sl, fp, pc}
   13c14:	bl	14154 <__assert_fail@plt+0x32c8>
   13c18:	push	{fp, lr}
   13c1c:	mov	fp, sp
   13c20:	bl	14318 <__assert_fail@plt+0x348c>
   13c24:	cmp	r0, #0
   13c28:	popne	{fp, pc}
   13c2c:	bl	14154 <__assert_fail@plt+0x32c8>
   13c30:	push	{fp, lr}
   13c34:	mov	fp, sp
   13c38:	bl	14318 <__assert_fail@plt+0x348c>
   13c3c:	cmp	r0, #0
   13c40:	popne	{fp, pc}
   13c44:	bl	14154 <__assert_fail@plt+0x32c8>
   13c48:	push	{fp, lr}
   13c4c:	mov	fp, sp
   13c50:	bl	14318 <__assert_fail@plt+0x348c>
   13c54:	cmp	r0, #0
   13c58:	popne	{fp, pc}
   13c5c:	bl	14154 <__assert_fail@plt+0x32c8>
   13c60:	push	{r4, r5, fp, lr}
   13c64:	add	fp, sp, #8
   13c68:	mov	r4, r1
   13c6c:	mov	r5, r0
   13c70:	bl	143ac <__assert_fail@plt+0x3520>
   13c74:	cmp	r0, #0
   13c78:	popne	{r4, r5, fp, pc}
   13c7c:	cmp	r5, #0
   13c80:	beq	13c90 <__assert_fail@plt+0x2e04>
   13c84:	cmp	r4, #0
   13c88:	bne	13c90 <__assert_fail@plt+0x2e04>
   13c8c:	pop	{r4, r5, fp, pc}
   13c90:	bl	14154 <__assert_fail@plt+0x32c8>
   13c94:	push	{fp, lr}
   13c98:	mov	fp, sp
   13c9c:	cmp	r1, #0
   13ca0:	orreq	r1, r1, #1
   13ca4:	bl	143ac <__assert_fail@plt+0x3520>
   13ca8:	cmp	r0, #0
   13cac:	popne	{fp, pc}
   13cb0:	bl	14154 <__assert_fail@plt+0x32c8>
   13cb4:	push	{fp, lr}
   13cb8:	mov	fp, sp
   13cbc:	clz	r3, r2
   13cc0:	lsr	ip, r3, #5
   13cc4:	clz	r3, r1
   13cc8:	lsr	r3, r3, #5
   13ccc:	orrs	r3, r3, ip
   13cd0:	movwne	r1, #1
   13cd4:	movwne	r2, #1
   13cd8:	bl	14400 <__assert_fail@plt+0x3574>
   13cdc:	cmp	r0, #0
   13ce0:	popne	{fp, pc}
   13ce4:	bl	14154 <__assert_fail@plt+0x32c8>
   13ce8:	push	{fp, lr}
   13cec:	mov	fp, sp
   13cf0:	mov	r2, r1
   13cf4:	mov	r1, r0
   13cf8:	mov	r0, #0
   13cfc:	bl	14400 <__assert_fail@plt+0x3574>
   13d00:	cmp	r0, #0
   13d04:	popne	{fp, pc}
   13d08:	bl	14154 <__assert_fail@plt+0x32c8>
   13d0c:	push	{fp, lr}
   13d10:	mov	fp, sp
   13d14:	mov	r2, r1
   13d18:	mov	r1, r0
   13d1c:	clz	r0, r2
   13d20:	clz	r3, r1
   13d24:	lsr	r0, r0, #5
   13d28:	lsr	r3, r3, #5
   13d2c:	orrs	r0, r3, r0
   13d30:	mov	r0, #0
   13d34:	movwne	r1, #1
   13d38:	movwne	r2, #1
   13d3c:	bl	14400 <__assert_fail@plt+0x3574>
   13d40:	cmp	r0, #0
   13d44:	popne	{fp, pc}
   13d48:	bl	14154 <__assert_fail@plt+0x32c8>
   13d4c:	push	{r4, r5, r6, sl, fp, lr}
   13d50:	add	fp, sp, #16
   13d54:	ldr	r5, [r1]
   13d58:	mov	r4, r1
   13d5c:	mov	r6, r0
   13d60:	cmp	r0, #0
   13d64:	beq	13d7c <__assert_fail@plt+0x2ef0>
   13d68:	mov	r0, #1
   13d6c:	add	r0, r0, r5, lsr #1
   13d70:	adds	r5, r5, r0
   13d74:	bcc	13d84 <__assert_fail@plt+0x2ef8>
   13d78:	b	13dc0 <__assert_fail@plt+0x2f34>
   13d7c:	cmp	r5, #0
   13d80:	movweq	r5, #64	; 0x40
   13d84:	mov	r0, r6
   13d88:	mov	r1, r5
   13d8c:	mov	r2, #1
   13d90:	bl	14400 <__assert_fail@plt+0x3574>
   13d94:	cmp	r5, #0
   13d98:	mov	r1, r5
   13d9c:	movwne	r1, #1
   13da0:	cmp	r0, #0
   13da4:	bne	13db8 <__assert_fail@plt+0x2f2c>
   13da8:	clz	r2, r6
   13dac:	lsr	r2, r2, #5
   13db0:	orrs	r1, r2, r1
   13db4:	bne	13dc0 <__assert_fail@plt+0x2f34>
   13db8:	str	r5, [r4]
   13dbc:	pop	{r4, r5, r6, sl, fp, pc}
   13dc0:	bl	14154 <__assert_fail@plt+0x32c8>
   13dc4:	push	{r4, r5, r6, r7, fp, lr}
   13dc8:	add	fp, sp, #16
   13dcc:	ldr	r5, [r1]
   13dd0:	mov	r6, r2
   13dd4:	mov	r4, r1
   13dd8:	mov	r7, r0
   13ddc:	cmp	r0, #0
   13de0:	beq	13df8 <__assert_fail@plt+0x2f6c>
   13de4:	mov	r0, #1
   13de8:	add	r0, r0, r5, lsr #1
   13dec:	adds	r5, r5, r0
   13df0:	bcc	13e10 <__assert_fail@plt+0x2f84>
   13df4:	b	13e44 <__assert_fail@plt+0x2fb8>
   13df8:	cmp	r5, #0
   13dfc:	bne	13e10 <__assert_fail@plt+0x2f84>
   13e00:	mov	r0, #64	; 0x40
   13e04:	cmp	r6, #64	; 0x40
   13e08:	udiv	r5, r0, r6
   13e0c:	addhi	r5, r5, #1
   13e10:	mov	r0, r7
   13e14:	mov	r1, r5
   13e18:	mov	r2, r6
   13e1c:	bl	14400 <__assert_fail@plt+0x3574>
   13e20:	cmp	r0, #0
   13e24:	bne	13e3c <__assert_fail@plt+0x2fb0>
   13e28:	cmp	r7, #0
   13e2c:	beq	13e44 <__assert_fail@plt+0x2fb8>
   13e30:	cmp	r6, #0
   13e34:	cmpne	r5, #0
   13e38:	bne	13e44 <__assert_fail@plt+0x2fb8>
   13e3c:	str	r5, [r4]
   13e40:	pop	{r4, r5, r6, r7, fp, pc}
   13e44:	bl	14154 <__assert_fail@plt+0x32c8>
   13e48:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13e4c:	add	fp, sp, #24
   13e50:	mov	r8, r1
   13e54:	ldr	r1, [r1]
   13e58:	mov	r5, r0
   13e5c:	add	r0, r1, r1, asr #1
   13e60:	cmp	r0, r1
   13e64:	mvnvs	r0, #-2147483648	; 0x80000000
   13e68:	cmp	r0, r3
   13e6c:	mov	r7, r0
   13e70:	movgt	r7, r3
   13e74:	cmn	r3, #1
   13e78:	movle	r7, r0
   13e7c:	ldr	r0, [fp, #8]
   13e80:	cmn	r0, #1
   13e84:	ble	13eac <__assert_fail@plt+0x3020>
   13e88:	cmp	r0, #0
   13e8c:	beq	13f00 <__assert_fail@plt+0x3074>
   13e90:	cmn	r7, #1
   13e94:	ble	13ed4 <__assert_fail@plt+0x3048>
   13e98:	mvn	r4, #-2147483648	; 0x80000000
   13e9c:	udiv	r6, r4, r0
   13ea0:	cmp	r6, r7
   13ea4:	bge	13f00 <__assert_fail@plt+0x3074>
   13ea8:	b	13f10 <__assert_fail@plt+0x3084>
   13eac:	cmn	r7, #1
   13eb0:	ble	13ef0 <__assert_fail@plt+0x3064>
   13eb4:	cmn	r0, #1
   13eb8:	beq	13f00 <__assert_fail@plt+0x3074>
   13ebc:	mov	r6, #-2147483648	; 0x80000000
   13ec0:	mvn	r4, #-2147483648	; 0x80000000
   13ec4:	sdiv	r6, r6, r0
   13ec8:	cmp	r6, r7
   13ecc:	bge	13f00 <__assert_fail@plt+0x3074>
   13ed0:	b	13f10 <__assert_fail@plt+0x3084>
   13ed4:	beq	13f00 <__assert_fail@plt+0x3074>
   13ed8:	mov	r6, #-2147483648	; 0x80000000
   13edc:	mvn	r4, #-2147483648	; 0x80000000
   13ee0:	sdiv	r6, r6, r7
   13ee4:	cmp	r6, r0
   13ee8:	bge	13f00 <__assert_fail@plt+0x3074>
   13eec:	b	13f10 <__assert_fail@plt+0x3084>
   13ef0:	mvn	r4, #-2147483648	; 0x80000000
   13ef4:	sdiv	r6, r4, r0
   13ef8:	cmp	r7, r6
   13efc:	blt	13f10 <__assert_fail@plt+0x3084>
   13f00:	mul	r6, r7, r0
   13f04:	mov	r4, #64	; 0x40
   13f08:	cmp	r6, #63	; 0x3f
   13f0c:	bgt	13f18 <__assert_fail@plt+0x308c>
   13f10:	sdiv	r7, r4, r0
   13f14:	mul	r6, r7, r0
   13f18:	cmp	r5, #0
   13f1c:	moveq	r4, #0
   13f20:	streq	r4, [r8]
   13f24:	sub	r4, r7, r1
   13f28:	cmp	r4, r2
   13f2c:	bge	13fd8 <__assert_fail@plt+0x314c>
   13f30:	add	r7, r1, r2
   13f34:	mov	r6, #0
   13f38:	mov	r2, #0
   13f3c:	cmp	r7, r3
   13f40:	movwgt	r6, #1
   13f44:	cmn	r3, #1
   13f48:	movwgt	r2, #1
   13f4c:	cmp	r7, r1
   13f50:	bvs	1400c <__assert_fail@plt+0x3180>
   13f54:	ands	r1, r2, r6
   13f58:	bne	1400c <__assert_fail@plt+0x3180>
   13f5c:	cmn	r0, #1
   13f60:	ble	13f88 <__assert_fail@plt+0x30fc>
   13f64:	cmp	r0, #0
   13f68:	beq	13fd4 <__assert_fail@plt+0x3148>
   13f6c:	cmn	r7, #1
   13f70:	ble	13fac <__assert_fail@plt+0x3120>
   13f74:	mvn	r1, #-2147483648	; 0x80000000
   13f78:	udiv	r1, r1, r0
   13f7c:	cmp	r1, r7
   13f80:	bge	13fd4 <__assert_fail@plt+0x3148>
   13f84:	b	1400c <__assert_fail@plt+0x3180>
   13f88:	cmn	r7, #1
   13f8c:	ble	13fc4 <__assert_fail@plt+0x3138>
   13f90:	cmn	r0, #1
   13f94:	beq	13fd4 <__assert_fail@plt+0x3148>
   13f98:	mov	r1, #-2147483648	; 0x80000000
   13f9c:	sdiv	r1, r1, r0
   13fa0:	cmp	r1, r7
   13fa4:	bge	13fd4 <__assert_fail@plt+0x3148>
   13fa8:	b	1400c <__assert_fail@plt+0x3180>
   13fac:	beq	13fd4 <__assert_fail@plt+0x3148>
   13fb0:	mov	r1, #-2147483648	; 0x80000000
   13fb4:	sdiv	r1, r1, r7
   13fb8:	cmp	r1, r0
   13fbc:	bge	13fd4 <__assert_fail@plt+0x3148>
   13fc0:	b	1400c <__assert_fail@plt+0x3180>
   13fc4:	mvn	r1, #-2147483648	; 0x80000000
   13fc8:	sdiv	r1, r1, r0
   13fcc:	cmp	r7, r1
   13fd0:	blt	1400c <__assert_fail@plt+0x3180>
   13fd4:	mul	r6, r7, r0
   13fd8:	mov	r0, r5
   13fdc:	mov	r1, r6
   13fe0:	bl	143ac <__assert_fail@plt+0x3520>
   13fe4:	cmp	r6, #0
   13fe8:	movwne	r6, #1
   13fec:	cmp	r0, #0
   13ff0:	bne	14004 <__assert_fail@plt+0x3178>
   13ff4:	clz	r1, r5
   13ff8:	lsr	r1, r1, #5
   13ffc:	orrs	r1, r1, r6
   14000:	bne	1400c <__assert_fail@plt+0x3180>
   14004:	str	r7, [r8]
   14008:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1400c:	bl	14154 <__assert_fail@plt+0x32c8>
   14010:	push	{fp, lr}
   14014:	mov	fp, sp
   14018:	mov	r1, #1
   1401c:	bl	14198 <__assert_fail@plt+0x330c>
   14020:	cmp	r0, #0
   14024:	popne	{fp, pc}
   14028:	bl	14154 <__assert_fail@plt+0x32c8>
   1402c:	push	{fp, lr}
   14030:	mov	fp, sp
   14034:	bl	14198 <__assert_fail@plt+0x330c>
   14038:	cmp	r0, #0
   1403c:	popne	{fp, pc}
   14040:	bl	14154 <__assert_fail@plt+0x32c8>
   14044:	push	{fp, lr}
   14048:	mov	fp, sp
   1404c:	mov	r1, #1
   14050:	bl	14198 <__assert_fail@plt+0x330c>
   14054:	cmp	r0, #0
   14058:	popne	{fp, pc}
   1405c:	bl	14154 <__assert_fail@plt+0x32c8>
   14060:	push	{fp, lr}
   14064:	mov	fp, sp
   14068:	bl	14198 <__assert_fail@plt+0x330c>
   1406c:	cmp	r0, #0
   14070:	popne	{fp, pc}
   14074:	bl	14154 <__assert_fail@plt+0x32c8>
   14078:	push	{r4, r5, fp, lr}
   1407c:	add	fp, sp, #8
   14080:	mov	r5, r0
   14084:	mov	r0, r1
   14088:	mov	r4, r1
   1408c:	bl	14318 <__assert_fail@plt+0x348c>
   14090:	cmp	r0, #0
   14094:	beq	140a8 <__assert_fail@plt+0x321c>
   14098:	mov	r1, r5
   1409c:	mov	r2, r4
   140a0:	pop	{r4, r5, fp, lr}
   140a4:	b	10cdc <memcpy@plt>
   140a8:	bl	14154 <__assert_fail@plt+0x32c8>
   140ac:	push	{r4, r5, fp, lr}
   140b0:	add	fp, sp, #8
   140b4:	mov	r5, r0
   140b8:	mov	r0, r1
   140bc:	mov	r4, r1
   140c0:	bl	14318 <__assert_fail@plt+0x348c>
   140c4:	cmp	r0, #0
   140c8:	beq	140dc <__assert_fail@plt+0x3250>
   140cc:	mov	r1, r5
   140d0:	mov	r2, r4
   140d4:	pop	{r4, r5, fp, lr}
   140d8:	b	10cdc <memcpy@plt>
   140dc:	bl	14154 <__assert_fail@plt+0x32c8>
   140e0:	push	{r4, r5, fp, lr}
   140e4:	add	fp, sp, #8
   140e8:	mov	r5, r0
   140ec:	add	r0, r1, #1
   140f0:	mov	r4, r1
   140f4:	bl	14318 <__assert_fail@plt+0x348c>
   140f8:	cmp	r0, #0
   140fc:	beq	14118 <__assert_fail@plt+0x328c>
   14100:	mov	r1, #0
   14104:	mov	r2, r4
   14108:	strb	r1, [r0, r4]
   1410c:	mov	r1, r5
   14110:	pop	{r4, r5, fp, lr}
   14114:	b	10cdc <memcpy@plt>
   14118:	bl	14154 <__assert_fail@plt+0x32c8>
   1411c:	push	{r4, r5, fp, lr}
   14120:	add	fp, sp, #8
   14124:	mov	r4, r0
   14128:	bl	10dc0 <strlen@plt>
   1412c:	add	r5, r0, #1
   14130:	mov	r0, r5
   14134:	bl	14318 <__assert_fail@plt+0x348c>
   14138:	cmp	r0, #0
   1413c:	beq	14150 <__assert_fail@plt+0x32c4>
   14140:	mov	r1, r4
   14144:	mov	r2, r5
   14148:	pop	{r4, r5, fp, lr}
   1414c:	b	10cdc <memcpy@plt>
   14150:	bl	14154 <__assert_fail@plt+0x32c8>
   14154:	push	{fp, lr}
   14158:	mov	fp, sp
   1415c:	movw	r0, #20684	; 0x50cc
   14160:	movw	r1, #20066	; 0x4e62
   14164:	mov	r2, #5
   14168:	movt	r0, #2
   1416c:	movt	r1, #1
   14170:	ldr	r4, [r0]
   14174:	mov	r0, #0
   14178:	bl	10cf4 <dcgettext@plt>
   1417c:	movw	r2, #19051	; 0x4a6b
   14180:	mov	r3, r0
   14184:	mov	r0, r4
   14188:	mov	r1, #0
   1418c:	movt	r2, #1
   14190:	bl	10d54 <error@plt>
   14194:	bl	10e80 <abort@plt>
   14198:	clz	r2, r1
   1419c:	clz	r3, r0
   141a0:	lsr	r2, r2, #5
   141a4:	lsr	r3, r3, #5
   141a8:	orrs	r2, r3, r2
   141ac:	movwne	r1, #1
   141b0:	movwne	r0, #1
   141b4:	cmp	r1, #0
   141b8:	beq	141e8 <__assert_fail@plt+0x335c>
   141bc:	mvn	r2, #-2147483648	; 0x80000000
   141c0:	udiv	r2, r2, r1
   141c4:	cmp	r2, r0
   141c8:	bcs	141e8 <__assert_fail@plt+0x335c>
   141cc:	push	{fp, lr}
   141d0:	mov	fp, sp
   141d4:	bl	10dd8 <__errno_location@plt>
   141d8:	mov	r1, #12
   141dc:	str	r1, [r0]
   141e0:	mov	r0, #0
   141e4:	pop	{fp, pc}
   141e8:	b	10c88 <calloc@plt>
   141ec:	push	{r4, sl, fp, lr}
   141f0:	add	fp, sp, #8
   141f4:	sub	sp, sp, #8
   141f8:	mov	r4, r0
   141fc:	cmp	r0, #0
   14200:	beq	14238 <__assert_fail@plt+0x33ac>
   14204:	mov	r0, r4
   14208:	bl	10d78 <__freading@plt>
   1420c:	cmp	r0, #0
   14210:	beq	14238 <__assert_fail@plt+0x33ac>
   14214:	ldrb	r0, [r4, #1]
   14218:	tst	r0, #1
   1421c:	beq	14238 <__assert_fail@plt+0x33ac>
   14220:	mov	r0, #1
   14224:	mov	r2, #0
   14228:	mov	r3, #0
   1422c:	str	r0, [sp]
   14230:	mov	r0, r4
   14234:	bl	14270 <__assert_fail@plt+0x33e4>
   14238:	mov	r0, r4
   1423c:	sub	sp, fp, #8
   14240:	pop	{r4, sl, fp, lr}
   14244:	b	10cac <fflush@plt>
   14248:	push	{r4, r5, r6, sl, fp, lr}
   1424c:	add	fp, sp, #16
   14250:	mov	r4, r0
   14254:	bl	10dd8 <__errno_location@plt>
   14258:	ldr	r6, [r0]
   1425c:	mov	r5, r0
   14260:	mov	r0, r4
   14264:	bl	10cb8 <free@plt>
   14268:	str	r6, [r5]
   1426c:	pop	{r4, r5, r6, sl, fp, pc}
   14270:	push	{r4, r5, r6, r7, fp, lr}
   14274:	add	fp, sp, #16
   14278:	sub	sp, sp, #8
   1427c:	mov	r4, r0
   14280:	ldr	r0, [r0, #4]
   14284:	mov	r5, r3
   14288:	mov	r6, r2
   1428c:	ldr	r1, [r4, #8]
   14290:	cmp	r1, r0
   14294:	bne	142b0 <__assert_fail@plt+0x3424>
   14298:	ldrd	r0, [r4, #16]
   1429c:	cmp	r1, r0
   142a0:	bne	142b0 <__assert_fail@plt+0x3424>
   142a4:	ldr	r0, [r4, #36]	; 0x24
   142a8:	cmp	r0, #0
   142ac:	beq	142c8 <__assert_fail@plt+0x343c>
   142b0:	mov	r0, r4
   142b4:	mov	r2, r6
   142b8:	mov	r3, r5
   142bc:	sub	sp, fp, #16
   142c0:	pop	{r4, r5, r6, r7, fp, lr}
   142c4:	b	10e14 <fseeko64@plt>
   142c8:	ldr	r7, [fp, #8]
   142cc:	mov	r0, r4
   142d0:	bl	10dfc <fileno@plt>
   142d4:	mov	r2, r6
   142d8:	mov	r3, r5
   142dc:	str	r7, [sp]
   142e0:	bl	10d24 <lseek64@plt>
   142e4:	and	r2, r0, r1
   142e8:	cmn	r2, #1
   142ec:	beq	1430c <__assert_fail@plt+0x3480>
   142f0:	strd	r0, [r4, #80]	; 0x50
   142f4:	ldr	r0, [r4]
   142f8:	bic	r0, r0, #16
   142fc:	str	r0, [r4]
   14300:	mov	r0, #0
   14304:	sub	sp, fp, #16
   14308:	pop	{r4, r5, r6, r7, fp, pc}
   1430c:	mvn	r0, #0
   14310:	sub	sp, fp, #16
   14314:	pop	{r4, r5, r6, r7, fp, pc}
   14318:	cmp	r0, #0
   1431c:	movweq	r0, #1
   14320:	cmn	r0, #1
   14324:	ble	1432c <__assert_fail@plt+0x34a0>
   14328:	b	10d60 <malloc@plt>
   1432c:	push	{fp, lr}
   14330:	mov	fp, sp
   14334:	bl	10dd8 <__errno_location@plt>
   14338:	mov	r1, #12
   1433c:	str	r1, [r0]
   14340:	mov	r0, #0
   14344:	pop	{fp, pc}
   14348:	push	{r4, r5, r6, r7, fp, lr}
   1434c:	add	fp, sp, #16
   14350:	sub	sp, sp, #8
   14354:	cmp	r0, #0
   14358:	add	r5, sp, #4
   1435c:	mov	r7, r2
   14360:	mov	r4, r1
   14364:	movne	r5, r0
   14368:	mov	r0, r5
   1436c:	bl	10d48 <mbrtowc@plt>
   14370:	mov	r6, r0
   14374:	cmp	r7, #0
   14378:	beq	143a0 <__assert_fail@plt+0x3514>
   1437c:	cmn	r6, #2
   14380:	bcc	143a0 <__assert_fail@plt+0x3514>
   14384:	mov	r0, #0
   14388:	bl	144c0 <__assert_fail@plt+0x3634>
   1438c:	cmp	r0, #0
   14390:	bne	143a0 <__assert_fail@plt+0x3514>
   14394:	ldrb	r0, [r4]
   14398:	mov	r6, #1
   1439c:	str	r0, [r5]
   143a0:	mov	r0, r6
   143a4:	sub	sp, fp, #16
   143a8:	pop	{r4, r5, r6, r7, fp, pc}
   143ac:	push	{fp, lr}
   143b0:	mov	fp, sp
   143b4:	cmp	r0, #0
   143b8:	beq	143d4 <__assert_fail@plt+0x3548>
   143bc:	cmp	r1, #0
   143c0:	beq	143e0 <__assert_fail@plt+0x3554>
   143c4:	cmn	r1, #1
   143c8:	ble	143ec <__assert_fail@plt+0x3560>
   143cc:	pop	{fp, lr}
   143d0:	b	10d00 <realloc@plt>
   143d4:	mov	r0, r1
   143d8:	pop	{fp, lr}
   143dc:	b	14318 <__assert_fail@plt+0x348c>
   143e0:	bl	14248 <__assert_fail@plt+0x33bc>
   143e4:	mov	r0, #0
   143e8:	pop	{fp, pc}
   143ec:	bl	10dd8 <__errno_location@plt>
   143f0:	mov	r1, #12
   143f4:	str	r1, [r0]
   143f8:	mov	r0, #0
   143fc:	pop	{fp, pc}
   14400:	cmp	r2, #0
   14404:	beq	14434 <__assert_fail@plt+0x35a8>
   14408:	mvn	r3, #0
   1440c:	udiv	r3, r3, r2
   14410:	cmp	r3, r1
   14414:	bcs	14434 <__assert_fail@plt+0x35a8>
   14418:	push	{fp, lr}
   1441c:	mov	fp, sp
   14420:	bl	10dd8 <__errno_location@plt>
   14424:	mov	r1, #12
   14428:	str	r1, [r0]
   1442c:	mov	r0, #0
   14430:	pop	{fp, pc}
   14434:	mul	r1, r2, r1
   14438:	b	143ac <__assert_fail@plt+0x3520>
   1443c:	push	{r4, r5, r6, sl, fp, lr}
   14440:	add	fp, sp, #16
   14444:	mov	r4, r0
   14448:	bl	10d3c <__fpending@plt>
   1444c:	mov	r5, r0
   14450:	mov	r0, r4
   14454:	bl	10cc4 <ferror@plt>
   14458:	mov	r6, r0
   1445c:	mov	r0, r4
   14460:	bl	10e08 <fclose@plt>
   14464:	cmp	r6, #0
   14468:	beq	1448c <__assert_fail@plt+0x3600>
   1446c:	mvn	r4, #0
   14470:	cmp	r0, #0
   14474:	bne	144b8 <__assert_fail@plt+0x362c>
   14478:	bl	10dd8 <__errno_location@plt>
   1447c:	mov	r1, #0
   14480:	str	r1, [r0]
   14484:	mov	r0, r4
   14488:	pop	{r4, r5, r6, sl, fp, pc}
   1448c:	cmp	r0, #0
   14490:	mov	r4, r0
   14494:	mvnne	r4, #0
   14498:	cmp	r5, #0
   1449c:	bne	144b8 <__assert_fail@plt+0x362c>
   144a0:	cmp	r0, #0
   144a4:	beq	144b8 <__assert_fail@plt+0x362c>
   144a8:	bl	10dd8 <__errno_location@plt>
   144ac:	ldr	r0, [r0]
   144b0:	subs	r4, r0, #9
   144b4:	mvnne	r4, #0
   144b8:	mov	r0, r4
   144bc:	pop	{r4, r5, r6, sl, fp, pc}
   144c0:	push	{r4, sl, fp, lr}
   144c4:	add	fp, sp, #8
   144c8:	sub	sp, sp, #264	; 0x108
   144cc:	add	r1, sp, #7
   144d0:	movw	r2, #257	; 0x101
   144d4:	bl	14564 <__assert_fail@plt+0x36d8>
   144d8:	mov	r4, #0
   144dc:	cmp	r0, #0
   144e0:	bne	14520 <__assert_fail@plt+0x3694>
   144e4:	movw	r1, #20083	; 0x4e73
   144e8:	add	r0, sp, #7
   144ec:	mov	r2, #2
   144f0:	movt	r1, #1
   144f4:	bl	10db4 <bcmp@plt>
   144f8:	cmp	r0, #0
   144fc:	beq	14520 <__assert_fail@plt+0x3694>
   14500:	movw	r1, #20085	; 0x4e75
   14504:	add	r0, sp, #7
   14508:	mov	r2, #6
   1450c:	movt	r1, #1
   14510:	bl	10db4 <bcmp@plt>
   14514:	cmp	r0, #0
   14518:	mov	r4, r0
   1451c:	movwne	r4, #1
   14520:	mov	r0, r4
   14524:	sub	sp, fp, #8
   14528:	pop	{r4, sl, fp, pc}
   1452c:	push	{fp, lr}
   14530:	mov	fp, sp
   14534:	mov	r0, #14
   14538:	bl	10e38 <nl_langinfo@plt>
   1453c:	movw	r1, #18938	; 0x49fa
   14540:	cmp	r0, #0
   14544:	movt	r1, #1
   14548:	movne	r1, r0
   1454c:	movw	r0, #20091	; 0x4e7b
   14550:	ldrb	r2, [r1]
   14554:	movt	r0, #1
   14558:	cmp	r2, #0
   1455c:	movne	r0, r1
   14560:	pop	{fp, pc}
   14564:	push	{r4, r5, r6, r7, fp, lr}
   14568:	add	fp, sp, #16
   1456c:	mov	r4, r1
   14570:	mov	r1, #0
   14574:	mov	r6, r2
   14578:	bl	10e20 <setlocale@plt>
   1457c:	cmp	r0, #0
   14580:	beq	145b0 <__assert_fail@plt+0x3724>
   14584:	mov	r7, r0
   14588:	bl	10dc0 <strlen@plt>
   1458c:	cmp	r0, r6
   14590:	bcs	145cc <__assert_fail@plt+0x3740>
   14594:	add	r2, r0, #1
   14598:	mov	r0, r4
   1459c:	mov	r1, r7
   145a0:	bl	10cdc <memcpy@plt>
   145a4:	mov	r5, #0
   145a8:	mov	r0, r5
   145ac:	pop	{r4, r5, r6, r7, fp, pc}
   145b0:	mov	r5, #22
   145b4:	cmp	r6, #0
   145b8:	beq	145f4 <__assert_fail@plt+0x3768>
   145bc:	mov	r0, #0
   145c0:	strb	r0, [r4]
   145c4:	mov	r0, r5
   145c8:	pop	{r4, r5, r6, r7, fp, pc}
   145cc:	mov	r5, #34	; 0x22
   145d0:	cmp	r6, #0
   145d4:	beq	145f4 <__assert_fail@plt+0x3768>
   145d8:	sub	r6, r6, #1
   145dc:	mov	r0, r4
   145e0:	mov	r1, r7
   145e4:	mov	r2, r6
   145e8:	bl	10cdc <memcpy@plt>
   145ec:	mov	r0, #0
   145f0:	strb	r0, [r4, r6]
   145f4:	mov	r0, r5
   145f8:	pop	{r4, r5, r6, r7, fp, pc}
   145fc:	mov	r1, #0
   14600:	b	10e20 <setlocale@plt>
   14604:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14608:	mov	r7, r0
   1460c:	ldr	r6, [pc, #72]	; 1465c <__assert_fail@plt+0x37d0>
   14610:	ldr	r5, [pc, #72]	; 14660 <__assert_fail@plt+0x37d4>
   14614:	add	r6, pc, r6
   14618:	add	r5, pc, r5
   1461c:	sub	r6, r6, r5
   14620:	mov	r8, r1
   14624:	mov	r9, r2
   14628:	bl	10c68 <calloc@plt-0x20>
   1462c:	asrs	r6, r6, #2
   14630:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14634:	mov	r4, #0
   14638:	add	r4, r4, #1
   1463c:	ldr	r3, [r5], #4
   14640:	mov	r2, r9
   14644:	mov	r1, r8
   14648:	mov	r0, r7
   1464c:	blx	r3
   14650:	cmp	r6, r4
   14654:	bne	14638 <__assert_fail@plt+0x37ac>
   14658:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1465c:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   14660:	andeq	r0, r1, r8, ror #17
   14664:	bx	lr
   14668:	ldr	r3, [pc, #12]	; 1467c <__assert_fail@plt+0x37f0>
   1466c:	mov	r1, #0
   14670:	add	r3, pc, r3
   14674:	ldr	r2, [r3]
   14678:	b	10de4 <__cxa_atexit@plt>
   1467c:	andeq	r0, r1, ip, asr #20

Disassembly of section .fini:

00014680 <.fini>:
   14680:	push	{r3, lr}
   14684:	pop	{r3, pc}
