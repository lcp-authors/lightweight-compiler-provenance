
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_basic_parse:     file format elf32-littlearm


Disassembly of section .init:

000128d8 <.init>:
   128d8:	push	{r3, lr}
   128dc:	bl	12a0c <_start@@Base+0x3c>
   128e0:	pop	{r3, pc}

Disassembly of section .plt:

000128e4 <free@plt-0x14>:
   128e4:	push	{lr}		; (str lr, [sp, #-4]!)
   128e8:	ldr	lr, [pc, #4]	; 128f4 <free@plt-0x4>
   128ec:	add	lr, pc, lr
   128f0:	ldr	pc, [lr, #8]!
   128f4:	andeq	ip, r1, ip, lsl #14

000128f8 <free@plt>:
   128f8:	add	ip, pc, #0, 12
   128fc:	add	ip, ip, #28, 20	; 0x1c000
   12900:	ldr	pc, [ip, #1804]!	; 0x70c

00012904 <memcpy@plt>:
   12904:	add	ip, pc, #0, 12
   12908:	add	ip, ip, #28, 20	; 0x1c000
   1290c:	ldr	pc, [ip, #1796]!	; 0x704

00012910 <memcmp@plt>:
   12910:	add	ip, pc, #0, 12
   12914:	add	ip, ip, #28, 20	; 0x1c000
   12918:	ldr	pc, [ip, #1788]!	; 0x6fc

0001291c <__isinff@plt>:
   1291c:	add	ip, pc, #0, 12
   12920:	add	ip, ip, #28, 20	; 0x1c000
   12924:	ldr	pc, [ip, #1780]!	; 0x6f4

00012928 <__isinf@plt>:
   12928:	add	ip, pc, #0, 12
   1292c:	add	ip, ip, #28, 20	; 0x1c000
   12930:	ldr	pc, [ip, #1772]!	; 0x6ec

00012934 <realloc@plt>:
   12934:	add	ip, pc, #0, 12
   12938:	add	ip, ip, #28, 20	; 0x1c000
   1293c:	ldr	pc, [ip, #1764]!	; 0x6e4

00012940 <fwrite@plt>:
   12940:	add	ip, pc, #0, 12
   12944:	add	ip, ip, #28, 20	; 0x1c000
   12948:	ldr	pc, [ip, #1756]!	; 0x6dc

0001294c <malloc@plt>:
   1294c:	add	ip, pc, #0, 12
   12950:	add	ip, ip, #28, 20	; 0x1c000
   12954:	ldr	pc, [ip, #1748]!	; 0x6d4

00012958 <__libc_start_main@plt>:
   12958:	add	ip, pc, #0, 12
   1295c:	add	ip, ip, #28, 20	; 0x1c000
   12960:	ldr	pc, [ip, #1740]!	; 0x6cc

00012964 <__gmon_start__@plt>:
   12964:	add	ip, pc, #0, 12
   12968:	add	ip, ip, #28, 20	; 0x1c000
   1296c:	ldr	pc, [ip, #1732]!	; 0x6c4

00012970 <strlen@plt>:
   12970:	add	ip, pc, #0, 12
   12974:	add	ip, ip, #28, 20	; 0x1c000
   12978:	ldr	pc, [ip, #1724]!	; 0x6bc

0001297c <fprintf@plt>:
   1297c:	add	ip, pc, #0, 12
   12980:	add	ip, ip, #28, 20	; 0x1c000
   12984:	ldr	pc, [ip, #1716]!	; 0x6b4

00012988 <posix_memalign@plt>:
   12988:	add	ip, pc, #0, 12
   1298c:	add	ip, ip, #28, 20	; 0x1c000
   12990:	ldr	pc, [ip, #1708]!	; 0x6ac

00012994 <memset@plt>:
   12994:	add	ip, pc, #0, 12
   12998:	add	ip, ip, #28, 20	; 0x1c000
   1299c:	ldr	pc, [ip, #1700]!	; 0x6a4

000129a0 <strtod@plt>:
   129a0:	add	ip, pc, #0, 12
   129a4:	add	ip, ip, #28, 20	; 0x1c000
   129a8:	ldr	pc, [ip, #1692]!	; 0x69c

000129ac <memchr@plt>:
   129ac:	add	ip, pc, #0, 12
   129b0:	add	ip, ip, #28, 20	; 0x1c000
   129b4:	ldr	pc, [ip, #1684]!	; 0x694

000129b8 <abort@plt>:
   129b8:	add	ip, pc, #0, 12
   129bc:	add	ip, ip, #28, 20	; 0x1c000
   129c0:	ldr	pc, [ip, #1676]!	; 0x68c

000129c4 <__assert_fail@plt>:
   129c4:	add	ip, pc, #0, 12
   129c8:	add	ip, ip, #28, 20	; 0x1c000
   129cc:	ldr	pc, [ip, #1668]!	; 0x684

Disassembly of section .text:

000129d0 <_start@@Base>:
   129d0:	mov	fp, #0
   129d4:	mov	lr, #0
   129d8:	pop	{r1}		; (ldr r1, [sp], #4)
   129dc:	mov	r2, sp
   129e0:	push	{r2}		; (str r2, [sp, #-4]!)
   129e4:	push	{r0}		; (str r0, [sp, #-4]!)
   129e8:	ldr	ip, [pc, #16]	; 12a00 <_start@@Base+0x30>
   129ec:	push	{ip}		; (str ip, [sp, #-4]!)
   129f0:	ldr	r0, [pc, #12]	; 12a04 <_start@@Base+0x34>
   129f4:	ldr	r3, [pc, #12]	; 12a08 <_start@@Base+0x38>
   129f8:	bl	12958 <__libc_start_main@plt>
   129fc:	bl	129b8 <abort@plt>
   12a00:	andeq	ip, r1, r0, lsl #7
   12a04:	andeq	r3, r1, ip, ror sp
   12a08:	andeq	ip, r1, r0, lsr #6
   12a0c:	ldr	r3, [pc, #20]	; 12a28 <_start@@Base+0x58>
   12a10:	ldr	r2, [pc, #20]	; 12a2c <_start@@Base+0x5c>
   12a14:	add	r3, pc, r3
   12a18:	ldr	r2, [r3, r2]
   12a1c:	cmp	r2, #0
   12a20:	bxeq	lr
   12a24:	b	12964 <__gmon_start__@plt>
   12a28:	andeq	ip, r1, r4, ror #11
   12a2c:	andeq	r0, r0, r4, asr r0
   12a30:	ldr	r0, [pc, #24]	; 12a50 <_start@@Base+0x80>
   12a34:	ldr	r3, [pc, #24]	; 12a54 <_start@@Base+0x84>
   12a38:	cmp	r3, r0
   12a3c:	bxeq	lr
   12a40:	ldr	r3, [pc, #16]	; 12a58 <_start@@Base+0x88>
   12a44:	cmp	r3, #0
   12a48:	bxeq	lr
   12a4c:	bx	r3
   12a50:	andeq	pc, r2, r0, rrx
   12a54:	andeq	pc, r2, r0, rrx
   12a58:	andeq	r0, r0, r0
   12a5c:	ldr	r0, [pc, #36]	; 12a88 <_start@@Base+0xb8>
   12a60:	ldr	r1, [pc, #36]	; 12a8c <_start@@Base+0xbc>
   12a64:	sub	r1, r1, r0
   12a68:	asr	r1, r1, #2
   12a6c:	add	r1, r1, r1, lsr #31
   12a70:	asrs	r1, r1, #1
   12a74:	bxeq	lr
   12a78:	ldr	r3, [pc, #16]	; 12a90 <_start@@Base+0xc0>
   12a7c:	cmp	r3, #0
   12a80:	bxeq	lr
   12a84:	bx	r3
   12a88:	andeq	pc, r2, r0, rrx
   12a8c:	andeq	pc, r2, r0, rrx
   12a90:	andeq	r0, r0, r0
   12a94:	push	{r4, lr}
   12a98:	ldr	r4, [pc, #24]	; 12ab8 <_start@@Base+0xe8>
   12a9c:	ldrb	r3, [r4]
   12aa0:	cmp	r3, #0
   12aa4:	popne	{r4, pc}
   12aa8:	bl	12a30 <_start@@Base+0x60>
   12aac:	mov	r3, #1
   12ab0:	strb	r3, [r4]
   12ab4:	pop	{r4, pc}
   12ab8:	andeq	pc, r2, r4, rrx
   12abc:	b	12a5c <_start@@Base+0x8c>

00012ac0 <test@@Base>:
   12ac0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ac4:	add	fp, sp, #28
   12ac8:	sub	sp, sp, #84	; 0x54
   12acc:	mov	r9, r0
   12ad0:	add	r0, sp, #24
   12ad4:	mov	r4, r1
   12ad8:	vmov.i32	q8, #0	; 0x00000000
   12adc:	str	r3, [sp, #12]
   12ae0:	mov	r8, r2
   12ae4:	mov	r2, #0
   12ae8:	mov	r3, #0
   12aec:	add	r1, r0, #16
   12af0:	vst1.64	{d16-d17}, [r1]
   12af4:	mov	r1, #28
   12af8:	vst1.64	{d16-d17}, [r0], r1
   12afc:	movw	r1, #50714	; 0xc61a
   12b00:	vst1.32	{d16-d17}, [r0]
   12b04:	mov	r0, #1
   12b08:	movt	r1, #1
   12b0c:	str	r0, [sp, #40]	; 0x28
   12b10:	mov	r0, r9
   12b14:	str	r4, [sp, #28]
   12b18:	bl	1497c <flatcc_builder_start_buffer@@Base>
   12b1c:	sub	r0, r8, r4
   12b20:	cmp	r0, #2
   12b24:	blt	12b50 <test@@Base+0x90>
   12b28:	ldrb	r0, [r4]
   12b2c:	cmp	r0, #32
   12b30:	bls	12b3c <test@@Base+0x7c>
   12b34:	mov	r6, r4
   12b38:	b	12b64 <test@@Base+0xa4>
   12b3c:	bne	12b50 <test@@Base+0x90>
   12b40:	mov	r6, r4
   12b44:	ldrb	r0, [r6, #1]!
   12b48:	cmp	r0, #32
   12b4c:	bhi	12b64 <test@@Base+0xa4>
   12b50:	add	r0, sp, #24
   12b54:	mov	r1, r4
   12b58:	mov	r2, r8
   12b5c:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   12b60:	mov	r6, r0
   12b64:	cmp	r6, r8
   12b68:	beq	13bd0 <test@@Base+0x1110>
   12b6c:	bcs	13c18 <test@@Base+0x1158>
   12b70:	ldrb	r0, [r6]
   12b74:	cmp	r0, #123	; 0x7b
   12b78:	bne	13c18 <test@@Base+0x1158>
   12b7c:	add	r1, r6, #1
   12b80:	sub	r0, r8, r1
   12b84:	cmp	r0, #2
   12b88:	blt	12bb0 <test@@Base+0xf0>
   12b8c:	ldrb	r0, [r1]
   12b90:	cmp	r0, #32
   12b94:	bls	12ba0 <test@@Base+0xe0>
   12b98:	mov	r6, r1
   12b9c:	b	12bc0 <test@@Base+0x100>
   12ba0:	bne	12bb0 <test@@Base+0xf0>
   12ba4:	ldrb	r0, [r6, #2]!
   12ba8:	cmp	r0, #32
   12bac:	bhi	12bc0 <test@@Base+0x100>
   12bb0:	add	r0, sp, #24
   12bb4:	mov	r2, r8
   12bb8:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   12bbc:	mov	r6, r0
   12bc0:	cmp	r6, r8
   12bc4:	beq	13bd0 <test@@Base+0x1110>
   12bc8:	mov	r0, r9
   12bcc:	mov	r1, #11
   12bd0:	bl	159f8 <flatcc_builder_start_table@@Base>
   12bd4:	add	r0, sp, #20
   12bd8:	add	r4, sp, #24
   12bdc:	str	r9, [sp, #16]
   12be0:	add	r0, r0, #1
   12be4:	str	r0, [sp, #8]
   12be8:	cmp	r6, r8
   12bec:	mov	r9, r8
   12bf0:	beq	12c3c <test@@Base+0x17c>
   12bf4:	ldrb	r0, [r6]
   12bf8:	cmp	r0, #46	; 0x2e
   12bfc:	beq	12c14 <test@@Base+0x154>
   12c00:	cmp	r0, #34	; 0x22
   12c04:	bne	12c30 <test@@Base+0x170>
   12c08:	mov	r0, #0
   12c0c:	add	r9, r6, #1
   12c10:	b	12c38 <test@@Base+0x178>
   12c14:	mov	r0, r4
   12c18:	mov	r1, r6
   12c1c:	mov	r2, r8
   12c20:	mov	r3, #5
   12c24:	bl	18684 <flatcc_json_parser_set_error@@Base>
   12c28:	mov	r9, r0
   12c2c:	b	12c3c <test@@Base+0x17c>
   12c30:	mov	r0, #1
   12c34:	mov	r9, r6
   12c38:	str	r0, [sp, #36]	; 0x24
   12c3c:	sub	r3, r8, r9
   12c40:	mov	r0, #8
   12c44:	cmp	r3, #8
   12c48:	movcc	r0, r3
   12c4c:	and	r0, r0, #15
   12c50:	sub	r7, r0, #1
   12c54:	cmp	r7, #7
   12c58:	bhi	13bf8 <test@@Base+0x1138>
   12c5c:	add	r4, pc, #32
   12c60:	mov	sl, #0
   12c64:	mov	ip, #0
   12c68:	mov	lr, #0
   12c6c:	mov	r1, #0
   12c70:	mov	r6, #0
   12c74:	mov	r5, #0
   12c78:	mov	r2, #0
   12c7c:	mov	r0, #0
   12c80:	ldr	pc, [r4, r7, lsl #2]
   12c84:	andeq	r2, r1, r8, ror #25
   12c88:	andeq	r2, r1, r0, ror #25
   12c8c:	ldrdeq	r2, [r1], -r8
   12c90:	ldrdeq	r2, [r1], -r0
   12c94:	andeq	r2, r1, r4, asr #25
   12c98:			; <UNDEFINED> instruction: 0x00012cb8
   12c9c:	andeq	r2, r1, r8, lsr #25
   12ca0:	andeq	r2, r1, r4, lsr #25
   12ca4:	ldrb	ip, [r9, #7]
   12ca8:	ldrb	r0, [r9, #6]
   12cac:	mov	lr, sl
   12cb0:	orr	r0, ip, r0, lsl #8
   12cb4:	mov	sl, r0
   12cb8:	ldrb	r0, [r9, #5]
   12cbc:	mov	r1, lr
   12cc0:	orr	sl, sl, r0, lsl #16
   12cc4:	ldrb	r0, [r9, #4]
   12cc8:	mov	r6, r1
   12ccc:	orr	sl, sl, r0, lsl #24
   12cd0:	ldrb	r0, [r9, #3]
   12cd4:	orr	r5, r0, r6
   12cd8:	ldrb	r0, [r9, #2]
   12cdc:	orr	r2, r5, r0, lsl #8
   12ce0:	ldrb	r0, [r9, #1]
   12ce4:	orr	r0, r2, r0, lsl #16
   12ce8:	mov	r1, r9
   12cec:	cmp	r3, #8
   12cf0:	movw	r7, #25455	; 0x636f
   12cf4:	ldrb	r2, [r1], #8
   12cf8:	movt	r7, #29541	; 0x7365
   12cfc:	orr	r3, r0, r2, lsl #24
   12d00:	mov	r0, sl
   12d04:	movw	r2, #0
   12d08:	movle	r1, r8
   12d0c:	bfc	r0, #0, #16
   12d10:	movt	r2, #28260	; 0x6e64
   12d14:	subs	r2, r0, r2
   12d18:	sbcs	r2, r3, r7
   12d1c:	bcs	12dd0 <test@@Base+0x310>
   12d20:	movw	r0, #29299	; 0x7273
   12d24:	and	r1, sl, #-16777216	; 0xff000000
   12d28:	add	r4, sp, #24
   12d2c:	movt	r0, #26217	; 0x6669
   12d30:	eor	r1, r1, #1946157056	; 0x74000000
   12d34:	eor	r0, r3, r0
   12d38:	orrs	r0, r1, r0
   12d3c:	bne	13bf8 <test@@Base+0x1138>
   12d40:	ldr	r0, [sp, #36]	; 0x24
   12d44:	add	r1, r9, #5
   12d48:	cmp	r0, #0
   12d4c:	beq	12f44 <test@@Base+0x484>
   12d50:	cmp	r1, r8
   12d54:	mov	r3, r8
   12d58:	beq	13268 <test@@Base+0x7a8>
   12d5c:	ldrb	r3, [r1]
   12d60:	cmp	r3, #33	; 0x21
   12d64:	bcc	13218 <test@@Base+0x758>
   12d68:	add	r0, r9, #6
   12d6c:	uxtb	r2, r3
   12d70:	cmp	r2, #46	; 0x2e
   12d74:	cmpne	r2, #95	; 0x5f
   12d78:	bne	12d98 <test@@Base+0x2d8>
   12d7c:	cmp	r8, r0
   12d80:	beq	131fc <test@@Base+0x73c>
   12d84:	ldrb	r3, [r0], #1
   12d88:	add	r1, r1, #1
   12d8c:	cmp	r3, #33	; 0x21
   12d90:	bcs	12d6c <test@@Base+0x2ac>
   12d94:	b	13200 <test@@Base+0x740>
   12d98:	sxtb	r7, r3
   12d9c:	cmp	r7, #0
   12da0:	blt	12d7c <test@@Base+0x2bc>
   12da4:	sub	r7, r3, #48	; 0x30
   12da8:	uxtb	r7, r7
   12dac:	cmp	r7, #9
   12db0:	bls	12d7c <test@@Base+0x2bc>
   12db4:	orr	r3, r3, #32
   12db8:	sub	r3, r3, #97	; 0x61
   12dbc:	uxtb	r3, r3
   12dc0:	cmp	r3, #26
   12dc4:	bcc	12d7c <test@@Base+0x2bc>
   12dc8:	sub	r1, r0, #1
   12dcc:	b	13200 <test@@Base+0x740>
   12dd0:	movw	r2, #27764	; 0x6c74
   12dd4:	movt	r2, #31349	; 0x7a75
   12dd8:	cmp	r3, r2
   12ddc:	bhi	12ea0 <test@@Base+0x3e0>
   12de0:	movw	r6, #29472	; 0x7320
   12de4:	movt	r6, #28260	; 0x6e64
   12de8:	subs	r2, sl, r6
   12dec:	sbcs	r2, r3, r7
   12df0:	bcs	12f8c <test@@Base+0x4cc>
   12df4:	movw	r1, #0
   12df8:	movt	r1, #28260	; 0x6e64
   12dfc:	eor	r0, r0, r1
   12e00:	eor	r1, r3, r7
   12e04:	orrs	r0, r0, r1
   12e08:	bne	13bf8 <test@@Base+0x1138>
   12e0c:	ldr	r0, [sp, #36]	; 0x24
   12e10:	add	r1, r9, #6
   12e14:	cmp	r0, #0
   12e18:	beq	131b0 <test@@Base+0x6f0>
   12e1c:	cmp	r1, r8
   12e20:	mov	r3, r8
   12e24:	add	r4, sp, #24
   12e28:	beq	136d0 <test@@Base+0xc10>
   12e2c:	ldrb	r3, [r1]
   12e30:	cmp	r3, #33	; 0x21
   12e34:	bcc	13484 <test@@Base+0x9c4>
   12e38:	add	r0, r9, #7
   12e3c:	uxtb	r2, r3
   12e40:	cmp	r2, #46	; 0x2e
   12e44:	cmpne	r2, #95	; 0x5f
   12e48:	bne	12e68 <test@@Base+0x3a8>
   12e4c:	cmp	r8, r0
   12e50:	beq	13468 <test@@Base+0x9a8>
   12e54:	ldrb	r3, [r0], #1
   12e58:	add	r1, r1, #1
   12e5c:	cmp	r3, #33	; 0x21
   12e60:	bcs	12e3c <test@@Base+0x37c>
   12e64:	b	1346c <test@@Base+0x9ac>
   12e68:	sxtb	r7, r3
   12e6c:	cmp	r7, #0
   12e70:	blt	12e4c <test@@Base+0x38c>
   12e74:	sub	r7, r3, #48	; 0x30
   12e78:	uxtb	r7, r7
   12e7c:	cmp	r7, #9
   12e80:	bls	12e4c <test@@Base+0x38c>
   12e84:	orr	r3, r3, #32
   12e88:	sub	r3, r3, #97	; 0x61
   12e8c:	uxtb	r3, r3
   12e90:	cmp	r3, #26
   12e94:	bcc	12e4c <test@@Base+0x38c>
   12e98:	sub	r1, r0, #1
   12e9c:	b	1346c <test@@Base+0x9ac>
   12ea0:	movw	r0, #27765	; 0x6c75
   12ea4:	movt	r0, #31349	; 0x7a75
   12ea8:	teq	r3, r0
   12eac:	bne	13bf8 <test@@Base+0x1138>
   12eb0:	ldr	r0, [sp, #36]	; 0x24
   12eb4:	add	r1, r9, #4
   12eb8:	cmp	r0, #0
   12ebc:	beq	130bc <test@@Base+0x5fc>
   12ec0:	cmp	r1, r8
   12ec4:	mov	r3, r8
   12ec8:	add	r4, sp, #24
   12ecc:	beq	134a8 <test@@Base+0x9e8>
   12ed0:	ldrb	r3, [r1]
   12ed4:	cmp	r3, #33	; 0x21
   12ed8:	bcc	13244 <test@@Base+0x784>
   12edc:	add	r0, r9, #5
   12ee0:	uxtb	r2, r3
   12ee4:	cmp	r2, #46	; 0x2e
   12ee8:	cmpne	r2, #95	; 0x5f
   12eec:	bne	12f0c <test@@Base+0x44c>
   12ef0:	cmp	r8, r0
   12ef4:	beq	13228 <test@@Base+0x768>
   12ef8:	ldrb	r3, [r0], #1
   12efc:	add	r1, r1, #1
   12f00:	cmp	r3, #33	; 0x21
   12f04:	bcs	12ee0 <test@@Base+0x420>
   12f08:	b	1322c <test@@Base+0x76c>
   12f0c:	sxtb	r7, r3
   12f10:	cmp	r7, #0
   12f14:	blt	12ef0 <test@@Base+0x430>
   12f18:	sub	r7, r3, #48	; 0x30
   12f1c:	uxtb	r7, r7
   12f20:	cmp	r7, #9
   12f24:	bls	12ef0 <test@@Base+0x430>
   12f28:	orr	r3, r3, #32
   12f2c:	sub	r3, r3, #97	; 0x61
   12f30:	uxtb	r3, r3
   12f34:	cmp	r3, #26
   12f38:	bcc	12ef0 <test@@Base+0x430>
   12f3c:	sub	r1, r0, #1
   12f40:	b	1322c <test@@Base+0x76c>
   12f44:	cmp	r1, r8
   12f48:	mov	r2, r8
   12f4c:	beq	13250 <test@@Base+0x790>
   12f50:	ldrb	r0, [r1]
   12f54:	cmp	r0, #92	; 0x5c
   12f58:	beq	12f68 <test@@Base+0x4a8>
   12f5c:	cmp	r0, #34	; 0x22
   12f60:	bne	12f78 <test@@Base+0x4b8>
   12f64:	b	131a8 <test@@Base+0x6e8>
   12f68:	sub	r0, r8, r1
   12f6c:	cmp	r0, #2
   12f70:	blt	1324c <test@@Base+0x78c>
   12f74:	add	r1, r1, #1
   12f78:	add	r1, r1, #1
   12f7c:	cmp	r1, r8
   12f80:	bne	12f50 <test@@Base+0x490>
   12f84:	mov	r2, r8
   12f88:	b	13250 <test@@Base+0x790>
   12f8c:	eor	r0, sl, r6
   12f90:	eor	r2, r3, r7
   12f94:	orrs	r0, r0, r2
   12f98:	bne	13bf8 <test@@Base+0x1138>
   12f9c:	sub	r0, r8, r1
   12fa0:	mov	r2, #8
   12fa4:	ldr	r9, [sp, #16]
   12fa8:	add	r4, sp, #24
   12fac:	cmp	r0, #8
   12fb0:	movcs	r0, r2
   12fb4:	and	r0, r0, #15
   12fb8:	sub	r2, r0, #1
   12fbc:	cmp	r2, #7
   12fc0:	bhi	13d18 <test@@Base+0x1258>
   12fc4:	add	r3, pc, #4
   12fc8:	mov	r0, #0
   12fcc:	ldr	pc, [r3, r2, lsl #2]
   12fd0:	andeq	r3, r1, r4
   12fd4:	strdeq	r2, [r1], -ip
   12fd8:	strdeq	r2, [r1], -r4
   12fdc:	strdeq	r2, [r1], -r0
   12fe0:	strdeq	r2, [r1], -r0
   12fe4:	strdeq	r2, [r1], -r0
   12fe8:	strdeq	r2, [r1], -r0
   12fec:	strdeq	r2, [r1], -r0
   12ff0:	ldrb	r0, [r1, #3]
   12ff4:	ldrb	r2, [r1, #2]
   12ff8:	orr	r0, r0, r2, lsl #8
   12ffc:	ldrb	r2, [r1, #1]
   13000:	orr	r0, r0, r2, lsl #16
   13004:	ldrb	r2, [r1]
   13008:	orr	r0, r0, r2, lsl #24
   1300c:	movw	r2, #26227	; 0x6673
   13010:	movt	r2, #27749	; 0x6c65
   13014:	cmp	r0, r2
   13018:	bhi	13108 <test@@Base+0x648>
   1301c:	movw	r2, #24932	; 0x6164
   13020:	movt	r2, #27749	; 0x6c65
   13024:	teq	r0, r2
   13028:	bne	13d18 <test@@Base+0x1258>
   1302c:	ldr	r0, [sp, #36]	; 0x24
   13030:	add	r2, r1, #4
   13034:	cmp	r0, #0
   13038:	beq	133d0 <test@@Base+0x910>
   1303c:	cmp	r2, r8
   13040:	mov	r3, r8
   13044:	beq	13838 <test@@Base+0xd78>
   13048:	ldrb	r3, [r2]
   1304c:	cmp	r3, #33	; 0x21
   13050:	bcc	137f0 <test@@Base+0xd30>
   13054:	add	r0, r1, #5
   13058:	uxtb	r1, r3
   1305c:	cmp	r1, #46	; 0x2e
   13060:	cmpne	r1, #95	; 0x5f
   13064:	bne	13084 <test@@Base+0x5c4>
   13068:	cmp	r8, r0
   1306c:	beq	137d0 <test@@Base+0xd10>
   13070:	ldrb	r3, [r0], #1
   13074:	add	r2, r2, #1
   13078:	cmp	r3, #33	; 0x21
   1307c:	bcs	13058 <test@@Base+0x598>
   13080:	b	137d4 <test@@Base+0xd14>
   13084:	sxtb	r7, r3
   13088:	cmp	r7, #0
   1308c:	blt	13068 <test@@Base+0x5a8>
   13090:	sub	r7, r3, #48	; 0x30
   13094:	uxtb	r7, r7
   13098:	cmp	r7, #9
   1309c:	bls	13068 <test@@Base+0x5a8>
   130a0:	orr	r3, r3, #32
   130a4:	sub	r3, r3, #97	; 0x61
   130a8:	uxtb	r3, r3
   130ac:	cmp	r3, #26
   130b0:	bcc	13068 <test@@Base+0x5a8>
   130b4:	sub	r2, r0, #1
   130b8:	b	137d4 <test@@Base+0xd14>
   130bc:	cmp	r1, r8
   130c0:	mov	r2, r8
   130c4:	add	r4, sp, #24
   130c8:	beq	13490 <test@@Base+0x9d0>
   130cc:	ldrb	r0, [r1]
   130d0:	cmp	r0, #92	; 0x5c
   130d4:	beq	130e4 <test@@Base+0x624>
   130d8:	cmp	r0, #34	; 0x22
   130dc:	bne	130f4 <test@@Base+0x634>
   130e0:	b	13220 <test@@Base+0x760>
   130e4:	sub	r0, r8, r1
   130e8:	cmp	r0, #2
   130ec:	blt	1348c <test@@Base+0x9cc>
   130f0:	add	r1, r1, #1
   130f4:	add	r1, r1, #1
   130f8:	cmp	r1, r8
   130fc:	bne	130cc <test@@Base+0x60c>
   13100:	mov	r2, r8
   13104:	b	13490 <test@@Base+0x9d0>
   13108:	movw	r2, #26228	; 0x6674
   1310c:	movt	r2, #27749	; 0x6c65
   13110:	teq	r0, r2
   13114:	bne	13d18 <test@@Base+0x1258>
   13118:	ldr	r0, [sp, #36]	; 0x24
   1311c:	add	r2, r1, #4
   13120:	cmp	r0, #0
   13124:	beq	13418 <test@@Base+0x958>
   13128:	cmp	r2, r8
   1312c:	mov	r3, r8
   13130:	beq	1399c <test@@Base+0xedc>
   13134:	ldrb	r3, [r2]
   13138:	cmp	r3, #33	; 0x21
   1313c:	bcc	13818 <test@@Base+0xd58>
   13140:	add	r0, r1, #5
   13144:	uxtb	r1, r3
   13148:	cmp	r1, #46	; 0x2e
   1314c:	cmpne	r1, #95	; 0x5f
   13150:	bne	13170 <test@@Base+0x6b0>
   13154:	cmp	r8, r0
   13158:	beq	137f8 <test@@Base+0xd38>
   1315c:	ldrb	r3, [r0], #1
   13160:	add	r2, r2, #1
   13164:	cmp	r3, #33	; 0x21
   13168:	bcs	13144 <test@@Base+0x684>
   1316c:	b	137fc <test@@Base+0xd3c>
   13170:	sxtb	r7, r3
   13174:	cmp	r7, #0
   13178:	blt	13154 <test@@Base+0x694>
   1317c:	sub	r7, r3, #48	; 0x30
   13180:	uxtb	r7, r7
   13184:	cmp	r7, #9
   13188:	bls	13154 <test@@Base+0x694>
   1318c:	orr	r3, r3, #32
   13190:	sub	r3, r3, #97	; 0x61
   13194:	uxtb	r3, r3
   13198:	cmp	r3, #26
   1319c:	bcc	13154 <test@@Base+0x694>
   131a0:	sub	r2, r0, #1
   131a4:	b	137fc <test@@Base+0xd3c>
   131a8:	add	r3, r1, #1
   131ac:	b	13268 <test@@Base+0x7a8>
   131b0:	cmp	r1, r8
   131b4:	mov	r2, r8
   131b8:	add	r4, sp, #24
   131bc:	beq	136b8 <test@@Base+0xbf8>
   131c0:	ldrb	r0, [r1]
   131c4:	cmp	r0, #92	; 0x5c
   131c8:	beq	131d8 <test@@Base+0x718>
   131cc:	cmp	r0, #34	; 0x22
   131d0:	bne	131e8 <test@@Base+0x728>
   131d4:	b	13460 <test@@Base+0x9a0>
   131d8:	sub	r0, r8, r1
   131dc:	cmp	r0, #2
   131e0:	blt	136b4 <test@@Base+0xbf4>
   131e4:	add	r1, r1, #1
   131e8:	add	r1, r1, #1
   131ec:	cmp	r1, r8
   131f0:	bne	131c0 <test@@Base+0x700>
   131f4:	mov	r2, r8
   131f8:	b	136b8 <test@@Base+0xbf8>
   131fc:	mov	r1, r8
   13200:	cmp	r2, #46	; 0x2e
   13204:	bne	13218 <test@@Base+0x758>
   13208:	mov	r0, r4
   1320c:	mov	r2, r8
   13210:	mov	r3, #5
   13214:	b	13260 <test@@Base+0x7a0>
   13218:	mov	r3, r1
   1321c:	b	13268 <test@@Base+0x7a8>
   13220:	add	r3, r1, #1
   13224:	b	134a8 <test@@Base+0x9e8>
   13228:	mov	r1, r8
   1322c:	cmp	r2, #46	; 0x2e
   13230:	bne	13244 <test@@Base+0x784>
   13234:	mov	r0, r4
   13238:	mov	r2, r8
   1323c:	mov	r3, #5
   13240:	b	134a0 <test@@Base+0x9e0>
   13244:	mov	r3, r1
   13248:	b	134a8 <test@@Base+0x9e8>
   1324c:	mov	r2, r1
   13250:	mov	r1, r2
   13254:	mov	r0, r4
   13258:	mov	r2, r8
   1325c:	mov	r3, #20
   13260:	bl	18684 <flatcc_json_parser_set_error@@Base>
   13264:	mov	r3, r0
   13268:	ldr	r9, [sp, #16]
   1326c:	sub	r0, r8, r3
   13270:	cmp	r0, #2
   13274:	blt	132a0 <test@@Base+0x7e0>
   13278:	ldrb	r0, [r3]
   1327c:	cmp	r0, #32
   13280:	bls	1328c <test@@Base+0x7cc>
   13284:	mov	sl, r3
   13288:	b	132b4 <test@@Base+0x7f4>
   1328c:	bne	132a0 <test@@Base+0x7e0>
   13290:	mov	sl, r3
   13294:	ldrb	r0, [sl, #1]!
   13298:	cmp	r0, #32
   1329c:	bhi	132b4 <test@@Base+0x7f4>
   132a0:	mov	r0, r4
   132a4:	mov	r1, r3
   132a8:	mov	r2, r8
   132ac:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   132b0:	mov	sl, r0
   132b4:	cmp	sl, r8
   132b8:	beq	13bd0 <test@@Base+0x1110>
   132bc:	bcs	13c28 <test@@Base+0x1168>
   132c0:	ldrb	r0, [sl]
   132c4:	cmp	r0, #58	; 0x3a
   132c8:	bne	13c28 <test@@Base+0x1168>
   132cc:	add	r1, sl, #1
   132d0:	sub	r0, r8, r1
   132d4:	cmp	r0, #2
   132d8:	blt	13300 <test@@Base+0x840>
   132dc:	ldrb	r0, [r1]
   132e0:	cmp	r0, #32
   132e4:	bls	132f0 <test@@Base+0x830>
   132e8:	mov	sl, r1
   132ec:	b	13310 <test@@Base+0x850>
   132f0:	bne	13300 <test@@Base+0x840>
   132f4:	ldrb	r0, [sl, #2]!
   132f8:	cmp	r0, #32
   132fc:	bhi	13310 <test@@Base+0x850>
   13300:	mov	r0, r4
   13304:	mov	r2, r8
   13308:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   1330c:	mov	sl, r0
   13310:	cmp	sl, r8
   13314:	beq	13bd0 <test@@Base+0x1110>
   13318:	mov	r0, r9
   1331c:	mov	r1, #0
   13320:	mov	r2, #1
   13324:	mov	r3, #1
   13328:	bl	16cc8 <flatcc_builder_table_add@@Base>
   1332c:	cmp	r0, #0
   13330:	beq	13c94 <test@@Base+0x11d4>
   13334:	mov	r6, r0
   13338:	mov	r0, #0
   1333c:	mov	r1, sl
   13340:	mov	r2, r8
   13344:	sub	r3, fp, #44	; 0x2c
   13348:	str	r0, [fp, #-36]	; 0xffffffdc
   1334c:	str	r0, [fp, #-40]	; 0xffffffd8
   13350:	str	r0, [fp, #-44]	; 0xffffffd4
   13354:	strb	r0, [r6]
   13358:	sub	r0, fp, #40	; 0x28
   1335c:	str	r0, [sp]
   13360:	mov	r0, r4
   13364:	bl	1a598 <flatcc_json_parser_integer@@Base>
   13368:	cmp	r0, sl
   1336c:	mov	r1, sl
   13370:	beq	13acc <test@@Base+0x100c>
   13374:	mov	r2, r0
   13378:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1337c:	cmp	r0, #0
   13380:	beq	13398 <test@@Base+0x8d8>
   13384:	mov	r1, r2
   13388:	mov	r0, r4
   1338c:	mov	r2, r8
   13390:	mov	r3, #8
   13394:	b	133bc <test@@Base+0x8fc>
   13398:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1339c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   133a0:	subs	r3, r0, #256	; 0x100
   133a4:	sbcs	r1, r1, #0
   133a8:	bcc	133c8 <test@@Base+0x908>
   133ac:	mov	r1, r2
   133b0:	mov	r0, r4
   133b4:	mov	r2, r8
   133b8:	mov	r3, #7
   133bc:	bl	18684 <flatcc_json_parser_set_error@@Base>
   133c0:	mov	r1, r0
   133c4:	b	13acc <test@@Base+0x100c>
   133c8:	strb	r0, [r6]
   133cc:	b	13ac8 <test@@Base+0x1008>
   133d0:	cmp	r2, r8
   133d4:	mov	r1, r8
   133d8:	beq	13824 <test@@Base+0xd64>
   133dc:	ldrb	r0, [r2]
   133e0:	cmp	r0, #92	; 0x5c
   133e4:	beq	133f4 <test@@Base+0x934>
   133e8:	cmp	r0, #34	; 0x22
   133ec:	bne	13404 <test@@Base+0x944>
   133f0:	b	137c0 <test@@Base+0xd00>
   133f4:	sub	r0, r8, r2
   133f8:	cmp	r0, #2
   133fc:	blt	13820 <test@@Base+0xd60>
   13400:	add	r2, r2, #1
   13404:	add	r2, r2, #1
   13408:	cmp	r2, r8
   1340c:	bne	133dc <test@@Base+0x91c>
   13410:	mov	r1, r8
   13414:	b	13824 <test@@Base+0xd64>
   13418:	cmp	r2, r8
   1341c:	mov	r1, r8
   13420:	beq	13988 <test@@Base+0xec8>
   13424:	ldrb	r0, [r2]
   13428:	cmp	r0, #92	; 0x5c
   1342c:	beq	1343c <test@@Base+0x97c>
   13430:	cmp	r0, #34	; 0x22
   13434:	bne	1344c <test@@Base+0x98c>
   13438:	b	137c8 <test@@Base+0xd08>
   1343c:	sub	r0, r8, r2
   13440:	cmp	r0, #2
   13444:	blt	13984 <test@@Base+0xec4>
   13448:	add	r2, r2, #1
   1344c:	add	r2, r2, #1
   13450:	cmp	r2, r8
   13454:	bne	13424 <test@@Base+0x964>
   13458:	mov	r1, r8
   1345c:	b	13988 <test@@Base+0xec8>
   13460:	add	r3, r1, #1
   13464:	b	136d0 <test@@Base+0xc10>
   13468:	mov	r1, r8
   1346c:	cmp	r2, #46	; 0x2e
   13470:	bne	13484 <test@@Base+0x9c4>
   13474:	mov	r0, r4
   13478:	mov	r2, r8
   1347c:	mov	r3, #5
   13480:	b	136c8 <test@@Base+0xc08>
   13484:	mov	r3, r1
   13488:	b	136d0 <test@@Base+0xc10>
   1348c:	mov	r2, r1
   13490:	mov	r1, r2
   13494:	mov	r0, r4
   13498:	mov	r2, r8
   1349c:	mov	r3, #20
   134a0:	bl	18684 <flatcc_json_parser_set_error@@Base>
   134a4:	mov	r3, r0
   134a8:	ldr	r9, [sp, #16]
   134ac:	sub	r0, r8, r3
   134b0:	cmp	r0, #2
   134b4:	blt	134e0 <test@@Base+0xa20>
   134b8:	ldrb	r0, [r3]
   134bc:	cmp	r0, #32
   134c0:	bls	134cc <test@@Base+0xa0c>
   134c4:	mov	r6, r3
   134c8:	b	134f4 <test@@Base+0xa34>
   134cc:	bne	134e0 <test@@Base+0xa20>
   134d0:	mov	r6, r3
   134d4:	ldrb	r0, [r6, #1]!
   134d8:	cmp	r0, #32
   134dc:	bhi	134f4 <test@@Base+0xa34>
   134e0:	mov	r0, r4
   134e4:	mov	r1, r3
   134e8:	mov	r2, r8
   134ec:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   134f0:	mov	r6, r0
   134f4:	cmp	r6, r8
   134f8:	beq	13bd0 <test@@Base+0x1110>
   134fc:	bcs	13c60 <test@@Base+0x11a0>
   13500:	ldrb	r0, [r6]
   13504:	cmp	r0, #58	; 0x3a
   13508:	bne	13c60 <test@@Base+0x11a0>
   1350c:	add	r1, r6, #1
   13510:	sub	r0, r8, r1
   13514:	cmp	r0, #2
   13518:	blt	13540 <test@@Base+0xa80>
   1351c:	ldrb	r0, [r1]
   13520:	cmp	r0, #32
   13524:	bls	13530 <test@@Base+0xa70>
   13528:	mov	r6, r1
   1352c:	b	13550 <test@@Base+0xa90>
   13530:	bne	13540 <test@@Base+0xa80>
   13534:	ldrb	r0, [r6, #2]!
   13538:	cmp	r0, #32
   1353c:	bhi	13550 <test@@Base+0xa90>
   13540:	mov	r0, r4
   13544:	mov	r2, r8
   13548:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   1354c:	mov	r6, r0
   13550:	cmp	r6, r8
   13554:	beq	13bd0 <test@@Base+0x1110>
   13558:	ldrb	r0, [r6]
   1355c:	cmp	r0, #34	; 0x22
   13560:	bne	1356c <test@@Base+0xaac>
   13564:	add	r6, r6, #1
   13568:	b	13584 <test@@Base+0xac4>
   1356c:	mov	r0, r4
   13570:	mov	r1, r6
   13574:	mov	r2, r8
   13578:	mov	r3, #16
   1357c:	bl	18684 <flatcc_json_parser_set_error@@Base>
   13580:	mov	r6, r0
   13584:	mov	r0, r4
   13588:	mov	r1, r6
   1358c:	mov	r2, r8
   13590:	bl	186b4 <flatcc_json_parser_string_part@@Base>
   13594:	cmp	r0, r8
   13598:	beq	13bf0 <test@@Base+0x1130>
   1359c:	mov	sl, r0
   135a0:	ldrb	r0, [r0]
   135a4:	cmp	r0, #34	; 0x22
   135a8:	bne	135c0 <test@@Base+0xb00>
   135ac:	sub	r2, sl, r6
   135b0:	mov	r0, r9
   135b4:	mov	r1, r6
   135b8:	bl	1756c <flatcc_builder_create_string@@Base>
   135bc:	b	13658 <test@@Base+0xb98>
   135c0:	mov	r0, r9
   135c4:	bl	1585c <flatcc_builder_start_string@@Base>
   135c8:	mov	r0, r9
   135cc:	sub	r9, sl, r6
   135d0:	mov	r1, r9
   135d4:	bl	15274 <flatcc_builder_extend_string@@Base>
   135d8:	cmp	r0, #0
   135dc:	beq	13c10 <test@@Base+0x1150>
   135e0:	mov	r1, r6
   135e4:	mov	r2, r9
   135e8:	bl	12904 <memcpy@plt>
   135ec:	ldr	r9, [sp, #16]
   135f0:	mov	r0, r4
   135f4:	mov	r1, sl
   135f8:	mov	r2, r8
   135fc:	add	r3, sp, #20
   13600:	bl	18808 <flatcc_json_parser_string_escape@@Base>
   13604:	ldrb	r2, [sp, #20]
   13608:	ldr	r1, [sp, #8]
   1360c:	mov	r6, r0
   13610:	mov	r0, r9
   13614:	bl	15324 <flatcc_builder_append_string@@Base>
   13618:	mov	r0, r4
   1361c:	mov	r1, r6
   13620:	mov	r2, r8
   13624:	bl	186b4 <flatcc_json_parser_string_part@@Base>
   13628:	cmp	r0, r8
   1362c:	beq	13bf0 <test@@Base+0x1130>
   13630:	mov	sl, r0
   13634:	sub	r2, r0, r6
   13638:	mov	r0, r9
   1363c:	mov	r1, r6
   13640:	bl	15324 <flatcc_builder_append_string@@Base>
   13644:	ldrb	r0, [sl]
   13648:	cmp	r0, #34	; 0x22
   1364c:	bne	135f0 <test@@Base+0xb30>
   13650:	mov	r0, r9
   13654:	bl	176d8 <flatcc_builder_end_string@@Base>
   13658:	mov	r6, r0
   1365c:	cmp	r0, #0
   13660:	beq	13c94 <test@@Base+0x11d4>
   13664:	mov	r0, r9
   13668:	mov	r1, #10
   1366c:	bl	16b8c <flatcc_builder_table_add_offset@@Base>
   13670:	cmp	r0, #0
   13674:	beq	13c94 <test@@Base+0x11d4>
   13678:	cmp	sl, r8
   1367c:	str	r6, [r0]
   13680:	beq	13698 <test@@Base+0xbd8>
   13684:	ldrb	r0, [sl]
   13688:	cmp	r0, #34	; 0x22
   1368c:	bne	13698 <test@@Base+0xbd8>
   13690:	add	r1, sl, #1
   13694:	b	13ad4 <test@@Base+0x1014>
   13698:	mov	r0, r4
   1369c:	mov	r1, sl
   136a0:	mov	r2, r8
   136a4:	mov	r3, #20
   136a8:	bl	18684 <flatcc_json_parser_set_error@@Base>
   136ac:	mov	r1, r0
   136b0:	b	13ad4 <test@@Base+0x1014>
   136b4:	mov	r2, r1
   136b8:	mov	r1, r2
   136bc:	mov	r0, r4
   136c0:	mov	r2, r8
   136c4:	mov	r3, #20
   136c8:	bl	18684 <flatcc_json_parser_set_error@@Base>
   136cc:	mov	r3, r0
   136d0:	ldr	r9, [sp, #16]
   136d4:	sub	r0, r8, r3
   136d8:	cmp	r0, #2
   136dc:	blt	13708 <test@@Base+0xc48>
   136e0:	ldrb	r0, [r3]
   136e4:	cmp	r0, #32
   136e8:	bls	136f4 <test@@Base+0xc34>
   136ec:	mov	sl, r3
   136f0:	b	1371c <test@@Base+0xc5c>
   136f4:	bne	13708 <test@@Base+0xc48>
   136f8:	mov	sl, r3
   136fc:	ldrb	r0, [sl, #1]!
   13700:	cmp	r0, #32
   13704:	bhi	1371c <test@@Base+0xc5c>
   13708:	mov	r0, r4
   1370c:	mov	r1, r3
   13710:	mov	r2, r8
   13714:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   13718:	mov	sl, r0
   1371c:	cmp	sl, r8
   13720:	beq	13bd0 <test@@Base+0x1110>
   13724:	bcs	13c28 <test@@Base+0x1168>
   13728:	ldrb	r0, [sl]
   1372c:	cmp	r0, #58	; 0x3a
   13730:	bne	13c28 <test@@Base+0x1168>
   13734:	add	r1, sl, #1
   13738:	sub	r0, r8, r1
   1373c:	cmp	r0, #2
   13740:	blt	13768 <test@@Base+0xca8>
   13744:	ldrb	r0, [r1]
   13748:	cmp	r0, #32
   1374c:	bls	13758 <test@@Base+0xc98>
   13750:	mov	sl, r1
   13754:	b	13778 <test@@Base+0xcb8>
   13758:	bne	13768 <test@@Base+0xca8>
   1375c:	ldrb	r0, [sl, #2]!
   13760:	cmp	r0, #32
   13764:	bhi	13778 <test@@Base+0xcb8>
   13768:	mov	r0, r4
   1376c:	mov	r2, r8
   13770:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   13774:	mov	sl, r0
   13778:	cmp	sl, r8
   1377c:	beq	13bd0 <test@@Base+0x1110>
   13780:	mov	r0, r9
   13784:	mov	r1, #1
   13788:	mov	r2, #8
   1378c:	mov	r3, #8
   13790:	bl	16cc8 <flatcc_builder_table_add@@Base>
   13794:	cmp	r0, #0
   13798:	beq	13c94 <test@@Base+0x11d4>
   1379c:	mov	r3, r0
   137a0:	mov	r0, r4
   137a4:	mov	r1, sl
   137a8:	mov	r2, r8
   137ac:	bl	19af0 <flatcc_json_parser_double@@Base>
   137b0:	mov	r1, r0
   137b4:	cmp	sl, r0
   137b8:	bne	13ad4 <test@@Base+0x1014>
   137bc:	b	13c94 <test@@Base+0x11d4>
   137c0:	add	r3, r2, #1
   137c4:	b	13838 <test@@Base+0xd78>
   137c8:	add	r3, r2, #1
   137cc:	b	1399c <test@@Base+0xedc>
   137d0:	mov	r2, r8
   137d4:	cmp	r1, #46	; 0x2e
   137d8:	bne	137f0 <test@@Base+0xd30>
   137dc:	mov	r1, r2
   137e0:	mov	r0, r4
   137e4:	mov	r2, r8
   137e8:	mov	r3, #5
   137ec:	b	13830 <test@@Base+0xd70>
   137f0:	mov	r3, r2
   137f4:	b	13838 <test@@Base+0xd78>
   137f8:	mov	r2, r8
   137fc:	cmp	r1, #46	; 0x2e
   13800:	bne	13818 <test@@Base+0xd58>
   13804:	mov	r1, r2
   13808:	mov	r0, r4
   1380c:	mov	r2, r8
   13810:	mov	r3, #5
   13814:	b	13994 <test@@Base+0xed4>
   13818:	mov	r3, r2
   1381c:	b	1399c <test@@Base+0xedc>
   13820:	mov	r1, r2
   13824:	mov	r0, r4
   13828:	mov	r2, r8
   1382c:	mov	r3, #20
   13830:	bl	18684 <flatcc_json_parser_set_error@@Base>
   13834:	mov	r3, r0
   13838:	sub	r0, r8, r3
   1383c:	cmp	r0, #2
   13840:	blt	1386c <test@@Base+0xdac>
   13844:	ldrb	r0, [r3]
   13848:	cmp	r0, #32
   1384c:	bls	13858 <test@@Base+0xd98>
   13850:	mov	sl, r3
   13854:	b	13880 <test@@Base+0xdc0>
   13858:	bne	1386c <test@@Base+0xdac>
   1385c:	mov	sl, r3
   13860:	ldrb	r0, [sl, #1]!
   13864:	cmp	r0, #32
   13868:	bhi	13880 <test@@Base+0xdc0>
   1386c:	mov	r0, r4
   13870:	mov	r1, r3
   13874:	mov	r2, r8
   13878:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   1387c:	mov	sl, r0
   13880:	cmp	sl, r8
   13884:	beq	13bd0 <test@@Base+0x1110>
   13888:	bcs	13c28 <test@@Base+0x1168>
   1388c:	ldrb	r0, [sl]
   13890:	cmp	r0, #58	; 0x3a
   13894:	bne	13c28 <test@@Base+0x1168>
   13898:	add	r1, sl, #1
   1389c:	sub	r0, r8, r1
   138a0:	cmp	r0, #2
   138a4:	blt	138cc <test@@Base+0xe0c>
   138a8:	ldrb	r0, [r1]
   138ac:	cmp	r0, #32
   138b0:	bls	138bc <test@@Base+0xdfc>
   138b4:	mov	sl, r1
   138b8:	b	138dc <test@@Base+0xe1c>
   138bc:	bne	138cc <test@@Base+0xe0c>
   138c0:	ldrb	r0, [sl, #2]!
   138c4:	cmp	r0, #32
   138c8:	bhi	138dc <test@@Base+0xe1c>
   138cc:	mov	r0, r4
   138d0:	mov	r2, r8
   138d4:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   138d8:	mov	sl, r0
   138dc:	cmp	sl, r8
   138e0:	beq	13bd0 <test@@Base+0x1110>
   138e4:	mov	r0, r9
   138e8:	mov	r1, #3
   138ec:	mov	r2, #8
   138f0:	mov	r3, #8
   138f4:	bl	16cc8 <flatcc_builder_table_add@@Base>
   138f8:	cmp	r0, #0
   138fc:	beq	13c94 <test@@Base+0x11d4>
   13900:	mov	r6, r0
   13904:	mov	r0, #0
   13908:	mov	r1, sl
   1390c:	mov	r2, r8
   13910:	sub	r3, fp, #44	; 0x2c
   13914:	str	r0, [fp, #-36]	; 0xffffffdc
   13918:	str	r0, [fp, #-40]	; 0xffffffd8
   1391c:	str	r0, [fp, #-44]	; 0xffffffd4
   13920:	str	r0, [r6]
   13924:	str	r0, [r6, #4]
   13928:	sub	r0, fp, #40	; 0x28
   1392c:	str	r0, [sp]
   13930:	mov	r0, r4
   13934:	bl	1a598 <flatcc_json_parser_integer@@Base>
   13938:	cmp	r0, sl
   1393c:	mov	r1, sl
   13940:	beq	13acc <test@@Base+0x100c>
   13944:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13948:	mov	r2, r0
   1394c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13950:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13954:	cmp	r3, #0
   13958:	beq	13974 <test@@Base+0xeb4>
   1395c:	subs	r3, r0, #1
   13960:	sbcs	r3, r1, #-2147483648	; 0x80000000
   13964:	bcs	13384 <test@@Base+0x8c4>
   13968:	rsbs	r0, r0, #0
   1396c:	rsc	r1, r1, #0
   13970:	b	1397c <test@@Base+0xebc>
   13974:	cmn	r1, #1
   13978:	ble	133ac <test@@Base+0x8ec>
   1397c:	strd	r0, [r6]
   13980:	b	13ac8 <test@@Base+0x1008>
   13984:	mov	r1, r2
   13988:	mov	r0, r4
   1398c:	mov	r2, r8
   13990:	mov	r3, #20
   13994:	bl	18684 <flatcc_json_parser_set_error@@Base>
   13998:	mov	r3, r0
   1399c:	sub	r0, r8, r3
   139a0:	cmp	r0, #2
   139a4:	blt	139d0 <test@@Base+0xf10>
   139a8:	ldrb	r0, [r3]
   139ac:	cmp	r0, #32
   139b0:	bls	139bc <test@@Base+0xefc>
   139b4:	mov	sl, r3
   139b8:	b	139e4 <test@@Base+0xf24>
   139bc:	bne	139d0 <test@@Base+0xf10>
   139c0:	mov	sl, r3
   139c4:	ldrb	r0, [sl, #1]!
   139c8:	cmp	r0, #32
   139cc:	bhi	139e4 <test@@Base+0xf24>
   139d0:	mov	r0, r4
   139d4:	mov	r1, r3
   139d8:	mov	r2, r8
   139dc:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   139e0:	mov	sl, r0
   139e4:	cmp	sl, r8
   139e8:	beq	13bd0 <test@@Base+0x1110>
   139ec:	bcs	13c28 <test@@Base+0x1168>
   139f0:	ldrb	r0, [sl]
   139f4:	cmp	r0, #58	; 0x3a
   139f8:	bne	13c28 <test@@Base+0x1168>
   139fc:	add	r1, sl, #1
   13a00:	sub	r0, r8, r1
   13a04:	cmp	r0, #2
   13a08:	blt	13a30 <test@@Base+0xf70>
   13a0c:	ldrb	r0, [r1]
   13a10:	cmp	r0, #32
   13a14:	bls	13a20 <test@@Base+0xf60>
   13a18:	mov	sl, r1
   13a1c:	b	13a40 <test@@Base+0xf80>
   13a20:	bne	13a30 <test@@Base+0xf70>
   13a24:	ldrb	r0, [sl, #2]!
   13a28:	cmp	r0, #32
   13a2c:	bhi	13a40 <test@@Base+0xf80>
   13a30:	mov	r0, r4
   13a34:	mov	r2, r8
   13a38:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   13a3c:	mov	sl, r0
   13a40:	cmp	sl, r8
   13a44:	beq	13bd0 <test@@Base+0x1110>
   13a48:	mov	r0, r9
   13a4c:	mov	r1, #2
   13a50:	mov	r2, #4
   13a54:	mov	r3, #4
   13a58:	bl	16cc8 <flatcc_builder_table_add@@Base>
   13a5c:	cmp	r0, #0
   13a60:	beq	13c94 <test@@Base+0x11d4>
   13a64:	mov	r6, r0
   13a68:	mov	r0, #0
   13a6c:	mov	r1, sl
   13a70:	mov	r2, r8
   13a74:	sub	r3, fp, #44	; 0x2c
   13a78:	str	r0, [fp, #-36]	; 0xffffffdc
   13a7c:	str	r0, [fp, #-40]	; 0xffffffd8
   13a80:	str	r0, [fp, #-44]	; 0xffffffd4
   13a84:	str	r0, [r6]
   13a88:	sub	r0, fp, #40	; 0x28
   13a8c:	str	r0, [sp]
   13a90:	mov	r0, r4
   13a94:	bl	1a598 <flatcc_json_parser_integer@@Base>
   13a98:	cmp	r0, sl
   13a9c:	mov	r1, sl
   13aa0:	beq	13acc <test@@Base+0x100c>
   13aa4:	mov	r2, r0
   13aa8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13aac:	cmp	r0, #0
   13ab0:	bne	13384 <test@@Base+0x8c4>
   13ab4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13ab8:	cmp	r0, #0
   13abc:	bne	133ac <test@@Base+0x8ec>
   13ac0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13ac4:	str	r0, [r6]
   13ac8:	mov	r1, r2
   13acc:	cmp	sl, r1
   13ad0:	beq	13c94 <test@@Base+0x11d4>
   13ad4:	sub	r0, r8, r1
   13ad8:	cmp	r0, #2
   13adc:	blt	13b08 <test@@Base+0x1048>
   13ae0:	ldrb	r0, [r1]
   13ae4:	cmp	r0, #32
   13ae8:	bls	13af4 <test@@Base+0x1034>
   13aec:	mov	r6, r1
   13af0:	b	13b18 <test@@Base+0x1058>
   13af4:	bne	13b08 <test@@Base+0x1048>
   13af8:	mov	r6, r1
   13afc:	ldrb	r0, [r6, #1]!
   13b00:	cmp	r0, #32
   13b04:	bhi	13b18 <test@@Base+0x1058>
   13b08:	mov	r0, r4
   13b0c:	mov	r2, r8
   13b10:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   13b14:	mov	r6, r0
   13b18:	cmp	r6, r8
   13b1c:	beq	13bd0 <test@@Base+0x1110>
   13b20:	ldrb	r0, [r6]
   13b24:	cmp	r0, #44	; 0x2c
   13b28:	bne	13b88 <test@@Base+0x10c8>
   13b2c:	add	r1, r6, #1
   13b30:	sub	r0, r8, r1
   13b34:	cmp	r0, #2
   13b38:	blt	13b60 <test@@Base+0x10a0>
   13b3c:	ldrb	r0, [r1]
   13b40:	cmp	r0, #32
   13b44:	bls	13b50 <test@@Base+0x1090>
   13b48:	mov	r6, r1
   13b4c:	b	13b70 <test@@Base+0x10b0>
   13b50:	bne	13b60 <test@@Base+0x10a0>
   13b54:	ldrb	r0, [r6, #2]!
   13b58:	cmp	r0, #32
   13b5c:	bhi	13b70 <test@@Base+0x10b0>
   13b60:	mov	r0, r4
   13b64:	mov	r2, r8
   13b68:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   13b6c:	mov	r6, r0
   13b70:	cmp	r6, r8
   13b74:	beq	13bd0 <test@@Base+0x1110>
   13b78:	ldrb	r0, [r6]
   13b7c:	cmp	r0, #125	; 0x7d
   13b80:	bne	12be8 <test@@Base+0x128>
   13b84:	mov	r0, #125	; 0x7d
   13b88:	cmp	r6, r8
   13b8c:	bcs	13c50 <test@@Base+0x1190>
   13b90:	cmp	r0, #125	; 0x7d
   13b94:	bne	13c50 <test@@Base+0x1190>
   13b98:	mov	r0, r9
   13b9c:	bl	16388 <flatcc_builder_end_table@@Base>
   13ba0:	mov	r1, r0
   13ba4:	mov	r0, r9
   13ba8:	bl	14b6c <flatcc_builder_end_buffer@@Base>
   13bac:	add	r1, r6, #1
   13bb0:	sub	r0, r8, r1
   13bb4:	cmp	r0, #2
   13bb8:	blt	13d38 <test@@Base+0x1278>
   13bbc:	ldrb	r0, [r1]
   13bc0:	cmp	r0, #32
   13bc4:	bls	13d28 <test@@Base+0x1268>
   13bc8:	mov	r6, r1
   13bcc:	b	13d48 <test@@Base+0x1288>
   13bd0:	movw	r0, #61536	; 0xf060
   13bd4:	mov	r1, #13
   13bd8:	mov	r2, #1
   13bdc:	movt	r0, #2
   13be0:	ldr	r3, [r0]
   13be4:	movw	r0, #50719	; 0xc61f
   13be8:	movt	r0, #1
   13bec:	bl	12940 <fwrite@plt>
   13bf0:	mov	sl, r8
   13bf4:	b	13c94 <test@@Base+0x11d4>
   13bf8:	add	r0, sp, #24
   13bfc:	mov	r1, r9
   13c00:	mov	r2, r8
   13c04:	mov	r3, #13
   13c08:	bl	18684 <flatcc_json_parser_set_error@@Base>
   13c0c:	mov	sl, r0
   13c10:	ldr	r9, [sp, #16]
   13c14:	b	13c94 <test@@Base+0x11d4>
   13c18:	movw	r0, #61536	; 0xf060
   13c1c:	movw	r1, #50733	; 0xc62d
   13c20:	mov	r2, #123	; 0x7b
   13c24:	b	13c6c <test@@Base+0x11ac>
   13c28:	movw	r0, #61536	; 0xf060
   13c2c:	movw	r1, #50733	; 0xc62d
   13c30:	mov	r2, #58	; 0x3a
   13c34:	movt	r0, #2
   13c38:	movt	r1, #1
   13c3c:	ldr	r0, [r0]
   13c40:	bl	1297c <fprintf@plt>
   13c44:	add	r0, sp, #24
   13c48:	mov	r1, sl
   13c4c:	b	13c84 <test@@Base+0x11c4>
   13c50:	movw	r0, #61536	; 0xf060
   13c54:	movw	r1, #50733	; 0xc62d
   13c58:	mov	r2, #125	; 0x7d
   13c5c:	b	13c6c <test@@Base+0x11ac>
   13c60:	movw	r0, #61536	; 0xf060
   13c64:	movw	r1, #50733	; 0xc62d
   13c68:	mov	r2, #58	; 0x3a
   13c6c:	movt	r0, #2
   13c70:	movt	r1, #1
   13c74:	ldr	r0, [r0]
   13c78:	bl	1297c <fprintf@plt>
   13c7c:	add	r0, sp, #24
   13c80:	mov	r1, r6
   13c84:	mov	r2, r8
   13c88:	mov	r3, #17
   13c8c:	bl	18684 <flatcc_json_parser_set_error@@Base>
   13c90:	mov	sl, r0
   13c94:	movw	r0, #61536	; 0xf060
   13c98:	movt	r0, #2
   13c9c:	ldr	r4, [r0]
   13ca0:	ldr	r0, [sp, #48]	; 0x30
   13ca4:	cmp	r0, #0
   13ca8:	bne	13cc8 <test@@Base+0x1208>
   13cac:	movw	r0, #50793	; 0xc669
   13cb0:	mov	r1, #15
   13cb4:	mov	r2, #1
   13cb8:	mov	r3, r4
   13cbc:	movt	r0, #1
   13cc0:	bl	12940 <fwrite@plt>
   13cc4:	b	13d00 <test@@Base+0x1240>
   13cc8:	ldr	r5, [sp, #28]
   13ccc:	ldr	r6, [sp, #40]	; 0x28
   13cd0:	ldr	r7, [sp, #60]	; 0x3c
   13cd4:	bl	18664 <flatcc_json_parser_error_string@@Base>
   13cd8:	movw	r1, #50782	; 0xc65e
   13cdc:	str	r0, [sp]
   13ce0:	add	r0, r7, #1
   13ce4:	mov	r2, r6
   13ce8:	sub	r3, r0, r5
   13cec:	movt	r1, #1
   13cf0:	mov	r0, r4
   13cf4:	bl	1297c <fprintf@plt>
   13cf8:	mov	r0, r9
   13cfc:	bl	14110 <flatcc_builder_reset@@Base>
   13d00:	ldr	r0, [sp, #48]	; 0x30
   13d04:	ldr	r1, [sp, #12]
   13d08:	str	r0, [r1]
   13d0c:	mov	r0, sl
   13d10:	sub	sp, fp, #28
   13d14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d18:	add	r0, sp, #24
   13d1c:	mov	r2, r8
   13d20:	mov	r3, #13
   13d24:	b	13c8c <test@@Base+0x11cc>
   13d28:	bne	13d38 <test@@Base+0x1278>
   13d2c:	ldrb	r0, [r6, #2]!
   13d30:	cmp	r0, #32
   13d34:	bhi	13d48 <test@@Base+0x1288>
   13d38:	add	r0, sp, #24
   13d3c:	mov	r2, r8
   13d40:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   13d44:	mov	r6, r0
   13d48:	cmp	r6, r8
   13d4c:	mov	sl, r8
   13d50:	beq	13c94 <test@@Base+0x11d4>
   13d54:	movw	r0, #61536	; 0xf060
   13d58:	mov	r1, #26
   13d5c:	mov	r2, #1
   13d60:	movt	r0, #2
   13d64:	ldr	r3, [r0]
   13d68:	movw	r0, #50755	; 0xc643
   13d6c:	movt	r0, #1
   13d70:	bl	12940 <fwrite@plt>
   13d74:	mov	sl, r6
   13d78:	b	13c94 <test@@Base+0x11d4>

00013d7c <main@@Base>:
   13d7c:	push	{r4, sl, fp, lr}
   13d80:	add	fp, sp, #8
   13d84:	sub	sp, sp, #240	; 0xf0
   13d88:	mvn	r0, #0
   13d8c:	add	r4, sp, #4
   13d90:	str	r0, [fp, #-12]
   13d94:	mov	r0, r4
   13d98:	bl	13f80 <flatcc_builder_init@@Base>
   13d9c:	movw	r1, #50068	; 0xc394
   13da0:	movw	r0, #645	; 0x285
   13da4:	sub	r3, fp, #12
   13da8:	movt	r1, #1
   13dac:	add	r2, r1, r0
   13db0:	mov	r0, r4
   13db4:	bl	12ac0 <test@@Base>
   13db8:	mov	r0, r4
   13dbc:	bl	1411c <flatcc_builder_clear@@Base>
   13dc0:	ldr	r0, [fp, #-12]
   13dc4:	sub	sp, fp, #8
   13dc8:	pop	{r4, sl, fp, pc}

00013dcc <flatcc_builder_default_alloc@@Base>:
   13dcc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13dd0:	add	fp, sp, #24
   13dd4:	mov	r4, r1
   13dd8:	cmp	r2, #0
   13ddc:	beq	13e24 <flatcc_builder_default_alloc@@Base+0x58>
   13de0:	ldr	r0, [fp, #8]
   13de4:	mov	r8, r3
   13de8:	sub	r1, r0, #1
   13dec:	cmp	r1, #6
   13df0:	bhi	13e4c <flatcc_builder_default_alloc@@Base+0x80>
   13df4:	add	r3, pc, #4
   13df8:	mov	r0, #256	; 0x100
   13dfc:	ldr	pc, [r3, r1, lsl #2]
   13e00:	andeq	r3, r1, r0, ror #28
   13e04:	andeq	r3, r1, ip, asr #28
   13e08:	andeq	r3, r1, ip, asr #28
   13e0c:	andeq	r3, r1, ip, lsl lr
   13e10:	andeq	r3, r1, r4, asr lr
   13e14:	andeq	r3, r1, ip, asr #28
   13e18:	andeq	r3, r1, ip, asr lr
   13e1c:	mov	r0, #288	; 0x120
   13e20:	b	13e60 <flatcc_builder_default_alloc@@Base+0x94>
   13e24:	ldr	r0, [r4]
   13e28:	cmp	r0, #0
   13e2c:	beq	13e44 <flatcc_builder_default_alloc@@Base+0x78>
   13e30:	bl	128f8 <free@plt>
   13e34:	mov	r6, #0
   13e38:	str	r6, [r4]
   13e3c:	str	r6, [r4, #4]
   13e40:	b	13ebc <flatcc_builder_default_alloc@@Base+0xf0>
   13e44:	mov	r6, #0
   13e48:	b	13ebc <flatcc_builder_default_alloc@@Base+0xf0>
   13e4c:	mov	r0, #32
   13e50:	b	13e60 <flatcc_builder_default_alloc@@Base+0x94>
   13e54:	mov	r0, r2
   13e58:	b	13e60 <flatcc_builder_default_alloc@@Base+0x94>
   13e5c:	mov	r0, #64	; 0x40
   13e60:	mov	r7, r0
   13e64:	lsl	r0, r0, #1
   13e68:	cmp	r7, r2
   13e6c:	bcc	13e60 <flatcc_builder_default_alloc@@Base+0x94>
   13e70:	ldr	r0, [r4, #4]
   13e74:	mov	r6, #0
   13e78:	cmp	r0, r2
   13e7c:	lsrcs	r0, r0, #1
   13e80:	cmpcs	r0, r7
   13e84:	bcs	13ebc <flatcc_builder_default_alloc@@Base+0xf0>
   13e88:	ldr	r0, [r4]
   13e8c:	mov	r1, r7
   13e90:	bl	12934 <realloc@plt>
   13e94:	cmp	r0, #0
   13e98:	beq	13eb8 <flatcc_builder_default_alloc@@Base+0xec>
   13e9c:	cmp	r8, #0
   13ea0:	mov	r5, r0
   13ea4:	ldrne	r1, [r4, #4]
   13ea8:	cmpne	r7, r1
   13eac:	bhi	13ec4 <flatcc_builder_default_alloc@@Base+0xf8>
   13eb0:	stm	r4, {r5, r7}
   13eb4:	b	13ebc <flatcc_builder_default_alloc@@Base+0xf0>
   13eb8:	mvn	r6, #0
   13ebc:	mov	r0, r6
   13ec0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ec4:	add	r0, r5, r1
   13ec8:	sub	r2, r7, r1
   13ecc:	mov	r1, #0
   13ed0:	bl	12994 <memset@plt>
   13ed4:	b	13eb0 <flatcc_builder_default_alloc@@Base+0xe4>

00013ed8 <flatcc_builder_flush_vtable_cache@@Base>:
   13ed8:	push	{r4, r5, fp, lr}
   13edc:	add	fp, sp, #8
   13ee0:	mov	r4, r0
   13ee4:	ldr	r0, [r0, #116]	; 0x74
   13ee8:	cmp	r0, #0
   13eec:	popeq	{r4, r5, fp, pc}
   13ef0:	ldr	r0, [r4, #92]	; 0x5c
   13ef4:	ldr	r2, [r4, #96]	; 0x60
   13ef8:	mov	r1, #0
   13efc:	mov	r5, #0
   13f00:	bl	12994 <memset@plt>
   13f04:	mov	r0, #16
   13f08:	str	r5, [r4, #120]	; 0x78
   13f0c:	str	r0, [r4, #124]	; 0x7c
   13f10:	pop	{r4, r5, fp, pc}

00013f14 <flatcc_builder_custom_init@@Base>:
   13f14:	push	{r4, r5, r6, r7, fp, lr}
   13f18:	add	fp, sp, #16
   13f1c:	mov	r6, r2
   13f20:	mov	r7, r1
   13f24:	mov	r1, #0
   13f28:	mov	r2, #232	; 0xe8
   13f2c:	mov	r5, r3
   13f30:	mov	r4, r0
   13f34:	bl	12994 <memset@plt>
   13f38:	ldr	r0, [fp, #8]
   13f3c:	cmp	r7, #0
   13f40:	bne	13f58 <flatcc_builder_custom_init@@Base+0x44>
   13f44:	movw	r7, #32140	; 0x7d8c
   13f48:	mov	r1, #1
   13f4c:	add	r6, r4, #188	; 0xbc
   13f50:	movt	r7, #1
   13f54:	str	r1, [r4, #184]	; 0xb8
   13f58:	movw	r1, #15820	; 0x3dcc
   13f5c:	cmp	r5, #0
   13f60:	str	r6, [r4, #36]	; 0x24
   13f64:	str	r0, [r4, #40]	; 0x28
   13f68:	mov	r0, #0
   13f6c:	str	r7, [r4, #44]	; 0x2c
   13f70:	movt	r1, #1
   13f74:	movne	r1, r5
   13f78:	str	r1, [r4, #48]	; 0x30
   13f7c:	pop	{r4, r5, r6, r7, fp, pc}

00013f80 <flatcc_builder_init@@Base>:
   13f80:	push	{r4, r5, fp, lr}
   13f84:	add	fp, sp, #8
   13f88:	mov	r1, #0
   13f8c:	mov	r2, #232	; 0xe8
   13f90:	mov	r4, r0
   13f94:	mov	r5, #0
   13f98:	bl	12994 <memset@plt>
   13f9c:	mov	r0, #1
   13fa0:	movw	r2, #32140	; 0x7d8c
   13fa4:	add	r1, r4, #188	; 0xbc
   13fa8:	str	r0, [r4, #184]	; 0xb8
   13fac:	movw	r0, #15820	; 0x3dcc
   13fb0:	movt	r2, #1
   13fb4:	str	r1, [r4, #36]	; 0x24
   13fb8:	str	r5, [r4, #40]	; 0x28
   13fbc:	movt	r0, #1
   13fc0:	str	r2, [r4, #44]	; 0x2c
   13fc4:	str	r0, [r4, #48]	; 0x30
   13fc8:	mov	r0, #0
   13fcc:	pop	{r4, r5, fp, pc}

00013fd0 <flatcc_builder_custom_reset@@Base>:
   13fd0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13fd4:	add	fp, sp, #24
   13fd8:	sub	sp, sp, #8
   13fdc:	mov	r9, r2
   13fe0:	mov	r8, r1
   13fe4:	mov	r4, r0
   13fe8:	add	r7, r0, #52	; 0x34
   13fec:	mov	r5, #0
   13ff0:	ldr	r0, [r7]
   13ff4:	cmp	r0, #0
   13ff8:	beq	14040 <flatcc_builder_custom_reset@@Base+0x70>
   13ffc:	cmp	r9, #0
   14000:	cmpne	r5, #5
   14004:	beq	14030 <flatcc_builder_custom_reset@@Base+0x60>
   14008:	ldr	r0, [r4, #40]	; 0x28
   1400c:	ldr	r6, [r4, #48]	; 0x30
   14010:	mov	r1, r7
   14014:	mov	r2, #1
   14018:	mov	r3, #1
   1401c:	str	r5, [sp]
   14020:	blx	r6
   14024:	cmp	r0, #0
   14028:	bne	140e0 <flatcc_builder_custom_reset@@Base+0x110>
   1402c:	ldr	r0, [r7]
   14030:	ldr	r2, [r7, #4]
   14034:	mov	r1, #0
   14038:	bl	12994 <memset@plt>
   1403c:	b	1404c <flatcc_builder_custom_reset@@Base+0x7c>
   14040:	ldr	r0, [r7, #4]
   14044:	cmp	r0, #0
   14048:	bne	140f0 <flatcc_builder_custom_reset@@Base+0x120>
   1404c:	add	r5, r5, #1
   14050:	add	r7, r7, #8
   14054:	cmp	r5, #8
   14058:	bcc	13ff0 <flatcc_builder_custom_reset@@Base+0x20>
   1405c:	mov	r0, #0
   14060:	vmov.i32	q8, #0	; 0x00000000
   14064:	mov	r5, #0
   14068:	str	r0, [r4, #120]	; 0x78
   1406c:	ldr	r1, [r4, #124]	; 0x7c
   14070:	cmp	r1, #0
   14074:	movne	r1, #16
   14078:	strne	r1, [r4, #124]	; 0x7c
   1407c:	add	r1, r4, #148	; 0x94
   14080:	strh	r0, [r4, #128]	; 0x80
   14084:	str	r0, [r4, #136]	; 0x88
   14088:	str	r0, [r4, #140]	; 0x8c
   1408c:	str	r0, [r4, #32]
   14090:	cmp	r8, #0
   14094:	vst1.32	{d16-d17}, [r1]
   14098:	ldr	r2, [r4, #60]	; 0x3c
   1409c:	ldr	r1, [r4, #52]	; 0x34
   140a0:	ldr	r3, [r4, #76]	; 0x4c
   140a4:	str	r2, [r4, #16]
   140a8:	str	r0, [r4, #20]
   140ac:	str	r0, [r4, #24]
   140b0:	movne	r0, #0
   140b4:	str	r3, [r4]
   140b8:	str	r1, [r4, #4]
   140bc:	strne	r0, [r4, #172]	; 0xac
   140c0:	strne	r0, [r4, #176]	; 0xb0
   140c4:	strne	r0, [r4, #180]	; 0xb4
   140c8:	ldr	r0, [r4, #184]	; 0xb8
   140cc:	cmp	r0, #0
   140d0:	beq	140e4 <flatcc_builder_custom_reset@@Base+0x114>
   140d4:	add	r0, r4, #188	; 0xbc
   140d8:	bl	17c5c <flatcc_emitter_reset@@Base>
   140dc:	b	140e4 <flatcc_builder_custom_reset@@Base+0x114>
   140e0:	mvn	r5, #0
   140e4:	mov	r0, r5
   140e8:	sub	sp, fp, #24
   140ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   140f0:	movw	r0, #51321	; 0xc879
   140f4:	movw	r1, #51339	; 0xc88b
   140f8:	movw	r3, #51409	; 0xc8d1
   140fc:	movw	r2, #434	; 0x1b2
   14100:	movt	r0, #1
   14104:	movt	r1, #1
   14108:	movt	r3, #1
   1410c:	bl	129c4 <__assert_fail@plt>

00014110 <flatcc_builder_reset@@Base>:
   14110:	mov	r1, #0
   14114:	mov	r2, #0
   14118:	b	13fd0 <flatcc_builder_custom_reset@@Base>

0001411c <flatcc_builder_clear@@Base>:
   1411c:	push	{r4, r5, r6, r7, fp, lr}
   14120:	add	fp, sp, #16
   14124:	sub	sp, sp, #8
   14128:	mov	r7, r0
   1412c:	add	r5, r0, #52	; 0x34
   14130:	mov	r6, #0
   14134:	ldr	r0, [r7, #40]	; 0x28
   14138:	ldr	r4, [r7, #48]	; 0x30
   1413c:	mov	r1, r5
   14140:	mov	r2, #0
   14144:	mov	r3, #0
   14148:	str	r6, [sp]
   1414c:	blx	r4
   14150:	add	r6, r6, #1
   14154:	add	r5, r5, #8
   14158:	cmp	r6, #8
   1415c:	bne	14134 <flatcc_builder_clear@@Base+0x18>
   14160:	ldr	r0, [r7, #184]	; 0xb8
   14164:	cmp	r0, #0
   14168:	beq	14174 <flatcc_builder_clear@@Base+0x58>
   1416c:	add	r0, r7, #188	; 0xbc
   14170:	bl	17d28 <flatcc_emitter_clear@@Base>
   14174:	mov	r0, r7
   14178:	mov	r1, #0
   1417c:	mov	r2, #232	; 0xe8
   14180:	sub	sp, fp, #16
   14184:	pop	{r4, r5, r6, r7, fp, lr}
   14188:	b	12994 <memset@plt>

0001418c <flatcc_builder_enter_user_frame_ptr@@Base>:
   1418c:	push	{r4, r5, r6, r7, fp, lr}
   14190:	add	fp, sp, #16
   14194:	sub	sp, sp, #8
   14198:	mov	r4, r0
   1419c:	ldr	r0, [r0, #112]	; 0x70
   141a0:	add	r1, r1, #7
   141a4:	ldr	r7, [r4, #228]	; 0xe4
   141a8:	bic	r5, r1, #3
   141ac:	add	r6, r4, #108	; 0x6c
   141b0:	add	r2, r7, r5
   141b4:	cmp	r2, r0
   141b8:	bls	141e0 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   141bc:	ldr	r0, [r4, #40]	; 0x28
   141c0:	ldr	ip, [r4, #48]	; 0x30
   141c4:	mov	r1, #7
   141c8:	mov	r3, #0
   141cc:	str	r1, [sp]
   141d0:	mov	r1, r6
   141d4:	blx	ip
   141d8:	cmp	r0, #0
   141dc:	bne	1422c <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
   141e0:	ldr	r0, [r6]
   141e4:	adds	r6, r0, r7
   141e8:	beq	1421c <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
   141ec:	mov	r0, r6
   141f0:	mov	r1, #0
   141f4:	mov	r2, r5
   141f8:	bl	12994 <memset@plt>
   141fc:	ldr	r0, [r4, #224]	; 0xe0
   14200:	str	r0, [r6], #4
   14204:	ldr	r0, [r4, #228]	; 0xe4
   14208:	add	r1, r0, #4
   1420c:	add	r0, r0, r5
   14210:	str	r1, [r4, #224]	; 0xe0
   14214:	str	r0, [r4, #228]	; 0xe4
   14218:	b	14220 <flatcc_builder_enter_user_frame_ptr@@Base+0x94>
   1421c:	mov	r6, #0
   14220:	mov	r0, r6
   14224:	sub	sp, fp, #16
   14228:	pop	{r4, r5, r6, r7, fp, pc}
   1422c:	movw	r0, #55857	; 0xda31
   14230:	movw	r1, #51339	; 0xc88b
   14234:	movw	r3, #55403	; 0xd86b
   14238:	mov	r2, #308	; 0x134
   1423c:	movt	r0, #1
   14240:	movt	r1, #1
   14244:	movt	r3, #1
   14248:	bl	129c4 <__assert_fail@plt>

0001424c <flatcc_builder_enter_user_frame@@Base>:
   1424c:	push	{r4, r5, r6, r7, fp, lr}
   14250:	add	fp, sp, #16
   14254:	sub	sp, sp, #8
   14258:	mov	r4, r0
   1425c:	ldr	r0, [r0, #112]	; 0x70
   14260:	add	r1, r1, #7
   14264:	ldr	r7, [r4, #228]	; 0xe4
   14268:	bic	r5, r1, #3
   1426c:	add	r6, r4, #108	; 0x6c
   14270:	add	r2, r7, r5
   14274:	cmp	r2, r0
   14278:	bls	142a0 <flatcc_builder_enter_user_frame@@Base+0x54>
   1427c:	ldr	r0, [r4, #40]	; 0x28
   14280:	ldr	ip, [r4, #48]	; 0x30
   14284:	mov	r1, #7
   14288:	mov	r3, #0
   1428c:	str	r1, [sp]
   14290:	mov	r1, r6
   14294:	blx	ip
   14298:	cmp	r0, #0
   1429c:	bne	142e8 <flatcc_builder_enter_user_frame@@Base+0x9c>
   142a0:	ldr	r0, [r6]
   142a4:	adds	r6, r0, r7
   142a8:	beq	142dc <flatcc_builder_enter_user_frame@@Base+0x90>
   142ac:	mov	r0, r6
   142b0:	mov	r1, #0
   142b4:	mov	r2, r5
   142b8:	bl	12994 <memset@plt>
   142bc:	ldr	r0, [r4, #224]	; 0xe0
   142c0:	str	r0, [r6]
   142c4:	ldr	r1, [r4, #228]	; 0xe4
   142c8:	add	r0, r1, #4
   142cc:	add	r1, r1, r5
   142d0:	str	r0, [r4, #224]	; 0xe0
   142d4:	str	r1, [r4, #228]	; 0xe4
   142d8:	b	142e0 <flatcc_builder_enter_user_frame@@Base+0x94>
   142dc:	mov	r0, #0
   142e0:	sub	sp, fp, #16
   142e4:	pop	{r4, r5, r6, r7, fp, pc}
   142e8:	movw	r0, #55857	; 0xda31
   142ec:	movw	r1, #51339	; 0xc88b
   142f0:	movw	r3, #55403	; 0xd86b
   142f4:	mov	r2, #308	; 0x134
   142f8:	movt	r0, #1
   142fc:	movt	r1, #1
   14300:	movt	r3, #1
   14304:	bl	129c4 <__assert_fail@plt>

00014308 <flatcc_builder_exit_user_frame@@Base>:
   14308:	ldr	r1, [r0, #224]	; 0xe0
   1430c:	cmp	r1, #0
   14310:	subne	r2, r1, #4
   14314:	strne	r2, [r0, #228]	; 0xe4
   14318:	ldrne	r2, [r0, #108]	; 0x6c
   1431c:	addne	r1, r2, r1
   14320:	ldrne	r1, [r1, #-4]
   14324:	strne	r1, [r0, #224]	; 0xe0
   14328:	movne	r0, r1
   1432c:	bxne	lr
   14330:	push	{fp, lr}
   14334:	mov	fp, sp
   14338:	movw	r0, #51471	; 0xc90f
   1433c:	movw	r1, #51339	; 0xc88b
   14340:	movw	r3, #51496	; 0xc928
   14344:	movw	r2, #542	; 0x21e
   14348:	movt	r0, #1
   1434c:	movt	r1, #1
   14350:	movt	r3, #1
   14354:	bl	129c4 <__assert_fail@plt>

00014358 <flatcc_builder_exit_user_frame_at@@Base>:
   14358:	ldr	r2, [r0, #224]	; 0xe0
   1435c:	cmp	r2, r1
   14360:	bcc	1436c <flatcc_builder_exit_user_frame_at@@Base+0x14>
   14364:	str	r1, [r0, #224]	; 0xe0
   14368:	b	14308 <flatcc_builder_exit_user_frame@@Base>
   1436c:	push	{fp, lr}
   14370:	mov	fp, sp
   14374:	movw	r0, #51554	; 0xc962
   14378:	movw	r1, #51339	; 0xc88b
   1437c:	movw	r3, #51585	; 0xc981
   14380:	movw	r2, #551	; 0x227
   14384:	movt	r0, #1
   14388:	movt	r1, #1
   1438c:	movt	r3, #1
   14390:	bl	129c4 <__assert_fail@plt>

00014394 <flatcc_builder_get_current_user_frame@@Base>:
   14394:	ldr	r0, [r0, #224]	; 0xe0
   14398:	bx	lr

0001439c <flatcc_builder_get_user_frame_ptr@@Base>:
   1439c:	ldr	r0, [r0, #108]	; 0x6c
   143a0:	add	r0, r0, r1
   143a4:	bx	lr

000143a8 <flatcc_builder_embed_buffer@@Base>:
   143a8:	push	{r4, r5, r6, r7, fp, lr}
   143ac:	add	fp, sp, #16
   143b0:	sub	sp, sp, #88	; 0x58
   143b4:	mov	r4, r0
   143b8:	ldr	r0, [fp, #8]
   143bc:	mov	r5, r3
   143c0:	mov	r7, r2
   143c4:	mov	r2, r1
   143c8:	sub	r1, fp, #18
   143cc:	strh	r0, [fp, #-18]	; 0xffffffee
   143d0:	mov	r0, r4
   143d4:	ldr	r3, [r4, #152]	; 0x98
   143d8:	cmp	r3, #0
   143dc:	movwne	r3, #1
   143e0:	bl	14518 <flatcc_builder_embed_buffer@@Base+0x170>
   143e4:	ldr	r1, [fp, #12]
   143e8:	ldrh	r3, [fp, #-18]	; 0xffffffee
   143ec:	ldr	r0, [r4, #136]	; 0x88
   143f0:	mov	r2, #0
   143f4:	str	r2, [sp, #8]
   143f8:	str	r2, [sp, #12]
   143fc:	and	r1, r1, #2
   14400:	sub	r3, r3, #1
   14404:	add	r1, r5, r1, lsl #1
   14408:	sub	r1, r0, r1
   1440c:	and	r3, r1, r3
   14410:	add	r1, r3, r5
   14414:	str	r1, [fp, #-24]	; 0xffffffe8
   14418:	ldr	r1, [r4, #152]	; 0x98
   1441c:	cmp	r1, #0
   14420:	mov	r1, #0
   14424:	beq	14444 <flatcc_builder_embed_buffer@@Base+0x9c>
   14428:	sub	r1, fp, #24
   1442c:	mov	r2, #1
   14430:	str	r1, [sp, #16]
   14434:	mov	r1, #4
   14438:	str	r1, [sp, #8]
   1443c:	str	r1, [sp, #20]
   14440:	str	r2, [sp, #12]
   14444:	cmp	r5, #0
   14448:	beq	1446c <flatcc_builder_embed_buffer@@Base+0xc4>
   1444c:	add	r6, sp, #8
   14450:	add	r1, r1, r5
   14454:	add	r6, r6, r2, lsl #3
   14458:	add	r2, r2, #1
   1445c:	str	r1, [sp, #8]
   14460:	str	r7, [r6, #8]
   14464:	str	r5, [r6, #12]
   14468:	str	r2, [sp, #12]
   1446c:	cmp	r3, #0
   14470:	beq	1449c <flatcc_builder_embed_buffer@@Base+0xf4>
   14474:	add	r7, sp, #8
   14478:	movw	r6, #50809	; 0xc679
   1447c:	add	r1, r1, r3
   14480:	add	r7, r7, r2, lsl #3
   14484:	add	r2, r2, #1
   14488:	movt	r6, #1
   1448c:	str	r1, [sp, #8]
   14490:	str	r6, [r7, #8]
   14494:	str	r3, [r7, #12]
   14498:	str	r2, [sp, #12]
   1449c:	cmp	r1, #0
   144a0:	ble	144f8 <flatcc_builder_embed_buffer@@Base+0x150>
   144a4:	sub	r5, r0, r1
   144a8:	ldr	r0, [r4, #36]	; 0x24
   144ac:	ldr	r7, [r4, #44]	; 0x2c
   144b0:	str	r1, [sp]
   144b4:	add	r1, sp, #8
   144b8:	add	r1, r1, #8
   144bc:	mov	r3, r5
   144c0:	blx	r7
   144c4:	cmp	r0, #0
   144c8:	streq	r5, [r4, #136]	; 0x88
   144cc:	moveq	r0, r5
   144d0:	subeq	sp, fp, #16
   144d4:	popeq	{r4, r5, r6, r7, fp, pc}
   144d8:	movw	r0, #55857	; 0xda31
   144dc:	movw	r1, #51339	; 0xc88b
   144e0:	movw	r3, #55536	; 0xd8f0
   144e4:	movw	r2, #651	; 0x28b
   144e8:	movt	r0, #1
   144ec:	movt	r1, #1
   144f0:	movt	r3, #1
   144f4:	bl	129c4 <__assert_fail@plt>
   144f8:	movw	r0, #55857	; 0xda31
   144fc:	movw	r1, #51339	; 0xc88b
   14500:	movw	r3, #55536	; 0xd8f0
   14504:	movw	r2, #647	; 0x287
   14508:	movt	r0, #1
   1450c:	movt	r1, #1
   14510:	movt	r3, #1
   14514:	bl	129c4 <__assert_fail@plt>
   14518:	push	{r4, sl, fp, lr}
   1451c:	add	fp, sp, #8
   14520:	sub	sp, sp, #80	; 0x50
   14524:	cmp	r2, #0
   14528:	bne	14538 <flatcc_builder_embed_buffer@@Base+0x190>
   1452c:	ldrh	r2, [r0, #132]	; 0x84
   14530:	cmp	r2, #0
   14534:	movweq	r2, #1
   14538:	ldrh	r4, [r1]
   1453c:	cmp	r4, #4
   14540:	movwcc	r4, #4
   14544:	cmpcs	r4, r2
   14548:	bcs	14558 <flatcc_builder_embed_buffer@@Base+0x1b0>
   1454c:	cmp	r4, r2
   14550:	movcc	r4, r2
   14554:	strh	r4, [r1]
   14558:	cmp	r3, #0
   1455c:	bne	145d0 <flatcc_builder_embed_buffer@@Base+0x228>
   14560:	ldr	r4, [r0, #140]	; 0x8c
   14564:	sub	r1, r2, #1
   14568:	ands	r1, r4, r1
   1456c:	beq	145d0 <flatcc_builder_embed_buffer@@Base+0x228>
   14570:	movw	r2, #50809	; 0xc679
   14574:	cmn	r1, #1
   14578:	movt	r2, #1
   1457c:	str	r2, [sp, #16]
   14580:	mov	r2, #1
   14584:	str	r1, [sp, #8]
   14588:	str	r1, [sp, #20]
   1458c:	str	r2, [sp, #12]
   14590:	add	r2, r1, r4
   14594:	str	r2, [r0, #140]	; 0x8c
   14598:	ble	145d8 <flatcc_builder_embed_buffer@@Base+0x230>
   1459c:	ldr	r2, [r0, #36]	; 0x24
   145a0:	ldr	ip, [r0, #44]	; 0x2c
   145a4:	add	r0, sp, #8
   145a8:	str	r1, [sp]
   145ac:	mov	r3, r4
   145b0:	add	r1, r0, #8
   145b4:	mov	r0, r2
   145b8:	mov	r2, #1
   145bc:	blx	ip
   145c0:	cmp	r0, #0
   145c4:	bne	145f8 <flatcc_builder_embed_buffer@@Base+0x250>
   145c8:	cmn	r4, #1
   145cc:	beq	14618 <flatcc_builder_embed_buffer@@Base+0x270>
   145d0:	sub	sp, fp, #8
   145d4:	pop	{r4, sl, fp, pc}
   145d8:	movw	r0, #55857	; 0xda31
   145dc:	movw	r1, #51339	; 0xc88b
   145e0:	movw	r3, #55724	; 0xd9ac
   145e4:	movw	r2, #673	; 0x2a1
   145e8:	movt	r0, #1
   145ec:	movt	r1, #1
   145f0:	movt	r3, #1
   145f4:	bl	129c4 <__assert_fail@plt>
   145f8:	movw	r0, #55857	; 0xda31
   145fc:	movw	r1, #51339	; 0xc88b
   14600:	movw	r3, #55724	; 0xd9ac
   14604:	movw	r2, #677	; 0x2a5
   14608:	movt	r0, #1
   1460c:	movt	r1, #1
   14610:	movt	r3, #1
   14614:	bl	129c4 <__assert_fail@plt>
   14618:	movw	r0, #55857	; 0xda31
   1461c:	movw	r1, #51339	; 0xc88b
   14620:	movw	r3, #55470	; 0xd8ae
   14624:	movw	r2, #702	; 0x2be
   14628:	movt	r0, #1
   1462c:	movt	r1, #1
   14630:	movt	r3, #1
   14634:	bl	129c4 <__assert_fail@plt>

00014638 <flatcc_builder_create_buffer@@Base>:
   14638:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1463c:	add	fp, sp, #28
   14640:	sub	sp, sp, #100	; 0x64
   14644:	ldr	r8, [fp, #12]
   14648:	mov	r4, r0
   1464c:	ldr	r0, [fp, #8]
   14650:	mov	r7, r1
   14654:	mov	r5, #0
   14658:	mov	r9, r3
   1465c:	sub	r1, fp, #30
   14660:	str	r5, [sp, #12]
   14664:	and	r6, r8, #1
   14668:	strh	r0, [fp, #-30]	; 0xffffffe2
   1466c:	mov	r0, r4
   14670:	mov	r3, r6
   14674:	bl	14518 <flatcc_builder_embed_buffer@@Base+0x170>
   14678:	ldrh	r0, [r4, #128]	; 0x80
   1467c:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   14680:	cmp	r0, r1
   14684:	strhcc	r1, [r4, #128]	; 0x80
   14688:	cmp	r7, #0
   1468c:	stmib	sp, {r6, r9}
   14690:	beq	146ac <flatcc_builder_create_buffer@@Base+0x74>
   14694:	ldr	r5, [r7]
   14698:	cmp	r5, #0
   1469c:	str	r5, [sp, #12]
   146a0:	movwne	r5, #1
   146a4:	lsl	r7, r5, #2
   146a8:	b	146b0 <flatcc_builder_create_buffer@@Base+0x78>
   146ac:	mov	r7, #0
   146b0:	ldr	r9, [r4, #136]	; 0x88
   146b4:	mov	sl, #4
   146b8:	mvn	r6, #3
   146bc:	mov	r3, #0
   146c0:	ands	ip, r8, #3
   146c4:	and	r2, sl, r8, lsl #1
   146c8:	str	r3, [sp, #20]
   146cc:	str	r3, [sp, #16]
   146d0:	sub	r2, r6, r2
   146d4:	sub	r6, r1, #1
   146d8:	mov	r1, #4
   146dc:	add	r2, r2, r9
   146e0:	sub	r2, r2, r7
   146e4:	beq	14708 <flatcc_builder_create_buffer@@Base+0xd0>
   146e8:	sub	r1, fp, #40	; 0x28
   146ec:	mov	r3, #1
   146f0:	str	r1, [sp, #24]
   146f4:	mov	r1, #4
   146f8:	str	r1, [sp, #16]
   146fc:	str	r1, [sp, #28]
   14700:	mov	r1, #8
   14704:	str	r3, [sp, #20]
   14708:	add	lr, sp, #16
   1470c:	and	r6, r2, r6
   14710:	sub	r0, fp, #36	; 0x24
   14714:	str	r1, [sp, #16]
   14718:	cmp	r5, #0
   1471c:	add	r2, lr, r3, lsl #3
   14720:	str	r0, [r2, #8]
   14724:	str	sl, [r2, #12]
   14728:	add	r2, r3, #1
   1472c:	str	r2, [sp, #20]
   14730:	beq	14754 <flatcc_builder_create_buffer@@Base+0x11c>
   14734:	add	r1, r1, r7
   14738:	add	r0, lr, r2, lsl #3
   1473c:	add	r2, sp, #12
   14740:	str	r1, [sp, #16]
   14744:	str	r2, [r0, #8]
   14748:	orr	r2, r3, #2
   1474c:	str	r7, [r0, #12]
   14750:	str	r2, [sp, #20]
   14754:	cmp	r6, #0
   14758:	beq	14780 <flatcc_builder_create_buffer@@Base+0x148>
   1475c:	movw	r3, #50809	; 0xc679
   14760:	add	r1, r1, r6
   14764:	add	r0, lr, r2, lsl #3
   14768:	add	r2, r2, #1
   1476c:	movt	r3, #1
   14770:	str	r1, [sp, #16]
   14774:	str	r3, [r0, #8]
   14778:	str	r6, [r0, #12]
   1477c:	str	r2, [sp, #20]
   14780:	ldr	r5, [sp, #4]
   14784:	sub	r7, r9, r1
   14788:	cmp	ip, #0
   1478c:	mov	r6, #144	; 0x90
   14790:	ldr	r3, [sp, #8]
   14794:	mov	r0, r7
   14798:	addne	r0, r0, #4
   1479c:	cmp	r5, #0
   147a0:	sub	r3, r3, r0
   147a4:	movweq	r6, #140	; 0x8c
   147a8:	cmp	r1, #0
   147ac:	ldr	r6, [r4, r6]
   147b0:	str	r3, [fp, #-36]	; 0xffffffdc
   147b4:	sub	r0, r6, r0
   147b8:	str	r0, [fp, #-40]	; 0xffffffd8
   147bc:	ble	14814 <flatcc_builder_create_buffer@@Base+0x1dc>
   147c0:	ldr	r0, [r4, #36]	; 0x24
   147c4:	ldr	r6, [r4, #44]	; 0x2c
   147c8:	str	r1, [sp]
   147cc:	add	r1, lr, #8
   147d0:	mov	r3, r7
   147d4:	blx	r6
   147d8:	cmp	r0, #0
   147dc:	bne	14834 <flatcc_builder_create_buffer@@Base+0x1fc>
   147e0:	cmp	r7, #0
   147e4:	str	r7, [r4, #136]	; 0x88
   147e8:	movne	r0, r7
   147ec:	subne	sp, fp, #28
   147f0:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147f4:	movw	r0, #55857	; 0xda31
   147f8:	movw	r1, #51339	; 0xc88b
   147fc:	movw	r3, #51654	; 0xc9c6
   14800:	mov	r2, #772	; 0x304
   14804:	movt	r0, #1
   14808:	movt	r1, #1
   1480c:	movt	r3, #1
   14810:	bl	129c4 <__assert_fail@plt>
   14814:	movw	r0, #55857	; 0xda31
   14818:	movw	r1, #51339	; 0xc88b
   1481c:	movw	r3, #55536	; 0xd8f0
   14820:	movw	r2, #647	; 0x287
   14824:	movt	r0, #1
   14828:	movt	r1, #1
   1482c:	movt	r3, #1
   14830:	bl	129c4 <__assert_fail@plt>
   14834:	movw	r0, #55857	; 0xda31
   14838:	movw	r1, #51339	; 0xc88b
   1483c:	movw	r3, #55536	; 0xd8f0
   14840:	movw	r2, #651	; 0x28b
   14844:	movt	r0, #1
   14848:	movt	r1, #1
   1484c:	movt	r3, #1
   14850:	bl	129c4 <__assert_fail@plt>

00014854 <flatcc_builder_create_struct@@Base>:
   14854:	push	{r4, r5, r6, sl, fp, lr}
   14858:	add	fp, sp, #16
   1485c:	sub	sp, sp, #80	; 0x50
   14860:	cmp	r3, #0
   14864:	beq	1493c <flatcc_builder_create_struct@@Base+0xe8>
   14868:	mov	r5, r0
   1486c:	ldrh	r0, [r0, #128]	; 0x80
   14870:	mov	r4, #0
   14874:	cmp	r0, r3
   14878:	strhcc	r3, [r5, #128]	; 0x80
   1487c:	sub	r3, r3, #1
   14880:	cmp	r2, #0
   14884:	ldr	r0, [r5, #136]	; 0x88
   14888:	str	r4, [sp, #12]
   1488c:	str	r4, [sp, #8]
   14890:	movne	r4, #1
   14894:	strne	r1, [sp, #16]
   14898:	strne	r2, [sp, #8]
   1489c:	strne	r2, [sp, #20]
   148a0:	strne	r4, [sp, #12]
   148a4:	sub	r6, r0, r2
   148a8:	and	r3, r6, r3
   148ac:	cmp	r3, #0
   148b0:	beq	148dc <flatcc_builder_create_struct@@Base+0x88>
   148b4:	add	r1, sp, #8
   148b8:	movw	r6, #50809	; 0xc679
   148bc:	add	r2, r3, r2
   148c0:	add	r1, r1, r4, lsl #3
   148c4:	add	r4, r4, #1
   148c8:	movt	r6, #1
   148cc:	str	r2, [sp, #8]
   148d0:	str	r6, [r1, #8]
   148d4:	str	r3, [r1, #12]
   148d8:	str	r4, [sp, #12]
   148dc:	cmp	r2, #0
   148e0:	ble	1495c <flatcc_builder_create_struct@@Base+0x108>
   148e4:	sub	r6, r0, r2
   148e8:	ldr	r0, [r5, #36]	; 0x24
   148ec:	ldr	ip, [r5, #44]	; 0x2c
   148f0:	add	r1, sp, #8
   148f4:	str	r2, [sp]
   148f8:	mov	r2, r4
   148fc:	add	r1, r1, #8
   14900:	mov	r3, r6
   14904:	blx	ip
   14908:	cmp	r0, #0
   1490c:	streq	r6, [r5, #136]	; 0x88
   14910:	moveq	r0, r6
   14914:	subeq	sp, fp, #16
   14918:	popeq	{r4, r5, r6, sl, fp, pc}
   1491c:	movw	r0, #55857	; 0xda31
   14920:	movw	r1, #51339	; 0xc88b
   14924:	movw	r3, #55536	; 0xd8f0
   14928:	movw	r2, #651	; 0x28b
   1492c:	movt	r0, #1
   14930:	movt	r1, #1
   14934:	movt	r3, #1
   14938:	bl	129c4 <__assert_fail@plt>
   1493c:	movw	r0, #51785	; 0xca49
   14940:	movw	r1, #51339	; 0xc88b
   14944:	movw	r3, #51796	; 0xca54
   14948:	movw	r2, #783	; 0x30f
   1494c:	movt	r0, #1
   14950:	movt	r1, #1
   14954:	movt	r3, #1
   14958:	bl	129c4 <__assert_fail@plt>
   1495c:	movw	r0, #55857	; 0xda31
   14960:	movw	r1, #51339	; 0xc88b
   14964:	movw	r3, #55536	; 0xd8f0
   14968:	movw	r2, #647	; 0x287
   1496c:	movt	r0, #1
   14970:	movt	r1, #1
   14974:	movt	r3, #1
   14978:	bl	129c4 <__assert_fail@plt>

0001497c <flatcc_builder_start_buffer@@Base>:
   1497c:	push	{r4, r5, r6, r7, fp, lr}
   14980:	add	fp, sp, #16
   14984:	mov	r5, r1
   14988:	ldrh	r1, [r0, #128]	; 0x80
   1498c:	mov	r6, r3
   14990:	mov	r7, r2
   14994:	mov	r4, r0
   14998:	bl	14a38 <flatcc_builder_start_buffer@@Base+0xbc>
   1499c:	mov	r1, r0
   149a0:	mvn	r0, #0
   149a4:	cmp	r1, #0
   149a8:	popne	{r4, r5, r6, r7, fp, pc}
   149ac:	mov	r0, #1
   149b0:	cmp	r5, #0
   149b4:	strh	r0, [r4, #128]	; 0x80
   149b8:	ldrh	r1, [r4, #132]	; 0x84
   149bc:	ldr	r2, [r4, #32]
   149c0:	strh	r1, [r2, #34]	; 0x22
   149c4:	strh	r7, [r4, #132]	; 0x84
   149c8:	ldrh	r1, [r4, #164]	; 0xa4
   149cc:	ldr	r2, [r4, #32]
   149d0:	strh	r1, [r2, #32]
   149d4:	strh	r6, [r4, #164]	; 0xa4
   149d8:	ldr	r1, [r4, #32]
   149dc:	ldr	r2, [r4, #144]	; 0x90
   149e0:	str	r2, [r1, #20]
   149e4:	ldr	r1, [r4, #32]
   149e8:	ldr	r2, [r4, #152]	; 0x98
   149ec:	str	r2, [r1, #28]
   149f0:	ldr	r3, [r4, #148]	; 0x94
   149f4:	ldr	r1, [r4, #32]
   149f8:	ldr	r2, [r4, #136]	; 0x88
   149fc:	ldr	r7, [r4, #168]	; 0xa8
   14a00:	add	r6, r3, #1
   14a04:	str	r2, [r4, #144]	; 0x90
   14a08:	str	r6, [r4, #148]	; 0x94
   14a0c:	str	r3, [r4, #152]	; 0x98
   14a10:	str	r7, [r1, #16]
   14a14:	movw	r1, #50809	; 0xc679
   14a18:	movt	r1, #1
   14a1c:	movne	r1, r5
   14a20:	ldr	r1, [r1]
   14a24:	str	r1, [r4, #168]	; 0xa8
   14a28:	ldr	r1, [r4, #32]
   14a2c:	strh	r0, [r1, #14]
   14a30:	mov	r0, #0
   14a34:	pop	{r4, r5, r6, r7, fp, pc}
   14a38:	push	{r4, r5, r6, r7, fp, lr}
   14a3c:	add	fp, sp, #16
   14a40:	sub	sp, sp, #8
   14a44:	mov	r5, r1
   14a48:	ldr	r1, [r0, #156]	; 0x9c
   14a4c:	ldr	r2, [r0, #160]	; 0xa0
   14a50:	mov	r4, r0
   14a54:	add	r0, r1, #1
   14a58:	cmp	r1, r2
   14a5c:	str	r0, [r4, #156]	; 0x9c
   14a60:	bge	14a74 <flatcc_builder_start_buffer@@Base+0xf8>
   14a64:	ldr	r0, [r4, #32]
   14a68:	add	r0, r0, #36	; 0x24
   14a6c:	str	r0, [r4, #32]
   14a70:	b	14b08 <flatcc_builder_start_buffer@@Base+0x18c>
   14a74:	ldr	r2, [r4, #176]	; 0xb0
   14a78:	mvn	r6, #0
   14a7c:	cmp	r2, #1
   14a80:	cmpge	r1, r2
   14a84:	bge	14b40 <flatcc_builder_start_buffer@@Base+0x1c4>
   14a88:	add	r7, r0, r0, lsl #3
   14a8c:	ldr	r0, [r4, #88]	; 0x58
   14a90:	lsl	r2, r7, #2
   14a94:	cmp	r2, r0
   14a98:	bls	14ac0 <flatcc_builder_start_buffer@@Base+0x144>
   14a9c:	ldr	r0, [r4, #40]	; 0x28
   14aa0:	ldr	ip, [r4, #48]	; 0x30
   14aa4:	mov	r3, #4
   14aa8:	add	r1, r4, #84	; 0x54
   14aac:	str	r3, [sp]
   14ab0:	mov	r3, #0
   14ab4:	blx	ip
   14ab8:	cmp	r0, #0
   14abc:	bne	14b4c <flatcc_builder_start_buffer@@Base+0x1d0>
   14ac0:	ldr	r1, [r4, #84]	; 0x54
   14ac4:	mvn	r0, #35	; 0x23
   14ac8:	add	r0, r0, r7, lsl #2
   14acc:	adds	r0, r0, r1
   14ad0:	str	r0, [r4, #32]
   14ad4:	beq	14b40 <flatcc_builder_start_buffer@@Base+0x1c4>
   14ad8:	ldr	r1, [r4, #88]	; 0x58
   14adc:	movw	r3, #36409	; 0x8e39
   14ae0:	ldr	r2, [r4, #176]	; 0xb0
   14ae4:	movt	r3, #14563	; 0x38e3
   14ae8:	umull	r1, r3, r1, r3
   14aec:	lsr	r1, r3, #3
   14af0:	cmp	r2, r3, lsr #3
   14af4:	mov	r3, r1
   14af8:	movlt	r3, r2
   14afc:	cmp	r2, #0
   14b00:	movle	r3, r1
   14b04:	str	r3, [r4, #160]	; 0xa0
   14b08:	ldr	r1, [r4, #20]
   14b0c:	mvn	r3, #3
   14b10:	mov	r6, #0
   14b14:	str	r1, [r0, #8]
   14b18:	ldrh	r2, [r4, #130]	; 0x82
   14b1c:	strh	r2, [r0, #12]
   14b20:	strh	r5, [r4, #130]	; 0x82
   14b24:	ldr	r2, [r4, #28]
   14b28:	stm	r0, {r2, r3}
   14b2c:	add	r0, r1, r2
   14b30:	str	r6, [r4, #20]
   14b34:	add	r0, r0, #7
   14b38:	bic	r0, r0, #7
   14b3c:	str	r0, [r4, #28]
   14b40:	mov	r0, r6
   14b44:	sub	sp, fp, #16
   14b48:	pop	{r4, r5, r6, r7, fp, pc}
   14b4c:	movw	r0, #55857	; 0xda31
   14b50:	movw	r1, #51339	; 0xc88b
   14b54:	movw	r3, #55403	; 0xd86b
   14b58:	mov	r2, #308	; 0x134
   14b5c:	movt	r0, #1
   14b60:	movt	r1, #1
   14b64:	movt	r3, #1
   14b68:	bl	129c4 <__assert_fail@plt>

00014b6c <flatcc_builder_end_buffer@@Base>:
   14b6c:	push	{r4, r5, r6, sl, fp, lr}
   14b70:	add	fp, sp, #16
   14b74:	sub	sp, sp, #8
   14b78:	mov	r4, r0
   14b7c:	ldr	r0, [r0, #32]
   14b80:	ldrh	r0, [r0, #14]
   14b84:	cmp	r0, #1
   14b88:	bne	14c7c <flatcc_builder_end_buffer@@Base+0x110>
   14b8c:	mov	r3, r1
   14b90:	ldr	r1, [r4, #152]	; 0x98
   14b94:	ldrh	r0, [r4, #164]	; 0xa4
   14b98:	ldrh	r2, [r4, #132]	; 0x84
   14b9c:	cmp	r1, #0
   14ba0:	ldrh	r1, [r4, #128]	; 0x80
   14ba4:	and	r0, r0, #2
   14ba8:	orrne	r0, r0, #1
   14bac:	cmp	r1, r2
   14bb0:	movcc	r1, r2
   14bb4:	strhcc	r2, [r4, #128]	; 0x80
   14bb8:	str	r0, [sp, #4]
   14bbc:	mov	r0, r4
   14bc0:	str	r1, [sp]
   14bc4:	add	r1, r4, #168	; 0xa8
   14bc8:	bl	14638 <flatcc_builder_create_buffer@@Base>
   14bcc:	mov	r6, r0
   14bd0:	cmp	r0, #0
   14bd4:	beq	14c70 <flatcc_builder_end_buffer@@Base+0x104>
   14bd8:	ldr	r1, [r4, #32]
   14bdc:	ldr	r0, [r4, #16]
   14be0:	ldr	r2, [r4, #20]
   14be4:	ldr	r3, [r1, #20]
   14be8:	str	r3, [r4, #144]	; 0x90
   14bec:	ldr	r3, [r1, #28]
   14bf0:	str	r3, [r4, #152]	; 0x98
   14bf4:	ldr	r3, [r1, #16]
   14bf8:	str	r3, [r4, #168]	; 0xa8
   14bfc:	ldrh	r1, [r1, #32]
   14c00:	strh	r1, [r4, #164]	; 0xa4
   14c04:	mov	r1, #0
   14c08:	bl	12994 <memset@plt>
   14c0c:	ldr	r0, [r4, #32]
   14c10:	ldr	r1, [r4, #60]	; 0x3c
   14c14:	ldr	r2, [r4, #64]	; 0x40
   14c18:	ldr	r3, [r0, #8]
   14c1c:	str	r3, [r4, #20]
   14c20:	ldr	r3, [r0]
   14c24:	str	r3, [r4, #28]
   14c28:	add	r1, r1, r3
   14c2c:	ldr	r5, [r0, #4]
   14c30:	str	r1, [r4, #16]
   14c34:	sub	r1, r2, r3
   14c38:	cmp	r1, r5
   14c3c:	movhi	r1, r5
   14c40:	str	r1, [r4, #24]
   14c44:	ldrh	r1, [r4, #130]	; 0x82
   14c48:	ldrh	r2, [r4, #128]	; 0x80
   14c4c:	cmp	r2, r1
   14c50:	strhcc	r1, [r4, #128]	; 0x80
   14c54:	ldrh	r1, [r0, #12]
   14c58:	sub	r0, r0, #36	; 0x24
   14c5c:	str	r0, [r4, #32]
   14c60:	strh	r1, [r4, #130]	; 0x82
   14c64:	ldr	r0, [r4, #156]	; 0x9c
   14c68:	sub	r0, r0, #1
   14c6c:	str	r0, [r4, #156]	; 0x9c
   14c70:	mov	r0, r6
   14c74:	sub	sp, fp, #16
   14c78:	pop	{r4, r5, r6, sl, fp, pc}
   14c7c:	movw	r0, #51898	; 0xcaba
   14c80:	movw	r1, #51339	; 0xc88b
   14c84:	movw	r3, #51942	; 0xcae6
   14c88:	movw	r2, #838	; 0x346
   14c8c:	movt	r0, #1
   14c90:	movt	r1, #1
   14c94:	movt	r3, #1
   14c98:	bl	129c4 <__assert_fail@plt>

00014c9c <flatcc_builder_start_struct@@Base>:
   14c9c:	push	{r4, r5, r6, r7, fp, lr}
   14ca0:	add	fp, sp, #16
   14ca4:	mov	r6, r1
   14ca8:	mov	r1, r2
   14cac:	mov	r4, r0
   14cb0:	bl	14a38 <flatcc_builder_start_buffer@@Base+0xbc>
   14cb4:	mov	r5, #0
   14cb8:	cmp	r0, #0
   14cbc:	bne	14d2c <flatcc_builder_start_struct@@Base+0x90>
   14cc0:	ldr	r1, [r4, #32]
   14cc4:	mov	r0, #2
   14cc8:	strh	r0, [r1, #14]
   14ccc:	ldr	r2, [r4, #28]
   14cd0:	ldr	r0, [r4, #60]	; 0x3c
   14cd4:	ldr	r3, [r4, #64]	; 0x40
   14cd8:	add	r0, r0, r2
   14cdc:	sub	r2, r3, r2
   14ce0:	mvn	r3, #3
   14ce4:	cmn	r2, #4
   14ce8:	str	r0, [r4, #16]
   14cec:	movcs	r2, r3
   14cf0:	str	r2, [r4, #24]
   14cf4:	str	r3, [r1, #4]
   14cf8:	ldr	r7, [r4, #20]
   14cfc:	add	r1, r7, r6
   14d00:	cmp	r1, r2
   14d04:	str	r1, [r4, #20]
   14d08:	bcc	14d28 <flatcc_builder_start_struct@@Base+0x8c>
   14d0c:	add	r1, r1, #1
   14d10:	mov	r0, r4
   14d14:	mvn	r2, #3
   14d18:	bl	17b88 <flatcc_builder_get_emit_context@@Base+0x8>
   14d1c:	cmp	r0, #0
   14d20:	bne	14d2c <flatcc_builder_start_struct@@Base+0x90>
   14d24:	ldr	r0, [r4, #16]
   14d28:	add	r5, r0, r7
   14d2c:	mov	r0, r5
   14d30:	pop	{r4, r5, r6, r7, fp, pc}

00014d34 <flatcc_builder_struct_edit@@Base>:
   14d34:	ldr	r0, [r0, #16]
   14d38:	bx	lr

00014d3c <flatcc_builder_end_struct@@Base>:
   14d3c:	push	{r4, r5, fp, lr}
   14d40:	add	fp, sp, #8
   14d44:	mov	r4, r0
   14d48:	ldr	r0, [r0, #32]
   14d4c:	ldrh	r0, [r0, #14]
   14d50:	cmp	r0, #2
   14d54:	bne	14df4 <flatcc_builder_end_struct@@Base+0xb8>
   14d58:	ldrh	r3, [r4, #130]	; 0x82
   14d5c:	ldr	r1, [r4, #16]
   14d60:	ldr	r2, [r4, #20]
   14d64:	mov	r0, r4
   14d68:	bl	14854 <flatcc_builder_create_struct@@Base>
   14d6c:	mov	r5, r0
   14d70:	cmp	r0, #0
   14d74:	beq	14dec <flatcc_builder_end_struct@@Base+0xb0>
   14d78:	ldr	r0, [r4, #16]
   14d7c:	ldr	r2, [r4, #20]
   14d80:	mov	r1, #0
   14d84:	bl	12994 <memset@plt>
   14d88:	ldr	r0, [r4, #32]
   14d8c:	ldr	r1, [r4, #60]	; 0x3c
   14d90:	ldr	ip, [r4, #64]	; 0x40
   14d94:	ldr	r3, [r0, #8]
   14d98:	str	r3, [r4, #20]
   14d9c:	ldr	r3, [r0]
   14da0:	str	r3, [r4, #28]
   14da4:	add	r1, r1, r3
   14da8:	ldr	r2, [r0, #4]
   14dac:	str	r1, [r4, #16]
   14db0:	sub	r1, ip, r3
   14db4:	cmp	r1, r2
   14db8:	movhi	r1, r2
   14dbc:	str	r1, [r4, #24]
   14dc0:	ldrh	r1, [r4, #130]	; 0x82
   14dc4:	ldrh	r2, [r4, #128]	; 0x80
   14dc8:	cmp	r2, r1
   14dcc:	strhcc	r1, [r4, #128]	; 0x80
   14dd0:	ldrh	r1, [r0, #12]
   14dd4:	sub	r0, r0, #36	; 0x24
   14dd8:	str	r0, [r4, #32]
   14ddc:	strh	r1, [r4, #130]	; 0x82
   14de0:	ldr	r0, [r4, #156]	; 0x9c
   14de4:	sub	r0, r0, #1
   14de8:	str	r0, [r4, #156]	; 0x9c
   14dec:	mov	r0, r5
   14df0:	pop	{r4, r5, fp, pc}
   14df4:	movw	r0, #52031	; 0xcb3f
   14df8:	movw	r1, #51339	; 0xc88b
   14dfc:	movw	r3, #52075	; 0xcb6b
   14e00:	mov	r2, #872	; 0x368
   14e04:	movt	r0, #1
   14e08:	movt	r1, #1
   14e0c:	movt	r3, #1
   14e10:	bl	129c4 <__assert_fail@plt>

00014e14 <flatcc_builder_extend_vector@@Base>:
   14e14:	push	{r4, r5, fp, lr}
   14e18:	add	fp, sp, #8
   14e1c:	mov	r4, r0
   14e20:	ldr	r0, [r0, #32]
   14e24:	ldr	r2, [r0, #20]
   14e28:	adds	r2, r2, r1
   14e2c:	bcs	14e8c <flatcc_builder_extend_vector@@Base+0x78>
   14e30:	ldr	r3, [r0, #24]
   14e34:	cmp	r2, r3
   14e38:	bhi	14e8c <flatcc_builder_extend_vector@@Base+0x78>
   14e3c:	str	r2, [r0, #20]
   14e40:	ldr	r0, [r4, #32]
   14e44:	ldr	r5, [r4, #20]
   14e48:	ldr	r2, [r4, #24]
   14e4c:	ldr	r0, [r0, #16]
   14e50:	mla	r0, r0, r1, r5
   14e54:	cmp	r0, r2
   14e58:	str	r0, [r4, #20]
   14e5c:	bcc	14e80 <flatcc_builder_extend_vector@@Base+0x6c>
   14e60:	add	r1, r0, #1
   14e64:	mov	r0, r4
   14e68:	mvn	r2, #3
   14e6c:	bl	17b88 <flatcc_builder_get_emit_context@@Base+0x8>
   14e70:	mov	r1, r0
   14e74:	mov	r0, #0
   14e78:	cmp	r1, #0
   14e7c:	popne	{r4, r5, fp, pc}
   14e80:	ldr	r0, [r4, #16]
   14e84:	add	r0, r0, r5
   14e88:	pop	{r4, r5, fp, pc}
   14e8c:	movw	r0, #55610	; 0xd93a
   14e90:	movw	r1, #51339	; 0xc88b
   14e94:	movw	r3, #55637	; 0xd955
   14e98:	mov	r2, #892	; 0x37c
   14e9c:	movt	r0, #1
   14ea0:	movt	r1, #1
   14ea4:	movt	r3, #1
   14ea8:	bl	129c4 <__assert_fail@plt>

00014eac <flatcc_builder_vector_push@@Base>:
   14eac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14eb0:	add	fp, sp, #24
   14eb4:	mov	r5, r0
   14eb8:	ldr	r0, [r0, #32]
   14ebc:	mov	r8, r1
   14ec0:	ldrh	r1, [r0, #14]
   14ec4:	cmp	r1, #4
   14ec8:	bne	14f4c <flatcc_builder_vector_push@@Base+0xa0>
   14ecc:	ldr	r1, [r0, #20]
   14ed0:	ldr	r2, [r0, #24]
   14ed4:	cmp	r1, r2
   14ed8:	bhi	14f6c <flatcc_builder_vector_push@@Base+0xc0>
   14edc:	add	r1, r1, #1
   14ee0:	str	r1, [r0, #20]
   14ee4:	ldr	r0, [r5, #32]
   14ee8:	ldr	r4, [r5, #20]
   14eec:	ldr	r1, [r5, #24]
   14ef0:	ldr	r6, [r0, #16]
   14ef4:	add	r0, r4, r6
   14ef8:	cmp	r0, r1
   14efc:	str	r0, [r5, #20]
   14f00:	bcc	14f20 <flatcc_builder_vector_push@@Base+0x74>
   14f04:	add	r1, r0, #1
   14f08:	mov	r0, r5
   14f0c:	mvn	r2, #3
   14f10:	bl	17b88 <flatcc_builder_get_emit_context@@Base+0x8>
   14f14:	mov	r7, #0
   14f18:	cmp	r0, #0
   14f1c:	bne	14f44 <flatcc_builder_vector_push@@Base+0x98>
   14f20:	ldr	r0, [r5, #16]
   14f24:	adds	r7, r0, r4
   14f28:	beq	14f40 <flatcc_builder_vector_push@@Base+0x94>
   14f2c:	mov	r0, r7
   14f30:	mov	r1, r8
   14f34:	mov	r2, r6
   14f38:	bl	12904 <memcpy@plt>
   14f3c:	b	14f44 <flatcc_builder_vector_push@@Base+0x98>
   14f40:	mov	r7, #0
   14f44:	mov	r0, r7
   14f48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f4c:	movw	r0, #52142	; 0xcbae
   14f50:	movw	r1, #51339	; 0xc88b
   14f54:	movw	r3, #52186	; 0xcbda
   14f58:	movw	r2, #907	; 0x38b
   14f5c:	movt	r0, #1
   14f60:	movt	r1, #1
   14f64:	movt	r3, #1
   14f68:	bl	129c4 <__assert_fail@plt>
   14f6c:	movw	r0, #52253	; 0xcc1d
   14f70:	movw	r1, #51339	; 0xc88b
   14f74:	movw	r3, #52186	; 0xcbda
   14f78:	mov	r2, #908	; 0x38c
   14f7c:	movt	r0, #1
   14f80:	movt	r1, #1
   14f84:	movt	r3, #1
   14f88:	bl	129c4 <__assert_fail@plt>

00014f8c <flatcc_builder_append_vector@@Base>:
   14f8c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14f90:	add	fp, sp, #24
   14f94:	mov	r6, r0
   14f98:	ldr	r0, [r0, #32]
   14f9c:	mov	r8, r1
   14fa0:	ldrh	r1, [r0, #14]
   14fa4:	cmp	r1, #4
   14fa8:	bne	15054 <flatcc_builder_append_vector@@Base+0xc8>
   14fac:	ldr	r1, [r0, #20]
   14fb0:	mov	r9, r2
   14fb4:	adds	r1, r1, r2
   14fb8:	bcs	15034 <flatcc_builder_append_vector@@Base+0xa8>
   14fbc:	ldr	r2, [r0, #24]
   14fc0:	cmp	r1, r2
   14fc4:	bhi	15034 <flatcc_builder_append_vector@@Base+0xa8>
   14fc8:	str	r1, [r0, #20]
   14fcc:	ldr	r0, [r6, #32]
   14fd0:	ldr	r4, [r6, #20]
   14fd4:	ldr	r1, [r6, #24]
   14fd8:	ldr	r5, [r0, #16]
   14fdc:	mla	r0, r5, r9, r4
   14fe0:	cmp	r0, r1
   14fe4:	str	r0, [r6, #20]
   14fe8:	bcc	15008 <flatcc_builder_append_vector@@Base+0x7c>
   14fec:	add	r1, r0, #1
   14ff0:	mov	r0, r6
   14ff4:	mvn	r2, #3
   14ff8:	bl	17b88 <flatcc_builder_get_emit_context@@Base+0x8>
   14ffc:	mov	r7, #0
   15000:	cmp	r0, #0
   15004:	bne	1502c <flatcc_builder_append_vector@@Base+0xa0>
   15008:	ldr	r0, [r6, #16]
   1500c:	adds	r7, r0, r4
   15010:	beq	15028 <flatcc_builder_append_vector@@Base+0x9c>
   15014:	mul	r2, r5, r9
   15018:	mov	r0, r7
   1501c:	mov	r1, r8
   15020:	bl	12904 <memcpy@plt>
   15024:	b	1502c <flatcc_builder_append_vector@@Base+0xa0>
   15028:	mov	r7, #0
   1502c:	mov	r0, r7
   15030:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15034:	movw	r0, #55610	; 0xd93a
   15038:	movw	r1, #51339	; 0xc88b
   1503c:	movw	r3, #55637	; 0xd955
   15040:	mov	r2, #892	; 0x37c
   15044:	movt	r0, #1
   15048:	movt	r1, #1
   1504c:	movt	r3, #1
   15050:	bl	129c4 <__assert_fail@plt>
   15054:	movw	r0, #52142	; 0xcbae
   15058:	movw	r1, #51339	; 0xc88b
   1505c:	movw	r3, #52314	; 0xcc5a
   15060:	movw	r2, #915	; 0x393
   15064:	movt	r0, #1
   15068:	movt	r1, #1
   1506c:	movt	r3, #1
   15070:	bl	129c4 <__assert_fail@plt>

00015074 <flatcc_builder_extend_offset_vector@@Base>:
   15074:	push	{r4, r5, fp, lr}
   15078:	add	fp, sp, #8
   1507c:	mov	r4, r0
   15080:	ldr	r0, [r0, #32]
   15084:	ldr	r2, [r0, #20]
   15088:	adds	r2, r2, r1
   1508c:	cmpcc	r2, #1073741824	; 0x40000000
   15090:	bcc	150b4 <flatcc_builder_extend_offset_vector@@Base+0x40>
   15094:	movw	r0, #55610	; 0xd93a
   15098:	movw	r1, #51339	; 0xc88b
   1509c:	movw	r3, #55637	; 0xd955
   150a0:	mov	r2, #892	; 0x37c
   150a4:	movt	r0, #1
   150a8:	movt	r1, #1
   150ac:	movt	r3, #1
   150b0:	bl	129c4 <__assert_fail@plt>
   150b4:	str	r2, [r0, #20]
   150b8:	ldr	r5, [r4, #20]
   150bc:	ldr	r2, [r4, #24]
   150c0:	add	r0, r5, r1, lsl #2
   150c4:	cmp	r0, r2
   150c8:	str	r0, [r4, #20]
   150cc:	bcc	150f0 <flatcc_builder_extend_offset_vector@@Base+0x7c>
   150d0:	add	r1, r0, #1
   150d4:	mov	r0, r4
   150d8:	mvn	r2, #3
   150dc:	bl	17b88 <flatcc_builder_get_emit_context@@Base+0x8>
   150e0:	mov	r1, r0
   150e4:	mov	r0, #0
   150e8:	cmp	r1, #0
   150ec:	popne	{r4, r5, fp, pc}
   150f0:	ldr	r0, [r4, #16]
   150f4:	add	r0, r0, r5
   150f8:	pop	{r4, r5, fp, pc}

000150fc <flatcc_builder_offset_vector_push@@Base>:
   150fc:	push	{r4, r5, r6, r7, fp, lr}
   15100:	add	fp, sp, #16
   15104:	mov	r6, r0
   15108:	ldr	r0, [r0, #32]
   1510c:	mov	r4, r1
   15110:	ldrh	r1, [r0, #14]
   15114:	cmp	r1, #5
   15118:	bne	1517c <flatcc_builder_offset_vector_push@@Base+0x80>
   1511c:	ldr	r1, [r0, #20]
   15120:	mov	r5, #0
   15124:	cmn	r1, #-1073741823	; 0xc0000001
   15128:	beq	15174 <flatcc_builder_offset_vector_push@@Base+0x78>
   1512c:	add	r1, r1, #1
   15130:	str	r1, [r0, #20]
   15134:	ldr	r7, [r6, #20]
   15138:	ldr	r0, [r6, #24]
   1513c:	add	r1, r7, #4
   15140:	cmp	r1, r0
   15144:	str	r1, [r6, #20]
   15148:	bcc	15164 <flatcc_builder_offset_vector_push@@Base+0x68>
   1514c:	add	r1, r7, #5
   15150:	mov	r0, r6
   15154:	mvn	r2, #3
   15158:	bl	17b88 <flatcc_builder_get_emit_context@@Base+0x8>
   1515c:	cmp	r0, #0
   15160:	bne	15174 <flatcc_builder_offset_vector_push@@Base+0x78>
   15164:	ldr	r0, [r6, #16]
   15168:	adds	r0, r0, r7
   1516c:	movne	r5, r0
   15170:	strne	r4, [r0]
   15174:	mov	r0, r5
   15178:	pop	{r4, r5, r6, r7, fp, pc}
   1517c:	movw	r0, #52391	; 0xcca7
   15180:	movw	r1, #51339	; 0xc88b
   15184:	movw	r3, #52442	; 0xccda
   15188:	movw	r2, #934	; 0x3a6
   1518c:	movt	r0, #1
   15190:	movt	r1, #1
   15194:	movt	r3, #1
   15198:	bl	129c4 <__assert_fail@plt>

0001519c <flatcc_builder_append_offset_vector@@Base>:
   1519c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   151a0:	add	fp, sp, #24
   151a4:	mov	r6, r0
   151a8:	ldr	r0, [r0, #32]
   151ac:	mov	r8, r1
   151b0:	ldrh	r1, [r0, #14]
   151b4:	cmp	r1, #5
   151b8:	bne	15254 <flatcc_builder_append_offset_vector@@Base+0xb8>
   151bc:	ldr	r1, [r0, #20]
   151c0:	mov	r5, r2
   151c4:	adds	r1, r1, r2
   151c8:	cmpcc	r1, #1073741824	; 0x40000000
   151cc:	bcc	151f0 <flatcc_builder_append_offset_vector@@Base+0x54>
   151d0:	movw	r0, #55610	; 0xd93a
   151d4:	movw	r1, #51339	; 0xc88b
   151d8:	movw	r3, #55637	; 0xd955
   151dc:	mov	r2, #892	; 0x37c
   151e0:	movt	r0, #1
   151e4:	movt	r1, #1
   151e8:	movt	r3, #1
   151ec:	bl	129c4 <__assert_fail@plt>
   151f0:	str	r1, [r0, #20]
   151f4:	ldr	r4, [r6, #20]
   151f8:	ldr	r1, [r6, #24]
   151fc:	add	r0, r4, r5, lsl #2
   15200:	cmp	r0, r1
   15204:	str	r0, [r6, #20]
   15208:	bcc	15228 <flatcc_builder_append_offset_vector@@Base+0x8c>
   1520c:	add	r1, r0, #1
   15210:	mov	r0, r6
   15214:	mvn	r2, #3
   15218:	bl	17b88 <flatcc_builder_get_emit_context@@Base+0x8>
   1521c:	mov	r7, #0
   15220:	cmp	r0, #0
   15224:	bne	1524c <flatcc_builder_append_offset_vector@@Base+0xb0>
   15228:	ldr	r0, [r6, #16]
   1522c:	adds	r7, r0, r4
   15230:	beq	15248 <flatcc_builder_append_offset_vector@@Base+0xac>
   15234:	lsl	r2, r5, #2
   15238:	mov	r0, r7
   1523c:	mov	r1, r8
   15240:	bl	12904 <memcpy@plt>
   15244:	b	1524c <flatcc_builder_append_offset_vector@@Base+0xb0>
   15248:	mov	r7, #0
   1524c:	mov	r0, r7
   15250:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15254:	movw	r0, #52391	; 0xcca7
   15258:	movw	r1, #51339	; 0xc88b
   1525c:	movw	r3, #52540	; 0xcd3c
   15260:	mov	r2, #948	; 0x3b4
   15264:	movt	r0, #1
   15268:	movt	r1, #1
   1526c:	movt	r3, #1
   15270:	bl	129c4 <__assert_fail@plt>

00015274 <flatcc_builder_extend_string@@Base>:
   15274:	push	{r4, r5, fp, lr}
   15278:	add	fp, sp, #8
   1527c:	mov	r4, r0
   15280:	ldr	r0, [r0, #32]
   15284:	ldrh	r2, [r0, #14]
   15288:	cmp	r2, #6
   1528c:	bne	152e4 <flatcc_builder_extend_string@@Base+0x70>
   15290:	ldr	r2, [r0, #20]
   15294:	adds	r2, r2, r1
   15298:	bcs	15304 <flatcc_builder_extend_string@@Base+0x90>
   1529c:	str	r2, [r0, #20]
   152a0:	ldr	r5, [r4, #20]
   152a4:	ldr	r2, [r4, #24]
   152a8:	add	r0, r5, r1
   152ac:	cmp	r0, r2
   152b0:	str	r0, [r4, #20]
   152b4:	bcc	152d8 <flatcc_builder_extend_string@@Base+0x64>
   152b8:	add	r1, r0, #1
   152bc:	mov	r0, r4
   152c0:	mvn	r2, #3
   152c4:	bl	17b88 <flatcc_builder_get_emit_context@@Base+0x8>
   152c8:	mov	r1, r0
   152cc:	mov	r0, #0
   152d0:	cmp	r1, #0
   152d4:	popne	{r4, r5, fp, pc}
   152d8:	ldr	r0, [r4, #16]
   152dc:	add	r0, r0, r5
   152e0:	pop	{r4, r5, fp, pc}
   152e4:	movw	r0, #52656	; 0xcdb0
   152e8:	movw	r1, #51339	; 0xc88b
   152ec:	movw	r3, #52700	; 0xcddc
   152f0:	movw	r2, #957	; 0x3bd
   152f4:	movt	r0, #1
   152f8:	movt	r1, #1
   152fc:	movt	r3, #1
   15300:	bl	129c4 <__assert_fail@plt>
   15304:	movw	r0, #55610	; 0xd93a
   15308:	movw	r1, #51339	; 0xc88b
   1530c:	movw	r3, #55637	; 0xd955
   15310:	mov	r2, #892	; 0x37c
   15314:	movt	r0, #1
   15318:	movt	r1, #1
   1531c:	movt	r3, #1
   15320:	bl	129c4 <__assert_fail@plt>

00015324 <flatcc_builder_append_string@@Base>:
   15324:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15328:	add	fp, sp, #24
   1532c:	mov	r6, r0
   15330:	ldr	r0, [r0, #32]
   15334:	mov	r8, r1
   15338:	ldrh	r1, [r0, #14]
   1533c:	cmp	r1, #6
   15340:	bne	153b8 <flatcc_builder_append_string@@Base+0x94>
   15344:	ldr	r1, [r0, #20]
   15348:	mov	r4, r2
   1534c:	adds	r1, r1, r2
   15350:	bcs	153d8 <flatcc_builder_append_string@@Base+0xb4>
   15354:	str	r1, [r0, #20]
   15358:	ldr	r5, [r6, #20]
   1535c:	ldr	r1, [r6, #24]
   15360:	add	r0, r5, r4
   15364:	cmp	r0, r1
   15368:	str	r0, [r6, #20]
   1536c:	bcc	1538c <flatcc_builder_append_string@@Base+0x68>
   15370:	add	r1, r0, #1
   15374:	mov	r0, r6
   15378:	mvn	r2, #3
   1537c:	bl	17b88 <flatcc_builder_get_emit_context@@Base+0x8>
   15380:	mov	r7, #0
   15384:	cmp	r0, #0
   15388:	bne	153b0 <flatcc_builder_append_string@@Base+0x8c>
   1538c:	ldr	r0, [r6, #16]
   15390:	adds	r7, r0, r5
   15394:	beq	153ac <flatcc_builder_append_string@@Base+0x88>
   15398:	mov	r0, r7
   1539c:	mov	r1, r8
   153a0:	mov	r2, r4
   153a4:	bl	12904 <memcpy@plt>
   153a8:	b	153b0 <flatcc_builder_append_string@@Base+0x8c>
   153ac:	mov	r7, #0
   153b0:	mov	r0, r7
   153b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   153b8:	movw	r0, #52656	; 0xcdb0
   153bc:	movw	r1, #51339	; 0xc88b
   153c0:	movw	r3, #52763	; 0xce1b
   153c4:	movw	r2, #966	; 0x3c6
   153c8:	movt	r0, #1
   153cc:	movt	r1, #1
   153d0:	movt	r3, #1
   153d4:	bl	129c4 <__assert_fail@plt>
   153d8:	movw	r0, #55610	; 0xd93a
   153dc:	movw	r1, #51339	; 0xc88b
   153e0:	movw	r3, #55637	; 0xd955
   153e4:	mov	r2, #892	; 0x37c
   153e8:	movt	r0, #1
   153ec:	movt	r1, #1
   153f0:	movt	r3, #1
   153f4:	bl	129c4 <__assert_fail@plt>

000153f8 <flatcc_builder_append_string_str@@Base>:
   153f8:	push	{r4, r5, fp, lr}
   153fc:	add	fp, sp, #8
   15400:	mov	r5, r0
   15404:	mov	r0, r1
   15408:	mov	r4, r1
   1540c:	bl	12970 <strlen@plt>
   15410:	mov	r2, r0
   15414:	mov	r0, r5
   15418:	mov	r1, r4
   1541c:	pop	{r4, r5, fp, lr}
   15420:	b	15324 <flatcc_builder_append_string@@Base>

00015424 <flatcc_builder_append_string_strn@@Base>:
   15424:	push	{r4, r5, r6, sl, fp, lr}
   15428:	add	fp, sp, #16
   1542c:	mov	r6, r0
   15430:	mov	r5, r1
   15434:	mov	r0, r1
   15438:	mov	r1, #0
   1543c:	mov	r4, r2
   15440:	bl	129ac <memchr@plt>
   15444:	cmp	r0, #0
   15448:	mov	r1, r5
   1544c:	subne	r4, r0, r5
   15450:	mov	r0, r6
   15454:	mov	r2, r4
   15458:	pop	{r4, r5, r6, sl, fp, lr}
   1545c:	b	15324 <flatcc_builder_append_string@@Base>

00015460 <flatcc_builder_truncate_vector@@Base>:
   15460:	push	{fp, lr}
   15464:	mov	fp, sp
   15468:	ldr	r2, [r0, #32]
   1546c:	ldrh	r3, [r2, #14]
   15470:	cmp	r3, #4
   15474:	bne	154bc <flatcc_builder_truncate_vector@@Base+0x5c>
   15478:	ldr	r3, [r2, #20]
   1547c:	cmp	r3, r1
   15480:	bcc	154dc <flatcc_builder_truncate_vector@@Base+0x7c>
   15484:	sub	r3, r3, r1
   15488:	str	r3, [r2, #20]
   1548c:	ldr	r2, [r0, #32]
   15490:	ldr	r3, [r0, #20]
   15494:	ldr	ip, [r0, #16]
   15498:	ldr	r2, [r2, #16]
   1549c:	mls	r3, r2, r1, r3
   154a0:	mul	r2, r2, r1
   154a4:	mov	r1, #0
   154a8:	str	r3, [r0, #20]
   154ac:	add	r0, ip, r3
   154b0:	bl	12994 <memset@plt>
   154b4:	mov	r0, #0
   154b8:	pop	{fp, pc}
   154bc:	movw	r0, #52142	; 0xcbae
   154c0:	movw	r1, #51339	; 0xc88b
   154c4:	movw	r3, #52840	; 0xce68
   154c8:	movw	r2, #985	; 0x3d9
   154cc:	movt	r0, #1
   154d0:	movt	r1, #1
   154d4:	movt	r3, #1
   154d8:	bl	129c4 <__assert_fail@plt>
   154dc:	movw	r0, #52903	; 0xcea7
   154e0:	movw	r1, #51339	; 0xc88b
   154e4:	movw	r3, #52840	; 0xce68
   154e8:	movw	r2, #986	; 0x3da
   154ec:	movt	r0, #1
   154f0:	movt	r1, #1
   154f4:	movt	r3, #1
   154f8:	bl	129c4 <__assert_fail@plt>

000154fc <flatcc_builder_truncate_offset_vector@@Base>:
   154fc:	push	{fp, lr}
   15500:	mov	fp, sp
   15504:	ldr	r2, [r0, #32]
   15508:	ldrh	r3, [r2, #14]
   1550c:	cmp	r3, #5
   15510:	bne	15558 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   15514:	ldr	r3, [r2, #20]
   15518:	cmp	r3, r1
   1551c:	bcc	15578 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   15520:	sub	r3, r3, r1
   15524:	str	r3, [r2, #20]
   15528:	ldr	r2, [r0, #32]
   1552c:	ldr	r3, [r0, #20]
   15530:	ldr	ip, [r0, #16]
   15534:	ldr	r2, [r2, #16]
   15538:	mls	r3, r2, r1, r3
   1553c:	mul	r2, r2, r1
   15540:	mov	r1, #0
   15544:	str	r3, [r0, #20]
   15548:	add	r0, ip, r3
   1554c:	bl	12994 <memset@plt>
   15550:	mov	r0, #0
   15554:	pop	{fp, pc}
   15558:	movw	r0, #52391	; 0xcca7
   1555c:	movw	r1, #51339	; 0xc88b
   15560:	movw	r3, #52939	; 0xcecb
   15564:	movw	r2, #994	; 0x3e2
   15568:	movt	r0, #1
   1556c:	movt	r1, #1
   15570:	movt	r3, #1
   15574:	bl	129c4 <__assert_fail@plt>
   15578:	movw	r0, #53009	; 0xcf11
   1557c:	movw	r1, #51339	; 0xc88b
   15580:	movw	r3, #52939	; 0xcecb
   15584:	movw	r2, #995	; 0x3e3
   15588:	movt	r0, #1
   1558c:	movt	r1, #1
   15590:	movt	r3, #1
   15594:	bl	129c4 <__assert_fail@plt>

00015598 <flatcc_builder_truncate_string@@Base>:
   15598:	push	{fp, lr}
   1559c:	mov	fp, sp
   155a0:	mov	r2, r1
   155a4:	ldr	r1, [r0, #32]
   155a8:	ldrh	r3, [r1, #14]
   155ac:	cmp	r3, #6
   155b0:	bne	155ec <flatcc_builder_truncate_string@@Base+0x54>
   155b4:	ldr	r3, [r1, #20]
   155b8:	cmp	r3, r2
   155bc:	bcc	1560c <flatcc_builder_truncate_string@@Base+0x74>
   155c0:	sub	r3, r3, r2
   155c4:	str	r3, [r1, #20]
   155c8:	ldr	r3, [r0, #20]
   155cc:	ldr	r1, [r0, #16]
   155d0:	sub	r3, r3, r2
   155d4:	str	r3, [r0, #20]
   155d8:	add	r0, r1, r3
   155dc:	mov	r1, #0
   155e0:	bl	12994 <memset@plt>
   155e4:	mov	r0, #0
   155e8:	pop	{fp, pc}
   155ec:	movw	r0, #52656	; 0xcdb0
   155f0:	movw	r1, #51339	; 0xc88b
   155f4:	movw	r3, #53068	; 0xcf4c
   155f8:	movw	r2, #1003	; 0x3eb
   155fc:	movt	r0, #1
   15600:	movt	r1, #1
   15604:	movt	r3, #1
   15608:	bl	129c4 <__assert_fail@plt>
   1560c:	movw	r0, #53131	; 0xcf8b
   15610:	movw	r1, #51339	; 0xc88b
   15614:	movw	r3, #53068	; 0xcf4c
   15618:	mov	r2, #1004	; 0x3ec
   1561c:	movt	r0, #1
   15620:	movt	r1, #1
   15624:	movt	r3, #1
   15628:	bl	129c4 <__assert_fail@plt>

0001562c <flatcc_builder_start_vector@@Base>:
   1562c:	push	{r4, r5, r6, r7, fp, lr}
   15630:	add	fp, sp, #16
   15634:	mov	r7, #4
   15638:	cmp	r2, #4
   1563c:	mov	r6, r1
   15640:	mov	r5, r3
   15644:	mov	r4, r0
   15648:	movls	r2, r7
   1564c:	mov	r1, r2
   15650:	bl	14a38 <flatcc_builder_start_buffer@@Base+0xbc>
   15654:	mov	r1, r0
   15658:	mvn	r0, #0
   1565c:	cmp	r1, #0
   15660:	popne	{r4, r5, r6, r7, fp, pc}
   15664:	ldr	r0, [r4, #32]
   15668:	str	r6, [r0, #16]
   1566c:	mov	r0, #0
   15670:	ldr	r1, [r4, #32]
   15674:	str	r0, [r1, #20]
   15678:	ldr	r1, [r4, #32]
   1567c:	str	r5, [r1, #24]
   15680:	ldr	r1, [r4, #32]
   15684:	strh	r7, [r1, #14]
   15688:	ldr	r2, [r4, #28]
   1568c:	ldr	r3, [r4, #60]	; 0x3c
   15690:	ldr	r7, [r4, #64]	; 0x40
   15694:	add	r3, r3, r2
   15698:	sub	r2, r7, r2
   1569c:	str	r3, [r4, #16]
   156a0:	mvn	r3, #3
   156a4:	cmn	r2, #4
   156a8:	movcs	r2, r3
   156ac:	str	r2, [r4, #24]
   156b0:	str	r3, [r1, #4]
   156b4:	pop	{r4, r5, r6, r7, fp, pc}

000156b8 <flatcc_builder_start_offset_vector@@Base>:
   156b8:	push	{r4, r5, fp, lr}
   156bc:	add	fp, sp, #8
   156c0:	mov	r1, #4
   156c4:	mov	r4, r0
   156c8:	mov	r5, #4
   156cc:	bl	14a38 <flatcc_builder_start_buffer@@Base+0xbc>
   156d0:	mov	r1, r0
   156d4:	mvn	r0, #0
   156d8:	cmp	r1, #0
   156dc:	popne	{r4, r5, fp, pc}
   156e0:	ldr	r0, [r4, #32]
   156e4:	mov	r2, #5
   156e8:	str	r5, [r0, #16]
   156ec:	mov	r0, #0
   156f0:	ldr	r1, [r4, #32]
   156f4:	str	r0, [r1, #20]
   156f8:	ldr	r1, [r4, #32]
   156fc:	strh	r2, [r1, #14]
   15700:	ldr	r2, [r4, #28]
   15704:	ldr	r3, [r4, #60]	; 0x3c
   15708:	ldr	r5, [r4, #64]	; 0x40
   1570c:	add	r3, r3, r2
   15710:	sub	r2, r5, r2
   15714:	str	r3, [r4, #16]
   15718:	mvn	r3, #3
   1571c:	cmn	r2, #4
   15720:	movcs	r2, r3
   15724:	str	r2, [r4, #24]
   15728:	str	r3, [r1, #4]
   1572c:	pop	{r4, r5, fp, pc}

00015730 <flatcc_builder_create_offset_vector@@Base>:
   15730:	push	{r4, r5, r6, sl, fp, lr}
   15734:	add	fp, sp, #16
   15738:	mov	r6, r2
   1573c:	mov	r5, r1
   15740:	mov	r4, r0
   15744:	bl	156b8 <flatcc_builder_start_offset_vector@@Base>
   15748:	cmp	r0, #0
   1574c:	beq	15758 <flatcc_builder_create_offset_vector@@Base+0x28>
   15750:	mov	r0, #0
   15754:	pop	{r4, r5, r6, sl, fp, pc}
   15758:	mov	r0, r4
   1575c:	mov	r1, r6
   15760:	bl	15074 <flatcc_builder_extend_offset_vector@@Base>
   15764:	cmp	r0, #0
   15768:	beq	15750 <flatcc_builder_create_offset_vector@@Base+0x20>
   1576c:	lsl	r2, r6, #2
   15770:	mov	r1, r5
   15774:	bl	12904 <memcpy@plt>
   15778:	mov	r0, r4
   1577c:	pop	{r4, r5, r6, sl, fp, lr}
   15780:	b	15784 <flatcc_builder_end_offset_vector@@Base>

00015784 <flatcc_builder_end_offset_vector@@Base>:
   15784:	push	{r4, r5, fp, lr}
   15788:	add	fp, sp, #8
   1578c:	mov	r4, r0
   15790:	ldr	r0, [r0, #32]
   15794:	ldrh	r1, [r0, #14]
   15798:	cmp	r1, #5
   1579c:	bne	1583c <flatcc_builder_end_offset_vector@@Base+0xb8>
   157a0:	ldr	r2, [r0, #20]
   157a4:	ldr	r1, [r4, #16]
   157a8:	mov	r0, r4
   157ac:	mov	r3, #0
   157b0:	bl	167a4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   157b4:	mov	r5, r0
   157b8:	cmp	r0, #0
   157bc:	beq	15834 <flatcc_builder_end_offset_vector@@Base+0xb0>
   157c0:	ldr	r0, [r4, #16]
   157c4:	ldr	r2, [r4, #20]
   157c8:	mov	r1, #0
   157cc:	bl	12994 <memset@plt>
   157d0:	ldr	r0, [r4, #32]
   157d4:	ldr	r1, [r4, #60]	; 0x3c
   157d8:	ldr	ip, [r4, #64]	; 0x40
   157dc:	ldr	r3, [r0, #8]
   157e0:	str	r3, [r4, #20]
   157e4:	ldr	r3, [r0]
   157e8:	str	r3, [r4, #28]
   157ec:	add	r1, r1, r3
   157f0:	ldr	r2, [r0, #4]
   157f4:	str	r1, [r4, #16]
   157f8:	sub	r1, ip, r3
   157fc:	cmp	r1, r2
   15800:	movhi	r1, r2
   15804:	str	r1, [r4, #24]
   15808:	ldrh	r1, [r4, #130]	; 0x82
   1580c:	ldrh	r2, [r4, #128]	; 0x80
   15810:	cmp	r2, r1
   15814:	strhcc	r1, [r4, #128]	; 0x80
   15818:	ldrh	r1, [r0, #12]
   1581c:	sub	r0, r0, #36	; 0x24
   15820:	str	r0, [r4, #32]
   15824:	strh	r1, [r4, #130]	; 0x82
   15828:	ldr	r0, [r4, #156]	; 0x9c
   1582c:	sub	r0, r0, #1
   15830:	str	r0, [r4, #156]	; 0x9c
   15834:	mov	r0, r5
   15838:	pop	{r4, r5, fp, pc}
   1583c:	movw	r0, #52391	; 0xcca7
   15840:	movw	r1, #51339	; 0xc88b
   15844:	movw	r3, #53974	; 0xd2d6
   15848:	movw	r2, #1480	; 0x5c8
   1584c:	movt	r0, #1
   15850:	movt	r1, #1
   15854:	movt	r3, #1
   15858:	bl	129c4 <__assert_fail@plt>

0001585c <flatcc_builder_start_string@@Base>:
   1585c:	push	{r4, r5, fp, lr}
   15860:	add	fp, sp, #8
   15864:	mov	r1, #1
   15868:	mov	r4, r0
   1586c:	mov	r5, #1
   15870:	bl	14a38 <flatcc_builder_start_buffer@@Base+0xbc>
   15874:	mov	r1, r0
   15878:	mvn	r0, #0
   1587c:	cmp	r1, #0
   15880:	popne	{r4, r5, fp, pc}
   15884:	ldr	r0, [r4, #32]
   15888:	mov	r2, #6
   1588c:	str	r5, [r0, #16]
   15890:	mov	r0, #0
   15894:	ldr	r1, [r4, #32]
   15898:	str	r0, [r1, #20]
   1589c:	ldr	r1, [r4, #32]
   158a0:	strh	r2, [r1, #14]
   158a4:	ldr	r2, [r4, #28]
   158a8:	ldr	r3, [r4, #60]	; 0x3c
   158ac:	ldr	r5, [r4, #64]	; 0x40
   158b0:	add	r3, r3, r2
   158b4:	sub	r2, r5, r2
   158b8:	str	r3, [r4, #16]
   158bc:	mvn	r3, #3
   158c0:	cmn	r2, #4
   158c4:	movcs	r2, r3
   158c8:	str	r2, [r4, #24]
   158cc:	str	r3, [r1, #4]
   158d0:	pop	{r4, r5, fp, pc}

000158d4 <flatcc_builder_reserve_table@@Base>:
   158d4:	push	{r4, r5, r6, sl, fp, lr}
   158d8:	add	fp, sp, #16
   158dc:	sub	sp, sp, #8
   158e0:	cmn	r1, #1
   158e4:	ble	159b8 <flatcc_builder_reserve_table@@Base+0xe4>
   158e8:	mov	r4, r0
   158ec:	ldr	r0, [r0, #32]
   158f0:	mov	r5, r1
   158f4:	ldr	r1, [r4, #56]	; 0x38
   158f8:	ldrh	r2, [r0, #28]
   158fc:	ldr	r0, [r0, #16]
   15900:	add	r6, r0, r2, lsl #1
   15904:	add	r0, r6, r5, lsl #1
   15908:	add	r2, r0, #4
   1590c:	cmp	r2, r1
   15910:	bls	15938 <flatcc_builder_reserve_table@@Base+0x64>
   15914:	ldr	r0, [r4, #40]	; 0x28
   15918:	ldr	ip, [r4, #48]	; 0x30
   1591c:	mov	r3, #0
   15920:	add	r1, r4, #52	; 0x34
   15924:	str	r3, [sp]
   15928:	mov	r3, #1
   1592c:	blx	ip
   15930:	cmp	r0, #0
   15934:	bne	159d8 <flatcc_builder_reserve_table@@Base+0x104>
   15938:	ldr	r0, [r4, #52]	; 0x34
   1593c:	adds	r0, r0, r6
   15940:	str	r0, [r4, #4]
   15944:	beq	159ac <flatcc_builder_reserve_table@@Base+0xd8>
   15948:	add	r0, r0, #4
   1594c:	lsl	r1, r5, #1
   15950:	str	r0, [r4, #4]
   15954:	ldr	r0, [r4, #32]
   15958:	ldr	r3, [r4, #80]	; 0x50
   1595c:	ldr	r5, [r0, #20]
   15960:	orr	r0, r1, #1
   15964:	add	r2, r5, r0
   15968:	cmp	r2, r3
   1596c:	bls	15994 <flatcc_builder_reserve_table@@Base+0xc0>
   15970:	ldr	r0, [r4, #40]	; 0x28
   15974:	ldr	r6, [r4, #48]	; 0x30
   15978:	mov	r3, #3
   1597c:	add	r1, r4, #76	; 0x4c
   15980:	str	r3, [sp]
   15984:	mov	r3, #0
   15988:	blx	r6
   1598c:	cmp	r0, #0
   15990:	bne	159d8 <flatcc_builder_reserve_table@@Base+0x104>
   15994:	ldr	r0, [r4, #76]	; 0x4c
   15998:	adds	r0, r0, r5
   1599c:	str	r0, [r4]
   159a0:	mov	r0, #0
   159a4:	mvneq	r0, #0
   159a8:	b	159b0 <flatcc_builder_reserve_table@@Base+0xdc>
   159ac:	mvn	r0, #0
   159b0:	sub	sp, fp, #16
   159b4:	pop	{r4, r5, r6, sl, fp, pc}
   159b8:	movw	r0, #53230	; 0xcfee
   159bc:	movw	r1, #51339	; 0xc88b
   159c0:	movw	r3, #53165	; 0xcfad
   159c4:	movw	r2, #1065	; 0x429
   159c8:	movt	r0, #1
   159cc:	movt	r1, #1
   159d0:	movt	r3, #1
   159d4:	bl	129c4 <__assert_fail@plt>
   159d8:	movw	r0, #55857	; 0xda31
   159dc:	movw	r1, #51339	; 0xc88b
   159e0:	movw	r3, #55403	; 0xd86b
   159e4:	mov	r2, #308	; 0x134
   159e8:	movt	r0, #1
   159ec:	movt	r1, #1
   159f0:	movt	r3, #1
   159f4:	bl	129c4 <__assert_fail@plt>

000159f8 <flatcc_builder_start_table@@Base>:
   159f8:	push	{r4, r5, r6, r7, fp, lr}
   159fc:	add	fp, sp, #16
   15a00:	sub	sp, sp, #8
   15a04:	mov	r6, r1
   15a08:	mov	r1, #4
   15a0c:	mov	r4, r0
   15a10:	bl	14a38 <flatcc_builder_start_buffer@@Base+0xbc>
   15a14:	mvn	r5, #0
   15a18:	cmp	r0, #0
   15a1c:	beq	15a2c <flatcc_builder_start_table@@Base+0x34>
   15a20:	mov	r0, r5
   15a24:	sub	sp, fp, #16
   15a28:	pop	{r4, r5, r6, r7, fp, pc}
   15a2c:	mov	r1, r4
   15a30:	ldr	r2, [r4, #4]
   15a34:	ldr	r3, [r4, #32]
   15a38:	ldr	r0, [r1, #52]!	; 0x34
   15a3c:	sub	r0, r2, r0
   15a40:	str	r0, [r3, #16]
   15a44:	ldr	r0, [r4]
   15a48:	ldr	r3, [r4, #76]	; 0x4c
   15a4c:	ldr	r2, [r4, #32]
   15a50:	sub	r0, r0, r3
   15a54:	mov	r3, #0
   15a58:	str	r0, [r2, #20]
   15a5c:	ldr	r0, [r4, #12]
   15a60:	ldr	r2, [r4, #32]
   15a64:	str	r0, [r2, #24]
   15a68:	ldr	r0, [r4, #32]
   15a6c:	ldrh	r2, [r4, #8]
   15a70:	strh	r2, [r0, #28]
   15a74:	movw	r0, #15186	; 0x3b52
   15a78:	strh	r3, [r4, #8]
   15a7c:	mov	r2, #3
   15a80:	movt	r0, #12137	; 0x2f69
   15a84:	str	r0, [r4, #12]
   15a88:	ldr	r0, [r4, #32]
   15a8c:	strh	r2, [r0, #14]
   15a90:	ldrh	r2, [r0, #28]
   15a94:	ldr	r0, [r0, #16]
   15a98:	add	r7, r0, r2, lsl #1
   15a9c:	add	r0, r7, r6, lsl #1
   15aa0:	add	r2, r0, #4
   15aa4:	ldr	r0, [r4, #56]	; 0x38
   15aa8:	cmp	r2, r0
   15aac:	bls	15acc <flatcc_builder_start_table@@Base+0xd4>
   15ab0:	ldr	r0, [r4, #40]	; 0x28
   15ab4:	ldr	ip, [r4, #48]	; 0x30
   15ab8:	str	r3, [sp]
   15abc:	mov	r3, #1
   15ac0:	blx	ip
   15ac4:	cmp	r0, #0
   15ac8:	bne	15b70 <flatcc_builder_start_table@@Base+0x178>
   15acc:	ldr	r0, [r4, #52]	; 0x34
   15ad0:	adds	r0, r0, r7
   15ad4:	str	r0, [r4, #4]
   15ad8:	beq	15a20 <flatcc_builder_start_table@@Base+0x28>
   15adc:	add	r0, r0, #4
   15ae0:	lsl	r1, r6, #1
   15ae4:	str	r0, [r4, #4]
   15ae8:	ldr	r0, [r4, #32]
   15aec:	ldr	r3, [r4, #80]	; 0x50
   15af0:	ldr	r6, [r0, #20]
   15af4:	orr	r0, r1, #1
   15af8:	add	r2, r6, r0
   15afc:	cmp	r2, r3
   15b00:	bls	15b28 <flatcc_builder_start_table@@Base+0x130>
   15b04:	ldr	r0, [r4, #40]	; 0x28
   15b08:	ldr	r7, [r4, #48]	; 0x30
   15b0c:	mov	r3, #3
   15b10:	add	r1, r4, #76	; 0x4c
   15b14:	str	r3, [sp]
   15b18:	mov	r3, #0
   15b1c:	blx	r7
   15b20:	cmp	r0, #0
   15b24:	bne	15b70 <flatcc_builder_start_table@@Base+0x178>
   15b28:	ldr	r0, [r4, #76]	; 0x4c
   15b2c:	adds	r0, r0, r6
   15b30:	str	r0, [r4]
   15b34:	beq	15a20 <flatcc_builder_start_table@@Base+0x28>
   15b38:	ldr	r0, [r4, #28]
   15b3c:	ldr	r2, [r4, #60]	; 0x3c
   15b40:	ldr	r3, [r4, #64]	; 0x40
   15b44:	ldr	r1, [r4, #32]
   15b48:	mov	r5, #0
   15b4c:	add	r2, r2, r0
   15b50:	sub	r0, r3, r0
   15b54:	str	r2, [r4, #16]
   15b58:	movw	r2, #65532	; 0xfffc
   15b5c:	cmp	r0, r2
   15b60:	movcs	r0, r2
   15b64:	str	r0, [r4, #24]
   15b68:	str	r2, [r1, #4]
   15b6c:	b	15a20 <flatcc_builder_start_table@@Base+0x28>
   15b70:	movw	r0, #55857	; 0xda31
   15b74:	movw	r1, #51339	; 0xc88b
   15b78:	movw	r3, #55403	; 0xd86b
   15b7c:	mov	r2, #308	; 0x134
   15b80:	movt	r0, #1
   15b84:	movt	r1, #1
   15b88:	movt	r3, #1
   15b8c:	bl	129c4 <__assert_fail@plt>

00015b90 <flatcc_builder_create_vtable@@Base>:
   15b90:	push	{r4, r5, fp, lr}
   15b94:	add	fp, sp, #8
   15b98:	sub	sp, sp, #80	; 0x50
   15b9c:	mov	r3, r2
   15ba0:	mov	r2, #0
   15ba4:	mov	r4, r0
   15ba8:	cmp	r3, #0
   15bac:	str	r2, [sp, #12]
   15bb0:	str	r2, [sp, #8]
   15bb4:	movne	r2, #1
   15bb8:	strne	r1, [sp, #16]
   15bbc:	strne	r3, [sp, #8]
   15bc0:	strne	r3, [sp, #20]
   15bc4:	strne	r2, [sp, #12]
   15bc8:	ldr	r0, [r4, #152]	; 0x98
   15bcc:	cmp	r0, #0
   15bd0:	bne	15be0 <flatcc_builder_create_vtable@@Base+0x50>
   15bd4:	ldr	r0, [r4, #180]	; 0xb4
   15bd8:	cmp	r0, #0
   15bdc:	beq	15c30 <flatcc_builder_create_vtable@@Base+0xa0>
   15be0:	cmp	r3, #0
   15be4:	beq	15c70 <flatcc_builder_create_vtable@@Base+0xe0>
   15be8:	ldr	r0, [r4, #136]	; 0x88
   15bec:	ldr	ip, [r4, #44]	; 0x2c
   15bf0:	add	r1, sp, #8
   15bf4:	add	r1, r1, #8
   15bf8:	sub	r5, r0, r3
   15bfc:	ldr	r0, [r4, #36]	; 0x24
   15c00:	str	r3, [sp]
   15c04:	mov	r3, r5
   15c08:	blx	ip
   15c0c:	cmp	r0, #0
   15c10:	bne	15c90 <flatcc_builder_create_vtable@@Base+0x100>
   15c14:	cmp	r5, #0
   15c18:	str	r5, [r4, #136]	; 0x88
   15c1c:	beq	15c28 <flatcc_builder_create_vtable@@Base+0x98>
   15c20:	add	r0, r5, #1
   15c24:	b	15c68 <flatcc_builder_create_vtable@@Base+0xd8>
   15c28:	mov	r0, #0
   15c2c:	b	15c68 <flatcc_builder_create_vtable@@Base+0xd8>
   15c30:	ldr	r5, [r4, #140]	; 0x8c
   15c34:	ldr	r0, [r4, #36]	; 0x24
   15c38:	ldr	ip, [r4, #44]	; 0x2c
   15c3c:	add	r1, r5, r3
   15c40:	str	r1, [r4, #140]	; 0x8c
   15c44:	add	r1, sp, #8
   15c48:	str	r3, [sp]
   15c4c:	mov	r3, r5
   15c50:	add	r1, r1, #8
   15c54:	blx	ip
   15c58:	cmp	r0, #0
   15c5c:	bne	15cb0 <flatcc_builder_create_vtable@@Base+0x120>
   15c60:	adds	r0, r5, #1
   15c64:	moveq	r0, #0
   15c68:	sub	sp, fp, #8
   15c6c:	pop	{r4, r5, fp, pc}
   15c70:	movw	r0, #55857	; 0xda31
   15c74:	movw	r1, #51339	; 0xc88b
   15c78:	movw	r3, #55536	; 0xd8f0
   15c7c:	movw	r2, #647	; 0x287
   15c80:	movt	r0, #1
   15c84:	movt	r1, #1
   15c88:	movt	r3, #1
   15c8c:	bl	129c4 <__assert_fail@plt>
   15c90:	movw	r0, #55857	; 0xda31
   15c94:	movw	r1, #51339	; 0xc88b
   15c98:	movw	r3, #55536	; 0xd8f0
   15c9c:	movw	r2, #651	; 0x28b
   15ca0:	movt	r0, #1
   15ca4:	movt	r1, #1
   15ca8:	movt	r3, #1
   15cac:	bl	129c4 <__assert_fail@plt>
   15cb0:	movw	r0, #55857	; 0xda31
   15cb4:	movw	r1, #51339	; 0xc88b
   15cb8:	movw	r3, #55724	; 0xd9ac
   15cbc:	movw	r2, #677	; 0x2a5
   15cc0:	movt	r0, #1
   15cc4:	movt	r1, #1
   15cc8:	movt	r3, #1
   15ccc:	bl	129c4 <__assert_fail@plt>

00015cd0 <flatcc_builder_create_cached_vtable@@Base>:
   15cd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cd4:	add	fp, sp, #28
   15cd8:	sub	sp, sp, #20
   15cdc:	mov	sl, r0
   15ce0:	ldr	r0, [r0, #116]	; 0x74
   15ce4:	mov	r8, r3
   15ce8:	mov	r5, r2
   15cec:	str	r1, [sp, #16]
   15cf0:	cmp	r0, #0
   15cf4:	beq	15d98 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   15cf8:	ldr	r1, [sl, #92]	; 0x5c
   15cfc:	rsb	r0, r0, #32
   15d00:	lsr	r0, r8, r0
   15d04:	add	r6, r1, r0, lsl #2
   15d08:	cmp	r6, #0
   15d0c:	beq	15e5c <flatcc_builder_create_cached_vtable@@Base+0x18c>
   15d10:	ldr	r7, [r6]
   15d14:	str	r6, [sp, #12]
   15d18:	cmp	r7, #0
   15d1c:	beq	15e64 <flatcc_builder_create_cached_vtable@@Base+0x194>
   15d20:	ldr	r4, [sl, #68]	; 0x44
   15d24:	ldr	r8, [sl, #100]	; 0x64
   15d28:	mov	r0, #0
   15d2c:	str	r0, [sp, #8]
   15d30:	add	r9, r8, r7
   15d34:	mov	r1, r4
   15d38:	ldr	r0, [r9, #8]
   15d3c:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   15d40:	cmp	r0, r5
   15d44:	bne	15d5c <flatcc_builder_create_cached_vtable@@Base+0x8c>
   15d48:	ldr	r0, [sp, #16]
   15d4c:	mov	r2, r5
   15d50:	bl	12910 <memcmp@plt>
   15d54:	cmp	r0, #0
   15d58:	beq	15d70 <flatcc_builder_create_cached_vtable@@Base+0xa0>
   15d5c:	ldr	r7, [r9, #12]!
   15d60:	cmp	r7, #0
   15d64:	mov	r6, r9
   15d68:	bne	15d30 <flatcc_builder_create_cached_vtable@@Base+0x60>
   15d6c:	b	15e54 <flatcc_builder_create_cached_vtable@@Base+0x184>
   15d70:	ldr	r0, [sl, #152]	; 0x98
   15d74:	ldr	r1, [r9, #4]
   15d78:	cmp	r1, r0
   15d7c:	beq	15fc8 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   15d80:	mov	r6, r9
   15d84:	mov	r0, r9
   15d88:	ldr	r7, [r6, #12]!
   15d8c:	cmp	r7, #0
   15d90:	bne	15d2c <flatcc_builder_create_cached_vtable@@Base+0x5c>
   15d94:	b	15e68 <flatcc_builder_create_cached_vtable@@Base+0x198>
   15d98:	ldr	r0, [sl, #124]	; 0x7c
   15d9c:	cmp	r0, #0
   15da0:	bne	16014 <flatcc_builder_create_cached_vtable@@Base+0x344>
   15da4:	ldr	r0, [sl, #104]	; 0x68
   15da8:	add	r7, sl, #100	; 0x64
   15dac:	cmp	r0, #15
   15db0:	bhi	15ddc <flatcc_builder_create_cached_vtable@@Base+0x10c>
   15db4:	ldr	r0, [sl, #40]	; 0x28
   15db8:	ldr	r6, [sl, #48]	; 0x30
   15dbc:	mov	r1, #6
   15dc0:	mov	r2, #16
   15dc4:	mov	r3, #0
   15dc8:	str	r1, [sp]
   15dcc:	mov	r1, r7
   15dd0:	blx	r6
   15dd4:	cmp	r0, #0
   15dd8:	bne	15ff4 <flatcc_builder_create_cached_vtable@@Base+0x324>
   15ddc:	ldr	r0, [r7]
   15de0:	mov	r7, #0
   15de4:	cmp	r0, #0
   15de8:	beq	15f08 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15dec:	mov	r0, #16
   15df0:	mov	r2, #5
   15df4:	add	r1, sl, #92	; 0x5c
   15df8:	mov	r3, #1
   15dfc:	mov	r4, #256	; 0x100
   15e00:	str	r0, [sl, #124]	; 0x7c
   15e04:	ldr	r0, [sl, #40]	; 0x28
   15e08:	ldr	r6, [sl, #48]	; 0x30
   15e0c:	str	r2, [sp]
   15e10:	mov	r2, #256	; 0x100
   15e14:	blx	r6
   15e18:	cmp	r0, #0
   15e1c:	bne	15f08 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15e20:	ldr	r0, [sl, #96]	; 0x60
   15e24:	mov	r1, r4
   15e28:	lsl	r4, r4, #1
   15e2c:	cmp	r0, r1, lsl #1
   15e30:	bcs	15e24 <flatcc_builder_create_cached_vtable@@Base+0x154>
   15e34:	lsr	r1, r1, #2
   15e38:	mvn	r0, #0
   15e3c:	mov	r2, #1
   15e40:	add	r0, r0, #1
   15e44:	cmp	r1, r2, lsl r0
   15e48:	bhi	15e40 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15e4c:	str	r0, [sl, #116]	; 0x74
   15e50:	b	15cf8 <flatcc_builder_create_cached_vtable@@Base+0x28>
   15e54:	ldr	r9, [sp, #8]
   15e58:	b	15e68 <flatcc_builder_create_cached_vtable@@Base+0x198>
   15e5c:	mov	r7, #0
   15e60:	b	15f08 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15e64:	mov	r9, #0
   15e68:	ldr	r4, [sl, #124]	; 0x7c
   15e6c:	ldr	r0, [sl, #104]	; 0x68
   15e70:	add	r7, sl, #100	; 0x64
   15e74:	add	r2, r4, #16
   15e78:	cmp	r2, r0
   15e7c:	bls	15ea4 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   15e80:	ldr	r0, [sl, #40]	; 0x28
   15e84:	ldr	r6, [sl, #48]	; 0x30
   15e88:	mov	r1, #6
   15e8c:	mov	r3, #0
   15e90:	str	r1, [sp]
   15e94:	mov	r1, r7
   15e98:	blx	r6
   15e9c:	cmp	r0, #0
   15ea0:	bne	15ff4 <flatcc_builder_create_cached_vtable@@Base+0x324>
   15ea4:	ldr	r0, [r7]
   15ea8:	mov	r7, #0
   15eac:	adds	r4, r0, r4
   15eb0:	beq	15f08 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15eb4:	ldr	r0, [sl, #124]	; 0x7c
   15eb8:	ldr	r1, [sl, #152]	; 0x98
   15ebc:	add	r2, r0, #16
   15ec0:	str	r2, [sl, #124]	; 0x7c
   15ec4:	ldr	r2, [sp, #12]
   15ec8:	str	r1, [r4, #4]
   15ecc:	ldr	r1, [r2]
   15ed0:	str	r1, [r4, #12]
   15ed4:	ldr	r1, [sp, #16]
   15ed8:	str	r0, [r2]
   15edc:	mov	r0, sl
   15ee0:	mov	r2, r5
   15ee4:	bl	15b90 <flatcc_builder_create_vtable@@Base>
   15ee8:	cmp	r0, #0
   15eec:	str	r0, [r4]
   15ef0:	beq	15f08 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15ef4:	cmp	r9, #0
   15ef8:	beq	15f14 <flatcc_builder_create_cached_vtable@@Base+0x244>
   15efc:	ldr	r0, [r9, #8]
   15f00:	str	r0, [r4, #8]
   15f04:	ldr	r7, [r4]
   15f08:	mov	r0, r7
   15f0c:	sub	sp, fp, #28
   15f10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f14:	ldr	r6, [sl, #120]	; 0x78
   15f18:	ldr	r0, [sl, #172]	; 0xac
   15f1c:	add	r2, r6, r5
   15f20:	cmp	r0, #0
   15f24:	beq	15f60 <flatcc_builder_create_cached_vtable@@Base+0x290>
   15f28:	cmp	r0, r2
   15f2c:	bcs	15f60 <flatcc_builder_create_cached_vtable@@Base+0x290>
   15f30:	ldr	r0, [sl, #116]	; 0x74
   15f34:	cmp	r0, #0
   15f38:	beq	15f04 <flatcc_builder_create_cached_vtable@@Base+0x234>
   15f3c:	ldr	r0, [sl, #92]	; 0x5c
   15f40:	ldr	r2, [sl, #96]	; 0x60
   15f44:	mov	r1, #0
   15f48:	mov	r5, #0
   15f4c:	bl	12994 <memset@plt>
   15f50:	mov	r0, #16
   15f54:	str	r5, [sl, #120]	; 0x78
   15f58:	str	r0, [sl, #124]	; 0x7c
   15f5c:	b	15f04 <flatcc_builder_create_cached_vtable@@Base+0x234>
   15f60:	ldr	r0, [sl, #72]	; 0x48
   15f64:	add	r7, sl, #68	; 0x44
   15f68:	cmp	r2, r0
   15f6c:	bls	15f94 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   15f70:	ldr	r0, [sl, #40]	; 0x28
   15f74:	ldr	ip, [sl, #48]	; 0x30
   15f78:	mov	r1, #2
   15f7c:	mov	r3, #0
   15f80:	str	r1, [sp]
   15f84:	mov	r1, r7
   15f88:	blx	ip
   15f8c:	cmp	r0, #0
   15f90:	bne	15ff4 <flatcc_builder_create_cached_vtable@@Base+0x324>
   15f94:	ldr	r0, [r7]
   15f98:	adds	r0, r0, r6
   15f9c:	beq	15fc0 <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   15fa0:	ldr	r1, [sl, #120]	; 0x78
   15fa4:	mov	r2, r5
   15fa8:	str	r1, [r4, #8]
   15fac:	add	r1, r1, r5
   15fb0:	str	r1, [sl, #120]	; 0x78
   15fb4:	ldr	r1, [sp, #16]
   15fb8:	bl	12904 <memcpy@plt>
   15fbc:	b	15f04 <flatcc_builder_create_cached_vtable@@Base+0x234>
   15fc0:	mvn	r7, #0
   15fc4:	b	15f08 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15fc8:	ldr	r0, [sp, #12]
   15fcc:	cmp	r6, r0
   15fd0:	beq	15fec <flatcc_builder_create_cached_vtable@@Base+0x31c>
   15fd4:	mov	r1, r0
   15fd8:	ldr	r0, [r9, #12]
   15fdc:	str	r0, [r6]
   15fe0:	ldr	r0, [r1]
   15fe4:	str	r0, [r9, #12]
   15fe8:	str	r7, [r1]
   15fec:	ldr	r7, [r9]
   15ff0:	b	15f08 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15ff4:	movw	r0, #55857	; 0xda31
   15ff8:	movw	r1, #51339	; 0xc88b
   15ffc:	movw	r3, #55403	; 0xd86b
   16000:	mov	r2, #308	; 0x134
   16004:	movt	r0, #1
   16008:	movt	r1, #1
   1600c:	movt	r3, #1
   16010:	bl	129c4 <__assert_fail@plt>
   16014:	movw	r0, #55797	; 0xd9f5
   16018:	movw	r1, #51339	; 0xc88b
   1601c:	movw	r3, #55812	; 0xda04
   16020:	movw	r2, #342	; 0x156
   16024:	movt	r0, #1
   16028:	movt	r1, #1
   1602c:	movt	r3, #1
   16030:	bl	129c4 <__assert_fail@plt>

00016034 <flatcc_builder_create_table@@Base>:
   16034:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16038:	add	fp, sp, #24
   1603c:	sub	sp, sp, #80	; 0x50
   16040:	ldr	r5, [fp, #12]
   16044:	cmn	r5, #1
   16048:	ble	1619c <flatcc_builder_create_table@@Base+0x168>
   1604c:	ldr	ip, [fp, #16]
   16050:	tst	ip, #1
   16054:	beq	161bc <flatcc_builder_create_table@@Base+0x188>
   16058:	mov	r8, r0
   1605c:	ldrh	r0, [r0, #128]	; 0x80
   16060:	cmp	r3, #4
   16064:	movls	r3, #4
   16068:	cmp	r0, r3
   1606c:	strhcc	r3, [r8, #128]	; 0x80
   16070:	sub	r3, r3, #1
   16074:	cmp	r5, #1
   16078:	ldr	r4, [r8, #136]	; 0x88
   1607c:	sub	r0, r4, r2
   16080:	and	r0, r0, r3
   16084:	add	r3, ip, r0
   16088:	mvn	ip, #3
   1608c:	sub	r6, ip, r2
   16090:	add	r4, r6, r4
   16094:	add	r6, r4, #1
   16098:	sub	r3, r6, r3
   1609c:	str	r3, [fp, #-28]	; 0xffffffe4
   160a0:	blt	160cc <flatcc_builder_create_table@@Base+0x98>
   160a4:	ldr	r3, [fp, #8]
   160a8:	sub	r6, r4, r0
   160ac:	sub	r4, ip, r6
   160b0:	ldrh	r6, [r3], #2
   160b4:	subs	r5, r5, #1
   160b8:	ldr	r7, [r6, r1]
   160bc:	add	r7, r4, r7
   160c0:	sub	r7, r7, r6
   160c4:	str	r7, [r6, r1]
   160c8:	bne	160b0 <flatcc_builder_create_table@@Base+0x7c>
   160cc:	sub	r3, fp, #28
   160d0:	mov	r4, #4
   160d4:	cmp	r2, #0
   160d8:	str	r3, [sp, #12]
   160dc:	mov	r3, #1
   160e0:	str	r4, [sp, #4]
   160e4:	str	r4, [sp, #16]
   160e8:	str	r3, [sp, #8]
   160ec:	beq	16108 <flatcc_builder_create_table@@Base+0xd4>
   160f0:	mov	r3, #2
   160f4:	add	r4, r2, #4
   160f8:	str	r1, [sp, #20]
   160fc:	str	r2, [sp, #24]
   16100:	str	r3, [sp, #8]
   16104:	str	r4, [sp, #4]
   16108:	cmp	r0, #0
   1610c:	beq	16138 <flatcc_builder_create_table@@Base+0x104>
   16110:	add	r1, sp, #4
   16114:	movw	r2, #50809	; 0xc679
   16118:	add	r4, r4, r0
   1611c:	add	r1, r1, r3, lsl #3
   16120:	add	r3, r3, #1
   16124:	movt	r2, #1
   16128:	str	r4, [sp, #4]
   1612c:	str	r2, [r1, #8]
   16130:	str	r0, [r1, #12]
   16134:	str	r3, [sp, #8]
   16138:	cmp	r4, #0
   1613c:	ble	161dc <flatcc_builder_create_table@@Base+0x1a8>
   16140:	ldr	r0, [r8, #136]	; 0x88
   16144:	ldr	r7, [r8, #44]	; 0x2c
   16148:	add	r1, sp, #4
   1614c:	mov	r2, r3
   16150:	add	r1, r1, #8
   16154:	sub	r5, r0, r4
   16158:	ldr	r0, [r8, #36]	; 0x24
   1615c:	str	r4, [sp]
   16160:	mov	r3, r5
   16164:	blx	r7
   16168:	cmp	r0, #0
   1616c:	streq	r5, [r8, #136]	; 0x88
   16170:	moveq	r0, r5
   16174:	subeq	sp, fp, #24
   16178:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1617c:	movw	r0, #55857	; 0xda31
   16180:	movw	r1, #51339	; 0xc88b
   16184:	movw	r3, #55536	; 0xd8f0
   16188:	movw	r2, #651	; 0x28b
   1618c:	movt	r0, #1
   16190:	movt	r1, #1
   16194:	movt	r3, #1
   16198:	bl	129c4 <__assert_fail@plt>
   1619c:	movw	r0, #53223	; 0xcfe7
   161a0:	movw	r1, #51339	; 0xc88b
   161a4:	movw	r3, #53241	; 0xcff9
   161a8:	movw	r2, #1237	; 0x4d5
   161ac:	movt	r0, #1
   161b0:	movt	r1, #1
   161b4:	movt	r3, #1
   161b8:	bl	129c4 <__assert_fail@plt>
   161bc:	movw	r0, #53397	; 0xd095
   161c0:	movw	r1, #51339	; 0xc88b
   161c4:	movw	r3, #53241	; 0xcff9
   161c8:	movw	r2, #1243	; 0x4db
   161cc:	movt	r0, #1
   161d0:	movt	r1, #1
   161d4:	movt	r3, #1
   161d8:	bl	129c4 <__assert_fail@plt>
   161dc:	movw	r0, #55857	; 0xda31
   161e0:	movw	r1, #51339	; 0xc88b
   161e4:	movw	r3, #55536	; 0xd8f0
   161e8:	movw	r2, #647	; 0x287
   161ec:	movt	r0, #1
   161f0:	movt	r1, #1
   161f4:	movt	r3, #1
   161f8:	bl	129c4 <__assert_fail@plt>

000161fc <flatcc_builder_check_required_field@@Base>:
   161fc:	ldr	r2, [r0, #32]
   16200:	ldrh	r2, [r2, #14]
   16204:	cmp	r2, #3
   16208:	bne	16238 <flatcc_builder_check_required_field@@Base+0x3c>
   1620c:	ldrh	r3, [r0, #8]
   16210:	mov	r2, #0
   16214:	cmp	r3, r1
   16218:	bls	16230 <flatcc_builder_check_required_field@@Base+0x34>
   1621c:	ldr	r0, [r0, #4]
   16220:	add	r0, r0, r1, lsl #1
   16224:	ldrh	r2, [r0]
   16228:	cmp	r2, #0
   1622c:	movwne	r2, #1
   16230:	mov	r0, r2
   16234:	bx	lr
   16238:	push	{fp, lr}
   1623c:	mov	fp, sp
   16240:	movw	r0, #53408	; 0xd0a0
   16244:	movw	r1, #51339	; 0xc88b
   16248:	movw	r3, #53451	; 0xd0cb
   1624c:	movw	r2, #1272	; 0x4f8
   16250:	movt	r0, #1
   16254:	movt	r1, #1
   16258:	movt	r3, #1
   1625c:	bl	129c4 <__assert_fail@plt>

00016260 <flatcc_builder_check_union_field@@Base>:
   16260:	mov	r2, r0
   16264:	ldr	r0, [r0, #32]
   16268:	ldrh	r0, [r0, #14]
   1626c:	cmp	r0, #3
   16270:	bne	162d0 <flatcc_builder_check_union_field@@Base+0x70>
   16274:	cmp	r1, #0
   16278:	mov	r0, #0
   1627c:	ldrhne	r3, [r2, #8]
   16280:	cmpne	r3, r1
   16284:	bhi	1628c <flatcc_builder_check_union_field@@Base+0x2c>
   16288:	bx	lr
   1628c:	ldr	r0, [r2, #4]
   16290:	add	r0, r0, r1, lsl #1
   16294:	ldrh	r1, [r0, #-2]
   16298:	cmp	r1, #0
   1629c:	beq	162c0 <flatcc_builder_check_union_field@@Base+0x60>
   162a0:	ldr	r2, [r2, #16]
   162a4:	ldrh	r0, [r0]
   162a8:	ldrb	r1, [r2, r1]
   162ac:	cmp	r1, #0
   162b0:	beq	162c4 <flatcc_builder_check_union_field@@Base+0x64>
   162b4:	cmp	r0, #0
   162b8:	movwne	r0, #1
   162bc:	bx	lr
   162c0:	ldrh	r0, [r0]
   162c4:	clz	r0, r0
   162c8:	lsr	r0, r0, #5
   162cc:	bx	lr
   162d0:	push	{fp, lr}
   162d4:	mov	fp, sp
   162d8:	movw	r0, #53408	; 0xd0a0
   162dc:	movw	r1, #51339	; 0xc88b
   162e0:	movw	r3, #53534	; 0xd11e
   162e4:	movw	r2, #1279	; 0x4ff
   162e8:	movt	r0, #1
   162ec:	movt	r1, #1
   162f0:	movt	r3, #1
   162f4:	bl	129c4 <__assert_fail@plt>

000162f8 <flatcc_builder_check_required@@Base>:
   162f8:	push	{fp, lr}
   162fc:	mov	fp, sp
   16300:	mov	r3, r0
   16304:	ldr	r0, [r0, #32]
   16308:	ldrh	r0, [r0, #14]
   1630c:	cmp	r0, #3
   16310:	bne	16368 <flatcc_builder_check_required@@Base+0x70>
   16314:	ldrh	ip, [r3, #8]
   16318:	mov	r0, #0
   1631c:	cmp	ip, r2
   16320:	movge	r0, #1
   16324:	cmpge	r2, #1
   16328:	bge	16330 <flatcc_builder_check_required@@Base+0x38>
   1632c:	pop	{fp, pc}
   16330:	ldr	ip, [r3, #4]
   16334:	mov	lr, #0
   16338:	b	1634c <flatcc_builder_check_required@@Base+0x54>
   1633c:	add	lr, lr, #1
   16340:	add	r1, r1, #2
   16344:	cmp	lr, r2
   16348:	popge	{fp, pc}
   1634c:	ldrh	r3, [r1]
   16350:	add	r3, ip, r3, lsl #1
   16354:	ldrh	r3, [r3]
   16358:	cmp	r3, #0
   1635c:	bne	1633c <flatcc_builder_check_required@@Base+0x44>
   16360:	mov	r0, #0
   16364:	pop	{fp, pc}
   16368:	movw	r0, #53408	; 0xd0a0
   1636c:	movw	r1, #51339	; 0xc88b
   16370:	movw	r3, #53614	; 0xd16e
   16374:	movw	r2, #1297	; 0x511
   16378:	movt	r0, #1
   1637c:	movt	r1, #1
   16380:	movt	r3, #1
   16384:	bl	129c4 <__assert_fail@plt>

00016388 <flatcc_builder_end_table@@Base>:
   16388:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1638c:	add	fp, sp, #24
   16390:	sub	sp, sp, #16
   16394:	mov	r4, r0
   16398:	ldr	r0, [r0, #32]
   1639c:	ldrh	r0, [r0, #14]
   163a0:	cmp	r0, #3
   163a4:	bne	16520 <flatcc_builder_end_table@@Base+0x198>
   163a8:	ldrh	r0, [r4, #8]
   163ac:	ldr	r5, [r4, #4]
   163b0:	mov	r1, #4
   163b4:	movw	r2, #31153	; 0x79b1
   163b8:	movt	r2, #40503	; 0x9e37
   163bc:	add	r0, r1, r0, lsl #1
   163c0:	strh	r0, [r5, #-4]!
   163c4:	ldrh	r1, [r4, #20]
   163c8:	uxth	r6, r0
   163cc:	add	r1, r1, #4
   163d0:	strh	r1, [r5, #2]
   163d4:	uxth	r1, r1
   163d8:	ldr	r0, [r4, #12]
   163dc:	eor	r0, r0, r6
   163e0:	mul	r0, r0, r2
   163e4:	eor	r0, r0, r1
   163e8:	mov	r1, r5
   163ec:	mul	r3, r0, r2
   163f0:	mov	r0, r4
   163f4:	mov	r2, r6
   163f8:	str	r3, [r4, #12]
   163fc:	bl	15cd0 <flatcc_builder_create_cached_vtable@@Base>
   16400:	cmp	r0, #0
   16404:	beq	16510 <flatcc_builder_end_table@@Base+0x188>
   16408:	mov	r7, r0
   1640c:	mov	r0, r5
   16410:	mov	r1, #0
   16414:	mov	r2, r6
   16418:	mov	r8, #0
   1641c:	bl	12994 <memset@plt>
   16420:	ldr	r5, [r4, #32]
   16424:	ldr	r0, [r4, #76]	; 0x4c
   16428:	ldr	r6, [r4]
   1642c:	ldrh	r3, [r4, #130]	; 0x82
   16430:	ldr	r1, [r4, #16]
   16434:	ldr	r2, [r4, #20]
   16438:	ldr	r5, [r5, #20]
   1643c:	add	r0, r0, r5
   16440:	sub	r6, r6, r0
   16444:	asr	r6, r6, #1
   16448:	stm	sp, {r0, r6, r7}
   1644c:	mov	r0, r4
   16450:	bl	16034 <flatcc_builder_create_table@@Base>
   16454:	cmp	r0, #0
   16458:	beq	16514 <flatcc_builder_end_table@@Base+0x18c>
   1645c:	ldr	r1, [r4, #32]
   16460:	mov	r5, r0
   16464:	ldr	r0, [r4, #16]
   16468:	ldr	r2, [r4, #20]
   1646c:	ldr	r3, [r4, #52]	; 0x34
   16470:	ldr	r7, [r1, #24]
   16474:	str	r7, [r4, #12]
   16478:	ldrh	r7, [r1, #28]
   1647c:	strh	r7, [r4, #8]
   16480:	ldr	r7, [r1, #16]
   16484:	add	r3, r3, r7
   16488:	str	r3, [r4, #4]
   1648c:	ldr	r3, [r4, #76]	; 0x4c
   16490:	ldr	r1, [r1, #20]
   16494:	add	r1, r3, r1
   16498:	str	r1, [r4]
   1649c:	mov	r1, #0
   164a0:	bl	12994 <memset@plt>
   164a4:	ldr	r0, [r4, #32]
   164a8:	ldr	r1, [r4, #60]	; 0x3c
   164ac:	ldr	r2, [r4, #64]	; 0x40
   164b0:	mov	r8, r5
   164b4:	ldr	r3, [r0, #8]
   164b8:	str	r3, [r4, #20]
   164bc:	ldr	r3, [r0]
   164c0:	str	r3, [r4, #28]
   164c4:	add	r1, r1, r3
   164c8:	ldr	r7, [r0, #4]
   164cc:	str	r1, [r4, #16]
   164d0:	sub	r1, r2, r3
   164d4:	cmp	r1, r7
   164d8:	movhi	r1, r7
   164dc:	str	r1, [r4, #24]
   164e0:	ldrh	r1, [r4, #130]	; 0x82
   164e4:	ldrh	r2, [r4, #128]	; 0x80
   164e8:	cmp	r2, r1
   164ec:	strhcc	r1, [r4, #128]	; 0x80
   164f0:	ldrh	r1, [r0, #12]
   164f4:	sub	r0, r0, #36	; 0x24
   164f8:	str	r0, [r4, #32]
   164fc:	strh	r1, [r4, #130]	; 0x82
   16500:	ldr	r0, [r4, #156]	; 0x9c
   16504:	sub	r0, r0, #1
   16508:	str	r0, [r4, #156]	; 0x9c
   1650c:	b	16514 <flatcc_builder_end_table@@Base+0x18c>
   16510:	mov	r8, #0
   16514:	mov	r0, r8
   16518:	sub	sp, fp, #24
   1651c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16520:	movw	r0, #53408	; 0xd0a0
   16524:	movw	r1, #51339	; 0xc88b
   16528:	movw	r3, #53704	; 0xd1c8
   1652c:	movw	r2, #1317	; 0x525
   16530:	movt	r0, #1
   16534:	movt	r1, #1
   16538:	movt	r3, #1
   1653c:	bl	129c4 <__assert_fail@plt>

00016540 <flatcc_builder_create_vector@@Base>:
   16540:	push	{r4, r5, r6, r7, fp, lr}
   16544:	add	fp, sp, #16
   16548:	sub	sp, sp, #80	; 0x50
   1654c:	mov	r7, r0
   16550:	ldr	r0, [fp, #12]
   16554:	cmp	r2, r0
   16558:	bhi	16658 <flatcc_builder_create_vector@@Base+0x118>
   1655c:	ldr	r0, [fp, #8]
   16560:	mov	r4, r2
   16564:	ldrh	r2, [r7, #128]	; 0x80
   16568:	mov	r5, #4
   1656c:	cmp	r0, #4
   16570:	movls	r0, r5
   16574:	cmp	r2, r0
   16578:	sub	r2, fp, #20
   1657c:	strhcc	r0, [r7, #128]	; 0x80
   16580:	str	r4, [fp, #-20]	; 0xffffffec
   16584:	sub	r0, r0, #1
   16588:	ldr	ip, [r7, #136]	; 0x88
   1658c:	str	r2, [sp, #12]
   16590:	mov	r2, #1
   16594:	str	r5, [sp, #4]
   16598:	str	r5, [sp, #16]
   1659c:	str	r2, [sp, #8]
   165a0:	mls	r6, r3, r4, ip
   165a4:	mul	r3, r3, r4
   165a8:	and	r0, r6, r0
   165ac:	cmp	r3, #0
   165b0:	beq	165cc <flatcc_builder_create_vector@@Base+0x8c>
   165b4:	mov	r2, #2
   165b8:	add	r5, r3, #4
   165bc:	str	r1, [sp, #20]
   165c0:	str	r3, [sp, #24]
   165c4:	str	r2, [sp, #8]
   165c8:	str	r5, [sp, #4]
   165cc:	cmp	r0, #0
   165d0:	beq	165fc <flatcc_builder_create_vector@@Base+0xbc>
   165d4:	add	r1, sp, #4
   165d8:	movw	r3, #50809	; 0xc679
   165dc:	add	r5, r5, r0
   165e0:	add	r1, r1, r2, lsl #3
   165e4:	add	r2, r2, #1
   165e8:	movt	r3, #1
   165ec:	str	r5, [sp, #4]
   165f0:	str	r3, [r1, #8]
   165f4:	str	r0, [r1, #12]
   165f8:	str	r2, [sp, #8]
   165fc:	cmp	r5, #0
   16600:	ble	16678 <flatcc_builder_create_vector@@Base+0x138>
   16604:	ldr	r0, [r7, #36]	; 0x24
   16608:	ldr	r6, [r7, #44]	; 0x2c
   1660c:	add	r1, sp, #4
   16610:	sub	r4, ip, r5
   16614:	str	r5, [sp]
   16618:	add	r1, r1, #8
   1661c:	mov	r3, r4
   16620:	blx	r6
   16624:	cmp	r0, #0
   16628:	streq	r4, [r7, #136]	; 0x88
   1662c:	moveq	r0, r4
   16630:	subeq	sp, fp, #16
   16634:	popeq	{r4, r5, r6, r7, fp, pc}
   16638:	movw	r0, #55857	; 0xda31
   1663c:	movw	r1, #51339	; 0xc88b
   16640:	movw	r3, #55536	; 0xd8f0
   16644:	movw	r2, #651	; 0x28b
   16648:	movt	r0, #1
   1664c:	movt	r1, #1
   16650:	movt	r3, #1
   16654:	bl	129c4 <__assert_fail@plt>
   16658:	movw	r0, #53770	; 0xd20a
   1665c:	movw	r1, #51339	; 0xc88b
   16660:	movw	r3, #53789	; 0xd21d
   16664:	movw	r2, #1365	; 0x555
   16668:	movt	r0, #1
   1666c:	movt	r1, #1
   16670:	movt	r3, #1
   16674:	bl	129c4 <__assert_fail@plt>
   16678:	movw	r0, #55857	; 0xda31
   1667c:	movw	r1, #51339	; 0xc88b
   16680:	movw	r3, #55536	; 0xd8f0
   16684:	movw	r2, #647	; 0x287
   16688:	movt	r0, #1
   1668c:	movt	r1, #1
   16690:	movt	r3, #1
   16694:	bl	129c4 <__assert_fail@plt>

00016698 <flatcc_builder_end_vector@@Base>:
   16698:	push	{r4, r5, fp, lr}
   1669c:	add	fp, sp, #8
   166a0:	sub	sp, sp, #8
   166a4:	mov	r4, r0
   166a8:	ldr	r0, [r0, #32]
   166ac:	ldrh	r1, [r0, #14]
   166b0:	cmp	r1, #4
   166b4:	bne	16768 <flatcc_builder_end_vector@@Base+0xd0>
   166b8:	ldr	r3, [r0, #16]
   166bc:	ldr	r2, [r0, #20]
   166c0:	ldr	r0, [r0, #24]
   166c4:	ldr	r1, [r4, #16]
   166c8:	ldrh	r5, [r4, #130]	; 0x82
   166cc:	str	r0, [sp, #4]
   166d0:	mov	r0, r4
   166d4:	str	r5, [sp]
   166d8:	bl	16540 <flatcc_builder_create_vector@@Base>
   166dc:	mov	r5, r0
   166e0:	cmp	r0, #0
   166e4:	beq	1675c <flatcc_builder_end_vector@@Base+0xc4>
   166e8:	ldr	r0, [r4, #16]
   166ec:	ldr	r2, [r4, #20]
   166f0:	mov	r1, #0
   166f4:	bl	12994 <memset@plt>
   166f8:	ldr	r0, [r4, #32]
   166fc:	ldr	r1, [r4, #60]	; 0x3c
   16700:	ldr	ip, [r4, #64]	; 0x40
   16704:	ldr	r3, [r0, #8]
   16708:	str	r3, [r4, #20]
   1670c:	ldr	r3, [r0]
   16710:	str	r3, [r4, #28]
   16714:	add	r1, r1, r3
   16718:	ldr	r2, [r0, #4]
   1671c:	str	r1, [r4, #16]
   16720:	sub	r1, ip, r3
   16724:	cmp	r1, r2
   16728:	movhi	r1, r2
   1672c:	str	r1, [r4, #24]
   16730:	ldrh	r1, [r4, #130]	; 0x82
   16734:	ldrh	r2, [r4, #128]	; 0x80
   16738:	cmp	r2, r1
   1673c:	strhcc	r1, [r4, #128]	; 0x80
   16740:	ldrh	r1, [r0, #12]
   16744:	sub	r0, r0, #36	; 0x24
   16748:	str	r0, [r4, #32]
   1674c:	strh	r1, [r4, #130]	; 0x82
   16750:	ldr	r0, [r4, #156]	; 0x9c
   16754:	sub	r0, r0, #1
   16758:	str	r0, [r4, #156]	; 0x9c
   1675c:	mov	r0, r5
   16760:	sub	sp, fp, #8
   16764:	pop	{r4, r5, fp, pc}
   16768:	movw	r0, #52142	; 0xcbae
   1676c:	movw	r1, #51339	; 0xc88b
   16770:	movw	r3, #53907	; 0xd293
   16774:	movw	r2, #1400	; 0x578
   16778:	movt	r0, #1
   1677c:	movt	r1, #1
   16780:	movt	r3, #1
   16784:	bl	129c4 <__assert_fail@plt>

00016788 <flatcc_builder_vector_count@@Base>:
   16788:	ldr	r0, [r0, #32]
   1678c:	ldr	r0, [r0, #20]
   16790:	bx	lr

00016794 <flatcc_builder_vector_edit@@Base>:
   16794:	ldr	r0, [r0, #16]
   16798:	bx	lr

0001679c <flatcc_builder_create_offset_vector_direct@@Base>:
   1679c:	mov	r3, #0
   167a0:	b	167a4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   167a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   167a8:	add	fp, sp, #24
   167ac:	sub	sp, sp, #80	; 0x50
   167b0:	mov	r6, #0
   167b4:	cmn	r2, #-1073741823	; 0xc0000001
   167b8:	bhi	168f4 <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   167bc:	mov	r8, r0
   167c0:	ldrh	r0, [r0, #128]	; 0x80
   167c4:	sub	r7, fp, #28
   167c8:	mov	r5, #4
   167cc:	mov	r4, #1
   167d0:	cmp	r0, #3
   167d4:	movls	r0, #4
   167d8:	strhls	r0, [r8, #128]	; 0x80
   167dc:	str	r2, [fp, #-28]	; 0xffffffe4
   167e0:	ldr	ip, [r8, #136]	; 0x88
   167e4:	str	r7, [sp, #12]
   167e8:	mov	r7, #0
   167ec:	str	r5, [sp, #4]
   167f0:	str	r5, [sp, #16]
   167f4:	str	r4, [sp, #8]
   167f8:	cmp	r7, r2, lsl #2
   167fc:	and	r6, ip, #3
   16800:	beq	16820 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   16804:	lsl	r7, r2, #2
   16808:	mov	r4, #2
   1680c:	str	r1, [sp, #20]
   16810:	add	r5, r7, #4
   16814:	str	r7, [sp, #24]
   16818:	str	r4, [sp, #8]
   1681c:	str	r5, [sp, #4]
   16820:	cmp	r6, #0
   16824:	beq	16850 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   16828:	add	r7, sp, #4
   1682c:	movw	r0, #50809	; 0xc679
   16830:	add	r5, r5, r6
   16834:	add	r7, r7, r4, lsl #3
   16838:	add	r4, r4, #1
   1683c:	movt	r0, #1
   16840:	str	r5, [sp, #4]
   16844:	str	r0, [r7, #8]
   16848:	str	r6, [r7, #12]
   1684c:	str	r4, [sp, #8]
   16850:	cmp	r2, #0
   16854:	beq	168bc <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   16858:	mvn	r0, #3
   1685c:	mov	r6, #0
   16860:	sub	r0, r0, ip
   16864:	add	r0, r0, r5
   16868:	ldr	r7, [r1, r6, lsl #2]
   1686c:	cmp	r7, #0
   16870:	beq	16894 <flatcc_builder_create_offset_vector_direct@@Base+0xf8>
   16874:	add	r7, r0, r7
   16878:	cmp	r3, #0
   1687c:	str	r7, [r1, r6, lsl #2]
   16880:	beq	168a8 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   16884:	ldrb	r7, [r3, r6]
   16888:	cmp	r7, #0
   1688c:	bne	168a8 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   16890:	b	16900 <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   16894:	cmp	r3, #0
   16898:	beq	16940 <flatcc_builder_create_offset_vector_direct@@Base+0x1a4>
   1689c:	ldrb	r7, [r3, r6]
   168a0:	cmp	r7, #0
   168a4:	bne	16920 <flatcc_builder_create_offset_vector_direct@@Base+0x184>
   168a8:	add	r6, r6, #1
   168ac:	sub	r0, r0, #4
   168b0:	cmp	r6, r2
   168b4:	bcc	16868 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   168b8:	ldr	ip, [r8, #136]	; 0x88
   168bc:	cmp	r5, #0
   168c0:	ble	16960 <flatcc_builder_create_offset_vector_direct@@Base+0x1c4>
   168c4:	ldr	r0, [r8, #36]	; 0x24
   168c8:	ldr	r7, [r8, #44]	; 0x2c
   168cc:	add	r1, sp, #4
   168d0:	sub	r6, ip, r5
   168d4:	mov	r2, r4
   168d8:	str	r5, [sp]
   168dc:	add	r1, r1, #8
   168e0:	mov	r3, r6
   168e4:	blx	r7
   168e8:	cmp	r0, #0
   168ec:	bne	16980 <flatcc_builder_create_offset_vector_direct@@Base+0x1e4>
   168f0:	str	r6, [r8, #136]	; 0x88
   168f4:	mov	r0, r6
   168f8:	sub	sp, fp, #24
   168fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16900:	movw	r0, #55845	; 0xda25
   16904:	movw	r1, #51339	; 0xc88b
   16908:	movw	r3, #55859	; 0xda33
   1690c:	movw	r2, #1457	; 0x5b1
   16910:	movt	r0, #1
   16914:	movt	r1, #1
   16918:	movt	r3, #1
   1691c:	bl	129c4 <__assert_fail@plt>
   16920:	movw	r0, #55990	; 0xdab6
   16924:	movw	r1, #51339	; 0xc88b
   16928:	movw	r3, #55859	; 0xda33
   1692c:	movw	r2, #1461	; 0x5b5
   16930:	movt	r0, #1
   16934:	movt	r1, #1
   16938:	movt	r3, #1
   1693c:	bl	129c4 <__assert_fail@plt>
   16940:	movw	r0, #55857	; 0xda31
   16944:	movw	r1, #51339	; 0xc88b
   16948:	movw	r3, #55859	; 0xda33
   1694c:	movw	r2, #1463	; 0x5b7
   16950:	movt	r0, #1
   16954:	movt	r1, #1
   16958:	movt	r3, #1
   1695c:	bl	129c4 <__assert_fail@plt>
   16960:	movw	r0, #55857	; 0xda31
   16964:	movw	r1, #51339	; 0xc88b
   16968:	movw	r3, #55536	; 0xd8f0
   1696c:	movw	r2, #647	; 0x287
   16970:	movt	r0, #1
   16974:	movt	r1, #1
   16978:	movt	r3, #1
   1697c:	bl	129c4 <__assert_fail@plt>
   16980:	movw	r0, #55857	; 0xda31
   16984:	movw	r1, #51339	; 0xc88b
   16988:	movw	r3, #55536	; 0xd8f0
   1698c:	movw	r2, #651	; 0x28b
   16990:	movt	r0, #1
   16994:	movt	r1, #1
   16998:	movt	r3, #1
   1699c:	bl	129c4 <__assert_fail@plt>

000169a0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   169a0:	push	{r4, r5, fp, lr}
   169a4:	add	fp, sp, #8
   169a8:	mov	r4, r0
   169ac:	ldr	r0, [r0, #32]
   169b0:	mov	r3, r1
   169b4:	ldrh	r1, [r0, #14]
   169b8:	cmp	r1, #5
   169bc:	bne	16a58 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   169c0:	ldr	r2, [r0, #20]
   169c4:	ldr	r1, [r4, #16]
   169c8:	mov	r0, r4
   169cc:	bl	167a4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   169d0:	mov	r5, r0
   169d4:	cmp	r0, #0
   169d8:	beq	16a50 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   169dc:	ldr	r0, [r4, #16]
   169e0:	ldr	r2, [r4, #20]
   169e4:	mov	r1, #0
   169e8:	bl	12994 <memset@plt>
   169ec:	ldr	r0, [r4, #32]
   169f0:	ldr	r1, [r4, #60]	; 0x3c
   169f4:	ldr	ip, [r4, #64]	; 0x40
   169f8:	ldr	r3, [r0, #8]
   169fc:	str	r3, [r4, #20]
   16a00:	ldr	r3, [r0]
   16a04:	str	r3, [r4, #28]
   16a08:	add	r1, r1, r3
   16a0c:	ldr	r2, [r0, #4]
   16a10:	str	r1, [r4, #16]
   16a14:	sub	r1, ip, r3
   16a18:	cmp	r1, r2
   16a1c:	movhi	r1, r2
   16a20:	str	r1, [r4, #24]
   16a24:	ldrh	r1, [r4, #130]	; 0x82
   16a28:	ldrh	r2, [r4, #128]	; 0x80
   16a2c:	cmp	r2, r1
   16a30:	strhcc	r1, [r4, #128]	; 0x80
   16a34:	ldrh	r1, [r0, #12]
   16a38:	sub	r0, r0, #36	; 0x24
   16a3c:	str	r0, [r4, #32]
   16a40:	strh	r1, [r4, #130]	; 0x82
   16a44:	ldr	r0, [r4, #156]	; 0x9c
   16a48:	sub	r0, r0, #1
   16a4c:	str	r0, [r4, #156]	; 0x9c
   16a50:	mov	r0, r5
   16a54:	pop	{r4, r5, fp, pc}
   16a58:	movw	r0, #52391	; 0xcca7
   16a5c:	movw	r1, #51339	; 0xc88b
   16a60:	movw	r3, #54048	; 0xd320
   16a64:	movw	r2, #1493	; 0x5d5
   16a68:	movt	r0, #1
   16a6c:	movt	r1, #1
   16a70:	movt	r3, #1
   16a74:	bl	129c4 <__assert_fail@plt>

00016a78 <flatcc_builder_offset_vector_edit@@Base>:
   16a78:	ldr	r0, [r0, #16]
   16a7c:	bx	lr

00016a80 <flatcc_builder_offset_vector_count@@Base>:
   16a80:	ldr	r0, [r0, #32]
   16a84:	ldr	r0, [r0, #20]
   16a88:	bx	lr

00016a8c <flatcc_builder_table_add_union@@Base>:
   16a8c:	push	{r4, r5, r6, r7, fp, lr}
   16a90:	add	fp, sp, #16
   16a94:	mov	r5, r0
   16a98:	ldr	r0, [r0, #32]
   16a9c:	ldrh	r0, [r0, #14]
   16aa0:	cmp	r0, #3
   16aa4:	bne	16b2c <flatcc_builder_table_add_union@@Base+0xa0>
   16aa8:	mov	r7, r3
   16aac:	mov	r4, r2
   16ab0:	mov	r6, r1
   16ab4:	cmp	r3, #0
   16ab8:	beq	16ac8 <flatcc_builder_table_add_union@@Base+0x3c>
   16abc:	uxtb	r0, r4
   16ac0:	cmp	r0, #0
   16ac4:	beq	16b4c <flatcc_builder_table_add_union@@Base+0xc0>
   16ac8:	cmp	r7, #0
   16acc:	beq	16ae8 <flatcc_builder_table_add_union@@Base+0x5c>
   16ad0:	mov	r0, r5
   16ad4:	mov	r1, r6
   16ad8:	bl	16b8c <flatcc_builder_table_add_offset@@Base>
   16adc:	cmp	r0, #0
   16ae0:	beq	16b6c <flatcc_builder_table_add_union@@Base+0xe0>
   16ae4:	str	r7, [r0]
   16ae8:	sub	r1, r6, #1
   16aec:	mov	r0, r5
   16af0:	mov	r2, #1
   16af4:	mov	r3, #1
   16af8:	bl	16cc8 <flatcc_builder_table_add@@Base>
   16afc:	cmp	r0, #0
   16b00:	strbne	r4, [r0]
   16b04:	movne	r0, #0
   16b08:	popne	{r4, r5, r6, r7, fp, pc}
   16b0c:	movw	r0, #54294	; 0xd416
   16b10:	movw	r1, #51339	; 0xc88b
   16b14:	movw	r3, #54162	; 0xd392
   16b18:	movw	r2, #1526	; 0x5f6
   16b1c:	movt	r0, #1
   16b20:	movt	r1, #1
   16b24:	movt	r3, #1
   16b28:	bl	129c4 <__assert_fail@plt>
   16b2c:	movw	r0, #53408	; 0xd0a0
   16b30:	movw	r1, #51339	; 0xc88b
   16b34:	movw	r3, #54162	; 0xd392
   16b38:	movw	r2, #1518	; 0x5ee
   16b3c:	movt	r0, #1
   16b40:	movt	r1, #1
   16b44:	movt	r3, #1
   16b48:	bl	129c4 <__assert_fail@plt>
   16b4c:	movw	r0, #54250	; 0xd3ea
   16b50:	movw	r1, #51339	; 0xc88b
   16b54:	movw	r3, #54162	; 0xd392
   16b58:	movw	r2, #1519	; 0x5ef
   16b5c:	movt	r0, #1
   16b60:	movt	r1, #1
   16b64:	movt	r3, #1
   16b68:	bl	129c4 <__assert_fail@plt>
   16b6c:	movw	r0, #54284	; 0xd40c
   16b70:	movw	r1, #51339	; 0xc88b
   16b74:	movw	r3, #54162	; 0xd392
   16b78:	movw	r2, #1522	; 0x5f2
   16b7c:	movt	r0, #1
   16b80:	movt	r1, #1
   16b84:	movt	r3, #1
   16b88:	bl	129c4 <__assert_fail@plt>

00016b8c <flatcc_builder_table_add_offset@@Base>:
   16b8c:	push	{r4, r5, r6, r7, fp, lr}
   16b90:	add	fp, sp, #16
   16b94:	mov	r4, r0
   16b98:	ldr	r0, [r0, #32]
   16b9c:	ldrh	r0, [r0, #14]
   16ba0:	cmp	r0, #3
   16ba4:	bne	16c68 <flatcc_builder_table_add_offset@@Base+0xdc>
   16ba8:	movw	r0, #32765	; 0x7ffd
   16bac:	mov	r5, r1
   16bb0:	cmp	r1, r0
   16bb4:	bcs	16c88 <flatcc_builder_table_add_offset@@Base+0xfc>
   16bb8:	ldr	r0, [r4, #4]
   16bbc:	add	r1, r0, r5, lsl #1
   16bc0:	ldrh	r1, [r1]
   16bc4:	cmp	r1, #0
   16bc8:	bne	16ca8 <flatcc_builder_table_add_offset@@Base+0x11c>
   16bcc:	ldr	r2, [r4, #20]
   16bd0:	ldr	r1, [r4, #12]
   16bd4:	ldr	r3, [r4, #24]
   16bd8:	add	r2, r2, #3
   16bdc:	eor	r1, r1, r5
   16be0:	bic	r7, r2, #3
   16be4:	movw	r2, #31153	; 0x79b1
   16be8:	movt	r2, #40503	; 0x9e37
   16bec:	add	r6, r7, #4
   16bf0:	mul	r1, r1, r2
   16bf4:	cmp	r6, r3
   16bf8:	str	r6, [r4, #20]
   16bfc:	eor	r1, r1, #4
   16c00:	mul	r1, r1, r2
   16c04:	str	r1, [r4, #12]
   16c08:	bls	16c30 <flatcc_builder_table_add_offset@@Base+0xa4>
   16c0c:	mov	r0, r4
   16c10:	mov	r1, r6
   16c14:	movw	r2, #65532	; 0xfffc
   16c18:	bl	17b88 <flatcc_builder_get_emit_context@@Base+0x8>
   16c1c:	mov	r1, r0
   16c20:	mov	r0, #0
   16c24:	cmp	r1, #0
   16c28:	popne	{r4, r5, r6, r7, fp, pc}
   16c2c:	ldr	r0, [r4, #4]
   16c30:	uxth	r1, r5
   16c34:	add	r0, r0, r1, lsl #1
   16c38:	strh	r6, [r0]
   16c3c:	ldrh	r0, [r4, #8]
   16c40:	cmp	r0, r1
   16c44:	addls	r0, r5, #1
   16c48:	strhls	r0, [r4, #8]
   16c4c:	ldr	r0, [r4]
   16c50:	add	r1, r0, #2
   16c54:	str	r1, [r4]
   16c58:	strh	r7, [r0]
   16c5c:	ldr	r0, [r4, #16]
   16c60:	add	r0, r0, r7
   16c64:	pop	{r4, r5, r6, r7, fp, pc}
   16c68:	movw	r0, #53408	; 0xd0a0
   16c6c:	movw	r1, #51339	; 0xc88b
   16c70:	movw	r3, #55188	; 0xd794
   16c74:	movw	r2, #1811	; 0x713
   16c78:	movt	r0, #1
   16c7c:	movt	r1, #1
   16c80:	movt	r3, #1
   16c84:	bl	129c4 <__assert_fail@plt>
   16c88:	movw	r0, #55060	; 0xd714
   16c8c:	movw	r1, #51339	; 0xc88b
   16c90:	movw	r3, #55188	; 0xd794
   16c94:	movw	r2, #1812	; 0x714
   16c98:	movt	r0, #1
   16c9c:	movt	r1, #1
   16ca0:	movt	r3, #1
   16ca4:	bl	129c4 <__assert_fail@plt>
   16ca8:	movw	r0, #55857	; 0xda31
   16cac:	movw	r1, #51339	; 0xc88b
   16cb0:	movw	r3, #55188	; 0xd794
   16cb4:	movw	r2, #1819	; 0x71b
   16cb8:	movt	r0, #1
   16cbc:	movt	r1, #1
   16cc0:	movt	r3, #1
   16cc4:	bl	129c4 <__assert_fail@plt>

00016cc8 <flatcc_builder_table_add@@Base>:
   16cc8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16ccc:	add	fp, sp, #24
   16cd0:	mov	r4, r0
   16cd4:	ldr	r0, [r0, #32]
   16cd8:	ldrh	r0, [r0, #14]
   16cdc:	cmp	r0, #3
   16ce0:	bne	16dac <flatcc_builder_table_add@@Base+0xe4>
   16ce4:	movw	r0, #32765	; 0x7ffd
   16ce8:	mov	r8, r1
   16cec:	cmp	r1, r0
   16cf0:	bcs	16dcc <flatcc_builder_table_add@@Base+0x104>
   16cf4:	ldrh	r0, [r4, #130]	; 0x82
   16cf8:	cmp	r0, r3
   16cfc:	strhcc	r3, [r4, #130]	; 0x82
   16d00:	ldr	r0, [r4, #4]
   16d04:	add	r1, r0, r8, lsl #1
   16d08:	ldrh	r1, [r1]
   16d0c:	cmp	r1, #0
   16d10:	bne	16dec <flatcc_builder_table_add@@Base+0x124>
   16d14:	ldr	r1, [r4, #12]
   16d18:	movw	r7, #31153	; 0x79b1
   16d1c:	ldr	r6, [r4, #20]
   16d20:	ldr	r5, [r4, #24]
   16d24:	movt	r7, #40503	; 0x9e37
   16d28:	eor	r1, r1, r8
   16d2c:	mul	r1, r1, r7
   16d30:	eor	r1, r1, r2
   16d34:	mul	r1, r1, r7
   16d38:	str	r1, [r4, #12]
   16d3c:	add	r1, r3, r6
   16d40:	rsb	r3, r3, #0
   16d44:	sub	r1, r1, #1
   16d48:	and	r6, r1, r3
   16d4c:	add	r1, r6, r2
   16d50:	cmp	r1, r5
   16d54:	str	r1, [r4, #20]
   16d58:	bcc	16d80 <flatcc_builder_table_add@@Base+0xb8>
   16d5c:	add	r1, r1, #1
   16d60:	mov	r0, r4
   16d64:	movw	r2, #65532	; 0xfffc
   16d68:	bl	17b88 <flatcc_builder_get_emit_context@@Base+0x8>
   16d6c:	mov	r1, r0
   16d70:	mov	r0, #0
   16d74:	cmp	r1, #0
   16d78:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   16d7c:	ldr	r0, [r4, #4]
   16d80:	uxth	r1, r8
   16d84:	add	r2, r6, #4
   16d88:	add	r0, r0, r1, lsl #1
   16d8c:	strh	r2, [r0]
   16d90:	ldrh	r0, [r4, #8]
   16d94:	cmp	r0, r1
   16d98:	addls	r0, r8, #1
   16d9c:	strhls	r0, [r4, #8]
   16da0:	ldr	r0, [r4, #16]
   16da4:	add	r0, r0, r6
   16da8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16dac:	movw	r0, #53408	; 0xd0a0
   16db0:	movw	r1, #51339	; 0xc88b
   16db4:	movw	r3, #54986	; 0xd6ca
   16db8:	movw	r2, #1773	; 0x6ed
   16dbc:	movt	r0, #1
   16dc0:	movt	r1, #1
   16dc4:	movt	r3, #1
   16dc8:	bl	129c4 <__assert_fail@plt>
   16dcc:	movw	r0, #55060	; 0xd714
   16dd0:	movw	r1, #51339	; 0xc88b
   16dd4:	movw	r3, #54986	; 0xd6ca
   16dd8:	movw	r2, #1774	; 0x6ee
   16ddc:	movt	r0, #1
   16de0:	movt	r1, #1
   16de4:	movt	r3, #1
   16de8:	bl	129c4 <__assert_fail@plt>
   16dec:	movw	r0, #55857	; 0xda31
   16df0:	movw	r1, #51339	; 0xc88b
   16df4:	movw	r3, #54986	; 0xd6ca
   16df8:	movw	r2, #1784	; 0x6f8
   16dfc:	movt	r0, #1
   16e00:	movt	r1, #1
   16e04:	movt	r3, #1
   16e08:	bl	129c4 <__assert_fail@plt>

00016e0c <flatcc_builder_table_add_union_vector@@Base>:
   16e0c:	push	{r4, r5, r6, r7, fp, lr}
   16e10:	add	fp, sp, #16
   16e14:	mov	r6, r0
   16e18:	ldr	r0, [r0, #32]
   16e1c:	ldrh	r0, [r0, #14]
   16e20:	cmp	r0, #3
   16e24:	bne	16e8c <flatcc_builder_table_add_union_vector@@Base+0x80>
   16e28:	clz	r0, r3
   16e2c:	mov	r5, r1
   16e30:	clz	r1, r2
   16e34:	mov	r4, r3
   16e38:	mov	r7, r2
   16e3c:	lsr	r0, r0, #5
   16e40:	lsr	r1, r1, #5
   16e44:	cmp	r1, r0
   16e48:	bne	16eac <flatcc_builder_table_add_union_vector@@Base+0xa0>
   16e4c:	cmp	r7, #0
   16e50:	beq	16e84 <flatcc_builder_table_add_union_vector@@Base+0x78>
   16e54:	sub	r1, r5, #1
   16e58:	mov	r0, r6
   16e5c:	bl	16b8c <flatcc_builder_table_add_offset@@Base>
   16e60:	cmp	r0, #0
   16e64:	beq	16ecc <flatcc_builder_table_add_union_vector@@Base+0xc0>
   16e68:	str	r7, [r0]
   16e6c:	mov	r0, r6
   16e70:	mov	r1, r5
   16e74:	bl	16b8c <flatcc_builder_table_add_offset@@Base>
   16e78:	cmp	r0, #0
   16e7c:	beq	16eec <flatcc_builder_table_add_union_vector@@Base+0xe0>
   16e80:	str	r4, [r0]
   16e84:	mov	r0, #0
   16e88:	pop	{r4, r5, r6, r7, fp, pc}
   16e8c:	movw	r0, #53408	; 0xd0a0
   16e90:	movw	r1, #51339	; 0xc88b
   16e94:	movw	r3, #54306	; 0xd422
   16e98:	mov	r2, #1536	; 0x600
   16e9c:	movt	r0, #1
   16ea0:	movt	r1, #1
   16ea4:	movt	r3, #1
   16ea8:	bl	129c4 <__assert_fail@plt>
   16eac:	movw	r0, #54405	; 0xd485
   16eb0:	movw	r1, #51339	; 0xc88b
   16eb4:	movw	r3, #54306	; 0xd422
   16eb8:	movw	r2, #1537	; 0x601
   16ebc:	movt	r0, #1
   16ec0:	movt	r1, #1
   16ec4:	movt	r3, #1
   16ec8:	bl	129c4 <__assert_fail@plt>
   16ecc:	movw	r0, #54284	; 0xd40c
   16ed0:	movw	r1, #51339	; 0xc88b
   16ed4:	movw	r3, #54306	; 0xd422
   16ed8:	movw	r2, #1540	; 0x604
   16edc:	movt	r0, #1
   16ee0:	movt	r1, #1
   16ee4:	movt	r3, #1
   16ee8:	bl	129c4 <__assert_fail@plt>
   16eec:	movw	r0, #54284	; 0xd40c
   16ef0:	movw	r1, #51339	; 0xc88b
   16ef4:	movw	r3, #54306	; 0xd422
   16ef8:	movw	r2, #1544	; 0x608
   16efc:	movt	r0, #1
   16f00:	movt	r1, #1
   16f04:	movt	r3, #1
   16f08:	bl	129c4 <__assert_fail@plt>

00016f0c <flatcc_builder_create_union_vector@@Base>:
   16f0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f10:	add	fp, sp, #28
   16f14:	sub	sp, sp, #20
   16f18:	mov	sl, r0
   16f1c:	mov	r0, #0
   16f20:	mov	r9, r3
   16f24:	mov	r7, r2
   16f28:	mov	r4, r1
   16f2c:	str	r0, [sl]
   16f30:	str	r0, [sl, #4]
   16f34:	mov	r0, r1
   16f38:	bl	156b8 <flatcc_builder_start_offset_vector@@Base>
   16f3c:	cmp	r0, #0
   16f40:	beq	16f4c <flatcc_builder_create_union_vector@@Base+0x40>
   16f44:	sub	sp, fp, #28
   16f48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f4c:	mov	r0, r4
   16f50:	mov	r1, r9
   16f54:	bl	15074 <flatcc_builder_extend_offset_vector@@Base>
   16f58:	cmp	r0, #0
   16f5c:	beq	16f44 <flatcc_builder_create_union_vector@@Base+0x38>
   16f60:	ldr	r8, [r4, #20]
   16f64:	ldr	r1, [r4, #24]
   16f68:	add	r0, r8, r9
   16f6c:	cmp	r0, r1
   16f70:	str	r0, [r4, #20]
   16f74:	bcc	16f90 <flatcc_builder_create_union_vector@@Base+0x84>
   16f78:	add	r1, r0, #1
   16f7c:	mov	r0, r4
   16f80:	mvn	r2, #3
   16f84:	bl	17b88 <flatcc_builder_get_emit_context@@Base+0x8>
   16f88:	cmp	r0, #0
   16f8c:	bne	16f44 <flatcc_builder_create_union_vector@@Base+0x38>
   16f90:	ldr	r3, [r4, #16]
   16f94:	adds	r2, r3, r8
   16f98:	beq	16f44 <flatcc_builder_create_union_vector@@Base+0x38>
   16f9c:	cmp	r9, #0
   16fa0:	beq	16fd0 <flatcc_builder_create_union_vector@@Base+0xc4>
   16fa4:	add	r0, r7, #4
   16fa8:	mov	r1, r9
   16fac:	mov	r7, r3
   16fb0:	mov	r6, r2
   16fb4:	ldrb	r5, [r0, #-4]
   16fb8:	subs	r1, r1, #1
   16fbc:	strb	r5, [r6], #1
   16fc0:	ldr	r5, [r0]
   16fc4:	add	r0, r0, #8
   16fc8:	str	r5, [r7], #4
   16fcc:	bne	16fb4 <flatcc_builder_create_union_vector@@Base+0xa8>
   16fd0:	add	r0, sp, #8
   16fd4:	mov	r1, r4
   16fd8:	str	r9, [sp]
   16fdc:	bl	17064 <flatcc_builder_create_union_vector_direct@@Base>
   16fe0:	ldr	r0, [sp, #8]
   16fe4:	ldr	r1, [sp, #12]
   16fe8:	stm	sl, {r0, r1}
   16fec:	mov	r1, #0
   16ff0:	ldr	r0, [r4, #16]
   16ff4:	ldr	r2, [r4, #20]
   16ff8:	bl	12994 <memset@plt>
   16ffc:	ldr	r0, [r4, #32]
   17000:	ldr	r1, [r4, #60]	; 0x3c
   17004:	ldr	r2, [r4, #64]	; 0x40
   17008:	ldr	r3, [r0, #8]
   1700c:	str	r3, [r4, #20]
   17010:	ldr	r3, [r0]
   17014:	str	r3, [r4, #28]
   17018:	add	r1, r1, r3
   1701c:	ldr	r7, [r0, #4]
   17020:	str	r1, [r4, #16]
   17024:	sub	r1, r2, r3
   17028:	cmp	r1, r7
   1702c:	movhi	r1, r7
   17030:	str	r1, [r4, #24]
   17034:	ldrh	r1, [r4, #130]	; 0x82
   17038:	ldrh	r2, [r4, #128]	; 0x80
   1703c:	cmp	r2, r1
   17040:	strhcc	r1, [r4, #128]	; 0x80
   17044:	ldrh	r1, [r0, #12]
   17048:	sub	r0, r0, #36	; 0x24
   1704c:	str	r0, [r4, #32]
   17050:	strh	r1, [r4, #130]	; 0x82
   17054:	ldr	r0, [r4, #156]	; 0x9c
   17058:	sub	r0, r0, #1
   1705c:	str	r0, [r4, #156]	; 0x9c
   17060:	b	16f44 <flatcc_builder_create_union_vector@@Base+0x38>

00017064 <flatcc_builder_create_union_vector_direct@@Base>:
   17064:	push	{r4, r5, r6, r7, fp, lr}
   17068:	add	fp, sp, #16
   1706c:	sub	sp, sp, #8
   17070:	ldr	r7, [fp, #8]
   17074:	mov	r5, r2
   17078:	mov	r4, r0
   1707c:	mov	r0, #0
   17080:	mov	r6, r1
   17084:	str	r0, [r4]
   17088:	str	r0, [r4, #4]
   1708c:	mov	r0, r1
   17090:	mov	r1, r3
   17094:	mov	r3, r5
   17098:	mov	r2, r7
   1709c:	bl	167a4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   170a0:	cmp	r0, #0
   170a4:	str	r0, [r4, #4]
   170a8:	beq	170d4 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   170ac:	mvn	r0, #0
   170b0:	mov	r1, #1
   170b4:	mov	r2, r7
   170b8:	mov	r3, #1
   170bc:	str	r1, [sp]
   170c0:	str	r0, [sp, #4]
   170c4:	mov	r0, r6
   170c8:	mov	r1, r5
   170cc:	bl	16540 <flatcc_builder_create_vector@@Base>
   170d0:	str	r0, [r4]
   170d4:	sub	sp, fp, #16
   170d8:	pop	{r4, r5, r6, r7, fp, pc}

000170dc <flatcc_builder_start_union_vector@@Base>:
   170dc:	push	{r4, sl, fp, lr}
   170e0:	add	fp, sp, #8
   170e4:	mov	r1, #4
   170e8:	mov	r4, r0
   170ec:	bl	14a38 <flatcc_builder_start_buffer@@Base+0xbc>
   170f0:	mov	r1, r0
   170f4:	mvn	r0, #0
   170f8:	cmp	r1, #0
   170fc:	popne	{r4, sl, fp, pc}
   17100:	ldr	r0, [r4, #32]
   17104:	mov	r1, #8
   17108:	mov	r2, #7
   1710c:	str	r1, [r0, #16]
   17110:	mov	r0, #0
   17114:	ldr	r1, [r4, #32]
   17118:	str	r0, [r1, #20]
   1711c:	ldr	r1, [r4, #32]
   17120:	strh	r2, [r1, #14]
   17124:	ldr	r2, [r4, #28]
   17128:	ldr	r3, [r4, #60]	; 0x3c
   1712c:	ldr	ip, [r4, #64]	; 0x40
   17130:	add	r3, r3, r2
   17134:	sub	r2, ip, r2
   17138:	str	r3, [r4, #16]
   1713c:	mvn	r3, #3
   17140:	cmn	r2, #4
   17144:	movcs	r2, r3
   17148:	str	r2, [r4, #24]
   1714c:	str	r3, [r1, #4]
   17150:	pop	{r4, sl, fp, pc}

00017154 <flatcc_builder_end_union_vector@@Base>:
   17154:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17158:	add	fp, sp, #24
   1715c:	sub	sp, sp, #16
   17160:	mov	r8, r0
   17164:	mov	r0, #0
   17168:	mov	r4, r1
   1716c:	str	r0, [r8]
   17170:	str	r0, [r8, #4]
   17174:	ldr	r0, [r1, #32]
   17178:	ldrh	r1, [r0, #14]
   1717c:	cmp	r1, #7
   17180:	bne	17298 <flatcc_builder_end_union_vector@@Base+0x144>
   17184:	ldr	r9, [r0, #20]
   17188:	ldr	r7, [r4, #20]
   1718c:	ldr	r1, [r4, #24]
   17190:	add	r0, r9, r9, lsl #2
   17194:	add	r0, r7, r0
   17198:	cmp	r0, r1
   1719c:	str	r0, [r4, #20]
   171a0:	bcc	171bc <flatcc_builder_end_union_vector@@Base+0x68>
   171a4:	add	r1, r0, #1
   171a8:	mov	r0, r4
   171ac:	mvn	r2, #3
   171b0:	bl	17b88 <flatcc_builder_get_emit_context@@Base+0x8>
   171b4:	cmp	r0, #0
   171b8:	bne	17290 <flatcc_builder_end_union_vector@@Base+0x13c>
   171bc:	ldr	r0, [r4, #16]
   171c0:	adds	r3, r0, r7
   171c4:	beq	17290 <flatcc_builder_end_union_vector@@Base+0x13c>
   171c8:	add	r2, r3, r9, lsl #2
   171cc:	cmp	r9, #0
   171d0:	beq	17200 <flatcc_builder_end_union_vector@@Base+0xac>
   171d4:	add	r0, r0, #4
   171d8:	mov	r1, r9
   171dc:	mov	r7, r3
   171e0:	mov	r5, r2
   171e4:	ldrb	r6, [r0, #-4]
   171e8:	subs	r1, r1, #1
   171ec:	strb	r6, [r5], #1
   171f0:	ldr	r6, [r0]
   171f4:	add	r0, r0, #8
   171f8:	str	r6, [r7], #4
   171fc:	bne	171e4 <flatcc_builder_end_union_vector@@Base+0x90>
   17200:	add	r0, sp, #8
   17204:	mov	r1, r4
   17208:	str	r9, [sp]
   1720c:	bl	17064 <flatcc_builder_create_union_vector_direct@@Base>
   17210:	ldr	r0, [sp, #8]
   17214:	ldr	r1, [sp, #12]
   17218:	stm	r8, {r0, r1}
   1721c:	mov	r1, #0
   17220:	ldr	r0, [r4, #16]
   17224:	ldr	r2, [r4, #20]
   17228:	bl	12994 <memset@plt>
   1722c:	ldr	r0, [r4, #32]
   17230:	ldr	r1, [r4, #60]	; 0x3c
   17234:	ldr	r2, [r4, #64]	; 0x40
   17238:	ldr	r3, [r0, #8]
   1723c:	str	r3, [r4, #20]
   17240:	ldr	r3, [r0]
   17244:	str	r3, [r4, #28]
   17248:	add	r1, r1, r3
   1724c:	ldr	r7, [r0, #4]
   17250:	str	r1, [r4, #16]
   17254:	sub	r1, r2, r3
   17258:	cmp	r1, r7
   1725c:	movhi	r1, r7
   17260:	str	r1, [r4, #24]
   17264:	ldrh	r1, [r4, #130]	; 0x82
   17268:	ldrh	r2, [r4, #128]	; 0x80
   1726c:	cmp	r2, r1
   17270:	strhcc	r1, [r4, #128]	; 0x80
   17274:	ldrh	r1, [r0, #12]
   17278:	sub	r0, r0, #36	; 0x24
   1727c:	str	r0, [r4, #32]
   17280:	strh	r1, [r4, #130]	; 0x82
   17284:	ldr	r0, [r4, #156]	; 0x9c
   17288:	sub	r0, r0, #1
   1728c:	str	r0, [r4, #156]	; 0x9c
   17290:	sub	sp, fp, #24
   17294:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17298:	movw	r0, #54445	; 0xd4ad
   1729c:	movw	r1, #51339	; 0xc88b
   172a0:	movw	r3, #54495	; 0xd4df
   172a4:	movw	r2, #1617	; 0x651
   172a8:	movt	r0, #1
   172ac:	movt	r1, #1
   172b0:	movt	r3, #1
   172b4:	bl	129c4 <__assert_fail@plt>

000172b8 <flatcc_builder_union_vector_count@@Base>:
   172b8:	ldr	r0, [r0, #32]
   172bc:	ldr	r0, [r0, #20]
   172c0:	bx	lr

000172c4 <flatcc_builder_union_vector_edit@@Base>:
   172c4:	ldr	r0, [r0, #16]
   172c8:	bx	lr

000172cc <flatcc_builder_extend_union_vector@@Base>:
   172cc:	push	{r4, r5, fp, lr}
   172d0:	add	fp, sp, #8
   172d4:	mov	r4, r0
   172d8:	ldr	r0, [r0, #32]
   172dc:	ldr	r2, [r0, #20]
   172e0:	adds	r2, r2, r1
   172e4:	cmpcc	r2, #536870912	; 0x20000000
   172e8:	bcc	1730c <flatcc_builder_extend_union_vector@@Base+0x40>
   172ec:	movw	r0, #55610	; 0xd93a
   172f0:	movw	r1, #51339	; 0xc88b
   172f4:	movw	r3, #55637	; 0xd955
   172f8:	mov	r2, #892	; 0x37c
   172fc:	movt	r0, #1
   17300:	movt	r1, #1
   17304:	movt	r3, #1
   17308:	bl	129c4 <__assert_fail@plt>
   1730c:	str	r2, [r0, #20]
   17310:	ldr	r5, [r4, #20]
   17314:	ldr	r2, [r4, #24]
   17318:	add	r0, r5, r1, lsl #3
   1731c:	cmp	r0, r2
   17320:	str	r0, [r4, #20]
   17324:	bcc	17348 <flatcc_builder_extend_union_vector@@Base+0x7c>
   17328:	add	r1, r0, #1
   1732c:	mov	r0, r4
   17330:	mvn	r2, #3
   17334:	bl	17b88 <flatcc_builder_get_emit_context@@Base+0x8>
   17338:	mov	r1, r0
   1733c:	mov	r0, #0
   17340:	cmp	r1, #0
   17344:	popne	{r4, r5, fp, pc}
   17348:	ldr	r0, [r4, #16]
   1734c:	add	r0, r0, r5
   17350:	pop	{r4, r5, fp, pc}

00017354 <flatcc_builder_truncate_union_vector@@Base>:
   17354:	push	{fp, lr}
   17358:	mov	fp, sp
   1735c:	ldr	r2, [r0, #32]
   17360:	ldrh	r3, [r2, #14]
   17364:	cmp	r3, #7
   17368:	bne	173b0 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   1736c:	ldr	r3, [r2, #20]
   17370:	cmp	r3, r1
   17374:	bcc	173d0 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   17378:	sub	r3, r3, r1
   1737c:	str	r3, [r2, #20]
   17380:	ldr	r2, [r0, #32]
   17384:	ldr	r3, [r0, #20]
   17388:	ldr	ip, [r0, #16]
   1738c:	ldr	r2, [r2, #16]
   17390:	mls	r3, r2, r1, r3
   17394:	mul	r2, r2, r1
   17398:	mov	r1, #0
   1739c:	str	r3, [r0, #20]
   173a0:	add	r0, ip, r3
   173a4:	bl	12994 <memset@plt>
   173a8:	mov	r0, #0
   173ac:	pop	{fp, pc}
   173b0:	movw	r0, #54445	; 0xd4ad
   173b4:	movw	r1, #51339	; 0xc88b
   173b8:	movw	r3, #54578	; 0xd532
   173bc:	movw	r2, #1665	; 0x681
   173c0:	movt	r0, #1
   173c4:	movt	r1, #1
   173c8:	movt	r3, #1
   173cc:	bl	129c4 <__assert_fail@plt>
   173d0:	movw	r0, #53009	; 0xcf11
   173d4:	movw	r1, #51339	; 0xc88b
   173d8:	movw	r3, #54578	; 0xd532
   173dc:	movw	r2, #1666	; 0x682
   173e0:	movt	r0, #1
   173e4:	movt	r1, #1
   173e8:	movt	r3, #1
   173ec:	bl	129c4 <__assert_fail@plt>

000173f0 <flatcc_builder_union_vector_push@@Base>:
   173f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   173f4:	add	fp, sp, #24
   173f8:	mov	r7, r0
   173fc:	ldr	r0, [r0, #32]
   17400:	mov	r5, r1
   17404:	ldrh	r1, [r0, #14]
   17408:	cmp	r1, #7
   1740c:	bne	17474 <flatcc_builder_union_vector_push@@Base+0x84>
   17410:	ldr	r1, [r0, #20]
   17414:	mov	r6, #0
   17418:	cmn	r1, #-536870911	; 0xe0000001
   1741c:	beq	1746c <flatcc_builder_union_vector_push@@Base+0x7c>
   17420:	add	r1, r1, #1
   17424:	mov	r8, r2
   17428:	str	r1, [r0, #20]
   1742c:	ldr	r4, [r7, #20]
   17430:	ldr	r0, [r7, #24]
   17434:	add	r1, r4, #8
   17438:	cmp	r1, r0
   1743c:	str	r1, [r7, #20]
   17440:	bcc	1745c <flatcc_builder_union_vector_push@@Base+0x6c>
   17444:	add	r1, r4, #9
   17448:	mov	r0, r7
   1744c:	mvn	r2, #3
   17450:	bl	17b88 <flatcc_builder_get_emit_context@@Base+0x8>
   17454:	cmp	r0, #0
   17458:	bne	1746c <flatcc_builder_union_vector_push@@Base+0x7c>
   1745c:	ldr	r0, [r7, #16]
   17460:	adds	r0, r0, r4
   17464:	movne	r6, r0
   17468:	stmne	r0, {r5, r8}
   1746c:	mov	r0, r6
   17470:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17474:	movw	r0, #54445	; 0xd4ad
   17478:	movw	r1, #51339	; 0xc88b
   1747c:	movw	r3, #54647	; 0xd577
   17480:	movw	r2, #1677	; 0x68d
   17484:	movt	r0, #1
   17488:	movt	r1, #1
   1748c:	movt	r3, #1
   17490:	bl	129c4 <__assert_fail@plt>

00017494 <flatcc_builder_append_union_vector@@Base>:
   17494:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17498:	add	fp, sp, #24
   1749c:	mov	r6, r0
   174a0:	ldr	r0, [r0, #32]
   174a4:	mov	r8, r1
   174a8:	ldrh	r1, [r0, #14]
   174ac:	cmp	r1, #7
   174b0:	bne	1754c <flatcc_builder_append_union_vector@@Base+0xb8>
   174b4:	ldr	r1, [r0, #20]
   174b8:	mov	r5, r2
   174bc:	adds	r1, r1, r2
   174c0:	cmpcc	r1, #536870912	; 0x20000000
   174c4:	bcc	174e8 <flatcc_builder_append_union_vector@@Base+0x54>
   174c8:	movw	r0, #55610	; 0xd93a
   174cc:	movw	r1, #51339	; 0xc88b
   174d0:	movw	r3, #55637	; 0xd955
   174d4:	mov	r2, #892	; 0x37c
   174d8:	movt	r0, #1
   174dc:	movt	r1, #1
   174e0:	movt	r3, #1
   174e4:	bl	129c4 <__assert_fail@plt>
   174e8:	str	r1, [r0, #20]
   174ec:	ldr	r4, [r6, #20]
   174f0:	ldr	r1, [r6, #24]
   174f4:	add	r0, r4, r5, lsl #3
   174f8:	cmp	r0, r1
   174fc:	str	r0, [r6, #20]
   17500:	bcc	17520 <flatcc_builder_append_union_vector@@Base+0x8c>
   17504:	add	r1, r0, #1
   17508:	mov	r0, r6
   1750c:	mvn	r2, #3
   17510:	bl	17b88 <flatcc_builder_get_emit_context@@Base+0x8>
   17514:	mov	r7, #0
   17518:	cmp	r0, #0
   1751c:	bne	17544 <flatcc_builder_append_union_vector@@Base+0xb0>
   17520:	ldr	r0, [r6, #16]
   17524:	adds	r7, r0, r4
   17528:	beq	17540 <flatcc_builder_append_union_vector@@Base+0xac>
   1752c:	lsl	r2, r5, #3
   17530:	mov	r0, r7
   17534:	mov	r1, r8
   17538:	bl	12904 <memcpy@plt>
   1753c:	b	17544 <flatcc_builder_append_union_vector@@Base+0xb0>
   17540:	mov	r7, #0
   17544:	mov	r0, r7
   17548:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1754c:	movw	r0, #54445	; 0xd4ad
   17550:	movw	r1, #51339	; 0xc88b
   17554:	movw	r3, #54756	; 0xd5e4
   17558:	movw	r2, #1692	; 0x69c
   1755c:	movt	r0, #1
   17560:	movt	r1, #1
   17564:	movt	r3, #1
   17568:	bl	129c4 <__assert_fail@plt>

0001756c <flatcc_builder_create_string@@Base>:
   1756c:	push	{r4, r5, r6, sl, fp, lr}
   17570:	add	fp, sp, #16
   17574:	sub	sp, sp, #80	; 0x50
   17578:	str	r2, [fp, #-20]	; 0xffffffec
   1757c:	mvn	r5, r2
   17580:	mov	r6, r0
   17584:	mov	r3, #1
   17588:	cmp	r2, #0
   1758c:	ldr	ip, [r0, #136]	; 0x88
   17590:	sub	r0, fp, #20
   17594:	str	r0, [sp, #12]
   17598:	mov	r0, #4
   1759c:	str	r0, [sp, #4]
   175a0:	str	r0, [sp, #16]
   175a4:	str	r3, [sp, #8]
   175a8:	add	r5, ip, r5
   175ac:	and	r5, r5, #3
   175b0:	add	r5, r5, #1
   175b4:	beq	175d0 <flatcc_builder_create_string@@Base+0x64>
   175b8:	mov	r3, #2
   175bc:	add	r0, r2, #4
   175c0:	str	r1, [sp, #20]
   175c4:	str	r2, [sp, #24]
   175c8:	str	r3, [sp, #8]
   175cc:	str	r0, [sp, #4]
   175d0:	movw	r2, #50809	; 0xc679
   175d4:	add	lr, sp, #4
   175d8:	add	r1, r0, r5
   175dc:	add	r0, lr, r3, lsl #3
   175e0:	movt	r2, #1
   175e4:	str	r1, [sp, #4]
   175e8:	cmp	r1, #0
   175ec:	str	r2, [r0, #8]
   175f0:	add	r2, r3, #1
   175f4:	str	r5, [r0, #12]
   175f8:	str	r2, [sp, #8]
   175fc:	ble	17650 <flatcc_builder_create_string@@Base+0xe4>
   17600:	ldr	r0, [r6, #36]	; 0x24
   17604:	ldr	r4, [r6, #44]	; 0x2c
   17608:	sub	r5, ip, r1
   1760c:	str	r1, [sp]
   17610:	add	r1, lr, #8
   17614:	mov	r3, r5
   17618:	blx	r4
   1761c:	cmp	r0, #0
   17620:	streq	r5, [r6, #136]	; 0x88
   17624:	moveq	r0, r5
   17628:	subeq	sp, fp, #16
   1762c:	popeq	{r4, r5, r6, sl, fp, pc}
   17630:	movw	r0, #55857	; 0xda31
   17634:	movw	r1, #51339	; 0xc88b
   17638:	movw	r3, #55536	; 0xd8f0
   1763c:	movw	r2, #651	; 0x28b
   17640:	movt	r0, #1
   17644:	movt	r1, #1
   17648:	movt	r3, #1
   1764c:	bl	129c4 <__assert_fail@plt>
   17650:	movw	r0, #55857	; 0xda31
   17654:	movw	r1, #51339	; 0xc88b
   17658:	movw	r3, #55536	; 0xd8f0
   1765c:	movw	r2, #647	; 0x287
   17660:	movt	r0, #1
   17664:	movt	r1, #1
   17668:	movt	r3, #1
   1766c:	bl	129c4 <__assert_fail@plt>

00017670 <flatcc_builder_create_string_str@@Base>:
   17670:	push	{r4, r5, fp, lr}
   17674:	add	fp, sp, #8
   17678:	mov	r5, r0
   1767c:	mov	r0, r1
   17680:	mov	r4, r1
   17684:	bl	12970 <strlen@plt>
   17688:	mov	r2, r0
   1768c:	mov	r0, r5
   17690:	mov	r1, r4
   17694:	pop	{r4, r5, fp, lr}
   17698:	b	1756c <flatcc_builder_create_string@@Base>

0001769c <flatcc_builder_create_string_strn@@Base>:
   1769c:	push	{r4, r5, r6, sl, fp, lr}
   176a0:	add	fp, sp, #16
   176a4:	mov	r6, r0
   176a8:	mov	r5, r1
   176ac:	mov	r0, r1
   176b0:	mov	r1, #0
   176b4:	mov	r4, r2
   176b8:	bl	129ac <memchr@plt>
   176bc:	cmp	r0, #0
   176c0:	mov	r1, r5
   176c4:	subne	r4, r0, r5
   176c8:	mov	r0, r6
   176cc:	mov	r2, r4
   176d0:	pop	{r4, r5, r6, sl, fp, lr}
   176d4:	b	1756c <flatcc_builder_create_string@@Base>

000176d8 <flatcc_builder_end_string@@Base>:
   176d8:	push	{r4, r5, fp, lr}
   176dc:	add	fp, sp, #8
   176e0:	mov	r4, r0
   176e4:	ldr	r0, [r0, #32]
   176e8:	ldrh	r1, [r0, #14]
   176ec:	cmp	r1, #6
   176f0:	bne	17798 <flatcc_builder_end_string@@Base+0xc0>
   176f4:	ldr	r2, [r0, #20]
   176f8:	ldr	r0, [r4, #20]
   176fc:	cmp	r2, r0
   17700:	bne	177b8 <flatcc_builder_end_string@@Base+0xe0>
   17704:	ldr	r1, [r4, #16]
   17708:	mov	r0, r4
   1770c:	bl	1756c <flatcc_builder_create_string@@Base>
   17710:	mov	r5, r0
   17714:	cmp	r0, #0
   17718:	beq	17790 <flatcc_builder_end_string@@Base+0xb8>
   1771c:	ldr	r0, [r4, #16]
   17720:	ldr	r2, [r4, #20]
   17724:	mov	r1, #0
   17728:	bl	12994 <memset@plt>
   1772c:	ldr	r0, [r4, #32]
   17730:	ldr	r1, [r4, #60]	; 0x3c
   17734:	ldr	ip, [r4, #64]	; 0x40
   17738:	ldr	r3, [r0, #8]
   1773c:	str	r3, [r4, #20]
   17740:	ldr	r3, [r0]
   17744:	str	r3, [r4, #28]
   17748:	add	r1, r1, r3
   1774c:	ldr	r2, [r0, #4]
   17750:	str	r1, [r4, #16]
   17754:	sub	r1, ip, r3
   17758:	cmp	r1, r2
   1775c:	movhi	r1, r2
   17760:	str	r1, [r4, #24]
   17764:	ldrh	r1, [r4, #130]	; 0x82
   17768:	ldrh	r2, [r4, #128]	; 0x80
   1776c:	cmp	r2, r1
   17770:	strhcc	r1, [r4, #128]	; 0x80
   17774:	ldrh	r1, [r0, #12]
   17778:	sub	r0, r0, #36	; 0x24
   1777c:	str	r0, [r4, #32]
   17780:	strh	r1, [r4, #130]	; 0x82
   17784:	ldr	r0, [r4, #156]	; 0x9c
   17788:	sub	r0, r0, #1
   1778c:	str	r0, [r4, #156]	; 0x9c
   17790:	mov	r0, r5
   17794:	pop	{r4, r5, fp, pc}
   17798:	movw	r0, #52656	; 0xcdb0
   1779c:	movw	r1, #51339	; 0xc88b
   177a0:	movw	r3, #54883	; 0xd663
   177a4:	movw	r2, #1732	; 0x6c4
   177a8:	movt	r0, #1
   177ac:	movt	r1, #1
   177b0:	movt	r3, #1
   177b4:	bl	129c4 <__assert_fail@plt>
   177b8:	movw	r0, #54950	; 0xd6a6
   177bc:	movw	r1, #51339	; 0xc88b
   177c0:	movw	r3, #54883	; 0xd663
   177c4:	movw	r2, #1733	; 0x6c5
   177c8:	movt	r0, #1
   177cc:	movt	r1, #1
   177d0:	movt	r3, #1
   177d4:	bl	129c4 <__assert_fail@plt>

000177d8 <flatcc_builder_string_edit@@Base>:
   177d8:	ldr	r0, [r0, #16]
   177dc:	bx	lr

000177e0 <flatcc_builder_string_len@@Base>:
   177e0:	ldr	r0, [r0, #32]
   177e4:	ldr	r0, [r0, #20]
   177e8:	bx	lr

000177ec <flatcc_builder_table_edit@@Base>:
   177ec:	ldr	r2, [r0, #32]
   177f0:	ldrh	r2, [r2, #14]
   177f4:	cmp	r2, #3
   177f8:	ldreq	r2, [r0, #16]
   177fc:	ldreq	r0, [r0, #20]
   17800:	addeq	r0, r2, r0
   17804:	subeq	r0, r0, r1
   17808:	bxeq	lr
   1780c:	push	{fp, lr}
   17810:	mov	fp, sp
   17814:	movw	r0, #53408	; 0xd0a0
   17818:	movw	r1, #51339	; 0xc88b
   1781c:	movw	r3, #55128	; 0xd758
   17820:	movw	r2, #1794	; 0x702
   17824:	movt	r0, #1
   17828:	movt	r1, #1
   1782c:	movt	r3, #1
   17830:	bl	129c4 <__assert_fail@plt>

00017834 <flatcc_builder_table_add_copy@@Base>:
   17834:	push	{r4, r5, r6, sl, fp, lr}
   17838:	add	fp, sp, #16
   1783c:	mov	r4, r3
   17840:	ldr	r3, [fp, #8]
   17844:	mov	r5, r2
   17848:	mov	r2, r4
   1784c:	bl	16cc8 <flatcc_builder_table_add@@Base>
   17850:	mov	r6, r0
   17854:	cmp	r0, #0
   17858:	beq	1786c <flatcc_builder_table_add_copy@@Base+0x38>
   1785c:	mov	r0, r6
   17860:	mov	r1, r5
   17864:	mov	r2, r4
   17868:	bl	12904 <memcpy@plt>
   1786c:	mov	r0, r6
   17870:	pop	{r4, r5, r6, sl, fp, pc}

00017874 <flatcc_builder_push_buffer_alignment@@Base>:
   17874:	ldrh	r1, [r0, #128]	; 0x80
   17878:	mov	r2, #4
   1787c:	strh	r2, [r0, #128]	; 0x80
   17880:	mov	r0, r1
   17884:	bx	lr

00017888 <flatcc_builder_pop_buffer_alignment@@Base>:
   17888:	ldrh	r2, [r0, #128]	; 0x80
   1788c:	cmp	r2, r1
   17890:	strhcc	r1, [r0, #128]	; 0x80
   17894:	bx	lr

00017898 <flatcc_builder_get_buffer_alignment@@Base>:
   17898:	ldrh	r0, [r0, #128]	; 0x80
   1789c:	bx	lr

000178a0 <flatcc_builder_set_vtable_clustering@@Base>:
   178a0:	clz	r1, r1
   178a4:	lsr	r1, r1, #5
   178a8:	str	r1, [r0, #180]	; 0xb4
   178ac:	bx	lr

000178b0 <flatcc_builder_set_block_align@@Base>:
   178b0:	strh	r1, [r0, #132]	; 0x84
   178b4:	bx	lr

000178b8 <flatcc_builder_get_level@@Base>:
   178b8:	ldr	r0, [r0, #156]	; 0x9c
   178bc:	bx	lr

000178c0 <flatcc_builder_set_max_level@@Base>:
   178c0:	str	r1, [r0, #176]	; 0xb0
   178c4:	ldr	r2, [r0, #160]	; 0xa0
   178c8:	cmp	r2, r1
   178cc:	strlt	r1, [r0, #160]	; 0xa0
   178d0:	bx	lr

000178d4 <flatcc_builder_get_buffer_size@@Base>:
   178d4:	ldr	r1, [r0, #136]	; 0x88
   178d8:	ldr	r0, [r0, #140]	; 0x8c
   178dc:	sub	r0, r0, r1
   178e0:	bx	lr

000178e4 <flatcc_builder_get_buffer_start@@Base>:
   178e4:	ldr	r0, [r0, #136]	; 0x88
   178e8:	bx	lr

000178ec <flatcc_builder_get_buffer_end@@Base>:
   178ec:	ldr	r0, [r0, #140]	; 0x8c
   178f0:	bx	lr

000178f4 <flatcc_builder_set_vtable_cache_limit@@Base>:
   178f4:	str	r1, [r0, #172]	; 0xac
   178f8:	bx	lr

000178fc <flatcc_builder_set_identifier@@Base>:
   178fc:	movw	r2, #50809	; 0xc679
   17900:	cmp	r1, #0
   17904:	movt	r2, #1
   17908:	movne	r2, r1
   1790c:	ldr	r1, [r2]
   17910:	str	r1, [r0, #168]	; 0xa8
   17914:	bx	lr

00017918 <flatcc_builder_get_type@@Base>:
   17918:	ldr	r0, [r0, #32]
   1791c:	cmp	r0, #0
   17920:	ldrhne	r0, [r0, #14]
   17924:	moveq	r0, #0
   17928:	bx	lr

0001792c <flatcc_builder_get_type_at@@Base>:
   1792c:	mov	r2, r0
   17930:	cmp	r1, #1
   17934:	mov	r0, #0
   17938:	ldrge	r3, [r2, #156]	; 0x9c
   1793c:	cmpge	r3, r1
   17940:	bge	17948 <flatcc_builder_get_type_at@@Base+0x1c>
   17944:	bx	lr
   17948:	sub	r0, r1, r3
   1794c:	ldr	r1, [r2, #32]
   17950:	add	r0, r0, r0, lsl #3
   17954:	add	r0, r1, r0, lsl #2
   17958:	ldrh	r0, [r0, #14]
   1795c:	bx	lr

00017960 <flatcc_builder_get_direct_buffer@@Base>:
   17960:	ldr	r2, [r0, #184]	; 0xb8
   17964:	cmp	r2, #0
   17968:	beq	1797c <flatcc_builder_get_direct_buffer@@Base+0x1c>
   1796c:	ldr	r2, [r0, #188]	; 0xbc
   17970:	ldr	r3, [r0, #192]	; 0xc0
   17974:	cmp	r2, r3
   17978:	beq	1798c <flatcc_builder_get_direct_buffer@@Base+0x2c>
   1797c:	mov	r0, #0
   17980:	cmp	r1, #0
   17984:	strne	r0, [r1]
   17988:	bx	lr
   1798c:	cmp	r1, #0
   17990:	ldrne	r2, [r0, #212]	; 0xd4
   17994:	strne	r2, [r1]
   17998:	ldr	r0, [r0, #196]	; 0xc4
   1799c:	bx	lr

000179a0 <flatcc_builder_copy_buffer@@Base>:
   179a0:	push	{fp, lr}
   179a4:	mov	fp, sp
   179a8:	ldr	r3, [r0, #184]	; 0xb8
   179ac:	cmp	r3, #0
   179b0:	beq	179e4 <flatcc_builder_copy_buffer@@Base+0x44>
   179b4:	add	r0, r0, #188	; 0xbc
   179b8:	bl	180c0 <flatcc_emitter_copy_buffer@@Base>
   179bc:	cmp	r0, #0
   179c0:	popne	{fp, pc}
   179c4:	movw	r0, #51935	; 0xcadf
   179c8:	movw	r1, #51339	; 0xc88b
   179cc:	movw	r3, #55267	; 0xd7e3
   179d0:	movw	r2, #1926	; 0x786
   179d4:	movt	r0, #1
   179d8:	movt	r1, #1
   179dc:	movt	r3, #1
   179e0:	bl	129c4 <__assert_fail@plt>
   179e4:	mov	r0, #0
   179e8:	pop	{fp, pc}

000179ec <flatcc_builder_finalize_buffer@@Base>:
   179ec:	push	{r4, r5, r6, sl, fp, lr}
   179f0:	add	fp, sp, #16
   179f4:	mov	r4, r0
   179f8:	ldr	r0, [r0, #136]	; 0x88
   179fc:	cmp	r1, #0
   17a00:	ldr	r2, [r4, #140]	; 0x8c
   17a04:	sub	r5, r2, r0
   17a08:	mov	r0, r5
   17a0c:	strne	r5, [r1]
   17a10:	bl	1294c <malloc@plt>
   17a14:	cmp	r0, #0
   17a18:	beq	17a5c <flatcc_builder_finalize_buffer@@Base+0x70>
   17a1c:	mov	r6, r0
   17a20:	mov	r0, r4
   17a24:	mov	r2, r5
   17a28:	mov	r1, r6
   17a2c:	bl	179a0 <flatcc_builder_copy_buffer@@Base>
   17a30:	cmp	r0, #0
   17a34:	movne	r0, r6
   17a38:	popne	{r4, r5, r6, sl, fp, pc}
   17a3c:	movw	r0, #55857	; 0xda31
   17a40:	movw	r1, #51339	; 0xc88b
   17a44:	movw	r3, #55336	; 0xd828
   17a48:	movw	r2, #1948	; 0x79c
   17a4c:	movt	r0, #1
   17a50:	movt	r1, #1
   17a54:	movt	r3, #1
   17a58:	bl	129c4 <__assert_fail@plt>
   17a5c:	movw	r0, #55857	; 0xda31
   17a60:	movw	r1, #51339	; 0xc88b
   17a64:	movw	r3, #55336	; 0xd828
   17a68:	movw	r2, #1944	; 0x798
   17a6c:	movt	r0, #1
   17a70:	movt	r1, #1
   17a74:	movt	r3, #1
   17a78:	bl	129c4 <__assert_fail@plt>

00017a7c <flatcc_builder_finalize_aligned_buffer@@Base>:
   17a7c:	push	{r4, r5, r6, r7, fp, lr}
   17a80:	add	fp, sp, #16
   17a84:	sub	sp, sp, #8
   17a88:	mov	r5, r0
   17a8c:	mov	r4, r1
   17a90:	ldr	r0, [r0, #136]	; 0x88
   17a94:	ldr	r1, [r5, #140]	; 0x8c
   17a98:	cmp	r4, #0
   17a9c:	sub	r0, r1, r0
   17aa0:	mov	r1, #0
   17aa4:	strne	r0, [r4]
   17aa8:	ldrh	r2, [r5, #128]	; 0x80
   17aac:	str	r1, [sp, #4]
   17ab0:	add	r0, r0, r2
   17ab4:	cmp	r2, #4
   17ab8:	mov	r1, r2
   17abc:	rsb	r2, r2, #0
   17ac0:	sub	r0, r0, #1
   17ac4:	movls	r1, #4
   17ac8:	and	r7, r0, r2
   17acc:	add	r0, sp, #4
   17ad0:	mov	r2, r7
   17ad4:	bl	12988 <posix_memalign@plt>
   17ad8:	ldr	r6, [sp, #4]
   17adc:	cmp	r0, #0
   17ae0:	cmpne	r6, #0
   17ae4:	bne	17b08 <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
   17ae8:	cmp	r6, #0
   17aec:	beq	17b10 <flatcc_builder_finalize_aligned_buffer@@Base+0x94>
   17af0:	mov	r0, r5
   17af4:	mov	r1, r6
   17af8:	mov	r2, r7
   17afc:	bl	179a0 <flatcc_builder_copy_buffer@@Base>
   17b00:	cmp	r0, #0
   17b04:	bne	17b1c <flatcc_builder_finalize_aligned_buffer@@Base+0xa0>
   17b08:	mov	r0, r6
   17b0c:	bl	128f8 <free@plt>
   17b10:	mov	r6, #0
   17b14:	cmp	r4, #0
   17b18:	strne	r6, [r4]
   17b1c:	mov	r0, r6
   17b20:	sub	sp, fp, #16
   17b24:	pop	{r4, r5, r6, r7, fp, pc}

00017b28 <flatcc_builder_aligned_alloc@@Base>:
   17b28:	push	{fp, lr}
   17b2c:	mov	fp, sp
   17b30:	sub	sp, sp, #8
   17b34:	mov	r2, r1
   17b38:	mov	r1, r0
   17b3c:	mov	r0, #0
   17b40:	cmp	r1, #4
   17b44:	str	r0, [sp, #4]
   17b48:	add	r0, sp, #4
   17b4c:	movls	r1, #4
   17b50:	bl	12988 <posix_memalign@plt>
   17b54:	mov	r1, r0
   17b58:	ldr	r0, [sp, #4]
   17b5c:	cmp	r1, #0
   17b60:	cmpne	r0, #0
   17b64:	beq	17b74 <flatcc_builder_aligned_alloc@@Base+0x4c>
   17b68:	bl	128f8 <free@plt>
   17b6c:	mov	r0, #0
   17b70:	str	r0, [sp, #4]
   17b74:	mov	sp, fp
   17b78:	pop	{fp, pc}

00017b7c <flatcc_builder_aligned_free@@Base>:
   17b7c:	b	128f8 <free@plt>

00017b80 <flatcc_builder_get_emit_context@@Base>:
   17b80:	ldr	r0, [r0, #36]	; 0x24
   17b84:	bx	lr
   17b88:	push	{r4, r5, r6, sl, fp, lr}
   17b8c:	add	fp, sp, #16
   17b90:	sub	sp, sp, #8
   17b94:	mov	r6, r2
   17b98:	ldr	r2, [r0, #28]
   17b9c:	mov	r5, r0
   17ba0:	ldr	r0, [r0, #40]	; 0x28
   17ba4:	mov	r3, #1
   17ba8:	ldr	r4, [r5, #48]	; 0x30
   17bac:	str	r3, [sp]
   17bb0:	mov	r3, #1
   17bb4:	add	r2, r2, r1
   17bb8:	add	r1, r5, #60	; 0x3c
   17bbc:	blx	r4
   17bc0:	mov	r1, r0
   17bc4:	mvn	r0, #0
   17bc8:	cmp	r1, #0
   17bcc:	bne	17c00 <flatcc_builder_get_emit_context@@Base+0x80>
   17bd0:	ldr	r0, [r5, #28]
   17bd4:	ldr	r2, [r5, #60]	; 0x3c
   17bd8:	ldr	r3, [r5, #64]	; 0x40
   17bdc:	ldr	r1, [r5, #32]
   17be0:	add	r2, r2, r0
   17be4:	sub	r0, r3, r0
   17be8:	cmp	r0, r6
   17bec:	str	r2, [r5, #16]
   17bf0:	movhi	r0, r6
   17bf4:	str	r0, [r5, #24]
   17bf8:	mov	r0, #0
   17bfc:	str	r6, [r1, #4]
   17c00:	sub	sp, fp, #16
   17c04:	pop	{r4, r5, r6, sl, fp, pc}

00017c08 <flatcc_emitter_recycle_page@@Base>:
   17c08:	ldr	r3, [r0]
   17c0c:	mov	r2, r0
   17c10:	mvn	r0, #0
   17c14:	cmp	r3, r1
   17c18:	ldrne	r2, [r2, #4]
   17c1c:	cmpne	r2, r1
   17c20:	bne	17c28 <flatcc_emitter_recycle_page@@Base+0x20>
   17c24:	bx	lr
   17c28:	ldr	r0, [r1, #2944]	; 0xb80
   17c2c:	ldr	r2, [r1, #2948]	; 0xb84
   17c30:	str	r2, [r0, #2948]	; 0xb84
   17c34:	ldr	r2, [r1, #2948]	; 0xb84
   17c38:	str	r0, [r2, #2944]	; 0xb80
   17c3c:	ldr	r0, [r3, #2948]	; 0xb84
   17c40:	str	r3, [r1, #2944]	; 0xb80
   17c44:	str	r0, [r1, #2948]	; 0xb84
   17c48:	str	r1, [r0, #2944]	; 0xb80
   17c4c:	ldr	r0, [r1, #2944]	; 0xb80
   17c50:	str	r1, [r0, #2948]	; 0xb84
   17c54:	mov	r0, #0
   17c58:	bx	lr

00017c5c <flatcc_emitter_reset@@Base>:
   17c5c:	push	{r4, sl, fp, lr}
   17c60:	add	fp, sp, #8
   17c64:	ldr	r1, [r0]
   17c68:	cmp	r1, #0
   17c6c:	beq	17d24 <flatcc_emitter_reset@@Base+0xc8>
   17c70:	mov	r4, r0
   17c74:	add	r2, r1, #1472	; 0x5c0
   17c78:	mov	r0, #1472	; 0x5c0
   17c7c:	mov	r3, #0
   17c80:	stmib	r4, {r1, r2}
   17c84:	str	r0, [r4, #12]
   17c88:	str	r2, [r4, #16]
   17c8c:	str	r0, [r4, #20]
   17c90:	movw	r0, #64064	; 0xfa40
   17c94:	movt	r0, #65535	; 0xffff
   17c98:	str	r0, [r1, #2952]	; 0xb88
   17c9c:	ldr	r2, [r4, #32]
   17ca0:	ldr	r0, [r4, #24]
   17ca4:	cmp	r2, #0
   17ca8:	moveq	r2, r0
   17cac:	streq	r0, [r4, #32]
   17cb0:	str	r3, [r4, #24]
   17cb4:	add	r2, r2, r2, lsl #1
   17cb8:	lsr	r2, r2, #2
   17cbc:	add	r0, r2, r0, lsr #2
   17cc0:	str	r0, [r4, #32]
   17cc4:	ldr	r2, [r4, #28]
   17cc8:	cmp	r2, r0, lsl #1
   17ccc:	bls	17d24 <flatcc_emitter_reset@@Base+0xc8>
   17cd0:	mov	r2, r1
   17cd4:	ldr	r0, [r2, #2944]!	; 0xb80
   17cd8:	cmp	r0, r1
   17cdc:	beq	17d24 <flatcc_emitter_reset@@Base+0xc8>
   17ce0:	ldr	r3, [r0, #2944]	; 0xb80
   17ce4:	str	r3, [r2]
   17ce8:	ldr	r2, [r0, #2944]	; 0xb80
   17cec:	str	r1, [r2, #2948]	; 0xb84
   17cf0:	bl	128f8 <free@plt>
   17cf4:	ldr	r0, [r4, #28]
   17cf8:	ldr	r1, [r4, #32]
   17cfc:	sub	r0, r0, #2944	; 0xb80
   17d00:	cmp	r0, r1, lsl #1
   17d04:	str	r0, [r4, #28]
   17d08:	popls	{r4, sl, fp, pc}
   17d0c:	ldr	r1, [r4, #4]
   17d10:	ldr	r3, [r4]
   17d14:	mov	r2, r1
   17d18:	ldr	r0, [r2, #2944]!	; 0xb80
   17d1c:	cmp	r0, r3
   17d20:	bne	17ce0 <flatcc_emitter_reset@@Base+0x84>
   17d24:	pop	{r4, sl, fp, pc}

00017d28 <flatcc_emitter_clear@@Base>:
   17d28:	push	{r4, r5, r6, sl, fp, lr}
   17d2c:	add	fp, sp, #16
   17d30:	ldr	r5, [r0]
   17d34:	cmp	r5, #0
   17d38:	popeq	{r4, r5, r6, sl, fp, pc}
   17d3c:	mov	r4, r0
   17d40:	ldr	r0, [r5, #2948]	; 0xb84
   17d44:	mov	r6, #0
   17d48:	str	r6, [r0, #2944]	; 0xb80
   17d4c:	b	17d5c <flatcc_emitter_clear@@Base+0x34>
   17d50:	mov	r5, r0
   17d54:	ldr	r0, [r0, #2948]	; 0xb84
   17d58:	bl	128f8 <free@plt>
   17d5c:	ldr	r0, [r5, #2944]	; 0xb80
   17d60:	cmp	r0, #0
   17d64:	bne	17d50 <flatcc_emitter_clear@@Base+0x28>
   17d68:	mov	r0, r5
   17d6c:	bl	128f8 <free@plt>
   17d70:	vmov.i32	q8, #0	; 0x00000000
   17d74:	add	r0, r4, #16
   17d78:	vst1.32	{d16-d17}, [r0]
   17d7c:	mov	r0, #32
   17d80:	vst1.32	{d16-d17}, [r4], r0
   17d84:	str	r6, [r4]
   17d88:	pop	{r4, r5, r6, sl, fp, pc}

00017d8c <flatcc_emitter@@Base>:
   17d8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d90:	add	fp, sp, #28
   17d94:	sub	sp, sp, #4
   17d98:	mov	r6, r0
   17d9c:	mov	r7, r1
   17da0:	ldr	r0, [r0, #24]
   17da4:	ldr	r1, [fp, #8]
   17da8:	mov	r4, r2
   17dac:	cmn	r3, #1
   17db0:	mov	r9, r6
   17db4:	add	r0, r0, r1
   17db8:	str	r0, [r6, #24]
   17dbc:	ble	17ef4 <flatcc_emitter@@Base+0x168>
   17dc0:	ldr	r0, [r9, #20]!
   17dc4:	cmp	r0, r1
   17dc8:	bcs	1805c <flatcc_emitter@@Base+0x2d0>
   17dcc:	mov	r8, #0
   17dd0:	cmp	r4, #0
   17dd4:	beq	180b4 <flatcc_emitter@@Base+0x328>
   17dd8:	movw	sl, #64064	; 0xfa40
   17ddc:	movt	sl, #65535	; 0xffff
   17de0:	ldr	r8, [r7, #4]
   17de4:	cmp	r8, #0
   17de8:	beq	17ee4 <flatcc_emitter@@Base+0x158>
   17dec:	ldr	r9, [r7]
   17df0:	cmp	r8, r0
   17df4:	mov	r5, r8
   17df8:	bls	17eb0 <flatcc_emitter@@Base+0x124>
   17dfc:	mov	r5, r0
   17e00:	cmp	r5, #0
   17e04:	bne	17eb0 <flatcc_emitter@@Base+0x124>
   17e08:	ldr	r5, [r6, #4]
   17e0c:	cmp	r5, #0
   17e10:	beq	17e24 <flatcc_emitter@@Base+0x98>
   17e14:	ldr	r0, [r5, #2944]	; 0xb80
   17e18:	ldr	r1, [r6]
   17e1c:	cmp	r0, r1
   17e20:	bne	17e5c <flatcc_emitter@@Base+0xd0>
   17e24:	movw	r0, #2956	; 0xb8c
   17e28:	bl	1294c <malloc@plt>
   17e2c:	cmp	r0, #0
   17e30:	beq	1806c <flatcc_emitter@@Base+0x2e0>
   17e34:	ldr	r1, [r6, #28]
   17e38:	cmp	r5, #0
   17e3c:	add	r1, r1, #2944	; 0xb80
   17e40:	str	r1, [r6, #28]
   17e44:	beq	17e80 <flatcc_emitter@@Base+0xf4>
   17e48:	ldr	r1, [r6]
   17e4c:	str	r1, [r0, #2944]	; 0xb80
   17e50:	str	r5, [r0, #2948]	; 0xb84
   17e54:	str	r0, [r1, #2948]	; 0xb84
   17e58:	str	r0, [r5, #2944]	; 0xb80
   17e5c:	mov	r5, #2944	; 0xb80
   17e60:	str	r0, [r6, #4]
   17e64:	str	r0, [r6, #16]
   17e68:	str	r5, [r6, #20]
   17e6c:	ldr	r1, [r0, #2948]	; 0xb84
   17e70:	ldr	r1, [r1, #2952]	; 0xb88
   17e74:	add	r1, r1, #2944	; 0xb80
   17e78:	str	r1, [r0, #2952]	; 0xb88
   17e7c:	b	17ea4 <flatcc_emitter@@Base+0x118>
   17e80:	mov	r5, #1472	; 0x5c0
   17e84:	add	r1, r0, #1472	; 0x5c0
   17e88:	str	r0, [r6]
   17e8c:	stmib	r6, {r0, r1, r5}
   17e90:	str	r1, [r6, #16]
   17e94:	str	r5, [r6, #20]
   17e98:	str	r0, [r0, #2944]	; 0xb80
   17e9c:	str	r0, [r0, #2948]	; 0xb84
   17ea0:	str	sl, [r0, #2952]	; 0xb88
   17ea4:	cmp	r8, r5
   17ea8:	bhi	17e00 <flatcc_emitter@@Base+0x74>
   17eac:	mov	r5, r8
   17eb0:	ldr	r0, [r6, #16]
   17eb4:	mov	r1, r9
   17eb8:	mov	r2, r5
   17ebc:	bl	12904 <memcpy@plt>
   17ec0:	ldr	r0, [r6, #16]
   17ec4:	ldr	r1, [r6, #20]
   17ec8:	add	r9, r9, r5
   17ecc:	subs	r8, r8, r5
   17ed0:	add	r2, r0, r5
   17ed4:	sub	r0, r1, r5
   17ed8:	str	r2, [r6, #16]
   17edc:	str	r0, [r6, #20]
   17ee0:	bne	17df0 <flatcc_emitter@@Base+0x64>
   17ee4:	subs	r4, r4, #1
   17ee8:	add	r7, r7, #8
   17eec:	bne	17de0 <flatcc_emitter@@Base+0x54>
   17ef0:	b	18054 <flatcc_emitter@@Base+0x2c8>
   17ef4:	ldr	r0, [r9, #12]!
   17ef8:	cmp	r0, r1
   17efc:	bcs	18074 <flatcc_emitter@@Base+0x2e8>
   17f00:	mov	r8, #0
   17f04:	cmp	r4, #0
   17f08:	beq	180b4 <flatcc_emitter@@Base+0x328>
   17f0c:	add	r0, r7, r4, lsl #3
   17f10:	movw	sl, #2952	; 0xb88
   17f14:	ldr	r8, [r0, #-4]
   17f18:	sub	r1, r0, #8
   17f1c:	str	r1, [sp]
   17f20:	cmp	r8, #0
   17f24:	beq	18048 <flatcc_emitter@@Base+0x2bc>
   17f28:	ldr	r0, [sp]
   17f2c:	ldr	r0, [r0]
   17f30:	add	r7, r0, r8
   17f34:	ldr	r1, [r9]
   17f38:	b	18000 <flatcc_emitter@@Base+0x274>
   17f3c:	ldr	r5, [r6]
   17f40:	cmp	r5, #0
   17f44:	beq	17f6c <flatcc_emitter@@Base+0x1e0>
   17f48:	ldr	r0, [r5, #2948]	; 0xb84
   17f4c:	ldr	r1, [r6, #4]
   17f50:	cmp	r0, r1
   17f54:	beq	17f6c <flatcc_emitter@@Base+0x1e0>
   17f58:	ldr	r1, [r5, #2952]	; 0xb88
   17f5c:	mov	r2, r0
   17f60:	sub	r1, r1, #2944	; 0xb80
   17f64:	str	r1, [r2, #2952]!	; 0xb88
   17f68:	b	17fa8 <flatcc_emitter@@Base+0x21c>
   17f6c:	movw	r0, #2956	; 0xb8c
   17f70:	bl	1294c <malloc@plt>
   17f74:	cmp	r0, #0
   17f78:	beq	1806c <flatcc_emitter@@Base+0x2e0>
   17f7c:	ldr	r1, [r6, #28]
   17f80:	cmp	r5, #0
   17f84:	add	r1, r1, #2944	; 0xb80
   17f88:	str	r1, [r6, #28]
   17f8c:	beq	17fd0 <flatcc_emitter@@Base+0x244>
   17f90:	ldr	r1, [r6, #4]
   17f94:	add	r2, r0, sl
   17f98:	str	r5, [r0, #2944]	; 0xb80
   17f9c:	str	r1, [r0, #2948]	; 0xb84
   17fa0:	str	r0, [r5, #2948]	; 0xb84
   17fa4:	str	r0, [r1, #2944]	; 0xb80
   17fa8:	str	r0, [r6]
   17fac:	add	r3, r0, #2944	; 0xb80
   17fb0:	mov	r1, #2944	; 0xb80
   17fb4:	str	r3, [r6, #8]
   17fb8:	str	r1, [r6, #12]
   17fbc:	ldr	r0, [r0, #2944]	; 0xb80
   17fc0:	ldr	r0, [r0, #2952]	; 0xb88
   17fc4:	sub	r0, r0, #2944	; 0xb80
   17fc8:	str	r0, [r2]
   17fcc:	b	18000 <flatcc_emitter@@Base+0x274>
   17fd0:	add	r2, r0, #1472	; 0x5c0
   17fd4:	mov	r1, #1472	; 0x5c0
   17fd8:	str	r0, [r6]
   17fdc:	stmib	r6, {r0, r2}
   17fe0:	str	r1, [r6, #12]
   17fe4:	str	r2, [r6, #16]
   17fe8:	movw	r2, #64064	; 0xfa40
   17fec:	str	r1, [r6, #20]
   17ff0:	str	r0, [r0, #2944]	; 0xb80
   17ff4:	str	r0, [r0, #2948]	; 0xb84
   17ff8:	movt	r2, #65535	; 0xffff
   17ffc:	str	r2, [r0, #2952]	; 0xb88
   18000:	cmp	r8, r1
   18004:	bls	18018 <flatcc_emitter@@Base+0x28c>
   18008:	cmp	r1, #0
   1800c:	mov	r5, r1
   18010:	beq	17f3c <flatcc_emitter@@Base+0x1b0>
   18014:	b	1801c <flatcc_emitter@@Base+0x290>
   18018:	mov	r5, r8
   1801c:	sub	r0, r1, r5
   18020:	sub	r7, r7, r5
   18024:	mov	r2, r5
   18028:	str	r0, [r6, #12]
   1802c:	mov	r1, r7
   18030:	ldr	r0, [r6, #8]
   18034:	sub	r0, r0, r5
   18038:	str	r0, [r6, #8]
   1803c:	bl	12904 <memcpy@plt>
   18040:	subs	r8, r8, r5
   18044:	bne	17f34 <flatcc_emitter@@Base+0x1a8>
   18048:	ldr	r0, [sp]
   1804c:	subs	r4, r4, #1
   18050:	bne	17f14 <flatcc_emitter@@Base+0x188>
   18054:	mov	r8, #0
   18058:	b	180b4 <flatcc_emitter@@Base+0x328>
   1805c:	ldr	r5, [r6, #16]
   18060:	add	r2, r5, r1
   18064:	str	r2, [r6, #16]
   18068:	b	18080 <flatcc_emitter@@Base+0x2f4>
   1806c:	mvn	r8, #0
   18070:	b	180b4 <flatcc_emitter@@Base+0x328>
   18074:	ldr	r2, [r6, #8]
   18078:	sub	r5, r2, r1
   1807c:	str	r5, [r6, #8]
   18080:	sub	r0, r0, r1
   18084:	mov	r8, #0
   18088:	cmp	r4, #0
   1808c:	str	r0, [r9]
   18090:	beq	180b4 <flatcc_emitter@@Base+0x328>
   18094:	ldm	r7, {r1, r2}
   18098:	mov	r0, r5
   1809c:	bl	12904 <memcpy@plt>
   180a0:	ldr	r0, [r7, #4]
   180a4:	add	r7, r7, #8
   180a8:	subs	r4, r4, #1
   180ac:	add	r5, r5, r0
   180b0:	bne	18094 <flatcc_emitter@@Base+0x308>
   180b4:	mov	r0, r8
   180b8:	sub	sp, fp, #28
   180bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000180c0 <flatcc_emitter_copy_buffer@@Base>:
   180c0:	push	{r4, r5, r6, sl, fp, lr}
   180c4:	add	fp, sp, #16
   180c8:	mov	r3, r2
   180cc:	ldr	r2, [r0, #24]
   180d0:	mov	r5, #0
   180d4:	cmp	r2, r3
   180d8:	bhi	18174 <flatcc_emitter_copy_buffer@@Base+0xb4>
   180dc:	mov	r4, r0
   180e0:	ldr	r0, [r0]
   180e4:	cmp	r0, #0
   180e8:	beq	18174 <flatcc_emitter_copy_buffer@@Base+0xb4>
   180ec:	mov	r6, r1
   180f0:	ldr	r1, [r4, #4]
   180f4:	cmp	r0, r1
   180f8:	beq	18164 <flatcc_emitter_copy_buffer@@Base+0xa4>
   180fc:	ldr	r0, [r4, #12]
   18100:	ldr	r1, [r4, #8]
   18104:	rsb	r5, r0, #2944	; 0xb80
   18108:	mov	r0, r6
   1810c:	mov	r2, r5
   18110:	bl	12904 <memcpy@plt>
   18114:	ldm	r4, {r0, r1}
   18118:	add	r5, r6, r5
   1811c:	ldr	r6, [r0, #2944]	; 0xb80
   18120:	cmp	r6, r1
   18124:	beq	1814c <flatcc_emitter_copy_buffer@@Base+0x8c>
   18128:	mov	r0, r5
   1812c:	mov	r1, r6
   18130:	mov	r2, #2944	; 0xb80
   18134:	bl	12904 <memcpy@plt>
   18138:	ldr	r6, [r6, #2944]	; 0xb80
   1813c:	ldr	r0, [r4, #4]
   18140:	add	r5, r5, #2944	; 0xb80
   18144:	cmp	r6, r0
   18148:	bne	18128 <flatcc_emitter_copy_buffer@@Base+0x68>
   1814c:	ldr	r0, [r4, #20]
   18150:	mov	r1, r6
   18154:	rsb	r2, r0, #2944	; 0xb80
   18158:	mov	r0, r5
   1815c:	bl	12904 <memcpy@plt>
   18160:	b	18174 <flatcc_emitter_copy_buffer@@Base+0xb4>
   18164:	ldr	r1, [r4, #8]
   18168:	mov	r0, r6
   1816c:	bl	12904 <memcpy@plt>
   18170:	mov	r5, r6
   18174:	mov	r0, r5
   18178:	pop	{r4, r5, r6, sl, fp, pc}
   1817c:	andeq	r0, r0, r0

00018180 <grisu3_diy_fp_encode_double@@Base>:
   18180:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18184:	add	fp, sp, #28
   18188:	sub	sp, sp, #44	; 0x2c
   1818c:	mov	r5, r2
   18190:	mov	r2, r0
   18194:	mov	r0, #0
   18198:	mov	r9, r3
   1819c:	mov	r3, r1
   181a0:	str	r0, [sp]
   181a4:	str	r0, [sp, #4]
   181a8:	add	r0, sp, #24
   181ac:	bl	1855c <grisu3_diy_fp_encode_double@@Base+0x3dc>
   181b0:	sub	r0, r5, r9
   181b4:	ldr	r5, [fp, #8]
   181b8:	cmp	r5, #0
   181bc:	movwne	r5, #4
   181c0:	cmn	r0, #348	; 0x15c
   181c4:	blt	184bc <grisu3_diy_fp_encode_double@@Base+0x33c>
   181c8:	cmp	r0, #348	; 0x15c
   181cc:	bge	184dc <grisu3_diy_fp_encode_double@@Base+0x35c>
   181d0:	add	r1, r0, #348	; 0x15c
   181d4:	movw	r6, #56128	; 0xdb40
   181d8:	asr	r2, r1, #31
   181dc:	movt	r6, #1
   181e0:	add	r1, r1, r2, lsr #29
   181e4:	mvn	r2, #15
   181e8:	and	r1, r2, r1, lsl #1
   181ec:	ldr	r8, [r6, r1]!
   181f0:	ldrsh	r4, [r6, #10]
   181f4:	cmp	r0, r4
   181f8:	blt	184fc <grisu3_diy_fp_encode_double@@Base+0x37c>
   181fc:	add	r1, r4, #8
   18200:	cmp	r1, r0
   18204:	ble	1851c <grisu3_diy_fp_encode_double@@Base+0x39c>
   18208:	ldr	r1, [sp, #32]
   1820c:	ldr	r2, [sp, #24]
   18210:	ldr	r3, [sp, #28]
   18214:	ldr	ip, [sp, #36]	; 0x24
   18218:	cmp	r0, r4
   1821c:	rsb	r7, r1, #0
   18220:	lsl	r5, r5, r7
   18224:	beq	18288 <grisu3_diy_fp_encode_double@@Base+0x108>
   18228:	mvn	r7, r4
   1822c:	add	r4, r0, r7
   18230:	cmp	r4, #7
   18234:	bcs	1853c <grisu3_diy_fp_encode_double@@Base+0x3bc>
   18238:	movw	r0, #56016	; 0xdad0
   1823c:	stm	sp, {r1, ip}
   18240:	movt	r0, #1
   18244:	ldr	r1, [r0, r4, lsl #4]!
   18248:	str	r1, [sp, #8]
   1824c:	ldmib	r0, {r1, r7}
   18250:	ldr	r0, [r0, #12]
   18254:	str	r0, [sp, #20]
   18258:	add	r0, sp, #24
   1825c:	str	r7, [sp, #16]
   18260:	str	r1, [sp, #12]
   18264:	bl	18600 <grisu3_diy_fp_encode_double@@Base+0x480>
   18268:	add	r0, r9, r4
   1826c:	ldr	r2, [sp, #24]
   18270:	ldr	r3, [sp, #28]
   18274:	ldr	r1, [sp, #32]
   18278:	ldr	ip, [sp, #36]	; 0x24
   1827c:	add	r0, r0, #1
   18280:	cmp	r0, #19
   18284:	addgt	r5, r5, #4
   18288:	ldr	r0, [r6, #4]
   1828c:	ldrsh	r7, [r6, #8]
   18290:	stm	sp, {r1, ip}
   18294:	mov	r6, #0
   18298:	str	r8, [sp, #8]
   1829c:	str	r6, [sp, #20]
   182a0:	str	r0, [sp, #12]
   182a4:	add	r0, sp, #24
   182a8:	str	r7, [sp, #16]
   182ac:	bl	18600 <grisu3_diy_fp_encode_double@@Base+0x480>
   182b0:	add	r4, sp, #24
   182b4:	ldm	r4, {r2, r3, r4}
   182b8:	ldr	r0, [sp, #36]	; 0x24
   182bc:	str	r0, [sp, #4]
   182c0:	add	r0, sp, #24
   182c4:	str	r4, [sp]
   182c8:	bl	1855c <grisu3_diy_fp_encode_double@@Base+0x3dc>
   182cc:	add	r7, sp, #24
   182d0:	mov	r0, #9
   182d4:	cmp	r5, #0
   182d8:	movw	lr, #64462	; 0xfbce
   182dc:	ldm	r7, {r1, r3, r7}
   182e0:	movweq	r0, #8
   182e4:	movt	lr, #65535	; 0xffff
   182e8:	add	r0, r0, r5
   182ec:	sub	r2, r4, r7
   182f0:	lsl	r8, r0, r2
   182f4:	sub	r0, lr, #1
   182f8:	cmp	r7, r0
   182fc:	bgt	18350 <grisu3_diy_fp_encode_double@@Base+0x1d0>
   18300:	mvn	r0, #1136	; 0x470
   18304:	mov	r6, #64	; 0x40
   18308:	cmp	r7, r0
   1830c:	blt	1831c <grisu3_diy_fp_encode_double@@Base+0x19c>
   18310:	sub	r6, lr, r7
   18314:	cmp	r6, #61	; 0x3d
   18318:	blt	18350 <grisu3_diy_fp_encode_double@@Base+0x1d0>
   1831c:	sub	r0, r6, #62	; 0x3e
   18320:	mov	r2, #9
   18324:	add	r8, r2, r8, asr r0
   18328:	lsr	r1, r1, r0
   1832c:	rsb	r2, r6, #94	; 0x5e
   18330:	add	r7, r0, r7
   18334:	orr	r1, r1, r3, lsl r2
   18338:	sub	r2, r6, #94	; 0x5e
   1833c:	mov	r6, #62	; 0x3e
   18340:	cmp	r2, #0
   18344:	lsrge	r1, r3, r2
   18348:	lsr	r3, r3, r0
   1834c:	movwge	r3, #0
   18350:	lsr	r0, r1, r6
   18354:	rsb	r2, r6, #32
   18358:	add	r5, r7, r6
   1835c:	mov	r7, #1
   18360:	orr	r2, r0, r3, lsl r2
   18364:	sub	r0, r6, #32
   18368:	cmp	r0, #0
   1836c:	lsrge	r2, r3, r0
   18370:	lsr	r0, r3, r6
   18374:	sub	r3, r6, #1
   18378:	lsl	r7, r7, r3
   1837c:	sub	r3, r6, #33	; 0x21
   18380:	movwge	r0, #0
   18384:	cmp	r3, #0
   18388:	movwge	r7, #0
   1838c:	add	sl, r8, r7, lsl #3
   18390:	cmp	r6, sl
   18394:	blt	183b4 <grisu3_diy_fp_encode_double@@Base+0x234>
   18398:	adds	r2, r2, #1
   1839c:	adc	r0, r0, #0
   183a0:	tst	r0, #2097152	; 0x200000
   183a4:	beq	183b4 <grisu3_diy_fp_encode_double@@Base+0x234>
   183a8:	lsrs	r0, r0, #1
   183ac:	add	r5, r5, #1
   183b0:	rrx	r2, r2
   183b4:	and	r4, r7, r1
   183b8:	cmp	r0, #2097152	; 0x200000
   183bc:	bcc	183e0 <grisu3_diy_fp_encode_double@@Base+0x260>
   183c0:	mov	r3, #0
   183c4:	lsrs	r1, r0, #1
   183c8:	add	r5, r5, #1
   183cc:	rrx	r2, r2
   183d0:	cmp	r3, r0, lsr #22
   183d4:	mov	r0, r1
   183d8:	bne	183c4 <grisu3_diy_fp_encode_double@@Base+0x244>
   183dc:	b	183e4 <grisu3_diy_fp_encode_double@@Base+0x264>
   183e0:	mov	r1, r0
   183e4:	ldr	ip, [fp, #12]
   183e8:	lsl	r9, r7, #3
   183ec:	lsl	r6, r4, #3
   183f0:	vmov.i32	d16, #0	; 0x00000000
   183f4:	cmp	r5, lr
   183f8:	blt	18490 <grisu3_diy_fp_encode_double@@Base+0x310>
   183fc:	and	r0, r1, #1048576	; 0x100000
   18400:	mov	r3, #1
   18404:	cmp	r5, lr
   18408:	eor	r7, r3, r0, lsr #20
   1840c:	beq	18450 <grisu3_diy_fp_encode_double@@Base+0x2d0>
   18410:	cmp	r0, #0
   18414:	bne	18450 <grisu3_diy_fp_encode_double@@Base+0x2d0>
   18418:	mov	r3, #1
   1841c:	lsl	r0, r1, #1
   18420:	and	r1, r1, #524288	; 0x80000
   18424:	sub	r4, r5, #1
   18428:	cmn	r5, #1072	; 0x430
   1842c:	orr	r0, r0, r2, lsr #31
   18430:	eor	r7, r3, r1, lsr #19
   18434:	lsl	r2, r2, #1
   18438:	blt	18458 <grisu3_diy_fp_encode_double@@Base+0x2d8>
   1843c:	cmp	r1, #0
   18440:	mov	r1, r0
   18444:	mov	r5, r4
   18448:	beq	1841c <grisu3_diy_fp_encode_double@@Base+0x29c>
   1844c:	b	18458 <grisu3_diy_fp_encode_double@@Base+0x2d8>
   18450:	mov	r4, r5
   18454:	mov	r0, r1
   18458:	cmp	r4, lr
   1845c:	bne	18470 <grisu3_diy_fp_encode_double@@Base+0x2f0>
   18460:	mov	r1, #0
   18464:	cmp	r7, #0
   18468:	mov	r3, #0
   1846c:	bne	18480 <grisu3_diy_fp_encode_double@@Base+0x300>
   18470:	movw	r1, #0
   18474:	movt	r1, #17200	; 0x4330
   18478:	add	r3, r1, r4, lsl #20
   1847c:	mov	r1, #0
   18480:	bfc	r0, #20, #12
   18484:	orr	r1, r1, r2
   18488:	orr	r0, r3, r0
   1848c:	vmov	d16, r1, r0
   18490:	cmp	r6, sl
   18494:	mov	r1, #0
   18498:	sub	r2, r9, r8
   1849c:	mov	r0, #0
   184a0:	vstr	d16, [ip]
   184a4:	movwge	r1, #1
   184a8:	cmp	r2, r6
   184ac:	movwge	r0, #1
   184b0:	orr	r0, r1, r0
   184b4:	sub	sp, fp, #28
   184b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184bc:	movw	r0, #59699	; 0xe933
   184c0:	movw	r1, #58200	; 0xe358
   184c4:	movw	r3, #59730	; 0xe952
   184c8:	mov	r2, #80	; 0x50
   184cc:	movt	r0, #1
   184d0:	movt	r1, #1
   184d4:	movt	r3, #1
   184d8:	bl	129c4 <__assert_fail@plt>
   184dc:	movw	r0, #59787	; 0xe98b
   184e0:	movw	r1, #58200	; 0xe358
   184e4:	movw	r3, #59730	; 0xe952
   184e8:	mov	r2, #81	; 0x51
   184ec:	movt	r0, #1
   184f0:	movt	r1, #1
   184f4:	movt	r3, #1
   184f8:	bl	129c4 <__assert_fail@plt>
   184fc:	movw	r0, #59830	; 0xe9b6
   18500:	movw	r1, #58200	; 0xe358
   18504:	movw	r3, #59730	; 0xe952
   18508:	mov	r2, #88	; 0x58
   1850c:	movt	r0, #1
   18510:	movt	r1, #1
   18514:	movt	r3, #1
   18518:	bl	129c4 <__assert_fail@plt>
   1851c:	movw	r0, #59845	; 0xe9c5
   18520:	movw	r1, #58200	; 0xe358
   18524:	movw	r3, #59730	; 0xe952
   18528:	mov	r2, #89	; 0x59
   1852c:	movt	r0, #1
   18530:	movt	r1, #1
   18534:	movt	r3, #1
   18538:	bl	129c4 <__assert_fail@plt>
   1853c:	movw	r0, #58172	; 0xe33c
   18540:	movw	r1, #58200	; 0xe358
   18544:	movw	r3, #58287	; 0xe3af
   18548:	mov	r2, #185	; 0xb9
   1854c:	movt	r0, #1
   18550:	movt	r1, #1
   18554:	movt	r3, #1
   18558:	bl	129c4 <__assert_fail@plt>
   1855c:	push	{r4, sl, fp, lr}
   18560:	add	fp, sp, #8
   18564:	orrs	r1, r2, r3
   18568:	beq	185e0 <grisu3_diy_fp_encode_double@@Base+0x460>
   1856c:	ldr	ip, [fp, #12]
   18570:	ldr	r1, [fp, #8]
   18574:	mov	r4, #0
   18578:	cmp	r4, r3, lsr #22
   1857c:	bne	18598 <grisu3_diy_fp_encode_double@@Base+0x418>
   18580:	lsl	r3, r3, #10
   18584:	sub	r1, r1, #10
   18588:	orr	r3, r3, r2, lsr #22
   1858c:	lsl	r2, r2, #10
   18590:	cmp	r3, #4194304	; 0x400000
   18594:	bcc	18580 <grisu3_diy_fp_encode_double@@Base+0x400>
   18598:	cmp	r3, #0
   1859c:	blt	185c8 <grisu3_diy_fp_encode_double@@Base+0x448>
   185a0:	mvn	lr, #0
   185a4:	lsl	r3, r3, #1
   185a8:	lsl	r4, r2, #1
   185ac:	sub	r1, r1, #1
   185b0:	orr	r3, r3, r2, lsr #31
   185b4:	subs	r2, lr, r2, lsl #1
   185b8:	sbcs	r2, lr, r3
   185bc:	mov	r2, r4
   185c0:	blt	185a4 <grisu3_diy_fp_encode_double@@Base+0x424>
   185c4:	b	185cc <grisu3_diy_fp_encode_double@@Base+0x44c>
   185c8:	mov	r4, r2
   185cc:	str	r4, [r0]
   185d0:	str	r3, [r0, #4]
   185d4:	str	r1, [r0, #8]
   185d8:	str	ip, [r0, #12]
   185dc:	pop	{r4, sl, fp, pc}
   185e0:	movw	r0, #59547	; 0xe89b
   185e4:	movw	r1, #59556	; 0xe8a4
   185e8:	movw	r3, #59642	; 0xe8fa
   185ec:	mov	r2, #260	; 0x104
   185f0:	movt	r0, #1
   185f4:	movt	r1, #1
   185f8:	movt	r3, #1
   185fc:	bl	129c4 <__assert_fail@plt>
   18600:	push	{r4, r5, fp, lr}
   18604:	add	fp, sp, #8
   18608:	ldr	ip, [fp, #24]
   1860c:	ldr	r1, [fp, #8]
   18610:	mov	r5, #0
   18614:	add	r1, r1, ip
   18618:	ldr	ip, [fp, #16]
   1861c:	add	r1, r1, #64	; 0x40
   18620:	str	r1, [r0, #8]
   18624:	umull	r1, lr, ip, r2
   18628:	umull	ip, r1, ip, r3
   1862c:	adds	lr, ip, lr
   18630:	ldr	ip, [fp, #20]
   18634:	adc	r5, r5, #0
   18638:	umull	r2, r4, ip, r2
   1863c:	adds	r2, lr, r2
   18640:	umaal	r1, r4, ip, r3
   18644:	adc	r5, r5, #0
   18648:	adds	r2, r2, #-2147483648	; 0x80000000
   1864c:	adc	r2, r5, #0
   18650:	adds	r1, r1, r2
   18654:	str	r1, [r0]
   18658:	adc	r1, r4, #0
   1865c:	str	r1, [r0, #4]
   18660:	pop	{r4, r5, fp, pc}

00018664 <flatcc_json_parser_error_string@@Base>:
   18664:	cmp	r0, #34	; 0x22
   18668:	movwhi	r0, #58997	; 0xe675
   1866c:	movthi	r0, #1
   18670:	bxhi	lr
   18674:	movw	r1, #58032	; 0xe2b0
   18678:	movt	r1, #1
   1867c:	ldr	r0, [r1, r0, lsl #2]
   18680:	bx	lr

00018684 <flatcc_json_parser_set_error@@Base>:
   18684:	mov	ip, r2
   18688:	ldr	r2, [r0, #24]
   1868c:	cmp	r2, #0
   18690:	bne	186ac <flatcc_json_parser_set_error@@Base+0x28>
   18694:	str	r1, [r0, #36]	; 0x24
   18698:	add	r1, r1, #1
   1869c:	ldr	r2, [r0, #4]
   186a0:	sub	r1, r1, r2
   186a4:	str	r1, [r0, #20]
   186a8:	str	r3, [r0, #24]
   186ac:	mov	r0, ip
   186b0:	bx	lr

000186b4 <flatcc_json_parser_string_part@@Base>:
   186b4:	cmp	r1, r2
   186b8:	beq	186e4 <flatcc_json_parser_string_part@@Base+0x30>
   186bc:	ldrb	r3, [r1]
   186c0:	cmp	r3, #32
   186c4:	bcc	18718 <flatcc_json_parser_string_part@@Base+0x64>
   186c8:	cmp	r3, #34	; 0x22
   186cc:	cmpne	r3, #92	; 0x5c
   186d0:	beq	18710 <flatcc_json_parser_string_part@@Base+0x5c>
   186d4:	add	r1, r1, #1
   186d8:	cmp	r2, r1
   186dc:	bne	186bc <flatcc_json_parser_string_part@@Base+0x8>
   186e0:	mov	r1, r2
   186e4:	ldr	r3, [r0, #24]
   186e8:	cmp	r3, #0
   186ec:	bne	1870c <flatcc_json_parser_string_part@@Base+0x58>
   186f0:	mov	ip, #20
   186f4:	str	r1, [r0, #36]	; 0x24
   186f8:	add	r1, r1, #1
   186fc:	ldr	r3, [r0, #4]
   18700:	sub	r1, r1, r3
   18704:	str	r1, [r0, #20]
   18708:	str	ip, [r0, #24]
   1870c:	mov	r1, r2
   18710:	mov	r0, r1
   18714:	bx	lr
   18718:	ldr	r3, [r0, #24]
   1871c:	cmp	r3, #0
   18720:	bne	1870c <flatcc_json_parser_string_part@@Base+0x58>
   18724:	mov	ip, #17
   18728:	b	186f4 <flatcc_json_parser_string_part@@Base+0x40>

0001872c <flatcc_json_parser_space_ext@@Base>:
   1872c:	mov	ip, r2
   18730:	cmp	r1, r2
   18734:	beq	18800 <flatcc_json_parser_space_ext@@Base+0xd4>
   18738:	ldrb	r3, [r1]
   1873c:	cmp	r3, #32
   18740:	bne	18790 <flatcc_json_parser_space_ext@@Base+0x64>
   18744:	add	r1, r1, #1
   18748:	cmp	r1, ip
   1874c:	bne	18738 <flatcc_json_parser_space_ext@@Base+0xc>
   18750:	b	18800 <flatcc_json_parser_space_ext@@Base+0xd4>
   18754:	sub	r2, ip, r1
   18758:	mov	r3, #0
   1875c:	cmp	r2, #2
   18760:	ldrbge	r2, [r1, #1]
   18764:	subge	r2, r2, #10
   18768:	clzge	r2, r2
   1876c:	lsrge	r3, r2, #5
   18770:	add	r1, r1, r3
   18774:	add	r1, r1, #1
   18778:	str	r1, [r0, #4]
   1877c:	ldr	r2, [r0, #16]
   18780:	add	r2, r2, #1
   18784:	str	r2, [r0, #16]
   18788:	b	18790 <flatcc_json_parser_space_ext@@Base+0x64>
   1878c:	add	r1, r1, #1
   18790:	cmp	r1, ip
   18794:	beq	18800 <flatcc_json_parser_space_ext@@Base+0xd4>
   18798:	ldrb	r3, [r1]
   1879c:	cmp	r3, #32
   187a0:	bhi	187fc <flatcc_json_parser_space_ext@@Base+0xd0>
   187a4:	cmp	r3, #12
   187a8:	bgt	187c0 <flatcc_json_parser_space_ext@@Base+0x94>
   187ac:	cmp	r3, #9
   187b0:	beq	1878c <flatcc_json_parser_space_ext@@Base+0x60>
   187b4:	cmp	r3, #10
   187b8:	beq	18774 <flatcc_json_parser_space_ext@@Base+0x48>
   187bc:	b	187d0 <flatcc_json_parser_space_ext@@Base+0xa4>
   187c0:	cmp	r3, #13
   187c4:	beq	18754 <flatcc_json_parser_space_ext@@Base+0x28>
   187c8:	cmp	r3, #32
   187cc:	beq	18748 <flatcc_json_parser_space_ext@@Base+0x1c>
   187d0:	ldr	r2, [r0, #24]
   187d4:	cmp	r2, #0
   187d8:	bne	18800 <flatcc_json_parser_space_ext@@Base+0xd4>
   187dc:	str	r1, [r0, #36]	; 0x24
   187e0:	add	r1, r1, #1
   187e4:	mov	r2, #5
   187e8:	ldr	r3, [r0, #4]
   187ec:	sub	r1, r1, r3
   187f0:	str	r1, [r0, #20]
   187f4:	str	r2, [r0, #24]
   187f8:	b	18800 <flatcc_json_parser_space_ext@@Base+0xd4>
   187fc:	mov	ip, r1
   18800:	mov	r0, ip
   18804:	bx	lr

00018808 <flatcc_json_parser_string_escape@@Base>:
   18808:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1880c:	add	fp, sp, #24
   18810:	sub	r7, r2, r1
   18814:	cmp	r7, #2
   18818:	blt	18908 <flatcc_json_parser_string_escape@@Base+0x100>
   1881c:	ldrb	r6, [r1]
   18820:	cmp	r6, #92	; 0x5c
   18824:	bne	18908 <flatcc_json_parser_string_escape@@Base+0x100>
   18828:	ldrb	r6, [r1, #1]
   1882c:	cmp	r6, #97	; 0x61
   18830:	bgt	18854 <flatcc_json_parser_string_escape@@Base+0x4c>
   18834:	cmp	r6, #34	; 0x22
   18838:	beq	188b4 <flatcc_json_parser_string_escape@@Base+0xac>
   1883c:	cmp	r6, #47	; 0x2f
   18840:	beq	188bc <flatcc_json_parser_string_escape@@Base+0xb4>
   18844:	cmp	r6, #92	; 0x5c
   18848:	bne	18908 <flatcc_json_parser_string_escape@@Base+0x100>
   1884c:	movw	r0, #23553	; 0x5c01
   18850:	b	18940 <flatcc_json_parser_string_escape@@Base+0x138>
   18854:	sub	r5, r6, #110	; 0x6e
   18858:	cmp	r5, #10
   1885c:	bhi	1889c <flatcc_json_parser_string_escape@@Base+0x94>
   18860:	add	r6, pc, #0
   18864:	ldr	pc, [r6, r5, lsl #2]
   18868:	muleq	r1, r4, r8
   1886c:	andeq	r8, r1, r8, lsl #18
   18870:	andeq	r8, r1, r8, lsl #18
   18874:	andeq	r8, r1, r8, lsl #18
   18878:	andeq	r8, r1, r4, asr #17
   1887c:	andeq	r8, r1, r8, lsl #18
   18880:	andeq	r8, r1, ip, asr #17
   18884:	ldrdeq	r8, [r1], -r4
   18888:	andeq	r8, r1, r8, lsl #18
   1888c:	andeq	r8, r1, r8, lsl #18
   18890:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18894:	movw	r0, #2561	; 0xa01
   18898:	b	18940 <flatcc_json_parser_string_escape@@Base+0x138>
   1889c:	cmp	r6, #98	; 0x62
   188a0:	beq	1893c <flatcc_json_parser_string_escape@@Base+0x134>
   188a4:	cmp	r6, #102	; 0x66
   188a8:	bne	18908 <flatcc_json_parser_string_escape@@Base+0x100>
   188ac:	movw	r0, #3073	; 0xc01
   188b0:	b	18940 <flatcc_json_parser_string_escape@@Base+0x138>
   188b4:	movw	r0, #8705	; 0x2201
   188b8:	b	18940 <flatcc_json_parser_string_escape@@Base+0x138>
   188bc:	movw	r0, #12033	; 0x2f01
   188c0:	b	18940 <flatcc_json_parser_string_escape@@Base+0x138>
   188c4:	movw	r0, #3329	; 0xd01
   188c8:	b	18940 <flatcc_json_parser_string_escape@@Base+0x138>
   188cc:	movw	r0, #2305	; 0x901
   188d0:	b	18940 <flatcc_json_parser_string_escape@@Base+0x138>
   188d4:	cmp	r7, #5
   188d8:	ble	18908 <flatcc_json_parser_string_escape@@Base+0x100>
   188dc:	ldrb	r7, [r1, #2]
   188e0:	sub	r6, r7, #48	; 0x30
   188e4:	uxtb	r6, r6
   188e8:	cmp	r6, #9
   188ec:	bhi	1896c <flatcc_json_parser_string_escape@@Base+0x164>
   188f0:	lsl	ip, r7, #12
   188f4:	b	1898c <flatcc_json_parser_string_escape@@Base+0x184>
   188f8:	mov	r6, #1
   188fc:	cmp	r7, #3
   18900:	strb	r6, [r3]
   18904:	bgt	18950 <flatcc_json_parser_string_escape@@Base+0x148>
   18908:	mov	r7, #0
   1890c:	strb	r7, [r3]
   18910:	ldr	r3, [r0, #24]
   18914:	cmp	r3, #0
   18918:	bne	18948 <flatcc_json_parser_string_escape@@Base+0x140>
   1891c:	str	r1, [r0, #36]	; 0x24
   18920:	add	r1, r1, #1
   18924:	mov	r3, #18
   18928:	ldr	r7, [r0, #4]
   1892c:	sub	r1, r1, r7
   18930:	str	r1, [r0, #20]
   18934:	str	r3, [r0, #24]
   18938:	b	18948 <flatcc_json_parser_string_escape@@Base+0x140>
   1893c:	movw	r0, #2049	; 0x801
   18940:	strh	r0, [r3]
   18944:	add	r2, r1, #2
   18948:	mov	r0, r2
   1894c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18950:	ldrb	r7, [r1, #2]
   18954:	sub	r6, r7, #48	; 0x30
   18958:	uxtb	r6, r6
   1895c:	cmp	r6, #9
   18960:	bhi	189a8 <flatcc_json_parser_string_escape@@Base+0x1a0>
   18964:	lsl	r7, r7, #4
   18968:	b	189c4 <flatcc_json_parser_string_escape@@Base+0x1bc>
   1896c:	orr	r6, r7, #32
   18970:	sub	r6, r6, #97	; 0x61
   18974:	uxtb	r6, r6
   18978:	cmp	r6, #5
   1897c:	bhi	18908 <flatcc_json_parser_string_escape@@Base+0x100>
   18980:	movw	r6, #36864	; 0x9000
   18984:	movt	r6, #65535	; 0xffff
   18988:	add	ip, r6, r7, lsl #12
   1898c:	ldrb	lr, [r1, #3]
   18990:	sub	r4, lr, #48	; 0x30
   18994:	uxtb	r4, r4
   18998:	cmp	r4, #10
   1899c:	bcs	18a00 <flatcc_json_parser_string_escape@@Base+0x1f8>
   189a0:	mov	r8, #53248	; 0xd000
   189a4:	b	18a18 <flatcc_json_parser_string_escape@@Base+0x210>
   189a8:	orr	r6, r7, #32
   189ac:	sub	r6, r6, #97	; 0x61
   189b0:	uxtb	r6, r6
   189b4:	cmp	r6, #5
   189b8:	bhi	18908 <flatcc_json_parser_string_escape@@Base+0x100>
   189bc:	mvn	r6, #111	; 0x6f
   189c0:	add	r7, r6, r7, lsl #4
   189c4:	ldrb	r5, [r1, #3]
   189c8:	sub	r6, r5, #48	; 0x30
   189cc:	uxtb	r4, r6
   189d0:	cmp	r4, #10
   189d4:	bcc	189f0 <flatcc_json_parser_string_escape@@Base+0x1e8>
   189d8:	orr	r6, r5, #32
   189dc:	sub	r5, r6, #97	; 0x61
   189e0:	uxtb	r5, r5
   189e4:	cmp	r5, #5
   189e8:	bhi	18908 <flatcc_json_parser_string_escape@@Base+0x100>
   189ec:	sub	r6, r6, #87	; 0x57
   189f0:	orr	r0, r6, r7
   189f4:	add	r2, r1, #4
   189f8:	strb	r0, [r3, #1]
   189fc:	b	18948 <flatcc_json_parser_string_escape@@Base+0x140>
   18a00:	orr	lr, lr, #32
   18a04:	mov	r8, #43264	; 0xa900
   18a08:	sub	r4, lr, #97	; 0x61
   18a0c:	uxtb	r4, r4
   18a10:	cmp	r4, #6
   18a14:	bcs	18908 <flatcc_json_parser_string_escape@@Base+0x100>
   18a18:	ldrb	r5, [r1, #4]
   18a1c:	sub	r4, r5, #48	; 0x30
   18a20:	uxtb	r4, r4
   18a24:	cmp	r4, #10
   18a28:	bcs	18a34 <flatcc_json_parser_string_escape@@Base+0x22c>
   18a2c:	mov	r9, #64768	; 0xfd00
   18a30:	b	18a4c <flatcc_json_parser_string_escape@@Base+0x244>
   18a34:	orr	r5, r5, #32
   18a38:	movw	r9, #64144	; 0xfa90
   18a3c:	sub	r4, r5, #97	; 0x61
   18a40:	uxtb	r4, r4
   18a44:	cmp	r4, #6
   18a48:	bcs	18908 <flatcc_json_parser_string_escape@@Base+0x100>
   18a4c:	ldrb	r7, [r1, #5]
   18a50:	sub	r4, r7, #48	; 0x30
   18a54:	uxtb	r4, r4
   18a58:	cmp	r4, #10
   18a5c:	bcs	18a6c <flatcc_json_parser_string_escape@@Base+0x264>
   18a60:	mvn	r0, #86	; 0x56
   18a64:	add	r4, r0, #39	; 0x27
   18a68:	b	18a84 <flatcc_json_parser_string_escape@@Base+0x27c>
   18a6c:	orr	r7, r7, #32
   18a70:	movw	r4, #65449	; 0xffa9
   18a74:	sub	r6, r7, #97	; 0x61
   18a78:	uxtb	r6, r6
   18a7c:	cmp	r6, #6
   18a80:	bcs	18908 <flatcc_json_parser_string_escape@@Base+0x100>
   18a84:	add	r0, r8, lr, lsl #8
   18a88:	add	r2, r9, r5, lsl #4
   18a8c:	orr	r0, r0, ip
   18a90:	orr	r0, r0, r2
   18a94:	add	r2, r4, r7
   18a98:	orr	r0, r0, r2
   18a9c:	uxth	r7, r0
   18aa0:	cmp	r7, #127	; 0x7f
   18aa4:	bhi	18ab4 <flatcc_json_parser_string_escape@@Base+0x2ac>
   18aa8:	mov	r2, #1
   18aac:	strb	r2, [r3]
   18ab0:	b	18b08 <flatcc_json_parser_string_escape@@Base+0x300>
   18ab4:	and	r2, r0, #63488	; 0xf800
   18ab8:	mov	r6, #0
   18abc:	cmp	r6, r2, lsr #11
   18ac0:	bne	18adc <flatcc_json_parser_string_escape@@Base+0x2d4>
   18ac4:	mov	r7, #192	; 0xc0
   18ac8:	mov	r2, #2
   18acc:	orr	r7, r7, r0, lsr #6
   18ad0:	strb	r2, [r3]
   18ad4:	strb	r7, [r3, #1]
   18ad8:	b	18b00 <flatcc_json_parser_string_escape@@Base+0x2f8>
   18adc:	mov	r6, #224	; 0xe0
   18ae0:	mov	r2, #3
   18ae4:	orr	r6, r6, r7, lsr #12
   18ae8:	strb	r2, [r3]
   18aec:	lsr	r7, r7, #6
   18af0:	strb	r6, [r3, #1]
   18af4:	mov	r6, #2
   18af8:	bfi	r7, r6, #6, #26
   18afc:	strb	r7, [r3, #2]
   18b00:	mvn	r7, #-67108863	; 0xfc000001
   18b04:	bfi	r0, r7, #6, #26
   18b08:	strb	r0, [r3, r2]
   18b0c:	add	r2, r1, #6
   18b10:	b	18948 <flatcc_json_parser_string_escape@@Base+0x140>

00018b14 <flatcc_json_parser_skip_constant@@Base>:
   18b14:	push	{r4, r5, r6, sl, fp, lr}
   18b18:	add	fp, sp, #16
   18b1c:	cmp	r1, r2
   18b20:	beq	18bd0 <flatcc_json_parser_skip_constant@@Base+0xbc>
   18b24:	mov	r4, r2
   18b28:	mov	r5, r0
   18b2c:	ldrsb	r0, [r1]
   18b30:	mov	r6, r1
   18b34:	cmp	r0, #0
   18b38:	blt	18b4c <flatcc_json_parser_skip_constant@@Base+0x38>
   18b3c:	uxtb	r0, r0
   18b40:	cmp	r0, #95	; 0x5f
   18b44:	cmpne	r0, #46	; 0x2e
   18b48:	bne	18b5c <flatcc_json_parser_skip_constant@@Base+0x48>
   18b4c:	add	r1, r6, #1
   18b50:	cmp	r1, r4
   18b54:	bne	18b2c <flatcc_json_parser_skip_constant@@Base+0x18>
   18b58:	b	18bc8 <flatcc_json_parser_skip_constant@@Base+0xb4>
   18b5c:	sub	r1, r0, #48	; 0x30
   18b60:	uxtb	r1, r1
   18b64:	cmp	r1, #9
   18b68:	bls	18b4c <flatcc_json_parser_skip_constant@@Base+0x38>
   18b6c:	orr	r1, r0, #32
   18b70:	sub	r1, r1, #97	; 0x61
   18b74:	uxtb	r1, r1
   18b78:	cmp	r1, #25
   18b7c:	bls	18b4c <flatcc_json_parser_skip_constant@@Base+0x38>
   18b80:	sub	r1, r4, r6
   18b84:	cmp	r1, #2
   18b88:	blt	18ba8 <flatcc_json_parser_skip_constant@@Base+0x94>
   18b8c:	cmp	r0, #32
   18b90:	bhi	18bd4 <flatcc_json_parser_skip_constant@@Base+0xc0>
   18b94:	bne	18ba8 <flatcc_json_parser_skip_constant@@Base+0x94>
   18b98:	mov	r1, r6
   18b9c:	ldrb	r0, [r1, #1]!
   18ba0:	cmp	r0, #32
   18ba4:	bhi	18b50 <flatcc_json_parser_skip_constant@@Base+0x3c>
   18ba8:	mov	r0, r5
   18bac:	mov	r1, r6
   18bb0:	mov	r2, r4
   18bb4:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   18bb8:	mov	r1, r0
   18bbc:	cmp	r0, r6
   18bc0:	bne	18b50 <flatcc_json_parser_skip_constant@@Base+0x3c>
   18bc4:	b	18bd4 <flatcc_json_parser_skip_constant@@Base+0xc0>
   18bc8:	mov	r6, r4
   18bcc:	b	18bd4 <flatcc_json_parser_skip_constant@@Base+0xc0>
   18bd0:	mov	r6, r1
   18bd4:	mov	r0, r6
   18bd8:	pop	{r4, r5, r6, sl, fp, pc}

00018bdc <flatcc_json_parser_match_constant@@Base>:
   18bdc:	push	{r4, r5, r6, r7, fp, lr}
   18be0:	add	fp, sp, #16
   18be4:	ldr	r7, [fp, #8]
   18be8:	mov	r4, r1
   18bec:	sub	r1, r2, r1
   18bf0:	cmp	r1, r3
   18bf4:	ble	18cf4 <flatcc_json_parser_match_constant@@Base+0x118>
   18bf8:	ldr	r1, [r0, #12]
   18bfc:	mov	r5, r2
   18c00:	add	r6, r4, r3
   18c04:	cmp	r1, #0
   18c08:	beq	18c8c <flatcc_json_parser_match_constant@@Base+0xb0>
   18c0c:	sub	r1, r5, r6
   18c10:	cmp	r1, #2
   18c14:	blt	18c3c <flatcc_json_parser_match_constant@@Base+0x60>
   18c18:	ldrb	r1, [r6]
   18c1c:	mov	r2, r6
   18c20:	cmp	r1, #32
   18c24:	bhi	18c4c <flatcc_json_parser_match_constant@@Base+0x70>
   18c28:	bne	18c3c <flatcc_json_parser_match_constant@@Base+0x60>
   18c2c:	mov	r2, r6
   18c30:	ldrb	r1, [r2, #1]!
   18c34:	cmp	r1, #32
   18c38:	bhi	18c4c <flatcc_json_parser_match_constant@@Base+0x70>
   18c3c:	mov	r1, r6
   18c40:	mov	r2, r5
   18c44:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   18c48:	mov	r2, r0
   18c4c:	cmp	r2, r5
   18c50:	beq	18d04 <flatcc_json_parser_match_constant@@Base+0x128>
   18c54:	cmp	r2, r6
   18c58:	beq	18d14 <flatcc_json_parser_match_constant@@Base+0x138>
   18c5c:	ldrsb	r0, [r2]
   18c60:	cmp	r0, #95	; 0x5f
   18c64:	beq	18c84 <flatcc_json_parser_match_constant@@Base+0xa8>
   18c68:	cmn	r0, #1
   18c6c:	ble	18c84 <flatcc_json_parser_match_constant@@Base+0xa8>
   18c70:	orr	r0, r0, #32
   18c74:	sub	r0, r0, #97	; 0x61
   18c78:	uxtb	r0, r0
   18c7c:	cmp	r0, #25
   18c80:	bhi	18d14 <flatcc_json_parser_match_constant@@Base+0x138>
   18c84:	mov	r0, #1
   18c88:	b	18cfc <flatcc_json_parser_match_constant@@Base+0x120>
   18c8c:	ldrb	r1, [r6]
   18c90:	cmp	r1, #92	; 0x5c
   18c94:	beq	18d3c <flatcc_json_parser_match_constant@@Base+0x160>
   18c98:	cmp	r1, #34	; 0x22
   18c9c:	beq	18cd0 <flatcc_json_parser_match_constant@@Base+0xf4>
   18ca0:	cmp	r1, #32
   18ca4:	bne	18cf4 <flatcc_json_parser_match_constant@@Base+0x118>
   18ca8:	add	r1, r4, r3
   18cac:	add	r1, r1, #1
   18cb0:	cmp	r5, r1
   18cb4:	beq	18d04 <flatcc_json_parser_match_constant@@Base+0x128>
   18cb8:	ldrb	r2, [r1], #1
   18cbc:	cmp	r2, #32
   18cc0:	beq	18cb0 <flatcc_json_parser_match_constant@@Base+0xd4>
   18cc4:	cmp	r2, #34	; 0x22
   18cc8:	bne	18d98 <flatcc_json_parser_match_constant@@Base+0x1bc>
   18ccc:	sub	r6, r1, #1
   18cd0:	mvn	r2, r6
   18cd4:	add	r1, r6, #1
   18cd8:	cmp	r2, #2
   18cdc:	blt	18d84 <flatcc_json_parser_match_constant@@Base+0x1a8>
   18ce0:	ldrb	r2, [r1]
   18ce4:	cmp	r2, #32
   18ce8:	bls	18d70 <flatcc_json_parser_match_constant@@Base+0x194>
   18cec:	mov	r2, r1
   18cf0:	b	18d90 <flatcc_json_parser_match_constant@@Base+0x1b4>
   18cf4:	mov	r0, #0
   18cf8:	mov	r2, r4
   18cfc:	str	r0, [r7]
   18d00:	b	18d34 <flatcc_json_parser_match_constant@@Base+0x158>
   18d04:	mov	r0, #0
   18d08:	str	r0, [r7]
   18d0c:	mov	r2, r5
   18d10:	b	18d34 <flatcc_json_parser_match_constant@@Base+0x158>
   18d14:	mov	r0, #0
   18d18:	str	r0, [r7]
   18d1c:	ldrb	r0, [r2]
   18d20:	cmp	r0, #44	; 0x2c
   18d24:	cmpne	r0, #93	; 0x5d
   18d28:	beq	18d34 <flatcc_json_parser_match_constant@@Base+0x158>
   18d2c:	cmp	r0, #125	; 0x7d
   18d30:	movne	r2, r4
   18d34:	mov	r0, r2
   18d38:	pop	{r4, r5, r6, r7, fp, pc}
   18d3c:	mov	r1, #0
   18d40:	str	r1, [r7]
   18d44:	ldr	r1, [r0, #24]
   18d48:	cmp	r1, #0
   18d4c:	bne	18d0c <flatcc_json_parser_match_constant@@Base+0x130>
   18d50:	str	r6, [r0, #36]	; 0x24
   18d54:	add	r3, r6, #1
   18d58:	mov	r1, #18
   18d5c:	ldr	r2, [r0, #4]
   18d60:	sub	r2, r3, r2
   18d64:	str	r2, [r0, #20]
   18d68:	str	r1, [r0, #24]
   18d6c:	b	18d0c <flatcc_json_parser_match_constant@@Base+0x130>
   18d70:	bne	18d84 <flatcc_json_parser_match_constant@@Base+0x1a8>
   18d74:	ldrb	r2, [r6, #2]!
   18d78:	cmp	r2, #32
   18d7c:	mov	r2, r6
   18d80:	bhi	18d90 <flatcc_json_parser_match_constant@@Base+0x1b4>
   18d84:	mov	r2, #0
   18d88:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   18d8c:	mov	r2, r0
   18d90:	mov	r0, #0
   18d94:	b	18cfc <flatcc_json_parser_match_constant@@Base+0x120>
   18d98:	mov	r0, #1
   18d9c:	sub	r2, r1, #1
   18da0:	b	18cfc <flatcc_json_parser_match_constant@@Base+0x120>

00018da4 <flatcc_json_parser_unmatched_symbol@@Base>:
   18da4:	push	{r4, r5, r6, sl, fp, lr}
   18da8:	add	fp, sp, #16
   18dac:	mov	r6, r0
   18db0:	ldrb	r0, [r0, #8]
   18db4:	mov	r4, r2
   18db8:	tst	r0, #1
   18dbc:	bne	18de4 <flatcc_json_parser_unmatched_symbol@@Base+0x40>
   18dc0:	ldr	r0, [r6, #24]
   18dc4:	cmp	r0, #0
   18dc8:	bne	18fb8 <flatcc_json_parser_unmatched_symbol@@Base+0x214>
   18dcc:	str	r1, [r6, #36]	; 0x24
   18dd0:	add	r1, r1, #1
   18dd4:	mov	r0, #13
   18dd8:	ldr	r2, [r6, #4]
   18ddc:	sub	r1, r1, r2
   18de0:	b	18fb0 <flatcc_json_parser_unmatched_symbol@@Base+0x20c>
   18de4:	ldr	r0, [r6, #12]
   18de8:	cmp	r0, #0
   18dec:	beq	18e6c <flatcc_json_parser_unmatched_symbol@@Base+0xc8>
   18df0:	cmp	r1, r4
   18df4:	beq	18f0c <flatcc_json_parser_unmatched_symbol@@Base+0x168>
   18df8:	ldrb	r3, [r1]
   18dfc:	cmp	r3, #33	; 0x21
   18e00:	bcc	18f0c <flatcc_json_parser_unmatched_symbol@@Base+0x168>
   18e04:	add	r0, r1, #1
   18e08:	uxtb	r2, r3
   18e0c:	cmp	r2, #46	; 0x2e
   18e10:	cmpne	r2, #95	; 0x5f
   18e14:	bne	18e34 <flatcc_json_parser_unmatched_symbol@@Base+0x90>
   18e18:	cmp	r4, r0
   18e1c:	beq	18ecc <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   18e20:	ldrb	r3, [r0], #1
   18e24:	add	r1, r1, #1
   18e28:	cmp	r3, #33	; 0x21
   18e2c:	bcs	18e08 <flatcc_json_parser_unmatched_symbol@@Base+0x64>
   18e30:	b	18ed0 <flatcc_json_parser_unmatched_symbol@@Base+0x12c>
   18e34:	sxtb	r5, r3
   18e38:	cmp	r5, #0
   18e3c:	blt	18e18 <flatcc_json_parser_unmatched_symbol@@Base+0x74>
   18e40:	sub	r5, r3, #48	; 0x30
   18e44:	uxtb	r5, r5
   18e48:	cmp	r5, #9
   18e4c:	bls	18e18 <flatcc_json_parser_unmatched_symbol@@Base+0x74>
   18e50:	orr	r3, r3, #32
   18e54:	sub	r3, r3, #97	; 0x61
   18e58:	uxtb	r3, r3
   18e5c:	cmp	r3, #26
   18e60:	bcc	18e18 <flatcc_json_parser_unmatched_symbol@@Base+0x74>
   18e64:	sub	r1, r0, #1
   18e68:	b	18ed0 <flatcc_json_parser_unmatched_symbol@@Base+0x12c>
   18e6c:	cmp	r1, r4
   18e70:	beq	18eac <flatcc_json_parser_unmatched_symbol@@Base+0x108>
   18e74:	ldrb	r0, [r1]
   18e78:	cmp	r0, #92	; 0x5c
   18e7c:	beq	18e8c <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
   18e80:	cmp	r0, #34	; 0x22
   18e84:	bne	18e9c <flatcc_json_parser_unmatched_symbol@@Base+0xf8>
   18e88:	b	18ec4 <flatcc_json_parser_unmatched_symbol@@Base+0x120>
   18e8c:	sub	r0, r4, r1
   18e90:	cmp	r0, #2
   18e94:	blt	18eac <flatcc_json_parser_unmatched_symbol@@Base+0x108>
   18e98:	add	r1, r1, #1
   18e9c:	add	r1, r1, #1
   18ea0:	cmp	r1, r4
   18ea4:	bne	18e74 <flatcc_json_parser_unmatched_symbol@@Base+0xd0>
   18ea8:	mov	r1, r4
   18eac:	ldr	r0, [r6, #24]
   18eb0:	mov	r2, r4
   18eb4:	cmp	r0, #0
   18eb8:	bne	18f10 <flatcc_json_parser_unmatched_symbol@@Base+0x16c>
   18ebc:	mov	r0, #20
   18ec0:	b	18eec <flatcc_json_parser_unmatched_symbol@@Base+0x148>
   18ec4:	add	r2, r1, #1
   18ec8:	b	18f10 <flatcc_json_parser_unmatched_symbol@@Base+0x16c>
   18ecc:	mov	r1, r4
   18ed0:	cmp	r2, #46	; 0x2e
   18ed4:	bne	18f0c <flatcc_json_parser_unmatched_symbol@@Base+0x168>
   18ed8:	ldr	r0, [r6, #24]
   18edc:	mov	r2, r4
   18ee0:	cmp	r0, #0
   18ee4:	bne	18f10 <flatcc_json_parser_unmatched_symbol@@Base+0x16c>
   18ee8:	mov	r0, #5
   18eec:	str	r1, [r6, #36]	; 0x24
   18ef0:	add	r1, r1, #1
   18ef4:	ldr	r2, [r6, #4]
   18ef8:	sub	r1, r1, r2
   18efc:	mov	r2, r4
   18f00:	str	r1, [r6, #20]
   18f04:	str	r0, [r6, #24]
   18f08:	b	18f10 <flatcc_json_parser_unmatched_symbol@@Base+0x16c>
   18f0c:	mov	r2, r1
   18f10:	sub	r0, r4, r2
   18f14:	cmp	r0, #2
   18f18:	blt	18f44 <flatcc_json_parser_unmatched_symbol@@Base+0x1a0>
   18f1c:	ldrb	r0, [r2]
   18f20:	cmp	r0, #32
   18f24:	bls	18f30 <flatcc_json_parser_unmatched_symbol@@Base+0x18c>
   18f28:	mov	r3, r2
   18f2c:	b	18f58 <flatcc_json_parser_unmatched_symbol@@Base+0x1b4>
   18f30:	bne	18f44 <flatcc_json_parser_unmatched_symbol@@Base+0x1a0>
   18f34:	mov	r3, r2
   18f38:	ldrb	r0, [r3, #1]!
   18f3c:	cmp	r0, #32
   18f40:	bhi	18f58 <flatcc_json_parser_unmatched_symbol@@Base+0x1b4>
   18f44:	mov	r1, r2
   18f48:	mov	r0, r6
   18f4c:	mov	r2, r4
   18f50:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   18f54:	mov	r3, r0
   18f58:	cmp	r3, r4
   18f5c:	beq	18f90 <flatcc_json_parser_unmatched_symbol@@Base+0x1ec>
   18f60:	ldrb	r0, [r3]
   18f64:	cmp	r0, #58	; 0x3a
   18f68:	bne	18f90 <flatcc_json_parser_unmatched_symbol@@Base+0x1ec>
   18f6c:	add	r1, r3, #1
   18f70:	sub	r0, r4, r1
   18f74:	cmp	r0, #2
   18f78:	blt	18fd0 <flatcc_json_parser_unmatched_symbol@@Base+0x22c>
   18f7c:	ldrb	r0, [r1]
   18f80:	cmp	r0, #32
   18f84:	bls	18fc0 <flatcc_json_parser_unmatched_symbol@@Base+0x21c>
   18f88:	mov	r3, r1
   18f8c:	b	18fe0 <flatcc_json_parser_unmatched_symbol@@Base+0x23c>
   18f90:	ldr	r0, [r6, #24]
   18f94:	cmp	r0, #0
   18f98:	bne	18fb8 <flatcc_json_parser_unmatched_symbol@@Base+0x214>
   18f9c:	str	r3, [r6, #36]	; 0x24
   18fa0:	add	r2, r3, #1
   18fa4:	mov	r0, #4
   18fa8:	ldr	r1, [r6, #4]
   18fac:	sub	r1, r2, r1
   18fb0:	str	r1, [r6, #20]
   18fb4:	str	r0, [r6, #24]
   18fb8:	mov	r0, r4
   18fbc:	pop	{r4, r5, r6, sl, fp, pc}
   18fc0:	bne	18fd0 <flatcc_json_parser_unmatched_symbol@@Base+0x22c>
   18fc4:	ldrb	r0, [r3, #2]!
   18fc8:	cmp	r0, #32
   18fcc:	bhi	18fe0 <flatcc_json_parser_unmatched_symbol@@Base+0x23c>
   18fd0:	mov	r0, r6
   18fd4:	mov	r2, r4
   18fd8:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   18fdc:	mov	r3, r0
   18fe0:	mov	r0, r6
   18fe4:	mov	r1, r3
   18fe8:	mov	r2, r4
   18fec:	pop	{r4, r5, r6, sl, fp, lr}
   18ff0:	b	18ff4 <flatcc_json_parser_generic_json@@Base>

00018ff4 <flatcc_json_parser_generic_json@@Base>:
   18ff4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ff8:	add	fp, sp, #28
   18ffc:	sub	sp, sp, #532	; 0x214
   19000:	mov	r7, r1
   19004:	cmp	r1, r2
   19008:	beq	19a0c <flatcc_json_parser_generic_json@@Base+0xa18>
   1900c:	mov	r5, r0
   19010:	add	r0, r2, #1
   19014:	add	r1, sp, #16
   19018:	mov	r4, r2
   1901c:	mov	sl, #0
   19020:	str	r0, [sp]
   19024:	add	r0, r5, #36	; 0x24
   19028:	sub	r9, r1, #1
   1902c:	add	r6, r5, #4
   19030:	add	r8, r5, #24
   19034:	str	r0, [sp, #8]
   19038:	add	r0, r5, #20
   1903c:	str	r0, [sp, #4]
   19040:	mov	r0, r1
   19044:	cmp	sl, #0
   19048:	beq	192bc <flatcc_json_parser_generic_json@@Base+0x2c8>
   1904c:	ldrb	r0, [r0, #-1]
   19050:	cmp	r0, #125	; 0x7d
   19054:	bne	192bc <flatcc_json_parser_generic_json@@Base+0x2c8>
   19058:	ldrb	r0, [r7]
   1905c:	cmp	r0, #46	; 0x2e
   19060:	beq	190c0 <flatcc_json_parser_generic_json@@Base+0xcc>
   19064:	cmp	r0, #34	; 0x22
   19068:	bne	19108 <flatcc_json_parser_generic_json@@Base+0x114>
   1906c:	mov	r0, #0
   19070:	mov	r2, r4
   19074:	str	r0, [r5, #12]
   19078:	add	r0, r7, #1
   1907c:	cmp	r0, r4
   19080:	beq	191e8 <flatcc_json_parser_generic_json@@Base+0x1f4>
   19084:	ldrb	r1, [r0]
   19088:	cmp	r1, #92	; 0x5c
   1908c:	beq	1909c <flatcc_json_parser_generic_json@@Base+0xa8>
   19090:	cmp	r1, #34	; 0x22
   19094:	bne	190ac <flatcc_json_parser_generic_json@@Base+0xb8>
   19098:	b	19190 <flatcc_json_parser_generic_json@@Base+0x19c>
   1909c:	sub	r1, r4, r0
   190a0:	cmp	r1, #2
   190a4:	blt	191e4 <flatcc_json_parser_generic_json@@Base+0x1f0>
   190a8:	add	r0, r0, #1
   190ac:	add	r0, r0, #1
   190b0:	cmp	r0, r4
   190b4:	bne	19084 <flatcc_json_parser_generic_json@@Base+0x90>
   190b8:	mov	r2, r4
   190bc:	b	191e8 <flatcc_json_parser_generic_json@@Base+0x1f4>
   190c0:	ldr	r0, [r8]
   190c4:	cmp	r0, #0
   190c8:	bne	190f0 <flatcc_json_parser_generic_json@@Base+0xfc>
   190cc:	mov	r0, #5
   190d0:	add	r1, r7, #1
   190d4:	str	r0, [r8]
   190d8:	ldr	r0, [r6]
   190dc:	sub	r0, r1, r0
   190e0:	ldr	r1, [sp, #4]
   190e4:	str	r0, [r1]
   190e8:	ldr	r0, [sp, #8]
   190ec:	str	r7, [r0]
   190f0:	ldr	r0, [r5, #12]
   190f4:	mov	r2, r4
   190f8:	mov	r1, r4
   190fc:	cmp	r0, #0
   19100:	bne	19220 <flatcc_json_parser_generic_json@@Base+0x22c>
   19104:	b	191e8 <flatcc_json_parser_generic_json@@Base+0x1f4>
   19108:	mov	r0, #1
   1910c:	cmp	r7, r4
   19110:	mov	r1, r4
   19114:	str	r0, [r5, #12]
   19118:	beq	19220 <flatcc_json_parser_generic_json@@Base+0x22c>
   1911c:	ldrb	r2, [r7]
   19120:	cmp	r2, #33	; 0x21
   19124:	bcc	191dc <flatcc_json_parser_generic_json@@Base+0x1e8>
   19128:	add	r0, r7, #1
   1912c:	uxtb	r1, r2
   19130:	cmp	r1, #46	; 0x2e
   19134:	cmpne	r1, #95	; 0x5f
   19138:	bne	19158 <flatcc_json_parser_generic_json@@Base+0x164>
   1913c:	cmp	r4, r0
   19140:	beq	19198 <flatcc_json_parser_generic_json@@Base+0x1a4>
   19144:	ldrb	r2, [r0], #1
   19148:	add	r7, r7, #1
   1914c:	cmp	r2, #33	; 0x21
   19150:	bcs	1912c <flatcc_json_parser_generic_json@@Base+0x138>
   19154:	b	1919c <flatcc_json_parser_generic_json@@Base+0x1a8>
   19158:	sxtb	r3, r2
   1915c:	cmp	r3, #0
   19160:	blt	1913c <flatcc_json_parser_generic_json@@Base+0x148>
   19164:	sub	r3, r2, #48	; 0x30
   19168:	uxtb	r3, r3
   1916c:	cmp	r3, #9
   19170:	bls	1913c <flatcc_json_parser_generic_json@@Base+0x148>
   19174:	orr	r2, r2, #32
   19178:	sub	r2, r2, #97	; 0x61
   1917c:	uxtb	r2, r2
   19180:	cmp	r2, #26
   19184:	bcc	1913c <flatcc_json_parser_generic_json@@Base+0x148>
   19188:	sub	r7, r0, #1
   1918c:	b	1919c <flatcc_json_parser_generic_json@@Base+0x1a8>
   19190:	add	r1, r0, #1
   19194:	b	19220 <flatcc_json_parser_generic_json@@Base+0x22c>
   19198:	mov	r7, r4
   1919c:	cmp	r1, #46	; 0x2e
   191a0:	bne	191dc <flatcc_json_parser_generic_json@@Base+0x1e8>
   191a4:	ldr	r0, [r8]
   191a8:	mov	r1, r4
   191ac:	cmp	r0, #0
   191b0:	bne	19220 <flatcc_json_parser_generic_json@@Base+0x22c>
   191b4:	mov	r0, #5
   191b8:	add	r1, r7, #1
   191bc:	str	r0, [r8]
   191c0:	ldr	r0, [r6]
   191c4:	sub	r0, r1, r0
   191c8:	ldr	r1, [sp, #4]
   191cc:	str	r0, [r1]
   191d0:	ldr	r0, [sp, #8]
   191d4:	str	r7, [r0]
   191d8:	b	1921c <flatcc_json_parser_generic_json@@Base+0x228>
   191dc:	mov	r1, r7
   191e0:	b	19220 <flatcc_json_parser_generic_json@@Base+0x22c>
   191e4:	mov	r2, r0
   191e8:	ldr	r0, [r8]
   191ec:	mov	r1, r4
   191f0:	cmp	r0, #0
   191f4:	bne	19220 <flatcc_json_parser_generic_json@@Base+0x22c>
   191f8:	mov	r0, #20
   191fc:	add	r1, r2, #1
   19200:	str	r0, [r8]
   19204:	ldr	r0, [r6]
   19208:	sub	r0, r1, r0
   1920c:	ldr	r1, [sp, #4]
   19210:	str	r0, [r1]
   19214:	ldr	r0, [sp, #8]
   19218:	str	r2, [r0]
   1921c:	mov	r1, r4
   19220:	sub	r0, r4, r1
   19224:	cmp	r0, #2
   19228:	blt	19254 <flatcc_json_parser_generic_json@@Base+0x260>
   1922c:	ldrb	r0, [r1]
   19230:	cmp	r0, #32
   19234:	bls	19240 <flatcc_json_parser_generic_json@@Base+0x24c>
   19238:	mov	r7, r1
   1923c:	b	19264 <flatcc_json_parser_generic_json@@Base+0x270>
   19240:	bne	19254 <flatcc_json_parser_generic_json@@Base+0x260>
   19244:	mov	r7, r1
   19248:	ldrb	r0, [r7, #1]!
   1924c:	cmp	r0, #32
   19250:	bhi	19264 <flatcc_json_parser_generic_json@@Base+0x270>
   19254:	mov	r0, r5
   19258:	mov	r2, r4
   1925c:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   19260:	mov	r7, r0
   19264:	cmp	r7, r4
   19268:	beq	19a7c <flatcc_json_parser_generic_json@@Base+0xa88>
   1926c:	ldrb	r0, [r7]
   19270:	cmp	r0, #58	; 0x3a
   19274:	bne	19a94 <flatcc_json_parser_generic_json@@Base+0xaa0>
   19278:	add	r1, r7, #1
   1927c:	sub	r0, r4, r1
   19280:	cmp	r0, #2
   19284:	blt	192ac <flatcc_json_parser_generic_json@@Base+0x2b8>
   19288:	ldrb	r0, [r1]
   1928c:	cmp	r0, #32
   19290:	bls	1929c <flatcc_json_parser_generic_json@@Base+0x2a8>
   19294:	mov	r7, r1
   19298:	b	192c0 <flatcc_json_parser_generic_json@@Base+0x2cc>
   1929c:	bne	192ac <flatcc_json_parser_generic_json@@Base+0x2b8>
   192a0:	ldrb	r0, [r7, #2]!
   192a4:	cmp	r0, #32
   192a8:	bhi	192c0 <flatcc_json_parser_generic_json@@Base+0x2cc>
   192ac:	mov	r0, r5
   192b0:	mov	r2, r4
   192b4:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   192b8:	mov	r7, r0
   192bc:	ldrb	r0, [r7]
   192c0:	sub	r1, r0, #48	; 0x30
   192c4:	cmp	r1, #10
   192c8:	bcs	1933c <flatcc_json_parser_generic_json@@Base+0x348>
   192cc:	cmp	r7, r4
   192d0:	beq	19700 <flatcc_json_parser_generic_json@@Base+0x70c>
   192d4:	cmp	r0, #45	; 0x2d
   192d8:	bne	192ec <flatcc_json_parser_generic_json@@Base+0x2f8>
   192dc:	add	r7, r7, #1
   192e0:	cmp	r7, r4
   192e4:	beq	195b8 <flatcc_json_parser_generic_json@@Base+0x5c4>
   192e8:	ldrb	r0, [r7]
   192ec:	cmp	r0, #48	; 0x30
   192f0:	bne	19358 <flatcc_json_parser_generic_json@@Base+0x364>
   192f4:	add	r1, r7, #1
   192f8:	cmp	r1, r4
   192fc:	mov	r2, r4
   19300:	beq	195d0 <flatcc_json_parser_generic_json@@Base+0x5dc>
   19304:	ldrb	r0, [r1]
   19308:	cmp	r0, #46	; 0x2e
   1930c:	bne	19508 <flatcc_json_parser_generic_json@@Base+0x514>
   19310:	mov	r0, r1
   19314:	ldrb	r2, [r0, #1]!
   19318:	sub	r2, r2, #48	; 0x30
   1931c:	uxtb	r2, r2
   19320:	cmp	r2, #10
   19324:	bcc	194d4 <flatcc_json_parser_generic_json@@Base+0x4e0>
   19328:	ldr	r1, [r8]
   1932c:	cmp	r1, #0
   19330:	bne	19700 <flatcc_json_parser_generic_json@@Base+0x70c>
   19334:	mov	r1, #6
   19338:	b	196e0 <flatcc_json_parser_generic_json@@Base+0x6ec>
   1933c:	cmp	r0, #90	; 0x5a
   19340:	bgt	1939c <flatcc_json_parser_generic_json@@Base+0x3a8>
   19344:	cmp	r0, #34	; 0x22
   19348:	beq	1940c <flatcc_json_parser_generic_json@@Base+0x418>
   1934c:	cmp	r0, #45	; 0x2d
   19350:	beq	192cc <flatcc_json_parser_generic_json@@Base+0x2d8>
   19354:	b	194b4 <flatcc_json_parser_generic_json@@Base+0x4c0>
   19358:	sub	r0, r0, #49	; 0x31
   1935c:	uxtb	r0, r0
   19360:	cmp	r0, #8
   19364:	bls	193e4 <flatcc_json_parser_generic_json@@Base+0x3f0>
   19368:	ldr	r0, [r8]
   1936c:	cmp	r0, #0
   19370:	bne	19700 <flatcc_json_parser_generic_json@@Base+0x70c>
   19374:	mov	r0, #6
   19378:	add	r1, r7, #1
   1937c:	str	r0, [r8]
   19380:	ldr	r0, [r6]
   19384:	sub	r0, r1, r0
   19388:	ldr	r1, [sp, #4]
   1938c:	str	r0, [r1]
   19390:	ldr	r0, [sp, #8]
   19394:	str	r7, [r0]
   19398:	b	19700 <flatcc_json_parser_generic_json@@Base+0x70c>
   1939c:	cmp	r0, #91	; 0x5b
   193a0:	beq	1947c <flatcc_json_parser_generic_json@@Base+0x488>
   193a4:	cmp	r0, #123	; 0x7b
   193a8:	bne	194b4 <flatcc_json_parser_generic_json@@Base+0x4c0>
   193ac:	cmp	sl, #512	; 0x200
   193b0:	beq	19aa8 <flatcc_json_parser_generic_json@@Base+0xab4>
   193b4:	add	r0, sp, #16
   193b8:	mov	r1, #125	; 0x7d
   193bc:	strb	r1, [r0, sl]
   193c0:	add	r1, r7, #1
   193c4:	sub	r0, r4, r1
   193c8:	cmp	r0, #2
   193cc:	blt	19664 <flatcc_json_parser_generic_json@@Base+0x670>
   193d0:	ldrb	r0, [r1]
   193d4:	cmp	r0, #32
   193d8:	bls	19654 <flatcc_json_parser_generic_json@@Base+0x660>
   193dc:	mov	r7, r1
   193e0:	b	19674 <flatcc_json_parser_generic_json@@Base+0x680>
   193e4:	add	r0, r7, #1
   193e8:	cmp	r4, r0
   193ec:	beq	195cc <flatcc_json_parser_generic_json@@Base+0x5d8>
   193f0:	ldrb	r1, [r0], #1
   193f4:	sub	r1, r1, #48	; 0x30
   193f8:	uxtb	r1, r1
   193fc:	cmp	r1, #10
   19400:	bcc	193e8 <flatcc_json_parser_generic_json@@Base+0x3f4>
   19404:	sub	r1, r0, #1
   19408:	b	192f8 <flatcc_json_parser_generic_json@@Base+0x304>
   1940c:	cmp	r7, r4
   19410:	beq	19604 <flatcc_json_parser_generic_json@@Base+0x610>
   19414:	add	r1, r7, #1
   19418:	mov	r0, r4
   1941c:	add	r7, sp, #12
   19420:	cmp	r1, r4
   19424:	beq	196d0 <flatcc_json_parser_generic_json@@Base+0x6dc>
   19428:	ldrb	r0, [r1]
   1942c:	cmp	r0, #34	; 0x22
   19430:	beq	19638 <flatcc_json_parser_generic_json@@Base+0x644>
   19434:	mov	r0, r5
   19438:	mov	r2, r4
   1943c:	bl	186b4 <flatcc_json_parser_string_part@@Base>
   19440:	mov	r1, r0
   19444:	cmp	r0, r4
   19448:	beq	19458 <flatcc_json_parser_generic_json@@Base+0x464>
   1944c:	ldrb	r0, [r1]
   19450:	cmp	r0, #34	; 0x22
   19454:	beq	19638 <flatcc_json_parser_generic_json@@Base+0x644>
   19458:	mov	r0, r5
   1945c:	mov	r2, r4
   19460:	mov	r3, r7
   19464:	bl	18808 <flatcc_json_parser_string_escape@@Base>
   19468:	mov	r1, r0
   1946c:	cmp	r0, r4
   19470:	bne	19428 <flatcc_json_parser_generic_json@@Base+0x434>
   19474:	mov	r0, r4
   19478:	b	196d0 <flatcc_json_parser_generic_json@@Base+0x6dc>
   1947c:	cmp	sl, #512	; 0x200
   19480:	beq	19aa8 <flatcc_json_parser_generic_json@@Base+0xab4>
   19484:	add	r0, sp, #16
   19488:	mov	r1, #93	; 0x5d
   1948c:	strb	r1, [r0, sl]
   19490:	add	r1, r7, #1
   19494:	sub	r0, r4, r1
   19498:	cmp	r0, #2
   1949c:	blt	1969c <flatcc_json_parser_generic_json@@Base+0x6a8>
   194a0:	ldrb	r0, [r1]
   194a4:	cmp	r0, #32
   194a8:	bls	1968c <flatcc_json_parser_generic_json@@Base+0x698>
   194ac:	mov	r7, r1
   194b0:	b	196ac <flatcc_json_parser_generic_json@@Base+0x6b8>
   194b4:	mov	r0, r5
   194b8:	mov	r1, r7
   194bc:	mov	r2, r4
   194c0:	bl	18b14 <flatcc_json_parser_skip_constant@@Base>
   194c4:	mov	r1, r0
   194c8:	cmp	r7, r0
   194cc:	bne	19704 <flatcc_json_parser_generic_json@@Base+0x710>
   194d0:	b	19abc <flatcc_json_parser_generic_json@@Base+0xac8>
   194d4:	add	r1, r1, #2
   194d8:	mov	r2, r4
   194dc:	cmp	r1, r4
   194e0:	beq	195d0 <flatcc_json_parser_generic_json@@Base+0x5dc>
   194e4:	ldrb	r0, [r1]
   194e8:	sub	r2, r0, #48	; 0x30
   194ec:	uxtb	r2, r2
   194f0:	cmp	r2, #9
   194f4:	bhi	19508 <flatcc_json_parser_generic_json@@Base+0x514>
   194f8:	add	r1, r1, #1
   194fc:	cmp	r4, r1
   19500:	bne	194e4 <flatcc_json_parser_generic_json@@Base+0x4f0>
   19504:	b	195cc <flatcc_json_parser_generic_json@@Base+0x5d8>
   19508:	cmp	r1, r4
   1950c:	mov	r2, r4
   19510:	beq	195d0 <flatcc_json_parser_generic_json@@Base+0x5dc>
   19514:	orr	r2, r0, #32
   19518:	cmp	r2, #101	; 0x65
   1951c:	bne	1957c <flatcc_json_parser_generic_json@@Base+0x588>
   19520:	add	r0, r1, #1
   19524:	cmp	r0, r4
   19528:	beq	195b8 <flatcc_json_parser_generic_json@@Base+0x5c4>
   1952c:	ldrb	r2, [r0]
   19530:	cmp	r2, #45	; 0x2d
   19534:	cmpne	r2, #43	; 0x2b
   19538:	addeq	r0, r1, #2
   1953c:	cmp	r0, r4
   19540:	beq	19328 <flatcc_json_parser_generic_json@@Base+0x334>
   19544:	ldrb	r1, [r0]
   19548:	sub	r1, r1, #48	; 0x30
   1954c:	uxtb	r1, r1
   19550:	cmp	r1, #9
   19554:	bhi	19328 <flatcc_json_parser_generic_json@@Base+0x334>
   19558:	add	r1, r0, #1
   1955c:	cmp	r4, r1
   19560:	beq	195cc <flatcc_json_parser_generic_json@@Base+0x5d8>
   19564:	ldrb	r0, [r1], #1
   19568:	sub	r2, r0, #48	; 0x30
   1956c:	uxtb	r2, r2
   19570:	cmp	r2, #10
   19574:	bcc	1955c <flatcc_json_parser_generic_json@@Base+0x568>
   19578:	sub	r1, r1, #1
   1957c:	cmp	r1, r4
   19580:	mov	r2, r4
   19584:	beq	195d0 <flatcc_json_parser_generic_json@@Base+0x5dc>
   19588:	cmp	r0, #43	; 0x2b
   1958c:	bgt	199d4 <flatcc_json_parser_generic_json@@Base+0x9e0>
   19590:	sub	r0, r0, #9
   19594:	cmp	r0, #23
   19598:	bhi	19a04 <flatcc_json_parser_generic_json@@Base+0xa10>
   1959c:	movw	r3, #23
   195a0:	mov	r2, #1
   195a4:	movt	r3, #128	; 0x80
   195a8:	tst	r3, r2, lsl r0
   195ac:	mov	r2, r1
   195b0:	bne	19704 <flatcc_json_parser_generic_json@@Base+0x710>
   195b4:	b	195d0 <flatcc_json_parser_generic_json@@Base+0x5dc>
   195b8:	ldr	r0, [r8]
   195bc:	cmp	r0, #0
   195c0:	bne	19700 <flatcc_json_parser_generic_json@@Base+0x70c>
   195c4:	mov	r0, #6
   195c8:	b	19614 <flatcc_json_parser_generic_json@@Base+0x620>
   195cc:	mov	r2, r4
   195d0:	ldr	r0, [r8]
   195d4:	cmp	r0, #0
   195d8:	bne	19700 <flatcc_json_parser_generic_json@@Base+0x70c>
   195dc:	mov	r0, #6
   195e0:	add	r1, r2, #1
   195e4:	str	r0, [r8]
   195e8:	ldr	r0, [r6]
   195ec:	sub	r0, r1, r0
   195f0:	ldr	r1, [sp, #4]
   195f4:	str	r0, [r1]
   195f8:	ldr	r0, [sp, #8]
   195fc:	str	r2, [r0]
   19600:	b	19700 <flatcc_json_parser_generic_json@@Base+0x70c>
   19604:	ldr	r0, [r8]
   19608:	cmp	r0, #0
   1960c:	bne	19700 <flatcc_json_parser_generic_json@@Base+0x70c>
   19610:	mov	r0, #16
   19614:	str	r0, [r8]
   19618:	ldr	r1, [sp]
   1961c:	ldr	r0, [r6]
   19620:	sub	r0, r1, r0
   19624:	ldr	r1, [sp, #4]
   19628:	str	r0, [r1]
   1962c:	ldr	r0, [sp, #8]
   19630:	str	r4, [r0]
   19634:	b	19700 <flatcc_json_parser_generic_json@@Base+0x70c>
   19638:	cmp	r1, r4
   1963c:	beq	196cc <flatcc_json_parser_generic_json@@Base+0x6d8>
   19640:	ldrb	r0, [r1]
   19644:	cmp	r0, #34	; 0x22
   19648:	bne	196cc <flatcc_json_parser_generic_json@@Base+0x6d8>
   1964c:	add	r1, r1, #1
   19650:	b	19704 <flatcc_json_parser_generic_json@@Base+0x710>
   19654:	bne	19664 <flatcc_json_parser_generic_json@@Base+0x670>
   19658:	ldrb	r0, [r7, #2]!
   1965c:	cmp	r0, #32
   19660:	bhi	19674 <flatcc_json_parser_generic_json@@Base+0x680>
   19664:	mov	r0, r5
   19668:	mov	r2, r4
   1966c:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   19670:	mov	r7, r0
   19674:	cmp	r7, r4
   19678:	beq	19a6c <flatcc_json_parser_generic_json@@Base+0xa78>
   1967c:	ldrb	r0, [r7]
   19680:	add	sl, sl, #1
   19684:	cmp	r0, #125	; 0x7d
   19688:	b	196c0 <flatcc_json_parser_generic_json@@Base+0x6cc>
   1968c:	bne	1969c <flatcc_json_parser_generic_json@@Base+0x6a8>
   19690:	ldrb	r0, [r7, #2]!
   19694:	cmp	r0, #32
   19698:	bhi	196ac <flatcc_json_parser_generic_json@@Base+0x6b8>
   1969c:	mov	r0, r5
   196a0:	mov	r2, r4
   196a4:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   196a8:	mov	r7, r0
   196ac:	cmp	r7, r4
   196b0:	beq	19a6c <flatcc_json_parser_generic_json@@Base+0xa78>
   196b4:	ldrb	r0, [r7]
   196b8:	add	sl, sl, #1
   196bc:	cmp	r0, #93	; 0x5d
   196c0:	mov	r1, r7
   196c4:	beq	19704 <flatcc_json_parser_generic_json@@Base+0x710>
   196c8:	b	199c0 <flatcc_json_parser_generic_json@@Base+0x9cc>
   196cc:	mov	r0, r1
   196d0:	ldr	r1, [r8]
   196d4:	cmp	r1, #0
   196d8:	bne	19700 <flatcc_json_parser_generic_json@@Base+0x70c>
   196dc:	mov	r1, #20
   196e0:	str	r1, [r8]
   196e4:	add	r2, r0, #1
   196e8:	ldr	r1, [r6]
   196ec:	sub	r1, r2, r1
   196f0:	ldr	r2, [sp, #4]
   196f4:	str	r1, [r2]
   196f8:	ldr	r1, [sp, #8]
   196fc:	str	r0, [r1]
   19700:	mov	r1, r4
   19704:	subs	r2, r1, r4
   19708:	mov	r3, sl
   1970c:	movwne	r2, #1
   19710:	cmp	sl, #0
   19714:	movwne	r3, #1
   19718:	cmpne	r1, r4
   1971c:	beq	19a14 <flatcc_json_parser_generic_json@@Base+0xa20>
   19720:	ldrb	r2, [r9, sl]
   19724:	sub	r0, r4, r1
   19728:	cmp	r2, #93	; 0x5d
   1972c:	bne	1974c <flatcc_json_parser_generic_json@@Base+0x758>
   19730:	cmp	r0, #2
   19734:	blt	1977c <flatcc_json_parser_generic_json@@Base+0x788>
   19738:	ldrb	r0, [r1]
   1973c:	cmp	r0, #32
   19740:	bls	19768 <flatcc_json_parser_generic_json@@Base+0x774>
   19744:	mov	r7, r1
   19748:	b	1978c <flatcc_json_parser_generic_json@@Base+0x798>
   1974c:	cmp	r0, #2
   19750:	blt	197d8 <flatcc_json_parser_generic_json@@Base+0x7e4>
   19754:	ldrb	r0, [r1]
   19758:	cmp	r0, #32
   1975c:	bls	197c4 <flatcc_json_parser_generic_json@@Base+0x7d0>
   19760:	mov	r7, r1
   19764:	b	197e8 <flatcc_json_parser_generic_json@@Base+0x7f4>
   19768:	bne	1977c <flatcc_json_parser_generic_json@@Base+0x788>
   1976c:	mov	r7, r1
   19770:	ldrb	r0, [r7, #1]!
   19774:	cmp	r0, #32
   19778:	bhi	1978c <flatcc_json_parser_generic_json@@Base+0x798>
   1977c:	mov	r0, r5
   19780:	mov	r2, r4
   19784:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   19788:	mov	r7, r0
   1978c:	cmp	r7, r4
   19790:	mov	r1, r4
   19794:	beq	1995c <flatcc_json_parser_generic_json@@Base+0x968>
   19798:	ldrb	r0, [r7]
   1979c:	cmp	r0, #44	; 0x2c
   197a0:	beq	19844 <flatcc_json_parser_generic_json@@Base+0x850>
   197a4:	cmp	r0, #93	; 0x5d
   197a8:	beq	19910 <flatcc_json_parser_generic_json@@Base+0x91c>
   197ac:	ldr	r0, [r8]
   197b0:	mov	r1, r4
   197b4:	cmp	r0, #0
   197b8:	bne	1995c <flatcc_json_parser_generic_json@@Base+0x968>
   197bc:	mov	r0, #9
   197c0:	b	1981c <flatcc_json_parser_generic_json@@Base+0x828>
   197c4:	bne	197d8 <flatcc_json_parser_generic_json@@Base+0x7e4>
   197c8:	mov	r7, r1
   197cc:	ldrb	r0, [r7, #1]!
   197d0:	cmp	r0, #32
   197d4:	bhi	197e8 <flatcc_json_parser_generic_json@@Base+0x7f4>
   197d8:	mov	r0, r5
   197dc:	mov	r2, r4
   197e0:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   197e4:	mov	r7, r0
   197e8:	cmp	r7, r4
   197ec:	mov	r1, r4
   197f0:	beq	1995c <flatcc_json_parser_generic_json@@Base+0x968>
   197f4:	ldrb	r0, [r7]
   197f8:	cmp	r0, #44	; 0x2c
   197fc:	beq	19868 <flatcc_json_parser_generic_json@@Base+0x874>
   19800:	cmp	r0, #125	; 0x7d
   19804:	beq	19910 <flatcc_json_parser_generic_json@@Base+0x91c>
   19808:	ldr	r0, [r8]
   1980c:	mov	r1, r4
   19810:	cmp	r0, #0
   19814:	bne	1995c <flatcc_json_parser_generic_json@@Base+0x968>
   19818:	mov	r0, #10
   1981c:	str	r0, [r8]
   19820:	add	r1, r7, #1
   19824:	ldr	r0, [r6]
   19828:	sub	r0, r1, r0
   1982c:	ldr	r1, [sp, #4]
   19830:	str	r0, [r1]
   19834:	ldr	r0, [sp, #8]
   19838:	mov	r1, r4
   1983c:	str	r7, [r0]
   19840:	b	1995c <flatcc_json_parser_generic_json@@Base+0x968>
   19844:	add	r1, r7, #1
   19848:	sub	r0, r4, r1
   1984c:	cmp	r0, #2
   19850:	blt	1989c <flatcc_json_parser_generic_json@@Base+0x8a8>
   19854:	ldrb	r0, [r1]
   19858:	cmp	r0, #32
   1985c:	bls	1988c <flatcc_json_parser_generic_json@@Base+0x898>
   19860:	mov	r7, r1
   19864:	b	198ac <flatcc_json_parser_generic_json@@Base+0x8b8>
   19868:	add	r1, r7, #1
   1986c:	sub	r0, r4, r1
   19870:	cmp	r0, #2
   19874:	blt	198ec <flatcc_json_parser_generic_json@@Base+0x8f8>
   19878:	ldrb	r0, [r1]
   1987c:	cmp	r0, #32
   19880:	bls	198dc <flatcc_json_parser_generic_json@@Base+0x8e8>
   19884:	mov	r7, r1
   19888:	b	198fc <flatcc_json_parser_generic_json@@Base+0x908>
   1988c:	bne	1989c <flatcc_json_parser_generic_json@@Base+0x8a8>
   19890:	ldrb	r0, [r7, #2]!
   19894:	cmp	r0, #32
   19898:	bhi	198ac <flatcc_json_parser_generic_json@@Base+0x8b8>
   1989c:	mov	r0, r5
   198a0:	mov	r2, r4
   198a4:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   198a8:	mov	r7, r0
   198ac:	cmp	r7, r4
   198b0:	beq	198c4 <flatcc_json_parser_generic_json@@Base+0x8d0>
   198b4:	ldrb	r0, [r7]
   198b8:	cmp	r0, #93	; 0x5d
   198bc:	beq	19910 <flatcc_json_parser_generic_json@@Base+0x91c>
   198c0:	b	199c0 <flatcc_json_parser_generic_json@@Base+0x9cc>
   198c4:	ldr	r0, [r8]
   198c8:	mov	r1, r4
   198cc:	cmp	r0, #0
   198d0:	bne	1995c <flatcc_json_parser_generic_json@@Base+0x968>
   198d4:	mov	r0, #9
   198d8:	b	19998 <flatcc_json_parser_generic_json@@Base+0x9a4>
   198dc:	bne	198ec <flatcc_json_parser_generic_json@@Base+0x8f8>
   198e0:	ldrb	r0, [r7, #2]!
   198e4:	cmp	r0, #32
   198e8:	bhi	198fc <flatcc_json_parser_generic_json@@Base+0x908>
   198ec:	mov	r0, r5
   198f0:	mov	r2, r4
   198f4:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   198f8:	mov	r7, r0
   198fc:	cmp	r7, r4
   19900:	beq	19984 <flatcc_json_parser_generic_json@@Base+0x990>
   19904:	ldrb	r0, [r7]
   19908:	cmp	r0, #125	; 0x7d
   1990c:	bne	199c0 <flatcc_json_parser_generic_json@@Base+0x9cc>
   19910:	add	r2, r7, #1
   19914:	sub	r0, r4, r2
   19918:	cmp	r0, #2
   1991c:	blt	19948 <flatcc_json_parser_generic_json@@Base+0x954>
   19920:	ldrb	r0, [r2]
   19924:	cmp	r0, #32
   19928:	bls	19934 <flatcc_json_parser_generic_json@@Base+0x940>
   1992c:	mov	r1, r2
   19930:	b	1995c <flatcc_json_parser_generic_json@@Base+0x968>
   19934:	bne	19948 <flatcc_json_parser_generic_json@@Base+0x954>
   19938:	ldrb	r0, [r7, #2]!
   1993c:	cmp	r0, #32
   19940:	mov	r1, r7
   19944:	bhi	1995c <flatcc_json_parser_generic_json@@Base+0x968>
   19948:	mov	r1, r2
   1994c:	mov	r0, r5
   19950:	mov	r2, r4
   19954:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   19958:	mov	r1, r0
   1995c:	subs	r2, r1, r4
   19960:	sub	r0, sl, #1
   19964:	movwne	r2, #1
   19968:	subs	r3, sl, #1
   1996c:	movwne	r3, #1
   19970:	beq	19a18 <flatcc_json_parser_generic_json@@Base+0xa24>
   19974:	cmp	r1, r4
   19978:	mov	sl, r0
   1997c:	bne	19720 <flatcc_json_parser_generic_json@@Base+0x72c>
   19980:	b	19a18 <flatcc_json_parser_generic_json@@Base+0xa24>
   19984:	ldr	r0, [r8]
   19988:	mov	r1, r4
   1998c:	cmp	r0, #0
   19990:	bne	1995c <flatcc_json_parser_generic_json@@Base+0x968>
   19994:	mov	r0, #10
   19998:	str	r0, [r8]
   1999c:	ldr	r1, [sp]
   199a0:	ldr	r0, [r6]
   199a4:	sub	r0, r1, r0
   199a8:	ldr	r1, [sp, #4]
   199ac:	str	r0, [r1]
   199b0:	ldr	r0, [sp, #8]
   199b4:	mov	r1, r4
   199b8:	str	r4, [r0]
   199bc:	b	1995c <flatcc_json_parser_generic_json@@Base+0x968>
   199c0:	add	r0, sp, #16
   199c4:	cmp	r7, r4
   199c8:	add	r0, r0, sl
   199cc:	bne	19044 <flatcc_json_parser_generic_json@@Base+0x50>
   199d0:	b	19a6c <flatcc_json_parser_generic_json@@Base+0xa78>
   199d4:	cmp	r0, #92	; 0x5c
   199d8:	bgt	199ec <flatcc_json_parser_generic_json@@Base+0x9f8>
   199dc:	cmp	r0, #44	; 0x2c
   199e0:	beq	19704 <flatcc_json_parser_generic_json@@Base+0x710>
   199e4:	cmp	r0, #58	; 0x3a
   199e8:	b	199f8 <flatcc_json_parser_generic_json@@Base+0xa04>
   199ec:	cmp	r0, #93	; 0x5d
   199f0:	beq	19704 <flatcc_json_parser_generic_json@@Base+0x710>
   199f4:	cmp	r0, #125	; 0x7d
   199f8:	mov	r2, r1
   199fc:	beq	19704 <flatcc_json_parser_generic_json@@Base+0x710>
   19a00:	b	195d0 <flatcc_json_parser_generic_json@@Base+0x5dc>
   19a04:	mov	r2, r1
   19a08:	b	195d0 <flatcc_json_parser_generic_json@@Base+0x5dc>
   19a0c:	mov	r1, r7
   19a10:	b	19a70 <flatcc_json_parser_generic_json@@Base+0xa7c>
   19a14:	mov	r0, sl
   19a18:	cmp	r2, #0
   19a1c:	bne	19a70 <flatcc_json_parser_generic_json@@Base+0xa7c>
   19a20:	cmp	r3, #0
   19a24:	beq	19a70 <flatcc_json_parser_generic_json@@Base+0xa7c>
   19a28:	ldr	r1, [r8]
   19a2c:	cmp	r1, #0
   19a30:	bne	19a6c <flatcc_json_parser_generic_json@@Base+0xa78>
   19a34:	add	r1, sp, #16
   19a38:	add	r0, r1, r0
   19a3c:	mov	r1, #10
   19a40:	ldrb	r0, [r0, #-1]
   19a44:	cmp	r0, #93	; 0x5d
   19a48:	movweq	r1, #9
   19a4c:	str	r1, [r8]
   19a50:	ldr	r0, [r6]
   19a54:	ldr	r1, [sp]
   19a58:	sub	r0, r1, r0
   19a5c:	ldr	r1, [sp, #4]
   19a60:	str	r0, [r1]
   19a64:	ldr	r0, [sp, #8]
   19a68:	str	r4, [r0]
   19a6c:	mov	r1, r4
   19a70:	mov	r0, r1
   19a74:	sub	sp, fp, #28
   19a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a7c:	ldr	r0, [r8]
   19a80:	cmp	r0, #0
   19a84:	bne	19a6c <flatcc_json_parser_generic_json@@Base+0xa78>
   19a88:	mov	r0, #10
   19a8c:	str	r0, [r8]
   19a90:	b	19a50 <flatcc_json_parser_generic_json@@Base+0xa5c>
   19a94:	ldr	r0, [r8]
   19a98:	cmp	r0, #0
   19a9c:	bne	19a6c <flatcc_json_parser_generic_json@@Base+0xa78>
   19aa0:	mov	r0, #4
   19aa4:	b	19acc <flatcc_json_parser_generic_json@@Base+0xad8>
   19aa8:	ldr	r0, [r8]
   19aac:	cmp	r0, #0
   19ab0:	bne	19a6c <flatcc_json_parser_generic_json@@Base+0xa78>
   19ab4:	mov	r0, #2
   19ab8:	b	19acc <flatcc_json_parser_generic_json@@Base+0xad8>
   19abc:	ldr	r0, [r8]
   19ac0:	cmp	r0, #0
   19ac4:	bne	19a6c <flatcc_json_parser_generic_json@@Base+0xa78>
   19ac8:	mov	r0, #5
   19acc:	str	r0, [r8]
   19ad0:	add	r1, r7, #1
   19ad4:	ldr	r0, [r6]
   19ad8:	sub	r0, r1, r0
   19adc:	ldr	r1, [sp, #4]
   19ae0:	str	r0, [r1]
   19ae4:	ldr	r0, [sp, #8]
   19ae8:	str	r7, [r0]
   19aec:	b	19a6c <flatcc_json_parser_generic_json@@Base+0xa78>

00019af0 <flatcc_json_parser_double@@Base>:
   19af0:	push	{r4, r5, r6, r7, fp, lr}
   19af4:	add	fp, sp, #16
   19af8:	mov	r5, r0
   19afc:	mov	r0, #0
   19b00:	mov	r6, r1
   19b04:	cmp	r1, r2
   19b08:	str	r0, [r3]
   19b0c:	str	r0, [r3, #4]
   19b10:	moveq	r0, r6
   19b14:	popeq	{r4, r5, r6, r7, fp, pc}
   19b18:	mov	r0, r6
   19b1c:	mov	r4, r2
   19b20:	mov	r7, r3
   19b24:	ldrb	r1, [r0], #1
   19b28:	cmp	r1, #45	; 0x2d
   19b2c:	movne	r0, r6
   19b30:	sub	r2, r2, r0
   19b34:	cmp	r2, #2
   19b38:	blt	19b64 <flatcc_json_parser_double@@Base+0x74>
   19b3c:	sub	r1, r1, #45	; 0x2d
   19b40:	clz	r1, r1
   19b44:	lsr	r1, r1, #5
   19b48:	ldrb	r1, [r6, r1]
   19b4c:	cmp	r1, #46	; 0x2e
   19b50:	beq	19bb0 <flatcc_json_parser_double@@Base+0xc0>
   19b54:	cmp	r1, #48	; 0x30
   19b58:	ldrbeq	r0, [r0, #1]
   19b5c:	cmpeq	r0, #48	; 0x30
   19b60:	beq	19bb0 <flatcc_json_parser_double@@Base+0xc0>
   19b64:	sub	r1, r4, r6
   19b68:	mov	r0, r6
   19b6c:	mov	r2, r7
   19b70:	bl	19be0 <flatcc_json_parser_double@@Base+0xf0>
   19b74:	cmp	r0, #0
   19b78:	cmpne	r0, r6
   19b7c:	popne	{r4, r5, r6, r7, fp, pc}
   19b80:	vldr	d0, [r7]
   19b84:	bl	12928 <__isinf@plt>
   19b88:	ldr	r1, [r5, #24]
   19b8c:	cmp	r0, #0
   19b90:	beq	19ba4 <flatcc_json_parser_double@@Base+0xb4>
   19b94:	cmp	r1, #0
   19b98:	bne	19bd8 <flatcc_json_parser_double@@Base+0xe8>
   19b9c:	mov	r0, #7
   19ba0:	b	19bc0 <flatcc_json_parser_double@@Base+0xd0>
   19ba4:	cmp	r1, #0
   19ba8:	bne	19bd8 <flatcc_json_parser_double@@Base+0xe8>
   19bac:	b	19bbc <flatcc_json_parser_double@@Base+0xcc>
   19bb0:	ldr	r0, [r5, #24]
   19bb4:	cmp	r0, #0
   19bb8:	bne	19bd8 <flatcc_json_parser_double@@Base+0xe8>
   19bbc:	mov	r0, #6
   19bc0:	str	r6, [r5, #36]	; 0x24
   19bc4:	add	r2, r6, #1
   19bc8:	ldr	r1, [r5, #4]
   19bcc:	sub	r1, r2, r1
   19bd0:	str	r1, [r5, #20]
   19bd4:	str	r0, [r5, #24]
   19bd8:	mov	r0, r4
   19bdc:	pop	{r4, r5, r6, r7, fp, pc}
   19be0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19be4:	add	fp, sp, #28
   19be8:	sub	sp, sp, #36	; 0x24
   19bec:	cmp	r1, #1000	; 0x3e8
   19bf0:	mov	r3, r1
   19bf4:	mov	r6, #0
   19bf8:	mov	r9, r0
   19bfc:	movge	r1, #1000	; 0x3e8
   19c00:	str	r6, [r2]
   19c04:	str	r6, [r2, #4]
   19c08:	add	lr, r0, r1
   19c0c:	add	r4, lr, #1
   19c10:	cmp	r4, r0
   19c14:	beq	19c88 <flatcc_json_parser_double@@Base+0x198>
   19c18:	ldrb	r0, [r9]
   19c1c:	mov	r5, r9
   19c20:	cmp	r0, #45	; 0x2d
   19c24:	bne	19c3c <flatcc_json_parser_double@@Base+0x14c>
   19c28:	cmp	r1, #0
   19c2c:	beq	19fdc <flatcc_json_parser_double@@Base+0x4ec>
   19c30:	add	r5, r9, #1
   19c34:	mov	r6, #1
   19c38:	ldrb	r0, [r5]
   19c3c:	cmp	r0, #48	; 0x30
   19c40:	bne	19c70 <flatcc_json_parser_double@@Base+0x180>
   19c44:	add	ip, r5, #1
   19c48:	cmp	r5, lr
   19c4c:	beq	19cd0 <flatcc_json_parser_double@@Base+0x1e0>
   19c50:	ldrb	r1, [ip]
   19c54:	orr	r0, r1, #32
   19c58:	cmp	r0, #120	; 0x78
   19c5c:	bne	19ca0 <flatcc_json_parser_double@@Base+0x1b0>
   19c60:	mov	r0, #0
   19c64:	str	r0, [r2]
   19c68:	str	r0, [r2, #4]
   19c6c:	b	19c88 <flatcc_json_parser_double@@Base+0x198>
   19c70:	sub	r1, r0, #49	; 0x31
   19c74:	uxtb	r1, r1
   19c78:	cmp	r1, #9
   19c7c:	bcc	19c90 <flatcc_json_parser_double@@Base+0x1a0>
   19c80:	cmp	r6, #0
   19c84:	movne	r9, #0
   19c88:	mov	r2, r9
   19c8c:	b	19fe0 <flatcc_json_parser_double@@Base+0x4f0>
   19c90:	sub	r0, r0, #48	; 0x30
   19c94:	add	ip, r5, #1
   19c98:	asr	r1, r0, #31
   19c9c:	b	19cd8 <flatcc_json_parser_double@@Base+0x1e8>
   19ca0:	cmp	r1, #48	; 0x30
   19ca4:	mov	r0, #0
   19ca8:	mov	r1, #0
   19cac:	bne	19cd8 <flatcc_json_parser_double@@Base+0x1e8>
   19cb0:	add	r0, r5, #2
   19cb4:	mov	ip, r0
   19cb8:	cmp	r4, r0
   19cbc:	beq	19cd0 <flatcc_json_parser_double@@Base+0x1e0>
   19cc0:	mov	r0, ip
   19cc4:	ldrb	r1, [r0], #1
   19cc8:	cmp	r1, #48	; 0x30
   19ccc:	beq	19cb4 <flatcc_json_parser_double@@Base+0x1c4>
   19cd0:	mov	r0, #0
   19cd4:	mov	r1, #0
   19cd8:	cmp	ip, r4
   19cdc:	beq	19fdc <flatcc_json_parser_double@@Base+0x4ec>
   19ce0:	movw	r5, #39321	; 0x9999
   19ce4:	mov	sl, #10
   19ce8:	mov	r7, ip
   19cec:	str	r6, [sp, #20]
   19cf0:	str	r2, [sp, #24]
   19cf4:	movt	r5, #6553	; 0x1999
   19cf8:	ldrb	r8, [r7]
   19cfc:	sub	r2, r8, #48	; 0x30
   19d00:	uxtb	r6, r2
   19d04:	mov	r2, #0
   19d08:	cmp	r6, #9
   19d0c:	bhi	19d44 <flatcc_json_parser_double@@Base+0x254>
   19d10:	movw	r6, #39320	; 0x9998
   19d14:	movt	r6, #39321	; 0x9999
   19d18:	subs	r6, r6, r0
   19d1c:	sbcs	r6, r5, r1
   19d20:	bcc	19d54 <flatcc_json_parser_double@@Base+0x264>
   19d24:	add	r1, r1, r1, lsl #2
   19d28:	add	r7, r7, #1
   19d2c:	lsl	r1, r1, #1
   19d30:	umlal	r8, r1, r0, sl
   19d34:	subs	r0, r8, #48	; 0x30
   19d38:	sbc	r1, r1, #0
   19d3c:	cmp	r4, r7
   19d40:	bne	19cf8 <flatcc_json_parser_double@@Base+0x208>
   19d44:	mov	r5, r1
   19d48:	mov	sl, #0
   19d4c:	str	r0, [sp, #28]
   19d50:	b	19d70 <flatcc_json_parser_double@@Base+0x280>
   19d54:	adds	r6, r0, #1
   19d58:	mov	sl, #1
   19d5c:	adc	r5, r1, #0
   19d60:	cmp	r8, #52	; 0x34
   19d64:	movls	r6, r0
   19d68:	movls	r5, r1
   19d6c:	str	r6, [sp, #28]
   19d70:	cmp	r7, r4
   19d74:	beq	19fe0 <flatcc_json_parser_double@@Base+0x4f0>
   19d78:	sub	r8, r7, ip
   19d7c:	mvn	ip, r3
   19d80:	mov	r3, #0
   19d84:	cmn	ip, #1000	; 0x3e8
   19d88:	mov	r0, ip
   19d8c:	mvnlt	r0, #1000	; 0x3e8
   19d90:	mvn	r0, r0
   19d94:	sub	r0, r0, r7
   19d98:	add	r0, r9, r0
   19d9c:	ldrb	r1, [r7]
   19da0:	cmp	r1, #48	; 0x30
   19da4:	bne	19dc8 <flatcc_json_parser_double@@Base+0x2d8>
   19da8:	add	r1, r7, #1
   19dac:	cmp	r7, lr
   19db0:	sub	r0, r0, #1
   19db4:	add	r3, r3, #1
   19db8:	mov	r7, r1
   19dbc:	bne	19d9c <flatcc_json_parser_double@@Base+0x2ac>
   19dc0:	mov	r7, r1
   19dc4:	b	19e10 <flatcc_json_parser_double@@Base+0x320>
   19dc8:	sub	r1, r1, #49	; 0x31
   19dcc:	uxtb	r1, r1
   19dd0:	cmp	r1, #8
   19dd4:	bhi	19e10 <flatcc_json_parser_double@@Base+0x320>
   19dd8:	mvn	r2, #0
   19ddc:	mov	r1, r2
   19de0:	cmp	r0, #0
   19de4:	beq	19e04 <flatcc_json_parser_double@@Base+0x314>
   19de8:	ldrb	r2, [r7, -r1]
   19dec:	sub	r0, r0, #1
   19df0:	sub	r2, r2, #48	; 0x30
   19df4:	uxtb	r6, r2
   19df8:	sub	r2, r1, #1
   19dfc:	cmp	r6, #10
   19e00:	bcc	19ddc <flatcc_json_parser_double@@Base+0x2ec>
   19e04:	sub	r3, r3, r1
   19e08:	sub	r7, r7, r1
   19e0c:	mov	sl, #1
   19e10:	mov	r2, #0
   19e14:	cmp	r7, r4
   19e18:	beq	19fe0 <flatcc_json_parser_double@@Base+0x4f0>
   19e1c:	ldrb	r0, [r7]
   19e20:	cmp	r0, #46	; 0x2e
   19e24:	bne	19fb4 <flatcc_json_parser_double@@Base+0x4c4>
   19e28:	mov	r6, r7
   19e2c:	ldrb	r0, [r6, #1]!
   19e30:	sub	r1, r0, #48	; 0x30
   19e34:	uxtb	r1, r1
   19e38:	cmp	r1, #9
   19e3c:	bhi	19fe0 <flatcc_json_parser_double@@Base+0x4f0>
   19e40:	cmp	r7, lr
   19e44:	beq	19efc <flatcc_json_parser_double@@Base+0x40c>
   19e48:	cmn	ip, #1000	; 0x3e8
   19e4c:	mvn	r1, #1
   19e50:	str	sl, [sp, #12]
   19e54:	str	r6, [sp, #8]
   19e58:	str	r8, [sp, #16]
   19e5c:	mvnlt	ip, #1000	; 0x3e8
   19e60:	sub	r1, r1, ip
   19e64:	sub	r1, r1, r7
   19e68:	add	sl, r9, r1
   19e6c:	mov	r1, #0
   19e70:	mov	ip, r1
   19e74:	ldr	r1, [sp, #28]
   19e78:	movw	r6, #39320	; 0x9998
   19e7c:	movt	r6, #39321	; 0x9999
   19e80:	subs	r1, r6, r1
   19e84:	movw	r1, #39321	; 0x9999
   19e88:	movt	r1, #6553	; 0x1999
   19e8c:	sbcs	r1, r1, r5
   19e90:	bcc	19f04 <flatcc_json_parser_double@@Base+0x414>
   19e94:	add	r1, r5, r5, lsl #2
   19e98:	ldr	r5, [sp, #28]
   19e9c:	uxtb	r0, r0
   19ea0:	mov	r6, #10
   19ea4:	lsl	r1, r1, #1
   19ea8:	umlal	r0, r1, r5, r6
   19eac:	add	r6, r7, ip
   19eb0:	subs	r0, r0, #48	; 0x30
   19eb4:	sbc	r5, r1, #0
   19eb8:	cmp	sl, ip
   19ebc:	str	r0, [sp, #28]
   19ec0:	beq	19ee4 <flatcc_json_parser_double@@Base+0x3f4>
   19ec4:	ldrb	r0, [r6, #2]
   19ec8:	mov	r8, r5
   19ecc:	add	r1, ip, #1
   19ed0:	sub	r5, r0, #48	; 0x30
   19ed4:	uxtb	r5, r5
   19ed8:	cmp	r5, #10
   19edc:	mov	r5, r8
   19ee0:	bcc	19e70 <flatcc_json_parser_double@@Base+0x380>
   19ee4:	ldr	r8, [sp, #16]
   19ee8:	ldr	sl, [sp, #12]
   19eec:	sub	r0, r3, #1
   19ef0:	add	r7, r6, #2
   19ef4:	sub	r3, r0, ip
   19ef8:	b	19f44 <flatcc_json_parser_double@@Base+0x454>
   19efc:	mov	r7, r6
   19f00:	b	19f48 <flatcc_json_parser_double@@Base+0x458>
   19f04:	ldr	sl, [sp, #12]
   19f08:	ldr	r8, [sp, #16]
   19f0c:	add	r1, r7, ip
   19f10:	sub	r3, r3, ip
   19f14:	add	r7, r1, #1
   19f18:	cmp	sl, #0
   19f1c:	bne	19f44 <flatcc_json_parser_double@@Base+0x454>
   19f20:	ldr	r6, [sp, #28]
   19f24:	uxtb	r0, r0
   19f28:	mov	sl, #1
   19f2c:	adds	r1, r6, #1
   19f30:	adc	ip, r5, #0
   19f34:	cmp	r0, #52	; 0x34
   19f38:	movhi	r6, r1
   19f3c:	movhi	r5, ip
   19f40:	str	r6, [sp, #28]
   19f44:	ldr	r6, [sp, #8]
   19f48:	cmp	r7, r4
   19f4c:	beq	19fe0 <flatcc_json_parser_double@@Base+0x4f0>
   19f50:	sub	r0, r7, r6
   19f54:	add	r8, r0, r8
   19f58:	ldrb	r0, [r7]
   19f5c:	cmp	r0, #48	; 0x30
   19f60:	bne	19f78 <flatcc_json_parser_double@@Base+0x488>
   19f64:	add	r7, r7, #1
   19f68:	add	r3, r3, #1
   19f6c:	cmp	r4, r7
   19f70:	bne	19f58 <flatcc_json_parser_double@@Base+0x468>
   19f74:	b	19fb4 <flatcc_json_parser_double@@Base+0x4c4>
   19f78:	sub	r0, r0, #49	; 0x31
   19f7c:	uxtb	r0, r0
   19f80:	cmp	r0, #8
   19f84:	bhi	19fb4 <flatcc_json_parser_double@@Base+0x4c4>
   19f88:	add	r0, r7, #1
   19f8c:	mov	sl, #1
   19f90:	mov	r7, r0
   19f94:	cmp	r4, r0
   19f98:	beq	19fb4 <flatcc_json_parser_double@@Base+0x4c4>
   19f9c:	mov	r0, r7
   19fa0:	ldrb	r1, [r0], #1
   19fa4:	sub	r1, r1, #48	; 0x30
   19fa8:	uxtb	r1, r1
   19fac:	cmp	r1, #10
   19fb0:	bcc	19f90 <flatcc_json_parser_double@@Base+0x4a0>
   19fb4:	cmp	r7, r4
   19fb8:	beq	19fe0 <flatcc_json_parser_double@@Base+0x4f0>
   19fbc:	ldrb	r0, [r7]
   19fc0:	mov	ip, #0
   19fc4:	orr	r0, r0, #32
   19fc8:	cmp	r0, #101	; 0x65
   19fcc:	bne	19fec <flatcc_json_parser_double@@Base+0x4fc>
   19fd0:	sub	r0, r4, r7
   19fd4:	cmp	r0, #2
   19fd8:	bge	1a05c <flatcc_json_parser_double@@Base+0x56c>
   19fdc:	mov	r2, #0
   19fe0:	mov	r0, r2
   19fe4:	sub	sp, fp, #28
   19fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fec:	mov	r0, #0
   19ff0:	cmp	r7, r4
   19ff4:	mov	r2, #0
   19ff8:	beq	19fe0 <flatcc_json_parser_double@@Base+0x4f0>
   19ffc:	ldr	r1, [sp, #28]
   1a000:	cmp	ip, #0
   1a004:	vmov.i32	d16, #0	; 0x00000000
   1a008:	rsbne	r0, r0, #0
   1a00c:	orrs	r1, r1, r5
   1a010:	beq	1a034 <flatcc_json_parser_double@@Base+0x544>
   1a014:	add	r1, r8, r3
   1a018:	add	r4, r1, r0
   1a01c:	cmn	r4, #324	; 0x144
   1a020:	blt	1a034 <flatcc_json_parser_double@@Base+0x544>
   1a024:	movw	r0, #310	; 0x136
   1a028:	cmp	r4, r0
   1a02c:	ble	1a090 <flatcc_json_parser_double@@Base+0x5a0>
   1a030:	vldr	d16, [pc, #880]	; 1a3a8 <flatcc_json_parser_double@@Base+0x8b8>
   1a034:	ldr	r0, [sp, #24]
   1a038:	vstr	d16, [r0]
   1a03c:	ldr	r0, [sp, #20]
   1a040:	cmp	r0, #0
   1a044:	ldrne	r0, [sp, #24]
   1a048:	vldrne	d16, [r0]
   1a04c:	vnegne.f64	d16, d16
   1a050:	vstrne	d16, [r0]
   1a054:	mov	r2, r7
   1a058:	b	19fe0 <flatcc_json_parser_double@@Base+0x4f0>
   1a05c:	mov	r1, r7
   1a060:	ldrb	r0, [r1, #1]!
   1a064:	cmp	r0, #45	; 0x2d
   1a068:	beq	1a188 <flatcc_json_parser_double@@Base+0x698>
   1a06c:	mov	ip, #0
   1a070:	cmp	r0, #43	; 0x2b
   1a074:	bne	1a198 <flatcc_json_parser_double@@Base+0x6a8>
   1a078:	add	r1, r7, #2
   1a07c:	mov	r2, #0
   1a080:	cmp	r1, r4
   1a084:	beq	19fe0 <flatcc_json_parser_double@@Base+0x4f0>
   1a088:	mov	ip, #0
   1a08c:	b	1a198 <flatcc_json_parser_double@@Base+0x6a8>
   1a090:	mov	r0, #0
   1a094:	cmp	r0, r5, lsr #21
   1a098:	bne	1a1f8 <flatcc_json_parser_double@@Base+0x708>
   1a09c:	cmp	r4, #22
   1a0a0:	bhi	1a1f8 <flatcc_json_parser_double@@Base+0x708>
   1a0a4:	ldr	r0, [sp, #28]
   1a0a8:	mov	r1, r5
   1a0ac:	bl	1c2ac <flatcc_json_parser_struct_as_root@@Base+0x418>
   1a0b0:	sub	r2, r4, r8
   1a0b4:	vmov	d16, r0, r1
   1a0b8:	add	r0, r2, #22
   1a0bc:	cmp	r0, #44	; 0x2c
   1a0c0:	bhi	1a034 <flatcc_json_parser_double@@Base+0x544>
   1a0c4:	add	r1, pc, #0
   1a0c8:	ldr	pc, [r1, r0, lsl #2]
   1a0cc:	andeq	sl, r1, r0, lsl #3
   1a0d0:	andeq	sl, r1, r4, asr #4
   1a0d4:	andeq	sl, r1, ip, asr #4
   1a0d8:	andeq	sl, r1, r4, asr r2
   1a0dc:	andeq	sl, r1, ip, asr r2
   1a0e0:	andeq	sl, r1, r4, ror #4
   1a0e4:	andeq	sl, r1, ip, ror #4
   1a0e8:	andeq	sl, r1, r4, ror r2
   1a0ec:	andeq	sl, r1, ip, ror r2
   1a0f0:	andeq	sl, r1, r4, lsl #5
   1a0f4:	andeq	sl, r1, ip, lsl #5
   1a0f8:	muleq	r1, r4, r2
   1a0fc:	muleq	r1, ip, r2
   1a100:	andeq	sl, r1, r4, lsr #5
   1a104:	andeq	sl, r1, ip, lsr #5
   1a108:			; <UNDEFINED> instruction: 0x0001a2b4
   1a10c:			; <UNDEFINED> instruction: 0x0001a2bc
   1a110:	andeq	sl, r1, r4, asr #5
   1a114:	andeq	sl, r1, ip, asr #5
   1a118:	ldrdeq	sl, [r1], -r4
   1a11c:	ldrdeq	sl, [r1], -ip
   1a120:	andeq	sl, r1, r4, ror #5
   1a124:	andeq	sl, r1, r4, lsr r0
   1a128:	strdeq	sl, [r1], -r0
   1a12c:	strdeq	sl, [r1], -r8
   1a130:	andeq	sl, r1, r0, lsl #6
   1a134:	andeq	sl, r1, r8, lsl #6
   1a138:	andeq	sl, r1, r0, lsl r3
   1a13c:	andeq	sl, r1, r8, lsl r3
   1a140:	andeq	sl, r1, r0, lsr #6
   1a144:	andeq	sl, r1, r8, lsr #6
   1a148:	andeq	sl, r1, r0, lsr r3
   1a14c:	andeq	sl, r1, r8, lsr r3
   1a150:	andeq	sl, r1, r0, asr #6
   1a154:	andeq	sl, r1, r8, asr #6
   1a158:	andeq	sl, r1, r0, asr r3
   1a15c:	andeq	sl, r1, r8, asr r3
   1a160:	andeq	sl, r1, r0, ror #6
   1a164:	andeq	sl, r1, r8, ror #6
   1a168:	andeq	sl, r1, r0, ror r3
   1a16c:	andeq	sl, r1, r8, ror r3
   1a170:	andeq	sl, r1, r0, lsl #7
   1a174:	andeq	sl, r1, r8, lsl #7
   1a178:	muleq	r1, r0, r3
   1a17c:	muleq	r1, r8, r3
   1a180:	vldr	d17, [pc, #712]	; 1a450 <flatcc_json_parser_double@@Base+0x960>
   1a184:	b	1a2e8 <flatcc_json_parser_double@@Base+0x7f8>
   1a188:	add	r1, r7, #2
   1a18c:	mov	ip, #1
   1a190:	cmp	r1, r4
   1a194:	beq	19fdc <flatcc_json_parser_double@@Base+0x4ec>
   1a198:	ldrb	r0, [r1]
   1a19c:	mov	r7, r5
   1a1a0:	mov	r2, #0
   1a1a4:	sub	r0, r0, #48	; 0x30
   1a1a8:	uxtb	r5, r0
   1a1ac:	cmp	r5, #9
   1a1b0:	bhi	19fe0 <flatcc_json_parser_double@@Base+0x4f0>
   1a1b4:	mov	r5, r7
   1a1b8:	add	r7, r1, #1
   1a1bc:	cmp	r1, lr
   1a1c0:	beq	19ff0 <flatcc_json_parser_double@@Base+0x500>
   1a1c4:	ldrb	r1, [r7]
   1a1c8:	sub	r2, r1, #48	; 0x30
   1a1cc:	uxtb	r2, r2
   1a1d0:	cmp	r2, #9
   1a1d4:	bhi	19ff0 <flatcc_json_parser_double@@Base+0x500>
   1a1d8:	cmp	r0, #32768	; 0x8000
   1a1dc:	add	r7, r7, #1
   1a1e0:	addlt	r0, r0, r0, lsl #2
   1a1e4:	addlt	r0, r1, r0, lsl #1
   1a1e8:	sublt	r0, r0, #48	; 0x30
   1a1ec:	cmp	r4, r7
   1a1f0:	bne	1a1c4 <flatcc_json_parser_double@@Base+0x6d4>
   1a1f4:	b	19ff0 <flatcc_json_parser_double@@Base+0x500>
   1a1f8:	ldr	r0, [sp, #24]
   1a1fc:	mov	r1, r5
   1a200:	mov	r2, r4
   1a204:	mov	r3, r8
   1a208:	str	sl, [sp]
   1a20c:	str	r0, [sp, #4]
   1a210:	ldr	r0, [sp, #28]
   1a214:	bl	18180 <grisu3_diy_fp_encode_double@@Base>
   1a218:	cmp	r0, #0
   1a21c:	bne	1a03c <flatcc_json_parser_double@@Base+0x54c>
   1a220:	add	r1, sp, #32
   1a224:	mov	r0, r9
   1a228:	bl	129a0 <strtod@plt>
   1a22c:	ldr	r0, [sp, #24]
   1a230:	vstr	d0, [r0]
   1a234:	ldr	r0, [sp, #32]
   1a238:	cmp	r0, r7
   1a23c:	movcc	r7, r0
   1a240:	b	1a054 <flatcc_json_parser_double@@Base+0x564>
   1a244:	vldr	d17, [pc, #356]	; 1a3b0 <flatcc_json_parser_double@@Base+0x8c0>
   1a248:	b	1a2e8 <flatcc_json_parser_double@@Base+0x7f8>
   1a24c:	vldr	d17, [pc, #356]	; 1a3b8 <flatcc_json_parser_double@@Base+0x8c8>
   1a250:	b	1a2e8 <flatcc_json_parser_double@@Base+0x7f8>
   1a254:	vldr	d17, [pc, #356]	; 1a3c0 <flatcc_json_parser_double@@Base+0x8d0>
   1a258:	b	1a2e8 <flatcc_json_parser_double@@Base+0x7f8>
   1a25c:	vldr	d17, [pc, #356]	; 1a3c8 <flatcc_json_parser_double@@Base+0x8d8>
   1a260:	b	1a2e8 <flatcc_json_parser_double@@Base+0x7f8>
   1a264:	vldr	d17, [pc, #356]	; 1a3d0 <flatcc_json_parser_double@@Base+0x8e0>
   1a268:	b	1a2e8 <flatcc_json_parser_double@@Base+0x7f8>
   1a26c:	vldr	d17, [pc, #356]	; 1a3d8 <flatcc_json_parser_double@@Base+0x8e8>
   1a270:	b	1a2e8 <flatcc_json_parser_double@@Base+0x7f8>
   1a274:	vldr	d17, [pc, #356]	; 1a3e0 <flatcc_json_parser_double@@Base+0x8f0>
   1a278:	b	1a2e8 <flatcc_json_parser_double@@Base+0x7f8>
   1a27c:	vldr	d17, [pc, #356]	; 1a3e8 <flatcc_json_parser_double@@Base+0x8f8>
   1a280:	b	1a2e8 <flatcc_json_parser_double@@Base+0x7f8>
   1a284:	vldr	d17, [pc, #356]	; 1a3f0 <flatcc_json_parser_double@@Base+0x900>
   1a288:	b	1a2e8 <flatcc_json_parser_double@@Base+0x7f8>
   1a28c:	vldr	d17, [pc, #356]	; 1a3f8 <flatcc_json_parser_double@@Base+0x908>
   1a290:	b	1a2e8 <flatcc_json_parser_double@@Base+0x7f8>
   1a294:	vldr	d17, [pc, #356]	; 1a400 <flatcc_json_parser_double@@Base+0x910>
   1a298:	b	1a2e8 <flatcc_json_parser_double@@Base+0x7f8>
   1a29c:	vldr	d17, [pc, #356]	; 1a408 <flatcc_json_parser_double@@Base+0x918>
   1a2a0:	b	1a2e8 <flatcc_json_parser_double@@Base+0x7f8>
   1a2a4:	vldr	d17, [pc, #356]	; 1a410 <flatcc_json_parser_double@@Base+0x920>
   1a2a8:	b	1a2e8 <flatcc_json_parser_double@@Base+0x7f8>
   1a2ac:	vldr	d17, [pc, #356]	; 1a418 <flatcc_json_parser_double@@Base+0x928>
   1a2b0:	b	1a2e8 <flatcc_json_parser_double@@Base+0x7f8>
   1a2b4:	vldr	d17, [pc, #356]	; 1a420 <flatcc_json_parser_double@@Base+0x930>
   1a2b8:	b	1a2e8 <flatcc_json_parser_double@@Base+0x7f8>
   1a2bc:	vldr	d17, [pc, #356]	; 1a428 <flatcc_json_parser_double@@Base+0x938>
   1a2c0:	b	1a2e8 <flatcc_json_parser_double@@Base+0x7f8>
   1a2c4:	vldr	d17, [pc, #356]	; 1a430 <flatcc_json_parser_double@@Base+0x940>
   1a2c8:	b	1a2e8 <flatcc_json_parser_double@@Base+0x7f8>
   1a2cc:	vldr	d17, [pc, #356]	; 1a438 <flatcc_json_parser_double@@Base+0x948>
   1a2d0:	b	1a2e8 <flatcc_json_parser_double@@Base+0x7f8>
   1a2d4:	vldr	d17, [pc, #356]	; 1a440 <flatcc_json_parser_double@@Base+0x950>
   1a2d8:	b	1a2e8 <flatcc_json_parser_double@@Base+0x7f8>
   1a2dc:	vldr	d17, [pc, #356]	; 1a448 <flatcc_json_parser_double@@Base+0x958>
   1a2e0:	b	1a2e8 <flatcc_json_parser_double@@Base+0x7f8>
   1a2e4:	vmov.f64	d17, #36	; 0x41200000  10.0
   1a2e8:	vdiv.f64	d16, d16, d17
   1a2ec:	b	1a034 <flatcc_json_parser_double@@Base+0x544>
   1a2f0:	vmov.f64	d17, #36	; 0x41200000  10.0
   1a2f4:	b	1a39c <flatcc_json_parser_double@@Base+0x8ac>
   1a2f8:	vldr	d17, [pc, #328]	; 1a448 <flatcc_json_parser_double@@Base+0x958>
   1a2fc:	b	1a39c <flatcc_json_parser_double@@Base+0x8ac>
   1a300:	vldr	d17, [pc, #312]	; 1a440 <flatcc_json_parser_double@@Base+0x950>
   1a304:	b	1a39c <flatcc_json_parser_double@@Base+0x8ac>
   1a308:	vldr	d17, [pc, #296]	; 1a438 <flatcc_json_parser_double@@Base+0x948>
   1a30c:	b	1a39c <flatcc_json_parser_double@@Base+0x8ac>
   1a310:	vldr	d17, [pc, #280]	; 1a430 <flatcc_json_parser_double@@Base+0x940>
   1a314:	b	1a39c <flatcc_json_parser_double@@Base+0x8ac>
   1a318:	vldr	d17, [pc, #264]	; 1a428 <flatcc_json_parser_double@@Base+0x938>
   1a31c:	b	1a39c <flatcc_json_parser_double@@Base+0x8ac>
   1a320:	vldr	d17, [pc, #248]	; 1a420 <flatcc_json_parser_double@@Base+0x930>
   1a324:	b	1a39c <flatcc_json_parser_double@@Base+0x8ac>
   1a328:	vldr	d17, [pc, #232]	; 1a418 <flatcc_json_parser_double@@Base+0x928>
   1a32c:	b	1a39c <flatcc_json_parser_double@@Base+0x8ac>
   1a330:	vldr	d17, [pc, #216]	; 1a410 <flatcc_json_parser_double@@Base+0x920>
   1a334:	b	1a39c <flatcc_json_parser_double@@Base+0x8ac>
   1a338:	vldr	d17, [pc, #200]	; 1a408 <flatcc_json_parser_double@@Base+0x918>
   1a33c:	b	1a39c <flatcc_json_parser_double@@Base+0x8ac>
   1a340:	vldr	d17, [pc, #184]	; 1a400 <flatcc_json_parser_double@@Base+0x910>
   1a344:	b	1a39c <flatcc_json_parser_double@@Base+0x8ac>
   1a348:	vldr	d17, [pc, #168]	; 1a3f8 <flatcc_json_parser_double@@Base+0x908>
   1a34c:	b	1a39c <flatcc_json_parser_double@@Base+0x8ac>
   1a350:	vldr	d17, [pc, #152]	; 1a3f0 <flatcc_json_parser_double@@Base+0x900>
   1a354:	b	1a39c <flatcc_json_parser_double@@Base+0x8ac>
   1a358:	vldr	d17, [pc, #136]	; 1a3e8 <flatcc_json_parser_double@@Base+0x8f8>
   1a35c:	b	1a39c <flatcc_json_parser_double@@Base+0x8ac>
   1a360:	vldr	d17, [pc, #120]	; 1a3e0 <flatcc_json_parser_double@@Base+0x8f0>
   1a364:	b	1a39c <flatcc_json_parser_double@@Base+0x8ac>
   1a368:	vldr	d17, [pc, #104]	; 1a3d8 <flatcc_json_parser_double@@Base+0x8e8>
   1a36c:	b	1a39c <flatcc_json_parser_double@@Base+0x8ac>
   1a370:	vldr	d17, [pc, #88]	; 1a3d0 <flatcc_json_parser_double@@Base+0x8e0>
   1a374:	b	1a39c <flatcc_json_parser_double@@Base+0x8ac>
   1a378:	vldr	d17, [pc, #72]	; 1a3c8 <flatcc_json_parser_double@@Base+0x8d8>
   1a37c:	b	1a39c <flatcc_json_parser_double@@Base+0x8ac>
   1a380:	vldr	d17, [pc, #56]	; 1a3c0 <flatcc_json_parser_double@@Base+0x8d0>
   1a384:	b	1a39c <flatcc_json_parser_double@@Base+0x8ac>
   1a388:	vldr	d17, [pc, #40]	; 1a3b8 <flatcc_json_parser_double@@Base+0x8c8>
   1a38c:	b	1a39c <flatcc_json_parser_double@@Base+0x8ac>
   1a390:	vldr	d17, [pc, #24]	; 1a3b0 <flatcc_json_parser_double@@Base+0x8c0>
   1a394:	b	1a39c <flatcc_json_parser_double@@Base+0x8ac>
   1a398:	vldr	d17, [pc, #176]	; 1a450 <flatcc_json_parser_double@@Base+0x960>
   1a39c:	vmul.f64	d16, d16, d17
   1a3a0:	b	1a034 <flatcc_json_parser_double@@Base+0x544>
   1a3a4:	nop	{0}
   1a3a8:	andeq	r0, r0, r0
   1a3ac:	svcvc	0x00f00000	; IMB
   1a3b0:	usatle	lr, #2, r0, asr #30
   1a3b4:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   1a3b8:	ldmvc	r5!, {r6, sl, fp, pc}
   1a3bc:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   1a3c0:	addsvs	r3, r1, r0, lsl #26
   1a3c4:	mvnmi	r5, #228, 16	; 0xe40000
   1a3c8:	strbvs	ip, [lr, -r0, lsl #16]
   1a3cc:			; <UNDEFINED> instruction: 0x43abc16d
   1a3d0:	ldrbhi	sl, [r8]
   1a3d4:	cmnmi	r6, #1459617792	; 0x57000000
   1a3d8:	strbcc	r8, [r0, r0]!
   1a3dc:	movtmi	ip, #4985	; 0x1379
   1a3e0:	ldrtcs	r0, [r4], -r0
   1a3e4:	movwmi	r6, #52213	; 0xcbf5
   1a3e8:	cdpne	0, 9, cr0, cr0, cr0, {0}
   1a3ec:	sbcsmi	fp, r6, #196, 24	; 0xc400
   1a3f0:	strb	r0, [r0, #-0]
   1a3f4:	adcmi	r3, r2, #156	; 0x9c
   1a3f8:	andge	r0, r0, #0
   1a3fc:	rsbmi	r1, sp, #148, 20	; 0x94000
   1a400:	stmda	r0, {}	; <UNPREDICTABLE>
   1a404:	eorsmi	r4, r7, #7733248	; 0x760000
   1a408:	andcs	r0, r0, r0
   1a40c:	andmi	sl, r2, #95	; 0x5f
   1a410:	andeq	r0, r0, r0
   1a414:	bicmi	ip, sp, r5, ror #26
   1a418:	andeq	r0, r0, r0
   1a41c:	orrsmi	sp, r7, r4, lsl #15
   1a420:	andeq	r0, r0, r0
   1a424:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   1a428:	andeq	r0, r0, r0
   1a42c:	smlawbmi	lr, r0, r4, r8
   1a430:	andeq	r0, r0, r0
   1a434:	rscsmi	r6, r8, r0, lsl #20
   1a438:	andeq	r0, r0, r0
   1a43c:	sbcmi	r8, r3, r0, lsl #16
   1a440:	andeq	r0, r0, r0
   1a444:	addmi	r4, pc, r0
   1a448:	andeq	r0, r0, r0
   1a44c:	subsmi	r0, r9, r0
   1a450:			; <UNDEFINED> instruction: 0x064dd592
   1a454:	strmi	pc, [r0], #207	; 0xcf

0001a458 <flatcc_json_parser_float@@Base>:
   1a458:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a45c:	add	fp, sp, #24
   1a460:	vpush	{d8-d9}
   1a464:	sub	sp, sp, #8
   1a468:	mov	r8, r0
   1a46c:	mov	r0, #0
   1a470:	mov	r6, r1
   1a474:	cmp	r1, r2
   1a478:	str	r0, [r3]
   1a47c:	beq	1a540 <flatcc_json_parser_float@@Base+0xe8>
   1a480:	mov	r0, r6
   1a484:	mov	r5, r2
   1a488:	mov	r7, r3
   1a48c:	ldrb	r1, [r0], #1
   1a490:	cmp	r1, #45	; 0x2d
   1a494:	movne	r0, r6
   1a498:	sub	r2, r2, r0
   1a49c:	cmp	r2, #2
   1a4a0:	blt	1a4cc <flatcc_json_parser_float@@Base+0x74>
   1a4a4:	sub	r1, r1, #45	; 0x2d
   1a4a8:	clz	r1, r1
   1a4ac:	lsr	r1, r1, #5
   1a4b0:	ldrb	r1, [r6, r1]
   1a4b4:	cmp	r1, #46	; 0x2e
   1a4b8:	beq	1a548 <flatcc_json_parser_float@@Base+0xf0>
   1a4bc:	cmp	r1, #48	; 0x30
   1a4c0:	ldrbeq	r0, [r0, #1]
   1a4c4:	cmpeq	r0, #48	; 0x30
   1a4c8:	beq	1a548 <flatcc_json_parser_float@@Base+0xf0>
   1a4cc:	sub	r1, r5, r6
   1a4d0:	mov	r2, sp
   1a4d4:	mov	r0, r6
   1a4d8:	bl	19be0 <flatcc_json_parser_double@@Base+0xf0>
   1a4dc:	vldr	d16, [sp]
   1a4e0:	mov	r4, r0
   1a4e4:	add	r0, pc, #164	; 0xa4
   1a4e8:	vcmpe.f64	d16, #0.0
   1a4ec:	vcvt.f32.f64	s16, d16
   1a4f0:	vmrs	APSR_nzcv, fpscr
   1a4f4:	vmov.f32	s0, s16
   1a4f8:	addmi	r0, r0, #4
   1a4fc:	vldr	s18, [r0]
   1a500:	bl	1291c <__isinff@plt>
   1a504:	cmp	r0, #0
   1a508:	movne	r4, r6
   1a50c:	vseleq.f32	s0, s16, s18
   1a510:	cmp	r4, #0
   1a514:	vstr	s0, [r7]
   1a518:	cmpne	r4, r6
   1a51c:	bne	1a580 <flatcc_json_parser_float@@Base+0x128>
   1a520:	bl	1291c <__isinff@plt>
   1a524:	ldr	r1, [r8, #24]
   1a528:	cmp	r0, #0
   1a52c:	beq	1a558 <flatcc_json_parser_float@@Base+0x100>
   1a530:	cmp	r1, #0
   1a534:	bne	1a57c <flatcc_json_parser_float@@Base+0x124>
   1a538:	mov	r0, #7
   1a53c:	b	1a564 <flatcc_json_parser_float@@Base+0x10c>
   1a540:	mov	r4, r6
   1a544:	b	1a580 <flatcc_json_parser_float@@Base+0x128>
   1a548:	ldr	r0, [r8, #24]
   1a54c:	cmp	r0, #0
   1a550:	bne	1a57c <flatcc_json_parser_float@@Base+0x124>
   1a554:	b	1a560 <flatcc_json_parser_float@@Base+0x108>
   1a558:	cmp	r1, #0
   1a55c:	bne	1a57c <flatcc_json_parser_float@@Base+0x124>
   1a560:	mov	r0, #6
   1a564:	str	r6, [r8, #36]	; 0x24
   1a568:	add	r2, r6, #1
   1a56c:	ldr	r1, [r8, #4]
   1a570:	sub	r1, r2, r1
   1a574:	str	r1, [r8, #20]
   1a578:	str	r0, [r8, #24]
   1a57c:	mov	r4, r5
   1a580:	mov	r0, r4
   1a584:	sub	sp, fp, #40	; 0x28
   1a588:	vpop	{d8-d9}
   1a58c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a590:	svcvc	0x00800000
   1a594:			; <UNDEFINED> instruction: 0xff800000

0001a598 <flatcc_json_parser_integer@@Base>:
   1a598:	push	{r4, r5, r6, r7, fp, lr}
   1a59c:	add	fp, sp, #16
   1a5a0:	mov	ip, r1
   1a5a4:	cmp	r1, r2
   1a5a8:	beq	1a6e0 <flatcc_json_parser_integer@@Base+0x148>
   1a5ac:	ldrb	r1, [ip]
   1a5b0:	mov	r4, #0
   1a5b4:	sub	r1, r1, #45	; 0x2d
   1a5b8:	clz	r1, r1
   1a5bc:	lsr	r1, r1, #5
   1a5c0:	str	r1, [r3]
   1a5c4:	add	r1, ip, r1
   1a5c8:	cmp	r1, r2
   1a5cc:	beq	1a634 <flatcc_json_parser_integer@@Base+0x9c>
   1a5d0:	mov	lr, #10
   1a5d4:	mov	r5, #0
   1a5d8:	ldrb	r6, [r1]
   1a5dc:	sub	r7, r6, #48	; 0x30
   1a5e0:	uxtb	r7, r7
   1a5e4:	cmp	r7, #9
   1a5e8:	bhi	1a644 <flatcc_json_parser_integer@@Base+0xac>
   1a5ec:	add	r7, r5, r5, lsl #2
   1a5f0:	lsl	r7, r7, #1
   1a5f4:	umlal	r6, r7, r4, lr
   1a5f8:	subs	r6, r6, #48	; 0x30
   1a5fc:	sbc	r7, r7, #0
   1a600:	subs	r4, r6, r4
   1a604:	sbcs	r4, r7, r5
   1a608:	bcc	1a694 <flatcc_json_parser_integer@@Base+0xfc>
   1a60c:	add	r1, r1, #1
   1a610:	mov	r4, r6
   1a614:	mov	r5, r7
   1a618:	cmp	r2, r1
   1a61c:	bne	1a5d8 <flatcc_json_parser_integer@@Base+0x40>
   1a620:	mov	r3, #0
   1a624:	mov	r1, r2
   1a628:	mov	r4, r6
   1a62c:	mov	r5, r7
   1a630:	b	1a648 <flatcc_json_parser_integer@@Base+0xb0>
   1a634:	mov	r1, r2
   1a638:	mov	r5, #0
   1a63c:	mov	r3, #0
   1a640:	b	1a648 <flatcc_json_parser_integer@@Base+0xb0>
   1a644:	mov	r3, #1
   1a648:	cmp	r1, ip
   1a64c:	beq	1a6e0 <flatcc_json_parser_integer@@Base+0x148>
   1a650:	cmp	r3, #0
   1a654:	beq	1a6d4 <flatcc_json_parser_integer@@Base+0x13c>
   1a658:	ldrb	r3, [r1]
   1a65c:	cmp	r3, #46	; 0x2e
   1a660:	cmpne	r3, #101	; 0x65
   1a664:	bne	1a6cc <flatcc_json_parser_integer@@Base+0x134>
   1a668:	ldr	r3, [r0, #24]
   1a66c:	cmp	r3, #0
   1a670:	bne	1a6c4 <flatcc_json_parser_integer@@Base+0x12c>
   1a674:	str	r1, [r0, #36]	; 0x24
   1a678:	add	r1, r1, #1
   1a67c:	mov	r3, #12
   1a680:	ldr	r7, [r0, #4]
   1a684:	sub	r1, r1, r7
   1a688:	str	r1, [r0, #20]
   1a68c:	str	r3, [r0, #24]
   1a690:	b	1a6c4 <flatcc_json_parser_integer@@Base+0x12c>
   1a694:	ldr	r7, [r0, #24]
   1a698:	cmp	r7, #0
   1a69c:	bne	1a6c4 <flatcc_json_parser_integer@@Base+0x12c>
   1a6a0:	str	r1, [r0, #36]	; 0x24
   1a6a4:	cmp	r3, #0
   1a6a8:	mov	r7, #8
   1a6ac:	add	r1, r1, #1
   1a6b0:	ldr	r3, [r0, #4]
   1a6b4:	movweq	r7, #7
   1a6b8:	sub	r1, r1, r3
   1a6bc:	str	r1, [r0, #20]
   1a6c0:	str	r7, [r0, #24]
   1a6c4:	mov	ip, r2
   1a6c8:	b	1a6e0 <flatcc_json_parser_integer@@Base+0x148>
   1a6cc:	cmp	r3, #69	; 0x45
   1a6d0:	beq	1a668 <flatcc_json_parser_integer@@Base+0xd0>
   1a6d4:	ldr	r0, [fp, #8]
   1a6d8:	mov	ip, r1
   1a6dc:	strd	r4, [r0]
   1a6e0:	mov	r0, ip
   1a6e4:	pop	{r4, r5, r6, r7, fp, pc}

0001a6e8 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   1a6e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6ec:	add	fp, sp, #28
   1a6f0:	sub	sp, sp, #36	; 0x24
   1a6f4:	mov	r7, r3
   1a6f8:	mov	r4, r2
   1a6fc:	mov	r5, r0
   1a700:	cmp	r1, r2
   1a704:	beq	1a71c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x34>
   1a708:	ldrb	r0, [r1]
   1a70c:	cmp	r0, #34	; 0x22
   1a710:	bne	1a71c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x34>
   1a714:	add	r9, r1, #1
   1a718:	b	1a74c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x64>
   1a71c:	ldr	r0, [r5, #24]
   1a720:	mov	r9, r4
   1a724:	cmp	r0, #0
   1a728:	bne	1a74c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x64>
   1a72c:	str	r1, [r5, #36]	; 0x24
   1a730:	add	r1, r1, #1
   1a734:	mov	r0, #16
   1a738:	mov	r9, r4
   1a73c:	ldr	r2, [r5, #4]
   1a740:	sub	r1, r1, r2
   1a744:	str	r1, [r5, #20]
   1a748:	str	r0, [r5, #24]
   1a74c:	ldr	r6, [fp, #8]
   1a750:	mov	r0, r5
   1a754:	mov	r1, r9
   1a758:	mov	r2, r4
   1a75c:	bl	186b4 <flatcc_json_parser_string_part@@Base>
   1a760:	mov	sl, r0
   1a764:	cmp	r0, r4
   1a768:	mov	r0, r4
   1a76c:	beq	1a7a8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xc0>
   1a770:	ldrb	r0, [sl]
   1a774:	cmp	r0, #34	; 0x22
   1a778:	bne	1a7a4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xbc>
   1a77c:	sub	r1, sl, r9
   1a780:	and	r0, r1, #3
   1a784:	str	r1, [sp, #28]
   1a788:	lsr	r1, r1, #2
   1a78c:	add	r8, r1, r1, lsl #1
   1a790:	cmp	r0, #2
   1a794:	beq	1a7e4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xfc>
   1a798:	cmp	r0, #3
   1a79c:	addeq	r8, r8, #2
   1a7a0:	b	1a7e8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x100>
   1a7a4:	mov	r0, sl
   1a7a8:	mov	r1, #0
   1a7ac:	str	r1, [r7]
   1a7b0:	ldr	r1, [r5, #24]
   1a7b4:	cmp	r1, #0
   1a7b8:	bne	1a834 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   1a7bc:	str	r0, [r5, #36]	; 0x24
   1a7c0:	mov	r1, #31
   1a7c4:	cmp	r6, #0
   1a7c8:	add	r0, r0, #1
   1a7cc:	ldr	r2, [r5, #4]
   1a7d0:	movwne	r1, #32
   1a7d4:	sub	r0, r0, r2
   1a7d8:	str	r0, [r5, #20]
   1a7dc:	str	r1, [r5, #24]
   1a7e0:	b	1a834 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   1a7e4:	add	r8, r8, #1
   1a7e8:	ldr	r0, [r5]
   1a7ec:	mov	r1, #1
   1a7f0:	mov	r2, #1
   1a7f4:	mvn	r3, #0
   1a7f8:	bl	1562c <flatcc_builder_start_vector@@Base>
   1a7fc:	cmp	r0, #0
   1a800:	beq	1a840 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x158>
   1a804:	mov	r0, #0
   1a808:	str	r0, [r7]
   1a80c:	ldr	r0, [r5, #24]
   1a810:	cmp	r0, #0
   1a814:	bne	1a834 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   1a818:	mov	r0, #33	; 0x21
   1a81c:	str	sl, [r5, #36]	; 0x24
   1a820:	add	r2, sl, #1
   1a824:	ldr	r1, [r5, #4]
   1a828:	sub	r1, r2, r1
   1a82c:	str	r1, [r5, #20]
   1a830:	str	r0, [r5, #24]
   1a834:	mov	r0, r4
   1a838:	sub	sp, fp, #28
   1a83c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a840:	ldr	r0, [r5]
   1a844:	mov	r1, r8
   1a848:	bl	14e14 <flatcc_builder_extend_vector@@Base>
   1a84c:	cmp	r0, #0
   1a850:	beq	1a804 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
   1a854:	movw	r1, #57776	; 0xe1b0
   1a858:	movw	r2, #57520	; 0xe0b0
   1a85c:	ldr	ip, [sp, #28]
   1a860:	cmp	r6, #0
   1a864:	str	r7, [sp, #8]
   1a868:	add	r7, sp, #32
   1a86c:	mov	r6, r9
   1a870:	str	r0, [sp, #4]
   1a874:	str	r0, [sp, #16]
   1a878:	str	r8, [sp, #24]
   1a87c:	movt	r1, #1
   1a880:	movt	r2, #1
   1a884:	movne	r2, r1
   1a888:	cmp	r8, #0
   1a88c:	mov	r1, r8
   1a890:	mvneq	r1, #0
   1a894:	str	r1, [sp, #20]
   1a898:	mov	r1, #0
   1a89c:	str	ip, [sp, #12]
   1a8a0:	cmp	ip, r1
   1a8a4:	beq	1a94c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x264>
   1a8a8:	ldrb	r3, [r6, r1]
   1a8ac:	ldrb	lr, [r2, r3]
   1a8b0:	cmp	lr, #64	; 0x40
   1a8b4:	strb	lr, [r7, r1]
   1a8b8:	bcc	1a8d0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e8>
   1a8bc:	cmp	lr, #65	; 0x41
   1a8c0:	bne	1a988 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2a0>
   1a8c4:	sub	r1, r1, #1
   1a8c8:	sub	ip, ip, #1
   1a8cc:	add	r6, r6, #1
   1a8d0:	add	r1, r1, #1
   1a8d4:	cmp	r1, #4
   1a8d8:	bcc	1a8a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   1a8dc:	ldr	r0, [sp, #20]
   1a8e0:	cmp	r0, #3
   1a8e4:	bcc	1a978 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x290>
   1a8e8:	ldrb	r3, [sp, #33]	; 0x21
   1a8ec:	ldrb	r1, [sp, #32]
   1a8f0:	mov	r0, r7
   1a8f4:	ldr	r8, [sp, #24]
   1a8f8:	sub	ip, ip, #4
   1a8fc:	add	r6, r6, #4
   1a900:	lsr	r7, r3, #4
   1a904:	orr	r1, r7, r1, lsl #2
   1a908:	mov	r7, r0
   1a90c:	ldr	r0, [sp, #16]
   1a910:	strb	r1, [r0]
   1a914:	ldrb	r1, [sp, #34]	; 0x22
   1a918:	lsr	r1, r1, #2
   1a91c:	orr	r1, r1, r3, lsl #4
   1a920:	strb	r1, [r0, #1]
   1a924:	ldrb	r1, [sp, #34]	; 0x22
   1a928:	ldrb	r3, [sp, #35]	; 0x23
   1a92c:	orr	r1, r3, r1, lsl #6
   1a930:	strb	r1, [r0, #2]
   1a934:	ldr	r1, [sp, #20]
   1a938:	add	r0, r0, #3
   1a93c:	str	r0, [sp, #16]
   1a940:	subs	r1, r1, #3
   1a944:	bne	1a894 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   1a948:	b	1aa38 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x350>
   1a94c:	mov	r1, ip
   1a950:	mov	r0, ip
   1a954:	sub	ip, ip, r0
   1a958:	cmp	r1, #0
   1a95c:	beq	1aa38 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x350>
   1a960:	cmp	r1, #3
   1a964:	beq	1a9cc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e4>
   1a968:	cmp	r1, #2
   1a96c:	ldrbeq	r1, [sp, #33]	; 0x21
   1a970:	tsteq	r1, #15
   1a974:	beq	1aa20 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x338>
   1a978:	ldr	r0, [sp, #28]
   1a97c:	ldr	r1, [sp, #12]
   1a980:	sub	r0, r0, r1
   1a984:	b	1aa48 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x360>
   1a988:	cmp	lr, #66	; 0x42
   1a98c:	bne	1aa18 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x330>
   1a990:	add	r3, r1, #1
   1a994:	mov	r0, r3
   1a998:	cmp	r3, ip
   1a99c:	bcs	1a954 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x26c>
   1a9a0:	cmp	r0, #7
   1a9a4:	bhi	1a954 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x26c>
   1a9a8:	ldrb	r3, [r6, r0]
   1a9ac:	ldr	r8, [sp, #24]
   1a9b0:	ldrb	r3, [r2, r3]
   1a9b4:	sub	r3, r3, #65	; 0x41
   1a9b8:	uxtb	r7, r3
   1a9bc:	add	r3, r0, #1
   1a9c0:	cmp	r7, #2
   1a9c4:	bcc	1a994 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ac>
   1a9c8:	b	1a954 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x26c>
   1a9cc:	ldr	r1, [sp, #20]
   1a9d0:	cmp	r1, #2
   1a9d4:	bcc	1a978 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x290>
   1a9d8:	ldrb	r1, [sp, #34]	; 0x22
   1a9dc:	ands	r2, r1, #3
   1a9e0:	bne	1a978 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x290>
   1a9e4:	ldrb	r3, [sp, #33]	; 0x21
   1a9e8:	ldrb	r2, [sp, #32]
   1a9ec:	ldr	r8, [sp, #24]
   1a9f0:	lsl	r7, r3, #4
   1a9f4:	orr	r1, r7, r1, lsr #2
   1a9f8:	ldr	r7, [sp, #16]
   1a9fc:	strb	r1, [r7, #1]
   1aa00:	lsr	r1, r3, #4
   1aa04:	orr	r1, r1, r2, lsl #2
   1aa08:	strb	r1, [r7]
   1aa0c:	add	r7, r7, #2
   1aa10:	str	r7, [sp, #16]
   1aa14:	b	1aa38 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x350>
   1aa18:	mov	r0, r1
   1aa1c:	b	1a954 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x26c>
   1aa20:	ldrb	r2, [sp, #32]
   1aa24:	lsl	r2, r2, #2
   1aa28:	orr	r1, r2, r1, lsr #4
   1aa2c:	ldr	r2, [sp, #16]
   1aa30:	strb	r1, [r2], #1
   1aa34:	str	r2, [sp, #16]
   1aa38:	cmp	ip, #0
   1aa3c:	beq	1aa58 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x370>
   1aa40:	ldr	r0, [sp, #28]
   1aa44:	sub	r0, r0, ip
   1aa48:	ldr	r6, [fp, #8]
   1aa4c:	ldr	r7, [sp, #8]
   1aa50:	add	r0, r9, r0
   1aa54:	b	1a7a8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xc0>
   1aa58:	ldr	r0, [sp, #4]
   1aa5c:	ldr	r1, [sp, #16]
   1aa60:	ldr	r7, [sp, #8]
   1aa64:	sub	r0, r1, r0
   1aa68:	cmp	r8, r0
   1aa6c:	bls	1aa84 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x39c>
   1aa70:	sub	r1, r8, r0
   1aa74:	ldr	r0, [r5]
   1aa78:	bl	15460 <flatcc_builder_truncate_vector@@Base>
   1aa7c:	cmp	r0, #0
   1aa80:	bne	1a804 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
   1aa84:	ldr	r0, [r5]
   1aa88:	bl	16698 <flatcc_builder_end_vector@@Base>
   1aa8c:	cmp	r0, #0
   1aa90:	str	r0, [r7]
   1aa94:	beq	1a804 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
   1aa98:	ldrb	r0, [sl]
   1aa9c:	cmp	r0, #34	; 0x22
   1aaa0:	bne	1aaac <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c4>
   1aaa4:	add	r4, sl, #1
   1aaa8:	b	1a834 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   1aaac:	ldr	r0, [r5, #24]
   1aab0:	cmp	r0, #0
   1aab4:	bne	1a834 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   1aab8:	mov	r0, #20
   1aabc:	b	1a81c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x134>

0001aac0 <flatcc_json_parser_build_string@@Base>:
   1aac0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aac4:	add	fp, sp, #28
   1aac8:	sub	sp, sp, #4
   1aacc:	mov	r9, r3
   1aad0:	mov	sl, r2
   1aad4:	mov	r5, r0
   1aad8:	cmp	r1, r2
   1aadc:	beq	1aaf4 <flatcc_json_parser_build_string@@Base+0x34>
   1aae0:	ldrb	r0, [r1]
   1aae4:	cmp	r0, #34	; 0x22
   1aae8:	bne	1aaf4 <flatcc_json_parser_build_string@@Base+0x34>
   1aaec:	add	r6, r1, #1
   1aaf0:	b	1ab24 <flatcc_json_parser_build_string@@Base+0x64>
   1aaf4:	ldr	r0, [r5, #24]
   1aaf8:	mov	r6, sl
   1aafc:	cmp	r0, #0
   1ab00:	bne	1ab24 <flatcc_json_parser_build_string@@Base+0x64>
   1ab04:	str	r1, [r5, #36]	; 0x24
   1ab08:	add	r1, r1, #1
   1ab0c:	mov	r0, #16
   1ab10:	mov	r6, sl
   1ab14:	ldr	r2, [r5, #4]
   1ab18:	sub	r1, r1, r2
   1ab1c:	str	r1, [r5, #20]
   1ab20:	str	r0, [r5, #24]
   1ab24:	mov	r0, r5
   1ab28:	mov	r1, r6
   1ab2c:	mov	r2, sl
   1ab30:	bl	186b4 <flatcc_json_parser_string_part@@Base>
   1ab34:	mov	r4, r0
   1ab38:	cmp	r0, sl
   1ab3c:	beq	1ab64 <flatcc_json_parser_build_string@@Base+0xa4>
   1ab40:	ldrb	r0, [r4]
   1ab44:	cmp	r0, #34	; 0x22
   1ab48:	bne	1ab64 <flatcc_json_parser_build_string@@Base+0xa4>
   1ab4c:	ldr	r0, [r5]
   1ab50:	sub	r2, r4, r6
   1ab54:	mov	r1, r6
   1ab58:	bl	1756c <flatcc_builder_create_string@@Base>
   1ab5c:	mov	r6, r4
   1ab60:	b	1ac3c <flatcc_json_parser_build_string@@Base+0x17c>
   1ab64:	ldr	r0, [r5]
   1ab68:	bl	1585c <flatcc_builder_start_string@@Base>
   1ab6c:	cmp	r0, #0
   1ab70:	beq	1ab80 <flatcc_json_parser_build_string@@Base+0xc0>
   1ab74:	mov	r0, #0
   1ab78:	str	r0, [r9]
   1ab7c:	b	1ac88 <flatcc_json_parser_build_string@@Base+0x1c8>
   1ab80:	ldr	r0, [r5]
   1ab84:	sub	r2, r4, r6
   1ab88:	mov	r1, r6
   1ab8c:	bl	15324 <flatcc_builder_append_string@@Base>
   1ab90:	cmp	r0, #0
   1ab94:	beq	1ab74 <flatcc_json_parser_build_string@@Base+0xb4>
   1ab98:	cmp	r4, sl
   1ab9c:	mov	r6, sl
   1aba0:	beq	1ac34 <flatcc_json_parser_build_string@@Base+0x174>
   1aba4:	mov	r8, sp
   1aba8:	add	r6, r8, #1
   1abac:	ldrb	r0, [r4]
   1abb0:	cmp	r0, #34	; 0x22
   1abb4:	beq	1ac20 <flatcc_json_parser_build_string@@Base+0x160>
   1abb8:	mov	r0, r5
   1abbc:	mov	r1, r4
   1abc0:	mov	r2, sl
   1abc4:	mov	r3, r8
   1abc8:	bl	18808 <flatcc_json_parser_string_escape@@Base>
   1abcc:	mov	r7, r0
   1abd0:	ldr	r0, [r5]
   1abd4:	ldrb	r2, [sp]
   1abd8:	mov	r1, r6
   1abdc:	bl	15324 <flatcc_builder_append_string@@Base>
   1abe0:	cmp	r0, #0
   1abe4:	beq	1ac28 <flatcc_json_parser_build_string@@Base+0x168>
   1abe8:	mov	r0, r5
   1abec:	mov	r1, r7
   1abf0:	mov	r2, sl
   1abf4:	bl	186b4 <flatcc_json_parser_string_part@@Base>
   1abf8:	cmp	r0, sl
   1abfc:	beq	1ac30 <flatcc_json_parser_build_string@@Base+0x170>
   1ac00:	mov	r4, r0
   1ac04:	sub	r2, r0, r7
   1ac08:	ldr	r0, [r5]
   1ac0c:	mov	r1, r7
   1ac10:	bl	15324 <flatcc_builder_append_string@@Base>
   1ac14:	cmp	r0, #0
   1ac18:	bne	1abac <flatcc_json_parser_build_string@@Base+0xec>
   1ac1c:	b	1ab74 <flatcc_json_parser_build_string@@Base+0xb4>
   1ac20:	mov	r6, r4
   1ac24:	b	1ac34 <flatcc_json_parser_build_string@@Base+0x174>
   1ac28:	mov	r4, r7
   1ac2c:	b	1ab74 <flatcc_json_parser_build_string@@Base+0xb4>
   1ac30:	mov	r6, sl
   1ac34:	ldr	r0, [r5]
   1ac38:	bl	176d8 <flatcc_builder_end_string@@Base>
   1ac3c:	cmp	r6, sl
   1ac40:	str	r0, [r9]
   1ac44:	beq	1ac5c <flatcc_json_parser_build_string@@Base+0x19c>
   1ac48:	ldrb	r0, [r6]
   1ac4c:	cmp	r0, #34	; 0x22
   1ac50:	bne	1ac5c <flatcc_json_parser_build_string@@Base+0x19c>
   1ac54:	add	r4, r6, #1
   1ac58:	b	1ac88 <flatcc_json_parser_build_string@@Base+0x1c8>
   1ac5c:	ldr	r0, [r5, #24]
   1ac60:	cmp	r0, #0
   1ac64:	bne	1ac84 <flatcc_json_parser_build_string@@Base+0x1c4>
   1ac68:	str	r6, [r5, #36]	; 0x24
   1ac6c:	add	r2, r6, #1
   1ac70:	mov	r0, #20
   1ac74:	ldr	r1, [r5, #4]
   1ac78:	sub	r1, r2, r1
   1ac7c:	str	r1, [r5, #20]
   1ac80:	str	r0, [r5, #24]
   1ac84:	mov	r4, sl
   1ac88:	mov	r0, r4
   1ac8c:	sub	sp, fp, #28
   1ac90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ac94 <flatcc_json_parser_prepare_unions@@Base>:
   1ac94:	push	{r4, r5, r6, r7, fp, lr}
   1ac98:	add	fp, sp, #16
   1ac9c:	mov	r5, r1
   1aca0:	mov	r6, r0
   1aca4:	add	r0, r3, r3, lsl #1
   1aca8:	mov	r1, #8
   1acac:	mov	r7, r3
   1acb0:	mov	r4, r2
   1acb4:	add	r1, r1, r0, lsl #3
   1acb8:	ldr	r0, [r6]
   1acbc:	bl	1424c <flatcc_builder_enter_user_frame@@Base>
   1acc0:	mov	r1, r0
   1acc4:	ldr	r0, [fp, #8]
   1acc8:	cmp	r1, #0
   1accc:	str	r1, [r0]
   1acd0:	beq	1ace8 <flatcc_json_parser_prepare_unions@@Base+0x54>
   1acd4:	ldr	r0, [r6]
   1acd8:	bl	1439c <flatcc_builder_get_user_frame_ptr@@Base>
   1acdc:	mov	r4, r5
   1ace0:	str	r7, [r0]
   1ace4:	b	1ad10 <flatcc_json_parser_prepare_unions@@Base+0x7c>
   1ace8:	ldr	r0, [r6, #24]
   1acec:	cmp	r0, #0
   1acf0:	bne	1ad10 <flatcc_json_parser_prepare_unions@@Base+0x7c>
   1acf4:	str	r5, [r6, #36]	; 0x24
   1acf8:	add	r2, r5, #1
   1acfc:	mov	r0, #33	; 0x21
   1ad00:	ldr	r1, [r6, #4]
   1ad04:	sub	r1, r2, r1
   1ad08:	str	r1, [r6, #20]
   1ad0c:	str	r0, [r6, #24]
   1ad10:	mov	r0, r4
   1ad14:	pop	{r4, r5, r6, r7, fp, pc}

0001ad18 <flatcc_json_parser_finalize_unions@@Base>:
   1ad18:	push	{r4, r5, r6, r7, fp, lr}
   1ad1c:	add	fp, sp, #16
   1ad20:	mov	r6, r0
   1ad24:	ldr	r0, [r0]
   1ad28:	mov	r7, r1
   1ad2c:	mov	r1, r3
   1ad30:	mov	r5, r3
   1ad34:	mov	r4, r2
   1ad38:	bl	1439c <flatcc_builder_get_user_frame_ptr@@Base>
   1ad3c:	ldr	r0, [r0, #4]
   1ad40:	cmp	r0, #0
   1ad44:	beq	1ad74 <flatcc_json_parser_finalize_unions@@Base+0x5c>
   1ad48:	ldr	r0, [r6, #24]
   1ad4c:	cmp	r0, #0
   1ad50:	bne	1ad78 <flatcc_json_parser_finalize_unions@@Base+0x60>
   1ad54:	str	r7, [r6, #36]	; 0x24
   1ad58:	add	r2, r7, #1
   1ad5c:	mov	r0, #27
   1ad60:	ldr	r1, [r6, #4]
   1ad64:	sub	r1, r2, r1
   1ad68:	str	r1, [r6, #20]
   1ad6c:	str	r0, [r6, #24]
   1ad70:	b	1ad78 <flatcc_json_parser_finalize_unions@@Base+0x60>
   1ad74:	mov	r4, r7
   1ad78:	ldr	r0, [r6]
   1ad7c:	mov	r1, r5
   1ad80:	bl	14358 <flatcc_builder_exit_user_frame_at@@Base>
   1ad84:	mov	r0, r4
   1ad88:	pop	{r4, r5, r6, r7, fp, pc}

0001ad8c <flatcc_json_parser_union@@Base>:
   1ad8c:	push	{r4, r5, r6, r7, fp, lr}
   1ad90:	add	fp, sp, #16
   1ad94:	sub	sp, sp, #16
   1ad98:	mov	r6, r1
   1ad9c:	mov	r5, r0
   1ada0:	ldr	r0, [r0]
   1ada4:	ldr	r1, [fp, #12]
   1ada8:	mov	r7, r3
   1adac:	mov	r4, r2
   1adb0:	bl	1439c <flatcc_builder_get_user_frame_ptr@@Base>
   1adb4:	add	r2, r0, #8
   1adb8:	add	r3, r7, r7, lsl #1
   1adbc:	mov	r1, r2
   1adc0:	ldr	r7, [r1, r3, lsl #3]!
   1adc4:	cmp	r7, #0
   1adc8:	beq	1adf8 <flatcc_json_parser_union@@Base+0x6c>
   1adcc:	ldr	r0, [r5, #24]
   1add0:	cmp	r0, #0
   1add4:	bne	1aeb8 <flatcc_json_parser_union@@Base+0x12c>
   1add8:	mov	r0, #28
   1addc:	str	r6, [r5, #36]	; 0x24
   1ade0:	add	r2, r6, #1
   1ade4:	ldr	r1, [r5, #4]
   1ade8:	sub	r1, r2, r1
   1adec:	str	r1, [r5, #20]
   1adf0:	str	r0, [r5, #24]
   1adf4:	b	1aeb8 <flatcc_json_parser_union@@Base+0x12c>
   1adf8:	add	r2, r2, r3, lsl #3
   1adfc:	ldrb	r3, [r2, #12]
   1ae00:	cmp	r3, #0
   1ae04:	beq	1ae74 <flatcc_json_parser_union@@Base+0xe8>
   1ae08:	ldrb	r3, [r2, #13]
   1ae0c:	cmp	r3, #0
   1ae10:	strb	r3, [sp, #8]
   1ae14:	beq	1aeac <flatcc_json_parser_union@@Base+0x120>
   1ae18:	ldr	r1, [r0, #4]
   1ae1c:	ldr	r7, [fp, #16]
   1ae20:	mov	r2, r4
   1ae24:	sub	r1, r1, #1
   1ae28:	str	r1, [r0, #4]
   1ae2c:	add	r0, sp, #8
   1ae30:	mov	r1, r6
   1ae34:	add	r0, r0, #4
   1ae38:	str	r0, [sp]
   1ae3c:	mov	r0, r5
   1ae40:	blx	r7
   1ae44:	cmp	r0, r4
   1ae48:	beq	1aeb8 <flatcc_json_parser_union@@Base+0x12c>
   1ae4c:	mov	r6, r0
   1ae50:	ldr	r1, [fp, #8]
   1ae54:	ldr	r0, [r5]
   1ae58:	ldr	r2, [sp, #8]
   1ae5c:	ldr	r3, [sp, #12]
   1ae60:	bl	16a8c <flatcc_builder_table_add_union@@Base>
   1ae64:	cmp	r0, #0
   1ae68:	bne	1adcc <flatcc_json_parser_union@@Base+0x40>
   1ae6c:	mov	r4, r6
   1ae70:	b	1aeb8 <flatcc_json_parser_union@@Base+0x12c>
   1ae74:	ldr	r3, [r0, #4]
   1ae78:	add	r3, r3, #1
   1ae7c:	str	r3, [r0, #4]
   1ae80:	ldr	r0, [r5, #16]
   1ae84:	str	r0, [r2, #8]
   1ae88:	ldr	r0, [r5, #4]
   1ae8c:	str	r0, [r2, #4]
   1ae90:	str	r6, [r1]
   1ae94:	mov	r0, r5
   1ae98:	mov	r1, r6
   1ae9c:	mov	r2, r4
   1aea0:	bl	18ff4 <flatcc_json_parser_generic_json@@Base>
   1aea4:	mov	r4, r0
   1aea8:	b	1aeb8 <flatcc_json_parser_union@@Base+0x12c>
   1aeac:	ldr	r0, [r5, #24]
   1aeb0:	cmp	r0, #0
   1aeb4:	beq	1aec4 <flatcc_json_parser_union@@Base+0x138>
   1aeb8:	mov	r0, r4
   1aebc:	sub	sp, fp, #16
   1aec0:	pop	{r4, r5, r6, r7, fp, pc}
   1aec4:	mov	r0, #25
   1aec8:	b	1addc <flatcc_json_parser_union@@Base+0x50>

0001aecc <flatcc_json_parser_union_type@@Base>:
   1aecc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aed0:	add	fp, sp, #28
   1aed4:	sub	sp, sp, #28
   1aed8:	mov	r7, r1
   1aedc:	mov	r5, r0
   1aee0:	ldr	r0, [r0]
   1aee4:	ldr	r1, [fp, #12]
   1aee8:	mov	r4, r3
   1aeec:	mov	r8, r2
   1aef0:	bl	1439c <flatcc_builder_get_user_frame_ptr@@Base>
   1aef4:	add	r2, r0, #8
   1aef8:	add	sl, r4, r4, lsl #1
   1aefc:	mov	r6, r0
   1af00:	str	r8, [sp, #8]
   1af04:	add	r9, r2, sl, lsl #3
   1af08:	mov	r0, r9
   1af0c:	ldrb	r1, [r0, #12]!
   1af10:	cmp	r1, #0
   1af14:	beq	1af50 <flatcc_json_parser_union_type@@Base+0x84>
   1af18:	ldr	r0, [r5, #24]
   1af1c:	cmp	r0, #0
   1af20:	bne	1af40 <flatcc_json_parser_union_type@@Base+0x74>
   1af24:	str	r7, [r5, #36]	; 0x24
   1af28:	mov	r0, #28
   1af2c:	add	r2, r7, #1
   1af30:	ldr	r1, [r5, #4]
   1af34:	sub	r1, r2, r1
   1af38:	str	r1, [r5, #20]
   1af3c:	str	r0, [r5, #24]
   1af40:	ldr	r3, [sp, #8]
   1af44:	mov	r0, r3
   1af48:	sub	sp, fp, #28
   1af4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af50:	mov	r1, #1
   1af54:	mov	r4, r9
   1af58:	str	r2, [sp, #4]
   1af5c:	cmp	r7, r8
   1af60:	mov	r2, r8
   1af64:	strb	r1, [r0]
   1af68:	mov	r0, #0
   1af6c:	str	r0, [sp, #20]
   1af70:	str	r0, [sp, #16]
   1af74:	str	r0, [sp, #12]
   1af78:	strb	r0, [r4, #13]!
   1af7c:	beq	1b020 <flatcc_json_parser_union_type@@Base+0x154>
   1af80:	add	r0, sp, #16
   1af84:	add	r3, sp, #12
   1af88:	mov	r1, r7
   1af8c:	str	r0, [sp]
   1af90:	mov	r0, r5
   1af94:	bl	1a598 <flatcc_json_parser_integer@@Base>
   1af98:	ldr	r2, [sp, #8]
   1af9c:	cmp	r0, r7
   1afa0:	beq	1b020 <flatcc_json_parser_union_type@@Base+0x154>
   1afa4:	ldr	r1, [sp, #12]
   1afa8:	cmp	r1, #0
   1afac:	beq	1afc8 <flatcc_json_parser_union_type@@Base+0xfc>
   1afb0:	ldr	r1, [r5, #24]
   1afb4:	mov	r3, r2
   1afb8:	cmp	r1, #0
   1afbc:	bne	1b018 <flatcc_json_parser_union_type@@Base+0x14c>
   1afc0:	mov	r1, #8
   1afc4:	b	1aff0 <flatcc_json_parser_union_type@@Base+0x124>
   1afc8:	ldr	r1, [sp, #16]
   1afcc:	ldr	ip, [sp, #20]
   1afd0:	subs	r3, r1, #256	; 0x100
   1afd4:	sbcs	r3, ip, #0
   1afd8:	bcc	1b010 <flatcc_json_parser_union_type@@Base+0x144>
   1afdc:	ldr	r1, [r5, #24]
   1afe0:	mov	r3, r2
   1afe4:	cmp	r1, #0
   1afe8:	bne	1b018 <flatcc_json_parser_union_type@@Base+0x14c>
   1afec:	mov	r1, #7
   1aff0:	str	r0, [r5, #36]	; 0x24
   1aff4:	add	r0, r0, #1
   1aff8:	ldr	r3, [r5, #4]
   1affc:	sub	r0, r0, r3
   1b000:	mov	r3, r2
   1b004:	str	r0, [r5, #20]
   1b008:	str	r1, [r5, #24]
   1b00c:	b	1b018 <flatcc_json_parser_union_type@@Base+0x14c>
   1b010:	mov	r3, r0
   1b014:	strb	r1, [r4]
   1b018:	cmp	r3, r7
   1b01c:	bne	1b03c <flatcc_json_parser_union_type@@Base+0x170>
   1b020:	ldr	r3, [fp, #16]
   1b024:	mov	r0, r5
   1b028:	mov	r1, r7
   1b02c:	str	r4, [sp]
   1b030:	bl	1b128 <flatcc_json_parser_union_type@@Base+0x25c>
   1b034:	ldr	r2, [sp, #8]
   1b038:	mov	r3, r0
   1b03c:	ldr	r0, [sp, #4]
   1b040:	ldr	r1, [r0, sl, lsl #3]
   1b044:	cmp	r1, #0
   1b048:	beq	1b0e0 <flatcc_json_parser_union_type@@Base+0x214>
   1b04c:	ldr	r0, [r6, #4]
   1b050:	cmp	r0, #0
   1b054:	beq	1b108 <flatcc_json_parser_union_type@@Base+0x23c>
   1b058:	sub	r0, r0, #1
   1b05c:	mov	sl, r3
   1b060:	ldr	r7, [fp, #20]
   1b064:	str	r0, [r6, #4]
   1b068:	ldr	r0, [r9, #8]
   1b06c:	ldr	r8, [r5, #4]
   1b070:	ldr	r6, [r5, #16]
   1b074:	str	r0, [r5, #16]
   1b078:	ldr	r0, [r9, #4]
   1b07c:	str	r0, [r5, #4]
   1b080:	add	r0, sp, #16
   1b084:	ldrb	r3, [r4]
   1b088:	add	r0, r0, #4
   1b08c:	str	r0, [sp]
   1b090:	mov	r0, r5
   1b094:	strb	r3, [sp, #16]
   1b098:	blx	r7
   1b09c:	ldr	r3, [sp, #8]
   1b0a0:	cmp	r0, r3
   1b0a4:	beq	1af44 <flatcc_json_parser_union_type@@Base+0x78>
   1b0a8:	ldr	r1, [fp, #8]
   1b0ac:	ldr	r0, [r5]
   1b0b0:	ldr	r2, [sp, #16]
   1b0b4:	ldr	r3, [sp, #20]
   1b0b8:	bl	16a8c <flatcc_builder_table_add_union@@Base>
   1b0bc:	cmp	r0, #0
   1b0c0:	beq	1b0f8 <flatcc_json_parser_union_type@@Base+0x22c>
   1b0c4:	ldr	r0, [r5, #24]
   1b0c8:	cmp	r0, #0
   1b0cc:	bne	1af40 <flatcc_json_parser_union_type@@Base+0x74>
   1b0d0:	str	sl, [r5, #36]	; 0x24
   1b0d4:	mov	r0, #28
   1b0d8:	add	r2, sl, #1
   1b0dc:	b	1af30 <flatcc_json_parser_union_type@@Base+0x64>
   1b0e0:	ldrb	r0, [r4]
   1b0e4:	ldr	r1, [r6, #4]
   1b0e8:	cmp	r0, #0
   1b0ec:	addne	r1, r1, #1
   1b0f0:	str	r1, [r6, #4]
   1b0f4:	b	1af44 <flatcc_json_parser_union_type@@Base+0x78>
   1b0f8:	mov	r3, sl
   1b0fc:	str	r8, [r5, #4]
   1b100:	str	r6, [r5, #16]
   1b104:	b	1af44 <flatcc_json_parser_union_type@@Base+0x78>
   1b108:	movw	r0, #59005	; 0xe67d
   1b10c:	movw	r1, #59020	; 0xe68c
   1b110:	movw	r3, #59094	; 0xe6d6
   1b114:	movw	r2, #965	; 0x3c5
   1b118:	movt	r0, #1
   1b11c:	movt	r1, #1
   1b120:	movt	r3, #1
   1b124:	bl	129c4 <__assert_fail@plt>
   1b128:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b12c:	add	fp, sp, #28
   1b130:	sub	sp, sp, #44	; 0x2c
   1b134:	mov	r4, r2
   1b138:	mov	r2, r1
   1b13c:	ldr	r1, [fp, #8]
   1b140:	mov	r5, r0
   1b144:	mov	r0, #0
   1b148:	cmp	r2, r4
   1b14c:	strb	r0, [r1]
   1b150:	beq	1b1b4 <flatcc_json_parser_union_type@@Base+0x2e8>
   1b154:	ldrb	r0, [r2]
   1b158:	cmp	r0, #46	; 0x2e
   1b15c:	beq	1b178 <flatcc_json_parser_union_type@@Base+0x2ac>
   1b160:	cmp	r0, #34	; 0x22
   1b164:	bne	1b1ac <flatcc_json_parser_union_type@@Base+0x2e0>
   1b168:	mov	r0, #0
   1b16c:	add	r1, r2, #1
   1b170:	str	r0, [r5, #12]
   1b174:	b	1b1b8 <flatcc_json_parser_union_type@@Base+0x2ec>
   1b178:	ldr	r0, [r5, #24]
   1b17c:	mov	r1, r4
   1b180:	cmp	r0, #0
   1b184:	bne	1b1b8 <flatcc_json_parser_union_type@@Base+0x2ec>
   1b188:	str	r2, [r5, #36]	; 0x24
   1b18c:	add	r2, r2, #1
   1b190:	mov	r0, #5
   1b194:	ldr	r1, [r5, #4]
   1b198:	sub	r1, r2, r1
   1b19c:	str	r1, [r5, #20]
   1b1a0:	str	r0, [r5, #24]
   1b1a4:	mov	r1, r4
   1b1a8:	b	1b1b8 <flatcc_json_parser_union_type@@Base+0x2ec>
   1b1ac:	mov	r0, #1
   1b1b0:	str	r0, [r5, #12]
   1b1b4:	mov	r1, r2
   1b1b8:	ldr	r0, [r5, #12]
   1b1bc:	cmp	r0, #0
   1b1c0:	beq	1b1cc <flatcc_json_parser_union_type@@Base+0x300>
   1b1c4:	mov	r7, r1
   1b1c8:	b	1b210 <flatcc_json_parser_union_type@@Base+0x344>
   1b1cc:	sub	r0, r4, r1
   1b1d0:	cmp	r0, #2
   1b1d4:	blt	1b1f8 <flatcc_json_parser_union_type@@Base+0x32c>
   1b1d8:	ldrb	r0, [r1]
   1b1dc:	cmp	r0, #32
   1b1e0:	bhi	1b1c4 <flatcc_json_parser_union_type@@Base+0x2f8>
   1b1e4:	bne	1b1f8 <flatcc_json_parser_union_type@@Base+0x32c>
   1b1e8:	mov	r7, r1
   1b1ec:	ldrb	r0, [r7, #1]!
   1b1f0:	cmp	r0, #32
   1b1f4:	bhi	1b210 <flatcc_json_parser_union_type@@Base+0x344>
   1b1f8:	mov	r0, r5
   1b1fc:	mov	r2, r4
   1b200:	mov	r6, r3
   1b204:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   1b208:	mov	r3, r6
   1b20c:	mov	r7, r0
   1b210:	cmp	r7, r4
   1b214:	beq	1b30c <flatcc_json_parser_union_type@@Base+0x440>
   1b218:	add	r9, r3, #4
   1b21c:	mov	r6, #0
   1b220:	add	sl, sp, #32
   1b224:	add	r8, sp, #28
   1b228:	str	r3, [sp, #16]
   1b22c:	str	r9, [sp, #12]
   1b230:	str	r6, [sp, #20]
   1b234:	mov	r6, r3
   1b238:	ldr	r6, [r3]
   1b23c:	add	r0, sp, #24
   1b240:	mov	r1, r7
   1b244:	mov	r2, r4
   1b248:	mov	r3, r8
   1b24c:	str	sl, [sp]
   1b250:	str	r0, [sp, #4]
   1b254:	mov	r0, r5
   1b258:	blx	r6
   1b25c:	cmp	r0, r4
   1b260:	beq	1b30c <flatcc_json_parser_union_type@@Base+0x440>
   1b264:	cmp	r0, r7
   1b268:	bne	1b27c <flatcc_json_parser_union_type@@Base+0x3b0>
   1b26c:	ldr	r6, [r9], #4
   1b270:	cmp	r6, #0
   1b274:	bne	1b23c <flatcc_json_parser_union_type@@Base+0x370>
   1b278:	b	1b2e4 <flatcc_json_parser_union_type@@Base+0x418>
   1b27c:	ldr	r6, [sp, #20]
   1b280:	cmp	r6, #0
   1b284:	ldrne	r1, [r5, #12]
   1b288:	cmpne	r1, #0
   1b28c:	bne	1b340 <flatcc_json_parser_union_type@@Base+0x474>
   1b290:	ldr	r1, [sp, #28]
   1b294:	cmp	r1, #0
   1b298:	bne	1b318 <flatcc_json_parser_union_type@@Base+0x44c>
   1b29c:	ldr	r1, [sp, #32]
   1b2a0:	ldr	r2, [sp, #36]	; 0x24
   1b2a4:	subs	r3, r1, #256	; 0x100
   1b2a8:	sbcs	r2, r2, #0
   1b2ac:	bcs	1b32c <flatcc_json_parser_union_type@@Base+0x460>
   1b2b0:	ldr	r2, [fp, #8]
   1b2b4:	ldr	r9, [sp, #12]
   1b2b8:	add	r6, r6, #1
   1b2bc:	mov	r7, r0
   1b2c0:	mov	r3, r2
   1b2c4:	ldrb	r2, [r2]
   1b2c8:	add	r1, r2, r1
   1b2cc:	strb	r1, [r3]
   1b2d0:	ldr	r3, [sp, #16]
   1b2d4:	ldr	r1, [sp, #24]
   1b2d8:	cmp	r1, #0
   1b2dc:	bne	1b230 <flatcc_json_parser_union_type@@Base+0x364>
   1b2e0:	b	1b310 <flatcc_json_parser_union_type@@Base+0x444>
   1b2e4:	ldr	r0, [r5, #24]
   1b2e8:	cmp	r0, #0
   1b2ec:	bne	1b30c <flatcc_json_parser_union_type@@Base+0x440>
   1b2f0:	str	r7, [r5, #36]	; 0x24
   1b2f4:	add	r2, r7, #1
   1b2f8:	mov	r0, #23
   1b2fc:	ldr	r1, [r5, #4]
   1b300:	sub	r1, r2, r1
   1b304:	str	r1, [r5, #20]
   1b308:	str	r0, [r5, #24]
   1b30c:	mov	r0, r4
   1b310:	sub	sp, fp, #28
   1b314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b318:	ldr	r1, [r5, #24]
   1b31c:	cmp	r1, #0
   1b320:	bne	1b30c <flatcc_json_parser_union_type@@Base+0x440>
   1b324:	mov	r1, #8
   1b328:	b	1b350 <flatcc_json_parser_union_type@@Base+0x484>
   1b32c:	ldr	r1, [r5, #24]
   1b330:	cmp	r1, #0
   1b334:	bne	1b30c <flatcc_json_parser_union_type@@Base+0x440>
   1b338:	mov	r1, #7
   1b33c:	b	1b350 <flatcc_json_parser_union_type@@Base+0x484>
   1b340:	ldr	r1, [r5, #24]
   1b344:	cmp	r1, #0
   1b348:	bne	1b30c <flatcc_json_parser_union_type@@Base+0x440>
   1b34c:	mov	r1, #14
   1b350:	str	r0, [r5, #36]	; 0x24
   1b354:	add	r0, r0, #1
   1b358:	ldr	r2, [r5, #4]
   1b35c:	sub	r0, r0, r2
   1b360:	str	r0, [r5, #20]
   1b364:	str	r1, [r5, #24]
   1b368:	b	1b30c <flatcc_json_parser_union_type@@Base+0x440>

0001b36c <flatcc_json_parser_union_vector@@Base>:
   1b36c:	push	{r4, r5, r6, r7, fp, lr}
   1b370:	add	fp, sp, #16
   1b374:	sub	sp, sp, #16
   1b378:	mov	r6, r1
   1b37c:	mov	r5, r0
   1b380:	ldr	r0, [r0]
   1b384:	ldr	r1, [fp, #12]
   1b388:	mov	r7, r3
   1b38c:	mov	r4, r2
   1b390:	bl	1439c <flatcc_builder_get_user_frame_ptr@@Base>
   1b394:	add	r2, r0, #8
   1b398:	add	r3, r7, r7, lsl #1
   1b39c:	mov	r1, r2
   1b3a0:	ldr	r7, [r1, r3, lsl #3]!
   1b3a4:	cmp	r7, #0
   1b3a8:	beq	1b3e0 <flatcc_json_parser_union_vector@@Base+0x74>
   1b3ac:	ldr	r0, [r5, #24]
   1b3b0:	cmp	r0, #0
   1b3b4:	bne	1b3d4 <flatcc_json_parser_union_vector@@Base+0x68>
   1b3b8:	str	r6, [r5, #36]	; 0x24
   1b3bc:	add	r2, r6, #1
   1b3c0:	mov	r0, #28
   1b3c4:	ldr	r1, [r5, #4]
   1b3c8:	sub	r1, r2, r1
   1b3cc:	str	r1, [r5, #20]
   1b3d0:	str	r0, [r5, #24]
   1b3d4:	mov	r0, r4
   1b3d8:	sub	sp, fp, #16
   1b3dc:	pop	{r4, r5, r6, r7, fp, pc}
   1b3e0:	add	r2, r2, r3, lsl #3
   1b3e4:	ldr	r3, [r0, #4]
   1b3e8:	ldrb	r7, [r2, #12]
   1b3ec:	cmp	r7, #0
   1b3f0:	beq	1b42c <flatcc_json_parser_union_vector@@Base+0xc0>
   1b3f4:	sub	r3, r3, #1
   1b3f8:	ldr	r1, [fp, #16]
   1b3fc:	ldr	r7, [fp, #8]
   1b400:	str	r3, [r0, #4]
   1b404:	ldr	r0, [r2, #16]
   1b408:	ldr	r3, [r2, #20]
   1b40c:	mov	r2, r4
   1b410:	stm	sp, {r0, r7}
   1b414:	str	r1, [sp, #8]
   1b418:	mov	r0, r5
   1b41c:	mov	r1, r6
   1b420:	bl	1b460 <flatcc_json_parser_union_vector@@Base+0xf4>
   1b424:	sub	sp, fp, #16
   1b428:	pop	{r4, r5, r6, r7, fp, pc}
   1b42c:	add	r3, r3, #1
   1b430:	str	r3, [r0, #4]
   1b434:	ldr	r0, [r5, #16]
   1b438:	str	r0, [r2, #8]
   1b43c:	ldr	r0, [r5, #4]
   1b440:	str	r0, [r2, #4]
   1b444:	str	r6, [r1]
   1b448:	mov	r0, r5
   1b44c:	mov	r1, r6
   1b450:	mov	r2, r4
   1b454:	sub	sp, fp, #16
   1b458:	pop	{r4, r5, r6, r7, fp, lr}
   1b45c:	b	18ff4 <flatcc_json_parser_generic_json@@Base>
   1b460:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b464:	add	fp, sp, #28
   1b468:	sub	sp, sp, #12
   1b46c:	mov	r5, r0
   1b470:	mov	r0, #0
   1b474:	mov	r8, r3
   1b478:	mov	r6, r2
   1b47c:	mov	r7, r1
   1b480:	str	r0, [sp, #8]
   1b484:	ldr	r0, [r5]
   1b488:	bl	156b8 <flatcc_builder_start_offset_vector@@Base>
   1b48c:	cmp	r0, #0
   1b490:	beq	1b4b0 <flatcc_json_parser_union_vector@@Base+0x144>
   1b494:	ldr	r0, [r5, #24]
   1b498:	cmp	r0, #0
   1b49c:	bne	1b71c <flatcc_json_parser_union_vector@@Base+0x3b0>
   1b4a0:	str	r7, [r5, #36]	; 0x24
   1b4a4:	mov	r0, #33	; 0x21
   1b4a8:	add	r2, r7, #1
   1b4ac:	b	1b70c <flatcc_json_parser_union_vector@@Base+0x3a0>
   1b4b0:	ldr	sl, [fp, #8]
   1b4b4:	cmp	r7, r6
   1b4b8:	beq	1b4ec <flatcc_json_parser_union_vector@@Base+0x180>
   1b4bc:	ldrb	r0, [r7]
   1b4c0:	cmp	r0, #91	; 0x5b
   1b4c4:	bne	1b4ec <flatcc_json_parser_union_vector@@Base+0x180>
   1b4c8:	add	r1, r7, #1
   1b4cc:	sub	r0, r6, r1
   1b4d0:	cmp	r0, #2
   1b4d4:	blt	1b530 <flatcc_json_parser_union_vector@@Base+0x1c4>
   1b4d8:	ldrb	r0, [r1]
   1b4dc:	cmp	r0, #32
   1b4e0:	bls	1b520 <flatcc_json_parser_union_vector@@Base+0x1b4>
   1b4e4:	mov	r7, r1
   1b4e8:	b	1b540 <flatcc_json_parser_union_vector@@Base+0x1d4>
   1b4ec:	ldr	r0, [r5, #24]
   1b4f0:	mov	r9, r6
   1b4f4:	cmp	r0, #0
   1b4f8:	bne	1b6ec <flatcc_json_parser_union_vector@@Base+0x380>
   1b4fc:	str	r7, [r5, #36]	; 0x24
   1b500:	add	r2, r7, #1
   1b504:	mov	r0, #22
   1b508:	mov	r9, r6
   1b50c:	ldr	r1, [r5, #4]
   1b510:	sub	r1, r2, r1
   1b514:	str	r1, [r5, #20]
   1b518:	str	r0, [r5, #24]
   1b51c:	b	1b6ec <flatcc_json_parser_union_vector@@Base+0x380>
   1b520:	bne	1b530 <flatcc_json_parser_union_vector@@Base+0x1c4>
   1b524:	ldrb	r0, [r7, #2]!
   1b528:	cmp	r0, #32
   1b52c:	bhi	1b540 <flatcc_json_parser_union_vector@@Base+0x1d4>
   1b530:	mov	r0, r5
   1b534:	mov	r2, r6
   1b538:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   1b53c:	mov	r7, r0
   1b540:	cmp	r7, r6
   1b544:	mov	r4, r6
   1b548:	beq	1b580 <flatcc_json_parser_union_vector@@Base+0x214>
   1b54c:	ldrb	r0, [r7]
   1b550:	cmp	r0, #93	; 0x5d
   1b554:	bne	1b57c <flatcc_json_parser_union_vector@@Base+0x210>
   1b558:	add	r1, r7, #1
   1b55c:	sub	r0, r6, r1
   1b560:	cmp	r0, #2
   1b564:	blt	1b6dc <flatcc_json_parser_union_vector@@Base+0x370>
   1b568:	ldrb	r0, [r1]
   1b56c:	cmp	r0, #32
   1b570:	bls	1b6c8 <flatcc_json_parser_union_vector@@Base+0x35c>
   1b574:	mov	r9, r1
   1b578:	b	1b6ec <flatcc_json_parser_union_vector@@Base+0x380>
   1b57c:	mov	r4, r7
   1b580:	cmp	sl, #0
   1b584:	beq	1b6ac <flatcc_json_parser_union_vector@@Base+0x340>
   1b588:	add	r0, r6, #1
   1b58c:	mov	sl, #0
   1b590:	add	r9, sp, #8
   1b594:	str	r0, [sp, #4]
   1b598:	ldr	r0, [r5]
   1b59c:	mov	r1, r8
   1b5a0:	bl	1439c <flatcc_builder_get_user_frame_ptr@@Base>
   1b5a4:	ldrb	r3, [r0, -sl]
   1b5a8:	ldr	r7, [fp, #16]
   1b5ac:	mov	r0, r5
   1b5b0:	mov	r1, r4
   1b5b4:	mov	r2, r6
   1b5b8:	str	r9, [sp]
   1b5bc:	blx	r7
   1b5c0:	cmp	r0, r6
   1b5c4:	beq	1b71c <flatcc_json_parser_union_vector@@Base+0x3b0>
   1b5c8:	mov	r7, r0
   1b5cc:	ldr	r0, [r5]
   1b5d0:	mov	r1, #1
   1b5d4:	bl	15074 <flatcc_builder_extend_offset_vector@@Base>
   1b5d8:	cmp	r0, #0
   1b5dc:	beq	1b494 <flatcc_json_parser_union_vector@@Base+0x128>
   1b5e0:	ldr	r1, [sp, #8]
   1b5e4:	str	r1, [r0]
   1b5e8:	sub	r0, r6, r7
   1b5ec:	cmp	r0, #2
   1b5f0:	blt	1b61c <flatcc_json_parser_union_vector@@Base+0x2b0>
   1b5f4:	ldrb	r0, [r7]
   1b5f8:	cmp	r0, #32
   1b5fc:	bls	1b608 <flatcc_json_parser_union_vector@@Base+0x29c>
   1b600:	mov	r4, r7
   1b604:	b	1b630 <flatcc_json_parser_union_vector@@Base+0x2c4>
   1b608:	bne	1b61c <flatcc_json_parser_union_vector@@Base+0x2b0>
   1b60c:	mov	r4, r7
   1b610:	ldrb	r0, [r4, #1]!
   1b614:	cmp	r0, #32
   1b618:	bhi	1b630 <flatcc_json_parser_union_vector@@Base+0x2c4>
   1b61c:	mov	r0, r5
   1b620:	mov	r1, r7
   1b624:	mov	r2, r6
   1b628:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   1b62c:	mov	r4, r0
   1b630:	cmp	r4, r6
   1b634:	beq	1b7a0 <flatcc_json_parser_union_vector@@Base+0x434>
   1b638:	ldrb	r0, [r4]
   1b63c:	cmp	r0, #44	; 0x2c
   1b640:	bne	1b728 <flatcc_json_parser_union_vector@@Base+0x3bc>
   1b644:	add	r1, r4, #1
   1b648:	sub	r0, r6, r1
   1b64c:	cmp	r0, #2
   1b650:	blt	1b678 <flatcc_json_parser_union_vector@@Base+0x30c>
   1b654:	ldrb	r0, [r1]
   1b658:	cmp	r0, #32
   1b65c:	bls	1b668 <flatcc_json_parser_union_vector@@Base+0x2fc>
   1b660:	mov	r4, r1
   1b664:	b	1b688 <flatcc_json_parser_union_vector@@Base+0x31c>
   1b668:	bne	1b678 <flatcc_json_parser_union_vector@@Base+0x30c>
   1b66c:	ldrb	r0, [r4, #2]!
   1b670:	cmp	r0, #32
   1b674:	bhi	1b688 <flatcc_json_parser_union_vector@@Base+0x31c>
   1b678:	mov	r0, r5
   1b67c:	mov	r2, r6
   1b680:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   1b684:	mov	r4, r0
   1b688:	cmp	r4, r6
   1b68c:	beq	1b754 <flatcc_json_parser_union_vector@@Base+0x3e8>
   1b690:	ldrb	r0, [r4]
   1b694:	cmp	r0, #93	; 0x5d
   1b698:	beq	1b730 <flatcc_json_parser_union_vector@@Base+0x3c4>
   1b69c:	ldr	r0, [fp, #8]
   1b6a0:	sub	sl, sl, #1
   1b6a4:	adds	r0, r0, sl
   1b6a8:	bne	1b598 <flatcc_json_parser_union_vector@@Base+0x22c>
   1b6ac:	ldr	r0, [r5, #24]
   1b6b0:	cmp	r0, #0
   1b6b4:	bne	1b71c <flatcc_json_parser_union_vector@@Base+0x3b0>
   1b6b8:	str	r4, [r5, #36]	; 0x24
   1b6bc:	mov	r0, #30
   1b6c0:	add	r2, r4, #1
   1b6c4:	b	1b70c <flatcc_json_parser_union_vector@@Base+0x3a0>
   1b6c8:	bne	1b6dc <flatcc_json_parser_union_vector@@Base+0x370>
   1b6cc:	ldrb	r0, [r7, #2]!
   1b6d0:	cmp	r0, #32
   1b6d4:	mov	r9, r7
   1b6d8:	bhi	1b6ec <flatcc_json_parser_union_vector@@Base+0x380>
   1b6dc:	mov	r0, r5
   1b6e0:	mov	r2, r6
   1b6e4:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   1b6e8:	mov	r9, r0
   1b6ec:	cmp	sl, #0
   1b6f0:	beq	1b7dc <flatcc_json_parser_union_vector@@Base+0x470>
   1b6f4:	ldr	r0, [r5, #24]
   1b6f8:	cmp	r0, #0
   1b6fc:	bne	1b71c <flatcc_json_parser_union_vector@@Base+0x3b0>
   1b700:	str	r9, [r5, #36]	; 0x24
   1b704:	mov	r0, #30
   1b708:	add	r2, r9, #1
   1b70c:	ldr	r1, [r5, #4]
   1b710:	sub	r1, r2, r1
   1b714:	str	r1, [r5, #20]
   1b718:	str	r0, [r5, #24]
   1b71c:	mov	r0, r6
   1b720:	sub	sp, fp, #28
   1b724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b728:	cmp	r0, #93	; 0x5d
   1b72c:	bne	1b774 <flatcc_json_parser_union_vector@@Base+0x408>
   1b730:	add	r1, r4, #1
   1b734:	sub	r0, r6, r1
   1b738:	cmp	r0, #2
   1b73c:	blt	1b7bc <flatcc_json_parser_union_vector@@Base+0x450>
   1b740:	ldrb	r0, [r1]
   1b744:	cmp	r0, #32
   1b748:	bls	1b7a8 <flatcc_json_parser_union_vector@@Base+0x43c>
   1b74c:	mov	r9, r1
   1b750:	b	1b7cc <flatcc_json_parser_union_vector@@Base+0x460>
   1b754:	ldr	r0, [r5, #24]
   1b758:	mov	r9, r6
   1b75c:	cmp	r0, #0
   1b760:	bne	1b7cc <flatcc_json_parser_union_vector@@Base+0x460>
   1b764:	str	r6, [r5, #36]	; 0x24
   1b768:	ldr	r2, [sp, #4]
   1b76c:	mov	r0, #9
   1b770:	b	1b790 <flatcc_json_parser_union_vector@@Base+0x424>
   1b774:	ldr	r0, [r5, #24]
   1b778:	mov	r9, r6
   1b77c:	cmp	r0, #0
   1b780:	bne	1b7cc <flatcc_json_parser_union_vector@@Base+0x460>
   1b784:	str	r4, [r5, #36]	; 0x24
   1b788:	mov	r0, #9
   1b78c:	add	r2, r4, #1
   1b790:	ldr	r1, [r5, #4]
   1b794:	sub	r1, r2, r1
   1b798:	str	r1, [r5, #20]
   1b79c:	str	r0, [r5, #24]
   1b7a0:	mov	r9, r6
   1b7a4:	b	1b7cc <flatcc_json_parser_union_vector@@Base+0x460>
   1b7a8:	bne	1b7bc <flatcc_json_parser_union_vector@@Base+0x450>
   1b7ac:	ldrb	r0, [r4, #2]!
   1b7b0:	cmp	r0, #32
   1b7b4:	mov	r9, r4
   1b7b8:	bhi	1b7cc <flatcc_json_parser_union_vector@@Base+0x460>
   1b7bc:	mov	r0, r5
   1b7c0:	mov	r2, r6
   1b7c4:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   1b7c8:	mov	r9, r0
   1b7cc:	ldr	r0, [fp, #8]
   1b7d0:	add	r0, r0, sl
   1b7d4:	cmp	r0, #1
   1b7d8:	bne	1b6f4 <flatcc_json_parser_union_vector@@Base+0x388>
   1b7dc:	ldr	r0, [r5]
   1b7e0:	mov	r1, r8
   1b7e4:	bl	1439c <flatcc_builder_get_user_frame_ptr@@Base>
   1b7e8:	mov	r1, r0
   1b7ec:	ldr	r0, [r5]
   1b7f0:	bl	169a0 <flatcc_builder_end_offset_vector_for_unions@@Base>
   1b7f4:	cmp	r0, #0
   1b7f8:	str	r0, [sp, #8]
   1b7fc:	beq	1b824 <flatcc_json_parser_union_vector@@Base+0x4b8>
   1b800:	ldr	r1, [fp, #12]
   1b804:	ldr	r0, [r5]
   1b808:	bl	16b8c <flatcc_builder_table_add_offset@@Base>
   1b80c:	cmp	r0, #0
   1b810:	beq	1b824 <flatcc_json_parser_union_vector@@Base+0x4b8>
   1b814:	ldr	r1, [sp, #8]
   1b818:	mov	r6, r9
   1b81c:	str	r1, [r0]
   1b820:	b	1b71c <flatcc_json_parser_union_vector@@Base+0x3b0>
   1b824:	mov	r7, r9
   1b828:	b	1b494 <flatcc_json_parser_union_vector@@Base+0x128>

0001b82c <flatcc_json_parser_union_type_vector@@Base>:
   1b82c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b830:	add	fp, sp, #28
   1b834:	sub	sp, sp, #44	; 0x2c
   1b838:	mov	r7, r1
   1b83c:	mov	r5, r0
   1b840:	ldr	r0, [r0]
   1b844:	ldr	r1, [fp, #12]
   1b848:	mov	r4, r3
   1b84c:	mov	r6, r2
   1b850:	bl	1439c <flatcc_builder_get_user_frame_ptr@@Base>
   1b854:	add	r0, r0, #8
   1b858:	add	sl, r4, r4, lsl #1
   1b85c:	add	r9, r0, sl, lsl #3
   1b860:	mov	r0, r9
   1b864:	ldrb	r1, [r0, #12]!
   1b868:	cmp	r1, #0
   1b86c:	beq	1b88c <flatcc_json_parser_union_type_vector@@Base+0x60>
   1b870:	ldr	r0, [r5, #24]
   1b874:	cmp	r0, #0
   1b878:	bne	1bd38 <flatcc_json_parser_union_type_vector@@Base+0x50c>
   1b87c:	mov	r0, #28
   1b880:	str	r7, [r5, #36]	; 0x24
   1b884:	add	r2, r7, #1
   1b888:	b	1bd28 <flatcc_json_parser_union_type_vector@@Base+0x4fc>
   1b88c:	mov	r1, #1
   1b890:	mov	r2, #1
   1b894:	mvn	r3, #0
   1b898:	strb	r1, [r0]
   1b89c:	mov	r1, #1
   1b8a0:	ldr	r0, [r5]
   1b8a4:	bl	1562c <flatcc_builder_start_vector@@Base>
   1b8a8:	cmp	r0, #0
   1b8ac:	beq	1b8b8 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   1b8b0:	mov	r4, r7
   1b8b4:	b	1bd10 <flatcc_json_parser_union_type_vector@@Base+0x4e4>
   1b8b8:	cmp	r7, r6
   1b8bc:	beq	1b8f0 <flatcc_json_parser_union_type_vector@@Base+0xc4>
   1b8c0:	ldrb	r0, [r7]
   1b8c4:	cmp	r0, #91	; 0x5b
   1b8c8:	bne	1b8f0 <flatcc_json_parser_union_type_vector@@Base+0xc4>
   1b8cc:	add	r1, r7, #1
   1b8d0:	sub	r0, r6, r1
   1b8d4:	cmp	r0, #2
   1b8d8:	blt	1b934 <flatcc_json_parser_union_type_vector@@Base+0x108>
   1b8dc:	ldrb	r0, [r1]
   1b8e0:	cmp	r0, #32
   1b8e4:	bls	1b924 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   1b8e8:	mov	r7, r1
   1b8ec:	b	1b944 <flatcc_json_parser_union_type_vector@@Base+0x118>
   1b8f0:	ldr	r0, [r5, #24]
   1b8f4:	mov	r8, r6
   1b8f8:	cmp	r0, #0
   1b8fc:	bne	1bc0c <flatcc_json_parser_union_type_vector@@Base+0x3e0>
   1b900:	str	r7, [r5, #36]	; 0x24
   1b904:	mov	r0, #22
   1b908:	add	r2, r7, #1
   1b90c:	ldr	r1, [r5, #4]
   1b910:	sub	r1, r2, r1
   1b914:	str	r1, [r5, #20]
   1b918:	str	r0, [r5, #24]
   1b91c:	mov	r8, r6
   1b920:	b	1bc0c <flatcc_json_parser_union_type_vector@@Base+0x3e0>
   1b924:	bne	1b934 <flatcc_json_parser_union_type_vector@@Base+0x108>
   1b928:	ldrb	r0, [r7, #2]!
   1b92c:	cmp	r0, #32
   1b930:	bhi	1b944 <flatcc_json_parser_union_type_vector@@Base+0x118>
   1b934:	mov	r0, r5
   1b938:	mov	r2, r6
   1b93c:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   1b940:	mov	r7, r0
   1b944:	cmp	r7, r6
   1b948:	mov	r4, r6
   1b94c:	beq	1b984 <flatcc_json_parser_union_type_vector@@Base+0x158>
   1b950:	ldrb	r0, [r7]
   1b954:	cmp	r0, #93	; 0x5d
   1b958:	bne	1b980 <flatcc_json_parser_union_type_vector@@Base+0x154>
   1b95c:	add	r1, r7, #1
   1b960:	sub	r0, r6, r1
   1b964:	cmp	r0, #2
   1b968:	blt	1bbfc <flatcc_json_parser_union_type_vector@@Base+0x3d0>
   1b96c:	ldrb	r0, [r1]
   1b970:	cmp	r0, #32
   1b974:	bls	1bbac <flatcc_json_parser_union_type_vector@@Base+0x380>
   1b978:	mov	r8, r1
   1b97c:	b	1bc0c <flatcc_json_parser_union_type_vector@@Base+0x3e0>
   1b980:	mov	r4, r7
   1b984:	ldr	r0, [r5]
   1b988:	mov	r1, #1
   1b98c:	bl	14e14 <flatcc_builder_extend_vector@@Base>
   1b990:	cmp	r0, #0
   1b994:	beq	1bd10 <flatcc_json_parser_union_type_vector@@Base+0x4e4>
   1b998:	mov	r1, r0
   1b99c:	add	r0, r6, #1
   1b9a0:	str	r0, [sp, #16]
   1b9a4:	mov	r8, #0
   1b9a8:	cmp	r4, r6
   1b9ac:	str	r1, [sp, #20]
   1b9b0:	str	r8, [sp, #36]	; 0x24
   1b9b4:	str	r8, [sp, #32]
   1b9b8:	strb	r8, [sp, #27]
   1b9bc:	str	r8, [sp, #28]
   1b9c0:	beq	1ba64 <flatcc_json_parser_union_type_vector@@Base+0x238>
   1b9c4:	add	r0, sp, #32
   1b9c8:	mov	r1, r4
   1b9cc:	mov	r2, r6
   1b9d0:	add	r3, sp, #28
   1b9d4:	str	r0, [sp]
   1b9d8:	mov	r0, r5
   1b9dc:	bl	1a598 <flatcc_json_parser_integer@@Base>
   1b9e0:	cmp	r0, r4
   1b9e4:	beq	1ba20 <flatcc_json_parser_union_type_vector@@Base+0x1f4>
   1b9e8:	mov	r7, r0
   1b9ec:	ldr	r0, [sp, #28]
   1b9f0:	cmp	r0, #0
   1b9f4:	beq	1ba28 <flatcc_json_parser_union_type_vector@@Base+0x1fc>
   1b9f8:	ldr	r0, [r5, #24]
   1b9fc:	cmp	r0, #0
   1ba00:	bne	1ba64 <flatcc_json_parser_union_type_vector@@Base+0x238>
   1ba04:	str	r7, [r5, #36]	; 0x24
   1ba08:	add	r1, r7, #1
   1ba0c:	ldr	r0, [r5, #4]
   1ba10:	sub	r0, r1, r0
   1ba14:	str	r0, [r5, #20]
   1ba18:	mov	r0, #8
   1ba1c:	b	1ba60 <flatcc_json_parser_union_type_vector@@Base+0x234>
   1ba20:	mov	r7, r4
   1ba24:	b	1ba68 <flatcc_json_parser_union_type_vector@@Base+0x23c>
   1ba28:	ldr	r0, [sp, #32]
   1ba2c:	ldr	r1, [sp, #36]	; 0x24
   1ba30:	subs	r2, r0, #256	; 0x100
   1ba34:	sbcs	r1, r1, #0
   1ba38:	bcc	1bba0 <flatcc_json_parser_union_type_vector@@Base+0x374>
   1ba3c:	ldr	r0, [r5, #24]
   1ba40:	cmp	r0, #0
   1ba44:	bne	1ba64 <flatcc_json_parser_union_type_vector@@Base+0x238>
   1ba48:	str	r7, [r5, #36]	; 0x24
   1ba4c:	add	r1, r7, #1
   1ba50:	ldr	r0, [r5, #4]
   1ba54:	sub	r0, r1, r0
   1ba58:	str	r0, [r5, #20]
   1ba5c:	mov	r0, #7
   1ba60:	str	r0, [r5, #24]
   1ba64:	mov	r7, r6
   1ba68:	cmp	r4, r7
   1ba6c:	bne	1baa0 <flatcc_json_parser_union_type_vector@@Base+0x274>
   1ba70:	ldr	r3, [fp, #16]
   1ba74:	add	r0, sp, #27
   1ba78:	mov	r1, r4
   1ba7c:	mov	r2, r6
   1ba80:	str	r0, [sp]
   1ba84:	mov	r0, r5
   1ba88:	bl	1b128 <flatcc_json_parser_union_type@@Base+0x25c>
   1ba8c:	mov	r7, r0
   1ba90:	cmp	r0, r4
   1ba94:	cmpne	r7, r6
   1ba98:	beq	1b8b0 <flatcc_json_parser_union_type_vector@@Base+0x84>
   1ba9c:	ldrb	r8, [sp, #27]
   1baa0:	ldr	r1, [fp, #24]
   1baa4:	uxtb	r0, r8
   1baa8:	blx	r1
   1baac:	cmp	r0, #0
   1bab0:	bne	1bac8 <flatcc_json_parser_union_type_vector@@Base+0x29c>
   1bab4:	ldrb	r0, [r5, #8]
   1bab8:	tst	r0, #1
   1babc:	beq	1bd94 <flatcc_json_parser_union_type_vector@@Base+0x568>
   1bac0:	mov	r8, #0
   1bac4:	strb	r8, [sp, #27]
   1bac8:	ldr	r0, [sp, #20]
   1bacc:	strb	r8, [r0]
   1bad0:	sub	r0, r6, r7
   1bad4:	cmp	r0, #2
   1bad8:	blt	1bb04 <flatcc_json_parser_union_type_vector@@Base+0x2d8>
   1badc:	ldrb	r0, [r7]
   1bae0:	cmp	r0, #32
   1bae4:	bls	1baf0 <flatcc_json_parser_union_type_vector@@Base+0x2c4>
   1bae8:	mov	r4, r7
   1baec:	b	1bb18 <flatcc_json_parser_union_type_vector@@Base+0x2ec>
   1baf0:	bne	1bb04 <flatcc_json_parser_union_type_vector@@Base+0x2d8>
   1baf4:	mov	r4, r7
   1baf8:	ldrb	r0, [r4, #1]!
   1bafc:	cmp	r0, #32
   1bb00:	bhi	1bb18 <flatcc_json_parser_union_type_vector@@Base+0x2ec>
   1bb04:	mov	r0, r5
   1bb08:	mov	r1, r7
   1bb0c:	mov	r2, r6
   1bb10:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   1bb14:	mov	r4, r0
   1bb18:	cmp	r4, r6
   1bb1c:	beq	1b91c <flatcc_json_parser_union_type_vector@@Base+0xf0>
   1bb20:	ldrb	r0, [r4]
   1bb24:	cmp	r0, #44	; 0x2c
   1bb28:	bne	1bbc4 <flatcc_json_parser_union_type_vector@@Base+0x398>
   1bb2c:	add	r1, r4, #1
   1bb30:	sub	r0, r6, r1
   1bb34:	cmp	r0, #2
   1bb38:	blt	1bb60 <flatcc_json_parser_union_type_vector@@Base+0x334>
   1bb3c:	ldrb	r0, [r1]
   1bb40:	cmp	r0, #32
   1bb44:	bls	1bb50 <flatcc_json_parser_union_type_vector@@Base+0x324>
   1bb48:	mov	r4, r1
   1bb4c:	b	1bb70 <flatcc_json_parser_union_type_vector@@Base+0x344>
   1bb50:	bne	1bb60 <flatcc_json_parser_union_type_vector@@Base+0x334>
   1bb54:	ldrb	r0, [r4, #2]!
   1bb58:	cmp	r0, #32
   1bb5c:	bhi	1bb70 <flatcc_json_parser_union_type_vector@@Base+0x344>
   1bb60:	mov	r0, r5
   1bb64:	mov	r2, r6
   1bb68:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   1bb6c:	mov	r4, r0
   1bb70:	cmp	r4, r6
   1bb74:	beq	1bd54 <flatcc_json_parser_union_type_vector@@Base+0x528>
   1bb78:	ldrb	r0, [r4]
   1bb7c:	cmp	r0, #93	; 0x5d
   1bb80:	beq	1bbcc <flatcc_json_parser_union_type_vector@@Base+0x3a0>
   1bb84:	ldr	r0, [r5]
   1bb88:	mov	r1, #1
   1bb8c:	bl	14e14 <flatcc_builder_extend_vector@@Base>
   1bb90:	mov	r1, r0
   1bb94:	cmp	r0, #0
   1bb98:	bne	1b9a4 <flatcc_json_parser_union_type_vector@@Base+0x178>
   1bb9c:	b	1bd10 <flatcc_json_parser_union_type_vector@@Base+0x4e4>
   1bba0:	mov	r8, r0
   1bba4:	strb	r0, [sp, #27]
   1bba8:	b	1ba68 <flatcc_json_parser_union_type_vector@@Base+0x23c>
   1bbac:	bne	1bbfc <flatcc_json_parser_union_type_vector@@Base+0x3d0>
   1bbb0:	ldrb	r0, [r7, #2]!
   1bbb4:	cmp	r0, #32
   1bbb8:	mov	r8, r7
   1bbbc:	bls	1bbfc <flatcc_json_parser_union_type_vector@@Base+0x3d0>
   1bbc0:	b	1bc0c <flatcc_json_parser_union_type_vector@@Base+0x3e0>
   1bbc4:	cmp	r0, #93	; 0x5d
   1bbc8:	bne	1bd74 <flatcc_json_parser_union_type_vector@@Base+0x548>
   1bbcc:	add	r1, r4, #1
   1bbd0:	sub	r0, r6, r1
   1bbd4:	cmp	r0, #2
   1bbd8:	blt	1bbfc <flatcc_json_parser_union_type_vector@@Base+0x3d0>
   1bbdc:	ldrb	r0, [r1]
   1bbe0:	cmp	r0, #32
   1bbe4:	bhi	1b978 <flatcc_json_parser_union_type_vector@@Base+0x14c>
   1bbe8:	bne	1bbfc <flatcc_json_parser_union_type_vector@@Base+0x3d0>
   1bbec:	ldrb	r0, [r4, #2]!
   1bbf0:	cmp	r0, #32
   1bbf4:	mov	r8, r4
   1bbf8:	bhi	1bc0c <flatcc_json_parser_union_type_vector@@Base+0x3e0>
   1bbfc:	mov	r0, r5
   1bc00:	mov	r2, r6
   1bc04:	bl	1872c <flatcc_json_parser_space_ext@@Base>
   1bc08:	mov	r8, r0
   1bc0c:	ldr	r0, [r5]
   1bc10:	bl	16788 <flatcc_builder_vector_count@@Base>
   1bc14:	str	r0, [r9, #16]
   1bc18:	mov	r4, r0
   1bc1c:	ldr	r0, [r5]
   1bc20:	mov	r1, r4
   1bc24:	bl	1424c <flatcc_builder_enter_user_frame@@Base>
   1bc28:	mov	r9, r0
   1bc2c:	ldr	r0, [r5]
   1bc30:	mov	r1, r9
   1bc34:	bl	1439c <flatcc_builder_get_user_frame_ptr@@Base>
   1bc38:	mov	r7, r0
   1bc3c:	ldr	r0, [r5]
   1bc40:	bl	16794 <flatcc_builder_vector_edit@@Base>
   1bc44:	mov	r1, r0
   1bc48:	mov	r0, r7
   1bc4c:	mov	r2, r4
   1bc50:	bl	12904 <memcpy@plt>
   1bc54:	ldr	r0, [r5]
   1bc58:	bl	16698 <flatcc_builder_end_vector@@Base>
   1bc5c:	cmp	r0, #0
   1bc60:	beq	1bd0c <flatcc_json_parser_union_type_vector@@Base+0x4e0>
   1bc64:	ldr	r1, [fp, #8]
   1bc68:	mov	r7, r0
   1bc6c:	ldr	r0, [r5]
   1bc70:	sub	r1, r1, #1
   1bc74:	bl	16b8c <flatcc_builder_table_add_offset@@Base>
   1bc78:	cmp	r0, #0
   1bc7c:	beq	1bd0c <flatcc_json_parser_union_type_vector@@Base+0x4e0>
   1bc80:	str	r7, [r0]
   1bc84:	ldr	r1, [fp, #12]
   1bc88:	ldr	r0, [r5]
   1bc8c:	bl	1439c <flatcc_builder_get_user_frame_ptr@@Base>
   1bc90:	add	r2, r0, #8
   1bc94:	mov	r3, r2
   1bc98:	ldr	r1, [r3, sl, lsl #3]!
   1bc9c:	str	r9, [r3, #20]
   1bca0:	cmp	r1, #0
   1bca4:	ldr	r3, [r0, #4]
   1bca8:	beq	1bd44 <flatcc_json_parser_union_type_vector@@Base+0x518>
   1bcac:	cmp	r3, #0
   1bcb0:	beq	1bda8 <flatcc_json_parser_union_type_vector@@Base+0x57c>
   1bcb4:	sub	r3, r3, #1
   1bcb8:	ldr	ip, [fp, #20]
   1bcbc:	str	r3, [r0, #4]
   1bcc0:	add	r0, r2, sl, lsl #3
   1bcc4:	mov	r3, r9
   1bcc8:	ldr	r2, [r0, #8]
   1bccc:	ldr	sl, [r5, #4]
   1bcd0:	ldr	r7, [r5, #16]
   1bcd4:	str	r2, [r5, #16]
   1bcd8:	mov	r2, r6
   1bcdc:	ldr	r0, [r0, #4]
   1bce0:	str	r0, [r5, #4]
   1bce4:	ldr	r0, [fp, #8]
   1bce8:	str	r4, [sp]
   1bcec:	stmib	sp, {r0, ip}
   1bcf0:	mov	r0, r5
   1bcf4:	bl	1b460 <flatcc_json_parser_union_vector@@Base+0xf4>
   1bcf8:	cmp	r0, r6
   1bcfc:	beq	1bd38 <flatcc_json_parser_union_type_vector@@Base+0x50c>
   1bd00:	str	sl, [r5, #4]
   1bd04:	str	r7, [r5, #16]
   1bd08:	b	1bd4c <flatcc_json_parser_union_type_vector@@Base+0x520>
   1bd0c:	mov	r4, r8
   1bd10:	ldr	r0, [r5, #24]
   1bd14:	cmp	r0, #0
   1bd18:	bne	1bd38 <flatcc_json_parser_union_type_vector@@Base+0x50c>
   1bd1c:	str	r4, [r5, #36]	; 0x24
   1bd20:	mov	r0, #33	; 0x21
   1bd24:	add	r2, r4, #1
   1bd28:	ldr	r1, [r5, #4]
   1bd2c:	sub	r1, r2, r1
   1bd30:	str	r1, [r5, #20]
   1bd34:	str	r0, [r5, #24]
   1bd38:	mov	r0, r6
   1bd3c:	sub	sp, fp, #28
   1bd40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd44:	add	r1, r3, #1
   1bd48:	str	r1, [r0, #4]
   1bd4c:	mov	r6, r8
   1bd50:	b	1bd38 <flatcc_json_parser_union_type_vector@@Base+0x50c>
   1bd54:	ldr	r0, [r5, #24]
   1bd58:	mov	r8, r6
   1bd5c:	cmp	r0, #0
   1bd60:	bne	1bc0c <flatcc_json_parser_union_type_vector@@Base+0x3e0>
   1bd64:	str	r6, [r5, #36]	; 0x24
   1bd68:	ldr	r2, [sp, #16]
   1bd6c:	mov	r0, #9
   1bd70:	b	1b90c <flatcc_json_parser_union_type_vector@@Base+0xe0>
   1bd74:	ldr	r0, [r5, #24]
   1bd78:	mov	r8, r6
   1bd7c:	cmp	r0, #0
   1bd80:	bne	1bc0c <flatcc_json_parser_union_type_vector@@Base+0x3e0>
   1bd84:	str	r4, [r5, #36]	; 0x24
   1bd88:	mov	r0, #9
   1bd8c:	add	r2, r4, #1
   1bd90:	b	1b90c <flatcc_json_parser_union_type_vector@@Base+0xe0>
   1bd94:	ldr	r0, [r5, #24]
   1bd98:	cmp	r0, #0
   1bd9c:	bne	1bd38 <flatcc_json_parser_union_type_vector@@Base+0x50c>
   1bda0:	mov	r0, #15
   1bda4:	b	1b880 <flatcc_json_parser_union_type_vector@@Base+0x54>
   1bda8:	movw	r0, #59005	; 0xe67d
   1bdac:	movw	r1, #59020	; 0xe68c
   1bdb0:	movw	r3, #59298	; 0xe7a2
   1bdb4:	movw	r2, #1122	; 0x462
   1bdb8:	movt	r0, #1
   1bdbc:	movt	r1, #1
   1bdc0:	movt	r3, #1
   1bdc4:	bl	129c4 <__assert_fail@plt>

0001bdc8 <flatcc_json_parser_table_as_root@@Base>:
   1bdc8:	push	{r4, r5, r6, r7, fp, lr}
   1bdcc:	add	fp, sp, #16
   1bdd0:	sub	sp, sp, #48	; 0x30
   1bdd4:	add	r5, sp, #4
   1bdd8:	cmp	r1, #0
   1bddc:	mov	r6, r0
   1bde0:	vmov.i32	q8, #0	; 0x00000000
   1bde4:	add	r7, r2, r3
   1bde8:	mov	r4, r2
   1bdec:	movne	r5, r1
   1bdf0:	mov	r1, #1
   1bdf4:	add	r0, r5, #12
   1bdf8:	vst1.32	{d16-d17}, [r0]
   1bdfc:	add	r0, r5, #28
   1be00:	vst1.32	{d16-d17}, [r0]
   1be04:	ldr	r0, [fp, #8]
   1be08:	str	r6, [r5]
   1be0c:	str	r2, [r5, #4]
   1be10:	str	r0, [r5, #8]
   1be14:	str	r1, [r5, #16]
   1be18:	mov	r1, #2
   1be1c:	str	r2, [r5, #28]
   1be20:	str	r7, [r5, #32]
   1be24:	str	r2, [r5, #36]	; 0x24
   1be28:	mov	r2, #0
   1be2c:	and	r3, r1, r0, lsr #1
   1be30:	ldr	r1, [fp, #12]
   1be34:	mov	r0, r6
   1be38:	bl	1497c <flatcc_builder_start_buffer@@Base>
   1be3c:	mov	r1, r0
   1be40:	mvn	r0, #0
   1be44:	cmp	r1, #0
   1be48:	bne	1be8c <flatcc_json_parser_table_as_root@@Base+0xc4>
   1be4c:	ldr	ip, [fp, #16]
   1be50:	mov	r3, sp
   1be54:	mov	r0, r5
   1be58:	mov	r1, r4
   1be5c:	mov	r2, r7
   1be60:	blx	ip
   1be64:	ldr	r0, [r5, #24]
   1be68:	cmp	r0, #0
   1be6c:	bne	1be8c <flatcc_json_parser_table_as_root@@Base+0xc4>
   1be70:	ldr	r1, [sp]
   1be74:	mov	r0, r6
   1be78:	bl	14b6c <flatcc_builder_end_buffer@@Base>
   1be7c:	cmp	r0, #0
   1be80:	mvn	r0, #0
   1be84:	movne	r0, #0
   1be88:	strne	r4, [r5, #40]	; 0x28
   1be8c:	sub	sp, fp, #16
   1be90:	pop	{r4, r5, r6, r7, fp, pc}

0001be94 <flatcc_json_parser_struct_as_root@@Base>:
   1be94:	push	{r4, r5, r6, r7, fp, lr}
   1be98:	add	fp, sp, #16
   1be9c:	sub	sp, sp, #48	; 0x30
   1bea0:	add	r5, sp, #4
   1bea4:	cmp	r1, #0
   1bea8:	mov	r6, r0
   1beac:	vmov.i32	q8, #0	; 0x00000000
   1beb0:	add	r7, r2, r3
   1beb4:	mov	r4, r2
   1beb8:	movne	r5, r1
   1bebc:	mov	r1, #1
   1bec0:	add	r0, r5, #12
   1bec4:	vst1.32	{d16-d17}, [r0]
   1bec8:	add	r0, r5, #28
   1becc:	vst1.32	{d16-d17}, [r0]
   1bed0:	ldr	r0, [fp, #8]
   1bed4:	str	r6, [r5]
   1bed8:	str	r2, [r5, #4]
   1bedc:	str	r0, [r5, #8]
   1bee0:	str	r1, [r5, #16]
   1bee4:	mov	r1, #2
   1bee8:	str	r2, [r5, #28]
   1beec:	str	r7, [r5, #32]
   1bef0:	str	r2, [r5, #36]	; 0x24
   1bef4:	mov	r2, #0
   1bef8:	and	r3, r1, r0, lsr #1
   1befc:	ldr	r1, [fp, #12]
   1bf00:	mov	r0, r6
   1bf04:	bl	1497c <flatcc_builder_start_buffer@@Base>
   1bf08:	mov	r1, r0
   1bf0c:	mvn	r0, #0
   1bf10:	cmp	r1, #0
   1bf14:	bne	1bf58 <flatcc_json_parser_struct_as_root@@Base+0xc4>
   1bf18:	ldr	ip, [fp, #16]
   1bf1c:	mov	r3, sp
   1bf20:	mov	r0, r5
   1bf24:	mov	r1, r4
   1bf28:	mov	r2, r7
   1bf2c:	blx	ip
   1bf30:	ldr	r0, [r5, #24]
   1bf34:	cmp	r0, #0
   1bf38:	bne	1bf58 <flatcc_json_parser_struct_as_root@@Base+0xc4>
   1bf3c:	ldr	r1, [sp]
   1bf40:	mov	r0, r6
   1bf44:	bl	14b6c <flatcc_builder_end_buffer@@Base>
   1bf48:	cmp	r0, #0
   1bf4c:	mvn	r0, #0
   1bf50:	movne	r0, #0
   1bf54:	strne	r4, [r5, #40]	; 0x28
   1bf58:	sub	sp, fp, #16
   1bf5c:	pop	{r4, r5, r6, r7, fp, pc}
   1bf60:	eor	r1, r1, #-2147483648	; 0x80000000
   1bf64:	b	1bf6c <flatcc_json_parser_struct_as_root@@Base+0xd8>
   1bf68:	eor	r3, r3, #-2147483648	; 0x80000000
   1bf6c:	push	{r4, r5, lr}
   1bf70:	lsl	r4, r1, #1
   1bf74:	lsl	r5, r3, #1
   1bf78:	teq	r4, r5
   1bf7c:	teqeq	r0, r2
   1bf80:	orrsne	ip, r4, r0
   1bf84:	orrsne	ip, r5, r2
   1bf88:	mvnsne	ip, r4, asr #21
   1bf8c:	mvnsne	ip, r5, asr #21
   1bf90:	beq	1c17c <flatcc_json_parser_struct_as_root@@Base+0x2e8>
   1bf94:	lsr	r4, r4, #21
   1bf98:	rsbs	r5, r4, r5, lsr #21
   1bf9c:	rsblt	r5, r5, #0
   1bfa0:	ble	1bfc0 <flatcc_json_parser_struct_as_root@@Base+0x12c>
   1bfa4:	add	r4, r4, r5
   1bfa8:	eor	r2, r0, r2
   1bfac:	eor	r3, r1, r3
   1bfb0:	eor	r0, r2, r0
   1bfb4:	eor	r1, r3, r1
   1bfb8:	eor	r2, r0, r2
   1bfbc:	eor	r3, r1, r3
   1bfc0:	cmp	r5, #54	; 0x36
   1bfc4:	pophi	{r4, r5, pc}
   1bfc8:	tst	r1, #-2147483648	; 0x80000000
   1bfcc:	lsl	r1, r1, #12
   1bfd0:	mov	ip, #1048576	; 0x100000
   1bfd4:	orr	r1, ip, r1, lsr #12
   1bfd8:	beq	1bfe4 <flatcc_json_parser_struct_as_root@@Base+0x150>
   1bfdc:	rsbs	r0, r0, #0
   1bfe0:	rsc	r1, r1, #0
   1bfe4:	tst	r3, #-2147483648	; 0x80000000
   1bfe8:	lsl	r3, r3, #12
   1bfec:	orr	r3, ip, r3, lsr #12
   1bff0:	beq	1bffc <flatcc_json_parser_struct_as_root@@Base+0x168>
   1bff4:	rsbs	r2, r2, #0
   1bff8:	rsc	r3, r3, #0
   1bffc:	teq	r4, r5
   1c000:	beq	1c164 <flatcc_json_parser_struct_as_root@@Base+0x2d0>
   1c004:	sub	r4, r4, #1
   1c008:	rsbs	lr, r5, #32
   1c00c:	blt	1c028 <flatcc_json_parser_struct_as_root@@Base+0x194>
   1c010:	lsl	ip, r2, lr
   1c014:	adds	r0, r0, r2, lsr r5
   1c018:	adc	r1, r1, #0
   1c01c:	adds	r0, r0, r3, lsl lr
   1c020:	adcs	r1, r1, r3, asr r5
   1c024:	b	1c044 <flatcc_json_parser_struct_as_root@@Base+0x1b0>
   1c028:	sub	r5, r5, #32
   1c02c:	add	lr, lr, #32
   1c030:	cmp	r2, #1
   1c034:	lsl	ip, r3, lr
   1c038:	orrcs	ip, ip, #2
   1c03c:	adds	r0, r0, r3, asr r5
   1c040:	adcs	r1, r1, r3, asr #31
   1c044:	and	r5, r1, #-2147483648	; 0x80000000
   1c048:	bpl	1c058 <flatcc_json_parser_struct_as_root@@Base+0x1c4>
   1c04c:	rsbs	ip, ip, #0
   1c050:	rscs	r0, r0, #0
   1c054:	rsc	r1, r1, #0
   1c058:	cmp	r1, #1048576	; 0x100000
   1c05c:	bcc	1c09c <flatcc_json_parser_struct_as_root@@Base+0x208>
   1c060:	cmp	r1, #2097152	; 0x200000
   1c064:	bcc	1c084 <flatcc_json_parser_struct_as_root@@Base+0x1f0>
   1c068:	lsrs	r1, r1, #1
   1c06c:	rrxs	r0, r0
   1c070:	rrx	ip, ip
   1c074:	add	r4, r4, #1
   1c078:	lsl	r2, r4, #21
   1c07c:	cmn	r2, #4194304	; 0x400000
   1c080:	bcs	1c1dc <flatcc_json_parser_struct_as_root@@Base+0x348>
   1c084:	cmp	ip, #-2147483648	; 0x80000000
   1c088:	lsrseq	ip, r0, #1
   1c08c:	adcs	r0, r0, #0
   1c090:	adc	r1, r1, r4, lsl #20
   1c094:	orr	r1, r1, r5
   1c098:	pop	{r4, r5, pc}
   1c09c:	lsls	ip, ip, #1
   1c0a0:	adcs	r0, r0, r0
   1c0a4:	adc	r1, r1, r1
   1c0a8:	tst	r1, #1048576	; 0x100000
   1c0ac:	sub	r4, r4, #1
   1c0b0:	bne	1c084 <flatcc_json_parser_struct_as_root@@Base+0x1f0>
   1c0b4:	teq	r1, #0
   1c0b8:	moveq	r1, r0
   1c0bc:	moveq	r0, #0
   1c0c0:	clz	r3, r1
   1c0c4:	addeq	r3, r3, #32
   1c0c8:	sub	r3, r3, #11
   1c0cc:	subs	r2, r3, #32
   1c0d0:	bge	1c0f4 <flatcc_json_parser_struct_as_root@@Base+0x260>
   1c0d4:	adds	r2, r2, #12
   1c0d8:	ble	1c0f0 <flatcc_json_parser_struct_as_root@@Base+0x25c>
   1c0dc:	add	ip, r2, #20
   1c0e0:	rsb	r2, r2, #12
   1c0e4:	lsl	r0, r1, ip
   1c0e8:	lsr	r1, r1, r2
   1c0ec:	b	1c104 <flatcc_json_parser_struct_as_root@@Base+0x270>
   1c0f0:	add	r2, r2, #20
   1c0f4:	rsble	ip, r2, #32
   1c0f8:	lsl	r1, r1, r2
   1c0fc:	orrle	r1, r1, r0, lsr ip
   1c100:	lslle	r0, r0, r2
   1c104:	subs	r4, r4, r3
   1c108:	addge	r1, r1, r4, lsl #20
   1c10c:	orrge	r1, r1, r5
   1c110:	popge	{r4, r5, pc}
   1c114:	mvn	r4, r4
   1c118:	subs	r4, r4, #31
   1c11c:	bge	1c158 <flatcc_json_parser_struct_as_root@@Base+0x2c4>
   1c120:	adds	r4, r4, #12
   1c124:	bgt	1c140 <flatcc_json_parser_struct_as_root@@Base+0x2ac>
   1c128:	add	r4, r4, #20
   1c12c:	rsb	r2, r4, #32
   1c130:	lsr	r0, r0, r4
   1c134:	orr	r0, r0, r1, lsl r2
   1c138:	orr	r1, r5, r1, lsr r4
   1c13c:	pop	{r4, r5, pc}
   1c140:	rsb	r4, r4, #12
   1c144:	rsb	r2, r4, #32
   1c148:	lsr	r0, r0, r2
   1c14c:	orr	r0, r0, r1, lsl r4
   1c150:	mov	r1, r5
   1c154:	pop	{r4, r5, pc}
   1c158:	lsr	r0, r1, r4
   1c15c:	mov	r1, r5
   1c160:	pop	{r4, r5, pc}
   1c164:	teq	r4, #0
   1c168:	eor	r3, r3, #1048576	; 0x100000
   1c16c:	eoreq	r1, r1, #1048576	; 0x100000
   1c170:	addeq	r4, r4, #1
   1c174:	subne	r5, r5, #1
   1c178:	b	1c004 <flatcc_json_parser_struct_as_root@@Base+0x170>
   1c17c:	mvns	ip, r4, asr #21
   1c180:	mvnsne	ip, r5, asr #21
   1c184:	beq	1c1ec <flatcc_json_parser_struct_as_root@@Base+0x358>
   1c188:	teq	r4, r5
   1c18c:	teqeq	r0, r2
   1c190:	beq	1c1a4 <flatcc_json_parser_struct_as_root@@Base+0x310>
   1c194:	orrs	ip, r4, r0
   1c198:	moveq	r1, r3
   1c19c:	moveq	r0, r2
   1c1a0:	pop	{r4, r5, pc}
   1c1a4:	teq	r1, r3
   1c1a8:	movne	r1, #0
   1c1ac:	movne	r0, #0
   1c1b0:	popne	{r4, r5, pc}
   1c1b4:	lsrs	ip, r4, #21
   1c1b8:	bne	1c1cc <flatcc_json_parser_struct_as_root@@Base+0x338>
   1c1bc:	lsls	r0, r0, #1
   1c1c0:	adcs	r1, r1, r1
   1c1c4:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1c1c8:	pop	{r4, r5, pc}
   1c1cc:	adds	r4, r4, #4194304	; 0x400000
   1c1d0:	addcc	r1, r1, #1048576	; 0x100000
   1c1d4:	popcc	{r4, r5, pc}
   1c1d8:	and	r5, r1, #-2147483648	; 0x80000000
   1c1dc:	orr	r1, r5, #2130706432	; 0x7f000000
   1c1e0:	orr	r1, r1, #15728640	; 0xf00000
   1c1e4:	mov	r0, #0
   1c1e8:	pop	{r4, r5, pc}
   1c1ec:	mvns	ip, r4, asr #21
   1c1f0:	movne	r1, r3
   1c1f4:	movne	r0, r2
   1c1f8:	mvnseq	ip, r5, asr #21
   1c1fc:	movne	r3, r1
   1c200:	movne	r2, r0
   1c204:	orrs	r4, r0, r1, lsl #12
   1c208:	orrseq	r5, r2, r3, lsl #12
   1c20c:	teqeq	r1, r3
   1c210:	orrne	r1, r1, #524288	; 0x80000
   1c214:	pop	{r4, r5, pc}
   1c218:	teq	r0, #0
   1c21c:	moveq	r1, #0
   1c220:	bxeq	lr
   1c224:	push	{r4, r5, lr}
   1c228:	mov	r4, #1024	; 0x400
   1c22c:	add	r4, r4, #50	; 0x32
   1c230:	mov	r5, #0
   1c234:	mov	r1, #0
   1c238:	b	1c0b4 <flatcc_json_parser_struct_as_root@@Base+0x220>
   1c23c:	teq	r0, #0
   1c240:	moveq	r1, #0
   1c244:	bxeq	lr
   1c248:	push	{r4, r5, lr}
   1c24c:	mov	r4, #1024	; 0x400
   1c250:	add	r4, r4, #50	; 0x32
   1c254:	ands	r5, r0, #-2147483648	; 0x80000000
   1c258:	rsbmi	r0, r0, #0
   1c25c:	mov	r1, #0
   1c260:	b	1c0b4 <flatcc_json_parser_struct_as_root@@Base+0x220>
   1c264:	lsls	r2, r0, #1
   1c268:	asr	r1, r2, #3
   1c26c:	rrx	r1, r1
   1c270:	lsl	r0, r2, #28
   1c274:	andsne	r3, r2, #-16777216	; 0xff000000
   1c278:	teqne	r3, #-16777216	; 0xff000000
   1c27c:	eorne	r1, r1, #939524096	; 0x38000000
   1c280:	bxne	lr
   1c284:	bics	r2, r2, #-16777216	; 0xff000000
   1c288:	bxeq	lr
   1c28c:	teq	r3, #-16777216	; 0xff000000
   1c290:	orreq	r1, r1, #524288	; 0x80000
   1c294:	bxeq	lr
   1c298:	push	{r4, r5, lr}
   1c29c:	mov	r4, #896	; 0x380
   1c2a0:	and	r5, r1, #-2147483648	; 0x80000000
   1c2a4:	bic	r1, r1, #-2147483648	; 0x80000000
   1c2a8:	b	1c0b4 <flatcc_json_parser_struct_as_root@@Base+0x220>
   1c2ac:	orrs	r2, r0, r1
   1c2b0:	bxeq	lr
   1c2b4:	push	{r4, r5, lr}
   1c2b8:	mov	r5, #0
   1c2bc:	b	1c2dc <flatcc_json_parser_struct_as_root@@Base+0x448>
   1c2c0:	orrs	r2, r0, r1
   1c2c4:	bxeq	lr
   1c2c8:	push	{r4, r5, lr}
   1c2cc:	ands	r5, r1, #-2147483648	; 0x80000000
   1c2d0:	bpl	1c2dc <flatcc_json_parser_struct_as_root@@Base+0x448>
   1c2d4:	rsbs	r0, r0, #0
   1c2d8:	rsc	r1, r1, #0
   1c2dc:	mov	r4, #1024	; 0x400
   1c2e0:	add	r4, r4, #50	; 0x32
   1c2e4:	lsrs	ip, r1, #22
   1c2e8:	beq	1c058 <flatcc_json_parser_struct_as_root@@Base+0x1c4>
   1c2ec:	mov	r2, #3
   1c2f0:	lsrs	ip, ip, #3
   1c2f4:	addne	r2, r2, #3
   1c2f8:	lsrs	ip, ip, #3
   1c2fc:	addne	r2, r2, #3
   1c300:	add	r2, r2, ip, lsr #3
   1c304:	rsb	r3, r2, #32
   1c308:	lsl	ip, r0, r3
   1c30c:	lsr	r0, r0, r2
   1c310:	orr	r0, r0, r1, lsl r3
   1c314:	lsr	r1, r1, r2
   1c318:	add	r4, r4, r2
   1c31c:	b	1c058 <flatcc_json_parser_struct_as_root@@Base+0x1c4>

0001c320 <__libc_csu_init@@Base>:
   1c320:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c324:	mov	r7, r0
   1c328:	ldr	r6, [pc, #72]	; 1c378 <__libc_csu_init@@Base+0x58>
   1c32c:	ldr	r5, [pc, #72]	; 1c37c <__libc_csu_init@@Base+0x5c>
   1c330:	add	r6, pc, r6
   1c334:	add	r5, pc, r5
   1c338:	sub	r6, r6, r5
   1c33c:	mov	r8, r1
   1c340:	mov	r9, r2
   1c344:	bl	128d8 <free@plt-0x20>
   1c348:	asrs	r6, r6, #2
   1c34c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c350:	mov	r4, #0
   1c354:	add	r4, r4, #1
   1c358:	ldr	r3, [r5], #4
   1c35c:	mov	r2, r9
   1c360:	mov	r1, r8
   1c364:	mov	r0, r7
   1c368:	blx	r3
   1c36c:	cmp	r6, r4
   1c370:	bne	1c354 <__libc_csu_init@@Base+0x34>
   1c374:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c378:	ldrdeq	r2, [r1], -r4
   1c37c:	andeq	r2, r1, ip, asr #23

0001c380 <__libc_csu_fini@@Base>:
   1c380:	bx	lr

Disassembly of section .fini:

0001c384 <.fini>:
   1c384:	push	{r3, lr}
   1c388:	pop	{r3, pc}
