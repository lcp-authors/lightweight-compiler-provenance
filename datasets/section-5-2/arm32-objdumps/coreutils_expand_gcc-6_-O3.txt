
../repos/coreutils/src/expand:     file format elf32-littlearm


Disassembly of section .init:

00010c1c <.init>:
   10c1c:	push	{r3, lr}
   10c20:	bl	11270 <__assert_fail@plt+0x3e8>
   10c24:	pop	{r3, pc}

Disassembly of section .plt:

00010c28 <calloc@plt-0x14>:
   10c28:	push	{lr}		; (str lr, [sp, #-4]!)
   10c2c:	ldr	lr, [pc, #4]	; 10c38 <calloc@plt-0x4>
   10c30:	add	lr, pc, lr
   10c34:	ldr	pc, [lr, #8]!
   10c38:	andeq	r8, r1, r8, asr #7

00010c3c <calloc@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #24, 20	; 0x18000
   10c44:	ldr	pc, [ip, #968]!	; 0x3c8

00010c48 <fputs_unlocked@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #24, 20	; 0x18000
   10c50:	ldr	pc, [ip, #960]!	; 0x3c0

00010c54 <raise@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #24, 20	; 0x18000
   10c5c:	ldr	pc, [ip, #952]!	; 0x3b8

00010c60 <strcmp@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #24, 20	; 0x18000
   10c68:	ldr	pc, [ip, #944]!	; 0x3b0

00010c6c <posix_fadvise64@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #24, 20	; 0x18000
   10c74:	ldr	pc, [ip, #936]!	; 0x3a8

00010c78 <fflush@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #24, 20	; 0x18000
   10c80:	ldr	pc, [ip, #928]!	; 0x3a0

00010c84 <free@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #24, 20	; 0x18000
   10c8c:	ldr	pc, [ip, #920]!	; 0x398

00010c90 <_exit@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #24, 20	; 0x18000
   10c98:	ldr	pc, [ip, #912]!	; 0x390

00010c9c <memcpy@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #24, 20	; 0x18000
   10ca4:	ldr	pc, [ip, #904]!	; 0x388

00010ca8 <mbsinit@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #24, 20	; 0x18000
   10cb0:	ldr	pc, [ip, #896]!	; 0x380

00010cb4 <memcmp@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #24, 20	; 0x18000
   10cbc:	ldr	pc, [ip, #888]!	; 0x378

00010cc0 <fputc_unlocked@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #24, 20	; 0x18000
   10cc8:	ldr	pc, [ip, #880]!	; 0x370

00010ccc <dcgettext@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #24, 20	; 0x18000
   10cd4:	ldr	pc, [ip, #872]!	; 0x368

00010cd8 <realloc@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #24, 20	; 0x18000
   10ce0:	ldr	pc, [ip, #864]!	; 0x360

00010ce4 <textdomain@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #24, 20	; 0x18000
   10cec:	ldr	pc, [ip, #856]!	; 0x358

00010cf0 <iswprint@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #24, 20	; 0x18000
   10cf8:	ldr	pc, [ip, #848]!	; 0x350

00010cfc <fwrite@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #24, 20	; 0x18000
   10d04:	ldr	pc, [ip, #840]!	; 0x348

00010d08 <lseek64@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #24, 20	; 0x18000
   10d10:	ldr	pc, [ip, #832]!	; 0x340

00010d14 <__ctype_get_mb_cur_max@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #24, 20	; 0x18000
   10d1c:	ldr	pc, [ip, #824]!	; 0x338

00010d20 <__fpending@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #24, 20	; 0x18000
   10d28:	ldr	pc, [ip, #816]!	; 0x330

00010d2c <mbrtowc@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #24, 20	; 0x18000
   10d34:	ldr	pc, [ip, #808]!	; 0x328

00010d38 <error@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #24, 20	; 0x18000
   10d40:	ldr	pc, [ip, #800]!	; 0x320

00010d44 <malloc@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #24, 20	; 0x18000
   10d4c:	ldr	pc, [ip, #792]!	; 0x318

00010d50 <__libc_start_main@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #24, 20	; 0x18000
   10d58:	ldr	pc, [ip, #784]!	; 0x310

00010d5c <__freading@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #24, 20	; 0x18000
   10d64:	ldr	pc, [ip, #776]!	; 0x308

00010d68 <__gmon_start__@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #24, 20	; 0x18000
   10d70:	ldr	pc, [ip, #768]!	; 0x300

00010d74 <getopt_long@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #24, 20	; 0x18000
   10d7c:	ldr	pc, [ip, #760]!	; 0x2f8

00010d80 <__ctype_b_loc@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #24, 20	; 0x18000
   10d88:	ldr	pc, [ip, #752]!	; 0x2f0

00010d8c <exit@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #24, 20	; 0x18000
   10d94:	ldr	pc, [ip, #744]!	; 0x2e8

00010d98 <strlen@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #24, 20	; 0x18000
   10da0:	ldr	pc, [ip, #736]!	; 0x2e0

00010da4 <__errno_location@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #24, 20	; 0x18000
   10dac:	ldr	pc, [ip, #728]!	; 0x2d8

00010db0 <__cxa_atexit@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #24, 20	; 0x18000
   10db8:	ldr	pc, [ip, #720]!	; 0x2d0

00010dbc <memset@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #24, 20	; 0x18000
   10dc4:	ldr	pc, [ip, #712]!	; 0x2c8

00010dc8 <__printf_chk@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #24, 20	; 0x18000
   10dd0:	ldr	pc, [ip, #704]!	; 0x2c0

00010dd4 <fileno@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #24, 20	; 0x18000
   10ddc:	ldr	pc, [ip, #696]!	; 0x2b8

00010de0 <__fprintf_chk@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #24, 20	; 0x18000
   10de8:	ldr	pc, [ip, #688]!	; 0x2b0

00010dec <fclose@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #24, 20	; 0x18000
   10df4:	ldr	pc, [ip, #680]!	; 0x2a8

00010df8 <fseeko64@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #24, 20	; 0x18000
   10e00:	ldr	pc, [ip, #672]!	; 0x2a0

00010e04 <__uflow@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #24, 20	; 0x18000
   10e0c:	ldr	pc, [ip, #664]!	; 0x298

00010e10 <__overflow@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #24, 20	; 0x18000
   10e18:	ldr	pc, [ip, #656]!	; 0x290

00010e1c <setlocale@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #24, 20	; 0x18000
   10e24:	ldr	pc, [ip, #648]!	; 0x288

00010e28 <strrchr@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #24, 20	; 0x18000
   10e30:	ldr	pc, [ip, #640]!	; 0x280

00010e34 <nl_langinfo@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #24, 20	; 0x18000
   10e3c:	ldr	pc, [ip, #632]!	; 0x278

00010e40 <clearerr_unlocked@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #24, 20	; 0x18000
   10e48:	ldr	pc, [ip, #624]!	; 0x270

00010e4c <fopen64@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #24, 20	; 0x18000
   10e54:	ldr	pc, [ip, #616]!	; 0x268

00010e58 <bindtextdomain@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #24, 20	; 0x18000
   10e60:	ldr	pc, [ip, #608]!	; 0x260

00010e64 <strncmp@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #24, 20	; 0x18000
   10e6c:	ldr	pc, [ip, #600]!	; 0x258

00010e70 <abort@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #24, 20	; 0x18000
   10e78:	ldr	pc, [ip, #592]!	; 0x250

00010e7c <strspn@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #24, 20	; 0x18000
   10e84:	ldr	pc, [ip, #584]!	; 0x248

00010e88 <__assert_fail@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #24, 20	; 0x18000
   10e90:	ldr	pc, [ip, #576]!	; 0x240

Disassembly of section .text:

00010e98 <.text>:
   10e98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e9c:	mov	r6, r0
   10ea0:	sub	sp, sp, #20
   10ea4:	ldr	r0, [r1]
   10ea8:	mov	r4, r1
   10eac:	bl	1235c <__assert_fail@plt+0x14d4>
   10eb0:	ldr	r1, [pc, #824]	; 111f0 <__assert_fail@plt+0x368>
   10eb4:	mov	r0, #6
   10eb8:	bl	10e1c <setlocale@plt>
   10ebc:	ldr	r1, [pc, #816]	; 111f4 <__assert_fail@plt+0x36c>
   10ec0:	ldr	r0, [pc, #816]	; 111f8 <__assert_fail@plt+0x370>
   10ec4:	bl	10e58 <bindtextdomain@plt>
   10ec8:	ldr	r8, [pc, #812]	; 111fc <__assert_fail@plt+0x374>
   10ecc:	ldr	r0, [pc, #804]	; 111f8 <__assert_fail@plt+0x370>
   10ed0:	ldr	r7, [pc, #808]	; 11200 <__assert_fail@plt+0x378>
   10ed4:	ldr	r9, [pc, #808]	; 11204 <__assert_fail@plt+0x37c>
   10ed8:	bl	10ce4 <textdomain@plt>
   10edc:	mov	r5, #0
   10ee0:	ldr	r0, [pc, #800]	; 11208 <__assert_fail@plt+0x380>
   10ee4:	bl	17da4 <__assert_fail@plt+0x6f1c>
   10ee8:	mov	r3, #1
   10eec:	strb	r3, [r8]
   10ef0:	mov	r3, r7
   10ef4:	str	r5, [sp]
   10ef8:	ldr	r2, [pc, #780]	; 1120c <__assert_fail@plt+0x384>
   10efc:	mov	r1, r4
   10f00:	mov	r0, r6
   10f04:	bl	10d74 <getopt_long@plt>
   10f08:	cmn	r0, #1
   10f0c:	mov	r3, r0
   10f10:	beq	10fb8 <__assert_fail@plt+0x130>
   10f14:	cmp	r3, #57	; 0x39
   10f18:	bgt	10f3c <__assert_fail@plt+0xb4>
   10f1c:	cmp	r3, #48	; 0x30
   10f20:	bge	10f98 <__assert_fail@plt+0x110>
   10f24:	cmn	r3, #3
   10f28:	beq	10f68 <__assert_fail@plt+0xe0>
   10f2c:	cmn	r3, #2
   10f30:	bne	10f60 <__assert_fail@plt+0xd8>
   10f34:	mov	r0, #0
   10f38:	bl	1135c <__assert_fail@plt+0x4d4>
   10f3c:	cmp	r3, #105	; 0x69
   10f40:	beq	10f58 <__assert_fail@plt+0xd0>
   10f44:	cmp	r3, #116	; 0x74
   10f48:	bne	10f60 <__assert_fail@plt+0xd8>
   10f4c:	ldr	r0, [r9]
   10f50:	bl	11774 <__assert_fail@plt+0x8ec>
   10f54:	b	10ef0 <__assert_fail@plt+0x68>
   10f58:	strb	r5, [r8]
   10f5c:	b	10ef0 <__assert_fail@plt+0x68>
   10f60:	mov	r0, #1
   10f64:	bl	1135c <__assert_fail@plt+0x4d4>
   10f68:	ldr	r1, [pc, #672]	; 11210 <__assert_fail@plt+0x388>
   10f6c:	ldr	r3, [pc, #672]	; 11214 <__assert_fail@plt+0x38c>
   10f70:	ldr	r2, [pc, #672]	; 11218 <__assert_fail@plt+0x390>
   10f74:	str	r5, [sp, #4]
   10f78:	ldr	r0, [r1]
   10f7c:	ldr	r3, [r3]
   10f80:	ldr	r1, [pc, #660]	; 1121c <__assert_fail@plt+0x394>
   10f84:	str	r2, [sp]
   10f88:	ldr	r2, [pc, #656]	; 11220 <__assert_fail@plt+0x398>
   10f8c:	bl	16bfc <__assert_fail@plt+0x5d74>
   10f90:	mov	r0, #0
   10f94:	bl	10d8c <exit@plt>
   10f98:	ldr	r2, [r9]
   10f9c:	cmp	r2, #0
   10fa0:	subne	r0, r2, #1
   10fa4:	addeq	r0, sp, #12
   10fa8:	strbeq	r3, [sp, #12]
   10fac:	strbeq	r2, [sp, #13]
   10fb0:	bl	11774 <__assert_fail@plt+0x8ec>
   10fb4:	b	10ef0 <__assert_fail@plt+0x68>
   10fb8:	bl	11b78 <__assert_fail@plt+0xcf0>
   10fbc:	ldr	r3, [pc, #608]	; 11224 <__assert_fail@plt+0x39c>
   10fc0:	ldr	r0, [r3]
   10fc4:	cmp	r6, r0
   10fc8:	addgt	r0, r4, r0, lsl #2
   10fcc:	movle	r0, #0
   10fd0:	bl	11dc8 <__assert_fail@plt+0xf40>
   10fd4:	mov	r0, #0
   10fd8:	bl	11df0 <__assert_fail@plt+0xf68>
   10fdc:	subs	r6, r0, #0
   10fe0:	beq	110f8 <__assert_fail@plt+0x270>
   10fe4:	ldr	r7, [pc, #548]	; 11210 <__assert_fail@plt+0x388>
   10fe8:	mov	r3, #0
   10fec:	mov	r4, #0
   10ff0:	mov	r5, #0
   10ff4:	mov	sl, #1
   10ff8:	mov	r9, #32
   10ffc:	str	r3, [sp, #12]
   11000:	b	11064 <__assert_fail@plt+0x1dc>
   11004:	adds	r4, r4, #1
   11008:	adc	r5, r5, #0
   1100c:	orrs	r3, r4, r5
   11010:	beq	111d0 <__assert_fail@plt+0x348>
   11014:	ldrb	sl, [r8]
   11018:	cmp	sl, #0
   1101c:	bne	11034 <__assert_fail@plt+0x1ac>
   11020:	bl	10d80 <__ctype_b_loc@plt>
   11024:	lsl	r3, fp, #1
   11028:	ldr	r2, [r0]
   1102c:	ldrh	r2, [r2, r3]
   11030:	and	sl, r2, #1
   11034:	cmp	fp, #0
   11038:	blt	110f8 <__assert_fail@plt+0x270>
   1103c:	ldr	r0, [r7]
   11040:	ldr	r3, [r0, #20]
   11044:	ldr	r1, [r0, #24]
   11048:	cmp	r3, r1
   1104c:	addcc	r1, r3, #1
   11050:	strcc	r1, [r0, #20]
   11054:	strbcc	fp, [r3]
   11058:	bcs	1110c <__assert_fail@plt+0x284>
   1105c:	cmp	fp, #10
   11060:	beq	10fe8 <__assert_fail@plt+0x160>
   11064:	ldr	r3, [r6, #4]
   11068:	ldr	r1, [r6, #8]
   1106c:	cmp	r3, r1
   11070:	bcs	110d0 <__assert_fail@plt+0x248>
   11074:	add	r1, r3, #1
   11078:	str	r1, [r6, #4]
   1107c:	ldrb	fp, [r3]
   11080:	cmp	sl, #0
   11084:	beq	1103c <__assert_fail@plt+0x1b4>
   11088:	cmp	fp, #9
   1108c:	beq	11144 <__assert_fail@plt+0x2bc>
   11090:	cmp	fp, #8
   11094:	bne	11004 <__assert_fail@plt+0x17c>
   11098:	orrs	r3, r4, r5
   1109c:	ldr	r1, [sp, #12]
   110a0:	movne	r2, #1
   110a4:	moveq	r2, #0
   110a8:	mov	r3, #0
   110ac:	cmp	r1, r3
   110b0:	subne	r1, r1, #1
   110b4:	subs	r4, r4, r2
   110b8:	sbc	r5, r5, r3
   110bc:	str	r1, [sp, #12]
   110c0:	ldrb	sl, [r8]
   110c4:	cmp	sl, #0
   110c8:	bne	1103c <__assert_fail@plt+0x1b4>
   110cc:	b	11020 <__assert_fail@plt+0x198>
   110d0:	mov	r0, r6
   110d4:	bl	10e04 <__uflow@plt>
   110d8:	subs	fp, r0, #0
   110dc:	bge	11080 <__assert_fail@plt+0x1f8>
   110e0:	mov	r0, r6
   110e4:	bl	11df0 <__assert_fail@plt+0xf68>
   110e8:	subs	r6, r0, #0
   110ec:	bne	11064 <__assert_fail@plt+0x1dc>
   110f0:	cmp	sl, #0
   110f4:	bne	11090 <__assert_fail@plt+0x208>
   110f8:	bl	11f90 <__assert_fail@plt+0x1108>
   110fc:	ldr	r3, [pc, #292]	; 11228 <__assert_fail@plt+0x3a0>
   11100:	ldr	r0, [r3]
   11104:	add	sp, sp, #20
   11108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1110c:	uxtb	r1, fp
   11110:	bl	10e10 <__overflow@plt>
   11114:	cmp	r0, #0
   11118:	bge	1105c <__assert_fail@plt+0x1d4>
   1111c:	bl	10da4 <__errno_location@plt>
   11120:	mov	r2, #5
   11124:	ldr	r1, [pc, #256]	; 1122c <__assert_fail@plt+0x3a4>
   11128:	ldr	r4, [r0]
   1112c:	mov	r0, #0
   11130:	bl	10ccc <dcgettext@plt>
   11134:	mov	r1, r4
   11138:	mov	r2, r0
   1113c:	mov	r0, #1
   11140:	bl	10d38 <error@plt>
   11144:	add	r3, sp, #11
   11148:	add	r2, sp, #12
   1114c:	mov	r0, r4
   11150:	mov	r1, r5
   11154:	bl	11cb4 <__assert_fail@plt+0xe2c>
   11158:	mov	fp, r1
   1115c:	ldrb	r1, [sp, #11]
   11160:	mov	sl, r0
   11164:	cmp	r1, #0
   11168:	beq	11174 <__assert_fail@plt+0x2ec>
   1116c:	adds	sl, r4, #1
   11170:	adc	fp, r5, #0
   11174:	cmp	r5, fp
   11178:	cmpeq	r4, sl
   1117c:	bhi	111d0 <__assert_fail@plt+0x348>
   11180:	adds	r4, r4, #1
   11184:	adc	r5, r5, #0
   11188:	cmp	fp, r5
   1118c:	cmpeq	sl, r4
   11190:	bls	111c8 <__assert_fail@plt+0x340>
   11194:	ldr	r0, [r7]
   11198:	ldr	r1, [r0, #20]
   1119c:	ldr	ip, [r0, #24]
   111a0:	cmp	r1, ip
   111a4:	addcc	ip, r1, #1
   111a8:	strcc	ip, [r0, #20]
   111ac:	strbcc	r9, [r1]
   111b0:	bcc	11180 <__assert_fail@plt+0x2f8>
   111b4:	mov	r1, r9
   111b8:	bl	10e10 <__overflow@plt>
   111bc:	cmp	r0, #0
   111c0:	bge	11180 <__assert_fail@plt+0x2f8>
   111c4:	b	1111c <__assert_fail@plt+0x294>
   111c8:	mov	fp, r9
   111cc:	b	110c0 <__assert_fail@plt+0x238>
   111d0:	mov	r2, #5
   111d4:	ldr	r1, [pc, #84]	; 11230 <__assert_fail@plt+0x3a8>
   111d8:	mov	r0, #0
   111dc:	bl	10ccc <dcgettext@plt>
   111e0:	mov	r1, #0
   111e4:	mov	r2, r0
   111e8:	mov	r0, #1
   111ec:	bl	10d38 <error@plt>
   111f0:	andeq	r7, r1, r4, asr #29
   111f4:	andeq	r8, r1, r4, asr r1
   111f8:	andeq	r8, r1, ip, lsr #1
   111fc:	muleq	r2, r0, r1
   11200:	andeq	r7, r1, r0, lsl #28
   11204:	andeq	r9, r2, r0, asr r1
   11208:	andeq	r2, r1, r0, asr #32
   1120c:	andeq	r7, r1, r0, asr lr
   11210:	andeq	r9, r2, ip, asr #2
   11214:	andeq	r9, r2, r8, ror #1
   11218:	andeq	r8, r1, ip, ror #2
   1121c:	andeq	r7, r1, r4, ror lr
   11220:	andeq	r8, r1, r8, lsr #1
   11224:	andeq	r9, r2, r8, lsr r1
   11228:	andeq	r9, r2, ip, lsl #3
   1122c:	muleq	r1, r4, r1
   11230:	andeq	r8, r1, ip, ror r1
   11234:	mov	fp, #0
   11238:	mov	lr, #0
   1123c:	pop	{r1}		; (ldr r1, [sp], #4)
   11240:	mov	r2, sp
   11244:	push	{r2}		; (str r2, [sp, #-4]!)
   11248:	push	{r0}		; (str r0, [sp, #-4]!)
   1124c:	ldr	ip, [pc, #16]	; 11264 <__assert_fail@plt+0x3dc>
   11250:	push	{ip}		; (str ip, [sp, #-4]!)
   11254:	ldr	r0, [pc, #12]	; 11268 <__assert_fail@plt+0x3e0>
   11258:	ldr	r3, [pc, #12]	; 1126c <__assert_fail@plt+0x3e4>
   1125c:	bl	10d50 <__libc_start_main@plt>
   11260:	bl	10e70 <abort@plt>
   11264:	andeq	r7, r1, r0, lsr #27
   11268:	muleq	r1, r8, lr
   1126c:	andeq	r7, r1, r0, asr #26
   11270:	ldr	r3, [pc, #20]	; 1128c <__assert_fail@plt+0x404>
   11274:	ldr	r2, [pc, #20]	; 11290 <__assert_fail@plt+0x408>
   11278:	add	r3, pc, r3
   1127c:	ldr	r2, [r3, r2]
   11280:	cmp	r2, #0
   11284:	bxeq	lr
   11288:	b	10d68 <__gmon_start__@plt>
   1128c:	andeq	r7, r1, r0, lsl #27
   11290:	ldrdeq	r0, [r0], -r4
   11294:	ldr	r3, [pc, #28]	; 112b8 <__assert_fail@plt+0x430>
   11298:	ldr	r0, [pc, #28]	; 112bc <__assert_fail@plt+0x434>
   1129c:	sub	r3, r3, r0
   112a0:	cmp	r3, #6
   112a4:	bxls	lr
   112a8:	ldr	r3, [pc, #16]	; 112c0 <__assert_fail@plt+0x438>
   112ac:	cmp	r3, #0
   112b0:	bxeq	lr
   112b4:	bx	r3
   112b8:	andeq	r9, r2, r3, lsr r1
   112bc:	andeq	r9, r2, r0, lsr r1
   112c0:	andeq	r0, r0, r0
   112c4:	ldr	r1, [pc, #36]	; 112f0 <__assert_fail@plt+0x468>
   112c8:	ldr	r0, [pc, #36]	; 112f4 <__assert_fail@plt+0x46c>
   112cc:	sub	r1, r1, r0
   112d0:	asr	r1, r1, #2
   112d4:	add	r1, r1, r1, lsr #31
   112d8:	asrs	r1, r1, #1
   112dc:	bxeq	lr
   112e0:	ldr	r3, [pc, #16]	; 112f8 <__assert_fail@plt+0x470>
   112e4:	cmp	r3, #0
   112e8:	bxeq	lr
   112ec:	bx	r3
   112f0:	andeq	r9, r2, r0, lsr r1
   112f4:	andeq	r9, r2, r0, lsr r1
   112f8:	andeq	r0, r0, r0
   112fc:	push	{r4, lr}
   11300:	ldr	r4, [pc, #24]	; 11320 <__assert_fail@plt+0x498>
   11304:	ldrb	r3, [r4]
   11308:	cmp	r3, #0
   1130c:	popne	{r4, pc}
   11310:	bl	11294 <__assert_fail@plt+0x40c>
   11314:	mov	r3, #1
   11318:	strb	r3, [r4]
   1131c:	pop	{r4, pc}
   11320:	andeq	r9, r2, r4, asr r1
   11324:	ldr	r0, [pc, #40]	; 11354 <__assert_fail@plt+0x4cc>
   11328:	ldr	r3, [r0]
   1132c:	cmp	r3, #0
   11330:	bne	11338 <__assert_fail@plt+0x4b0>
   11334:	b	112c4 <__assert_fail@plt+0x43c>
   11338:	ldr	r3, [pc, #24]	; 11358 <__assert_fail@plt+0x4d0>
   1133c:	cmp	r3, #0
   11340:	beq	11334 <__assert_fail@plt+0x4ac>
   11344:	push	{r4, lr}
   11348:	blx	r3
   1134c:	pop	{r4, lr}
   11350:	b	112c4 <__assert_fail@plt+0x43c>
   11354:	andeq	r8, r2, r4, lsl pc
   11358:	andeq	r0, r0, r0
   1135c:	subs	r6, r0, #0
   11360:	push	{r7, lr}
   11364:	sub	sp, sp, #56	; 0x38
   11368:	beq	113a4 <__assert_fail@plt+0x51c>
   1136c:	ldr	r3, [pc, #688]	; 11624 <__assert_fail@plt+0x79c>
   11370:	mov	r2, #5
   11374:	ldr	r1, [pc, #684]	; 11628 <__assert_fail@plt+0x7a0>
   11378:	mov	r0, #0
   1137c:	ldr	r4, [r3]
   11380:	bl	10ccc <dcgettext@plt>
   11384:	ldr	r3, [pc, #672]	; 1162c <__assert_fail@plt+0x7a4>
   11388:	mov	r1, #1
   1138c:	ldr	r3, [r3]
   11390:	mov	r2, r0
   11394:	mov	r0, r4
   11398:	bl	10de0 <__fprintf_chk@plt>
   1139c:	mov	r0, r6
   113a0:	bl	10d8c <exit@plt>
   113a4:	mov	r2, #5
   113a8:	ldr	r1, [pc, #640]	; 11630 <__assert_fail@plt+0x7a8>
   113ac:	bl	10ccc <dcgettext@plt>
   113b0:	ldr	r3, [pc, #628]	; 1162c <__assert_fail@plt+0x7a4>
   113b4:	ldr	r7, [pc, #632]	; 11634 <__assert_fail@plt+0x7ac>
   113b8:	ldr	r4, [pc, #632]	; 11638 <__assert_fail@plt+0x7b0>
   113bc:	ldr	r2, [r3]
   113c0:	mov	r1, r0
   113c4:	mov	r0, #1
   113c8:	bl	10dc8 <__printf_chk@plt>
   113cc:	mov	r2, #5
   113d0:	ldr	r1, [pc, #612]	; 1163c <__assert_fail@plt+0x7b4>
   113d4:	mov	r0, r6
   113d8:	bl	10ccc <dcgettext@plt>
   113dc:	ldr	r1, [r7]
   113e0:	bl	10c48 <fputs_unlocked@plt>
   113e4:	mov	r2, #5
   113e8:	ldr	r1, [pc, #592]	; 11640 <__assert_fail@plt+0x7b8>
   113ec:	mov	r0, r6
   113f0:	bl	10ccc <dcgettext@plt>
   113f4:	ldr	r1, [r7]
   113f8:	bl	10c48 <fputs_unlocked@plt>
   113fc:	mov	r2, #5
   11400:	ldr	r1, [pc, #572]	; 11644 <__assert_fail@plt+0x7bc>
   11404:	mov	r0, r6
   11408:	bl	10ccc <dcgettext@plt>
   1140c:	ldr	r1, [r7]
   11410:	bl	10c48 <fputs_unlocked@plt>
   11414:	mov	r2, #5
   11418:	ldr	r1, [pc, #552]	; 11648 <__assert_fail@plt+0x7c0>
   1141c:	mov	r0, r6
   11420:	bl	10ccc <dcgettext@plt>
   11424:	ldr	r1, [r7]
   11428:	bl	10c48 <fputs_unlocked@plt>
   1142c:	bl	11fd8 <__assert_fail@plt+0x1150>
   11430:	mov	r2, #5
   11434:	ldr	r1, [pc, #528]	; 1164c <__assert_fail@plt+0x7c4>
   11438:	mov	r0, r6
   1143c:	bl	10ccc <dcgettext@plt>
   11440:	ldr	r1, [r7]
   11444:	bl	10c48 <fputs_unlocked@plt>
   11448:	mov	r2, #5
   1144c:	ldr	r1, [pc, #508]	; 11650 <__assert_fail@plt+0x7c8>
   11450:	mov	r0, r6
   11454:	bl	10ccc <dcgettext@plt>
   11458:	ldr	r1, [r7]
   1145c:	bl	10c48 <fputs_unlocked@plt>
   11460:	ldm	r4!, {r0, r1, r2, r3}
   11464:	mov	lr, sp
   11468:	stmia	lr!, {r0, r1, r2, r3}
   1146c:	ldm	r4!, {r0, r1, r2, r3}
   11470:	ldr	ip, [sp]
   11474:	stmia	lr!, {r0, r1, r2, r3}
   11478:	cmp	ip, #0
   1147c:	ldm	r4!, {r0, r1, r2, r3}
   11480:	stmia	lr!, {r0, r1, r2, r3}
   11484:	ldm	r4, {r0, r1}
   11488:	moveq	r4, sp
   1148c:	stm	lr, {r0, r1}
   11490:	beq	114c0 <__assert_fail@plt+0x638>
   11494:	ldr	r5, [pc, #440]	; 11654 <__assert_fail@plt+0x7cc>
   11498:	mov	r4, sp
   1149c:	b	114ac <__assert_fail@plt+0x624>
   114a0:	ldr	ip, [r4, #8]!
   114a4:	cmp	ip, #0
   114a8:	beq	114c0 <__assert_fail@plt+0x638>
   114ac:	mov	r1, ip
   114b0:	mov	r0, r5
   114b4:	bl	10c60 <strcmp@plt>
   114b8:	cmp	r0, #0
   114bc:	bne	114a0 <__assert_fail@plt+0x618>
   114c0:	ldr	r4, [r4, #4]
   114c4:	mov	r2, #5
   114c8:	cmp	r4, #0
   114cc:	ldr	r1, [pc, #388]	; 11658 <__assert_fail@plt+0x7d0>
   114d0:	beq	11578 <__assert_fail@plt+0x6f0>
   114d4:	mov	r0, #0
   114d8:	bl	10ccc <dcgettext@plt>
   114dc:	ldr	r3, [pc, #376]	; 1165c <__assert_fail@plt+0x7d4>
   114e0:	ldr	r2, [pc, #376]	; 11660 <__assert_fail@plt+0x7d8>
   114e4:	mov	r1, r0
   114e8:	mov	r0, #1
   114ec:	bl	10dc8 <__printf_chk@plt>
   114f0:	mov	r1, #0
   114f4:	mov	r0, #5
   114f8:	bl	10e1c <setlocale@plt>
   114fc:	cmp	r0, #0
   11500:	ldreq	r5, [pc, #332]	; 11654 <__assert_fail@plt+0x7cc>
   11504:	beq	11520 <__assert_fail@plt+0x698>
   11508:	mov	r2, #3
   1150c:	ldr	r1, [pc, #336]	; 11664 <__assert_fail@plt+0x7dc>
   11510:	bl	10e64 <strncmp@plt>
   11514:	ldr	r5, [pc, #312]	; 11654 <__assert_fail@plt+0x7cc>
   11518:	cmp	r0, #0
   1151c:	bne	11608 <__assert_fail@plt+0x780>
   11520:	mov	r2, #5
   11524:	ldr	r1, [pc, #316]	; 11668 <__assert_fail@plt+0x7e0>
   11528:	mov	r0, #0
   1152c:	bl	10ccc <dcgettext@plt>
   11530:	ldr	r3, [pc, #284]	; 11654 <__assert_fail@plt+0x7cc>
   11534:	ldr	r2, [pc, #288]	; 1165c <__assert_fail@plt+0x7d4>
   11538:	mov	r1, r0
   1153c:	mov	r0, #1
   11540:	bl	10dc8 <__printf_chk@plt>
   11544:	mov	r2, #5
   11548:	ldr	r1, [pc, #284]	; 1166c <__assert_fail@plt+0x7e4>
   1154c:	mov	r0, #0
   11550:	bl	10ccc <dcgettext@plt>
   11554:	ldr	r2, [pc, #276]	; 11670 <__assert_fail@plt+0x7e8>
   11558:	cmp	r4, r5
   1155c:	ldr	r3, [pc, #272]	; 11674 <__assert_fail@plt+0x7ec>
   11560:	movne	r3, r2
   11564:	mov	r1, r0
   11568:	mov	r2, r4
   1156c:	mov	r0, #1
   11570:	bl	10dc8 <__printf_chk@plt>
   11574:	b	1139c <__assert_fail@plt+0x514>
   11578:	mov	r0, r4
   1157c:	bl	10ccc <dcgettext@plt>
   11580:	ldr	r3, [pc, #212]	; 1165c <__assert_fail@plt+0x7d4>
   11584:	ldr	r2, [pc, #212]	; 11660 <__assert_fail@plt+0x7d8>
   11588:	mov	r1, r0
   1158c:	mov	r0, #1
   11590:	bl	10dc8 <__printf_chk@plt>
   11594:	mov	r1, r4
   11598:	mov	r0, #5
   1159c:	bl	10e1c <setlocale@plt>
   115a0:	cmp	r0, #0
   115a4:	beq	115bc <__assert_fail@plt+0x734>
   115a8:	mov	r2, #3
   115ac:	ldr	r1, [pc, #176]	; 11664 <__assert_fail@plt+0x7dc>
   115b0:	bl	10e64 <strncmp@plt>
   115b4:	cmp	r0, #0
   115b8:	bne	11600 <__assert_fail@plt+0x778>
   115bc:	mov	r2, #5
   115c0:	ldr	r1, [pc, #160]	; 11668 <__assert_fail@plt+0x7e0>
   115c4:	mov	r0, #0
   115c8:	bl	10ccc <dcgettext@plt>
   115cc:	ldr	r3, [pc, #128]	; 11654 <__assert_fail@plt+0x7cc>
   115d0:	ldr	r2, [pc, #132]	; 1165c <__assert_fail@plt+0x7d4>
   115d4:	mov	r4, r3
   115d8:	mov	r1, r0
   115dc:	mov	r0, #1
   115e0:	bl	10dc8 <__printf_chk@plt>
   115e4:	ldr	r1, [pc, #128]	; 1166c <__assert_fail@plt+0x7e4>
   115e8:	mov	r2, #5
   115ec:	mov	r0, #0
   115f0:	bl	10ccc <dcgettext@plt>
   115f4:	ldr	r3, [pc, #120]	; 11674 <__assert_fail@plt+0x7ec>
   115f8:	mov	r1, r0
   115fc:	b	11568 <__assert_fail@plt+0x6e0>
   11600:	ldr	r5, [pc, #76]	; 11654 <__assert_fail@plt+0x7cc>
   11604:	mov	r4, r5
   11608:	mov	r2, #5
   1160c:	ldr	r1, [pc, #100]	; 11678 <__assert_fail@plt+0x7f0>
   11610:	mov	r0, #0
   11614:	bl	10ccc <dcgettext@plt>
   11618:	ldr	r1, [r7]
   1161c:	bl	10c48 <fputs_unlocked@plt>
   11620:	b	11520 <__assert_fail@plt+0x698>
   11624:	andeq	r9, r2, r0, asr #2
   11628:	andeq	r7, r1, ip, ror lr
   1162c:	muleq	r2, ip, r1
   11630:	andeq	r7, r1, r4, lsr #29
   11634:	andeq	r9, r2, ip, asr #2
   11638:	andeq	r7, r1, r8, asr #27
   1163c:	andeq	r7, r1, r8, asr #29
   11640:	andeq	r7, r1, ip, lsl #30
   11644:	andeq	r7, r1, r4, asr #30
   11648:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1164c:	andeq	r8, r1, r0
   11650:	andeq	r8, r1, r0, lsr r0
   11654:	andeq	r7, r1, r4, ror lr
   11658:	andeq	r8, r1, r8, rrx
   1165c:	andeq	r8, r1, r0, lsl #1
   11660:	andeq	r8, r1, r8, lsr #1
   11664:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   11668:	andeq	r8, r1, r4, lsl #2
   1166c:	andeq	r8, r1, r0, lsr #2
   11670:	andeq	r7, r1, r4, asr #29
   11674:	andeq	r8, r1, r8, lsr #3
   11678:	strheq	r8, [r1], -ip
   1167c:	andeq	r0, r0, r0
   11680:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11684:	mov	r6, r0
   11688:	ldr	r8, [pc, #216]	; 11768 <__assert_fail@plt+0x8e0>
   1168c:	mov	r7, r1
   11690:	ldr	r3, [r8]
   11694:	cmp	r3, #0
   11698:	beq	11708 <__assert_fail@plt+0x880>
   1169c:	ldr	r2, [r8, #4]
   116a0:	add	r1, r2, r3, lsl #3
   116a4:	ldrd	r4, [r1, #-8]
   116a8:	cmp	r5, r7
   116ac:	cmpeq	r4, r0
   116b0:	movhi	r4, #0
   116b4:	movhi	r5, #0
   116b8:	bls	11714 <__assert_fail@plt+0x88c>
   116bc:	ldr	r1, [r8, #8]
   116c0:	cmp	r3, r1
   116c4:	beq	11728 <__assert_fail@plt+0x8a0>
   116c8:	ldr	sl, [r8, #12]
   116cc:	mov	fp, #0
   116d0:	cmp	r5, fp
   116d4:	lsl	r1, r3, #3
   116d8:	cmpeq	r4, sl
   116dc:	add	r3, r3, #1
   116e0:	strd	r6, [r2, r1]
   116e4:	str	r3, [r8]
   116e8:	popls	{r4, r5, r6, r7, r8, sl, fp, pc}
   116ec:	mov	r3, #0
   116f0:	mvn	r2, #0
   116f4:	cmp	r5, r3
   116f8:	cmpeq	r4, r2
   116fc:	bhi	11748 <__assert_fail@plt+0x8c0>
   11700:	str	r4, [r8, #12]
   11704:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11708:	ldr	r2, [r8, #4]
   1170c:	mov	r4, #0
   11710:	mov	r5, #0
   11714:	ldr	r1, [r8, #8]
   11718:	subs	r4, r6, r4
   1171c:	sbc	r5, r7, r5
   11720:	cmp	r3, r1
   11724:	bne	116c8 <__assert_fail@plt+0x840>
   11728:	mov	r0, r2
   1172c:	ldr	r1, [pc, #56]	; 1176c <__assert_fail@plt+0x8e4>
   11730:	mov	r2, #8
   11734:	bl	16f94 <__assert_fail@plt+0x610c>
   11738:	ldr	r3, [r8]
   1173c:	mov	r2, r0
   11740:	str	r0, [r8, #4]
   11744:	b	116c8 <__assert_fail@plt+0x840>
   11748:	mov	r2, #5
   1174c:	ldr	r1, [pc, #28]	; 11770 <__assert_fail@plt+0x8e8>
   11750:	mov	r0, #0
   11754:	bl	10ccc <dcgettext@plt>
   11758:	mov	r1, #0
   1175c:	mov	r2, r0
   11760:	mov	r0, #1
   11764:	bl	10d38 <error@plt>
   11768:	andeq	r9, r2, r8, asr r1
   1176c:	andeq	r9, r2, r0, ror #2
   11770:	andeq	r8, r1, r8, lsr r2
   11774:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11778:	sub	sp, sp, #20
   1177c:	ldrb	fp, [r0]
   11780:	cmp	fp, #0
   11784:	beq	1190c <__assert_fail@plt+0xa84>
   11788:	mov	r8, #0
   1178c:	mov	r3, #0
   11790:	mov	r2, #0
   11794:	mov	r4, r0
   11798:	mov	r9, r8
   1179c:	mov	r7, r8
   117a0:	mov	r6, r8
   117a4:	strd	r2, [sp]
   117a8:	mov	r3, #1
   117ac:	str	r3, [sp, #12]
   117b0:	cmp	fp, #44	; 0x2c
   117b4:	beq	11914 <__assert_fail@plt+0xa8c>
   117b8:	bl	10d80 <__ctype_b_loc@plt>
   117bc:	lsl	r2, fp, #1
   117c0:	ldr	r1, [r0]
   117c4:	ldrh	r5, [r1, r2]
   117c8:	ands	r5, r5, #1
   117cc:	bne	11914 <__assert_fail@plt+0xa8c>
   117d0:	cmp	fp, #47	; 0x2f
   117d4:	beq	11974 <__assert_fail@plt+0xaec>
   117d8:	cmp	fp, #43	; 0x2b
   117dc:	beq	11a00 <__assert_fail@plt+0xb78>
   117e0:	sub	r3, fp, #48	; 0x30
   117e4:	cmp	r3, #9
   117e8:	bhi	11ab4 <__assert_fail@plt+0xc2c>
   117ec:	cmp	r6, #0
   117f0:	beq	119e8 <__assert_fail@plt+0xb60>
   117f4:	ldrd	r0, [sp]
   117f8:	add	fp, pc, #848	; 0x350
   117fc:	ldrd	sl, [fp]
   11800:	cmp	r1, fp
   11804:	cmpeq	r0, sl
   11808:	bhi	11834 <__assert_fail@plt+0x9ac>
   1180c:	mov	r2, #10
   11810:	mov	fp, r1
   11814:	mov	sl, r0
   11818:	umull	r0, r1, r0, r2
   1181c:	mla	r1, r2, fp, r1
   11820:	adds	r0, r0, r3
   11824:	adc	r1, r1, r3, asr #31
   11828:	cmp	r1, fp
   1182c:	cmpeq	r0, sl
   11830:	bcs	11b44 <__assert_fail@plt+0xcbc>
   11834:	ldr	r1, [pc, #796]	; 11b58 <__assert_fail@plt+0xcd0>
   11838:	mov	r0, r8
   1183c:	bl	10e7c <strspn@plt>
   11840:	mov	r1, r0
   11844:	mov	r4, r0
   11848:	mov	r0, r8
   1184c:	bl	173b8 <__assert_fail@plt+0x6530>
   11850:	mov	r2, #5
   11854:	ldr	r1, [pc, #768]	; 11b5c <__assert_fail@plt+0xcd4>
   11858:	sub	r4, r4, #1
   1185c:	add	r4, r8, r4
   11860:	add	r4, r4, #1
   11864:	mov	r5, r0
   11868:	mov	r0, #0
   1186c:	bl	10ccc <dcgettext@plt>
   11870:	mov	fp, r0
   11874:	mov	r0, r5
   11878:	bl	16228 <__assert_fail@plt+0x53a0>
   1187c:	mov	r1, #0
   11880:	mov	r2, fp
   11884:	mov	r3, r0
   11888:	mov	r0, r1
   1188c:	bl	10d38 <error@plt>
   11890:	mov	r0, r5
   11894:	bl	12264 <__assert_fail@plt+0x13dc>
   11898:	ldrb	fp, [r4]
   1189c:	mov	r3, #0
   118a0:	str	r3, [sp, #12]
   118a4:	cmp	fp, #0
   118a8:	bne	117b0 <__assert_fail@plt+0x928>
   118ac:	ldr	r3, [sp, #12]
   118b0:	tst	r6, r3
   118b4:	beq	11b3c <__assert_fail@plt+0xcb4>
   118b8:	cmp	r7, #0
   118bc:	bne	11af8 <__assert_fail@plt+0xc70>
   118c0:	cmp	r9, #0
   118c4:	beq	11ae8 <__assert_fail@plt+0xc60>
   118c8:	ldr	r4, [pc, #656]	; 11b60 <__assert_fail@plt+0xcd8>
   118cc:	ldrd	r2, [r4, #24]
   118d0:	orrs	r3, r2, r3
   118d4:	beq	118fc <__assert_fail@plt+0xa74>
   118d8:	mov	r2, #5
   118dc:	ldr	r1, [pc, #640]	; 11b64 <__assert_fail@plt+0xcdc>
   118e0:	mov	r0, r7
   118e4:	bl	10ccc <dcgettext@plt>
   118e8:	mov	r1, r7
   118ec:	mov	r9, r7
   118f0:	mov	r2, r0
   118f4:	mov	r0, r7
   118f8:	bl	10d38 <error@plt>
   118fc:	ldrd	r2, [sp]
   11900:	strd	r2, [r4, #24]
   11904:	cmp	r9, #0
   11908:	beq	11a7c <__assert_fail@plt+0xbf4>
   1190c:	add	sp, sp, #20
   11910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11914:	cmp	r6, #0
   11918:	beq	1194c <__assert_fail@plt+0xac4>
   1191c:	cmp	r7, #0
   11920:	bne	119c4 <__assert_fail@plt+0xb3c>
   11924:	cmp	r9, #0
   11928:	beq	11960 <__assert_fail@plt+0xad8>
   1192c:	ldr	r3, [pc, #556]	; 11b60 <__assert_fail@plt+0xcd8>
   11930:	ldrd	r2, [r3, #24]
   11934:	orrs	r3, r2, r3
   11938:	bne	11a50 <__assert_fail@plt+0xbc8>
   1193c:	ldrd	r2, [sp]
   11940:	ldr	r1, [pc, #536]	; 11b60 <__assert_fail@plt+0xcd8>
   11944:	mov	r6, r7
   11948:	strd	r2, [r1, #24]
   1194c:	ldrb	fp, [r4, #1]
   11950:	add	r4, r4, #1
   11954:	cmp	fp, #0
   11958:	bne	117b0 <__assert_fail@plt+0x928>
   1195c:	b	118ac <__assert_fail@plt+0xa24>
   11960:	ldrd	r0, [sp]
   11964:	bl	11680 <__assert_fail@plt+0x7f8>
   11968:	mov	r7, r9
   1196c:	mov	r6, r9
   11970:	b	1194c <__assert_fail@plt+0xac4>
   11974:	cmp	r6, #0
   11978:	moveq	r9, r6
   1197c:	moveq	r7, #1
   11980:	beq	1194c <__assert_fail@plt+0xac4>
   11984:	mov	r2, #5
   11988:	ldr	r1, [pc, #472]	; 11b68 <__assert_fail@plt+0xce0>
   1198c:	mov	r0, r5
   11990:	bl	10ccc <dcgettext@plt>
   11994:	mov	r9, r5
   11998:	mov	r7, r0
   1199c:	mov	r0, r4
   119a0:	bl	16228 <__assert_fail@plt+0x53a0>
   119a4:	mov	r2, r7
   119a8:	mov	r1, r5
   119ac:	str	r5, [sp, #12]
   119b0:	mov	r7, r6
   119b4:	mov	r3, r0
   119b8:	mov	r0, r5
   119bc:	bl	10d38 <error@plt>
   119c0:	b	1194c <__assert_fail@plt+0xac4>
   119c4:	ldr	r3, [pc, #404]	; 11b60 <__assert_fail@plt+0xcd8>
   119c8:	ldrd	r2, [r3, #16]
   119cc:	orrs	r3, r2, r3
   119d0:	bne	11a84 <__assert_fail@plt+0xbfc>
   119d4:	ldrd	r2, [sp]
   119d8:	ldr	r1, [pc, #384]	; 11b60 <__assert_fail@plt+0xcd8>
   119dc:	mov	r6, #0
   119e0:	strd	r2, [r1, #16]
   119e4:	b	1194c <__assert_fail@plt+0xac4>
   119e8:	mov	r0, r3
   119ec:	asr	r1, r3, #31
   119f0:	mov	r8, r4
   119f4:	strd	r0, [sp]
   119f8:	mov	r6, #1
   119fc:	b	1194c <__assert_fail@plt+0xac4>
   11a00:	cmp	r6, #0
   11a04:	moveq	r7, r6
   11a08:	moveq	r9, #1
   11a0c:	beq	1194c <__assert_fail@plt+0xac4>
   11a10:	mov	r2, #5
   11a14:	ldr	r1, [pc, #336]	; 11b6c <__assert_fail@plt+0xce4>
   11a18:	mov	r0, r5
   11a1c:	bl	10ccc <dcgettext@plt>
   11a20:	mov	r9, r6
   11a24:	mov	r7, r0
   11a28:	mov	r0, r4
   11a2c:	bl	16228 <__assert_fail@plt+0x53a0>
   11a30:	mov	r2, r7
   11a34:	mov	r1, r5
   11a38:	str	r5, [sp, #12]
   11a3c:	mov	r7, r5
   11a40:	mov	r3, r0
   11a44:	mov	r0, r5
   11a48:	bl	10d38 <error@plt>
   11a4c:	b	1194c <__assert_fail@plt+0xac4>
   11a50:	mov	r2, #5
   11a54:	ldr	r1, [pc, #264]	; 11b64 <__assert_fail@plt+0xcdc>
   11a58:	mov	r0, r7
   11a5c:	bl	10ccc <dcgettext@plt>
   11a60:	mov	r1, r7
   11a64:	mov	r2, r0
   11a68:	mov	r0, r7
   11a6c:	bl	10d38 <error@plt>
   11a70:	ldrd	r2, [sp]
   11a74:	ldr	r1, [pc, #228]	; 11b60 <__assert_fail@plt+0xcd8>
   11a78:	strd	r2, [r1, #24]
   11a7c:	mov	r0, #1
   11a80:	bl	10d8c <exit@plt>
   11a84:	mov	r2, #5
   11a88:	ldr	r1, [pc, #224]	; 11b70 <__assert_fail@plt+0xce8>
   11a8c:	mov	r0, #0
   11a90:	bl	10ccc <dcgettext@plt>
   11a94:	mov	r1, #0
   11a98:	mov	r2, r0
   11a9c:	mov	r0, r1
   11aa0:	bl	10d38 <error@plt>
   11aa4:	ldrd	r2, [sp]
   11aa8:	ldr	r1, [pc, #176]	; 11b60 <__assert_fail@plt+0xcd8>
   11aac:	strd	r2, [r1, #16]
   11ab0:	b	11a7c <__assert_fail@plt+0xbf4>
   11ab4:	mov	r2, #5
   11ab8:	ldr	r1, [pc, #180]	; 11b74 <__assert_fail@plt+0xcec>
   11abc:	mov	r0, r5
   11ac0:	bl	10ccc <dcgettext@plt>
   11ac4:	mov	r6, r0
   11ac8:	mov	r0, r4
   11acc:	bl	16228 <__assert_fail@plt+0x53a0>
   11ad0:	mov	r2, r6
   11ad4:	mov	r1, r5
   11ad8:	mov	r3, r0
   11adc:	mov	r0, r5
   11ae0:	bl	10d38 <error@plt>
   11ae4:	b	11a7c <__assert_fail@plt+0xbf4>
   11ae8:	ldrd	r0, [sp]
   11aec:	add	sp, sp, #20
   11af0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11af4:	b	11680 <__assert_fail@plt+0x7f8>
   11af8:	ldr	r4, [pc, #96]	; 11b60 <__assert_fail@plt+0xcd8>
   11afc:	ldrd	r0, [r4, #16]
   11b00:	orrs	r3, r0, r1
   11b04:	beq	11b2c <__assert_fail@plt+0xca4>
   11b08:	mov	r2, #5
   11b0c:	ldr	r1, [pc, #92]	; 11b70 <__assert_fail@plt+0xce8>
   11b10:	mov	r0, fp
   11b14:	bl	10ccc <dcgettext@plt>
   11b18:	mov	r1, fp
   11b1c:	mov	r7, fp
   11b20:	mov	r2, r0
   11b24:	mov	r0, fp
   11b28:	bl	10d38 <error@plt>
   11b2c:	ldrd	r2, [sp]
   11b30:	mov	r9, r7
   11b34:	strd	r2, [r4, #16]
   11b38:	b	11904 <__assert_fail@plt+0xa7c>
   11b3c:	mov	r9, r3
   11b40:	b	11904 <__assert_fail@plt+0xa7c>
   11b44:	strd	r0, [sp]
   11b48:	b	1194c <__assert_fail@plt+0xac4>
   11b4c:	nop			; (mov r0, r0)
   11b50:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11b54:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11b58:	andeq	r8, r1, r4, lsr r3
   11b5c:	andeq	r8, r1, r0, asr #6
   11b60:	andeq	r9, r2, r8, asr r1
   11b64:	andeq	r8, r1, r0, lsl #5
   11b68:			; <UNDEFINED> instruction: 0x000182b0
   11b6c:	ldrdeq	r8, [r1], -ip
   11b70:	andeq	r8, r1, r0, asr r2
   11b74:	andeq	r8, r1, r8, lsl #6
   11b78:	ldr	ip, [pc, #292]	; 11ca4 <__assert_fail@plt+0xe1c>
   11b7c:	push	{r4, r5, r6, r7, r8, lr}
   11b80:	ldr	lr, [ip]
   11b84:	ldr	r0, [ip, #4]
   11b88:	cmp	lr, #0
   11b8c:	beq	11c24 <__assert_fail@plt+0xd9c>
   11b90:	ldrd	r6, [r0]
   11b94:	orrs	r3, r6, r7
   11b98:	mov	r4, r6
   11b9c:	mov	r5, r7
   11ba0:	movne	r1, #0
   11ba4:	bne	11bcc <__assert_fail@plt+0xd44>
   11ba8:	b	11c6c <__assert_fail@plt+0xde4>
   11bac:	ldrd	r2, [r0, #8]!
   11bb0:	orrs	r8, r2, r3
   11bb4:	beq	11c6c <__assert_fail@plt+0xde4>
   11bb8:	cmp	r3, r5
   11bbc:	cmpeq	r2, r4
   11bc0:	bls	11c8c <__assert_fail@plt+0xe04>
   11bc4:	mov	r4, r2
   11bc8:	mov	r5, r3
   11bcc:	add	r1, r1, #1
   11bd0:	cmp	lr, r1
   11bd4:	bne	11bac <__assert_fail@plt+0xd24>
   11bd8:	ldrd	r0, [ip, #24]
   11bdc:	orrs	r3, r0, r1
   11be0:	beq	11bf0 <__assert_fail@plt+0xd68>
   11be4:	ldrd	r2, [ip, #16]
   11be8:	orrs	r3, r2, r3
   11bec:	bne	11c98 <__assert_fail@plt+0xe10>
   11bf0:	cmp	lr, #1
   11bf4:	beq	11c08 <__assert_fail@plt+0xd80>
   11bf8:	mov	r2, #0
   11bfc:	mov	r3, #0
   11c00:	strd	r2, [ip, #32]
   11c04:	pop	{r4, r5, r6, r7, r8, pc}
   11c08:	ldrd	r2, [ip, #16]
   11c0c:	orr	r2, r2, r0
   11c10:	orr	r3, r3, r1
   11c14:	orrs	r3, r2, r3
   11c18:	bne	11bf8 <__assert_fail@plt+0xd70>
   11c1c:	strd	r6, [ip, #32]
   11c20:	pop	{r4, r5, r6, r7, r8, pc}
   11c24:	ldrd	r2, [ip, #24]
   11c28:	orrs	r1, r2, r3
   11c2c:	beq	11c50 <__assert_fail@plt+0xdc8>
   11c30:	ldrd	r0, [ip, #16]
   11c34:	orrs	r1, r0, r1
   11c38:	bne	11c98 <__assert_fail@plt+0xe10>
   11c3c:	mov	r1, r2
   11c40:	mov	r3, #0
   11c44:	str	r1, [ip, #12]
   11c48:	strd	r2, [ip, #32]
   11c4c:	pop	{r4, r5, r6, r7, r8, pc}
   11c50:	ldrd	r2, [ip, #16]
   11c54:	orrs	r1, r2, r3
   11c58:	bne	11c3c <__assert_fail@plt+0xdb4>
   11c5c:	mov	r2, #8
   11c60:	mov	r3, #0
   11c64:	mov	r1, #8
   11c68:	b	11c44 <__assert_fail@plt+0xdbc>
   11c6c:	ldr	r1, [pc, #52]	; 11ca8 <__assert_fail@plt+0xe20>
   11c70:	mov	r2, #5
   11c74:	mov	r0, #0
   11c78:	bl	10ccc <dcgettext@plt>
   11c7c:	mov	r1, #0
   11c80:	mov	r2, r0
   11c84:	mov	r0, #1
   11c88:	bl	10d38 <error@plt>
   11c8c:	mov	r2, #5
   11c90:	ldr	r1, [pc, #20]	; 11cac <__assert_fail@plt+0xe24>
   11c94:	b	11c74 <__assert_fail@plt+0xdec>
   11c98:	mov	r2, #5
   11c9c:	ldr	r1, [pc, #12]	; 11cb0 <__assert_fail@plt+0xe28>
   11ca0:	b	11c74 <__assert_fail@plt+0xdec>
   11ca4:	andeq	r9, r2, r8, asr r1
   11ca8:	andeq	r8, r1, ip, asr r3
   11cac:	andeq	r8, r1, r4, ror r3
   11cb0:	muleq	r1, r0, r3
   11cb4:	push	{r4, r5, r6, r7, r8, lr}
   11cb8:	mov	ip, #0
   11cbc:	ldr	lr, [pc, #256]	; 11dc4 <__assert_fail@plt+0xf3c>
   11cc0:	strb	ip, [r3]
   11cc4:	mov	r6, r0
   11cc8:	ldrd	r4, [lr, #32]
   11ccc:	mov	r7, r1
   11cd0:	orrs	ip, r4, r5
   11cd4:	bne	11d88 <__assert_fail@plt+0xf00>
   11cd8:	ldr	r1, [r2]
   11cdc:	ldr	ip, [lr]
   11ce0:	cmp	ip, r1
   11ce4:	bls	11d2c <__assert_fail@plt+0xea4>
   11ce8:	ldr	r5, [lr, #4]
   11cec:	lsl	r4, r1, #3
   11cf0:	add	r0, r5, r4
   11cf4:	add	r4, r5, r4
   11cf8:	ldrd	r4, [r4]
   11cfc:	cmp	r7, r5
   11d00:	cmpeq	r6, r4
   11d04:	bcs	11d1c <__assert_fail@plt+0xe94>
   11d08:	b	11d7c <__assert_fail@plt+0xef4>
   11d0c:	ldrd	r4, [r0, #8]!
   11d10:	cmp	r7, r5
   11d14:	cmpeq	r6, r4
   11d18:	bcc	11da8 <__assert_fail@plt+0xf20>
   11d1c:	add	r1, r1, #1
   11d20:	cmp	r1, ip
   11d24:	bne	11d0c <__assert_fail@plt+0xe84>
   11d28:	str	ip, [r2]
   11d2c:	ldrd	r4, [lr, #16]
   11d30:	orrs	r2, r4, r5
   11d34:	bne	11db0 <__assert_fail@plt+0xf28>
   11d38:	ldrd	r4, [lr, #24]
   11d3c:	orrs	r2, r4, r5
   11d40:	moveq	r2, #1
   11d44:	strbeq	r2, [r3]
   11d48:	beq	11d7c <__assert_fail@plt+0xef4>
   11d4c:	ldr	r1, [lr, #4]
   11d50:	mov	r2, r4
   11d54:	add	ip, r1, ip, lsl #3
   11d58:	adds	r4, r4, r6
   11d5c:	ldrd	r0, [ip, #-8]
   11d60:	mov	r3, r5
   11d64:	adc	r5, r5, r7
   11d68:	subs	r0, r6, r0
   11d6c:	sbc	r1, r7, r1
   11d70:	bl	17bcc <__assert_fail@plt+0x6d44>
   11d74:	subs	r4, r4, r2
   11d78:	sbc	r5, r5, r3
   11d7c:	mov	r0, r4
   11d80:	mov	r1, r5
   11d84:	pop	{r4, r5, r6, r7, r8, pc}
   11d88:	mov	r2, r4
   11d8c:	mov	r3, r5
   11d90:	adds	r4, r4, r6
   11d94:	adc	r5, r5, r7
   11d98:	bl	17bcc <__assert_fail@plt+0x6d44>
   11d9c:	subs	r4, r4, r2
   11da0:	sbc	r5, r5, r3
   11da4:	b	11d7c <__assert_fail@plt+0xef4>
   11da8:	str	r1, [r2]
   11dac:	b	11d7c <__assert_fail@plt+0xef4>
   11db0:	mov	r2, r4
   11db4:	mov	r3, r5
   11db8:	mov	r0, r6
   11dbc:	mov	r1, r7
   11dc0:	b	11d90 <__assert_fail@plt+0xf08>
   11dc4:	andeq	r9, r2, r8, asr r1
   11dc8:	ldr	r3, [pc, #24]	; 11de8 <__assert_fail@plt+0xf60>
   11dcc:	ldr	r2, [pc, #24]	; 11dec <__assert_fail@plt+0xf64>
   11dd0:	cmp	r0, #0
   11dd4:	moveq	r0, r3
   11dd8:	mov	r3, #0
   11ddc:	str	r0, [r2, #44]	; 0x2c
   11de0:	strb	r3, [r2, #40]	; 0x28
   11de4:	bx	lr
   11de8:	andeq	r9, r2, r0, ror #1
   11dec:	andeq	r9, r2, r8, asr r1
   11df0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11df4:	subs	r6, r0, #0
   11df8:	ldr	r5, [pc, #368]	; 11f70 <__assert_fail@plt+0x10e8>
   11dfc:	beq	11e7c <__assert_fail@plt+0xff4>
   11e00:	ldr	r7, [r5, #48]	; 0x30
   11e04:	cmp	r7, #0
   11e08:	beq	11f5c <__assert_fail@plt+0x10d4>
   11e0c:	bl	10da4 <__errno_location@plt>
   11e10:	ldr	r3, [r6]
   11e14:	ldr	r1, [pc, #344]	; 11f74 <__assert_fail@plt+0x10ec>
   11e18:	tst	r3, #32
   11e1c:	ldr	r4, [r0]
   11e20:	mov	r8, r0
   11e24:	mov	r0, r7
   11e28:	moveq	r4, #0
   11e2c:	bl	10c60 <strcmp@plt>
   11e30:	cmp	r0, #0
   11e34:	mov	r0, r6
   11e38:	beq	11f54 <__assert_fail@plt+0x10cc>
   11e3c:	bl	12164 <__assert_fail@plt+0x12dc>
   11e40:	cmp	r0, #0
   11e44:	ldrne	r4, [r8]
   11e48:	cmp	r4, #0
   11e4c:	beq	11e7c <__assert_fail@plt+0xff4>
   11e50:	ldr	r2, [r5, #48]	; 0x30
   11e54:	mov	r1, #3
   11e58:	mov	r0, #0
   11e5c:	bl	15334 <__assert_fail@plt+0x44ac>
   11e60:	mov	r1, r4
   11e64:	ldr	r2, [pc, #268]	; 11f78 <__assert_fail@plt+0x10f0>
   11e68:	mov	r3, r0
   11e6c:	mov	r0, #0
   11e70:	bl	10d38 <error@plt>
   11e74:	mov	r3, #1
   11e78:	str	r3, [r5, #52]	; 0x34
   11e7c:	ldr	r3, [r5, #44]	; 0x2c
   11e80:	add	r2, r3, #4
   11e84:	ldr	r6, [r3]
   11e88:	str	r2, [r5, #44]	; 0x2c
   11e8c:	cmp	r6, #0
   11e90:	beq	11f48 <__assert_fail@plt+0x10c0>
   11e94:	ldr	r8, [pc, #216]	; 11f74 <__assert_fail@plt+0x10ec>
   11e98:	ldr	fp, [pc, #220]	; 11f7c <__assert_fail@plt+0x10f4>
   11e9c:	ldr	sl, [pc, #212]	; 11f78 <__assert_fail@plt+0x10f0>
   11ea0:	mov	r7, #1
   11ea4:	mov	r9, #3
   11ea8:	b	11f04 <__assert_fail@plt+0x107c>
   11eac:	ldr	r4, [fp]
   11eb0:	strb	r7, [r5, #40]	; 0x28
   11eb4:	cmp	r4, #0
   11eb8:	bne	11f30 <__assert_fail@plt+0x10a8>
   11ebc:	bl	10da4 <__errno_location@plt>
   11ec0:	mov	r2, r6
   11ec4:	mov	r1, r9
   11ec8:	ldr	r6, [r0]
   11ecc:	mov	r0, r4
   11ed0:	bl	15334 <__assert_fail@plt+0x44ac>
   11ed4:	mov	r2, sl
   11ed8:	mov	r1, r6
   11edc:	mov	r3, r0
   11ee0:	mov	r0, r4
   11ee4:	bl	10d38 <error@plt>
   11ee8:	ldr	r3, [r5, #44]	; 0x2c
   11eec:	str	r7, [r5, #52]	; 0x34
   11ef0:	add	r2, r3, #4
   11ef4:	ldr	r6, [r3]
   11ef8:	str	r2, [r5, #44]	; 0x2c
   11efc:	cmp	r6, #0
   11f00:	beq	11f48 <__assert_fail@plt+0x10c0>
   11f04:	mov	r1, r8
   11f08:	mov	r0, r6
   11f0c:	bl	10c60 <strcmp@plt>
   11f10:	cmp	r0, #0
   11f14:	beq	11eac <__assert_fail@plt+0x1024>
   11f18:	ldr	r1, [pc, #96]	; 11f80 <__assert_fail@plt+0x10f8>
   11f1c:	mov	r0, r6
   11f20:	bl	10e4c <fopen64@plt>
   11f24:	mov	r4, r0
   11f28:	cmp	r4, #0
   11f2c:	beq	11ebc <__assert_fail@plt+0x1034>
   11f30:	mov	r0, r4
   11f34:	mov	r1, #2
   11f38:	str	r6, [r5, #48]	; 0x30
   11f3c:	bl	12130 <__assert_fail@plt+0x12a8>
   11f40:	mov	r0, r4
   11f44:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f48:	mov	r4, #0
   11f4c:	mov	r0, r4
   11f50:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f54:	bl	10e40 <clearerr_unlocked@plt>
   11f58:	b	11e48 <__assert_fail@plt+0xfc0>
   11f5c:	ldr	r3, [pc, #32]	; 11f84 <__assert_fail@plt+0x10fc>
   11f60:	mov	r2, #340	; 0x154
   11f64:	ldr	r1, [pc, #28]	; 11f88 <__assert_fail@plt+0x1100>
   11f68:	ldr	r0, [pc, #28]	; 11f8c <__assert_fail@plt+0x1104>
   11f6c:	bl	10e88 <__assert_fail@plt>
   11f70:	andeq	r9, r2, r8, asr r1
   11f74:	andeq	r8, r1, r0, ror #7
   11f78:	andeq	r8, r1, r0, lsr r3
   11f7c:	andeq	r9, r2, r8, asr #2
   11f80:	andeq	r8, r1, r4, ror #7
   11f84:	andeq	r8, r1, ip, lsr #4
   11f88:	andeq	r8, r1, r0, asr #7
   11f8c:	ldrdeq	r8, [r1], -r4
   11f90:	ldr	r3, [pc, #52]	; 11fcc <__assert_fail@plt+0x1144>
   11f94:	ldrb	r3, [r3, #40]	; 0x28
   11f98:	cmp	r3, #0
   11f9c:	bxeq	lr
   11fa0:	ldr	r3, [pc, #40]	; 11fd0 <__assert_fail@plt+0x1148>
   11fa4:	push	{r4, lr}
   11fa8:	ldr	r0, [r3]
   11fac:	bl	12164 <__assert_fail@plt+0x12dc>
   11fb0:	cmp	r0, #0
   11fb4:	popeq	{r4, pc}
   11fb8:	bl	10da4 <__errno_location@plt>
   11fbc:	ldr	r2, [pc, #16]	; 11fd4 <__assert_fail@plt+0x114c>
   11fc0:	ldr	r1, [r0]
   11fc4:	mov	r0, #1
   11fc8:	bl	10d38 <error@plt>
   11fcc:	andeq	r9, r2, r8, asr r1
   11fd0:	andeq	r9, r2, r8, asr #2
   11fd4:	andeq	r8, r1, r0, ror #7
   11fd8:	push	{r4, lr}
   11fdc:	mov	r2, #5
   11fe0:	ldr	r4, [pc, #44]	; 12014 <__assert_fail@plt+0x118c>
   11fe4:	ldr	r1, [pc, #44]	; 12018 <__assert_fail@plt+0x1190>
   11fe8:	mov	r0, #0
   11fec:	bl	10ccc <dcgettext@plt>
   11ff0:	ldr	r1, [r4]
   11ff4:	bl	10c48 <fputs_unlocked@plt>
   11ff8:	ldr	r1, [pc, #28]	; 1201c <__assert_fail@plt+0x1194>
   11ffc:	mov	r2, #5
   12000:	mov	r0, #0
   12004:	bl	10ccc <dcgettext@plt>
   12008:	ldr	r1, [r4]
   1200c:	pop	{r4, lr}
   12010:	b	10c48 <fputs_unlocked@plt>
   12014:	andeq	r9, r2, ip, asr #2
   12018:	andeq	r8, r1, r8, ror #7
   1201c:	andeq	r8, r1, r8, lsr #8
   12020:	ldr	r3, [pc, #4]	; 1202c <__assert_fail@plt+0x11a4>
   12024:	str	r0, [r3]
   12028:	bx	lr
   1202c:	muleq	r2, r4, r1
   12030:	ldr	r3, [pc, #4]	; 1203c <__assert_fail@plt+0x11b4>
   12034:	strb	r0, [r3, #4]
   12038:	bx	lr
   1203c:	muleq	r2, r4, r1
   12040:	ldr	r3, [pc, #192]	; 12108 <__assert_fail@plt+0x1280>
   12044:	push	{r4, r5, r6, lr}
   12048:	sub	sp, sp, #8
   1204c:	ldr	r0, [r3]
   12050:	bl	1753c <__assert_fail@plt+0x66b4>
   12054:	cmp	r0, #0
   12058:	beq	1207c <__assert_fail@plt+0x11f4>
   1205c:	ldr	r4, [pc, #168]	; 1210c <__assert_fail@plt+0x1284>
   12060:	ldrb	r3, [r4, #4]
   12064:	cmp	r3, #0
   12068:	beq	12098 <__assert_fail@plt+0x1210>
   1206c:	bl	10da4 <__errno_location@plt>
   12070:	ldr	r3, [r0]
   12074:	cmp	r3, #32
   12078:	bne	12098 <__assert_fail@plt+0x1210>
   1207c:	ldr	r3, [pc, #140]	; 12110 <__assert_fail@plt+0x1288>
   12080:	ldr	r0, [r3]
   12084:	bl	1753c <__assert_fail@plt+0x66b4>
   12088:	cmp	r0, #0
   1208c:	bne	120e0 <__assert_fail@plt+0x1258>
   12090:	add	sp, sp, #8
   12094:	pop	{r4, r5, r6, pc}
   12098:	mov	r2, #5
   1209c:	ldr	r1, [pc, #112]	; 12114 <__assert_fail@plt+0x128c>
   120a0:	mov	r0, #0
   120a4:	bl	10ccc <dcgettext@plt>
   120a8:	ldr	r4, [r4]
   120ac:	cmp	r4, #0
   120b0:	mov	r5, r0
   120b4:	beq	120ec <__assert_fail@plt+0x1264>
   120b8:	bl	10da4 <__errno_location@plt>
   120bc:	ldr	r6, [r0]
   120c0:	mov	r0, r4
   120c4:	bl	14fc8 <__assert_fail@plt+0x4140>
   120c8:	mov	r1, r6
   120cc:	str	r5, [sp]
   120d0:	ldr	r2, [pc, #64]	; 12118 <__assert_fail@plt+0x1290>
   120d4:	mov	r3, r0
   120d8:	mov	r0, #0
   120dc:	bl	10d38 <error@plt>
   120e0:	ldr	r3, [pc, #52]	; 1211c <__assert_fail@plt+0x1294>
   120e4:	ldr	r0, [r3]
   120e8:	bl	10c90 <_exit@plt>
   120ec:	bl	10da4 <__errno_location@plt>
   120f0:	mov	r3, r5
   120f4:	ldr	r2, [pc, #36]	; 12120 <__assert_fail@plt+0x1298>
   120f8:	ldr	r1, [r0]
   120fc:	mov	r0, r4
   12100:	bl	10d38 <error@plt>
   12104:	b	120e0 <__assert_fail@plt+0x1258>
   12108:	andeq	r9, r2, ip, asr #2
   1210c:	muleq	r2, r4, r1
   12110:	andeq	r9, r2, r0, asr #2
   12114:	muleq	r1, r4, r1
   12118:	andeq	r8, r1, r8, lsr #11
   1211c:	andeq	r9, r2, ip, ror #1
   12120:	andeq	r8, r1, r0, lsr r3
   12124:	push	{r4, r5}
   12128:	pop	{r4, r5}
   1212c:	b	10c6c <posix_fadvise64@plt>
   12130:	cmp	r0, #0
   12134:	bxeq	lr
   12138:	push	{r4, lr}
   1213c:	sub	sp, sp, #16
   12140:	mov	r4, r1
   12144:	bl	10dd4 <fileno@plt>
   12148:	mov	r2, #0
   1214c:	mov	r3, #0
   12150:	str	r4, [sp, #8]
   12154:	strd	r2, [sp]
   12158:	bl	10c6c <posix_fadvise64@plt>
   1215c:	add	sp, sp, #16
   12160:	pop	{r4, pc}
   12164:	push	{r4, r5, lr}
   12168:	sub	sp, sp, #12
   1216c:	mov	r4, r0
   12170:	bl	10dd4 <fileno@plt>
   12174:	cmp	r0, #0
   12178:	mov	r0, r4
   1217c:	blt	121f8 <__assert_fail@plt+0x1370>
   12180:	bl	10d5c <__freading@plt>
   12184:	cmp	r0, #0
   12188:	bne	121c4 <__assert_fail@plt+0x133c>
   1218c:	mov	r0, r4
   12190:	bl	12204 <__assert_fail@plt+0x137c>
   12194:	cmp	r0, #0
   12198:	beq	121f4 <__assert_fail@plt+0x136c>
   1219c:	bl	10da4 <__errno_location@plt>
   121a0:	mov	r5, r0
   121a4:	mov	r0, r4
   121a8:	ldr	r4, [r5]
   121ac:	bl	10dec <fclose@plt>
   121b0:	cmp	r4, #0
   121b4:	mvnne	r0, #0
   121b8:	strne	r4, [r5]
   121bc:	add	sp, sp, #12
   121c0:	pop	{r4, r5, pc}
   121c4:	mov	r0, r4
   121c8:	bl	10dd4 <fileno@plt>
   121cc:	mov	r3, #1
   121d0:	str	r3, [sp]
   121d4:	mov	r2, #0
   121d8:	mov	r3, #0
   121dc:	bl	10d08 <lseek64@plt>
   121e0:	mvn	r3, #0
   121e4:	mvn	r2, #0
   121e8:	cmp	r1, r3
   121ec:	cmpeq	r0, r2
   121f0:	bne	1218c <__assert_fail@plt+0x1304>
   121f4:	mov	r0, r4
   121f8:	add	sp, sp, #12
   121fc:	pop	{r4, r5, lr}
   12200:	b	10dec <fclose@plt>
   12204:	push	{r4, lr}
   12208:	subs	r4, r0, #0
   1220c:	sub	sp, sp, #8
   12210:	beq	1222c <__assert_fail@plt+0x13a4>
   12214:	bl	10d5c <__freading@plt>
   12218:	cmp	r0, #0
   1221c:	beq	1222c <__assert_fail@plt+0x13a4>
   12220:	ldr	r3, [r4]
   12224:	tst	r3, #256	; 0x100
   12228:	bne	1223c <__assert_fail@plt+0x13b4>
   1222c:	mov	r0, r4
   12230:	add	sp, sp, #8
   12234:	pop	{r4, lr}
   12238:	b	10c78 <fflush@plt>
   1223c:	mov	r3, #1
   12240:	str	r3, [sp]
   12244:	mov	r2, #0
   12248:	mov	r3, #0
   1224c:	mov	r0, r4
   12250:	bl	122bc <__assert_fail@plt+0x1434>
   12254:	mov	r0, r4
   12258:	add	sp, sp, #8
   1225c:	pop	{r4, lr}
   12260:	b	10c78 <fflush@plt>
   12264:	push	{r4, r5, lr}
   12268:	sub	sp, sp, #12
   1226c:	mov	r5, r0
   12270:	bl	10da4 <__errno_location@plt>
   12274:	mov	r2, #0
   12278:	mov	r4, r0
   1227c:	ldr	r3, [r0]
   12280:	str	r2, [r4]
   12284:	mov	r0, r5
   12288:	str	r3, [sp]
   1228c:	str	r3, [sp, #4]
   12290:	bl	10c84 <free@plt>
   12294:	ldr	r3, [r4]
   12298:	add	r2, sp, #8
   1229c:	cmp	r3, #0
   122a0:	moveq	r3, #4
   122a4:	movne	r3, #0
   122a8:	add	r3, r2, r3
   122ac:	ldr	r3, [r3, #-8]
   122b0:	str	r3, [r4]
   122b4:	add	sp, sp, #12
   122b8:	pop	{r4, r5, pc}
   122bc:	push	{r4, r5, r6, r7, r8, lr}
   122c0:	sub	sp, sp, #8
   122c4:	ldmib	r0, {ip, lr}
   122c8:	mov	r4, r0
   122cc:	ldr	r5, [sp, #32]
   122d0:	cmp	lr, ip
   122d4:	beq	122ec <__assert_fail@plt+0x1464>
   122d8:	str	r5, [sp, #32]
   122dc:	mov	r0, r4
   122e0:	add	sp, sp, #8
   122e4:	pop	{r4, r5, r6, r7, r8, lr}
   122e8:	b	10df8 <fseeko64@plt>
   122ec:	ldr	lr, [r0, #20]
   122f0:	ldr	ip, [r0, #16]
   122f4:	cmp	lr, ip
   122f8:	bne	122d8 <__assert_fail@plt+0x1450>
   122fc:	ldr	r8, [r0, #36]	; 0x24
   12300:	cmp	r8, #0
   12304:	bne	122d8 <__assert_fail@plt+0x1450>
   12308:	mov	r6, r2
   1230c:	mov	r7, r3
   12310:	bl	10dd4 <fileno@plt>
   12314:	mov	r2, r6
   12318:	mov	r3, r7
   1231c:	str	r5, [sp]
   12320:	bl	10d08 <lseek64@plt>
   12324:	mvn	r3, #0
   12328:	mvn	r2, #0
   1232c:	cmp	r1, r3
   12330:	cmpeq	r0, r2
   12334:	beq	12354 <__assert_fail@plt+0x14cc>
   12338:	ldr	r3, [r4]
   1233c:	strd	r0, [r4, #80]	; 0x50
   12340:	mov	r0, r8
   12344:	bic	r3, r3, #16
   12348:	str	r3, [r4]
   1234c:	add	sp, sp, #8
   12350:	pop	{r4, r5, r6, r7, r8, pc}
   12354:	mvn	r0, #0
   12358:	b	1234c <__assert_fail@plt+0x14c4>
   1235c:	push	{r4, r5, r6, lr}
   12360:	subs	r4, r0, #0
   12364:	beq	123d8 <__assert_fail@plt+0x1550>
   12368:	mov	r1, #47	; 0x2f
   1236c:	bl	10e28 <strrchr@plt>
   12370:	subs	r5, r0, #0
   12374:	beq	123c4 <__assert_fail@plt+0x153c>
   12378:	add	r6, r5, #1
   1237c:	sub	r3, r6, r4
   12380:	cmp	r3, #6
   12384:	ble	123c4 <__assert_fail@plt+0x153c>
   12388:	mov	r2, #7
   1238c:	ldr	r1, [pc, #96]	; 123f4 <__assert_fail@plt+0x156c>
   12390:	sub	r0, r5, #6
   12394:	bl	10e64 <strncmp@plt>
   12398:	cmp	r0, #0
   1239c:	bne	123c4 <__assert_fail@plt+0x153c>
   123a0:	mov	r2, #3
   123a4:	ldr	r1, [pc, #76]	; 123f8 <__assert_fail@plt+0x1570>
   123a8:	mov	r0, r6
   123ac:	bl	10e64 <strncmp@plt>
   123b0:	cmp	r0, #0
   123b4:	movne	r4, r6
   123b8:	ldreq	r3, [pc, #60]	; 123fc <__assert_fail@plt+0x1574>
   123bc:	addeq	r4, r5, #4
   123c0:	streq	r4, [r3]
   123c4:	ldr	r2, [pc, #52]	; 12400 <__assert_fail@plt+0x1578>
   123c8:	ldr	r3, [pc, #52]	; 12404 <__assert_fail@plt+0x157c>
   123cc:	str	r4, [r2]
   123d0:	str	r4, [r3]
   123d4:	pop	{r4, r5, r6, pc}
   123d8:	ldr	r3, [pc, #40]	; 12408 <__assert_fail@plt+0x1580>
   123dc:	mov	r2, #55	; 0x37
   123e0:	mov	r1, #1
   123e4:	ldr	r3, [r3]
   123e8:	ldr	r0, [pc, #28]	; 1240c <__assert_fail@plt+0x1584>
   123ec:	bl	10cfc <fwrite@plt>
   123f0:	bl	10e70 <abort@plt>
   123f4:	andeq	r8, r1, r8, ror #11
   123f8:	strdeq	r8, [r1], -r0
   123fc:	andeq	r9, r2, r0, lsr r1
   12400:	muleq	r2, ip, r1
   12404:	andeq	r9, r2, r4, lsr r1
   12408:	andeq	r9, r2, r0, asr #2
   1240c:			; <UNDEFINED> instruction: 0x000185b0
   12410:	push	{r4, r5, r6, lr}
   12414:	mov	r4, r0
   12418:	mov	r5, r1
   1241c:	bl	175b8 <__assert_fail@plt+0x6730>
   12420:	ldrb	r3, [r0]
   12424:	bic	r3, r3, #32
   12428:	cmp	r3, #85	; 0x55
   1242c:	bne	1248c <__assert_fail@plt+0x1604>
   12430:	ldrb	r3, [r0, #1]
   12434:	bic	r3, r3, #32
   12438:	cmp	r3, #84	; 0x54
   1243c:	bne	124c8 <__assert_fail@plt+0x1640>
   12440:	ldrb	r3, [r0, #2]
   12444:	bic	r3, r3, #32
   12448:	cmp	r3, #70	; 0x46
   1244c:	bne	124c8 <__assert_fail@plt+0x1640>
   12450:	ldrb	r3, [r0, #3]
   12454:	cmp	r3, #45	; 0x2d
   12458:	bne	124c8 <__assert_fail@plt+0x1640>
   1245c:	ldrb	r3, [r0, #4]
   12460:	cmp	r3, #56	; 0x38
   12464:	bne	124c8 <__assert_fail@plt+0x1640>
   12468:	ldrb	r3, [r0, #5]
   1246c:	cmp	r3, #0
   12470:	bne	124c8 <__assert_fail@plt+0x1640>
   12474:	ldrb	r2, [r4]
   12478:	ldr	r3, [pc, #152]	; 12518 <__assert_fail@plt+0x1690>
   1247c:	ldr	r0, [pc, #152]	; 1251c <__assert_fail@plt+0x1694>
   12480:	cmp	r2, #96	; 0x60
   12484:	movne	r0, r3
   12488:	pop	{r4, r5, r6, pc}
   1248c:	cmp	r3, #71	; 0x47
   12490:	bne	124c8 <__assert_fail@plt+0x1640>
   12494:	ldrb	r3, [r0, #1]
   12498:	bic	r3, r3, #32
   1249c:	cmp	r3, #66	; 0x42
   124a0:	bne	124c8 <__assert_fail@plt+0x1640>
   124a4:	ldrb	r3, [r0, #2]
   124a8:	cmp	r3, #49	; 0x31
   124ac:	bne	124c8 <__assert_fail@plt+0x1640>
   124b0:	ldrb	r3, [r0, #3]
   124b4:	cmp	r3, #56	; 0x38
   124b8:	bne	124c8 <__assert_fail@plt+0x1640>
   124bc:	ldrb	r3, [r0, #4]
   124c0:	cmp	r3, #48	; 0x30
   124c4:	beq	124dc <__assert_fail@plt+0x1654>
   124c8:	ldr	r3, [pc, #80]	; 12520 <__assert_fail@plt+0x1698>
   124cc:	cmp	r5, #9
   124d0:	ldr	r0, [pc, #76]	; 12524 <__assert_fail@plt+0x169c>
   124d4:	movne	r0, r3
   124d8:	pop	{r4, r5, r6, pc}
   124dc:	ldrb	r3, [r0, #5]
   124e0:	cmp	r3, #51	; 0x33
   124e4:	bne	124c8 <__assert_fail@plt+0x1640>
   124e8:	ldrb	r3, [r0, #6]
   124ec:	cmp	r3, #48	; 0x30
   124f0:	bne	124c8 <__assert_fail@plt+0x1640>
   124f4:	ldrb	r3, [r0, #7]
   124f8:	cmp	r3, #0
   124fc:	bne	124c8 <__assert_fail@plt+0x1640>
   12500:	ldrb	r2, [r4]
   12504:	ldr	r3, [pc, #28]	; 12528 <__assert_fail@plt+0x16a0>
   12508:	ldr	r0, [pc, #28]	; 1252c <__assert_fail@plt+0x16a4>
   1250c:	cmp	r2, #96	; 0x60
   12510:	movne	r0, r3
   12514:	pop	{r4, r5, r6, pc}
   12518:	andeq	r8, r1, ip, asr #12
   1251c:	andeq	r8, r1, r8, asr #12
   12520:	andeq	r8, r1, ip, asr r6
   12524:	andeq	r8, r1, r8, asr r6
   12528:	andeq	r8, r1, r4, asr r6
   1252c:	andeq	r8, r1, r0, asr r6
   12530:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12534:	sub	sp, sp, #140	; 0x8c
   12538:	mov	r9, r1
   1253c:	str	r3, [sp, #24]
   12540:	mov	r3, #1
   12544:	mov	sl, r0
   12548:	str	r2, [sp, #44]	; 0x2c
   1254c:	str	r3, [sp, #28]
   12550:	bl	10d14 <__ctype_get_mb_cur_max@plt>
   12554:	ldr	r3, [sp, #180]	; 0xb4
   12558:	mov	fp, r9
   1255c:	mov	r9, sl
   12560:	lsr	r3, r3, #1
   12564:	and	r3, r3, #1
   12568:	str	r3, [sp, #40]	; 0x28
   1256c:	ldr	r3, [sp, #180]	; 0xb4
   12570:	mov	r2, #0
   12574:	and	r3, r3, #4
   12578:	str	r3, [sp, #100]	; 0x64
   1257c:	ldr	r3, [sp, #180]	; 0xb4
   12580:	str	r2, [sp, #76]	; 0x4c
   12584:	and	r3, r3, #1
   12588:	str	r3, [sp, #96]	; 0x60
   1258c:	str	r2, [sp, #36]	; 0x24
   12590:	str	r2, [sp, #56]	; 0x38
   12594:	str	r2, [sp, #68]	; 0x44
   12598:	str	r2, [sp, #72]	; 0x48
   1259c:	str	r2, [sp, #84]	; 0x54
   125a0:	str	r0, [sp, #80]	; 0x50
   125a4:	ldr	r3, [sp, #176]	; 0xb0
   125a8:	cmp	r3, #10
   125ac:	ldrls	pc, [pc, r3, lsl #2]
   125b0:	b	13788 <__assert_fail@plt+0x2900>
   125b4:	andeq	r2, r1, r0, ror #11
   125b8:	andeq	r2, r1, r0, lsl #18
   125bc:	andeq	r2, r1, r8, asr sl
   125c0:	andeq	r2, r1, r4, lsr r9
   125c4:	andeq	r2, r1, ip, lsr #21
   125c8:	andeq	r2, r1, ip, lsl #21
   125cc:	andeq	r2, r1, r4, asr r9
   125d0:	andeq	r2, r1, r8, ror r9
   125d4:	andeq	r2, r1, r0, lsr #19
   125d8:	andeq	r2, r1, r0, lsr #19
   125dc:	andeq	r2, r1, r0, lsr #19
   125e0:	mov	r3, #0
   125e4:	ldr	r1, [sp, #56]	; 0x38
   125e8:	ldr	r2, [sp, #176]	; 0xb0
   125ec:	ldr	lr, [sp, #176]	; 0xb0
   125f0:	mov	r8, r3
   125f4:	mov	ip, r3
   125f8:	str	r3, [sp, #40]	; 0x28
   125fc:	mov	r3, r1
   12600:	cmp	r2, #2
   12604:	moveq	r3, #0
   12608:	andne	r3, r3, #1
   1260c:	mov	r0, r3
   12610:	str	r3, [sp, #92]	; 0x5c
   12614:	ldr	r3, [sp, #68]	; 0x44
   12618:	sub	lr, lr, #2
   1261c:	adds	r2, r3, #0
   12620:	movne	r2, #1
   12624:	and	r3, r1, ip
   12628:	and	r3, r2, r3
   1262c:	clz	lr, lr
   12630:	str	r3, [sp, #88]	; 0x58
   12634:	lsr	lr, lr, #5
   12638:	mov	r3, ip
   1263c:	and	r3, r3, lr
   12640:	mov	sl, #0
   12644:	and	r0, r2, r0
   12648:	str	r3, [sp, #64]	; 0x40
   1264c:	eor	r3, r1, #1
   12650:	str	lr, [sp, #52]	; 0x34
   12654:	str	r0, [sp, #48]	; 0x30
   12658:	str	r3, [sp, #60]	; 0x3c
   1265c:	ldr	r3, [sp, #24]
   12660:	cmn	r3, #1
   12664:	beq	12b94 <__assert_fail@plt+0x1d0c>
   12668:	subs	r7, r3, sl
   1266c:	movne	r7, #1
   12670:	cmp	r7, #0
   12674:	beq	12bac <__assert_fail@plt+0x1d24>
   12678:	ldr	r3, [sp, #48]	; 0x30
   1267c:	cmp	r3, #0
   12680:	beq	12f18 <__assert_fail@plt+0x2090>
   12684:	ldr	r2, [sp, #68]	; 0x44
   12688:	ldr	r1, [sp, #24]
   1268c:	cmp	r2, #1
   12690:	mov	r3, r2
   12694:	movls	r3, #0
   12698:	movhi	r3, #1
   1269c:	cmn	r1, #1
   126a0:	movne	r3, #0
   126a4:	cmp	r3, #0
   126a8:	add	r4, sl, r2
   126ac:	beq	126bc <__assert_fail@plt+0x1834>
   126b0:	ldr	r0, [sp, #44]	; 0x2c
   126b4:	bl	10d98 <strlen@plt>
   126b8:	str	r0, [sp, #24]
   126bc:	ldr	r3, [sp, #24]
   126c0:	cmp	r3, r4
   126c4:	ldr	r3, [sp, #44]	; 0x2c
   126c8:	add	r5, r3, sl
   126cc:	bcc	12f20 <__assert_fail@plt+0x2098>
   126d0:	mov	r0, r5
   126d4:	ldr	r2, [sp, #68]	; 0x44
   126d8:	ldr	r1, [sp, #72]	; 0x48
   126dc:	bl	10cb4 <memcmp@plt>
   126e0:	cmp	r0, #0
   126e4:	bne	12f20 <__assert_fail@plt+0x2098>
   126e8:	ldr	r3, [sp, #40]	; 0x28
   126ec:	cmp	r3, #0
   126f0:	bne	138dc <__assert_fail@plt+0x2a54>
   126f4:	ldrb	r4, [r5]
   126f8:	cmp	r4, #126	; 0x7e
   126fc:	ldrls	pc, [pc, r4, lsl #2]
   12700:	b	13818 <__assert_fail@plt+0x2990>
   12704:	ldrdeq	r2, [r1], -r8
   12708:	andeq	r3, r1, r8, lsl r8
   1270c:	andeq	r3, r1, r8, lsl r8
   12710:	andeq	r3, r1, r8, lsl r8
   12714:	andeq	r3, r1, r8, lsl r8
   12718:	andeq	r3, r1, r8, lsl r8
   1271c:	andeq	r3, r1, r8, lsl r8
   12720:	andeq	r2, r1, r4, asr #27
   12724:			; <UNDEFINED> instruction: 0x00012db0
   12728:	andeq	r2, r1, ip, lsl #27
   1272c:	andeq	r2, r1, ip, ror #26
   12730:	muleq	r1, ip, sp
   12734:	ldrdeq	r2, [r1], -r4
   12738:	andeq	r2, r1, r8, lsl #30
   1273c:	andeq	r3, r1, r8, lsl r8
   12740:	andeq	r3, r1, r8, lsl r8
   12744:	andeq	r3, r1, r8, lsl r8
   12748:	andeq	r3, r1, r8, lsl r8
   1274c:	andeq	r3, r1, r8, lsl r8
   12750:	andeq	r3, r1, r8, lsl r8
   12754:	andeq	r3, r1, r8, lsl r8
   12758:	andeq	r3, r1, r8, lsl r8
   1275c:	andeq	r3, r1, r8, lsl r8
   12760:	andeq	r3, r1, r8, lsl r8
   12764:	andeq	r3, r1, r8, lsl r8
   12768:	andeq	r3, r1, r8, lsl r8
   1276c:	andeq	r3, r1, r8, lsl r8
   12770:	andeq	r3, r1, r8, lsl r8
   12774:	andeq	r3, r1, r8, lsl r8
   12778:	andeq	r3, r1, r8, lsl r8
   1277c:	andeq	r3, r1, r8, lsl r8
   12780:	andeq	r3, r1, r8, lsl r8
   12784:	strdeq	r2, [r1], -r8
   12788:	ldrdeq	r2, [r1], -r8
   1278c:	ldrdeq	r2, [r1], -r8
   12790:			; <UNDEFINED> instruction: 0x00012eb8
   12794:	ldrdeq	r2, [r1], -r8
   12798:	andeq	r2, r1, r4, asr #25
   1279c:	ldrdeq	r2, [r1], -r8
   127a0:	andeq	r2, r1, r0, lsr #25
   127a4:	ldrdeq	r2, [r1], -r8
   127a8:	ldrdeq	r2, [r1], -r8
   127ac:	ldrdeq	r2, [r1], -r8
   127b0:	andeq	r2, r1, r4, asr #25
   127b4:	andeq	r2, r1, r4, asr #25
   127b8:	andeq	r2, r1, r4, asr #25
   127bc:	andeq	r2, r1, r4, asr #25
   127c0:	andeq	r2, r1, r4, asr #25
   127c4:	andeq	r2, r1, r4, asr #25
   127c8:	andeq	r2, r1, r4, asr #25
   127cc:	andeq	r2, r1, r4, asr #25
   127d0:	andeq	r2, r1, r4, asr #25
   127d4:	andeq	r2, r1, r4, asr #25
   127d8:	andeq	r2, r1, r4, asr #25
   127dc:	andeq	r2, r1, r4, asr #25
   127e0:	andeq	r2, r1, r4, asr #25
   127e4:	andeq	r2, r1, r4, asr #25
   127e8:	andeq	r2, r1, r4, asr #25
   127ec:	andeq	r2, r1, r4, asr #25
   127f0:	ldrdeq	r2, [r1], -r8
   127f4:	ldrdeq	r2, [r1], -r8
   127f8:	ldrdeq	r2, [r1], -r8
   127fc:	ldrdeq	r2, [r1], -r8
   12800:	andeq	r2, r1, r0, asr ip
   12804:	andeq	r3, r1, r8, lsl r8
   12808:	andeq	r2, r1, r4, asr #25
   1280c:	andeq	r2, r1, r4, asr #25
   12810:	andeq	r2, r1, r4, asr #25
   12814:	andeq	r2, r1, r4, asr #25
   12818:	andeq	r2, r1, r4, asr #25
   1281c:	andeq	r2, r1, r4, asr #25
   12820:	andeq	r2, r1, r4, asr #25
   12824:	andeq	r2, r1, r4, asr #25
   12828:	andeq	r2, r1, r4, asr #25
   1282c:	andeq	r2, r1, r4, asr #25
   12830:	andeq	r2, r1, r4, asr #25
   12834:	andeq	r2, r1, r4, asr #25
   12838:	andeq	r2, r1, r4, asr #25
   1283c:	andeq	r2, r1, r4, asr #25
   12840:	andeq	r2, r1, r4, asr #25
   12844:	andeq	r2, r1, r4, asr #25
   12848:	andeq	r2, r1, r4, asr #25
   1284c:	andeq	r2, r1, r4, asr #25
   12850:	andeq	r2, r1, r4, asr #25
   12854:	andeq	r2, r1, r4, asr #25
   12858:	andeq	r2, r1, r4, asr #25
   1285c:	andeq	r2, r1, r4, asr #25
   12860:	andeq	r2, r1, r4, asr #25
   12864:	andeq	r2, r1, r4, asr #25
   12868:	andeq	r2, r1, r4, asr #25
   1286c:	andeq	r2, r1, r4, asr #25
   12870:	ldrdeq	r2, [r1], -r8
   12874:	andeq	r2, r1, ip, lsl ip
   12878:	andeq	r2, r1, r4, asr #25
   1287c:	ldrdeq	r2, [r1], -r8
   12880:	andeq	r2, r1, r4, asr #25
   12884:	ldrdeq	r2, [r1], -r8
   12888:	andeq	r2, r1, r4, asr #25
   1288c:	andeq	r2, r1, r4, asr #25
   12890:	andeq	r2, r1, r4, asr #25
   12894:	andeq	r2, r1, r4, asr #25
   12898:	andeq	r2, r1, r4, asr #25
   1289c:	andeq	r2, r1, r4, asr #25
   128a0:	andeq	r2, r1, r4, asr #25
   128a4:	andeq	r2, r1, r4, asr #25
   128a8:	andeq	r2, r1, r4, asr #25
   128ac:	andeq	r2, r1, r4, asr #25
   128b0:	andeq	r2, r1, r4, asr #25
   128b4:	andeq	r2, r1, r4, asr #25
   128b8:	andeq	r2, r1, r4, asr #25
   128bc:	andeq	r2, r1, r4, asr #25
   128c0:	andeq	r2, r1, r4, asr #25
   128c4:	andeq	r2, r1, r4, asr #25
   128c8:	andeq	r2, r1, r4, asr #25
   128cc:	andeq	r2, r1, r4, asr #25
   128d0:	andeq	r2, r1, r4, asr #25
   128d4:	andeq	r2, r1, r4, asr #25
   128d8:	andeq	r2, r1, r4, asr #25
   128dc:	andeq	r2, r1, r4, asr #25
   128e0:	andeq	r2, r1, r4, asr #25
   128e4:	andeq	r2, r1, r4, asr #25
   128e8:	andeq	r2, r1, r4, asr #25
   128ec:	andeq	r2, r1, r4, asr #25
   128f0:	ldrdeq	r2, [r1], -r4
   128f4:	ldrdeq	r2, [r1], -r8
   128f8:	ldrdeq	r2, [r1], -r4
   128fc:			; <UNDEFINED> instruction: 0x00012eb8
   12900:	mov	r3, #1
   12904:	str	r3, [sp, #40]	; 0x28
   12908:	str	r3, [sp, #68]	; 0x44
   1290c:	mov	r8, #0
   12910:	ldr	r3, [pc, #4056]	; 138f0 <__assert_fail@plt+0x2a68>
   12914:	str	r3, [sp, #72]	; 0x48
   12918:	mov	r3, #2
   1291c:	str	r3, [sp, #176]	; 0xb0
   12920:	ldr	r1, [sp, #56]	; 0x38
   12924:	mov	r2, r3
   12928:	ldr	ip, [sp, #40]	; 0x28
   1292c:	mov	lr, r3
   12930:	b	125fc <__assert_fail@plt+0x1774>
   12934:	mov	r3, #1
   12938:	str	r3, [sp, #56]	; 0x38
   1293c:	str	r3, [sp, #68]	; 0x44
   12940:	str	r3, [sp, #40]	; 0x28
   12944:	ldr	r3, [pc, #4004]	; 138f0 <__assert_fail@plt+0x2a68>
   12948:	mov	r8, #0
   1294c:	str	r3, [sp, #72]	; 0x48
   12950:	b	12918 <__assert_fail@plt+0x1a90>
   12954:	mov	r3, #1
   12958:	str	r3, [sp, #56]	; 0x38
   1295c:	str	r3, [sp, #68]	; 0x44
   12960:	str	r3, [sp, #40]	; 0x28
   12964:	ldr	r3, [pc, #3976]	; 138f4 <__assert_fail@plt+0x2a6c>
   12968:	mov	r8, #0
   1296c:	str	r3, [sp, #72]	; 0x48
   12970:	mov	r3, #5
   12974:	b	1291c <__assert_fail@plt+0x1a94>
   12978:	mov	r3, #0
   1297c:	str	r3, [sp, #40]	; 0x28
   12980:	mov	r3, #1
   12984:	str	r3, [sp, #56]	; 0x38
   12988:	mov	r8, #0
   1298c:	mov	r1, r3
   12990:	ldr	r2, [sp, #176]	; 0xb0
   12994:	ldr	ip, [sp, #40]	; 0x28
   12998:	ldr	lr, [sp, #176]	; 0xb0
   1299c:	b	125fc <__assert_fail@plt+0x1774>
   129a0:	ldr	r3, [sp, #176]	; 0xb0
   129a4:	cmp	r3, #10
   129a8:	beq	129ec <__assert_fail@plt+0x1b64>
   129ac:	mov	r2, #5
   129b0:	ldr	r1, [pc, #3904]	; 138f8 <__assert_fail@plt+0x2a70>
   129b4:	mov	r0, #0
   129b8:	bl	10ccc <dcgettext@plt>
   129bc:	ldr	r2, [pc, #3892]	; 138f8 <__assert_fail@plt+0x2a70>
   129c0:	cmp	r0, r2
   129c4:	str	r0, [sp, #188]	; 0xbc
   129c8:	beq	13a84 <__assert_fail@plt+0x2bfc>
   129cc:	mov	r2, #5
   129d0:	ldr	r1, [pc, #3864]	; 138f0 <__assert_fail@plt+0x2a68>
   129d4:	mov	r0, #0
   129d8:	bl	10ccc <dcgettext@plt>
   129dc:	ldr	r2, [pc, #3852]	; 138f0 <__assert_fail@plt+0x2a68>
   129e0:	cmp	r0, r2
   129e4:	str	r0, [sp, #192]	; 0xc0
   129e8:	beq	13a74 <__assert_fail@plt+0x2bec>
   129ec:	ldr	r8, [sp, #40]	; 0x28
   129f0:	cmp	r8, #0
   129f4:	movne	r8, #0
   129f8:	bne	12a28 <__assert_fail@plt+0x1ba0>
   129fc:	ldr	r3, [sp, #188]	; 0xbc
   12a00:	ldrb	r3, [r3]
   12a04:	cmp	r3, #0
   12a08:	beq	12a28 <__assert_fail@plt+0x1ba0>
   12a0c:	ldr	r2, [sp, #188]	; 0xbc
   12a10:	cmp	fp, r8
   12a14:	strbhi	r3, [r9, r8]
   12a18:	ldrb	r3, [r2, #1]!
   12a1c:	add	r8, r8, #1
   12a20:	cmp	r3, #0
   12a24:	bne	12a10 <__assert_fail@plt+0x1b88>
   12a28:	ldr	r0, [sp, #192]	; 0xc0
   12a2c:	bl	10d98 <strlen@plt>
   12a30:	ldr	r3, [sp, #192]	; 0xc0
   12a34:	ldr	r2, [sp, #176]	; 0xb0
   12a38:	str	r3, [sp, #72]	; 0x48
   12a3c:	mov	r3, #1
   12a40:	str	r3, [sp, #56]	; 0x38
   12a44:	mov	r1, r3
   12a48:	ldr	ip, [sp, #40]	; 0x28
   12a4c:	ldr	lr, [sp, #176]	; 0xb0
   12a50:	str	r0, [sp, #68]	; 0x44
   12a54:	b	125fc <__assert_fail@plt+0x1774>
   12a58:	ldr	r3, [sp, #40]	; 0x28
   12a5c:	cmp	r3, #0
   12a60:	beq	13708 <__assert_fail@plt+0x2880>
   12a64:	mov	r3, #1
   12a68:	str	r3, [sp, #68]	; 0x44
   12a6c:	ldr	r3, [pc, #3708]	; 138f0 <__assert_fail@plt+0x2a68>
   12a70:	str	r3, [sp, #72]	; 0x48
   12a74:	mov	r8, #0
   12a78:	ldr	r1, [sp, #56]	; 0x38
   12a7c:	ldr	r2, [sp, #176]	; 0xb0
   12a80:	ldr	ip, [sp, #40]	; 0x28
   12a84:	ldr	lr, [sp, #176]	; 0xb0
   12a88:	b	125fc <__assert_fail@plt+0x1774>
   12a8c:	ldr	r3, [sp, #40]	; 0x28
   12a90:	cmp	r3, #0
   12a94:	beq	1378c <__assert_fail@plt+0x2904>
   12a98:	str	r3, [sp, #56]	; 0x38
   12a9c:	mov	r3, #1
   12aa0:	str	r3, [sp, #68]	; 0x44
   12aa4:	ldr	r3, [pc, #3656]	; 138f4 <__assert_fail@plt+0x2a6c>
   12aa8:	b	12a70 <__assert_fail@plt+0x1be8>
   12aac:	ldr	r3, [sp, #40]	; 0x28
   12ab0:	cmp	r3, #0
   12ab4:	mov	r3, #1
   12ab8:	streq	r3, [sp, #56]	; 0x38
   12abc:	beq	13708 <__assert_fail@plt+0x2880>
   12ac0:	str	r3, [sp, #68]	; 0x44
   12ac4:	ldr	r3, [pc, #3620]	; 138f0 <__assert_fail@plt+0x2a68>
   12ac8:	mov	r8, #0
   12acc:	str	r3, [sp, #72]	; 0x48
   12ad0:	b	12918 <__assert_fail@plt+0x1a90>
   12ad4:	ldr	r3, [sp, #24]
   12ad8:	ldr	r6, [sp, #48]	; 0x30
   12adc:	cmn	r3, #1
   12ae0:	beq	1313c <__assert_fail@plt+0x22b4>
   12ae4:	subs	r3, r3, #1
   12ae8:	movne	r3, #1
   12aec:	cmp	r3, #0
   12af0:	beq	12ebc <__assert_fail@plt+0x2034>
   12af4:	ldr	r1, [sp, #52]	; 0x34
   12af8:	mov	r7, r3
   12afc:	mov	r3, #0
   12b00:	str	r3, [sp, #32]
   12b04:	ldr	r3, [sp, #60]	; 0x3c
   12b08:	orr	r2, r1, r3
   12b0c:	ldr	r3, [sp, #40]	; 0x28
   12b10:	eor	r2, r2, #1
   12b14:	orr	r2, r3, r2
   12b18:	tst	r2, #255	; 0xff
   12b1c:	bne	13440 <__assert_fail@plt+0x25b8>
   12b20:	cmp	r6, #0
   12b24:	bne	12d00 <__assert_fail@plt+0x1e78>
   12b28:	ldr	r3, [sp, #36]	; 0x24
   12b2c:	add	sl, sl, #1
   12b30:	and	r3, r3, r7
   12b34:	uxtb	r6, r3
   12b38:	cmp	r6, #0
   12b3c:	beq	12b68 <__assert_fail@plt+0x1ce0>
   12b40:	cmp	fp, r8
   12b44:	movhi	r3, #39	; 0x27
   12b48:	strbhi	r3, [r9, r8]
   12b4c:	add	r3, r8, #1
   12b50:	cmp	fp, r3
   12b54:	movhi	r2, #39	; 0x27
   12b58:	add	r8, r8, #2
   12b5c:	strbhi	r2, [r9, r3]
   12b60:	mov	r3, #0
   12b64:	str	r3, [sp, #36]	; 0x24
   12b68:	ldr	r2, [sp, #32]
   12b6c:	cmp	r8, fp
   12b70:	ldr	r3, [sp, #28]
   12b74:	strbcc	r4, [r9, r8]
   12b78:	cmp	r2, #0
   12b7c:	moveq	r3, #0
   12b80:	str	r3, [sp, #28]
   12b84:	ldr	r3, [sp, #24]
   12b88:	add	r8, r8, #1
   12b8c:	cmn	r3, #1
   12b90:	bne	12668 <__assert_fail@plt+0x17e0>
   12b94:	ldr	r3, [sp, #44]	; 0x2c
   12b98:	ldrb	r3, [r3, sl]
   12b9c:	adds	r7, r3, #0
   12ba0:	movne	r7, #1
   12ba4:	cmp	r7, #0
   12ba8:	bne	12678 <__assert_fail@plt+0x17f0>
   12bac:	ldr	r3, [sp, #64]	; 0x40
   12bb0:	cmp	r8, #0
   12bb4:	movne	r3, #0
   12bb8:	andeq	r3, r3, #1
   12bbc:	cmp	r3, #0
   12bc0:	str	r3, [sp, #64]	; 0x40
   12bc4:	bne	13668 <__assert_fail@plt+0x27e0>
   12bc8:	ldr	r3, [sp, #40]	; 0x28
   12bcc:	ldr	r2, [sp, #52]	; 0x34
   12bd0:	eor	r3, r3, #1
   12bd4:	ands	r2, r2, r3
   12bd8:	beq	13a94 <__assert_fail@plt+0x2c0c>
   12bdc:	ldr	r3, [sp, #76]	; 0x4c
   12be0:	cmp	r3, #0
   12be4:	beq	13a64 <__assert_fail@plt+0x2bdc>
   12be8:	ldr	r3, [sp, #28]
   12bec:	cmp	r3, #0
   12bf0:	bne	13a20 <__assert_fail@plt+0x2b98>
   12bf4:	ldr	r2, [sp, #84]	; 0x54
   12bf8:	clz	r3, fp
   12bfc:	cmp	r2, #0
   12c00:	lsr	r3, r3, #5
   12c04:	moveq	r3, #0
   12c08:	cmp	r3, #0
   12c0c:	beq	139c0 <__assert_fail@plt+0x2b38>
   12c10:	mov	fp, r2
   12c14:	str	r3, [sp, #76]	; 0x4c
   12c18:	b	125a4 <__assert_fail@plt+0x171c>
   12c1c:	ldr	r3, [sp, #176]	; 0xb0
   12c20:	ldr	r6, [sp, #48]	; 0x30
   12c24:	cmp	r3, #2
   12c28:	beq	13160 <__assert_fail@plt+0x22d8>
   12c2c:	ldr	r3, [sp, #88]	; 0x58
   12c30:	cmp	r3, #0
   12c34:	beq	136e4 <__assert_fail@plt+0x285c>
   12c38:	mov	r3, #0
   12c3c:	add	sl, sl, #1
   12c40:	ldr	r6, [sp, #36]	; 0x24
   12c44:	str	r3, [sp, #32]
   12c48:	mov	r4, #92	; 0x5c
   12c4c:	b	12b38 <__assert_fail@plt+0x1cb0>
   12c50:	ldr	r3, [sp, #176]	; 0xb0
   12c54:	ldr	r6, [sp, #48]	; 0x30
   12c58:	cmp	r3, #2
   12c5c:	beq	13190 <__assert_fail@plt+0x2308>
   12c60:	cmp	r3, #5
   12c64:	bne	136f4 <__assert_fail@plt+0x286c>
   12c68:	ldr	r3, [sp, #100]	; 0x64
   12c6c:	cmp	r3, #0
   12c70:	beq	13758 <__assert_fail@plt+0x28d0>
   12c74:	ldr	r2, [sp, #24]
   12c78:	add	r3, sl, #2
   12c7c:	cmp	r2, r3
   12c80:	bls	12c90 <__assert_fail@plt+0x1e08>
   12c84:	ldrb	r4, [r5, #1]
   12c88:	cmp	r4, #63	; 0x3f
   12c8c:	beq	13900 <__assert_fail@plt+0x2a78>
   12c90:	mov	r1, #0
   12c94:	str	r1, [sp, #32]
   12c98:	mov	r4, #63	; 0x3f
   12c9c:	b	12b04 <__assert_fail@plt+0x1c7c>
   12ca0:	ldr	r3, [sp, #176]	; 0xb0
   12ca4:	ldr	r6, [sp, #48]	; 0x30
   12ca8:	cmp	r3, #2
   12cac:	beq	131bc <__assert_fail@plt+0x2334>
   12cb0:	str	r7, [sp, #32]
   12cb4:	str	r7, [sp, #76]	; 0x4c
   12cb8:	mov	r1, #0
   12cbc:	mov	r4, #39	; 0x27
   12cc0:	b	12b04 <__assert_fail@plt+0x1c7c>
   12cc4:	ldr	r6, [sp, #48]	; 0x30
   12cc8:	ldr	r1, [sp, #52]	; 0x34
   12ccc:	str	r7, [sp, #32]
   12cd0:	b	12b04 <__assert_fail@plt+0x1c7c>
   12cd4:	ldr	r6, [sp, #48]	; 0x30
   12cd8:	ldr	r1, [sp, #52]	; 0x34
   12cdc:	mov	r4, #12
   12ce0:	mov	r3, #102	; 0x66
   12ce4:	ldr	r2, [sp, #56]	; 0x38
   12ce8:	cmp	r2, #0
   12cec:	streq	r2, [sp, #32]
   12cf0:	beq	12b04 <__assert_fail@plt+0x1c7c>
   12cf4:	mov	r4, r3
   12cf8:	mov	r3, #0
   12cfc:	str	r3, [sp, #32]
   12d00:	ldr	r3, [sp, #40]	; 0x28
   12d04:	cmp	r3, #0
   12d08:	bne	13478 <__assert_fail@plt+0x25f0>
   12d0c:	ldr	r3, [sp, #36]	; 0x24
   12d10:	eor	r3, r3, #1
   12d14:	and	r3, r3, r1
   12d18:	ands	r3, r3, #255	; 0xff
   12d1c:	beq	12d54 <__assert_fail@plt+0x1ecc>
   12d20:	cmp	fp, r8
   12d24:	movhi	r2, #39	; 0x27
   12d28:	strbhi	r2, [r9, r8]
   12d2c:	add	r2, r8, #1
   12d30:	cmp	fp, r2
   12d34:	movhi	r1, #36	; 0x24
   12d38:	strbhi	r1, [r9, r2]
   12d3c:	add	r2, r8, #2
   12d40:	cmp	fp, r2
   12d44:	add	r8, r8, #3
   12d48:	movhi	r1, #39	; 0x27
   12d4c:	strbhi	r1, [r9, r2]
   12d50:	str	r3, [sp, #36]	; 0x24
   12d54:	cmp	fp, r8
   12d58:	movhi	r3, #92	; 0x5c
   12d5c:	strbhi	r3, [r9, r8]
   12d60:	add	sl, sl, #1
   12d64:	add	r8, r8, #1
   12d68:	b	12b68 <__assert_fail@plt+0x1ce0>
   12d6c:	ldr	r6, [sp, #48]	; 0x30
   12d70:	mov	r4, #10
   12d74:	mov	r3, #110	; 0x6e
   12d78:	ldr	r2, [sp, #64]	; 0x40
   12d7c:	cmp	r2, #0
   12d80:	bne	13800 <__assert_fail@plt+0x2978>
   12d84:	ldr	r1, [sp, #52]	; 0x34
   12d88:	b	12ce4 <__assert_fail@plt+0x1e5c>
   12d8c:	ldr	r6, [sp, #48]	; 0x30
   12d90:	ldr	r1, [sp, #52]	; 0x34
   12d94:	mov	r3, #116	; 0x74
   12d98:	b	12ce4 <__assert_fail@plt+0x1e5c>
   12d9c:	ldr	r6, [sp, #48]	; 0x30
   12da0:	ldr	r1, [sp, #52]	; 0x34
   12da4:	mov	r4, #11
   12da8:	mov	r3, #118	; 0x76
   12dac:	b	12ce4 <__assert_fail@plt+0x1e5c>
   12db0:	ldr	r6, [sp, #48]	; 0x30
   12db4:	ldr	r1, [sp, #52]	; 0x34
   12db8:	mov	r4, #8
   12dbc:	mov	r3, #98	; 0x62
   12dc0:	b	12ce4 <__assert_fail@plt+0x1e5c>
   12dc4:	ldr	r6, [sp, #48]	; 0x30
   12dc8:	ldr	r1, [sp, #52]	; 0x34
   12dcc:	mov	r4, #7
   12dd0:	mov	r3, #97	; 0x61
   12dd4:	b	12ce4 <__assert_fail@plt+0x1e5c>
   12dd8:	ldr	r3, [sp, #56]	; 0x38
   12ddc:	ldr	r6, [sp, #48]	; 0x30
   12de0:	cmp	r3, #0
   12de4:	beq	132a8 <__assert_fail@plt+0x2420>
   12de8:	ldr	r3, [sp, #40]	; 0x28
   12dec:	cmp	r3, #0
   12df0:	bne	138dc <__assert_fail@plt+0x2a54>
   12df4:	ldr	r3, [sp, #36]	; 0x24
   12df8:	ldr	r2, [sp, #52]	; 0x34
   12dfc:	eor	r3, r3, #1
   12e00:	ands	r3, r2, r3
   12e04:	moveq	r2, r8
   12e08:	beq	12e40 <__assert_fail@plt+0x1fb8>
   12e0c:	cmp	fp, r8
   12e10:	movhi	r2, #39	; 0x27
   12e14:	strbhi	r2, [r9, r8]
   12e18:	add	r2, r8, #1
   12e1c:	cmp	fp, r2
   12e20:	movhi	r1, #36	; 0x24
   12e24:	strbhi	r1, [r9, r2]
   12e28:	add	r2, r8, #2
   12e2c:	cmp	fp, r2
   12e30:	movhi	r1, #39	; 0x27
   12e34:	strbhi	r1, [r9, r2]
   12e38:	add	r2, r8, #3
   12e3c:	str	r3, [sp, #36]	; 0x24
   12e40:	cmp	fp, r2
   12e44:	movhi	r3, #92	; 0x5c
   12e48:	strbhi	r3, [r9, r2]
   12e4c:	ldr	r3, [sp, #92]	; 0x5c
   12e50:	add	r8, r2, #1
   12e54:	cmp	r3, #0
   12e58:	beq	137dc <__assert_fail@plt+0x2954>
   12e5c:	ldr	r1, [sp, #24]
   12e60:	add	r3, sl, #1
   12e64:	cmp	r1, r3
   12e68:	bls	12ea0 <__assert_fail@plt+0x2018>
   12e6c:	ldr	r1, [sp, #44]	; 0x2c
   12e70:	ldrb	r3, [r1, r3]
   12e74:	sub	r3, r3, #48	; 0x30
   12e78:	cmp	r3, #9
   12e7c:	bhi	12ea0 <__assert_fail@plt+0x2018>
   12e80:	cmp	fp, r8
   12e84:	movhi	r3, #48	; 0x30
   12e88:	strbhi	r3, [r9, r8]
   12e8c:	add	r3, r2, #2
   12e90:	cmp	fp, r3
   12e94:	add	r8, r2, #3
   12e98:	movhi	r1, #48	; 0x30
   12e9c:	strbhi	r1, [r9, r3]
   12ea0:	ldr	r3, [sp, #40]	; 0x28
   12ea4:	ldr	r1, [sp, #52]	; 0x34
   12ea8:	mov	r7, r3
   12eac:	str	r3, [sp, #32]
   12eb0:	mov	r4, #48	; 0x30
   12eb4:	b	12b04 <__assert_fail@plt+0x1c7c>
   12eb8:	ldr	r6, [sp, #48]	; 0x30
   12ebc:	cmp	sl, #0
   12ec0:	streq	r7, [sp, #32]
   12ec4:	beq	12ee4 <__assert_fail@plt+0x205c>
   12ec8:	mov	r3, #0
   12ecc:	ldr	r1, [sp, #52]	; 0x34
   12ed0:	str	r3, [sp, #32]
   12ed4:	b	12b04 <__assert_fail@plt+0x1c7c>
   12ed8:	ldr	r6, [sp, #48]	; 0x30
   12edc:	mov	r3, #0
   12ee0:	str	r3, [sp, #32]
   12ee4:	ldr	r3, [sp, #64]	; 0x40
   12ee8:	cmp	r3, #0
   12eec:	bne	13668 <__assert_fail@plt+0x27e0>
   12ef0:	ldr	r1, [sp, #52]	; 0x34
   12ef4:	b	12b04 <__assert_fail@plt+0x1c7c>
   12ef8:	ldr	r3, [sp, #48]	; 0x30
   12efc:	mov	r6, r3
   12f00:	str	r3, [sp, #32]
   12f04:	b	12ee4 <__assert_fail@plt+0x205c>
   12f08:	ldr	r6, [sp, #48]	; 0x30
   12f0c:	mov	r4, #13
   12f10:	mov	r3, #114	; 0x72
   12f14:	b	12d78 <__assert_fail@plt+0x1ef0>
   12f18:	ldr	r3, [sp, #44]	; 0x2c
   12f1c:	add	r5, r3, sl
   12f20:	ldrb	r4, [r5]
   12f24:	cmp	r4, #126	; 0x7e
   12f28:	ldrls	pc, [pc, r4, lsl #2]
   12f2c:	b	132c8 <__assert_fail@plt+0x2440>
   12f30:	muleq	r1, r8, r2
   12f34:	andeq	r3, r1, r8, asr #5
   12f38:	andeq	r3, r1, r8, asr #5
   12f3c:	andeq	r3, r1, r8, asr #5
   12f40:	andeq	r3, r1, r8, asr #5
   12f44:	andeq	r3, r1, r8, asr #5
   12f48:	andeq	r3, r1, r8, asr #5
   12f4c:	muleq	r1, r0, r2
   12f50:	andeq	r3, r1, r8, lsl #5
   12f54:	andeq	r3, r1, ip, ror r2
   12f58:	andeq	r3, r1, r4, ror r2
   12f5c:	andeq	r3, r1, ip, ror #4
   12f60:	andeq	r3, r1, r4, ror #4
   12f64:	andeq	r3, r1, ip, asr r2
   12f68:	andeq	r3, r1, r8, asr #5
   12f6c:	andeq	r3, r1, r8, asr #5
   12f70:	andeq	r3, r1, r8, asr #5
   12f74:	andeq	r3, r1, r8, asr #5
   12f78:	andeq	r3, r1, r8, asr #5
   12f7c:	andeq	r3, r1, r8, asr #5
   12f80:	andeq	r3, r1, r8, asr #5
   12f84:	andeq	r3, r1, r8, asr #5
   12f88:	andeq	r3, r1, r8, asr #5
   12f8c:	andeq	r3, r1, r8, asr #5
   12f90:	andeq	r3, r1, r8, asr #5
   12f94:	andeq	r3, r1, r8, asr #5
   12f98:	andeq	r3, r1, r8, asr #5
   12f9c:	andeq	r3, r1, r8, asr #5
   12fa0:	andeq	r3, r1, r8, asr #5
   12fa4:	andeq	r3, r1, r8, asr #5
   12fa8:	andeq	r3, r1, r8, asr #5
   12fac:	andeq	r3, r1, r8, asr #5
   12fb0:	andeq	r3, r1, r0, asr r2
   12fb4:	andeq	r3, r1, r8, asr #4
   12fb8:	andeq	r3, r1, r8, asr #4
   12fbc:	andeq	r3, r1, r0, asr #4
   12fc0:	andeq	r3, r1, r8, asr #4
   12fc4:	andeq	r3, r1, r8, lsr r2
   12fc8:	andeq	r3, r1, r8, asr #4
   12fcc:	andeq	r3, r1, ip, lsr #3
   12fd0:	andeq	r3, r1, r8, asr #4
   12fd4:	andeq	r3, r1, r8, asr #4
   12fd8:	andeq	r3, r1, r8, asr #4
   12fdc:	andeq	r3, r1, r8, lsr r2
   12fe0:	andeq	r3, r1, r8, lsr r2
   12fe4:	andeq	r3, r1, r8, lsr r2
   12fe8:	andeq	r3, r1, r8, lsr r2
   12fec:	andeq	r3, r1, r8, lsr r2
   12ff0:	andeq	r3, r1, r8, lsr r2
   12ff4:	andeq	r3, r1, r8, lsr r2
   12ff8:	andeq	r3, r1, r8, lsr r2
   12ffc:	andeq	r3, r1, r8, lsr r2
   13000:	andeq	r3, r1, r8, lsr r2
   13004:	andeq	r3, r1, r8, lsr r2
   13008:	andeq	r3, r1, r8, lsr r2
   1300c:	andeq	r3, r1, r8, lsr r2
   13010:	andeq	r3, r1, r8, lsr r2
   13014:	andeq	r3, r1, r8, lsr r2
   13018:	andeq	r3, r1, r8, lsr r2
   1301c:	andeq	r3, r1, r8, asr #4
   13020:	andeq	r3, r1, r8, asr #4
   13024:	andeq	r3, r1, r8, asr #4
   13028:	andeq	r3, r1, r8, asr #4
   1302c:	andeq	r3, r1, r0, lsl #3
   13030:	andeq	r3, r1, r8, asr #5
   13034:	andeq	r3, r1, r8, lsr r2
   13038:	andeq	r3, r1, r8, lsr r2
   1303c:	andeq	r3, r1, r8, lsr r2
   13040:	andeq	r3, r1, r8, lsr r2
   13044:	andeq	r3, r1, r8, lsr r2
   13048:	andeq	r3, r1, r8, lsr r2
   1304c:	andeq	r3, r1, r8, lsr r2
   13050:	andeq	r3, r1, r8, lsr r2
   13054:	andeq	r3, r1, r8, lsr r2
   13058:	andeq	r3, r1, r8, lsr r2
   1305c:	andeq	r3, r1, r8, lsr r2
   13060:	andeq	r3, r1, r8, lsr r2
   13064:	andeq	r3, r1, r8, lsr r2
   13068:	andeq	r3, r1, r8, lsr r2
   1306c:	andeq	r3, r1, r8, lsr r2
   13070:	andeq	r3, r1, r8, lsr r2
   13074:	andeq	r3, r1, r8, lsr r2
   13078:	andeq	r3, r1, r8, lsr r2
   1307c:	andeq	r3, r1, r8, lsr r2
   13080:	andeq	r3, r1, r8, lsr r2
   13084:	andeq	r3, r1, r8, lsr r2
   13088:	andeq	r3, r1, r8, lsr r2
   1308c:	andeq	r3, r1, r8, lsr r2
   13090:	andeq	r3, r1, r8, lsr r2
   13094:	andeq	r3, r1, r8, lsr r2
   13098:	andeq	r3, r1, r8, lsr r2
   1309c:	andeq	r3, r1, r8, asr #4
   130a0:	andeq	r3, r1, r0, asr r1
   130a4:	andeq	r3, r1, r8, lsr r2
   130a8:	andeq	r3, r1, r8, asr #4
   130ac:	andeq	r3, r1, r8, lsr r2
   130b0:	andeq	r3, r1, r8, asr #4
   130b4:	andeq	r3, r1, r8, lsr r2
   130b8:	andeq	r3, r1, r8, lsr r2
   130bc:	andeq	r3, r1, r8, lsr r2
   130c0:	andeq	r3, r1, r8, lsr r2
   130c4:	andeq	r3, r1, r8, lsr r2
   130c8:	andeq	r3, r1, r8, lsr r2
   130cc:	andeq	r3, r1, r8, lsr r2
   130d0:	andeq	r3, r1, r8, lsr r2
   130d4:	andeq	r3, r1, r8, lsr r2
   130d8:	andeq	r3, r1, r8, lsr r2
   130dc:	andeq	r3, r1, r8, lsr r2
   130e0:	andeq	r3, r1, r8, lsr r2
   130e4:	andeq	r3, r1, r8, lsr r2
   130e8:	andeq	r3, r1, r8, lsr r2
   130ec:	andeq	r3, r1, r8, lsr r2
   130f0:	andeq	r3, r1, r8, lsr r2
   130f4:	andeq	r3, r1, r8, lsr r2
   130f8:	andeq	r3, r1, r8, lsr r2
   130fc:	andeq	r3, r1, r8, lsr r2
   13100:	andeq	r3, r1, r8, lsr r2
   13104:	andeq	r3, r1, r8, lsr r2
   13108:	andeq	r3, r1, r8, lsr r2
   1310c:	andeq	r3, r1, r8, lsr r2
   13110:	andeq	r3, r1, r8, lsr r2
   13114:	andeq	r3, r1, r8, lsr r2
   13118:	andeq	r3, r1, r8, lsr r2
   1311c:	andeq	r3, r1, ip, lsr #2
   13120:	andeq	r3, r1, r8, asr #4
   13124:	andeq	r3, r1, ip, lsr #2
   13128:	andeq	r3, r1, r0, asr #4
   1312c:	ldr	r3, [sp, #24]
   13130:	mov	r6, #0
   13134:	cmn	r3, #1
   13138:	bne	12ae4 <__assert_fail@plt+0x1c5c>
   1313c:	ldr	r3, [sp, #44]	; 0x2c
   13140:	ldrb	r3, [r3, #1]
   13144:	adds	r3, r3, #0
   13148:	movne	r3, #1
   1314c:	b	12aec <__assert_fail@plt+0x1c64>
   13150:	ldr	r3, [sp, #176]	; 0xb0
   13154:	mov	r6, #0
   13158:	cmp	r3, #2
   1315c:	bne	12c2c <__assert_fail@plt+0x1da4>
   13160:	ldr	r3, [sp, #64]	; 0x40
   13164:	cmp	r3, #0
   13168:	bne	139a0 <__assert_fail@plt+0x2b18>
   1316c:	add	sl, sl, #1
   13170:	ldr	r6, [sp, #36]	; 0x24
   13174:	str	r3, [sp, #32]
   13178:	mov	r4, #92	; 0x5c
   1317c:	b	12b38 <__assert_fail@plt+0x1cb0>
   13180:	ldr	r3, [sp, #176]	; 0xb0
   13184:	mov	r6, #0
   13188:	cmp	r3, #2
   1318c:	bne	12c60 <__assert_fail@plt+0x1dd8>
   13190:	ldr	r3, [sp, #40]	; 0x28
   13194:	cmp	r3, #0
   13198:	bne	1347c <__assert_fail@plt+0x25f4>
   1319c:	mov	r1, r7
   131a0:	str	r3, [sp, #32]
   131a4:	mov	r4, #63	; 0x3f
   131a8:	b	12b04 <__assert_fail@plt+0x1c7c>
   131ac:	ldr	r3, [sp, #176]	; 0xb0
   131b0:	mov	r6, #0
   131b4:	cmp	r3, #2
   131b8:	bne	12cb0 <__assert_fail@plt+0x1e28>
   131bc:	ldr	r3, [sp, #64]	; 0x40
   131c0:	cmp	r3, #0
   131c4:	bne	139a0 <__assert_fail@plt+0x2b18>
   131c8:	ldr	r2, [sp, #84]	; 0x54
   131cc:	adds	r3, fp, #0
   131d0:	movne	r3, #1
   131d4:	cmp	r2, #0
   131d8:	movne	r3, #0
   131dc:	cmp	r3, #0
   131e0:	strne	fp, [sp, #84]	; 0x54
   131e4:	movne	fp, #0
   131e8:	bne	13218 <__assert_fail@plt+0x2390>
   131ec:	cmp	fp, r8
   131f0:	movhi	r3, #39	; 0x27
   131f4:	strbhi	r3, [r9, r8]
   131f8:	add	r3, r8, #1
   131fc:	cmp	fp, r3
   13200:	movhi	r2, #92	; 0x5c
   13204:	strbhi	r2, [r9, r3]
   13208:	add	r3, r8, #2
   1320c:	cmp	fp, r3
   13210:	movhi	r2, #39	; 0x27
   13214:	strbhi	r2, [r9, r3]
   13218:	ldr	r3, [sp, #64]	; 0x40
   1321c:	add	r8, r8, #3
   13220:	mov	r1, r7
   13224:	str	r7, [sp, #32]
   13228:	str	r7, [sp, #76]	; 0x4c
   1322c:	str	r3, [sp, #36]	; 0x24
   13230:	mov	r4, #39	; 0x27
   13234:	b	12b04 <__assert_fail@plt+0x1c7c>
   13238:	mov	r6, #0
   1323c:	b	12cc8 <__assert_fail@plt+0x1e40>
   13240:	mov	r6, #0
   13244:	b	12ebc <__assert_fail@plt+0x2034>
   13248:	mov	r6, #0
   1324c:	b	12edc <__assert_fail@plt+0x2054>
   13250:	str	r7, [sp, #32]
   13254:	mov	r6, #0
   13258:	b	12ee4 <__assert_fail@plt+0x205c>
   1325c:	mov	r6, #0
   13260:	b	12f0c <__assert_fail@plt+0x2084>
   13264:	mov	r6, #0
   13268:	b	12cd8 <__assert_fail@plt+0x1e50>
   1326c:	mov	r6, #0
   13270:	b	12da0 <__assert_fail@plt+0x1f18>
   13274:	mov	r6, #0
   13278:	b	12d70 <__assert_fail@plt+0x1ee8>
   1327c:	mov	r6, #0
   13280:	mov	r3, #116	; 0x74
   13284:	b	12d78 <__assert_fail@plt+0x1ef0>
   13288:	mov	r6, #0
   1328c:	b	12db4 <__assert_fail@plt+0x1f2c>
   13290:	mov	r6, #0
   13294:	b	12dc8 <__assert_fail@plt+0x1f40>
   13298:	ldr	r3, [sp, #56]	; 0x38
   1329c:	mov	r6, #0
   132a0:	cmp	r3, #0
   132a4:	bne	12de8 <__assert_fail@plt+0x1f60>
   132a8:	ldr	r3, [sp, #96]	; 0x60
   132ac:	cmp	r3, #0
   132b0:	addne	sl, sl, #1
   132b4:	bne	1265c <__assert_fail@plt+0x17d4>
   132b8:	ldr	r1, [sp, #52]	; 0x34
   132bc:	str	r3, [sp, #32]
   132c0:	mov	r4, r3
   132c4:	b	12b04 <__assert_fail@plt+0x1c7c>
   132c8:	mov	r6, #0
   132cc:	ldr	r3, [sp, #80]	; 0x50
   132d0:	cmp	r3, #1
   132d4:	bne	134c4 <__assert_fail@plt+0x263c>
   132d8:	bl	10d80 <__ctype_b_loc@plt>
   132dc:	ldr	r2, [sp, #80]	; 0x50
   132e0:	sxth	r3, r4
   132e4:	mov	r1, r2
   132e8:	lsl	r3, r3, #1
   132ec:	ldr	r2, [r0]
   132f0:	ldrh	r3, [r2, r3]
   132f4:	and	r3, r3, #16384	; 0x4000
   132f8:	cmp	r3, #0
   132fc:	movne	r3, #1
   13300:	moveq	r3, #0
   13304:	str	r3, [sp, #32]
   13308:	moveq	r3, #1
   1330c:	movne	r3, #0
   13310:	ldr	r2, [sp, #56]	; 0x38
   13314:	and	r3, r3, r2
   13318:	ands	r3, r3, #255	; 0xff
   1331c:	beq	12ef0 <__assert_fail@plt+0x2068>
   13320:	add	r1, sl, r1
   13324:	mov	r0, #0
   13328:	ldr	r7, [sp, #40]	; 0x28
   1332c:	ldr	r2, [sp, #36]	; 0x24
   13330:	ldr	lr, [sp, #52]	; 0x34
   13334:	b	133e4 <__assert_fail@plt+0x255c>
   13338:	cmp	r7, #0
   1333c:	bne	13738 <__assert_fail@plt+0x28b0>
   13340:	eor	r0, r2, #1
   13344:	ands	r0, lr, r0
   13348:	beq	13380 <__assert_fail@plt+0x24f8>
   1334c:	cmp	fp, r8
   13350:	movhi	r2, #39	; 0x27
   13354:	strbhi	r2, [r9, r8]
   13358:	add	r2, r8, #1
   1335c:	cmp	fp, r2
   13360:	movhi	ip, #36	; 0x24
   13364:	strbhi	ip, [r9, r2]
   13368:	add	r2, r8, #2
   1336c:	cmp	fp, r2
   13370:	movhi	ip, #39	; 0x27
   13374:	strbhi	ip, [r9, r2]
   13378:	add	r8, r8, #3
   1337c:	mov	r2, r0
   13380:	cmp	fp, r8
   13384:	movhi	r0, #92	; 0x5c
   13388:	strbhi	r0, [r9, r8]
   1338c:	add	r0, r8, #1
   13390:	cmp	fp, r0
   13394:	lsrhi	ip, r4, #6
   13398:	addhi	ip, ip, #48	; 0x30
   1339c:	strbhi	ip, [r9, r0]
   133a0:	add	ip, r8, #2
   133a4:	cmp	fp, ip
   133a8:	lsrhi	r0, r4, #3
   133ac:	andhi	r0, r0, #7
   133b0:	addhi	r0, r0, #48	; 0x30
   133b4:	add	sl, sl, #1
   133b8:	strbhi	r0, [r9, ip]
   133bc:	and	r4, r4, #7
   133c0:	cmp	sl, r1
   133c4:	add	r4, r4, #48	; 0x30
   133c8:	add	r8, r8, #3
   133cc:	bcs	13750 <__assert_fail@plt+0x28c8>
   133d0:	mov	r0, r3
   133d4:	cmp	fp, r8
   133d8:	strbhi	r4, [r9, r8]
   133dc:	ldrb	r4, [r5, #1]!
   133e0:	add	r8, r8, #1
   133e4:	cmp	r3, #0
   133e8:	bne	13338 <__assert_fail@plt+0x24b0>
   133ec:	cmp	r6, #0
   133f0:	bne	13494 <__assert_fail@plt+0x260c>
   133f4:	eor	r6, r0, #1
   133f8:	and	r6, r6, r2
   133fc:	add	sl, sl, #1
   13400:	cmp	r1, sl
   13404:	uxtb	r6, r6
   13408:	bls	134bc <__assert_fail@plt+0x2634>
   1340c:	cmp	r6, #0
   13410:	beq	133d4 <__assert_fail@plt+0x254c>
   13414:	cmp	fp, r8
   13418:	movhi	r2, #39	; 0x27
   1341c:	strbhi	r2, [r9, r8]
   13420:	add	r2, r8, #1
   13424:	cmp	fp, r2
   13428:	movhi	ip, #39	; 0x27
   1342c:	strbhi	ip, [r9, r2]
   13430:	add	r8, r8, #2
   13434:	mov	r6, r3
   13438:	mov	r2, r3
   1343c:	b	133d4 <__assert_fail@plt+0x254c>
   13440:	ldr	r3, [sp, #184]	; 0xb8
   13444:	cmp	r3, #0
   13448:	beq	12b20 <__assert_fail@plt+0x1c98>
   1344c:	lsr	r2, r4, #5
   13450:	mov	r0, r3
   13454:	uxtb	r2, r2
   13458:	and	r3, r4, #31
   1345c:	ldr	r2, [r0, r2, lsl #2]
   13460:	lsr	r3, r2, r3
   13464:	tst	r3, #1
   13468:	beq	12b20 <__assert_fail@plt+0x1c98>
   1346c:	ldr	r3, [sp, #40]	; 0x28
   13470:	cmp	r3, #0
   13474:	beq	12d0c <__assert_fail@plt+0x1e84>
   13478:	mov	r3, r1
   1347c:	str	r3, [sp, #64]	; 0x40
   13480:	mov	sl, r9
   13484:	ldr	r3, [sp, #56]	; 0x38
   13488:	mov	r9, fp
   1348c:	ldr	r2, [sp, #64]	; 0x40
   13490:	b	13680 <__assert_fail@plt+0x27f8>
   13494:	cmp	fp, r8
   13498:	eor	r6, r0, #1
   1349c:	movhi	ip, #92	; 0x5c
   134a0:	and	r6, r6, r2
   134a4:	add	sl, sl, #1
   134a8:	strbhi	ip, [r9, r8]
   134ac:	cmp	r1, sl
   134b0:	add	r8, r8, #1
   134b4:	uxtb	r6, r6
   134b8:	bhi	1340c <__assert_fail@plt+0x2584>
   134bc:	str	r2, [sp, #36]	; 0x24
   134c0:	b	12b38 <__assert_fail@plt+0x1cb0>
   134c4:	ldr	r3, [sp, #24]
   134c8:	cmn	r3, #1
   134cc:	mov	r3, #0
   134d0:	str	r3, [sp, #128]	; 0x80
   134d4:	str	r3, [sp, #132]	; 0x84
   134d8:	beq	137cc <__assert_fail@plt+0x2944>
   134dc:	mov	r2, r7
   134e0:	mov	r3, #0
   134e4:	str	r7, [sp, #104]	; 0x68
   134e8:	str	r5, [sp, #116]	; 0x74
   134ec:	mov	r7, r3
   134f0:	mov	r5, r2
   134f4:	str	r4, [sp, #32]
   134f8:	str	r6, [sp, #108]	; 0x6c
   134fc:	str	r8, [sp, #112]	; 0x70
   13500:	ldr	r3, [sp, #44]	; 0x2c
   13504:	add	r6, sl, r7
   13508:	add	r4, r3, r6
   1350c:	ldr	r3, [sp, #24]
   13510:	mov	r1, r4
   13514:	sub	r2, r3, r6
   13518:	add	r0, sp, #124	; 0x7c
   1351c:	add	r3, sp, #128	; 0x80
   13520:	bl	175ec <__assert_fail@plt+0x6764>
   13524:	subs	r8, r0, #0
   13528:	beq	138b0 <__assert_fail@plt+0x2a28>
   1352c:	cmn	r8, #1
   13530:	beq	13888 <__assert_fail@plt+0x2a00>
   13534:	cmn	r8, #2
   13538:	beq	13820 <__assert_fail@plt+0x2998>
   1353c:	ldr	r3, [sp, #64]	; 0x40
   13540:	cmp	r3, #0
   13544:	beq	13604 <__assert_fail@plt+0x277c>
   13548:	cmp	r8, #1
   1354c:	beq	13604 <__assert_fail@plt+0x277c>
   13550:	sub	r3, r8, #1
   13554:	add	r6, r3, r6
   13558:	ldr	r3, [sp, #44]	; 0x2c
   1355c:	add	r6, r3, r6
   13560:	ldrb	r3, [r4, #1]!
   13564:	sub	r3, r3, #91	; 0x5b
   13568:	cmp	r3, #33	; 0x21
   1356c:	ldrls	pc, [pc, r3, lsl #2]
   13570:	b	135fc <__assert_fail@plt+0x2774>
   13574:	andeq	r3, r1, r8, ror #12
   13578:	andeq	r3, r1, r8, ror #12
   1357c:	strdeq	r3, [r1], -ip
   13580:	andeq	r3, r1, r8, ror #12
   13584:	strdeq	r3, [r1], -ip
   13588:	andeq	r3, r1, r8, ror #12
   1358c:	strdeq	r3, [r1], -ip
   13590:	strdeq	r3, [r1], -ip
   13594:	strdeq	r3, [r1], -ip
   13598:	strdeq	r3, [r1], -ip
   1359c:	strdeq	r3, [r1], -ip
   135a0:	strdeq	r3, [r1], -ip
   135a4:	strdeq	r3, [r1], -ip
   135a8:	strdeq	r3, [r1], -ip
   135ac:	strdeq	r3, [r1], -ip
   135b0:	strdeq	r3, [r1], -ip
   135b4:	strdeq	r3, [r1], -ip
   135b8:	strdeq	r3, [r1], -ip
   135bc:	strdeq	r3, [r1], -ip
   135c0:	strdeq	r3, [r1], -ip
   135c4:	strdeq	r3, [r1], -ip
   135c8:	strdeq	r3, [r1], -ip
   135cc:	strdeq	r3, [r1], -ip
   135d0:	strdeq	r3, [r1], -ip
   135d4:	strdeq	r3, [r1], -ip
   135d8:	strdeq	r3, [r1], -ip
   135dc:	strdeq	r3, [r1], -ip
   135e0:	strdeq	r3, [r1], -ip
   135e4:	strdeq	r3, [r1], -ip
   135e8:	strdeq	r3, [r1], -ip
   135ec:	strdeq	r3, [r1], -ip
   135f0:	strdeq	r3, [r1], -ip
   135f4:	strdeq	r3, [r1], -ip
   135f8:	andeq	r3, r1, r8, ror #12
   135fc:	cmp	r6, r4
   13600:	bne	13560 <__assert_fail@plt+0x26d8>
   13604:	ldr	r0, [sp, #124]	; 0x7c
   13608:	bl	10cf0 <iswprint@plt>
   1360c:	add	r7, r7, r8
   13610:	cmp	r0, #0
   13614:	add	r0, sp, #128	; 0x80
   13618:	moveq	r5, #0
   1361c:	bl	10ca8 <mbsinit@plt>
   13620:	cmp	r0, #0
   13624:	beq	13500 <__assert_fail@plt+0x2678>
   13628:	ldr	r4, [sp, #32]
   1362c:	str	r5, [sp, #32]
   13630:	ldr	r3, [sp, #32]
   13634:	mov	r1, r7
   13638:	eor	r3, r3, #1
   1363c:	ldr	r7, [sp, #104]	; 0x68
   13640:	ldr	r6, [sp, #108]	; 0x6c
   13644:	ldr	r8, [sp, #112]	; 0x70
   13648:	ldr	r5, [sp, #116]	; 0x74
   1364c:	uxtb	r3, r3
   13650:	cmp	r1, #1
   13654:	bls	13310 <__assert_fail@plt+0x2488>
   13658:	ldr	r2, [sp, #56]	; 0x38
   1365c:	and	r3, r3, r2
   13660:	uxtb	r3, r3
   13664:	b	13320 <__assert_fail@plt+0x2498>
   13668:	mov	r3, #2
   1366c:	str	r3, [sp, #176]	; 0xb0
   13670:	ldr	r2, [sp, #64]	; 0x40
   13674:	ldr	r3, [sp, #56]	; 0x38
   13678:	mov	sl, r9
   1367c:	mov	r9, fp
   13680:	and	r3, r3, r2
   13684:	tst	r3, #255	; 0xff
   13688:	ldr	r3, [sp, #176]	; 0xb0
   1368c:	movne	r3, #4
   13690:	str	r3, [sp, #176]	; 0xb0
   13694:	ldr	r3, [sp, #180]	; 0xb4
   13698:	mov	ip, #0
   1369c:	bic	r3, r3, #2
   136a0:	str	r3, [sp, #4]
   136a4:	ldr	r3, [sp, #192]	; 0xc0
   136a8:	ldr	r2, [sp, #44]	; 0x2c
   136ac:	str	r3, [sp, #16]
   136b0:	ldr	r3, [sp, #188]	; 0xbc
   136b4:	mov	r1, r9
   136b8:	str	r3, [sp, #12]
   136bc:	ldr	r3, [sp, #176]	; 0xb0
   136c0:	mov	r0, sl
   136c4:	str	r3, [sp]
   136c8:	str	ip, [sp, #8]
   136cc:	ldr	r3, [sp, #24]
   136d0:	bl	12530 <__assert_fail@plt+0x16a8>
   136d4:	mov	fp, r0
   136d8:	mov	r0, fp
   136dc:	add	sp, sp, #140	; 0x8c
   136e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136e4:	mov	r4, #92	; 0x5c
   136e8:	mov	r1, #0
   136ec:	mov	r3, r4
   136f0:	b	12ce4 <__assert_fail@plt+0x1e5c>
   136f4:	mov	r3, #0
   136f8:	ldr	r1, [sp, #52]	; 0x34
   136fc:	str	r3, [sp, #32]
   13700:	mov	r4, #63	; 0x3f
   13704:	b	12b04 <__assert_fail@plt+0x1c7c>
   13708:	cmp	fp, #0
   1370c:	beq	13768 <__assert_fail@plt+0x28e0>
   13710:	mov	r3, #39	; 0x27
   13714:	strb	r3, [r9]
   13718:	mov	r3, #0
   1371c:	str	r3, [sp, #40]	; 0x28
   13720:	mov	r3, #1
   13724:	str	r3, [sp, #68]	; 0x44
   13728:	ldr	r3, [pc, #448]	; 138f0 <__assert_fail@plt+0x2a68>
   1372c:	mov	r8, #1
   13730:	str	r3, [sp, #72]	; 0x48
   13734:	b	12918 <__assert_fail@plt+0x1a90>
   13738:	ldr	r3, [sp, #40]	; 0x28
   1373c:	mov	sl, r9
   13740:	str	r3, [sp, #56]	; 0x38
   13744:	mov	r9, fp
   13748:	ldr	r2, [sp, #64]	; 0x40
   1374c:	b	13680 <__assert_fail@plt+0x27f8>
   13750:	str	r2, [sp, #36]	; 0x24
   13754:	b	12b68 <__assert_fail@plt+0x1ce0>
   13758:	mov	r1, #0
   1375c:	str	r3, [sp, #32]
   13760:	mov	r4, #63	; 0x3f
   13764:	b	12b04 <__assert_fail@plt+0x1c7c>
   13768:	ldr	r3, [pc, #384]	; 138f0 <__assert_fail@plt+0x2a68>
   1376c:	str	r3, [sp, #72]	; 0x48
   13770:	mov	r3, #0
   13774:	str	r3, [sp, #40]	; 0x28
   13778:	mov	r3, #1
   1377c:	str	r3, [sp, #68]	; 0x44
   13780:	mov	r8, r3
   13784:	b	12918 <__assert_fail@plt+0x1a90>
   13788:	bl	10e70 <abort@plt>
   1378c:	cmp	fp, #0
   13790:	beq	137f0 <__assert_fail@plt+0x2968>
   13794:	mov	r2, #1
   13798:	mov	r3, #34	; 0x22
   1379c:	strb	r3, [r9]
   137a0:	mov	r8, r2
   137a4:	mov	r3, r2
   137a8:	str	r2, [sp, #68]	; 0x44
   137ac:	str	r3, [sp, #56]	; 0x38
   137b0:	ldr	r3, [pc, #316]	; 138f4 <__assert_fail@plt+0x2a6c>
   137b4:	ldr	r1, [sp, #56]	; 0x38
   137b8:	str	r3, [sp, #72]	; 0x48
   137bc:	ldr	r2, [sp, #176]	; 0xb0
   137c0:	ldr	ip, [sp, #40]	; 0x28
   137c4:	ldr	lr, [sp, #176]	; 0xb0
   137c8:	b	125fc <__assert_fail@plt+0x1774>
   137cc:	ldr	r0, [sp, #44]	; 0x2c
   137d0:	bl	10d98 <strlen@plt>
   137d4:	str	r0, [sp, #24]
   137d8:	b	134dc <__assert_fail@plt+0x2654>
   137dc:	mov	r7, #0
   137e0:	ldr	r1, [sp, #52]	; 0x34
   137e4:	str	r3, [sp, #32]
   137e8:	mov	r4, #48	; 0x30
   137ec:	b	12b04 <__assert_fail@plt+0x1c7c>
   137f0:	mov	r3, #1
   137f4:	str	r3, [sp, #68]	; 0x44
   137f8:	mov	r8, r3
   137fc:	b	137ac <__assert_fail@plt+0x2924>
   13800:	mov	r3, #2
   13804:	mov	sl, r9
   13808:	str	r3, [sp, #176]	; 0xb0
   1380c:	mov	r9, fp
   13810:	ldr	r3, [sp, #56]	; 0x38
   13814:	b	13680 <__assert_fail@plt+0x27f8>
   13818:	ldr	r6, [sp, #48]	; 0x30
   1381c:	b	132cc <__assert_fail@plt+0x2444>
   13820:	ldr	r0, [sp, #24]
   13824:	mov	ip, r6
   13828:	cmp	r0, ip
   1382c:	mov	r1, r7
   13830:	mov	r2, r4
   13834:	ldr	r7, [sp, #104]	; 0x68
   13838:	ldr	r4, [sp, #32]
   1383c:	ldr	r6, [sp, #108]	; 0x6c
   13840:	ldr	r8, [sp, #112]	; 0x70
   13844:	ldr	r5, [sp, #116]	; 0x74
   13848:	bls	13878 <__assert_fail@plt+0x29f0>
   1384c:	ldrb	r3, [r2]
   13850:	cmp	r3, #0
   13854:	bne	13868 <__assert_fail@plt+0x29e0>
   13858:	b	13988 <__assert_fail@plt+0x2b00>
   1385c:	ldrb	r3, [r2, #1]!
   13860:	cmp	r3, #0
   13864:	beq	13988 <__assert_fail@plt+0x2b00>
   13868:	add	r1, r1, #1
   1386c:	add	r3, sl, r1
   13870:	cmp	r0, r3
   13874:	bhi	1385c <__assert_fail@plt+0x29d4>
   13878:	mov	r2, #0
   1387c:	mov	r3, r7
   13880:	str	r2, [sp, #32]
   13884:	b	13650 <__assert_fail@plt+0x27c8>
   13888:	mov	r1, r7
   1388c:	ldr	r7, [sp, #104]	; 0x68
   13890:	mov	r2, #0
   13894:	ldr	r4, [sp, #32]
   13898:	ldr	r6, [sp, #108]	; 0x6c
   1389c:	ldr	r8, [sp, #112]	; 0x70
   138a0:	ldr	r5, [sp, #116]	; 0x74
   138a4:	mov	r3, r7
   138a8:	str	r2, [sp, #32]
   138ac:	b	13650 <__assert_fail@plt+0x27c8>
   138b0:	mov	r3, r5
   138b4:	eor	r3, r3, #1
   138b8:	ldr	r4, [sp, #32]
   138bc:	mov	r1, r7
   138c0:	str	r5, [sp, #32]
   138c4:	ldr	r7, [sp, #104]	; 0x68
   138c8:	ldr	r6, [sp, #108]	; 0x6c
   138cc:	ldr	r8, [sp, #112]	; 0x70
   138d0:	ldr	r5, [sp, #116]	; 0x74
   138d4:	uxtb	r3, r3
   138d8:	b	13650 <__assert_fail@plt+0x27c8>
   138dc:	mov	sl, r9
   138e0:	str	r3, [sp, #56]	; 0x38
   138e4:	mov	r9, fp
   138e8:	ldr	r2, [sp, #64]	; 0x40
   138ec:	b	13680 <__assert_fail@plt+0x27f8>
   138f0:	andeq	r8, r1, ip, asr r6
   138f4:	andeq	r8, r1, r8, asr r6
   138f8:	andeq	r8, r1, r0, ror #12
   138fc:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13900:	ldr	r2, [sp, #44]	; 0x2c
   13904:	ldrb	r1, [r2, r3]
   13908:	sub	r2, r1, #33	; 0x21
   1390c:	uxtb	r2, r2
   13910:	cmp	r2, #29
   13914:	bhi	13994 <__assert_fail@plt+0x2b0c>
   13918:	ldr	r0, [pc, #-36]	; 138fc <__assert_fail@plt+0x2a74>
   1391c:	mov	ip, #1
   13920:	ands	r2, r0, ip, lsl r2
   13924:	beq	139b4 <__assert_fail@plt+0x2b2c>
   13928:	ldr	r2, [sp, #40]	; 0x28
   1392c:	cmp	r2, #0
   13930:	bne	13aa8 <__assert_fail@plt+0x2c20>
   13934:	add	r2, r8, #1
   13938:	cmp	fp, r8
   1393c:	strbhi	r4, [r9, r8]
   13940:	cmp	fp, r2
   13944:	movhi	r0, #34	; 0x22
   13948:	strbhi	r0, [r9, r2]
   1394c:	add	r2, r8, #2
   13950:	cmp	fp, r2
   13954:	movhi	r0, #34	; 0x22
   13958:	strbhi	r0, [r9, r2]
   1395c:	add	r2, r8, #3
   13960:	cmp	fp, r2
   13964:	mov	sl, r3
   13968:	ldr	r3, [sp, #40]	; 0x28
   1396c:	movhi	r0, #63	; 0x3f
   13970:	mov	r4, r1
   13974:	strbhi	r0, [r9, r2]
   13978:	add	r8, r8, #4
   1397c:	mov	r1, r3
   13980:	str	r3, [sp, #32]
   13984:	b	12b04 <__assert_fail@plt+0x1c7c>
   13988:	str	r3, [sp, #32]
   1398c:	mov	r3, r7
   13990:	b	13650 <__assert_fail@plt+0x27c8>
   13994:	mov	r1, #0
   13998:	str	r1, [sp, #32]
   1399c:	b	12b04 <__assert_fail@plt+0x1c7c>
   139a0:	mov	sl, r9
   139a4:	ldr	r3, [sp, #56]	; 0x38
   139a8:	mov	r9, fp
   139ac:	ldr	r2, [sp, #64]	; 0x40
   139b0:	b	13680 <__assert_fail@plt+0x27f8>
   139b4:	str	r2, [sp, #32]
   139b8:	mov	r1, #0
   139bc:	b	12b04 <__assert_fail@plt+0x1c7c>
   139c0:	ldr	r2, [sp, #76]	; 0x4c
   139c4:	mov	sl, r9
   139c8:	mov	r9, fp
   139cc:	mov	fp, r8
   139d0:	ldr	r1, [sp, #72]	; 0x48
   139d4:	cmp	r1, #0
   139d8:	moveq	r3, #0
   139dc:	andne	r3, r2, #1
   139e0:	cmp	r3, #0
   139e4:	beq	13a10 <__assert_fail@plt+0x2b88>
   139e8:	ldrb	r3, [r1]
   139ec:	cmp	r3, #0
   139f0:	beq	13a10 <__assert_fail@plt+0x2b88>
   139f4:	mov	r2, r1
   139f8:	cmp	r9, fp
   139fc:	strbhi	r3, [sl, fp]
   13a00:	ldrb	r3, [r2, #1]!
   13a04:	add	fp, fp, #1
   13a08:	cmp	r3, #0
   13a0c:	bne	139f8 <__assert_fail@plt+0x2b70>
   13a10:	cmp	r9, fp
   13a14:	movhi	r3, #0
   13a18:	strbhi	r3, [sl, fp]
   13a1c:	b	136d8 <__assert_fail@plt+0x2850>
   13a20:	ldr	r3, [sp, #192]	; 0xc0
   13a24:	mov	ip, #5
   13a28:	str	r3, [sp, #16]
   13a2c:	ldr	r3, [sp, #188]	; 0xbc
   13a30:	ldr	r2, [sp, #44]	; 0x2c
   13a34:	str	r3, [sp, #12]
   13a38:	ldr	r3, [sp, #184]	; 0xb8
   13a3c:	ldr	r1, [sp, #84]	; 0x54
   13a40:	str	r3, [sp, #8]
   13a44:	ldr	r3, [sp, #180]	; 0xb4
   13a48:	mov	r0, r9
   13a4c:	str	r3, [sp, #4]
   13a50:	str	ip, [sp]
   13a54:	ldr	r3, [sp, #24]
   13a58:	bl	12530 <__assert_fail@plt+0x16a8>
   13a5c:	mov	fp, r0
   13a60:	b	136d8 <__assert_fail@plt+0x2850>
   13a64:	mov	sl, r9
   13a68:	mov	r9, fp
   13a6c:	mov	fp, r8
   13a70:	b	139d0 <__assert_fail@plt+0x2b48>
   13a74:	ldr	r1, [sp, #176]	; 0xb0
   13a78:	bl	12410 <__assert_fail@plt+0x1588>
   13a7c:	str	r0, [sp, #192]	; 0xc0
   13a80:	b	129ec <__assert_fail@plt+0x1b64>
   13a84:	ldr	r1, [sp, #176]	; 0xb0
   13a88:	bl	12410 <__assert_fail@plt+0x1588>
   13a8c:	str	r0, [sp, #188]	; 0xbc
   13a90:	b	129cc <__assert_fail@plt+0x1b44>
   13a94:	mov	sl, r9
   13a98:	mov	r2, r3
   13a9c:	mov	r9, fp
   13aa0:	mov	fp, r8
   13aa4:	b	139d0 <__assert_fail@plt+0x2b48>
   13aa8:	mov	sl, r9
   13aac:	mov	r9, fp
   13ab0:	b	13694 <__assert_fail@plt+0x280c>
   13ab4:	push	{r4, r5, r6, lr}
   13ab8:	mov	r5, r0
   13abc:	bl	10da4 <__errno_location@plt>
   13ac0:	cmp	r5, #0
   13ac4:	mov	r1, #48	; 0x30
   13ac8:	mov	r4, r0
   13acc:	ldr	r0, [pc, #16]	; 13ae4 <__assert_fail@plt+0x2c5c>
   13ad0:	ldr	r6, [r4]
   13ad4:	movne	r0, r5
   13ad8:	bl	17350 <__assert_fail@plt+0x64c8>
   13adc:	str	r6, [r4]
   13ae0:	pop	{r4, r5, r6, pc}
   13ae4:	andeq	r9, r2, r0, lsr #3
   13ae8:	ldr	r3, [pc, #12]	; 13afc <__assert_fail@plt+0x2c74>
   13aec:	cmp	r0, #0
   13af0:	moveq	r0, r3
   13af4:	ldr	r0, [r0]
   13af8:	bx	lr
   13afc:	andeq	r9, r2, r0, lsr #3
   13b00:	ldr	r3, [pc, #12]	; 13b14 <__assert_fail@plt+0x2c8c>
   13b04:	cmp	r0, #0
   13b08:	moveq	r0, r3
   13b0c:	str	r1, [r0]
   13b10:	bx	lr
   13b14:	andeq	r9, r2, r0, lsr #3
   13b18:	ldr	r3, [pc, #52]	; 13b54 <__assert_fail@plt+0x2ccc>
   13b1c:	cmp	r0, #0
   13b20:	moveq	r0, r3
   13b24:	add	r3, r0, #8
   13b28:	push	{lr}		; (str lr, [sp, #-4]!)
   13b2c:	lsr	lr, r1, #5
   13b30:	and	r1, r1, #31
   13b34:	ldr	ip, [r3, lr, lsl #2]
   13b38:	lsr	r0, ip, r1
   13b3c:	eor	r2, r2, r0
   13b40:	and	r2, r2, #1
   13b44:	and	r0, r0, #1
   13b48:	eor	r1, ip, r2, lsl r1
   13b4c:	str	r1, [r3, lr, lsl #2]
   13b50:	pop	{pc}		; (ldr pc, [sp], #4)
   13b54:	andeq	r9, r2, r0, lsr #3
   13b58:	ldr	r3, [pc, #16]	; 13b70 <__assert_fail@plt+0x2ce8>
   13b5c:	cmp	r0, #0
   13b60:	movne	r3, r0
   13b64:	ldr	r0, [r3, #4]
   13b68:	str	r1, [r3, #4]
   13b6c:	bx	lr
   13b70:	andeq	r9, r2, r0, lsr #3
   13b74:	ldr	r3, [pc, #44]	; 13ba8 <__assert_fail@plt+0x2d20>
   13b78:	cmp	r0, #0
   13b7c:	moveq	r0, r3
   13b80:	mov	ip, #10
   13b84:	cmp	r2, #0
   13b88:	cmpne	r1, #0
   13b8c:	str	ip, [r0]
   13b90:	beq	13ba0 <__assert_fail@plt+0x2d18>
   13b94:	str	r1, [r0, #40]	; 0x28
   13b98:	str	r2, [r0, #44]	; 0x2c
   13b9c:	bx	lr
   13ba0:	push	{r4, lr}
   13ba4:	bl	10e70 <abort@plt>
   13ba8:	andeq	r9, r2, r0, lsr #3
   13bac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13bb0:	sub	sp, sp, #24
   13bb4:	ldr	ip, [pc, #108]	; 13c28 <__assert_fail@plt+0x2da0>
   13bb8:	ldr	r4, [sp, #56]	; 0x38
   13bbc:	mov	r9, r2
   13bc0:	cmp	r4, #0
   13bc4:	moveq	r4, ip
   13bc8:	mov	sl, r3
   13bcc:	mov	r7, r0
   13bd0:	mov	r8, r1
   13bd4:	bl	10da4 <__errno_location@plt>
   13bd8:	ldr	r3, [r4, #44]	; 0x2c
   13bdc:	mov	r1, r8
   13be0:	ldr	r6, [r0]
   13be4:	str	r3, [sp, #16]
   13be8:	ldr	r2, [r4, #40]	; 0x28
   13bec:	add	r3, r4, #8
   13bf0:	str	r3, [sp, #8]
   13bf4:	str	r2, [sp, #12]
   13bf8:	ldr	r2, [r4, #4]
   13bfc:	mov	r5, r0
   13c00:	str	r2, [sp, #4]
   13c04:	ldr	ip, [r4]
   13c08:	mov	r3, sl
   13c0c:	mov	r2, r9
   13c10:	mov	r0, r7
   13c14:	str	ip, [sp]
   13c18:	bl	12530 <__assert_fail@plt+0x16a8>
   13c1c:	str	r6, [r5]
   13c20:	add	sp, sp, #24
   13c24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13c28:	andeq	r9, r2, r0, lsr #3
   13c2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c30:	cmp	r2, #0
   13c34:	sub	sp, sp, #36	; 0x24
   13c38:	ldr	r4, [pc, #164]	; 13ce4 <__assert_fail@plt+0x2e5c>
   13c3c:	mov	r8, r1
   13c40:	movne	r4, r2
   13c44:	mov	r7, r0
   13c48:	bl	10da4 <__errno_location@plt>
   13c4c:	ldr	r3, [r4, #44]	; 0x2c
   13c50:	ldr	r5, [r4, #4]
   13c54:	add	r9, r4, #8
   13c58:	orr	r5, r5, #1
   13c5c:	mov	r1, #0
   13c60:	mov	r2, r7
   13c64:	ldr	fp, [r0]
   13c68:	str	r3, [sp, #16]
   13c6c:	ldr	r3, [r4, #40]	; 0x28
   13c70:	stmib	sp, {r5, r9}
   13c74:	str	r3, [sp, #12]
   13c78:	ldr	r3, [r4]
   13c7c:	mov	r6, r0
   13c80:	str	r3, [sp]
   13c84:	mov	r0, r1
   13c88:	mov	r3, r8
   13c8c:	bl	12530 <__assert_fail@plt+0x16a8>
   13c90:	add	r1, r0, #1
   13c94:	mov	r0, r1
   13c98:	str	r1, [sp, #28]
   13c9c:	bl	16e0c <__assert_fail@plt+0x5f84>
   13ca0:	ldr	r3, [r4, #44]	; 0x2c
   13ca4:	ldr	r1, [sp, #28]
   13ca8:	str	r3, [sp, #16]
   13cac:	ldr	r3, [r4, #40]	; 0x28
   13cb0:	str	r5, [sp, #4]
   13cb4:	str	r3, [sp, #12]
   13cb8:	str	r9, [sp, #8]
   13cbc:	ldr	ip, [r4]
   13cc0:	mov	r3, r8
   13cc4:	mov	r2, r7
   13cc8:	str	ip, [sp]
   13ccc:	mov	sl, r0
   13cd0:	bl	12530 <__assert_fail@plt+0x16a8>
   13cd4:	mov	r0, sl
   13cd8:	str	fp, [r6]
   13cdc:	add	sp, sp, #36	; 0x24
   13ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ce4:	andeq	r9, r2, r0, lsr #3
   13ce8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cec:	cmp	r3, #0
   13cf0:	sub	sp, sp, #44	; 0x2c
   13cf4:	ldr	r4, [pc, #192]	; 13dbc <__assert_fail@plt+0x2f34>
   13cf8:	mov	r6, r2
   13cfc:	movne	r4, r3
   13d00:	mov	r9, r1
   13d04:	mov	r8, r0
   13d08:	bl	10da4 <__errno_location@plt>
   13d0c:	ldr	r3, [r4, #44]	; 0x2c
   13d10:	ldr	r5, [r4, #4]
   13d14:	add	sl, r4, #8
   13d18:	cmp	r6, #0
   13d1c:	orreq	r5, r5, #1
   13d20:	mov	r1, #0
   13d24:	ldr	r2, [r0]
   13d28:	str	r3, [sp, #16]
   13d2c:	ldr	r3, [r4, #40]	; 0x28
   13d30:	stmib	sp, {r5, sl}
   13d34:	str	r3, [sp, #12]
   13d38:	ldr	r3, [r4]
   13d3c:	mov	r7, r0
   13d40:	str	r2, [sp, #28]
   13d44:	str	r3, [sp]
   13d48:	mov	r2, r8
   13d4c:	mov	r3, r9
   13d50:	mov	r0, r1
   13d54:	bl	12530 <__assert_fail@plt+0x16a8>
   13d58:	add	r1, r0, #1
   13d5c:	mov	fp, r0
   13d60:	mov	r0, r1
   13d64:	str	r1, [sp, #36]	; 0x24
   13d68:	bl	16e0c <__assert_fail@plt+0x5f84>
   13d6c:	ldr	r3, [r4, #44]	; 0x2c
   13d70:	mov	r2, r8
   13d74:	str	r3, [sp, #16]
   13d78:	ldr	r3, [r4, #40]	; 0x28
   13d7c:	str	r5, [sp, #4]
   13d80:	str	r3, [sp, #12]
   13d84:	str	sl, [sp, #8]
   13d88:	ldr	ip, [r4]
   13d8c:	ldr	r1, [sp, #36]	; 0x24
   13d90:	mov	r3, r9
   13d94:	str	ip, [sp]
   13d98:	str	r0, [sp, #32]
   13d9c:	bl	12530 <__assert_fail@plt+0x16a8>
   13da0:	ldr	r2, [sp, #28]
   13da4:	cmp	r6, #0
   13da8:	str	r2, [r7]
   13dac:	ldr	r0, [sp, #32]
   13db0:	strne	fp, [r6]
   13db4:	add	sp, sp, #44	; 0x2c
   13db8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dbc:	andeq	r9, r2, r0, lsr #3
   13dc0:	push	{r4, r5, r6, r7, r8, lr}
   13dc4:	ldr	r6, [pc, #116]	; 13e40 <__assert_fail@plt+0x2fb8>
   13dc8:	ldr	r3, [r6, #4]
   13dcc:	ldr	r7, [r6]
   13dd0:	cmp	r3, #1
   13dd4:	movgt	r5, r7
   13dd8:	movgt	r4, #1
   13ddc:	ble	13dfc <__assert_fail@plt+0x2f74>
   13de0:	ldr	r0, [r5, #12]
   13de4:	bl	12264 <__assert_fail@plt+0x13dc>
   13de8:	ldr	r3, [r6, #4]
   13dec:	add	r4, r4, #1
   13df0:	cmp	r3, r4
   13df4:	add	r5, r5, #8
   13df8:	bgt	13de0 <__assert_fail@plt+0x2f58>
   13dfc:	ldr	r0, [r7, #4]
   13e00:	ldr	r4, [pc, #60]	; 13e44 <__assert_fail@plt+0x2fbc>
   13e04:	cmp	r0, r4
   13e08:	beq	13e1c <__assert_fail@plt+0x2f94>
   13e0c:	bl	12264 <__assert_fail@plt+0x13dc>
   13e10:	mov	r3, #256	; 0x100
   13e14:	str	r4, [r6, #12]
   13e18:	str	r3, [r6, #8]
   13e1c:	ldr	r4, [pc, #36]	; 13e48 <__assert_fail@plt+0x2fc0>
   13e20:	cmp	r7, r4
   13e24:	beq	13e34 <__assert_fail@plt+0x2fac>
   13e28:	mov	r0, r7
   13e2c:	bl	12264 <__assert_fail@plt+0x13dc>
   13e30:	str	r4, [r6]
   13e34:	mov	r3, #1
   13e38:	str	r3, [r6, #4]
   13e3c:	pop	{r4, r5, r6, r7, r8, pc}
   13e40:	strdeq	r9, [r2], -r0
   13e44:	ldrdeq	r9, [r2], -r0
   13e48:	strdeq	r9, [r2], -r8
   13e4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e50:	sub	sp, sp, #44	; 0x2c
   13e54:	mov	r5, r0
   13e58:	mov	sl, r1
   13e5c:	bl	10da4 <__errno_location@plt>
   13e60:	ldr	r4, [pc, #400]	; 13ff8 <__assert_fail@plt+0x3170>
   13e64:	cmn	r5, #-2147483647	; 0x80000001
   13e68:	ldr	r6, [r4]
   13e6c:	mov	r8, r0
   13e70:	movne	r0, #0
   13e74:	moveq	r0, #1
   13e78:	ldr	r3, [r8]
   13e7c:	orrs	r0, r0, r5, lsr #31
   13e80:	str	r3, [sp, #24]
   13e84:	bne	13ff4 <__assert_fail@plt+0x316c>
   13e88:	ldr	r2, [r4, #4]
   13e8c:	cmp	r5, r2
   13e90:	blt	13ef0 <__assert_fail@plt+0x3068>
   13e94:	add	r7, r4, #8
   13e98:	cmp	r6, r7
   13e9c:	str	r2, [sp, #36]	; 0x24
   13ea0:	beq	13fc4 <__assert_fail@plt+0x313c>
   13ea4:	mov	r3, #8
   13ea8:	sub	r2, r5, r2
   13eac:	mov	r0, r6
   13eb0:	str	r3, [sp]
   13eb4:	add	r2, r2, #1
   13eb8:	mvn	r3, #-2147483648	; 0x80000000
   13ebc:	add	r1, sp, #36	; 0x24
   13ec0:	bl	17028 <__assert_fail@plt+0x61a0>
   13ec4:	mov	r6, r0
   13ec8:	str	r0, [r4]
   13ecc:	ldr	r0, [r4, #4]
   13ed0:	ldr	r2, [sp, #36]	; 0x24
   13ed4:	mov	r1, #0
   13ed8:	sub	r2, r2, r0
   13edc:	add	r0, r6, r0, lsl #3
   13ee0:	lsl	r2, r2, #3
   13ee4:	bl	10dbc <memset@plt>
   13ee8:	ldr	r3, [sp, #36]	; 0x24
   13eec:	str	r3, [r4, #4]
   13ef0:	ldr	r4, [pc, #260]	; 13ffc <__assert_fail@plt+0x3174>
   13ef4:	add	fp, r6, r5, lsl #3
   13ef8:	ldr	r9, [r6, r5, lsl #3]
   13efc:	ldr	r0, [r4, #4]
   13f00:	ldr	r3, [r4]
   13f04:	ldr	r7, [fp, #4]
   13f08:	ldr	r1, [r4, #44]	; 0x2c
   13f0c:	ldr	r2, [r4, #40]	; 0x28
   13f10:	orr	r0, r0, #1
   13f14:	str	r3, [sp]
   13f18:	add	r3, r4, #8
   13f1c:	str	r0, [sp, #28]
   13f20:	str	r0, [sp, #4]
   13f24:	str	r1, [sp, #16]
   13f28:	str	r2, [sp, #12]
   13f2c:	str	r3, [sp, #8]
   13f30:	mov	r0, r7
   13f34:	mov	r1, r9
   13f38:	mvn	r3, #0
   13f3c:	mov	r2, sl
   13f40:	bl	12530 <__assert_fail@plt+0x16a8>
   13f44:	cmp	r9, r0
   13f48:	bhi	13fb0 <__assert_fail@plt+0x3128>
   13f4c:	add	r3, r4, #48	; 0x30
   13f50:	add	r9, r0, #1
   13f54:	cmp	r7, r3
   13f58:	str	r9, [r6, r5, lsl #3]
   13f5c:	beq	13f68 <__assert_fail@plt+0x30e0>
   13f60:	mov	r0, r7
   13f64:	bl	12264 <__assert_fail@plt+0x13dc>
   13f68:	mov	r0, r9
   13f6c:	bl	16e0c <__assert_fail@plt+0x5f84>
   13f70:	ldr	ip, [r4, #44]	; 0x2c
   13f74:	ldr	r3, [r4]
   13f78:	ldr	lr, [r4, #40]	; 0x28
   13f7c:	ldr	r4, [pc, #124]	; 14000 <__assert_fail@plt+0x3178>
   13f80:	mov	r2, sl
   13f84:	mov	r1, r9
   13f88:	str	r0, [fp, #4]
   13f8c:	str	r4, [sp, #8]
   13f90:	ldr	r4, [sp, #28]
   13f94:	str	r3, [sp]
   13f98:	str	r4, [sp, #4]
   13f9c:	str	ip, [sp, #16]
   13fa0:	str	lr, [sp, #12]
   13fa4:	mvn	r3, #0
   13fa8:	mov	r7, r0
   13fac:	bl	12530 <__assert_fail@plt+0x16a8>
   13fb0:	ldr	r3, [sp, #24]
   13fb4:	mov	r0, r7
   13fb8:	str	r3, [r8]
   13fbc:	add	sp, sp, #44	; 0x2c
   13fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fc4:	mov	r3, #8
   13fc8:	sub	r2, r5, r2
   13fcc:	str	r3, [sp]
   13fd0:	add	r1, sp, #36	; 0x24
   13fd4:	add	r2, r2, #1
   13fd8:	mvn	r3, #-2147483648	; 0x80000000
   13fdc:	bl	17028 <__assert_fail@plt+0x61a0>
   13fe0:	mov	r6, r0
   13fe4:	ldm	r7, {r0, r1}
   13fe8:	str	r6, [r4]
   13fec:	stm	r6, {r0, r1}
   13ff0:	b	13ecc <__assert_fail@plt+0x3044>
   13ff4:	bl	10e70 <abort@plt>
   13ff8:	strdeq	r9, [r2], -r0
   13ffc:	andeq	r9, r2, r0, lsr #3
   14000:	andeq	r9, r2, r8, lsr #3
   14004:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14008:	sub	sp, sp, #52	; 0x34
   1400c:	mov	r5, r0
   14010:	mov	sl, r1
   14014:	mov	fp, r2
   14018:	bl	10da4 <__errno_location@plt>
   1401c:	ldr	r4, [pc, #408]	; 141bc <__assert_fail@plt+0x3334>
   14020:	cmn	r5, #-2147483647	; 0x80000001
   14024:	ldr	r6, [r4]
   14028:	mov	r8, r0
   1402c:	movne	r0, #0
   14030:	moveq	r0, #1
   14034:	ldr	r3, [r8]
   14038:	orrs	r0, r0, r5, lsr #31
   1403c:	str	r3, [sp, #28]
   14040:	bne	141b8 <__assert_fail@plt+0x3330>
   14044:	ldr	r2, [r4, #4]
   14048:	cmp	r5, r2
   1404c:	blt	140ac <__assert_fail@plt+0x3224>
   14050:	add	r7, r4, #8
   14054:	cmp	r6, r7
   14058:	str	r2, [sp, #44]	; 0x2c
   1405c:	beq	14188 <__assert_fail@plt+0x3300>
   14060:	mov	r3, #8
   14064:	sub	r2, r5, r2
   14068:	mov	r0, r6
   1406c:	str	r3, [sp]
   14070:	add	r2, r2, #1
   14074:	mvn	r3, #-2147483648	; 0x80000000
   14078:	add	r1, sp, #44	; 0x2c
   1407c:	bl	17028 <__assert_fail@plt+0x61a0>
   14080:	mov	r6, r0
   14084:	str	r0, [r4]
   14088:	ldr	r0, [r4, #4]
   1408c:	ldr	r2, [sp, #44]	; 0x2c
   14090:	mov	r1, #0
   14094:	sub	r2, r2, r0
   14098:	add	r0, r6, r0, lsl #3
   1409c:	lsl	r2, r2, #3
   140a0:	bl	10dbc <memset@plt>
   140a4:	ldr	r3, [sp, #44]	; 0x2c
   140a8:	str	r3, [r4, #4]
   140ac:	ldr	r4, [pc, #268]	; 141c0 <__assert_fail@plt+0x3338>
   140b0:	add	r3, r6, r5, lsl #3
   140b4:	str	r3, [sp, #32]
   140b8:	ldr	r7, [r3, #4]
   140bc:	ldr	r0, [r4, #4]
   140c0:	ldr	r3, [r4]
   140c4:	ldr	r9, [r6, r5, lsl #3]
   140c8:	ldr	r1, [r4, #44]	; 0x2c
   140cc:	ldr	r2, [r4, #40]	; 0x28
   140d0:	orr	r0, r0, #1
   140d4:	str	r3, [sp]
   140d8:	add	r3, r4, #8
   140dc:	str	r0, [sp, #36]	; 0x24
   140e0:	str	r0, [sp, #4]
   140e4:	str	r1, [sp, #16]
   140e8:	str	r2, [sp, #12]
   140ec:	str	r3, [sp, #8]
   140f0:	mov	r0, r7
   140f4:	mov	r1, r9
   140f8:	mov	r3, fp
   140fc:	mov	r2, sl
   14100:	bl	12530 <__assert_fail@plt+0x16a8>
   14104:	cmp	r9, r0
   14108:	bhi	14174 <__assert_fail@plt+0x32ec>
   1410c:	add	r3, r4, #48	; 0x30
   14110:	add	r9, r0, #1
   14114:	cmp	r7, r3
   14118:	str	r9, [r6, r5, lsl #3]
   1411c:	beq	14128 <__assert_fail@plt+0x32a0>
   14120:	mov	r0, r7
   14124:	bl	12264 <__assert_fail@plt+0x13dc>
   14128:	mov	r0, r9
   1412c:	bl	16e0c <__assert_fail@plt+0x5f84>
   14130:	ldr	ip, [sp, #32]
   14134:	ldr	lr, [r4, #44]	; 0x2c
   14138:	ldr	r5, [r4, #40]	; 0x28
   1413c:	mov	r3, fp
   14140:	mov	r2, sl
   14144:	mov	r1, r9
   14148:	str	r0, [ip, #4]
   1414c:	ldr	ip, [r4]
   14150:	ldr	r4, [pc, #108]	; 141c4 <__assert_fail@plt+0x333c>
   14154:	str	lr, [sp, #16]
   14158:	str	r4, [sp, #8]
   1415c:	ldr	r4, [sp, #36]	; 0x24
   14160:	str	r5, [sp, #12]
   14164:	str	r4, [sp, #4]
   14168:	str	ip, [sp]
   1416c:	mov	r7, r0
   14170:	bl	12530 <__assert_fail@plt+0x16a8>
   14174:	ldr	r3, [sp, #28]
   14178:	mov	r0, r7
   1417c:	str	r3, [r8]
   14180:	add	sp, sp, #52	; 0x34
   14184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14188:	mov	r3, #8
   1418c:	sub	r2, r5, r2
   14190:	str	r3, [sp]
   14194:	add	r1, sp, #44	; 0x2c
   14198:	add	r2, r2, #1
   1419c:	mvn	r3, #-2147483648	; 0x80000000
   141a0:	bl	17028 <__assert_fail@plt+0x61a0>
   141a4:	mov	r6, r0
   141a8:	ldm	r7, {r0, r1}
   141ac:	str	r6, [r4]
   141b0:	stm	r6, {r0, r1}
   141b4:	b	14088 <__assert_fail@plt+0x3200>
   141b8:	bl	10e70 <abort@plt>
   141bc:	strdeq	r9, [r2], -r0
   141c0:	andeq	r9, r2, r0, lsr #3
   141c4:	andeq	r9, r2, r8, lsr #3
   141c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141cc:	sub	sp, sp, #44	; 0x2c
   141d0:	mov	sl, r0
   141d4:	bl	10da4 <__errno_location@plt>
   141d8:	ldr	r4, [pc, #352]	; 14340 <__assert_fail@plt+0x34b8>
   141dc:	ldr	r2, [r4, #4]
   141e0:	ldr	r5, [r4]
   141e4:	cmp	r2, #0
   141e8:	ldr	r3, [r0]
   141ec:	mov	r8, r0
   141f0:	str	r3, [sp, #28]
   141f4:	bgt	14250 <__assert_fail@plt+0x33c8>
   141f8:	add	r6, r4, #8
   141fc:	cmp	r5, r6
   14200:	str	r2, [sp, #36]	; 0x24
   14204:	beq	14310 <__assert_fail@plt+0x3488>
   14208:	mov	r3, #8
   1420c:	mov	r0, r5
   14210:	str	r3, [sp]
   14214:	rsb	r2, r2, #1
   14218:	mvn	r3, #-2147483648	; 0x80000000
   1421c:	add	r1, sp, #36	; 0x24
   14220:	bl	17028 <__assert_fail@plt+0x61a0>
   14224:	mov	r5, r0
   14228:	str	r0, [r4]
   1422c:	ldr	r0, [r4, #4]
   14230:	ldr	r2, [sp, #36]	; 0x24
   14234:	mov	r1, #0
   14238:	sub	r2, r2, r0
   1423c:	add	r0, r5, r0, lsl #3
   14240:	lsl	r2, r2, #3
   14244:	bl	10dbc <memset@plt>
   14248:	ldr	r3, [sp, #36]	; 0x24
   1424c:	str	r3, [r4, #4]
   14250:	ldr	r4, [pc, #236]	; 14344 <__assert_fail@plt+0x34bc>
   14254:	ldr	r9, [r5]
   14258:	ldr	r6, [r5, #4]
   1425c:	ldr	r7, [r4, #4]
   14260:	ldr	r1, [r4, #44]	; 0x2c
   14264:	ldr	r2, [r4, #40]	; 0x28
   14268:	ldr	r3, [r4]
   1426c:	orr	r7, r7, #1
   14270:	add	fp, r4, #8
   14274:	str	r1, [sp, #16]
   14278:	str	r2, [sp, #12]
   1427c:	str	r3, [sp]
   14280:	str	r7, [sp, #4]
   14284:	str	fp, [sp, #8]
   14288:	mov	r1, r9
   1428c:	mov	r0, r6
   14290:	mvn	r3, #0
   14294:	mov	r2, sl
   14298:	bl	12530 <__assert_fail@plt+0x16a8>
   1429c:	cmp	r9, r0
   142a0:	bhi	142fc <__assert_fail@plt+0x3474>
   142a4:	add	r3, r4, #48	; 0x30
   142a8:	add	r9, r0, #1
   142ac:	cmp	r6, r3
   142b0:	str	r9, [r5]
   142b4:	beq	142c0 <__assert_fail@plt+0x3438>
   142b8:	mov	r0, r6
   142bc:	bl	12264 <__assert_fail@plt+0x13dc>
   142c0:	mov	r0, r9
   142c4:	bl	16e0c <__assert_fail@plt+0x5f84>
   142c8:	ldr	ip, [r4, #44]	; 0x2c
   142cc:	ldr	r3, [r4]
   142d0:	ldr	lr, [r4, #40]	; 0x28
   142d4:	mov	r2, sl
   142d8:	mov	r1, r9
   142dc:	str	r0, [r5, #4]
   142e0:	str	r3, [sp]
   142e4:	stmib	sp, {r7, fp}
   142e8:	str	ip, [sp, #16]
   142ec:	str	lr, [sp, #12]
   142f0:	mvn	r3, #0
   142f4:	mov	r6, r0
   142f8:	bl	12530 <__assert_fail@plt+0x16a8>
   142fc:	ldr	r3, [sp, #28]
   14300:	mov	r0, r6
   14304:	str	r3, [r8]
   14308:	add	sp, sp, #44	; 0x2c
   1430c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14310:	mov	r3, #8
   14314:	str	r3, [sp]
   14318:	add	r1, sp, #36	; 0x24
   1431c:	rsb	r2, r2, #1
   14320:	mvn	r3, #-2147483648	; 0x80000000
   14324:	mov	r0, #0
   14328:	bl	17028 <__assert_fail@plt+0x61a0>
   1432c:	mov	r5, r0
   14330:	ldm	r6, {r0, r1}
   14334:	str	r5, [r4]
   14338:	stm	r5, {r0, r1}
   1433c:	b	1422c <__assert_fail@plt+0x33a4>
   14340:	strdeq	r9, [r2], -r0
   14344:	andeq	r9, r2, r0, lsr #3
   14348:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1434c:	sub	sp, sp, #44	; 0x2c
   14350:	mov	r9, r0
   14354:	mov	sl, r1
   14358:	bl	10da4 <__errno_location@plt>
   1435c:	ldr	r4, [pc, #364]	; 144d0 <__assert_fail@plt+0x3648>
   14360:	ldr	r2, [r4, #4]
   14364:	ldr	r5, [r4]
   14368:	cmp	r2, #0
   1436c:	ldr	r3, [r0]
   14370:	mov	r7, r0
   14374:	str	r3, [sp, #24]
   14378:	bgt	143d4 <__assert_fail@plt+0x354c>
   1437c:	add	r6, r4, #8
   14380:	cmp	r5, r6
   14384:	str	r2, [sp, #36]	; 0x24
   14388:	beq	144a0 <__assert_fail@plt+0x3618>
   1438c:	mov	r3, #8
   14390:	mov	r0, r5
   14394:	str	r3, [sp]
   14398:	rsb	r2, r2, #1
   1439c:	mvn	r3, #-2147483648	; 0x80000000
   143a0:	add	r1, sp, #36	; 0x24
   143a4:	bl	17028 <__assert_fail@plt+0x61a0>
   143a8:	mov	r5, r0
   143ac:	str	r0, [r4]
   143b0:	ldr	r0, [r4, #4]
   143b4:	ldr	r2, [sp, #36]	; 0x24
   143b8:	mov	r1, #0
   143bc:	sub	r2, r2, r0
   143c0:	add	r0, r5, r0, lsl #3
   143c4:	lsl	r2, r2, #3
   143c8:	bl	10dbc <memset@plt>
   143cc:	ldr	r3, [sp, #36]	; 0x24
   143d0:	str	r3, [r4, #4]
   143d4:	ldr	r4, [pc, #248]	; 144d4 <__assert_fail@plt+0x364c>
   143d8:	ldr	r8, [r5]
   143dc:	ldr	r6, [r5, #4]
   143e0:	ldr	r0, [r4, #4]
   143e4:	ldr	r1, [r4, #44]	; 0x2c
   143e8:	ldr	r2, [r4, #40]	; 0x28
   143ec:	ldr	r3, [r4]
   143f0:	orr	r0, r0, #1
   143f4:	add	fp, r4, #8
   143f8:	str	r0, [sp, #28]
   143fc:	str	r0, [sp, #4]
   14400:	str	r1, [sp, #16]
   14404:	str	r2, [sp, #12]
   14408:	str	r3, [sp]
   1440c:	str	fp, [sp, #8]
   14410:	mov	r1, r8
   14414:	mov	r0, r6
   14418:	mov	r3, sl
   1441c:	mov	r2, r9
   14420:	bl	12530 <__assert_fail@plt+0x16a8>
   14424:	cmp	r8, r0
   14428:	bhi	1448c <__assert_fail@plt+0x3604>
   1442c:	add	r3, r4, #48	; 0x30
   14430:	add	r8, r0, #1
   14434:	cmp	r6, r3
   14438:	str	r8, [r5]
   1443c:	beq	14448 <__assert_fail@plt+0x35c0>
   14440:	mov	r0, r6
   14444:	bl	12264 <__assert_fail@plt+0x13dc>
   14448:	mov	r0, r8
   1444c:	bl	16e0c <__assert_fail@plt+0x5f84>
   14450:	ldr	lr, [r4, #44]	; 0x2c
   14454:	ldr	ip, [r4]
   14458:	mov	r3, sl
   1445c:	mov	r2, r9
   14460:	mov	r1, r8
   14464:	str	r0, [r5, #4]
   14468:	ldr	r5, [r4, #40]	; 0x28
   1446c:	ldr	r4, [sp, #28]
   14470:	str	fp, [sp, #8]
   14474:	str	r4, [sp, #4]
   14478:	str	lr, [sp, #16]
   1447c:	str	r5, [sp, #12]
   14480:	str	ip, [sp]
   14484:	mov	r6, r0
   14488:	bl	12530 <__assert_fail@plt+0x16a8>
   1448c:	ldr	r3, [sp, #24]
   14490:	mov	r0, r6
   14494:	str	r3, [r7]
   14498:	add	sp, sp, #44	; 0x2c
   1449c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144a0:	mov	r3, #8
   144a4:	str	r3, [sp]
   144a8:	add	r1, sp, #36	; 0x24
   144ac:	rsb	r2, r2, #1
   144b0:	mvn	r3, #-2147483648	; 0x80000000
   144b4:	mov	r0, #0
   144b8:	bl	17028 <__assert_fail@plt+0x61a0>
   144bc:	mov	r5, r0
   144c0:	ldm	r6, {r0, r1}
   144c4:	str	r5, [r4]
   144c8:	stm	r5, {r0, r1}
   144cc:	b	143b0 <__assert_fail@plt+0x3528>
   144d0:	strdeq	r9, [r2], -r0
   144d4:	andeq	r9, r2, r0, lsr #3
   144d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144dc:	sub	sp, sp, #132	; 0x84
   144e0:	mov	r5, r1
   144e4:	mov	r4, r0
   144e8:	mov	r9, r2
   144ec:	add	r0, sp, #80	; 0x50
   144f0:	mov	r2, #48	; 0x30
   144f4:	mov	r1, #0
   144f8:	bl	10dbc <memset@plt>
   144fc:	cmp	r5, #10
   14500:	beq	146b8 <__assert_fail@plt+0x3830>
   14504:	add	lr, sp, #80	; 0x50
   14508:	str	r5, [sp, #80]	; 0x50
   1450c:	ldm	lr!, {r0, r1, r2, r3}
   14510:	add	ip, sp, #32
   14514:	ldr	r6, [pc, #416]	; 146bc <__assert_fail@plt+0x3834>
   14518:	stmia	ip!, {r0, r1, r2, r3}
   1451c:	ldm	lr!, {r0, r1, r2, r3}
   14520:	stmia	ip!, {r0, r1, r2, r3}
   14524:	ldm	lr, {r0, r1, r2, r3}
   14528:	stm	ip, {r0, r1, r2, r3}
   1452c:	bl	10da4 <__errno_location@plt>
   14530:	cmn	r4, #-2147483647	; 0x80000001
   14534:	ldr	r5, [r6]
   14538:	mov	r7, r0
   1453c:	movne	r0, #0
   14540:	moveq	r0, #1
   14544:	ldr	r3, [r7]
   14548:	orrs	r0, r0, r4, lsr #31
   1454c:	str	r3, [sp, #24]
   14550:	bne	146b8 <__assert_fail@plt+0x3830>
   14554:	ldr	r2, [r6, #4]
   14558:	cmp	r4, r2
   1455c:	blt	145bc <__assert_fail@plt+0x3734>
   14560:	add	r8, r6, #8
   14564:	cmp	r5, r8
   14568:	str	r2, [sp, #80]	; 0x50
   1456c:	beq	14688 <__assert_fail@plt+0x3800>
   14570:	mov	r3, #8
   14574:	sub	r2, r4, r2
   14578:	mov	r0, r5
   1457c:	str	r3, [sp]
   14580:	add	r2, r2, #1
   14584:	add	r1, sp, #80	; 0x50
   14588:	mvn	r3, #-2147483648	; 0x80000000
   1458c:	bl	17028 <__assert_fail@plt+0x61a0>
   14590:	mov	r5, r0
   14594:	str	r0, [r6]
   14598:	ldr	r0, [r6, #4]
   1459c:	ldr	r2, [sp, #80]	; 0x50
   145a0:	mov	r1, #0
   145a4:	sub	r2, r2, r0
   145a8:	add	r0, r5, r0, lsl #3
   145ac:	lsl	r2, r2, #3
   145b0:	bl	10dbc <memset@plt>
   145b4:	ldr	r3, [sp, #80]	; 0x50
   145b8:	str	r3, [r6, #4]
   145bc:	add	fp, r5, r4, lsl #3
   145c0:	ldr	r1, [sp, #36]	; 0x24
   145c4:	ldr	r8, [r5, r4, lsl #3]
   145c8:	ldr	r6, [fp, #4]
   145cc:	ldr	r2, [sp, #72]	; 0x48
   145d0:	ldr	r3, [sp, #32]
   145d4:	ldr	ip, [sp, #76]	; 0x4c
   145d8:	orr	r1, r1, #1
   145dc:	add	sl, sp, #40	; 0x28
   145e0:	str	r1, [sp, #28]
   145e4:	str	r1, [sp, #4]
   145e8:	str	r2, [sp, #12]
   145ec:	str	r3, [sp]
   145f0:	mov	r0, r6
   145f4:	mov	r1, r8
   145f8:	str	ip, [sp, #16]
   145fc:	str	sl, [sp, #8]
   14600:	mvn	r3, #0
   14604:	mov	r2, r9
   14608:	bl	12530 <__assert_fail@plt+0x16a8>
   1460c:	cmp	r8, r0
   14610:	bhi	14674 <__assert_fail@plt+0x37ec>
   14614:	ldr	r3, [pc, #164]	; 146c0 <__assert_fail@plt+0x3838>
   14618:	add	r8, r0, #1
   1461c:	cmp	r6, r3
   14620:	str	r8, [r5, r4, lsl #3]
   14624:	beq	14630 <__assert_fail@plt+0x37a8>
   14628:	mov	r0, r6
   1462c:	bl	12264 <__assert_fail@plt+0x13dc>
   14630:	mov	r0, r8
   14634:	bl	16e0c <__assert_fail@plt+0x5f84>
   14638:	ldr	lr, [sp, #76]	; 0x4c
   1463c:	ldr	r3, [sp, #32]
   14640:	ldr	ip, [sp, #72]	; 0x48
   14644:	ldr	r4, [sp, #28]
   14648:	mov	r2, r9
   1464c:	mov	r1, r8
   14650:	str	r0, [fp, #4]
   14654:	str	r3, [sp]
   14658:	str	sl, [sp, #8]
   1465c:	str	r4, [sp, #4]
   14660:	str	lr, [sp, #16]
   14664:	str	ip, [sp, #12]
   14668:	mvn	r3, #0
   1466c:	mov	r6, r0
   14670:	bl	12530 <__assert_fail@plt+0x16a8>
   14674:	ldr	r3, [sp, #24]
   14678:	mov	r0, r6
   1467c:	str	r3, [r7]
   14680:	add	sp, sp, #132	; 0x84
   14684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14688:	mov	r3, #8
   1468c:	sub	r2, r4, r2
   14690:	add	r1, sp, #80	; 0x50
   14694:	str	r3, [sp]
   14698:	add	r2, r2, #1
   1469c:	mvn	r3, #-2147483648	; 0x80000000
   146a0:	bl	17028 <__assert_fail@plt+0x61a0>
   146a4:	mov	r5, r0
   146a8:	ldm	r8, {r0, r1}
   146ac:	str	r5, [r6]
   146b0:	stm	r5, {r0, r1}
   146b4:	b	14598 <__assert_fail@plt+0x3710>
   146b8:	bl	10e70 <abort@plt>
   146bc:	strdeq	r9, [r2], -r0
   146c0:	ldrdeq	r9, [r2], -r0
   146c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146c8:	sub	sp, sp, #132	; 0x84
   146cc:	mov	r5, r1
   146d0:	mov	r4, r0
   146d4:	mov	r9, r2
   146d8:	add	r0, sp, #80	; 0x50
   146dc:	mov	r2, #48	; 0x30
   146e0:	mov	r1, #0
   146e4:	mov	sl, r3
   146e8:	bl	10dbc <memset@plt>
   146ec:	cmp	r5, #10
   146f0:	beq	148ac <__assert_fail@plt+0x3a24>
   146f4:	add	lr, sp, #80	; 0x50
   146f8:	str	r5, [sp, #80]	; 0x50
   146fc:	ldm	lr!, {r0, r1, r2, r3}
   14700:	add	ip, sp, #32
   14704:	ldr	r6, [pc, #420]	; 148b0 <__assert_fail@plt+0x3a28>
   14708:	stmia	ip!, {r0, r1, r2, r3}
   1470c:	ldm	lr!, {r0, r1, r2, r3}
   14710:	stmia	ip!, {r0, r1, r2, r3}
   14714:	ldm	lr, {r0, r1, r2, r3}
   14718:	stm	ip, {r0, r1, r2, r3}
   1471c:	bl	10da4 <__errno_location@plt>
   14720:	cmn	r4, #-2147483647	; 0x80000001
   14724:	ldr	r5, [r6]
   14728:	mov	r7, r0
   1472c:	movne	r0, #0
   14730:	moveq	r0, #1
   14734:	ldr	r3, [r7]
   14738:	orrs	r0, r0, r4, lsr #31
   1473c:	str	r3, [sp, #24]
   14740:	bne	148ac <__assert_fail@plt+0x3a24>
   14744:	ldr	r2, [r6, #4]
   14748:	cmp	r4, r2
   1474c:	blt	147ac <__assert_fail@plt+0x3924>
   14750:	add	r8, r6, #8
   14754:	cmp	r5, r8
   14758:	str	r2, [sp, #80]	; 0x50
   1475c:	beq	1487c <__assert_fail@plt+0x39f4>
   14760:	mov	r3, #8
   14764:	sub	r2, r4, r2
   14768:	mov	r0, r5
   1476c:	str	r3, [sp]
   14770:	add	r2, r2, #1
   14774:	add	r1, sp, #80	; 0x50
   14778:	mvn	r3, #-2147483648	; 0x80000000
   1477c:	bl	17028 <__assert_fail@plt+0x61a0>
   14780:	mov	r5, r0
   14784:	str	r0, [r6]
   14788:	ldr	r0, [r6, #4]
   1478c:	ldr	r2, [sp, #80]	; 0x50
   14790:	mov	r1, #0
   14794:	sub	r2, r2, r0
   14798:	add	r0, r5, r0, lsl #3
   1479c:	lsl	r2, r2, #3
   147a0:	bl	10dbc <memset@plt>
   147a4:	ldr	r3, [sp, #80]	; 0x50
   147a8:	str	r3, [r6, #4]
   147ac:	add	fp, r5, r4, lsl #3
   147b0:	ldr	r3, [sp, #32]
   147b4:	ldr	r1, [sp, #36]	; 0x24
   147b8:	ldr	r8, [r5, r4, lsl #3]
   147bc:	ldr	r6, [fp, #4]
   147c0:	ldr	r2, [sp, #72]	; 0x48
   147c4:	ldr	ip, [sp, #76]	; 0x4c
   147c8:	orr	r1, r1, #1
   147cc:	str	r3, [sp]
   147d0:	add	r3, sp, #40	; 0x28
   147d4:	str	r1, [sp, #28]
   147d8:	str	r1, [sp, #4]
   147dc:	str	r2, [sp, #12]
   147e0:	str	r3, [sp, #8]
   147e4:	mov	r0, r6
   147e8:	mov	r1, r8
   147ec:	str	ip, [sp, #16]
   147f0:	mov	r3, sl
   147f4:	mov	r2, r9
   147f8:	bl	12530 <__assert_fail@plt+0x16a8>
   147fc:	cmp	r8, r0
   14800:	bhi	14868 <__assert_fail@plt+0x39e0>
   14804:	ldr	r3, [pc, #168]	; 148b4 <__assert_fail@plt+0x3a2c>
   14808:	add	r8, r0, #1
   1480c:	cmp	r6, r3
   14810:	str	r8, [r5, r4, lsl #3]
   14814:	beq	14820 <__assert_fail@plt+0x3998>
   14818:	mov	r0, r6
   1481c:	bl	12264 <__assert_fail@plt+0x13dc>
   14820:	mov	r0, r8
   14824:	bl	16e0c <__assert_fail@plt+0x5f84>
   14828:	add	lr, sp, #40	; 0x28
   1482c:	ldr	ip, [sp, #76]	; 0x4c
   14830:	ldr	r4, [sp, #72]	; 0x48
   14834:	ldr	r5, [sp, #28]
   14838:	mov	r3, sl
   1483c:	mov	r2, r9
   14840:	mov	r1, r8
   14844:	str	r0, [fp, #4]
   14848:	str	lr, [sp, #8]
   1484c:	ldr	lr, [sp, #32]
   14850:	str	r5, [sp, #4]
   14854:	str	ip, [sp, #16]
   14858:	str	r4, [sp, #12]
   1485c:	str	lr, [sp]
   14860:	mov	r6, r0
   14864:	bl	12530 <__assert_fail@plt+0x16a8>
   14868:	ldr	r3, [sp, #24]
   1486c:	mov	r0, r6
   14870:	str	r3, [r7]
   14874:	add	sp, sp, #132	; 0x84
   14878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1487c:	mov	r3, #8
   14880:	sub	r2, r4, r2
   14884:	add	r1, sp, #80	; 0x50
   14888:	str	r3, [sp]
   1488c:	add	r2, r2, #1
   14890:	mvn	r3, #-2147483648	; 0x80000000
   14894:	bl	17028 <__assert_fail@plt+0x61a0>
   14898:	mov	r5, r0
   1489c:	ldm	r8, {r0, r1}
   148a0:	str	r5, [r6]
   148a4:	stm	r5, {r0, r1}
   148a8:	b	14788 <__assert_fail@plt+0x3900>
   148ac:	bl	10e70 <abort@plt>
   148b0:	strdeq	r9, [r2], -r0
   148b4:	ldrdeq	r9, [r2], -r0
   148b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148bc:	sub	sp, sp, #124	; 0x7c
   148c0:	mov	r4, r0
   148c4:	mov	r9, r1
   148c8:	add	r0, sp, #72	; 0x48
   148cc:	mov	r2, #48	; 0x30
   148d0:	mov	r1, #0
   148d4:	bl	10dbc <memset@plt>
   148d8:	cmp	r4, #10
   148dc:	beq	14a68 <__assert_fail@plt+0x3be0>
   148e0:	add	lr, sp, #72	; 0x48
   148e4:	str	r4, [sp, #72]	; 0x48
   148e8:	ldm	lr!, {r0, r1, r2, r3}
   148ec:	add	ip, sp, #24
   148f0:	ldr	r5, [pc, #372]	; 14a6c <__assert_fail@plt+0x3be4>
   148f4:	stmia	ip!, {r0, r1, r2, r3}
   148f8:	ldm	lr!, {r0, r1, r2, r3}
   148fc:	stmia	ip!, {r0, r1, r2, r3}
   14900:	ldm	lr, {r0, r1, r2, r3}
   14904:	stm	ip, {r0, r1, r2, r3}
   14908:	bl	10da4 <__errno_location@plt>
   1490c:	ldr	r2, [r5, #4]
   14910:	ldr	r4, [r5]
   14914:	cmp	r2, #0
   14918:	mov	r7, r0
   1491c:	ldr	fp, [r0]
   14920:	bgt	1497c <__assert_fail@plt+0x3af4>
   14924:	add	r6, r5, #8
   14928:	cmp	r4, r6
   1492c:	str	r2, [sp, #72]	; 0x48
   14930:	beq	14a38 <__assert_fail@plt+0x3bb0>
   14934:	mov	r3, #8
   14938:	mov	r0, r4
   1493c:	str	r3, [sp]
   14940:	rsb	r2, r2, #1
   14944:	add	r1, sp, #72	; 0x48
   14948:	mvn	r3, #-2147483648	; 0x80000000
   1494c:	bl	17028 <__assert_fail@plt+0x61a0>
   14950:	mov	r4, r0
   14954:	str	r0, [r5]
   14958:	ldr	r0, [r5, #4]
   1495c:	ldr	r2, [sp, #72]	; 0x48
   14960:	mov	r1, #0
   14964:	sub	r2, r2, r0
   14968:	add	r0, r4, r0, lsl #3
   1496c:	lsl	r2, r2, #3
   14970:	bl	10dbc <memset@plt>
   14974:	ldr	r3, [sp, #72]	; 0x48
   14978:	str	r3, [r5, #4]
   1497c:	ldr	r6, [sp, #28]
   14980:	ldr	r8, [r4]
   14984:	ldr	r5, [r4, #4]
   14988:	ldr	r2, [sp, #64]	; 0x40
   1498c:	ldr	r3, [sp, #24]
   14990:	ldr	ip, [sp, #68]	; 0x44
   14994:	orr	r6, r6, #1
   14998:	add	sl, sp, #32
   1499c:	str	r2, [sp, #12]
   149a0:	str	r3, [sp]
   149a4:	str	r6, [sp, #4]
   149a8:	mov	r1, r8
   149ac:	mov	r0, r5
   149b0:	str	ip, [sp, #16]
   149b4:	str	sl, [sp, #8]
   149b8:	mvn	r3, #0
   149bc:	mov	r2, r9
   149c0:	bl	12530 <__assert_fail@plt+0x16a8>
   149c4:	cmp	r8, r0
   149c8:	bhi	14a28 <__assert_fail@plt+0x3ba0>
   149cc:	ldr	r3, [pc, #156]	; 14a70 <__assert_fail@plt+0x3be8>
   149d0:	add	r8, r0, #1
   149d4:	cmp	r5, r3
   149d8:	str	r8, [r4]
   149dc:	beq	149e8 <__assert_fail@plt+0x3b60>
   149e0:	mov	r0, r5
   149e4:	bl	12264 <__assert_fail@plt+0x13dc>
   149e8:	mov	r0, r8
   149ec:	bl	16e0c <__assert_fail@plt+0x5f84>
   149f0:	ldr	lr, [sp, #68]	; 0x44
   149f4:	ldr	r3, [sp, #24]
   149f8:	ldr	ip, [sp, #64]	; 0x40
   149fc:	mov	r2, r9
   14a00:	mov	r1, r8
   14a04:	str	r0, [r4, #4]
   14a08:	str	r3, [sp]
   14a0c:	str	sl, [sp, #8]
   14a10:	str	r6, [sp, #4]
   14a14:	str	lr, [sp, #16]
   14a18:	str	ip, [sp, #12]
   14a1c:	mvn	r3, #0
   14a20:	mov	r5, r0
   14a24:	bl	12530 <__assert_fail@plt+0x16a8>
   14a28:	mov	r0, r5
   14a2c:	str	fp, [r7]
   14a30:	add	sp, sp, #124	; 0x7c
   14a34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a38:	mov	r3, #8
   14a3c:	add	r1, sp, #72	; 0x48
   14a40:	str	r3, [sp]
   14a44:	rsb	r2, r2, #1
   14a48:	mvn	r3, #-2147483648	; 0x80000000
   14a4c:	mov	r0, #0
   14a50:	bl	17028 <__assert_fail@plt+0x61a0>
   14a54:	mov	r4, r0
   14a58:	ldm	r6, {r0, r1}
   14a5c:	str	r4, [r5]
   14a60:	stm	r4, {r0, r1}
   14a64:	b	14958 <__assert_fail@plt+0x3ad0>
   14a68:	bl	10e70 <abort@plt>
   14a6c:	strdeq	r9, [r2], -r0
   14a70:	ldrdeq	r9, [r2], -r0
   14a74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a78:	sub	sp, sp, #132	; 0x84
   14a7c:	mov	r4, r0
   14a80:	mov	r9, r1
   14a84:	mov	sl, r2
   14a88:	add	r0, sp, #80	; 0x50
   14a8c:	mov	r2, #48	; 0x30
   14a90:	mov	r1, #0
   14a94:	bl	10dbc <memset@plt>
   14a98:	cmp	r4, #10
   14a9c:	beq	14c30 <__assert_fail@plt+0x3da8>
   14aa0:	add	lr, sp, #80	; 0x50
   14aa4:	str	r4, [sp, #80]	; 0x50
   14aa8:	ldm	lr!, {r0, r1, r2, r3}
   14aac:	add	ip, sp, #32
   14ab0:	ldr	r5, [pc, #380]	; 14c34 <__assert_fail@plt+0x3dac>
   14ab4:	stmia	ip!, {r0, r1, r2, r3}
   14ab8:	ldm	lr!, {r0, r1, r2, r3}
   14abc:	stmia	ip!, {r0, r1, r2, r3}
   14ac0:	ldm	lr, {r0, r1, r2, r3}
   14ac4:	stm	ip, {r0, r1, r2, r3}
   14ac8:	bl	10da4 <__errno_location@plt>
   14acc:	ldr	r2, [r5, #4]
   14ad0:	ldr	r4, [r5]
   14ad4:	cmp	r2, #0
   14ad8:	ldr	r3, [r0]
   14adc:	mov	r7, r0
   14ae0:	str	r3, [sp, #28]
   14ae4:	bgt	14b40 <__assert_fail@plt+0x3cb8>
   14ae8:	add	r6, r5, #8
   14aec:	cmp	r4, r6
   14af0:	str	r2, [sp, #80]	; 0x50
   14af4:	beq	14c00 <__assert_fail@plt+0x3d78>
   14af8:	mov	r3, #8
   14afc:	mov	r0, r4
   14b00:	str	r3, [sp]
   14b04:	rsb	r2, r2, #1
   14b08:	add	r1, sp, #80	; 0x50
   14b0c:	mvn	r3, #-2147483648	; 0x80000000
   14b10:	bl	17028 <__assert_fail@plt+0x61a0>
   14b14:	mov	r4, r0
   14b18:	str	r0, [r5]
   14b1c:	ldr	r0, [r5, #4]
   14b20:	ldr	r2, [sp, #80]	; 0x50
   14b24:	mov	r1, #0
   14b28:	sub	r2, r2, r0
   14b2c:	add	r0, r4, r0, lsl #3
   14b30:	lsl	r2, r2, #3
   14b34:	bl	10dbc <memset@plt>
   14b38:	ldr	r3, [sp, #80]	; 0x50
   14b3c:	str	r3, [r5, #4]
   14b40:	ldr	r6, [sp, #36]	; 0x24
   14b44:	ldr	r8, [r4]
   14b48:	ldr	r5, [r4, #4]
   14b4c:	ldr	r2, [sp, #72]	; 0x48
   14b50:	ldr	r3, [sp, #32]
   14b54:	ldr	ip, [sp, #76]	; 0x4c
   14b58:	orr	r6, r6, #1
   14b5c:	add	fp, sp, #40	; 0x28
   14b60:	str	r2, [sp, #12]
   14b64:	str	r3, [sp]
   14b68:	str	r6, [sp, #4]
   14b6c:	mov	r1, r8
   14b70:	mov	r0, r5
   14b74:	str	ip, [sp, #16]
   14b78:	str	fp, [sp, #8]
   14b7c:	mov	r3, sl
   14b80:	mov	r2, r9
   14b84:	bl	12530 <__assert_fail@plt+0x16a8>
   14b88:	cmp	r8, r0
   14b8c:	bhi	14bec <__assert_fail@plt+0x3d64>
   14b90:	ldr	r3, [pc, #160]	; 14c38 <__assert_fail@plt+0x3db0>
   14b94:	add	r8, r0, #1
   14b98:	cmp	r5, r3
   14b9c:	str	r8, [r4]
   14ba0:	beq	14bac <__assert_fail@plt+0x3d24>
   14ba4:	mov	r0, r5
   14ba8:	bl	12264 <__assert_fail@plt+0x13dc>
   14bac:	mov	r0, r8
   14bb0:	bl	16e0c <__assert_fail@plt+0x5f84>
   14bb4:	ldr	ip, [sp, #76]	; 0x4c
   14bb8:	ldr	lr, [sp, #32]
   14bbc:	mov	r3, sl
   14bc0:	mov	r2, r9
   14bc4:	mov	r1, r8
   14bc8:	str	r0, [r4, #4]
   14bcc:	ldr	r4, [sp, #72]	; 0x48
   14bd0:	str	fp, [sp, #8]
   14bd4:	str	r6, [sp, #4]
   14bd8:	str	ip, [sp, #16]
   14bdc:	str	r4, [sp, #12]
   14be0:	str	lr, [sp]
   14be4:	mov	r5, r0
   14be8:	bl	12530 <__assert_fail@plt+0x16a8>
   14bec:	ldr	r3, [sp, #28]
   14bf0:	mov	r0, r5
   14bf4:	str	r3, [r7]
   14bf8:	add	sp, sp, #132	; 0x84
   14bfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c00:	mov	r3, #8
   14c04:	add	r1, sp, #80	; 0x50
   14c08:	str	r3, [sp]
   14c0c:	rsb	r2, r2, #1
   14c10:	mvn	r3, #-2147483648	; 0x80000000
   14c14:	mov	r0, #0
   14c18:	bl	17028 <__assert_fail@plt+0x61a0>
   14c1c:	mov	r4, r0
   14c20:	ldm	r6, {r0, r1}
   14c24:	str	r4, [r5]
   14c28:	stm	r4, {r0, r1}
   14c2c:	b	14b1c <__assert_fail@plt+0x3c94>
   14c30:	bl	10e70 <abort@plt>
   14c34:	strdeq	r9, [r2], -r0
   14c38:	ldrdeq	r9, [r2], -r0
   14c3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c40:	mov	r4, r2
   14c44:	ldr	lr, [pc, #432]	; 14dfc <__assert_fail@plt+0x3f74>
   14c48:	mov	sl, r0
   14c4c:	mov	fp, r1
   14c50:	ldm	lr!, {r0, r1, r2, r3}
   14c54:	sub	sp, sp, #92	; 0x5c
   14c58:	add	ip, sp, #40	; 0x28
   14c5c:	lsr	r7, r4, #5
   14c60:	stmia	ip!, {r0, r1, r2, r3}
   14c64:	add	r6, sp, #48	; 0x30
   14c68:	ldm	lr!, {r0, r1, r2, r3}
   14c6c:	and	r4, r4, #31
   14c70:	ldr	r5, [pc, #392]	; 14e00 <__assert_fail@plt+0x3f78>
   14c74:	stmia	ip!, {r0, r1, r2, r3}
   14c78:	ldm	lr, {r0, r1, r2, r3}
   14c7c:	stm	ip, {r0, r1, r2, r3}
   14c80:	ldr	r2, [r6, r7, lsl #2]
   14c84:	lsr	r3, r2, r4
   14c88:	eor	r3, r3, #1
   14c8c:	and	r3, r3, #1
   14c90:	eor	r4, r2, r3, lsl r4
   14c94:	str	r4, [r6, r7, lsl #2]
   14c98:	bl	10da4 <__errno_location@plt>
   14c9c:	ldr	r2, [r5, #4]
   14ca0:	ldr	r4, [r5]
   14ca4:	cmp	r2, #0
   14ca8:	ldr	r3, [r0]
   14cac:	mov	r8, r0
   14cb0:	str	r3, [sp, #28]
   14cb4:	bgt	14d10 <__assert_fail@plt+0x3e88>
   14cb8:	add	r7, r5, #8
   14cbc:	cmp	r4, r7
   14cc0:	str	r2, [sp, #36]	; 0x24
   14cc4:	beq	14dcc <__assert_fail@plt+0x3f44>
   14cc8:	mov	r3, #8
   14ccc:	mov	r0, r4
   14cd0:	str	r3, [sp]
   14cd4:	rsb	r2, r2, #1
   14cd8:	mvn	r3, #-2147483648	; 0x80000000
   14cdc:	add	r1, sp, #36	; 0x24
   14ce0:	bl	17028 <__assert_fail@plt+0x61a0>
   14ce4:	mov	r4, r0
   14ce8:	str	r0, [r5]
   14cec:	ldr	r0, [r5, #4]
   14cf0:	ldr	r2, [sp, #36]	; 0x24
   14cf4:	mov	r1, #0
   14cf8:	sub	r2, r2, r0
   14cfc:	add	r0, r4, r0, lsl #3
   14d00:	lsl	r2, r2, #3
   14d04:	bl	10dbc <memset@plt>
   14d08:	ldr	r3, [sp, #36]	; 0x24
   14d0c:	str	r3, [r5, #4]
   14d10:	ldr	r7, [sp, #44]	; 0x2c
   14d14:	ldr	r9, [r4]
   14d18:	ldr	r5, [r4, #4]
   14d1c:	ldr	r2, [sp, #80]	; 0x50
   14d20:	ldr	r3, [sp, #40]	; 0x28
   14d24:	ldr	ip, [sp, #84]	; 0x54
   14d28:	orr	r7, r7, #1
   14d2c:	str	r2, [sp, #12]
   14d30:	str	r3, [sp]
   14d34:	str	r7, [sp, #4]
   14d38:	str	r6, [sp, #8]
   14d3c:	mov	r1, r9
   14d40:	mov	r0, r5
   14d44:	str	ip, [sp, #16]
   14d48:	mov	r3, fp
   14d4c:	mov	r2, sl
   14d50:	bl	12530 <__assert_fail@plt+0x16a8>
   14d54:	cmp	r9, r0
   14d58:	bhi	14db8 <__assert_fail@plt+0x3f30>
   14d5c:	ldr	r3, [pc, #160]	; 14e04 <__assert_fail@plt+0x3f7c>
   14d60:	add	r9, r0, #1
   14d64:	cmp	r5, r3
   14d68:	str	r9, [r4]
   14d6c:	beq	14d78 <__assert_fail@plt+0x3ef0>
   14d70:	mov	r0, r5
   14d74:	bl	12264 <__assert_fail@plt+0x13dc>
   14d78:	mov	r0, r9
   14d7c:	bl	16e0c <__assert_fail@plt+0x5f84>
   14d80:	ldr	ip, [sp, #84]	; 0x54
   14d84:	ldr	lr, [sp, #40]	; 0x28
   14d88:	mov	r3, fp
   14d8c:	mov	r2, sl
   14d90:	mov	r1, r9
   14d94:	str	r0, [r4, #4]
   14d98:	ldr	r4, [sp, #80]	; 0x50
   14d9c:	str	r6, [sp, #8]
   14da0:	str	r7, [sp, #4]
   14da4:	str	ip, [sp, #16]
   14da8:	str	r4, [sp, #12]
   14dac:	str	lr, [sp]
   14db0:	mov	r5, r0
   14db4:	bl	12530 <__assert_fail@plt+0x16a8>
   14db8:	ldr	r3, [sp, #28]
   14dbc:	mov	r0, r5
   14dc0:	str	r3, [r8]
   14dc4:	add	sp, sp, #92	; 0x5c
   14dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14dcc:	mov	r3, #8
   14dd0:	str	r3, [sp]
   14dd4:	add	r1, sp, #36	; 0x24
   14dd8:	rsb	r2, r2, #1
   14ddc:	mvn	r3, #-2147483648	; 0x80000000
   14de0:	mov	r0, #0
   14de4:	bl	17028 <__assert_fail@plt+0x61a0>
   14de8:	mov	r4, r0
   14dec:	ldm	r7, {r0, r1}
   14df0:	str	r4, [r5]
   14df4:	stm	r4, {r0, r1}
   14df8:	b	14cec <__assert_fail@plt+0x3e64>
   14dfc:	andeq	r9, r2, r0, lsr #3
   14e00:	strdeq	r9, [r2], -r0
   14e04:	ldrdeq	r9, [r2], -r0
   14e08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e0c:	mov	r4, r1
   14e10:	ldr	lr, [pc, #420]	; 14fbc <__assert_fail@plt+0x4134>
   14e14:	mov	r6, r0
   14e18:	sub	sp, sp, #84	; 0x54
   14e1c:	ldm	lr!, {r0, r1, r2, r3}
   14e20:	add	ip, sp, #32
   14e24:	lsr	r8, r4, #5
   14e28:	add	r5, sp, #40	; 0x28
   14e2c:	stmia	ip!, {r0, r1, r2, r3}
   14e30:	and	r4, r4, #31
   14e34:	ldm	lr!, {r0, r1, r2, r3}
   14e38:	ldr	r7, [pc, #384]	; 14fc0 <__assert_fail@plt+0x4138>
   14e3c:	stmia	ip!, {r0, r1, r2, r3}
   14e40:	ldm	lr, {r0, r1, r2, r3}
   14e44:	stm	ip, {r0, r1, r2, r3}
   14e48:	ldr	r2, [r5, r8, lsl #2]
   14e4c:	lsr	r3, r2, r4
   14e50:	eor	r3, r3, #1
   14e54:	and	r3, r3, #1
   14e58:	eor	r4, r2, r3, lsl r4
   14e5c:	str	r4, [r5, r8, lsl #2]
   14e60:	bl	10da4 <__errno_location@plt>
   14e64:	ldr	r2, [r7, #4]
   14e68:	ldr	r4, [r7]
   14e6c:	cmp	r2, #0
   14e70:	mov	r9, r0
   14e74:	ldr	sl, [r0]
   14e78:	bgt	14ed4 <__assert_fail@plt+0x404c>
   14e7c:	add	r8, r7, #8
   14e80:	cmp	r4, r8
   14e84:	str	r2, [sp, #28]
   14e88:	beq	14f8c <__assert_fail@plt+0x4104>
   14e8c:	mov	r3, #8
   14e90:	mov	r0, r4
   14e94:	str	r3, [sp]
   14e98:	rsb	r2, r2, #1
   14e9c:	mvn	r3, #-2147483648	; 0x80000000
   14ea0:	add	r1, sp, #28
   14ea4:	bl	17028 <__assert_fail@plt+0x61a0>
   14ea8:	mov	r4, r0
   14eac:	str	r0, [r7]
   14eb0:	ldr	r0, [r7, #4]
   14eb4:	ldr	r2, [sp, #28]
   14eb8:	mov	r1, #0
   14ebc:	sub	r2, r2, r0
   14ec0:	add	r0, r4, r0, lsl #3
   14ec4:	lsl	r2, r2, #3
   14ec8:	bl	10dbc <memset@plt>
   14ecc:	ldr	r3, [sp, #28]
   14ed0:	str	r3, [r7, #4]
   14ed4:	ldr	r8, [sp, #36]	; 0x24
   14ed8:	ldr	fp, [r4]
   14edc:	ldr	r7, [r4, #4]
   14ee0:	ldr	r2, [sp, #72]	; 0x48
   14ee4:	ldr	r3, [sp, #32]
   14ee8:	ldr	ip, [sp, #76]	; 0x4c
   14eec:	orr	r8, r8, #1
   14ef0:	str	r2, [sp, #12]
   14ef4:	str	r3, [sp]
   14ef8:	str	r8, [sp, #4]
   14efc:	str	r5, [sp, #8]
   14f00:	mov	r1, fp
   14f04:	mov	r0, r7
   14f08:	str	ip, [sp, #16]
   14f0c:	mvn	r3, #0
   14f10:	mov	r2, r6
   14f14:	bl	12530 <__assert_fail@plt+0x16a8>
   14f18:	cmp	fp, r0
   14f1c:	bhi	14f7c <__assert_fail@plt+0x40f4>
   14f20:	ldr	r3, [pc, #156]	; 14fc4 <__assert_fail@plt+0x413c>
   14f24:	add	fp, r0, #1
   14f28:	cmp	r7, r3
   14f2c:	str	fp, [r4]
   14f30:	beq	14f3c <__assert_fail@plt+0x40b4>
   14f34:	mov	r0, r7
   14f38:	bl	12264 <__assert_fail@plt+0x13dc>
   14f3c:	mov	r0, fp
   14f40:	bl	16e0c <__assert_fail@plt+0x5f84>
   14f44:	ldr	lr, [sp, #76]	; 0x4c
   14f48:	ldr	r3, [sp, #32]
   14f4c:	ldr	ip, [sp, #72]	; 0x48
   14f50:	mov	r2, r6
   14f54:	mov	r1, fp
   14f58:	str	r0, [r4, #4]
   14f5c:	str	r3, [sp]
   14f60:	str	r5, [sp, #8]
   14f64:	str	r8, [sp, #4]
   14f68:	str	lr, [sp, #16]
   14f6c:	str	ip, [sp, #12]
   14f70:	mvn	r3, #0
   14f74:	mov	r7, r0
   14f78:	bl	12530 <__assert_fail@plt+0x16a8>
   14f7c:	mov	r0, r7
   14f80:	str	sl, [r9]
   14f84:	add	sp, sp, #84	; 0x54
   14f88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f8c:	mov	r3, #8
   14f90:	str	r3, [sp]
   14f94:	add	r1, sp, #28
   14f98:	rsb	r2, r2, #1
   14f9c:	mvn	r3, #-2147483648	; 0x80000000
   14fa0:	mov	r0, #0
   14fa4:	bl	17028 <__assert_fail@plt+0x61a0>
   14fa8:	mov	r4, r0
   14fac:	ldm	r8, {r0, r1}
   14fb0:	str	r4, [r7]
   14fb4:	stm	r4, {r0, r1}
   14fb8:	b	14eb0 <__assert_fail@plt+0x4028>
   14fbc:	andeq	r9, r2, r0, lsr #3
   14fc0:	strdeq	r9, [r2], -r0
   14fc4:	ldrdeq	r9, [r2], -r0
   14fc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fcc:	mov	r6, r0
   14fd0:	ldr	lr, [pc, #404]	; 1516c <__assert_fail@plt+0x42e4>
   14fd4:	sub	sp, sp, #84	; 0x54
   14fd8:	add	ip, sp, #32
   14fdc:	ldm	lr!, {r0, r1, r2, r3}
   14fe0:	ldr	r5, [pc, #392]	; 15170 <__assert_fail@plt+0x42e8>
   14fe4:	stmia	ip!, {r0, r1, r2, r3}
   14fe8:	ldm	lr!, {r0, r1, r2, r3}
   14fec:	ldr	r4, [sp, #44]	; 0x2c
   14ff0:	stmia	ip!, {r0, r1, r2, r3}
   14ff4:	ldm	lr, {r0, r1, r2, r3}
   14ff8:	mvn	lr, r4
   14ffc:	and	lr, lr, #67108864	; 0x4000000
   15000:	eor	lr, lr, r4
   15004:	stm	ip, {r0, r1, r2, r3}
   15008:	str	lr, [sp, #44]	; 0x2c
   1500c:	bl	10da4 <__errno_location@plt>
   15010:	ldr	r2, [r5, #4]
   15014:	ldr	r4, [r5]
   15018:	cmp	r2, #0
   1501c:	mov	r8, r0
   15020:	ldr	sl, [r0]
   15024:	bgt	15080 <__assert_fail@plt+0x41f8>
   15028:	add	r7, r5, #8
   1502c:	cmp	r4, r7
   15030:	str	r2, [sp, #28]
   15034:	beq	1513c <__assert_fail@plt+0x42b4>
   15038:	mov	r3, #8
   1503c:	mov	r0, r4
   15040:	str	r3, [sp]
   15044:	rsb	r2, r2, #1
   15048:	mvn	r3, #-2147483648	; 0x80000000
   1504c:	add	r1, sp, #28
   15050:	bl	17028 <__assert_fail@plt+0x61a0>
   15054:	mov	r4, r0
   15058:	str	r0, [r5]
   1505c:	ldr	r0, [r5, #4]
   15060:	ldr	r2, [sp, #28]
   15064:	mov	r1, #0
   15068:	sub	r2, r2, r0
   1506c:	add	r0, r4, r0, lsl #3
   15070:	lsl	r2, r2, #3
   15074:	bl	10dbc <memset@plt>
   15078:	ldr	r3, [sp, #28]
   1507c:	str	r3, [r5, #4]
   15080:	ldr	r7, [sp, #36]	; 0x24
   15084:	ldr	r9, [r4]
   15088:	ldr	r5, [r4, #4]
   1508c:	ldr	r2, [sp, #72]	; 0x48
   15090:	ldr	r3, [sp, #32]
   15094:	ldr	ip, [sp, #76]	; 0x4c
   15098:	orr	r7, r7, #1
   1509c:	add	fp, sp, #40	; 0x28
   150a0:	str	r2, [sp, #12]
   150a4:	str	r3, [sp]
   150a8:	str	r7, [sp, #4]
   150ac:	mov	r1, r9
   150b0:	mov	r0, r5
   150b4:	str	ip, [sp, #16]
   150b8:	str	fp, [sp, #8]
   150bc:	mvn	r3, #0
   150c0:	mov	r2, r6
   150c4:	bl	12530 <__assert_fail@plt+0x16a8>
   150c8:	cmp	r9, r0
   150cc:	bhi	1512c <__assert_fail@plt+0x42a4>
   150d0:	ldr	r3, [pc, #156]	; 15174 <__assert_fail@plt+0x42ec>
   150d4:	add	r9, r0, #1
   150d8:	cmp	r5, r3
   150dc:	str	r9, [r4]
   150e0:	beq	150ec <__assert_fail@plt+0x4264>
   150e4:	mov	r0, r5
   150e8:	bl	12264 <__assert_fail@plt+0x13dc>
   150ec:	mov	r0, r9
   150f0:	bl	16e0c <__assert_fail@plt+0x5f84>
   150f4:	ldr	lr, [sp, #76]	; 0x4c
   150f8:	ldr	r3, [sp, #32]
   150fc:	ldr	ip, [sp, #72]	; 0x48
   15100:	mov	r2, r6
   15104:	mov	r1, r9
   15108:	str	r0, [r4, #4]
   1510c:	str	r3, [sp]
   15110:	str	fp, [sp, #8]
   15114:	str	r7, [sp, #4]
   15118:	str	lr, [sp, #16]
   1511c:	str	ip, [sp, #12]
   15120:	mvn	r3, #0
   15124:	mov	r5, r0
   15128:	bl	12530 <__assert_fail@plt+0x16a8>
   1512c:	mov	r0, r5
   15130:	str	sl, [r8]
   15134:	add	sp, sp, #84	; 0x54
   15138:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1513c:	mov	r3, #8
   15140:	str	r3, [sp]
   15144:	add	r1, sp, #28
   15148:	rsb	r2, r2, #1
   1514c:	mvn	r3, #-2147483648	; 0x80000000
   15150:	mov	r0, #0
   15154:	bl	17028 <__assert_fail@plt+0x61a0>
   15158:	mov	r4, r0
   1515c:	ldm	r7, {r0, r1}
   15160:	str	r4, [r5]
   15164:	stm	r4, {r0, r1}
   15168:	b	1505c <__assert_fail@plt+0x41d4>
   1516c:	andeq	r9, r2, r0, lsr #3
   15170:	strdeq	r9, [r2], -r0
   15174:	ldrdeq	r9, [r2], -r0
   15178:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1517c:	mov	r9, r0
   15180:	ldr	lr, [pc, #416]	; 15328 <__assert_fail@plt+0x44a0>
   15184:	mov	sl, r1
   15188:	sub	sp, sp, #92	; 0x5c
   1518c:	ldm	lr!, {r0, r1, r2, r3}
   15190:	add	ip, sp, #40	; 0x28
   15194:	ldr	r5, [pc, #400]	; 1532c <__assert_fail@plt+0x44a4>
   15198:	stmia	ip!, {r0, r1, r2, r3}
   1519c:	ldm	lr!, {r0, r1, r2, r3}
   151a0:	ldr	r4, [sp, #52]	; 0x34
   151a4:	stmia	ip!, {r0, r1, r2, r3}
   151a8:	ldm	lr, {r0, r1, r2, r3}
   151ac:	mvn	lr, r4
   151b0:	and	lr, lr, #67108864	; 0x4000000
   151b4:	eor	lr, lr, r4
   151b8:	stm	ip, {r0, r1, r2, r3}
   151bc:	str	lr, [sp, #52]	; 0x34
   151c0:	bl	10da4 <__errno_location@plt>
   151c4:	ldr	r2, [r5, #4]
   151c8:	ldr	r4, [r5]
   151cc:	cmp	r2, #0
   151d0:	ldr	r3, [r0]
   151d4:	mov	r7, r0
   151d8:	str	r3, [sp, #28]
   151dc:	bgt	15238 <__assert_fail@plt+0x43b0>
   151e0:	add	r6, r5, #8
   151e4:	cmp	r4, r6
   151e8:	str	r2, [sp, #36]	; 0x24
   151ec:	beq	152f8 <__assert_fail@plt+0x4470>
   151f0:	mov	r3, #8
   151f4:	mov	r0, r4
   151f8:	str	r3, [sp]
   151fc:	rsb	r2, r2, #1
   15200:	mvn	r3, #-2147483648	; 0x80000000
   15204:	add	r1, sp, #36	; 0x24
   15208:	bl	17028 <__assert_fail@plt+0x61a0>
   1520c:	mov	r4, r0
   15210:	str	r0, [r5]
   15214:	ldr	r0, [r5, #4]
   15218:	ldr	r2, [sp, #36]	; 0x24
   1521c:	mov	r1, #0
   15220:	sub	r2, r2, r0
   15224:	add	r0, r4, r0, lsl #3
   15228:	lsl	r2, r2, #3
   1522c:	bl	10dbc <memset@plt>
   15230:	ldr	r3, [sp, #36]	; 0x24
   15234:	str	r3, [r5, #4]
   15238:	ldr	r6, [sp, #44]	; 0x2c
   1523c:	ldr	r8, [r4]
   15240:	ldr	r5, [r4, #4]
   15244:	ldr	r2, [sp, #80]	; 0x50
   15248:	ldr	r3, [sp, #40]	; 0x28
   1524c:	ldr	ip, [sp, #84]	; 0x54
   15250:	orr	r6, r6, #1
   15254:	add	fp, sp, #48	; 0x30
   15258:	str	r2, [sp, #12]
   1525c:	str	r3, [sp]
   15260:	str	r6, [sp, #4]
   15264:	mov	r1, r8
   15268:	mov	r0, r5
   1526c:	str	ip, [sp, #16]
   15270:	str	fp, [sp, #8]
   15274:	mov	r3, sl
   15278:	mov	r2, r9
   1527c:	bl	12530 <__assert_fail@plt+0x16a8>
   15280:	cmp	r8, r0
   15284:	bhi	152e4 <__assert_fail@plt+0x445c>
   15288:	ldr	r3, [pc, #160]	; 15330 <__assert_fail@plt+0x44a8>
   1528c:	add	r8, r0, #1
   15290:	cmp	r5, r3
   15294:	str	r8, [r4]
   15298:	beq	152a4 <__assert_fail@plt+0x441c>
   1529c:	mov	r0, r5
   152a0:	bl	12264 <__assert_fail@plt+0x13dc>
   152a4:	mov	r0, r8
   152a8:	bl	16e0c <__assert_fail@plt+0x5f84>
   152ac:	ldr	ip, [sp, #84]	; 0x54
   152b0:	ldr	lr, [sp, #40]	; 0x28
   152b4:	mov	r3, sl
   152b8:	mov	r2, r9
   152bc:	mov	r1, r8
   152c0:	str	r0, [r4, #4]
   152c4:	ldr	r4, [sp, #80]	; 0x50
   152c8:	str	fp, [sp, #8]
   152cc:	str	r6, [sp, #4]
   152d0:	str	ip, [sp, #16]
   152d4:	str	r4, [sp, #12]
   152d8:	str	lr, [sp]
   152dc:	mov	r5, r0
   152e0:	bl	12530 <__assert_fail@plt+0x16a8>
   152e4:	ldr	r3, [sp, #28]
   152e8:	mov	r0, r5
   152ec:	str	r3, [r7]
   152f0:	add	sp, sp, #92	; 0x5c
   152f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152f8:	mov	r3, #8
   152fc:	str	r3, [sp]
   15300:	add	r1, sp, #36	; 0x24
   15304:	rsb	r2, r2, #1
   15308:	mvn	r3, #-2147483648	; 0x80000000
   1530c:	mov	r0, #0
   15310:	bl	17028 <__assert_fail@plt+0x61a0>
   15314:	mov	r4, r0
   15318:	ldm	r6, {r0, r1}
   1531c:	str	r4, [r5]
   15320:	stm	r4, {r0, r1}
   15324:	b	15214 <__assert_fail@plt+0x438c>
   15328:	andeq	r9, r2, r0, lsr #3
   1532c:	strdeq	r9, [r2], -r0
   15330:	ldrdeq	r9, [r2], -r0
   15334:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15338:	sub	sp, sp, #180	; 0xb4
   1533c:	mov	r6, r1
   15340:	mov	r4, r0
   15344:	mov	r9, r2
   15348:	add	r0, sp, #80	; 0x50
   1534c:	mov	r2, #48	; 0x30
   15350:	mov	r1, #0
   15354:	bl	10dbc <memset@plt>
   15358:	cmp	r6, #10
   1535c:	beq	1553c <__assert_fail@plt+0x46b4>
   15360:	add	r5, sp, #80	; 0x50
   15364:	str	r6, [sp, #80]	; 0x50
   15368:	ldm	r5!, {r0, r1, r2, r3}
   1536c:	add	ip, sp, #128	; 0x80
   15370:	mov	r7, ip
   15374:	add	lr, sp, #32
   15378:	stmia	ip!, {r0, r1, r2, r3}
   1537c:	mov	r8, #67108864	; 0x4000000
   15380:	ldm	r5!, {r0, r1, r2, r3}
   15384:	ldr	r6, [pc, #436]	; 15540 <__assert_fail@plt+0x46b8>
   15388:	stmia	ip!, {r0, r1, r2, r3}
   1538c:	ldm	r5, {r0, r1, r2, r3}
   15390:	stm	ip, {r0, r1, r2, r3}
   15394:	ldm	r7!, {r0, r1, r2, r3}
   15398:	stmia	lr!, {r0, r1, r2, r3}
   1539c:	ldm	r7!, {r0, r1, r2, r3}
   153a0:	str	r8, [sp, #44]	; 0x2c
   153a4:	stmia	lr!, {r0, r1, r2, r3}
   153a8:	ldm	ip, {r0, r1, r2, r3}
   153ac:	stm	lr, {r0, r1, r2, r3}
   153b0:	bl	10da4 <__errno_location@plt>
   153b4:	cmn	r4, #-2147483647	; 0x80000001
   153b8:	ldr	r5, [r6]
   153bc:	mov	r7, r0
   153c0:	movne	r0, #0
   153c4:	moveq	r0, #1
   153c8:	ldr	r3, [r7]
   153cc:	orrs	r0, r0, r4, lsr #31
   153d0:	str	r3, [sp, #24]
   153d4:	bne	1553c <__assert_fail@plt+0x46b4>
   153d8:	ldr	r2, [r6, #4]
   153dc:	cmp	r4, r2
   153e0:	blt	15440 <__assert_fail@plt+0x45b8>
   153e4:	add	r8, r6, #8
   153e8:	cmp	r5, r8
   153ec:	str	r2, [sp, #80]	; 0x50
   153f0:	beq	1550c <__assert_fail@plt+0x4684>
   153f4:	mov	r3, #8
   153f8:	sub	r2, r4, r2
   153fc:	mov	r0, r5
   15400:	str	r3, [sp]
   15404:	add	r2, r2, #1
   15408:	add	r1, sp, #80	; 0x50
   1540c:	mvn	r3, #-2147483648	; 0x80000000
   15410:	bl	17028 <__assert_fail@plt+0x61a0>
   15414:	mov	r5, r0
   15418:	str	r0, [r6]
   1541c:	ldr	r0, [r6, #4]
   15420:	ldr	r2, [sp, #80]	; 0x50
   15424:	mov	r1, #0
   15428:	sub	r2, r2, r0
   1542c:	add	r0, r5, r0, lsl #3
   15430:	lsl	r2, r2, #3
   15434:	bl	10dbc <memset@plt>
   15438:	ldr	r3, [sp, #80]	; 0x50
   1543c:	str	r3, [r6, #4]
   15440:	add	fp, r5, r4, lsl #3
   15444:	ldr	r1, [sp, #36]	; 0x24
   15448:	ldr	r8, [r5, r4, lsl #3]
   1544c:	ldr	r6, [fp, #4]
   15450:	ldr	r2, [sp, #72]	; 0x48
   15454:	ldr	r3, [sp, #32]
   15458:	ldr	ip, [sp, #76]	; 0x4c
   1545c:	orr	r1, r1, #1
   15460:	add	sl, sp, #40	; 0x28
   15464:	str	r1, [sp, #28]
   15468:	str	r1, [sp, #4]
   1546c:	str	r2, [sp, #12]
   15470:	str	r3, [sp]
   15474:	mov	r0, r6
   15478:	mov	r1, r8
   1547c:	str	ip, [sp, #16]
   15480:	str	sl, [sp, #8]
   15484:	mvn	r3, #0
   15488:	mov	r2, r9
   1548c:	bl	12530 <__assert_fail@plt+0x16a8>
   15490:	cmp	r8, r0
   15494:	bhi	154f8 <__assert_fail@plt+0x4670>
   15498:	ldr	r3, [pc, #164]	; 15544 <__assert_fail@plt+0x46bc>
   1549c:	add	r8, r0, #1
   154a0:	cmp	r6, r3
   154a4:	str	r8, [r5, r4, lsl #3]
   154a8:	beq	154b4 <__assert_fail@plt+0x462c>
   154ac:	mov	r0, r6
   154b0:	bl	12264 <__assert_fail@plt+0x13dc>
   154b4:	mov	r0, r8
   154b8:	bl	16e0c <__assert_fail@plt+0x5f84>
   154bc:	ldr	lr, [sp, #76]	; 0x4c
   154c0:	ldr	r3, [sp, #32]
   154c4:	ldr	ip, [sp, #72]	; 0x48
   154c8:	ldr	r4, [sp, #28]
   154cc:	mov	r2, r9
   154d0:	mov	r1, r8
   154d4:	str	r0, [fp, #4]
   154d8:	str	r3, [sp]
   154dc:	str	sl, [sp, #8]
   154e0:	str	r4, [sp, #4]
   154e4:	str	lr, [sp, #16]
   154e8:	str	ip, [sp, #12]
   154ec:	mvn	r3, #0
   154f0:	mov	r6, r0
   154f4:	bl	12530 <__assert_fail@plt+0x16a8>
   154f8:	ldr	r3, [sp, #24]
   154fc:	mov	r0, r6
   15500:	str	r3, [r7]
   15504:	add	sp, sp, #180	; 0xb4
   15508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1550c:	mov	r3, #8
   15510:	sub	r2, r4, r2
   15514:	add	r1, sp, #80	; 0x50
   15518:	str	r3, [sp]
   1551c:	add	r2, r2, #1
   15520:	mvn	r3, #-2147483648	; 0x80000000
   15524:	bl	17028 <__assert_fail@plt+0x61a0>
   15528:	mov	r5, r0
   1552c:	ldm	r8, {r0, r1}
   15530:	str	r5, [r6]
   15534:	stm	r5, {r0, r1}
   15538:	b	1541c <__assert_fail@plt+0x4594>
   1553c:	bl	10e70 <abort@plt>
   15540:	strdeq	r9, [r2], -r0
   15544:	ldrdeq	r9, [r2], -r0
   15548:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1554c:	mov	r7, r1
   15550:	ldr	lr, [pc, #492]	; 15744 <__assert_fail@plt+0x48bc>
   15554:	mov	r8, r2
   15558:	mov	r4, r0
   1555c:	mov	fp, r3
   15560:	ldm	lr!, {r0, r1, r2, r3}
   15564:	sub	sp, sp, #100	; 0x64
   15568:	add	ip, sp, #48	; 0x30
   1556c:	mov	sl, #10
   15570:	stmia	ip!, {r0, r1, r2, r3}
   15574:	cmp	r8, #0
   15578:	cmpne	r7, #0
   1557c:	ldm	lr!, {r0, r1, r2, r3}
   15580:	str	sl, [sp, #48]	; 0x30
   15584:	stmia	ip!, {r0, r1, r2, r3}
   15588:	ldm	lr, {r0, r1, r2, r3}
   1558c:	stm	ip, {r0, r1, r2, r3}
   15590:	beq	15740 <__assert_fail@plt+0x48b8>
   15594:	str	r7, [sp, #88]	; 0x58
   15598:	str	r8, [sp, #92]	; 0x5c
   1559c:	bl	10da4 <__errno_location@plt>
   155a0:	ldr	r6, [pc, #416]	; 15748 <__assert_fail@plt+0x48c0>
   155a4:	cmn	r4, #-2147483647	; 0x80000001
   155a8:	ldr	r5, [r6]
   155ac:	mov	r9, r0
   155b0:	movne	r0, #0
   155b4:	moveq	r0, #1
   155b8:	ldr	r3, [r9]
   155bc:	orrs	r0, r0, r4, lsr #31
   155c0:	str	r3, [sp, #28]
   155c4:	bne	15740 <__assert_fail@plt+0x48b8>
   155c8:	ldr	r2, [r6, #4]
   155cc:	cmp	r4, r2
   155d0:	movlt	r3, sl
   155d4:	blt	15640 <__assert_fail@plt+0x47b8>
   155d8:	add	r7, r6, #8
   155dc:	cmp	r5, r7
   155e0:	str	r2, [sp, #44]	; 0x2c
   155e4:	beq	15710 <__assert_fail@plt+0x4888>
   155e8:	mov	r3, #8
   155ec:	sub	r2, r4, r2
   155f0:	mov	r0, r5
   155f4:	str	r3, [sp]
   155f8:	add	r2, r2, #1
   155fc:	mvn	r3, #-2147483648	; 0x80000000
   15600:	add	r1, sp, #44	; 0x2c
   15604:	bl	17028 <__assert_fail@plt+0x61a0>
   15608:	mov	r5, r0
   1560c:	str	r0, [r6]
   15610:	ldr	r0, [r6, #4]
   15614:	ldr	r2, [sp, #44]	; 0x2c
   15618:	mov	r1, #0
   1561c:	sub	r2, r2, r0
   15620:	add	r0, r5, r0, lsl #3
   15624:	lsl	r2, r2, #3
   15628:	bl	10dbc <memset@plt>
   1562c:	ldr	r3, [sp, #48]	; 0x30
   15630:	ldr	r7, [sp, #88]	; 0x58
   15634:	ldr	r8, [sp, #92]	; 0x5c
   15638:	ldr	r2, [sp, #44]	; 0x2c
   1563c:	str	r2, [r6, #4]
   15640:	add	r2, r5, r4, lsl #3
   15644:	mov	r1, r2
   15648:	str	r2, [sp, #32]
   1564c:	ldr	r2, [sp, #52]	; 0x34
   15650:	ldr	r6, [r1, #4]
   15654:	ldr	sl, [r5, r4, lsl #3]
   15658:	orr	r2, r2, #1
   1565c:	str	r3, [sp]
   15660:	add	r3, sp, #56	; 0x38
   15664:	str	r2, [sp, #36]	; 0x24
   15668:	str	r2, [sp, #4]
   1566c:	str	r3, [sp, #8]
   15670:	mov	r0, r6
   15674:	str	r8, [sp, #16]
   15678:	str	r7, [sp, #12]
   1567c:	mov	r1, sl
   15680:	mvn	r3, #0
   15684:	mov	r2, fp
   15688:	bl	12530 <__assert_fail@plt+0x16a8>
   1568c:	cmp	sl, r0
   15690:	bhi	156fc <__assert_fail@plt+0x4874>
   15694:	ldr	r3, [pc, #176]	; 1574c <__assert_fail@plt+0x48c4>
   15698:	add	r7, r0, #1
   1569c:	cmp	r6, r3
   156a0:	str	r7, [r5, r4, lsl #3]
   156a4:	beq	156b0 <__assert_fail@plt+0x4828>
   156a8:	mov	r0, r6
   156ac:	bl	12264 <__assert_fail@plt+0x13dc>
   156b0:	mov	r0, r7
   156b4:	bl	16e0c <__assert_fail@plt+0x5f84>
   156b8:	ldr	r3, [sp, #32]
   156bc:	ldr	lr, [sp, #92]	; 0x5c
   156c0:	ldr	ip, [sp, #88]	; 0x58
   156c4:	ldr	r4, [sp, #36]	; 0x24
   156c8:	mov	r2, fp
   156cc:	mov	r1, r7
   156d0:	str	r0, [r3, #4]
   156d4:	add	r3, sp, #56	; 0x38
   156d8:	str	r3, [sp, #8]
   156dc:	ldr	r3, [sp, #48]	; 0x30
   156e0:	str	r4, [sp, #4]
   156e4:	str	r3, [sp]
   156e8:	str	lr, [sp, #16]
   156ec:	str	ip, [sp, #12]
   156f0:	mvn	r3, #0
   156f4:	mov	r6, r0
   156f8:	bl	12530 <__assert_fail@plt+0x16a8>
   156fc:	ldr	r3, [sp, #28]
   15700:	mov	r0, r6
   15704:	str	r3, [r9]
   15708:	add	sp, sp, #100	; 0x64
   1570c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15710:	mov	r3, #8
   15714:	sub	r2, r4, r2
   15718:	str	r3, [sp]
   1571c:	add	r1, sp, #44	; 0x2c
   15720:	add	r2, r2, #1
   15724:	mvn	r3, #-2147483648	; 0x80000000
   15728:	bl	17028 <__assert_fail@plt+0x61a0>
   1572c:	mov	r5, r0
   15730:	ldm	r7, {r0, r1}
   15734:	str	r5, [r6]
   15738:	stm	r5, {r0, r1}
   1573c:	b	15610 <__assert_fail@plt+0x4788>
   15740:	bl	10e70 <abort@plt>
   15744:	andeq	r9, r2, r0, lsr #3
   15748:	strdeq	r9, [r2], -r0
   1574c:	ldrdeq	r9, [r2], -r0
   15750:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15754:	mov	r7, r1
   15758:	ldr	lr, [pc, #492]	; 1594c <__assert_fail@plt+0x4ac4>
   1575c:	mov	r8, r2
   15760:	mov	r4, r0
   15764:	mov	fp, r3
   15768:	ldm	lr!, {r0, r1, r2, r3}
   1576c:	sub	sp, sp, #100	; 0x64
   15770:	add	ip, sp, #48	; 0x30
   15774:	mov	sl, #10
   15778:	stmia	ip!, {r0, r1, r2, r3}
   1577c:	cmp	r8, #0
   15780:	cmpne	r7, #0
   15784:	ldm	lr!, {r0, r1, r2, r3}
   15788:	str	sl, [sp, #48]	; 0x30
   1578c:	stmia	ip!, {r0, r1, r2, r3}
   15790:	ldm	lr, {r0, r1, r2, r3}
   15794:	stm	ip, {r0, r1, r2, r3}
   15798:	beq	15948 <__assert_fail@plt+0x4ac0>
   1579c:	str	r7, [sp, #88]	; 0x58
   157a0:	str	r8, [sp, #92]	; 0x5c
   157a4:	bl	10da4 <__errno_location@plt>
   157a8:	ldr	r6, [pc, #416]	; 15950 <__assert_fail@plt+0x4ac8>
   157ac:	cmn	r4, #-2147483647	; 0x80000001
   157b0:	ldr	r5, [r6]
   157b4:	mov	r9, r0
   157b8:	movne	r0, #0
   157bc:	moveq	r0, #1
   157c0:	ldr	r3, [r9]
   157c4:	orrs	r0, r0, r4, lsr #31
   157c8:	str	r3, [sp, #28]
   157cc:	bne	15948 <__assert_fail@plt+0x4ac0>
   157d0:	ldr	r2, [r6, #4]
   157d4:	cmp	r4, r2
   157d8:	movlt	r3, sl
   157dc:	blt	15848 <__assert_fail@plt+0x49c0>
   157e0:	add	r7, r6, #8
   157e4:	cmp	r5, r7
   157e8:	str	r2, [sp, #44]	; 0x2c
   157ec:	beq	15918 <__assert_fail@plt+0x4a90>
   157f0:	mov	r3, #8
   157f4:	sub	r2, r4, r2
   157f8:	mov	r0, r5
   157fc:	str	r3, [sp]
   15800:	add	r2, r2, #1
   15804:	mvn	r3, #-2147483648	; 0x80000000
   15808:	add	r1, sp, #44	; 0x2c
   1580c:	bl	17028 <__assert_fail@plt+0x61a0>
   15810:	mov	r5, r0
   15814:	str	r0, [r6]
   15818:	ldr	r0, [r6, #4]
   1581c:	ldr	r2, [sp, #44]	; 0x2c
   15820:	mov	r1, #0
   15824:	sub	r2, r2, r0
   15828:	add	r0, r5, r0, lsl #3
   1582c:	lsl	r2, r2, #3
   15830:	bl	10dbc <memset@plt>
   15834:	ldr	r3, [sp, #48]	; 0x30
   15838:	ldr	r7, [sp, #88]	; 0x58
   1583c:	ldr	r8, [sp, #92]	; 0x5c
   15840:	ldr	r2, [sp, #44]	; 0x2c
   15844:	str	r2, [r6, #4]
   15848:	add	r2, r5, r4, lsl #3
   1584c:	mov	r1, r2
   15850:	str	r2, [sp, #32]
   15854:	ldr	r2, [sp, #52]	; 0x34
   15858:	ldr	r6, [r1, #4]
   1585c:	ldr	sl, [r5, r4, lsl #3]
   15860:	orr	r2, r2, #1
   15864:	str	r3, [sp]
   15868:	add	r3, sp, #56	; 0x38
   1586c:	str	r2, [sp, #36]	; 0x24
   15870:	str	r2, [sp, #4]
   15874:	str	r3, [sp, #8]
   15878:	mov	r0, r6
   1587c:	str	r8, [sp, #16]
   15880:	str	r7, [sp, #12]
   15884:	mov	r1, sl
   15888:	ldr	r3, [sp, #136]	; 0x88
   1588c:	mov	r2, fp
   15890:	bl	12530 <__assert_fail@plt+0x16a8>
   15894:	cmp	sl, r0
   15898:	bhi	15904 <__assert_fail@plt+0x4a7c>
   1589c:	ldr	r3, [pc, #176]	; 15954 <__assert_fail@plt+0x4acc>
   158a0:	add	r7, r0, #1
   158a4:	cmp	r6, r3
   158a8:	str	r7, [r5, r4, lsl #3]
   158ac:	beq	158b8 <__assert_fail@plt+0x4a30>
   158b0:	mov	r0, r6
   158b4:	bl	12264 <__assert_fail@plt+0x13dc>
   158b8:	mov	r0, r7
   158bc:	bl	16e0c <__assert_fail@plt+0x5f84>
   158c0:	ldr	r3, [sp, #32]
   158c4:	ldr	lr, [sp, #92]	; 0x5c
   158c8:	ldr	ip, [sp, #88]	; 0x58
   158cc:	ldr	r4, [sp, #36]	; 0x24
   158d0:	mov	r2, fp
   158d4:	mov	r1, r7
   158d8:	str	r0, [r3, #4]
   158dc:	add	r3, sp, #56	; 0x38
   158e0:	str	r3, [sp, #8]
   158e4:	ldr	r3, [sp, #48]	; 0x30
   158e8:	str	r4, [sp, #4]
   158ec:	str	r3, [sp]
   158f0:	str	lr, [sp, #16]
   158f4:	str	ip, [sp, #12]
   158f8:	ldr	r3, [sp, #136]	; 0x88
   158fc:	mov	r6, r0
   15900:	bl	12530 <__assert_fail@plt+0x16a8>
   15904:	ldr	r3, [sp, #28]
   15908:	mov	r0, r6
   1590c:	str	r3, [r9]
   15910:	add	sp, sp, #100	; 0x64
   15914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15918:	mov	r3, #8
   1591c:	sub	r2, r4, r2
   15920:	str	r3, [sp]
   15924:	add	r1, sp, #44	; 0x2c
   15928:	add	r2, r2, #1
   1592c:	mvn	r3, #-2147483648	; 0x80000000
   15930:	bl	17028 <__assert_fail@plt+0x61a0>
   15934:	mov	r5, r0
   15938:	ldm	r7, {r0, r1}
   1593c:	str	r5, [r6]
   15940:	stm	r5, {r0, r1}
   15944:	b	15818 <__assert_fail@plt+0x4990>
   15948:	bl	10e70 <abort@plt>
   1594c:	andeq	r9, r2, r0, lsr #3
   15950:	strdeq	r9, [r2], -r0
   15954:	ldrdeq	r9, [r2], -r0
   15958:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1595c:	mov	r5, r0
   15960:	ldr	lr, [pc, #452]	; 15b2c <__assert_fail@plt+0x4ca4>
   15964:	mov	r6, r1
   15968:	mov	sl, r2
   1596c:	ldm	lr!, {r0, r1, r2, r3}
   15970:	sub	sp, sp, #92	; 0x5c
   15974:	add	ip, sp, #40	; 0x28
   15978:	cmp	r6, #0
   1597c:	cmpne	r5, #0
   15980:	stmia	ip!, {r0, r1, r2, r3}
   15984:	mov	r9, #10
   15988:	ldm	lr!, {r0, r1, r2, r3}
   1598c:	moveq	fp, #1
   15990:	movne	fp, #0
   15994:	str	r9, [sp, #40]	; 0x28
   15998:	stmia	ip!, {r0, r1, r2, r3}
   1599c:	ldm	lr, {r0, r1, r2, r3}
   159a0:	stm	ip, {r0, r1, r2, r3}
   159a4:	beq	15b28 <__assert_fail@plt+0x4ca0>
   159a8:	str	r5, [sp, #80]	; 0x50
   159ac:	str	r6, [sp, #84]	; 0x54
   159b0:	bl	10da4 <__errno_location@plt>
   159b4:	ldr	r7, [pc, #372]	; 15b30 <__assert_fail@plt+0x4ca8>
   159b8:	ldr	r2, [r7, #4]
   159bc:	ldr	r4, [r7]
   159c0:	cmp	r2, #0
   159c4:	ldr	r3, [r0]
   159c8:	mov	r8, r0
   159cc:	str	r3, [sp, #24]
   159d0:	movgt	r3, r9
   159d4:	bgt	15a3c <__assert_fail@plt+0x4bb4>
   159d8:	add	r5, r7, #8
   159dc:	cmp	r4, r5
   159e0:	str	r2, [sp, #36]	; 0x24
   159e4:	beq	15af8 <__assert_fail@plt+0x4c70>
   159e8:	mov	r3, #8
   159ec:	mov	r0, r4
   159f0:	str	r3, [sp]
   159f4:	rsb	r2, r2, #1
   159f8:	mvn	r3, #-2147483648	; 0x80000000
   159fc:	add	r1, sp, #36	; 0x24
   15a00:	bl	17028 <__assert_fail@plt+0x61a0>
   15a04:	mov	r4, r0
   15a08:	str	r0, [r7]
   15a0c:	ldr	r0, [r7, #4]
   15a10:	ldr	r2, [sp, #36]	; 0x24
   15a14:	mov	r1, #0
   15a18:	sub	r2, r2, r0
   15a1c:	add	r0, r4, r0, lsl #3
   15a20:	lsl	r2, r2, #3
   15a24:	bl	10dbc <memset@plt>
   15a28:	ldr	r3, [sp, #40]	; 0x28
   15a2c:	ldr	r5, [sp, #80]	; 0x50
   15a30:	ldr	r6, [sp, #84]	; 0x54
   15a34:	ldr	r2, [sp, #36]	; 0x24
   15a38:	str	r2, [r7, #4]
   15a3c:	ldr	r2, [sp, #44]	; 0x2c
   15a40:	ldr	r9, [r4]
   15a44:	ldr	r7, [r4, #4]
   15a48:	orr	r2, r2, #1
   15a4c:	add	fp, sp, #48	; 0x30
   15a50:	str	r2, [sp, #28]
   15a54:	str	r2, [sp, #4]
   15a58:	str	r3, [sp]
   15a5c:	str	r6, [sp, #16]
   15a60:	str	r5, [sp, #12]
   15a64:	mov	r1, r9
   15a68:	mov	r0, r7
   15a6c:	str	fp, [sp, #8]
   15a70:	mvn	r3, #0
   15a74:	mov	r2, sl
   15a78:	bl	12530 <__assert_fail@plt+0x16a8>
   15a7c:	cmp	r9, r0
   15a80:	bhi	15ae4 <__assert_fail@plt+0x4c5c>
   15a84:	ldr	r3, [pc, #168]	; 15b34 <__assert_fail@plt+0x4cac>
   15a88:	add	r5, r0, #1
   15a8c:	cmp	r7, r3
   15a90:	str	r5, [r4]
   15a94:	beq	15aa0 <__assert_fail@plt+0x4c18>
   15a98:	mov	r0, r7
   15a9c:	bl	12264 <__assert_fail@plt+0x13dc>
   15aa0:	mov	r0, r5
   15aa4:	bl	16e0c <__assert_fail@plt+0x5f84>
   15aa8:	ldr	lr, [sp, #84]	; 0x54
   15aac:	ldr	r3, [sp, #40]	; 0x28
   15ab0:	ldr	ip, [sp, #80]	; 0x50
   15ab4:	mov	r2, sl
   15ab8:	mov	r1, r5
   15abc:	str	r0, [r4, #4]
   15ac0:	ldr	r4, [sp, #28]
   15ac4:	str	r3, [sp]
   15ac8:	str	fp, [sp, #8]
   15acc:	str	r4, [sp, #4]
   15ad0:	str	lr, [sp, #16]
   15ad4:	str	ip, [sp, #12]
   15ad8:	mvn	r3, #0
   15adc:	mov	r7, r0
   15ae0:	bl	12530 <__assert_fail@plt+0x16a8>
   15ae4:	ldr	r3, [sp, #24]
   15ae8:	mov	r0, r7
   15aec:	str	r3, [r8]
   15af0:	add	sp, sp, #92	; 0x5c
   15af4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15af8:	mov	r3, #8
   15afc:	str	r3, [sp]
   15b00:	add	r1, sp, #36	; 0x24
   15b04:	rsb	r2, r2, #1
   15b08:	mov	r0, fp
   15b0c:	mvn	r3, #-2147483648	; 0x80000000
   15b10:	bl	17028 <__assert_fail@plt+0x61a0>
   15b14:	mov	r4, r0
   15b18:	ldm	r5, {r0, r1}
   15b1c:	str	r4, [r7]
   15b20:	stm	r4, {r0, r1}
   15b24:	b	15a0c <__assert_fail@plt+0x4b84>
   15b28:	bl	10e70 <abort@plt>
   15b2c:	andeq	r9, r2, r0, lsr #3
   15b30:	strdeq	r9, [r2], -r0
   15b34:	ldrdeq	r9, [r2], -r0
   15b38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b3c:	mov	r5, r0
   15b40:	ldr	lr, [pc, #464]	; 15d18 <__assert_fail@plt+0x4e90>
   15b44:	mov	r6, r1
   15b48:	mov	sl, r2
   15b4c:	mov	fp, r3
   15b50:	ldm	lr!, {r0, r1, r2, r3}
   15b54:	sub	sp, sp, #92	; 0x5c
   15b58:	add	ip, sp, #40	; 0x28
   15b5c:	cmp	r6, #0
   15b60:	cmpne	r5, #0
   15b64:	stmia	ip!, {r0, r1, r2, r3}
   15b68:	moveq	r4, #1
   15b6c:	ldm	lr!, {r0, r1, r2, r3}
   15b70:	movne	r4, #0
   15b74:	mov	r9, #10
   15b78:	str	r4, [sp, #28]
   15b7c:	stmia	ip!, {r0, r1, r2, r3}
   15b80:	ldm	lr, {r0, r1, r2, r3}
   15b84:	str	r9, [sp, #40]	; 0x28
   15b88:	stm	ip, {r0, r1, r2, r3}
   15b8c:	beq	15d14 <__assert_fail@plt+0x4e8c>
   15b90:	str	r5, [sp, #80]	; 0x50
   15b94:	str	r6, [sp, #84]	; 0x54
   15b98:	bl	10da4 <__errno_location@plt>
   15b9c:	ldr	r7, [pc, #376]	; 15d1c <__assert_fail@plt+0x4e94>
   15ba0:	ldr	r2, [r7, #4]
   15ba4:	ldr	r4, [r7]
   15ba8:	cmp	r2, #0
   15bac:	ldr	r3, [r0]
   15bb0:	mov	r8, r0
   15bb4:	str	r3, [sp, #24]
   15bb8:	movgt	r3, r9
   15bbc:	bgt	15c24 <__assert_fail@plt+0x4d9c>
   15bc0:	add	r5, r7, #8
   15bc4:	cmp	r4, r5
   15bc8:	str	r2, [sp, #36]	; 0x24
   15bcc:	beq	15ce4 <__assert_fail@plt+0x4e5c>
   15bd0:	mov	r3, #8
   15bd4:	mov	r0, r4
   15bd8:	str	r3, [sp]
   15bdc:	rsb	r2, r2, #1
   15be0:	mvn	r3, #-2147483648	; 0x80000000
   15be4:	add	r1, sp, #36	; 0x24
   15be8:	bl	17028 <__assert_fail@plt+0x61a0>
   15bec:	mov	r4, r0
   15bf0:	str	r0, [r7]
   15bf4:	ldr	r0, [r7, #4]
   15bf8:	ldr	r2, [sp, #36]	; 0x24
   15bfc:	mov	r1, #0
   15c00:	sub	r2, r2, r0
   15c04:	add	r0, r4, r0, lsl #3
   15c08:	lsl	r2, r2, #3
   15c0c:	bl	10dbc <memset@plt>
   15c10:	ldr	r3, [sp, #40]	; 0x28
   15c14:	ldr	r5, [sp, #80]	; 0x50
   15c18:	ldr	r6, [sp, #84]	; 0x54
   15c1c:	ldr	r2, [sp, #36]	; 0x24
   15c20:	str	r2, [r7, #4]
   15c24:	ldr	r2, [sp, #44]	; 0x2c
   15c28:	ldr	r9, [r4]
   15c2c:	ldr	r7, [r4, #4]
   15c30:	orr	r2, r2, #1
   15c34:	str	r3, [sp]
   15c38:	add	r3, sp, #48	; 0x30
   15c3c:	str	r2, [sp, #28]
   15c40:	str	r2, [sp, #4]
   15c44:	str	r3, [sp, #8]
   15c48:	str	r6, [sp, #16]
   15c4c:	str	r5, [sp, #12]
   15c50:	mov	r1, r9
   15c54:	mov	r0, r7
   15c58:	mov	r3, fp
   15c5c:	mov	r2, sl
   15c60:	bl	12530 <__assert_fail@plt+0x16a8>
   15c64:	cmp	r9, r0
   15c68:	bhi	15cd0 <__assert_fail@plt+0x4e48>
   15c6c:	ldr	r3, [pc, #172]	; 15d20 <__assert_fail@plt+0x4e98>
   15c70:	add	r5, r0, #1
   15c74:	cmp	r7, r3
   15c78:	str	r5, [r4]
   15c7c:	beq	15c88 <__assert_fail@plt+0x4e00>
   15c80:	mov	r0, r7
   15c84:	bl	12264 <__assert_fail@plt+0x13dc>
   15c88:	mov	r0, r5
   15c8c:	bl	16e0c <__assert_fail@plt+0x5f84>
   15c90:	add	lr, sp, #48	; 0x30
   15c94:	ldr	ip, [sp, #84]	; 0x54
   15c98:	mov	r1, r5
   15c9c:	ldr	r5, [sp, #28]
   15ca0:	mov	r3, fp
   15ca4:	mov	r2, sl
   15ca8:	str	r0, [r4, #4]
   15cac:	ldr	r4, [sp, #80]	; 0x50
   15cb0:	str	lr, [sp, #8]
   15cb4:	ldr	lr, [sp, #40]	; 0x28
   15cb8:	str	r5, [sp, #4]
   15cbc:	str	ip, [sp, #16]
   15cc0:	str	r4, [sp, #12]
   15cc4:	str	lr, [sp]
   15cc8:	mov	r7, r0
   15ccc:	bl	12530 <__assert_fail@plt+0x16a8>
   15cd0:	ldr	r3, [sp, #24]
   15cd4:	mov	r0, r7
   15cd8:	str	r3, [r8]
   15cdc:	add	sp, sp, #92	; 0x5c
   15ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ce4:	mov	r3, #8
   15ce8:	str	r3, [sp]
   15cec:	add	r1, sp, #36	; 0x24
   15cf0:	rsb	r2, r2, #1
   15cf4:	ldr	r0, [sp, #28]
   15cf8:	mvn	r3, #-2147483648	; 0x80000000
   15cfc:	bl	17028 <__assert_fail@plt+0x61a0>
   15d00:	mov	r4, r0
   15d04:	ldm	r5, {r0, r1}
   15d08:	str	r4, [r7]
   15d0c:	stm	r4, {r0, r1}
   15d10:	b	15bf4 <__assert_fail@plt+0x4d6c>
   15d14:	bl	10e70 <abort@plt>
   15d18:	andeq	r9, r2, r0, lsr #3
   15d1c:	strdeq	r9, [r2], -r0
   15d20:	ldrdeq	r9, [r2], -r0
   15d24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d28:	sub	sp, sp, #52	; 0x34
   15d2c:	mov	r5, r0
   15d30:	mov	sl, r1
   15d34:	mov	fp, r2
   15d38:	bl	10da4 <__errno_location@plt>
   15d3c:	ldr	r4, [pc, #404]	; 15ed8 <__assert_fail@plt+0x5050>
   15d40:	cmn	r5, #-2147483647	; 0x80000001
   15d44:	ldr	r6, [r4]
   15d48:	mov	r8, r0
   15d4c:	movne	r0, #0
   15d50:	moveq	r0, #1
   15d54:	ldr	r3, [r8]
   15d58:	orrs	r0, r0, r5, lsr #31
   15d5c:	str	r3, [sp, #28]
   15d60:	bne	15ed4 <__assert_fail@plt+0x504c>
   15d64:	ldr	r2, [r4, #4]
   15d68:	cmp	r5, r2
   15d6c:	blt	15dcc <__assert_fail@plt+0x4f44>
   15d70:	add	r7, r4, #8
   15d74:	cmp	r6, r7
   15d78:	str	r2, [sp, #44]	; 0x2c
   15d7c:	beq	15ea4 <__assert_fail@plt+0x501c>
   15d80:	mov	r3, #8
   15d84:	sub	r2, r5, r2
   15d88:	mov	r0, r6
   15d8c:	str	r3, [sp]
   15d90:	add	r2, r2, #1
   15d94:	mvn	r3, #-2147483648	; 0x80000000
   15d98:	add	r1, sp, #44	; 0x2c
   15d9c:	bl	17028 <__assert_fail@plt+0x61a0>
   15da0:	mov	r6, r0
   15da4:	str	r0, [r4]
   15da8:	ldr	r0, [r4, #4]
   15dac:	ldr	r2, [sp, #44]	; 0x2c
   15db0:	mov	r1, #0
   15db4:	sub	r2, r2, r0
   15db8:	add	r0, r6, r0, lsl #3
   15dbc:	lsl	r2, r2, #3
   15dc0:	bl	10dbc <memset@plt>
   15dc4:	ldr	r3, [sp, #44]	; 0x2c
   15dc8:	str	r3, [r4, #4]
   15dcc:	ldr	r2, [r4, #56]	; 0x38
   15dd0:	add	r3, r6, r5, lsl #3
   15dd4:	ldr	r1, [r4, #20]
   15dd8:	ldr	r7, [r3, #4]
   15ddc:	ldr	r9, [r6, r5, lsl #3]
   15de0:	ldr	ip, [r4, #60]	; 0x3c
   15de4:	str	r3, [sp, #32]
   15de8:	ldr	r3, [r4, #16]
   15dec:	str	r2, [sp, #12]
   15df0:	ldr	r2, [pc, #228]	; 15edc <__assert_fail@plt+0x5054>
   15df4:	orr	r1, r1, #1
   15df8:	str	r1, [sp, #36]	; 0x24
   15dfc:	str	r1, [sp, #4]
   15e00:	str	r2, [sp, #8]
   15e04:	str	r3, [sp]
   15e08:	mov	r0, r7
   15e0c:	mov	r1, r9
   15e10:	str	ip, [sp, #16]
   15e14:	mov	r3, fp
   15e18:	mov	r2, sl
   15e1c:	bl	12530 <__assert_fail@plt+0x16a8>
   15e20:	cmp	r9, r0
   15e24:	bhi	15e90 <__assert_fail@plt+0x5008>
   15e28:	ldr	r3, [pc, #176]	; 15ee0 <__assert_fail@plt+0x5058>
   15e2c:	add	r9, r0, #1
   15e30:	cmp	r7, r3
   15e34:	str	r9, [r6, r5, lsl #3]
   15e38:	beq	15e44 <__assert_fail@plt+0x4fbc>
   15e3c:	mov	r0, r7
   15e40:	bl	12264 <__assert_fail@plt+0x13dc>
   15e44:	mov	r0, r9
   15e48:	bl	16e0c <__assert_fail@plt+0x5f84>
   15e4c:	ldr	ip, [sp, #32]
   15e50:	ldr	lr, [r4, #60]	; 0x3c
   15e54:	ldr	r5, [r4, #56]	; 0x38
   15e58:	mov	r3, fp
   15e5c:	mov	r2, sl
   15e60:	mov	r1, r9
   15e64:	str	r0, [ip, #4]
   15e68:	ldr	ip, [r4, #16]
   15e6c:	ldr	r4, [pc, #104]	; 15edc <__assert_fail@plt+0x5054>
   15e70:	str	lr, [sp, #16]
   15e74:	str	r4, [sp, #8]
   15e78:	ldr	r4, [sp, #36]	; 0x24
   15e7c:	str	r5, [sp, #12]
   15e80:	str	r4, [sp, #4]
   15e84:	str	ip, [sp]
   15e88:	mov	r7, r0
   15e8c:	bl	12530 <__assert_fail@plt+0x16a8>
   15e90:	ldr	r3, [sp, #28]
   15e94:	mov	r0, r7
   15e98:	str	r3, [r8]
   15e9c:	add	sp, sp, #52	; 0x34
   15ea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ea4:	mov	r3, #8
   15ea8:	sub	r2, r5, r2
   15eac:	str	r3, [sp]
   15eb0:	add	r1, sp, #44	; 0x2c
   15eb4:	add	r2, r2, #1
   15eb8:	mvn	r3, #-2147483648	; 0x80000000
   15ebc:	bl	17028 <__assert_fail@plt+0x61a0>
   15ec0:	mov	r6, r0
   15ec4:	ldm	r7, {r0, r1}
   15ec8:	str	r6, [r4]
   15ecc:	stm	r6, {r0, r1}
   15ed0:	b	15da8 <__assert_fail@plt+0x4f20>
   15ed4:	bl	10e70 <abort@plt>
   15ed8:	strdeq	r9, [r2], -r0
   15edc:	andeq	r9, r2, r8, lsl #2
   15ee0:	ldrdeq	r9, [r2], -r0
   15ee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ee8:	sub	sp, sp, #44	; 0x2c
   15eec:	mov	r9, r0
   15ef0:	mov	sl, r1
   15ef4:	bl	10da4 <__errno_location@plt>
   15ef8:	ldr	r4, [pc, #360]	; 16068 <__assert_fail@plt+0x51e0>
   15efc:	ldr	r2, [r4, #4]
   15f00:	ldr	r5, [r4]
   15f04:	cmp	r2, #0
   15f08:	ldr	r3, [r0]
   15f0c:	mov	r7, r0
   15f10:	str	r3, [sp, #24]
   15f14:	bgt	15f70 <__assert_fail@plt+0x50e8>
   15f18:	add	r6, r4, #8
   15f1c:	cmp	r5, r6
   15f20:	str	r2, [sp, #36]	; 0x24
   15f24:	beq	16038 <__assert_fail@plt+0x51b0>
   15f28:	mov	r3, #8
   15f2c:	mov	r0, r5
   15f30:	str	r3, [sp]
   15f34:	rsb	r2, r2, #1
   15f38:	mvn	r3, #-2147483648	; 0x80000000
   15f3c:	add	r1, sp, #36	; 0x24
   15f40:	bl	17028 <__assert_fail@plt+0x61a0>
   15f44:	mov	r5, r0
   15f48:	str	r0, [r4]
   15f4c:	ldr	r0, [r4, #4]
   15f50:	ldr	r2, [sp, #36]	; 0x24
   15f54:	mov	r1, #0
   15f58:	sub	r2, r2, r0
   15f5c:	add	r0, r5, r0, lsl #3
   15f60:	lsl	r2, r2, #3
   15f64:	bl	10dbc <memset@plt>
   15f68:	ldr	r3, [sp, #36]	; 0x24
   15f6c:	str	r3, [r4, #4]
   15f70:	ldr	r1, [r4, #20]
   15f74:	ldr	r8, [r5]
   15f78:	ldr	r6, [r5, #4]
   15f7c:	ldr	r2, [r4, #56]	; 0x38
   15f80:	ldr	r3, [r4, #16]
   15f84:	ldr	ip, [r4, #60]	; 0x3c
   15f88:	ldr	fp, [pc, #220]	; 1606c <__assert_fail@plt+0x51e4>
   15f8c:	orr	r1, r1, #1
   15f90:	str	r1, [sp, #28]
   15f94:	str	r1, [sp, #4]
   15f98:	str	r2, [sp, #12]
   15f9c:	str	r3, [sp]
   15fa0:	mov	r1, r8
   15fa4:	mov	r0, r6
   15fa8:	str	ip, [sp, #16]
   15fac:	str	fp, [sp, #8]
   15fb0:	mov	r3, sl
   15fb4:	mov	r2, r9
   15fb8:	bl	12530 <__assert_fail@plt+0x16a8>
   15fbc:	cmp	r8, r0
   15fc0:	bhi	16024 <__assert_fail@plt+0x519c>
   15fc4:	ldr	r3, [pc, #164]	; 16070 <__assert_fail@plt+0x51e8>
   15fc8:	add	r8, r0, #1
   15fcc:	cmp	r6, r3
   15fd0:	str	r8, [r5]
   15fd4:	beq	15fe0 <__assert_fail@plt+0x5158>
   15fd8:	mov	r0, r6
   15fdc:	bl	12264 <__assert_fail@plt+0x13dc>
   15fe0:	mov	r0, r8
   15fe4:	bl	16e0c <__assert_fail@plt+0x5f84>
   15fe8:	ldr	lr, [r4, #60]	; 0x3c
   15fec:	ldr	ip, [r4, #16]
   15ff0:	mov	r3, sl
   15ff4:	mov	r2, r9
   15ff8:	mov	r1, r8
   15ffc:	str	r0, [r5, #4]
   16000:	ldr	r5, [r4, #56]	; 0x38
   16004:	ldr	r4, [sp, #28]
   16008:	str	fp, [sp, #8]
   1600c:	str	r4, [sp, #4]
   16010:	str	lr, [sp, #16]
   16014:	str	r5, [sp, #12]
   16018:	str	ip, [sp]
   1601c:	mov	r6, r0
   16020:	bl	12530 <__assert_fail@plt+0x16a8>
   16024:	ldr	r3, [sp, #24]
   16028:	mov	r0, r6
   1602c:	str	r3, [r7]
   16030:	add	sp, sp, #44	; 0x2c
   16034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16038:	mov	r3, #8
   1603c:	str	r3, [sp]
   16040:	add	r1, sp, #36	; 0x24
   16044:	rsb	r2, r2, #1
   16048:	mvn	r3, #-2147483648	; 0x80000000
   1604c:	mov	r0, #0
   16050:	bl	17028 <__assert_fail@plt+0x61a0>
   16054:	mov	r5, r0
   16058:	ldm	r6, {r0, r1}
   1605c:	str	r5, [r4]
   16060:	stm	r5, {r0, r1}
   16064:	b	15f4c <__assert_fail@plt+0x50c4>
   16068:	strdeq	r9, [r2], -r0
   1606c:	andeq	r9, r2, r8, lsl #2
   16070:	ldrdeq	r9, [r2], -r0
   16074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16078:	sub	sp, sp, #44	; 0x2c
   1607c:	mov	r5, r0
   16080:	mov	sl, r1
   16084:	bl	10da4 <__errno_location@plt>
   16088:	ldr	r4, [pc, #396]	; 1621c <__assert_fail@plt+0x5394>
   1608c:	cmn	r5, #-2147483647	; 0x80000001
   16090:	ldr	r6, [r4]
   16094:	mov	r8, r0
   16098:	movne	r0, #0
   1609c:	moveq	r0, #1
   160a0:	ldr	r3, [r8]
   160a4:	orrs	r0, r0, r5, lsr #31
   160a8:	str	r3, [sp, #24]
   160ac:	bne	16218 <__assert_fail@plt+0x5390>
   160b0:	ldr	r2, [r4, #4]
   160b4:	cmp	r5, r2
   160b8:	blt	16118 <__assert_fail@plt+0x5290>
   160bc:	add	r7, r4, #8
   160c0:	cmp	r6, r7
   160c4:	str	r2, [sp, #36]	; 0x24
   160c8:	beq	161e8 <__assert_fail@plt+0x5360>
   160cc:	mov	r3, #8
   160d0:	sub	r2, r5, r2
   160d4:	mov	r0, r6
   160d8:	str	r3, [sp]
   160dc:	add	r2, r2, #1
   160e0:	mvn	r3, #-2147483648	; 0x80000000
   160e4:	add	r1, sp, #36	; 0x24
   160e8:	bl	17028 <__assert_fail@plt+0x61a0>
   160ec:	mov	r6, r0
   160f0:	str	r0, [r4]
   160f4:	ldr	r0, [r4, #4]
   160f8:	ldr	r2, [sp, #36]	; 0x24
   160fc:	mov	r1, #0
   16100:	sub	r2, r2, r0
   16104:	add	r0, r6, r0, lsl #3
   16108:	lsl	r2, r2, #3
   1610c:	bl	10dbc <memset@plt>
   16110:	ldr	r3, [sp, #36]	; 0x24
   16114:	str	r3, [r4, #4]
   16118:	ldr	r2, [r4, #56]	; 0x38
   1611c:	add	fp, r6, r5, lsl #3
   16120:	ldr	r1, [r4, #20]
   16124:	ldr	r9, [r6, r5, lsl #3]
   16128:	ldr	r7, [fp, #4]
   1612c:	ldr	r3, [r4, #16]
   16130:	ldr	ip, [r4, #60]	; 0x3c
   16134:	str	r2, [sp, #12]
   16138:	ldr	r2, [pc, #224]	; 16220 <__assert_fail@plt+0x5398>
   1613c:	orr	r1, r1, #1
   16140:	str	r1, [sp, #28]
   16144:	str	r1, [sp, #4]
   16148:	str	r2, [sp, #8]
   1614c:	str	r3, [sp]
   16150:	mov	r0, r7
   16154:	mov	r1, r9
   16158:	str	ip, [sp, #16]
   1615c:	mvn	r3, #0
   16160:	mov	r2, sl
   16164:	bl	12530 <__assert_fail@plt+0x16a8>
   16168:	cmp	r9, r0
   1616c:	bhi	161d4 <__assert_fail@plt+0x534c>
   16170:	ldr	r3, [pc, #172]	; 16224 <__assert_fail@plt+0x539c>
   16174:	add	r9, r0, #1
   16178:	cmp	r7, r3
   1617c:	str	r9, [r6, r5, lsl #3]
   16180:	beq	1618c <__assert_fail@plt+0x5304>
   16184:	mov	r0, r7
   16188:	bl	12264 <__assert_fail@plt+0x13dc>
   1618c:	mov	r0, r9
   16190:	bl	16e0c <__assert_fail@plt+0x5f84>
   16194:	ldr	ip, [r4, #60]	; 0x3c
   16198:	ldr	r3, [r4, #16]
   1619c:	ldr	lr, [r4, #56]	; 0x38
   161a0:	ldr	r4, [pc, #120]	; 16220 <__assert_fail@plt+0x5398>
   161a4:	mov	r2, sl
   161a8:	mov	r1, r9
   161ac:	str	r0, [fp, #4]
   161b0:	str	r4, [sp, #8]
   161b4:	ldr	r4, [sp, #28]
   161b8:	str	r3, [sp]
   161bc:	str	r4, [sp, #4]
   161c0:	str	ip, [sp, #16]
   161c4:	str	lr, [sp, #12]
   161c8:	mvn	r3, #0
   161cc:	mov	r7, r0
   161d0:	bl	12530 <__assert_fail@plt+0x16a8>
   161d4:	ldr	r3, [sp, #24]
   161d8:	mov	r0, r7
   161dc:	str	r3, [r8]
   161e0:	add	sp, sp, #44	; 0x2c
   161e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161e8:	mov	r3, #8
   161ec:	sub	r2, r5, r2
   161f0:	str	r3, [sp]
   161f4:	add	r1, sp, #36	; 0x24
   161f8:	add	r2, r2, #1
   161fc:	mvn	r3, #-2147483648	; 0x80000000
   16200:	bl	17028 <__assert_fail@plt+0x61a0>
   16204:	mov	r6, r0
   16208:	ldm	r7, {r0, r1}
   1620c:	str	r6, [r4]
   16210:	stm	r6, {r0, r1}
   16214:	b	160f4 <__assert_fail@plt+0x526c>
   16218:	bl	10e70 <abort@plt>
   1621c:	strdeq	r9, [r2], -r0
   16220:	andeq	r9, r2, r8, lsl #2
   16224:	ldrdeq	r9, [r2], -r0
   16228:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1622c:	sub	sp, sp, #44	; 0x2c
   16230:	mov	sl, r0
   16234:	bl	10da4 <__errno_location@plt>
   16238:	ldr	r4, [pc, #348]	; 1639c <__assert_fail@plt+0x5514>
   1623c:	ldr	r2, [r4, #4]
   16240:	ldr	r5, [r4]
   16244:	cmp	r2, #0
   16248:	ldr	r3, [r0]
   1624c:	mov	r8, r0
   16250:	str	r3, [sp, #28]
   16254:	bgt	162b0 <__assert_fail@plt+0x5428>
   16258:	add	r6, r4, #8
   1625c:	cmp	r5, r6
   16260:	str	r2, [sp, #36]	; 0x24
   16264:	beq	1636c <__assert_fail@plt+0x54e4>
   16268:	mov	r3, #8
   1626c:	mov	r0, r5
   16270:	str	r3, [sp]
   16274:	rsb	r2, r2, #1
   16278:	mvn	r3, #-2147483648	; 0x80000000
   1627c:	add	r1, sp, #36	; 0x24
   16280:	bl	17028 <__assert_fail@plt+0x61a0>
   16284:	mov	r5, r0
   16288:	str	r0, [r4]
   1628c:	ldr	r0, [r4, #4]
   16290:	ldr	r2, [sp, #36]	; 0x24
   16294:	mov	r1, #0
   16298:	sub	r2, r2, r0
   1629c:	add	r0, r5, r0, lsl #3
   162a0:	lsl	r2, r2, #3
   162a4:	bl	10dbc <memset@plt>
   162a8:	ldr	r3, [sp, #36]	; 0x24
   162ac:	str	r3, [r4, #4]
   162b0:	ldr	r7, [r4, #20]
   162b4:	ldr	r9, [r5]
   162b8:	ldr	r6, [r5, #4]
   162bc:	ldr	r2, [r4, #56]	; 0x38
   162c0:	ldr	r3, [r4, #16]
   162c4:	ldr	ip, [r4, #60]	; 0x3c
   162c8:	ldr	fp, [pc, #208]	; 163a0 <__assert_fail@plt+0x5518>
   162cc:	orr	r7, r7, #1
   162d0:	str	r2, [sp, #12]
   162d4:	str	r3, [sp]
   162d8:	str	r7, [sp, #4]
   162dc:	mov	r1, r9
   162e0:	mov	r0, r6
   162e4:	str	ip, [sp, #16]
   162e8:	str	fp, [sp, #8]
   162ec:	mvn	r3, #0
   162f0:	mov	r2, sl
   162f4:	bl	12530 <__assert_fail@plt+0x16a8>
   162f8:	cmp	r9, r0
   162fc:	bhi	16358 <__assert_fail@plt+0x54d0>
   16300:	ldr	r3, [pc, #156]	; 163a4 <__assert_fail@plt+0x551c>
   16304:	add	r9, r0, #1
   16308:	cmp	r6, r3
   1630c:	str	r9, [r5]
   16310:	beq	1631c <__assert_fail@plt+0x5494>
   16314:	mov	r0, r6
   16318:	bl	12264 <__assert_fail@plt+0x13dc>
   1631c:	mov	r0, r9
   16320:	bl	16e0c <__assert_fail@plt+0x5f84>
   16324:	ldr	ip, [r4, #60]	; 0x3c
   16328:	ldr	r3, [r4, #16]
   1632c:	ldr	lr, [r4, #56]	; 0x38
   16330:	mov	r2, sl
   16334:	mov	r1, r9
   16338:	str	r0, [r5, #4]
   1633c:	str	r3, [sp]
   16340:	stmib	sp, {r7, fp}
   16344:	str	ip, [sp, #16]
   16348:	str	lr, [sp, #12]
   1634c:	mvn	r3, #0
   16350:	mov	r6, r0
   16354:	bl	12530 <__assert_fail@plt+0x16a8>
   16358:	ldr	r3, [sp, #28]
   1635c:	mov	r0, r6
   16360:	str	r3, [r8]
   16364:	add	sp, sp, #44	; 0x2c
   16368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1636c:	mov	r3, #8
   16370:	str	r3, [sp]
   16374:	add	r1, sp, #36	; 0x24
   16378:	rsb	r2, r2, #1
   1637c:	mvn	r3, #-2147483648	; 0x80000000
   16380:	mov	r0, #0
   16384:	bl	17028 <__assert_fail@plt+0x61a0>
   16388:	mov	r5, r0
   1638c:	ldm	r6, {r0, r1}
   16390:	str	r5, [r4]
   16394:	stm	r5, {r0, r1}
   16398:	b	1628c <__assert_fail@plt+0x5404>
   1639c:	strdeq	r9, [r2], -r0
   163a0:	andeq	r9, r2, r8, lsl #2
   163a4:	ldrdeq	r9, [r2], -r0
   163a8:	push	{r4, r5, r6, lr}
   163ac:	sub	sp, sp, #32
   163b0:	cmp	r1, #0
   163b4:	mov	r4, r0
   163b8:	ldr	r5, [sp, #48]	; 0x30
   163bc:	ldr	r6, [sp, #52]	; 0x34
   163c0:	beq	166d8 <__assert_fail@plt+0x5850>
   163c4:	stm	sp, {r2, r3}
   163c8:	mov	r3, r1
   163cc:	ldr	r2, [pc, #808]	; 166fc <__assert_fail@plt+0x5874>
   163d0:	mov	r1, #1
   163d4:	bl	10de0 <__fprintf_chk@plt>
   163d8:	mov	r2, #5
   163dc:	ldr	r1, [pc, #796]	; 16700 <__assert_fail@plt+0x5878>
   163e0:	mov	r0, #0
   163e4:	bl	10ccc <dcgettext@plt>
   163e8:	ldr	r3, [pc, #788]	; 16704 <__assert_fail@plt+0x587c>
   163ec:	ldr	r2, [pc, #788]	; 16708 <__assert_fail@plt+0x5880>
   163f0:	str	r3, [sp]
   163f4:	mov	r1, #1
   163f8:	mov	r3, r0
   163fc:	mov	r0, r4
   16400:	bl	10de0 <__fprintf_chk@plt>
   16404:	mov	r1, r4
   16408:	mov	r0, #10
   1640c:	bl	10cc0 <fputc_unlocked@plt>
   16410:	mov	r2, #5
   16414:	ldr	r1, [pc, #752]	; 1670c <__assert_fail@plt+0x5884>
   16418:	mov	r0, #0
   1641c:	bl	10ccc <dcgettext@plt>
   16420:	mov	r1, #1
   16424:	ldr	r3, [pc, #740]	; 16710 <__assert_fail@plt+0x5888>
   16428:	mov	r2, r0
   1642c:	mov	r0, r4
   16430:	bl	10de0 <__fprintf_chk@plt>
   16434:	mov	r1, r4
   16438:	mov	r0, #10
   1643c:	bl	10cc0 <fputc_unlocked@plt>
   16440:	cmp	r6, #9
   16444:	ldrls	pc, [pc, r6, lsl #2]
   16448:	b	166f0 <__assert_fail@plt+0x5868>
   1644c:	ldrdeq	r6, [r1], -r0
   16450:	ldrdeq	r6, [r1], -r8
   16454:	andeq	r6, r1, r4, lsl #10
   16458:	andeq	r6, r1, r8, lsr r5
   1645c:	andeq	r6, r1, r4, ror r5
   16460:			; <UNDEFINED> instruction: 0x000165b0
   16464:	andeq	r6, r1, ip, ror #11
   16468:	andeq	r6, r1, r0, lsr r6
   1646c:	andeq	r6, r1, r0, lsl #13
   16470:	andeq	r6, r1, r4, ror r4
   16474:	ldr	r1, [pc, #664]	; 16714 <__assert_fail@plt+0x588c>
   16478:	mov	r2, #5
   1647c:	mov	r0, #0
   16480:	bl	10ccc <dcgettext@plt>
   16484:	ldr	ip, [r5, #32]
   16488:	ldr	r1, [r5, #28]
   1648c:	ldr	r2, [r5, #24]
   16490:	ldr	r3, [r5]
   16494:	ldr	r6, [r5, #20]
   16498:	str	ip, [sp, #28]
   1649c:	ldr	lr, [r5, #16]
   164a0:	str	r1, [sp, #24]
   164a4:	ldr	ip, [r5, #12]
   164a8:	str	r2, [sp, #20]
   164ac:	ldr	r1, [r5, #8]
   164b0:	ldr	r2, [r5, #4]
   164b4:	str	r6, [sp, #16]
   164b8:	stmib	sp, {r1, ip, lr}
   164bc:	mov	r1, #1
   164c0:	str	r2, [sp]
   164c4:	mov	r2, r0
   164c8:	mov	r0, r4
   164cc:	bl	10de0 <__fprintf_chk@plt>
   164d0:	add	sp, sp, #32
   164d4:	pop	{r4, r5, r6, pc}
   164d8:	mov	r2, #5
   164dc:	ldr	r1, [pc, #564]	; 16718 <__assert_fail@plt+0x5890>
   164e0:	mov	r0, #0
   164e4:	bl	10ccc <dcgettext@plt>
   164e8:	ldr	r3, [r5]
   164ec:	mov	r1, #1
   164f0:	mov	r2, r0
   164f4:	mov	r0, r4
   164f8:	add	sp, sp, #32
   164fc:	pop	{r4, r5, r6, lr}
   16500:	b	10de0 <__fprintf_chk@plt>
   16504:	mov	r2, #5
   16508:	ldr	r1, [pc, #524]	; 1671c <__assert_fail@plt+0x5894>
   1650c:	mov	r0, #0
   16510:	bl	10ccc <dcgettext@plt>
   16514:	ldr	r2, [r5, #4]
   16518:	ldr	r3, [r5]
   1651c:	mov	r1, #1
   16520:	str	r2, [sp, #48]	; 0x30
   16524:	mov	r2, r0
   16528:	mov	r0, r4
   1652c:	add	sp, sp, #32
   16530:	pop	{r4, r5, r6, lr}
   16534:	b	10de0 <__fprintf_chk@plt>
   16538:	mov	r2, #5
   1653c:	ldr	r1, [pc, #476]	; 16720 <__assert_fail@plt+0x5898>
   16540:	mov	r0, #0
   16544:	bl	10ccc <dcgettext@plt>
   16548:	ldr	r1, [r5, #8]
   1654c:	ldr	r2, [r5, #4]
   16550:	ldr	r3, [r5]
   16554:	str	r1, [sp, #52]	; 0x34
   16558:	str	r2, [sp, #48]	; 0x30
   1655c:	mov	r1, #1
   16560:	mov	r2, r0
   16564:	mov	r0, r4
   16568:	add	sp, sp, #32
   1656c:	pop	{r4, r5, r6, lr}
   16570:	b	10de0 <__fprintf_chk@plt>
   16574:	mov	r2, #5
   16578:	ldr	r1, [pc, #420]	; 16724 <__assert_fail@plt+0x589c>
   1657c:	mov	r0, #0
   16580:	bl	10ccc <dcgettext@plt>
   16584:	ldr	r1, [r5, #8]
   16588:	ldr	ip, [r5, #12]
   1658c:	ldr	r2, [r5, #4]
   16590:	ldr	r3, [r5]
   16594:	stmib	sp, {r1, ip}
   16598:	str	r2, [sp]
   1659c:	mov	r1, #1
   165a0:	mov	r2, r0
   165a4:	mov	r0, r4
   165a8:	bl	10de0 <__fprintf_chk@plt>
   165ac:	b	164d0 <__assert_fail@plt+0x5648>
   165b0:	mov	r2, #5
   165b4:	ldr	r1, [pc, #364]	; 16728 <__assert_fail@plt+0x58a0>
   165b8:	mov	r0, #0
   165bc:	bl	10ccc <dcgettext@plt>
   165c0:	add	r1, r5, #8
   165c4:	ldr	r2, [r5, #4]
   165c8:	ldm	r1, {r1, ip, lr}
   165cc:	ldr	r3, [r5]
   165d0:	str	r2, [sp]
   165d4:	stmib	sp, {r1, ip, lr}
   165d8:	mov	r1, #1
   165dc:	mov	r2, r0
   165e0:	mov	r0, r4
   165e4:	bl	10de0 <__fprintf_chk@plt>
   165e8:	b	164d0 <__assert_fail@plt+0x5648>
   165ec:	mov	r2, #5
   165f0:	ldr	r1, [pc, #308]	; 1672c <__assert_fail@plt+0x58a4>
   165f4:	mov	r0, #0
   165f8:	bl	10ccc <dcgettext@plt>
   165fc:	add	r1, r5, #8
   16600:	ldr	r2, [r5, #4]
   16604:	ldm	r1, {r1, ip, lr}
   16608:	ldr	r6, [r5, #20]
   1660c:	ldr	r3, [r5]
   16610:	stmib	sp, {r1, ip, lr}
   16614:	mov	r1, #1
   16618:	str	r2, [sp]
   1661c:	str	r6, [sp, #16]
   16620:	mov	r2, r0
   16624:	mov	r0, r4
   16628:	bl	10de0 <__fprintf_chk@plt>
   1662c:	b	164d0 <__assert_fail@plt+0x5648>
   16630:	mov	r2, #5
   16634:	ldr	r1, [pc, #244]	; 16730 <__assert_fail@plt+0x58a8>
   16638:	mov	r0, #0
   1663c:	bl	10ccc <dcgettext@plt>
   16640:	ldr	r2, [r5, #24]
   16644:	ldr	r3, [r5]
   16648:	ldr	r6, [r5, #20]
   1664c:	ldr	lr, [r5, #16]
   16650:	ldr	ip, [r5, #12]
   16654:	str	r2, [sp, #20]
   16658:	ldr	r1, [r5, #8]
   1665c:	ldr	r2, [r5, #4]
   16660:	str	r6, [sp, #16]
   16664:	stmib	sp, {r1, ip, lr}
   16668:	mov	r1, #1
   1666c:	str	r2, [sp]
   16670:	mov	r2, r0
   16674:	mov	r0, r4
   16678:	bl	10de0 <__fprintf_chk@plt>
   1667c:	b	164d0 <__assert_fail@plt+0x5648>
   16680:	mov	r2, #5
   16684:	ldr	r1, [pc, #168]	; 16734 <__assert_fail@plt+0x58ac>
   16688:	mov	r0, #0
   1668c:	bl	10ccc <dcgettext@plt>
   16690:	ldr	r1, [r5, #28]
   16694:	ldr	r2, [r5, #24]
   16698:	ldr	r3, [r5]
   1669c:	ldr	r6, [r5, #20]
   166a0:	ldr	lr, [r5, #16]
   166a4:	str	r1, [sp, #24]
   166a8:	ldr	ip, [r5, #12]
   166ac:	str	r2, [sp, #20]
   166b0:	ldr	r1, [r5, #8]
   166b4:	ldr	r2, [r5, #4]
   166b8:	str	r6, [sp, #16]
   166bc:	stmib	sp, {r1, ip, lr}
   166c0:	mov	r1, #1
   166c4:	str	r2, [sp]
   166c8:	mov	r2, r0
   166cc:	mov	r0, r4
   166d0:	bl	10de0 <__fprintf_chk@plt>
   166d4:	b	164d0 <__assert_fail@plt+0x5648>
   166d8:	str	r3, [sp]
   166dc:	mov	r1, #1
   166e0:	mov	r3, r2
   166e4:	ldr	r2, [pc, #76]	; 16738 <__assert_fail@plt+0x58b0>
   166e8:	bl	10de0 <__fprintf_chk@plt>
   166ec:	b	163d8 <__assert_fail@plt+0x5550>
   166f0:	mov	r2, #5
   166f4:	ldr	r1, [pc, #64]	; 1673c <__assert_fail@plt+0x58b4>
   166f8:	b	1647c <__assert_fail@plt+0x55f4>
   166fc:	andeq	r8, r1, ip, asr #13
   16700:	andeq	r8, r1, r0, ror #13
   16704:	andeq	r0, r0, r6, ror #15
   16708:			; <UNDEFINED> instruction: 0x000189b8
   1670c:	andeq	r8, r1, r4, ror #13
   16710:	muleq	r1, r0, r7
   16714:	andeq	r8, r1, r0, asr #17
   16718:			; <UNDEFINED> instruction: 0x000187b4
   1671c:	andeq	r8, r1, r4, asr #15
   16720:	ldrdeq	r8, [r1], -ip
   16724:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16728:	andeq	r8, r1, r8, lsl r8
   1672c:	andeq	r8, r1, ip, lsr r8
   16730:	andeq	r8, r1, r4, ror #16
   16734:	muleq	r1, r0, r8
   16738:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1673c:	strdeq	r8, [r1], -r4
   16740:	push	{r4, r5, lr}
   16744:	sub	sp, sp, #12
   16748:	ldr	r5, [sp, #24]
   1674c:	ldr	ip, [r5]
   16750:	cmp	ip, #0
   16754:	beq	16770 <__assert_fail@plt+0x58e8>
   16758:	mov	lr, r5
   1675c:	mov	ip, #0
   16760:	ldr	r4, [lr, #4]!
   16764:	add	ip, ip, #1
   16768:	cmp	r4, #0
   1676c:	bne	16760 <__assert_fail@plt+0x58d8>
   16770:	stm	sp, {r5, ip}
   16774:	bl	163a8 <__assert_fail@plt+0x5520>
   16778:	add	sp, sp, #12
   1677c:	pop	{r4, r5, pc}
   16780:	push	{r4, r5, lr}
   16784:	sub	sp, sp, #76	; 0x4c
   16788:	mov	r5, r0
   1678c:	ldr	ip, [sp, #88]	; 0x58
   16790:	ldr	r0, [ip]
   16794:	cmp	r0, #0
   16798:	str	r0, [sp, #32]
   1679c:	beq	16b70 <__assert_fail@plt+0x5ce8>
   167a0:	ldr	r0, [ip, #4]
   167a4:	cmp	r0, #0
   167a8:	str	r0, [sp, #36]	; 0x24
   167ac:	beq	16b78 <__assert_fail@plt+0x5cf0>
   167b0:	ldr	r0, [ip, #8]
   167b4:	cmp	r0, #0
   167b8:	str	r0, [sp, #40]	; 0x28
   167bc:	beq	16b80 <__assert_fail@plt+0x5cf8>
   167c0:	ldr	r0, [ip, #12]
   167c4:	cmp	r0, #0
   167c8:	str	r0, [sp, #44]	; 0x2c
   167cc:	beq	16b88 <__assert_fail@plt+0x5d00>
   167d0:	ldr	r0, [ip, #16]
   167d4:	cmp	r0, #0
   167d8:	str	r0, [sp, #48]	; 0x30
   167dc:	beq	16b90 <__assert_fail@plt+0x5d08>
   167e0:	ldr	r0, [ip, #20]
   167e4:	cmp	r0, #0
   167e8:	str	r0, [sp, #52]	; 0x34
   167ec:	beq	16b98 <__assert_fail@plt+0x5d10>
   167f0:	ldr	r0, [ip, #24]
   167f4:	cmp	r0, #0
   167f8:	str	r0, [sp, #56]	; 0x38
   167fc:	beq	16ba0 <__assert_fail@plt+0x5d18>
   16800:	ldr	r0, [ip, #28]
   16804:	cmp	r0, #0
   16808:	str	r0, [sp, #60]	; 0x3c
   1680c:	beq	16ba8 <__assert_fail@plt+0x5d20>
   16810:	ldr	r0, [ip, #32]
   16814:	cmp	r0, #0
   16818:	str	r0, [sp, #64]	; 0x40
   1681c:	beq	16bb0 <__assert_fail@plt+0x5d28>
   16820:	ldr	r0, [ip, #36]	; 0x24
   16824:	cmp	r0, #0
   16828:	movne	r4, #10
   1682c:	moveq	r4, #9
   16830:	cmp	r1, #0
   16834:	beq	16b48 <__assert_fail@plt+0x5cc0>
   16838:	stm	sp, {r2, r3}
   1683c:	mov	r0, r5
   16840:	mov	r3, r1
   16844:	ldr	r2, [pc, #876]	; 16bb8 <__assert_fail@plt+0x5d30>
   16848:	mov	r1, #1
   1684c:	bl	10de0 <__fprintf_chk@plt>
   16850:	mov	r2, #5
   16854:	ldr	r1, [pc, #864]	; 16bbc <__assert_fail@plt+0x5d34>
   16858:	mov	r0, #0
   1685c:	bl	10ccc <dcgettext@plt>
   16860:	ldr	r3, [pc, #856]	; 16bc0 <__assert_fail@plt+0x5d38>
   16864:	ldr	r2, [pc, #856]	; 16bc4 <__assert_fail@plt+0x5d3c>
   16868:	str	r3, [sp]
   1686c:	mov	r1, #1
   16870:	mov	r3, r0
   16874:	mov	r0, r5
   16878:	bl	10de0 <__fprintf_chk@plt>
   1687c:	mov	r1, r5
   16880:	mov	r0, #10
   16884:	bl	10cc0 <fputc_unlocked@plt>
   16888:	mov	r2, #5
   1688c:	ldr	r1, [pc, #820]	; 16bc8 <__assert_fail@plt+0x5d40>
   16890:	mov	r0, #0
   16894:	bl	10ccc <dcgettext@plt>
   16898:	mov	r1, #1
   1689c:	ldr	r3, [pc, #808]	; 16bcc <__assert_fail@plt+0x5d44>
   168a0:	mov	r2, r0
   168a4:	mov	r0, r5
   168a8:	bl	10de0 <__fprintf_chk@plt>
   168ac:	mov	r1, r5
   168b0:	mov	r0, #10
   168b4:	bl	10cc0 <fputc_unlocked@plt>
   168b8:	cmp	r4, #9
   168bc:	ldrls	pc, [pc, r4, lsl #2]
   168c0:	b	16b64 <__assert_fail@plt+0x5cdc>
   168c4:	andeq	r6, r1, r8, asr #18
   168c8:	andeq	r6, r1, r0, asr r9
   168cc:	andeq	r6, r1, ip, ror r9
   168d0:			; <UNDEFINED> instruction: 0x000169b0
   168d4:	andeq	r6, r1, r8, ror #19
   168d8:	andeq	r6, r1, r4, lsr #20
   168dc:	andeq	r6, r1, r0, ror #20
   168e0:	andeq	r6, r1, r4, lsr #21
   168e4:	strdeq	r6, [r1], -r0
   168e8:	andeq	r6, r1, ip, ror #17
   168ec:	ldr	r1, [pc, #732]	; 16bd0 <__assert_fail@plt+0x5d48>
   168f0:	mov	r2, #5
   168f4:	mov	r0, #0
   168f8:	bl	10ccc <dcgettext@plt>
   168fc:	ldr	ip, [sp, #64]	; 0x40
   16900:	ldr	r1, [sp, #60]	; 0x3c
   16904:	ldr	r2, [sp, #56]	; 0x38
   16908:	ldr	lr, [sp, #48]	; 0x30
   1690c:	str	ip, [sp, #28]
   16910:	str	r1, [sp, #24]
   16914:	ldr	ip, [sp, #44]	; 0x2c
   16918:	ldr	r1, [sp, #40]	; 0x28
   1691c:	ldr	r4, [sp, #52]	; 0x34
   16920:	str	r2, [sp, #20]
   16924:	ldr	r2, [sp, #36]	; 0x24
   16928:	stmib	sp, {r1, ip, lr}
   1692c:	mov	r1, #1
   16930:	str	r2, [sp]
   16934:	ldr	r3, [sp, #32]
   16938:	str	r4, [sp, #16]
   1693c:	mov	r2, r0
   16940:	mov	r0, r5
   16944:	bl	10de0 <__fprintf_chk@plt>
   16948:	add	sp, sp, #76	; 0x4c
   1694c:	pop	{r4, r5, pc}
   16950:	mov	r2, #5
   16954:	ldr	r1, [pc, #632]	; 16bd4 <__assert_fail@plt+0x5d4c>
   16958:	mov	r0, #0
   1695c:	bl	10ccc <dcgettext@plt>
   16960:	ldr	r3, [sp, #32]
   16964:	mov	r1, #1
   16968:	mov	r2, r0
   1696c:	mov	r0, r5
   16970:	add	sp, sp, #76	; 0x4c
   16974:	pop	{r4, r5, lr}
   16978:	b	10de0 <__fprintf_chk@plt>
   1697c:	mov	r2, #5
   16980:	ldr	r1, [pc, #592]	; 16bd8 <__assert_fail@plt+0x5d50>
   16984:	mov	r0, #0
   16988:	bl	10ccc <dcgettext@plt>
   1698c:	ldr	r2, [sp, #36]	; 0x24
   16990:	ldr	r3, [sp, #32]
   16994:	str	r2, [sp, #88]	; 0x58
   16998:	mov	r1, #1
   1699c:	mov	r2, r0
   169a0:	mov	r0, r5
   169a4:	add	sp, sp, #76	; 0x4c
   169a8:	pop	{r4, r5, lr}
   169ac:	b	10de0 <__fprintf_chk@plt>
   169b0:	mov	r2, #5
   169b4:	ldr	r1, [pc, #544]	; 16bdc <__assert_fail@plt+0x5d54>
   169b8:	mov	r0, #0
   169bc:	bl	10ccc <dcgettext@plt>
   169c0:	ldr	r1, [sp, #40]	; 0x28
   169c4:	ldr	r2, [sp, #36]	; 0x24
   169c8:	str	r1, [sp, #4]
   169cc:	str	r2, [sp]
   169d0:	ldr	r3, [sp, #32]
   169d4:	mov	r1, #1
   169d8:	mov	r2, r0
   169dc:	mov	r0, r5
   169e0:	bl	10de0 <__fprintf_chk@plt>
   169e4:	b	16948 <__assert_fail@plt+0x5ac0>
   169e8:	mov	r2, #5
   169ec:	ldr	r1, [pc, #492]	; 16be0 <__assert_fail@plt+0x5d58>
   169f0:	mov	r0, #0
   169f4:	bl	10ccc <dcgettext@plt>
   169f8:	ldr	r1, [sp, #40]	; 0x28
   169fc:	ldr	ip, [sp, #44]	; 0x2c
   16a00:	ldr	r2, [sp, #36]	; 0x24
   16a04:	ldr	r3, [sp, #32]
   16a08:	stmib	sp, {r1, ip}
   16a0c:	str	r2, [sp]
   16a10:	mov	r1, #1
   16a14:	mov	r2, r0
   16a18:	mov	r0, r5
   16a1c:	bl	10de0 <__fprintf_chk@plt>
   16a20:	b	16948 <__assert_fail@plt+0x5ac0>
   16a24:	mov	r2, #5
   16a28:	ldr	r1, [pc, #436]	; 16be4 <__assert_fail@plt+0x5d5c>
   16a2c:	mov	r0, #0
   16a30:	bl	10ccc <dcgettext@plt>
   16a34:	add	r1, sp, #40	; 0x28
   16a38:	ldr	r2, [sp, #36]	; 0x24
   16a3c:	ldm	r1, {r1, ip, lr}
   16a40:	ldr	r3, [sp, #32]
   16a44:	str	r2, [sp]
   16a48:	stmib	sp, {r1, ip, lr}
   16a4c:	mov	r1, #1
   16a50:	mov	r2, r0
   16a54:	mov	r0, r5
   16a58:	bl	10de0 <__fprintf_chk@plt>
   16a5c:	b	16948 <__assert_fail@plt+0x5ac0>
   16a60:	mov	r2, #5
   16a64:	ldr	r1, [pc, #380]	; 16be8 <__assert_fail@plt+0x5d60>
   16a68:	mov	r0, #0
   16a6c:	bl	10ccc <dcgettext@plt>
   16a70:	add	r1, sp, #40	; 0x28
   16a74:	ldr	r2, [sp, #36]	; 0x24
   16a78:	ldm	r1, {r1, ip, lr}
   16a7c:	ldr	r4, [sp, #52]	; 0x34
   16a80:	str	r2, [sp]
   16a84:	stmib	sp, {r1, ip, lr}
   16a88:	mov	r1, #1
   16a8c:	ldr	r3, [sp, #32]
   16a90:	str	r4, [sp, #16]
   16a94:	mov	r2, r0
   16a98:	mov	r0, r5
   16a9c:	bl	10de0 <__fprintf_chk@plt>
   16aa0:	b	16948 <__assert_fail@plt+0x5ac0>
   16aa4:	mov	r2, #5
   16aa8:	ldr	r1, [pc, #316]	; 16bec <__assert_fail@plt+0x5d64>
   16aac:	mov	r0, #0
   16ab0:	bl	10ccc <dcgettext@plt>
   16ab4:	add	r1, sp, #40	; 0x28
   16ab8:	ldr	r2, [sp, #56]	; 0x38
   16abc:	ldm	r1, {r1, ip, lr}
   16ac0:	ldr	r4, [sp, #52]	; 0x34
   16ac4:	str	r2, [sp, #20]
   16ac8:	ldr	r2, [sp, #36]	; 0x24
   16acc:	stmib	sp, {r1, ip, lr}
   16ad0:	mov	r1, #1
   16ad4:	str	r2, [sp]
   16ad8:	ldr	r3, [sp, #32]
   16adc:	str	r4, [sp, #16]
   16ae0:	mov	r2, r0
   16ae4:	mov	r0, r5
   16ae8:	bl	10de0 <__fprintf_chk@plt>
   16aec:	b	16948 <__assert_fail@plt+0x5ac0>
   16af0:	mov	r2, #5
   16af4:	ldr	r1, [pc, #244]	; 16bf0 <__assert_fail@plt+0x5d68>
   16af8:	mov	r0, #0
   16afc:	bl	10ccc <dcgettext@plt>
   16b00:	ldr	r1, [sp, #60]	; 0x3c
   16b04:	ldr	r2, [sp, #56]	; 0x38
   16b08:	ldr	lr, [sp, #48]	; 0x30
   16b0c:	ldr	ip, [sp, #44]	; 0x2c
   16b10:	str	r1, [sp, #24]
   16b14:	ldr	r1, [sp, #40]	; 0x28
   16b18:	ldr	r4, [sp, #52]	; 0x34
   16b1c:	str	r2, [sp, #20]
   16b20:	ldr	r2, [sp, #36]	; 0x24
   16b24:	stmib	sp, {r1, ip, lr}
   16b28:	mov	r1, #1
   16b2c:	str	r2, [sp]
   16b30:	ldr	r3, [sp, #32]
   16b34:	str	r4, [sp, #16]
   16b38:	mov	r2, r0
   16b3c:	mov	r0, r5
   16b40:	bl	10de0 <__fprintf_chk@plt>
   16b44:	b	16948 <__assert_fail@plt+0x5ac0>
   16b48:	str	r3, [sp]
   16b4c:	mov	r1, #1
   16b50:	mov	r3, r2
   16b54:	mov	r0, r5
   16b58:	ldr	r2, [pc, #148]	; 16bf4 <__assert_fail@plt+0x5d6c>
   16b5c:	bl	10de0 <__fprintf_chk@plt>
   16b60:	b	16850 <__assert_fail@plt+0x59c8>
   16b64:	mov	r2, #5
   16b68:	ldr	r1, [pc, #136]	; 16bf8 <__assert_fail@plt+0x5d70>
   16b6c:	b	168f4 <__assert_fail@plt+0x5a6c>
   16b70:	mov	r4, r0
   16b74:	b	16830 <__assert_fail@plt+0x59a8>
   16b78:	mov	r4, #1
   16b7c:	b	16830 <__assert_fail@plt+0x59a8>
   16b80:	mov	r4, #2
   16b84:	b	16830 <__assert_fail@plt+0x59a8>
   16b88:	mov	r4, #3
   16b8c:	b	16830 <__assert_fail@plt+0x59a8>
   16b90:	mov	r4, #4
   16b94:	b	16830 <__assert_fail@plt+0x59a8>
   16b98:	mov	r4, #5
   16b9c:	b	16830 <__assert_fail@plt+0x59a8>
   16ba0:	mov	r4, #6
   16ba4:	b	16830 <__assert_fail@plt+0x59a8>
   16ba8:	mov	r4, #7
   16bac:	b	16830 <__assert_fail@plt+0x59a8>
   16bb0:	mov	r4, #8
   16bb4:	b	16830 <__assert_fail@plt+0x59a8>
   16bb8:	andeq	r8, r1, ip, asr #13
   16bbc:	andeq	r8, r1, r0, ror #13
   16bc0:	andeq	r0, r0, r6, ror #15
   16bc4:			; <UNDEFINED> instruction: 0x000189b8
   16bc8:	andeq	r8, r1, r4, ror #13
   16bcc:	muleq	r1, r0, r7
   16bd0:	andeq	r8, r1, r0, asr #17
   16bd4:			; <UNDEFINED> instruction: 0x000187b4
   16bd8:	andeq	r8, r1, r4, asr #15
   16bdc:	ldrdeq	r8, [r1], -ip
   16be0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16be4:	andeq	r8, r1, r8, lsl r8
   16be8:	andeq	r8, r1, ip, lsr r8
   16bec:	andeq	r8, r1, r4, ror #16
   16bf0:	muleq	r1, r0, r8
   16bf4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16bf8:	strdeq	r8, [r1], -r4
   16bfc:	push	{r3}		; (str r3, [sp, #-4]!)
   16c00:	push	{lr}		; (str lr, [sp, #-4]!)
   16c04:	sub	sp, sp, #56	; 0x38
   16c08:	add	r3, sp, #64	; 0x40
   16c0c:	ldr	ip, [sp, #64]	; 0x40
   16c10:	str	r3, [sp, #12]
   16c14:	cmp	ip, #0
   16c18:	str	ip, [sp, #16]
   16c1c:	beq	16cb4 <__assert_fail@plt+0x5e2c>
   16c20:	ldr	ip, [sp, #68]	; 0x44
   16c24:	cmp	ip, #0
   16c28:	str	ip, [sp, #20]
   16c2c:	beq	16cd4 <__assert_fail@plt+0x5e4c>
   16c30:	ldr	ip, [sp, #72]	; 0x48
   16c34:	cmp	ip, #0
   16c38:	str	ip, [sp, #24]
   16c3c:	beq	16cdc <__assert_fail@plt+0x5e54>
   16c40:	ldr	ip, [sp, #76]	; 0x4c
   16c44:	cmp	ip, #0
   16c48:	str	ip, [sp, #28]
   16c4c:	beq	16ce4 <__assert_fail@plt+0x5e5c>
   16c50:	ldr	ip, [sp, #80]	; 0x50
   16c54:	cmp	ip, #0
   16c58:	str	ip, [sp, #32]
   16c5c:	beq	16cec <__assert_fail@plt+0x5e64>
   16c60:	ldr	ip, [sp, #84]	; 0x54
   16c64:	cmp	ip, #0
   16c68:	str	ip, [sp, #36]	; 0x24
   16c6c:	beq	16cf4 <__assert_fail@plt+0x5e6c>
   16c70:	ldr	ip, [sp, #88]	; 0x58
   16c74:	cmp	ip, #0
   16c78:	str	ip, [sp, #40]	; 0x28
   16c7c:	beq	16cfc <__assert_fail@plt+0x5e74>
   16c80:	ldr	ip, [sp, #92]	; 0x5c
   16c84:	cmp	ip, #0
   16c88:	str	ip, [sp, #44]	; 0x2c
   16c8c:	beq	16d04 <__assert_fail@plt+0x5e7c>
   16c90:	ldr	ip, [sp, #96]	; 0x60
   16c94:	cmp	ip, #0
   16c98:	str	ip, [sp, #48]	; 0x30
   16c9c:	beq	16d0c <__assert_fail@plt+0x5e84>
   16ca0:	ldr	ip, [sp, #100]	; 0x64
   16ca4:	cmp	ip, #0
   16ca8:	str	ip, [sp, #52]	; 0x34
   16cac:	movne	ip, #10
   16cb0:	moveq	ip, #9
   16cb4:	add	r3, sp, #16
   16cb8:	stm	sp, {r3, ip}
   16cbc:	ldr	r3, [sp, #60]	; 0x3c
   16cc0:	bl	163a8 <__assert_fail@plt+0x5520>
   16cc4:	add	sp, sp, #56	; 0x38
   16cc8:	pop	{lr}		; (ldr lr, [sp], #4)
   16ccc:	add	sp, sp, #4
   16cd0:	bx	lr
   16cd4:	mov	ip, #1
   16cd8:	b	16cb4 <__assert_fail@plt+0x5e2c>
   16cdc:	mov	ip, #2
   16ce0:	b	16cb4 <__assert_fail@plt+0x5e2c>
   16ce4:	mov	ip, #3
   16ce8:	b	16cb4 <__assert_fail@plt+0x5e2c>
   16cec:	mov	ip, #4
   16cf0:	b	16cb4 <__assert_fail@plt+0x5e2c>
   16cf4:	mov	ip, #5
   16cf8:	b	16cb4 <__assert_fail@plt+0x5e2c>
   16cfc:	mov	ip, #6
   16d00:	b	16cb4 <__assert_fail@plt+0x5e2c>
   16d04:	mov	ip, #7
   16d08:	b	16cb4 <__assert_fail@plt+0x5e2c>
   16d0c:	mov	ip, #8
   16d10:	b	16cb4 <__assert_fail@plt+0x5e2c>
   16d14:	ldr	r3, [pc, #116]	; 16d90 <__assert_fail@plt+0x5f08>
   16d18:	push	{r4, lr}
   16d1c:	mov	r0, #10
   16d20:	ldr	r1, [r3]
   16d24:	bl	10cc0 <fputc_unlocked@plt>
   16d28:	mov	r2, #5
   16d2c:	ldr	r1, [pc, #96]	; 16d94 <__assert_fail@plt+0x5f0c>
   16d30:	mov	r0, #0
   16d34:	bl	10ccc <dcgettext@plt>
   16d38:	ldr	r2, [pc, #88]	; 16d98 <__assert_fail@plt+0x5f10>
   16d3c:	mov	r1, r0
   16d40:	mov	r0, #1
   16d44:	bl	10dc8 <__printf_chk@plt>
   16d48:	mov	r2, #5
   16d4c:	ldr	r1, [pc, #72]	; 16d9c <__assert_fail@plt+0x5f14>
   16d50:	mov	r0, #0
   16d54:	bl	10ccc <dcgettext@plt>
   16d58:	ldr	r3, [pc, #64]	; 16da0 <__assert_fail@plt+0x5f18>
   16d5c:	ldr	r2, [pc, #64]	; 16da4 <__assert_fail@plt+0x5f1c>
   16d60:	mov	r1, r0
   16d64:	mov	r0, #1
   16d68:	bl	10dc8 <__printf_chk@plt>
   16d6c:	mov	r2, #5
   16d70:	ldr	r1, [pc, #48]	; 16da8 <__assert_fail@plt+0x5f20>
   16d74:	mov	r0, #0
   16d78:	bl	10ccc <dcgettext@plt>
   16d7c:	ldr	r2, [pc, #40]	; 16dac <__assert_fail@plt+0x5f24>
   16d80:	pop	{r4, lr}
   16d84:	mov	r1, r0
   16d88:	mov	r0, #1
   16d8c:	b	10dc8 <__printf_chk@plt>
   16d90:	andeq	r9, r2, ip, asr #2
   16d94:	andeq	r8, r1, r0, lsr r9
   16d98:	andeq	r8, r1, r4, asr #18
   16d9c:	andeq	r8, r1, ip, asr r9
   16da0:	andeq	r8, r1, r0, lsl #1
   16da4:	andeq	r8, r1, r8, lsr #1
   16da8:	andeq	r8, r1, r0, ror r9
   16dac:	muleq	r1, r8, r9
   16db0:	push	{r4, r5, r6, lr}
   16db4:	mov	r6, r0
   16db8:	mov	r5, r1
   16dbc:	mov	r4, r2
   16dc0:	bl	17640 <__assert_fail@plt+0x67b8>
   16dc4:	cmp	r0, #0
   16dc8:	popne	{r4, r5, r6, pc}
   16dcc:	cmp	r6, #0
   16dd0:	beq	16de0 <__assert_fail@plt+0x5f58>
   16dd4:	cmp	r5, #0
   16dd8:	cmpne	r4, #0
   16ddc:	popeq	{r4, r5, r6, pc}
   16de0:	bl	1742c <__assert_fail@plt+0x65a4>
   16de4:	push	{r4, lr}
   16de8:	bl	174b4 <__assert_fail@plt+0x662c>
   16dec:	cmp	r0, #0
   16df0:	popne	{r4, pc}
   16df4:	bl	1742c <__assert_fail@plt+0x65a4>
   16df8:	push	{r4, lr}
   16dfc:	bl	174b4 <__assert_fail@plt+0x662c>
   16e00:	cmp	r0, #0
   16e04:	popne	{r4, pc}
   16e08:	bl	1742c <__assert_fail@plt+0x65a4>
   16e0c:	push	{r4, lr}
   16e10:	bl	174b4 <__assert_fail@plt+0x662c>
   16e14:	cmp	r0, #0
   16e18:	popne	{r4, pc}
   16e1c:	bl	1742c <__assert_fail@plt+0x65a4>
   16e20:	push	{r4, r5, r6, lr}
   16e24:	mov	r5, r0
   16e28:	mov	r4, r1
   16e2c:	bl	174e0 <__assert_fail@plt+0x6658>
   16e30:	cmp	r0, #0
   16e34:	popne	{r4, r5, r6, pc}
   16e38:	adds	r4, r4, #0
   16e3c:	movne	r4, #1
   16e40:	cmp	r5, #0
   16e44:	orreq	r4, r4, #1
   16e48:	cmp	r4, #0
   16e4c:	popeq	{r4, r5, r6, pc}
   16e50:	bl	1742c <__assert_fail@plt+0x65a4>
   16e54:	push	{r4, lr}
   16e58:	cmp	r1, #0
   16e5c:	orreq	r1, r1, #1
   16e60:	bl	174e0 <__assert_fail@plt+0x6658>
   16e64:	cmp	r0, #0
   16e68:	popne	{r4, pc}
   16e6c:	bl	1742c <__assert_fail@plt+0x65a4>
   16e70:	push	{r4, r5, r6, lr}
   16e74:	mov	r6, r0
   16e78:	mov	r5, r1
   16e7c:	mov	r4, r2
   16e80:	bl	17640 <__assert_fail@plt+0x67b8>
   16e84:	cmp	r0, #0
   16e88:	popne	{r4, r5, r6, pc}
   16e8c:	cmp	r6, #0
   16e90:	beq	16ea0 <__assert_fail@plt+0x6018>
   16e94:	cmp	r5, #0
   16e98:	cmpne	r4, #0
   16e9c:	popeq	{r4, r5, r6, pc}
   16ea0:	bl	1742c <__assert_fail@plt+0x65a4>
   16ea4:	cmp	r2, #0
   16ea8:	cmpne	r1, #0
   16eac:	moveq	r2, #1
   16eb0:	moveq	r1, r2
   16eb4:	push	{r4, lr}
   16eb8:	bl	17640 <__assert_fail@plt+0x67b8>
   16ebc:	cmp	r0, #0
   16ec0:	popne	{r4, pc}
   16ec4:	bl	1742c <__assert_fail@plt+0x65a4>
   16ec8:	push	{r4, lr}
   16ecc:	mov	r2, r1
   16ed0:	mov	r1, r0
   16ed4:	mov	r0, #0
   16ed8:	bl	17640 <__assert_fail@plt+0x67b8>
   16edc:	cmp	r0, #0
   16ee0:	popne	{r4, pc}
   16ee4:	bl	1742c <__assert_fail@plt+0x65a4>
   16ee8:	cmp	r1, #0
   16eec:	cmpne	r0, #0
   16ef0:	moveq	r2, #1
   16ef4:	movne	r2, r1
   16ef8:	moveq	r1, r2
   16efc:	movne	r1, r0
   16f00:	push	{r4, lr}
   16f04:	mov	r0, #0
   16f08:	bl	17640 <__assert_fail@plt+0x67b8>
   16f0c:	cmp	r0, #0
   16f10:	popne	{r4, pc}
   16f14:	bl	1742c <__assert_fail@plt+0x65a4>
   16f18:	cmp	r0, #0
   16f1c:	push	{r4, r5, r6, lr}
   16f20:	mov	r5, r1
   16f24:	ldr	r4, [r1]
   16f28:	beq	16f64 <__assert_fail@plt+0x60dc>
   16f2c:	lsr	r2, r4, #1
   16f30:	add	r3, r2, #1
   16f34:	mvn	r3, r3
   16f38:	cmp	r4, r3
   16f3c:	bhi	16f80 <__assert_fail@plt+0x60f8>
   16f40:	add	r4, r4, #1
   16f44:	add	r4, r4, r2
   16f48:	mov	r1, r4
   16f4c:	mov	r2, #1
   16f50:	bl	17640 <__assert_fail@plt+0x67b8>
   16f54:	cmp	r0, #0
   16f58:	beq	16f84 <__assert_fail@plt+0x60fc>
   16f5c:	str	r4, [r5]
   16f60:	pop	{r4, r5, r6, pc}
   16f64:	cmp	r4, #0
   16f68:	moveq	r4, #64	; 0x40
   16f6c:	mov	r1, r4
   16f70:	mov	r2, #1
   16f74:	bl	17640 <__assert_fail@plt+0x67b8>
   16f78:	cmp	r0, #0
   16f7c:	bne	16f5c <__assert_fail@plt+0x60d4>
   16f80:	bl	1742c <__assert_fail@plt+0x65a4>
   16f84:	cmp	r4, #0
   16f88:	bne	16f80 <__assert_fail@plt+0x60f8>
   16f8c:	str	r4, [r5]
   16f90:	pop	{r4, r5, r6, pc}
   16f94:	cmp	r0, #0
   16f98:	push	{r4, r5, r6, lr}
   16f9c:	mov	r5, r1
   16fa0:	ldr	r4, [r1]
   16fa4:	mov	r6, r2
   16fa8:	beq	16fec <__assert_fail@plt+0x6164>
   16fac:	lsr	r1, r4, #1
   16fb0:	add	r3, r1, #1
   16fb4:	mvn	r3, r3
   16fb8:	cmp	r4, r3
   16fbc:	bhi	17024 <__assert_fail@plt+0x619c>
   16fc0:	add	r4, r4, #1
   16fc4:	add	r4, r4, r1
   16fc8:	mov	r1, r4
   16fcc:	bl	17640 <__assert_fail@plt+0x67b8>
   16fd0:	cmp	r0, #0
   16fd4:	bne	16fe4 <__assert_fail@plt+0x615c>
   16fd8:	cmp	r4, #0
   16fdc:	cmpne	r6, #0
   16fe0:	bne	17024 <__assert_fail@plt+0x619c>
   16fe4:	str	r4, [r5]
   16fe8:	pop	{r4, r5, r6, pc}
   16fec:	cmp	r4, #0
   16ff0:	bne	1700c <__assert_fail@plt+0x6184>
   16ff4:	mov	r1, r2
   16ff8:	mov	r0, #64	; 0x40
   16ffc:	bl	17780 <__assert_fail@plt+0x68f8>
   17000:	cmp	r0, #0
   17004:	movne	r4, r0
   17008:	addeq	r4, r0, #1
   1700c:	mov	r2, r6
   17010:	mov	r1, r4
   17014:	mov	r0, #0
   17018:	bl	17640 <__assert_fail@plt+0x67b8>
   1701c:	cmp	r0, #0
   17020:	bne	16fe4 <__assert_fail@plt+0x615c>
   17024:	bl	1742c <__assert_fail@plt+0x65a4>
   17028:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1702c:	sub	sp, sp, #12
   17030:	ldr	r6, [r1]
   17034:	mov	r8, r1
   17038:	mov	r9, r0
   1703c:	asrs	r4, r6, #1
   17040:	mov	sl, r2
   17044:	mov	fp, r3
   17048:	ldr	r7, [sp, #48]	; 0x30
   1704c:	bmi	171c8 <__assert_fail@plt+0x6340>
   17050:	mvn	r1, #-2147483648	; 0x80000000
   17054:	sub	r1, r1, r4
   17058:	cmp	r6, r1
   1705c:	movle	r1, #0
   17060:	movgt	r1, #1
   17064:	mvn	r3, fp
   17068:	cmp	r1, #0
   1706c:	addeq	r4, r4, r6
   17070:	mvnne	r4, #-2147483648	; 0x80000000
   17074:	lsr	r3, r3, #31
   17078:	cmp	fp, r4
   1707c:	movge	r2, #0
   17080:	andlt	r2, r3, #1
   17084:	cmp	r2, #0
   17088:	beq	17178 <__assert_fail@plt+0x62f0>
   1708c:	cmp	r7, #0
   17090:	blt	17260 <__assert_fail@plt+0x63d8>
   17094:	bne	17258 <__assert_fail@plt+0x63d0>
   17098:	mov	r5, #64	; 0x40
   1709c:	mov	r1, r7
   170a0:	mov	r0, r5
   170a4:	str	r3, [sp, #4]
   170a8:	bl	1798c <__assert_fail@plt+0x6b04>
   170ac:	mov	r1, r7
   170b0:	mov	r4, r0
   170b4:	mov	r0, r5
   170b8:	bl	17bac <__assert_fail@plt+0x6d24>
   170bc:	ldr	r3, [sp, #4]
   170c0:	sub	r5, r5, r1
   170c4:	cmp	r9, #0
   170c8:	sub	r2, r4, r6
   170cc:	streq	r9, [r8]
   170d0:	cmp	r2, sl
   170d4:	bge	17158 <__assert_fail@plt+0x62d0>
   170d8:	cmp	sl, #0
   170dc:	blt	171f8 <__assert_fail@plt+0x6370>
   170e0:	cmp	r6, #0
   170e4:	blt	17104 <__assert_fail@plt+0x627c>
   170e8:	mvn	r2, #-2147483648	; 0x80000000
   170ec:	sub	r2, r2, sl
   170f0:	cmp	r6, r2
   170f4:	movle	r2, #0
   170f8:	movgt	r2, #1
   170fc:	cmp	r2, #0
   17100:	bne	171f4 <__assert_fail@plt+0x636c>
   17104:	add	r6, r6, sl
   17108:	cmp	fp, r6
   1710c:	movge	r3, #0
   17110:	andlt	r3, r3, #1
   17114:	cmp	r3, #0
   17118:	mov	r4, r6
   1711c:	bne	171f4 <__assert_fail@plt+0x636c>
   17120:	cmp	r7, #0
   17124:	blt	1720c <__assert_fail@plt+0x6384>
   17128:	beq	17154 <__assert_fail@plt+0x62cc>
   1712c:	cmp	r6, #0
   17130:	blt	172b0 <__assert_fail@plt+0x6428>
   17134:	mov	r1, r7
   17138:	mvn	r0, #-2147483648	; 0x80000000
   1713c:	bl	1798c <__assert_fail@plt+0x6b04>
   17140:	cmp	r6, r0
   17144:	movle	r0, #0
   17148:	movgt	r0, #1
   1714c:	cmp	r0, #0
   17150:	bne	171f4 <__assert_fail@plt+0x636c>
   17154:	mul	r5, r6, r7
   17158:	mov	r1, r5
   1715c:	mov	r0, r9
   17160:	bl	174e0 <__assert_fail@plt+0x6658>
   17164:	cmp	r0, #0
   17168:	beq	171dc <__assert_fail@plt+0x6354>
   1716c:	str	r4, [r8]
   17170:	add	sp, sp, #12
   17174:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17178:	cmp	r7, #0
   1717c:	blt	17238 <__assert_fail@plt+0x63b0>
   17180:	beq	17098 <__assert_fail@plt+0x6210>
   17184:	cmp	r4, #0
   17188:	blt	17268 <__assert_fail@plt+0x63e0>
   1718c:	mov	r1, r7
   17190:	mvn	r0, #-2147483648	; 0x80000000
   17194:	str	r3, [sp, #4]
   17198:	bl	1798c <__assert_fail@plt+0x6b04>
   1719c:	ldr	r3, [sp, #4]
   171a0:	cmp	r0, r4
   171a4:	movge	r0, #0
   171a8:	movlt	r0, #1
   171ac:	cmp	r0, #0
   171b0:	mvnne	r5, #-2147483648	; 0x80000000
   171b4:	bne	1709c <__assert_fail@plt+0x6214>
   171b8:	mul	r5, r7, r4
   171bc:	cmp	r5, #63	; 0x3f
   171c0:	bgt	170c4 <__assert_fail@plt+0x623c>
   171c4:	b	17098 <__assert_fail@plt+0x6210>
   171c8:	rsb	r1, r4, #-2147483648	; 0x80000000
   171cc:	cmp	r6, r1
   171d0:	movge	r1, #0
   171d4:	movlt	r1, #1
   171d8:	b	17064 <__assert_fail@plt+0x61dc>
   171dc:	adds	r5, r5, #0
   171e0:	movne	r5, #1
   171e4:	cmp	r9, #0
   171e8:	orreq	r5, r5, #1
   171ec:	cmp	r5, #0
   171f0:	beq	1716c <__assert_fail@plt+0x62e4>
   171f4:	bl	1742c <__assert_fail@plt+0x65a4>
   171f8:	rsb	r2, sl, #-2147483648	; 0x80000000
   171fc:	cmp	r6, r2
   17200:	movge	r2, #0
   17204:	movlt	r2, #1
   17208:	b	170fc <__assert_fail@plt+0x6274>
   1720c:	cmp	r6, #0
   17210:	blt	17294 <__assert_fail@plt+0x640c>
   17214:	cmn	r7, #1
   17218:	beq	17154 <__assert_fail@plt+0x62cc>
   1721c:	mov	r1, r7
   17220:	mov	r0, #-2147483648	; 0x80000000
   17224:	bl	1798c <__assert_fail@plt+0x6b04>
   17228:	cmp	r6, r0
   1722c:	movle	r0, #0
   17230:	movgt	r0, #1
   17234:	b	1714c <__assert_fail@plt+0x62c4>
   17238:	cmp	r4, #0
   1723c:	blt	172d4 <__assert_fail@plt+0x644c>
   17240:	cmn	r7, #1
   17244:	beq	171b8 <__assert_fail@plt+0x6330>
   17248:	str	r3, [sp, #4]
   1724c:	mov	r1, r7
   17250:	mov	r0, #-2147483648	; 0x80000000
   17254:	b	17198 <__assert_fail@plt+0x6310>
   17258:	mov	r4, fp
   1725c:	b	1718c <__assert_fail@plt+0x6304>
   17260:	mov	r4, fp
   17264:	b	17240 <__assert_fail@plt+0x63b8>
   17268:	cmn	r4, #1
   1726c:	beq	171b8 <__assert_fail@plt+0x6330>
   17270:	mov	r1, r4
   17274:	mov	r0, #-2147483648	; 0x80000000
   17278:	str	r3, [sp, #4]
   1727c:	bl	1798c <__assert_fail@plt+0x6b04>
   17280:	ldr	r3, [sp, #4]
   17284:	cmp	r7, r0
   17288:	movle	r0, #0
   1728c:	movgt	r0, #1
   17290:	b	171ac <__assert_fail@plt+0x6324>
   17294:	mov	r1, r7
   17298:	mvn	r0, #-2147483648	; 0x80000000
   1729c:	bl	1798c <__assert_fail@plt+0x6b04>
   172a0:	cmp	r6, r0
   172a4:	movge	r0, #0
   172a8:	movlt	r0, #1
   172ac:	b	1714c <__assert_fail@plt+0x62c4>
   172b0:	cmn	r6, #1
   172b4:	beq	17154 <__assert_fail@plt+0x62cc>
   172b8:	mov	r1, r6
   172bc:	mov	r0, #-2147483648	; 0x80000000
   172c0:	bl	1798c <__assert_fail@plt+0x6b04>
   172c4:	cmp	r7, r0
   172c8:	movle	r0, #0
   172cc:	movgt	r0, #1
   172d0:	b	1714c <__assert_fail@plt+0x62c4>
   172d4:	mov	r1, r7
   172d8:	mvn	r0, #-2147483648	; 0x80000000
   172dc:	str	r3, [sp, #4]
   172e0:	bl	1798c <__assert_fail@plt+0x6b04>
   172e4:	ldr	r3, [sp, #4]
   172e8:	cmp	r0, r4
   172ec:	movle	r0, #0
   172f0:	movgt	r0, #1
   172f4:	b	171ac <__assert_fail@plt+0x6324>
   172f8:	push	{r4, lr}
   172fc:	mov	r1, #1
   17300:	bl	1746c <__assert_fail@plt+0x65e4>
   17304:	cmp	r0, #0
   17308:	popne	{r4, pc}
   1730c:	bl	1742c <__assert_fail@plt+0x65a4>
   17310:	push	{r4, lr}
   17314:	mov	r1, #1
   17318:	bl	1746c <__assert_fail@plt+0x65e4>
   1731c:	cmp	r0, #0
   17320:	popne	{r4, pc}
   17324:	bl	1742c <__assert_fail@plt+0x65a4>
   17328:	push	{r4, lr}
   1732c:	bl	1746c <__assert_fail@plt+0x65e4>
   17330:	cmp	r0, #0
   17334:	popne	{r4, pc}
   17338:	bl	1742c <__assert_fail@plt+0x65a4>
   1733c:	push	{r4, lr}
   17340:	bl	1746c <__assert_fail@plt+0x65e4>
   17344:	cmp	r0, #0
   17348:	popne	{r4, pc}
   1734c:	bl	1742c <__assert_fail@plt+0x65a4>
   17350:	push	{r4, r5, r6, lr}
   17354:	mov	r6, r0
   17358:	mov	r0, r1
   1735c:	mov	r4, r1
   17360:	bl	174b4 <__assert_fail@plt+0x662c>
   17364:	subs	r5, r0, #0
   17368:	beq	17380 <__assert_fail@plt+0x64f8>
   1736c:	mov	r2, r4
   17370:	mov	r1, r6
   17374:	bl	10c9c <memcpy@plt>
   17378:	mov	r0, r5
   1737c:	pop	{r4, r5, r6, pc}
   17380:	bl	1742c <__assert_fail@plt+0x65a4>
   17384:	push	{r4, r5, r6, lr}
   17388:	mov	r6, r0
   1738c:	mov	r0, r1
   17390:	mov	r4, r1
   17394:	bl	174b4 <__assert_fail@plt+0x662c>
   17398:	subs	r5, r0, #0
   1739c:	beq	173b4 <__assert_fail@plt+0x652c>
   173a0:	mov	r2, r4
   173a4:	mov	r1, r6
   173a8:	bl	10c9c <memcpy@plt>
   173ac:	mov	r0, r5
   173b0:	pop	{r4, r5, r6, pc}
   173b4:	bl	1742c <__assert_fail@plt+0x65a4>
   173b8:	push	{r4, r5, r6, lr}
   173bc:	mov	r6, r0
   173c0:	add	r0, r1, #1
   173c4:	mov	r4, r1
   173c8:	bl	174b4 <__assert_fail@plt+0x662c>
   173cc:	subs	r5, r0, #0
   173d0:	beq	173f0 <__assert_fail@plt+0x6568>
   173d4:	mov	r3, #0
   173d8:	mov	r1, r6
   173dc:	strb	r3, [r5, r4]
   173e0:	mov	r2, r4
   173e4:	bl	10c9c <memcpy@plt>
   173e8:	mov	r0, r5
   173ec:	pop	{r4, r5, r6, pc}
   173f0:	bl	1742c <__assert_fail@plt+0x65a4>
   173f4:	push	{r4, r5, r6, lr}
   173f8:	mov	r6, r0
   173fc:	bl	10d98 <strlen@plt>
   17400:	add	r4, r0, #1
   17404:	mov	r0, r4
   17408:	bl	174b4 <__assert_fail@plt+0x662c>
   1740c:	subs	r5, r0, #0
   17410:	beq	17428 <__assert_fail@plt+0x65a0>
   17414:	mov	r2, r4
   17418:	mov	r1, r6
   1741c:	bl	10c9c <memcpy@plt>
   17420:	mov	r0, r5
   17424:	pop	{r4, r5, r6, pc}
   17428:	bl	1742c <__assert_fail@plt+0x65a4>
   1742c:	ldr	r3, [pc, #44]	; 17460 <__assert_fail@plt+0x65d8>
   17430:	push	{r4, lr}
   17434:	mov	r2, #5
   17438:	ldr	r1, [pc, #36]	; 17464 <__assert_fail@plt+0x65dc>
   1743c:	mov	r0, #0
   17440:	ldr	r4, [r3]
   17444:	bl	10ccc <dcgettext@plt>
   17448:	ldr	r2, [pc, #24]	; 17468 <__assert_fail@plt+0x65e0>
   1744c:	mov	r1, #0
   17450:	mov	r3, r0
   17454:	mov	r0, r4
   17458:	bl	10d38 <error@plt>
   1745c:	bl	10e70 <abort@plt>
   17460:	andeq	r9, r2, ip, ror #1
   17464:	andeq	r8, r1, r8, ror #19
   17468:	andeq	r8, r1, r0, lsr r3
   1746c:	cmp	r1, #0
   17470:	cmpne	r0, #0
   17474:	moveq	r1, #1
   17478:	moveq	r0, r1
   1747c:	umull	r2, r3, r0, r1
   17480:	adds	r3, r3, #0
   17484:	movne	r3, #1
   17488:	cmp	r2, #0
   1748c:	blt	1749c <__assert_fail@plt+0x6614>
   17490:	cmp	r3, #0
   17494:	bne	1749c <__assert_fail@plt+0x6614>
   17498:	b	10c3c <calloc@plt>
   1749c:	push	{r4, lr}
   174a0:	bl	10da4 <__errno_location@plt>
   174a4:	mov	r3, #12
   174a8:	str	r3, [r0]
   174ac:	mov	r0, #0
   174b0:	pop	{r4, pc}
   174b4:	cmp	r0, #0
   174b8:	moveq	r0, #1
   174bc:	cmp	r0, #0
   174c0:	blt	174c8 <__assert_fail@plt+0x6640>
   174c4:	b	10d44 <malloc@plt>
   174c8:	push	{r4, lr}
   174cc:	bl	10da4 <__errno_location@plt>
   174d0:	mov	r3, #12
   174d4:	str	r3, [r0]
   174d8:	mov	r0, #0
   174dc:	pop	{r4, pc}
   174e0:	cmp	r0, #0
   174e4:	beq	17508 <__assert_fail@plt+0x6680>
   174e8:	cmp	r1, #0
   174ec:	push	{lr}		; (str lr, [sp, #-4]!)
   174f0:	sub	sp, sp, #12
   174f4:	beq	17510 <__assert_fail@plt+0x6688>
   174f8:	blt	17528 <__assert_fail@plt+0x66a0>
   174fc:	add	sp, sp, #12
   17500:	pop	{lr}		; (ldr lr, [sp], #4)
   17504:	b	10cd8 <realloc@plt>
   17508:	mov	r0, r1
   1750c:	b	174b4 <__assert_fail@plt+0x662c>
   17510:	str	r1, [sp, #4]
   17514:	bl	12264 <__assert_fail@plt+0x13dc>
   17518:	ldr	r3, [sp, #4]
   1751c:	mov	r0, r3
   17520:	add	sp, sp, #12
   17524:	pop	{pc}		; (ldr pc, [sp], #4)
   17528:	bl	10da4 <__errno_location@plt>
   1752c:	mov	r2, #12
   17530:	mov	r3, #0
   17534:	str	r2, [r0]
   17538:	b	1751c <__assert_fail@plt+0x6694>
   1753c:	push	{r4, r5, r6, lr}
   17540:	mov	r4, r0
   17544:	bl	10d20 <__fpending@plt>
   17548:	ldr	r5, [r4]
   1754c:	and	r5, r5, #32
   17550:	mov	r6, r0
   17554:	mov	r0, r4
   17558:	bl	12164 <__assert_fail@plt+0x12dc>
   1755c:	cmp	r5, #0
   17560:	mov	r4, r0
   17564:	bne	17584 <__assert_fail@plt+0x66fc>
   17568:	cmp	r0, #0
   1756c:	beq	1757c <__assert_fail@plt+0x66f4>
   17570:	cmp	r6, #0
   17574:	beq	175a0 <__assert_fail@plt+0x6718>
   17578:	mvn	r4, #0
   1757c:	mov	r0, r4
   17580:	pop	{r4, r5, r6, pc}
   17584:	cmp	r0, #0
   17588:	bne	17578 <__assert_fail@plt+0x66f0>
   1758c:	bl	10da4 <__errno_location@plt>
   17590:	str	r4, [r0]
   17594:	mvn	r4, #0
   17598:	mov	r0, r4
   1759c:	pop	{r4, r5, r6, pc}
   175a0:	bl	10da4 <__errno_location@plt>
   175a4:	ldr	r4, [r0]
   175a8:	subs	r4, r4, #9
   175ac:	mvnne	r4, #0
   175b0:	mov	r0, r4
   175b4:	pop	{r4, r5, r6, pc}
   175b8:	push	{r4, lr}
   175bc:	mov	r0, #14
   175c0:	bl	10e34 <nl_langinfo@plt>
   175c4:	cmp	r0, #0
   175c8:	beq	175e0 <__assert_fail@plt+0x6758>
   175cc:	ldrb	r2, [r0]
   175d0:	ldr	r3, [pc, #16]	; 175e8 <__assert_fail@plt+0x6760>
   175d4:	cmp	r2, #0
   175d8:	moveq	r0, r3
   175dc:	pop	{r4, pc}
   175e0:	ldr	r0, [pc]	; 175e8 <__assert_fail@plt+0x6760>
   175e4:	pop	{r4, pc}
   175e8:	strdeq	r8, [r1], -ip
   175ec:	push	{r4, r5, r6, r7, lr}
   175f0:	subs	r6, r0, #0
   175f4:	sub	sp, sp, #12
   175f8:	addeq	r6, sp, #4
   175fc:	mov	r0, r6
   17600:	mov	r5, r2
   17604:	mov	r7, r1
   17608:	bl	10d2c <mbrtowc@plt>
   1760c:	cmp	r5, #0
   17610:	cmnne	r0, #3
   17614:	mov	r4, r0
   17618:	bls	17634 <__assert_fail@plt+0x67ac>
   1761c:	mov	r0, #0
   17620:	bl	1768c <__assert_fail@plt+0x6804>
   17624:	cmp	r0, #0
   17628:	moveq	r4, #1
   1762c:	ldrbeq	r3, [r7]
   17630:	streq	r3, [r6]
   17634:	mov	r0, r4
   17638:	add	sp, sp, #12
   1763c:	pop	{r4, r5, r6, r7, pc}
   17640:	push	{r4, r5, r6, lr}
   17644:	subs	r4, r2, #0
   17648:	mov	r6, r0
   1764c:	mov	r5, r1
   17650:	beq	1767c <__assert_fail@plt+0x67f4>
   17654:	mov	r1, r4
   17658:	mvn	r0, #0
   1765c:	bl	17780 <__assert_fail@plt+0x68f8>
   17660:	cmp	r0, r5
   17664:	bcs	1767c <__assert_fail@plt+0x67f4>
   17668:	bl	10da4 <__errno_location@plt>
   1766c:	mov	r3, #12
   17670:	str	r3, [r0]
   17674:	mov	r0, #0
   17678:	pop	{r4, r5, r6, pc}
   1767c:	mul	r1, r5, r4
   17680:	mov	r0, r6
   17684:	pop	{r4, r5, r6, lr}
   17688:	b	174e0 <__assert_fail@plt+0x6658>
   1768c:	push	{lr}		; (str lr, [sp, #-4]!)
   17690:	sub	sp, sp, #268	; 0x10c
   17694:	add	r1, sp, #4
   17698:	ldr	r2, [pc, #60]	; 176dc <__assert_fail@plt+0x6854>
   1769c:	bl	176e8 <__assert_fail@plt+0x6860>
   176a0:	cmp	r0, #0
   176a4:	movne	r0, #0
   176a8:	bne	176d4 <__assert_fail@plt+0x684c>
   176ac:	ldr	r1, [pc, #44]	; 176e0 <__assert_fail@plt+0x6858>
   176b0:	add	r0, sp, #4
   176b4:	bl	10c60 <strcmp@plt>
   176b8:	cmp	r0, #0
   176bc:	beq	176d4 <__assert_fail@plt+0x684c>
   176c0:	add	r0, sp, #4
   176c4:	ldr	r1, [pc, #24]	; 176e4 <__assert_fail@plt+0x685c>
   176c8:	bl	10c60 <strcmp@plt>
   176cc:	adds	r0, r0, #0
   176d0:	movne	r0, #1
   176d4:	add	sp, sp, #268	; 0x10c
   176d8:	pop	{pc}		; (ldr pc, [sp], #4)
   176dc:	andeq	r0, r0, r1, lsl #2
   176e0:	andeq	r8, r1, r4, lsl #20
   176e4:	andeq	r8, r1, r8, lsl #20
   176e8:	push	{r4, r5, r6, lr}
   176ec:	mov	r5, r1
   176f0:	mov	r1, #0
   176f4:	mov	r4, r2
   176f8:	bl	10e1c <setlocale@plt>
   176fc:	subs	r6, r0, #0
   17700:	beq	1775c <__assert_fail@plt+0x68d4>
   17704:	bl	10d98 <strlen@plt>
   17708:	cmp	r4, r0
   1770c:	bhi	17744 <__assert_fail@plt+0x68bc>
   17710:	cmp	r4, #0
   17714:	bne	17720 <__assert_fail@plt+0x6898>
   17718:	mov	r0, #34	; 0x22
   1771c:	pop	{r4, r5, r6, pc}
   17720:	sub	r4, r4, #1
   17724:	mov	r1, r6
   17728:	mov	r2, r4
   1772c:	mov	r0, r5
   17730:	bl	10c9c <memcpy@plt>
   17734:	mov	r3, #0
   17738:	strb	r3, [r5, r4]
   1773c:	mov	r0, #34	; 0x22
   17740:	pop	{r4, r5, r6, pc}
   17744:	add	r2, r0, #1
   17748:	mov	r1, r6
   1774c:	mov	r0, r5
   17750:	bl	10c9c <memcpy@plt>
   17754:	mov	r0, #0
   17758:	pop	{r4, r5, r6, pc}
   1775c:	cmp	r4, #0
   17760:	beq	17770 <__assert_fail@plt+0x68e8>
   17764:	strb	r6, [r5]
   17768:	mov	r0, #22
   1776c:	pop	{r4, r5, r6, pc}
   17770:	mov	r0, #22
   17774:	pop	{r4, r5, r6, pc}
   17778:	mov	r1, #0
   1777c:	b	10e1c <setlocale@plt>
   17780:	subs	r2, r1, #1
   17784:	bxeq	lr
   17788:	bcc	17960 <__assert_fail@plt+0x6ad8>
   1778c:	cmp	r0, r1
   17790:	bls	17944 <__assert_fail@plt+0x6abc>
   17794:	tst	r1, r2
   17798:	beq	17950 <__assert_fail@plt+0x6ac8>
   1779c:	clz	r3, r0
   177a0:	clz	r2, r1
   177a4:	sub	r3, r2, r3
   177a8:	rsbs	r3, r3, #31
   177ac:	addne	r3, r3, r3, lsl #1
   177b0:	mov	r2, #0
   177b4:	addne	pc, pc, r3, lsl #2
   177b8:	nop			; (mov r0, r0)
   177bc:	cmp	r0, r1, lsl #31
   177c0:	adc	r2, r2, r2
   177c4:	subcs	r0, r0, r1, lsl #31
   177c8:	cmp	r0, r1, lsl #30
   177cc:	adc	r2, r2, r2
   177d0:	subcs	r0, r0, r1, lsl #30
   177d4:	cmp	r0, r1, lsl #29
   177d8:	adc	r2, r2, r2
   177dc:	subcs	r0, r0, r1, lsl #29
   177e0:	cmp	r0, r1, lsl #28
   177e4:	adc	r2, r2, r2
   177e8:	subcs	r0, r0, r1, lsl #28
   177ec:	cmp	r0, r1, lsl #27
   177f0:	adc	r2, r2, r2
   177f4:	subcs	r0, r0, r1, lsl #27
   177f8:	cmp	r0, r1, lsl #26
   177fc:	adc	r2, r2, r2
   17800:	subcs	r0, r0, r1, lsl #26
   17804:	cmp	r0, r1, lsl #25
   17808:	adc	r2, r2, r2
   1780c:	subcs	r0, r0, r1, lsl #25
   17810:	cmp	r0, r1, lsl #24
   17814:	adc	r2, r2, r2
   17818:	subcs	r0, r0, r1, lsl #24
   1781c:	cmp	r0, r1, lsl #23
   17820:	adc	r2, r2, r2
   17824:	subcs	r0, r0, r1, lsl #23
   17828:	cmp	r0, r1, lsl #22
   1782c:	adc	r2, r2, r2
   17830:	subcs	r0, r0, r1, lsl #22
   17834:	cmp	r0, r1, lsl #21
   17838:	adc	r2, r2, r2
   1783c:	subcs	r0, r0, r1, lsl #21
   17840:	cmp	r0, r1, lsl #20
   17844:	adc	r2, r2, r2
   17848:	subcs	r0, r0, r1, lsl #20
   1784c:	cmp	r0, r1, lsl #19
   17850:	adc	r2, r2, r2
   17854:	subcs	r0, r0, r1, lsl #19
   17858:	cmp	r0, r1, lsl #18
   1785c:	adc	r2, r2, r2
   17860:	subcs	r0, r0, r1, lsl #18
   17864:	cmp	r0, r1, lsl #17
   17868:	adc	r2, r2, r2
   1786c:	subcs	r0, r0, r1, lsl #17
   17870:	cmp	r0, r1, lsl #16
   17874:	adc	r2, r2, r2
   17878:	subcs	r0, r0, r1, lsl #16
   1787c:	cmp	r0, r1, lsl #15
   17880:	adc	r2, r2, r2
   17884:	subcs	r0, r0, r1, lsl #15
   17888:	cmp	r0, r1, lsl #14
   1788c:	adc	r2, r2, r2
   17890:	subcs	r0, r0, r1, lsl #14
   17894:	cmp	r0, r1, lsl #13
   17898:	adc	r2, r2, r2
   1789c:	subcs	r0, r0, r1, lsl #13
   178a0:	cmp	r0, r1, lsl #12
   178a4:	adc	r2, r2, r2
   178a8:	subcs	r0, r0, r1, lsl #12
   178ac:	cmp	r0, r1, lsl #11
   178b0:	adc	r2, r2, r2
   178b4:	subcs	r0, r0, r1, lsl #11
   178b8:	cmp	r0, r1, lsl #10
   178bc:	adc	r2, r2, r2
   178c0:	subcs	r0, r0, r1, lsl #10
   178c4:	cmp	r0, r1, lsl #9
   178c8:	adc	r2, r2, r2
   178cc:	subcs	r0, r0, r1, lsl #9
   178d0:	cmp	r0, r1, lsl #8
   178d4:	adc	r2, r2, r2
   178d8:	subcs	r0, r0, r1, lsl #8
   178dc:	cmp	r0, r1, lsl #7
   178e0:	adc	r2, r2, r2
   178e4:	subcs	r0, r0, r1, lsl #7
   178e8:	cmp	r0, r1, lsl #6
   178ec:	adc	r2, r2, r2
   178f0:	subcs	r0, r0, r1, lsl #6
   178f4:	cmp	r0, r1, lsl #5
   178f8:	adc	r2, r2, r2
   178fc:	subcs	r0, r0, r1, lsl #5
   17900:	cmp	r0, r1, lsl #4
   17904:	adc	r2, r2, r2
   17908:	subcs	r0, r0, r1, lsl #4
   1790c:	cmp	r0, r1, lsl #3
   17910:	adc	r2, r2, r2
   17914:	subcs	r0, r0, r1, lsl #3
   17918:	cmp	r0, r1, lsl #2
   1791c:	adc	r2, r2, r2
   17920:	subcs	r0, r0, r1, lsl #2
   17924:	cmp	r0, r1, lsl #1
   17928:	adc	r2, r2, r2
   1792c:	subcs	r0, r0, r1, lsl #1
   17930:	cmp	r0, r1
   17934:	adc	r2, r2, r2
   17938:	subcs	r0, r0, r1
   1793c:	mov	r0, r2
   17940:	bx	lr
   17944:	moveq	r0, #1
   17948:	movne	r0, #0
   1794c:	bx	lr
   17950:	clz	r2, r1
   17954:	rsb	r2, r2, #31
   17958:	lsr	r0, r0, r2
   1795c:	bx	lr
   17960:	cmp	r0, #0
   17964:	mvnne	r0, #0
   17968:	b	17c08 <__assert_fail@plt+0x6d80>
   1796c:	cmp	r1, #0
   17970:	beq	17960 <__assert_fail@plt+0x6ad8>
   17974:	push	{r0, r1, lr}
   17978:	bl	17780 <__assert_fail@plt+0x68f8>
   1797c:	pop	{r1, r2, lr}
   17980:	mul	r3, r2, r0
   17984:	sub	r1, r1, r3
   17988:	bx	lr
   1798c:	cmp	r1, #0
   17990:	beq	17b9c <__assert_fail@plt+0x6d14>
   17994:	eor	ip, r0, r1
   17998:	rsbmi	r1, r1, #0
   1799c:	subs	r2, r1, #1
   179a0:	beq	17b68 <__assert_fail@plt+0x6ce0>
   179a4:	movs	r3, r0
   179a8:	rsbmi	r3, r0, #0
   179ac:	cmp	r3, r1
   179b0:	bls	17b74 <__assert_fail@plt+0x6cec>
   179b4:	tst	r1, r2
   179b8:	beq	17b84 <__assert_fail@plt+0x6cfc>
   179bc:	clz	r2, r3
   179c0:	clz	r0, r1
   179c4:	sub	r2, r0, r2
   179c8:	rsbs	r2, r2, #31
   179cc:	addne	r2, r2, r2, lsl #1
   179d0:	mov	r0, #0
   179d4:	addne	pc, pc, r2, lsl #2
   179d8:	nop			; (mov r0, r0)
   179dc:	cmp	r3, r1, lsl #31
   179e0:	adc	r0, r0, r0
   179e4:	subcs	r3, r3, r1, lsl #31
   179e8:	cmp	r3, r1, lsl #30
   179ec:	adc	r0, r0, r0
   179f0:	subcs	r3, r3, r1, lsl #30
   179f4:	cmp	r3, r1, lsl #29
   179f8:	adc	r0, r0, r0
   179fc:	subcs	r3, r3, r1, lsl #29
   17a00:	cmp	r3, r1, lsl #28
   17a04:	adc	r0, r0, r0
   17a08:	subcs	r3, r3, r1, lsl #28
   17a0c:	cmp	r3, r1, lsl #27
   17a10:	adc	r0, r0, r0
   17a14:	subcs	r3, r3, r1, lsl #27
   17a18:	cmp	r3, r1, lsl #26
   17a1c:	adc	r0, r0, r0
   17a20:	subcs	r3, r3, r1, lsl #26
   17a24:	cmp	r3, r1, lsl #25
   17a28:	adc	r0, r0, r0
   17a2c:	subcs	r3, r3, r1, lsl #25
   17a30:	cmp	r3, r1, lsl #24
   17a34:	adc	r0, r0, r0
   17a38:	subcs	r3, r3, r1, lsl #24
   17a3c:	cmp	r3, r1, lsl #23
   17a40:	adc	r0, r0, r0
   17a44:	subcs	r3, r3, r1, lsl #23
   17a48:	cmp	r3, r1, lsl #22
   17a4c:	adc	r0, r0, r0
   17a50:	subcs	r3, r3, r1, lsl #22
   17a54:	cmp	r3, r1, lsl #21
   17a58:	adc	r0, r0, r0
   17a5c:	subcs	r3, r3, r1, lsl #21
   17a60:	cmp	r3, r1, lsl #20
   17a64:	adc	r0, r0, r0
   17a68:	subcs	r3, r3, r1, lsl #20
   17a6c:	cmp	r3, r1, lsl #19
   17a70:	adc	r0, r0, r0
   17a74:	subcs	r3, r3, r1, lsl #19
   17a78:	cmp	r3, r1, lsl #18
   17a7c:	adc	r0, r0, r0
   17a80:	subcs	r3, r3, r1, lsl #18
   17a84:	cmp	r3, r1, lsl #17
   17a88:	adc	r0, r0, r0
   17a8c:	subcs	r3, r3, r1, lsl #17
   17a90:	cmp	r3, r1, lsl #16
   17a94:	adc	r0, r0, r0
   17a98:	subcs	r3, r3, r1, lsl #16
   17a9c:	cmp	r3, r1, lsl #15
   17aa0:	adc	r0, r0, r0
   17aa4:	subcs	r3, r3, r1, lsl #15
   17aa8:	cmp	r3, r1, lsl #14
   17aac:	adc	r0, r0, r0
   17ab0:	subcs	r3, r3, r1, lsl #14
   17ab4:	cmp	r3, r1, lsl #13
   17ab8:	adc	r0, r0, r0
   17abc:	subcs	r3, r3, r1, lsl #13
   17ac0:	cmp	r3, r1, lsl #12
   17ac4:	adc	r0, r0, r0
   17ac8:	subcs	r3, r3, r1, lsl #12
   17acc:	cmp	r3, r1, lsl #11
   17ad0:	adc	r0, r0, r0
   17ad4:	subcs	r3, r3, r1, lsl #11
   17ad8:	cmp	r3, r1, lsl #10
   17adc:	adc	r0, r0, r0
   17ae0:	subcs	r3, r3, r1, lsl #10
   17ae4:	cmp	r3, r1, lsl #9
   17ae8:	adc	r0, r0, r0
   17aec:	subcs	r3, r3, r1, lsl #9
   17af0:	cmp	r3, r1, lsl #8
   17af4:	adc	r0, r0, r0
   17af8:	subcs	r3, r3, r1, lsl #8
   17afc:	cmp	r3, r1, lsl #7
   17b00:	adc	r0, r0, r0
   17b04:	subcs	r3, r3, r1, lsl #7
   17b08:	cmp	r3, r1, lsl #6
   17b0c:	adc	r0, r0, r0
   17b10:	subcs	r3, r3, r1, lsl #6
   17b14:	cmp	r3, r1, lsl #5
   17b18:	adc	r0, r0, r0
   17b1c:	subcs	r3, r3, r1, lsl #5
   17b20:	cmp	r3, r1, lsl #4
   17b24:	adc	r0, r0, r0
   17b28:	subcs	r3, r3, r1, lsl #4
   17b2c:	cmp	r3, r1, lsl #3
   17b30:	adc	r0, r0, r0
   17b34:	subcs	r3, r3, r1, lsl #3
   17b38:	cmp	r3, r1, lsl #2
   17b3c:	adc	r0, r0, r0
   17b40:	subcs	r3, r3, r1, lsl #2
   17b44:	cmp	r3, r1, lsl #1
   17b48:	adc	r0, r0, r0
   17b4c:	subcs	r3, r3, r1, lsl #1
   17b50:	cmp	r3, r1
   17b54:	adc	r0, r0, r0
   17b58:	subcs	r3, r3, r1
   17b5c:	cmp	ip, #0
   17b60:	rsbmi	r0, r0, #0
   17b64:	bx	lr
   17b68:	teq	ip, r0
   17b6c:	rsbmi	r0, r0, #0
   17b70:	bx	lr
   17b74:	movcc	r0, #0
   17b78:	asreq	r0, ip, #31
   17b7c:	orreq	r0, r0, #1
   17b80:	bx	lr
   17b84:	clz	r2, r1
   17b88:	rsb	r2, r2, #31
   17b8c:	cmp	ip, #0
   17b90:	lsr	r0, r3, r2
   17b94:	rsbmi	r0, r0, #0
   17b98:	bx	lr
   17b9c:	cmp	r0, #0
   17ba0:	mvngt	r0, #-2147483648	; 0x80000000
   17ba4:	movlt	r0, #-2147483648	; 0x80000000
   17ba8:	b	17c08 <__assert_fail@plt+0x6d80>
   17bac:	cmp	r1, #0
   17bb0:	beq	17b9c <__assert_fail@plt+0x6d14>
   17bb4:	push	{r0, r1, lr}
   17bb8:	bl	17994 <__assert_fail@plt+0x6b0c>
   17bbc:	pop	{r1, r2, lr}
   17bc0:	mul	r3, r2, r0
   17bc4:	sub	r1, r1, r3
   17bc8:	bx	lr
   17bcc:	cmp	r3, #0
   17bd0:	cmpeq	r2, #0
   17bd4:	bne	17bec <__assert_fail@plt+0x6d64>
   17bd8:	cmp	r1, #0
   17bdc:	cmpeq	r0, #0
   17be0:	mvnne	r1, #0
   17be4:	mvnne	r0, #0
   17be8:	b	17c08 <__assert_fail@plt+0x6d80>
   17bec:	sub	sp, sp, #8
   17bf0:	push	{sp, lr}
   17bf4:	bl	17c18 <__assert_fail@plt+0x6d90>
   17bf8:	ldr	lr, [sp, #4]
   17bfc:	add	sp, sp, #8
   17c00:	pop	{r2, r3}
   17c04:	bx	lr
   17c08:	push	{r1, lr}
   17c0c:	mov	r0, #8
   17c10:	bl	10c54 <raise@plt>
   17c14:	pop	{r1, pc}
   17c18:	cmp	r1, r3
   17c1c:	push	{r4, r5, r6, r7, r8, r9, lr}
   17c20:	cmpeq	r0, r2
   17c24:	mov	r4, r0
   17c28:	mov	r5, r1
   17c2c:	ldr	r9, [sp, #28]
   17c30:	movcc	r0, #0
   17c34:	movcc	r1, #0
   17c38:	bcc	17d30 <__assert_fail@plt+0x6ea8>
   17c3c:	cmp	r3, #0
   17c40:	clzeq	ip, r2
   17c44:	clzne	ip, r3
   17c48:	addeq	ip, ip, #32
   17c4c:	cmp	r5, #0
   17c50:	clzeq	r1, r4
   17c54:	addeq	r1, r1, #32
   17c58:	clzne	r1, r5
   17c5c:	sub	ip, ip, r1
   17c60:	sub	lr, ip, #32
   17c64:	lsl	r7, r3, ip
   17c68:	rsb	r8, ip, #32
   17c6c:	orr	r7, r7, r2, lsl lr
   17c70:	orr	r7, r7, r2, lsr r8
   17c74:	lsl	r6, r2, ip
   17c78:	cmp	r5, r7
   17c7c:	cmpeq	r4, r6
   17c80:	movcc	r0, #0
   17c84:	movcc	r1, #0
   17c88:	bcc	17ca4 <__assert_fail@plt+0x6e1c>
   17c8c:	mov	r3, #1
   17c90:	subs	r4, r4, r6
   17c94:	lsl	r1, r3, lr
   17c98:	lsl	r0, r3, ip
   17c9c:	orr	r1, r1, r3, lsr r8
   17ca0:	sbc	r5, r5, r7
   17ca4:	cmp	ip, #0
   17ca8:	beq	17d30 <__assert_fail@plt+0x6ea8>
   17cac:	lsrs	r3, r7, #1
   17cb0:	rrx	r2, r6
   17cb4:	mov	r6, ip
   17cb8:	b	17cdc <__assert_fail@plt+0x6e54>
   17cbc:	subs	r4, r4, r2
   17cc0:	sbc	r5, r5, r3
   17cc4:	adds	r4, r4, r4
   17cc8:	adc	r5, r5, r5
   17ccc:	adds	r4, r4, #1
   17cd0:	adc	r5, r5, #0
   17cd4:	subs	r6, r6, #1
   17cd8:	beq	17cf8 <__assert_fail@plt+0x6e70>
   17cdc:	cmp	r5, r3
   17ce0:	cmpeq	r4, r2
   17ce4:	bcs	17cbc <__assert_fail@plt+0x6e34>
   17ce8:	adds	r4, r4, r4
   17cec:	adc	r5, r5, r5
   17cf0:	subs	r6, r6, #1
   17cf4:	bne	17cdc <__assert_fail@plt+0x6e54>
   17cf8:	lsr	r6, r4, ip
   17cfc:	lsr	r7, r5, ip
   17d00:	orr	r6, r6, r5, lsl r8
   17d04:	adds	r2, r0, r4
   17d08:	orr	r6, r6, r5, lsr lr
   17d0c:	adc	r3, r1, r5
   17d10:	lsl	r1, r7, ip
   17d14:	orr	r1, r1, r6, lsl lr
   17d18:	lsl	r0, r6, ip
   17d1c:	orr	r1, r1, r6, lsr r8
   17d20:	subs	r0, r2, r0
   17d24:	mov	r4, r6
   17d28:	mov	r5, r7
   17d2c:	sbc	r1, r3, r1
   17d30:	cmp	r9, #0
   17d34:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   17d38:	strd	r4, [r9]
   17d3c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17d40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17d44:	mov	r7, r0
   17d48:	ldr	r6, [pc, #72]	; 17d98 <__assert_fail@plt+0x6f10>
   17d4c:	ldr	r5, [pc, #72]	; 17d9c <__assert_fail@plt+0x6f14>
   17d50:	add	r6, pc, r6
   17d54:	add	r5, pc, r5
   17d58:	sub	r6, r6, r5
   17d5c:	mov	r8, r1
   17d60:	mov	r9, r2
   17d64:	bl	10c1c <calloc@plt-0x20>
   17d68:	asrs	r6, r6, #2
   17d6c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17d70:	mov	r4, #0
   17d74:	add	r4, r4, #1
   17d78:	ldr	r3, [r5], #4
   17d7c:	mov	r2, r9
   17d80:	mov	r1, r8
   17d84:	mov	r0, r7
   17d88:	blx	r3
   17d8c:	cmp	r6, r4
   17d90:	bne	17d74 <__assert_fail@plt+0x6eec>
   17d94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17d98:			; <UNDEFINED> instruction: 0x000111b8
   17d9c:			; <UNDEFINED> instruction: 0x000111b0
   17da0:	bx	lr
   17da4:	ldr	r3, [pc, #12]	; 17db8 <__assert_fail@plt+0x6f30>
   17da8:	mov	r1, #0
   17dac:	add	r3, pc, r3
   17db0:	ldr	r2, [r3]
   17db4:	b	10db0 <__cxa_atexit@plt>
   17db8:	andeq	r1, r1, r8, lsr #6

Disassembly of section .fini:

00017dbc <.fini>:
   17dbc:	push	{r3, lr}
   17dc0:	pop	{r3, pc}
