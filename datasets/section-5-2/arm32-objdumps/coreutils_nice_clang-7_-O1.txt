
../repos/coreutils/src/nice:     file format elf32-littlearm


Disassembly of section .init:

00010d20 <.init>:
   10d20:	push	{r3, lr}
   10d24:	bl	10fbc <__assert_fail@plt+0x48>
   10d28:	pop	{r3, pc}

Disassembly of section .plt:

00010d2c <calloc@plt-0x14>:
   10d2c:	push	{lr}		; (str lr, [sp, #-4]!)
   10d30:	ldr	lr, [pc, #4]	; 10d3c <calloc@plt-0x4>
   10d34:	add	lr, pc, lr
   10d38:	ldr	pc, [lr, #8]!
   10d3c:	andeq	r5, r1, r4, asr #5

00010d40 <calloc@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #86016	; 0x15000
   10d48:	ldr	pc, [ip, #708]!	; 0x2c4

00010d4c <fputs_unlocked@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #86016	; 0x15000
   10d54:	ldr	pc, [ip, #700]!	; 0x2bc

00010d58 <strcmp@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #86016	; 0x15000
   10d60:	ldr	pc, [ip, #692]!	; 0x2b4

00010d64 <strtol@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #86016	; 0x15000
   10d6c:	ldr	pc, [ip, #684]!	; 0x2ac

00010d70 <fflush@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #86016	; 0x15000
   10d78:	ldr	pc, [ip, #676]!	; 0x2a4

00010d7c <free@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #86016	; 0x15000
   10d84:	ldr	pc, [ip, #668]!	; 0x29c

00010d88 <_exit@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #86016	; 0x15000
   10d90:	ldr	pc, [ip, #660]!	; 0x294

00010d94 <memcpy@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #86016	; 0x15000
   10d9c:	ldr	pc, [ip, #652]!	; 0x28c

00010da0 <execvp@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #86016	; 0x15000
   10da8:	ldr	pc, [ip, #644]!	; 0x284

00010dac <mbsinit@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #86016	; 0x15000
   10db4:	ldr	pc, [ip, #636]!	; 0x27c

00010db8 <memcmp@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #86016	; 0x15000
   10dc0:	ldr	pc, [ip, #628]!	; 0x274

00010dc4 <dcgettext@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #86016	; 0x15000
   10dcc:	ldr	pc, [ip, #620]!	; 0x26c

00010dd0 <realloc@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #86016	; 0x15000
   10dd8:	ldr	pc, [ip, #612]!	; 0x264

00010ddc <getpriority@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #86016	; 0x15000
   10de4:	ldr	pc, [ip, #604]!	; 0x25c

00010de8 <textdomain@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #86016	; 0x15000
   10df0:	ldr	pc, [ip, #596]!	; 0x254

00010df4 <iswprint@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #86016	; 0x15000
   10dfc:	ldr	pc, [ip, #588]!	; 0x24c

00010e00 <fwrite@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #86016	; 0x15000
   10e08:	ldr	pc, [ip, #580]!	; 0x244

00010e0c <lseek64@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #86016	; 0x15000
   10e14:	ldr	pc, [ip, #572]!	; 0x23c

00010e18 <__ctype_get_mb_cur_max@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #86016	; 0x15000
   10e20:	ldr	pc, [ip, #564]!	; 0x234

00010e24 <__fpending@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #86016	; 0x15000
   10e2c:	ldr	pc, [ip, #556]!	; 0x22c

00010e30 <ferror_unlocked@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #86016	; 0x15000
   10e38:	ldr	pc, [ip, #548]!	; 0x224

00010e3c <mbrtowc@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #86016	; 0x15000
   10e44:	ldr	pc, [ip, #540]!	; 0x21c

00010e48 <error@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #86016	; 0x15000
   10e50:	ldr	pc, [ip, #532]!	; 0x214

00010e54 <setpriority@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #86016	; 0x15000
   10e5c:	ldr	pc, [ip, #524]!	; 0x20c

00010e60 <malloc@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #86016	; 0x15000
   10e68:	ldr	pc, [ip, #516]!	; 0x204

00010e6c <__libc_start_main@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #86016	; 0x15000
   10e74:	ldr	pc, [ip, #508]!	; 0x1fc

00010e78 <__freading@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #86016	; 0x15000
   10e80:	ldr	pc, [ip, #500]!	; 0x1f4

00010e84 <__gmon_start__@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #86016	; 0x15000
   10e8c:	ldr	pc, [ip, #492]!	; 0x1ec

00010e90 <getopt_long@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #86016	; 0x15000
   10e98:	ldr	pc, [ip, #484]!	; 0x1e4

00010e9c <__ctype_b_loc@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #86016	; 0x15000
   10ea4:	ldr	pc, [ip, #476]!	; 0x1dc

00010ea8 <exit@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #86016	; 0x15000
   10eb0:	ldr	pc, [ip, #468]!	; 0x1d4

00010eb4 <strlen@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #86016	; 0x15000
   10ebc:	ldr	pc, [ip, #460]!	; 0x1cc

00010ec0 <strchr@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #86016	; 0x15000
   10ec8:	ldr	pc, [ip, #452]!	; 0x1c4

00010ecc <__errno_location@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #86016	; 0x15000
   10ed4:	ldr	pc, [ip, #444]!	; 0x1bc

00010ed8 <__cxa_atexit@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #86016	; 0x15000
   10ee0:	ldr	pc, [ip, #436]!	; 0x1b4

00010ee4 <memset@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #86016	; 0x15000
   10eec:	ldr	pc, [ip, #428]!	; 0x1ac

00010ef0 <__printf_chk@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #86016	; 0x15000
   10ef8:	ldr	pc, [ip, #420]!	; 0x1a4

00010efc <fileno@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #86016	; 0x15000
   10f04:	ldr	pc, [ip, #412]!	; 0x19c

00010f08 <__fprintf_chk@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #86016	; 0x15000
   10f10:	ldr	pc, [ip, #404]!	; 0x194

00010f14 <fclose@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #86016	; 0x15000
   10f1c:	ldr	pc, [ip, #396]!	; 0x18c

00010f20 <fseeko64@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #86016	; 0x15000
   10f28:	ldr	pc, [ip, #388]!	; 0x184

00010f2c <setlocale@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #86016	; 0x15000
   10f34:	ldr	pc, [ip, #380]!	; 0x17c

00010f38 <strrchr@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #86016	; 0x15000
   10f40:	ldr	pc, [ip, #372]!	; 0x174

00010f44 <nl_langinfo@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #86016	; 0x15000
   10f4c:	ldr	pc, [ip, #364]!	; 0x16c

00010f50 <bindtextdomain@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #86016	; 0x15000
   10f58:	ldr	pc, [ip, #356]!	; 0x164

00010f5c <strncmp@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #86016	; 0x15000
   10f64:	ldr	pc, [ip, #348]!	; 0x15c

00010f68 <abort@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #86016	; 0x15000
   10f70:	ldr	pc, [ip, #340]!	; 0x154

00010f74 <__assert_fail@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #86016	; 0x15000
   10f7c:	ldr	pc, [ip, #332]!	; 0x14c

Disassembly of section .text:

00010f80 <.text>:
   10f80:	mov	fp, #0
   10f84:	mov	lr, #0
   10f88:	pop	{r1}		; (ldr r1, [sp], #4)
   10f8c:	mov	r2, sp
   10f90:	push	{r2}		; (str r2, [sp, #-4]!)
   10f94:	push	{r0}		; (str r0, [sp, #-4]!)
   10f98:	ldr	ip, [pc, #16]	; 10fb0 <__assert_fail@plt+0x3c>
   10f9c:	push	{ip}		; (str ip, [sp, #-4]!)
   10fa0:	ldr	r0, [pc, #12]	; 10fb4 <__assert_fail@plt+0x40>
   10fa4:	ldr	r3, [pc, #12]	; 10fb8 <__assert_fail@plt+0x44>
   10fa8:	bl	10e6c <__libc_start_main@plt>
   10fac:	bl	10f68 <abort@plt>
   10fb0:	andeq	r4, r1, r8, asr #23
   10fb4:	andeq	r1, r1, r4, ror #6
   10fb8:	andeq	r4, r1, r8, ror #22
   10fbc:	ldr	r3, [pc, #20]	; 10fd8 <__assert_fail@plt+0x64>
   10fc0:	ldr	r2, [pc, #20]	; 10fdc <__assert_fail@plt+0x68>
   10fc4:	add	r3, pc, r3
   10fc8:	ldr	r2, [r3, r2]
   10fcc:	cmp	r2, #0
   10fd0:	bxeq	lr
   10fd4:	b	10e84 <__gmon_start__@plt>
   10fd8:	andeq	r5, r1, r4, lsr r0
   10fdc:	andeq	r0, r0, ip, asr #1
   10fe0:	ldr	r0, [pc, #24]	; 11000 <__assert_fail@plt+0x8c>
   10fe4:	ldr	r3, [pc, #24]	; 11004 <__assert_fail@plt+0x90>
   10fe8:	cmp	r3, r0
   10fec:	bxeq	lr
   10ff0:	ldr	r3, [pc, #16]	; 11008 <__assert_fail@plt+0x94>
   10ff4:	cmp	r3, #0
   10ff8:	bxeq	lr
   10ffc:	bx	r3
   11000:	andeq	r6, r2, r0, lsr #2
   11004:	andeq	r6, r2, r0, lsr #2
   11008:	andeq	r0, r0, r0
   1100c:	ldr	r0, [pc, #36]	; 11038 <__assert_fail@plt+0xc4>
   11010:	ldr	r1, [pc, #36]	; 1103c <__assert_fail@plt+0xc8>
   11014:	sub	r1, r1, r0
   11018:	asr	r1, r1, #2
   1101c:	add	r1, r1, r1, lsr #31
   11020:	asrs	r1, r1, #1
   11024:	bxeq	lr
   11028:	ldr	r3, [pc, #16]	; 11040 <__assert_fail@plt+0xcc>
   1102c:	cmp	r3, #0
   11030:	bxeq	lr
   11034:	bx	r3
   11038:	andeq	r6, r2, r0, lsr #2
   1103c:	andeq	r6, r2, r0, lsr #2
   11040:	andeq	r0, r0, r0
   11044:	push	{r4, lr}
   11048:	ldr	r4, [pc, #24]	; 11068 <__assert_fail@plt+0xf4>
   1104c:	ldrb	r3, [r4]
   11050:	cmp	r3, #0
   11054:	popne	{r4, pc}
   11058:	bl	10fe0 <__assert_fail@plt+0x6c>
   1105c:	mov	r3, #1
   11060:	strb	r3, [r4]
   11064:	pop	{r4, pc}
   11068:	andeq	r6, r2, ip, lsr r1
   1106c:	b	1100c <__assert_fail@plt+0x98>
   11070:	push	{fp, lr}
   11074:	mov	fp, sp
   11078:	mov	r4, r0
   1107c:	cmp	r0, #0
   11080:	bne	1116c <__assert_fail@plt+0x1f8>
   11084:	movw	r1, #19483	; 0x4c1b
   11088:	movt	r1, #1
   1108c:	mov	r0, #0
   11090:	mov	r2, #5
   11094:	bl	10dc4 <dcgettext@plt>
   11098:	mov	r1, r0
   1109c:	movw	r0, #24904	; 0x6148
   110a0:	movt	r0, #2
   110a4:	ldr	r2, [r0]
   110a8:	mov	r0, #1
   110ac:	bl	10ef0 <__printf_chk@plt>
   110b0:	movw	r1, #19522	; 0x4c42
   110b4:	movt	r1, #1
   110b8:	mov	r0, #0
   110bc:	mov	r2, #5
   110c0:	bl	10dc4 <dcgettext@plt>
   110c4:	mov	r1, r0
   110c8:	mov	r0, #1
   110cc:	mvn	r2, #19
   110d0:	mov	r3, #19
   110d4:	bl	10ef0 <__printf_chk@plt>
   110d8:	bl	111b0 <__assert_fail@plt+0x23c>
   110dc:	movw	r1, #19744	; 0x4d20
   110e0:	movt	r1, #1
   110e4:	mov	r0, #0
   110e8:	mov	r2, #5
   110ec:	bl	10dc4 <dcgettext@plt>
   110f0:	movw	r5, #24884	; 0x6134
   110f4:	movt	r5, #2
   110f8:	ldr	r1, [r5]
   110fc:	bl	10d4c <fputs_unlocked@plt>
   11100:	movw	r1, #19811	; 0x4d63
   11104:	movt	r1, #1
   11108:	mov	r0, #0
   1110c:	mov	r2, #5
   11110:	bl	10dc4 <dcgettext@plt>
   11114:	ldr	r1, [r5]
   11118:	bl	10d4c <fputs_unlocked@plt>
   1111c:	movw	r1, #19856	; 0x4d90
   11120:	movt	r1, #1
   11124:	mov	r0, #0
   11128:	mov	r2, #5
   1112c:	bl	10dc4 <dcgettext@plt>
   11130:	ldr	r1, [r5]
   11134:	bl	10d4c <fputs_unlocked@plt>
   11138:	movw	r1, #19910	; 0x4dc6
   1113c:	movt	r1, #1
   11140:	mov	r0, #0
   11144:	mov	r2, #5
   11148:	bl	10dc4 <dcgettext@plt>
   1114c:	mov	r1, r0
   11150:	movw	r2, #20101	; 0x4e85
   11154:	movt	r2, #1
   11158:	mov	r0, #1
   1115c:	bl	10ef0 <__printf_chk@plt>
   11160:	bl	111e0 <__assert_fail@plt+0x26c>
   11164:	mov	r0, r4
   11168:	bl	10ea8 <exit@plt>
   1116c:	movw	r0, #24880	; 0x6130
   11170:	movt	r0, #2
   11174:	ldr	r5, [r0]
   11178:	movw	r1, #19444	; 0x4bf4
   1117c:	movt	r1, #1
   11180:	mov	r0, #0
   11184:	mov	r2, #5
   11188:	bl	10dc4 <dcgettext@plt>
   1118c:	mov	r2, r0
   11190:	movw	r0, #24904	; 0x6148
   11194:	movt	r0, #2
   11198:	ldr	r3, [r0]
   1119c:	mov	r0, r5
   111a0:	mov	r1, #1
   111a4:	bl	10f08 <__fprintf_chk@plt>
   111a8:	mov	r0, r4
   111ac:	bl	10ea8 <exit@plt>
   111b0:	push	{fp, lr}
   111b4:	mov	fp, sp
   111b8:	movw	r1, #20273	; 0x4f31
   111bc:	movt	r1, #1
   111c0:	mov	r0, #0
   111c4:	mov	r2, #5
   111c8:	bl	10dc4 <dcgettext@plt>
   111cc:	movw	r1, #24884	; 0x6134
   111d0:	movt	r1, #2
   111d4:	ldr	r1, [r1]
   111d8:	pop	{fp, lr}
   111dc:	b	10d4c <fputs_unlocked@plt>
   111e0:	push	{r4, r5, fp, lr}
   111e4:	add	fp, sp, #8
   111e8:	sub	sp, sp, #56	; 0x38
   111ec:	movw	r0, #20736	; 0x5100
   111f0:	movt	r0, #1
   111f4:	add	r1, r0, #32
   111f8:	mov	r5, sp
   111fc:	mov	r2, #48	; 0x30
   11200:	vld1.64	{d16-d17}, [r1]
   11204:	add	r1, r5, #32
   11208:	add	r3, r0, #16
   1120c:	vld1.64	{d18-d19}, [r0], r2
   11210:	vld1.64	{d20-d21}, [r3]
   11214:	vldr	d22, [r0]
   11218:	vst1.64	{d16-d17}, [r1]
   1121c:	add	r0, r5, #16
   11220:	vst1.64	{d20-d21}, [r0]
   11224:	mov	r0, r5
   11228:	vst1.64	{d18-d19}, [r0], r2
   1122c:	vstr	d22, [r0]
   11230:	ldr	r1, [sp]
   11234:	cmp	r1, #0
   11238:	beq	11260 <__assert_fail@plt+0x2ec>
   1123c:	mov	r5, sp
   11240:	movw	r4, #20101	; 0x4e85
   11244:	movt	r4, #1
   11248:	mov	r0, r4
   1124c:	bl	10d58 <strcmp@plt>
   11250:	cmp	r0, #0
   11254:	ldrne	r1, [r5, #8]!
   11258:	cmpne	r1, #0
   1125c:	bne	11248 <__assert_fail@plt+0x2d4>
   11260:	ldr	r4, [r5, #4]
   11264:	movw	r1, #20443	; 0x4fdb
   11268:	movt	r1, #1
   1126c:	mov	r0, #0
   11270:	mov	r2, #5
   11274:	bl	10dc4 <dcgettext@plt>
   11278:	mov	r1, r0
   1127c:	movw	r2, #20134	; 0x4ea6
   11280:	movt	r2, #1
   11284:	movw	r3, #20466	; 0x4ff2
   11288:	movt	r3, #1
   1128c:	mov	r0, #1
   11290:	bl	10ef0 <__printf_chk@plt>
   11294:	movw	r5, #20101	; 0x4e85
   11298:	movt	r5, #1
   1129c:	cmp	r4, #0
   112a0:	moveq	r4, r5
   112a4:	mov	r0, #5
   112a8:	mov	r1, #0
   112ac:	bl	10f2c <setlocale@plt>
   112b0:	cmp	r0, #0
   112b4:	beq	112f4 <__assert_fail@plt+0x380>
   112b8:	movw	r1, #20506	; 0x501a
   112bc:	movt	r1, #1
   112c0:	mov	r2, #3
   112c4:	bl	10f5c <strncmp@plt>
   112c8:	cmp	r0, #0
   112cc:	beq	112f4 <__assert_fail@plt+0x380>
   112d0:	movw	r1, #20510	; 0x501e
   112d4:	movt	r1, #1
   112d8:	mov	r0, #0
   112dc:	mov	r2, #5
   112e0:	bl	10dc4 <dcgettext@plt>
   112e4:	movw	r1, #24884	; 0x6134
   112e8:	movt	r1, #2
   112ec:	ldr	r1, [r1]
   112f0:	bl	10d4c <fputs_unlocked@plt>
   112f4:	movw	r1, #20581	; 0x5065
   112f8:	movt	r1, #1
   112fc:	mov	r0, #0
   11300:	mov	r2, #5
   11304:	bl	10dc4 <dcgettext@plt>
   11308:	mov	r1, r0
   1130c:	movw	r2, #20466	; 0x4ff2
   11310:	movt	r2, #1
   11314:	mov	r0, #1
   11318:	mov	r3, r5
   1131c:	bl	10ef0 <__printf_chk@plt>
   11320:	movw	r1, #20608	; 0x5080
   11324:	movt	r1, #1
   11328:	mov	r0, #0
   1132c:	mov	r2, #5
   11330:	bl	10dc4 <dcgettext@plt>
   11334:	mov	r1, r0
   11338:	movw	r0, #20376	; 0x4f98
   1133c:	movt	r0, #1
   11340:	movw	r3, #20658	; 0x50b2
   11344:	movt	r3, #1
   11348:	cmp	r4, r5
   1134c:	moveq	r3, r0
   11350:	mov	r0, #1
   11354:	mov	r2, r4
   11358:	bl	10ef0 <__printf_chk@plt>
   1135c:	sub	sp, fp, #8
   11360:	pop	{r4, r5, fp, pc}
   11364:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11368:	add	fp, sp, #28
   1136c:	sub	sp, sp, #12
   11370:	mov	sl, r1
   11374:	mov	r8, r0
   11378:	ldr	r0, [r1]
   1137c:	bl	118b4 <__assert_fail@plt+0x940>
   11380:	movw	r1, #20658	; 0x50b2
   11384:	movt	r1, #1
   11388:	mov	r0, #6
   1138c:	bl	10f2c <setlocale@plt>
   11390:	movw	r7, #20138	; 0x4eaa
   11394:	movt	r7, #1
   11398:	movw	r1, #20106	; 0x4e8a
   1139c:	movt	r1, #1
   113a0:	mov	r0, r7
   113a4:	bl	10f50 <bindtextdomain@plt>
   113a8:	mov	r0, r7
   113ac:	bl	10de8 <textdomain@plt>
   113b0:	bl	11778 <__assert_fail@plt+0x804>
   113b4:	movw	r0, #6092	; 0x17cc
   113b8:	movt	r0, #1
   113bc:	bl	14bcc <__assert_fail@plt+0x3c58>
   113c0:	mov	r5, #10
   113c4:	mov	r4, #1
   113c8:	cmp	r8, #2
   113cc:	blt	114b0 <__assert_fail@plt+0x53c>
   113d0:	movw	r2, #20130	; 0x4ea2
   113d4:	movt	r2, #1
   113d8:	movw	r3, #20672	; 0x50c0
   113dc:	movt	r3, #1
   113e0:	mov	r7, #0
   113e4:	ldr	r1, [sl, r4, lsl #2]
   113e8:	ldrb	r0, [r1]
   113ec:	cmp	r0, #45	; 0x2d
   113f0:	bne	11434 <__assert_fail@plt+0x4c0>
   113f4:	mov	r0, r1
   113f8:	ldrb	r6, [r0, #1]!
   113fc:	cmp	r6, #43	; 0x2b
   11400:	mov	r5, #1
   11404:	movweq	r5, #2
   11408:	cmp	r6, #45	; 0x2d
   1140c:	movweq	r5, #2
   11410:	ldrb	r1, [r1, r5]
   11414:	sub	r1, r1, #48	; 0x30
   11418:	cmp	r1, #9
   1141c:	bhi	11434 <__assert_fail@plt+0x4c0>
   11420:	add	r4, r4, #1
   11424:	mov	r7, r0
   11428:	cmp	r4, r8
   1142c:	blt	113e4 <__assert_fail@plt+0x470>
   11430:	b	1151c <__assert_fail@plt+0x5a8>
   11434:	sub	r4, r4, #1
   11438:	mov	r5, sl
   1143c:	mov	r1, sl
   11440:	ldr	r0, [r1], r4, lsl #2
   11444:	str	r0, [r1]
   11448:	movw	sl, #24872	; 0x6128
   1144c:	movt	sl, #2
   11450:	mov	r0, #0
   11454:	str	r0, [sl]
   11458:	str	r0, [sp]
   1145c:	mov	r6, r8
   11460:	sub	r0, r8, r4
   11464:	mov	r9, r2
   11468:	mov	r8, r3
   1146c:	bl	10e90 <getopt_long@plt>
   11470:	ldr	r1, [sl]
   11474:	add	r4, r4, r1
   11478:	cmp	r0, #109	; 0x6d
   1147c:	ble	1150c <__assert_fail@plt+0x598>
   11480:	cmp	r0, #110	; 0x6e
   11484:	bne	116c8 <__assert_fail@plt+0x754>
   11488:	movw	r0, #24888	; 0x6138
   1148c:	movt	r0, #2
   11490:	ldr	r7, [r0]
   11494:	mov	r2, r9
   11498:	mov	sl, r5
   1149c:	mov	r3, r8
   114a0:	mov	r8, r6
   114a4:	cmp	r4, r8
   114a8:	blt	113e4 <__assert_fail@plt+0x470>
   114ac:	b	1151c <__assert_fail@plt+0x5a8>
   114b0:	mov	r0, #0
   114b4:	cmp	r4, r8
   114b8:	bne	1156c <__assert_fail@plt+0x5f8>
   114bc:	cmp	r0, #0
   114c0:	bne	116d0 <__assert_fail@plt+0x75c>
   114c4:	bl	10ecc <__errno_location@plt>
   114c8:	mov	r4, r0
   114cc:	mov	r6, #0
   114d0:	str	r6, [r0]
   114d4:	mov	r0, #0
   114d8:	mov	r1, #0
   114dc:	bl	10ddc <getpriority@plt>
   114e0:	mov	r2, r0
   114e4:	cmn	r0, #1
   114e8:	bne	114f8 <__assert_fail@plt+0x584>
   114ec:	ldr	r4, [r4]
   114f0:	cmp	r4, #0
   114f4:	bne	11730 <__assert_fail@plt+0x7bc>
   114f8:	movw	r1, #20249	; 0x4f19
   114fc:	movt	r1, #1
   11500:	mov	r0, #1
   11504:	bl	10ef0 <__printf_chk@plt>
   11508:	b	11648 <__assert_fail@plt+0x6d4>
   1150c:	cmn	r0, #1
   11510:	mov	sl, r5
   11514:	mov	r8, r6
   11518:	bne	11668 <__assert_fail@plt+0x6f4>
   1151c:	cmp	r7, #0
   11520:	beq	11654 <__assert_fail@plt+0x6e0>
   11524:	movw	r0, #20658	; 0x50b2
   11528:	movt	r0, #1
   1152c:	str	r0, [sp]
   11530:	add	r3, sp, #8
   11534:	mov	r0, r7
   11538:	mov	r1, #0
   1153c:	mov	r2, #10
   11540:	bl	13db8 <__assert_fail@plt+0x2e44>
   11544:	cmp	r0, #2
   11548:	bcs	116fc <__assert_fail@plt+0x788>
   1154c:	ldr	r5, [sp, #8]
   11550:	cmp	r5, #39	; 0x27
   11554:	movge	r5, #39	; 0x27
   11558:	cmn	r5, #39	; 0x27
   1155c:	mvnle	r5, #38	; 0x26
   11560:	mov	r0, #1
   11564:	cmp	r4, r8
   11568:	beq	114bc <__assert_fail@plt+0x548>
   1156c:	bl	10ecc <__errno_location@plt>
   11570:	mov	r9, r0
   11574:	mov	r0, #0
   11578:	str	r0, [r9]
   1157c:	mov	r0, #0
   11580:	mov	r1, #0
   11584:	bl	10ddc <getpriority@plt>
   11588:	cmn	r0, #1
   1158c:	bne	1159c <__assert_fail@plt+0x628>
   11590:	ldr	r6, [r9]
   11594:	cmp	r6, #0
   11598:	bne	11754 <__assert_fail@plt+0x7e0>
   1159c:	add	r2, r0, r5
   115a0:	mov	r0, #0
   115a4:	mov	r1, #0
   115a8:	bl	10e54 <setpriority@plt>
   115ac:	cmp	r0, #0
   115b0:	beq	1160c <__assert_fail@plt+0x698>
   115b4:	ldr	r7, [r9]
   115b8:	mov	r0, r7
   115bc:	bl	1178c <__assert_fail@plt+0x818>
   115c0:	mov	r8, r0
   115c4:	movw	r1, #20253	; 0x4f1d
   115c8:	movt	r1, #1
   115cc:	mov	r0, #0
   115d0:	mov	r2, #5
   115d4:	bl	10dc4 <dcgettext@plt>
   115d8:	mov	r2, r0
   115dc:	mov	r6, #125	; 0x7d
   115e0:	cmp	r8, #0
   115e4:	mov	r0, #125	; 0x7d
   115e8:	movwne	r0, #0
   115ec:	mov	r1, r7
   115f0:	bl	10e48 <error@plt>
   115f4:	movw	r0, #24880	; 0x6130
   115f8:	movt	r0, #2
   115fc:	ldr	r0, [r0]
   11600:	bl	10e30 <ferror_unlocked@plt>
   11604:	cmp	r0, #0
   11608:	bne	11648 <__assert_fail@plt+0x6d4>
   1160c:	ldr	r0, [sl, r4, lsl #2]!
   11610:	mov	r1, sl
   11614:	bl	10da0 <execvp@plt>
   11618:	ldr	r0, [sl]
   1161c:	ldr	r4, [r9]
   11620:	bl	130ec <__assert_fail@plt+0x2178>
   11624:	mov	r3, r0
   11628:	movw	r2, #20823	; 0x5157
   1162c:	movt	r2, #1
   11630:	mov	r0, #0
   11634:	mov	r1, r4
   11638:	bl	10e48 <error@plt>
   1163c:	mov	r6, #126	; 0x7e
   11640:	cmp	r4, #2
   11644:	movweq	r6, #127	; 0x7f
   11648:	mov	r0, r6
   1164c:	sub	sp, fp, #28
   11650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11654:	mov	r0, #0
   11658:	mov	r5, #10
   1165c:	cmp	r4, r8
   11660:	beq	114bc <__assert_fail@plt+0x548>
   11664:	b	1156c <__assert_fail@plt+0x5f8>
   11668:	cmn	r0, #3
   1166c:	bne	116b8 <__assert_fail@plt+0x744>
   11670:	movw	r0, #24792	; 0x60d8
   11674:	movt	r0, #2
   11678:	ldr	r3, [r0]
   1167c:	movw	r0, #24884	; 0x6134
   11680:	movt	r0, #2
   11684:	ldr	r0, [r0]
   11688:	mov	r1, #0
   1168c:	movw	r2, #20148	; 0x4eb4
   11690:	movt	r2, #1
   11694:	str	r2, [sp]
   11698:	str	r1, [sp, #4]
   1169c:	movw	r1, #20101	; 0x4e85
   116a0:	movt	r1, #1
   116a4:	movw	r2, #20134	; 0x4ea6
   116a8:	movt	r2, #1
   116ac:	bl	138bc <__assert_fail@plt+0x2948>
   116b0:	mov	r0, #0
   116b4:	bl	10ea8 <exit@plt>
   116b8:	cmn	r0, #2
   116bc:	bne	116c8 <__assert_fail@plt+0x754>
   116c0:	mov	r0, #0
   116c4:	bl	11070 <__assert_fail@plt+0xfc>
   116c8:	mov	r0, #125	; 0x7d
   116cc:	bl	11070 <__assert_fail@plt+0xfc>
   116d0:	movw	r1, #20186	; 0x4eda
   116d4:	movt	r1, #1
   116d8:	mov	r0, #0
   116dc:	mov	r2, #5
   116e0:	bl	10dc4 <dcgettext@plt>
   116e4:	mov	r2, r0
   116e8:	mov	r0, #0
   116ec:	mov	r1, #0
   116f0:	bl	10e48 <error@plt>
   116f4:	mov	r0, #125	; 0x7d
   116f8:	bl	11070 <__assert_fail@plt+0xfc>
   116fc:	movw	r1, #20164	; 0x4ec4
   11700:	movt	r1, #1
   11704:	mov	r0, #0
   11708:	mov	r2, #5
   1170c:	bl	10dc4 <dcgettext@plt>
   11710:	mov	r4, r0
   11714:	mov	r0, r7
   11718:	bl	130ec <__assert_fail@plt+0x2178>
   1171c:	mov	r3, r0
   11720:	mov	r0, #125	; 0x7d
   11724:	mov	r1, #0
   11728:	mov	r2, r4
   1172c:	bl	10e48 <error@plt>
   11730:	movw	r1, #20229	; 0x4f05
   11734:	movt	r1, #1
   11738:	mov	r0, #0
   1173c:	mov	r2, #5
   11740:	bl	10dc4 <dcgettext@plt>
   11744:	mov	r2, r0
   11748:	mov	r0, #125	; 0x7d
   1174c:	mov	r1, r4
   11750:	bl	10e48 <error@plt>
   11754:	movw	r1, #20229	; 0x4f05
   11758:	movt	r1, #1
   1175c:	mov	r0, #0
   11760:	mov	r2, #5
   11764:	bl	10dc4 <dcgettext@plt>
   11768:	mov	r2, r0
   1176c:	mov	r0, #125	; 0x7d
   11770:	mov	r1, r6
   11774:	bl	10e48 <error@plt>
   11778:	movw	r0, #24796	; 0x60dc
   1177c:	movt	r0, #2
   11780:	mov	r1, #125	; 0x7d
   11784:	str	r1, [r0]
   11788:	bx	lr
   1178c:	sub	r1, r0, #1
   11790:	clz	r1, r1
   11794:	lsr	r1, r1, #5
   11798:	sub	r0, r0, #13
   1179c:	clz	r0, r0
   117a0:	lsr	r0, r0, #5
   117a4:	orr	r0, r0, r1
   117a8:	bx	lr
   117ac:	movw	r1, #24896	; 0x6140
   117b0:	movt	r1, #2
   117b4:	str	r0, [r1]
   117b8:	bx	lr
   117bc:	movw	r1, #24900	; 0x6144
   117c0:	movt	r1, #2
   117c4:	strb	r0, [r1]
   117c8:	bx	lr
   117cc:	push	{r4, r5, r6, sl, fp, lr}
   117d0:	add	fp, sp, #16
   117d4:	sub	sp, sp, #8
   117d8:	movw	r0, #24884	; 0x6134
   117dc:	movt	r0, #2
   117e0:	ldr	r0, [r0]
   117e4:	bl	146dc <__assert_fail@plt+0x3768>
   117e8:	cmp	r0, #0
   117ec:	beq	11814 <__assert_fail@plt+0x8a0>
   117f0:	movw	r0, #24900	; 0x6144
   117f4:	movt	r0, #2
   117f8:	ldrb	r0, [r0]
   117fc:	cmp	r0, #0
   11800:	beq	11834 <__assert_fail@plt+0x8c0>
   11804:	bl	10ecc <__errno_location@plt>
   11808:	ldr	r0, [r0]
   1180c:	cmp	r0, #32
   11810:	bne	11834 <__assert_fail@plt+0x8c0>
   11814:	movw	r0, #24880	; 0x6130
   11818:	movt	r0, #2
   1181c:	ldr	r0, [r0]
   11820:	bl	146dc <__assert_fail@plt+0x3768>
   11824:	cmp	r0, #0
   11828:	subeq	sp, fp, #16
   1182c:	popeq	{r4, r5, r6, sl, fp, pc}
   11830:	b	118a4 <__assert_fail@plt+0x930>
   11834:	movw	r1, #20807	; 0x5147
   11838:	movt	r1, #1
   1183c:	mov	r0, #0
   11840:	mov	r2, #5
   11844:	bl	10dc4 <dcgettext@plt>
   11848:	mov	r4, r0
   1184c:	movw	r0, #24896	; 0x6140
   11850:	movt	r0, #2
   11854:	ldr	r6, [r0]
   11858:	bl	10ecc <__errno_location@plt>
   1185c:	ldr	r5, [r0]
   11860:	cmp	r6, #0
   11864:	bne	11880 <__assert_fail@plt+0x90c>
   11868:	movw	r2, #20823	; 0x5157
   1186c:	movt	r2, #1
   11870:	mov	r0, #0
   11874:	mov	r1, r5
   11878:	mov	r3, r4
   1187c:	b	118a0 <__assert_fail@plt+0x92c>
   11880:	mov	r0, r6
   11884:	bl	12f9c <__assert_fail@plt+0x2028>
   11888:	mov	r3, r0
   1188c:	str	r4, [sp]
   11890:	movw	r2, #20819	; 0x5153
   11894:	movt	r2, #1
   11898:	mov	r0, #0
   1189c:	mov	r1, r5
   118a0:	bl	10e48 <error@plt>
   118a4:	movw	r0, #24796	; 0x60dc
   118a8:	movt	r0, #2
   118ac:	ldr	r0, [r0]
   118b0:	bl	10d88 <_exit@plt>
   118b4:	push	{r4, r5, fp, lr}
   118b8:	add	fp, sp, #8
   118bc:	cmp	r0, #0
   118c0:	beq	11954 <__assert_fail@plt+0x9e0>
   118c4:	mov	r4, r0
   118c8:	mov	r1, #47	; 0x2f
   118cc:	bl	10f38 <strrchr@plt>
   118d0:	cmp	r0, #0
   118d4:	mov	r5, r4
   118d8:	addne	r5, r0, #1
   118dc:	sub	r0, r5, r4
   118e0:	cmp	r0, #7
   118e4:	blt	11938 <__assert_fail@plt+0x9c4>
   118e8:	sub	r0, r5, #7
   118ec:	movw	r1, #20882	; 0x5192
   118f0:	movt	r1, #1
   118f4:	mov	r2, #7
   118f8:	bl	10f5c <strncmp@plt>
   118fc:	cmp	r0, #0
   11900:	bne	11938 <__assert_fail@plt+0x9c4>
   11904:	movw	r1, #20890	; 0x519a
   11908:	movt	r1, #1
   1190c:	mov	r0, r5
   11910:	mov	r2, #3
   11914:	bl	10f5c <strncmp@plt>
   11918:	cmp	r0, #0
   1191c:	beq	11928 <__assert_fail@plt+0x9b4>
   11920:	mov	r4, r5
   11924:	b	11938 <__assert_fail@plt+0x9c4>
   11928:	add	r4, r5, #3
   1192c:	movw	r0, #24864	; 0x6120
   11930:	movt	r0, #2
   11934:	str	r4, [r0]
   11938:	movw	r0, #24868	; 0x6124
   1193c:	movt	r0, #2
   11940:	str	r4, [r0]
   11944:	movw	r0, #24904	; 0x6148
   11948:	movt	r0, #2
   1194c:	str	r4, [r0]
   11950:	pop	{r4, r5, fp, pc}
   11954:	movw	r0, #24880	; 0x6130
   11958:	movt	r0, #2
   1195c:	ldr	r3, [r0]
   11960:	movw	r0, #20826	; 0x515a
   11964:	movt	r0, #1
   11968:	mov	r1, #55	; 0x37
   1196c:	mov	r2, #1
   11970:	bl	10e00 <fwrite@plt>
   11974:	bl	10f68 <abort@plt>
   11978:	push	{r4, r5, r6, sl, fp, lr}
   1197c:	add	fp, sp, #16
   11980:	mov	r4, r0
   11984:	movw	r0, #24912	; 0x6150
   11988:	movt	r0, #2
   1198c:	cmp	r4, #0
   11990:	moveq	r4, r0
   11994:	bl	10ecc <__errno_location@plt>
   11998:	mov	r5, r0
   1199c:	ldr	r6, [r0]
   119a0:	mov	r0, r4
   119a4:	mov	r1, #48	; 0x30
   119a8:	bl	13cb8 <__assert_fail@plt+0x2d44>
   119ac:	str	r6, [r5]
   119b0:	pop	{r4, r5, r6, sl, fp, pc}
   119b4:	movw	r1, #24912	; 0x6150
   119b8:	movt	r1, #2
   119bc:	cmp	r0, #0
   119c0:	movne	r1, r0
   119c4:	ldr	r0, [r1]
   119c8:	bx	lr
   119cc:	movw	r2, #24912	; 0x6150
   119d0:	movt	r2, #2
   119d4:	cmp	r0, #0
   119d8:	movne	r2, r0
   119dc:	str	r1, [r2]
   119e0:	bx	lr
   119e4:	movw	r3, #24912	; 0x6150
   119e8:	movt	r3, #2
   119ec:	cmp	r0, #0
   119f0:	movne	r3, r0
   119f4:	ubfx	r0, r1, #5, #3
   119f8:	add	r0, r3, r0, lsl #2
   119fc:	ldr	r3, [r0, #8]
   11a00:	and	r1, r1, #31
   11a04:	eor	r2, r2, r3, lsr r1
   11a08:	and	r2, r2, #1
   11a0c:	eor	r2, r3, r2, lsl r1
   11a10:	str	r2, [r0, #8]
   11a14:	mov	r0, #1
   11a18:	and	r0, r0, r3, lsr r1
   11a1c:	bx	lr
   11a20:	movw	r2, #24912	; 0x6150
   11a24:	movt	r2, #2
   11a28:	cmp	r0, #0
   11a2c:	movne	r2, r0
   11a30:	ldr	r0, [r2, #4]
   11a34:	str	r1, [r2, #4]
   11a38:	bx	lr
   11a3c:	movw	r3, #24912	; 0x6150
   11a40:	movt	r3, #2
   11a44:	cmp	r0, #0
   11a48:	movne	r3, r0
   11a4c:	mov	r0, #10
   11a50:	str	r0, [r3]
   11a54:	cmp	r1, #0
   11a58:	cmpne	r2, #0
   11a5c:	bne	11a6c <__assert_fail@plt+0xaf8>
   11a60:	push	{fp, lr}
   11a64:	mov	fp, sp
   11a68:	bl	10f68 <abort@plt>
   11a6c:	str	r1, [r3, #40]	; 0x28
   11a70:	str	r2, [r3, #44]	; 0x2c
   11a74:	bx	lr
   11a78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a7c:	add	fp, sp, #28
   11a80:	sub	sp, sp, #20
   11a84:	mov	r8, r3
   11a88:	mov	r9, r2
   11a8c:	mov	sl, r1
   11a90:	mov	r7, r0
   11a94:	ldr	r0, [fp, #8]
   11a98:	movw	r5, #24912	; 0x6150
   11a9c:	movt	r5, #2
   11aa0:	cmp	r0, #0
   11aa4:	movne	r5, r0
   11aa8:	bl	10ecc <__errno_location@plt>
   11aac:	mov	r4, r0
   11ab0:	ldm	r5, {r0, r1}
   11ab4:	ldr	r2, [r5, #40]	; 0x28
   11ab8:	ldr	r3, [r5, #44]	; 0x2c
   11abc:	ldr	r6, [r4]
   11ac0:	add	r5, r5, #8
   11ac4:	stm	sp, {r0, r1, r5}
   11ac8:	str	r2, [sp, #12]
   11acc:	str	r3, [sp, #16]
   11ad0:	mov	r0, r7
   11ad4:	mov	r1, sl
   11ad8:	mov	r2, r9
   11adc:	mov	r3, r8
   11ae0:	bl	11af0 <__assert_fail@plt+0xb7c>
   11ae4:	str	r6, [r4]
   11ae8:	sub	sp, fp, #28
   11aec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11af0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11af4:	add	fp, sp, #28
   11af8:	sub	sp, sp, #156	; 0x9c
   11afc:	mov	r9, r3
   11b00:	str	r2, [fp, #-84]	; 0xffffffac
   11b04:	mov	r6, r1
   11b08:	mov	r7, r0
   11b0c:	ldr	r0, [fp, #12]
   11b10:	and	r1, r0, #4
   11b14:	str	r1, [sp, #32]
   11b18:	and	r1, r0, #1
   11b1c:	str	r1, [sp, #36]	; 0x24
   11b20:	ubfx	sl, r0, #1, #1
   11b24:	bl	10e18 <__ctype_get_mb_cur_max@plt>
   11b28:	str	r0, [sp, #40]	; 0x28
   11b2c:	ldr	r0, [fp, #24]
   11b30:	str	r0, [sp, #76]	; 0x4c
   11b34:	ldr	r0, [fp, #20]
   11b38:	str	r0, [sp, #68]	; 0x44
   11b3c:	ldr	r0, [fp, #8]
   11b40:	str	r0, [fp, #-60]	; 0xffffffc4
   11b44:	mov	r0, #0
   11b48:	str	r0, [sp, #72]	; 0x48
   11b4c:	mov	r0, #0
   11b50:	str	r0, [sp, #92]	; 0x5c
   11b54:	mov	r0, #0
   11b58:	str	r0, [fp, #-72]	; 0xffffffb8
   11b5c:	mov	r0, #0
   11b60:	mov	r1, #0
   11b64:	str	r1, [fp, #-56]	; 0xffffffc8
   11b68:	mov	r1, #0
   11b6c:	str	r1, [sp, #56]	; 0x38
   11b70:	mov	r5, #1
   11b74:	str	r7, [sp, #80]	; 0x50
   11b78:	mov	r4, r6
   11b7c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   11b80:	cmp	r6, #10
   11b84:	bhi	12aec <__assert_fail@plt+0x1b78>
   11b88:	add	r1, pc, #20
   11b8c:	mov	r8, #0
   11b90:	mov	r2, #1
   11b94:	mov	r3, #0
   11b98:	ldr	ip, [fp, #-84]	; 0xffffffac
   11b9c:	mov	lr, r9
   11ba0:	ldr	pc, [r1, r6, lsl #2]
   11ba4:	andeq	r1, r1, ip, ror ip
   11ba8:	andeq	r1, r1, ip, lsr #25
   11bac:	andeq	r1, r1, ip, ror #24
   11bb0:	andeq	r1, r1, r4, ror #24
   11bb4:	andeq	r1, r1, r0, lsr #25
   11bb8:	andeq	r1, r1, r0, lsl #26
   11bbc:	andeq	r1, r1, ip, lsl #25
   11bc0:	andeq	r1, r1, ip, asr sp
   11bc4:	ldrdeq	r1, [r1], -r0
   11bc8:	ldrdeq	r1, [r1], -r0
   11bcc:	strdeq	r1, [r1], -r8
   11bd0:	movw	r0, #20972	; 0x51ec
   11bd4:	movt	r0, #1
   11bd8:	mov	r1, r6
   11bdc:	bl	130f8 <__assert_fail@plt+0x2184>
   11be0:	str	r0, [sp, #68]	; 0x44
   11be4:	movw	r0, #20974	; 0x51ee
   11be8:	movt	r0, #1
   11bec:	mov	r1, r6
   11bf0:	bl	130f8 <__assert_fail@plt+0x2184>
   11bf4:	str	r0, [sp, #76]	; 0x4c
   11bf8:	mov	r8, #0
   11bfc:	tst	sl, #1
   11c00:	bne	11c38 <__assert_fail@plt+0xcc4>
   11c04:	ldr	r0, [sp, #68]	; 0x44
   11c08:	ldrb	r0, [r0]
   11c0c:	cmp	r0, #0
   11c10:	beq	11c38 <__assert_fail@plt+0xcc4>
   11c14:	ldr	r1, [sp, #68]	; 0x44
   11c18:	add	r1, r1, #1
   11c1c:	mov	r8, #0
   11c20:	cmp	r8, r4
   11c24:	strbcc	r0, [r7, r8]
   11c28:	ldrb	r0, [r1, r8]
   11c2c:	add	r8, r8, #1
   11c30:	cmp	r0, #0
   11c34:	bne	11c20 <__assert_fail@plt+0xcac>
   11c38:	ldr	r6, [sp, #76]	; 0x4c
   11c3c:	mov	r0, r6
   11c40:	bl	10eb4 <strlen@plt>
   11c44:	str	r0, [fp, #-72]	; 0xffffffb8
   11c48:	str	r6, [sp, #92]	; 0x5c
   11c4c:	mov	r2, #1
   11c50:	mov	r3, sl
   11c54:	ldr	ip, [fp, #-84]	; 0xffffffac
   11c58:	mov	lr, r9
   11c5c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   11c60:	b	11d5c <__assert_fail@plt+0xde8>
   11c64:	mov	r0, #1
   11c68:	b	11cac <__assert_fail@plt+0xd38>
   11c6c:	tst	sl, #1
   11c70:	bne	11cac <__assert_fail@plt+0xd38>
   11c74:	mov	r2, r0
   11c78:	b	11cd4 <__assert_fail@plt+0xd60>
   11c7c:	mov	r6, #0
   11c80:	mov	r8, #0
   11c84:	mov	r2, r0
   11c88:	b	11d58 <__assert_fail@plt+0xde4>
   11c8c:	mov	r0, #1
   11c90:	str	r0, [fp, #-72]	; 0xffffffb8
   11c94:	mov	r8, #0
   11c98:	mov	r6, #5
   11c9c:	b	11d18 <__assert_fail@plt+0xda4>
   11ca0:	mov	r2, #1
   11ca4:	tst	sl, #1
   11ca8:	beq	11cd4 <__assert_fail@plt+0xd60>
   11cac:	mov	r1, #1
   11cb0:	str	r1, [fp, #-72]	; 0xffffffb8
   11cb4:	mov	r8, #0
   11cb8:	mov	r6, #2
   11cbc:	movw	r1, #20974	; 0x51ee
   11cc0:	movt	r1, #1
   11cc4:	str	r1, [sp, #92]	; 0x5c
   11cc8:	mov	r2, r0
   11ccc:	mov	r3, #1
   11cd0:	b	11d5c <__assert_fail@plt+0xde8>
   11cd4:	mov	r8, #1
   11cd8:	mov	r6, #2
   11cdc:	cmp	r4, #0
   11ce0:	movne	r0, #39	; 0x27
   11ce4:	strbne	r0, [r7]
   11ce8:	movw	r0, #20974	; 0x51ee
   11cec:	movt	r0, #1
   11cf0:	str	r0, [sp, #92]	; 0x5c
   11cf4:	mov	r0, #1
   11cf8:	str	r0, [fp, #-72]	; 0xffffffb8
   11cfc:	b	11d58 <__assert_fail@plt+0xde4>
   11d00:	mov	r6, #5
   11d04:	tst	sl, #1
   11d08:	beq	11d30 <__assert_fail@plt+0xdbc>
   11d0c:	mov	r0, #1
   11d10:	str	r0, [fp, #-72]	; 0xffffffb8
   11d14:	mov	r8, #0
   11d18:	movw	r0, #20970	; 0x51ea
   11d1c:	movt	r0, #1
   11d20:	str	r0, [sp, #92]	; 0x5c
   11d24:	mov	r2, #1
   11d28:	mov	r3, #1
   11d2c:	b	11d5c <__assert_fail@plt+0xde8>
   11d30:	cmp	r4, #0
   11d34:	movne	r0, #34	; 0x22
   11d38:	strbne	r0, [r7]
   11d3c:	mov	r8, #1
   11d40:	movw	r0, #20970	; 0x51ea
   11d44:	movt	r0, #1
   11d48:	str	r0, [sp, #92]	; 0x5c
   11d4c:	mov	r0, #1
   11d50:	str	r0, [fp, #-72]	; 0xffffffb8
   11d54:	mov	r2, #1
   11d58:	mov	r3, #0
   11d5c:	ldr	r0, [fp, #16]
   11d60:	cmp	r0, #0
   11d64:	movwne	r0, #1
   11d68:	and	r0, r0, r3
   11d6c:	str	r0, [fp, #-88]	; 0xffffffa8
   11d70:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11d74:	cmp	r0, #0
   11d78:	movwne	r0, #1
   11d7c:	and	r1, r0, r3
   11d80:	and	r1, r2, r1
   11d84:	str	r1, [sp, #48]	; 0x30
   11d88:	str	r6, [fp, #-60]	; 0xffffffc4
   11d8c:	subs	r6, r6, #2
   11d90:	clz	r1, r6
   11d94:	lsr	r1, r1, #5
   11d98:	and	r1, r1, r3
   11d9c:	str	r1, [sp, #60]	; 0x3c
   11da0:	str	r6, [fp, #-80]	; 0xffffffb0
   11da4:	mov	r1, r6
   11da8:	movwne	r1, #1
   11dac:	str	r3, [fp, #-76]	; 0xffffffb4
   11db0:	eor	r3, r3, #1
   11db4:	str	r3, [sp, #88]	; 0x58
   11db8:	orr	r3, r1, r3
   11dbc:	str	r3, [sp, #64]	; 0x40
   11dc0:	and	r1, r1, r2
   11dc4:	str	r1, [fp, #-68]	; 0xffffffbc
   11dc8:	and	r0, r0, r1
   11dcc:	str	r0, [fp, #-64]	; 0xffffffc0
   11dd0:	str	r2, [sp, #84]	; 0x54
   11dd4:	eor	r0, r2, #1
   11dd8:	str	r0, [sp, #52]	; 0x34
   11ddc:	mov	r6, #0
   11de0:	cmn	lr, #1
   11de4:	beq	11df4 <__assert_fail@plt+0xe80>
   11de8:	cmp	r6, lr
   11dec:	bne	11e00 <__assert_fail@plt+0xe8c>
   11df0:	b	1296c <__assert_fail@plt+0x19f8>
   11df4:	ldrb	r0, [ip, r6]
   11df8:	cmp	r0, #0
   11dfc:	beq	1296c <__assert_fail@plt+0x19f8>
   11e00:	str	r5, [fp, #-48]	; 0xffffffd0
   11e04:	mov	sl, #0
   11e08:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11e0c:	cmp	r0, #0
   11e10:	beq	11e44 <__assert_fail@plt+0xed0>
   11e14:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11e18:	add	r5, r6, r0
   11e1c:	cmp	r0, #2
   11e20:	bcc	11e3c <__assert_fail@plt+0xec8>
   11e24:	cmn	lr, #1
   11e28:	bne	11e3c <__assert_fail@plt+0xec8>
   11e2c:	mov	r0, ip
   11e30:	bl	10eb4 <strlen@plt>
   11e34:	ldr	ip, [fp, #-84]	; 0xffffffac
   11e38:	mov	lr, r0
   11e3c:	cmp	r5, lr
   11e40:	bls	11e50 <__assert_fail@plt+0xedc>
   11e44:	mov	r0, #0
   11e48:	str	r0, [fp, #-52]	; 0xffffffcc
   11e4c:	b	11e9c <__assert_fail@plt+0xf28>
   11e50:	mov	r5, r4
   11e54:	mov	r4, lr
   11e58:	add	r0, ip, r6
   11e5c:	ldr	r1, [sp, #92]	; 0x5c
   11e60:	ldr	r2, [fp, #-72]	; 0xffffffb8
   11e64:	bl	10db8 <memcmp@plt>
   11e68:	cmp	r0, #0
   11e6c:	mov	r1, r0
   11e70:	movwne	r1, #1
   11e74:	ldr	r2, [sp, #88]	; 0x58
   11e78:	orr	r1, r1, r2
   11e7c:	tst	r1, #1
   11e80:	beq	12a30 <__assert_fail@plt+0x1abc>
   11e84:	clz	r0, r0
   11e88:	lsr	r0, r0, #5
   11e8c:	str	r0, [fp, #-52]	; 0xffffffcc
   11e90:	ldr	ip, [fp, #-84]	; 0xffffffac
   11e94:	mov	lr, r4
   11e98:	mov	r4, r5
   11e9c:	ldrb	r5, [ip, r6]
   11ea0:	cmp	r5, #126	; 0x7e
   11ea4:	bhi	12260 <__assert_fail@plt+0x12ec>
   11ea8:	mov	r9, #1
   11eac:	mov	r2, #110	; 0x6e
   11eb0:	mov	r0, #97	; 0x61
   11eb4:	add	r3, pc, #4
   11eb8:	mov	r1, #0
   11ebc:	ldr	pc, [r3, r5, lsl #2]
   11ec0:	andeq	r2, r1, r8, asr r1
   11ec4:	andeq	r2, r1, r0, ror #4
   11ec8:	andeq	r2, r1, r0, ror #4
   11ecc:	andeq	r2, r1, r0, ror #4
   11ed0:	andeq	r2, r1, r0, ror #4
   11ed4:	andeq	r2, r1, r0, ror #4
   11ed8:	andeq	r2, r1, r0, ror #4
   11edc:	andeq	r2, r1, r4, lsr #6
   11ee0:	andeq	r2, r1, r8, lsr r1
   11ee4:	andeq	r2, r1, r0, lsr r1
   11ee8:	andeq	r2, r1, r4, asr #2
   11eec:	andeq	r2, r1, r8, asr #3
   11ef0:	andeq	r2, r1, r8, lsr #2
   11ef4:	andeq	r2, r1, r0, asr #2
   11ef8:	andeq	r2, r1, r0, ror #4
   11efc:	andeq	r2, r1, r0, ror #4
   11f00:	andeq	r2, r1, r0, ror #4
   11f04:	andeq	r2, r1, r0, ror #4
   11f08:	andeq	r2, r1, r0, ror #4
   11f0c:	andeq	r2, r1, r0, ror #4
   11f10:	andeq	r2, r1, r0, ror #4
   11f14:	andeq	r2, r1, r0, ror #4
   11f18:	andeq	r2, r1, r0, ror #4
   11f1c:	andeq	r2, r1, r0, ror #4
   11f20:	andeq	r2, r1, r0, ror #4
   11f24:	andeq	r2, r1, r0, ror #4
   11f28:	andeq	r2, r1, r0, ror #4
   11f2c:	andeq	r2, r1, r0, ror #4
   11f30:	andeq	r2, r1, r0, ror #4
   11f34:	andeq	r2, r1, r0, ror #4
   11f38:	andeq	r2, r1, r0, ror #4
   11f3c:	andeq	r2, r1, r0, ror #4
   11f40:	ldrdeq	r2, [r1], -r4
   11f44:	ldrdeq	r2, [r1], -r8
   11f48:	ldrdeq	r2, [r1], -r8
   11f4c:	ldrdeq	r2, [r1], -r0
   11f50:	ldrdeq	r2, [r1], -r8
   11f54:	strheq	r2, [r1], -ip
   11f58:	ldrdeq	r2, [r1], -r8
   11f5c:	ldrdeq	r2, [r1], -r0
   11f60:	ldrdeq	r2, [r1], -r8
   11f64:	ldrdeq	r2, [r1], -r8
   11f68:	ldrdeq	r2, [r1], -r8
   11f6c:	strheq	r2, [r1], -ip
   11f70:	strheq	r2, [r1], -ip
   11f74:	strheq	r2, [r1], -ip
   11f78:	strheq	r2, [r1], -ip
   11f7c:	strheq	r2, [r1], -ip
   11f80:	strheq	r2, [r1], -ip
   11f84:	strheq	r2, [r1], -ip
   11f88:	strheq	r2, [r1], -ip
   11f8c:	strheq	r2, [r1], -ip
   11f90:	strheq	r2, [r1], -ip
   11f94:	strheq	r2, [r1], -ip
   11f98:	strheq	r2, [r1], -ip
   11f9c:	strheq	r2, [r1], -ip
   11fa0:	strheq	r2, [r1], -ip
   11fa4:	strheq	r2, [r1], -ip
   11fa8:	strheq	r2, [r1], -ip
   11fac:	ldrdeq	r2, [r1], -r8
   11fb0:	ldrdeq	r2, [r1], -r8
   11fb4:	ldrdeq	r2, [r1], -r8
   11fb8:	ldrdeq	r2, [r1], -r8
   11fbc:	muleq	r1, r8, r1
   11fc0:	andeq	r2, r1, r0, ror #4
   11fc4:	strheq	r2, [r1], -ip
   11fc8:	strheq	r2, [r1], -ip
   11fcc:	strheq	r2, [r1], -ip
   11fd0:	strheq	r2, [r1], -ip
   11fd4:	strheq	r2, [r1], -ip
   11fd8:	strheq	r2, [r1], -ip
   11fdc:	strheq	r2, [r1], -ip
   11fe0:	strheq	r2, [r1], -ip
   11fe4:	strheq	r2, [r1], -ip
   11fe8:	strheq	r2, [r1], -ip
   11fec:	strheq	r2, [r1], -ip
   11ff0:	strheq	r2, [r1], -ip
   11ff4:	strheq	r2, [r1], -ip
   11ff8:	strheq	r2, [r1], -ip
   11ffc:	strheq	r2, [r1], -ip
   12000:	strheq	r2, [r1], -ip
   12004:	strheq	r2, [r1], -ip
   12008:	strheq	r2, [r1], -ip
   1200c:	strheq	r2, [r1], -ip
   12010:	strheq	r2, [r1], -ip
   12014:	strheq	r2, [r1], -ip
   12018:	strheq	r2, [r1], -ip
   1201c:	strheq	r2, [r1], -ip
   12020:	strheq	r2, [r1], -ip
   12024:	strheq	r2, [r1], -ip
   12028:	strheq	r2, [r1], -ip
   1202c:	ldrdeq	r2, [r1], -r8
   12030:	andeq	r2, r1, r4, lsl #2
   12034:	strheq	r2, [r1], -ip
   12038:	ldrdeq	r2, [r1], -r8
   1203c:	strheq	r2, [r1], -ip
   12040:	ldrdeq	r2, [r1], -r8
   12044:	strheq	r2, [r1], -ip
   12048:	strheq	r2, [r1], -ip
   1204c:	strheq	r2, [r1], -ip
   12050:	strheq	r2, [r1], -ip
   12054:	strheq	r2, [r1], -ip
   12058:	strheq	r2, [r1], -ip
   1205c:	strheq	r2, [r1], -ip
   12060:	strheq	r2, [r1], -ip
   12064:	strheq	r2, [r1], -ip
   12068:	strheq	r2, [r1], -ip
   1206c:	strheq	r2, [r1], -ip
   12070:	strheq	r2, [r1], -ip
   12074:	strheq	r2, [r1], -ip
   12078:	strheq	r2, [r1], -ip
   1207c:	strheq	r2, [r1], -ip
   12080:	strheq	r2, [r1], -ip
   12084:	strheq	r2, [r1], -ip
   12088:	strheq	r2, [r1], -ip
   1208c:	strheq	r2, [r1], -ip
   12090:	strheq	r2, [r1], -ip
   12094:	strheq	r2, [r1], -ip
   12098:	strheq	r2, [r1], -ip
   1209c:	strheq	r2, [r1], -ip
   120a0:	strheq	r2, [r1], -ip
   120a4:	strheq	r2, [r1], -ip
   120a8:	strheq	r2, [r1], -ip
   120ac:	andeq	r2, r1, r4, ror #1
   120b0:	ldrdeq	r2, [r1], -r8
   120b4:	andeq	r2, r1, r4, ror #1
   120b8:	ldrdeq	r2, [r1], -r0
   120bc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   120c0:	cmp	r0, #0
   120c4:	beq	12338 <__assert_fail@plt+0x13c4>
   120c8:	ldr	r0, [fp, #16]
   120cc:	b	1233c <__assert_fail@plt+0x13c8>
   120d0:	mov	r9, #0
   120d4:	cmp	r6, #0
   120d8:	beq	122d4 <__assert_fail@plt+0x1360>
   120dc:	mov	sl, #0
   120e0:	b	120bc <__assert_fail@plt+0x1148>
   120e4:	mov	r9, #0
   120e8:	cmn	lr, #1
   120ec:	beq	122b8 <__assert_fail@plt+0x1344>
   120f0:	cmp	r6, #0
   120f4:	bne	120dc <__assert_fail@plt+0x1168>
   120f8:	cmp	lr, #1
   120fc:	beq	122d4 <__assert_fail@plt+0x1360>
   12100:	b	120dc <__assert_fail@plt+0x1168>
   12104:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12108:	cmp	r0, #2
   1210c:	bne	12300 <__assert_fail@plt+0x138c>
   12110:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12114:	tst	r0, #1
   12118:	bne	12a48 <__assert_fail@plt+0x1ad4>
   1211c:	mov	sl, #0
   12120:	mov	r0, #92	; 0x5c
   12124:	b	12314 <__assert_fail@plt+0x13a0>
   12128:	mov	r0, #102	; 0x66
   1212c:	b	12324 <__assert_fail@plt+0x13b0>
   12130:	mov	r2, #116	; 0x74
   12134:	b	12144 <__assert_fail@plt+0x11d0>
   12138:	mov	r0, #98	; 0x62
   1213c:	b	12324 <__assert_fail@plt+0x13b0>
   12140:	mov	r2, #114	; 0x72
   12144:	ldr	r0, [sp, #64]	; 0x40
   12148:	tst	r0, #1
   1214c:	mov	r0, r2
   12150:	bne	12324 <__assert_fail@plt+0x13b0>
   12154:	b	12a48 <__assert_fail@plt+0x1ad4>
   12158:	ldr	r0, [sp, #84]	; 0x54
   1215c:	tst	r0, #1
   12160:	beq	12414 <__assert_fail@plt+0x14a0>
   12164:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12168:	tst	r0, #1
   1216c:	bne	12a48 <__assert_fail@plt+0x1ad4>
   12170:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12174:	cmp	r0, #2
   12178:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1217c:	movwne	r0, #1
   12180:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12184:	orr	r0, r0, r2
   12188:	tst	r0, #1
   1218c:	beq	12808 <__assert_fail@plt+0x1894>
   12190:	mov	r0, r8
   12194:	b	1283c <__assert_fail@plt+0x18c8>
   12198:	mov	sl, #0
   1219c:	mov	r5, #63	; 0x3f
   121a0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   121a4:	cmp	r0, #5
   121a8:	beq	125c8 <__assert_fail@plt+0x1654>
   121ac:	cmp	r0, #2
   121b0:	bne	12668 <__assert_fail@plt+0x16f4>
   121b4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   121b8:	tst	r0, #1
   121bc:	mov	r9, #0
   121c0:	beq	120bc <__assert_fail@plt+0x1148>
   121c4:	b	12a48 <__assert_fail@plt+0x1ad4>
   121c8:	mov	r0, #118	; 0x76
   121cc:	b	12324 <__assert_fail@plt+0x13b0>
   121d0:	mov	r5, #39	; 0x27
   121d4:	mov	r0, #1
   121d8:	str	r0, [sp, #56]	; 0x38
   121dc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   121e0:	cmp	r0, #2
   121e4:	bne	12434 <__assert_fail@plt+0x14c0>
   121e8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   121ec:	tst	r0, #1
   121f0:	bne	12a48 <__assert_fail@plt+0x1ad4>
   121f4:	ldr	r2, [sp, #72]	; 0x48
   121f8:	cmp	r2, #0
   121fc:	mov	r0, r2
   12200:	movwne	r0, #1
   12204:	clz	r1, r4
   12208:	lsr	r1, r1, #5
   1220c:	orrs	r0, r0, r1
   12210:	moveq	r2, r4
   12214:	str	r2, [sp, #72]	; 0x48
   12218:	moveq	r4, r0
   1221c:	cmp	r8, r4
   12220:	movcc	r0, #39	; 0x27
   12224:	strbcc	r0, [r7, r8]
   12228:	add	r0, r8, #1
   1222c:	cmp	r0, r4
   12230:	movcc	r1, #92	; 0x5c
   12234:	strbcc	r1, [r7, r0]
   12238:	add	r0, r8, #2
   1223c:	cmp	r0, r4
   12240:	movcc	r1, #39	; 0x27
   12244:	strbcc	r1, [r7, r0]
   12248:	add	r8, r8, #3
   1224c:	mov	r0, #0
   12250:	str	r0, [fp, #-56]	; 0xffffffc8
   12254:	mov	sl, #0
   12258:	mov	r9, #1
   1225c:	b	120bc <__assert_fail@plt+0x1148>
   12260:	str	r4, [sp, #24]
   12264:	ldr	r0, [sp, #40]	; 0x28
   12268:	cmp	r0, #1
   1226c:	bne	1243c <__assert_fail@plt+0x14c8>
   12270:	str	lr, [sp, #28]
   12274:	bl	10e9c <__ctype_b_loc@plt>
   12278:	ldr	ip, [fp, #-84]	; 0xffffffac
   1227c:	ldr	r0, [r0]
   12280:	add	r0, r0, r5, lsl #1
   12284:	ldrb	r0, [r0, #1]
   12288:	ubfx	r9, r0, #6, #1
   1228c:	mov	r1, #1
   12290:	ldr	r4, [sp, #24]
   12294:	ldr	r0, [sp, #52]	; 0x34
   12298:	orr	r0, r9, r0
   1229c:	mov	r2, r1
   122a0:	cmp	r1, #1
   122a4:	bhi	12670 <__assert_fail@plt+0x16fc>
   122a8:	tst	r0, #1
   122ac:	beq	12670 <__assert_fail@plt+0x16fc>
   122b0:	ldr	lr, [sp, #28]
   122b4:	b	120bc <__assert_fail@plt+0x1148>
   122b8:	cmp	r6, #0
   122bc:	ldrbeq	r0, [ip, #1]
   122c0:	cmpeq	r0, #0
   122c4:	beq	122d4 <__assert_fail@plt+0x1360>
   122c8:	mvn	lr, #0
   122cc:	mov	sl, #0
   122d0:	b	120bc <__assert_fail@plt+0x1148>
   122d4:	mov	r1, #1
   122d8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   122dc:	cmp	r0, #2
   122e0:	bne	122f8 <__assert_fail@plt+0x1384>
   122e4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   122e8:	tst	r0, #1
   122ec:	mov	r9, r1
   122f0:	beq	120bc <__assert_fail@plt+0x1148>
   122f4:	b	12a48 <__assert_fail@plt+0x1ad4>
   122f8:	mov	r9, r1
   122fc:	b	120bc <__assert_fail@plt+0x1148>
   12300:	mov	sl, #0
   12304:	mov	r0, #92	; 0x5c
   12308:	ldr	r1, [sp, #48]	; 0x30
   1230c:	cmp	r1, #0
   12310:	beq	12324 <__assert_fail@plt+0x13b0>
   12314:	mov	r9, #0
   12318:	cmp	sl, #0
   1231c:	beq	128d4 <__assert_fail@plt+0x1960>
   12320:	b	12910 <__assert_fail@plt+0x199c>
   12324:	mov	r9, #0
   12328:	ldr	r1, [sp, #84]	; 0x54
   1232c:	tst	r1, #1
   12330:	mov	sl, #0
   12334:	bne	12374 <__assert_fail@plt+0x1400>
   12338:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1233c:	cmp	r0, #0
   12340:	mov	r0, r5
   12344:	beq	12368 <__assert_fail@plt+0x13f4>
   12348:	ubfx	r0, r5, #5, #3
   1234c:	ldr	r1, [fp, #16]
   12350:	ldr	r0, [r1, r0, lsl #2]
   12354:	and	r1, r5, #31
   12358:	mov	r2, #1
   1235c:	tst	r0, r2, lsl r1
   12360:	mov	r0, r5
   12364:	bne	12374 <__assert_fail@plt+0x1400>
   12368:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1236c:	cmp	r1, #0
   12370:	beq	128cc <__assert_fail@plt+0x1958>
   12374:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12378:	tst	r1, #1
   1237c:	bne	12a48 <__assert_fail@plt+0x1ad4>
   12380:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12384:	cmp	r1, #2
   12388:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1238c:	movwne	r1, #1
   12390:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12394:	orr	r1, r1, r2
   12398:	tst	r1, #1
   1239c:	beq	123a8 <__assert_fail@plt+0x1434>
   123a0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   123a4:	b	123e4 <__assert_fail@plt+0x1470>
   123a8:	cmp	r8, r4
   123ac:	movcc	r1, #39	; 0x27
   123b0:	strbcc	r1, [r7, r8]
   123b4:	add	r1, r8, #1
   123b8:	cmp	r1, r4
   123bc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   123c0:	movcc	r2, #36	; 0x24
   123c4:	strbcc	r2, [r7, r1]
   123c8:	add	r1, r8, #2
   123cc:	cmp	r1, r4
   123d0:	movcc	r2, #39	; 0x27
   123d4:	strbcc	r2, [r7, r1]
   123d8:	add	r8, r8, #3
   123dc:	mov	r1, #1
   123e0:	str	r1, [fp, #-56]	; 0xffffffc8
   123e4:	cmp	r8, r4
   123e8:	movcc	r1, #92	; 0x5c
   123ec:	strbcc	r1, [r7, r8]
   123f0:	add	r8, r8, #1
   123f4:	cmp	r8, r4
   123f8:	strbcc	r0, [r7, r8]
   123fc:	and	r5, r5, r9
   12400:	add	r8, r8, #1
   12404:	add	r6, r6, #1
   12408:	cmn	lr, #1
   1240c:	bne	11de8 <__assert_fail@plt+0xe74>
   12410:	b	11df4 <__assert_fail@plt+0xe80>
   12414:	mov	r9, #0
   12418:	ldr	r0, [sp, #36]	; 0x24
   1241c:	cmp	r0, #0
   12420:	mov	sl, #0
   12424:	mov	r5, #0
   12428:	beq	12338 <__assert_fail@plt+0x13c4>
   1242c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12430:	b	12404 <__assert_fail@plt+0x1490>
   12434:	mov	r9, #1
   12438:	b	120bc <__assert_fail@plt+0x1148>
   1243c:	mov	r0, #0
   12440:	str	r0, [fp, #-36]	; 0xffffffdc
   12444:	str	r0, [fp, #-40]	; 0xffffffd8
   12448:	cmn	lr, #1
   1244c:	bne	12460 <__assert_fail@plt+0x14ec>
   12450:	mov	r0, ip
   12454:	bl	10eb4 <strlen@plt>
   12458:	ldr	ip, [fp, #-84]	; 0xffffffac
   1245c:	mov	lr, r0
   12460:	add	r0, ip, r6
   12464:	str	r0, [sp, #20]
   12468:	mov	r9, #1
   1246c:	mov	r7, #0
   12470:	sub	r4, fp, #40	; 0x28
   12474:	str	lr, [sp, #28]
   12478:	str	r7, [sp, #44]	; 0x2c
   1247c:	add	r7, r7, r6
   12480:	add	r1, ip, r7
   12484:	sub	r2, lr, r7
   12488:	sub	r0, fp, #44	; 0x2c
   1248c:	mov	r3, r4
   12490:	bl	149c0 <__assert_fail@plt+0x3a4c>
   12494:	cmp	r0, #0
   12498:	beq	12958 <__assert_fail@plt+0x19e4>
   1249c:	cmn	r0, #1
   124a0:	beq	12918 <__assert_fail@plt+0x19a4>
   124a4:	cmn	r0, #2
   124a8:	ldr	lr, [sp, #28]
   124ac:	beq	12920 <__assert_fail@plt+0x19ac>
   124b0:	cmp	r0, #2
   124b4:	mov	r1, #0
   124b8:	movwcc	r1, #1
   124bc:	ldr	r2, [sp, #60]	; 0x3c
   124c0:	eor	r2, r2, #1
   124c4:	orrs	r1, r2, r1
   124c8:	ldr	r4, [sp, #24]
   124cc:	bne	1258c <__assert_fail@plt+0x1618>
   124d0:	ldr	r1, [sp, #44]	; 0x2c
   124d4:	ldr	r2, [sp, #20]
   124d8:	add	r1, r2, r1
   124dc:	mov	r2, #1
   124e0:	ldrb	r3, [r1, r2]
   124e4:	sub	r3, r3, #91	; 0x5b
   124e8:	cmp	r3, #33	; 0x21
   124ec:	bhi	12580 <__assert_fail@plt+0x160c>
   124f0:	add	r7, pc, #0
   124f4:	ldr	pc, [r7, r3, lsl #2]
   124f8:	andeq	r2, r1, r0, asr #20
   124fc:	andeq	r2, r1, r0, asr #20
   12500:	andeq	r2, r1, r0, lsl #11
   12504:	andeq	r2, r1, r0, asr #20
   12508:	andeq	r2, r1, r0, lsl #11
   1250c:	andeq	r2, r1, r0, asr #20
   12510:	andeq	r2, r1, r0, lsl #11
   12514:	andeq	r2, r1, r0, lsl #11
   12518:	andeq	r2, r1, r0, lsl #11
   1251c:	andeq	r2, r1, r0, lsl #11
   12520:	andeq	r2, r1, r0, lsl #11
   12524:	andeq	r2, r1, r0, lsl #11
   12528:	andeq	r2, r1, r0, lsl #11
   1252c:	andeq	r2, r1, r0, lsl #11
   12530:	andeq	r2, r1, r0, lsl #11
   12534:	andeq	r2, r1, r0, lsl #11
   12538:	andeq	r2, r1, r0, lsl #11
   1253c:	andeq	r2, r1, r0, lsl #11
   12540:	andeq	r2, r1, r0, lsl #11
   12544:	andeq	r2, r1, r0, lsl #11
   12548:	andeq	r2, r1, r0, lsl #11
   1254c:	andeq	r2, r1, r0, lsl #11
   12550:	andeq	r2, r1, r0, lsl #11
   12554:	andeq	r2, r1, r0, lsl #11
   12558:	andeq	r2, r1, r0, lsl #11
   1255c:	andeq	r2, r1, r0, lsl #11
   12560:	andeq	r2, r1, r0, lsl #11
   12564:	andeq	r2, r1, r0, lsl #11
   12568:	andeq	r2, r1, r0, lsl #11
   1256c:	andeq	r2, r1, r0, lsl #11
   12570:	andeq	r2, r1, r0, lsl #11
   12574:	andeq	r2, r1, r0, lsl #11
   12578:	andeq	r2, r1, r0, lsl #11
   1257c:	andeq	r2, r1, r0, asr #20
   12580:	add	r2, r2, #1
   12584:	cmp	r2, r0
   12588:	bcc	124e0 <__assert_fail@plt+0x156c>
   1258c:	ldr	r7, [sp, #44]	; 0x2c
   12590:	add	r7, r0, r7
   12594:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12598:	bl	10df4 <iswprint@plt>
   1259c:	cmp	r0, #0
   125a0:	movwne	r0, #1
   125a4:	and	r9, r9, r0
   125a8:	sub	r4, fp, #40	; 0x28
   125ac:	mov	r0, r4
   125b0:	bl	10dac <mbsinit@plt>
   125b4:	ldr	lr, [sp, #28]
   125b8:	cmp	r0, #0
   125bc:	ldr	ip, [fp, #-84]	; 0xffffffac
   125c0:	beq	12478 <__assert_fail@plt+0x1504>
   125c4:	b	12960 <__assert_fail@plt+0x19ec>
   125c8:	ldr	r0, [sp, #32]
   125cc:	cmp	r0, #0
   125d0:	beq	12668 <__assert_fail@plt+0x16f4>
   125d4:	add	r0, r6, #2
   125d8:	cmp	r0, lr
   125dc:	bcs	12668 <__assert_fail@plt+0x16f4>
   125e0:	add	r1, ip, r6
   125e4:	ldrb	r1, [r1, #1]
   125e8:	cmp	r1, #63	; 0x3f
   125ec:	bne	12668 <__assert_fail@plt+0x16f4>
   125f0:	ldrb	r9, [ip, r0]
   125f4:	sub	r2, r9, #33	; 0x21
   125f8:	cmp	r2, #29
   125fc:	bhi	12668 <__assert_fail@plt+0x16f4>
   12600:	mov	r3, #1
   12604:	movw	r1, #20929	; 0x51c1
   12608:	movt	r1, #14336	; 0x3800
   1260c:	tst	r1, r3, lsl r2
   12610:	beq	12668 <__assert_fail@plt+0x16f4>
   12614:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12618:	tst	r1, #1
   1261c:	bne	12a48 <__assert_fail@plt+0x1ad4>
   12620:	cmp	r8, r4
   12624:	movcc	r1, #63	; 0x3f
   12628:	strbcc	r1, [r7, r8]
   1262c:	add	r2, r8, #1
   12630:	cmp	r2, r4
   12634:	movcc	r1, #34	; 0x22
   12638:	strbcc	r1, [r7, r2]
   1263c:	add	r2, r8, #2
   12640:	cmp	r2, r4
   12644:	movcc	r1, #34	; 0x22
   12648:	strbcc	r1, [r7, r2]
   1264c:	add	r2, r8, #3
   12650:	cmp	r2, r4
   12654:	movcc	r1, #63	; 0x3f
   12658:	strbcc	r1, [r7, r2]
   1265c:	add	r8, r8, #4
   12660:	mov	r6, r0
   12664:	mov	r5, r9
   12668:	mov	r9, #0
   1266c:	b	120bc <__assert_fail@plt+0x1148>
   12670:	add	r1, r2, r6
   12674:	str	r1, [sp, #44]	; 0x2c
   12678:	add	r1, r6, #1
   1267c:	mov	r3, #0
   12680:	ldr	lr, [sp, #28]
   12684:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12688:	tst	r0, #1
   1268c:	bne	12780 <__assert_fail@plt+0x180c>
   12690:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12694:	tst	r2, #1
   12698:	bne	12a48 <__assert_fail@plt+0x1ad4>
   1269c:	cmp	r6, #2
   126a0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   126a4:	movwne	r3, #1
   126a8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   126ac:	orr	r3, r3, r2
   126b0:	tst	r3, #1
   126b4:	bne	126f0 <__assert_fail@plt+0x177c>
   126b8:	cmp	r8, r4
   126bc:	movcc	r2, #39	; 0x27
   126c0:	strbcc	r2, [r7, r8]
   126c4:	add	r3, r8, #1
   126c8:	cmp	r3, r4
   126cc:	movcc	r2, #36	; 0x24
   126d0:	strbcc	r2, [r7, r3]
   126d4:	add	r3, r8, #2
   126d8:	cmp	r3, r4
   126dc:	movcc	r2, #39	; 0x27
   126e0:	strbcc	r2, [r7, r3]
   126e4:	add	r8, r8, #3
   126e8:	mov	r2, #1
   126ec:	str	r2, [fp, #-56]	; 0xffffffc8
   126f0:	cmp	r8, r4
   126f4:	movcc	r2, #92	; 0x5c
   126f8:	strbcc	r2, [r7, r8]
   126fc:	add	r3, r8, #1
   12700:	cmp	r3, r4
   12704:	bcs	12724 <__assert_fail@plt+0x17b0>
   12708:	and	r7, r5, #192	; 0xc0
   1270c:	mov	r2, #48	; 0x30
   12710:	orr	r7, r2, r7, lsr #6
   12714:	ldr	r6, [sp, #80]	; 0x50
   12718:	strb	r7, [r6, r3]
   1271c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12720:	ldr	r7, [sp, #80]	; 0x50
   12724:	add	r3, r8, #2
   12728:	cmp	r3, r4
   1272c:	bcs	1274c <__assert_fail@plt+0x17d8>
   12730:	lsr	r7, r5, #3
   12734:	mov	r2, #6
   12738:	bfi	r7, r2, #3, #29
   1273c:	ldr	r6, [sp, #80]	; 0x50
   12740:	strb	r7, [r6, r3]
   12744:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12748:	ldr	r7, [sp, #80]	; 0x50
   1274c:	mov	r2, #6
   12750:	bfi	r5, r2, #3, #29
   12754:	add	r8, r8, #3
   12758:	mov	r3, #1
   1275c:	b	127a4 <__assert_fail@plt+0x1830>
   12760:	ldr	r7, [sp, #80]	; 0x50
   12764:	cmp	r8, r4
   12768:	strbcc	r5, [r7, r8]
   1276c:	ldrb	r5, [ip, r1]
   12770:	add	r1, r1, #1
   12774:	add	r8, r8, #1
   12778:	tst	r0, #1
   1277c:	beq	12690 <__assert_fail@plt+0x171c>
   12780:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12784:	tst	r2, #1
   12788:	beq	1279c <__assert_fail@plt+0x1828>
   1278c:	cmp	r8, r4
   12790:	movcc	r2, #92	; 0x5c
   12794:	strbcc	r2, [r7, r8]
   12798:	add	r8, r8, #1
   1279c:	mov	r2, #0
   127a0:	str	r2, [fp, #-52]	; 0xffffffcc
   127a4:	and	sl, r3, #1
   127a8:	ldr	r2, [sp, #44]	; 0x2c
   127ac:	cmp	r2, r1
   127b0:	bls	128bc <__assert_fail@plt+0x1948>
   127b4:	cmp	sl, #0
   127b8:	movwne	sl, #1
   127bc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   127c0:	mvn	r7, r2
   127c4:	orr	r7, r7, sl
   127c8:	tst	r7, #1
   127cc:	bne	12760 <__assert_fail@plt+0x17ec>
   127d0:	cmp	r8, r4
   127d4:	ldrcc	r7, [sp, #80]	; 0x50
   127d8:	movcc	r2, #39	; 0x27
   127dc:	strbcc	r2, [r7, r8]
   127e0:	add	r7, r8, #1
   127e4:	cmp	r7, r4
   127e8:	ldrcc	r6, [sp, #80]	; 0x50
   127ec:	movcc	r2, #39	; 0x27
   127f0:	strbcc	r2, [r6, r7]
   127f4:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   127f8:	add	r8, r8, #2
   127fc:	mov	r2, #0
   12800:	str	r2, [fp, #-56]	; 0xffffffc8
   12804:	b	12760 <__assert_fail@plt+0x17ec>
   12808:	cmp	r8, r4
   1280c:	movcc	r0, #39	; 0x27
   12810:	strbcc	r0, [r7, r8]
   12814:	add	r0, r8, #1
   12818:	cmp	r0, r4
   1281c:	movcc	r1, #36	; 0x24
   12820:	strbcc	r1, [r7, r0]
   12824:	add	r0, r8, #2
   12828:	cmp	r0, r4
   1282c:	movcc	r1, #39	; 0x27
   12830:	strbcc	r1, [r7, r0]
   12834:	add	r0, r8, #3
   12838:	mov	r2, #1
   1283c:	cmp	r0, r4
   12840:	movcc	r1, #92	; 0x5c
   12844:	strbcc	r1, [r7, r0]
   12848:	str	r2, [fp, #-56]	; 0xffffffc8
   1284c:	add	r8, r0, #1
   12850:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12854:	cmp	r1, #2
   12858:	beq	128ac <__assert_fail@plt+0x1938>
   1285c:	add	r1, r6, #1
   12860:	mov	r9, #0
   12864:	mov	sl, #1
   12868:	mov	r5, #48	; 0x30
   1286c:	cmp	r1, lr
   12870:	bcs	120bc <__assert_fail@plt+0x1148>
   12874:	ldrb	r1, [ip, r1]
   12878:	sub	r1, r1, #48	; 0x30
   1287c:	uxtb	r1, r1
   12880:	cmp	r1, #9
   12884:	bhi	120bc <__assert_fail@plt+0x1148>
   12888:	cmp	r8, r4
   1288c:	movcc	r1, #48	; 0x30
   12890:	strbcc	r1, [r7, r8]
   12894:	add	r1, r0, #2
   12898:	cmp	r1, r4
   1289c:	movcc	r2, #48	; 0x30
   128a0:	strbcc	r2, [r7, r1]
   128a4:	add	r8, r0, #3
   128a8:	b	120bc <__assert_fail@plt+0x1148>
   128ac:	mov	r0, #48	; 0x30
   128b0:	mov	sl, #1
   128b4:	mov	r9, #0
   128b8:	b	12368 <__assert_fail@plt+0x13f4>
   128bc:	sub	r6, r1, #1
   128c0:	cmp	sl, #0
   128c4:	movwne	sl, #1
   128c8:	mov	r0, r5
   128cc:	cmp	sl, #0
   128d0:	bne	12910 <__assert_fail@plt+0x199c>
   128d4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   128d8:	tst	r1, #1
   128dc:	beq	12910 <__assert_fail@plt+0x199c>
   128e0:	cmp	r8, r4
   128e4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   128e8:	movcc	r1, #39	; 0x27
   128ec:	strbcc	r1, [r7, r8]
   128f0:	add	r1, r8, #1
   128f4:	cmp	r1, r4
   128f8:	movcc	r2, #39	; 0x27
   128fc:	strbcc	r2, [r7, r1]
   12900:	add	r8, r8, #2
   12904:	mov	r1, #0
   12908:	str	r1, [fp, #-56]	; 0xffffffc8
   1290c:	b	123f4 <__assert_fail@plt+0x1480>
   12910:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12914:	b	123f4 <__assert_fail@plt+0x1480>
   12918:	mov	r9, #0
   1291c:	b	12958 <__assert_fail@plt+0x19e4>
   12920:	mov	r9, #0
   12924:	cmp	r7, lr
   12928:	bcs	12958 <__assert_fail@plt+0x19e4>
   1292c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12930:	ldr	r7, [sp, #44]	; 0x2c
   12934:	ldr	r0, [sp, #20]
   12938:	ldrb	r0, [r0, r7]
   1293c:	cmp	r0, #0
   12940:	beq	12960 <__assert_fail@plt+0x19ec>
   12944:	add	r7, r7, #1
   12948:	add	r0, r6, r7
   1294c:	cmp	r0, lr
   12950:	bcc	12934 <__assert_fail@plt+0x19c0>
   12954:	b	12960 <__assert_fail@plt+0x19ec>
   12958:	ldr	ip, [fp, #-84]	; 0xffffffac
   1295c:	ldr	r7, [sp, #44]	; 0x2c
   12960:	mov	r1, r7
   12964:	ldr	r7, [sp, #80]	; 0x50
   12968:	b	12290 <__assert_fail@plt+0x131c>
   1296c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12970:	eor	r0, r1, #2
   12974:	orr	r0, r0, r8
   12978:	clz	r0, r0
   1297c:	lsr	r0, r0, #5
   12980:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12984:	tst	r2, r0
   12988:	bne	12a48 <__assert_fail@plt+0x1ad4>
   1298c:	cmp	r1, #2
   12990:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12994:	movwne	r0, #1
   12998:	orr	r0, r2, r0
   1299c:	tst	r0, #1
   129a0:	ldreq	r0, [sp, #56]	; 0x38
   129a4:	eoreq	r0, r0, #1
   129a8:	tsteq	r0, #1
   129ac:	bne	129e0 <__assert_fail@plt+0x1a6c>
   129b0:	mov	r9, lr
   129b4:	tst	r5, #1
   129b8:	bne	12ab0 <__assert_fail@plt+0x1b3c>
   129bc:	ldr	r0, [sp, #72]	; 0x48
   129c0:	cmp	r0, #0
   129c4:	beq	129e0 <__assert_fail@plt+0x1a6c>
   129c8:	mov	r5, #0
   129cc:	cmp	r4, #0
   129d0:	ldr	r0, [sp, #84]	; 0x54
   129d4:	mov	sl, r2
   129d8:	ldr	r6, [sp, #72]	; 0x48
   129dc:	beq	11b78 <__assert_fail@plt+0xc04>
   129e0:	ldr	r1, [sp, #92]	; 0x5c
   129e4:	clz	r0, r1
   129e8:	lsr	r0, r0, #5
   129ec:	orr	r0, r0, r2
   129f0:	tst	r0, #1
   129f4:	bne	12a20 <__assert_fail@plt+0x1aac>
   129f8:	ldrb	r0, [r1]
   129fc:	cmp	r0, #0
   12a00:	beq	12a20 <__assert_fail@plt+0x1aac>
   12a04:	add	r1, r1, #1
   12a08:	cmp	r8, r4
   12a0c:	strbcc	r0, [r7, r8]
   12a10:	add	r8, r8, #1
   12a14:	ldrb	r0, [r1], #1
   12a18:	cmp	r0, #0
   12a1c:	bne	12a08 <__assert_fail@plt+0x1a94>
   12a20:	cmp	r8, r4
   12a24:	movcc	r0, #0
   12a28:	strbcc	r0, [r7, r8]
   12a2c:	b	12aa4 <__assert_fail@plt+0x1b30>
   12a30:	ldr	ip, [fp, #-84]	; 0xffffffac
   12a34:	mov	lr, r4
   12a38:	mov	r4, r5
   12a3c:	b	12a48 <__assert_fail@plt+0x1ad4>
   12a40:	ldr	r7, [sp, #80]	; 0x50
   12a44:	ldr	ip, [fp, #-84]	; 0xffffffac
   12a48:	mov	r0, #0
   12a4c:	ldr	r1, [fp, #12]
   12a50:	bic	r1, r1, #2
   12a54:	ldr	r2, [sp, #84]	; 0x54
   12a58:	tst	r2, #1
   12a5c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12a60:	mov	r2, r3
   12a64:	movwne	r2, #4
   12a68:	cmp	r3, #2
   12a6c:	movne	r2, r3
   12a70:	str	r2, [sp]
   12a74:	str	r1, [sp, #4]
   12a78:	str	r0, [sp, #8]
   12a7c:	ldr	r0, [sp, #68]	; 0x44
   12a80:	str	r0, [sp, #12]
   12a84:	ldr	r0, [sp, #76]	; 0x4c
   12a88:	str	r0, [sp, #16]
   12a8c:	mov	r0, r7
   12a90:	mov	r1, r4
   12a94:	mov	r2, ip
   12a98:	mov	r3, lr
   12a9c:	bl	11af0 <__assert_fail@plt+0xb7c>
   12aa0:	mov	r8, r0
   12aa4:	mov	r0, r8
   12aa8:	sub	sp, fp, #28
   12aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ab0:	mov	r0, #5
   12ab4:	str	r0, [sp]
   12ab8:	ldr	r0, [fp, #12]
   12abc:	str	r0, [sp, #4]
   12ac0:	ldr	r0, [fp, #16]
   12ac4:	str	r0, [sp, #8]
   12ac8:	ldr	r0, [sp, #68]	; 0x44
   12acc:	str	r0, [sp, #12]
   12ad0:	ldr	r0, [sp, #76]	; 0x4c
   12ad4:	str	r0, [sp, #16]
   12ad8:	mov	r0, r7
   12adc:	ldr	r1, [sp, #72]	; 0x48
   12ae0:	ldr	r2, [fp, #-84]	; 0xffffffac
   12ae4:	mov	r3, r9
   12ae8:	b	12a9c <__assert_fail@plt+0x1b28>
   12aec:	bl	10f68 <abort@plt>
   12af0:	mov	r3, r2
   12af4:	mov	r2, #0
   12af8:	b	12afc <__assert_fail@plt+0x1b88>
   12afc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b00:	add	fp, sp, #28
   12b04:	sub	sp, sp, #36	; 0x24
   12b08:	mov	r4, r2
   12b0c:	str	r2, [sp, #24]
   12b10:	mov	r5, r1
   12b14:	mov	r6, r0
   12b18:	str	r0, [sp, #20]
   12b1c:	movw	r8, #24912	; 0x6150
   12b20:	movt	r8, #2
   12b24:	cmp	r3, #0
   12b28:	movne	r8, r3
   12b2c:	bl	10ecc <__errno_location@plt>
   12b30:	str	r0, [sp, #28]
   12b34:	ldm	r8, {r3, r9}
   12b38:	ldr	r1, [r8, #40]	; 0x28
   12b3c:	ldr	r2, [r8, #44]	; 0x2c
   12b40:	ldr	r7, [r0]
   12b44:	str	r7, [sp, #32]
   12b48:	add	sl, r8, #8
   12b4c:	cmp	r4, #0
   12b50:	orreq	r9, r9, #1
   12b54:	stm	sp, {r3, r9, sl}
   12b58:	str	r1, [sp, #12]
   12b5c:	str	r2, [sp, #16]
   12b60:	mov	r0, #0
   12b64:	mov	r1, #0
   12b68:	mov	r2, r6
   12b6c:	mov	r3, r5
   12b70:	mov	r7, r5
   12b74:	bl	11af0 <__assert_fail@plt+0xb7c>
   12b78:	mov	r5, r0
   12b7c:	add	r4, r0, #1
   12b80:	mov	r0, r4
   12b84:	bl	13a00 <__assert_fail@plt+0x2a8c>
   12b88:	mov	r6, r0
   12b8c:	ldr	r0, [r8]
   12b90:	ldr	r1, [r8, #40]	; 0x28
   12b94:	ldr	r2, [r8, #44]	; 0x2c
   12b98:	stm	sp, {r0, r9, sl}
   12b9c:	str	r1, [sp, #12]
   12ba0:	str	r2, [sp, #16]
   12ba4:	mov	r0, r6
   12ba8:	mov	r1, r4
   12bac:	ldr	r2, [sp, #20]
   12bb0:	mov	r3, r7
   12bb4:	bl	11af0 <__assert_fail@plt+0xb7c>
   12bb8:	ldr	r0, [sp, #24]
   12bbc:	ldr	r1, [sp, #32]
   12bc0:	ldr	r2, [sp, #28]
   12bc4:	str	r1, [r2]
   12bc8:	cmp	r0, #0
   12bcc:	strne	r5, [r0]
   12bd0:	mov	r0, r6
   12bd4:	sub	sp, fp, #28
   12bd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bdc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12be0:	add	fp, sp, #24
   12be4:	movw	r8, #24800	; 0x60e0
   12be8:	movt	r8, #2
   12bec:	ldr	r4, [r8]
   12bf0:	movw	r5, #24804	; 0x60e4
   12bf4:	movt	r5, #2
   12bf8:	ldr	r0, [r5]
   12bfc:	cmp	r0, #2
   12c00:	blt	12c2c <__assert_fail@plt+0x1cb8>
   12c04:	add	r7, r4, #12
   12c08:	mov	r6, #0
   12c0c:	ldr	r0, [r7, r6, lsl #3]
   12c10:	bl	1486c <__assert_fail@plt+0x38f8>
   12c14:	add	r0, r6, #1
   12c18:	ldr	r1, [r5]
   12c1c:	add	r2, r6, #2
   12c20:	cmp	r2, r1
   12c24:	mov	r6, r0
   12c28:	blt	12c0c <__assert_fail@plt+0x1c98>
   12c2c:	ldr	r0, [r4, #4]
   12c30:	movw	r7, #24960	; 0x6180
   12c34:	movt	r7, #2
   12c38:	cmp	r0, r7
   12c3c:	beq	12c54 <__assert_fail@plt+0x1ce0>
   12c40:	bl	1486c <__assert_fail@plt+0x38f8>
   12c44:	movw	r0, #24808	; 0x60e8
   12c48:	movt	r0, #2
   12c4c:	mov	r6, #256	; 0x100
   12c50:	strd	r6, [r0]
   12c54:	movw	r6, #24808	; 0x60e8
   12c58:	movt	r6, #2
   12c5c:	cmp	r4, r6
   12c60:	beq	12c70 <__assert_fail@plt+0x1cfc>
   12c64:	mov	r0, r4
   12c68:	bl	1486c <__assert_fail@plt+0x38f8>
   12c6c:	str	r6, [r8]
   12c70:	mov	r0, #1
   12c74:	str	r0, [r5]
   12c78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12c7c:	movw	r3, #24912	; 0x6150
   12c80:	movt	r3, #2
   12c84:	mvn	r2, #0
   12c88:	b	12c8c <__assert_fail@plt+0x1d18>
   12c8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c90:	add	fp, sp, #28
   12c94:	sub	sp, sp, #44	; 0x2c
   12c98:	mov	r7, r3
   12c9c:	str	r2, [sp, #36]	; 0x24
   12ca0:	str	r1, [sp, #32]
   12ca4:	mov	r5, r0
   12ca8:	bl	10ecc <__errno_location@plt>
   12cac:	cmp	r5, #0
   12cb0:	blt	12e1c <__assert_fail@plt+0x1ea8>
   12cb4:	cmn	r5, #-2147483647	; 0x80000001
   12cb8:	beq	12e1c <__assert_fail@plt+0x1ea8>
   12cbc:	movw	r4, #24800	; 0x60e0
   12cc0:	movt	r4, #2
   12cc4:	ldr	r6, [r4]
   12cc8:	str	r0, [sp, #28]
   12ccc:	ldr	r0, [r0]
   12cd0:	str	r0, [sp, #24]
   12cd4:	movw	r8, #24804	; 0x60e4
   12cd8:	movt	r8, #2
   12cdc:	ldr	r1, [r8]
   12ce0:	cmp	r1, r5
   12ce4:	ble	12cf0 <__assert_fail@plt+0x1d7c>
   12ce8:	mov	sl, r6
   12cec:	b	12d58 <__assert_fail@plt+0x1de4>
   12cf0:	str	r1, [fp, #-32]	; 0xffffffe0
   12cf4:	mov	r0, #8
   12cf8:	str	r0, [sp]
   12cfc:	movw	r9, #24808	; 0x60e8
   12d00:	movt	r9, #2
   12d04:	subs	r0, r6, r9
   12d08:	movne	r0, r6
   12d0c:	add	r2, r5, #1
   12d10:	sub	r2, r2, r1
   12d14:	sub	r1, fp, #32
   12d18:	mvn	r3, #-2147483648	; 0x80000000
   12d1c:	bl	13ae8 <__assert_fail@plt+0x2b74>
   12d20:	mov	sl, r0
   12d24:	str	r0, [r4]
   12d28:	cmp	r6, r9
   12d2c:	ldrdeq	r0, [r9]
   12d30:	stmeq	sl, {r0, r1}
   12d34:	ldr	r1, [r8]
   12d38:	add	r0, sl, r1, lsl #3
   12d3c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12d40:	sub	r1, r2, r1
   12d44:	lsl	r2, r1, #3
   12d48:	mov	r1, #0
   12d4c:	bl	10ee4 <memset@plt>
   12d50:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d54:	str	r0, [r8]
   12d58:	mov	r9, sl
   12d5c:	ldr	r6, [r9, r5, lsl #3]!
   12d60:	ldr	r4, [r9, #4]!
   12d64:	ldm	r7, {r0, r1}
   12d68:	ldr	r2, [r7, #40]	; 0x28
   12d6c:	ldr	r3, [r7, #44]	; 0x2c
   12d70:	orr	r8, r1, #1
   12d74:	add	r1, r7, #8
   12d78:	stm	sp, {r0, r8}
   12d7c:	str	r1, [sp, #20]
   12d80:	add	r0, sp, #8
   12d84:	stm	r0, {r1, r2, r3}
   12d88:	mov	r0, r4
   12d8c:	mov	r1, r6
   12d90:	ldr	r2, [sp, #32]
   12d94:	ldr	r3, [sp, #36]	; 0x24
   12d98:	bl	11af0 <__assert_fail@plt+0xb7c>
   12d9c:	cmp	r6, r0
   12da0:	bhi	12e04 <__assert_fail@plt+0x1e90>
   12da4:	add	r6, r0, #1
   12da8:	str	r6, [sl, r5, lsl #3]
   12dac:	movw	r0, #24960	; 0x6180
   12db0:	movt	r0, #2
   12db4:	cmp	r4, r0
   12db8:	beq	12dc4 <__assert_fail@plt+0x1e50>
   12dbc:	mov	r0, r4
   12dc0:	bl	1486c <__assert_fail@plt+0x38f8>
   12dc4:	mov	r0, r6
   12dc8:	bl	13a00 <__assert_fail@plt+0x2a8c>
   12dcc:	mov	r4, r0
   12dd0:	str	r0, [r9]
   12dd4:	ldr	r0, [r7]
   12dd8:	ldr	r1, [r7, #40]	; 0x28
   12ddc:	ldr	r2, [r7, #44]	; 0x2c
   12de0:	stm	sp, {r0, r8}
   12de4:	ldr	r0, [sp, #20]
   12de8:	add	r3, sp, #8
   12dec:	stm	r3, {r0, r1, r2}
   12df0:	mov	r0, r4
   12df4:	mov	r1, r6
   12df8:	ldr	r2, [sp, #32]
   12dfc:	ldr	r3, [sp, #36]	; 0x24
   12e00:	bl	11af0 <__assert_fail@plt+0xb7c>
   12e04:	ldr	r0, [sp, #28]
   12e08:	ldr	r1, [sp, #24]
   12e0c:	str	r1, [r0]
   12e10:	mov	r0, r4
   12e14:	sub	sp, fp, #28
   12e18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e1c:	bl	10f68 <abort@plt>
   12e20:	movw	r3, #24912	; 0x6150
   12e24:	movt	r3, #2
   12e28:	b	12c8c <__assert_fail@plt+0x1d18>
   12e2c:	mov	r1, r0
   12e30:	mov	r0, #0
   12e34:	b	12c7c <__assert_fail@plt+0x1d08>
   12e38:	mov	r2, r1
   12e3c:	mov	r1, r0
   12e40:	mov	r0, #0
   12e44:	b	12e20 <__assert_fail@plt+0x1eac>
   12e48:	push	{r4, r5, r6, sl, fp, lr}
   12e4c:	add	fp, sp, #16
   12e50:	sub	sp, sp, #48	; 0x30
   12e54:	mov	r4, r2
   12e58:	mov	r5, r0
   12e5c:	mov	r6, sp
   12e60:	mov	r0, r6
   12e64:	bl	12e84 <__assert_fail@plt+0x1f10>
   12e68:	mov	r0, r5
   12e6c:	mov	r1, r4
   12e70:	mvn	r2, #0
   12e74:	mov	r3, r6
   12e78:	bl	12c8c <__assert_fail@plt+0x1d18>
   12e7c:	sub	sp, fp, #16
   12e80:	pop	{r4, r5, r6, sl, fp, pc}
   12e84:	vmov.i32	q8, #0	; 0x00000000
   12e88:	mov	r2, #32
   12e8c:	mov	r3, r0
   12e90:	vst1.32	{d16-d17}, [r3], r2
   12e94:	vst1.32	{d16-d17}, [r3]
   12e98:	add	r2, r0, #16
   12e9c:	vst1.32	{d16-d17}, [r2]
   12ea0:	cmp	r1, #10
   12ea4:	strne	r1, [r0]
   12ea8:	bxne	lr
   12eac:	push	{fp, lr}
   12eb0:	mov	fp, sp
   12eb4:	bl	10f68 <abort@plt>
   12eb8:	push	{r4, r5, r6, r7, fp, lr}
   12ebc:	add	fp, sp, #16
   12ec0:	sub	sp, sp, #48	; 0x30
   12ec4:	mov	r4, r3
   12ec8:	mov	r5, r2
   12ecc:	mov	r6, r0
   12ed0:	mov	r7, sp
   12ed4:	mov	r0, r7
   12ed8:	bl	12e84 <__assert_fail@plt+0x1f10>
   12edc:	mov	r0, r6
   12ee0:	mov	r1, r5
   12ee4:	mov	r2, r4
   12ee8:	mov	r3, r7
   12eec:	bl	12c8c <__assert_fail@plt+0x1d18>
   12ef0:	sub	sp, fp, #16
   12ef4:	pop	{r4, r5, r6, r7, fp, pc}
   12ef8:	mov	r2, r1
   12efc:	mov	r1, r0
   12f00:	mov	r0, #0
   12f04:	b	12e48 <__assert_fail@plt+0x1ed4>
   12f08:	mov	r3, r2
   12f0c:	mov	r2, r1
   12f10:	mov	r1, r0
   12f14:	mov	r0, #0
   12f18:	b	12eb8 <__assert_fail@plt+0x1f44>
   12f1c:	push	{r4, r5, r6, sl, fp, lr}
   12f20:	add	fp, sp, #16
   12f24:	sub	sp, sp, #48	; 0x30
   12f28:	mov	r4, r1
   12f2c:	mov	r5, r0
   12f30:	mov	r0, #32
   12f34:	movw	r1, #24912	; 0x6150
   12f38:	movt	r1, #2
   12f3c:	add	r3, r1, #16
   12f40:	vld1.64	{d16-d17}, [r1], r0
   12f44:	mov	r6, sp
   12f48:	vld1.64	{d18-d19}, [r3]
   12f4c:	add	r3, r6, #16
   12f50:	vld1.64	{d20-d21}, [r1]
   12f54:	vst1.64	{d18-d19}, [r3]
   12f58:	mov	r1, r6
   12f5c:	vst1.64	{d16-d17}, [r1], r0
   12f60:	vst1.64	{d20-d21}, [r1]
   12f64:	mov	r0, r6
   12f68:	mov	r1, r2
   12f6c:	mov	r2, #1
   12f70:	bl	119e4 <__assert_fail@plt+0xa70>
   12f74:	mov	r0, #0
   12f78:	mov	r1, r5
   12f7c:	mov	r2, r4
   12f80:	mov	r3, r6
   12f84:	bl	12c8c <__assert_fail@plt+0x1d18>
   12f88:	sub	sp, fp, #16
   12f8c:	pop	{r4, r5, r6, sl, fp, pc}
   12f90:	mov	r2, r1
   12f94:	mvn	r1, #0
   12f98:	b	12f1c <__assert_fail@plt+0x1fa8>
   12f9c:	mov	r1, #58	; 0x3a
   12fa0:	b	12f90 <__assert_fail@plt+0x201c>
   12fa4:	mov	r2, #58	; 0x3a
   12fa8:	b	12f1c <__assert_fail@plt+0x1fa8>
   12fac:	push	{r4, r5, r6, sl, fp, lr}
   12fb0:	add	fp, sp, #16
   12fb4:	sub	sp, sp, #48	; 0x30
   12fb8:	mov	r4, r2
   12fbc:	mov	r5, r0
   12fc0:	mov	r6, sp
   12fc4:	mov	r0, r6
   12fc8:	bl	12e84 <__assert_fail@plt+0x1f10>
   12fcc:	mov	r0, r6
   12fd0:	mov	r1, #58	; 0x3a
   12fd4:	mov	r2, #1
   12fd8:	bl	119e4 <__assert_fail@plt+0xa70>
   12fdc:	mov	r0, r5
   12fe0:	mov	r1, r4
   12fe4:	mvn	r2, #0
   12fe8:	mov	r3, r6
   12fec:	bl	12c8c <__assert_fail@plt+0x1d18>
   12ff0:	sub	sp, fp, #16
   12ff4:	pop	{r4, r5, r6, sl, fp, pc}
   12ff8:	push	{fp, lr}
   12ffc:	mov	fp, sp
   13000:	sub	sp, sp, #8
   13004:	mvn	ip, #0
   13008:	str	ip, [sp]
   1300c:	bl	13018 <__assert_fail@plt+0x20a4>
   13010:	mov	sp, fp
   13014:	pop	{fp, pc}
   13018:	push	{r4, r5, r6, r7, fp, lr}
   1301c:	add	fp, sp, #16
   13020:	sub	sp, sp, #48	; 0x30
   13024:	mov	r7, r3
   13028:	mov	r5, r0
   1302c:	mov	r0, #32
   13030:	movw	r3, #24912	; 0x6150
   13034:	movt	r3, #2
   13038:	add	r4, r3, #16
   1303c:	vld1.64	{d16-d17}, [r3], r0
   13040:	mov	r6, sp
   13044:	vld1.64	{d18-d19}, [r4]
   13048:	add	r4, r6, #16
   1304c:	vld1.64	{d20-d21}, [r3]
   13050:	vst1.64	{d18-d19}, [r4]
   13054:	mov	r3, r6
   13058:	vst1.64	{d16-d17}, [r3], r0
   1305c:	vst1.64	{d20-d21}, [r3]
   13060:	mov	r0, r6
   13064:	bl	11a3c <__assert_fail@plt+0xac8>
   13068:	ldr	r2, [fp, #8]
   1306c:	mov	r0, r5
   13070:	mov	r1, r7
   13074:	mov	r3, r6
   13078:	bl	12c8c <__assert_fail@plt+0x1d18>
   1307c:	sub	sp, fp, #16
   13080:	pop	{r4, r5, r6, r7, fp, pc}
   13084:	mov	r3, r2
   13088:	mov	r2, r1
   1308c:	mov	r1, r0
   13090:	mov	r0, #0
   13094:	b	12ff8 <__assert_fail@plt+0x2084>
   13098:	push	{fp, lr}
   1309c:	mov	fp, sp
   130a0:	sub	sp, sp, #8
   130a4:	mov	ip, r2
   130a8:	mov	r2, r1
   130ac:	mov	r1, r0
   130b0:	str	r3, [sp]
   130b4:	mov	r0, #0
   130b8:	mov	r3, ip
   130bc:	bl	13018 <__assert_fail@plt+0x20a4>
   130c0:	mov	sp, fp
   130c4:	pop	{fp, pc}
   130c8:	movw	r3, #24816	; 0x60f0
   130cc:	movt	r3, #2
   130d0:	b	12c8c <__assert_fail@plt+0x1d18>
   130d4:	mov	r2, r1
   130d8:	mov	r1, r0
   130dc:	mov	r0, #0
   130e0:	b	130c8 <__assert_fail@plt+0x2154>
   130e4:	mvn	r2, #0
   130e8:	b	130c8 <__assert_fail@plt+0x2154>
   130ec:	mov	r1, r0
   130f0:	mov	r0, #0
   130f4:	b	130e4 <__assert_fail@plt+0x2170>
   130f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   130fc:	add	fp, sp, #24
   13100:	sub	sp, sp, #16
   13104:	mov	r4, r1
   13108:	mov	r5, r0
   1310c:	mov	r7, #0
   13110:	mov	r0, #0
   13114:	mov	r1, r5
   13118:	mov	r2, #5
   1311c:	bl	10dc4 <dcgettext@plt>
   13120:	cmp	r0, r5
   13124:	beq	13130 <__assert_fail@plt+0x21bc>
   13128:	sub	sp, fp, #24
   1312c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13130:	bl	14988 <__assert_fail@plt+0x3a14>
   13134:	mov	r6, r0
   13138:	mov	r8, #56	; 0x38
   1313c:	mov	r0, #45	; 0x2d
   13140:	stm	sp, {r0, r8}
   13144:	str	r7, [sp, #8]
   13148:	str	r7, [sp, #12]
   1314c:	mov	r0, r6
   13150:	mov	r1, #85	; 0x55
   13154:	mov	r2, #84	; 0x54
   13158:	mov	r3, #70	; 0x46
   1315c:	bl	131f4 <__assert_fail@plt+0x2280>
   13160:	cmp	r0, #0
   13164:	beq	13180 <__assert_fail@plt+0x220c>
   13168:	ldrb	r1, [r5]
   1316c:	movw	r2, #20976	; 0x51f0
   13170:	movt	r2, #1
   13174:	movw	r0, #20980	; 0x51f4
   13178:	movt	r0, #1
   1317c:	b	131c4 <__assert_fail@plt+0x2250>
   13180:	mov	r0, #48	; 0x30
   13184:	mov	r1, #51	; 0x33
   13188:	str	r8, [sp]
   1318c:	stmib	sp, {r0, r1}
   13190:	str	r0, [sp, #12]
   13194:	mov	r0, r6
   13198:	mov	r1, #71	; 0x47
   1319c:	mov	r2, #66	; 0x42
   131a0:	mov	r3, #49	; 0x31
   131a4:	bl	131f4 <__assert_fail@plt+0x2280>
   131a8:	cmp	r0, #0
   131ac:	beq	131d4 <__assert_fail@plt+0x2260>
   131b0:	ldrb	r1, [r5]
   131b4:	movw	r2, #20984	; 0x51f8
   131b8:	movt	r2, #1
   131bc:	movw	r0, #20988	; 0x51fc
   131c0:	movt	r0, #1
   131c4:	cmp	r1, #96	; 0x60
   131c8:	moveq	r0, r2
   131cc:	sub	sp, fp, #24
   131d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   131d4:	movw	r1, #20970	; 0x51ea
   131d8:	movt	r1, #1
   131dc:	movw	r0, #20974	; 0x51ee
   131e0:	movt	r0, #1
   131e4:	cmp	r4, #9
   131e8:	moveq	r0, r1
   131ec:	sub	sp, fp, #24
   131f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   131f4:	push	{r4, r5, r6, r7, fp, lr}
   131f8:	add	fp, sp, #16
   131fc:	sub	sp, sp, #16
   13200:	mov	r4, r3
   13204:	mov	r5, r2
   13208:	mov	r7, r1
   1320c:	mov	r6, r0
   13210:	mov	r0, r1
   13214:	bl	1466c <__assert_fail@plt+0x36f8>
   13218:	ldrb	r1, [r6]
   1321c:	cmp	r0, #0
   13220:	andne	r1, r1, #223	; 0xdf
   13224:	mov	r0, #0
   13228:	cmp	r1, r7
   1322c:	bne	1326c <__assert_fail@plt+0x22f8>
   13230:	cmp	r7, #0
   13234:	moveq	r0, #1
   13238:	subeq	sp, fp, #16
   1323c:	popeq	{r4, r5, r6, r7, fp, pc}
   13240:	ldr	r0, [fp, #20]
   13244:	ldr	r1, [fp, #16]
   13248:	ldr	r2, [fp, #12]
   1324c:	ldr	r3, [fp, #8]
   13250:	str	r2, [sp]
   13254:	str	r1, [sp, #4]
   13258:	str	r0, [sp, #8]
   1325c:	mov	r0, r6
   13260:	mov	r1, r5
   13264:	mov	r2, r4
   13268:	bl	13274 <__assert_fail@plt+0x2300>
   1326c:	sub	sp, fp, #16
   13270:	pop	{r4, r5, r6, r7, fp, pc}
   13274:	push	{r4, r5, r6, r7, fp, lr}
   13278:	add	fp, sp, #16
   1327c:	sub	sp, sp, #8
   13280:	mov	r4, r3
   13284:	mov	r5, r2
   13288:	mov	r7, r1
   1328c:	mov	r6, r0
   13290:	mov	r0, r1
   13294:	bl	1466c <__assert_fail@plt+0x36f8>
   13298:	ldrb	r1, [r6, #1]
   1329c:	cmp	r0, #0
   132a0:	andne	r1, r1, #223	; 0xdf
   132a4:	mov	r0, #0
   132a8:	cmp	r1, r7
   132ac:	bne	132e4 <__assert_fail@plt+0x2370>
   132b0:	cmp	r7, #0
   132b4:	moveq	r0, #1
   132b8:	subeq	sp, fp, #16
   132bc:	popeq	{r4, r5, r6, r7, fp, pc}
   132c0:	ldr	r0, [fp, #16]
   132c4:	ldr	r1, [fp, #12]
   132c8:	ldr	r3, [fp, #8]
   132cc:	str	r1, [sp]
   132d0:	str	r0, [sp, #4]
   132d4:	mov	r0, r6
   132d8:	mov	r1, r5
   132dc:	mov	r2, r4
   132e0:	bl	132ec <__assert_fail@plt+0x2378>
   132e4:	sub	sp, fp, #16
   132e8:	pop	{r4, r5, r6, r7, fp, pc}
   132ec:	push	{r4, r5, r6, r7, fp, lr}
   132f0:	add	fp, sp, #16
   132f4:	sub	sp, sp, #8
   132f8:	mov	r4, r3
   132fc:	mov	r5, r2
   13300:	mov	r7, r1
   13304:	mov	r6, r0
   13308:	mov	r0, r1
   1330c:	bl	1466c <__assert_fail@plt+0x36f8>
   13310:	ldrb	r1, [r6, #2]
   13314:	cmp	r0, #0
   13318:	andne	r1, r1, #223	; 0xdf
   1331c:	mov	r0, #0
   13320:	cmp	r1, r7
   13324:	bne	13354 <__assert_fail@plt+0x23e0>
   13328:	cmp	r7, #0
   1332c:	moveq	r0, #1
   13330:	subeq	sp, fp, #16
   13334:	popeq	{r4, r5, r6, r7, fp, pc}
   13338:	ldr	r0, [fp, #12]
   1333c:	ldr	r3, [fp, #8]
   13340:	str	r0, [sp]
   13344:	mov	r0, r6
   13348:	mov	r1, r5
   1334c:	mov	r2, r4
   13350:	bl	1335c <__assert_fail@plt+0x23e8>
   13354:	sub	sp, fp, #16
   13358:	pop	{r4, r5, r6, r7, fp, pc}
   1335c:	push	{r4, r5, r6, r7, fp, lr}
   13360:	add	fp, sp, #16
   13364:	mov	r4, r3
   13368:	mov	r5, r2
   1336c:	mov	r7, r1
   13370:	mov	r6, r0
   13374:	mov	r0, r1
   13378:	bl	1466c <__assert_fail@plt+0x36f8>
   1337c:	ldrb	r1, [r6, #3]
   13380:	ldr	r3, [fp, #8]
   13384:	cmp	r0, #0
   13388:	andne	r1, r1, #223	; 0xdf
   1338c:	mov	r0, #0
   13390:	cmp	r1, r7
   13394:	popne	{r4, r5, r6, r7, fp, pc}
   13398:	cmp	r7, #0
   1339c:	beq	133b4 <__assert_fail@plt+0x2440>
   133a0:	mov	r0, r6
   133a4:	mov	r1, r5
   133a8:	mov	r2, r4
   133ac:	pop	{r4, r5, r6, r7, fp, lr}
   133b0:	b	133bc <__assert_fail@plt+0x2448>
   133b4:	mov	r0, #1
   133b8:	pop	{r4, r5, r6, r7, fp, pc}
   133bc:	push	{r4, r5, r6, r7, fp, lr}
   133c0:	add	fp, sp, #16
   133c4:	mov	r4, r3
   133c8:	mov	r5, r2
   133cc:	mov	r7, r1
   133d0:	mov	r6, r0
   133d4:	mov	r0, r1
   133d8:	bl	1466c <__assert_fail@plt+0x36f8>
   133dc:	ldrb	r1, [r6, #4]
   133e0:	cmp	r0, #0
   133e4:	andne	r1, r1, #223	; 0xdf
   133e8:	mov	r0, #0
   133ec:	cmp	r1, r7
   133f0:	popne	{r4, r5, r6, r7, fp, pc}
   133f4:	cmp	r7, #0
   133f8:	beq	13410 <__assert_fail@plt+0x249c>
   133fc:	mov	r0, r6
   13400:	mov	r1, r5
   13404:	mov	r2, r4
   13408:	pop	{r4, r5, r6, r7, fp, lr}
   1340c:	b	13418 <__assert_fail@plt+0x24a4>
   13410:	mov	r0, #1
   13414:	pop	{r4, r5, r6, r7, fp, pc}
   13418:	push	{r4, r5, r6, sl, fp, lr}
   1341c:	add	fp, sp, #16
   13420:	mov	r4, r2
   13424:	mov	r6, r1
   13428:	mov	r5, r0
   1342c:	mov	r0, r1
   13430:	bl	1466c <__assert_fail@plt+0x36f8>
   13434:	ldrb	r1, [r5, #5]
   13438:	cmp	r0, #0
   1343c:	andne	r1, r1, #223	; 0xdf
   13440:	mov	r0, #0
   13444:	cmp	r1, r6
   13448:	popne	{r4, r5, r6, sl, fp, pc}
   1344c:	cmp	r6, #0
   13450:	beq	13464 <__assert_fail@plt+0x24f0>
   13454:	mov	r0, r5
   13458:	mov	r1, r4
   1345c:	pop	{r4, r5, r6, sl, fp, lr}
   13460:	b	1346c <__assert_fail@plt+0x24f8>
   13464:	mov	r0, #1
   13468:	pop	{r4, r5, r6, sl, fp, pc}
   1346c:	push	{r4, r5, fp, lr}
   13470:	add	fp, sp, #8
   13474:	mov	r5, r1
   13478:	mov	r4, r0
   1347c:	mov	r0, r1
   13480:	bl	1466c <__assert_fail@plt+0x36f8>
   13484:	ldrb	r1, [r4, #6]
   13488:	cmp	r0, #0
   1348c:	andne	r1, r1, #223	; 0xdf
   13490:	mov	r0, #0
   13494:	cmp	r1, r5
   13498:	popne	{r4, r5, fp, pc}
   1349c:	cmp	r5, #0
   134a0:	beq	134b0 <__assert_fail@plt+0x253c>
   134a4:	mov	r0, r4
   134a8:	pop	{r4, r5, fp, lr}
   134ac:	b	134b8 <__assert_fail@plt+0x2544>
   134b0:	mov	r0, #1
   134b4:	pop	{r4, r5, fp, pc}
   134b8:	push	{r4, sl, fp, lr}
   134bc:	add	fp, sp, #8
   134c0:	mov	r4, r0
   134c4:	mov	r0, #0
   134c8:	bl	1466c <__assert_fail@plt+0x36f8>
   134cc:	ldrb	r1, [r4, #7]
   134d0:	cmp	r0, #0
   134d4:	beq	134ec <__assert_fail@plt+0x2578>
   134d8:	tst	r1, #223	; 0xdf
   134dc:	moveq	r0, #1
   134e0:	popeq	{r4, sl, fp, pc}
   134e4:	mov	r0, #0
   134e8:	pop	{r4, sl, fp, pc}
   134ec:	cmp	r1, #0
   134f0:	moveq	r0, #1
   134f4:	popeq	{r4, sl, fp, pc}
   134f8:	mov	r0, #0
   134fc:	pop	{r4, sl, fp, pc}
   13500:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13504:	add	fp, sp, #24
   13508:	sub	sp, sp, #32
   1350c:	mov	r4, r2
   13510:	mov	r8, r0
   13514:	ldr	r6, [fp, #12]
   13518:	ldr	r7, [fp, #8]
   1351c:	cmp	r1, #0
   13520:	beq	13548 <__assert_fail@plt+0x25d4>
   13524:	mov	r5, r1
   13528:	str	r4, [sp]
   1352c:	str	r3, [sp, #4]
   13530:	movw	r2, #21076	; 0x5254
   13534:	movt	r2, #1
   13538:	mov	r0, r8
   1353c:	mov	r1, #1
   13540:	mov	r3, r5
   13544:	b	13560 <__assert_fail@plt+0x25ec>
   13548:	str	r3, [sp]
   1354c:	movw	r2, #21088	; 0x5260
   13550:	movt	r2, #1
   13554:	mov	r0, r8
   13558:	mov	r1, #1
   1355c:	mov	r3, r4
   13560:	bl	10f08 <__fprintf_chk@plt>
   13564:	movw	r1, #21095	; 0x5267
   13568:	movt	r1, #1
   1356c:	mov	r0, #0
   13570:	mov	r2, #5
   13574:	bl	10dc4 <dcgettext@plt>
   13578:	mov	r3, r0
   1357c:	movw	r0, #2022	; 0x7e6
   13580:	str	r0, [sp]
   13584:	movw	r2, #21813	; 0x5535
   13588:	movt	r2, #1
   1358c:	mov	r0, r8
   13590:	mov	r1, #1
   13594:	bl	10f08 <__fprintf_chk@plt>
   13598:	movw	r4, #20657	; 0x50b1
   1359c:	movt	r4, #1
   135a0:	mov	r0, r4
   135a4:	mov	r1, r8
   135a8:	bl	10d4c <fputs_unlocked@plt>
   135ac:	movw	r1, #21099	; 0x526b
   135b0:	movt	r1, #1
   135b4:	mov	r0, #0
   135b8:	mov	r2, #5
   135bc:	bl	10dc4 <dcgettext@plt>
   135c0:	mov	r2, r0
   135c4:	movw	r3, #21270	; 0x5316
   135c8:	movt	r3, #1
   135cc:	mov	r0, r8
   135d0:	mov	r1, #1
   135d4:	bl	10f08 <__fprintf_chk@plt>
   135d8:	mov	r0, r4
   135dc:	mov	r1, r8
   135e0:	bl	10d4c <fputs_unlocked@plt>
   135e4:	cmp	r6, #9
   135e8:	bhi	13624 <__assert_fail@plt+0x26b0>
   135ec:	add	r0, pc, #0
   135f0:	ldr	pc, [r0, r6, lsl #2]
   135f4:	andeq	r3, r1, ip, lsl r6
   135f8:	andeq	r3, r1, r0, lsr r6
   135fc:	andeq	r3, r1, r0, ror #12
   13600:	andeq	r3, r1, r8, lsl #13
   13604:			; <UNDEFINED> instruction: 0x000136b0
   13608:	ldrdeq	r3, [r1], -r8
   1360c:	andeq	r3, r1, r0, lsl #14
   13610:	andeq	r3, r1, r8, lsr r7
   13614:	ldrdeq	r3, [r1], -r8
   13618:	andeq	r3, r1, r0, lsl #15
   1361c:	sub	sp, fp, #24
   13620:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13624:	movw	r1, #21623	; 0x5477
   13628:	movt	r1, #1
   1362c:	b	13788 <__assert_fail@plt+0x2814>
   13630:	movw	r1, #21304	; 0x5338
   13634:	movt	r1, #1
   13638:	mov	r0, #0
   1363c:	mov	r2, #5
   13640:	bl	10dc4 <dcgettext@plt>
   13644:	mov	r2, r0
   13648:	ldr	r3, [r7]
   1364c:	mov	r0, r8
   13650:	mov	r1, #1
   13654:	sub	sp, fp, #24
   13658:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1365c:	b	10f08 <__fprintf_chk@plt>
   13660:	movw	r1, #21320	; 0x5348
   13664:	movt	r1, #1
   13668:	mov	r0, #0
   1366c:	mov	r2, #5
   13670:	bl	10dc4 <dcgettext@plt>
   13674:	mov	r2, r0
   13678:	ldr	r3, [r7]
   1367c:	ldr	r0, [r7, #4]
   13680:	str	r0, [sp]
   13684:	b	13774 <__assert_fail@plt+0x2800>
   13688:	movw	r1, #21343	; 0x535f
   1368c:	movt	r1, #1
   13690:	mov	r0, #0
   13694:	mov	r2, #5
   13698:	bl	10dc4 <dcgettext@plt>
   1369c:	mov	r2, r0
   136a0:	ldr	r3, [r7]
   136a4:	ldmib	r7, {r0, r1}
   136a8:	stm	sp, {r0, r1}
   136ac:	b	13774 <__assert_fail@plt+0x2800>
   136b0:	movw	r1, #21371	; 0x537b
   136b4:	movt	r1, #1
   136b8:	mov	r0, #0
   136bc:	mov	r2, #5
   136c0:	bl	10dc4 <dcgettext@plt>
   136c4:	mov	r2, r0
   136c8:	ldr	r3, [r7]
   136cc:	ldmib	r7, {r0, r1, r7}
   136d0:	stm	sp, {r0, r1, r7}
   136d4:	b	13774 <__assert_fail@plt+0x2800>
   136d8:	movw	r1, #21403	; 0x539b
   136dc:	movt	r1, #1
   136e0:	mov	r0, #0
   136e4:	mov	r2, #5
   136e8:	bl	10dc4 <dcgettext@plt>
   136ec:	mov	r2, r0
   136f0:	ldr	r3, [r7]
   136f4:	ldmib	r7, {r0, r1, r6, r7}
   136f8:	stm	sp, {r0, r1, r6, r7}
   136fc:	b	13774 <__assert_fail@plt+0x2800>
   13700:	movw	r1, #21439	; 0x53bf
   13704:	movt	r1, #1
   13708:	mov	r0, #0
   1370c:	mov	r2, #5
   13710:	bl	10dc4 <dcgettext@plt>
   13714:	mov	r2, r0
   13718:	ldr	r3, [r7]
   1371c:	ldmib	r7, {r0, r1, r6}
   13720:	ldr	r5, [r7, #16]
   13724:	ldr	r7, [r7, #20]
   13728:	stm	sp, {r0, r1, r6}
   1372c:	str	r5, [sp, #12]
   13730:	str	r7, [sp, #16]
   13734:	b	13774 <__assert_fail@plt+0x2800>
   13738:	movw	r1, #21479	; 0x53e7
   1373c:	movt	r1, #1
   13740:	mov	r0, #0
   13744:	mov	r2, #5
   13748:	bl	10dc4 <dcgettext@plt>
   1374c:	mov	r2, r0
   13750:	ldr	r3, [r7]
   13754:	ldmib	r7, {r0, r1, r6}
   13758:	ldr	r5, [r7, #16]
   1375c:	ldr	r4, [r7, #20]
   13760:	ldr	r7, [r7, #24]
   13764:	stm	sp, {r0, r1, r6}
   13768:	str	r5, [sp, #12]
   1376c:	str	r4, [sp, #16]
   13770:	str	r7, [sp, #20]
   13774:	mov	r0, r8
   13778:	mov	r1, #1
   1377c:	b	13828 <__assert_fail@plt+0x28b4>
   13780:	movw	r1, #21571	; 0x5443
   13784:	movt	r1, #1
   13788:	mov	r0, #0
   1378c:	mov	r2, #5
   13790:	bl	10dc4 <dcgettext@plt>
   13794:	mov	ip, r0
   13798:	ldr	r3, [r7]
   1379c:	ldr	r0, [r7, #4]
   137a0:	ldr	r1, [r7, #8]
   137a4:	ldr	r6, [r7, #12]
   137a8:	ldr	r5, [r7, #16]
   137ac:	ldr	r4, [r7, #20]
   137b0:	ldr	r2, [r7, #24]
   137b4:	ldr	lr, [r7, #28]
   137b8:	ldr	r7, [r7, #32]
   137bc:	stm	sp, {r0, r1, r6}
   137c0:	str	r5, [sp, #12]
   137c4:	str	r4, [sp, #16]
   137c8:	str	r2, [sp, #20]
   137cc:	str	lr, [sp, #24]
   137d0:	str	r7, [sp, #28]
   137d4:	b	1381c <__assert_fail@plt+0x28a8>
   137d8:	movw	r1, #21523	; 0x5413
   137dc:	movt	r1, #1
   137e0:	mov	r0, #0
   137e4:	mov	r2, #5
   137e8:	bl	10dc4 <dcgettext@plt>
   137ec:	mov	ip, r0
   137f0:	ldr	r3, [r7]
   137f4:	ldmib	r7, {r0, r1, r6}
   137f8:	ldr	r5, [r7, #16]
   137fc:	ldr	r4, [r7, #20]
   13800:	ldr	r2, [r7, #24]
   13804:	ldr	r7, [r7, #28]
   13808:	stm	sp, {r0, r1, r6}
   1380c:	str	r5, [sp, #12]
   13810:	str	r4, [sp, #16]
   13814:	str	r2, [sp, #20]
   13818:	str	r7, [sp, #24]
   1381c:	mov	r0, r8
   13820:	mov	r1, #1
   13824:	mov	r2, ip
   13828:	bl	10f08 <__fprintf_chk@plt>
   1382c:	sub	sp, fp, #24
   13830:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13834:	push	{r4, sl, fp, lr}
   13838:	add	fp, sp, #8
   1383c:	sub	sp, sp, #8
   13840:	mov	lr, #0
   13844:	ldr	ip, [fp, #8]
   13848:	ldr	r4, [ip, lr, lsl #2]
   1384c:	add	lr, lr, #1
   13850:	cmp	r4, #0
   13854:	bne	13848 <__assert_fail@plt+0x28d4>
   13858:	sub	r4, lr, #1
   1385c:	str	ip, [sp]
   13860:	str	r4, [sp, #4]
   13864:	bl	13500 <__assert_fail@plt+0x258c>
   13868:	sub	sp, fp, #8
   1386c:	pop	{r4, sl, fp, pc}
   13870:	push	{r4, r5, fp, lr}
   13874:	add	fp, sp, #8
   13878:	sub	sp, sp, #48	; 0x30
   1387c:	mov	ip, #0
   13880:	ldr	r4, [fp, #8]
   13884:	add	lr, sp, #8
   13888:	ldr	r5, [r4]
   1388c:	str	r5, [lr, ip, lsl #2]
   13890:	cmp	r5, #0
   13894:	beq	138a8 <__assert_fail@plt+0x2934>
   13898:	add	ip, ip, #1
   1389c:	add	r4, r4, #4
   138a0:	cmp	ip, #10
   138a4:	bcc	13888 <__assert_fail@plt+0x2914>
   138a8:	str	lr, [sp]
   138ac:	str	ip, [sp, #4]
   138b0:	bl	13500 <__assert_fail@plt+0x258c>
   138b4:	sub	sp, fp, #8
   138b8:	pop	{r4, r5, fp, pc}
   138bc:	push	{fp, lr}
   138c0:	mov	fp, sp
   138c4:	sub	sp, sp, #8
   138c8:	add	ip, fp, #8
   138cc:	str	ip, [sp, #4]
   138d0:	str	ip, [sp]
   138d4:	bl	13870 <__assert_fail@plt+0x28fc>
   138d8:	mov	sp, fp
   138dc:	pop	{fp, pc}
   138e0:	push	{fp, lr}
   138e4:	mov	fp, sp
   138e8:	movw	r0, #24884	; 0x6134
   138ec:	movt	r0, #2
   138f0:	ldr	r1, [r0]
   138f4:	movw	r0, #20657	; 0x50b1
   138f8:	movt	r0, #1
   138fc:	bl	10d4c <fputs_unlocked@plt>
   13900:	movw	r1, #21683	; 0x54b3
   13904:	movt	r1, #1
   13908:	mov	r0, #0
   1390c:	mov	r2, #5
   13910:	bl	10dc4 <dcgettext@plt>
   13914:	mov	r1, r0
   13918:	movw	r2, #21703	; 0x54c7
   1391c:	movt	r2, #1
   13920:	mov	r0, #1
   13924:	bl	10ef0 <__printf_chk@plt>
   13928:	movw	r1, #21725	; 0x54dd
   1392c:	movt	r1, #1
   13930:	mov	r0, #0
   13934:	mov	r2, #5
   13938:	bl	10dc4 <dcgettext@plt>
   1393c:	mov	r1, r0
   13940:	movw	r2, #20134	; 0x4ea6
   13944:	movt	r2, #1
   13948:	movw	r3, #20466	; 0x4ff2
   1394c:	movt	r3, #1
   13950:	mov	r0, #1
   13954:	bl	10ef0 <__printf_chk@plt>
   13958:	movw	r1, #21745	; 0x54f1
   1395c:	movt	r1, #1
   13960:	mov	r0, #0
   13964:	mov	r2, #5
   13968:	bl	10dc4 <dcgettext@plt>
   1396c:	mov	r1, r0
   13970:	movw	r2, #21784	; 0x5518
   13974:	movt	r2, #1
   13978:	mov	r0, #1
   1397c:	pop	{fp, lr}
   13980:	b	10ef0 <__printf_chk@plt>
   13984:	b	13988 <__assert_fail@plt+0x2a14>
   13988:	push	{r4, r5, r6, sl, fp, lr}
   1398c:	add	fp, sp, #16
   13990:	mov	r4, r2
   13994:	mov	r5, r1
   13998:	mov	r6, r0
   1399c:	bl	14a20 <__assert_fail@plt+0x3aac>
   139a0:	cmp	r0, #0
   139a4:	popne	{r4, r5, r6, sl, fp, pc}
   139a8:	cmp	r6, #0
   139ac:	beq	139c0 <__assert_fail@plt+0x2a4c>
   139b0:	cmp	r5, #0
   139b4:	cmpne	r4, #0
   139b8:	bne	139c0 <__assert_fail@plt+0x2a4c>
   139bc:	pop	{r4, r5, r6, sl, fp, pc}
   139c0:	bl	13d74 <__assert_fail@plt+0x2e00>
   139c4:	push	{fp, lr}
   139c8:	mov	fp, sp
   139cc:	bl	14334 <__assert_fail@plt+0x33c0>
   139d0:	bl	139d8 <__assert_fail@plt+0x2a64>
   139d4:	pop	{fp, pc}
   139d8:	cmp	r0, #0
   139dc:	bxne	lr
   139e0:	push	{fp, lr}
   139e4:	mov	fp, sp
   139e8:	bl	13d74 <__assert_fail@plt+0x2e00>
   139ec:	push	{fp, lr}
   139f0:	mov	fp, sp
   139f4:	bl	14954 <__assert_fail@plt+0x39e0>
   139f8:	bl	139d8 <__assert_fail@plt+0x2a64>
   139fc:	pop	{fp, pc}
   13a00:	b	139c4 <__assert_fail@plt+0x2a50>
   13a04:	push	{r4, r5, fp, lr}
   13a08:	add	fp, sp, #8
   13a0c:	mov	r4, r1
   13a10:	mov	r5, r0
   13a14:	bl	14364 <__assert_fail@plt+0x33f0>
   13a18:	cmp	r0, #0
   13a1c:	popne	{r4, r5, fp, pc}
   13a20:	cmp	r5, #0
   13a24:	beq	13a34 <__assert_fail@plt+0x2ac0>
   13a28:	cmp	r4, #0
   13a2c:	bne	13a34 <__assert_fail@plt+0x2ac0>
   13a30:	pop	{r4, r5, fp, pc}
   13a34:	bl	13d74 <__assert_fail@plt+0x2e00>
   13a38:	push	{fp, lr}
   13a3c:	mov	fp, sp
   13a40:	bl	14958 <__assert_fail@plt+0x39e4>
   13a44:	bl	139d8 <__assert_fail@plt+0x2a64>
   13a48:	pop	{fp, pc}
   13a4c:	push	{fp, lr}
   13a50:	mov	fp, sp
   13a54:	bl	14968 <__assert_fail@plt+0x39f4>
   13a58:	bl	139d8 <__assert_fail@plt+0x2a64>
   13a5c:	pop	{fp, pc}
   13a60:	push	{fp, lr}
   13a64:	mov	fp, sp
   13a68:	mov	r2, r1
   13a6c:	mov	r1, r0
   13a70:	mov	r0, #0
   13a74:	bl	13988 <__assert_fail@plt+0x2a14>
   13a78:	pop	{fp, pc}
   13a7c:	mov	r2, r1
   13a80:	mov	r1, r0
   13a84:	mov	r0, #0
   13a88:	b	13a4c <__assert_fail@plt+0x2ad8>
   13a8c:	mov	r2, #1
   13a90:	b	13a94 <__assert_fail@plt+0x2b20>
   13a94:	push	{r4, r5, fp, lr}
   13a98:	add	fp, sp, #8
   13a9c:	mov	r4, r1
   13aa0:	ldr	r5, [r1]
   13aa4:	cmp	r0, #0
   13aa8:	beq	13ac0 <__assert_fail@plt+0x2b4c>
   13aac:	mov	r1, #1
   13ab0:	add	r1, r1, r5, lsr #1
   13ab4:	adds	r5, r5, r1
   13ab8:	bcc	13ad8 <__assert_fail@plt+0x2b64>
   13abc:	bl	13d74 <__assert_fail@plt+0x2e00>
   13ac0:	cmp	r5, #0
   13ac4:	bne	13ad8 <__assert_fail@plt+0x2b64>
   13ac8:	mov	r1, #64	; 0x40
   13acc:	udiv	r5, r1, r2
   13ad0:	cmp	r2, #64	; 0x40
   13ad4:	addhi	r5, r5, #1
   13ad8:	mov	r1, r5
   13adc:	bl	13988 <__assert_fail@plt+0x2a14>
   13ae0:	str	r5, [r4]
   13ae4:	pop	{r4, r5, fp, pc}
   13ae8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13aec:	add	fp, sp, #24
   13af0:	mov	r8, r1
   13af4:	ldr	r6, [r1]
   13af8:	add	r1, r6, r6, asr #1
   13afc:	cmp	r1, r6
   13b00:	mvnvs	r1, #-2147483648	; 0x80000000
   13b04:	cmp	r1, r3
   13b08:	mov	r5, r1
   13b0c:	movgt	r5, r3
   13b10:	cmn	r3, #1
   13b14:	movle	r5, r1
   13b18:	ldr	r4, [fp, #8]
   13b1c:	cmn	r4, #1
   13b20:	ble	13b48 <__assert_fail@plt+0x2bd4>
   13b24:	cmp	r4, #0
   13b28:	beq	13b9c <__assert_fail@plt+0x2c28>
   13b2c:	cmn	r5, #1
   13b30:	ble	13b70 <__assert_fail@plt+0x2bfc>
   13b34:	mvn	r7, #-2147483648	; 0x80000000
   13b38:	udiv	r1, r7, r4
   13b3c:	cmp	r1, r5
   13b40:	bge	13b9c <__assert_fail@plt+0x2c28>
   13b44:	b	13bac <__assert_fail@plt+0x2c38>
   13b48:	cmn	r5, #1
   13b4c:	ble	13b8c <__assert_fail@plt+0x2c18>
   13b50:	cmn	r4, #1
   13b54:	beq	13b9c <__assert_fail@plt+0x2c28>
   13b58:	mov	r1, #-2147483648	; 0x80000000
   13b5c:	sdiv	r1, r1, r4
   13b60:	mvn	r7, #-2147483648	; 0x80000000
   13b64:	cmp	r1, r5
   13b68:	bge	13b9c <__assert_fail@plt+0x2c28>
   13b6c:	b	13bac <__assert_fail@plt+0x2c38>
   13b70:	beq	13b9c <__assert_fail@plt+0x2c28>
   13b74:	mov	r1, #-2147483648	; 0x80000000
   13b78:	sdiv	r1, r1, r5
   13b7c:	mvn	r7, #-2147483648	; 0x80000000
   13b80:	cmp	r1, r4
   13b84:	bge	13b9c <__assert_fail@plt+0x2c28>
   13b88:	b	13bac <__assert_fail@plt+0x2c38>
   13b8c:	mvn	r7, #-2147483648	; 0x80000000
   13b90:	sdiv	r1, r7, r4
   13b94:	cmp	r5, r1
   13b98:	blt	13bac <__assert_fail@plt+0x2c38>
   13b9c:	mul	r1, r5, r4
   13ba0:	mov	r7, #64	; 0x40
   13ba4:	cmp	r1, #63	; 0x3f
   13ba8:	bgt	13bb4 <__assert_fail@plt+0x2c40>
   13bac:	sdiv	r5, r7, r4
   13bb0:	mul	r1, r5, r4
   13bb4:	cmp	r0, #0
   13bb8:	moveq	r7, #0
   13bbc:	streq	r7, [r8]
   13bc0:	sub	r7, r5, r6
   13bc4:	cmp	r7, r2
   13bc8:	bge	13c74 <__assert_fail@plt+0x2d00>
   13bcc:	add	r5, r6, r2
   13bd0:	mov	r1, #0
   13bd4:	cmp	r5, r3
   13bd8:	mov	r2, #0
   13bdc:	movwgt	r2, #1
   13be0:	cmn	r3, #1
   13be4:	movwgt	r1, #1
   13be8:	cmp	r5, r6
   13bec:	bvs	13c5c <__assert_fail@plt+0x2ce8>
   13bf0:	ands	r1, r1, r2
   13bf4:	bne	13c5c <__assert_fail@plt+0x2ce8>
   13bf8:	cmn	r4, #1
   13bfc:	ble	13c24 <__assert_fail@plt+0x2cb0>
   13c00:	cmp	r4, #0
   13c04:	beq	13c70 <__assert_fail@plt+0x2cfc>
   13c08:	cmn	r5, #1
   13c0c:	ble	13c48 <__assert_fail@plt+0x2cd4>
   13c10:	mvn	r1, #-2147483648	; 0x80000000
   13c14:	udiv	r1, r1, r4
   13c18:	cmp	r1, r5
   13c1c:	bge	13c70 <__assert_fail@plt+0x2cfc>
   13c20:	b	13c5c <__assert_fail@plt+0x2ce8>
   13c24:	cmn	r5, #1
   13c28:	ble	13c60 <__assert_fail@plt+0x2cec>
   13c2c:	cmn	r4, #1
   13c30:	beq	13c70 <__assert_fail@plt+0x2cfc>
   13c34:	mov	r1, #-2147483648	; 0x80000000
   13c38:	sdiv	r1, r1, r4
   13c3c:	cmp	r1, r5
   13c40:	bge	13c70 <__assert_fail@plt+0x2cfc>
   13c44:	b	13c5c <__assert_fail@plt+0x2ce8>
   13c48:	beq	13c70 <__assert_fail@plt+0x2cfc>
   13c4c:	mov	r1, #-2147483648	; 0x80000000
   13c50:	sdiv	r1, r1, r5
   13c54:	cmp	r1, r4
   13c58:	bge	13c70 <__assert_fail@plt+0x2cfc>
   13c5c:	bl	13d74 <__assert_fail@plt+0x2e00>
   13c60:	mvn	r1, #-2147483648	; 0x80000000
   13c64:	sdiv	r1, r1, r4
   13c68:	cmp	r5, r1
   13c6c:	blt	13c5c <__assert_fail@plt+0x2ce8>
   13c70:	mul	r1, r5, r4
   13c74:	bl	13a04 <__assert_fail@plt+0x2a90>
   13c78:	str	r5, [r8]
   13c7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c80:	mov	r1, #1
   13c84:	b	13c88 <__assert_fail@plt+0x2d14>
   13c88:	push	{fp, lr}
   13c8c:	mov	fp, sp
   13c90:	bl	142e0 <__assert_fail@plt+0x336c>
   13c94:	bl	139d8 <__assert_fail@plt+0x2a64>
   13c98:	pop	{fp, pc}
   13c9c:	mov	r1, #1
   13ca0:	b	13ca4 <__assert_fail@plt+0x2d30>
   13ca4:	push	{fp, lr}
   13ca8:	mov	fp, sp
   13cac:	bl	14964 <__assert_fail@plt+0x39f0>
   13cb0:	bl	139d8 <__assert_fail@plt+0x2a64>
   13cb4:	pop	{fp, pc}
   13cb8:	push	{r4, r5, r6, sl, fp, lr}
   13cbc:	add	fp, sp, #16
   13cc0:	mov	r4, r1
   13cc4:	mov	r5, r0
   13cc8:	mov	r0, r1
   13ccc:	bl	139c4 <__assert_fail@plt+0x2a50>
   13cd0:	mov	r6, r0
   13cd4:	mov	r1, r5
   13cd8:	mov	r2, r4
   13cdc:	bl	10d94 <memcpy@plt>
   13ce0:	mov	r0, r6
   13ce4:	pop	{r4, r5, r6, sl, fp, pc}
   13ce8:	push	{r4, r5, r6, sl, fp, lr}
   13cec:	add	fp, sp, #16
   13cf0:	mov	r4, r1
   13cf4:	mov	r5, r0
   13cf8:	mov	r0, r1
   13cfc:	bl	139ec <__assert_fail@plt+0x2a78>
   13d00:	mov	r6, r0
   13d04:	mov	r1, r5
   13d08:	mov	r2, r4
   13d0c:	bl	10d94 <memcpy@plt>
   13d10:	mov	r0, r6
   13d14:	pop	{r4, r5, r6, sl, fp, pc}
   13d18:	push	{r4, r5, r6, sl, fp, lr}
   13d1c:	add	fp, sp, #16
   13d20:	mov	r4, r1
   13d24:	mov	r5, r0
   13d28:	add	r0, r1, #1
   13d2c:	bl	139ec <__assert_fail@plt+0x2a78>
   13d30:	mov	r6, r0
   13d34:	mov	r0, #0
   13d38:	strb	r0, [r6, r4]
   13d3c:	mov	r0, r6
   13d40:	mov	r1, r5
   13d44:	mov	r2, r4
   13d48:	bl	10d94 <memcpy@plt>
   13d4c:	mov	r0, r6
   13d50:	pop	{r4, r5, r6, sl, fp, pc}
   13d54:	push	{r4, sl, fp, lr}
   13d58:	add	fp, sp, #8
   13d5c:	mov	r4, r0
   13d60:	bl	10eb4 <strlen@plt>
   13d64:	add	r1, r0, #1
   13d68:	mov	r0, r4
   13d6c:	pop	{r4, sl, fp, lr}
   13d70:	b	13cb8 <__assert_fail@plt+0x2d44>
   13d74:	push	{fp, lr}
   13d78:	mov	fp, sp
   13d7c:	movw	r0, #24796	; 0x60dc
   13d80:	movt	r0, #2
   13d84:	ldr	r4, [r0]
   13d88:	movw	r1, #21860	; 0x5564
   13d8c:	movt	r1, #1
   13d90:	mov	r0, #0
   13d94:	mov	r2, #5
   13d98:	bl	10dc4 <dcgettext@plt>
   13d9c:	mov	r3, r0
   13da0:	movw	r2, #20823	; 0x5157
   13da4:	movt	r2, #1
   13da8:	mov	r0, r4
   13dac:	mov	r1, #0
   13db0:	bl	10e48 <error@plt>
   13db4:	bl	10f68 <abort@plt>
   13db8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dbc:	add	fp, sp, #28
   13dc0:	sub	sp, sp, #12
   13dc4:	cmp	r2, #37	; 0x25
   13dc8:	bcs	141cc <__assert_fail@plt+0x3258>
   13dcc:	mov	r9, r3
   13dd0:	mov	r5, r2
   13dd4:	mov	r6, r1
   13dd8:	mov	r4, r0
   13ddc:	ldr	sl, [fp, #8]
   13de0:	bl	10ecc <__errno_location@plt>
   13de4:	mov	r7, r0
   13de8:	mov	r0, #0
   13dec:	str	r0, [r7]
   13df0:	add	r8, sp, #8
   13df4:	cmp	r6, #0
   13df8:	movne	r8, r6
   13dfc:	mov	r0, r4
   13e00:	mov	r1, r8
   13e04:	mov	r2, r5
   13e08:	bl	10d64 <strtol@plt>
   13e0c:	str	r0, [sp, #4]
   13e10:	ldr	r6, [r8]
   13e14:	cmp	r6, r4
   13e18:	beq	13e44 <__assert_fail@plt+0x2ed0>
   13e1c:	ldr	r0, [r7]
   13e20:	cmp	r0, #0
   13e24:	beq	13e78 <__assert_fail@plt+0x2f04>
   13e28:	mov	r5, #4
   13e2c:	cmp	r0, #34	; 0x22
   13e30:	bne	141c0 <__assert_fail@plt+0x324c>
   13e34:	mov	r5, #1
   13e38:	cmp	sl, #0
   13e3c:	bne	13e84 <__assert_fail@plt+0x2f10>
   13e40:	b	141b8 <__assert_fail@plt+0x3244>
   13e44:	mov	r5, #4
   13e48:	cmp	sl, #0
   13e4c:	ldrbne	r1, [r6]
   13e50:	cmpne	r1, #0
   13e54:	beq	141c0 <__assert_fail@plt+0x324c>
   13e58:	mov	r0, sl
   13e5c:	bl	10ec0 <strchr@plt>
   13e60:	cmp	r0, #0
   13e64:	beq	141c0 <__assert_fail@plt+0x324c>
   13e68:	mov	r0, #1
   13e6c:	str	r0, [sp, #4]
   13e70:	mov	r5, #0
   13e74:	b	13e84 <__assert_fail@plt+0x2f10>
   13e78:	mov	r5, r0
   13e7c:	cmp	sl, #0
   13e80:	beq	141b8 <__assert_fail@plt+0x3244>
   13e84:	ldrb	r4, [r6]
   13e88:	cmp	r4, #0
   13e8c:	beq	141b8 <__assert_fail@plt+0x3244>
   13e90:	mov	r0, sl
   13e94:	mov	r1, r4
   13e98:	bl	10ec0 <strchr@plt>
   13e9c:	cmp	r0, #0
   13ea0:	beq	140b8 <__assert_fail@plt+0x3144>
   13ea4:	sub	r0, r4, #69	; 0x45
   13ea8:	mov	r1, #1
   13eac:	str	r1, [sp]
   13eb0:	mov	r7, #1024	; 0x400
   13eb4:	cmp	r0, #47	; 0x2f
   13eb8:	bhi	13fb4 <__assert_fail@plt+0x3040>
   13ebc:	add	r1, pc, #0
   13ec0:	ldr	pc, [r1, r0, lsl #2]
   13ec4:	andeq	r3, r1, r4, lsl #31
   13ec8:			; <UNDEFINED> instruction: 0x00013fb4
   13ecc:	andeq	r3, r1, r4, lsl #31
   13ed0:			; <UNDEFINED> instruction: 0x00013fb4
   13ed4:			; <UNDEFINED> instruction: 0x00013fb4
   13ed8:			; <UNDEFINED> instruction: 0x00013fb4
   13edc:	andeq	r3, r1, r4, lsl #31
   13ee0:			; <UNDEFINED> instruction: 0x00013fb4
   13ee4:	andeq	r3, r1, r4, lsl #31
   13ee8:			; <UNDEFINED> instruction: 0x00013fb4
   13eec:			; <UNDEFINED> instruction: 0x00013fb4
   13ef0:	andeq	r3, r1, r4, lsl #31
   13ef4:			; <UNDEFINED> instruction: 0x00013fb4
   13ef8:			; <UNDEFINED> instruction: 0x00013fb4
   13efc:			; <UNDEFINED> instruction: 0x00013fb4
   13f00:	andeq	r3, r1, r4, lsl #31
   13f04:			; <UNDEFINED> instruction: 0x00013fb4
   13f08:			; <UNDEFINED> instruction: 0x00013fb4
   13f0c:			; <UNDEFINED> instruction: 0x00013fb4
   13f10:			; <UNDEFINED> instruction: 0x00013fb4
   13f14:	andeq	r3, r1, r4, lsl #31
   13f18:	andeq	r3, r1, r4, lsl #31
   13f1c:			; <UNDEFINED> instruction: 0x00013fb4
   13f20:			; <UNDEFINED> instruction: 0x00013fb4
   13f24:			; <UNDEFINED> instruction: 0x00013fb4
   13f28:			; <UNDEFINED> instruction: 0x00013fb4
   13f2c:			; <UNDEFINED> instruction: 0x00013fb4
   13f30:			; <UNDEFINED> instruction: 0x00013fb4
   13f34:			; <UNDEFINED> instruction: 0x00013fb4
   13f38:			; <UNDEFINED> instruction: 0x00013fb4
   13f3c:			; <UNDEFINED> instruction: 0x00013fb4
   13f40:			; <UNDEFINED> instruction: 0x00013fb4
   13f44:			; <UNDEFINED> instruction: 0x00013fb4
   13f48:			; <UNDEFINED> instruction: 0x00013fb4
   13f4c:	andeq	r3, r1, r4, lsl #31
   13f50:			; <UNDEFINED> instruction: 0x00013fb4
   13f54:			; <UNDEFINED> instruction: 0x00013fb4
   13f58:			; <UNDEFINED> instruction: 0x00013fb4
   13f5c:	andeq	r3, r1, r4, lsl #31
   13f60:			; <UNDEFINED> instruction: 0x00013fb4
   13f64:	andeq	r3, r1, r4, lsl #31
   13f68:			; <UNDEFINED> instruction: 0x00013fb4
   13f6c:			; <UNDEFINED> instruction: 0x00013fb4
   13f70:			; <UNDEFINED> instruction: 0x00013fb4
   13f74:			; <UNDEFINED> instruction: 0x00013fb4
   13f78:			; <UNDEFINED> instruction: 0x00013fb4
   13f7c:			; <UNDEFINED> instruction: 0x00013fb4
   13f80:	andeq	r3, r1, r4, lsl #31
   13f84:	mov	r0, sl
   13f88:	mov	r1, #48	; 0x30
   13f8c:	bl	10ec0 <strchr@plt>
   13f90:	cmp	r0, #0
   13f94:	beq	13fb4 <__assert_fail@plt+0x3040>
   13f98:	ldrb	r0, [r6, #1]
   13f9c:	cmp	r0, #66	; 0x42
   13fa0:	cmpne	r0, #68	; 0x44
   13fa4:	bne	140c8 <__assert_fail@plt+0x3154>
   13fa8:	mov	r0, #2
   13fac:	str	r0, [sp]
   13fb0:	mov	r7, #1000	; 0x3e8
   13fb4:	sub	r1, r4, #66	; 0x42
   13fb8:	cmp	r1, #53	; 0x35
   13fbc:	bhi	140b8 <__assert_fail@plt+0x3144>
   13fc0:	mov	r0, #0
   13fc4:	add	r2, pc, #0
   13fc8:	ldr	pc, [r2, r1, lsl #2]
   13fcc:	andeq	r4, r1, r8, lsr r1
   13fd0:	strheq	r4, [r1], -r8
   13fd4:	strheq	r4, [r1], -r8
   13fd8:	andeq	r4, r1, r4, asr #2
   13fdc:	strheq	r4, [r1], -r8
   13fe0:	andeq	r4, r1, r4, lsr #1
   13fe4:	strheq	r4, [r1], -r8
   13fe8:	strheq	r4, [r1], -r8
   13fec:	strheq	r4, [r1], -r8
   13ff0:	andeq	r4, r1, r8, ror #1
   13ff4:	strheq	r4, [r1], -r8
   13ff8:	strdeq	r4, [r1], -ip
   13ffc:	strheq	r4, [r1], -r8
   14000:	strheq	r4, [r1], -r8
   14004:	andeq	r4, r1, r8, asr r1
   14008:	strheq	r4, [r1], -r8
   1400c:	strheq	r4, [r1], -r8
   14010:	strheq	r4, [r1], -r8
   14014:	andeq	r4, r1, r0, lsl r1
   14018:	strheq	r4, [r1], -r8
   1401c:	strheq	r4, [r1], -r8
   14020:	strheq	r4, [r1], -r8
   14024:	strheq	r4, [r1], -r8
   14028:	andeq	r4, r1, ip, ror #2
   1402c:	andeq	r4, r1, r4, lsr #2
   14030:	strheq	r4, [r1], -r8
   14034:	strheq	r4, [r1], -r8
   14038:	strheq	r4, [r1], -r8
   1403c:	strheq	r4, [r1], -r8
   14040:	strheq	r4, [r1], -r8
   14044:	strheq	r4, [r1], -r8
   14048:	strheq	r4, [r1], -r8
   1404c:	andeq	r4, r1, r0, lsl #3
   14050:	muleq	r1, r8, r1
   14054:	strheq	r4, [r1], -r8
   14058:	strheq	r4, [r1], -r8
   1405c:	strheq	r4, [r1], -r8
   14060:	andeq	r4, r1, r4, lsr #1
   14064:	strheq	r4, [r1], -r8
   14068:	strheq	r4, [r1], -r8
   1406c:	strheq	r4, [r1], -r8
   14070:	andeq	r4, r1, r8, ror #1
   14074:	strheq	r4, [r1], -r8
   14078:	strdeq	r4, [r1], -ip
   1407c:	strheq	r4, [r1], -r8
   14080:	strheq	r4, [r1], -r8
   14084:	strheq	r4, [r1], -r8
   14088:	strheq	r4, [r1], -r8
   1408c:	strheq	r4, [r1], -r8
   14090:	strheq	r4, [r1], -r8
   14094:	andeq	r4, r1, r0, lsl r1
   14098:	strheq	r4, [r1], -r8
   1409c:	strheq	r4, [r1], -r8
   140a0:	andeq	r4, r1, ip, lsl #3
   140a4:	add	r0, sp, #4
   140a8:	mov	r1, r7
   140ac:	mov	r2, #3
   140b0:	bl	14298 <__assert_fail@plt+0x3324>
   140b4:	b	14198 <__assert_fail@plt+0x3224>
   140b8:	ldr	r0, [sp, #4]
   140bc:	str	r0, [r9]
   140c0:	orr	r5, r5, #2
   140c4:	b	141c0 <__assert_fail@plt+0x324c>
   140c8:	cmp	r0, #105	; 0x69
   140cc:	bne	13fb4 <__assert_fail@plt+0x3040>
   140d0:	ldrb	r0, [r6, #2]
   140d4:	mov	r1, #1
   140d8:	cmp	r0, #66	; 0x42
   140dc:	movweq	r1, #3
   140e0:	str	r1, [sp]
   140e4:	b	13fb4 <__assert_fail@plt+0x3040>
   140e8:	add	r0, sp, #4
   140ec:	mov	r1, r7
   140f0:	mov	r2, #1
   140f4:	bl	14298 <__assert_fail@plt+0x3324>
   140f8:	b	14198 <__assert_fail@plt+0x3224>
   140fc:	add	r0, sp, #4
   14100:	mov	r1, r7
   14104:	mov	r2, #2
   14108:	bl	14298 <__assert_fail@plt+0x3324>
   1410c:	b	14198 <__assert_fail@plt+0x3224>
   14110:	add	r0, sp, #4
   14114:	mov	r1, r7
   14118:	mov	r2, #4
   1411c:	bl	14298 <__assert_fail@plt+0x3324>
   14120:	b	14198 <__assert_fail@plt+0x3224>
   14124:	add	r0, sp, #4
   14128:	mov	r1, r7
   1412c:	mov	r2, #7
   14130:	bl	14298 <__assert_fail@plt+0x3324>
   14134:	b	14198 <__assert_fail@plt+0x3224>
   14138:	add	r0, sp, #4
   1413c:	mov	r1, #1024	; 0x400
   14140:	b	14194 <__assert_fail@plt+0x3220>
   14144:	add	r0, sp, #4
   14148:	mov	r1, r7
   1414c:	mov	r2, #6
   14150:	bl	14298 <__assert_fail@plt+0x3324>
   14154:	b	14198 <__assert_fail@plt+0x3224>
   14158:	add	r0, sp, #4
   1415c:	mov	r1, r7
   14160:	mov	r2, #5
   14164:	bl	14298 <__assert_fail@plt+0x3324>
   14168:	b	14198 <__assert_fail@plt+0x3224>
   1416c:	add	r0, sp, #4
   14170:	mov	r1, r7
   14174:	mov	r2, #8
   14178:	bl	14298 <__assert_fail@plt+0x3324>
   1417c:	b	14198 <__assert_fail@plt+0x3224>
   14180:	add	r0, sp, #4
   14184:	mov	r1, #512	; 0x200
   14188:	b	14194 <__assert_fail@plt+0x3220>
   1418c:	add	r0, sp, #4
   14190:	mov	r1, #2
   14194:	bl	141ec <__assert_fail@plt+0x3278>
   14198:	ldr	r1, [r8]
   1419c:	ldr	r3, [sp]
   141a0:	add	r2, r1, r3
   141a4:	str	r2, [r8]
   141a8:	ldrb	r1, [r1, r3]
   141ac:	orr	r5, r0, r5
   141b0:	cmp	r1, #0
   141b4:	orrne	r5, r5, #2
   141b8:	ldr	r0, [sp, #4]
   141bc:	str	r0, [r9]
   141c0:	mov	r0, r5
   141c4:	sub	sp, fp, #28
   141c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141cc:	movw	r0, #21877	; 0x5575
   141d0:	movt	r0, #1
   141d4:	movw	r1, #21915	; 0x559b
   141d8:	movt	r1, #1
   141dc:	movw	r3, #21929	; 0x55a9
   141e0:	movt	r3, #1
   141e4:	mov	r2, #85	; 0x55
   141e8:	bl	10f74 <__assert_fail@plt>
   141ec:	cmn	r1, #1
   141f0:	ble	1421c <__assert_fail@plt+0x32a8>
   141f4:	cmp	r1, #0
   141f8:	beq	14258 <__assert_fail@plt+0x32e4>
   141fc:	ldr	r2, [r0]
   14200:	cmn	r2, #1
   14204:	ble	14244 <__assert_fail@plt+0x32d0>
   14208:	mvn	r3, #-2147483648	; 0x80000000
   1420c:	udiv	r3, r3, r1
   14210:	cmp	r3, r2
   14214:	bge	14258 <__assert_fail@plt+0x32e4>
   14218:	b	14278 <__assert_fail@plt+0x3304>
   1421c:	ldr	r2, [r0]
   14220:	cmn	r2, #1
   14224:	ble	14268 <__assert_fail@plt+0x32f4>
   14228:	cmn	r1, #1
   1422c:	beq	14258 <__assert_fail@plt+0x32e4>
   14230:	mov	r3, #-2147483648	; 0x80000000
   14234:	sdiv	r3, r3, r1
   14238:	cmp	r3, r2
   1423c:	bge	14258 <__assert_fail@plt+0x32e4>
   14240:	b	14278 <__assert_fail@plt+0x3304>
   14244:	beq	14258 <__assert_fail@plt+0x32e4>
   14248:	mov	r3, #-2147483648	; 0x80000000
   1424c:	sdiv	r2, r3, r2
   14250:	cmp	r2, r1
   14254:	blt	14278 <__assert_fail@plt+0x3304>
   14258:	ldr	r2, [r0]
   1425c:	mul	r2, r2, r1
   14260:	mov	r1, #0
   14264:	b	1428c <__assert_fail@plt+0x3318>
   14268:	mvn	r3, #-2147483648	; 0x80000000
   1426c:	sdiv	r3, r3, r1
   14270:	cmp	r2, r3
   14274:	bge	14258 <__assert_fail@plt+0x32e4>
   14278:	ldr	r1, [r0]
   1427c:	mvn	r2, #-2147483648	; 0x80000000
   14280:	cmp	r1, #0
   14284:	movlt	r2, #-2147483648	; 0x80000000
   14288:	mov	r1, #1
   1428c:	str	r2, [r0]
   14290:	mov	r0, r1
   14294:	bx	lr
   14298:	push	{r4, r5, r6, r7, fp, lr}
   1429c:	add	fp, sp, #16
   142a0:	cmp	r2, #0
   142a4:	moveq	r6, #0
   142a8:	moveq	r0, r6
   142ac:	popeq	{r4, r5, r6, r7, fp, pc}
   142b0:	mov	r4, r2
   142b4:	mov	r5, r1
   142b8:	mov	r7, r0
   142bc:	mov	r6, #0
   142c0:	mov	r0, r7
   142c4:	mov	r1, r5
   142c8:	bl	141ec <__assert_fail@plt+0x3278>
   142cc:	orr	r6, r0, r6
   142d0:	subs	r4, r4, #1
   142d4:	bne	142c0 <__assert_fail@plt+0x334c>
   142d8:	mov	r0, r6
   142dc:	pop	{r4, r5, r6, r7, fp, pc}
   142e0:	clz	r2, r1
   142e4:	lsr	r2, r2, #5
   142e8:	clz	r3, r0
   142ec:	lsr	r3, r3, #5
   142f0:	orrs	r2, r3, r2
   142f4:	movwne	r1, #1
   142f8:	movwne	r0, #1
   142fc:	cmp	r1, #0
   14300:	beq	14330 <__assert_fail@plt+0x33bc>
   14304:	mvn	r2, #-2147483648	; 0x80000000
   14308:	udiv	r2, r2, r1
   1430c:	cmp	r2, r0
   14310:	bcs	14330 <__assert_fail@plt+0x33bc>
   14314:	push	{fp, lr}
   14318:	mov	fp, sp
   1431c:	bl	10ecc <__errno_location@plt>
   14320:	mov	r1, #12
   14324:	str	r1, [r0]
   14328:	mov	r0, #0
   1432c:	pop	{fp, pc}
   14330:	b	10d40 <calloc@plt>
   14334:	cmp	r0, #0
   14338:	movweq	r0, #1
   1433c:	cmn	r0, #1
   14340:	ble	14348 <__assert_fail@plt+0x33d4>
   14344:	b	10e60 <malloc@plt>
   14348:	push	{fp, lr}
   1434c:	mov	fp, sp
   14350:	bl	10ecc <__errno_location@plt>
   14354:	mov	r1, #12
   14358:	str	r1, [r0]
   1435c:	mov	r0, #0
   14360:	pop	{fp, pc}
   14364:	push	{fp, lr}
   14368:	mov	fp, sp
   1436c:	cmp	r0, #0
   14370:	beq	1438c <__assert_fail@plt+0x3418>
   14374:	cmp	r1, #0
   14378:	beq	14398 <__assert_fail@plt+0x3424>
   1437c:	cmn	r1, #1
   14380:	ble	143a4 <__assert_fail@plt+0x3430>
   14384:	pop	{fp, lr}
   14388:	b	10dd0 <realloc@plt>
   1438c:	mov	r0, r1
   14390:	pop	{fp, lr}
   14394:	b	14334 <__assert_fail@plt+0x33c0>
   14398:	bl	1486c <__assert_fail@plt+0x38f8>
   1439c:	mov	r0, #0
   143a0:	pop	{fp, pc}
   143a4:	bl	10ecc <__errno_location@plt>
   143a8:	mov	r1, #12
   143ac:	str	r1, [r0]
   143b0:	mov	r0, #0
   143b4:	pop	{fp, pc}
   143b8:	mov	r1, r0
   143bc:	sub	r2, r0, #65	; 0x41
   143c0:	mov	r0, #1
   143c4:	cmp	r2, #26
   143c8:	subcs	r2, r1, #97	; 0x61
   143cc:	cmpcs	r2, #26
   143d0:	bcs	143d8 <__assert_fail@plt+0x3464>
   143d4:	bx	lr
   143d8:	sub	r1, r1, #48	; 0x30
   143dc:	cmp	r1, #10
   143e0:	movcs	r0, #0
   143e4:	bx	lr
   143e8:	mov	r1, r0
   143ec:	sub	r2, r0, #65	; 0x41
   143f0:	mov	r0, #1
   143f4:	cmp	r2, #26
   143f8:	subcs	r1, r1, #97	; 0x61
   143fc:	cmpcs	r1, #26
   14400:	movcs	r0, #0
   14404:	bx	lr
   14408:	mov	r1, #0
   1440c:	cmp	r0, #128	; 0x80
   14410:	movwcc	r1, #1
   14414:	mov	r0, r1
   14418:	bx	lr
   1441c:	sub	r1, r0, #9
   14420:	clz	r1, r1
   14424:	lsr	r1, r1, #5
   14428:	sub	r0, r0, #32
   1442c:	clz	r0, r0
   14430:	lsr	r0, r0, #5
   14434:	orr	r0, r0, r1
   14438:	bx	lr
   1443c:	mov	r1, r0
   14440:	mov	r0, #1
   14444:	cmp	r1, #32
   14448:	bxcc	lr
   1444c:	cmp	r1, #127	; 0x7f
   14450:	movne	r0, #0
   14454:	bx	lr
   14458:	sub	r1, r0, #48	; 0x30
   1445c:	mov	r0, #0
   14460:	cmp	r1, #10
   14464:	movwcc	r0, #1
   14468:	bx	lr
   1446c:	sub	r1, r0, #33	; 0x21
   14470:	mov	r0, #0
   14474:	cmp	r1, #94	; 0x5e
   14478:	movwcc	r0, #1
   1447c:	bx	lr
   14480:	sub	r1, r0, #97	; 0x61
   14484:	mov	r0, #0
   14488:	cmp	r1, #26
   1448c:	movwcc	r0, #1
   14490:	bx	lr
   14494:	sub	r1, r0, #32
   14498:	mov	r0, #0
   1449c:	cmp	r1, #95	; 0x5f
   144a0:	movwcc	r0, #1
   144a4:	bx	lr
   144a8:	sub	r1, r0, #33	; 0x21
   144ac:	cmp	r1, #93	; 0x5d
   144b0:	bhi	1463c <__assert_fail@plt+0x36c8>
   144b4:	mov	r0, #1
   144b8:	add	r2, pc, #0
   144bc:	ldr	pc, [r2, r1, lsl #2]
   144c0:	andeq	r4, r1, r8, lsr r6
   144c4:	andeq	r4, r1, r8, lsr r6
   144c8:	andeq	r4, r1, r8, lsr r6
   144cc:	andeq	r4, r1, r8, lsr r6
   144d0:	andeq	r4, r1, r8, lsr r6
   144d4:	andeq	r4, r1, r8, lsr r6
   144d8:	andeq	r4, r1, r8, lsr r6
   144dc:	andeq	r4, r1, r8, lsr r6
   144e0:	andeq	r4, r1, r8, lsr r6
   144e4:	andeq	r4, r1, r8, lsr r6
   144e8:	andeq	r4, r1, r8, lsr r6
   144ec:	andeq	r4, r1, r8, lsr r6
   144f0:	andeq	r4, r1, r8, lsr r6
   144f4:	andeq	r4, r1, r8, lsr r6
   144f8:	andeq	r4, r1, r8, lsr r6
   144fc:	andeq	r4, r1, ip, lsr r6
   14500:	andeq	r4, r1, ip, lsr r6
   14504:	andeq	r4, r1, ip, lsr r6
   14508:	andeq	r4, r1, ip, lsr r6
   1450c:	andeq	r4, r1, ip, lsr r6
   14510:	andeq	r4, r1, ip, lsr r6
   14514:	andeq	r4, r1, ip, lsr r6
   14518:	andeq	r4, r1, ip, lsr r6
   1451c:	andeq	r4, r1, ip, lsr r6
   14520:	andeq	r4, r1, ip, lsr r6
   14524:	andeq	r4, r1, r8, lsr r6
   14528:	andeq	r4, r1, r8, lsr r6
   1452c:	andeq	r4, r1, r8, lsr r6
   14530:	andeq	r4, r1, r8, lsr r6
   14534:	andeq	r4, r1, r8, lsr r6
   14538:	andeq	r4, r1, r8, lsr r6
   1453c:	andeq	r4, r1, r8, lsr r6
   14540:	andeq	r4, r1, ip, lsr r6
   14544:	andeq	r4, r1, ip, lsr r6
   14548:	andeq	r4, r1, ip, lsr r6
   1454c:	andeq	r4, r1, ip, lsr r6
   14550:	andeq	r4, r1, ip, lsr r6
   14554:	andeq	r4, r1, ip, lsr r6
   14558:	andeq	r4, r1, ip, lsr r6
   1455c:	andeq	r4, r1, ip, lsr r6
   14560:	andeq	r4, r1, ip, lsr r6
   14564:	andeq	r4, r1, ip, lsr r6
   14568:	andeq	r4, r1, ip, lsr r6
   1456c:	andeq	r4, r1, ip, lsr r6
   14570:	andeq	r4, r1, ip, lsr r6
   14574:	andeq	r4, r1, ip, lsr r6
   14578:	andeq	r4, r1, ip, lsr r6
   1457c:	andeq	r4, r1, ip, lsr r6
   14580:	andeq	r4, r1, ip, lsr r6
   14584:	andeq	r4, r1, ip, lsr r6
   14588:	andeq	r4, r1, ip, lsr r6
   1458c:	andeq	r4, r1, ip, lsr r6
   14590:	andeq	r4, r1, ip, lsr r6
   14594:	andeq	r4, r1, ip, lsr r6
   14598:	andeq	r4, r1, ip, lsr r6
   1459c:	andeq	r4, r1, ip, lsr r6
   145a0:	andeq	r4, r1, ip, lsr r6
   145a4:	andeq	r4, r1, ip, lsr r6
   145a8:	andeq	r4, r1, r8, lsr r6
   145ac:	andeq	r4, r1, r8, lsr r6
   145b0:	andeq	r4, r1, r8, lsr r6
   145b4:	andeq	r4, r1, r8, lsr r6
   145b8:	andeq	r4, r1, r8, lsr r6
   145bc:	andeq	r4, r1, r8, lsr r6
   145c0:	andeq	r4, r1, ip, lsr r6
   145c4:	andeq	r4, r1, ip, lsr r6
   145c8:	andeq	r4, r1, ip, lsr r6
   145cc:	andeq	r4, r1, ip, lsr r6
   145d0:	andeq	r4, r1, ip, lsr r6
   145d4:	andeq	r4, r1, ip, lsr r6
   145d8:	andeq	r4, r1, ip, lsr r6
   145dc:	andeq	r4, r1, ip, lsr r6
   145e0:	andeq	r4, r1, ip, lsr r6
   145e4:	andeq	r4, r1, ip, lsr r6
   145e8:	andeq	r4, r1, ip, lsr r6
   145ec:	andeq	r4, r1, ip, lsr r6
   145f0:	andeq	r4, r1, ip, lsr r6
   145f4:	andeq	r4, r1, ip, lsr r6
   145f8:	andeq	r4, r1, ip, lsr r6
   145fc:	andeq	r4, r1, ip, lsr r6
   14600:	andeq	r4, r1, ip, lsr r6
   14604:	andeq	r4, r1, ip, lsr r6
   14608:	andeq	r4, r1, ip, lsr r6
   1460c:	andeq	r4, r1, ip, lsr r6
   14610:	andeq	r4, r1, ip, lsr r6
   14614:	andeq	r4, r1, ip, lsr r6
   14618:	andeq	r4, r1, ip, lsr r6
   1461c:	andeq	r4, r1, ip, lsr r6
   14620:	andeq	r4, r1, ip, lsr r6
   14624:	andeq	r4, r1, ip, lsr r6
   14628:	andeq	r4, r1, r8, lsr r6
   1462c:	andeq	r4, r1, r8, lsr r6
   14630:	andeq	r4, r1, r8, lsr r6
   14634:	andeq	r4, r1, r8, lsr r6
   14638:	bx	lr
   1463c:	mov	r0, #0
   14640:	bx	lr
   14644:	sub	r0, r0, #9
   14648:	cmp	r0, #23
   1464c:	movhi	r0, #0
   14650:	bxhi	lr
   14654:	bic	r0, r0, #-16777216	; 0xff000000
   14658:	movw	r1, #31
   1465c:	movt	r1, #128	; 0x80
   14660:	mov	r2, #1
   14664:	and	r0, r2, r1, lsr r0
   14668:	bx	lr
   1466c:	sub	r1, r0, #65	; 0x41
   14670:	mov	r0, #0
   14674:	cmp	r1, #26
   14678:	movwcc	r0, #1
   1467c:	bx	lr
   14680:	mov	r1, r0
   14684:	sub	r2, r0, #48	; 0x30
   14688:	mov	r0, #1
   1468c:	cmp	r2, #22
   14690:	bhi	146a8 <__assert_fail@plt+0x3734>
   14694:	mov	ip, #1
   14698:	movw	r3, #1023	; 0x3ff
   1469c:	movt	r3, #126	; 0x7e
   146a0:	tst	r3, ip, lsl r2
   146a4:	bxne	lr
   146a8:	sub	r1, r1, #97	; 0x61
   146ac:	cmp	r1, #6
   146b0:	movcs	r0, #0
   146b4:	bxcs	lr
   146b8:	bx	lr
   146bc:	sub	r1, r0, #65	; 0x41
   146c0:	cmp	r1, #26
   146c4:	addcc	r0, r0, #32
   146c8:	bx	lr
   146cc:	sub	r1, r0, #97	; 0x61
   146d0:	cmp	r1, #26
   146d4:	subcc	r0, r0, #32
   146d8:	bx	lr
   146dc:	push	{r4, r5, r6, sl, fp, lr}
   146e0:	add	fp, sp, #16
   146e4:	mov	r4, r0
   146e8:	bl	10e24 <__fpending@plt>
   146ec:	mov	r5, r0
   146f0:	mov	r0, r4
   146f4:	bl	10e30 <ferror_unlocked@plt>
   146f8:	mov	r6, r0
   146fc:	mov	r0, r4
   14700:	bl	14764 <__assert_fail@plt+0x37f0>
   14704:	cmp	r6, #0
   14708:	beq	14728 <__assert_fail@plt+0x37b4>
   1470c:	mvn	r4, #0
   14710:	cmp	r0, #0
   14714:	bne	1475c <__assert_fail@plt+0x37e8>
   14718:	bl	10ecc <__errno_location@plt>
   1471c:	mov	r1, #0
   14720:	str	r1, [r0]
   14724:	b	1475c <__assert_fail@plt+0x37e8>
   14728:	cmp	r0, #0
   1472c:	mov	r4, r0
   14730:	mvnne	r4, #0
   14734:	cmp	r5, #0
   14738:	bne	1475c <__assert_fail@plt+0x37e8>
   1473c:	cmp	r0, #0
   14740:	beq	1475c <__assert_fail@plt+0x37e8>
   14744:	bl	10ecc <__errno_location@plt>
   14748:	ldr	r0, [r0]
   1474c:	subs	r4, r0, #9
   14750:	mvnne	r4, #0
   14754:	mov	r0, r4
   14758:	pop	{r4, r5, r6, sl, fp, pc}
   1475c:	mov	r0, r4
   14760:	pop	{r4, r5, r6, sl, fp, pc}
   14764:	push	{r4, r5, fp, lr}
   14768:	add	fp, sp, #8
   1476c:	sub	sp, sp, #8
   14770:	mov	r4, r0
   14774:	bl	10efc <fileno@plt>
   14778:	cmn	r0, #1
   1477c:	ble	147f4 <__assert_fail@plt+0x3880>
   14780:	mov	r0, r4
   14784:	bl	10e78 <__freading@plt>
   14788:	cmp	r0, #0
   1478c:	beq	147b8 <__assert_fail@plt+0x3844>
   14790:	mov	r0, r4
   14794:	bl	10efc <fileno@plt>
   14798:	mov	r1, #1
   1479c:	str	r1, [sp]
   147a0:	mov	r2, #0
   147a4:	mov	r3, #0
   147a8:	bl	10e0c <lseek64@plt>
   147ac:	and	r0, r0, r1
   147b0:	cmn	r0, #1
   147b4:	beq	147f4 <__assert_fail@plt+0x3880>
   147b8:	mov	r0, r4
   147bc:	bl	14804 <__assert_fail@plt+0x3890>
   147c0:	cmp	r0, #0
   147c4:	beq	147f4 <__assert_fail@plt+0x3880>
   147c8:	bl	10ecc <__errno_location@plt>
   147cc:	ldr	r5, [r0]
   147d0:	mov	r0, r4
   147d4:	bl	10f14 <fclose@plt>
   147d8:	cmp	r5, #0
   147dc:	beq	147ec <__assert_fail@plt+0x3878>
   147e0:	bl	10ecc <__errno_location@plt>
   147e4:	str	r5, [r0]
   147e8:	mvn	r0, #0
   147ec:	sub	sp, fp, #8
   147f0:	pop	{r4, r5, fp, pc}
   147f4:	mov	r0, r4
   147f8:	sub	sp, fp, #8
   147fc:	pop	{r4, r5, fp, lr}
   14800:	b	10f14 <fclose@plt>
   14804:	push	{r4, sl, fp, lr}
   14808:	add	fp, sp, #8
   1480c:	mov	r4, r0
   14810:	cmp	r0, #0
   14814:	beq	1482c <__assert_fail@plt+0x38b8>
   14818:	mov	r0, r4
   1481c:	bl	10e78 <__freading@plt>
   14820:	cmp	r0, #0
   14824:	movne	r0, r4
   14828:	blne	14838 <__assert_fail@plt+0x38c4>
   1482c:	mov	r0, r4
   14830:	pop	{r4, sl, fp, lr}
   14834:	b	10d70 <fflush@plt>
   14838:	ldrb	r1, [r0, #1]
   1483c:	tst	r1, #1
   14840:	bxeq	lr
   14844:	push	{fp, lr}
   14848:	mov	fp, sp
   1484c:	sub	sp, sp, #8
   14850:	mov	r1, #1
   14854:	str	r1, [sp]
   14858:	mov	r2, #0
   1485c:	mov	r3, #0
   14860:	bl	14894 <__assert_fail@plt+0x3920>
   14864:	mov	sp, fp
   14868:	pop	{fp, pc}
   1486c:	push	{r4, r5, r6, sl, fp, lr}
   14870:	add	fp, sp, #16
   14874:	mov	r4, r0
   14878:	bl	10ecc <__errno_location@plt>
   1487c:	mov	r5, r0
   14880:	ldr	r6, [r0]
   14884:	mov	r0, r4
   14888:	bl	10d7c <free@plt>
   1488c:	str	r6, [r5]
   14890:	pop	{r4, r5, r6, sl, fp, pc}
   14894:	push	{r4, r5, r6, r7, fp, lr}
   14898:	add	fp, sp, #16
   1489c:	sub	sp, sp, #8
   148a0:	mov	r5, r3
   148a4:	mov	r6, r2
   148a8:	mov	r4, r0
   148ac:	ldr	r0, [r0, #4]
   148b0:	ldr	r1, [r4, #8]
   148b4:	cmp	r1, r0
   148b8:	bne	148d4 <__assert_fail@plt+0x3960>
   148bc:	ldrd	r0, [r4, #16]
   148c0:	cmp	r1, r0
   148c4:	bne	148d4 <__assert_fail@plt+0x3960>
   148c8:	ldr	r0, [r4, #36]	; 0x24
   148cc:	cmp	r0, #0
   148d0:	beq	148ec <__assert_fail@plt+0x3978>
   148d4:	mov	r0, r4
   148d8:	mov	r2, r6
   148dc:	mov	r3, r5
   148e0:	sub	sp, fp, #16
   148e4:	pop	{r4, r5, r6, r7, fp, lr}
   148e8:	b	10f20 <fseeko64@plt>
   148ec:	ldr	r7, [fp, #8]
   148f0:	mov	r0, r4
   148f4:	bl	10efc <fileno@plt>
   148f8:	str	r7, [sp]
   148fc:	mov	r2, r6
   14900:	mov	r3, r5
   14904:	bl	10e0c <lseek64@plt>
   14908:	and	r2, r0, r1
   1490c:	cmn	r2, #1
   14910:	mvneq	r0, #0
   14914:	subeq	sp, fp, #16
   14918:	popeq	{r4, r5, r6, r7, fp, pc}
   1491c:	strd	r0, [r4, #80]	; 0x50
   14920:	ldr	r0, [r4]
   14924:	bic	r0, r0, #16
   14928:	str	r0, [r4]
   1492c:	mov	r0, #0
   14930:	sub	sp, fp, #16
   14934:	pop	{r4, r5, r6, r7, fp, pc}
   14938:	push	{fp, lr}
   1493c:	mov	fp, sp
   14940:	bl	10ecc <__errno_location@plt>
   14944:	mov	r1, #12
   14948:	str	r1, [r0]
   1494c:	mov	r0, #0
   14950:	pop	{fp, pc}
   14954:	b	14334 <__assert_fail@plt+0x33c0>
   14958:	cmp	r1, #0
   1495c:	orreq	r1, r1, #1
   14960:	b	14364 <__assert_fail@plt+0x33f0>
   14964:	b	142e0 <__assert_fail@plt+0x336c>
   14968:	clz	r3, r2
   1496c:	lsr	ip, r3, #5
   14970:	clz	r3, r1
   14974:	lsr	r3, r3, #5
   14978:	orrs	r3, r3, ip
   1497c:	movwne	r1, #1
   14980:	movwne	r2, #1
   14984:	b	14a20 <__assert_fail@plt+0x3aac>
   14988:	push	{fp, lr}
   1498c:	mov	fp, sp
   14990:	mov	r0, #14
   14994:	bl	10f44 <nl_langinfo@plt>
   14998:	movw	r1, #20658	; 0x50b2
   1499c:	movt	r1, #1
   149a0:	cmp	r0, #0
   149a4:	movne	r1, r0
   149a8:	ldrb	r2, [r1]
   149ac:	movw	r0, #22000	; 0x55f0
   149b0:	movt	r0, #1
   149b4:	cmp	r2, #0
   149b8:	movne	r0, r1
   149bc:	pop	{fp, pc}
   149c0:	push	{r4, r5, r6, r7, fp, lr}
   149c4:	add	fp, sp, #16
   149c8:	sub	sp, sp, #8
   149cc:	mov	r7, r2
   149d0:	mov	r4, r1
   149d4:	add	r5, sp, #4
   149d8:	cmp	r0, #0
   149dc:	movne	r5, r0
   149e0:	mov	r0, r5
   149e4:	bl	10e3c <mbrtowc@plt>
   149e8:	mov	r6, r0
   149ec:	cmp	r7, #0
   149f0:	beq	14a14 <__assert_fail@plt+0x3aa0>
   149f4:	cmn	r6, #2
   149f8:	bcc	14a14 <__assert_fail@plt+0x3aa0>
   149fc:	mov	r0, #0
   14a00:	bl	14a5c <__assert_fail@plt+0x3ae8>
   14a04:	cmp	r0, #0
   14a08:	ldrbeq	r0, [r4]
   14a0c:	streq	r0, [r5]
   14a10:	moveq	r6, #1
   14a14:	mov	r0, r6
   14a18:	sub	sp, fp, #16
   14a1c:	pop	{r4, r5, r6, r7, fp, pc}
   14a20:	cmp	r2, #0
   14a24:	beq	14a54 <__assert_fail@plt+0x3ae0>
   14a28:	mvn	r3, #0
   14a2c:	udiv	r3, r3, r2
   14a30:	cmp	r3, r1
   14a34:	bcs	14a54 <__assert_fail@plt+0x3ae0>
   14a38:	push	{fp, lr}
   14a3c:	mov	fp, sp
   14a40:	bl	10ecc <__errno_location@plt>
   14a44:	mov	r1, #12
   14a48:	str	r1, [r0]
   14a4c:	mov	r0, #0
   14a50:	pop	{fp, pc}
   14a54:	mul	r1, r2, r1
   14a58:	b	14364 <__assert_fail@plt+0x33f0>
   14a5c:	push	{r4, sl, fp, lr}
   14a60:	add	fp, sp, #8
   14a64:	sub	sp, sp, #264	; 0x108
   14a68:	add	r1, sp, #7
   14a6c:	movw	r2, #257	; 0x101
   14a70:	bl	14ac0 <__assert_fail@plt+0x3b4c>
   14a74:	mov	r4, #0
   14a78:	cmp	r0, #0
   14a7c:	bne	14ab4 <__assert_fail@plt+0x3b40>
   14a80:	add	r0, sp, #7
   14a84:	movw	r1, #22006	; 0x55f6
   14a88:	movt	r1, #1
   14a8c:	bl	10d58 <strcmp@plt>
   14a90:	cmp	r0, #0
   14a94:	beq	14ab4 <__assert_fail@plt+0x3b40>
   14a98:	add	r0, sp, #7
   14a9c:	movw	r1, #22008	; 0x55f8
   14aa0:	movt	r1, #1
   14aa4:	bl	10d58 <strcmp@plt>
   14aa8:	mov	r4, r0
   14aac:	cmp	r0, #0
   14ab0:	movwne	r4, #1
   14ab4:	mov	r0, r4
   14ab8:	sub	sp, fp, #8
   14abc:	pop	{r4, sl, fp, pc}
   14ac0:	b	14ac4 <__assert_fail@plt+0x3b50>
   14ac4:	push	{r4, r5, r6, r7, fp, lr}
   14ac8:	add	fp, sp, #16
   14acc:	mov	r6, r2
   14ad0:	mov	r4, r1
   14ad4:	bl	14b60 <__assert_fail@plt+0x3bec>
   14ad8:	cmp	r0, #0
   14adc:	beq	14b0c <__assert_fail@plt+0x3b98>
   14ae0:	mov	r7, r0
   14ae4:	bl	10eb4 <strlen@plt>
   14ae8:	cmp	r0, r6
   14aec:	bcs	14b2c <__assert_fail@plt+0x3bb8>
   14af0:	add	r2, r0, #1
   14af4:	mov	r0, r4
   14af8:	mov	r1, r7
   14afc:	bl	10d94 <memcpy@plt>
   14b00:	mov	r5, #0
   14b04:	mov	r0, r5
   14b08:	pop	{r4, r5, r6, r7, fp, pc}
   14b0c:	mov	r5, #22
   14b10:	cmp	r6, #0
   14b14:	movne	r0, #0
   14b18:	strbne	r0, [r4]
   14b1c:	movne	r0, r5
   14b20:	popne	{r4, r5, r6, r7, fp, pc}
   14b24:	mov	r0, r5
   14b28:	pop	{r4, r5, r6, r7, fp, pc}
   14b2c:	mov	r5, #34	; 0x22
   14b30:	cmp	r6, #0
   14b34:	beq	14b54 <__assert_fail@plt+0x3be0>
   14b38:	sub	r6, r6, #1
   14b3c:	mov	r0, r4
   14b40:	mov	r1, r7
   14b44:	mov	r2, r6
   14b48:	bl	10d94 <memcpy@plt>
   14b4c:	mov	r0, #0
   14b50:	strb	r0, [r4, r6]
   14b54:	mov	r0, r5
   14b58:	pop	{r4, r5, r6, r7, fp, pc}
   14b5c:	b	14b60 <__assert_fail@plt+0x3bec>
   14b60:	mov	r1, #0
   14b64:	b	10f2c <setlocale@plt>
   14b68:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14b6c:	mov	r7, r0
   14b70:	ldr	r6, [pc, #72]	; 14bc0 <__assert_fail@plt+0x3c4c>
   14b74:	ldr	r5, [pc, #72]	; 14bc4 <__assert_fail@plt+0x3c50>
   14b78:	add	r6, pc, r6
   14b7c:	add	r5, pc, r5
   14b80:	sub	r6, r6, r5
   14b84:	mov	r8, r1
   14b88:	mov	r9, r2
   14b8c:	bl	10d20 <calloc@plt-0x20>
   14b90:	asrs	r6, r6, #2
   14b94:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14b98:	mov	r4, #0
   14b9c:	add	r4, r4, #1
   14ba0:	ldr	r3, [r5], #4
   14ba4:	mov	r2, r9
   14ba8:	mov	r1, r8
   14bac:	mov	r0, r7
   14bb0:	blx	r3
   14bb4:	cmp	r6, r4
   14bb8:	bne	14b9c <__assert_fail@plt+0x3c28>
   14bbc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14bc0:	andeq	r1, r1, ip, lsl #7
   14bc4:	andeq	r1, r1, r4, lsl #7
   14bc8:	bx	lr
   14bcc:	ldr	r3, [pc, #12]	; 14be0 <__assert_fail@plt+0x3c6c>
   14bd0:	mov	r1, #0
   14bd4:	add	r3, pc, r3
   14bd8:	ldr	r2, [r3]
   14bdc:	b	10ed8 <__cxa_atexit@plt>
   14be0:	strdeq	r1, [r1], -r8

Disassembly of section .fini:

00014be4 <.fini>:
   14be4:	push	{r3, lr}
   14be8:	pop	{r3, pc}
