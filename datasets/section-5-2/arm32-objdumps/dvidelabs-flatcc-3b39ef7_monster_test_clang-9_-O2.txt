
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test/monster_test:     file format elf32-littlearm


Disassembly of section .init:

00012de8 <.init>:
   12de8:	push	{r3, lr}
   12dec:	bl	12f4c <_start@@Base+0x3c>
   12df0:	pop	{r3, pc}

Disassembly of section .plt:

00012df4 <strcmp@plt-0x14>:
   12df4:	push	{lr}		; (str lr, [sp, #-4]!)
   12df8:	ldr	lr, [pc, #4]	; 12e04 <strcmp@plt-0x4>
   12dfc:	add	lr, pc, lr
   12e00:	ldr	pc, [lr, #8]!
   12e04:	strdeq	r7, [r2], -ip

00012e08 <strcmp@plt>:
   12e08:	add	ip, pc, #0, 12
   12e0c:	add	ip, ip, #159744	; 0x27000
   12e10:	ldr	pc, [ip, #508]!	; 0x1fc

00012e14 <printf@plt>:
   12e14:	add	ip, pc, #0, 12
   12e18:	add	ip, ip, #159744	; 0x27000
   12e1c:	ldr	pc, [ip, #500]!	; 0x1f4

00012e20 <free@plt>:
   12e20:	add	ip, pc, #0, 12
   12e24:	add	ip, ip, #159744	; 0x27000
   12e28:	ldr	pc, [ip, #492]!	; 0x1ec

00012e2c <memcpy@plt>:
   12e2c:	add	ip, pc, #0, 12
   12e30:	add	ip, ip, #159744	; 0x27000
   12e34:	ldr	pc, [ip, #484]!	; 0x1e4

00012e38 <realloc@plt>:
   12e38:	add	ip, pc, #0, 12
   12e3c:	add	ip, ip, #159744	; 0x27000
   12e40:	ldr	pc, [ip, #476]!	; 0x1dc

00012e44 <fwrite@plt>:
   12e44:	add	ip, pc, #0, 12
   12e48:	add	ip, ip, #159744	; 0x27000
   12e4c:	ldr	pc, [ip, #468]!	; 0x1d4

00012e50 <gettimeofday@plt>:
   12e50:	add	ip, pc, #0, 12
   12e54:	add	ip, ip, #159744	; 0x27000
   12e58:	ldr	pc, [ip, #460]!	; 0x1cc

00012e5c <puts@plt>:
   12e5c:	add	ip, pc, #0, 12
   12e60:	add	ip, ip, #159744	; 0x27000
   12e64:	ldr	pc, [ip, #452]!	; 0x1c4

00012e68 <malloc@plt>:
   12e68:	add	ip, pc, #0, 12
   12e6c:	add	ip, ip, #159744	; 0x27000
   12e70:	ldr	pc, [ip, #444]!	; 0x1bc

00012e74 <__libc_start_main@plt>:
   12e74:	add	ip, pc, #0, 12
   12e78:	add	ip, ip, #159744	; 0x27000
   12e7c:	ldr	pc, [ip, #436]!	; 0x1b4

00012e80 <__gmon_start__@plt>:
   12e80:	add	ip, pc, #0, 12
   12e84:	add	ip, ip, #159744	; 0x27000
   12e88:	ldr	pc, [ip, #428]!	; 0x1ac

00012e8c <bcmp@plt>:
   12e8c:	add	ip, pc, #0, 12
   12e90:	add	ip, ip, #159744	; 0x27000
   12e94:	ldr	pc, [ip, #420]!	; 0x1a4

00012e98 <strlen@plt>:
   12e98:	add	ip, pc, #0, 12
   12e9c:	add	ip, ip, #159744	; 0x27000
   12ea0:	ldr	pc, [ip, #412]!	; 0x19c

00012ea4 <fprintf@plt>:
   12ea4:	add	ip, pc, #0, 12
   12ea8:	add	ip, ip, #159744	; 0x27000
   12eac:	ldr	pc, [ip, #404]!	; 0x194

00012eb0 <posix_memalign@plt>:
   12eb0:	add	ip, pc, #0, 12
   12eb4:	add	ip, ip, #159744	; 0x27000
   12eb8:	ldr	pc, [ip, #396]!	; 0x18c

00012ebc <memset@plt>:
   12ebc:	add	ip, pc, #0, 12
   12ec0:	add	ip, ip, #159744	; 0x27000
   12ec4:	ldr	pc, [ip, #388]!	; 0x184

00012ec8 <strncpy@plt>:
   12ec8:	add	ip, pc, #0, 12
   12ecc:	add	ip, ip, #159744	; 0x27000
   12ed0:	ldr	pc, [ip, #380]!	; 0x17c

00012ed4 <memchr@plt>:
   12ed4:	add	ip, pc, #0, 12
   12ed8:	add	ip, ip, #159744	; 0x27000
   12edc:	ldr	pc, [ip, #372]!	; 0x174

00012ee0 <fputc@plt>:
   12ee0:	add	ip, pc, #0, 12
   12ee4:	add	ip, ip, #159744	; 0x27000
   12ee8:	ldr	pc, [ip, #364]!	; 0x16c

00012eec <strncmp@plt>:
   12eec:	add	ip, pc, #0, 12
   12ef0:	add	ip, ip, #159744	; 0x27000
   12ef4:	ldr	pc, [ip, #356]!	; 0x164

00012ef8 <abort@plt>:
   12ef8:	add	ip, pc, #0, 12
   12efc:	add	ip, ip, #159744	; 0x27000
   12f00:	ldr	pc, [ip, #348]!	; 0x15c

00012f04 <__assert_fail@plt>:
   12f04:	add	ip, pc, #0, 12
   12f08:	add	ip, ip, #159744	; 0x27000
   12f0c:	ldr	pc, [ip, #340]!	; 0x154

Disassembly of section .text:

00012f10 <_start@@Base>:
   12f10:	mov	fp, #0
   12f14:	mov	lr, #0
   12f18:	pop	{r1}		; (ldr r1, [sp], #4)
   12f1c:	mov	r2, sp
   12f20:	push	{r2}		; (str r2, [sp, #-4]!)
   12f24:	push	{r0}		; (str r0, [sp, #-4]!)
   12f28:	ldr	ip, [pc, #16]	; 12f40 <_start@@Base+0x30>
   12f2c:	push	{ip}		; (str ip, [sp, #-4]!)
   12f30:	ldr	r0, [pc, #12]	; 12f44 <_start@@Base+0x34>
   12f34:	ldr	r3, [pc, #12]	; 12f48 <_start@@Base+0x38>
   12f38:	bl	12e74 <__libc_start_main@plt>
   12f3c:	bl	12ef8 <abort@plt>
   12f40:	strdeq	r4, [r2], -r0
   12f44:	ldrdeq	ip, [r1], -r8
   12f48:	muleq	r2, r0, fp
   12f4c:	ldr	r3, [pc, #20]	; 12f68 <_start@@Base+0x58>
   12f50:	ldr	r2, [pc, #20]	; 12f6c <_start@@Base+0x5c>
   12f54:	add	r3, pc, r3
   12f58:	ldr	r2, [r3, r2]
   12f5c:	cmp	r2, #0
   12f60:	bxeq	lr
   12f64:	b	12e80 <__gmon_start__@plt>
   12f68:	andeq	r7, r2, r4, lsr #1
   12f6c:	andeq	r0, r0, ip, rrx
   12f70:	ldr	r0, [pc, #24]	; 12f90 <_start@@Base+0x80>
   12f74:	ldr	r3, [pc, #24]	; 12f94 <_start@@Base+0x84>
   12f78:	cmp	r3, r0
   12f7c:	bxeq	lr
   12f80:	ldr	r3, [pc, #16]	; 12f98 <_start@@Base+0x88>
   12f84:	cmp	r3, #0
   12f88:	bxeq	lr
   12f8c:	bx	r3
   12f90:	andeq	sl, r3, r0, lsl #1
   12f94:	andeq	sl, r3, r0, lsl #1
   12f98:	andeq	r0, r0, r0
   12f9c:	ldr	r0, [pc, #36]	; 12fc8 <_start@@Base+0xb8>
   12fa0:	ldr	r1, [pc, #36]	; 12fcc <_start@@Base+0xbc>
   12fa4:	sub	r1, r1, r0
   12fa8:	asr	r1, r1, #2
   12fac:	add	r1, r1, r1, lsr #31
   12fb0:	asrs	r1, r1, #1
   12fb4:	bxeq	lr
   12fb8:	ldr	r3, [pc, #16]	; 12fd0 <_start@@Base+0xc0>
   12fbc:	cmp	r3, #0
   12fc0:	bxeq	lr
   12fc4:	bx	r3
   12fc8:	andeq	sl, r3, r0, lsl #1
   12fcc:	andeq	sl, r3, r0, lsl #1
   12fd0:	andeq	r0, r0, r0
   12fd4:	push	{r4, lr}
   12fd8:	ldr	r4, [pc, #24]	; 12ff8 <_start@@Base+0xe8>
   12fdc:	ldrb	r3, [r4]
   12fe0:	cmp	r3, #0
   12fe4:	popne	{r4, pc}
   12fe8:	bl	12f70 <_start@@Base+0x60>
   12fec:	mov	r3, #1
   12ff0:	strb	r3, [r4]
   12ff4:	pop	{r4, pc}
   12ff8:	andeq	sl, r3, r0, lsl #1
   12ffc:	b	12f9c <_start@@Base+0x8c>

00013000 <verify_empty_monster@@Base>:
   13000:	push	{fp, lr}
   13004:	mov	fp, sp
   13008:	cmp	r0, #0
   1300c:	beq	13064 <verify_empty_monster@@Base+0x64>
   13010:	ldr	r1, [r0, #4]
   13014:	movw	r2, #20301	; 0x4f4d
   13018:	movt	r2, #21326	; 0x534e
   1301c:	cmp	r1, r2
   13020:	bne	13064 <verify_empty_monster@@Base+0x64>
   13024:	ldr	r1, [r0]
   13028:	ldr	r2, [r0, r1]!
   1302c:	mov	r1, r0
   13030:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   13034:	cmp	r2, #9
   13038:	bls	13078 <verify_empty_monster@@Base+0x78>
   1303c:	ldrh	r2, [r1, #8]
   13040:	cmp	r2, #0
   13044:	beq	13084 <verify_empty_monster@@Base+0x84>
   13048:	add	r0, r0, r2
   1304c:	ldrh	r0, [r0]
   13050:	cmp	r0, #100	; 0x64
   13054:	bne	130a4 <verify_empty_monster@@Base+0xa4>
   13058:	ldr	r0, [pc, #84]	; 130b4 <verify_empty_monster@@Base+0xb4>
   1305c:	add	r0, pc, r0
   13060:	b	1306c <verify_empty_monster@@Base+0x6c>
   13064:	ldr	r0, [pc, #80]	; 130bc <verify_empty_monster@@Base+0xbc>
   13068:	add	r0, pc, r0
   1306c:	bl	12e5c <puts@plt>
   13070:	mvn	r0, #0
   13074:	pop	{fp, pc}
   13078:	mov	r0, #0
   1307c:	cmp	r2, #6
   13080:	popcc	{fp, pc}
   13084:	ldrh	r0, [r1, #4]
   13088:	cmp	r0, #0
   1308c:	beq	1309c <verify_empty_monster@@Base+0x9c>
   13090:	ldr	r0, [pc, #32]	; 130b8 <verify_empty_monster@@Base+0xb8>
   13094:	add	r0, pc, r0
   13098:	b	1306c <verify_empty_monster@@Base+0x6c>
   1309c:	mov	r0, #0
   130a0:	pop	{fp, pc}
   130a4:	ldr	r0, [pc, #4]	; 130b0 <verify_empty_monster@@Base+0xb0>
   130a8:	add	r0, pc, r0
   130ac:	b	1306c <verify_empty_monster@@Base+0x6c>
   130b0:	andeq	r3, r1, r4, lsl pc
   130b4:	muleq	r1, sp, r9
   130b8:	andeq	r3, r1, r5, ror fp
   130bc:	andeq	r3, r1, r4, asr #22

000130c0 <test_enums@@Base>:
   130c0:	mov	r0, #0
   130c4:	bx	lr

000130c8 <test_type_aliases@@Base>:
   130c8:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   130cc:	add	fp, sp, #24
   130d0:	sub	sp, sp, #16
   130d4:	mov	r4, r0
   130d8:	bl	1e2ac <flatcc_builder_reset@@Base>
   130dc:	mvn	r0, #0
   130e0:	mov	r1, #1
   130e4:	mov	r2, #0
   130e8:	mov	r3, #1
   130ec:	mov	r8, #0
   130f0:	str	r1, [sp]
   130f4:	str	r0, [sp, #4]
   130f8:	mov	r0, r4
   130fc:	mov	r1, #0
   13100:	bl	21070 <flatcc_builder_create_vector@@Base>
   13104:	mov	r6, r0
   13108:	mvn	r0, #-536870912	; 0xe0000000
   1310c:	mov	r1, #8
   13110:	mov	r2, #0
   13114:	mov	r3, #8
   13118:	str	r1, [sp]
   1311c:	str	r0, [sp, #4]
   13120:	mov	r0, r4
   13124:	mov	r1, #0
   13128:	bl	21070 <flatcc_builder_create_vector@@Base>
   1312c:	ldr	r1, [pc, #1200]	; 135e4 <test_type_aliases@@Base+0x51c>
   13130:	mov	r5, r0
   13134:	mov	r0, r4
   13138:	mov	r2, #0
   1313c:	mov	r3, #0
   13140:	add	r1, pc, r1
   13144:	bl	1eea8 <flatcc_builder_start_buffer@@Base>
   13148:	cmp	r0, #0
   1314c:	bne	13170 <test_type_aliases@@Base+0xa8>
   13150:	mov	r0, r4
   13154:	mov	r1, #12
   13158:	bl	20484 <flatcc_builder_start_table@@Base>
   1315c:	cmp	r0, #0
   13160:	beq	132dc <test_type_aliases@@Base+0x214>
   13164:	mov	r0, r4
   13168:	mov	r1, r8
   1316c:	bl	1f0a8 <flatcc_builder_end_buffer@@Base>
   13170:	add	r1, sp, #12
   13174:	mov	r0, r4
   13178:	bl	22c54 <flatcc_builder_finalize_aligned_buffer@@Base>
   1317c:	ldr	r1, [sp, #12]
   13180:	ldr	r2, [pc, #1124]	; 135ec <test_type_aliases@@Base+0x524>
   13184:	ldr	r3, [pc, #1124]	; 135f0 <test_type_aliases@@Base+0x528>
   13188:	mov	r4, r0
   1318c:	add	r2, pc, r2
   13190:	add	r3, pc, r3
   13194:	bl	23f6c <flatcc_verify_table_as_root@@Base>
   13198:	cmp	r0, #0
   1319c:	beq	131e0 <test_type_aliases@@Base+0x118>
   131a0:	mov	r5, r0
   131a4:	ldr	r0, [pc, #1096]	; 135f4 <test_type_aliases@@Base+0x52c>
   131a8:	mov	r1, r4
   131ac:	ldr	r0, [pc, r0]
   131b0:	ldr	r2, [sp, #12]
   131b4:	ldr	r3, [r0]
   131b8:	ldr	r0, [pc, #1080]	; 135f8 <test_type_aliases@@Base+0x530>
   131bc:	add	r0, pc, r0
   131c0:	bl	1361c <test_type_aliases@@Base+0x554>
   131c4:	mov	r0, r5
   131c8:	bl	23328 <flatcc_verify_error_string@@Base>
   131cc:	mov	r1, r0
   131d0:	ldr	r0, [pc, #1060]	; 135fc <test_type_aliases@@Base+0x534>
   131d4:	add	r0, pc, r0
   131d8:	bl	12e14 <printf@plt>
   131dc:	b	132c8 <test_type_aliases@@Base+0x200>
   131e0:	cmp	r4, #0
   131e4:	beq	13598 <test_type_aliases@@Base+0x4d0>
   131e8:	ldr	r0, [r4, #4]
   131ec:	movw	r1, #20301	; 0x4f4d
   131f0:	movt	r1, #21326	; 0x534e
   131f4:	cmp	r0, r1
   131f8:	bne	13598 <test_type_aliases@@Base+0x4d0>
   131fc:	ldr	r1, [r4]
   13200:	mov	r6, r4
   13204:	ldr	r2, [r6, r1]!
   13208:	mov	r1, r6
   1320c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   13210:	cmp	r2, #5
   13214:	bls	132b8 <test_type_aliases@@Base+0x1f0>
   13218:	ldrh	r3, [r1, #4]
   1321c:	cmp	r3, #0
   13220:	beq	132b8 <test_type_aliases@@Base+0x1f0>
   13224:	cmp	r2, #10
   13228:	bcc	132b8 <test_type_aliases@@Base+0x1f0>
   1322c:	ldrb	r3, [r6, r3]
   13230:	cmp	r3, #128	; 0x80
   13234:	bne	132b8 <test_type_aliases@@Base+0x1f0>
   13238:	ldrh	r3, [r1, #8]
   1323c:	cmp	r3, #0
   13240:	beq	132b8 <test_type_aliases@@Base+0x1f0>
   13244:	cmp	r2, #14
   13248:	bcc	132b8 <test_type_aliases@@Base+0x1f0>
   1324c:	add	r3, r6, r3
   13250:	ldrh	r3, [r3]
   13254:	cmp	r3, #32768	; 0x8000
   13258:	bne	132b8 <test_type_aliases@@Base+0x1f0>
   1325c:	ldrh	r3, [r1, #12]
   13260:	cmp	r3, #0
   13264:	beq	132b8 <test_type_aliases@@Base+0x1f0>
   13268:	cmp	r2, #18
   1326c:	bcc	132b8 <test_type_aliases@@Base+0x1f0>
   13270:	ldr	r3, [r6, r3]
   13274:	cmp	r3, #-2147483648	; 0x80000000
   13278:	bne	132b8 <test_type_aliases@@Base+0x1f0>
   1327c:	ldrh	r3, [r1, #16]
   13280:	cmp	r3, #0
   13284:	beq	132b8 <test_type_aliases@@Base+0x1f0>
   13288:	mov	r0, r6
   1328c:	ldr	r3, [r0, r3]!
   13290:	ldr	r0, [r0, #4]
   13294:	eor	r0, r0, #-2147483648	; 0x80000000
   13298:	orrs	r0, r3, r0
   1329c:	bne	132b8 <test_type_aliases@@Base+0x1f0>
   132a0:	ldrh	r3, [r1, #6]
   132a4:	cmp	r3, #0
   132a8:	beq	132b8 <test_type_aliases@@Base+0x1f0>
   132ac:	ldrb	r0, [r6, r3]
   132b0:	cmp	r0, #255	; 0xff
   132b4:	beq	134cc <test_type_aliases@@Base+0x404>
   132b8:	ldr	r0, [pc, #832]	; 13600 <test_type_aliases@@Base+0x538>
   132bc:	add	r0, pc, r0
   132c0:	bl	12e5c <puts@plt>
   132c4:	mvn	r5, #0
   132c8:	mov	r0, r4
   132cc:	bl	22d94 <flatcc_builder_aligned_free@@Base>
   132d0:	mov	r0, r5
   132d4:	sub	sp, fp, #24
   132d8:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   132dc:	mov	r0, r4
   132e0:	mov	r1, #6
   132e4:	mov	r2, #8
   132e8:	mov	r3, #8
   132ec:	bl	21920 <flatcc_builder_table_add@@Base>
   132f0:	cmp	r0, #0
   132f4:	beq	13164 <test_type_aliases@@Base+0x9c>
   132f8:	mov	r9, #-2147483648	; 0x80000000
   132fc:	mov	r8, #0
   13300:	mov	r1, #7
   13304:	mov	r2, #8
   13308:	mov	r3, #8
   1330c:	strd	r8, [r0]
   13310:	mov	r0, r4
   13314:	bl	21920 <flatcc_builder_table_add@@Base>
   13318:	cmp	r0, #0
   1331c:	beq	13164 <test_type_aliases@@Base+0x9c>
   13320:	mvn	r1, #0
   13324:	mov	r2, #8
   13328:	mov	r3, #8
   1332c:	str	r1, [r0]
   13330:	str	r1, [r0, #4]
   13334:	mov	r0, r4
   13338:	mov	r1, #9
   1333c:	bl	21920 <flatcc_builder_table_add@@Base>
   13340:	cmp	r0, #0
   13344:	beq	13164 <test_type_aliases@@Base+0x9c>
   13348:	movw	r1, #26214	; 0x6666
   1334c:	movw	r2, #26214	; 0x6666
   13350:	mov	r3, #4
   13354:	movt	r2, #26214	; 0x6666
   13358:	movt	r1, #16386	; 0x4002
   1335c:	str	r2, [r0]
   13360:	str	r1, [r0, #4]
   13364:	mov	r0, r4
   13368:	mov	r1, #4
   1336c:	mov	r2, #4
   13370:	bl	21920 <flatcc_builder_table_add@@Base>
   13374:	cmp	r0, #0
   13378:	beq	13164 <test_type_aliases@@Base+0x9c>
   1337c:	mov	r1, #-2147483648	; 0x80000000
   13380:	mov	r2, #4
   13384:	mov	r3, #4
   13388:	str	r1, [r0]
   1338c:	mov	r0, r4
   13390:	mov	r1, #5
   13394:	bl	21920 <flatcc_builder_table_add@@Base>
   13398:	cmp	r0, #0
   1339c:	beq	13164 <test_type_aliases@@Base+0x9c>
   133a0:	mvn	r1, #0
   133a4:	mov	r2, #4
   133a8:	mov	r3, #4
   133ac:	str	r1, [r0]
   133b0:	mov	r0, r4
   133b4:	mov	r1, #8
   133b8:	bl	21920 <flatcc_builder_table_add@@Base>
   133bc:	cmp	r0, #0
   133c0:	beq	13164 <test_type_aliases@@Base+0x9c>
   133c4:	movw	r1, #13107	; 0x3333
   133c8:	cmp	r6, #0
   133cc:	movt	r1, #16403	; 0x4013
   133d0:	str	r1, [r0]
   133d4:	beq	13164 <test_type_aliases@@Base+0x9c>
   133d8:	mov	r0, r4
   133dc:	mov	r1, #10
   133e0:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   133e4:	cmp	r0, #0
   133e8:	strne	r6, [r0]
   133ec:	cmpne	r5, #0
   133f0:	beq	13164 <test_type_aliases@@Base+0x9c>
   133f4:	mov	r0, r4
   133f8:	mov	r1, #11
   133fc:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   13400:	cmp	r0, #0
   13404:	beq	13164 <test_type_aliases@@Base+0x9c>
   13408:	str	r5, [r0]
   1340c:	mov	r0, r4
   13410:	mov	r1, #2
   13414:	mov	r2, #2
   13418:	mov	r3, #2
   1341c:	bl	21920 <flatcc_builder_table_add@@Base>
   13420:	cmp	r0, #0
   13424:	beq	13164 <test_type_aliases@@Base+0x9c>
   13428:	mov	r1, #32768	; 0x8000
   1342c:	mov	r2, #2
   13430:	mov	r3, #2
   13434:	strh	r1, [r0]
   13438:	mov	r0, r4
   1343c:	mov	r1, #3
   13440:	bl	21920 <flatcc_builder_table_add@@Base>
   13444:	cmp	r0, #0
   13448:	beq	13164 <test_type_aliases@@Base+0x9c>
   1344c:	mvn	r1, #0
   13450:	mov	r2, #1
   13454:	mov	r3, #1
   13458:	mov	r8, #0
   1345c:	strh	r1, [r0]
   13460:	mov	r0, r4
   13464:	mov	r1, #0
   13468:	bl	21920 <flatcc_builder_table_add@@Base>
   1346c:	cmp	r0, #0
   13470:	beq	13164 <test_type_aliases@@Base+0x9c>
   13474:	mov	r1, #128	; 0x80
   13478:	mov	r2, #1
   1347c:	mov	r3, #1
   13480:	strb	r1, [r0]
   13484:	mov	r0, r4
   13488:	mov	r1, #1
   1348c:	bl	21920 <flatcc_builder_table_add@@Base>
   13490:	cmp	r0, #0
   13494:	beq	13164 <test_type_aliases@@Base+0x9c>
   13498:	mov	r1, #255	; 0xff
   1349c:	mov	r2, #0
   134a0:	strb	r1, [r0]
   134a4:	mov	r0, r4
   134a8:	ldr	r1, [pc, #312]	; 135e8 <test_type_aliases@@Base+0x520>
   134ac:	add	r1, pc, r1
   134b0:	bl	20e20 <flatcc_builder_check_required@@Base>
   134b4:	cmp	r0, #0
   134b8:	beq	135b8 <test_type_aliases@@Base+0x4f0>
   134bc:	mov	r0, r4
   134c0:	bl	20eac <flatcc_builder_end_table@@Base>
   134c4:	mov	r8, r0
   134c8:	b	13164 <test_type_aliases@@Base+0x9c>
   134cc:	ldrh	r3, [r1, #10]
   134d0:	cmp	r3, #0
   134d4:	beq	132b8 <test_type_aliases@@Base+0x1f0>
   134d8:	add	r0, r6, r3
   134dc:	movw	r3, #65535	; 0xffff
   134e0:	ldrh	r0, [r0]
   134e4:	cmp	r0, r3
   134e8:	bne	132b8 <test_type_aliases@@Base+0x1f0>
   134ec:	ldrh	r3, [r1, #14]
   134f0:	cmp	r3, #0
   134f4:	beq	132b8 <test_type_aliases@@Base+0x1f0>
   134f8:	cmp	r2, #20
   134fc:	bcc	132b8 <test_type_aliases@@Base+0x1f0>
   13500:	ldr	r0, [r6, r3]
   13504:	cmn	r0, #1
   13508:	bne	132b8 <test_type_aliases@@Base+0x1f0>
   1350c:	ldrh	r3, [r1, #18]
   13510:	cmp	r3, #0
   13514:	beq	132b8 <test_type_aliases@@Base+0x1f0>
   13518:	cmp	r2, #22
   1351c:	bcc	132b8 <test_type_aliases@@Base+0x1f0>
   13520:	mov	r0, r6
   13524:	mvn	r5, #0
   13528:	ldr	r3, [r0, r3]!
   1352c:	ldr	r0, [r0, #4]
   13530:	eor	r3, r3, r5
   13534:	eor	r0, r0, r5
   13538:	orrs	r0, r3, r0
   1353c:	bne	132b8 <test_type_aliases@@Base+0x1f0>
   13540:	ldrh	r3, [r1, #20]
   13544:	cmp	r3, #0
   13548:	beq	132b8 <test_type_aliases@@Base+0x1f0>
   1354c:	cmp	r2, #24
   13550:	bcc	132b8 <test_type_aliases@@Base+0x1f0>
   13554:	add	r0, r6, r3
   13558:	vldr	s2, [pc, #128]	; 135e0 <test_type_aliases@@Base+0x518>
   1355c:	vldr	s0, [r0]
   13560:	vcmp.f32	s0, s2
   13564:	vmrs	APSR_nzcv, fpscr
   13568:	bne	132b8 <test_type_aliases@@Base+0x1f0>
   1356c:	ldrh	r1, [r1, #22]
   13570:	cmp	r1, #0
   13574:	beq	132b8 <test_type_aliases@@Base+0x1f0>
   13578:	add	r0, r6, r1
   1357c:	vldr	d16, [pc, #84]	; 135d8 <test_type_aliases@@Base+0x510>
   13580:	vldr	d17, [r0]
   13584:	vcmp.f64	d17, d16
   13588:	vmrs	APSR_nzcv, fpscr
   1358c:	bne	132b8 <test_type_aliases@@Base+0x1f0>
   13590:	mov	r5, #0
   13594:	b	132c8 <test_type_aliases@@Base+0x200>
   13598:	ldr	r0, [pc, #112]	; 13610 <test_type_aliases@@Base+0x548>
   1359c:	ldr	r1, [pc, #112]	; 13614 <test_type_aliases@@Base+0x54c>
   135a0:	ldr	r3, [pc, #112]	; 13618 <test_type_aliases@@Base+0x550>
   135a4:	movw	r2, #749	; 0x2ed
   135a8:	add	r0, pc, r0
   135ac:	add	r1, pc, r1
   135b0:	add	r3, pc, r3
   135b4:	bl	12f04 <__assert_fail@plt>
   135b8:	ldr	r0, [pc, #68]	; 13604 <test_type_aliases@@Base+0x53c>
   135bc:	ldr	r1, [pc, #68]	; 13608 <test_type_aliases@@Base+0x540>
   135c0:	ldr	r3, [pc, #68]	; 1360c <test_type_aliases@@Base+0x544>
   135c4:	mov	r2, #237	; 0xed
   135c8:	add	r0, pc, r0
   135cc:	add	r1, pc, r1
   135d0:	add	r3, pc, r3
   135d4:	bl	12f04 <__assert_fail@plt>
   135d8:	strbtvs	r6, [r6], -r6, ror #12
   135dc:	andmi	r6, r2, r6, ror #12
   135e0:	andsmi	r3, r3, r3, lsr r3
   135e4:			; <UNDEFINED> instruction: 0x00011abc
   135e8:	andeq	r4, r1, r6, asr #20
   135ec:	andeq	r1, r1, r0, ror sl
   135f0:	andeq	r9, r0, r8, ror #31
   135f4:			; <UNDEFINED> instruction: 0x00026eb4
   135f8:	andeq	r1, r1, r5, asr #20
   135fc:	andeq	r1, r1, r0, asr #20
   13600:	andeq	r3, r1, sl, asr r7
   13604:	andeq	r2, r1, r2, ror #7
   13608:	andeq	r2, r1, ip, lsl #9
   1360c:	andeq	r2, r1, r2, lsl #10
   13610:	andeq	r2, r1, sl, lsl r3
   13614:	andeq	r2, r1, ip, lsr r3
   13618:	muleq	r1, r8, r5
   1361c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13620:	add	fp, sp, #28
   13624:	sub	sp, sp, #20
   13628:	mov	r4, r3
   1362c:	mov	r5, r2
   13630:	mov	r6, r1
   13634:	cmp	r0, #0
   13638:	beq	13650 <test_type_aliases@@Base+0x588>
   1363c:	ldr	r1, [pc, #280]	; 1375c <test_type_aliases@@Base+0x694>
   13640:	mov	r2, r0
   13644:	mov	r0, r4
   13648:	add	r1, pc, r1
   1364c:	bl	12ea4 <fprintf@plt>
   13650:	cmp	r5, #0
   13654:	beq	13740 <test_type_aliases@@Base+0x678>
   13658:	ldr	sl, [pc, #256]	; 13760 <test_type_aliases@@Base+0x698>
   1365c:	add	r7, sp, #3
   13660:	mov	r8, #0
   13664:	add	sl, pc, sl
   13668:	ands	r9, r8, #15
   1366c:	bne	136d0 <test_type_aliases@@Base+0x608>
   13670:	b	136e8 <test_type_aliases@@Base+0x620>
   13674:	ldr	r1, [pc, #236]	; 13768 <test_type_aliases@@Base+0x6a0>
   13678:	mov	r0, r4
   1367c:	mov	r2, r8
   13680:	add	r1, pc, r1
   13684:	bl	12ea4 <fprintf@plt>
   13688:	ldrb	r2, [r6, r8]
   1368c:	mov	r0, r4
   13690:	mov	r1, sl
   13694:	bl	12ea4 <fprintf@plt>
   13698:	ldrb	r0, [r6, r8]
   1369c:	add	r8, r8, #1
   136a0:	sub	r1, r0, #32
   136a4:	uxtb	r1, r1
   136a8:	cmp	r1, #94	; 0x5e
   136ac:	mov	r1, #0
   136b0:	movwhi	r0, #46	; 0x2e
   136b4:	cmp	r5, r8
   136b8:	strb	r0, [r7, r9]
   136bc:	add	r0, r7, r9
   136c0:	strb	r1, [r0, #1]
   136c4:	beq	13708 <test_type_aliases@@Base+0x640>
   136c8:	ands	r9, r8, #15
   136cc:	beq	136e8 <test_type_aliases@@Base+0x620>
   136d0:	tst	r8, #7
   136d4:	bne	13688 <test_type_aliases@@Base+0x5c0>
   136d8:	mov	r0, #32
   136dc:	mov	r1, r4
   136e0:	bl	12ee0 <fputc@plt>
   136e4:	b	13688 <test_type_aliases@@Base+0x5c0>
   136e8:	cmp	r8, #0
   136ec:	beq	13674 <test_type_aliases@@Base+0x5ac>
   136f0:	ldr	r1, [pc, #108]	; 13764 <test_type_aliases@@Base+0x69c>
   136f4:	mov	r0, r4
   136f8:	mov	r2, r7
   136fc:	add	r1, pc, r1
   13700:	bl	12ea4 <fprintf@plt>
   13704:	b	13674 <test_type_aliases@@Base+0x5ac>
   13708:	tst	r5, #15
   1370c:	beq	13740 <test_type_aliases@@Base+0x678>
   13710:	add	r6, r5, #1
   13714:	ldr	r5, [pc, #80]	; 1376c <test_type_aliases@@Base+0x6a4>
   13718:	add	r5, pc, r5
   1371c:	mov	r0, r5
   13720:	mov	r1, #3
   13724:	mov	r2, #1
   13728:	mov	r3, r4
   1372c:	bl	12e44 <fwrite@plt>
   13730:	add	r0, r6, #1
   13734:	tst	r6, #15
   13738:	mov	r6, r0
   1373c:	bne	1371c <test_type_aliases@@Base+0x654>
   13740:	ldr	r1, [pc, #40]	; 13770 <test_type_aliases@@Base+0x6a8>
   13744:	add	r2, sp, #3
   13748:	mov	r0, r4
   1374c:	add	r1, pc, r1
   13750:	bl	12ea4 <fprintf@plt>
   13754:	sub	sp, fp, #28
   13758:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1375c:	andeq	r2, r1, r3, ror #9
   13760:	ldrdeq	r2, [r1], -sl
   13764:	andeq	r2, r1, r4, lsr r4
   13768:			; <UNDEFINED> instruction: 0x000124b6
   1376c:	andeq	r2, r1, ip, lsr #8
   13770:	andeq	r2, r1, r4, ror #7

00013774 <test_empty_monster@@Base>:
   13774:	push	{r4, r5, fp, lr}
   13778:	add	fp, sp, #8
   1377c:	sub	sp, sp, #8
   13780:	mov	r4, r0
   13784:	bl	1e2ac <flatcc_builder_reset@@Base>
   13788:	ldr	r1, [pc, #496]	; 13980 <test_empty_monster@@Base+0x20c>
   1378c:	mov	r0, r4
   13790:	mov	r2, #0
   13794:	mov	r3, #0
   13798:	add	r1, pc, r1
   1379c:	bl	1eea8 <flatcc_builder_start_buffer@@Base>
   137a0:	mov	r0, r4
   137a4:	mov	r1, #36	; 0x24
   137a8:	bl	20484 <flatcc_builder_start_table@@Base>
   137ac:	ldr	r1, [pc, #464]	; 13984 <test_empty_monster@@Base+0x210>
   137b0:	mov	r0, r4
   137b4:	add	r1, pc, r1
   137b8:	bl	227bc <flatcc_builder_create_string_str@@Base>
   137bc:	cmp	r0, #0
   137c0:	beq	137dc <test_empty_monster@@Base+0x68>
   137c4:	mov	r5, r0
   137c8:	mov	r0, r4
   137cc:	mov	r1, #3
   137d0:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   137d4:	cmp	r0, #0
   137d8:	strne	r5, [r0]
   137dc:	ldr	r1, [pc, #420]	; 13988 <test_empty_monster@@Base+0x214>
   137e0:	mov	r0, r4
   137e4:	mov	r2, #1
   137e8:	add	r1, pc, r1
   137ec:	bl	20e20 <flatcc_builder_check_required@@Base>
   137f0:	cmp	r0, #0
   137f4:	beq	13960 <test_empty_monster@@Base+0x1ec>
   137f8:	mov	r0, r4
   137fc:	bl	20eac <flatcc_builder_end_table@@Base>
   13800:	mov	r1, r0
   13804:	mov	r0, r4
   13808:	bl	1f0a8 <flatcc_builder_end_buffer@@Base>
   1380c:	add	r1, sp, #4
   13810:	mov	r0, r4
   13814:	bl	22c54 <flatcc_builder_finalize_aligned_buffer@@Base>
   13818:	mov	r4, r0
   1381c:	ldr	r0, [pc, #360]	; 1398c <test_empty_monster@@Base+0x218>
   13820:	mov	r1, r4
   13824:	ldr	r0, [pc, r0]
   13828:	ldr	r2, [sp, #4]
   1382c:	ldr	r3, [r0]
   13830:	ldr	r0, [pc, #344]	; 13990 <test_empty_monster@@Base+0x21c>
   13834:	add	r0, pc, r0
   13838:	bl	1361c <test_type_aliases@@Base+0x554>
   1383c:	ldr	r0, [pc, #336]	; 13994 <test_empty_monster@@Base+0x220>
   13840:	cmp	r4, #0
   13844:	add	r0, pc, r0
   13848:	beq	138c8 <test_empty_monster@@Base+0x154>
   1384c:	ldr	r1, [r4, #4]
   13850:	movw	r2, #20301	; 0x4f4d
   13854:	movt	r2, #21326	; 0x534e
   13858:	cmp	r1, r2
   1385c:	bne	138c8 <test_empty_monster@@Base+0x154>
   13860:	ldr	r0, [r4]
   13864:	mov	r1, r4
   13868:	ldr	r2, [r1, r0]!
   1386c:	mov	r0, r1
   13870:	ldrh	r2, [r0, -r2]!	; <UNPREDICTABLE>
   13874:	cmp	r2, #10
   13878:	bcc	138ac <test_empty_monster@@Base+0x138>
   1387c:	ldrh	r2, [r0, #8]
   13880:	cmp	r2, #0
   13884:	beq	138b4 <test_empty_monster@@Base+0x140>
   13888:	add	r0, r1, r2
   1388c:	ldrh	r1, [r0]
   13890:	ldr	r2, [pc, #256]	; 13998 <test_empty_monster@@Base+0x224>
   13894:	ldr	r0, [pc, #256]	; 1399c <test_empty_monster@@Base+0x228>
   13898:	add	r2, pc, r2
   1389c:	cmp	r1, #100	; 0x64
   138a0:	add	r0, pc, r0
   138a4:	moveq	r0, r2
   138a8:	b	138c8 <test_empty_monster@@Base+0x154>
   138ac:	cmp	r2, #6
   138b0:	bcc	138e4 <test_empty_monster@@Base+0x170>
   138b4:	ldrh	r0, [r0, #4]
   138b8:	cmp	r0, #0
   138bc:	beq	138e4 <test_empty_monster@@Base+0x170>
   138c0:	ldr	r0, [pc, #216]	; 139a0 <test_empty_monster@@Base+0x22c>
   138c4:	add	r0, pc, r0
   138c8:	bl	12e5c <puts@plt>
   138cc:	mvn	r5, #0
   138d0:	mov	r0, r4
   138d4:	bl	22d94 <flatcc_builder_aligned_free@@Base>
   138d8:	mov	r0, r5
   138dc:	sub	sp, fp, #8
   138e0:	pop	{r4, r5, fp, pc}
   138e4:	ldr	r1, [sp, #4]
   138e8:	ldr	r2, [pc, #180]	; 139a4 <test_empty_monster@@Base+0x230>
   138ec:	ldr	r3, [pc, #180]	; 139a8 <test_empty_monster@@Base+0x234>
   138f0:	mov	r0, r4
   138f4:	add	r2, pc, r2
   138f8:	add	r3, pc, r3
   138fc:	bl	23f6c <flatcc_verify_table_as_root@@Base>
   13900:	cmp	r0, #0
   13904:	beq	13924 <test_empty_monster@@Base+0x1b0>
   13908:	bl	23328 <flatcc_verify_error_string@@Base>
   1390c:	mov	r1, r0
   13910:	ldr	r0, [pc, #148]	; 139ac <test_empty_monster@@Base+0x238>
   13914:	add	r0, pc, r0
   13918:	bl	12e14 <printf@plt>
   1391c:	mvn	r5, #0
   13920:	b	138d8 <test_empty_monster@@Base+0x164>
   13924:	ldr	r0, [sp, #4]
   13928:	ldr	r2, [pc, #128]	; 139b0 <test_empty_monster@@Base+0x23c>
   1392c:	ldr	r3, [pc, #128]	; 139b4 <test_empty_monster@@Base+0x240>
   13930:	sub	r1, r0, #1
   13934:	add	r2, pc, r2
   13938:	add	r3, pc, r3
   1393c:	mov	r0, r4
   13940:	bl	23f6c <flatcc_verify_table_as_root@@Base>
   13944:	mov	r5, #0
   13948:	cmp	r0, #0
   1394c:	bne	138d0 <test_empty_monster@@Base+0x15c>
   13950:	ldr	r0, [pc, #96]	; 139b8 <test_empty_monster@@Base+0x244>
   13954:	add	r0, pc, r0
   13958:	bl	12e5c <puts@plt>
   1395c:	b	1391c <test_empty_monster@@Base+0x1a8>
   13960:	ldr	r0, [pc, #84]	; 139bc <test_empty_monster@@Base+0x248>
   13964:	ldr	r1, [pc, #84]	; 139c0 <test_empty_monster@@Base+0x24c>
   13968:	ldr	r3, [pc, #84]	; 139c4 <test_empty_monster@@Base+0x250>
   1396c:	mov	r2, #235	; 0xeb
   13970:	add	r0, pc, r0
   13974:	add	r1, pc, r1
   13978:	add	r3, pc, r3
   1397c:	bl	12f04 <__assert_fail@plt>
   13980:	andeq	r1, r1, r4, ror #8
   13984:	andeq	r1, r1, ip, lsl #9
   13988:	andeq	r4, r1, ip, lsl #14
   1398c:	andeq	r6, r2, ip, lsr r8
   13990:	andeq	r1, r1, r6, lsl r4
   13994:	andeq	r3, r1, r8, ror #6
   13998:	andeq	r3, r1, r1, ror #2
   1399c:	andeq	r3, r1, ip, lsl r7
   139a0:	andeq	r3, r1, r5, asr #6
   139a4:	andeq	r1, r1, r8, lsl #6
   139a8:	strdeq	r9, [r0], -ip
   139ac:	andeq	r1, r1, sl, asr #6
   139b0:	andeq	r1, r1, r8, asr #5
   139b4:			; <UNDEFINED> instruction: 0x000099bc
   139b8:	strdeq	r3, [r1], -r1
   139bc:	andeq	r2, r1, r1, lsr #4
   139c0:	andeq	r2, r1, r4, ror #1
   139c4:			; <UNDEFINED> instruction: 0x000122bb

000139c8 <test_typed_empty_monster@@Base>:
   139c8:	push	{r4, r5, r6, sl, fp, lr}
   139cc:	add	fp, sp, #16
   139d0:	sub	sp, sp, #8
   139d4:	mov	r4, r0
   139d8:	mov	r0, #0
   139dc:	str	r0, [sp]
   139e0:	mov	r0, r4
   139e4:	bl	1e2ac <flatcc_builder_reset@@Base>
   139e8:	ldr	r1, [pc, #584]	; 13c38 <test_typed_empty_monster@@Base+0x270>
   139ec:	mov	r0, r4
   139f0:	mov	r2, #0
   139f4:	mov	r3, #0
   139f8:	add	r1, pc, r1
   139fc:	bl	1eea8 <flatcc_builder_start_buffer@@Base>
   13a00:	mov	r0, r4
   13a04:	mov	r1, #36	; 0x24
   13a08:	bl	20484 <flatcc_builder_start_table@@Base>
   13a0c:	ldr	r1, [pc, #552]	; 13c3c <test_typed_empty_monster@@Base+0x274>
   13a10:	mov	r0, r4
   13a14:	add	r1, pc, r1
   13a18:	bl	227bc <flatcc_builder_create_string_str@@Base>
   13a1c:	cmp	r0, #0
   13a20:	beq	13a3c <test_typed_empty_monster@@Base+0x74>
   13a24:	mov	r5, r0
   13a28:	mov	r0, r4
   13a2c:	mov	r1, #3
   13a30:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   13a34:	cmp	r0, #0
   13a38:	strne	r5, [r0]
   13a3c:	ldr	r1, [pc, #508]	; 13c40 <test_typed_empty_monster@@Base+0x278>
   13a40:	mov	r0, r4
   13a44:	mov	r2, #1
   13a48:	add	r1, pc, r1
   13a4c:	bl	20e20 <flatcc_builder_check_required@@Base>
   13a50:	cmp	r0, #0
   13a54:	beq	13c18 <test_typed_empty_monster@@Base+0x250>
   13a58:	mov	r0, r4
   13a5c:	bl	20eac <flatcc_builder_end_table@@Base>
   13a60:	mov	r1, r0
   13a64:	mov	r0, r4
   13a68:	bl	1f0a8 <flatcc_builder_end_buffer@@Base>
   13a6c:	add	r1, sp, #4
   13a70:	mov	r0, r4
   13a74:	bl	22c54 <flatcc_builder_finalize_aligned_buffer@@Base>
   13a78:	mov	r4, r0
   13a7c:	ldr	r0, [pc, #448]	; 13c44 <test_typed_empty_monster@@Base+0x27c>
   13a80:	mov	r1, r4
   13a84:	ldr	r0, [pc, r0]
   13a88:	ldr	r2, [sp, #4]
   13a8c:	ldr	r3, [r0]
   13a90:	ldr	r0, [pc, #432]	; 13c48 <test_typed_empty_monster@@Base+0x280>
   13a94:	add	r0, pc, r0
   13a98:	bl	1361c <test_type_aliases@@Base+0x554>
   13a9c:	ldr	r1, [r4, #4]
   13aa0:	movw	r6, #62593	; 0xf481
   13aa4:	movt	r6, #13070	; 0x330e
   13aa8:	cmp	r1, r6
   13aac:	bne	13b20 <test_typed_empty_monster@@Base+0x158>
   13ab0:	ldr	r0, [pc, #408]	; 13c50 <test_typed_empty_monster@@Base+0x288>
   13ab4:	add	r0, pc, r0
   13ab8:	bl	12e5c <puts@plt>
   13abc:	ldr	r1, [sp, #4]
   13ac0:	ldr	r2, [pc, #396]	; 13c54 <test_typed_empty_monster@@Base+0x28c>
   13ac4:	ldr	r3, [pc, #396]	; 13c58 <test_typed_empty_monster@@Base+0x290>
   13ac8:	mov	r0, r4
   13acc:	add	r2, pc, r2
   13ad0:	add	r3, pc, r3
   13ad4:	bl	23f6c <flatcc_verify_table_as_root@@Base>
   13ad8:	cmp	r0, #0
   13adc:	bne	13b04 <test_typed_empty_monster@@Base+0x13c>
   13ae0:	ldr	r1, [sp, #4]
   13ae4:	ldr	r2, [pc, #372]	; 13c60 <test_typed_empty_monster@@Base+0x298>
   13ae8:	ldr	r3, [pc, #372]	; 13c64 <test_typed_empty_monster@@Base+0x29c>
   13aec:	mov	r0, r4
   13af0:	add	r2, pc, r2
   13af4:	add	r3, pc, r3
   13af8:	bl	23f6c <flatcc_verify_table_as_root@@Base>
   13afc:	cmp	r0, #0
   13b00:	beq	13b44 <test_typed_empty_monster@@Base+0x17c>
   13b04:	mov	r5, r0
   13b08:	bl	23328 <flatcc_verify_error_string@@Base>
   13b0c:	mov	r1, r0
   13b10:	ldr	r0, [pc, #324]	; 13c5c <test_typed_empty_monster@@Base+0x294>
   13b14:	add	r0, pc, r0
   13b18:	bl	12e14 <printf@plt>
   13b1c:	b	13b30 <test_typed_empty_monster@@Base+0x168>
   13b20:	ldr	r0, [pc, #292]	; 13c4c <test_typed_empty_monster@@Base+0x284>
   13b24:	add	r0, pc, r0
   13b28:	bl	12e14 <printf@plt>
   13b2c:	mvn	r5, #0
   13b30:	mov	r0, r4
   13b34:	bl	22d94 <flatcc_builder_aligned_free@@Base>
   13b38:	mov	r0, r5
   13b3c:	sub	sp, fp, #16
   13b40:	pop	{r4, r5, r6, sl, fp, pc}
   13b44:	ldr	r1, [sp, #4]
   13b48:	ldr	r3, [pc, #280]	; 13c68 <test_typed_empty_monster@@Base+0x2a0>
   13b4c:	mov	r0, r4
   13b50:	mov	r2, r6
   13b54:	add	r3, pc, r3
   13b58:	bl	240d0 <flatcc_verify_table_as_typed_root@@Base>
   13b5c:	cmp	r0, #0
   13b60:	beq	13b80 <test_typed_empty_monster@@Base+0x1b8>
   13b64:	mov	r5, r0
   13b68:	bl	23328 <flatcc_verify_error_string@@Base>
   13b6c:	mov	r1, r0
   13b70:	ldr	r0, [pc, #244]	; 13c6c <test_typed_empty_monster@@Base+0x2a4>
   13b74:	add	r0, pc, r0
   13b78:	bl	12e14 <printf@plt>
   13b7c:	b	13b30 <test_typed_empty_monster@@Base+0x168>
   13b80:	ldr	r1, [sp, #4]
   13b84:	ldr	r3, [pc, #228]	; 13c70 <test_typed_empty_monster@@Base+0x2a8>
   13b88:	mov	r0, r4
   13b8c:	mov	r2, r6
   13b90:	add	r3, pc, r3
   13b94:	bl	240d0 <flatcc_verify_table_as_typed_root@@Base>
   13b98:	cmp	r0, #0
   13b9c:	beq	13bbc <test_typed_empty_monster@@Base+0x1f4>
   13ba0:	mov	r5, r0
   13ba4:	bl	23328 <flatcc_verify_error_string@@Base>
   13ba8:	mov	r1, r0
   13bac:	ldr	r0, [pc, #192]	; 13c74 <test_typed_empty_monster@@Base+0x2ac>
   13bb0:	add	r0, pc, r0
   13bb4:	bl	12e14 <printf@plt>
   13bb8:	b	13b30 <test_typed_empty_monster@@Base+0x168>
   13bbc:	str	r6, [sp]
   13bc0:	ldr	r1, [sp, #4]
   13bc4:	mov	r2, sp
   13bc8:	mov	r0, r4
   13bcc:	ldr	r3, [pc, #164]	; 13c78 <test_typed_empty_monster@@Base+0x2b0>
   13bd0:	add	r3, pc, r3
   13bd4:	bl	23f6c <flatcc_verify_table_as_root@@Base>
   13bd8:	cmp	r0, #0
   13bdc:	bne	13b04 <test_typed_empty_monster@@Base+0x13c>
   13be0:	ldr	r1, [sp, #4]
   13be4:	ldr	r2, [pc, #144]	; 13c7c <test_typed_empty_monster@@Base+0x2b4>
   13be8:	ldr	r3, [pc, #144]	; 13c80 <test_typed_empty_monster@@Base+0x2b8>
   13bec:	mov	r0, r4
   13bf0:	add	r2, pc, r2
   13bf4:	add	r3, pc, r3
   13bf8:	bl	23f6c <flatcc_verify_table_as_root@@Base>
   13bfc:	mov	r5, #0
   13c00:	cmp	r0, #0
   13c04:	bne	13b30 <test_typed_empty_monster@@Base+0x168>
   13c08:	ldr	r0, [pc, #116]	; 13c84 <test_typed_empty_monster@@Base+0x2bc>
   13c0c:	add	r0, pc, r0
   13c10:	bl	12e5c <puts@plt>
   13c14:	b	13b30 <test_typed_empty_monster@@Base+0x168>
   13c18:	ldr	r0, [pc, #104]	; 13c88 <test_typed_empty_monster@@Base+0x2c0>
   13c1c:	ldr	r1, [pc, #104]	; 13c8c <test_typed_empty_monster@@Base+0x2c4>
   13c20:	ldr	r3, [pc, #104]	; 13c90 <test_typed_empty_monster@@Base+0x2c8>
   13c24:	mov	r2, #235	; 0xeb
   13c28:	add	r0, pc, r0
   13c2c:	add	r1, pc, r1
   13c30:	add	r3, pc, r3
   13c34:	bl	12f04 <__assert_fail@plt>
   13c38:	andeq	r1, r1, lr, lsl #5
   13c3c:	andeq	r1, r1, ip, lsr #4
   13c40:	andeq	r4, r1, ip, lsr #9
   13c44:	ldrdeq	r6, [r2], -ip
   13c48:	strdeq	r1, [r1], -r7
   13c4c:	andeq	r1, r1, r1, lsl #3
   13c50:	strdeq	r3, [r1], -r8
   13c54:			; <UNDEFINED> instruction: 0x000111ba
   13c58:	andeq	r9, r0, r4, lsr #16
   13c5c:	andeq	r1, r1, r3, asr #3
   13c60:	muleq	r1, r6, r1
   13c64:	andeq	r9, r0, r0, lsl #16
   13c68:	andeq	r9, r0, r0, lsr #15
   13c6c:	muleq	r1, r1, r1
   13c70:	andeq	r9, r0, r4, ror #14
   13c74:	andeq	r1, r1, ip, lsl #3
   13c78:	andeq	r9, r0, r4, lsr #14
   13c7c:	andeq	r1, r1, ip
   13c80:	andeq	r9, r0, r0, lsl #14
   13c84:	andeq	r2, r1, r6, ror #28
   13c88:	andeq	r1, r1, r9, ror #30
   13c8c:	andeq	r1, r1, ip, lsr #28
   13c90:	andeq	r2, r1, r3

00013c94 <verify_table_with_emptystruct@@Base>:
   13c94:	push	{fp, lr}
   13c98:	mov	fp, sp
   13c9c:	mov	r1, r0
   13ca0:	ldr	r0, [pc, #96]	; 13d08 <verify_table_with_emptystruct@@Base+0x74>
   13ca4:	cmp	r1, #0
   13ca8:	add	r0, pc, r0
   13cac:	beq	13cf8 <verify_table_with_emptystruct@@Base+0x64>
   13cb0:	ldr	r2, [r1, #4]
   13cb4:	movw	r3, #20301	; 0x4f4d
   13cb8:	movt	r3, #21326	; 0x534e
   13cbc:	cmp	r2, r3
   13cc0:	bne	13cf8 <verify_table_with_emptystruct@@Base+0x64>
   13cc4:	ldr	r0, [r1]
   13cc8:	ldr	r0, [r1, r0]!
   13ccc:	ldrh	r2, [r1, -r0]!
   13cd0:	ldr	r0, [pc, #52]	; 13d0c <verify_table_with_emptystruct@@Base+0x78>
   13cd4:	add	r0, pc, r0
   13cd8:	cmp	r2, #6
   13cdc:	bcc	13cf8 <verify_table_with_emptystruct@@Base+0x64>
   13ce0:	ldrh	r2, [r1, #4]
   13ce4:	mov	r1, #0
   13ce8:	cmp	r2, #0
   13cec:	beq	13cf8 <verify_table_with_emptystruct@@Base+0x64>
   13cf0:	mov	r0, r1
   13cf4:	pop	{fp, pc}
   13cf8:	bl	12e5c <puts@plt>
   13cfc:	mvn	r1, #0
   13d00:	mov	r0, r1
   13d04:	pop	{fp, pc}
   13d08:	andeq	r2, r1, r3, lsl lr
   13d0c:	andeq	r2, r1, ip, lsl #28

00013d10 <test_table_with_emptystruct@@Base>:
   13d10:	push	{r4, r5, fp, lr}
   13d14:	add	fp, sp, #8
   13d18:	sub	sp, sp, #8
   13d1c:	mov	r4, r0
   13d20:	bl	1e2ac <flatcc_builder_reset@@Base>
   13d24:	ldr	r1, [pc, #324]	; 13e70 <test_table_with_emptystruct@@Base+0x160>
   13d28:	mov	r0, r4
   13d2c:	mov	r2, #0
   13d30:	mov	r3, #0
   13d34:	mov	r5, #0
   13d38:	add	r1, pc, r1
   13d3c:	bl	1eea8 <flatcc_builder_start_buffer@@Base>
   13d40:	cmp	r0, #0
   13d44:	bne	13db0 <test_table_with_emptystruct@@Base+0xa0>
   13d48:	mov	r0, r4
   13d4c:	mov	r1, #1
   13d50:	bl	20484 <flatcc_builder_start_table@@Base>
   13d54:	cmp	r0, #0
   13d58:	bne	13da4 <test_table_with_emptystruct@@Base+0x94>
   13d5c:	mov	r0, r4
   13d60:	mov	r1, #0
   13d64:	mov	r2, #0
   13d68:	mov	r3, #1
   13d6c:	mov	r5, #0
   13d70:	bl	21920 <flatcc_builder_table_add@@Base>
   13d74:	cmp	r0, #0
   13d78:	beq	13da4 <test_table_with_emptystruct@@Base+0x94>
   13d7c:	ldr	r1, [pc, #240]	; 13e74 <test_table_with_emptystruct@@Base+0x164>
   13d80:	mov	r0, r4
   13d84:	mov	r2, #0
   13d88:	add	r1, pc, r1
   13d8c:	bl	20e20 <flatcc_builder_check_required@@Base>
   13d90:	cmp	r0, #0
   13d94:	beq	13e50 <test_table_with_emptystruct@@Base+0x140>
   13d98:	mov	r0, r4
   13d9c:	bl	20eac <flatcc_builder_end_table@@Base>
   13da0:	mov	r5, r0
   13da4:	mov	r0, r4
   13da8:	mov	r1, r5
   13dac:	bl	1f0a8 <flatcc_builder_end_buffer@@Base>
   13db0:	add	r1, sp, #4
   13db4:	mov	r0, r4
   13db8:	bl	22c54 <flatcc_builder_finalize_aligned_buffer@@Base>
   13dbc:	mov	r4, r0
   13dc0:	ldr	r0, [pc, #176]	; 13e78 <test_table_with_emptystruct@@Base+0x168>
   13dc4:	mov	r1, r4
   13dc8:	ldr	r0, [pc, r0]
   13dcc:	ldr	r2, [sp, #4]
   13dd0:	ldr	r3, [r0]
   13dd4:	ldr	r0, [pc, #160]	; 13e7c <test_table_with_emptystruct@@Base+0x16c>
   13dd8:	add	r0, pc, r0
   13ddc:	bl	1361c <test_type_aliases@@Base+0x554>
   13de0:	ldr	r0, [pc, #152]	; 13e80 <test_table_with_emptystruct@@Base+0x170>
   13de4:	cmp	r4, #0
   13de8:	add	r0, pc, r0
   13dec:	beq	13e34 <test_table_with_emptystruct@@Base+0x124>
   13df0:	ldr	r1, [r4, #4]
   13df4:	movw	r2, #20301	; 0x4f4d
   13df8:	movt	r2, #21326	; 0x534e
   13dfc:	cmp	r1, r2
   13e00:	bne	13e34 <test_table_with_emptystruct@@Base+0x124>
   13e04:	ldr	r0, [r4]
   13e08:	mov	r1, r4
   13e0c:	ldr	r0, [r1, r0]!
   13e10:	ldrh	r2, [r1, -r0]!
   13e14:	ldr	r0, [pc, #104]	; 13e84 <test_table_with_emptystruct@@Base+0x174>
   13e18:	add	r0, pc, r0
   13e1c:	cmp	r2, #6
   13e20:	bcc	13e34 <test_table_with_emptystruct@@Base+0x124>
   13e24:	ldrh	r1, [r1, #4]
   13e28:	mov	r5, #0
   13e2c:	cmp	r1, #0
   13e30:	bne	13e3c <test_table_with_emptystruct@@Base+0x12c>
   13e34:	bl	12e5c <puts@plt>
   13e38:	mvn	r5, #0
   13e3c:	mov	r0, r4
   13e40:	bl	22d94 <flatcc_builder_aligned_free@@Base>
   13e44:	mov	r0, r5
   13e48:	sub	sp, fp, #8
   13e4c:	pop	{r4, r5, fp, pc}
   13e50:	ldr	r0, [pc, #48]	; 13e88 <test_table_with_emptystruct@@Base+0x178>
   13e54:	ldr	r1, [pc, #48]	; 13e8c <test_table_with_emptystruct@@Base+0x17c>
   13e58:	ldr	r3, [pc, #48]	; 13e90 <test_table_with_emptystruct@@Base+0x180>
   13e5c:	mov	r2, #215	; 0xd7
   13e60:	add	r0, pc, r0
   13e64:	add	r1, pc, r1
   13e68:	add	r3, pc, r3
   13e6c:	bl	12f04 <__assert_fail@plt>
   13e70:	andeq	r0, r1, r4, asr #29
   13e74:	andeq	r4, r1, r0, ror r1
   13e78:	muleq	r2, r8, r2
   13e7c:	andeq	r0, r1, sl, lsr #31
   13e80:	ldrdeq	r2, [r1], -r3
   13e84:	andeq	r2, r1, r8, asr #25
   13e88:	andeq	r1, r1, r4, lsr #28
   13e8c:	strdeq	r1, [r1], -r4
   13e90:	ldrdeq	r1, [r1], -r9

00013e94 <test_typed_table_with_emptystruct@@Base>:
   13e94:	push	{r4, r5, fp, lr}
   13e98:	add	fp, sp, #8
   13e9c:	sub	sp, sp, #8
   13ea0:	mov	r4, r0
   13ea4:	bl	1e2ac <flatcc_builder_reset@@Base>
   13ea8:	ldr	r1, [pc, #420]	; 14054 <test_typed_table_with_emptystruct@@Base+0x1c0>
   13eac:	mov	r0, r4
   13eb0:	mov	r2, #0
   13eb4:	mov	r3, #0
   13eb8:	mov	r5, #0
   13ebc:	add	r1, pc, r1
   13ec0:	bl	1eea8 <flatcc_builder_start_buffer@@Base>
   13ec4:	cmp	r0, #0
   13ec8:	bne	13f34 <test_typed_table_with_emptystruct@@Base+0xa0>
   13ecc:	mov	r0, r4
   13ed0:	mov	r1, #1
   13ed4:	bl	20484 <flatcc_builder_start_table@@Base>
   13ed8:	cmp	r0, #0
   13edc:	bne	13f28 <test_typed_table_with_emptystruct@@Base+0x94>
   13ee0:	mov	r0, r4
   13ee4:	mov	r1, #0
   13ee8:	mov	r2, #0
   13eec:	mov	r3, #1
   13ef0:	mov	r5, #0
   13ef4:	bl	21920 <flatcc_builder_table_add@@Base>
   13ef8:	cmp	r0, #0
   13efc:	beq	13f28 <test_typed_table_with_emptystruct@@Base+0x94>
   13f00:	ldr	r1, [pc, #336]	; 14058 <test_typed_table_with_emptystruct@@Base+0x1c4>
   13f04:	mov	r0, r4
   13f08:	mov	r2, #0
   13f0c:	add	r1, pc, r1
   13f10:	bl	20e20 <flatcc_builder_check_required@@Base>
   13f14:	cmp	r0, #0
   13f18:	beq	14034 <test_typed_table_with_emptystruct@@Base+0x1a0>
   13f1c:	mov	r0, r4
   13f20:	bl	20eac <flatcc_builder_end_table@@Base>
   13f24:	mov	r5, r0
   13f28:	mov	r0, r4
   13f2c:	mov	r1, r5
   13f30:	bl	1f0a8 <flatcc_builder_end_buffer@@Base>
   13f34:	add	r1, sp, #4
   13f38:	mov	r0, r4
   13f3c:	bl	22ad4 <flatcc_builder_get_direct_buffer@@Base>
   13f40:	mov	r4, r0
   13f44:	ldr	r0, [pc, #272]	; 1405c <test_typed_table_with_emptystruct@@Base+0x1c8>
   13f48:	mov	r1, r4
   13f4c:	ldr	r0, [pc, r0]
   13f50:	ldr	r2, [sp, #4]
   13f54:	ldr	r3, [r0]
   13f58:	ldr	r0, [pc, #256]	; 14060 <test_typed_table_with_emptystruct@@Base+0x1cc>
   13f5c:	add	r0, pc, r0
   13f60:	bl	1361c <test_type_aliases@@Base+0x554>
   13f64:	ldr	r1, [sp, #4]
   13f68:	ldr	r2, [pc, #244]	; 14064 <test_typed_table_with_emptystruct@@Base+0x1d0>
   13f6c:	ldr	r3, [pc, #244]	; 14068 <test_typed_table_with_emptystruct@@Base+0x1d4>
   13f70:	mov	r0, r4
   13f74:	add	r2, pc, r2
   13f78:	add	r3, pc, r3
   13f7c:	bl	23f6c <flatcc_verify_table_as_root@@Base>
   13f80:	cmp	r0, #0
   13f84:	beq	13f94 <test_typed_table_with_emptystruct@@Base+0x100>
   13f88:	ldr	r0, [pc, #220]	; 1406c <test_typed_table_with_emptystruct@@Base+0x1d8>
   13f8c:	add	r0, pc, r0
   13f90:	b	13ff4 <test_typed_table_with_emptystruct@@Base+0x160>
   13f94:	ldr	r1, [sp, #4]
   13f98:	ldr	r2, [pc, #208]	; 14070 <test_typed_table_with_emptystruct@@Base+0x1dc>
   13f9c:	ldr	r3, [pc, #208]	; 14074 <test_typed_table_with_emptystruct@@Base+0x1e0>
   13fa0:	mov	r0, r4
   13fa4:	add	r2, pc, r2
   13fa8:	add	r3, pc, r3
   13fac:	bl	23f6c <flatcc_verify_table_as_root@@Base>
   13fb0:	cmp	r0, #0
   13fb4:	beq	13fc4 <test_typed_table_with_emptystruct@@Base+0x130>
   13fb8:	ldr	r0, [pc, #184]	; 14078 <test_typed_table_with_emptystruct@@Base+0x1e4>
   13fbc:	add	r0, pc, r0
   13fc0:	b	13ff4 <test_typed_table_with_emptystruct@@Base+0x160>
   13fc4:	ldr	r1, [sp, #4]
   13fc8:	ldr	r3, [pc, #172]	; 1407c <test_typed_table_with_emptystruct@@Base+0x1e8>
   13fcc:	movw	r5, #14262	; 0x37b6
   13fd0:	mov	r0, r4
   13fd4:	movt	r5, #45277	; 0xb0dd
   13fd8:	mov	r2, r5
   13fdc:	add	r3, pc, r3
   13fe0:	bl	240d0 <flatcc_verify_table_as_typed_root@@Base>
   13fe4:	cmp	r0, #0
   13fe8:	beq	14004 <test_typed_table_with_emptystruct@@Base+0x170>
   13fec:	ldr	r0, [pc, #140]	; 14080 <test_typed_table_with_emptystruct@@Base+0x1ec>
   13ff0:	add	r0, pc, r0
   13ff4:	bl	12e5c <puts@plt>
   13ff8:	mvn	r0, #0
   13ffc:	sub	sp, fp, #8
   14000:	pop	{r4, r5, fp, pc}
   14004:	cmp	r4, #0
   14008:	beq	14028 <test_typed_table_with_emptystruct@@Base+0x194>
   1400c:	ldr	r1, [r4, #4]
   14010:	mov	r0, #0
   14014:	cmp	r1, r5
   14018:	beq	13ffc <test_typed_table_with_emptystruct@@Base+0x168>
   1401c:	ldr	r0, [pc, #100]	; 14088 <test_typed_table_with_emptystruct@@Base+0x1f4>
   14020:	add	r0, pc, r0
   14024:	b	13ff4 <test_typed_table_with_emptystruct@@Base+0x160>
   14028:	ldr	r0, [pc, #84]	; 14084 <test_typed_table_with_emptystruct@@Base+0x1f0>
   1402c:	add	r0, pc, r0
   14030:	b	13ff4 <test_typed_table_with_emptystruct@@Base+0x160>
   14034:	ldr	r0, [pc, #80]	; 1408c <test_typed_table_with_emptystruct@@Base+0x1f8>
   14038:	ldr	r1, [pc, #80]	; 14090 <test_typed_table_with_emptystruct@@Base+0x1fc>
   1403c:	ldr	r3, [pc, #80]	; 14094 <test_typed_table_with_emptystruct@@Base+0x200>
   14040:	mov	r2, #215	; 0xd7
   14044:	add	r0, pc, r0
   14048:	add	r1, pc, r1
   1404c:	add	r3, pc, r3
   14050:	bl	12f04 <__assert_fail@plt>
   14054:	ldrdeq	r0, [r1], -lr
   14058:	andeq	r3, r1, ip, ror #31
   1405c:	andeq	r6, r2, r4, lsl r1
   14060:	andeq	r0, r1, r0, lsr #28
   14064:	andeq	r0, r1, r6, lsr #28
   14068:	andeq	r9, r0, r4, lsr sp
   1406c:	ldrdeq	r2, [r1], -r8
   14070:	strdeq	r0, [r1], -r6
   14074:	andeq	r9, r0, r4, lsl #26
   14078:	andeq	r2, r1, ip, lsl #23
   1407c:	ldrdeq	r9, [r0], -r0
   14080:	andeq	r2, r1, r3, lsr fp
   14084:	andeq	r2, r1, pc, asr #21
   14088:	strdeq	r2, [r1], -r3
   1408c:	andeq	r1, r1, r0, asr #24
   14090:	andeq	r1, r1, r0, lsl sl
   14094:	strdeq	r1, [r1], -r5

00014098 <verify_monster@@Base>:
   14098:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1409c:	add	fp, sp, #24
   140a0:	ldr	r1, [r0, #4]
   140a4:	movw	r2, #20301	; 0x4f4d
   140a8:	movt	r2, #21326	; 0x534e
   140ac:	cmp	r1, r2
   140b0:	bne	14134 <verify_monster@@Base+0x9c>
   140b4:	ldr	r1, [r0]
   140b8:	adds	r5, r0, r1
   140bc:	beq	1414c <verify_monster@@Base+0xb4>
   140c0:	ldr	r1, [r5]
   140c4:	mov	r0, r5
   140c8:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   140cc:	cmp	r1, #10
   140d0:	bcc	14140 <verify_monster@@Base+0xa8>
   140d4:	ldrh	r1, [r0, #8]
   140d8:	cmp	r1, #0
   140dc:	beq	14140 <verify_monster@@Base+0xa8>
   140e0:	add	r1, r5, r1
   140e4:	ldrh	r1, [r1]
   140e8:	cmp	r1, #80	; 0x50
   140ec:	bne	14140 <verify_monster@@Base+0xa8>
   140f0:	ldrh	r0, [r0, #4]
   140f4:	cmp	r0, #0
   140f8:	beq	14160 <verify_monster@@Base+0xc8>
   140fc:	add	r4, r5, r0
   14100:	tst	r4, #15
   14104:	beq	14114 <verify_monster@@Base+0x7c>
   14108:	ldr	r0, [pc, #2868]	; 14c44 <verify_monster@@Base+0xbac>
   1410c:	add	r0, pc, r0
   14110:	bl	12e5c <puts@plt>
   14114:	vldr	s0, [pc, #1012]	; 14510 <verify_monster@@Base+0x478>
   14118:	vldr	s2, [r4, #8]
   1411c:	vcmp.f32	s2, s0
   14120:	vmrs	APSR_nzcv, fpscr
   14124:	beq	1416c <verify_monster@@Base+0xd4>
   14128:	ldr	r0, [pc, #2840]	; 14c48 <verify_monster@@Base+0xbb0>
   1412c:	add	r0, pc, r0
   14130:	b	14154 <verify_monster@@Base+0xbc>
   14134:	ldr	r0, [pc, #2808]	; 14c34 <verify_monster@@Base+0xb9c>
   14138:	add	r0, pc, r0
   1413c:	b	14154 <verify_monster@@Base+0xbc>
   14140:	ldr	r0, [pc, #2804]	; 14c3c <verify_monster@@Base+0xba4>
   14144:	add	r0, pc, r0
   14148:	b	14154 <verify_monster@@Base+0xbc>
   1414c:	ldr	r0, [pc, #2788]	; 14c38 <verify_monster@@Base+0xba0>
   14150:	add	r0, pc, r0
   14154:	bl	12e5c <puts@plt>
   14158:	mvn	r0, #0
   1415c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14160:	ldr	r0, [pc, #2776]	; 14c40 <verify_monster@@Base+0xba8>
   14164:	add	r0, pc, r0
   14168:	b	14154 <verify_monster@@Base+0xbc>
   1416c:	vldr	s0, [r4]
   14170:	vmov.f32	s2, #112	; 0x3f800000  1.0
   14174:	vcmp.f32	s0, s2
   14178:	vmrs	APSR_nzcv, fpscr
   1417c:	bne	14194 <verify_monster@@Base+0xfc>
   14180:	vldr	s0, [r4, #4]
   14184:	vmov.f32	s2, #0	; 0x40000000  2.0
   14188:	vcmp.f32	s0, s2
   1418c:	vmrs	APSR_nzcv, fpscr
   14190:	beq	141a0 <verify_monster@@Base+0x108>
   14194:	ldr	r0, [pc, #2736]	; 14c4c <verify_monster@@Base+0xbb4>
   14198:	add	r0, pc, r0
   1419c:	b	14154 <verify_monster@@Base+0xbc>
   141a0:	vldr	d16, [r4, #16]
   141a4:	vcmp.f64	d16, #0.0
   141a8:	vmrs	APSR_nzcv, fpscr
   141ac:	bne	141cc <verify_monster@@Base+0x134>
   141b0:	ldr	r1, [pc, #2712]	; 14c50 <verify_monster@@Base+0xbb8>
   141b4:	add	r0, r4, #26
   141b8:	mov	r2, #4
   141bc:	add	r1, pc, r1
   141c0:	bl	12e8c <bcmp@plt>
   141c4:	cmp	r0, #0
   141c8:	beq	141d8 <verify_monster@@Base+0x140>
   141cc:	ldr	r0, [pc, #2688]	; 14c54 <verify_monster@@Base+0xbbc>
   141d0:	add	r0, pc, r0
   141d4:	b	14154 <verify_monster@@Base+0xbc>
   141d8:	ldr	r0, [r5]
   141dc:	mov	r6, r5
   141e0:	ldrh	r7, [r6, -r0]!
   141e4:	cmp	r7, #12
   141e8:	bcc	14b68 <verify_monster@@Base+0xad0>
   141ec:	ldrh	r0, [r6, #10]
   141f0:	cmp	r0, #0
   141f4:	beq	14b68 <verify_monster@@Base+0xad0>
   141f8:	mov	r1, r5
   141fc:	ldr	r0, [r1, r0]!
   14200:	add	r0, r1, r0
   14204:	ldr	r1, [pc, #2648]	; 14c64 <verify_monster@@Base+0xbcc>
   14208:	add	r4, r0, #4
   1420c:	mov	r0, r4
   14210:	add	r1, pc, r1
   14214:	bl	12e08 <strcmp@plt>
   14218:	cmp	r0, #0
   1421c:	beq	1422c <verify_monster@@Base+0x194>
   14220:	ldr	r0, [pc, #2624]	; 14c68 <verify_monster@@Base+0xbd0>
   14224:	add	r0, pc, r0
   14228:	b	14154 <verify_monster@@Base+0xbc>
   1422c:	ldr	r0, [r4, #-4]
   14230:	cmp	r0, #9
   14234:	bne	1434c <verify_monster@@Base+0x2b4>
   14238:	cmp	r7, #18
   1423c:	bcc	14358 <verify_monster@@Base+0x2c0>
   14240:	ldrh	r0, [r6, #16]
   14244:	cmp	r0, #0
   14248:	beq	14358 <verify_monster@@Base+0x2c0>
   1424c:	ldrb	r0, [r5, r0]
   14250:	cmp	r0, #2
   14254:	bne	14358 <verify_monster@@Base+0x2c0>
   14258:	ldrh	r1, [r6, #14]
   1425c:	cmp	r1, #0
   14260:	beq	14364 <verify_monster@@Base+0x2cc>
   14264:	mov	r0, r5
   14268:	ldr	r1, [r0, r1]!
   1426c:	ldr	r1, [r0, r1]!
   14270:	cmp	r1, #10
   14274:	bne	14364 <verify_monster@@Base+0x2cc>
   14278:	add	r0, r0, #4
   1427c:	mov	r1, #0
   14280:	ldrb	r2, [r0]
   14284:	cmp	r2, #0
   14288:	bne	14370 <verify_monster@@Base+0x2d8>
   1428c:	ldrb	r2, [r0, #1]
   14290:	mov	r1, #1
   14294:	cmp	r2, #1
   14298:	bne	14370 <verify_monster@@Base+0x2d8>
   1429c:	ldrb	r2, [r0, #2]
   142a0:	mov	r1, #2
   142a4:	cmp	r2, #2
   142a8:	bne	14370 <verify_monster@@Base+0x2d8>
   142ac:	ldrb	r2, [r0, #3]
   142b0:	mov	r1, #3
   142b4:	cmp	r2, #3
   142b8:	bne	14370 <verify_monster@@Base+0x2d8>
   142bc:	ldrb	r2, [r0, #4]
   142c0:	mov	r1, #4
   142c4:	cmp	r2, #4
   142c8:	bne	14370 <verify_monster@@Base+0x2d8>
   142cc:	ldrb	r2, [r0, #5]
   142d0:	mov	r1, #5
   142d4:	cmp	r2, #5
   142d8:	bne	14370 <verify_monster@@Base+0x2d8>
   142dc:	ldrb	r2, [r0, #6]
   142e0:	mov	r1, #6
   142e4:	cmp	r2, #6
   142e8:	bne	14370 <verify_monster@@Base+0x2d8>
   142ec:	ldrb	r2, [r0, #7]
   142f0:	mov	r1, #7
   142f4:	cmp	r2, #7
   142f8:	bne	14370 <verify_monster@@Base+0x2d8>
   142fc:	ldrb	r2, [r0, #8]
   14300:	mov	r1, #8
   14304:	cmp	r2, #8
   14308:	bne	14370 <verify_monster@@Base+0x2d8>
   1430c:	ldrb	r0, [r0, #9]
   14310:	mov	r1, #9
   14314:	cmp	r0, #9
   14318:	bne	14370 <verify_monster@@Base+0x2d8>
   1431c:	cmp	r7, #7
   14320:	bls	144f8 <verify_monster@@Base+0x460>
   14324:	ldrh	r0, [r6, #6]
   14328:	cmp	r0, #0
   1432c:	beq	14380 <verify_monster@@Base+0x2e8>
   14330:	add	r0, r5, r0
   14334:	ldrh	r0, [r0]
   14338:	cmp	r0, #150	; 0x96
   1433c:	bne	14504 <verify_monster@@Base+0x46c>
   14340:	ldr	r0, [pc, #2360]	; 14c80 <verify_monster@@Base+0xbe8>
   14344:	add	r0, pc, r0
   14348:	b	14154 <verify_monster@@Base+0xbc>
   1434c:	ldr	r0, [pc, #2328]	; 14c6c <verify_monster@@Base+0xbd4>
   14350:	add	r0, pc, r0
   14354:	b	14154 <verify_monster@@Base+0xbc>
   14358:	ldr	r0, [pc, #2320]	; 14c70 <verify_monster@@Base+0xbd8>
   1435c:	add	r0, pc, r0
   14360:	b	14154 <verify_monster@@Base+0xbc>
   14364:	ldr	r0, [pc, #2312]	; 14c74 <verify_monster@@Base+0xbdc>
   14368:	add	r0, pc, r0
   1436c:	b	14154 <verify_monster@@Base+0xbc>
   14370:	ldr	r0, [pc, #2304]	; 14c78 <verify_monster@@Base+0xbe0>
   14374:	add	r0, pc, r0
   14378:	bl	12e14 <printf@plt>
   1437c:	b	14158 <verify_monster@@Base+0xc0>
   14380:	cmp	r7, #10
   14384:	bcc	144f8 <verify_monster@@Base+0x460>
   14388:	ldrh	r0, [r6, #8]
   1438c:	cmp	r0, #0
   14390:	beq	144f8 <verify_monster@@Base+0x460>
   14394:	ldrh	r0, [r6, #4]
   14398:	cmp	r0, #0
   1439c:	beq	14520 <verify_monster@@Base+0x488>
   143a0:	cmp	r7, #24
   143a4:	bcc	14514 <verify_monster@@Base+0x47c>
   143a8:	ldrh	r1, [r6, #22]
   143ac:	cmp	r1, #0
   143b0:	beq	14514 <verify_monster@@Base+0x47c>
   143b4:	mov	r0, r5
   143b8:	ldr	r1, [r0, r1]!
   143bc:	ldr	r1, [r0, r1]!
   143c0:	cmp	r1, #5
   143c4:	bne	14514 <verify_monster@@Base+0x47c>
   143c8:	add	r0, r0, #4
   143cc:	mov	r1, #0
   143d0:	ldrh	r2, [r0]
   143d4:	cmp	r2, #16
   143d8:	bne	1452c <verify_monster@@Base+0x494>
   143dc:	ldrb	r2, [r0, #2]
   143e0:	mov	r1, #0
   143e4:	cmp	r2, #32
   143e8:	bne	1452c <verify_monster@@Base+0x494>
   143ec:	ldrh	r2, [r0, #4]
   143f0:	mov	r1, #1
   143f4:	cmp	r2, #48	; 0x30
   143f8:	bne	1452c <verify_monster@@Base+0x494>
   143fc:	ldrb	r2, [r0, #6]
   14400:	mov	r1, #1
   14404:	cmp	r2, #64	; 0x40
   14408:	bne	1452c <verify_monster@@Base+0x494>
   1440c:	ldrh	r2, [r0, #8]
   14410:	mov	r1, #2
   14414:	cmp	r2, #80	; 0x50
   14418:	bne	1452c <verify_monster@@Base+0x494>
   1441c:	ldrb	r2, [r0, #10]
   14420:	mov	r1, #2
   14424:	cmp	r2, #96	; 0x60
   14428:	bne	1452c <verify_monster@@Base+0x494>
   1442c:	ldrh	r2, [r0, #12]
   14430:	mov	r1, #3
   14434:	cmp	r2, #112	; 0x70
   14438:	bne	1452c <verify_monster@@Base+0x494>
   1443c:	ldrb	r2, [r0, #14]
   14440:	mov	r1, #3
   14444:	cmp	r2, #128	; 0x80
   14448:	bne	1452c <verify_monster@@Base+0x494>
   1444c:	ldrh	r2, [r0, #16]
   14450:	movw	r3, #401	; 0x191
   14454:	mov	r1, #4
   14458:	cmp	r2, r3
   1445c:	bne	1452c <verify_monster@@Base+0x494>
   14460:	ldrb	r0, [r0, #18]
   14464:	mov	r1, #4
   14468:	cmp	r0, #145	; 0x91
   1446c:	bne	1452c <verify_monster@@Base+0x494>
   14470:	cmp	r7, #27
   14474:	bls	1453c <verify_monster@@Base+0x4a4>
   14478:	ldrh	r1, [r6, #26]
   1447c:	cmp	r1, #0
   14480:	beq	1453c <verify_monster@@Base+0x4a4>
   14484:	mov	r0, r5
   14488:	ldr	r1, [r0, r1]!
   1448c:	ldr	r1, [r0, r1]!
   14490:	cmp	r1, #8
   14494:	bne	1453c <verify_monster@@Base+0x4a4>
   14498:	add	r9, r0, #4
   1449c:	mov	r4, r9
   144a0:	ldr	r0, [r4, #20]!
   144a4:	ldr	r8, [r4, r0]!
   144a8:	mov	r0, r4
   144ac:	ldrh	r1, [r0, -r8]!
   144b0:	cmp	r1, #12
   144b4:	bcc	14b68 <verify_monster@@Base+0xad0>
   144b8:	ldrh	r0, [r0, #10]
   144bc:	cmp	r0, #0
   144c0:	beq	14b68 <verify_monster@@Base+0xad0>
   144c4:	mov	r1, r4
   144c8:	ldr	r0, [r1, r0]!
   144cc:	add	r0, r1, r0
   144d0:	ldr	r1, [pc, #1984]	; 14c98 <verify_monster@@Base+0xc00>
   144d4:	add	r0, r0, #4
   144d8:	add	r1, pc, r1
   144dc:	bl	12e08 <strcmp@plt>
   144e0:	cmp	r0, #0
   144e4:	beq	14548 <verify_monster@@Base+0x4b0>
   144e8:	ldr	r0, [pc, #1964]	; 14c9c <verify_monster@@Base+0xc04>
   144ec:	add	r0, pc, r0
   144f0:	bl	12e14 <printf@plt>
   144f4:	b	14158 <verify_monster@@Base+0xc0>
   144f8:	ldr	r0, [pc, #1924]	; 14c84 <verify_monster@@Base+0xbec>
   144fc:	add	r0, pc, r0
   14500:	b	14154 <verify_monster@@Base+0xbc>
   14504:	ldr	r0, [pc, #1904]	; 14c7c <verify_monster@@Base+0xbe4>
   14508:	add	r0, pc, r0
   1450c:	b	14154 <verify_monster@@Base+0xbc>
   14510:	subgt	ip, ip, sp, asr #25
   14514:	ldr	r0, [pc, #1904]	; 14c8c <verify_monster@@Base+0xbf4>
   14518:	add	r0, pc, r0
   1451c:	b	14154 <verify_monster@@Base+0xbc>
   14520:	ldr	r0, [pc, #1888]	; 14c88 <verify_monster@@Base+0xbf0>
   14524:	add	r0, pc, r0
   14528:	b	14154 <verify_monster@@Base+0xbc>
   1452c:	ldr	r0, [pc, #1884]	; 14c90 <verify_monster@@Base+0xbf8>
   14530:	add	r0, pc, r0
   14534:	bl	12e14 <printf@plt>
   14538:	b	14158 <verify_monster@@Base+0xc0>
   1453c:	ldr	r0, [pc, #1872]	; 14c94 <verify_monster@@Base+0xbfc>
   14540:	add	r0, pc, r0
   14544:	b	14154 <verify_monster@@Base+0xbc>
   14548:	mov	r0, r9
   1454c:	ldr	r1, [r0, #4]!
   14550:	add	r0, r0, r1
   14554:	cmp	r0, r4
   14558:	beq	14568 <verify_monster@@Base+0x4d0>
   1455c:	ldr	r0, [pc, #1852]	; 14ca0 <verify_monster@@Base+0xc08>
   14560:	add	r0, pc, r0
   14564:	b	14154 <verify_monster@@Base+0xbc>
   14568:	rsb	r2, r8, #0
   1456c:	mov	r1, r0
   14570:	ldrh	r2, [r1, r2]!	; <UNPREDICTABLE>
   14574:	cmp	r2, #12
   14578:	bcc	14b68 <verify_monster@@Base+0xad0>
   1457c:	ldrh	r1, [r1, #10]
   14580:	cmp	r1, #0
   14584:	beq	14b68 <verify_monster@@Base+0xad0>
   14588:	ldr	r1, [r0, r1]!
   1458c:	add	r0, r0, r1
   14590:	ldr	r1, [pc, #1804]	; 14ca4 <verify_monster@@Base+0xc0c>
   14594:	add	r8, r0, #4
   14598:	mov	r0, r8
   1459c:	add	r1, pc, r1
   145a0:	bl	12e08 <strcmp@plt>
   145a4:	cmp	r0, #0
   145a8:	beq	145b8 <verify_monster@@Base+0x520>
   145ac:	ldr	r0, [pc, #1780]	; 14ca8 <verify_monster@@Base+0xc10>
   145b0:	add	r0, pc, r0
   145b4:	b	1476c <verify_monster@@Base+0x6d4>
   145b8:	mov	r0, r9
   145bc:	ldr	r1, [r0, #8]!
   145c0:	ldr	r2, [r0, r1]!
   145c4:	mov	r1, r0
   145c8:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   145cc:	cmp	r2, #12
   145d0:	bcc	14b68 <verify_monster@@Base+0xad0>
   145d4:	ldrh	r1, [r1, #10]
   145d8:	cmp	r1, #0
   145dc:	beq	14b68 <verify_monster@@Base+0xad0>
   145e0:	ldr	r1, [r0, r1]!
   145e4:	add	r0, r0, r1
   145e8:	ldr	r1, [pc, #1724]	; 14cac <verify_monster@@Base+0xc14>
   145ec:	add	r8, r0, #4
   145f0:	mov	r0, r8
   145f4:	add	r1, pc, r1
   145f8:	bl	12e08 <strcmp@plt>
   145fc:	cmp	r0, #0
   14600:	beq	14610 <verify_monster@@Base+0x578>
   14604:	ldr	r0, [pc, #1700]	; 14cb0 <verify_monster@@Base+0xc18>
   14608:	add	r0, pc, r0
   1460c:	b	1476c <verify_monster@@Base+0x6d4>
   14610:	ldr	r1, [r9]
   14614:	mov	r0, r9
   14618:	ldr	r2, [r0, r1]!
   1461c:	mov	r1, r0
   14620:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   14624:	cmp	r2, #12
   14628:	bcc	14b68 <verify_monster@@Base+0xad0>
   1462c:	ldrh	r1, [r1, #10]
   14630:	cmp	r1, #0
   14634:	beq	14b68 <verify_monster@@Base+0xad0>
   14638:	ldr	r1, [r0, r1]!
   1463c:	add	r0, r0, r1
   14640:	ldr	r1, [pc, #1644]	; 14cb4 <verify_monster@@Base+0xc1c>
   14644:	add	r8, r0, #4
   14648:	mov	r0, r8
   1464c:	add	r1, pc, r1
   14650:	bl	12e08 <strcmp@plt>
   14654:	cmp	r0, #0
   14658:	beq	14668 <verify_monster@@Base+0x5d0>
   1465c:	ldr	r0, [pc, #1620]	; 14cb8 <verify_monster@@Base+0xc20>
   14660:	add	r0, pc, r0
   14664:	b	1476c <verify_monster@@Base+0x6d4>
   14668:	mov	r0, r9
   1466c:	ldr	r1, [r0, #12]!
   14670:	ldr	r2, [r0, r1]!
   14674:	mov	r1, r0
   14678:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   1467c:	cmp	r2, #12
   14680:	bcc	14b68 <verify_monster@@Base+0xad0>
   14684:	ldrh	r1, [r1, #10]
   14688:	cmp	r1, #0
   1468c:	beq	14b68 <verify_monster@@Base+0xad0>
   14690:	ldr	r1, [r0, r1]!
   14694:	add	r0, r0, r1
   14698:	ldr	r1, [pc, #1564]	; 14cbc <verify_monster@@Base+0xc24>
   1469c:	add	r8, r0, #4
   146a0:	mov	r0, r8
   146a4:	add	r1, pc, r1
   146a8:	bl	12e08 <strcmp@plt>
   146ac:	cmp	r0, #0
   146b0:	beq	146c0 <verify_monster@@Base+0x628>
   146b4:	ldr	r0, [pc, #1540]	; 14cc0 <verify_monster@@Base+0xc28>
   146b8:	add	r0, pc, r0
   146bc:	b	1476c <verify_monster@@Base+0x6d4>
   146c0:	mov	r0, r9
   146c4:	ldr	r1, [r0, #16]!
   146c8:	ldr	r2, [r0, r1]!
   146cc:	mov	r1, r0
   146d0:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   146d4:	cmp	r2, #12
   146d8:	bcc	14b68 <verify_monster@@Base+0xad0>
   146dc:	ldrh	r1, [r1, #10]
   146e0:	cmp	r1, #0
   146e4:	beq	14b68 <verify_monster@@Base+0xad0>
   146e8:	ldr	r1, [r0, r1]!
   146ec:	add	r0, r0, r1
   146f0:	ldr	r1, [pc, #1484]	; 14cc4 <verify_monster@@Base+0xc2c>
   146f4:	add	r8, r0, #4
   146f8:	mov	r0, r8
   146fc:	add	r1, pc, r1
   14700:	bl	12e08 <strcmp@plt>
   14704:	cmp	r0, #0
   14708:	beq	14718 <verify_monster@@Base+0x680>
   1470c:	ldr	r0, [pc, #1460]	; 14cc8 <verify_monster@@Base+0xc30>
   14710:	add	r0, pc, r0
   14714:	b	1476c <verify_monster@@Base+0x6d4>
   14718:	mov	r0, r9
   1471c:	ldr	r1, [r0, #24]!
   14720:	ldr	r2, [r0, r1]!
   14724:	mov	r1, r0
   14728:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   1472c:	cmp	r2, #12
   14730:	bcc	14b68 <verify_monster@@Base+0xad0>
   14734:	ldrh	r1, [r1, #10]
   14738:	cmp	r1, #0
   1473c:	beq	14b68 <verify_monster@@Base+0xad0>
   14740:	ldr	r1, [r0, r1]!
   14744:	add	r0, r0, r1
   14748:	ldr	r1, [pc, #1404]	; 14ccc <verify_monster@@Base+0xc34>
   1474c:	add	r8, r0, #4
   14750:	mov	r0, r8
   14754:	add	r1, pc, r1
   14758:	bl	12e08 <strcmp@plt>
   1475c:	cmp	r0, #0
   14760:	beq	14778 <verify_monster@@Base+0x6e0>
   14764:	ldr	r0, [pc, #1380]	; 14cd0 <verify_monster@@Base+0xc38>
   14768:	add	r0, pc, r0
   1476c:	mov	r1, r8
   14770:	bl	12e14 <printf@plt>
   14774:	b	14158 <verify_monster@@Base+0xc0>
   14778:	ldr	r0, [r9, #28]!
   1477c:	ldr	r1, [r9, r0]!
   14780:	mov	r0, r9
   14784:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   14788:	cmp	r1, #12
   1478c:	bcc	14b68 <verify_monster@@Base+0xad0>
   14790:	ldrh	r0, [r0, #10]
   14794:	cmp	r0, #0
   14798:	beq	14b68 <verify_monster@@Base+0xad0>
   1479c:	ldr	r0, [r9, r0]!
   147a0:	ldr	r1, [pc, #1324]	; 14cd4 <verify_monster@@Base+0xc3c>
   147a4:	add	r0, r9, r0
   147a8:	add	r1, pc, r1
   147ac:	add	r4, r0, #4
   147b0:	mov	r0, r4
   147b4:	bl	12e08 <strcmp@plt>
   147b8:	cmp	r0, #0
   147bc:	beq	147d4 <verify_monster@@Base+0x73c>
   147c0:	ldr	r0, [pc, #1296]	; 14cd8 <verify_monster@@Base+0xc40>
   147c4:	mov	r1, r4
   147c8:	add	r0, pc, r0
   147cc:	bl	12e14 <printf@plt>
   147d0:	b	14158 <verify_monster@@Base+0xc0>
   147d4:	ldrh	r1, [r6, #24]
   147d8:	cmp	r1, #0
   147dc:	beq	14824 <verify_monster@@Base+0x78c>
   147e0:	mov	r0, r5
   147e4:	ldr	r1, [r0, r1]!
   147e8:	ldr	r1, [r0, r1]!
   147ec:	cmp	r1, #3
   147f0:	bne	14824 <verify_monster@@Base+0x78c>
   147f4:	add	r4, r0, #4
   147f8:	ldr	r0, [r4]
   147fc:	ldr	r1, [pc, #1244]	; 14ce0 <verify_monster@@Base+0xc48>
   14800:	add	r0, r4, r0
   14804:	add	r1, pc, r1
   14808:	add	r0, r0, #4
   1480c:	bl	12e08 <strcmp@plt>
   14810:	cmp	r0, #0
   14814:	beq	14830 <verify_monster@@Base+0x798>
   14818:	ldr	r0, [pc, #1220]	; 14ce4 <verify_monster@@Base+0xc4c>
   1481c:	add	r0, pc, r0
   14820:	b	14154 <verify_monster@@Base+0xbc>
   14824:	ldr	r0, [pc, #1200]	; 14cdc <verify_monster@@Base+0xc44>
   14828:	add	r0, pc, r0
   1482c:	b	14154 <verify_monster@@Base+0xbc>
   14830:	mov	r0, r4
   14834:	ldr	r1, [r0, #4]!
   14838:	ldr	r1, [r0, r1]!
   1483c:	cmp	r1, #2
   14840:	bne	1486c <verify_monster@@Base+0x7d4>
   14844:	ldr	r1, [pc, #1184]	; 14cec <verify_monster@@Base+0xc54>
   14848:	add	r0, r0, #4
   1484c:	mov	r2, #2
   14850:	add	r1, pc, r1
   14854:	bl	12e8c <bcmp@plt>
   14858:	cmp	r0, #0
   1485c:	beq	1487c <verify_monster@@Base+0x7e4>
   14860:	ldr	r0, [pc, #1160]	; 14cf0 <verify_monster@@Base+0xc58>
   14864:	add	r0, pc, r0
   14868:	b	14154 <verify_monster@@Base+0xbc>
   1486c:	ldr	r0, [pc, #1140]	; 14ce8 <verify_monster@@Base+0xc50>
   14870:	add	r0, pc, r0
   14874:	bl	12e14 <printf@plt>
   14878:	b	14158 <verify_monster@@Base+0xc0>
   1487c:	ldr	r0, [r4, #8]!
   14880:	ldr	r1, [pc, #1132]	; 14cf4 <verify_monster@@Base+0xc5c>
   14884:	add	r0, r4, r0
   14888:	add	r1, pc, r1
   1488c:	add	r0, r0, #4
   14890:	bl	12e08 <strcmp@plt>
   14894:	cmp	r0, #0
   14898:	beq	148a8 <verify_monster@@Base+0x810>
   1489c:	ldr	r0, [pc, #1108]	; 14cf8 <verify_monster@@Base+0xc60>
   148a0:	add	r0, pc, r0
   148a4:	b	14154 <verify_monster@@Base+0xbc>
   148a8:	cmp	r7, #54	; 0x36
   148ac:	bcc	14924 <verify_monster@@Base+0x88c>
   148b0:	ldrh	r1, [r6, #52]	; 0x34
   148b4:	cmp	r1, #0
   148b8:	beq	14924 <verify_monster@@Base+0x88c>
   148bc:	mov	r0, r5
   148c0:	ldr	r1, [r0, r1]!
   148c4:	ldr	r1, [r0, r1]!
   148c8:	cmp	r1, #4
   148cc:	bne	14930 <verify_monster@@Base+0x898>
   148d0:	add	r0, r0, #4
   148d4:	mov	r1, #0
   148d8:	ldrb	r2, [r0]
   148dc:	cmp	r2, #0
   148e0:	bne	14914 <verify_monster@@Base+0x87c>
   148e4:	ldrb	r2, [r0, #1]
   148e8:	mov	r1, #1
   148ec:	cmp	r2, #1
   148f0:	bne	14914 <verify_monster@@Base+0x87c>
   148f4:	ldrb	r2, [r0, #2]
   148f8:	mov	r1, #2
   148fc:	cmp	r2, #1
   14900:	bne	14914 <verify_monster@@Base+0x87c>
   14904:	ldrb	r0, [r0, #3]
   14908:	mov	r1, #3
   1490c:	cmp	r0, #0
   14910:	beq	1493c <verify_monster@@Base+0x8a4>
   14914:	ldr	r0, [pc, #1000]	; 14d04 <verify_monster@@Base+0xc6c>
   14918:	add	r0, pc, r0
   1491c:	bl	12e14 <printf@plt>
   14920:	b	14158 <verify_monster@@Base+0xc0>
   14924:	ldr	r0, [pc, #976]	; 14cfc <verify_monster@@Base+0xc64>
   14928:	add	r0, pc, r0
   1492c:	b	14154 <verify_monster@@Base+0xbc>
   14930:	ldr	r0, [pc, #968]	; 14d00 <verify_monster@@Base+0xc68>
   14934:	add	r0, pc, r0
   14938:	b	14154 <verify_monster@@Base+0xbc>
   1493c:	ldrh	r0, [r6, #18]
   14940:	cmp	r0, #0
   14944:	beq	149b4 <verify_monster@@Base+0x91c>
   14948:	ldrb	r0, [r5, r0]
   1494c:	cmp	r0, #1
   14950:	bne	149b4 <verify_monster@@Base+0x91c>
   14954:	ldrh	r1, [r6, #20]
   14958:	cmp	r1, #0
   1495c:	beq	14b94 <verify_monster@@Base+0xafc>
   14960:	mov	r0, r5
   14964:	ldr	r1, [r0, r1]!
   14968:	ldr	r2, [r0, r1]!
   1496c:	mov	r1, r0
   14970:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   14974:	cmp	r2, #11
   14978:	bls	14b68 <verify_monster@@Base+0xad0>
   1497c:	ldrh	r1, [r1, #10]
   14980:	cmp	r1, #0
   14984:	beq	14b68 <verify_monster@@Base+0xad0>
   14988:	ldr	r1, [r0, r1]!
   1498c:	add	r0, r0, r1
   14990:	ldr	r1, [pc, #884]	; 14d0c <verify_monster@@Base+0xc74>
   14994:	add	r0, r0, #4
   14998:	add	r1, pc, r1
   1499c:	bl	12e08 <strcmp@plt>
   149a0:	cmp	r0, #0
   149a4:	beq	149c0 <verify_monster@@Base+0x928>
   149a8:	ldr	r0, [pc, #864]	; 14d10 <verify_monster@@Base+0xc78>
   149ac:	add	r0, pc, r0
   149b0:	b	14154 <verify_monster@@Base+0xbc>
   149b4:	ldr	r0, [pc, #844]	; 14d08 <verify_monster@@Base+0xc70>
   149b8:	add	r0, pc, r0
   149bc:	b	14154 <verify_monster@@Base+0xbc>
   149c0:	ldrh	r0, [r6, #28]
   149c4:	cmp	r0, #0
   149c8:	beq	14b94 <verify_monster@@Base+0xafc>
   149cc:	mov	r4, r5
   149d0:	ldr	r0, [r4, r0]!
   149d4:	ldr	r0, [r4, r0]!
   149d8:	mov	r7, r4
   149dc:	ldrh	r8, [r7, -r0]!
   149e0:	cmp	r8, #11
   149e4:	bls	14b68 <verify_monster@@Base+0xad0>
   149e8:	ldrh	r0, [r7, #10]
   149ec:	cmp	r0, #0
   149f0:	beq	14b68 <verify_monster@@Base+0xad0>
   149f4:	mov	r1, r4
   149f8:	ldr	r0, [r1, r0]!
   149fc:	add	r0, r1, r0
   14a00:	ldr	r1, [pc, #780]	; 14d14 <verify_monster@@Base+0xc7c>
   14a04:	add	r0, r0, #4
   14a08:	add	r1, pc, r1
   14a0c:	bl	12e08 <strcmp@plt>
   14a10:	cmp	r0, #0
   14a14:	beq	14a24 <verify_monster@@Base+0x98c>
   14a18:	ldr	r0, [pc, #760]	; 14d18 <verify_monster@@Base+0xc80>
   14a1c:	add	r0, pc, r0
   14a20:	b	14154 <verify_monster@@Base+0xbc>
   14a24:	cmp	r8, #20
   14a28:	bcc	14a50 <verify_monster@@Base+0x9b8>
   14a2c:	ldrh	r0, [r7, #18]
   14a30:	cmp	r0, #0
   14a34:	beq	14a50 <verify_monster@@Base+0x9b8>
   14a38:	ldrb	r0, [r4, r0]
   14a3c:	cmp	r0, #0
   14a40:	beq	14a50 <verify_monster@@Base+0x9b8>
   14a44:	ldr	r0, [pc, #720]	; 14d1c <verify_monster@@Base+0xc84>
   14a48:	add	r0, pc, r0
   14a4c:	b	14154 <verify_monster@@Base+0xbc>
   14a50:	ldrh	r0, [r6, #20]
   14a54:	cmp	r0, #0
   14a58:	beq	14a88 <verify_monster@@Base+0x9f0>
   14a5c:	mov	r1, r5
   14a60:	ldr	r2, [r1, r0]!
   14a64:	add	r1, r1, r2
   14a68:	mov	r2, r5
   14a6c:	ldr	r0, [r2, r0]!
   14a70:	add	r0, r2, r0
   14a74:	cmp	r0, r1
   14a78:	beq	14a88 <verify_monster@@Base+0x9f0>
   14a7c:	ldr	r0, [pc, #668]	; 14d20 <verify_monster@@Base+0xc88>
   14a80:	add	r0, pc, r0
   14a84:	b	14154 <verify_monster@@Base+0xbc>
   14a88:	cmp	r8, #28
   14a8c:	bcc	14aa8 <verify_monster@@Base+0xa10>
   14a90:	ldrh	r0, [r7, #26]
   14a94:	cmp	r0, #0
   14a98:	ldrne	r0, [r4, r0]!
   14a9c:	ldrne	r0, [r4, r0]!
   14aa0:	cmpne	r0, #0
   14aa4:	bne	14ac8 <verify_monster@@Base+0xa30>
   14aa8:	ldr	r0, [pc, #656]	; 14d40 <verify_monster@@Base+0xca8>
   14aac:	ldr	r1, [pc, #656]	; 14d44 <verify_monster@@Base+0xcac>
   14ab0:	ldr	r3, [pc, #656]	; 14d48 <verify_monster@@Base+0xcb0>
   14ab4:	movw	r2, #693	; 0x2b5
   14ab8:	add	r0, pc, r0
   14abc:	add	r1, pc, r1
   14ac0:	add	r3, pc, r3
   14ac4:	bl	12f04 <__assert_fail@plt>
   14ac8:	add	r1, r4, #4
   14acc:	add	r0, r1, r0, lsl #2
   14ad0:	ldr	r1, [r0, #-4]!
   14ad4:	ldr	r2, [r0, r1]!
   14ad8:	mov	r1, r0
   14adc:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   14ae0:	cmp	r2, #20
   14ae4:	bcc	14b88 <verify_monster@@Base+0xaf0>
   14ae8:	ldrh	r3, [r1, #18]
   14aec:	cmp	r3, #0
   14af0:	beq	14b88 <verify_monster@@Base+0xaf0>
   14af4:	ldrb	r3, [r0, r3]
   14af8:	cmp	r3, #1
   14afc:	bne	14b88 <verify_monster@@Base+0xaf0>
   14b00:	cmp	r2, #22
   14b04:	bcc	14b94 <verify_monster@@Base+0xafc>
   14b08:	ldrh	r1, [r1, #20]
   14b0c:	cmp	r1, #0
   14b10:	ldrne	r1, [r0, r1]!
   14b14:	addsne	r0, r0, r1
   14b18:	beq	14b94 <verify_monster@@Base+0xafc>
   14b1c:	ldr	r2, [r0]
   14b20:	mov	r1, r0
   14b24:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   14b28:	cmp	r2, #12
   14b2c:	bcc	14b68 <verify_monster@@Base+0xad0>
   14b30:	ldrh	r1, [r1, #10]
   14b34:	cmp	r1, #0
   14b38:	beq	14b68 <verify_monster@@Base+0xad0>
   14b3c:	ldr	r1, [r0, r1]!
   14b40:	add	r0, r0, r1
   14b44:	ldr	r1, [pc, #480]	; 14d2c <verify_monster@@Base+0xc94>
   14b48:	add	r0, r0, #4
   14b4c:	add	r1, pc, r1
   14b50:	bl	12e08 <strcmp@plt>
   14b54:	cmp	r0, #0
   14b58:	beq	14ba0 <verify_monster@@Base+0xb08>
   14b5c:	ldr	r0, [pc, #460]	; 14d30 <verify_monster@@Base+0xc98>
   14b60:	add	r0, pc, r0
   14b64:	b	14154 <verify_monster@@Base+0xbc>
   14b68:	ldr	r0, [pc, #232]	; 14c58 <verify_monster@@Base+0xbc0>
   14b6c:	add	r0, pc, r0
   14b70:	ldr	r1, [pc, #228]	; 14c5c <verify_monster@@Base+0xbc4>
   14b74:	ldr	r3, [pc, #228]	; 14c60 <verify_monster@@Base+0xbc8>
   14b78:	movw	r2, #699	; 0x2bb
   14b7c:	add	r1, pc, r1
   14b80:	add	r3, pc, r3
   14b84:	bl	12f04 <__assert_fail@plt>
   14b88:	ldr	r0, [pc, #404]	; 14d24 <verify_monster@@Base+0xc8c>
   14b8c:	add	r0, pc, r0
   14b90:	b	14154 <verify_monster@@Base+0xbc>
   14b94:	ldr	r0, [pc, #396]	; 14d28 <verify_monster@@Base+0xc90>
   14b98:	add	r0, pc, r0
   14b9c:	b	14b70 <verify_monster@@Base+0xad8>
   14ba0:	ldrh	r0, [r6, #34]	; 0x22
   14ba4:	cmp	r0, #0
   14ba8:	beq	14bb8 <verify_monster@@Base+0xb20>
   14bac:	ldrb	r0, [r5, r0]
   14bb0:	cmp	r0, #0
   14bb4:	beq	14bc4 <verify_monster@@Base+0xb2c>
   14bb8:	ldr	r0, [pc, #372]	; 14d34 <verify_monster@@Base+0xc9c>
   14bbc:	add	r0, pc, r0
   14bc0:	b	14154 <verify_monster@@Base+0xbc>
   14bc4:	ldrh	r0, [r6, #32]
   14bc8:	cmp	r0, #0
   14bcc:	beq	14c28 <verify_monster@@Base+0xb90>
   14bd0:	ldr	r0, [r5, r0]!
   14bd4:	ldr	r0, [r5, r0]!
   14bd8:	ldrh	r1, [r5, -r0]!
   14bdc:	mov	r0, #0
   14be0:	cmp	r1, #6
   14be4:	bcc	1415c <verify_monster@@Base+0xc4>
   14be8:	ldrh	r2, [r5, #4]
   14bec:	cmp	r2, #0
   14bf0:	bne	14c1c <verify_monster@@Base+0xb84>
   14bf4:	cmp	r1, #8
   14bf8:	bcc	1415c <verify_monster@@Base+0xc4>
   14bfc:	ldrh	r2, [r5, #6]
   14c00:	cmp	r2, #0
   14c04:	bne	14c1c <verify_monster@@Base+0xb84>
   14c08:	cmp	r1, #10
   14c0c:	bcc	1415c <verify_monster@@Base+0xc4>
   14c10:	ldrh	r1, [r5, #8]
   14c14:	cmp	r1, #0
   14c18:	beq	1415c <verify_monster@@Base+0xc4>
   14c1c:	ldr	r0, [pc, #280]	; 14d3c <verify_monster@@Base+0xca4>
   14c20:	add	r0, pc, r0
   14c24:	b	14154 <verify_monster@@Base+0xbc>
   14c28:	ldr	r0, [pc, #264]	; 14d38 <verify_monster@@Base+0xca0>
   14c2c:	add	r0, pc, r0
   14c30:	b	14154 <verify_monster@@Base+0xbc>
   14c34:	andeq	r2, r1, fp, asr #20
   14c38:	andeq	r2, r1, ip, asr sl
   14c3c:	andeq	r2, r1, r8, ror lr
   14c40:	andeq	r2, r1, lr, asr sl
   14c44:	andeq	r2, r1, r9, lsl #29
   14c48:	andeq	r2, r1, r8, asr #28
   14c4c:	andeq	r2, r1, r6, asr #27
   14c50:	andeq	r3, r1, ip, lsr #25
   14c54:	andeq	r2, r1, sl, ror #26
   14c58:	andeq	r1, r1, r9, lsl #5
   14c5c:	andeq	r0, r1, ip, ror #26
   14c60:	andeq	r1, r1, r4, lsr #4
   14c64:	andeq	r0, r1, r0, lsr sl
   14c68:			; <UNDEFINED> instruction: 0x000129b1
   14c6c:	andeq	r2, r1, pc, asr #23
   14c70:	andeq	r2, r1, r5, lsr #23
   14c74:	andeq	r2, r1, sp, ror fp
   14c78:	andeq	r0, r1, fp, lsr #20
   14c7c:	andeq	r2, r1, ip, asr #19
   14c80:	andeq	r2, r1, ip, ror fp
   14c84:	andeq	r2, r1, sp, ror #13
   14c88:	andeq	r2, r1, r5, ror #13
   14c8c:	andeq	r2, r1, r2, lsl #19
   14c90:	andeq	r0, r1, ip, lsl #17
   14c94:	andeq	r2, r1, r9, lsr r9
   14c98:	andeq	r0, r1, r8, lsl #19
   14c9c:	andeq	r0, r1, r4, ror #18
   14ca0:	andeq	r2, r1, r4, ror #17
   14ca4:	andeq	r0, r1, r4, asr #17
   14ca8:			; <UNDEFINED> instruction: 0x000108b8
   14cac:	andeq	r2, r1, ip, asr #28
   14cb0:	andeq	r0, r1, r2, lsl #17
   14cb4:	andeq	r2, r1, ip, asr #27
   14cb8:	andeq	r0, r1, ip, asr #16
   14cbc:			; <UNDEFINED> instruction: 0x000107bc
   14cc0:	andeq	r0, r1, r9, lsl r8
   14cc4:	andeq	r2, r1, r4, asr #26
   14cc8:	andeq	r0, r1, r5, ror #15
   14ccc:	andeq	r2, r1, r4, asr #25
   14cd0:	andeq	r0, r1, pc, lsr #15
   14cd4:	muleq	r1, r8, ip
   14cd8:	andeq	r0, r1, r4, ror r7
   14cdc:	strdeq	r2, [r1], -r2	; <UNPREDICTABLE>
   14ce0:	andeq	r0, r1, sp, asr r7
   14ce4:	andeq	r2, r1, r7, ror #11
   14ce8:	strdeq	r0, [r1], -r7
   14cec:	andeq	r3, r1, ip, ror r6
   14cf0:	andeq	r2, r1, pc, ror r5
   14cf4:	strdeq	r0, [r1], -r9
   14cf8:	andeq	r2, r1, ip, lsr #10
   14cfc:	strdeq	r2, [r1], -ip
   14d00:	andeq	r2, r1, r9, ror r4
   14d04:	andeq	r0, r1, r0, ror r6
   14d08:	andeq	r2, r1, ip, asr #7
   14d0c:	andeq	r0, r1, r8, asr #9
   14d10:			; <UNDEFINED> instruction: 0x000123b8
   14d14:	andeq	r2, r1, r2, asr r3
   14d18:	andeq	r2, r1, fp, lsr #6
   14d1c:	ldrdeq	r2, [r1], -fp
   14d20:	andeq	r2, r1, r3, lsl #5
   14d24:	andeq	r2, r1, r5, lsr r1
   14d28:	andeq	r0, r1, sl, lsr #26
   14d2c:	andeq	r0, r1, r4, lsl r3
   14d30:	andeq	r2, r1, r8, lsr #2
   14d34:	strheq	r2, [r1], -r8
   14d38:	andeq	r2, r1, r2, lsl r0
   14d3c:	andeq	r2, r1, ip, lsr r0
   14d40:			; <UNDEFINED> instruction: 0x000113b7
   14d44:	andeq	r0, r1, ip, lsr #28
   14d48:	andeq	r1, r1, sp, lsl #10

00014d4c <gen_monster@@Base>:
   14d4c:	push	{r4, r5, r6, sl, fp, lr}
   14d50:	add	fp, sp, #16
   14d54:	sub	sp, sp, #48	; 0x30
   14d58:	mov	r4, r0
   14d5c:	ldr	r0, [pc, #2480]	; 15714 <gen_monster@@Base+0x9c8>
   14d60:	mov	r5, r1
   14d64:	add	r0, pc, r0
   14d68:	vldr	d16, [r0]
   14d6c:	movw	r0, #2312	; 0x908
   14d70:	strh	r0, [sp, #40]	; 0x28
   14d74:	movw	r0, #256	; 0x100
   14d78:	movt	r0, #1
   14d7c:	str	r0, [sp, #8]
   14d80:	mov	r0, r4
   14d84:	vstr	d16, [sp, #32]
   14d88:	bl	1e2ac <flatcc_builder_reset@@Base>
   14d8c:	ldr	r1, [pc, #2436]	; 15718 <gen_monster@@Base+0x9cc>
   14d90:	cmp	r5, #0
   14d94:	mov	r0, r4
   14d98:	mov	r2, #0
   14d9c:	moveq	r3, #0
   14da0:	movne	r3, #2
   14da4:	add	r1, pc, r1
   14da8:	bl	1eea8 <flatcc_builder_start_buffer@@Base>
   14dac:	cmp	r0, #0
   14db0:	bne	14dc0 <gen_monster@@Base+0x74>
   14db4:	mov	r0, r4
   14db8:	mov	r1, #36	; 0x24
   14dbc:	bl	20484 <flatcc_builder_start_table@@Base>
   14dc0:	mov	r0, r4
   14dc4:	mov	r1, #2
   14dc8:	mov	r2, #2
   14dcc:	mov	r3, #2
   14dd0:	bl	21920 <flatcc_builder_table_add@@Base>
   14dd4:	cmp	r0, #0
   14dd8:	mov	r2, #32
   14ddc:	mov	r3, #16
   14de0:	movne	r1, #80	; 0x50
   14de4:	strhne	r1, [r0]
   14de8:	mov	r0, r4
   14dec:	mov	r1, #0
   14df0:	bl	21920 <flatcc_builder_table_add@@Base>
   14df4:	movw	r1, #52429	; 0xcccd
   14df8:	mov	r3, #1065353216	; 0x3f800000
   14dfc:	mov	r2, #1073741824	; 0x40000000
   14e00:	movt	r1, #49228	; 0xc04c
   14e04:	str	r3, [r0]
   14e08:	str	r2, [r0, #4]
   14e0c:	str	r1, [r0, #8]
   14e10:	mov	r0, r4
   14e14:	ldr	r1, [pc, #2304]	; 1571c <gen_monster@@Base+0x9d0>
   14e18:	add	r1, pc, r1
   14e1c:	bl	227bc <flatcc_builder_create_string_str@@Base>
   14e20:	cmp	r0, #0
   14e24:	beq	14e40 <gen_monster@@Base+0xf4>
   14e28:	mov	r5, r0
   14e2c:	mov	r0, r4
   14e30:	mov	r1, #3
   14e34:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   14e38:	cmp	r0, #0
   14e3c:	strne	r5, [r0]
   14e40:	mov	r0, r4
   14e44:	mov	r1, #6
   14e48:	mov	r2, #1
   14e4c:	mov	r3, #1
   14e50:	mov	r5, #1
   14e54:	bl	21920 <flatcc_builder_table_add@@Base>
   14e58:	cmp	r0, #0
   14e5c:	mov	r2, #10
   14e60:	mov	r3, #1
   14e64:	movne	r1, #2
   14e68:	strbne	r1, [r0]
   14e6c:	mvn	r0, #0
   14e70:	add	r1, sp, #32
   14e74:	str	r5, [sp]
   14e78:	str	r0, [sp, #4]
   14e7c:	mov	r0, r4
   14e80:	bl	21070 <flatcc_builder_create_vector@@Base>
   14e84:	cmp	r0, #0
   14e88:	beq	14ea4 <gen_monster@@Base+0x158>
   14e8c:	mov	r5, r0
   14e90:	mov	r0, r4
   14e94:	mov	r1, #5
   14e98:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   14e9c:	cmp	r0, #0
   14ea0:	strne	r5, [r0]
   14ea4:	mov	r0, r4
   14ea8:	mov	r1, #4
   14eac:	mov	r2, #2
   14eb0:	mvn	r3, #-1073741824	; 0xc0000000
   14eb4:	bl	1ff74 <flatcc_builder_start_vector@@Base>
   14eb8:	mov	r0, r4
   14ebc:	mov	r1, #1
   14ec0:	bl	1f3b0 <flatcc_builder_extend_vector@@Base>
   14ec4:	mov	r1, #32
   14ec8:	strb	r1, [r0, #2]
   14ecc:	mov	r1, #16
   14ed0:	strh	r1, [r0]
   14ed4:	mov	r0, r4
   14ed8:	mov	r1, #2
   14edc:	bl	1f3b0 <flatcc_builder_extend_vector@@Base>
   14ee0:	mov	r1, #96	; 0x60
   14ee4:	strb	r1, [r0, #6]
   14ee8:	mov	r1, #80	; 0x50
   14eec:	strh	r1, [r0, #4]
   14ef0:	mov	r1, #64	; 0x40
   14ef4:	strb	r1, [r0, #2]
   14ef8:	mov	r1, #48	; 0x30
   14efc:	strh	r1, [r0]
   14f00:	mov	r0, r4
   14f04:	mov	r1, #1
   14f08:	bl	1f3b0 <flatcc_builder_extend_vector@@Base>
   14f0c:	cmp	r0, #0
   14f10:	movne	r1, #128	; 0x80
   14f14:	strbne	r1, [r0, #2]
   14f18:	movne	r1, #112	; 0x70
   14f1c:	strhne	r1, [r0]
   14f20:	mov	r0, r4
   14f24:	mov	r1, #1
   14f28:	bl	1f3b0 <flatcc_builder_extend_vector@@Base>
   14f2c:	movw	r5, #400	; 0x190
   14f30:	cmp	r0, #0
   14f34:	mov	r1, #1
   14f38:	movt	r5, #145	; 0x91
   14f3c:	strne	r5, [r0]
   14f40:	mov	r0, r4
   14f44:	bl	1f3b0 <flatcc_builder_extend_vector@@Base>
   14f48:	cmp	r0, #0
   14f4c:	mov	r1, #1
   14f50:	strne	r5, [r0]
   14f54:	mov	r0, r4
   14f58:	bl	1f3b0 <flatcc_builder_extend_vector@@Base>
   14f5c:	cmp	r0, #0
   14f60:	strne	r5, [r0]
   14f64:	mov	r0, r4
   14f68:	bl	212e8 <flatcc_builder_vector_count@@Base>
   14f6c:	cmp	r0, #7
   14f70:	bne	15674 <gen_monster@@Base+0x928>
   14f74:	mov	r0, r4
   14f78:	mov	r1, #2
   14f7c:	bl	1fd60 <flatcc_builder_truncate_vector@@Base>
   14f80:	mov	r0, r4
   14f84:	bl	212e8 <flatcc_builder_vector_count@@Base>
   14f88:	cmp	r0, #5
   14f8c:	bne	15694 <gen_monster@@Base+0x948>
   14f90:	mov	r0, r4
   14f94:	bl	212f4 <flatcc_builder_vector_edit@@Base>
   14f98:	ldrh	r1, [r0, #16]
   14f9c:	add	r1, r1, #1
   14fa0:	strh	r1, [r0, #16]
   14fa4:	mov	r0, r4
   14fa8:	bl	211ec <flatcc_builder_end_vector@@Base>
   14fac:	cmp	r0, #0
   14fb0:	beq	14fcc <gen_monster@@Base+0x280>
   14fb4:	mov	r5, r0
   14fb8:	mov	r0, r4
   14fbc:	mov	r1, #9
   14fc0:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   14fc4:	cmp	r0, #0
   14fc8:	strne	r5, [r0]
   14fcc:	mov	r0, r4
   14fd0:	mov	r1, #36	; 0x24
   14fd4:	bl	20484 <flatcc_builder_start_table@@Base>
   14fd8:	ldr	r1, [pc, #1856]	; 15720 <gen_monster@@Base+0x9d4>
   14fdc:	mov	r0, r4
   14fe0:	mov	r2, #7
   14fe4:	add	r1, pc, r1
   14fe8:	bl	226a0 <flatcc_builder_create_string@@Base>
   14fec:	cmp	r0, #0
   14ff0:	beq	1500c <gen_monster@@Base+0x2c0>
   14ff4:	mov	r5, r0
   14ff8:	mov	r0, r4
   14ffc:	mov	r1, #3
   15000:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   15004:	cmp	r0, #0
   15008:	strne	r5, [r0]
   1500c:	ldr	r1, [pc, #1808]	; 15724 <gen_monster@@Base+0x9d8>
   15010:	mov	r0, r4
   15014:	mov	r2, #1
   15018:	add	r1, pc, r1
   1501c:	bl	20e20 <flatcc_builder_check_required@@Base>
   15020:	cmp	r0, #0
   15024:	beq	15654 <gen_monster@@Base+0x908>
   15028:	mov	r0, r4
   1502c:	bl	20eac <flatcc_builder_end_table@@Base>
   15030:	mov	r5, r0
   15034:	mov	r0, r4
   15038:	bl	20000 <flatcc_builder_start_offset_vector@@Base>
   1503c:	mov	r0, r4
   15040:	mov	r1, #2
   15044:	bl	1f758 <flatcc_builder_extend_offset_vector@@Base>
   15048:	str	r5, [r0]
   1504c:	str	r5, [r0, #4]
   15050:	mov	r0, r4
   15054:	mov	r1, #36	; 0x24
   15058:	bl	20484 <flatcc_builder_start_table@@Base>
   1505c:	ldr	r1, [pc, #1732]	; 15728 <gen_monster@@Base+0x9dc>
   15060:	mov	r0, r4
   15064:	mov	r2, #30
   15068:	add	r1, pc, r1
   1506c:	bl	227e8 <flatcc_builder_create_string_strn@@Base>
   15070:	cmp	r0, #0
   15074:	beq	15090 <gen_monster@@Base+0x344>
   15078:	mov	r6, r0
   1507c:	mov	r0, r4
   15080:	mov	r1, #3
   15084:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   15088:	cmp	r0, #0
   1508c:	strne	r6, [r0]
   15090:	ldr	r1, [pc, #1684]	; 1572c <gen_monster@@Base+0x9e0>
   15094:	mov	r0, r4
   15098:	mov	r2, #1
   1509c:	add	r1, pc, r1
   150a0:	bl	20e20 <flatcc_builder_check_required@@Base>
   150a4:	cmp	r0, #0
   150a8:	beq	15654 <gen_monster@@Base+0x908>
   150ac:	mov	r0, r4
   150b0:	bl	20eac <flatcc_builder_end_table@@Base>
   150b4:	mov	r1, r0
   150b8:	mov	r0, r4
   150bc:	bl	1f848 <flatcc_builder_offset_vector_push@@Base>
   150c0:	ldr	r6, [r0]
   150c4:	mov	r0, r4
   150c8:	mov	r1, #3
   150cc:	bl	1f758 <flatcc_builder_extend_offset_vector@@Base>
   150d0:	stm	r0, {r5, r6}
   150d4:	mov	r0, r4
   150d8:	mov	r1, #1
   150dc:	bl	1fe14 <flatcc_builder_truncate_offset_vector@@Base>
   150e0:	mov	r0, r4
   150e4:	bl	21630 <flatcc_builder_offset_vector_count@@Base>
   150e8:	cmp	r0, #5
   150ec:	bne	156b4 <gen_monster@@Base+0x968>
   150f0:	mov	r0, r4
   150f4:	mov	r1, #36	; 0x24
   150f8:	bl	20484 <flatcc_builder_start_table@@Base>
   150fc:	ldr	r1, [pc, #1580]	; 15730 <gen_monster@@Base+0x9e4>
   15100:	mov	r0, r4
   15104:	mov	r2, #8
   15108:	add	r1, pc, r1
   1510c:	bl	227e8 <flatcc_builder_create_string_strn@@Base>
   15110:	cmp	r0, #0
   15114:	beq	15130 <gen_monster@@Base+0x3e4>
   15118:	mov	r6, r0
   1511c:	mov	r0, r4
   15120:	mov	r1, #3
   15124:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   15128:	cmp	r0, #0
   1512c:	strne	r6, [r0]
   15130:	ldr	r1, [pc, #1532]	; 15734 <gen_monster@@Base+0x9e8>
   15134:	mov	r0, r4
   15138:	mov	r2, #1
   1513c:	add	r1, pc, r1
   15140:	bl	20e20 <flatcc_builder_check_required@@Base>
   15144:	cmp	r0, #0
   15148:	beq	15654 <gen_monster@@Base+0x908>
   1514c:	mov	r0, r4
   15150:	bl	20eac <flatcc_builder_end_table@@Base>
   15154:	mov	r1, r0
   15158:	mov	r0, r4
   1515c:	bl	1f848 <flatcc_builder_offset_vector_push@@Base>
   15160:	ldr	r0, [r0]
   15164:	str	r0, [sp, #24]
   15168:	mov	r0, r4
   1516c:	bl	21630 <flatcc_builder_offset_vector_count@@Base>
   15170:	cmp	r0, #6
   15174:	bne	156d4 <gen_monster@@Base+0x988>
   15178:	mov	r0, r4
   1517c:	bl	21628 <flatcc_builder_offset_vector_edit@@Base>
   15180:	ldr	r1, [r0, #8]
   15184:	ldr	r2, [r0, #20]
   15188:	str	r1, [sp, #28]
   1518c:	str	r2, [r0]
   15190:	str	r5, [r0, #20]
   15194:	add	r1, sp, #24
   15198:	mov	r0, r4
   1519c:	mov	r2, #2
   151a0:	bl	1f948 <flatcc_builder_append_offset_vector@@Base>
   151a4:	mov	r0, r4
   151a8:	bl	201e8 <flatcc_builder_end_offset_vector@@Base>
   151ac:	cmp	r0, #0
   151b0:	beq	151cc <gen_monster@@Base+0x480>
   151b4:	mov	r6, r0
   151b8:	mov	r0, r4
   151bc:	mov	r1, #11
   151c0:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   151c4:	cmp	r0, #0
   151c8:	strne	r6, [r0]
   151cc:	ldr	r1, [pc, #1380]	; 15738 <gen_monster@@Base+0x9ec>
   151d0:	mov	r0, r4
   151d4:	add	r1, pc, r1
   151d8:	bl	227bc <flatcc_builder_create_string_str@@Base>
   151dc:	str	r0, [sp, #12]
   151e0:	mov	r0, r4
   151e4:	mov	r2, #2
   151e8:	ldr	r1, [pc, #1356]	; 1573c <gen_monster@@Base+0x9f0>
   151ec:	add	r1, pc, r1
   151f0:	bl	226a0 <flatcc_builder_create_string@@Base>
   151f4:	str	r0, [sp, #16]
   151f8:	mov	r0, r4
   151fc:	ldr	r1, [pc, #1340]	; 15740 <gen_monster@@Base+0x9f4>
   15200:	add	r1, pc, r1
   15204:	bl	227bc <flatcc_builder_create_string_str@@Base>
   15208:	str	r0, [sp, #20]
   1520c:	add	r1, sp, #12
   15210:	mov	r0, r4
   15214:	mov	r2, #3
   15218:	bl	20078 <flatcc_builder_create_offset_vector@@Base>
   1521c:	cmp	r0, #0
   15220:	beq	1523c <gen_monster@@Base+0x4f0>
   15224:	mov	r6, r0
   15228:	mov	r0, r4
   1522c:	mov	r1, #10
   15230:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   15234:	cmp	r0, #0
   15238:	strne	r6, [r0]
   1523c:	mov	r0, r4
   15240:	mov	r1, #1
   15244:	mov	r2, #1
   15248:	mvn	r3, #0
   1524c:	bl	1ff74 <flatcc_builder_start_vector@@Base>
   15250:	add	r6, sp, #8
   15254:	mov	r0, r4
   15258:	mov	r2, #1
   1525c:	mov	r1, r6
   15260:	bl	1f600 <flatcc_builder_append_vector@@Base>
   15264:	orr	r1, r6, #1
   15268:	mov	r0, r4
   1526c:	mov	r2, #3
   15270:	bl	1f600 <flatcc_builder_append_vector@@Base>
   15274:	mov	r0, r4
   15278:	bl	211ec <flatcc_builder_end_vector@@Base>
   1527c:	cmp	r0, #0
   15280:	beq	1529c <gen_monster@@Base+0x550>
   15284:	mov	r6, r0
   15288:	mov	r0, r4
   1528c:	mov	r1, #24
   15290:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   15294:	cmp	r0, #0
   15298:	strne	r6, [r0]
   1529c:	cmp	r5, #0
   152a0:	beq	152e0 <gen_monster@@Base+0x594>
   152a4:	mov	r0, r4
   152a8:	mov	r1, #7
   152ac:	mov	r2, #1
   152b0:	mov	r3, #1
   152b4:	bl	21920 <flatcc_builder_table_add@@Base>
   152b8:	cmp	r0, #0
   152bc:	beq	152e0 <gen_monster@@Base+0x594>
   152c0:	mov	r6, r0
   152c4:	mov	r0, r4
   152c8:	mov	r1, #8
   152cc:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   152d0:	cmp	r0, #0
   152d4:	movne	r1, #1
   152d8:	strbne	r1, [r6]
   152dc:	strne	r5, [r0]
   152e0:	mov	r0, r4
   152e4:	mov	r1, #36	; 0x24
   152e8:	bl	20484 <flatcc_builder_start_table@@Base>
   152ec:	ldr	r1, [pc, #1104]	; 15744 <gen_monster@@Base+0x9f8>
   152f0:	mov	r0, r4
   152f4:	add	r1, pc, r1
   152f8:	bl	227bc <flatcc_builder_create_string_str@@Base>
   152fc:	cmp	r0, #0
   15300:	beq	1531c <gen_monster@@Base+0x5d0>
   15304:	mov	r6, r0
   15308:	mov	r0, r4
   1530c:	mov	r1, #3
   15310:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   15314:	cmp	r0, #0
   15318:	strne	r6, [r0]
   1531c:	mov	r0, r4
   15320:	bl	20000 <flatcc_builder_start_offset_vector@@Base>
   15324:	mov	r0, r4
   15328:	mov	r1, #36	; 0x24
   1532c:	bl	20484 <flatcc_builder_start_table@@Base>
   15330:	cmp	r5, #0
   15334:	beq	15374 <gen_monster@@Base+0x628>
   15338:	mov	r0, r4
   1533c:	mov	r1, #7
   15340:	mov	r2, #1
   15344:	mov	r3, #1
   15348:	bl	21920 <flatcc_builder_table_add@@Base>
   1534c:	cmp	r0, #0
   15350:	beq	15374 <gen_monster@@Base+0x628>
   15354:	mov	r6, r0
   15358:	mov	r0, r4
   1535c:	mov	r1, #8
   15360:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   15364:	cmp	r0, #0
   15368:	movne	r1, #1
   1536c:	strbne	r1, [r6]
   15370:	strne	r5, [r0]
   15374:	ldr	r1, [pc, #972]	; 15748 <gen_monster@@Base+0x9fc>
   15378:	mov	r0, r4
   1537c:	add	r1, pc, r1
   15380:	bl	227bc <flatcc_builder_create_string_str@@Base>
   15384:	cmp	r0, #0
   15388:	beq	153a4 <gen_monster@@Base+0x658>
   1538c:	mov	r6, r0
   15390:	mov	r0, r4
   15394:	mov	r1, #3
   15398:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1539c:	cmp	r0, #0
   153a0:	strne	r6, [r0]
   153a4:	ldr	r1, [pc, #928]	; 1574c <gen_monster@@Base+0xa00>
   153a8:	mov	r0, r4
   153ac:	mov	r2, #1
   153b0:	add	r1, pc, r1
   153b4:	bl	20e20 <flatcc_builder_check_required@@Base>
   153b8:	cmp	r0, #0
   153bc:	beq	15654 <gen_monster@@Base+0x908>
   153c0:	mov	r0, r4
   153c4:	bl	20eac <flatcc_builder_end_table@@Base>
   153c8:	cmp	r0, #0
   153cc:	beq	153dc <gen_monster@@Base+0x690>
   153d0:	mov	r1, r0
   153d4:	mov	r0, r4
   153d8:	bl	1f848 <flatcc_builder_offset_vector_push@@Base>
   153dc:	mov	r0, r4
   153e0:	mov	r1, #36	; 0x24
   153e4:	bl	20484 <flatcc_builder_start_table@@Base>
   153e8:	cmp	r5, #0
   153ec:	beq	1542c <gen_monster@@Base+0x6e0>
   153f0:	mov	r0, r4
   153f4:	mov	r1, #7
   153f8:	mov	r2, #1
   153fc:	mov	r3, #1
   15400:	bl	21920 <flatcc_builder_table_add@@Base>
   15404:	cmp	r0, #0
   15408:	beq	1542c <gen_monster@@Base+0x6e0>
   1540c:	mov	r6, r0
   15410:	mov	r0, r4
   15414:	mov	r1, #8
   15418:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1541c:	cmp	r0, #0
   15420:	movne	r1, #1
   15424:	strbne	r1, [r6]
   15428:	strne	r5, [r0]
   1542c:	ldr	r1, [pc, #796]	; 15750 <gen_monster@@Base+0xa04>
   15430:	mov	r0, r4
   15434:	add	r1, pc, r1
   15438:	bl	227bc <flatcc_builder_create_string_str@@Base>
   1543c:	cmp	r0, #0
   15440:	beq	1545c <gen_monster@@Base+0x710>
   15444:	mov	r6, r0
   15448:	mov	r0, r4
   1544c:	mov	r1, #3
   15450:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   15454:	cmp	r0, #0
   15458:	strne	r6, [r0]
   1545c:	ldr	r1, [pc, #752]	; 15754 <gen_monster@@Base+0xa08>
   15460:	mov	r0, r4
   15464:	mov	r2, #1
   15468:	add	r1, pc, r1
   1546c:	bl	20e20 <flatcc_builder_check_required@@Base>
   15470:	cmp	r0, #0
   15474:	beq	15654 <gen_monster@@Base+0x908>
   15478:	mov	r0, r4
   1547c:	bl	20eac <flatcc_builder_end_table@@Base>
   15480:	cmp	r0, #0
   15484:	beq	15494 <gen_monster@@Base+0x748>
   15488:	mov	r1, r0
   1548c:	mov	r0, r4
   15490:	bl	1f848 <flatcc_builder_offset_vector_push@@Base>
   15494:	mov	r0, r4
   15498:	mov	r1, #36	; 0x24
   1549c:	bl	20484 <flatcc_builder_start_table@@Base>
   154a0:	mov	r0, r4
   154a4:	mov	r1, #8
   154a8:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   154ac:	cmp	r0, #0
   154b0:	strne	r5, [r0]
   154b4:	mov	r0, r4
   154b8:	ldr	r1, [pc, #664]	; 15758 <gen_monster@@Base+0xa0c>
   154bc:	add	r1, pc, r1
   154c0:	bl	227bc <flatcc_builder_create_string_str@@Base>
   154c4:	cmp	r0, #0
   154c8:	beq	154e4 <gen_monster@@Base+0x798>
   154cc:	mov	r5, r0
   154d0:	mov	r0, r4
   154d4:	mov	r1, #3
   154d8:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   154dc:	cmp	r0, #0
   154e0:	strne	r5, [r0]
   154e4:	mov	r0, r4
   154e8:	mov	r1, #7
   154ec:	mov	r2, #1
   154f0:	mov	r3, #1
   154f4:	mov	r5, #1
   154f8:	bl	21920 <flatcc_builder_table_add@@Base>
   154fc:	cmp	r0, #0
   15500:	mov	r2, #1
   15504:	strbne	r5, [r0]
   15508:	mov	r0, r4
   1550c:	ldr	r1, [pc, #584]	; 1575c <gen_monster@@Base+0xa10>
   15510:	add	r1, pc, r1
   15514:	bl	20e20 <flatcc_builder_check_required@@Base>
   15518:	cmp	r0, #0
   1551c:	beq	15654 <gen_monster@@Base+0x908>
   15520:	mov	r0, r4
   15524:	bl	20eac <flatcc_builder_end_table@@Base>
   15528:	cmp	r0, #0
   1552c:	beq	1553c <gen_monster@@Base+0x7f0>
   15530:	mov	r1, r0
   15534:	mov	r0, r4
   15538:	bl	1f848 <flatcc_builder_offset_vector_push@@Base>
   1553c:	mov	r0, r4
   15540:	bl	201e8 <flatcc_builder_end_offset_vector@@Base>
   15544:	cmp	r0, #0
   15548:	beq	15564 <gen_monster@@Base+0x818>
   1554c:	mov	r5, r0
   15550:	mov	r0, r4
   15554:	mov	r1, #11
   15558:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1555c:	cmp	r0, #0
   15560:	strne	r5, [r0]
   15564:	ldr	r1, [pc, #500]	; 15760 <gen_monster@@Base+0xa14>
   15568:	mov	r0, r4
   1556c:	mov	r2, #1
   15570:	add	r1, pc, r1
   15574:	bl	20e20 <flatcc_builder_check_required@@Base>
   15578:	cmp	r0, #0
   1557c:	beq	15654 <gen_monster@@Base+0x908>
   15580:	mov	r0, r4
   15584:	bl	20eac <flatcc_builder_end_table@@Base>
   15588:	cmp	r0, #0
   1558c:	beq	155a8 <gen_monster@@Base+0x85c>
   15590:	mov	r5, r0
   15594:	mov	r0, r4
   15598:	mov	r1, #12
   1559c:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   155a0:	cmp	r0, #0
   155a4:	strne	r5, [r0]
   155a8:	mov	r0, r4
   155ac:	mov	r1, #15
   155b0:	mov	r2, #1
   155b4:	mov	r3, #1
   155b8:	bl	21920 <flatcc_builder_table_add@@Base>
   155bc:	cmp	r0, #0
   155c0:	movne	r1, #0
   155c4:	strbne	r1, [r0]
   155c8:	mov	r0, r4
   155cc:	mov	r1, #3
   155d0:	bl	20484 <flatcc_builder_start_table@@Base>
   155d4:	ldr	r1, [pc, #392]	; 15764 <gen_monster@@Base+0xa18>
   155d8:	mov	r0, r4
   155dc:	mov	r2, #0
   155e0:	add	r1, pc, r1
   155e4:	bl	20e20 <flatcc_builder_check_required@@Base>
   155e8:	cmp	r0, #0
   155ec:	beq	156f4 <gen_monster@@Base+0x9a8>
   155f0:	mov	r0, r4
   155f4:	bl	20eac <flatcc_builder_end_table@@Base>
   155f8:	cmp	r0, #0
   155fc:	beq	15618 <gen_monster@@Base+0x8cc>
   15600:	mov	r5, r0
   15604:	mov	r0, r4
   15608:	mov	r1, #14
   1560c:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   15610:	cmp	r0, #0
   15614:	strne	r5, [r0]
   15618:	ldr	r1, [pc, #328]	; 15768 <gen_monster@@Base+0xa1c>
   1561c:	mov	r0, r4
   15620:	mov	r2, #1
   15624:	add	r1, pc, r1
   15628:	bl	20e20 <flatcc_builder_check_required@@Base>
   1562c:	cmp	r0, #0
   15630:	beq	15654 <gen_monster@@Base+0x908>
   15634:	mov	r0, r4
   15638:	bl	20eac <flatcc_builder_end_table@@Base>
   1563c:	mov	r1, r0
   15640:	mov	r0, r4
   15644:	bl	1f0a8 <flatcc_builder_end_buffer@@Base>
   15648:	mov	r0, #0
   1564c:	sub	sp, fp, #16
   15650:	pop	{r4, r5, r6, sl, fp, pc}
   15654:	ldr	r0, [pc, #296]	; 15784 <gen_monster@@Base+0xa38>
   15658:	ldr	r1, [pc, #296]	; 15788 <gen_monster@@Base+0xa3c>
   1565c:	ldr	r3, [pc, #296]	; 1578c <gen_monster@@Base+0xa40>
   15660:	mov	r2, #235	; 0xeb
   15664:	add	r0, pc, r0
   15668:	add	r1, pc, r1
   1566c:	add	r3, pc, r3
   15670:	bl	12f04 <__assert_fail@plt>
   15674:	ldr	r0, [pc, #240]	; 1576c <gen_monster@@Base+0xa20>
   15678:	ldr	r1, [pc, #240]	; 15770 <gen_monster@@Base+0xa24>
   1567c:	ldr	r3, [pc, #240]	; 15774 <gen_monster@@Base+0xa28>
   15680:	movw	r2, #881	; 0x371
   15684:	add	r0, pc, r0
   15688:	add	r1, pc, r1
   1568c:	add	r3, pc, r3
   15690:	bl	12f04 <__assert_fail@plt>
   15694:	ldr	r0, [pc, #220]	; 15778 <gen_monster@@Base+0xa2c>
   15698:	ldr	r1, [pc, #220]	; 1577c <gen_monster@@Base+0xa30>
   1569c:	ldr	r3, [pc, #220]	; 15780 <gen_monster@@Base+0xa34>
   156a0:	movw	r2, #883	; 0x373
   156a4:	add	r0, pc, r0
   156a8:	add	r1, pc, r1
   156ac:	add	r3, pc, r3
   156b0:	bl	12f04 <__assert_fail@plt>
   156b4:	ldr	r0, [pc, #212]	; 15790 <gen_monster@@Base+0xa44>
   156b8:	ldr	r1, [pc, #212]	; 15794 <gen_monster@@Base+0xa48>
   156bc:	ldr	r3, [pc, #212]	; 15798 <gen_monster@@Base+0xa4c>
   156c0:	movw	r2, #923	; 0x39b
   156c4:	add	r0, pc, r0
   156c8:	add	r1, pc, r1
   156cc:	add	r3, pc, r3
   156d0:	bl	12f04 <__assert_fail@plt>
   156d4:	ldr	r0, [pc, #192]	; 1579c <gen_monster@@Base+0xa50>
   156d8:	ldr	r1, [pc, #192]	; 157a0 <gen_monster@@Base+0xa54>
   156dc:	ldr	r3, [pc, #192]	; 157a4 <gen_monster@@Base+0xa58>
   156e0:	movw	r2, #929	; 0x3a1
   156e4:	add	r0, pc, r0
   156e8:	add	r1, pc, r1
   156ec:	add	r3, pc, r3
   156f0:	bl	12f04 <__assert_fail@plt>
   156f4:	ldr	r0, [pc, #172]	; 157a8 <gen_monster@@Base+0xa5c>
   156f8:	ldr	r1, [pc, #172]	; 157ac <gen_monster@@Base+0xa60>
   156fc:	ldr	r3, [pc, #172]	; 157b0 <gen_monster@@Base+0xa64>
   15700:	mov	r2, #221	; 0xdd
   15704:	add	r0, pc, r0
   15708:	add	r1, pc, r1
   1570c:	add	r3, pc, r3
   15710:	bl	12f04 <__assert_fail@plt>
   15714:	andeq	r3, r1, r4, lsl #3
   15718:	andeq	pc, r0, r8, asr lr	; <UNPREDICTABLE>
   1571c:	andeq	pc, r0, r8, lsr #28
   15720:	andeq	pc, r0, ip, ror lr	; <UNPREDICTABLE>
   15724:	ldrdeq	r2, [r1], -ip
   15728:	ldrdeq	r2, [r1], -r8
   1572c:	andeq	r2, r1, r8, asr lr
   15730:	andeq	pc, r0, r9, asr #30
   15734:			; <UNDEFINED> instruction: 0x00012db8
   15738:	andeq	pc, r0, sp, lsl #27
   1573c:	andeq	r2, r1, r0, ror #25
   15740:	andeq	pc, r0, r1, lsl #27
   15744:	andeq	r1, r1, r6, ror #20
   15748:	andeq	pc, r0, r4, lsr #26
   1574c:	andeq	r2, r1, r4, asr #22
   15750:	andeq	pc, r0, ip, ror #24
   15754:	andeq	r2, r1, ip, lsl #21
   15758:	andeq	pc, r0, r4, ror #23
   1575c:	andeq	r2, r1, r4, ror #19
   15760:	andeq	r2, r1, r4, lsl #19
   15764:	andeq	r2, r1, sl, lsl r9
   15768:	ldrdeq	r2, [r1], -r0
   1576c:	andeq	pc, r0, r3, lsr #18
   15770:	andeq	pc, r0, r0, ror #14
   15774:	andeq	pc, r0, r2, asr #18
   15778:	andeq	pc, r0, r3, asr r9	; <UNPREDICTABLE>
   1577c:	andeq	pc, r0, r0, asr #14
   15780:	andeq	pc, r0, r2, lsr #18
   15784:	andeq	r0, r1, sp, lsr #10
   15788:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   1578c:	andeq	r0, r1, r7, asr #11
   15790:	andeq	pc, r0, sl, asr r9	; <UNPREDICTABLE>
   15794:	andeq	pc, r0, r0, lsr #14
   15798:	andeq	pc, r0, r2, lsl #18
   1579c:	andeq	pc, r0, r9, lsl #19
   157a0:	andeq	pc, r0, r0, lsl #14
   157a4:	andeq	pc, r0, r2, ror #17
   157a8:	ldrdeq	r0, [r1], -lr
   157ac:	andeq	r0, r1, r0, asr r3
   157b0:	andeq	r0, r1, pc, ror #20

000157b4 <test_monster@@Base>:
   157b4:	push	{r4, r5, fp, lr}
   157b8:	add	fp, sp, #8
   157bc:	sub	sp, sp, #8
   157c0:	mov	r1, #0
   157c4:	mov	r4, r0
   157c8:	bl	14d4c <gen_monster@@Base>
   157cc:	add	r1, sp, #4
   157d0:	mov	r0, r4
   157d4:	bl	22c54 <flatcc_builder_finalize_aligned_buffer@@Base>
   157d8:	mov	r4, r0
   157dc:	ldr	r0, [pc, #120]	; 1585c <test_monster@@Base+0xa8>
   157e0:	mov	r1, r4
   157e4:	ldr	r0, [pc, r0]
   157e8:	ldr	r2, [sp, #4]
   157ec:	ldr	r3, [r0]
   157f0:	ldr	r0, [pc, #104]	; 15860 <test_monster@@Base+0xac>
   157f4:	add	r0, pc, r0
   157f8:	bl	1361c <test_type_aliases@@Base+0x554>
   157fc:	ldr	r1, [sp, #4]
   15800:	ldr	r2, [pc, #92]	; 15864 <test_monster@@Base+0xb0>
   15804:	ldr	r3, [pc, #92]	; 15868 <test_monster@@Base+0xb4>
   15808:	mov	r0, r4
   1580c:	add	r2, pc, r2
   15810:	add	r3, pc, r3
   15814:	bl	23f6c <flatcc_verify_table_as_root@@Base>
   15818:	cmp	r0, #0
   1581c:	beq	1583c <test_monster@@Base+0x88>
   15820:	bl	23328 <flatcc_verify_error_string@@Base>
   15824:	mov	r1, r0
   15828:	ldr	r0, [pc, #60]	; 1586c <test_monster@@Base+0xb8>
   1582c:	add	r0, pc, r0
   15830:	bl	12e14 <printf@plt>
   15834:	mvn	r5, #0
   15838:	b	15850 <test_monster@@Base+0x9c>
   1583c:	mov	r0, r4
   15840:	bl	14098 <verify_monster@@Base>
   15844:	mov	r5, r0
   15848:	mov	r0, r4
   1584c:	bl	22d94 <flatcc_builder_aligned_free@@Base>
   15850:	mov	r0, r5
   15854:	sub	sp, fp, #8
   15858:	pop	{r4, r5, fp, pc}
   1585c:	andeq	r4, r2, ip, ror r8
   15860:	andeq	pc, r0, r3, lsr #9
   15864:	strdeq	pc, [r0], -r0
   15868:	andeq	r7, r0, r4, ror #21
   1586c:	andeq	pc, r0, sp, ror r8	; <UNPREDICTABLE>

00015870 <test_monster_with_size@@Base>:
   15870:	push	{r4, r5, fp, lr}
   15874:	add	fp, sp, #8
   15878:	sub	sp, sp, #8
   1587c:	mov	r1, #1
   15880:	mov	r4, r0
   15884:	bl	14d4c <gen_monster@@Base>
   15888:	add	r1, sp, #4
   1588c:	mov	r0, r4
   15890:	bl	22c54 <flatcc_builder_finalize_aligned_buffer@@Base>
   15894:	mov	r4, r0
   15898:	ldr	r0, [pc, #196]	; 15964 <test_monster_with_size@@Base+0xf4>
   1589c:	mov	r1, r4
   158a0:	ldr	r0, [pc, r0]
   158a4:	ldr	r2, [sp, #4]
   158a8:	ldr	r3, [r0]
   158ac:	ldr	r0, [pc, #180]	; 15968 <test_monster_with_size@@Base+0xf8>
   158b0:	add	r0, pc, r0
   158b4:	bl	1361c <test_type_aliases@@Base+0x554>
   158b8:	tst	r4, #15
   158bc:	beq	158e4 <test_monster_with_size@@Base+0x74>
   158c0:	ldr	r0, [pc, #164]	; 1596c <test_monster_with_size@@Base+0xfc>
   158c4:	add	r0, pc, r0
   158c8:	bl	12e14 <printf@plt>
   158cc:	ldr	r0, [pc, #156]	; 15970 <test_monster_with_size@@Base+0x100>
   158d0:	mov	r1, r4
   158d4:	add	r0, pc, r0
   158d8:	bl	12e14 <printf@plt>
   158dc:	mvn	r5, #0
   158e0:	b	15958 <test_monster_with_size@@Base+0xe8>
   158e4:	mov	r5, r4
   158e8:	ldr	r0, [sp, #4]
   158ec:	ldr	r1, [r5], #4
   158f0:	sub	r2, r0, #4
   158f4:	cmp	r1, r2
   158f8:	bne	15930 <test_monster_with_size@@Base+0xc0>
   158fc:	ldr	r2, [pc, #116]	; 15978 <test_monster_with_size@@Base+0x108>
   15900:	ldr	r3, [pc, #116]	; 1597c <test_monster_with_size@@Base+0x10c>
   15904:	mov	r0, r5
   15908:	add	r2, pc, r2
   1590c:	add	r3, pc, r3
   15910:	bl	23f6c <flatcc_verify_table_as_root@@Base>
   15914:	cmp	r0, #0
   15918:	beq	15944 <test_monster_with_size@@Base+0xd4>
   1591c:	bl	23328 <flatcc_verify_error_string@@Base>
   15920:	mov	r1, r0
   15924:	ldr	r0, [pc, #84]	; 15980 <test_monster_with_size@@Base+0x110>
   15928:	add	r0, pc, r0
   1592c:	b	158d8 <test_monster_with_size@@Base+0x68>
   15930:	ldr	r0, [pc, #60]	; 15974 <test_monster_with_size@@Base+0x104>
   15934:	add	r0, pc, r0
   15938:	bl	12e14 <printf@plt>
   1593c:	mvn	r5, #0
   15940:	b	15958 <test_monster_with_size@@Base+0xe8>
   15944:	mov	r0, r5
   15948:	bl	14098 <verify_monster@@Base>
   1594c:	mov	r5, r0
   15950:	mov	r0, r4
   15954:	bl	22d94 <flatcc_builder_aligned_free@@Base>
   15958:	mov	r0, r5
   1595c:	sub	sp, fp, #8
   15960:	pop	{r4, r5, fp, pc}
   15964:	andeq	r4, r2, r0, asr #15
   15968:	andeq	pc, r0, r3, lsr #16
   1596c:	andeq	pc, r0, r7, lsr #16
   15970:	andeq	pc, r0, r8, ror #16
   15974:	andeq	pc, r0, ip, lsl r8	; <UNPREDICTABLE>
   15978:	strdeq	pc, [r0], -r4
   1597c:	andeq	r7, r0, r8, ror #19
   15980:	andeq	pc, r0, lr, asr r8	; <UNPREDICTABLE>

00015984 <test_string@@Base>:
   15984:	push	{r4, r5, fp, lr}
   15988:	add	fp, sp, #8
   1598c:	mov	r4, r0
   15990:	bl	1e2ac <flatcc_builder_reset@@Base>
   15994:	ldr	r1, [pc, #680]	; 15c44 <test_string@@Base+0x2c0>
   15998:	mov	r0, r4
   1599c:	mov	r2, #0
   159a0:	mov	r3, #0
   159a4:	add	r1, pc, r1
   159a8:	bl	1eea8 <flatcc_builder_start_buffer@@Base>
   159ac:	cmp	r0, #0
   159b0:	bne	159c0 <test_string@@Base+0x3c>
   159b4:	mov	r0, r4
   159b8:	mov	r1, #36	; 0x24
   159bc:	bl	20484 <flatcc_builder_start_table@@Base>
   159c0:	mov	r0, r4
   159c4:	bl	202cc <flatcc_builder_start_string@@Base>
   159c8:	mov	r0, r4
   159cc:	mov	r1, #3
   159d0:	bl	1fa90 <flatcc_builder_extend_string@@Base>
   159d4:	mov	r1, #51	; 0x33
   159d8:	strb	r1, [r0, #2]
   159dc:	movw	r1, #12849	; 0x3231
   159e0:	strh	r1, [r0]
   159e4:	mov	r0, r4
   159e8:	ldr	r1, [pc, #600]	; 15c48 <test_string@@Base+0x2c4>
   159ec:	add	r1, pc, r1
   159f0:	bl	1fcf8 <flatcc_builder_append_string_str@@Base>
   159f4:	mov	r0, r4
   159f8:	bl	22944 <flatcc_builder_string_len@@Base>
   159fc:	cmp	r0, #4
   15a00:	bne	15b64 <test_string@@Base+0x1e0>
   15a04:	ldr	r1, [pc, #576]	; 15c4c <test_string@@Base+0x2c8>
   15a08:	mov	r0, r4
   15a0c:	mov	r2, #30
   15a10:	add	r1, pc, r1
   15a14:	bl	1fd24 <flatcc_builder_append_string_strn@@Base>
   15a18:	mov	r0, r4
   15a1c:	bl	22944 <flatcc_builder_string_len@@Base>
   15a20:	cmp	r0, #8
   15a24:	bne	15b84 <test_string@@Base+0x200>
   15a28:	ldr	r1, [pc, #544]	; 15c50 <test_string@@Base+0x2cc>
   15a2c:	mov	r0, r4
   15a30:	mov	r2, #2
   15a34:	add	r1, pc, r1
   15a38:	bl	1fbb4 <flatcc_builder_append_string@@Base>
   15a3c:	mov	r0, r4
   15a40:	bl	22944 <flatcc_builder_string_len@@Base>
   15a44:	cmp	r0, #10
   15a48:	bne	15ba4 <test_string@@Base+0x220>
   15a4c:	mov	r0, r4
   15a50:	mov	r1, #3
   15a54:	bl	1fec8 <flatcc_builder_truncate_string@@Base>
   15a58:	mov	r0, r4
   15a5c:	bl	22944 <flatcc_builder_string_len@@Base>
   15a60:	cmp	r0, #7
   15a64:	bne	15bc4 <test_string@@Base+0x240>
   15a68:	mov	r0, r4
   15a6c:	bl	2293c <flatcc_builder_string_edit@@Base>
   15a70:	mov	r1, #46	; 0x2e
   15a74:	strb	r1, [r0, #4]
   15a78:	mov	r0, r4
   15a7c:	bl	22824 <flatcc_builder_end_string@@Base>
   15a80:	cmp	r0, #0
   15a84:	beq	15aa0 <test_string@@Base+0x11c>
   15a88:	mov	r5, r0
   15a8c:	mov	r0, r4
   15a90:	mov	r1, #3
   15a94:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   15a98:	cmp	r0, #0
   15a9c:	strne	r5, [r0]
   15aa0:	ldr	r1, [pc, #428]	; 15c54 <test_string@@Base+0x2d0>
   15aa4:	mov	r0, r4
   15aa8:	mov	r2, #1
   15aac:	add	r1, pc, r1
   15ab0:	bl	20e20 <flatcc_builder_check_required@@Base>
   15ab4:	cmp	r0, #0
   15ab8:	beq	15be4 <test_string@@Base+0x260>
   15abc:	mov	r0, r4
   15ac0:	bl	20eac <flatcc_builder_end_table@@Base>
   15ac4:	mov	r1, r0
   15ac8:	mov	r0, r4
   15acc:	bl	1f0a8 <flatcc_builder_end_buffer@@Base>
   15ad0:	mov	r0, r4
   15ad4:	mov	r1, #0
   15ad8:	bl	22ad4 <flatcc_builder_get_direct_buffer@@Base>
   15adc:	cmp	r0, #0
   15ae0:	beq	15c04 <test_string@@Base+0x280>
   15ae4:	ldr	r1, [r0, #4]
   15ae8:	movw	r2, #20301	; 0x4f4d
   15aec:	movt	r2, #21326	; 0x534e
   15af0:	cmp	r1, r2
   15af4:	bne	15c24 <test_string@@Base+0x2a0>
   15af8:	ldr	r1, [r0]
   15afc:	ldr	r2, [r0, r1]!
   15b00:	mov	r1, r0
   15b04:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   15b08:	cmp	r2, #11
   15b0c:	bls	15b58 <test_string@@Base+0x1d4>
   15b10:	ldrh	r1, [r1, #10]
   15b14:	cmp	r1, #0
   15b18:	beq	15b58 <test_string@@Base+0x1d4>
   15b1c:	ldr	r1, [r0, r1]!
   15b20:	add	r0, r0, r1
   15b24:	ldr	r1, [pc, #316]	; 15c68 <test_string@@Base+0x2e4>
   15b28:	add	r0, r0, #4
   15b2c:	add	r1, pc, r1
   15b30:	bl	12e08 <strcmp@plt>
   15b34:	cmp	r0, #0
   15b38:	beq	15b50 <test_string@@Base+0x1cc>
   15b3c:	ldr	r0, [pc, #296]	; 15c6c <test_string@@Base+0x2e8>
   15b40:	add	r0, pc, r0
   15b44:	bl	12e5c <puts@plt>
   15b48:	mvn	r0, #0
   15b4c:	pop	{r4, r5, fp, pc}
   15b50:	mov	r0, #0
   15b54:	pop	{r4, r5, fp, pc}
   15b58:	ldr	r0, [pc, #248]	; 15c58 <test_string@@Base+0x2d4>
   15b5c:	add	r0, pc, r0
   15b60:	b	15c2c <test_string@@Base+0x2a8>
   15b64:	ldr	r0, [pc, #260]	; 15c70 <test_string@@Base+0x2ec>
   15b68:	ldr	r1, [pc, #260]	; 15c74 <test_string@@Base+0x2f0>
   15b6c:	ldr	r3, [pc, #260]	; 15c78 <test_string@@Base+0x2f4>
   15b70:	movw	r2, #1080	; 0x438
   15b74:	add	r0, pc, r0
   15b78:	add	r1, pc, r1
   15b7c:	add	r3, pc, r3
   15b80:	bl	12f04 <__assert_fail@plt>
   15b84:	ldr	r0, [pc, #240]	; 15c7c <test_string@@Base+0x2f8>
   15b88:	ldr	r1, [pc, #240]	; 15c80 <test_string@@Base+0x2fc>
   15b8c:	ldr	r3, [pc, #240]	; 15c84 <test_string@@Base+0x300>
   15b90:	movw	r2, #1082	; 0x43a
   15b94:	add	r0, pc, r0
   15b98:	add	r1, pc, r1
   15b9c:	add	r3, pc, r3
   15ba0:	bl	12f04 <__assert_fail@plt>
   15ba4:	ldr	r0, [pc, #220]	; 15c88 <test_string@@Base+0x304>
   15ba8:	ldr	r1, [pc, #220]	; 15c8c <test_string@@Base+0x308>
   15bac:	ldr	r3, [pc, #220]	; 15c90 <test_string@@Base+0x30c>
   15bb0:	movw	r2, #1084	; 0x43c
   15bb4:	add	r0, pc, r0
   15bb8:	add	r1, pc, r1
   15bbc:	add	r3, pc, r3
   15bc0:	bl	12f04 <__assert_fail@plt>
   15bc4:	ldr	r0, [pc, #200]	; 15c94 <test_string@@Base+0x310>
   15bc8:	ldr	r1, [pc, #200]	; 15c98 <test_string@@Base+0x314>
   15bcc:	ldr	r3, [pc, #200]	; 15c9c <test_string@@Base+0x318>
   15bd0:	movw	r2, #1086	; 0x43e
   15bd4:	add	r0, pc, r0
   15bd8:	add	r1, pc, r1
   15bdc:	add	r3, pc, r3
   15be0:	bl	12f04 <__assert_fail@plt>
   15be4:	ldr	r0, [pc, #180]	; 15ca0 <test_string@@Base+0x31c>
   15be8:	ldr	r1, [pc, #180]	; 15ca4 <test_string@@Base+0x320>
   15bec:	ldr	r3, [pc, #180]	; 15ca8 <test_string@@Base+0x324>
   15bf0:	mov	r2, #235	; 0xeb
   15bf4:	add	r0, pc, r0
   15bf8:	add	r1, pc, r1
   15bfc:	add	r3, pc, r3
   15c00:	bl	12f04 <__assert_fail@plt>
   15c04:	ldr	r0, [pc, #160]	; 15cac <test_string@@Base+0x328>
   15c08:	ldr	r1, [pc, #160]	; 15cb0 <test_string@@Base+0x32c>
   15c0c:	ldr	r3, [pc, #160]	; 15cb4 <test_string@@Base+0x330>
   15c10:	movw	r2, #1093	; 0x445
   15c14:	add	r0, pc, r0
   15c18:	add	r1, pc, r1
   15c1c:	add	r3, pc, r3
   15c20:	bl	12f04 <__assert_fail@plt>
   15c24:	ldr	r0, [pc, #48]	; 15c5c <test_string@@Base+0x2d8>
   15c28:	add	r0, pc, r0
   15c2c:	ldr	r1, [pc, #44]	; 15c60 <test_string@@Base+0x2dc>
   15c30:	ldr	r3, [pc, #44]	; 15c64 <test_string@@Base+0x2e0>
   15c34:	movw	r2, #699	; 0x2bb
   15c38:	add	r1, pc, r1
   15c3c:	add	r3, pc, r3
   15c40:	bl	12f04 <__assert_fail@plt>
   15c44:	andeq	pc, r0, r8, asr r2	; <UNPREDICTABLE>
   15c48:	strdeq	pc, [r0], -r9
   15c4c:	strdeq	pc, [r0], -fp
   15c50:	andeq	pc, r0, r2, lsl #16
   15c54:	andeq	r2, r1, r8, asr #8
   15c58:	muleq	r1, r9, r2
   15c5c:	muleq	r0, sl, ip
   15c60:			; <UNDEFINED> instruction: 0x0000fcb0
   15c64:	andeq	r0, r1, r8, ror #2
   15c68:	andeq	pc, r0, sl, asr r7	; <UNPREDICTABLE>
   15c6c:	muleq	r1, lr, r4
   15c70:	andeq	pc, r0, sp, asr #12
   15c74:	andeq	pc, r0, r0, ror r2	; <UNPREDICTABLE>
   15c78:	andeq	pc, r0, fp, ror #12
   15c7c:	andeq	pc, r0, ip, ror r6	; <UNPREDICTABLE>
   15c80:	andeq	pc, r0, r0, asr r2	; <UNPREDICTABLE>
   15c84:	andeq	pc, r0, fp, asr #12
   15c88:	andeq	pc, r0, r5, lsl #13
   15c8c:	andeq	pc, r0, r0, lsr r2	; <UNPREDICTABLE>
   15c90:	andeq	pc, r0, fp, lsr #12
   15c94:	andeq	pc, r0, ip, lsl #13
   15c98:	andeq	pc, r0, r0, lsl r2	; <UNPREDICTABLE>
   15c9c:	andeq	pc, r0, fp, lsl #12
   15ca0:	muleq	r0, sp, pc	; <UNPREDICTABLE>
   15ca4:	andeq	pc, r0, r0, ror #28
   15ca8:	andeq	r0, r1, r7, lsr r0
   15cac:	andeq	pc, r0, r7, lsl #15
   15cb0:	ldrdeq	pc, [r0], -r0
   15cb4:	andeq	pc, r0, fp, asr #11

00015cb8 <test_sort_find@@Base>:
   15cb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cbc:	add	fp, sp, #28
   15cc0:	sub	sp, sp, #20
   15cc4:	mov	r4, r0
   15cc8:	bl	1e2ac <flatcc_builder_reset@@Base>
   15ccc:	ldr	r1, [pc, #2868]	; 16808 <test_sort_find@@Base+0xb50>
   15cd0:	mov	r0, r4
   15cd4:	mov	r2, #0
   15cd8:	mov	r3, #0
   15cdc:	add	r1, pc, r1
   15ce0:	bl	1eea8 <flatcc_builder_start_buffer@@Base>
   15ce4:	cmp	r0, #0
   15ce8:	bne	15cf8 <test_sort_find@@Base+0x40>
   15cec:	mov	r0, r4
   15cf0:	mov	r1, #36	; 0x24
   15cf4:	bl	20484 <flatcc_builder_start_table@@Base>
   15cf8:	ldr	r1, [pc, #2828]	; 1680c <test_sort_find@@Base+0xb54>
   15cfc:	mov	r0, r4
   15d00:	add	r1, pc, r1
   15d04:	bl	227bc <flatcc_builder_create_string_str@@Base>
   15d08:	cmp	r0, #0
   15d0c:	beq	15d28 <test_sort_find@@Base+0x70>
   15d10:	mov	r5, r0
   15d14:	mov	r0, r4
   15d18:	mov	r1, #3
   15d1c:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   15d20:	cmp	r0, #0
   15d24:	strne	r5, [r0]
   15d28:	mov	r0, r4
   15d2c:	bl	20000 <flatcc_builder_start_offset_vector@@Base>
   15d30:	mov	r0, r4
   15d34:	mov	r1, #36	; 0x24
   15d38:	bl	20484 <flatcc_builder_start_table@@Base>
   15d3c:	ldr	r1, [pc, #2764]	; 16810 <test_sort_find@@Base+0xb58>
   15d40:	mov	r0, r4
   15d44:	add	r1, pc, r1
   15d48:	bl	227bc <flatcc_builder_create_string_str@@Base>
   15d4c:	cmp	r0, #0
   15d50:	beq	15d6c <test_sort_find@@Base+0xb4>
   15d54:	mov	r5, r0
   15d58:	mov	r0, r4
   15d5c:	mov	r1, #3
   15d60:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   15d64:	cmp	r0, #0
   15d68:	strne	r5, [r0]
   15d6c:	ldr	r1, [pc, #2720]	; 16814 <test_sort_find@@Base+0xb5c>
   15d70:	mov	r0, r4
   15d74:	mov	r2, #1
   15d78:	add	r1, pc, r1
   15d7c:	bl	20e20 <flatcc_builder_check_required@@Base>
   15d80:	cmp	r0, #0
   15d84:	beq	16768 <test_sort_find@@Base+0xab0>
   15d88:	mov	r0, r4
   15d8c:	bl	20eac <flatcc_builder_end_table@@Base>
   15d90:	cmp	r0, #0
   15d94:	beq	15da4 <test_sort_find@@Base+0xec>
   15d98:	mov	r1, r0
   15d9c:	mov	r0, r4
   15da0:	bl	1f848 <flatcc_builder_offset_vector_push@@Base>
   15da4:	mov	r0, r4
   15da8:	mov	r1, #36	; 0x24
   15dac:	bl	20484 <flatcc_builder_start_table@@Base>
   15db0:	ldr	r1, [pc, #2656]	; 16818 <test_sort_find@@Base+0xb60>
   15db4:	mov	r0, r4
   15db8:	add	r1, pc, r1
   15dbc:	bl	227bc <flatcc_builder_create_string_str@@Base>
   15dc0:	cmp	r0, #0
   15dc4:	beq	15de0 <test_sort_find@@Base+0x128>
   15dc8:	mov	r5, r0
   15dcc:	mov	r0, r4
   15dd0:	mov	r1, #3
   15dd4:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   15dd8:	cmp	r0, #0
   15ddc:	strne	r5, [r0]
   15de0:	ldr	r1, [pc, #2612]	; 1681c <test_sort_find@@Base+0xb64>
   15de4:	mov	r0, r4
   15de8:	mov	r2, #1
   15dec:	add	r1, pc, r1
   15df0:	bl	20e20 <flatcc_builder_check_required@@Base>
   15df4:	cmp	r0, #0
   15df8:	beq	16768 <test_sort_find@@Base+0xab0>
   15dfc:	mov	r0, r4
   15e00:	bl	20eac <flatcc_builder_end_table@@Base>
   15e04:	cmp	r0, #0
   15e08:	beq	15e18 <test_sort_find@@Base+0x160>
   15e0c:	mov	r1, r0
   15e10:	mov	r0, r4
   15e14:	bl	1f848 <flatcc_builder_offset_vector_push@@Base>
   15e18:	mov	r0, r4
   15e1c:	mov	r1, #36	; 0x24
   15e20:	bl	20484 <flatcc_builder_start_table@@Base>
   15e24:	ldr	r1, [pc, #2548]	; 16820 <test_sort_find@@Base+0xb68>
   15e28:	mov	r0, r4
   15e2c:	add	r1, pc, r1
   15e30:	bl	227bc <flatcc_builder_create_string_str@@Base>
   15e34:	cmp	r0, #0
   15e38:	beq	15e54 <test_sort_find@@Base+0x19c>
   15e3c:	mov	r5, r0
   15e40:	mov	r0, r4
   15e44:	mov	r1, #3
   15e48:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   15e4c:	cmp	r0, #0
   15e50:	strne	r5, [r0]
   15e54:	ldr	r1, [pc, #2504]	; 16824 <test_sort_find@@Base+0xb6c>
   15e58:	mov	r0, r4
   15e5c:	mov	r2, #1
   15e60:	add	r1, pc, r1
   15e64:	bl	20e20 <flatcc_builder_check_required@@Base>
   15e68:	cmp	r0, #0
   15e6c:	beq	16768 <test_sort_find@@Base+0xab0>
   15e70:	mov	r0, r4
   15e74:	bl	20eac <flatcc_builder_end_table@@Base>
   15e78:	cmp	r0, #0
   15e7c:	beq	15e8c <test_sort_find@@Base+0x1d4>
   15e80:	mov	r1, r0
   15e84:	mov	r0, r4
   15e88:	bl	1f848 <flatcc_builder_offset_vector_push@@Base>
   15e8c:	mov	r0, r4
   15e90:	mov	r1, #36	; 0x24
   15e94:	bl	20484 <flatcc_builder_start_table@@Base>
   15e98:	ldr	r1, [pc, #2440]	; 16828 <test_sort_find@@Base+0xb70>
   15e9c:	mov	r0, r4
   15ea0:	add	r1, pc, r1
   15ea4:	bl	227bc <flatcc_builder_create_string_str@@Base>
   15ea8:	cmp	r0, #0
   15eac:	beq	15ec8 <test_sort_find@@Base+0x210>
   15eb0:	mov	r5, r0
   15eb4:	mov	r0, r4
   15eb8:	mov	r1, #3
   15ebc:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   15ec0:	cmp	r0, #0
   15ec4:	strne	r5, [r0]
   15ec8:	ldr	r1, [pc, #2396]	; 1682c <test_sort_find@@Base+0xb74>
   15ecc:	mov	r0, r4
   15ed0:	mov	r2, #1
   15ed4:	add	r1, pc, r1
   15ed8:	bl	20e20 <flatcc_builder_check_required@@Base>
   15edc:	cmp	r0, #0
   15ee0:	beq	16768 <test_sort_find@@Base+0xab0>
   15ee4:	mov	r0, r4
   15ee8:	bl	20eac <flatcc_builder_end_table@@Base>
   15eec:	cmp	r0, #0
   15ef0:	beq	15f00 <test_sort_find@@Base+0x248>
   15ef4:	mov	r1, r0
   15ef8:	mov	r0, r4
   15efc:	bl	1f848 <flatcc_builder_offset_vector_push@@Base>
   15f00:	mov	r0, r4
   15f04:	mov	r1, #36	; 0x24
   15f08:	bl	20484 <flatcc_builder_start_table@@Base>
   15f0c:	ldr	r1, [pc, #2332]	; 16830 <test_sort_find@@Base+0xb78>
   15f10:	mov	r0, r4
   15f14:	add	r1, pc, r1
   15f18:	bl	227bc <flatcc_builder_create_string_str@@Base>
   15f1c:	cmp	r0, #0
   15f20:	beq	15f3c <test_sort_find@@Base+0x284>
   15f24:	mov	r5, r0
   15f28:	mov	r0, r4
   15f2c:	mov	r1, #3
   15f30:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   15f34:	cmp	r0, #0
   15f38:	strne	r5, [r0]
   15f3c:	ldr	r1, [pc, #2288]	; 16834 <test_sort_find@@Base+0xb7c>
   15f40:	mov	r0, r4
   15f44:	mov	r2, #1
   15f48:	add	r1, pc, r1
   15f4c:	bl	20e20 <flatcc_builder_check_required@@Base>
   15f50:	cmp	r0, #0
   15f54:	beq	16768 <test_sort_find@@Base+0xab0>
   15f58:	mov	r0, r4
   15f5c:	bl	20eac <flatcc_builder_end_table@@Base>
   15f60:	cmp	r0, #0
   15f64:	beq	15f74 <test_sort_find@@Base+0x2bc>
   15f68:	mov	r1, r0
   15f6c:	mov	r0, r4
   15f70:	bl	1f848 <flatcc_builder_offset_vector_push@@Base>
   15f74:	mov	r0, r4
   15f78:	bl	201e8 <flatcc_builder_end_offset_vector@@Base>
   15f7c:	cmp	r0, #0
   15f80:	beq	15f9c <test_sort_find@@Base+0x2e4>
   15f84:	mov	r5, r0
   15f88:	mov	r0, r4
   15f8c:	mov	r1, #11
   15f90:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   15f94:	cmp	r0, #0
   15f98:	strne	r5, [r0]
   15f9c:	ldr	r1, [pc, #2196]	; 16838 <test_sort_find@@Base+0xb80>
   15fa0:	mov	r0, r4
   15fa4:	mov	r2, #1
   15fa8:	add	r1, pc, r1
   15fac:	bl	20e20 <flatcc_builder_check_required@@Base>
   15fb0:	cmp	r0, #0
   15fb4:	beq	16768 <test_sort_find@@Base+0xab0>
   15fb8:	mov	r0, r4
   15fbc:	bl	20eac <flatcc_builder_end_table@@Base>
   15fc0:	mov	r1, r0
   15fc4:	mov	r0, r4
   15fc8:	bl	1f0a8 <flatcc_builder_end_buffer@@Base>
   15fcc:	add	r1, sp, #16
   15fd0:	mov	r0, r4
   15fd4:	bl	22c54 <flatcc_builder_finalize_aligned_buffer@@Base>
   15fd8:	ldr	r9, [pc, #2140]	; 1683c <test_sort_find@@Base+0xb84>
   15fdc:	mov	r4, r0
   15fe0:	mov	r1, r4
   15fe4:	ldr	r9, [pc, r9]
   15fe8:	ldr	r2, [sp, #16]
   15fec:	ldr	r3, [r9]
   15ff0:	ldr	r0, [pc, #2120]	; 16840 <test_sort_find@@Base+0xb88>
   15ff4:	add	r0, pc, r0
   15ff8:	bl	1361c <test_type_aliases@@Base+0x554>
   15ffc:	cmp	r4, #0
   16000:	beq	16788 <test_sort_find@@Base+0xad0>
   16004:	ldr	r0, [r4, #4]
   16008:	movw	r1, #20301	; 0x4f4d
   1600c:	movt	r1, #21326	; 0x534e
   16010:	cmp	r0, r1
   16014:	bne	16788 <test_sort_find@@Base+0xad0>
   16018:	ldr	r1, [r4]
   1601c:	str	r4, [sp, #12]
   16020:	ldr	r2, [r4, r1]!
   16024:	str	r1, [sp, #8]
   16028:	mov	r1, r4
   1602c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   16030:	cmp	r2, #27
   16034:	bls	167a8 <test_sort_find@@Base+0xaf0>
   16038:	ldrh	r1, [r1, #26]
   1603c:	cmp	r1, #0
   16040:	beq	167a8 <test_sort_find@@Base+0xaf0>
   16044:	str	r1, [sp, #4]
   16048:	ldr	r1, [r4, r1]!
   1604c:	ldr	sl, [r4, r1]!
   16050:	str	r1, [sp]
   16054:	add	r5, r4, #4
   16058:	cmp	sl, #0
   1605c:	beq	160fc <test_sort_find@@Base+0x444>
   16060:	lsr	r7, sl, #1
   16064:	sub	r6, sl, #1
   16068:	mov	r0, r5
   1606c:	mov	r1, r7
   16070:	mov	r2, r6
   16074:	bl	1dcc4 <main@@Base+0xcec>
   16078:	sub	r7, r7, #1
   1607c:	cmn	r7, #1
   16080:	bne	16068 <test_sort_find@@Base+0x3b0>
   16084:	cmp	r6, #0
   16088:	beq	160fc <test_sort_find@@Base+0x444>
   1608c:	mvn	r0, #3
   16090:	ldr	r1, [sp]
   16094:	sub	r6, sl, #2
   16098:	add	r7, r0, sl, lsl #2
   1609c:	mov	r0, #4
   160a0:	sub	r8, r0, sl, lsl #2
   160a4:	ldr	r0, [sp, #8]
   160a8:	add	r0, r1, r0
   160ac:	ldr	r1, [sp, #4]
   160b0:	add	r0, r0, sl, lsl #2
   160b4:	add	r0, r0, r1
   160b8:	ldr	r1, [sp, #12]
   160bc:	add	r4, r1, r0
   160c0:	ldr	r0, [r4]
   160c4:	ldr	r1, [r5]
   160c8:	mov	r2, r6
   160cc:	add	r0, r7, r0
   160d0:	str	r0, [r5]
   160d4:	add	r0, r8, r1
   160d8:	mov	r1, #0
   160dc:	str	r0, [r4], #-4
   160e0:	mov	r0, r5
   160e4:	bl	1dcc4 <main@@Base+0xcec>
   160e8:	sub	r6, r6, #1
   160ec:	sub	r7, r7, #4
   160f0:	add	r8, r8, #4
   160f4:	cmn	r6, #1
   160f8:	bne	160c0 <test_sort_find@@Base+0x408>
   160fc:	ldr	r3, [r9]
   16100:	ldr	r2, [sp, #16]
   16104:	ldr	r0, [pc, #1848]	; 16844 <test_sort_find@@Base+0xb8c>
   16108:	ldr	r4, [sp, #12]
   1610c:	add	r0, pc, r0
   16110:	mov	r1, r4
   16114:	bl	1361c <test_type_aliases@@Base+0x554>
   16118:	ldr	r0, [r5, #-4]
   1611c:	cmp	r0, #5
   16120:	bne	16178 <test_sort_find@@Base+0x4c0>
   16124:	ldr	r1, [r5]
   16128:	mov	r0, r5
   1612c:	ldr	r2, [r0, r1]!
   16130:	mov	r1, r0
   16134:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   16138:	cmp	r2, #12
   1613c:	bcc	167c8 <test_sort_find@@Base+0xb10>
   16140:	ldrh	r1, [r1, #10]
   16144:	cmp	r1, #0
   16148:	beq	167c8 <test_sort_find@@Base+0xb10>
   1614c:	ldr	r1, [r0, r1]!
   16150:	add	r0, r0, r1
   16154:	ldr	r1, [pc, #1776]	; 1684c <test_sort_find@@Base+0xb94>
   16158:	add	r0, r0, #4
   1615c:	add	r1, pc, r1
   16160:	bl	12e08 <strcmp@plt>
   16164:	cmp	r0, #0
   16168:	beq	1619c <test_sort_find@@Base+0x4e4>
   1616c:	ldr	r0, [pc, #1756]	; 16850 <test_sort_find@@Base+0xb98>
   16170:	add	r0, pc, r0
   16174:	b	16180 <test_sort_find@@Base+0x4c8>
   16178:	ldr	r0, [pc, #1736]	; 16848 <test_sort_find@@Base+0xb90>
   1617c:	add	r0, pc, r0
   16180:	bl	12e5c <puts@plt>
   16184:	mvn	r6, #0
   16188:	mov	r0, r4
   1618c:	bl	22d94 <flatcc_builder_aligned_free@@Base>
   16190:	mov	r0, r6
   16194:	sub	sp, fp, #28
   16198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1619c:	mov	r6, r5
   161a0:	ldr	r0, [r6, #4]!
   161a4:	ldr	r1, [r6, r0]!
   161a8:	mov	r0, r6
   161ac:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   161b0:	cmp	r1, #12
   161b4:	bcc	167c8 <test_sort_find@@Base+0xb10>
   161b8:	ldrh	r0, [r0, #10]
   161bc:	cmp	r0, #0
   161c0:	beq	167c8 <test_sort_find@@Base+0xb10>
   161c4:	mov	r1, r6
   161c8:	ldr	r0, [r1, r0]!
   161cc:	add	r0, r1, r0
   161d0:	ldr	r1, [pc, #1660]	; 16854 <test_sort_find@@Base+0xb9c>
   161d4:	add	r0, r0, #4
   161d8:	add	r1, pc, r1
   161dc:	bl	12e08 <strcmp@plt>
   161e0:	cmp	r0, #0
   161e4:	beq	161f4 <test_sort_find@@Base+0x53c>
   161e8:	ldr	r0, [pc, #1640]	; 16858 <test_sort_find@@Base+0xba0>
   161ec:	add	r0, pc, r0
   161f0:	b	16180 <test_sort_find@@Base+0x4c8>
   161f4:	mov	r7, r5
   161f8:	ldr	r0, [r7, #8]!
   161fc:	ldr	r1, [r7, r0]!
   16200:	mov	r0, r7
   16204:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   16208:	cmp	r1, #12
   1620c:	bcc	167c8 <test_sort_find@@Base+0xb10>
   16210:	ldrh	r0, [r0, #10]
   16214:	cmp	r0, #0
   16218:	beq	167c8 <test_sort_find@@Base+0xb10>
   1621c:	mov	r1, r7
   16220:	ldr	r0, [r1, r0]!
   16224:	add	r0, r1, r0
   16228:	ldr	r1, [pc, #1580]	; 1685c <test_sort_find@@Base+0xba4>
   1622c:	add	r0, r0, #4
   16230:	add	r1, pc, r1
   16234:	bl	12e08 <strcmp@plt>
   16238:	cmp	r0, #0
   1623c:	beq	1624c <test_sort_find@@Base+0x594>
   16240:	ldr	r0, [pc, #1560]	; 16860 <test_sort_find@@Base+0xba8>
   16244:	add	r0, pc, r0
   16248:	b	16180 <test_sort_find@@Base+0x4c8>
   1624c:	mov	r0, r5
   16250:	ldr	r1, [r0, #12]!
   16254:	ldr	r2, [r0, r1]!
   16258:	mov	r1, r0
   1625c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   16260:	cmp	r2, #12
   16264:	bcc	167c8 <test_sort_find@@Base+0xb10>
   16268:	ldrh	r1, [r1, #10]
   1626c:	cmp	r1, #0
   16270:	beq	167c8 <test_sort_find@@Base+0xb10>
   16274:	ldr	r1, [r0, r1]!
   16278:	add	r0, r0, r1
   1627c:	ldr	r1, [pc, #1504]	; 16864 <test_sort_find@@Base+0xbac>
   16280:	add	r0, r0, #4
   16284:	add	r1, pc, r1
   16288:	bl	12e08 <strcmp@plt>
   1628c:	cmp	r0, #0
   16290:	beq	162a0 <test_sort_find@@Base+0x5e8>
   16294:	ldr	r0, [pc, #1484]	; 16868 <test_sort_find@@Base+0xbb0>
   16298:	add	r0, pc, r0
   1629c:	b	16180 <test_sort_find@@Base+0x4c8>
   162a0:	mov	r0, r5
   162a4:	ldr	r1, [r0, #16]!
   162a8:	ldr	r2, [r0, r1]!
   162ac:	mov	r1, r0
   162b0:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   162b4:	cmp	r2, #12
   162b8:	bcc	167c8 <test_sort_find@@Base+0xb10>
   162bc:	ldrh	r1, [r1, #10]
   162c0:	cmp	r1, #0
   162c4:	beq	167c8 <test_sort_find@@Base+0xb10>
   162c8:	ldr	r1, [r0, r1]!
   162cc:	add	r0, r0, r1
   162d0:	ldr	r1, [pc, #1428]	; 1686c <test_sort_find@@Base+0xbb4>
   162d4:	add	r0, r0, #4
   162d8:	add	r1, pc, r1
   162dc:	bl	12e08 <strcmp@plt>
   162e0:	cmp	r0, #0
   162e4:	beq	162f4 <test_sort_find@@Base+0x63c>
   162e8:	ldr	r0, [pc, #1408]	; 16870 <test_sort_find@@Base+0xbb8>
   162ec:	add	r0, pc, r0
   162f0:	b	16180 <test_sort_find@@Base+0x4c8>
   162f4:	cmp	r6, r7
   162f8:	beq	16464 <test_sort_find@@Base+0x7ac>
   162fc:	ldr	r1, [pc, #1396]	; 16878 <test_sort_find@@Base+0xbc0>
   16300:	mov	r0, r5
   16304:	add	r1, pc, r1
   16308:	bl	16900 <test_sort_find@@Base+0xc48>
   1630c:	cmp	r0, #3
   16310:	bne	16470 <test_sort_find@@Base+0x7b8>
   16314:	ldr	r8, [r5, #-4]
   16318:	cmp	r8, #0
   1631c:	beq	16458 <test_sort_find@@Base+0x7a0>
   16320:	mov	r7, #0
   16324:	subs	r9, r8, #1
   16328:	beq	163d4 <test_sort_find@@Base+0x71c>
   1632c:	ldr	sl, [pc, #1356]	; 16880 <test_sort_find@@Base+0xbc8>
   16330:	add	sl, pc, sl
   16334:	sub	r0, r9, r7
   16338:	add	r6, r7, r0, lsr #1
   1633c:	cmp	r8, r6
   16340:	bls	167e8 <test_sort_find@@Base+0xb30>
   16344:	mov	r0, r5
   16348:	ldr	r1, [r0, r6, lsl #2]!
   1634c:	ldr	r2, [r0, r1]!
   16350:	mov	r1, r0
   16354:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   16358:	cmp	r2, #12
   1635c:	bcc	167c8 <test_sort_find@@Base+0xb10>
   16360:	ldrh	r1, [r1, #10]
   16364:	cmp	r1, #0
   16368:	beq	167c8 <test_sort_find@@Base+0xb10>
   1636c:	ldr	r1, [r0, r1]!
   16370:	ldr	r4, [r0, r1]!
   16374:	mov	r1, sl
   16378:	add	r0, r0, #4
   1637c:	cmp	r4, #5
   16380:	mov	r2, r4
   16384:	movcs	r2, #5
   16388:	bl	12eec <strncmp@plt>
   1638c:	cmp	r0, #1
   16390:	mov	r1, #0
   16394:	mov	r2, #0
   16398:	movwlt	r1, #1
   1639c:	cmp	r0, #0
   163a0:	movwne	r0, #1
   163a4:	cmp	r4, #5
   163a8:	ldr	r4, [sp, #12]
   163ac:	movwcc	r2, #1
   163b0:	orr	r0, r2, r0
   163b4:	ands	r0, r0, r1
   163b8:	moveq	r9, r6
   163bc:	addne	r7, r6, #1
   163c0:	cmp	r9, r7
   163c4:	bhi	16334 <test_sort_find@@Base+0x67c>
   163c8:	bne	16458 <test_sort_find@@Base+0x7a0>
   163cc:	cmp	r8, r7
   163d0:	bls	167e8 <test_sort_find@@Base+0xb30>
   163d4:	mov	r0, r5
   163d8:	ldr	r1, [r0, r7, lsl #2]!
   163dc:	ldr	r2, [r0, r1]!
   163e0:	mov	r1, r0
   163e4:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   163e8:	cmp	r2, #12
   163ec:	bcc	167c8 <test_sort_find@@Base+0xb10>
   163f0:	ldrh	r1, [r1, #10]
   163f4:	cmp	r1, #0
   163f8:	beq	167c8 <test_sort_find@@Base+0xb10>
   163fc:	ldr	r1, [r0, r1]!
   16400:	ldr	r4, [r0, r1]!
   16404:	ldr	r1, [pc, #1144]	; 16884 <test_sort_find@@Base+0xbcc>
   16408:	add	r0, r0, #4
   1640c:	cmp	r4, #5
   16410:	mov	r2, r4
   16414:	add	r1, pc, r1
   16418:	movcs	r2, #5
   1641c:	bl	12eec <strncmp@plt>
   16420:	cmp	r0, #0
   16424:	mov	r2, r0
   16428:	mov	r1, #0
   1642c:	mvneq	r2, #0
   16430:	cmp	r4, #5
   16434:	movwhi	r1, #1
   16438:	cmp	r0, #0
   1643c:	movne	r1, r2
   16440:	cmp	r4, #5
   16444:	ldr	r4, [sp, #12]
   16448:	movcc	r1, r2
   1644c:	cmp	r7, #3
   16450:	cmpeq	r1, #0
   16454:	beq	1647c <test_sort_find@@Base+0x7c4>
   16458:	ldr	r0, [pc, #1064]	; 16888 <test_sort_find@@Base+0xbd0>
   1645c:	add	r0, pc, r0
   16460:	b	16180 <test_sort_find@@Base+0x4c8>
   16464:	ldr	r0, [pc, #1032]	; 16874 <test_sort_find@@Base+0xbbc>
   16468:	add	r0, pc, r0
   1646c:	b	16180 <test_sort_find@@Base+0x4c8>
   16470:	ldr	r0, [pc, #1028]	; 1687c <test_sort_find@@Base+0xbc4>
   16474:	add	r0, pc, r0
   16478:	b	16180 <test_sort_find@@Base+0x4c8>
   1647c:	ldr	r1, [pc, #1032]	; 1688c <test_sort_find@@Base+0xbd4>
   16480:	mov	r0, r5
   16484:	add	r1, pc, r1
   16488:	bl	16900 <test_sort_find@@Base+0xc48>
   1648c:	cmp	r0, #3
   16490:	bne	165e4 <test_sort_find@@Base+0x92c>
   16494:	ldr	r8, [r5, #-4]
   16498:	cmp	r8, #0
   1649c:	beq	165d8 <test_sort_find@@Base+0x920>
   164a0:	mov	r7, #0
   164a4:	subs	r9, r8, #1
   164a8:	beq	16554 <test_sort_find@@Base+0x89c>
   164ac:	ldr	sl, [pc, #992]	; 16894 <test_sort_find@@Base+0xbdc>
   164b0:	add	sl, pc, sl
   164b4:	sub	r0, r9, r7
   164b8:	add	r6, r7, r0, lsr #1
   164bc:	cmp	r8, r6
   164c0:	bls	167e8 <test_sort_find@@Base+0xb30>
   164c4:	mov	r0, r5
   164c8:	ldr	r1, [r0, r6, lsl #2]!
   164cc:	ldr	r2, [r0, r1]!
   164d0:	mov	r1, r0
   164d4:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   164d8:	cmp	r2, #12
   164dc:	bcc	167c8 <test_sort_find@@Base+0xb10>
   164e0:	ldrh	r1, [r1, #10]
   164e4:	cmp	r1, #0
   164e8:	beq	167c8 <test_sort_find@@Base+0xb10>
   164ec:	ldr	r1, [r0, r1]!
   164f0:	ldr	r4, [r0, r1]!
   164f4:	mov	r1, sl
   164f8:	add	r0, r0, #4
   164fc:	cmp	r4, #5
   16500:	mov	r2, r4
   16504:	movcs	r2, #5
   16508:	bl	12eec <strncmp@plt>
   1650c:	cmp	r0, #1
   16510:	mov	r1, #0
   16514:	mov	r2, #0
   16518:	movwlt	r1, #1
   1651c:	cmp	r0, #0
   16520:	movwne	r0, #1
   16524:	cmp	r4, #5
   16528:	movwcc	r2, #1
   1652c:	orr	r0, r2, r0
   16530:	ands	r0, r0, r1
   16534:	moveq	r9, r6
   16538:	addne	r7, r6, #1
   1653c:	cmp	r9, r7
   16540:	bhi	164b4 <test_sort_find@@Base+0x7fc>
   16544:	ldr	r4, [sp, #12]
   16548:	bne	165d8 <test_sort_find@@Base+0x920>
   1654c:	cmp	r8, r7
   16550:	bls	167e8 <test_sort_find@@Base+0xb30>
   16554:	mov	r0, r5
   16558:	ldr	r1, [r0, r7, lsl #2]!
   1655c:	ldr	r2, [r0, r1]!
   16560:	mov	r1, r0
   16564:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   16568:	cmp	r2, #12
   1656c:	bcc	167c8 <test_sort_find@@Base+0xb10>
   16570:	ldrh	r1, [r1, #10]
   16574:	cmp	r1, #0
   16578:	beq	167c8 <test_sort_find@@Base+0xb10>
   1657c:	ldr	r1, [r0, r1]!
   16580:	ldr	r4, [r0, r1]!
   16584:	ldr	r1, [pc, #780]	; 16898 <test_sort_find@@Base+0xbe0>
   16588:	add	r0, r0, #4
   1658c:	cmp	r4, #5
   16590:	mov	r2, r4
   16594:	add	r1, pc, r1
   16598:	movcs	r2, #5
   1659c:	bl	12eec <strncmp@plt>
   165a0:	cmp	r0, #0
   165a4:	mov	r2, r0
   165a8:	mov	r1, #0
   165ac:	mvneq	r2, #0
   165b0:	cmp	r4, #5
   165b4:	movwhi	r1, #1
   165b8:	cmp	r0, #0
   165bc:	movne	r1, r2
   165c0:	cmp	r4, #5
   165c4:	ldr	r4, [sp, #12]
   165c8:	movcc	r1, r2
   165cc:	cmp	r7, #3
   165d0:	cmpeq	r1, #0
   165d4:	beq	165f0 <test_sort_find@@Base+0x938>
   165d8:	ldr	r0, [pc, #700]	; 1689c <test_sort_find@@Base+0xbe4>
   165dc:	add	r0, pc, r0
   165e0:	b	16180 <test_sort_find@@Base+0x4c8>
   165e4:	ldr	r0, [pc, #676]	; 16890 <test_sort_find@@Base+0xbd8>
   165e8:	add	r0, pc, r0
   165ec:	b	16180 <test_sort_find@@Base+0x4c8>
   165f0:	ldr	r1, [pc, #680]	; 168a0 <test_sort_find@@Base+0xbe8>
   165f4:	mov	r0, r5
   165f8:	add	r1, pc, r1
   165fc:	bl	16900 <test_sort_find@@Base+0xc48>
   16600:	cmn	r0, #1
   16604:	beq	16614 <test_sort_find@@Base+0x95c>
   16608:	ldr	r0, [pc, #660]	; 168a4 <test_sort_find@@Base+0xbec>
   1660c:	add	r0, pc, r0
   16610:	b	16634 <test_sort_find@@Base+0x97c>
   16614:	ldr	r1, [pc, #652]	; 168a8 <test_sort_find@@Base+0xbf0>
   16618:	mov	r0, r5
   1661c:	add	r1, pc, r1
   16620:	bl	16900 <test_sort_find@@Base+0xc48>
   16624:	cmp	r0, #0
   16628:	beq	16640 <test_sort_find@@Base+0x988>
   1662c:	ldr	r0, [pc, #632]	; 168ac <test_sort_find@@Base+0xbf4>
   16630:	add	r0, pc, r0
   16634:	bl	12e5c <puts@plt>
   16638:	ldr	r4, [sp, #12]
   1663c:	b	16184 <test_sort_find@@Base+0x4cc>
   16640:	ldr	r1, [pc, #616]	; 168b0 <test_sort_find@@Base+0xbf8>
   16644:	mov	r0, r5
   16648:	add	r1, pc, r1
   1664c:	bl	16900 <test_sort_find@@Base+0xc48>
   16650:	cmp	r0, #1
   16654:	bne	1672c <test_sort_find@@Base+0xa74>
   16658:	ldr	r1, [pc, #604]	; 168bc <test_sort_find@@Base+0xc04>
   1665c:	mov	r0, r5
   16660:	add	r1, pc, r1
   16664:	bl	16900 <test_sort_find@@Base+0xc48>
   16668:	cmp	r0, #4
   1666c:	bne	1673c <test_sort_find@@Base+0xa84>
   16670:	ldr	sl, [r5, #-4]
   16674:	mov	r6, #0
   16678:	cmp	sl, #0
   1667c:	beq	16760 <test_sort_find@@Base+0xaa8>
   16680:	lsr	r7, sl, #1
   16684:	sub	r4, sl, #1
   16688:	mov	r0, r5
   1668c:	mov	r1, r7
   16690:	mov	r2, r4
   16694:	bl	1dcc4 <main@@Base+0xcec>
   16698:	sub	r7, r7, #1
   1669c:	cmn	r7, #1
   166a0:	bne	16688 <test_sort_find@@Base+0x9d0>
   166a4:	cmp	r4, #0
   166a8:	ldr	r4, [sp, #12]
   166ac:	beq	16188 <test_sort_find@@Base+0x4d0>
   166b0:	mvn	r0, #3
   166b4:	ldr	r1, [sp]
   166b8:	sub	r7, sl, #2
   166bc:	mov	r6, #0
   166c0:	add	r2, r0, sl, lsl #2
   166c4:	mov	r0, #4
   166c8:	sub	r9, r0, sl, lsl #2
   166cc:	ldr	r0, [sp, #8]
   166d0:	add	r0, r1, r0
   166d4:	ldr	r1, [sp, #4]
   166d8:	add	r0, r0, sl, lsl #2
   166dc:	add	r0, r0, r1
   166e0:	add	r8, r4, r0
   166e4:	ldr	r0, [r8]
   166e8:	ldr	r1, [r5]
   166ec:	mov	sl, r2
   166f0:	add	r0, r2, r0
   166f4:	mov	r2, r7
   166f8:	str	r0, [r5]
   166fc:	add	r0, r9, r1
   16700:	mov	r1, #0
   16704:	str	r0, [r8], #-4
   16708:	mov	r0, r5
   1670c:	bl	1dcc4 <main@@Base+0xcec>
   16710:	sub	sl, sl, #4
   16714:	sub	r7, r7, #1
   16718:	add	r9, r9, #4
   1671c:	mov	r2, sl
   16720:	cmn	r7, #1
   16724:	bne	166e4 <test_sort_find@@Base+0xa2c>
   16728:	b	16188 <test_sort_find@@Base+0x4d0>
   1672c:	mov	r6, r0
   16730:	ldr	r0, [pc, #380]	; 168b4 <test_sort_find@@Base+0xbfc>
   16734:	add	r0, pc, r0
   16738:	b	16748 <test_sort_find@@Base+0xa90>
   1673c:	mov	r6, r0
   16740:	ldr	r0, [pc, #376]	; 168c0 <test_sort_find@@Base+0xc08>
   16744:	add	r0, pc, r0
   16748:	bl	12e5c <puts@plt>
   1674c:	ldr	r0, [pc, #356]	; 168b8 <test_sort_find@@Base+0xc00>
   16750:	mov	r1, r6
   16754:	add	r0, pc, r0
   16758:	bl	12e14 <printf@plt>
   1675c:	b	16638 <test_sort_find@@Base+0x980>
   16760:	ldr	r4, [sp, #12]
   16764:	b	16188 <test_sort_find@@Base+0x4d0>
   16768:	ldr	r0, [pc, #340]	; 168c4 <test_sort_find@@Base+0xc0c>
   1676c:	ldr	r1, [pc, #340]	; 168c8 <test_sort_find@@Base+0xc10>
   16770:	ldr	r3, [pc, #340]	; 168cc <test_sort_find@@Base+0xc14>
   16774:	mov	r2, #235	; 0xeb
   16778:	add	r0, pc, r0
   1677c:	add	r1, pc, r1
   16780:	add	r3, pc, r3
   16784:	bl	12f04 <__assert_fail@plt>
   16788:	ldr	r0, [pc, #320]	; 168d0 <test_sort_find@@Base+0xc18>
   1678c:	ldr	r1, [pc, #320]	; 168d4 <test_sort_find@@Base+0xc1c>
   16790:	ldr	r3, [pc, #320]	; 168d8 <test_sort_find@@Base+0xc20>
   16794:	movw	r2, #711	; 0x2c7
   16798:	add	r0, pc, r0
   1679c:	add	r1, pc, r1
   167a0:	add	r3, pc, r3
   167a4:	bl	12f04 <__assert_fail@plt>
   167a8:	ldr	r0, [pc, #300]	; 168dc <test_sort_find@@Base+0xc24>
   167ac:	ldr	r1, [pc, #300]	; 168e0 <test_sort_find@@Base+0xc28>
   167b0:	ldr	r3, [pc, #300]	; 168e4 <test_sort_find@@Base+0xc2c>
   167b4:	movw	r2, #1147	; 0x47b
   167b8:	add	r0, pc, r0
   167bc:	add	r1, pc, r1
   167c0:	add	r3, pc, r3
   167c4:	bl	12f04 <__assert_fail@plt>
   167c8:	ldr	r0, [pc, #280]	; 168e8 <test_sort_find@@Base+0xc30>
   167cc:	ldr	r1, [pc, #280]	; 168ec <test_sort_find@@Base+0xc34>
   167d0:	ldr	r3, [pc, #280]	; 168f0 <test_sort_find@@Base+0xc38>
   167d4:	movw	r2, #699	; 0x2bb
   167d8:	add	r0, pc, r0
   167dc:	add	r1, pc, r1
   167e0:	add	r3, pc, r3
   167e4:	bl	12f04 <__assert_fail@plt>
   167e8:	ldr	r0, [pc, #260]	; 168f4 <test_sort_find@@Base+0xc3c>
   167ec:	ldr	r1, [pc, #260]	; 168f8 <test_sort_find@@Base+0xc40>
   167f0:	ldr	r3, [pc, #260]	; 168fc <test_sort_find@@Base+0xc44>
   167f4:	movw	r2, #693	; 0x2b5
   167f8:	add	r0, pc, r0
   167fc:	add	r1, pc, r1
   16800:	add	r3, pc, r3
   16804:	bl	12f04 <__assert_fail@plt>
   16808:	andeq	lr, r0, r0, lsr #30
   1680c:	andeq	lr, r0, r0, asr #30
   16810:	andeq	pc, r0, ip, lsl r1	; <UNPREDICTABLE>
   16814:	andeq	r2, r1, ip, ror r1
   16818:	andeq	r1, r1, r8, lsl #13
   1681c:	andeq	r2, r1, r8, lsl #2
   16820:	andeq	r1, r1, ip, ror #11
   16824:	muleq	r1, r4, r0
   16828:	andeq	pc, r0, lr, ror #7
   1682c:	andeq	r2, r1, r0, lsr #32
   16830:	andeq	r1, r1, r4, lsl #10
   16834:	andeq	r1, r1, ip, lsr #31
   16838:	andeq	r1, r1, ip, asr #30
   1683c:	andeq	r4, r2, ip, ror r0
   16840:	andeq	pc, r0, r0, lsr #5
   16844:	andeq	pc, r0, sl, lsl #3
   16848:	strdeq	r0, [r1], -r9
   1684c:	andeq	pc, r0, r2, lsr r1	; <UNPREDICTABLE>
   16850:	andeq	r0, r1, r8, ror #31
   16854:	andeq	r1, r1, r0, asr #4
   16858:	andeq	r0, r1, pc, asr #30
   1685c:	andeq	r1, r1, r8, ror #3
   16860:	ldrdeq	r0, [r1], -sl
   16864:			; <UNDEFINED> instruction: 0x000111bc
   16868:	andeq	r0, r1, r9, ror #28
   1686c:	andeq	lr, r0, r8, lsl #23
   16870:	strdeq	r0, [r1], -r8
   16874:	andeq	r0, r1, r5, lsr ip
   16878:	andeq	r1, r1, ip, lsr r1
   1687c:	strdeq	r0, [r1], -lr
   16880:	andeq	lr, r0, ip, lsr #31
   16884:	andeq	lr, r0, r8, asr #29
   16888:	andeq	r0, r1, r4, ror #23
   1688c:			; <UNDEFINED> instruction: 0x00010fbc
   16890:	andeq	r0, r1, ip, lsr sl
   16894:	andeq	lr, r0, r3, lsr lr
   16898:	andeq	lr, r0, pc, asr #26
   1689c:	andeq	r0, r1, r5, lsr #20
   168a0:	strdeq	lr, [r0], -r2
   168a4:	andeq	r0, r1, r2, ror pc
   168a8:	andeq	lr, r0, r2, ror ip
   168ac:	andeq	r0, r1, r1, asr #19
   168b0:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   168b4:	andeq	r0, r1, r1, ror #27
   168b8:	muleq	r0, sp, fp
   168bc:	andeq	lr, r0, r0, lsl #16
   168c0:	andeq	r0, r1, r8, lsr #28
   168c4:	andeq	pc, r0, r9, lsl r4	; <UNPREDICTABLE>
   168c8:	ldrdeq	pc, [r0], -ip
   168cc:			; <UNDEFINED> instruction: 0x0000f4b3
   168d0:	andeq	pc, r0, sl, lsr #2
   168d4:	andeq	pc, r0, ip, asr #2
   168d8:	andeq	pc, r0, r7, asr #15
   168dc:	strdeq	lr, [r0], -r4
   168e0:	andeq	lr, r0, ip, lsr #12
   168e4:	strdeq	lr, [r0], -r5
   168e8:	andeq	pc, r0, sp, lsl r6	; <UNPREDICTABLE>
   168ec:	andeq	pc, r0, ip, lsl #2
   168f0:	andeq	pc, r0, r4, asr #11
   168f4:	andeq	pc, r0, r7, ror r6	; <UNPREDICTABLE>
   168f8:	andeq	pc, r0, ip, ror #1
   168fc:	andeq	pc, r0, sp, asr #15
   16900:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16904:	add	fp, sp, #24
   16908:	mvn	r4, #0
   1690c:	cmp	r0, #0
   16910:	beq	169e0 <test_sort_find@@Base+0xd28>
   16914:	ldr	r7, [r0, #-4]
   16918:	mov	r9, r0
   1691c:	cmp	r7, #0
   16920:	beq	169e0 <test_sort_find@@Base+0xd28>
   16924:	mov	r8, r1
   16928:	mov	r4, #0
   1692c:	subs	r5, r7, #1
   16930:	beq	169a0 <test_sort_find@@Base+0xce8>
   16934:	sub	r0, r5, r4
   16938:	add	r6, r4, r0, lsr #1
   1693c:	cmp	r7, r6
   16940:	bls	16a14 <test_sort_find@@Base+0xd5c>
   16944:	mov	r0, r9
   16948:	ldr	r1, [r0, r6, lsl #2]!
   1694c:	ldr	r2, [r0, r1]!
   16950:	mov	r1, r0
   16954:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   16958:	cmp	r2, #12
   1695c:	bcc	169f4 <test_sort_find@@Base+0xd3c>
   16960:	ldrh	r1, [r1, #10]
   16964:	cmp	r1, #0
   16968:	beq	169f4 <test_sort_find@@Base+0xd3c>
   1696c:	ldr	r1, [r0, r1]!
   16970:	add	r0, r0, r1
   16974:	mov	r1, r8
   16978:	add	r0, r0, #4
   1697c:	bl	12e08 <strcmp@plt>
   16980:	cmp	r0, #0
   16984:	movpl	r5, r6
   16988:	addmi	r4, r6, #1
   1698c:	cmp	r5, r4
   16990:	bhi	16934 <test_sort_find@@Base+0xc7c>
   16994:	bne	169e8 <test_sort_find@@Base+0xd30>
   16998:	cmp	r7, r4
   1699c:	bls	16a14 <test_sort_find@@Base+0xd5c>
   169a0:	ldr	r0, [r9, r4, lsl #2]!
   169a4:	ldr	r1, [r9, r0]!
   169a8:	mov	r0, r9
   169ac:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   169b0:	cmp	r1, #12
   169b4:	bcc	169f4 <test_sort_find@@Base+0xd3c>
   169b8:	ldrh	r0, [r0, #10]
   169bc:	cmp	r0, #0
   169c0:	beq	169f4 <test_sort_find@@Base+0xd3c>
   169c4:	ldr	r0, [r9, r0]!
   169c8:	mov	r1, r8
   169cc:	add	r0, r9, r0
   169d0:	add	r0, r0, #4
   169d4:	bl	12e08 <strcmp@plt>
   169d8:	cmp	r0, #0
   169dc:	mvnne	r4, #0
   169e0:	mov	r0, r4
   169e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   169e8:	mvn	r4, #0
   169ec:	mov	r0, r4
   169f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   169f4:	ldr	r0, [pc, #68]	; 16a40 <test_sort_find@@Base+0xd88>
   169f8:	ldr	r1, [pc, #68]	; 16a44 <test_sort_find@@Base+0xd8c>
   169fc:	ldr	r3, [pc, #68]	; 16a48 <test_sort_find@@Base+0xd90>
   16a00:	movw	r2, #699	; 0x2bb
   16a04:	add	r0, pc, r0
   16a08:	add	r1, pc, r1
   16a0c:	add	r3, pc, r3
   16a10:	bl	12f04 <__assert_fail@plt>
   16a14:	ldr	r0, [pc, #24]	; 16a34 <test_sort_find@@Base+0xd7c>
   16a18:	ldr	r1, [pc, #24]	; 16a38 <test_sort_find@@Base+0xd80>
   16a1c:	ldr	r3, [pc, #24]	; 16a3c <test_sort_find@@Base+0xd84>
   16a20:	movw	r2, #693	; 0x2b5
   16a24:	add	r0, pc, r0
   16a28:	add	r1, pc, r1
   16a2c:	add	r3, pc, r3
   16a30:	bl	12f04 <__assert_fail@plt>
   16a34:	andeq	pc, r0, fp, asr #8
   16a38:	andeq	lr, r0, r0, asr #29
   16a3c:	andeq	pc, r0, r1, lsr #11
   16a40:	strdeq	pc, [r0], -r1
   16a44:	andeq	lr, r0, r0, ror #29
   16a48:	muleq	r0, r8, r3

00016a4c <test_scan@@Base>:
   16a4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a50:	add	fp, sp, #28
   16a54:	sub	sp, sp, #92	; 0x5c
   16a58:	mov	r4, r0
   16a5c:	movw	r0, #1027	; 0x403
   16a60:	movt	r0, #515	; 0x203
   16a64:	str	r0, [fp, #-37]	; 0xffffffdb
   16a68:	movw	r0, #1798	; 0x706
   16a6c:	movt	r0, #769	; 0x301
   16a70:	str	r0, [fp, #-40]	; 0xffffffd8
   16a74:	mov	r0, r4
   16a78:	bl	1e2ac <flatcc_builder_reset@@Base>
   16a7c:	ldr	r1, [pc, #3668]	; 178d8 <test_scan@@Base+0xe8c>
   16a80:	mov	r0, r4
   16a84:	mov	r2, #0
   16a88:	mov	r3, #0
   16a8c:	add	r1, pc, r1
   16a90:	bl	1eea8 <flatcc_builder_start_buffer@@Base>
   16a94:	cmp	r0, #0
   16a98:	bne	16aa8 <test_scan@@Base+0x5c>
   16a9c:	mov	r0, r4
   16aa0:	mov	r1, #36	; 0x24
   16aa4:	bl	20484 <flatcc_builder_start_table@@Base>
   16aa8:	ldr	r1, [pc, #4072]	; 17a98 <test_scan@@Base+0x104c>
   16aac:	mov	r0, r4
   16ab0:	add	r1, pc, r1
   16ab4:	bl	227bc <flatcc_builder_create_string_str@@Base>
   16ab8:	cmp	r0, #0
   16abc:	beq	16ad8 <test_scan@@Base+0x8c>
   16ac0:	mov	r5, r0
   16ac4:	mov	r0, r4
   16ac8:	mov	r1, #3
   16acc:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   16ad0:	cmp	r0, #0
   16ad4:	strne	r5, [r0]
   16ad8:	mvn	r0, #0
   16adc:	mov	r1, #1
   16ae0:	mov	r2, #7
   16ae4:	mov	r3, #1
   16ae8:	str	r1, [sp]
   16aec:	str	r0, [sp, #4]
   16af0:	sub	r1, fp, #40	; 0x28
   16af4:	mov	r0, r4
   16af8:	bl	21070 <flatcc_builder_create_vector@@Base>
   16afc:	cmp	r0, #0
   16b00:	beq	16b1c <test_scan@@Base+0xd0>
   16b04:	mov	r5, r0
   16b08:	mov	r0, r4
   16b0c:	mov	r1, #5
   16b10:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   16b14:	cmp	r0, #0
   16b18:	strne	r5, [r0]
   16b1c:	mov	r0, r4
   16b20:	bl	20000 <flatcc_builder_start_offset_vector@@Base>
   16b24:	mov	r0, r4
   16b28:	bl	201e8 <flatcc_builder_end_offset_vector@@Base>
   16b2c:	cmp	r0, #0
   16b30:	beq	16b4c <test_scan@@Base+0x100>
   16b34:	mov	r5, r0
   16b38:	mov	r0, r4
   16b3c:	mov	r1, #10
   16b40:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   16b44:	cmp	r0, #0
   16b48:	strne	r5, [r0]
   16b4c:	mov	r0, r4
   16b50:	bl	20000 <flatcc_builder_start_offset_vector@@Base>
   16b54:	mov	r0, r4
   16b58:	mov	r1, #36	; 0x24
   16b5c:	bl	20484 <flatcc_builder_start_table@@Base>
   16b60:	ldr	r1, [pc, #4076]	; 17b54 <test_scan@@Base+0x1108>
   16b64:	mov	r0, r4
   16b68:	add	r1, pc, r1
   16b6c:	bl	227bc <flatcc_builder_create_string_str@@Base>
   16b70:	cmp	r0, #0
   16b74:	beq	16b90 <test_scan@@Base+0x144>
   16b78:	mov	r5, r0
   16b7c:	mov	r0, r4
   16b80:	mov	r1, #3
   16b84:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   16b88:	cmp	r0, #0
   16b8c:	strne	r5, [r0]
   16b90:	ldr	r1, [pc, #4032]	; 17b58 <test_scan@@Base+0x110c>
   16b94:	mov	r0, r4
   16b98:	mov	r2, #1
   16b9c:	add	r1, pc, r1
   16ba0:	bl	20e20 <flatcc_builder_check_required@@Base>
   16ba4:	cmp	r0, #0
   16ba8:	beq	17a9c <test_scan@@Base+0x1050>
   16bac:	mov	r0, r4
   16bb0:	bl	20eac <flatcc_builder_end_table@@Base>
   16bb4:	cmp	r0, #0
   16bb8:	beq	16bc8 <test_scan@@Base+0x17c>
   16bbc:	mov	r1, r0
   16bc0:	mov	r0, r4
   16bc4:	bl	1f848 <flatcc_builder_offset_vector_push@@Base>
   16bc8:	mov	r0, r4
   16bcc:	mov	r1, #36	; 0x24
   16bd0:	bl	20484 <flatcc_builder_start_table@@Base>
   16bd4:	ldr	r1, [pc, #3968]	; 17b5c <test_scan@@Base+0x1110>
   16bd8:	mov	r0, r4
   16bdc:	add	r1, pc, r1
   16be0:	bl	227bc <flatcc_builder_create_string_str@@Base>
   16be4:	cmp	r0, #0
   16be8:	beq	16c04 <test_scan@@Base+0x1b8>
   16bec:	mov	r5, r0
   16bf0:	mov	r0, r4
   16bf4:	mov	r1, #3
   16bf8:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   16bfc:	cmp	r0, #0
   16c00:	strne	r5, [r0]
   16c04:	ldr	r1, [pc, #4080]	; 17bfc <test_scan@@Base+0x11b0>
   16c08:	mov	r0, r4
   16c0c:	mov	r2, #1
   16c10:	add	r1, pc, r1
   16c14:	bl	20e20 <flatcc_builder_check_required@@Base>
   16c18:	cmp	r0, #0
   16c1c:	beq	17a9c <test_scan@@Base+0x1050>
   16c20:	mov	r0, r4
   16c24:	bl	20eac <flatcc_builder_end_table@@Base>
   16c28:	cmp	r0, #0
   16c2c:	beq	16c3c <test_scan@@Base+0x1f0>
   16c30:	mov	r1, r0
   16c34:	mov	r0, r4
   16c38:	bl	1f848 <flatcc_builder_offset_vector_push@@Base>
   16c3c:	mov	r0, r4
   16c40:	mov	r1, #36	; 0x24
   16c44:	bl	20484 <flatcc_builder_start_table@@Base>
   16c48:	ldr	r1, [pc, #4016]	; 17c00 <test_scan@@Base+0x11b4>
   16c4c:	mov	r0, r4
   16c50:	add	r1, pc, r1
   16c54:	bl	227bc <flatcc_builder_create_string_str@@Base>
   16c58:	cmp	r0, #0
   16c5c:	beq	16c78 <test_scan@@Base+0x22c>
   16c60:	mov	r5, r0
   16c64:	mov	r0, r4
   16c68:	mov	r1, #3
   16c6c:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   16c70:	cmp	r0, #0
   16c74:	strne	r5, [r0]
   16c78:	ldr	r1, [pc, #3972]	; 17c04 <test_scan@@Base+0x11b8>
   16c7c:	mov	r0, r4
   16c80:	mov	r2, #1
   16c84:	add	r1, pc, r1
   16c88:	bl	20e20 <flatcc_builder_check_required@@Base>
   16c8c:	cmp	r0, #0
   16c90:	beq	17a9c <test_scan@@Base+0x1050>
   16c94:	mov	r0, r4
   16c98:	bl	20eac <flatcc_builder_end_table@@Base>
   16c9c:	cmp	r0, #0
   16ca0:	beq	16cb0 <test_scan@@Base+0x264>
   16ca4:	mov	r1, r0
   16ca8:	mov	r0, r4
   16cac:	bl	1f848 <flatcc_builder_offset_vector_push@@Base>
   16cb0:	mov	r0, r4
   16cb4:	mov	r1, #36	; 0x24
   16cb8:	bl	20484 <flatcc_builder_start_table@@Base>
   16cbc:	ldr	r1, [pc, #3908]	; 17c08 <test_scan@@Base+0x11bc>
   16cc0:	mov	r0, r4
   16cc4:	add	r1, pc, r1
   16cc8:	bl	227bc <flatcc_builder_create_string_str@@Base>
   16ccc:	cmp	r0, #0
   16cd0:	beq	16cec <test_scan@@Base+0x2a0>
   16cd4:	mov	r5, r0
   16cd8:	mov	r0, r4
   16cdc:	mov	r1, #3
   16ce0:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   16ce4:	cmp	r0, #0
   16ce8:	strne	r5, [r0]
   16cec:	ldr	r1, [pc, #3864]	; 17c0c <test_scan@@Base+0x11c0>
   16cf0:	mov	r0, r4
   16cf4:	mov	r2, #1
   16cf8:	add	r1, pc, r1
   16cfc:	bl	20e20 <flatcc_builder_check_required@@Base>
   16d00:	cmp	r0, #0
   16d04:	beq	17a9c <test_scan@@Base+0x1050>
   16d08:	mov	r0, r4
   16d0c:	bl	20eac <flatcc_builder_end_table@@Base>
   16d10:	cmp	r0, #0
   16d14:	beq	16d24 <test_scan@@Base+0x2d8>
   16d18:	mov	r1, r0
   16d1c:	mov	r0, r4
   16d20:	bl	1f848 <flatcc_builder_offset_vector_push@@Base>
   16d24:	mov	r0, r4
   16d28:	mov	r1, #36	; 0x24
   16d2c:	bl	20484 <flatcc_builder_start_table@@Base>
   16d30:	ldr	r1, [pc, #4088]	; 17d30 <test_scan@@Base+0x12e4>
   16d34:	mov	r0, r4
   16d38:	add	r1, pc, r1
   16d3c:	bl	227bc <flatcc_builder_create_string_str@@Base>
   16d40:	cmp	r0, #0
   16d44:	beq	16d60 <test_scan@@Base+0x314>
   16d48:	mov	r5, r0
   16d4c:	mov	r0, r4
   16d50:	mov	r1, #3
   16d54:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   16d58:	cmp	r0, #0
   16d5c:	strne	r5, [r0]
   16d60:	ldr	r1, [pc, #4056]	; 17d40 <test_scan@@Base+0x12f4>
   16d64:	mov	r0, r4
   16d68:	mov	r2, #1
   16d6c:	add	r1, pc, r1
   16d70:	bl	20e20 <flatcc_builder_check_required@@Base>
   16d74:	cmp	r0, #0
   16d78:	beq	17a9c <test_scan@@Base+0x1050>
   16d7c:	mov	r0, r4
   16d80:	bl	20eac <flatcc_builder_end_table@@Base>
   16d84:	cmp	r0, #0
   16d88:	beq	16d98 <test_scan@@Base+0x34c>
   16d8c:	mov	r1, r0
   16d90:	mov	r0, r4
   16d94:	bl	1f848 <flatcc_builder_offset_vector_push@@Base>
   16d98:	mov	r0, r4
   16d9c:	bl	201e8 <flatcc_builder_end_offset_vector@@Base>
   16da0:	cmp	r0, #0
   16da4:	beq	16dc0 <test_scan@@Base+0x374>
   16da8:	mov	r5, r0
   16dac:	mov	r0, r4
   16db0:	mov	r1, #11
   16db4:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   16db8:	cmp	r0, #0
   16dbc:	strne	r5, [r0]
   16dc0:	ldr	r1, [pc, #3964]	; 17d44 <test_scan@@Base+0x12f8>
   16dc4:	mov	r0, r4
   16dc8:	mov	r2, #1
   16dcc:	add	r1, pc, r1
   16dd0:	bl	20e20 <flatcc_builder_check_required@@Base>
   16dd4:	cmp	r0, #0
   16dd8:	beq	17a9c <test_scan@@Base+0x1050>
   16ddc:	mov	r0, r4
   16de0:	bl	20eac <flatcc_builder_end_table@@Base>
   16de4:	mov	r1, r0
   16de8:	mov	r0, r4
   16dec:	bl	1f0a8 <flatcc_builder_end_buffer@@Base>
   16df0:	sub	r1, fp, #32
   16df4:	mov	r0, r4
   16df8:	bl	22c54 <flatcc_builder_finalize_aligned_buffer@@Base>
   16dfc:	cmp	r0, #0
   16e00:	beq	17abc <test_scan@@Base+0x1070>
   16e04:	mov	r9, r0
   16e08:	ldr	r0, [r0, #4]
   16e0c:	movw	r1, #20301	; 0x4f4d
   16e10:	movt	r1, #21326	; 0x534e
   16e14:	cmp	r0, r1
   16e18:	bne	17abc <test_scan@@Base+0x1070>
   16e1c:	ldr	r1, [r9]
   16e20:	mov	r0, r9
   16e24:	ldr	r2, [r0, r1]!
   16e28:	str	r1, [fp, #-56]	; 0xffffffc8
   16e2c:	mov	r1, r0
   16e30:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   16e34:	cmp	r2, #27
   16e38:	bls	17adc <test_scan@@Base+0x1090>
   16e3c:	ldrh	r6, [r1, #26]
   16e40:	cmp	r6, #0
   16e44:	beq	17adc <test_scan@@Base+0x1090>
   16e48:	ldrh	r3, [r1, #14]
   16e4c:	cmp	r3, #0
   16e50:	mov	r2, r3
   16e54:	str	r3, [sp, #60]	; 0x3c
   16e58:	beq	17b08 <test_scan@@Base+0x10bc>
   16e5c:	ldrh	r2, [r1, #24]
   16e60:	cmp	r2, #0
   16e64:	mov	r1, r2
   16e68:	str	r2, [fp, #-52]	; 0xffffffcc
   16e6c:	beq	17b28 <test_scan@@Base+0x10dc>
   16e70:	mov	r2, r0
   16e74:	ldr	r1, [r2, r6]!
   16e78:	ldr	sl, [r2, r1]
   16e7c:	cmp	sl, #0
   16e80:	beq	170d8 <test_scan@@Base+0x68c>
   16e84:	ldr	r2, [sp, #60]	; 0x3c
   16e88:	mov	r3, r0
   16e8c:	mov	r4, #0
   16e90:	ldr	r2, [r3, r2]!
   16e94:	str	r3, [sp, #40]	; 0x28
   16e98:	str	r2, [sp, #44]	; 0x2c
   16e9c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16ea0:	ldr	r2, [r0, r2]!
   16ea4:	add	r0, r0, r2
   16ea8:	str	r2, [sp, #52]	; 0x34
   16eac:	add	r0, r0, #4
   16eb0:	str	r0, [sp, #48]	; 0x30
   16eb4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16eb8:	add	r8, r1, r0
   16ebc:	add	r0, r8, r6
   16ec0:	add	r0, r0, r9
   16ec4:	str	r0, [sp, #56]	; 0x38
   16ec8:	add	r7, r0, #8
   16ecc:	ldr	r5, [pc, #4028]	; 17e90 <test_scan@@Base+0x1444>
   16ed0:	add	r5, pc, r5
   16ed4:	cmp	sl, r4
   16ed8:	beq	18e04 <test_scan@@Base+0x23b8>
   16edc:	ldr	r0, [r7, #-4]
   16ee0:	add	r1, r7, r0
   16ee4:	ldr	r1, [r1, #-4]
   16ee8:	sub	r1, r0, r1
   16eec:	add	r1, r7, r1
   16ef0:	ldrh	r2, [r1, #-4]
   16ef4:	cmp	r2, #12
   16ef8:	bcc	184dc <test_scan@@Base+0x1a90>
   16efc:	ldrh	r1, [r1, #6]
   16f00:	cmp	r1, #0
   16f04:	beq	184dc <test_scan@@Base+0x1a90>
   16f08:	add	r2, r0, r1
   16f0c:	add	r2, r7, r2
   16f10:	ldr	r2, [r2, #-4]
   16f14:	add	r0, r2, r0
   16f18:	add	r0, r0, r1
   16f1c:	mov	r1, r5
   16f20:	add	r0, r7, r0
   16f24:	bl	12e08 <strcmp@plt>
   16f28:	cmp	r0, #0
   16f2c:	beq	16f44 <test_scan@@Base+0x4f8>
   16f30:	add	r4, r4, #1
   16f34:	add	r7, r7, #4
   16f38:	cmp	r4, sl
   16f3c:	bcc	16ed4 <test_scan@@Base+0x488>
   16f40:	b	170d8 <test_scan@@Base+0x68c>
   16f44:	cmp	r4, #1
   16f48:	bne	170d8 <test_scan@@Base+0x68c>
   16f4c:	add	r0, r8, sl, lsl #2
   16f50:	str	r8, [sp, #36]	; 0x24
   16f54:	mov	r4, #0
   16f58:	mov	r7, #0
   16f5c:	add	r0, r0, r6
   16f60:	str	r0, [sp, #32]
   16f64:	add	r8, r9, r0
   16f68:	sub	r0, sl, #1
   16f6c:	str	r0, [fp, #-48]	; 0xffffffd0
   16f70:	rsb	r0, sl, #0
   16f74:	str	r0, [fp, #-44]	; 0xffffffd4
   16f78:	ldr	r5, [pc, #4040]	; 17f48 <test_scan@@Base+0x14fc>
   16f7c:	add	r5, pc, r5
   16f80:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16f84:	cmp	r0, r7
   16f88:	beq	170fc <test_scan@@Base+0x6b0>
   16f8c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16f90:	add	r0, r0, r7
   16f94:	cmp	sl, r0
   16f98:	bls	18e04 <test_scan@@Base+0x23b8>
   16f9c:	ldr	r0, [r8, r7, lsl #2]
   16fa0:	add	r1, r8, r0
   16fa4:	ldr	r1, [r1, r7, lsl #2]
   16fa8:	sub	r1, r0, r1
   16fac:	add	r1, r4, r1
   16fb0:	add	r1, r8, r1
   16fb4:	ldrh	r2, [r1]
   16fb8:	cmp	r2, #12
   16fbc:	bcc	184dc <test_scan@@Base+0x1a90>
   16fc0:	ldrh	r1, [r1, #10]
   16fc4:	cmp	r1, #0
   16fc8:	beq	184dc <test_scan@@Base+0x1a90>
   16fcc:	add	r2, r0, r1
   16fd0:	add	r2, r8, r2
   16fd4:	ldr	r2, [r2, r7, lsl #2]
   16fd8:	add	r0, r2, r0
   16fdc:	add	r0, r0, r1
   16fe0:	mov	r1, r5
   16fe4:	add	r0, r4, r0
   16fe8:	add	r0, r8, r0
   16fec:	add	r0, r0, #4
   16ff0:	bl	12e08 <strcmp@plt>
   16ff4:	sub	r4, r4, #4
   16ff8:	sub	r7, r7, #1
   16ffc:	cmp	r0, #0
   17000:	bne	16f80 <test_scan@@Base+0x534>
   17004:	rsb	r0, sl, #1
   17008:	cmp	r0, r7
   1700c:	bne	170fc <test_scan@@Base+0x6b0>
   17010:	str	r6, [sp, #20]
   17014:	str	r0, [sp, #24]
   17018:	str	r9, [sp, #28]
   1701c:	ldr	r6, [sp, #56]	; 0x38
   17020:	mov	r7, #0
   17024:	ldr	r9, [pc, #4004]	; 17fd0 <test_scan@@Base+0x1584>
   17028:	add	r4, r6, #8
   1702c:	add	r9, pc, r9
   17030:	cmp	sl, r7
   17034:	beq	18e04 <test_scan@@Base+0x23b8>
   17038:	ldr	r0, [r4, #-4]
   1703c:	add	r1, r4, r0
   17040:	ldr	r1, [r1, #-4]
   17044:	sub	r1, r0, r1
   17048:	add	r1, r4, r1
   1704c:	ldrh	r2, [r1, #-4]
   17050:	cmp	r2, #12
   17054:	bcc	184dc <test_scan@@Base+0x1a90>
   17058:	ldrh	r1, [r1, #6]
   1705c:	cmp	r1, #0
   17060:	beq	184dc <test_scan@@Base+0x1a90>
   17064:	add	r2, r0, r1
   17068:	add	r2, r4, r2
   1706c:	ldr	r2, [r2, #-4]
   17070:	add	r0, r2, r0
   17074:	add	r0, r0, r1
   17078:	mov	r1, r9
   1707c:	add	r0, r4, r0
   17080:	ldr	r5, [r0, #-4]
   17084:	cmp	r5, #5
   17088:	mov	r2, r5
   1708c:	movcs	r2, #5
   17090:	bl	12eec <strncmp@plt>
   17094:	cmp	r0, #0
   17098:	mov	r1, r0
   1709c:	mov	r2, #0
   170a0:	mvneq	r1, #0
   170a4:	cmp	r5, #5
   170a8:	movwhi	r2, #1
   170ac:	cmp	r0, #0
   170b0:	movne	r2, r1
   170b4:	cmp	r5, #5
   170b8:	movcc	r2, r1
   170bc:	cmp	r2, #0
   170c0:	beq	17108 <test_scan@@Base+0x6bc>
   170c4:	add	r7, r7, #1
   170c8:	add	r4, r4, #4
   170cc:	cmp	r7, sl
   170d0:	bcc	17030 <test_scan@@Base+0x5e4>
   170d4:	b	1736c <test_scan@@Base+0x920>
   170d8:	ldr	r0, [pc, #4088]	; 180d8 <test_scan@@Base+0x168c>
   170dc:	add	r0, pc, r0
   170e0:	bl	12e5c <puts@plt>
   170e4:	mvn	r5, #0
   170e8:	mov	r0, r9
   170ec:	bl	22d94 <flatcc_builder_aligned_free@@Base>
   170f0:	mov	r0, r5
   170f4:	sub	sp, fp, #28
   170f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170fc:	ldr	r0, [pc, #4056]	; 180dc <test_scan@@Base+0x1690>
   17100:	add	r0, pc, r0
   17104:	b	170e0 <test_scan@@Base+0x694>
   17108:	cmp	r7, #1
   1710c:	bne	1736c <test_scan@@Base+0x920>
   17110:	ldr	r7, [pc, #4040]	; 180e0 <test_scan@@Base+0x1694>
   17114:	mov	r5, #0
   17118:	mov	r9, #0
   1711c:	add	r7, pc, r7
   17120:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17124:	cmp	r0, r9
   17128:	beq	1736c <test_scan@@Base+0x920>
   1712c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17130:	add	r0, r0, r9
   17134:	cmp	sl, r0
   17138:	bls	18e04 <test_scan@@Base+0x23b8>
   1713c:	ldr	r0, [r8, r9, lsl #2]
   17140:	add	r1, r8, r0
   17144:	ldr	r1, [r1, r9, lsl #2]
   17148:	sub	r1, r0, r1
   1714c:	add	r1, r5, r1
   17150:	add	r1, r8, r1
   17154:	ldrh	r2, [r1]
   17158:	cmp	r2, #12
   1715c:	bcc	184dc <test_scan@@Base+0x1a90>
   17160:	ldrh	r1, [r1, #10]
   17164:	cmp	r1, #0
   17168:	beq	184dc <test_scan@@Base+0x1a90>
   1716c:	add	r2, r0, r1
   17170:	add	r2, r8, r2
   17174:	ldr	r2, [r2, r9, lsl #2]
   17178:	add	r0, r2, r0
   1717c:	add	r0, r0, r1
   17180:	add	r1, r8, r0
   17184:	add	r0, r5, r0
   17188:	ldr	r4, [r1, r9, lsl #2]
   1718c:	add	r0, r8, r0
   17190:	mov	r1, r7
   17194:	add	r0, r0, #4
   17198:	cmp	r4, #5
   1719c:	mov	r2, r4
   171a0:	movcs	r2, #5
   171a4:	bl	12eec <strncmp@plt>
   171a8:	cmp	r0, #0
   171ac:	mov	r1, r0
   171b0:	mov	r2, #0
   171b4:	sub	r5, r5, #4
   171b8:	sub	r9, r9, #1
   171bc:	mvneq	r1, #0
   171c0:	cmp	r4, #5
   171c4:	movwhi	r2, #1
   171c8:	cmp	r0, #0
   171cc:	movne	r2, r1
   171d0:	cmp	r4, #5
   171d4:	movcc	r2, r1
   171d8:	cmp	r2, #0
   171dc:	bne	17120 <test_scan@@Base+0x6d4>
   171e0:	ldr	r0, [sp, #24]
   171e4:	cmp	r0, r9
   171e8:	bne	1736c <test_scan@@Base+0x920>
   171ec:	ldr	r9, [sp, #28]
   171f0:	cmp	sl, #3
   171f4:	bcc	17270 <test_scan@@Base+0x824>
   171f8:	ldr	r5, [pc, #3968]	; 18180 <test_scan@@Base+0x1734>
   171fc:	add	r4, r6, #12
   17200:	mov	r7, #2
   17204:	add	r5, pc, r5
   17208:	cmp	sl, r7
   1720c:	bls	18e04 <test_scan@@Base+0x23b8>
   17210:	ldr	r0, [r4]
   17214:	ldr	r1, [r4, r0]
   17218:	sub	r1, r0, r1
   1721c:	add	r1, r4, r1
   17220:	ldrh	r2, [r1]
   17224:	cmp	r2, #12
   17228:	bcc	184dc <test_scan@@Base+0x1a90>
   1722c:	ldrh	r1, [r1, #10]
   17230:	cmp	r1, #0
   17234:	beq	184dc <test_scan@@Base+0x1a90>
   17238:	add	r2, r0, r1
   1723c:	ldr	r2, [r4, r2]
   17240:	add	r0, r2, r0
   17244:	add	r0, r0, r1
   17248:	mov	r1, r5
   1724c:	add	r0, r4, r0
   17250:	add	r0, r0, #4
   17254:	bl	12e08 <strcmp@plt>
   17258:	cmp	r0, #0
   1725c:	beq	1738c <test_scan@@Base+0x940>
   17260:	add	r7, r7, #1
   17264:	add	r4, r4, #4
   17268:	cmp	r7, sl
   1726c:	bcc	17208 <test_scan@@Base+0x7bc>
   17270:	ldr	r5, [pc, #3984]	; 18208 <test_scan@@Base+0x17bc>
   17274:	add	r4, r6, #8
   17278:	mov	r7, #0
   1727c:	add	r5, pc, r5
   17280:	cmp	sl, r7
   17284:	beq	18e04 <test_scan@@Base+0x23b8>
   17288:	ldr	r0, [r4, #-4]
   1728c:	add	r1, r4, r0
   17290:	ldr	r1, [r1, #-4]
   17294:	sub	r1, r0, r1
   17298:	add	r1, r4, r1
   1729c:	ldrh	r2, [r1, #-4]
   172a0:	cmp	r2, #12
   172a4:	bcc	184dc <test_scan@@Base+0x1a90>
   172a8:	ldrh	r1, [r1, #6]
   172ac:	cmp	r1, #0
   172b0:	beq	184dc <test_scan@@Base+0x1a90>
   172b4:	add	r2, r0, r1
   172b8:	add	r2, r4, r2
   172bc:	ldr	r2, [r2, #-4]
   172c0:	add	r0, r2, r0
   172c4:	add	r0, r0, r1
   172c8:	mov	r1, r5
   172cc:	add	r0, r4, r0
   172d0:	bl	12e08 <strcmp@plt>
   172d4:	cmp	r0, #0
   172d8:	beq	17380 <test_scan@@Base+0x934>
   172dc:	add	r7, r7, #1
   172e0:	add	r4, r4, #4
   172e4:	cmp	r7, sl
   172e8:	bcc	17280 <test_scan@@Base+0x834>
   172ec:	ldr	r5, [pc, #4016]	; 182a4 <test_scan@@Base+0x1858>
   172f0:	add	r7, r6, #8
   172f4:	mov	r4, #0
   172f8:	add	r5, pc, r5
   172fc:	cmp	sl, r4
   17300:	beq	18e04 <test_scan@@Base+0x23b8>
   17304:	ldr	r0, [r7, #-4]
   17308:	add	r1, r7, r0
   1730c:	ldr	r1, [r1, #-4]
   17310:	sub	r1, r0, r1
   17314:	add	r1, r7, r1
   17318:	ldrh	r2, [r1, #-4]
   1731c:	cmp	r2, #12
   17320:	bcc	184dc <test_scan@@Base+0x1a90>
   17324:	ldrh	r1, [r1, #6]
   17328:	cmp	r1, #0
   1732c:	beq	184dc <test_scan@@Base+0x1a90>
   17330:	add	r2, r0, r1
   17334:	add	r2, r7, r2
   17338:	ldr	r2, [r2, #-4]
   1733c:	add	r0, r2, r0
   17340:	add	r0, r0, r1
   17344:	mov	r1, r5
   17348:	add	r0, r7, r0
   1734c:	bl	12e08 <strcmp@plt>
   17350:	cmp	r0, #0
   17354:	beq	17398 <test_scan@@Base+0x94c>
   17358:	add	r4, r4, #1
   1735c:	add	r7, r7, #4
   17360:	cmp	r4, sl
   17364:	bcc	172fc <test_scan@@Base+0x8b0>
   17368:	b	173a0 <test_scan@@Base+0x954>
   1736c:	ldr	r0, [pc, #4024]	; 1832c <test_scan@@Base+0x18e0>
   17370:	add	r0, pc, r0
   17374:	bl	12e5c <puts@plt>
   17378:	ldr	r9, [sp, #28]
   1737c:	b	170e4 <test_scan@@Base+0x698>
   17380:	ldr	r0, [pc, #4008]	; 18330 <test_scan@@Base+0x18e4>
   17384:	add	r0, pc, r0
   17388:	b	170e0 <test_scan@@Base+0x694>
   1738c:	ldr	r0, [pc, #4000]	; 18334 <test_scan@@Base+0x18e8>
   17390:	add	r0, pc, r0
   17394:	b	170e0 <test_scan@@Base+0x694>
   17398:	cmp	r4, #0
   1739c:	beq	173ac <test_scan@@Base+0x960>
   173a0:	ldr	r0, [pc, #3984]	; 18338 <test_scan@@Base+0x18ec>
   173a4:	add	r0, pc, r0
   173a8:	b	170e0 <test_scan@@Base+0x694>
   173ac:	ldr	r5, [pc, #3976]	; 1833c <test_scan@@Base+0x18f0>
   173b0:	add	r7, r6, #8
   173b4:	mov	r4, #0
   173b8:	add	r5, pc, r5
   173bc:	cmp	sl, r4
   173c0:	beq	18e04 <test_scan@@Base+0x23b8>
   173c4:	ldr	r0, [r7, #-4]
   173c8:	add	r1, r7, r0
   173cc:	ldr	r1, [r1, #-4]
   173d0:	sub	r1, r0, r1
   173d4:	add	r1, r7, r1
   173d8:	ldrh	r2, [r1, #-4]
   173dc:	cmp	r2, #12
   173e0:	bcc	184dc <test_scan@@Base+0x1a90>
   173e4:	ldrh	r1, [r1, #6]
   173e8:	cmp	r1, #0
   173ec:	beq	184dc <test_scan@@Base+0x1a90>
   173f0:	add	r2, r0, r1
   173f4:	add	r2, r7, r2
   173f8:	ldr	r2, [r2, #-4]
   173fc:	add	r0, r2, r0
   17400:	add	r0, r0, r1
   17404:	mov	r1, r5
   17408:	add	r0, r7, r0
   1740c:	bl	12e08 <strcmp@plt>
   17410:	cmp	r0, #0
   17414:	beq	1742c <test_scan@@Base+0x9e0>
   17418:	add	r4, r4, #1
   1741c:	add	r7, r7, #4
   17420:	cmp	r4, sl
   17424:	bcc	173bc <test_scan@@Base+0x970>
   17428:	b	176dc <test_scan@@Base+0xc90>
   1742c:	cmp	r4, #2
   17430:	bne	176dc <test_scan@@Base+0xc90>
   17434:	ldr	r5, [pc, #3992]	; 183d4 <test_scan@@Base+0x1988>
   17438:	mov	r4, #0
   1743c:	mov	r7, #0
   17440:	add	r5, pc, r5
   17444:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17448:	cmp	r0, r7
   1744c:	beq	176e8 <test_scan@@Base+0xc9c>
   17450:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17454:	add	r0, r0, r7
   17458:	cmp	sl, r0
   1745c:	bls	18e04 <test_scan@@Base+0x23b8>
   17460:	ldr	r0, [r8, r7, lsl #2]
   17464:	add	r1, r8, r0
   17468:	ldr	r1, [r1, r7, lsl #2]
   1746c:	sub	r1, r0, r1
   17470:	add	r1, r4, r1
   17474:	add	r1, r8, r1
   17478:	ldrh	r2, [r1]
   1747c:	cmp	r2, #12
   17480:	bcc	184dc <test_scan@@Base+0x1a90>
   17484:	ldrh	r1, [r1, #10]
   17488:	cmp	r1, #0
   1748c:	beq	184dc <test_scan@@Base+0x1a90>
   17490:	add	r2, r0, r1
   17494:	add	r2, r8, r2
   17498:	ldr	r2, [r2, r7, lsl #2]
   1749c:	add	r0, r2, r0
   174a0:	add	r0, r0, r1
   174a4:	mov	r1, r5
   174a8:	add	r0, r4, r0
   174ac:	add	r0, r8, r0
   174b0:	add	r0, r0, #4
   174b4:	bl	12e08 <strcmp@plt>
   174b8:	sub	r4, r4, #4
   174bc:	sub	r7, r7, #1
   174c0:	cmp	r0, #0
   174c4:	bne	17444 <test_scan@@Base+0x9f8>
   174c8:	rsb	r6, sl, #4
   174cc:	cmp	r6, r7
   174d0:	bne	176e8 <test_scan@@Base+0xc9c>
   174d4:	ldr	r7, [pc, #4092]	; 184d8 <test_scan@@Base+0x1a8c>
   174d8:	mov	r9, #0
   174dc:	mov	r5, #0
   174e0:	add	r7, pc, r7
   174e4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   174e8:	cmp	r0, r5
   174ec:	beq	176d0 <test_scan@@Base+0xc84>
   174f0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   174f4:	add	r0, r0, r5
   174f8:	cmp	sl, r0
   174fc:	bls	18e04 <test_scan@@Base+0x23b8>
   17500:	ldr	r0, [r8, r5, lsl #2]
   17504:	add	r1, r8, r0
   17508:	ldr	r1, [r1, r5, lsl #2]
   1750c:	sub	r1, r0, r1
   17510:	add	r1, r9, r1
   17514:	add	r1, r8, r1
   17518:	ldrh	r2, [r1]
   1751c:	cmp	r2, #12
   17520:	bcc	184dc <test_scan@@Base+0x1a90>
   17524:	ldrh	r1, [r1, #10]
   17528:	cmp	r1, #0
   1752c:	beq	184dc <test_scan@@Base+0x1a90>
   17530:	add	r2, r0, r1
   17534:	add	r2, r8, r2
   17538:	ldr	r2, [r2, r5, lsl #2]
   1753c:	add	r0, r2, r0
   17540:	add	r0, r0, r1
   17544:	add	r1, r8, r0
   17548:	add	r0, r9, r0
   1754c:	ldr	r4, [r1, r5, lsl #2]
   17550:	add	r0, r8, r0
   17554:	mov	r1, r7
   17558:	add	r0, r0, #4
   1755c:	cmp	r4, #8
   17560:	mov	r2, r4
   17564:	movcs	r2, #8
   17568:	bl	12eec <strncmp@plt>
   1756c:	cmp	r0, #0
   17570:	mov	r1, r0
   17574:	mov	r2, #0
   17578:	sub	r9, r9, #4
   1757c:	sub	r5, r5, #1
   17580:	mvneq	r1, #0
   17584:	cmp	r4, #8
   17588:	movwhi	r2, #1
   1758c:	cmp	r0, #0
   17590:	movne	r2, r1
   17594:	cmp	r4, #8
   17598:	movcc	r2, r1
   1759c:	cmp	r2, #0
   175a0:	bne	174e4 <test_scan@@Base+0xa98>
   175a4:	cmp	r6, r5
   175a8:	bne	176d0 <test_scan@@Base+0xc84>
   175ac:	ldr	r0, [sp, #36]	; 0x24
   175b0:	cmp	sl, #3
   175b4:	ldr	r1, [sp, #20]
   175b8:	mov	r2, sl
   175bc:	mov	r9, #0
   175c0:	mov	r5, #0
   175c4:	movcs	r2, #3
   175c8:	str	r2, [sp, #24]
   175cc:	add	r0, r0, r2, lsl #2
   175d0:	add	r1, r0, r1
   175d4:	ldr	r0, [sp, #28]
   175d8:	str	r1, [sp, #12]
   175dc:	add	r0, r0, r1
   175e0:	str	r0, [fp, #-44]	; 0xffffffd4
   175e4:	sub	r0, r2, #1
   175e8:	str	r0, [sp, #16]
   175ec:	ldr	r6, [pc, #4020]	; 185a8 <test_scan@@Base+0x1b5c>
   175f0:	add	r6, pc, r6
   175f4:	ldr	r0, [sp, #24]
   175f8:	add	r0, r0, r5
   175fc:	cmp	r0, #2
   17600:	bcc	176d0 <test_scan@@Base+0xc84>
   17604:	ldr	r0, [sp, #16]
   17608:	add	r0, r0, r5
   1760c:	cmp	sl, r0
   17610:	bls	18e04 <test_scan@@Base+0x23b8>
   17614:	ldr	r2, [fp, #-44]	; 0xffffffd4
   17618:	ldr	r0, [r2, r5, lsl #2]
   1761c:	add	r1, r2, r0
   17620:	ldr	r1, [r1, r5, lsl #2]
   17624:	sub	r1, r0, r1
   17628:	add	r1, r9, r1
   1762c:	add	r1, r2, r1
   17630:	ldrh	r2, [r1]
   17634:	cmp	r2, #12
   17638:	bcc	184dc <test_scan@@Base+0x1a90>
   1763c:	ldrh	r1, [r1, #10]
   17640:	cmp	r1, #0
   17644:	beq	184dc <test_scan@@Base+0x1a90>
   17648:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1764c:	add	r2, r0, r1
   17650:	add	r2, r3, r2
   17654:	ldr	r2, [r2, r5, lsl #2]
   17658:	add	r0, r2, r0
   1765c:	add	r0, r0, r1
   17660:	add	r1, r3, r0
   17664:	add	r0, r9, r0
   17668:	ldr	r4, [r1, r5, lsl #2]
   1766c:	add	r0, r3, r0
   17670:	mov	r1, r6
   17674:	add	r0, r0, #4
   17678:	cmp	r4, #8
   1767c:	mov	r2, r4
   17680:	movcs	r2, #8
   17684:	bl	12eec <strncmp@plt>
   17688:	cmp	r0, #0
   1768c:	mov	r1, r0
   17690:	mov	r2, #0
   17694:	sub	r9, r9, #4
   17698:	sub	r5, r5, #1
   1769c:	mvneq	r1, #0
   176a0:	cmp	r4, #8
   176a4:	movwhi	r2, #1
   176a8:	cmp	r0, #0
   176ac:	movne	r2, r1
   176b0:	cmp	r4, #8
   176b4:	movcc	r2, r1
   176b8:	cmp	r2, #0
   176bc:	bne	175f4 <test_scan@@Base+0xba8>
   176c0:	ldr	r0, [sp, #24]
   176c4:	add	r0, r0, r5
   176c8:	cmp	r0, #2
   176cc:	beq	176f4 <test_scan@@Base+0xca8>
   176d0:	ldr	r0, [pc, #4024]	; 18690 <test_scan@@Base+0x1c44>
   176d4:	add	r0, pc, r0
   176d8:	b	17374 <test_scan@@Base+0x928>
   176dc:	ldr	r0, [pc, #4088]	; 186dc <test_scan@@Base+0x1c90>
   176e0:	add	r0, pc, r0
   176e4:	b	170e0 <test_scan@@Base+0x694>
   176e8:	ldr	r0, [pc, #4092]	; 186ec <test_scan@@Base+0x1ca0>
   176ec:	add	r0, pc, r0
   176f0:	b	17374 <test_scan@@Base+0x928>
   176f4:	cmp	sl, #3
   176f8:	bcc	178cc <test_scan@@Base+0xe80>
   176fc:	ldr	r0, [sp, #56]	; 0x38
   17700:	ldr	r5, [pc, #4092]	; 18704 <test_scan@@Base+0x1cb8>
   17704:	mov	r4, #2
   17708:	add	r7, r0, #12
   1770c:	add	r5, pc, r5
   17710:	cmp	sl, r4
   17714:	bls	18e04 <test_scan@@Base+0x23b8>
   17718:	ldr	r0, [r7]
   1771c:	ldr	r1, [r7, r0]
   17720:	sub	r1, r0, r1
   17724:	add	r1, r7, r1
   17728:	ldrh	r2, [r1]
   1772c:	cmp	r2, #12
   17730:	bcc	184dc <test_scan@@Base+0x1a90>
   17734:	ldrh	r1, [r1, #10]
   17738:	cmp	r1, #0
   1773c:	beq	184dc <test_scan@@Base+0x1a90>
   17740:	add	r2, r0, r1
   17744:	ldr	r2, [r7, r2]
   17748:	add	r0, r2, r0
   1774c:	add	r0, r0, r1
   17750:	mov	r1, r5
   17754:	add	r0, r7, r0
   17758:	add	r0, r0, #4
   1775c:	bl	12e08 <strcmp@plt>
   17760:	cmp	r0, #0
   17764:	beq	1777c <test_scan@@Base+0xd30>
   17768:	add	r4, r4, #1
   1776c:	add	r7, r7, #4
   17770:	cmp	r4, sl
   17774:	bcc	17710 <test_scan@@Base+0xcc4>
   17778:	b	178cc <test_scan@@Base+0xe80>
   1777c:	cmp	r4, #2
   17780:	bne	178cc <test_scan@@Base+0xe80>
   17784:	ldr	r0, [sp, #56]	; 0x38
   17788:	ldr	r6, [pc, #4024]	; 18748 <test_scan@@Base+0x1cfc>
   1778c:	mov	r7, #2
   17790:	add	r4, r0, #12
   17794:	add	r6, pc, r6
   17798:	cmp	sl, r7
   1779c:	bls	18e04 <test_scan@@Base+0x23b8>
   177a0:	ldr	r0, [r4]
   177a4:	ldr	r1, [r4, r0]
   177a8:	sub	r1, r0, r1
   177ac:	add	r1, r4, r1
   177b0:	ldrh	r2, [r1]
   177b4:	cmp	r2, #12
   177b8:	bcc	184dc <test_scan@@Base+0x1a90>
   177bc:	ldrh	r1, [r1, #10]
   177c0:	cmp	r1, #0
   177c4:	beq	184dc <test_scan@@Base+0x1a90>
   177c8:	add	r2, r0, r1
   177cc:	ldr	r2, [r4, r2]
   177d0:	add	r0, r2, r0
   177d4:	add	r0, r0, r1
   177d8:	mov	r1, r4
   177dc:	ldr	r5, [r1, r0]!
   177e0:	add	r0, r1, #4
   177e4:	mov	r1, r6
   177e8:	cmp	r5, #8
   177ec:	mov	r2, r5
   177f0:	movcs	r2, #8
   177f4:	bl	12eec <strncmp@plt>
   177f8:	cmp	r0, #0
   177fc:	mov	r1, r0
   17800:	mov	r2, #0
   17804:	mvneq	r1, #0
   17808:	cmp	r5, #8
   1780c:	movwhi	r2, #1
   17810:	cmp	r0, #0
   17814:	movne	r2, r1
   17818:	cmp	r5, #8
   1781c:	movcc	r2, r1
   17820:	cmp	r2, #0
   17824:	beq	1783c <test_scan@@Base+0xdf0>
   17828:	add	r7, r7, #1
   1782c:	add	r4, r4, #4
   17830:	cmp	r7, sl
   17834:	bcc	17798 <test_scan@@Base+0xd4c>
   17838:	b	178cc <test_scan@@Base+0xe80>
   1783c:	cmp	r7, #2
   17840:	bne	178cc <test_scan@@Base+0xe80>
   17844:	cmp	sl, #4
   17848:	bcc	17a8c <test_scan@@Base+0x1040>
   1784c:	ldr	r0, [sp, #56]	; 0x38
   17850:	ldr	r5, [pc, #3828]	; 1874c <test_scan@@Base+0x1d00>
   17854:	mov	r4, #3
   17858:	add	r7, r0, #16
   1785c:	add	r5, pc, r5
   17860:	cmp	sl, r4
   17864:	bls	18e04 <test_scan@@Base+0x23b8>
   17868:	ldr	r0, [r7]
   1786c:	ldr	r1, [r7, r0]
   17870:	sub	r1, r0, r1
   17874:	add	r1, r7, r1
   17878:	ldrh	r2, [r1]
   1787c:	cmp	r2, #12
   17880:	bcc	184dc <test_scan@@Base+0x1a90>
   17884:	ldrh	r1, [r1, #10]
   17888:	cmp	r1, #0
   1788c:	beq	184dc <test_scan@@Base+0x1a90>
   17890:	add	r2, r0, r1
   17894:	ldr	r2, [r7, r2]
   17898:	add	r0, r2, r0
   1789c:	add	r0, r0, r1
   178a0:	mov	r1, r5
   178a4:	add	r0, r7, r0
   178a8:	add	r0, r0, #4
   178ac:	bl	12e08 <strcmp@plt>
   178b0:	cmp	r0, #0
   178b4:	beq	178dc <test_scan@@Base+0xe90>
   178b8:	add	r4, r4, #1
   178bc:	add	r7, r7, #4
   178c0:	cmp	r4, sl
   178c4:	bcc	17860 <test_scan@@Base+0xe14>
   178c8:	b	17a8c <test_scan@@Base+0x1040>
   178cc:	ldr	r0, [pc, #3708]	; 18750 <test_scan@@Base+0x1d04>
   178d0:	add	r0, pc, r0
   178d4:	b	17374 <test_scan@@Base+0x928>
   178d8:	andeq	lr, r0, r0, ror r1
   178dc:	cmp	r4, #4
   178e0:	bne	17a8c <test_scan@@Base+0x1040>
   178e4:	cmp	sl, #2
   178e8:	bcc	17bf0 <test_scan@@Base+0x11a4>
   178ec:	ldr	r0, [sp, #56]	; 0x38
   178f0:	ldr	r5, [pc, #3676]	; 18754 <test_scan@@Base+0x1d08>
   178f4:	mov	r7, #1
   178f8:	add	r4, r0, #12
   178fc:	add	r5, pc, r5
   17900:	cmp	sl, r7
   17904:	bls	18e04 <test_scan@@Base+0x23b8>
   17908:	ldr	r0, [r4, #-4]
   1790c:	add	r1, r4, r0
   17910:	ldr	r1, [r1, #-4]
   17914:	sub	r1, r0, r1
   17918:	add	r1, r4, r1
   1791c:	ldrh	r2, [r1, #-4]
   17920:	cmp	r2, #12
   17924:	bcc	184dc <test_scan@@Base+0x1a90>
   17928:	ldrh	r1, [r1, #6]
   1792c:	cmp	r1, #0
   17930:	beq	184dc <test_scan@@Base+0x1a90>
   17934:	add	r2, r0, r1
   17938:	add	r2, r4, r2
   1793c:	ldr	r2, [r2, #-4]
   17940:	add	r0, r2, r0
   17944:	add	r0, r0, r1
   17948:	mov	r1, r5
   1794c:	add	r0, r4, r0
   17950:	bl	12e08 <strcmp@plt>
   17954:	cmp	r0, #0
   17958:	beq	17afc <test_scan@@Base+0x10b0>
   1795c:	ldr	r0, [sp, #24]
   17960:	add	r7, r7, #1
   17964:	add	r4, r4, #4
   17968:	cmp	r7, r0
   1796c:	bcc	17900 <test_scan@@Base+0xeb4>
   17970:	cmp	sl, #2
   17974:	bcc	17bf0 <test_scan@@Base+0x11a4>
   17978:	ldr	r0, [sp, #56]	; 0x38
   1797c:	ldr	r5, [pc, #3540]	; 18758 <test_scan@@Base+0x1d0c>
   17980:	mov	r7, #1
   17984:	add	r4, r0, #12
   17988:	add	r5, pc, r5
   1798c:	cmp	sl, r7
   17990:	bls	18e04 <test_scan@@Base+0x23b8>
   17994:	ldr	r0, [r4, #-4]
   17998:	add	r1, r4, r0
   1799c:	ldr	r1, [r1, #-4]
   179a0:	sub	r1, r0, r1
   179a4:	add	r1, r4, r1
   179a8:	ldrh	r2, [r1, #-4]
   179ac:	cmp	r2, #12
   179b0:	bcc	184dc <test_scan@@Base+0x1a90>
   179b4:	ldrh	r1, [r1, #6]
   179b8:	cmp	r1, #0
   179bc:	beq	184dc <test_scan@@Base+0x1a90>
   179c0:	add	r2, r0, r1
   179c4:	add	r2, r4, r2
   179c8:	ldr	r2, [r2, #-4]
   179cc:	add	r0, r2, r0
   179d0:	add	r0, r0, r1
   179d4:	mov	r1, r5
   179d8:	add	r0, r4, r0
   179dc:	bl	12e08 <strcmp@plt>
   179e0:	cmp	r0, #0
   179e4:	beq	17b48 <test_scan@@Base+0x10fc>
   179e8:	ldr	r0, [sp, #24]
   179ec:	add	r7, r7, #1
   179f0:	add	r4, r4, #4
   179f4:	cmp	r7, r0
   179f8:	bcc	1798c <test_scan@@Base+0xf40>
   179fc:	cmp	sl, #2
   17a00:	bcc	17bf0 <test_scan@@Base+0x11a4>
   17a04:	ldr	r0, [sp, #56]	; 0x38
   17a08:	ldr	r5, [pc, #3404]	; 1875c <test_scan@@Base+0x1d10>
   17a0c:	mov	r4, #1
   17a10:	add	r7, r0, #12
   17a14:	add	r5, pc, r5
   17a18:	cmp	sl, r4
   17a1c:	bls	18e04 <test_scan@@Base+0x23b8>
   17a20:	ldr	r0, [r7, #-4]
   17a24:	add	r1, r7, r0
   17a28:	ldr	r1, [r1, #-4]
   17a2c:	sub	r1, r0, r1
   17a30:	add	r1, r7, r1
   17a34:	ldrh	r2, [r1, #-4]
   17a38:	cmp	r2, #12
   17a3c:	bcc	184dc <test_scan@@Base+0x1a90>
   17a40:	ldrh	r1, [r1, #6]
   17a44:	cmp	r1, #0
   17a48:	beq	184dc <test_scan@@Base+0x1a90>
   17a4c:	add	r2, r0, r1
   17a50:	add	r2, r7, r2
   17a54:	ldr	r2, [r2, #-4]
   17a58:	add	r0, r2, r0
   17a5c:	add	r0, r0, r1
   17a60:	mov	r1, r5
   17a64:	add	r0, r7, r0
   17a68:	bl	12e08 <strcmp@plt>
   17a6c:	cmp	r0, #0
   17a70:	beq	17b60 <test_scan@@Base+0x1114>
   17a74:	ldr	r0, [sp, #24]
   17a78:	add	r4, r4, #1
   17a7c:	add	r7, r7, #4
   17a80:	cmp	r4, r0
   17a84:	bcc	17a18 <test_scan@@Base+0xfcc>
   17a88:	b	17bf0 <test_scan@@Base+0x11a4>
   17a8c:	ldr	r0, [pc, #3276]	; 18760 <test_scan@@Base+0x1d14>
   17a90:	add	r0, pc, r0
   17a94:	b	17374 <test_scan@@Base+0x928>
   17a98:	muleq	r0, r0, r1
   17a9c:	ldr	r0, [pc, #3264]	; 18764 <test_scan@@Base+0x1d18>
   17aa0:	ldr	r1, [pc, #3264]	; 18768 <test_scan@@Base+0x1d1c>
   17aa4:	ldr	r3, [pc, #3264]	; 1876c <test_scan@@Base+0x1d20>
   17aa8:	mov	r2, #235	; 0xeb
   17aac:	add	r0, pc, r0
   17ab0:	add	r1, pc, r1
   17ab4:	add	r3, pc, r3
   17ab8:	bl	12f04 <__assert_fail@plt>
   17abc:	ldr	r0, [pc, #3244]	; 18770 <test_scan@@Base+0x1d24>
   17ac0:	ldr	r1, [pc, #3244]	; 18774 <test_scan@@Base+0x1d28>
   17ac4:	ldr	r3, [pc, #3244]	; 18778 <test_scan@@Base+0x1d2c>
   17ac8:	movw	r2, #711	; 0x2c7
   17acc:	add	r0, pc, r0
   17ad0:	add	r1, pc, r1
   17ad4:	add	r3, pc, r3
   17ad8:	bl	12f04 <__assert_fail@plt>
   17adc:	ldr	r0, [pc, #3224]	; 1877c <test_scan@@Base+0x1d30>
   17ae0:	ldr	r1, [pc, #3224]	; 18780 <test_scan@@Base+0x1d34>
   17ae4:	ldr	r3, [pc, #3224]	; 18784 <test_scan@@Base+0x1d38>
   17ae8:	movw	r2, #1305	; 0x519
   17aec:	add	r0, pc, r0
   17af0:	add	r1, pc, r1
   17af4:	add	r3, pc, r3
   17af8:	bl	12f04 <__assert_fail@plt>
   17afc:	ldr	r0, [pc, #3204]	; 18788 <test_scan@@Base+0x1d3c>
   17b00:	add	r0, pc, r0
   17b04:	b	17374 <test_scan@@Base+0x928>
   17b08:	ldr	r0, [pc, #3196]	; 1878c <test_scan@@Base+0x1d40>
   17b0c:	ldr	r1, [pc, #3196]	; 18790 <test_scan@@Base+0x1d44>
   17b10:	ldr	r3, [pc, #3196]	; 18794 <test_scan@@Base+0x1d48>
   17b14:	movw	r2, #1307	; 0x51b
   17b18:	add	r0, pc, r0
   17b1c:	add	r1, pc, r1
   17b20:	add	r3, pc, r3
   17b24:	bl	12f04 <__assert_fail@plt>
   17b28:	ldr	r0, [pc, #3176]	; 18798 <test_scan@@Base+0x1d4c>
   17b2c:	ldr	r1, [pc, #3176]	; 1879c <test_scan@@Base+0x1d50>
   17b30:	ldr	r3, [pc, #3176]	; 187a0 <test_scan@@Base+0x1d54>
   17b34:	movw	r2, #1309	; 0x51d
   17b38:	add	r0, pc, r0
   17b3c:	add	r1, pc, r1
   17b40:	add	r3, pc, r3
   17b44:	bl	12f04 <__assert_fail@plt>
   17b48:	ldr	r0, [pc, #3156]	; 187a4 <test_scan@@Base+0x1d58>
   17b4c:	add	r0, pc, r0
   17b50:	b	17374 <test_scan@@Base+0x928>
   17b54:	strdeq	lr, [r0], -r8
   17b58:	andeq	r1, r1, r8, asr r3
   17b5c:	andeq	r0, r1, r4, ror #16
   17b60:	cmp	r4, #1
   17b64:	bne	17bf0 <test_scan@@Base+0x11a4>
   17b68:	ldr	r0, [sp, #56]	; 0x38
   17b6c:	ldr	r5, [pc, #3124]	; 187a8 <test_scan@@Base+0x1d5c>
   17b70:	mov	r4, #1
   17b74:	add	r7, r0, #12
   17b78:	add	r5, pc, r5
   17b7c:	cmp	sl, r4
   17b80:	bls	18e04 <test_scan@@Base+0x23b8>
   17b84:	ldr	r0, [r7, #-4]
   17b88:	add	r1, r7, r0
   17b8c:	ldr	r1, [r1, #-4]
   17b90:	sub	r1, r0, r1
   17b94:	add	r1, r7, r1
   17b98:	ldrh	r2, [r1, #-4]
   17b9c:	cmp	r2, #12
   17ba0:	bcc	184dc <test_scan@@Base+0x1a90>
   17ba4:	ldrh	r1, [r1, #6]
   17ba8:	cmp	r1, #0
   17bac:	beq	184dc <test_scan@@Base+0x1a90>
   17bb0:	add	r2, r0, r1
   17bb4:	add	r2, r7, r2
   17bb8:	ldr	r2, [r2, #-4]
   17bbc:	add	r0, r2, r0
   17bc0:	add	r0, r0, r1
   17bc4:	mov	r1, r5
   17bc8:	add	r0, r7, r0
   17bcc:	bl	12e08 <strcmp@plt>
   17bd0:	cmp	r0, #0
   17bd4:	beq	17c10 <test_scan@@Base+0x11c4>
   17bd8:	ldr	r0, [sp, #24]
   17bdc:	add	r4, r4, #1
   17be0:	add	r7, r7, #4
   17be4:	cmp	r4, r0
   17be8:	bcc	17b7c <test_scan@@Base+0x1130>
   17bec:	b	17d24 <test_scan@@Base+0x12d8>
   17bf0:	ldr	r0, [pc, #2996]	; 187ac <test_scan@@Base+0x1d60>
   17bf4:	add	r0, pc, r0
   17bf8:	b	17374 <test_scan@@Base+0x928>
   17bfc:	andeq	r1, r1, r4, ror #5
   17c00:	andeq	r0, r1, r8, asr #15
   17c04:	andeq	r1, r1, r0, ror r2
   17c08:	andeq	lr, r0, sl, asr #11
   17c0c:	strdeq	r1, [r1], -ip
   17c10:	cmp	r4, #2
   17c14:	bne	17d24 <test_scan@@Base+0x12d8>
   17c18:	ldr	r0, [sp, #56]	; 0x38
   17c1c:	ldr	r5, [pc, #2956]	; 187b0 <test_scan@@Base+0x1d64>
   17c20:	mov	r7, #1
   17c24:	add	r4, r0, #12
   17c28:	add	r5, pc, r5
   17c2c:	cmp	sl, r7
   17c30:	bls	18e04 <test_scan@@Base+0x23b8>
   17c34:	ldr	r0, [r4, #-4]
   17c38:	add	r1, r4, r0
   17c3c:	ldr	r1, [r1, #-4]
   17c40:	sub	r1, r0, r1
   17c44:	add	r1, r4, r1
   17c48:	ldrh	r2, [r1, #-4]
   17c4c:	cmp	r2, #12
   17c50:	bcc	184dc <test_scan@@Base+0x1a90>
   17c54:	ldrh	r1, [r1, #6]
   17c58:	cmp	r1, #0
   17c5c:	beq	184dc <test_scan@@Base+0x1a90>
   17c60:	add	r2, r0, r1
   17c64:	add	r2, r4, r2
   17c68:	ldr	r2, [r2, #-4]
   17c6c:	add	r0, r2, r0
   17c70:	add	r0, r0, r1
   17c74:	mov	r1, r5
   17c78:	add	r0, r4, r0
   17c7c:	bl	12e08 <strcmp@plt>
   17c80:	cmp	r0, #0
   17c84:	beq	17d34 <test_scan@@Base+0x12e8>
   17c88:	ldr	r0, [sp, #24]
   17c8c:	add	r7, r7, #1
   17c90:	add	r4, r4, #4
   17c94:	cmp	r7, r0
   17c98:	bcc	17c2c <test_scan@@Base+0x11e0>
   17c9c:	ldr	r5, [pc, #2832]	; 187b4 <test_scan@@Base+0x1d68>
   17ca0:	ldr	r4, [sp, #24]
   17ca4:	add	r5, pc, r5
   17ca8:	subs	r4, r4, #1
   17cac:	bls	17d48 <test_scan@@Base+0x12fc>
   17cb0:	cmp	sl, r4
   17cb4:	bls	18e04 <test_scan@@Base+0x23b8>
   17cb8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   17cbc:	ldr	r0, [r2]
   17cc0:	ldr	r1, [r2, r0]
   17cc4:	sub	r1, r0, r1
   17cc8:	add	r1, r2, r1
   17ccc:	ldrh	r2, [r1]
   17cd0:	cmp	r2, #12
   17cd4:	bcc	184dc <test_scan@@Base+0x1a90>
   17cd8:	ldrh	r1, [r1, #10]
   17cdc:	cmp	r1, #0
   17ce0:	beq	184dc <test_scan@@Base+0x1a90>
   17ce4:	ldr	r6, [fp, #-44]	; 0xffffffd4
   17ce8:	add	r2, r0, r1
   17cec:	ldr	r2, [r6, r2]
   17cf0:	add	r0, r2, r0
   17cf4:	add	r0, r0, r1
   17cf8:	mov	r1, r5
   17cfc:	add	r0, r6, r0
   17d00:	add	r0, r0, #4
   17d04:	bl	12e08 <strcmp@plt>
   17d08:	sub	r6, r6, #4
   17d0c:	cmp	r0, #0
   17d10:	str	r6, [fp, #-44]	; 0xffffffd4
   17d14:	bne	17ca8 <test_scan@@Base+0x125c>
   17d18:	ldr	r0, [pc, #2712]	; 187b8 <test_scan@@Base+0x1d6c>
   17d1c:	add	r0, pc, r0
   17d20:	b	17374 <test_scan@@Base+0x928>
   17d24:	ldr	r0, [pc, #2704]	; 187bc <test_scan@@Base+0x1d70>
   17d28:	add	r0, pc, r0
   17d2c:	b	17374 <test_scan@@Base+0x928>
   17d30:	andeq	r0, r1, r0, ror #13
   17d34:	ldr	r0, [pc, #2692]	; 187c0 <test_scan@@Base+0x1d74>
   17d38:	add	r0, pc, r0
   17d3c:	b	17374 <test_scan@@Base+0x928>
   17d40:	andeq	r1, r1, r8, lsl #3
   17d44:	andeq	r1, r1, r8, lsr #2
   17d48:	ldr	r0, [sp, #28]
   17d4c:	ldr	r1, [sp, #12]
   17d50:	ldr	r5, [pc, #2668]	; 187c4 <test_scan@@Base+0x1d78>
   17d54:	ldr	r7, [sp, #24]
   17d58:	add	r4, r0, r1
   17d5c:	add	r5, pc, r5
   17d60:	subs	r7, r7, #1
   17d64:	bls	17dd0 <test_scan@@Base+0x1384>
   17d68:	cmp	sl, r7
   17d6c:	bls	18e04 <test_scan@@Base+0x23b8>
   17d70:	ldr	r0, [r4]
   17d74:	ldr	r1, [r4, r0]
   17d78:	sub	r1, r0, r1
   17d7c:	add	r1, r4, r1
   17d80:	ldrh	r2, [r1]
   17d84:	cmp	r2, #12
   17d88:	bcc	184dc <test_scan@@Base+0x1a90>
   17d8c:	ldrh	r1, [r1, #10]
   17d90:	cmp	r1, #0
   17d94:	beq	184dc <test_scan@@Base+0x1a90>
   17d98:	add	r2, r0, r1
   17d9c:	ldr	r2, [r4, r2]
   17da0:	add	r0, r2, r0
   17da4:	add	r0, r0, r1
   17da8:	mov	r1, r5
   17dac:	add	r0, r4, r0
   17db0:	add	r0, r0, #4
   17db4:	bl	12e08 <strcmp@plt>
   17db8:	sub	r4, r4, #4
   17dbc:	cmp	r0, #0
   17dc0:	bne	17d60 <test_scan@@Base+0x1314>
   17dc4:	ldr	r0, [pc, #2556]	; 187c8 <test_scan@@Base+0x1d7c>
   17dc8:	add	r0, pc, r0
   17dcc:	b	17374 <test_scan@@Base+0x928>
   17dd0:	ldr	r0, [sp, #28]
   17dd4:	ldr	r1, [sp, #12]
   17dd8:	ldr	r6, [pc, #2540]	; 187cc <test_scan@@Base+0x1d80>
   17ddc:	mov	r4, #0
   17de0:	mov	r7, #0
   17de4:	add	r5, r0, r1
   17de8:	add	r6, pc, r6
   17dec:	ldr	r0, [sp, #24]
   17df0:	add	r0, r0, r7
   17df4:	cmp	r0, #2
   17df8:	bcc	17e84 <test_scan@@Base+0x1438>
   17dfc:	ldr	r0, [sp, #16]
   17e00:	add	r0, r0, r7
   17e04:	cmp	sl, r0
   17e08:	bls	18e04 <test_scan@@Base+0x23b8>
   17e0c:	ldr	r0, [r5, r7, lsl #2]
   17e10:	add	r1, r5, r0
   17e14:	ldr	r1, [r1, r7, lsl #2]
   17e18:	sub	r1, r0, r1
   17e1c:	add	r1, r4, r1
   17e20:	add	r1, r5, r1
   17e24:	ldrh	r2, [r1]
   17e28:	cmp	r2, #12
   17e2c:	bcc	184dc <test_scan@@Base+0x1a90>
   17e30:	ldrh	r1, [r1, #10]
   17e34:	cmp	r1, #0
   17e38:	beq	184dc <test_scan@@Base+0x1a90>
   17e3c:	add	r2, r0, r1
   17e40:	add	r2, r5, r2
   17e44:	ldr	r2, [r2, r7, lsl #2]
   17e48:	add	r0, r2, r0
   17e4c:	add	r0, r0, r1
   17e50:	mov	r1, r6
   17e54:	add	r0, r4, r0
   17e58:	add	r0, r5, r0
   17e5c:	add	r0, r0, #4
   17e60:	bl	12e08 <strcmp@plt>
   17e64:	sub	r4, r4, #4
   17e68:	sub	r7, r7, #1
   17e6c:	cmp	r0, #0
   17e70:	bne	17dec <test_scan@@Base+0x13a0>
   17e74:	ldr	r0, [sp, #24]
   17e78:	add	r0, r0, r7
   17e7c:	cmp	r0, #1
   17e80:	beq	17e94 <test_scan@@Base+0x1448>
   17e84:	ldr	r0, [pc, #4092]	; 18e88 <test_scan@@Base+0x243c>
   17e88:	add	r0, pc, r0
   17e8c:	b	17374 <test_scan@@Base+0x928>
   17e90:	andeq	r0, r1, r0, ror r5
   17e94:	ldr	r6, [pc, #4088]	; 18e94 <test_scan@@Base+0x2448>
   17e98:	mov	r4, #0
   17e9c:	mov	r7, #0
   17ea0:	add	r6, pc, r6
   17ea4:	ldr	r0, [sp, #24]
   17ea8:	add	r0, r0, r7
   17eac:	cmp	r0, #2
   17eb0:	bcc	17f3c <test_scan@@Base+0x14f0>
   17eb4:	ldr	r0, [sp, #16]
   17eb8:	add	r0, r0, r7
   17ebc:	cmp	sl, r0
   17ec0:	bls	18e04 <test_scan@@Base+0x23b8>
   17ec4:	ldr	r0, [r5, r7, lsl #2]
   17ec8:	add	r1, r5, r0
   17ecc:	ldr	r1, [r1, r7, lsl #2]
   17ed0:	sub	r1, r0, r1
   17ed4:	add	r1, r4, r1
   17ed8:	add	r1, r5, r1
   17edc:	ldrh	r2, [r1]
   17ee0:	cmp	r2, #12
   17ee4:	bcc	184dc <test_scan@@Base+0x1a90>
   17ee8:	ldrh	r1, [r1, #10]
   17eec:	cmp	r1, #0
   17ef0:	beq	184dc <test_scan@@Base+0x1a90>
   17ef4:	add	r2, r0, r1
   17ef8:	add	r2, r5, r2
   17efc:	ldr	r2, [r2, r7, lsl #2]
   17f00:	add	r0, r2, r0
   17f04:	add	r0, r0, r1
   17f08:	mov	r1, r6
   17f0c:	add	r0, r4, r0
   17f10:	add	r0, r5, r0
   17f14:	add	r0, r0, #4
   17f18:	bl	12e08 <strcmp@plt>
   17f1c:	sub	r4, r4, #4
   17f20:	sub	r7, r7, #1
   17f24:	cmp	r0, #0
   17f28:	bne	17ea4 <test_scan@@Base+0x1458>
   17f2c:	ldr	r0, [sp, #24]
   17f30:	add	r0, r0, r7
   17f34:	cmp	r0, #2
   17f38:	beq	17f4c <test_scan@@Base+0x1500>
   17f3c:	ldr	r0, [pc, #4072]	; 18f2c <test_scan@@Base+0x24e0>
   17f40:	add	r0, pc, r0
   17f44:	b	17374 <test_scan@@Base+0x928>
   17f48:	andeq	r0, r1, r4, asr #9
   17f4c:	ldr	r4, [pc, #3908]	; 18e98 <test_scan@@Base+0x244c>
   17f50:	add	r4, pc, r4
   17f54:	ldr	r0, [sp, #24]
   17f58:	subs	r0, r0, #1
   17f5c:	str	r0, [sp, #24]
   17f60:	bls	17fd4 <test_scan@@Base+0x1588>
   17f64:	ldr	r0, [sp, #24]
   17f68:	cmp	sl, r0
   17f6c:	bls	18e04 <test_scan@@Base+0x23b8>
   17f70:	ldr	r0, [r5]
   17f74:	ldr	r1, [r5, r0]
   17f78:	sub	r1, r0, r1
   17f7c:	add	r1, r5, r1
   17f80:	ldrh	r2, [r1]
   17f84:	cmp	r2, #12
   17f88:	bcc	184dc <test_scan@@Base+0x1a90>
   17f8c:	ldrh	r1, [r1, #10]
   17f90:	cmp	r1, #0
   17f94:	beq	184dc <test_scan@@Base+0x1a90>
   17f98:	add	r2, r0, r1
   17f9c:	ldr	r2, [r5, r2]
   17fa0:	add	r0, r2, r0
   17fa4:	add	r0, r0, r1
   17fa8:	mov	r1, r4
   17fac:	add	r0, r5, r0
   17fb0:	add	r0, r0, #4
   17fb4:	bl	12e08 <strcmp@plt>
   17fb8:	sub	r5, r5, #4
   17fbc:	cmp	r0, #0
   17fc0:	bne	17f54 <test_scan@@Base+0x1508>
   17fc4:	ldr	r0, [pc, #3800]	; 18ea4 <test_scan@@Base+0x2458>
   17fc8:	add	r0, pc, r0
   17fcc:	b	17374 <test_scan@@Base+0x928>
   17fd0:			; <UNDEFINED> instruction: 0x0000e2b7
   17fd4:	ldr	r5, [pc, #3776]	; 18e9c <test_scan@@Base+0x2450>
   17fd8:	mov	r4, sl
   17fdc:	add	r5, pc, r5
   17fe0:	cmp	r4, sl
   17fe4:	bls	18054 <test_scan@@Base+0x1608>
   17fe8:	sub	r4, r4, #1
   17fec:	cmp	sl, r4
   17ff0:	bls	18e04 <test_scan@@Base+0x23b8>
   17ff4:	ldr	r0, [r8]
   17ff8:	ldr	r1, [r8, r0]
   17ffc:	sub	r1, r0, r1
   18000:	add	r1, r8, r1
   18004:	ldrh	r2, [r1]
   18008:	cmp	r2, #12
   1800c:	bcc	184dc <test_scan@@Base+0x1a90>
   18010:	ldrh	r1, [r1, #10]
   18014:	cmp	r1, #0
   18018:	beq	184dc <test_scan@@Base+0x1a90>
   1801c:	add	r2, r0, r1
   18020:	ldr	r2, [r8, r2]
   18024:	add	r0, r2, r0
   18028:	add	r0, r0, r1
   1802c:	mov	r1, r5
   18030:	add	r0, r8, r0
   18034:	add	r0, r0, #4
   18038:	bl	12e08 <strcmp@plt>
   1803c:	sub	r8, r8, #4
   18040:	cmp	r0, #0
   18044:	bne	17fe0 <test_scan@@Base+0x1594>
   18048:	ldr	r0, [pc, #3672]	; 18ea8 <test_scan@@Base+0x245c>
   1804c:	add	r0, pc, r0
   18050:	b	17374 <test_scan@@Base+0x928>
   18054:	ldr	r0, [sp, #56]	; 0x38
   18058:	ldr	r8, [pc, #3648]	; 18ea0 <test_scan@@Base+0x2454>
   1805c:	mov	r5, #0
   18060:	add	r4, r0, #8
   18064:	add	r8, pc, r8
   18068:	cmp	sl, r5
   1806c:	beq	18e04 <test_scan@@Base+0x23b8>
   18070:	ldr	r0, [r4, #-4]
   18074:	add	r1, r4, r0
   18078:	ldr	r1, [r1, #-4]
   1807c:	sub	r1, r0, r1
   18080:	add	r1, r4, r1
   18084:	ldrh	r2, [r1, #-4]
   18088:	cmp	r2, #12
   1808c:	bcc	184dc <test_scan@@Base+0x1a90>
   18090:	ldrh	r1, [r1, #6]
   18094:	cmp	r1, #0
   18098:	beq	184dc <test_scan@@Base+0x1a90>
   1809c:	add	r2, r0, r1
   180a0:	add	r2, r4, r2
   180a4:	ldr	r2, [r2, #-4]
   180a8:	add	r0, r2, r0
   180ac:	add	r0, r0, r1
   180b0:	mov	r1, r8
   180b4:	add	r0, r4, r0
   180b8:	bl	12e08 <strcmp@plt>
   180bc:	cmp	r0, #0
   180c0:	beq	180e4 <test_scan@@Base+0x1698>
   180c4:	add	r5, r5, #1
   180c8:	add	r4, r4, #4
   180cc:	cmp	r5, sl
   180d0:	bcc	18068 <test_scan@@Base+0x161c>
   180d4:	b	18174 <test_scan@@Base+0x1728>
   180d8:	andeq	r0, r1, sl, lsl #10
   180dc:	andeq	r0, r1, r5, ror #9
   180e0:	andeq	lr, r0, r7, asr #3
   180e4:	ldr	r0, [sp, #56]	; 0x38
   180e8:	ldr	r8, [pc, #3516]	; 18eac <test_scan@@Base+0x2460>
   180ec:	mov	r4, #0
   180f0:	add	r6, r0, #12
   180f4:	add	r8, pc, r8
   180f8:	add	r7, r6, r5, lsl #2
   180fc:	add	r9, r4, #1
   18100:	add	r5, r5, #1
   18104:	cmp	r5, sl
   18108:	bcs	1816c <test_scan@@Base+0x1720>
   1810c:	ldr	r0, [r7, #-4]
   18110:	add	r1, r7, r0
   18114:	ldr	r1, [r1, #-4]
   18118:	sub	r1, r0, r1
   1811c:	add	r1, r7, r1
   18120:	ldrh	r2, [r1, #-4]
   18124:	cmp	r2, #12
   18128:	bcc	184dc <test_scan@@Base+0x1a90>
   1812c:	ldrh	r1, [r1, #6]
   18130:	cmp	r1, #0
   18134:	beq	184dc <test_scan@@Base+0x1a90>
   18138:	add	r2, r0, r1
   1813c:	add	r2, r7, r2
   18140:	ldr	r2, [r2, #-4]
   18144:	add	r0, r2, r0
   18148:	add	r0, r0, r1
   1814c:	mov	r1, r8
   18150:	add	r0, r7, r0
   18154:	bl	12e08 <strcmp@plt>
   18158:	add	r7, r7, #4
   1815c:	cmp	r0, #0
   18160:	bne	18100 <test_scan@@Base+0x16b4>
   18164:	mov	r4, r9
   18168:	b	180f8 <test_scan@@Base+0x16ac>
   1816c:	cmp	r4, #0
   18170:	beq	18184 <test_scan@@Base+0x1738>
   18174:	ldr	r0, [pc, #3508]	; 18f30 <test_scan@@Base+0x24e4>
   18178:	add	r0, pc, r0
   1817c:	b	17374 <test_scan@@Base+0x928>
   18180:	andeq	r0, r1, ip, lsr r2
   18184:	ldr	r0, [sp, #56]	; 0x38
   18188:	ldr	r8, [pc, #3360]	; 18eb0 <test_scan@@Base+0x2464>
   1818c:	mov	r5, #0
   18190:	add	r4, r0, #8
   18194:	add	r8, pc, r8
   18198:	cmp	sl, r5
   1819c:	beq	18e04 <test_scan@@Base+0x23b8>
   181a0:	ldr	r0, [r4, #-4]
   181a4:	add	r1, r4, r0
   181a8:	ldr	r1, [r1, #-4]
   181ac:	sub	r1, r0, r1
   181b0:	add	r1, r4, r1
   181b4:	ldrh	r2, [r1, #-4]
   181b8:	cmp	r2, #12
   181bc:	bcc	184dc <test_scan@@Base+0x1a90>
   181c0:	ldrh	r1, [r1, #6]
   181c4:	cmp	r1, #0
   181c8:	beq	184dc <test_scan@@Base+0x1a90>
   181cc:	add	r2, r0, r1
   181d0:	add	r2, r4, r2
   181d4:	ldr	r2, [r2, #-4]
   181d8:	add	r0, r2, r0
   181dc:	add	r0, r0, r1
   181e0:	mov	r1, r8
   181e4:	add	r0, r4, r0
   181e8:	bl	12e08 <strcmp@plt>
   181ec:	cmp	r0, #0
   181f0:	beq	1820c <test_scan@@Base+0x17c0>
   181f4:	add	r5, r5, #1
   181f8:	add	r4, r4, #4
   181fc:	cmp	r5, sl
   18200:	bcc	18198 <test_scan@@Base+0x174c>
   18204:	b	182a8 <test_scan@@Base+0x185c>
   18208:	andeq	lr, r0, lr, rrx
   1820c:	ldr	r0, [sp, #56]	; 0x38
   18210:	ldr	r8, [pc, #3228]	; 18eb4 <test_scan@@Base+0x2468>
   18214:	mov	r4, #0
   18218:	add	r9, r0, #12
   1821c:	add	r8, pc, r8
   18220:	add	r7, r9, r5, lsl #2
   18224:	add	r4, r4, #1
   18228:	add	r5, r5, #1
   1822c:	cmp	r5, sl
   18230:	bcs	18290 <test_scan@@Base+0x1844>
   18234:	ldr	r0, [r7, #-4]
   18238:	add	r1, r7, r0
   1823c:	ldr	r1, [r1, #-4]
   18240:	sub	r1, r0, r1
   18244:	add	r1, r7, r1
   18248:	ldrh	r2, [r1, #-4]
   1824c:	cmp	r2, #12
   18250:	bcc	184dc <test_scan@@Base+0x1a90>
   18254:	ldrh	r1, [r1, #6]
   18258:	cmp	r1, #0
   1825c:	beq	184dc <test_scan@@Base+0x1a90>
   18260:	add	r2, r0, r1
   18264:	add	r2, r7, r2
   18268:	ldr	r2, [r2, #-4]
   1826c:	add	r0, r2, r0
   18270:	add	r0, r0, r1
   18274:	mov	r1, r8
   18278:	add	r0, r7, r0
   1827c:	bl	12e08 <strcmp@plt>
   18280:	add	r7, r7, #4
   18284:	cmp	r0, #0
   18288:	bne	18228 <test_scan@@Base+0x17dc>
   1828c:	b	18220 <test_scan@@Base+0x17d4>
   18290:	cmp	r4, #0
   18294:	beq	182a8 <test_scan@@Base+0x185c>
   18298:	ldr	r0, [pc, #3220]	; 18f34 <test_scan@@Base+0x24e8>
   1829c:	add	r0, pc, r0
   182a0:	b	17374 <test_scan@@Base+0x928>
   182a4:	andeq	sp, r0, r8, ror #22
   182a8:	ldr	r0, [sp, #56]	; 0x38
   182ac:	ldr	r8, [pc, #3076]	; 18eb8 <test_scan@@Base+0x246c>
   182b0:	mov	r5, #0
   182b4:	add	r4, r0, #8
   182b8:	add	r8, pc, r8
   182bc:	cmp	sl, r5
   182c0:	beq	18e04 <test_scan@@Base+0x23b8>
   182c4:	ldr	r0, [r4, #-4]
   182c8:	add	r1, r4, r0
   182cc:	ldr	r1, [r1, #-4]
   182d0:	sub	r1, r0, r1
   182d4:	add	r1, r4, r1
   182d8:	ldrh	r2, [r1, #-4]
   182dc:	cmp	r2, #12
   182e0:	bcc	184dc <test_scan@@Base+0x1a90>
   182e4:	ldrh	r1, [r1, #6]
   182e8:	cmp	r1, #0
   182ec:	beq	184dc <test_scan@@Base+0x1a90>
   182f0:	add	r2, r0, r1
   182f4:	add	r2, r4, r2
   182f8:	ldr	r2, [r2, #-4]
   182fc:	add	r0, r2, r0
   18300:	add	r0, r0, r1
   18304:	mov	r1, r8
   18308:	add	r0, r4, r0
   1830c:	bl	12e08 <strcmp@plt>
   18310:	cmp	r0, #0
   18314:	beq	18340 <test_scan@@Base+0x18f4>
   18318:	add	r5, r5, #1
   1831c:	add	r4, r4, #4
   18320:	cmp	r5, sl
   18324:	bcc	182bc <test_scan@@Base+0x1870>
   18328:	b	183c8 <test_scan@@Base+0x197c>
   1832c:	andeq	r0, r1, pc, asr #4
   18330:	strdeq	r0, [r1], -sl
   18334:	andeq	r0, r1, r4, lsl #4
   18338:	andeq	r0, r1, r8, asr #3
   1833c:	andeq	r0, r1, r0, rrx
   18340:	ldr	r8, [pc, #2932]	; 18ebc <test_scan@@Base+0x2470>
   18344:	mov	r4, #0
   18348:	add	r8, pc, r8
   1834c:	add	r7, r6, r5, lsl #2
   18350:	add	r9, r4, #1
   18354:	add	r5, r5, #1
   18358:	cmp	r5, sl
   1835c:	bcs	183c0 <test_scan@@Base+0x1974>
   18360:	ldr	r0, [r7, #-4]
   18364:	add	r1, r7, r0
   18368:	ldr	r1, [r1, #-4]
   1836c:	sub	r1, r0, r1
   18370:	add	r1, r7, r1
   18374:	ldrh	r2, [r1, #-4]
   18378:	cmp	r2, #12
   1837c:	bcc	184dc <test_scan@@Base+0x1a90>
   18380:	ldrh	r1, [r1, #6]
   18384:	cmp	r1, #0
   18388:	beq	184dc <test_scan@@Base+0x1a90>
   1838c:	add	r2, r0, r1
   18390:	add	r2, r7, r2
   18394:	ldr	r2, [r2, #-4]
   18398:	add	r0, r2, r0
   1839c:	add	r0, r0, r1
   183a0:	mov	r1, r8
   183a4:	add	r0, r7, r0
   183a8:	bl	12e08 <strcmp@plt>
   183ac:	add	r7, r7, #4
   183b0:	cmp	r0, #0
   183b4:	bne	18354 <test_scan@@Base+0x1908>
   183b8:	mov	r4, r9
   183bc:	b	1834c <test_scan@@Base+0x1900>
   183c0:	cmp	r4, #0
   183c4:	beq	183d8 <test_scan@@Base+0x198c>
   183c8:	ldr	r0, [pc, #2804]	; 18ec4 <test_scan@@Base+0x2478>
   183cc:	add	r0, pc, r0
   183d0:	b	17374 <test_scan@@Base+0x928>
   183d4:	ldrdeq	pc, [r0], -r8
   183d8:	ldr	r0, [sp, #56]	; 0x38
   183dc:	ldr	r8, [pc, #2780]	; 18ec0 <test_scan@@Base+0x2474>
   183e0:	mov	r5, #0
   183e4:	add	r4, r0, #8
   183e8:	add	r8, pc, r8
   183ec:	cmp	sl, r5
   183f0:	beq	18e04 <test_scan@@Base+0x23b8>
   183f4:	ldr	r0, [r4, #-4]
   183f8:	add	r1, r4, r0
   183fc:	ldr	r1, [r1, #-4]
   18400:	sub	r1, r0, r1
   18404:	add	r1, r4, r1
   18408:	ldrh	r2, [r1, #-4]
   1840c:	cmp	r2, #12
   18410:	bcc	184dc <test_scan@@Base+0x1a90>
   18414:	ldrh	r1, [r1, #6]
   18418:	cmp	r1, #0
   1841c:	beq	184dc <test_scan@@Base+0x1a90>
   18420:	add	r2, r0, r1
   18424:	add	r2, r4, r2
   18428:	ldr	r2, [r2, #-4]
   1842c:	add	r0, r2, r0
   18430:	add	r0, r0, r1
   18434:	mov	r1, r8
   18438:	add	r0, r4, r0
   1843c:	bl	12e08 <strcmp@plt>
   18440:	cmp	r0, #0
   18444:	beq	1845c <test_scan@@Base+0x1a10>
   18448:	add	r5, r5, #1
   1844c:	add	r4, r4, #4
   18450:	cmp	r5, sl
   18454:	bcc	183ec <test_scan@@Base+0x19a0>
   18458:	b	18560 <test_scan@@Base+0x1b14>
   1845c:	ldr	r8, [pc, #2660]	; 18ec8 <test_scan@@Base+0x247c>
   18460:	mov	r4, #0
   18464:	add	r8, pc, r8
   18468:	add	r7, r6, r5, lsl #2
   1846c:	add	r4, r4, #1
   18470:	add	r5, r5, #1
   18474:	cmp	r5, sl
   18478:	bcs	184fc <test_scan@@Base+0x1ab0>
   1847c:	ldr	r0, [r7, #-4]
   18480:	add	r1, r7, r0
   18484:	ldr	r1, [r1, #-4]
   18488:	sub	r1, r0, r1
   1848c:	add	r1, r7, r1
   18490:	ldrh	r2, [r1, #-4]
   18494:	cmp	r2, #12
   18498:	bcc	184dc <test_scan@@Base+0x1a90>
   1849c:	ldrh	r1, [r1, #6]
   184a0:	cmp	r1, #0
   184a4:	beq	184dc <test_scan@@Base+0x1a90>
   184a8:	add	r2, r0, r1
   184ac:	add	r2, r7, r2
   184b0:	ldr	r2, [r2, #-4]
   184b4:	add	r0, r2, r0
   184b8:	add	r0, r0, r1
   184bc:	mov	r1, r8
   184c0:	add	r0, r7, r0
   184c4:	bl	12e08 <strcmp@plt>
   184c8:	add	r7, r7, #4
   184cc:	cmp	r0, #0
   184d0:	bne	18470 <test_scan@@Base+0x1a24>
   184d4:	b	18468 <test_scan@@Base+0x1a1c>
   184d8:	andeq	sp, r0, r7, asr #28
   184dc:	ldr	r0, [pc, #2620]	; 18f20 <test_scan@@Base+0x24d4>
   184e0:	ldr	r1, [pc, #2620]	; 18f24 <test_scan@@Base+0x24d8>
   184e4:	ldr	r3, [pc, #2620]	; 18f28 <test_scan@@Base+0x24dc>
   184e8:	movw	r2, #699	; 0x2bb
   184ec:	add	r0, pc, r0
   184f0:	add	r1, pc, r1
   184f4:	add	r3, pc, r3
   184f8:	bl	12f04 <__assert_fail@plt>
   184fc:	cmp	r4, #2
   18500:	bne	18560 <test_scan@@Base+0x1b14>
   18504:	ldr	r0, [sp, #44]	; 0x2c
   18508:	ldr	r1, [sp, #40]	; 0x28
   1850c:	ldr	r0, [r1, r0]
   18510:	cmp	r0, #0
   18514:	beq	18574 <test_scan@@Base+0x1b28>
   18518:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1851c:	ldr	r2, [sp, #44]	; 0x2c
   18520:	ldr	r3, [sp, #28]
   18524:	mov	r7, #0
   18528:	add	r1, r1, r2
   1852c:	ldr	r2, [sp, #60]	; 0x3c
   18530:	add	r2, r1, r2
   18534:	add	r2, r2, r3
   18538:	add	r3, r2, #4
   1853c:	cmp	r0, r7
   18540:	beq	18e3c <test_scan@@Base+0x23f0>
   18544:	ldrb	r5, [r3, r7]
   18548:	cmp	r5, #6
   1854c:	beq	1856c <test_scan@@Base+0x1b20>
   18550:	add	r7, r7, #1
   18554:	cmp	r7, r0
   18558:	bcc	1853c <test_scan@@Base+0x1af0>
   1855c:	b	18574 <test_scan@@Base+0x1b28>
   18560:	ldr	r0, [pc, #2404]	; 18ecc <test_scan@@Base+0x2480>
   18564:	add	r0, pc, r0
   18568:	b	17374 <test_scan@@Base+0x928>
   1856c:	cmp	r7, #0
   18570:	beq	18580 <test_scan@@Base+0x1b34>
   18574:	ldr	r0, [pc, #2388]	; 18ed0 <test_scan@@Base+0x2484>
   18578:	add	r0, pc, r0
   1857c:	b	17374 <test_scan@@Base+0x928>
   18580:	mov	r7, #0
   18584:	cmp	r0, r7
   18588:	beq	18e3c <test_scan@@Base+0x23f0>
   1858c:	ldrb	r5, [r3, r7]
   18590:	cmp	r5, #1
   18594:	beq	185ac <test_scan@@Base+0x1b60>
   18598:	add	r7, r7, #1
   1859c:	cmp	r7, r0
   185a0:	bcc	18584 <test_scan@@Base+0x1b38>
   185a4:	b	1863c <test_scan@@Base+0x1bf0>
   185a8:	andeq	sp, r0, r7, lsr sp
   185ac:	cmp	r7, #2
   185b0:	bne	1863c <test_scan@@Base+0x1bf0>
   185b4:	cmp	r0, #4
   185b8:	bcc	185f0 <test_scan@@Base+0x1ba4>
   185bc:	add	r7, r2, #7
   185c0:	mov	r5, #0
   185c4:	add	r4, r5, #3
   185c8:	cmp	r0, r4
   185cc:	bls	18e3c <test_scan@@Base+0x23f0>
   185d0:	ldrb	r4, [r7, r5]
   185d4:	cmp	r4, #1
   185d8:	beq	18648 <test_scan@@Base+0x1bfc>
   185dc:	add	r4, r5, #1
   185e0:	add	r5, r5, #4
   185e4:	cmp	r5, r0
   185e8:	mov	r5, r4
   185ec:	bcc	185c4 <test_scan@@Base+0x1b78>
   185f0:	mov	r7, #0
   185f4:	cmp	r0, r7
   185f8:	beq	18e3c <test_scan@@Base+0x23f0>
   185fc:	ldrb	r5, [r3, r7]
   18600:	cmp	r5, #5
   18604:	beq	186e0 <test_scan@@Base+0x1c94>
   18608:	add	r7, r7, #1
   1860c:	cmp	r7, r0
   18610:	bcc	185f4 <test_scan@@Base+0x1ba8>
   18614:	mov	r7, #0
   18618:	cmp	r0, r7
   1861c:	beq	18e3c <test_scan@@Base+0x23f0>
   18620:	ldrb	r5, [r3, r7]
   18624:	cmp	r5, #2
   18628:	beq	18654 <test_scan@@Base+0x1c08>
   1862c:	add	r7, r7, #1
   18630:	cmp	r7, r0
   18634:	bcc	18618 <test_scan@@Base+0x1bcc>
   18638:	b	18684 <test_scan@@Base+0x1c38>
   1863c:	ldr	r0, [pc, #2192]	; 18ed4 <test_scan@@Base+0x2488>
   18640:	add	r0, pc, r0
   18644:	b	17374 <test_scan@@Base+0x928>
   18648:	ldr	r0, [pc, #2184]	; 18ed8 <test_scan@@Base+0x248c>
   1864c:	add	r0, pc, r0
   18650:	b	17374 <test_scan@@Base+0x928>
   18654:	cmp	r7, #6
   18658:	bne	18684 <test_scan@@Base+0x1c38>
   1865c:	mov	r7, #0
   18660:	cmp	r0, r7
   18664:	beq	18e3c <test_scan@@Base+0x23f0>
   18668:	ldrb	r5, [r3, r7]
   1866c:	cmp	r5, #3
   18670:	beq	18694 <test_scan@@Base+0x1c48>
   18674:	add	r7, r7, #1
   18678:	cmp	r7, r0
   1867c:	bcc	18660 <test_scan@@Base+0x1c14>
   18680:	b	186e0 <test_scan@@Base+0x1c94>
   18684:	ldr	r0, [pc, #2128]	; 18edc <test_scan@@Base+0x2490>
   18688:	add	r0, pc, r0
   1868c:	b	17374 <test_scan@@Base+0x928>
   18690:	andeq	pc, r0, lr, ror lr	; <UNPREDICTABLE>
   18694:	cmp	r7, #3
   18698:	bne	186e0 <test_scan@@Base+0x1c94>
   1869c:	cmp	r0, #4
   186a0:	bcc	186f8 <test_scan@@Base+0x1cac>
   186a4:	add	r3, r2, #7
   186a8:	mov	r7, #0
   186ac:	add	r5, r7, #3
   186b0:	cmp	r0, r5
   186b4:	bls	18e3c <test_scan@@Base+0x23f0>
   186b8:	ldrb	r5, [r3, r7]
   186bc:	cmp	r5, #3
   186c0:	beq	186f0 <test_scan@@Base+0x1ca4>
   186c4:	add	r5, r7, #1
   186c8:	add	r7, r7, #4
   186cc:	cmp	r7, r0
   186d0:	mov	r7, r5
   186d4:	bcc	186ac <test_scan@@Base+0x1c60>
   186d8:	b	186f8 <test_scan@@Base+0x1cac>
   186dc:	andeq	pc, r0, r5, lsr lr	; <UNPREDICTABLE>
   186e0:	ldr	r0, [pc, #2040]	; 18ee0 <test_scan@@Base+0x2494>
   186e4:	add	r0, pc, r0
   186e8:	b	17374 <test_scan@@Base+0x928>
   186ec:	andeq	pc, r0, r9, lsr #28
   186f0:	cmp	r7, #0
   186f4:	beq	18708 <test_scan@@Base+0x1cbc>
   186f8:	ldr	r0, [pc, #2020]	; 18ee4 <test_scan@@Base+0x2498>
   186fc:	add	r0, pc, r0
   18700:	b	17374 <test_scan@@Base+0x928>
   18704:	andeq	pc, r0, ip, lsl #26
   18708:	cmp	r0, #5
   1870c:	bcc	18e24 <test_scan@@Base+0x23d8>
   18710:	add	r3, r2, #8
   18714:	mov	r7, #0
   18718:	add	r5, r7, #4
   1871c:	cmp	r0, r5
   18720:	bls	18e3c <test_scan@@Base+0x23f0>
   18724:	ldrb	r5, [r3, r7]
   18728:	cmp	r5, #3
   1872c:	beq	187d0 <test_scan@@Base+0x1d84>
   18730:	add	r5, r7, #1
   18734:	add	r7, r7, #5
   18738:	cmp	r7, r0
   1873c:	mov	r7, r5
   18740:	bcc	18718 <test_scan@@Base+0x1ccc>
   18744:	b	18e24 <test_scan@@Base+0x23d8>
   18748:	muleq	r0, r3, fp
   1874c:			; <UNDEFINED> instruction: 0x0000fbbc
   18750:	andeq	pc, r0, r8, asr ip	; <UNPREDICTABLE>
   18754:	andeq	sp, r0, lr, ror #19
   18758:	ldrdeq	sp, [r0], -r8
   1875c:	andeq	pc, r0, ip, lsr #20
   18760:	andeq	pc, r0, sp, ror sl	; <UNPREDICTABLE>
   18764:	andeq	lr, r0, r5, ror #1
   18768:	andeq	sp, r0, r8, lsr #31
   1876c:	andeq	lr, r0, pc, ror r1
   18770:	strdeq	sp, [r0], -r6
   18774:	andeq	sp, r0, r8, lsl lr
   18778:	muleq	r0, r3, r4
   1877c:	andeq	sp, r0, r0, asr #15
   18780:	strdeq	sp, [r0], -r8
   18784:	andeq	sp, r0, r5, lsl #16
   18788:	andeq	pc, r0, fp, ror #19
   1878c:	andeq	sp, r0, r3, lsl #16
   18790:	andeq	sp, r0, ip, asr #5
   18794:	ldrdeq	sp, [r0], -r9
   18798:	andeq	sp, r0, r7, ror #15
   1879c:	andeq	sp, r0, ip, lsr #5
   187a0:			; <UNDEFINED> instruction: 0x0000d7b9
   187a4:	andeq	pc, r0, lr, ror r9	; <UNPREDICTABLE>
   187a8:	andeq	pc, r0, r0, lsr #17
   187ac:	andeq	pc, r0, lr, lsr #16
   187b0:	andeq	sp, r0, r6, ror #12
   187b4:	andeq	sp, r0, r6, asr #12
   187b8:	andeq	pc, r0, r6, asr r7	; <UNPREDICTABLE>
   187bc:	ldrdeq	pc, [r0], -r2
   187c0:	andeq	pc, r0, r7, ror #14
   187c4:	andeq	sp, r0, r4, lsl #2
   187c8:	andeq	pc, r0, lr, ror r6	; <UNPREDICTABLE>
   187cc:	andeq	pc, r0, r8, asr r6	; <UNPREDICTABLE>
   187d0:	cmp	r7, #1
   187d4:	bne	18e24 <test_scan@@Base+0x23d8>
   187d8:	add	r3, r2, #3
   187dc:	sub	r2, r0, #1
   187e0:	cmn	r2, #1
   187e4:	beq	18e30 <test_scan@@Base+0x23e4>
   187e8:	cmp	r0, r2
   187ec:	bls	18e3c <test_scan@@Base+0x23f0>
   187f0:	ldrb	r7, [r3, r0]
   187f4:	sub	r3, r3, #1
   187f8:	sub	r2, r2, #1
   187fc:	cmp	r7, #3
   18800:	bne	187e0 <test_scan@@Base+0x1d94>
   18804:	cmp	r2, #4
   18808:	bne	18e30 <test_scan@@Base+0x23e4>
   1880c:	ldr	r2, [sp, #60]	; 0x3c
   18810:	cmp	r0, #4
   18814:	mov	r3, r0
   18818:	movcs	r3, #4
   1881c:	add	r1, r1, r3
   18820:	add	r1, r1, r2
   18824:	ldr	r2, [sp, #28]
   18828:	add	r1, r1, r2
   1882c:	add	r2, r1, #3
   18830:	sub	r1, r3, #1
   18834:	add	r3, r1, #1
   18838:	cmp	r3, #2
   1883c:	bcc	18e5c <test_scan@@Base+0x2410>
   18840:	cmp	r0, r1
   18844:	bls	18e3c <test_scan@@Base+0x23f0>
   18848:	ldrb	r3, [r2], #-1
   1884c:	sub	r1, r1, #1
   18850:	cmp	r3, #3
   18854:	bne	18834 <test_scan@@Base+0x1de8>
   18858:	cmp	r1, #2
   1885c:	bne	18e5c <test_scan@@Base+0x2410>
   18860:	ldr	r0, [sp, #48]	; 0x30
   18864:	mov	r4, #0
   18868:	mov	r2, r0
   1886c:	ldr	r1, [r2, #-4]!
   18870:	str	r2, [sp, #60]	; 0x3c
   18874:	str	r1, [fp, #-44]	; 0xffffffd4
   18878:	ldr	r8, [pc, #1652]	; 18ef4 <test_scan@@Base+0x24a8>
   1887c:	add	r8, pc, r8
   18880:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18884:	cmp	r1, r4
   18888:	beq	188b8 <test_scan@@Base+0x1e6c>
   1888c:	bls	18e68 <test_scan@@Base+0x241c>
   18890:	mov	r7, r0
   18894:	ldr	r1, [r7], #4
   18898:	add	r0, r0, r1
   1889c:	mov	r1, r8
   188a0:	add	r0, r0, #4
   188a4:	bl	12e08 <strcmp@plt>
   188a8:	cmp	r0, #0
   188ac:	add	r4, r4, #1
   188b0:	mov	r0, r7
   188b4:	bne	18880 <test_scan@@Base+0x1e34>
   188b8:	ldr	r8, [pc, #1592]	; 18ef8 <test_scan@@Base+0x24ac>
   188bc:	mov	r4, #0
   188c0:	add	r8, pc, r8
   188c4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   188c8:	cmp	r0, r4
   188cc:	beq	18900 <test_scan@@Base+0x1eb4>
   188d0:	bls	18e68 <test_scan@@Base+0x241c>
   188d4:	ldr	r1, [sp, #48]	; 0x30
   188d8:	mov	r7, r1
   188dc:	ldr	r0, [r7], #4
   188e0:	add	r0, r1, r0
   188e4:	mov	r1, r8
   188e8:	add	r0, r0, #4
   188ec:	bl	12e08 <strcmp@plt>
   188f0:	add	r4, r4, #1
   188f4:	cmp	r0, #0
   188f8:	str	r7, [sp, #48]	; 0x30
   188fc:	bne	188c4 <test_scan@@Base+0x1e78>
   18900:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18904:	ldr	r1, [sp, #52]	; 0x34
   18908:	mov	r8, #0
   1890c:	add	r1, r1, r0
   18910:	ldr	r0, [fp, #-52]	; 0xffffffcc
   18914:	str	r1, [fp, #-56]	; 0xffffffc8
   18918:	add	r0, r1, r0
   1891c:	ldr	r1, [sp, #28]
   18920:	ldr	r5, [pc, #1492]	; 18efc <test_scan@@Base+0x24b0>
   18924:	add	r4, r0, r1
   18928:	add	r5, pc, r5
   1892c:	add	r7, r4, #8
   18930:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18934:	cmp	r0, r8
   18938:	beq	189a8 <test_scan@@Base+0x1f5c>
   1893c:	bls	18e68 <test_scan@@Base+0x241c>
   18940:	ldr	r2, [sp, #60]	; 0x3c
   18944:	add	r0, r2, r8, lsl #2
   18948:	ldr	r1, [r0, #4]
   1894c:	add	r0, r7, r1
   18950:	add	r1, r2, r1
   18954:	add	r1, r1, r8, lsl #2
   18958:	ldr	r9, [r1, #4]
   1895c:	mov	r1, r5
   18960:	cmp	r9, #4
   18964:	mov	r2, r9
   18968:	movcs	r2, #4
   1896c:	bl	12eec <strncmp@plt>
   18970:	cmp	r0, #0
   18974:	mov	r1, r0
   18978:	mov	r2, #0
   1897c:	add	r7, r7, #4
   18980:	add	r8, r8, #1
   18984:	mvneq	r1, #0
   18988:	cmp	r9, #4
   1898c:	movwhi	r2, #1
   18990:	cmp	r0, #0
   18994:	movne	r2, r1
   18998:	cmp	r9, #4
   1899c:	movcc	r2, r1
   189a0:	cmp	r2, #0
   189a4:	bne	18930 <test_scan@@Base+0x1ee4>
   189a8:	ldr	r8, [pc, #1360]	; 18f00 <test_scan@@Base+0x24b4>
   189ac:	add	r4, r4, #8
   189b0:	mov	r7, #0
   189b4:	add	r8, pc, r8
   189b8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   189bc:	cmp	r0, r7
   189c0:	beq	18a30 <test_scan@@Base+0x1fe4>
   189c4:	bls	18e68 <test_scan@@Base+0x241c>
   189c8:	ldr	r2, [sp, #60]	; 0x3c
   189cc:	add	r0, r2, r7, lsl #2
   189d0:	ldr	r1, [r0, #4]
   189d4:	add	r0, r4, r1
   189d8:	add	r1, r2, r1
   189dc:	add	r1, r1, r7, lsl #2
   189e0:	ldr	r5, [r1, #4]
   189e4:	mov	r1, r8
   189e8:	cmp	r5, #4
   189ec:	mov	r2, r5
   189f0:	movcs	r2, #4
   189f4:	bl	12eec <strncmp@plt>
   189f8:	cmp	r0, #0
   189fc:	mov	r1, r0
   18a00:	mov	r2, #0
   18a04:	add	r4, r4, #4
   18a08:	add	r7, r7, #1
   18a0c:	mvneq	r1, #0
   18a10:	cmp	r5, #4
   18a14:	movwhi	r2, #1
   18a18:	cmp	r0, #0
   18a1c:	movne	r2, r1
   18a20:	cmp	r5, #4
   18a24:	movcc	r2, r1
   18a28:	cmp	r2, #0
   18a2c:	bne	189b8 <test_scan@@Base+0x1f6c>
   18a30:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18a34:	ldr	r1, [fp, #-56]	; 0xffffffc8
   18a38:	mov	r4, #0
   18a3c:	mvn	r7, #0
   18a40:	add	r0, r1, r0, lsl #2
   18a44:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18a48:	add	r0, r0, r1
   18a4c:	ldr	r1, [sp, #28]
   18a50:	ldr	r8, [pc, #1196]	; 18f04 <test_scan@@Base+0x24b8>
   18a54:	add	r9, r0, r1
   18a58:	add	r8, pc, r8
   18a5c:	add	r0, r9, #4
   18a60:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18a64:	cmp	r1, r4
   18a68:	beq	18aa4 <test_scan@@Base+0x2058>
   18a6c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   18a70:	add	r1, r2, r7
   18a74:	cmp	r2, r1
   18a78:	bls	18e68 <test_scan@@Base+0x241c>
   18a7c:	mov	r5, r0
   18a80:	ldr	r1, [r5, #-4]!
   18a84:	add	r0, r0, r1
   18a88:	mov	r1, r8
   18a8c:	bl	12e08 <strcmp@plt>
   18a90:	cmp	r0, #0
   18a94:	sub	r7, r7, #1
   18a98:	add	r4, r4, #1
   18a9c:	mov	r0, r5
   18aa0:	bne	18a60 <test_scan@@Base+0x2014>
   18aa4:	ldr	r8, [pc, #1116]	; 18f08 <test_scan@@Base+0x24bc>
   18aa8:	add	r0, r9, #4
   18aac:	mov	r4, #0
   18ab0:	mvn	r7, #0
   18ab4:	add	r8, pc, r8
   18ab8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18abc:	cmp	r1, r4
   18ac0:	beq	18afc <test_scan@@Base+0x20b0>
   18ac4:	ldr	r2, [fp, #-44]	; 0xffffffd4
   18ac8:	add	r1, r2, r7
   18acc:	cmp	r2, r1
   18ad0:	bls	18e68 <test_scan@@Base+0x241c>
   18ad4:	mov	r5, r0
   18ad8:	ldr	r1, [r5, #-4]!
   18adc:	add	r0, r0, r1
   18ae0:	mov	r1, r8
   18ae4:	bl	12e08 <strcmp@plt>
   18ae8:	cmp	r0, #0
   18aec:	sub	r7, r7, #1
   18af0:	add	r4, r4, #1
   18af4:	mov	r0, r5
   18af8:	bne	18ab8 <test_scan@@Base+0x206c>
   18afc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18b00:	add	r4, r9, #4
   18b04:	mov	r7, #0
   18b08:	sub	r0, r0, #1
   18b0c:	str	r0, [fp, #-52]	; 0xffffffcc
   18b10:	ldr	r8, [pc, #1012]	; 18f0c <test_scan@@Base+0x24c0>
   18b14:	add	r8, pc, r8
   18b18:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18b1c:	adds	r0, r0, r7
   18b20:	beq	18b94 <test_scan@@Base+0x2148>
   18b24:	ldr	r0, [fp, #-52]	; 0xffffffcc
   18b28:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18b2c:	add	r0, r0, r7
   18b30:	cmp	r1, r0
   18b34:	bls	18e68 <test_scan@@Base+0x241c>
   18b38:	ldr	r1, [r9, r7, lsl #2]
   18b3c:	add	r0, r4, r1
   18b40:	add	r1, r9, r1
   18b44:	ldr	r5, [r1, r7, lsl #2]
   18b48:	mov	r1, r8
   18b4c:	cmp	r5, #4
   18b50:	mov	r2, r5
   18b54:	movcs	r2, #4
   18b58:	bl	12eec <strncmp@plt>
   18b5c:	cmp	r0, #0
   18b60:	mov	r1, r0
   18b64:	mov	r2, #0
   18b68:	sub	r7, r7, #1
   18b6c:	sub	r4, r4, #4
   18b70:	mvneq	r1, #0
   18b74:	cmp	r5, #4
   18b78:	movwhi	r2, #1
   18b7c:	cmp	r0, #0
   18b80:	movne	r2, r1
   18b84:	cmp	r5, #4
   18b88:	movcc	r2, r1
   18b8c:	cmp	r2, #0
   18b90:	bne	18b18 <test_scan@@Base+0x20cc>
   18b94:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18b98:	add	r4, r9, #4
   18b9c:	mov	r8, #0
   18ba0:	rsb	r7, r0, #0
   18ba4:	cmp	r7, r8
   18ba8:	beq	18c20 <test_scan@@Base+0x21d4>
   18bac:	ldr	r0, [fp, #-52]	; 0xffffffcc
   18bb0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18bb4:	add	r0, r0, r8
   18bb8:	cmp	r1, r0
   18bbc:	bls	18e68 <test_scan@@Base+0x241c>
   18bc0:	ldr	r1, [r9, r8, lsl #2]
   18bc4:	add	r0, r4, r1
   18bc8:	add	r1, r9, r1
   18bcc:	ldr	r5, [r1, r8, lsl #2]
   18bd0:	ldr	r1, [pc, #824]	; 18f10 <test_scan@@Base+0x24c4>
   18bd4:	cmp	r5, #4
   18bd8:	mov	r2, r5
   18bdc:	add	r1, pc, r1
   18be0:	movcs	r2, #4
   18be4:	bl	12eec <strncmp@plt>
   18be8:	cmp	r0, #0
   18bec:	mov	r1, r0
   18bf0:	mov	r2, #0
   18bf4:	sub	r8, r8, #1
   18bf8:	sub	r4, r4, #4
   18bfc:	mvneq	r1, #0
   18c00:	cmp	r5, #4
   18c04:	movwhi	r2, #1
   18c08:	cmp	r0, #0
   18c0c:	movne	r2, r1
   18c10:	cmp	r5, #4
   18c14:	movcc	r2, r1
   18c18:	cmp	r2, #0
   18c1c:	bne	18ba4 <test_scan@@Base+0x2158>
   18c20:	mov	r0, #0
   18c24:	cmp	sl, r0
   18c28:	beq	18e04 <test_scan@@Base+0x23b8>
   18c2c:	ldr	r1, [r6, #-8]
   18c30:	add	r2, r6, r1
   18c34:	ldr	r2, [r2, #-8]
   18c38:	sub	r2, r1, r2
   18c3c:	add	r2, r6, r2
   18c40:	ldrh	r3, [r2, #-8]
   18c44:	cmp	r3, #10
   18c48:	bcc	18c6c <test_scan@@Base+0x2220>
   18c4c:	ldrh	r2, [r2]
   18c50:	cmp	r2, #0
   18c54:	beq	18c6c <test_scan@@Base+0x2220>
   18c58:	add	r1, r1, r2
   18c5c:	add	r1, r6, r1
   18c60:	ldrh	r1, [r1, #-8]
   18c64:	cmp	r1, #13
   18c68:	beq	18c7c <test_scan@@Base+0x2230>
   18c6c:	add	r0, r0, #1
   18c70:	add	r6, r6, #4
   18c74:	cmp	r0, sl
   18c78:	bcc	18c24 <test_scan@@Base+0x21d8>
   18c7c:	ldr	r0, [sp, #56]	; 0x38
   18c80:	mov	r1, #1
   18c84:	add	r0, r0, #8
   18c88:	cmp	sl, r1
   18c8c:	bls	18e04 <test_scan@@Base+0x23b8>
   18c90:	ldr	r2, [r0]
   18c94:	ldr	r3, [r0, r2]
   18c98:	sub	r3, r2, r3
   18c9c:	add	r3, r0, r3
   18ca0:	ldrh	r7, [r3]
   18ca4:	cmp	r7, #10
   18ca8:	bcc	18ccc <test_scan@@Base+0x2280>
   18cac:	ldrh	r3, [r3, #8]
   18cb0:	cmp	r3, #0
   18cb4:	beq	18ccc <test_scan@@Base+0x2280>
   18cb8:	add	r2, r2, r3
   18cbc:	add	r2, r0, r2
   18cc0:	ldrh	r2, [r2]
   18cc4:	cmp	r2, #42	; 0x2a
   18cc8:	beq	18cdc <test_scan@@Base+0x2290>
   18ccc:	add	r1, r1, #1
   18cd0:	add	r0, r0, #4
   18cd4:	cmp	r1, sl
   18cd8:	bcc	18c88 <test_scan@@Base+0x223c>
   18cdc:	ldr	r0, [sp, #28]
   18ce0:	ldr	r1, [sp, #32]
   18ce4:	add	r0, r0, r1
   18ce8:	ldr	r1, [fp, #-48]	; 0xffffffd0
   18cec:	cmn	r1, #1
   18cf0:	beq	18d64 <test_scan@@Base+0x2318>
   18cf4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   18cf8:	cmp	sl, r1
   18cfc:	bls	18e04 <test_scan@@Base+0x23b8>
   18d00:	ldr	r2, [r0]
   18d04:	ldr	r1, [r0, r2]
   18d08:	sub	r1, r2, r1
   18d0c:	add	r3, r0, r1
   18d10:	mov	r1, #1
   18d14:	ldrh	r7, [r3]
   18d18:	cmp	r7, #10
   18d1c:	bcc	18d4c <test_scan@@Base+0x2300>
   18d20:	ldrh	r3, [r3, #8]
   18d24:	cmp	r3, #0
   18d28:	beq	18d4c <test_scan@@Base+0x2300>
   18d2c:	add	r1, r2, r3
   18d30:	add	r1, r0, r1
   18d34:	ldrsh	r2, [r1]
   18d38:	uxth	r1, r2
   18d3c:	subs	r1, r1, #1
   18d40:	movwne	r1, #1
   18d44:	cmp	r2, #1
   18d48:	mvnlt	r1, #0
   18d4c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   18d50:	sub	r0, r0, #4
   18d54:	cmp	r1, #0
   18d58:	sub	r2, r2, #1
   18d5c:	str	r2, [fp, #-48]	; 0xffffffd0
   18d60:	bne	18ce8 <test_scan@@Base+0x229c>
   18d64:	ldr	r0, [sp, #36]	; 0x24
   18d68:	cmp	sl, #2
   18d6c:	ldr	r2, [sp, #20]
   18d70:	mov	r1, sl
   18d74:	ldr	r9, [sp, #28]
   18d78:	mov	r5, #0
   18d7c:	movcs	r1, #2
   18d80:	add	r0, r0, r1, lsl #2
   18d84:	sub	r1, r1, #1
   18d88:	add	r0, r0, r2
   18d8c:	ldr	r2, [sp, #28]
   18d90:	add	r0, r2, r0
   18d94:	cmn	r1, #1
   18d98:	beq	18e8c <test_scan@@Base+0x2440>
   18d9c:	cmp	sl, r1
   18da0:	bls	18e04 <test_scan@@Base+0x23b8>
   18da4:	ldr	r3, [r0]
   18da8:	ldr	r2, [r0, r3]
   18dac:	sub	r2, r3, r2
   18db0:	add	r7, r0, r2
   18db4:	mov	r2, #1
   18db8:	ldrh	r4, [r7]
   18dbc:	cmp	r4, #10
   18dc0:	bcc	18df0 <test_scan@@Base+0x23a4>
   18dc4:	ldrh	r7, [r7, #8]
   18dc8:	cmp	r7, #0
   18dcc:	beq	18df0 <test_scan@@Base+0x23a4>
   18dd0:	add	r2, r3, r7
   18dd4:	add	r2, r0, r2
   18dd8:	ldrsh	r3, [r2]
   18ddc:	uxth	r2, r3
   18de0:	subs	r2, r2, #42	; 0x2a
   18de4:	movwne	r2, #1
   18de8:	cmp	r3, #42	; 0x2a
   18dec:	mvnlt	r2, #0
   18df0:	sub	r0, r0, #4
   18df4:	sub	r1, r1, #1
   18df8:	cmp	r2, #0
   18dfc:	bne	18d94 <test_scan@@Base+0x2348>
   18e00:	b	170e8 <test_scan@@Base+0x69c>
   18e04:	ldr	r0, [pc, #264]	; 18f14 <test_scan@@Base+0x24c8>
   18e08:	ldr	r1, [pc, #264]	; 18f18 <test_scan@@Base+0x24cc>
   18e0c:	ldr	r3, [pc, #264]	; 18f1c <test_scan@@Base+0x24d0>
   18e10:	movw	r2, #693	; 0x2b5
   18e14:	add	r0, pc, r0
   18e18:	add	r1, pc, r1
   18e1c:	add	r3, pc, r3
   18e20:	bl	12f04 <__assert_fail@plt>
   18e24:	ldr	r0, [pc, #188]	; 18ee8 <test_scan@@Base+0x249c>
   18e28:	add	r0, pc, r0
   18e2c:	b	17374 <test_scan@@Base+0x928>
   18e30:	ldr	r0, [pc, #180]	; 18eec <test_scan@@Base+0x24a0>
   18e34:	add	r0, pc, r0
   18e38:	b	17374 <test_scan@@Base+0x928>
   18e3c:	ldr	r0, [pc, #244]	; 18f38 <test_scan@@Base+0x24ec>
   18e40:	ldr	r1, [pc, #244]	; 18f3c <test_scan@@Base+0x24f0>
   18e44:	ldr	r3, [pc, #244]	; 18f40 <test_scan@@Base+0x24f4>
   18e48:	movw	r2, #395	; 0x18b
   18e4c:	add	r0, pc, r0
   18e50:	add	r1, pc, r1
   18e54:	add	r3, pc, r3
   18e58:	bl	12f04 <__assert_fail@plt>
   18e5c:	ldr	r0, [pc, #140]	; 18ef0 <test_scan@@Base+0x24a4>
   18e60:	add	r0, pc, r0
   18e64:	b	17374 <test_scan@@Base+0x928>
   18e68:	ldr	r0, [pc, #212]	; 18f44 <test_scan@@Base+0x24f8>
   18e6c:	ldr	r1, [pc, #212]	; 18f48 <test_scan@@Base+0x24fc>
   18e70:	ldr	r3, [pc, #212]	; 18f4c <test_scan@@Base+0x2500>
   18e74:	mov	r2, #108	; 0x6c
   18e78:	add	r0, pc, r0
   18e7c:	add	r1, pc, r1
   18e80:	add	r3, pc, r3
   18e84:	bl	12f04 <__assert_fail@plt>
   18e88:	muleq	r0, r9, r5
   18e8c:	ldr	r9, [sp, #28]
   18e90:	b	170e8 <test_scan@@Base+0x69c>
   18e94:	andeq	pc, r0, r8, ror r5	; <UNPREDICTABLE>
   18e98:	andeq	sp, r0, lr, lsr r3
   18e9c:	andeq	ip, r0, r4, lsl #29
   18ea0:	ldrdeq	pc, [r0], -ip
   18ea4:	andeq	pc, r0, r5, lsl #8
   18ea8:	andeq	pc, r0, r6, asr r3	; <UNPREDICTABLE>
   18eac:	andeq	pc, r0, ip, asr #6
   18eb0:	andeq	sp, r0, r6, asr r1
   18eb4:	andeq	sp, r0, lr, asr #1
   18eb8:	andeq	ip, r0, r8, lsr #23
   18ebc:	andeq	ip, r0, r8, lsl fp
   18ec0:	andeq	pc, r0, r0, lsr r0	; <UNPREDICTABLE>
   18ec4:	andeq	lr, r0, r6, lsl #31
   18ec8:			; <UNDEFINED> instruction: 0x0000efb4
   18ecc:	ldrdeq	lr, [r0], -r1
   18ed0:	muleq	r0, r1, sp
   18ed4:	muleq	r0, ip, ip
   18ed8:	andeq	lr, r0, r8, asr ip
   18edc:	strdeq	lr, [r0], -r1
   18ee0:	andeq	lr, r0, lr, ror #21
   18ee4:	andeq	lr, r0, r3, asr #22
   18ee8:	ldrdeq	lr, [r0], -fp
   18eec:	muleq	r0, sp, r3
   18ef0:	andeq	lr, r0, ip, lsr r3
   18ef4:	andeq	ip, r0, r5, ror #13
   18ef8:	andeq	ip, r0, r1, lsr #13
   18efc:	andeq	ip, r0, r9, lsr r6
   18f00:	andeq	ip, r0, sp, lsr #11
   18f04:	andeq	ip, r0, r9, lsl #10
   18f08:	andeq	ip, r0, sp, lsr #9
   18f0c:	andeq	ip, r0, sp, asr #8
   18f10:	andeq	ip, r0, r5, lsl #7
   18f14:	andeq	sp, r0, fp, asr r0
   18f18:	ldrdeq	ip, [r0], -r0
   18f1c:			; <UNDEFINED> instruction: 0x0000d1b1
   18f20:	andeq	sp, r0, r9, lsl #18
   18f24:	strdeq	sp, [r0], -r8
   18f28:			; <UNDEFINED> instruction: 0x0000d8b0
   18f2c:			; <UNDEFINED> instruction: 0x0000f4b9
   18f30:	andeq	pc, r0, r0, lsl r2	; <UNPREDICTABLE>
   18f34:	ldrdeq	pc, [r0], -r1
   18f38:	andeq	sp, r0, r3, lsr #32
   18f3c:	andeq	sp, r0, r6, asr r0
   18f40:	ldrdeq	sp, [r0], -r1
   18f44:	strdeq	ip, [r0], -r7
   18f48:	andeq	sp, r0, sl, lsr #32
   18f4c:			; <UNDEFINED> instruction: 0x0000d1b0

00018f50 <test_basic_sort@@Base>:
   18f50:	push	{r4, r5, r6, r7, fp, lr}
   18f54:	add	fp, sp, #16
   18f58:	sub	sp, sp, #24
   18f5c:	mov	r4, r0
   18f60:	movw	r0, #1027	; 0x403
   18f64:	movt	r0, #515	; 0x203
   18f68:	str	r0, [sp, #15]
   18f6c:	movw	r0, #1798	; 0x706
   18f70:	movt	r0, #769	; 0x301
   18f74:	str	r0, [sp, #12]
   18f78:	mov	r0, r4
   18f7c:	bl	1e2ac <flatcc_builder_reset@@Base>
   18f80:	ldr	r1, [pc, #920]	; 19320 <test_basic_sort@@Base+0x3d0>
   18f84:	mov	r0, r4
   18f88:	mov	r2, #0
   18f8c:	mov	r3, #0
   18f90:	add	r1, pc, r1
   18f94:	bl	1eea8 <flatcc_builder_start_buffer@@Base>
   18f98:	cmp	r0, #0
   18f9c:	bne	18fac <test_basic_sort@@Base+0x5c>
   18fa0:	mov	r0, r4
   18fa4:	mov	r1, #36	; 0x24
   18fa8:	bl	20484 <flatcc_builder_start_table@@Base>
   18fac:	ldr	r1, [pc, #880]	; 19324 <test_basic_sort@@Base+0x3d4>
   18fb0:	mov	r0, r4
   18fb4:	add	r1, pc, r1
   18fb8:	bl	227bc <flatcc_builder_create_string_str@@Base>
   18fbc:	cmp	r0, #0
   18fc0:	beq	18fdc <test_basic_sort@@Base+0x8c>
   18fc4:	mov	r5, r0
   18fc8:	mov	r0, r4
   18fcc:	mov	r1, #3
   18fd0:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   18fd4:	cmp	r0, #0
   18fd8:	strne	r5, [r0]
   18fdc:	mvn	r0, #0
   18fe0:	mov	r1, #1
   18fe4:	mov	r2, #7
   18fe8:	mov	r3, #1
   18fec:	str	r1, [sp]
   18ff0:	str	r0, [sp, #4]
   18ff4:	add	r1, sp, #12
   18ff8:	mov	r0, r4
   18ffc:	bl	21070 <flatcc_builder_create_vector@@Base>
   19000:	cmp	r0, #0
   19004:	beq	19020 <test_basic_sort@@Base+0xd0>
   19008:	mov	r5, r0
   1900c:	mov	r0, r4
   19010:	mov	r1, #5
   19014:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   19018:	cmp	r0, #0
   1901c:	strne	r5, [r0]
   19020:	ldr	r1, [pc, #768]	; 19328 <test_basic_sort@@Base+0x3d8>
   19024:	mov	r0, r4
   19028:	mov	r2, #1
   1902c:	add	r1, pc, r1
   19030:	bl	20e20 <flatcc_builder_check_required@@Base>
   19034:	cmp	r0, #0
   19038:	beq	19300 <test_basic_sort@@Base+0x3b0>
   1903c:	mov	r0, r4
   19040:	bl	20eac <flatcc_builder_end_table@@Base>
   19044:	mov	r1, r0
   19048:	mov	r0, r4
   1904c:	bl	1f0a8 <flatcc_builder_end_buffer@@Base>
   19050:	add	r1, sp, #20
   19054:	mov	r0, r4
   19058:	bl	22ad4 <flatcc_builder_get_direct_buffer@@Base>
   1905c:	cmp	r0, #0
   19060:	beq	192e0 <test_basic_sort@@Base+0x390>
   19064:	ldr	r1, [r0, #4]
   19068:	movw	r2, #20301	; 0x4f4d
   1906c:	movt	r2, #21326	; 0x534e
   19070:	cmp	r1, r2
   19074:	bne	192e0 <test_basic_sort@@Base+0x390>
   19078:	ldr	r1, [r0]
   1907c:	ldr	r2, [r0, r1]!
   19080:	mov	r1, r0
   19084:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   19088:	cmp	r2, #15
   1908c:	bls	190a8 <test_basic_sort@@Base+0x158>
   19090:	ldrh	r1, [r1, #14]
   19094:	cmp	r1, #0
   19098:	ldrne	r1, [r0, r1]!
   1909c:	ldrne	r3, [r0, r1]!
   190a0:	cmpne	r3, #0
   190a4:	bne	190c8 <test_basic_sort@@Base+0x178>
   190a8:	ldr	r0, [pc, #648]	; 19338 <test_basic_sort@@Base+0x3e8>
   190ac:	ldr	r1, [pc, #648]	; 1933c <test_basic_sort@@Base+0x3ec>
   190b0:	ldr	r3, [pc, #648]	; 19340 <test_basic_sort@@Base+0x3f0>
   190b4:	mov	r2, #1552	; 0x610
   190b8:	add	r0, pc, r0
   190bc:	add	r1, pc, r1
   190c0:	add	r3, pc, r3
   190c4:	bl	12f04 <__assert_fail@plt>
   190c8:	add	r1, r0, #4
   190cc:	lsr	r2, r3, #1
   190d0:	sub	lr, r3, #1
   190d4:	cmp	lr, r2, lsl #1
   190d8:	mov	ip, r2
   190dc:	bcs	190f0 <test_basic_sort@@Base+0x1a0>
   190e0:	sub	r2, ip, #1
   190e4:	cmp	ip, #0
   190e8:	bne	190d4 <test_basic_sort@@Base+0x184>
   190ec:	b	191e0 <test_basic_sort@@Base+0x290>
   190f0:	lsl	r2, ip, #1
   190f4:	mov	r3, ip
   190f8:	ldr	r4, [r1, #-4]
   190fc:	cmp	r2, lr
   19100:	bcs	19124 <test_basic_sort@@Base+0x1d4>
   19104:	cmp	r4, r2
   19108:	orrhi	r6, r2, #1
   1910c:	cmphi	r4, r6
   19110:	bls	192ac <test_basic_sort@@Base+0x35c>
   19114:	ldrb	r5, [r1, r6]
   19118:	ldrb	r0, [r1, r2]
   1911c:	cmp	r0, r5
   19120:	movcc	r2, r6
   19124:	mov	r5, r2
   19128:	cmp	r4, r3
   1912c:	cmphi	r4, r5
   19130:	bls	192ac <test_basic_sort@@Base+0x35c>
   19134:	ldrb	r2, [r1, r3]
   19138:	ldrb	r6, [r1, r5]
   1913c:	cmp	r2, r6
   19140:	bcs	190e0 <test_basic_sort@@Base+0x190>
   19144:	cmp	lr, r5, lsl #1
   19148:	strb	r2, [r1, r5]
   1914c:	strb	r6, [r1, r3]
   19150:	lsl	r2, r5, #1
   19154:	mov	r3, r5
   19158:	bcs	190f8 <test_basic_sort@@Base+0x1a8>
   1915c:	b	190e0 <test_basic_sort@@Base+0x190>
   19160:	ldrb	r2, [r1]
   19164:	ldrb	r0, [r1, lr]
   19168:	mov	r4, #0
   1916c:	strb	r2, [r1, lr]
   19170:	sub	lr, lr, #1
   19174:	mov	r2, #0
   19178:	strb	r0, [r1]
   1917c:	ldr	r5, [r1, #-4]
   19180:	cmp	r4, lr
   19184:	bcs	191a8 <test_basic_sort@@Base+0x258>
   19188:	cmp	r5, r4
   1918c:	orrhi	r3, r4, #1
   19190:	cmphi	r5, r3
   19194:	bls	192ac <test_basic_sort@@Base+0x35c>
   19198:	ldrb	r0, [r1, r3]
   1919c:	ldrb	r6, [r1, r4]
   191a0:	cmp	r6, r0
   191a4:	movcc	r4, r3
   191a8:	mov	r3, r4
   191ac:	cmp	r5, r2
   191b0:	cmphi	r5, r3
   191b4:	bls	192ac <test_basic_sort@@Base+0x35c>
   191b8:	ldrb	r6, [r1, r2]
   191bc:	ldrb	r5, [r1, r3]
   191c0:	cmp	r6, r5
   191c4:	bcs	191e0 <test_basic_sort@@Base+0x290>
   191c8:	cmp	lr, r3, lsl #1
   191cc:	strb	r6, [r1, r3]
   191d0:	strb	r5, [r1, r2]
   191d4:	lsl	r4, r3, #1
   191d8:	mov	r2, r3
   191dc:	bcs	1917c <test_basic_sort@@Base+0x22c>
   191e0:	cmp	lr, #0
   191e4:	bne	19160 <test_basic_sort@@Base+0x210>
   191e8:	ldr	r0, [r1, #-4]
   191ec:	cmp	r0, #7
   191f0:	bne	190a8 <test_basic_sort@@Base+0x158>
   191f4:	ldr	lr, [pc, #304]	; 1932c <test_basic_sort@@Base+0x3dc>
   191f8:	ldr	r0, [pc, #304]	; 19330 <test_basic_sort@@Base+0x3e0>
   191fc:	ldr	ip, [pc, #304]	; 19334 <test_basic_sort@@Base+0x3e4>
   19200:	mov	r3, #0
   19204:	mov	r5, #0
   19208:	add	lr, pc, lr
   1920c:	add	r0, pc, r0
   19210:	add	ip, pc, ip
   19214:	cmp	r3, #7
   19218:	bcs	192ac <test_basic_sort@@Base+0x35c>
   1921c:	ldrb	r2, [r1, r3]
   19220:	ldrb	r3, [lr, r3]
   19224:	cmp	r2, r3
   19228:	bne	192d0 <test_basic_sort@@Base+0x380>
   1922c:	mov	r4, #0
   19230:	mov	r3, #6
   19234:	sub	r6, r3, r4
   19238:	add	r6, r4, r6, lsr #1
   1923c:	cmp	r6, #7
   19240:	bcs	192ac <test_basic_sort@@Base+0x35c>
   19244:	ldrb	r7, [r1, r6]
   19248:	cmp	r7, r2
   1924c:	movcs	r3, r6
   19250:	addcc	r4, r6, #1
   19254:	cmp	r3, r4
   19258:	bhi	19234 <test_basic_sort@@Base+0x2e4>
   1925c:	bne	192cc <test_basic_sort@@Base+0x37c>
   19260:	cmp	r4, #7
   19264:	bcs	192ac <test_basic_sort@@Base+0x35c>
   19268:	ldrb	r3, [r1, r4]
   1926c:	cmp	r3, r2
   19270:	bne	192cc <test_basic_sort@@Base+0x37c>
   19274:	uxtb	r2, r5
   19278:	cmp	r2, #3
   1927c:	mov	r2, r5
   19280:	movweq	r2, #2
   19284:	uxtb	r2, r2
   19288:	cmp	r4, r2
   1928c:	bne	192cc <test_basic_sort@@Base+0x37c>
   19290:	add	r5, r5, #1
   19294:	uxtb	r3, r5
   19298:	cmp	r3, #6
   1929c:	bls	19214 <test_basic_sort@@Base+0x2c4>
   192a0:	mov	r0, #0
   192a4:	sub	sp, fp, #16
   192a8:	pop	{r4, r5, r6, r7, fp, pc}
   192ac:	ldr	r0, [pc, #168]	; 1935c <test_basic_sort@@Base+0x40c>
   192b0:	ldr	r1, [pc, #168]	; 19360 <test_basic_sort@@Base+0x410>
   192b4:	ldr	r3, [pc, #168]	; 19364 <test_basic_sort@@Base+0x414>
   192b8:	movw	r2, #395	; 0x18b
   192bc:	add	r0, pc, r0
   192c0:	add	r1, pc, r1
   192c4:	add	r3, pc, r3
   192c8:	bl	12f04 <__assert_fail@plt>
   192cc:	mov	r0, ip
   192d0:	bl	12e5c <puts@plt>
   192d4:	mvn	r0, #0
   192d8:	sub	sp, fp, #16
   192dc:	pop	{r4, r5, r6, r7, fp, pc}
   192e0:	ldr	r0, [pc, #104]	; 19350 <test_basic_sort@@Base+0x400>
   192e4:	ldr	r1, [pc, #104]	; 19354 <test_basic_sort@@Base+0x404>
   192e8:	ldr	r3, [pc, #104]	; 19358 <test_basic_sort@@Base+0x408>
   192ec:	movw	r2, #706	; 0x2c2
   192f0:	add	r0, pc, r0
   192f4:	add	r1, pc, r1
   192f8:	add	r3, pc, r3
   192fc:	bl	12f04 <__assert_fail@plt>
   19300:	ldr	r0, [pc, #60]	; 19344 <test_basic_sort@@Base+0x3f4>
   19304:	ldr	r1, [pc, #60]	; 19348 <test_basic_sort@@Base+0x3f8>
   19308:	ldr	r3, [pc, #60]	; 1934c <test_basic_sort@@Base+0x3fc>
   1930c:	mov	r2, #235	; 0xeb
   19310:	add	r0, pc, r0
   19314:	add	r1, pc, r1
   19318:	add	r3, pc, r3
   1931c:	bl	12f04 <__assert_fail@plt>
   19320:	andeq	fp, r0, ip, ror #24
   19324:	andeq	fp, r0, ip, lsl #25
   19328:	andeq	lr, r0, r8, asr #29
   1932c:	andeq	lr, r0, lr, asr #25
   19330:	andeq	lr, r0, r7, lsl r4
   19334:	strdeq	lr, [r0], -r5
   19338:	andeq	ip, r0, sl, ror r2
   1933c:	andeq	fp, r0, ip, lsr #26
   19340:	andeq	ip, r0, r0, lsr #5
   19344:	andeq	ip, r0, r1, lsl #17
   19348:	andeq	ip, r0, r4, asr #14
   1934c:	andeq	ip, r0, fp, lsl r9
   19350:	ldrdeq	ip, [r0], -r2
   19354:	strdeq	ip, [r0], -r4
   19358:	andeq	ip, r0, lr, lsl fp
   1935c:			; <UNDEFINED> instruction: 0x0000cbb3
   19360:	andeq	ip, r0, r6, ror #23
   19364:	andeq	ip, r0, r1, ror #24

00019368 <test_clone_slice@@Base>:
   19368:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1936c:	add	fp, sp, #28
   19370:	sub	sp, sp, #36	; 0x24
   19374:	mov	r5, r0
   19378:	mov	r0, #256	; 0x100
   1937c:	str	r0, [sp, #27]
   19380:	str	r0, [sp, #24]
   19384:	mov	r0, r5
   19388:	bl	1e2ac <flatcc_builder_reset@@Base>
   1938c:	ldr	r1, [pc, #2560]	; 19d94 <test_clone_slice@@Base+0xa2c>
   19390:	mov	r0, r5
   19394:	mov	r2, #0
   19398:	mov	r3, #0
   1939c:	add	r1, pc, r1
   193a0:	bl	1eea8 <flatcc_builder_start_buffer@@Base>
   193a4:	cmp	r0, #0
   193a8:	bne	193b8 <test_clone_slice@@Base+0x50>
   193ac:	mov	r0, r5
   193b0:	mov	r1, #36	; 0x24
   193b4:	bl	20484 <flatcc_builder_start_table@@Base>
   193b8:	ldr	r1, [pc, #2520]	; 19d98 <test_clone_slice@@Base+0xa30>
   193bc:	mov	r0, r5
   193c0:	add	r1, pc, r1
   193c4:	bl	227bc <flatcc_builder_create_string_str@@Base>
   193c8:	cmp	r0, #0
   193cc:	beq	193e8 <test_clone_slice@@Base+0x80>
   193d0:	mov	r4, r0
   193d4:	mov	r0, r5
   193d8:	mov	r1, #3
   193dc:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   193e0:	cmp	r0, #0
   193e4:	strne	r4, [r0]
   193e8:	mvn	r0, #0
   193ec:	mov	r1, #1
   193f0:	mov	r2, #7
   193f4:	mov	r3, #1
   193f8:	str	r1, [sp]
   193fc:	str	r0, [sp, #4]
   19400:	add	r1, sp, #24
   19404:	mov	r0, r5
   19408:	bl	21070 <flatcc_builder_create_vector@@Base>
   1940c:	cmp	r0, #0
   19410:	beq	1942c <test_clone_slice@@Base+0xc4>
   19414:	mov	r4, r0
   19418:	mov	r0, r5
   1941c:	mov	r1, #24
   19420:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   19424:	cmp	r0, #0
   19428:	strne	r4, [r0]
   1942c:	mov	r0, r5
   19430:	mov	r1, #4
   19434:	mov	r2, #2
   19438:	mvn	r3, #-1073741824	; 0xc0000000
   1943c:	bl	1ff74 <flatcc_builder_start_vector@@Base>
   19440:	mov	r0, r5
   19444:	mov	r1, #2
   19448:	bl	1f3b0 <flatcc_builder_extend_vector@@Base>
   1944c:	mov	r1, #44	; 0x2c
   19450:	strh	r1, [r0, #4]
   19454:	mov	r1, #22
   19458:	strh	r1, [r0]
   1945c:	mov	r0, r5
   19460:	bl	211ec <flatcc_builder_end_vector@@Base>
   19464:	cmp	r0, #0
   19468:	beq	19484 <test_clone_slice@@Base+0x11c>
   1946c:	mov	r4, r0
   19470:	mov	r0, r5
   19474:	mov	r1, #9
   19478:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1947c:	cmp	r0, #0
   19480:	strne	r4, [r0]
   19484:	mov	r0, r5
   19488:	mov	r1, #0
   1948c:	mov	r2, #32
   19490:	mov	r3, #16
   19494:	mov	r8, #0
   19498:	bl	21920 <flatcc_builder_table_add@@Base>
   1949c:	movw	r1, #13107	; 0x3333
   194a0:	mov	r2, #1
   194a4:	movt	r1, #49705	; 0xc229
   194a8:	str	r1, [r0]
   194ac:	mov	r0, r5
   194b0:	ldr	r1, [pc, #2276]	; 19d9c <test_clone_slice@@Base+0xa34>
   194b4:	add	r1, pc, r1
   194b8:	bl	20e20 <flatcc_builder_check_required@@Base>
   194bc:	cmp	r0, #0
   194c0:	beq	19cf0 <test_clone_slice@@Base+0x988>
   194c4:	mov	r0, r5
   194c8:	bl	20eac <flatcc_builder_end_table@@Base>
   194cc:	mov	r1, r0
   194d0:	mov	r0, r5
   194d4:	bl	1f0a8 <flatcc_builder_end_buffer@@Base>
   194d8:	add	r1, sp, #32
   194dc:	mov	r0, r5
   194e0:	bl	22c54 <flatcc_builder_finalize_aligned_buffer@@Base>
   194e4:	mov	r4, r0
   194e8:	ldr	r0, [pc, #2224]	; 19da0 <test_clone_slice@@Base+0xa38>
   194ec:	mov	r1, r4
   194f0:	ldr	r0, [pc, r0]
   194f4:	ldr	r2, [sp, #32]
   194f8:	ldr	r3, [r0]
   194fc:	ldr	r0, [pc, #2208]	; 19da4 <test_clone_slice@@Base+0xa3c>
   19500:	add	r0, pc, r0
   19504:	bl	1361c <test_type_aliases@@Base+0x554>
   19508:	movw	r1, #20301	; 0x4f4d
   1950c:	cmp	r4, #0
   19510:	movt	r1, #21326	; 0x534e
   19514:	beq	19528 <test_clone_slice@@Base+0x1c0>
   19518:	ldr	r0, [r4, #4]
   1951c:	cmp	r0, r1
   19520:	ldreq	r0, [r4]
   19524:	addeq	r8, r4, r0
   19528:	mov	r0, r5
   1952c:	bl	1e2ac <flatcc_builder_reset@@Base>
   19530:	ldr	r1, [pc, #2160]	; 19da8 <test_clone_slice@@Base+0xa40>
   19534:	mov	r0, r5
   19538:	mov	r2, #0
   1953c:	mov	r3, #0
   19540:	add	r1, pc, r1
   19544:	bl	1eea8 <flatcc_builder_start_buffer@@Base>
   19548:	cmp	r0, #0
   1954c:	bne	1955c <test_clone_slice@@Base+0x1f4>
   19550:	mov	r0, r5
   19554:	mov	r1, #36	; 0x24
   19558:	bl	20484 <flatcc_builder_start_table@@Base>
   1955c:	cmp	r8, #0
   19560:	beq	19d10 <test_clone_slice@@Base+0x9a8>
   19564:	ldr	r1, [r8]
   19568:	mov	r0, r8
   1956c:	ldrh	r2, [r0, -r1]!
   19570:	cmp	r2, #12
   19574:	bcc	19ce4 <test_clone_slice@@Base+0x97c>
   19578:	ldrh	r1, [r0, #10]
   1957c:	cmp	r1, #0
   19580:	beq	19ce4 <test_clone_slice@@Base+0x97c>
   19584:	cmp	r2, #54	; 0x36
   19588:	bcc	19d30 <test_clone_slice@@Base+0x9c8>
   1958c:	ldrh	r2, [r0, #52]	; 0x34
   19590:	cmp	r2, #0
   19594:	beq	19d30 <test_clone_slice@@Base+0x9c8>
   19598:	ldrh	r0, [r0, #22]
   1959c:	str	r4, [sp, #20]
   195a0:	cmp	r0, #0
   195a4:	beq	19d50 <test_clone_slice@@Base+0x9e8>
   195a8:	mov	r3, r8
   195ac:	mov	sl, r8
   195b0:	str	r8, [sp, #16]
   195b4:	ldr	r0, [r8, r0]!
   195b8:	ldr	r1, [r3, r1]!
   195bc:	ldr	r9, [sl, r2]!
   195c0:	str	r0, [sp, #12]
   195c4:	mov	r0, r5
   195c8:	add	r1, r3, r1
   195cc:	add	r6, r1, #4
   195d0:	ldr	r2, [r6, #-4]
   195d4:	mov	r1, r6
   195d8:	bl	226a0 <flatcc_builder_create_string@@Base>
   195dc:	cmp	r0, #0
   195e0:	beq	195fc <test_clone_slice@@Base+0x294>
   195e4:	mov	r4, r0
   195e8:	mov	r0, r5
   195ec:	mov	r1, #3
   195f0:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   195f4:	cmp	r0, #0
   195f8:	strne	r4, [r0]
   195fc:	mov	r0, r5
   19600:	bl	20000 <flatcc_builder_start_offset_vector@@Base>
   19604:	ldr	r2, [r6, #-4]
   19608:	mov	r0, r5
   1960c:	mov	r1, r6
   19610:	bl	226a0 <flatcc_builder_create_string@@Base>
   19614:	cmp	r0, #0
   19618:	beq	19628 <test_clone_slice@@Base+0x2c0>
   1961c:	mov	r1, r0
   19620:	mov	r0, r5
   19624:	bl	1f848 <flatcc_builder_offset_vector_push@@Base>
   19628:	ldr	r0, [r6, #-4]
   1962c:	cmp	r0, #4
   19630:	mov	r2, r0
   19634:	movcs	r2, #4
   19638:	add	r1, r6, r2
   1963c:	sub	r2, r0, r2
   19640:	mov	r0, r5
   19644:	cmp	r2, #20
   19648:	movcs	r2, #20
   1964c:	bl	226a0 <flatcc_builder_create_string@@Base>
   19650:	cmp	r0, #0
   19654:	beq	19664 <test_clone_slice@@Base+0x2fc>
   19658:	mov	r1, r0
   1965c:	mov	r0, r5
   19660:	bl	1f848 <flatcc_builder_offset_vector_push@@Base>
   19664:	ldr	r2, [r6, #-4]
   19668:	mov	r0, r5
   1966c:	mov	r1, r6
   19670:	cmp	r2, #3
   19674:	movcs	r2, #3
   19678:	bl	226a0 <flatcc_builder_create_string@@Base>
   1967c:	cmp	r0, #0
   19680:	beq	19690 <test_clone_slice@@Base+0x328>
   19684:	mov	r1, r0
   19688:	mov	r0, r5
   1968c:	bl	1f848 <flatcc_builder_offset_vector_push@@Base>
   19690:	mov	r0, r5
   19694:	add	r7, sl, r9
   19698:	bl	201e8 <flatcc_builder_end_offset_vector@@Base>
   1969c:	cmp	r0, #0
   196a0:	beq	196bc <test_clone_slice@@Base+0x354>
   196a4:	mov	r4, r0
   196a8:	mov	r0, r5
   196ac:	mov	r1, #10
   196b0:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   196b4:	cmp	r0, #0
   196b8:	strne	r4, [r0]
   196bc:	ldr	r0, [sp, #12]
   196c0:	mov	r1, #36	; 0x24
   196c4:	add	sl, r7, #4
   196c8:	add	r8, r8, r0
   196cc:	mov	r0, r5
   196d0:	bl	20484 <flatcc_builder_start_table@@Base>
   196d4:	ldr	r0, [r6, #-4]
   196d8:	cmp	r0, #2
   196dc:	mov	r2, r0
   196e0:	movcs	r2, #2
   196e4:	add	r1, r6, r2
   196e8:	sub	r2, r0, r2
   196ec:	mov	r0, r5
   196f0:	cmp	r2, #20
   196f4:	movcs	r2, #20
   196f8:	bl	226a0 <flatcc_builder_create_string@@Base>
   196fc:	cmp	r0, #0
   19700:	beq	1971c <test_clone_slice@@Base+0x3b4>
   19704:	mov	r4, r0
   19708:	mov	r0, r5
   1970c:	mov	r1, #3
   19710:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   19714:	cmp	r0, #0
   19718:	strne	r4, [r0]
   1971c:	ldr	r2, [sl, #-4]
   19720:	mvn	r0, #0
   19724:	mov	r1, #1
   19728:	mov	r3, #1
   1972c:	add	r9, r8, #4
   19730:	str	r1, [sp]
   19734:	str	r0, [sp, #4]
   19738:	mov	r0, r5
   1973c:	mov	r1, sl
   19740:	bl	21070 <flatcc_builder_create_vector@@Base>
   19744:	cmp	r0, #0
   19748:	beq	19764 <test_clone_slice@@Base+0x3fc>
   1974c:	mov	r4, r0
   19750:	mov	r0, r5
   19754:	mov	r1, #24
   19758:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1975c:	cmp	r0, #0
   19760:	strne	r4, [r0]
   19764:	ldr	r0, [r9, #-4]
   19768:	mvn	r1, #-1073741824	; 0xc0000000
   1976c:	mov	r2, #2
   19770:	str	r1, [sp, #4]
   19774:	str	r2, [sp]
   19778:	cmp	r0, #0
   1977c:	mov	r3, r0
   19780:	movwne	r3, #1
   19784:	sub	r0, r0, r3
   19788:	add	r1, r9, r3, lsl #2
   1978c:	mov	r3, #4
   19790:	cmp	r0, #2
   19794:	movcc	r2, r0
   19798:	mov	r0, r5
   1979c:	bl	21070 <flatcc_builder_create_vector@@Base>
   197a0:	ldr	r7, [sp, #16]
   197a4:	cmp	r0, #0
   197a8:	beq	197c4 <test_clone_slice@@Base+0x45c>
   197ac:	mov	r4, r0
   197b0:	mov	r0, r5
   197b4:	mov	r1, #9
   197b8:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   197bc:	cmp	r0, #0
   197c0:	strne	r4, [r0]
   197c4:	ldr	r1, [pc, #1520]	; 19dbc <test_clone_slice@@Base+0xa54>
   197c8:	mov	r0, r5
   197cc:	mov	r2, #1
   197d0:	add	r1, pc, r1
   197d4:	bl	20e20 <flatcc_builder_check_required@@Base>
   197d8:	cmp	r0, #0
   197dc:	beq	19cf0 <test_clone_slice@@Base+0x988>
   197e0:	mov	r0, r5
   197e4:	bl	20eac <flatcc_builder_end_table@@Base>
   197e8:	cmp	r0, #0
   197ec:	beq	19830 <test_clone_slice@@Base+0x4c8>
   197f0:	mov	r4, r0
   197f4:	mov	r0, r5
   197f8:	mov	r1, #7
   197fc:	mov	r2, #1
   19800:	mov	r3, #1
   19804:	bl	21920 <flatcc_builder_table_add@@Base>
   19808:	cmp	r0, #0
   1980c:	beq	19830 <test_clone_slice@@Base+0x4c8>
   19810:	mov	r6, r0
   19814:	mov	r0, r5
   19818:	mov	r1, #8
   1981c:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   19820:	cmp	r0, #0
   19824:	movne	r1, #1
   19828:	strbne	r1, [r6]
   1982c:	strne	r4, [r0]
   19830:	ldr	r0, [sl, #-4]
   19834:	mov	r2, #1
   19838:	mvn	r1, #0
   1983c:	mov	r3, #1
   19840:	str	r2, [sp]
   19844:	str	r1, [sp, #4]
   19848:	cmp	r0, #3
   1984c:	mov	r2, r0
   19850:	movcs	r2, #3
   19854:	add	r1, sl, r2
   19858:	sub	r2, r0, r2
   1985c:	mov	r0, r5
   19860:	bl	21070 <flatcc_builder_create_vector@@Base>
   19864:	cmp	r0, #0
   19868:	beq	19884 <test_clone_slice@@Base+0x51c>
   1986c:	mov	r4, r0
   19870:	mov	r0, r5
   19874:	mov	r1, #24
   19878:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1987c:	cmp	r0, #0
   19880:	strne	r4, [r0]
   19884:	ldr	r1, [r7]
   19888:	mov	r0, r7
   1988c:	movw	r6, #20301	; 0x4f4d
   19890:	movt	r6, #21326	; 0x534e
   19894:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   19898:	cmp	r1, #6
   1989c:	bcc	198b4 <test_clone_slice@@Base+0x54c>
   198a0:	ldrh	r0, [r0, #4]
   198a4:	cmp	r0, #0
   198a8:	beq	198b4 <test_clone_slice@@Base+0x54c>
   198ac:	add	r2, r7, r0
   198b0:	b	198b8 <test_clone_slice@@Base+0x550>
   198b4:	mov	r2, #0
   198b8:	mov	r0, #16
   198bc:	mov	r1, #0
   198c0:	mov	r3, #32
   198c4:	str	r0, [sp]
   198c8:	mov	r0, r5
   198cc:	bl	229a4 <flatcc_builder_table_add_copy@@Base>
   198d0:	ldr	r2, [r9, #-4]
   198d4:	mvn	r0, #-1073741824	; 0xc0000000
   198d8:	mov	r1, #2
   198dc:	mov	r3, #4
   198e0:	str	r1, [sp]
   198e4:	str	r0, [sp, #4]
   198e8:	mov	r0, r5
   198ec:	mov	r1, r9
   198f0:	bl	21070 <flatcc_builder_create_vector@@Base>
   198f4:	cmp	r0, #0
   198f8:	beq	19914 <test_clone_slice@@Base+0x5ac>
   198fc:	mov	r4, r0
   19900:	mov	r0, r5
   19904:	mov	r1, #9
   19908:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1990c:	cmp	r0, #0
   19910:	strne	r4, [r0]
   19914:	ldr	r1, [pc, #1188]	; 19dc0 <test_clone_slice@@Base+0xa58>
   19918:	mov	r0, r5
   1991c:	mov	r2, #1
   19920:	add	r1, pc, r1
   19924:	bl	20e20 <flatcc_builder_check_required@@Base>
   19928:	cmp	r0, #0
   1992c:	beq	19cf0 <test_clone_slice@@Base+0x988>
   19930:	mov	r0, r5
   19934:	bl	20eac <flatcc_builder_end_table@@Base>
   19938:	mov	r1, r0
   1993c:	mov	r0, r5
   19940:	bl	1f0a8 <flatcc_builder_end_buffer@@Base>
   19944:	add	r1, sp, #32
   19948:	mov	r0, r5
   1994c:	bl	22ad4 <flatcc_builder_get_direct_buffer@@Base>
   19950:	mov	r5, r0
   19954:	ldr	r0, [pc, #1128]	; 19dc4 <test_clone_slice@@Base+0xa5c>
   19958:	mov	r1, r5
   1995c:	ldr	r0, [pc, r0]
   19960:	ldr	r2, [sp, #32]
   19964:	ldr	r3, [r0]
   19968:	ldr	r0, [pc, #1112]	; 19dc8 <test_clone_slice@@Base+0xa60>
   1996c:	add	r0, pc, r0
   19970:	bl	1361c <test_type_aliases@@Base+0x554>
   19974:	cmp	r5, #0
   19978:	beq	19d10 <test_clone_slice@@Base+0x9a8>
   1997c:	ldr	r0, [r5, #4]
   19980:	cmp	r0, r6
   19984:	bne	19d10 <test_clone_slice@@Base+0x9a8>
   19988:	ldr	r0, [r5]
   1998c:	ldr	r0, [r5, r0]!
   19990:	mov	r6, r5
   19994:	ldrh	r8, [r6, -r0]!
   19998:	cmp	r8, #11
   1999c:	bls	19ce4 <test_clone_slice@@Base+0x97c>
   199a0:	ldrh	r0, [r6, #10]
   199a4:	cmp	r0, #0
   199a8:	beq	19ce4 <test_clone_slice@@Base+0x97c>
   199ac:	mov	r1, r5
   199b0:	ldr	r0, [r1, r0]!
   199b4:	add	r0, r1, r0
   199b8:	ldr	r1, [pc, #1036]	; 19dcc <test_clone_slice@@Base+0xa64>
   199bc:	add	r0, r0, #4
   199c0:	add	r1, pc, r1
   199c4:	bl	12e08 <strcmp@plt>
   199c8:	cmp	r0, #0
   199cc:	beq	199f4 <test_clone_slice@@Base+0x68c>
   199d0:	ldr	r0, [pc, #1016]	; 19dd0 <test_clone_slice@@Base+0xa68>
   199d4:	add	r0, pc, r0
   199d8:	bl	12e5c <puts@plt>
   199dc:	mvn	r5, #0
   199e0:	ldr	r0, [sp, #20]
   199e4:	bl	22d94 <flatcc_builder_aligned_free@@Base>
   199e8:	mov	r0, r5
   199ec:	sub	sp, fp, #28
   199f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   199f4:	cmp	r8, #26
   199f8:	bcc	19a18 <test_clone_slice@@Base+0x6b0>
   199fc:	ldrh	r1, [r6, #24]
   19a00:	cmp	r1, #0
   19a04:	movne	r0, r5
   19a08:	ldrne	r1, [r0, r1]!
   19a0c:	ldrne	r7, [r0, r1]!
   19a10:	cmpne	r7, #0
   19a14:	bne	19a38 <test_clone_slice@@Base+0x6d0>
   19a18:	ldr	r0, [pc, #1064]	; 19e48 <test_clone_slice@@Base+0xae0>
   19a1c:	ldr	r1, [pc, #1064]	; 19e4c <test_clone_slice@@Base+0xae4>
   19a20:	ldr	r3, [pc, #1064]	; 19e50 <test_clone_slice@@Base+0xae8>
   19a24:	mov	r2, #108	; 0x6c
   19a28:	add	r0, pc, r0
   19a2c:	add	r1, pc, r1
   19a30:	add	r3, pc, r3
   19a34:	bl	12f04 <__assert_fail@plt>
   19a38:	add	r4, r0, #4
   19a3c:	ldr	r0, [r4]
   19a40:	ldr	r1, [pc, #908]	; 19dd4 <test_clone_slice@@Base+0xa6c>
   19a44:	add	r0, r4, r0
   19a48:	add	r1, pc, r1
   19a4c:	add	r0, r0, #4
   19a50:	bl	12e08 <strcmp@plt>
   19a54:	cmp	r0, #0
   19a58:	beq	19a68 <test_clone_slice@@Base+0x700>
   19a5c:	ldr	r0, [pc, #884]	; 19dd8 <test_clone_slice@@Base+0xa70>
   19a60:	add	r0, pc, r0
   19a64:	b	199d8 <test_clone_slice@@Base+0x670>
   19a68:	cmp	r7, #1
   19a6c:	bls	19a18 <test_clone_slice@@Base+0x6b0>
   19a70:	mov	r0, r4
   19a74:	ldr	r1, [r0, #4]!
   19a78:	ldr	r1, [r0, r1]!
   19a7c:	cmp	r1, #6
   19a80:	bne	19aa8 <test_clone_slice@@Base+0x740>
   19a84:	ldr	r1, [pc, #852]	; 19de0 <test_clone_slice@@Base+0xa78>
   19a88:	add	r0, r0, #4
   19a8c:	add	r1, pc, r1
   19a90:	bl	12e08 <strcmp@plt>
   19a94:	cmp	r0, #0
   19a98:	beq	19ab4 <test_clone_slice@@Base+0x74c>
   19a9c:	ldr	r0, [pc, #832]	; 19de4 <test_clone_slice@@Base+0xa7c>
   19aa0:	add	r0, pc, r0
   19aa4:	b	199d8 <test_clone_slice@@Base+0x670>
   19aa8:	ldr	r0, [pc, #812]	; 19ddc <test_clone_slice@@Base+0xa74>
   19aac:	add	r0, pc, r0
   19ab0:	b	199d8 <test_clone_slice@@Base+0x670>
   19ab4:	cmp	r7, #2
   19ab8:	bls	19a18 <test_clone_slice@@Base+0x6b0>
   19abc:	ldr	r0, [r4, #8]!
   19ac0:	ldr	r0, [r4, r0]!
   19ac4:	cmp	r0, #3
   19ac8:	bne	19af0 <test_clone_slice@@Base+0x788>
   19acc:	ldr	r1, [pc, #792]	; 19dec <test_clone_slice@@Base+0xa84>
   19ad0:	add	r0, r4, #4
   19ad4:	add	r1, pc, r1
   19ad8:	bl	12e08 <strcmp@plt>
   19adc:	cmp	r0, #0
   19ae0:	beq	19afc <test_clone_slice@@Base+0x794>
   19ae4:	ldr	r0, [pc, #772]	; 19df0 <test_clone_slice@@Base+0xa88>
   19ae8:	add	r0, pc, r0
   19aec:	b	199d8 <test_clone_slice@@Base+0x670>
   19af0:	ldr	r0, [pc, #752]	; 19de8 <test_clone_slice@@Base+0xa80>
   19af4:	add	r0, pc, r0
   19af8:	b	199d8 <test_clone_slice@@Base+0x670>
   19afc:	ldrh	r0, [r6, #20]
   19b00:	cmp	r0, #0
   19b04:	beq	19d70 <test_clone_slice@@Base+0xa08>
   19b08:	mov	r4, r5
   19b0c:	ldr	r0, [r4, r0]!
   19b10:	ldr	r0, [r4, r0]!
   19b14:	mov	sl, r4
   19b18:	ldrh	r7, [sl, -r0]!
   19b1c:	cmp	r7, #11
   19b20:	bls	19ce4 <test_clone_slice@@Base+0x97c>
   19b24:	ldrh	r0, [sl, #10]
   19b28:	cmp	r0, #0
   19b2c:	beq	19ce4 <test_clone_slice@@Base+0x97c>
   19b30:	mov	r1, r4
   19b34:	ldr	r0, [r1, r0]!
   19b38:	add	r0, r1, r0
   19b3c:	ldr	r1, [pc, #688]	; 19df4 <test_clone_slice@@Base+0xa8c>
   19b40:	add	r0, r0, #4
   19b44:	add	r1, pc, r1
   19b48:	bl	12e08 <strcmp@plt>
   19b4c:	cmp	r0, #0
   19b50:	beq	19b64 <test_clone_slice@@Base+0x7fc>
   19b54:	ldr	r0, [pc, #668]	; 19df8 <test_clone_slice@@Base+0xa90>
   19b58:	add	r0, pc, r0
   19b5c:	bl	12e14 <printf@plt>
   19b60:	b	199dc <test_clone_slice@@Base+0x674>
   19b64:	cmp	r7, #54	; 0x36
   19b68:	bcc	19bb4 <test_clone_slice@@Base+0x84c>
   19b6c:	ldrh	r1, [sl, #52]	; 0x34
   19b70:	cmp	r1, #0
   19b74:	beq	19bb4 <test_clone_slice@@Base+0x84c>
   19b78:	mov	r0, r4
   19b7c:	ldr	r1, [r0, r1]!
   19b80:	ldr	r1, [r0, r1]!
   19b84:	cmp	r1, #7
   19b88:	bne	19bb4 <test_clone_slice@@Base+0x84c>
   19b8c:	add	r9, sp, #24
   19b90:	add	r0, r0, #4
   19b94:	mov	r2, #7
   19b98:	mov	r1, r9
   19b9c:	bl	12e8c <bcmp@plt>
   19ba0:	cmp	r0, #0
   19ba4:	beq	19bc0 <test_clone_slice@@Base+0x858>
   19ba8:	ldr	r0, [pc, #592]	; 19e00 <test_clone_slice@@Base+0xa98>
   19bac:	add	r0, pc, r0
   19bb0:	b	199d8 <test_clone_slice@@Base+0x670>
   19bb4:	ldr	r0, [pc, #576]	; 19dfc <test_clone_slice@@Base+0xa94>
   19bb8:	add	r0, pc, r0
   19bbc:	b	199d8 <test_clone_slice@@Base+0x670>
   19bc0:	cmp	r8, #54	; 0x36
   19bc4:	bcc	19c0c <test_clone_slice@@Base+0x8a4>
   19bc8:	ldrh	r1, [r6, #52]	; 0x34
   19bcc:	cmp	r1, #0
   19bd0:	beq	19c0c <test_clone_slice@@Base+0x8a4>
   19bd4:	mov	r0, r5
   19bd8:	ldr	r1, [r0, r1]!
   19bdc:	ldr	r1, [r0, r1]!
   19be0:	cmp	r1, #4
   19be4:	bne	19c0c <test_clone_slice@@Base+0x8a4>
   19be8:	add	r0, r0, #4
   19bec:	orr	r1, r9, #3
   19bf0:	mov	r2, #4
   19bf4:	bl	12e8c <bcmp@plt>
   19bf8:	cmp	r0, #0
   19bfc:	beq	19c18 <test_clone_slice@@Base+0x8b0>
   19c00:	ldr	r0, [pc, #512]	; 19e08 <test_clone_slice@@Base+0xaa0>
   19c04:	add	r0, pc, r0
   19c08:	b	199d8 <test_clone_slice@@Base+0x670>
   19c0c:	ldr	r0, [pc, #496]	; 19e04 <test_clone_slice@@Base+0xa9c>
   19c10:	add	r0, pc, r0
   19c14:	b	199d8 <test_clone_slice@@Base+0x670>
   19c18:	ldrh	r0, [r6, #4]
   19c1c:	vldr	s0, [pc, #364]	; 19d90 <test_clone_slice@@Base+0xa28>
   19c20:	add	r0, r5, r0
   19c24:	vldr	s2, [r0]
   19c28:	vcmp.f32	s2, s0
   19c2c:	vmrs	APSR_nzcv, fpscr
   19c30:	beq	19c40 <test_clone_slice@@Base+0x8d8>
   19c34:	ldr	r0, [pc, #464]	; 19e0c <test_clone_slice@@Base+0xaa4>
   19c38:	add	r0, pc, r0
   19c3c:	b	199d8 <test_clone_slice@@Base+0x670>
   19c40:	ldrh	r0, [r6, #22]
   19c44:	cmp	r0, #0
   19c48:	beq	19cb4 <test_clone_slice@@Base+0x94c>
   19c4c:	ldr	r0, [r5, r0]!
   19c50:	ldr	r0, [r5, r0]!
   19c54:	cmp	r0, #2
   19c58:	bne	19cb4 <test_clone_slice@@Base+0x94c>
   19c5c:	add	r0, r5, #4
   19c60:	ldrh	r1, [r0]
   19c64:	cmp	r1, #22
   19c68:	bne	19cc0 <test_clone_slice@@Base+0x958>
   19c6c:	ldrh	r0, [r0, #4]
   19c70:	cmp	r0, #44	; 0x2c
   19c74:	bne	19ccc <test_clone_slice@@Base+0x964>
   19c78:	ldrh	r0, [sl, #22]
   19c7c:	cmp	r0, #0
   19c80:	beq	19cd8 <test_clone_slice@@Base+0x970>
   19c84:	ldr	r0, [r4, r0]!
   19c88:	ldr	r0, [r4, r0]!
   19c8c:	cmp	r0, #1
   19c90:	bne	19cd8 <test_clone_slice@@Base+0x970>
   19c94:	add	r0, r4, #4
   19c98:	mov	r5, #0
   19c9c:	ldrh	r0, [r0]
   19ca0:	cmp	r0, #44	; 0x2c
   19ca4:	beq	199e0 <test_clone_slice@@Base+0x678>
   19ca8:	ldr	r0, [pc, #368]	; 19e20 <test_clone_slice@@Base+0xab8>
   19cac:	add	r0, pc, r0
   19cb0:	b	199d8 <test_clone_slice@@Base+0x670>
   19cb4:	ldr	r0, [pc, #340]	; 19e10 <test_clone_slice@@Base+0xaa8>
   19cb8:	add	r0, pc, r0
   19cbc:	b	199d8 <test_clone_slice@@Base+0x670>
   19cc0:	ldr	r0, [pc, #332]	; 19e14 <test_clone_slice@@Base+0xaac>
   19cc4:	add	r0, pc, r0
   19cc8:	b	199d8 <test_clone_slice@@Base+0x670>
   19ccc:	ldr	r0, [pc, #324]	; 19e18 <test_clone_slice@@Base+0xab0>
   19cd0:	add	r0, pc, r0
   19cd4:	b	199d8 <test_clone_slice@@Base+0x670>
   19cd8:	ldr	r0, [pc, #316]	; 19e1c <test_clone_slice@@Base+0xab4>
   19cdc:	add	r0, pc, r0
   19ce0:	b	199d8 <test_clone_slice@@Base+0x670>
   19ce4:	ldr	r0, [pc, #204]	; 19db8 <test_clone_slice@@Base+0xa50>
   19ce8:	add	r0, pc, r0
   19cec:	b	19d18 <test_clone_slice@@Base+0x9b0>
   19cf0:	ldr	r0, [pc, #300]	; 19e24 <test_clone_slice@@Base+0xabc>
   19cf4:	ldr	r1, [pc, #300]	; 19e28 <test_clone_slice@@Base+0xac0>
   19cf8:	ldr	r3, [pc, #300]	; 19e2c <test_clone_slice@@Base+0xac4>
   19cfc:	mov	r2, #235	; 0xeb
   19d00:	add	r0, pc, r0
   19d04:	add	r1, pc, r1
   19d08:	add	r3, pc, r3
   19d0c:	bl	12f04 <__assert_fail@plt>
   19d10:	ldr	r0, [pc, #148]	; 19dac <test_clone_slice@@Base+0xa44>
   19d14:	add	r0, pc, r0
   19d18:	ldr	r1, [pc, #144]	; 19db0 <test_clone_slice@@Base+0xa48>
   19d1c:	ldr	r3, [pc, #144]	; 19db4 <test_clone_slice@@Base+0xa4c>
   19d20:	movw	r2, #699	; 0x2bb
   19d24:	add	r1, pc, r1
   19d28:	add	r3, pc, r3
   19d2c:	bl	12f04 <__assert_fail@plt>
   19d30:	ldr	r0, [pc, #248]	; 19e30 <test_clone_slice@@Base+0xac8>
   19d34:	ldr	r1, [pc, #248]	; 19e34 <test_clone_slice@@Base+0xacc>
   19d38:	ldr	r3, [pc, #248]	; 19e38 <test_clone_slice@@Base+0xad0>
   19d3c:	movw	r2, #1606	; 0x646
   19d40:	add	r0, pc, r0
   19d44:	add	r1, pc, r1
   19d48:	add	r3, pc, r3
   19d4c:	bl	12f04 <__assert_fail@plt>
   19d50:	ldr	r0, [pc, #228]	; 19e3c <test_clone_slice@@Base+0xad4>
   19d54:	ldr	r1, [pc, #228]	; 19e40 <test_clone_slice@@Base+0xad8>
   19d58:	ldr	r3, [pc, #228]	; 19e44 <test_clone_slice@@Base+0xadc>
   19d5c:	movw	r2, #1608	; 0x648
   19d60:	add	r0, pc, r0
   19d64:	add	r1, pc, r1
   19d68:	add	r3, pc, r3
   19d6c:	bl	12f04 <__assert_fail@plt>
   19d70:	ldr	r0, [pc, #220]	; 19e54 <test_clone_slice@@Base+0xaec>
   19d74:	ldr	r1, [pc, #220]	; 19e58 <test_clone_slice@@Base+0xaf0>
   19d78:	ldr	r3, [pc, #220]	; 19e5c <test_clone_slice@@Base+0xaf4>
   19d7c:	mov	r2, #1664	; 0x680
   19d80:	add	r0, pc, r0
   19d84:	add	r1, pc, r1
   19d88:	add	r3, pc, r3
   19d8c:	bl	12f04 <__assert_fail@plt>
   19d90:	eorgt	r3, r9, #-872415232	; 0xcc000000
   19d94:	andeq	fp, r0, r0, ror #16
   19d98:	andeq	lr, r0, r4, lsr r4
   19d9c:	andeq	lr, r0, r0, asr #20
   19da0:	andeq	r0, r2, r0, ror fp
   19da4:	andeq	fp, r0, r8, lsl #29
   19da8:			; <UNDEFINED> instruction: 0x0000b6bc
   19dac:	andeq	fp, r0, lr, lsr #23
   19db0:	andeq	fp, r0, r4, asr #23
   19db4:	andeq	ip, r0, ip, ror r0
   19db8:	andeq	ip, r0, sp, lsl #2
   19dbc:	andeq	lr, r0, r4, lsr #14
   19dc0:	ldrdeq	lr, [r0], -r4
   19dc4:	andeq	r0, r2, r4, lsl #14
   19dc8:	andeq	fp, r0, fp, ror #20
   19dcc:	andeq	sp, r0, r4, lsr lr
   19dd0:	andeq	sp, r0, fp, lsr #28
   19dd4:	andeq	sp, r0, ip, lsr #27
   19dd8:	andeq	sp, r0, r2, lsl #27
   19ddc:	andeq	sp, r0, r2, lsl sp
   19de0:	andeq	sp, r0, fp, lsr #26
   19de4:	andeq	sp, r0, r5, lsl #26
   19de8:	muleq	r0, r1, ip
   19dec:	andeq	sp, r0, sp, lsr #25
   19df0:	andeq	sp, r0, r7, lsl #25
   19df4:			; <UNDEFINED> instruction: 0x0000dcb2
   19df8:	muleq	r0, r6, r8
   19dfc:	muleq	r0, fp, fp
   19e00:	andeq	sp, r0, r9, lsl #23
   19e04:	andeq	sp, r0, r9, lsl #22
   19e08:	strdeq	sp, [r0], -r7
   19e0c:	andeq	sp, r0, sl, lsr #21
   19e10:	strdeq	sp, [r0], -r7
   19e14:	ldrdeq	sp, [r0], -r0
   19e18:	andeq	sp, r0, r9, lsr #19
   19e1c:	andeq	sp, r0, r0, lsl #19
   19e20:	andeq	sp, r0, ip, lsl #19
   19e24:	muleq	r0, r1, lr
   19e28:	andeq	fp, r0, r4, asr sp
   19e2c:	andeq	fp, r0, fp, lsr #30
   19e30:	andeq	fp, r0, fp, lsl #13
   19e34:	andeq	fp, r0, r4, lsr #1
   19e38:	andeq	fp, r0, sl, asr r6
   19e3c:	andeq	fp, r0, r1, ror r6
   19e40:	andeq	fp, r0, r4, lsl #1
   19e44:	andeq	fp, r0, sl, lsr r6
   19e48:	andeq	ip, r0, r7, asr #8
   19e4c:	andeq	ip, r0, sl, ror r4
   19e50:	andeq	ip, r0, r0, lsl #12
   19e54:	andeq	fp, r0, r4, rrx
   19e58:	andeq	fp, r0, r4, rrx
   19e5c:	andeq	fp, r0, sl, lsl r6

00019e60 <test_create_add_field@@Base>:
   19e60:	push	{r4, r5, fp, lr}
   19e64:	add	fp, sp, #8
   19e68:	sub	sp, sp, #8
   19e6c:	mov	r4, r0
   19e70:	bl	1e2ac <flatcc_builder_reset@@Base>
   19e74:	ldr	r1, [pc, #704]	; 1a13c <test_create_add_field@@Base+0x2dc>
   19e78:	mov	r0, r4
   19e7c:	mov	r2, #0
   19e80:	mov	r3, #0
   19e84:	add	r1, pc, r1
   19e88:	bl	1eea8 <flatcc_builder_start_buffer@@Base>
   19e8c:	cmp	r0, #0
   19e90:	bne	19ea0 <test_create_add_field@@Base+0x40>
   19e94:	mov	r0, r4
   19e98:	mov	r1, #36	; 0x24
   19e9c:	bl	20484 <flatcc_builder_start_table@@Base>
   19ea0:	ldr	r1, [pc, #664]	; 1a140 <test_create_add_field@@Base+0x2e0>
   19ea4:	mov	r0, r4
   19ea8:	add	r1, pc, r1
   19eac:	bl	227bc <flatcc_builder_create_string_str@@Base>
   19eb0:	cmp	r0, #0
   19eb4:	beq	19ed0 <test_create_add_field@@Base+0x70>
   19eb8:	mov	r5, r0
   19ebc:	mov	r0, r4
   19ec0:	mov	r1, #3
   19ec4:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   19ec8:	cmp	r0, #0
   19ecc:	strne	r5, [r0]
   19ed0:	ldr	r1, [pc, #620]	; 1a144 <test_create_add_field@@Base+0x2e4>
   19ed4:	mov	r0, r4
   19ed8:	add	r1, pc, r1
   19edc:	bl	227bc <flatcc_builder_create_string_str@@Base>
   19ee0:	mov	r5, r0
   19ee4:	mov	r0, r4
   19ee8:	mov	r1, #3
   19eec:	bl	20484 <flatcc_builder_start_table@@Base>
   19ef0:	cmp	r0, #0
   19ef4:	beq	19f88 <test_create_add_field@@Base+0x128>
   19ef8:	ldr	r1, [pc, #588]	; 1a14c <test_create_add_field@@Base+0x2ec>
   19efc:	mov	r0, r4
   19f00:	mov	r2, #1
   19f04:	add	r1, pc, r1
   19f08:	bl	20e20 <flatcc_builder_check_required@@Base>
   19f0c:	cmp	r0, #0
   19f10:	beq	1a0fc <test_create_add_field@@Base+0x29c>
   19f14:	mov	r0, r4
   19f18:	bl	20eac <flatcc_builder_end_table@@Base>
   19f1c:	mov	r1, r0
   19f20:	mov	r0, r4
   19f24:	bl	1f0a8 <flatcc_builder_end_buffer@@Base>
   19f28:	add	r1, sp, #4
   19f2c:	mov	r0, r4
   19f30:	bl	22c54 <flatcc_builder_finalize_aligned_buffer@@Base>
   19f34:	cmp	r0, #0
   19f38:	beq	1a0bc <test_create_add_field@@Base+0x25c>
   19f3c:	mov	r4, r0
   19f40:	ldr	r0, [r0, #4]
   19f44:	movw	r1, #20301	; 0x4f4d
   19f48:	movt	r1, #21326	; 0x534e
   19f4c:	cmp	r0, r1
   19f50:	bne	1a0bc <test_create_add_field@@Base+0x25c>
   19f54:	ldr	r0, [r4]
   19f58:	mov	r1, r4
   19f5c:	ldr	r2, [r1, r0]!
   19f60:	mov	r0, r1
   19f64:	ldrh	r2, [r0, -r2]!	; <UNPREDICTABLE>
   19f68:	cmp	r2, #29
   19f6c:	bls	1a0dc <test_create_add_field@@Base+0x27c>
   19f70:	ldrh	r3, [r0, #28]
   19f74:	cmp	r3, #0
   19f78:	beq	1a040 <test_create_add_field@@Base+0x1e0>
   19f7c:	ldr	r0, [pc, #460]	; 1a150 <test_create_add_field@@Base+0x2f0>
   19f80:	add	r0, pc, r0
   19f84:	b	1a0a0 <test_create_add_field@@Base+0x240>
   19f88:	mov	r0, r4
   19f8c:	mov	r1, #1
   19f90:	mov	r2, #8
   19f94:	mov	r3, #8
   19f98:	bl	21920 <flatcc_builder_table_add@@Base>
   19f9c:	cmp	r0, #0
   19fa0:	beq	19ef8 <test_create_add_field@@Base+0x98>
   19fa4:	mvn	r2, #99	; 0x63
   19fa8:	cmp	r5, #0
   19fac:	mvn	r1, #0
   19fb0:	str	r2, [r0]
   19fb4:	str	r1, [r0, #4]
   19fb8:	beq	19ef8 <test_create_add_field@@Base+0x98>
   19fbc:	mov	r0, r4
   19fc0:	mov	r1, #0
   19fc4:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   19fc8:	cmp	r0, #0
   19fcc:	beq	19ef8 <test_create_add_field@@Base+0x98>
   19fd0:	str	r5, [r0]
   19fd4:	mov	r0, r4
   19fd8:	mov	r1, #2
   19fdc:	mov	r2, #2
   19fe0:	mov	r3, #2
   19fe4:	mov	r5, #2
   19fe8:	bl	21920 <flatcc_builder_table_add@@Base>
   19fec:	cmp	r0, #0
   19ff0:	beq	19ef8 <test_create_add_field@@Base+0x98>
   19ff4:	strh	r5, [r0]
   19ff8:	mov	r0, r4
   19ffc:	mov	r2, #0
   1a000:	ldr	r1, [pc, #320]	; 1a148 <test_create_add_field@@Base+0x2e8>
   1a004:	add	r1, pc, r1
   1a008:	bl	20e20 <flatcc_builder_check_required@@Base>
   1a00c:	cmp	r0, #0
   1a010:	beq	1a11c <test_create_add_field@@Base+0x2bc>
   1a014:	mov	r0, r4
   1a018:	bl	20eac <flatcc_builder_end_table@@Base>
   1a01c:	cmp	r0, #0
   1a020:	beq	19ef8 <test_create_add_field@@Base+0x98>
   1a024:	mov	r5, r0
   1a028:	mov	r0, r4
   1a02c:	mov	r1, #14
   1a030:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1a034:	cmp	r0, #0
   1a038:	strne	r5, [r0]
   1a03c:	b	19ef8 <test_create_add_field@@Base+0x98>
   1a040:	cmp	r2, #34	; 0x22
   1a044:	bcc	1a0dc <test_create_add_field@@Base+0x27c>
   1a048:	ldrh	r0, [r0, #32]
   1a04c:	cmp	r0, #0
   1a050:	beq	1a0dc <test_create_add_field@@Base+0x27c>
   1a054:	ldr	r0, [r1, r0]!
   1a058:	ldr	r0, [r1, r0]!
   1a05c:	mov	r2, r1
   1a060:	ldrh	r3, [r2, -r0]!
   1a064:	ldr	r0, [pc, #232]	; 1a154 <test_create_add_field@@Base+0x2f4>
   1a068:	add	r0, pc, r0
   1a06c:	cmp	r3, #7
   1a070:	bls	1a0a0 <test_create_add_field@@Base+0x240>
   1a074:	ldrh	r2, [r2, #6]
   1a078:	cmp	r2, #0
   1a07c:	beq	1a0a0 <test_create_add_field@@Base+0x240>
   1a080:	ldr	r2, [r1, r2]!
   1a084:	mvn	r3, #99	; 0x63
   1a088:	mov	r5, #0
   1a08c:	ldr	r1, [r1, #4]
   1a090:	eor	r2, r2, r3
   1a094:	mvn	r1, r1
   1a098:	orrs	r1, r2, r1
   1a09c:	beq	1a0a8 <test_create_add_field@@Base+0x248>
   1a0a0:	bl	12e5c <puts@plt>
   1a0a4:	mvn	r5, #0
   1a0a8:	mov	r0, r4
   1a0ac:	bl	22d94 <flatcc_builder_aligned_free@@Base>
   1a0b0:	mov	r0, r5
   1a0b4:	sub	sp, fp, #8
   1a0b8:	pop	{r4, r5, fp, pc}
   1a0bc:	ldr	r0, [pc, #172]	; 1a170 <test_create_add_field@@Base+0x310>
   1a0c0:	ldr	r1, [pc, #172]	; 1a174 <test_create_add_field@@Base+0x314>
   1a0c4:	ldr	r3, [pc, #172]	; 1a178 <test_create_add_field@@Base+0x318>
   1a0c8:	mov	r2, #716	; 0x2cc
   1a0cc:	add	r0, pc, r0
   1a0d0:	add	r1, pc, r1
   1a0d4:	add	r3, pc, r3
   1a0d8:	bl	12f04 <__assert_fail@plt>
   1a0dc:	ldr	r0, [pc, #152]	; 1a17c <test_create_add_field@@Base+0x31c>
   1a0e0:	ldr	r1, [pc, #152]	; 1a180 <test_create_add_field@@Base+0x320>
   1a0e4:	ldr	r3, [pc, #152]	; 1a184 <test_create_add_field@@Base+0x324>
   1a0e8:	mov	r2, #608	; 0x260
   1a0ec:	add	r0, pc, r0
   1a0f0:	add	r1, pc, r1
   1a0f4:	add	r3, pc, r3
   1a0f8:	bl	12f04 <__assert_fail@plt>
   1a0fc:	ldr	r0, [pc, #96]	; 1a164 <test_create_add_field@@Base+0x304>
   1a100:	ldr	r1, [pc, #96]	; 1a168 <test_create_add_field@@Base+0x308>
   1a104:	ldr	r3, [pc, #96]	; 1a16c <test_create_add_field@@Base+0x30c>
   1a108:	mov	r2, #235	; 0xeb
   1a10c:	add	r0, pc, r0
   1a110:	add	r1, pc, r1
   1a114:	add	r3, pc, r3
   1a118:	bl	12f04 <__assert_fail@plt>
   1a11c:	ldr	r0, [pc, #52]	; 1a158 <test_create_add_field@@Base+0x2f8>
   1a120:	ldr	r1, [pc, #52]	; 1a15c <test_create_add_field@@Base+0x2fc>
   1a124:	ldr	r3, [pc, #52]	; 1a160 <test_create_add_field@@Base+0x300>
   1a128:	mov	r2, #221	; 0xdd
   1a12c:	add	r0, pc, r0
   1a130:	add	r1, pc, r1
   1a134:	add	r3, pc, r3
   1a138:	bl	12f04 <__assert_fail@plt>
   1a13c:	andeq	sl, r0, r8, ror sp
   1a140:	muleq	r0, r8, sp
   1a144:	andeq	fp, r0, r6, asr #10
   1a148:	strdeq	sp, [r0], -r6
   1a14c:	strdeq	sp, [r0], -r0
   1a150:	andeq	sp, r0, ip, lsr #17
   1a154:			; <UNDEFINED> instruction: 0x0000d7b1
   1a158:			; <UNDEFINED> instruction: 0x0000bfb6
   1a15c:	andeq	fp, r0, r8, lsr #18
   1a160:	andeq	ip, r0, r7, asr #32
   1a164:	andeq	fp, r0, r5, lsl #21
   1a168:	andeq	fp, r0, r8, asr #18
   1a16c:	andeq	fp, r0, pc, lsl fp
   1a170:	strdeq	fp, [r0], -r6
   1a174:	andeq	fp, r0, r8, lsl r8
   1a178:	strdeq	ip, [r0], -r2
   1a17c:	ldrdeq	fp, [r0], -r6
   1a180:	strdeq	fp, [r0], -r8
   1a184:	andeq	ip, r0, lr, lsl r1

0001a188 <test_union_vector@@Base>:
   1a188:	push	{r4, r5, r6, r7, fp, lr}
   1a18c:	add	fp, sp, #16
   1a190:	sub	sp, sp, #16
   1a194:	mov	r4, r0
   1a198:	bl	1e2ac <flatcc_builder_reset@@Base>
   1a19c:	ldr	r1, [pc, #1312]	; 1a6c4 <test_union_vector@@Base+0x53c>
   1a1a0:	mov	r0, r4
   1a1a4:	mov	r2, #0
   1a1a8:	mov	r3, #0
   1a1ac:	add	r1, pc, r1
   1a1b0:	bl	1eea8 <flatcc_builder_start_buffer@@Base>
   1a1b4:	cmp	r0, #0
   1a1b8:	bne	1a1c8 <test_union_vector@@Base+0x40>
   1a1bc:	mov	r0, r4
   1a1c0:	mov	r1, #36	; 0x24
   1a1c4:	bl	20484 <flatcc_builder_start_table@@Base>
   1a1c8:	ldr	r1, [pc, #1272]	; 1a6c8 <test_union_vector@@Base+0x540>
   1a1cc:	mov	r0, r4
   1a1d0:	add	r1, pc, r1
   1a1d4:	bl	227bc <flatcc_builder_create_string_str@@Base>
   1a1d8:	cmp	r0, #0
   1a1dc:	beq	1a1f8 <test_union_vector@@Base+0x70>
   1a1e0:	mov	r5, r0
   1a1e4:	mov	r0, r4
   1a1e8:	mov	r1, #3
   1a1ec:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1a1f0:	cmp	r0, #0
   1a1f4:	strne	r5, [r0]
   1a1f8:	mov	r0, r4
   1a1fc:	mov	r1, #4
   1a200:	bl	20484 <flatcc_builder_start_table@@Base>
   1a204:	mov	r5, #0
   1a208:	cmp	r0, #0
   1a20c:	bne	1a238 <test_union_vector@@Base+0xb0>
   1a210:	ldr	r1, [pc, #1204]	; 1a6cc <test_union_vector@@Base+0x544>
   1a214:	mov	r0, r4
   1a218:	mov	r2, #0
   1a21c:	add	r1, pc, r1
   1a220:	bl	20e20 <flatcc_builder_check_required@@Base>
   1a224:	cmp	r0, #0
   1a228:	beq	1a684 <test_union_vector@@Base+0x4fc>
   1a22c:	mov	r0, r4
   1a230:	bl	20eac <flatcc_builder_end_table@@Base>
   1a234:	mov	r5, r0
   1a238:	mov	r0, r4
   1a23c:	bl	21fc4 <flatcc_builder_start_union_vector@@Base>
   1a240:	mov	r0, r4
   1a244:	mov	r1, #2
   1a248:	mov	r2, r5
   1a24c:	bl	22450 <flatcc_builder_union_vector_push@@Base>
   1a250:	add	r0, sp, #4
   1a254:	mov	r1, r4
   1a258:	bl	2203c <flatcc_builder_end_union_vector@@Base>
   1a25c:	ldr	r6, [sp, #4]
   1a260:	ldr	r5, [sp, #8]
   1a264:	mov	r0, r4
   1a268:	mov	r1, #4
   1a26c:	bl	20484 <flatcc_builder_start_table@@Base>
   1a270:	cmp	r6, #0
   1a274:	cmpne	r5, #0
   1a278:	bne	1a400 <test_union_vector@@Base+0x278>
   1a27c:	ldr	r1, [pc, #1100]	; 1a6d0 <test_union_vector@@Base+0x548>
   1a280:	mov	r0, r4
   1a284:	mov	r2, #0
   1a288:	add	r1, pc, r1
   1a28c:	bl	20e20 <flatcc_builder_check_required@@Base>
   1a290:	cmp	r0, #0
   1a294:	beq	1a624 <test_union_vector@@Base+0x49c>
   1a298:	mov	r0, r4
   1a29c:	bl	20eac <flatcc_builder_end_table@@Base>
   1a2a0:	cmp	r0, #0
   1a2a4:	beq	1a2e8 <test_union_vector@@Base+0x160>
   1a2a8:	mov	r5, r0
   1a2ac:	mov	r0, r4
   1a2b0:	mov	r1, #7
   1a2b4:	mov	r2, #1
   1a2b8:	mov	r3, #1
   1a2bc:	bl	21920 <flatcc_builder_table_add@@Base>
   1a2c0:	cmp	r0, #0
   1a2c4:	beq	1a2e8 <test_union_vector@@Base+0x160>
   1a2c8:	mov	r6, r0
   1a2cc:	mov	r0, r4
   1a2d0:	mov	r1, #8
   1a2d4:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1a2d8:	cmp	r0, #0
   1a2dc:	movne	r1, #4
   1a2e0:	strbne	r1, [r6]
   1a2e4:	strne	r5, [r0]
   1a2e8:	ldr	r1, [pc, #996]	; 1a6d4 <test_union_vector@@Base+0x54c>
   1a2ec:	mov	r0, r4
   1a2f0:	mov	r2, #1
   1a2f4:	add	r1, pc, r1
   1a2f8:	bl	20e20 <flatcc_builder_check_required@@Base>
   1a2fc:	cmp	r0, #0
   1a300:	beq	1a644 <test_union_vector@@Base+0x4bc>
   1a304:	mov	r0, r4
   1a308:	bl	20eac <flatcc_builder_end_table@@Base>
   1a30c:	mov	r1, r0
   1a310:	mov	r0, r4
   1a314:	bl	1f0a8 <flatcc_builder_end_buffer@@Base>
   1a318:	add	r1, sp, #12
   1a31c:	mov	r0, r4
   1a320:	bl	22c54 <flatcc_builder_finalize_aligned_buffer@@Base>
   1a324:	ldr	r1, [sp, #12]
   1a328:	ldr	r2, [pc, #936]	; 1a6d8 <test_union_vector@@Base+0x550>
   1a32c:	ldr	r3, [pc, #936]	; 1a6dc <test_union_vector@@Base+0x554>
   1a330:	mov	r4, r0
   1a334:	add	r2, pc, r2
   1a338:	add	r3, pc, r3
   1a33c:	bl	23f6c <flatcc_verify_table_as_root@@Base>
   1a340:	cmp	r0, #0
   1a344:	beq	1a368 <test_union_vector@@Base+0x1e0>
   1a348:	bl	23328 <flatcc_verify_error_string@@Base>
   1a34c:	mov	r1, r0
   1a350:	ldr	r0, [pc, #904]	; 1a6e0 <test_union_vector@@Base+0x558>
   1a354:	add	r0, pc, r0
   1a358:	bl	12e14 <printf@plt>
   1a35c:	mvn	r0, #0
   1a360:	sub	sp, fp, #16
   1a364:	pop	{r4, r5, r6, r7, fp, pc}
   1a368:	cmp	r4, #0
   1a36c:	beq	1a664 <test_union_vector@@Base+0x4dc>
   1a370:	ldr	r0, [r4, #4]
   1a374:	movw	r1, #20301	; 0x4f4d
   1a378:	movt	r1, #21326	; 0x534e
   1a37c:	cmp	r0, r1
   1a380:	bne	1a664 <test_union_vector@@Base+0x4dc>
   1a384:	ldr	r0, [r4]
   1a388:	mov	r7, r4
   1a38c:	ldr	r1, [r7, r0]!
   1a390:	mov	r0, r7
   1a394:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   1a398:	cmp	r1, #19
   1a39c:	bls	1a430 <test_union_vector@@Base+0x2a8>
   1a3a0:	ldrh	r3, [r0, #18]
   1a3a4:	cmp	r3, #0
   1a3a8:	beq	1a430 <test_union_vector@@Base+0x2a8>
   1a3ac:	ldrb	r3, [r7, r3]
   1a3b0:	cmp	r3, #4
   1a3b4:	bne	1a430 <test_union_vector@@Base+0x2a8>
   1a3b8:	cmp	r1, #22
   1a3bc:	bcc	1a3f0 <test_union_vector@@Base+0x268>
   1a3c0:	ldrh	r0, [r0, #20]
   1a3c4:	cmp	r0, #0
   1a3c8:	beq	1a3f0 <test_union_vector@@Base+0x268>
   1a3cc:	ldr	r0, [r7, r0]!
   1a3d0:	ldr	r0, [r7, r0]!
   1a3d4:	mov	r3, r7
   1a3d8:	ldrh	r6, [r3, -r0]!
   1a3dc:	cmp	r6, #12
   1a3e0:	bcc	1a450 <test_union_vector@@Base+0x2c8>
   1a3e4:	ldrh	r0, [r3, #10]
   1a3e8:	cmp	r0, #0
   1a3ec:	beq	1a458 <test_union_vector@@Base+0x2d0>
   1a3f0:	ldr	r0, [pc, #752]	; 1a6e8 <test_union_vector@@Base+0x560>
   1a3f4:	add	r0, pc, r0
   1a3f8:	bl	12e5c <puts@plt>
   1a3fc:	b	1a43c <test_union_vector@@Base+0x2b4>
   1a400:	mov	r0, r4
   1a404:	mov	r1, #2
   1a408:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1a40c:	cmp	r0, #0
   1a410:	beq	1a27c <test_union_vector@@Base+0xf4>
   1a414:	str	r6, [r0]
   1a418:	mov	r0, r4
   1a41c:	mov	r1, #3
   1a420:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1a424:	cmp	r0, #0
   1a428:	strne	r5, [r0]
   1a42c:	b	1a27c <test_union_vector@@Base+0xf4>
   1a430:	ldr	r0, [pc, #684]	; 1a6e4 <test_union_vector@@Base+0x55c>
   1a434:	add	r0, pc, r0
   1a438:	bl	12e14 <printf@plt>
   1a43c:	mov	r0, r4
   1a440:	bl	22d94 <flatcc_builder_aligned_free@@Base>
   1a444:	mov	r0, #0
   1a448:	sub	sp, fp, #16
   1a44c:	pop	{r4, r5, r6, r7, fp, pc}
   1a450:	cmp	r6, #10
   1a454:	bcc	1a500 <test_union_vector@@Base+0x378>
   1a458:	ldrh	r5, [r3, #8]
   1a45c:	mov	lr, #0
   1a460:	mov	r1, #0
   1a464:	cmp	r5, #0
   1a468:	beq	1a47c <test_union_vector@@Base+0x2f4>
   1a46c:	mov	r1, r7
   1a470:	ldr	r0, [r1, r5]!
   1a474:	add	r0, r1, r0
   1a478:	add	r1, r0, #4
   1a47c:	cmp	r6, #12
   1a480:	bcc	1a4b0 <test_union_vector@@Base+0x328>
   1a484:	ldrh	r0, [r3, #10]
   1a488:	cmp	r0, #0
   1a48c:	beq	1a4ac <test_union_vector@@Base+0x324>
   1a490:	mov	r2, r7
   1a494:	ldr	r0, [r2, r0]!
   1a498:	add	r0, r2, r0
   1a49c:	add	lr, r0, #4
   1a4a0:	cmp	r1, #0
   1a4a4:	bne	1a4b8 <test_union_vector@@Base+0x330>
   1a4a8:	b	1a500 <test_union_vector@@Base+0x378>
   1a4ac:	mov	lr, #0
   1a4b0:	cmp	r1, #0
   1a4b4:	beq	1a500 <test_union_vector@@Base+0x378>
   1a4b8:	ldr	r0, [r1, #-4]
   1a4bc:	cmp	r0, #1
   1a4c0:	bne	1a500 <test_union_vector@@Base+0x378>
   1a4c4:	ldrb	r0, [r1]
   1a4c8:	cmp	r0, #2
   1a4cc:	bne	1a50c <test_union_vector@@Base+0x384>
   1a4d0:	cmp	lr, #0
   1a4d4:	ldrne	r0, [lr, #-4]
   1a4d8:	cmpne	r0, #0
   1a4dc:	bne	1a518 <test_union_vector@@Base+0x390>
   1a4e0:	ldr	r0, [pc, #588]	; 1a734 <test_union_vector@@Base+0x5ac>
   1a4e4:	ldr	r1, [pc, #588]	; 1a738 <test_union_vector@@Base+0x5b0>
   1a4e8:	ldr	r3, [pc, #588]	; 1a73c <test_union_vector@@Base+0x5b4>
   1a4ec:	mov	r2, #117	; 0x75
   1a4f0:	add	r0, pc, r0
   1a4f4:	add	r1, pc, r1
   1a4f8:	add	r3, pc, r3
   1a4fc:	bl	12f04 <__assert_fail@plt>
   1a500:	ldr	r0, [pc, #484]	; 1a6ec <test_union_vector@@Base+0x564>
   1a504:	add	r0, pc, r0
   1a508:	b	1a3f8 <test_union_vector@@Base+0x270>
   1a50c:	ldr	r0, [pc, #476]	; 1a6f0 <test_union_vector@@Base+0x568>
   1a510:	add	r0, pc, r0
   1a514:	b	1a3f8 <test_union_vector@@Base+0x270>
   1a518:	ldr	r0, [lr]
   1a51c:	ldr	r0, [lr, r0]!
   1a520:	mov	r1, lr
   1a524:	ldrh	r0, [r1, -r0]!	; <UNPREDICTABLE>
   1a528:	cmp	r0, #6
   1a52c:	bcc	1a54c <test_union_vector@@Base+0x3c4>
   1a530:	ldrh	r1, [r1, #4]
   1a534:	cmp	r1, #0
   1a538:	beq	1a54c <test_union_vector@@Base+0x3c4>
   1a53c:	add	r0, lr, r1
   1a540:	ldrsb	r1, [r0]
   1a544:	cmp	r1, #2
   1a548:	bne	1a608 <test_union_vector@@Base+0x480>
   1a54c:	mov	ip, #0
   1a550:	cmp	r5, #0
   1a554:	mov	r1, #0
   1a558:	beq	1a56c <test_union_vector@@Base+0x3e4>
   1a55c:	mov	r0, r7
   1a560:	ldr	r1, [r0, r5]!
   1a564:	add	r0, r0, r1
   1a568:	add	r1, r0, #4
   1a56c:	cmp	r6, #12
   1a570:	bcc	1a588 <test_union_vector@@Base+0x400>
   1a574:	ldrh	r3, [r3, #10]
   1a578:	cmp	r3, #0
   1a57c:	ldrne	r0, [r7, r3]!
   1a580:	addne	r0, r7, r0
   1a584:	addne	ip, r0, #4
   1a588:	cmp	r1, #0
   1a58c:	mov	r3, #0
   1a590:	mov	r2, #0
   1a594:	ldrne	r3, [r1, #-4]
   1a598:	cmp	ip, #0
   1a59c:	ldrne	r2, [ip, #-4]
   1a5a0:	cmp	r3, r2
   1a5a4:	bne	1a6a4 <test_union_vector@@Base+0x51c>
   1a5a8:	cmp	r1, #0
   1a5ac:	beq	1a5fc <test_union_vector@@Base+0x474>
   1a5b0:	ldr	r0, [r1, #-4]
   1a5b4:	cmp	r0, #1
   1a5b8:	bne	1a5fc <test_union_vector@@Base+0x474>
   1a5bc:	ldrb	r1, [r1]
   1a5c0:	cmp	r1, #0
   1a5c4:	beq	1a618 <test_union_vector@@Base+0x490>
   1a5c8:	cmp	ip, #0
   1a5cc:	ldrne	r0, [ip, #-4]
   1a5d0:	cmpne	r0, #0
   1a5d4:	beq	1a4e0 <test_union_vector@@Base+0x358>
   1a5d8:	cmp	r1, #2
   1a5dc:	bne	1a618 <test_union_vector@@Base+0x490>
   1a5e0:	ldr	r0, [ip]
   1a5e4:	add	r0, ip, r0
   1a5e8:	cmp	r0, lr
   1a5ec:	beq	1a43c <test_union_vector@@Base+0x2b4>
   1a5f0:	ldr	r0, [pc, #264]	; 1a700 <test_union_vector@@Base+0x578>
   1a5f4:	add	r0, pc, r0
   1a5f8:	b	1a3f8 <test_union_vector@@Base+0x270>
   1a5fc:	ldr	r0, [pc, #244]	; 1a6f8 <test_union_vector@@Base+0x570>
   1a600:	add	r0, pc, r0
   1a604:	b	1a3f8 <test_union_vector@@Base+0x270>
   1a608:	ldr	r0, [pc, #228]	; 1a6f4 <test_union_vector@@Base+0x56c>
   1a60c:	add	r0, pc, r0
   1a610:	bl	12e14 <printf@plt>
   1a614:	b	1a43c <test_union_vector@@Base+0x2b4>
   1a618:	ldr	r0, [pc, #220]	; 1a6fc <test_union_vector@@Base+0x574>
   1a61c:	add	r0, pc, r0
   1a620:	b	1a3f8 <test_union_vector@@Base+0x270>
   1a624:	ldr	r0, [pc, #228]	; 1a710 <test_union_vector@@Base+0x588>
   1a628:	ldr	r1, [pc, #228]	; 1a714 <test_union_vector@@Base+0x58c>
   1a62c:	ldr	r3, [pc, #228]	; 1a718 <test_union_vector@@Base+0x590>
   1a630:	mov	r2, #223	; 0xdf
   1a634:	add	r0, pc, r0
   1a638:	add	r1, pc, r1
   1a63c:	add	r3, pc, r3
   1a640:	bl	12f04 <__assert_fail@plt>
   1a644:	ldr	r0, [pc, #208]	; 1a71c <test_union_vector@@Base+0x594>
   1a648:	ldr	r1, [pc, #208]	; 1a720 <test_union_vector@@Base+0x598>
   1a64c:	ldr	r3, [pc, #208]	; 1a724 <test_union_vector@@Base+0x59c>
   1a650:	mov	r2, #235	; 0xeb
   1a654:	add	r0, pc, r0
   1a658:	add	r1, pc, r1
   1a65c:	add	r3, pc, r3
   1a660:	bl	12f04 <__assert_fail@plt>
   1a664:	ldr	r0, [pc, #188]	; 1a728 <test_union_vector@@Base+0x5a0>
   1a668:	ldr	r1, [pc, #188]	; 1a72c <test_union_vector@@Base+0x5a4>
   1a66c:	ldr	r3, [pc, #188]	; 1a730 <test_union_vector@@Base+0x5a8>
   1a670:	movw	r2, #717	; 0x2cd
   1a674:	add	r0, pc, r0
   1a678:	add	r1, pc, r1
   1a67c:	add	r3, pc, r3
   1a680:	bl	12f04 <__assert_fail@plt>
   1a684:	ldr	r0, [pc, #120]	; 1a704 <test_union_vector@@Base+0x57c>
   1a688:	ldr	r1, [pc, #120]	; 1a708 <test_union_vector@@Base+0x580>
   1a68c:	ldr	r3, [pc, #120]	; 1a70c <test_union_vector@@Base+0x584>
   1a690:	mov	r2, #217	; 0xd9
   1a694:	add	r0, pc, r0
   1a698:	add	r1, pc, r1
   1a69c:	add	r3, pc, r3
   1a6a0:	bl	12f04 <__assert_fail@plt>
   1a6a4:	ldr	r0, [pc, #148]	; 1a740 <test_union_vector@@Base+0x5b8>
   1a6a8:	ldr	r1, [pc, #148]	; 1a744 <test_union_vector@@Base+0x5bc>
   1a6ac:	ldr	r3, [pc, #148]	; 1a748 <test_union_vector@@Base+0x5c0>
   1a6b0:	movw	r2, #621	; 0x26d
   1a6b4:	add	r0, pc, r0
   1a6b8:	add	r1, pc, r1
   1a6bc:	add	r3, pc, r3
   1a6c0:	bl	12f04 <__assert_fail@plt>
   1a6c4:	andeq	sl, r0, r0, asr sl
   1a6c8:	andeq	fp, r0, r4, asr r2
   1a6cc:	andeq	sp, r0, r0, ror #25
   1a6d0:	andeq	sp, r0, r6, ror ip
   1a6d4:	andeq	sp, r0, r0, lsl #24
   1a6d8:	andeq	sl, r0, r8, asr #17
   1a6dc:			; <UNDEFINED> instruction: 0x00002fbc
   1a6e0:	ldrdeq	fp, [r0], -r7
   1a6e4:	andeq	fp, r0, r3, lsr r0
   1a6e8:	andeq	sp, r0, r5, ror #8
   1a6ec:	andeq	sp, r0, sp, lsl r4
   1a6f0:	andeq	sp, r0, r4, ror #7
   1a6f4:	andeq	sl, r0, sp, ror lr
   1a6f8:			; <UNDEFINED> instruction: 0x0000d2b0
   1a6fc:	andeq	sp, r0, fp, ror r2
   1a700:	andeq	sp, r0, sp, lsl #5
   1a704:			; <UNDEFINED> instruction: 0x0000bbbb
   1a708:	andeq	fp, r0, r0, asr #7
   1a70c:	andeq	fp, r0, r5, lsl #25
   1a710:	andeq	fp, r0, lr, asr sp
   1a714:	andeq	fp, r0, r0, lsr #8
   1a718:	andeq	fp, r0, ip, ror #27
   1a71c:	andeq	fp, r0, sp, lsr r5
   1a720:	andeq	fp, r0, r0, lsl #8
   1a724:	ldrdeq	fp, [r0], -r7
   1a728:	andeq	fp, r0, lr, asr #4
   1a72c:	andeq	fp, r0, r0, ror r2
   1a730:	andeq	fp, r0, r5, lsl #20
   1a734:	andeq	fp, r0, pc, ror r9
   1a738:			; <UNDEFINED> instruction: 0x0000b9b2
   1a73c:	ldrdeq	fp, [r0], -r6
   1a740:	andeq	fp, r0, lr, ror #28
   1a744:	andeq	fp, r0, r0, lsr r2
   1a748:	andeq	fp, r0, fp, asr #29

0001a74c <test_mixed_type_union@@Base>:
   1a74c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a750:	add	fp, sp, #24
   1a754:	sub	sp, sp, #16
   1a758:	mov	r4, r0
   1a75c:	bl	1e2ac <flatcc_builder_reset@@Base>
   1a760:	ldr	r1, [pc, #2992]	; 1b318 <test_mixed_type_union@@Base+0xbcc>
   1a764:	mov	r0, r4
   1a768:	mov	r2, #0
   1a76c:	mov	r3, #0
   1a770:	mov	r8, #0
   1a774:	add	r1, pc, r1
   1a778:	bl	1eea8 <flatcc_builder_start_buffer@@Base>
   1a77c:	cmp	r0, #0
   1a780:	bne	1a790 <test_mixed_type_union@@Base+0x44>
   1a784:	mov	r0, r4
   1a788:	mov	r1, #10
   1a78c:	bl	20484 <flatcc_builder_start_table@@Base>
   1a790:	mov	r0, r4
   1a794:	mov	r1, #4
   1a798:	mov	r2, #4
   1a79c:	bl	1f1e4 <flatcc_builder_start_struct@@Base>
   1a7a0:	cmp	r0, #0
   1a7a4:	beq	1a7bc <test_mixed_type_union@@Base+0x70>
   1a7a8:	mov	r1, #10
   1a7ac:	str	r1, [r0]
   1a7b0:	mov	r0, r4
   1a7b4:	bl	1f2cc <flatcc_builder_end_struct@@Base>
   1a7b8:	mov	r8, r0
   1a7bc:	mov	r0, r4
   1a7c0:	mov	r1, #2
   1a7c4:	mov	r2, #2
   1a7c8:	bl	1f1e4 <flatcc_builder_start_struct@@Base>
   1a7cc:	cmp	r0, #0
   1a7d0:	beq	1a7ec <test_mixed_type_union@@Base+0xa0>
   1a7d4:	mov	r1, #22
   1a7d8:	strh	r1, [r0]
   1a7dc:	mov	r0, r4
   1a7e0:	bl	1f2cc <flatcc_builder_end_struct@@Base>
   1a7e4:	mov	r9, r0
   1a7e8:	b	1a7f0 <test_mixed_type_union@@Base+0xa4>
   1a7ec:	mov	r9, #0
   1a7f0:	mov	r0, r4
   1a7f4:	mov	r1, #2
   1a7f8:	mov	r2, #2
   1a7fc:	bl	1f1e4 <flatcc_builder_start_struct@@Base>
   1a800:	cmp	r0, #0
   1a804:	beq	1a860 <test_mixed_type_union@@Base+0x114>
   1a808:	mov	r1, #19
   1a80c:	strh	r1, [r0]
   1a810:	mov	r0, r4
   1a814:	bl	1f2cc <flatcc_builder_end_struct@@Base>
   1a818:	cmp	r0, #0
   1a81c:	beq	1a860 <test_mixed_type_union@@Base+0x114>
   1a820:	mov	r5, r0
   1a824:	mov	r0, r4
   1a828:	mov	r1, #0
   1a82c:	mov	r2, #1
   1a830:	mov	r3, #1
   1a834:	bl	21920 <flatcc_builder_table_add@@Base>
   1a838:	cmp	r0, #0
   1a83c:	beq	1a860 <test_mixed_type_union@@Base+0x114>
   1a840:	mov	r7, r0
   1a844:	mov	r0, r4
   1a848:	mov	r1, #1
   1a84c:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1a850:	cmp	r0, #0
   1a854:	movne	r1, #8
   1a858:	strbne	r1, [r7]
   1a85c:	strne	r5, [r0]
   1a860:	cmp	r9, #0
   1a864:	beq	1a8a4 <test_mixed_type_union@@Base+0x158>
   1a868:	mov	r0, r4
   1a86c:	mov	r1, #6
   1a870:	mov	r2, #1
   1a874:	mov	r3, #1
   1a878:	bl	21920 <flatcc_builder_table_add@@Base>
   1a87c:	cmp	r0, #0
   1a880:	beq	1a8a4 <test_mixed_type_union@@Base+0x158>
   1a884:	mov	r5, r0
   1a888:	mov	r0, r4
   1a88c:	mov	r1, #7
   1a890:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1a894:	cmp	r0, #0
   1a898:	movne	r1, #8
   1a89c:	strbne	r1, [r5]
   1a8a0:	strne	r9, [r0]
   1a8a4:	mov	r0, r4
   1a8a8:	mov	r1, #1
   1a8ac:	bl	20484 <flatcc_builder_start_table@@Base>
   1a8b0:	mov	r7, #0
   1a8b4:	cmp	r0, #0
   1a8b8:	beq	1aa84 <test_mixed_type_union@@Base+0x338>
   1a8bc:	ldr	r1, [pc, #2652]	; 1b320 <test_mixed_type_union@@Base+0xbd4>
   1a8c0:	mov	r0, r4
   1a8c4:	add	r1, pc, r1
   1a8c8:	bl	227bc <flatcc_builder_create_string_str@@Base>
   1a8cc:	cmp	r0, #0
   1a8d0:	beq	1a914 <test_mixed_type_union@@Base+0x1c8>
   1a8d4:	mov	r5, r0
   1a8d8:	mov	r0, r4
   1a8dc:	mov	r1, #4
   1a8e0:	mov	r2, #1
   1a8e4:	mov	r3, #1
   1a8e8:	bl	21920 <flatcc_builder_table_add@@Base>
   1a8ec:	cmp	r0, #0
   1a8f0:	beq	1a914 <test_mixed_type_union@@Base+0x1c8>
   1a8f4:	mov	r6, r0
   1a8f8:	mov	r0, r4
   1a8fc:	mov	r1, #5
   1a900:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1a904:	cmp	r0, #0
   1a908:	movne	r1, #11
   1a90c:	strbne	r1, [r6]
   1a910:	strne	r5, [r0]
   1a914:	mov	r0, r4
   1a918:	bl	21fc4 <flatcc_builder_start_union_vector@@Base>
   1a91c:	mov	r0, r4
   1a920:	mov	r1, #8
   1a924:	mov	r2, r9
   1a928:	bl	22450 <flatcc_builder_union_vector_push@@Base>
   1a92c:	mov	r0, r4
   1a930:	mov	r1, #2
   1a934:	mov	r2, r7
   1a938:	bl	22450 <flatcc_builder_union_vector_push@@Base>
   1a93c:	mov	r0, r4
   1a940:	mov	r1, #1
   1a944:	bl	20484 <flatcc_builder_start_table@@Base>
   1a948:	mov	r6, #0
   1a94c:	cmp	r0, #0
   1a950:	mov	r5, #0
   1a954:	bne	1a9a8 <test_mixed_type_union@@Base+0x25c>
   1a958:	mov	r0, r4
   1a95c:	mov	r1, #0
   1a960:	mov	r2, #4
   1a964:	mov	r3, #4
   1a968:	mov	r5, #0
   1a96c:	bl	21920 <flatcc_builder_table_add@@Base>
   1a970:	cmp	r0, #0
   1a974:	beq	1a9a8 <test_mixed_type_union@@Base+0x25c>
   1a978:	mov	r1, #1
   1a97c:	mov	r2, #0
   1a980:	str	r1, [r0]
   1a984:	mov	r0, r4
   1a988:	ldr	r1, [pc, #2452]	; 1b324 <test_mixed_type_union@@Base+0xbd8>
   1a98c:	add	r1, pc, r1
   1a990:	bl	20e20 <flatcc_builder_check_required@@Base>
   1a994:	cmp	r0, #0
   1a998:	beq	1b0b4 <test_mixed_type_union@@Base+0x968>
   1a99c:	mov	r0, r4
   1a9a0:	bl	20eac <flatcc_builder_end_table@@Base>
   1a9a4:	mov	r5, r0
   1a9a8:	mov	r0, r4
   1a9ac:	mov	r1, #2
   1a9b0:	mov	r2, r5
   1a9b4:	bl	22450 <flatcc_builder_union_vector_push@@Base>
   1a9b8:	ldr	r1, [pc, #2408]	; 1b328 <test_mixed_type_union@@Base+0xbdc>
   1a9bc:	mov	r0, r4
   1a9c0:	add	r1, pc, r1
   1a9c4:	bl	227bc <flatcc_builder_create_string_str@@Base>
   1a9c8:	mov	r2, r0
   1a9cc:	mov	r0, r4
   1a9d0:	mov	r1, #11
   1a9d4:	bl	22450 <flatcc_builder_union_vector_push@@Base>
   1a9d8:	mov	r0, r4
   1a9dc:	mov	r1, #9
   1a9e0:	mov	r2, r8
   1a9e4:	bl	22450 <flatcc_builder_union_vector_push@@Base>
   1a9e8:	mov	r0, r4
   1a9ec:	mov	r1, #4
   1a9f0:	mov	r2, #4
   1a9f4:	bl	1f1e4 <flatcc_builder_start_struct@@Base>
   1a9f8:	mov	r1, #3
   1a9fc:	str	r1, [r0]
   1aa00:	mov	r0, r4
   1aa04:	bl	1f2cc <flatcc_builder_end_struct@@Base>
   1aa08:	mov	r2, r0
   1aa0c:	mov	r0, r4
   1aa10:	mov	r1, #9
   1aa14:	bl	22450 <flatcc_builder_union_vector_push@@Base>
   1aa18:	mov	r0, r4
   1aa1c:	mov	r1, #4
   1aa20:	mov	r2, #4
   1aa24:	bl	1f1e4 <flatcc_builder_start_struct@@Base>
   1aa28:	cmp	r0, #0
   1aa2c:	beq	1aa44 <test_mixed_type_union@@Base+0x2f8>
   1aa30:	mov	r1, #1
   1aa34:	str	r1, [r0]
   1aa38:	mov	r0, r4
   1aa3c:	bl	1f2cc <flatcc_builder_end_struct@@Base>
   1aa40:	mov	r6, r0
   1aa44:	mov	r0, r4
   1aa48:	mov	r1, #9
   1aa4c:	mov	r2, r6
   1aa50:	bl	22450 <flatcc_builder_union_vector_push@@Base>
   1aa54:	mov	r0, r4
   1aa58:	mov	r1, #4
   1aa5c:	mov	r2, #4
   1aa60:	bl	1f1e4 <flatcc_builder_start_struct@@Base>
   1aa64:	cmp	r0, #0
   1aa68:	beq	1ab24 <test_mixed_type_union@@Base+0x3d8>
   1aa6c:	mov	r1, #2
   1aa70:	str	r1, [r0]
   1aa74:	mov	r0, r4
   1aa78:	bl	1f2cc <flatcc_builder_end_struct@@Base>
   1aa7c:	mov	r2, r0
   1aa80:	b	1ab28 <test_mixed_type_union@@Base+0x3dc>
   1aa84:	mov	r0, r4
   1aa88:	mov	r1, #0
   1aa8c:	mov	r2, #4
   1aa90:	mov	r3, #4
   1aa94:	mov	r7, #0
   1aa98:	bl	21920 <flatcc_builder_table_add@@Base>
   1aa9c:	cmp	r0, #0
   1aaa0:	beq	1a8bc <test_mixed_type_union@@Base+0x170>
   1aaa4:	mov	r1, #42	; 0x2a
   1aaa8:	mov	r2, #0
   1aaac:	mov	r7, #0
   1aab0:	str	r1, [r0]
   1aab4:	mov	r0, r4
   1aab8:	ldr	r1, [pc, #2140]	; 1b31c <test_mixed_type_union@@Base+0xbd0>
   1aabc:	add	r1, pc, r1
   1aac0:	bl	20e20 <flatcc_builder_check_required@@Base>
   1aac4:	cmp	r0, #0
   1aac8:	beq	1b0b4 <test_mixed_type_union@@Base+0x968>
   1aacc:	mov	r0, r4
   1aad0:	bl	20eac <flatcc_builder_end_table@@Base>
   1aad4:	cmp	r0, #0
   1aad8:	beq	1a8bc <test_mixed_type_union@@Base+0x170>
   1aadc:	mov	r5, r0
   1aae0:	mov	r0, r4
   1aae4:	mov	r1, #2
   1aae8:	mov	r2, #1
   1aaec:	mov	r3, #1
   1aaf0:	bl	21920 <flatcc_builder_table_add@@Base>
   1aaf4:	cmp	r0, #0
   1aaf8:	beq	1ab1c <test_mixed_type_union@@Base+0x3d0>
   1aafc:	mov	r6, r0
   1ab00:	mov	r0, r4
   1ab04:	mov	r1, #3
   1ab08:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1ab0c:	cmp	r0, #0
   1ab10:	movne	r1, #2
   1ab14:	strbne	r1, [r6]
   1ab18:	strne	r5, [r0]
   1ab1c:	mov	r7, r5
   1ab20:	b	1a8bc <test_mixed_type_union@@Base+0x170>
   1ab24:	mov	r2, #0
   1ab28:	mov	r0, r4
   1ab2c:	mov	r1, #9
   1ab30:	bl	22450 <flatcc_builder_union_vector_push@@Base>
   1ab34:	ldr	r1, [pc, #2032]	; 1b32c <test_mixed_type_union@@Base+0xbe0>
   1ab38:	mov	r0, r4
   1ab3c:	add	r1, pc, r1
   1ab40:	bl	227bc <flatcc_builder_create_string_str@@Base>
   1ab44:	mov	r2, r0
   1ab48:	mov	r0, r4
   1ab4c:	mov	r1, #11
   1ab50:	bl	22450 <flatcc_builder_union_vector_push@@Base>
   1ab54:	ldr	r1, [pc, #2004]	; 1b330 <test_mixed_type_union@@Base+0xbe4>
   1ab58:	mov	r0, r4
   1ab5c:	add	r1, pc, r1
   1ab60:	bl	227bc <flatcc_builder_create_string_str@@Base>
   1ab64:	mov	r2, r0
   1ab68:	mov	r0, r4
   1ab6c:	mov	r1, #11
   1ab70:	bl	22450 <flatcc_builder_union_vector_push@@Base>
   1ab74:	add	r0, sp, #8
   1ab78:	mov	r1, r4
   1ab7c:	bl	2203c <flatcc_builder_end_union_vector@@Base>
   1ab80:	ldr	r6, [sp, #8]
   1ab84:	cmp	r6, #0
   1ab88:	ldrne	r5, [sp, #12]
   1ab8c:	cmpne	r5, #0
   1ab90:	bne	1acd0 <test_mixed_type_union@@Base+0x584>
   1ab94:	ldr	r1, [pc, #1944]	; 1b334 <test_mixed_type_union@@Base+0xbe8>
   1ab98:	mov	r0, r4
   1ab9c:	mov	r2, #0
   1aba0:	add	r1, pc, r1
   1aba4:	bl	20e20 <flatcc_builder_check_required@@Base>
   1aba8:	cmp	r0, #0
   1abac:	beq	1b074 <test_mixed_type_union@@Base+0x928>
   1abb0:	mov	r0, r4
   1abb4:	bl	20eac <flatcc_builder_end_table@@Base>
   1abb8:	mov	r1, r0
   1abbc:	mov	r0, r4
   1abc0:	bl	1f0a8 <flatcc_builder_end_buffer@@Base>
   1abc4:	add	r1, sp, #4
   1abc8:	mov	r0, r4
   1abcc:	bl	22c54 <flatcc_builder_finalize_aligned_buffer@@Base>
   1abd0:	mov	r4, r0
   1abd4:	ldr	r0, [pc, #1884]	; 1b338 <test_mixed_type_union@@Base+0xbec>
   1abd8:	mov	r1, r4
   1abdc:	ldr	r0, [pc, r0]
   1abe0:	ldr	r2, [sp, #4]
   1abe4:	ldr	r3, [r0]
   1abe8:	ldr	r0, [pc, #1868]	; 1b33c <test_mixed_type_union@@Base+0xbf0>
   1abec:	add	r0, pc, r0
   1abf0:	bl	1361c <test_type_aliases@@Base+0x554>
   1abf4:	ldr	r1, [sp, #4]
   1abf8:	ldr	r2, [pc, #1856]	; 1b340 <test_mixed_type_union@@Base+0xbf4>
   1abfc:	ldr	r3, [pc, #1856]	; 1b344 <test_mixed_type_union@@Base+0xbf8>
   1ac00:	mov	r0, r4
   1ac04:	add	r2, pc, r2
   1ac08:	add	r3, pc, r3
   1ac0c:	bl	23f6c <flatcc_verify_table_as_root@@Base>
   1ac10:	cmp	r0, #0
   1ac14:	beq	1ac34 <test_mixed_type_union@@Base+0x4e8>
   1ac18:	bl	23328 <flatcc_verify_error_string@@Base>
   1ac1c:	mov	r1, r0
   1ac20:	ldr	r0, [pc, #1824]	; 1b348 <test_mixed_type_union@@Base+0xbfc>
   1ac24:	add	r0, pc, r0
   1ac28:	bl	12e14 <printf@plt>
   1ac2c:	mvn	r5, #0
   1ac30:	b	1ad30 <test_mixed_type_union@@Base+0x5e4>
   1ac34:	cmp	r4, #0
   1ac38:	beq	1b094 <test_mixed_type_union@@Base+0x948>
   1ac3c:	ldr	r0, [r4, #4]
   1ac40:	movw	r1, #20301	; 0x4f4d
   1ac44:	movt	r1, #21326	; 0x534e
   1ac48:	cmp	r0, r1
   1ac4c:	bne	1b094 <test_mixed_type_union@@Base+0x948>
   1ac50:	ldr	r0, [r4]
   1ac54:	mov	r6, r4
   1ac58:	ldr	r0, [r6, r0]!
   1ac5c:	mov	r7, r6
   1ac60:	ldrh	r1, [r7, -r0]!
   1ac64:	cmp	r1, #7
   1ac68:	bls	1ad00 <test_mixed_type_union@@Base+0x5b4>
   1ac6c:	ldrh	r0, [r7, #6]
   1ac70:	cmp	r0, #0
   1ac74:	beq	1ad00 <test_mixed_type_union@@Base+0x5b4>
   1ac78:	cmp	r1, #24
   1ac7c:	bcc	1ad0c <test_mixed_type_union@@Base+0x5c0>
   1ac80:	ldrh	r5, [r7, #22]
   1ac84:	cmp	r5, #0
   1ac88:	beq	1ad0c <test_mixed_type_union@@Base+0x5c0>
   1ac8c:	ldrh	r1, [r7, #4]
   1ac90:	cmp	r1, #0
   1ac94:	beq	1ad18 <test_mixed_type_union@@Base+0x5cc>
   1ac98:	ldrb	r1, [r6, r1]
   1ac9c:	cmp	r1, #0
   1aca0:	beq	1ad18 <test_mixed_type_union@@Base+0x5cc>
   1aca4:	cmp	r1, #8
   1aca8:	bne	1ad18 <test_mixed_type_union@@Base+0x5cc>
   1acac:	add	r0, r6, r0
   1acb0:	ldr	r1, [r0]
   1acb4:	add	r0, r0, r1
   1acb8:	ldrh	r0, [r0]
   1acbc:	cmp	r0, #20
   1acc0:	bcc	1ad3c <test_mixed_type_union@@Base+0x5f0>
   1acc4:	ldr	r0, [pc, #1676]	; 1b358 <test_mixed_type_union@@Base+0xc0c>
   1acc8:	add	r0, pc, r0
   1accc:	b	1ad20 <test_mixed_type_union@@Base+0x5d4>
   1acd0:	mov	r0, r4
   1acd4:	mov	r1, #8
   1acd8:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1acdc:	cmp	r0, #0
   1ace0:	beq	1ab94 <test_mixed_type_union@@Base+0x448>
   1ace4:	str	r6, [r0]
   1ace8:	mov	r0, r4
   1acec:	mov	r1, #9
   1acf0:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1acf4:	cmp	r0, #0
   1acf8:	strne	r5, [r0]
   1acfc:	b	1ab94 <test_mixed_type_union@@Base+0x448>
   1ad00:	ldr	r0, [pc, #1604]	; 1b34c <test_mixed_type_union@@Base+0xc00>
   1ad04:	add	r0, pc, r0
   1ad08:	b	1ad20 <test_mixed_type_union@@Base+0x5d4>
   1ad0c:	ldr	r0, [pc, #1596]	; 1b350 <test_mixed_type_union@@Base+0xc04>
   1ad10:	add	r0, pc, r0
   1ad14:	b	1ad20 <test_mixed_type_union@@Base+0x5d4>
   1ad18:	ldr	r0, [pc, #1588]	; 1b354 <test_mixed_type_union@@Base+0xc08>
   1ad1c:	add	r0, pc, r0
   1ad20:	bl	12e5c <puts@plt>
   1ad24:	mvn	r5, #0
   1ad28:	mov	r0, r4
   1ad2c:	bl	22d94 <flatcc_builder_aligned_free@@Base>
   1ad30:	mov	r0, r5
   1ad34:	sub	sp, fp, #24
   1ad38:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ad3c:	cmp	r0, #19
   1ad40:	bne	1ae30 <test_mixed_type_union@@Base+0x6e4>
   1ad44:	ldrh	r0, [r7, #16]
   1ad48:	cmp	r0, #0
   1ad4c:	beq	1ae3c <test_mixed_type_union@@Base+0x6f0>
   1ad50:	ldrb	r0, [r6, r0]
   1ad54:	cmp	r0, #8
   1ad58:	bne	1ae3c <test_mixed_type_union@@Base+0x6f0>
   1ad5c:	ldrh	r0, [r7, #18]
   1ad60:	cmp	r0, #0
   1ad64:	beq	1ae48 <test_mixed_type_union@@Base+0x6fc>
   1ad68:	mov	r1, r6
   1ad6c:	ldr	r0, [r1, r0]!
   1ad70:	add	r0, r1, r0
   1ad74:	ldrh	r0, [r0]
   1ad78:	cmp	r0, #22
   1ad7c:	bne	1ae54 <test_mixed_type_union@@Base+0x708>
   1ad80:	ldrh	r0, [r7, #8]
   1ad84:	cmp	r0, #0
   1ad88:	beq	1ae60 <test_mixed_type_union@@Base+0x714>
   1ad8c:	ldrb	r0, [r6, r0]
   1ad90:	cmp	r0, #2
   1ad94:	bne	1ae60 <test_mixed_type_union@@Base+0x714>
   1ad98:	ldrh	r1, [r7, #10]
   1ad9c:	cmp	r1, #0
   1ada0:	beq	1ae6c <test_mixed_type_union@@Base+0x720>
   1ada4:	mov	r0, r6
   1ada8:	ldr	r1, [r0, r1]!
   1adac:	ldr	r2, [r0, r1]!
   1adb0:	mov	r1, r0
   1adb4:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   1adb8:	cmp	r2, #6
   1adbc:	bcc	1ae6c <test_mixed_type_union@@Base+0x720>
   1adc0:	ldrh	r1, [r1, #4]
   1adc4:	cmp	r1, #0
   1adc8:	beq	1ae6c <test_mixed_type_union@@Base+0x720>
   1adcc:	ldr	r0, [r0, r1]
   1add0:	cmp	r0, #42	; 0x2a
   1add4:	bne	1ae6c <test_mixed_type_union@@Base+0x720>
   1add8:	ldrh	r0, [r7, #12]
   1addc:	cmp	r0, #0
   1ade0:	beq	1ae78 <test_mixed_type_union@@Base+0x72c>
   1ade4:	ldrb	r0, [r6, r0]
   1ade8:	cmp	r0, #11
   1adec:	bne	1ae78 <test_mixed_type_union@@Base+0x72c>
   1adf0:	ldrh	r0, [r7, #14]
   1adf4:	cmp	r0, #0
   1adf8:	beq	1ae84 <test_mixed_type_union@@Base+0x738>
   1adfc:	mov	r1, r6
   1ae00:	ldr	r0, [r1, r0]!
   1ae04:	add	r0, r1, r0
   1ae08:	ldr	r1, [pc, #1380]	; 1b374 <test_mixed_type_union@@Base+0xc28>
   1ae0c:	add	r8, r0, #4
   1ae10:	mov	r0, r8
   1ae14:	add	r1, pc, r1
   1ae18:	bl	12e08 <strcmp@plt>
   1ae1c:	cmp	r0, #0
   1ae20:	beq	1ae90 <test_mixed_type_union@@Base+0x744>
   1ae24:	ldr	r0, [pc, #1356]	; 1b378 <test_mixed_type_union@@Base+0xc2c>
   1ae28:	add	r0, pc, r0
   1ae2c:	b	1aeb0 <test_mixed_type_union@@Base+0x764>
   1ae30:	ldr	r0, [pc, #1316]	; 1b35c <test_mixed_type_union@@Base+0xc10>
   1ae34:	add	r0, pc, r0
   1ae38:	b	1ad20 <test_mixed_type_union@@Base+0x5d4>
   1ae3c:	ldr	r0, [pc, #1308]	; 1b360 <test_mixed_type_union@@Base+0xc14>
   1ae40:	add	r0, pc, r0
   1ae44:	b	1ad20 <test_mixed_type_union@@Base+0x5d4>
   1ae48:	ldr	r0, [pc, #1436]	; 1b3ec <test_mixed_type_union@@Base+0xca0>
   1ae4c:	add	r0, pc, r0
   1ae50:	b	1ad20 <test_mixed_type_union@@Base+0x5d4>
   1ae54:	ldr	r0, [pc, #1288]	; 1b364 <test_mixed_type_union@@Base+0xc18>
   1ae58:	add	r0, pc, r0
   1ae5c:	b	1ad20 <test_mixed_type_union@@Base+0x5d4>
   1ae60:	ldr	r0, [pc, #1280]	; 1b368 <test_mixed_type_union@@Base+0xc1c>
   1ae64:	add	r0, pc, r0
   1ae68:	b	1ad20 <test_mixed_type_union@@Base+0x5d4>
   1ae6c:	ldr	r0, [pc, #1272]	; 1b36c <test_mixed_type_union@@Base+0xc20>
   1ae70:	add	r0, pc, r0
   1ae74:	b	1ad20 <test_mixed_type_union@@Base+0x5d4>
   1ae78:	ldr	r0, [pc, #1264]	; 1b370 <test_mixed_type_union@@Base+0xc24>
   1ae7c:	add	r0, pc, r0
   1ae80:	b	1ad20 <test_mixed_type_union@@Base+0x5d4>
   1ae84:	ldr	r0, [pc, #1380]	; 1b3f0 <test_mixed_type_union@@Base+0xca4>
   1ae88:	add	r0, pc, r0
   1ae8c:	b	1ad20 <test_mixed_type_union@@Base+0x5d4>
   1ae90:	ldr	r1, [pc, #1252]	; 1b37c <test_mixed_type_union@@Base+0xc30>
   1ae94:	mov	r0, r8
   1ae98:	add	r1, pc, r1
   1ae9c:	bl	12e08 <strcmp@plt>
   1aea0:	cmp	r0, #0
   1aea4:	beq	1aebc <test_mixed_type_union@@Base+0x770>
   1aea8:	ldr	r0, [pc, #1232]	; 1b380 <test_mixed_type_union@@Base+0xc34>
   1aeac:	add	r0, pc, r0
   1aeb0:	mov	r1, r8
   1aeb4:	bl	12e14 <printf@plt>
   1aeb8:	b	1ad24 <test_mixed_type_union@@Base+0x5d8>
   1aebc:	ldrh	r1, [r7, #20]
   1aec0:	mov	r0, r6
   1aec4:	cmp	r1, #0
   1aec8:	beq	1aef0 <test_mixed_type_union@@Base+0x7a4>
   1aecc:	ldr	r2, [r0, r5]!
   1aed0:	add	r0, r0, r2
   1aed4:	mov	r2, r6
   1aed8:	ldr	r3, [r2, r1]!
   1aedc:	add	r0, r0, #4
   1aee0:	ldr	r3, [r2, r3]!
   1aee4:	add	r7, r2, #4
   1aee8:	mov	r2, #0
   1aeec:	b	1af08 <test_mixed_type_union@@Base+0x7bc>
   1aef0:	ldr	r2, [r0, r5]!
   1aef4:	mov	r7, #0
   1aef8:	mov	r3, #0
   1aefc:	add	r0, r0, r2
   1af00:	mov	r2, #1
   1af04:	add	r0, r0, #4
   1af08:	ldr	r5, [r0, #-4]
   1af0c:	cmp	r3, r5
   1af10:	bne	1b2b8 <test_mixed_type_union@@Base+0xb6c>
   1af14:	cmp	r2, #0
   1af18:	bne	1b298 <test_mixed_type_union@@Base+0xb4c>
   1af1c:	ldr	r8, [r7, #-4]
   1af20:	cmp	r8, #0
   1af24:	beq	1b298 <test_mixed_type_union@@Base+0xb4c>
   1af28:	ldrb	r2, [r7]
   1af2c:	cmp	r2, #0
   1af30:	beq	1b034 <test_mixed_type_union@@Base+0x8e8>
   1af34:	ldr	r9, [r0, #-4]
   1af38:	cmp	r9, #0
   1af3c:	beq	1b2d8 <test_mixed_type_union@@Base+0xb8c>
   1af40:	cmp	r2, #8
   1af44:	bne	1b034 <test_mixed_type_union@@Base+0x8e8>
   1af48:	cmp	r8, #1
   1af4c:	bls	1b298 <test_mixed_type_union@@Base+0xb4c>
   1af50:	ldrb	r2, [r7, #1]
   1af54:	cmp	r2, #0
   1af58:	beq	1b040 <test_mixed_type_union@@Base+0x8f4>
   1af5c:	cmp	r9, #1
   1af60:	bls	1b2d8 <test_mixed_type_union@@Base+0xb8c>
   1af64:	cmp	r2, #2
   1af68:	bne	1b040 <test_mixed_type_union@@Base+0x8f4>
   1af6c:	mov	r2, r0
   1af70:	ldr	r3, [r2, #4]!
   1af74:	add	r2, r2, r3
   1af78:	ldr	r5, [r2]
   1af7c:	mov	r3, r2
   1af80:	ldrh	r5, [r3, -r5]!	; <UNPREDICTABLE>
   1af84:	cmp	r5, #6
   1af88:	bcc	1b04c <test_mixed_type_union@@Base+0x900>
   1af8c:	ldrh	r3, [r3, #4]
   1af90:	cmp	r3, #0
   1af94:	beq	1b04c <test_mixed_type_union@@Base+0x900>
   1af98:	ldr	r2, [r2, r3]
   1af9c:	cmp	r2, #42	; 0x2a
   1afa0:	bne	1b04c <test_mixed_type_union@@Base+0x900>
   1afa4:	cmp	r8, #2
   1afa8:	bls	1b298 <test_mixed_type_union@@Base+0xb4c>
   1afac:	ldrb	r2, [r7, #2]
   1afb0:	cmp	r2, #0
   1afb4:	beq	1b05c <test_mixed_type_union@@Base+0x910>
   1afb8:	cmp	r9, #2
   1afbc:	bls	1b2d8 <test_mixed_type_union@@Base+0xb8c>
   1afc0:	cmp	r2, #2
   1afc4:	bne	1b05c <test_mixed_type_union@@Base+0x910>
   1afc8:	mov	r2, r0
   1afcc:	ldr	r3, [r2, #8]!
   1afd0:	add	r2, r2, r3
   1afd4:	ldr	r5, [r2]
   1afd8:	mov	r3, r2
   1afdc:	ldrh	r5, [r3, -r5]!	; <UNPREDICTABLE>
   1afe0:	cmp	r5, #6
   1afe4:	bcc	1b068 <test_mixed_type_union@@Base+0x91c>
   1afe8:	ldrh	r3, [r3, #4]
   1afec:	cmp	r3, #0
   1aff0:	beq	1b068 <test_mixed_type_union@@Base+0x91c>
   1aff4:	ldr	r2, [r2, r3]
   1aff8:	cmp	r2, #1
   1affc:	bne	1b068 <test_mixed_type_union@@Base+0x91c>
   1b000:	cmp	r1, #0
   1b004:	ldrne	r1, [r6, r1]!
   1b008:	ldrne	r1, [r6, r1]!
   1b00c:	cmpne	r1, #3
   1b010:	bhi	1b0d4 <test_mixed_type_union@@Base+0x988>
   1b014:	ldr	r0, [pc, #1020]	; 1b418 <test_mixed_type_union@@Base+0xccc>
   1b018:	ldr	r1, [pc, #1020]	; 1b41c <test_mixed_type_union@@Base+0xcd0>
   1b01c:	ldr	r3, [pc, #1020]	; 1b420 <test_mixed_type_union@@Base+0xcd4>
   1b020:	movw	r2, #405	; 0x195
   1b024:	add	r0, pc, r0
   1b028:	add	r1, pc, r1
   1b02c:	add	r3, pc, r3
   1b030:	bl	12f04 <__assert_fail@plt>
   1b034:	ldr	r0, [pc, #840]	; 1b384 <test_mixed_type_union@@Base+0xc38>
   1b038:	add	r0, pc, r0
   1b03c:	b	1b054 <test_mixed_type_union@@Base+0x908>
   1b040:	ldr	r0, [pc, #832]	; 1b388 <test_mixed_type_union@@Base+0xc3c>
   1b044:	add	r0, pc, r0
   1b048:	b	1b054 <test_mixed_type_union@@Base+0x908>
   1b04c:	ldr	r0, [pc, #824]	; 1b38c <test_mixed_type_union@@Base+0xc40>
   1b050:	add	r0, pc, r0
   1b054:	bl	12e14 <printf@plt>
   1b058:	b	1ad24 <test_mixed_type_union@@Base+0x5d8>
   1b05c:	ldr	r0, [pc, #812]	; 1b390 <test_mixed_type_union@@Base+0xc44>
   1b060:	add	r0, pc, r0
   1b064:	b	1b054 <test_mixed_type_union@@Base+0x908>
   1b068:	ldr	r0, [pc, #804]	; 1b394 <test_mixed_type_union@@Base+0xc48>
   1b06c:	add	r0, pc, r0
   1b070:	b	1b054 <test_mixed_type_union@@Base+0x908>
   1b074:	ldr	r0, [pc, #856]	; 1b3d4 <test_mixed_type_union@@Base+0xc88>
   1b078:	ldr	r1, [pc, #856]	; 1b3d8 <test_mixed_type_union@@Base+0xc8c>
   1b07c:	ldr	r3, [pc, #856]	; 1b3dc <test_mixed_type_union@@Base+0xc90>
   1b080:	mov	r2, #241	; 0xf1
   1b084:	add	r0, pc, r0
   1b088:	add	r1, pc, r1
   1b08c:	add	r3, pc, r3
   1b090:	bl	12f04 <__assert_fail@plt>
   1b094:	ldr	r0, [pc, #836]	; 1b3e0 <test_mixed_type_union@@Base+0xc94>
   1b098:	ldr	r1, [pc, #836]	; 1b3e4 <test_mixed_type_union@@Base+0xc98>
   1b09c:	ldr	r3, [pc, #836]	; 1b3e8 <test_mixed_type_union@@Base+0xc9c>
   1b0a0:	movw	r2, #819	; 0x333
   1b0a4:	add	r0, pc, r0
   1b0a8:	add	r1, pc, r1
   1b0ac:	add	r3, pc, r3
   1b0b0:	bl	12f04 <__assert_fail@plt>
   1b0b4:	ldr	r0, [pc, #780]	; 1b3c8 <test_mixed_type_union@@Base+0xc7c>
   1b0b8:	ldr	r1, [pc, #780]	; 1b3cc <test_mixed_type_union@@Base+0xc80>
   1b0bc:	ldr	r3, [pc, #780]	; 1b3d0 <test_mixed_type_union@@Base+0xc84>
   1b0c0:	mov	r2, #239	; 0xef
   1b0c4:	add	r0, pc, r0
   1b0c8:	add	r1, pc, r1
   1b0cc:	add	r3, pc, r3
   1b0d0:	bl	12f04 <__assert_fail@plt>
   1b0d4:	add	r1, r6, #4
   1b0d8:	ldrb	r1, [r1, #3]
   1b0dc:	cmp	r1, #11
   1b0e0:	bne	1b11c <test_mixed_type_union@@Base+0x9d0>
   1b0e4:	cmp	r9, #3
   1b0e8:	bls	1b2f8 <test_mixed_type_union@@Base+0xbac>
   1b0ec:	ldr	r1, [r0, #12]!
   1b0f0:	add	r0, r0, r1
   1b0f4:	ldr	r1, [pc, #672]	; 1b39c <test_mixed_type_union@@Base+0xc50>
   1b0f8:	add	r6, r0, #4
   1b0fc:	mov	r0, r6
   1b100:	add	r1, pc, r1
   1b104:	bl	12e08 <strcmp@plt>
   1b108:	cmp	r0, #0
   1b10c:	beq	1b128 <test_mixed_type_union@@Base+0x9dc>
   1b110:	ldr	r0, [pc, #648]	; 1b3a0 <test_mixed_type_union@@Base+0xc54>
   1b114:	add	r0, pc, r0
   1b118:	b	1ad20 <test_mixed_type_union@@Base+0x5d4>
   1b11c:	ldr	r0, [pc, #628]	; 1b398 <test_mixed_type_union@@Base+0xc4c>
   1b120:	add	r0, pc, r0
   1b124:	b	1ad20 <test_mixed_type_union@@Base+0x5d4>
   1b128:	cmp	r8, #3
   1b12c:	bls	1b298 <test_mixed_type_union@@Base+0xb4c>
   1b130:	ldrb	r0, [r7, #3]
   1b134:	cmp	r0, #11
   1b138:	bne	1b160 <test_mixed_type_union@@Base+0xa14>
   1b13c:	ldr	r1, [pc, #612]	; 1b3a8 <test_mixed_type_union@@Base+0xc5c>
   1b140:	mov	r0, r6
   1b144:	add	r1, pc, r1
   1b148:	bl	12e08 <strcmp@plt>
   1b14c:	cmp	r0, #0
   1b150:	beq	1b16c <test_mixed_type_union@@Base+0xa20>
   1b154:	ldr	r0, [pc, #592]	; 1b3ac <test_mixed_type_union@@Base+0xc60>
   1b158:	add	r0, pc, r0
   1b15c:	b	1ad20 <test_mixed_type_union@@Base+0x5d4>
   1b160:	ldr	r0, [pc, #572]	; 1b3a4 <test_mixed_type_union@@Base+0xc58>
   1b164:	add	r0, pc, r0
   1b168:	b	1b054 <test_mixed_type_union@@Base+0x908>
   1b16c:	cmp	r8, #4
   1b170:	bls	1b298 <test_mixed_type_union@@Base+0xb4c>
   1b174:	ldrb	r0, [r7, #4]
   1b178:	cmp	r0, #0
   1b17c:	beq	1b25c <test_mixed_type_union@@Base+0xb10>
   1b180:	cmp	r9, #4
   1b184:	bls	1b2d8 <test_mixed_type_union@@Base+0xb8c>
   1b188:	cmp	r0, #9
   1b18c:	bne	1b25c <test_mixed_type_union@@Base+0xb10>
   1b190:	cmp	r8, #5
   1b194:	bls	1b298 <test_mixed_type_union@@Base+0xb4c>
   1b198:	ldrb	r0, [r7, #5]
   1b19c:	cmp	r0, #0
   1b1a0:	beq	1b268 <test_mixed_type_union@@Base+0xb1c>
   1b1a4:	cmp	r9, #5
   1b1a8:	bls	1b2d8 <test_mixed_type_union@@Base+0xb8c>
   1b1ac:	cmp	r0, #9
   1b1b0:	bne	1b268 <test_mixed_type_union@@Base+0xb1c>
   1b1b4:	cmp	r8, #6
   1b1b8:	bls	1b298 <test_mixed_type_union@@Base+0xb4c>
   1b1bc:	ldrb	r0, [r7, #6]
   1b1c0:	cmp	r0, #0
   1b1c4:	beq	1b274 <test_mixed_type_union@@Base+0xb28>
   1b1c8:	cmp	r9, #6
   1b1cc:	bls	1b2d8 <test_mixed_type_union@@Base+0xb8c>
   1b1d0:	cmp	r0, #9
   1b1d4:	bne	1b274 <test_mixed_type_union@@Base+0xb28>
   1b1d8:	cmp	r8, #7
   1b1dc:	bls	1b298 <test_mixed_type_union@@Base+0xb4c>
   1b1e0:	ldrb	r0, [r7, #7]
   1b1e4:	cmp	r0, #0
   1b1e8:	beq	1b280 <test_mixed_type_union@@Base+0xb34>
   1b1ec:	cmp	r9, #7
   1b1f0:	bls	1b2d8 <test_mixed_type_union@@Base+0xb8c>
   1b1f4:	cmp	r0, #9
   1b1f8:	bne	1b280 <test_mixed_type_union@@Base+0xb34>
   1b1fc:	cmp	r8, #8
   1b200:	bls	1b298 <test_mixed_type_union@@Base+0xb4c>
   1b204:	ldrb	r0, [r7, #8]
   1b208:	cmp	r0, #0
   1b20c:	beq	1b28c <test_mixed_type_union@@Base+0xb40>
   1b210:	cmp	r9, #8
   1b214:	bls	1b2d8 <test_mixed_type_union@@Base+0xb8c>
   1b218:	cmp	r0, #11
   1b21c:	bne	1b28c <test_mixed_type_union@@Base+0xb40>
   1b220:	cmp	r8, #9
   1b224:	bls	1b298 <test_mixed_type_union@@Base+0xb4c>
   1b228:	ldrb	r0, [r7, #9]
   1b22c:	cmp	r0, #0
   1b230:	beq	1b28c <test_mixed_type_union@@Base+0xb40>
   1b234:	cmp	r9, #9
   1b238:	bls	1b2d8 <test_mixed_type_union@@Base+0xb8c>
   1b23c:	cmp	r0, #11
   1b240:	bne	1b28c <test_mixed_type_union@@Base+0xb40>
   1b244:	mov	r5, #0
   1b248:	cmp	r8, #10
   1b24c:	beq	1ad28 <test_mixed_type_union@@Base+0x5dc>
   1b250:	ldr	r0, [pc, #364]	; 1b3c4 <test_mixed_type_union@@Base+0xc78>
   1b254:	add	r0, pc, r0
   1b258:	b	1b054 <test_mixed_type_union@@Base+0x908>
   1b25c:	ldr	r0, [pc, #332]	; 1b3b0 <test_mixed_type_union@@Base+0xc64>
   1b260:	add	r0, pc, r0
   1b264:	b	1b054 <test_mixed_type_union@@Base+0x908>
   1b268:	ldr	r0, [pc, #324]	; 1b3b4 <test_mixed_type_union@@Base+0xc68>
   1b26c:	add	r0, pc, r0
   1b270:	b	1b054 <test_mixed_type_union@@Base+0x908>
   1b274:	ldr	r0, [pc, #316]	; 1b3b8 <test_mixed_type_union@@Base+0xc6c>
   1b278:	add	r0, pc, r0
   1b27c:	b	1b054 <test_mixed_type_union@@Base+0x908>
   1b280:	ldr	r0, [pc, #308]	; 1b3bc <test_mixed_type_union@@Base+0xc70>
   1b284:	add	r0, pc, r0
   1b288:	b	1b054 <test_mixed_type_union@@Base+0x908>
   1b28c:	ldr	r0, [pc, #300]	; 1b3c0 <test_mixed_type_union@@Base+0xc74>
   1b290:	add	r0, pc, r0
   1b294:	b	1b054 <test_mixed_type_union@@Base+0x908>
   1b298:	ldr	r0, [pc, #352]	; 1b400 <test_mixed_type_union@@Base+0xcb4>
   1b29c:	ldr	r1, [pc, #352]	; 1b404 <test_mixed_type_union@@Base+0xcb8>
   1b2a0:	ldr	r3, [pc, #352]	; 1b408 <test_mixed_type_union@@Base+0xcbc>
   1b2a4:	movw	r2, #773	; 0x305
   1b2a8:	add	r0, pc, r0
   1b2ac:	add	r1, pc, r1
   1b2b0:	add	r3, pc, r3
   1b2b4:	bl	12f04 <__assert_fail@plt>
   1b2b8:	ldr	r0, [pc, #308]	; 1b3f4 <test_mixed_type_union@@Base+0xca8>
   1b2bc:	ldr	r1, [pc, #308]	; 1b3f8 <test_mixed_type_union@@Base+0xcac>
   1b2c0:	ldr	r3, [pc, #308]	; 1b3fc <test_mixed_type_union@@Base+0xcb0>
   1b2c4:	movw	r2, #823	; 0x337
   1b2c8:	add	r0, pc, r0
   1b2cc:	add	r1, pc, r1
   1b2d0:	add	r3, pc, r3
   1b2d4:	bl	12f04 <__assert_fail@plt>
   1b2d8:	ldr	r0, [pc, #300]	; 1b40c <test_mixed_type_union@@Base+0xcc0>
   1b2dc:	ldr	r1, [pc, #300]	; 1b410 <test_mixed_type_union@@Base+0xcc4>
   1b2e0:	ldr	r3, [pc, #300]	; 1b414 <test_mixed_type_union@@Base+0xcc8>
   1b2e4:	mov	r2, #117	; 0x75
   1b2e8:	add	r0, pc, r0
   1b2ec:	add	r1, pc, r1
   1b2f0:	add	r3, pc, r3
   1b2f4:	bl	12f04 <__assert_fail@plt>
   1b2f8:	ldr	r0, [pc, #292]	; 1b424 <test_mixed_type_union@@Base+0xcd8>
   1b2fc:	ldr	r1, [pc, #292]	; 1b428 <test_mixed_type_union@@Base+0xcdc>
   1b300:	ldr	r3, [pc, #292]	; 1b42c <test_mixed_type_union@@Base+0xce0>
   1b304:	mov	r2, #119	; 0x77
   1b308:	add	r0, pc, r0
   1b30c:	add	r1, pc, r1
   1b310:	add	r3, pc, r3
   1b314:	bl	12f04 <__assert_fail@plt>
   1b318:	andeq	sl, r0, r8, lsl #9
   1b31c:	andeq	sp, r0, r4, asr #8
   1b320:	andeq	sl, r0, r2, ror #23
   1b324:	andeq	sp, r0, r4, ror r5
   1b328:	strdeq	sl, [r0], -r1
   1b32c:	andeq	sl, r0, r3, ror r9
   1b330:	andeq	sl, r0, pc, asr #18
   1b334:	andeq	sp, r0, r2, ror #6
   1b338:	andeq	pc, r1, r4, lsl #9
   1b33c:	andeq	sl, r0, fp, asr #17
   1b340:	strdeq	r9, [r0], -r8
   1b344:	andeq	r2, r0, r8, ror #27
   1b348:	andeq	sl, r0, r0, lsr #17
   1b34c:	andeq	ip, r0, r4, asr #24
   1b350:	andeq	ip, r0, r1, ror #24
   1b354:	andeq	ip, r0, pc, ror #28
   1b358:	muleq	r0, ip, lr
   1b35c:	andeq	ip, r0, r2, lsl #26
   1b360:	andeq	ip, r0, r2, asr #25
   1b364:	andeq	ip, r0, fp, ror ip
   1b368:	andeq	ip, r0, r8, asr ip
   1b36c:	andeq	ip, r0, fp, asr fp
   1b370:	andeq	ip, r0, sl, lsr #24
   1b374:	muleq	r0, r2, r6
   1b378:	andeq	sl, r0, fp, ror #13
   1b37c:	andeq	sl, r0, lr, lsl #12
   1b380:	andeq	sl, r0, fp, lsl #13
   1b384:	andeq	sl, r0, ip, lsr #10
   1b388:	andeq	sl, r0, r5, asr #10
   1b38c:	andeq	sl, r0, ip, asr r5
   1b390:	andeq	sl, r0, lr, ror r5
   1b394:	muleq	r0, r4, r5
   1b398:	andeq	ip, r0, r8, asr r9
   1b39c:			; <UNDEFINED> instruction: 0x0000a3b1
   1b3a0:	strdeq	ip, [r0], -r3
   1b3a4:	andeq	sl, r0, sp, asr #9
   1b3a8:	andeq	sl, r0, sp, ror #6
   1b3ac:	andeq	ip, r0, r2, ror #17
   1b3b0:	andeq	sl, r0, r9, lsl #8
   1b3b4:	andeq	sl, r0, pc, lsl r4
   1b3b8:	andeq	sl, r0, r5, lsr r4
   1b3bc:	andeq	sl, r0, sp, asr #8
   1b3c0:	andeq	sl, r0, r4, ror #8
   1b3c4:	andeq	sl, r0, ip, asr #9
   1b3c8:	andeq	fp, r0, pc, lsr r5
   1b3cc:	muleq	r0, r0, r9
   1b3d0:	andeq	fp, r0, r7, asr #11
   1b3d4:	andeq	fp, r0, r4, asr r6
   1b3d8:	ldrdeq	sl, [r0], -r0
   1b3dc:	ldrdeq	fp, [r0], -r3
   1b3e0:	andeq	sl, r0, lr, lsl r8
   1b3e4:	andeq	sl, r0, r0, asr #16
   1b3e8:	strdeq	fp, [r0], -r2
   1b3ec:	andeq	ip, r0, r0, asr fp
   1b3f0:	andeq	ip, r0, r5, ror #22
   1b3f4:	andeq	fp, r0, sl, asr r2
   1b3f8:	andeq	sl, r0, ip, lsl r6
   1b3fc:	andeq	fp, r0, r1, lsl r5
   1b400:	andeq	fp, r0, fp, lsr r3
   1b404:	andeq	sl, r0, ip, lsr r6
   1b408:	andeq	fp, r0, r5, lsl #11
   1b40c:	andeq	sl, r0, r7, lsl #23
   1b410:			; <UNDEFINED> instruction: 0x0000abba
   1b414:	ldrdeq	fp, [r0], -lr
   1b418:	andeq	sl, r0, fp, asr #28
   1b41c:	andeq	sl, r0, lr, ror lr
   1b420:	andeq	fp, r0, r5, asr #8
   1b424:	andeq	sl, r0, r7, ror #22
   1b428:	muleq	r0, sl, fp
   1b42c:	andeq	fp, r0, r5, lsl #11

0001b430 <test_add_set_defaults@@Base>:
   1b430:	push	{r4, r5, r6, sl, fp, lr}
   1b434:	add	fp, sp, #16
   1b438:	sub	sp, sp, #8
   1b43c:	mov	r4, r0
   1b440:	bl	1e2ac <flatcc_builder_reset@@Base>
   1b444:	ldr	r1, [pc, #784]	; 1b75c <test_add_set_defaults@@Base+0x32c>
   1b448:	mov	r0, r4
   1b44c:	mov	r2, #0
   1b450:	mov	r3, #0
   1b454:	add	r1, pc, r1
   1b458:	bl	1eea8 <flatcc_builder_start_buffer@@Base>
   1b45c:	cmp	r0, #0
   1b460:	bne	1b470 <test_add_set_defaults@@Base+0x40>
   1b464:	mov	r0, r4
   1b468:	mov	r1, #36	; 0x24
   1b46c:	bl	20484 <flatcc_builder_start_table@@Base>
   1b470:	ldr	r1, [pc, #744]	; 1b760 <test_add_set_defaults@@Base+0x330>
   1b474:	mov	r0, r4
   1b478:	add	r1, pc, r1
   1b47c:	bl	227bc <flatcc_builder_create_string_str@@Base>
   1b480:	cmp	r0, #0
   1b484:	beq	1b4a0 <test_add_set_defaults@@Base+0x70>
   1b488:	mov	r5, r0
   1b48c:	mov	r0, r4
   1b490:	mov	r1, #3
   1b494:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1b498:	cmp	r0, #0
   1b49c:	strne	r5, [r0]
   1b4a0:	mov	r0, r4
   1b4a4:	mov	r1, #1
   1b4a8:	mov	r2, #2
   1b4ac:	mov	r3, #2
   1b4b0:	bl	21920 <flatcc_builder_table_add@@Base>
   1b4b4:	cmp	r0, #0
   1b4b8:	mov	r2, #1
   1b4bc:	movne	r1, #100	; 0x64
   1b4c0:	strhne	r1, [r0]
   1b4c4:	mov	r0, r4
   1b4c8:	ldr	r1, [pc, #660]	; 1b764 <test_add_set_defaults@@Base+0x334>
   1b4cc:	add	r1, pc, r1
   1b4d0:	bl	20e20 <flatcc_builder_check_required@@Base>
   1b4d4:	cmp	r0, #0
   1b4d8:	beq	1b73c <test_add_set_defaults@@Base+0x30c>
   1b4dc:	mov	r0, r4
   1b4e0:	bl	20eac <flatcc_builder_end_table@@Base>
   1b4e4:	mov	r1, r0
   1b4e8:	mov	r0, r4
   1b4ec:	bl	1f0a8 <flatcc_builder_end_buffer@@Base>
   1b4f0:	add	r1, sp, #4
   1b4f4:	mov	r0, r4
   1b4f8:	bl	22ad4 <flatcc_builder_get_direct_buffer@@Base>
   1b4fc:	cmp	r0, #0
   1b500:	beq	1b71c <test_add_set_defaults@@Base+0x2ec>
   1b504:	ldr	r1, [r0, #4]
   1b508:	movw	r6, #20301	; 0x4f4d
   1b50c:	movt	r6, #21326	; 0x534e
   1b510:	cmp	r1, r6
   1b514:	bne	1b71c <test_add_set_defaults@@Base+0x2ec>
   1b518:	ldr	r1, [r0]
   1b51c:	ldr	r1, [r0, r1]!
   1b520:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   1b524:	cmp	r1, #9
   1b528:	bls	1b544 <test_add_set_defaults@@Base+0x114>
   1b52c:	ldrh	r2, [r0, #8]
   1b530:	cmp	r2, #0
   1b534:	beq	1b54c <test_add_set_defaults@@Base+0x11c>
   1b538:	ldr	r0, [pc, #552]	; 1b768 <test_add_set_defaults@@Base+0x338>
   1b53c:	add	r0, pc, r0
   1b540:	b	1b6fc <test_add_set_defaults@@Base+0x2cc>
   1b544:	cmp	r1, #8
   1b548:	bcc	1b578 <test_add_set_defaults@@Base+0x148>
   1b54c:	ldrh	r2, [r0, #6]
   1b550:	cmp	r2, #0
   1b554:	beq	1b6f4 <test_add_set_defaults@@Base+0x2c4>
   1b558:	cmp	r1, #18
   1b55c:	bcc	1b584 <test_add_set_defaults@@Base+0x154>
   1b560:	ldrh	r0, [r0, #16]
   1b564:	cmp	r0, #0
   1b568:	beq	1b584 <test_add_set_defaults@@Base+0x154>
   1b56c:	ldr	r0, [pc, #512]	; 1b774 <test_add_set_defaults@@Base+0x344>
   1b570:	add	r0, pc, r0
   1b574:	b	1b6fc <test_add_set_defaults@@Base+0x2cc>
   1b578:	ldr	r0, [pc, #492]	; 1b76c <test_add_set_defaults@@Base+0x33c>
   1b57c:	add	r0, pc, r0
   1b580:	b	1b6fc <test_add_set_defaults@@Base+0x2cc>
   1b584:	mov	r0, r4
   1b588:	bl	1e2ac <flatcc_builder_reset@@Base>
   1b58c:	ldr	r1, [pc, #484]	; 1b778 <test_add_set_defaults@@Base+0x348>
   1b590:	mov	r0, r4
   1b594:	mov	r2, #0
   1b598:	mov	r3, #0
   1b59c:	add	r1, pc, r1
   1b5a0:	bl	1eea8 <flatcc_builder_start_buffer@@Base>
   1b5a4:	cmp	r0, #0
   1b5a8:	bne	1b5b8 <test_add_set_defaults@@Base+0x188>
   1b5ac:	mov	r0, r4
   1b5b0:	mov	r1, #36	; 0x24
   1b5b4:	bl	20484 <flatcc_builder_start_table@@Base>
   1b5b8:	ldr	r1, [pc, #444]	; 1b77c <test_add_set_defaults@@Base+0x34c>
   1b5bc:	mov	r0, r4
   1b5c0:	add	r1, pc, r1
   1b5c4:	bl	227bc <flatcc_builder_create_string_str@@Base>
   1b5c8:	cmp	r0, #0
   1b5cc:	beq	1b5e8 <test_add_set_defaults@@Base+0x1b8>
   1b5d0:	mov	r5, r0
   1b5d4:	mov	r0, r4
   1b5d8:	mov	r1, #3
   1b5dc:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1b5e0:	cmp	r0, #0
   1b5e4:	strne	r5, [r0]
   1b5e8:	mov	r0, r4
   1b5ec:	mov	r1, #2
   1b5f0:	mov	r2, #2
   1b5f4:	mov	r3, #2
   1b5f8:	bl	21920 <flatcc_builder_table_add@@Base>
   1b5fc:	cmp	r0, #0
   1b600:	mov	r2, #2
   1b604:	mov	r3, #2
   1b608:	movne	r1, #100	; 0x64
   1b60c:	strhne	r1, [r0]
   1b610:	mov	r0, r4
   1b614:	mov	r1, #1
   1b618:	bl	21920 <flatcc_builder_table_add@@Base>
   1b61c:	cmp	r0, #0
   1b620:	mov	r2, #1
   1b624:	mov	r3, #1
   1b628:	movne	r1, #100	; 0x64
   1b62c:	strhne	r1, [r0]
   1b630:	mov	r0, r4
   1b634:	mov	r1, #6
   1b638:	bl	21920 <flatcc_builder_table_add@@Base>
   1b63c:	cmp	r0, #0
   1b640:	mov	r2, #1
   1b644:	movne	r1, #8
   1b648:	strbne	r1, [r0]
   1b64c:	mov	r0, r4
   1b650:	ldr	r1, [pc, #296]	; 1b780 <test_add_set_defaults@@Base+0x350>
   1b654:	add	r1, pc, r1
   1b658:	bl	20e20 <flatcc_builder_check_required@@Base>
   1b65c:	cmp	r0, #0
   1b660:	beq	1b73c <test_add_set_defaults@@Base+0x30c>
   1b664:	mov	r0, r4
   1b668:	bl	20eac <flatcc_builder_end_table@@Base>
   1b66c:	mov	r1, r0
   1b670:	mov	r0, r4
   1b674:	bl	1f0a8 <flatcc_builder_end_buffer@@Base>
   1b678:	add	r1, sp, #4
   1b67c:	mov	r0, r4
   1b680:	bl	22ad4 <flatcc_builder_get_direct_buffer@@Base>
   1b684:	cmp	r0, #0
   1b688:	beq	1b71c <test_add_set_defaults@@Base+0x2ec>
   1b68c:	mov	r1, r0
   1b690:	ldr	r0, [r0, #4]
   1b694:	cmp	r0, r6
   1b698:	bne	1b71c <test_add_set_defaults@@Base+0x2ec>
   1b69c:	ldr	r0, [r1]
   1b6a0:	ldr	r0, [r1, r0]!
   1b6a4:	ldrh	r2, [r1, -r0]!
   1b6a8:	ldr	r0, [pc, #212]	; 1b784 <test_add_set_defaults@@Base+0x354>
   1b6ac:	add	r0, pc, r0
   1b6b0:	cmp	r2, #9
   1b6b4:	bls	1b6fc <test_add_set_defaults@@Base+0x2cc>
   1b6b8:	ldrh	r3, [r1, #8]
   1b6bc:	cmp	r3, #0
   1b6c0:	beq	1b6fc <test_add_set_defaults@@Base+0x2cc>
   1b6c4:	ldrh	r0, [r1, #6]
   1b6c8:	cmp	r0, #0
   1b6cc:	beq	1b710 <test_add_set_defaults@@Base+0x2e0>
   1b6d0:	ldr	r0, [pc, #180]	; 1b78c <test_add_set_defaults@@Base+0x35c>
   1b6d4:	cmp	r2, #18
   1b6d8:	add	r0, pc, r0
   1b6dc:	bcc	1b6fc <test_add_set_defaults@@Base+0x2cc>
   1b6e0:	ldrh	r2, [r1, #16]
   1b6e4:	mov	r1, #0
   1b6e8:	cmp	r2, #0
   1b6ec:	bne	1b704 <test_add_set_defaults@@Base+0x2d4>
   1b6f0:	b	1b6fc <test_add_set_defaults@@Base+0x2cc>
   1b6f4:	ldr	r0, [pc, #116]	; 1b770 <test_add_set_defaults@@Base+0x340>
   1b6f8:	add	r0, pc, r0
   1b6fc:	bl	12e5c <puts@plt>
   1b700:	mvn	r1, #0
   1b704:	mov	r0, r1
   1b708:	sub	sp, fp, #16
   1b70c:	pop	{r4, r5, r6, sl, fp, pc}
   1b710:	ldr	r0, [pc, #112]	; 1b788 <test_add_set_defaults@@Base+0x358>
   1b714:	add	r0, pc, r0
   1b718:	b	1b6fc <test_add_set_defaults@@Base+0x2cc>
   1b71c:	ldr	r0, [pc, #120]	; 1b79c <test_add_set_defaults@@Base+0x36c>
   1b720:	ldr	r1, [pc, #120]	; 1b7a0 <test_add_set_defaults@@Base+0x370>
   1b724:	ldr	r3, [pc, #120]	; 1b7a4 <test_add_set_defaults@@Base+0x374>
   1b728:	movw	r2, #697	; 0x2b9
   1b72c:	add	r0, pc, r0
   1b730:	add	r1, pc, r1
   1b734:	add	r3, pc, r3
   1b738:	bl	12f04 <__assert_fail@plt>
   1b73c:	ldr	r0, [pc, #76]	; 1b790 <test_add_set_defaults@@Base+0x360>
   1b740:	ldr	r1, [pc, #76]	; 1b794 <test_add_set_defaults@@Base+0x364>
   1b744:	ldr	r3, [pc, #76]	; 1b798 <test_add_set_defaults@@Base+0x368>
   1b748:	mov	r2, #235	; 0xeb
   1b74c:	add	r0, pc, r0
   1b750:	add	r1, pc, r1
   1b754:	add	r3, pc, r3
   1b758:	bl	12f04 <__assert_fail@plt>
   1b75c:	andeq	r9, r0, r8, lsr #15
   1b760:	andeq	r9, r0, r8, asr #15
   1b764:	andeq	ip, r0, r8, lsr #20
   1b768:	andeq	ip, r0, sp, ror #14
   1b76c:	andeq	ip, r0, sl, lsr #12
   1b770:	andeq	ip, r0, lr, lsr #9
   1b774:	andeq	ip, r0, fp, lsl #14
   1b778:	andeq	r9, r0, r0, ror #12
   1b77c:	andeq	r9, r0, r0, lsl #13
   1b780:	andeq	ip, r0, r0, lsr #17
   1b784:	andeq	ip, r0, r7, lsr #10
   1b788:	strdeq	ip, [r0], -r2
   1b78c:	andeq	ip, r0, sp, ror #10
   1b790:	andeq	sl, r0, r5, asr #8
   1b794:	andeq	sl, r0, r8, lsl #6
   1b798:	ldrdeq	sl, [r0], -pc	; <UNPREDICTABLE>
   1b79c:	muleq	r0, r6, r1
   1b7a0:			; <UNDEFINED> instruction: 0x0000a1b8
   1b7a4:	andeq	sl, r0, sp, lsr #4

0001b7a8 <test_nested_buffer@@Base>:
   1b7a8:	push	{r4, r5, r6, r7, fp, lr}
   1b7ac:	add	fp, sp, #16
   1b7b0:	sub	sp, sp, #8
   1b7b4:	mov	r4, r0
   1b7b8:	bl	1e2ac <flatcc_builder_reset@@Base>
   1b7bc:	ldr	r1, [pc, #768]	; 1bac4 <test_nested_buffer@@Base+0x31c>
   1b7c0:	mov	r0, r4
   1b7c4:	mov	r2, #0
   1b7c8:	mov	r3, #0
   1b7cc:	add	r1, pc, r1
   1b7d0:	bl	1eea8 <flatcc_builder_start_buffer@@Base>
   1b7d4:	cmp	r0, #0
   1b7d8:	bne	1b7e8 <test_nested_buffer@@Base+0x40>
   1b7dc:	mov	r0, r4
   1b7e0:	mov	r1, #36	; 0x24
   1b7e4:	bl	20484 <flatcc_builder_start_table@@Base>
   1b7e8:	ldr	r1, [pc, #728]	; 1bac8 <test_nested_buffer@@Base+0x320>
   1b7ec:	mov	r0, r4
   1b7f0:	add	r1, pc, r1
   1b7f4:	bl	227bc <flatcc_builder_create_string_str@@Base>
   1b7f8:	cmp	r0, #0
   1b7fc:	beq	1b818 <test_nested_buffer@@Base+0x70>
   1b800:	mov	r5, r0
   1b804:	mov	r0, r4
   1b808:	mov	r1, #3
   1b80c:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1b810:	cmp	r0, #0
   1b814:	strne	r5, [r0]
   1b818:	ldr	r1, [pc, #684]	; 1bacc <test_nested_buffer@@Base+0x324>
   1b81c:	mov	r0, r4
   1b820:	mov	r2, #0
   1b824:	mov	r3, #0
   1b828:	add	r1, pc, r1
   1b82c:	bl	1eea8 <flatcc_builder_start_buffer@@Base>
   1b830:	cmp	r0, #0
   1b834:	bne	1b844 <test_nested_buffer@@Base+0x9c>
   1b838:	mov	r0, r4
   1b83c:	mov	r1, #36	; 0x24
   1b840:	bl	20484 <flatcc_builder_start_table@@Base>
   1b844:	ldr	r1, [pc, #644]	; 1bad0 <test_nested_buffer@@Base+0x328>
   1b848:	mov	r0, r4
   1b84c:	add	r1, pc, r1
   1b850:	bl	227bc <flatcc_builder_create_string_str@@Base>
   1b854:	cmp	r0, #0
   1b858:	beq	1b874 <test_nested_buffer@@Base+0xcc>
   1b85c:	mov	r5, r0
   1b860:	mov	r0, r4
   1b864:	mov	r1, #3
   1b868:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1b86c:	cmp	r0, #0
   1b870:	strne	r5, [r0]
   1b874:	ldr	r1, [pc, #600]	; 1bad4 <test_nested_buffer@@Base+0x32c>
   1b878:	mov	r0, r4
   1b87c:	mov	r2, #1
   1b880:	add	r1, pc, r1
   1b884:	bl	20e20 <flatcc_builder_check_required@@Base>
   1b888:	cmp	r0, #0
   1b88c:	beq	1baa4 <test_nested_buffer@@Base+0x2fc>
   1b890:	mov	r0, r4
   1b894:	bl	20eac <flatcc_builder_end_table@@Base>
   1b898:	mov	r1, r0
   1b89c:	mov	r0, r4
   1b8a0:	bl	1f0a8 <flatcc_builder_end_buffer@@Base>
   1b8a4:	cmp	r0, #0
   1b8a8:	beq	1b8c4 <test_nested_buffer@@Base+0x11c>
   1b8ac:	mov	r5, r0
   1b8b0:	mov	r0, r4
   1b8b4:	mov	r1, #13
   1b8b8:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1b8bc:	cmp	r0, #0
   1b8c0:	strne	r5, [r0]
   1b8c4:	mov	r0, r4
   1b8c8:	mov	r1, #2
   1b8cc:	mov	r2, #2
   1b8d0:	mov	r3, #2
   1b8d4:	bl	21920 <flatcc_builder_table_add@@Base>
   1b8d8:	cmp	r0, #0
   1b8dc:	mov	r2, #1
   1b8e0:	movne	r1, #10
   1b8e4:	strhne	r1, [r0]
   1b8e8:	mov	r0, r4
   1b8ec:	ldr	r1, [pc, #484]	; 1bad8 <test_nested_buffer@@Base+0x330>
   1b8f0:	add	r1, pc, r1
   1b8f4:	bl	20e20 <flatcc_builder_check_required@@Base>
   1b8f8:	cmp	r0, #0
   1b8fc:	beq	1baa4 <test_nested_buffer@@Base+0x2fc>
   1b900:	mov	r0, r4
   1b904:	bl	20eac <flatcc_builder_end_table@@Base>
   1b908:	mov	r1, r0
   1b90c:	mov	r0, r4
   1b910:	bl	1f0a8 <flatcc_builder_end_buffer@@Base>
   1b914:	add	r1, sp, #4
   1b918:	mov	r0, r4
   1b91c:	bl	22ad4 <flatcc_builder_get_direct_buffer@@Base>
   1b920:	mov	r4, r0
   1b924:	ldr	r0, [pc, #432]	; 1badc <test_nested_buffer@@Base+0x334>
   1b928:	mov	r1, r4
   1b92c:	ldr	r0, [pc, r0]
   1b930:	ldr	r2, [sp, #4]
   1b934:	ldr	r3, [r0]
   1b938:	ldr	r0, [pc, #416]	; 1bae0 <test_nested_buffer@@Base+0x338>
   1b93c:	add	r0, pc, r0
   1b940:	bl	1361c <test_type_aliases@@Base+0x554>
   1b944:	cmp	r4, #0
   1b948:	beq	1ba78 <test_nested_buffer@@Base+0x2d0>
   1b94c:	ldr	r0, [r4, #4]
   1b950:	movw	r6, #20301	; 0x4f4d
   1b954:	movt	r6, #21326	; 0x534e
   1b958:	cmp	r0, r6
   1b95c:	bne	1ba78 <test_nested_buffer@@Base+0x2d0>
   1b960:	ldr	r0, [r4]
   1b964:	ldr	r0, [r4, r0]!
   1b968:	mov	r5, r4
   1b96c:	ldrh	r7, [r5, -r0]!
   1b970:	cmp	r7, #11
   1b974:	bls	1ba84 <test_nested_buffer@@Base+0x2dc>
   1b978:	ldrh	r0, [r5, #10]
   1b97c:	cmp	r0, #0
   1b980:	beq	1ba84 <test_nested_buffer@@Base+0x2dc>
   1b984:	mov	r1, r4
   1b988:	ldr	r0, [r1, r0]!
   1b98c:	add	r0, r1, r0
   1b990:	ldr	r1, [pc, #348]	; 1baf4 <test_nested_buffer@@Base+0x34c>
   1b994:	add	r0, r0, #4
   1b998:	add	r1, pc, r1
   1b99c:	bl	12e08 <strcmp@plt>
   1b9a0:	cmp	r0, #0
   1b9a4:	beq	1b9c0 <test_nested_buffer@@Base+0x218>
   1b9a8:	ldr	r0, [pc, #328]	; 1baf8 <test_nested_buffer@@Base+0x350>
   1b9ac:	add	r0, pc, r0
   1b9b0:	bl	12e5c <puts@plt>
   1b9b4:	mvn	r0, #0
   1b9b8:	sub	sp, fp, #16
   1b9bc:	pop	{r4, r5, r6, r7, fp, pc}
   1b9c0:	mov	r1, #0
   1b9c4:	cmp	r7, #32
   1b9c8:	bcc	1b9f4 <test_nested_buffer@@Base+0x24c>
   1b9cc:	ldrh	r0, [r5, #30]
   1b9d0:	cmp	r0, #0
   1b9d4:	beq	1b9f4 <test_nested_buffer@@Base+0x24c>
   1b9d8:	mov	r2, r4
   1b9dc:	ldr	r0, [r2, r0]!
   1b9e0:	add	r0, r2, r0
   1b9e4:	ldr	r2, [r0, #8]
   1b9e8:	cmp	r2, r6
   1b9ec:	ldreq	r1, [r0, #4]!
   1b9f0:	addeq	r1, r0, r1
   1b9f4:	ldrh	r2, [r5, #8]
   1b9f8:	ldr	r0, [pc, #252]	; 1bafc <test_nested_buffer@@Base+0x354>
   1b9fc:	add	r0, pc, r0
   1ba00:	cmp	r2, #0
   1ba04:	beq	1b9b0 <test_nested_buffer@@Base+0x208>
   1ba08:	add	r2, r4, r2
   1ba0c:	ldrh	r2, [r2]
   1ba10:	cmp	r2, #10
   1ba14:	bne	1b9b0 <test_nested_buffer@@Base+0x208>
   1ba18:	cmp	r1, #0
   1ba1c:	beq	1ba78 <test_nested_buffer@@Base+0x2d0>
   1ba20:	ldr	r2, [r1]
   1ba24:	mov	r0, r1
   1ba28:	ldrh	r2, [r0, -r2]!	; <UNPREDICTABLE>
   1ba2c:	cmp	r2, #12
   1ba30:	bcc	1ba84 <test_nested_buffer@@Base+0x2dc>
   1ba34:	ldrh	r0, [r0, #10]
   1ba38:	cmp	r0, #0
   1ba3c:	beq	1ba84 <test_nested_buffer@@Base+0x2dc>
   1ba40:	ldr	r0, [r1, r0]!
   1ba44:	add	r0, r1, r0
   1ba48:	ldr	r1, [pc, #176]	; 1bb00 <test_nested_buffer@@Base+0x358>
   1ba4c:	add	r0, r0, #4
   1ba50:	add	r1, pc, r1
   1ba54:	bl	12e08 <strcmp@plt>
   1ba58:	cmp	r0, #0
   1ba5c:	beq	1ba6c <test_nested_buffer@@Base+0x2c4>
   1ba60:	ldr	r0, [pc, #156]	; 1bb04 <test_nested_buffer@@Base+0x35c>
   1ba64:	add	r0, pc, r0
   1ba68:	b	1b9b0 <test_nested_buffer@@Base+0x208>
   1ba6c:	mov	r0, #0
   1ba70:	sub	sp, fp, #16
   1ba74:	pop	{r4, r5, r6, r7, fp, pc}
   1ba78:	ldr	r0, [pc, #104]	; 1bae8 <test_nested_buffer@@Base+0x340>
   1ba7c:	add	r0, pc, r0
   1ba80:	b	1ba8c <test_nested_buffer@@Base+0x2e4>
   1ba84:	ldr	r0, [pc, #88]	; 1bae4 <test_nested_buffer@@Base+0x33c>
   1ba88:	add	r0, pc, r0
   1ba8c:	ldr	r1, [pc, #88]	; 1baec <test_nested_buffer@@Base+0x344>
   1ba90:	ldr	r3, [pc, #88]	; 1baf0 <test_nested_buffer@@Base+0x348>
   1ba94:	movw	r2, #699	; 0x2bb
   1ba98:	add	r1, pc, r1
   1ba9c:	add	r3, pc, r3
   1baa0:	bl	12f04 <__assert_fail@plt>
   1baa4:	ldr	r0, [pc, #92]	; 1bb08 <test_nested_buffer@@Base+0x360>
   1baa8:	ldr	r1, [pc, #92]	; 1bb0c <test_nested_buffer@@Base+0x364>
   1baac:	ldr	r3, [pc, #92]	; 1bb10 <test_nested_buffer@@Base+0x368>
   1bab0:	mov	r2, #235	; 0xeb
   1bab4:	add	r0, pc, r0
   1bab8:	add	r1, pc, r1
   1babc:	add	r3, pc, r3
   1bac0:	bl	12f04 <__assert_fail@plt>
   1bac4:	andeq	r9, r0, r0, lsr r4
   1bac8:	andeq	r9, r0, r0, asr r4
   1bacc:	ldrdeq	r9, [r0], -r4
   1bad0:	strdeq	r9, [r0], -sl
   1bad4:	andeq	ip, r0, r4, ror r6
   1bad8:	andeq	ip, r0, r4, lsl #12
   1badc:	andeq	lr, r1, r4, lsr r7
   1bae0:	andeq	r9, r0, sl, lsl lr
   1bae4:	andeq	sl, r0, sp, ror #6
   1bae8:	andeq	r9, r0, r6, asr #28
   1baec:	andeq	r9, r0, r0, asr lr
   1baf0:	andeq	sl, r0, r8, lsl #6
   1baf4:	andeq	r9, r0, r8, lsr #5
   1baf8:	andeq	ip, r0, r7, lsr #7
   1bafc:	andeq	ip, r0, r3, lsr r3
   1bb00:	strdeq	r9, [r0], -r6
   1bb04:	andeq	ip, r0, lr, lsr #5
   1bb08:	ldrdeq	sl, [r0], -sp
   1bb0c:	andeq	r9, r0, r0, lsr #31
   1bb10:	andeq	sl, r0, r7, ror r1

0001bb14 <test_nested_buffer_first@@Base>:
   1bb14:	push	{r4, r5, r6, r7, fp, lr}
   1bb18:	add	fp, sp, #16
   1bb1c:	sub	sp, sp, #8
   1bb20:	mov	r4, r0
   1bb24:	bl	1e2ac <flatcc_builder_reset@@Base>
   1bb28:	ldr	r1, [pc, #768]	; 1be30 <test_nested_buffer_first@@Base+0x31c>
   1bb2c:	mov	r0, r4
   1bb30:	mov	r2, #0
   1bb34:	mov	r3, #0
   1bb38:	add	r1, pc, r1
   1bb3c:	bl	1eea8 <flatcc_builder_start_buffer@@Base>
   1bb40:	cmp	r0, #0
   1bb44:	bne	1bb54 <test_nested_buffer_first@@Base+0x40>
   1bb48:	mov	r0, r4
   1bb4c:	mov	r1, #36	; 0x24
   1bb50:	bl	20484 <flatcc_builder_start_table@@Base>
   1bb54:	ldr	r1, [pc, #728]	; 1be34 <test_nested_buffer_first@@Base+0x320>
   1bb58:	mov	r0, r4
   1bb5c:	mov	r2, #0
   1bb60:	mov	r3, #0
   1bb64:	add	r1, pc, r1
   1bb68:	bl	1eea8 <flatcc_builder_start_buffer@@Base>
   1bb6c:	cmp	r0, #0
   1bb70:	bne	1bb80 <test_nested_buffer_first@@Base+0x6c>
   1bb74:	mov	r0, r4
   1bb78:	mov	r1, #36	; 0x24
   1bb7c:	bl	20484 <flatcc_builder_start_table@@Base>
   1bb80:	ldr	r1, [pc, #688]	; 1be38 <test_nested_buffer_first@@Base+0x324>
   1bb84:	mov	r0, r4
   1bb88:	add	r1, pc, r1
   1bb8c:	bl	227bc <flatcc_builder_create_string_str@@Base>
   1bb90:	cmp	r0, #0
   1bb94:	beq	1bbb0 <test_nested_buffer_first@@Base+0x9c>
   1bb98:	mov	r5, r0
   1bb9c:	mov	r0, r4
   1bba0:	mov	r1, #3
   1bba4:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1bba8:	cmp	r0, #0
   1bbac:	strne	r5, [r0]
   1bbb0:	ldr	r1, [pc, #644]	; 1be3c <test_nested_buffer_first@@Base+0x328>
   1bbb4:	mov	r0, r4
   1bbb8:	mov	r2, #1
   1bbbc:	add	r1, pc, r1
   1bbc0:	bl	20e20 <flatcc_builder_check_required@@Base>
   1bbc4:	cmp	r0, #0
   1bbc8:	beq	1be10 <test_nested_buffer_first@@Base+0x2fc>
   1bbcc:	mov	r0, r4
   1bbd0:	bl	20eac <flatcc_builder_end_table@@Base>
   1bbd4:	mov	r1, r0
   1bbd8:	mov	r0, r4
   1bbdc:	bl	1f0a8 <flatcc_builder_end_buffer@@Base>
   1bbe0:	cmp	r0, #0
   1bbe4:	beq	1bc00 <test_nested_buffer_first@@Base+0xec>
   1bbe8:	mov	r5, r0
   1bbec:	mov	r0, r4
   1bbf0:	mov	r1, #13
   1bbf4:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1bbf8:	cmp	r0, #0
   1bbfc:	strne	r5, [r0]
   1bc00:	mov	r0, r4
   1bc04:	mov	r1, #2
   1bc08:	mov	r2, #2
   1bc0c:	mov	r3, #2
   1bc10:	bl	21920 <flatcc_builder_table_add@@Base>
   1bc14:	cmp	r0, #0
   1bc18:	movne	r1, #10
   1bc1c:	strhne	r1, [r0]
   1bc20:	mov	r0, r4
   1bc24:	ldr	r1, [pc, #532]	; 1be40 <test_nested_buffer_first@@Base+0x32c>
   1bc28:	add	r1, pc, r1
   1bc2c:	bl	227bc <flatcc_builder_create_string_str@@Base>
   1bc30:	cmp	r0, #0
   1bc34:	beq	1bc50 <test_nested_buffer_first@@Base+0x13c>
   1bc38:	mov	r5, r0
   1bc3c:	mov	r0, r4
   1bc40:	mov	r1, #3
   1bc44:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1bc48:	cmp	r0, #0
   1bc4c:	strne	r5, [r0]
   1bc50:	ldr	r1, [pc, #492]	; 1be44 <test_nested_buffer_first@@Base+0x330>
   1bc54:	mov	r0, r4
   1bc58:	mov	r2, #1
   1bc5c:	add	r1, pc, r1
   1bc60:	bl	20e20 <flatcc_builder_check_required@@Base>
   1bc64:	cmp	r0, #0
   1bc68:	beq	1be10 <test_nested_buffer_first@@Base+0x2fc>
   1bc6c:	mov	r0, r4
   1bc70:	bl	20eac <flatcc_builder_end_table@@Base>
   1bc74:	mov	r1, r0
   1bc78:	mov	r0, r4
   1bc7c:	bl	1f0a8 <flatcc_builder_end_buffer@@Base>
   1bc80:	add	r1, sp, #4
   1bc84:	mov	r0, r4
   1bc88:	bl	22ad4 <flatcc_builder_get_direct_buffer@@Base>
   1bc8c:	mov	r4, r0
   1bc90:	ldr	r0, [pc, #432]	; 1be48 <test_nested_buffer_first@@Base+0x334>
   1bc94:	mov	r1, r4
   1bc98:	ldr	r0, [pc, r0]
   1bc9c:	ldr	r2, [sp, #4]
   1bca0:	ldr	r3, [r0]
   1bca4:	ldr	r0, [pc, #416]	; 1be4c <test_nested_buffer_first@@Base+0x338>
   1bca8:	add	r0, pc, r0
   1bcac:	bl	1361c <test_type_aliases@@Base+0x554>
   1bcb0:	cmp	r4, #0
   1bcb4:	beq	1bde4 <test_nested_buffer_first@@Base+0x2d0>
   1bcb8:	ldr	r0, [r4, #4]
   1bcbc:	movw	r6, #20301	; 0x4f4d
   1bcc0:	movt	r6, #21326	; 0x534e
   1bcc4:	cmp	r0, r6
   1bcc8:	bne	1bde4 <test_nested_buffer_first@@Base+0x2d0>
   1bccc:	ldr	r0, [r4]
   1bcd0:	ldr	r0, [r4, r0]!
   1bcd4:	mov	r5, r4
   1bcd8:	ldrh	r7, [r5, -r0]!
   1bcdc:	cmp	r7, #11
   1bce0:	bls	1bdf0 <test_nested_buffer_first@@Base+0x2dc>
   1bce4:	ldrh	r0, [r5, #10]
   1bce8:	cmp	r0, #0
   1bcec:	beq	1bdf0 <test_nested_buffer_first@@Base+0x2dc>
   1bcf0:	mov	r1, r4
   1bcf4:	ldr	r0, [r1, r0]!
   1bcf8:	add	r0, r1, r0
   1bcfc:	ldr	r1, [pc, #348]	; 1be60 <test_nested_buffer_first@@Base+0x34c>
   1bd00:	add	r0, r0, #4
   1bd04:	add	r1, pc, r1
   1bd08:	bl	12e08 <strcmp@plt>
   1bd0c:	cmp	r0, #0
   1bd10:	beq	1bd2c <test_nested_buffer_first@@Base+0x218>
   1bd14:	ldr	r0, [pc, #328]	; 1be64 <test_nested_buffer_first@@Base+0x350>
   1bd18:	add	r0, pc, r0
   1bd1c:	bl	12e5c <puts@plt>
   1bd20:	mvn	r0, #0
   1bd24:	sub	sp, fp, #16
   1bd28:	pop	{r4, r5, r6, r7, fp, pc}
   1bd2c:	mov	r1, #0
   1bd30:	cmp	r7, #32
   1bd34:	bcc	1bd60 <test_nested_buffer_first@@Base+0x24c>
   1bd38:	ldrh	r0, [r5, #30]
   1bd3c:	cmp	r0, #0
   1bd40:	beq	1bd60 <test_nested_buffer_first@@Base+0x24c>
   1bd44:	mov	r2, r4
   1bd48:	ldr	r0, [r2, r0]!
   1bd4c:	add	r0, r2, r0
   1bd50:	ldr	r2, [r0, #8]
   1bd54:	cmp	r2, r6
   1bd58:	ldreq	r1, [r0, #4]!
   1bd5c:	addeq	r1, r0, r1
   1bd60:	ldrh	r2, [r5, #8]
   1bd64:	ldr	r0, [pc, #252]	; 1be68 <test_nested_buffer_first@@Base+0x354>
   1bd68:	add	r0, pc, r0
   1bd6c:	cmp	r2, #0
   1bd70:	beq	1bd1c <test_nested_buffer_first@@Base+0x208>
   1bd74:	add	r2, r4, r2
   1bd78:	ldrh	r2, [r2]
   1bd7c:	cmp	r2, #10
   1bd80:	bne	1bd1c <test_nested_buffer_first@@Base+0x208>
   1bd84:	cmp	r1, #0
   1bd88:	beq	1bde4 <test_nested_buffer_first@@Base+0x2d0>
   1bd8c:	ldr	r2, [r1]
   1bd90:	mov	r0, r1
   1bd94:	ldrh	r2, [r0, -r2]!	; <UNPREDICTABLE>
   1bd98:	cmp	r2, #12
   1bd9c:	bcc	1bdf0 <test_nested_buffer_first@@Base+0x2dc>
   1bda0:	ldrh	r0, [r0, #10]
   1bda4:	cmp	r0, #0
   1bda8:	beq	1bdf0 <test_nested_buffer_first@@Base+0x2dc>
   1bdac:	ldr	r0, [r1, r0]!
   1bdb0:	add	r0, r1, r0
   1bdb4:	ldr	r1, [pc, #176]	; 1be6c <test_nested_buffer_first@@Base+0x358>
   1bdb8:	add	r0, r0, #4
   1bdbc:	add	r1, pc, r1
   1bdc0:	bl	12e08 <strcmp@plt>
   1bdc4:	cmp	r0, #0
   1bdc8:	beq	1bdd8 <test_nested_buffer_first@@Base+0x2c4>
   1bdcc:	ldr	r0, [pc, #156]	; 1be70 <test_nested_buffer_first@@Base+0x35c>
   1bdd0:	add	r0, pc, r0
   1bdd4:	b	1bd1c <test_nested_buffer_first@@Base+0x208>
   1bdd8:	mov	r0, #0
   1bddc:	sub	sp, fp, #16
   1bde0:	pop	{r4, r5, r6, r7, fp, pc}
   1bde4:	ldr	r0, [pc, #104]	; 1be54 <test_nested_buffer_first@@Base+0x340>
   1bde8:	add	r0, pc, r0
   1bdec:	b	1bdf8 <test_nested_buffer_first@@Base+0x2e4>
   1bdf0:	ldr	r0, [pc, #88]	; 1be50 <test_nested_buffer_first@@Base+0x33c>
   1bdf4:	add	r0, pc, r0
   1bdf8:	ldr	r1, [pc, #88]	; 1be58 <test_nested_buffer_first@@Base+0x344>
   1bdfc:	ldr	r3, [pc, #88]	; 1be5c <test_nested_buffer_first@@Base+0x348>
   1be00:	movw	r2, #699	; 0x2bb
   1be04:	add	r1, pc, r1
   1be08:	add	r3, pc, r3
   1be0c:	bl	12f04 <__assert_fail@plt>
   1be10:	ldr	r0, [pc, #92]	; 1be74 <test_nested_buffer_first@@Base+0x360>
   1be14:	ldr	r1, [pc, #92]	; 1be78 <test_nested_buffer_first@@Base+0x364>
   1be18:	ldr	r3, [pc, #92]	; 1be7c <test_nested_buffer_first@@Base+0x368>
   1be1c:	mov	r2, #235	; 0xeb
   1be20:	add	r0, pc, r0
   1be24:	add	r1, pc, r1
   1be28:	add	r3, pc, r3
   1be2c:	bl	12f04 <__assert_fail@plt>
   1be30:	andeq	r9, r0, r4, asr #1
   1be34:	muleq	r0, r8, r0
   1be38:			; <UNDEFINED> instruction: 0x00009bbe
   1be3c:	andeq	ip, r0, r8, lsr r3
   1be40:	andeq	r9, r0, r8, lsl r0
   1be44:	muleq	r0, r8, r2
   1be48:	andeq	lr, r1, r8, asr #7
   1be4c:	andeq	r9, r0, lr, lsr #21
   1be50:	andeq	sl, r0, r1
   1be54:	ldrdeq	r9, [r0], -sl
   1be58:	andeq	r9, r0, r4, ror #21
   1be5c:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   1be60:	andeq	r8, r0, ip, lsr pc
   1be64:	andeq	ip, r0, fp, lsr r0
   1be68:	andeq	fp, r0, r7, asr #31
   1be6c:	andeq	r9, r0, sl, lsl #19
   1be70:	andeq	fp, r0, r2, asr #30
   1be74:	andeq	r9, r0, r1, ror sp
   1be78:	andeq	r9, r0, r4, lsr ip
   1be7c:	andeq	r9, r0, fp, lsl #28

0001be80 <test_nested_buffer_using_nest@@Base>:
   1be80:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1be84:	add	fp, sp, #24
   1be88:	sub	sp, sp, #1040	; 0x410
   1be8c:	mov	r4, r0
   1be90:	bl	1e2ac <flatcc_builder_reset@@Base>
   1be94:	ldr	r1, [pc, #932]	; 1c240 <test_nested_buffer_using_nest@@Base+0x3c0>
   1be98:	mov	r0, r4
   1be9c:	mov	r2, #0
   1bea0:	mov	r3, #0
   1bea4:	add	r1, pc, r1
   1bea8:	bl	1eea8 <flatcc_builder_start_buffer@@Base>
   1beac:	cmp	r0, #0
   1beb0:	bne	1bec0 <test_nested_buffer_using_nest@@Base+0x40>
   1beb4:	mov	r0, r4
   1beb8:	mov	r1, #36	; 0x24
   1bebc:	bl	20484 <flatcc_builder_start_table@@Base>
   1bec0:	ldr	r1, [pc, #892]	; 1c244 <test_nested_buffer_using_nest@@Base+0x3c4>
   1bec4:	mov	r0, r4
   1bec8:	add	r1, pc, r1
   1becc:	bl	227bc <flatcc_builder_create_string_str@@Base>
   1bed0:	cmp	r0, #0
   1bed4:	beq	1bef0 <test_nested_buffer_using_nest@@Base+0x70>
   1bed8:	mov	r5, r0
   1bedc:	mov	r0, r4
   1bee0:	mov	r1, #3
   1bee4:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1bee8:	cmp	r0, #0
   1beec:	strne	r5, [r0]
   1bef0:	mov	r0, r4
   1bef4:	mov	r1, #1
   1bef8:	mov	r2, #2
   1befc:	mov	r3, #2
   1bf00:	bl	21920 <flatcc_builder_table_add@@Base>
   1bf04:	cmp	r0, #0
   1bf08:	mov	r2, #1
   1bf0c:	movne	r1, #42	; 0x2a
   1bf10:	strhne	r1, [r0]
   1bf14:	mov	r0, r4
   1bf18:	ldr	r1, [pc, #808]	; 1c248 <test_nested_buffer_using_nest@@Base+0x3c8>
   1bf1c:	add	r1, pc, r1
   1bf20:	bl	20e20 <flatcc_builder_check_required@@Base>
   1bf24:	cmp	r0, #0
   1bf28:	beq	1c1f4 <test_nested_buffer_using_nest@@Base+0x374>
   1bf2c:	mov	r0, r4
   1bf30:	bl	20eac <flatcc_builder_end_table@@Base>
   1bf34:	mov	r1, r0
   1bf38:	mov	r0, r4
   1bf3c:	bl	1f0a8 <flatcc_builder_end_buffer@@Base>
   1bf40:	mov	r0, r4
   1bf44:	bl	22a44 <flatcc_builder_get_buffer_size@@Base>
   1bf48:	mov	r5, r0
   1bf4c:	add	r1, sp, #16
   1bf50:	mov	r0, r4
   1bf54:	mov	r2, #1024	; 0x400
   1bf58:	bl	22b1c <flatcc_builder_copy_buffer@@Base>
   1bf5c:	cmp	r0, #0
   1bf60:	beq	1c0fc <test_nested_buffer_using_nest@@Base+0x27c>
   1bf64:	mov	r0, r4
   1bf68:	bl	1e2ac <flatcc_builder_reset@@Base>
   1bf6c:	ldr	r1, [pc, #732]	; 1c250 <test_nested_buffer_using_nest@@Base+0x3d0>
   1bf70:	mov	r0, r4
   1bf74:	mov	r2, #0
   1bf78:	mov	r3, #0
   1bf7c:	add	r1, pc, r1
   1bf80:	bl	1eea8 <flatcc_builder_start_buffer@@Base>
   1bf84:	cmp	r0, #0
   1bf88:	bne	1bf98 <test_nested_buffer_using_nest@@Base+0x118>
   1bf8c:	mov	r0, r4
   1bf90:	mov	r1, #36	; 0x24
   1bf94:	bl	20484 <flatcc_builder_start_table@@Base>
   1bf98:	mvn	r0, #0
   1bf9c:	mov	r1, #8
   1bfa0:	mov	r2, r5
   1bfa4:	mov	r3, #1
   1bfa8:	str	r1, [sp]
   1bfac:	str	r0, [sp, #4]
   1bfb0:	add	r1, sp, #16
   1bfb4:	mov	r0, r4
   1bfb8:	bl	21070 <flatcc_builder_create_vector@@Base>
   1bfbc:	cmp	r0, #0
   1bfc0:	beq	1bfdc <test_nested_buffer_using_nest@@Base+0x15c>
   1bfc4:	mov	r5, r0
   1bfc8:	mov	r0, r4
   1bfcc:	mov	r1, #13
   1bfd0:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1bfd4:	cmp	r0, #0
   1bfd8:	strne	r5, [r0]
   1bfdc:	mov	r0, r4
   1bfe0:	mov	r1, #2
   1bfe4:	mov	r2, #2
   1bfe8:	mov	r3, #2
   1bfec:	bl	21920 <flatcc_builder_table_add@@Base>
   1bff0:	cmp	r0, #0
   1bff4:	movne	r1, #10
   1bff8:	strhne	r1, [r0]
   1bffc:	mov	r0, r4
   1c000:	ldr	r1, [pc, #588]	; 1c254 <test_nested_buffer_using_nest@@Base+0x3d4>
   1c004:	add	r1, pc, r1
   1c008:	bl	227bc <flatcc_builder_create_string_str@@Base>
   1c00c:	cmp	r0, #0
   1c010:	beq	1c02c <test_nested_buffer_using_nest@@Base+0x1ac>
   1c014:	mov	r5, r0
   1c018:	mov	r0, r4
   1c01c:	mov	r1, #3
   1c020:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1c024:	cmp	r0, #0
   1c028:	strne	r5, [r0]
   1c02c:	ldr	r1, [pc, #548]	; 1c258 <test_nested_buffer_using_nest@@Base+0x3d8>
   1c030:	mov	r0, r4
   1c034:	mov	r2, #1
   1c038:	add	r1, pc, r1
   1c03c:	bl	20e20 <flatcc_builder_check_required@@Base>
   1c040:	cmp	r0, #0
   1c044:	beq	1c1f4 <test_nested_buffer_using_nest@@Base+0x374>
   1c048:	mov	r0, r4
   1c04c:	bl	20eac <flatcc_builder_end_table@@Base>
   1c050:	mov	r1, r0
   1c054:	mov	r0, r4
   1c058:	bl	1f0a8 <flatcc_builder_end_buffer@@Base>
   1c05c:	add	r1, sp, #12
   1c060:	mov	r0, r4
   1c064:	bl	22ad4 <flatcc_builder_get_direct_buffer@@Base>
   1c068:	mov	r4, r0
   1c06c:	ldr	r0, [pc, #488]	; 1c25c <test_nested_buffer_using_nest@@Base+0x3dc>
   1c070:	mov	r1, r4
   1c074:	ldr	r0, [pc, r0]
   1c078:	ldr	r2, [sp, #12]
   1c07c:	ldr	r3, [r0]
   1c080:	ldr	r0, [pc, #472]	; 1c260 <test_nested_buffer_using_nest@@Base+0x3e0>
   1c084:	add	r0, pc, r0
   1c088:	bl	1361c <test_type_aliases@@Base+0x554>
   1c08c:	cmp	r4, #0
   1c090:	beq	1c214 <test_nested_buffer_using_nest@@Base+0x394>
   1c094:	ldr	r0, [r4, #4]
   1c098:	movw	r7, #20301	; 0x4f4d
   1c09c:	movt	r7, #21326	; 0x534e
   1c0a0:	cmp	r0, r7
   1c0a4:	bne	1c214 <test_nested_buffer_using_nest@@Base+0x394>
   1c0a8:	ldr	r0, [r4]
   1c0ac:	ldr	r0, [r4, r0]!
   1c0b0:	mov	r6, r4
   1c0b4:	ldrh	r5, [r6, -r0]!
   1c0b8:	cmp	r5, #11
   1c0bc:	bls	1c220 <test_nested_buffer_using_nest@@Base+0x3a0>
   1c0c0:	ldrh	r0, [r6, #10]
   1c0c4:	cmp	r0, #0
   1c0c8:	beq	1c220 <test_nested_buffer_using_nest@@Base+0x3a0>
   1c0cc:	mov	r1, r4
   1c0d0:	ldr	r0, [r1, r0]!
   1c0d4:	add	r0, r1, r0
   1c0d8:	ldr	r1, [pc, #404]	; 1c274 <test_nested_buffer_using_nest@@Base+0x3f4>
   1c0dc:	add	r0, r0, #4
   1c0e0:	add	r1, pc, r1
   1c0e4:	bl	12e08 <strcmp@plt>
   1c0e8:	cmp	r0, #0
   1c0ec:	beq	1c118 <test_nested_buffer_using_nest@@Base+0x298>
   1c0f0:	ldr	r0, [pc, #384]	; 1c278 <test_nested_buffer_using_nest@@Base+0x3f8>
   1c0f4:	add	r0, pc, r0
   1c0f8:	b	1c104 <test_nested_buffer_using_nest@@Base+0x284>
   1c0fc:	ldr	r0, [pc, #328]	; 1c24c <test_nested_buffer_using_nest@@Base+0x3cc>
   1c100:	add	r0, pc, r0
   1c104:	bl	12e5c <puts@plt>
   1c108:	mvn	r1, #0
   1c10c:	mov	r0, r1
   1c110:	sub	sp, fp, #24
   1c114:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c118:	mov	r8, #0
   1c11c:	cmp	r5, #32
   1c120:	bcc	1c14c <test_nested_buffer_using_nest@@Base+0x2cc>
   1c124:	ldrh	r0, [r6, #30]
   1c128:	cmp	r0, #0
   1c12c:	beq	1c14c <test_nested_buffer_using_nest@@Base+0x2cc>
   1c130:	mov	r1, r4
   1c134:	ldr	r0, [r1, r0]!
   1c138:	add	r0, r1, r0
   1c13c:	ldr	r1, [r0, #8]
   1c140:	cmp	r1, r7
   1c144:	ldreq	r1, [r0, #4]!
   1c148:	addeq	r8, r0, r1
   1c14c:	ldrh	r1, [r6, #8]
   1c150:	ldr	r0, [pc, #292]	; 1c27c <test_nested_buffer_using_nest@@Base+0x3fc>
   1c154:	add	r0, pc, r0
   1c158:	cmp	r1, #0
   1c15c:	beq	1c104 <test_nested_buffer_using_nest@@Base+0x284>
   1c160:	add	r1, r4, r1
   1c164:	ldrh	r1, [r1]
   1c168:	cmp	r1, #10
   1c16c:	bne	1c104 <test_nested_buffer_using_nest@@Base+0x284>
   1c170:	cmp	r8, #0
   1c174:	beq	1c214 <test_nested_buffer_using_nest@@Base+0x394>
   1c178:	ldr	r0, [r8]
   1c17c:	mov	r4, r8
   1c180:	ldrh	r0, [r4, -r0]!	; <UNPREDICTABLE>
   1c184:	cmp	r0, #12
   1c188:	bcc	1c220 <test_nested_buffer_using_nest@@Base+0x3a0>
   1c18c:	ldrh	r0, [r4, #10]
   1c190:	cmp	r0, #0
   1c194:	beq	1c220 <test_nested_buffer_using_nest@@Base+0x3a0>
   1c198:	mov	r1, r8
   1c19c:	ldr	r0, [r1, r0]!
   1c1a0:	add	r0, r1, r0
   1c1a4:	ldr	r1, [pc, #212]	; 1c280 <test_nested_buffer_using_nest@@Base+0x400>
   1c1a8:	add	r0, r0, #4
   1c1ac:	add	r1, pc, r1
   1c1b0:	bl	12e08 <strcmp@plt>
   1c1b4:	cmp	r0, #0
   1c1b8:	beq	1c1c8 <test_nested_buffer_using_nest@@Base+0x348>
   1c1bc:	ldr	r0, [pc, #192]	; 1c284 <test_nested_buffer_using_nest@@Base+0x404>
   1c1c0:	add	r0, pc, r0
   1c1c4:	b	1c104 <test_nested_buffer_using_nest@@Base+0x284>
   1c1c8:	ldrh	r1, [r4, #6]
   1c1cc:	ldr	r0, [pc, #180]	; 1c288 <test_nested_buffer_using_nest@@Base+0x408>
   1c1d0:	add	r0, pc, r0
   1c1d4:	cmp	r1, #0
   1c1d8:	beq	1c104 <test_nested_buffer_using_nest@@Base+0x284>
   1c1dc:	add	r1, r8, r1
   1c1e0:	ldrh	r2, [r1]
   1c1e4:	mov	r1, #0
   1c1e8:	cmp	r2, #42	; 0x2a
   1c1ec:	bne	1c104 <test_nested_buffer_using_nest@@Base+0x284>
   1c1f0:	b	1c10c <test_nested_buffer_using_nest@@Base+0x28c>
   1c1f4:	ldr	r0, [pc, #144]	; 1c28c <test_nested_buffer_using_nest@@Base+0x40c>
   1c1f8:	ldr	r1, [pc, #144]	; 1c290 <test_nested_buffer_using_nest@@Base+0x410>
   1c1fc:	ldr	r3, [pc, #144]	; 1c294 <test_nested_buffer_using_nest@@Base+0x414>
   1c200:	mov	r2, #235	; 0xeb
   1c204:	add	r0, pc, r0
   1c208:	add	r1, pc, r1
   1c20c:	add	r3, pc, r3
   1c210:	bl	12f04 <__assert_fail@plt>
   1c214:	ldr	r0, [pc, #76]	; 1c268 <test_nested_buffer_using_nest@@Base+0x3e8>
   1c218:	add	r0, pc, r0
   1c21c:	b	1c228 <test_nested_buffer_using_nest@@Base+0x3a8>
   1c220:	ldr	r0, [pc, #60]	; 1c264 <test_nested_buffer_using_nest@@Base+0x3e4>
   1c224:	add	r0, pc, r0
   1c228:	ldr	r1, [pc, #60]	; 1c26c <test_nested_buffer_using_nest@@Base+0x3ec>
   1c22c:	ldr	r3, [pc, #60]	; 1c270 <test_nested_buffer_using_nest@@Base+0x3f0>
   1c230:	movw	r2, #699	; 0x2bb
   1c234:	add	r1, pc, r1
   1c238:	add	r3, pc, r3
   1c23c:	bl	12f04 <__assert_fail@plt>
   1c240:	andeq	r8, r0, r8, asr sp
   1c244:	andeq	r9, r0, lr, ror r8
   1c248:	ldrdeq	fp, [r0], -r8
   1c24c:	ldrdeq	fp, [r0], -r4
   1c250:	andeq	r8, r0, r0, lsl #25
   1c254:	andeq	r8, r0, ip, lsr ip
   1c258:			; <UNDEFINED> instruction: 0x0000bebc
   1c25c:	andeq	sp, r1, ip, ror #31
   1c260:	andeq	r9, r0, r4, ror #13
   1c264:	ldrdeq	r9, [r0], -r1
   1c268:	andeq	r9, r0, sl, lsr #13
   1c26c:			; <UNDEFINED> instruction: 0x000096b4
   1c270:	andeq	r9, r0, ip, ror #22
   1c274:	andeq	r8, r0, r0, ror #22
   1c278:	andeq	fp, r0, pc, asr ip
   1c27c:	ldrdeq	fp, [r0], -fp	; <UNPREDICTABLE>
   1c280:	muleq	r0, sl, r5
   1c284:	andeq	fp, r0, r2, asr fp
   1c288:	andeq	fp, r0, lr, lsl fp
   1c28c:	andeq	r9, r0, sp, lsl #19
   1c290:	andeq	r9, r0, r0, asr r8
   1c294:	andeq	r9, r0, r7, lsr #20

0001c298 <verify_include@@Base>:
   1c298:	mov	r0, #0
   1c29c:	bx	lr

0001c2a0 <test_struct_buffer@@Base>:
   1c2a0:	push	{r4, r5, r6, sl, fp, lr}
   1c2a4:	add	fp, sp, #16
   1c2a8:	sub	sp, sp, #112	; 0x70
   1c2ac:	mov	r4, r0
   1c2b0:	bl	1e2ac <flatcc_builder_reset@@Base>
   1c2b4:	mov	r0, r4
   1c2b8:	mov	r1, #32
   1c2bc:	mov	r2, #16
   1c2c0:	mov	r5, #16
   1c2c4:	bl	1f1e4 <flatcc_builder_start_struct@@Base>
   1c2c8:	mov	r6, #0
   1c2cc:	cmp	r0, #0
   1c2d0:	mov	r3, #0
   1c2d4:	beq	1c330 <test_struct_buffer@@Base+0x90>
   1c2d8:	movw	r1, #52428	; 0xcccc
   1c2dc:	movw	r2, #52429	; 0xcccd
   1c2e0:	mov	r3, #1065353216	; 0x3f800000
   1c2e4:	movt	r2, #52428	; 0xcccc
   1c2e8:	movt	r1, #16400	; 0x4010
   1c2ec:	str	r2, [r0, #16]
   1c2f0:	str	r1, [r0, #20]
   1c2f4:	mov	r1, #239	; 0xef
   1c2f8:	mov	r2, #1073741824	; 0x40000000
   1c2fc:	strb	r1, [r0, #28]
   1c300:	movw	r1, #2730	; 0xaaa
   1c304:	strh	r1, [r0, #26]
   1c308:	mov	r1, #8
   1c30c:	strb	r1, [r0, #24]
   1c310:	movw	r1, #0
   1c314:	str	r3, [r0]
   1c318:	str	r2, [r0, #4]
   1c31c:	movt	r1, #16448	; 0x4040
   1c320:	str	r1, [r0, #8]
   1c324:	mov	r0, r4
   1c328:	bl	1f2cc <flatcc_builder_end_struct@@Base>
   1c32c:	mov	r3, r0
   1c330:	stm	sp, {r5, r6}
   1c334:	mov	r0, r4
   1c338:	mov	r2, #0
   1c33c:	ldr	r1, [pc, #396]	; 1c4d0 <test_struct_buffer@@Base+0x230>
   1c340:	add	r1, pc, r1
   1c344:	bl	1eb1c <flatcc_builder_create_buffer@@Base>
   1c348:	mov	r0, r4
   1c34c:	bl	22a44 <flatcc_builder_get_buffer_size@@Base>
   1c350:	cmp	r0, #48	; 0x30
   1c354:	bne	1c484 <test_struct_buffer@@Base+0x1e4>
   1c358:	ldr	r0, [pc, #372]	; 1c4d4 <test_struct_buffer@@Base+0x234>
   1c35c:	mov	r1, #48	; 0x30
   1c360:	add	r0, pc, r0
   1c364:	bl	12e14 <printf@plt>
   1c368:	mov	r0, r4
   1c36c:	bl	22d98 <flatcc_builder_get_emit_context@@Base>
   1c370:	ldr	r0, [r0, #24]
   1c374:	cmp	r0, #48	; 0x30
   1c378:	bne	1c4a4 <test_struct_buffer@@Base+0x204>
   1c37c:	add	r1, sp, #12
   1c380:	mov	r0, r4
   1c384:	mov	r2, #100	; 0x64
   1c388:	bl	22b1c <flatcc_builder_copy_buffer@@Base>
   1c38c:	cmp	r0, #0
   1c390:	beq	1c45c <test_struct_buffer@@Base+0x1bc>
   1c394:	ldr	r0, [pc, #320]	; 1c4dc <test_struct_buffer@@Base+0x23c>
   1c398:	add	r4, sp, #12
   1c39c:	mov	r2, #48	; 0x30
   1c3a0:	mov	r1, r4
   1c3a4:	ldr	r0, [pc, r0]
   1c3a8:	ldr	r3, [r0]
   1c3ac:	ldr	r0, [pc, #300]	; 1c4e0 <test_struct_buffer@@Base+0x240>
   1c3b0:	add	r0, pc, r0
   1c3b4:	bl	1361c <test_type_aliases@@Base+0x554>
   1c3b8:	ldr	r0, [sp, #16]
   1c3bc:	movw	r1, #20301	; 0x4f4d
   1c3c0:	movt	r1, #21326	; 0x534e
   1c3c4:	cmp	r0, r1
   1c3c8:	bne	1c468 <test_struct_buffer@@Base+0x1c8>
   1c3cc:	ldr	r0, [sp, #12]
   1c3d0:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1c3d4:	add	r1, r4, r0
   1c3d8:	ldr	r0, [pc, #264]	; 1c4e8 <test_struct_buffer@@Base+0x248>
   1c3dc:	vldr	s0, [r1]
   1c3e0:	add	r0, pc, r0
   1c3e4:	vcmp.f32	s0, s2
   1c3e8:	vmrs	APSR_nzcv, fpscr
   1c3ec:	bne	1c470 <test_struct_buffer@@Base+0x1d0>
   1c3f0:	vldr	s0, [r1, #4]
   1c3f4:	vmov.f32	s2, #0	; 0x40000000  2.0
   1c3f8:	vcmp.f32	s0, s2
   1c3fc:	vmrs	APSR_nzcv, fpscr
   1c400:	bne	1c470 <test_struct_buffer@@Base+0x1d0>
   1c404:	vldr	s0, [r1, #8]
   1c408:	vmov.f32	s2, #8	; 0x40400000  3.0
   1c40c:	vcmp.f32	s0, s2
   1c410:	vmrs	APSR_nzcv, fpscr
   1c414:	bne	1c470 <test_struct_buffer@@Base+0x1d0>
   1c418:	vldr	d16, [pc, #168]	; 1c4c8 <test_struct_buffer@@Base+0x228>
   1c41c:	vldr	d17, [r1, #16]
   1c420:	vcmp.f64	d17, d16
   1c424:	vmrs	APSR_nzcv, fpscr
   1c428:	bne	1c470 <test_struct_buffer@@Base+0x1d0>
   1c42c:	ldrb	r2, [r1, #24]
   1c430:	cmp	r2, #8
   1c434:	bne	1c470 <test_struct_buffer@@Base+0x1d0>
   1c438:	ldrh	r2, [r1, #26]
   1c43c:	movw	r3, #2730	; 0xaaa
   1c440:	cmp	r2, r3
   1c444:	bne	1c470 <test_struct_buffer@@Base+0x1d0>
   1c448:	ldrb	r2, [r1, #28]
   1c44c:	mov	r1, #0
   1c450:	cmp	r2, #239	; 0xef
   1c454:	bne	1c470 <test_struct_buffer@@Base+0x1d0>
   1c458:	b	1c478 <test_struct_buffer@@Base+0x1d8>
   1c45c:	ldr	r0, [pc, #116]	; 1c4d8 <test_struct_buffer@@Base+0x238>
   1c460:	add	r0, pc, r0
   1c464:	b	1c470 <test_struct_buffer@@Base+0x1d0>
   1c468:	ldr	r0, [pc, #116]	; 1c4e4 <test_struct_buffer@@Base+0x244>
   1c46c:	add	r0, pc, r0
   1c470:	bl	12e5c <puts@plt>
   1c474:	mvn	r1, #0
   1c478:	mov	r0, r1
   1c47c:	sub	sp, fp, #16
   1c480:	pop	{r4, r5, r6, sl, fp, pc}
   1c484:	ldr	r0, [pc, #96]	; 1c4ec <test_struct_buffer@@Base+0x24c>
   1c488:	ldr	r1, [pc, #96]	; 1c4f0 <test_struct_buffer@@Base+0x250>
   1c48c:	ldr	r3, [pc, #96]	; 1c4f4 <test_struct_buffer@@Base+0x254>
   1c490:	movw	r2, #2339	; 0x923
   1c494:	add	r0, pc, r0
   1c498:	add	r1, pc, r1
   1c49c:	add	r3, pc, r3
   1c4a0:	bl	12f04 <__assert_fail@plt>
   1c4a4:	ldr	r0, [pc, #76]	; 1c4f8 <test_struct_buffer@@Base+0x258>
   1c4a8:	ldr	r1, [pc, #76]	; 1c4fc <test_struct_buffer@@Base+0x25c>
   1c4ac:	ldr	r3, [pc, #76]	; 1c500 <test_struct_buffer@@Base+0x260>
   1c4b0:	movw	r2, #2341	; 0x925
   1c4b4:	add	r0, pc, r0
   1c4b8:	add	r1, pc, r1
   1c4bc:	add	r3, pc, r3
   1c4c0:	bl	12f04 <__assert_fail@plt>
   1c4c4:	nop	{0}
   1c4c8:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1c4cc:	andsmi	ip, r0, ip, asr #25
   1c4d0:			; <UNDEFINED> instruction: 0x000088bc
   1c4d4:	andeq	r9, r0, r0, ror #8
   1c4d8:	andeq	fp, r0, lr, lsl #18
   1c4dc:			; <UNDEFINED> instruction: 0x0001dcbc
   1c4e0:	andeq	r9, r0, pc, lsr #9
   1c4e4:	andeq	fp, r0, lr, lsl #18
   1c4e8:	ldrdeq	fp, [r0], -r8
   1c4ec:	strdeq	r9, [r0], -r6
   1c4f0:	andeq	r8, r0, r0, asr r9
   1c4f4:	strdeq	r9, [r0], -r9	; <UNPREDICTABLE>
   1c4f8:	andeq	r9, r0, r9, lsr #6
   1c4fc:	andeq	r8, r0, r0, lsr r9
   1c500:	ldrdeq	r9, [r0], -r9	; <UNPREDICTABLE>
   1c504:	nop	{0}

0001c508 <test_typed_struct_buffer@@Base>:
   1c508:	push	{r4, r5, r6, sl, fp, lr}
   1c50c:	add	fp, sp, #16
   1c510:	sub	sp, sp, #112	; 0x70
   1c514:	mov	r4, r0
   1c518:	bl	1e2ac <flatcc_builder_reset@@Base>
   1c51c:	mov	r0, r4
   1c520:	mov	r1, #32
   1c524:	mov	r2, #16
   1c528:	mov	r5, #16
   1c52c:	bl	1f1e4 <flatcc_builder_start_struct@@Base>
   1c530:	mov	r6, #0
   1c534:	cmp	r0, #0
   1c538:	mov	r3, #0
   1c53c:	beq	1c598 <test_typed_struct_buffer@@Base+0x90>
   1c540:	movw	r1, #52428	; 0xcccc
   1c544:	movw	r2, #52429	; 0xcccd
   1c548:	mov	r3, #1065353216	; 0x3f800000
   1c54c:	movt	r2, #52428	; 0xcccc
   1c550:	movt	r1, #16400	; 0x4010
   1c554:	str	r2, [r0, #16]
   1c558:	str	r1, [r0, #20]
   1c55c:	mov	r1, #239	; 0xef
   1c560:	mov	r2, #1073741824	; 0x40000000
   1c564:	strb	r1, [r0, #28]
   1c568:	movw	r1, #2730	; 0xaaa
   1c56c:	strh	r1, [r0, #26]
   1c570:	mov	r1, #8
   1c574:	strb	r1, [r0, #24]
   1c578:	movw	r1, #0
   1c57c:	str	r3, [r0]
   1c580:	str	r2, [r0, #4]
   1c584:	movt	r1, #16448	; 0x4040
   1c588:	str	r1, [r0, #8]
   1c58c:	mov	r0, r4
   1c590:	bl	1f2cc <flatcc_builder_end_struct@@Base>
   1c594:	mov	r3, r0
   1c598:	stm	sp, {r5, r6}
   1c59c:	mov	r0, r4
   1c5a0:	mov	r2, #0
   1c5a4:	ldr	r1, [pc, #516]	; 1c7b0 <test_typed_struct_buffer@@Base+0x2a8>
   1c5a8:	add	r1, pc, r1
   1c5ac:	bl	1eb1c <flatcc_builder_create_buffer@@Base>
   1c5b0:	mov	r0, r4
   1c5b4:	bl	22a44 <flatcc_builder_get_buffer_size@@Base>
   1c5b8:	cmp	r0, #48	; 0x30
   1c5bc:	bne	1c764 <test_typed_struct_buffer@@Base+0x25c>
   1c5c0:	ldr	r0, [pc, #492]	; 1c7b4 <test_typed_struct_buffer@@Base+0x2ac>
   1c5c4:	mov	r1, #48	; 0x30
   1c5c8:	add	r0, pc, r0
   1c5cc:	bl	12e14 <printf@plt>
   1c5d0:	mov	r0, r4
   1c5d4:	bl	22d98 <flatcc_builder_get_emit_context@@Base>
   1c5d8:	ldr	r0, [r0, #24]
   1c5dc:	cmp	r0, #48	; 0x30
   1c5e0:	bne	1c784 <test_typed_struct_buffer@@Base+0x27c>
   1c5e4:	add	r1, sp, #12
   1c5e8:	mov	r0, r4
   1c5ec:	mov	r2, #100	; 0x64
   1c5f0:	bl	22b1c <flatcc_builder_copy_buffer@@Base>
   1c5f4:	cmp	r0, #0
   1c5f8:	beq	1c664 <test_typed_struct_buffer@@Base+0x15c>
   1c5fc:	ldr	r0, [pc, #440]	; 1c7bc <test_typed_struct_buffer@@Base+0x2b4>
   1c600:	add	r1, sp, #12
   1c604:	mov	r2, #48	; 0x30
   1c608:	ldr	r0, [pc, r0]
   1c60c:	ldr	r3, [r0]
   1c610:	ldr	r0, [pc, #424]	; 1c7c0 <test_typed_struct_buffer@@Base+0x2b8>
   1c614:	add	r0, pc, r0
   1c618:	bl	1361c <test_type_aliases@@Base+0x554>
   1c61c:	ldr	r0, [sp, #16]
   1c620:	movw	r4, #16082	; 0x3ed2
   1c624:	movt	r4, #43253	; 0xa8f5
   1c628:	cmp	r0, r4
   1c62c:	bne	1c670 <test_typed_struct_buffer@@Base+0x168>
   1c630:	mov	r0, #16
   1c634:	add	r5, sp, #12
   1c638:	mov	r1, #48	; 0x30
   1c63c:	mov	r2, r4
   1c640:	mov	r3, #32
   1c644:	str	r0, [sp]
   1c648:	mov	r0, r5
   1c64c:	bl	23ee4 <flatcc_verify_struct_as_typed_root@@Base>
   1c650:	cmp	r0, #0
   1c654:	beq	1c68c <test_typed_struct_buffer@@Base+0x184>
   1c658:	ldr	r0, [pc, #360]	; 1c7c8 <test_typed_struct_buffer@@Base+0x2c0>
   1c65c:	add	r0, pc, r0
   1c660:	b	1c678 <test_typed_struct_buffer@@Base+0x170>
   1c664:	ldr	r0, [pc, #332]	; 1c7b8 <test_typed_struct_buffer@@Base+0x2b0>
   1c668:	add	r0, pc, r0
   1c66c:	b	1c678 <test_typed_struct_buffer@@Base+0x170>
   1c670:	ldr	r0, [pc, #332]	; 1c7c4 <test_typed_struct_buffer@@Base+0x2bc>
   1c674:	add	r0, pc, r0
   1c678:	bl	12e5c <puts@plt>
   1c67c:	mvn	r1, #0
   1c680:	mov	r0, r1
   1c684:	sub	sp, fp, #16
   1c688:	pop	{r4, r5, r6, sl, fp, pc}
   1c68c:	ldr	r0, [sp, #16]
   1c690:	cmp	r0, r4
   1c694:	bne	1c6cc <test_typed_struct_buffer@@Base+0x1c4>
   1c698:	ldr	r6, [sp, #12]
   1c69c:	mov	r0, #16
   1c6a0:	mov	r1, #48	; 0x30
   1c6a4:	mov	r2, r4
   1c6a8:	mov	r3, #32
   1c6ac:	str	r0, [sp]
   1c6b0:	mov	r0, r5
   1c6b4:	bl	23ee4 <flatcc_verify_struct_as_typed_root@@Base>
   1c6b8:	cmp	r0, #0
   1c6bc:	beq	1c6d8 <test_typed_struct_buffer@@Base+0x1d0>
   1c6c0:	ldr	r0, [pc, #264]	; 1c7d0 <test_typed_struct_buffer@@Base+0x2c8>
   1c6c4:	add	r0, pc, r0
   1c6c8:	b	1c678 <test_typed_struct_buffer@@Base+0x170>
   1c6cc:	ldr	r0, [pc, #248]	; 1c7cc <test_typed_struct_buffer@@Base+0x2c4>
   1c6d0:	add	r0, pc, r0
   1c6d4:	b	1c678 <test_typed_struct_buffer@@Base+0x170>
   1c6d8:	add	r1, r5, r6
   1c6dc:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1c6e0:	vldr	s0, [r1]
   1c6e4:	ldr	r0, [pc, #232]	; 1c7d4 <test_typed_struct_buffer@@Base+0x2cc>
   1c6e8:	add	r0, pc, r0
   1c6ec:	vcmp.f32	s0, s2
   1c6f0:	vmrs	APSR_nzcv, fpscr
   1c6f4:	bne	1c678 <test_typed_struct_buffer@@Base+0x170>
   1c6f8:	vldr	s0, [r1, #4]
   1c6fc:	vmov.f32	s2, #0	; 0x40000000  2.0
   1c700:	vcmp.f32	s0, s2
   1c704:	vmrs	APSR_nzcv, fpscr
   1c708:	bne	1c678 <test_typed_struct_buffer@@Base+0x170>
   1c70c:	vldr	s0, [r1, #8]
   1c710:	vmov.f32	s2, #8	; 0x40400000  3.0
   1c714:	vcmp.f32	s0, s2
   1c718:	vmrs	APSR_nzcv, fpscr
   1c71c:	bne	1c678 <test_typed_struct_buffer@@Base+0x170>
   1c720:	vldr	d16, [pc, #128]	; 1c7a8 <test_typed_struct_buffer@@Base+0x2a0>
   1c724:	vldr	d17, [r1, #16]
   1c728:	vcmp.f64	d17, d16
   1c72c:	vmrs	APSR_nzcv, fpscr
   1c730:	bne	1c678 <test_typed_struct_buffer@@Base+0x170>
   1c734:	ldrb	r2, [r1, #24]
   1c738:	cmp	r2, #8
   1c73c:	bne	1c678 <test_typed_struct_buffer@@Base+0x170>
   1c740:	ldrh	r2, [r1, #26]
   1c744:	movw	r3, #2730	; 0xaaa
   1c748:	cmp	r2, r3
   1c74c:	bne	1c678 <test_typed_struct_buffer@@Base+0x170>
   1c750:	ldrb	r2, [r1, #28]
   1c754:	mov	r1, #0
   1c758:	cmp	r2, #239	; 0xef
   1c75c:	bne	1c678 <test_typed_struct_buffer@@Base+0x170>
   1c760:	b	1c680 <test_typed_struct_buffer@@Base+0x178>
   1c764:	ldr	r0, [pc, #108]	; 1c7d8 <test_typed_struct_buffer@@Base+0x2d0>
   1c768:	ldr	r1, [pc, #108]	; 1c7dc <test_typed_struct_buffer@@Base+0x2d4>
   1c76c:	ldr	r3, [pc, #108]	; 1c7e0 <test_typed_struct_buffer@@Base+0x2d8>
   1c770:	movw	r2, #2388	; 0x954
   1c774:	add	r0, pc, r0
   1c778:	add	r1, pc, r1
   1c77c:	add	r3, pc, r3
   1c780:	bl	12f04 <__assert_fail@plt>
   1c784:	ldr	r0, [pc, #88]	; 1c7e4 <test_typed_struct_buffer@@Base+0x2dc>
   1c788:	ldr	r1, [pc, #88]	; 1c7e8 <test_typed_struct_buffer@@Base+0x2e0>
   1c78c:	ldr	r3, [pc, #88]	; 1c7ec <test_typed_struct_buffer@@Base+0x2e4>
   1c790:	movw	r2, #2390	; 0x956
   1c794:	add	r0, pc, r0
   1c798:	add	r1, pc, r1
   1c79c:	add	r3, pc, r3
   1c7a0:	bl	12f04 <__assert_fail@plt>
   1c7a4:	nop	{0}
   1c7a8:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1c7ac:	andsmi	ip, r0, ip, asr #25
   1c7b0:	andeq	r9, r0, sl, asr #5
   1c7b4:	strdeq	r9, [r0], -r8
   1c7b8:	andeq	fp, r0, r6, lsl #14
   1c7bc:	andeq	sp, r1, r8, asr sl
   1c7c0:	andeq	r9, r0, r5, asr #4
   1c7c4:	andeq	fp, r0, r6, lsl #14
   1c7c8:	muleq	r0, sl, r7
   1c7cc:	andeq	fp, r0, fp, asr #13
   1c7d0:	andeq	fp, r0, ip, lsl #14
   1c7d4:	ldrdeq	fp, [r0], -r0
   1c7d8:	andeq	r9, r0, r6, lsl r0
   1c7dc:	andeq	r8, r0, r0, ror r6
   1c7e0:	andeq	r9, r0, ip, lsr #1
   1c7e4:	andeq	r9, r0, r9, asr #32
   1c7e8:	andeq	r8, r0, r0, asr r6
   1c7ec:	andeq	r9, r0, ip, lsl #1

0001c7f0 <gen_monster_benchmark@@Base>:
   1c7f0:	push	{r4, r5, fp, lr}
   1c7f4:	add	fp, sp, #8
   1c7f8:	sub	sp, sp, #24
   1c7fc:	mov	r4, r0
   1c800:	ldr	r0, [pc, #548]	; 1ca2c <gen_monster_benchmark@@Base+0x23c>
   1c804:	add	r0, pc, r0
   1c808:	vldr	d16, [r0]
   1c80c:	movw	r0, #2312	; 0x908
   1c810:	strh	r0, [sp, #16]
   1c814:	mov	r0, r4
   1c818:	vstr	d16, [sp, #8]
   1c81c:	bl	1e2ac <flatcc_builder_reset@@Base>
   1c820:	ldr	r1, [pc, #520]	; 1ca30 <gen_monster_benchmark@@Base+0x240>
   1c824:	mov	r0, r4
   1c828:	mov	r2, #0
   1c82c:	mov	r3, #0
   1c830:	add	r1, pc, r1
   1c834:	bl	1eea8 <flatcc_builder_start_buffer@@Base>
   1c838:	cmp	r0, #0
   1c83c:	bne	1c84c <gen_monster_benchmark@@Base+0x5c>
   1c840:	mov	r0, r4
   1c844:	mov	r1, #36	; 0x24
   1c848:	bl	20484 <flatcc_builder_start_table@@Base>
   1c84c:	mov	r0, r4
   1c850:	mov	r1, #2
   1c854:	mov	r2, #2
   1c858:	mov	r3, #2
   1c85c:	bl	21920 <flatcc_builder_table_add@@Base>
   1c860:	cmp	r0, #0
   1c864:	mov	r2, #32
   1c868:	mov	r3, #16
   1c86c:	movne	r1, #80	; 0x50
   1c870:	strhne	r1, [r0]
   1c874:	mov	r0, r4
   1c878:	mov	r1, #0
   1c87c:	bl	21920 <flatcc_builder_table_add@@Base>
   1c880:	movw	r1, #52429	; 0xcccd
   1c884:	mov	r3, #1065353216	; 0x3f800000
   1c888:	mov	r2, #1073741824	; 0x40000000
   1c88c:	movt	r1, #49228	; 0xc04c
   1c890:	str	r3, [r0]
   1c894:	str	r2, [r0, #4]
   1c898:	str	r1, [r0, #8]
   1c89c:	mov	r0, r4
   1c8a0:	ldr	r1, [pc, #396]	; 1ca34 <gen_monster_benchmark@@Base+0x244>
   1c8a4:	add	r1, pc, r1
   1c8a8:	bl	227bc <flatcc_builder_create_string_str@@Base>
   1c8ac:	cmp	r0, #0
   1c8b0:	beq	1c8cc <gen_monster_benchmark@@Base+0xdc>
   1c8b4:	mov	r5, r0
   1c8b8:	mov	r0, r4
   1c8bc:	mov	r1, #3
   1c8c0:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1c8c4:	cmp	r0, #0
   1c8c8:	strne	r5, [r0]
   1c8cc:	mvn	r0, #0
   1c8d0:	mov	r1, #1
   1c8d4:	mov	r2, #10
   1c8d8:	mov	r3, #1
   1c8dc:	str	r1, [sp]
   1c8e0:	str	r0, [sp, #4]
   1c8e4:	add	r1, sp, #8
   1c8e8:	mov	r0, r4
   1c8ec:	bl	21070 <flatcc_builder_create_vector@@Base>
   1c8f0:	cmp	r0, #0
   1c8f4:	beq	1c910 <gen_monster_benchmark@@Base+0x120>
   1c8f8:	mov	r5, r0
   1c8fc:	mov	r0, r4
   1c900:	mov	r1, #5
   1c904:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1c908:	cmp	r0, #0
   1c90c:	strne	r5, [r0]
   1c910:	mov	r0, r4
   1c914:	mov	r1, #4
   1c918:	mov	r2, #2
   1c91c:	mvn	r3, #-1073741824	; 0xc0000000
   1c920:	bl	1ff74 <flatcc_builder_start_vector@@Base>
   1c924:	mov	r0, r4
   1c928:	mov	r1, #1
   1c92c:	bl	1f3b0 <flatcc_builder_extend_vector@@Base>
   1c930:	mov	r1, #32
   1c934:	strb	r1, [r0, #2]
   1c938:	mov	r1, #16
   1c93c:	strh	r1, [r0]
   1c940:	mov	r0, r4
   1c944:	mov	r1, #2
   1c948:	bl	1f3b0 <flatcc_builder_extend_vector@@Base>
   1c94c:	mov	r1, #96	; 0x60
   1c950:	strb	r1, [r0, #6]
   1c954:	mov	r1, #80	; 0x50
   1c958:	strh	r1, [r0, #4]
   1c95c:	mov	r1, #64	; 0x40
   1c960:	strb	r1, [r0, #2]
   1c964:	mov	r1, #48	; 0x30
   1c968:	strh	r1, [r0]
   1c96c:	mov	r0, r4
   1c970:	mov	r1, #1
   1c974:	bl	1f3b0 <flatcc_builder_extend_vector@@Base>
   1c978:	cmp	r0, #0
   1c97c:	movne	r1, #128	; 0x80
   1c980:	strbne	r1, [r0, #2]
   1c984:	movne	r1, #112	; 0x70
   1c988:	strhne	r1, [r0]
   1c98c:	mov	r0, r4
   1c990:	mov	r1, #1
   1c994:	bl	1f3b0 <flatcc_builder_extend_vector@@Base>
   1c998:	cmp	r0, #0
   1c99c:	movwne	r1, #401	; 0x191
   1c9a0:	movtne	r1, #145	; 0x91
   1c9a4:	strne	r1, [r0]
   1c9a8:	mov	r0, r4
   1c9ac:	bl	211ec <flatcc_builder_end_vector@@Base>
   1c9b0:	cmp	r0, #0
   1c9b4:	beq	1c9d0 <gen_monster_benchmark@@Base+0x1e0>
   1c9b8:	mov	r5, r0
   1c9bc:	mov	r0, r4
   1c9c0:	mov	r1, #9
   1c9c4:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   1c9c8:	cmp	r0, #0
   1c9cc:	strne	r5, [r0]
   1c9d0:	ldr	r1, [pc, #96]	; 1ca38 <gen_monster_benchmark@@Base+0x248>
   1c9d4:	mov	r0, r4
   1c9d8:	mov	r2, #1
   1c9dc:	add	r1, pc, r1
   1c9e0:	bl	20e20 <flatcc_builder_check_required@@Base>
   1c9e4:	cmp	r0, #0
   1c9e8:	beq	1ca0c <gen_monster_benchmark@@Base+0x21c>
   1c9ec:	mov	r0, r4
   1c9f0:	bl	20eac <flatcc_builder_end_table@@Base>
   1c9f4:	mov	r1, r0
   1c9f8:	mov	r0, r4
   1c9fc:	bl	1f0a8 <flatcc_builder_end_buffer@@Base>
   1ca00:	mov	r0, #0
   1ca04:	sub	sp, fp, #8
   1ca08:	pop	{r4, r5, fp, pc}
   1ca0c:	ldr	r0, [pc, #40]	; 1ca3c <gen_monster_benchmark@@Base+0x24c>
   1ca10:	ldr	r1, [pc, #40]	; 1ca40 <gen_monster_benchmark@@Base+0x250>
   1ca14:	ldr	r3, [pc, #40]	; 1ca44 <gen_monster_benchmark@@Base+0x254>
   1ca18:	mov	r2, #235	; 0xeb
   1ca1c:	add	r0, pc, r0
   1ca20:	add	r1, pc, r1
   1ca24:	add	r3, pc, r3
   1ca28:	bl	12f04 <__assert_fail@plt>
   1ca2c:	andeq	fp, r0, r4, ror #13
   1ca30:	andeq	r8, r0, ip, asr #7
   1ca34:	muleq	r0, ip, r3
   1ca38:	andeq	fp, r0, r8, lsl r5
   1ca3c:	andeq	r9, r0, r5, ror r1
   1ca40:	andeq	r9, r0, r8, lsr r0
   1ca44:	andeq	r9, r0, pc, lsl #4

0001ca48 <time_monster@@Base>:
   1ca48:	push	{r4, r5, r6, r7, fp, lr}
   1ca4c:	add	fp, sp, #16
   1ca50:	vpush	{d8-d9}
   1ca54:	sub	sp, sp, #8
   1ca58:	mov	r4, r0
   1ca5c:	ldr	r0, [pc, #268]	; 1cb70 <time_monster@@Base+0x128>
   1ca60:	add	r0, pc, r0
   1ca64:	bl	12e5c <puts@plt>
   1ca68:	mov	r0, sp
   1ca6c:	mov	r1, #0
   1ca70:	bl	12e50 <gettimeofday@plt>
   1ca74:	ldr	r0, [pc, #248]	; 1cb74 <time_monster@@Base+0x12c>
   1ca78:	ldr	r0, [pc, r0]
   1ca7c:	ldr	r5, [pc, #244]	; 1cb78 <time_monster@@Base+0x130>
   1ca80:	cmp	r0, #0
   1ca84:	add	r5, pc, r5
   1ca88:	beq	1ca98 <time_monster@@Base+0x50>
   1ca8c:	ldr	r1, [r5, #4]
   1ca90:	ldr	r2, [sp]
   1ca94:	b	1caa4 <time_monster@@Base+0x5c>
   1ca98:	ldm	sp, {r0, r1}
   1ca9c:	mov	r2, r0
   1caa0:	strd	r0, [r5]
   1caa4:	ldr	r3, [sp, #4]
   1caa8:	vldr	d8, [pc, #184]	; 1cb68 <time_monster@@Base+0x120>
   1caac:	movw	r7, #16960	; 0x4240
   1cab0:	sub	r6, r2, r0
   1cab4:	movt	r7, #15
   1cab8:	sub	r1, r3, r1
   1cabc:	vmov	s0, r1
   1cac0:	vcvt.f64.s32	d16, s0
   1cac4:	vdiv.f64	d9, d16, d8
   1cac8:	mov	r0, r4
   1cacc:	bl	1c7f0 <gen_monster_benchmark@@Base>
   1cad0:	subs	r7, r7, #1
   1cad4:	bne	1cac8 <time_monster@@Base+0x80>
   1cad8:	mov	r0, r4
   1cadc:	bl	22a44 <flatcc_builder_get_buffer_size@@Base>
   1cae0:	mov	r4, r0
   1cae4:	mov	r0, sp
   1cae8:	mov	r1, #0
   1caec:	bl	12e50 <gettimeofday@plt>
   1caf0:	vmov	s0, r6
   1caf4:	vcvt.f64.s32	d16, s0
   1caf8:	ldr	r0, [pc, #124]	; 1cb7c <time_monster@@Base+0x134>
   1cafc:	ldr	r0, [pc, r0]
   1cb00:	vadd.f64	d0, d9, d16
   1cb04:	cmp	r0, #0
   1cb08:	beq	1cb18 <time_monster@@Base+0xd0>
   1cb0c:	ldr	r1, [r5, #4]
   1cb10:	ldr	r2, [sp]
   1cb14:	b	1cb24 <time_monster@@Base+0xdc>
   1cb18:	ldm	sp, {r0, r1}
   1cb1c:	mov	r2, r0
   1cb20:	strd	r0, [r5]
   1cb24:	sub	r0, r2, r0
   1cb28:	ldr	r2, [sp, #4]
   1cb2c:	vmov	s4, r0
   1cb30:	sub	r1, r2, r1
   1cb34:	vmov	s2, r1
   1cb38:	mov	r1, r4
   1cb3c:	vcvt.f64.s32	d16, s2
   1cb40:	vcvt.f64.s32	d17, s4
   1cb44:	ldr	r0, [pc, #52]	; 1cb80 <time_monster@@Base+0x138>
   1cb48:	add	r0, pc, r0
   1cb4c:	vdiv.f64	d16, d16, d8
   1cb50:	vadd.f64	d1, d16, d17
   1cb54:	bl	1cb88 <time_monster@@Base+0x140>
   1cb58:	mov	r0, #0
   1cb5c:	sub	sp, fp, #32
   1cb60:	vpop	{d8-d9}
   1cb64:	pop	{r4, r5, r6, r7, fp, pc}
   1cb68:	andeq	r0, r0, r0
   1cb6c:	smlawbmi	lr, r0, r4, r8
   1cb70:			; <UNDEFINED> instruction: 0x0000b3b8
   1cb74:	andeq	sp, r1, r8, lsl #12
   1cb78:	strdeq	sp, [r1], -ip
   1cb7c:	andeq	sp, r1, r4, lsl #11
   1cb80:	andeq	r8, r0, pc, lsr #26
   1cb84:	nop	{0}
   1cb88:	push	{r4, sl, fp, lr}
   1cb8c:	add	fp, sp, #8
   1cb90:	vpush	{d8-d9}
   1cb94:	mov	r4, r1
   1cb98:	mov	r1, r0
   1cb9c:	ldr	r0, [pc, #316]	; 1cce0 <time_monster@@Base+0x298>
   1cba0:	vmov.f64	d8, d1
   1cba4:	vmov.f64	d9, d0
   1cba8:	add	r0, pc, r0
   1cbac:	bl	12e14 <printf@plt>
   1cbb0:	vsub.f64	d9, d8, d9
   1cbb4:	ldr	r0, [pc, #296]	; 1cce4 <time_monster@@Base+0x29c>
   1cbb8:	add	r0, pc, r0
   1cbbc:	vmov	r2, r3, d9
   1cbc0:	bl	12e14 <printf@plt>
   1cbc4:	ldr	r0, [pc, #284]	; 1cce8 <time_monster@@Base+0x2a0>
   1cbc8:	movw	r1, #16960	; 0x4240
   1cbcc:	movt	r1, #15
   1cbd0:	add	r0, pc, r0
   1cbd4:	bl	12e14 <printf@plt>
   1cbd8:	ldr	r0, [pc, #268]	; 1ccec <time_monster@@Base+0x2a4>
   1cbdc:	mov	r1, r4
   1cbe0:	add	r0, pc, r0
   1cbe4:	bl	12e14 <printf@plt>
   1cbe8:	vmov	s0, r4
   1cbec:	vldr	d8, [pc, #212]	; 1ccc8 <time_monster@@Base+0x280>
   1cbf0:	vcvt.f64.u32	d16, s0
   1cbf4:	ldr	r0, [pc, #244]	; 1ccf0 <time_monster@@Base+0x2a8>
   1cbf8:	add	r0, pc, r0
   1cbfc:	vmul.f64	d16, d16, d8
   1cc00:	vdiv.f64	d16, d16, d8
   1cc04:	vdiv.f64	d16, d16, d9
   1cc08:	vmov	r2, r3, d16
   1cc0c:	bl	12e14 <printf@plt>
   1cc10:	vdiv.f64	d16, d8, d9
   1cc14:	ldr	r0, [pc, #216]	; 1ccf4 <time_monster@@Base+0x2ac>
   1cc18:	add	r0, pc, r0
   1cc1c:	vmov	r2, r3, d16
   1cc20:	bl	12e14 <printf@plt>
   1cc24:	vmov.f64	d16, #112	; 0x3f800000  1.0
   1cc28:	ldr	r0, [pc, #200]	; 1ccf8 <time_monster@@Base+0x2b0>
   1cc2c:	ldr	r1, [pc, #200]	; 1ccfc <time_monster@@Base+0x2b4>
   1cc30:	vdiv.f64	d16, d16, d9
   1cc34:	add	r0, pc, r0
   1cc38:	add	r1, pc, r1
   1cc3c:	vmov	r2, r3, d16
   1cc40:	bl	12e14 <printf@plt>
   1cc44:	vldr	d17, [pc, #132]	; 1ccd0 <time_monster@@Base+0x288>
   1cc48:	vldr	d18, [pc, #136]	; 1ccd8 <time_monster@@Base+0x290>
   1cc4c:	vmul.f64	d16, d9, d17
   1cc50:	vdiv.f64	d16, d16, d8
   1cc54:	vcmpe.f64	d16, d18
   1cc58:	vmrs	APSR_nzcv, fpscr
   1cc5c:	bpl	1cc70 <time_monster@@Base+0x228>
   1cc60:	ldr	r0, [pc, #152]	; 1cd00 <time_monster@@Base+0x2b8>
   1cc64:	vmov	r2, r3, d16
   1cc68:	add	r0, pc, r0
   1cc6c:	b	1ccb8 <time_monster@@Base+0x270>
   1cc70:	vcmpe.f64	d16, d8
   1cc74:	vmrs	APSR_nzcv, fpscr
   1cc78:	bpl	1cc8c <time_monster@@Base+0x244>
   1cc7c:	vdiv.f64	d16, d16, d18
   1cc80:	ldr	r0, [pc, #124]	; 1cd04 <time_monster@@Base+0x2bc>
   1cc84:	add	r0, pc, r0
   1cc88:	b	1ccb4 <time_monster@@Base+0x26c>
   1cc8c:	vcmpe.f64	d16, d17
   1cc90:	vmrs	APSR_nzcv, fpscr
   1cc94:	bpl	1cca8 <time_monster@@Base+0x260>
   1cc98:	vdiv.f64	d16, d16, d8
   1cc9c:	ldr	r0, [pc, #100]	; 1cd08 <time_monster@@Base+0x2c0>
   1cca0:	add	r0, pc, r0
   1cca4:	b	1ccb4 <time_monster@@Base+0x26c>
   1cca8:	vdiv.f64	d16, d16, d17
   1ccac:	ldr	r0, [pc, #88]	; 1cd0c <time_monster@@Base+0x2c4>
   1ccb0:	add	r0, pc, r0
   1ccb4:	vmov	r2, r3, d16
   1ccb8:	vpop	{d8-d9}
   1ccbc:	pop	{r4, sl, fp, lr}
   1ccc0:	b	12e14 <printf@plt>
   1ccc4:	nop	{0}
   1ccc8:	andeq	r0, r0, r0
   1cccc:	smlawbmi	lr, r0, r4, r8
   1ccd0:	andeq	r0, r0, r0
   1ccd4:	bicmi	ip, sp, r5, ror #26
   1ccd8:	andeq	r0, r0, r0
   1ccdc:	addmi	r4, pc, r0
   1cce0:	andeq	r9, r0, fp, asr #26
   1cce4:	andeq	r9, r0, sl, asr #26
   1cce8:	andeq	r9, r0, sl, asr #26
   1ccec:	andeq	r9, r0, sl, asr #26
   1ccf0:	andeq	r9, r0, r5, asr #26
   1ccf4:	andeq	r9, r0, sp, lsr sp
   1ccf8:	andeq	r9, r0, r2, asr #26
   1ccfc:	andeq	r8, r0, r5, asr ip
   1cd00:	andeq	r9, r0, r2, lsr sp
   1cd04:	andeq	r9, r0, lr, lsr #26
   1cd08:	andeq	r9, r0, sl, lsr #26
   1cd0c:	andeq	r9, r0, r2, lsr sp

0001cd10 <gen_struct_buffer_benchmark@@Base>:
   1cd10:	push	{r4, r5, r6, sl, fp, lr}
   1cd14:	add	fp, sp, #16
   1cd18:	sub	sp, sp, #8
   1cd1c:	mov	r4, r0
   1cd20:	bl	1e2ac <flatcc_builder_reset@@Base>
   1cd24:	mov	r0, r4
   1cd28:	mov	r1, #32
   1cd2c:	mov	r2, #16
   1cd30:	mov	r5, #16
   1cd34:	bl	1f1e4 <flatcc_builder_start_struct@@Base>
   1cd38:	mov	r6, #0
   1cd3c:	cmp	r0, #0
   1cd40:	mov	r3, #0
   1cd44:	beq	1cda0 <gen_struct_buffer_benchmark@@Base+0x90>
   1cd48:	movw	r1, #52428	; 0xcccc
   1cd4c:	movw	r2, #52429	; 0xcccd
   1cd50:	mov	r3, #1065353216	; 0x3f800000
   1cd54:	movt	r2, #52428	; 0xcccc
   1cd58:	movt	r1, #16400	; 0x4010
   1cd5c:	str	r2, [r0, #16]
   1cd60:	str	r1, [r0, #20]
   1cd64:	mov	r1, #239	; 0xef
   1cd68:	mov	r2, #1073741824	; 0x40000000
   1cd6c:	strb	r1, [r0, #28]
   1cd70:	movw	r1, #2730	; 0xaaa
   1cd74:	strh	r1, [r0, #26]
   1cd78:	mov	r1, #8
   1cd7c:	strb	r1, [r0, #24]
   1cd80:	movw	r1, #0
   1cd84:	str	r3, [r0]
   1cd88:	str	r2, [r0, #4]
   1cd8c:	movt	r1, #16448	; 0x4040
   1cd90:	str	r1, [r0, #8]
   1cd94:	mov	r0, r4
   1cd98:	bl	1f2cc <flatcc_builder_end_struct@@Base>
   1cd9c:	mov	r3, r0
   1cda0:	stm	sp, {r5, r6}
   1cda4:	mov	r0, r4
   1cda8:	mov	r2, #0
   1cdac:	ldr	r1, [pc, #180]	; 1ce68 <gen_struct_buffer_benchmark@@Base+0x158>
   1cdb0:	add	r1, pc, r1
   1cdb4:	bl	1eb1c <flatcc_builder_create_buffer@@Base>
   1cdb8:	mov	r0, r4
   1cdbc:	mov	r1, #0
   1cdc0:	bl	22ad4 <flatcc_builder_get_direct_buffer@@Base>
   1cdc4:	cmp	r0, #0
   1cdc8:	beq	1ce54 <gen_struct_buffer_benchmark@@Base+0x144>
   1cdcc:	ldr	r1, [r0]
   1cdd0:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1cdd4:	add	r0, r0, r1
   1cdd8:	vldr	s0, [r0]
   1cddc:	vcmp.f32	s0, s2
   1cde0:	vmrs	APSR_nzcv, fpscr
   1cde4:	bne	1ce54 <gen_struct_buffer_benchmark@@Base+0x144>
   1cde8:	vldr	s0, [r0, #4]
   1cdec:	vmov.f32	s2, #0	; 0x40000000  2.0
   1cdf0:	vcmp.f32	s0, s2
   1cdf4:	vmrs	APSR_nzcv, fpscr
   1cdf8:	bne	1ce54 <gen_struct_buffer_benchmark@@Base+0x144>
   1cdfc:	vldr	s0, [r0, #8]
   1ce00:	vmov.f32	s2, #8	; 0x40400000  3.0
   1ce04:	vcmp.f32	s0, s2
   1ce08:	vmrs	APSR_nzcv, fpscr
   1ce0c:	bne	1ce54 <gen_struct_buffer_benchmark@@Base+0x144>
   1ce10:	vldr	d16, [pc, #72]	; 1ce60 <gen_struct_buffer_benchmark@@Base+0x150>
   1ce14:	vldr	d17, [r0, #16]
   1ce18:	vcmp.f64	d17, d16
   1ce1c:	vmrs	APSR_nzcv, fpscr
   1ce20:	bne	1ce54 <gen_struct_buffer_benchmark@@Base+0x144>
   1ce24:	ldrb	r1, [r0, #24]
   1ce28:	cmp	r1, #8
   1ce2c:	bne	1ce54 <gen_struct_buffer_benchmark@@Base+0x144>
   1ce30:	ldrh	r1, [r0, #26]
   1ce34:	movw	r2, #2730	; 0xaaa
   1ce38:	cmp	r1, r2
   1ce3c:	bne	1ce54 <gen_struct_buffer_benchmark@@Base+0x144>
   1ce40:	ldrb	r0, [r0, #28]
   1ce44:	subs	r0, r0, #239	; 0xef
   1ce48:	mvnne	r0, #0
   1ce4c:	sub	sp, fp, #16
   1ce50:	pop	{r4, r5, r6, sl, fp, pc}
   1ce54:	mvn	r0, #0
   1ce58:	sub	sp, fp, #16
   1ce5c:	pop	{r4, r5, r6, sl, fp, pc}
   1ce60:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1ce64:	andsmi	ip, r0, ip, asr #25
   1ce68:	andeq	r7, r0, ip, asr #28
   1ce6c:	nop	{0}

0001ce70 <time_struct_buffer@@Base>:
   1ce70:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ce74:	add	fp, sp, #24
   1ce78:	vpush	{d8-d9}
   1ce7c:	sub	sp, sp, #8
   1ce80:	mov	r4, r0
   1ce84:	ldr	r0, [pc, #308]	; 1cfc0 <time_struct_buffer@@Base+0x150>
   1ce88:	add	r0, pc, r0
   1ce8c:	bl	12e5c <puts@plt>
   1ce90:	mov	r0, sp
   1ce94:	mov	r1, #0
   1ce98:	bl	12e50 <gettimeofday@plt>
   1ce9c:	ldr	r0, [pc, #288]	; 1cfc4 <time_struct_buffer@@Base+0x154>
   1cea0:	ldr	r0, [pc, r0]
   1cea4:	ldr	r8, [pc, #284]	; 1cfc8 <time_struct_buffer@@Base+0x158>
   1cea8:	cmp	r0, #0
   1ceac:	add	r8, pc, r8
   1ceb0:	beq	1cec0 <time_struct_buffer@@Base+0x50>
   1ceb4:	ldr	r1, [r8, #4]
   1ceb8:	ldr	r2, [sp]
   1cebc:	b	1cecc <time_struct_buffer@@Base+0x5c>
   1cec0:	ldm	sp, {r0, r1}
   1cec4:	mov	r2, r0
   1cec8:	strd	r0, [r8]
   1cecc:	ldr	r3, [sp, #4]
   1ced0:	vldr	d9, [pc, #224]	; 1cfb8 <time_struct_buffer@@Base+0x148>
   1ced4:	movw	r6, #16960	; 0x4240
   1ced8:	sub	r7, r2, r0
   1cedc:	mov	r5, #0
   1cee0:	movt	r6, #15
   1cee4:	sub	r1, r3, r1
   1cee8:	vmov	s0, r1
   1ceec:	vcvt.f64.s32	d16, s0
   1cef0:	vdiv.f64	d8, d16, d9
   1cef4:	mov	r0, r4
   1cef8:	bl	1cd10 <gen_struct_buffer_benchmark@@Base>
   1cefc:	orr	r5, r0, r5
   1cf00:	subs	r6, r6, #1
   1cf04:	bne	1cef4 <time_struct_buffer@@Base+0x84>
   1cf08:	mov	r0, sp
   1cf0c:	mov	r1, #0
   1cf10:	bl	12e50 <gettimeofday@plt>
   1cf14:	vmov	s0, r7
   1cf18:	vcvt.f64.s32	d16, s0
   1cf1c:	ldr	r0, [pc, #168]	; 1cfcc <time_struct_buffer@@Base+0x15c>
   1cf20:	ldr	r0, [pc, r0]
   1cf24:	cmp	r0, #0
   1cf28:	beq	1cf38 <time_struct_buffer@@Base+0xc8>
   1cf2c:	ldr	r1, [r8, #4]
   1cf30:	ldr	r2, [sp]
   1cf34:	b	1cf44 <time_struct_buffer@@Base+0xd4>
   1cf38:	ldm	sp, {r0, r1}
   1cf3c:	mov	r2, r0
   1cf40:	strd	r0, [r8]
   1cf44:	sub	r0, r2, r0
   1cf48:	ldr	r2, [sp, #4]
   1cf4c:	vadd.f64	d8, d8, d16
   1cf50:	vmov	s2, r0
   1cf54:	mov	r0, r4
   1cf58:	sub	r1, r2, r1
   1cf5c:	vmov	s0, r1
   1cf60:	vcvt.f64.s32	d16, s0
   1cf64:	vcvt.f64.s32	d17, s2
   1cf68:	vdiv.f64	d16, d16, d9
   1cf6c:	vadd.f64	d9, d16, d17
   1cf70:	bl	22a44 <flatcc_builder_get_buffer_size@@Base>
   1cf74:	mov	r4, r0
   1cf78:	cmp	r5, #0
   1cf7c:	beq	1cf8c <time_struct_buffer@@Base+0x11c>
   1cf80:	ldr	r0, [pc, #72]	; 1cfd0 <time_struct_buffer@@Base+0x160>
   1cf84:	add	r0, pc, r0
   1cf88:	bl	12e5c <puts@plt>
   1cf8c:	ldr	r0, [pc, #64]	; 1cfd4 <time_struct_buffer@@Base+0x164>
   1cf90:	vmov.f64	d0, d8
   1cf94:	vmov.f64	d1, d9
   1cf98:	mov	r1, r4
   1cf9c:	add	r0, pc, r0
   1cfa0:	bl	1cb88 <time_monster@@Base+0x140>
   1cfa4:	mov	r0, r5
   1cfa8:	sub	sp, fp, #40	; 0x28
   1cfac:	vpop	{d8-d9}
   1cfb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1cfb4:	nop	{0}
   1cfb8:	andeq	r0, r0, r0
   1cfbc:	smlawbmi	lr, r0, r4, r8
   1cfc0:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   1cfc4:	andeq	sp, r1, r0, ror #3
   1cfc8:	ldrdeq	sp, [r1], -r4
   1cfcc:	andeq	sp, r1, r0, ror #2
   1cfd0:	andeq	sl, r0, r5, lsr #29
   1cfd4:	strdeq	r8, [r0], -r9

0001cfd8 <main@@Base>:
   1cfd8:	push	{r4, sl, fp, lr}
   1cfdc:	add	fp, sp, #8
   1cfe0:	sub	sp, sp, #232	; 0xe8
   1cfe4:	mov	r4, sp
   1cfe8:	mov	r0, r4
   1cfec:	bl	1e100 <flatcc_builder_init@@Base>
   1cff0:	ldr	r0, [pc, #384]	; 1d178 <main@@Base+0x1a0>
   1cff4:	add	r0, pc, r0
   1cff8:	bl	12e5c <puts@plt>
   1cffc:	mov	r0, r4
   1d000:	bl	13d10 <test_table_with_emptystruct@@Base>
   1d004:	cmp	r0, #0
   1d008:	bne	1d14c <main@@Base+0x174>
   1d00c:	mov	r0, sp
   1d010:	bl	13774 <test_empty_monster@@Base>
   1d014:	cmp	r0, #0
   1d018:	bne	1d14c <main@@Base+0x174>
   1d01c:	mov	r0, sp
   1d020:	bl	157b4 <test_monster@@Base>
   1d024:	cmp	r0, #0
   1d028:	bne	1d14c <main@@Base+0x174>
   1d02c:	mov	r0, sp
   1d030:	bl	15870 <test_monster_with_size@@Base>
   1d034:	cmp	r0, #0
   1d038:	bne	1d14c <main@@Base+0x174>
   1d03c:	mov	r0, sp
   1d040:	bl	15984 <test_string@@Base>
   1d044:	cmp	r0, #0
   1d048:	bne	1d14c <main@@Base+0x174>
   1d04c:	mov	r0, sp
   1d050:	bl	1c2a0 <test_struct_buffer@@Base>
   1d054:	cmp	r0, #0
   1d058:	bne	1d14c <main@@Base+0x174>
   1d05c:	mov	r0, sp
   1d060:	bl	139c8 <test_typed_empty_monster@@Base>
   1d064:	cmp	r0, #0
   1d068:	bne	1d14c <main@@Base+0x174>
   1d06c:	mov	r0, sp
   1d070:	bl	13e94 <test_typed_table_with_emptystruct@@Base>
   1d074:	cmp	r0, #0
   1d078:	bne	1d14c <main@@Base+0x174>
   1d07c:	mov	r0, sp
   1d080:	bl	1c508 <test_typed_struct_buffer@@Base>
   1d084:	cmp	r0, #0
   1d088:	bne	1d14c <main@@Base+0x174>
   1d08c:	mov	r0, sp
   1d090:	bl	19368 <test_clone_slice@@Base>
   1d094:	cmp	r0, #0
   1d098:	bne	1d14c <main@@Base+0x174>
   1d09c:	mov	r0, sp
   1d0a0:	bl	1b430 <test_add_set_defaults@@Base>
   1d0a4:	cmp	r0, #0
   1d0a8:	bne	1d14c <main@@Base+0x174>
   1d0ac:	mov	r0, sp
   1d0b0:	bl	19e60 <test_create_add_field@@Base>
   1d0b4:	cmp	r0, #0
   1d0b8:	bne	1d14c <main@@Base+0x174>
   1d0bc:	mov	r0, sp
   1d0c0:	bl	1a188 <test_union_vector@@Base>
   1d0c4:	cmp	r0, #0
   1d0c8:	bne	1d14c <main@@Base+0x174>
   1d0cc:	mov	r0, sp
   1d0d0:	bl	18f50 <test_basic_sort@@Base>
   1d0d4:	cmp	r0, #0
   1d0d8:	bne	1d14c <main@@Base+0x174>
   1d0dc:	mov	r0, sp
   1d0e0:	bl	15cb8 <test_sort_find@@Base>
   1d0e4:	cmp	r0, #0
   1d0e8:	bne	1d14c <main@@Base+0x174>
   1d0ec:	mov	r0, sp
   1d0f0:	bl	16a4c <test_scan@@Base>
   1d0f4:	cmp	r0, #0
   1d0f8:	bne	1d14c <main@@Base+0x174>
   1d0fc:	mov	r0, sp
   1d100:	bl	1b7a8 <test_nested_buffer@@Base>
   1d104:	cmp	r0, #0
   1d108:	bne	1d14c <main@@Base+0x174>
   1d10c:	mov	r0, sp
   1d110:	bl	1bb14 <test_nested_buffer_first@@Base>
   1d114:	cmp	r0, #0
   1d118:	bne	1d14c <main@@Base+0x174>
   1d11c:	mov	r0, sp
   1d120:	bl	1be80 <test_nested_buffer_using_nest@@Base>
   1d124:	cmp	r0, #0
   1d128:	bne	1d14c <main@@Base+0x174>
   1d12c:	mov	r0, sp
   1d130:	bl	130c8 <test_type_aliases@@Base>
   1d134:	cmp	r0, #0
   1d138:	bne	1d14c <main@@Base+0x174>
   1d13c:	mov	r0, sp
   1d140:	bl	1a74c <test_mixed_type_union@@Base>
   1d144:	cmp	r0, #0
   1d148:	beq	1d164 <main@@Base+0x18c>
   1d14c:	ldr	r0, [pc, #40]	; 1d17c <main@@Base+0x1a4>
   1d150:	add	r0, pc, r0
   1d154:	bl	12e5c <puts@plt>
   1d158:	mvn	r0, #0
   1d15c:	sub	sp, fp, #8
   1d160:	pop	{r4, sl, fp, pc}
   1d164:	mov	r0, sp
   1d168:	bl	1e470 <flatcc_builder_clear@@Base>
   1d16c:	mov	r0, #0
   1d170:	sub	sp, fp, #8
   1d174:	pop	{r4, sl, fp, pc}
   1d178:	andeq	sl, r0, r6, asr #28
   1d17c:	andeq	sl, r0, r5, lsl #26
   1d180:	push	{r4, sl, fp, lr}
   1d184:	add	fp, sp, #8
   1d188:	sub	sp, sp, #8
   1d18c:	mov	r1, #0
   1d190:	mov	r2, #1
   1d194:	mov	r3, #1
   1d198:	mov	r4, r0
   1d19c:	bl	23354 <flatcc_verify_field@@Base>
   1d1a0:	cmp	r0, #0
   1d1a4:	bne	1d2f4 <main@@Base+0x31c>
   1d1a8:	mov	r0, r4
   1d1ac:	mov	r1, #1
   1d1b0:	mov	r2, #1
   1d1b4:	mov	r3, #1
   1d1b8:	bl	23354 <flatcc_verify_field@@Base>
   1d1bc:	cmp	r0, #0
   1d1c0:	bne	1d2f4 <main@@Base+0x31c>
   1d1c4:	mov	r0, r4
   1d1c8:	mov	r1, #2
   1d1cc:	mov	r2, #2
   1d1d0:	mov	r3, #2
   1d1d4:	bl	23354 <flatcc_verify_field@@Base>
   1d1d8:	cmp	r0, #0
   1d1dc:	bne	1d2f4 <main@@Base+0x31c>
   1d1e0:	mov	r0, r4
   1d1e4:	mov	r1, #3
   1d1e8:	mov	r2, #2
   1d1ec:	mov	r3, #2
   1d1f0:	bl	23354 <flatcc_verify_field@@Base>
   1d1f4:	cmp	r0, #0
   1d1f8:	bne	1d2f4 <main@@Base+0x31c>
   1d1fc:	mov	r0, r4
   1d200:	mov	r1, #4
   1d204:	mov	r2, #4
   1d208:	mov	r3, #4
   1d20c:	bl	23354 <flatcc_verify_field@@Base>
   1d210:	cmp	r0, #0
   1d214:	bne	1d2f4 <main@@Base+0x31c>
   1d218:	mov	r0, r4
   1d21c:	mov	r1, #5
   1d220:	mov	r2, #4
   1d224:	mov	r3, #4
   1d228:	bl	23354 <flatcc_verify_field@@Base>
   1d22c:	cmp	r0, #0
   1d230:	bne	1d2f4 <main@@Base+0x31c>
   1d234:	mov	r0, r4
   1d238:	mov	r1, #6
   1d23c:	mov	r2, #8
   1d240:	mov	r3, #8
   1d244:	bl	23354 <flatcc_verify_field@@Base>
   1d248:	cmp	r0, #0
   1d24c:	bne	1d2f4 <main@@Base+0x31c>
   1d250:	mov	r0, r4
   1d254:	mov	r1, #7
   1d258:	mov	r2, #8
   1d25c:	mov	r3, #8
   1d260:	bl	23354 <flatcc_verify_field@@Base>
   1d264:	cmp	r0, #0
   1d268:	bne	1d2f4 <main@@Base+0x31c>
   1d26c:	mov	r0, r4
   1d270:	mov	r1, #8
   1d274:	mov	r2, #4
   1d278:	mov	r3, #4
   1d27c:	bl	23354 <flatcc_verify_field@@Base>
   1d280:	cmp	r0, #0
   1d284:	bne	1d2f4 <main@@Base+0x31c>
   1d288:	mov	r0, r4
   1d28c:	mov	r1, #9
   1d290:	mov	r2, #8
   1d294:	mov	r3, #8
   1d298:	bl	23354 <flatcc_verify_field@@Base>
   1d29c:	cmp	r0, #0
   1d2a0:	bne	1d2f4 <main@@Base+0x31c>
   1d2a4:	mvn	r0, #0
   1d2a8:	mov	r1, #1
   1d2ac:	mov	r2, #0
   1d2b0:	mov	r3, #1
   1d2b4:	str	r1, [sp]
   1d2b8:	str	r0, [sp, #4]
   1d2bc:	mov	r0, r4
   1d2c0:	mov	r1, #10
   1d2c4:	bl	234b8 <flatcc_verify_vector_field@@Base>
   1d2c8:	cmp	r0, #0
   1d2cc:	bne	1d2f4 <main@@Base+0x31c>
   1d2d0:	mvn	r0, #-536870912	; 0xe0000000
   1d2d4:	mov	r1, #8
   1d2d8:	mov	r2, #0
   1d2dc:	mov	r3, #8
   1d2e0:	str	r1, [sp]
   1d2e4:	str	r0, [sp, #4]
   1d2e8:	mov	r0, r4
   1d2ec:	mov	r1, #11
   1d2f0:	bl	234b8 <flatcc_verify_vector_field@@Base>
   1d2f4:	sub	sp, fp, #8
   1d2f8:	pop	{r4, sl, fp, pc}
   1d2fc:	push	{r4, r5, r6, r7, fp, lr}
   1d300:	add	fp, sp, #16
   1d304:	sub	sp, sp, #8
   1d308:	mov	r1, #0
   1d30c:	mov	r2, #32
   1d310:	mov	r3, #16
   1d314:	mov	r4, r0
   1d318:	bl	23354 <flatcc_verify_field@@Base>
   1d31c:	cmp	r0, #0
   1d320:	bne	1d728 <main@@Base+0x750>
   1d324:	mov	r0, r4
   1d328:	mov	r1, #2
   1d32c:	mov	r2, #2
   1d330:	mov	r3, #2
   1d334:	bl	23354 <flatcc_verify_field@@Base>
   1d338:	cmp	r0, #0
   1d33c:	bne	1d728 <main@@Base+0x750>
   1d340:	mov	r0, r4
   1d344:	mov	r1, #1
   1d348:	mov	r2, #2
   1d34c:	mov	r3, #2
   1d350:	bl	23354 <flatcc_verify_field@@Base>
   1d354:	cmp	r0, #0
   1d358:	bne	1d728 <main@@Base+0x750>
   1d35c:	mov	r0, r4
   1d360:	mov	r1, #3
   1d364:	mov	r2, #1
   1d368:	bl	233d8 <flatcc_verify_string_field@@Base>
   1d36c:	cmp	r0, #0
   1d370:	bne	1d728 <main@@Base+0x750>
   1d374:	mov	r0, r4
   1d378:	mov	r1, #6
   1d37c:	mov	r2, #1
   1d380:	mov	r3, #1
   1d384:	mov	r5, #1
   1d388:	bl	23354 <flatcc_verify_field@@Base>
   1d38c:	cmp	r0, #0
   1d390:	bne	1d728 <main@@Base+0x750>
   1d394:	mvn	r0, #0
   1d398:	mov	r1, #5
   1d39c:	mov	r2, #0
   1d3a0:	mov	r3, #1
   1d3a4:	str	r5, [sp]
   1d3a8:	str	r0, [sp, #4]
   1d3ac:	mov	r0, r4
   1d3b0:	bl	234b8 <flatcc_verify_vector_field@@Base>
   1d3b4:	cmp	r0, #0
   1d3b8:	bne	1d728 <main@@Base+0x750>
   1d3bc:	ldr	r3, [pc, #908]	; 1d750 <main@@Base+0x778>
   1d3c0:	mov	r0, r4
   1d3c4:	mov	r1, #11
   1d3c8:	mov	r2, #0
   1d3cc:	add	r3, pc, r3
   1d3d0:	bl	238a0 <flatcc_verify_table_vector_field@@Base>
   1d3d4:	cmp	r0, #0
   1d3d8:	bne	1d728 <main@@Base+0x750>
   1d3dc:	mov	r0, r4
   1d3e0:	mov	r1, #10
   1d3e4:	mov	r2, #0
   1d3e8:	bl	235b0 <flatcc_verify_string_vector_field@@Base>
   1d3ec:	cmp	r0, #0
   1d3f0:	bne	1d728 <main@@Base+0x750>
   1d3f4:	mov	r0, r4
   1d3f8:	mov	r1, #28
   1d3fc:	mov	r2, #0
   1d400:	bl	235b0 <flatcc_verify_string_vector_field@@Base>
   1d404:	cmp	r0, #0
   1d408:	bne	1d728 <main@@Base+0x750>
   1d40c:	mvn	r0, #0
   1d410:	mov	r1, #1
   1d414:	mov	r2, #0
   1d418:	mov	r3, #1
   1d41c:	str	r1, [sp]
   1d420:	str	r0, [sp, #4]
   1d424:	mov	r0, r4
   1d428:	mov	r1, #24
   1d42c:	bl	234b8 <flatcc_verify_vector_field@@Base>
   1d430:	cmp	r0, #0
   1d434:	bne	1d728 <main@@Base+0x750>
   1d438:	mvn	r0, #-536870912	; 0xe0000000
   1d43c:	mov	r1, #4
   1d440:	mov	r2, #0
   1d444:	mov	r3, #8
   1d448:	str	r1, [sp]
   1d44c:	str	r0, [sp, #4]
   1d450:	mov	r0, r4
   1d454:	mov	r1, #29
   1d458:	bl	234b8 <flatcc_verify_vector_field@@Base>
   1d45c:	cmp	r0, #0
   1d460:	bne	1d728 <main@@Base+0x750>
   1d464:	ldr	r5, [pc, #744]	; 1d754 <main@@Base+0x77c>
   1d468:	mov	r0, r4
   1d46c:	mov	r1, #12
   1d470:	mov	r2, #0
   1d474:	add	r5, pc, r5
   1d478:	mov	r3, r5
   1d47c:	bl	23738 <flatcc_verify_table_field@@Base>
   1d480:	cmp	r0, #0
   1d484:	bne	1d728 <main@@Base+0x750>
   1d488:	ldr	r3, [pc, #712]	; 1d758 <main@@Base+0x780>
   1d48c:	mov	r0, r4
   1d490:	mov	r1, #8
   1d494:	mov	r2, #0
   1d498:	add	r3, pc, r3
   1d49c:	bl	246c8 <flatcc_verify_union_field@@Base>
   1d4a0:	cmp	r0, #0
   1d4a4:	bne	1d728 <main@@Base+0x750>
   1d4a8:	mvn	r6, #-1073741824	; 0xc0000000
   1d4ac:	mov	r7, #2
   1d4b0:	mov	r0, r4
   1d4b4:	mov	r1, #9
   1d4b8:	mov	r2, #0
   1d4bc:	mov	r3, #4
   1d4c0:	str	r7, [sp]
   1d4c4:	str	r6, [sp, #4]
   1d4c8:	bl	234b8 <flatcc_verify_vector_field@@Base>
   1d4cc:	cmp	r0, #0
   1d4d0:	bne	1d728 <main@@Base+0x750>
   1d4d4:	mov	r0, r4
   1d4d8:	mov	r1, #31
   1d4dc:	mov	r2, #0
   1d4e0:	mov	r3, #4
   1d4e4:	str	r7, [sp]
   1d4e8:	str	r6, [sp, #4]
   1d4ec:	bl	234b8 <flatcc_verify_vector_field@@Base>
   1d4f0:	cmp	r0, #0
   1d4f4:	bne	1d728 <main@@Base+0x750>
   1d4f8:	mov	r0, #1
   1d4fc:	mov	r1, #13
   1d500:	mov	r2, #0
   1d504:	mov	r3, #0
   1d508:	stm	sp, {r0, r5}
   1d50c:	mov	r0, r4
   1d510:	bl	243a8 <flatcc_verify_table_as_nested_root@@Base>
   1d514:	cmp	r0, #0
   1d518:	bne	1d728 <main@@Base+0x750>
   1d51c:	ldr	r3, [pc, #568]	; 1d75c <main@@Base+0x784>
   1d520:	mov	r0, r4
   1d524:	mov	r1, #14
   1d528:	mov	r2, #0
   1d52c:	add	r3, pc, r3
   1d530:	bl	23738 <flatcc_verify_table_field@@Base>
   1d534:	cmp	r0, #0
   1d538:	bne	1d728 <main@@Base+0x750>
   1d53c:	mov	r0, r4
   1d540:	mov	r1, #15
   1d544:	mov	r2, #1
   1d548:	mov	r3, #1
   1d54c:	bl	23354 <flatcc_verify_field@@Base>
   1d550:	cmp	r0, #0
   1d554:	bne	1d728 <main@@Base+0x750>
   1d558:	mov	r0, r4
   1d55c:	mov	r1, #16
   1d560:	mov	r2, #4
   1d564:	mov	r3, #4
   1d568:	bl	23354 <flatcc_verify_field@@Base>
   1d56c:	cmp	r0, #0
   1d570:	bne	1d728 <main@@Base+0x750>
   1d574:	mov	r0, r4
   1d578:	mov	r1, #17
   1d57c:	mov	r2, #4
   1d580:	mov	r3, #4
   1d584:	bl	23354 <flatcc_verify_field@@Base>
   1d588:	cmp	r0, #0
   1d58c:	bne	1d728 <main@@Base+0x750>
   1d590:	mov	r0, r4
   1d594:	mov	r1, #18
   1d598:	mov	r2, #8
   1d59c:	mov	r3, #8
   1d5a0:	bl	23354 <flatcc_verify_field@@Base>
   1d5a4:	cmp	r0, #0
   1d5a8:	bne	1d728 <main@@Base+0x750>
   1d5ac:	mov	r0, r4
   1d5b0:	mov	r1, #19
   1d5b4:	mov	r2, #8
   1d5b8:	mov	r3, #8
   1d5bc:	bl	23354 <flatcc_verify_field@@Base>
   1d5c0:	cmp	r0, #0
   1d5c4:	bne	1d728 <main@@Base+0x750>
   1d5c8:	mov	r0, r4
   1d5cc:	mov	r1, #20
   1d5d0:	mov	r2, #4
   1d5d4:	mov	r3, #4
   1d5d8:	bl	23354 <flatcc_verify_field@@Base>
   1d5dc:	cmp	r0, #0
   1d5e0:	bne	1d728 <main@@Base+0x750>
   1d5e4:	mov	r0, r4
   1d5e8:	mov	r1, #21
   1d5ec:	mov	r2, #4
   1d5f0:	mov	r3, #4
   1d5f4:	bl	23354 <flatcc_verify_field@@Base>
   1d5f8:	cmp	r0, #0
   1d5fc:	bne	1d728 <main@@Base+0x750>
   1d600:	mov	r0, r4
   1d604:	mov	r1, #22
   1d608:	mov	r2, #8
   1d60c:	mov	r3, #8
   1d610:	bl	23354 <flatcc_verify_field@@Base>
   1d614:	cmp	r0, #0
   1d618:	bne	1d728 <main@@Base+0x750>
   1d61c:	mov	r0, r4
   1d620:	mov	r1, #23
   1d624:	mov	r2, #8
   1d628:	mov	r3, #8
   1d62c:	bl	23354 <flatcc_verify_field@@Base>
   1d630:	cmp	r0, #0
   1d634:	bne	1d728 <main@@Base+0x750>
   1d638:	mov	r0, r4
   1d63c:	mov	r1, #25
   1d640:	mov	r2, #4
   1d644:	mov	r3, #4
   1d648:	bl	23354 <flatcc_verify_field@@Base>
   1d64c:	cmp	r0, #0
   1d650:	bne	1d728 <main@@Base+0x750>
   1d654:	mov	r0, r4
   1d658:	mov	r1, #26
   1d65c:	mov	r2, #4
   1d660:	mov	r3, #4
   1d664:	bl	23354 <flatcc_verify_field@@Base>
   1d668:	cmp	r0, #0
   1d66c:	bne	1d728 <main@@Base+0x750>
   1d670:	mov	r0, r4
   1d674:	mov	r1, #27
   1d678:	mov	r2, #4
   1d67c:	mov	r3, #4
   1d680:	bl	23354 <flatcc_verify_field@@Base>
   1d684:	cmp	r0, #0
   1d688:	bne	1d728 <main@@Base+0x750>
   1d68c:	mvn	r0, #0
   1d690:	mov	r1, #1
   1d694:	mov	r2, #0
   1d698:	mov	r3, #1
   1d69c:	str	r1, [sp]
   1d6a0:	str	r0, [sp, #4]
   1d6a4:	mov	r0, r4
   1d6a8:	mov	r1, #30
   1d6ac:	bl	234b8 <flatcc_verify_vector_field@@Base>
   1d6b0:	cmp	r0, #0
   1d6b4:	bne	1d728 <main@@Base+0x750>
   1d6b8:	mvn	r5, #-536870912	; 0xe0000000
   1d6bc:	mov	r6, #8
   1d6c0:	mov	r0, r4
   1d6c4:	mov	r1, #32
   1d6c8:	mov	r2, #0
   1d6cc:	mov	r3, #8
   1d6d0:	str	r6, [sp]
   1d6d4:	str	r5, [sp, #4]
   1d6d8:	bl	234b8 <flatcc_verify_vector_field@@Base>
   1d6dc:	cmp	r0, #0
   1d6e0:	bne	1d728 <main@@Base+0x750>
   1d6e4:	mov	r0, r4
   1d6e8:	mov	r1, #33	; 0x21
   1d6ec:	mov	r2, #0
   1d6f0:	mov	r3, #8
   1d6f4:	str	r6, [sp]
   1d6f8:	str	r5, [sp, #4]
   1d6fc:	bl	234b8 <flatcc_verify_vector_field@@Base>
   1d700:	cmp	r0, #0
   1d704:	bne	1d728 <main@@Base+0x750>
   1d708:	ldr	r3, [pc, #80]	; 1d760 <main@@Base+0x788>
   1d70c:	mov	r0, r4
   1d710:	mov	r1, #34	; 0x22
   1d714:	mov	r2, #0
   1d718:	add	r3, pc, r3
   1d71c:	bl	23738 <flatcc_verify_table_field@@Base>
   1d720:	cmp	r0, #0
   1d724:	beq	1d730 <main@@Base+0x758>
   1d728:	sub	sp, fp, #16
   1d72c:	pop	{r4, r5, r6, r7, fp, pc}
   1d730:	ldr	r3, [pc, #44]	; 1d764 <main@@Base+0x78c>
   1d734:	mov	r0, r4
   1d738:	mov	r1, #35	; 0x23
   1d73c:	mov	r2, #0
   1d740:	add	r3, pc, r3
   1d744:	sub	sp, fp, #16
   1d748:	pop	{r4, r5, r6, r7, fp, lr}
   1d74c:	b	23738 <flatcc_verify_table_field@@Base>
   1d750:			; <UNDEFINED> instruction: 0xffffff28
   1d754:			; <UNDEFINED> instruction: 0xfffffe80
   1d758:	andeq	r0, r0, r8, asr #5
   1d75c:	andeq	r0, r0, r4, ror #4
   1d760:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1d764:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   1d768:	ldrb	r1, [r0, #12]
   1d76c:	sub	r1, r1, #1
   1d770:	uxtb	r2, r1
   1d774:	cmp	r2, #3
   1d778:	movhi	r0, #0
   1d77c:	bxhi	lr
   1d780:	ldr	r2, [pc, #12]	; 1d794 <main@@Base+0x7bc>
   1d784:	sxtb	r1, r1
   1d788:	add	r2, pc, r2
   1d78c:	ldr	r1, [r2, r1, lsl #2]
   1d790:	b	23b78 <flatcc_verify_union_table@@Base>
   1d794:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1d798:	push	{r4, sl, fp, lr}
   1d79c:	add	fp, sp, #8
   1d7a0:	mov	r1, #0
   1d7a4:	mov	r2, #0
   1d7a8:	mov	r4, r0
   1d7ac:	bl	233d8 <flatcc_verify_string_field@@Base>
   1d7b0:	cmp	r0, #0
   1d7b4:	popne	{r4, sl, fp, pc}
   1d7b8:	mov	r0, r4
   1d7bc:	mov	r1, #1
   1d7c0:	mov	r2, #8
   1d7c4:	mov	r3, #8
   1d7c8:	bl	23354 <flatcc_verify_field@@Base>
   1d7cc:	cmp	r0, #0
   1d7d0:	beq	1d7d8 <main@@Base+0x800>
   1d7d4:	pop	{r4, sl, fp, pc}
   1d7d8:	mov	r0, r4
   1d7dc:	mov	r1, #2
   1d7e0:	mov	r2, #2
   1d7e4:	mov	r3, #2
   1d7e8:	pop	{r4, sl, fp, lr}
   1d7ec:	b	23354 <flatcc_verify_field@@Base>
   1d7f0:	mov	r0, #0
   1d7f4:	bx	lr
   1d7f8:	push	{r4, r5, r6, sl, fp, lr}
   1d7fc:	add	fp, sp, #16
   1d800:	sub	sp, sp, #8
   1d804:	mvn	r5, #0
   1d808:	mov	r6, #1
   1d80c:	mov	r1, #0
   1d810:	mov	r2, #0
   1d814:	mov	r3, #1
   1d818:	mov	r4, r0
   1d81c:	str	r6, [sp]
   1d820:	str	r5, [sp, #4]
   1d824:	bl	234b8 <flatcc_verify_vector_field@@Base>
   1d828:	cmp	r0, #0
   1d82c:	bne	1d854 <main@@Base+0x87c>
   1d830:	mov	r0, r4
   1d834:	mov	r1, #1
   1d838:	mov	r2, #0
   1d83c:	mov	r3, #1
   1d840:	str	r6, [sp]
   1d844:	str	r5, [sp, #4]
   1d848:	bl	234b8 <flatcc_verify_vector_field@@Base>
   1d84c:	cmp	r0, #0
   1d850:	beq	1d85c <main@@Base+0x884>
   1d854:	sub	sp, fp, #16
   1d858:	pop	{r4, r5, r6, sl, fp, pc}
   1d85c:	ldr	r0, [pc, #40]	; 1d88c <main@@Base+0x8b4>
   1d860:	mov	r1, #1
   1d864:	mov	r2, #0
   1d868:	mov	r3, #0
   1d86c:	str	r1, [sp]
   1d870:	mov	r1, #2
   1d874:	add	r0, pc, r0
   1d878:	str	r0, [sp, #4]
   1d87c:	mov	r0, r4
   1d880:	bl	243a8 <flatcc_verify_table_as_nested_root@@Base>
   1d884:	sub	sp, fp, #16
   1d888:	pop	{r4, r5, r6, sl, fp, pc}
   1d88c:			; <UNDEFINED> instruction: 0xfffffa80
   1d890:	push	{r4, sl, fp, lr}
   1d894:	add	fp, sp, #8
   1d898:	mov	r1, #0
   1d89c:	mov	r2, #1
   1d8a0:	mov	r3, #1
   1d8a4:	mov	r4, r0
   1d8a8:	bl	23354 <flatcc_verify_field@@Base>
   1d8ac:	cmp	r0, #0
   1d8b0:	bne	1d8ec <main@@Base+0x914>
   1d8b4:	mov	r0, r4
   1d8b8:	mov	r1, #1
   1d8bc:	mov	r2, #1
   1d8c0:	mov	r3, #1
   1d8c4:	bl	23354 <flatcc_verify_field@@Base>
   1d8c8:	cmp	r0, #0
   1d8cc:	popne	{r4, sl, fp, pc}
   1d8d0:	mov	r0, r4
   1d8d4:	mov	r1, #2
   1d8d8:	mov	r2, #1
   1d8dc:	mov	r3, #1
   1d8e0:	bl	23354 <flatcc_verify_field@@Base>
   1d8e4:	cmp	r0, #0
   1d8e8:	beq	1d8f0 <main@@Base+0x918>
   1d8ec:	pop	{r4, sl, fp, pc}
   1d8f0:	mov	r0, r4
   1d8f4:	mov	r1, #3
   1d8f8:	mov	r2, #1
   1d8fc:	mov	r3, #1
   1d900:	pop	{r4, sl, fp, lr}
   1d904:	b	23354 <flatcc_verify_field@@Base>
   1d908:	mov	r0, #0
   1d90c:	bx	lr
   1d910:	push	{r4, sl, fp, lr}
   1d914:	add	fp, sp, #8
   1d918:	ldr	r3, [pc, #88]	; 1d978 <main@@Base+0x9a0>
   1d91c:	mov	r1, #0
   1d920:	mov	r2, #0
   1d924:	mov	r4, r0
   1d928:	add	r3, pc, r3
   1d92c:	bl	23738 <flatcc_verify_table_field@@Base>
   1d930:	cmp	r0, #0
   1d934:	popne	{r4, sl, fp, pc}
   1d938:	ldr	r3, [pc, #60]	; 1d97c <main@@Base+0x9a4>
   1d93c:	mov	r0, r4
   1d940:	mov	r1, #1
   1d944:	mov	r2, #0
   1d948:	add	r3, pc, r3
   1d94c:	bl	23738 <flatcc_verify_table_field@@Base>
   1d950:	cmp	r0, #0
   1d954:	beq	1d95c <main@@Base+0x984>
   1d958:	pop	{r4, sl, fp, pc}
   1d95c:	ldr	r3, [pc, #28]	; 1d980 <main@@Base+0x9a8>
   1d960:	mov	r0, r4
   1d964:	mov	r1, #3
   1d968:	mov	r2, #0
   1d96c:	add	r3, pc, r3
   1d970:	pop	{r4, sl, fp, lr}
   1d974:	b	24834 <flatcc_verify_union_vector_field@@Base>
   1d978:	andeq	r0, r0, r4, asr r0
   1d97c:	andeq	r0, r0, r8, lsr #1
   1d980:			; <UNDEFINED> instruction: 0xfffffdf4
   1d984:	push	{r4, sl, fp, lr}
   1d988:	add	fp, sp, #8
   1d98c:	ldr	r3, [pc, #88]	; 1d9ec <main@@Base+0xa14>
   1d990:	mov	r1, #0
   1d994:	mov	r2, #0
   1d998:	mov	r4, r0
   1d99c:	add	r3, pc, r3
   1d9a0:	bl	23738 <flatcc_verify_table_field@@Base>
   1d9a4:	cmp	r0, #0
   1d9a8:	popne	{r4, sl, fp, pc}
   1d9ac:	ldr	r3, [pc, #60]	; 1d9f0 <main@@Base+0xa18>
   1d9b0:	mov	r0, r4
   1d9b4:	mov	r1, #1
   1d9b8:	mov	r2, #0
   1d9bc:	add	r3, pc, r3
   1d9c0:	bl	23738 <flatcc_verify_table_field@@Base>
   1d9c4:	cmp	r0, #0
   1d9c8:	beq	1d9d0 <main@@Base+0x9f8>
   1d9cc:	pop	{r4, sl, fp, pc}
   1d9d0:	ldr	r3, [pc, #28]	; 1d9f4 <main@@Base+0xa1c>
   1d9d4:	mov	r0, r4
   1d9d8:	mov	r1, #2
   1d9dc:	mov	r2, #0
   1d9e0:	add	r3, pc, r3
   1d9e4:	pop	{r4, sl, fp, lr}
   1d9e8:	b	23738 <flatcc_verify_table_field@@Base>
   1d9ec:	andeq	r0, r0, r0, lsl r1
   1d9f0:	andeq	r0, r0, r8, ror #3
   1d9f4:	andeq	r0, r0, r0, lsl #4
   1d9f8:	push	{r4, sl, fp, lr}
   1d9fc:	add	fp, sp, #8
   1da00:	ldr	r3, [pc, #152]	; 1daa0 <main@@Base+0xac8>
   1da04:	mov	r1, #1
   1da08:	mov	r2, #0
   1da0c:	mov	r4, r0
   1da10:	add	r3, pc, r3
   1da14:	bl	246c8 <flatcc_verify_union_field@@Base>
   1da18:	cmp	r0, #0
   1da1c:	bne	1da80 <main@@Base+0xaa8>
   1da20:	ldr	r3, [pc, #124]	; 1daa4 <main@@Base+0xacc>
   1da24:	mov	r0, r4
   1da28:	mov	r1, #3
   1da2c:	mov	r2, #0
   1da30:	add	r3, pc, r3
   1da34:	bl	246c8 <flatcc_verify_union_field@@Base>
   1da38:	cmp	r0, #0
   1da3c:	bne	1da80 <main@@Base+0xaa8>
   1da40:	ldr	r3, [pc, #96]	; 1daa8 <main@@Base+0xad0>
   1da44:	mov	r0, r4
   1da48:	mov	r1, #5
   1da4c:	mov	r2, #0
   1da50:	add	r3, pc, r3
   1da54:	bl	246c8 <flatcc_verify_union_field@@Base>
   1da58:	cmp	r0, #0
   1da5c:	popne	{r4, sl, fp, pc}
   1da60:	ldr	r3, [pc, #68]	; 1daac <main@@Base+0xad4>
   1da64:	mov	r0, r4
   1da68:	mov	r1, #7
   1da6c:	mov	r2, #0
   1da70:	add	r3, pc, r3
   1da74:	bl	246c8 <flatcc_verify_union_field@@Base>
   1da78:	cmp	r0, #0
   1da7c:	beq	1da84 <main@@Base+0xaac>
   1da80:	pop	{r4, sl, fp, pc}
   1da84:	ldr	r3, [pc, #36]	; 1dab0 <main@@Base+0xad8>
   1da88:	mov	r0, r4
   1da8c:	mov	r1, #9
   1da90:	mov	r2, #0
   1da94:	add	r3, pc, r3
   1da98:	pop	{r4, sl, fp, lr}
   1da9c:	b	24834 <flatcc_verify_union_vector_field@@Base>
   1daa0:	andeq	r0, r0, ip, lsl #4
   1daa4:	andeq	r0, r0, ip, ror #3
   1daa8:	andeq	r0, r0, ip, asr #3
   1daac:	andeq	r0, r0, ip, lsr #3
   1dab0:	andeq	r0, r0, r8, lsl #3
   1dab4:	push	{r4, sl, fp, lr}
   1dab8:	add	fp, sp, #8
   1dabc:	mov	r1, #0
   1dac0:	mov	r2, #0
   1dac4:	mov	r4, r0
   1dac8:	bl	233d8 <flatcc_verify_string_field@@Base>
   1dacc:	cmp	r0, #0
   1dad0:	bne	1db90 <main@@Base+0xbb8>
   1dad4:	mov	r0, r4
   1dad8:	mov	r1, #1
   1dadc:	mov	r2, #4
   1dae0:	mov	r3, #4
   1dae4:	bl	23354 <flatcc_verify_field@@Base>
   1dae8:	cmp	r0, #0
   1daec:	bne	1db90 <main@@Base+0xbb8>
   1daf0:	mov	r0, r4
   1daf4:	mov	r1, #2
   1daf8:	mov	r2, #0
   1dafc:	bl	233d8 <flatcc_verify_string_field@@Base>
   1db00:	cmp	r0, #0
   1db04:	bne	1db90 <main@@Base+0xbb8>
   1db08:	mov	r0, r4
   1db0c:	mov	r1, #3
   1db10:	mov	r2, #8
   1db14:	mov	r3, #8
   1db18:	bl	23354 <flatcc_verify_field@@Base>
   1db1c:	cmp	r0, #0
   1db20:	bne	1db90 <main@@Base+0xbb8>
   1db24:	mov	r0, r4
   1db28:	mov	r1, #4
   1db2c:	mov	r2, #0
   1db30:	bl	233d8 <flatcc_verify_string_field@@Base>
   1db34:	cmp	r0, #0
   1db38:	bne	1db90 <main@@Base+0xbb8>
   1db3c:	mov	r0, r4
   1db40:	mov	r1, #5
   1db44:	mov	r2, #8
   1db48:	mov	r3, #8
   1db4c:	bl	23354 <flatcc_verify_field@@Base>
   1db50:	cmp	r0, #0
   1db54:	bne	1db90 <main@@Base+0xbb8>
   1db58:	mov	r0, r4
   1db5c:	mov	r1, #6
   1db60:	mov	r2, #4
   1db64:	mov	r3, #4
   1db68:	bl	23354 <flatcc_verify_field@@Base>
   1db6c:	cmp	r0, #0
   1db70:	popne	{r4, sl, fp, pc}
   1db74:	mov	r0, r4
   1db78:	mov	r1, #7
   1db7c:	mov	r2, #8
   1db80:	mov	r3, #8
   1db84:	bl	23354 <flatcc_verify_field@@Base>
   1db88:	cmp	r0, #0
   1db8c:	beq	1db94 <main@@Base+0xbbc>
   1db90:	pop	{r4, sl, fp, pc}
   1db94:	mov	r0, r4
   1db98:	mov	r1, #8
   1db9c:	mov	r2, #4
   1dba0:	mov	r3, #4
   1dba4:	pop	{r4, sl, fp, lr}
   1dba8:	b	23354 <flatcc_verify_field@@Base>
   1dbac:	push	{r4, sl, fp, lr}
   1dbb0:	add	fp, sp, #8
   1dbb4:	mov	r1, #0
   1dbb8:	mov	r2, #8
   1dbbc:	mov	r3, #8
   1dbc0:	mov	r4, r0
   1dbc4:	bl	23354 <flatcc_verify_field@@Base>
   1dbc8:	cmp	r0, #0
   1dbcc:	popne	{r4, sl, fp, pc}
   1dbd0:	mov	r0, r4
   1dbd4:	mov	r1, #1
   1dbd8:	mov	r2, #4
   1dbdc:	mov	r3, #4
   1dbe0:	pop	{r4, sl, fp, lr}
   1dbe4:	b	23354 <flatcc_verify_field@@Base>
   1dbe8:	push	{r4, sl, fp, lr}
   1dbec:	add	fp, sp, #8
   1dbf0:	mov	r1, #0
   1dbf4:	mov	r2, #8
   1dbf8:	mov	r3, #8
   1dbfc:	mov	r4, r0
   1dc00:	bl	23354 <flatcc_verify_field@@Base>
   1dc04:	cmp	r0, #0
   1dc08:	popne	{r4, sl, fp, pc}
   1dc0c:	mov	r0, r4
   1dc10:	mov	r1, #1
   1dc14:	mov	r2, #4
   1dc18:	mov	r3, #4
   1dc1c:	pop	{r4, sl, fp, lr}
   1dc20:	b	23354 <flatcc_verify_field@@Base>
   1dc24:	ldrb	r2, [r0, #12]
   1dc28:	sub	r1, r2, #2
   1dc2c:	cmp	r1, #9
   1dc30:	bhi	1dc74 <main@@Base+0xc9c>
   1dc34:	add	r2, pc, #4
   1dc38:	ldr	r1, [r2, r1, lsl #2]
   1dc3c:	add	pc, r2, r1
   1dc40:	andeq	r0, r0, r8, asr #32
   1dc44:	andeq	r0, r0, r0, asr #32
   1dc48:	andeq	r0, r0, r0, asr #32
   1dc4c:	andeq	r0, r0, r0, asr #32
   1dc50:	andeq	r0, r0, r0, asr #32
   1dc54:	andeq	r0, r0, r0, asr #32
   1dc58:	andeq	r0, r0, r4, asr r0
   1dc5c:	andeq	r0, r0, r8, lsr #32
   1dc60:	andeq	r0, r0, r8, lsr #32
   1dc64:	andeq	r0, r0, ip, lsr r0
   1dc68:	mov	r1, #4
   1dc6c:	mov	r2, #4
   1dc70:	b	23c64 <flatcc_verify_union_struct@@Base>
   1dc74:	cmp	r2, #255	; 0xff
   1dc78:	bne	1dc80 <main@@Base+0xca8>
   1dc7c:	b	23cbc <flatcc_verify_union_string@@Base>
   1dc80:	mov	r0, #0
   1dc84:	bx	lr
   1dc88:	ldr	r1, [pc, #16]	; 1dca0 <main@@Base+0xcc8>
   1dc8c:	add	r1, pc, r1
   1dc90:	b	23b78 <flatcc_verify_union_table@@Base>
   1dc94:	mov	r1, #2
   1dc98:	mov	r2, #2
   1dc9c:	b	23c64 <flatcc_verify_union_struct@@Base>
   1dca0:	andeq	r0, r0, r0, lsl r0
   1dca4:	mov	r1, #0
   1dca8:	mov	r2, #4
   1dcac:	mov	r3, #4
   1dcb0:	b	23354 <flatcc_verify_field@@Base>
   1dcb4:	mov	r1, #0
   1dcb8:	mov	r2, #0
   1dcbc:	mov	r3, #1
   1dcc0:	b	23354 <flatcc_verify_field@@Base>
   1dcc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dcc8:	add	fp, sp, #28
   1dccc:	sub	sp, sp, #20
   1dcd0:	cmp	r2, r1, lsl #1
   1dcd4:	bcs	1dce0 <main@@Base+0xd08>
   1dcd8:	sub	sp, fp, #28
   1dcdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dce0:	mov	sl, r2
   1dce4:	lsl	r7, r1, #1
   1dce8:	str	r0, [sp, #4]
   1dcec:	str	r2, [sp]
   1dcf0:	cmp	r7, sl
   1dcf4:	bcs	1ddbc <main@@Base+0xde4>
   1dcf8:	cmp	r0, #0
   1dcfc:	ldrne	r8, [r0, #-4]
   1dd00:	cmpne	r8, r7
   1dd04:	bls	1dedc <main@@Base+0xf04>
   1dd08:	mov	r4, r0
   1dd0c:	ldr	r2, [r4, r7, lsl #2]!
   1dd10:	ldr	r2, [r4, r2]!
   1dd14:	mov	r3, r4
   1dd18:	ldrh	r2, [r3, -r2]!	; <UNPREDICTABLE>
   1dd1c:	cmp	r2, #12
   1dd20:	bcc	1defc <main@@Base+0xf24>
   1dd24:	ldrh	r2, [r3, #10]
   1dd28:	cmp	r2, #0
   1dd2c:	beq	1defc <main@@Base+0xf24>
   1dd30:	orr	r5, r7, #1
   1dd34:	cmp	r8, r5
   1dd38:	bls	1dedc <main@@Base+0xf04>
   1dd3c:	mov	r9, r1
   1dd40:	mov	r1, r0
   1dd44:	ldr	r3, [r1, r5, lsl #2]!
   1dd48:	ldr	r6, [r1, r3]!
   1dd4c:	mov	r3, r1
   1dd50:	ldrh	r6, [r3, -r6]!	; <UNPREDICTABLE>
   1dd54:	cmp	r6, #12
   1dd58:	bcc	1defc <main@@Base+0xf24>
   1dd5c:	ldrh	r3, [r3, #10]
   1dd60:	cmp	r3, #0
   1dd64:	beq	1defc <main@@Base+0xf24>
   1dd68:	ldr	r2, [r4, r2]!
   1dd6c:	add	r0, r4, r2
   1dd70:	ldr	r2, [r1, r3]!
   1dd74:	add	r0, r0, #4
   1dd78:	ldr	r4, [r0, #-4]
   1dd7c:	ldr	r6, [r1, r2]!
   1dd80:	add	r1, r1, #4
   1dd84:	cmp	r4, r6
   1dd88:	mov	r2, r6
   1dd8c:	movcc	r2, r4
   1dd90:	bl	12eec <strncmp@plt>
   1dd94:	cmp	r0, #0
   1dd98:	mov	r0, r5
   1dd9c:	mov	r1, r9
   1dda0:	movne	r0, r7
   1dda4:	movmi	r0, r5
   1dda8:	movne	r7, r0
   1ddac:	cmp	r4, r6
   1ddb0:	movcc	r7, r0
   1ddb4:	ldr	r0, [sp, #4]
   1ddb8:	b	1ddc8 <main@@Base+0xdf0>
   1ddbc:	cmp	r0, #0
   1ddc0:	beq	1dedc <main@@Base+0xf04>
   1ddc4:	ldr	r8, [r0, #-4]
   1ddc8:	mov	r5, r7
   1ddcc:	cmp	r8, r1
   1ddd0:	bls	1dedc <main@@Base+0xf04>
   1ddd4:	mov	r9, r0
   1ddd8:	ldr	r4, [r9, r1, lsl #2]!
   1dddc:	mov	r7, r9
   1dde0:	ldr	r2, [r7, r4]!
   1dde4:	mov	r3, r7
   1dde8:	ldrh	r2, [r3, -r2]!	; <UNPREDICTABLE>
   1ddec:	cmp	r2, #12
   1ddf0:	bcc	1defc <main@@Base+0xf24>
   1ddf4:	ldrh	r6, [r3, #10]
   1ddf8:	cmp	r6, #0
   1ddfc:	beq	1defc <main@@Base+0xf24>
   1de00:	cmp	r8, r5
   1de04:	bls	1dedc <main@@Base+0xf04>
   1de08:	str	r4, [sp, #8]
   1de0c:	mov	r4, r0
   1de10:	str	r5, [sp, #12]
   1de14:	str	r1, [sp, #16]
   1de18:	ldr	r8, [r4, r5, lsl #2]!
   1de1c:	mov	r3, r4
   1de20:	ldr	r5, [r3, r8]!
   1de24:	mov	r2, r3
   1de28:	ldrh	r5, [r2, -r5]!	; <UNPREDICTABLE>
   1de2c:	cmp	r5, #12
   1de30:	bcc	1defc <main@@Base+0xf24>
   1de34:	ldrh	r2, [r2, #10]
   1de38:	cmp	r2, #0
   1de3c:	beq	1defc <main@@Base+0xf24>
   1de40:	ldr	r1, [r7, r6]!
   1de44:	add	r0, r7, r1
   1de48:	ldr	r1, [r3, r2]!
   1de4c:	add	r0, r0, #4
   1de50:	ldr	sl, [r0, #-4]
   1de54:	ldr	r5, [r3, r1]!
   1de58:	add	r1, r3, #4
   1de5c:	cmp	sl, r5
   1de60:	mov	r2, r5
   1de64:	movcc	r2, sl
   1de68:	bl	12eec <strncmp@plt>
   1de6c:	cmp	r0, #1
   1de70:	mov	r1, #0
   1de74:	mov	r2, #0
   1de78:	movwlt	r1, #1
   1de7c:	cmp	r0, #0
   1de80:	movwne	r0, #1
   1de84:	cmp	sl, r5
   1de88:	ldr	sl, [sp]
   1de8c:	movwcc	r2, #1
   1de90:	orr	r0, r2, r0
   1de94:	ldr	r2, [sp, #16]
   1de98:	cmp	r0, #1
   1de9c:	ldr	r0, [sp, #4]
   1dea0:	bne	1dcd8 <main@@Base+0xd00>
   1dea4:	cmp	r1, #0
   1dea8:	beq	1dcd8 <main@@Base+0xd00>
   1deac:	ldr	r3, [sp, #12]
   1deb0:	sub	r2, r2, r3
   1deb4:	cmp	sl, r3, lsl #1
   1deb8:	lsl	r7, r3, #1
   1debc:	sub	r1, r8, r2, lsl #2
   1dec0:	str	r1, [r9]
   1dec4:	ldr	r1, [sp, #8]
   1dec8:	add	r1, r1, r2, lsl #2
   1decc:	str	r1, [r4]
   1ded0:	mov	r1, r3
   1ded4:	bcs	1dcf0 <main@@Base+0xd18>
   1ded8:	b	1dcd8 <main@@Base+0xd00>
   1dedc:	ldr	r0, [pc, #56]	; 1df1c <main@@Base+0xf44>
   1dee0:	ldr	r1, [pc, #56]	; 1df20 <main@@Base+0xf48>
   1dee4:	ldr	r3, [pc, #56]	; 1df24 <main@@Base+0xf4c>
   1dee8:	movw	r2, #693	; 0x2b5
   1deec:	add	r0, pc, r0
   1def0:	add	r1, pc, r1
   1def4:	add	r3, pc, r3
   1def8:	bl	12f04 <__assert_fail@plt>
   1defc:	ldr	r0, [pc, #36]	; 1df28 <main@@Base+0xf50>
   1df00:	ldr	r1, [pc, #36]	; 1df2c <main@@Base+0xf54>
   1df04:	ldr	r3, [pc, #36]	; 1df30 <main@@Base+0xf58>
   1df08:	movw	r2, #699	; 0x2bb
   1df0c:	add	r0, pc, r0
   1df10:	add	r1, pc, r1
   1df14:	add	r3, pc, r3
   1df18:	bl	12f04 <__assert_fail@plt>
   1df1c:	andeq	r7, r0, r3, lsl #31
   1df20:	strdeq	r7, [r0], -r8
   1df24:	ldrdeq	r8, [r0], -r9
   1df28:	andeq	r7, r0, r9, ror #29
   1df2c:	ldrdeq	r7, [r0], -r8
   1df30:	muleq	r0, r0, lr

0001df34 <flatcc_builder_default_alloc@@Base>:
   1df34:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1df38:	add	fp, sp, #24
   1df3c:	mov	r4, r1
   1df40:	cmp	r2, #0
   1df44:	beq	1df90 <flatcc_builder_default_alloc@@Base+0x5c>
   1df48:	ldr	r0, [fp, #8]
   1df4c:	mov	r8, r3
   1df50:	sub	r1, r0, #1
   1df54:	cmp	r1, #6
   1df58:	bhi	1dfc0 <flatcc_builder_default_alloc@@Base+0x8c>
   1df5c:	add	r3, pc, #8
   1df60:	mov	r0, #256	; 0x100
   1df64:	ldr	r1, [r3, r1, lsl #2]
   1df68:	add	pc, r3, r1
   1df6c:	andeq	r0, r0, r8, rrx
   1df70:	andeq	r0, r0, r4, asr r0
   1df74:	andeq	r0, r0, r4, asr r0
   1df78:	andeq	r0, r0, ip, lsl r0
   1df7c:	andeq	r0, r0, ip, asr r0
   1df80:	andeq	r0, r0, r4, asr r0
   1df84:	andeq	r0, r0, r4, rrx
   1df88:	mov	r0, #288	; 0x120
   1df8c:	b	1dfd4 <flatcc_builder_default_alloc@@Base+0xa0>
   1df90:	ldr	r0, [r4]
   1df94:	cmp	r0, #0
   1df98:	beq	1dfb4 <flatcc_builder_default_alloc@@Base+0x80>
   1df9c:	bl	12e20 <free@plt>
   1dfa0:	mov	r6, #0
   1dfa4:	mov	r0, r6
   1dfa8:	str	r6, [r4]
   1dfac:	str	r6, [r4, #4]
   1dfb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1dfb4:	mov	r6, #0
   1dfb8:	mov	r0, r6
   1dfbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1dfc0:	mov	r0, #32
   1dfc4:	b	1dfd4 <flatcc_builder_default_alloc@@Base+0xa0>
   1dfc8:	mov	r0, r2
   1dfcc:	b	1dfd4 <flatcc_builder_default_alloc@@Base+0xa0>
   1dfd0:	mov	r0, #64	; 0x40
   1dfd4:	mov	r7, r0
   1dfd8:	lsl	r0, r0, #1
   1dfdc:	cmp	r7, r2
   1dfe0:	bcc	1dfd4 <flatcc_builder_default_alloc@@Base+0xa0>
   1dfe4:	ldr	r0, [r4, #4]
   1dfe8:	mov	r6, #0
   1dfec:	cmp	r0, r2
   1dff0:	lsrcs	r0, r0, #1
   1dff4:	cmpcs	r0, r7
   1dff8:	bcs	1e03c <flatcc_builder_default_alloc@@Base+0x108>
   1dffc:	ldr	r0, [r4]
   1e000:	mov	r1, r7
   1e004:	bl	12e38 <realloc@plt>
   1e008:	cmp	r0, #0
   1e00c:	beq	1e044 <flatcc_builder_default_alloc@@Base+0x110>
   1e010:	mov	r5, r0
   1e014:	cmp	r8, #0
   1e018:	beq	1e038 <flatcc_builder_default_alloc@@Base+0x104>
   1e01c:	ldr	r1, [r4, #4]
   1e020:	cmp	r7, r1
   1e024:	bls	1e038 <flatcc_builder_default_alloc@@Base+0x104>
   1e028:	add	r0, r5, r1
   1e02c:	sub	r2, r7, r1
   1e030:	mov	r1, #0
   1e034:	bl	12ebc <memset@plt>
   1e038:	stm	r4, {r5, r7}
   1e03c:	mov	r0, r6
   1e040:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e044:	mvn	r6, #0
   1e048:	mov	r0, r6
   1e04c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0001e050 <flatcc_builder_flush_vtable_cache@@Base>:
   1e050:	push	{r4, r5, fp, lr}
   1e054:	add	fp, sp, #8
   1e058:	mov	r4, r0
   1e05c:	ldr	r0, [r0, #116]	; 0x74
   1e060:	cmp	r0, #0
   1e064:	popeq	{r4, r5, fp, pc}
   1e068:	ldr	r0, [r4, #92]	; 0x5c
   1e06c:	ldr	r2, [r4, #96]	; 0x60
   1e070:	mov	r1, #0
   1e074:	mov	r5, #0
   1e078:	bl	12ebc <memset@plt>
   1e07c:	mov	r0, #16
   1e080:	str	r5, [r4, #120]	; 0x78
   1e084:	str	r0, [r4, #124]	; 0x7c
   1e088:	pop	{r4, r5, fp, pc}

0001e08c <flatcc_builder_custom_init@@Base>:
   1e08c:	push	{r4, r5, r6, r7, fp, lr}
   1e090:	add	fp, sp, #16
   1e094:	mov	r6, r2
   1e098:	mov	r7, r1
   1e09c:	mov	r1, #0
   1e0a0:	mov	r2, #232	; 0xe8
   1e0a4:	mov	r5, r3
   1e0a8:	mov	r4, r0
   1e0ac:	bl	12ebc <memset@plt>
   1e0b0:	ldr	r0, [fp, #8]
   1e0b4:	cmp	r7, #0
   1e0b8:	bne	1e0d0 <flatcc_builder_custom_init@@Base+0x44>
   1e0bc:	mov	r1, #1
   1e0c0:	add	r6, r4, #188	; 0xbc
   1e0c4:	str	r1, [r4, #184]	; 0xb8
   1e0c8:	ldr	r7, [pc, #40]	; 1e0f8 <flatcc_builder_custom_init@@Base+0x6c>
   1e0cc:	ldr	r7, [pc, r7]
   1e0d0:	ldr	r1, [pc, #36]	; 1e0fc <flatcc_builder_custom_init@@Base+0x70>
   1e0d4:	cmp	r5, #0
   1e0d8:	ldr	r1, [pc, r1]
   1e0dc:	str	r6, [r4, #36]	; 0x24
   1e0e0:	str	r0, [r4, #40]	; 0x28
   1e0e4:	mov	r0, #0
   1e0e8:	movne	r1, r5
   1e0ec:	str	r7, [r4, #44]	; 0x2c
   1e0f0:	str	r1, [r4, #48]	; 0x30
   1e0f4:	pop	{r4, r5, r6, r7, fp, pc}
   1e0f8:	andeq	fp, r1, r0, lsr #31
   1e0fc:	muleq	r1, r0, pc	; <UNPREDICTABLE>

0001e100 <flatcc_builder_init@@Base>:
   1e100:	push	{r4, r5, fp, lr}
   1e104:	add	fp, sp, #8
   1e108:	mov	r1, #0
   1e10c:	mov	r2, #232	; 0xe8
   1e110:	mov	r4, r0
   1e114:	mov	r5, #0
   1e118:	bl	12ebc <memset@plt>
   1e11c:	mov	r0, #1
   1e120:	str	r0, [r4, #184]	; 0xb8
   1e124:	add	r0, r4, #188	; 0xbc
   1e128:	ldr	r1, [pc, #32]	; 1e150 <flatcc_builder_init@@Base+0x50>
   1e12c:	ldr	r1, [pc, r1]
   1e130:	ldr	r2, [pc, #28]	; 1e154 <flatcc_builder_init@@Base+0x54>
   1e134:	ldr	r2, [pc, r2]
   1e138:	str	r0, [r4, #36]	; 0x24
   1e13c:	mov	r0, #0
   1e140:	str	r5, [r4, #40]	; 0x28
   1e144:	str	r2, [r4, #44]	; 0x2c
   1e148:	str	r1, [r4, #48]	; 0x30
   1e14c:	pop	{r4, r5, fp, pc}
   1e150:	andeq	fp, r1, ip, lsr pc
   1e154:	andeq	fp, r1, r8, lsr pc

0001e158 <flatcc_builder_custom_reset@@Base>:
   1e158:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e15c:	add	fp, sp, #28
   1e160:	sub	sp, sp, #4
   1e164:	mov	r9, r2
   1e168:	mov	r8, r1
   1e16c:	mov	sl, r0
   1e170:	add	r7, r0, #52	; 0x34
   1e174:	mov	r5, #0
   1e178:	b	1e198 <flatcc_builder_custom_reset@@Base+0x40>
   1e17c:	ldr	r0, [r6, #56]	; 0x38
   1e180:	cmp	r0, #0
   1e184:	bne	1e280 <flatcc_builder_custom_reset@@Base+0x128>
   1e188:	add	r5, r5, #1
   1e18c:	add	r7, r7, #8
   1e190:	cmp	r5, #8
   1e194:	beq	1e1ec <flatcc_builder_custom_reset@@Base+0x94>
   1e198:	add	r6, sl, r5, lsl #3
   1e19c:	ldr	r0, [r6, #52]	; 0x34
   1e1a0:	cmp	r0, #0
   1e1a4:	beq	1e17c <flatcc_builder_custom_reset@@Base+0x24>
   1e1a8:	cmp	r9, #0
   1e1ac:	cmpne	r5, #5
   1e1b0:	beq	1e1dc <flatcc_builder_custom_reset@@Base+0x84>
   1e1b4:	ldr	r0, [sl, #40]	; 0x28
   1e1b8:	ldr	r4, [sl, #48]	; 0x30
   1e1bc:	mov	r1, r7
   1e1c0:	mov	r2, #1
   1e1c4:	mov	r3, #1
   1e1c8:	str	r5, [sp]
   1e1cc:	blx	r4
   1e1d0:	cmp	r0, #0
   1e1d4:	bne	1e270 <flatcc_builder_custom_reset@@Base+0x118>
   1e1d8:	ldr	r0, [r6, #52]	; 0x34
   1e1dc:	ldr	r2, [r6, #56]	; 0x38
   1e1e0:	mov	r1, #0
   1e1e4:	bl	12ebc <memset@plt>
   1e1e8:	b	1e188 <flatcc_builder_custom_reset@@Base+0x30>
   1e1ec:	mov	r0, #0
   1e1f0:	vmov.i32	q8, #0	; 0x00000000
   1e1f4:	mov	r5, #0
   1e1f8:	str	r0, [sl, #120]	; 0x78
   1e1fc:	ldr	r1, [sl, #124]	; 0x7c
   1e200:	cmp	r1, #0
   1e204:	movne	r1, #16
   1e208:	strne	r1, [sl, #124]	; 0x7c
   1e20c:	add	r1, sl, #148	; 0x94
   1e210:	str	r0, [sl, #136]	; 0x88
   1e214:	str	r0, [sl, #140]	; 0x8c
   1e218:	strh	r0, [sl, #128]	; 0x80
   1e21c:	str	r0, [sl, #32]
   1e220:	cmp	r8, #0
   1e224:	vst1.32	{d16-d17}, [r1]
   1e228:	ldr	r2, [sl, #60]	; 0x3c
   1e22c:	ldr	r1, [sl, #52]	; 0x34
   1e230:	ldr	r3, [sl, #76]	; 0x4c
   1e234:	str	r2, [sl, #16]
   1e238:	str	r0, [sl, #20]
   1e23c:	str	r0, [sl, #24]
   1e240:	movne	r0, #0
   1e244:	str	r3, [sl]
   1e248:	str	r1, [sl, #4]
   1e24c:	strne	r0, [sl, #172]	; 0xac
   1e250:	strne	r0, [sl, #176]	; 0xb0
   1e254:	strne	r0, [sl, #180]	; 0xb4
   1e258:	ldr	r0, [sl, #184]	; 0xb8
   1e25c:	cmp	r0, #0
   1e260:	beq	1e274 <flatcc_builder_custom_reset@@Base+0x11c>
   1e264:	add	r0, sl, #188	; 0xbc
   1e268:	bl	22df4 <flatcc_emitter_reset@@Base>
   1e26c:	b	1e274 <flatcc_builder_custom_reset@@Base+0x11c>
   1e270:	mvn	r5, #0
   1e274:	mov	r0, r5
   1e278:	sub	sp, fp, #28
   1e27c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e280:	ldr	r0, [pc, #24]	; 1e2a0 <flatcc_builder_custom_reset@@Base+0x148>
   1e284:	ldr	r1, [pc, #24]	; 1e2a4 <flatcc_builder_custom_reset@@Base+0x14c>
   1e288:	ldr	r3, [pc, #24]	; 1e2a8 <flatcc_builder_custom_reset@@Base+0x150>
   1e28c:	movw	r2, #434	; 0x1b2
   1e290:	add	r0, pc, r0
   1e294:	add	r1, pc, r1
   1e298:	add	r3, pc, r3
   1e29c:	bl	12f04 <__assert_fail@plt>
   1e2a0:	andeq	r9, r0, r4, ror lr
   1e2a4:	andeq	r9, r0, r2, lsl #29
   1e2a8:	ldrdeq	r9, [r0], -fp

0001e2ac <flatcc_builder_reset@@Base>:
   1e2ac:	push	{r4, sl, fp, lr}
   1e2b0:	add	fp, sp, #8
   1e2b4:	mov	r4, r0
   1e2b8:	ldr	r0, [r0, #52]	; 0x34
   1e2bc:	ldr	r2, [r4, #56]	; 0x38
   1e2c0:	cmp	r0, #0
   1e2c4:	beq	1e2d4 <flatcc_builder_reset@@Base+0x28>
   1e2c8:	mov	r1, #0
   1e2cc:	bl	12ebc <memset@plt>
   1e2d0:	b	1e2dc <flatcc_builder_reset@@Base+0x30>
   1e2d4:	cmp	r2, #0
   1e2d8:	bne	1e444 <flatcc_builder_reset@@Base+0x198>
   1e2dc:	ldr	r0, [r4, #60]	; 0x3c
   1e2e0:	ldr	r2, [r4, #64]	; 0x40
   1e2e4:	cmp	r0, #0
   1e2e8:	beq	1e2f8 <flatcc_builder_reset@@Base+0x4c>
   1e2ec:	mov	r1, #0
   1e2f0:	bl	12ebc <memset@plt>
   1e2f4:	b	1e300 <flatcc_builder_reset@@Base+0x54>
   1e2f8:	cmp	r2, #0
   1e2fc:	bne	1e444 <flatcc_builder_reset@@Base+0x198>
   1e300:	ldr	r0, [r4, #68]	; 0x44
   1e304:	ldr	r2, [r4, #72]	; 0x48
   1e308:	cmp	r0, #0
   1e30c:	beq	1e31c <flatcc_builder_reset@@Base+0x70>
   1e310:	mov	r1, #0
   1e314:	bl	12ebc <memset@plt>
   1e318:	b	1e324 <flatcc_builder_reset@@Base+0x78>
   1e31c:	cmp	r2, #0
   1e320:	bne	1e444 <flatcc_builder_reset@@Base+0x198>
   1e324:	ldr	r0, [r4, #76]	; 0x4c
   1e328:	ldr	r2, [r4, #80]	; 0x50
   1e32c:	cmp	r0, #0
   1e330:	beq	1e340 <flatcc_builder_reset@@Base+0x94>
   1e334:	mov	r1, #0
   1e338:	bl	12ebc <memset@plt>
   1e33c:	b	1e348 <flatcc_builder_reset@@Base+0x9c>
   1e340:	cmp	r2, #0
   1e344:	bne	1e444 <flatcc_builder_reset@@Base+0x198>
   1e348:	ldr	r0, [r4, #84]	; 0x54
   1e34c:	ldr	r2, [r4, #88]	; 0x58
   1e350:	cmp	r0, #0
   1e354:	beq	1e364 <flatcc_builder_reset@@Base+0xb8>
   1e358:	mov	r1, #0
   1e35c:	bl	12ebc <memset@plt>
   1e360:	b	1e36c <flatcc_builder_reset@@Base+0xc0>
   1e364:	cmp	r2, #0
   1e368:	bne	1e444 <flatcc_builder_reset@@Base+0x198>
   1e36c:	ldr	r0, [r4, #92]	; 0x5c
   1e370:	ldr	r2, [r4, #96]	; 0x60
   1e374:	cmp	r0, #0
   1e378:	beq	1e388 <flatcc_builder_reset@@Base+0xdc>
   1e37c:	mov	r1, #0
   1e380:	bl	12ebc <memset@plt>
   1e384:	b	1e390 <flatcc_builder_reset@@Base+0xe4>
   1e388:	cmp	r2, #0
   1e38c:	bne	1e444 <flatcc_builder_reset@@Base+0x198>
   1e390:	ldr	r0, [r4, #100]	; 0x64
   1e394:	ldr	r2, [r4, #104]	; 0x68
   1e398:	cmp	r0, #0
   1e39c:	beq	1e3ac <flatcc_builder_reset@@Base+0x100>
   1e3a0:	mov	r1, #0
   1e3a4:	bl	12ebc <memset@plt>
   1e3a8:	b	1e3b4 <flatcc_builder_reset@@Base+0x108>
   1e3ac:	cmp	r2, #0
   1e3b0:	bne	1e444 <flatcc_builder_reset@@Base+0x198>
   1e3b4:	ldr	r0, [r4, #108]	; 0x6c
   1e3b8:	ldr	r2, [r4, #112]	; 0x70
   1e3bc:	cmp	r0, #0
   1e3c0:	beq	1e3d0 <flatcc_builder_reset@@Base+0x124>
   1e3c4:	mov	r1, #0
   1e3c8:	bl	12ebc <memset@plt>
   1e3cc:	b	1e3d8 <flatcc_builder_reset@@Base+0x12c>
   1e3d0:	cmp	r2, #0
   1e3d4:	bne	1e444 <flatcc_builder_reset@@Base+0x198>
   1e3d8:	mov	r0, #0
   1e3dc:	str	r0, [r4, #120]	; 0x78
   1e3e0:	ldr	r1, [r4, #124]	; 0x7c
   1e3e4:	cmp	r1, #0
   1e3e8:	movne	r1, #16
   1e3ec:	strne	r1, [r4, #124]	; 0x7c
   1e3f0:	vmov.i32	q8, #0	; 0x00000000
   1e3f4:	add	r1, r4, #148	; 0x94
   1e3f8:	str	r0, [r4, #136]	; 0x88
   1e3fc:	str	r0, [r4, #140]	; 0x8c
   1e400:	strh	r0, [r4, #128]	; 0x80
   1e404:	str	r0, [r4, #32]
   1e408:	vst1.32	{d16-d17}, [r1]
   1e40c:	ldr	r1, [r4, #184]	; 0xb8
   1e410:	ldr	r2, [r4, #60]	; 0x3c
   1e414:	ldr	r3, [r4, #76]	; 0x4c
   1e418:	ldr	ip, [r4, #52]	; 0x34
   1e41c:	cmp	r1, #0
   1e420:	str	r2, [r4, #16]
   1e424:	str	r0, [r4, #20]
   1e428:	str	r0, [r4, #24]
   1e42c:	stm	r4, {r3, ip}
   1e430:	beq	1e43c <flatcc_builder_reset@@Base+0x190>
   1e434:	add	r0, r4, #188	; 0xbc
   1e438:	bl	22df4 <flatcc_emitter_reset@@Base>
   1e43c:	mov	r0, #0
   1e440:	pop	{r4, sl, fp, pc}
   1e444:	ldr	r0, [pc, #24]	; 1e464 <flatcc_builder_reset@@Base+0x1b8>
   1e448:	ldr	r1, [pc, #24]	; 1e468 <flatcc_builder_reset@@Base+0x1bc>
   1e44c:	ldr	r3, [pc, #24]	; 1e46c <flatcc_builder_reset@@Base+0x1c0>
   1e450:	movw	r2, #434	; 0x1b2
   1e454:	add	r0, pc, r0
   1e458:	add	r1, pc, r1
   1e45c:	add	r3, pc, r3
   1e460:	bl	12f04 <__assert_fail@plt>
   1e464:			; <UNDEFINED> instruction: 0x00009cb0
   1e468:			; <UNDEFINED> instruction: 0x00009cbe
   1e46c:	andeq	r9, r0, r7, lsl sp

0001e470 <flatcc_builder_clear@@Base>:
   1e470:	push	{r4, sl, fp, lr}
   1e474:	add	fp, sp, #8
   1e478:	sub	sp, sp, #8
   1e47c:	mov	r4, r0
   1e480:	ldr	r0, [r0, #40]	; 0x28
   1e484:	mov	r1, #0
   1e488:	mov	r2, #0
   1e48c:	mov	r3, #0
   1e490:	ldr	ip, [r4, #48]	; 0x30
   1e494:	str	r1, [sp]
   1e498:	add	r1, r4, #52	; 0x34
   1e49c:	blx	ip
   1e4a0:	ldr	r0, [r4, #40]	; 0x28
   1e4a4:	ldr	ip, [r4, #48]	; 0x30
   1e4a8:	mov	r1, #1
   1e4ac:	mov	r2, #0
   1e4b0:	mov	r3, #0
   1e4b4:	str	r1, [sp]
   1e4b8:	add	r1, r4, #60	; 0x3c
   1e4bc:	blx	ip
   1e4c0:	ldr	r0, [r4, #40]	; 0x28
   1e4c4:	ldr	ip, [r4, #48]	; 0x30
   1e4c8:	mov	r1, #2
   1e4cc:	mov	r2, #0
   1e4d0:	mov	r3, #0
   1e4d4:	str	r1, [sp]
   1e4d8:	add	r1, r4, #68	; 0x44
   1e4dc:	blx	ip
   1e4e0:	ldr	r0, [r4, #40]	; 0x28
   1e4e4:	ldr	ip, [r4, #48]	; 0x30
   1e4e8:	mov	r1, #3
   1e4ec:	mov	r2, #0
   1e4f0:	mov	r3, #0
   1e4f4:	str	r1, [sp]
   1e4f8:	add	r1, r4, #76	; 0x4c
   1e4fc:	blx	ip
   1e500:	ldr	r0, [r4, #40]	; 0x28
   1e504:	ldr	ip, [r4, #48]	; 0x30
   1e508:	mov	r1, #4
   1e50c:	mov	r2, #0
   1e510:	mov	r3, #0
   1e514:	str	r1, [sp]
   1e518:	add	r1, r4, #84	; 0x54
   1e51c:	blx	ip
   1e520:	ldr	r0, [r4, #40]	; 0x28
   1e524:	ldr	ip, [r4, #48]	; 0x30
   1e528:	mov	r1, #5
   1e52c:	mov	r2, #0
   1e530:	mov	r3, #0
   1e534:	str	r1, [sp]
   1e538:	add	r1, r4, #92	; 0x5c
   1e53c:	blx	ip
   1e540:	ldr	r0, [r4, #40]	; 0x28
   1e544:	ldr	ip, [r4, #48]	; 0x30
   1e548:	mov	r1, #6
   1e54c:	mov	r2, #0
   1e550:	mov	r3, #0
   1e554:	str	r1, [sp]
   1e558:	add	r1, r4, #100	; 0x64
   1e55c:	blx	ip
   1e560:	ldr	r0, [r4, #40]	; 0x28
   1e564:	ldr	ip, [r4, #48]	; 0x30
   1e568:	mov	r1, #7
   1e56c:	mov	r2, #0
   1e570:	mov	r3, #0
   1e574:	str	r1, [sp]
   1e578:	add	r1, r4, #108	; 0x6c
   1e57c:	blx	ip
   1e580:	ldr	r0, [r4, #184]	; 0xb8
   1e584:	cmp	r0, #0
   1e588:	beq	1e594 <flatcc_builder_clear@@Base+0x124>
   1e58c:	add	r0, r4, #188	; 0xbc
   1e590:	bl	22ec0 <flatcc_emitter_clear@@Base>
   1e594:	mov	r0, r4
   1e598:	mov	r1, #0
   1e59c:	mov	r2, #232	; 0xe8
   1e5a0:	sub	sp, fp, #8
   1e5a4:	pop	{r4, sl, fp, lr}
   1e5a8:	b	12ebc <memset@plt>

0001e5ac <flatcc_builder_enter_user_frame_ptr@@Base>:
   1e5ac:	push	{r4, r5, r6, r7, fp, lr}
   1e5b0:	add	fp, sp, #16
   1e5b4:	sub	sp, sp, #8
   1e5b8:	mov	r4, r0
   1e5bc:	ldr	r0, [r0, #112]	; 0x70
   1e5c0:	add	r1, r1, #7
   1e5c4:	ldr	r7, [r4, #228]	; 0xe4
   1e5c8:	bic	r5, r1, #3
   1e5cc:	add	r6, r4, #108	; 0x6c
   1e5d0:	add	r2, r7, r5
   1e5d4:	cmp	r2, r0
   1e5d8:	bls	1e600 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   1e5dc:	ldr	r0, [r4, #40]	; 0x28
   1e5e0:	ldr	ip, [r4, #48]	; 0x30
   1e5e4:	mov	r1, #7
   1e5e8:	mov	r3, #0
   1e5ec:	str	r1, [sp]
   1e5f0:	mov	r1, r6
   1e5f4:	blx	ip
   1e5f8:	cmp	r0, #0
   1e5fc:	bne	1e64c <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
   1e600:	ldr	r0, [r6]
   1e604:	adds	r6, r0, r7
   1e608:	beq	1e63c <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
   1e60c:	mov	r0, r6
   1e610:	mov	r1, #0
   1e614:	mov	r2, r5
   1e618:	bl	12ebc <memset@plt>
   1e61c:	ldr	r0, [r4, #224]	; 0xe0
   1e620:	str	r0, [r6], #4
   1e624:	ldr	r0, [r4, #228]	; 0xe4
   1e628:	add	r1, r0, #4
   1e62c:	add	r0, r0, r5
   1e630:	str	r1, [r4, #224]	; 0xe0
   1e634:	str	r0, [r4, #228]	; 0xe4
   1e638:	b	1e640 <flatcc_builder_enter_user_frame_ptr@@Base+0x94>
   1e63c:	mov	r6, #0
   1e640:	mov	r0, r6
   1e644:	sub	sp, fp, #16
   1e648:	pop	{r4, r5, r6, r7, fp, pc}
   1e64c:	ldr	r0, [pc, #24]	; 1e66c <flatcc_builder_enter_user_frame_ptr@@Base+0xc0>
   1e650:	ldr	r1, [pc, #24]	; 1e670 <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   1e654:	ldr	r3, [pc, #24]	; 1e674 <flatcc_builder_enter_user_frame_ptr@@Base+0xc8>
   1e658:	mov	r2, #308	; 0x134
   1e65c:	add	r0, pc, r0
   1e660:	add	r1, pc, r1
   1e664:	add	r3, pc, r3
   1e668:	bl	12f04 <__assert_fail@plt>
   1e66c:	andeq	sl, r0, r7, ror ip
   1e670:			; <UNDEFINED> instruction: 0x00009ab6
   1e674:	andeq	sl, r0, r9, lsr #21

0001e678 <flatcc_builder_enter_user_frame@@Base>:
   1e678:	push	{r4, r5, r6, r7, fp, lr}
   1e67c:	add	fp, sp, #16
   1e680:	sub	sp, sp, #8
   1e684:	mov	r4, r0
   1e688:	ldr	r0, [r0, #112]	; 0x70
   1e68c:	add	r1, r1, #7
   1e690:	ldr	r7, [r4, #228]	; 0xe4
   1e694:	bic	r5, r1, #3
   1e698:	add	r6, r4, #108	; 0x6c
   1e69c:	add	r2, r7, r5
   1e6a0:	cmp	r2, r0
   1e6a4:	bls	1e6cc <flatcc_builder_enter_user_frame@@Base+0x54>
   1e6a8:	ldr	r0, [r4, #40]	; 0x28
   1e6ac:	ldr	ip, [r4, #48]	; 0x30
   1e6b0:	mov	r1, #7
   1e6b4:	mov	r3, #0
   1e6b8:	str	r1, [sp]
   1e6bc:	mov	r1, r6
   1e6c0:	blx	ip
   1e6c4:	cmp	r0, #0
   1e6c8:	bne	1e718 <flatcc_builder_enter_user_frame@@Base+0xa0>
   1e6cc:	ldr	r0, [r6]
   1e6d0:	adds	r6, r0, r7
   1e6d4:	beq	1e70c <flatcc_builder_enter_user_frame@@Base+0x94>
   1e6d8:	mov	r0, r6
   1e6dc:	mov	r1, #0
   1e6e0:	mov	r2, r5
   1e6e4:	bl	12ebc <memset@plt>
   1e6e8:	ldr	r0, [r4, #224]	; 0xe0
   1e6ec:	str	r0, [r6]
   1e6f0:	ldr	r1, [r4, #228]	; 0xe4
   1e6f4:	add	r0, r1, #4
   1e6f8:	add	r1, r1, r5
   1e6fc:	str	r0, [r4, #224]	; 0xe0
   1e700:	str	r1, [r4, #228]	; 0xe4
   1e704:	sub	sp, fp, #16
   1e708:	pop	{r4, r5, r6, r7, fp, pc}
   1e70c:	mov	r0, #0
   1e710:	sub	sp, fp, #16
   1e714:	pop	{r4, r5, r6, r7, fp, pc}
   1e718:	ldr	r0, [pc, #24]	; 1e738 <flatcc_builder_enter_user_frame@@Base+0xc0>
   1e71c:	ldr	r1, [pc, #24]	; 1e73c <flatcc_builder_enter_user_frame@@Base+0xc4>
   1e720:	ldr	r3, [pc, #24]	; 1e740 <flatcc_builder_enter_user_frame@@Base+0xc8>
   1e724:	mov	r2, #308	; 0x134
   1e728:	add	r0, pc, r0
   1e72c:	add	r1, pc, r1
   1e730:	add	r3, pc, r3
   1e734:	bl	12f04 <__assert_fail@plt>
   1e738:	andeq	sl, r0, fp, lsr #23
   1e73c:	andeq	r9, r0, sl, ror #19
   1e740:	ldrdeq	sl, [r0], -sp

0001e744 <flatcc_builder_exit_user_frame@@Base>:
   1e744:	push	{fp, lr}
   1e748:	mov	fp, sp
   1e74c:	ldr	r1, [r0, #224]	; 0xe0
   1e750:	cmp	r1, #0
   1e754:	subne	r2, r1, #4
   1e758:	strne	r2, [r0, #228]	; 0xe4
   1e75c:	ldrne	r2, [r0, #108]	; 0x6c
   1e760:	addne	r1, r2, r1
   1e764:	ldrne	r1, [r1, #-4]
   1e768:	strne	r1, [r0, #224]	; 0xe0
   1e76c:	movne	r0, r1
   1e770:	popne	{fp, pc}
   1e774:	ldr	r0, [pc, #24]	; 1e794 <flatcc_builder_exit_user_frame@@Base+0x50>
   1e778:	ldr	r1, [pc, #24]	; 1e798 <flatcc_builder_exit_user_frame@@Base+0x54>
   1e77c:	ldr	r3, [pc, #24]	; 1e79c <flatcc_builder_exit_user_frame@@Base+0x58>
   1e780:	movw	r2, #542	; 0x21e
   1e784:	add	r0, pc, r0
   1e788:	add	r1, pc, r1
   1e78c:	add	r3, pc, r3
   1e790:	bl	12f04 <__assert_fail@plt>
   1e794:	andeq	r9, r0, sp, lsr #20
   1e798:	andeq	r9, r0, lr, lsl #19
   1e79c:	andeq	r9, r0, lr, lsr sl

0001e7a0 <flatcc_builder_exit_user_frame_at@@Base>:
   1e7a0:	push	{fp, lr}
   1e7a4:	mov	fp, sp
   1e7a8:	ldr	r2, [r0, #224]	; 0xe0
   1e7ac:	cmp	r2, r1
   1e7b0:	bcc	1e7fc <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   1e7b4:	cmp	r1, #0
   1e7b8:	str	r1, [r0, #224]	; 0xe0
   1e7bc:	subne	r2, r1, #4
   1e7c0:	strne	r2, [r0, #228]	; 0xe4
   1e7c4:	ldrne	r2, [r0, #108]	; 0x6c
   1e7c8:	addne	r1, r2, r1
   1e7cc:	ldrne	r1, [r1, #-4]
   1e7d0:	strne	r1, [r0, #224]	; 0xe0
   1e7d4:	movne	r0, r1
   1e7d8:	popne	{fp, pc}
   1e7dc:	ldr	r0, [pc, #68]	; 1e828 <flatcc_builder_exit_user_frame_at@@Base+0x88>
   1e7e0:	ldr	r1, [pc, #68]	; 1e82c <flatcc_builder_exit_user_frame_at@@Base+0x8c>
   1e7e4:	ldr	r3, [pc, #68]	; 1e830 <flatcc_builder_exit_user_frame_at@@Base+0x90>
   1e7e8:	movw	r2, #542	; 0x21e
   1e7ec:	add	r0, pc, r0
   1e7f0:	add	r1, pc, r1
   1e7f4:	add	r3, pc, r3
   1e7f8:	bl	12f04 <__assert_fail@plt>
   1e7fc:	ldr	r0, [pc, #24]	; 1e81c <flatcc_builder_exit_user_frame_at@@Base+0x7c>
   1e800:	ldr	r1, [pc, #24]	; 1e820 <flatcc_builder_exit_user_frame_at@@Base+0x80>
   1e804:	ldr	r3, [pc, #24]	; 1e824 <flatcc_builder_exit_user_frame_at@@Base+0x84>
   1e808:	movw	r2, #551	; 0x227
   1e80c:	add	r0, pc, r0
   1e810:	add	r1, pc, r1
   1e814:	add	r3, pc, r3
   1e818:	bl	12f04 <__assert_fail@plt>
   1e81c:	strdeq	r9, [r0], -r8
   1e820:	andeq	r9, r0, r6, lsl #18
   1e824:	andeq	r9, r0, pc, lsl #20
   1e828:	andeq	r9, r0, r5, asr #19
   1e82c:	andeq	r9, r0, r6, lsr #18
   1e830:	ldrdeq	r9, [r0], -r6

0001e834 <flatcc_builder_get_current_user_frame@@Base>:
   1e834:	ldr	r0, [r0, #224]	; 0xe0
   1e838:	bx	lr

0001e83c <flatcc_builder_get_user_frame_ptr@@Base>:
   1e83c:	ldr	r0, [r0, #108]	; 0x6c
   1e840:	add	r0, r0, r1
   1e844:	bx	lr

0001e848 <flatcc_builder_embed_buffer@@Base>:
   1e848:	push	{r4, r5, r6, r7, fp, lr}
   1e84c:	add	fp, sp, #16
   1e850:	sub	sp, sp, #88	; 0x58
   1e854:	mov	r4, r0
   1e858:	ldr	r0, [fp, #8]
   1e85c:	mov	r5, r3
   1e860:	mov	r7, r2
   1e864:	mov	r2, r1
   1e868:	sub	r1, fp, #18
   1e86c:	strh	r0, [fp, #-18]	; 0xffffffee
   1e870:	mov	r0, r4
   1e874:	ldr	r3, [r4, #152]	; 0x98
   1e878:	cmp	r3, #0
   1e87c:	movwne	r3, #1
   1e880:	bl	1e9d4 <flatcc_builder_embed_buffer@@Base+0x18c>
   1e884:	ldr	r1, [fp, #12]
   1e888:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1e88c:	ldr	r0, [r4, #136]	; 0x88
   1e890:	mov	r2, #0
   1e894:	str	r2, [sp, #12]
   1e898:	str	r2, [sp, #8]
   1e89c:	and	r1, r1, #2
   1e8a0:	sub	r3, r3, #1
   1e8a4:	add	r1, r5, r1, lsl #1
   1e8a8:	sub	r1, r0, r1
   1e8ac:	and	r3, r1, r3
   1e8b0:	add	r1, r3, r5
   1e8b4:	str	r1, [fp, #-24]	; 0xffffffe8
   1e8b8:	ldr	r1, [r4, #152]	; 0x98
   1e8bc:	cmp	r1, #0
   1e8c0:	mov	r1, #0
   1e8c4:	beq	1e8e4 <flatcc_builder_embed_buffer@@Base+0x9c>
   1e8c8:	mov	r1, #4
   1e8cc:	sub	r2, fp, #24
   1e8d0:	str	r1, [sp, #20]
   1e8d4:	str	r2, [sp, #16]
   1e8d8:	mov	r2, #1
   1e8dc:	str	r1, [sp, #8]
   1e8e0:	str	r2, [sp, #12]
   1e8e4:	cmp	r5, #0
   1e8e8:	beq	1e90c <flatcc_builder_embed_buffer@@Base+0xc4>
   1e8ec:	add	r6, sp, #8
   1e8f0:	add	r1, r1, r5
   1e8f4:	add	r6, r6, r2, lsl #3
   1e8f8:	add	r2, r2, #1
   1e8fc:	str	r1, [sp, #8]
   1e900:	str	r7, [r6, #8]
   1e904:	str	r5, [r6, #12]
   1e908:	str	r2, [sp, #12]
   1e90c:	cmp	r3, #0
   1e910:	beq	1e93c <flatcc_builder_embed_buffer@@Base+0xf4>
   1e914:	add	r1, r1, r3
   1e918:	add	r7, sp, #8
   1e91c:	str	r1, [sp, #8]
   1e920:	add	r7, r7, r2, lsl #3
   1e924:	add	r2, r2, #1
   1e928:	ldr	r6, [pc, #136]	; 1e9b8 <flatcc_builder_embed_buffer@@Base+0x170>
   1e92c:	ldr	r6, [pc, r6]
   1e930:	str	r6, [r7, #8]
   1e934:	str	r3, [r7, #12]
   1e938:	str	r2, [sp, #12]
   1e93c:	cmp	r1, #0
   1e940:	ble	1e998 <flatcc_builder_embed_buffer@@Base+0x150>
   1e944:	sub	r5, r0, r1
   1e948:	ldr	r0, [r4, #36]	; 0x24
   1e94c:	ldr	r7, [r4, #44]	; 0x2c
   1e950:	str	r1, [sp]
   1e954:	add	r1, sp, #8
   1e958:	add	r1, r1, #8
   1e95c:	mov	r3, r5
   1e960:	blx	r7
   1e964:	cmp	r0, #0
   1e968:	streq	r5, [r4, #136]	; 0x88
   1e96c:	moveq	r0, r5
   1e970:	subeq	sp, fp, #16
   1e974:	popeq	{r4, r5, r6, r7, fp, pc}
   1e978:	ldr	r0, [pc, #72]	; 1e9c8 <flatcc_builder_embed_buffer@@Base+0x180>
   1e97c:	ldr	r1, [pc, #72]	; 1e9cc <flatcc_builder_embed_buffer@@Base+0x184>
   1e980:	ldr	r3, [pc, #72]	; 1e9d0 <flatcc_builder_embed_buffer@@Base+0x188>
   1e984:	movw	r2, #651	; 0x28b
   1e988:	add	r0, pc, r0
   1e98c:	add	r1, pc, r1
   1e990:	add	r3, pc, r3
   1e994:	bl	12f04 <__assert_fail@plt>
   1e998:	ldr	r0, [pc, #28]	; 1e9bc <flatcc_builder_embed_buffer@@Base+0x174>
   1e99c:	ldr	r1, [pc, #28]	; 1e9c0 <flatcc_builder_embed_buffer@@Base+0x178>
   1e9a0:	ldr	r3, [pc, #28]	; 1e9c4 <flatcc_builder_embed_buffer@@Base+0x17c>
   1e9a4:	movw	r2, #647	; 0x287
   1e9a8:	add	r0, pc, r0
   1e9ac:	add	r1, pc, r1
   1e9b0:	add	r3, pc, r3
   1e9b4:	bl	12f04 <__assert_fail@plt>
   1e9b8:	andeq	fp, r1, r0, lsr r7
   1e9bc:	andeq	sl, r0, fp, lsr #18
   1e9c0:	andeq	r9, r0, sl, ror #14
   1e9c4:	andeq	sl, r0, r2, ror #15
   1e9c8:	andeq	sl, r0, fp, asr #18
   1e9cc:	andeq	r9, r0, sl, lsl #15
   1e9d0:	andeq	sl, r0, r2, lsl #16
   1e9d4:	push	{r4, sl, fp, lr}
   1e9d8:	add	fp, sp, #8
   1e9dc:	sub	sp, sp, #80	; 0x50
   1e9e0:	cmp	r2, #0
   1e9e4:	bne	1e9f4 <flatcc_builder_embed_buffer@@Base+0x1ac>
   1e9e8:	ldrh	r2, [r0, #132]	; 0x84
   1e9ec:	cmp	r2, #0
   1e9f0:	movweq	r2, #1
   1e9f4:	ldrh	r4, [r1]
   1e9f8:	cmp	r4, #4
   1e9fc:	movwcc	r4, #4
   1ea00:	cmpcs	r4, r2
   1ea04:	bcs	1ea14 <flatcc_builder_embed_buffer@@Base+0x1cc>
   1ea08:	cmp	r4, r2
   1ea0c:	movcc	r4, r2
   1ea10:	strh	r4, [r1]
   1ea14:	cmp	r3, #0
   1ea18:	bne	1ea8c <flatcc_builder_embed_buffer@@Base+0x244>
   1ea1c:	ldr	r4, [r0, #140]	; 0x8c
   1ea20:	sub	r1, r2, #1
   1ea24:	ands	r1, r4, r1
   1ea28:	beq	1ea8c <flatcc_builder_embed_buffer@@Base+0x244>
   1ea2c:	mov	r2, #1
   1ea30:	str	r1, [sp, #20]
   1ea34:	str	r1, [sp, #8]
   1ea38:	cmn	r1, #1
   1ea3c:	str	r2, [sp, #12]
   1ea40:	ldr	r2, [pc, #172]	; 1eaf4 <flatcc_builder_embed_buffer@@Base+0x2ac>
   1ea44:	ldr	r2, [pc, r2]
   1ea48:	str	r2, [sp, #16]
   1ea4c:	add	r2, r1, r4
   1ea50:	str	r2, [r0, #140]	; 0x8c
   1ea54:	ble	1ea94 <flatcc_builder_embed_buffer@@Base+0x24c>
   1ea58:	ldr	r2, [r0, #36]	; 0x24
   1ea5c:	ldr	ip, [r0, #44]	; 0x2c
   1ea60:	add	r0, sp, #8
   1ea64:	str	r1, [sp]
   1ea68:	mov	r3, r4
   1ea6c:	add	r1, r0, #8
   1ea70:	mov	r0, r2
   1ea74:	mov	r2, #1
   1ea78:	blx	ip
   1ea7c:	cmp	r0, #0
   1ea80:	bne	1eab4 <flatcc_builder_embed_buffer@@Base+0x26c>
   1ea84:	cmn	r4, #1
   1ea88:	beq	1ead4 <flatcc_builder_embed_buffer@@Base+0x28c>
   1ea8c:	sub	sp, fp, #8
   1ea90:	pop	{r4, sl, fp, pc}
   1ea94:	ldr	r0, [pc, #92]	; 1eaf8 <flatcc_builder_embed_buffer@@Base+0x2b0>
   1ea98:	ldr	r1, [pc, #92]	; 1eafc <flatcc_builder_embed_buffer@@Base+0x2b4>
   1ea9c:	ldr	r3, [pc, #92]	; 1eb00 <flatcc_builder_embed_buffer@@Base+0x2b8>
   1eaa0:	movw	r2, #673	; 0x2a1
   1eaa4:	add	r0, pc, r0
   1eaa8:	add	r1, pc, r1
   1eaac:	add	r3, pc, r3
   1eab0:	bl	12f04 <__assert_fail@plt>
   1eab4:	ldr	r0, [pc, #72]	; 1eb04 <flatcc_builder_embed_buffer@@Base+0x2bc>
   1eab8:	ldr	r1, [pc, #72]	; 1eb08 <flatcc_builder_embed_buffer@@Base+0x2c0>
   1eabc:	ldr	r3, [pc, #72]	; 1eb0c <flatcc_builder_embed_buffer@@Base+0x2c4>
   1eac0:	movw	r2, #677	; 0x2a5
   1eac4:	add	r0, pc, r0
   1eac8:	add	r1, pc, r1
   1eacc:	add	r3, pc, r3
   1ead0:	bl	12f04 <__assert_fail@plt>
   1ead4:	ldr	r0, [pc, #52]	; 1eb10 <flatcc_builder_embed_buffer@@Base+0x2c8>
   1ead8:	ldr	r1, [pc, #52]	; 1eb14 <flatcc_builder_embed_buffer@@Base+0x2cc>
   1eadc:	ldr	r3, [pc, #52]	; 1eb18 <flatcc_builder_embed_buffer@@Base+0x2d0>
   1eae0:	movw	r2, #702	; 0x2be
   1eae4:	add	r0, pc, r0
   1eae8:	add	r1, pc, r1
   1eaec:	add	r3, pc, r3
   1eaf0:	bl	12f04 <__assert_fail@plt>
   1eaf4:	andeq	fp, r1, r8, lsl r6
   1eaf8:	andeq	sl, r0, pc, lsr #16
   1eafc:	andeq	r9, r0, lr, ror #12
   1eb00:	andeq	sl, r0, r2, lsr #15
   1eb04:	andeq	sl, r0, pc, lsl #16
   1eb08:	andeq	r9, r0, lr, asr #12
   1eb0c:	andeq	sl, r0, r2, lsl #15
   1eb10:	andeq	sl, r0, pc, ror #15
   1eb14:	andeq	r9, r0, lr, lsr #12
   1eb18:	andeq	sl, r0, r4, ror #12

0001eb1c <flatcc_builder_create_buffer@@Base>:
   1eb1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb20:	add	fp, sp, #28
   1eb24:	sub	sp, sp, #100	; 0x64
   1eb28:	ldr	sl, [fp, #12]
   1eb2c:	mov	r4, r0
   1eb30:	ldr	r0, [fp, #8]
   1eb34:	mov	r7, r1
   1eb38:	mov	r5, #0
   1eb3c:	mov	r6, r3
   1eb40:	sub	r1, fp, #30
   1eb44:	str	r5, [sp, #12]
   1eb48:	and	r9, sl, #1
   1eb4c:	strh	r0, [fp, #-30]	; 0xffffffe2
   1eb50:	mov	r0, r4
   1eb54:	mov	r3, r9
   1eb58:	bl	1e9d4 <flatcc_builder_embed_buffer@@Base+0x18c>
   1eb5c:	ldrh	r0, [r4, #128]	; 0x80
   1eb60:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   1eb64:	str	r6, [sp, #8]
   1eb68:	cmp	r0, r1
   1eb6c:	strhcc	r1, [r4, #128]	; 0x80
   1eb70:	cmp	r7, #0
   1eb74:	beq	1eb90 <flatcc_builder_create_buffer@@Base+0x74>
   1eb78:	ldr	r5, [r7]
   1eb7c:	cmp	r5, #0
   1eb80:	str	r5, [sp, #12]
   1eb84:	movwne	r5, #1
   1eb88:	lsl	r7, r5, #2
   1eb8c:	b	1eb94 <flatcc_builder_create_buffer@@Base+0x78>
   1eb90:	mov	r7, #0
   1eb94:	ldr	r0, [r4, #136]	; 0x88
   1eb98:	and	r2, sl, #2
   1eb9c:	mov	r3, #0
   1eba0:	sub	r6, r1, #1
   1eba4:	ands	ip, sl, #3
   1eba8:	mov	sl, #4
   1ebac:	mov	r1, #4
   1ebb0:	str	r3, [sp, #20]
   1ebb4:	str	r3, [sp, #16]
   1ebb8:	sub	r2, r0, r2, lsl #1
   1ebbc:	sub	r2, r2, r7
   1ebc0:	sub	r2, r2, #4
   1ebc4:	beq	1ebe8 <flatcc_builder_create_buffer@@Base+0xcc>
   1ebc8:	mov	r1, #4
   1ebcc:	sub	r3, fp, #40	; 0x28
   1ebd0:	str	r1, [sp, #28]
   1ebd4:	str	r3, [sp, #24]
   1ebd8:	str	r1, [sp, #16]
   1ebdc:	mov	r3, #1
   1ebe0:	mov	r1, #8
   1ebe4:	str	r3, [sp, #20]
   1ebe8:	add	lr, sp, #16
   1ebec:	and	r6, r2, r6
   1ebf0:	sub	r8, fp, #36	; 0x24
   1ebf4:	str	r1, [sp, #16]
   1ebf8:	cmp	r5, #0
   1ebfc:	add	r2, lr, r3, lsl #3
   1ec00:	str	r8, [r2, #8]
   1ec04:	str	sl, [r2, #12]
   1ec08:	add	r2, r3, #1
   1ec0c:	str	r2, [sp, #20]
   1ec10:	beq	1ec34 <flatcc_builder_create_buffer@@Base+0x118>
   1ec14:	add	r2, lr, r2, lsl #3
   1ec18:	add	r1, r1, r7
   1ec1c:	add	r5, sp, #12
   1ec20:	str	r1, [sp, #16]
   1ec24:	str	r5, [r2, #8]
   1ec28:	str	r7, [r2, #12]
   1ec2c:	orr	r2, r3, #2
   1ec30:	str	r2, [sp, #20]
   1ec34:	cmp	r6, #0
   1ec38:	beq	1ec60 <flatcc_builder_create_buffer@@Base+0x144>
   1ec3c:	add	r1, r1, r6
   1ec40:	add	r3, lr, r2, lsl #3
   1ec44:	add	r2, r2, #1
   1ec48:	str	r1, [sp, #16]
   1ec4c:	ldr	r5, [pc, #220]	; 1ed30 <flatcc_builder_create_buffer@@Base+0x214>
   1ec50:	ldr	r5, [pc, r5]
   1ec54:	str	r5, [r3, #8]
   1ec58:	str	r6, [r3, #12]
   1ec5c:	str	r2, [sp, #20]
   1ec60:	sub	r7, r0, r1
   1ec64:	cmp	ip, #0
   1ec68:	mov	r6, #144	; 0x90
   1ec6c:	ldr	r3, [sp, #8]
   1ec70:	mov	r0, r7
   1ec74:	addne	r0, r0, #4
   1ec78:	cmp	r9, #0
   1ec7c:	movweq	r6, #140	; 0x8c
   1ec80:	cmp	r1, #0
   1ec84:	ldr	r6, [r4, r6]
   1ec88:	sub	r3, r3, r0
   1ec8c:	str	r3, [fp, #-36]	; 0xffffffdc
   1ec90:	sub	r0, r6, r0
   1ec94:	str	r0, [fp, #-40]	; 0xffffffd8
   1ec98:	ble	1ecf0 <flatcc_builder_create_buffer@@Base+0x1d4>
   1ec9c:	ldr	r0, [r4, #36]	; 0x24
   1eca0:	ldr	r6, [r4, #44]	; 0x2c
   1eca4:	str	r1, [sp]
   1eca8:	add	r1, lr, #8
   1ecac:	mov	r3, r7
   1ecb0:	blx	r6
   1ecb4:	cmp	r0, #0
   1ecb8:	bne	1ed10 <flatcc_builder_create_buffer@@Base+0x1f4>
   1ecbc:	cmp	r7, #0
   1ecc0:	str	r7, [r4, #136]	; 0x88
   1ecc4:	movne	r0, r7
   1ecc8:	subne	sp, fp, #28
   1eccc:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ecd0:	ldr	r0, [pc, #116]	; 1ed4c <flatcc_builder_create_buffer@@Base+0x230>
   1ecd4:	ldr	r1, [pc, #116]	; 1ed50 <flatcc_builder_create_buffer@@Base+0x234>
   1ecd8:	ldr	r3, [pc, #116]	; 1ed54 <flatcc_builder_create_buffer@@Base+0x238>
   1ecdc:	mov	r2, #772	; 0x304
   1ece0:	add	r0, pc, r0
   1ece4:	add	r1, pc, r1
   1ece8:	add	r3, pc, r3
   1ecec:	bl	12f04 <__assert_fail@plt>
   1ecf0:	ldr	r0, [pc, #60]	; 1ed34 <flatcc_builder_create_buffer@@Base+0x218>
   1ecf4:	ldr	r1, [pc, #60]	; 1ed38 <flatcc_builder_create_buffer@@Base+0x21c>
   1ecf8:	ldr	r3, [pc, #60]	; 1ed3c <flatcc_builder_create_buffer@@Base+0x220>
   1ecfc:	movw	r2, #647	; 0x287
   1ed00:	add	r0, pc, r0
   1ed04:	add	r1, pc, r1
   1ed08:	add	r3, pc, r3
   1ed0c:	bl	12f04 <__assert_fail@plt>
   1ed10:	ldr	r0, [pc, #40]	; 1ed40 <flatcc_builder_create_buffer@@Base+0x224>
   1ed14:	ldr	r1, [pc, #40]	; 1ed44 <flatcc_builder_create_buffer@@Base+0x228>
   1ed18:	ldr	r3, [pc, #40]	; 1ed48 <flatcc_builder_create_buffer@@Base+0x22c>
   1ed1c:	movw	r2, #651	; 0x28b
   1ed20:	add	r0, pc, r0
   1ed24:	add	r1, pc, r1
   1ed28:	add	r3, pc, r3
   1ed2c:	bl	12f04 <__assert_fail@plt>
   1ed30:	andeq	fp, r1, ip, lsl #8
   1ed34:	ldrdeq	sl, [r0], -r3
   1ed38:	andeq	r9, r0, r2, lsl r4
   1ed3c:	andeq	sl, r0, sl, lsl #9
   1ed40:			; <UNDEFINED> instruction: 0x0000a5b3
   1ed44:	strdeq	r9, [r0], -r2
   1ed48:	andeq	sl, r0, sl, ror #8
   1ed4c:	strdeq	sl, [r0], -r3
   1ed50:	andeq	r9, r0, r2, lsr r4
   1ed54:	andeq	r9, r0, r0, lsl #11

0001ed58 <flatcc_builder_create_struct@@Base>:
   1ed58:	push	{r4, r5, r6, sl, fp, lr}
   1ed5c:	add	fp, sp, #16
   1ed60:	sub	sp, sp, #80	; 0x50
   1ed64:	cmp	r3, #0
   1ed68:	beq	1ee40 <flatcc_builder_create_struct@@Base+0xe8>
   1ed6c:	mov	r5, r0
   1ed70:	ldrh	r0, [r0, #128]	; 0x80
   1ed74:	mov	r4, #0
   1ed78:	cmp	r0, r3
   1ed7c:	strhcc	r3, [r5, #128]	; 0x80
   1ed80:	sub	r3, r3, #1
   1ed84:	cmp	r2, #0
   1ed88:	ldr	r0, [r5, #136]	; 0x88
   1ed8c:	str	r4, [sp, #12]
   1ed90:	str	r4, [sp, #8]
   1ed94:	movne	r4, #1
   1ed98:	strne	r2, [sp, #20]
   1ed9c:	strne	r1, [sp, #16]
   1eda0:	strne	r2, [sp, #8]
   1eda4:	strne	r4, [sp, #12]
   1eda8:	sub	r6, r0, r2
   1edac:	and	r3, r6, r3
   1edb0:	cmp	r3, #0
   1edb4:	beq	1ede0 <flatcc_builder_create_struct@@Base+0x88>
   1edb8:	add	r2, r3, r2
   1edbc:	add	r1, sp, #8
   1edc0:	str	r2, [sp, #8]
   1edc4:	add	r1, r1, r4, lsl #3
   1edc8:	add	r4, r4, #1
   1edcc:	ldr	r6, [pc, #172]	; 1ee80 <flatcc_builder_create_struct@@Base+0x128>
   1edd0:	ldr	r6, [pc, r6]
   1edd4:	str	r6, [r1, #8]
   1edd8:	str	r3, [r1, #12]
   1eddc:	str	r4, [sp, #12]
   1ede0:	cmp	r2, #0
   1ede4:	ble	1ee60 <flatcc_builder_create_struct@@Base+0x108>
   1ede8:	sub	r6, r0, r2
   1edec:	ldr	r0, [r5, #36]	; 0x24
   1edf0:	ldr	ip, [r5, #44]	; 0x2c
   1edf4:	add	r1, sp, #8
   1edf8:	str	r2, [sp]
   1edfc:	mov	r2, r4
   1ee00:	add	r1, r1, #8
   1ee04:	mov	r3, r6
   1ee08:	blx	ip
   1ee0c:	cmp	r0, #0
   1ee10:	streq	r6, [r5, #136]	; 0x88
   1ee14:	moveq	r0, r6
   1ee18:	subeq	sp, fp, #16
   1ee1c:	popeq	{r4, r5, r6, sl, fp, pc}
   1ee20:	ldr	r0, [pc, #116]	; 1ee9c <flatcc_builder_create_struct@@Base+0x144>
   1ee24:	ldr	r1, [pc, #116]	; 1eea0 <flatcc_builder_create_struct@@Base+0x148>
   1ee28:	ldr	r3, [pc, #116]	; 1eea4 <flatcc_builder_create_struct@@Base+0x14c>
   1ee2c:	movw	r2, #651	; 0x28b
   1ee30:	add	r0, pc, r0
   1ee34:	add	r1, pc, r1
   1ee38:	add	r3, pc, r3
   1ee3c:	bl	12f04 <__assert_fail@plt>
   1ee40:	ldr	r0, [pc, #60]	; 1ee84 <flatcc_builder_create_struct@@Base+0x12c>
   1ee44:	ldr	r1, [pc, #60]	; 1ee88 <flatcc_builder_create_struct@@Base+0x130>
   1ee48:	ldr	r3, [pc, #60]	; 1ee8c <flatcc_builder_create_struct@@Base+0x134>
   1ee4c:	movw	r2, #783	; 0x30f
   1ee50:	add	r0, pc, r0
   1ee54:	add	r1, pc, r1
   1ee58:	add	r3, pc, r3
   1ee5c:	bl	12f04 <__assert_fail@plt>
   1ee60:	ldr	r0, [pc, #40]	; 1ee90 <flatcc_builder_create_struct@@Base+0x138>
   1ee64:	ldr	r1, [pc, #40]	; 1ee94 <flatcc_builder_create_struct@@Base+0x13c>
   1ee68:	ldr	r3, [pc, #40]	; 1ee98 <flatcc_builder_create_struct@@Base+0x140>
   1ee6c:	movw	r2, #647	; 0x287
   1ee70:	add	r0, pc, r0
   1ee74:	add	r1, pc, r1
   1ee78:	add	r3, pc, r3
   1ee7c:	bl	12f04 <__assert_fail@plt>
   1ee80:	andeq	fp, r1, ip, lsl #5
   1ee84:	muleq	r0, fp, r4
   1ee88:	andeq	r9, r0, r2, asr #5
   1ee8c:	muleq	r0, lr, r4
   1ee90:	andeq	sl, r0, r3, ror #8
   1ee94:	andeq	r9, r0, r2, lsr #5
   1ee98:	andeq	sl, r0, sl, lsl r3
   1ee9c:	andeq	sl, r0, r3, lsr #9
   1eea0:	andeq	r9, r0, r2, ror #5
   1eea4:	andeq	sl, r0, sl, asr r3

0001eea8 <flatcc_builder_start_buffer@@Base>:
   1eea8:	push	{r4, r5, r6, r7, fp, lr}
   1eeac:	add	fp, sp, #16
   1eeb0:	mov	r5, r1
   1eeb4:	ldrh	r1, [r0, #128]	; 0x80
   1eeb8:	mov	r6, r3
   1eebc:	mov	r7, r2
   1eec0:	mov	r4, r0
   1eec4:	bl	1ef68 <flatcc_builder_start_buffer@@Base+0xc0>
   1eec8:	mov	r1, r0
   1eecc:	mvn	r0, #0
   1eed0:	cmp	r1, #0
   1eed4:	popne	{r4, r5, r6, r7, fp, pc}
   1eed8:	mov	r0, #1
   1eedc:	cmp	r5, #0
   1eee0:	strh	r0, [r4, #128]	; 0x80
   1eee4:	ldrh	r1, [r4, #132]	; 0x84
   1eee8:	ldr	r2, [r4, #32]
   1eeec:	strh	r1, [r2, #34]	; 0x22
   1eef0:	strh	r7, [r4, #132]	; 0x84
   1eef4:	ldrh	r1, [r4, #164]	; 0xa4
   1eef8:	ldr	r2, [r4, #32]
   1eefc:	strh	r1, [r2, #32]
   1ef00:	strh	r6, [r4, #164]	; 0xa4
   1ef04:	ldr	r1, [r4, #32]
   1ef08:	ldr	r2, [r4, #144]	; 0x90
   1ef0c:	str	r2, [r1, #20]
   1ef10:	ldr	r1, [r4, #32]
   1ef14:	ldr	r2, [r4, #152]	; 0x98
   1ef18:	str	r2, [r1, #28]
   1ef1c:	ldr	r3, [r4, #148]	; 0x94
   1ef20:	ldr	r1, [r4, #32]
   1ef24:	ldr	r2, [r4, #136]	; 0x88
   1ef28:	ldr	r7, [r4, #168]	; 0xa8
   1ef2c:	add	r6, r3, #1
   1ef30:	str	r2, [r4, #144]	; 0x90
   1ef34:	str	r6, [r4, #148]	; 0x94
   1ef38:	str	r3, [r4, #152]	; 0x98
   1ef3c:	str	r7, [r1, #16]
   1ef40:	ldr	r1, [pc, #28]	; 1ef64 <flatcc_builder_start_buffer@@Base+0xbc>
   1ef44:	ldr	r1, [pc, r1]
   1ef48:	movne	r1, r5
   1ef4c:	ldr	r1, [r1]
   1ef50:	str	r1, [r4, #168]	; 0xa8
   1ef54:	ldr	r1, [r4, #32]
   1ef58:	strh	r0, [r1, #14]
   1ef5c:	mov	r0, #0
   1ef60:	pop	{r4, r5, r6, r7, fp, pc}
   1ef64:	andeq	fp, r1, r8, lsl r1
   1ef68:	push	{r4, r5, r6, r7, fp, lr}
   1ef6c:	add	fp, sp, #16
   1ef70:	sub	sp, sp, #8
   1ef74:	mov	r5, r1
   1ef78:	ldr	r1, [r0, #156]	; 0x9c
   1ef7c:	ldr	r2, [r0, #160]	; 0xa0
   1ef80:	mov	r4, r0
   1ef84:	add	r0, r1, #1
   1ef88:	cmp	r1, r2
   1ef8c:	str	r0, [r4, #156]	; 0x9c
   1ef90:	bge	1efa4 <flatcc_builder_start_buffer@@Base+0xfc>
   1ef94:	ldr	r0, [r4, #32]
   1ef98:	add	r0, r0, #36	; 0x24
   1ef9c:	str	r0, [r4, #32]
   1efa0:	b	1f038 <flatcc_builder_start_buffer@@Base+0x190>
   1efa4:	ldr	r2, [r4, #176]	; 0xb0
   1efa8:	mvn	r6, #0
   1efac:	cmp	r2, #1
   1efb0:	cmpge	r1, r2
   1efb4:	bge	1f070 <flatcc_builder_start_buffer@@Base+0x1c8>
   1efb8:	add	r7, r0, r0, lsl #3
   1efbc:	ldr	r0, [r4, #88]	; 0x58
   1efc0:	lsl	r2, r7, #2
   1efc4:	cmp	r2, r0
   1efc8:	bls	1eff0 <flatcc_builder_start_buffer@@Base+0x148>
   1efcc:	ldr	r0, [r4, #40]	; 0x28
   1efd0:	ldr	ip, [r4, #48]	; 0x30
   1efd4:	mov	r3, #4
   1efd8:	add	r1, r4, #84	; 0x54
   1efdc:	str	r3, [sp]
   1efe0:	mov	r3, #0
   1efe4:	blx	ip
   1efe8:	cmp	r0, #0
   1efec:	bne	1f07c <flatcc_builder_start_buffer@@Base+0x1d4>
   1eff0:	ldr	r1, [r4, #84]	; 0x54
   1eff4:	mvn	r0, #35	; 0x23
   1eff8:	add	r0, r0, r7, lsl #2
   1effc:	adds	r0, r0, r1
   1f000:	str	r0, [r4, #32]
   1f004:	beq	1f070 <flatcc_builder_start_buffer@@Base+0x1c8>
   1f008:	ldr	r1, [r4, #88]	; 0x58
   1f00c:	movw	r3, #36409	; 0x8e39
   1f010:	ldr	r2, [r4, #176]	; 0xb0
   1f014:	movt	r3, #14563	; 0x38e3
   1f018:	umull	r1, r3, r1, r3
   1f01c:	cmp	r2, r3, lsr #3
   1f020:	lsr	r1, r3, #3
   1f024:	mov	r3, r1
   1f028:	movlt	r3, r2
   1f02c:	cmp	r2, #0
   1f030:	movle	r3, r1
   1f034:	str	r3, [r4, #160]	; 0xa0
   1f038:	ldr	r1, [r4, #20]
   1f03c:	mvn	r3, #3
   1f040:	mov	r6, #0
   1f044:	str	r1, [r0, #8]
   1f048:	ldrh	r2, [r4, #130]	; 0x82
   1f04c:	strh	r2, [r0, #12]
   1f050:	strh	r5, [r4, #130]	; 0x82
   1f054:	ldr	r2, [r4, #28]
   1f058:	stm	r0, {r2, r3}
   1f05c:	add	r0, r1, r2
   1f060:	str	r6, [r4, #20]
   1f064:	add	r0, r0, #7
   1f068:	bic	r0, r0, #7
   1f06c:	str	r0, [r4, #28]
   1f070:	mov	r0, r6
   1f074:	sub	sp, fp, #16
   1f078:	pop	{r4, r5, r6, r7, fp, pc}
   1f07c:	ldr	r0, [pc, #24]	; 1f09c <flatcc_builder_start_buffer@@Base+0x1f4>
   1f080:	ldr	r1, [pc, #24]	; 1f0a0 <flatcc_builder_start_buffer@@Base+0x1f8>
   1f084:	ldr	r3, [pc, #24]	; 1f0a4 <flatcc_builder_start_buffer@@Base+0x1fc>
   1f088:	mov	r2, #308	; 0x134
   1f08c:	add	r0, pc, r0
   1f090:	add	r1, pc, r1
   1f094:	add	r3, pc, r3
   1f098:	bl	12f04 <__assert_fail@plt>
   1f09c:	andeq	sl, r0, r7, asr #4
   1f0a0:	andeq	r9, r0, r6, lsl #1
   1f0a4:	andeq	sl, r0, r9, ror r0

0001f0a8 <flatcc_builder_end_buffer@@Base>:
   1f0a8:	push	{r4, r5, r6, sl, fp, lr}
   1f0ac:	add	fp, sp, #16
   1f0b0:	sub	sp, sp, #8
   1f0b4:	mov	r4, r0
   1f0b8:	ldr	r0, [r0, #32]
   1f0bc:	ldrh	r0, [r0, #14]
   1f0c0:	cmp	r0, #1
   1f0c4:	bne	1f1b8 <flatcc_builder_end_buffer@@Base+0x110>
   1f0c8:	mov	r3, r1
   1f0cc:	ldr	r1, [r4, #152]	; 0x98
   1f0d0:	ldrh	r0, [r4, #164]	; 0xa4
   1f0d4:	ldrh	r2, [r4, #132]	; 0x84
   1f0d8:	cmp	r1, #0
   1f0dc:	ldrh	r1, [r4, #128]	; 0x80
   1f0e0:	and	r0, r0, #2
   1f0e4:	orrne	r0, r0, #1
   1f0e8:	cmp	r1, r2
   1f0ec:	movcc	r1, r2
   1f0f0:	strhcc	r2, [r4, #128]	; 0x80
   1f0f4:	str	r0, [sp, #4]
   1f0f8:	mov	r0, r4
   1f0fc:	str	r1, [sp]
   1f100:	add	r1, r4, #168	; 0xa8
   1f104:	bl	1eb1c <flatcc_builder_create_buffer@@Base>
   1f108:	mov	r6, r0
   1f10c:	cmp	r0, #0
   1f110:	beq	1f1ac <flatcc_builder_end_buffer@@Base+0x104>
   1f114:	ldr	r1, [r4, #32]
   1f118:	ldr	r0, [r4, #16]
   1f11c:	ldr	r2, [r4, #20]
   1f120:	ldr	r3, [r1, #20]
   1f124:	str	r3, [r4, #144]	; 0x90
   1f128:	ldr	r3, [r1, #28]
   1f12c:	str	r3, [r4, #152]	; 0x98
   1f130:	ldr	r3, [r1, #16]
   1f134:	str	r3, [r4, #168]	; 0xa8
   1f138:	ldrh	r1, [r1, #32]
   1f13c:	strh	r1, [r4, #164]	; 0xa4
   1f140:	mov	r1, #0
   1f144:	bl	12ebc <memset@plt>
   1f148:	ldr	r0, [r4, #32]
   1f14c:	ldr	r1, [r4, #60]	; 0x3c
   1f150:	ldr	r2, [r4, #64]	; 0x40
   1f154:	ldr	r3, [r0, #8]
   1f158:	str	r3, [r4, #20]
   1f15c:	ldr	r3, [r0]
   1f160:	str	r3, [r4, #28]
   1f164:	add	r1, r1, r3
   1f168:	ldr	r5, [r0, #4]
   1f16c:	str	r1, [r4, #16]
   1f170:	sub	r1, r2, r3
   1f174:	cmp	r1, r5
   1f178:	movhi	r1, r5
   1f17c:	str	r1, [r4, #24]
   1f180:	ldrh	r1, [r4, #130]	; 0x82
   1f184:	ldrh	r2, [r4, #128]	; 0x80
   1f188:	cmp	r2, r1
   1f18c:	strhcc	r1, [r4, #128]	; 0x80
   1f190:	ldrh	r1, [r0, #12]
   1f194:	sub	r0, r0, #36	; 0x24
   1f198:	str	r0, [r4, #32]
   1f19c:	strh	r1, [r4, #130]	; 0x82
   1f1a0:	ldr	r0, [r4, #156]	; 0x9c
   1f1a4:	sub	r0, r0, #1
   1f1a8:	str	r0, [r4, #156]	; 0x9c
   1f1ac:	mov	r0, r6
   1f1b0:	sub	sp, fp, #16
   1f1b4:	pop	{r4, r5, r6, sl, fp, pc}
   1f1b8:	ldr	r0, [pc, #24]	; 1f1d8 <flatcc_builder_end_buffer@@Base+0x130>
   1f1bc:	ldr	r1, [pc, #24]	; 1f1dc <flatcc_builder_end_buffer@@Base+0x134>
   1f1c0:	ldr	r3, [pc, #24]	; 1f1e0 <flatcc_builder_end_buffer@@Base+0x138>
   1f1c4:	movw	r2, #838	; 0x346
   1f1c8:	add	r0, pc, r0
   1f1cc:	add	r1, pc, r1
   1f1d0:	add	r3, pc, r3
   1f1d4:	bl	12f04 <__assert_fail@plt>
   1f1d8:	muleq	r0, r4, r1
   1f1dc:	andeq	r8, r0, sl, asr #30
   1f1e0:			; <UNDEFINED> instruction: 0x000091b8

0001f1e4 <flatcc_builder_start_struct@@Base>:
   1f1e4:	push	{r4, r5, r6, r7, fp, lr}
   1f1e8:	add	fp, sp, #16
   1f1ec:	sub	sp, sp, #8
   1f1f0:	mov	r6, r1
   1f1f4:	mov	r1, r2
   1f1f8:	mov	r4, r0
   1f1fc:	bl	1ef68 <flatcc_builder_start_buffer@@Base+0xc0>
   1f200:	mov	r5, #0
   1f204:	cmp	r0, #0
   1f208:	bne	1f2b8 <flatcc_builder_start_struct@@Base+0xd4>
   1f20c:	ldr	r2, [r4, #32]
   1f210:	mov	r0, #2
   1f214:	mvn	r7, #3
   1f218:	strh	r0, [r2, #14]
   1f21c:	ldr	r1, [r4, #28]
   1f220:	ldr	r3, [r4, #64]	; 0x40
   1f224:	ldr	r0, [r4, #60]	; 0x3c
   1f228:	sub	r3, r3, r1
   1f22c:	add	r0, r0, r1
   1f230:	cmn	r3, #4
   1f234:	str	r0, [r4, #16]
   1f238:	movcs	r3, r7
   1f23c:	str	r3, [r4, #24]
   1f240:	str	r7, [r2, #4]
   1f244:	ldr	r7, [r4, #20]
   1f248:	add	r2, r7, r6
   1f24c:	cmp	r2, r3
   1f250:	str	r2, [r4, #20]
   1f254:	bcc	1f2b4 <flatcc_builder_start_struct@@Base+0xd0>
   1f258:	ldr	r0, [r4, #40]	; 0x28
   1f25c:	ldr	r6, [r4, #48]	; 0x30
   1f260:	add	r1, r1, r2
   1f264:	mov	r3, #1
   1f268:	str	r3, [sp]
   1f26c:	add	r2, r1, #1
   1f270:	add	r1, r4, #60	; 0x3c
   1f274:	mov	r3, #1
   1f278:	blx	r6
   1f27c:	cmp	r0, #0
   1f280:	bne	1f2b8 <flatcc_builder_start_struct@@Base+0xd4>
   1f284:	ldr	r1, [r4, #28]
   1f288:	ldr	r0, [r4, #60]	; 0x3c
   1f28c:	ldr	r3, [r4, #64]	; 0x40
   1f290:	ldr	r2, [r4, #32]
   1f294:	add	r0, r0, r1
   1f298:	sub	r1, r3, r1
   1f29c:	mvn	r3, #3
   1f2a0:	cmn	r1, #4
   1f2a4:	str	r0, [r4, #16]
   1f2a8:	movcs	r1, r3
   1f2ac:	str	r1, [r4, #24]
   1f2b0:	str	r3, [r2, #4]
   1f2b4:	add	r5, r0, r7
   1f2b8:	mov	r0, r5
   1f2bc:	sub	sp, fp, #16
   1f2c0:	pop	{r4, r5, r6, r7, fp, pc}

0001f2c4 <flatcc_builder_struct_edit@@Base>:
   1f2c4:	ldr	r0, [r0, #16]
   1f2c8:	bx	lr

0001f2cc <flatcc_builder_end_struct@@Base>:
   1f2cc:	push	{r4, r5, fp, lr}
   1f2d0:	add	fp, sp, #8
   1f2d4:	mov	r4, r0
   1f2d8:	ldr	r0, [r0, #32]
   1f2dc:	ldrh	r0, [r0, #14]
   1f2e0:	cmp	r0, #2
   1f2e4:	bne	1f384 <flatcc_builder_end_struct@@Base+0xb8>
   1f2e8:	ldrh	r3, [r4, #130]	; 0x82
   1f2ec:	ldr	r1, [r4, #16]
   1f2f0:	ldr	r2, [r4, #20]
   1f2f4:	mov	r0, r4
   1f2f8:	bl	1ed58 <flatcc_builder_create_struct@@Base>
   1f2fc:	mov	r5, r0
   1f300:	cmp	r0, #0
   1f304:	beq	1f37c <flatcc_builder_end_struct@@Base+0xb0>
   1f308:	ldr	r0, [r4, #16]
   1f30c:	ldr	r2, [r4, #20]
   1f310:	mov	r1, #0
   1f314:	bl	12ebc <memset@plt>
   1f318:	ldr	r0, [r4, #32]
   1f31c:	ldr	r1, [r4, #60]	; 0x3c
   1f320:	ldr	ip, [r4, #64]	; 0x40
   1f324:	ldr	r3, [r0, #8]
   1f328:	str	r3, [r4, #20]
   1f32c:	ldr	r3, [r0]
   1f330:	str	r3, [r4, #28]
   1f334:	add	r1, r1, r3
   1f338:	ldr	r2, [r0, #4]
   1f33c:	str	r1, [r4, #16]
   1f340:	sub	r1, ip, r3
   1f344:	cmp	r1, r2
   1f348:	movhi	r1, r2
   1f34c:	str	r1, [r4, #24]
   1f350:	ldrh	r1, [r4, #130]	; 0x82
   1f354:	ldrh	r2, [r4, #128]	; 0x80
   1f358:	cmp	r2, r1
   1f35c:	strhcc	r1, [r4, #128]	; 0x80
   1f360:	ldrh	r1, [r0, #12]
   1f364:	sub	r0, r0, #36	; 0x24
   1f368:	str	r0, [r4, #32]
   1f36c:	strh	r1, [r4, #130]	; 0x82
   1f370:	ldr	r0, [r4, #156]	; 0x9c
   1f374:	sub	r0, r0, #1
   1f378:	str	r0, [r4, #156]	; 0x9c
   1f37c:	mov	r0, r5
   1f380:	pop	{r4, r5, fp, pc}
   1f384:	ldr	r0, [pc, #24]	; 1f3a4 <flatcc_builder_end_struct@@Base+0xd8>
   1f388:	ldr	r1, [pc, #24]	; 1f3a8 <flatcc_builder_end_struct@@Base+0xdc>
   1f38c:	ldr	r3, [pc, #24]	; 1f3ac <flatcc_builder_end_struct@@Base+0xe0>
   1f390:	mov	r2, #872	; 0x368
   1f394:	add	r0, pc, r0
   1f398:	add	r1, pc, r1
   1f39c:	add	r3, pc, r3
   1f3a0:	bl	12f04 <__assert_fail@plt>
   1f3a4:	andeq	r9, r0, sp, asr #32
   1f3a8:	andeq	r8, r0, lr, ror sp
   1f3ac:	andeq	r9, r0, r1, ror r0

0001f3b0 <flatcc_builder_extend_vector@@Base>:
   1f3b0:	push	{r4, r5, fp, lr}
   1f3b4:	add	fp, sp, #8
   1f3b8:	sub	sp, sp, #8
   1f3bc:	mov	r4, r0
   1f3c0:	ldr	r0, [r0, #32]
   1f3c4:	ldr	r2, [r0, #20]
   1f3c8:	adds	r2, r2, r1
   1f3cc:	bcs	1f484 <flatcc_builder_extend_vector@@Base+0xd4>
   1f3d0:	ldr	r3, [r0, #24]
   1f3d4:	cmp	r2, r3
   1f3d8:	bhi	1f484 <flatcc_builder_extend_vector@@Base+0xd4>
   1f3dc:	str	r2, [r0, #20]
   1f3e0:	ldr	r2, [r4, #32]
   1f3e4:	ldr	r5, [r4, #20]
   1f3e8:	ldr	r0, [r4, #24]
   1f3ec:	ldr	r2, [r2, #16]
   1f3f0:	mla	r1, r2, r1, r5
   1f3f4:	cmp	r1, r0
   1f3f8:	str	r1, [r4, #20]
   1f3fc:	bcs	1f408 <flatcc_builder_extend_vector@@Base+0x58>
   1f400:	ldr	r0, [r4, #16]
   1f404:	b	1f478 <flatcc_builder_extend_vector@@Base+0xc8>
   1f408:	ldr	r2, [r4, #28]
   1f40c:	ldr	r0, [r4, #40]	; 0x28
   1f410:	ldr	ip, [r4, #48]	; 0x30
   1f414:	mov	r3, #1
   1f418:	str	r3, [sp]
   1f41c:	mov	r3, #1
   1f420:	add	r1, r1, r2
   1f424:	add	r2, r1, #1
   1f428:	add	r1, r4, #60	; 0x3c
   1f42c:	blx	ip
   1f430:	mov	r1, r0
   1f434:	mov	r0, #0
   1f438:	cmp	r1, #0
   1f43c:	beq	1f448 <flatcc_builder_extend_vector@@Base+0x98>
   1f440:	sub	sp, fp, #8
   1f444:	pop	{r4, r5, fp, pc}
   1f448:	ldr	r1, [r4, #28]
   1f44c:	ldr	r0, [r4, #60]	; 0x3c
   1f450:	ldr	r3, [r4, #64]	; 0x40
   1f454:	ldr	r2, [r4, #32]
   1f458:	add	r0, r0, r1
   1f45c:	sub	r1, r3, r1
   1f460:	mvn	r3, #3
   1f464:	cmn	r1, #4
   1f468:	str	r0, [r4, #16]
   1f46c:	movcs	r1, r3
   1f470:	str	r1, [r4, #24]
   1f474:	str	r3, [r2, #4]
   1f478:	add	r0, r0, r5
   1f47c:	sub	sp, fp, #8
   1f480:	pop	{r4, r5, fp, pc}
   1f484:	ldr	r0, [pc, #24]	; 1f4a4 <flatcc_builder_extend_vector@@Base+0xf4>
   1f488:	ldr	r1, [pc, #24]	; 1f4a8 <flatcc_builder_extend_vector@@Base+0xf8>
   1f48c:	ldr	r3, [pc, #24]	; 1f4ac <flatcc_builder_extend_vector@@Base+0xfc>
   1f490:	mov	r2, #892	; 0x37c
   1f494:	add	r0, pc, r0
   1f498:	add	r1, pc, r1
   1f49c:	add	r3, pc, r3
   1f4a0:	bl	12f04 <__assert_fail@plt>
   1f4a4:	andeq	r9, r0, r8, asr #26
   1f4a8:	andeq	r8, r0, lr, ror ip
   1f4ac:	andeq	r9, r0, fp, asr sp

0001f4b0 <flatcc_builder_vector_push@@Base>:
   1f4b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f4b4:	add	fp, sp, #24
   1f4b8:	sub	sp, sp, #8
   1f4bc:	mov	r5, r0
   1f4c0:	ldr	r0, [r0, #32]
   1f4c4:	mov	r8, r1
   1f4c8:	ldrh	r1, [r0, #14]
   1f4cc:	cmp	r1, #4
   1f4d0:	bne	1f5a8 <flatcc_builder_vector_push@@Base+0xf8>
   1f4d4:	ldr	r1, [r0, #20]
   1f4d8:	ldr	r2, [r0, #24]
   1f4dc:	cmp	r1, r2
   1f4e0:	bhi	1f5c8 <flatcc_builder_vector_push@@Base+0x118>
   1f4e4:	add	r1, r1, #1
   1f4e8:	str	r1, [r0, #20]
   1f4ec:	ldr	r1, [r5, #32]
   1f4f0:	ldr	r4, [r5, #20]
   1f4f4:	ldr	r0, [r5, #24]
   1f4f8:	ldr	r6, [r1, #16]
   1f4fc:	add	r1, r4, r6
   1f500:	cmp	r1, r0
   1f504:	str	r1, [r5, #20]
   1f508:	bcs	1f52c <flatcc_builder_vector_push@@Base+0x7c>
   1f50c:	ldr	r0, [r5, #16]
   1f510:	adds	r7, r0, r4
   1f514:	beq	1f598 <flatcc_builder_vector_push@@Base+0xe8>
   1f518:	mov	r0, r7
   1f51c:	mov	r1, r8
   1f520:	mov	r2, r6
   1f524:	bl	12e2c <memcpy@plt>
   1f528:	b	1f59c <flatcc_builder_vector_push@@Base+0xec>
   1f52c:	ldr	r2, [r5, #28]
   1f530:	ldr	r0, [r5, #40]	; 0x28
   1f534:	ldr	r7, [r5, #48]	; 0x30
   1f538:	mov	r3, #1
   1f53c:	str	r3, [sp]
   1f540:	mov	r3, #1
   1f544:	add	r1, r1, r2
   1f548:	add	r2, r1, #1
   1f54c:	add	r1, r5, #60	; 0x3c
   1f550:	blx	r7
   1f554:	mov	r7, #0
   1f558:	cmp	r0, #0
   1f55c:	bne	1f59c <flatcc_builder_vector_push@@Base+0xec>
   1f560:	ldr	r1, [r5, #28]
   1f564:	ldr	r0, [r5, #60]	; 0x3c
   1f568:	ldr	r3, [r5, #64]	; 0x40
   1f56c:	ldr	r2, [r5, #32]
   1f570:	add	r0, r0, r1
   1f574:	sub	r1, r3, r1
   1f578:	mvn	r3, #3
   1f57c:	cmn	r1, #4
   1f580:	str	r0, [r5, #16]
   1f584:	movcs	r1, r3
   1f588:	str	r1, [r5, #24]
   1f58c:	str	r3, [r2, #4]
   1f590:	adds	r7, r0, r4
   1f594:	bne	1f518 <flatcc_builder_vector_push@@Base+0x68>
   1f598:	mov	r7, #0
   1f59c:	mov	r0, r7
   1f5a0:	sub	sp, fp, #24
   1f5a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f5a8:	ldr	r0, [pc, #56]	; 1f5e8 <flatcc_builder_vector_push@@Base+0x138>
   1f5ac:	ldr	r1, [pc, #56]	; 1f5ec <flatcc_builder_vector_push@@Base+0x13c>
   1f5b0:	ldr	r3, [pc, #56]	; 1f5f0 <flatcc_builder_vector_push@@Base+0x140>
   1f5b4:	movw	r2, #907	; 0x38b
   1f5b8:	add	r0, pc, r0
   1f5bc:	add	r1, pc, r1
   1f5c0:	add	r3, pc, r3
   1f5c4:	bl	12f04 <__assert_fail@plt>
   1f5c8:	ldr	r0, [pc, #36]	; 1f5f4 <flatcc_builder_vector_push@@Base+0x144>
   1f5cc:	ldr	r1, [pc, #36]	; 1f5f8 <flatcc_builder_vector_push@@Base+0x148>
   1f5d0:	ldr	r3, [pc, #36]	; 1f5fc <flatcc_builder_vector_push@@Base+0x14c>
   1f5d4:	mov	r2, #908	; 0x38c
   1f5d8:	add	r0, pc, r0
   1f5dc:	add	r1, pc, r1
   1f5e0:	add	r3, pc, r3
   1f5e4:	bl	12f04 <__assert_fail@plt>
   1f5e8:	muleq	r0, r8, lr
   1f5ec:	andeq	r8, r0, sl, asr fp
   1f5f0:			; <UNDEFINED> instruction: 0x00008ebc
   1f5f4:	andeq	r8, r0, r7, ror #29
   1f5f8:	andeq	r8, r0, sl, lsr fp
   1f5fc:	muleq	r0, ip, lr

0001f600 <flatcc_builder_append_vector@@Base>:
   1f600:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1f604:	add	fp, sp, #24
   1f608:	sub	sp, sp, #8
   1f60c:	mov	r6, r0
   1f610:	ldr	r0, [r0, #32]
   1f614:	mov	r8, r1
   1f618:	ldrh	r1, [r0, #14]
   1f61c:	cmp	r1, #4
   1f620:	bne	1f720 <flatcc_builder_append_vector@@Base+0x120>
   1f624:	ldr	r1, [r0, #20]
   1f628:	mov	r5, r2
   1f62c:	adds	r1, r1, r2
   1f630:	bcs	1f700 <flatcc_builder_append_vector@@Base+0x100>
   1f634:	ldr	r2, [r0, #24]
   1f638:	cmp	r1, r2
   1f63c:	bhi	1f700 <flatcc_builder_append_vector@@Base+0x100>
   1f640:	str	r1, [r0, #20]
   1f644:	ldr	r1, [r6, #32]
   1f648:	ldr	r4, [r6, #20]
   1f64c:	ldr	r0, [r6, #24]
   1f650:	ldr	r9, [r1, #16]
   1f654:	mla	r1, r9, r5, r4
   1f658:	cmp	r1, r0
   1f65c:	str	r1, [r6, #20]
   1f660:	bcs	1f684 <flatcc_builder_append_vector@@Base+0x84>
   1f664:	ldr	r0, [r6, #16]
   1f668:	adds	r7, r0, r4
   1f66c:	beq	1f6f0 <flatcc_builder_append_vector@@Base+0xf0>
   1f670:	mul	r2, r9, r5
   1f674:	mov	r0, r7
   1f678:	mov	r1, r8
   1f67c:	bl	12e2c <memcpy@plt>
   1f680:	b	1f6f4 <flatcc_builder_append_vector@@Base+0xf4>
   1f684:	ldr	r2, [r6, #28]
   1f688:	ldr	r0, [r6, #40]	; 0x28
   1f68c:	ldr	r7, [r6, #48]	; 0x30
   1f690:	mov	r3, #1
   1f694:	str	r3, [sp]
   1f698:	mov	r3, #1
   1f69c:	add	r1, r1, r2
   1f6a0:	add	r2, r1, #1
   1f6a4:	add	r1, r6, #60	; 0x3c
   1f6a8:	blx	r7
   1f6ac:	mov	r7, #0
   1f6b0:	cmp	r0, #0
   1f6b4:	bne	1f6f4 <flatcc_builder_append_vector@@Base+0xf4>
   1f6b8:	ldr	r1, [r6, #28]
   1f6bc:	ldr	r0, [r6, #60]	; 0x3c
   1f6c0:	ldr	r3, [r6, #64]	; 0x40
   1f6c4:	ldr	r2, [r6, #32]
   1f6c8:	add	r0, r0, r1
   1f6cc:	sub	r1, r3, r1
   1f6d0:	mvn	r3, #3
   1f6d4:	cmn	r1, #4
   1f6d8:	str	r0, [r6, #16]
   1f6dc:	movcs	r1, r3
   1f6e0:	str	r1, [r6, #24]
   1f6e4:	str	r3, [r2, #4]
   1f6e8:	adds	r7, r0, r4
   1f6ec:	bne	1f670 <flatcc_builder_append_vector@@Base+0x70>
   1f6f0:	mov	r7, #0
   1f6f4:	mov	r0, r7
   1f6f8:	sub	sp, fp, #24
   1f6fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f700:	ldr	r0, [pc, #68]	; 1f74c <flatcc_builder_append_vector@@Base+0x14c>
   1f704:	ldr	r1, [pc, #68]	; 1f750 <flatcc_builder_append_vector@@Base+0x150>
   1f708:	ldr	r3, [pc, #68]	; 1f754 <flatcc_builder_append_vector@@Base+0x154>
   1f70c:	mov	r2, #892	; 0x37c
   1f710:	add	r0, pc, r0
   1f714:	add	r1, pc, r1
   1f718:	add	r3, pc, r3
   1f71c:	bl	12f04 <__assert_fail@plt>
   1f720:	ldr	r0, [pc, #24]	; 1f740 <flatcc_builder_append_vector@@Base+0x140>
   1f724:	ldr	r1, [pc, #24]	; 1f744 <flatcc_builder_append_vector@@Base+0x144>
   1f728:	ldr	r3, [pc, #24]	; 1f748 <flatcc_builder_append_vector@@Base+0x148>
   1f72c:	movw	r2, #915	; 0x393
   1f730:	add	r0, pc, r0
   1f734:	add	r1, pc, r1
   1f738:	add	r3, pc, r3
   1f73c:	bl	12f04 <__assert_fail@plt>
   1f740:	andeq	r8, r0, r0, lsr #26
   1f744:	andeq	r8, r0, r2, ror #19
   1f748:	andeq	r8, r0, r4, asr #27
   1f74c:	andeq	r9, r0, ip, asr #21
   1f750:	andeq	r8, r0, r2, lsl #20
   1f754:	ldrdeq	r9, [r0], -pc	; <UNPREDICTABLE>

0001f758 <flatcc_builder_extend_offset_vector@@Base>:
   1f758:	push	{r4, r5, fp, lr}
   1f75c:	add	fp, sp, #8
   1f760:	sub	sp, sp, #8
   1f764:	mov	r4, r0
   1f768:	ldr	r0, [r0, #32]
   1f76c:	ldr	r2, [r0, #20]
   1f770:	adds	r2, r2, r1
   1f774:	cmpcc	r2, #1073741824	; 0x40000000
   1f778:	bcc	1f79c <flatcc_builder_extend_offset_vector@@Base+0x44>
   1f77c:	ldr	r0, [pc, #184]	; 1f83c <flatcc_builder_extend_offset_vector@@Base+0xe4>
   1f780:	ldr	r1, [pc, #184]	; 1f840 <flatcc_builder_extend_offset_vector@@Base+0xe8>
   1f784:	ldr	r3, [pc, #184]	; 1f844 <flatcc_builder_extend_offset_vector@@Base+0xec>
   1f788:	mov	r2, #892	; 0x37c
   1f78c:	add	r0, pc, r0
   1f790:	add	r1, pc, r1
   1f794:	add	r3, pc, r3
   1f798:	bl	12f04 <__assert_fail@plt>
   1f79c:	str	r2, [r0, #20]
   1f7a0:	ldr	r5, [r4, #20]
   1f7a4:	ldr	r0, [r4, #24]
   1f7a8:	add	r1, r5, r1, lsl #2
   1f7ac:	cmp	r1, r0
   1f7b0:	str	r1, [r4, #20]
   1f7b4:	bcs	1f7c0 <flatcc_builder_extend_offset_vector@@Base+0x68>
   1f7b8:	ldr	r0, [r4, #16]
   1f7bc:	b	1f830 <flatcc_builder_extend_offset_vector@@Base+0xd8>
   1f7c0:	ldr	r2, [r4, #28]
   1f7c4:	ldr	r0, [r4, #40]	; 0x28
   1f7c8:	ldr	ip, [r4, #48]	; 0x30
   1f7cc:	mov	r3, #1
   1f7d0:	str	r3, [sp]
   1f7d4:	mov	r3, #1
   1f7d8:	add	r1, r1, r2
   1f7dc:	add	r2, r1, #1
   1f7e0:	add	r1, r4, #60	; 0x3c
   1f7e4:	blx	ip
   1f7e8:	mov	r1, r0
   1f7ec:	mov	r0, #0
   1f7f0:	cmp	r1, #0
   1f7f4:	beq	1f800 <flatcc_builder_extend_offset_vector@@Base+0xa8>
   1f7f8:	sub	sp, fp, #8
   1f7fc:	pop	{r4, r5, fp, pc}
   1f800:	ldr	r1, [r4, #28]
   1f804:	ldr	r0, [r4, #60]	; 0x3c
   1f808:	ldr	r3, [r4, #64]	; 0x40
   1f80c:	ldr	r2, [r4, #32]
   1f810:	add	r0, r0, r1
   1f814:	sub	r1, r3, r1
   1f818:	mvn	r3, #3
   1f81c:	cmn	r1, #4
   1f820:	str	r0, [r4, #16]
   1f824:	movcs	r1, r3
   1f828:	str	r1, [r4, #24]
   1f82c:	str	r3, [r2, #4]
   1f830:	add	r0, r0, r5
   1f834:	sub	sp, fp, #8
   1f838:	pop	{r4, r5, fp, pc}
   1f83c:	andeq	r9, r0, r0, asr sl
   1f840:	andeq	r8, r0, r6, lsl #19
   1f844:	andeq	r9, r0, r3, ror #20

0001f848 <flatcc_builder_offset_vector_push@@Base>:
   1f848:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f84c:	add	fp, sp, #24
   1f850:	sub	sp, sp, #8
   1f854:	mov	r6, r0
   1f858:	ldr	r0, [r0, #32]
   1f85c:	mov	r8, r1
   1f860:	ldrh	r1, [r0, #14]
   1f864:	cmp	r1, #5
   1f868:	bne	1f91c <flatcc_builder_offset_vector_push@@Base+0xd4>
   1f86c:	ldr	r1, [r0, #20]
   1f870:	mov	r5, #0
   1f874:	cmn	r1, #-1073741823	; 0xc0000001
   1f878:	beq	1f910 <flatcc_builder_offset_vector_push@@Base+0xc8>
   1f87c:	add	r1, r1, #1
   1f880:	str	r1, [r0, #20]
   1f884:	ldr	r7, [r6, #20]
   1f888:	ldr	r0, [r6, #24]
   1f88c:	add	r1, r7, #4
   1f890:	cmp	r1, r0
   1f894:	str	r1, [r6, #20]
   1f898:	bcs	1f8a4 <flatcc_builder_offset_vector_push@@Base+0x5c>
   1f89c:	ldr	r0, [r6, #16]
   1f8a0:	b	1f904 <flatcc_builder_offset_vector_push@@Base+0xbc>
   1f8a4:	ldr	r1, [r6, #28]
   1f8a8:	ldr	r0, [r6, #40]	; 0x28
   1f8ac:	ldr	r4, [r6, #48]	; 0x30
   1f8b0:	mov	r2, #1
   1f8b4:	mov	r3, #1
   1f8b8:	str	r2, [sp]
   1f8bc:	add	r1, r7, r1
   1f8c0:	add	r2, r1, #5
   1f8c4:	add	r1, r6, #60	; 0x3c
   1f8c8:	blx	r4
   1f8cc:	cmp	r0, #0
   1f8d0:	bne	1f910 <flatcc_builder_offset_vector_push@@Base+0xc8>
   1f8d4:	ldr	r1, [r6, #28]
   1f8d8:	ldr	r0, [r6, #60]	; 0x3c
   1f8dc:	ldr	r3, [r6, #64]	; 0x40
   1f8e0:	ldr	r2, [r6, #32]
   1f8e4:	add	r0, r0, r1
   1f8e8:	sub	r1, r3, r1
   1f8ec:	mvn	r3, #3
   1f8f0:	cmn	r1, #4
   1f8f4:	str	r0, [r6, #16]
   1f8f8:	movcs	r1, r3
   1f8fc:	str	r1, [r6, #24]
   1f900:	str	r3, [r2, #4]
   1f904:	adds	r0, r0, r7
   1f908:	movne	r5, r0
   1f90c:	strne	r8, [r0]
   1f910:	mov	r0, r5
   1f914:	sub	sp, fp, #24
   1f918:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f91c:	ldr	r0, [pc, #24]	; 1f93c <flatcc_builder_offset_vector_push@@Base+0xf4>
   1f920:	ldr	r1, [pc, #24]	; 1f940 <flatcc_builder_offset_vector_push@@Base+0xf8>
   1f924:	ldr	r3, [pc, #24]	; 1f944 <flatcc_builder_offset_vector_push@@Base+0xfc>
   1f928:	movw	r2, #934	; 0x3a6
   1f92c:	add	r0, pc, r0
   1f930:	add	r1, pc, r1
   1f934:	add	r3, pc, r3
   1f938:	bl	12f04 <__assert_fail@plt>
   1f93c:	andeq	r8, r0, sp, lsl ip
   1f940:	andeq	r8, r0, r6, ror #15
   1f944:	andeq	r8, r0, r8, asr #24

0001f948 <flatcc_builder_append_offset_vector@@Base>:
   1f948:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f94c:	add	fp, sp, #24
   1f950:	sub	sp, sp, #8
   1f954:	mov	r6, r0
   1f958:	ldr	r0, [r0, #32]
   1f95c:	mov	r8, r1
   1f960:	ldrh	r1, [r0, #14]
   1f964:	cmp	r1, #5
   1f968:	bne	1fa58 <flatcc_builder_append_offset_vector@@Base+0x110>
   1f96c:	ldr	r1, [r0, #20]
   1f970:	mov	r5, r2
   1f974:	adds	r1, r1, r2
   1f978:	cmpcc	r1, #1073741824	; 0x40000000
   1f97c:	bcc	1f9a0 <flatcc_builder_append_offset_vector@@Base+0x58>
   1f980:	ldr	r0, [pc, #252]	; 1fa84 <flatcc_builder_append_offset_vector@@Base+0x13c>
   1f984:	ldr	r1, [pc, #252]	; 1fa88 <flatcc_builder_append_offset_vector@@Base+0x140>
   1f988:	ldr	r3, [pc, #252]	; 1fa8c <flatcc_builder_append_offset_vector@@Base+0x144>
   1f98c:	mov	r2, #892	; 0x37c
   1f990:	add	r0, pc, r0
   1f994:	add	r1, pc, r1
   1f998:	add	r3, pc, r3
   1f99c:	bl	12f04 <__assert_fail@plt>
   1f9a0:	str	r1, [r0, #20]
   1f9a4:	ldr	r4, [r6, #20]
   1f9a8:	ldr	r0, [r6, #24]
   1f9ac:	add	r1, r4, r5, lsl #2
   1f9b0:	cmp	r1, r0
   1f9b4:	str	r1, [r6, #20]
   1f9b8:	bcs	1f9dc <flatcc_builder_append_offset_vector@@Base+0x94>
   1f9bc:	ldr	r0, [r6, #16]
   1f9c0:	adds	r7, r0, r4
   1f9c4:	beq	1fa48 <flatcc_builder_append_offset_vector@@Base+0x100>
   1f9c8:	lsl	r2, r5, #2
   1f9cc:	mov	r0, r7
   1f9d0:	mov	r1, r8
   1f9d4:	bl	12e2c <memcpy@plt>
   1f9d8:	b	1fa4c <flatcc_builder_append_offset_vector@@Base+0x104>
   1f9dc:	ldr	r2, [r6, #28]
   1f9e0:	ldr	r0, [r6, #40]	; 0x28
   1f9e4:	ldr	r7, [r6, #48]	; 0x30
   1f9e8:	mov	r3, #1
   1f9ec:	str	r3, [sp]
   1f9f0:	mov	r3, #1
   1f9f4:	add	r1, r1, r2
   1f9f8:	add	r2, r1, #1
   1f9fc:	add	r1, r6, #60	; 0x3c
   1fa00:	blx	r7
   1fa04:	mov	r7, #0
   1fa08:	cmp	r0, #0
   1fa0c:	bne	1fa4c <flatcc_builder_append_offset_vector@@Base+0x104>
   1fa10:	ldr	r1, [r6, #28]
   1fa14:	ldr	r0, [r6, #60]	; 0x3c
   1fa18:	ldr	r3, [r6, #64]	; 0x40
   1fa1c:	ldr	r2, [r6, #32]
   1fa20:	add	r0, r0, r1
   1fa24:	sub	r1, r3, r1
   1fa28:	mvn	r3, #3
   1fa2c:	cmn	r1, #4
   1fa30:	str	r0, [r6, #16]
   1fa34:	movcs	r1, r3
   1fa38:	str	r1, [r6, #24]
   1fa3c:	str	r3, [r2, #4]
   1fa40:	adds	r7, r0, r4
   1fa44:	bne	1f9c8 <flatcc_builder_append_offset_vector@@Base+0x80>
   1fa48:	mov	r7, #0
   1fa4c:	mov	r0, r7
   1fa50:	sub	sp, fp, #24
   1fa54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fa58:	ldr	r0, [pc, #24]	; 1fa78 <flatcc_builder_append_offset_vector@@Base+0x130>
   1fa5c:	ldr	r1, [pc, #24]	; 1fa7c <flatcc_builder_append_offset_vector@@Base+0x134>
   1fa60:	ldr	r3, [pc, #24]	; 1fa80 <flatcc_builder_append_offset_vector@@Base+0x138>
   1fa64:	mov	r2, #948	; 0x3b4
   1fa68:	add	r0, pc, r0
   1fa6c:	add	r1, pc, r1
   1fa70:	add	r3, pc, r3
   1fa74:	bl	12f04 <__assert_fail@plt>
   1fa78:	andeq	r8, r0, r1, ror #21
   1fa7c:	andeq	r8, r0, sl, lsr #13
   1fa80:	andeq	r8, r0, lr, ror #22
   1fa84:	andeq	r9, r0, ip, asr #16
   1fa88:	andeq	r8, r0, r2, lsl #15
   1fa8c:	andeq	r9, r0, pc, asr r8

0001fa90 <flatcc_builder_extend_string@@Base>:
   1fa90:	push	{r4, r5, fp, lr}
   1fa94:	add	fp, sp, #8
   1fa98:	sub	sp, sp, #8
   1fa9c:	mov	r4, r0
   1faa0:	ldr	r0, [r0, #32]
   1faa4:	ldrh	r2, [r0, #14]
   1faa8:	cmp	r2, #6
   1faac:	bne	1fb5c <flatcc_builder_extend_string@@Base+0xcc>
   1fab0:	ldr	r2, [r0, #20]
   1fab4:	adds	r2, r2, r1
   1fab8:	bcs	1fb7c <flatcc_builder_extend_string@@Base+0xec>
   1fabc:	str	r2, [r0, #20]
   1fac0:	ldr	r5, [r4, #20]
   1fac4:	ldr	r0, [r4, #24]
   1fac8:	add	r1, r5, r1
   1facc:	cmp	r1, r0
   1fad0:	str	r1, [r4, #20]
   1fad4:	bcs	1fae0 <flatcc_builder_extend_string@@Base+0x50>
   1fad8:	ldr	r0, [r4, #16]
   1fadc:	b	1fb50 <flatcc_builder_extend_string@@Base+0xc0>
   1fae0:	ldr	r2, [r4, #28]
   1fae4:	ldr	r0, [r4, #40]	; 0x28
   1fae8:	ldr	ip, [r4, #48]	; 0x30
   1faec:	mov	r3, #1
   1faf0:	str	r3, [sp]
   1faf4:	mov	r3, #1
   1faf8:	add	r1, r1, r2
   1fafc:	add	r2, r1, #1
   1fb00:	add	r1, r4, #60	; 0x3c
   1fb04:	blx	ip
   1fb08:	mov	r1, r0
   1fb0c:	mov	r0, #0
   1fb10:	cmp	r1, #0
   1fb14:	beq	1fb20 <flatcc_builder_extend_string@@Base+0x90>
   1fb18:	sub	sp, fp, #8
   1fb1c:	pop	{r4, r5, fp, pc}
   1fb20:	ldr	r1, [r4, #28]
   1fb24:	ldr	r0, [r4, #60]	; 0x3c
   1fb28:	ldr	r3, [r4, #64]	; 0x40
   1fb2c:	ldr	r2, [r4, #32]
   1fb30:	add	r0, r0, r1
   1fb34:	sub	r1, r3, r1
   1fb38:	mvn	r3, #3
   1fb3c:	cmn	r1, #4
   1fb40:	str	r0, [r4, #16]
   1fb44:	movcs	r1, r3
   1fb48:	str	r1, [r4, #24]
   1fb4c:	str	r3, [r2, #4]
   1fb50:	add	r0, r0, r5
   1fb54:	sub	sp, fp, #8
   1fb58:	pop	{r4, r5, fp, pc}
   1fb5c:	ldr	r0, [pc, #56]	; 1fb9c <flatcc_builder_extend_string@@Base+0x10c>
   1fb60:	ldr	r1, [pc, #56]	; 1fba0 <flatcc_builder_extend_string@@Base+0x110>
   1fb64:	ldr	r3, [pc, #56]	; 1fba4 <flatcc_builder_extend_string@@Base+0x114>
   1fb68:	movw	r2, #957	; 0x3bd
   1fb6c:	add	r0, pc, r0
   1fb70:	add	r1, pc, r1
   1fb74:	add	r3, pc, r3
   1fb78:	bl	12f04 <__assert_fail@plt>
   1fb7c:	ldr	r0, [pc, #36]	; 1fba8 <flatcc_builder_extend_string@@Base+0x118>
   1fb80:	ldr	r1, [pc, #36]	; 1fbac <flatcc_builder_extend_string@@Base+0x11c>
   1fb84:	ldr	r3, [pc, #36]	; 1fbb0 <flatcc_builder_extend_string@@Base+0x120>
   1fb88:	mov	r2, #892	; 0x37c
   1fb8c:	add	r0, pc, r0
   1fb90:	add	r1, pc, r1
   1fb94:	add	r3, pc, r3
   1fb98:	bl	12f04 <__assert_fail@plt>
   1fb9c:	andeq	r8, r0, r6, ror #21
   1fba0:	andeq	r8, r0, r6, lsr #11
   1fba4:	andeq	r8, r0, sl, lsl #22
   1fba8:	andeq	r9, r0, r0, asr r6
   1fbac:	andeq	r8, r0, r6, lsl #11
   1fbb0:	andeq	r9, r0, r3, ror #12

0001fbb4 <flatcc_builder_append_string@@Base>:
   1fbb4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1fbb8:	add	fp, sp, #24
   1fbbc:	sub	sp, sp, #8
   1fbc0:	mov	r6, r0
   1fbc4:	ldr	r0, [r0, #32]
   1fbc8:	mov	r8, r1
   1fbcc:	ldrh	r1, [r0, #14]
   1fbd0:	cmp	r1, #6
   1fbd4:	bne	1fca0 <flatcc_builder_append_string@@Base+0xec>
   1fbd8:	ldr	r1, [r0, #20]
   1fbdc:	mov	r4, r2
   1fbe0:	adds	r1, r1, r2
   1fbe4:	bcs	1fcc0 <flatcc_builder_append_string@@Base+0x10c>
   1fbe8:	str	r1, [r0, #20]
   1fbec:	ldr	r5, [r6, #20]
   1fbf0:	ldr	r0, [r6, #24]
   1fbf4:	add	r1, r5, r4
   1fbf8:	cmp	r1, r0
   1fbfc:	str	r1, [r6, #20]
   1fc00:	bcs	1fc24 <flatcc_builder_append_string@@Base+0x70>
   1fc04:	ldr	r0, [r6, #16]
   1fc08:	adds	r7, r0, r5
   1fc0c:	beq	1fc90 <flatcc_builder_append_string@@Base+0xdc>
   1fc10:	mov	r0, r7
   1fc14:	mov	r1, r8
   1fc18:	mov	r2, r4
   1fc1c:	bl	12e2c <memcpy@plt>
   1fc20:	b	1fc94 <flatcc_builder_append_string@@Base+0xe0>
   1fc24:	ldr	r2, [r6, #28]
   1fc28:	ldr	r0, [r6, #40]	; 0x28
   1fc2c:	ldr	r7, [r6, #48]	; 0x30
   1fc30:	mov	r3, #1
   1fc34:	str	r3, [sp]
   1fc38:	mov	r3, #1
   1fc3c:	add	r1, r1, r2
   1fc40:	add	r2, r1, #1
   1fc44:	add	r1, r6, #60	; 0x3c
   1fc48:	blx	r7
   1fc4c:	mov	r7, #0
   1fc50:	cmp	r0, #0
   1fc54:	bne	1fc94 <flatcc_builder_append_string@@Base+0xe0>
   1fc58:	ldr	r1, [r6, #28]
   1fc5c:	ldr	r0, [r6, #60]	; 0x3c
   1fc60:	ldr	r3, [r6, #64]	; 0x40
   1fc64:	ldr	r2, [r6, #32]
   1fc68:	add	r0, r0, r1
   1fc6c:	sub	r1, r3, r1
   1fc70:	mvn	r3, #3
   1fc74:	cmn	r1, #4
   1fc78:	str	r0, [r6, #16]
   1fc7c:	movcs	r1, r3
   1fc80:	str	r1, [r6, #24]
   1fc84:	str	r3, [r2, #4]
   1fc88:	adds	r7, r0, r5
   1fc8c:	bne	1fc10 <flatcc_builder_append_string@@Base+0x5c>
   1fc90:	mov	r7, #0
   1fc94:	mov	r0, r7
   1fc98:	sub	sp, fp, #24
   1fc9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fca0:	ldr	r0, [pc, #56]	; 1fce0 <flatcc_builder_append_string@@Base+0x12c>
   1fca4:	ldr	r1, [pc, #56]	; 1fce4 <flatcc_builder_append_string@@Base+0x130>
   1fca8:	ldr	r3, [pc, #56]	; 1fce8 <flatcc_builder_append_string@@Base+0x134>
   1fcac:	movw	r2, #966	; 0x3c6
   1fcb0:	add	r0, pc, r0
   1fcb4:	add	r1, pc, r1
   1fcb8:	add	r3, pc, r3
   1fcbc:	bl	12f04 <__assert_fail@plt>
   1fcc0:	ldr	r0, [pc, #36]	; 1fcec <flatcc_builder_append_string@@Base+0x138>
   1fcc4:	ldr	r1, [pc, #36]	; 1fcf0 <flatcc_builder_append_string@@Base+0x13c>
   1fcc8:	ldr	r3, [pc, #36]	; 1fcf4 <flatcc_builder_append_string@@Base+0x140>
   1fccc:	mov	r2, #892	; 0x37c
   1fcd0:	add	r0, pc, r0
   1fcd4:	add	r1, pc, r1
   1fcd8:	add	r3, pc, r3
   1fcdc:	bl	12f04 <__assert_fail@plt>
   1fce0:	andeq	r8, r0, r2, lsr #19
   1fce4:	andeq	r8, r0, r2, ror #8
   1fce8:	andeq	r8, r0, r5, lsl #20
   1fcec:	andeq	r9, r0, ip, lsl #10
   1fcf0:	andeq	r8, r0, r2, asr #8
   1fcf4:	andeq	r9, r0, pc, lsl r5

0001fcf8 <flatcc_builder_append_string_str@@Base>:
   1fcf8:	push	{r4, r5, fp, lr}
   1fcfc:	add	fp, sp, #8
   1fd00:	mov	r5, r0
   1fd04:	mov	r0, r1
   1fd08:	mov	r4, r1
   1fd0c:	bl	12e98 <strlen@plt>
   1fd10:	mov	r2, r0
   1fd14:	mov	r0, r5
   1fd18:	mov	r1, r4
   1fd1c:	pop	{r4, r5, fp, lr}
   1fd20:	b	1fbb4 <flatcc_builder_append_string@@Base>

0001fd24 <flatcc_builder_append_string_strn@@Base>:
   1fd24:	push	{r4, r5, r6, sl, fp, lr}
   1fd28:	add	fp, sp, #16
   1fd2c:	mov	r6, r0
   1fd30:	mov	r5, r1
   1fd34:	mov	r0, r1
   1fd38:	mov	r1, #0
   1fd3c:	mov	r4, r2
   1fd40:	bl	12ed4 <memchr@plt>
   1fd44:	cmp	r0, #0
   1fd48:	mov	r1, r5
   1fd4c:	subne	r4, r0, r5
   1fd50:	mov	r0, r6
   1fd54:	mov	r2, r4
   1fd58:	pop	{r4, r5, r6, sl, fp, lr}
   1fd5c:	b	1fbb4 <flatcc_builder_append_string@@Base>

0001fd60 <flatcc_builder_truncate_vector@@Base>:
   1fd60:	push	{fp, lr}
   1fd64:	mov	fp, sp
   1fd68:	ldr	r2, [r0, #32]
   1fd6c:	ldrh	r3, [r2, #14]
   1fd70:	cmp	r3, #4
   1fd74:	bne	1fdbc <flatcc_builder_truncate_vector@@Base+0x5c>
   1fd78:	ldr	r3, [r2, #20]
   1fd7c:	cmp	r3, r1
   1fd80:	bcc	1fddc <flatcc_builder_truncate_vector@@Base+0x7c>
   1fd84:	sub	r3, r3, r1
   1fd88:	str	r3, [r2, #20]
   1fd8c:	ldr	r2, [r0, #32]
   1fd90:	ldr	r3, [r0, #20]
   1fd94:	ldr	ip, [r0, #16]
   1fd98:	ldr	r2, [r2, #16]
   1fd9c:	mls	r3, r2, r1, r3
   1fda0:	mul	r2, r2, r1
   1fda4:	mov	r1, #0
   1fda8:	str	r3, [r0, #20]
   1fdac:	add	r0, ip, r3
   1fdb0:	bl	12ebc <memset@plt>
   1fdb4:	mov	r0, #0
   1fdb8:	pop	{fp, pc}
   1fdbc:	ldr	r0, [pc, #56]	; 1fdfc <flatcc_builder_truncate_vector@@Base+0x9c>
   1fdc0:	ldr	r1, [pc, #56]	; 1fe00 <flatcc_builder_truncate_vector@@Base+0xa0>
   1fdc4:	ldr	r3, [pc, #56]	; 1fe04 <flatcc_builder_truncate_vector@@Base+0xa4>
   1fdc8:	movw	r2, #985	; 0x3d9
   1fdcc:	add	r0, pc, r0
   1fdd0:	add	r1, pc, r1
   1fdd4:	add	r3, pc, r3
   1fdd8:	bl	12f04 <__assert_fail@plt>
   1fddc:	ldr	r0, [pc, #36]	; 1fe08 <flatcc_builder_truncate_vector@@Base+0xa8>
   1fde0:	ldr	r1, [pc, #36]	; 1fe0c <flatcc_builder_truncate_vector@@Base+0xac>
   1fde4:	ldr	r3, [pc, #36]	; 1fe10 <flatcc_builder_truncate_vector@@Base+0xb0>
   1fde8:	movw	r2, #986	; 0x3da
   1fdec:	add	r0, pc, r0
   1fdf0:	add	r1, pc, r1
   1fdf4:	add	r3, pc, r3
   1fdf8:	bl	12f04 <__assert_fail@plt>
   1fdfc:	andeq	r8, r0, r4, lsl #13
   1fe00:	andeq	r8, r0, r6, asr #6
   1fe04:	andeq	r8, r0, r6, lsr r9
   1fe08:	andeq	r8, r0, sp, asr r9
   1fe0c:	andeq	r8, r0, r6, lsr #6
   1fe10:	andeq	r8, r0, r6, lsl r9

0001fe14 <flatcc_builder_truncate_offset_vector@@Base>:
   1fe14:	push	{fp, lr}
   1fe18:	mov	fp, sp
   1fe1c:	ldr	r2, [r0, #32]
   1fe20:	ldrh	r3, [r2, #14]
   1fe24:	cmp	r3, #5
   1fe28:	bne	1fe70 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   1fe2c:	ldr	r3, [r2, #20]
   1fe30:	cmp	r3, r1
   1fe34:	bcc	1fe90 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   1fe38:	sub	r3, r3, r1
   1fe3c:	str	r3, [r2, #20]
   1fe40:	ldr	r2, [r0, #32]
   1fe44:	ldr	r3, [r0, #20]
   1fe48:	ldr	ip, [r0, #16]
   1fe4c:	ldr	r2, [r2, #16]
   1fe50:	mls	r3, r2, r1, r3
   1fe54:	mul	r2, r2, r1
   1fe58:	mov	r1, #0
   1fe5c:	str	r3, [r0, #20]
   1fe60:	add	r0, ip, r3
   1fe64:	bl	12ebc <memset@plt>
   1fe68:	mov	r0, #0
   1fe6c:	pop	{fp, pc}
   1fe70:	ldr	r0, [pc, #56]	; 1feb0 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   1fe74:	ldr	r1, [pc, #56]	; 1feb4 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   1fe78:	ldr	r3, [pc, #56]	; 1feb8 <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   1fe7c:	movw	r2, #994	; 0x3e2
   1fe80:	add	r0, pc, r0
   1fe84:	add	r1, pc, r1
   1fe88:	add	r3, pc, r3
   1fe8c:	bl	12f04 <__assert_fail@plt>
   1fe90:	ldr	r0, [pc, #36]	; 1febc <flatcc_builder_truncate_offset_vector@@Base+0xa8>
   1fe94:	ldr	r1, [pc, #36]	; 1fec0 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   1fe98:	ldr	r3, [pc, #36]	; 1fec4 <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   1fe9c:	movw	r2, #995	; 0x3e3
   1fea0:	add	r0, pc, r0
   1fea4:	add	r1, pc, r1
   1fea8:	add	r3, pc, r3
   1feac:	bl	12f04 <__assert_fail@plt>
   1feb0:	andeq	r8, r0, r9, asr #13
   1feb4:	muleq	r0, r2, r2
   1feb8:	andeq	r8, r0, r5, ror #17
   1febc:	andeq	r8, r0, r3, lsl r9
   1fec0:	andeq	r8, r0, r2, ror r2
   1fec4:	andeq	r8, r0, r5, asr #17

0001fec8 <flatcc_builder_truncate_string@@Base>:
   1fec8:	push	{fp, lr}
   1fecc:	mov	fp, sp
   1fed0:	mov	r2, r1
   1fed4:	ldr	r1, [r0, #32]
   1fed8:	ldrh	r3, [r1, #14]
   1fedc:	cmp	r3, #6
   1fee0:	bne	1ff1c <flatcc_builder_truncate_string@@Base+0x54>
   1fee4:	ldr	r3, [r1, #20]
   1fee8:	cmp	r3, r2
   1feec:	bcc	1ff3c <flatcc_builder_truncate_string@@Base+0x74>
   1fef0:	sub	r3, r3, r2
   1fef4:	str	r3, [r1, #20]
   1fef8:	ldr	r3, [r0, #20]
   1fefc:	ldr	r1, [r0, #16]
   1ff00:	sub	r3, r3, r2
   1ff04:	str	r3, [r0, #20]
   1ff08:	add	r0, r1, r3
   1ff0c:	mov	r1, #0
   1ff10:	bl	12ebc <memset@plt>
   1ff14:	mov	r0, #0
   1ff18:	pop	{fp, pc}
   1ff1c:	ldr	r0, [pc, #56]	; 1ff5c <flatcc_builder_truncate_string@@Base+0x94>
   1ff20:	ldr	r1, [pc, #56]	; 1ff60 <flatcc_builder_truncate_string@@Base+0x98>
   1ff24:	ldr	r3, [pc, #56]	; 1ff64 <flatcc_builder_truncate_string@@Base+0x9c>
   1ff28:	movw	r2, #1003	; 0x3eb
   1ff2c:	add	r0, pc, r0
   1ff30:	add	r1, pc, r1
   1ff34:	add	r3, pc, r3
   1ff38:	bl	12f04 <__assert_fail@plt>
   1ff3c:	ldr	r0, [pc, #36]	; 1ff68 <flatcc_builder_truncate_string@@Base+0xa0>
   1ff40:	ldr	r1, [pc, #36]	; 1ff6c <flatcc_builder_truncate_string@@Base+0xa4>
   1ff44:	ldr	r3, [pc, #36]	; 1ff70 <flatcc_builder_truncate_string@@Base+0xa8>
   1ff48:	mov	r2, #1004	; 0x3ec
   1ff4c:	add	r0, pc, r0
   1ff50:	add	r1, pc, r1
   1ff54:	add	r3, pc, r3
   1ff58:	bl	12f04 <__assert_fail@plt>
   1ff5c:	andeq	r8, r0, r6, lsr #14
   1ff60:	andeq	r8, r0, r6, ror #3
   1ff64:			; <UNDEFINED> instruction: 0x000088ba
   1ff68:	andeq	r8, r0, r1, ror #17
   1ff6c:	andeq	r8, r0, r6, asr #3
   1ff70:	muleq	r0, sl, r8

0001ff74 <flatcc_builder_start_vector@@Base>:
   1ff74:	push	{r4, r5, r6, r7, fp, lr}
   1ff78:	add	fp, sp, #16
   1ff7c:	mov	r7, #4
   1ff80:	cmp	r2, #4
   1ff84:	mov	r6, r1
   1ff88:	mov	r5, r3
   1ff8c:	mov	r4, r0
   1ff90:	movls	r2, r7
   1ff94:	mov	r1, r2
   1ff98:	bl	1ef68 <flatcc_builder_start_buffer@@Base+0xc0>
   1ff9c:	mov	r1, r0
   1ffa0:	mvn	r0, #0
   1ffa4:	cmp	r1, #0
   1ffa8:	popne	{r4, r5, r6, r7, fp, pc}
   1ffac:	ldr	r0, [r4, #32]
   1ffb0:	str	r6, [r0, #16]
   1ffb4:	mov	r0, #0
   1ffb8:	ldr	r1, [r4, #32]
   1ffbc:	str	r0, [r1, #20]
   1ffc0:	ldr	r1, [r4, #32]
   1ffc4:	str	r5, [r1, #24]
   1ffc8:	ldr	r1, [r4, #32]
   1ffcc:	strh	r7, [r1, #14]
   1ffd0:	ldr	r2, [r4, #28]
   1ffd4:	ldr	r3, [r4, #60]	; 0x3c
   1ffd8:	ldr	r7, [r4, #64]	; 0x40
   1ffdc:	add	r3, r3, r2
   1ffe0:	sub	r2, r7, r2
   1ffe4:	str	r3, [r4, #16]
   1ffe8:	mvn	r3, #3
   1ffec:	cmn	r2, #4
   1fff0:	movcs	r2, r3
   1fff4:	str	r2, [r4, #24]
   1fff8:	str	r3, [r1, #4]
   1fffc:	pop	{r4, r5, r6, r7, fp, pc}

00020000 <flatcc_builder_start_offset_vector@@Base>:
   20000:	push	{r4, r5, fp, lr}
   20004:	add	fp, sp, #8
   20008:	mov	r1, #4
   2000c:	mov	r4, r0
   20010:	mov	r5, #4
   20014:	bl	1ef68 <flatcc_builder_start_buffer@@Base+0xc0>
   20018:	mov	r1, r0
   2001c:	mvn	r0, #0
   20020:	cmp	r1, #0
   20024:	popne	{r4, r5, fp, pc}
   20028:	ldr	r0, [r4, #32]
   2002c:	mov	r2, #5
   20030:	str	r5, [r0, #16]
   20034:	mov	r0, #0
   20038:	ldr	r1, [r4, #32]
   2003c:	str	r0, [r1, #20]
   20040:	ldr	r1, [r4, #32]
   20044:	strh	r2, [r1, #14]
   20048:	ldr	r2, [r4, #28]
   2004c:	ldr	r3, [r4, #60]	; 0x3c
   20050:	ldr	r5, [r4, #64]	; 0x40
   20054:	add	r3, r3, r2
   20058:	sub	r2, r5, r2
   2005c:	str	r3, [r4, #16]
   20060:	mvn	r3, #3
   20064:	cmn	r2, #4
   20068:	movcs	r2, r3
   2006c:	str	r2, [r4, #24]
   20070:	str	r3, [r1, #4]
   20074:	pop	{r4, r5, fp, pc}

00020078 <flatcc_builder_create_offset_vector@@Base>:
   20078:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2007c:	add	fp, sp, #24
   20080:	sub	sp, sp, #8
   20084:	mov	r8, r1
   20088:	mov	r1, #4
   2008c:	mov	r6, r2
   20090:	mov	r4, r0
   20094:	mov	r7, #4
   20098:	bl	1ef68 <flatcc_builder_start_buffer@@Base+0xc0>
   2009c:	cmp	r0, #0
   200a0:	beq	200b0 <flatcc_builder_create_offset_vector@@Base+0x38>
   200a4:	mov	r0, #0
   200a8:	sub	sp, fp, #24
   200ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   200b0:	ldr	r0, [r4, #32]
   200b4:	mov	r1, #0
   200b8:	str	r7, [r0, #16]
   200bc:	ldr	r0, [r4, #32]
   200c0:	str	r1, [r0, #20]
   200c4:	mov	r1, #5
   200c8:	ldr	r0, [r4, #32]
   200cc:	strh	r1, [r0, #14]
   200d0:	ldr	r1, [r4, #28]
   200d4:	ldr	r2, [r4, #60]	; 0x3c
   200d8:	ldr	r3, [r4, #64]	; 0x40
   200dc:	add	r2, r2, r1
   200e0:	sub	r1, r3, r1
   200e4:	str	r2, [r4, #16]
   200e8:	mvn	r2, #3
   200ec:	cmn	r1, #4
   200f0:	movcs	r1, r2
   200f4:	str	r1, [r4, #24]
   200f8:	str	r2, [r0, #4]
   200fc:	ldr	r1, [r0, #20]
   20100:	adds	r1, r1, r6
   20104:	cmpcc	r1, #1073741824	; 0x40000000
   20108:	bcc	2012c <flatcc_builder_create_offset_vector@@Base+0xb4>
   2010c:	ldr	r0, [pc, #200]	; 201dc <flatcc_builder_create_offset_vector@@Base+0x164>
   20110:	ldr	r1, [pc, #200]	; 201e0 <flatcc_builder_create_offset_vector@@Base+0x168>
   20114:	ldr	r3, [pc, #200]	; 201e4 <flatcc_builder_create_offset_vector@@Base+0x16c>
   20118:	mov	r2, #892	; 0x37c
   2011c:	add	r0, pc, r0
   20120:	add	r1, pc, r1
   20124:	add	r3, pc, r3
   20128:	bl	12f04 <__assert_fail@plt>
   2012c:	str	r1, [r0, #20]
   20130:	ldr	r7, [r4, #20]
   20134:	ldr	r0, [r4, #24]
   20138:	add	r1, r7, r6, lsl #2
   2013c:	cmp	r1, r0
   20140:	str	r1, [r4, #20]
   20144:	bcs	20158 <flatcc_builder_create_offset_vector@@Base+0xe0>
   20148:	ldr	r0, [r4, #16]
   2014c:	adds	r0, r0, r7
   20150:	bne	201c0 <flatcc_builder_create_offset_vector@@Base+0x148>
   20154:	b	200a4 <flatcc_builder_create_offset_vector@@Base+0x2c>
   20158:	ldr	r2, [r4, #28]
   2015c:	ldr	r0, [r4, #40]	; 0x28
   20160:	ldr	r5, [r4, #48]	; 0x30
   20164:	mov	r3, #1
   20168:	str	r3, [sp]
   2016c:	mov	r3, #1
   20170:	add	r1, r1, r2
   20174:	add	r2, r1, #1
   20178:	add	r1, r4, #60	; 0x3c
   2017c:	blx	r5
   20180:	cmp	r0, #0
   20184:	bne	200a4 <flatcc_builder_create_offset_vector@@Base+0x2c>
   20188:	ldr	r1, [r4, #28]
   2018c:	ldr	r0, [r4, #60]	; 0x3c
   20190:	ldr	r3, [r4, #64]	; 0x40
   20194:	ldr	r2, [r4, #32]
   20198:	add	r0, r0, r1
   2019c:	sub	r1, r3, r1
   201a0:	mvn	r3, #3
   201a4:	cmn	r1, #4
   201a8:	str	r0, [r4, #16]
   201ac:	movcs	r1, r3
   201b0:	str	r1, [r4, #24]
   201b4:	str	r3, [r2, #4]
   201b8:	adds	r0, r0, r7
   201bc:	beq	200a4 <flatcc_builder_create_offset_vector@@Base+0x2c>
   201c0:	lsl	r2, r6, #2
   201c4:	mov	r1, r8
   201c8:	bl	12e2c <memcpy@plt>
   201cc:	mov	r0, r4
   201d0:	sub	sp, fp, #24
   201d4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   201d8:	b	201e8 <flatcc_builder_end_offset_vector@@Base>
   201dc:	andeq	r9, r0, r0, asr #1
   201e0:	strdeq	r7, [r0], -r6
   201e4:	ldrdeq	r9, [r0], -r3

000201e8 <flatcc_builder_end_offset_vector@@Base>:
   201e8:	push	{r4, r5, fp, lr}
   201ec:	add	fp, sp, #8
   201f0:	mov	r4, r0
   201f4:	ldr	r0, [r0, #32]
   201f8:	ldrh	r1, [r0, #14]
   201fc:	cmp	r1, #5
   20200:	bne	202a0 <flatcc_builder_end_offset_vector@@Base+0xb8>
   20204:	ldr	r2, [r0, #20]
   20208:	ldr	r1, [r4, #16]
   2020c:	mov	r0, r4
   20210:	mov	r3, #0
   20214:	bl	21304 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   20218:	mov	r5, r0
   2021c:	cmp	r0, #0
   20220:	beq	20298 <flatcc_builder_end_offset_vector@@Base+0xb0>
   20224:	ldr	r0, [r4, #16]
   20228:	ldr	r2, [r4, #20]
   2022c:	mov	r1, #0
   20230:	bl	12ebc <memset@plt>
   20234:	ldr	r0, [r4, #32]
   20238:	ldr	r1, [r4, #60]	; 0x3c
   2023c:	ldr	ip, [r4, #64]	; 0x40
   20240:	ldr	r3, [r0, #8]
   20244:	str	r3, [r4, #20]
   20248:	ldr	r3, [r0]
   2024c:	str	r3, [r4, #28]
   20250:	add	r1, r1, r3
   20254:	ldr	r2, [r0, #4]
   20258:	str	r1, [r4, #16]
   2025c:	sub	r1, ip, r3
   20260:	cmp	r1, r2
   20264:	movhi	r1, r2
   20268:	str	r1, [r4, #24]
   2026c:	ldrh	r1, [r4, #130]	; 0x82
   20270:	ldrh	r2, [r4, #128]	; 0x80
   20274:	cmp	r2, r1
   20278:	strhcc	r1, [r4, #128]	; 0x80
   2027c:	ldrh	r1, [r0, #12]
   20280:	sub	r0, r0, #36	; 0x24
   20284:	str	r0, [r4, #32]
   20288:	strh	r1, [r4, #130]	; 0x82
   2028c:	ldr	r0, [r4, #156]	; 0x9c
   20290:	sub	r0, r0, #1
   20294:	str	r0, [r4, #156]	; 0x9c
   20298:	mov	r0, r5
   2029c:	pop	{r4, r5, fp, pc}
   202a0:	ldr	r0, [pc, #24]	; 202c0 <flatcc_builder_end_offset_vector@@Base+0xd8>
   202a4:	ldr	r1, [pc, #24]	; 202c4 <flatcc_builder_end_offset_vector@@Base+0xdc>
   202a8:	ldr	r3, [pc, #24]	; 202c8 <flatcc_builder_end_offset_vector@@Base+0xe0>
   202ac:	movw	r2, #1480	; 0x5c8
   202b0:	add	r0, pc, r0
   202b4:	add	r1, pc, r1
   202b8:	add	r3, pc, r3
   202bc:	bl	12f04 <__assert_fail@plt>
   202c0:	muleq	r0, r9, r2
   202c4:	andeq	r7, r0, r2, ror #28
   202c8:	andeq	r8, r0, r0, asr #17

000202cc <flatcc_builder_start_string@@Base>:
   202cc:	push	{r4, r5, fp, lr}
   202d0:	add	fp, sp, #8
   202d4:	mov	r1, #1
   202d8:	mov	r4, r0
   202dc:	mov	r5, #1
   202e0:	bl	1ef68 <flatcc_builder_start_buffer@@Base+0xc0>
   202e4:	mov	r1, r0
   202e8:	mvn	r0, #0
   202ec:	cmp	r1, #0
   202f0:	popne	{r4, r5, fp, pc}
   202f4:	ldr	r0, [r4, #32]
   202f8:	mov	r2, #6
   202fc:	str	r5, [r0, #16]
   20300:	mov	r0, #0
   20304:	ldr	r1, [r4, #32]
   20308:	str	r0, [r1, #20]
   2030c:	ldr	r1, [r4, #32]
   20310:	strh	r2, [r1, #14]
   20314:	ldr	r2, [r4, #28]
   20318:	ldr	r3, [r4, #60]	; 0x3c
   2031c:	ldr	r5, [r4, #64]	; 0x40
   20320:	add	r3, r3, r2
   20324:	sub	r2, r5, r2
   20328:	str	r3, [r4, #16]
   2032c:	mvn	r3, #3
   20330:	cmn	r2, #4
   20334:	movcs	r2, r3
   20338:	str	r2, [r4, #24]
   2033c:	str	r3, [r1, #4]
   20340:	pop	{r4, r5, fp, pc}

00020344 <flatcc_builder_reserve_table@@Base>:
   20344:	push	{r4, r5, r6, sl, fp, lr}
   20348:	add	fp, sp, #16
   2034c:	sub	sp, sp, #8
   20350:	cmn	r1, #1
   20354:	ble	2042c <flatcc_builder_reserve_table@@Base+0xe8>
   20358:	mov	r4, r0
   2035c:	ldr	r0, [r0, #32]
   20360:	mov	r5, r1
   20364:	ldr	r1, [r4, #56]	; 0x38
   20368:	ldrh	r2, [r0, #28]
   2036c:	ldr	r0, [r0, #16]
   20370:	add	r6, r0, r2, lsl #1
   20374:	add	r0, r6, r5, lsl #1
   20378:	add	r2, r0, #4
   2037c:	cmp	r2, r1
   20380:	bls	203a8 <flatcc_builder_reserve_table@@Base+0x64>
   20384:	ldr	r0, [r4, #40]	; 0x28
   20388:	ldr	ip, [r4, #48]	; 0x30
   2038c:	mov	r3, #0
   20390:	add	r1, r4, #52	; 0x34
   20394:	str	r3, [sp]
   20398:	mov	r3, #1
   2039c:	blx	ip
   203a0:	cmp	r0, #0
   203a4:	bne	2044c <flatcc_builder_reserve_table@@Base+0x108>
   203a8:	ldr	r0, [r4, #52]	; 0x34
   203ac:	adds	r0, r0, r6
   203b0:	str	r0, [r4, #4]
   203b4:	beq	20420 <flatcc_builder_reserve_table@@Base+0xdc>
   203b8:	add	r0, r0, #4
   203bc:	lsl	r1, r5, #1
   203c0:	str	r0, [r4, #4]
   203c4:	ldr	r0, [r4, #32]
   203c8:	ldr	r3, [r4, #80]	; 0x50
   203cc:	ldr	r5, [r0, #20]
   203d0:	orr	r0, r1, #1
   203d4:	add	r2, r5, r0
   203d8:	cmp	r2, r3
   203dc:	bls	20404 <flatcc_builder_reserve_table@@Base+0xc0>
   203e0:	ldr	r0, [r4, #40]	; 0x28
   203e4:	ldr	r6, [r4, #48]	; 0x30
   203e8:	mov	r3, #3
   203ec:	add	r1, r4, #76	; 0x4c
   203f0:	str	r3, [sp]
   203f4:	mov	r3, #0
   203f8:	blx	r6
   203fc:	cmp	r0, #0
   20400:	bne	2044c <flatcc_builder_reserve_table@@Base+0x108>
   20404:	ldr	r0, [r4, #76]	; 0x4c
   20408:	adds	r0, r0, r5
   2040c:	str	r0, [r4]
   20410:	mov	r0, #0
   20414:	mvneq	r0, #0
   20418:	sub	sp, fp, #16
   2041c:	pop	{r4, r5, r6, sl, fp, pc}
   20420:	mvn	r0, #0
   20424:	sub	sp, fp, #16
   20428:	pop	{r4, r5, r6, sl, fp, pc}
   2042c:	ldr	r0, [pc, #56]	; 2046c <flatcc_builder_reserve_table@@Base+0x128>
   20430:	ldr	r1, [pc, #56]	; 20470 <flatcc_builder_reserve_table@@Base+0x12c>
   20434:	ldr	r3, [pc, #56]	; 20474 <flatcc_builder_reserve_table@@Base+0x130>
   20438:	movw	r2, #1065	; 0x429
   2043c:	add	r0, pc, r0
   20440:	add	r1, pc, r1
   20444:	add	r3, pc, r3
   20448:	bl	12f04 <__assert_fail@plt>
   2044c:	ldr	r0, [pc, #36]	; 20478 <flatcc_builder_reserve_table@@Base+0x134>
   20450:	ldr	r1, [pc, #36]	; 2047c <flatcc_builder_reserve_table@@Base+0x138>
   20454:	ldr	r3, [pc, #36]	; 20480 <flatcc_builder_reserve_table@@Base+0x13c>
   20458:	mov	r2, #308	; 0x134
   2045c:	add	r0, pc, r0
   20460:	add	r1, pc, r1
   20464:	add	r3, pc, r3
   20468:	bl	12f04 <__assert_fail@plt>
   2046c:	andeq	r8, r0, r4, asr r4
   20470:	ldrdeq	r7, [r0], -r6
   20474:	andeq	r8, r0, fp, lsl #8
   20478:	andeq	r8, r0, r7, ror lr
   2047c:			; <UNDEFINED> instruction: 0x00007cb6
   20480:	andeq	r8, r0, r9, lsr #25

00020484 <flatcc_builder_start_table@@Base>:
   20484:	push	{r4, r5, r6, r7, fp, lr}
   20488:	add	fp, sp, #16
   2048c:	sub	sp, sp, #8
   20490:	mov	r6, r1
   20494:	mov	r1, #4
   20498:	mov	r4, r0
   2049c:	bl	1ef68 <flatcc_builder_start_buffer@@Base+0xc0>
   204a0:	mvn	r5, #0
   204a4:	cmp	r0, #0
   204a8:	beq	204b8 <flatcc_builder_start_table@@Base+0x34>
   204ac:	mov	r0, r5
   204b0:	sub	sp, fp, #16
   204b4:	pop	{r4, r5, r6, r7, fp, pc}
   204b8:	mov	r1, r4
   204bc:	ldr	r2, [r4, #4]
   204c0:	ldr	r3, [r4, #32]
   204c4:	ldr	r0, [r1, #52]!	; 0x34
   204c8:	sub	r0, r2, r0
   204cc:	str	r0, [r3, #16]
   204d0:	ldr	r0, [r4]
   204d4:	ldr	r3, [r4, #76]	; 0x4c
   204d8:	ldr	r2, [r4, #32]
   204dc:	sub	r0, r0, r3
   204e0:	mov	r3, #0
   204e4:	str	r0, [r2, #20]
   204e8:	ldr	r0, [r4, #12]
   204ec:	ldr	r2, [r4, #32]
   204f0:	str	r0, [r2, #24]
   204f4:	ldr	r0, [r4, #32]
   204f8:	ldrh	r2, [r4, #8]
   204fc:	strh	r2, [r0, #28]
   20500:	movw	r0, #15186	; 0x3b52
   20504:	strh	r3, [r4, #8]
   20508:	mov	r2, #3
   2050c:	movt	r0, #12137	; 0x2f69
   20510:	str	r0, [r4, #12]
   20514:	ldr	r0, [r4, #32]
   20518:	strh	r2, [r0, #14]
   2051c:	ldrh	r2, [r0, #28]
   20520:	ldr	r0, [r0, #16]
   20524:	add	r7, r0, r2, lsl #1
   20528:	add	r0, r7, r6, lsl #1
   2052c:	add	r2, r0, #4
   20530:	ldr	r0, [r4, #56]	; 0x38
   20534:	cmp	r2, r0
   20538:	bls	20558 <flatcc_builder_start_table@@Base+0xd4>
   2053c:	ldr	r0, [r4, #40]	; 0x28
   20540:	ldr	ip, [r4, #48]	; 0x30
   20544:	str	r3, [sp]
   20548:	mov	r3, #1
   2054c:	blx	ip
   20550:	cmp	r0, #0
   20554:	bne	205fc <flatcc_builder_start_table@@Base+0x178>
   20558:	ldr	r0, [r4, #52]	; 0x34
   2055c:	adds	r0, r0, r7
   20560:	str	r0, [r4, #4]
   20564:	beq	204ac <flatcc_builder_start_table@@Base+0x28>
   20568:	add	r0, r0, #4
   2056c:	lsl	r1, r6, #1
   20570:	str	r0, [r4, #4]
   20574:	ldr	r0, [r4, #32]
   20578:	ldr	r3, [r4, #80]	; 0x50
   2057c:	ldr	r6, [r0, #20]
   20580:	orr	r0, r1, #1
   20584:	add	r2, r6, r0
   20588:	cmp	r2, r3
   2058c:	bls	205b4 <flatcc_builder_start_table@@Base+0x130>
   20590:	ldr	r0, [r4, #40]	; 0x28
   20594:	ldr	r7, [r4, #48]	; 0x30
   20598:	mov	r3, #3
   2059c:	add	r1, r4, #76	; 0x4c
   205a0:	str	r3, [sp]
   205a4:	mov	r3, #0
   205a8:	blx	r7
   205ac:	cmp	r0, #0
   205b0:	bne	205fc <flatcc_builder_start_table@@Base+0x178>
   205b4:	ldr	r0, [r4, #76]	; 0x4c
   205b8:	adds	r0, r0, r6
   205bc:	str	r0, [r4]
   205c0:	beq	204ac <flatcc_builder_start_table@@Base+0x28>
   205c4:	ldr	r0, [r4, #28]
   205c8:	ldr	r2, [r4, #60]	; 0x3c
   205cc:	ldr	r3, [r4, #64]	; 0x40
   205d0:	ldr	r1, [r4, #32]
   205d4:	mov	r5, #0
   205d8:	add	r2, r2, r0
   205dc:	sub	r0, r3, r0
   205e0:	str	r2, [r4, #16]
   205e4:	movw	r2, #65532	; 0xfffc
   205e8:	cmp	r0, r2
   205ec:	movcs	r0, r2
   205f0:	str	r0, [r4, #24]
   205f4:	str	r2, [r1, #4]
   205f8:	b	204ac <flatcc_builder_start_table@@Base+0x28>
   205fc:	ldr	r0, [pc, #24]	; 2061c <flatcc_builder_start_table@@Base+0x198>
   20600:	ldr	r1, [pc, #24]	; 20620 <flatcc_builder_start_table@@Base+0x19c>
   20604:	ldr	r3, [pc, #24]	; 20624 <flatcc_builder_start_table@@Base+0x1a0>
   20608:	mov	r2, #308	; 0x134
   2060c:	add	r0, pc, r0
   20610:	add	r1, pc, r1
   20614:	add	r3, pc, r3
   20618:	bl	12f04 <__assert_fail@plt>
   2061c:	andeq	r8, r0, r7, asr #25
   20620:	andeq	r7, r0, r6, lsl #22
   20624:	strdeq	r8, [r0], -r9

00020628 <flatcc_builder_create_vtable@@Base>:
   20628:	push	{r4, r5, fp, lr}
   2062c:	add	fp, sp, #8
   20630:	sub	sp, sp, #80	; 0x50
   20634:	mov	r3, r2
   20638:	mov	r2, #0
   2063c:	mov	r4, r0
   20640:	cmp	r3, #0
   20644:	str	r2, [sp, #12]
   20648:	str	r2, [sp, #8]
   2064c:	movne	r2, #1
   20650:	strne	r3, [sp, #20]
   20654:	strne	r1, [sp, #16]
   20658:	strne	r3, [sp, #8]
   2065c:	strne	r2, [sp, #12]
   20660:	ldr	r0, [r4, #152]	; 0x98
   20664:	cmp	r0, #0
   20668:	bne	20678 <flatcc_builder_create_vtable@@Base+0x50>
   2066c:	ldr	r0, [r4, #180]	; 0xb4
   20670:	cmp	r0, #0
   20674:	beq	206d4 <flatcc_builder_create_vtable@@Base+0xac>
   20678:	cmp	r3, #0
   2067c:	beq	20718 <flatcc_builder_create_vtable@@Base+0xf0>
   20680:	ldr	r0, [r4, #136]	; 0x88
   20684:	ldr	ip, [r4, #44]	; 0x2c
   20688:	add	r1, sp, #8
   2068c:	add	r1, r1, #8
   20690:	sub	r5, r0, r3
   20694:	ldr	r0, [r4, #36]	; 0x24
   20698:	str	r3, [sp]
   2069c:	mov	r3, r5
   206a0:	blx	ip
   206a4:	cmp	r0, #0
   206a8:	bne	20738 <flatcc_builder_create_vtable@@Base+0x110>
   206ac:	cmp	r5, #0
   206b0:	str	r5, [r4, #136]	; 0x88
   206b4:	beq	206c8 <flatcc_builder_create_vtable@@Base+0xa0>
   206b8:	add	r1, r5, #1
   206bc:	mov	r0, r1
   206c0:	sub	sp, fp, #8
   206c4:	pop	{r4, r5, fp, pc}
   206c8:	mov	r0, #0
   206cc:	sub	sp, fp, #8
   206d0:	pop	{r4, r5, fp, pc}
   206d4:	ldr	r5, [r4, #140]	; 0x8c
   206d8:	ldr	r0, [r4, #36]	; 0x24
   206dc:	ldr	ip, [r4, #44]	; 0x2c
   206e0:	add	r1, r5, r3
   206e4:	str	r1, [r4, #140]	; 0x8c
   206e8:	add	r1, sp, #8
   206ec:	str	r3, [sp]
   206f0:	mov	r3, r5
   206f4:	add	r1, r1, #8
   206f8:	blx	ip
   206fc:	cmp	r0, #0
   20700:	bne	20758 <flatcc_builder_create_vtable@@Base+0x130>
   20704:	adds	r1, r5, #1
   20708:	mov	r0, #0
   2070c:	movcc	r0, r1
   20710:	sub	sp, fp, #8
   20714:	pop	{r4, r5, fp, pc}
   20718:	ldr	r0, [pc, #100]	; 20784 <flatcc_builder_create_vtable@@Base+0x15c>
   2071c:	ldr	r1, [pc, #100]	; 20788 <flatcc_builder_create_vtable@@Base+0x160>
   20720:	ldr	r3, [pc, #100]	; 2078c <flatcc_builder_create_vtable@@Base+0x164>
   20724:	movw	r2, #647	; 0x287
   20728:	add	r0, pc, r0
   2072c:	add	r1, pc, r1
   20730:	add	r3, pc, r3
   20734:	bl	12f04 <__assert_fail@plt>
   20738:	ldr	r0, [pc, #80]	; 20790 <flatcc_builder_create_vtable@@Base+0x168>
   2073c:	ldr	r1, [pc, #80]	; 20794 <flatcc_builder_create_vtable@@Base+0x16c>
   20740:	ldr	r3, [pc, #80]	; 20798 <flatcc_builder_create_vtable@@Base+0x170>
   20744:	movw	r2, #651	; 0x28b
   20748:	add	r0, pc, r0
   2074c:	add	r1, pc, r1
   20750:	add	r3, pc, r3
   20754:	bl	12f04 <__assert_fail@plt>
   20758:	ldr	r0, [pc, #24]	; 20778 <flatcc_builder_create_vtable@@Base+0x150>
   2075c:	ldr	r1, [pc, #24]	; 2077c <flatcc_builder_create_vtable@@Base+0x154>
   20760:	ldr	r3, [pc, #24]	; 20780 <flatcc_builder_create_vtable@@Base+0x158>
   20764:	movw	r2, #677	; 0x2a5
   20768:	add	r0, pc, r0
   2076c:	add	r1, pc, r1
   20770:	add	r3, pc, r3
   20774:	bl	12f04 <__assert_fail@plt>
   20778:	andeq	r8, r0, fp, ror #22
   2077c:	andeq	r7, r0, sl, lsr #19
   20780:	ldrdeq	r8, [r0], -lr
   20784:	andeq	r8, r0, fp, lsr #23
   20788:	andeq	r7, r0, sl, ror #19
   2078c:	andeq	r8, r0, r2, ror #20
   20790:	andeq	r8, r0, fp, lsl #23
   20794:	andeq	r7, r0, sl, asr #19
   20798:	andeq	r8, r0, r2, asr #20

0002079c <flatcc_builder_create_cached_vtable@@Base>:
   2079c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   207a0:	add	fp, sp, #28
   207a4:	sub	sp, sp, #20
   207a8:	mov	sl, r0
   207ac:	ldr	r0, [r0, #116]	; 0x74
   207b0:	mov	r8, r3
   207b4:	mov	r5, r2
   207b8:	str	r1, [sp, #16]
   207bc:	cmp	r0, #0
   207c0:	beq	20864 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   207c4:	ldr	r1, [sl, #92]	; 0x5c
   207c8:	rsb	r0, r0, #32
   207cc:	lsr	r0, r8, r0
   207d0:	add	r6, r1, r0, lsl #2
   207d4:	cmp	r6, #0
   207d8:	beq	20928 <flatcc_builder_create_cached_vtable@@Base+0x18c>
   207dc:	ldr	r7, [r6]
   207e0:	str	r6, [sp, #12]
   207e4:	cmp	r7, #0
   207e8:	beq	20930 <flatcc_builder_create_cached_vtable@@Base+0x194>
   207ec:	ldr	r4, [sl, #68]	; 0x44
   207f0:	ldr	r8, [sl, #100]	; 0x64
   207f4:	mov	r0, #0
   207f8:	str	r0, [sp, #8]
   207fc:	b	20810 <flatcc_builder_create_cached_vtable@@Base+0x74>
   20800:	ldr	r7, [r9, #12]!
   20804:	mov	r6, r9
   20808:	cmp	r7, #0
   2080c:	beq	20920 <flatcc_builder_create_cached_vtable@@Base+0x184>
   20810:	add	r9, r8, r7
   20814:	mov	r1, r4
   20818:	ldr	r0, [r9, #8]
   2081c:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   20820:	cmp	r0, r5
   20824:	bne	20800 <flatcc_builder_create_cached_vtable@@Base+0x64>
   20828:	ldr	r0, [sp, #16]
   2082c:	mov	r2, r5
   20830:	bl	12e8c <bcmp@plt>
   20834:	cmp	r0, #0
   20838:	bne	20800 <flatcc_builder_create_cached_vtable@@Base+0x64>
   2083c:	ldr	r0, [sl, #152]	; 0x98
   20840:	ldr	r1, [r9, #4]
   20844:	cmp	r1, r0
   20848:	beq	20a94 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   2084c:	mov	r6, r9
   20850:	mov	r0, r9
   20854:	ldr	r7, [r6, #12]!
   20858:	cmp	r7, #0
   2085c:	bne	207f8 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   20860:	b	20934 <flatcc_builder_create_cached_vtable@@Base+0x198>
   20864:	ldr	r0, [sl, #124]	; 0x7c
   20868:	cmp	r0, #0
   2086c:	bne	20ae0 <flatcc_builder_create_cached_vtable@@Base+0x344>
   20870:	ldr	r0, [sl, #104]	; 0x68
   20874:	add	r7, sl, #100	; 0x64
   20878:	cmp	r0, #15
   2087c:	bhi	208a8 <flatcc_builder_create_cached_vtable@@Base+0x10c>
   20880:	ldr	r0, [sl, #40]	; 0x28
   20884:	ldr	r6, [sl, #48]	; 0x30
   20888:	mov	r1, #6
   2088c:	mov	r2, #16
   20890:	mov	r3, #0
   20894:	str	r1, [sp]
   20898:	mov	r1, r7
   2089c:	blx	r6
   208a0:	cmp	r0, #0
   208a4:	bne	20ac0 <flatcc_builder_create_cached_vtable@@Base+0x324>
   208a8:	ldr	r0, [r7]
   208ac:	mov	r7, #0
   208b0:	cmp	r0, #0
   208b4:	beq	209d4 <flatcc_builder_create_cached_vtable@@Base+0x238>
   208b8:	mov	r0, #16
   208bc:	mov	r2, #5
   208c0:	add	r1, sl, #92	; 0x5c
   208c4:	mov	r3, #1
   208c8:	mov	r4, #256	; 0x100
   208cc:	str	r0, [sl, #124]	; 0x7c
   208d0:	ldr	r0, [sl, #40]	; 0x28
   208d4:	ldr	r6, [sl, #48]	; 0x30
   208d8:	str	r2, [sp]
   208dc:	mov	r2, #256	; 0x100
   208e0:	blx	r6
   208e4:	cmp	r0, #0
   208e8:	bne	209d4 <flatcc_builder_create_cached_vtable@@Base+0x238>
   208ec:	ldr	r0, [sl, #96]	; 0x60
   208f0:	mov	r1, r4
   208f4:	lsl	r4, r4, #1
   208f8:	cmp	r0, r1, lsl #1
   208fc:	bcs	208f0 <flatcc_builder_create_cached_vtable@@Base+0x154>
   20900:	lsr	r1, r1, #2
   20904:	mvn	r0, #0
   20908:	mov	r2, #1
   2090c:	add	r0, r0, #1
   20910:	cmp	r1, r2, lsl r0
   20914:	bhi	2090c <flatcc_builder_create_cached_vtable@@Base+0x170>
   20918:	str	r0, [sl, #116]	; 0x74
   2091c:	b	207c4 <flatcc_builder_create_cached_vtable@@Base+0x28>
   20920:	ldr	r9, [sp, #8]
   20924:	b	20934 <flatcc_builder_create_cached_vtable@@Base+0x198>
   20928:	mov	r7, #0
   2092c:	b	209d4 <flatcc_builder_create_cached_vtable@@Base+0x238>
   20930:	mov	r9, #0
   20934:	ldr	r4, [sl, #124]	; 0x7c
   20938:	ldr	r0, [sl, #104]	; 0x68
   2093c:	add	r7, sl, #100	; 0x64
   20940:	add	r2, r4, #16
   20944:	cmp	r2, r0
   20948:	bls	20970 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   2094c:	ldr	r0, [sl, #40]	; 0x28
   20950:	ldr	r6, [sl, #48]	; 0x30
   20954:	mov	r1, #6
   20958:	mov	r3, #0
   2095c:	str	r1, [sp]
   20960:	mov	r1, r7
   20964:	blx	r6
   20968:	cmp	r0, #0
   2096c:	bne	20ac0 <flatcc_builder_create_cached_vtable@@Base+0x324>
   20970:	ldr	r0, [r7]
   20974:	mov	r7, #0
   20978:	adds	r4, r0, r4
   2097c:	beq	209d4 <flatcc_builder_create_cached_vtable@@Base+0x238>
   20980:	ldr	r0, [sl, #124]	; 0x7c
   20984:	ldr	r1, [sl, #152]	; 0x98
   20988:	add	r2, r0, #16
   2098c:	str	r2, [sl, #124]	; 0x7c
   20990:	ldr	r2, [sp, #12]
   20994:	str	r1, [r4, #4]
   20998:	ldr	r1, [r2]
   2099c:	str	r1, [r4, #12]
   209a0:	ldr	r1, [sp, #16]
   209a4:	str	r0, [r2]
   209a8:	mov	r0, sl
   209ac:	mov	r2, r5
   209b0:	bl	20628 <flatcc_builder_create_vtable@@Base>
   209b4:	cmp	r0, #0
   209b8:	str	r0, [r4]
   209bc:	beq	209d4 <flatcc_builder_create_cached_vtable@@Base+0x238>
   209c0:	cmp	r9, #0
   209c4:	beq	209e0 <flatcc_builder_create_cached_vtable@@Base+0x244>
   209c8:	ldr	r0, [r9, #8]
   209cc:	str	r0, [r4, #8]
   209d0:	ldr	r7, [r4]
   209d4:	mov	r0, r7
   209d8:	sub	sp, fp, #28
   209dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209e0:	ldr	r6, [sl, #120]	; 0x78
   209e4:	ldr	r0, [sl, #172]	; 0xac
   209e8:	add	r2, r6, r5
   209ec:	cmp	r0, #0
   209f0:	beq	20a2c <flatcc_builder_create_cached_vtable@@Base+0x290>
   209f4:	cmp	r0, r2
   209f8:	bcs	20a2c <flatcc_builder_create_cached_vtable@@Base+0x290>
   209fc:	ldr	r0, [sl, #116]	; 0x74
   20a00:	cmp	r0, #0
   20a04:	beq	209d0 <flatcc_builder_create_cached_vtable@@Base+0x234>
   20a08:	ldr	r0, [sl, #92]	; 0x5c
   20a0c:	ldr	r2, [sl, #96]	; 0x60
   20a10:	mov	r1, #0
   20a14:	mov	r5, #0
   20a18:	bl	12ebc <memset@plt>
   20a1c:	mov	r0, #16
   20a20:	str	r5, [sl, #120]	; 0x78
   20a24:	str	r0, [sl, #124]	; 0x7c
   20a28:	b	209d0 <flatcc_builder_create_cached_vtable@@Base+0x234>
   20a2c:	ldr	r0, [sl, #72]	; 0x48
   20a30:	add	r7, sl, #68	; 0x44
   20a34:	cmp	r2, r0
   20a38:	bls	20a60 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   20a3c:	ldr	r0, [sl, #40]	; 0x28
   20a40:	ldr	ip, [sl, #48]	; 0x30
   20a44:	mov	r1, #2
   20a48:	mov	r3, #0
   20a4c:	str	r1, [sp]
   20a50:	mov	r1, r7
   20a54:	blx	ip
   20a58:	cmp	r0, #0
   20a5c:	bne	20ac0 <flatcc_builder_create_cached_vtable@@Base+0x324>
   20a60:	ldr	r0, [r7]
   20a64:	adds	r0, r0, r6
   20a68:	beq	20a8c <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   20a6c:	ldr	r1, [sl, #120]	; 0x78
   20a70:	mov	r2, r5
   20a74:	str	r1, [r4, #8]
   20a78:	add	r1, r1, r5
   20a7c:	str	r1, [sl, #120]	; 0x78
   20a80:	ldr	r1, [sp, #16]
   20a84:	bl	12e2c <memcpy@plt>
   20a88:	b	209d0 <flatcc_builder_create_cached_vtable@@Base+0x234>
   20a8c:	mvn	r7, #0
   20a90:	b	209d4 <flatcc_builder_create_cached_vtable@@Base+0x238>
   20a94:	ldr	r0, [sp, #12]
   20a98:	cmp	r6, r0
   20a9c:	beq	20ab8 <flatcc_builder_create_cached_vtable@@Base+0x31c>
   20aa0:	mov	r1, r0
   20aa4:	ldr	r0, [r9, #12]
   20aa8:	str	r0, [r6]
   20aac:	ldr	r0, [r1]
   20ab0:	str	r0, [r9, #12]
   20ab4:	str	r7, [r1]
   20ab8:	ldr	r7, [r9]
   20abc:	b	209d4 <flatcc_builder_create_cached_vtable@@Base+0x238>
   20ac0:	ldr	r0, [pc, #68]	; 20b0c <flatcc_builder_create_cached_vtable@@Base+0x370>
   20ac4:	ldr	r1, [pc, #68]	; 20b10 <flatcc_builder_create_cached_vtable@@Base+0x374>
   20ac8:	ldr	r3, [pc, #68]	; 20b14 <flatcc_builder_create_cached_vtable@@Base+0x378>
   20acc:	mov	r2, #308	; 0x134
   20ad0:	add	r0, pc, r0
   20ad4:	add	r1, pc, r1
   20ad8:	add	r3, pc, r3
   20adc:	bl	12f04 <__assert_fail@plt>
   20ae0:	ldr	r0, [pc, #24]	; 20b00 <flatcc_builder_create_cached_vtable@@Base+0x364>
   20ae4:	ldr	r1, [pc, #24]	; 20b04 <flatcc_builder_create_cached_vtable@@Base+0x368>
   20ae8:	ldr	r3, [pc, #24]	; 20b08 <flatcc_builder_create_cached_vtable@@Base+0x36c>
   20aec:	movw	r2, #342	; 0x156
   20af0:	add	r0, pc, r0
   20af4:	add	r1, pc, r1
   20af8:	add	r3, pc, r3
   20afc:	bl	12f04 <__assert_fail@plt>
   20b00:	andeq	r8, r0, r7, lsr #15
   20b04:	andeq	r7, r0, r2, lsr #12
   20b08:	andeq	r8, r0, lr, lsr #15
   20b0c:	andeq	r8, r0, r3, lsl #16
   20b10:	andeq	r7, r0, r2, asr #12
   20b14:	andeq	r8, r0, r5, lsr r6

00020b18 <flatcc_builder_create_table@@Base>:
   20b18:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20b1c:	add	fp, sp, #24
   20b20:	sub	sp, sp, #80	; 0x50
   20b24:	ldr	r5, [fp, #12]
   20b28:	cmn	r5, #1
   20b2c:	ble	20c78 <flatcc_builder_create_table@@Base+0x160>
   20b30:	ldr	ip, [fp, #16]
   20b34:	tst	ip, #1
   20b38:	beq	20c98 <flatcc_builder_create_table@@Base+0x180>
   20b3c:	mov	r8, r0
   20b40:	ldrh	r0, [r0, #128]	; 0x80
   20b44:	cmp	r3, #4
   20b48:	movls	r3, #4
   20b4c:	cmp	r0, r3
   20b50:	strhcc	r3, [r8, #128]	; 0x80
   20b54:	cmp	r5, #1
   20b58:	ldr	r0, [r8, #136]	; 0x88
   20b5c:	sub	r4, r0, r2
   20b60:	sub	r0, r3, #1
   20b64:	and	r0, r4, r0
   20b68:	sub	r4, r4, #4
   20b6c:	add	r3, ip, r0
   20b70:	sub	r3, r4, r3
   20b74:	add	r3, r3, #1
   20b78:	str	r3, [fp, #-28]	; 0xffffffe4
   20b7c:	blt	20bac <flatcc_builder_create_table@@Base+0x94>
   20b80:	ldr	r3, [fp, #8]
   20b84:	sub	ip, r4, r0
   20b88:	mvn	r4, #3
   20b8c:	sub	r4, r4, ip
   20b90:	ldrh	r6, [r3], #2
   20b94:	subs	r5, r5, #1
   20b98:	ldr	r7, [r6, r1]
   20b9c:	add	r7, r4, r7
   20ba0:	sub	r7, r7, r6
   20ba4:	str	r7, [r6, r1]
   20ba8:	bne	20b90 <flatcc_builder_create_table@@Base+0x78>
   20bac:	mov	r4, #4
   20bb0:	sub	r3, fp, #28
   20bb4:	cmp	r2, #0
   20bb8:	str	r4, [sp, #16]
   20bbc:	str	r3, [sp, #12]
   20bc0:	mov	r3, #1
   20bc4:	str	r4, [sp, #4]
   20bc8:	addne	r4, r2, #4
   20bcc:	str	r3, [sp, #8]
   20bd0:	movne	r3, #2
   20bd4:	strne	r2, [sp, #24]
   20bd8:	strne	r1, [sp, #20]
   20bdc:	strne	r3, [sp, #8]
   20be0:	strne	r4, [sp, #4]
   20be4:	cmp	r0, #0
   20be8:	beq	20c14 <flatcc_builder_create_table@@Base+0xfc>
   20bec:	add	r4, r4, r0
   20bf0:	add	r1, sp, #4
   20bf4:	str	r4, [sp, #4]
   20bf8:	add	r1, r1, r3, lsl #3
   20bfc:	add	r3, r3, #1
   20c00:	ldr	r2, [pc, #208]	; 20cd8 <flatcc_builder_create_table@@Base+0x1c0>
   20c04:	ldr	r2, [pc, r2]
   20c08:	str	r2, [r1, #8]
   20c0c:	str	r0, [r1, #12]
   20c10:	str	r3, [sp, #8]
   20c14:	cmp	r4, #0
   20c18:	ble	20cb8 <flatcc_builder_create_table@@Base+0x1a0>
   20c1c:	ldr	r0, [r8, #136]	; 0x88
   20c20:	ldr	r7, [r8, #44]	; 0x2c
   20c24:	add	r1, sp, #4
   20c28:	mov	r2, r3
   20c2c:	add	r1, r1, #8
   20c30:	sub	r5, r0, r4
   20c34:	ldr	r0, [r8, #36]	; 0x24
   20c38:	str	r4, [sp]
   20c3c:	mov	r3, r5
   20c40:	blx	r7
   20c44:	cmp	r0, #0
   20c48:	streq	r5, [r8, #136]	; 0x88
   20c4c:	moveq	r0, r5
   20c50:	subeq	sp, fp, #24
   20c54:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   20c58:	ldr	r0, [pc, #160]	; 20d00 <flatcc_builder_create_table@@Base+0x1e8>
   20c5c:	ldr	r1, [pc, #160]	; 20d04 <flatcc_builder_create_table@@Base+0x1ec>
   20c60:	ldr	r3, [pc, #160]	; 20d08 <flatcc_builder_create_table@@Base+0x1f0>
   20c64:	movw	r2, #651	; 0x28b
   20c68:	add	r0, pc, r0
   20c6c:	add	r1, pc, r1
   20c70:	add	r3, pc, r3
   20c74:	bl	12f04 <__assert_fail@plt>
   20c78:	ldr	r0, [pc, #92]	; 20cdc <flatcc_builder_create_table@@Base+0x1c4>
   20c7c:	ldr	r1, [pc, #92]	; 20ce0 <flatcc_builder_create_table@@Base+0x1c8>
   20c80:	ldr	r3, [pc, #92]	; 20ce4 <flatcc_builder_create_table@@Base+0x1cc>
   20c84:	movw	r2, #1237	; 0x4d5
   20c88:	add	r0, pc, r0
   20c8c:	add	r1, pc, r1
   20c90:	add	r3, pc, r3
   20c94:	bl	12f04 <__assert_fail@plt>
   20c98:	ldr	r0, [pc, #72]	; 20ce8 <flatcc_builder_create_table@@Base+0x1d0>
   20c9c:	ldr	r1, [pc, #72]	; 20cec <flatcc_builder_create_table@@Base+0x1d4>
   20ca0:	ldr	r3, [pc, #72]	; 20cf0 <flatcc_builder_create_table@@Base+0x1d8>
   20ca4:	movw	r2, #1243	; 0x4db
   20ca8:	add	r0, pc, r0
   20cac:	add	r1, pc, r1
   20cb0:	add	r3, pc, r3
   20cb4:	bl	12f04 <__assert_fail@plt>
   20cb8:	ldr	r0, [pc, #52]	; 20cf4 <flatcc_builder_create_table@@Base+0x1dc>
   20cbc:	ldr	r1, [pc, #52]	; 20cf8 <flatcc_builder_create_table@@Base+0x1e0>
   20cc0:	ldr	r3, [pc, #52]	; 20cfc <flatcc_builder_create_table@@Base+0x1e4>
   20cc4:	movw	r2, #647	; 0x287
   20cc8:	add	r0, pc, r0
   20ccc:	add	r1, pc, r1
   20cd0:	add	r3, pc, r3
   20cd4:	bl	12f04 <__assert_fail@plt>
   20cd8:	andeq	r9, r1, r8, asr r4
   20cdc:	andeq	r7, r0, r1, lsl #24
   20ce0:	andeq	r7, r0, sl, lsl #9
   20ce4:	andeq	r7, r0, fp, lsl #24
   20ce8:	andeq	r7, r0, pc, lsl #25
   20cec:	andeq	r7, r0, sl, ror #8
   20cf0:	andeq	r7, r0, fp, ror #23
   20cf4:	andeq	r8, r0, fp, lsl #12
   20cf8:	andeq	r7, r0, sl, asr #8
   20cfc:	andeq	r8, r0, r2, asr #9
   20d00:	andeq	r8, r0, fp, ror #12
   20d04:	andeq	r7, r0, sl, lsr #9
   20d08:	andeq	r8, r0, r2, lsr #10

00020d0c <flatcc_builder_check_required_field@@Base>:
   20d0c:	push	{fp, lr}
   20d10:	mov	fp, sp
   20d14:	ldr	r2, [r0, #32]
   20d18:	ldrh	r2, [r2, #14]
   20d1c:	cmp	r2, #3
   20d20:	bne	20d50 <flatcc_builder_check_required_field@@Base+0x44>
   20d24:	ldrh	r3, [r0, #8]
   20d28:	mov	r2, #0
   20d2c:	cmp	r3, r1
   20d30:	bls	20d48 <flatcc_builder_check_required_field@@Base+0x3c>
   20d34:	ldr	r0, [r0, #4]
   20d38:	add	r0, r0, r1, lsl #1
   20d3c:	ldrh	r2, [r0]
   20d40:	cmp	r2, #0
   20d44:	movwne	r2, #1
   20d48:	mov	r0, r2
   20d4c:	pop	{fp, pc}
   20d50:	ldr	r0, [pc, #24]	; 20d70 <flatcc_builder_check_required_field@@Base+0x64>
   20d54:	ldr	r1, [pc, #24]	; 20d74 <flatcc_builder_check_required_field@@Base+0x68>
   20d58:	ldr	r3, [pc, #24]	; 20d78 <flatcc_builder_check_required_field@@Base+0x6c>
   20d5c:	movw	r2, #1272	; 0x4f8
   20d60:	add	r0, pc, r0
   20d64:	add	r1, pc, r1
   20d68:	add	r3, pc, r3
   20d6c:	bl	12f04 <__assert_fail@plt>
   20d70:	andeq	r7, r0, r2, ror #23
   20d74:			; <UNDEFINED> instruction: 0x000073b2
   20d78:	andeq	r7, r0, r5, lsl #24

00020d7c <flatcc_builder_check_union_field@@Base>:
   20d7c:	push	{fp, lr}
   20d80:	mov	fp, sp
   20d84:	mov	r2, r0
   20d88:	ldr	r0, [r0, #32]
   20d8c:	ldrh	r0, [r0, #14]
   20d90:	cmp	r0, #3
   20d94:	bne	20df4 <flatcc_builder_check_union_field@@Base+0x78>
   20d98:	mov	r0, #0
   20d9c:	cmp	r1, #0
   20da0:	beq	20de0 <flatcc_builder_check_union_field@@Base+0x64>
   20da4:	ldrh	r3, [r2, #8]
   20da8:	cmp	r3, r1
   20dac:	popls	{fp, pc}
   20db0:	ldr	r0, [r2, #4]
   20db4:	add	r0, r0, r1, lsl #1
   20db8:	ldrh	r1, [r0, #-2]
   20dbc:	cmp	r1, #0
   20dc0:	beq	20de4 <flatcc_builder_check_union_field@@Base+0x68>
   20dc4:	ldr	r2, [r2, #16]
   20dc8:	ldrh	r0, [r0]
   20dcc:	ldrb	r1, [r2, r1]
   20dd0:	cmp	r1, #0
   20dd4:	beq	20de8 <flatcc_builder_check_union_field@@Base+0x6c>
   20dd8:	cmp	r0, #0
   20ddc:	movwne	r0, #1
   20de0:	pop	{fp, pc}
   20de4:	ldrh	r0, [r0]
   20de8:	clz	r0, r0
   20dec:	lsr	r0, r0, #5
   20df0:	pop	{fp, pc}
   20df4:	ldr	r0, [pc, #24]	; 20e14 <flatcc_builder_check_union_field@@Base+0x98>
   20df8:	ldr	r1, [pc, #24]	; 20e18 <flatcc_builder_check_union_field@@Base+0x9c>
   20dfc:	ldr	r3, [pc, #24]	; 20e1c <flatcc_builder_check_union_field@@Base+0xa0>
   20e00:	movw	r2, #1279	; 0x4ff
   20e04:	add	r0, pc, r0
   20e08:	add	r1, pc, r1
   20e0c:	add	r3, pc, r3
   20e10:	bl	12f04 <__assert_fail@plt>
   20e14:	andeq	r7, r0, lr, lsr fp
   20e18:	andeq	r7, r0, lr, lsl #6
   20e1c:			; <UNDEFINED> instruction: 0x00007bb4

00020e20 <flatcc_builder_check_required@@Base>:
   20e20:	push	{fp, lr}
   20e24:	mov	fp, sp
   20e28:	mov	r3, r0
   20e2c:	ldr	r0, [r0, #32]
   20e30:	ldrh	r0, [r0, #14]
   20e34:	cmp	r0, #3
   20e38:	bne	20e80 <flatcc_builder_check_required@@Base+0x60>
   20e3c:	ldrh	ip, [r3, #8]
   20e40:	mov	r0, #0
   20e44:	cmp	ip, r2
   20e48:	poplt	{fp, pc}
   20e4c:	cmp	r2, #1
   20e50:	blt	20e78 <flatcc_builder_check_required@@Base+0x58>
   20e54:	ldr	ip, [r3, #4]
   20e58:	ldrh	r3, [r1]
   20e5c:	add	r3, ip, r3, lsl #1
   20e60:	ldrh	r3, [r3]
   20e64:	cmp	r3, #0
   20e68:	beq	20e7c <flatcc_builder_check_required@@Base+0x5c>
   20e6c:	add	r1, r1, #2
   20e70:	subs	r2, r2, #1
   20e74:	bne	20e58 <flatcc_builder_check_required@@Base+0x38>
   20e78:	mov	r0, #1
   20e7c:	pop	{fp, pc}
   20e80:	ldr	r0, [pc, #24]	; 20ea0 <flatcc_builder_check_required@@Base+0x80>
   20e84:	ldr	r1, [pc, #24]	; 20ea4 <flatcc_builder_check_required@@Base+0x84>
   20e88:	ldr	r3, [pc, #24]	; 20ea8 <flatcc_builder_check_required@@Base+0x88>
   20e8c:	movw	r2, #1297	; 0x511
   20e90:	add	r0, pc, r0
   20e94:	add	r1, pc, r1
   20e98:	add	r3, pc, r3
   20e9c:	bl	12f04 <__assert_fail@plt>
   20ea0:			; <UNDEFINED> instruction: 0x00007ab2
   20ea4:	andeq	r7, r0, r2, lsl #5
   20ea8:	andeq	r7, r0, r8, ror fp

00020eac <flatcc_builder_end_table@@Base>:
   20eac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20eb0:	add	fp, sp, #24
   20eb4:	sub	sp, sp, #16
   20eb8:	mov	r4, r0
   20ebc:	ldr	r0, [r0, #32]
   20ec0:	ldrh	r0, [r0, #14]
   20ec4:	cmp	r0, #3
   20ec8:	bne	21044 <flatcc_builder_end_table@@Base+0x198>
   20ecc:	ldrh	r0, [r4, #8]
   20ed0:	ldr	r5, [r4, #4]
   20ed4:	mov	r1, #4
   20ed8:	movw	r2, #31153	; 0x79b1
   20edc:	movt	r2, #40503	; 0x9e37
   20ee0:	add	r0, r1, r0, lsl #1
   20ee4:	strh	r0, [r5, #-4]!
   20ee8:	ldrh	r1, [r4, #20]
   20eec:	uxth	r6, r0
   20ef0:	add	r1, r1, #4
   20ef4:	strh	r1, [r5, #2]
   20ef8:	uxth	r1, r1
   20efc:	ldr	r0, [r4, #12]
   20f00:	eor	r0, r0, r6
   20f04:	mul	r0, r0, r2
   20f08:	eor	r0, r0, r1
   20f0c:	mov	r1, r5
   20f10:	mul	r3, r0, r2
   20f14:	mov	r0, r4
   20f18:	mov	r2, r6
   20f1c:	str	r3, [r4, #12]
   20f20:	bl	2079c <flatcc_builder_create_cached_vtable@@Base>
   20f24:	cmp	r0, #0
   20f28:	beq	21034 <flatcc_builder_end_table@@Base+0x188>
   20f2c:	mov	r7, r0
   20f30:	mov	r0, r5
   20f34:	mov	r1, #0
   20f38:	mov	r2, r6
   20f3c:	mov	r8, #0
   20f40:	bl	12ebc <memset@plt>
   20f44:	ldr	r5, [r4, #32]
   20f48:	ldr	r0, [r4, #76]	; 0x4c
   20f4c:	ldr	r6, [r4]
   20f50:	ldrh	r3, [r4, #130]	; 0x82
   20f54:	ldr	r1, [r4, #16]
   20f58:	ldr	r2, [r4, #20]
   20f5c:	ldr	r5, [r5, #20]
   20f60:	add	r0, r0, r5
   20f64:	sub	r6, r6, r0
   20f68:	asr	r6, r6, #1
   20f6c:	stm	sp, {r0, r6, r7}
   20f70:	mov	r0, r4
   20f74:	bl	20b18 <flatcc_builder_create_table@@Base>
   20f78:	cmp	r0, #0
   20f7c:	beq	21038 <flatcc_builder_end_table@@Base+0x18c>
   20f80:	ldr	r1, [r4, #32]
   20f84:	mov	r5, r0
   20f88:	ldr	r0, [r4, #16]
   20f8c:	ldr	r2, [r4, #20]
   20f90:	ldr	r3, [r4, #52]	; 0x34
   20f94:	ldr	r7, [r1, #24]
   20f98:	str	r7, [r4, #12]
   20f9c:	ldrh	r7, [r1, #28]
   20fa0:	strh	r7, [r4, #8]
   20fa4:	ldr	r7, [r1, #16]
   20fa8:	add	r3, r3, r7
   20fac:	str	r3, [r4, #4]
   20fb0:	ldr	r3, [r4, #76]	; 0x4c
   20fb4:	ldr	r1, [r1, #20]
   20fb8:	add	r1, r3, r1
   20fbc:	str	r1, [r4]
   20fc0:	mov	r1, #0
   20fc4:	bl	12ebc <memset@plt>
   20fc8:	ldr	r0, [r4, #32]
   20fcc:	ldr	r1, [r4, #60]	; 0x3c
   20fd0:	ldr	r2, [r4, #64]	; 0x40
   20fd4:	mov	r8, r5
   20fd8:	ldr	r3, [r0, #8]
   20fdc:	str	r3, [r4, #20]
   20fe0:	ldr	r3, [r0]
   20fe4:	str	r3, [r4, #28]
   20fe8:	add	r1, r1, r3
   20fec:	ldr	r7, [r0, #4]
   20ff0:	str	r1, [r4, #16]
   20ff4:	sub	r1, r2, r3
   20ff8:	cmp	r1, r7
   20ffc:	movhi	r1, r7
   21000:	str	r1, [r4, #24]
   21004:	ldrh	r1, [r4, #130]	; 0x82
   21008:	ldrh	r2, [r4, #128]	; 0x80
   2100c:	cmp	r2, r1
   21010:	strhcc	r1, [r4, #128]	; 0x80
   21014:	ldrh	r1, [r0, #12]
   21018:	sub	r0, r0, #36	; 0x24
   2101c:	str	r0, [r4, #32]
   21020:	strh	r1, [r4, #130]	; 0x82
   21024:	ldr	r0, [r4, #156]	; 0x9c
   21028:	sub	r0, r0, #1
   2102c:	str	r0, [r4, #156]	; 0x9c
   21030:	b	21038 <flatcc_builder_end_table@@Base+0x18c>
   21034:	mov	r8, #0
   21038:	mov	r0, r8
   2103c:	sub	sp, fp, #24
   21040:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21044:	ldr	r0, [pc, #24]	; 21064 <flatcc_builder_end_table@@Base+0x1b8>
   21048:	ldr	r1, [pc, #24]	; 21068 <flatcc_builder_end_table@@Base+0x1bc>
   2104c:	ldr	r3, [pc, #24]	; 2106c <flatcc_builder_end_table@@Base+0x1c0>
   21050:	movw	r2, #1317	; 0x525
   21054:	add	r0, pc, r0
   21058:	add	r1, pc, r1
   2105c:	add	r3, pc, r3
   21060:	bl	12f04 <__assert_fail@plt>
   21064:	andeq	r7, r0, lr, ror #17
   21068:	strheq	r7, [r0], -lr
   2106c:	andeq	r7, r0, lr, lsl #20

00021070 <flatcc_builder_create_vector@@Base>:
   21070:	push	{r4, r5, r6, r7, fp, lr}
   21074:	add	fp, sp, #16
   21078:	sub	sp, sp, #80	; 0x50
   2107c:	mov	r7, r0
   21080:	ldr	r0, [fp, #12]
   21084:	cmp	r2, r0
   21088:	bhi	21184 <flatcc_builder_create_vector@@Base+0x114>
   2108c:	ldr	r0, [fp, #8]
   21090:	mov	r4, r2
   21094:	ldrh	r2, [r7, #128]	; 0x80
   21098:	mov	r5, #4
   2109c:	cmp	r0, #4
   210a0:	movls	r0, r5
   210a4:	cmp	r2, r0
   210a8:	sub	r2, fp, #20
   210ac:	strhcc	r0, [r7, #128]	; 0x80
   210b0:	str	r4, [fp, #-20]	; 0xffffffec
   210b4:	sub	r0, r0, #1
   210b8:	ldr	ip, [r7, #136]	; 0x88
   210bc:	str	r5, [sp, #16]
   210c0:	str	r2, [sp, #12]
   210c4:	mov	r2, #1
   210c8:	str	r5, [sp, #4]
   210cc:	str	r2, [sp, #8]
   210d0:	mls	r6, r3, r4, ip
   210d4:	mul	r3, r3, r4
   210d8:	cmp	r3, #0
   210dc:	and	r0, r6, r0
   210e0:	movne	r2, #2
   210e4:	addne	r5, r3, #4
   210e8:	strne	r3, [sp, #24]
   210ec:	strne	r1, [sp, #20]
   210f0:	strne	r2, [sp, #8]
   210f4:	strne	r5, [sp, #4]
   210f8:	cmp	r0, #0
   210fc:	beq	21128 <flatcc_builder_create_vector@@Base+0xb8>
   21100:	add	r5, r5, r0
   21104:	add	r1, sp, #4
   21108:	str	r5, [sp, #4]
   2110c:	add	r1, r1, r2, lsl #3
   21110:	add	r2, r2, #1
   21114:	ldr	r3, [pc, #168]	; 211c4 <flatcc_builder_create_vector@@Base+0x154>
   21118:	ldr	r3, [pc, r3]
   2111c:	str	r3, [r1, #8]
   21120:	str	r0, [r1, #12]
   21124:	str	r2, [sp, #8]
   21128:	cmp	r5, #0
   2112c:	ble	211a4 <flatcc_builder_create_vector@@Base+0x134>
   21130:	ldr	r0, [r7, #36]	; 0x24
   21134:	ldr	r6, [r7, #44]	; 0x2c
   21138:	add	r1, sp, #4
   2113c:	sub	r4, ip, r5
   21140:	str	r5, [sp]
   21144:	add	r1, r1, #8
   21148:	mov	r3, r4
   2114c:	blx	r6
   21150:	cmp	r0, #0
   21154:	streq	r4, [r7, #136]	; 0x88
   21158:	moveq	r0, r4
   2115c:	subeq	sp, fp, #16
   21160:	popeq	{r4, r5, r6, r7, fp, pc}
   21164:	ldr	r0, [pc, #116]	; 211e0 <flatcc_builder_create_vector@@Base+0x170>
   21168:	ldr	r1, [pc, #116]	; 211e4 <flatcc_builder_create_vector@@Base+0x174>
   2116c:	ldr	r3, [pc, #116]	; 211e8 <flatcc_builder_create_vector@@Base+0x178>
   21170:	movw	r2, #651	; 0x28b
   21174:	add	r0, pc, r0
   21178:	add	r1, pc, r1
   2117c:	add	r3, pc, r3
   21180:	bl	12f04 <__assert_fail@plt>
   21184:	ldr	r0, [pc, #60]	; 211c8 <flatcc_builder_create_vector@@Base+0x158>
   21188:	ldr	r1, [pc, #60]	; 211cc <flatcc_builder_create_vector@@Base+0x15c>
   2118c:	ldr	r3, [pc, #60]	; 211d0 <flatcc_builder_create_vector@@Base+0x160>
   21190:	movw	r2, #1365	; 0x555
   21194:	add	r0, pc, r0
   21198:	add	r1, pc, r1
   2119c:	add	r3, pc, r3
   211a0:	bl	12f04 <__assert_fail@plt>
   211a4:	ldr	r0, [pc, #40]	; 211d4 <flatcc_builder_create_vector@@Base+0x164>
   211a8:	ldr	r1, [pc, #40]	; 211d8 <flatcc_builder_create_vector@@Base+0x168>
   211ac:	ldr	r3, [pc, #40]	; 211dc <flatcc_builder_create_vector@@Base+0x16c>
   211b0:	movw	r2, #647	; 0x287
   211b4:	add	r0, pc, r0
   211b8:	add	r1, pc, r1
   211bc:	add	r3, pc, r3
   211c0:	bl	12f04 <__assert_fail@plt>
   211c4:	andeq	r8, r1, r4, asr #30
   211c8:	andeq	r7, r0, r8, lsl r9
   211cc:	andeq	r6, r0, lr, ror pc
   211d0:	andeq	r7, r0, r3, lsr #18
   211d4:	andeq	r8, r0, pc, lsl r1
   211d8:	andeq	r6, r0, lr, asr pc
   211dc:	ldrdeq	r7, [r0], -r6
   211e0:	andeq	r8, r0, pc, asr r1
   211e4:	muleq	r0, lr, pc	; <UNPREDICTABLE>
   211e8:	andeq	r8, r0, r6, lsl r0

000211ec <flatcc_builder_end_vector@@Base>:
   211ec:	push	{r4, r5, fp, lr}
   211f0:	add	fp, sp, #8
   211f4:	sub	sp, sp, #8
   211f8:	mov	r4, r0
   211fc:	ldr	r0, [r0, #32]
   21200:	ldrh	r1, [r0, #14]
   21204:	cmp	r1, #4
   21208:	bne	212bc <flatcc_builder_end_vector@@Base+0xd0>
   2120c:	ldr	r3, [r0, #16]
   21210:	ldr	r2, [r0, #20]
   21214:	ldr	r0, [r0, #24]
   21218:	ldr	r1, [r4, #16]
   2121c:	ldrh	r5, [r4, #130]	; 0x82
   21220:	str	r0, [sp, #4]
   21224:	mov	r0, r4
   21228:	str	r5, [sp]
   2122c:	bl	21070 <flatcc_builder_create_vector@@Base>
   21230:	mov	r5, r0
   21234:	cmp	r0, #0
   21238:	beq	212b0 <flatcc_builder_end_vector@@Base+0xc4>
   2123c:	ldr	r0, [r4, #16]
   21240:	ldr	r2, [r4, #20]
   21244:	mov	r1, #0
   21248:	bl	12ebc <memset@plt>
   2124c:	ldr	r0, [r4, #32]
   21250:	ldr	r1, [r4, #60]	; 0x3c
   21254:	ldr	ip, [r4, #64]	; 0x40
   21258:	ldr	r3, [r0, #8]
   2125c:	str	r3, [r4, #20]
   21260:	ldr	r3, [r0]
   21264:	str	r3, [r4, #28]
   21268:	add	r1, r1, r3
   2126c:	ldr	r2, [r0, #4]
   21270:	str	r1, [r4, #16]
   21274:	sub	r1, ip, r3
   21278:	cmp	r1, r2
   2127c:	movhi	r1, r2
   21280:	str	r1, [r4, #24]
   21284:	ldrh	r1, [r4, #130]	; 0x82
   21288:	ldrh	r2, [r4, #128]	; 0x80
   2128c:	cmp	r2, r1
   21290:	strhcc	r1, [r4, #128]	; 0x80
   21294:	ldrh	r1, [r0, #12]
   21298:	sub	r0, r0, #36	; 0x24
   2129c:	str	r0, [r4, #32]
   212a0:	strh	r1, [r4, #130]	; 0x82
   212a4:	ldr	r0, [r4, #156]	; 0x9c
   212a8:	sub	r0, r0, #1
   212ac:	str	r0, [r4, #156]	; 0x9c
   212b0:	mov	r0, r5
   212b4:	sub	sp, fp, #8
   212b8:	pop	{r4, r5, fp, pc}
   212bc:	ldr	r0, [pc, #24]	; 212dc <flatcc_builder_end_vector@@Base+0xf0>
   212c0:	ldr	r1, [pc, #24]	; 212e0 <flatcc_builder_end_vector@@Base+0xf4>
   212c4:	ldr	r3, [pc, #24]	; 212e4 <flatcc_builder_end_vector@@Base+0xf8>
   212c8:	movw	r2, #1400	; 0x578
   212cc:	add	r0, pc, r0
   212d0:	add	r1, pc, r1
   212d4:	add	r3, pc, r3
   212d8:	bl	12f04 <__assert_fail@plt>
   212dc:	andeq	r7, r0, r4, lsl #3
   212e0:	andeq	r6, r0, r6, asr #28
   212e4:	andeq	r7, r0, r1, ror #16

000212e8 <flatcc_builder_vector_count@@Base>:
   212e8:	ldr	r0, [r0, #32]
   212ec:	ldr	r0, [r0, #20]
   212f0:	bx	lr

000212f4 <flatcc_builder_vector_edit@@Base>:
   212f4:	ldr	r0, [r0, #16]
   212f8:	bx	lr

000212fc <flatcc_builder_create_offset_vector_direct@@Base>:
   212fc:	mov	r3, #0
   21300:	b	21304 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   21304:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21308:	add	fp, sp, #24
   2130c:	sub	sp, sp, #80	; 0x50
   21310:	mov	r6, #0
   21314:	cmn	r2, #-1073741823	; 0xc0000001
   21318:	bhi	21478 <flatcc_builder_create_offset_vector_direct@@Base+0x17c>
   2131c:	mov	r8, r0
   21320:	ldrh	r0, [r0, #128]	; 0x80
   21324:	mov	r5, #4
   21328:	sub	r7, fp, #28
   2132c:	mov	r4, #1
   21330:	cmp	r0, #3
   21334:	movls	r0, #4
   21338:	strhls	r0, [r8, #128]	; 0x80
   2133c:	str	r2, [fp, #-28]	; 0xffffffe4
   21340:	ldr	ip, [r8, #136]	; 0x88
   21344:	str	r5, [sp, #16]
   21348:	str	r7, [sp, #12]
   2134c:	mov	r7, #0
   21350:	str	r5, [sp, #4]
   21354:	str	r4, [sp, #8]
   21358:	cmp	r7, r2, lsl #2
   2135c:	and	r6, ip, #3
   21360:	beq	21380 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   21364:	lsl	r7, r2, #2
   21368:	mov	r4, #2
   2136c:	add	r5, r7, #4
   21370:	str	r7, [sp, #24]
   21374:	str	r1, [sp, #20]
   21378:	str	r4, [sp, #8]
   2137c:	str	r5, [sp, #4]
   21380:	cmp	r6, #0
   21384:	beq	213b0 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   21388:	add	r5, r5, r6
   2138c:	add	r7, sp, #4
   21390:	str	r5, [sp, #4]
   21394:	add	r7, r7, r4, lsl #3
   21398:	add	r4, r4, #1
   2139c:	ldr	r0, [pc, #352]	; 21504 <flatcc_builder_create_offset_vector_direct@@Base+0x208>
   213a0:	ldr	r0, [pc, r0]
   213a4:	str	r0, [r7, #8]
   213a8:	str	r6, [r7, #12]
   213ac:	str	r4, [sp, #8]
   213b0:	cmp	r2, #0
   213b4:	beq	21440 <flatcc_builder_create_offset_vector_direct@@Base+0x144>
   213b8:	sub	r0, r5, ip
   213bc:	mov	r6, r3
   213c0:	sub	r0, r0, #4
   213c4:	b	213dc <flatcc_builder_create_offset_vector_direct@@Base+0xe0>
   213c8:	sub	r0, r0, #4
   213cc:	add	r1, r1, #4
   213d0:	add	r6, r6, #1
   213d4:	subs	r2, r2, #1
   213d8:	beq	2143c <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   213dc:	ldr	r7, [r1]
   213e0:	cmp	r7, #0
   213e4:	beq	21408 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   213e8:	add	r7, r0, r7
   213ec:	cmp	r3, #0
   213f0:	str	r7, [r1]
   213f4:	beq	213c8 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   213f8:	ldrb	r7, [r6]
   213fc:	cmp	r7, #0
   21400:	bne	213c8 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   21404:	b	21484 <flatcc_builder_create_offset_vector_direct@@Base+0x188>
   21408:	cmp	r3, #0
   2140c:	beq	214a4 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   21410:	ldrb	r7, [r6]
   21414:	cmp	r7, #0
   21418:	beq	213c8 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   2141c:	ldr	r0, [pc, #240]	; 21514 <flatcc_builder_create_offset_vector_direct@@Base+0x218>
   21420:	ldr	r1, [pc, #240]	; 21518 <flatcc_builder_create_offset_vector_direct@@Base+0x21c>
   21424:	ldr	r3, [pc, #240]	; 2151c <flatcc_builder_create_offset_vector_direct@@Base+0x220>
   21428:	movw	r2, #1461	; 0x5b5
   2142c:	add	r0, pc, r0
   21430:	add	r1, pc, r1
   21434:	add	r3, pc, r3
   21438:	bl	12f04 <__assert_fail@plt>
   2143c:	ldr	ip, [r8, #136]	; 0x88
   21440:	cmp	r5, #0
   21444:	ble	214c4 <flatcc_builder_create_offset_vector_direct@@Base+0x1c8>
   21448:	ldr	r0, [r8, #36]	; 0x24
   2144c:	ldr	r7, [r8, #44]	; 0x2c
   21450:	add	r1, sp, #4
   21454:	sub	r6, ip, r5
   21458:	mov	r2, r4
   2145c:	str	r5, [sp]
   21460:	add	r1, r1, #8
   21464:	mov	r3, r6
   21468:	blx	r7
   2146c:	cmp	r0, #0
   21470:	bne	214e4 <flatcc_builder_create_offset_vector_direct@@Base+0x1e8>
   21474:	str	r6, [r8, #136]	; 0x88
   21478:	mov	r0, r6
   2147c:	sub	sp, fp, #24
   21480:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21484:	ldr	r0, [pc, #124]	; 21508 <flatcc_builder_create_offset_vector_direct@@Base+0x20c>
   21488:	ldr	r1, [pc, #124]	; 2150c <flatcc_builder_create_offset_vector_direct@@Base+0x210>
   2148c:	ldr	r3, [pc, #124]	; 21510 <flatcc_builder_create_offset_vector_direct@@Base+0x214>
   21490:	movw	r2, #1457	; 0x5b1
   21494:	add	r0, pc, r0
   21498:	add	r1, pc, r1
   2149c:	add	r3, pc, r3
   214a0:	bl	12f04 <__assert_fail@plt>
   214a4:	ldr	r0, [pc, #116]	; 21520 <flatcc_builder_create_offset_vector_direct@@Base+0x224>
   214a8:	ldr	r1, [pc, #116]	; 21524 <flatcc_builder_create_offset_vector_direct@@Base+0x228>
   214ac:	ldr	r3, [pc, #116]	; 21528 <flatcc_builder_create_offset_vector_direct@@Base+0x22c>
   214b0:	movw	r2, #1463	; 0x5b7
   214b4:	add	r0, pc, r0
   214b8:	add	r1, pc, r1
   214bc:	add	r3, pc, r3
   214c0:	bl	12f04 <__assert_fail@plt>
   214c4:	ldr	r0, [pc, #96]	; 2152c <flatcc_builder_create_offset_vector_direct@@Base+0x230>
   214c8:	ldr	r1, [pc, #96]	; 21530 <flatcc_builder_create_offset_vector_direct@@Base+0x234>
   214cc:	ldr	r3, [pc, #96]	; 21534 <flatcc_builder_create_offset_vector_direct@@Base+0x238>
   214d0:	movw	r2, #647	; 0x287
   214d4:	add	r0, pc, r0
   214d8:	add	r1, pc, r1
   214dc:	add	r3, pc, r3
   214e0:	bl	12f04 <__assert_fail@plt>
   214e4:	ldr	r0, [pc, #76]	; 21538 <flatcc_builder_create_offset_vector_direct@@Base+0x23c>
   214e8:	ldr	r1, [pc, #76]	; 2153c <flatcc_builder_create_offset_vector_direct@@Base+0x240>
   214ec:	ldr	r3, [pc, #76]	; 21540 <flatcc_builder_create_offset_vector_direct@@Base+0x244>
   214f0:	movw	r2, #651	; 0x28b
   214f4:	add	r0, pc, r0
   214f8:	add	r1, pc, r1
   214fc:	add	r3, pc, r3
   21500:	bl	12f04 <__assert_fail@plt>
   21504:			; <UNDEFINED> instruction: 0x00018cbc
   21508:	andeq	r7, r0, r3, lsr lr
   2150c:	andeq	r6, r0, lr, ror ip
   21510:	andeq	r7, r0, r9, lsr lr
   21514:	andeq	r7, r0, ip, lsr #30
   21518:	andeq	r6, r0, r6, ror #25
   2151c:	andeq	r7, r0, r1, lsr #29
   21520:	andeq	r7, r0, pc, lsl lr
   21524:	andeq	r6, r0, lr, asr ip
   21528:	andeq	r7, r0, r9, lsl lr
   2152c:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   21530:	andeq	r6, r0, lr, lsr ip
   21534:			; <UNDEFINED> instruction: 0x00007cb6
   21538:	ldrdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   2153c:	andeq	r6, r0, lr, lsl ip
   21540:	muleq	r0, r6, ip

00021544 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   21544:	push	{r4, r5, fp, lr}
   21548:	add	fp, sp, #8
   2154c:	mov	r4, r0
   21550:	ldr	r0, [r0, #32]
   21554:	mov	r3, r1
   21558:	ldrh	r1, [r0, #14]
   2155c:	cmp	r1, #5
   21560:	bne	215fc <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   21564:	ldr	r2, [r0, #20]
   21568:	ldr	r1, [r4, #16]
   2156c:	mov	r0, r4
   21570:	bl	21304 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   21574:	mov	r5, r0
   21578:	cmp	r0, #0
   2157c:	beq	215f4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   21580:	ldr	r0, [r4, #16]
   21584:	ldr	r2, [r4, #20]
   21588:	mov	r1, #0
   2158c:	bl	12ebc <memset@plt>
   21590:	ldr	r0, [r4, #32]
   21594:	ldr	r1, [r4, #60]	; 0x3c
   21598:	ldr	ip, [r4, #64]	; 0x40
   2159c:	ldr	r3, [r0, #8]
   215a0:	str	r3, [r4, #20]
   215a4:	ldr	r3, [r0]
   215a8:	str	r3, [r4, #28]
   215ac:	add	r1, r1, r3
   215b0:	ldr	r2, [r0, #4]
   215b4:	str	r1, [r4, #16]
   215b8:	sub	r1, ip, r3
   215bc:	cmp	r1, r2
   215c0:	movhi	r1, r2
   215c4:	str	r1, [r4, #24]
   215c8:	ldrh	r1, [r4, #130]	; 0x82
   215cc:	ldrh	r2, [r4, #128]	; 0x80
   215d0:	cmp	r2, r1
   215d4:	strhcc	r1, [r4, #128]	; 0x80
   215d8:	ldrh	r1, [r0, #12]
   215dc:	sub	r0, r0, #36	; 0x24
   215e0:	str	r0, [r4, #32]
   215e4:	strh	r1, [r4, #130]	; 0x82
   215e8:	ldr	r0, [r4, #156]	; 0x9c
   215ec:	sub	r0, r0, #1
   215f0:	str	r0, [r4, #156]	; 0x9c
   215f4:	mov	r0, r5
   215f8:	pop	{r4, r5, fp, pc}
   215fc:	ldr	r0, [pc, #24]	; 2161c <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   21600:	ldr	r1, [pc, #24]	; 21620 <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   21604:	ldr	r3, [pc, #24]	; 21624 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe0>
   21608:	movw	r2, #1493	; 0x5d5
   2160c:	add	r0, pc, r0
   21610:	add	r1, pc, r1
   21614:	add	r3, pc, r3
   21618:	bl	12f04 <__assert_fail@plt>
   2161c:	andeq	r6, r0, sp, lsr pc
   21620:	andeq	r6, r0, r6, lsl #22
   21624:	andeq	r7, r0, lr, lsr #11

00021628 <flatcc_builder_offset_vector_edit@@Base>:
   21628:	ldr	r0, [r0, #16]
   2162c:	bx	lr

00021630 <flatcc_builder_offset_vector_count@@Base>:
   21630:	ldr	r0, [r0, #32]
   21634:	ldr	r0, [r0, #20]
   21638:	bx	lr

0002163c <flatcc_builder_table_add_union@@Base>:
   2163c:	push	{r4, r5, r6, r7, fp, lr}
   21640:	add	fp, sp, #16
   21644:	mov	r5, r0
   21648:	ldr	r0, [r0, #32]
   2164c:	ldrh	r0, [r0, #14]
   21650:	cmp	r0, #3
   21654:	bne	216dc <flatcc_builder_table_add_union@@Base+0xa0>
   21658:	mov	r7, r3
   2165c:	mov	r4, r2
   21660:	mov	r6, r1
   21664:	cmp	r3, #0
   21668:	beq	21678 <flatcc_builder_table_add_union@@Base+0x3c>
   2166c:	uxtb	r0, r4
   21670:	cmp	r0, #0
   21674:	beq	216fc <flatcc_builder_table_add_union@@Base+0xc0>
   21678:	cmp	r7, #0
   2167c:	beq	21698 <flatcc_builder_table_add_union@@Base+0x5c>
   21680:	mov	r0, r5
   21684:	mov	r1, r6
   21688:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   2168c:	cmp	r0, #0
   21690:	beq	2171c <flatcc_builder_table_add_union@@Base+0xe0>
   21694:	str	r7, [r0]
   21698:	sub	r1, r6, #1
   2169c:	mov	r0, r5
   216a0:	mov	r2, #1
   216a4:	mov	r3, #1
   216a8:	bl	21920 <flatcc_builder_table_add@@Base>
   216ac:	cmp	r0, #0
   216b0:	strbne	r4, [r0]
   216b4:	movne	r0, #0
   216b8:	popne	{r4, r5, r6, r7, fp, pc}
   216bc:	ldr	r0, [pc, #156]	; 21760 <flatcc_builder_table_add_union@@Base+0x124>
   216c0:	ldr	r1, [pc, #156]	; 21764 <flatcc_builder_table_add_union@@Base+0x128>
   216c4:	ldr	r3, [pc, #156]	; 21768 <flatcc_builder_table_add_union@@Base+0x12c>
   216c8:	movw	r2, #1526	; 0x5f6
   216cc:	add	r0, pc, r0
   216d0:	add	r1, pc, r1
   216d4:	add	r3, pc, r3
   216d8:	bl	12f04 <__assert_fail@plt>
   216dc:	ldr	r0, [pc, #88]	; 2173c <flatcc_builder_table_add_union@@Base+0x100>
   216e0:	ldr	r1, [pc, #88]	; 21740 <flatcc_builder_table_add_union@@Base+0x104>
   216e4:	ldr	r3, [pc, #88]	; 21744 <flatcc_builder_table_add_union@@Base+0x108>
   216e8:	movw	r2, #1518	; 0x5ee
   216ec:	add	r0, pc, r0
   216f0:	add	r1, pc, r1
   216f4:	add	r3, pc, r3
   216f8:	bl	12f04 <__assert_fail@plt>
   216fc:	ldr	r0, [pc, #68]	; 21748 <flatcc_builder_table_add_union@@Base+0x10c>
   21700:	ldr	r1, [pc, #68]	; 2174c <flatcc_builder_table_add_union@@Base+0x110>
   21704:	ldr	r3, [pc, #68]	; 21750 <flatcc_builder_table_add_union@@Base+0x114>
   21708:	movw	r2, #1519	; 0x5ef
   2170c:	add	r0, pc, r0
   21710:	add	r1, pc, r1
   21714:	add	r3, pc, r3
   21718:	bl	12f04 <__assert_fail@plt>
   2171c:	ldr	r0, [pc, #48]	; 21754 <flatcc_builder_table_add_union@@Base+0x118>
   21720:	ldr	r1, [pc, #48]	; 21758 <flatcc_builder_table_add_union@@Base+0x11c>
   21724:	ldr	r3, [pc, #48]	; 2175c <flatcc_builder_table_add_union@@Base+0x120>
   21728:	movw	r2, #1522	; 0x5f2
   2172c:	add	r0, pc, r0
   21730:	add	r1, pc, r1
   21734:	add	r3, pc, r3
   21738:	bl	12f04 <__assert_fail@plt>
   2173c:	andeq	r7, r0, r6, asr r2
   21740:	andeq	r6, r0, r6, lsr #20
   21744:	andeq	r7, r0, r0, asr #10
   21748:	andeq	r7, r0, r0, lsl #11
   2174c:	andeq	r6, r0, r6, lsl #20
   21750:	andeq	r7, r0, r0, lsr #10
   21754:	andeq	r7, r0, r2, lsl #11
   21758:	andeq	r6, r0, r6, ror #19
   2175c:	andeq	r7, r0, r0, lsl #10
   21760:	andeq	r7, r0, ip, ror #11
   21764:	andeq	r6, r0, r6, asr #20
   21768:	andeq	r7, r0, r0, ror #10

0002176c <flatcc_builder_table_add_offset@@Base>:
   2176c:	push	{r4, r5, r6, r7, fp, lr}
   21770:	add	fp, sp, #16
   21774:	sub	sp, sp, #8
   21778:	mov	r4, r0
   2177c:	ldr	r0, [r0, #32]
   21780:	ldrh	r0, [r0, #14]
   21784:	cmp	r0, #3
   21788:	bne	2189c <flatcc_builder_table_add_offset@@Base+0x130>
   2178c:	movw	r0, #32765	; 0x7ffd
   21790:	mov	r5, r1
   21794:	cmp	r1, r0
   21798:	bcs	218bc <flatcc_builder_table_add_offset@@Base+0x150>
   2179c:	ldr	r0, [r4, #4]
   217a0:	add	r1, r0, r5, lsl #1
   217a4:	ldrh	r1, [r1]
   217a8:	cmp	r1, #0
   217ac:	bne	218dc <flatcc_builder_table_add_offset@@Base+0x170>
   217b0:	ldr	r2, [r4, #20]
   217b4:	ldr	r1, [r4, #12]
   217b8:	ldr	r3, [r4, #24]
   217bc:	add	r2, r2, #3
   217c0:	eor	r1, r1, r5
   217c4:	bic	r6, r2, #3
   217c8:	movw	r2, #31153	; 0x79b1
   217cc:	movt	r2, #40503	; 0x9e37
   217d0:	add	r7, r6, #4
   217d4:	cmp	r7, r3
   217d8:	str	r7, [r4, #20]
   217dc:	mul	r1, r1, r2
   217e0:	eor	r1, r1, #4
   217e4:	mul	r1, r1, r2
   217e8:	str	r1, [r4, #12]
   217ec:	bls	21860 <flatcc_builder_table_add_offset@@Base+0xf4>
   217f0:	ldr	r1, [r4, #28]
   217f4:	ldr	r0, [r4, #40]	; 0x28
   217f8:	ldr	ip, [r4, #48]	; 0x30
   217fc:	mov	r2, #1
   21800:	mov	r3, #1
   21804:	str	r2, [sp]
   21808:	add	r2, r1, r7
   2180c:	add	r1, r4, #60	; 0x3c
   21810:	blx	ip
   21814:	mov	r1, r0
   21818:	mov	r0, #0
   2181c:	cmp	r1, #0
   21820:	beq	2182c <flatcc_builder_table_add_offset@@Base+0xc0>
   21824:	sub	sp, fp, #16
   21828:	pop	{r4, r5, r6, r7, fp, pc}
   2182c:	ldr	r0, [r4, #28]
   21830:	ldr	r2, [r4, #60]	; 0x3c
   21834:	ldr	r3, [r4, #64]	; 0x40
   21838:	ldr	r1, [r4, #32]
   2183c:	add	r2, r2, r0
   21840:	sub	r0, r3, r0
   21844:	str	r2, [r4, #16]
   21848:	movw	r2, #65532	; 0xfffc
   2184c:	cmp	r0, r2
   21850:	movcs	r0, r2
   21854:	str	r0, [r4, #24]
   21858:	str	r2, [r1, #4]
   2185c:	ldr	r0, [r4, #4]
   21860:	uxth	r1, r5
   21864:	add	r0, r0, r1, lsl #1
   21868:	strh	r7, [r0]
   2186c:	ldrh	r0, [r4, #8]
   21870:	cmp	r0, r1
   21874:	addls	r0, r5, #1
   21878:	strhls	r0, [r4, #8]
   2187c:	ldr	r0, [r4]
   21880:	add	r1, r0, #2
   21884:	str	r1, [r4]
   21888:	strh	r6, [r0]
   2188c:	ldr	r0, [r4, #16]
   21890:	add	r0, r0, r6
   21894:	sub	sp, fp, #16
   21898:	pop	{r4, r5, r6, r7, fp, pc}
   2189c:	ldr	r0, [pc, #88]	; 218fc <flatcc_builder_table_add_offset@@Base+0x190>
   218a0:	ldr	r1, [pc, #88]	; 21900 <flatcc_builder_table_add_offset@@Base+0x194>
   218a4:	ldr	r3, [pc, #88]	; 21904 <flatcc_builder_table_add_offset@@Base+0x198>
   218a8:	movw	r2, #1811	; 0x713
   218ac:	add	r0, pc, r0
   218b0:	add	r1, pc, r1
   218b4:	add	r3, pc, r3
   218b8:	bl	12f04 <__assert_fail@plt>
   218bc:	ldr	r0, [pc, #68]	; 21908 <flatcc_builder_table_add_offset@@Base+0x19c>
   218c0:	ldr	r1, [pc, #68]	; 2190c <flatcc_builder_table_add_offset@@Base+0x1a0>
   218c4:	ldr	r3, [pc, #68]	; 21910 <flatcc_builder_table_add_offset@@Base+0x1a4>
   218c8:	movw	r2, #1812	; 0x714
   218cc:	add	r0, pc, r0
   218d0:	add	r1, pc, r1
   218d4:	add	r3, pc, r3
   218d8:	bl	12f04 <__assert_fail@plt>
   218dc:	ldr	r0, [pc, #48]	; 21914 <flatcc_builder_table_add_offset@@Base+0x1a8>
   218e0:	ldr	r1, [pc, #48]	; 21918 <flatcc_builder_table_add_offset@@Base+0x1ac>
   218e4:	ldr	r3, [pc, #48]	; 2191c <flatcc_builder_table_add_offset@@Base+0x1b0>
   218e8:	movw	r2, #1819	; 0x71b
   218ec:	add	r0, pc, r0
   218f0:	add	r1, pc, r1
   218f4:	add	r3, pc, r3
   218f8:	bl	12f04 <__assert_fail@plt>
   218fc:	muleq	r0, r6, r0
   21900:	andeq	r6, r0, r6, ror #16
   21904:	andeq	r7, r0, r2, lsl #15
   21908:	andeq	r7, r0, sl, ror #13
   2190c:	andeq	r6, r0, r6, asr #16
   21910:	andeq	r7, r0, r2, ror #14
   21914:	andeq	r7, r0, r7, ror #19
   21918:	andeq	r6, r0, r6, lsr #16
   2191c:	andeq	r7, r0, r2, asr #14

00021920 <flatcc_builder_table_add@@Base>:
   21920:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21924:	add	fp, sp, #24
   21928:	sub	sp, sp, #8
   2192c:	mov	r4, r0
   21930:	ldr	r0, [r0, #32]
   21934:	ldrh	r0, [r0, #14]
   21938:	cmp	r0, #3
   2193c:	bne	21a5c <flatcc_builder_table_add@@Base+0x13c>
   21940:	movw	r0, #32765	; 0x7ffd
   21944:	mov	r8, r1
   21948:	cmp	r1, r0
   2194c:	bcs	21a7c <flatcc_builder_table_add@@Base+0x15c>
   21950:	ldrh	r0, [r4, #130]	; 0x82
   21954:	cmp	r0, r3
   21958:	strhcc	r3, [r4, #130]	; 0x82
   2195c:	ldr	r0, [r4, #4]
   21960:	add	r1, r0, r8, lsl #1
   21964:	ldrh	r1, [r1]
   21968:	cmp	r1, #0
   2196c:	bne	21a9c <flatcc_builder_table_add@@Base+0x17c>
   21970:	ldr	r1, [r4, #12]
   21974:	movw	r7, #31153	; 0x79b1
   21978:	ldr	r6, [r4, #20]
   2197c:	ldr	r5, [r4, #24]
   21980:	movt	r7, #40503	; 0x9e37
   21984:	eor	r1, r1, r8
   21988:	mul	r1, r1, r7
   2198c:	eor	r1, r1, r2
   21990:	mul	r1, r1, r7
   21994:	str	r1, [r4, #12]
   21998:	add	r1, r3, r6
   2199c:	rsb	r3, r3, #0
   219a0:	sub	r1, r1, #1
   219a4:	and	r6, r1, r3
   219a8:	add	r1, r6, r2
   219ac:	cmp	r1, r5
   219b0:	str	r1, [r4, #20]
   219b4:	bcc	21a2c <flatcc_builder_table_add@@Base+0x10c>
   219b8:	ldr	r2, [r4, #28]
   219bc:	ldr	r0, [r4, #40]	; 0x28
   219c0:	ldr	r7, [r4, #48]	; 0x30
   219c4:	mov	r3, #1
   219c8:	str	r3, [sp]
   219cc:	mov	r3, #1
   219d0:	add	r1, r1, r2
   219d4:	add	r2, r1, #1
   219d8:	add	r1, r4, #60	; 0x3c
   219dc:	blx	r7
   219e0:	mov	r1, r0
   219e4:	mov	r0, #0
   219e8:	cmp	r1, #0
   219ec:	beq	219f8 <flatcc_builder_table_add@@Base+0xd8>
   219f0:	sub	sp, fp, #24
   219f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   219f8:	ldr	r0, [r4, #28]
   219fc:	ldr	r2, [r4, #60]	; 0x3c
   21a00:	ldr	r3, [r4, #64]	; 0x40
   21a04:	ldr	r1, [r4, #32]
   21a08:	add	r2, r2, r0
   21a0c:	sub	r0, r3, r0
   21a10:	str	r2, [r4, #16]
   21a14:	movw	r2, #65532	; 0xfffc
   21a18:	cmp	r0, r2
   21a1c:	movcs	r0, r2
   21a20:	str	r0, [r4, #24]
   21a24:	str	r2, [r1, #4]
   21a28:	ldr	r0, [r4, #4]
   21a2c:	uxth	r1, r8
   21a30:	add	r2, r6, #4
   21a34:	add	r0, r0, r1, lsl #1
   21a38:	strh	r2, [r0]
   21a3c:	ldrh	r0, [r4, #8]
   21a40:	cmp	r0, r1
   21a44:	addls	r0, r8, #1
   21a48:	strhls	r0, [r4, #8]
   21a4c:	ldr	r0, [r4, #16]
   21a50:	add	r0, r0, r6
   21a54:	sub	sp, fp, #24
   21a58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21a5c:	ldr	r0, [pc, #88]	; 21abc <flatcc_builder_table_add@@Base+0x19c>
   21a60:	ldr	r1, [pc, #88]	; 21ac0 <flatcc_builder_table_add@@Base+0x1a0>
   21a64:	ldr	r3, [pc, #88]	; 21ac4 <flatcc_builder_table_add@@Base+0x1a4>
   21a68:	movw	r2, #1773	; 0x6ed
   21a6c:	add	r0, pc, r0
   21a70:	add	r1, pc, r1
   21a74:	add	r3, pc, r3
   21a78:	bl	12f04 <__assert_fail@plt>
   21a7c:	ldr	r0, [pc, #68]	; 21ac8 <flatcc_builder_table_add@@Base+0x1a8>
   21a80:	ldr	r1, [pc, #68]	; 21acc <flatcc_builder_table_add@@Base+0x1ac>
   21a84:	ldr	r3, [pc, #68]	; 21ad0 <flatcc_builder_table_add@@Base+0x1b0>
   21a88:	movw	r2, #1774	; 0x6ee
   21a8c:	add	r0, pc, r0
   21a90:	add	r1, pc, r1
   21a94:	add	r3, pc, r3
   21a98:	bl	12f04 <__assert_fail@plt>
   21a9c:	ldr	r0, [pc, #48]	; 21ad4 <flatcc_builder_table_add@@Base+0x1b4>
   21aa0:	ldr	r1, [pc, #48]	; 21ad8 <flatcc_builder_table_add@@Base+0x1b8>
   21aa4:	ldr	r3, [pc, #48]	; 21adc <flatcc_builder_table_add@@Base+0x1bc>
   21aa8:	movw	r2, #1784	; 0x6f8
   21aac:	add	r0, pc, r0
   21ab0:	add	r1, pc, r1
   21ab4:	add	r3, pc, r3
   21ab8:	bl	12f04 <__assert_fail@plt>
   21abc:	ldrdeq	r6, [r0], -r6	; <UNPREDICTABLE>
   21ac0:	andeq	r6, r0, r6, lsr #13
   21ac4:	strdeq	r7, [r0], -r8
   21ac8:	andeq	r7, r0, sl, lsr #10
   21acc:	andeq	r6, r0, r6, lsl #13
   21ad0:	ldrdeq	r7, [r0], -r8
   21ad4:	andeq	r7, r0, r7, lsr #16
   21ad8:	andeq	r6, r0, r6, ror #12
   21adc:			; <UNDEFINED> instruction: 0x000074b8

00021ae0 <flatcc_builder_table_add_union_vector@@Base>:
   21ae0:	push	{r4, r5, r6, r7, fp, lr}
   21ae4:	add	fp, sp, #16
   21ae8:	mov	r6, r0
   21aec:	ldr	r0, [r0, #32]
   21af0:	ldrh	r0, [r0, #14]
   21af4:	cmp	r0, #3
   21af8:	bne	21b64 <flatcc_builder_table_add_union_vector@@Base+0x84>
   21afc:	mov	r5, r1
   21b00:	clz	r1, r3
   21b04:	cmp	r2, #0
   21b08:	mov	r0, r2
   21b0c:	mov	r4, r3
   21b10:	mov	r7, r2
   21b14:	movwne	r0, #1
   21b18:	lsr	r1, r1, #5
   21b1c:	teq	r1, r0
   21b20:	beq	21b84 <flatcc_builder_table_add_union_vector@@Base+0xa4>
   21b24:	cmp	r7, #0
   21b28:	beq	21b5c <flatcc_builder_table_add_union_vector@@Base+0x7c>
   21b2c:	sub	r1, r5, #1
   21b30:	mov	r0, r6
   21b34:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   21b38:	cmp	r0, #0
   21b3c:	beq	21ba4 <flatcc_builder_table_add_union_vector@@Base+0xc4>
   21b40:	str	r7, [r0]
   21b44:	mov	r0, r6
   21b48:	mov	r1, r5
   21b4c:	bl	2176c <flatcc_builder_table_add_offset@@Base>
   21b50:	cmp	r0, #0
   21b54:	beq	21bc4 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   21b58:	str	r4, [r0]
   21b5c:	mov	r0, #0
   21b60:	pop	{r4, r5, r6, r7, fp, pc}
   21b64:	ldr	r0, [pc, #120]	; 21be4 <flatcc_builder_table_add_union_vector@@Base+0x104>
   21b68:	ldr	r1, [pc, #120]	; 21be8 <flatcc_builder_table_add_union_vector@@Base+0x108>
   21b6c:	ldr	r3, [pc, #120]	; 21bec <flatcc_builder_table_add_union_vector@@Base+0x10c>
   21b70:	mov	r2, #1536	; 0x600
   21b74:	add	r0, pc, r0
   21b78:	add	r1, pc, r1
   21b7c:	add	r3, pc, r3
   21b80:	bl	12f04 <__assert_fail@plt>
   21b84:	ldr	r0, [pc, #100]	; 21bf0 <flatcc_builder_table_add_union_vector@@Base+0x110>
   21b88:	ldr	r1, [pc, #100]	; 21bf4 <flatcc_builder_table_add_union_vector@@Base+0x114>
   21b8c:	ldr	r3, [pc, #100]	; 21bf8 <flatcc_builder_table_add_union_vector@@Base+0x118>
   21b90:	movw	r2, #1537	; 0x601
   21b94:	add	r0, pc, r0
   21b98:	add	r1, pc, r1
   21b9c:	add	r3, pc, r3
   21ba0:	bl	12f04 <__assert_fail@plt>
   21ba4:	ldr	r0, [pc, #80]	; 21bfc <flatcc_builder_table_add_union_vector@@Base+0x11c>
   21ba8:	ldr	r1, [pc, #80]	; 21c00 <flatcc_builder_table_add_union_vector@@Base+0x120>
   21bac:	ldr	r3, [pc, #80]	; 21c04 <flatcc_builder_table_add_union_vector@@Base+0x124>
   21bb0:	movw	r2, #1540	; 0x604
   21bb4:	add	r0, pc, r0
   21bb8:	add	r1, pc, r1
   21bbc:	add	r3, pc, r3
   21bc0:	bl	12f04 <__assert_fail@plt>
   21bc4:	ldr	r0, [pc, #60]	; 21c08 <flatcc_builder_table_add_union_vector@@Base+0x128>
   21bc8:	ldr	r1, [pc, #60]	; 21c0c <flatcc_builder_table_add_union_vector@@Base+0x12c>
   21bcc:	ldr	r3, [pc, #60]	; 21c10 <flatcc_builder_table_add_union_vector@@Base+0x130>
   21bd0:	movw	r2, #1544	; 0x608
   21bd4:	add	r0, pc, r0
   21bd8:	add	r1, pc, r1
   21bdc:	add	r3, pc, r3
   21be0:	bl	12f04 <__assert_fail@plt>
   21be4:	andeq	r6, r0, lr, asr #27
   21be8:	muleq	r0, lr, r5
   21bec:	andeq	r7, r0, r8, asr #2
   21bf0:	muleq	r0, r3, r1
   21bf4:	andeq	r6, r0, lr, ror r5
   21bf8:	andeq	r7, r0, r8, lsr #2
   21bfc:	strdeq	r7, [r0], -sl
   21c00:	andeq	r6, r0, lr, asr r5
   21c04:	andeq	r7, r0, r8, lsl #2
   21c08:	ldrdeq	r7, [r0], -sl
   21c0c:	andeq	r6, r0, lr, lsr r5
   21c10:	andeq	r7, r0, r8, ror #1

00021c14 <flatcc_builder_create_union_vector@@Base>:
   21c14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21c18:	add	fp, sp, #28
   21c1c:	sub	sp, sp, #12
   21c20:	mov	r6, #0
   21c24:	mov	r4, r1
   21c28:	mov	r8, r0
   21c2c:	mov	sl, r3
   21c30:	mov	r9, r2
   21c34:	mov	r7, #4
   21c38:	str	r6, [r0]
   21c3c:	str	r6, [r0, #4]
   21c40:	mov	r0, r1
   21c44:	mov	r1, #4
   21c48:	bl	1ef68 <flatcc_builder_start_buffer@@Base+0xc0>
   21c4c:	cmp	r0, #0
   21c50:	beq	21c5c <flatcc_builder_create_union_vector@@Base+0x48>
   21c54:	sub	sp, fp, #28
   21c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c5c:	ldr	r0, [r4, #32]
   21c60:	mov	r1, #5
   21c64:	str	r7, [r0, #16]
   21c68:	ldr	r0, [r4, #32]
   21c6c:	str	r6, [r0, #20]
   21c70:	ldr	r0, [r4, #32]
   21c74:	strh	r1, [r0, #14]
   21c78:	ldr	r1, [r4, #28]
   21c7c:	ldr	r2, [r4, #60]	; 0x3c
   21c80:	ldr	r3, [r4, #64]	; 0x40
   21c84:	add	r2, r2, r1
   21c88:	sub	r1, r3, r1
   21c8c:	str	r2, [r4, #16]
   21c90:	mvn	r2, #3
   21c94:	cmn	r1, #4
   21c98:	movcs	r1, r2
   21c9c:	str	r1, [r4, #24]
   21ca0:	str	r2, [r0, #4]
   21ca4:	ldr	r1, [r0, #20]
   21ca8:	adds	r1, r1, sl
   21cac:	cmpcc	r1, #1073741824	; 0x40000000
   21cb0:	bcc	21cd4 <flatcc_builder_create_union_vector@@Base+0xc0>
   21cb4:	ldr	r0, [pc, #644]	; 21f40 <flatcc_builder_create_union_vector@@Base+0x32c>
   21cb8:	ldr	r1, [pc, #644]	; 21f44 <flatcc_builder_create_union_vector@@Base+0x330>
   21cbc:	ldr	r3, [pc, #644]	; 21f48 <flatcc_builder_create_union_vector@@Base+0x334>
   21cc0:	mov	r2, #892	; 0x37c
   21cc4:	add	r0, pc, r0
   21cc8:	add	r1, pc, r1
   21ccc:	add	r3, pc, r3
   21cd0:	bl	12f04 <__assert_fail@plt>
   21cd4:	str	r1, [r0, #20]
   21cd8:	ldr	r7, [r4, #20]
   21cdc:	ldr	r0, [r4, #24]
   21ce0:	add	r1, r7, sl, lsl #2
   21ce4:	cmp	r1, r0
   21ce8:	str	r1, [r4, #20]
   21cec:	bcs	21d00 <flatcc_builder_create_union_vector@@Base+0xec>
   21cf0:	ldr	r1, [r4, #16]
   21cf4:	adds	r2, r1, r7
   21cf8:	bne	21d68 <flatcc_builder_create_union_vector@@Base+0x154>
   21cfc:	b	21c54 <flatcc_builder_create_union_vector@@Base+0x40>
   21d00:	ldr	r2, [r4, #28]
   21d04:	ldr	r0, [r4, #40]	; 0x28
   21d08:	ldr	r6, [r4, #48]	; 0x30
   21d0c:	mov	r3, #1
   21d10:	str	r3, [sp]
   21d14:	mov	r3, #1
   21d18:	add	r1, r1, r2
   21d1c:	add	r2, r1, #1
   21d20:	add	r1, r4, #60	; 0x3c
   21d24:	blx	r6
   21d28:	cmp	r0, #0
   21d2c:	bne	21c54 <flatcc_builder_create_union_vector@@Base+0x40>
   21d30:	ldr	r0, [r4, #28]
   21d34:	ldr	r1, [r4, #60]	; 0x3c
   21d38:	ldr	r3, [r4, #64]	; 0x40
   21d3c:	ldr	r2, [r4, #32]
   21d40:	add	r1, r1, r0
   21d44:	sub	r0, r3, r0
   21d48:	mvn	r3, #3
   21d4c:	cmn	r0, #4
   21d50:	str	r1, [r4, #16]
   21d54:	movcs	r0, r3
   21d58:	str	r0, [r4, #24]
   21d5c:	str	r3, [r2, #4]
   21d60:	adds	r2, r1, r7
   21d64:	beq	21c54 <flatcc_builder_create_union_vector@@Base+0x40>
   21d68:	ldr	r7, [r4, #20]
   21d6c:	add	r2, r7, sl
   21d70:	cmp	r2, r0
   21d74:	str	r2, [r4, #20]
   21d78:	bcc	21ddc <flatcc_builder_create_union_vector@@Base+0x1c8>
   21d7c:	ldr	r1, [r4, #28]
   21d80:	ldr	r0, [r4, #40]	; 0x28
   21d84:	ldr	r6, [r4, #48]	; 0x30
   21d88:	mov	r3, #1
   21d8c:	str	r3, [sp]
   21d90:	mov	r3, #1
   21d94:	add	r1, r2, r1
   21d98:	add	r2, r1, #1
   21d9c:	add	r1, r4, #60	; 0x3c
   21da0:	blx	r6
   21da4:	cmp	r0, #0
   21da8:	bne	21c54 <flatcc_builder_create_union_vector@@Base+0x40>
   21dac:	ldr	r0, [r4, #28]
   21db0:	ldr	r1, [r4, #60]	; 0x3c
   21db4:	ldr	r3, [r4, #64]	; 0x40
   21db8:	ldr	r2, [r4, #32]
   21dbc:	add	r1, r1, r0
   21dc0:	sub	r0, r3, r0
   21dc4:	mvn	r3, #3
   21dc8:	cmn	r0, #4
   21dcc:	str	r1, [r4, #16]
   21dd0:	movcs	r0, r3
   21dd4:	str	r0, [r4, #24]
   21dd8:	str	r3, [r2, #4]
   21ddc:	adds	r5, r1, r7
   21de0:	beq	21c54 <flatcc_builder_create_union_vector@@Base+0x40>
   21de4:	cmp	sl, #0
   21de8:	beq	21e70 <flatcc_builder_create_union_vector@@Base+0x25c>
   21dec:	and	ip, sl, #1
   21df0:	mov	r0, #0
   21df4:	cmp	sl, #1
   21df8:	str	r5, [sp, #8]
   21dfc:	beq	21e54 <flatcc_builder_create_union_vector@@Base+0x240>
   21e00:	ldr	r0, [sp, #8]
   21e04:	sub	lr, sl, ip
   21e08:	add	r2, r1, #4
   21e0c:	add	r6, r9, #8
   21e10:	add	r7, r0, #1
   21e14:	mov	r0, #0
   21e18:	ldrb	r3, [r6, #-8]
   21e1c:	add	r5, r7, r0
   21e20:	strb	r3, [r5, #-1]
   21e24:	add	r3, r9, r0, lsl #3
   21e28:	ldr	r5, [r3, #4]
   21e2c:	str	r5, [r2, #-4]
   21e30:	ldrb	r5, [r6]
   21e34:	add	r6, r6, #16
   21e38:	strb	r5, [r7, r0]
   21e3c:	add	r0, r0, #2
   21e40:	ldr	r3, [r3, #12]
   21e44:	cmp	lr, r0
   21e48:	str	r3, [r2]
   21e4c:	add	r2, r2, #8
   21e50:	bne	21e18 <flatcc_builder_create_union_vector@@Base+0x204>
   21e54:	ldr	r5, [sp, #8]
   21e58:	cmp	ip, #0
   21e5c:	beq	21e70 <flatcc_builder_create_union_vector@@Base+0x25c>
   21e60:	ldrb	r2, [r9, r0, lsl #3]!
   21e64:	strb	r2, [r5, r0]
   21e68:	ldr	r2, [r9, #4]
   21e6c:	str	r2, [r1, r0, lsl #2]
   21e70:	mov	r0, r4
   21e74:	mov	r2, sl
   21e78:	mov	r3, r5
   21e7c:	bl	21304 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   21e80:	mov	r7, r0
   21e84:	mov	r6, #0
   21e88:	cmp	r0, #0
   21e8c:	beq	21eb8 <flatcc_builder_create_union_vector@@Base+0x2a4>
   21e90:	mvn	r0, #0
   21e94:	mov	r1, #1
   21e98:	mov	r2, sl
   21e9c:	mov	r3, #1
   21ea0:	str	r1, [sp]
   21ea4:	str	r0, [sp, #4]
   21ea8:	mov	r0, r4
   21eac:	mov	r1, r5
   21eb0:	bl	21070 <flatcc_builder_create_vector@@Base>
   21eb4:	b	21ebc <flatcc_builder_create_union_vector@@Base+0x2a8>
   21eb8:	mov	r0, #0
   21ebc:	orr	r1, r6, r7
   21ec0:	stm	r8, {r0, r1}
   21ec4:	mov	r1, #0
   21ec8:	ldr	r0, [r4, #16]
   21ecc:	ldr	r2, [r4, #20]
   21ed0:	bl	12ebc <memset@plt>
   21ed4:	ldr	r0, [r4, #32]
   21ed8:	ldr	r1, [r4, #60]	; 0x3c
   21edc:	ldr	r2, [r4, #64]	; 0x40
   21ee0:	ldr	r3, [r0, #8]
   21ee4:	str	r3, [r4, #20]
   21ee8:	ldr	r3, [r0]
   21eec:	str	r3, [r4, #28]
   21ef0:	add	r1, r1, r3
   21ef4:	ldr	r7, [r0, #4]
   21ef8:	str	r1, [r4, #16]
   21efc:	sub	r1, r2, r3
   21f00:	cmp	r1, r7
   21f04:	movhi	r1, r7
   21f08:	str	r1, [r4, #24]
   21f0c:	ldrh	r1, [r4, #130]	; 0x82
   21f10:	ldrh	r2, [r4, #128]	; 0x80
   21f14:	cmp	r2, r1
   21f18:	strhcc	r1, [r4, #128]	; 0x80
   21f1c:	ldrh	r1, [r0, #12]
   21f20:	sub	r0, r0, #36	; 0x24
   21f24:	str	r0, [r4, #32]
   21f28:	strh	r1, [r4, #130]	; 0x82
   21f2c:	ldr	r0, [r4, #156]	; 0x9c
   21f30:	sub	r0, r0, #1
   21f34:	str	r0, [r4, #156]	; 0x9c
   21f38:	sub	sp, fp, #28
   21f3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f40:	andeq	r7, r0, r8, lsl r5
   21f44:	andeq	r6, r0, lr, asr #8
   21f48:	andeq	r7, r0, fp, lsr #10

00021f4c <flatcc_builder_create_union_vector_direct@@Base>:
   21f4c:	push	{r4, r5, r6, r7, fp, lr}
   21f50:	add	fp, sp, #16
   21f54:	sub	sp, sp, #8
   21f58:	ldr	r7, [fp, #8]
   21f5c:	mov	r5, r2
   21f60:	mov	r4, r0
   21f64:	mov	r0, #0
   21f68:	mov	r6, r1
   21f6c:	str	r0, [r4]
   21f70:	str	r0, [r4, #4]
   21f74:	mov	r0, r1
   21f78:	mov	r1, r3
   21f7c:	mov	r3, r5
   21f80:	mov	r2, r7
   21f84:	bl	21304 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   21f88:	cmp	r0, #0
   21f8c:	str	r0, [r4, #4]
   21f90:	beq	21fbc <flatcc_builder_create_union_vector_direct@@Base+0x70>
   21f94:	mvn	r0, #0
   21f98:	mov	r1, #1
   21f9c:	mov	r2, r7
   21fa0:	mov	r3, #1
   21fa4:	str	r1, [sp]
   21fa8:	str	r0, [sp, #4]
   21fac:	mov	r0, r6
   21fb0:	mov	r1, r5
   21fb4:	bl	21070 <flatcc_builder_create_vector@@Base>
   21fb8:	str	r0, [r4]
   21fbc:	sub	sp, fp, #16
   21fc0:	pop	{r4, r5, r6, r7, fp, pc}

00021fc4 <flatcc_builder_start_union_vector@@Base>:
   21fc4:	push	{r4, sl, fp, lr}
   21fc8:	add	fp, sp, #8
   21fcc:	mov	r1, #4
   21fd0:	mov	r4, r0
   21fd4:	bl	1ef68 <flatcc_builder_start_buffer@@Base+0xc0>
   21fd8:	mov	r1, r0
   21fdc:	mvn	r0, #0
   21fe0:	cmp	r1, #0
   21fe4:	popne	{r4, sl, fp, pc}
   21fe8:	ldr	r0, [r4, #32]
   21fec:	mov	r1, #8
   21ff0:	mov	r2, #7
   21ff4:	str	r1, [r0, #16]
   21ff8:	mov	r0, #0
   21ffc:	ldr	r1, [r4, #32]
   22000:	str	r0, [r1, #20]
   22004:	ldr	r1, [r4, #32]
   22008:	strh	r2, [r1, #14]
   2200c:	ldr	r2, [r4, #28]
   22010:	ldr	r3, [r4, #60]	; 0x3c
   22014:	ldr	ip, [r4, #64]	; 0x40
   22018:	add	r3, r3, r2
   2201c:	sub	r2, ip, r2
   22020:	str	r3, [r4, #16]
   22024:	mvn	r3, #3
   22028:	cmn	r2, #4
   2202c:	movcs	r2, r3
   22030:	str	r2, [r4, #24]
   22034:	str	r3, [r1, #4]
   22038:	pop	{r4, sl, fp, pc}

0002203c <flatcc_builder_end_union_vector@@Base>:
   2203c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22040:	add	fp, sp, #28
   22044:	sub	sp, sp, #20
   22048:	mov	r4, r0
   2204c:	mov	r0, #0
   22050:	mov	r8, r1
   22054:	str	r0, [r4]
   22058:	str	r0, [r4, #4]
   2205c:	ldr	r0, [r1, #32]
   22060:	ldrh	r1, [r0, #14]
   22064:	cmp	r1, #7
   22068:	bne	2226c <flatcc_builder_end_union_vector@@Base+0x230>
   2206c:	ldr	r9, [r0, #20]
   22070:	ldr	r5, [r8, #20]
   22074:	ldr	r2, [r8, #24]
   22078:	add	r0, r9, r9, lsl #2
   2207c:	add	r1, r5, r0
   22080:	cmp	r1, r2
   22084:	str	r1, [r8, #20]
   22088:	bcs	2209c <flatcc_builder_end_union_vector@@Base+0x60>
   2208c:	ldr	r0, [r8, #16]
   22090:	adds	r1, r0, r5
   22094:	bne	22104 <flatcc_builder_end_union_vector@@Base+0xc8>
   22098:	b	22264 <flatcc_builder_end_union_vector@@Base+0x228>
   2209c:	ldr	r2, [r8, #28]
   220a0:	ldr	r0, [r8, #40]	; 0x28
   220a4:	ldr	r7, [r8, #48]	; 0x30
   220a8:	mov	r3, #1
   220ac:	str	r3, [sp]
   220b0:	mov	r3, #1
   220b4:	add	r1, r1, r2
   220b8:	add	r2, r1, #1
   220bc:	add	r1, r8, #60	; 0x3c
   220c0:	blx	r7
   220c4:	cmp	r0, #0
   220c8:	bne	22264 <flatcc_builder_end_union_vector@@Base+0x228>
   220cc:	ldr	r1, [r8, #28]
   220d0:	ldr	r0, [r8, #60]	; 0x3c
   220d4:	ldr	r3, [r8, #64]	; 0x40
   220d8:	ldr	r2, [r8, #32]
   220dc:	add	r0, r0, r1
   220e0:	sub	r1, r3, r1
   220e4:	mvn	r3, #3
   220e8:	cmn	r1, #4
   220ec:	str	r0, [r8, #16]
   220f0:	movcs	r1, r3
   220f4:	str	r1, [r8, #24]
   220f8:	str	r3, [r2, #4]
   220fc:	adds	r1, r0, r5
   22100:	beq	22264 <flatcc_builder_end_union_vector@@Base+0x228>
   22104:	add	sl, r1, r9, lsl #2
   22108:	cmp	r9, #0
   2210c:	beq	2219c <flatcc_builder_end_union_vector@@Base+0x160>
   22110:	and	r2, r9, #1
   22114:	cmp	r9, #1
   22118:	str	r4, [sp, #12]
   2211c:	str	r2, [sp, #16]
   22120:	mov	r2, #0
   22124:	beq	2217c <flatcc_builder_end_union_vector@@Base+0x140>
   22128:	ldr	r2, [sp, #16]
   2212c:	add	r5, r5, #4
   22130:	add	r6, r0, #8
   22134:	sub	lr, r9, r2
   22138:	mov	r2, #0
   2213c:	ldrb	r7, [r6, #-8]
   22140:	mov	r4, sl
   22144:	add	r3, r0, r2, lsl #3
   22148:	strb	r7, [r4, r2]!
   2214c:	add	r7, r0, r5
   22150:	add	r2, r2, #2
   22154:	ldr	ip, [r3, #4]
   22158:	cmp	lr, r2
   2215c:	str	ip, [r7, #-4]
   22160:	ldrb	r7, [r6]
   22164:	add	r6, r6, #16
   22168:	strb	r7, [r4, #1]
   2216c:	ldr	r3, [r3, #12]
   22170:	str	r3, [r0, r5]
   22174:	add	r5, r5, #8
   22178:	bne	2213c <flatcc_builder_end_union_vector@@Base+0x100>
   2217c:	ldr	r3, [sp, #16]
   22180:	ldr	r4, [sp, #12]
   22184:	cmp	r3, #0
   22188:	beq	2219c <flatcc_builder_end_union_vector@@Base+0x160>
   2218c:	ldrb	r3, [r0, r2, lsl #3]!
   22190:	strb	r3, [sl, r2]
   22194:	ldr	r0, [r0, #4]
   22198:	str	r0, [r1, r2, lsl #2]
   2219c:	mov	r0, r8
   221a0:	mov	r2, r9
   221a4:	mov	r3, sl
   221a8:	bl	21304 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   221ac:	mov	r5, r0
   221b0:	mov	r6, #0
   221b4:	cmp	r0, #0
   221b8:	beq	221e4 <flatcc_builder_end_union_vector@@Base+0x1a8>
   221bc:	mvn	r0, #0
   221c0:	mov	r1, #1
   221c4:	mov	r2, r9
   221c8:	mov	r3, #1
   221cc:	str	r1, [sp]
   221d0:	str	r0, [sp, #4]
   221d4:	mov	r0, r8
   221d8:	mov	r1, sl
   221dc:	bl	21070 <flatcc_builder_create_vector@@Base>
   221e0:	b	221e8 <flatcc_builder_end_union_vector@@Base+0x1ac>
   221e4:	mov	r0, #0
   221e8:	orr	r1, r6, r5
   221ec:	stm	r4, {r0, r1}
   221f0:	mov	r1, #0
   221f4:	ldr	r0, [r8, #16]
   221f8:	ldr	r2, [r8, #20]
   221fc:	bl	12ebc <memset@plt>
   22200:	ldr	r0, [r8, #32]
   22204:	ldr	r1, [r8, #60]	; 0x3c
   22208:	ldr	r2, [r8, #64]	; 0x40
   2220c:	ldr	r3, [r0, #8]
   22210:	str	r3, [r8, #20]
   22214:	ldr	r3, [r0]
   22218:	str	r3, [r8, #28]
   2221c:	add	r1, r1, r3
   22220:	ldr	r7, [r0, #4]
   22224:	str	r1, [r8, #16]
   22228:	sub	r1, r2, r3
   2222c:	cmp	r1, r7
   22230:	movhi	r1, r7
   22234:	str	r1, [r8, #24]
   22238:	ldrh	r1, [r8, #130]	; 0x82
   2223c:	ldrh	r2, [r8, #128]	; 0x80
   22240:	cmp	r2, r1
   22244:	strhcc	r1, [r8, #128]	; 0x80
   22248:	ldrh	r1, [r0, #12]
   2224c:	sub	r0, r0, #36	; 0x24
   22250:	str	r0, [r8, #32]
   22254:	strh	r1, [r8, #130]	; 0x82
   22258:	ldr	r0, [r8, #156]	; 0x9c
   2225c:	sub	r0, r0, #1
   22260:	str	r0, [r8, #156]	; 0x9c
   22264:	sub	sp, fp, #28
   22268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2226c:	ldr	r0, [pc, #24]	; 2228c <flatcc_builder_end_union_vector@@Base+0x250>
   22270:	ldr	r1, [pc, #24]	; 22290 <flatcc_builder_end_union_vector@@Base+0x254>
   22274:	ldr	r3, [pc, #24]	; 22294 <flatcc_builder_end_union_vector@@Base+0x258>
   22278:	movw	r2, #1617	; 0x651
   2227c:	add	r0, pc, r0
   22280:	add	r1, pc, r1
   22284:	add	r3, pc, r3
   22288:	bl	12f04 <__assert_fail@plt>
   2228c:	ldrdeq	r6, [r0], -r3
   22290:	muleq	r0, r6, lr
   22294:	strdeq	r6, [r0], -sp

00022298 <flatcc_builder_union_vector_count@@Base>:
   22298:	ldr	r0, [r0, #32]
   2229c:	ldr	r0, [r0, #20]
   222a0:	bx	lr

000222a4 <flatcc_builder_union_vector_edit@@Base>:
   222a4:	ldr	r0, [r0, #16]
   222a8:	bx	lr

000222ac <flatcc_builder_extend_union_vector@@Base>:
   222ac:	push	{r4, r5, fp, lr}
   222b0:	add	fp, sp, #8
   222b4:	sub	sp, sp, #8
   222b8:	mov	r4, r0
   222bc:	ldr	r0, [r0, #32]
   222c0:	ldr	r2, [r0, #20]
   222c4:	adds	r2, r2, r1
   222c8:	cmpcc	r2, #536870912	; 0x20000000
   222cc:	bcc	222f0 <flatcc_builder_extend_union_vector@@Base+0x44>
   222d0:	ldr	r0, [pc, #184]	; 22390 <flatcc_builder_extend_union_vector@@Base+0xe4>
   222d4:	ldr	r1, [pc, #184]	; 22394 <flatcc_builder_extend_union_vector@@Base+0xe8>
   222d8:	ldr	r3, [pc, #184]	; 22398 <flatcc_builder_extend_union_vector@@Base+0xec>
   222dc:	mov	r2, #892	; 0x37c
   222e0:	add	r0, pc, r0
   222e4:	add	r1, pc, r1
   222e8:	add	r3, pc, r3
   222ec:	bl	12f04 <__assert_fail@plt>
   222f0:	str	r2, [r0, #20]
   222f4:	ldr	r5, [r4, #20]
   222f8:	ldr	r0, [r4, #24]
   222fc:	add	r1, r5, r1, lsl #3
   22300:	cmp	r1, r0
   22304:	str	r1, [r4, #20]
   22308:	bcs	22314 <flatcc_builder_extend_union_vector@@Base+0x68>
   2230c:	ldr	r0, [r4, #16]
   22310:	b	22384 <flatcc_builder_extend_union_vector@@Base+0xd8>
   22314:	ldr	r2, [r4, #28]
   22318:	ldr	r0, [r4, #40]	; 0x28
   2231c:	ldr	ip, [r4, #48]	; 0x30
   22320:	mov	r3, #1
   22324:	str	r3, [sp]
   22328:	mov	r3, #1
   2232c:	add	r1, r1, r2
   22330:	add	r2, r1, #1
   22334:	add	r1, r4, #60	; 0x3c
   22338:	blx	ip
   2233c:	mov	r1, r0
   22340:	mov	r0, #0
   22344:	cmp	r1, #0
   22348:	beq	22354 <flatcc_builder_extend_union_vector@@Base+0xa8>
   2234c:	sub	sp, fp, #8
   22350:	pop	{r4, r5, fp, pc}
   22354:	ldr	r1, [r4, #28]
   22358:	ldr	r0, [r4, #60]	; 0x3c
   2235c:	ldr	r3, [r4, #64]	; 0x40
   22360:	ldr	r2, [r4, #32]
   22364:	add	r0, r0, r1
   22368:	sub	r1, r3, r1
   2236c:	mvn	r3, #3
   22370:	cmn	r1, #4
   22374:	str	r0, [r4, #16]
   22378:	movcs	r1, r3
   2237c:	str	r1, [r4, #24]
   22380:	str	r3, [r2, #4]
   22384:	add	r0, r0, r5
   22388:	sub	sp, fp, #8
   2238c:	pop	{r4, r5, fp, pc}
   22390:	strdeq	r6, [r0], -ip
   22394:	andeq	r5, r0, r2, lsr lr
   22398:	andeq	r6, r0, pc, lsl #30

0002239c <flatcc_builder_truncate_union_vector@@Base>:
   2239c:	push	{fp, lr}
   223a0:	mov	fp, sp
   223a4:	ldr	r2, [r0, #32]
   223a8:	ldrh	r3, [r2, #14]
   223ac:	cmp	r3, #7
   223b0:	bne	223f8 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   223b4:	ldr	r3, [r2, #20]
   223b8:	cmp	r3, r1
   223bc:	bcc	22418 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   223c0:	sub	r3, r3, r1
   223c4:	str	r3, [r2, #20]
   223c8:	ldr	r2, [r0, #32]
   223cc:	ldr	r3, [r0, #20]
   223d0:	ldr	ip, [r0, #16]
   223d4:	ldr	r2, [r2, #16]
   223d8:	mls	r3, r2, r1, r3
   223dc:	mul	r2, r2, r1
   223e0:	mov	r1, #0
   223e4:	str	r3, [r0, #20]
   223e8:	add	r0, ip, r3
   223ec:	bl	12ebc <memset@plt>
   223f0:	mov	r0, #0
   223f4:	pop	{fp, pc}
   223f8:	ldr	r0, [pc, #56]	; 22438 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   223fc:	ldr	r1, [pc, #56]	; 2243c <flatcc_builder_truncate_union_vector@@Base+0xa0>
   22400:	ldr	r3, [pc, #56]	; 22440 <flatcc_builder_truncate_union_vector@@Base+0xa4>
   22404:	movw	r2, #1665	; 0x681
   22408:	add	r0, pc, r0
   2240c:	add	r1, pc, r1
   22410:	add	r3, pc, r3
   22414:	bl	12f04 <__assert_fail@plt>
   22418:	ldr	r0, [pc, #36]	; 22444 <flatcc_builder_truncate_union_vector@@Base+0xa8>
   2241c:	ldr	r1, [pc, #36]	; 22448 <flatcc_builder_truncate_union_vector@@Base+0xac>
   22420:	ldr	r3, [pc, #36]	; 2244c <flatcc_builder_truncate_union_vector@@Base+0xb0>
   22424:	movw	r2, #1666	; 0x682
   22428:	add	r0, pc, r0
   2242c:	add	r1, pc, r1
   22430:	add	r3, pc, r3
   22434:	bl	12f04 <__assert_fail@plt>
   22438:	andeq	r6, r0, r7, asr #18
   2243c:	andeq	r5, r0, sl, lsl #26
   22440:	andeq	r6, r0, r4, asr #19
   22444:	andeq	r6, r0, fp, lsl #7
   22448:	andeq	r5, r0, sl, ror #25
   2244c:	andeq	r6, r0, r4, lsr #19

00022450 <flatcc_builder_union_vector_push@@Base>:
   22450:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22454:	add	fp, sp, #24
   22458:	sub	sp, sp, #8
   2245c:	mov	r7, r0
   22460:	ldr	r0, [r0, #32]
   22464:	mov	r9, r1
   22468:	ldrh	r1, [r0, #14]
   2246c:	cmp	r1, #7
   22470:	bne	2252c <flatcc_builder_union_vector_push@@Base+0xdc>
   22474:	ldr	r1, [r0, #20]
   22478:	mov	r6, #0
   2247c:	cmn	r1, #-536870911	; 0xe0000001
   22480:	beq	22520 <flatcc_builder_union_vector_push@@Base+0xd0>
   22484:	add	r1, r1, #1
   22488:	mov	r8, r2
   2248c:	str	r1, [r0, #20]
   22490:	ldr	r4, [r7, #20]
   22494:	ldr	r0, [r7, #24]
   22498:	add	r1, r4, #8
   2249c:	cmp	r1, r0
   224a0:	str	r1, [r7, #20]
   224a4:	bcs	224b0 <flatcc_builder_union_vector_push@@Base+0x60>
   224a8:	ldr	r0, [r7, #16]
   224ac:	b	22510 <flatcc_builder_union_vector_push@@Base+0xc0>
   224b0:	ldr	r1, [r7, #28]
   224b4:	ldr	r0, [r7, #40]	; 0x28
   224b8:	ldr	r5, [r7, #48]	; 0x30
   224bc:	mov	r2, #1
   224c0:	mov	r3, #1
   224c4:	str	r2, [sp]
   224c8:	add	r1, r4, r1
   224cc:	add	r2, r1, #9
   224d0:	add	r1, r7, #60	; 0x3c
   224d4:	blx	r5
   224d8:	cmp	r0, #0
   224dc:	bne	22520 <flatcc_builder_union_vector_push@@Base+0xd0>
   224e0:	ldr	r1, [r7, #28]
   224e4:	ldr	r0, [r7, #60]	; 0x3c
   224e8:	ldr	r3, [r7, #64]	; 0x40
   224ec:	ldr	r2, [r7, #32]
   224f0:	add	r0, r0, r1
   224f4:	sub	r1, r3, r1
   224f8:	mvn	r3, #3
   224fc:	cmn	r1, #4
   22500:	str	r0, [r7, #16]
   22504:	movcs	r1, r3
   22508:	str	r1, [r7, #24]
   2250c:	str	r3, [r2, #4]
   22510:	adds	r0, r0, r4
   22514:	movne	r6, r0
   22518:	strne	r9, [r0]
   2251c:	strne	r8, [r0, #4]
   22520:	mov	r0, r6
   22524:	sub	sp, fp, #24
   22528:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2252c:	ldr	r0, [pc, #24]	; 2254c <flatcc_builder_union_vector_push@@Base+0xfc>
   22530:	ldr	r1, [pc, #24]	; 22550 <flatcc_builder_union_vector_push@@Base+0x100>
   22534:	ldr	r3, [pc, #24]	; 22554 <flatcc_builder_union_vector_push@@Base+0x104>
   22538:	movw	r2, #1677	; 0x68d
   2253c:	add	r0, pc, r0
   22540:	add	r1, pc, r1
   22544:	add	r3, pc, r3
   22548:	bl	12f04 <__assert_fail@plt>
   2254c:	andeq	r6, r0, r3, lsl r8
   22550:	ldrdeq	r5, [r0], -r6
   22554:	ldrdeq	r6, [r0], -r5

00022558 <flatcc_builder_append_union_vector@@Base>:
   22558:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2255c:	add	fp, sp, #24
   22560:	sub	sp, sp, #8
   22564:	mov	r6, r0
   22568:	ldr	r0, [r0, #32]
   2256c:	mov	r8, r1
   22570:	ldrh	r1, [r0, #14]
   22574:	cmp	r1, #7
   22578:	bne	22668 <flatcc_builder_append_union_vector@@Base+0x110>
   2257c:	ldr	r1, [r0, #20]
   22580:	mov	r5, r2
   22584:	adds	r1, r1, r2
   22588:	cmpcc	r1, #536870912	; 0x20000000
   2258c:	bcc	225b0 <flatcc_builder_append_union_vector@@Base+0x58>
   22590:	ldr	r0, [pc, #252]	; 22694 <flatcc_builder_append_union_vector@@Base+0x13c>
   22594:	ldr	r1, [pc, #252]	; 22698 <flatcc_builder_append_union_vector@@Base+0x140>
   22598:	ldr	r3, [pc, #252]	; 2269c <flatcc_builder_append_union_vector@@Base+0x144>
   2259c:	mov	r2, #892	; 0x37c
   225a0:	add	r0, pc, r0
   225a4:	add	r1, pc, r1
   225a8:	add	r3, pc, r3
   225ac:	bl	12f04 <__assert_fail@plt>
   225b0:	str	r1, [r0, #20]
   225b4:	ldr	r4, [r6, #20]
   225b8:	ldr	r0, [r6, #24]
   225bc:	add	r1, r4, r5, lsl #3
   225c0:	cmp	r1, r0
   225c4:	str	r1, [r6, #20]
   225c8:	bcs	225ec <flatcc_builder_append_union_vector@@Base+0x94>
   225cc:	ldr	r0, [r6, #16]
   225d0:	adds	r7, r0, r4
   225d4:	beq	22658 <flatcc_builder_append_union_vector@@Base+0x100>
   225d8:	lsl	r2, r5, #3
   225dc:	mov	r0, r7
   225e0:	mov	r1, r8
   225e4:	bl	12e2c <memcpy@plt>
   225e8:	b	2265c <flatcc_builder_append_union_vector@@Base+0x104>
   225ec:	ldr	r2, [r6, #28]
   225f0:	ldr	r0, [r6, #40]	; 0x28
   225f4:	ldr	r7, [r6, #48]	; 0x30
   225f8:	mov	r3, #1
   225fc:	str	r3, [sp]
   22600:	mov	r3, #1
   22604:	add	r1, r1, r2
   22608:	add	r2, r1, #1
   2260c:	add	r1, r6, #60	; 0x3c
   22610:	blx	r7
   22614:	mov	r7, #0
   22618:	cmp	r0, #0
   2261c:	bne	2265c <flatcc_builder_append_union_vector@@Base+0x104>
   22620:	ldr	r1, [r6, #28]
   22624:	ldr	r0, [r6, #60]	; 0x3c
   22628:	ldr	r3, [r6, #64]	; 0x40
   2262c:	ldr	r2, [r6, #32]
   22630:	add	r0, r0, r1
   22634:	sub	r1, r3, r1
   22638:	mvn	r3, #3
   2263c:	cmn	r1, #4
   22640:	str	r0, [r6, #16]
   22644:	movcs	r1, r3
   22648:	str	r1, [r6, #24]
   2264c:	str	r3, [r2, #4]
   22650:	adds	r7, r0, r4
   22654:	bne	225d8 <flatcc_builder_append_union_vector@@Base+0x80>
   22658:	mov	r7, #0
   2265c:	mov	r0, r7
   22660:	sub	sp, fp, #24
   22664:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22668:	ldr	r0, [pc, #24]	; 22688 <flatcc_builder_append_union_vector@@Base+0x130>
   2266c:	ldr	r1, [pc, #24]	; 2268c <flatcc_builder_append_union_vector@@Base+0x134>
   22670:	ldr	r3, [pc, #24]	; 22690 <flatcc_builder_append_union_vector@@Base+0x138>
   22674:	movw	r2, #1692	; 0x69c
   22678:	add	r0, pc, r0
   2267c:	add	r1, pc, r1
   22680:	add	r3, pc, r3
   22684:	bl	12f04 <__assert_fail@plt>
   22688:	ldrdeq	r6, [r0], -r7
   2268c:	muleq	r0, sl, sl
   22690:	andeq	r6, r0, r6, lsl #16
   22694:	andeq	r6, r0, ip, lsr ip
   22698:	andeq	r5, r0, r2, ror fp
   2269c:	andeq	r6, r0, pc, asr #24

000226a0 <flatcc_builder_create_string@@Base>:
   226a0:	push	{r4, r5, r6, sl, fp, lr}
   226a4:	add	fp, sp, #16
   226a8:	sub	sp, sp, #80	; 0x50
   226ac:	str	r2, [fp, #-20]	; 0xffffffec
   226b0:	mvn	r5, r2
   226b4:	mov	r6, r0
   226b8:	sub	r3, fp, #20
   226bc:	cmp	r2, #0
   226c0:	add	lr, sp, #4
   226c4:	ldr	ip, [r0, #136]	; 0x88
   226c8:	mov	r0, #4
   226cc:	str	r0, [sp, #16]
   226d0:	str	r3, [sp, #12]
   226d4:	str	r0, [sp, #4]
   226d8:	mov	r3, #1
   226dc:	addne	r0, r2, #4
   226e0:	str	r3, [sp, #8]
   226e4:	strne	r2, [sp, #24]
   226e8:	strne	r1, [sp, #20]
   226ec:	movne	r3, #2
   226f0:	strne	r3, [sp, #8]
   226f4:	strne	r0, [sp, #4]
   226f8:	add	r5, ip, r5
   226fc:	and	r5, r5, #3
   22700:	add	r5, r5, #1
   22704:	add	r1, r0, r5
   22708:	add	r0, lr, r3, lsl #3
   2270c:	str	r1, [sp, #4]
   22710:	cmp	r1, #0
   22714:	ldr	r2, [pc, #132]	; 227a0 <flatcc_builder_create_string@@Base+0x100>
   22718:	ldr	r2, [pc, r2]
   2271c:	str	r2, [r0, #8]
   22720:	add	r2, r3, #1
   22724:	str	r5, [r0, #12]
   22728:	str	r2, [sp, #8]
   2272c:	ble	22780 <flatcc_builder_create_string@@Base+0xe0>
   22730:	ldr	r0, [r6, #36]	; 0x24
   22734:	ldr	r4, [r6, #44]	; 0x2c
   22738:	sub	r5, ip, r1
   2273c:	str	r1, [sp]
   22740:	add	r1, lr, #8
   22744:	mov	r3, r5
   22748:	blx	r4
   2274c:	cmp	r0, #0
   22750:	streq	r5, [r6, #136]	; 0x88
   22754:	moveq	r0, r5
   22758:	subeq	sp, fp, #16
   2275c:	popeq	{r4, r5, r6, sl, fp, pc}
   22760:	ldr	r0, [pc, #72]	; 227b0 <flatcc_builder_create_string@@Base+0x110>
   22764:	ldr	r1, [pc, #72]	; 227b4 <flatcc_builder_create_string@@Base+0x114>
   22768:	ldr	r3, [pc, #72]	; 227b8 <flatcc_builder_create_string@@Base+0x118>
   2276c:	movw	r2, #651	; 0x28b
   22770:	add	r0, pc, r0
   22774:	add	r1, pc, r1
   22778:	add	r3, pc, r3
   2277c:	bl	12f04 <__assert_fail@plt>
   22780:	ldr	r0, [pc, #28]	; 227a4 <flatcc_builder_create_string@@Base+0x104>
   22784:	ldr	r1, [pc, #28]	; 227a8 <flatcc_builder_create_string@@Base+0x108>
   22788:	ldr	r3, [pc, #28]	; 227ac <flatcc_builder_create_string@@Base+0x10c>
   2278c:	movw	r2, #647	; 0x287
   22790:	add	r0, pc, r0
   22794:	add	r1, pc, r1
   22798:	add	r3, pc, r3
   2279c:	bl	12f04 <__assert_fail@plt>
   227a0:	andeq	r7, r1, r4, asr #18
   227a4:	andeq	r6, r0, r3, asr #22
   227a8:	andeq	r5, r0, r2, lsl #19
   227ac:	strdeq	r6, [r0], -sl
   227b0:	andeq	r6, r0, r3, ror #22
   227b4:	andeq	r5, r0, r2, lsr #19
   227b8:	andeq	r6, r0, sl, lsl sl

000227bc <flatcc_builder_create_string_str@@Base>:
   227bc:	push	{r4, r5, fp, lr}
   227c0:	add	fp, sp, #8
   227c4:	mov	r5, r0
   227c8:	mov	r0, r1
   227cc:	mov	r4, r1
   227d0:	bl	12e98 <strlen@plt>
   227d4:	mov	r2, r0
   227d8:	mov	r0, r5
   227dc:	mov	r1, r4
   227e0:	pop	{r4, r5, fp, lr}
   227e4:	b	226a0 <flatcc_builder_create_string@@Base>

000227e8 <flatcc_builder_create_string_strn@@Base>:
   227e8:	push	{r4, r5, r6, sl, fp, lr}
   227ec:	add	fp, sp, #16
   227f0:	mov	r6, r0
   227f4:	mov	r5, r1
   227f8:	mov	r0, r1
   227fc:	mov	r1, #0
   22800:	mov	r4, r2
   22804:	bl	12ed4 <memchr@plt>
   22808:	cmp	r0, #0
   2280c:	mov	r1, r5
   22810:	subne	r4, r0, r5
   22814:	mov	r0, r6
   22818:	mov	r2, r4
   2281c:	pop	{r4, r5, r6, sl, fp, lr}
   22820:	b	226a0 <flatcc_builder_create_string@@Base>

00022824 <flatcc_builder_end_string@@Base>:
   22824:	push	{r4, r5, fp, lr}
   22828:	add	fp, sp, #8
   2282c:	mov	r4, r0
   22830:	ldr	r0, [r0, #32]
   22834:	ldrh	r1, [r0, #14]
   22838:	cmp	r1, #6
   2283c:	bne	228e4 <flatcc_builder_end_string@@Base+0xc0>
   22840:	ldr	r2, [r0, #20]
   22844:	ldr	r0, [r4, #20]
   22848:	cmp	r2, r0
   2284c:	bne	22904 <flatcc_builder_end_string@@Base+0xe0>
   22850:	ldr	r1, [r4, #16]
   22854:	mov	r0, r4
   22858:	bl	226a0 <flatcc_builder_create_string@@Base>
   2285c:	mov	r5, r0
   22860:	cmp	r0, #0
   22864:	beq	228dc <flatcc_builder_end_string@@Base+0xb8>
   22868:	ldr	r0, [r4, #16]
   2286c:	ldr	r2, [r4, #20]
   22870:	mov	r1, #0
   22874:	bl	12ebc <memset@plt>
   22878:	ldr	r0, [r4, #32]
   2287c:	ldr	r1, [r4, #60]	; 0x3c
   22880:	ldr	ip, [r4, #64]	; 0x40
   22884:	ldr	r3, [r0, #8]
   22888:	str	r3, [r4, #20]
   2288c:	ldr	r3, [r0]
   22890:	str	r3, [r4, #28]
   22894:	add	r1, r1, r3
   22898:	ldr	r2, [r0, #4]
   2289c:	str	r1, [r4, #16]
   228a0:	sub	r1, ip, r3
   228a4:	cmp	r1, r2
   228a8:	movhi	r1, r2
   228ac:	str	r1, [r4, #24]
   228b0:	ldrh	r1, [r4, #130]	; 0x82
   228b4:	ldrh	r2, [r4, #128]	; 0x80
   228b8:	cmp	r2, r1
   228bc:	strhcc	r1, [r4, #128]	; 0x80
   228c0:	ldrh	r1, [r0, #12]
   228c4:	sub	r0, r0, #36	; 0x24
   228c8:	str	r0, [r4, #32]
   228cc:	strh	r1, [r4, #130]	; 0x82
   228d0:	ldr	r0, [r4, #156]	; 0x9c
   228d4:	sub	r0, r0, #1
   228d8:	str	r0, [r4, #156]	; 0x9c
   228dc:	mov	r0, r5
   228e0:	pop	{r4, r5, fp, pc}
   228e4:	ldr	r0, [pc, #56]	; 22924 <flatcc_builder_end_string@@Base+0x100>
   228e8:	ldr	r1, [pc, #56]	; 22928 <flatcc_builder_end_string@@Base+0x104>
   228ec:	ldr	r3, [pc, #56]	; 2292c <flatcc_builder_end_string@@Base+0x108>
   228f0:	movw	r2, #1732	; 0x6c4
   228f4:	add	r0, pc, r0
   228f8:	add	r1, pc, r1
   228fc:	add	r3, pc, r3
   22900:	bl	12f04 <__assert_fail@plt>
   22904:	ldr	r0, [pc, #36]	; 22930 <flatcc_builder_end_string@@Base+0x10c>
   22908:	ldr	r1, [pc, #36]	; 22934 <flatcc_builder_end_string@@Base+0x110>
   2290c:	ldr	r3, [pc, #36]	; 22938 <flatcc_builder_end_string@@Base+0x114>
   22910:	movw	r2, #1733	; 0x6c5
   22914:	add	r0, pc, r0
   22918:	add	r1, pc, r1
   2291c:	add	r3, pc, r3
   22920:	bl	12f04 <__assert_fail@plt>
   22924:	andeq	r5, r0, lr, asr sp
   22928:	andeq	r5, r0, lr, lsl r8
   2292c:	andeq	r6, r0, r9, lsl #12
   22930:	andeq	r6, r0, r4, lsr r6
   22934:	strdeq	r5, [r0], -lr
   22938:	andeq	r6, r0, r9, ror #11

0002293c <flatcc_builder_string_edit@@Base>:
   2293c:	ldr	r0, [r0, #16]
   22940:	bx	lr

00022944 <flatcc_builder_string_len@@Base>:
   22944:	ldr	r0, [r0, #32]
   22948:	ldr	r0, [r0, #20]
   2294c:	bx	lr

00022950 <flatcc_builder_table_edit@@Base>:
   22950:	push	{fp, lr}
   22954:	mov	fp, sp
   22958:	ldr	r2, [r0, #32]
   2295c:	ldrh	r2, [r2, #14]
   22960:	cmp	r2, #3
   22964:	ldreq	r2, [r0, #16]
   22968:	ldreq	r0, [r0, #20]
   2296c:	addeq	r0, r2, r0
   22970:	subeq	r0, r0, r1
   22974:	popeq	{fp, pc}
   22978:	ldr	r0, [pc, #24]	; 22998 <flatcc_builder_table_edit@@Base+0x48>
   2297c:	ldr	r1, [pc, #24]	; 2299c <flatcc_builder_table_edit@@Base+0x4c>
   22980:	ldr	r3, [pc, #24]	; 229a0 <flatcc_builder_table_edit@@Base+0x50>
   22984:	movw	r2, #1794	; 0x702
   22988:	add	r0, pc, r0
   2298c:	add	r1, pc, r1
   22990:	add	r3, pc, r3
   22994:	bl	12f04 <__assert_fail@plt>
   22998:			; <UNDEFINED> instruction: 0x00005fba
   2299c:	andeq	r5, r0, sl, lsl #15
   229a0:	andeq	r6, r0, sl, ror #12

000229a4 <flatcc_builder_table_add_copy@@Base>:
   229a4:	push	{r4, r5, r6, sl, fp, lr}
   229a8:	add	fp, sp, #16
   229ac:	mov	r4, r3
   229b0:	ldr	r3, [fp, #8]
   229b4:	mov	r5, r2
   229b8:	mov	r2, r4
   229bc:	bl	21920 <flatcc_builder_table_add@@Base>
   229c0:	mov	r6, r0
   229c4:	cmp	r0, #0
   229c8:	beq	229dc <flatcc_builder_table_add_copy@@Base+0x38>
   229cc:	mov	r0, r6
   229d0:	mov	r1, r5
   229d4:	mov	r2, r4
   229d8:	bl	12e2c <memcpy@plt>
   229dc:	mov	r0, r6
   229e0:	pop	{r4, r5, r6, sl, fp, pc}

000229e4 <flatcc_builder_push_buffer_alignment@@Base>:
   229e4:	ldrh	r1, [r0, #128]	; 0x80
   229e8:	mov	r2, #4
   229ec:	strh	r2, [r0, #128]	; 0x80
   229f0:	mov	r0, r1
   229f4:	bx	lr

000229f8 <flatcc_builder_pop_buffer_alignment@@Base>:
   229f8:	ldrh	r2, [r0, #128]	; 0x80
   229fc:	cmp	r2, r1
   22a00:	strhcc	r1, [r0, #128]	; 0x80
   22a04:	bx	lr

00022a08 <flatcc_builder_get_buffer_alignment@@Base>:
   22a08:	ldrh	r0, [r0, #128]	; 0x80
   22a0c:	bx	lr

00022a10 <flatcc_builder_set_vtable_clustering@@Base>:
   22a10:	clz	r1, r1
   22a14:	lsr	r1, r1, #5
   22a18:	str	r1, [r0, #180]	; 0xb4
   22a1c:	bx	lr

00022a20 <flatcc_builder_set_block_align@@Base>:
   22a20:	strh	r1, [r0, #132]	; 0x84
   22a24:	bx	lr

00022a28 <flatcc_builder_get_level@@Base>:
   22a28:	ldr	r0, [r0, #156]	; 0x9c
   22a2c:	bx	lr

00022a30 <flatcc_builder_set_max_level@@Base>:
   22a30:	str	r1, [r0, #176]	; 0xb0
   22a34:	ldr	r2, [r0, #160]	; 0xa0
   22a38:	cmp	r2, r1
   22a3c:	strlt	r1, [r0, #160]	; 0xa0
   22a40:	bx	lr

00022a44 <flatcc_builder_get_buffer_size@@Base>:
   22a44:	ldr	r1, [r0, #136]	; 0x88
   22a48:	ldr	r0, [r0, #140]	; 0x8c
   22a4c:	sub	r0, r0, r1
   22a50:	bx	lr

00022a54 <flatcc_builder_get_buffer_start@@Base>:
   22a54:	ldr	r0, [r0, #136]	; 0x88
   22a58:	bx	lr

00022a5c <flatcc_builder_get_buffer_end@@Base>:
   22a5c:	ldr	r0, [r0, #140]	; 0x8c
   22a60:	bx	lr

00022a64 <flatcc_builder_set_vtable_cache_limit@@Base>:
   22a64:	str	r1, [r0, #172]	; 0xac
   22a68:	bx	lr

00022a6c <flatcc_builder_set_identifier@@Base>:
   22a6c:	ldr	r2, [pc, #20]	; 22a88 <flatcc_builder_set_identifier@@Base+0x1c>
   22a70:	cmp	r1, #0
   22a74:	ldr	r2, [pc, r2]
   22a78:	movne	r2, r1
   22a7c:	ldr	r1, [r2]
   22a80:	str	r1, [r0, #168]	; 0xa8
   22a84:	bx	lr
   22a88:	andeq	r7, r1, r8, ror #11

00022a8c <flatcc_builder_get_type@@Base>:
   22a8c:	ldr	r0, [r0, #32]
   22a90:	cmp	r0, #0
   22a94:	ldrhne	r0, [r0, #14]
   22a98:	moveq	r0, #0
   22a9c:	bx	lr

00022aa0 <flatcc_builder_get_type_at@@Base>:
   22aa0:	mov	r2, r0
   22aa4:	mov	r0, #0
   22aa8:	cmp	r1, #1
   22aac:	blt	22ad0 <flatcc_builder_get_type_at@@Base+0x30>
   22ab0:	ldr	r3, [r2, #156]	; 0x9c
   22ab4:	cmp	r3, r1
   22ab8:	bxlt	lr
   22abc:	sub	r0, r1, r3
   22ac0:	ldr	r1, [r2, #32]
   22ac4:	add	r0, r0, r0, lsl #3
   22ac8:	add	r0, r1, r0, lsl #2
   22acc:	ldrh	r0, [r0, #14]
   22ad0:	bx	lr

00022ad4 <flatcc_builder_get_direct_buffer@@Base>:
   22ad4:	ldr	r2, [r0, #184]	; 0xb8
   22ad8:	cmp	r2, #0
   22adc:	beq	22af0 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   22ae0:	ldr	r2, [r0, #188]	; 0xbc
   22ae4:	ldr	r3, [r0, #192]	; 0xc0
   22ae8:	cmp	r2, r3
   22aec:	beq	22b08 <flatcc_builder_get_direct_buffer@@Base+0x34>
   22af0:	cmp	r1, #0
   22af4:	moveq	r0, #0
   22af8:	bxeq	lr
   22afc:	mov	r0, #0
   22b00:	str	r0, [r1]
   22b04:	bx	lr
   22b08:	cmp	r1, #0
   22b0c:	ldrne	r2, [r0, #212]	; 0xd4
   22b10:	strne	r2, [r1]
   22b14:	ldr	r0, [r0, #196]	; 0xc4
   22b18:	bx	lr

00022b1c <flatcc_builder_copy_buffer@@Base>:
   22b1c:	push	{fp, lr}
   22b20:	mov	fp, sp
   22b24:	ldr	r3, [r0, #184]	; 0xb8
   22b28:	cmp	r3, #0
   22b2c:	beq	22b60 <flatcc_builder_copy_buffer@@Base+0x44>
   22b30:	add	r0, r0, #188	; 0xbc
   22b34:	bl	2326c <flatcc_emitter_copy_buffer@@Base>
   22b38:	cmp	r0, #0
   22b3c:	popne	{fp, pc}
   22b40:	ldr	r0, [pc, #32]	; 22b68 <flatcc_builder_copy_buffer@@Base+0x4c>
   22b44:	ldr	r1, [pc, #32]	; 22b6c <flatcc_builder_copy_buffer@@Base+0x50>
   22b48:	ldr	r3, [pc, #32]	; 22b70 <flatcc_builder_copy_buffer@@Base+0x54>
   22b4c:	movw	r2, #1926	; 0x786
   22b50:	add	r0, pc, r0
   22b54:	add	r1, pc, r1
   22b58:	add	r3, pc, r3
   22b5c:	bl	12f04 <__assert_fail@plt>
   22b60:	mov	r0, #0
   22b64:	pop	{fp, pc}
   22b68:	andeq	r2, r0, fp, asr #16
   22b6c:	andeq	r5, r0, r2, asr #11
   22b70:	andeq	r6, r0, sp, lsr #10

00022b74 <flatcc_builder_finalize_buffer@@Base>:
   22b74:	push	{r4, r5, r6, sl, fp, lr}
   22b78:	add	fp, sp, #16
   22b7c:	mov	r5, r0
   22b80:	ldr	r0, [r0, #136]	; 0x88
   22b84:	cmp	r1, #0
   22b88:	ldr	r2, [r5, #140]	; 0x8c
   22b8c:	sub	r4, r2, r0
   22b90:	mov	r0, r4
   22b94:	strne	r4, [r1]
   22b98:	bl	12e68 <malloc@plt>
   22b9c:	cmp	r0, #0
   22ba0:	beq	22bf0 <flatcc_builder_finalize_buffer@@Base+0x7c>
   22ba4:	mov	r6, r0
   22ba8:	ldr	r0, [r5, #184]	; 0xb8
   22bac:	cmp	r0, #0
   22bb0:	beq	22c10 <flatcc_builder_finalize_buffer@@Base+0x9c>
   22bb4:	add	r0, r5, #188	; 0xbc
   22bb8:	mov	r1, r6
   22bbc:	mov	r2, r4
   22bc0:	bl	2326c <flatcc_emitter_copy_buffer@@Base>
   22bc4:	cmp	r0, #0
   22bc8:	movne	r0, r6
   22bcc:	popne	{r4, r5, r6, sl, fp, pc}
   22bd0:	ldr	r0, [pc, #88]	; 22c30 <flatcc_builder_finalize_buffer@@Base+0xbc>
   22bd4:	ldr	r1, [pc, #88]	; 22c34 <flatcc_builder_finalize_buffer@@Base+0xc0>
   22bd8:	ldr	r3, [pc, #88]	; 22c38 <flatcc_builder_finalize_buffer@@Base+0xc4>
   22bdc:	movw	r2, #1926	; 0x786
   22be0:	add	r0, pc, r0
   22be4:	add	r1, pc, r1
   22be8:	add	r3, pc, r3
   22bec:	bl	12f04 <__assert_fail@plt>
   22bf0:	ldr	r0, [pc, #80]	; 22c48 <flatcc_builder_finalize_buffer@@Base+0xd4>
   22bf4:	ldr	r1, [pc, #80]	; 22c4c <flatcc_builder_finalize_buffer@@Base+0xd8>
   22bf8:	ldr	r3, [pc, #80]	; 22c50 <flatcc_builder_finalize_buffer@@Base+0xdc>
   22bfc:	movw	r2, #1944	; 0x798
   22c00:	add	r0, pc, r0
   22c04:	add	r1, pc, r1
   22c08:	add	r3, pc, r3
   22c0c:	bl	12f04 <__assert_fail@plt>
   22c10:	ldr	r0, [pc, #36]	; 22c3c <flatcc_builder_finalize_buffer@@Base+0xc8>
   22c14:	ldr	r1, [pc, #36]	; 22c40 <flatcc_builder_finalize_buffer@@Base+0xcc>
   22c18:	ldr	r3, [pc, #36]	; 22c44 <flatcc_builder_finalize_buffer@@Base+0xd0>
   22c1c:	movw	r2, #1948	; 0x79c
   22c20:	add	r0, pc, r0
   22c24:	add	r1, pc, r1
   22c28:	add	r3, pc, r3
   22c2c:	bl	12f04 <__assert_fail@plt>
   22c30:			; <UNDEFINED> instruction: 0x000027bb
   22c34:	andeq	r5, r0, r2, lsr r5
   22c38:	muleq	r0, sp, r4
   22c3c:			; <UNDEFINED> instruction: 0x000066b3
   22c40:	strdeq	r5, [r0], -r2
   22c44:	andeq	r6, r0, r2, lsr #9
   22c48:	ldrdeq	r6, [r0], -r3
   22c4c:	andeq	r5, r0, r2, lsl r5
   22c50:	andeq	r6, r0, r2, asr #9

00022c54 <flatcc_builder_finalize_aligned_buffer@@Base>:
   22c54:	push	{r4, r5, r6, r7, fp, lr}
   22c58:	add	fp, sp, #16
   22c5c:	sub	sp, sp, #8
   22c60:	mov	r5, r0
   22c64:	mov	r4, r1
   22c68:	ldr	r0, [r0, #136]	; 0x88
   22c6c:	ldr	r1, [r5, #140]	; 0x8c
   22c70:	cmp	r4, #0
   22c74:	sub	r0, r1, r0
   22c78:	mov	r1, #0
   22c7c:	strne	r0, [r4]
   22c80:	ldrh	r2, [r5, #128]	; 0x80
   22c84:	str	r1, [sp, #4]
   22c88:	add	r0, r0, r2
   22c8c:	cmp	r2, #4
   22c90:	mov	r1, r2
   22c94:	rsb	r2, r2, #0
   22c98:	sub	r0, r0, #1
   22c9c:	movls	r1, #4
   22ca0:	and	r7, r0, r2
   22ca4:	add	r0, sp, #4
   22ca8:	mov	r2, r7
   22cac:	bl	12eb0 <posix_memalign@plt>
   22cb0:	ldr	r6, [sp, #4]
   22cb4:	cmp	r0, #0
   22cb8:	cmpne	r6, #0
   22cbc:	bne	22d0c <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   22cc0:	cmp	r6, #0
   22cc4:	beq	22d14 <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   22cc8:	ldr	r0, [r5, #184]	; 0xb8
   22ccc:	cmp	r0, #0
   22cd0:	beq	22d0c <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   22cd4:	add	r0, r5, #188	; 0xbc
   22cd8:	mov	r1, r6
   22cdc:	mov	r2, r7
   22ce0:	bl	2326c <flatcc_emitter_copy_buffer@@Base>
   22ce4:	cmp	r0, #0
   22ce8:	bne	22d20 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   22cec:	ldr	r0, [pc, #56]	; 22d2c <flatcc_builder_finalize_aligned_buffer@@Base+0xd8>
   22cf0:	ldr	r1, [pc, #56]	; 22d30 <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   22cf4:	ldr	r3, [pc, #56]	; 22d34 <flatcc_builder_finalize_aligned_buffer@@Base+0xe0>
   22cf8:	movw	r2, #1926	; 0x786
   22cfc:	add	r0, pc, r0
   22d00:	add	r1, pc, r1
   22d04:	add	r3, pc, r3
   22d08:	bl	12f04 <__assert_fail@plt>
   22d0c:	mov	r0, r6
   22d10:	bl	12e20 <free@plt>
   22d14:	mov	r6, #0
   22d18:	cmp	r4, #0
   22d1c:	strne	r6, [r4]
   22d20:	mov	r0, r6
   22d24:	sub	sp, fp, #16
   22d28:	pop	{r4, r5, r6, r7, fp, pc}
   22d2c:	muleq	r0, pc, r6	; <UNPREDICTABLE>
   22d30:	andeq	r5, r0, r6, lsl r4
   22d34:	andeq	r6, r0, r1, lsl #7

00022d38 <flatcc_builder_aligned_alloc@@Base>:
   22d38:	push	{fp, lr}
   22d3c:	mov	fp, sp
   22d40:	sub	sp, sp, #8
   22d44:	mov	r2, r1
   22d48:	mov	r1, r0
   22d4c:	mov	r0, #0
   22d50:	cmp	r1, #4
   22d54:	str	r0, [sp, #4]
   22d58:	add	r0, sp, #4
   22d5c:	movls	r1, #4
   22d60:	bl	12eb0 <posix_memalign@plt>
   22d64:	mov	r1, r0
   22d68:	ldr	r0, [sp, #4]
   22d6c:	cmp	r1, #0
   22d70:	cmpne	r0, #0
   22d74:	bne	22d80 <flatcc_builder_aligned_alloc@@Base+0x48>
   22d78:	mov	sp, fp
   22d7c:	pop	{fp, pc}
   22d80:	bl	12e20 <free@plt>
   22d84:	mov	r0, #0
   22d88:	str	r0, [sp, #4]
   22d8c:	mov	sp, fp
   22d90:	pop	{fp, pc}

00022d94 <flatcc_builder_aligned_free@@Base>:
   22d94:	b	12e20 <free@plt>

00022d98 <flatcc_builder_get_emit_context@@Base>:
   22d98:	ldr	r0, [r0, #36]	; 0x24
   22d9c:	bx	lr

00022da0 <flatcc_emitter_recycle_page@@Base>:
   22da0:	ldr	r3, [r0]
   22da4:	mov	r2, r0
   22da8:	mvn	r0, #0
   22dac:	cmp	r3, r1
   22db0:	beq	22df0 <flatcc_emitter_recycle_page@@Base+0x50>
   22db4:	ldr	r2, [r2, #4]
   22db8:	cmp	r2, r1
   22dbc:	bxeq	lr
   22dc0:	ldr	r0, [r1, #2944]	; 0xb80
   22dc4:	ldr	r2, [r1, #2948]	; 0xb84
   22dc8:	str	r2, [r0, #2948]	; 0xb84
   22dcc:	ldr	r2, [r1, #2948]	; 0xb84
   22dd0:	str	r0, [r2, #2944]	; 0xb80
   22dd4:	ldr	r0, [r3, #2948]	; 0xb84
   22dd8:	str	r3, [r1, #2944]	; 0xb80
   22ddc:	str	r0, [r1, #2948]	; 0xb84
   22de0:	str	r1, [r0, #2944]	; 0xb80
   22de4:	ldr	r0, [r1, #2944]	; 0xb80
   22de8:	str	r1, [r0, #2948]	; 0xb84
   22dec:	mov	r0, #0
   22df0:	bx	lr

00022df4 <flatcc_emitter_reset@@Base>:
   22df4:	push	{r4, sl, fp, lr}
   22df8:	add	fp, sp, #8
   22dfc:	ldr	r1, [r0]
   22e00:	cmp	r1, #0
   22e04:	beq	22ebc <flatcc_emitter_reset@@Base+0xc8>
   22e08:	mov	r4, r0
   22e0c:	add	r2, r1, #1472	; 0x5c0
   22e10:	mov	r0, #1472	; 0x5c0
   22e14:	mov	r3, #0
   22e18:	stmib	r4, {r1, r2}
   22e1c:	str	r0, [r4, #12]
   22e20:	str	r2, [r4, #16]
   22e24:	str	r0, [r4, #20]
   22e28:	movw	r0, #64064	; 0xfa40
   22e2c:	movt	r0, #65535	; 0xffff
   22e30:	str	r0, [r1, #2952]	; 0xb88
   22e34:	ldr	r2, [r4, #32]
   22e38:	ldr	r0, [r4, #24]
   22e3c:	cmp	r2, #0
   22e40:	moveq	r2, r0
   22e44:	streq	r0, [r4, #32]
   22e48:	str	r3, [r4, #24]
   22e4c:	add	r2, r2, r2, lsl #1
   22e50:	lsr	r2, r2, #2
   22e54:	add	r0, r2, r0, lsr #2
   22e58:	str	r0, [r4, #32]
   22e5c:	ldr	r2, [r4, #28]
   22e60:	cmp	r2, r0, lsl #1
   22e64:	bls	22ebc <flatcc_emitter_reset@@Base+0xc8>
   22e68:	mov	r2, r1
   22e6c:	ldr	r0, [r2, #2944]!	; 0xb80
   22e70:	cmp	r0, r1
   22e74:	popeq	{r4, sl, fp, pc}
   22e78:	ldr	r3, [r0, #2944]	; 0xb80
   22e7c:	str	r3, [r2]
   22e80:	ldr	r2, [r0, #2944]	; 0xb80
   22e84:	str	r1, [r2, #2948]	; 0xb84
   22e88:	bl	12e20 <free@plt>
   22e8c:	ldr	r0, [r4, #28]
   22e90:	ldr	r1, [r4, #32]
   22e94:	sub	r0, r0, #2944	; 0xb80
   22e98:	cmp	r0, r1, lsl #1
   22e9c:	str	r0, [r4, #28]
   22ea0:	bls	22ebc <flatcc_emitter_reset@@Base+0xc8>
   22ea4:	ldr	r1, [r4, #4]
   22ea8:	ldr	r3, [r4]
   22eac:	mov	r2, r1
   22eb0:	ldr	r0, [r2, #2944]!	; 0xb80
   22eb4:	cmp	r0, r3
   22eb8:	bne	22e78 <flatcc_emitter_reset@@Base+0x84>
   22ebc:	pop	{r4, sl, fp, pc}

00022ec0 <flatcc_emitter_clear@@Base>:
   22ec0:	push	{r4, r5, r6, sl, fp, lr}
   22ec4:	add	fp, sp, #16
   22ec8:	ldr	r5, [r0]
   22ecc:	cmp	r5, #0
   22ed0:	beq	22f20 <flatcc_emitter_clear@@Base+0x60>
   22ed4:	mov	r4, r0
   22ed8:	ldr	r0, [r5, #2948]	; 0xb84
   22edc:	mov	r6, #0
   22ee0:	str	r6, [r0, #2944]	; 0xb80
   22ee4:	ldr	r0, [r5, #2944]	; 0xb80
   22ee8:	cmp	r0, #0
   22eec:	beq	22f00 <flatcc_emitter_clear@@Base+0x40>
   22ef0:	mov	r5, r0
   22ef4:	ldr	r0, [r0, #2948]	; 0xb84
   22ef8:	bl	12e20 <free@plt>
   22efc:	b	22ee4 <flatcc_emitter_clear@@Base+0x24>
   22f00:	mov	r0, r5
   22f04:	bl	12e20 <free@plt>
   22f08:	vmov.i32	q8, #0	; 0x00000000
   22f0c:	add	r0, r4, #16
   22f10:	vst1.32	{d16-d17}, [r0]
   22f14:	mov	r0, #32
   22f18:	vst1.32	{d16-d17}, [r4], r0
   22f1c:	str	r6, [r4]
   22f20:	pop	{r4, r5, r6, sl, fp, pc}

00022f24 <flatcc_emitter@@Base>:
   22f24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22f28:	add	fp, sp, #28
   22f2c:	sub	sp, sp, #4
   22f30:	mov	r6, r0
   22f34:	mov	r7, r1
   22f38:	ldr	r0, [r0, #24]
   22f3c:	ldr	r1, [fp, #8]
   22f40:	mov	r4, r2
   22f44:	cmn	r3, #1
   22f48:	mov	r9, r6
   22f4c:	add	r0, r0, r1
   22f50:	str	r0, [r6, #24]
   22f54:	ble	230a8 <flatcc_emitter@@Base+0x184>
   22f58:	ldr	r0, [r9, #20]!
   22f5c:	cmp	r0, r1
   22f60:	bcs	23208 <flatcc_emitter@@Base+0x2e4>
   22f64:	mov	r8, #0
   22f68:	cmp	r4, #0
   22f6c:	beq	23260 <flatcc_emitter@@Base+0x33c>
   22f70:	movw	sl, #64064	; 0xfa40
   22f74:	movt	sl, #65535	; 0xffff
   22f78:	ldr	r8, [r7, #4]
   22f7c:	cmp	r8, #0
   22f80:	beq	23094 <flatcc_emitter@@Base+0x170>
   22f84:	ldr	r9, [r7]
   22f88:	b	22fc4 <flatcc_emitter@@Base+0xa0>
   22f8c:	mov	r5, r8
   22f90:	ldr	r0, [r6, #16]
   22f94:	mov	r1, r9
   22f98:	mov	r2, r5
   22f9c:	bl	12e2c <memcpy@plt>
   22fa0:	ldr	r0, [r6, #16]
   22fa4:	ldr	r1, [r6, #20]
   22fa8:	add	r9, r9, r5
   22fac:	subs	r8, r8, r5
   22fb0:	add	r2, r0, r5
   22fb4:	sub	r0, r1, r5
   22fb8:	str	r2, [r6, #16]
   22fbc:	str	r0, [r6, #20]
   22fc0:	beq	23094 <flatcc_emitter@@Base+0x170>
   22fc4:	cmp	r8, r0
   22fc8:	mov	r5, r8
   22fcc:	bls	22f90 <flatcc_emitter@@Base+0x6c>
   22fd0:	mov	r5, r0
   22fd4:	cmp	r5, #0
   22fd8:	beq	23024 <flatcc_emitter@@Base+0x100>
   22fdc:	b	22f90 <flatcc_emitter@@Base+0x6c>
   22fe0:	ldr	r1, [r6]
   22fe4:	str	r1, [r0, #2944]	; 0xb80
   22fe8:	str	r5, [r0, #2948]	; 0xb84
   22fec:	str	r0, [r1, #2948]	; 0xb84
   22ff0:	str	r0, [r5, #2944]	; 0xb80
   22ff4:	mov	r5, #2944	; 0xb80
   22ff8:	str	r0, [r6, #4]
   22ffc:	str	r0, [r6, #16]
   23000:	str	r5, [r6, #20]
   23004:	ldr	r1, [r0, #2948]	; 0xb84
   23008:	ldr	r1, [r1, #2952]	; 0xb88
   2300c:	add	r1, r1, #2944	; 0xb80
   23010:	str	r1, [r0, #2952]	; 0xb88
   23014:	cmp	r8, r5
   23018:	bls	22f8c <flatcc_emitter@@Base+0x68>
   2301c:	cmp	r5, #0
   23020:	bne	22f90 <flatcc_emitter@@Base+0x6c>
   23024:	ldr	r5, [r6, #4]
   23028:	cmp	r5, #0
   2302c:	beq	23040 <flatcc_emitter@@Base+0x11c>
   23030:	ldr	r0, [r5, #2944]	; 0xb80
   23034:	ldr	r1, [r6]
   23038:	cmp	r0, r1
   2303c:	bne	22ff4 <flatcc_emitter@@Base+0xd0>
   23040:	movw	r0, #2956	; 0xb8c
   23044:	bl	12e68 <malloc@plt>
   23048:	cmp	r0, #0
   2304c:	beq	23218 <flatcc_emitter@@Base+0x2f4>
   23050:	ldr	r1, [r6, #28]
   23054:	cmp	r5, #0
   23058:	add	r1, r1, #2944	; 0xb80
   2305c:	str	r1, [r6, #28]
   23060:	bne	22fe0 <flatcc_emitter@@Base+0xbc>
   23064:	add	r1, r0, #1472	; 0x5c0
   23068:	mov	r5, #1472	; 0x5c0
   2306c:	str	r0, [r6]
   23070:	stmib	r6, {r0, r1, r5}
   23074:	str	r1, [r6, #16]
   23078:	str	r5, [r6, #20]
   2307c:	str	r0, [r0, #2944]	; 0xb80
   23080:	str	r0, [r0, #2948]	; 0xb84
   23084:	str	sl, [r0, #2952]	; 0xb88
   23088:	cmp	r8, r5
   2308c:	bhi	2301c <flatcc_emitter@@Base+0xf8>
   23090:	b	22f8c <flatcc_emitter@@Base+0x68>
   23094:	subs	r4, r4, #1
   23098:	add	r7, r7, #8
   2309c:	bne	22f78 <flatcc_emitter@@Base+0x54>
   230a0:	mov	r8, #0
   230a4:	b	23260 <flatcc_emitter@@Base+0x33c>
   230a8:	ldr	r0, [r9, #12]!
   230ac:	cmp	r0, r1
   230b0:	bcs	23220 <flatcc_emitter@@Base+0x2fc>
   230b4:	mov	r8, #0
   230b8:	cmp	r4, #0
   230bc:	beq	23260 <flatcc_emitter@@Base+0x33c>
   230c0:	add	r0, r7, r4, lsl #3
   230c4:	ldr	sl, [r0, #-4]
   230c8:	sub	r1, r0, #8
   230cc:	str	r1, [sp]
   230d0:	cmp	sl, #0
   230d4:	beq	231f8 <flatcc_emitter@@Base+0x2d4>
   230d8:	ldr	r0, [sp]
   230dc:	ldr	r0, [r0]
   230e0:	add	r7, r0, sl
   230e4:	ldr	r1, [r9]
   230e8:	cmp	sl, r1
   230ec:	bhi	2312c <flatcc_emitter@@Base+0x208>
   230f0:	b	231c8 <flatcc_emitter@@Base+0x2a4>
   230f4:	ldr	r1, [r5, #2952]	; 0xb88
   230f8:	sub	r1, r1, #2944	; 0xb80
   230fc:	str	r1, [r0, #2952]	; 0xb88
   23100:	mov	r1, #2944	; 0xb80
   23104:	add	r2, r0, #2944	; 0xb80
   23108:	str	r0, [r6]
   2310c:	str	r2, [r6, #8]
   23110:	str	r1, [r6, #12]
   23114:	ldr	r2, [r0, #2944]	; 0xb80
   23118:	ldr	r2, [r2, #2952]	; 0xb88
   2311c:	sub	r2, r2, #2944	; 0xb80
   23120:	str	r2, [r0, #2952]	; 0xb88
   23124:	cmp	sl, r1
   23128:	bls	231c8 <flatcc_emitter@@Base+0x2a4>
   2312c:	cmp	r1, #0
   23130:	mov	r5, r1
   23134:	bne	231cc <flatcc_emitter@@Base+0x2a8>
   23138:	ldr	r5, [r6]
   2313c:	cmp	r5, #0
   23140:	beq	23154 <flatcc_emitter@@Base+0x230>
   23144:	ldr	r0, [r5, #2948]	; 0xb84
   23148:	ldr	r1, [r6, #4]
   2314c:	cmp	r0, r1
   23150:	bne	230f4 <flatcc_emitter@@Base+0x1d0>
   23154:	movw	r0, #2956	; 0xb8c
   23158:	bl	12e68 <malloc@plt>
   2315c:	cmp	r0, #0
   23160:	beq	23218 <flatcc_emitter@@Base+0x2f4>
   23164:	ldr	r1, [r6, #28]
   23168:	cmp	r5, #0
   2316c:	add	r1, r1, #2944	; 0xb80
   23170:	str	r1, [r6, #28]
   23174:	beq	23190 <flatcc_emitter@@Base+0x26c>
   23178:	ldr	r1, [r6, #4]
   2317c:	str	r5, [r0, #2944]	; 0xb80
   23180:	str	r1, [r0, #2948]	; 0xb84
   23184:	str	r0, [r5, #2948]	; 0xb84
   23188:	str	r0, [r1, #2944]	; 0xb80
   2318c:	b	23100 <flatcc_emitter@@Base+0x1dc>
   23190:	add	r2, r0, #1472	; 0x5c0
   23194:	mov	r1, #1472	; 0x5c0
   23198:	str	r0, [r6]
   2319c:	stmib	r6, {r0, r2}
   231a0:	str	r1, [r6, #12]
   231a4:	str	r2, [r6, #16]
   231a8:	movw	r2, #64064	; 0xfa40
   231ac:	str	r1, [r6, #20]
   231b0:	str	r0, [r0, #2944]	; 0xb80
   231b4:	str	r0, [r0, #2948]	; 0xb84
   231b8:	movt	r2, #65535	; 0xffff
   231bc:	str	r2, [r0, #2952]	; 0xb88
   231c0:	cmp	sl, r1
   231c4:	bhi	2312c <flatcc_emitter@@Base+0x208>
   231c8:	mov	r5, sl
   231cc:	sub	r0, r1, r5
   231d0:	sub	r7, r7, r5
   231d4:	mov	r2, r5
   231d8:	str	r0, [r6, #12]
   231dc:	mov	r1, r7
   231e0:	ldr	r0, [r6, #8]
   231e4:	sub	r0, r0, r5
   231e8:	str	r0, [r6, #8]
   231ec:	bl	12e2c <memcpy@plt>
   231f0:	subs	sl, sl, r5
   231f4:	bne	230e4 <flatcc_emitter@@Base+0x1c0>
   231f8:	ldr	r0, [sp]
   231fc:	subs	r4, r4, #1
   23200:	bne	230c4 <flatcc_emitter@@Base+0x1a0>
   23204:	b	23260 <flatcc_emitter@@Base+0x33c>
   23208:	ldr	r5, [r6, #16]
   2320c:	add	r2, r5, r1
   23210:	str	r2, [r6, #16]
   23214:	b	2322c <flatcc_emitter@@Base+0x308>
   23218:	mvn	r8, #0
   2321c:	b	23260 <flatcc_emitter@@Base+0x33c>
   23220:	ldr	r2, [r6, #8]
   23224:	sub	r5, r2, r1
   23228:	str	r5, [r6, #8]
   2322c:	sub	r0, r0, r1
   23230:	mov	r8, #0
   23234:	cmp	r4, #0
   23238:	str	r0, [r9]
   2323c:	beq	23260 <flatcc_emitter@@Base+0x33c>
   23240:	ldm	r7, {r1, r2}
   23244:	mov	r0, r5
   23248:	bl	12e2c <memcpy@plt>
   2324c:	ldr	r0, [r7, #4]
   23250:	add	r7, r7, #8
   23254:	subs	r4, r4, #1
   23258:	add	r5, r5, r0
   2325c:	bne	23240 <flatcc_emitter@@Base+0x31c>
   23260:	mov	r0, r8
   23264:	sub	sp, fp, #28
   23268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002326c <flatcc_emitter_copy_buffer@@Base>:
   2326c:	push	{r4, r5, r6, sl, fp, lr}
   23270:	add	fp, sp, #16
   23274:	mov	r3, r2
   23278:	ldr	r2, [r0, #24]
   2327c:	mov	r5, #0
   23280:	cmp	r2, r3
   23284:	bhi	2330c <flatcc_emitter_copy_buffer@@Base+0xa0>
   23288:	mov	r4, r0
   2328c:	ldr	r0, [r0]
   23290:	cmp	r0, #0
   23294:	beq	2330c <flatcc_emitter_copy_buffer@@Base+0xa0>
   23298:	mov	r6, r1
   2329c:	ldr	r1, [r4, #4]
   232a0:	cmp	r0, r1
   232a4:	beq	23314 <flatcc_emitter_copy_buffer@@Base+0xa8>
   232a8:	ldr	r0, [r4, #12]
   232ac:	ldr	r1, [r4, #8]
   232b0:	rsb	r5, r0, #2944	; 0xb80
   232b4:	mov	r0, r6
   232b8:	mov	r2, r5
   232bc:	bl	12e2c <memcpy@plt>
   232c0:	ldm	r4, {r0, r1}
   232c4:	add	r5, r6, r5
   232c8:	ldr	r6, [r0, #2944]	; 0xb80
   232cc:	cmp	r6, r1
   232d0:	beq	232f8 <flatcc_emitter_copy_buffer@@Base+0x8c>
   232d4:	mov	r0, r5
   232d8:	mov	r1, r6
   232dc:	mov	r2, #2944	; 0xb80
   232e0:	bl	12e2c <memcpy@plt>
   232e4:	ldr	r6, [r6, #2944]	; 0xb80
   232e8:	ldr	r0, [r4, #4]
   232ec:	add	r5, r5, #2944	; 0xb80
   232f0:	cmp	r6, r0
   232f4:	bne	232d4 <flatcc_emitter_copy_buffer@@Base+0x68>
   232f8:	ldr	r0, [r4, #20]
   232fc:	mov	r1, r6
   23300:	rsb	r2, r0, #2944	; 0xb80
   23304:	mov	r0, r5
   23308:	bl	12e2c <memcpy@plt>
   2330c:	mov	r0, r5
   23310:	pop	{r4, r5, r6, sl, fp, pc}
   23314:	ldr	r1, [r4, #8]
   23318:	mov	r0, r6
   2331c:	bl	12e2c <memcpy@plt>
   23320:	mov	r0, r6
   23324:	pop	{r4, r5, r6, sl, fp, pc}

00023328 <flatcc_verify_error_string@@Base>:
   23328:	cmp	r0, #36	; 0x24
   2332c:	bhi	23340 <flatcc_verify_error_string@@Base+0x18>
   23330:	ldr	r1, [pc, #20]	; 2334c <flatcc_verify_error_string@@Base+0x24>
   23334:	add	r1, pc, r1
   23338:	ldr	r0, [r1, r0, lsl #2]
   2333c:	bx	lr
   23340:	ldr	r0, [pc, #8]	; 23350 <flatcc_verify_error_string@@Base+0x28>
   23344:	add	r0, pc, r0
   23348:	bx	lr
   2334c:	andeq	r6, r1, r0, asr #22
   23350:	andeq	r6, r0, sp, asr #8

00023354 <flatcc_verify_field@@Base>:
   23354:	push	{r4, sl, fp, lr}
   23358:	add	fp, sp, #8
   2335c:	mov	ip, #4
   23360:	ldrh	r4, [r0, #22]
   23364:	mov	lr, #0
   23368:	add	r1, ip, r1, lsl #1
   2336c:	uxth	ip, r1
   23370:	cmp	ip, r4
   23374:	bcs	233d0 <flatcc_verify_field@@Base+0x7c>
   23378:	ldr	r4, [r0, #12]
   2337c:	uxtah	r1, r4, r1
   23380:	ldrh	ip, [r1]
   23384:	cmp	ip, #0
   23388:	beq	233d0 <flatcc_verify_field@@Base+0x7c>
   2338c:	add	r1, ip, r2
   23390:	ldrh	r2, [r0, #20]
   23394:	mov	lr, #13
   23398:	cmp	r1, r2
   2339c:	bhi	233d0 <flatcc_verify_field@@Base+0x7c>
   233a0:	ldr	r1, [r0]
   233a4:	mov	lr, #0
   233a8:	add	r2, r1, ip
   233ac:	ldr	r1, [r0, #16]
   233b0:	add	r4, r2, r1
   233b4:	sub	r1, r3, #1
   233b8:	tst	r4, r1
   233bc:	beq	233d0 <flatcc_verify_field@@Base+0x7c>
   233c0:	ldr	r0, [r0, #16]
   233c4:	add	r0, r2, r0
   233c8:	ands	lr, r0, r1
   233cc:	movwne	lr, #12
   233d0:	mov	r0, lr
   233d4:	pop	{r4, sl, fp, pc}

000233d8 <flatcc_verify_string_field@@Base>:
   233d8:	push	{fp, lr}
   233dc:	mov	fp, sp
   233e0:	mov	lr, r0
   233e4:	mov	r0, #4
   233e8:	add	r0, r0, r1, lsl #1
   233ec:	ldrh	r3, [lr, #22]
   233f0:	uxth	r1, r0
   233f4:	cmp	r1, r3
   233f8:	bcs	2343c <flatcc_verify_string_field@@Base+0x64>
   233fc:	ldr	r1, [lr, #12]
   23400:	uxtah	r0, r1, r0
   23404:	ldrh	r1, [r0]
   23408:	cmp	r1, #0
   2340c:	beq	2343c <flatcc_verify_string_field@@Base+0x64>
   23410:	ldrh	r2, [lr, #20]
   23414:	add	r3, r1, #4
   23418:	mov	r0, #13
   2341c:	cmp	r3, r2
   23420:	bhi	23438 <flatcc_verify_string_field@@Base+0x60>
   23424:	ldr	r0, [lr, #16]
   23428:	add	r2, r0, r1
   2342c:	mov	r0, #12
   23430:	tst	r2, #3
   23434:	beq	2344c <flatcc_verify_string_field@@Base+0x74>
   23438:	pop	{fp, pc}
   2343c:	cmp	r2, #0
   23440:	movwne	r2, #1
   23444:	lsl	r0, r2, #2
   23448:	pop	{fp, pc}
   2344c:	cmp	r2, #0
   23450:	beq	234b0 <flatcc_verify_string_field@@Base+0xd8>
   23454:	ldr	ip, [lr]
   23458:	ldr	r0, [ip, r2]
   2345c:	add	r1, r0, r2
   23460:	mov	r0, #17
   23464:	tst	r1, #3
   23468:	bne	23438 <flatcc_verify_string_field@@Base+0x60>
   2346c:	cmp	r1, r2
   23470:	bls	23438 <flatcc_verify_string_field@@Base+0x60>
   23474:	ldr	r3, [lr, #4]
   23478:	add	r2, r1, #4
   2347c:	cmp	r3, r2
   23480:	bcc	23438 <flatcc_verify_string_field@@Base+0x60>
   23484:	ldr	r1, [ip, r1]
   23488:	sub	lr, r3, r2
   2348c:	mov	r0, #8
   23490:	add	r3, r1, #1
   23494:	cmp	lr, r3
   23498:	popcc	{fp, pc}
   2349c:	add	r0, ip, r2
   234a0:	ldrb	r0, [r0, r1]
   234a4:	cmp	r0, #0
   234a8:	movwne	r0, #7
   234ac:	pop	{fp, pc}
   234b0:	mov	r0, #0
   234b4:	pop	{fp, pc}

000234b8 <flatcc_verify_vector_field@@Base>:
   234b8:	push	{r4, sl, fp, lr}
   234bc:	add	fp, sp, #8
   234c0:	mov	ip, r0
   234c4:	mov	r0, #4
   234c8:	add	r0, r0, r1, lsl #1
   234cc:	ldrh	r4, [ip, #22]
   234d0:	uxth	r1, r0
   234d4:	cmp	r1, r4
   234d8:	bcs	2351c <flatcc_verify_vector_field@@Base+0x64>
   234dc:	ldr	r1, [ip, #12]
   234e0:	uxtah	r0, r1, r0
   234e4:	ldrh	r1, [r0]
   234e8:	cmp	r1, #0
   234ec:	beq	2351c <flatcc_verify_vector_field@@Base+0x64>
   234f0:	ldrh	r2, [ip, #20]
   234f4:	add	r4, r1, #4
   234f8:	mov	r0, #13
   234fc:	cmp	r4, r2
   23500:	bhi	23518 <flatcc_verify_vector_field@@Base+0x60>
   23504:	ldr	r0, [ip, #16]
   23508:	add	r2, r0, r1
   2350c:	mov	r0, #12
   23510:	tst	r2, #3
   23514:	beq	2352c <flatcc_verify_vector_field@@Base+0x74>
   23518:	pop	{r4, sl, fp, pc}
   2351c:	cmp	r2, #0
   23520:	movwne	r2, #1
   23524:	lsl	r0, r2, #2
   23528:	pop	{r4, sl, fp, pc}
   2352c:	cmp	r2, #0
   23530:	beq	235a8 <flatcc_verify_vector_field@@Base+0xf0>
   23534:	ldr	lr, [ip]
   23538:	ldr	r4, [fp, #8]
   2353c:	ldr	r0, [lr, r2]
   23540:	cmp	r4, #4
   23544:	movls	r4, #4
   23548:	add	r1, r0, r2
   2354c:	mov	r0, #16
   23550:	cmp	r1, r2
   23554:	bls	23518 <flatcc_verify_vector_field@@Base+0x60>
   23558:	ldr	ip, [ip, #4]
   2355c:	add	r2, r1, #4
   23560:	cmp	r2, ip
   23564:	bhi	23518 <flatcc_verify_vector_field@@Base+0x60>
   23568:	sub	r4, r4, #1
   2356c:	orr	r4, r4, #3
   23570:	tst	r2, r4
   23574:	bne	23518 <flatcc_verify_vector_field@@Base+0x60>
   23578:	ldr	r4, [fp, #12]
   2357c:	ldr	r2, [lr, r1]
   23580:	mov	r0, #25
   23584:	cmp	r2, r4
   23588:	pophi	{r4, sl, fp, pc}
   2358c:	mul	r2, r2, r3
   23590:	sub	r0, ip, r1
   23594:	sub	r1, r0, #4
   23598:	mov	r0, #0
   2359c:	cmp	r1, r2
   235a0:	movwcc	r0, #26
   235a4:	pop	{r4, sl, fp, pc}
   235a8:	mov	r0, #0
   235ac:	pop	{r4, sl, fp, pc}

000235b0 <flatcc_verify_string_vector_field@@Base>:
   235b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   235b4:	add	fp, sp, #24
   235b8:	mov	r3, r0
   235bc:	mov	r0, #4
   235c0:	add	r0, r0, r1, lsl #1
   235c4:	ldrh	r7, [r3, #22]
   235c8:	uxth	r1, r0
   235cc:	cmp	r1, r7
   235d0:	bcs	23614 <flatcc_verify_string_vector_field@@Base+0x64>
   235d4:	ldr	r1, [r3, #12]
   235d8:	uxtah	r0, r1, r0
   235dc:	ldrh	r1, [r0]
   235e0:	cmp	r1, #0
   235e4:	beq	23614 <flatcc_verify_string_vector_field@@Base+0x64>
   235e8:	ldrh	r2, [r3, #20]
   235ec:	add	r7, r1, #4
   235f0:	mov	r0, #13
   235f4:	cmp	r7, r2
   235f8:	bhi	23610 <flatcc_verify_string_vector_field@@Base+0x60>
   235fc:	ldr	r4, [r3, #16]
   23600:	mov	r0, #12
   23604:	add	r6, r4, r1
   23608:	tst	r6, #3
   2360c:	beq	23624 <flatcc_verify_string_vector_field@@Base+0x74>
   23610:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23614:	cmp	r2, #0
   23618:	movwne	r2, #1
   2361c:	lsl	r0, r2, #2
   23620:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23624:	cmp	r6, #0
   23628:	beq	23720 <flatcc_verify_string_vector_field@@Base+0x170>
   2362c:	ldr	r5, [r3]
   23630:	mov	r0, #16
   23634:	ldr	r7, [r5, r6]
   23638:	add	r2, r7, r6
   2363c:	cmp	r2, r6
   23640:	bls	23610 <flatcc_verify_string_vector_field@@Base+0x60>
   23644:	ldr	ip, [r3, #4]
   23648:	add	r3, r2, #4
   2364c:	cmp	r3, ip
   23650:	bhi	23610 <flatcc_verify_string_vector_field@@Base+0x60>
   23654:	ands	r3, r3, #3
   23658:	bne	23610 <flatcc_verify_string_vector_field@@Base+0x60>
   2365c:	ldr	lr, [r5, r2]
   23660:	mov	r0, #25
   23664:	cmn	lr, #-1073741823	; 0xc0000001
   23668:	bhi	23610 <flatcc_verify_string_vector_field@@Base+0x60>
   2366c:	sub	r0, ip, r2
   23670:	sub	r2, r0, #4
   23674:	mov	r0, #26
   23678:	cmp	r2, lr, lsl #2
   2367c:	bcc	23610 <flatcc_verify_string_vector_field@@Base+0x60>
   23680:	cmp	lr, #0
   23684:	beq	23720 <flatcc_verify_string_vector_field@@Base+0x170>
   23688:	sub	r0, ip, r7
   2368c:	add	r8, r7, r4
   23690:	sub	r0, r0, r4
   23694:	add	r3, r5, r8
   23698:	sub	r0, r0, r1
   2369c:	sub	r4, r0, #8
   236a0:	add	r0, r3, r1
   236a4:	add	r7, r1, r8
   236a8:	ldr	r5, [r0, #4]
   236ac:	mov	r0, #17
   236b0:	add	r6, r7, r5
   236b4:	add	r2, r6, #4
   236b8:	tst	r2, #3
   236bc:	bne	23610 <flatcc_verify_string_vector_field@@Base+0x60>
   236c0:	add	r7, r7, #4
   236c4:	cmp	r2, r7
   236c8:	bls	23610 <flatcc_verify_string_vector_field@@Base+0x60>
   236cc:	add	r2, r6, #8
   236d0:	cmp	ip, r2
   236d4:	bcc	23610 <flatcc_verify_string_vector_field@@Base+0x60>
   236d8:	add	r0, r1, r5
   236dc:	sub	r2, r4, r5
   236e0:	add	r0, r3, r0
   236e4:	ldr	r0, [r0, #4]
   236e8:	add	r6, r0, #1
   236ec:	cmp	r2, r6
   236f0:	bcc	23728 <flatcc_verify_string_vector_field@@Base+0x178>
   236f4:	add	r0, r5, r0
   236f8:	add	r0, r1, r0
   236fc:	add	r0, r3, r0
   23700:	ldrb	r0, [r0, #8]
   23704:	cmp	r0, #0
   23708:	bne	23730 <flatcc_verify_string_vector_field@@Base+0x180>
   2370c:	subs	lr, lr, #1
   23710:	sub	r4, r4, #4
   23714:	add	r8, r8, #4
   23718:	add	r3, r3, #4
   2371c:	bne	236a0 <flatcc_verify_string_vector_field@@Base+0xf0>
   23720:	mov	r0, #0
   23724:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23728:	mov	r0, #8
   2372c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23730:	mov	r0, #7
   23734:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00023738 <flatcc_verify_table_field@@Base>:
   23738:	push	{r4, r5, r6, sl, fp, lr}
   2373c:	add	fp, sp, #16
   23740:	sub	sp, sp, #24
   23744:	mov	ip, r0
   23748:	mov	r0, #4
   2374c:	add	r0, r0, r1, lsl #1
   23750:	ldrh	r6, [ip, #22]
   23754:	uxth	r1, r0
   23758:	cmp	r1, r6
   2375c:	bcs	237a4 <flatcc_verify_table_field@@Base+0x6c>
   23760:	ldr	r1, [ip, #12]
   23764:	uxtah	r0, r1, r0
   23768:	ldrh	r1, [r0]
   2376c:	cmp	r1, #0
   23770:	beq	237a4 <flatcc_verify_table_field@@Base+0x6c>
   23774:	ldrh	r2, [ip, #20]
   23778:	add	r6, r1, #4
   2377c:	mov	r0, #13
   23780:	cmp	r6, r2
   23784:	bhi	2379c <flatcc_verify_table_field@@Base+0x64>
   23788:	ldr	r0, [ip, #16]
   2378c:	add	r4, r0, r1
   23790:	mov	r0, #12
   23794:	tst	r4, #3
   23798:	beq	237b8 <flatcc_verify_table_field@@Base+0x80>
   2379c:	sub	sp, fp, #16
   237a0:	pop	{r4, r5, r6, sl, fp, pc}
   237a4:	cmp	r2, #0
   237a8:	movwne	r2, #1
   237ac:	lsl	r0, r2, #2
   237b0:	sub	sp, fp, #16
   237b4:	pop	{r4, r5, r6, sl, fp, pc}
   237b8:	cmp	r4, #0
   237bc:	beq	23888 <flatcc_verify_table_field@@Base+0x150>
   237c0:	ldm	ip, {r1, lr}
   237c4:	ldr	r2, [ip, #8]
   237c8:	ldr	r0, [r1, r4]
   237cc:	subs	r2, r2, #1
   237d0:	str	r2, [sp, #8]
   237d4:	beq	23894 <flatcc_verify_table_field@@Base+0x15c>
   237d8:	add	r2, r0, r4
   237dc:	mov	r0, #15
   237e0:	tst	r2, #3
   237e4:	bne	2379c <flatcc_verify_table_field@@Base+0x64>
   237e8:	cmp	r2, r4
   237ec:	bls	2379c <flatcc_verify_table_field@@Base+0x64>
   237f0:	add	r6, r2, #4
   237f4:	cmp	r6, lr
   237f8:	bhi	2379c <flatcc_verify_table_field@@Base+0x64>
   237fc:	str	r2, [sp, #16]
   23800:	ldr	r0, [r1, r2]
   23804:	sub	r5, r2, r0
   23808:	mov	r0, #29
   2380c:	tst	r5, #-2147483647	; 0x80000001
   23810:	bne	2379c <flatcc_verify_table_field@@Base+0x64>
   23814:	add	r4, r5, #2
   23818:	mov	r0, #27
   2381c:	cmp	r4, lr
   23820:	bhi	2379c <flatcc_verify_table_field@@Base+0x64>
   23824:	mov	ip, r1
   23828:	mov	r0, #30
   2382c:	ldrh	r6, [ip, r5]!
   23830:	tst	r6, #1
   23834:	strh	r6, [sp, #22]
   23838:	bne	2379c <flatcc_verify_table_field@@Base+0x64>
   2383c:	add	r5, r5, r6
   23840:	cmp	r5, lr
   23844:	bhi	2379c <flatcc_verify_table_field@@Base+0x64>
   23848:	mov	r0, #28
   2384c:	cmp	r6, #4
   23850:	bcc	2379c <flatcc_verify_table_field@@Base+0x64>
   23854:	add	r0, r1, r4
   23858:	sub	r2, lr, r2
   2385c:	ldrh	r4, [r0]
   23860:	mov	r0, #20
   23864:	cmp	r2, r4
   23868:	strh	r4, [sp, #20]
   2386c:	bcc	2379c <flatcc_verify_table_field@@Base+0x64>
   23870:	mov	r0, sp
   23874:	stm	sp, {r1, lr}
   23878:	str	ip, [sp, #12]
   2387c:	blx	r3
   23880:	sub	sp, fp, #16
   23884:	pop	{r4, r5, r6, sl, fp, pc}
   23888:	mov	r0, #0
   2388c:	sub	sp, fp, #16
   23890:	pop	{r4, r5, r6, sl, fp, pc}
   23894:	mov	r0, #3
   23898:	sub	sp, fp, #16
   2389c:	pop	{r4, r5, r6, sl, fp, pc}

000238a0 <flatcc_verify_table_vector_field@@Base>:
   238a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   238a4:	add	fp, sp, #28
   238a8:	sub	sp, sp, #28
   238ac:	mov	r4, r3
   238b0:	mov	r3, r0
   238b4:	mov	r0, #4
   238b8:	add	r0, r0, r1, lsl #1
   238bc:	ldrh	r7, [r3, #22]
   238c0:	uxth	r1, r0
   238c4:	cmp	r1, r7
   238c8:	bcs	23910 <flatcc_verify_table_vector_field@@Base+0x70>
   238cc:	ldr	r1, [r3, #12]
   238d0:	uxtah	r0, r1, r0
   238d4:	ldrh	r1, [r0]
   238d8:	cmp	r1, #0
   238dc:	beq	23910 <flatcc_verify_table_vector_field@@Base+0x70>
   238e0:	ldrh	r2, [r3, #20]
   238e4:	add	r7, r1, #4
   238e8:	mov	r0, #13
   238ec:	cmp	r7, r2
   238f0:	bhi	23908 <flatcc_verify_table_vector_field@@Base+0x68>
   238f4:	ldr	r2, [r3, #16]
   238f8:	mov	r0, #12
   238fc:	add	r6, r2, r1
   23900:	tst	r6, #3
   23904:	beq	23924 <flatcc_verify_table_vector_field@@Base+0x84>
   23908:	sub	sp, fp, #28
   2390c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23910:	cmp	r2, #0
   23914:	movwne	r2, #1
   23918:	lsl	r0, r2, #2
   2391c:	sub	sp, fp, #28
   23920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23924:	cmp	r6, #0
   23928:	beq	23a84 <flatcc_verify_table_vector_field@@Base+0x1e4>
   2392c:	ldr	r7, [r3, #8]
   23930:	cmp	r7, #1
   23934:	blt	23b50 <flatcc_verify_table_vector_field@@Base+0x2b0>
   23938:	ldr	r9, [r3]
   2393c:	mov	r0, #16
   23940:	ldr	ip, [r9, r6]
   23944:	add	r5, ip, r6
   23948:	cmp	r5, r6
   2394c:	bls	23908 <flatcc_verify_table_vector_field@@Base+0x68>
   23950:	ldr	lr, [r3, #4]
   23954:	add	r8, r5, #4
   23958:	cmp	r8, lr
   2395c:	bhi	23908 <flatcc_verify_table_vector_field@@Base+0x68>
   23960:	ands	r3, r8, #3
   23964:	bne	23908 <flatcc_verify_table_vector_field@@Base+0x68>
   23968:	ldr	sl, [r9, r5]
   2396c:	mov	r0, #25
   23970:	cmn	sl, #-1073741823	; 0xc0000001
   23974:	bhi	23908 <flatcc_verify_table_vector_field@@Base+0x68>
   23978:	sub	r0, lr, r5
   2397c:	sub	r3, r0, #4
   23980:	mov	r0, #26
   23984:	cmp	r3, sl, lsl #2
   23988:	bcc	23908 <flatcc_verify_table_vector_field@@Base+0x68>
   2398c:	cmp	sl, #0
   23990:	beq	23a84 <flatcc_verify_table_vector_field@@Base+0x1e4>
   23994:	sub	r0, lr, ip
   23998:	sub	r0, r0, r2
   2399c:	sub	r0, r0, r1
   239a0:	sub	r5, r0, #4
   239a4:	sub	r0, r7, #2
   239a8:	str	r0, [sp]
   239ac:	ldr	r1, [sp]
   239b0:	ldr	r0, [r9, r8]
   239b4:	cmp	r1, #0
   239b8:	str	r1, [sp, #12]
   239bc:	beq	23b48 <flatcc_verify_table_vector_field@@Base+0x2a8>
   239c0:	add	r1, r8, r0
   239c4:	add	ip, r1, #4
   239c8:	tst	r1, #3
   239cc:	bne	23a90 <flatcc_verify_table_vector_field@@Base+0x1f0>
   239d0:	cmp	r1, r8
   239d4:	bls	23a90 <flatcc_verify_table_vector_field@@Base+0x1f0>
   239d8:	cmp	ip, lr
   239dc:	bhi	23a90 <flatcc_verify_table_vector_field@@Base+0x1f0>
   239e0:	str	r1, [sp, #20]
   239e4:	add	r3, r9, r0
   239e8:	ldr	r6, [r3, r8]
   239ec:	sub	r7, r0, r6
   239f0:	add	r3, r8, r7
   239f4:	tst	r3, #-2147483647	; 0x80000001
   239f8:	bne	23a90 <flatcc_verify_table_vector_field@@Base+0x1f0>
   239fc:	add	r2, r3, #2
   23a00:	cmp	r2, lr
   23a04:	bhi	23a90 <flatcc_verify_table_vector_field@@Base+0x1f0>
   23a08:	add	r2, r9, r7
   23a0c:	add	r2, r2, r8
   23a10:	ldrh	r7, [r2]
   23a14:	cmp	r7, #4
   23a18:	strh	r7, [sp, #26]
   23a1c:	bcc	23a90 <flatcc_verify_table_vector_field@@Base+0x1f0>
   23a20:	ands	r2, r7, #1
   23a24:	bne	23a90 <flatcc_verify_table_vector_field@@Base+0x1f0>
   23a28:	add	r2, r0, r7
   23a2c:	sub	r2, r2, r6
   23a30:	add	r2, r8, r2
   23a34:	cmp	r2, lr
   23a38:	bhi	23a90 <flatcc_verify_table_vector_field@@Base+0x1f0>
   23a3c:	add	r3, r9, r3
   23a40:	sub	r0, r5, r0
   23a44:	ldrh	r2, [r3, #2]
   23a48:	cmp	r0, r2
   23a4c:	strh	r2, [sp, #24]
   23a50:	bcc	23a90 <flatcc_verify_table_vector_field@@Base+0x1f0>
   23a54:	add	r0, sp, #4
   23a58:	stmib	sp, {r9, lr}
   23a5c:	mov	r6, lr
   23a60:	str	r3, [sp, #16]
   23a64:	blx	r4
   23a68:	cmp	r0, #0
   23a6c:	bne	23b5c <flatcc_verify_table_vector_field@@Base+0x2bc>
   23a70:	subs	sl, sl, #1
   23a74:	sub	r5, r5, #4
   23a78:	add	r8, r8, #4
   23a7c:	mov	lr, r6
   23a80:	bne	239ac <flatcc_verify_table_vector_field@@Base+0x10c>
   23a84:	mov	r0, #0
   23a88:	sub	sp, fp, #28
   23a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23a90:	ldr	r0, [sp]
   23a94:	str	r0, [sp, #12]
   23a98:	mov	r0, #15
   23a9c:	tst	r1, #3
   23aa0:	bne	23908 <flatcc_verify_table_vector_field@@Base+0x68>
   23aa4:	cmp	r1, r8
   23aa8:	bls	23908 <flatcc_verify_table_vector_field@@Base+0x68>
   23aac:	cmp	ip, lr
   23ab0:	bhi	23908 <flatcc_verify_table_vector_field@@Base+0x68>
   23ab4:	str	r1, [sp, #20]
   23ab8:	ldr	r0, [r9, r1]
   23abc:	sub	r7, r1, r0
   23ac0:	mov	r0, #29
   23ac4:	tst	r7, #-2147483647	; 0x80000001
   23ac8:	bne	23908 <flatcc_verify_table_vector_field@@Base+0x68>
   23acc:	add	r3, r7, #2
   23ad0:	mov	r0, #27
   23ad4:	cmp	r3, lr
   23ad8:	bhi	23908 <flatcc_verify_table_vector_field@@Base+0x68>
   23adc:	mov	r2, r9
   23ae0:	mov	r0, #30
   23ae4:	ldrh	r6, [r2, r7]!
   23ae8:	tst	r6, #1
   23aec:	strh	r6, [sp, #26]
   23af0:	bne	23908 <flatcc_verify_table_vector_field@@Base+0x68>
   23af4:	add	r7, r7, r6
   23af8:	cmp	r7, lr
   23afc:	bhi	23908 <flatcc_verify_table_vector_field@@Base+0x68>
   23b00:	mov	r0, #28
   23b04:	cmp	r6, #4
   23b08:	bcc	23908 <flatcc_verify_table_vector_field@@Base+0x68>
   23b0c:	add	r0, r9, r3
   23b10:	sub	r1, lr, r1
   23b14:	mov	r5, lr
   23b18:	ldrh	r3, [r0]
   23b1c:	mov	r0, #20
   23b20:	cmp	r1, r3
   23b24:	strh	r3, [sp, #24]
   23b28:	bcc	23908 <flatcc_verify_table_vector_field@@Base+0x68>
   23b2c:	add	r0, sp, #4
   23b30:	str	r5, [sp, #8]
   23b34:	str	r9, [sp, #4]
   23b38:	str	r2, [sp, #16]
   23b3c:	blx	r4
   23b40:	sub	sp, fp, #28
   23b44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23b48:	mov	r0, #0
   23b4c:	str	r0, [sp, #12]
   23b50:	mov	r0, #3
   23b54:	sub	sp, fp, #28
   23b58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23b5c:	ldr	r0, [r9, r8]
   23b60:	ldr	r1, [sp]
   23b64:	mov	lr, r6
   23b68:	str	r1, [sp, #12]
   23b6c:	add	r1, r0, r8
   23b70:	add	ip, r1, #4
   23b74:	b	23a98 <flatcc_verify_table_vector_field@@Base+0x1f8>

00023b78 <flatcc_verify_union_table@@Base>:
   23b78:	push	{r4, r5, r6, sl, fp, lr}
   23b7c:	add	fp, sp, #16
   23b80:	sub	sp, sp, #24
   23b84:	ldr	r5, [r0, #16]
   23b88:	ldr	r2, [r0, #20]
   23b8c:	ldr	ip, [r0]
   23b90:	ldr	r3, [r0, #4]
   23b94:	ldr	r0, [r0, #8]
   23b98:	subs	r0, r0, #1
   23b9c:	str	r0, [sp, #8]
   23ba0:	beq	23c58 <flatcc_verify_union_table@@Base+0xe0>
   23ba4:	add	r2, r2, r5
   23ba8:	mov	r0, #15
   23bac:	tst	r2, #3
   23bb0:	bne	23c50 <flatcc_verify_union_table@@Base+0xd8>
   23bb4:	cmp	r2, r5
   23bb8:	bls	23c50 <flatcc_verify_union_table@@Base+0xd8>
   23bbc:	add	r6, r2, #4
   23bc0:	cmp	r6, r3
   23bc4:	bhi	23c50 <flatcc_verify_union_table@@Base+0xd8>
   23bc8:	str	r2, [sp, #16]
   23bcc:	ldr	r0, [ip, r2]
   23bd0:	sub	r5, r2, r0
   23bd4:	mov	r0, #29
   23bd8:	tst	r5, #-2147483647	; 0x80000001
   23bdc:	bne	23c50 <flatcc_verify_union_table@@Base+0xd8>
   23be0:	add	r4, r5, #2
   23be4:	mov	r0, #27
   23be8:	cmp	r4, r3
   23bec:	bhi	23c50 <flatcc_verify_union_table@@Base+0xd8>
   23bf0:	mov	lr, ip
   23bf4:	mov	r0, #30
   23bf8:	ldrh	r6, [lr, r5]!
   23bfc:	tst	r6, #1
   23c00:	strh	r6, [sp, #22]
   23c04:	bne	23c50 <flatcc_verify_union_table@@Base+0xd8>
   23c08:	add	r5, r5, r6
   23c0c:	cmp	r5, r3
   23c10:	bhi	23c50 <flatcc_verify_union_table@@Base+0xd8>
   23c14:	mov	r0, #28
   23c18:	cmp	r6, #4
   23c1c:	bcc	23c50 <flatcc_verify_union_table@@Base+0xd8>
   23c20:	add	r0, ip, r4
   23c24:	sub	r2, r3, r2
   23c28:	ldrh	r4, [r0]
   23c2c:	mov	r0, #20
   23c30:	cmp	r2, r4
   23c34:	strh	r4, [sp, #20]
   23c38:	bcc	23c50 <flatcc_verify_union_table@@Base+0xd8>
   23c3c:	mov	r0, sp
   23c40:	str	r3, [sp, #4]
   23c44:	str	ip, [sp]
   23c48:	str	lr, [sp, #12]
   23c4c:	blx	r1
   23c50:	sub	sp, fp, #16
   23c54:	pop	{r4, r5, r6, sl, fp, pc}
   23c58:	mov	r0, #3
   23c5c:	sub	sp, fp, #16
   23c60:	pop	{r4, r5, r6, sl, fp, pc}

00023c64 <flatcc_verify_union_struct@@Base>:
   23c64:	push	{fp, lr}
   23c68:	mov	fp, sp
   23c6c:	ldr	lr, [r0, #20]
   23c70:	mov	r3, r0
   23c74:	mov	r0, #18
   23c78:	cmp	lr, #0
   23c7c:	beq	23cb8 <flatcc_verify_union_struct@@Base+0x54>
   23c80:	ldr	ip, [r3, #4]
   23c84:	ldr	r3, [r3, #16]
   23c88:	add	r3, r3, lr
   23c8c:	cmp	r3, ip
   23c90:	bhi	23cb8 <flatcc_verify_union_struct@@Base+0x54>
   23c94:	adds	r1, r3, r1
   23c98:	mov	r0, #10
   23c9c:	bcs	23cb8 <flatcc_verify_union_struct@@Base+0x54>
   23ca0:	mov	r0, #9
   23ca4:	cmp	r1, ip
   23ca8:	pophi	{fp, pc}
   23cac:	sub	r0, r2, #1
   23cb0:	ands	r0, r3, r0
   23cb4:	movwne	r0, #11
   23cb8:	pop	{fp, pc}

00023cbc <flatcc_verify_union_string@@Base>:
   23cbc:	push	{fp, lr}
   23cc0:	mov	fp, sp
   23cc4:	mov	r1, r0
   23cc8:	ldr	r3, [r0, #16]
   23ccc:	ldr	r0, [r0, #20]
   23cd0:	add	r2, r0, r3
   23cd4:	mov	r0, #17
   23cd8:	tst	r2, #3
   23cdc:	bne	23d24 <flatcc_verify_union_string@@Base+0x68>
   23ce0:	cmp	r2, r3
   23ce4:	bls	23d24 <flatcc_verify_union_string@@Base+0x68>
   23ce8:	ldr	r3, [r1, #4]
   23cec:	add	ip, r2, #4
   23cf0:	cmp	r3, ip
   23cf4:	bcc	23d24 <flatcc_verify_union_string@@Base+0x68>
   23cf8:	ldr	r1, [r1]
   23cfc:	sub	lr, r3, ip
   23d00:	mov	r0, #8
   23d04:	ldr	r2, [r1, r2]
   23d08:	add	r3, r2, #1
   23d0c:	cmp	lr, r3
   23d10:	popcc	{fp, pc}
   23d14:	add	r0, r1, ip
   23d18:	ldrb	r0, [r0, r2]
   23d1c:	cmp	r0, #0
   23d20:	movwne	r0, #7
   23d24:	pop	{fp, pc}

00023d28 <flatcc_verify_buffer_header@@Base>:
   23d28:	push	{r4, sl, fp, lr}
   23d2c:	add	fp, sp, #8
   23d30:	sub	sp, sp, #8
   23d34:	mov	r4, r0
   23d38:	mov	r0, #5
   23d3c:	tst	r4, #3
   23d40:	bne	23d94 <flatcc_verify_buffer_header@@Base+0x6c>
   23d44:	mov	r0, #6
   23d48:	cmn	r1, #9
   23d4c:	bhi	23d94 <flatcc_verify_buffer_header@@Base+0x6c>
   23d50:	mov	r0, #1
   23d54:	cmp	r1, #8
   23d58:	bcc	23d94 <flatcc_verify_buffer_header@@Base+0x6c>
   23d5c:	cmp	r2, #0
   23d60:	beq	23d9c <flatcc_verify_buffer_header@@Base+0x74>
   23d64:	mov	r0, #0
   23d68:	mov	r1, r2
   23d6c:	mov	r2, #4
   23d70:	str	r0, [sp, #4]
   23d74:	add	r0, sp, #4
   23d78:	bl	12ec8 <strncpy@plt>
   23d7c:	ldr	r1, [sp, #4]
   23d80:	cmp	r1, #0
   23d84:	ldrne	r2, [r4, #4]
   23d88:	movne	r0, #2
   23d8c:	cmpne	r2, r1
   23d90:	moveq	r0, #0
   23d94:	sub	sp, fp, #8
   23d98:	pop	{r4, sl, fp, pc}
   23d9c:	mov	r0, #0
   23da0:	sub	sp, fp, #8
   23da4:	pop	{r4, sl, fp, pc}

00023da8 <flatcc_verify_typed_buffer_header@@Base>:
   23da8:	mov	r3, r0
   23dac:	mov	r0, #5
   23db0:	tst	r3, #3
   23db4:	bne	23de8 <flatcc_verify_typed_buffer_header@@Base+0x40>
   23db8:	mov	r0, #6
   23dbc:	cmn	r1, #9
   23dc0:	bhi	23de8 <flatcc_verify_typed_buffer_header@@Base+0x40>
   23dc4:	mov	r0, #1
   23dc8:	cmp	r1, #8
   23dcc:	bxcc	lr
   23dd0:	cmp	r2, #0
   23dd4:	beq	23dec <flatcc_verify_typed_buffer_header@@Base+0x44>
   23dd8:	ldr	r1, [r3, #4]
   23ddc:	mov	r0, #2
   23de0:	cmp	r1, r2
   23de4:	moveq	r0, #0
   23de8:	bx	lr
   23dec:	mov	r0, #0
   23df0:	bx	lr

00023df4 <flatcc_verify_struct_as_root@@Base>:
   23df4:	push	{r4, r5, r6, r7, fp, lr}
   23df8:	add	fp, sp, #16
   23dfc:	sub	sp, sp, #8
   23e00:	mov	r5, r0
   23e04:	mov	r0, #5
   23e08:	tst	r5, #3
   23e0c:	bne	23ea4 <flatcc_verify_struct_as_root@@Base+0xb0>
   23e10:	mov	r4, r1
   23e14:	mov	r0, #6
   23e18:	cmn	r1, #9
   23e1c:	bhi	23ea4 <flatcc_verify_struct_as_root@@Base+0xb0>
   23e20:	mov	r0, #1
   23e24:	cmp	r4, #8
   23e28:	bcc	23ea4 <flatcc_verify_struct_as_root@@Base+0xb0>
   23e2c:	mov	r6, r3
   23e30:	mov	r7, r2
   23e34:	cmp	r2, #0
   23e38:	beq	23e68 <flatcc_verify_struct_as_root@@Base+0x74>
   23e3c:	mov	r0, #0
   23e40:	mov	r1, r7
   23e44:	mov	r2, #4
   23e48:	str	r0, [sp]
   23e4c:	mov	r0, sp
   23e50:	bl	12ec8 <strncpy@plt>
   23e54:	ldr	r0, [sp]
   23e58:	cmp	r0, #0
   23e5c:	ldrne	r1, [r5, #4]
   23e60:	cmpne	r1, r0
   23e64:	bne	23eac <flatcc_verify_struct_as_root@@Base+0xb8>
   23e68:	ldr	r1, [r5]
   23e6c:	mov	r0, #18
   23e70:	sub	r2, r1, #1
   23e74:	cmp	r2, r4
   23e78:	bcs	23ea4 <flatcc_verify_struct_as_root@@Base+0xb0>
   23e7c:	adds	r2, r1, r6
   23e80:	mov	r0, #10
   23e84:	bcs	23ea4 <flatcc_verify_struct_as_root@@Base+0xb0>
   23e88:	mov	r0, #9
   23e8c:	cmp	r2, r4
   23e90:	bhi	23ea4 <flatcc_verify_struct_as_root@@Base+0xb0>
   23e94:	ldr	r0, [fp, #8]
   23e98:	sub	r0, r0, #1
   23e9c:	ands	r0, r1, r0
   23ea0:	movwne	r0, #11
   23ea4:	sub	sp, fp, #16
   23ea8:	pop	{r4, r5, r6, r7, fp, pc}
   23eac:	mov	r0, #0
   23eb0:	mov	r1, r7
   23eb4:	mov	r2, #4
   23eb8:	str	r0, [sp, #4]
   23ebc:	add	r0, sp, #4
   23ec0:	bl	12ec8 <strncpy@plt>
   23ec4:	ldr	r0, [sp, #4]
   23ec8:	ldr	r1, [r5, #4]
   23ecc:	subs	r1, r1, r0
   23ed0:	movwne	r1, #1
   23ed4:	cmp	r0, #0
   23ed8:	lslne	r0, r1, #1
   23edc:	sub	sp, fp, #16
   23ee0:	pop	{r4, r5, r6, r7, fp, pc}

00023ee4 <flatcc_verify_struct_as_typed_root@@Base>:
   23ee4:	push	{fp, lr}
   23ee8:	mov	fp, sp
   23eec:	mov	ip, r0
   23ef0:	mov	r0, #5
   23ef4:	tst	ip, #3
   23ef8:	bne	23f68 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   23efc:	mov	r0, #6
   23f00:	cmn	r1, #9
   23f04:	bhi	23f68 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   23f08:	mov	r0, #1
   23f0c:	cmp	r1, #8
   23f10:	bcc	23f68 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   23f14:	cmp	r2, #0
   23f18:	beq	23f2c <flatcc_verify_struct_as_typed_root@@Base+0x48>
   23f1c:	ldr	lr, [ip, #4]
   23f20:	mov	r0, #2
   23f24:	cmp	lr, r2
   23f28:	bne	23f68 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   23f2c:	ldr	ip, [ip]
   23f30:	mov	r0, #18
   23f34:	sub	r2, ip, #1
   23f38:	cmp	r2, r1
   23f3c:	bcs	23f68 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   23f40:	adds	r3, ip, r3
   23f44:	mov	r0, #10
   23f48:	bcs	23f68 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   23f4c:	mov	r0, #9
   23f50:	cmp	r3, r1
   23f54:	pophi	{fp, pc}
   23f58:	ldr	r0, [fp, #8]
   23f5c:	sub	r0, r0, #1
   23f60:	ands	r0, ip, r0
   23f64:	movwne	r0, #11
   23f68:	pop	{fp, pc}

00023f6c <flatcc_verify_table_as_root@@Base>:
   23f6c:	push	{r4, r5, r6, r7, fp, lr}
   23f70:	add	fp, sp, #16
   23f74:	sub	sp, sp, #24
   23f78:	mov	r4, r0
   23f7c:	mov	r0, #5
   23f80:	tst	r4, #3
   23f84:	bne	24090 <flatcc_verify_table_as_root@@Base+0x124>
   23f88:	mov	r6, r1
   23f8c:	mov	r0, #6
   23f90:	cmn	r1, #9
   23f94:	bhi	24090 <flatcc_verify_table_as_root@@Base+0x124>
   23f98:	mov	r0, #1
   23f9c:	cmp	r6, #8
   23fa0:	bcc	24090 <flatcc_verify_table_as_root@@Base+0x124>
   23fa4:	mov	r5, r3
   23fa8:	mov	r7, r2
   23fac:	cmp	r2, #0
   23fb0:	beq	23fe0 <flatcc_verify_table_as_root@@Base+0x74>
   23fb4:	mov	r0, #0
   23fb8:	mov	r1, r7
   23fbc:	mov	r2, #4
   23fc0:	str	r0, [sp]
   23fc4:	mov	r0, sp
   23fc8:	bl	12ec8 <strncpy@plt>
   23fcc:	ldr	r0, [sp]
   23fd0:	cmp	r0, #0
   23fd4:	ldrne	r1, [r4, #4]
   23fd8:	cmpne	r1, r0
   23fdc:	bne	24098 <flatcc_verify_table_as_root@@Base+0x12c>
   23fe0:	ldr	r1, [r4]
   23fe4:	mov	r0, #99	; 0x63
   23fe8:	str	r0, [sp, #8]
   23fec:	mov	r0, #15
   23ff0:	tst	r1, #3
   23ff4:	bne	24090 <flatcc_verify_table_as_root@@Base+0x124>
   23ff8:	cmp	r1, #0
   23ffc:	beq	24090 <flatcc_verify_table_as_root@@Base+0x124>
   24000:	add	r2, r1, #4
   24004:	cmp	r2, r6
   24008:	bhi	24090 <flatcc_verify_table_as_root@@Base+0x124>
   2400c:	str	r1, [sp, #16]
   24010:	ldr	r0, [r4, r1]
   24014:	sub	r7, r1, r0
   24018:	mov	r0, #29
   2401c:	tst	r7, #-2147483647	; 0x80000001
   24020:	bne	24090 <flatcc_verify_table_as_root@@Base+0x124>
   24024:	add	r3, r7, #2
   24028:	mov	r0, #27
   2402c:	cmp	r3, r6
   24030:	bhi	24090 <flatcc_verify_table_as_root@@Base+0x124>
   24034:	mov	ip, r4
   24038:	mov	r0, #30
   2403c:	ldrh	r2, [ip, r7]!
   24040:	tst	r2, #1
   24044:	strh	r2, [sp, #22]
   24048:	bne	24090 <flatcc_verify_table_as_root@@Base+0x124>
   2404c:	add	r7, r7, r2
   24050:	cmp	r7, r6
   24054:	bhi	24090 <flatcc_verify_table_as_root@@Base+0x124>
   24058:	mov	r0, #28
   2405c:	cmp	r2, #4
   24060:	bcc	24090 <flatcc_verify_table_as_root@@Base+0x124>
   24064:	add	r0, r4, r3
   24068:	sub	r1, r6, r1
   2406c:	ldrh	r2, [r0]
   24070:	mov	r0, #20
   24074:	cmp	r1, r2
   24078:	strh	r2, [sp, #20]
   2407c:	bcc	24090 <flatcc_verify_table_as_root@@Base+0x124>
   24080:	mov	r0, sp
   24084:	stm	sp, {r4, r6}
   24088:	str	ip, [sp, #12]
   2408c:	blx	r5
   24090:	sub	sp, fp, #16
   24094:	pop	{r4, r5, r6, r7, fp, pc}
   24098:	mov	r0, #0
   2409c:	mov	r1, r7
   240a0:	mov	r2, #4
   240a4:	str	r0, [sp]
   240a8:	mov	r0, sp
   240ac:	bl	12ec8 <strncpy@plt>
   240b0:	ldr	r0, [sp]
   240b4:	ldr	r1, [r4, #4]
   240b8:	subs	r1, r1, r0
   240bc:	movwne	r1, #1
   240c0:	cmp	r0, #0
   240c4:	lslne	r0, r1, #1
   240c8:	sub	sp, fp, #16
   240cc:	pop	{r4, r5, r6, r7, fp, pc}

000240d0 <flatcc_verify_table_as_typed_root@@Base>:
   240d0:	push	{r4, r5, r6, sl, fp, lr}
   240d4:	add	fp, sp, #16
   240d8:	sub	sp, sp, #24
   240dc:	mov	ip, #5
   240e0:	tst	r0, #3
   240e4:	bne	241cc <flatcc_verify_table_as_typed_root@@Base+0xfc>
   240e8:	mov	ip, #6
   240ec:	cmn	r1, #9
   240f0:	bhi	241cc <flatcc_verify_table_as_typed_root@@Base+0xfc>
   240f4:	mov	ip, #1
   240f8:	cmp	r1, #8
   240fc:	bcc	241cc <flatcc_verify_table_as_typed_root@@Base+0xfc>
   24100:	cmp	r2, #0
   24104:	beq	24118 <flatcc_verify_table_as_typed_root@@Base+0x48>
   24108:	ldr	r6, [r0, #4]
   2410c:	mov	ip, #2
   24110:	cmp	r6, r2
   24114:	bne	241cc <flatcc_verify_table_as_typed_root@@Base+0xfc>
   24118:	ldr	r2, [r0]
   2411c:	mov	r6, #99	; 0x63
   24120:	mov	ip, #15
   24124:	str	r6, [sp, #8]
   24128:	tst	r2, #3
   2412c:	bne	241cc <flatcc_verify_table_as_typed_root@@Base+0xfc>
   24130:	cmp	r2, #0
   24134:	beq	241cc <flatcc_verify_table_as_typed_root@@Base+0xfc>
   24138:	add	r6, r2, #4
   2413c:	cmp	r6, r1
   24140:	bhi	241cc <flatcc_verify_table_as_typed_root@@Base+0xfc>
   24144:	str	r2, [sp, #16]
   24148:	mov	ip, #29
   2414c:	ldr	r6, [r0, r2]
   24150:	sub	r5, r2, r6
   24154:	tst	r5, #-2147483647	; 0x80000001
   24158:	bne	241cc <flatcc_verify_table_as_typed_root@@Base+0xfc>
   2415c:	add	r4, r5, #2
   24160:	mov	ip, #27
   24164:	cmp	r4, r1
   24168:	bhi	241cc <flatcc_verify_table_as_typed_root@@Base+0xfc>
   2416c:	mov	lr, r0
   24170:	mov	ip, #30
   24174:	ldrh	r6, [lr, r5]!
   24178:	tst	r6, #1
   2417c:	strh	r6, [sp, #22]
   24180:	bne	241cc <flatcc_verify_table_as_typed_root@@Base+0xfc>
   24184:	add	r5, r5, r6
   24188:	cmp	r5, r1
   2418c:	bhi	241cc <flatcc_verify_table_as_typed_root@@Base+0xfc>
   24190:	mov	ip, #28
   24194:	cmp	r6, #4
   24198:	bcc	241cc <flatcc_verify_table_as_typed_root@@Base+0xfc>
   2419c:	add	r6, r0, r4
   241a0:	sub	r2, r1, r2
   241a4:	mov	ip, #20
   241a8:	ldrh	r4, [r6]
   241ac:	cmp	r2, r4
   241b0:	strh	r4, [sp, #20]
   241b4:	bcc	241cc <flatcc_verify_table_as_typed_root@@Base+0xfc>
   241b8:	stm	sp, {r0, r1}
   241bc:	mov	r0, sp
   241c0:	str	lr, [sp, #12]
   241c4:	blx	r3
   241c8:	mov	ip, r0
   241cc:	mov	r0, ip
   241d0:	sub	sp, fp, #16
   241d4:	pop	{r4, r5, r6, sl, fp, pc}

000241d8 <flatcc_verify_struct_as_nested_root@@Base>:
   241d8:	push	{r4, r5, r6, r7, fp, lr}
   241dc:	add	fp, sp, #16
   241e0:	sub	sp, sp, #8
   241e4:	mov	r7, #4
   241e8:	ldrh	r4, [r0, #22]
   241ec:	ldr	lr, [fp, #12]
   241f0:	add	r5, r7, r1, lsl #1
   241f4:	uxth	ip, r5
   241f8:	cmp	ip, r4
   241fc:	bcs	24284 <flatcc_verify_struct_as_nested_root@@Base+0xac>
   24200:	ldr	r1, [r0, #12]
   24204:	uxtah	r5, r1, r5
   24208:	ldrh	r5, [r5]
   2420c:	cmp	r5, #0
   24210:	beq	24284 <flatcc_verify_struct_as_nested_root@@Base+0xac>
   24214:	ldrh	r4, [r0, #20]
   24218:	add	r6, r5, #4
   2421c:	cmp	r6, r4
   24220:	bhi	24298 <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   24224:	ldr	r4, [r0, #16]
   24228:	add	r6, r4, r5
   2422c:	tst	r6, #3
   24230:	bne	24298 <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   24234:	cmp	r6, #0
   24238:	beq	24348 <flatcc_verify_struct_as_nested_root@@Base+0x170>
   2423c:	ldr	r4, [r0]
   24240:	ldr	r5, [r4, r6]
   24244:	add	r5, r5, r6
   24248:	cmp	r5, r6
   2424c:	bls	24298 <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   24250:	ldr	r6, [r0, #4]
   24254:	add	r7, r5, #4
   24258:	cmp	r7, r6
   2425c:	bhi	24298 <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   24260:	ands	r7, r7, #3
   24264:	bne	24298 <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   24268:	ldr	r4, [r4, r5]
   2426c:	sub	r5, r6, r5
   24270:	sub	r5, r5, #4
   24274:	mul	r4, r4, lr
   24278:	cmp	r5, r4
   2427c:	bcc	24298 <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   24280:	b	24348 <flatcc_verify_struct_as_nested_root@@Base+0x170>
   24284:	cmp	r2, #0
   24288:	beq	24338 <flatcc_verify_struct_as_nested_root@@Base+0x160>
   2428c:	cmp	ip, r4
   24290:	bcs	24328 <flatcc_verify_struct_as_nested_root@@Base+0x150>
   24294:	ldr	r1, [r0, #12]
   24298:	add	r1, r1, ip
   2429c:	ldrh	r3, [r1]
   242a0:	cmp	r3, #0
   242a4:	beq	24328 <flatcc_verify_struct_as_nested_root@@Base+0x150>
   242a8:	ldrh	r2, [r0, #20]
   242ac:	add	r7, r3, #4
   242b0:	mov	r1, #13
   242b4:	cmp	r7, r2
   242b8:	bhi	2439c <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   242bc:	ldr	r1, [r0, #16]
   242c0:	add	r5, r1, r3
   242c4:	mov	r1, #12
   242c8:	tst	r5, #3
   242cc:	bne	2439c <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   242d0:	cmp	r5, #0
   242d4:	beq	24398 <flatcc_verify_struct_as_nested_root@@Base+0x1c0>
   242d8:	ldr	r2, [r0]
   242dc:	ldr	r1, [r2, r5]
   242e0:	add	r3, r1, r5
   242e4:	mov	r1, #16
   242e8:	cmp	r3, r5
   242ec:	bls	2439c <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   242f0:	ldr	r0, [r0, #4]
   242f4:	add	r7, r3, #4
   242f8:	cmp	r7, r0
   242fc:	bhi	2439c <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   24300:	ands	r7, r7, #3
   24304:	bne	2439c <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   24308:	ldr	r1, [r2, r3]
   2430c:	sub	r0, r0, r3
   24310:	sub	r0, r0, #4
   24314:	mul	r2, r1, lr
   24318:	mov	r1, #0
   2431c:	cmp	r0, r2
   24320:	movwcc	r1, #26
   24324:	b	2439c <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   24328:	cmp	r2, #0
   2432c:	movwne	r2, #1
   24330:	lsl	r1, r2, #2
   24334:	b	2439c <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   24338:	mov	r1, #0
   2433c:	cmp	ip, r4
   24340:	bcs	2439c <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   24344:	ldr	r1, [r0, #12]
   24348:	add	r1, r1, ip
   2434c:	ldrh	r2, [r1]
   24350:	mov	r1, #0
   24354:	cmp	r2, #0
   24358:	beq	2439c <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   2435c:	ldr	r7, [r0]
   24360:	ldr	r0, [r0, #16]
   24364:	add	r0, r7, r0
   24368:	adds	r0, r0, r2
   2436c:	beq	2439c <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   24370:	ldr	r2, [r0]
   24374:	ldr	ip, [fp, #8]
   24378:	ldr	r1, [r2, r0]!
   2437c:	str	lr, [sp]
   24380:	add	r0, r2, #4
   24384:	mov	r2, r3
   24388:	mov	r3, ip
   2438c:	bl	23df4 <flatcc_verify_struct_as_root@@Base>
   24390:	sub	sp, fp, #16
   24394:	pop	{r4, r5, r6, r7, fp, pc}
   24398:	mov	r1, #0
   2439c:	mov	r0, r1
   243a0:	sub	sp, fp, #16
   243a4:	pop	{r4, r5, r6, r7, fp, pc}

000243a8 <flatcc_verify_table_as_nested_root@@Base>:
   243a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   243ac:	add	fp, sp, #24
   243b0:	sub	sp, sp, #24
   243b4:	mov	r4, r0
   243b8:	mov	r0, #4
   243bc:	ldr	r8, [fp, #8]
   243c0:	mov	r5, r3
   243c4:	add	r6, r0, r1, lsl #1
   243c8:	ldrh	r7, [r4, #22]
   243cc:	uxth	r3, r6
   243d0:	cmp	r3, r7
   243d4:	bcs	2445c <flatcc_verify_table_as_nested_root@@Base+0xb4>
   243d8:	ldr	r0, [r4, #12]
   243dc:	uxtah	r6, r0, r6
   243e0:	ldrh	r6, [r6]
   243e4:	cmp	r6, #0
   243e8:	beq	2445c <flatcc_verify_table_as_nested_root@@Base+0xb4>
   243ec:	ldrh	r7, [r4, #20]
   243f0:	add	r1, r6, #4
   243f4:	cmp	r1, r7
   243f8:	bhi	24470 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   243fc:	ldr	r1, [r4, #16]
   24400:	add	r7, r1, r6
   24404:	tst	r7, #3
   24408:	bne	24470 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   2440c:	cmp	r7, #0
   24410:	beq	24528 <flatcc_verify_table_as_nested_root@@Base+0x180>
   24414:	ldr	ip, [r4]
   24418:	ldr	r1, [ip, r7]
   2441c:	add	r6, r1, r7
   24420:	cmp	r6, r7
   24424:	bls	24470 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   24428:	ldr	lr, [r4, #4]
   2442c:	add	r7, r6, #4
   24430:	cmp	r7, lr
   24434:	bhi	24470 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   24438:	ands	r1, r7, #3
   2443c:	bne	24470 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   24440:	ldr	r1, [ip, r6]
   24444:	sub	r7, lr, r6
   24448:	sub	r7, r7, #4
   2444c:	mul	r1, r1, r8
   24450:	cmp	r7, r1
   24454:	bcc	24470 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   24458:	b	24528 <flatcc_verify_table_as_nested_root@@Base+0x180>
   2445c:	cmp	r2, #0
   24460:	beq	24518 <flatcc_verify_table_as_nested_root@@Base+0x170>
   24464:	cmp	r3, r7
   24468:	bcs	24504 <flatcc_verify_table_as_nested_root@@Base+0x15c>
   2446c:	ldr	r0, [r4, #12]
   24470:	add	r0, r0, r3
   24474:	ldrh	r3, [r0]
   24478:	cmp	r3, #0
   2447c:	beq	24504 <flatcc_verify_table_as_nested_root@@Base+0x15c>
   24480:	ldrh	r1, [r4, #20]
   24484:	add	r2, r3, #4
   24488:	mov	r0, #13
   2448c:	cmp	r2, r1
   24490:	bhi	24670 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   24494:	ldr	r0, [r4, #16]
   24498:	add	r7, r0, r3
   2449c:	mov	r0, #12
   244a0:	tst	r7, #3
   244a4:	bne	24670 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   244a8:	cmp	r7, #0
   244ac:	beq	24678 <flatcc_verify_table_as_nested_root@@Base+0x2d0>
   244b0:	ldr	r2, [r4]
   244b4:	ldr	r0, [r2, r7]
   244b8:	add	r3, r0, r7
   244bc:	mov	r0, #16
   244c0:	cmp	r3, r7
   244c4:	bls	24670 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   244c8:	ldr	r7, [r4, #4]
   244cc:	add	r6, r3, #4
   244d0:	cmp	r6, r7
   244d4:	bhi	24670 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   244d8:	ands	r1, r6, #3
   244dc:	bne	24670 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   244e0:	ldr	r0, [r2, r3]
   244e4:	mul	r1, r0, r8
   244e8:	sub	r0, r7, r3
   244ec:	sub	r2, r0, #4
   244f0:	mov	r0, #0
   244f4:	cmp	r2, r1
   244f8:	movwcc	r0, #26
   244fc:	sub	sp, fp, #24
   24500:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24504:	cmp	r2, #0
   24508:	movwne	r2, #1
   2450c:	lsl	r0, r2, #2
   24510:	sub	sp, fp, #24
   24514:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24518:	mov	r0, #0
   2451c:	cmp	r3, r7
   24520:	bcs	24670 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   24524:	ldr	r0, [r4, #12]
   24528:	add	r0, r0, r3
   2452c:	ldrh	r1, [r0]
   24530:	mov	r0, #0
   24534:	cmp	r1, #0
   24538:	beq	24670 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   2453c:	ldr	r2, [r4]
   24540:	ldr	r3, [r4, #16]
   24544:	add	r2, r2, r3
   24548:	adds	r1, r2, r1
   2454c:	beq	24670 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   24550:	ldr	r6, [r1]
   24554:	mov	r0, #5
   24558:	ldr	r8, [r6, r1]!
   2455c:	add	r7, r6, #4
   24560:	tst	r7, #3
   24564:	bne	24670 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   24568:	mov	r0, #6
   2456c:	cmn	r8, #9
   24570:	bhi	24670 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   24574:	mov	r0, #1
   24578:	cmp	r8, #8
   2457c:	bcc	24670 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   24580:	cmp	r5, #0
   24584:	beq	245b4 <flatcc_verify_table_as_nested_root@@Base+0x20c>
   24588:	mov	r0, #0
   2458c:	mov	r1, r5
   24590:	mov	r2, #4
   24594:	str	r0, [sp]
   24598:	mov	r0, sp
   2459c:	bl	12ec8 <strncpy@plt>
   245a0:	ldr	r0, [sp]
   245a4:	cmp	r0, #0
   245a8:	ldrne	r1, [r6, #8]
   245ac:	cmpne	r1, r0
   245b0:	bne	24684 <flatcc_verify_table_as_nested_root@@Base+0x2dc>
   245b4:	ldr	r0, [r4, #8]
   245b8:	ldr	r1, [r7]
   245bc:	subs	r0, r0, #1
   245c0:	str	r0, [sp, #8]
   245c4:	beq	246bc <flatcc_verify_table_as_nested_root@@Base+0x314>
   245c8:	mov	r0, #15
   245cc:	tst	r1, #3
   245d0:	bne	24670 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   245d4:	cmp	r1, #0
   245d8:	beq	24670 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   245dc:	add	r2, r1, #4
   245e0:	cmp	r2, r8
   245e4:	bhi	24670 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   245e8:	str	r1, [sp, #16]
   245ec:	ldr	r0, [r7, r1]
   245f0:	sub	r6, r1, r0
   245f4:	mov	r0, #29
   245f8:	tst	r6, #-2147483647	; 0x80000001
   245fc:	bne	24670 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   24600:	add	r3, r6, #2
   24604:	mov	r0, #27
   24608:	cmp	r3, r8
   2460c:	bhi	24670 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   24610:	mov	r2, r7
   24614:	mov	r0, #30
   24618:	ldrh	r5, [r2, r6]!
   2461c:	tst	r5, #1
   24620:	strh	r5, [sp, #22]
   24624:	bne	24670 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   24628:	add	r6, r6, r5
   2462c:	cmp	r6, r8
   24630:	bhi	24670 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   24634:	mov	r0, #28
   24638:	cmp	r5, #4
   2463c:	bcc	24670 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   24640:	add	r0, r7, r3
   24644:	sub	r1, r8, r1
   24648:	ldrh	r3, [r0]
   2464c:	mov	r0, #20
   24650:	cmp	r1, r3
   24654:	strh	r3, [sp, #20]
   24658:	bcc	24670 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   2465c:	ldr	r1, [fp, #12]
   24660:	mov	r0, sp
   24664:	stm	sp, {r7, r8}
   24668:	str	r2, [sp, #12]
   2466c:	blx	r1
   24670:	sub	sp, fp, #24
   24674:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24678:	mov	r0, #0
   2467c:	sub	sp, fp, #24
   24680:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24684:	mov	r0, #0
   24688:	mov	r1, r5
   2468c:	mov	r2, #4
   24690:	str	r0, [sp]
   24694:	mov	r0, sp
   24698:	bl	12ec8 <strncpy@plt>
   2469c:	ldr	r0, [sp]
   246a0:	ldr	r1, [r6, #8]
   246a4:	subs	r1, r1, r0
   246a8:	movwne	r1, #1
   246ac:	cmp	r0, #0
   246b0:	lslne	r0, r1, #1
   246b4:	sub	sp, fp, #24
   246b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   246bc:	mov	r0, #3
   246c0:	sub	sp, fp, #24
   246c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000246c8 <flatcc_verify_union_field@@Base>:
   246c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   246cc:	add	fp, sp, #28
   246d0:	sub	sp, sp, #28
   246d4:	mov	r7, #2
   246d8:	ldrh	r4, [r0, #22]
   246dc:	lsl	r5, r1, #1
   246e0:	add	r7, r7, r1, lsl #1
   246e4:	uxth	r6, r7
   246e8:	cmp	r6, r4
   246ec:	bcs	247e4 <flatcc_verify_union_field@@Base+0x11c>
   246f0:	ldr	r6, [r0, #12]
   246f4:	uxtah	r1, r6, r7
   246f8:	ldrh	ip, [r1]
   246fc:	cmp	ip, #0
   24700:	beq	247e4 <flatcc_verify_union_field@@Base+0x11c>
   24704:	ldrh	r7, [r0, #20]
   24708:	mov	r1, #13
   2470c:	cmp	ip, r7
   24710:	bcs	24818 <flatcc_verify_union_field@@Base+0x150>
   24714:	add	r7, r5, #4
   24718:	ldr	lr, [r0]
   2471c:	mov	r1, #1
   24720:	uxth	sl, r7
   24724:	cmp	sl, r4
   24728:	bcs	2473c <flatcc_verify_union_field@@Base+0x74>
   2472c:	uxtah	r1, r6, r7
   24730:	ldrh	r1, [r1]
   24734:	clz	r1, r1
   24738:	lsr	r1, r1, #5
   2473c:	ldr	r9, [r0, #16]
   24740:	cmp	r1, #0
   24744:	moveq	r1, #24
   24748:	add	r8, lr, r9
   2474c:	ldrb	r5, [r8, ip]
   24750:	cmpeq	r5, #0
   24754:	beq	24818 <flatcc_verify_union_field@@Base+0x150>
   24758:	mov	r1, #0
   2475c:	cmp	r5, #0
   24760:	beq	24818 <flatcc_verify_union_field@@Base+0x150>
   24764:	cmp	sl, r4
   24768:	bcs	24824 <flatcc_verify_union_field@@Base+0x15c>
   2476c:	uxtah	r1, r6, r7
   24770:	ldrh	r4, [r1]
   24774:	cmp	r4, #0
   24778:	beq	24824 <flatcc_verify_union_field@@Base+0x15c>
   2477c:	ldrh	r1, [r0, #20]
   24780:	add	r2, r4, #4
   24784:	cmp	r2, r1
   24788:	mov	r1, #13
   2478c:	bhi	24818 <flatcc_verify_union_field@@Base+0x150>
   24790:	add	r2, r9, r4
   24794:	mov	r1, #12
   24798:	tst	r2, #3
   2479c:	bne	24818 <flatcc_verify_union_field@@Base+0x150>
   247a0:	cmp	r2, #0
   247a4:	mov	r1, #0
   247a8:	beq	24818 <flatcc_verify_union_field@@Base+0x150>
   247ac:	str	lr, [sp, #4]
   247b0:	ldr	r1, [r0, #4]
   247b4:	ldr	r0, [r0, #8]
   247b8:	str	r1, [sp, #8]
   247bc:	str	r2, [sp, #20]
   247c0:	str	r0, [sp, #12]
   247c4:	ldr	r0, [lr, r2]
   247c8:	str	r0, [sp, #24]
   247cc:	ldrb	r0, [r8, ip]
   247d0:	strb	r0, [sp, #16]
   247d4:	add	r0, sp, #4
   247d8:	blx	r3
   247dc:	mov	r1, r0
   247e0:	b	24818 <flatcc_verify_union_field@@Base+0x150>
   247e4:	add	r1, r5, #4
   247e8:	uxth	r3, r1
   247ec:	cmp	r3, r4
   247f0:	bcs	2480c <flatcc_verify_union_field@@Base+0x144>
   247f4:	ldr	r0, [r0, #12]
   247f8:	uxtah	r0, r0, r1
   247fc:	mov	r1, #23
   24800:	ldrh	r0, [r0]
   24804:	cmp	r0, #0
   24808:	bne	24818 <flatcc_verify_union_field@@Base+0x150>
   2480c:	cmp	r2, #0
   24810:	movwne	r2, #21
   24814:	mov	r1, r2
   24818:	mov	r0, r1
   2481c:	sub	sp, fp, #28
   24820:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24824:	cmp	r2, #0
   24828:	movwne	r2, #1
   2482c:	lsl	r1, r2, #2
   24830:	b	24818 <flatcc_verify_union_field@@Base+0x150>

00024834 <flatcc_verify_union_vector_field@@Base>:
   24834:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24838:	add	fp, sp, #28
   2483c:	sub	sp, sp, #28
   24840:	mov	r9, r3
   24844:	mov	r3, #2
   24848:	lsl	sl, r1, #1
   2484c:	add	r5, r3, r1, lsl #1
   24850:	ldrh	r1, [r0, #22]
   24854:	uxth	r3, r5
   24858:	cmp	r3, r1
   2485c:	bcs	24874 <flatcc_verify_union_vector_field@@Base+0x40>
   24860:	ldr	r7, [r0, #12]
   24864:	uxtah	r5, r7, r5
   24868:	ldrh	r5, [r5]
   2486c:	cmp	r5, #0
   24870:	bne	248b0 <flatcc_verify_union_vector_field@@Base+0x7c>
   24874:	add	r7, sl, #4
   24878:	uxth	r5, r7
   2487c:	cmp	r5, r1
   24880:	bcs	2492c <flatcc_verify_union_vector_field@@Base+0xf8>
   24884:	cmp	r2, #0
   24888:	beq	248a4 <flatcc_verify_union_vector_field@@Base+0x70>
   2488c:	ldr	r5, [r0, #12]
   24890:	uxtah	r7, r5, r7
   24894:	mov	r5, #22
   24898:	ldrh	r7, [r7]
   2489c:	cmp	r7, #0
   248a0:	beq	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   248a4:	cmp	r3, r1
   248a8:	bcs	2493c <flatcc_verify_union_vector_field@@Base+0x108>
   248ac:	ldr	r7, [r0, #12]
   248b0:	add	r5, r7, r3
   248b4:	ldrh	r5, [r5]
   248b8:	cmp	r5, #0
   248bc:	beq	2493c <flatcc_verify_union_vector_field@@Base+0x108>
   248c0:	ldrh	r4, [r0, #20]
   248c4:	add	r6, r5, #4
   248c8:	cmp	r6, r4
   248cc:	bhi	24950 <flatcc_verify_union_vector_field@@Base+0x11c>
   248d0:	ldr	r6, [r0, #16]
   248d4:	add	r5, r6, r5
   248d8:	tst	r5, #3
   248dc:	bne	24950 <flatcc_verify_union_vector_field@@Base+0x11c>
   248e0:	cmp	r5, #0
   248e4:	beq	249ec <flatcc_verify_union_vector_field@@Base+0x1b8>
   248e8:	ldr	ip, [r0]
   248ec:	ldr	r6, [ip, r5]
   248f0:	add	lr, r6, r5
   248f4:	cmp	lr, r5
   248f8:	bls	24950 <flatcc_verify_union_vector_field@@Base+0x11c>
   248fc:	ldr	r8, [r0, #4]
   24900:	add	r5, lr, #4
   24904:	cmp	r5, r8
   24908:	bhi	24950 <flatcc_verify_union_vector_field@@Base+0x11c>
   2490c:	ands	r4, r5, #3
   24910:	bne	24950 <flatcc_verify_union_vector_field@@Base+0x11c>
   24914:	ldr	r6, [ip, lr]
   24918:	sub	r5, r8, lr
   2491c:	sub	r5, r5, #4
   24920:	cmp	r5, r6
   24924:	bcc	24950 <flatcc_verify_union_vector_field@@Base+0x11c>
   24928:	b	249ec <flatcc_verify_union_vector_field@@Base+0x1b8>
   2492c:	mov	r5, #22
   24930:	cmp	r2, #0
   24934:	bne	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   24938:	b	248a4 <flatcc_verify_union_vector_field@@Base+0x70>
   2493c:	cmp	r2, #0
   24940:	beq	249dc <flatcc_verify_union_vector_field@@Base+0x1a8>
   24944:	cmp	r3, r1
   24948:	bcs	24afc <flatcc_verify_union_vector_field@@Base+0x2c8>
   2494c:	ldr	r7, [r0, #12]
   24950:	add	r1, r7, r3
   24954:	ldrh	r1, [r1]
   24958:	cmp	r1, #0
   2495c:	beq	24afc <flatcc_verify_union_vector_field@@Base+0x2c8>
   24960:	ldrh	r2, [r0, #20]
   24964:	add	r3, r1, #4
   24968:	mov	r5, #13
   2496c:	cmp	r3, r2
   24970:	bhi	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   24974:	ldr	r2, [r0, #16]
   24978:	mov	r5, #12
   2497c:	add	r3, r2, r1
   24980:	tst	r3, #3
   24984:	bne	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   24988:	cmp	r3, #0
   2498c:	beq	24b14 <flatcc_verify_union_vector_field@@Base+0x2e0>
   24990:	ldr	r1, [r0]
   24994:	mov	r5, #16
   24998:	ldr	r2, [r1, r3]
   2499c:	add	r2, r2, r3
   249a0:	cmp	r2, r3
   249a4:	bls	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   249a8:	ldr	r0, [r0, #4]
   249ac:	add	r3, r2, #4
   249b0:	cmp	r3, r0
   249b4:	bhi	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   249b8:	ands	r3, r3, #3
   249bc:	bne	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   249c0:	ldr	r1, [r1, r2]
   249c4:	sub	r0, r0, r2
   249c8:	mov	r5, #0
   249cc:	sub	r0, r0, #4
   249d0:	cmp	r0, r1
   249d4:	movwcc	r5, #26
   249d8:	b	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   249dc:	mov	r5, #0
   249e0:	cmp	r3, r1
   249e4:	bcs	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   249e8:	ldr	r7, [r0, #12]
   249ec:	add	r3, r7, r3
   249f0:	mov	r5, #0
   249f4:	ldrh	r3, [r3]
   249f8:	cmp	r3, #0
   249fc:	beq	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   24a00:	ldr	r8, [r0]
   24a04:	ldr	lr, [r0, #16]
   24a08:	add	r6, r8, lr
   24a0c:	adds	ip, r6, r3
   24a10:	beq	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   24a14:	add	r3, sl, #4
   24a18:	uxth	r4, r3
   24a1c:	cmp	r4, r1
   24a20:	bcs	24afc <flatcc_verify_union_vector_field@@Base+0x2c8>
   24a24:	uxtah	r1, r7, r3
   24a28:	ldrh	r1, [r1]
   24a2c:	cmp	r1, #0
   24a30:	beq	24afc <flatcc_verify_union_vector_field@@Base+0x2c8>
   24a34:	ldrh	r2, [r0, #20]
   24a38:	add	r3, r1, #4
   24a3c:	mov	r5, #13
   24a40:	cmp	r3, r2
   24a44:	bhi	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   24a48:	add	r3, lr, r1
   24a4c:	mov	r5, #12
   24a50:	tst	r3, #3
   24a54:	bne	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   24a58:	cmp	r3, #0
   24a5c:	mov	r5, #0
   24a60:	beq	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   24a64:	ldr	r1, [r0, #8]
   24a68:	cmp	r1, #1
   24a6c:	blt	24b1c <flatcc_verify_union_vector_field@@Base+0x2e8>
   24a70:	ldr	r2, [r8, r3]
   24a74:	mov	r5, #16
   24a78:	add	r2, r2, r3
   24a7c:	cmp	r2, r3
   24a80:	bls	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   24a84:	ldr	r0, [r0, #4]
   24a88:	add	r7, r2, #4
   24a8c:	cmp	r7, r0
   24a90:	bhi	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   24a94:	ands	r3, r7, #3
   24a98:	bne	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   24a9c:	ldr	r3, [r8, r2]
   24aa0:	mov	r5, #25
   24aa4:	cmn	r3, #-1073741823	; 0xc0000001
   24aa8:	bhi	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   24aac:	sub	r2, r0, r2
   24ab0:	mov	r5, #26
   24ab4:	sub	r2, r2, #4
   24ab8:	cmp	r2, r3, lsl #2
   24abc:	bcc	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   24ac0:	ldr	r2, [ip]
   24ac4:	mov	r5, #34	; 0x22
   24ac8:	ldr	sl, [r2, ip]!
   24acc:	cmp	r3, sl
   24ad0:	bne	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   24ad4:	sub	r1, r1, #1
   24ad8:	mov	r5, #0
   24adc:	cmp	sl, #0
   24ae0:	str	r1, [sp, #12]
   24ae4:	str	r0, [sp, #8]
   24ae8:	str	r8, [sp, #4]
   24aec:	beq	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   24af0:	add	r6, r2, #4
   24af4:	add	r4, sp, #4
   24af8:	b	24b3c <flatcc_verify_union_vector_field@@Base+0x308>
   24afc:	cmp	r2, #0
   24b00:	movwne	r2, #1
   24b04:	lsl	r5, r2, #2
   24b08:	mov	r0, r5
   24b0c:	sub	sp, fp, #28
   24b10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24b14:	mov	r5, #0
   24b18:	b	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   24b1c:	mov	r5, #3
   24b20:	b	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   24b24:	cmp	r0, #0
   24b28:	bne	24b88 <flatcc_verify_union_vector_field@@Base+0x354>
   24b2c:	add	r6, r6, #1
   24b30:	subs	sl, sl, #1
   24b34:	add	r7, r7, #4
   24b38:	beq	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   24b3c:	ldr	r1, [r8, r7]
   24b40:	ldrb	r0, [r6]
   24b44:	cmp	r1, #0
   24b48:	beq	24b24 <flatcc_verify_union_vector_field@@Base+0x2f0>
   24b4c:	cmp	r0, #0
   24b50:	beq	24b80 <flatcc_verify_union_vector_field@@Base+0x34c>
   24b54:	str	r1, [sp, #24]
   24b58:	str	r7, [sp, #20]
   24b5c:	strb	r0, [sp, #16]
   24b60:	mov	r0, r4
   24b64:	blx	r9
   24b68:	cmp	r0, #0
   24b6c:	beq	24b2c <flatcc_verify_union_vector_field@@Base+0x2f8>
   24b70:	add	r0, sp, #4
   24b74:	blx	r9
   24b78:	mov	r5, r0
   24b7c:	b	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   24b80:	mov	r5, #33	; 0x21
   24b84:	b	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>
   24b88:	mov	r5, #32
   24b8c:	b	24b08 <flatcc_verify_union_vector_field@@Base+0x2d4>

00024b90 <__libc_csu_init@@Base>:
   24b90:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24b94:	mov	r7, r0
   24b98:	ldr	r6, [pc, #72]	; 24be8 <__libc_csu_init@@Base+0x58>
   24b9c:	ldr	r5, [pc, #72]	; 24bec <__libc_csu_init@@Base+0x5c>
   24ba0:	add	r6, pc, r6
   24ba4:	add	r5, pc, r5
   24ba8:	sub	r6, r6, r5
   24bac:	mov	r8, r1
   24bb0:	mov	r9, r2
   24bb4:	bl	12de8 <strcmp@plt-0x20>
   24bb8:	asrs	r6, r6, #2
   24bbc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   24bc0:	mov	r4, #0
   24bc4:	add	r4, r4, #1
   24bc8:	ldr	r3, [r5], #4
   24bcc:	mov	r2, r9
   24bd0:	mov	r1, r8
   24bd4:	mov	r0, r7
   24bd8:	blx	r3
   24bdc:	cmp	r6, r4
   24be0:	bne	24bc4 <__libc_csu_init@@Base+0x34>
   24be4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24be8:	andeq	r5, r1, r0, asr #5
   24bec:			; <UNDEFINED> instruction: 0x000152b8

00024bf0 <__libc_csu_fini@@Base>:
   24bf0:	bx	lr

Disassembly of section .fini:

00024bf4 <.fini>:
   24bf4:	push	{r3, lr}
   24bf8:	pop	{r3, pc}
