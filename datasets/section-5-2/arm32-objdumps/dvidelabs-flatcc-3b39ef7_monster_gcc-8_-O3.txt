
../repos/dvidelabs-flatcc-3b39ef7/samples/monster/monster:     file format elf32-littlearm


Disassembly of section .init:

00011f0c <.init>:
   11f0c:	push	{r3, lr}
   11f10:	bl	12140 <_start@@Base+0x3c>
   11f14:	pop	{r3, pc}

Disassembly of section .plt:

00011f18 <strcmp@plt-0x14>:
   11f18:	push	{lr}		; (str lr, [sp, #-4]!)
   11f1c:	ldr	lr, [pc, #4]	; 11f28 <strcmp@plt-0x4>
   11f20:	add	lr, pc, lr
   11f24:	ldr	pc, [lr, #8]!
   11f28:	ldrdeq	r9, [r1], -r8

00011f2c <strcmp@plt>:
   11f2c:	add	ip, pc, #0, 12
   11f30:	add	ip, ip, #102400	; 0x19000
   11f34:	ldr	pc, [ip, #216]!	; 0xd8

00011f38 <free@plt>:
   11f38:	add	ip, pc, #0, 12
   11f3c:	add	ip, ip, #102400	; 0x19000
   11f40:	ldr	pc, [ip, #208]!	; 0xd0

00011f44 <memcpy@plt>:
   11f44:	add	ip, pc, #0, 12
   11f48:	add	ip, ip, #102400	; 0x19000
   11f4c:	ldr	pc, [ip, #200]!	; 0xc8

00011f50 <memcmp@plt>:
   11f50:	add	ip, pc, #0, 12
   11f54:	add	ip, ip, #102400	; 0x19000
   11f58:	ldr	pc, [ip, #192]!	; 0xc0

00011f5c <realloc@plt>:
   11f5c:	add	ip, pc, #0, 12
   11f60:	add	ip, ip, #102400	; 0x19000
   11f64:	ldr	pc, [ip, #184]!	; 0xb8

00011f68 <puts@plt>:
   11f68:	add	ip, pc, #0, 12
   11f6c:	add	ip, ip, #102400	; 0x19000
   11f70:	ldr	pc, [ip, #176]!	; 0xb0

00011f74 <malloc@plt>:
   11f74:	add	ip, pc, #0, 12
   11f78:	add	ip, ip, #102400	; 0x19000
   11f7c:	ldr	pc, [ip, #168]!	; 0xa8

00011f80 <__libc_start_main@plt>:
   11f80:	add	ip, pc, #0, 12
   11f84:	add	ip, ip, #102400	; 0x19000
   11f88:	ldr	pc, [ip, #160]!	; 0xa0

00011f8c <__gmon_start__@plt>:
   11f8c:	add	ip, pc, #0, 12
   11f90:	add	ip, ip, #102400	; 0x19000
   11f94:	ldr	pc, [ip, #152]!	; 0x98

00011f98 <strlen@plt>:
   11f98:	add	ip, pc, #0, 12
   11f9c:	add	ip, ip, #102400	; 0x19000
   11fa0:	ldr	pc, [ip, #144]!	; 0x90

00011fa4 <posix_memalign@plt>:
   11fa4:	add	ip, pc, #0, 12
   11fa8:	add	ip, ip, #102400	; 0x19000
   11fac:	ldr	pc, [ip, #136]!	; 0x88

00011fb0 <memset@plt>:
   11fb0:	add	ip, pc, #0, 12
   11fb4:	add	ip, ip, #102400	; 0x19000
   11fb8:	ldr	pc, [ip, #128]!	; 0x80

00011fbc <memchr@plt>:
   11fbc:	add	ip, pc, #0, 12
   11fc0:	add	ip, ip, #102400	; 0x19000
   11fc4:	ldr	pc, [ip, #120]!	; 0x78

00011fc8 <abort@plt>:
   11fc8:	add	ip, pc, #0, 12
   11fcc:	add	ip, ip, #102400	; 0x19000
   11fd0:	ldr	pc, [ip, #112]!	; 0x70

00011fd4 <__assert_fail@plt>:
   11fd4:	add	ip, pc, #0, 12
   11fd8:	add	ip, ip, #102400	; 0x19000
   11fdc:	ldr	pc, [ip, #104]!	; 0x68

Disassembly of section .text:

00011fe0 <main@@Base>:
   11fe0:	strd	r4, [sp, #-12]!
   11fe4:	str	lr, [sp, #8]
   11fe8:	sub	sp, sp, #244	; 0xf4
   11fec:	add	r0, sp, #8
   11ff0:	bl	137d0 <flatcc_builder_init@@Base>
   11ff4:	add	r0, sp, #8
   11ff8:	mov	r1, #0
   11ffc:	bl	1226c <create_monster_bottom_up@@Base>
   12000:	cmp	r0, #0
   12004:	bne	120ac <main@@Base+0xcc>
   12008:	add	r1, sp, #4
   1200c:	add	r0, sp, #8
   12010:	bl	18bd4 <flatcc_builder_finalize_aligned_buffer@@Base>
   12014:	bl	18d04 <flatcc_builder_aligned_free@@Base>
   12018:	add	r0, sp, #8
   1201c:	bl	1398c <flatcc_builder_reset@@Base>
   12020:	mov	r1, #1
   12024:	add	r0, sp, #8
   12028:	bl	1226c <create_monster_bottom_up@@Base>
   1202c:	cmp	r0, #0
   12030:	bne	120e4 <main@@Base+0x104>
   12034:	add	r1, sp, #4
   12038:	add	r0, sp, #8
   1203c:	bl	18bd4 <flatcc_builder_finalize_aligned_buffer@@Base>
   12040:	mov	r4, r0
   12044:	bl	12c28 <access_monster_buffer@@Base>
   12048:	mov	r0, r4
   1204c:	bl	18d04 <flatcc_builder_aligned_free@@Base>
   12050:	add	r0, sp, #8
   12054:	bl	1398c <flatcc_builder_reset@@Base>
   12058:	add	r0, sp, #8
   1205c:	bl	128bc <create_monster_top_down@@Base>
   12060:	add	r1, sp, #4
   12064:	add	r0, sp, #8
   12068:	bl	18b28 <flatcc_builder_finalize_buffer@@Base>
   1206c:	mov	r5, r0
   12070:	bl	12c28 <access_monster_buffer@@Base>
   12074:	subs	r4, r0, #0
   12078:	bne	120c8 <main@@Base+0xe8>
   1207c:	mov	r0, r5
   12080:	bl	11f38 <free@plt>
   12084:	add	r0, sp, #8
   12088:	bl	13998 <flatcc_builder_clear@@Base>
   1208c:	movw	r0, #38560	; 0x96a0
   12090:	movt	r0, #1
   12094:	bl	11f68 <puts@plt>
   12098:	mov	r0, r4
   1209c:	add	sp, sp, #244	; 0xf4
   120a0:	ldrd	r4, [sp]
   120a4:	add	sp, sp, #8
   120a8:	pop	{pc}		; (ldr pc, [sp], #4)
   120ac:	movw	r1, #38484	; 0x9654
   120b0:	movt	r1, #1
   120b4:	ldr	r3, [pc, #68]	; 12100 <main@@Base+0x120>
   120b8:	movw	r0, #40680	; 0x9ee8
   120bc:	movt	r0, #1
   120c0:	mov	r2, #308	; 0x134
   120c4:	bl	11fd4 <__assert_fail@plt>
   120c8:	movw	r1, #38484	; 0x9654
   120cc:	movt	r1, #1
   120d0:	ldr	r3, [pc, #40]	; 12100 <main@@Base+0x120>
   120d4:	movw	r0, #40680	; 0x9ee8
   120d8:	movt	r0, #1
   120dc:	movw	r2, #342	; 0x156
   120e0:	bl	11fd4 <__assert_fail@plt>
   120e4:	movw	r1, #38484	; 0x9654
   120e8:	movt	r1, #1
   120ec:	ldr	r3, [pc, #12]	; 12100 <main@@Base+0x120>
   120f0:	movw	r0, #40680	; 0x9ee8
   120f4:	movt	r0, #1
   120f8:	movw	r2, #335	; 0x14f
   120fc:	bl	11fd4 <__assert_fail@plt>
   12100:	andeq	r9, r1, r0, lsr #8

00012104 <_start@@Base>:
   12104:	mov	fp, #0
   12108:	mov	lr, #0
   1210c:	pop	{r1}		; (ldr r1, [sp], #4)
   12110:	mov	r2, sp
   12114:	push	{r2}		; (str r2, [sp, #-4]!)
   12118:	push	{r0}		; (str r0, [sp, #-4]!)
   1211c:	ldr	ip, [pc, #16]	; 12134 <_start@@Base+0x30>
   12120:	push	{ip}		; (str ip, [sp, #-4]!)
   12124:	ldr	r0, [pc, #12]	; 12138 <_start@@Base+0x34>
   12128:	ldr	r3, [pc, #12]	; 1213c <_start@@Base+0x38>
   1212c:	bl	11f80 <__libc_start_main@plt>
   12130:	bl	11fc8 <abort@plt>
   12134:	andeq	r9, r1, r4, ror r3
   12138:	andeq	r1, r1, r0, ror #31
   1213c:	andeq	r9, r1, r4, lsl r3
   12140:	ldr	r3, [pc, #20]	; 1215c <_start@@Base+0x58>
   12144:	ldr	r2, [pc, #20]	; 12160 <_start@@Base+0x5c>
   12148:	add	r3, pc, r3
   1214c:	ldr	r2, [r3, r2]
   12150:	cmp	r2, #0
   12154:	bxeq	lr
   12158:	b	11f8c <__gmon_start__@plt>
   1215c:			; <UNDEFINED> instruction: 0x00018eb0
   12160:	andeq	r0, r0, r8, asr #32
   12164:	ldr	r0, [pc, #24]	; 12184 <_start@@Base+0x80>
   12168:	ldr	r3, [pc, #24]	; 12188 <_start@@Base+0x84>
   1216c:	cmp	r3, r0
   12170:	bxeq	lr
   12174:	ldr	r3, [pc, #16]	; 1218c <_start@@Base+0x88>
   12178:	cmp	r3, #0
   1217c:	bxeq	lr
   12180:	bx	r3
   12184:	andeq	fp, r2, r4, asr r0
   12188:	andeq	fp, r2, r4, asr r0
   1218c:	andeq	r0, r0, r0
   12190:	ldr	r0, [pc, #36]	; 121bc <_start@@Base+0xb8>
   12194:	ldr	r1, [pc, #36]	; 121c0 <_start@@Base+0xbc>
   12198:	sub	r1, r1, r0
   1219c:	asr	r1, r1, #2
   121a0:	add	r1, r1, r1, lsr #31
   121a4:	asrs	r1, r1, #1
   121a8:	bxeq	lr
   121ac:	ldr	r3, [pc, #16]	; 121c4 <_start@@Base+0xc0>
   121b0:	cmp	r3, #0
   121b4:	bxeq	lr
   121b8:	bx	r3
   121bc:	andeq	fp, r2, r4, asr r0
   121c0:	andeq	fp, r2, r4, asr r0
   121c4:	andeq	r0, r0, r0
   121c8:	push	{r4, lr}
   121cc:	ldr	r4, [pc, #24]	; 121ec <_start@@Base+0xe8>
   121d0:	ldrb	r3, [r4]
   121d4:	cmp	r3, #0
   121d8:	popne	{r4, pc}
   121dc:	bl	12164 <_start@@Base+0x60>
   121e0:	mov	r3, #1
   121e4:	strb	r3, [r4]
   121e8:	pop	{r4, pc}
   121ec:	andeq	fp, r2, r4, asr r0
   121f0:	b	12190 <_start@@Base+0x8c>
   121f4:	movw	r3, #37764	; 0x9384
   121f8:	movt	r3, #1
   121fc:	str	r4, [sp, #-8]!
   12200:	movw	r1, #37928	; 0x9428
   12204:	movt	r1, #1
   12208:	str	lr, [sp, #4]
   1220c:	movw	r0, #38020	; 0x9484
   12210:	movt	r0, #1
   12214:	mov	r2, #148	; 0x94
   12218:	bl	11fd4 <__assert_fail@plt>
   1221c:	movw	r1, #37928	; 0x9428
   12220:	movt	r1, #1
   12224:	ldr	r3, [pc, #20]	; 12240 <_start@@Base+0x13c>
   12228:	movw	r0, #38020	; 0x9484
   1222c:	movt	r0, #1
   12230:	str	r4, [sp, #-8]!
   12234:	mov	r2, #149	; 0x95
   12238:	str	lr, [sp, #4]
   1223c:	bl	11fd4 <__assert_fail@plt>
   12240:	andeq	r9, r1, r0, lsr #7
   12244:	movw	r1, #38060	; 0x94ac
   12248:	movt	r1, #1
   1224c:	ldr	r3, [pc, #20]	; 12268 <_start@@Base+0x164>
   12250:	movw	r0, #38152	; 0x9508
   12254:	movt	r0, #1
   12258:	str	r4, [sp, #-8]!
   1225c:	mov	r2, #50	; 0x32
   12260:	str	lr, [sp, #4]
   12264:	bl	11fd4 <__assert_fail@plt>
   12268:			; <UNDEFINED> instruction: 0x000193bc

0001226c <create_monster_bottom_up@@Base>:
   1226c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12270:	mov	r4, r0
   12274:	strd	r6, [sp, #8]
   12278:	strd	r8, [sp, #16]
   1227c:	mov	r8, r1
   12280:	movw	r1, #38312	; 0x95a8
   12284:	movt	r1, #1
   12288:	str	sl, [sp, #24]
   1228c:	str	lr, [sp, #28]
   12290:	sub	sp, sp, #24
   12294:	bl	17cdc <flatcc_builder_create_string_str@@Base>
   12298:	mov	r5, r0
   1229c:	movw	r1, #38320	; 0x95b0
   122a0:	movt	r1, #1
   122a4:	mov	r0, r4
   122a8:	bl	17cdc <flatcc_builder_create_string_str@@Base>
   122ac:	mov	r6, r0
   122b0:	mov	r1, #2
   122b4:	mov	r0, r4
   122b8:	bl	15d54 <flatcc_builder_start_table@@Base>
   122bc:	adds	r3, r5, #0
   122c0:	movne	r3, #1
   122c4:	cmp	r0, #0
   122c8:	moveq	r0, r3
   122cc:	movne	r0, #0
   122d0:	cmp	r0, #0
   122d4:	beq	12690 <create_monster_bottom_up@@Base+0x424>
   122d8:	mov	r1, #0
   122dc:	mov	r0, r4
   122e0:	bl	18498 <flatcc_builder_table_add_offset@@Base>
   122e4:	cmp	r0, #0
   122e8:	beq	12690 <create_monster_bottom_up@@Base+0x424>
   122ec:	mov	r3, #2
   122f0:	mov	r1, #1
   122f4:	str	r5, [r0]
   122f8:	mov	r2, r3
   122fc:	mov	r0, r4
   12300:	bl	180cc <flatcc_builder_table_add@@Base>
   12304:	cmp	r0, #0
   12308:	beq	12690 <create_monster_bottom_up@@Base+0x424>
   1230c:	mov	r3, #3
   12310:	mov	r2, #0
   12314:	ldr	r1, [pc, #1428]	; 128b0 <create_monster_bottom_up@@Base+0x644>
   12318:	strh	r3, [r0]
   1231c:	mov	r0, r4
   12320:	bl	16638 <flatcc_builder_check_required@@Base>
   12324:	cmp	r0, #0
   12328:	beq	12890 <create_monster_bottom_up@@Base+0x624>
   1232c:	mov	r0, r4
   12330:	bl	166d4 <flatcc_builder_end_table@@Base>
   12334:	mov	r9, r0
   12338:	mov	r1, #2
   1233c:	mov	r0, r4
   12340:	bl	15d54 <flatcc_builder_start_table@@Base>
   12344:	adds	r3, r6, #0
   12348:	movne	r3, #1
   1234c:	cmp	r0, #0
   12350:	moveq	r0, r3
   12354:	movne	r0, #0
   12358:	cmp	r0, #0
   1235c:	beq	124b0 <create_monster_bottom_up@@Base+0x244>
   12360:	mov	r1, #0
   12364:	mov	r0, r4
   12368:	bl	18498 <flatcc_builder_table_add_offset@@Base>
   1236c:	cmp	r0, #0
   12370:	beq	124b0 <create_monster_bottom_up@@Base+0x244>
   12374:	mov	r3, #2
   12378:	mov	r1, #1
   1237c:	str	r6, [r0]
   12380:	mov	r2, r3
   12384:	mov	r0, r4
   12388:	bl	180cc <flatcc_builder_table_add@@Base>
   1238c:	subs	r5, r0, #0
   12390:	beq	124b0 <create_monster_bottom_up@@Base+0x244>
   12394:	mov	r3, #5
   12398:	movw	r6, #37764	; 0x9384
   1239c:	movt	r6, #1
   123a0:	mov	r2, #0
   123a4:	add	r1, r6, #84	; 0x54
   123a8:	mov	r0, r4
   123ac:	strh	r3, [r5]
   123b0:	bl	16638 <flatcc_builder_check_required@@Base>
   123b4:	cmp	r0, #0
   123b8:	beq	12890 <create_monster_bottom_up@@Base+0x624>
   123bc:	mov	r0, r4
   123c0:	bl	166d4 <flatcc_builder_end_table@@Base>
   123c4:	mov	r5, r0
   123c8:	movw	r1, #38480	; 0x9650
   123cc:	movt	r1, #1
   123d0:	mov	r0, r4
   123d4:	bl	17cdc <flatcc_builder_create_string_str@@Base>
   123d8:	ldrh	r2, [r6, #124]	; 0x7c
   123dc:	mov	r3, #1
   123e0:	mvn	r1, #0
   123e4:	mov	sl, r0
   123e8:	mov	r0, r4
   123ec:	ldrd	r6, [r6, #116]	; 0x74
   123f0:	str	r3, [sp]
   123f4:	str	r1, [sp, #4]
   123f8:	add	r1, sp, #12
   123fc:	strh	r2, [sp, #20]
   12400:	mov	r2, #10
   12404:	strd	r6, [sp, #12]
   12408:	bl	16894 <flatcc_builder_create_vector@@Base>
   1240c:	mov	r6, r0
   12410:	mov	r0, r4
   12414:	bl	15734 <flatcc_builder_start_offset_vector@@Base>
   12418:	cmp	r9, #0
   1241c:	beq	1242c <create_monster_bottom_up@@Base+0x1c0>
   12420:	mov	r1, r9
   12424:	mov	r0, r4
   12428:	bl	14d6c <flatcc_builder_offset_vector_push@@Base>
   1242c:	cmp	r5, #0
   12430:	beq	12440 <create_monster_bottom_up@@Base+0x1d4>
   12434:	mov	r1, r5
   12438:	mov	r0, r4
   1243c:	bl	14d6c <flatcc_builder_offset_vector_push@@Base>
   12440:	mov	r0, r4
   12444:	bl	16db4 <flatcc_builder_end_offset_vector@@Base>
   12448:	cmp	r8, #0
   1244c:	mov	r7, r0
   12450:	bne	12528 <create_monster_bottom_up@@Base+0x2bc>
   12454:	mov	r3, r8
   12458:	mov	r2, r8
   1245c:	mov	r1, r8
   12460:	mov	r0, r4
   12464:	bl	14268 <flatcc_builder_start_buffer@@Base>
   12468:	subs	r9, r0, #0
   1246c:	bne	12490 <create_monster_bottom_up@@Base+0x224>
   12470:	mov	r1, #10
   12474:	mov	r0, r4
   12478:	bl	15d54 <flatcc_builder_start_table@@Base>
   1247c:	cmp	r0, #0
   12480:	beq	126f0 <create_monster_bottom_up@@Base+0x484>
   12484:	mov	r1, r9
   12488:	mov	r0, r4
   1248c:	bl	14414 <flatcc_builder_end_buffer@@Base>
   12490:	mov	r0, #0
   12494:	add	sp, sp, #24
   12498:	ldrd	r4, [sp]
   1249c:	ldrd	r6, [sp, #8]
   124a0:	ldrd	r8, [sp, #16]
   124a4:	ldr	sl, [sp, #24]
   124a8:	add	sp, sp, #28
   124ac:	pop	{pc}		; (ldr pc, [sp], #4)
   124b0:	movw	r1, #38480	; 0x9650
   124b4:	movt	r1, #1
   124b8:	mov	r0, r4
   124bc:	bl	17cdc <flatcc_builder_create_string_str@@Base>
   124c0:	movw	r2, #37764	; 0x9384
   124c4:	movt	r2, #1
   124c8:	ldrh	ip, [r2, #124]	; 0x7c
   124cc:	mov	r3, #1
   124d0:	mvn	r1, #0
   124d4:	mov	sl, r0
   124d8:	mov	r0, r4
   124dc:	ldrd	r6, [r2, #116]	; 0x74
   124e0:	mov	r2, #10
   124e4:	str	r3, [sp]
   124e8:	str	r1, [sp, #4]
   124ec:	add	r1, sp, #12
   124f0:	strd	r6, [sp, #12]
   124f4:	strh	ip, [sp, #20]
   124f8:	bl	16894 <flatcc_builder_create_vector@@Base>
   124fc:	mov	r6, r0
   12500:	mov	r0, r4
   12504:	bl	15734 <flatcc_builder_start_offset_vector@@Base>
   12508:	cmp	r9, #0
   1250c:	moveq	r5, r9
   12510:	beq	12440 <create_monster_bottom_up@@Base+0x1d4>
   12514:	mov	r1, r9
   12518:	mov	r0, r4
   1251c:	bl	14d6c <flatcc_builder_offset_vector_push@@Base>
   12520:	mov	r5, #0
   12524:	b	12440 <create_monster_bottom_up@@Base+0x1d4>
   12528:	mov	r3, #0
   1252c:	mov	r0, r4
   12530:	mov	r2, r3
   12534:	mov	r1, r3
   12538:	bl	14268 <flatcc_builder_start_buffer@@Base>
   1253c:	cmp	r0, #0
   12540:	bne	12550 <create_monster_bottom_up@@Base+0x2e4>
   12544:	mov	r1, #10
   12548:	mov	r0, r4
   1254c:	bl	15d54 <flatcc_builder_start_table@@Base>
   12550:	mov	r3, #4
   12554:	mov	r2, #12
   12558:	mov	r1, #0
   1255c:	mov	r0, r4
   12560:	bl	180cc <flatcc_builder_table_add@@Base>
   12564:	cmp	r0, #0
   12568:	beq	12588 <create_monster_bottom_up@@Base+0x31c>
   1256c:	mov	r1, #1065353216	; 0x3f800000
   12570:	mov	r2, #1073741824	; 0x40000000
   12574:	mov	r3, #0
   12578:	movt	r3, #16448	; 0x4040
   1257c:	str	r1, [r0]
   12580:	str	r2, [r0, #4]
   12584:	str	r3, [r0, #8]
   12588:	mov	r3, #2
   1258c:	mov	r0, r4
   12590:	mov	r2, r3
   12594:	mov	r1, r3
   12598:	bl	180cc <flatcc_builder_table_add@@Base>
   1259c:	cmp	r0, #0
   125a0:	movne	r3, #300	; 0x12c
   125a4:	strhne	r3, [r0]
   125a8:	cmp	sl, #0
   125ac:	beq	125c4 <create_monster_bottom_up@@Base+0x358>
   125b0:	mov	r1, #3
   125b4:	mov	r0, r4
   125b8:	bl	18498 <flatcc_builder_table_add_offset@@Base>
   125bc:	cmp	r0, #0
   125c0:	strne	sl, [r0]
   125c4:	cmp	r6, #0
   125c8:	beq	125e0 <create_monster_bottom_up@@Base+0x374>
   125cc:	mov	r1, #5
   125d0:	mov	r0, r4
   125d4:	bl	18498 <flatcc_builder_table_add_offset@@Base>
   125d8:	cmp	r0, #0
   125dc:	strne	r6, [r0]
   125e0:	mov	r3, #1
   125e4:	mov	r1, #6
   125e8:	mov	r2, r3
   125ec:	mov	r0, r4
   125f0:	bl	180cc <flatcc_builder_table_add@@Base>
   125f4:	cmp	r0, #0
   125f8:	movne	r3, #0
   125fc:	strbne	r3, [r0]
   12600:	cmp	r7, #0
   12604:	beq	1261c <create_monster_bottom_up@@Base+0x3b0>
   12608:	mov	r1, #7
   1260c:	mov	r0, r4
   12610:	bl	18498 <flatcc_builder_table_add_offset@@Base>
   12614:	cmp	r0, #0
   12618:	strne	r7, [r0]
   1261c:	cmp	r5, #0
   12620:	beq	12660 <create_monster_bottom_up@@Base+0x3f4>
   12624:	mov	r3, #1
   12628:	mov	r1, #8
   1262c:	mov	r2, r3
   12630:	mov	r0, r4
   12634:	bl	180cc <flatcc_builder_table_add@@Base>
   12638:	subs	r6, r0, #0
   1263c:	beq	12660 <create_monster_bottom_up@@Base+0x3f4>
   12640:	mov	r1, #9
   12644:	mov	r0, r4
   12648:	bl	18498 <flatcc_builder_table_add_offset@@Base>
   1264c:	cmp	r0, #0
   12650:	beq	12660 <create_monster_bottom_up@@Base+0x3f4>
   12654:	mov	r3, #1
   12658:	strb	r3, [r6]
   1265c:	str	r5, [r0]
   12660:	mov	r2, #0
   12664:	ldr	r1, [pc, #584]	; 128b4 <create_monster_bottom_up@@Base+0x648>
   12668:	mov	r0, r4
   1266c:	bl	16638 <flatcc_builder_check_required@@Base>
   12670:	cmp	r0, #0
   12674:	beq	128ac <create_monster_bottom_up@@Base+0x640>
   12678:	mov	r0, r4
   1267c:	bl	166d4 <flatcc_builder_end_table@@Base>
   12680:	mov	r1, r0
   12684:	mov	r0, r4
   12688:	bl	14414 <flatcc_builder_end_buffer@@Base>
   1268c:	b	12490 <create_monster_bottom_up@@Base+0x224>
   12690:	mov	r1, #2
   12694:	mov	r0, r4
   12698:	bl	15d54 <flatcc_builder_start_table@@Base>
   1269c:	adds	r5, r6, #0
   126a0:	movne	r5, #1
   126a4:	cmp	r0, #0
   126a8:	movne	r5, #0
   126ac:	cmp	r5, #0
   126b0:	beq	12834 <create_monster_bottom_up@@Base+0x5c8>
   126b4:	mov	r1, #0
   126b8:	mov	r0, r4
   126bc:	bl	18498 <flatcc_builder_table_add_offset@@Base>
   126c0:	subs	r5, r0, #0
   126c4:	beq	12834 <create_monster_bottom_up@@Base+0x5c8>
   126c8:	mov	r3, #2
   126cc:	mov	r1, #1
   126d0:	str	r6, [r5]
   126d4:	mov	r2, r3
   126d8:	mov	r0, r4
   126dc:	bl	180cc <flatcc_builder_table_add@@Base>
   126e0:	subs	r5, r0, #0
   126e4:	beq	12834 <create_monster_bottom_up@@Base+0x5c8>
   126e8:	mov	r9, #0
   126ec:	b	12394 <create_monster_bottom_up@@Base+0x128>
   126f0:	mov	r1, r8
   126f4:	mov	r3, #4
   126f8:	mov	r2, #12
   126fc:	mov	r0, r4
   12700:	bl	180cc <flatcc_builder_table_add@@Base>
   12704:	cmp	r0, #0
   12708:	beq	12484 <create_monster_bottom_up@@Base+0x218>
   1270c:	mov	r1, #1065353216	; 0x3f800000
   12710:	mov	r2, #1073741824	; 0x40000000
   12714:	mov	r3, #0
   12718:	movt	r3, #16448	; 0x4040
   1271c:	cmp	sl, #0
   12720:	str	r1, [r0]
   12724:	str	r2, [r0, #4]
   12728:	str	r3, [r0, #8]
   1272c:	beq	12484 <create_monster_bottom_up@@Base+0x218>
   12730:	mov	r1, #3
   12734:	mov	r0, r4
   12738:	bl	18498 <flatcc_builder_table_add_offset@@Base>
   1273c:	cmp	r0, #0
   12740:	beq	12484 <create_monster_bottom_up@@Base+0x218>
   12744:	cmp	r6, #0
   12748:	str	sl, [r0]
   1274c:	beq	12484 <create_monster_bottom_up@@Base+0x218>
   12750:	mov	r1, #5
   12754:	mov	r0, r4
   12758:	bl	18498 <flatcc_builder_table_add_offset@@Base>
   1275c:	cmp	r0, #0
   12760:	beq	12484 <create_monster_bottom_up@@Base+0x218>
   12764:	cmp	r7, #0
   12768:	str	r6, [r0]
   1276c:	beq	12484 <create_monster_bottom_up@@Base+0x218>
   12770:	mov	r1, #7
   12774:	mov	r0, r4
   12778:	bl	18498 <flatcc_builder_table_add_offset@@Base>
   1277c:	cmp	r0, #0
   12780:	beq	12484 <create_monster_bottom_up@@Base+0x218>
   12784:	mov	r1, #9
   12788:	str	r7, [r0]
   1278c:	mov	r0, r4
   12790:	bl	18498 <flatcc_builder_table_add_offset@@Base>
   12794:	subs	r2, r0, #0
   12798:	beq	12484 <create_monster_bottom_up@@Base+0x218>
   1279c:	mov	r3, #2
   127a0:	mov	r0, r4
   127a4:	str	r5, [r2]
   127a8:	mov	r1, r3
   127ac:	mov	r2, r3
   127b0:	bl	180cc <flatcc_builder_table_add@@Base>
   127b4:	cmp	r0, #0
   127b8:	beq	12484 <create_monster_bottom_up@@Base+0x218>
   127bc:	mov	ip, #300	; 0x12c
   127c0:	mov	r3, #1
   127c4:	mov	r2, r3
   127c8:	mov	r1, #6
   127cc:	strh	ip, [r0]
   127d0:	mov	r0, r4
   127d4:	bl	180cc <flatcc_builder_table_add@@Base>
   127d8:	cmp	r0, #0
   127dc:	beq	12484 <create_monster_bottom_up@@Base+0x218>
   127e0:	mov	r5, #0
   127e4:	mov	r3, #1
   127e8:	mov	r2, r3
   127ec:	mov	r1, #8
   127f0:	strb	r5, [r0]
   127f4:	mov	r0, r4
   127f8:	bl	180cc <flatcc_builder_table_add@@Base>
   127fc:	subs	r3, r0, #0
   12800:	beq	12484 <create_monster_bottom_up@@Base+0x218>
   12804:	mov	ip, #1
   12808:	mov	r2, r5
   1280c:	ldr	r1, [pc, #160]	; 128b4 <create_monster_bottom_up@@Base+0x648>
   12810:	mov	r0, r4
   12814:	strb	ip, [r3]
   12818:	bl	16638 <flatcc_builder_check_required@@Base>
   1281c:	cmp	r0, r5
   12820:	beq	128ac <create_monster_bottom_up@@Base+0x640>
   12824:	mov	r0, r4
   12828:	bl	166d4 <flatcc_builder_end_table@@Base>
   1282c:	mov	r9, r0
   12830:	b	12484 <create_monster_bottom_up@@Base+0x218>
   12834:	mov	r0, r4
   12838:	movw	r1, #38480	; 0x9650
   1283c:	movt	r1, #1
   12840:	bl	17cdc <flatcc_builder_create_string_str@@Base>
   12844:	movw	r2, #37764	; 0x9384
   12848:	movt	r2, #1
   1284c:	ldrh	ip, [r2, #124]	; 0x7c
   12850:	mov	r3, #1
   12854:	mvn	r1, #0
   12858:	mov	sl, r0
   1285c:	mov	r0, r4
   12860:	ldrd	r6, [r2, #116]	; 0x74
   12864:	mov	r2, #10
   12868:	str	r3, [sp]
   1286c:	str	r1, [sp, #4]
   12870:	add	r1, sp, #12
   12874:	strd	r6, [sp, #12]
   12878:	strh	ip, [sp, #20]
   1287c:	bl	16894 <flatcc_builder_create_vector@@Base>
   12880:	mov	r6, r0
   12884:	mov	r0, r4
   12888:	bl	15734 <flatcc_builder_start_offset_vector@@Base>
   1288c:	b	12440 <create_monster_bottom_up@@Base+0x1d4>
   12890:	movw	r1, #38060	; 0x94ac
   12894:	movt	r1, #1
   12898:	ldr	r3, [pc, #24]	; 128b8 <create_monster_bottom_up@@Base+0x64c>
   1289c:	movw	r0, #38324	; 0x95b4
   128a0:	movt	r0, #1
   128a4:	mov	r2, #52	; 0x34
   128a8:	bl	11fd4 <__assert_fail@plt>
   128ac:	bl	12244 <_start@@Base+0x140>
   128b0:	ldrdeq	r9, [r1], -r8
   128b4:	andeq	r9, r1, r4, lsl #8
   128b8:	ldrdeq	r9, [r1], -ip

000128bc <create_monster_top_down@@Base>:
   128bc:	movw	r1, #37764	; 0x9384
   128c0:	movt	r1, #1
   128c4:	strd	r4, [sp, #-20]!	; 0xffffffec
   128c8:	ldrh	ip, [r1, #124]	; 0x7c
   128cc:	mov	r3, #0
   128d0:	mov	r4, r0
   128d4:	strd	r6, [sp, #8]
   128d8:	mov	r2, r3
   128dc:	ldrd	r6, [r1, #116]	; 0x74
   128e0:	mov	r1, r3
   128e4:	str	lr, [sp, #16]
   128e8:	sub	sp, sp, #28
   128ec:	strd	r6, [sp, #12]
   128f0:	strh	ip, [sp, #20]
   128f4:	bl	14268 <flatcc_builder_start_buffer@@Base>
   128f8:	cmp	r0, #0
   128fc:	bne	1290c <create_monster_top_down@@Base+0x50>
   12900:	mov	r1, #10
   12904:	mov	r0, r4
   12908:	bl	15d54 <flatcc_builder_start_table@@Base>
   1290c:	mov	r3, #4
   12910:	mov	r2, #12
   12914:	mov	r1, #0
   12918:	mov	r0, r4
   1291c:	bl	180cc <flatcc_builder_table_add@@Base>
   12920:	cmp	r0, #0
   12924:	beq	12944 <create_monster_top_down@@Base+0x88>
   12928:	mov	r1, #1065353216	; 0x3f800000
   1292c:	mov	r2, #1073741824	; 0x40000000
   12930:	mov	r3, #0
   12934:	movt	r3, #16448	; 0x4040
   12938:	str	r1, [r0]
   1293c:	str	r2, [r0, #4]
   12940:	str	r3, [r0, #8]
   12944:	mov	r3, #2
   12948:	mov	r0, r4
   1294c:	mov	r1, r3
   12950:	mov	r2, r3
   12954:	bl	180cc <flatcc_builder_table_add@@Base>
   12958:	cmp	r0, #0
   1295c:	movw	r1, #38480	; 0x9650
   12960:	movt	r1, #1
   12964:	movne	r3, #300	; 0x12c
   12968:	strhne	r3, [r0]
   1296c:	mov	r0, r4
   12970:	bl	17cdc <flatcc_builder_create_string_str@@Base>
   12974:	subs	r5, r0, #0
   12978:	beq	12990 <create_monster_top_down@@Base+0xd4>
   1297c:	mov	r1, #3
   12980:	mov	r0, r4
   12984:	bl	18498 <flatcc_builder_table_add_offset@@Base>
   12988:	cmp	r0, #0
   1298c:	strne	r5, [r0]
   12990:	mov	r2, #1
   12994:	mvn	ip, #0
   12998:	mov	r3, r2
   1299c:	add	r1, sp, #12
   129a0:	mov	r0, r4
   129a4:	stm	sp, {r2, ip}
   129a8:	mov	r2, #10
   129ac:	bl	16894 <flatcc_builder_create_vector@@Base>
   129b0:	subs	r5, r0, #0
   129b4:	beq	129cc <create_monster_top_down@@Base+0x110>
   129b8:	mov	r1, #5
   129bc:	mov	r0, r4
   129c0:	bl	18498 <flatcc_builder_table_add_offset@@Base>
   129c4:	cmp	r0, #0
   129c8:	strne	r5, [r0]
   129cc:	mov	r3, #1
   129d0:	mov	r1, #6
   129d4:	mov	r2, r3
   129d8:	mov	r0, r4
   129dc:	bl	180cc <flatcc_builder_table_add@@Base>
   129e0:	cmp	r0, #0
   129e4:	movne	r3, #0
   129e8:	strbne	r3, [r0]
   129ec:	mov	r0, r4
   129f0:	bl	15734 <flatcc_builder_start_offset_vector@@Base>
   129f4:	movw	r1, #38312	; 0x95a8
   129f8:	movt	r1, #1
   129fc:	mov	r0, r4
   12a00:	bl	17cdc <flatcc_builder_create_string_str@@Base>
   12a04:	mov	r5, r0
   12a08:	mov	r1, #2
   12a0c:	mov	r0, r4
   12a10:	bl	15d54 <flatcc_builder_start_table@@Base>
   12a14:	clz	r0, r0
   12a18:	cmp	r5, #0
   12a1c:	lsr	r0, r0, #5
   12a20:	moveq	r0, #0
   12a24:	cmp	r0, #0
   12a28:	beq	12a98 <create_monster_top_down@@Base+0x1dc>
   12a2c:	mov	r1, #0
   12a30:	mov	r0, r4
   12a34:	bl	18498 <flatcc_builder_table_add_offset@@Base>
   12a38:	cmp	r0, #0
   12a3c:	beq	12a98 <create_monster_top_down@@Base+0x1dc>
   12a40:	mov	r3, #2
   12a44:	mov	r1, #1
   12a48:	str	r5, [r0]
   12a4c:	mov	r2, r3
   12a50:	mov	r0, r4
   12a54:	bl	180cc <flatcc_builder_table_add@@Base>
   12a58:	subs	r3, r0, #0
   12a5c:	beq	12a98 <create_monster_top_down@@Base+0x1dc>
   12a60:	mov	ip, #3
   12a64:	mov	r2, #0
   12a68:	ldr	r1, [pc, #428]	; 12c1c <create_monster_top_down@@Base+0x360>
   12a6c:	mov	r0, r4
   12a70:	strh	ip, [r3]
   12a74:	bl	16638 <flatcc_builder_check_required@@Base>
   12a78:	cmp	r0, #0
   12a7c:	beq	12bf0 <create_monster_top_down@@Base+0x334>
   12a80:	mov	r0, r4
   12a84:	bl	166d4 <flatcc_builder_end_table@@Base>
   12a88:	subs	r1, r0, #0
   12a8c:	beq	12a98 <create_monster_top_down@@Base+0x1dc>
   12a90:	mov	r0, r4
   12a94:	bl	14d6c <flatcc_builder_offset_vector_push@@Base>
   12a98:	movw	r1, #38320	; 0x95b0
   12a9c:	movt	r1, #1
   12aa0:	mov	r0, r4
   12aa4:	bl	17cdc <flatcc_builder_create_string_str@@Base>
   12aa8:	mov	r5, r0
   12aac:	mov	r1, #2
   12ab0:	mov	r0, r4
   12ab4:	bl	15d54 <flatcc_builder_start_table@@Base>
   12ab8:	adds	r3, r5, #0
   12abc:	movne	r3, #1
   12ac0:	cmp	r0, #0
   12ac4:	moveq	r0, r3
   12ac8:	movne	r0, #0
   12acc:	cmp	r0, #0
   12ad0:	beq	12c10 <create_monster_top_down@@Base+0x354>
   12ad4:	mov	r1, #0
   12ad8:	mov	r0, r4
   12adc:	bl	18498 <flatcc_builder_table_add_offset@@Base>
   12ae0:	cmp	r0, #0
   12ae4:	beq	12c10 <create_monster_top_down@@Base+0x354>
   12ae8:	mov	r3, #2
   12aec:	mov	r1, #1
   12af0:	str	r5, [r0]
   12af4:	mov	r2, r3
   12af8:	mov	r0, r4
   12afc:	bl	180cc <flatcc_builder_table_add@@Base>
   12b00:	subs	r3, r0, #0
   12b04:	beq	12c10 <create_monster_top_down@@Base+0x354>
   12b08:	mov	ip, #5
   12b0c:	mov	r2, #0
   12b10:	ldr	r1, [pc, #260]	; 12c1c <create_monster_top_down@@Base+0x360>
   12b14:	mov	r0, r4
   12b18:	strh	ip, [r3]
   12b1c:	bl	16638 <flatcc_builder_check_required@@Base>
   12b20:	cmp	r0, #0
   12b24:	beq	12bf0 <create_monster_top_down@@Base+0x334>
   12b28:	mov	r0, r4
   12b2c:	bl	166d4 <flatcc_builder_end_table@@Base>
   12b30:	subs	r1, r0, #0
   12b34:	beq	12c10 <create_monster_top_down@@Base+0x354>
   12b38:	mov	r0, r4
   12b3c:	bl	14d6c <flatcc_builder_offset_vector_push@@Base>
   12b40:	ldr	r5, [r0]
   12b44:	mov	r0, r4
   12b48:	bl	16db4 <flatcc_builder_end_offset_vector@@Base>
   12b4c:	subs	r6, r0, #0
   12b50:	beq	12b68 <create_monster_top_down@@Base+0x2ac>
   12b54:	mov	r1, #7
   12b58:	mov	r0, r4
   12b5c:	bl	18498 <flatcc_builder_table_add_offset@@Base>
   12b60:	cmp	r0, #0
   12b64:	strne	r6, [r0]
   12b68:	cmp	r5, #0
   12b6c:	beq	12bac <create_monster_top_down@@Base+0x2f0>
   12b70:	mov	r3, #1
   12b74:	mov	r1, #8
   12b78:	mov	r2, r3
   12b7c:	mov	r0, r4
   12b80:	bl	180cc <flatcc_builder_table_add@@Base>
   12b84:	subs	r6, r0, #0
   12b88:	beq	12bac <create_monster_top_down@@Base+0x2f0>
   12b8c:	mov	r1, #9
   12b90:	mov	r0, r4
   12b94:	bl	18498 <flatcc_builder_table_add_offset@@Base>
   12b98:	cmp	r0, #0
   12b9c:	beq	12bac <create_monster_top_down@@Base+0x2f0>
   12ba0:	mov	r3, #1
   12ba4:	strb	r3, [r6]
   12ba8:	str	r5, [r0]
   12bac:	mov	r2, #0
   12bb0:	ldr	r1, [pc, #104]	; 12c20 <create_monster_top_down@@Base+0x364>
   12bb4:	mov	r0, r4
   12bb8:	bl	16638 <flatcc_builder_check_required@@Base>
   12bbc:	cmp	r0, #0
   12bc0:	beq	12c0c <create_monster_top_down@@Base+0x350>
   12bc4:	mov	r0, r4
   12bc8:	bl	166d4 <flatcc_builder_end_table@@Base>
   12bcc:	mov	r1, r0
   12bd0:	mov	r0, r4
   12bd4:	bl	14414 <flatcc_builder_end_buffer@@Base>
   12bd8:	mov	r0, #0
   12bdc:	add	sp, sp, #28
   12be0:	ldrd	r4, [sp]
   12be4:	ldrd	r6, [sp, #8]
   12be8:	add	sp, sp, #16
   12bec:	pop	{pc}		; (ldr pc, [sp], #4)
   12bf0:	movw	r1, #38060	; 0x94ac
   12bf4:	movt	r1, #1
   12bf8:	ldr	r3, [pc, #36]	; 12c24 <create_monster_top_down@@Base+0x368>
   12bfc:	movw	r0, #38324	; 0x95b4
   12c00:	movt	r0, #1
   12c04:	mov	r2, #52	; 0x34
   12c08:	bl	11fd4 <__assert_fail@plt>
   12c0c:	bl	12244 <_start@@Base+0x140>
   12c10:	mov	r3, #0
   12c14:	ldr	r3, [r3]
   12c18:	udf	#0
   12c1c:	ldrdeq	r9, [r1], -r8
   12c20:	andeq	r9, r1, r4, lsl #8
   12c24:	ldrdeq	r9, [r1], -ip

00012c28 <access_monster_buffer@@Base>:
   12c28:	cmp	r0, #0
   12c2c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12c30:	strd	r6, [sp, #8]
   12c34:	str	r8, [sp, #16]
   12c38:	str	lr, [sp, #20]
   12c3c:	beq	12cfc <access_monster_buffer@@Base+0xd4>
   12c40:	ldr	r3, [r0]
   12c44:	adds	r6, r0, r3
   12c48:	beq	12cfc <access_monster_buffer@@Base+0xd4>
   12c4c:	ldr	r4, [r0, r3]
   12c50:	sub	r4, r6, r4
   12c54:	ldrh	r5, [r4]
   12c58:	cmp	r5, #9
   12c5c:	bls	12f28 <access_monster_buffer@@Base+0x300>
   12c60:	ldrh	r3, [r4, #8]
   12c64:	cmp	r3, #0
   12c68:	moveq	r1, #100	; 0x64
   12c6c:	ldrshne	r1, [r6, r3]
   12c70:	ldrh	r7, [r4, #6]
   12c74:	cmp	r7, #0
   12c78:	beq	12f9c <access_monster_buffer@@Base+0x374>
   12c7c:	ldrsh	r2, [r6, r7]
   12c80:	cmp	r5, #11
   12c84:	bls	13170 <access_monster_buffer@@Base+0x548>
   12c88:	ldrh	r0, [r4, #10]
   12c8c:	cmp	r0, #0
   12c90:	beq	12f78 <access_monster_buffer@@Base+0x350>
   12c94:	ldr	r3, [r6, r0]
   12c98:	add	r0, r6, r0
   12c9c:	add	r3, r3, #4
   12ca0:	adds	r0, r0, r3
   12ca4:	beq	12f78 <access_monster_buffer@@Base+0x350>
   12ca8:	ldr	r8, [r0, #-4]
   12cac:	cmp	r1, #300	; 0x12c
   12cb0:	bne	12f30 <access_monster_buffer@@Base+0x308>
   12cb4:	cmp	r2, #150	; 0x96
   12cb8:	bne	1306c <access_monster_buffer@@Base+0x444>
   12cbc:	movw	r1, #38480	; 0x9650
   12cc0:	movt	r1, #1
   12cc4:	bl	11f2c <strcmp@plt>
   12cc8:	cmp	r0, #0
   12ccc:	bne	130a4 <access_monster_buffer@@Base+0x47c>
   12cd0:	cmp	r8, #3
   12cd4:	bne	13088 <access_monster_buffer@@Base+0x460>
   12cd8:	cmp	r5, #9
   12cdc:	bhi	12d18 <access_monster_buffer@@Base+0xf0>
   12ce0:	movw	r1, #38484	; 0x9654
   12ce4:	movt	r1, #1
   12ce8:	ldr	r3, [pc, #1100]	; 1313c <access_monster_buffer@@Base+0x514>
   12cec:	movw	r0, #40680	; 0x9ee8
   12cf0:	movt	r0, #1
   12cf4:	mov	r2, #227	; 0xe3
   12cf8:	bl	11fd4 <__assert_fail@plt>
   12cfc:	movw	r1, #38484	; 0x9654
   12d00:	movt	r1, #1
   12d04:	ldr	r3, [pc, #1072]	; 1313c <access_monster_buffer@@Base+0x514>
   12d08:	movw	r0, #40680	; 0x9ee8
   12d0c:	movt	r0, #1
   12d10:	mov	r2, #211	; 0xd3
   12d14:	bl	11fd4 <__assert_fail@plt>
   12d18:	ldrh	r3, [r4, #8]
   12d1c:	cmp	r3, #0
   12d20:	beq	12ce0 <access_monster_buffer@@Base+0xb8>
   12d24:	cmp	r7, #0
   12d28:	bne	12ffc <access_monster_buffer@@Base+0x3d4>
   12d2c:	ldrh	r3, [r4, #4]
   12d30:	cmp	r3, #0
   12d34:	beq	13018 <access_monster_buffer@@Base+0x3f0>
   12d38:	adds	r3, r6, r3
   12d3c:	beq	13018 <access_monster_buffer@@Base+0x3f0>
   12d40:	vldr	s15, [pc, #1000]	; 13130 <access_monster_buffer@@Base+0x508>
   12d44:	vldr	s12, [r3]
   12d48:	vldr	s13, [r3, #4]
   12d4c:	vldr	s14, [r3, #8]
   12d50:	vcmp.f32	s12, s15
   12d54:	vmrs	APSR_nzcv, fpscr
   12d58:	bne	13034 <access_monster_buffer@@Base+0x40c>
   12d5c:	vldr	s15, [pc, #976]	; 13134 <access_monster_buffer@@Base+0x50c>
   12d60:	vcmp.f32	s13, s15
   12d64:	vmrs	APSR_nzcv, fpscr
   12d68:	bne	13050 <access_monster_buffer@@Base+0x428>
   12d6c:	vldr	s15, [pc, #964]	; 13138 <access_monster_buffer@@Base+0x510>
   12d70:	vcmp.f32	s14, s15
   12d74:	vmrs	APSR_nzcv, fpscr
   12d78:	bne	130c0 <access_monster_buffer@@Base+0x498>
   12d7c:	cmp	r5, #15
   12d80:	bls	130dc <access_monster_buffer@@Base+0x4b4>
   12d84:	ldrh	r3, [r4, #14]
   12d88:	cmp	r3, #0
   12d8c:	beq	130dc <access_monster_buffer@@Base+0x4b4>
   12d90:	ldr	r2, [r6, r3]
   12d94:	add	r3, r6, r3
   12d98:	add	r2, r2, #4
   12d9c:	adds	r3, r3, r2
   12da0:	beq	130dc <access_monster_buffer@@Base+0x4b4>
   12da4:	ldr	r2, [r3, #-4]
   12da8:	cmp	r2, #10
   12dac:	bne	130f8 <access_monster_buffer@@Base+0x4d0>
   12db0:	ldrb	r3, [r3, #2]
   12db4:	cmp	r3, #2
   12db8:	bne	13114 <access_monster_buffer@@Base+0x4ec>
   12dbc:	cmp	r5, #19
   12dc0:	bls	12f80 <access_monster_buffer@@Base+0x358>
   12dc4:	ldrh	r3, [r4, #18]
   12dc8:	cmp	r3, #0
   12dcc:	beq	12f80 <access_monster_buffer@@Base+0x358>
   12dd0:	ldr	r2, [r6, r3]
   12dd4:	add	r3, r6, r3
   12dd8:	add	r2, r2, #4
   12ddc:	adds	r3, r3, r2
   12de0:	beq	12f80 <access_monster_buffer@@Base+0x358>
   12de4:	ldr	r2, [r3, #-4]
   12de8:	cmp	r2, #2
   12dec:	bne	12f80 <access_monster_buffer@@Base+0x358>
   12df0:	ldr	r2, [r3, #4]
   12df4:	add	r2, r2, #4
   12df8:	adds	r1, r3, r2
   12dfc:	beq	12fc0 <access_monster_buffer@@Base+0x398>
   12e00:	ldr	r3, [r3, r2]
   12e04:	sub	r3, r1, r3
   12e08:	ldrh	r2, [r3]
   12e0c:	cmp	r2, #5
   12e10:	bls	12fa4 <access_monster_buffer@@Base+0x37c>
   12e14:	ldrh	r0, [r3, #4]
   12e18:	cmp	r0, #0
   12e1c:	beq	12fa4 <access_monster_buffer@@Base+0x37c>
   12e20:	ldr	ip, [r1, r0]
   12e24:	cmp	r2, #7
   12e28:	add	r0, r1, r0
   12e2c:	movls	r7, #0
   12e30:	add	r2, ip, #4
   12e34:	add	r0, r0, r2
   12e38:	bls	12e48 <access_monster_buffer@@Base+0x220>
   12e3c:	ldrh	r7, [r3, #6]
   12e40:	cmp	r7, #0
   12e44:	ldrshne	r7, [r1, r7]
   12e48:	cmp	r0, #0
   12e4c:	beq	12fa4 <access_monster_buffer@@Base+0x37c>
   12e50:	movw	r1, #38320	; 0x95b0
   12e54:	movt	r1, #1
   12e58:	bl	11f2c <strcmp@plt>
   12e5c:	cmp	r0, #0
   12e60:	bne	12fa4 <access_monster_buffer@@Base+0x37c>
   12e64:	cmp	r7, #5
   12e68:	bne	13140 <access_monster_buffer@@Base+0x518>
   12e6c:	cmp	r5, #21
   12e70:	bls	12f60 <access_monster_buffer@@Base+0x338>
   12e74:	ldrh	r3, [r4, #20]
   12e78:	cmp	r3, #0
   12e7c:	beq	12f60 <access_monster_buffer@@Base+0x338>
   12e80:	ldrb	r3, [r6, r3]
   12e84:	cmp	r3, #1
   12e88:	bne	12f60 <access_monster_buffer@@Base+0x338>
   12e8c:	cmp	r5, #23
   12e90:	bls	12fc0 <access_monster_buffer@@Base+0x398>
   12e94:	ldrh	r3, [r4, #22]
   12e98:	cmp	r3, #0
   12e9c:	beq	12fc0 <access_monster_buffer@@Base+0x398>
   12ea0:	ldr	r2, [r6, r3]
   12ea4:	add	r6, r6, r3
   12ea8:	adds	r7, r6, r2
   12eac:	beq	12fc0 <access_monster_buffer@@Base+0x398>
   12eb0:	ldr	r4, [r6, r2]
   12eb4:	sub	r4, r7, r4
   12eb8:	ldrh	r5, [r4]
   12ebc:	cmp	r5, #5
   12ec0:	bls	12fc4 <access_monster_buffer@@Base+0x39c>
   12ec4:	ldrh	r0, [r4, #4]
   12ec8:	cmp	r0, #0
   12ecc:	beq	12ee0 <access_monster_buffer@@Base+0x2b8>
   12ed0:	ldr	r3, [r7, r0]
   12ed4:	add	r0, r7, r0
   12ed8:	add	r3, r3, #4
   12edc:	add	r0, r0, r3
   12ee0:	movw	r1, #38320	; 0x95b0
   12ee4:	movt	r1, #1
   12ee8:	bl	11f2c <strcmp@plt>
   12eec:	cmp	r5, #7
   12ef0:	mov	r3, r0
   12ef4:	bls	12fd8 <access_monster_buffer@@Base+0x3b0>
   12ef8:	ldrh	r3, [r4, #6]
   12efc:	cmp	r3, #0
   12f00:	bne	12f4c <access_monster_buffer@@Base+0x324>
   12f04:	cmp	r0, #0
   12f08:	bne	12fe0 <access_monster_buffer@@Base+0x3b8>
   12f0c:	movw	r1, #38484	; 0x9654
   12f10:	movt	r1, #1
   12f14:	ldr	r3, [pc, #544]	; 1313c <access_monster_buffer@@Base+0x514>
   12f18:	movw	r0, #40680	; 0x9ee8
   12f1c:	movt	r0, #1
   12f20:	movw	r2, #287	; 0x11f
   12f24:	bl	11fd4 <__assert_fail@plt>
   12f28:	cmp	r5, #7
   12f2c:	bhi	1315c <access_monster_buffer@@Base+0x534>
   12f30:	movw	r1, #38484	; 0x9654
   12f34:	movt	r1, #1
   12f38:	ldr	r3, [pc, #508]	; 1313c <access_monster_buffer@@Base+0x514>
   12f3c:	movw	r0, #40680	; 0x9ee8
   12f40:	movt	r0, #1
   12f44:	mov	r2, #219	; 0xdb
   12f48:	bl	11fd4 <__assert_fail@plt>
   12f4c:	cmp	r0, #0
   12f50:	ldrsh	r3, [r7, r3]
   12f54:	bne	12fe0 <access_monster_buffer@@Base+0x3b8>
   12f58:	cmp	r3, #5
   12f5c:	bne	12f0c <access_monster_buffer@@Base+0x2e4>
   12f60:	ldrd	r4, [sp]
   12f64:	mov	r0, #0
   12f68:	ldrd	r6, [sp, #8]
   12f6c:	ldr	r8, [sp, #16]
   12f70:	add	sp, sp, #20
   12f74:	pop	{pc}		; (ldr pc, [sp], #4)
   12f78:	mov	r8, r0
   12f7c:	b	12cac <access_monster_buffer@@Base+0x84>
   12f80:	movw	r1, #38484	; 0x9654
   12f84:	movt	r1, #1
   12f88:	ldr	r3, [pc, #428]	; 1313c <access_monster_buffer@@Base+0x514>
   12f8c:	movw	r0, #40680	; 0x9ee8
   12f90:	movt	r0, #1
   12f94:	movw	r2, #271	; 0x10f
   12f98:	bl	11fd4 <__assert_fail@plt>
   12f9c:	mov	r2, #150	; 0x96
   12fa0:	b	12c80 <access_monster_buffer@@Base+0x58>
   12fa4:	movw	r1, #38484	; 0x9654
   12fa8:	movt	r1, #1
   12fac:	ldr	r3, [pc, #392]	; 1313c <access_monster_buffer@@Base+0x514>
   12fb0:	movw	r0, #40680	; 0x9ee8
   12fb4:	movt	r0, #1
   12fb8:	movw	r2, #275	; 0x113
   12fbc:	bl	11fd4 <__assert_fail@plt>
   12fc0:	bl	121f4 <_start@@Base+0xf0>
   12fc4:	movw	r1, #38320	; 0x95b0
   12fc8:	movt	r1, #1
   12fcc:	mov	r0, #0
   12fd0:	bl	11f2c <strcmp@plt>
   12fd4:	mov	r3, r0
   12fd8:	cmp	r3, #0
   12fdc:	beq	12f0c <access_monster_buffer@@Base+0x2e4>
   12fe0:	movw	r1, #38484	; 0x9654
   12fe4:	movt	r1, #1
   12fe8:	ldr	r3, [pc, #332]	; 1313c <access_monster_buffer@@Base+0x514>
   12fec:	movw	r0, #40680	; 0x9ee8
   12ff0:	movt	r0, #1
   12ff4:	movw	r2, #286	; 0x11e
   12ff8:	bl	11fd4 <__assert_fail@plt>
   12ffc:	movw	r1, #38484	; 0x9654
   13000:	movt	r1, #1
   13004:	ldr	r3, [pc, #304]	; 1313c <access_monster_buffer@@Base+0x514>
   13008:	movw	r0, #40680	; 0x9ee8
   1300c:	movt	r0, #1
   13010:	mov	r2, #228	; 0xe4
   13014:	bl	11fd4 <__assert_fail@plt>
   13018:	movw	r1, #38484	; 0x9654
   1301c:	movt	r1, #1
   13020:	ldr	r3, [pc, #276]	; 1313c <access_monster_buffer@@Base+0x514>
   13024:	movw	r0, #40680	; 0x9ee8
   13028:	movt	r0, #1
   1302c:	mov	r2, #232	; 0xe8
   13030:	bl	11fd4 <__assert_fail@plt>
   13034:	movw	r1, #38484	; 0x9654
   13038:	movt	r1, #1
   1303c:	ldr	r3, [pc, #248]	; 1313c <access_monster_buffer@@Base+0x514>
   13040:	movw	r0, #40680	; 0x9ee8
   13044:	movt	r0, #1
   13048:	mov	r2, #240	; 0xf0
   1304c:	bl	11fd4 <__assert_fail@plt>
   13050:	movw	r1, #38484	; 0x9654
   13054:	movt	r1, #1
   13058:	ldr	r3, [pc, #220]	; 1313c <access_monster_buffer@@Base+0x514>
   1305c:	movw	r0, #40680	; 0x9ee8
   13060:	movt	r0, #1
   13064:	mov	r2, #241	; 0xf1
   13068:	bl	11fd4 <__assert_fail@plt>
   1306c:	movw	r1, #38484	; 0x9654
   13070:	movt	r1, #1
   13074:	ldr	r3, [pc, #192]	; 1313c <access_monster_buffer@@Base+0x514>
   13078:	movw	r0, #40680	; 0x9ee8
   1307c:	movt	r0, #1
   13080:	mov	r2, #221	; 0xdd
   13084:	bl	11fd4 <__assert_fail@plt>
   13088:	movw	r1, #38484	; 0x9654
   1308c:	movt	r1, #1
   13090:	ldr	r3, [pc, #164]	; 1313c <access_monster_buffer@@Base+0x514>
   13094:	movw	r0, #40680	; 0x9ee8
   13098:	movt	r0, #1
   1309c:	mov	r2, #223	; 0xdf
   130a0:	bl	11fd4 <__assert_fail@plt>
   130a4:	movw	r1, #38484	; 0x9654
   130a8:	movt	r1, #1
   130ac:	ldr	r3, [pc, #136]	; 1313c <access_monster_buffer@@Base+0x514>
   130b0:	movw	r0, #40680	; 0x9ee8
   130b4:	movt	r0, #1
   130b8:	mov	r2, #222	; 0xde
   130bc:	bl	11fd4 <__assert_fail@plt>
   130c0:	movw	r1, #38484	; 0x9654
   130c4:	movt	r1, #1
   130c8:	ldr	r3, [pc, #108]	; 1313c <access_monster_buffer@@Base+0x514>
   130cc:	movw	r0, #40680	; 0x9ee8
   130d0:	movt	r0, #1
   130d4:	mov	r2, #242	; 0xf2
   130d8:	bl	11fd4 <__assert_fail@plt>
   130dc:	movw	r1, #38484	; 0x9654
   130e0:	movt	r1, #1
   130e4:	ldr	r3, [pc, #80]	; 1313c <access_monster_buffer@@Base+0x514>
   130e8:	movw	r0, #40680	; 0x9ee8
   130ec:	movt	r0, #1
   130f0:	movw	r2, #261	; 0x105
   130f4:	bl	11fd4 <__assert_fail@plt>
   130f8:	movw	r1, #38484	; 0x9654
   130fc:	movt	r1, #1
   13100:	ldr	r3, [pc, #52]	; 1313c <access_monster_buffer@@Base+0x514>
   13104:	movw	r0, #40680	; 0x9ee8
   13108:	movt	r0, #1
   1310c:	movw	r2, #263	; 0x107
   13110:	bl	11fd4 <__assert_fail@plt>
   13114:	movw	r1, #38484	; 0x9654
   13118:	movt	r1, #1
   1311c:	ldr	r3, [pc, #24]	; 1313c <access_monster_buffer@@Base+0x514>
   13120:	movw	r0, #40680	; 0x9ee8
   13124:	movt	r0, #1
   13128:	movw	r2, #267	; 0x10b
   1312c:	bl	11fd4 <__assert_fail@plt>
   13130:	svccc	0x00800000
   13134:	andmi	r0, r0, r0
   13138:	submi	r0, r0, r0
   1313c:	andeq	r9, r1, r8, lsl #8
   13140:	movw	r1, #38484	; 0x9654
   13144:	movt	r1, #1
   13148:	ldr	r3, [pc, #-20]	; 1313c <access_monster_buffer@@Base+0x514>
   1314c:	movw	r0, #40680	; 0x9ee8
   13150:	movt	r0, #1
   13154:	mov	r2, #276	; 0x114
   13158:	bl	11fd4 <__assert_fail@plt>
   1315c:	ldrh	r7, [r4, #6]
   13160:	cmp	r7, #0
   13164:	movne	r1, #100	; 0x64
   13168:	bne	12c7c <access_monster_buffer@@Base+0x54>
   1316c:	b	12f30 <access_monster_buffer@@Base+0x308>
   13170:	mov	r0, #0
   13174:	mov	r8, r0
   13178:	b	12cac <access_monster_buffer@@Base+0x84>

0001317c <flatcc_builder_default_alloc@@Base>:
   1317c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13180:	subs	r5, r2, #0
   13184:	strd	r6, [sp, #8]
   13188:	mov	r6, r1
   1318c:	str	r8, [sp, #16]
   13190:	str	lr, [sp, #20]
   13194:	beq	131cc <flatcc_builder_default_alloc@@Base+0x50>
   13198:	mov	r7, r3
   1319c:	ldr	r3, [sp, #24]
   131a0:	sub	r2, r3, #1
   131a4:	cmp	r2, #6
   131a8:	ldrls	pc, [pc, r2, lsl #2]
   131ac:	b	1327c <flatcc_builder_default_alloc@@Base+0x100>
   131b0:	strdeq	r3, [r1], -ip
   131b4:	andeq	r3, r1, ip, ror r2
   131b8:	andeq	r3, r1, ip, ror r2
   131bc:	andeq	r3, r1, r4, ror r2
   131c0:	andeq	r3, r1, r4, ror #4
   131c4:	andeq	r3, r1, ip, ror r2
   131c8:	andeq	r3, r1, ip, ror #4
   131cc:	ldr	r0, [r1]
   131d0:	cmp	r0, #0
   131d4:	beq	131e8 <flatcc_builder_default_alloc@@Base+0x6c>
   131d8:	bl	11f38 <free@plt>
   131dc:	mov	r0, r5
   131e0:	str	r5, [r6]
   131e4:	str	r5, [r6, #4]
   131e8:	ldrd	r4, [sp]
   131ec:	ldrd	r6, [sp, #8]
   131f0:	ldr	r8, [sp, #16]
   131f4:	add	sp, sp, #20
   131f8:	pop	{pc}		; (ldr pc, [sp], #4)
   131fc:	mov	r4, #256	; 0x100
   13200:	cmp	r4, r5
   13204:	bcs	13214 <flatcc_builder_default_alloc@@Base+0x98>
   13208:	lsl	r4, r4, #1
   1320c:	cmp	r5, r4
   13210:	bhi	13208 <flatcc_builder_default_alloc@@Base+0x8c>
   13214:	ldr	r2, [r6, #4]
   13218:	cmp	r5, r2
   1321c:	bhi	1322c <flatcc_builder_default_alloc@@Base+0xb0>
   13220:	cmp	r4, r2, lsr #1
   13224:	movls	r0, #0
   13228:	bls	131e8 <flatcc_builder_default_alloc@@Base+0x6c>
   1322c:	mov	r1, r4
   13230:	ldr	r0, [r6]
   13234:	bl	11f5c <realloc@plt>
   13238:	subs	r5, r0, #0
   1323c:	beq	13298 <flatcc_builder_default_alloc@@Base+0x11c>
   13240:	cmp	r7, #0
   13244:	beq	13254 <flatcc_builder_default_alloc@@Base+0xd8>
   13248:	ldr	r0, [r6, #4]
   1324c:	cmp	r0, r4
   13250:	bcc	13284 <flatcc_builder_default_alloc@@Base+0x108>
   13254:	mov	r0, #0
   13258:	str	r5, [r6]
   1325c:	str	r4, [r6, #4]
   13260:	b	131e8 <flatcc_builder_default_alloc@@Base+0x6c>
   13264:	mov	r4, r5
   13268:	b	13214 <flatcc_builder_default_alloc@@Base+0x98>
   1326c:	mov	r4, #64	; 0x40
   13270:	b	13200 <flatcc_builder_default_alloc@@Base+0x84>
   13274:	mov	r4, #288	; 0x120
   13278:	b	13200 <flatcc_builder_default_alloc@@Base+0x84>
   1327c:	mov	r4, #32
   13280:	b	13200 <flatcc_builder_default_alloc@@Base+0x84>
   13284:	sub	r2, r4, r0
   13288:	mov	r1, #0
   1328c:	add	r0, r5, r0
   13290:	bl	11fb0 <memset@plt>
   13294:	b	13254 <flatcc_builder_default_alloc@@Base+0xd8>
   13298:	mvn	r0, #0
   1329c:	b	131e8 <flatcc_builder_default_alloc@@Base+0x6c>
   132a0:	movw	r3, #38616	; 0x96d8
   132a4:	movt	r3, #1
   132a8:	str	r4, [sp, #-8]!
   132ac:	movw	r1, #40488	; 0x9e28
   132b0:	movt	r1, #1
   132b4:	str	lr, [sp, #4]
   132b8:	movw	r0, #40680	; 0x9ee8
   132bc:	movt	r0, #1
   132c0:	mov	r2, #308	; 0x134
   132c4:	bl	11fd4 <__assert_fail@plt>
   132c8:	movw	r1, #40488	; 0x9e28
   132cc:	movt	r1, #1
   132d0:	ldr	r3, [pc, #20]	; 132ec <flatcc_builder_default_alloc@@Base+0x170>
   132d4:	movw	r0, #40680	; 0x9ee8
   132d8:	movt	r0, #1
   132dc:	str	r4, [sp, #-8]!
   132e0:	movw	r2, #677	; 0x2a5
   132e4:	str	lr, [sp, #4]
   132e8:	bl	11fd4 <__assert_fail@plt>
   132ec:	andeq	r9, r1, r8, ror #13
   132f0:	movw	r1, #40488	; 0x9e28
   132f4:	movt	r1, #1
   132f8:	ldr	r3, [pc, #20]	; 13314 <flatcc_builder_default_alloc@@Base+0x198>
   132fc:	movw	r0, #40680	; 0x9ee8
   13300:	movt	r0, #1
   13304:	str	r4, [sp, #-8]!
   13308:	movw	r2, #702	; 0x2be
   1330c:	str	lr, [sp, #4]
   13310:	bl	11fd4 <__assert_fail@plt>
   13314:	strdeq	r9, [r1], -r4
   13318:	movw	r1, #40488	; 0x9e28
   1331c:	movt	r1, #1
   13320:	ldr	r3, [pc, #20]	; 1333c <flatcc_builder_default_alloc@@Base+0x1c0>
   13324:	movw	r0, #40680	; 0x9ee8
   13328:	movt	r0, #1
   1332c:	str	r4, [sp, #-8]!
   13330:	movw	r2, #651	; 0x28b
   13334:	str	lr, [sp, #4]
   13338:	bl	11fd4 <__assert_fail@plt>
   1333c:	andeq	r9, r1, r4, lsl #14
   13340:	movw	r1, #40488	; 0x9e28
   13344:	movt	r1, #1
   13348:	ldr	r3, [pc, #20]	; 13364 <flatcc_builder_default_alloc@@Base+0x1e8>
   1334c:	movw	r0, #40560	; 0x9e70
   13350:	movt	r0, #1
   13354:	str	r4, [sp, #-8]!
   13358:	mov	r2, #892	; 0x37c
   1335c:	str	lr, [sp, #4]
   13360:	bl	11fd4 <__assert_fail@plt>
   13364:	andeq	r9, r1, r0, lsl r7
   13368:	movw	r1, #40488	; 0x9e28
   1336c:	movt	r1, #1
   13370:	ldr	r3, [pc, #20]	; 1338c <flatcc_builder_default_alloc@@Base+0x210>
   13374:	movw	r0, #40588	; 0x9e8c
   13378:	movt	r0, #1
   1337c:	str	r4, [sp, #-8]!
   13380:	movw	r2, #542	; 0x21e
   13384:	str	lr, [sp, #4]
   13388:	bl	11fd4 <__assert_fail@plt>
   1338c:	andeq	r9, r1, r4, lsr #14
   13390:	movw	r1, #40488	; 0x9e28
   13394:	movt	r1, #1
   13398:	ldr	r3, [pc, #20]	; 133b4 <flatcc_builder_default_alloc@@Base+0x238>
   1339c:	movw	r0, #40616	; 0x9ea8
   133a0:	movt	r0, #1
   133a4:	str	r4, [sp, #-8]!
   133a8:	movw	r2, #966	; 0x3c6
   133ac:	str	lr, [sp, #4]
   133b0:	bl	11fd4 <__assert_fail@plt>
   133b4:	andeq	r9, r1, r4, asr #14
   133b8:	movw	r1, #40488	; 0x9e28
   133bc:	movt	r1, #1
   133c0:	ldr	r3, [pc, #20]	; 133dc <flatcc_builder_default_alloc@@Base+0x260>
   133c4:	movw	r0, #40660	; 0x9ed4
   133c8:	movt	r0, #1
   133cc:	str	r4, [sp, #-8]!
   133d0:	movw	r2, #1926	; 0x786
   133d4:	str	lr, [sp, #4]
   133d8:	bl	11fd4 <__assert_fail@plt>
   133dc:	andeq	r9, r1, r4, ror #14
   133e0:	ldrd	r2, [r0, #156]	; 0x9c
   133e4:	strd	r4, [sp, #-20]!	; 0xffffffec
   133e8:	mov	r5, r1
   133ec:	mov	r4, r0
   133f0:	strd	r6, [sp, #8]
   133f4:	str	lr, [sp, #16]
   133f8:	sub	sp, sp, #12
   133fc:	add	r1, r2, #1
   13400:	cmp	r1, r3
   13404:	str	r1, [r0, #156]	; 0x9c
   13408:	ble	134e8 <flatcc_builder_default_alloc@@Base+0x36c>
   1340c:	ldr	r3, [r0, #176]	; 0xb0
   13410:	cmp	r1, r3
   13414:	cmpgt	r3, #0
   13418:	movgt	r3, #1
   1341c:	movle	r3, #0
   13420:	bgt	134f8 <flatcc_builder_default_alloc@@Base+0x37c>
   13424:	add	r2, r2, r2, lsl #3
   13428:	ldr	r1, [r0, #88]	; 0x58
   1342c:	lsl	r6, r2, #2
   13430:	add	r2, r6, #36	; 0x24
   13434:	cmp	r2, r1
   13438:	bls	1345c <flatcc_builder_default_alloc@@Base+0x2e0>
   1343c:	mov	ip, #4
   13440:	add	r1, r0, #84	; 0x54
   13444:	ldr	r0, [r0, #40]	; 0x28
   13448:	str	ip, [sp]
   1344c:	ldr	r7, [r4, #48]	; 0x30
   13450:	blx	r7
   13454:	cmp	r0, #0
   13458:	bne	13500 <flatcc_builder_default_alloc@@Base+0x384>
   1345c:	ldr	r2, [r4, #84]	; 0x54
   13460:	add	r2, r2, r6
   13464:	cmp	r2, #0
   13468:	str	r2, [r4, #32]
   1346c:	beq	134f8 <flatcc_builder_default_alloc@@Base+0x37c>
   13470:	ldr	r3, [r4, #88]	; 0x58
   13474:	movw	r0, #36409	; 0x8e39
   13478:	movt	r0, #14563	; 0x38e3
   1347c:	ldr	r1, [r4, #176]	; 0xb0
   13480:	umull	r0, r3, r0, r3
   13484:	lsr	r3, r3, #3
   13488:	cmp	r3, r1
   1348c:	cmpgt	r1, #0
   13490:	movgt	r3, r1
   13494:	str	r3, [r4, #160]	; 0xa0
   13498:	ldr	r3, [r4, #20]
   1349c:	mov	r1, #0
   134a0:	mvn	lr, #3
   134a4:	mov	r0, r1
   134a8:	ldr	ip, [r4, #28]
   134ac:	ldrh	r6, [r4, #130]	; 0x82
   134b0:	str	r3, [r2, #8]
   134b4:	add	r3, r3, ip
   134b8:	add	r3, r3, #7
   134bc:	bic	r3, r3, #7
   134c0:	strh	r6, [r2, #12]
   134c4:	strh	r5, [r4, #130]	; 0x82
   134c8:	stm	r2, {ip, lr}
   134cc:	str	r1, [r4, #20]
   134d0:	str	r3, [r4, #28]
   134d4:	add	sp, sp, #12
   134d8:	ldrd	r4, [sp]
   134dc:	ldrd	r6, [sp, #8]
   134e0:	add	sp, sp, #16
   134e4:	pop	{pc}		; (ldr pc, [sp], #4)
   134e8:	ldr	r2, [r0, #32]
   134ec:	add	r2, r2, #36	; 0x24
   134f0:	str	r2, [r0, #32]
   134f4:	b	13498 <flatcc_builder_default_alloc@@Base+0x31c>
   134f8:	mvn	r0, #0
   134fc:	b	134d4 <flatcc_builder_default_alloc@@Base+0x358>
   13500:	bl	132a0 <flatcc_builder_default_alloc@@Base+0x124>
   13504:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13508:	mov	r4, r0
   1350c:	ldrh	r0, [r0, #128]	; 0x80
   13510:	strd	r6, [sp, #8]
   13514:	mov	r6, #4
   13518:	ldr	r5, [r4, #136]	; 0x88
   1351c:	str	lr, [sp, #20]
   13520:	mov	lr, r2
   13524:	str	r8, [sp, #16]
   13528:	sub	sp, sp, #88	; 0x58
   1352c:	cmp	r0, #3
   13530:	add	r0, sp, #12
   13534:	movls	r2, #4
   13538:	str	lr, [sp, #12]
   1353c:	str	r6, [sp, #16]
   13540:	strhls	r2, [r4, #128]	; 0x80
   13544:	mov	r2, #1
   13548:	lsls	ip, lr, #2
   1354c:	moveq	r7, #2
   13550:	str	r2, [sp, #20]
   13554:	str	r0, [sp, #24]
   13558:	and	r0, r5, #3
   1355c:	str	r6, [sp, #28]
   13560:	beq	13584 <flatcc_builder_default_alloc@@Base+0x408>
   13564:	mov	r8, #2
   13568:	add	r6, ip, r6
   1356c:	mov	r2, r8
   13570:	mov	r7, #3
   13574:	str	r6, [sp, #16]
   13578:	str	r8, [sp, #20]
   1357c:	str	r1, [sp, #32]
   13580:	str	ip, [sp, #36]	; 0x24
   13584:	cmp	r0, #0
   13588:	beq	135b0 <flatcc_builder_default_alloc@@Base+0x434>
   1358c:	ldr	r8, [pc, #360]	; 136fc <flatcc_builder_default_alloc@@Base+0x580>
   13590:	add	r2, r2, #1
   13594:	add	ip, sp, #88	; 0x58
   13598:	add	ip, ip, r2, lsl #3
   1359c:	add	r6, r6, r0
   135a0:	mov	r2, r7
   135a4:	strd	r6, [sp, #16]
   135a8:	str	r8, [ip, #-72]	; 0xffffffb8
   135ac:	str	r0, [ip, #-68]	; 0xffffffbc
   135b0:	cmp	lr, #0
   135b4:	beq	13644 <flatcc_builder_default_alloc@@Base+0x4c8>
   135b8:	cmp	r3, #0
   135bc:	subne	r5, r1, r5
   135c0:	addne	lr, r3, lr
   135c4:	addne	r5, r5, r6
   135c8:	bne	135f4 <flatcc_builder_default_alloc@@Base+0x478>
   135cc:	b	136ac <flatcc_builder_default_alloc@@Base+0x530>
   135d0:	sub	ip, r5, r1
   135d4:	add	r0, ip, r0
   135d8:	str	r0, [r1, #-4]
   135dc:	ldrb	r0, [r3]
   135e0:	cmp	r0, #0
   135e4:	beq	13690 <flatcc_builder_default_alloc@@Base+0x514>
   135e8:	add	r3, r3, #1
   135ec:	cmp	r3, lr
   135f0:	beq	13640 <flatcc_builder_default_alloc@@Base+0x4c4>
   135f4:	ldr	r0, [r1], #4
   135f8:	cmp	r0, #0
   135fc:	bne	135d0 <flatcc_builder_default_alloc@@Base+0x454>
   13600:	ldrb	r0, [r3]
   13604:	cmp	r0, #0
   13608:	beq	135e8 <flatcc_builder_default_alloc@@Base+0x46c>
   1360c:	movw	r1, #40488	; 0x9e28
   13610:	movt	r1, #1
   13614:	ldr	r3, [pc, #228]	; 13700 <flatcc_builder_default_alloc@@Base+0x584>
   13618:	movw	r0, #40684	; 0x9eec
   1361c:	movt	r0, #1
   13620:	movw	r2, #1461	; 0x5b5
   13624:	bl	11fd4 <__assert_fail@plt>
   13628:	sub	r0, ip, r1
   1362c:	add	r3, r3, #1
   13630:	add	r0, r0, r5
   13634:	cmp	lr, r3
   13638:	str	r0, [r1, #-4]
   1363c:	bne	136b4 <flatcc_builder_default_alloc@@Base+0x538>
   13640:	ldr	r5, [r4, #136]	; 0x88
   13644:	sub	r7, r5, r6
   13648:	cmp	r7, r5
   1364c:	bge	136e0 <flatcc_builder_default_alloc@@Base+0x564>
   13650:	mov	r3, r7
   13654:	add	r1, sp, #24
   13658:	str	r6, [sp]
   1365c:	ldr	r0, [r4, #36]	; 0x24
   13660:	ldr	r5, [r4, #44]	; 0x2c
   13664:	blx	r5
   13668:	cmp	r0, #0
   1366c:	bne	136dc <flatcc_builder_default_alloc@@Base+0x560>
   13670:	mov	r0, r7
   13674:	str	r7, [r4, #136]	; 0x88
   13678:	add	sp, sp, #88	; 0x58
   1367c:	ldrd	r4, [sp]
   13680:	ldrd	r6, [sp, #8]
   13684:	ldr	r8, [sp, #16]
   13688:	add	sp, sp, #20
   1368c:	pop	{pc}		; (ldr pc, [sp], #4)
   13690:	movw	r1, #40488	; 0x9e28
   13694:	movt	r1, #1
   13698:	ldr	r3, [pc, #96]	; 13700 <flatcc_builder_default_alloc@@Base+0x584>
   1369c:	movw	r0, #40668	; 0x9edc
   136a0:	movt	r0, #1
   136a4:	movw	r2, #1457	; 0x5b1
   136a8:	bl	11fd4 <__assert_fail@plt>
   136ac:	sub	ip, r1, r5
   136b0:	add	ip, ip, r6
   136b4:	ldr	r5, [r1], #4
   136b8:	cmp	r5, #0
   136bc:	bne	13628 <flatcc_builder_default_alloc@@Base+0x4ac>
   136c0:	movw	r1, #40488	; 0x9e28
   136c4:	movt	r1, #1
   136c8:	ldr	r3, [pc, #48]	; 13700 <flatcc_builder_default_alloc@@Base+0x584>
   136cc:	movw	r0, #40680	; 0x9ee8
   136d0:	movt	r0, #1
   136d4:	movw	r2, #1463	; 0x5b7
   136d8:	bl	11fd4 <__assert_fail@plt>
   136dc:	bl	13318 <flatcc_builder_default_alloc@@Base+0x19c>
   136e0:	movw	r1, #40488	; 0x9e28
   136e4:	movt	r1, #1
   136e8:	ldr	r3, [pc, #20]	; 13704 <flatcc_builder_default_alloc@@Base+0x588>
   136ec:	movw	r0, #40680	; 0x9ee8
   136f0:	movt	r0, #1
   136f4:	movw	r2, #647	; 0x287
   136f8:	bl	11fd4 <__assert_fail@plt>
   136fc:	andeq	r9, r1, r0, lsl #15
   13700:	andeq	r9, r1, r0, lsl #19
   13704:	andeq	r9, r1, r4, lsl #14

00013708 <flatcc_builder_flush_vtable_cache@@Base>:
   13708:	ldr	r3, [r0, #116]	; 0x74
   1370c:	cmp	r3, #0
   13710:	bxeq	lr
   13714:	str	r4, [sp, #-8]!
   13718:	mov	r4, r0
   1371c:	mov	r1, #0
   13720:	ldr	r0, [r0, #92]	; 0x5c
   13724:	ldr	r2, [r4, #96]	; 0x60
   13728:	str	lr, [sp, #4]
   1372c:	bl	11fb0 <memset@plt>
   13730:	mov	r3, #16
   13734:	mov	r2, #0
   13738:	strd	r2, [r4, #120]	; 0x78
   1373c:	ldr	r4, [sp]
   13740:	add	sp, sp, #4
   13744:	pop	{pc}		; (ldr pc, [sp], #4)

00013748 <flatcc_builder_custom_init@@Base>:
   13748:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1374c:	mov	r5, r3
   13750:	mov	r4, r0
   13754:	strd	r6, [sp, #8]
   13758:	mov	r6, r1
   1375c:	mov	r7, r2
   13760:	mov	r1, #0
   13764:	mov	r2, #232	; 0xe8
   13768:	str	r8, [sp, #16]
   1376c:	str	lr, [sp, #20]
   13770:	ldr	r8, [sp, #24]
   13774:	bl	11fb0 <memset@plt>
   13778:	cmp	r6, #0
   1377c:	beq	137b8 <flatcc_builder_custom_init@@Base+0x70>
   13780:	cmp	r5, #0
   13784:	movw	r3, #12668	; 0x317c
   13788:	movt	r3, #1
   1378c:	str	r7, [r4, #36]	; 0x24
   13790:	mov	r0, #0
   13794:	moveq	r5, r3
   13798:	str	r8, [r4, #40]	; 0x28
   1379c:	str	r6, [r4, #44]	; 0x2c
   137a0:	str	r5, [r4, #48]	; 0x30
   137a4:	ldrd	r4, [sp]
   137a8:	ldrd	r6, [sp, #8]
   137ac:	ldr	r8, [sp, #16]
   137b0:	add	sp, sp, #20
   137b4:	pop	{pc}		; (ldr pc, [sp], #4)
   137b8:	mov	r3, #1
   137bc:	movw	r6, #36536	; 0x8eb8
   137c0:	movt	r6, #1
   137c4:	add	r7, r4, #188	; 0xbc
   137c8:	str	r3, [r4, #184]	; 0xb8
   137cc:	b	13780 <flatcc_builder_custom_init@@Base+0x38>

000137d0 <flatcc_builder_init@@Base>:
   137d0:	mov	r2, #232	; 0xe8
   137d4:	mov	r1, #0
   137d8:	str	r4, [sp, #-8]!
   137dc:	str	lr, [sp, #4]
   137e0:	bl	11fb0 <memset@plt>
   137e4:	mov	r3, r0
   137e8:	movw	r2, #12668	; 0x317c
   137ec:	movt	r2, #1
   137f0:	mov	r0, #1
   137f4:	ldr	r4, [sp]
   137f8:	add	ip, r3, #188	; 0xbc
   137fc:	movw	r1, #36536	; 0x8eb8
   13800:	movt	r1, #1
   13804:	add	sp, sp, #4
   13808:	str	ip, [r3, #36]	; 0x24
   1380c:	str	r1, [r3, #44]	; 0x2c
   13810:	str	r2, [r3, #48]	; 0x30
   13814:	str	r0, [r3, #184]	; 0xb8
   13818:	mov	r0, #0
   1381c:	pop	{pc}		; (ldr pc, [sp], #4)

00013820 <flatcc_builder_custom_reset@@Base>:
   13820:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13824:	mov	r5, #0
   13828:	mov	r4, r0
   1382c:	strd	r6, [sp, #8]
   13830:	mov	r6, r0
   13834:	strd	r8, [sp, #16]
   13838:	mov	r8, r1
   1383c:	mov	r9, r2
   13840:	str	lr, [sp, #24]
   13844:	sub	sp, sp, #12
   13848:	b	13898 <flatcc_builder_custom_reset@@Base+0x78>
   1384c:	cmp	r5, #5
   13850:	cmpne	r9, #0
   13854:	beq	1387c <flatcc_builder_custom_reset@@Base+0x5c>
   13858:	mov	r3, #1
   1385c:	str	r5, [sp]
   13860:	mov	r2, r3
   13864:	ldr	r0, [r6, #40]	; 0x28
   13868:	ldr	r7, [r6, #48]	; 0x30
   1386c:	blx	r7
   13870:	cmp	r0, #0
   13874:	bne	13980 <flatcc_builder_custom_reset@@Base+0x160>
   13878:	ldr	r0, [r4, #52]	; 0x34
   1387c:	mov	r1, #0
   13880:	ldr	r2, [r4, #56]	; 0x38
   13884:	bl	11fb0 <memset@plt>
   13888:	add	r5, r5, #1
   1388c:	add	r4, r4, #8
   13890:	cmp	r5, #8
   13894:	beq	138d0 <flatcc_builder_custom_reset@@Base+0xb0>
   13898:	ldr	r0, [r4, #52]	; 0x34
   1389c:	add	r1, r4, #52	; 0x34
   138a0:	cmp	r0, #0
   138a4:	bne	1384c <flatcc_builder_custom_reset@@Base+0x2c>
   138a8:	ldr	r3, [r4, #56]	; 0x38
   138ac:	cmp	r3, #0
   138b0:	beq	13888 <flatcc_builder_custom_reset@@Base+0x68>
   138b4:	movw	r1, #40488	; 0x9e28
   138b8:	movt	r1, #1
   138bc:	ldr	r3, [pc, #196]	; 13988 <flatcc_builder_custom_reset@@Base+0x168>
   138c0:	movw	r0, #40700	; 0x9efc
   138c4:	movt	r0, #1
   138c8:	movw	r2, #434	; 0x1b2
   138cc:	bl	11fd4 <__assert_fail@plt>
   138d0:	mov	r2, #0
   138d4:	ldr	r0, [r6, #52]	; 0x34
   138d8:	ldr	r3, [r6, #124]	; 0x7c
   138dc:	ldr	r1, [r6, #60]	; 0x3c
   138e0:	str	r0, [r6, #4]
   138e4:	str	r2, [r6, #120]	; 0x78
   138e8:	cmp	r3, r2
   138ec:	ldr	r2, [r6, #76]	; 0x4c
   138f0:	movne	r3, #16
   138f4:	strne	r3, [r6, #124]	; 0x7c
   138f8:	mov	r3, #0
   138fc:	cmp	r8, r3
   13900:	str	r2, [r6]
   13904:	str	r1, [r6, #16]
   13908:	str	r3, [r6, #20]
   1390c:	str	r3, [r6, #24]
   13910:	str	r3, [r6, #32]
   13914:	strh	r3, [r6, #128]	; 0x80
   13918:	str	r3, [r6, #136]	; 0x88
   1391c:	str	r3, [r6, #140]	; 0x8c
   13920:	str	r3, [r6, #148]	; 0x94
   13924:	str	r3, [r6, #152]	; 0x98
   13928:	str	r3, [r6, #156]	; 0x9c
   1392c:	str	r3, [r6, #160]	; 0xa0
   13930:	bne	13958 <flatcc_builder_custom_reset@@Base+0x138>
   13934:	ldr	r0, [r6, #184]	; 0xb8
   13938:	cmp	r0, #0
   1393c:	bne	13970 <flatcc_builder_custom_reset@@Base+0x150>
   13940:	add	sp, sp, #12
   13944:	ldrd	r4, [sp]
   13948:	ldrd	r6, [sp, #8]
   1394c:	ldrd	r8, [sp, #16]
   13950:	add	sp, sp, #24
   13954:	pop	{pc}		; (ldr pc, [sp], #4)
   13958:	ldr	r0, [r6, #184]	; 0xb8
   1395c:	str	r3, [r6, #172]	; 0xac
   13960:	str	r3, [r6, #176]	; 0xb0
   13964:	str	r3, [r6, #180]	; 0xb4
   13968:	cmp	r0, #0
   1396c:	beq	13940 <flatcc_builder_custom_reset@@Base+0x120>
   13970:	add	r0, r6, #188	; 0xbc
   13974:	bl	18d64 <flatcc_emitter_reset@@Base>
   13978:	mov	r0, #0
   1397c:	b	13940 <flatcc_builder_custom_reset@@Base+0x120>
   13980:	mvn	r0, #0
   13984:	b	13940 <flatcc_builder_custom_reset@@Base+0x120>
   13988:	andeq	r9, r1, r0, lsr #19

0001398c <flatcc_builder_reset@@Base>:
   1398c:	mov	r2, #0
   13990:	mov	r1, r2
   13994:	b	13820 <flatcc_builder_custom_reset@@Base>

00013998 <flatcc_builder_clear@@Base>:
   13998:	strd	r4, [sp, #-20]!	; 0xffffffec
   1399c:	mov	r4, #0
   139a0:	add	r5, r0, #52	; 0x34
   139a4:	strd	r6, [sp, #8]
   139a8:	mov	r6, r0
   139ac:	str	lr, [sp, #16]
   139b0:	sub	sp, sp, #12
   139b4:	mov	r3, #0
   139b8:	mov	r1, r5
   139bc:	str	r4, [sp]
   139c0:	mov	r2, r3
   139c4:	add	r4, r4, #1
   139c8:	ldr	r0, [r6, #40]	; 0x28
   139cc:	add	r5, r5, #8
   139d0:	ldr	r7, [r6, #48]	; 0x30
   139d4:	blx	r7
   139d8:	cmp	r4, #8
   139dc:	bne	139b4 <flatcc_builder_clear@@Base+0x1c>
   139e0:	ldr	r3, [r6, #184]	; 0xb8
   139e4:	cmp	r3, #0
   139e8:	bne	13a10 <flatcc_builder_clear@@Base+0x78>
   139ec:	mov	r0, r6
   139f0:	mov	r2, #232	; 0xe8
   139f4:	mov	r1, #0
   139f8:	add	sp, sp, #12
   139fc:	ldrd	r4, [sp]
   13a00:	ldrd	r6, [sp, #8]
   13a04:	ldr	lr, [sp, #16]
   13a08:	add	sp, sp, #20
   13a0c:	b	11fb0 <memset@plt>
   13a10:	add	r0, r6, #188	; 0xbc
   13a14:	bl	18e38 <flatcc_emitter_clear@@Base>
   13a18:	b	139ec <flatcc_builder_clear@@Base+0x54>

00013a1c <flatcc_builder_enter_user_frame_ptr@@Base>:
   13a1c:	strd	r4, [sp, #-20]!	; 0xffffffec
   13a20:	add	r4, r1, #3
   13a24:	mov	r5, r0
   13a28:	ldr	r3, [r0, #112]	; 0x70
   13a2c:	bic	r4, r4, #3
   13a30:	strd	r6, [sp, #8]
   13a34:	add	r4, r4, #4
   13a38:	ldr	r6, [r0, #228]	; 0xe4
   13a3c:	str	lr, [sp, #16]
   13a40:	sub	sp, sp, #12
   13a44:	add	r2, r6, r4
   13a48:	cmp	r2, r3
   13a4c:	bls	13a74 <flatcc_builder_enter_user_frame_ptr@@Base+0x58>
   13a50:	mov	ip, #7
   13a54:	add	r1, r0, #108	; 0x6c
   13a58:	ldr	r0, [r0, #40]	; 0x28
   13a5c:	mov	r3, #0
   13a60:	str	ip, [sp]
   13a64:	ldr	r7, [r5, #48]	; 0x30
   13a68:	blx	r7
   13a6c:	cmp	r0, #0
   13a70:	bne	13ac8 <flatcc_builder_enter_user_frame_ptr@@Base+0xac>
   13a74:	ldr	r7, [r5, #108]	; 0x6c
   13a78:	adds	r3, r7, r6
   13a7c:	moveq	r0, r3
   13a80:	beq	13ab4 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   13a84:	mov	r2, r4
   13a88:	mov	r0, r3
   13a8c:	mov	r1, #0
   13a90:	bl	11fb0 <memset@plt>
   13a94:	ldr	r2, [r5, #224]	; 0xe0
   13a98:	add	r0, r0, #4
   13a9c:	str	r2, [r7, r6]
   13aa0:	ldr	r3, [r5, #228]	; 0xe4
   13aa4:	add	r4, r3, r4
   13aa8:	add	r3, r3, #4
   13aac:	str	r3, [r5, #224]	; 0xe0
   13ab0:	str	r4, [r5, #228]	; 0xe4
   13ab4:	add	sp, sp, #12
   13ab8:	ldrd	r4, [sp]
   13abc:	ldrd	r6, [sp, #8]
   13ac0:	add	sp, sp, #16
   13ac4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ac8:	bl	132a0 <flatcc_builder_default_alloc@@Base+0x124>

00013acc <flatcc_builder_enter_user_frame@@Base>:
   13acc:	strd	r4, [sp, #-20]!	; 0xffffffec
   13ad0:	add	r4, r1, #3
   13ad4:	mov	r5, r0
   13ad8:	ldr	r3, [r0, #112]	; 0x70
   13adc:	bic	r4, r4, #3
   13ae0:	strd	r6, [sp, #8]
   13ae4:	add	r4, r4, #4
   13ae8:	ldr	r6, [r0, #228]	; 0xe4
   13aec:	str	lr, [sp, #16]
   13af0:	sub	sp, sp, #12
   13af4:	add	r2, r6, r4
   13af8:	cmp	r2, r3
   13afc:	bls	13b24 <flatcc_builder_enter_user_frame@@Base+0x58>
   13b00:	mov	ip, #7
   13b04:	add	r1, r0, #108	; 0x6c
   13b08:	ldr	r0, [r0, #40]	; 0x28
   13b0c:	mov	r3, #0
   13b10:	str	ip, [sp]
   13b14:	ldr	r7, [r5, #48]	; 0x30
   13b18:	blx	r7
   13b1c:	cmp	r0, #0
   13b20:	bne	13b6c <flatcc_builder_enter_user_frame@@Base+0xa0>
   13b24:	ldr	r7, [r5, #108]	; 0x6c
   13b28:	adds	r0, r7, r6
   13b2c:	beq	13b58 <flatcc_builder_enter_user_frame@@Base+0x8c>
   13b30:	mov	r2, r4
   13b34:	mov	r1, #0
   13b38:	bl	11fb0 <memset@plt>
   13b3c:	ldr	r3, [r5, #224]	; 0xe0
   13b40:	str	r3, [r7, r6]
   13b44:	ldr	r0, [r5, #228]	; 0xe4
   13b48:	add	r4, r0, r4
   13b4c:	add	r0, r0, #4
   13b50:	str	r0, [r5, #224]	; 0xe0
   13b54:	str	r4, [r5, #228]	; 0xe4
   13b58:	add	sp, sp, #12
   13b5c:	ldrd	r4, [sp]
   13b60:	ldrd	r6, [sp, #8]
   13b64:	add	sp, sp, #16
   13b68:	pop	{pc}		; (ldr pc, [sp], #4)
   13b6c:	bl	132a0 <flatcc_builder_default_alloc@@Base+0x124>

00013b70 <flatcc_builder_exit_user_frame@@Base>:
   13b70:	ldr	r2, [r0, #224]	; 0xe0
   13b74:	cmp	r2, #0
   13b78:	beq	13ba0 <flatcc_builder_exit_user_frame@@Base+0x30>
   13b7c:	mov	r3, r0
   13b80:	sub	r0, r2, #4
   13b84:	ldr	r1, [r3, #108]	; 0x6c
   13b88:	str	r0, [r3, #228]	; 0xe4
   13b8c:	add	r2, r1, r2
   13b90:	ldr	r2, [r2, #-4]
   13b94:	mov	r0, r2
   13b98:	str	r2, [r3, #224]	; 0xe0
   13b9c:	bx	lr
   13ba0:	str	r4, [sp, #-8]!
   13ba4:	str	lr, [sp, #4]
   13ba8:	bl	13368 <flatcc_builder_default_alloc@@Base+0x1ec>

00013bac <flatcc_builder_exit_user_frame_at@@Base>:
   13bac:	ldr	r2, [r0, #224]	; 0xe0
   13bb0:	str	r4, [sp, #-8]!
   13bb4:	str	lr, [sp, #4]
   13bb8:	cmp	r2, r1
   13bbc:	bcc	13bf8 <flatcc_builder_exit_user_frame_at@@Base+0x4c>
   13bc0:	cmp	r1, #0
   13bc4:	mov	r3, r0
   13bc8:	str	r1, [r0, #224]	; 0xe0
   13bcc:	beq	13c14 <flatcc_builder_exit_user_frame_at@@Base+0x68>
   13bd0:	ldr	r2, [r3, #108]	; 0x6c
   13bd4:	sub	r0, r1, #4
   13bd8:	ldr	r4, [sp]
   13bdc:	add	sp, sp, #4
   13be0:	str	r0, [r3, #228]	; 0xe4
   13be4:	add	r1, r2, r1
   13be8:	ldr	r2, [r1, #-4]
   13bec:	mov	r0, r2
   13bf0:	str	r2, [r3, #224]	; 0xe0
   13bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   13bf8:	movw	r1, #40488	; 0x9e28
   13bfc:	movt	r1, #1
   13c00:	ldr	r3, [pc, #16]	; 13c18 <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   13c04:	movw	r0, #40720	; 0x9f10
   13c08:	movt	r0, #1
   13c0c:	movw	r2, #551	; 0x227
   13c10:	bl	11fd4 <__assert_fail@plt>
   13c14:	bl	13368 <flatcc_builder_default_alloc@@Base+0x1ec>
   13c18:			; <UNDEFINED> instruction: 0x000199bc

00013c1c <flatcc_builder_get_current_user_frame@@Base>:
   13c1c:	ldr	r0, [r0, #224]	; 0xe0
   13c20:	bx	lr

00013c24 <flatcc_builder_get_user_frame_ptr@@Base>:
   13c24:	ldr	r0, [r0, #108]	; 0x6c
   13c28:	add	r0, r0, r1
   13c2c:	bx	lr

00013c30 <flatcc_builder_embed_buffer@@Base>:
   13c30:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13c34:	mov	r5, r0
   13c38:	ldr	r0, [r0, #152]	; 0x98
   13c3c:	strd	r6, [sp, #8]
   13c40:	mov	r7, r2
   13c44:	mov	r6, r3
   13c48:	strd	r8, [sp, #16]
   13c4c:	str	sl, [sp, #24]
   13c50:	str	lr, [sp, #28]
   13c54:	sub	sp, sp, #88	; 0x58
   13c58:	ldrh	r4, [sp, #120]	; 0x78
   13c5c:	ldr	r8, [sp, #124]	; 0x7c
   13c60:	cmp	r4, #4
   13c64:	movcc	r4, #4
   13c68:	cmp	r1, #0
   13c6c:	and	r8, r8, #2
   13c70:	bne	13c80 <flatcc_builder_embed_buffer@@Base+0x50>
   13c74:	ldrh	r1, [r5, #132]	; 0x84
   13c78:	cmp	r1, #0
   13c7c:	beq	13ca0 <flatcc_builder_embed_buffer@@Base+0x70>
   13c80:	cmp	r1, r4
   13c84:	movcs	r4, r1
   13c88:	cmp	r0, #0
   13c8c:	bne	13ca0 <flatcc_builder_embed_buffer@@Base+0x70>
   13c90:	ldr	r9, [r5, #140]	; 0x8c
   13c94:	sub	r1, r1, #1
   13c98:	ands	r1, r1, r9
   13c9c:	bne	13dc8 <flatcc_builder_embed_buffer@@Base+0x198>
   13ca0:	ldr	r1, [r5, #136]	; 0x88
   13ca4:	cmp	r8, #0
   13ca8:	sub	r4, r4, #1
   13cac:	movne	ip, #4
   13cb0:	moveq	ip, #0
   13cb4:	mov	r2, #0
   13cb8:	cmp	r0, r2
   13cbc:	str	r2, [sp, #16]
   13cc0:	sub	r3, r1, r6
   13cc4:	str	r2, [sp, #20]
   13cc8:	sub	r3, r3, ip
   13ccc:	and	r4, r4, r3
   13cd0:	add	r3, r6, r4
   13cd4:	str	r3, [sp, #12]
   13cd8:	bne	13d98 <flatcc_builder_embed_buffer@@Base+0x168>
   13cdc:	mov	lr, #2
   13ce0:	mov	r3, #1
   13ce4:	mov	r2, r0
   13ce8:	cmp	r6, #0
   13cec:	beq	13d18 <flatcc_builder_embed_buffer@@Base+0xe8>
   13cf0:	add	r2, r2, #1
   13cf4:	add	ip, sp, #88	; 0x58
   13cf8:	add	ip, ip, r2, lsl #3
   13cfc:	add	r0, r0, r6
   13d00:	mov	r2, r3
   13d04:	str	r0, [sp, #16]
   13d08:	str	r7, [ip, #-72]	; 0xffffffb8
   13d0c:	str	r6, [ip, #-68]	; 0xffffffbc
   13d10:	str	r3, [sp, #20]
   13d14:	mov	r3, lr
   13d18:	cmp	r4, #0
   13d1c:	beq	13d48 <flatcc_builder_embed_buffer@@Base+0x118>
   13d20:	ldr	lr, [pc, #312]	; 13e60 <flatcc_builder_embed_buffer@@Base+0x230>
   13d24:	add	r2, r2, #1
   13d28:	add	ip, sp, #88	; 0x58
   13d2c:	add	ip, ip, r2, lsl #3
   13d30:	add	r0, r0, r4
   13d34:	mov	r2, r3
   13d38:	str	r0, [sp, #16]
   13d3c:	str	lr, [ip, #-72]	; 0xffffffb8
   13d40:	str	r4, [ip, #-68]	; 0xffffffbc
   13d44:	str	r3, [sp, #20]
   13d48:	sub	r4, r1, r0
   13d4c:	cmp	r1, r4
   13d50:	ble	13e20 <flatcc_builder_embed_buffer@@Base+0x1f0>
   13d54:	mov	r3, r4
   13d58:	add	r1, sp, #24
   13d5c:	str	r0, [sp]
   13d60:	ldr	r0, [r5, #36]	; 0x24
   13d64:	ldr	r6, [r5, #44]	; 0x2c
   13d68:	blx	r6
   13d6c:	cmp	r0, #0
   13d70:	bne	13e1c <flatcc_builder_embed_buffer@@Base+0x1ec>
   13d74:	mov	r0, r4
   13d78:	str	r4, [r5, #136]	; 0x88
   13d7c:	add	sp, sp, #88	; 0x58
   13d80:	ldrd	r4, [sp]
   13d84:	ldrd	r6, [sp, #8]
   13d88:	ldrd	r8, [sp, #16]
   13d8c:	ldr	sl, [sp, #24]
   13d90:	add	sp, sp, #28
   13d94:	pop	{pc}		; (ldr pc, [sp], #4)
   13d98:	mov	ip, #4
   13d9c:	mov	r3, #1
   13da0:	add	r8, sp, #12
   13da4:	mov	r2, r3
   13da8:	mov	r0, ip
   13dac:	mov	lr, #3
   13db0:	str	ip, [sp, #16]
   13db4:	str	r3, [sp, #20]
   13db8:	mov	r3, #2
   13dbc:	str	r8, [sp, #24]
   13dc0:	str	ip, [sp, #28]
   13dc4:	b	13ce8 <flatcc_builder_embed_buffer@@Base+0xb8>
   13dc8:	ldr	r3, [pc, #144]	; 13e60 <flatcc_builder_embed_buffer@@Base+0x230>
   13dcc:	add	r0, r9, r1
   13dd0:	mov	r2, #1
   13dd4:	cmp	r9, r0
   13dd8:	str	r1, [sp, #16]
   13ddc:	str	r0, [r5, #140]	; 0x8c
   13de0:	strd	r2, [sp, #20]
   13de4:	str	r1, [sp, #28]
   13de8:	bgt	13e3c <flatcc_builder_embed_buffer@@Base+0x20c>
   13dec:	mov	r3, r9
   13df0:	str	r1, [sp]
   13df4:	add	r1, sp, #24
   13df8:	ldr	r0, [r5, #36]	; 0x24
   13dfc:	ldr	sl, [r5, #44]	; 0x2c
   13e00:	blx	sl
   13e04:	cmp	r0, #0
   13e08:	bne	13e5c <flatcc_builder_embed_buffer@@Base+0x22c>
   13e0c:	cmn	r9, #1
   13e10:	beq	13e58 <flatcc_builder_embed_buffer@@Base+0x228>
   13e14:	ldr	r0, [r5, #152]	; 0x98
   13e18:	b	13ca0 <flatcc_builder_embed_buffer@@Base+0x70>
   13e1c:	bl	13318 <flatcc_builder_default_alloc@@Base+0x19c>
   13e20:	movw	r1, #40488	; 0x9e28
   13e24:	movt	r1, #1
   13e28:	ldr	r3, [pc, #52]	; 13e64 <flatcc_builder_embed_buffer@@Base+0x234>
   13e2c:	movw	r0, #40680	; 0x9ee8
   13e30:	movt	r0, #1
   13e34:	movw	r2, #647	; 0x287
   13e38:	bl	11fd4 <__assert_fail@plt>
   13e3c:	movw	r1, #40488	; 0x9e28
   13e40:	movt	r1, #1
   13e44:	movw	r0, #40680	; 0x9ee8
   13e48:	movt	r0, #1
   13e4c:	sub	r3, r3, #152	; 0x98
   13e50:	movw	r2, #673	; 0x2a1
   13e54:	bl	11fd4 <__assert_fail@plt>
   13e58:	bl	132f0 <flatcc_builder_default_alloc@@Base+0x174>
   13e5c:	bl	132c8 <flatcc_builder_default_alloc@@Base+0x14c>
   13e60:	andeq	r9, r1, r0, lsl #15
   13e64:	andeq	r9, r1, r4, lsl #14

00013e68 <flatcc_builder_create_buffer@@Base>:
   13e68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13e6c:	mov	ip, #0
   13e70:	mov	r5, r0
   13e74:	strd	r6, [sp, #8]
   13e78:	mov	r7, r3
   13e7c:	strd	r8, [sp, #16]
   13e80:	mov	r9, r1
   13e84:	strd	sl, [sp, #24]
   13e88:	str	lr, [sp, #32]
   13e8c:	sub	sp, sp, #100	; 0x64
   13e90:	ldrh	r4, [sp, #136]	; 0x88
   13e94:	str	ip, [sp, #20]
   13e98:	ldr	r6, [sp, #140]	; 0x8c
   13e9c:	cmp	r4, #4
   13ea0:	movcc	r4, #4
   13ea4:	cmp	r2, #0
   13ea8:	and	r8, r6, #1
   13eac:	bne	13ebc <flatcc_builder_create_buffer@@Base+0x54>
   13eb0:	ldrh	r2, [r0, #132]	; 0x84
   13eb4:	cmp	r2, ip
   13eb8:	beq	13edc <flatcc_builder_create_buffer@@Base+0x74>
   13ebc:	cmp	r2, r4
   13ec0:	movcs	r4, r2
   13ec4:	cmp	r8, #0
   13ec8:	bne	13edc <flatcc_builder_create_buffer@@Base+0x74>
   13ecc:	ldr	sl, [r5, #140]	; 0x8c
   13ed0:	sub	r2, r2, #1
   13ed4:	ands	r1, r2, sl
   13ed8:	bne	14070 <flatcc_builder_create_buffer@@Base+0x208>
   13edc:	ldrh	r3, [r5, #128]	; 0x80
   13ee0:	ldr	r0, [r5, #136]	; 0x88
   13ee4:	cmp	r3, r4
   13ee8:	strhcc	r4, [r5, #128]	; 0x80
   13eec:	cmp	r9, #0
   13ef0:	sub	r4, r4, #1
   13ef4:	ldrne	r3, [r9]
   13ef8:	ldreq	r1, [sp, #20]
   13efc:	movne	r1, r3
   13f00:	strne	r3, [sp, #20]
   13f04:	sub	r3, r0, #4
   13f08:	cmp	r1, #0
   13f0c:	movne	r1, #4
   13f10:	tst	r6, #2
   13f14:	movne	r2, #4
   13f18:	moveq	r2, #0
   13f1c:	sub	r3, r3, r1
   13f20:	ands	r6, r6, #3
   13f24:	sub	r3, r3, r2
   13f28:	and	r4, r4, r3
   13f2c:	bne	14048 <flatcc_builder_create_buffer@@Base+0x1e0>
   13f30:	mov	r3, r6
   13f34:	mov	r9, #3
   13f38:	mov	lr, #2
   13f3c:	mov	r2, #1
   13f40:	mov	ip, #4
   13f44:	add	fp, sp, #96	; 0x60
   13f48:	add	r3, r3, #1
   13f4c:	str	ip, [sp, #24]
   13f50:	add	r3, fp, r3, lsl #3
   13f54:	add	sl, sp, #12
   13f58:	mov	fp, #4
   13f5c:	cmp	r1, #0
   13f60:	strd	sl, [r3, #-72]	; 0xffffffb8
   13f64:	str	r2, [sp, #28]
   13f68:	beq	13f98 <flatcc_builder_create_buffer@@Base+0x130>
   13f6c:	add	r2, r2, #1
   13f70:	add	r3, sp, #96	; 0x60
   13f74:	add	r3, r3, r2, lsl #3
   13f78:	add	ip, ip, r1
   13f7c:	add	sl, sp, #20
   13f80:	mov	r2, lr
   13f84:	str	ip, [sp, #24]
   13f88:	str	sl, [r3, #-72]	; 0xffffffb8
   13f8c:	str	r1, [r3, #-68]	; 0xffffffbc
   13f90:	str	lr, [sp, #28]
   13f94:	mov	lr, r9
   13f98:	cmp	r4, #0
   13f9c:	beq	13fc8 <flatcc_builder_create_buffer@@Base+0x160>
   13fa0:	ldr	r1, [pc, #372]	; 1411c <flatcc_builder_create_buffer@@Base+0x2b4>
   13fa4:	add	r2, r2, #1
   13fa8:	add	r3, sp, #96	; 0x60
   13fac:	add	r3, r3, r2, lsl #3
   13fb0:	add	ip, ip, r4
   13fb4:	mov	r2, lr
   13fb8:	str	ip, [sp, #24]
   13fbc:	str	r1, [r3, #-72]	; 0xffffffb8
   13fc0:	str	r4, [r3, #-68]	; 0xffffffbc
   13fc4:	str	lr, [sp, #28]
   13fc8:	sub	r4, r0, ip
   13fcc:	cmp	r6, #0
   13fd0:	mov	r1, r4
   13fd4:	addne	r1, r4, #4
   13fd8:	cmp	r8, #0
   13fdc:	sub	r7, r7, r1
   13fe0:	ldrne	r3, [r5, #144]	; 0x90
   13fe4:	str	r7, [sp, #12]
   13fe8:	ldreq	r3, [r5, #140]	; 0x8c
   13fec:	cmp	r0, r4
   13ff0:	sub	r3, r3, r1
   13ff4:	str	r3, [sp, #16]
   13ff8:	ble	140c0 <flatcc_builder_create_buffer@@Base+0x258>
   13ffc:	mov	r3, r4
   14000:	add	r1, sp, #32
   14004:	str	ip, [sp]
   14008:	ldr	r0, [r5, #36]	; 0x24
   1400c:	ldr	r6, [r5, #44]	; 0x2c
   14010:	blx	r6
   14014:	cmp	r0, #0
   14018:	bne	140dc <flatcc_builder_create_buffer@@Base+0x274>
   1401c:	cmp	r4, #0
   14020:	str	r4, [r5, #136]	; 0x88
   14024:	beq	140e0 <flatcc_builder_create_buffer@@Base+0x278>
   14028:	mov	r0, r4
   1402c:	add	sp, sp, #100	; 0x64
   14030:	ldrd	r4, [sp]
   14034:	ldrd	r6, [sp, #8]
   14038:	ldrd	r8, [sp, #16]
   1403c:	ldrd	sl, [sp, #24]
   14040:	add	sp, sp, #32
   14044:	pop	{pc}		; (ldr pc, [sp], #4)
   14048:	mov	ip, #4
   1404c:	add	r3, sp, #16
   14050:	mov	r9, ip
   14054:	mov	lr, #3
   14058:	mov	r2, #2
   1405c:	str	r3, [sp, #32]
   14060:	mov	r3, #1
   14064:	str	ip, [sp, #36]	; 0x24
   14068:	mov	ip, #8
   1406c:	b	13f44 <flatcc_builder_create_buffer@@Base+0xdc>
   14070:	ldr	r3, [pc, #164]	; 1411c <flatcc_builder_create_buffer@@Base+0x2b4>
   14074:	add	r0, sl, r1
   14078:	mov	r2, #1
   1407c:	cmp	sl, r0
   14080:	str	r1, [sp, #24]
   14084:	str	r0, [r5, #140]	; 0x8c
   14088:	strd	r2, [sp, #28]
   1408c:	str	r1, [sp, #36]	; 0x24
   14090:	bgt	14100 <flatcc_builder_create_buffer@@Base+0x298>
   14094:	mov	r3, sl
   14098:	str	r1, [sp]
   1409c:	add	r1, sp, #32
   140a0:	ldr	r0, [r5, #36]	; 0x24
   140a4:	ldr	fp, [r5, #44]	; 0x2c
   140a8:	blx	fp
   140ac:	cmp	r0, #0
   140b0:	bne	140fc <flatcc_builder_create_buffer@@Base+0x294>
   140b4:	cmn	sl, #1
   140b8:	bne	13edc <flatcc_builder_create_buffer@@Base+0x74>
   140bc:	bl	132f0 <flatcc_builder_default_alloc@@Base+0x174>
   140c0:	movw	r1, #40488	; 0x9e28
   140c4:	movt	r1, #1
   140c8:	ldr	r3, [pc, #80]	; 14120 <flatcc_builder_create_buffer@@Base+0x2b8>
   140cc:	movw	r0, #40680	; 0x9ee8
   140d0:	movt	r0, #1
   140d4:	movw	r2, #647	; 0x287
   140d8:	bl	11fd4 <__assert_fail@plt>
   140dc:	bl	13318 <flatcc_builder_default_alloc@@Base+0x19c>
   140e0:	movw	r1, #40488	; 0x9e28
   140e4:	movt	r1, #1
   140e8:	ldr	r3, [pc, #52]	; 14124 <flatcc_builder_create_buffer@@Base+0x2bc>
   140ec:	movw	r0, #40680	; 0x9ee8
   140f0:	movt	r0, #1
   140f4:	mov	r2, #772	; 0x304
   140f8:	bl	11fd4 <__assert_fail@plt>
   140fc:	bl	132c8 <flatcc_builder_default_alloc@@Base+0x14c>
   14100:	movw	r1, #40488	; 0x9e28
   14104:	movt	r1, #1
   14108:	movw	r0, #40680	; 0x9ee8
   1410c:	movt	r0, #1
   14110:	sub	r3, r3, #152	; 0x98
   14114:	movw	r2, #673	; 0x2a1
   14118:	bl	11fd4 <__assert_fail@plt>
   1411c:	andeq	r9, r1, r0, lsl #15
   14120:	andeq	r9, r1, r4, lsl #14
   14124:	andeq	r9, r1, r0, ror #19

00014128 <flatcc_builder_create_struct@@Base>:
   14128:	cmp	r3, #0
   1412c:	strd	r4, [sp, #-16]!
   14130:	str	r6, [sp, #8]
   14134:	str	lr, [sp, #12]
   14138:	sub	sp, sp, #80	; 0x50
   1413c:	beq	14240 <flatcc_builder_create_struct@@Base+0x118>
   14140:	mov	r4, r0
   14144:	mov	r0, r2
   14148:	ldrh	r2, [r4, #128]	; 0x80
   1414c:	ldr	ip, [r4, #136]	; 0x88
   14150:	cmp	r2, r3
   14154:	mov	r2, #0
   14158:	strhcc	r3, [r4, #128]	; 0x80
   1415c:	sub	r5, ip, r0
   14160:	sub	r3, r3, #1
   14164:	cmp	r0, r2
   14168:	and	r3, r3, r5
   1416c:	str	r2, [sp, #8]
   14170:	str	r2, [sp, #12]
   14174:	bne	141f4 <flatcc_builder_create_struct@@Base+0xcc>
   14178:	cmp	r3, #0
   1417c:	movne	r1, r2
   14180:	movne	r0, r3
   14184:	movne	r2, #1
   14188:	beq	14220 <flatcc_builder_create_struct@@Base+0xf8>
   1418c:	ldr	lr, [pc, #200]	; 1425c <flatcc_builder_create_struct@@Base+0x134>
   14190:	add	r5, sp, #80	; 0x50
   14194:	add	r1, r1, #1
   14198:	add	r1, r5, r1, lsl #3
   1419c:	sub	r5, ip, r0
   141a0:	str	r0, [sp, #8]
   141a4:	str	r2, [sp, #12]
   141a8:	str	lr, [r1, #-72]	; 0xffffffb8
   141ac:	str	r3, [r1, #-68]	; 0xffffffbc
   141b0:	cmp	ip, r5
   141b4:	ble	14220 <flatcc_builder_create_struct@@Base+0xf8>
   141b8:	mov	r3, r5
   141bc:	add	r1, sp, #16
   141c0:	str	r0, [sp]
   141c4:	ldr	r0, [r4, #36]	; 0x24
   141c8:	ldr	r6, [r4, #44]	; 0x2c
   141cc:	blx	r6
   141d0:	cmp	r0, #0
   141d4:	bne	1423c <flatcc_builder_create_struct@@Base+0x114>
   141d8:	mov	r0, r5
   141dc:	str	r5, [r4, #136]	; 0x88
   141e0:	add	sp, sp, #80	; 0x50
   141e4:	ldrd	r4, [sp]
   141e8:	ldr	r6, [sp, #8]
   141ec:	add	sp, sp, #12
   141f0:	pop	{pc}		; (ldr pc, [sp], #4)
   141f4:	mov	r2, #1
   141f8:	cmp	r3, #0
   141fc:	str	r0, [sp, #8]
   14200:	str	r2, [sp, #12]
   14204:	str	r1, [sp, #16]
   14208:	movne	r1, r2
   1420c:	movne	r2, #2
   14210:	str	r0, [sp, #20]
   14214:	addne	r0, r0, r3
   14218:	beq	141b0 <flatcc_builder_create_struct@@Base+0x88>
   1421c:	b	1418c <flatcc_builder_create_struct@@Base+0x64>
   14220:	movw	r1, #40488	; 0x9e28
   14224:	movt	r1, #1
   14228:	ldr	r3, [pc, #48]	; 14260 <flatcc_builder_create_struct@@Base+0x138>
   1422c:	movw	r0, #40680	; 0x9ee8
   14230:	movt	r0, #1
   14234:	movw	r2, #647	; 0x287
   14238:	bl	11fd4 <__assert_fail@plt>
   1423c:	bl	13318 <flatcc_builder_default_alloc@@Base+0x19c>
   14240:	movw	r1, #40488	; 0x9e28
   14244:	movt	r1, #1
   14248:	ldr	r3, [pc, #20]	; 14264 <flatcc_builder_create_struct@@Base+0x13c>
   1424c:	movw	r0, #40752	; 0x9f30
   14250:	movt	r0, #1
   14254:	movw	r2, #783	; 0x30f
   14258:	bl	11fd4 <__assert_fail@plt>
   1425c:	andeq	r9, r1, r0, lsl #15
   14260:	andeq	r9, r1, r4, lsl #14
   14264:	andeq	r9, r1, r0, lsl #20

00014268 <flatcc_builder_start_buffer@@Base>:
   14268:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1426c:	mov	r5, r1
   14270:	mov	r4, r0
   14274:	ldr	r1, [r0, #156]	; 0x9c
   14278:	strd	r6, [sp, #8]
   1427c:	mov	r6, r3
   14280:	mov	r7, r2
   14284:	ldr	r3, [r0, #160]	; 0xa0
   14288:	strd	r8, [sp, #16]
   1428c:	ldrh	r8, [r0, #128]	; 0x80
   14290:	add	r2, r1, #1
   14294:	strd	sl, [sp, #24]
   14298:	str	lr, [sp, #32]
   1429c:	sub	sp, sp, #12
   142a0:	cmp	r2, r3
   142a4:	str	r2, [r0, #156]	; 0x9c
   142a8:	ble	143f4 <flatcc_builder_start_buffer@@Base+0x18c>
   142ac:	ldr	r3, [r0, #176]	; 0xb0
   142b0:	cmp	r3, #0
   142b4:	cmpgt	r2, r3
   142b8:	movgt	r3, #1
   142bc:	movle	r3, #0
   142c0:	bgt	14404 <flatcc_builder_start_buffer@@Base+0x19c>
   142c4:	add	r1, r1, r1, lsl #3
   142c8:	ldr	r0, [r0, #88]	; 0x58
   142cc:	lsl	r9, r1, #2
   142d0:	add	r2, r9, #36	; 0x24
   142d4:	cmp	r2, r0
   142d8:	bls	142fc <flatcc_builder_start_buffer@@Base+0x94>
   142dc:	mov	ip, #4
   142e0:	add	r1, r4, #84	; 0x54
   142e4:	ldr	r0, [r4, #40]	; 0x28
   142e8:	str	ip, [sp]
   142ec:	ldr	sl, [r4, #48]	; 0x30
   142f0:	blx	sl
   142f4:	cmp	r0, #0
   142f8:	bne	1440c <flatcc_builder_start_buffer@@Base+0x1a4>
   142fc:	ldr	r3, [r4, #84]	; 0x54
   14300:	add	r3, r3, r9
   14304:	cmp	r3, #0
   14308:	str	r3, [r4, #32]
   1430c:	beq	14404 <flatcc_builder_start_buffer@@Base+0x19c>
   14310:	ldr	r2, [r4, #88]	; 0x58
   14314:	movw	r0, #36409	; 0x8e39
   14318:	movt	r0, #14563	; 0x38e3
   1431c:	ldr	r1, [r4, #176]	; 0xb0
   14320:	umull	r0, r2, r0, r2
   14324:	lsr	r2, r2, #3
   14328:	cmp	r1, #0
   1432c:	cmpgt	r2, r1
   14330:	movgt	r2, r1
   14334:	str	r2, [r4, #160]	; 0xa0
   14338:	ldr	sl, [pc, #208]	; 14410 <flatcc_builder_start_buffer@@Base+0x1a8>
   1433c:	mov	r0, #0
   14340:	mvn	lr, #3
   14344:	cmp	r5, r0
   14348:	ldr	r2, [r4, #20]
   1434c:	ldr	ip, [r4, #28]
   14350:	moveq	r5, sl
   14354:	ldrh	r9, [r4, #130]	; 0x82
   14358:	ldrh	fp, [r4, #132]	; 0x84
   1435c:	ldr	r1, [r4, #148]	; 0x94
   14360:	ldr	sl, [r4, #152]	; 0x98
   14364:	str	r2, [r3, #8]
   14368:	add	r2, r2, ip
   1436c:	add	r2, r2, #7
   14370:	strh	r9, [r3, #12]
   14374:	bic	r2, r2, #7
   14378:	strh	r8, [r4, #130]	; 0x82
   1437c:	ldrh	r8, [r4, #164]	; 0xa4
   14380:	ldr	r9, [r4, #136]	; 0x88
   14384:	stm	r3, {ip, lr}
   14388:	mov	ip, #1
   1438c:	str	r0, [r4, #20]
   14390:	str	r2, [r4, #28]
   14394:	add	r2, r1, ip
   14398:	strh	ip, [r4, #128]	; 0x80
   1439c:	ldr	lr, [r4, #144]	; 0x90
   143a0:	strh	fp, [r3, #34]	; 0x22
   143a4:	strh	r7, [r4, #132]	; 0x84
   143a8:	ldr	r7, [r4, #168]	; 0xa8
   143ac:	strh	r8, [r3, #32]
   143b0:	strh	r6, [r4, #164]	; 0xa4
   143b4:	str	lr, [r3, #20]
   143b8:	str	sl, [r3, #28]
   143bc:	str	r9, [r4, #144]	; 0x90
   143c0:	str	r2, [r4, #148]	; 0x94
   143c4:	str	r1, [r4, #152]	; 0x98
   143c8:	str	r7, [r3, #16]
   143cc:	ldr	r2, [r5]
   143d0:	str	r2, [r4, #168]	; 0xa8
   143d4:	strh	ip, [r3, #14]
   143d8:	add	sp, sp, #12
   143dc:	ldrd	r4, [sp]
   143e0:	ldrd	r6, [sp, #8]
   143e4:	ldrd	r8, [sp, #16]
   143e8:	ldrd	sl, [sp, #24]
   143ec:	add	sp, sp, #32
   143f0:	pop	{pc}		; (ldr pc, [sp], #4)
   143f4:	ldr	r3, [r0, #32]
   143f8:	add	r3, r3, #36	; 0x24
   143fc:	str	r3, [r0, #32]
   14400:	b	14338 <flatcc_builder_start_buffer@@Base+0xd0>
   14404:	mvn	r0, #0
   14408:	b	143d8 <flatcc_builder_start_buffer@@Base+0x170>
   1440c:	bl	132a0 <flatcc_builder_default_alloc@@Base+0x124>
   14410:	andeq	r9, r1, r0, lsl #15

00014414 <flatcc_builder_end_buffer@@Base>:
   14414:	ldr	ip, [r0, #32]
   14418:	strd	r4, [sp, #-16]!
   1441c:	mov	r4, r0
   14420:	ldrh	r2, [r0, #164]	; 0xa4
   14424:	ldr	r0, [r0, #152]	; 0x98
   14428:	ldrh	ip, [ip, #14]
   1442c:	and	r2, r2, #2
   14430:	str	r6, [sp, #8]
   14434:	str	lr, [sp, #12]
   14438:	sub	sp, sp, #8
   1443c:	cmp	r0, #0
   14440:	moveq	r0, r2
   14444:	orrne	r0, r2, #1
   14448:	cmp	ip, #1
   1444c:	bne	14534 <flatcc_builder_end_buffer@@Base+0x120>
   14450:	ldrh	r2, [r4, #132]	; 0x84
   14454:	mov	r3, r1
   14458:	add	r1, r4, #168	; 0xa8
   1445c:	ldrh	ip, [r4, #128]	; 0x80
   14460:	cmp	r2, ip
   14464:	movhi	ip, r2
   14468:	strhhi	r2, [r4, #128]	; 0x80
   1446c:	str	ip, [sp]
   14470:	str	r0, [sp, #4]
   14474:	mov	r0, r4
   14478:	bl	13e68 <flatcc_builder_create_buffer@@Base>
   1447c:	subs	r5, r0, #0
   14480:	beq	1451c <flatcc_builder_end_buffer@@Base+0x108>
   14484:	mov	r1, #0
   14488:	ldr	r0, [r4, #16]
   1448c:	ldr	r3, [r4, #32]
   14490:	ldr	r2, [r4, #20]
   14494:	ldrh	lr, [r3, #32]
   14498:	ldr	ip, [r3, #16]
   1449c:	ldr	r6, [r3, #20]
   144a0:	ldr	r3, [r3, #28]
   144a4:	str	r6, [r4, #144]	; 0x90
   144a8:	strh	lr, [r4, #164]	; 0xa4
   144ac:	str	r3, [r4, #152]	; 0x98
   144b0:	str	ip, [r4, #168]	; 0xa8
   144b4:	bl	11fb0 <memset@plt>
   144b8:	ldr	r3, [r4, #32]
   144bc:	ldr	r0, [r4, #60]	; 0x3c
   144c0:	ldr	r2, [r4, #64]	; 0x40
   144c4:	ldr	ip, [r3]
   144c8:	ldmib	r3, {r1, lr}
   144cc:	add	r0, r0, ip
   144d0:	sub	r2, r2, ip
   144d4:	str	r0, [r4, #16]
   144d8:	cmp	r2, r1
   144dc:	ldrh	r0, [r4, #128]	; 0x80
   144e0:	movcs	r2, r1
   144e4:	str	lr, [r4, #20]
   144e8:	str	ip, [r4, #28]
   144ec:	ldrh	ip, [r4, #130]	; 0x82
   144f0:	str	r2, [r4, #24]
   144f4:	ldr	r2, [r4, #156]	; 0x9c
   144f8:	str	r1, [r3, #4]
   144fc:	cmp	r0, ip
   14500:	sub	r0, r3, #36	; 0x24
   14504:	strhcc	ip, [r4, #128]	; 0x80
   14508:	ldrh	r1, [r3, #12]
   1450c:	sub	r3, r2, #1
   14510:	str	r0, [r4, #32]
   14514:	strh	r1, [r4, #130]	; 0x82
   14518:	str	r3, [r4, #156]	; 0x9c
   1451c:	mov	r0, r5
   14520:	add	sp, sp, #8
   14524:	ldrd	r4, [sp]
   14528:	ldr	r6, [sp, #8]
   1452c:	add	sp, sp, #12
   14530:	pop	{pc}		; (ldr pc, [sp], #4)
   14534:	movw	r1, #40488	; 0x9e28
   14538:	movt	r1, #1
   1453c:	ldr	r3, [pc, #12]	; 14550 <flatcc_builder_end_buffer@@Base+0x13c>
   14540:	movw	r0, #40764	; 0x9f3c
   14544:	movt	r0, #1
   14548:	movw	r2, #838	; 0x346
   1454c:	bl	11fd4 <__assert_fail@plt>
   14550:	andeq	r9, r1, r0, lsr #20

00014554 <flatcc_builder_start_struct@@Base>:
   14554:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14558:	mov	r5, r1
   1455c:	mov	r4, r0
   14560:	ldr	r1, [r0, #156]	; 0x9c
   14564:	ldr	r3, [r0, #160]	; 0xa0
   14568:	strd	r6, [sp, #8]
   1456c:	mov	r6, r2
   14570:	str	r8, [sp, #16]
   14574:	add	r2, r1, #1
   14578:	str	lr, [sp, #20]
   1457c:	sub	sp, sp, #8
   14580:	cmp	r2, r3
   14584:	str	r2, [r0, #156]	; 0x9c
   14588:	ble	146a8 <flatcc_builder_start_struct@@Base+0x154>
   1458c:	ldr	r3, [r0, #176]	; 0xb0
   14590:	cmp	r3, #0
   14594:	cmpgt	r2, r3
   14598:	movgt	r3, #1
   1459c:	movle	r3, #0
   145a0:	bgt	14714 <flatcc_builder_start_struct@@Base+0x1c0>
   145a4:	add	r1, r1, r1, lsl #3
   145a8:	ldr	r0, [r0, #88]	; 0x58
   145ac:	lsl	r7, r1, #2
   145b0:	add	r2, r7, #36	; 0x24
   145b4:	cmp	r2, r0
   145b8:	bls	145dc <flatcc_builder_start_struct@@Base+0x88>
   145bc:	mov	ip, #4
   145c0:	add	r1, r4, #84	; 0x54
   145c4:	ldr	r0, [r4, #40]	; 0x28
   145c8:	str	ip, [sp]
   145cc:	ldr	r8, [r4, #48]	; 0x30
   145d0:	blx	r8
   145d4:	cmp	r0, #0
   145d8:	bne	1471c <flatcc_builder_start_struct@@Base+0x1c8>
   145dc:	ldr	r1, [r4, #84]	; 0x54
   145e0:	add	r1, r1, r7
   145e4:	cmp	r1, #0
   145e8:	str	r1, [r4, #32]
   145ec:	beq	14714 <flatcc_builder_start_struct@@Base+0x1c0>
   145f0:	ldr	r3, [r4, #88]	; 0x58
   145f4:	movw	r0, #36409	; 0x8e39
   145f8:	movt	r0, #14563	; 0x38e3
   145fc:	ldr	r2, [r4, #176]	; 0xb0
   14600:	umull	r0, r3, r0, r3
   14604:	lsr	r3, r3, #3
   14608:	cmp	r2, #0
   1460c:	cmpgt	r3, r2
   14610:	movgt	r3, r2
   14614:	str	r3, [r4, #160]	; 0xa0
   14618:	ldr	r3, [r4, #20]
   1461c:	mvn	lr, #3
   14620:	ldr	ip, [r4, #28]
   14624:	ldrh	r7, [r4, #130]	; 0x82
   14628:	ldr	r2, [r4, #64]	; 0x40
   1462c:	ldr	r0, [r4, #60]	; 0x3c
   14630:	str	r3, [r1, #8]
   14634:	add	r3, r3, ip
   14638:	add	r3, r3, #7
   1463c:	strh	r7, [r1, #12]
   14640:	mov	r7, #0
   14644:	bic	r3, r3, #7
   14648:	strh	r6, [r4, #130]	; 0x82
   1464c:	mvn	r6, #3
   14650:	sub	r2, r2, r3
   14654:	stm	r1, {ip, lr}
   14658:	mov	ip, #2
   1465c:	cmp	r2, lr
   14660:	add	r0, r0, r3
   14664:	str	r7, [r4, #20]
   14668:	movhi	r2, lr
   1466c:	str	r3, [r4, #28]
   14670:	strh	ip, [r1, #14]
   14674:	strls	r2, [r4, #24]
   14678:	strhi	lr, [r4, #24]
   1467c:	cmp	r5, r2
   14680:	str	r0, [r4, #16]
   14684:	str	r6, [r1, #4]
   14688:	str	r5, [r4, #20]
   1468c:	bcs	146b8 <flatcc_builder_start_struct@@Base+0x164>
   14690:	add	sp, sp, #8
   14694:	ldrd	r4, [sp]
   14698:	ldrd	r6, [sp, #8]
   1469c:	ldr	r8, [sp, #16]
   146a0:	add	sp, sp, #20
   146a4:	pop	{pc}		; (ldr pc, [sp], #4)
   146a8:	ldr	r1, [r0, #32]
   146ac:	add	r1, r1, #36	; 0x24
   146b0:	str	r1, [r0, #32]
   146b4:	b	14618 <flatcc_builder_start_struct@@Base+0xc4>
   146b8:	mov	ip, #1
   146bc:	add	r1, r4, #60	; 0x3c
   146c0:	ldr	r0, [r4, #40]	; 0x28
   146c4:	add	r2, r5, ip
   146c8:	add	r2, r2, r3
   146cc:	mov	r3, ip
   146d0:	str	ip, [sp]
   146d4:	ldr	r5, [r4, #48]	; 0x30
   146d8:	blx	r5
   146dc:	cmp	r0, #0
   146e0:	bne	14714 <flatcc_builder_start_struct@@Base+0x1c0>
   146e4:	ldr	r0, [r4, #28]
   146e8:	ldr	r2, [r4, #32]
   146ec:	ldr	r3, [r4, #64]	; 0x40
   146f0:	ldr	r1, [r4, #60]	; 0x3c
   146f4:	sub	r3, r3, r0
   146f8:	cmp	r3, r6
   146fc:	movhi	r3, r6
   14700:	add	r0, r1, r0
   14704:	str	r0, [r4, #16]
   14708:	str	r3, [r4, #24]
   1470c:	str	r6, [r2, #4]
   14710:	b	14690 <flatcc_builder_start_struct@@Base+0x13c>
   14714:	mov	r0, #0
   14718:	b	14690 <flatcc_builder_start_struct@@Base+0x13c>
   1471c:	bl	132a0 <flatcc_builder_default_alloc@@Base+0x124>

00014720 <flatcc_builder_struct_edit@@Base>:
   14720:	ldr	r0, [r0, #16]
   14724:	bx	lr

00014728 <flatcc_builder_end_struct@@Base>:
   14728:	ldr	r3, [r0, #32]
   1472c:	strd	r4, [sp, #-16]!
   14730:	ldrh	r3, [r3, #14]
   14734:	str	r6, [sp, #8]
   14738:	str	lr, [sp, #12]
   1473c:	sub	sp, sp, #80	; 0x50
   14740:	cmp	r3, #2
   14744:	bne	148ec <flatcc_builder_end_struct@@Base+0x1c4>
   14748:	ldrh	r3, [r0, #130]	; 0x82
   1474c:	mov	r4, r0
   14750:	ldr	r1, [r0, #16]
   14754:	ldr	r0, [r0, #20]
   14758:	cmp	r3, #0
   1475c:	beq	148d0 <flatcc_builder_end_struct@@Base+0x1a8>
   14760:	ldrh	r2, [r4, #128]	; 0x80
   14764:	ldr	ip, [r4, #136]	; 0x88
   14768:	cmp	r2, r3
   1476c:	mov	r2, #0
   14770:	strhcc	r3, [r4, #128]	; 0x80
   14774:	sub	r5, ip, r0
   14778:	sub	r3, r3, #1
   1477c:	cmp	r0, r2
   14780:	and	r3, r3, r5
   14784:	str	r2, [sp, #8]
   14788:	str	r2, [sp, #12]
   1478c:	bne	14884 <flatcc_builder_end_struct@@Base+0x15c>
   14790:	cmp	r3, #0
   14794:	movne	r1, r2
   14798:	movne	r0, r3
   1479c:	movne	r2, #1
   147a0:	beq	148b0 <flatcc_builder_end_struct@@Base+0x188>
   147a4:	ldr	lr, [pc, #348]	; 14908 <flatcc_builder_end_struct@@Base+0x1e0>
   147a8:	add	r5, sp, #80	; 0x50
   147ac:	add	r1, r1, #1
   147b0:	add	r1, r5, r1, lsl #3
   147b4:	sub	r5, ip, r0
   147b8:	str	r0, [sp, #8]
   147bc:	str	r2, [sp, #12]
   147c0:	str	lr, [r1, #-72]	; 0xffffffb8
   147c4:	str	r3, [r1, #-68]	; 0xffffffbc
   147c8:	cmp	ip, r5
   147cc:	ble	148b0 <flatcc_builder_end_struct@@Base+0x188>
   147d0:	add	r1, sp, #16
   147d4:	mov	r3, r5
   147d8:	str	r0, [sp]
   147dc:	ldr	r0, [r4, #36]	; 0x24
   147e0:	ldr	r6, [r4, #44]	; 0x2c
   147e4:	blx	r6
   147e8:	subs	r1, r0, #0
   147ec:	bne	148cc <flatcc_builder_end_struct@@Base+0x1a4>
   147f0:	cmp	r5, #0
   147f4:	str	r5, [r4, #136]	; 0x88
   147f8:	beq	1486c <flatcc_builder_end_struct@@Base+0x144>
   147fc:	ldr	r0, [r4, #16]
   14800:	ldr	r2, [r4, #20]
   14804:	bl	11fb0 <memset@plt>
   14808:	ldr	r3, [r4, #32]
   1480c:	ldr	r0, [r4, #60]	; 0x3c
   14810:	ldr	r2, [r4, #64]	; 0x40
   14814:	ldr	ip, [r3]
   14818:	ldmib	r3, {r1, lr}
   1481c:	add	r0, r0, ip
   14820:	sub	r2, r2, ip
   14824:	str	r0, [r4, #16]
   14828:	cmp	r2, r1
   1482c:	ldrh	r0, [r4, #128]	; 0x80
   14830:	movcs	r2, r1
   14834:	str	lr, [r4, #20]
   14838:	str	ip, [r4, #28]
   1483c:	ldrh	ip, [r4, #130]	; 0x82
   14840:	str	r2, [r4, #24]
   14844:	ldr	r2, [r4, #156]	; 0x9c
   14848:	str	r1, [r3, #4]
   1484c:	cmp	r0, ip
   14850:	sub	r0, r3, #36	; 0x24
   14854:	strhcc	ip, [r4, #128]	; 0x80
   14858:	ldrh	r1, [r3, #12]
   1485c:	sub	r3, r2, #1
   14860:	str	r0, [r4, #32]
   14864:	strh	r1, [r4, #130]	; 0x82
   14868:	str	r3, [r4, #156]	; 0x9c
   1486c:	mov	r0, r5
   14870:	add	sp, sp, #80	; 0x50
   14874:	ldrd	r4, [sp]
   14878:	ldr	r6, [sp, #8]
   1487c:	add	sp, sp, #12
   14880:	pop	{pc}		; (ldr pc, [sp], #4)
   14884:	mov	r2, #1
   14888:	cmp	r3, #0
   1488c:	str	r0, [sp, #8]
   14890:	str	r2, [sp, #12]
   14894:	str	r1, [sp, #16]
   14898:	movne	r1, r2
   1489c:	movne	r2, #2
   148a0:	str	r0, [sp, #20]
   148a4:	addne	r0, r0, r3
   148a8:	beq	147c8 <flatcc_builder_end_struct@@Base+0xa0>
   148ac:	b	147a4 <flatcc_builder_end_struct@@Base+0x7c>
   148b0:	movw	r1, #40488	; 0x9e28
   148b4:	movt	r1, #1
   148b8:	ldr	r3, [pc, #76]	; 1490c <flatcc_builder_end_struct@@Base+0x1e4>
   148bc:	movw	r0, #40680	; 0x9ee8
   148c0:	movt	r0, #1
   148c4:	movw	r2, #647	; 0x287
   148c8:	bl	11fd4 <__assert_fail@plt>
   148cc:	bl	13318 <flatcc_builder_default_alloc@@Base+0x19c>
   148d0:	movw	r1, #40488	; 0x9e28
   148d4:	movt	r1, #1
   148d8:	ldr	r3, [pc, #48]	; 14910 <flatcc_builder_end_struct@@Base+0x1e8>
   148dc:	movw	r0, #40752	; 0x9f30
   148e0:	movt	r0, #1
   148e4:	movw	r2, #783	; 0x30f
   148e8:	bl	11fd4 <__assert_fail@plt>
   148ec:	movw	r1, #40488	; 0x9e28
   148f0:	movt	r1, #1
   148f4:	ldr	r3, [pc, #24]	; 14914 <flatcc_builder_end_struct@@Base+0x1ec>
   148f8:	movw	r0, #40808	; 0x9f68
   148fc:	movt	r0, #1
   14900:	mov	r2, #872	; 0x368
   14904:	bl	11fd4 <__assert_fail@plt>
   14908:	andeq	r9, r1, r0, lsl #15
   1490c:	andeq	r9, r1, r4, lsl #14
   14910:	andeq	r9, r1, r0, lsl #20
   14914:	andeq	r9, r1, ip, lsr sl

00014918 <flatcc_builder_extend_vector@@Base>:
   14918:	ldr	ip, [r0, #32]
   1491c:	strd	r4, [sp, #-20]!	; 0xffffffec
   14920:	mov	r4, r0
   14924:	ldr	r3, [ip, #20]
   14928:	ldr	r0, [ip, #24]
   1492c:	strd	r6, [sp, #8]
   14930:	str	lr, [sp, #16]
   14934:	sub	sp, sp, #12
   14938:	adds	r3, r1, r3
   1493c:	movcs	r5, #1
   14940:	movcc	r5, #0
   14944:	cmp	r0, r3
   14948:	orrcc	r5, r5, #1
   1494c:	cmp	r5, #0
   14950:	bne	149fc <flatcc_builder_extend_vector@@Base+0xe4>
   14954:	ldr	r2, [ip, #16]
   14958:	ldr	r6, [r4, #20]
   1495c:	str	r3, [ip, #20]
   14960:	ldr	r3, [r4, #24]
   14964:	mla	r2, r2, r1, r6
   14968:	cmp	r2, r3
   1496c:	str	r2, [r4, #20]
   14970:	bcs	14990 <flatcc_builder_extend_vector@@Base+0x78>
   14974:	ldr	r0, [r4, #16]
   14978:	add	r0, r0, r6
   1497c:	add	sp, sp, #12
   14980:	ldrd	r4, [sp]
   14984:	ldrd	r6, [sp, #8]
   14988:	add	sp, sp, #16
   1498c:	pop	{pc}		; (ldr pc, [sp], #4)
   14990:	ldr	ip, [r4, #28]
   14994:	mov	r0, #1
   14998:	add	r1, r4, #60	; 0x3c
   1499c:	mov	r3, r0
   149a0:	str	r0, [sp]
   149a4:	ldr	r7, [r4, #48]	; 0x30
   149a8:	add	ip, ip, r0
   149ac:	ldr	r0, [r4, #40]	; 0x28
   149b0:	add	r2, ip, r2
   149b4:	blx	r7
   149b8:	cmp	r0, #0
   149bc:	bne	149f4 <flatcc_builder_extend_vector@@Base+0xdc>
   149c0:	ldr	r2, [r4, #28]
   149c4:	ldr	r0, [r4, #60]	; 0x3c
   149c8:	ldr	r3, [r4, #64]	; 0x40
   149cc:	add	r0, r0, r2
   149d0:	sub	r3, r3, r2
   149d4:	mvn	r2, #3
   149d8:	str	r0, [r4, #16]
   149dc:	cmn	r3, #4
   149e0:	mvnhi	r3, #3
   149e4:	str	r3, [r4, #24]
   149e8:	ldr	r3, [r4, #32]
   149ec:	str	r2, [r3, #4]
   149f0:	b	14978 <flatcc_builder_extend_vector@@Base+0x60>
   149f4:	mov	r0, r5
   149f8:	b	1497c <flatcc_builder_extend_vector@@Base+0x64>
   149fc:	bl	13340 <flatcc_builder_default_alloc@@Base+0x1c4>

00014a00 <flatcc_builder_vector_push@@Base>:
   14a00:	ldr	r3, [r0, #32]
   14a04:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14a08:	ldrh	r2, [r3, #14]
   14a0c:	strd	r6, [sp, #8]
   14a10:	str	r8, [sp, #16]
   14a14:	str	lr, [sp, #20]
   14a18:	sub	sp, sp, #8
   14a1c:	cmp	r2, #4
   14a20:	bne	14b24 <flatcc_builder_vector_push@@Base+0x124>
   14a24:	mov	r6, r1
   14a28:	ldr	r2, [r3, #20]
   14a2c:	ldr	r1, [r3, #24]
   14a30:	cmp	r2, r1
   14a34:	bhi	14b08 <flatcc_builder_vector_push@@Base+0x108>
   14a38:	add	r2, r2, #1
   14a3c:	ldr	r5, [r3, #16]
   14a40:	mov	r4, r0
   14a44:	ldr	r7, [r0, #20]
   14a48:	str	r2, [r3, #20]
   14a4c:	ldr	r3, [r0, #24]
   14a50:	add	ip, r5, r7
   14a54:	cmp	ip, r3
   14a58:	str	ip, [r0, #20]
   14a5c:	bcs	14a9c <flatcc_builder_vector_push@@Base+0x9c>
   14a60:	ldr	r3, [r0, #16]
   14a64:	adds	r3, r3, r7
   14a68:	beq	14a80 <flatcc_builder_vector_push@@Base+0x80>
   14a6c:	mov	r0, r3
   14a70:	mov	r2, r5
   14a74:	mov	r1, r6
   14a78:	bl	11f44 <memcpy@plt>
   14a7c:	mov	r3, r0
   14a80:	mov	r0, r3
   14a84:	add	sp, sp, #8
   14a88:	ldrd	r4, [sp]
   14a8c:	ldrd	r6, [sp, #8]
   14a90:	ldr	r8, [sp, #16]
   14a94:	add	sp, sp, #20
   14a98:	pop	{pc}		; (ldr pc, [sp], #4)
   14a9c:	ldr	r2, [r4, #28]
   14aa0:	mov	r0, #1
   14aa4:	add	r1, r4, #60	; 0x3c
   14aa8:	mov	r3, r0
   14aac:	str	r0, [sp]
   14ab0:	ldr	r8, [r4, #48]	; 0x30
   14ab4:	add	r2, r2, r0
   14ab8:	ldr	r0, [r4, #40]	; 0x28
   14abc:	add	r2, r2, ip
   14ac0:	blx	r8
   14ac4:	cmp	r0, #0
   14ac8:	bne	14b00 <flatcc_builder_vector_push@@Base+0x100>
   14acc:	ldr	r1, [r4, #28]
   14ad0:	ldr	r3, [r4, #60]	; 0x3c
   14ad4:	ldr	r2, [r4, #64]	; 0x40
   14ad8:	add	r3, r3, r1
   14adc:	sub	r2, r2, r1
   14ae0:	mvn	r1, #3
   14ae4:	str	r3, [r4, #16]
   14ae8:	cmn	r2, #4
   14aec:	mvnhi	r2, #3
   14af0:	str	r2, [r4, #24]
   14af4:	ldr	r2, [r4, #32]
   14af8:	str	r1, [r2, #4]
   14afc:	b	14a64 <flatcc_builder_vector_push@@Base+0x64>
   14b00:	mov	r3, #0
   14b04:	b	14a80 <flatcc_builder_vector_push@@Base+0x80>
   14b08:	movw	r1, #40488	; 0x9e28
   14b0c:	movt	r1, #1
   14b10:	ldr	r3, [pc, #40]	; 14b40 <flatcc_builder_vector_push@@Base+0x140>
   14b14:	movw	r0, #40896	; 0x9fc0
   14b18:	movt	r0, #1
   14b1c:	mov	r2, #908	; 0x38c
   14b20:	bl	11fd4 <__assert_fail@plt>
   14b24:	movw	r1, #40488	; 0x9e28
   14b28:	movt	r1, #1
   14b2c:	ldr	r3, [pc, #12]	; 14b40 <flatcc_builder_vector_push@@Base+0x140>
   14b30:	movw	r0, #40852	; 0x9f94
   14b34:	movt	r0, #1
   14b38:	movw	r2, #907	; 0x38b
   14b3c:	bl	11fd4 <__assert_fail@plt>
   14b40:	andeq	r9, r1, r8, asr sl

00014b44 <flatcc_builder_append_vector@@Base>:
   14b44:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14b48:	mov	r5, r0
   14b4c:	ldr	r0, [r0, #32]
   14b50:	ldrh	r3, [r0, #14]
   14b54:	strd	r6, [sp, #8]
   14b58:	strd	r8, [sp, #16]
   14b5c:	str	lr, [sp, #24]
   14b60:	sub	sp, sp, #12
   14b64:	cmp	r3, #4
   14b68:	bne	14c68 <flatcc_builder_append_vector@@Base+0x124>
   14b6c:	mov	r6, r1
   14b70:	ldr	r1, [r0, #20]
   14b74:	ldr	r4, [r0, #24]
   14b78:	adds	r1, r2, r1
   14b7c:	movcs	r3, #1
   14b80:	movcc	r3, #0
   14b84:	cmp	r4, r1
   14b88:	movcs	r4, r3
   14b8c:	orrcc	r4, r3, #1
   14b90:	cmp	r4, #0
   14b94:	bne	14c64 <flatcc_builder_append_vector@@Base+0x120>
   14b98:	ldr	r7, [r0, #16]
   14b9c:	ldr	r8, [r5, #20]
   14ba0:	ldr	r3, [r5, #24]
   14ba4:	mul	r7, r7, r2
   14ba8:	str	r1, [r0, #20]
   14bac:	add	ip, r7, r8
   14bb0:	cmp	ip, r3
   14bb4:	str	ip, [r5, #20]
   14bb8:	bcs	14bf8 <flatcc_builder_append_vector@@Base+0xb4>
   14bbc:	ldr	r3, [r5, #16]
   14bc0:	adds	r3, r3, r8
   14bc4:	beq	14bdc <flatcc_builder_append_vector@@Base+0x98>
   14bc8:	mov	r0, r3
   14bcc:	mov	r2, r7
   14bd0:	mov	r1, r6
   14bd4:	bl	11f44 <memcpy@plt>
   14bd8:	mov	r3, r0
   14bdc:	mov	r0, r3
   14be0:	add	sp, sp, #12
   14be4:	ldrd	r4, [sp]
   14be8:	ldrd	r6, [sp, #8]
   14bec:	ldrd	r8, [sp, #16]
   14bf0:	add	sp, sp, #24
   14bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   14bf8:	ldr	r2, [r5, #28]
   14bfc:	mov	r0, #1
   14c00:	add	r1, r5, #60	; 0x3c
   14c04:	mov	r3, r0
   14c08:	str	r0, [sp]
   14c0c:	ldr	r9, [r5, #48]	; 0x30
   14c10:	add	r2, r2, r0
   14c14:	ldr	r0, [r5, #40]	; 0x28
   14c18:	add	r2, r2, ip
   14c1c:	blx	r9
   14c20:	cmp	r0, #0
   14c24:	bne	14c5c <flatcc_builder_append_vector@@Base+0x118>
   14c28:	ldr	r1, [r5, #28]
   14c2c:	ldr	r3, [r5, #60]	; 0x3c
   14c30:	ldr	r2, [r5, #64]	; 0x40
   14c34:	add	r3, r3, r1
   14c38:	sub	r2, r2, r1
   14c3c:	mvn	r1, #3
   14c40:	str	r3, [r5, #16]
   14c44:	cmn	r2, #4
   14c48:	mvnhi	r2, #3
   14c4c:	str	r2, [r5, #24]
   14c50:	ldr	r2, [r5, #32]
   14c54:	str	r1, [r2, #4]
   14c58:	b	14bc0 <flatcc_builder_append_vector@@Base+0x7c>
   14c5c:	mov	r3, r4
   14c60:	b	14bdc <flatcc_builder_append_vector@@Base+0x98>
   14c64:	bl	13340 <flatcc_builder_default_alloc@@Base+0x1c4>
   14c68:	movw	r1, #40488	; 0x9e28
   14c6c:	movt	r1, #1
   14c70:	ldr	r3, [pc, #12]	; 14c84 <flatcc_builder_append_vector@@Base+0x140>
   14c74:	movw	r0, #40852	; 0x9f94
   14c78:	movt	r0, #1
   14c7c:	movw	r2, #915	; 0x393
   14c80:	bl	11fd4 <__assert_fail@plt>
   14c84:	andeq	r9, r1, r4, ror sl

00014c88 <flatcc_builder_extend_offset_vector@@Base>:
   14c88:	ldr	ip, [r0, #32]
   14c8c:	strd	r4, [sp, #-20]!	; 0xffffffec
   14c90:	mov	r4, r0
   14c94:	ldr	r3, [ip, #20]
   14c98:	strd	r6, [sp, #8]
   14c9c:	str	lr, [sp, #16]
   14ca0:	sub	sp, sp, #12
   14ca4:	adds	r3, r1, r3
   14ca8:	movcs	r2, #1
   14cac:	movcc	r2, #0
   14cb0:	cmn	r3, #-1073741823	; 0xc0000001
   14cb4:	movls	r0, #0
   14cb8:	movhi	r0, #1
   14cbc:	orrs	r5, r2, r0
   14cc0:	bne	14d68 <flatcc_builder_extend_offset_vector@@Base+0xe0>
   14cc4:	ldr	r6, [r4, #20]
   14cc8:	str	r3, [ip, #20]
   14ccc:	ldr	r3, [r4, #24]
   14cd0:	add	r2, r6, r1, lsl #2
   14cd4:	cmp	r2, r3
   14cd8:	str	r2, [r4, #20]
   14cdc:	bcs	14cfc <flatcc_builder_extend_offset_vector@@Base+0x74>
   14ce0:	ldr	r0, [r4, #16]
   14ce4:	add	r0, r0, r6
   14ce8:	add	sp, sp, #12
   14cec:	ldrd	r4, [sp]
   14cf0:	ldrd	r6, [sp, #8]
   14cf4:	add	sp, sp, #16
   14cf8:	pop	{pc}		; (ldr pc, [sp], #4)
   14cfc:	ldr	ip, [r4, #28]
   14d00:	mov	r0, #1
   14d04:	add	r1, r4, #60	; 0x3c
   14d08:	mov	r3, r0
   14d0c:	str	r0, [sp]
   14d10:	ldr	r7, [r4, #48]	; 0x30
   14d14:	add	ip, ip, r0
   14d18:	ldr	r0, [r4, #40]	; 0x28
   14d1c:	add	r2, ip, r2
   14d20:	blx	r7
   14d24:	cmp	r0, #0
   14d28:	bne	14d60 <flatcc_builder_extend_offset_vector@@Base+0xd8>
   14d2c:	ldr	r2, [r4, #28]
   14d30:	ldr	r0, [r4, #60]	; 0x3c
   14d34:	ldr	r3, [r4, #64]	; 0x40
   14d38:	add	r0, r0, r2
   14d3c:	sub	r3, r3, r2
   14d40:	mvn	r2, #3
   14d44:	str	r0, [r4, #16]
   14d48:	cmn	r3, #4
   14d4c:	mvnhi	r3, #3
   14d50:	str	r3, [r4, #24]
   14d54:	ldr	r3, [r4, #32]
   14d58:	str	r2, [r3, #4]
   14d5c:	b	14ce4 <flatcc_builder_extend_offset_vector@@Base+0x5c>
   14d60:	mov	r0, r5
   14d64:	b	14ce8 <flatcc_builder_extend_offset_vector@@Base+0x60>
   14d68:	bl	13340 <flatcc_builder_default_alloc@@Base+0x1c4>

00014d6c <flatcc_builder_offset_vector_push@@Base>:
   14d6c:	ldr	r2, [r0, #32]
   14d70:	strd	r4, [sp, #-20]!	; 0xffffffec
   14d74:	ldrh	r3, [r2, #14]
   14d78:	strd	r6, [sp, #8]
   14d7c:	str	lr, [sp, #16]
   14d80:	sub	sp, sp, #12
   14d84:	cmp	r3, #5
   14d88:	bne	14e4c <flatcc_builder_offset_vector_push@@Base+0xe0>
   14d8c:	ldr	r3, [r2, #20]
   14d90:	cmn	r3, #-1073741823	; 0xc0000001
   14d94:	beq	14e44 <flatcc_builder_offset_vector_push@@Base+0xd8>
   14d98:	ldr	r5, [r0, #20]
   14d9c:	mov	r6, r1
   14da0:	add	r3, r3, #1
   14da4:	mov	r4, r0
   14da8:	ldr	r1, [r0, #24]
   14dac:	str	r3, [r2, #20]
   14db0:	add	r3, r5, #4
   14db4:	cmp	r3, r1
   14db8:	str	r3, [r0, #20]
   14dbc:	bcs	14de0 <flatcc_builder_offset_vector_push@@Base+0x74>
   14dc0:	ldr	r3, [r0, #16]
   14dc4:	adds	r0, r3, r5
   14dc8:	strne	r6, [r3, r5]
   14dcc:	add	sp, sp, #12
   14dd0:	ldrd	r4, [sp]
   14dd4:	ldrd	r6, [sp, #8]
   14dd8:	add	sp, sp, #16
   14ddc:	pop	{pc}		; (ldr pc, [sp], #4)
   14de0:	ldr	r2, [r4, #28]
   14de4:	mov	r0, #1
   14de8:	add	r1, r4, #60	; 0x3c
   14dec:	mov	r3, r0
   14df0:	str	r0, [sp]
   14df4:	ldr	r0, [r4, #40]	; 0x28
   14df8:	add	r2, r5, r2
   14dfc:	ldr	r7, [r4, #48]	; 0x30
   14e00:	add	r2, r2, #5
   14e04:	blx	r7
   14e08:	cmp	r0, #0
   14e0c:	bne	14e44 <flatcc_builder_offset_vector_push@@Base+0xd8>
   14e10:	ldr	r1, [r4, #28]
   14e14:	ldr	r3, [r4, #60]	; 0x3c
   14e18:	ldr	r2, [r4, #64]	; 0x40
   14e1c:	add	r3, r3, r1
   14e20:	sub	r2, r2, r1
   14e24:	mvn	r1, #3
   14e28:	str	r3, [r4, #16]
   14e2c:	cmn	r2, #4
   14e30:	mvnhi	r2, #3
   14e34:	str	r2, [r4, #24]
   14e38:	ldr	r2, [r4, #32]
   14e3c:	str	r1, [r2, #4]
   14e40:	b	14dc4 <flatcc_builder_offset_vector_push@@Base+0x58>
   14e44:	mov	r0, #0
   14e48:	b	14dcc <flatcc_builder_offset_vector_push@@Base+0x60>
   14e4c:	movw	r1, #40488	; 0x9e28
   14e50:	movt	r1, #1
   14e54:	ldr	r3, [pc, #12]	; 14e68 <flatcc_builder_offset_vector_push@@Base+0xfc>
   14e58:	movw	r0, #40960	; 0xa000
   14e5c:	movt	r0, #1
   14e60:	movw	r2, #934	; 0x3a6
   14e64:	bl	11fd4 <__assert_fail@plt>
   14e68:	muleq	r1, r4, sl

00014e6c <flatcc_builder_append_offset_vector@@Base>:
   14e6c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14e70:	mov	r5, r0
   14e74:	ldr	r0, [r0, #32]
   14e78:	ldrh	r3, [r0, #14]
   14e7c:	strd	r6, [sp, #8]
   14e80:	strd	r8, [sp, #16]
   14e84:	str	lr, [sp, #24]
   14e88:	sub	sp, sp, #12
   14e8c:	cmp	r3, #5
   14e90:	bne	14f88 <flatcc_builder_append_offset_vector@@Base+0x11c>
   14e94:	ldr	r3, [r0, #20]
   14e98:	mov	r7, r1
   14e9c:	adds	r1, r2, r3
   14ea0:	movcs	r4, #1
   14ea4:	movcc	r4, #0
   14ea8:	cmn	r1, #-1073741823	; 0xc0000001
   14eac:	movls	r3, #0
   14eb0:	movhi	r3, #1
   14eb4:	orrs	r4, r4, r3
   14eb8:	bne	14f84 <flatcc_builder_append_offset_vector@@Base+0x118>
   14ebc:	ldr	r8, [r5, #20]
   14ec0:	lsl	r6, r2, #2
   14ec4:	ldr	r3, [r5, #24]
   14ec8:	str	r1, [r0, #20]
   14ecc:	add	ip, r6, r8
   14ed0:	cmp	ip, r3
   14ed4:	str	ip, [r5, #20]
   14ed8:	bcs	14f18 <flatcc_builder_append_offset_vector@@Base+0xac>
   14edc:	ldr	r3, [r5, #16]
   14ee0:	adds	r3, r3, r8
   14ee4:	beq	14efc <flatcc_builder_append_offset_vector@@Base+0x90>
   14ee8:	mov	r0, r3
   14eec:	mov	r2, r6
   14ef0:	mov	r1, r7
   14ef4:	bl	11f44 <memcpy@plt>
   14ef8:	mov	r3, r0
   14efc:	mov	r0, r3
   14f00:	add	sp, sp, #12
   14f04:	ldrd	r4, [sp]
   14f08:	ldrd	r6, [sp, #8]
   14f0c:	ldrd	r8, [sp, #16]
   14f10:	add	sp, sp, #24
   14f14:	pop	{pc}		; (ldr pc, [sp], #4)
   14f18:	ldr	r2, [r5, #28]
   14f1c:	mov	r0, #1
   14f20:	add	r1, r5, #60	; 0x3c
   14f24:	mov	r3, r0
   14f28:	str	r0, [sp]
   14f2c:	ldr	r9, [r5, #48]	; 0x30
   14f30:	add	r2, r2, r0
   14f34:	ldr	r0, [r5, #40]	; 0x28
   14f38:	add	r2, r2, ip
   14f3c:	blx	r9
   14f40:	cmp	r0, #0
   14f44:	bne	14f7c <flatcc_builder_append_offset_vector@@Base+0x110>
   14f48:	ldr	r1, [r5, #28]
   14f4c:	ldr	r3, [r5, #60]	; 0x3c
   14f50:	ldr	r2, [r5, #64]	; 0x40
   14f54:	add	r3, r3, r1
   14f58:	sub	r2, r2, r1
   14f5c:	mvn	r1, #3
   14f60:	str	r3, [r5, #16]
   14f64:	cmn	r2, #4
   14f68:	mvnhi	r2, #3
   14f6c:	str	r2, [r5, #24]
   14f70:	ldr	r2, [r5, #32]
   14f74:	str	r1, [r2, #4]
   14f78:	b	14ee0 <flatcc_builder_append_offset_vector@@Base+0x74>
   14f7c:	mov	r3, r4
   14f80:	b	14efc <flatcc_builder_append_offset_vector@@Base+0x90>
   14f84:	bl	13340 <flatcc_builder_default_alloc@@Base+0x1c4>
   14f88:	movw	r1, #40488	; 0x9e28
   14f8c:	movt	r1, #1
   14f90:	ldr	r3, [pc, #12]	; 14fa4 <flatcc_builder_append_offset_vector@@Base+0x138>
   14f94:	movw	r0, #40960	; 0xa000
   14f98:	movt	r0, #1
   14f9c:	mov	r2, #948	; 0x3b4
   14fa0:	bl	11fd4 <__assert_fail@plt>
   14fa4:			; <UNDEFINED> instruction: 0x00019ab8

00014fa8 <flatcc_builder_extend_string@@Base>:
   14fa8:	ldr	r2, [r0, #32]
   14fac:	strd	r4, [sp, #-16]!
   14fb0:	ldrh	r3, [r2, #14]
   14fb4:	str	r6, [sp, #8]
   14fb8:	str	lr, [sp, #12]
   14fbc:	sub	sp, sp, #8
   14fc0:	cmp	r3, #6
   14fc4:	bne	15080 <flatcc_builder_extend_string@@Base+0xd8>
   14fc8:	ldr	r3, [r2, #20]
   14fcc:	adds	r3, r1, r3
   14fd0:	bcs	1507c <flatcc_builder_extend_string@@Base+0xd4>
   14fd4:	ldr	r5, [r0, #20]
   14fd8:	mov	r4, r0
   14fdc:	str	r3, [r2, #20]
   14fe0:	ldr	r3, [r0, #24]
   14fe4:	add	r2, r1, r5
   14fe8:	cmp	r2, r3
   14fec:	str	r2, [r0, #20]
   14ff0:	bcs	15010 <flatcc_builder_extend_string@@Base+0x68>
   14ff4:	ldr	r0, [r0, #16]
   14ff8:	add	r0, r0, r5
   14ffc:	add	sp, sp, #8
   15000:	ldrd	r4, [sp]
   15004:	ldr	r6, [sp, #8]
   15008:	add	sp, sp, #12
   1500c:	pop	{pc}		; (ldr pc, [sp], #4)
   15010:	ldr	ip, [r4, #28]
   15014:	mov	r0, #1
   15018:	add	r1, r4, #60	; 0x3c
   1501c:	mov	r3, r0
   15020:	str	r0, [sp]
   15024:	ldr	r6, [r4, #48]	; 0x30
   15028:	add	ip, ip, r0
   1502c:	ldr	r0, [r4, #40]	; 0x28
   15030:	add	r2, ip, r2
   15034:	blx	r6
   15038:	cmp	r0, #0
   1503c:	bne	15074 <flatcc_builder_extend_string@@Base+0xcc>
   15040:	ldr	r2, [r4, #28]
   15044:	ldr	r0, [r4, #60]	; 0x3c
   15048:	ldr	r3, [r4, #64]	; 0x40
   1504c:	add	r0, r0, r2
   15050:	sub	r3, r3, r2
   15054:	mvn	r2, #3
   15058:	str	r0, [r4, #16]
   1505c:	cmn	r3, #4
   15060:	mvnhi	r3, #3
   15064:	str	r3, [r4, #24]
   15068:	ldr	r3, [r4, #32]
   1506c:	str	r2, [r3, #4]
   15070:	b	14ff8 <flatcc_builder_extend_string@@Base+0x50>
   15074:	mov	r0, #0
   15078:	b	14ffc <flatcc_builder_extend_string@@Base+0x54>
   1507c:	bl	13340 <flatcc_builder_default_alloc@@Base+0x1c4>
   15080:	movw	r1, #40488	; 0x9e28
   15084:	movt	r1, #1
   15088:	ldr	r3, [pc, #12]	; 1509c <flatcc_builder_extend_string@@Base+0xf4>
   1508c:	movw	r0, #40616	; 0x9ea8
   15090:	movt	r0, #1
   15094:	movw	r2, #957	; 0x3bd
   15098:	bl	11fd4 <__assert_fail@plt>
   1509c:	ldrdeq	r9, [r1], -ip

000150a0 <flatcc_builder_append_string@@Base>:
   150a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   150a4:	strd	r6, [sp, #8]
   150a8:	mov	r6, r1
   150ac:	ldr	r1, [r0, #32]
   150b0:	str	r8, [sp, #16]
   150b4:	str	lr, [sp, #20]
   150b8:	sub	sp, sp, #8
   150bc:	ldrh	r3, [r1, #14]
   150c0:	cmp	r3, #6
   150c4:	bne	151a4 <flatcc_builder_append_string@@Base+0x104>
   150c8:	ldr	r3, [r1, #20]
   150cc:	mov	r5, r2
   150d0:	adds	r3, r2, r3
   150d4:	bcs	151a0 <flatcc_builder_append_string@@Base+0x100>
   150d8:	ldr	r7, [r0, #20]
   150dc:	mov	r4, r0
   150e0:	str	r3, [r1, #20]
   150e4:	ldr	r3, [r0, #24]
   150e8:	add	ip, r2, r7
   150ec:	cmp	ip, r3
   150f0:	str	ip, [r0, #20]
   150f4:	bcs	15134 <flatcc_builder_append_string@@Base+0x94>
   150f8:	ldr	r3, [r0, #16]
   150fc:	adds	r3, r3, r7
   15100:	beq	15118 <flatcc_builder_append_string@@Base+0x78>
   15104:	mov	r0, r3
   15108:	mov	r2, r5
   1510c:	mov	r1, r6
   15110:	bl	11f44 <memcpy@plt>
   15114:	mov	r3, r0
   15118:	mov	r0, r3
   1511c:	add	sp, sp, #8
   15120:	ldrd	r4, [sp]
   15124:	ldrd	r6, [sp, #8]
   15128:	ldr	r8, [sp, #16]
   1512c:	add	sp, sp, #20
   15130:	pop	{pc}		; (ldr pc, [sp], #4)
   15134:	ldr	r2, [r4, #28]
   15138:	mov	r0, #1
   1513c:	add	r1, r4, #60	; 0x3c
   15140:	mov	r3, r0
   15144:	str	r0, [sp]
   15148:	ldr	r8, [r4, #48]	; 0x30
   1514c:	add	r2, r2, r0
   15150:	ldr	r0, [r4, #40]	; 0x28
   15154:	add	r2, r2, ip
   15158:	blx	r8
   1515c:	cmp	r0, #0
   15160:	bne	15198 <flatcc_builder_append_string@@Base+0xf8>
   15164:	ldr	r1, [r4, #28]
   15168:	ldr	r3, [r4, #60]	; 0x3c
   1516c:	ldr	r2, [r4, #64]	; 0x40
   15170:	add	r3, r3, r1
   15174:	sub	r2, r2, r1
   15178:	mvn	r1, #3
   1517c:	str	r3, [r4, #16]
   15180:	cmn	r2, #4
   15184:	mvnhi	r2, #3
   15188:	str	r2, [r4, #24]
   1518c:	ldr	r2, [r4, #32]
   15190:	str	r1, [r2, #4]
   15194:	b	150fc <flatcc_builder_append_string@@Base+0x5c>
   15198:	mov	r3, #0
   1519c:	b	15118 <flatcc_builder_append_string@@Base+0x78>
   151a0:	bl	13340 <flatcc_builder_default_alloc@@Base+0x1c4>
   151a4:	bl	13390 <flatcc_builder_default_alloc@@Base+0x214>

000151a8 <flatcc_builder_append_string_str@@Base>:
   151a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   151ac:	mov	r4, r0
   151b0:	mov	r0, r1
   151b4:	strd	r6, [sp, #8]
   151b8:	mov	r6, r1
   151bc:	str	r8, [sp, #16]
   151c0:	str	lr, [sp, #20]
   151c4:	sub	sp, sp, #8
   151c8:	bl	11f98 <strlen@plt>
   151cc:	ldr	r2, [r4, #32]
   151d0:	ldrh	r3, [r2, #14]
   151d4:	cmp	r3, #6
   151d8:	bne	152b4 <flatcc_builder_append_string_str@@Base+0x10c>
   151dc:	ldr	r3, [r2, #20]
   151e0:	mov	r5, r0
   151e4:	adds	r3, r0, r3
   151e8:	bcs	152b0 <flatcc_builder_append_string_str@@Base+0x108>
   151ec:	ldr	r7, [r4, #20]
   151f0:	str	r3, [r2, #20]
   151f4:	ldr	r3, [r4, #24]
   151f8:	add	ip, r0, r7
   151fc:	cmp	ip, r3
   15200:	str	ip, [r4, #20]
   15204:	bcs	15244 <flatcc_builder_append_string_str@@Base+0x9c>
   15208:	ldr	r3, [r4, #16]
   1520c:	adds	r3, r3, r7
   15210:	beq	15228 <flatcc_builder_append_string_str@@Base+0x80>
   15214:	mov	r0, r3
   15218:	mov	r2, r5
   1521c:	mov	r1, r6
   15220:	bl	11f44 <memcpy@plt>
   15224:	mov	r3, r0
   15228:	mov	r0, r3
   1522c:	add	sp, sp, #8
   15230:	ldrd	r4, [sp]
   15234:	ldrd	r6, [sp, #8]
   15238:	ldr	r8, [sp, #16]
   1523c:	add	sp, sp, #20
   15240:	pop	{pc}		; (ldr pc, [sp], #4)
   15244:	ldr	r2, [r4, #28]
   15248:	mov	r0, #1
   1524c:	add	r1, r4, #60	; 0x3c
   15250:	mov	r3, r0
   15254:	str	r0, [sp]
   15258:	ldr	r8, [r4, #48]	; 0x30
   1525c:	add	r2, r2, r0
   15260:	ldr	r0, [r4, #40]	; 0x28
   15264:	add	r2, r2, ip
   15268:	blx	r8
   1526c:	cmp	r0, #0
   15270:	bne	152a8 <flatcc_builder_append_string_str@@Base+0x100>
   15274:	ldr	r1, [r4, #28]
   15278:	ldr	r3, [r4, #60]	; 0x3c
   1527c:	ldr	r2, [r4, #64]	; 0x40
   15280:	add	r3, r3, r1
   15284:	sub	r2, r2, r1
   15288:	mvn	r1, #3
   1528c:	str	r3, [r4, #16]
   15290:	cmn	r2, #4
   15294:	mvnhi	r2, #3
   15298:	str	r2, [r4, #24]
   1529c:	ldr	r2, [r4, #32]
   152a0:	str	r1, [r2, #4]
   152a4:	b	1520c <flatcc_builder_append_string_str@@Base+0x64>
   152a8:	mov	r3, #0
   152ac:	b	15228 <flatcc_builder_append_string_str@@Base+0x80>
   152b0:	bl	13340 <flatcc_builder_default_alloc@@Base+0x1c4>
   152b4:	bl	13390 <flatcc_builder_default_alloc@@Base+0x214>

000152b8 <flatcc_builder_append_string_strn@@Base>:
   152b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   152bc:	mov	r4, r0
   152c0:	mov	r5, r2
   152c4:	strd	r6, [sp, #8]
   152c8:	mov	r6, r1
   152cc:	mov	r1, #0
   152d0:	mov	r0, r6
   152d4:	str	r8, [sp, #16]
   152d8:	str	lr, [sp, #20]
   152dc:	sub	sp, sp, #8
   152e0:	bl	11fbc <memchr@plt>
   152e4:	ldr	r2, [r4, #32]
   152e8:	cmp	r0, #0
   152ec:	subne	r5, r0, r6
   152f0:	ldrh	r3, [r2, #14]
   152f4:	cmp	r3, #6
   152f8:	bne	153d0 <flatcc_builder_append_string_strn@@Base+0x118>
   152fc:	ldr	r3, [r2, #20]
   15300:	adds	r3, r5, r3
   15304:	bcs	153cc <flatcc_builder_append_string_strn@@Base+0x114>
   15308:	ldr	r7, [r4, #20]
   1530c:	str	r3, [r2, #20]
   15310:	ldr	r3, [r4, #24]
   15314:	add	ip, r5, r7
   15318:	cmp	ip, r3
   1531c:	str	ip, [r4, #20]
   15320:	bcs	15360 <flatcc_builder_append_string_strn@@Base+0xa8>
   15324:	ldr	r3, [r4, #16]
   15328:	adds	r3, r3, r7
   1532c:	beq	15344 <flatcc_builder_append_string_strn@@Base+0x8c>
   15330:	mov	r0, r3
   15334:	mov	r2, r5
   15338:	mov	r1, r6
   1533c:	bl	11f44 <memcpy@plt>
   15340:	mov	r3, r0
   15344:	mov	r0, r3
   15348:	add	sp, sp, #8
   1534c:	ldrd	r4, [sp]
   15350:	ldrd	r6, [sp, #8]
   15354:	ldr	r8, [sp, #16]
   15358:	add	sp, sp, #20
   1535c:	pop	{pc}		; (ldr pc, [sp], #4)
   15360:	ldr	r2, [r4, #28]
   15364:	mov	r0, #1
   15368:	add	r1, r4, #60	; 0x3c
   1536c:	mov	r3, r0
   15370:	str	r0, [sp]
   15374:	ldr	r8, [r4, #48]	; 0x30
   15378:	add	r2, r2, r0
   1537c:	ldr	r0, [r4, #40]	; 0x28
   15380:	add	r2, r2, ip
   15384:	blx	r8
   15388:	cmp	r0, #0
   1538c:	bne	153c4 <flatcc_builder_append_string_strn@@Base+0x10c>
   15390:	ldr	r1, [r4, #28]
   15394:	ldr	r3, [r4, #60]	; 0x3c
   15398:	ldr	r2, [r4, #64]	; 0x40
   1539c:	add	r3, r3, r1
   153a0:	sub	r2, r2, r1
   153a4:	mvn	r1, #3
   153a8:	str	r3, [r4, #16]
   153ac:	cmn	r2, #4
   153b0:	mvnhi	r2, #3
   153b4:	str	r2, [r4, #24]
   153b8:	ldr	r2, [r4, #32]
   153bc:	str	r1, [r2, #4]
   153c0:	b	15328 <flatcc_builder_append_string_strn@@Base+0x70>
   153c4:	mov	r3, #0
   153c8:	b	15344 <flatcc_builder_append_string_strn@@Base+0x8c>
   153cc:	bl	13340 <flatcc_builder_default_alloc@@Base+0x1c4>
   153d0:	bl	13390 <flatcc_builder_default_alloc@@Base+0x214>

000153d4 <flatcc_builder_truncate_vector@@Base>:
   153d4:	mov	r3, r0
   153d8:	ldr	r0, [r0, #32]
   153dc:	str	r4, [sp, #-8]!
   153e0:	ldrh	r2, [r0, #14]
   153e4:	str	lr, [sp, #4]
   153e8:	cmp	r2, #4
   153ec:	bne	1543c <flatcc_builder_truncate_vector@@Base+0x68>
   153f0:	mov	lr, r1
   153f4:	ldr	r1, [r0, #20]
   153f8:	cmp	r1, lr
   153fc:	bcc	15458 <flatcc_builder_truncate_vector@@Base+0x84>
   15400:	ldr	r2, [r0, #16]
   15404:	sub	ip, r1, lr
   15408:	mov	r1, #0
   1540c:	str	ip, [r0, #20]
   15410:	ldr	r0, [r3, #16]
   15414:	ldr	ip, [r3, #20]
   15418:	mul	r2, r2, lr
   1541c:	sub	ip, ip, r2
   15420:	add	r0, r0, ip
   15424:	str	ip, [r3, #20]
   15428:	bl	11fb0 <memset@plt>
   1542c:	ldr	r4, [sp]
   15430:	add	sp, sp, #4
   15434:	mov	r0, #0
   15438:	pop	{pc}		; (ldr pc, [sp], #4)
   1543c:	movw	r1, #40488	; 0x9e28
   15440:	movt	r1, #1
   15444:	ldr	r3, [pc, #40]	; 15474 <flatcc_builder_truncate_vector@@Base+0xa0>
   15448:	movw	r0, #40852	; 0x9f94
   1544c:	movt	r0, #1
   15450:	movw	r2, #985	; 0x3d9
   15454:	bl	11fd4 <__assert_fail@plt>
   15458:	movw	r1, #40488	; 0x9e28
   1545c:	movt	r1, #1
   15460:	ldr	r3, [pc, #12]	; 15474 <flatcc_builder_truncate_vector@@Base+0xa0>
   15464:	movw	r0, #41012	; 0xa034
   15468:	movt	r0, #1
   1546c:	movw	r2, #986	; 0x3da
   15470:	bl	11fd4 <__assert_fail@plt>
   15474:	strdeq	r9, [r1], -ip

00015478 <flatcc_builder_truncate_offset_vector@@Base>:
   15478:	mov	r3, r0
   1547c:	ldr	r0, [r0, #32]
   15480:	str	r4, [sp, #-8]!
   15484:	ldrh	r2, [r0, #14]
   15488:	str	lr, [sp, #4]
   1548c:	cmp	r2, #5
   15490:	bne	154e0 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   15494:	mov	lr, r1
   15498:	ldr	r1, [r0, #20]
   1549c:	cmp	r1, lr
   154a0:	bcc	154fc <flatcc_builder_truncate_offset_vector@@Base+0x84>
   154a4:	ldr	r2, [r0, #16]
   154a8:	sub	ip, r1, lr
   154ac:	mov	r1, #0
   154b0:	str	ip, [r0, #20]
   154b4:	ldr	r0, [r3, #16]
   154b8:	ldr	ip, [r3, #20]
   154bc:	mul	r2, r2, lr
   154c0:	sub	ip, ip, r2
   154c4:	add	r0, r0, ip
   154c8:	str	ip, [r3, #20]
   154cc:	bl	11fb0 <memset@plt>
   154d0:	ldr	r4, [sp]
   154d4:	add	sp, sp, #4
   154d8:	mov	r0, #0
   154dc:	pop	{pc}		; (ldr pc, [sp], #4)
   154e0:	movw	r1, #40488	; 0x9e28
   154e4:	movt	r1, #1
   154e8:	ldr	r3, [pc, #40]	; 15518 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   154ec:	movw	r0, #40960	; 0xa000
   154f0:	movt	r0, #1
   154f4:	movw	r2, #994	; 0x3e2
   154f8:	bl	11fd4 <__assert_fail@plt>
   154fc:	movw	r1, #40488	; 0x9e28
   15500:	movt	r1, #1
   15504:	ldr	r3, [pc, #12]	; 15518 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   15508:	movw	r0, #41048	; 0xa058
   1550c:	movt	r0, #1
   15510:	movw	r2, #995	; 0x3e3
   15514:	bl	11fd4 <__assert_fail@plt>
   15518:	andeq	r9, r1, ip, lsl fp

0001551c <flatcc_builder_truncate_string@@Base>:
   1551c:	str	r4, [sp, #-8]!
   15520:	str	lr, [sp, #4]
   15524:	ldr	lr, [r0, #32]
   15528:	ldrh	r2, [lr, #14]
   1552c:	cmp	r2, #6
   15530:	bne	15580 <flatcc_builder_truncate_string@@Base+0x64>
   15534:	ldr	r2, [lr, #20]
   15538:	mov	ip, r1
   1553c:	cmp	r2, r1
   15540:	bcc	1559c <flatcc_builder_truncate_string@@Base+0x80>
   15544:	sub	r1, r2, r1
   15548:	mov	r3, r0
   1554c:	ldr	r0, [r0, #16]
   15550:	mov	r2, ip
   15554:	str	r1, [lr, #20]
   15558:	mov	r1, #0
   1555c:	ldr	lr, [r3, #20]
   15560:	sub	ip, lr, ip
   15564:	add	r0, r0, ip
   15568:	str	ip, [r3, #20]
   1556c:	bl	11fb0 <memset@plt>
   15570:	ldr	r4, [sp]
   15574:	add	sp, sp, #4
   15578:	mov	r0, #0
   1557c:	pop	{pc}		; (ldr pc, [sp], #4)
   15580:	movw	r1, #40488	; 0x9e28
   15584:	movt	r1, #1
   15588:	ldr	r3, [pc, #40]	; 155b8 <flatcc_builder_truncate_string@@Base+0x9c>
   1558c:	movw	r0, #40616	; 0x9ea8
   15590:	movt	r0, #1
   15594:	movw	r2, #1003	; 0x3eb
   15598:	bl	11fd4 <__assert_fail@plt>
   1559c:	movw	r1, #40488	; 0x9e28
   155a0:	movt	r1, #1
   155a4:	ldr	r3, [pc, #12]	; 155b8 <flatcc_builder_truncate_string@@Base+0x9c>
   155a8:	movw	r0, #41108	; 0xa094
   155ac:	movt	r0, #1
   155b0:	mov	r2, #1004	; 0x3ec
   155b4:	bl	11fd4 <__assert_fail@plt>
   155b8:	andeq	r9, r1, r4, asr #22

000155bc <flatcc_builder_start_vector@@Base>:
   155bc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   155c0:	mov	r4, r0
   155c4:	mov	r5, r3
   155c8:	ldr	r0, [r0, #156]	; 0x9c
   155cc:	cmp	r2, #4
   155d0:	ldr	r3, [r4, #160]	; 0xa0
   155d4:	strd	r6, [sp, #8]
   155d8:	movcs	r7, r2
   155dc:	movcc	r7, #4
   155e0:	mov	r6, r1
   155e4:	strd	r8, [sp, #16]
   155e8:	add	r2, r0, #1
   155ec:	str	lr, [sp, #24]
   155f0:	sub	sp, sp, #12
   155f4:	cmp	r2, r3
   155f8:	str	r2, [r4, #156]	; 0x9c
   155fc:	ble	15718 <flatcc_builder_start_vector@@Base+0x15c>
   15600:	ldr	r3, [r4, #176]	; 0xb0
   15604:	cmp	r3, #0
   15608:	cmpgt	r2, r3
   1560c:	movgt	r3, #1
   15610:	movle	r3, #0
   15614:	bgt	15728 <flatcc_builder_start_vector@@Base+0x16c>
   15618:	add	r0, r0, r0, lsl #3
   1561c:	ldr	r1, [r4, #88]	; 0x58
   15620:	lsl	r8, r0, #2
   15624:	add	r2, r8, #36	; 0x24
   15628:	cmp	r2, r1
   1562c:	bls	15650 <flatcc_builder_start_vector@@Base+0x94>
   15630:	mov	ip, #4
   15634:	add	r1, r4, #84	; 0x54
   15638:	ldr	r0, [r4, #40]	; 0x28
   1563c:	str	ip, [sp]
   15640:	ldr	r9, [r4, #48]	; 0x30
   15644:	blx	r9
   15648:	cmp	r0, #0
   1564c:	bne	15730 <flatcc_builder_start_vector@@Base+0x174>
   15650:	ldr	r3, [r4, #84]	; 0x54
   15654:	add	r3, r3, r8
   15658:	cmp	r3, #0
   1565c:	str	r3, [r4, #32]
   15660:	beq	15728 <flatcc_builder_start_vector@@Base+0x16c>
   15664:	ldr	r2, [r4, #88]	; 0x58
   15668:	movw	r0, #36409	; 0x8e39
   1566c:	movt	r0, #14563	; 0x38e3
   15670:	ldr	r1, [r4, #176]	; 0xb0
   15674:	umull	r0, r2, r0, r2
   15678:	lsr	r2, r2, #3
   1567c:	cmp	r1, #0
   15680:	cmpgt	r2, r1
   15684:	movgt	r2, r1
   15688:	str	r2, [r4, #160]	; 0xa0
   1568c:	ldr	r2, [r4, #20]
   15690:	mvn	r9, #3
   15694:	mov	ip, #0
   15698:	ldr	r0, [r4, #28]
   1569c:	ldrh	lr, [r4, #130]	; 0x82
   156a0:	ldr	r1, [r4, #64]	; 0x40
   156a4:	ldr	r8, [r4, #60]	; 0x3c
   156a8:	str	r2, [r3, #8]
   156ac:	add	r2, r2, r0
   156b0:	add	r2, r2, #7
   156b4:	strh	lr, [r3, #12]
   156b8:	bic	r2, r2, #7
   156bc:	strh	r7, [r4, #130]	; 0x82
   156c0:	mov	r7, #4
   156c4:	sub	r1, r1, r2
   156c8:	str	r0, [r3]
   156cc:	mov	r0, ip
   156d0:	cmp	r1, r9
   156d4:	add	lr, r8, r2
   156d8:	str	ip, [r4, #20]
   156dc:	movhi	r1, r9
   156e0:	str	r2, [r4, #28]
   156e4:	strh	r7, [r3, #14]
   156e8:	str	r6, [r3, #16]
   156ec:	str	ip, [r3, #20]
   156f0:	str	r5, [r3, #24]
   156f4:	str	lr, [r4, #16]
   156f8:	str	r1, [r4, #24]
   156fc:	str	r9, [r3, #4]
   15700:	add	sp, sp, #12
   15704:	ldrd	r4, [sp]
   15708:	ldrd	r6, [sp, #8]
   1570c:	ldrd	r8, [sp, #16]
   15710:	add	sp, sp, #24
   15714:	pop	{pc}		; (ldr pc, [sp], #4)
   15718:	ldr	r3, [r4, #32]
   1571c:	add	r3, r3, #36	; 0x24
   15720:	str	r3, [r4, #32]
   15724:	b	1568c <flatcc_builder_start_vector@@Base+0xd0>
   15728:	mvn	r0, #0
   1572c:	b	15700 <flatcc_builder_start_vector@@Base+0x144>
   15730:	bl	132a0 <flatcc_builder_default_alloc@@Base+0x124>

00015734 <flatcc_builder_start_offset_vector@@Base>:
   15734:	ldrd	r2, [r0, #156]	; 0x9c
   15738:	strd	r4, [sp, #-16]!
   1573c:	mov	r4, r0
   15740:	str	r6, [sp, #8]
   15744:	str	lr, [sp, #12]
   15748:	sub	sp, sp, #8
   1574c:	add	r1, r2, #1
   15750:	cmp	r1, r3
   15754:	str	r1, [r0, #156]	; 0x9c
   15758:	ble	15870 <flatcc_builder_start_offset_vector@@Base+0x13c>
   1575c:	ldr	r3, [r0, #176]	; 0xb0
   15760:	cmp	r3, #0
   15764:	cmpgt	r1, r3
   15768:	movgt	r3, #1
   1576c:	movle	r3, #0
   15770:	bgt	15880 <flatcc_builder_start_offset_vector@@Base+0x14c>
   15774:	add	r2, r2, r2, lsl #3
   15778:	ldr	r1, [r0, #88]	; 0x58
   1577c:	lsl	r5, r2, #2
   15780:	add	r2, r5, #36	; 0x24
   15784:	cmp	r2, r1
   15788:	bls	157ac <flatcc_builder_start_offset_vector@@Base+0x78>
   1578c:	mov	ip, #4
   15790:	add	r1, r0, #84	; 0x54
   15794:	ldr	r0, [r0, #40]	; 0x28
   15798:	str	ip, [sp]
   1579c:	ldr	r6, [r4, #48]	; 0x30
   157a0:	blx	r6
   157a4:	cmp	r0, #0
   157a8:	bne	15888 <flatcc_builder_start_offset_vector@@Base+0x154>
   157ac:	ldr	r3, [r4, #84]	; 0x54
   157b0:	add	r3, r3, r5
   157b4:	cmp	r3, #0
   157b8:	str	r3, [r4, #32]
   157bc:	beq	15880 <flatcc_builder_start_offset_vector@@Base+0x14c>
   157c0:	ldr	r2, [r4, #88]	; 0x58
   157c4:	movw	r0, #36409	; 0x8e39
   157c8:	movt	r0, #14563	; 0x38e3
   157cc:	ldr	r1, [r4, #176]	; 0xb0
   157d0:	umull	r0, r2, r0, r2
   157d4:	lsr	r2, r2, #3
   157d8:	cmp	r1, #0
   157dc:	cmpgt	r2, r1
   157e0:	movgt	r2, r1
   157e4:	str	r2, [r4, #160]	; 0xa0
   157e8:	ldr	r2, [r4, #20]
   157ec:	mvn	r5, #3
   157f0:	mov	lr, #0
   157f4:	ldr	r0, [r4, #28]
   157f8:	ldrh	r6, [r4, #130]	; 0x82
   157fc:	ldr	ip, [r4, #60]	; 0x3c
   15800:	ldr	r1, [r4, #64]	; 0x40
   15804:	str	r2, [r3, #8]
   15808:	add	r2, r2, r0
   1580c:	add	r2, r2, #7
   15810:	strh	r6, [r3, #12]
   15814:	mov	r6, #4
   15818:	bic	r2, r2, #7
   1581c:	add	ip, ip, r2
   15820:	strh	r6, [r4, #130]	; 0x82
   15824:	sub	r1, r1, r2
   15828:	str	r0, [r3]
   1582c:	mov	r0, lr
   15830:	cmp	r1, r5
   15834:	str	lr, [r4, #20]
   15838:	movhi	r1, r5
   1583c:	str	r2, [r4, #28]
   15840:	mov	r2, #5
   15844:	strh	r2, [r3, #14]
   15848:	str	r6, [r3, #16]
   1584c:	str	lr, [r3, #20]
   15850:	str	ip, [r4, #16]
   15854:	str	r1, [r4, #24]
   15858:	str	r5, [r3, #4]
   1585c:	add	sp, sp, #8
   15860:	ldrd	r4, [sp]
   15864:	ldr	r6, [sp, #8]
   15868:	add	sp, sp, #12
   1586c:	pop	{pc}		; (ldr pc, [sp], #4)
   15870:	ldr	r3, [r0, #32]
   15874:	add	r3, r3, #36	; 0x24
   15878:	str	r3, [r0, #32]
   1587c:	b	157e8 <flatcc_builder_start_offset_vector@@Base+0xb4>
   15880:	mvn	r0, #0
   15884:	b	1585c <flatcc_builder_start_offset_vector@@Base+0x128>
   15888:	bl	132a0 <flatcc_builder_default_alloc@@Base+0x124>

0001588c <flatcc_builder_create_offset_vector@@Base>:
   1588c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15890:	mov	r5, r2
   15894:	mov	r4, r0
   15898:	ldr	r3, [r0, #160]	; 0xa0
   1589c:	strd	r6, [sp, #8]
   158a0:	mov	r6, r1
   158a4:	ldr	r1, [r0, #156]	; 0x9c
   158a8:	strd	r8, [sp, #16]
   158ac:	str	lr, [sp, #24]
   158b0:	sub	sp, sp, #12
   158b4:	add	r2, r1, #1
   158b8:	cmp	r2, r3
   158bc:	str	r2, [r0, #156]	; 0x9c
   158c0:	ble	15a38 <flatcc_builder_create_offset_vector@@Base+0x1ac>
   158c4:	ldr	r3, [r0, #176]	; 0xb0
   158c8:	cmp	r2, r3
   158cc:	cmpgt	r3, #0
   158d0:	movgt	r3, #1
   158d4:	movle	r3, #0
   158d8:	bgt	15a18 <flatcc_builder_create_offset_vector@@Base+0x18c>
   158dc:	add	r1, r1, r1, lsl #3
   158e0:	ldr	r0, [r0, #88]	; 0x58
   158e4:	lsl	r7, r1, #2
   158e8:	add	r2, r7, #36	; 0x24
   158ec:	cmp	r2, r0
   158f0:	bls	15914 <flatcc_builder_create_offset_vector@@Base+0x88>
   158f4:	mov	ip, #4
   158f8:	add	r1, r4, #84	; 0x54
   158fc:	ldr	r0, [r4, #40]	; 0x28
   15900:	str	ip, [sp]
   15904:	ldr	r8, [r4, #48]	; 0x30
   15908:	blx	r8
   1590c:	cmp	r0, #0
   15910:	bne	15adc <flatcc_builder_create_offset_vector@@Base+0x250>
   15914:	ldr	r3, [r4, #84]	; 0x54
   15918:	add	r3, r3, r7
   1591c:	cmp	r3, #0
   15920:	str	r3, [r4, #32]
   15924:	beq	15a18 <flatcc_builder_create_offset_vector@@Base+0x18c>
   15928:	ldr	r2, [r4, #88]	; 0x58
   1592c:	movw	r0, #36409	; 0x8e39
   15930:	movt	r0, #14563	; 0x38e3
   15934:	ldr	r1, [r4, #176]	; 0xb0
   15938:	umull	r0, r2, r0, r2
   1593c:	lsr	r2, r2, #3
   15940:	cmp	r2, r1
   15944:	cmpgt	r1, #0
   15948:	movgt	r2, r1
   1594c:	str	r2, [r4, #160]	; 0xa0
   15950:	ldr	r2, [r4, #20]
   15954:	mvn	lr, #3
   15958:	mov	r0, #4
   1595c:	ldr	r8, [r4, #28]
   15960:	ldrh	r7, [r4, #130]	; 0x82
   15964:	ldr	r1, [r4, #64]	; 0x40
   15968:	ldr	r9, [r4, #60]	; 0x3c
   1596c:	str	r2, [r3, #8]
   15970:	add	r2, r2, r8
   15974:	add	r2, r2, #7
   15978:	strh	r7, [r3, #12]
   1597c:	mov	r7, #0
   15980:	bic	r2, r2, #7
   15984:	strh	r0, [r4, #130]	; 0x82
   15988:	sub	r1, r1, r2
   1598c:	str	r8, [r3]
   15990:	cmp	r1, lr
   15994:	add	r9, r9, r2
   15998:	str	r7, [r4, #20]
   1599c:	movls	ip, r1
   159a0:	movhi	ip, lr
   159a4:	str	r2, [r4, #28]
   159a8:	mov	r1, #5
   159ac:	strh	r1, [r3, #14]
   159b0:	mov	r1, r5
   159b4:	str	r0, [r3, #16]
   159b8:	mov	r0, r4
   159bc:	str	r7, [r3, #20]
   159c0:	str	r9, [r4, #16]
   159c4:	str	ip, [r4, #24]
   159c8:	str	lr, [r3, #4]
   159cc:	bl	14c88 <flatcc_builder_extend_offset_vector@@Base>
   159d0:	cmp	r0, r7
   159d4:	beq	15a18 <flatcc_builder_create_offset_vector@@Base+0x18c>
   159d8:	lsl	r2, r5, #2
   159dc:	mov	r1, r6
   159e0:	bl	11f44 <memcpy@plt>
   159e4:	ldr	r3, [r4, #32]
   159e8:	ldrh	r2, [r3, #14]
   159ec:	cmp	r2, #5
   159f0:	bne	15ac0 <flatcc_builder_create_offset_vector@@Base+0x234>
   159f4:	ldr	r2, [r3, #20]
   159f8:	cmn	r2, #-1073741823	; 0xc0000001
   159fc:	bhi	15a18 <flatcc_builder_create_offset_vector@@Base+0x18c>
   15a00:	mov	r3, r7
   15a04:	mov	r0, r4
   15a08:	ldr	r1, [r4, #16]
   15a0c:	bl	13504 <flatcc_builder_default_alloc@@Base+0x388>
   15a10:	subs	r5, r0, #0
   15a14:	bne	15a48 <flatcc_builder_create_offset_vector@@Base+0x1bc>
   15a18:	mov	r5, #0
   15a1c:	mov	r0, r5
   15a20:	add	sp, sp, #12
   15a24:	ldrd	r4, [sp]
   15a28:	ldrd	r6, [sp, #8]
   15a2c:	ldrd	r8, [sp, #16]
   15a30:	add	sp, sp, #24
   15a34:	pop	{pc}		; (ldr pc, [sp], #4)
   15a38:	ldr	r3, [r0, #32]
   15a3c:	add	r3, r3, #36	; 0x24
   15a40:	str	r3, [r0, #32]
   15a44:	b	15950 <flatcc_builder_create_offset_vector@@Base+0xc4>
   15a48:	mov	r1, r7
   15a4c:	ldr	r0, [r4, #16]
   15a50:	ldr	r2, [r4, #20]
   15a54:	bl	11fb0 <memset@plt>
   15a58:	ldr	r3, [r4, #32]
   15a5c:	ldr	r0, [r4, #60]	; 0x3c
   15a60:	ldr	r2, [r4, #64]	; 0x40
   15a64:	ldr	ip, [r3]
   15a68:	ldmib	r3, {r1, lr}
   15a6c:	add	r0, r0, ip
   15a70:	sub	r2, r2, ip
   15a74:	str	r0, [r4, #16]
   15a78:	cmp	r2, r1
   15a7c:	ldrh	r0, [r4, #128]	; 0x80
   15a80:	movcs	r2, r1
   15a84:	str	lr, [r4, #20]
   15a88:	str	ip, [r4, #28]
   15a8c:	ldrh	ip, [r4, #130]	; 0x82
   15a90:	str	r2, [r4, #24]
   15a94:	ldr	r2, [r4, #156]	; 0x9c
   15a98:	str	r1, [r3, #4]
   15a9c:	cmp	r0, ip
   15aa0:	sub	r0, r3, #36	; 0x24
   15aa4:	strhcc	ip, [r4, #128]	; 0x80
   15aa8:	ldrh	r1, [r3, #12]
   15aac:	sub	r3, r2, #1
   15ab0:	str	r0, [r4, #32]
   15ab4:	strh	r1, [r4, #130]	; 0x82
   15ab8:	str	r3, [r4, #156]	; 0x9c
   15abc:	b	15a1c <flatcc_builder_create_offset_vector@@Base+0x190>
   15ac0:	movw	r1, #40488	; 0x9e28
   15ac4:	movt	r1, #1
   15ac8:	ldr	r3, [pc, #16]	; 15ae0 <flatcc_builder_create_offset_vector@@Base+0x254>
   15acc:	movw	r0, #40960	; 0xa000
   15ad0:	movt	r0, #1
   15ad4:	movw	r2, #1480	; 0x5c8
   15ad8:	bl	11fd4 <__assert_fail@plt>
   15adc:	bl	132a0 <flatcc_builder_default_alloc@@Base+0x124>
   15ae0:	andeq	r9, r1, r4, ror #22

00015ae4 <flatcc_builder_start_string@@Base>:
   15ae4:	ldrd	r2, [r0, #156]	; 0x9c
   15ae8:	strd	r4, [sp, #-16]!
   15aec:	mov	r4, r0
   15af0:	str	r6, [sp, #8]
   15af4:	str	lr, [sp, #12]
   15af8:	sub	sp, sp, #8
   15afc:	add	r1, r2, #1
   15b00:	cmp	r1, r3
   15b04:	str	r1, [r0, #156]	; 0x9c
   15b08:	ble	15c20 <flatcc_builder_start_string@@Base+0x13c>
   15b0c:	ldr	r3, [r0, #176]	; 0xb0
   15b10:	cmp	r3, #0
   15b14:	cmpgt	r1, r3
   15b18:	movgt	r3, #1
   15b1c:	movle	r3, #0
   15b20:	bgt	15c30 <flatcc_builder_start_string@@Base+0x14c>
   15b24:	add	r2, r2, r2, lsl #3
   15b28:	ldr	r1, [r0, #88]	; 0x58
   15b2c:	lsl	r5, r2, #2
   15b30:	add	r2, r5, #36	; 0x24
   15b34:	cmp	r2, r1
   15b38:	bls	15b5c <flatcc_builder_start_string@@Base+0x78>
   15b3c:	mov	ip, #4
   15b40:	add	r1, r0, #84	; 0x54
   15b44:	ldr	r0, [r0, #40]	; 0x28
   15b48:	str	ip, [sp]
   15b4c:	ldr	r6, [r4, #48]	; 0x30
   15b50:	blx	r6
   15b54:	cmp	r0, #0
   15b58:	bne	15c38 <flatcc_builder_start_string@@Base+0x154>
   15b5c:	ldr	r3, [r4, #84]	; 0x54
   15b60:	add	r3, r3, r5
   15b64:	cmp	r3, #0
   15b68:	str	r3, [r4, #32]
   15b6c:	beq	15c30 <flatcc_builder_start_string@@Base+0x14c>
   15b70:	ldr	r2, [r4, #88]	; 0x58
   15b74:	movw	r0, #36409	; 0x8e39
   15b78:	movt	r0, #14563	; 0x38e3
   15b7c:	ldr	r1, [r4, #176]	; 0xb0
   15b80:	umull	r0, r2, r0, r2
   15b84:	lsr	r2, r2, #3
   15b88:	cmp	r1, #0
   15b8c:	cmpgt	r2, r1
   15b90:	movgt	r2, r1
   15b94:	str	r2, [r4, #160]	; 0xa0
   15b98:	ldr	r2, [r4, #20]
   15b9c:	mvn	r5, #3
   15ba0:	mov	lr, #0
   15ba4:	ldr	r0, [r4, #28]
   15ba8:	ldrh	r6, [r4, #130]	; 0x82
   15bac:	ldr	ip, [r4, #60]	; 0x3c
   15bb0:	ldr	r1, [r4, #64]	; 0x40
   15bb4:	str	r2, [r3, #8]
   15bb8:	add	r2, r2, r0
   15bbc:	add	r2, r2, #7
   15bc0:	strh	r6, [r3, #12]
   15bc4:	mov	r6, #1
   15bc8:	bic	r2, r2, #7
   15bcc:	add	ip, ip, r2
   15bd0:	strh	r6, [r4, #130]	; 0x82
   15bd4:	sub	r1, r1, r2
   15bd8:	str	r0, [r3]
   15bdc:	mov	r0, lr
   15be0:	cmp	r1, r5
   15be4:	str	lr, [r4, #20]
   15be8:	movhi	r1, r5
   15bec:	str	r2, [r4, #28]
   15bf0:	mov	r2, #6
   15bf4:	strh	r2, [r3, #14]
   15bf8:	str	r6, [r3, #16]
   15bfc:	str	lr, [r3, #20]
   15c00:	str	ip, [r4, #16]
   15c04:	str	r1, [r4, #24]
   15c08:	str	r5, [r3, #4]
   15c0c:	add	sp, sp, #8
   15c10:	ldrd	r4, [sp]
   15c14:	ldr	r6, [sp, #8]
   15c18:	add	sp, sp, #12
   15c1c:	pop	{pc}		; (ldr pc, [sp], #4)
   15c20:	ldr	r3, [r0, #32]
   15c24:	add	r3, r3, #36	; 0x24
   15c28:	str	r3, [r0, #32]
   15c2c:	b	15b98 <flatcc_builder_start_string@@Base+0xb4>
   15c30:	mvn	r0, #0
   15c34:	b	15c0c <flatcc_builder_start_string@@Base+0x128>
   15c38:	bl	132a0 <flatcc_builder_default_alloc@@Base+0x124>

00015c3c <flatcc_builder_reserve_table@@Base>:
   15c3c:	cmp	r1, #0
   15c40:	strd	r4, [sp, #-20]!	; 0xffffffec
   15c44:	strd	r6, [sp, #8]
   15c48:	str	lr, [sp, #16]
   15c4c:	sub	sp, sp, #12
   15c50:	blt	15d34 <flatcc_builder_reserve_table@@Base+0xf8>
   15c54:	ldr	r2, [r0, #32]
   15c58:	add	r1, r1, #2
   15c5c:	mov	r4, r0
   15c60:	lsl	r5, r1, #1
   15c64:	ldr	r1, [r0, #56]	; 0x38
   15c68:	ldrh	r6, [r2, #28]
   15c6c:	ldr	r3, [r2, #16]
   15c70:	add	r6, r3, r6, lsl #1
   15c74:	add	r2, r6, r5
   15c78:	cmp	r2, r1
   15c7c:	bhi	15ce4 <flatcc_builder_reserve_table@@Base+0xa8>
   15c80:	ldr	r3, [r4, #52]	; 0x34
   15c84:	adds	r3, r3, r6
   15c88:	mvneq	r0, #0
   15c8c:	streq	r3, [r4, #4]
   15c90:	beq	15cd0 <flatcc_builder_reserve_table@@Base+0x94>
   15c94:	ldr	r2, [r4, #32]
   15c98:	add	r3, r3, #4
   15c9c:	ldr	r1, [r4, #80]	; 0x50
   15ca0:	ldr	r6, [r2, #20]
   15ca4:	str	r3, [r4, #4]
   15ca8:	add	r2, r5, r6
   15cac:	sub	r2, r2, #3
   15cb0:	cmp	r2, r1
   15cb4:	bhi	15d0c <flatcc_builder_reserve_table@@Base+0xd0>
   15cb8:	ldr	r3, [r4, #76]	; 0x4c
   15cbc:	add	r3, r3, r6
   15cc0:	clz	r0, r3
   15cc4:	lsr	r0, r0, #5
   15cc8:	str	r3, [r4]
   15ccc:	rsb	r0, r0, #0
   15cd0:	add	sp, sp, #12
   15cd4:	ldrd	r4, [sp]
   15cd8:	ldrd	r6, [sp, #8]
   15cdc:	add	sp, sp, #16
   15ce0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ce4:	mov	ip, #0
   15ce8:	add	r1, r0, #52	; 0x34
   15cec:	ldr	r0, [r0, #40]	; 0x28
   15cf0:	mov	r3, #1
   15cf4:	str	ip, [sp]
   15cf8:	ldr	r7, [r4, #48]	; 0x30
   15cfc:	blx	r7
   15d00:	cmp	r0, #0
   15d04:	beq	15c80 <flatcc_builder_reserve_table@@Base+0x44>
   15d08:	bl	132a0 <flatcc_builder_default_alloc@@Base+0x124>
   15d0c:	mov	ip, #3
   15d10:	mov	r3, #0
   15d14:	ldr	r0, [r4, #40]	; 0x28
   15d18:	add	r1, r4, #76	; 0x4c
   15d1c:	str	ip, [sp]
   15d20:	ldr	r5, [r4, #48]	; 0x30
   15d24:	blx	r5
   15d28:	cmp	r0, #0
   15d2c:	beq	15cb8 <flatcc_builder_reserve_table@@Base+0x7c>
   15d30:	b	15d08 <flatcc_builder_reserve_table@@Base+0xcc>
   15d34:	movw	r1, #40488	; 0x9e28
   15d38:	movt	r1, #1
   15d3c:	ldr	r3, [pc, #12]	; 15d50 <flatcc_builder_reserve_table@@Base+0x114>
   15d40:	movw	r0, #41144	; 0xa0b8
   15d44:	movt	r0, #1
   15d48:	movw	r2, #1065	; 0x429
   15d4c:	bl	11fd4 <__assert_fail@plt>
   15d50:	andeq	r9, r1, r8, lsl #23

00015d54 <flatcc_builder_start_table@@Base>:
   15d54:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15d58:	mov	r5, r1
   15d5c:	mov	r1, #4
   15d60:	strd	r6, [sp, #8]
   15d64:	mov	r4, r0
   15d68:	strd	r8, [sp, #16]
   15d6c:	str	sl, [sp, #24]
   15d70:	str	lr, [sp, #28]
   15d74:	sub	sp, sp, #8
   15d78:	bl	133e0 <flatcc_builder_default_alloc@@Base+0x264>
   15d7c:	subs	r7, r0, #0
   15d80:	bne	15ec8 <flatcc_builder_start_table@@Base+0x174>
   15d84:	ldm	r4, {r0, r2}
   15d88:	add	r5, r5, #2
   15d8c:	movw	ip, #15186	; 0x3b52
   15d90:	movt	ip, #12137	; 0x2f69
   15d94:	lsl	r5, r5, #1
   15d98:	mov	r8, #3
   15d9c:	ldrh	lr, [r4, #8]
   15da0:	ldr	r1, [r4, #52]	; 0x34
   15da4:	ldr	sl, [r4, #76]	; 0x4c
   15da8:	ldr	r3, [r4, #32]
   15dac:	sub	r2, r2, r1
   15db0:	ldr	r9, [r4, #56]	; 0x38
   15db4:	add	r6, r2, lr, lsl #1
   15db8:	sub	r0, r0, sl
   15dbc:	ldr	sl, [r4, #12]
   15dc0:	str	r2, [r3, #16]
   15dc4:	add	r2, r6, r5
   15dc8:	str	r0, [r3, #20]
   15dcc:	cmp	r2, r9
   15dd0:	str	sl, [r3, #24]
   15dd4:	strh	lr, [r3, #28]
   15dd8:	strh	r7, [r4, #8]
   15ddc:	str	ip, [r4, #12]
   15de0:	strh	r8, [r3, #14]
   15de4:	bls	15e0c <flatcc_builder_start_table@@Base+0xb8>
   15de8:	mov	r3, #1
   15dec:	add	r1, r4, #52	; 0x34
   15df0:	str	r7, [sp]
   15df4:	ldr	r0, [r4, #40]	; 0x28
   15df8:	ldr	r8, [r4, #48]	; 0x30
   15dfc:	blx	r8
   15e00:	cmp	r0, #0
   15e04:	bne	15ec4 <flatcc_builder_start_table@@Base+0x170>
   15e08:	ldr	r1, [r4, #52]	; 0x34
   15e0c:	adds	r6, r6, r1
   15e10:	streq	r6, [r4, #4]
   15e14:	beq	15ec8 <flatcc_builder_start_table@@Base+0x174>
   15e18:	ldr	r1, [r4, #32]
   15e1c:	sub	r2, r5, #3
   15e20:	add	r6, r6, #4
   15e24:	ldr	r3, [r4, #80]	; 0x50
   15e28:	ldr	r5, [r1, #20]
   15e2c:	str	r6, [r4, #4]
   15e30:	add	r2, r2, r5
   15e34:	cmp	r2, r3
   15e38:	bhi	15ea0 <flatcc_builder_start_table@@Base+0x14c>
   15e3c:	ldr	r3, [r4, #76]	; 0x4c
   15e40:	add	r3, r3, r5
   15e44:	cmp	r3, #0
   15e48:	str	r3, [r4]
   15e4c:	beq	15ec8 <flatcc_builder_start_table@@Base+0x174>
   15e50:	ldr	r0, [r4, #28]
   15e54:	movw	r2, #65532	; 0xfffc
   15e58:	ldr	ip, [r4, #32]
   15e5c:	ldr	r3, [r4, #64]	; 0x40
   15e60:	ldr	r1, [r4, #60]	; 0x3c
   15e64:	sub	r3, r3, r0
   15e68:	cmp	r3, r2
   15e6c:	add	r1, r1, r0
   15e70:	movcs	r3, r2
   15e74:	str	r1, [r4, #16]
   15e78:	str	r3, [r4, #24]
   15e7c:	str	r2, [ip, #4]
   15e80:	mov	r0, r7
   15e84:	add	sp, sp, #8
   15e88:	ldrd	r4, [sp]
   15e8c:	ldrd	r6, [sp, #8]
   15e90:	ldrd	r8, [sp, #16]
   15e94:	ldr	sl, [sp, #24]
   15e98:	add	sp, sp, #28
   15e9c:	pop	{pc}		; (ldr pc, [sp], #4)
   15ea0:	mov	ip, #3
   15ea4:	mov	r3, #0
   15ea8:	ldr	r0, [r4, #40]	; 0x28
   15eac:	add	r1, r4, #76	; 0x4c
   15eb0:	str	ip, [sp]
   15eb4:	ldr	r6, [r4, #48]	; 0x30
   15eb8:	blx	r6
   15ebc:	cmp	r0, #0
   15ec0:	beq	15e3c <flatcc_builder_start_table@@Base+0xe8>
   15ec4:	bl	132a0 <flatcc_builder_default_alloc@@Base+0x124>
   15ec8:	mvn	r7, #0
   15ecc:	b	15e80 <flatcc_builder_start_table@@Base+0x12c>

00015ed0 <flatcc_builder_create_vtable@@Base>:
   15ed0:	strd	r4, [sp, #-16]!
   15ed4:	mov	r5, r0
   15ed8:	mov	r3, #0
   15edc:	ldr	ip, [r5, #152]	; 0x98
   15ee0:	subs	r0, r2, #0
   15ee4:	str	r6, [sp, #8]
   15ee8:	str	lr, [sp, #12]
   15eec:	sub	sp, sp, #80	; 0x50
   15ef0:	str	r3, [sp, #8]
   15ef4:	str	r3, [sp, #12]
   15ef8:	beq	15f74 <flatcc_builder_create_vtable@@Base+0xa4>
   15efc:	mov	r2, #1
   15f00:	cmp	ip, r3
   15f04:	str	r0, [sp, #8]
   15f08:	str	r2, [sp, #12]
   15f0c:	str	r1, [sp, #16]
   15f10:	str	r0, [sp, #20]
   15f14:	beq	15fa4 <flatcc_builder_create_vtable@@Base+0xd4>
   15f18:	ldr	r3, [r5, #136]	; 0x88
   15f1c:	sub	r4, r3, r0
   15f20:	cmp	r3, r4
   15f24:	ble	15f88 <flatcc_builder_create_vtable@@Base+0xb8>
   15f28:	mov	r3, r4
   15f2c:	mov	r2, #1
   15f30:	str	r0, [sp]
   15f34:	add	r1, sp, #16
   15f38:	ldr	r0, [r5, #36]	; 0x24
   15f3c:	ldr	r6, [r5, #44]	; 0x2c
   15f40:	blx	r6
   15f44:	cmp	r0, #0
   15f48:	bne	15fec <flatcc_builder_create_vtable@@Base+0x11c>
   15f4c:	cmp	r4, #0
   15f50:	str	r4, [r5, #136]	; 0x88
   15f54:	beq	15f5c <flatcc_builder_create_vtable@@Base+0x8c>
   15f58:	add	r4, r4, #1
   15f5c:	mov	r0, r4
   15f60:	add	sp, sp, #80	; 0x50
   15f64:	ldrd	r4, [sp]
   15f68:	ldr	r6, [sp, #8]
   15f6c:	add	sp, sp, #12
   15f70:	pop	{pc}		; (ldr pc, [sp], #4)
   15f74:	cmp	ip, #0
   15f78:	bne	15f88 <flatcc_builder_create_vtable@@Base+0xb8>
   15f7c:	ldr	r2, [r5, #180]	; 0xb4
   15f80:	cmp	r2, #0
   15f84:	beq	15fe4 <flatcc_builder_create_vtable@@Base+0x114>
   15f88:	movw	r1, #40488	; 0x9e28
   15f8c:	movt	r1, #1
   15f90:	ldr	r3, [pc, #88]	; 15ff0 <flatcc_builder_create_vtable@@Base+0x120>
   15f94:	movw	r0, #40680	; 0x9ee8
   15f98:	movt	r0, #1
   15f9c:	movw	r2, #647	; 0x287
   15fa0:	bl	11fd4 <__assert_fail@plt>
   15fa4:	ldr	r3, [r5, #180]	; 0xb4
   15fa8:	cmp	r3, #0
   15fac:	bne	15f18 <flatcc_builder_create_vtable@@Base+0x48>
   15fb0:	ldr	r4, [r5, #140]	; 0x8c
   15fb4:	mov	ip, r0
   15fb8:	add	r0, r4, r0
   15fbc:	str	r0, [r5, #140]	; 0x8c
   15fc0:	mov	r3, r4
   15fc4:	add	r1, sp, #16
   15fc8:	str	ip, [sp]
   15fcc:	ldr	r0, [r5, #36]	; 0x24
   15fd0:	ldr	r5, [r5, #44]	; 0x2c
   15fd4:	blx	r5
   15fd8:	cmp	r0, #0
   15fdc:	beq	15f58 <flatcc_builder_create_vtable@@Base+0x88>
   15fe0:	bl	132c8 <flatcc_builder_default_alloc@@Base+0x14c>
   15fe4:	ldr	r4, [r5, #140]	; 0x8c
   15fe8:	b	15fc0 <flatcc_builder_create_vtable@@Base+0xf0>
   15fec:	bl	13318 <flatcc_builder_default_alloc@@Base+0x19c>
   15ff0:	andeq	r9, r1, r4, lsl #14

00015ff4 <flatcc_builder_create_cached_vtable@@Base>:
   15ff4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15ff8:	strd	r6, [sp, #8]
   15ffc:	mov	r6, r0
   16000:	strd	r8, [sp, #16]
   16004:	mov	r9, r2
   16008:	mov	r8, r3
   1600c:	strd	sl, [sp, #24]
   16010:	str	lr, [sp, #32]
   16014:	sub	sp, sp, #28
   16018:	str	r1, [sp, #8]
   1601c:	ldr	r1, [r0, #116]	; 0x74
   16020:	cmp	r1, #0
   16024:	rsbne	r1, r1, #32
   16028:	beq	161b0 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   1602c:	ldr	sl, [r6, #92]	; 0x5c
   16030:	lsr	r8, r8, r1
   16034:	adds	fp, sl, r8, lsl #2
   16038:	str	fp, [sp, #12]
   1603c:	beq	1624c <flatcc_builder_create_cached_vtable@@Base+0x258>
   16040:	ldr	r5, [sl, r8, lsl #2]
   16044:	cmp	r5, #0
   16048:	beq	16280 <flatcc_builder_create_cached_vtable@@Base+0x28c>
   1604c:	mov	r3, #0
   16050:	str	r8, [sp, #16]
   16054:	mov	r8, fp
   16058:	mov	fp, r6
   1605c:	ldr	r7, [r6, #68]	; 0x44
   16060:	str	r3, [sp, #20]
   16064:	ldr	r3, [r6, #100]	; 0x64
   16068:	mov	r6, r3
   1606c:	add	r4, r6, r5
   16070:	ldr	r1, [r4, #8]
   16074:	ldrh	r2, [r7, r1]
   16078:	add	r1, r7, r1
   1607c:	cmp	r2, r9
   16080:	bne	1615c <flatcc_builder_create_cached_vtable@@Base+0x168>
   16084:	mov	r2, r9
   16088:	ldr	r0, [sp, #8]
   1608c:	bl	11f50 <memcmp@plt>
   16090:	cmp	r0, #0
   16094:	bne	1615c <flatcc_builder_create_cached_vtable@@Base+0x168>
   16098:	ldr	r1, [r4, #4]
   1609c:	ldr	r2, [fp, #152]	; 0x98
   160a0:	cmp	r1, r2
   160a4:	beq	16168 <flatcc_builder_create_cached_vtable@@Base+0x174>
   160a8:	ldr	r5, [r4, #12]
   160ac:	add	r8, r4, #12
   160b0:	str	r4, [sp, #20]
   160b4:	cmp	r5, #0
   160b8:	bne	1606c <flatcc_builder_create_cached_vtable@@Base+0x78>
   160bc:	ldr	r8, [sp, #16]
   160c0:	mov	r6, fp
   160c4:	ldr	r3, [r6, #104]	; 0x68
   160c8:	ldr	r4, [r6, #124]	; 0x7c
   160cc:	add	r2, r4, #16
   160d0:	cmp	r2, r3
   160d4:	bls	160fc <flatcc_builder_create_cached_vtable@@Base+0x108>
   160d8:	mov	ip, #6
   160dc:	mov	r3, #0
   160e0:	ldr	r0, [r6, #40]	; 0x28
   160e4:	add	r1, r6, #100	; 0x64
   160e8:	str	ip, [sp]
   160ec:	ldr	r5, [r6, #48]	; 0x30
   160f0:	blx	r5
   160f4:	cmp	r0, #0
   160f8:	bne	1627c <flatcc_builder_create_cached_vtable@@Base+0x288>
   160fc:	ldr	r5, [r6, #100]	; 0x64
   16100:	adds	r7, r5, r4
   16104:	beq	1624c <flatcc_builder_create_cached_vtable@@Base+0x258>
   16108:	ldr	r3, [r6, #124]	; 0x7c
   1610c:	mov	r2, r9
   16110:	ldr	r0, [r6, #152]	; 0x98
   16114:	ldr	r1, [sp, #8]
   16118:	add	ip, r3, #16
   1611c:	str	ip, [r6, #124]	; 0x7c
   16120:	str	r0, [r7, #4]
   16124:	mov	r0, r6
   16128:	ldr	ip, [sl, r8, lsl #2]
   1612c:	str	ip, [r7, #12]
   16130:	str	r3, [sl, r8, lsl #2]
   16134:	bl	15ed0 <flatcc_builder_create_vtable@@Base>
   16138:	cmp	r0, #0
   1613c:	str	r0, [r5, r4]
   16140:	beq	1624c <flatcc_builder_create_cached_vtable@@Base+0x258>
   16144:	ldr	r3, [sp, #20]
   16148:	cmp	r3, #0
   1614c:	beq	16290 <flatcc_builder_create_cached_vtable@@Base+0x29c>
   16150:	ldr	r3, [r3, #8]
   16154:	str	r3, [r7, #8]
   16158:	b	16194 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   1615c:	add	r8, r4, #12
   16160:	ldr	r5, [r4, #12]
   16164:	b	160b4 <flatcc_builder_create_cached_vtable@@Base+0xc0>
   16168:	ldr	r3, [sp, #12]
   1616c:	mov	fp, r8
   16170:	ldr	r8, [sp, #16]
   16174:	cmp	r3, fp
   16178:	beq	16190 <flatcc_builder_create_cached_vtable@@Base+0x19c>
   1617c:	ldr	r3, [r4, #12]
   16180:	str	r3, [fp]
   16184:	ldr	r3, [sl, r8, lsl #2]
   16188:	str	r3, [r4, #12]
   1618c:	str	r5, [sl, r8, lsl #2]
   16190:	ldr	r0, [r4]
   16194:	add	sp, sp, #28
   16198:	ldrd	r4, [sp]
   1619c:	ldrd	r6, [sp, #8]
   161a0:	ldrd	r8, [sp, #16]
   161a4:	ldrd	sl, [sp, #24]
   161a8:	add	sp, sp, #32
   161ac:	pop	{pc}		; (ldr pc, [sp], #4)
   161b0:	ldr	r4, [r0, #124]	; 0x7c
   161b4:	add	r5, r0, #92	; 0x5c
   161b8:	cmp	r4, #0
   161bc:	bne	16340 <flatcc_builder_create_cached_vtable@@Base+0x34c>
   161c0:	ldr	r3, [r0, #104]	; 0x68
   161c4:	cmp	r3, #15
   161c8:	bls	16254 <flatcc_builder_create_cached_vtable@@Base+0x260>
   161cc:	ldr	r3, [r6, #100]	; 0x64
   161d0:	cmp	r3, #0
   161d4:	beq	1624c <flatcc_builder_create_cached_vtable@@Base+0x258>
   161d8:	mov	ip, #16
   161dc:	mov	r2, #5
   161e0:	ldr	r0, [r6, #40]	; 0x28
   161e4:	mov	r1, r5
   161e8:	mov	r3, #1
   161ec:	str	r2, [sp]
   161f0:	mov	r2, #256	; 0x100
   161f4:	str	ip, [r6, #124]	; 0x7c
   161f8:	ldr	r5, [r6, #48]	; 0x30
   161fc:	blx	r5
   16200:	cmp	r0, #0
   16204:	bne	1624c <flatcc_builder_create_cached_vtable@@Base+0x258>
   16208:	mov	r3, #256	; 0x100
   1620c:	ldr	r1, [r6, #96]	; 0x60
   16210:	b	16218 <flatcc_builder_create_cached_vtable@@Base+0x224>
   16214:	mov	r3, r2
   16218:	lsl	r2, r3, #1
   1621c:	cmp	r2, r1
   16220:	bls	16214 <flatcc_builder_create_cached_vtable@@Base+0x220>
   16224:	lsr	r3, r3, #2
   16228:	cmp	r3, #1
   1622c:	bls	16288 <flatcc_builder_create_cached_vtable@@Base+0x294>
   16230:	mov	r2, #1
   16234:	add	r4, r4, #1
   16238:	cmp	r3, r2, lsl r4
   1623c:	bhi	16234 <flatcc_builder_create_cached_vtable@@Base+0x240>
   16240:	rsb	r1, r4, #32
   16244:	str	r4, [r6, #116]	; 0x74
   16248:	b	1602c <flatcc_builder_create_cached_vtable@@Base+0x38>
   1624c:	mov	r0, #0
   16250:	b	16194 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   16254:	mov	ip, #6
   16258:	add	r1, r0, #100	; 0x64
   1625c:	ldr	r0, [r0, #40]	; 0x28
   16260:	mov	r3, r4
   16264:	mov	r2, #16
   16268:	str	ip, [sp]
   1626c:	ldr	r7, [r6, #48]	; 0x30
   16270:	blx	r7
   16274:	cmp	r0, #0
   16278:	beq	161cc <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   1627c:	bl	132a0 <flatcc_builder_default_alloc@@Base+0x124>
   16280:	str	r5, [sp, #20]
   16284:	b	160c4 <flatcc_builder_create_cached_vtable@@Base+0xd0>
   16288:	mov	r1, #32
   1628c:	b	16244 <flatcc_builder_create_cached_vtable@@Base+0x250>
   16290:	ldr	r8, [r6, #120]	; 0x78
   16294:	ldr	r3, [r6, #172]	; 0xac
   16298:	add	r2, r9, r8
   1629c:	cmp	r3, #0
   162a0:	beq	162e0 <flatcc_builder_create_cached_vtable@@Base+0x2ec>
   162a4:	cmp	r3, r2
   162a8:	bcs	162e0 <flatcc_builder_create_cached_vtable@@Base+0x2ec>
   162ac:	ldr	r3, [r6, #116]	; 0x74
   162b0:	cmp	r3, #0
   162b4:	beq	16194 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   162b8:	ldr	r7, [sp, #20]
   162bc:	ldr	r0, [r6, #92]	; 0x5c
   162c0:	ldr	r2, [r6, #96]	; 0x60
   162c4:	mov	r1, r7
   162c8:	bl	11fb0 <memset@plt>
   162cc:	mov	r3, #16
   162d0:	mov	r2, r7
   162d4:	ldr	r0, [r5, r4]
   162d8:	strd	r2, [r6, #120]	; 0x78
   162dc:	b	16194 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   162e0:	ldr	r3, [r6, #72]	; 0x48
   162e4:	cmp	r3, r2
   162e8:	bcs	16310 <flatcc_builder_create_cached_vtable@@Base+0x31c>
   162ec:	mov	ip, #2
   162f0:	mov	r3, #0
   162f4:	ldr	r0, [r6, #40]	; 0x28
   162f8:	add	r1, r6, #68	; 0x44
   162fc:	str	ip, [sp]
   16300:	ldr	sl, [r6, #48]	; 0x30
   16304:	blx	sl
   16308:	cmp	r0, #0
   1630c:	bne	1627c <flatcc_builder_create_cached_vtable@@Base+0x288>
   16310:	ldr	r3, [r6, #68]	; 0x44
   16314:	adds	r0, r3, r8
   16318:	beq	1635c <flatcc_builder_create_cached_vtable@@Base+0x368>
   1631c:	ldr	r3, [r6, #120]	; 0x78
   16320:	mov	r2, r9
   16324:	ldr	r1, [sp, #8]
   16328:	add	r9, r3, r9
   1632c:	str	r3, [r7, #8]
   16330:	str	r9, [r6, #120]	; 0x78
   16334:	bl	11f44 <memcpy@plt>
   16338:	ldr	r0, [r5, r4]
   1633c:	b	16194 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   16340:	movw	r1, #40488	; 0x9e28
   16344:	movt	r1, #1
   16348:	ldr	r3, [pc, #20]	; 16364 <flatcc_builder_create_cached_vtable@@Base+0x370>
   1634c:	movw	r0, #41156	; 0xa0c4
   16350:	movt	r0, #1
   16354:	movw	r2, #342	; 0x156
   16358:	bl	11fd4 <__assert_fail@plt>
   1635c:	mvn	r0, #0
   16360:	b	16194 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   16364:	andeq	r9, r1, r8, lsr #23

00016368 <flatcc_builder_create_table@@Base>:
   16368:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1636c:	mov	r5, r0
   16370:	strd	r6, [sp, #8]
   16374:	str	r8, [sp, #16]
   16378:	str	lr, [sp, #20]
   1637c:	sub	sp, sp, #88	; 0x58
   16380:	ldr	r6, [sp, #116]	; 0x74
   16384:	ldr	r0, [sp, #120]	; 0x78
   16388:	cmp	r6, #0
   1638c:	blt	164f4 <flatcc_builder_create_table@@Base+0x18c>
   16390:	ands	r7, r0, #1
   16394:	beq	164d8 <flatcc_builder_create_table@@Base+0x170>
   16398:	ldrh	ip, [r5, #128]	; 0x80
   1639c:	cmp	r3, #4
   163a0:	sub	r0, r0, #1
   163a4:	movcc	r3, #4
   163a8:	cmp	ip, r3
   163ac:	ldr	ip, [r5, #136]	; 0x88
   163b0:	strhcc	r3, [r5, #128]	; 0x80
   163b4:	sub	r3, r3, #1
   163b8:	cmp	r6, #0
   163bc:	sub	r4, ip, r2
   163c0:	mov	r8, r4
   163c4:	sub	r4, r4, #4
   163c8:	and	r8, r8, r3
   163cc:	sub	r0, r4, r0
   163d0:	sub	r0, r0, r8
   163d4:	str	r0, [sp, #12]
   163d8:	beq	1640c <flatcc_builder_create_table@@Base+0xa4>
   163dc:	ldr	ip, [sp, #112]	; 0x70
   163e0:	sub	r4, r8, r4
   163e4:	sub	r4, r4, #4
   163e8:	add	r6, ip, r6, lsl #1
   163ec:	ldrh	r3, [ip], #2
   163f0:	ldr	r0, [r1, r3]
   163f4:	sub	lr, r4, r3
   163f8:	cmp	r6, ip
   163fc:	add	r0, r0, lr
   16400:	str	r0, [r1, r3]
   16404:	bne	163ec <flatcc_builder_create_table@@Base+0x84>
   16408:	ldr	ip, [r5, #136]	; 0x88
   1640c:	mov	r0, #4
   16410:	add	r3, sp, #12
   16414:	mov	lr, #1
   16418:	cmp	r2, #0
   1641c:	moveq	r2, #2
   16420:	str	r0, [sp, #16]
   16424:	str	lr, [sp, #20]
   16428:	str	r3, [sp, #24]
   1642c:	str	r0, [sp, #28]
   16430:	beq	16454 <flatcc_builder_create_table@@Base+0xec>
   16434:	mov	r3, #2
   16438:	add	r0, r2, r0
   1643c:	mov	r7, r3
   16440:	str	r0, [sp, #16]
   16444:	str	r2, [sp, #36]	; 0x24
   16448:	mov	r2, #3
   1644c:	str	r3, [sp, #20]
   16450:	str	r1, [sp, #32]
   16454:	cmp	r8, #0
   16458:	bne	164ac <flatcc_builder_create_table@@Base+0x144>
   1645c:	sub	r4, ip, r0
   16460:	cmp	r4, ip
   16464:	bge	16514 <flatcc_builder_create_table@@Base+0x1ac>
   16468:	mov	r2, r7
   1646c:	mov	r3, r4
   16470:	str	r0, [sp]
   16474:	add	r1, sp, #24
   16478:	ldr	r0, [r5, #36]	; 0x24
   1647c:	ldr	r6, [r5, #44]	; 0x2c
   16480:	blx	r6
   16484:	cmp	r0, #0
   16488:	bne	16510 <flatcc_builder_create_table@@Base+0x1a8>
   1648c:	mov	r0, r4
   16490:	str	r4, [r5, #136]	; 0x88
   16494:	add	sp, sp, #88	; 0x58
   16498:	ldrd	r4, [sp]
   1649c:	ldrd	r6, [sp, #8]
   164a0:	ldr	r8, [sp, #16]
   164a4:	add	sp, sp, #20
   164a8:	pop	{pc}		; (ldr pc, [sp], #4)
   164ac:	ldr	r1, [pc, #124]	; 16530 <flatcc_builder_create_table@@Base+0x1c8>
   164b0:	add	r7, r7, #1
   164b4:	add	r3, sp, #88	; 0x58
   164b8:	add	r3, r3, r7, lsl #3
   164bc:	add	r0, r0, r8
   164c0:	mov	r7, r2
   164c4:	str	r0, [sp, #16]
   164c8:	str	r2, [sp, #20]
   164cc:	str	r1, [r3, #-72]	; 0xffffffb8
   164d0:	str	r8, [r3, #-68]	; 0xffffffbc
   164d4:	b	1645c <flatcc_builder_create_table@@Base+0xf4>
   164d8:	movw	r1, #40488	; 0x9e28
   164dc:	movt	r1, #1
   164e0:	ldr	r3, [pc, #76]	; 16534 <flatcc_builder_create_table@@Base+0x1cc>
   164e4:	movw	r0, #41192	; 0xa0e8
   164e8:	movt	r0, #1
   164ec:	movw	r2, #1243	; 0x4db
   164f0:	bl	11fd4 <__assert_fail@plt>
   164f4:	movw	r1, #40488	; 0x9e28
   164f8:	movt	r1, #1
   164fc:	ldr	r3, [pc, #48]	; 16534 <flatcc_builder_create_table@@Base+0x1cc>
   16500:	movw	r0, #41172	; 0xa0d4
   16504:	movt	r0, #1
   16508:	movw	r2, #1237	; 0x4d5
   1650c:	bl	11fd4 <__assert_fail@plt>
   16510:	bl	13318 <flatcc_builder_default_alloc@@Base+0x19c>
   16514:	movw	r1, #40488	; 0x9e28
   16518:	movt	r1, #1
   1651c:	ldr	r3, [pc, #20]	; 16538 <flatcc_builder_create_table@@Base+0x1d0>
   16520:	movw	r0, #40680	; 0x9ee8
   16524:	movt	r0, #1
   16528:	movw	r2, #647	; 0x287
   1652c:	bl	11fd4 <__assert_fail@plt>
   16530:	andeq	r9, r1, r0, lsl #15
   16534:			; <UNDEFINED> instruction: 0x00019bb4
   16538:	andeq	r9, r1, r4, lsl #14

0001653c <flatcc_builder_check_required_field@@Base>:
   1653c:	ldr	r3, [r0, #32]
   16540:	ldrh	r3, [r3, #14]
   16544:	cmp	r3, #3
   16548:	bne	16578 <flatcc_builder_check_required_field@@Base+0x3c>
   1654c:	ldrh	r3, [r0, #8]
   16550:	cmp	r3, r1
   16554:	bls	16570 <flatcc_builder_check_required_field@@Base+0x34>
   16558:	ldr	r3, [r0, #4]
   1655c:	lsl	r1, r1, #1
   16560:	ldrh	r0, [r3, r1]
   16564:	adds	r0, r0, #0
   16568:	movne	r0, #1
   1656c:	bx	lr
   16570:	mov	r0, #0
   16574:	bx	lr
   16578:	movw	r1, #40488	; 0x9e28
   1657c:	movt	r1, #1
   16580:	ldr	r3, [pc, #20]	; 1659c <flatcc_builder_check_required_field@@Base+0x60>
   16584:	movw	r0, #41204	; 0xa0f4
   16588:	movt	r0, #1
   1658c:	str	r4, [sp, #-8]!
   16590:	movw	r2, #1272	; 0x4f8
   16594:	str	lr, [sp, #4]
   16598:	bl	11fd4 <__assert_fail@plt>
   1659c:	ldrdeq	r9, [r1], -r0

000165a0 <flatcc_builder_check_union_field@@Base>:
   165a0:	ldr	r3, [r0, #32]
   165a4:	ldrh	r3, [r3, #14]
   165a8:	cmp	r3, #3
   165ac:	bne	16610 <flatcc_builder_check_union_field@@Base+0x70>
   165b0:	cmp	r1, #0
   165b4:	beq	165fc <flatcc_builder_check_union_field@@Base+0x5c>
   165b8:	ldrh	r3, [r0, #8]
   165bc:	cmp	r3, r1
   165c0:	bls	165fc <flatcc_builder_check_union_field@@Base+0x5c>
   165c4:	ldr	r3, [r0, #4]
   165c8:	sub	r1, r1, #-2147483647	; 0x80000001
   165cc:	lsl	r1, r1, #1
   165d0:	ldrh	r2, [r3, r1]!
   165d4:	cmp	r2, #0
   165d8:	ldrh	r1, [r3, #2]
   165dc:	beq	165f0 <flatcc_builder_check_union_field@@Base+0x50>
   165e0:	ldr	r3, [r0, #16]
   165e4:	ldrb	r3, [r3, r2]
   165e8:	cmp	r3, #0
   165ec:	bne	16604 <flatcc_builder_check_union_field@@Base+0x64>
   165f0:	clz	r0, r1
   165f4:	lsr	r0, r0, #5
   165f8:	bx	lr
   165fc:	mov	r0, #0
   16600:	bx	lr
   16604:	adds	r0, r1, #0
   16608:	movne	r0, #1
   1660c:	bx	lr
   16610:	movw	r1, #40488	; 0x9e28
   16614:	movt	r1, #1
   16618:	ldr	r3, [pc, #20]	; 16634 <flatcc_builder_check_union_field@@Base+0x94>
   1661c:	movw	r0, #41204	; 0xa0f4
   16620:	movt	r0, #1
   16624:	str	r4, [sp, #-8]!
   16628:	movw	r2, #1279	; 0x4ff
   1662c:	str	lr, [sp, #4]
   16630:	bl	11fd4 <__assert_fail@plt>
   16634:	strdeq	r9, [r1], -r4

00016638 <flatcc_builder_check_required@@Base>:
   16638:	ldr	r3, [r0, #32]
   1663c:	ldrh	r3, [r3, #14]
   16640:	cmp	r3, #3
   16644:	bne	166ac <flatcc_builder_check_required@@Base+0x74>
   16648:	ldrh	r3, [r0, #8]
   1664c:	cmp	r3, r2
   16650:	blt	166a4 <flatcc_builder_check_required@@Base+0x6c>
   16654:	cmp	r2, #0
   16658:	ble	1669c <flatcc_builder_check_required@@Base+0x64>
   1665c:	ldrh	r3, [r1]
   16660:	ldr	ip, [r0, #4]
   16664:	lsl	r3, r3, #1
   16668:	ldrh	r0, [ip, r3]
   1666c:	cmp	r0, #0
   16670:	bxeq	lr
   16674:	add	r2, r1, r2, lsl #1
   16678:	add	r1, r1, #2
   1667c:	b	16694 <flatcc_builder_check_required@@Base+0x5c>
   16680:	ldrh	r3, [r1], #2
   16684:	lsl	r3, r3, #1
   16688:	ldrh	r0, [ip, r3]
   1668c:	cmp	r0, #0
   16690:	bxeq	lr
   16694:	cmp	r1, r2
   16698:	bne	16680 <flatcc_builder_check_required@@Base+0x48>
   1669c:	mov	r0, #1
   166a0:	bx	lr
   166a4:	mov	r0, #0
   166a8:	bx	lr
   166ac:	movw	r1, #40488	; 0x9e28
   166b0:	movt	r1, #1
   166b4:	ldr	r3, [pc, #20]	; 166d0 <flatcc_builder_check_required@@Base+0x98>
   166b8:	movw	r0, #41204	; 0xa0f4
   166bc:	movt	r0, #1
   166c0:	str	r4, [sp, #-8]!
   166c4:	movw	r2, #1297	; 0x511
   166c8:	str	lr, [sp, #4]
   166cc:	bl	11fd4 <__assert_fail@plt>
   166d0:	andeq	r9, r1, r8, lsl ip

000166d4 <flatcc_builder_end_table@@Base>:
   166d4:	ldr	r3, [r0, #32]
   166d8:	strd	r4, [sp, #-20]!	; 0xffffffec
   166dc:	ldrh	r3, [r3, #14]
   166e0:	strd	r6, [sp, #8]
   166e4:	str	lr, [sp, #16]
   166e8:	sub	sp, sp, #20
   166ec:	cmp	r3, #3
   166f0:	bne	16874 <flatcc_builder_end_table@@Base+0x1a0>
   166f4:	ldrh	r5, [r0, #8]
   166f8:	movw	ip, #31153	; 0x79b1
   166fc:	movt	ip, #40503	; 0x9e37
   16700:	mov	r4, r0
   16704:	ldr	r1, [r0, #4]
   16708:	ldr	r3, [r0, #12]
   1670c:	add	r5, r5, #2
   16710:	lsl	r5, r5, #1
   16714:	ldr	lr, [r0, #20]
   16718:	sub	r6, r1, #4
   1671c:	uxth	r5, r5
   16720:	eor	r3, r3, r5
   16724:	mov	r2, r5
   16728:	strh	r5, [r1, #-4]
   1672c:	mul	r3, ip, r3
   16730:	add	lr, lr, #4
   16734:	uxth	lr, lr
   16738:	eor	r3, r3, lr
   1673c:	strh	lr, [r1, #-2]
   16740:	mov	r1, r6
   16744:	mul	r3, ip, r3
   16748:	str	r3, [r0, #12]
   1674c:	bl	15ff4 <flatcc_builder_create_cached_vtable@@Base>
   16750:	subs	r7, r0, #0
   16754:	bne	16774 <flatcc_builder_end_table@@Base+0xa0>
   16758:	mov	r5, #0
   1675c:	mov	r0, r5
   16760:	add	sp, sp, #20
   16764:	ldrd	r4, [sp]
   16768:	ldrd	r6, [sp, #8]
   1676c:	add	sp, sp, #16
   16770:	pop	{pc}		; (ldr pc, [sp], #4)
   16774:	mov	r2, r5
   16778:	mov	r1, #0
   1677c:	mov	r0, r6
   16780:	bl	11fb0 <memset@plt>
   16784:	ldr	ip, [r4]
   16788:	mov	r0, r4
   1678c:	ldr	r3, [r4, #32]
   16790:	ldr	r2, [r4, #76]	; 0x4c
   16794:	ldr	r1, [r3, #20]
   16798:	str	r7, [sp, #8]
   1679c:	ldrh	r3, [r4, #130]	; 0x82
   167a0:	add	r2, r2, r1
   167a4:	ldr	r1, [r4, #16]
   167a8:	sub	ip, ip, r2
   167ac:	asr	ip, ip, #1
   167b0:	str	r2, [sp]
   167b4:	ldr	r2, [r4, #20]
   167b8:	str	ip, [sp, #4]
   167bc:	bl	16368 <flatcc_builder_create_table@@Base>
   167c0:	subs	r5, r0, #0
   167c4:	beq	16758 <flatcc_builder_end_table@@Base+0x84>
   167c8:	ldr	r3, [r4, #32]
   167cc:	mov	r1, #0
   167d0:	ldr	r0, [r4, #52]	; 0x34
   167d4:	ldr	r2, [r4, #76]	; 0x4c
   167d8:	ldr	ip, [r3, #16]
   167dc:	ldr	r6, [r3, #20]
   167e0:	ldrh	lr, [r3, #28]
   167e4:	add	r0, r0, ip
   167e8:	ldr	ip, [r3, #24]
   167ec:	add	r3, r2, r6
   167f0:	ldr	r2, [r4, #20]
   167f4:	str	r3, [r4]
   167f8:	str	r0, [r4, #4]
   167fc:	strh	lr, [r4, #8]
   16800:	str	ip, [r4, #12]
   16804:	ldr	r0, [r4, #16]
   16808:	bl	11fb0 <memset@plt>
   1680c:	ldr	r3, [r4, #32]
   16810:	ldr	r0, [r4, #60]	; 0x3c
   16814:	ldr	r2, [r4, #64]	; 0x40
   16818:	ldr	ip, [r3]
   1681c:	ldmib	r3, {r1, lr}
   16820:	add	r0, r0, ip
   16824:	sub	r2, r2, ip
   16828:	str	r0, [r4, #16]
   1682c:	cmp	r2, r1
   16830:	ldrh	r0, [r4, #128]	; 0x80
   16834:	movcs	r2, r1
   16838:	str	lr, [r4, #20]
   1683c:	str	ip, [r4, #28]
   16840:	ldrh	ip, [r4, #130]	; 0x82
   16844:	str	r2, [r4, #24]
   16848:	ldr	r2, [r4, #156]	; 0x9c
   1684c:	str	r1, [r3, #4]
   16850:	cmp	r0, ip
   16854:	sub	r0, r3, #36	; 0x24
   16858:	strhcc	ip, [r4, #128]	; 0x80
   1685c:	ldrh	r1, [r3, #12]
   16860:	sub	r3, r2, #1
   16864:	str	r0, [r4, #32]
   16868:	strh	r1, [r4, #130]	; 0x82
   1686c:	str	r3, [r4, #156]	; 0x9c
   16870:	b	1675c <flatcc_builder_end_table@@Base+0x88>
   16874:	movw	r1, #40488	; 0x9e28
   16878:	movt	r1, #1
   1687c:	ldr	r3, [pc, #12]	; 16890 <flatcc_builder_end_table@@Base+0x1bc>
   16880:	movw	r0, #41204	; 0xa0f4
   16884:	movt	r0, #1
   16888:	movw	r2, #1317	; 0x525
   1688c:	bl	11fd4 <__assert_fail@plt>
   16890:	andeq	r9, r1, r8, lsr ip

00016894 <flatcc_builder_create_vector@@Base>:
   16894:	strd	r4, [sp, #-16]!
   16898:	mov	r4, r0
   1689c:	str	r6, [sp, #8]
   168a0:	str	lr, [sp, #12]
   168a4:	sub	sp, sp, #88	; 0x58
   168a8:	ldr	ip, [sp, #108]	; 0x6c
   168ac:	ldrh	r0, [sp, #104]	; 0x68
   168b0:	cmp	r2, ip
   168b4:	bhi	169a8 <flatcc_builder_create_vector@@Base+0x114>
   168b8:	ldrh	ip, [r4, #128]	; 0x80
   168bc:	cmp	r0, #4
   168c0:	mul	r3, r3, r2
   168c4:	movcc	r0, #4
   168c8:	add	lr, sp, #12
   168cc:	str	r2, [sp, #12]
   168d0:	ldr	r6, [r4, #136]	; 0x88
   168d4:	mov	r2, #1
   168d8:	str	lr, [sp, #24]
   168dc:	cmp	ip, r0
   168e0:	mov	ip, #4
   168e4:	strhcc	r0, [r4, #128]	; 0x80
   168e8:	sub	lr, r6, r3
   168ec:	sub	r0, r0, #1
   168f0:	cmp	r3, #0
   168f4:	and	r0, r0, lr
   168f8:	str	ip, [sp, #16]
   168fc:	moveq	r3, #2
   16900:	str	r2, [sp, #20]
   16904:	str	ip, [sp, #28]
   16908:	beq	1692c <flatcc_builder_create_vector@@Base+0x98>
   1690c:	mov	lr, #2
   16910:	add	ip, r3, ip
   16914:	mov	r2, lr
   16918:	str	ip, [sp, #16]
   1691c:	str	r3, [sp, #36]	; 0x24
   16920:	mov	r3, #3
   16924:	str	lr, [sp, #20]
   16928:	str	r1, [sp, #32]
   1692c:	cmp	r0, #0
   16930:	bne	1697c <flatcc_builder_create_vector@@Base+0xe8>
   16934:	sub	r5, r6, ip
   16938:	cmp	r6, r5
   1693c:	ble	169c8 <flatcc_builder_create_vector@@Base+0x134>
   16940:	mov	r3, r5
   16944:	add	r1, sp, #24
   16948:	str	ip, [sp]
   1694c:	ldr	r0, [r4, #36]	; 0x24
   16950:	ldr	r6, [r4, #44]	; 0x2c
   16954:	blx	r6
   16958:	cmp	r0, #0
   1695c:	bne	169c4 <flatcc_builder_create_vector@@Base+0x130>
   16960:	mov	r0, r5
   16964:	str	r5, [r4, #136]	; 0x88
   16968:	add	sp, sp, #88	; 0x58
   1696c:	ldrd	r4, [sp]
   16970:	ldr	r6, [sp, #8]
   16974:	add	sp, sp, #12
   16978:	pop	{pc}		; (ldr pc, [sp], #4)
   1697c:	ldr	lr, [pc, #96]	; 169e4 <flatcc_builder_create_vector@@Base+0x150>
   16980:	add	r2, r2, #1
   16984:	add	r1, sp, #88	; 0x58
   16988:	add	r1, r1, r2, lsl #3
   1698c:	add	ip, ip, r0
   16990:	mov	r2, r3
   16994:	str	ip, [sp, #16]
   16998:	str	r3, [sp, #20]
   1699c:	str	lr, [r1, #-72]	; 0xffffffb8
   169a0:	str	r0, [r1, #-68]	; 0xffffffbc
   169a4:	b	16934 <flatcc_builder_create_vector@@Base+0xa0>
   169a8:	movw	r1, #40488	; 0x9e28
   169ac:	movt	r1, #1
   169b0:	ldr	r3, [pc, #48]	; 169e8 <flatcc_builder_create_vector@@Base+0x154>
   169b4:	movw	r0, #41248	; 0xa120
   169b8:	movt	r0, #1
   169bc:	movw	r2, #1365	; 0x555
   169c0:	bl	11fd4 <__assert_fail@plt>
   169c4:	bl	13318 <flatcc_builder_default_alloc@@Base+0x19c>
   169c8:	movw	r1, #40488	; 0x9e28
   169cc:	movt	r1, #1
   169d0:	ldr	r3, [pc, #20]	; 169ec <flatcc_builder_create_vector@@Base+0x158>
   169d4:	movw	r0, #40680	; 0x9ee8
   169d8:	movt	r0, #1
   169dc:	movw	r2, #647	; 0x287
   169e0:	bl	11fd4 <__assert_fail@plt>
   169e4:	andeq	r9, r1, r0, lsl #15
   169e8:	andeq	r9, r1, r4, asr ip
   169ec:	andeq	r9, r1, r4, lsl #14

000169f0 <flatcc_builder_end_vector@@Base>:
   169f0:	ldr	r2, [r0, #32]
   169f4:	strd	r4, [sp, #-16]!
   169f8:	ldrh	r3, [r2, #14]
   169fc:	str	r6, [sp, #8]
   16a00:	str	lr, [sp, #12]
   16a04:	sub	sp, sp, #88	; 0x58
   16a08:	cmp	r3, #4
   16a0c:	bne	16bd4 <flatcc_builder_end_vector@@Base+0x1e4>
   16a10:	ldr	ip, [r2, #20]
   16a14:	mov	r4, r0
   16a18:	ldr	r1, [r2, #24]
   16a1c:	ldrh	r3, [r0, #130]	; 0x82
   16a20:	ldr	r5, [r4, #16]
   16a24:	cmp	ip, r1
   16a28:	ldr	r0, [r2, #16]
   16a2c:	bhi	16bb8 <flatcc_builder_end_vector@@Base+0x1c8>
   16a30:	cmp	r3, #4
   16a34:	mul	r0, r0, ip
   16a38:	mov	r1, #4
   16a3c:	ldrh	r2, [r4, #128]	; 0x80
   16a40:	movcc	r3, #4
   16a44:	add	r6, sp, #12
   16a48:	str	ip, [sp, #12]
   16a4c:	ldr	lr, [r4, #136]	; 0x88
   16a50:	str	r1, [sp, #16]
   16a54:	str	r6, [sp, #24]
   16a58:	cmp	r2, r3
   16a5c:	mov	r2, #1
   16a60:	strhcc	r3, [r4, #128]	; 0x80
   16a64:	sub	ip, lr, r0
   16a68:	sub	r3, r3, #1
   16a6c:	cmp	r0, #0
   16a70:	and	r3, r3, ip
   16a74:	str	r2, [sp, #20]
   16a78:	moveq	r0, #2
   16a7c:	str	r1, [sp, #28]
   16a80:	beq	16aa4 <flatcc_builder_end_vector@@Base+0xb4>
   16a84:	mov	ip, #2
   16a88:	add	r1, r0, r1
   16a8c:	mov	r2, ip
   16a90:	str	r1, [sp, #16]
   16a94:	str	r0, [sp, #36]	; 0x24
   16a98:	mov	r0, #3
   16a9c:	str	ip, [sp, #20]
   16aa0:	str	r5, [sp, #32]
   16aa4:	cmp	r3, #0
   16aa8:	bne	16b6c <flatcc_builder_end_vector@@Base+0x17c>
   16aac:	sub	r5, lr, r1
   16ab0:	cmp	lr, r5
   16ab4:	ble	16b9c <flatcc_builder_end_vector@@Base+0x1ac>
   16ab8:	mov	r3, r5
   16abc:	str	r1, [sp]
   16ac0:	add	r1, sp, #24
   16ac4:	ldr	r0, [r4, #36]	; 0x24
   16ac8:	ldr	r6, [r4, #44]	; 0x2c
   16acc:	blx	r6
   16ad0:	subs	r1, r0, #0
   16ad4:	bne	16b98 <flatcc_builder_end_vector@@Base+0x1a8>
   16ad8:	cmp	r5, #0
   16adc:	str	r5, [r4, #136]	; 0x88
   16ae0:	beq	16b54 <flatcc_builder_end_vector@@Base+0x164>
   16ae4:	ldr	r0, [r4, #16]
   16ae8:	ldr	r2, [r4, #20]
   16aec:	bl	11fb0 <memset@plt>
   16af0:	ldr	r3, [r4, #32]
   16af4:	ldr	r0, [r4, #60]	; 0x3c
   16af8:	ldr	r2, [r4, #64]	; 0x40
   16afc:	ldr	ip, [r3]
   16b00:	ldmib	r3, {r1, lr}
   16b04:	add	r0, r0, ip
   16b08:	sub	r2, r2, ip
   16b0c:	str	r0, [r4, #16]
   16b10:	cmp	r2, r1
   16b14:	ldrh	r0, [r4, #128]	; 0x80
   16b18:	movcs	r2, r1
   16b1c:	str	lr, [r4, #20]
   16b20:	str	ip, [r4, #28]
   16b24:	ldrh	ip, [r4, #130]	; 0x82
   16b28:	str	r2, [r4, #24]
   16b2c:	ldr	r2, [r4, #156]	; 0x9c
   16b30:	str	r1, [r3, #4]
   16b34:	cmp	r0, ip
   16b38:	sub	r0, r3, #36	; 0x24
   16b3c:	strhcc	ip, [r4, #128]	; 0x80
   16b40:	ldrh	r1, [r3, #12]
   16b44:	sub	r3, r2, #1
   16b48:	str	r0, [r4, #32]
   16b4c:	strh	r1, [r4, #130]	; 0x82
   16b50:	str	r3, [r4, #156]	; 0x9c
   16b54:	mov	r0, r5
   16b58:	add	sp, sp, #88	; 0x58
   16b5c:	ldrd	r4, [sp]
   16b60:	ldr	r6, [sp, #8]
   16b64:	add	sp, sp, #12
   16b68:	pop	{pc}		; (ldr pc, [sp], #4)
   16b6c:	ldr	r5, [pc, #124]	; 16bf0 <flatcc_builder_end_vector@@Base+0x200>
   16b70:	add	r2, r2, #1
   16b74:	add	ip, sp, #88	; 0x58
   16b78:	add	ip, ip, r2, lsl #3
   16b7c:	add	r1, r1, r3
   16b80:	mov	r2, r0
   16b84:	str	r1, [sp, #16]
   16b88:	str	r0, [sp, #20]
   16b8c:	str	r5, [ip, #-72]	; 0xffffffb8
   16b90:	str	r3, [ip, #-68]	; 0xffffffbc
   16b94:	b	16aac <flatcc_builder_end_vector@@Base+0xbc>
   16b98:	bl	13318 <flatcc_builder_default_alloc@@Base+0x19c>
   16b9c:	movw	r1, #40488	; 0x9e28
   16ba0:	movt	r1, #1
   16ba4:	ldr	r3, [pc, #72]	; 16bf4 <flatcc_builder_end_vector@@Base+0x204>
   16ba8:	movw	r0, #40680	; 0x9ee8
   16bac:	movt	r0, #1
   16bb0:	movw	r2, #647	; 0x287
   16bb4:	bl	11fd4 <__assert_fail@plt>
   16bb8:	movw	r1, #40488	; 0x9e28
   16bbc:	movt	r1, #1
   16bc0:	ldr	r3, [pc, #48]	; 16bf8 <flatcc_builder_end_vector@@Base+0x208>
   16bc4:	movw	r0, #41248	; 0xa120
   16bc8:	movt	r0, #1
   16bcc:	movw	r2, #1365	; 0x555
   16bd0:	bl	11fd4 <__assert_fail@plt>
   16bd4:	movw	r1, #40488	; 0x9e28
   16bd8:	movt	r1, #1
   16bdc:	ldr	r3, [pc, #24]	; 16bfc <flatcc_builder_end_vector@@Base+0x20c>
   16be0:	movw	r0, #40852	; 0x9f94
   16be4:	movt	r0, #1
   16be8:	movw	r2, #1400	; 0x578
   16bec:	bl	11fd4 <__assert_fail@plt>
   16bf0:	andeq	r9, r1, r0, lsl #15
   16bf4:	andeq	r9, r1, r4, lsl #14
   16bf8:	andeq	r9, r1, r4, asr ip
   16bfc:	andeq	r9, r1, r4, ror ip

00016c00 <flatcc_builder_vector_count@@Base>:
   16c00:	ldr	r3, [r0, #32]
   16c04:	ldr	r0, [r3, #20]
   16c08:	bx	lr

00016c0c <flatcc_builder_vector_edit@@Base>:
   16c0c:	ldr	r0, [r0, #16]
   16c10:	bx	lr

00016c14 <flatcc_builder_create_offset_vector_direct@@Base>:
   16c14:	cmn	r2, #-1073741823	; 0xc0000001
   16c18:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16c1c:	strd	r6, [sp, #8]
   16c20:	str	r8, [sp, #16]
   16c24:	str	lr, [sp, #20]
   16c28:	sub	sp, sp, #88	; 0x58
   16c2c:	bhi	16d30 <flatcc_builder_create_offset_vector_direct@@Base+0x11c>
   16c30:	ldrh	r3, [r0, #128]	; 0x80
   16c34:	mov	r4, r0
   16c38:	mov	ip, #1
   16c3c:	str	r2, [sp, #12]
   16c40:	ldr	r5, [r4, #136]	; 0x88
   16c44:	str	ip, [sp, #20]
   16c48:	cmp	r3, #3
   16c4c:	movls	r3, #4
   16c50:	strhls	r3, [r0, #128]	; 0x80
   16c54:	mov	r0, #4
   16c58:	add	r3, sp, #12
   16c5c:	lsls	lr, r2, #2
   16c60:	str	r0, [sp, #16]
   16c64:	moveq	r7, #2
   16c68:	str	r3, [sp, #24]
   16c6c:	and	r3, r5, #3
   16c70:	str	r0, [sp, #28]
   16c74:	beq	16c98 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   16c78:	mov	r6, #2
   16c7c:	add	r0, lr, r0
   16c80:	mov	ip, r6
   16c84:	mov	r7, #3
   16c88:	str	r0, [sp, #16]
   16c8c:	str	r6, [sp, #20]
   16c90:	str	r1, [sp, #32]
   16c94:	str	lr, [sp, #36]	; 0x24
   16c98:	cmp	r3, #0
   16c9c:	bne	16d04 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
   16ca0:	cmp	r2, #0
   16ca4:	beq	16d54 <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   16ca8:	ldr	r3, [r1]
   16cac:	cmp	r3, #0
   16cb0:	subne	lr, lr, #4
   16cb4:	movne	r2, #0
   16cb8:	beq	16ce8 <flatcc_builder_create_offset_vector_direct@@Base+0xd4>
   16cbc:	sub	r3, r3, #4
   16cc0:	cmp	r2, lr
   16cc4:	sub	r3, r3, r5
   16cc8:	add	r3, r3, r0
   16ccc:	sub	r3, r3, r2
   16cd0:	str	r3, [r1]
   16cd4:	beq	16d50 <flatcc_builder_create_offset_vector_direct@@Base+0x13c>
   16cd8:	ldr	r3, [r1, #4]!
   16cdc:	add	r2, r2, #4
   16ce0:	cmp	r3, #0
   16ce4:	bne	16cbc <flatcc_builder_create_offset_vector_direct@@Base+0xa8>
   16ce8:	movw	r1, #40488	; 0x9e28
   16cec:	movt	r1, #1
   16cf0:	ldr	r3, [pc, #176]	; 16da8 <flatcc_builder_create_offset_vector_direct@@Base+0x194>
   16cf4:	movw	r0, #40680	; 0x9ee8
   16cf8:	movt	r0, #1
   16cfc:	movw	r2, #1463	; 0x5b7
   16d00:	bl	11fd4 <__assert_fail@plt>
   16d04:	ldr	r8, [pc, #160]	; 16dac <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   16d08:	add	ip, ip, #1
   16d0c:	add	r6, sp, #88	; 0x58
   16d10:	add	r6, r6, ip, lsl #3
   16d14:	add	r0, r0, r3
   16d18:	mov	ip, r7
   16d1c:	str	r0, [sp, #16]
   16d20:	str	r7, [sp, #20]
   16d24:	str	r8, [r6, #-72]	; 0xffffffb8
   16d28:	str	r3, [r6, #-68]	; 0xffffffbc
   16d2c:	b	16ca0 <flatcc_builder_create_offset_vector_direct@@Base+0x8c>
   16d30:	mov	r6, #0
   16d34:	mov	r0, r6
   16d38:	add	sp, sp, #88	; 0x58
   16d3c:	ldrd	r4, [sp]
   16d40:	ldrd	r6, [sp, #8]
   16d44:	ldr	r8, [sp, #16]
   16d48:	add	sp, sp, #20
   16d4c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d50:	ldr	r5, [r4, #136]	; 0x88
   16d54:	sub	r6, r5, r0
   16d58:	cmp	r6, r5
   16d5c:	bge	16d8c <flatcc_builder_create_offset_vector_direct@@Base+0x178>
   16d60:	mov	r2, ip
   16d64:	mov	r3, r6
   16d68:	str	r0, [sp]
   16d6c:	add	r1, sp, #24
   16d70:	ldr	r0, [r4, #36]	; 0x24
   16d74:	ldr	r5, [r4, #44]	; 0x2c
   16d78:	blx	r5
   16d7c:	cmp	r0, #0
   16d80:	streq	r6, [r4, #136]	; 0x88
   16d84:	beq	16d34 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   16d88:	bl	13318 <flatcc_builder_default_alloc@@Base+0x19c>
   16d8c:	movw	r1, #40488	; 0x9e28
   16d90:	movt	r1, #1
   16d94:	ldr	r3, [pc, #20]	; 16db0 <flatcc_builder_create_offset_vector_direct@@Base+0x19c>
   16d98:	movw	r0, #40680	; 0x9ee8
   16d9c:	movt	r0, #1
   16da0:	movw	r2, #647	; 0x287
   16da4:	bl	11fd4 <__assert_fail@plt>
   16da8:	andeq	r9, r1, r0, lsl #19
   16dac:	andeq	r9, r1, r0, lsl #15
   16db0:	andeq	r9, r1, r4, lsl #14

00016db4 <flatcc_builder_end_offset_vector@@Base>:
   16db4:	ldr	r3, [r0, #32]
   16db8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16dbc:	ldrh	r2, [r3, #14]
   16dc0:	strd	r6, [sp, #8]
   16dc4:	str	r8, [sp, #16]
   16dc8:	str	lr, [sp, #20]
   16dcc:	sub	sp, sp, #88	; 0x58
   16dd0:	cmp	r2, #5
   16dd4:	bne	16fbc <flatcc_builder_end_offset_vector@@Base+0x208>
   16dd8:	ldr	r3, [r3, #20]
   16ddc:	cmn	r3, #-1073741823	; 0xc0000001
   16de0:	bhi	16ee4 <flatcc_builder_end_offset_vector@@Base+0x130>
   16de4:	ldrh	r2, [r0, #128]	; 0x80
   16de8:	mov	r4, r0
   16dec:	add	r5, sp, #12
   16df0:	mov	r1, #1
   16df4:	str	r3, [sp, #12]
   16df8:	ldr	ip, [r4, #136]	; 0x88
   16dfc:	str	r1, [sp, #20]
   16e00:	ldr	r0, [r0, #16]
   16e04:	cmp	r2, #3
   16e08:	str	r5, [sp, #24]
   16e0c:	movls	r2, #4
   16e10:	and	r5, ip, #3
   16e14:	strhls	r2, [r4, #128]	; 0x80
   16e18:	mov	r2, #4
   16e1c:	lsls	lr, r3, #2
   16e20:	moveq	r6, #2
   16e24:	str	r2, [sp, #16]
   16e28:	str	r2, [sp, #28]
   16e2c:	beq	16e50 <flatcc_builder_end_offset_vector@@Base+0x9c>
   16e30:	mov	r7, #2
   16e34:	add	r2, lr, r2
   16e38:	mov	r1, r7
   16e3c:	mov	r6, #3
   16e40:	str	r2, [sp, #16]
   16e44:	str	r7, [sp, #20]
   16e48:	str	r0, [sp, #32]
   16e4c:	str	lr, [sp, #36]	; 0x24
   16e50:	cmp	r5, #0
   16e54:	bne	16ebc <flatcc_builder_end_offset_vector@@Base+0x108>
   16e58:	cmp	r3, #0
   16e5c:	beq	16f0c <flatcc_builder_end_offset_vector@@Base+0x158>
   16e60:	ldr	r3, [r0]
   16e64:	cmp	r3, #0
   16e68:	subne	lr, lr, #4
   16e6c:	movne	r1, #0
   16e70:	beq	16ea0 <flatcc_builder_end_offset_vector@@Base+0xec>
   16e74:	sub	r3, r3, #4
   16e78:	cmp	r1, lr
   16e7c:	sub	r3, r3, ip
   16e80:	add	r3, r3, r2
   16e84:	sub	r3, r3, r1
   16e88:	str	r3, [r0]
   16e8c:	beq	16f04 <flatcc_builder_end_offset_vector@@Base+0x150>
   16e90:	ldr	r3, [r0, #4]!
   16e94:	add	r1, r1, #4
   16e98:	cmp	r3, #0
   16e9c:	bne	16e74 <flatcc_builder_end_offset_vector@@Base+0xc0>
   16ea0:	movw	r1, #40488	; 0x9e28
   16ea4:	movt	r1, #1
   16ea8:	ldr	r3, [pc, #328]	; 16ff8 <flatcc_builder_end_offset_vector@@Base+0x244>
   16eac:	movw	r0, #40680	; 0x9ee8
   16eb0:	movt	r0, #1
   16eb4:	movw	r2, #1463	; 0x5b7
   16eb8:	bl	11fd4 <__assert_fail@plt>
   16ebc:	ldr	r7, [pc, #312]	; 16ffc <flatcc_builder_end_offset_vector@@Base+0x248>
   16ec0:	add	r1, r1, #1
   16ec4:	add	r8, sp, #88	; 0x58
   16ec8:	add	r1, r8, r1, lsl #3
   16ecc:	add	r2, r2, r5
   16ed0:	str	r2, [sp, #16]
   16ed4:	str	r6, [sp, #20]
   16ed8:	str	r7, [r1, #-72]	; 0xffffffb8
   16edc:	str	r5, [r1, #-68]	; 0xffffffbc
   16ee0:	b	16e58 <flatcc_builder_end_offset_vector@@Base+0xa4>
   16ee4:	mov	r5, #0
   16ee8:	mov	r0, r5
   16eec:	add	sp, sp, #88	; 0x58
   16ef0:	ldrd	r4, [sp]
   16ef4:	ldrd	r6, [sp, #8]
   16ef8:	ldr	r8, [sp, #16]
   16efc:	add	sp, sp, #20
   16f00:	pop	{pc}		; (ldr pc, [sp], #4)
   16f04:	ldr	r2, [sp, #16]
   16f08:	ldr	ip, [r4, #136]	; 0x88
   16f0c:	sub	r5, ip, r2
   16f10:	cmp	r5, ip
   16f14:	bge	16fdc <flatcc_builder_end_offset_vector@@Base+0x228>
   16f18:	add	r1, sp, #24
   16f1c:	mov	r3, r5
   16f20:	str	r2, [sp]
   16f24:	ldr	r2, [sp, #20]
   16f28:	ldr	r0, [r4, #36]	; 0x24
   16f2c:	ldr	r6, [r4, #44]	; 0x2c
   16f30:	blx	r6
   16f34:	subs	r1, r0, #0
   16f38:	bne	16fd8 <flatcc_builder_end_offset_vector@@Base+0x224>
   16f3c:	cmp	r5, #0
   16f40:	str	r5, [r4, #136]	; 0x88
   16f44:	beq	16ee4 <flatcc_builder_end_offset_vector@@Base+0x130>
   16f48:	ldr	r0, [r4, #16]
   16f4c:	ldr	r2, [r4, #20]
   16f50:	bl	11fb0 <memset@plt>
   16f54:	ldr	r3, [r4, #32]
   16f58:	ldr	r0, [r4, #60]	; 0x3c
   16f5c:	ldr	r2, [r4, #64]	; 0x40
   16f60:	ldr	ip, [r3]
   16f64:	ldmib	r3, {r1, lr}
   16f68:	add	r0, r0, ip
   16f6c:	sub	r2, r2, ip
   16f70:	str	r0, [r4, #16]
   16f74:	cmp	r2, r1
   16f78:	ldrh	r0, [r4, #128]	; 0x80
   16f7c:	movcs	r2, r1
   16f80:	str	lr, [r4, #20]
   16f84:	str	ip, [r4, #28]
   16f88:	ldrh	ip, [r4, #130]	; 0x82
   16f8c:	str	r2, [r4, #24]
   16f90:	ldr	r2, [r4, #156]	; 0x9c
   16f94:	str	r1, [r3, #4]
   16f98:	cmp	r0, ip
   16f9c:	sub	r0, r3, #36	; 0x24
   16fa0:	strhcc	ip, [r4, #128]	; 0x80
   16fa4:	ldrh	r1, [r3, #12]
   16fa8:	sub	r3, r2, #1
   16fac:	str	r0, [r4, #32]
   16fb0:	strh	r1, [r4, #130]	; 0x82
   16fb4:	str	r3, [r4, #156]	; 0x9c
   16fb8:	b	16ee8 <flatcc_builder_end_offset_vector@@Base+0x134>
   16fbc:	movw	r1, #40488	; 0x9e28
   16fc0:	movt	r1, #1
   16fc4:	ldr	r3, [pc, #52]	; 17000 <flatcc_builder_end_offset_vector@@Base+0x24c>
   16fc8:	movw	r0, #40960	; 0xa000
   16fcc:	movt	r0, #1
   16fd0:	movw	r2, #1480	; 0x5c8
   16fd4:	bl	11fd4 <__assert_fail@plt>
   16fd8:	bl	13318 <flatcc_builder_default_alloc@@Base+0x19c>
   16fdc:	movw	r1, #40488	; 0x9e28
   16fe0:	movt	r1, #1
   16fe4:	ldr	r3, [pc, #24]	; 17004 <flatcc_builder_end_offset_vector@@Base+0x250>
   16fe8:	movw	r0, #40680	; 0x9ee8
   16fec:	movt	r0, #1
   16ff0:	movw	r2, #647	; 0x287
   16ff4:	bl	11fd4 <__assert_fail@plt>
   16ff8:	andeq	r9, r1, r0, lsl #19
   16ffc:	andeq	r9, r1, r0, lsl #15
   17000:	andeq	r9, r1, r4, ror #22
   17004:	andeq	r9, r1, r4, lsl #14

00017008 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   17008:	ldr	r2, [r0, #32]
   1700c:	strd	r4, [sp, #-16]!
   17010:	ldrh	ip, [r2, #14]
   17014:	str	r6, [sp, #8]
   17018:	str	lr, [sp, #12]
   1701c:	cmp	ip, #5
   17020:	bne	170d8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   17024:	ldr	r2, [r2, #20]
   17028:	cmn	r2, #-1073741823	; 0xc0000001
   1702c:	bhi	17048 <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
   17030:	mov	r3, r1
   17034:	ldr	r1, [r0, #16]
   17038:	mov	r4, r0
   1703c:	bl	13504 <flatcc_builder_default_alloc@@Base+0x388>
   17040:	subs	r5, r0, #0
   17044:	bne	17060 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   17048:	mov	r5, #0
   1704c:	mov	r0, r5
   17050:	ldrd	r4, [sp]
   17054:	ldr	r6, [sp, #8]
   17058:	add	sp, sp, #12
   1705c:	pop	{pc}		; (ldr pc, [sp], #4)
   17060:	mov	r1, #0
   17064:	ldr	r0, [r4, #16]
   17068:	ldr	r2, [r4, #20]
   1706c:	bl	11fb0 <memset@plt>
   17070:	ldr	r3, [r4, #32]
   17074:	ldr	r0, [r4, #60]	; 0x3c
   17078:	ldr	r2, [r4, #64]	; 0x40
   1707c:	ldr	ip, [r3]
   17080:	ldmib	r3, {r1, lr}
   17084:	add	r0, r0, ip
   17088:	sub	r2, r2, ip
   1708c:	str	r0, [r4, #16]
   17090:	cmp	r2, r1
   17094:	ldrh	r0, [r4, #128]	; 0x80
   17098:	movcs	r2, r1
   1709c:	str	lr, [r4, #20]
   170a0:	str	ip, [r4, #28]
   170a4:	ldrh	ip, [r4, #130]	; 0x82
   170a8:	str	r2, [r4, #24]
   170ac:	ldr	r2, [r4, #156]	; 0x9c
   170b0:	str	r1, [r3, #4]
   170b4:	cmp	r0, ip
   170b8:	sub	r0, r3, #36	; 0x24
   170bc:	strhcc	ip, [r4, #128]	; 0x80
   170c0:	ldrh	r1, [r3, #12]
   170c4:	sub	r3, r2, #1
   170c8:	str	r0, [r4, #32]
   170cc:	strh	r1, [r4, #130]	; 0x82
   170d0:	str	r3, [r4, #156]	; 0x9c
   170d4:	b	1704c <flatcc_builder_end_offset_vector_for_unions@@Base+0x44>
   170d8:	movw	r1, #40488	; 0x9e28
   170dc:	movt	r1, #1
   170e0:	ldr	r3, [pc, #12]	; 170f4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   170e4:	movw	r0, #40960	; 0xa000
   170e8:	movt	r0, #1
   170ec:	movw	r2, #1493	; 0x5d5
   170f0:	bl	11fd4 <__assert_fail@plt>
   170f4:	muleq	r1, r0, ip

000170f8 <flatcc_builder_offset_vector_edit@@Base>:
   170f8:	ldr	r0, [r0, #16]
   170fc:	bx	lr

00017100 <flatcc_builder_offset_vector_count@@Base>:
   17100:	ldr	r3, [r0, #32]
   17104:	ldr	r0, [r3, #20]
   17108:	bx	lr

0001710c <flatcc_builder_create_union_vector@@Base>:
   1710c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17110:	mov	r4, r1
   17114:	mov	r1, #4
   17118:	strd	r6, [sp, #8]
   1711c:	mov	r6, r0
   17120:	mov	r0, r4
   17124:	strd	r8, [sp, #16]
   17128:	mov	r5, r2
   1712c:	mov	r7, r3
   17130:	str	sl, [sp, #24]
   17134:	str	lr, [sp, #28]
   17138:	sub	sp, sp, #8
   1713c:	bl	133e0 <flatcc_builder_default_alloc@@Base+0x264>
   17140:	cmp	r0, #0
   17144:	bne	172b0 <flatcc_builder_create_union_vector@@Base+0x1a4>
   17148:	ldr	ip, [r4, #28]
   1714c:	mov	lr, #4
   17150:	mov	r8, #5
   17154:	mvn	r9, #3
   17158:	ldr	r3, [r4, #32]
   1715c:	ldr	r2, [r4, #64]	; 0x40
   17160:	ldr	r1, [r4, #60]	; 0x3c
   17164:	strh	r8, [r3, #14]
   17168:	str	lr, [r3, #16]
   1716c:	sub	r2, r2, ip
   17170:	str	r0, [r3, #20]
   17174:	mov	r0, r4
   17178:	cmn	r2, #4
   1717c:	add	r1, r1, ip
   17180:	mvnhi	r2, #3
   17184:	str	r1, [r4, #16]
   17188:	mov	r1, r7
   1718c:	str	r2, [r4, #24]
   17190:	str	r9, [r3, #4]
   17194:	bl	14c88 <flatcc_builder_extend_offset_vector@@Base>
   17198:	cmp	r0, #0
   1719c:	beq	172b0 <flatcc_builder_create_union_vector@@Base+0x1a4>
   171a0:	ldr	r8, [r4, #20]
   171a4:	ldr	r3, [r4, #24]
   171a8:	add	r2, r7, r8
   171ac:	cmp	r2, r3
   171b0:	str	r2, [r4, #20]
   171b4:	bcs	172dc <flatcc_builder_create_union_vector@@Base+0x1d0>
   171b8:	ldr	r1, [r4, #16]
   171bc:	adds	r8, r1, r8
   171c0:	beq	172b0 <flatcc_builder_create_union_vector@@Base+0x1a4>
   171c4:	cmp	r7, #0
   171c8:	beq	171f8 <flatcc_builder_create_union_vector@@Base+0xec>
   171cc:	add	lr, r5, r7, lsl #3
   171d0:	mov	r2, r5
   171d4:	sub	r0, r8, #1
   171d8:	sub	r3, r1, #4
   171dc:	ldrb	ip, [r2]
   171e0:	add	r2, r2, #8
   171e4:	strb	ip, [r0, #1]!
   171e8:	ldr	ip, [r2, #-4]
   171ec:	cmp	lr, r2
   171f0:	str	ip, [r3, #4]!
   171f4:	bne	171dc <flatcc_builder_create_union_vector@@Base+0xd0>
   171f8:	mov	r3, r8
   171fc:	mov	r2, r7
   17200:	mov	r0, r4
   17204:	bl	13504 <flatcc_builder_default_alloc@@Base+0x388>
   17208:	subs	r5, r0, #0
   1720c:	beq	1733c <flatcc_builder_create_union_vector@@Base+0x230>
   17210:	mvn	ip, #0
   17214:	mov	r3, #1
   17218:	mov	r2, r7
   1721c:	mov	r1, r8
   17220:	mov	r0, r4
   17224:	stm	sp, {r3, ip}
   17228:	bl	16894 <flatcc_builder_create_vector@@Base>
   1722c:	mov	r7, r0
   17230:	mov	r1, #0
   17234:	ldr	r0, [r4, #16]
   17238:	ldr	r2, [r4, #20]
   1723c:	bl	11fb0 <memset@plt>
   17240:	ldr	r3, [r4, #32]
   17244:	str	r7, [r6]
   17248:	ldr	r0, [r4, #60]	; 0x3c
   1724c:	str	r5, [r6, #4]
   17250:	ldr	r2, [r4, #64]	; 0x40
   17254:	ldr	ip, [r3]
   17258:	ldmib	r3, {r1, lr}
   1725c:	add	r0, r0, ip
   17260:	sub	r2, r2, ip
   17264:	str	r0, [r4, #16]
   17268:	cmp	r2, r1
   1726c:	ldrh	r0, [r4, #128]	; 0x80
   17270:	movcs	r2, r1
   17274:	str	lr, [r4, #20]
   17278:	str	ip, [r4, #28]
   1727c:	ldrh	ip, [r4, #130]	; 0x82
   17280:	str	r2, [r4, #24]
   17284:	ldr	r2, [r4, #156]	; 0x9c
   17288:	str	r1, [r3, #4]
   1728c:	cmp	r0, ip
   17290:	sub	r0, r3, #36	; 0x24
   17294:	strhcc	ip, [r4, #128]	; 0x80
   17298:	ldrh	r1, [r3, #12]
   1729c:	sub	r3, r2, #1
   172a0:	str	r0, [r4, #32]
   172a4:	strh	r1, [r4, #130]	; 0x82
   172a8:	str	r3, [r4, #156]	; 0x9c
   172ac:	b	172bc <flatcc_builder_create_union_vector@@Base+0x1b0>
   172b0:	mov	r3, #0
   172b4:	str	r3, [r6]
   172b8:	str	r3, [r6, #4]
   172bc:	mov	r0, r6
   172c0:	add	sp, sp, #8
   172c4:	ldrd	r4, [sp]
   172c8:	ldrd	r6, [sp, #8]
   172cc:	ldrd	r8, [sp, #16]
   172d0:	ldr	sl, [sp, #24]
   172d4:	add	sp, sp, #28
   172d8:	pop	{pc}		; (ldr pc, [sp], #4)
   172dc:	ldr	ip, [r4, #28]
   172e0:	mov	r0, #1
   172e4:	add	r1, r4, #60	; 0x3c
   172e8:	mov	r3, r0
   172ec:	str	r0, [sp]
   172f0:	ldr	sl, [r4, #48]	; 0x30
   172f4:	add	ip, ip, r0
   172f8:	ldr	r0, [r4, #40]	; 0x28
   172fc:	add	r2, ip, r2
   17300:	blx	sl
   17304:	cmp	r0, #0
   17308:	bne	172b0 <flatcc_builder_create_union_vector@@Base+0x1a4>
   1730c:	ldr	r1, [r4, #28]
   17310:	ldr	r2, [r4, #32]
   17314:	ldr	r3, [r4, #64]	; 0x40
   17318:	ldr	r0, [r4, #60]	; 0x3c
   1731c:	sub	r3, r3, r1
   17320:	cmn	r3, #4
   17324:	movhi	r3, r9
   17328:	add	r1, r0, r1
   1732c:	str	r1, [r4, #16]
   17330:	str	r3, [r4, #24]
   17334:	str	r9, [r2, #4]
   17338:	b	171bc <flatcc_builder_create_union_vector@@Base+0xb0>
   1733c:	mov	r7, r5
   17340:	b	17230 <flatcc_builder_create_union_vector@@Base+0x124>

00017344 <flatcc_builder_create_union_vector_direct@@Base>:
   17344:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17348:	strd	r6, [sp, #8]
   1734c:	mov	r6, r0
   17350:	str	r8, [sp, #16]
   17354:	str	lr, [sp, #20]
   17358:	sub	sp, sp, #88	; 0x58
   1735c:	ldr	r4, [sp, #112]	; 0x70
   17360:	cmn	r4, #-1073741823	; 0xc0000001
   17364:	bhi	17438 <flatcc_builder_create_union_vector_direct@@Base+0xf4>
   17368:	mov	r5, r1
   1736c:	mov	r8, r2
   17370:	mov	r1, r3
   17374:	mov	r0, r5
   17378:	mov	r3, r2
   1737c:	mov	r2, r4
   17380:	bl	13504 <flatcc_builder_default_alloc@@Base+0x388>
   17384:	subs	r7, r0, #0
   17388:	beq	17438 <flatcc_builder_create_union_vector_direct@@Base+0xf4>
   1738c:	ldrh	r3, [r5, #128]	; 0x80
   17390:	mov	r2, #1
   17394:	mov	r1, #4
   17398:	str	r4, [sp, #12]
   1739c:	ldr	r0, [r5, #136]	; 0x88
   173a0:	str	r1, [sp, #16]
   173a4:	str	r1, [sp, #28]
   173a8:	cmp	r3, #3
   173ac:	movls	r3, #4
   173b0:	strhls	r3, [r5, #128]	; 0x80
   173b4:	add	r3, sp, #12
   173b8:	cmp	r4, #0
   173bc:	moveq	ip, #2
   173c0:	strd	r2, [sp, #20]
   173c4:	sub	r3, r0, r4
   173c8:	and	r3, r3, #3
   173cc:	bne	17460 <flatcc_builder_create_union_vector_direct@@Base+0x11c>
   173d0:	cmp	r3, #0
   173d4:	beq	17400 <flatcc_builder_create_union_vector_direct@@Base+0xbc>
   173d8:	ldr	r4, [pc, #196]	; 174a4 <flatcc_builder_create_union_vector_direct@@Base+0x160>
   173dc:	add	r2, r2, #1
   173e0:	add	lr, sp, #88	; 0x58
   173e4:	add	lr, lr, r2, lsl #3
   173e8:	add	r1, r1, r3
   173ec:	mov	r2, ip
   173f0:	str	r1, [sp, #16]
   173f4:	str	ip, [sp, #20]
   173f8:	str	r4, [lr, #-72]	; 0xffffffb8
   173fc:	str	r3, [lr, #-68]	; 0xffffffbc
   17400:	sub	r4, r0, r1
   17404:	cmp	r0, r4
   17408:	ble	17484 <flatcc_builder_create_union_vector_direct@@Base+0x140>
   1740c:	mov	r3, r4
   17410:	str	r1, [sp]
   17414:	add	r1, sp, #24
   17418:	ldr	r0, [r5, #36]	; 0x24
   1741c:	ldr	r8, [r5, #44]	; 0x2c
   17420:	blx	r8
   17424:	cmp	r0, #0
   17428:	bne	174a0 <flatcc_builder_create_union_vector_direct@@Base+0x15c>
   1742c:	stm	r6, {r4, r7}
   17430:	str	r4, [r5, #136]	; 0x88
   17434:	b	17444 <flatcc_builder_create_union_vector_direct@@Base+0x100>
   17438:	mov	r3, #0
   1743c:	str	r3, [r6]
   17440:	str	r3, [r6, #4]
   17444:	mov	r0, r6
   17448:	add	sp, sp, #88	; 0x58
   1744c:	ldrd	r4, [sp]
   17450:	ldrd	r6, [sp, #8]
   17454:	ldr	r8, [sp, #16]
   17458:	add	sp, sp, #20
   1745c:	pop	{pc}		; (ldr pc, [sp], #4)
   17460:	mov	lr, #2
   17464:	add	r1, r4, r1
   17468:	mov	r2, lr
   1746c:	mov	ip, #3
   17470:	str	r1, [sp, #16]
   17474:	str	lr, [sp, #20]
   17478:	str	r8, [sp, #32]
   1747c:	str	r4, [sp, #36]	; 0x24
   17480:	b	173d0 <flatcc_builder_create_union_vector_direct@@Base+0x8c>
   17484:	movw	r1, #40488	; 0x9e28
   17488:	movt	r1, #1
   1748c:	ldr	r3, [pc, #20]	; 174a8 <flatcc_builder_create_union_vector_direct@@Base+0x164>
   17490:	movw	r0, #40680	; 0x9ee8
   17494:	movt	r0, #1
   17498:	movw	r2, #647	; 0x287
   1749c:	bl	11fd4 <__assert_fail@plt>
   174a0:	bl	13318 <flatcc_builder_default_alloc@@Base+0x19c>
   174a4:	andeq	r9, r1, r0, lsl #15
   174a8:	andeq	r9, r1, r4, lsl #14

000174ac <flatcc_builder_start_union_vector@@Base>:
   174ac:	ldrd	r2, [r0, #156]	; 0x9c
   174b0:	strd	r4, [sp, #-16]!
   174b4:	mov	r4, r0
   174b8:	str	r6, [sp, #8]
   174bc:	str	lr, [sp, #12]
   174c0:	sub	sp, sp, #8
   174c4:	add	r1, r2, #1
   174c8:	cmp	r1, r3
   174cc:	str	r1, [r0, #156]	; 0x9c
   174d0:	ble	175ec <flatcc_builder_start_union_vector@@Base+0x140>
   174d4:	ldr	r3, [r0, #176]	; 0xb0
   174d8:	cmp	r3, #0
   174dc:	cmpgt	r1, r3
   174e0:	movgt	r3, #1
   174e4:	movle	r3, #0
   174e8:	bgt	175fc <flatcc_builder_start_union_vector@@Base+0x150>
   174ec:	add	r2, r2, r2, lsl #3
   174f0:	ldr	r1, [r0, #88]	; 0x58
   174f4:	lsl	r5, r2, #2
   174f8:	add	r2, r5, #36	; 0x24
   174fc:	cmp	r2, r1
   17500:	bls	17524 <flatcc_builder_start_union_vector@@Base+0x78>
   17504:	mov	ip, #4
   17508:	add	r1, r0, #84	; 0x54
   1750c:	ldr	r0, [r0, #40]	; 0x28
   17510:	str	ip, [sp]
   17514:	ldr	r6, [r4, #48]	; 0x30
   17518:	blx	r6
   1751c:	cmp	r0, #0
   17520:	bne	17604 <flatcc_builder_start_union_vector@@Base+0x158>
   17524:	ldr	r3, [r4, #84]	; 0x54
   17528:	add	r3, r3, r5
   1752c:	cmp	r3, #0
   17530:	str	r3, [r4, #32]
   17534:	beq	175fc <flatcc_builder_start_union_vector@@Base+0x150>
   17538:	ldr	r2, [r4, #88]	; 0x58
   1753c:	movw	r0, #36409	; 0x8e39
   17540:	movt	r0, #14563	; 0x38e3
   17544:	ldr	r1, [r4, #176]	; 0xb0
   17548:	umull	r0, r2, r0, r2
   1754c:	lsr	r2, r2, #3
   17550:	cmp	r1, #0
   17554:	cmpgt	r2, r1
   17558:	movgt	r2, r1
   1755c:	str	r2, [r4, #160]	; 0xa0
   17560:	ldr	r2, [r4, #20]
   17564:	mvn	r5, #3
   17568:	mov	lr, #0
   1756c:	ldr	r6, [r4, #28]
   17570:	ldrh	r0, [r4, #130]	; 0x82
   17574:	ldr	ip, [r4, #60]	; 0x3c
   17578:	ldr	r1, [r4, #64]	; 0x40
   1757c:	str	r2, [r3, #8]
   17580:	add	r2, r2, r6
   17584:	add	r2, r2, #7
   17588:	strh	r0, [r3, #12]
   1758c:	mov	r0, #4
   17590:	bic	r2, r2, #7
   17594:	add	ip, ip, r2
   17598:	strh	r0, [r4, #130]	; 0x82
   1759c:	mov	r0, lr
   175a0:	sub	r1, r1, r2
   175a4:	str	r6, [r3]
   175a8:	mov	r6, #8
   175ac:	cmp	r1, r5
   175b0:	str	lr, [r4, #20]
   175b4:	movhi	r1, r5
   175b8:	str	r2, [r4, #28]
   175bc:	mov	r2, #7
   175c0:	strh	r2, [r3, #14]
   175c4:	str	r6, [r3, #16]
   175c8:	str	lr, [r3, #20]
   175cc:	str	ip, [r4, #16]
   175d0:	str	r1, [r4, #24]
   175d4:	str	r5, [r3, #4]
   175d8:	add	sp, sp, #8
   175dc:	ldrd	r4, [sp]
   175e0:	ldr	r6, [sp, #8]
   175e4:	add	sp, sp, #12
   175e8:	pop	{pc}		; (ldr pc, [sp], #4)
   175ec:	ldr	r3, [r0, #32]
   175f0:	add	r3, r3, #36	; 0x24
   175f4:	str	r3, [r0, #32]
   175f8:	b	17560 <flatcc_builder_start_union_vector@@Base+0xb4>
   175fc:	mvn	r0, #0
   17600:	b	175d8 <flatcc_builder_start_union_vector@@Base+0x12c>
   17604:	bl	132a0 <flatcc_builder_default_alloc@@Base+0x124>

00017608 <flatcc_builder_end_union_vector@@Base>:
   17608:	ldr	r3, [r1, #32]
   1760c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17610:	ldrh	r2, [r3, #14]
   17614:	strd	r6, [sp, #8]
   17618:	strd	r8, [sp, #16]
   1761c:	str	lr, [sp, #24]
   17620:	sub	sp, sp, #12
   17624:	cmp	r2, #7
   17628:	bne	177e4 <flatcc_builder_end_union_vector@@Base+0x1dc>
   1762c:	ldr	r5, [r3, #20]
   17630:	mov	r4, r1
   17634:	mov	r6, r0
   17638:	ldr	r8, [r1, #20]
   1763c:	ldr	r3, [r1, #24]
   17640:	lsl	r7, r5, #2
   17644:	add	r2, r7, r5
   17648:	add	r2, r2, r8
   1764c:	cmp	r2, r3
   17650:	str	r2, [r1, #20]
   17654:	bcs	17764 <flatcc_builder_end_union_vector@@Base+0x15c>
   17658:	ldr	r3, [r1, #16]
   1765c:	adds	r1, r3, r8
   17660:	beq	177cc <flatcc_builder_end_union_vector@@Base+0x1c4>
   17664:	cmp	r5, #0
   17668:	add	r7, r1, r7
   1766c:	subne	r0, r7, #1
   17670:	addne	lr, r3, r5, lsl #3
   17674:	subne	r2, r1, #4
   17678:	beq	17698 <flatcc_builder_end_union_vector@@Base+0x90>
   1767c:	ldrb	ip, [r3]
   17680:	add	r3, r3, #8
   17684:	strb	ip, [r0, #1]!
   17688:	ldr	ip, [r3, #-4]
   1768c:	cmp	lr, r3
   17690:	str	ip, [r2, #4]!
   17694:	bne	1767c <flatcc_builder_end_union_vector@@Base+0x74>
   17698:	mov	r3, r7
   1769c:	mov	r2, r5
   176a0:	mov	r0, r4
   176a4:	bl	13504 <flatcc_builder_default_alloc@@Base+0x388>
   176a8:	subs	r8, r0, #0
   176ac:	beq	177dc <flatcc_builder_end_union_vector@@Base+0x1d4>
   176b0:	mvn	ip, #0
   176b4:	mov	r3, #1
   176b8:	mov	r2, r5
   176bc:	mov	r1, r7
   176c0:	mov	r0, r4
   176c4:	stm	sp, {r3, ip}
   176c8:	bl	16894 <flatcc_builder_create_vector@@Base>
   176cc:	mov	r5, r0
   176d0:	mov	r1, #0
   176d4:	ldr	r0, [r4, #16]
   176d8:	ldr	r2, [r4, #20]
   176dc:	bl	11fb0 <memset@plt>
   176e0:	ldr	r3, [r4, #32]
   176e4:	stm	r6, {r5, r8}
   176e8:	ldr	r0, [r4, #60]	; 0x3c
   176ec:	ldr	r2, [r4, #64]	; 0x40
   176f0:	ldr	ip, [r3]
   176f4:	ldmib	r3, {r1, lr}
   176f8:	add	r0, r0, ip
   176fc:	sub	r2, r2, ip
   17700:	str	r0, [r4, #16]
   17704:	cmp	r2, r1
   17708:	ldrh	r0, [r4, #128]	; 0x80
   1770c:	movcs	r2, r1
   17710:	str	lr, [r4, #20]
   17714:	str	ip, [r4, #28]
   17718:	ldrh	ip, [r4, #130]	; 0x82
   1771c:	str	r2, [r4, #24]
   17720:	ldr	r2, [r4, #156]	; 0x9c
   17724:	str	r1, [r3, #4]
   17728:	cmp	r0, ip
   1772c:	sub	r0, r3, #36	; 0x24
   17730:	strhcc	ip, [r4, #128]	; 0x80
   17734:	ldrh	r1, [r3, #12]
   17738:	sub	r3, r2, #1
   1773c:	str	r0, [r4, #32]
   17740:	strh	r1, [r4, #130]	; 0x82
   17744:	str	r3, [r4, #156]	; 0x9c
   17748:	mov	r0, r6
   1774c:	add	sp, sp, #12
   17750:	ldrd	r4, [sp]
   17754:	ldrd	r6, [sp, #8]
   17758:	ldrd	r8, [sp, #16]
   1775c:	add	sp, sp, #24
   17760:	pop	{pc}		; (ldr pc, [sp], #4)
   17764:	ldr	ip, [r4, #28]
   17768:	mov	r0, #1
   1776c:	add	r1, r1, #60	; 0x3c
   17770:	mov	r3, r0
   17774:	str	r0, [sp]
   17778:	ldr	r9, [r4, #48]	; 0x30
   1777c:	add	ip, ip, r0
   17780:	ldr	r0, [r4, #40]	; 0x28
   17784:	add	r2, ip, r2
   17788:	blx	r9
   1778c:	cmp	r0, #0
   17790:	bne	177cc <flatcc_builder_end_union_vector@@Base+0x1c4>
   17794:	ldr	r1, [r4, #28]
   17798:	ldr	r3, [r4, #60]	; 0x3c
   1779c:	ldr	r2, [r4, #64]	; 0x40
   177a0:	add	r3, r3, r1
   177a4:	sub	r2, r2, r1
   177a8:	mvn	r1, #3
   177ac:	str	r3, [r4, #16]
   177b0:	cmn	r2, #4
   177b4:	mvnhi	r2, #3
   177b8:	str	r2, [r4, #24]
   177bc:	ldr	r2, [r4, #32]
   177c0:	str	r1, [r2, #4]
   177c4:	adds	r1, r3, r8
   177c8:	bne	17664 <flatcc_builder_end_union_vector@@Base+0x5c>
   177cc:	mov	r3, #0
   177d0:	str	r3, [r6]
   177d4:	str	r3, [r6, #4]
   177d8:	b	17748 <flatcc_builder_end_union_vector@@Base+0x140>
   177dc:	mov	r5, r8
   177e0:	b	176d0 <flatcc_builder_end_union_vector@@Base+0xc8>
   177e4:	movw	r1, #40488	; 0x9e28
   177e8:	movt	r1, #1
   177ec:	ldr	r3, [pc, #12]	; 17800 <flatcc_builder_end_union_vector@@Base+0x1f8>
   177f0:	movw	r0, #41268	; 0xa134
   177f4:	movt	r0, #1
   177f8:	movw	r2, #1617	; 0x651
   177fc:	bl	11fd4 <__assert_fail@plt>
   17800:			; <UNDEFINED> instruction: 0x00019cbc

00017804 <flatcc_builder_union_vector_edit@@Base>:
   17804:	ldr	r0, [r0, #16]
   17808:	bx	lr

0001780c <flatcc_builder_union_vector_count@@Base>:
   1780c:	ldr	r3, [r0, #32]
   17810:	ldr	r0, [r3, #20]
   17814:	bx	lr

00017818 <flatcc_builder_extend_union_vector@@Base>:
   17818:	ldr	ip, [r0, #32]
   1781c:	strd	r4, [sp, #-20]!	; 0xffffffec
   17820:	mov	r4, r0
   17824:	ldr	r3, [ip, #20]
   17828:	strd	r6, [sp, #8]
   1782c:	str	lr, [sp, #16]
   17830:	sub	sp, sp, #12
   17834:	adds	r3, r1, r3
   17838:	movcs	r2, #1
   1783c:	movcc	r2, #0
   17840:	cmn	r3, #-536870911	; 0xe0000001
   17844:	movls	r0, #0
   17848:	movhi	r0, #1
   1784c:	orrs	r5, r2, r0
   17850:	bne	178f8 <flatcc_builder_extend_union_vector@@Base+0xe0>
   17854:	ldr	r6, [r4, #20]
   17858:	str	r3, [ip, #20]
   1785c:	ldr	r3, [r4, #24]
   17860:	add	r2, r6, r1, lsl #3
   17864:	cmp	r2, r3
   17868:	str	r2, [r4, #20]
   1786c:	bcs	1788c <flatcc_builder_extend_union_vector@@Base+0x74>
   17870:	ldr	r0, [r4, #16]
   17874:	add	r0, r0, r6
   17878:	add	sp, sp, #12
   1787c:	ldrd	r4, [sp]
   17880:	ldrd	r6, [sp, #8]
   17884:	add	sp, sp, #16
   17888:	pop	{pc}		; (ldr pc, [sp], #4)
   1788c:	ldr	ip, [r4, #28]
   17890:	mov	r0, #1
   17894:	add	r1, r4, #60	; 0x3c
   17898:	mov	r3, r0
   1789c:	str	r0, [sp]
   178a0:	ldr	r7, [r4, #48]	; 0x30
   178a4:	add	ip, ip, r0
   178a8:	ldr	r0, [r4, #40]	; 0x28
   178ac:	add	r2, ip, r2
   178b0:	blx	r7
   178b4:	cmp	r0, #0
   178b8:	bne	178f0 <flatcc_builder_extend_union_vector@@Base+0xd8>
   178bc:	ldr	r2, [r4, #28]
   178c0:	ldr	r0, [r4, #60]	; 0x3c
   178c4:	ldr	r3, [r4, #64]	; 0x40
   178c8:	add	r0, r0, r2
   178cc:	sub	r3, r3, r2
   178d0:	mvn	r2, #3
   178d4:	str	r0, [r4, #16]
   178d8:	cmn	r3, #4
   178dc:	mvnhi	r3, #3
   178e0:	str	r3, [r4, #24]
   178e4:	ldr	r3, [r4, #32]
   178e8:	str	r2, [r3, #4]
   178ec:	b	17874 <flatcc_builder_extend_union_vector@@Base+0x5c>
   178f0:	mov	r0, r5
   178f4:	b	17878 <flatcc_builder_extend_union_vector@@Base+0x60>
   178f8:	bl	13340 <flatcc_builder_default_alloc@@Base+0x1c4>

000178fc <flatcc_builder_truncate_union_vector@@Base>:
   178fc:	mov	r3, r0
   17900:	ldr	r0, [r0, #32]
   17904:	str	r4, [sp, #-8]!
   17908:	ldrh	r2, [r0, #14]
   1790c:	str	lr, [sp, #4]
   17910:	cmp	r2, #7
   17914:	bne	17964 <flatcc_builder_truncate_union_vector@@Base+0x68>
   17918:	mov	lr, r1
   1791c:	ldr	r1, [r0, #20]
   17920:	cmp	r1, lr
   17924:	bcc	17980 <flatcc_builder_truncate_union_vector@@Base+0x84>
   17928:	ldr	r2, [r0, #16]
   1792c:	sub	ip, r1, lr
   17930:	mov	r1, #0
   17934:	str	ip, [r0, #20]
   17938:	ldr	r0, [r3, #16]
   1793c:	ldr	ip, [r3, #20]
   17940:	mul	r2, r2, lr
   17944:	sub	ip, ip, r2
   17948:	add	r0, r0, ip
   1794c:	str	ip, [r3, #20]
   17950:	bl	11fb0 <memset@plt>
   17954:	ldr	r4, [sp]
   17958:	add	sp, sp, #4
   1795c:	mov	r0, #0
   17960:	pop	{pc}		; (ldr pc, [sp], #4)
   17964:	movw	r1, #40488	; 0x9e28
   17968:	movt	r1, #1
   1796c:	ldr	r3, [pc, #40]	; 1799c <flatcc_builder_truncate_union_vector@@Base+0xa0>
   17970:	movw	r0, #41268	; 0xa134
   17974:	movt	r0, #1
   17978:	movw	r2, #1665	; 0x681
   1797c:	bl	11fd4 <__assert_fail@plt>
   17980:	movw	r1, #40488	; 0x9e28
   17984:	movt	r1, #1
   17988:	ldr	r3, [pc, #12]	; 1799c <flatcc_builder_truncate_union_vector@@Base+0xa0>
   1798c:	movw	r0, #41048	; 0xa058
   17990:	movt	r0, #1
   17994:	movw	r2, #1666	; 0x682
   17998:	bl	11fd4 <__assert_fail@plt>
   1799c:	ldrdeq	r9, [r1], -ip

000179a0 <flatcc_builder_union_vector_push@@Base>:
   179a0:	strd	r4, [sp, #-20]!	; 0xffffffec
   179a4:	strd	r6, [sp, #8]
   179a8:	str	lr, [sp, #16]
   179ac:	sub	sp, sp, #20
   179b0:	add	r3, sp, #16
   179b4:	stmdb	r3, {r1, r2}
   179b8:	ldr	r2, [r0, #32]
   179bc:	ldrh	r3, [r2, #14]
   179c0:	cmp	r3, #7
   179c4:	bne	17a88 <flatcc_builder_union_vector_push@@Base+0xe8>
   179c8:	ldr	r3, [r2, #20]
   179cc:	cmn	r3, #-536870911	; 0xe0000001
   179d0:	beq	17a80 <flatcc_builder_union_vector_push@@Base+0xe0>
   179d4:	ldr	r5, [r0, #20]
   179d8:	add	r3, r3, #1
   179dc:	mov	r4, r0
   179e0:	ldr	r1, [r0, #24]
   179e4:	str	r3, [r2, #20]
   179e8:	add	r3, r5, #8
   179ec:	cmp	r3, r1
   179f0:	str	r3, [r0, #20]
   179f4:	bcs	17a1c <flatcc_builder_union_vector_push@@Base+0x7c>
   179f8:	ldr	r3, [r0, #16]
   179fc:	adds	r0, r3, r5
   17a00:	ldrdne	r6, [sp, #8]
   17a04:	strdne	r6, [r3, r5]
   17a08:	add	sp, sp, #20
   17a0c:	ldrd	r4, [sp]
   17a10:	ldrd	r6, [sp, #8]
   17a14:	add	sp, sp, #16
   17a18:	pop	{pc}		; (ldr pc, [sp], #4)
   17a1c:	ldr	r2, [r4, #28]
   17a20:	mov	r0, #1
   17a24:	add	r1, r4, #60	; 0x3c
   17a28:	mov	r3, r0
   17a2c:	str	r0, [sp]
   17a30:	ldr	r0, [r4, #40]	; 0x28
   17a34:	add	r2, r5, r2
   17a38:	ldr	r6, [r4, #48]	; 0x30
   17a3c:	add	r2, r2, #9
   17a40:	blx	r6
   17a44:	cmp	r0, #0
   17a48:	bne	17a80 <flatcc_builder_union_vector_push@@Base+0xe0>
   17a4c:	ldr	r1, [r4, #28]
   17a50:	ldr	r3, [r4, #60]	; 0x3c
   17a54:	ldr	r2, [r4, #64]	; 0x40
   17a58:	add	r3, r3, r1
   17a5c:	sub	r2, r2, r1
   17a60:	mvn	r1, #3
   17a64:	str	r3, [r4, #16]
   17a68:	cmn	r2, #4
   17a6c:	mvnhi	r2, #3
   17a70:	str	r2, [r4, #24]
   17a74:	ldr	r2, [r4, #32]
   17a78:	str	r1, [r2, #4]
   17a7c:	b	179fc <flatcc_builder_union_vector_push@@Base+0x5c>
   17a80:	mov	r0, #0
   17a84:	b	17a08 <flatcc_builder_union_vector_push@@Base+0x68>
   17a88:	movw	r1, #40488	; 0x9e28
   17a8c:	movt	r1, #1
   17a90:	ldr	r3, [pc, #12]	; 17aa4 <flatcc_builder_union_vector_push@@Base+0x104>
   17a94:	movw	r0, #41268	; 0xa134
   17a98:	movt	r0, #1
   17a9c:	movw	r2, #1677	; 0x68d
   17aa0:	bl	11fd4 <__assert_fail@plt>
   17aa4:	andeq	r9, r1, r4, lsl #26

00017aa8 <flatcc_builder_append_union_vector@@Base>:
   17aa8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17aac:	mov	r5, r0
   17ab0:	ldr	r0, [r0, #32]
   17ab4:	ldrh	r3, [r0, #14]
   17ab8:	strd	r6, [sp, #8]
   17abc:	strd	r8, [sp, #16]
   17ac0:	str	lr, [sp, #24]
   17ac4:	sub	sp, sp, #12
   17ac8:	cmp	r3, #7
   17acc:	bne	17bc4 <flatcc_builder_append_union_vector@@Base+0x11c>
   17ad0:	ldr	r3, [r0, #20]
   17ad4:	mov	r7, r1
   17ad8:	adds	r1, r2, r3
   17adc:	movcs	r4, #1
   17ae0:	movcc	r4, #0
   17ae4:	cmn	r1, #-536870911	; 0xe0000001
   17ae8:	movls	r3, #0
   17aec:	movhi	r3, #1
   17af0:	orrs	r4, r4, r3
   17af4:	bne	17bc0 <flatcc_builder_append_union_vector@@Base+0x118>
   17af8:	ldr	r8, [r5, #20]
   17afc:	lsl	r6, r2, #3
   17b00:	ldr	r3, [r5, #24]
   17b04:	str	r1, [r0, #20]
   17b08:	add	ip, r6, r8
   17b0c:	cmp	ip, r3
   17b10:	str	ip, [r5, #20]
   17b14:	bcs	17b54 <flatcc_builder_append_union_vector@@Base+0xac>
   17b18:	ldr	r3, [r5, #16]
   17b1c:	adds	r3, r3, r8
   17b20:	beq	17b38 <flatcc_builder_append_union_vector@@Base+0x90>
   17b24:	mov	r0, r3
   17b28:	mov	r2, r6
   17b2c:	mov	r1, r7
   17b30:	bl	11f44 <memcpy@plt>
   17b34:	mov	r3, r0
   17b38:	mov	r0, r3
   17b3c:	add	sp, sp, #12
   17b40:	ldrd	r4, [sp]
   17b44:	ldrd	r6, [sp, #8]
   17b48:	ldrd	r8, [sp, #16]
   17b4c:	add	sp, sp, #24
   17b50:	pop	{pc}		; (ldr pc, [sp], #4)
   17b54:	ldr	r2, [r5, #28]
   17b58:	mov	r0, #1
   17b5c:	add	r1, r5, #60	; 0x3c
   17b60:	mov	r3, r0
   17b64:	str	r0, [sp]
   17b68:	ldr	r9, [r5, #48]	; 0x30
   17b6c:	add	r2, r2, r0
   17b70:	ldr	r0, [r5, #40]	; 0x28
   17b74:	add	r2, r2, ip
   17b78:	blx	r9
   17b7c:	cmp	r0, #0
   17b80:	bne	17bb8 <flatcc_builder_append_union_vector@@Base+0x110>
   17b84:	ldr	r1, [r5, #28]
   17b88:	ldr	r3, [r5, #60]	; 0x3c
   17b8c:	ldr	r2, [r5, #64]	; 0x40
   17b90:	add	r3, r3, r1
   17b94:	sub	r2, r2, r1
   17b98:	mvn	r1, #3
   17b9c:	str	r3, [r5, #16]
   17ba0:	cmn	r2, #4
   17ba4:	mvnhi	r2, #3
   17ba8:	str	r2, [r5, #24]
   17bac:	ldr	r2, [r5, #32]
   17bb0:	str	r1, [r2, #4]
   17bb4:	b	17b1c <flatcc_builder_append_union_vector@@Base+0x74>
   17bb8:	mov	r3, r4
   17bbc:	b	17b38 <flatcc_builder_append_union_vector@@Base+0x90>
   17bc0:	bl	13340 <flatcc_builder_default_alloc@@Base+0x1c4>
   17bc4:	movw	r1, #40488	; 0x9e28
   17bc8:	movt	r1, #1
   17bcc:	ldr	r3, [pc, #12]	; 17be0 <flatcc_builder_append_union_vector@@Base+0x138>
   17bd0:	movw	r0, #41268	; 0xa134
   17bd4:	movt	r0, #1
   17bd8:	movw	r2, #1692	; 0x69c
   17bdc:	bl	11fd4 <__assert_fail@plt>
   17be0:	andeq	r9, r1, r8, lsr #26

00017be4 <flatcc_builder_create_string@@Base>:
   17be4:	strd	r4, [sp, #-16]!
   17be8:	mov	r4, r0
   17bec:	mov	ip, #4
   17bf0:	str	r6, [sp, #8]
   17bf4:	cmp	r2, #0
   17bf8:	str	lr, [sp, #12]
   17bfc:	sub	sp, sp, #88	; 0x58
   17c00:	moveq	r6, #2
   17c04:	ldr	lr, [r0, #136]	; 0x88
   17c08:	add	r3, sp, #12
   17c0c:	str	r2, [sp, #12]
   17c10:	str	r3, [sp, #24]
   17c14:	mov	r3, #1
   17c18:	moveq	r1, r3
   17c1c:	str	ip, [sp, #28]
   17c20:	sub	r0, lr, r2
   17c24:	sub	r0, r0, #1
   17c28:	and	r0, r0, #3
   17c2c:	add	r0, r0, r3
   17c30:	beq	17c48 <flatcc_builder_create_string@@Base+0x64>
   17c34:	add	ip, r2, ip
   17c38:	mov	r6, #3
   17c3c:	str	r1, [sp, #32]
   17c40:	mov	r1, #2
   17c44:	str	r2, [sp, #36]	; 0x24
   17c48:	ldr	r3, [pc, #136]	; 17cd8 <flatcc_builder_create_string@@Base+0xf4>
   17c4c:	add	r1, r1, #1
   17c50:	add	r2, sp, #88	; 0x58
   17c54:	add	ip, r0, ip
   17c58:	add	r1, r2, r1, lsl #3
   17c5c:	sub	r5, lr, ip
   17c60:	cmp	lr, r5
   17c64:	str	ip, [sp, #16]
   17c68:	str	r6, [sp, #20]
   17c6c:	str	r3, [r1, #-72]	; 0xffffffb8
   17c70:	str	r0, [r1, #-68]	; 0xffffffbc
   17c74:	ble	17cb8 <flatcc_builder_create_string@@Base+0xd4>
   17c78:	mov	r2, r6
   17c7c:	mov	r3, r5
   17c80:	str	ip, [sp]
   17c84:	add	r1, sp, #24
   17c88:	ldr	r0, [r4, #36]	; 0x24
   17c8c:	ldr	r6, [r4, #44]	; 0x2c
   17c90:	blx	r6
   17c94:	cmp	r0, #0
   17c98:	bne	17cd4 <flatcc_builder_create_string@@Base+0xf0>
   17c9c:	mov	r0, r5
   17ca0:	str	r5, [r4, #136]	; 0x88
   17ca4:	add	sp, sp, #88	; 0x58
   17ca8:	ldrd	r4, [sp]
   17cac:	ldr	r6, [sp, #8]
   17cb0:	add	sp, sp, #12
   17cb4:	pop	{pc}		; (ldr pc, [sp], #4)
   17cb8:	movw	r1, #40488	; 0x9e28
   17cbc:	movt	r1, #1
   17cc0:	movw	r0, #40680	; 0x9ee8
   17cc4:	movt	r0, #1
   17cc8:	sub	r3, r3, #124	; 0x7c
   17ccc:	movw	r2, #647	; 0x287
   17cd0:	bl	11fd4 <__assert_fail@plt>
   17cd4:	bl	13318 <flatcc_builder_default_alloc@@Base+0x19c>
   17cd8:	andeq	r9, r1, r0, lsl #15

00017cdc <flatcc_builder_create_string_str@@Base>:
   17cdc:	strd	r4, [sp, #-16]!
   17ce0:	mov	r4, r0
   17ce4:	mov	r0, r1
   17ce8:	str	r6, [sp, #8]
   17cec:	mov	r6, r1
   17cf0:	str	lr, [sp, #12]
   17cf4:	sub	sp, sp, #88	; 0x58
   17cf8:	bl	11f98 <strlen@plt>
   17cfc:	ldr	r5, [r4, #136]	; 0x88
   17d00:	mov	r2, #4
   17d04:	add	r1, sp, #12
   17d08:	mov	r3, #1
   17d0c:	cmp	r0, #0
   17d10:	str	r0, [sp, #12]
   17d14:	str	r1, [sp, #24]
   17d18:	str	r2, [sp, #28]
   17d1c:	sub	ip, r5, #1
   17d20:	sub	ip, ip, r0
   17d24:	and	ip, ip, #3
   17d28:	add	ip, ip, r3
   17d2c:	beq	17db0 <flatcc_builder_create_string_str@@Base+0xd4>
   17d30:	add	lr, r0, r2
   17d34:	mov	r1, #2
   17d38:	str	r6, [sp, #32]
   17d3c:	mov	r2, #3
   17d40:	str	r0, [sp, #36]	; 0x24
   17d44:	ldr	r3, [pc, #148]	; 17de0 <flatcc_builder_create_string_str@@Base+0x104>
   17d48:	add	r0, ip, lr
   17d4c:	add	r1, r1, #1
   17d50:	add	lr, sp, #88	; 0x58
   17d54:	sub	r6, r5, r0
   17d58:	add	r1, lr, r1, lsl #3
   17d5c:	cmp	r5, r6
   17d60:	str	r0, [sp, #16]
   17d64:	str	r2, [sp, #20]
   17d68:	str	r3, [r1, #-72]	; 0xffffffb8
   17d6c:	str	ip, [r1, #-68]	; 0xffffffbc
   17d70:	ble	17dc0 <flatcc_builder_create_string_str@@Base+0xe4>
   17d74:	mov	r3, r6
   17d78:	add	r1, sp, #24
   17d7c:	str	r0, [sp]
   17d80:	ldr	r0, [r4, #36]	; 0x24
   17d84:	ldr	r5, [r4, #44]	; 0x2c
   17d88:	blx	r5
   17d8c:	cmp	r0, #0
   17d90:	bne	17ddc <flatcc_builder_create_string_str@@Base+0x100>
   17d94:	mov	r0, r6
   17d98:	str	r6, [r4, #136]	; 0x88
   17d9c:	add	sp, sp, #88	; 0x58
   17da0:	ldrd	r4, [sp]
   17da4:	ldr	r6, [sp, #8]
   17da8:	add	sp, sp, #12
   17dac:	pop	{pc}		; (ldr pc, [sp], #4)
   17db0:	mov	lr, r2
   17db4:	mov	r1, r3
   17db8:	mov	r2, #2
   17dbc:	b	17d44 <flatcc_builder_create_string_str@@Base+0x68>
   17dc0:	movw	r1, #40488	; 0x9e28
   17dc4:	movt	r1, #1
   17dc8:	movw	r0, #40680	; 0x9ee8
   17dcc:	movt	r0, #1
   17dd0:	sub	r3, r3, #124	; 0x7c
   17dd4:	movw	r2, #647	; 0x287
   17dd8:	bl	11fd4 <__assert_fail@plt>
   17ddc:	bl	13318 <flatcc_builder_default_alloc@@Base+0x19c>
   17de0:	andeq	r9, r1, r0, lsl #15

00017de4 <flatcc_builder_create_string_strn@@Base>:
   17de4:	strd	r4, [sp, #-16]!
   17de8:	mov	r4, r0
   17dec:	mov	r5, r2
   17df0:	str	r6, [sp, #8]
   17df4:	mov	r6, r1
   17df8:	mov	r1, #0
   17dfc:	mov	r0, r6
   17e00:	str	lr, [sp, #12]
   17e04:	sub	sp, sp, #88	; 0x58
   17e08:	bl	11fbc <memchr@plt>
   17e0c:	ldr	lr, [r4, #136]	; 0x88
   17e10:	cmp	r0, #0
   17e14:	mov	ip, #4
   17e18:	subne	r5, r0, r6
   17e1c:	add	r3, sp, #12
   17e20:	cmp	r5, #0
   17e24:	mov	r0, #1
   17e28:	moveq	r2, #2
   17e2c:	str	r5, [sp, #12]
   17e30:	str	r3, [sp, #24]
   17e34:	sub	r1, lr, #1
   17e38:	str	ip, [sp, #28]
   17e3c:	sub	r1, r1, r5
   17e40:	and	r1, r1, #3
   17e44:	add	r1, r1, r0
   17e48:	beq	17e60 <flatcc_builder_create_string_strn@@Base+0x7c>
   17e4c:	add	ip, r5, ip
   17e50:	mov	r2, #3
   17e54:	str	r6, [sp, #32]
   17e58:	mov	r0, #2
   17e5c:	str	r5, [sp, #36]	; 0x24
   17e60:	ldr	r3, [pc, #132]	; 17eec <flatcc_builder_create_string_strn@@Base+0x108>
   17e64:	add	r5, sp, #88	; 0x58
   17e68:	add	r0, r0, #1
   17e6c:	add	r0, r5, r0, lsl #3
   17e70:	add	ip, r1, ip
   17e74:	sub	r5, lr, ip
   17e78:	cmp	lr, r5
   17e7c:	str	ip, [sp, #16]
   17e80:	str	r2, [sp, #20]
   17e84:	str	r3, [r0, #-72]	; 0xffffffb8
   17e88:	str	r1, [r0, #-68]	; 0xffffffbc
   17e8c:	ble	17ecc <flatcc_builder_create_string_strn@@Base+0xe8>
   17e90:	mov	r3, r5
   17e94:	add	r1, sp, #24
   17e98:	str	ip, [sp]
   17e9c:	ldr	r0, [r4, #36]	; 0x24
   17ea0:	ldr	r6, [r4, #44]	; 0x2c
   17ea4:	blx	r6
   17ea8:	cmp	r0, #0
   17eac:	bne	17ee8 <flatcc_builder_create_string_strn@@Base+0x104>
   17eb0:	mov	r0, r5
   17eb4:	str	r5, [r4, #136]	; 0x88
   17eb8:	add	sp, sp, #88	; 0x58
   17ebc:	ldrd	r4, [sp]
   17ec0:	ldr	r6, [sp, #8]
   17ec4:	add	sp, sp, #12
   17ec8:	pop	{pc}		; (ldr pc, [sp], #4)
   17ecc:	movw	r1, #40488	; 0x9e28
   17ed0:	movt	r1, #1
   17ed4:	movw	r0, #40680	; 0x9ee8
   17ed8:	movt	r0, #1
   17edc:	sub	r3, r3, #124	; 0x7c
   17ee0:	movw	r2, #647	; 0x287
   17ee4:	bl	11fd4 <__assert_fail@plt>
   17ee8:	bl	13318 <flatcc_builder_default_alloc@@Base+0x19c>
   17eec:	andeq	r9, r1, r0, lsl #15

00017ef0 <flatcc_builder_end_string@@Base>:
   17ef0:	ldr	r3, [r0, #32]
   17ef4:	strd	r4, [sp, #-16]!
   17ef8:	ldrh	r2, [r3, #14]
   17efc:	str	r6, [sp, #8]
   17f00:	str	lr, [sp, #12]
   17f04:	sub	sp, sp, #88	; 0x58
   17f08:	cmp	r2, #6
   17f0c:	bne	18094 <flatcc_builder_end_string@@Base+0x1a4>
   17f10:	ldr	r3, [r3, #20]
   17f14:	mov	r4, r0
   17f18:	ldr	r2, [r0, #20]
   17f1c:	cmp	r3, r2
   17f20:	bne	18078 <flatcc_builder_end_string@@Base+0x188>
   17f24:	ldr	lr, [r4, #136]	; 0x88
   17f28:	add	r2, sp, #12
   17f2c:	mov	ip, #4
   17f30:	cmp	r3, #0
   17f34:	mov	r0, #1
   17f38:	str	r3, [sp, #12]
   17f3c:	str	r2, [sp, #24]
   17f40:	str	ip, [sp, #28]
   17f44:	ldr	r2, [r4, #16]
   17f48:	moveq	r2, #2
   17f4c:	sub	r1, lr, r3
   17f50:	sub	r1, r1, #1
   17f54:	and	r1, r1, #3
   17f58:	add	r1, r1, r0
   17f5c:	bne	18044 <flatcc_builder_end_string@@Base+0x154>
   17f60:	ldr	r3, [pc, #328]	; 180b0 <flatcc_builder_end_string@@Base+0x1c0>
   17f64:	add	r5, sp, #88	; 0x58
   17f68:	add	r0, r0, #1
   17f6c:	add	r0, r5, r0, lsl #3
   17f70:	add	ip, r1, ip
   17f74:	sub	r5, lr, ip
   17f78:	cmp	lr, r5
   17f7c:	str	ip, [sp, #16]
   17f80:	str	r2, [sp, #20]
   17f84:	str	r3, [r0, #-72]	; 0xffffffb8
   17f88:	str	r1, [r0, #-68]	; 0xffffffbc
   17f8c:	ble	1805c <flatcc_builder_end_string@@Base+0x16c>
   17f90:	add	r1, sp, #24
   17f94:	mov	r3, r5
   17f98:	str	ip, [sp]
   17f9c:	ldr	r0, [r4, #36]	; 0x24
   17fa0:	ldr	r6, [r4, #44]	; 0x2c
   17fa4:	blx	r6
   17fa8:	subs	r1, r0, #0
   17fac:	bne	18058 <flatcc_builder_end_string@@Base+0x168>
   17fb0:	cmp	r5, #0
   17fb4:	str	r5, [r4, #136]	; 0x88
   17fb8:	beq	1802c <flatcc_builder_end_string@@Base+0x13c>
   17fbc:	ldr	r0, [r4, #16]
   17fc0:	ldr	r2, [r4, #20]
   17fc4:	bl	11fb0 <memset@plt>
   17fc8:	ldr	r3, [r4, #32]
   17fcc:	ldr	r0, [r4, #60]	; 0x3c
   17fd0:	ldr	r2, [r4, #64]	; 0x40
   17fd4:	ldr	ip, [r3]
   17fd8:	ldmib	r3, {r1, lr}
   17fdc:	add	r0, r0, ip
   17fe0:	sub	r2, r2, ip
   17fe4:	str	r0, [r4, #16]
   17fe8:	cmp	r2, r1
   17fec:	ldrh	r0, [r4, #128]	; 0x80
   17ff0:	movcs	r2, r1
   17ff4:	str	lr, [r4, #20]
   17ff8:	str	ip, [r4, #28]
   17ffc:	ldrh	ip, [r4, #130]	; 0x82
   18000:	str	r2, [r4, #24]
   18004:	ldr	r2, [r4, #156]	; 0x9c
   18008:	str	r1, [r3, #4]
   1800c:	cmp	r0, ip
   18010:	sub	r0, r3, #36	; 0x24
   18014:	strhcc	ip, [r4, #128]	; 0x80
   18018:	ldrh	r1, [r3, #12]
   1801c:	sub	r3, r2, #1
   18020:	str	r0, [r4, #32]
   18024:	strh	r1, [r4, #130]	; 0x82
   18028:	str	r3, [r4, #156]	; 0x9c
   1802c:	mov	r0, r5
   18030:	add	sp, sp, #88	; 0x58
   18034:	ldrd	r4, [sp]
   18038:	ldr	r6, [sp, #8]
   1803c:	add	sp, sp, #12
   18040:	pop	{pc}		; (ldr pc, [sp], #4)
   18044:	add	ip, r3, ip
   18048:	mov	r0, #2
   1804c:	strd	r2, [sp, #32]
   18050:	mov	r2, #3
   18054:	b	17f60 <flatcc_builder_end_string@@Base+0x70>
   18058:	bl	13318 <flatcc_builder_default_alloc@@Base+0x19c>
   1805c:	movw	r1, #40488	; 0x9e28
   18060:	movt	r1, #1
   18064:	movw	r0, #40680	; 0x9ee8
   18068:	movt	r0, #1
   1806c:	sub	r3, r3, #124	; 0x7c
   18070:	movw	r2, #647	; 0x287
   18074:	bl	11fd4 <__assert_fail@plt>
   18078:	movw	r1, #40488	; 0x9e28
   1807c:	movt	r1, #1
   18080:	ldr	r3, [pc, #44]	; 180b4 <flatcc_builder_end_string@@Base+0x1c4>
   18084:	movw	r0, #41320	; 0xa168
   18088:	movt	r0, #1
   1808c:	movw	r2, #1733	; 0x6c5
   18090:	bl	11fd4 <__assert_fail@plt>
   18094:	movw	r1, #40488	; 0x9e28
   18098:	movt	r1, #1
   1809c:	ldr	r3, [pc, #16]	; 180b4 <flatcc_builder_end_string@@Base+0x1c4>
   180a0:	movw	r0, #40616	; 0x9ea8
   180a4:	movt	r0, #1
   180a8:	movw	r2, #1732	; 0x6c4
   180ac:	bl	11fd4 <__assert_fail@plt>
   180b0:	andeq	r9, r1, r0, lsl #15
   180b4:	andeq	r9, r1, ip, asr #26

000180b8 <flatcc_builder_string_edit@@Base>:
   180b8:	ldr	r0, [r0, #16]
   180bc:	bx	lr

000180c0 <flatcc_builder_string_len@@Base>:
   180c0:	ldr	r3, [r0, #32]
   180c4:	ldr	r0, [r3, #20]
   180c8:	bx	lr

000180cc <flatcc_builder_table_add@@Base>:
   180cc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   180d0:	mov	r4, r0
   180d4:	ldr	r0, [r0, #32]
   180d8:	ldrh	r0, [r0, #14]
   180dc:	strd	r6, [sp, #8]
   180e0:	strd	r8, [sp, #16]
   180e4:	str	lr, [sp, #24]
   180e8:	sub	sp, sp, #12
   180ec:	cmp	r0, #3
   180f0:	bne	18254 <flatcc_builder_table_add@@Base+0x188>
   180f4:	movw	r0, #32764	; 0x7ffc
   180f8:	cmp	r1, r0
   180fc:	bhi	18238 <flatcc_builder_table_add@@Base+0x16c>
   18100:	ldrh	r0, [r4, #130]	; 0x82
   18104:	lsl	r7, r1, #1
   18108:	ldr	ip, [r4, #4]
   1810c:	cmp	r0, r3
   18110:	strhcc	r3, [r4, #130]	; 0x82
   18114:	ldrh	r5, [ip, r7]
   18118:	add	ip, ip, r7
   1811c:	cmp	r5, #0
   18120:	bne	1821c <flatcc_builder_table_add@@Base+0x150>
   18124:	ldr	r9, [r4, #12]
   18128:	movw	lr, #31153	; 0x79b1
   1812c:	movt	lr, #40503	; 0x9e37
   18130:	uxth	r6, r1
   18134:	sub	r8, r3, #1
   18138:	ldr	r0, [r4, #20]
   1813c:	rsb	r3, r3, #0
   18140:	eor	r1, r1, r9
   18144:	mul	r1, lr, r1
   18148:	add	r8, r8, r0
   1814c:	ldr	r0, [r4, #24]
   18150:	and	r8, r8, r3
   18154:	eor	r1, r1, r2
   18158:	add	r2, r2, r8
   1815c:	mul	r1, lr, r1
   18160:	cmp	r2, r0
   18164:	str	r1, [r4, #12]
   18168:	str	r2, [r4, #20]
   1816c:	bcs	181a8 <flatcc_builder_table_add@@Base+0xdc>
   18170:	ldr	r0, [r4, #16]
   18174:	add	r3, r8, #4
   18178:	add	r0, r0, r8
   1817c:	strh	r3, [ip]
   18180:	ldrh	r3, [r4, #8]
   18184:	cmp	r3, r6
   18188:	addls	r6, r6, #1
   1818c:	strhls	r6, [r4, #8]
   18190:	add	sp, sp, #12
   18194:	ldrd	r4, [sp]
   18198:	ldrd	r6, [sp, #8]
   1819c:	ldrd	r8, [sp, #16]
   181a0:	add	sp, sp, #24
   181a4:	pop	{pc}		; (ldr pc, [sp], #4)
   181a8:	ldr	ip, [r4, #28]
   181ac:	mov	r0, #1
   181b0:	add	r1, r4, #60	; 0x3c
   181b4:	mov	r3, r0
   181b8:	str	r0, [sp]
   181bc:	ldr	r9, [r4, #48]	; 0x30
   181c0:	add	ip, ip, r0
   181c4:	ldr	r0, [r4, #40]	; 0x28
   181c8:	add	r2, ip, r2
   181cc:	blx	r9
   181d0:	cmp	r0, #0
   181d4:	bne	18214 <flatcc_builder_table_add@@Base+0x148>
   181d8:	ldr	ip, [r4, #4]
   181dc:	movw	r2, #65532	; 0xfffc
   181e0:	ldr	r5, [r4, #28]
   181e4:	ldr	r3, [r4, #64]	; 0x40
   181e8:	add	ip, ip, r7
   181ec:	ldr	r0, [r4, #60]	; 0x3c
   181f0:	ldr	r1, [r4, #32]
   181f4:	sub	r3, r3, r5
   181f8:	cmp	r3, r2
   181fc:	add	r0, r0, r5
   18200:	movcs	r3, r2
   18204:	str	r0, [r4, #16]
   18208:	str	r3, [r4, #24]
   1820c:	str	r2, [r1, #4]
   18210:	b	18174 <flatcc_builder_table_add@@Base+0xa8>
   18214:	mov	r0, r5
   18218:	b	18190 <flatcc_builder_table_add@@Base+0xc4>
   1821c:	movw	r1, #40488	; 0x9e28
   18220:	movt	r1, #1
   18224:	ldr	r3, [pc, #68]	; 18270 <flatcc_builder_table_add@@Base+0x1a4>
   18228:	movw	r0, #40680	; 0x9ee8
   1822c:	movt	r0, #1
   18230:	movw	r2, #1784	; 0x6f8
   18234:	bl	11fd4 <__assert_fail@plt>
   18238:	movw	r1, #40488	; 0x9e28
   1823c:	movt	r1, #1
   18240:	ldr	r3, [pc, #40]	; 18270 <flatcc_builder_table_add@@Base+0x1a4>
   18244:	movw	r0, #41356	; 0xa18c
   18248:	movt	r0, #1
   1824c:	movw	r2, #1774	; 0x6ee
   18250:	bl	11fd4 <__assert_fail@plt>
   18254:	movw	r1, #40488	; 0x9e28
   18258:	movt	r1, #1
   1825c:	ldr	r3, [pc, #12]	; 18270 <flatcc_builder_table_add@@Base+0x1a4>
   18260:	movw	r0, #41204	; 0xa0f4
   18264:	movt	r0, #1
   18268:	movw	r2, #1773	; 0x6ed
   1826c:	bl	11fd4 <__assert_fail@plt>
   18270:	andeq	r9, r1, r8, ror #26

00018274 <flatcc_builder_table_edit@@Base>:
   18274:	ldr	r2, [r0, #32]
   18278:	ldrh	r2, [r2, #14]
   1827c:	cmp	r2, #3
   18280:	bne	18298 <flatcc_builder_table_edit@@Base+0x24>
   18284:	ldr	r3, [r0, #20]
   18288:	ldr	r0, [r0, #16]
   1828c:	sub	r3, r3, r1
   18290:	add	r0, r0, r3
   18294:	bx	lr
   18298:	movw	r1, #40488	; 0x9e28
   1829c:	movt	r1, #1
   182a0:	ldr	r3, [pc, #20]	; 182bc <flatcc_builder_table_edit@@Base+0x48>
   182a4:	movw	r0, #41204	; 0xa0f4
   182a8:	movt	r0, #1
   182ac:	str	r4, [sp, #-8]!
   182b0:	movw	r2, #1794	; 0x702
   182b4:	str	lr, [sp, #4]
   182b8:	bl	11fd4 <__assert_fail@plt>
   182bc:	andeq	r9, r1, r4, lsl #27

000182c0 <flatcc_builder_table_add_copy@@Base>:
   182c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   182c4:	mov	r5, r3
   182c8:	ldr	r3, [r0, #32]
   182cc:	ldrh	r3, [r3, #14]
   182d0:	strd	r6, [sp, #8]
   182d4:	strd	r8, [sp, #16]
   182d8:	strd	sl, [sp, #24]
   182dc:	str	lr, [sp, #32]
   182e0:	sub	sp, sp, #12
   182e4:	cmp	r3, #3
   182e8:	ldrh	ip, [sp, #48]	; 0x30
   182ec:	bne	18478 <flatcc_builder_table_add_copy@@Base+0x1b8>
   182f0:	movw	r3, #32764	; 0x7ffc
   182f4:	cmp	r1, r3
   182f8:	bhi	1845c <flatcc_builder_table_add_copy@@Base+0x19c>
   182fc:	ldrh	r3, [r0, #130]	; 0x82
   18300:	mov	r7, r2
   18304:	lsl	r8, r1, #1
   18308:	mov	r4, r0
   1830c:	ldr	r2, [r0, #4]
   18310:	cmp	r3, ip
   18314:	strhcc	ip, [r0, #130]	; 0x82
   18318:	ldrh	r9, [r2, r8]
   1831c:	add	r2, r2, r8
   18320:	cmp	r9, #0
   18324:	bne	18440 <flatcc_builder_table_add_copy@@Base+0x180>
   18328:	ldr	lr, [r4, #12]
   1832c:	movw	r0, #31153	; 0x79b1
   18330:	movt	r0, #40503	; 0x9e37
   18334:	uxth	r6, r1
   18338:	sub	r3, ip, #1
   1833c:	ldr	sl, [r4, #20]
   18340:	rsb	ip, ip, #0
   18344:	eor	r1, r1, lr
   18348:	ldr	lr, [r4, #24]
   1834c:	mul	r1, r0, r1
   18350:	add	r3, r3, sl
   18354:	and	sl, r3, ip
   18358:	add	ip, r5, sl
   1835c:	eor	r1, r1, r5
   18360:	cmp	ip, lr
   18364:	str	ip, [r4, #20]
   18368:	mul	r1, r0, r1
   1836c:	str	r1, [r4, #12]
   18370:	bcs	183cc <flatcc_builder_table_add_copy@@Base+0x10c>
   18374:	ldr	r3, [r4, #16]
   18378:	add	r1, sl, #4
   1837c:	strh	r1, [r2]
   18380:	ldrh	r2, [r4, #8]
   18384:	cmp	r2, r6
   18388:	addls	r6, r6, #1
   1838c:	strhls	r6, [r4, #8]
   18390:	adds	r3, r3, sl
   18394:	beq	183ac <flatcc_builder_table_add_copy@@Base+0xec>
   18398:	mov	r0, r3
   1839c:	mov	r2, r5
   183a0:	mov	r1, r7
   183a4:	bl	11f44 <memcpy@plt>
   183a8:	mov	r3, r0
   183ac:	mov	r0, r3
   183b0:	add	sp, sp, #12
   183b4:	ldrd	r4, [sp]
   183b8:	ldrd	r6, [sp, #8]
   183bc:	ldrd	r8, [sp, #16]
   183c0:	ldrd	sl, [sp, #24]
   183c4:	add	sp, sp, #32
   183c8:	pop	{pc}		; (ldr pc, [sp], #4)
   183cc:	ldr	r2, [r4, #28]
   183d0:	mov	r0, #1
   183d4:	add	r1, r4, #60	; 0x3c
   183d8:	mov	r3, r0
   183dc:	str	r0, [sp]
   183e0:	ldr	fp, [r4, #48]	; 0x30
   183e4:	add	r2, r2, r0
   183e8:	ldr	r0, [r4, #40]	; 0x28
   183ec:	add	r2, r2, ip
   183f0:	blx	fp
   183f4:	cmp	r0, #0
   183f8:	bne	18438 <flatcc_builder_table_add_copy@@Base+0x178>
   183fc:	ldr	r2, [r4, #4]
   18400:	movw	r0, #65532	; 0xfffc
   18404:	ldr	r3, [r4, #28]
   18408:	ldr	r1, [r4, #64]	; 0x40
   1840c:	add	r2, r2, r8
   18410:	ldr	lr, [r4, #60]	; 0x3c
   18414:	ldr	ip, [r4, #32]
   18418:	sub	r1, r1, r3
   1841c:	cmp	r1, r0
   18420:	add	r3, lr, r3
   18424:	movcs	r1, r0
   18428:	str	r3, [r4, #16]
   1842c:	str	r1, [r4, #24]
   18430:	str	r0, [ip, #4]
   18434:	b	18378 <flatcc_builder_table_add_copy@@Base+0xb8>
   18438:	mov	r3, r9
   1843c:	b	183ac <flatcc_builder_table_add_copy@@Base+0xec>
   18440:	movw	r1, #40488	; 0x9e28
   18444:	movt	r1, #1
   18448:	ldr	r3, [pc, #68]	; 18494 <flatcc_builder_table_add_copy@@Base+0x1d4>
   1844c:	movw	r0, #40680	; 0x9ee8
   18450:	movt	r0, #1
   18454:	movw	r2, #1784	; 0x6f8
   18458:	bl	11fd4 <__assert_fail@plt>
   1845c:	movw	r1, #40488	; 0x9e28
   18460:	movt	r1, #1
   18464:	ldr	r3, [pc, #40]	; 18494 <flatcc_builder_table_add_copy@@Base+0x1d4>
   18468:	movw	r0, #41356	; 0xa18c
   1846c:	movt	r0, #1
   18470:	movw	r2, #1774	; 0x6ee
   18474:	bl	11fd4 <__assert_fail@plt>
   18478:	movw	r1, #40488	; 0x9e28
   1847c:	movt	r1, #1
   18480:	ldr	r3, [pc, #12]	; 18494 <flatcc_builder_table_add_copy@@Base+0x1d4>
   18484:	movw	r0, #41204	; 0xa0f4
   18488:	movt	r0, #1
   1848c:	movw	r2, #1773	; 0x6ed
   18490:	bl	11fd4 <__assert_fail@plt>
   18494:	andeq	r9, r1, r8, ror #26

00018498 <flatcc_builder_table_add_offset@@Base>:
   18498:	ldr	r3, [r0, #32]
   1849c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   184a0:	ldrh	r3, [r3, #14]
   184a4:	strd	r6, [sp, #8]
   184a8:	strd	r8, [sp, #16]
   184ac:	str	lr, [sp, #24]
   184b0:	sub	sp, sp, #12
   184b4:	cmp	r3, #3
   184b8:	bne	18618 <flatcc_builder_table_add_offset@@Base+0x180>
   184bc:	movw	r3, #32764	; 0x7ffc
   184c0:	cmp	r1, r3
   184c4:	bhi	185fc <flatcc_builder_table_add_offset@@Base+0x164>
   184c8:	ldr	ip, [r0, #4]
   184cc:	lsl	r7, r1, #1
   184d0:	mov	r4, r0
   184d4:	ldrh	r5, [ip, r7]
   184d8:	add	ip, ip, r7
   184dc:	cmp	r5, #0
   184e0:	bne	185e0 <flatcc_builder_table_add_offset@@Base+0x148>
   184e4:	ldr	r2, [r0, #12]
   184e8:	movw	r3, #31153	; 0x79b1
   184ec:	movt	r3, #40503	; 0x9e37
   184f0:	uxth	r6, r1
   184f4:	ldr	r8, [r0, #20]
   184f8:	ldr	r0, [r0, #24]
   184fc:	eor	r1, r1, r2
   18500:	mul	r1, r3, r1
   18504:	add	r8, r8, #3
   18508:	bic	r8, r8, #3
   1850c:	add	r2, r8, #4
   18510:	eor	r1, r1, #4
   18514:	cmp	r2, r0
   18518:	str	r2, [r4, #20]
   1851c:	mul	r1, r3, r1
   18520:	str	r1, [r4, #12]
   18524:	bhi	18574 <flatcc_builder_table_add_offset@@Base+0xdc>
   18528:	ldr	r0, [r4, #16]
   1852c:	uxth	r2, r8
   18530:	add	r0, r0, r8
   18534:	add	r3, r2, #4
   18538:	strh	r3, [ip]
   1853c:	ldrh	r3, [r4, #8]
   18540:	cmp	r3, r6
   18544:	ldr	r3, [r4]
   18548:	addls	r6, r6, #1
   1854c:	strhls	r6, [r4, #8]
   18550:	add	r1, r3, #2
   18554:	str	r1, [r4]
   18558:	strh	r2, [r3]
   1855c:	add	sp, sp, #12
   18560:	ldrd	r4, [sp]
   18564:	ldrd	r6, [sp, #8]
   18568:	ldrd	r8, [sp, #16]
   1856c:	add	sp, sp, #24
   18570:	pop	{pc}		; (ldr pc, [sp], #4)
   18574:	ldr	ip, [r4, #28]
   18578:	mov	r0, #1
   1857c:	add	r1, r4, #60	; 0x3c
   18580:	mov	r3, r0
   18584:	str	r0, [sp]
   18588:	ldr	r0, [r4, #40]	; 0x28
   1858c:	add	r2, r2, ip
   18590:	ldr	r9, [r4, #48]	; 0x30
   18594:	blx	r9
   18598:	cmp	r0, #0
   1859c:	bne	185d8 <flatcc_builder_table_add_offset@@Base+0x140>
   185a0:	ldr	ip, [r4, #4]
   185a4:	movw	r2, #65532	; 0xfffc
   185a8:	ldrd	r0, [r4, #28]
   185ac:	ldr	r3, [r4, #64]	; 0x40
   185b0:	add	ip, ip, r7
   185b4:	ldr	r5, [r4, #60]	; 0x3c
   185b8:	sub	r3, r3, r0
   185bc:	cmp	r3, r2
   185c0:	add	r0, r5, r0
   185c4:	movcs	r3, r2
   185c8:	str	r0, [r4, #16]
   185cc:	str	r3, [r4, #24]
   185d0:	str	r2, [r1, #4]
   185d4:	b	1852c <flatcc_builder_table_add_offset@@Base+0x94>
   185d8:	mov	r0, r5
   185dc:	b	1855c <flatcc_builder_table_add_offset@@Base+0xc4>
   185e0:	movw	r1, #40488	; 0x9e28
   185e4:	movt	r1, #1
   185e8:	ldr	r3, [pc, #68]	; 18634 <flatcc_builder_table_add_offset@@Base+0x19c>
   185ec:	movw	r0, #40680	; 0x9ee8
   185f0:	movt	r0, #1
   185f4:	movw	r2, #1819	; 0x71b
   185f8:	bl	11fd4 <__assert_fail@plt>
   185fc:	movw	r1, #40488	; 0x9e28
   18600:	movt	r1, #1
   18604:	ldr	r3, [pc, #40]	; 18634 <flatcc_builder_table_add_offset@@Base+0x19c>
   18608:	movw	r0, #41356	; 0xa18c
   1860c:	movt	r0, #1
   18610:	movw	r2, #1812	; 0x714
   18614:	bl	11fd4 <__assert_fail@plt>
   18618:	movw	r1, #40488	; 0x9e28
   1861c:	movt	r1, #1
   18620:	ldr	r3, [pc, #12]	; 18634 <flatcc_builder_table_add_offset@@Base+0x19c>
   18624:	movw	r0, #41204	; 0xa0f4
   18628:	movt	r0, #1
   1862c:	movw	r2, #1811	; 0x713
   18630:	bl	11fd4 <__assert_fail@plt>
   18634:	andeq	r9, r1, r0, lsr #27

00018638 <flatcc_builder_table_add_union@@Base>:
   18638:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1863c:	strd	r6, [sp, #8]
   18640:	strd	r8, [sp, #16]
   18644:	str	lr, [sp, #24]
   18648:	sub	sp, sp, #20
   1864c:	add	ip, sp, #16
   18650:	stmdb	ip, {r2, r3}
   18654:	ldr	r3, [r0, #32]
   18658:	ldrb	r7, [sp, #8]
   1865c:	ldr	r6, [sp, #12]
   18660:	ldrh	r3, [r3, #14]
   18664:	cmp	r3, #3
   18668:	bne	18824 <flatcc_builder_table_add_union@@Base+0x1ec>
   1866c:	cmp	r7, #0
   18670:	mov	r4, r0
   18674:	mov	r5, r1
   18678:	beq	1875c <flatcc_builder_table_add_union@@Base+0x124>
   1867c:	cmp	r6, #0
   18680:	beq	186a4 <flatcc_builder_table_add_union@@Base+0x6c>
   18684:	bl	18498 <flatcc_builder_table_add_offset@@Base>
   18688:	cmp	r0, #0
   1868c:	beq	18878 <flatcc_builder_table_add_union@@Base+0x240>
   18690:	ldr	r3, [r4, #32]
   18694:	ldrh	r3, [r3, #14]
   18698:	str	r6, [r0]
   1869c:	cmp	r3, #3
   186a0:	bne	18840 <flatcc_builder_table_add_union@@Base+0x208>
   186a4:	sub	r1, r5, #1
   186a8:	movw	r3, #32764	; 0x7ffc
   186ac:	cmp	r1, r3
   186b0:	bhi	1885c <flatcc_builder_table_add_union@@Base+0x224>
   186b4:	ldrh	r3, [r4, #130]	; 0x82
   186b8:	lsl	r8, r1, #1
   186bc:	cmp	r3, #0
   186c0:	moveq	r3, #1
   186c4:	strheq	r3, [r4, #130]	; 0x82
   186c8:	ldr	r3, [r4, #4]
   186cc:	ldrh	r2, [r3, r8]
   186d0:	add	r0, r3, r8
   186d4:	cmp	r2, #0
   186d8:	bne	18808 <flatcc_builder_table_add_union@@Base+0x1d0>
   186dc:	ldr	r2, [r4, #12]
   186e0:	movw	r3, #31153	; 0x79b1
   186e4:	movt	r3, #40503	; 0x9e37
   186e8:	uxth	r6, r1
   186ec:	ldr	r5, [r4, #20]
   186f0:	ldr	ip, [r4, #24]
   186f4:	eor	r1, r1, r2
   186f8:	mul	r1, r3, r1
   186fc:	add	r2, r5, #1
   18700:	cmp	r2, ip
   18704:	str	r2, [r4, #20]
   18708:	eor	r1, r1, #1
   1870c:	mul	r1, r3, r1
   18710:	str	r1, [r4, #12]
   18714:	bcs	18780 <flatcc_builder_table_add_union@@Base+0x148>
   18718:	ldr	r3, [r4, #16]
   1871c:	add	r2, r5, #4
   18720:	strh	r2, [r0]
   18724:	ldrh	r2, [r4, #8]
   18728:	cmp	r2, r6
   1872c:	addls	r6, r6, #1
   18730:	strhls	r6, [r4, #8]
   18734:	cmn	r3, r5
   18738:	beq	187ec <flatcc_builder_table_add_union@@Base+0x1b4>
   1873c:	mov	r0, #0
   18740:	strb	r7, [r3, r5]
   18744:	add	sp, sp, #20
   18748:	ldrd	r4, [sp]
   1874c:	ldrd	r6, [sp, #8]
   18750:	ldrd	r8, [sp, #16]
   18754:	add	sp, sp, #24
   18758:	pop	{pc}		; (ldr pc, [sp], #4)
   1875c:	cmp	r6, #0
   18760:	beq	186a4 <flatcc_builder_table_add_union@@Base+0x6c>
   18764:	movw	r1, #40488	; 0x9e28
   18768:	movt	r1, #1
   1876c:	ldr	r3, [pc, #288]	; 18894 <flatcc_builder_table_add_union@@Base+0x25c>
   18770:	movw	r0, #41424	; 0xa1d0
   18774:	movt	r0, #1
   18778:	movw	r2, #1519	; 0x5ef
   1877c:	bl	11fd4 <__assert_fail@plt>
   18780:	ldr	r2, [r4, #28]
   18784:	mov	r0, #1
   18788:	add	r1, r4, #60	; 0x3c
   1878c:	mov	r3, r0
   18790:	str	r0, [sp]
   18794:	ldr	r0, [r4, #40]	; 0x28
   18798:	add	r2, r5, r2
   1879c:	ldr	r9, [r4, #48]	; 0x30
   187a0:	add	r2, r2, #2
   187a4:	blx	r9
   187a8:	cmp	r0, #0
   187ac:	bne	187ec <flatcc_builder_table_add_union@@Base+0x1b4>
   187b0:	ldr	r0, [r4, #4]
   187b4:	movw	r1, #65532	; 0xfffc
   187b8:	ldr	ip, [r4, #28]
   187bc:	ldr	r2, [r4, #64]	; 0x40
   187c0:	add	r0, r0, r8
   187c4:	ldr	r3, [r4, #60]	; 0x3c
   187c8:	ldr	lr, [r4, #32]
   187cc:	sub	r2, r2, ip
   187d0:	cmp	r2, r1
   187d4:	add	r3, r3, ip
   187d8:	movcs	r2, r1
   187dc:	str	r3, [r4, #16]
   187e0:	str	r2, [r4, #24]
   187e4:	str	r1, [lr, #4]
   187e8:	b	1871c <flatcc_builder_table_add_union@@Base+0xe4>
   187ec:	movw	r1, #40488	; 0x9e28
   187f0:	movt	r1, #1
   187f4:	ldr	r3, [pc, #152]	; 18894 <flatcc_builder_table_add_union@@Base+0x25c>
   187f8:	movw	r0, #41472	; 0xa200
   187fc:	movt	r0, #1
   18800:	movw	r2, #1526	; 0x5f6
   18804:	bl	11fd4 <__assert_fail@plt>
   18808:	movw	r1, #40488	; 0x9e28
   1880c:	movt	r1, #1
   18810:	ldr	r3, [pc, #128]	; 18898 <flatcc_builder_table_add_union@@Base+0x260>
   18814:	movw	r0, #40680	; 0x9ee8
   18818:	movt	r0, #1
   1881c:	movw	r2, #1784	; 0x6f8
   18820:	bl	11fd4 <__assert_fail@plt>
   18824:	movw	r1, #40488	; 0x9e28
   18828:	movt	r1, #1
   1882c:	ldr	r3, [pc, #96]	; 18894 <flatcc_builder_table_add_union@@Base+0x25c>
   18830:	movw	r0, #41204	; 0xa0f4
   18834:	movt	r0, #1
   18838:	movw	r2, #1518	; 0x5ee
   1883c:	bl	11fd4 <__assert_fail@plt>
   18840:	movw	r1, #40488	; 0x9e28
   18844:	movt	r1, #1
   18848:	ldr	r3, [pc, #72]	; 18898 <flatcc_builder_table_add_union@@Base+0x260>
   1884c:	movw	r0, #41204	; 0xa0f4
   18850:	movt	r0, #1
   18854:	movw	r2, #1773	; 0x6ed
   18858:	bl	11fd4 <__assert_fail@plt>
   1885c:	movw	r1, #40488	; 0x9e28
   18860:	movt	r1, #1
   18864:	ldr	r3, [pc, #44]	; 18898 <flatcc_builder_table_add_union@@Base+0x260>
   18868:	movw	r0, #41356	; 0xa18c
   1886c:	movt	r0, #1
   18870:	movw	r2, #1774	; 0x6ee
   18874:	bl	11fd4 <__assert_fail@plt>
   18878:	movw	r1, #40488	; 0x9e28
   1887c:	movt	r1, #1
   18880:	ldr	r3, [pc, #12]	; 18894 <flatcc_builder_table_add_union@@Base+0x25c>
   18884:	movw	r0, #41460	; 0xa1f4
   18888:	movt	r0, #1
   1888c:	movw	r2, #1522	; 0x5f2
   18890:	bl	11fd4 <__assert_fail@plt>
   18894:	andeq	r9, r1, r0, asr #27
   18898:	andeq	r9, r1, r8, ror #26

0001889c <flatcc_builder_table_add_union_vector@@Base>:
   1889c:	strd	r4, [sp, #-20]!	; 0xffffffec
   188a0:	strd	r6, [sp, #8]
   188a4:	mov	r7, r1
   188a8:	str	lr, [sp, #16]
   188ac:	sub	sp, sp, #12
   188b0:	add	r1, sp, #8
   188b4:	stmdb	r1, {r2, r3}
   188b8:	ldr	r3, [r0, #32]
   188bc:	ldm	sp, {r4, r6}
   188c0:	ldrh	r3, [r3, #14]
   188c4:	cmp	r3, #3
   188c8:	bne	18968 <flatcc_builder_table_add_union_vector@@Base+0xcc>
   188cc:	clz	r3, r6
   188d0:	clz	r2, r4
   188d4:	lsr	r3, r3, #5
   188d8:	lsr	r2, r2, #5
   188dc:	cmp	r2, r3
   188e0:	beq	18910 <flatcc_builder_table_add_union_vector@@Base+0x74>
   188e4:	adds	r4, r4, #0
   188e8:	movne	r4, #1
   188ec:	cmp	r4, r3
   188f0:	mvnne	r4, #0
   188f4:	beq	18984 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   188f8:	mov	r0, r4
   188fc:	add	sp, sp, #12
   18900:	ldrd	r4, [sp]
   18904:	ldrd	r6, [sp, #8]
   18908:	add	sp, sp, #16
   1890c:	pop	{pc}		; (ldr pc, [sp], #4)
   18910:	cmp	r4, #0
   18914:	beq	188f8 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   18918:	sub	r1, r7, #1
   1891c:	mov	r5, r0
   18920:	bl	18498 <flatcc_builder_table_add_offset@@Base>
   18924:	subs	r3, r0, #0
   18928:	beq	189a0 <flatcc_builder_table_add_union_vector@@Base+0x104>
   1892c:	mov	r1, r7
   18930:	mov	r0, r5
   18934:	str	r4, [r3]
   18938:	bl	18498 <flatcc_builder_table_add_offset@@Base>
   1893c:	cmp	r0, #0
   18940:	movne	r4, #0
   18944:	strne	r6, [r0]
   18948:	bne	188f8 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   1894c:	movw	r1, #40488	; 0x9e28
   18950:	movt	r1, #1
   18954:	ldr	r3, [pc, #96]	; 189bc <flatcc_builder_table_add_union_vector@@Base+0x120>
   18958:	movw	r0, #41460	; 0xa1f4
   1895c:	movt	r0, #1
   18960:	movw	r2, #1544	; 0x608
   18964:	bl	11fd4 <__assert_fail@plt>
   18968:	movw	r1, #40488	; 0x9e28
   1896c:	movt	r1, #1
   18970:	ldr	r3, [pc, #68]	; 189bc <flatcc_builder_table_add_union_vector@@Base+0x120>
   18974:	movw	r0, #41204	; 0xa0f4
   18978:	movt	r0, #1
   1897c:	mov	r2, #1536	; 0x600
   18980:	bl	11fd4 <__assert_fail@plt>
   18984:	movw	r1, #40488	; 0x9e28
   18988:	movt	r1, #1
   1898c:	ldr	r3, [pc, #40]	; 189bc <flatcc_builder_table_add_union_vector@@Base+0x120>
   18990:	movw	r0, #41484	; 0xa20c
   18994:	movt	r0, #1
   18998:	movw	r2, #1537	; 0x601
   1899c:	bl	11fd4 <__assert_fail@plt>
   189a0:	movw	r1, #40488	; 0x9e28
   189a4:	movt	r1, #1
   189a8:	ldr	r3, [pc, #12]	; 189bc <flatcc_builder_table_add_union_vector@@Base+0x120>
   189ac:	movw	r0, #41460	; 0xa1f4
   189b0:	movt	r0, #1
   189b4:	movw	r2, #1540	; 0x604
   189b8:	bl	11fd4 <__assert_fail@plt>
   189bc:	andeq	r9, r1, r0, ror #27

000189c0 <flatcc_builder_push_buffer_alignment@@Base>:
   189c0:	mov	r3, r0
   189c4:	mov	r2, #4
   189c8:	ldrh	r0, [r0, #128]	; 0x80
   189cc:	strh	r2, [r3, #128]	; 0x80
   189d0:	bx	lr

000189d4 <flatcc_builder_pop_buffer_alignment@@Base>:
   189d4:	ldrh	r3, [r0, #128]	; 0x80
   189d8:	cmp	r3, r1
   189dc:	strhcc	r1, [r0, #128]	; 0x80
   189e0:	bx	lr

000189e4 <flatcc_builder_get_buffer_alignment@@Base>:
   189e4:	ldrh	r0, [r0, #128]	; 0x80
   189e8:	bx	lr

000189ec <flatcc_builder_set_vtable_clustering@@Base>:
   189ec:	clz	r1, r1
   189f0:	lsr	r1, r1, #5
   189f4:	str	r1, [r0, #180]	; 0xb4
   189f8:	bx	lr

000189fc <flatcc_builder_set_block_align@@Base>:
   189fc:	strh	r1, [r0, #132]	; 0x84
   18a00:	bx	lr

00018a04 <flatcc_builder_get_level@@Base>:
   18a04:	ldr	r0, [r0, #156]	; 0x9c
   18a08:	bx	lr

00018a0c <flatcc_builder_set_max_level@@Base>:
   18a0c:	ldr	r3, [r0, #160]	; 0xa0
   18a10:	str	r1, [r0, #176]	; 0xb0
   18a14:	cmp	r3, r1
   18a18:	strlt	r1, [r0, #160]	; 0xa0
   18a1c:	bx	lr

00018a20 <flatcc_builder_get_buffer_size@@Base>:
   18a20:	ldr	r3, [r0, #136]	; 0x88
   18a24:	ldr	r0, [r0, #140]	; 0x8c
   18a28:	sub	r0, r0, r3
   18a2c:	bx	lr

00018a30 <flatcc_builder_get_buffer_start@@Base>:
   18a30:	ldr	r0, [r0, #136]	; 0x88
   18a34:	bx	lr

00018a38 <flatcc_builder_get_buffer_end@@Base>:
   18a38:	ldr	r0, [r0, #140]	; 0x8c
   18a3c:	bx	lr

00018a40 <flatcc_builder_set_vtable_cache_limit@@Base>:
   18a40:	str	r1, [r0, #172]	; 0xac
   18a44:	bx	lr

00018a48 <flatcc_builder_set_identifier@@Base>:
   18a48:	ldr	r3, [pc, #16]	; 18a60 <flatcc_builder_set_identifier@@Base+0x18>
   18a4c:	cmp	r1, #0
   18a50:	moveq	r1, r3
   18a54:	ldr	r3, [r1]
   18a58:	str	r3, [r0, #168]	; 0xa8
   18a5c:	bx	lr
   18a60:	andeq	r9, r1, r0, lsl #15

00018a64 <flatcc_builder_get_type@@Base>:
   18a64:	ldr	r0, [r0, #32]
   18a68:	cmp	r0, #0
   18a6c:	ldrhne	r0, [r0, #14]
   18a70:	bx	lr

00018a74 <flatcc_builder_get_type_at@@Base>:
   18a74:	cmp	r1, #0
   18a78:	ble	18aa0 <flatcc_builder_get_type_at@@Base+0x2c>
   18a7c:	ldr	r3, [r0, #156]	; 0x9c
   18a80:	cmp	r3, r1
   18a84:	blt	18aa0 <flatcc_builder_get_type_at@@Base+0x2c>
   18a88:	ldr	r2, [r0, #32]
   18a8c:	sub	r1, r1, r3
   18a90:	add	r1, r1, r1, lsl #3
   18a94:	add	r1, r2, r1, lsl #2
   18a98:	ldrh	r0, [r1, #14]
   18a9c:	bx	lr
   18aa0:	mov	r0, #0
   18aa4:	bx	lr

00018aa8 <flatcc_builder_get_direct_buffer@@Base>:
   18aa8:	ldr	r3, [r0, #184]	; 0xb8
   18aac:	cmp	r3, #0
   18ab0:	bne	18acc <flatcc_builder_get_direct_buffer@@Base+0x24>
   18ab4:	cmp	r1, #0
   18ab8:	movne	r3, #0
   18abc:	movne	r0, r3
   18ac0:	moveq	r0, r1
   18ac4:	strne	r3, [r1]
   18ac8:	bx	lr
   18acc:	ldrd	r2, [r0, #188]	; 0xbc
   18ad0:	cmp	r2, r3
   18ad4:	bne	18ab4 <flatcc_builder_get_direct_buffer@@Base+0xc>
   18ad8:	cmp	r1, #0
   18adc:	ldrne	r3, [r0, #212]	; 0xd4
   18ae0:	ldr	r0, [r0, #196]	; 0xc4
   18ae4:	strne	r3, [r1]
   18ae8:	bx	lr

00018aec <flatcc_builder_copy_buffer@@Base>:
   18aec:	ldr	r3, [r0, #184]	; 0xb8
   18af0:	cmp	r3, #0
   18af4:	beq	18b1c <flatcc_builder_copy_buffer@@Base+0x30>
   18af8:	add	r0, r0, #188	; 0xbc
   18afc:	str	r4, [sp, #-8]!
   18b00:	str	lr, [sp, #4]
   18b04:	bl	19258 <flatcc_emitter_copy_buffer@@Base>
   18b08:	cmp	r0, #0
   18b0c:	beq	18b24 <flatcc_builder_copy_buffer@@Base+0x38>
   18b10:	ldr	r4, [sp]
   18b14:	add	sp, sp, #4
   18b18:	pop	{pc}		; (ldr pc, [sp], #4)
   18b1c:	mov	r0, r3
   18b20:	bx	lr
   18b24:	bl	133b8 <flatcc_builder_default_alloc@@Base+0x23c>

00018b28 <flatcc_builder_finalize_buffer@@Base>:
   18b28:	strd	r4, [sp, #-16]!
   18b2c:	cmp	r1, #0
   18b30:	mov	r5, r0
   18b34:	ldr	r2, [r0, #136]	; 0x88
   18b38:	ldr	r4, [r0, #140]	; 0x8c
   18b3c:	str	r6, [sp, #8]
   18b40:	str	lr, [sp, #12]
   18b44:	sub	r4, r4, r2
   18b48:	mov	r0, r4
   18b4c:	strne	r4, [r1]
   18b50:	bl	11f74 <malloc@plt>
   18b54:	subs	r6, r0, #0
   18b58:	beq	18bb0 <flatcc_builder_finalize_buffer@@Base+0x88>
   18b5c:	ldr	r3, [r5, #184]	; 0xb8
   18b60:	cmp	r3, #0
   18b64:	beq	18b94 <flatcc_builder_finalize_buffer@@Base+0x6c>
   18b68:	mov	r2, r4
   18b6c:	add	r0, r5, #188	; 0xbc
   18b70:	mov	r1, r6
   18b74:	bl	19258 <flatcc_emitter_copy_buffer@@Base>
   18b78:	cmp	r0, #0
   18b7c:	beq	18bcc <flatcc_builder_finalize_buffer@@Base+0xa4>
   18b80:	mov	r0, r6
   18b84:	ldrd	r4, [sp]
   18b88:	ldr	r6, [sp, #8]
   18b8c:	add	sp, sp, #12
   18b90:	pop	{pc}		; (ldr pc, [sp], #4)
   18b94:	movw	r1, #40488	; 0x9e28
   18b98:	movt	r1, #1
   18b9c:	ldr	r3, [pc, #44]	; 18bd0 <flatcc_builder_finalize_buffer@@Base+0xa8>
   18ba0:	movw	r0, #40680	; 0x9ee8
   18ba4:	movt	r0, #1
   18ba8:	movw	r2, #1948	; 0x79c
   18bac:	bl	11fd4 <__assert_fail@plt>
   18bb0:	movw	r1, #40488	; 0x9e28
   18bb4:	movt	r1, #1
   18bb8:	ldr	r3, [pc, #16]	; 18bd0 <flatcc_builder_finalize_buffer@@Base+0xa8>
   18bbc:	movw	r0, #40680	; 0x9ee8
   18bc0:	movt	r0, #1
   18bc4:	movw	r2, #1944	; 0x798
   18bc8:	bl	11fd4 <__assert_fail@plt>
   18bcc:	bl	133b8 <flatcc_builder_default_alloc@@Base+0x23c>
   18bd0:	andeq	r9, r1, r8, lsl #28

00018bd4 <flatcc_builder_finalize_aligned_buffer@@Base>:
   18bd4:	strd	r4, [sp, #-20]!	; 0xffffffec
   18bd8:	mov	r2, #0
   18bdc:	mov	r5, r0
   18be0:	ldr	r3, [r0, #136]	; 0x88
   18be4:	ldr	r4, [r0, #140]	; 0x8c
   18be8:	strd	r6, [sp, #8]
   18bec:	subs	r6, r1, #0
   18bf0:	ldrh	r1, [r0, #128]	; 0x80
   18bf4:	str	lr, [sp, #16]
   18bf8:	sub	sp, sp, #12
   18bfc:	add	r0, sp, #4
   18c00:	sub	r3, r4, r3
   18c04:	str	r2, [sp, #4]
   18c08:	sub	r4, r1, #1
   18c0c:	rsb	r2, r1, #0
   18c10:	strne	r3, [r6]
   18c14:	add	r4, r4, r3
   18c18:	cmp	r1, #4
   18c1c:	and	r4, r4, r2
   18c20:	movcc	r1, #4
   18c24:	mov	r2, r4
   18c28:	bl	11fa4 <posix_memalign@plt>
   18c2c:	cmp	r0, #0
   18c30:	beq	18c70 <flatcc_builder_finalize_aligned_buffer@@Base+0x9c>
   18c34:	ldr	r0, [sp, #4]
   18c38:	cmp	r0, #0
   18c3c:	beq	18c44 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   18c40:	bl	11f38 <free@plt>
   18c44:	cmp	r6, #0
   18c48:	movne	r3, #0
   18c4c:	moveq	r7, r6
   18c50:	movne	r7, r3
   18c54:	strne	r3, [r6]
   18c58:	mov	r0, r7
   18c5c:	add	sp, sp, #12
   18c60:	ldrd	r4, [sp]
   18c64:	ldrd	r6, [sp, #8]
   18c68:	add	sp, sp, #16
   18c6c:	pop	{pc}		; (ldr pc, [sp], #4)
   18c70:	ldr	r7, [sp, #4]
   18c74:	cmp	r7, #0
   18c78:	beq	18c44 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   18c7c:	ldr	r3, [r5, #184]	; 0xb8
   18c80:	cmp	r3, #0
   18c84:	beq	18ca4 <flatcc_builder_finalize_aligned_buffer@@Base+0xd0>
   18c88:	mov	r2, r4
   18c8c:	add	r0, r5, #188	; 0xbc
   18c90:	mov	r1, r7
   18c94:	bl	19258 <flatcc_emitter_copy_buffer@@Base>
   18c98:	cmp	r0, #0
   18c9c:	bne	18c58 <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   18ca0:	bl	133b8 <flatcc_builder_default_alloc@@Base+0x23c>
   18ca4:	mov	r0, r7
   18ca8:	b	18c40 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>

00018cac <flatcc_builder_aligned_alloc@@Base>:
   18cac:	cmp	r0, #4
   18cb0:	str	r4, [sp, #-8]!
   18cb4:	mov	r4, #0
   18cb8:	str	lr, [sp, #4]
   18cbc:	sub	sp, sp, #8
   18cc0:	mov	r2, r1
   18cc4:	movcs	r1, r0
   18cc8:	movcc	r1, #4
   18ccc:	add	r0, sp, #4
   18cd0:	str	r4, [sp, #4]
   18cd4:	bl	11fa4 <posix_memalign@plt>
   18cd8:	cmp	r0, r4
   18cdc:	ldr	r0, [sp, #4]
   18ce0:	beq	18cf4 <flatcc_builder_aligned_alloc@@Base+0x48>
   18ce4:	cmp	r0, #0
   18ce8:	beq	18cf4 <flatcc_builder_aligned_alloc@@Base+0x48>
   18cec:	bl	11f38 <free@plt>
   18cf0:	mov	r0, r4
   18cf4:	add	sp, sp, #8
   18cf8:	ldr	r4, [sp]
   18cfc:	add	sp, sp, #4
   18d00:	pop	{pc}		; (ldr pc, [sp], #4)

00018d04 <flatcc_builder_aligned_free@@Base>:
   18d04:	b	11f38 <free@plt>

00018d08 <flatcc_builder_get_emit_context@@Base>:
   18d08:	ldr	r0, [r0, #36]	; 0x24
   18d0c:	bx	lr

00018d10 <flatcc_emitter_recycle_page@@Base>:
   18d10:	ldr	r3, [r0]
   18d14:	cmp	r3, r1
   18d18:	beq	18d5c <flatcc_emitter_recycle_page@@Base+0x4c>
   18d1c:	ldr	r2, [r0, #4]
   18d20:	cmp	r2, r1
   18d24:	beq	18d5c <flatcc_emitter_recycle_page@@Base+0x4c>
   18d28:	push	{lr}		; (str lr, [sp, #-4]!)
   18d2c:	mov	r0, #0
   18d30:	ldr	lr, [r1, #2944]	; 0xb80
   18d34:	ldr	ip, [r1, #2948]	; 0xb84
   18d38:	str	ip, [lr, #2948]	; 0xb84
   18d3c:	ldr	r2, [r3, #2948]	; 0xb84
   18d40:	str	lr, [ip, #2944]	; 0xb80
   18d44:	str	r3, [r1, #2944]	; 0xb80
   18d48:	str	r2, [r1, #2948]	; 0xb84
   18d4c:	str	r1, [r2, #2944]	; 0xb80
   18d50:	ldr	r3, [r1, #2944]	; 0xb80
   18d54:	str	r1, [r3, #2948]	; 0xb84
   18d58:	pop	{pc}		; (ldr pc, [sp], #4)
   18d5c:	mvn	r0, #0
   18d60:	bx	lr

00018d64 <flatcc_emitter_reset@@Base>:
   18d64:	ldr	r2, [r0]
   18d68:	cmp	r2, #0
   18d6c:	bxeq	lr
   18d70:	strd	r4, [sp, #-16]!
   18d74:	movw	ip, #64064	; 0xfa40
   18d78:	movt	ip, #65535	; 0xffff
   18d7c:	ldr	r1, [r0, #24]
   18d80:	add	r4, r2, #1472	; 0x5c0
   18d84:	ldr	r3, [r0, #32]
   18d88:	ldr	r5, [r0, #28]
   18d8c:	str	r6, [sp, #8]
   18d90:	str	lr, [sp, #12]
   18d94:	mov	lr, #1472	; 0x5c0
   18d98:	cmp	r3, #0
   18d9c:	stmib	r0, {r2, r4}
   18da0:	moveq	r3, r1
   18da4:	lsr	r1, r1, #2
   18da8:	str	lr, [r0, #12]
   18dac:	add	r3, r3, r3, lsl #1
   18db0:	str	r4, [r0, #16]
   18db4:	str	lr, [r0, #20]
   18db8:	add	r3, r1, r3, lsr #2
   18dbc:	str	ip, [r2, #2952]	; 0xb88
   18dc0:	mov	ip, #0
   18dc4:	cmp	r5, r3, lsl #1
   18dc8:	str	ip, [r0, #24]
   18dcc:	str	r3, [r0, #32]
   18dd0:	bls	18e28 <flatcc_emitter_reset@@Base+0xc4>
   18dd4:	ldr	r3, [r2, #2944]	; 0xb80
   18dd8:	mov	r4, r0
   18ddc:	cmp	r2, r3
   18de0:	bne	18df8 <flatcc_emitter_reset@@Base+0x94>
   18de4:	b	18e28 <flatcc_emitter_reset@@Base+0xc4>
   18de8:	ldm	r4, {r1, r2}
   18dec:	ldr	r3, [r2, #2944]	; 0xb80
   18df0:	cmp	r3, r1
   18df4:	beq	18e28 <flatcc_emitter_reset@@Base+0xc4>
   18df8:	ldr	r1, [r3, #2944]	; 0xb80
   18dfc:	mov	r0, r3
   18e00:	str	r1, [r2, #2944]	; 0xb80
   18e04:	ldr	r3, [r3, #2944]	; 0xb80
   18e08:	str	r2, [r3, #2948]	; 0xb84
   18e0c:	bl	11f38 <free@plt>
   18e10:	ldr	r3, [r4, #28]
   18e14:	ldr	r2, [r4, #32]
   18e18:	sub	r3, r3, #2944	; 0xb80
   18e1c:	cmp	r3, r2, lsl #1
   18e20:	str	r3, [r4, #28]
   18e24:	bhi	18de8 <flatcc_emitter_reset@@Base+0x84>
   18e28:	ldrd	r4, [sp]
   18e2c:	ldr	r6, [sp, #8]
   18e30:	add	sp, sp, #12
   18e34:	pop	{pc}		; (ldr pc, [sp], #4)

00018e38 <flatcc_emitter_clear@@Base>:
   18e38:	ldr	r3, [r0]
   18e3c:	cmp	r3, #0
   18e40:	bxeq	lr
   18e44:	mov	r1, #0
   18e48:	strd	r4, [sp, #-16]!
   18e4c:	mov	r5, r0
   18e50:	ldr	r2, [r3, #2948]	; 0xb84
   18e54:	str	r6, [sp, #8]
   18e58:	str	lr, [sp, #12]
   18e5c:	str	r1, [r2, #2944]	; 0xb80
   18e60:	ldr	r4, [r3, #2944]	; 0xb80
   18e64:	cmp	r4, r1
   18e68:	bne	18e74 <flatcc_emitter_clear@@Base+0x3c>
   18e6c:	b	18eb0 <flatcc_emitter_clear@@Base+0x78>
   18e70:	mov	r4, r3
   18e74:	ldr	r0, [r4, #2948]	; 0xb84
   18e78:	bl	11f38 <free@plt>
   18e7c:	ldr	r3, [r4, #2944]	; 0xb80
   18e80:	cmp	r3, #0
   18e84:	bne	18e70 <flatcc_emitter_clear@@Base+0x38>
   18e88:	mov	r0, r4
   18e8c:	bl	11f38 <free@plt>
   18e90:	mov	r0, r5
   18e94:	mov	r2, #36	; 0x24
   18e98:	ldrd	r4, [sp]
   18e9c:	mov	r1, #0
   18ea0:	ldr	r6, [sp, #8]
   18ea4:	ldr	lr, [sp, #12]
   18ea8:	add	sp, sp, #16
   18eac:	b	11fb0 <memset@plt>
   18eb0:	mov	r4, r3
   18eb4:	b	18e88 <flatcc_emitter_clear@@Base+0x50>

00018eb8 <flatcc_emitter@@Base>:
   18eb8:	cmp	r3, #0
   18ebc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18ec0:	mov	r4, r0
   18ec4:	ldr	r3, [r0, #24]
   18ec8:	strd	r6, [sp, #8]
   18ecc:	strd	r8, [sp, #16]
   18ed0:	sub	r8, r2, #1
   18ed4:	strd	sl, [sp, #24]
   18ed8:	str	lr, [sp, #32]
   18edc:	sub	sp, sp, #12
   18ee0:	ldr	ip, [sp, #48]	; 0x30
   18ee4:	add	r3, r3, ip
   18ee8:	str	r3, [r0, #24]
   18eec:	blt	190d0 <flatcc_emitter@@Base+0x218>
   18ef0:	ldr	r0, [r0, #20]
   18ef4:	cmp	r0, ip
   18ef8:	bcs	18f90 <flatcc_emitter@@Base+0xd8>
   18efc:	cmp	r2, #0
   18f00:	beq	18fd4 <flatcc_emitter@@Base+0x11c>
   18f04:	movw	r3, #64064	; 0xfa40
   18f08:	movt	r3, #65535	; 0xffff
   18f0c:	add	r5, r1, #8
   18f10:	mov	r8, r2
   18f14:	mov	r9, #1472	; 0x5c0
   18f18:	str	r3, [sp, #4]
   18f1c:	ldr	r7, [r5, #-8]
   18f20:	ldr	r6, [r5, #-4]
   18f24:	cmp	r6, #0
   18f28:	beq	1906c <flatcc_emitter@@Base+0x1b4>
   18f2c:	mov	r3, r0
   18f30:	cmp	r6, r3
   18f34:	bls	18f88 <flatcc_emitter@@Base+0xd0>
   18f38:	cmp	r3, #0
   18f3c:	beq	18ff4 <flatcc_emitter@@Base+0x13c>
   18f40:	sub	fp, r6, r3
   18f44:	mov	r6, r3
   18f48:	mov	r2, r6
   18f4c:	mov	r1, r7
   18f50:	ldr	r0, [r4, #16]
   18f54:	bl	11f44 <memcpy@plt>
   18f58:	ldr	r2, [r4, #16]
   18f5c:	cmp	fp, #0
   18f60:	add	r7, r7, r6
   18f64:	ldr	r0, [r4, #20]
   18f68:	add	r2, r2, r6
   18f6c:	sub	r3, r0, r6
   18f70:	mov	r0, r3
   18f74:	strd	r2, [r4, #16]
   18f78:	beq	1906c <flatcc_emitter@@Base+0x1b4>
   18f7c:	mov	r6, fp
   18f80:	cmp	r6, r3
   18f84:	bhi	18f38 <flatcc_emitter@@Base+0x80>
   18f88:	mov	fp, #0
   18f8c:	b	18f48 <flatcc_emitter@@Base+0x90>
   18f90:	ldr	r3, [r4, #16]
   18f94:	sub	r0, r0, ip
   18f98:	str	r0, [r4, #20]
   18f9c:	add	ip, r3, ip
   18fa0:	str	ip, [r4, #16]
   18fa4:	cmp	r2, #0
   18fa8:	addne	r4, r1, #8
   18fac:	beq	18fd4 <flatcc_emitter@@Base+0x11c>
   18fb0:	mov	r0, r3
   18fb4:	ldmdb	r4, {r1, r2}
   18fb8:	sub	r8, r8, #1
   18fbc:	bl	11f44 <memcpy@plt>
   18fc0:	ldr	r2, [r4, #-4]
   18fc4:	cmn	r8, #1
   18fc8:	add	r4, r4, #8
   18fcc:	add	r3, r0, r2
   18fd0:	bne	18fb0 <flatcc_emitter@@Base+0xf8>
   18fd4:	mov	r0, #0
   18fd8:	add	sp, sp, #12
   18fdc:	ldrd	r4, [sp]
   18fe0:	ldrd	r6, [sp, #8]
   18fe4:	ldrd	r8, [sp, #16]
   18fe8:	ldrd	sl, [sp, #24]
   18fec:	add	sp, sp, #32
   18ff0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ff4:	ldr	fp, [r4, #4]
   18ff8:	cmp	fp, #0
   18ffc:	beq	1907c <flatcc_emitter@@Base+0x1c4>
   19000:	ldr	sl, [r4]
   19004:	ldr	r0, [fp, #2944]	; 0xb80
   19008:	cmp	r0, sl
   1900c:	beq	19038 <flatcc_emitter@@Base+0x180>
   19010:	str	r0, [r4, #4]
   19014:	ldr	r1, [r0, #2948]	; 0xb84
   19018:	mov	r2, #2944	; 0xb80
   1901c:	mov	r3, r2
   19020:	str	r0, [r4, #16]
   19024:	str	r2, [r4, #20]
   19028:	ldr	r2, [r1, #2952]	; 0xb88
   1902c:	add	r2, r2, r3
   19030:	str	r2, [r0, #2952]	; 0xb88
   19034:	b	18f30 <flatcc_emitter@@Base+0x78>
   19038:	movw	r0, #2956	; 0xb8c
   1903c:	bl	11f74 <malloc@plt>
   19040:	cmp	r0, #0
   19044:	beq	190c8 <flatcc_emitter@@Base+0x210>
   19048:	ldr	r2, [r4, #28]
   1904c:	str	sl, [r0, #2944]	; 0xb80
   19050:	str	fp, [r0, #2948]	; 0xb84
   19054:	add	r2, r2, #2944	; 0xb80
   19058:	str	r2, [r4, #28]
   1905c:	str	r0, [sl, #2948]	; 0xb84
   19060:	str	r0, [fp, #2944]	; 0xb80
   19064:	str	r0, [r4, #4]
   19068:	b	19014 <flatcc_emitter@@Base+0x15c>
   1906c:	subs	r8, r8, #1
   19070:	add	r5, r5, #8
   19074:	bne	18f1c <flatcc_emitter@@Base+0x64>
   19078:	b	18fd4 <flatcc_emitter@@Base+0x11c>
   1907c:	movw	r0, #2956	; 0xb8c
   19080:	bl	11f74 <malloc@plt>
   19084:	cmp	r0, #0
   19088:	beq	190c8 <flatcc_emitter@@Base+0x210>
   1908c:	ldr	r2, [r4, #28]
   19090:	add	r1, r0, #1472	; 0x5c0
   19094:	mov	r3, #1472	; 0x5c0
   19098:	str	r0, [r4]
   1909c:	strd	r0, [r4, #4]
   190a0:	str	r9, [r4, #12]
   190a4:	str	r1, [r4, #16]
   190a8:	add	r2, r2, #2944	; 0xb80
   190ac:	str	r9, [r4, #20]
   190b0:	str	r0, [r0, #2944]	; 0xb80
   190b4:	str	r2, [r4, #28]
   190b8:	ldr	r2, [sp, #4]
   190bc:	str	r0, [r0, #2948]	; 0xb84
   190c0:	str	r2, [r0, #2952]	; 0xb88
   190c4:	b	18f30 <flatcc_emitter@@Base+0x78>
   190c8:	mvn	r0, #0
   190cc:	b	18fd8 <flatcc_emitter@@Base+0x120>
   190d0:	ldr	r0, [r0, #12]
   190d4:	cmp	r0, ip
   190d8:	bcs	19240 <flatcc_emitter@@Base+0x388>
   190dc:	add	r5, r1, r2, lsl #3
   190e0:	movw	r3, #64064	; 0xfa40
   190e4:	movt	r3, #65535	; 0xffff
   190e8:	str	r3, [sp, #4]
   190ec:	cmn	r8, #1
   190f0:	beq	18fd4 <flatcc_emitter@@Base+0x11c>
   190f4:	ldr	r7, [r5, #-8]
   190f8:	ldr	r6, [r5, #-4]
   190fc:	cmp	r6, #0
   19100:	add	r7, r7, r6
   19104:	beq	19154 <flatcc_emitter@@Base+0x29c>
   19108:	mov	r9, #1472	; 0x5c0
   1910c:	ldr	r2, [r4, #12]
   19110:	cmp	r2, r6
   19114:	bcs	191b8 <flatcc_emitter@@Base+0x300>
   19118:	cmp	r2, #0
   1911c:	beq	19160 <flatcc_emitter@@Base+0x2a8>
   19120:	sub	r6, r6, r2
   19124:	mov	r1, #0
   19128:	ldr	r3, [r4, #8]
   1912c:	rsb	r0, r2, #0
   19130:	add	r7, r7, r0
   19134:	str	r1, [r4, #12]
   19138:	mov	r1, r7
   1913c:	add	r3, r3, r0
   19140:	mov	r0, r3
   19144:	str	r3, [r4, #8]
   19148:	bl	11f44 <memcpy@plt>
   1914c:	cmp	r6, #0
   19150:	bne	1910c <flatcc_emitter@@Base+0x254>
   19154:	sub	r5, r5, #8
   19158:	sub	r8, r8, #1
   1915c:	b	190ec <flatcc_emitter@@Base+0x234>
   19160:	ldr	fp, [r4]
   19164:	cmp	fp, #0
   19168:	beq	191fc <flatcc_emitter@@Base+0x344>
   1916c:	ldr	sl, [r4, #4]
   19170:	ldr	r0, [fp, #2948]	; 0xb84
   19174:	cmp	r0, sl
   19178:	beq	191c8 <flatcc_emitter@@Base+0x310>
   1917c:	ldr	r3, [fp, #2952]	; 0xb88
   19180:	sub	r3, r3, #2944	; 0xb80
   19184:	str	r3, [r0, #2952]	; 0xb88
   19188:	str	r0, [r4]
   1918c:	ldr	r3, [r0, #2944]	; 0xb80
   19190:	mov	r2, #2944	; 0xb80
   19194:	add	r1, r0, #2944	; 0xb80
   19198:	ldr	r3, [r3, #2952]	; 0xb88
   1919c:	str	r1, [r4, #8]
   191a0:	str	r2, [r4, #12]
   191a4:	sub	r3, r3, #2944	; 0xb80
   191a8:	str	r3, [r0, #2952]	; 0xb88
   191ac:	ldr	r2, [r4, #12]
   191b0:	cmp	r2, r6
   191b4:	bcc	19118 <flatcc_emitter@@Base+0x260>
   191b8:	sub	r1, r2, r6
   191bc:	mov	r2, r6
   191c0:	mov	r6, #0
   191c4:	b	19128 <flatcc_emitter@@Base+0x270>
   191c8:	movw	r0, #2956	; 0xb8c
   191cc:	bl	11f74 <malloc@plt>
   191d0:	cmp	r0, #0
   191d4:	beq	190c8 <flatcc_emitter@@Base+0x210>
   191d8:	ldr	r2, [r4, #28]
   191dc:	str	fp, [r0, #2944]	; 0xb80
   191e0:	str	sl, [r0, #2948]	; 0xb84
   191e4:	add	r2, r2, #2944	; 0xb80
   191e8:	str	r2, [r4, #28]
   191ec:	str	r0, [fp, #2948]	; 0xb84
   191f0:	str	r0, [sl, #2944]	; 0xb80
   191f4:	str	r0, [r4]
   191f8:	b	1918c <flatcc_emitter@@Base+0x2d4>
   191fc:	movw	r0, #2956	; 0xb8c
   19200:	bl	11f74 <malloc@plt>
   19204:	cmp	r0, #0
   19208:	beq	190c8 <flatcc_emitter@@Base+0x210>
   1920c:	ldr	r3, [r4, #28]
   19210:	add	r2, r0, #1472	; 0x5c0
   19214:	str	r0, [r4]
   19218:	stmib	r4, {r0, r2, r9}
   1921c:	add	r3, r3, #2944	; 0xb80
   19220:	str	r2, [r4, #16]
   19224:	str	r9, [r4, #20]
   19228:	str	r3, [r4, #28]
   1922c:	ldr	r3, [sp, #4]
   19230:	str	r0, [r0, #2944]	; 0xb80
   19234:	str	r0, [r0, #2948]	; 0xb84
   19238:	str	r3, [r0, #2952]	; 0xb88
   1923c:	b	1910c <flatcc_emitter@@Base+0x254>
   19240:	ldr	r3, [r4, #8]
   19244:	sub	r0, r0, ip
   19248:	str	r0, [r4, #12]
   1924c:	sub	r3, r3, ip
   19250:	str	r3, [r4, #8]
   19254:	b	18fa4 <flatcc_emitter@@Base+0xec>

00019258 <flatcc_emitter_copy_buffer@@Base>:
   19258:	ldr	r3, [r0, #24]
   1925c:	strd	r4, [sp, #-16]!
   19260:	str	r6, [sp, #8]
   19264:	str	lr, [sp, #12]
   19268:	cmp	r3, r2
   1926c:	movhi	r5, #0
   19270:	bhi	192f0 <flatcc_emitter_copy_buffer@@Base+0x98>
   19274:	ldr	r5, [r0]
   19278:	mov	r6, r0
   1927c:	cmp	r5, #0
   19280:	beq	192f0 <flatcc_emitter_copy_buffer@@Base+0x98>
   19284:	ldr	r2, [r6, #4]
   19288:	mov	r0, r1
   1928c:	ldr	r1, [r6, #8]
   19290:	cmp	r5, r2
   19294:	beq	19304 <flatcc_emitter_copy_buffer@@Base+0xac>
   19298:	ldr	r2, [r6, #12]
   1929c:	rsb	r2, r2, #2944	; 0xb80
   192a0:	add	r5, r0, r2
   192a4:	bl	11f44 <memcpy@plt>
   192a8:	ldrd	r2, [r6]
   192ac:	ldr	r4, [r2, #2944]	; 0xb80
   192b0:	cmp	r4, r3
   192b4:	beq	192dc <flatcc_emitter_copy_buffer@@Base+0x84>
   192b8:	mov	r2, #2944	; 0xb80
   192bc:	mov	r1, r4
   192c0:	mov	r0, r5
   192c4:	add	r5, r5, r2
   192c8:	bl	11f44 <memcpy@plt>
   192cc:	ldr	r3, [r6, #4]
   192d0:	ldr	r4, [r4, #2944]	; 0xb80
   192d4:	cmp	r3, r4
   192d8:	bne	192b8 <flatcc_emitter_copy_buffer@@Base+0x60>
   192dc:	ldr	r2, [r6, #20]
   192e0:	mov	r1, r4
   192e4:	mov	r0, r5
   192e8:	rsb	r2, r2, #2944	; 0xb80
   192ec:	bl	11f44 <memcpy@plt>
   192f0:	mov	r0, r5
   192f4:	ldrd	r4, [sp]
   192f8:	ldr	r6, [sp, #8]
   192fc:	add	sp, sp, #12
   19300:	pop	{pc}		; (ldr pc, [sp], #4)
   19304:	mov	r2, r3
   19308:	mov	r5, r0
   1930c:	bl	11f44 <memcpy@plt>
   19310:	b	192f0 <flatcc_emitter_copy_buffer@@Base+0x98>

00019314 <__libc_csu_init@@Base>:
   19314:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19318:	mov	r7, r0
   1931c:	ldr	r6, [pc, #72]	; 1936c <__libc_csu_init@@Base+0x58>
   19320:	ldr	r5, [pc, #72]	; 19370 <__libc_csu_init@@Base+0x5c>
   19324:	add	r6, pc, r6
   19328:	add	r5, pc, r5
   1932c:	sub	r6, r6, r5
   19330:	mov	r8, r1
   19334:	mov	r9, r2
   19338:	bl	11f0c <strcmp@plt-0x20>
   1933c:	asrs	r6, r6, #2
   19340:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19344:	mov	r4, #0
   19348:	add	r4, r4, #1
   1934c:	ldr	r3, [r5], #4
   19350:	mov	r2, r9
   19354:	mov	r1, r8
   19358:	mov	r0, r7
   1935c:	blx	r3
   19360:	cmp	r6, r4
   19364:	bne	19348 <__libc_csu_init@@Base+0x34>
   19368:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1936c:	andeq	r1, r1, r8, ror #23
   19370:	andeq	r1, r1, r0, ror #23

00019374 <__libc_csu_fini@@Base>:
   19374:	bx	lr

Disassembly of section .fini:

00019378 <.fini>:
   19378:	push	{r3, lr}
   1937c:	pop	{r3, pc}
